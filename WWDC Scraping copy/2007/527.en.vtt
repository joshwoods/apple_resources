WEBVTT

00:00:16.100 --> 00:00:18.950
This is the iCal Server Platform.

00:00:18.949 --> 00:00:20.280
I hope you're in the right room.

00:00:20.280 --> 00:00:22.140
My name is Wilfredo Sanchez.

00:00:22.140 --> 00:00:28.130
And I am the server engineering
lead for the iCal Server at Apple.

00:00:28.129 --> 00:00:29.279
So what are we talking about?

00:00:29.280 --> 00:00:32.759
We are talking about Apple's calendaring
solution for Leopard.

00:00:32.759 --> 00:00:33.689
It is finally here.

00:00:33.689 --> 00:00:37.509
We've been listening to you and finally we've
managed to deliver something that you can use.

00:00:37.509 --> 00:00:43.039
( applause )

00:00:43.039 --> 00:00:48.600
We've gotten a lot of feedback that this is something that's
very important for a lot of It deployments and to developers

00:00:48.600 --> 00:00:51.950
that are trying to like adopt a
platform and get it into the back office.

00:00:51.950 --> 00:00:53.679
So here we go.

00:00:53.679 --> 00:00:58.820
Our server is based on open internet standards and the
whole point of that of course is that it will interoperate

00:00:58.820 --> 00:01:05.129
with clients on other platforms and eventually servers
on other platforms as well you can deploy our servers

00:01:05.129 --> 00:01:09.629
on other platforms as well because it is a portable server.

00:01:10.829 --> 00:01:17.189
Just as a note our server and clients both iCal and iCal
Server are actually pretty far ahead of the game in terms

00:01:17.189 --> 00:01:21.609
of adopting this standard that
being CalDAV which I'll talk about.

00:01:21.609 --> 00:01:24.980
There are other clients out there in
the world that do some of this stuff

00:01:24.980 --> 00:01:27.750
but most of them are just getting off the ground.

00:01:27.750 --> 00:01:34.010
And we've actually got 100 percent of the
specification built into our clients and server.

00:01:34.010 --> 00:01:39.689
And of course our server is open source which means
that if there's anything it doesn't do for you,

00:01:39.689 --> 00:01:45.929
you can of course either customize it as you see fit
or provide us with feedback or file bugs directly

00:01:45.930 --> 00:01:48.930
in our bug tracker and we'll talk about that at the end.

00:01:48.930 --> 00:01:52.170
So what you'll learn today is what
the status of the current standards?

00:01:52.170 --> 00:01:55.000
There are actually a lot of standards
in play and we'll get into that.

00:01:55.000 --> 00:01:56.629
What are the features of the iCal Server?

00:01:56.629 --> 00:01:59.780
What is it exactly going to do for you?

00:01:59.780 --> 00:02:06.460
We get into a little bit how it actually
works and how can develop for it.

00:02:06.459 --> 00:02:10.370
So getting started what's the standard
picture actually look like?

00:02:10.370 --> 00:02:15.159
We've got something that's going to end
up looking like a calendaring solution.

00:02:15.159 --> 00:02:23.650
So first up is data format called
iCalendar and that's specified in our RFC.

00:02:23.650 --> 00:02:29.140
And it basically tells you something about
how data for calendaring events looks like.

00:02:29.139 --> 00:02:36.199
On top of that there's another specification called
iTip which lets you make requests about calendaring

00:02:36.199 --> 00:02:39.560
such as is somebody available for a meeting.

00:02:39.560 --> 00:02:43.479
And in order to make any use of that
we need some kind of a transport

00:02:43.479 --> 00:02:49.229
and HTTP as we all know uses a very important
protocol for moving data around on the internet

00:02:49.229 --> 00:02:51.889
and it plays well in a lot infrastructures.

00:02:51.889 --> 00:02:58.189
So we're going to take that and we're going to on top
of that leverage XML and WebDAV and WebDAV ACLs in order

00:02:58.189 --> 00:03:00.310
to provide a way to publish data on the server.

00:03:00.310 --> 00:03:07.750
That iCal and Tiger of course made a pretty good use of
WebDAV in order to give you public subscribed functionality.

00:03:07.750 --> 00:03:12.150
But in order to get something more we need
a little bit more sauce on top of that.

00:03:12.150 --> 00:03:18.460
And to start with we need an access protocol for how to get
calendaring data and how to write to a server in such a way

00:03:18.460 --> 00:03:23.900
that the server can maintain the consistency of
the data and force semantics and let you do things

00:03:23.900 --> 00:03:27.469
like searches for data that's interesting to you.

00:03:27.469 --> 00:03:34.509
And on top of all of that is a scheduling specification
that's going to let you say invite me to a meeting or,

00:03:34.509 --> 00:03:40.989
you know, update the status of a meeting and fan that
out to all of the people that are participating in it.

00:03:40.990 --> 00:03:45.770
So it's a -- give you the run down on exactly what's
going on with standards, Cyrus Daboo is one of the authors

00:03:45.770 --> 00:03:50.550
of CalDAV spec and is my partner
in crime on building this server.

00:03:50.550 --> 00:03:52.510
We'll give you the scoop.

00:03:52.509 --> 00:03:58.039
( applause )

00:03:58.039 --> 00:03:58.959
>> Okay thanks, Wilfredo.

00:03:58.960 --> 00:04:04.330
I'm Cyrus Tabu I'm the server engineer on the iCal Server
team and I'm here to talk to you or give you an update

00:04:04.330 --> 00:04:07.980
about the calendaring standards status
and Apple's involvement in that.

00:04:07.979 --> 00:04:10.689
We're also going to get into doing
a couple of demos as well.

00:04:10.689 --> 00:04:13.900
So you're going to see all of this stuff in action too.

00:04:13.900 --> 00:04:19.569
So as Wilfredo mentioned iCalendar is really
at the core of the calendaring Standards.

00:04:19.569 --> 00:04:27.430
The iCalendar specification is defined by the IATF
into the engineer task force is Document RSC2445.

00:04:27.430 --> 00:04:33.329
And it's a very basic text-based
format for calendaring information.

00:04:33.329 --> 00:04:38.659
You can describe things such as
events and tasks or to do items.

00:04:38.660 --> 00:04:41.360
You can have a log on those events and tasks.

00:04:41.360 --> 00:04:47.230
You can describe time zone information so that
you can encapsulate daylight savings times rules.

00:04:47.230 --> 00:04:54.319
And you can do things like specify recurring events in
very simple patents or you can do more complex recurrence

00:04:54.319 --> 00:04:59.189
where you might have exceptions to
recurring events or complicated patents

00:04:59.189 --> 00:05:03.810
like the last day in June and things like that.

00:05:03.810 --> 00:05:08.540
Now, along with iCalendar we have iTip
which is a transport independent protocol

00:05:08.540 --> 00:05:12.830
that defines how you exchange calendaring
information in order to do scheduling.

00:05:12.829 --> 00:05:18.319
So basically what iTip does is add a method
property which basically describes a set of verbs

00:05:18.319 --> 00:05:21.159
that define how scheduling should take place.

00:05:21.160 --> 00:05:27.390
So a typical operations are just publish an event
to a group of people or send out an invitation

00:05:27.389 --> 00:05:34.300
which is the request method and then the attendees can
reply to that stating whether they are going to attend

00:05:34.300 --> 00:05:40.590
or whether they are going to decline the meeting or
even propose an alternative time for the meeting.

00:05:40.589 --> 00:05:45.810
And in addition there are descriptors in the
iCalendar data that let you define who the organizer

00:05:45.810 --> 00:05:48.319
and the attendees are within the scheduling process.

00:05:48.319 --> 00:05:53.899
So these roles actually get to be
important when we look at CalDAV.

00:05:53.899 --> 00:05:59.549
Now, iCal and iTip together they provide the core
standards for internet calendaring and scheduling.

00:05:59.550 --> 00:06:01.520
And they are supported by many products today.

00:06:01.519 --> 00:06:06.120
Lots of products out there that
they even use propriety standards

00:06:06.120 --> 00:06:09.420
for actual calendar access and calendar data access.

00:06:09.420 --> 00:06:16.819
They allow you to do iCalendar in important iCalendar data
or even send iTip messages in the form of E-mail messages

00:06:16.819 --> 00:06:19.870
in order to do scheduling through E-mail.

00:06:19.870 --> 00:06:23.649
These standards are actually almost ten years
old now and there's actually an effort going

00:06:23.649 --> 00:06:26.729
on in the ITEF to do some revisions to the standards.

00:06:26.730 --> 00:06:31.300
And the primary goal of these revisions is
basically to fix up some inconsistencies

00:06:31.300 --> 00:06:33.960
and some problems that have been spotted over the years.

00:06:33.959 --> 00:06:37.930
And also to simplify a few issues that are
known to cause interoperability problems.

00:06:37.930 --> 00:06:45.420
So again the key focus here is on interoperability
for clients and consumers of calendar data.

00:06:45.420 --> 00:06:47.430
So let's move on to CalDAV.

00:06:47.430 --> 00:06:57.079
And as we've saw a short while ago CalDAV is built on
WebDAV technology, WebDAV access control, iCal and iTip.

00:06:57.079 --> 00:07:05.729
The key thing that CalDAV does is define very specifically
how calendar information is stored on a WebDAV server.

00:07:05.730 --> 00:07:12.200
So you could just use a regular WebDAV server and
throw events up there and -- it a calendar server?

00:07:12.199 --> 00:07:13.019
Well sort of.

00:07:13.019 --> 00:07:17.180
But what we really want to be able to do is to
achieve interoperability between different clients.

00:07:17.180 --> 00:07:20.769
So different clients need to be able
to agree on a schemer, if you'd like,

00:07:20.769 --> 00:07:22.750
how that calendar data is stored on the server

00:07:22.750 --> 00:07:29.209
And what CalDAV is does is define very explicitly
how calendar data is stored on the server

00:07:29.209 --> 00:07:33.409
so the clients have assurance that they can
find that information quickly and they're able

00:07:33.410 --> 00:07:38.100
to manipulate it in very Interoperable way.

00:07:38.100 --> 00:07:43.770
In addition it also defines how iTip is
used to do scheduling on a CalDAV server.

00:07:43.769 --> 00:07:53.120
The key thing that CalDAV adds to the WebDAV protocol is
a new set of methods HTTP methods for creating a calendar.

00:07:53.120 --> 00:07:57.420
It adds reports which are basically a means
of doing queries against a calendar stored.

00:07:57.420 --> 00:08:02.270
So CalDAV for example implements a time range
report which would let you find all of the events

00:08:02.269 --> 00:08:04.589
on your calendar for this week for example.

00:08:04.589 --> 00:08:08.919
And of course it defines key access privilege
concepts that are needed in calendaring.

00:08:08.920 --> 00:08:13.259
So for example in the calendaring space one of the
things you want to be able to do is allow people

00:08:13.259 --> 00:08:18.159
to see your free busy time but not actually see the details
of the specific events that you have on your calendar.

00:08:18.160 --> 00:08:22.130
So CalDAV defines a special WebDAV
access privilege to enable you

00:08:22.129 --> 00:08:27.439
to control that piece that control over the access.

00:08:28.600 --> 00:08:30.980
CalDAV is actually split into two specifications.

00:08:30.980 --> 00:08:37.129
The CalDAV access specification is now
complete and published in March as RFC4791.

00:08:37.129 --> 00:08:41.120
The CalDAV scheduling specification is
nearly complete and we hope to actually see

00:08:41.120 --> 00:08:44.399
that submitted to the IETF in the next month or so.

00:08:44.399 --> 00:08:50.159
Let's take a little bit more closer
look at the CalDAV data model.

00:08:50.159 --> 00:08:56.379
So we're going to have a calendar server which is a WebDAV
server at the top level and we are going to need a place

00:08:56.379 --> 00:09:01.009
to store our calendars so we have a calendar's
collection and below that we are going to want

00:09:01.009 --> 00:09:03.809
to discriminate different classes of users on the system.

00:09:03.809 --> 00:09:08.649
So we're going to have separate
collections for users, groups and locations.

00:09:08.649 --> 00:09:13.789
Within each of those top level collections
we are going to have collections that refer

00:09:13.789 --> 00:09:18.709
to the individual's participating
in that particular class of user.

00:09:18.710 --> 00:09:21.950
So in this case we have three collections
for Cyrus, Wilfredo and Chris.

00:09:21.950 --> 00:09:26.490
And these are basically the calendar home directories
if you'd like for each of these particular users.

00:09:26.490 --> 00:09:32.289
So within my calendar home directory I can actually go
ahead and create a set of calendars, I also have an in box

00:09:32.289 --> 00:09:35.009
and an outbox collection which actually
take part in the scheduling process.

00:09:35.009 --> 00:09:37.689
And we'll talk about that a little bit later.

00:09:37.690 --> 00:09:42.960
With each of my calendar collections, that's where
I actually store the events for that calendar

00:09:42.960 --> 00:09:46.650
and remember each -- this is basically a
fundamental level which is just an HTTP server.

00:09:46.649 --> 00:09:50.850
So everyone of these resources, everyone
of these events is a addressable via URI.

00:09:50.850 --> 00:09:56.790
You can go in with Safari and browse this entire
hiearchy assuming you have the appropriate privileges

00:09:56.789 --> 00:09:59.549
to drill down into this.

00:09:59.549 --> 00:10:06.990
The other thing that we need to be able to do on the
CalDAV server is define a way to maintain information

00:10:06.990 --> 00:10:11.389
about the users and groups, et cetera that are
actually participating in the calendaring operations.

00:10:11.389 --> 00:10:17.110
So the WebDAV access control specification defines
its concepts as principle which is basically an entity

00:10:17.110 --> 00:10:20.539
that is taking part in some kind of WebDAV operation.

00:10:20.539 --> 00:10:25.429
So again to maintain the information about these
we have a principles collection on the server

00:10:25.429 --> 00:10:29.279
and again we have similar users
groups and locations collections.

00:10:29.279 --> 00:10:32.159
And then for example within the users
collection we will actually have --

00:10:32.159 --> 00:10:36.819
here we go we will actually have principle resources

00:10:36.820 --> 00:10:42.180
that actually represent the individuals
that are doing calendaring operations.

00:10:42.179 --> 00:10:48.609
We can have groups which obviously represent, you can
create groups of users that are can be manipulated

00:10:48.610 --> 00:10:51.250
and managed through access privileges, et cetera.

00:10:51.250 --> 00:10:54.679
And then the other piece of information
you typically need a location.

00:10:54.679 --> 00:10:58.459
So you need to be able to book meeting
rooms as part of your scheduling process.

00:10:58.460 --> 00:11:03.259
So again we maintain that information on the server as well.

00:11:03.259 --> 00:11:06.710
Now, how does scheduling actually take place on the server?

00:11:06.710 --> 00:11:08.720
So here's a quick example.

00:11:08.720 --> 00:11:12.350
We have an organizer meeting and
we have an attendee to the meeting.

00:11:12.350 --> 00:11:16.970
So the organizer through their CalDAV client
which in our case is going to be iCal...

00:11:16.970 --> 00:11:20.639
What they are going to do is they are going to create
a scheduling request, a meeting in their calendar

00:11:20.639 --> 00:11:24.519
and thy are going to add some attendees and
the client is going to post that request

00:11:24.519 --> 00:11:26.720
to that organizers outbox on the CalDAV server.

00:11:26.720 --> 00:11:30.139
Now, the CalDAV server is going to spot
that information coming into the outbox.

00:11:30.139 --> 00:11:34.230
It's going to pick that up and it's actually going
to deliver it to the in box of all of the attendees

00:11:34.230 --> 00:11:36.350
that are listed in that particular event.

00:11:36.350 --> 00:11:41.759
Now, each attendee they're monitoring their in box
and they can pick up that invite as a notification

00:11:41.759 --> 00:11:43.850
and they can process it in the appropriate way for them.

00:11:43.850 --> 00:11:46.529
They may choose to accept the meeting
or decline the meeting.

00:11:46.529 --> 00:11:51.120
And what they would typically do is change the
status and book the meeting on their main calendar

00:11:51.120 --> 00:11:53.669
and they'll send a suitable reply back to the organizer.

00:11:53.669 --> 00:11:56.360
And they simply do that by pretty much by the same process.

00:11:56.360 --> 00:12:02.720
They take the event schedule request should you reply and
they deposit it in their outbox, the server picks it up

00:12:02.720 --> 00:12:05.070
and puts it back in the organizer's in box,

00:12:05.070 --> 00:12:09.770
and the organizer can then update
their status information based on that.

00:12:09.769 --> 00:12:14.429
And to see what this would look like in the case of
multiple attendees we basically have this scenario

00:12:14.429 --> 00:12:20.039
where you have a fan out of the scheduling information
from the one organizer to all the attendees in the meeting.

00:12:20.039 --> 00:12:21.909
And each of those replies back to the organizer

00:12:21.909 --> 00:12:26.629
and that information is then correlated
and aggregated by the organizer.

00:12:26.629 --> 00:12:28.750
So where are we with CalDAV?

00:12:28.750 --> 00:12:34.559
There are still some key elements of the
calendaring and scheduling infrastructure

00:12:34.559 --> 00:12:37.029
if you'd like that we actually want to complete.

00:12:37.029 --> 00:12:40.899
And one of the key pieces of those is
really the server to server protocol.

00:12:40.899 --> 00:12:46.529
One of the key things we want to be able to do is actually
do federated free busy information and custom scheduling.

00:12:46.529 --> 00:12:50.579
So CalDAV as it stands right now justifies
how you do calendaring and scheduling

00:12:50.580 --> 00:12:53.560
within a single organization or authentication domain.

00:12:53.559 --> 00:12:58.250
What you want to be able to do is to actually allow you
to invite people from other companies or universities,

00:12:58.250 --> 00:13:02.850
other organizations or look up people's free
busy time in a similar and easy fashion.

00:13:02.850 --> 00:13:05.420
That work is just beginning to spin up right now.

00:13:05.419 --> 00:13:10.659
Now that we've got to the end of the CalDAV
access and scheduling specification work.

00:13:10.659 --> 00:13:17.339
Now, one of the things that we've done in iCal server based
on our experience of actually using these protocols is

00:13:17.340 --> 00:13:24.950
that we found there's a need for certain extensions
to the protocol to aid userability on the client side

00:13:24.950 --> 00:13:27.450
and to improve performance on the server side as well.

00:13:27.450 --> 00:13:32.830
So we've actually gone ahead and put together a
set of extensions and the specifications for most

00:13:32.830 --> 00:13:38.910
of these are actually available on our open source website
which Wilfredo will show you about a little later on.

00:13:38.909 --> 00:13:44.899
So we have a masked UID extension that improves
the free busy user interface in a client.

00:13:44.899 --> 00:13:49.579
We have a C tag extension which basically allows
a client to do more efficient polling of the server

00:13:49.580 --> 00:13:52.610
and that obviously improves the server performance as well.

00:13:52.610 --> 00:13:57.269
Then the next three I'm going to go into a little bit
more detail proxy users, office hours and drop box.

00:13:57.269 --> 00:13:59.730
So let's look proxy users.

00:13:59.730 --> 00:14:05.220
So one of the key functionalities in an enterprise
calendaring and scheduling system is the ability to delegate

00:14:05.220 --> 00:14:08.379
to someone else the responsibility to manage your calendar.

00:14:08.379 --> 00:14:15.309
So often, you know, very busy managers at a company
need their assistant to handle their schedules for them.

00:14:15.309 --> 00:14:21.709
So we need some way implement a similar functionality
in the iCal server iCal client infrastructure.

00:14:21.710 --> 00:14:27.670
So the way we do that is by providing
groups of principals on the server

00:14:27.669 --> 00:14:31.209
that allow you to manage these proxy user groups.

00:14:31.210 --> 00:14:36.340
And the key thing to this is that rather than
having the client manage access privileges directly,

00:14:36.340 --> 00:14:39.540
they actually simply get to manage group membership instead.

00:14:39.539 --> 00:14:46.269
So the server actually provisions the appropriate
privileges for each of these proxy groups automatically.

00:14:46.269 --> 00:14:49.120
And all the client has to do is change the group membership.

00:14:49.120 --> 00:14:53.659
In addition to this it's also much easier for the client
to actually look at the group membership list to find

00:14:53.659 --> 00:14:58.069
out who you are a delegate for or who
has chosen you to be a delegate for them.

00:14:58.070 --> 00:15:02.080
So it's much easier from a managements stand point as well.

00:15:02.080 --> 00:15:08.470
In our case what we actually do is define two group
principals for each -- each primary principle on the system.

00:15:08.470 --> 00:15:14.320
So I can have a group of read only delegates,
people who have read only access to my calendar,

00:15:14.320 --> 00:15:18.490
they can see my calendar information but they can't
change it and they cannot schedule on my behalf.

00:15:18.490 --> 00:15:22.029
Then there's a read write group and those people
are actually able to change calendar events

00:15:22.029 --> 00:15:25.379
on my calendar and they can also do scheduling.

00:15:25.379 --> 00:15:29.429
The proxy groups are given read access in
the appropriate way by the calendar server.

00:15:29.429 --> 00:15:35.679
So if we have a quick look at the data model
for this we saw the principle hiearchy before

00:15:35.679 --> 00:15:38.979
and we had principle resources
for each of the individual users.

00:15:38.980 --> 00:15:42.960
What we now do is actually make those
principle resources a collection and within each

00:15:42.960 --> 00:15:48.629
of those collections we have these group principle
resources representing these two new group principals.

00:15:48.629 --> 00:15:53.200
And each of the user principals will
have their own set of groups like this.

00:15:53.200 --> 00:15:54.950
So it's just a case of managing the group membership.

00:15:54.950 --> 00:16:03.080
If I want to give Chris read only access to my calendar
hiearchy I can just add Chris to my read proxy group

00:16:03.080 --> 00:16:08.580
and he automatically gets access to my calendar home
directory and all of the calendar information within that.

00:16:08.580 --> 00:16:12.020
So end users have actual control over
this through their clients rather

00:16:12.019 --> 00:16:15.840
than a system administrator having
to go in and manage that information.

00:16:15.840 --> 00:16:21.930
So that empowers the end user in
terms of this proxy capability.

00:16:21.929 --> 00:16:24.000
The next thing we want to talk about is office hours.

00:16:24.000 --> 00:16:28.379
Again there's a need in an enterprising environment for
you to be able to specify when you are going to be

00:16:28.379 --> 00:16:33.210
in the office and when you're likely to be out of
the office to aid people in terms of scheduling.

00:16:33.210 --> 00:16:35.610
We have an office hours specification.

00:16:35.610 --> 00:16:42.070
This is built on a via availability component
which was actually defined nine months ago

00:16:42.070 --> 00:16:45.060
and is actually an extension to the iCalendar data format.

00:16:45.059 --> 00:16:50.839
And via availability allows you to describe
office hours information inside iCalendar data.

00:16:50.840 --> 00:16:57.100
The key thing about this is that unlike the free busy
components iCalendar carry defines you can actually define

00:16:57.100 --> 00:17:01.000
reoccurring periods of free time or
busy time through via availability.

00:17:01.000 --> 00:17:06.230
You can also include exceptions so you might be
out of the office for one Wednesday afternoon

00:17:06.230 --> 00:17:09.079
and again you can put that information in that manner.

00:17:09.079 --> 00:17:17.139
Now, the via availability component is actually managed
by storing the via availability component on your in box.

00:17:17.140 --> 00:17:19.800
So that means it will actually take
part in your free busy lookouts.

00:17:19.799 --> 00:17:24.599
So when someone looks up your free busy information via
availability data will actually be consulted by the server

00:17:24.599 --> 00:17:29.439
and will be used to form the free busy
information that goes back to the client.

00:17:29.440 --> 00:17:31.799
Now, iCal actually provides a new way for you

00:17:31.799 --> 00:17:35.960
to specify your office hours information
as part of its CalDAV account set up.

00:17:35.960 --> 00:17:37.360
So they provide two modes for doing that.

00:17:37.359 --> 00:17:43.089
There's a simple mode where you can just specify start
time and an end time for week days, Monday through Friday.

00:17:43.089 --> 00:17:48.309
And then there's a more sophisticated mechanism where
you an actually specify start time and end times

00:17:48.309 --> 00:17:50.919
for each day of the week independently of each other.

00:17:50.920 --> 00:17:54.880
And when you put all of that together,
and you actually do a free busy look up,

00:17:54.880 --> 00:17:58.990
you'll get an iCal's new availability
window that you see here.

00:17:58.990 --> 00:18:02.970
You actually see unavailable periods on the left
hand side and the right hand side of this window

00:18:02.970 --> 00:18:08.079
and that actually represents the out of office hours
if you'd like for each of these individual people.

00:18:08.079 --> 00:18:13.069
So you can see the different people here had set up
their own different office hours as appropriate for them.

00:18:13.069 --> 00:18:16.509
And that information is displayed
as part of this free busy look up

00:18:16.509 --> 00:18:20.759
and you can make appropriate scheduling
decision based on that.

00:18:20.759 --> 00:18:22.809
The other thing we want to talk about is drop box.

00:18:22.809 --> 00:18:28.389
Again in an enterprise environment there's often a need for
you to send attachments as part of your event information.

00:18:28.390 --> 00:18:33.500
Now, you could embed the attachments in the iCalendar data
but that's not very efficient from a server standpoint

00:18:33.500 --> 00:18:37.920
because you end up uploading that data every time
you make a simple change to the event itself.

00:18:37.920 --> 00:18:42.060
So if you just correct a typo in the title, you
end up having to upload that data each time due

00:18:42.059 --> 00:18:45.169
to the way the inline attachments work in iCalendar.

00:18:45.170 --> 00:18:51.250
So a better approach is to actually store these attachments
externally in a separate collection on the WebDAV server

00:18:51.250 --> 00:18:54.609
and provide a pointer to those inside the calendar data.

00:18:54.609 --> 00:18:58.959
So that's pretty much what those drop box functionality
is except in this case the way we do this is

00:18:58.960 --> 00:19:04.700
that the server actually provisions drop box collections for
each user in a way that it's easy for the client to discover

00:19:04.700 --> 00:19:09.930
where they are and to manage and manipulate those
collections and set up the appropriate privileges.

00:19:09.930 --> 00:19:15.039
Again one of the key things here is that
the client will create a drop box collection

00:19:15.039 --> 00:19:17.599
for each event that is going to add an attachment to.

00:19:17.599 --> 00:19:22.759
And specifically it's going to set the privileges on that
collection to match the list of attendees on that event.

00:19:22.759 --> 00:19:29.700
So only the attendees of a particular event are able to
access the attachments that are related to that event.

00:19:29.700 --> 00:19:33.600
And the other thing that we're able to
do with this is that changes can be made

00:19:33.599 --> 00:19:35.569
by anyone who's a participant in the event.

00:19:35.569 --> 00:19:40.029
So it's not just the organizer who can add attachments
but the attendees can also drop their own attachments

00:19:40.029 --> 00:19:42.629
to their drop box and modify existing attachments.

00:19:42.630 --> 00:19:48.860
And that information gets pushed up and notification
sent to the other parties to the meeting as well.

00:19:48.859 --> 00:19:53.179
So a quick way to look at this we have an
organizer that's going to send them a meeting

00:19:53.180 --> 00:19:56.640
out to several attendees they send
that meeting out in a regular way

00:19:56.640 --> 00:20:00.610
but they also drop their attachment
into their special drop box collection.

00:20:00.609 --> 00:20:03.299
All of the attendees and the organizer
have read access to that.

00:20:03.299 --> 00:20:05.500
So they can see that attachment in the drop box.

00:20:05.500 --> 00:20:08.509
At some later point the attendees may
choose to add their own attachment

00:20:08.509 --> 00:20:11.099
and they can simply do that by
dropping it into the drop box.

00:20:11.099 --> 00:20:16.089
And these notifications go out to
all the participants in the event.

00:20:16.089 --> 00:20:20.509
So that's actually show a demo and
see some of these features operating.

00:20:20.509 --> 00:20:29.349
( pause )

00:20:29.349 --> 00:20:34.089
Okay. So here we are and I'm going launch iCal.

00:20:34.089 --> 00:20:36.909
And we have a typical iCal window here.

00:20:36.910 --> 00:20:41.590
And I've got this single local calendar on
this in iCal but there are no events here.

00:20:41.589 --> 00:20:45.720
What I'm interested in of course
is my servic calendar information.

00:20:45.720 --> 00:20:49.799
So I'm going to go into iCal preferences,
there's a new accounts tab here.

00:20:49.799 --> 00:20:56.789
And I click on the plus button and I can add a description
from my server, I can add to my user name and my password.

00:20:56.789 --> 00:21:01.079
Now iCal is very much integrated with
the MacOSX server infrastructure.

00:21:01.079 --> 00:21:06.689
It's actually using OpenDirectory to go out and get
information about the calendar users on the system.

00:21:06.690 --> 00:21:10.700
So in this case it's actually going to go to the
directory and look up my calendar server information

00:21:10.700 --> 00:21:12.830
so it can automatically correct this account for me.

00:21:12.829 --> 00:21:15.529
Now, and all I need to do is enter
my user name and password.

00:21:15.529 --> 00:21:20.109
So I've done that I can click the add button and it's
actually going out, it's created an account for me

00:21:20.109 --> 00:21:24.799
and it's actually gone to the server and pulled
down the calendar information from the server.

00:21:24.799 --> 00:21:28.159
So here you can see my calendar for this week.

00:21:28.160 --> 00:21:31.570
And again that's coming down from the calendar server.

00:21:31.569 --> 00:21:35.369
I could go to another machine and do exactly the
same process and I see exactly the same view.

00:21:35.369 --> 00:21:42.449
I could movie events around in iCal here and it's pushes
those changes back out to the server almost immediately.

00:21:42.450 --> 00:21:45.240
So again another client will see
those changes reflected as well.

00:21:45.240 --> 00:21:53.490
So here we are really leveraging the benefits of the client
server architecture for managing calendar dates in this way.

00:21:53.490 --> 00:21:56.000
Of course one of the key things we
want to be able to do is scheduling.

00:21:56.000 --> 00:21:58.049
So let's actually see an example of that.

00:21:58.049 --> 00:22:03.529
So what I'm going to do now is I'm going
to create an event on Thursday here.

00:22:03.529 --> 00:22:05.849
And I'm just going to call that meeting.

00:22:05.849 --> 00:22:10.759
Now, I want to invite a few people so
I want to invite my colleague Wilfredo.

00:22:10.759 --> 00:22:16.700
So I can start typing his name and again iCal is using
OpenDirectory to look up calendar users on the system.

00:22:16.700 --> 00:22:19.250
So it can do all the completion of that.

00:22:19.250 --> 00:22:20.079
So I can hit return.

00:22:20.079 --> 00:22:22.359
I also want Chris to come along to this meeting.

00:22:22.359 --> 00:22:25.250
So I can hit return here and now I hit tab.

00:22:25.250 --> 00:22:30.150
Now, what iCal is actually doing in the background at
this point is going out and looking up each user each

00:22:30.150 --> 00:22:33.040
of these attendees free busy information.

00:22:33.039 --> 00:22:37.379
If we actually take a closer look here you'll
see there's a little icon with Wilfredo's name

00:22:37.380 --> 00:22:40.120
which actually indicates he's busy during this time slot.

00:22:40.119 --> 00:22:43.599
So obviously I need to do some rescheduling of this event.

00:22:43.599 --> 00:22:46.629
And that's made easy by the new
availability window the iCal has.

00:22:46.630 --> 00:22:49.110
So let me just pull that up here.

00:22:49.109 --> 00:22:51.279
Just move these windows around a little bit.

00:22:51.279 --> 00:22:54.509
Okay. So we see iCal's availability window.

00:22:54.509 --> 00:22:58.750
So this is going out in real time and
fetching free busy information from the server

00:22:58.750 --> 00:23:01.039
for each of the attendees to show for us.

00:23:01.039 --> 00:23:06.690
So again we see on the left and right we see the
office hours on available information coming in.

00:23:06.690 --> 00:23:11.670
And we see the actual time frame for the event
that we originally specified is highlighted here.

00:23:11.670 --> 00:23:14.600
And we can see that overlaps a
busy time in Wilfredo's calendar.

00:23:14.599 --> 00:23:20.659
So what we want to do obviously is move that to a suitable
time that's free for all of the participants in the event.

00:23:20.660 --> 00:23:23.850
And iCal highlights that particular
time range in green here.

00:23:23.849 --> 00:23:29.299
So I could quite simply drag this event over to the green
area if I wanted to but there's also a quicker way to do

00:23:29.299 --> 00:23:34.569
that which is an auto pick option and down in the bottom
right hand corner here there's a little button I can click

00:23:34.569 --> 00:23:40.079
on and iCal will automatically find the next
available slot for all of the participants in the event

00:23:40.079 --> 00:23:42.639
and move the event to that particular time for you.

00:23:42.640 --> 00:23:46.940
So having gone through that process we found
a suitable time slot for the invitation.

00:23:46.940 --> 00:23:51.710
So all I need to do now is click send
and send the invitation off to Wilfredo.

00:23:51.710 --> 00:23:57.360
So let's have a look and see what
that looks like on Wilfredo's side.

00:23:57.359 --> 00:24:00.089
>> Okay. So now I'm off on my computer.

00:24:00.089 --> 00:24:02.849
And I'm looking at my own calendar.

00:24:02.849 --> 00:24:10.569
And as you can see already over here when I - when iCal
notices that there's a new event on the system here,

00:24:10.569 --> 00:24:14.240
you see that again Chris and I
have been invited to this meeting.

00:24:14.240 --> 00:24:17.529
All I have to do is go ahead and say
well okay I can attend this thing.

00:24:17.529 --> 00:24:21.500
I'm going to go ahead and reply
walla we've done scheduling in iCal.

00:24:21.500 --> 00:24:29.660
Now, this is actually going to send data back over to
the server and which Cyrus is going to be able to notice

00:24:29.660 --> 00:24:36.120
>> Okay. So I come back here and wait for
-- almost fast user switching to switch.

00:24:40.630 --> 00:24:41.690
Click. Right.

00:24:41.690 --> 00:24:45.630
(applause) You missed that one.

00:24:45.630 --> 00:24:45.850
(applause) Okay.

00:24:45.849 --> 00:24:48.379
So I'm going do launch my copy of iCal and.

00:24:48.380 --> 00:24:54.620
And it's going to refresh that and in
fact I do see Wilfredo's reply here.

00:24:54.619 --> 00:24:59.639
And if we zoom in on that you can actually see the
little green checkmark next to his name which means

00:24:59.640 --> 00:25:01.190
that he's gone ahead and accepted that event.

00:25:01.190 --> 00:25:06.070
We are still waiting for Chris to reply, of course,
but then he's always slow in replying to events.

00:25:06.069 --> 00:25:09.470
So we click okay to that.

00:25:09.470 --> 00:25:12.799
So that shows you free busy look
ups availability and scheduling.

00:25:12.799 --> 00:25:17.319
The other feature I want to talk about quickly
and demonstrate is the delegates capability.

00:25:17.319 --> 00:25:21.679
So again I'm going to go into iCal's
preferences and I'm going to look at my accounts.

00:25:21.680 --> 00:25:25.480
And here we have the server and
there's a new delegation tab here.

00:25:25.480 --> 00:25:29.890
So the top panel is actually showing
accounts that I will be able to access

00:25:29.890 --> 00:25:32.400
if someone had given me the right to see their information.

00:25:32.400 --> 00:25:33.310
No one has actually done that.

00:25:33.309 --> 00:25:35.710
Because I'm obviously not that popular.

00:25:35.710 --> 00:25:41.730
So I go in look under the option to manage
my own manage tell people who are going

00:25:41.730 --> 00:25:44.079
to be able to see my calendar information.

00:25:44.079 --> 00:25:50.250
So right now I've got this set up so that my boss,
Chris, who's my project manager is actually able to read

00:25:50.250 --> 00:25:52.359
and write calendar information on my server.

00:25:52.359 --> 00:25:56.589
So he can assign me tasks and manage
my calendar as well if needed.

00:25:56.589 --> 00:25:59.129
Wilfredo has read only access to my calendar.

00:25:59.130 --> 00:26:03.690
Sometimes he needs to see what I'm doing what particular
project I might be working on at a particular point in time.

00:26:03.690 --> 00:26:05.759
So what does this look like on Wilfredo's side?

00:26:05.759 --> 00:26:08.250
How does he actually see my calendar information?

00:26:08.250 --> 00:26:09.940
Well let's have a quick look.

00:26:11.329 --> 00:26:17.759
>> Okay. So now I'm back over here in iCal and I'm going
to look at my own preferences and under accounts I'll check

00:26:17.759 --> 00:26:22.569
out the delegation tab and sure enough I can see here
that Cyrus has given me access to read his calendar.

00:26:22.569 --> 00:26:30.919
So I went ahead and click this on here which actually asks
iCal to go ahead and show that in my -- in my calendar.

00:26:30.920 --> 00:26:35.620
So you can see that there is actually there's
Cyrus's calendar right alongside my own.

00:26:35.619 --> 00:26:38.000
Obviously he gets a little busy because
you see multiple people's calendars

00:26:38.000 --> 00:26:39.809
on there but you can turn that on and off.

00:26:39.809 --> 00:26:45.210
And that way I can kind of like see well if Cyrus isn't
around may be he's over in some meeting over here.

00:26:45.210 --> 00:26:46.410
So that's kind of a cool feature.

00:26:46.410 --> 00:26:52.269
One more thing we are going to show is if you've
been following along with what we've been doing

00:26:52.269 --> 00:26:56.259
with the Wiki server in Mac OS X Server
there's a calendar built into that.

00:26:56.259 --> 00:26:59.140
I happen to be a member of this group called Wiki users.

00:26:59.140 --> 00:27:01.700
And obviously I can create events here.

00:27:01.700 --> 00:27:03.660
That's going to cause me a need to log in.

00:27:03.660 --> 00:27:07.060
Since this Wiki requires log in to do any editing.

00:27:07.059 --> 00:27:09.049
I'm going to go ahead and do that.

00:27:09.049 --> 00:27:10.210
Create the events.

00:27:10.210 --> 00:27:14.980
I'll call it Fubar because I'm clever.

00:27:14.980 --> 00:27:18.750
And, you know, you can move the meeting
around from one place to another.

00:27:18.750 --> 00:27:22.960
If you're particularly clever, you can
actually set up iCal to see that information.

00:27:22.960 --> 00:27:24.910
So sure enough there's the meeting in iCal.

00:27:24.910 --> 00:27:32.750
So we're looking at clients of different flavors.

00:27:32.750 --> 00:27:36.210
In one case Cocoa client and another place web based client

00:27:36.210 --> 00:27:39.960
and you can imagine how this will
play out across platforms and so on.

00:27:39.960 --> 00:27:45.850
I am going to go ahead and get out of
here and we are done with the demo.

00:27:45.849 --> 00:27:48.389
>> Okay. We go back to slides, please.

00:27:49.759 --> 00:27:55.700
So that was a demo of, you know, a couple of
key features in iCal that leveraging a power

00:27:55.700 --> 00:27:58.920
of iCal server and CalDAV to do enterprise calendaring.

00:27:58.920 --> 00:28:03.870
We are going to have another demo in a little in
a short while like you say yet another client,

00:28:03.869 --> 00:28:09.069
a client that's not a pure calendar client
actually using the CalDAV data the CalDAV protocol

00:28:09.069 --> 00:28:13.409
to access calendar data as well.

00:28:13.410 --> 00:28:16.290
So where are we with the CalDAV specification itself?

00:28:16.289 --> 00:28:19.069
I mean right now there is something like 15 CalDAV servers

00:28:19.069 --> 00:28:22.509
that are being publicly announced
and that are being worked on

00:28:22.509 --> 00:28:28.000
And we see the list of those folks here.

00:28:28.000 --> 00:28:31.910
There are about nine or ten clients
that are being announced again

00:28:31.910 --> 00:28:37.360
in various states of support for the CalDAV specification.

00:28:37.359 --> 00:28:42.149
Of particular interest and the questions we were
getting at the lab session yesterday, you know,

00:28:42.150 --> 00:28:46.070
was there any support for Outlook to talk to CalDAV servers.

00:28:46.069 --> 00:28:52.319
And the Oakland connector dot org group are actually working
on an Outlook plug in that will actually allow Outlook

00:28:52.319 --> 00:28:55.460
to talk to CalDAV and if, you know,
any of you folks are interested

00:28:55.460 --> 00:28:57.380
in getting involved in that it's an open source project.

00:28:57.380 --> 00:29:04.110
So Please go ahead and at least let them know you
are interested and maybe participate in that as well.

00:29:04.109 --> 00:29:08.299
As clients we have other types
of products that are out there.

00:29:08.299 --> 00:29:12.200
Obviously libraries to enable you
to write your own CalDAV clients.

00:29:12.200 --> 00:29:15.130
There's a Java based library and a Python based library.

00:29:15.130 --> 00:29:20.440
And then we have this other class of application which
is not pure calendaring clients but are consumers

00:29:20.440 --> 00:29:24.570
or users of calendaring information or free
busy information, scheduling information.

00:29:24.569 --> 00:29:28.269
And we are starting to see more and more
of these types of clients interested

00:29:28.269 --> 00:29:30.799
in actually accessing this calendar data directly.

00:29:30.799 --> 00:29:36.099
So iCal server and CalDAV has become more than just a
calendar access protocol it's become more of a platform

00:29:36.099 --> 00:29:38.459
for accessing this type of calendaring information.

00:29:38.460 --> 00:29:43.490
The next thing I want to talk about is CalConnect.

00:29:43.490 --> 00:29:46.599
CalConnect is the calendaring and scheduling consortium.

00:29:46.599 --> 00:29:50.799
Apple who's actually been a member of
CalConnect for over 18 months now.

00:29:50.799 --> 00:29:55.609
CalConnect is a venue for users and vendors to
come together to talk about calendaring issues.

00:29:55.609 --> 00:30:01.559
The primary goal is to further development of the standards
and also to improve interoperability across the board.

00:30:01.559 --> 00:30:06.839
There are usually three face to face meetings a year and
each of those typically includes an interoperability event.

00:30:06.839 --> 00:30:09.869
And Apple and many of the other
vendors that you saw listed there

00:30:09.869 --> 00:30:12.679
under the products participate
in those interoperability events.

00:30:12.680 --> 00:30:15.590
The engineers sit down and they
try to bash on each other products

00:30:15.589 --> 00:30:17.909
and see what falls over and get things fixed immediately.

00:30:17.910 --> 00:30:23.150
So it's a very good venue for actually developing
products and solving interoperability problems

00:30:23.150 --> 00:30:26.019
and actually moving the specifications forward.

00:30:26.019 --> 00:30:32.369
CalConnect itself also has technical committees which
are looking at specific areas within calendaring.

00:30:32.369 --> 00:30:36.289
There's a technical committee working on free
busy information looking at being able to get

00:30:36.289 --> 00:30:41.279
that free busy information through simple HTTP requests
and doing this type of federated free busy work.

00:30:41.279 --> 00:30:44.369
The time zone committee is looking at how
to solve the problem of governments wanting

00:30:44.369 --> 00:30:46.539
to change their daylight savings times quite frequently.

00:30:46.539 --> 00:30:51.899
And we really want a way to deal with that so a standard
time zone registry will hopefully get around a lot

00:30:51.900 --> 00:30:53.450
of the problems that we had earlier this year.

00:30:53.450 --> 00:30:59.710
Mobile calendaring is obviously a big area that
people are now looking at in much more details.

00:30:59.710 --> 00:31:02.370
So again we have a committee that's looking at that.

00:31:02.369 --> 00:31:05.849
Use cases they are looking at how resources
might be described in calendaring data.

00:31:05.849 --> 00:31:10.059
So there is a need to specify for
example what's the capacity of a room?

00:31:10.059 --> 00:31:13.450
So that when you do a scheduling operation, the
server can be a little bit smart about that

00:31:13.450 --> 00:31:17.039
or picking a room suitable for
the number of attendees you have.

00:31:17.039 --> 00:31:25.509
Public events the ability to get events from general web
services, et cetera and have more detailed venue information

00:31:25.509 --> 00:31:28.069
about those and also deal with localization issues.

00:31:28.069 --> 00:31:31.399
And then there's obviously a tech
committee on CalDAV that's working

00:31:31.400 --> 00:31:35.940
on improving the protocol and handling
the HR ability events.

00:31:35.940 --> 00:31:42.830
So the members in CalConnect since WWDC last year
we've had quite a few new members in CalConnect

00:31:42.829 --> 00:31:48.490
or major note we've got Sun, Zimbra, Kerio,
Google, Synchronica, Scalix, et cetera.

00:31:48.490 --> 00:31:54.329
So it's a thriving community, it's a very active community,
and it's a good place to go if you have calendaring

00:31:54.329 --> 00:31:57.839
and scheduling products or solutions
that you want to develop further.

00:31:57.839 --> 00:32:01.679
You want to do interoperability
testing with other people and so on.

00:32:01.680 --> 00:32:04.490
So let's actually move on to another demo here.

00:32:04.490 --> 00:32:11.500
And I'd like to invite Tony Becker from Marware to come up and
actually give us a demonstration of his product, Project X.

00:32:11.500 --> 00:32:16.279
>> Thank you, Cyrus.

00:32:16.279 --> 00:32:18.859
Okay. The mike's working.

00:32:18.859 --> 00:32:21.259
All right real quick.

00:32:21.259 --> 00:32:29.299
So Marware has a project a product called Project X. And
this is basically what it looks like in network mode.

00:32:29.299 --> 00:32:35.690
And you can use it in either outline, time
line in, you know, whatever suits your fancy.

00:32:35.690 --> 00:32:36.650
We have a number of features.

00:32:36.650 --> 00:32:43.840
We have the ability to add media types if
you are doing production type of things.

00:32:43.839 --> 00:32:50.339
We basically certainly do have a calendar
that shows locally what's going on.

00:32:50.339 --> 00:32:51.949
We can deal with resources.

00:32:51.950 --> 00:32:56.059
We can basically take these people this
is basically somebody that I've dragged

00:32:56.059 --> 00:32:58.720
in from my address book and I can show you that too.

00:32:58.720 --> 00:33:06.000
So I can just take this person and drag him in here.

00:33:06.000 --> 00:33:10.500
I can show costs, dates, the tasks, the resource,

00:33:10.500 --> 00:33:14.839
specifications everything else
that's associated with the project.

00:33:14.839 --> 00:33:18.669
Now, calendaring is very important
in a project management standpoint.

00:33:18.670 --> 00:33:23.940
And one of the things that we end up
doing is publishing that information out.

00:33:23.940 --> 00:33:27.759
So we can publish a dot Mac which is
very nice but tends to be read only.

00:33:27.759 --> 00:33:33.069
We can publish all these events out, the same
one the ICS files that Cyrus is talking about.

00:33:33.069 --> 00:33:36.599
But it tends to go into your calendar and just stay there.

00:33:36.599 --> 00:33:40.509
So I'm going to basically just get rid of that.

00:33:40.509 --> 00:33:57.200
So I've created a project that looks like
basically the preparation for the and the demo

00:33:57.200 --> 00:33:59.730
that we've just done over the last two weeks.

00:33:59.730 --> 00:34:05.349
So what you can see in this project is basically all the
work that was done last week to put this all together.

00:34:05.349 --> 00:34:08.309
And then the things that occurred this week.

00:34:08.309 --> 00:34:14.940
One of the things we've got in
here is you can look at resources.

00:34:14.940 --> 00:34:16.530
Oops sorry.

00:34:16.530 --> 00:34:21.019
So these were all the people that we -- basically
all three of us did the dry run yesterday.

00:34:21.019 --> 00:34:24.030
The presentation that you are all here today.

00:34:24.030 --> 00:34:31.660
And so what we do...I'm sorry...what we do is we go and
publish this and that's what I was telling you about.

00:34:31.659 --> 00:34:42.649
You can basically take all of these events and because
ICS is open, you can send them all to iCal, you can --

00:34:42.650 --> 00:34:47.440
we have a local web server for the Windows people.

00:34:47.440 --> 00:34:56.119
We basically publish up to your dot Mac account so
you can save the file, you can save the project.

00:34:56.119 --> 00:35:01.079
And what we're interested in here today is basically
I can take this project and I can publish it

00:35:01.079 --> 00:35:03.319
to the calendar server that's living right over here.

00:35:03.320 --> 00:35:04.510
So we'll just do that.

00:35:04.510 --> 00:35:10.430
( pause )

00:35:10.429 --> 00:35:14.059
>> Okay. And let's see what we got on my end.

00:35:14.059 --> 00:35:20.710
So I'm just going to go into iCal here and I'm going
to do a refresh and we see these set of blue events

00:35:20.710 --> 00:35:26.420
that appeared here these are the tasks that Tony had created
in Project X that were published to the CalDAV server

00:35:26.420 --> 00:35:28.820
and I've got my set of assigned tasks here.

00:35:28.820 --> 00:35:34.059
Now, one of the important things that I can now do
I can actually go in and edit one of these tasks.

00:35:34.059 --> 00:35:39.860
So I can use for example just change -- click the
edit button here and change the title on the task.

00:35:39.860 --> 00:35:41.680
Let's make that dry run again.

00:35:41.679 --> 00:35:45.059
I want to change the notes here.

00:35:45.059 --> 00:35:48.480
So I'm going to say dry run in Moscony.

00:35:48.480 --> 00:35:50.869
I'm going to click done.

00:35:50.869 --> 00:35:56.429
And I need to just go in again and
oop I should be able to send that.

00:35:56.429 --> 00:35:57.940
Hang on a second.

00:35:59.079 --> 00:35:59.940
Click.

00:35:59.940 --> 00:36:01.740
>> Yes it's gone I can see it.

00:36:01.739 --> 00:36:05.219
>> So let's go back to Tony's machine.

00:36:05.219 --> 00:36:14.779
>> So if we look here basically what we've got is an update
to the task name which I may have misspelled or what not.

00:36:14.780 --> 00:36:18.360
And in addition to that in selecting
this in looking basically

00:36:18.360 --> 00:36:23.380
over here I've picked up the note that Cyrus sent to me.

00:36:23.380 --> 00:36:28.420
So this is true for basically any of
the people that I tasked on that event.

00:36:28.420 --> 00:36:30.170
They each got their own copy of the calendar.

00:36:30.170 --> 00:36:31.639
They can each update it.

00:36:31.639 --> 00:36:35.329
They can each add attachments if they were due, you know,

00:36:35.329 --> 00:36:38.400
a document or something else that
was at the end of that event.

00:36:38.400 --> 00:36:44.660
And this is all based on the fact that
this is an open standards based calendar.

00:36:44.659 --> 00:36:50.149
Any client that you have can do this with simple
HTTP requests and a little bit of XML commands.

00:36:50.150 --> 00:36:53.510
>> Okay. Thanks a lot, Tony.

00:36:53.510 --> 00:36:59.480
( applause )

00:36:59.480 --> 00:37:02.070
>> Back to slides, please.

00:37:02.070 --> 00:37:05.360
So that was, you know, a great example of, you know,

00:37:05.360 --> 00:37:10.250
a part of an auto pure calendaring client
actually using leveraging the CalDAV standard

00:37:10.250 --> 00:37:15.199
and these open protocols to get
access to the calendaring data

00:37:15.199 --> 00:37:17.559
And not just read only access but read and write access.

00:37:17.559 --> 00:37:19.369
So it's a two way process.

00:37:19.369 --> 00:37:26.039
So with that I'd like to hand back to
Wilfredo to go on with the preparation.

00:37:28.329 --> 00:37:28.889
>> Thanks, Cyrus.

00:37:28.889 --> 00:37:29.400
Thanks, Tony.

00:37:29.400 --> 00:37:30.510
That was a really cool demo.

00:37:30.510 --> 00:37:36.040
( applause )

00:37:36.039 --> 00:37:40.670
So now that we know where we are in terms of all
these standards and that was obvious a lot of material

00:37:40.670 --> 00:37:43.289
because there's a lot in play here and it's all new.

00:37:43.289 --> 00:37:44.980
So we are kin of breaking ground.

00:37:44.980 --> 00:37:49.050
You can see new products rolling out and hopefully
some of you guys are getting inspired here.

00:37:49.050 --> 00:37:50.880
How do I use this stuff?

00:37:50.880 --> 00:37:55.410
Let's say I'm an administrator of a MacOS server
machine and I want to set up an iCal server.

00:37:55.409 --> 00:38:02.500
Well, the -- well, let me actually start out with
what the process management looks like on this.

00:38:02.500 --> 00:38:07.719
So let's say I've got a server and I've got a bunch of
clients and they're going to want to come in and connect.

00:38:07.719 --> 00:38:13.009
So what am I going to build in the middle
so that they can handle all of this load?

00:38:13.010 --> 00:38:17.990
Well, first up we're going to start a master
process that's going to kind of own everything else.

00:38:17.989 --> 00:38:23.099
And if you are familiar with Apache HTTP is
actually launches a whole bunch of child processes.

00:38:23.099 --> 00:38:25.089
Now, Apache does it for a different reason than we do.

00:38:25.090 --> 00:38:29.230
They do it because they select on
sockets and they one per connection

00:38:29.230 --> 00:38:35.570
so might have a couple hundred HTTP processes
running on your Mac OS X box, if you've noticed.

00:38:35.570 --> 00:38:40.260
Ours is actually basically going to run one process
for every CPU that you've got on your machine.

00:38:40.260 --> 00:38:45.230
The reason for this is that our server is single threaded
and we want to take advantage of CPU on your computer

00:38:45.230 --> 00:38:47.969
which means we are going to launch a process on each one.

00:38:47.969 --> 00:38:53.179
In front of all of those slave processes we are going to
park a load balancer and that's basically going to deal

00:38:53.179 --> 00:38:55.759
with all the connections that are
coming in from these clients.

00:38:55.760 --> 00:39:04.570
So as different iCal instances or be it a Mozilla
Sunbird or Project X comes along that deals

00:39:04.570 --> 00:39:07.190
with all the low distribution across
all of these child processes.

00:39:07.190 --> 00:39:10.659
Now, let's say you've got multiple machines.

00:39:10.659 --> 00:39:15.389
Let's say you are a very large organization
and you've got to be fairly large in order

00:39:15.389 --> 00:39:17.750
to really have to have multiple machines.

00:39:17.750 --> 00:39:22.940
But say I've got three computers that I want to
run iCal server on because if one of them crashes

00:39:22.940 --> 00:39:26.010
and the other two pick it up and so on and so forth.

00:39:26.010 --> 00:39:27.570
They basically look all the same.

00:39:27.570 --> 00:39:33.210
They are going to need some kind of shared data storage in
the back end where all that calendar data is going to live.

00:39:33.210 --> 00:39:38.590
And in our case that's going to typically be any kind
of Xsan but it can be any kind of network file system

00:39:38.590 --> 00:39:41.760
or shared data storage that you can
hook up across all of the machines.

00:39:41.760 --> 00:39:48.040
So anyway you can get to one basic file system
across all three machines ought to work okay here.

00:39:48.039 --> 00:39:53.409
Unless it's like Samba or something don't do that.

00:39:54.530 --> 00:39:57.750
And in front of all three of these machines
we can going to park another load balancer.

00:39:57.750 --> 00:40:04.010
And that load balancer could be in essence the CalDAV
server because we've already got load balancing magic built

00:40:04.010 --> 00:40:07.380
in you can kind of just run a software process up front.

00:40:07.380 --> 00:40:11.559
If you are serious enough to have
multiple machines and an Xsan and so on,

00:40:11.559 --> 00:40:14.809
you're probably going to use some
kind of hardware load balancer.

00:40:14.809 --> 00:40:19.449
And of course all the clients come in the connections
go through the load balancer and they get fanned

00:40:19.449 --> 00:40:22.339
out to the appropriate servers as appropriate.

00:40:22.340 --> 00:40:27.150
This is of course like the same
technology you use for any HTTP server.

00:40:27.150 --> 00:40:32.010
If you've set up HTTP in a large scale IT
environment before, this is all similar.

00:40:32.010 --> 00:40:35.650
Why? Because this is an HTTP server it's that simple.

00:40:35.650 --> 00:40:41.710
So now let's say I'm a developer this
says administrators but it's lying.

00:40:41.710 --> 00:40:46.250
And I'm interested in seeing how
-- what's under the hood here.

00:40:46.250 --> 00:40:49.139
Well, first of all the server's implemented in Python.

00:40:49.139 --> 00:40:51.049
Pretty much pure Python.

00:40:51.050 --> 00:40:56.830
It uses a framework called a twisted
framework which we'll talk a little bit about.

00:40:56.829 --> 00:40:58.750
We get a lot of leverage out of that.

00:40:58.750 --> 00:41:01.380
It's a fully compliant CalDAV server
as we've mentioned before.

00:41:01.380 --> 00:41:06.309
Which means it implements HTTP, it implements WebDAV ACLS.

00:41:06.309 --> 00:41:14.730
We implement WebDAV quota specificationS SO you can specify
quota information on collections so your users don't,

00:41:14.730 --> 00:41:18.260
you know, run away and start killing your server.

00:41:18.260 --> 00:41:23.340
And of course we support SSL and
TLS for transfer layers security.

00:41:23.340 --> 00:41:28.700
Our server binds to some kind of directory service
in order to obtain information about principles.

00:41:28.699 --> 00:41:36.119
As Cyrus mentioned before principals can be users,
groups, locations, resources that sort of thing.

00:41:36.119 --> 00:41:39.309
And Mac OS X Server of course that means OpenDirectory.

00:41:39.309 --> 00:41:44.570
But we actually have implemented a few alternate
plug ins for different kinds of directory services.

00:41:44.570 --> 00:41:48.650
One is a flat file XML file that you can specify that in.

00:41:48.650 --> 00:41:51.960
Another is you can use the Apaches users and group files.

00:41:51.960 --> 00:41:54.329
So if you've got an Apache server
and you want to kind of leverage

00:41:54.329 --> 00:41:58.889
that same configuration you can get some bang out of that.

00:41:58.889 --> 00:42:02.009
And obviously you can write your own.

00:42:02.010 --> 00:42:07.500
And of course we support authentication via the
typical ways of that is being basic and digest

00:42:07.500 --> 00:42:11.530
And we also support Spenego for coverized authentication.

00:42:11.530 --> 00:42:16.340
Again, the servers written in Python.

00:42:16.340 --> 00:42:17.769
I'm a big fan of Python.

00:42:17.769 --> 00:42:20.789
Hopefully some of you are.

00:42:20.789 --> 00:42:26.599
It requires Python version 2.4 in Leopard we're
shipping with Python 2.5 which is different

00:42:26.599 --> 00:42:32.819
than we mentioned last year we said 2.4 but we've
since managed to roll out a new version into the build.

00:42:32.820 --> 00:42:37.250
The reason we like Python is because it
can be very flexile and dynamic language.

00:42:37.250 --> 00:42:43.599
It's managed to let us write an awful lot of functionality
with not too much code into the calendar server.

00:42:43.599 --> 00:42:49.739
And it's a big reason why we've managed to kind of get
all of CalDAV implemented in time for this conference.

00:42:49.739 --> 00:42:54.719
And for our final GM come later this year.

00:42:54.719 --> 00:43:03.519
So in addition Python unlike Java doesn't really
park you on an island you can actually C libraries

00:43:03.519 --> 00:43:10.980
or on Mac OS X you can use objective C libraries by using
Py OB C and that will give us actually a really good way

00:43:10.980 --> 00:43:15.349
to kind of leverage the system's libraries kind of
forward if we want to kind of plug into more things

00:43:15.349 --> 00:43:17.949
that actually are native to Mac OS X through the server.

00:43:17.949 --> 00:43:23.159
One question of course is since this is a
scripting language well, how's the performance?

00:43:23.159 --> 00:43:29.449
And our experience the performance is not
bottlenecked by Python and that's partly because a lot

00:43:29.449 --> 00:43:35.919
of the really CPU intensive codes such as SSL
encryption and decryption and so on is actually done in C

00:43:35.920 --> 00:43:39.599
because again we all live on an island
we can just use the open SSL framework

00:43:39.599 --> 00:43:41.769
that is used by everything else in Mac OS X.

00:43:41.769 --> 00:43:43.800
At least that's the open source projects.

00:43:43.800 --> 00:43:47.350
So we believe the server will scale
to moderately arduous organizations.

00:43:47.349 --> 00:43:51.750
It's if you're Yahoo and Google
and you want to implement something

00:43:51.750 --> 00:43:56.280
for the whole internet you're probably doing your own
thing and you are not going to buy a Mac to do it.

00:43:56.280 --> 00:44:02.230
But, you know, if you are building out something for your
organization, we think you are going to be in good shape.

00:44:02.230 --> 00:44:07.480
Again, we use Twisted framework as the
core engine that drives our server.

00:44:07.480 --> 00:44:12.079
Twisted is it's really interesting it's an open
source networking framework that allows you

00:44:12.079 --> 00:44:18.949
to do any synchronous activities such as response
multiple requests at the same time without using threads.

00:44:18.949 --> 00:44:23.829
And that's pretty cool because if, you know,
if you love threads, then you are not me.

00:44:23.829 --> 00:44:29.380
But it makes our lives a lot easier
in terms of coding the thing up.

00:44:29.380 --> 00:44:33.970
And it I believe gives us fewer bugs.

00:44:33.969 --> 00:44:38.689
But what's interesting about that is when you are
going to write a method or a function that's going

00:44:38.690 --> 00:44:43.429
to return something that it needs to take a long time to
do something and that's usually because you are listening

00:44:43.429 --> 00:44:47.589
on a socket and you're waiting for some data or
you are trying to write some data to the disk

00:44:47.590 --> 00:44:51.010
or you're doing some other I/O centric
things that usually that sort of thing

00:44:51.010 --> 00:44:53.350
but you might have some activities that do that.

00:44:53.349 --> 00:44:59.460
Rather than waiting until that's complete and then returning
an answer what you do is you return a deferred object.

00:44:59.460 --> 00:45:03.380
And a deferred object when you are the
caller you get back a deferred object

00:45:03.380 --> 00:45:07.050
and it doesn't say 24 it says I'll tell you later.

00:45:07.050 --> 00:45:10.800
So what you do is write another method
that says well, when you know the answer,

00:45:10.800 --> 00:45:13.190
call this thing and then we'll pick it up from there.

00:45:13.190 --> 00:45:17.740
And so it's a call back chain based
method of writing your software.

00:45:17.739 --> 00:45:23.709
So it takes a little bit of time to get use to but
it's actually highly functional and pretty cool.

00:45:23.710 --> 00:45:28.429
Twisted comes for free with a whole bunch of
networking stack implementations including

00:45:28.429 --> 00:45:31.489
of course HTTP which is the one we started with.

00:45:31.489 --> 00:45:36.109
And it's got a very active development community which
of course for an open source project is really critical

00:45:36.110 --> 00:45:42.090
if you are going to use that and you're going to expect
to continue to kind of get any updates out of it.

00:45:42.090 --> 00:45:46.680
Now, Twisted that web too is a library
within Twisted that implements HTTP.

00:45:46.679 --> 00:45:51.859
And as you can tell by the name it's
actually kind of the second run at it.

00:45:51.860 --> 00:45:58.880
What's interesting about it is that every resource on the
server that's slash calendars or an event in my calendar

00:45:58.880 --> 00:46:02.980
or my principle whatever they are
all implemented as objects.

00:46:02.980 --> 00:46:08.449
And so you write a class that implements a type of
resource and then they get substantiated by the server

00:46:08.449 --> 00:46:13.139
and then each resource has methods on it which
handle the HTTP requests that are coming in.

00:46:13.139 --> 00:46:18.769
So if you are trying to handle a get request you
implement HTTP under bar get method which takes

00:46:18.769 --> 00:46:22.829
as an argument a request object and
then it returns a response object

00:46:22.829 --> 00:46:26.119
when it's done or of course a deferred response object.

00:46:26.119 --> 00:46:34.750
Web2 dot DAV is a library that I wrote while I was at Apple
when I first got started on this project to implement WebDAV

00:46:34.750 --> 00:46:37.519
on top of the HTTP support that's already in Twisted.

00:46:37.519 --> 00:46:44.190
That's actually been contributed to the Twisted project
under that license which is the MIT license by Apple.

00:46:44.190 --> 00:46:47.530
It implements like XML handling and WebDAV level one.

00:46:47.530 --> 00:46:50.670
Cyrus has added support for ACLs and quotas.

00:46:50.670 --> 00:46:55.200
It supports the support method just
enough to handle CalDAV things.

00:46:55.199 --> 00:47:01.439
It does not do locking which is DAV level two but it
will probably need to get around to that at some point.

00:47:01.440 --> 00:47:07.420
And Twisted CalDAV then of course is the third tier
that implements all of the CalDAV logic including all

00:47:07.420 --> 00:47:11.849
of the CalDAV access specification and
all of the scheduling specification.

00:47:11.849 --> 00:47:15.489
It adds some additional ACL privileges
for managing permissions

00:47:15.489 --> 00:47:19.319
for doing free busy look ups and that sort of thing.

00:47:19.320 --> 00:47:23.940
As you can see we actually managed to kind
of layer a nice little stack from HTTP

00:47:23.940 --> 00:47:29.920
to WebDAV to CalDAV using this technology.

00:47:29.920 --> 00:47:35.090
Now, as in administrator as well you are
going to be interested in this bit which is,

00:47:35.090 --> 00:47:38.350
how is the data stored when you store things on the servers?

00:47:38.349 --> 00:47:43.389
So Red comes along and invites somebody to a meeting,
it gets parked on his calendar as a resource.

00:47:43.389 --> 00:47:45.420
What does that resource look like on my server?

00:47:45.420 --> 00:47:47.470
Well, it's going to be a file on the disk.

00:47:47.469 --> 00:47:49.739
It's not stored in some opaque database.

00:47:49.739 --> 00:47:54.509
It's just a file as you might see if
you had Apache enabled with mod DAV.

00:47:54.510 --> 00:48:00.580
The reason we did this is because we think it's a lot
easier for an administrate to kind of diagnose what's going

00:48:00.579 --> 00:48:03.650
on in a server if they can just look at some flat files.

00:48:03.650 --> 00:48:07.610
And of course these files are just
iCalendar dot ICS files typically

00:48:07.610 --> 00:48:12.920
and are very simple to kind of read they are just text.

00:48:12.920 --> 00:48:18.690
Now, properties in WebDAV are kind of
a way to attach metadata to a resource.

00:48:18.690 --> 00:48:23.679
And if that sounds like extended attributes on
a file to you, then that's what I was thinking.

00:48:23.679 --> 00:48:28.379
So we actually ended up just mapping properties
to extended attributes that's on the file system.

00:48:28.380 --> 00:48:32.840
So if you want to actually see ACLs and how
they are implemented up for a given resource

00:48:32.840 --> 00:48:39.539
or whether iCal has set a color on a calendar collection
that sort of thing if you look at the extended attributes

00:48:39.539 --> 00:48:45.300
on the appropriate resources, you can actually see XML globs
in there which describes what's going on in the property.

00:48:45.300 --> 00:48:50.890
We actually do use databases for indexing
and that's simply for performance reasons.

00:48:50.889 --> 00:48:57.569
If you want to look up an event by UID and
a collection that contains 10,000 events,

00:48:57.570 --> 00:49:02.460
you don't want to have to open every file and
check for the UID after parcing the iCalendar data.

00:49:02.460 --> 00:49:08.309
So we keep a sequel index that actually indexes UIDs
and time spans for events and some typical things

00:49:08.309 --> 00:49:14.420
that are searched for very often so that we can kind of
look them up, narrow down our search field and then poke

00:49:14.420 --> 00:49:18.050
at the right files without having
to scan through everything.

00:49:18.050 --> 00:49:21.600
What's interesting about this for you
is that these indexes are disposable.

00:49:21.599 --> 00:49:26.469
So if you think it's corrupt or if you think it's kind
of bugging you for some reason, you can just go ahead

00:49:26.469 --> 00:49:30.129
and delete the dot DB dot sequel lite
file and whatever collection

00:49:30.130 --> 00:49:34.500
and it will go ahead and rebuild it next time it needs it.

00:49:34.500 --> 00:49:37.929
( applause )

00:49:37.929 --> 00:49:41.069
Also of interest if you are just backing
up all of these files all you have

00:49:41.070 --> 00:49:45.080
to do is copy the data repository to whatever you want.

00:49:45.079 --> 00:49:48.809
You just do a CP with dash R and
you've got the whole backup done.

00:49:48.809 --> 00:49:52.529
You don't need some opaque tool set in order to handle that.

00:49:52.530 --> 00:49:55.760
If you're doing a backup, you don't
need to backup the index files obviously

00:49:55.760 --> 00:50:00.650
because as I've said before they're disposable
and they will regenerated next time around.

00:50:00.650 --> 00:50:03.940
So principal data storage is a little bit different.

00:50:03.940 --> 00:50:09.590
So that's basically like how do I find out
whether Cyrus has an accounts on the server

00:50:09.590 --> 00:50:13.269
and how does the server kind of look all that stuff up?

00:50:13.269 --> 00:50:18.099
And it does that using some kind of a directory
plug in mechanism which I mentioned before.

00:50:18.099 --> 00:50:25.230
As I've said we implement OpenDirectory and XML
and Apache files and you can implement your own

00:50:25.230 --> 00:50:29.599
if you want LDAP specific thing because you
are not going to go through OpenDirectory

00:50:29.599 --> 00:50:35.360
to get the LDAP you can write your own of that or if
you've got a proprietary back end data management system

00:50:35.360 --> 00:50:37.530
through your users or you want to read out off

00:50:37.530 --> 00:50:41.940
of an Excel spreadsheet whatever you
want, you can just write your own there.

00:50:41.940 --> 00:50:44.849
Of course our default is to use OpenDirectory.

00:50:44.849 --> 00:50:50.139
So this is the API that you code to if you're
going to actually write one of these plug ins.

00:50:50.139 --> 00:50:52.049
There's only two classes you need to worry about.

00:50:52.050 --> 00:50:59.920
At the bottom you see a directory record and that basically
represents a person or a resource or a group or a location.

00:50:59.920 --> 00:51:03.170
And it knows what service it's
associated with which is going to be

00:51:03.170 --> 00:51:05.500
up on the top class and knows what type of record it is.

00:51:05.500 --> 00:51:08.480
Again if that's a user or a group or a location.

00:51:08.480 --> 00:51:11.750
It knows its GUID everything has
to have a GUID on the server.

00:51:11.750 --> 00:51:14.360
That's kind of how we uniquely identify everything.

00:51:14.360 --> 00:51:20.000
It's got a short name which has to be unique
within the type of record that we're talking about.

00:51:20.000 --> 00:51:24.250
And of course the full name which will be my
entire name and a bunch of calendar user addresses.

00:51:24.250 --> 00:51:29.250
That's an interesting little bit there
which is this that last property is an array

00:51:29.250 --> 00:51:32.159
of URIs that you uniquely identify a user.

00:51:32.159 --> 00:51:36.089
So in my case it might mail to
colon WSanchez at Apple dot com.

00:51:36.090 --> 00:51:42.960
It might also be HTTP colon slash slash the calendar
server slash principal slash user slash WSanchez.

00:51:42.960 --> 00:51:48.340
It might be URM colon GUID colon and my GUID.

00:51:48.340 --> 00:51:53.170
And those are just different URIs that
the server recognizes as being me.

00:51:53.170 --> 00:51:58.050
So iCal can use any of those things
to, you know, when you attempt to add

00:51:58.050 --> 00:52:02.400
in the attendees area it can translate
my name to any of those values

00:52:02.400 --> 00:52:05.980
and the calendar server will know
who to invite to a meeting.

00:52:05.980 --> 00:52:08.289
And the service is a bit simpler.

00:52:08.289 --> 00:52:13.929
It needs a realm name it needs its own GUID and it
needs to tell me what kind of records it stores.

00:52:13.929 --> 00:52:16.440
If you are the Apache users in
groups you only have users in groups.

00:52:16.440 --> 00:52:18.670
You don't really have location.

00:52:18.670 --> 00:52:23.840
If you are a DXML file or OpenDirectory you've
got some more record types that you can provide.

00:52:23.840 --> 00:52:27.100
There's a method for listing what
all the records for type are.

00:52:27.099 --> 00:52:32.690
Another one for given a short name and the type
what's my record given a GUID you can look it up.

00:52:32.690 --> 00:52:36.110
And then given a calendar user
address again the server can --

00:52:36.110 --> 00:52:40.099
you need an API the server can use
to actually uniquely identify that.

00:52:40.099 --> 00:52:45.029
So in the OpenDirectory case of course it's going to
get me E-mail address out of the OpenDirectory system.

00:52:45.030 --> 00:52:47.990
It's going to get a GUID out of my record in OpenDirectory.

00:52:47.989 --> 00:52:54.750
And it's going to get the URL out of the calendar
servers implementation of how URLs are represented there.

00:52:54.750 --> 00:52:57.389
And at the bottom of the iDirectory record there's a method

00:52:57.389 --> 00:53:00.659
for verifying credentials which
is how we handle authentication.

00:53:00.659 --> 00:53:07.730
So if you're interested in any of this kind of development
work and you think you want to contribute or you want

00:53:07.730 --> 00:53:13.059
to follow along or you want to file bugs or whatever,
you want to go to WWW dot calendar server dot org.

00:53:13.059 --> 00:53:15.670
That's actually a part of Mac OS forge.

00:53:15.670 --> 00:53:19.490
The entire server is under an Apache 2.0 License.

00:53:19.489 --> 00:53:24.109
So that hopefully is amenable to most people.

00:53:24.110 --> 00:53:27.710
Thank you.

00:53:27.710 --> 00:53:29.289
All of our bugs are in Trac.

00:53:29.289 --> 00:53:34.130
So if you want to know what we think is broke with
the server, you can go right now to that website

00:53:34.130 --> 00:53:36.730
and find out what all the things we think we need to fix

00:53:36.730 --> 00:53:40.579
or what other features we're hoping
to add in the short and so on.

00:53:40.579 --> 00:53:46.380
If you want to file a bug if you wish it did something or
if you notice that it's broken, you go to that same website

00:53:46.380 --> 00:53:49.050
and you can file a ticket there and we'll see it.

00:53:49.050 --> 00:53:51.030
You can of course use Radar.

00:53:51.030 --> 00:53:52.660
That is bug report dot Apple dot Com.

00:53:52.659 --> 00:53:55.000
And that will get to us through the Apple channels

00:53:55.000 --> 00:53:59.570
but then it's obviously not everybody
has access to see what's going on there.

00:53:59.570 --> 00:54:05.330
So the probably the best way for you to do
that is to go through the open source site.

00:54:05.329 --> 00:54:07.349
There are mailing lists for users and developers.

00:54:07.349 --> 00:54:10.699
So if you're interested in, you know,
talking to other people about issues

00:54:10.699 --> 00:54:13.279
with administering the servicer, then join the user's list.

00:54:13.280 --> 00:54:17.790
If you're interested in contributing to the development
helping us with documentation which is something

00:54:17.789 --> 00:54:23.849
where we're sorely in need of right now,
then you can join the developer's list.

00:54:23.849 --> 00:54:28.509
And those actually are third mailing lists for
getting the subversion commit notifications.

00:54:28.510 --> 00:54:32.510
Every time we check in a fix or whatever
you can actually see what's going on there.

00:54:32.510 --> 00:54:35.280
Or you can get that through our RSS from Trac.

00:54:35.280 --> 00:54:37.500
And of course new developers are welcome.

00:54:37.500 --> 00:54:39.150
This is an open source project.

00:54:39.150 --> 00:54:40.670
We announced it a year ago.

00:54:40.670 --> 00:54:44.269
It's been open source since then so you can
actually see all the history all the way back

00:54:44.269 --> 00:54:47.280
to there and actually a little bit pass that.

00:54:47.280 --> 00:54:50.820
So we're trying to keep this process as open as possible.

00:54:50.820 --> 00:54:55.320
And we'll try to make it as easy as
possible for everybody to contribute.

00:54:55.320 --> 00:54:56.210
Thanks.

00:54:56.210 --> 00:55:00.940
( applause )

00:55:00.940 --> 00:55:03.970
So the big question is, can I actually use this?

00:55:03.969 --> 00:55:06.399
Or am I going to get fired?

00:55:06.400 --> 00:55:11.050
And the answer is, I'm pretty sure you
can use it and it's going to be just fine.

00:55:11.050 --> 00:55:17.390
In fact, we're using it at Apple for the iCal team,
for our team and for a couple of other teams at Apple

00:55:17.389 --> 00:55:24.179
and we're trying to grow that out a bit so we can get
some real reliability testing on it and some, you know,

00:55:24.179 --> 00:55:27.949
find out exactly what the user use cases look like.

00:55:27.949 --> 00:55:30.129
But it's mission critical for us too.

00:55:30.130 --> 00:55:36.480
So if it's broken, we are going to care just as much as
you are because you know Chris likes to know where I am.

00:55:36.480 --> 00:55:39.630
So it's just as important for us.

00:55:39.630 --> 00:55:43.890
And nobody on either team has been
murdered yet by anybody else at the company.

00:55:43.889 --> 00:55:46.639
So we are doing all right.

00:55:46.639 --> 00:55:51.900
So if you need more information about the server or
what's going on, Matt Drance is our technology evangelist

00:55:51.900 --> 00:55:55.869
for both iCal and the iCal server so
he's a good guy to contact for that.

00:55:55.869 --> 00:56:00.889
Of course the WDWC website is a great place
for additional documentation and support

00:56:00.889 --> 00:56:04.139
and so on for all of the Mac OS X technologies.

00:56:04.139 --> 00:56:09.309
And please go visit calendar server
dot org and see what's there.

00:56:09.309 --> 00:56:11.670
We've got a lot of updates that we need to do to that site.

00:56:11.670 --> 00:56:14.150
We are aware that we need to play catch up there.

00:56:14.150 --> 00:56:19.010
Again, if you are interested in
pitching in there that's really cool too.

00:56:19.010 --> 00:56:23.850
And we had a lab yesterday at the IT lab downstairs.

00:56:23.849 --> 00:56:24.969
We got another one tomorrow.

00:56:24.969 --> 00:56:28.489
So if you are interested in getting some face
time with us, you want to try something out,

00:56:28.489 --> 00:56:33.379
maybe you're actually like Marware and have been tinkering
around with CalDAV and you want to try something out.

00:56:33.380 --> 00:56:42.910
You can do that with us tomorrow at 9:00 a.m. And in
summary calendaring services are finally here in Mac OS X.

00:56:42.909 --> 00:56:48.149
And we hope that you're going to finally be able
to leverage this and make real use out of it.

00:56:48.150 --> 00:56:51.050
The key functionality is all in place in this seed.

00:56:51.050 --> 00:56:57.380
We were actually, you know, targeting the original
GM date for Mac OS X so we are kind of ready to go.

00:56:57.380 --> 00:57:01.400
There's plenty more that we can do and
certainly there's a lot on our Radar

00:57:01.400 --> 00:57:03.840
but the Leopard feature sets pretty firm at this point.

00:57:03.840 --> 00:57:08.809
If you are interested in doing extensions to
the server, we'd be happy to help you out.

00:57:08.809 --> 00:57:13.639
Again, you can join one of those mailing lists or
you can come see us at the lab tomorrow and ask us

00:57:13.639 --> 00:57:16.690
in detail about what you are trying to do.

00:57:16.690 --> 00:57:23.309
And as evidenced by the Marware demo on Project X, standards
really create a lot of opportunities because the fact

00:57:23.309 --> 00:57:27.130
that we are using CalDAV means that
there's going to be a window story,

00:57:27.130 --> 00:57:29.890
which is very important for deploying the server.

00:57:29.889 --> 00:57:36.629
There's going to be like Microsoft is unfortunately absent
from the standards group that we're participating in.

00:57:36.630 --> 00:57:43.660
But interoperability among all the other vendors
including Sun and IBM and so on is looking

00:57:43.659 --> 00:57:45.149
like it's going to actually jell together.

00:57:45.150 --> 00:57:49.430
And that's really very promising for a future
of heterogenous computing environments.