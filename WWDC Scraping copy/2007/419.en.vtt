WEBVTT

00:00:20.039 --> 00:00:21.890
>> Okay. Welcome to the Printing Session.

00:00:21.890 --> 00:00:23.719
I am glad everybody could make it.

00:00:23.719 --> 00:00:30.079
The first big announcement it the weather you will see today
in the park is not characteristic San Francisco weather.

00:00:30.079 --> 00:00:33.210
So you don't need to bring your
sweater, which is really good.

00:00:33.210 --> 00:00:37.450
Okay, let me try and wake everybody
up just a little bit, mostly myself.

00:00:37.450 --> 00:00:45.500
How many people here are printer driver developers,
middle-ware developers, counting packages, stuff like that?

00:00:45.500 --> 00:00:46.689
Okay. About three-fourths of the room.

00:00:46.689 --> 00:00:49.890
The good news is -- you know how to get up early?

00:00:49.890 --> 00:00:57.659
9 o'clock tomorrow morning Michael Sweet is going to do a
presentation on the Common UNIX Printing System, a.k.a. CUPS,

00:00:57.659 --> 00:01:03.069
which is the foundation of the printing system
in Mac OS X. So I encourage you to come back

00:01:03.070 --> 00:01:06.170
at 9 o'clock, not this room, and see Michael speak.

00:01:06.170 --> 00:01:10.769
Okay. How many people are application developers?

00:01:10.769 --> 00:01:11.219
All right.

00:01:11.219 --> 00:01:12.840
We've got something for you.

00:01:12.840 --> 00:01:18.060
How many of these applications are
shipping and print really well?

00:01:19.469 --> 00:01:20.109
Thank you.

00:01:20.109 --> 00:01:20.900
And thank you.

00:01:20.900 --> 00:01:28.350
For the rest of you, today what we've got planned
is a whole run through of the entire printing system

00:01:28.349 --> 00:01:30.849
from an application developer's perspective.

00:01:30.849 --> 00:01:34.640
We're going to provide information for the
person whose never written printing code

00:01:34.640 --> 00:01:37.750
in their application all the way
through some advanced stuff.

00:01:37.750 --> 00:01:41.769
So there should be something here for everybody.

00:01:41.769 --> 00:01:43.140
Here's the agenda.

00:01:43.140 --> 00:01:48.299
I'm going give you a tour of the user
experience for Mac OS X Leopard printing.

00:01:48.299 --> 00:01:54.099
We're going to get an overview of the printing APIs, try and
point out maybe some of the important areas that you need

00:01:54.099 --> 00:01:56.049
to know about to make your application work.

00:01:56.049 --> 00:02:01.170
We're going to start at the beginning, only briefly.

00:02:01.170 --> 00:02:04.269
Since it's all available at the developer Web site.

00:02:04.269 --> 00:02:08.269
We're going to start with how to
print from a Cocoa application.

00:02:08.270 --> 00:02:09.250
We'll build from there.

00:02:09.250 --> 00:02:16.069
We'll show you how to customize the Print Dialog,
and then we're going to get into some specific topics.

00:02:16.069 --> 00:02:19.519
We really want everybody to know
how to print with high quality.

00:02:19.520 --> 00:02:23.450
There's a few things that happen in a lot
of applications that are messing up color

00:02:23.449 --> 00:02:25.319
or messing up the fidelity of your print.

00:02:25.319 --> 00:02:26.719
We're going to show you how to avoid that.

00:02:26.719 --> 00:02:30.229
And then since there's a lot of
documentation, we're going to do an overview

00:02:30.229 --> 00:02:34.109
of how we've changed some of the documentation for Leopard.

00:02:34.110 --> 00:02:36.270
So I'm going straight to demo.

00:02:37.930 --> 00:02:40.790
All right.

00:02:40.789 --> 00:02:45.419
Of course I will show you my favorite printer shortly.

00:02:45.419 --> 00:02:49.229
Okay, the first thing that you need to
see in Leopard is what you can't see.

00:02:49.229 --> 00:02:51.229
There is no longer a printer set up utility.

00:02:51.229 --> 00:02:54.659
If you have documentation that references, please change it.

00:02:54.659 --> 00:02:58.449
Everything now is in System Preferences.

00:02:58.449 --> 00:03:01.079
The print and fax pane.

00:03:01.080 --> 00:03:03.050
Everything's now available in the side bar.

00:03:03.050 --> 00:03:06.740
Your printers and your faxes will all show up.

00:03:06.740 --> 00:03:10.510
A little bit of status will be provided there.

00:03:10.509 --> 00:03:13.840
The user probably doesn't have to go here.

00:03:13.840 --> 00:03:20.009
Because we figure about 90 percent of everybody's got one
of these, a USB cable, and one of these, a USB printer.

00:03:20.009 --> 00:03:27.359
And the way they're going to add a
printer is by plugging it in like this.

00:03:27.360 --> 00:03:31.690
If Leopard does what it's supposed to
do, it's gone through all 2300 drivers,

00:03:31.689 --> 00:03:33.770
it's found the appropriate driver for this printer.

00:03:33.770 --> 00:03:36.460
In this case, it's my Deskjet 460.

00:03:36.460 --> 00:03:41.379
It is configured, the printer options in the print queue.

00:03:41.379 --> 00:03:42.439
New in Leopard.

00:03:42.439 --> 00:03:47.560
There's now the ability for drivers to
have a tool to auto set up every feature.

00:03:47.560 --> 00:03:51.879
So the user should do nothing but plug that cable in.

00:03:51.879 --> 00:03:56.969
Okay, now if you're in the 10 percent of people who
actually don't have one of these nice USB printers,

00:03:56.969 --> 00:04:04.870
like a network printer, we have a browser which
will show some series of printers that it can find.

00:04:04.870 --> 00:04:09.430
Somebody in this room is sharing
a printer on Quinn's MacBook.

00:04:09.430 --> 00:04:13.900
There's a couple of printers that are over with Duarte,
which was doing all of our slides.

00:04:13.900 --> 00:04:16.620
Of course my USB printer right here.

00:04:16.620 --> 00:04:18.509
The connect type will show up.

00:04:18.509 --> 00:04:20.969
We will discover all of the Bonjour printers, of course.

00:04:20.970 --> 00:04:29.170
We also added some legacy support for an SNMP protocol
that's in most HP printers to discover those as well.

00:04:29.170 --> 00:04:33.370
If AppleTalk had been turned on,
it's off by default in your system.

00:04:33.370 --> 00:04:35.290
Those printers would show up.

00:04:35.290 --> 00:04:39.629
Courses I had earlier, you can
still enter in a manual IP address.

00:04:39.629 --> 00:04:42.509
I highly encourage you to know what protocol you're using,

00:04:42.509 --> 00:04:46.310
because many printers don't support
IPP, especially if they're old.

00:04:46.310 --> 00:04:49.089
AppleTalk, Bluetooth, a lot of good stuff.

00:04:49.089 --> 00:04:50.689
That's how people are going to add printers.

00:04:50.689 --> 00:04:52.160
There are two ways to get to this.

00:04:52.160 --> 00:04:58.340
One is from the Print Dialog,
one is from System Preferences.

00:04:58.339 --> 00:05:02.269
You can now open the print queue.

00:05:02.269 --> 00:05:03.849
Print queue from here.

00:05:03.850 --> 00:05:07.970
We changed the look of the print queue.

00:05:07.970 --> 00:05:16.400
Mostly, it's UI so that people can more easily see what's
going on and get to information that they may need.

00:05:16.399 --> 00:05:19.939
I show you the get info here.

00:05:19.939 --> 00:05:23.160
This sheet has all the basic stuff about your driver.

00:05:23.160 --> 00:05:27.700
You can change the name, you can change
its location, you can change the drivers.

00:05:27.699 --> 00:05:32.860
If those automatically configured installable options
didn't come out right you can also change them here.

00:05:32.860 --> 00:05:38.139
Many printers provide you the tools
that will give you the supplies level.

00:05:38.139 --> 00:05:42.959
There's a few things here which will help for debug.

00:05:42.959 --> 00:05:47.109
Log and history will take you to console
and drop you in the appropriate logs.

00:05:47.110 --> 00:05:50.720
A lot of interesting stuff built into the desktop printer.

00:05:50.720 --> 00:05:54.800
You should take a few minutes,
familiarize yourself with that.

00:05:54.800 --> 00:06:02.079
Back in the System Preferences, I showed
you earlier, but it's that same info sheet.

00:06:02.079 --> 00:06:03.699
So you can get to this from two places.

00:06:03.699 --> 00:06:06.139
Hopefully nobody will ever get lost.

00:06:06.139 --> 00:06:12.000
Let me jump into, let me jump into applications here.

00:06:12.000 --> 00:06:14.540
Again, most people are going to plug in their USB printer.

00:06:14.540 --> 00:06:19.790
They'll never have to know that the System
Preferences is how you can manually add a printer.

00:06:19.790 --> 00:06:23.960
You plug-in a printer; it will be there.

00:06:23.959 --> 00:06:26.599
Okay. Safari, looks good.

00:06:26.600 --> 00:06:29.180
Mac version here, of course.

00:06:29.180 --> 00:06:31.060
This is the new world of the print dialog.

00:06:31.060 --> 00:06:37.410
For all applications the first thing the user's going
see when they print is these simplified print dialog.

00:06:37.410 --> 00:06:42.240
You can select from your, your array of printers or faxes.

00:06:42.240 --> 00:06:46.240
We've moved faxes up into that menu for configured faxes.

00:06:46.240 --> 00:06:49.050
We've kept the PDF workflow menu.

00:06:49.050 --> 00:06:51.819
All the workflow items continue to be accessible.

00:06:51.819 --> 00:06:59.459
And of course the user can always hit preview, and launch
preview.app, which will render this drawn page.

00:06:59.459 --> 00:07:01.949
So all of that is right at their fingertips.

00:07:01.949 --> 00:07:07.069
And of course command-P return
will generate document on paper.

00:07:07.069 --> 00:07:10.829
The expanded print dialog looks like this.

00:07:10.829 --> 00:07:14.919
The first thing that you notice which is most
striking is that there is an inline preview.

00:07:14.920 --> 00:07:18.120
It does represent what's actually on the pages.

00:07:18.120 --> 00:07:22.269
And it's actually live.

00:07:22.269 --> 00:07:26.319
So paper orientation and scale.

00:07:26.319 --> 00:07:30.949
One thing of note here which I always like.

00:07:30.949 --> 00:07:35.289
Safari forever, you used to go to Safari,
try and squeeze it down to the number

00:07:35.290 --> 00:07:37.140
of pages you want you had to go to Page Setup.

00:07:37.139 --> 00:07:41.769
But we give all applications now the
ability to move Page Setup application,

00:07:41.769 --> 00:07:44.919
Page Setup items directly into the application.

00:07:44.920 --> 00:07:47.069
So as an application developer you have a choice.

00:07:47.069 --> 00:07:52.300
You can add in paper size, orientation,
and scale right into the primary print UI.

00:07:52.300 --> 00:07:54.850
And it is live again.

00:07:54.850 --> 00:08:01.160
So if I do my 80 percent, you see I've got
my Safari document here down to two pages.

00:08:01.160 --> 00:08:06.010
Which is what I'm always trying to do is
figure out how to get that last page out.

00:08:06.009 --> 00:08:09.199
One of the subtle things that you
might not notice right off is

00:08:09.199 --> 00:08:13.629
that the applications print pane is now put up by default.

00:08:13.629 --> 00:08:17.259
In this case, Safari's, put it right up there.

00:08:17.259 --> 00:08:22.969
This is a blessing and a curse for all of you who used
application print panes and used it to shove a whole bunch

00:08:22.970 --> 00:08:26.060
of random settings that you thought users would never find.

00:08:26.060 --> 00:08:27.810
They're now going to see it.

00:08:27.810 --> 00:08:33.200
The blessing is if you have important settings, if
you make this pretty, you can provide more than one

00:08:33.200 --> 00:08:36.000
and put your important ones in the first one.

00:08:36.000 --> 00:08:39.679
For the print panes we've reorganized them.

00:08:39.679 --> 00:08:45.129
The system provided ones will show
up right after the application ones.

00:08:45.129 --> 00:08:48.090
Makes it a little easier for customers to find.

00:08:48.090 --> 00:08:50.290
You can do the AV comparison with Tiger.

00:08:50.289 --> 00:08:53.449
We've changed a few of them, we've eliminated a few of them.

00:08:53.450 --> 00:08:56.300
All in the goal of simplifying.

00:08:56.299 --> 00:09:02.240
All the printer specific extensions are put below.

00:09:02.240 --> 00:09:07.289
There's some constraints about how wide these can be and
stuff that will get talked about later in the session.

00:09:07.289 --> 00:09:11.990
But from the user's perspective
it should be easier to find stuff.

00:09:11.990 --> 00:09:14.840
The work flow is here.

00:09:14.840 --> 00:09:18.940
You'll notice, interestingly enough,
there is no preview button here.

00:09:18.940 --> 00:09:23.390
The inline preview becomes your
preview of choice in the expanded view.

00:09:23.389 --> 00:09:32.509
Of course, if you want to have preview, you'll notice
that the first item here is to open PDF in preview.

00:09:32.509 --> 00:09:39.909
The application also has a choice to
eliminate the Page Setup dialog completely.

00:09:39.909 --> 00:09:45.009
So based on how you deal in your application
with which options or print time options,

00:09:45.009 --> 00:09:52.250
you may no longer need a print, a Page Setup,
if everything's put in your print dialog.

00:09:52.250 --> 00:09:55.200
Okay. So with all of that.

00:09:55.200 --> 00:09:56.810
That's the overview.

00:09:56.809 --> 00:10:00.019
Go look at the new System Preferences.

00:10:00.019 --> 00:10:05.299
Spend a little time with the print dialog and think about what
you can do with your application to take advantages

00:10:05.299 --> 00:10:07.609
of some of these features in the print dialog.

00:10:07.610 --> 00:10:15.940
So we'll go back to slides.

00:10:15.940 --> 00:10:23.900
And, let me introduce David Gelphman
whose going to give you the overview of the printing APIs.

00:10:23.899 --> 00:10:29.069
( Applause )

00:10:29.070 --> 00:10:29.410
>> Thanks Howard.

00:10:29.409 --> 00:10:30.139
Hello everybody.

00:10:30.139 --> 00:10:31.750
Glad to see you today.

00:10:31.750 --> 00:10:35.090
I'm David Gelphman, I work in graphics and imaging.

00:10:35.090 --> 00:10:36.580
Mostly on printing.

00:10:36.580 --> 00:10:37.610
Sometimes on graphics.

00:10:37.610 --> 00:10:40.519
Sometimes I write.

00:10:40.519 --> 00:10:46.289
I'm going give you a really high level
view of the printing APIs on Leopard.

00:10:46.289 --> 00:10:48.699
Your application sits at the top here.

00:10:48.700 --> 00:10:53.740
And you sit on top of a number of
printing APIs that are available to you.

00:10:53.740 --> 00:10:56.340
There's the Cocoa printing classes
that are available as part of AppKit.

00:10:56.340 --> 00:11:00.580
There are the Carbon printing APIs
that are available as part of Carbon.

00:11:00.580 --> 00:11:02.629
Those are 32-bit only.

00:11:02.629 --> 00:11:05.860
Both of those APIs sit on top of the core printing APIs.

00:11:05.860 --> 00:11:09.259
We'll talk about those in just a little bit.

00:11:09.259 --> 00:11:13.779
And everything sits on top of the Common UNIX
Printing System, CUPS, and I'll give you an idea

00:11:13.779 --> 00:11:18.049
of what, the kinds of things that are in CUPS.

00:11:18.049 --> 00:11:23.059
So, just talk about sort of a whole bunch of
different pieces of API, and you might say, well,

00:11:23.059 --> 00:11:27.569
what should I use in my application,
it looks like there's a lot of stuff.

00:11:27.570 --> 00:11:34.340
So to paraphrase a great philosopher Woody Allen, I want to
try and give you a little tour and a little bit more detail

00:11:34.340 --> 00:11:37.980
of these APIs and give you some guidance
about where you might want to head.

00:11:37.980 --> 00:11:42.509
And for most of your applications you're
not going to be using all these APIs.

00:11:42.509 --> 00:11:46.620
You're probably going to be using just one of these pieces.

00:11:46.620 --> 00:11:50.990
But they are all available to you, and I
want you to have an idea what's in them.

00:11:52.850 --> 00:11:57.240
So I'm going to focus first on the Cocoa printing classes.

00:11:57.240 --> 00:12:01.460
If you are a Cocoa application developer,
and I am assuming most of you are,

00:12:01.460 --> 00:12:05.070
you want to be using the Cocoa printing classes.

00:12:05.070 --> 00:12:07.200
These are the important classes to your application,

00:12:07.200 --> 00:12:13.720
NSPrintOperation manages the
process of actually doing a print job.

00:12:13.720 --> 00:12:19.509
NSPrintInfo encapsulates all the printing information
about a given print job, such as the kind of,

00:12:19.509 --> 00:12:25.480
the size of the paper for your document,
the print settings themselves and so on.

00:12:25.480 --> 00:12:32.720
NSPrintPanel and NSPageLayout are the objects that
represent the print dialog and the Page Setup dialog,

00:12:32.720 --> 00:12:38.379
respectively, in their methods in
order to configure those and show them.

00:12:38.379 --> 00:12:41.169
And NSPrinter represents the printer object itself.

00:12:41.169 --> 00:12:47.509
And in Cocoa you can query that to get some
information about the printer characteristics.

00:12:47.509 --> 00:12:55.000
Now the Cocoa classes provide what everything that a
typical Cocoa application developer would need for printing.

00:12:55.000 --> 00:12:56.769
It's unlikely you're going to need anything else.

00:12:56.769 --> 00:13:01.000
We're going to talk about other things, but
that's really where you would be focused.

00:13:01.000 --> 00:13:08.399
Now, as I mentioned before, the Cocoa printing APIs
or classes are built on top of the core printing,

00:13:08.399 --> 00:13:12.699
and in Leopard, new in Leopard, we are giving
you access to the Core printing objects

00:13:12.700 --> 00:13:15.600
that are underneath the Cocoa printing classes.

00:13:15.600 --> 00:13:19.269
So that if you need to do something
that's not in Cocoa you can.

00:13:19.269 --> 00:13:25.679
That's not typical for an application, but it is
something that we've added, so that you can get at that.

00:13:25.679 --> 00:13:30.299
So let me talk about the Core Printing
APIs a little bit. Now,

00:13:30.299 --> 00:13:33.620
Core Printing is a new terminology
you might not have heard before.

00:13:33.620 --> 00:13:40.110
A lot of my colleagues in graphics and imaging, they've
been encouraging us to try to figure out how to get printing

00:13:40.110 --> 00:13:43.710
to actually execute on the graphics chip itself.

00:13:43.710 --> 00:13:50.300
You've already heard about Core Image,
Core Video, Core Audio, Core Animation.

00:13:50.299 --> 00:13:52.750
Well, that's not what we're doing here, of course.

00:13:52.750 --> 00:13:55.830
We're not rendering on the graphics chip.

00:13:55.830 --> 00:14:00.810
But Core Printing is something that's
always been part of the printing environment

00:14:00.809 --> 00:14:06.389
of Mac OS X. It's a framework that's part
of the application services framework.

00:14:06.389 --> 00:14:08.909
It's a C procedural interface.

00:14:08.909 --> 00:14:10.629
It doesn't provide any user interface.

00:14:10.629 --> 00:14:15.899
It sits underneath all the pieces that do provide user
interface, as everything else in application services is.

00:14:15.899 --> 00:14:19.000
There's no user interface associated with it.

00:14:19.000 --> 00:14:21.080
The types, these are classes.

00:14:21.080 --> 00:14:23.009
They're opaque data types.

00:14:23.009 --> 00:14:30.919
PMPageFormat and PMPaper relate to the paper size of a
particular document that you want to print, and the format,

00:14:30.919 --> 00:14:35.959
such as the orientation, whether it's,
you have scaling on, that kind of thing.

00:14:35.960 --> 00:14:39.860
The PMPrintSettings represent the
print settings for a given print job.

00:14:39.860 --> 00:14:43.879
So, number of copies, collation,
dupe indicates, that kind of thing.

00:14:43.879 --> 00:14:48.970
The PMPrintSession is just a way to encapsulate
a printing operation so that, for example, you,

00:14:48.970 --> 00:14:53.019
multiple sessions going on at once might
represent multiple print jobs happening.

00:14:53.019 --> 00:15:01.980
And then the PMPrinter is the lower level class, type,
which represents the printer in the Core Printing API.

00:15:01.980 --> 00:15:06.519
Now the Core Printing APIs are available
to any application that runs on Mac OS X,

00:15:06.519 --> 00:15:09.470
whether you have the user interface
or you don't have the user interface.

00:15:09.470 --> 00:15:12.899
If your're command line tool, for
example, you could use those APIs.

00:15:12.899 --> 00:15:17.389
If you're a Cocoa application or a Carbon
application, you can use those APIs.

00:15:17.389 --> 00:15:20.960
They're rarely needed by a Cocoa
app, but in general, these are,

00:15:20.960 --> 00:15:28.269
these are functions that are available to any class
of application that's running on Mac OS X. Now,

00:15:28.269 --> 00:15:35.199
the Carbon printing APIs as I mentioned are 32-bit
only, as are other aspects of the UI in Carbon.

00:15:35.200 --> 00:15:39.580
And only a Carbon applications
developer would use these APIs.

00:15:39.580 --> 00:15:41.730
They're procedural APIs.

00:15:41.730 --> 00:15:50.080
C procedural APIs. And these functions provide the UI
portion of printing for a Carbon application.

00:15:50.080 --> 00:15:54.230
For example, to bring up the print dialog,
to bring up the Page Setup dialog.

00:15:54.230 --> 00:16:00.139
Or to begin a print -- a print loop or a
printing operation which shows a status dialog.

00:16:00.139 --> 00:16:04.470
So those would be examples of Carbon Printing APIs.

00:16:04.470 --> 00:16:10.110
And anyone who's using these APIs would be
supplementing, for example, their print loop,

00:16:10.110 --> 00:16:16.310
with using the Core Printing APIs that represent the
non-printing portions of the, of your printing operation.

00:16:16.309 --> 00:16:21.689
Such as getting the graphics context to draw
in too, as part of your printing operation.

00:16:23.200 --> 00:16:28.009
And then underneath everything is
the Common UNIX Printing System.

00:16:28.009 --> 00:16:31.100
This, again, a C procedural API.

00:16:31.100 --> 00:16:36.940
And most of the clients of these APIs are
either the printing system itself,

00:16:36.940 --> 00:16:39.260
which is implemented on top of the CUPS.

00:16:39.259 --> 00:16:45.850
Or printer driver developers who are implementing
their driver processes as part of the printing process.

00:16:45.850 --> 00:16:47.820
Applications can use it.

00:16:47.820 --> 00:16:54.810
And the most typical use of the use of CUPS for
printing application would be to look at the data

00:16:54.809 --> 00:16:59.699
in a post-script printer description file that describes
the given print queue that you're going to print to.

00:16:59.700 --> 00:17:00.810
But that's not typical.

00:17:00.809 --> 00:17:07.309
That would be, for example, an application that does some
kind of printer management, or some specialized applications

00:17:07.309 --> 00:17:10.970
that need to know more about the actual printer itself.

00:17:10.970 --> 00:17:15.049
Now, as I mentioned before, Michael's going to give a
talk, Michael Sweet is going to give a talk tomorrow

00:17:15.049 --> 00:17:17.579
about the Common UNIX Printing System at 9:00AM.

00:17:17.579 --> 00:17:21.419
And if you're interesting, if you're driver
writer, or if you're interested in the lower levels

00:17:21.420 --> 00:17:25.789
of the printing system, you want to be there.

00:17:25.789 --> 00:17:31.430
Okay. So let's talk just a little bit about the very
basics of doing printing in a Cocoa application.

00:17:31.430 --> 00:17:33.029
And when I say basics, I mean basics.

00:17:33.029 --> 00:17:35.190
Just to get you started.

00:17:35.190 --> 00:17:39.580
So this is sort of the typical, what
you would do as a Cocoa application.

00:17:39.579 --> 00:17:43.539
You would first create an NSPrintOperation.

00:17:43.539 --> 00:17:44.670
This is the method you would use.

00:17:44.670 --> 00:17:47.800
Print operation with view, with printInfo.

00:17:47.799 --> 00:17:51.629
And once you have a print operation,
you would run the operation.

00:17:51.630 --> 00:17:56.090
And running the operation causes by
default the print dialog to come up.

00:17:56.089 --> 00:17:59.299
The user would interact with the print dialog.

00:17:59.299 --> 00:18:07.009
And when the user clicks print, the run
operation method will make decisions about pagination

00:18:07.009 --> 00:18:13.910
and call your drawRect method in order to cause
the drawing for each page to actually occur.

00:18:13.910 --> 00:18:19.000
So really, all that you do as an application
is create the operation, call runOperation,

00:18:19.000 --> 00:18:23.500
and then respond to the request to draw the pages.

00:18:23.500 --> 00:18:24.910
And here's what it looks like in code.

00:18:24.910 --> 00:18:26.800
Or at least a little bit of code.

00:18:26.799 --> 00:18:31.930
As always, your drawRect method is supposed to draft
contents of the rect that it is requested to draw.

00:18:31.930 --> 00:18:34.029
So that's what you do.

00:18:34.029 --> 00:18:39.329
And when your view is sent to print,
when you invoke the print method

00:18:39.329 --> 00:18:44.529
on your view you would, so I talked about the drawRect.

00:18:44.529 --> 00:18:48.460
For the case where you're now going to print you begin,

00:18:48.460 --> 00:18:53.799
you create an operation by passing
in the view that you want to print.

00:18:53.799 --> 00:18:57.149
The print info that you've created
in some way that you want to use.

00:18:57.150 --> 00:19:00.110
Either from a saved document, or if
you're printing for the first time

00:19:00.109 --> 00:19:03.919
from this document, you create a new print, print info.

00:19:03.920 --> 00:19:05.970
And then run the operation.

00:19:05.970 --> 00:19:07.920
So this is a really simplified view of printing.

00:19:07.920 --> 00:19:12.200
But you really could have this much code and
get printing to happen in your application.

00:19:12.200 --> 00:19:13.630
There's no print loop.

00:19:13.630 --> 00:19:18.580
The Cocoa run operation takes care of that.

00:19:18.579 --> 00:19:24.299
Now, there's, of course, a lot of things you
might want to do to tailor your application

00:19:24.299 --> 00:19:27.359
to your needs beyond who I've just talked about.

00:19:27.359 --> 00:19:33.339
For example, by default Cocoa is going to take
the current paper size and the size of your view,

00:19:33.339 --> 00:19:37.750
and it's going to make some pagination decisions
about how to actually take your view and cut it

00:19:37.750 --> 00:19:41.329
up into a series of rectangles that represent the pages.

00:19:41.329 --> 00:19:44.559
You may have a need to customize that.

00:19:44.559 --> 00:19:47.809
There's a number of ways to customize it,
including a very specify customization

00:19:47.809 --> 00:19:50.369
that I am going to show you in just a minute.

00:19:50.369 --> 00:19:54.839
I mentioned that new in Leopard is the
ability to use the Core Printing APIs.

00:19:54.839 --> 00:19:56.259
And so I will give you an example of that.

00:19:56.259 --> 00:20:01.359
And then after that we're going to talk in detail
about customizing the print dialog in the ways

00:20:01.359 --> 00:20:06.769
that Howard's talked a little bit about already;
we're going to give you a lot more detail about it.

00:20:06.769 --> 00:20:11.180
So let's talk about adding custom, custom pagination.

00:20:11.180 --> 00:20:14.519
So, the first method I have here knows page range.

00:20:14.519 --> 00:20:18.389
Gives you the opportunity to tell
Cocoa how many pages, excuse me,

00:20:18.390 --> 00:20:24.820
how many pages this document will need in
order to be represented in your print job.

00:20:24.819 --> 00:20:31.349
My very simple example here is just to say
starting with page one, and its one page.

00:20:31.349 --> 00:20:37.309
Now, a more typical example would be examine
the print info for the current print operation,

00:20:37.309 --> 00:20:44.379
and to make pagination decisions to determine how your pages
will layout for that print info, that is the paper size.

00:20:44.380 --> 00:20:47.390
And then report that many pages.

00:20:47.390 --> 00:20:56.630
The second method I have here, rectForPage, is a
method that you can implement to tell Cocoa, okay,

00:20:56.630 --> 00:21:03.010
for a given page, here's the rectangle on my view
that I want you to request my view be drawn with.

00:21:03.009 --> 00:21:09.720
So this gives you a way to make all kinds of decisions for
a given page which portion of your view should be drawn.

00:21:09.720 --> 00:21:15.490
Now this particular example gets the print info from the
current print operation that's in play; that's going on.

00:21:15.490 --> 00:21:21.029
And for that print info it finds what the
paper size is, and just returns the rectangle

00:21:21.029 --> 00:21:23.809
which is the width and height of that page.

00:21:23.809 --> 00:21:25.599
So, like I said, it's a one page document.

00:21:25.599 --> 00:21:28.569
It's a very simple pagination I am using here.

00:21:28.569 --> 00:21:33.339
More typically, you'd of course would be making decisions
about how to paginate, but the important thing

00:21:33.339 --> 00:21:38.220
of this example is that you're getting the
paper size for the current print operation.

00:21:38.220 --> 00:21:43.380
And that's important for the live preview, because if
the user's changing the paper size in the print dialog,

00:21:43.380 --> 00:21:48.160
or changing the orientation or whatever, your
pagination is going to change, potentially,

00:21:48.160 --> 00:21:51.150
and you want to reflect in your rectForPage method.

00:21:51.150 --> 00:21:57.580
Okay. So let's go into something a
little more advanced in talking about how

00:21:57.579 --> 00:22:02.949
to utilize the Core Printing APIs,
even as part of the Cocoa application.

00:22:02.950 --> 00:22:07.970
So as I mentioned before, this isn't something
that's typical for most Cocoa applications.

00:22:07.970 --> 00:22:09.519
It is in Leopard and later only.

00:22:09.519 --> 00:22:12.250
There's no Tiger implementation or earlier.

00:22:12.250 --> 00:22:17.579
And just to give you an idea of some of the possible deeds,
because we've heard about this from a number of developers.

00:22:17.579 --> 00:22:22.589
For example, some people want to change the print
settings for a given print job programatically.

00:22:22.589 --> 00:22:30.240
Some print setting, maybe it's the number of copies,
maybe it's duplex or collation, or the order of pages,

00:22:30.240 --> 00:22:35.849
to do reverse order or something like that,
but just to do it programatically, for example,

00:22:35.849 --> 00:22:41.980
maybe in your special office you have a
special application that always want to print

00:22:41.980 --> 00:22:44.589
to this printer using a particular paper size.

00:22:44.589 --> 00:22:50.139
And the users don't want, you know, for your, assembling a
document that you want to print and you programatically want

00:22:50.140 --> 00:22:54.390
to say use ledger paper, or use some specific size paper.

00:22:54.390 --> 00:22:58.480
Or in this example, the print settings,
specific print settings.

00:22:58.480 --> 00:23:02.740
So I am going to give you an example of
changing the print settings programatically.

00:23:02.740 --> 00:23:06.269
Another example would be to chose
the paper size programatically.

00:23:06.269 --> 00:23:07.089
We'll see how to do that.

00:23:07.089 --> 00:23:10.459
And then just the third example that I am
not going to show you in code how to do it,

00:23:10.460 --> 00:23:13.740
but an idea of where sometimes applications want

00:23:13.740 --> 00:23:20.120
to use the Core Printing APIs is there's the
ability to do direct submission of documents.

00:23:20.119 --> 00:23:24.849
So you already have a fully formed PDF or PostScript
file, and you want to submit that to the printing system

00:23:24.849 --> 00:23:29.319
with a given set of settings, there's
Core Printing API to let you do that.

00:23:29.319 --> 00:23:33.839
And you can do that from a Cocoa application now.

00:23:33.839 --> 00:23:36.179
Okay. So here's the general idea.

00:23:36.180 --> 00:23:41.430
As I said before, NSPrintInfo is the Cocoa
encapsulation of print job information.

00:23:41.430 --> 00:23:47.350
So it contains within it a print session,
a page format, and print settings.

00:23:47.349 --> 00:23:49.699
These Core Printing objects.

00:23:49.700 --> 00:23:58.250
Now Cocoa has added new methods to the NSPrintInfo class to
allow you to get these objects out of a given NSPrintInfo.

00:23:58.250 --> 00:24:03.359
If you get the object out and you make changes to
it, for example you change the page format,

00:24:03.359 --> 00:24:09.329
in order to have Cocoa recognize that the page changed
inside of its print info you need to call the update

00:24:09.329 --> 00:24:15.769
from PMPageFormat method, and the corresponding
method if you were changing the print settings.

00:24:15.769 --> 00:24:16.960
Okay. So let's take a look.

00:24:16.960 --> 00:24:20.630
I've just got a real simple example here of just
programatically setting the number of copies

00:24:20.630 --> 00:24:25.210
and turning on collation for a given NSPrintInfo.

00:24:25.210 --> 00:24:28.240
Well, the first thing, of course, is you
get the print info that you want to modify.

00:24:28.240 --> 00:24:33.769
However, it's the one you stored with the
document or a new one you've created, or whatever.

00:24:33.769 --> 00:24:38.629
Once you have that, you can call the PMPrintSettings
method on the print info

00:24:38.630 --> 00:24:43.510
to get the settings that correspond to that print info.

00:24:43.509 --> 00:24:48.129
Once you have the PMPrintSettings for the
print info, now we can use the Core Printing API

00:24:48.130 --> 00:24:51.140
on the PMPrintSettings to make settings changes.

00:24:51.140 --> 00:24:58.759
For example, in this case we're changing the
number of copies to 10, we're turning collation on.

00:24:58.759 --> 00:25:06.319
Now that we've done making the changes we wanted to make we
call the update PMPrintSettings method on the print info

00:25:06.319 --> 00:25:11.909
to tell Cocoa or notify Cocoa that
the print settings have changed.

00:25:11.910 --> 00:25:13.180
It's a real simple example.

00:25:13.180 --> 00:25:16.450
Here's one that's a little bit more involved.

00:25:16.450 --> 00:25:25.759
So now this example's going to programatically set
the paper size that a given paper info corresponds to.

00:25:25.759 --> 00:25:32.329
So the goal here was to chose one of the papers that's
available for the target destination printer.

00:25:32.329 --> 00:25:37.710
The built in papers, the manufacturer
supported papers that are available.

00:25:37.710 --> 00:25:43.410
For example, U.S. Letter, U.S. Legal, Ledger,
whatever's available for that printer.

00:25:43.410 --> 00:25:46.410
So there's four steps involved,
and we'll run through them in code.

00:25:46.410 --> 00:25:49.350
But I wanted to give you an idea of them first

00:25:49.349 --> 00:25:53.459
The first thing you do is well, you want to
find out what the currently selected printer is;

00:25:53.460 --> 00:25:55.250
what's the destination printer for the print job.

00:25:55.250 --> 00:25:59.200
Because you want to pick from the
papers available from that printer.

00:25:59.200 --> 00:26:04.730
Once you do that, you can get the array of
papers that correspond to the built-in papers,

00:26:04.730 --> 00:26:07.769
or the predefined papers for that printer.

00:26:07.769 --> 00:26:12.559
Once we have that list of papers we're
going to chose the one that we want.

00:26:12.559 --> 00:26:14.829
Either program, you can do that programatically.

00:26:14.829 --> 00:26:17.980
Look at the paper sizes and choose the one you want.

00:26:17.980 --> 00:26:21.400
And once you have that, you can make the paper be that,

00:26:21.400 --> 00:26:26.590
you can make the destination paper
for the print info be that paper.

00:26:26.589 --> 00:26:30.269
So let's look at it in code.

00:26:30.269 --> 00:26:34.160
Once again, the first thing, of
course, we have to have the printInfo.

00:26:34.160 --> 00:26:40.769
And from that printInfo we can get the PMPrintSession
that that print info correspondeds to.

00:26:40.769 --> 00:26:45.119
And from the session, excuse me, from
the session we can get the current printer

00:26:45.119 --> 00:26:47.659
that is the destination printer for that session.

00:26:47.660 --> 00:26:54.160
So for example, when the print dialog goes
down, that would be the destination printer.

00:26:54.160 --> 00:27:01.380
Once we have the printer or the PMPrinter object, we can
now get the list of papers, the CF array, or the NS array,

00:27:01.380 --> 00:27:05.310
of the papers that are available for the printer.

00:27:05.309 --> 00:27:08.299
Now I've got a little cheat here because
I don't know what algorithm you want

00:27:08.299 --> 00:27:10.940
to apply to choose a paper from that list.

00:27:10.940 --> 00:27:14.990
I'm just getting the zero, the first
paper in the list from my example here.

00:27:14.990 --> 00:27:19.190
But once we do that we have PMPaper
object that's a Core Printing object

00:27:19.190 --> 00:27:22.640
that represents the destination
paper that we're interested in.

00:27:24.250 --> 00:27:30.039
Okay. So now we want to make that paper be
the paper that's used by the NSPrintInfo.

00:27:30.039 --> 00:27:33.079
The way we do that is we take a
paper, we need a page format

00:27:33.079 --> 00:27:37.230
because that's what Cocoa understands
as its underlying Core Printer object.

00:27:37.230 --> 00:27:45.509
So, from the paper that we just obtained, we make a new
page format by calling PMCreatePageFormat with PM paper.

00:27:45.509 --> 00:27:53.079
So we created a new Core Printing object, a PMPageFormat
object, and what we want to do is we want to make

00:27:53.079 --> 00:27:57.879
that be the new page format object that's used by Cocoa.

00:27:57.880 --> 00:28:01.300
So what we do is we obtain the original page format.

00:28:01.299 --> 00:28:06.589
That is the one that's already in the
print info using the PMPageFormat method.

00:28:06.589 --> 00:28:13.369
And now we copy over our new format
onto the original format.

00:28:13.369 --> 00:28:18.729
That is we've replaced the page format
in the original format with our new one.

00:28:18.730 --> 00:28:20.610
Okay. We've made changes in the page format.

00:28:20.609 --> 00:28:24.819
We need to tell Cocoa that we've
made the changes in the page format.

00:28:24.819 --> 00:28:30.579
Now the last thing here is because we've created
a new page format, we need to release it.

00:28:30.579 --> 00:28:32.199
Cocoa will retain whatever it needs.

00:28:32.200 --> 00:28:34.390
We need to release it because we created it.

00:28:34.390 --> 00:28:41.850
And for the Core Printing API, the way to release those
objects is using the PM release method, or release function.

00:28:41.849 --> 00:28:44.969
Okay. A little bit more involved,
but it just gives you a basic idea.

00:28:44.970 --> 00:28:52.500
And the reason I use this example is we found out
this is a particular thing a lot of people want to do.

00:28:52.500 --> 00:28:55.930
Okay. I want to give you just a short
summary of what we talked about.

00:28:55.930 --> 00:28:58.519
We talked about the high level printing APIs.

00:28:58.519 --> 00:29:02.210
We talked, we did a little basic Cocoa print programming,

00:29:02.210 --> 00:29:07.390
and we used the Core Printing APIs
from the Cocoa application.

00:29:07.390 --> 00:29:12.460
So next is we want to talk about in
detail customizing the print dialog.

00:29:12.460 --> 00:29:15.480
And I would like to introduce you
to Alan Beck.

00:29:15.480 --> 00:29:17.950
( Applause )

00:29:17.950 --> 00:29:20.039
>> Thank you, David.

00:29:20.039 --> 00:29:25.619
So, as an application you probably do
want to be customizing the print dialog.

00:29:25.619 --> 00:29:27.059
So that's basically what I'm going to be talking about.

00:29:27.059 --> 00:29:30.460
There's several ways of customizing the print dialog.

00:29:30.460 --> 00:29:34.779
One of them, the first being the
simple and expanded print dialog.

00:29:34.779 --> 00:29:36.819
This is something the user would probably do.

00:29:36.819 --> 00:29:40.039
It's nothing that the application has control over.

00:29:40.039 --> 00:29:43.829
Basically, as you can see, we have the two different states.

00:29:43.829 --> 00:29:47.279
And it is saved on a per application, per user basis.

00:29:47.279 --> 00:29:50.430
So, in other words, say a user is in Mail.

00:29:50.430 --> 00:29:53.080
They really don't care about what print settings they have.

00:29:53.079 --> 00:29:54.949
They just do command-P return.

00:29:54.950 --> 00:30:00.569
So they would be the, the print dialog
in Mail set to be the simple dialog.

00:30:00.569 --> 00:30:08.000
Let's say you're over in Safari, or in Word, or in
Pages, and that user does care about some of these,

00:30:08.000 --> 00:30:10.420
always changing some of the settings that are there.

00:30:10.420 --> 00:30:16.150
So he would leave the print dialog in
that application in the expanded state.

00:30:16.150 --> 00:30:20.530
And so basically when he brings up Mail
it will show up in the simple state.

00:30:20.529 --> 00:30:24.519
And every time he brought up Safari it
would come up in the expanded state.

00:30:24.519 --> 00:30:28.829
And there's one thing that we;d like to
tell you is this is user controlled item.

00:30:28.829 --> 00:30:35.419
You as an application developer, you do not have control
over what state the print dialog will be coming up in

00:30:35.420 --> 00:30:41.640
Now let's talk about how you, the application
developer, can customize the print dialog.

00:30:41.640 --> 00:30:45.700
The first one that Howard alluded to
is we're now allowing applications

00:30:45.700 --> 00:30:48.779
to add the Page Setup functionality to the print dialog.

00:30:48.779 --> 00:30:55.899
As you can see here, this dialog, the application has
decided that paper size and orientation are the two things

00:30:55.900 --> 00:30:59.140
that they want the user to be able
to change in the print dialog.

00:30:59.140 --> 00:31:05.370
We feel that these are probably the two most common items
that applications will be adding, is the print dialog.

00:31:05.369 --> 00:31:11.309
You can also add scale if you feel
that users need that ability.

00:31:11.309 --> 00:31:20.809
We have some guidelines for when to use, when
to add the Page Setup items to the print dialog.

00:31:20.809 --> 00:31:24.079
We feel that this is mostly for
applications that are not document-based.

00:31:24.079 --> 00:31:30.149
In other words, the content of your
window or your application is transitory.

00:31:30.150 --> 00:31:37.090
So, in other words, document-based application, usually
it saves page format information along with the document.

00:31:37.089 --> 00:31:42.699
So therefore the user does really need to
change that information on the document itself,

00:31:42.700 --> 00:31:45.710
so therefore the Page Setup dialog
box makes sense for them.

00:31:45.710 --> 00:31:52.500
For some, for applications such as Mail, Safari, that
are transit, content is transitory in nature,

00:31:52.500 --> 00:31:56.640
it does make sense for you to add
that to the print dialog.

00:31:56.640 --> 00:32:00.830
As Howard mentions, it does reduce a number
of Page Setup print dialog round trips.

00:32:00.829 --> 00:32:04.819
Just say, I don't know how many times I have done
that on Safari to get the right number of pages.

00:32:04.819 --> 00:32:09.439
You as an application developer, you
must opt in to get this functionality.

00:32:09.440 --> 00:32:14.360
I will show you a little bit later as to
how you can actually do that yourselves.

00:32:14.359 --> 00:32:18.500
And as Howard mentioned as well, you
as application developer can decide

00:32:18.500 --> 00:32:22.859
if you do need the Page Setup, you know, menu item.

00:32:22.859 --> 00:32:28.299
Or you can remove it if you feel you need to.

00:32:28.299 --> 00:32:31.619
We are, added another option
for the Page Setup functionality.

00:32:31.619 --> 00:32:35.129
You can actually put the Page Setup
functionality in its own pane.

00:32:35.130 --> 00:32:43.610
Allows you to basically keep the clean print dialog
while still removing the Page Setup menu item.

00:32:43.609 --> 00:32:49.379
It's an option that you pass into some of the APIs.

00:32:49.380 --> 00:32:55.480
So here's a very simple example of
adding the Page Setup functionality.

00:32:55.480 --> 00:32:58.880
First thing you do is you create your print operation.

00:32:58.880 --> 00:33:02.470
You give it the view and the print info.

00:33:02.470 --> 00:33:05.910
And from the print operation you
just go ahead and get the print panel

00:33:05.910 --> 00:33:10.110
from that using the print panel
method on the print operation.

00:33:10.109 --> 00:33:13.019
And this is where the real work gets done.

00:33:13.019 --> 00:33:16.799
Basically, we call the set
options on the print panel.

00:33:16.799 --> 00:33:22.950
We get the current options, and in this case we're
orient in, saying we want to show the paper size.

00:33:22.950 --> 00:33:27.259
And orient saying that we want to show the orientation.

00:33:27.259 --> 00:33:31.579
inline preview in the print dialog.

00:33:31.579 --> 00:33:35.689
This is something we previewed
at last WWDC and now,

00:33:35.690 --> 00:33:42.470
the BetA that you guys have in your hands
has the full implementation of the preview.

00:33:42.470 --> 00:33:46.720
As you can see, it is, you know, it is a live preview.

00:33:46.720 --> 00:33:47.850
You can see the number of pages.

00:33:47.849 --> 00:33:49.879
You can scroll through the pages.

00:33:49.880 --> 00:33:56.740
And as you click items, the preview does change.

00:33:56.740 --> 00:34:02.339
There is some caveats with inline preview.

00:34:02.339 --> 00:34:04.299
It is for Cocoa applications only.

00:34:04.299 --> 00:34:06.480
It works in conjunction with the print operation.

00:34:06.480 --> 00:34:15.690
As David mentioned, your drawRect methods will be
called to draw each page that is shown in the preview.

00:34:15.690 --> 00:34:21.170
It's like when the dialog comes up we actually one through
your document, we figure out how many pages there are,

00:34:21.170 --> 00:34:26.309
and we will actually draw each page
into that, into that context.

00:34:26.309 --> 00:34:31.239
It is shown by default for mostly the Cocoa applications.

00:34:31.239 --> 00:34:33.299
There we have another caveat.

00:34:33.300 --> 00:34:40.010
If you're using the old-style set accessory
view, then the preview will not be shown.

00:34:40.010 --> 00:34:43.950
That is one of the caveats that
we do have for the inline preview.

00:34:43.949 --> 00:34:52.579
Now we have an inline preview, we want to make sure that you
don't forget that the print view is important to the users.

00:34:52.579 --> 00:34:57.299
Where possible, use your document window
to show what you're going to print.

00:34:57.300 --> 00:35:00.860
Don't, you know, let the preview
or the print dialog do it.

00:35:00.860 --> 00:35:01.620
It is small.

00:35:01.619 --> 00:35:03.299
There is no Expand.

00:35:03.300 --> 00:35:04.860
You can't magnify in.

00:35:04.860 --> 00:35:13.260
So the user will, you know, user is going be
missing something in that itty-bitty preview.

00:35:13.260 --> 00:35:18.920
Your print view, unless you use your
format the page and edit the data that they're going

00:35:18.920 --> 00:35:21.930
to be printing, and it's a good format to print.

00:35:21.929 --> 00:35:25.559
It's a good format to show the users in.

00:35:25.559 --> 00:35:29.989
And let's not forget, WYSIWYG
is still important to our users.

00:35:29.989 --> 00:35:34.000
And here's some examples of what
we're talking about, the print view.

00:35:34.000 --> 00:35:36.349
This is iPhoto the card.

00:35:36.349 --> 00:35:42.949
And what you see on the screen is what
you get out in the, on the print out.

00:35:42.949 --> 00:35:46.339
Other examples are FileMaker pages
Adobe Lightroom, they all have the,

00:35:46.340 --> 00:35:52.720
what you see on the screen is what,
is exactly what comes out on the page.

00:35:54.730 --> 00:35:58.480
Adding application panes.

00:35:58.480 --> 00:36:05.860
This is where you, the application developer,
can do the most customizing of the print panel.

00:36:05.860 --> 00:36:10.700
As we said, your print panel is
now the first pane that is shown.

00:36:10.699 --> 00:36:14.969
We've added, you know, we've moved
the copies and pages above the lines.

00:36:14.969 --> 00:36:17.689
So, to allow room for the application pane to show.

00:36:17.690 --> 00:36:20.380
And it brings your important print options to the front.

00:36:20.380 --> 00:36:29.059
Every user will see those if they have
extended dialog and they hit command P. Okay.

00:36:29.059 --> 00:36:32.009
Some guidelines for you to use.

00:36:32.010 --> 00:36:36.880
Your print pane should be used to provide
print options and not formatting options.

00:36:36.880 --> 00:36:42.539
The formatting options should be done in
your print view and not in the print panel.

00:36:42.539 --> 00:36:45.509
Also, not every application needs a custom print pane.

00:36:45.510 --> 00:36:48.920
If you, there is an application for print pane,

00:36:48.920 --> 00:36:52.650
we will just show our layout panel
as the first pane that the user has.

00:36:52.650 --> 00:36:58.510
We have a new suggested width that
the pane is going to show in.

00:36:58.510 --> 00:37:01.320
Given that we've added the preview
to of the side of the print dialog,

00:37:01.320 --> 00:37:05.600
we've had to shrink the area that's
available to your print pane.

00:37:05.599 --> 00:37:10.750
So right now the maximum width we have is 420 pixels.

00:37:10.750 --> 00:37:16.409
They're, I want to tell you though, make your
print, your print pane view as small as possible.

00:37:16.409 --> 00:37:19.920
We will take care of centering it
and showing it in the print pane.

00:37:19.920 --> 00:37:21.960
So don't make it 420.

00:37:21.960 --> 00:37:26.340
Put it as small as you can get it, and we
will take care of the centering it for you.

00:37:26.340 --> 00:37:32.720
And if yours print pane is larger than 420 pixels,
we will then grow the print dialog for the rest

00:37:32.719 --> 00:37:40.359
of that print dialog's lifetime on the
screen to the old Tiger width, which is 543.

00:37:40.360 --> 00:37:44.780
As for suggested height, we were
saying keep it as small as possible.

00:37:44.780 --> 00:37:50.560
Given that what has been added above,
above the panel has, can grow and shrink.

00:37:50.559 --> 00:37:52.949
We were saying just keep it as short as possible.

00:37:52.949 --> 00:37:59.309
And if your pane is too tall, you may want to consider
breaking your functionality over several print panes.

00:37:59.309 --> 00:38:06.949
Now, there's several different print pane
types that application developers can use.

00:38:06.949 --> 00:38:10.769
For Cocoa applications and Leopard
we have the new NSViewController.

00:38:10.769 --> 00:38:13.130
It is Leopard only.

00:38:13.130 --> 00:38:20.450
And for older, for Tiger and before, we have
the old-style, the old-style accessory views.

00:38:20.449 --> 00:38:26.399
For Carbon applications and print driver developers
we have the Cocoa-based print dialog plug-ins

00:38:26.400 --> 00:38:29.450
which work on both Leopard and Tiger.

00:38:29.449 --> 00:38:36.769
And the Carbon, the old Carbon CFPlugin print dialog
plug-ins are created and again are 32-bit only.

00:38:36.769 --> 00:38:42.980
So I'm going talk a little bit more about
the new Leopard style of the print,

00:38:42.980 --> 00:38:46.039
the print pane, which is the NSViewController.

00:38:46.039 --> 00:38:49.860
It's a very simple way for Cocoa applications
to add panes to the print dialog.

00:38:49.860 --> 00:38:51.510
And Page Setup dialog.

00:38:51.510 --> 00:38:55.130
It allows for multiple panes so an
application can have as many panes as they want

00:38:55.130 --> 00:39:00.630
in that little front section of the pane pop up.

00:39:00.630 --> 00:39:06.550
And it allows, also allows you as the pane developer
to specify the title and provide summary information

00:39:06.550 --> 00:39:09.269
that will show up in the summary pane of the print dialog.

00:39:09.269 --> 00:39:14.869
So just basically, a few steps
of what you would need to idea

00:39:14.869 --> 00:39:18.839
to add a print accessory view controller
is basically create a class.

00:39:18.840 --> 00:39:25.980
You sub class it off of the NSViewController, and
adapting it to the NSPrintPanelAccessorizing protocol.

00:39:25.980 --> 00:39:29.829
You would then create your nib for your pane.

00:39:29.829 --> 00:39:33.549
And there's several methods that are part of
the protocol that you would need to implement.

00:39:33.550 --> 00:39:37.420
You would implement the
keyPathsForValuesAffectingPreview methods.

00:39:37.420 --> 00:39:40.730
And that basically tells the printing
system when values

00:39:40.730 --> 00:39:44.320
of these keys change it is time to redraw the preview.

00:39:44.320 --> 00:39:48.870
So therefore, if you say print headers and footers.

00:39:48.869 --> 00:39:53.069
It is like, the user would check that box.

00:39:53.070 --> 00:39:54.710
That key would be changed.

00:39:54.710 --> 00:39:58.429
And therefore we know that we would
need to redraw the preview.

00:39:58.429 --> 00:40:01.659
The next thing you would need to
implement, the localizedSummaryItems

00:40:01.659 --> 00:40:07.000
to get the summary text showing up in the summary panel.

00:40:07.000 --> 00:40:11.110
You would, if you want to change
the name of the tile for your pane,

00:40:11.110 --> 00:40:15.720
we will grab the application name any way we can get it.

00:40:15.719 --> 00:40:19.559
And that would become the title for your pane.

00:40:19.559 --> 00:40:23.400
If you don't like that name you
can implement the title method

00:40:23.400 --> 00:40:28.039
and we will use that strain for the title of your pane.

00:40:28.039 --> 00:40:31.829
Then just add the accessory controller to the print panel.

00:40:31.829 --> 00:40:39.170
So I'll just do a quick demo of
adding, adding a print panel.

00:40:39.170 --> 00:40:45.860
So what I've done is I have sketch, a standard
sample application

00:40:45.860 --> 00:40:51.890
on your CD. And I've added my own new class.

00:40:51.889 --> 00:40:54.250
It is, we have a print session view controller.

00:40:54.250 --> 00:40:57.719
You can see I've subclassed it off of NSViewController.

00:40:57.719 --> 00:41:01.589
And added the NSPrintPanelAccessorizing protocol.

00:41:01.590 --> 00:41:05.170
The demo I have is I am going to
have one check box in my pane.

00:41:05.170 --> 00:41:10.460
Basically allow, it's going to be, allowing the
user to print a frame around the page if they want.

00:41:10.460 --> 00:41:16.210
So here I have one button, the check box,
which is the print panes checked box.

00:41:16.210 --> 00:41:18.610
And I have one action, which is the togglePrintFrame

00:41:18.610 --> 00:41:22.690
which is what it will be called
when the user toggles the check box.

00:41:22.690 --> 00:41:27.960
Next is, let's go ahead and create a nib for it.

00:41:27.960 --> 00:41:29.389
So this is a standard nib.

00:41:29.389 --> 00:41:31.009
Let me go down.

00:41:31.010 --> 00:41:32.470
Let's pick a view.

00:41:32.469 --> 00:41:37.589
Here's my custom view.

00:41:37.590 --> 00:41:40.050
Let's make it just a little bit bigger.

00:41:40.050 --> 00:41:43.570
And now let's go in and add my check box.

00:41:43.570 --> 00:41:51.559
And it's called, print, let me get the right keys.

00:41:51.559 --> 00:41:56.389
printPageFrame.

00:41:56.389 --> 00:42:00.210
Frame. There we go.

00:42:00.210 --> 00:42:03.230
And okay, then let's make it a little bit better.

00:42:03.230 --> 00:42:09.980
As I said before, I am going make it as small
as possible, that encompasses all my items.

00:42:09.980 --> 00:42:12.750
So that's actually my view.

00:42:12.750 --> 00:42:15.409
Now let's go ahead and hook up some methods for it.

00:42:15.409 --> 00:42:23.759
So my files, I'm going, I'm going make this our print,
our PrintingAccessoryView controller class.

00:42:23.760 --> 00:42:27.580
And from here you can say that
we have the togglePrintFrame.

00:42:27.579 --> 00:42:31.079
You know, and we have the check box.

00:42:31.079 --> 00:42:34.210
Let's go ahead and hook up the method for it.

00:42:34.210 --> 00:42:36.110
So let's take, drag from here.

00:42:36.110 --> 00:42:38.730
Wonderful new features of IB 3.

00:42:38.730 --> 00:42:40.019
Let's just go ahead and drag this.

00:42:40.019 --> 00:42:41.619
This is the check box.

00:42:41.619 --> 00:42:44.400
This is the view.

00:42:44.400 --> 00:42:45.809
Hooking up to view.

00:42:45.809 --> 00:42:48.309
And here's the action.

00:42:48.309 --> 00:42:51.469
And I'm going to hook that up.

00:42:51.469 --> 00:42:55.359
Drag from there and hook that up to my check box.

00:42:55.360 --> 00:42:57.460
So basically now my view is done.

00:42:57.460 --> 00:42:58.329
And save it.

00:42:58.329 --> 00:43:05.269
Now let's just go back over here and look
at the implementation of my view controller.

00:43:07.170 --> 00:43:10.789
Basically, here's my implementation of view controller.

00:43:10.789 --> 00:43:15.000
on awakeFromNib, I am going to
set the state of my check box.

00:43:15.000 --> 00:43:21.880
And what I am doing is I am saving the
value for whether they want the print,

00:43:21.880 --> 00:43:25.780
want to print the PageFrame or not
in my user defaults preferences.

00:43:25.780 --> 00:43:32.440
So basically I am doing, I am
reading the value of the page,

00:43:32.440 --> 00:43:36.200
PrintPageFramePreferenceKey,
and basically on or off state.

00:43:36.199 --> 00:43:40.899
So that's, on initialization, that will happen.

00:43:40.900 --> 00:43:42.050
Now this is what I talked about earlier.

00:43:42.050 --> 00:43:45.390
The keyPathsForValuesAffectingPreview.

00:43:45.389 --> 00:43:50.529
This basically returns a set of keys of that,

00:43:50.530 --> 00:43:58.030
the printing system will listen to as those
values change, the preview will be updated.

00:43:58.030 --> 00:44:03.980
Then we also added the two KVO compliant methods
for that key, which is print, printPageFrame.

00:44:03.980 --> 00:44:07.750
Which basically reads the values out of the defaults.

00:44:07.750 --> 00:44:11.699
And the setPageFrame, which basically
writes the values out to the defaults.

00:44:11.699 --> 00:44:21.559
Next, we have the togglePrintPageFrame method, which is
basically when the user checks it, checks the check box on

00:44:21.559 --> 00:44:27.579
and off will basically set the PageFrame
to be basically what it wasn't.

00:44:27.579 --> 00:44:29.739
Then next we have the localized summary items.

00:44:29.739 --> 00:44:34.559
Basically the printing system is
inspecting an array of dictionaries

00:44:34.559 --> 00:44:37.199
for every item that you want shown in the summary pane.

00:44:37.199 --> 00:44:39.029
So basically here's an array.

00:44:39.030 --> 00:44:41.050
This had one item.

00:44:41.050 --> 00:44:43.160
We have the, the name for the item.

00:44:43.159 --> 00:44:45.279
Which is Print Page Frame.

00:44:45.280 --> 00:44:49.120
Then whether we have it on or off, we should say on or off.

00:44:49.119 --> 00:44:55.299
There again, it's up to you the application developer
to make this localizable as well.

00:44:55.300 --> 00:44:57.190
And lastly thing we have, the title.

00:44:57.190 --> 00:45:00.760
Which basically I'm just returning my Sketch Print Panel.

00:45:00.760 --> 00:45:04.810
So that's all there is to the controller.

00:45:04.809 --> 00:45:09.349
Now let's go to the view, the actual
view that does the rendering.

00:45:09.349 --> 00:45:10.529
And here's the drawRect method.

00:45:10.530 --> 00:45:12.210
It's giving a call for every page.

00:45:12.210 --> 00:45:15.289
And here's what I have added.

00:45:15.289 --> 00:45:20.039
Basically I go ahead and read the
value out of the user defaults.

00:45:20.039 --> 00:45:24.289
And it says that they want to print the PageFrame.

00:45:24.289 --> 00:45:30.779
I set the color to red and frame
that, frame the bounds of the view.

00:45:30.780 --> 00:45:33.710
So that's all there is to the view.

00:45:33.710 --> 00:45:37.289
Now let's go to the document,
which is the last portion of it.

00:45:37.289 --> 00:45:41.219
Let's go let's find the print operation.

00:45:41.219 --> 00:45:47.179
This is where the sketch document
prints, sets up the print operation.

00:45:47.179 --> 00:45:52.919
So basically here we create our
print accessory view controller.

00:45:52.920 --> 00:45:55.610
We allocate it with our nib name.

00:45:55.610 --> 00:46:03.559
We add the AccessoryController with the AccessoryController
method giving it our ViewController.

00:46:03.559 --> 00:46:07.969
And now that we've added it to the, now
that we've added it, we can release it

00:46:07.969 --> 00:46:17.699
So let's go ahead and run this, and hopefully,
let's make something, there we go.

00:46:17.699 --> 00:46:18.379
There we go.

00:46:18.380 --> 00:46:19.890
Let's just do a little face.

00:46:19.889 --> 00:46:20.859
There we go.

00:46:20.860 --> 00:46:22.680
Let's go ahead and hit print.

00:46:22.679 --> 00:46:27.129
There it is.

00:46:27.130 --> 00:46:31.490
And there you can see, this is the check box I added.

00:46:31.489 --> 00:46:32.209
It is live.

00:46:32.210 --> 00:46:37.909
So you can see the, the red bounding box being drawn.

00:46:37.909 --> 00:46:46.449
And if you go to the summary pane, here is my sketch
panel, which is the name of the panel that we added.

00:46:46.449 --> 00:46:49.730
And basically here we have the
printPageFrame that says its on.

00:46:49.730 --> 00:46:55.400
If you go back up here to my sketch panel,
let's turn it off, go back to summary.

00:46:55.400 --> 00:46:58.470
And there it says that it is off.

00:46:58.469 --> 00:47:00.649
So basically you can see, it's very easy.

00:47:00.650 --> 00:47:02.450
Let's go back to slides.

00:47:07.460 --> 00:47:11.119
See, it's very easy to add print
panels to the print dialog.

00:47:11.119 --> 00:47:14.559
It would be the same thing, exact same thing
would happen for the Page Setup dialog as well.

00:47:14.559 --> 00:47:18.340
I just showed an example in the print dialog.

00:47:18.340 --> 00:47:25.150
Use the NSPrintPanel or NSPageFormat,
NS format, to add the AccessoryController.

00:47:25.150 --> 00:47:29.559
Use keyPathsForValuesAffectingPreview
to keep your preview up-to-date.

00:47:29.559 --> 00:47:35.000
Basically return the list of keys of
values that would affect the preview.

00:47:35.000 --> 00:47:39.349
Then you use the localized summary
items to provide summary information.

00:47:40.869 --> 00:47:47.059
Now in summary, highlight some of the things
we're talking about with customizing the print dialog.

00:47:47.059 --> 00:47:50.860
Your application pane is now the first
pane that is shown to every user.

00:47:50.860 --> 00:47:57.090
If your application is not document-based, you
now have the option to remove the Page Setup menu

00:47:57.090 --> 00:47:59.280
and add to the controls of the print dialog.

00:47:59.280 --> 00:48:04.260
Last thing I want to stress is you, the application
developer, are now in control of what is shown

00:48:04.260 --> 00:48:06.280
in the dialog, in the print dialog.

00:48:06.280 --> 00:48:09.500
And it's up to you to decide what is right
and what makes sense for your application.

00:48:09.500 --> 00:48:15.309
Now let's hand it back to David and he will
talk about producing high quality output.

00:48:16.510 --> 00:48:20.620
( Applause )

00:48:20.619 --> 00:48:22.579
>> Thanks, Alan.

00:48:22.579 --> 00:48:24.409
So what do we mean by this?

00:48:24.409 --> 00:48:27.589
We're going to talk really about two specific topics here.

00:48:27.590 --> 00:48:33.050
One is as an application developer how do you
leverage the system color management to the best,

00:48:33.050 --> 00:48:36.240
to your, in the best way for your application?

00:48:36.239 --> 00:48:38.899
And we're also going to talk about what it means to print

00:48:38.900 --> 00:48:43.079
with the highest quality representation
of your data at print time.

00:48:43.079 --> 00:48:46.619
So let's start by talking about the way color management,

00:48:46.619 --> 00:48:54.889
or the concept of color management and how it's built into
Mac OS X. On the left here we have sort of the data content

00:48:54.889 --> 00:48:58.609
as it is on the screen, and as it
is in the original data content.

00:48:58.610 --> 00:49:04.870
And if you use device color, that is you don't
use color management, when you print you may end

00:49:04.869 --> 00:49:07.900
up with something on the top, on the right.

00:49:07.900 --> 00:49:12.599
Or if you used device independent color at
the time you render your color document,

00:49:12.599 --> 00:49:15.759
you will get color managed output at print time.

00:49:15.760 --> 00:49:20.780
And we expect that to represent what you see on
the screen or what the original content looks like.

00:49:20.780 --> 00:49:25.519
I have blown these up so you can see
where we haven't done color management,

00:49:25.519 --> 00:49:29.599
we've changed the color of the water,
we've changed the color of the jacket.

00:49:29.599 --> 00:49:32.849
Whereas when we've done color management
now we're seeing something,

00:49:32.849 --> 00:49:38.539
color that's similar and equivalent
to what you've gotten on the screen.

00:49:38.539 --> 00:49:40.759
And you want to see that in your application when you print.

00:49:40.760 --> 00:49:44.670
You want to get high quality color
and reproducible color when you print.

00:49:44.670 --> 00:49:49.840
So let's talk about the concept of device
color versus device independent color.

00:49:49.840 --> 00:49:53.730
Device color is tied to the specific output device.

00:49:53.730 --> 00:49:59.900
For example, for RGB color, if you have red, green, and
blue color values what you get with device color is going

00:49:59.900 --> 00:50:05.050
to be dependent on what device you look
at those red, green, and blue values with.

00:50:05.050 --> 00:50:08.050
Calibrated colors are device-independent colors.

00:50:08.050 --> 00:50:14.240
They contain additional information, in addition to
the color values themselves, that allows you to take

00:50:14.239 --> 00:50:17.259
that color and reproduce it on another device.

00:50:17.260 --> 00:50:25.510
That is, those, the calibration data characterizes the color in
a way that makes it reproducible on another device.

00:50:25.510 --> 00:50:29.890
Well, the message of all of this is
you want to draw with calibrated colors.

00:50:30.909 --> 00:50:34.190
Now Mac OS X printing color management, during the print,

00:50:34.190 --> 00:50:39.679
during the path of the printing your document through
the printing system we preserve color information

00:50:39.679 --> 00:50:42.969
that you supply us at the time that your application prints.

00:50:42.969 --> 00:50:47.109
And this allows us to do a faithful reproduction of color.

00:50:47.110 --> 00:50:51.140
So here's sort of a, the way a printing application

00:50:51.139 --> 00:50:54.940
and data from that application
passes through the printing system.

00:50:54.940 --> 00:50:57.619
So on the left here we have your application.

00:50:57.619 --> 00:51:04.710
Which is going to generate color in one or more
device independent or calibrated color spaces.

00:51:04.710 --> 00:51:08.039
The printing system will take the
drawing that your application does

00:51:08.039 --> 00:51:11.630
and it will produce a PDF spool file from that.

00:51:11.630 --> 00:51:15.130
And that PDF spool file is going to
be transmitted to the print server

00:51:15.130 --> 00:51:18.200
that will ultimately control the printing of your document.

00:51:18.199 --> 00:51:20.889
Now that print server, which is where the,

00:51:20.889 --> 00:51:25.039
that print server may be on the local
Macintosh that your application is running on.

00:51:25.039 --> 00:51:32.079
Or it could be on some network somewhere very far away from
your Macintosh, where the PDF document will be transmitted.

00:51:32.079 --> 00:51:37.480
So this example that I'm using for raster printing, and
for example, that raster printer will be potentially hooked

00:51:37.480 --> 00:51:39.659
up to the print server that you're actually printing to.

00:51:39.659 --> 00:51:42.480
Either your local one or the remote one.

00:51:42.480 --> 00:51:46.880
On that remote print server we're going to take the PDF
data and we're going to turn it into bits that we're going

00:51:46.880 --> 00:51:49.289
to hand off to the raster printer driver.

00:51:49.289 --> 00:51:51.650
And that's this process here.

00:51:51.650 --> 00:51:56.200
Where we're going to render the data
from the PDF document into raster data.

00:51:56.199 --> 00:52:01.210
Now the printer driver supplies us with a
profile that characterizes that printer,

00:52:01.210 --> 00:52:05.000
that describes how colors, how colors are reproduced on that printer.

00:52:05.000 --> 00:52:10.329
And that profile can be used by the process that
converts, that rasterizes,

00:52:10.329 --> 00:52:16.679
to preserve the color so that it's matched
to the destination printer device.

00:52:16.679 --> 00:52:19.169
Once we have that raster that's
passed onto the printer driver

00:52:19.170 --> 00:52:23.829
and the printer driver packages it up
and sends it to the raster printer.

00:52:23.829 --> 00:52:27.829
So really the focus here though is on your application.

00:52:27.829 --> 00:52:32.909
What do you need to do to draw so that you're
putting the right data into the pipeline,

00:52:32.909 --> 00:52:38.289
so that we're going to get color managered results on the end.

00:52:38.289 --> 00:52:44.199
So here's a simple example of drawing
with calibrated color using Cocoa.

00:52:44.199 --> 00:52:51.139
This particular example I am using the
calibrated generic RGB color space.

00:52:51.139 --> 00:52:56.869
That's a color space that we provide in Mac OS X that
represents sort of the typical Apple color monitor.

00:52:56.869 --> 00:53:02.269
Not a specific monitor, but the typical Apple
color monitor and characterizes such a monitor.

00:53:02.269 --> 00:53:08.969
That's a good choice for an application that doesn't
already have some color profile data associated

00:53:08.969 --> 00:53:10.119
with the data that you're drawing.

00:53:10.119 --> 00:53:13.639
If you have tag data, for example, you
have images that already have profiles,

00:53:13.639 --> 00:53:16.839
of course you're going to use those
profiles when you draw your image.

00:53:16.840 --> 00:53:21.970
If you're bringing data over from Windows, for
example, you may already have SRGB data associated

00:53:21.969 --> 00:53:26.239
with the drawing you're doing, and you would then
draw using an SRGB color space.

00:53:26.239 --> 00:53:33.379
But if you don't already have color space associated with
your data then this would be for Mac OS X a good choice.

00:53:33.380 --> 00:53:36.210
Okay. Let's take a look at what it looks like.

00:53:36.210 --> 00:53:42.940
So the first thing we do is we, we create the
generic RGB color space, or obtain it, rather.

00:53:42.940 --> 00:53:51.230
And once we have the generic color space as an NSColorSpace
object, now we have a set of color components

00:53:51.230 --> 00:53:53.159
that represent the color that we want to set.

00:53:53.159 --> 00:54:01.170
In this case we have a red, green, blue, it's an
RGB color with 50 percent alpha and 100 percent red.

00:54:01.170 --> 00:54:08.019
Once we have the color components and we have the color
space we can create and, CG color, excuse me,

00:54:08.019 --> 00:54:11.960
an NSColor object that represents that color.

00:54:11.960 --> 00:54:17.780
We can set that to be the current fill
color on the current Cocoa graphics context.

00:54:17.780 --> 00:54:23.870
For example, the context that's in effect at the time your
view is, your drawRect method on your view is called.

00:54:23.869 --> 00:54:27.859
And once we set the fill color we can fill a rectangle.

00:54:27.860 --> 00:54:29.809
So, you know, this is really a simple example.

00:54:29.809 --> 00:54:31.409
But just to give you an idea.

00:54:31.409 --> 00:54:36.440
It's easy to create color, calibrated colors, using Cocoa.

00:54:38.320 --> 00:54:42.870
For those of you that aren't using Cocoa
or, for example, Carbon developers,

00:54:42.869 --> 00:54:46.299
here's an equivalent example using Quartz directly.

00:54:46.300 --> 00:54:52.720
So in this example we're going to create
a CGColorRef, which is just an object

00:54:52.719 --> 00:54:56.629
that represents a particular color to Quartz.

00:54:56.630 --> 00:55:01.170
We do that with the same red, green, blue alpha values.

00:55:01.170 --> 00:55:03.349
Using CGColorCreateGenericRGB,

00:55:03.349 --> 00:55:07.429
which is creating a color in a generic RGB color space.

00:55:07.429 --> 00:55:11.429
We take that color and we make that
the current fill color on the context.

00:55:11.429 --> 00:55:17.000
And of course, in Quartz, when you're drawing directly with
Quartz, you specify the context directly to the function.

00:55:17.000 --> 00:55:20.719
There is no implicit context like there is in Cocoa.

00:55:20.719 --> 00:55:25.629
Now we fill the rectangle, and that will fill it
with the current fill color that we've just set.

00:55:25.630 --> 00:55:29.119
Now because we created a Quartz
object, we need to release it.

00:55:29.119 --> 00:55:31.630
So we can do that with CFRelease.

00:55:31.630 --> 00:55:35.170
So that's really just very simple
drawing using calibrated color,

00:55:35.170 --> 00:55:37.849
but just to give you an idea about
how you would go about it.

00:55:37.849 --> 00:55:45.940
I want to talk a little bit about obtaining
the maximum fidelity when you print.

00:55:45.940 --> 00:55:53.010
So the first thing in this step is to not make any
assumptions about the destination printer characteristics

00:55:53.010 --> 00:55:57.700
at the time you're drawing your content for print.

00:55:57.699 --> 00:56:00.419
So the destination printer may not be what you think it is.

00:56:00.420 --> 00:56:08.700
For example, users, once a print job is generated, can
take print jobs out of one queue and drag it into other queue.

00:56:08.699 --> 00:56:14.419
Or they may be using the Save as PDF feature that's
in the print dialog to create a PDF document.

00:56:14.420 --> 00:56:17.320
And you don't know what the destination
for that document is.

00:56:17.320 --> 00:56:21.030
You really want to produce the
highest quality rendering that you can

00:56:21.030 --> 00:56:25.110
that represents your original data at print time.

00:56:25.110 --> 00:56:28.460
So correspondingly, you want to draw
it at full resolution of your data.

00:56:28.460 --> 00:56:32.940
You don't want to downsample your data unnecessarily.

00:56:32.940 --> 00:56:39.710
If you have deep images, 16 bits per sample per
component, or you have floating point data, or raw data,

00:56:39.710 --> 00:56:42.150
you want to preserve the depth of that data.

00:56:42.150 --> 00:56:46.200
You don't want to downsample or turn it into 8-bit data.

00:56:46.199 --> 00:56:49.049
In the printing path, supports deep pixel data.

00:56:49.050 --> 00:56:52.769
So it supports 16 bits per component image data.

00:56:52.769 --> 00:56:55.710
That's what you have, that's what
you want to be drawing at print time.

00:56:55.710 --> 00:57:00.510
You may make some other decisions for rendering on
screen for performance reasons, but at the time you want

00:57:00.510 --> 00:57:03.400
to print, you want to get the maximum fidelity.

00:57:04.670 --> 00:57:08.460
So just a couple of comments how you go about that.

00:57:08.460 --> 00:57:13.909
Now if you're already using Quartz
for drawing your images, you're there.

00:57:13.909 --> 00:57:18.329
If you use CGImageSource or CGImageCreate,
as long as the source data that you're providing

00:57:18.329 --> 00:57:23.860
to those functions is, represents the
true data from the original content,

00:57:23.860 --> 00:57:30.820
and you draw using CGContextDrawImage, that will be
captured in the PDF spool representation of your drawing.

00:57:30.820 --> 00:57:33.590
If you're using NSImage, you're okay there too.

00:57:33.590 --> 00:57:36.650
As long as you're not, for example, redrawing your image.

00:57:36.650 --> 00:57:42.010
So if you're just drawing your image,
NSImage will draw at full resolution.

00:57:42.010 --> 00:57:42.870
Just be careful.

00:57:42.869 --> 00:57:47.179
If you're locking focus on your image and
drawing into your image to alter the image,

00:57:47.179 --> 00:57:52.690
at the current time NSImage is going to
make an 8-bit representation of your image

00:57:52.690 --> 00:57:55.440
at that point in order to capture the drawing.

00:57:55.440 --> 00:58:01.220
So if you need to do some kind of image processing
or drawing you might consider some other techniques.

00:58:01.219 --> 00:58:06.899
For example, Core Image, this is
something we introduced in Tiger 10.4,

00:58:06.900 --> 00:58:11.269
Core Image in its processing of your
image data maintains the resolution

00:58:11.269 --> 00:58:14.009
and depth of your images as part of its processing.

00:58:14.010 --> 00:58:21.410
So what comes out will represent the maximum quality
of the original image as it's being processed.

00:58:21.409 --> 00:58:28.139
Now if you're doing some kind of custom processing on
your image using your own tools, just remember,

00:58:28.139 --> 00:58:32.909
certainly for what you're going to produce at print
time, you want to maintain the original quality, depth,

00:58:32.909 --> 00:58:36.259
and resolution through your pipeline as you're doing that.

00:58:38.989 --> 00:58:47.509
Okay. So one of the themes we've been giving here at
WWDC is talking about 64-bit and 64-bit applications.

00:58:47.510 --> 00:58:50.500
So you know, the printing system's 64-bit ready.

00:58:50.500 --> 00:58:55.639
The printing APIs that we've talked
about are available to 64-bit binaries.

00:58:55.639 --> 00:58:58.019
If you're a Cocoa application, the printing,

00:58:58.019 --> 00:59:03.530
Cocoa classes, the printing Cocoa classes
are available, 64-bit applications.

00:59:03.530 --> 00:59:09.500
The Core Printing APIs that I talked about, they're
available to 64-bit applications with the exception

00:59:09.500 --> 00:59:14.349
that those deprecated functions, or the
functions we deprecated in both Tiger

00:59:14.349 --> 00:59:18.420
and Leopard, are only available 32-bit applica2tions.

00:59:18.420 --> 00:59:22.670
In the CUPS printing API, it's all available as 64-bit.

00:59:22.670 --> 00:59:29.579
As I mentioned before, the Carbon printing APIs, along
with the other HI aspects of Carbon are 32-bit only.
2

00:59:31.400 --> 00:59:37.500
So what does the print dialog look like in your 64-bit
application; what is the printing experience for your user?

00:59:37.500 --> 00:59:41.659
Well, it's going to look the same as a 32-bit application.

00:59:41.659 --> 00:59:49.750
The possible exception is the print panes and the print
dialog that are provided as plug-ins by third parties.

00:59:49.750 --> 00:59:52.670
For example, by printer driver vendors.

00:59:52.670 --> 00:59:56.809
The system-provided panes are all 64-bit ready.

00:59:56.809 --> 01:00:03.659
Many of the printer driver panes that are shipping with
Leopard are 64-bit ready, but there are some that are not.

01:00:03.659 --> 01:00:08.789
And of course there are going to be some from
other parties that aren't part of the Leopard,

01:00:08.789 --> 01:00:13.650
part of Leopard directly, that aren't 64-bit ready.

01:00:13.650 --> 01:00:19.710
There's actually a couple aspects to
what panes show up in the print dialog.

01:00:19.710 --> 01:00:25.750
The architectures of the application that's running
and the plug-in that's being loaded have to match.

01:00:25.750 --> 01:00:31.119
And what that means is that the
processor architecture has to match.

01:00:31.119 --> 01:00:37.199
If you're running a 64-bit application, the
plug-in has to have a 64-bit aspecdt to it.

01:00:37.199 --> 01:00:43.539
And, for example, if your garbage collected Cocoa
application, then the panes that are provided

01:00:43.539 --> 01:00:49.920
by the third parties that will load require
the garbage collection is enabled on those.

01:00:50.949 --> 01:00:56.519
Now here's what the print dialog will look like if,
for example, there's a pane that would otherwise load

01:00:56.519 --> 01:01:01.409
but is not available that matches the architecture
or, for the application that's running.

01:01:01.409 --> 01:01:08.649
And in that case, the pop up, the menu item and
the pop up will have a line drawn through it

01:01:08.650 --> 01:01:14.470
and there's some explanatory text if the user visits
that pane that says something about this aspect.

01:01:17.000 --> 01:01:20.139
Just wanted to touch on documentation, briefly.

01:01:23.150 --> 01:01:30.099
So, in 10.4, the primary header
files that were part of both Core Printing

01:01:30.099 --> 01:01:36.549
and the Carbon printing manager were two header
files, PMCore.h and PMApplication.h.

01:01:36.550 --> 01:01:42.710
And those contained all the functions that were
available, whether they were deprecated for not.

01:01:42.710 --> 01:01:50.039
And to make life easier for the application
developers to find the right functions to use,

01:01:50.039 --> 01:01:54.460
we've split this up so that now there's
two header files that correspond

01:01:54.460 --> 01:01:57.650
to the original header file that you saw in Tiger.

01:01:57.650 --> 01:02:01.970
So we have a PM CoreDeprecated.h
that has all of the deprecated stuff.

01:02:01.969 --> 01:02:08.480
And we have a PMCore.h that has the modern APIs that
we want you to be using in Leopard and going forward.

01:02:08.480 --> 01:02:14.679
And similarly, for the Carbon header files
PMApplication.h has been split as well.

01:02:16.530 --> 01:02:22.990
Another thing we've done, we've talked about the fact
that we have this layer in the printing system now

01:02:22.989 --> 01:02:25.659
and the APIs that are available called Core Printing.

01:02:25.659 --> 01:02:31.039
We've taken the reference material, which used
to be called the Carbon printing reference,

01:02:31.039 --> 01:02:36.420
which contained all of the Carbon APIs plus
the Core Printing APIs that I've talked about.

01:02:36.420 --> 01:02:38.670
That used to be one document.

01:02:38.670 --> 01:02:46.869
And because the Core Printing APIs applied to a lot
of developers and the Carbon printing APIs are used

01:02:46.869 --> 01:02:50.130
for the smaller segment of developers,
we split them into two

01:02:50.130 --> 01:02:55.079
so you don't go looking in Carbon documentation,
when really what you're looking for is Core Printing.

01:02:55.079 --> 01:02:59.619
So now there's two document; a Core Printing
reference, and a Carbon Printing Reference.

01:03:01.440 --> 01:03:05.990
So related to documentation, these are
sort of where I want to point you to.

01:03:05.989 --> 01:03:10.339
Print Programming Topics For Cocoa is really a
useful resource for Cocoa programmers that talk

01:03:10.340 --> 01:03:14.000
about Cocoa printing in quite a bit of detail.

01:03:14.000 --> 01:03:20.070
On the seed that you have, the AppKit Release
Notes have been updated for the 10.5 seed.

01:03:20.070 --> 01:03:22.490
They contain a lot of the information
that Alan talked about.

01:03:22.489 --> 01:03:25.199
How to do an NSViewController, what the new,

01:03:25.199 --> 01:03:30.799
well, the way to set the print panel up so
that you actually get the different features

01:03:30.800 --> 01:03:34.060
if you want the Page Setup functionality
in the print dialog.

01:03:34.059 --> 01:03:39.670
And then as I mentioned, the Core Printing reference and
the Carbon printing reference as separate documents now.

01:03:39.670 --> 01:03:47.420
And they've within updated, so they contain the
preliminary information for the Leopard seed, about Leopard.

01:03:48.460 --> 01:03:54.500
Well, I have to talk about one other piece of
documentation, which is sort of a shameless plug for a book

01:03:54.500 --> 01:03:58.400
that I wrote along with Bunny Laden
on programming Quartz.

01:03:58.400 --> 01:04:02.780
So for you Quartz programmers, there's a reference
that hopefully is useful to you. Thank you.

01:04:02.780 --> 01:04:05.290
( Applause )

01:04:05.289 --> 01:04:06.320
>> Thank you, I appreciate it.

01:04:06.320 --> 01:04:10.710
We've gotten some really good feedback
on the Web and directory from people.

01:04:10.710 --> 01:04:16.460
And really nice comment from Michael
Johnson from Pixar about the book.

01:04:16.460 --> 01:04:23.429
So, also tomorrow for our printing lab,
which is at 10:30AM, I hope to see you there.

01:04:23.429 --> 01:04:24.809
I am sure you will have lots of questions.

01:04:24.809 --> 01:04:26.779
And we'll have the whole printing team there.

01:04:26.780 --> 01:04:29.070
And I actually brought a couple copies of the book.

01:04:29.070 --> 01:04:31.510
So if you haven't seen the book
it will be in the lab as well.

01:04:31.510 --> 01:04:32.450
It's actually there now.

01:04:32.449 --> 01:04:33.460
Been here all week now.

01:04:33.460 --> 01:04:34.269
M01:04:39