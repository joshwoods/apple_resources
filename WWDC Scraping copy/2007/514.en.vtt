WEBVTT

00:00:11.880 --> 00:00:16.030
>> Welcome to Understanding PKI and Certificate Management.

00:00:16.030 --> 00:00:23.720
We've done some coverage of this last year, but
it still seems that there's some IT organizations

00:00:23.719 --> 00:00:26.939
that have a little bit of struggle
understanding kind of the whole trust model

00:00:26.940 --> 00:00:29.990
and the whole certificate management within the OS.

00:00:29.989 --> 00:00:35.609
So we really kind of wanted to readdress this and we're
going to be hitting on obviously some Leopard features as well.

00:00:35.609 --> 00:00:36.969
So let's jump right on in.

00:00:36.969 --> 00:00:38.280
Welcome, my name is Shawn Geddis.

00:00:38.280 --> 00:00:42.469
I'm a Security Consulting Engineer in
the Enterprise division in Apple Sales.

00:00:42.469 --> 00:00:47.859
So let's cover this a little bit more in depth.

00:00:47.859 --> 00:00:51.990
First of all, what do we want to introduce to you all?

00:00:51.990 --> 00:00:54.320
There's the reliance on trust.

00:00:54.320 --> 00:00:57.740
So we're going to talk about trusted
identities in the digital world.

00:00:57.740 --> 00:01:02.210
We're going to talk about creating, managing
and distributing digital identities.

00:01:02.210 --> 00:01:06.219
We're going to be covering enabling security enhanced
collaboration once you have these identities,

00:01:06.219 --> 00:01:07.409
what can you do with them?

00:01:07.409 --> 00:01:09.009
What kind of services?

00:01:09.010 --> 00:01:19.150
And hopefully highlight the approach that Apple has taken to
simplify the whole kind of PKI as it's deployed in systems.

00:01:19.150 --> 00:01:23.050
So hopefully out of that you're going to
learn what exactly an identity is.

00:01:23.049 --> 00:01:29.929
If you are new to this space, if you're kind of getting
your feet wet, learning how, what solutions you have to use

00:01:29.930 --> 00:01:35.150
or what kind of tools you need use, you're going to
learn a little bit more about identities themselves.

00:01:35.150 --> 00:01:40.190
How you need to go about retrieving,
storing and validating those identities.

00:01:40.189 --> 00:01:44.019
Establishing the trust, because again
this is the key with PKI dealing

00:01:44.019 --> 00:01:49.259
with certificates is establishing and validating that trust.

00:01:49.260 --> 00:01:52.050
Services like signing and encrypting and authenticating.

00:01:52.049 --> 00:01:57.519
And of course we want to highlight the built in services
that we have in the OS that you can directly rely

00:01:57.519 --> 00:02:04.280
on as an end user, as an administrator, really in
the deployment and use of, of these identities.

00:02:06.560 --> 00:02:10.539
So in a lot of these discussions we at least
have to get it all on the same page and figure

00:02:10.539 --> 00:02:12.679
out what it is that we're trying to, to solve.

00:02:12.680 --> 00:02:18.469
What problems are you trying to
address with deploying identities?

00:02:18.469 --> 00:02:22.960
And first of all, in the digital
world you have to prove who you are.

00:02:22.960 --> 00:02:27.170
So some assertion that I'm Shawn and
I have to prove that in some manner.

00:02:27.169 --> 00:02:31.259
So that's a user experience challenge we have.

00:02:31.259 --> 00:02:35.219
Second is if I'm going to prove that, how
in the world do I acquire this object,

00:02:35.219 --> 00:02:39.229
whatever it is that I'm, I'm proving who I am.

00:02:39.229 --> 00:02:41.030
Then once I get that, how do I retain it?

00:02:41.030 --> 00:02:42.319
How do I protect it?

00:02:42.319 --> 00:02:43.349
How do I take it with me?

00:02:43.349 --> 00:02:44.780
The portability.

00:02:44.780 --> 00:02:50.449
Because I'm, I'm a moving individual, I move between
systems, I physically move it...move between states

00:02:50.449 --> 00:02:53.509
or countries, how do I keep that with me?

00:02:53.509 --> 00:02:57.120
Protecting the confidentiality
and of course the data integrity.

00:02:57.120 --> 00:03:01.939
How do I use these identities, the certificates
and keys involved to protect my information?

00:03:01.939 --> 00:03:04.120
Make sure that only the right people see this?

00:03:04.120 --> 00:03:07.849
And of course some of the other
collaboration with trusted identity.

00:03:09.560 --> 00:03:15.770
On the IT side, so if your administration, if
you're the managing infrastructure on this,

00:03:15.770 --> 00:03:18.990
what are some of the challenges that you're trying to solve?

00:03:18.990 --> 00:03:24.260
First of all, how do you verify, if I'm an
individual and I'm asserting that I'm Shawn Geddis,

00:03:24.259 --> 00:03:27.060
how do you on the back end, how do you validate that?

00:03:27.060 --> 00:03:30.270
Right, how do you prove that indeed I am who say I am?

00:03:30.270 --> 00:03:31.360
And how do generate this?

00:03:31.360 --> 00:03:36.180
How do you do all the management of those
identities, whether they are users or machine?

00:03:36.180 --> 00:03:39.569
And then again how do you leverage the built in services?

00:03:39.569 --> 00:03:46.459
There's always going to be some third party solutions as well,
but we want to specifically talk about the built in services.

00:03:46.460 --> 00:03:51.260
Okay, so for some of you that are new to
this and just kind of review for others,

00:03:51.259 --> 00:03:53.870
let's talk about some of the key pieces of PKI.

00:03:53.870 --> 00:03:58.259
There's a lot of folks, a lot of end users and
I'm probably sure that each one of you have these.

00:03:58.259 --> 00:04:01.899
End users that say could you install PKI on my system.

00:04:01.900 --> 00:04:05.620
As if it's an application or a particular tool.

00:04:05.620 --> 00:04:06.689
There's a lot more to it.

00:04:06.689 --> 00:04:11.329
There's a lot more pieces, most of the,
the services that many folks will talk

00:04:11.330 --> 00:04:14.830
about are the certificate authorities,
which we're going to talk about today.

00:04:14.830 --> 00:04:21.210
The registration authorities, that's basically how
you're getting things started with the issuance piece.

00:04:21.209 --> 00:04:22.549
The certificate server.

00:04:22.550 --> 00:04:25.310
That's really kind of tied in more with your directories.

00:04:25.310 --> 00:04:29.069
And then time stamps, really when you're validating that.

00:04:29.069 --> 00:04:36.379
But the key take away today is we're going to be focusing a
lot on the CA, and then reliance on a trusted third party.

00:04:36.379 --> 00:04:39.300
That's really the basis of PKI.

00:04:39.300 --> 00:04:40.920
So let's look at some of the components.

00:04:40.920 --> 00:04:43.509
Again this is kind of review hopefully for most of you.

00:04:43.509 --> 00:04:44.779
New information for some.

00:04:44.779 --> 00:04:51.409
The whole thing in PKI is, is the cryptography
of the whole asymmetric public, private keys.

00:04:51.410 --> 00:04:58.430
Right and the combination of these keys, it's a mathematical
relation, so if I encrypt something with a public key,

00:04:58.430 --> 00:05:00.840
I can decrypt it with a private key solution.

00:05:00.839 --> 00:05:05.349
Again this is all tied into the certificates as well.

00:05:05.350 --> 00:05:09.600
And the public key of course is
available in the certificates.

00:05:09.600 --> 00:05:15.820
Its issued...with again you're doing a request
and we're going to cover each one of these.

00:05:15.819 --> 00:05:20.810
You're doing your generation of your keys in the
reference to the public key as part of your certificate.

00:05:20.810 --> 00:05:26.959
You verify the signatures with the private
again that's that asymmetric association.

00:05:26.959 --> 00:05:29.709
And then you're going to encrypt
that data to be sent to some user.

00:05:29.709 --> 00:05:33.299
For instance, you use a public key
from someone to encrypt that message.

00:05:33.300 --> 00:05:42.600
The private key is what I as a user would retain to, to
do my decryption of data coming to me to again associated

00:05:42.600 --> 00:05:46.879
with my assertion of who I am, signing data and all.

00:05:46.879 --> 00:05:49.969
Again that's the association of the keys.

00:05:49.970 --> 00:05:52.600
I've mentioned a couple of times,
the reference to my identity.

00:05:52.600 --> 00:05:54.560
So what is an identity?

00:05:54.560 --> 00:06:01.069
It's that combination of the pairing of that
certificate and the corresponding private key.

00:06:01.069 --> 00:06:05.529
So they go hand in hand together being that identity.

00:06:05.529 --> 00:06:10.439
And the certificate itself, you see a whole bunch
of the information related to the certificate.

00:06:10.439 --> 00:06:15.370
Think of for some that new to PKI, a certificate
is very much of like a, a bill of materials.

00:06:15.370 --> 00:06:17.540
When you're shipping a lot of product, it's the,

00:06:17.540 --> 00:06:21.439
the reference to all the components
that make up that whole package.

00:06:21.439 --> 00:06:26.459
And then of course the associated with the
private key is something you have and you retain.

00:06:26.459 --> 00:06:29.109
So let me move on here.

00:06:29.110 --> 00:06:33.800
When you think of an identity, we
typically think of okay, I'm only myself.

00:06:33.800 --> 00:06:39.389
But in the digital world you may be asserting
that a different identity or multiple identities.

00:06:39.389 --> 00:06:45.389
That could be something with, again here,
references different names or email addresses.

00:06:45.389 --> 00:06:51.949
It could be issued by different issuers,
different certificate authorities,

00:06:51.949 --> 00:06:57.240
and it could actually have different usages
for each one of those identities as well.

00:06:57.240 --> 00:07:03.639
So you have the ability and the frequent
use of having multiple identities.

00:07:03.639 --> 00:07:09.490
So let's run through each one of these areas and
hopefully give you some insight about how we're doing this

00:07:09.490 --> 00:07:14.069
on OS X and how you need to kind of
tie into to some of these services.

00:07:14.069 --> 00:07:15.170
Obtaining an identity.

00:07:15.170 --> 00:07:20.730
I mentioned about first off you have to get that identity
to be able to assert who you are in the digital world.

00:07:20.730 --> 00:07:26.069
And these are all issued and available
from a certificate authority or a CA.

00:07:26.069 --> 00:07:29.519
And the two typical methods of
that is you're going to request it

00:07:29.519 --> 00:07:33.469
from some well known certificate
authority, or you're going to create your own.

00:07:33.470 --> 00:07:39.240
You either rely on the expertise of someone else
or you take that issuance into your own hands.

00:07:39.240 --> 00:07:44.189
And again we're going to cover some of these
today both in kind of the presentation

00:07:44.189 --> 00:07:46.529
and also some of the demonstrations here.

00:07:46.529 --> 00:07:50.469
So let's walk through how you would
do this with a trusted third party,

00:07:50.470 --> 00:07:54.890
a traditional certificate authority
in a acquiring this identity.

00:07:54.889 --> 00:08:02.099
So on Bob's computer I'm going to
generate my key pairs locally.

00:08:02.100 --> 00:08:07.879
And I'm then doing this request to the
certificate authority to sign my request.

00:08:07.879 --> 00:08:10.069
To actually issue me a certificate.

00:08:10.069 --> 00:08:13.680
So the request is a CSR, certificate signing request.

00:08:13.680 --> 00:08:16.230
And that new certificate really comes back

00:08:16.230 --> 00:08:22.569
down from the certificate authority once they've
validated all my information and they say good to go.

00:08:22.569 --> 00:08:26.939
I get that issued back to me, downloaded into the keychain.

00:08:26.939 --> 00:08:29.430
Really in kind of side.

00:08:29.430 --> 00:08:32.620
Well, you take a slightly alternate method.

00:08:32.620 --> 00:08:38.639
And this is where the generation of the key pairs aren't
down on the client side, they're actually generated

00:08:38.639 --> 00:08:46.360
on the back end, on the CA or on the infrastructure
that the organization is using for the issuance.

00:08:46.360 --> 00:08:51.200
So in this case, the certificate authority
has generated my public private keys

00:08:51.200 --> 00:08:53.560
and has already essentially signed my certificate.

00:08:53.559 --> 00:08:57.269
And is now issuing me that as an object.

00:08:57.269 --> 00:08:59.720
Okay, the object could be a P12 file.

00:08:59.720 --> 00:09:02.830
It's kind of a wrapping of the
private key in that certificate

00:09:02.830 --> 00:09:05.879
or it could actually be in something like a smart card.

00:09:05.879 --> 00:09:07.679
Protection there of my identity.

00:09:07.679 --> 00:09:11.289
So I already have it in a physical keychain.

00:09:11.289 --> 00:09:14.929
That's how I finally get that back
and available to my system.

00:09:14.929 --> 00:09:20.329
If I get, if I get in a P12 file format, I
will, I would import it right into my keychain.

00:09:20.330 --> 00:09:26.200
If I had it in a smart card, I now have it
available with me portable between systems.

00:09:27.450 --> 00:09:33.910
Okay, if you already have the infrastructure and you
already have your CA in place and you've issued these,

00:09:33.909 --> 00:09:37.949
how do you bring that into OS X environment?

00:09:37.950 --> 00:09:40.270
Well again the standard format is what I just mentioned,

00:09:40.269 --> 00:09:44.429
the P12 where it really is a wrapping
of the private key and the certificate.

00:09:44.429 --> 00:09:51.089
And typically it's a file based, its password
protected, and you're exporting it from your issuance,

00:09:51.090 --> 00:09:58.060
typically some folks will do like IE on, on a Windows side
receives their identity, save it as a P12 file and take it

00:09:58.059 --> 00:10:01.589
on over to particularly their Mac environment.

00:10:01.590 --> 00:10:07.379
Well, once you have that P12 file, in keychain access,
you can just import that, directly from import menu,

00:10:07.379 --> 00:10:09.299
you can drag it on top of keychain access.

00:10:09.299 --> 00:10:12.349
We're going to do a little bit showing of that later on.

00:10:12.350 --> 00:10:16.700
But many of you actually need to script
this in kind of in deployment environments.

00:10:16.700 --> 00:10:20.509
You can leverage the security command in user bin security.

00:10:20.509 --> 00:10:22.120
And physically import that key.

00:10:22.120 --> 00:10:30.409
Import that, the rapid, wrapped P12 content into
the keychain whether you want to do it into the log

00:10:30.409 --> 00:10:35.029
in keychain or specific users keychain.

00:10:35.029 --> 00:10:40.949
Now we also are going to cover today the creation
of certificates, creation of identities.

00:10:40.950 --> 00:10:42.540
Again, remember we talked about two methods.

00:10:42.539 --> 00:10:45.480
One is your request and have someone else do it for you.

00:10:45.480 --> 00:10:48.269
The second is you take that into your
own hands and you do the issuance.

00:10:48.269 --> 00:10:51.299
That's where you would define your own root certificate.

00:10:51.299 --> 00:10:57.979
You do the issuance from your own CA or sub CA and you,
then you provide those root certificates to all your users.

00:10:57.980 --> 00:11:03.460
That's where if you created a community of interest, you
know various collaborative environments that you wanted

00:11:03.460 --> 00:11:07.800
to issue your own certificates for
that outside of the, a commercial CA,

00:11:07.799 --> 00:11:13.979
you just wanted to issue it inside your
organization, again this is a good typical use of that.

00:11:13.980 --> 00:11:17.310
We talked about obtaining, now how do I access these?

00:11:17.309 --> 00:11:19.839
Whether you're going to send encrypted email messages

00:11:19.840 --> 00:11:26.200
or you're going to access even your own identities
locally on the machine, how do we get to this?

00:11:26.200 --> 00:11:31.560
Well, your identities are actually
stored physically in keychain files.

00:11:31.559 --> 00:11:37.009
And you would see this within keychain
access or like I mentioned with a smart card.

00:11:37.009 --> 00:11:43.149
And right now those are typically
the storage locally for users.

00:11:43.149 --> 00:11:46.909
But many of you need to get to, for
instance, the public certificate for folks

00:11:46.909 --> 00:11:51.500
if you're going to send them encrypted
content through mail or other means.

00:11:51.500 --> 00:11:54.320
You need to get access to that public certificate.

00:11:54.320 --> 00:12:02.980
Well the method is to have a publicly accessible or within
your network, an LDAP accessible directory service

00:12:02.980 --> 00:12:10.019
that within OS X can pull that certificate
directly from that LDAP accessible server.

00:12:10.019 --> 00:12:12.600
We're going to talk about a little bit about that further.

00:12:12.600 --> 00:12:17.810
But the two attributes we're pulling are the
user certificate and the user S/MIME certificate.

00:12:17.809 --> 00:12:25.489
Okay. So if I'm viewing this, this view here of
keychain access is actually a new view of Leopard

00:12:25.490 --> 00:12:28.879
and you'll see there that I've
selected my certificates on the left.

00:12:28.879 --> 00:12:31.279
Right, some people have gotten confused by that.

00:12:31.279 --> 00:12:34.250
The certificates entry is just certificates.

00:12:34.250 --> 00:12:37.460
When I select my certificates,
that those are really identities.

00:12:37.460 --> 00:12:43.470
Those are showing the certificates and the corresponding
private keys, and again this was used for Leopard for 10.5.

00:12:43.470 --> 00:12:48.779
And you'll see that we're actually now showing you
the pairing of which private key to which certificate.

00:12:48.779 --> 00:12:49.709
And that's new.

00:12:49.710 --> 00:12:52.820
That wasn't available in 10.4.

00:12:52.820 --> 00:12:57.640
( Clapping. )  I didn't do it, but.

00:12:57.639 --> 00:13:00.519
So locating I mentioned about the LDAP accessible.

00:13:00.519 --> 00:13:04.500
Some folks have been unsure about how to do this.

00:13:04.500 --> 00:13:06.649
So there two components to that.

00:13:06.649 --> 00:13:14.139
One is setting up directory service
access from your OS X client first.

00:13:14.139 --> 00:13:19.620
And in 10.4 you had a utility in your
utilities folder called Directory Access.

00:13:19.620 --> 00:13:24.259
And you configure the LDAP plug-in
accessible to your LDAP server.

00:13:24.259 --> 00:13:28.639
And as long as you had a vanilla LDAP environment,
you didn't really have to do anything beyond that.

00:13:28.639 --> 00:13:33.590
If you changed the schema or fooled around with some
of the attributes, you may have to tweak it again.

00:13:33.590 --> 00:13:36.519
Remember the user certificate and user S/MIME.

00:13:36.519 --> 00:13:42.720
Now in 10.5, there's a new version of
that tool called Directory Utility.

00:13:42.720 --> 00:13:44.450
That's the first half of the configuration.

00:13:44.450 --> 00:13:51.370
The second half is within Keychain, if you go
into preferences, in the first general tab of that,

00:13:51.370 --> 00:13:53.879
you're seeing that you could search
dot Mac for certificates,

00:13:53.879 --> 00:13:57.029
or you could search your directory
services for certificates.

00:13:57.029 --> 00:14:04.039
So if you do both of those parts of the configuration,
you now have the ability for services like mail to pull

00:14:04.039 --> 00:14:07.779
that public certificate from that remote LDAP server.

00:14:07.779 --> 00:14:11.649
Okay. Now what do we do about using this?

00:14:11.649 --> 00:14:13.409
Okay, let's run through just a couple of these.

00:14:13.409 --> 00:14:21.000
And help people better understand how we have
approached simplifying the complexities of PKI.

00:14:21.000 --> 00:14:28.039
One thing to point out is that we, we target
very much a zero configuration environment.

00:14:28.039 --> 00:14:31.339
We want to reduce that to the least
amount of effort that you as user

00:14:31.340 --> 00:14:37.450
and as an administrator need to
do to leverage the PKI services.

00:14:37.450 --> 00:14:42.400
So in this case, if I'm doing Mail,
as long as I have an identity,

00:14:42.399 --> 00:14:47.439
right I've got the appropriate certificate
there for signing of an email message.

00:14:47.440 --> 00:14:52.840
And I've got the corresponding email
address, my compose window for a new message

00:14:52.840 --> 00:15:00.370
in Mail will automatically then show or make, reveal
to me the ability to sign and encrypt that message.

00:15:00.370 --> 00:15:04.960
If I don't have the corresponding
identity available in any of my keychains,

00:15:04.960 --> 00:15:09.030
whether its smart card based or a
file based, I'll never see that.

00:15:09.029 --> 00:15:13.750
So there's been a lot of folks that say what
do I do to configure Mail to use this identity?

00:15:13.750 --> 00:15:21.750
The key is you're just entering the email address
within Mail that corresponds to the identity,

00:15:21.750 --> 00:15:26.879
essentially the email signing that
you have in one of your key stores.

00:15:26.879 --> 00:15:34.309
In conjunction with that is the ability to encrypt to a
user, if I'm sending one to Joe, Juser at company dot com,

00:15:34.309 --> 00:15:42.099
if my system has access to a public certificate, essentially
public key there, public certificate for that user

00:15:42.100 --> 00:15:46.540
for that email address, then I will have
the ability of encrypting that message,

00:15:46.539 --> 00:15:56.909
whether that certificate is locally already in a
keychain or whether I have access to it through LDAP.

00:15:56.909 --> 00:16:02.189
Related to that is when you're getting into
using identities with secure web access.

00:16:02.190 --> 00:16:09.450
One of the pieces that people have run into
typically has been related to some SSL VPN accesses.

00:16:09.450 --> 00:16:11.050
Of late, they've had some challenges on this.

00:16:11.049 --> 00:16:16.049
And so we want to talk about and reveal to you
some of the enhancements we've done in this area.

00:16:16.049 --> 00:16:21.919
So if you're doing client side
authentication, your identity, your certificate,

00:16:21.919 --> 00:16:26.959
the first one that's valid here is presented to the,
the remote server that you're attempting to connect to.

00:16:26.960 --> 00:16:32.519
And in the event that that was not accepted, right?

00:16:32.519 --> 00:16:35.279
In other words if you, if you have
these multiple identities,

00:16:35.279 --> 00:16:39.620
I'd have a scenario where the server rejects
it because it's not the right identity.

00:16:39.620 --> 00:16:44.299
And now I as a user need to select from
the available identities that are left,

00:16:44.299 --> 00:16:46.559
in this case available certificate, right?

00:16:46.559 --> 00:16:50.219
Again, we want to get as close to
zero configuration as possible.

00:16:50.220 --> 00:16:55.710
But since you have multiple identities that have the
valid usage in the scenario, you as a user would have to,

00:16:55.710 --> 00:17:01.200
need to select, so that next time
we wouldn't have to reselect this.

00:17:01.200 --> 00:17:07.600
When you get into remote access, both the
VPN solutions, layer two, point to point,

00:17:07.599 --> 00:17:15.490
and of course 8 0 2 dot 1 X also provide for
EAP-TLS user authentication with certificates.

00:17:15.490 --> 00:17:21.099
So whether they're file based or smart card based,
the services have all been there within 10.4,

00:17:21.099 --> 00:17:24.689
and again we're doing some more
stuff in, in 10.5 there as well.

00:17:26.269 --> 00:17:29.160
Now, I had mentioned a couple times
about these multiple identities.

00:17:29.160 --> 00:17:36.490
That's been a challenge to some of you in environments
where the remote service may not properly respond

00:17:36.490 --> 00:17:42.750
or properly respond at the lowest level of
rejection, at the protocol or handshake level.

00:17:42.750 --> 00:17:45.990
And so picking of an identity has been
somewhat of a challenge for some of you.

00:17:45.990 --> 00:17:51.059
So I want to show you what challenges you faced
and how we've improved in that environment.

00:17:51.059 --> 00:17:58.509
If you're picking one, you've probably seen several of these
dialogues again, kind of like the Safari dialogue before.

00:17:58.509 --> 00:18:05.529
In this case, selecting from available identities
for connectivity to this particular service.

00:18:05.529 --> 00:18:07.420
And I believe we've got one more there.

00:18:07.420 --> 00:18:08.930
So you can even reveal the certificate.

00:18:08.930 --> 00:18:12.350
But you've given this opportunity to select one, right?

00:18:12.349 --> 00:18:17.579
But that's only if the service that you're
connecting to responded properly on the back end.

00:18:17.579 --> 00:18:19.599
And we want to review that in a little bit.

00:18:19.599 --> 00:18:23.449
Once you've made that selection, what
happens behind the scenes is that a,

00:18:23.450 --> 00:18:27.590
an identity preference is then
created and put into your keychain.

00:18:27.589 --> 00:18:30.799
And remember we talked about zero configuration.

00:18:30.799 --> 00:18:34.599
I don't ever want to have to reset that
every time I go to this service to pick

00:18:34.599 --> 00:18:37.389
which identity I want to use, which certificate.

00:18:37.390 --> 00:18:42.820
So once I make that selection for the first time, I
now have this identity preference added to my keychain

00:18:42.819 --> 00:18:50.919
so the next time I go to that service, it automatically
relies on this preference for Safari and other services.

00:18:50.920 --> 00:18:55.850
And it transparently resolves to the appropriate
one that I've selected, personal preference.

00:18:55.849 --> 00:19:04.379
This is again that new view in 10.4, I'm looking at
my certificates, I now have those three identities.

00:19:04.380 --> 00:19:10.190
What if I'm in one of those situations, again many of you I
think have faced this, particularly with SSL VPN solutions.

00:19:10.190 --> 00:19:13.789
Where the proper response from the server doesn't come back.

00:19:13.789 --> 00:19:19.909
For instance if you connect to say SSL VPN, what,
typically what you're getting back is a web page that says,

00:19:19.910 --> 00:19:21.860
oh by the way you need to select an identity.

00:19:21.859 --> 00:19:23.409
Or send the right certificate.

00:19:23.410 --> 00:19:28.130
So as in a Catch 22 situation for you where
it didn't respond so you didn't get a list

00:19:28.130 --> 00:19:30.990
to select from, but it kept telling you select one.

00:19:30.990 --> 00:19:35.279
So in this case, you're going to need to manually
set some identities in these environments.

00:19:35.279 --> 00:19:42.389
Now in 10.5, we've given you this ability so contextual
menus within keychain gives you the option now

00:19:42.390 --> 00:19:45.980
of manually setting identity preferences.

00:19:45.980 --> 00:19:53.730
And so by doing that you can now enter that URL,
and select which identity is associated with that.

00:19:53.730 --> 00:19:57.620
If you look closer though, here also
gives you the ability of email addresses.

00:19:57.619 --> 00:20:07.039
So if I have multiple identities for doing email
signing, I can now manually set that and

00:20:07.039 --> 00:20:13.789
mail dot app will respect that and leverage and use that
identity as opposed to the first one within the system.

00:20:13.789 --> 00:20:17.879
Okay I think several of you at least that I've been
dealing with over the years, have had a struggle with that

00:20:17.880 --> 00:20:22.330
because there's no manual or there's no method
within mail to select between identities.

00:20:22.329 --> 00:20:25.869
Here you can manually set that in Leopard.

00:20:25.869 --> 00:20:33.269
Again this is a, kind of a walk through
entering the URL and selecting the certificate.

00:20:33.269 --> 00:20:38.299
It gives you the ability of even going back later on and
editing that, changing the identity that you want to use

00:20:38.299 --> 00:20:42.519
for that plus modifying that URL or, or email address.

00:20:42.519 --> 00:20:45.069
So again a closer view of the contents.

00:20:46.250 --> 00:20:51.619
Now, if we get to one of the, the later
pieces of, of certificate approaches.

00:20:51.619 --> 00:20:55.159
And that is we always have to validate
these things to be sure they're still good.

00:20:55.160 --> 00:20:56.330
It's kinda like your credit card.

00:20:56.329 --> 00:21:00.389
You know you get issued a credit card, you
may use it but it may have been canceled.

00:21:00.390 --> 00:21:03.870
So they're always having to check
to be sure that it's still valid.

00:21:03.869 --> 00:21:07.000
So credit card kind of analogy here with certificates.

00:21:07.000 --> 00:21:12.190
There's gotta be some other party that we go
to, to check to be sure that it is still good.

00:21:12.190 --> 00:21:14.910
And there's a couple different methods for that.

00:21:14.910 --> 00:21:20.290
The kind of legendary method is called
CRL or certificate revocation list.

00:21:20.289 --> 00:21:24.649
And to help people understand this, it's kinda
like downloading the phone book and then you look

00:21:24.650 --> 00:21:27.330
through the phone book to figure out
whether someone still has a phone number.

00:21:27.329 --> 00:21:29.990
Whether they're still in the phone book.

00:21:29.990 --> 00:21:36.180
And the problem with that is as your end user
base grows, as your corporation base grows,

00:21:36.180 --> 00:21:42.400
so does that database as you're revoking
the certificates, the identities here.

00:21:42.400 --> 00:21:49.160
And so what happens is that can grow so large that it now
slows down every single process, every single transaction

00:21:49.160 --> 00:21:53.519
that you're doing that has to go
out and validate the certificate.

00:21:53.519 --> 00:21:58.740
There's some access to being able
to the related to the caches

00:21:58.740 --> 00:22:01.759
or in user bin CRL refresh, that
actually fetches the cache.

00:22:01.759 --> 00:22:05.769
And you can even force a refresh on that as well.

00:22:05.769 --> 00:22:08.869
But that's related to certificate revocation list.

00:22:08.869 --> 00:22:13.629
The other method is OCSP, or the
online certificate status protocol.

00:22:13.630 --> 00:22:18.580
This rather than having to download the phone book, it's
like calling up the operator and say is Shawn still there?

00:22:18.579 --> 00:22:19.859
Does he have a phone number?

00:22:19.859 --> 00:22:21.919
Okay, he's valid, let's go on.

00:22:21.920 --> 00:22:27.500
So the communication demands are low and
as your user base grows, it's that same.

00:22:27.500 --> 00:22:31.819
So it's kind of a consistent bandwidth usage.

00:22:31.819 --> 00:22:35.379
This is where a lot of folks are
moving away from CRL and go to OCSP.

00:22:35.380 --> 00:22:39.700
Again we've got the services built into OS X.

00:22:39.700 --> 00:22:44.900
And if you're dealing with OCSP you actually
have the authority information access specified

00:22:44.900 --> 00:22:46.519
within that certificate.

00:22:46.519 --> 00:22:53.470
One thing to note is if you're looking on OS X and you're
looking for a process specifically for CRL you won't see it.

00:22:53.470 --> 00:22:58.779
There will be a process called OCSP,
OCSPD that's doing both of those.

00:22:58.779 --> 00:23:03.670
And so it's handling CRL and OCSP
requests on the client there.

00:23:05.450 --> 00:23:11.900
Within the preferences within Keychain, and I point
this out because by default these are turned off.

00:23:11.900 --> 00:23:14.910
So most environments are going to want to enable this.

00:23:14.910 --> 00:23:19.600
This is where you determine kind of
by your policy how you want those,

00:23:19.599 --> 00:23:23.639
the validation methods to be utilized
or to be used within your environment.

00:23:23.640 --> 00:23:29.290
As I mentioned, CRL is kind of
the legendary approach to this.

00:23:29.289 --> 00:23:35.399
And there's people that are issuing new certificates
using new certificate authorities of their own.

00:23:35.400 --> 00:23:38.040
A lot of them are, are just kind of starting out with OCSP.

00:23:38.039 --> 00:23:40.409
A lot of people may be bridging between the two.

00:23:40.410 --> 00:23:42.960
You may have issued some with CRLs
and now you're moving on to OCSP.

00:23:42.960 --> 00:23:48.559
We support both, even give you the ability
of prioritizing which one is valid.

00:23:48.559 --> 00:23:56.490
So when the validation of a certificate is done, it's going
to attempt to follow your preferences here and in this case,

00:23:56.490 --> 00:23:59.700
I've set both of them to be best
attempt, so it's going to first try OCSP.

00:23:59.700 --> 00:24:05.220
If it can't get that validation, can't get
to the server, it's going to move on to CRL

00:24:05.220 --> 00:24:11.180
until I get either a positive validation
of that certificate or I fail to get it.

00:24:11.180 --> 00:24:13.480
Leads back into the validation of certificate.

00:24:13.480 --> 00:24:17.440
Again, a little bit later some of my colleagues
will be sharing some more information on that.

00:24:17.440 --> 00:24:21.210
This gives you just kind of a quick
shot of each one of those options.

00:24:24.299 --> 00:24:30.889
And for those of you that are building some end to end
infrastructure here, there are some OCSP validators

00:24:30.890 --> 00:24:36.720
on the server both from Tumbleweed and Core Street
that actually have OS X Server implementations of this.

00:24:36.720 --> 00:24:40.190
So if you're doing end to end OS X implementations, this,

00:24:40.190 --> 00:24:43.289
these are some good vendors to
be looking at for their solution.

00:24:43.289 --> 00:24:47.759
So at this time, let me turn things over to Ken McLeod.

00:24:47.759 --> 00:24:51.779
Taking, taking us on with verifying the trust.

00:24:51.779 --> 00:24:53.220
Ken?

00:24:53.220 --> 00:24:53.789
>> Okay.

00:24:53.789 --> 00:24:54.339
>> Thanks.

00:24:54.339 --> 00:24:55.339
>> Thanks Shawn.

00:24:55.339 --> 00:24:56.769
Hi everybody.

00:24:56.769 --> 00:24:58.410
My name is Ken McLeod.

00:24:58.410 --> 00:24:59.279
I am engineer...

00:24:59.279 --> 00:25:00.509
Let's hear it for Shawn.

00:25:00.509 --> 00:25:06.410
( Applause )

00:25:06.410 --> 00:25:09.050
I'm an engineer in the Data Security group at Apple.

00:25:09.049 --> 00:25:15.629
We're responsible for the security frameworks and the
security infrastructure that applications take advantage of.

00:25:15.630 --> 00:25:18.240
It's kind of a hard thing to describe to people.

00:25:18.240 --> 00:25:23.059
In fact, I had a relative of mine ask me,
you know, what is it that you do again?

00:25:23.059 --> 00:25:25.009
And I explained it like this.

00:25:25.009 --> 00:25:29.230
You know the commercial that we've been
showing where there's a Mac guy and PC guy.

00:25:29.230 --> 00:25:32.150
And he said to me, oh yeah, I've seen that commercial.

00:25:32.150 --> 00:25:37.910
And I said, well you know how the PC guys, there's one
where he has security guy that's standing behind him

00:25:37.910 --> 00:25:43.680
and he's got the dark glasses and he's in black,
and he's constantly asking the PC guy questions.

00:25:43.680 --> 00:25:46.470
And he said, yeah, I've seen that.

00:25:46.470 --> 00:25:47.960
But that's not you is it?

00:25:47.960 --> 00:25:49.539
Said, no, no, no.

00:25:49.539 --> 00:25:54.519
But what that commercial didn't show you
is the Mac guy has a security guy too.

00:25:54.519 --> 00:25:54.900
Oh really?

00:25:54.900 --> 00:26:00.170
Yeah. And you didn't see him because he was over there
at the door checking everyone's ID when they came in.

00:26:00.170 --> 00:26:03.820
And that way he didn't have to bug Mac guy all the time.

00:26:03.819 --> 00:26:05.329
He was checking everyone's ID.

00:26:05.329 --> 00:26:08.990
And trust validation is a lot like that.

00:26:08.990 --> 00:26:10.650
It's a lot like checking people's ID.

00:26:10.650 --> 00:26:16.490
And when we talk about trust validation on OS X, we're
really talking about getting the answers to two questions.

00:26:16.490 --> 00:26:17.990
First question is who are you?

00:26:17.990 --> 00:26:21.380
And the second question is can you do that?

00:26:21.380 --> 00:26:23.500
Who are you and can you do that?

00:26:23.500 --> 00:26:28.559
So for example, if I'm going to a web site
like Amazon and I want to buy something.

00:26:28.559 --> 00:26:31.710
Before I type my credit card number
in there, I want to know who are you?

00:26:31.710 --> 00:26:35.069
I want to have some assurance that that really is Amazon.

00:26:35.069 --> 00:26:38.259
But it's not enough to just ask that question who are you.

00:26:38.259 --> 00:26:40.750
You've gotta ask can you do that?

00:26:40.750 --> 00:26:46.230
So if I go and I think I'm talking to
Amazon and I ask the question who are you?

00:26:46.230 --> 00:26:50.680
And the response is Shawn Geddis, whoa wait a minute.

00:26:50.680 --> 00:26:56.299
Shawn, I know is authorized to send email to
me, but you know running a website for Amazon?

00:26:56.299 --> 00:26:57.399
Ah, I don't think so.

00:26:57.400 --> 00:27:01.830
And at this point, the Mac security
guy comes out and he throws Shawn out.

00:27:01.829 --> 00:27:02.429
Sorry Shawn.

00:27:02.430 --> 00:27:04.460
( Laughter )

00:27:04.460 --> 00:27:12.269
So before I got off the slide, trust validation is
different in Leopard than it used to be in Tiger.

00:27:12.269 --> 00:27:18.139
And first of all I want to talk about how you
knew trust in Tiger and how that worked.

00:27:18.140 --> 00:27:22.780
We use X509 certificate trust validation.

00:27:22.779 --> 00:27:28.829
And what that means is when we're trying to decide if
something is trusted, they present us a certificate.

00:27:28.829 --> 00:27:31.899
And we called that the leaf certificate
because it's at the end.

00:27:31.900 --> 00:27:34.650
And we say, did anybody sign that?

00:27:34.650 --> 00:27:35.410
Who signed that?

00:27:35.410 --> 00:27:42.320
And we try to follow this chain and build a chain back
until we get eventually to a root certificate at the end

00:27:42.319 --> 00:27:44.329
of the chain where we can't go any farther.

00:27:44.329 --> 00:27:46.899
And that root certificate signed itself.

00:27:46.900 --> 00:27:47.860
It has no signer.

00:27:47.859 --> 00:27:54.779
And at that point, if that root certificate is trusted,
then we know that we can trust the leaf certificate.

00:27:54.779 --> 00:27:59.809
So how do we get that root certificate
and how do we know it's trusted?

00:27:59.809 --> 00:28:07.529
Well, we ship a thing called X509 anchors in the
system or at least we did in Tiger with a whole list

00:28:07.529 --> 00:28:13.069
of third party CAs whose trust we are
relying on, who we implicitly trust.

00:28:13.069 --> 00:28:17.079
CAs like Verisign, Thawte and various others.

00:28:17.079 --> 00:28:18.750
And there's quite a few of those.

00:28:18.750 --> 00:28:30.470
But they all live in a file called X509 anchors on
Tiger in system library keychains X509 anchors.

00:28:30.470 --> 00:28:35.799
And if, the root CA for your certificate chain
was not in that file, then it wasn't trusted.

00:28:35.799 --> 00:28:36.799
It was as simple as that.

00:28:36.799 --> 00:28:42.349
There was one source of trust, the X509 anchors file.

00:28:42.349 --> 00:28:45.069
Unfortunately there was a problem with that.

00:28:45.069 --> 00:28:51.419
A, if you wanted to trust a new certificate for your
organization, you would have to get an administrator to put

00:28:51.420 --> 00:28:53.720
that into the X509 anchors file manually.

00:28:53.720 --> 00:28:56.029
And there's another problem too.

00:28:56.029 --> 00:29:04.839
When you're trusting these CAs and these root CAs, they
may be issuing thousands and thousands of certificates.

00:29:04.839 --> 00:29:11.980
And if you trust the root, you are implicitly
trusting anything that that root is issuing.

00:29:11.980 --> 00:29:14.309
And you may not want to do that.

00:29:14.309 --> 00:29:20.700
In Leopard we have a new model which is a multi tiered
model for trust which solves some of these problems.

00:29:20.700 --> 00:29:25.319
Well, we also use X509 certificate trust validation.

00:29:25.319 --> 00:29:32.759
We start with the leaf and we see if that chains
back to maybe an intermediate certificate.

00:29:32.759 --> 00:29:36.289
Or even back to a root certificate until we get to the end.

00:29:36.289 --> 00:29:40.859
We're saying wait a minute, this looks like the
slide you showed me just a minute ago for Tiger.

00:29:40.859 --> 00:29:42.369
What's different?

00:29:42.369 --> 00:29:46.019
In this case, it's not a root that we have to chain back to.

00:29:46.019 --> 00:29:49.129
We have to chain back to what's called a trusted anchor.

00:29:49.130 --> 00:29:55.370
And once we hit a trusted anchor,
then we know we can trust this.

00:29:55.369 --> 00:29:58.809
In Leopard, we don't even have
to go back as far as the root.

00:29:58.809 --> 00:30:03.059
We can say for example, this intermediate CA is trusted.

00:30:03.059 --> 00:30:07.529
Once we've decided that it's trusted, we don't
have to go back any further in creating the chain.

00:30:07.529 --> 00:30:12.539
And that it limits the scope of what we have to trust.

00:30:12.539 --> 00:30:18.480
And in fact, any certificate can
be marked as a trusted anchor.

00:30:18.480 --> 00:30:20.009
I don't have to go any further.

00:30:20.009 --> 00:30:23.680
If I only care about trusting this
one certificate for this one website,

00:30:23.680 --> 00:30:28.650
I don't have to trust everything all the way
back to the original issuer of that certificate.

00:30:28.650 --> 00:30:32.120
And I can say in fact that they're not trusted.

00:30:33.759 --> 00:30:34.599
So let's review.

00:30:34.599 --> 00:30:37.759
In Tiger, there was one trust model.

00:30:37.759 --> 00:30:43.940
You had to have the root certificate
in X509 anchors or it was not trusted.

00:30:43.940 --> 00:30:50.779
Of course, if you were a user, you'd have to go get an
administrator to set up your machine and get that in there.

00:30:50.779 --> 00:30:54.019
In Leopard there are a number of enhancement changes.

00:30:54.019 --> 00:30:57.930
The first thing you probably will
notice or have already noticed is

00:30:57.930 --> 00:31:03.860
that X509 anchors here we say are deprecated,
in fact it's destroyed, its deleted.

00:31:03.859 --> 00:31:05.809
It's not there.

00:31:05.809 --> 00:31:07.230
Why did you do that you say.

00:31:07.230 --> 00:31:12.690
Well, we still provide all of those
certificates that used to be in X509 anchors.

00:31:12.690 --> 00:31:16.330
They're now in a new chain change
called system root certificates.

00:31:16.329 --> 00:31:19.819
And the idea here is that system
root certificates are provided

00:31:19.819 --> 00:31:21.970
by the system and you don't ever need to touch them.

00:31:21.970 --> 00:31:26.380
If you need to make changes, you can override
what it is that the system gives you.

00:31:26.380 --> 00:31:31.940
And the place to override that if you want to
provide for example a certificate that all users

00:31:31.940 --> 00:31:37.380
of your machine will trust, is to place
it in the system keychain instead.

00:31:37.380 --> 00:31:41.480
The system keychain just happens to be
available to every user of the system.

00:31:41.480 --> 00:31:43.470
But you don't have to place it there.

00:31:43.470 --> 00:31:49.460
And in fact, it's no longer tied to the keychain
that you're in, whether or not you are trusted.

00:31:49.460 --> 00:31:57.410
And that's a pretty important concept that I'll come back
in a minute, but the trust of a certificate no longer,

00:31:57.410 --> 00:32:00.850
it no longer matters where that certificate lives.

00:32:03.799 --> 00:32:10.409
So the other important thing here that's changed
is the, we've introduced the idea of trust domains.

00:32:10.410 --> 00:32:12.540
Before we used to have one trust domain.

00:32:12.539 --> 00:32:14.619
It went back to X509 anchors.

00:32:14.619 --> 00:32:15.809
If it was in there, great.

00:32:15.809 --> 00:32:17.960
It's trusted.

00:32:17.960 --> 00:32:24.930
We have now the concept of a system trust domain which is
all of those certificates that we provide you out of the box

00:32:24.930 --> 00:32:31.090
that are trusted sort of implicitly out of
the box on the system and its immutable.

00:32:31.089 --> 00:32:33.379
That trust domain doesn't ever change.

00:32:33.380 --> 00:32:39.940
So if you want to make additions to it
or say these certs I never want to trust,

00:32:39.940 --> 00:32:42.880
you'll make those changes in the admin trust domain.

00:32:42.880 --> 00:32:47.070
And that overrides the system trust
settings that it ships with.

00:32:47.069 --> 00:32:52.179
if you're a user, you have the opportunity of
both overriding whatever the admin set up for you

00:32:52.180 --> 00:32:56.390
as well as what we shipped with one caveat.

00:32:56.390 --> 00:33:02.270
If you are running you know an organization or
maybe a lab where you don't want people doing that,

00:33:02.269 --> 00:33:09.339
there is a way to cut that off and only
have the administrator trust domain active.

00:33:11.710 --> 00:33:22.759
So in both cases, in both Tiger and Leopard, we will chain,
in order to build a chain of trust, back to a root CA,

00:33:22.759 --> 00:33:28.000
the root CA can be responsible again for
issuing thousands upon thousands of certs.

00:33:28.000 --> 00:33:33.009
And if you trust the root CA certificate,
you're trusting everything that it's issued

00:33:33.009 --> 00:33:35.140
and everything that it will issue in the future.

00:33:35.140 --> 00:33:37.860
And that's a awful lot of trust to extend.

00:33:37.859 --> 00:33:44.769
So if you have a root CA or your organization issues one,
its important, its very important that you have a process

00:33:44.769 --> 00:33:49.379
in place to keep the private keys
when you're issuing things secure.

00:33:49.380 --> 00:33:56.700
And in fact, the certificates that are shipped in Mac
OS X in the system root certificates file have to go

00:33:56.700 --> 00:34:00.830
through a process of, of web trust
to certification where they can show

00:34:00.829 --> 00:34:04.169
that there is a process in place to keep that secure.

00:34:05.400 --> 00:34:10.869
The change from Tiger to Leopard has big
implications if you are issuing your own CA.

00:34:10.869 --> 00:34:15.079
And you're providing your root CA to other people.

00:34:15.079 --> 00:34:16.489
There is a dividing line.

00:34:16.489 --> 00:34:22.879
And on one side, is support for Tiger and
before, on the other side is the Leopard way.

00:34:22.880 --> 00:34:30.630
So on Tiger you have to add it to X509 anchors like
you always have in order for the root to be trusted.

00:34:30.630 --> 00:34:36.710
Going forward from Leopard, you'll want to put the
root certificate in the system keychain instead.

00:34:36.710 --> 00:34:43.809
So if for example you're writing an installer script, a
command that's going to be your friend is user bin security.

00:34:43.809 --> 00:34:46.960
And it has a command called add trusted cert.

00:34:46.960 --> 00:34:49.820
And this has a lot of options which I'll go into.

00:34:49.820 --> 00:34:55.130
But one of the flags that you can give it is to
say trust this cert in that admin trust domain

00:34:55.130 --> 00:34:58.820
and that lets it be trusted on the system.

00:34:58.820 --> 00:35:03.070
So how does a certificate become trusted on a machine?

00:35:03.070 --> 00:35:06.130
Ideally, you don't have to do any work.

00:35:06.130 --> 00:35:11.490
You can have a zero configuration thing and
then as you encounter a certificate that's new

00:35:11.489 --> 00:35:18.509
and that isn't seen before or isn't trusted doesn't
go back to one of the trusted roots on the system.

00:35:18.510 --> 00:35:19.740
You get a prompt.

00:35:19.739 --> 00:35:21.119
You know is this okay?

00:35:21.119 --> 00:35:23.609
Do you trust this?

00:35:23.610 --> 00:35:29.960
You can also manually edit the trust settings of course
at any time with the keychain access application.

00:35:29.960 --> 00:35:31.409
And you can use a command line tool.

00:35:31.409 --> 00:35:34.869
Again I said, user bin security
is going to be your friend here.

00:35:34.869 --> 00:35:39.779
It has an add trusted cert, but it also has
a trust setting import and export command

00:35:39.780 --> 00:35:45.400
that lets you save and restore trust settings.

00:35:45.400 --> 00:35:47.860
This dialogue may look familiar.

00:35:47.860 --> 00:35:53.860
This is the standard certificate dialogue that asks
whether or not you trust a certificate on Mac OS X.

00:35:53.860 --> 00:35:57.700
Safari uses this, iChat, Mail, you'll see it quite a bit.

00:35:57.699 --> 00:36:00.889
And in fact your applications can call it as well.

00:36:00.889 --> 00:36:03.929
It's in the security interface framework.

00:36:03.929 --> 00:36:11.119
And this lets you show the certificate chain to the user
and let them make a decision about whether to trust it.

00:36:11.119 --> 00:36:16.250
Now, there's one thing I want to point out with this dialogue.

00:36:16.250 --> 00:36:19.719
This check box here says always trust these certificates.

00:36:19.719 --> 00:36:27.149
And I can tell that this is a dialogue that
was from Mac OS X.4 rather than Leopard.

00:36:27.150 --> 00:36:32.410
Because on Tiger there was only the option
to trust the entire chain all the way back

00:36:32.409 --> 00:36:35.309
to the root with the root being an X509 anchors.

00:36:35.309 --> 00:36:40.799
Because again remember that's the
only way on Tiger that trust occurred.

00:36:40.800 --> 00:36:45.580
On Leopard it no longer has to always
trust all of the certificates of the chain.

00:36:45.579 --> 00:36:48.319
And we'll see that in a minute.

00:36:48.320 --> 00:36:50.190
So in the minute is here.

00:36:50.190 --> 00:36:58.750
Let me show you, in fact, what I've been
talking about, if we can have the demo machine.

00:36:58.750 --> 00:37:00.219
I will fire up Safari here.

00:37:00.219 --> 00:37:10.989
And as I'm browsing of course I will eventually go to a site
in this case Mac OS forage dot org that has a certificate

00:37:10.989 --> 00:37:16.779
that doesn't chain back, that to a root CA
or anything that I've currently trusted.

00:37:16.780 --> 00:37:23.940
So when I encounter this dialogue, I can look at the
certificate it's presenting me and see oh, yes in fact,

00:37:23.940 --> 00:37:30.909
Mac OS forage has a cert that is not known because
it was issued by open source dot apple dot com.

00:37:30.909 --> 00:37:34.269
And that's not one of the trusted CAs that we ship with.

00:37:34.269 --> 00:37:38.679
So we have a new option here.

00:37:38.679 --> 00:37:43.739
And I no longer remember have to trust a
certificate chain all the way back to a root.

00:37:43.739 --> 00:37:45.669
So this is a common thing.

00:37:45.670 --> 00:37:46.630
I don't even have the root.

00:37:46.630 --> 00:37:51.640
I don't even know how to get a root
certificate for open source dot apple dot com.

00:37:51.639 --> 00:37:58.049
But I am pretty sure that I want to go to this
website and that I trust Mac OS forage dot org.

00:37:58.050 --> 00:38:08.100
So I can say on Leopard, I only want to trust the Mac OS X
forage, or Mac OS forage certificate and not anything else

00:38:08.099 --> 00:38:13.969
that issued it and I only want to
trust it when I'm going to this site.

00:38:13.969 --> 00:38:15.639
I don't want to trust it for anything else.

00:38:15.639 --> 00:38:21.639
So if I hit continue, in order to make
that change, I have to type in my password.

00:38:21.639 --> 00:38:29.969
And at this point, I can click on the little
lock icon in Safari and examine the cert.

00:38:29.969 --> 00:38:35.909
And I see it now tells me the certificate
is marked as trusted for this account.

00:38:35.909 --> 00:38:39.769
Essentially what I've done is I
have marked it as a trusted anchor.

00:38:39.769 --> 00:38:44.489
And when I'm building a certificate chain to
determine trust, I don't have to go any further

00:38:44.489 --> 00:38:46.559
than this one certificate that I've trusted.

00:38:46.559 --> 00:38:50.139
So let's look at another instance here.

00:38:50.139 --> 00:38:53.259
Here's a test server over at Red Hat.

00:38:53.260 --> 00:38:57.290
And oops, it looks like they don't have
a certificate that's trusted either.

00:38:57.289 --> 00:38:59.219
So I'll look at it.

00:38:59.219 --> 00:39:02.219
And I see that they've got a little
bit more of a chain going on.

00:39:02.219 --> 00:39:09.689
And this Red Hat server that I want to go to has issued
by some certification authority here, Certificate Shack.

00:39:09.690 --> 00:39:12.900
I haven't heard of Certificate Shack.

00:39:12.900 --> 00:39:14.300
I don't know what they are.

00:39:14.300 --> 00:39:16.650
And I don't know whether I want to trust them.

00:39:16.650 --> 00:39:24.099
But I do want to trust the Red Hat server because you know
that is where I want to go and I want to keep going back there.

00:39:24.099 --> 00:39:32.059
So in this case, I can decide just to trust the Red
Hat certificate without trusting all the certificates

00:39:32.059 --> 00:39:37.329
or the entire chain or anything else that this
Certificate Shack might issue me in the future.

00:39:37.329 --> 00:39:39.460
So I'll go ahead and do that.

00:39:39.460 --> 00:39:41.099
And we go to the, the site.

00:39:41.099 --> 00:39:48.529
And then when I look at the, the certificate, I
see that there is no chain beyond the certificate

00:39:48.530 --> 00:39:54.300
that I trusted because there doesn't need to be.

00:39:54.300 --> 00:39:58.440
So that's kind of the inline zero
configuration way of things.

00:39:58.440 --> 00:40:05.230
The manual way of configuring what you'll often
do is you'll get a root certificate sent to you

00:40:05.230 --> 00:40:08.869
or you download from a website for your organization.

00:40:08.869 --> 00:40:11.920
Here I've got one for Ames Lab that's a root certificate.

00:40:11.920 --> 00:40:15.659
So if I open it, it launches keychain access.

00:40:15.659 --> 00:40:18.359
It asks me if I want to add the certificate to a keychain.

00:40:18.360 --> 00:40:24.519
And remember in Leopard if we want the
certificate to be seen by all users

00:40:24.519 --> 00:40:27.590
of the system, we want to put it in the system keychain.

00:40:27.590 --> 00:40:30.130
So I'll go ahead and do that.

00:40:31.409 --> 00:40:32.739
And now I get this new dialogue.

00:40:32.739 --> 00:40:34.389
Now what is this asking me?

00:40:34.389 --> 00:40:38.650
It's asking if I want to trust
this Ames Lab root certificate.

00:40:38.650 --> 00:40:41.920
Well, didn't I just put it in the system keychain?

00:40:41.920 --> 00:40:48.960
Ah! But remember it's no longer important
where it lives in order for the trust to occur.

00:40:48.960 --> 00:40:54.510
The trust is separate and you have to specifically say
I trust this certificate and then it can live anywhere.

00:40:54.510 --> 00:40:55.980
It doesn't have to be on a particular keychain.

00:40:55.980 --> 00:41:00.170
So at this point I'll say yes, I want this trusted.

00:41:00.170 --> 00:41:09.030
And now if I go over and I look in the system keychain,
in fact its there and its got this new little do hickey

00:41:09.030 --> 00:41:13.780
that tells me that I have specifically
trusted it for all users of the system.

00:41:13.780 --> 00:41:20.990
And in fact I can go to any point
and here is Certificate Shack's root

00:41:20.989 --> 00:41:25.039
and I can decide to trust it later if I want to.

00:41:25.039 --> 00:41:29.130
And of course there's a command line way of doing this.

00:41:29.130 --> 00:41:34.039
Remember I told you that we have the security command.

00:41:34.039 --> 00:41:36.909
And security add trusted cert is your friend.

00:41:36.909 --> 00:41:40.730
In this case, there are a lot of options here
if you were going through the command line.

00:41:40.730 --> 00:41:45.900
You don't have to trust at the
granularity of a single certificate,

00:41:45.900 --> 00:41:48.360
but in fact you can place a lot more restrictions on it.

00:41:48.360 --> 00:41:51.970
For example, there's a policy option
that lets you say I only want

00:41:51.969 --> 00:41:55.699
to trust this certificate for SSL and nothing else.

00:41:55.699 --> 00:42:03.049
I can specify an application constraint that says I only
want to trust this certificate in Safari and no other app.

00:42:03.050 --> 00:42:05.670
Or policy specific string.

00:42:05.670 --> 00:42:08.309
There's some allowed error options.

00:42:08.309 --> 00:42:13.880
But let me go ahead and show you an
example of how you would use this.

00:42:13.880 --> 00:42:20.539
I have a certificate file that I want to
populate on all my lab machines at work.

00:42:20.539 --> 00:42:22.460
It's the Apple data security test CA.

00:42:22.460 --> 00:42:29.740
And so I use this security add trusted cert,
add trusted cert command with the dash D option

00:42:29.739 --> 00:42:32.729
which lets it know this is for the admin domain.

00:42:32.730 --> 00:42:34.960
I want it trusted for all users.

00:42:34.960 --> 00:42:39.650
The dash K option lets me specify that
I want to put it in the system keychain.

00:42:39.650 --> 00:42:42.590
And then finally the file tells
me you know which cert it is.

00:42:42.590 --> 00:42:47.860
So I'll go ahead and execute that and it just works
because I have a root shell that doesn't prompt.

00:42:47.860 --> 00:42:54.650
And if I go back and look at keychain
access, let's look in the system keychain.

00:42:54.650 --> 00:43:00.900
And now I see that I have this new cert in there, the
Apple data security test CA, which is marked as trusted.

00:43:00.900 --> 00:43:06.530
Now there's a companion command
here that you'll find useful.

00:43:06.530 --> 00:43:09.970
Security trust settings.

00:43:09.969 --> 00:43:17.059
Now trust settings export has a couple of options for
either exporting the user's domain or the system domain.

00:43:17.059 --> 00:43:23.159
And what that, this lets me do is essentially take a
snapshot of everything that's trusted on my machine

00:43:23.159 --> 00:43:28.239
so I get the setting set up the way I want them
and then I can replicate that on to other machines

00:43:28.239 --> 00:43:33.159
or go back to a saved, known trust setting state.

00:43:33.159 --> 00:43:34.219
So here's an example.

00:43:34.219 --> 00:43:41.509
I'll use trust settings export, again with the minus
D option that lets me export the admin trust domain.

00:43:41.510 --> 00:43:45.090
And I'll dump that into a file called save trust settings.

00:43:45.090 --> 00:43:48.030
So I do. It tells me that it was successful.

00:43:48.030 --> 00:43:52.570
Now I'll go back here and I'll make some changes.

00:43:52.570 --> 00:43:55.500
So let's, let's not trust this Ames Lab.

00:43:55.500 --> 00:43:58.260
I never want to trust them.

00:43:58.260 --> 00:44:00.130
I'll make that change.

00:44:00.130 --> 00:44:03.240
Now we see that the trust setting is
changed and it's marked as not trusted.

00:44:03.239 --> 00:44:09.909
And I don't know what this Bob's towing is, so let's
go ahead and you know we won't trust it either.

00:44:09.909 --> 00:44:18.469
And now we come along later and I want to
go back to the saved trust settings state.

00:44:18.469 --> 00:44:28.799
So I can use security trust settings import to go back
and take that file that I created and I could take it

00:44:28.800 --> 00:44:31.260
to other machines and set them up the same way.

00:44:31.260 --> 00:44:34.490
But I'll go ahead and blast those settings back into place.

00:44:34.489 --> 00:44:39.789
Then if I look again, we see we're back to where we were.

00:44:39.789 --> 00:44:44.840
Ames Lab is trusted, Bob's Towing is
trusted, Apple data security is trusted,

00:44:44.840 --> 00:44:49.850
and that's how trust happens on Mac OS X.

00:44:49.849 --> 00:44:57.299
But a more important thing maybe even than how they get
trusted is how can you actually create them yourself.

00:44:57.300 --> 00:45:00.370
How do you get these things onto your machine?

00:45:00.369 --> 00:45:02.119
How do you issue certificates?

00:45:02.119 --> 00:45:09.460
And to talk about that, I'd like to ask Craig Mortenson
to come up and he'll show you the certificate assistant.

00:45:09.460 --> 00:45:12.260
If we could have the slides back.

00:45:12.260 --> 00:45:22.690
>> Wee! Yes.

00:45:22.690 --> 00:45:24.659
( Pause )

00:45:24.659 --> 00:45:30.619
( Pause )

00:45:30.619 --> 00:45:32.509
>> Okay.

00:45:32.510 --> 00:45:39.170
( Applause )

00:45:39.170 --> 00:45:40.230
>> Okay. I'm Craig Mortenson.

00:45:40.230 --> 00:45:42.429
I work with Ken on the data security team.

00:45:42.429 --> 00:45:45.940
And we work on the frameworks as Ken had mentioned.

00:45:45.940 --> 00:45:54.920
And I'm going to talk about, a little bit about the certificate
assistant and do a demo of it and also talk about how

00:45:54.920 --> 00:45:58.030
to import some identities into your keychain.

00:45:58.030 --> 00:46:05.210
Okay the certificate assistant has been around since Tiger.

00:46:05.210 --> 00:46:07.400
Some of you have probably already used it.

00:46:07.400 --> 00:46:10.530
We've greatly improved it for Leopard.

00:46:10.530 --> 00:46:13.260
And I'll show you that in a minute.

00:46:13.260 --> 00:46:19.190
The certificate assistant, it's a user friendly application
that guides you through the task of creating certificates,

00:46:19.190 --> 00:46:24.650
creating certificate authorities
and evaluating certificate chains.

00:46:24.650 --> 00:46:29.809
What's great about this, what's, excuse me.

00:46:29.809 --> 00:46:37.000
What's great about the, the assistant is you
could create your own certificate authority

00:46:37.000 --> 00:46:40.059
and distribute trusted certificates to users.

00:46:40.059 --> 00:46:44.000
And this is done by email exchange.

00:46:44.000 --> 00:46:50.250
This is done by email exchange between the CA and the user.

00:46:50.250 --> 00:46:58.599
And finally what I'll do in the demo is
talking about doing certificate evaluations.

00:46:58.599 --> 00:47:03.730
Okay. So what's new for Leopard is
the concept of signed invitations.

00:47:03.730 --> 00:47:09.710
We had invitations in 10.4,
but in Leopard they're signed

00:47:09.710 --> 00:47:14.300
because when they're signed you can have the
CA certificates embedded in the invitation.

00:47:14.300 --> 00:47:18.390
So for security reasons you don't want
somebody modifying those certificates.

00:47:18.389 --> 00:47:22.509
So the signature will fail if anybody tries to do that.

00:47:22.510 --> 00:47:31.450
( Period of silence )

00:47:31.449 --> 00:47:39.799
Okay. What's also new in Leopard is
the, the concept of a CA website.

00:47:39.800 --> 00:47:45.480
The assistant will actually create a website
for the CA so users can go to this website

00:47:45.480 --> 00:47:48.219
and download an invitation if they haven't gotten one.

00:47:48.219 --> 00:47:54.230
And they can also download the CA certificates as well.

00:47:54.230 --> 00:47:58.380
We also added some preset certificate types in Leopard.

00:47:58.380 --> 00:48:02.890
One, the famous one that we worked on was code signing.

00:48:02.889 --> 00:48:07.339
And some other ones that you could
do are S/MIME, VPN, and SSL.

00:48:07.340 --> 00:48:10.990
And what's great about the assistant
is you don't have to know the details

00:48:10.989 --> 00:48:15.229
about these certificates in order to set these up.

00:48:15.230 --> 00:48:19.510
All right, so now I'm going to go to the demo.

00:48:19.510 --> 00:48:29.160
( Period of silence )

00:48:29.159 --> 00:48:33.509
Okay, so we have here is a user co frag, oh boy.

00:48:33.510 --> 00:48:39.040
( Period of silence )

00:48:39.039 --> 00:48:44.630
So what you saw earlier was a CA that Ken
was marked as not trusted and then trusted.

00:48:44.630 --> 00:48:46.349
That was called Bob's Towing.

00:48:46.349 --> 00:48:50.110
So Frank is an employee of Bob's Towing and he wants

00:48:50.110 --> 00:48:54.450
to get an S/MIME certificate from
his boss to be able to sign emails.

00:48:54.449 --> 00:49:00.509
So what he does is Frank just simply launches Mail.

00:49:00.510 --> 00:49:07.140
( Period of silence )

00:49:07.139 --> 00:49:17.679
And we see that he's got an invitation from Bob's Towing,
say that the CA is now ready to accept certificate requests.

00:49:17.679 --> 00:49:22.399
So alls he has to do is click on the invitation.

00:49:22.400 --> 00:49:25.510
And then you'll see the information from this CA right here.

00:49:25.510 --> 00:49:33.040
The user just has to click continue at this point.

00:49:33.039 --> 00:49:35.159
So while this is happening, this is going to take a while.

00:49:35.159 --> 00:49:37.969
It says creating the key pair for Frank.

00:49:37.969 --> 00:49:45.629
The default is 2048 bit RC key H pair.

00:49:45.630 --> 00:49:54.329
And the, the CS, the CSR is actually being
created and it actually was sent to Bob's Towing.

00:49:54.329 --> 00:49:57.509
So now we're going to go over to Bob.

00:49:57.510 --> 00:50:06.980
( Period of silence )

00:50:06.980 --> 00:50:14.240
Okay, so. Bob sees the certificate request email, says Frank
has sent you a certificate request, click on the enclosure.

00:50:14.239 --> 00:50:18.109
So the CA is going to get a whole bunch of
these, depending on how many employees.

00:50:18.110 --> 00:50:22.130
In this case, Bob's Towing has
only one employee and that's Frank.

00:50:22.130 --> 00:50:28.280
So he's going to click on the CSR, this is
the actually certificate sending request.

00:50:28.280 --> 00:50:31.460
And all Bob has to do is just click continue.

00:50:31.460 --> 00:50:34.670
Because we're, we only have one CA on this machine.

00:50:34.670 --> 00:50:42.639
And if, if Bob wanted to actually override the defaults and
say well, I'll, I'm going to make him an S/MIME certificate

00:50:42.639 --> 00:50:47.349
and it's going to be able to do code signing and a bunch
of over things, but we're not going to do that for now.

00:50:47.349 --> 00:50:50.509
We're just going to do the demo for S/MIME.

00:50:50.510 --> 00:50:56.740
( Period of silence )

00:50:56.739 --> 00:51:01.839
Okay, so what we have here is the email that's
composed with the certificate that was just created.

00:51:01.840 --> 00:51:05.320
And Bob just sends it off.

00:51:07.349 --> 00:51:12.469
Okay. And then in the end of the certificate
assistant you'll see this is the actual certificate

00:51:12.469 --> 00:51:14.379
that was created for Frank.

00:51:14.380 --> 00:51:17.260
And that's the one that was sent off.

00:51:17.260 --> 00:51:19.510
So now we'll go back to Frank.

00:51:19.510 --> 00:51:24.710
( Period of silence )

00:51:24.710 --> 00:51:28.800
And we got the email back from Bob
and it says here is the certificate.

00:51:28.800 --> 00:51:31.820
Click on the enclosure.

00:51:31.820 --> 00:51:33.030
Goes into the log in Keychain.

00:51:33.030 --> 00:51:38.250
And you can see there is Frank's identity.

00:51:40.460 --> 00:51:46.190
So now just to show how it works here,
if Frank wanted to send an email,

00:51:46.190 --> 00:51:49.630
you can see right now, now he's able to sign his emails.

00:51:49.630 --> 00:51:51.539
So Frank's all set.

00:51:53.909 --> 00:51:57.259
Okay so now I'm going to show you how
to create a certificate authority.

00:51:57.260 --> 00:51:59.340
We'll go back to Bob here.

00:52:01.059 --> 00:52:05.820
Now Bob's already created a certificate authority,
but we're going to just go ahead and create another one.

00:52:05.820 --> 00:52:08.620
I'll show you how we create a root.

00:52:08.619 --> 00:52:13.650
So the certificate assistant is
invoked using keychain access.

00:52:13.650 --> 00:52:18.250
The other ones were just simply files, you
click on it, it launches the assistant.

00:52:18.250 --> 00:52:20.670
But this is like the main entry point for it.

00:52:20.670 --> 00:52:23.940
So we're going to create a certificate authority.

00:52:23.940 --> 00:52:26.309
We're going to call it Bob's certificate authority.

00:52:26.309 --> 00:52:28.309
The other one of course was called Bob's Towing.

00:52:28.309 --> 00:52:31.449
It's going to be a self signed root CA.

00:52:31.449 --> 00:52:36.929
By default it's going to be creating, going to be
distributing S/MIME certificates right here.

00:52:36.929 --> 00:52:41.849
And the, the default key pair would
be for this CA would 2048 bit RSA.

00:52:41.849 --> 00:52:45.589
If you wanted to override these defaults, you can do that.

00:52:45.590 --> 00:52:47.800
But we're not going to do that for now.

00:52:51.150 --> 00:52:55.500
Here's where its creating that CA
website that I talked about earlier.

00:52:55.500 --> 00:53:00.269
And this is a button where you can actually
look at the CA website that was created.

00:53:00.269 --> 00:53:04.429
Okay? So this is automatically created.

00:53:04.429 --> 00:53:11.609
On this case its on Bob's iDisk, but you could
specify an alternate location for this.

00:53:11.610 --> 00:53:16.579
And so here it's just you can click
here to download an invitation.

00:53:16.579 --> 00:53:23.340
So if the user hasn't gotten that invitation email from
Bob, they can simply go to this website and download them.

00:53:23.340 --> 00:53:26.809
And they can also download the CA
certificates that make up the chain.

00:53:26.809 --> 00:53:31.509
So and once you download those you can
install them with keychain access.

00:53:31.510 --> 00:53:36.590
( Period of silence )

00:53:36.590 --> 00:53:39.840
Okay, so now, now that we've created a root, oops.

00:53:39.840 --> 00:53:44.690
We are going to create a intermediate certificate authority.

00:53:44.690 --> 00:53:47.690
So we say create certificate authority again.

00:53:47.690 --> 00:53:49.510
In this case we're going to call it

00:53:49.510 --> 00:53:55.230
( Period of silence )

00:53:55.230 --> 00:53:56.699
Make it an intermediate.

00:53:56.699 --> 00:54:00.879
And again, we'll make this one
distributing S/MIME certificates.

00:54:03.170 --> 00:54:09.110
Now in order to be an intermediate CA, it has to be
assigned by another CA or the, in this case the root.

00:54:09.110 --> 00:54:11.470
So we'll just choose Bob's Towing.

00:54:11.469 --> 00:54:16.809
And we can actually see the, the
Bob's Towing certificate right there.

00:54:22.409 --> 00:54:25.710
It's creating the CA website again for this one.

00:54:25.710 --> 00:54:32.610
And you can actually see the actual certificate
that was created for this CA in this, at this point.

00:54:32.610 --> 00:54:36.099
You could also, this is where Bob
would be mailing the invitations.

00:54:36.099 --> 00:54:43.380
So if he clicked mail invitation, this is one we saw
earlier and so we can type in Frank or any other people

00:54:43.380 --> 00:54:47.510
that he wants to advertise this to and sends it off.

00:54:47.510 --> 00:54:53.770
( Period of silence )

00:54:53.769 --> 00:54:57.759
Okay, so now what I'm going to do is show
you how to import some identities.

00:54:57.760 --> 00:55:02.750
I've got some identities in my
documents folders that are PKCS12 files.

00:55:02.750 --> 00:55:06.110
And so we're going to import Alice.

00:55:06.110 --> 00:55:07.300
And it's really simple.

00:55:07.300 --> 00:55:12.950
It's just, you click on the file, specify the keychain
you want it to go into, in this case the log in keychain.

00:55:12.949 --> 00:55:20.710
Since it was wrapped as a
P12 file, it's got a password for it.

00:55:20.710 --> 00:55:24.929
And you could see Alice has been
imported into the log in keychain.

00:55:26.969 --> 00:55:32.069
Okay so now we've got, you can see
I've got another one here called Chris.

00:55:32.070 --> 00:55:35.210
But we're going to use the security import command.

00:55:36.750 --> 00:55:37.630
Oh boy.

00:55:37.630 --> 00:55:44.140
( Period of silence )

00:55:44.139 --> 00:55:49.379
Okay. So here we're using security import.

00:55:49.380 --> 00:55:50.250
Chris dot B12.

00:55:50.250 --> 00:55:52.309
We're going to put into Bob's keychain.

00:55:52.309 --> 00:55:54.279
We're not going to put it in the log in keychain.

00:55:54.280 --> 00:55:56.750
And then here in this case the password is Chris.

00:55:56.750 --> 00:56:00.969
And it said it, it already imported the identity.

00:56:00.969 --> 00:56:05.379
So if we go back, we see Chris.

00:56:05.380 --> 00:56:09.150
So that, those are just two examples
of how you can import some identities.

00:56:09.150 --> 00:56:14.869
It, you can import HM files and
all kinds of documents just

00:56:14.869 --> 00:56:17.989
by double clicking on them in the Finder.

00:56:20.010 --> 00:56:21.460
Okay, so that's it for the demo.

00:56:21.460 --> 00:56:24.449
And now I'm going to ask Shawn to come back up.

00:56:25.510 --> 00:56:31.650
( Applause )

00:56:31.650 --> 00:56:33.050
>> Thank you Craig.

00:56:33.050 --> 00:56:36.010
So to just kinda wrap this up as, as a summary,

00:56:36.010 --> 00:56:41.820
hopefully we've given you a much better
insight, many of you even on 10.4.

00:56:41.820 --> 00:56:48.780
But really better understanding what identities are, how
you can manage them, doing the obtaining of them, use,

00:56:48.780 --> 00:56:52.100
utilizing them, even issuing the identities themselves.

00:56:52.099 --> 00:56:53.699
And understanding the trust model.

00:56:53.699 --> 00:56:59.839
Remember as, as Ken mentioned there's a huge
change in the trust model going from 10.4 to 10.5.

00:56:59.840 --> 00:57:05.380
And hopefully you've seen as well as we've gone
through this process, both from the application side,

00:57:05.380 --> 00:57:11.230
from the certificate assistant side and even the
trust model that we're working very hard to make PKI,

00:57:11.230 --> 00:57:17.820
which is a very complex service when you're dealing with
all of these different components we talked about early on.

00:57:17.820 --> 00:57:21.970
We're really working hard to make
that an environment that just works.

00:57:21.969 --> 00:57:29.119
Again the, the zero configuration approach for the
management of these, these very complex services.

00:57:29.119 --> 00:57:34.799
So with that said, there's a little bit more
information depending on the where you're coming from.

00:57:34.800 --> 00:57:41.680
If you're a developer getting into the security services
like certificate and PKI side, Craig would be your best,

00:57:41.679 --> 00:57:45.139
Craig Keithley would be your
best contact from the developer side.

00:57:45.139 --> 00:57:52.349
And if you're on the enterprise side, government, commercial
space, I largely kind of interface with a lot of those folks

00:57:52.349 --> 00:57:55.239
in kind of the deployment, kind of the management of that.

00:57:55.239 --> 00:58:00.739
So depending on where you fit in this space, two contacts.

00:58:00.739 --> 00:58:03.989
Some of the other areas that give you some
really good information is those of you that are,

00:58:03.989 --> 00:58:08.629
are going to be issuing your own certificates,
creating your own certificate authority,

00:58:08.630 --> 00:58:11.510
look at Apple's root certificate authority website.

00:58:11.510 --> 00:58:16.300
You can see a lot of the appropriate information
and background on, on what Apple's done as well.

00:58:16.300 --> 00:58:21.500
And of course since this is all security
related and it fits into the CDSA deal,

00:58:21.500 --> 00:58:25.000
being on the CDSA mailing list is
a great resource for many of you.