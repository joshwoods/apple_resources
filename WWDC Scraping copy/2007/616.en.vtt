WEBVTT

00:00:20.010 --> 00:00:26.050
>> So this session is going to be Designing and Developing
Hybrid-Web/Cocoa Applications and it's being brought to us

00:00:26.050 --> 00:00:31.460
by the Barbarian Group who flew out from New York
and Los Angeles to give us this fine presentation.

00:00:31.460 --> 00:00:39.880
At this time I would like to bring up Keith
Butters, one of the partners of the Barbarian Group.

00:00:41.909 --> 00:00:45.239
>> Keith: Is this working?

00:00:45.240 --> 00:00:47.060
Hey everybody.

00:00:47.060 --> 00:00:55.530
George stole my show of hands so I don't
have that little bit of the intro to this.

00:00:55.530 --> 00:01:02.590
Hybrid-Web/Cocoa Applications, when George called
us I had no idea what this means and part of that is

00:01:02.590 --> 00:01:08.700
because I am primarily a graphic designer
and I brought Toby and Chandler with me

00:01:08.700 --> 00:01:10.490
so they can get into all the technical stuff.

00:01:10.489 --> 00:01:17.829
Toby is our CTO and Chandler is a Senior Developer with
us, but what do we mean by Hybrid-Web/Cocoa Applications?

00:01:17.829 --> 00:01:24.759
Basically we are talking about using WebKit which is
really awesome in every demo I've seen so far this week

00:01:24.760 --> 00:01:27.820
and I am sure you guys to have be dazzled by it.

00:01:27.819 --> 00:01:35.409
And what we really don't mean though is just tossing a
browser into your app for the sake of throwing a browser

00:01:35.409 --> 00:01:41.060
into your app because a lot of apps that I have been
seeing lately come out, I mean there is no point

00:01:41.060 --> 00:01:45.620
in having a browser, I'd rather click
a link and just go to my browser.

00:01:45.620 --> 00:01:52.760
I have a browser, I like my browser, it's setup
the way I want it to be so, I like it that way.

00:01:52.760 --> 00:01:59.790
So basically we are talking about making your application
more awesome and part of that has to do with the appearance,

00:01:59.790 --> 00:02:07.900
a lot of that has to do with making it skinnable and
so users can you know add their own skins and such

00:02:07.900 --> 00:02:16.150
and it's also real easy to consume web services and to use
the power of the web in other ways then just browsing.

00:02:16.150 --> 00:02:19.500
So why design hybrid apps?

00:02:19.500 --> 00:02:26.490
Part of it is that we can make much more interesting
user interfaces with you know AJAX and all that stuff.

00:02:26.490 --> 00:02:29.520
I saw the Dojo talk yesterday which was super cool

00:02:29.520 --> 00:02:33.409
and if you didn't see it you should
definitely watch the video when they come out.

00:02:33.409 --> 00:02:37.969
And their doing all kinds of really interesting
stuff that's not just sort of AppKit.

00:02:37.969 --> 00:02:41.819
You know, I mean, I'm sorry there doing really
interesting stuff but you can put it in your app

00:02:41.819 --> 00:02:48.389
and it's not just AppKit based you know user
interface controls you can be very custom about it.

00:02:48.389 --> 00:02:53.179
And then another reason to do it is that the
human interface guidelines are fairly out of date.

00:02:53.180 --> 00:02:57.060
I mean most things like CoverFlow
aren't even in them right now.

00:02:57.060 --> 00:03:04.330
If you look at iTunes, the iTunes Store in
particular is very much just a web view sitting

00:03:04.330 --> 00:03:06.200
in the middle of your application.

00:03:06.199 --> 00:03:13.719
Then there are apps like Disco and Cha-Ching which are,
they use WebKits somewhat but its also just good examples

00:03:13.719 --> 00:03:19.319
of people doing more interesting
graphic design with their application.

00:03:20.770 --> 00:03:26.990
And another reason is that you can still use your data
when you are off the grid, when you're on an airplane

00:03:26.990 --> 00:03:33.580
or when you are in a tunnel , Amtrak which
we do far too often in our line of work.

00:03:33.580 --> 00:03:42.080
I know that Dojo 0.9 once again in their session was
saying that they sort of solved this for their release

00:03:42.080 --> 00:03:49.750
that is coming out, but it's still you know its still
0.9 and I don't necessarily know how it works yet

00:03:49.750 --> 00:03:52.990
and I know it's not coming out for a couple
weeks so it will be interesting to test.

00:03:52.990 --> 00:03:57.780
But for now to develop a be able to
save your data locally and use your app

00:03:57.780 --> 00:04:01.469
on an airplane is a pretty compelling
reason to stick around.

00:04:01.469 --> 00:04:04.830
And back up your data locally and remotely

00:04:04.830 --> 00:04:09.350
and plus of course all the fantastic
features of WebKit that you get for free.

00:04:09.349 --> 00:04:16.600
Now design wise like our shop is primarly
a web shop and we have you know people

00:04:16.600 --> 00:04:22.020
who design really beautiful websites all
the time and then we also do some software,

00:04:22.019 --> 00:04:28.109
this is an iTunes plug-in we've been working on
which you need to check out if you haven't yet.

00:04:28.110 --> 00:04:35.270
It's called Magnetosphere and then we
also actually built a hybrid application

00:04:35.269 --> 00:04:38.370
and I didn't realize that's what
it was called when they built it.

00:04:38.370 --> 00:04:46.550
But if you may have seen this in Best Buy or some of
those other places where Apple has a store within a store

00:04:46.550 --> 00:04:53.000
and this is basically a one window
giant full screen web view

00:04:53.000 --> 00:04:56.730
and everything else inside it is
all just basically a website.

00:04:56.730 --> 00:05:01.009
I mean you probably wouldn't know it by looking
at it and users have no idea that they are looking

00:05:01.009 --> 00:05:03.310
at web pages but that's indeed what it is.

00:05:03.310 --> 00:05:10.800
So I'm going to talk a little bit about what these
guys are going to teach you, hopefully teach anyway.

00:05:10.800 --> 00:05:16.550
How building hybrid apps affect
the user interface design process.

00:05:16.550 --> 00:05:21.590
It's a very different work flow using AppKit
and using WebKit to design your application.

00:05:21.589 --> 00:05:25.609
And in turn effects the development cycle substantially.

00:05:25.610 --> 00:05:28.960
And then Toby is going to talk about all
the technologies that you can leverage now

00:05:28.959 --> 00:05:32.849
that there's an actual WebKit instance in your application.

00:05:32.850 --> 00:05:40.470
And then Chandler is going to go into real detail later on
about dealing with bindings and Core Data and how to make

00:05:40.470 --> 00:05:50.830
that all work with JavaScript etc and then these are a bunch
of the technologies that we're talking about over the course

00:05:50.829 --> 00:05:57.879
of the day Core Data and bindings of course which makes
your web view a real sort of it feels like a piece

00:05:57.879 --> 00:06:06.230
of your AppKit application, XHTML, CSS, SVG for
design Canvas for drawing and JavaScript XML

00:06:06.230 --> 00:06:11.009
and all the plug-ins you sort of just get for
free because you got WebKit in your application.

00:06:11.009 --> 00:06:24.240
This is sort of a common problem for me as a
graphic designer, I'll open up a interface builder,

00:06:24.240 --> 00:06:30.670
lay out my application and I think it's gorgeous, I'm
like okay this is perfect and then immediately I'll open

00:06:30.670 --> 00:06:36.840
up you know iChat and you know Aperture and whatever else
and all of a sudden I'm looking at the screen and thinking

00:06:36.839 --> 00:06:45.989
like oh wow my UI kind of sucks and it's not that AppKit is
bad, there's plenty of great places for AppKit but its just

00:06:45.990 --> 00:06:55.300
that some many apps now are so much more
beautiful then the off the rack AppKit look.

00:06:55.300 --> 00:07:00.460
And once again Leopard is quite a bit better,
there's some heads up display stuff in there if any

00:07:00.459 --> 00:07:04.609
of you have checked out the IB the newest IB.

00:07:04.610 --> 00:07:08.530
But it's still not as beautiful as a lot of things.

00:07:08.529 --> 00:07:16.239
So I brought this in here for two reason, one because you
know working in a Simpsons quote is always a good thing,

00:07:16.240 --> 00:07:22.910
but it also, thank you, one person liked that.

00:07:22.910 --> 00:07:30.640
But it also seems, it's the way I think about graphic
design and a lot of us are sort of self hating narcissists.

00:07:30.639 --> 00:07:37.469
It's true and we work and we work and we
work until we reach the point of something

00:07:37.470 --> 00:07:41.890
that we don't hate instead of something
that we fall in love with.

00:07:41.889 --> 00:07:50.479
So what we've been doing now is developing in parallel
where you have an AppKit view this is a Core Data inspector

00:07:50.480 --> 00:07:54.439
and it presents all the information in a fairly clear way.

00:07:54.439 --> 00:08:01.040
It doesn't, it's not nearly as usable as what you
like to have but it's a quick way for developers

00:08:01.040 --> 00:08:09.780
to put everything together and deliver it to a
designer such that the designer can build a UI based

00:08:09.779 --> 00:08:12.929
around what they see and change to look of the application.

00:08:12.930 --> 00:08:21.319
So here's the same information laying it out in
WebKit with CSS is actually just a Photoshop comp

00:08:21.319 --> 00:08:24.990
that they later can cut up and
style and all that sort of stuff.

00:08:24.990 --> 00:08:31.500
And so we did this one and I said no that's not too great and
we moved on and did this one, it's a little stock application

00:08:31.500 --> 00:08:37.250
as you can see but I could design a hundred
of these things and they can modify the CSS

00:08:37.250 --> 00:08:40.340
and do all that stuff really, really quickly.

00:08:40.340 --> 00:08:46.670
And this is another sort of designer pet peeve
that I'd like to bring up with everybody.

00:08:46.669 --> 00:08:56.679
I get this phone call weekly maybe monthly you know
fairly often and there usually really, really wrong.

00:08:58.210 --> 00:09:04.340
It's so important to have somebody who has a semblance of
graphic design knowledge working with you from the beginning

00:09:04.340 --> 00:09:11.040
so that your app is not you know, we've all downloaded those
apps where they've just got, they just said oh I am going

00:09:11.039 --> 00:09:13.480
to use the brush metal and oh I am
going to use this kind of button

00:09:13.480 --> 00:09:15.940
and all of a sudden it looks just like a big mishmash.

00:09:15.940 --> 00:09:21.740
You should start with a designer so that then when you
do need your icon you already got one and they can do it

00:09:21.740 --> 00:09:24.289
and it's not going to cost you an arm and
a leg and they are not going to complain

00:09:24.289 --> 00:09:27.610
about your app the whole time while your doing it.

00:09:27.610 --> 00:09:35.860
Now custom view design it's really hard and I have yet to
find anyone and I am sure pretty sure there are people here

00:09:35.860 --> 00:09:43.039
but we live in, we work in sort of a smallish bubble
and our experience and the people we are networked with.

00:09:43.039 --> 00:09:48.949
It's really hard to find somebody who can do great
custom views and that shouldn't be a limitation

00:09:48.950 --> 00:09:51.500
to making your application look beautiful.

00:09:51.500 --> 00:10:02.080
And it also means that you developers can be working on, you
developers can be working on the hard stuff and let a kid

00:10:02.080 --> 00:10:09.660
from San Francisco who can throw a rock
in San Francisco and hit a web designer.

00:10:09.659 --> 00:10:14.000
Let them deal with your visuals and of
course consult with them and all of that.

00:10:14.000 --> 00:10:19.259
Their easy to find and they all know
most of the technologies that you'll need

00:10:19.259 --> 00:10:26.279
to make your site beautiful including really nice
CSS and CSS 3 which is going to work really nicely

00:10:26.279 --> 00:10:28.959
with resolution independence and all that.

00:10:28.960 --> 00:10:33.600
And it also changes the development cycle quite a bit.

00:10:33.600 --> 00:10:40.830
As I showed you those two quick comps of this little
stock viewer demo, they don't have to recompile,

00:10:40.830 --> 00:10:47.870
my developers don't have to recompile and I can change
everything about the way my application looks using WebKit

00:10:47.870 --> 00:10:55.450
and I think its really worth noting to that by using
CSS and WebKit and all of this for your app design,

00:10:55.450 --> 00:11:00.660
you can give power to your users and users
really like to sort of rally around your product

00:11:00.659 --> 00:11:04.860
and you know help with it and they want to contribute.

00:11:05.929 --> 00:11:11.519
And by it including skins that other people
viewed you can probably you know at some point,

00:11:11.519 --> 00:11:16.029
when your app design is solid enough you can
let your user do it and not even worrying

00:11:16.029 --> 00:11:20.439
about managing a whole team and all that.

00:11:20.440 --> 00:11:25.080
It will make your application a hell
of a lot better and it's only going

00:11:25.080 --> 00:11:29.540
to enhance the community that lives around your application.

00:11:29.539 --> 00:11:35.120
And now I am going to bring up Toby who is going to
teach you or try to teach you, ha ha, a bunch of the nuts

00:11:35.120 --> 00:11:40.320
and bolts about all this stuff and after that Chandler is
going to come up and do some demos and show you that app

00:11:40.320 --> 00:11:42.250
that we were working on and a few other things

00:11:42.250 --> 00:11:44.110
So thanks.

00:11:49.210 --> 00:11:51.540
>> Toby: Thanks Keith.

00:11:51.539 --> 00:11:59.649
So how many people here are now or
have been a career web developer?

00:11:59.649 --> 00:12:02.709
And how many are Cocoa developers?

00:12:02.710 --> 00:12:11.920
And both? Okay so my talk is going to be for the people
who especially that are both, maybe too much of an overview.

00:12:11.919 --> 00:12:20.370
But I am going to go thru and introduce some of the tech
that you use both on the WebKit side and on the Cocoa side.

00:12:20.370 --> 00:12:27.409
And talk a little about the overlaps and show
kind of how easy it is to get those concepts

00:12:27.409 --> 00:12:31.419
and start working toward making hybrid apps yourself.

00:12:32.720 --> 00:12:35.590
So everything I just said is right there.

00:12:35.590 --> 00:12:43.629
I am going to give some uses for WebKit that may be
kind of standard and will be a little bit different,

00:12:43.629 --> 00:12:49.480
sort of what Keith's talk on using it for design.

00:12:49.480 --> 00:12:57.440
One of the most obvious uses for WebKit is to consume
resources and a resource is basically anything with a URI.

00:12:57.440 --> 00:13:01.970
It can be local or remote
using the file protocol or HTTP.

00:13:01.970 --> 00:13:10.180
If you can access it through your browser, you'll be able
to access it with WebKit so that obviously includes things

00:13:10.179 --> 00:13:15.609
like XHTML pages, all of your objects,
images and SVG and swifts.

00:13:15.610 --> 00:13:22.070
You can invoke web services obviously and
then you can consume RESTful resources.

00:13:22.070 --> 00:13:28.310
The benefits of consuming resources in your Cocoa
app are obvious if you want to build a browser

00:13:28.309 --> 00:13:32.359
or do what Keith said not to do and
just throw a browser into your app.

00:13:32.360 --> 00:13:37.480
You can publish data online and pull
it back down for reading it obviously.

00:13:37.480 --> 00:13:41.840
And then you can support skinning,
Keith talked a bit about that.

00:13:41.840 --> 00:13:51.360
There's modifying resources too which is useful for things
like an app that publishes to your blog or something.

00:13:51.360 --> 00:13:57.759
You can also use it in some interesting ways, one
of the talks I saw earlier in the week had used it

00:13:57.759 --> 00:14:03.669
for the CS3 installers for the Adobe
Suite which was a really cool use.

00:14:03.669 --> 00:14:09.079
You can active serials if you want to you
know roll your own and then if you are kind

00:14:09.080 --> 00:14:14.060
of a masochist you can let users submit
bug reports directly from your app.

00:14:14.059 --> 00:14:22.629
You can update app resources, pull down things, you know
like skins from users, you can let users push skins live

00:14:22.629 --> 00:14:30.639
and you know icons, the app we're going to use later uses some
custom icons for different stock symbols and you can pull that
sort of thing

00:14:30.639 --> 00:14:34.639
down as new people are added to the
important part of the market anyway.

00:14:36.179 --> 00:14:44.279
Using HTTP is good for this, there's kind of a
resurgence in looking at the protocol itself lately

00:14:44.279 --> 00:14:53.439
and using refs the verbs that HTTP provides let you
do pretty much everything you'll want to do remotely.

00:14:53.440 --> 00:14:59.620
So WebKit is one of the few browsers
that gives you all the power of HTTP.

00:14:59.620 --> 00:15:04.840
So the benefits of modifying resources in
general are just that it's really easy.

00:15:04.840 --> 00:15:09.950
So if you can think of a way that you might benefit
from that, it's super easy you may as well use it.

00:15:09.950 --> 00:15:13.930
And then at the protocol level you
don't have to rewrite anything.

00:15:13.929 --> 00:15:15.739
And then there's sharing data.

00:15:15.740 --> 00:15:24.039
You can have an app that's just a local stand alone app
that you know does terribly important things but then a lot

00:15:24.039 --> 00:15:31.509
of other apps can benefit form pushing data you
know to .mac or just to your own web server

00:15:31.509 --> 00:15:35.289
or across to other users in case of like an IRC client.

00:15:35.289 --> 00:15:42.639
So once the data is in a centralized location and
you can access it from all sorts of different clients

00:15:42.639 --> 00:15:49.019
so Dashboard Widgets we all use to access all kinds
of online information and a lot of apps come bundled

00:15:49.019 --> 00:15:53.419
with widgets so that the widgets are part of the suite.

00:15:53.419 --> 00:15:57.240
You know suddenly have a suite, other users of your app just

00:15:57.240 --> 00:16:01.930
of the single client you write
can share data with each other.

00:16:01.929 --> 00:16:07.819
If you are publishing everything to a server
you can obviously have pages that show the data.

00:16:07.820 --> 00:16:14.560
We could have had a scheduling app if we wanted
to, to download you know the attendees schedule

00:16:14.559 --> 00:16:19.119
and also see it online cause the data centralized
and then there are some new mobile devices

00:16:19.120 --> 00:16:22.429
that benefit from web development these days.

00:16:22.429 --> 00:16:29.219
You can also purchase data for offline
consumption, which you can do without WebKit.

00:16:29.220 --> 00:16:34.879
You can go out and pull data and you can use
all sorts of protocols, a full network stack

00:16:34.879 --> 00:16:40.039
but most of the time the data seems to be the
buzz anyway and definitely the stuff that we work

00:16:40.039 --> 00:16:46.569
with the most being primarily a web shop is stuff
that's on the web so you can open NetNewsWire

00:16:46.570 --> 00:16:53.560
and pull down your RSS feeds all 900 of them and
then you get on Jet Blue and you can read them.

00:16:53.559 --> 00:17:03.509
So by, you pull them down with WebKit and then use other
tech to store them for now anyway but it's a good use.

00:17:03.509 --> 00:17:08.319
And if you add services, even really light
weight services to your business model,

00:17:08.319 --> 00:17:15.419
your app then you get some maybe a little strong
armed loyalty there once users are sinking everything

00:17:15.420 --> 00:17:20.440
through your app and through your server, even
if a competitor comes out and writes a client,

00:17:20.440 --> 00:17:26.809
their still using your service so
if you make your app a little richer

00:17:26.809 --> 00:17:31.490
and kind of move it you know off the
desktop a little bit you have the ability

00:17:31.490 --> 00:17:36.789
to attract more clients cause they can use lots
of different client applications to access it.

00:17:36.789 --> 00:17:42.950
So I'm going to go through that sort of
pedantic overview that I was talking about.

00:17:42.950 --> 00:17:46.830
For the people that are just web developers and not
Cocoa developers I thought I would introduce some

00:17:46.829 --> 00:17:49.500
of the Cocoa tech that you will be using.

00:17:49.500 --> 00:17:55.970
I'll do this the inverse for the Cocoa people and
then I'll talk about the overlaps a little bit.

00:17:55.970 --> 00:18:02.839
So Cocoa uses MVC, all of the better
web frameworks do from back

00:18:02.839 --> 00:18:07.899
in my J2EE days using Struts thru Rails and in Jango now.

00:18:07.900 --> 00:18:11.940
Everybody is using MVC cause it's a good
model, it's been around for a long time.

00:18:11.940 --> 00:18:19.809
The pattern is a classic and Cocoa has had it and you know
since the inception you know since the small talk days.

00:18:19.809 --> 00:18:25.210
Core Data for web developers is like a local
really strong database, it uses SQLite

00:18:25.210 --> 00:18:30.809
and you get you know all the benefits of having
a local data base inside your app basically.

00:18:30.809 --> 00:18:37.319
Including not having to worry to much about multiple
users messing with the data at the same time.

00:18:37.319 --> 00:18:43.929
You get familiar resource consumption and the familiarity
is both on resources web pages, everything that we consume

00:18:43.930 --> 00:18:47.860
on a daily basis and you also get the
familiarity of the rendering engine.

00:18:47.859 --> 00:18:54.669
So you can have form controls that you know move a little
bit away from the AppKit style and are something that anyone

00:18:54.670 --> 00:19:01.100
who has used the web will be used to
which is good and there quick to build.

00:19:01.099 --> 00:19:07.139
AppKit and WebKit together provide for a really
flexible presentation later because you can do

00:19:07.140 --> 00:19:11.810
you can use a lot of the cool stuff that you'd other wise
have to script yourself like the NSCollection view

00:19:11.809 --> 00:19:14.319
which is like my favorite thing right now.

00:19:14.319 --> 00:19:20.879
And then you can also use WebKit for things as
flippant as just making like a gradiant bar with SVG

00:19:20.880 --> 00:19:26.610
that you just didn't want to do for some
reason with a custom drawing you know

00:19:26.609 --> 00:19:31.000
up to building a browser and throwing that up in there.

00:19:31.000 --> 00:19:40.279
With bindings, bindings are really cool for web developers
I think as a web developer because you are use to having

00:19:40.279 --> 00:19:49.139
to kick all you bars up to whatever your presentation layer
is and you kick up everything to ERV for instance and Rails

00:19:49.140 --> 00:19:53.870
and you have to do that yourself I mean is kind
of easy but you still have to do that yourself.

00:19:53.869 --> 00:20:00.539
With bindings you get sort of two directional
sync, you can sync your models with your views

00:20:00.539 --> 00:20:03.690
and if someone changes something in
the views, it reflects it in the model.

00:20:03.690 --> 00:20:09.450
It's really cool and probably along with core
data one of the most attractive parts of Cocoa

00:20:09.450 --> 00:20:13.180
for web people I think, well with WebKit of course.

00:20:13.180 --> 00:20:19.279
So the web tech for Cocoa folks, this will be really
quick because everyone knows this stuff I think.

00:20:19.279 --> 00:20:31.259
XHTML, XML its how everything should be done out there
and so you're used to that, CSS you know in the past few years

00:20:31.259 --> 00:20:38.150
for those who may have done some web dev back in the
day and have only been doing Cocoa stuff for a while.

00:20:38.150 --> 00:20:44.680
Everyone is moving toward web standards and it has moved
toward web standards and is doing nice semantic markup

00:20:44.680 --> 00:20:52.710
and keeping all of the presentation in CSS so you can break
out all of that presentational logic and make it available

00:20:52.710 --> 00:20:55.410
to users you know like Keith was talking about.

00:20:55.410 --> 00:21:00.259
And it also fits really well in a sort of multi disciplinary
shop like ours, so you are going to have people working

00:21:00.259 --> 00:21:09.769
in parallel that may or may not care that it's a Cocoa
app, they just need to be able to develop something.

00:21:09.769 --> 00:21:20.430
SVG is getting more and more awesome by the day gives
you a great sort of stateful way to draw and it's based

00:21:20.430 --> 00:21:23.400
on web standards and it doesn't
really get any better then that.

00:21:23.400 --> 00:21:27.660
You script with JavaScript for animation and
interactivity so its tech that you already know.

00:21:27.660 --> 00:21:32.950
You don't require any proprietary apps
that you have to buy for everyone.

00:21:33.970 --> 00:21:42.210
Canvas is sort of a faster non
stateful way to draw in WebKit.

00:21:42.210 --> 00:21:47.829
I used a lot in Dashboard Widgets and
gives you the power to sort of do a lot

00:21:47.829 --> 00:21:51.509
of complex drawings really fast
without taking up a lot of memory.

00:21:51.509 --> 00:21:56.720
JavaScript is sort of the lingual
frank of client side scripting.

00:21:56.720 --> 00:22:03.210
And then you get all the plug-ins that you
know are available for your web browser.

00:22:03.210 --> 00:22:08.440
Then there's just resource consumption in general and
as I said earlier, I think of a resource as anything

00:22:08.440 --> 00:22:15.920
that has a URI and that doesn't just include files
and images and things but also RESTful services

00:22:15.920 --> 00:22:19.810
so you can you know you can have actions as resources.

00:22:19.809 --> 00:22:24.750
And so you get that with WebKit and web tech in general.

00:22:24.750 --> 00:22:33.400
So some of the overlaps there are some
common concepts between the two NDC,

00:22:33.400 --> 00:22:41.850
the way that some web frameworks have bindings like
abilities, if you are into you know just Cocoa dev

00:22:41.849 --> 00:22:46.579
or just web development and you're here,
you're obviously smart and into a lot of things

00:22:46.579 --> 00:22:51.210
and so there's not really a high barrier to entry.

00:22:51.210 --> 00:22:55.440
You don't necessarily have to become the best web developer
in the world or the best Cocoa developer in the world,

00:22:55.440 --> 00:23:01.830
you can kind of take baby steps towards pulling
AppKit pieces into your you know light weight sort

00:23:01.829 --> 00:23:07.210
of WebKit wrapper apps if you're a web developer or
you can start tossing in little things for just UI

00:23:07.210 --> 00:23:11.690
if you're a Cocoa developer that hasn't
really done this type of apps before.

00:23:11.690 --> 00:23:19.700
As I said earlier the model layer is overlapped
if you use Core Data and you should I think?

00:23:19.700 --> 00:23:27.130
It users SQLite, it gives you your ORM and it gives
you persistence for free, you don't have to think

00:23:27.130 --> 00:23:29.330
about serializing things and writing them out.

00:23:29.329 --> 00:23:37.139
You can do that obviously, you can write your own
anything in Cocoa but you don't have to, it's awesome.

00:23:37.140 --> 00:23:43.600
You also get a really great modeling tool
that I wish existed for more web frameworks.

00:23:43.599 --> 00:23:49.409
So it's in a lot of cases especially in the simpler
apps, it will be your web tier, I mean your model tier.

00:23:49.410 --> 00:23:54.490
You get implicit relationships in a query
syntax where you don't have to write SQL.

00:23:54.490 --> 00:23:58.620
A lot of the same, you know like you go and
watch like the Rails web cast and if your sold

00:23:58.619 --> 00:24:02.689
on that then you will be sold on this as well.

00:24:02.690 --> 00:24:10.140
Web developers are already use to design you know databases
and normalizing databases, you really do get to just take

00:24:10.140 --> 00:24:13.740
that one to one and take it over
into your Core Data experience.

00:24:13.740 --> 00:24:18.819
There are some weird things you have to learn as times
goes on but you can start right away just with some ideas

00:24:18.819 --> 00:24:24.079
of a few entities and start modeling and kick
out an app without writing any code at all.

00:24:24.079 --> 00:24:29.599
NSManagedObject could be thought of for the Rails
people as ActiveRecord::Base, it's sort of your super class

00:24:29.599 --> 00:24:34.149
for all of your, for all of your model objects.

00:24:34.150 --> 00:24:40.360
With controllers you know web controllers
are support to be stateless, they,

00:24:40.359 --> 00:24:47.569
a controller is you know conceptually may be one thing but
on a given request it's sort of the action that's invoked.

00:24:47.569 --> 00:24:54.129
It could even just be Apache, just
handling the request in general.

00:24:54.130 --> 00:24:57.780
You kick variables up often manually
sometimes there's somethings to help it out,

00:24:57.779 --> 00:25:01.629
but you know you still have to do that.

00:25:01.630 --> 00:25:09.590
Cocoa gives you statefullness so if you're a web developer
you can and you've never built a desktop app you get

00:25:09.589 --> 00:25:13.809
to sort of keep local state which is great.

00:25:13.809 --> 00:25:19.460
The different like object controllers like NSArray controller
manage all of your collections of objects

00:25:19.460 --> 00:25:26.410
and give you really great ways to bind them and access them
and bind the contents of those arrays straight to your views

00:25:26.410 --> 00:25:29.680
without having to push anything, it's really great.

00:25:29.680 --> 00:25:34.380
Bindings you can also link sort of
manually just in your custom objects.

00:25:34.380 --> 00:25:44.190
In that's, that binding is part of a sort of a
controller functionality and you know this state is there.

00:25:44.190 --> 00:25:48.700
They do work well together, its not really that one
is better then the other and you know a lot of people

00:25:48.700 --> 00:25:58.670
over the years have stepped into try to make HTTP
stateful you know faking it basically and you can do that

00:25:58.670 --> 00:26:01.940
but you can also use that the way it's
intended, which is to keep it stateless

00:26:01.940 --> 00:26:05.230
and you can do that side by side in you Cocoa app.

00:26:05.230 --> 00:26:13.180
So you can pull things down and keep them around and you
know form the next request to go invoke something restfully.

00:26:13.180 --> 00:26:22.390
The views, this is pretty obvious on each side, in a AppKit
you get all the windows , MS table views and the trees,

00:26:22.390 --> 00:26:27.350
the collection view which is the new
cool grid and then you get WebViews.

00:26:27.349 --> 00:26:30.639
You also get all your customs stuff but these are
the ones that are sort of, if you're transitioning

00:26:30.640 --> 00:26:33.860
in you'll probably look at right away and use right away.

00:26:33.859 --> 00:26:37.059
On the web side you get obviously pages.

00:26:37.059 --> 00:26:40.309
That's the most popular view probably.

00:26:40.309 --> 00:26:41.519
You can consume feeds.

00:26:41.519 --> 00:26:44.710
Those are part of the view layer if you're a web developer.

00:26:44.710 --> 00:26:50.009
All of your objects, I consider part of the view
because there sort of the payload of a response

00:26:50.009 --> 00:26:52.519
and to that end the same thing with RESTful responses.

00:26:52.519 --> 00:27:01.059
The response from Apache or Engine X is to me
part of the view, its part of the end result.

00:27:01.059 --> 00:27:11.919
Some of the cooler hybrid apps that you guys probably use
already, MarsEdit you can you know publish, blog post,

00:27:11.920 --> 00:27:13.769
you can write them ahead of time, publish them later.

00:27:13.769 --> 00:27:19.869
You can sit on a flight tomorrow morning and write
about how your nerves are made of silk instead

00:27:19.869 --> 00:27:25.209
of steal and how painful it can be to speak.

00:27:25.210 --> 00:27:33.420
MarsEdit uses WebKit in a cool way, you can just
sort of type in content and it'll make it like sort

00:27:33.420 --> 00:27:36.529
of cookie cutter you know HTML render for you.

00:27:36.529 --> 00:27:42.410
Or you can link against your actual style sheet from you
site and see how things are going to look ahead of time.

00:27:42.410 --> 00:27:48.400
For doing stuff like this you guys as coders, if
you're bloggers as well, you know that it takes 50 times

00:27:48.400 --> 00:27:54.269
to like publish a block of code before it looks right and
before you know over flow doesn't kick in and everything.

00:27:54.269 --> 00:28:00.599
You can preview it all locally and do it when you have
nothing else to do like when you are on Amtrak or the plane.

00:28:00.599 --> 00:28:07.669
NetNewsWire, we've all been using it probably
forever and it obviously transforms RSS and Atom

00:28:07.670 --> 00:28:12.980
and gives you a view of it that your use to like you have
those pages just sort of saved, they don't look the same

00:28:12.980 --> 00:28:16.089
that they would but you can skin them
and make them look however you want.

00:28:16.089 --> 00:28:18.369
It's just another instance.

00:28:18.369 --> 00:28:27.629
Colloquy,  you know everyone's probably tried to hack
around and make nice skins for this and iChat,

00:28:27.630 --> 00:28:30.300
the new iChat is going to do the same thing.

00:28:30.299 --> 00:28:33.359
It uses it for the conversation window.

00:28:33.359 --> 00:28:38.879
So I am going to summarize this a little bit cause
Chandler has a lot to talk about and show you guys.

00:28:38.880 --> 00:28:45.380
But I mostly wanted to point out that these two disciplines
do have a lot in common, those of you who are sort

00:28:45.380 --> 00:28:49.480
of hybrid developers know that weather
or not you are making hybrid apps.

00:28:49.480 --> 00:28:54.360
There's a very low barrier to entry on both sides so
if you're a web developer and you never touched Cocoa,

00:28:54.359 --> 00:29:00.479
like crack open Xcode on your flight back and play
just, IB especially you'll be able to play with a lot

00:29:00.480 --> 00:29:05.880
and make this terrible interfaces
that Keith was talking about.

00:29:05.880 --> 00:29:13.170
You should consider, this is unsolicited business advice
consider linking your software somehow to the web,

00:29:13.170 --> 00:29:18.310
not you know just for the sake of doing it, but there
probably is a way that you could benefit from it.

00:29:18.309 --> 00:29:20.159
Or that your users could benefit from it.

00:29:20.160 --> 00:29:30.080
Be it to have you know widgets and iPhone pages that can
use the same data that your local you know OS X client uses,

00:29:30.079 --> 00:29:35.159
there's a lot of appeal to a user, to me at least
in knowing whatever phone I am buying next month,

00:29:35.160 --> 00:29:40.380
I'm probably going to be able to use the
same data that I mess with all the time.

00:29:40.380 --> 00:29:44.930
We live in a multiclient world and the web
you know if you follow good security practices

00:29:44.930 --> 00:29:49.360
and everything provides a nice
share point for all of that data.

00:29:49.359 --> 00:29:55.029
You know single user, multiple clients, multiple
users, multiple clients, multiple user, single client.

00:29:55.029 --> 00:29:56.129
It really doesn't matter.

00:29:56.130 --> 00:30:00.110
You get to just sort of treat that
stuff as part of a bigger picture.

00:30:00.109 --> 00:30:05.409
And like Keith opened with, WebKit isn't
really a substitute for everything.

00:30:05.410 --> 00:30:14.259
We are guilty of throwing a web view and a window and
writing a big flash app you know and making that our app

00:30:14.259 --> 00:30:18.170
or a demo or you know using for it prototyping.

00:30:18.170 --> 00:30:23.870
We wouldn't release that you know, it's just there
because we're a web shop that makes it very easy

00:30:23.869 --> 00:30:27.689
to not burn something on a CD-ROM and require
your clients to open a browser and wonder

00:30:27.690 --> 00:30:34.759
if their IE chrome is six feet tall you know you
can use it in weird quick little one off ways.

00:30:34.759 --> 00:30:41.259
But it does do a lot of stuff and all of it is for free.

00:30:41.259 --> 00:30:46.000
And it's all based on standards that are
supported and developed by really smart people.

00:30:46.000 --> 00:30:50.769
The protocols have been around forever so with
everyone moving back to the roots

00:30:50.769 --> 00:30:54.359
of actually figuring out what the HTTP spec was all about.

00:30:54.359 --> 00:30:58.389
You get to use tech that you know you can rely on.

00:30:58.390 --> 00:31:02.550
So I am going to bring Chandler McWilliams, one of
our senior developers up to give you guys a demo

00:31:02.549 --> 00:31:10.149
and to talk a little bit about a little lower
level about implementing  WebKit inside your app.

00:31:15.000 --> 00:31:18.319
>> Chandler: Hello everyone could
we get the demo machine please?

00:31:21.309 --> 00:31:24.879
So here's the application that Keith showed earlier.

00:31:24.880 --> 00:31:27.740
This is a running application in leopard.

00:31:27.740 --> 00:31:34.130
We've got some charting going on here, all,
we kind of walk you through the application.

00:31:34.130 --> 00:31:42.050
You can see a few different views of the data, looks
like whatever tower stream was it's not happy today.

00:31:42.049 --> 00:31:46.470
So what we have going on here is there's
actually a number of WebKits used here.

00:31:46.470 --> 00:31:51.539
This isn't one of the applications that Toby had
mentioned where the whole thing is one gigantic web view.

00:31:51.539 --> 00:31:57.879
There's actually seven, eight, nine web views going on here.

00:31:57.880 --> 00:32:00.500
The first one is this bar along the top.

00:32:00.500 --> 00:32:04.619
So you recognize the familiar search bar here
which those of you that know HTML will know

00:32:04.619 --> 00:32:06.829
that you can use with the imput type search.

00:32:06.829 --> 00:32:09.240
So this kind of comes for free on WebKit.

00:32:09.240 --> 00:32:18.170
So this whole top bar is used for searching for new
quotes and it uses prototype to make the AJAX request

00:32:18.170 --> 00:32:20.779
to actually pull the data from a web service.

00:32:20.779 --> 00:32:22.700
And then pull it back to the application.

00:32:22.700 --> 00:32:29.410
That data is then piped up into Core Data and saved to
the user's machine so I can unplug this from the web.

00:32:29.410 --> 00:32:35.710
As Toby's saying I can be on an airplane any where
else and the data will still be there and then instead

00:32:35.710 --> 00:32:42.870
of the other view that Keith had shown, which we started
with, which is kind of difficult to see trends in.

00:32:42.869 --> 00:32:51.889
We decided to bring in this web and now we are
using Dojo charting here to draw the graph for us.

00:32:51.890 --> 00:32:57.470
So as I said there are a number of web views and
the whole app is skinnable just using CSS and HTML.

00:32:57.470 --> 00:33:03.410
So this top web view actually extends down the whole
back of the application and what that gives us is

00:33:03.410 --> 00:33:08.279
that we can change the whole background
color of the app just by changing the CSS.

00:33:08.279 --> 00:33:12.079
The other places the web view can be
seen is obviously in the graph here.

00:33:12.079 --> 00:33:18.169
This is a separate view that's connected via bindings to
the Core Data store so when you select one of these buckets

00:33:18.170 --> 00:33:24.029
over here it kind of pumps up to the application controller
what the active one is and then that gets sent back

00:33:24.029 --> 00:33:29.379
down into this graph view so that you can
see the data and the particular context.

00:33:29.380 --> 00:33:34.170
Now this view over here as Toby said, were
somewhat enamored of the NS collection view

00:33:34.170 --> 00:33:38.150
because you get all theses cool sorting animations for free.

00:33:38.150 --> 00:33:44.210
So this is an NS collection view and each of
the cells is actually another WebKit view.

00:33:44.210 --> 00:33:47.590
So it's a grid of WebKit views and what we get there is

00:33:47.589 --> 00:33:54.689
that we can do little core animation
tricks and get all this nice sorting.

00:33:54.690 --> 00:33:57.350
But you can completely change the way this looks.

00:33:57.349 --> 00:34:02.119
So what I want to do now, now that you guys kind
of have an overview of what's going on here.

00:34:02.119 --> 00:34:07.469
I want to see if I can tweak this application
just a little bit to kind of change the colors.

00:34:07.470 --> 00:34:11.880
So I tried to whip up a little style sheet
last night, so lets see how this goes.

00:34:11.880 --> 00:34:17.019
So here's the application, I can just double click
it to launch it like a normal Cocoa application.

00:34:17.019 --> 00:34:21.659
But what I could do in this case is, say there's a few of
the images that we don't like, something's that we want

00:34:21.659 --> 00:34:28.679
to tweak, I can pass this onto a designer like Keith or
some other web developer and they can just go in here

00:34:28.679 --> 00:34:36.069
with package content and everything that they need is
right here in this HTML directory in the resources.

00:34:36.070 --> 00:34:41.130
So these are all the resources necessary for the
application, for all the different web views.

00:34:41.130 --> 00:34:45.289
You can see that there's a style
sheet here for the company web view,

00:34:45.289 --> 00:34:48.809
which is each of the little buckets in the NS grid.

00:34:48.809 --> 00:34:55.090
There is a few other style sheets for the graph
and another one for the stock services as a whole.

00:34:55.090 --> 00:35:03.850
So as I said I kinds put something together ahead of
time, so let's see if I do a little renaming here.

00:35:03.849 --> 00:35:10.759
So I'm just going to, I'm basically, what I'm doing here
is that any of your users could make there own style sheets

00:35:10.760 --> 00:35:13.040
and just inject this into your application.

00:35:13.039 --> 00:35:17.179
And one of the great things that you
get when you do something like that is

00:35:17.179 --> 00:35:19.759
that you get basically get an instant community.

00:35:19.760 --> 00:35:25.650
As soon as you get a few people kind
of linked around your application.

00:35:25.650 --> 00:35:31.170
So here's, now you can see all the top is
green, there's less images involved here,

00:35:31.170 --> 00:35:35.720
you still get all the sorting and
all that just using text links.

00:35:35.719 --> 00:35:39.539
So as I said I just kind of threw this
style sheet together very quickly here.

00:35:39.539 --> 00:35:46.199
But the idea is that you can go out to your users
and you can say here's kind of a default design,

00:35:46.199 --> 00:35:50.579
now you guys do my work for me and make
all these other designs because people love

00:35:50.579 --> 00:35:54.730
to just share their own interpretations
of things and by using WebKit

00:35:54.730 --> 00:35:58.880
in your application you really, really get to do that.

00:35:58.880 --> 00:36:00.410
So lets go back to slides.

00:36:00.409 --> 00:36:10.210
>> Chandler: So what do we have
going on under the hood here?

00:36:10.210 --> 00:36:13.619
I'm going to do yet another list of all the technologies.

00:36:13.619 --> 00:36:19.409
One of the great things about building applications using
WebKit is that since the web views alone use a number

00:36:19.409 --> 00:36:24.009
of technologies, you can make these incredibly
impressive lists of all the things you know.

00:36:24.010 --> 00:36:33.890
So this application is using AJAX, we got XHTML for the
view, CSS to make things look pretty, some JavaScript.

00:36:33.889 --> 00:36:40.409
In this particular case the JavaScript is being
used to make the call using AJAX to get the data,

00:36:40.409 --> 00:36:44.190
its being used to draw the graph
along side the Dojo charting.

00:36:44.190 --> 00:36:49.599
library, which is fantastic, its also being used for
some of the little widgets, so when you click on one

00:36:49.599 --> 00:36:54.989
of those buckets in the NS collection view, its
JavaScripted pumping that up into the application

00:36:54.989 --> 00:36:56.809
and then bringing it back into Core Data.

00:36:56.809 --> 00:36:59.250
Lets see what else?

00:36:59.250 --> 00:37:07.820
We also have as I mentioned, using SVG and Dojo.fx,
all of the graph there is all done in SVG.

00:37:07.820 --> 00:37:15.130
And then again XML making AJAX request pulls
up an XML format off of any server on the web

00:37:15.130 --> 00:37:19.410
and then that's parsed and that
data is pushed into Core Data.

00:37:19.409 --> 00:37:25.649
Core Data as Toby mentioned is basically a database
that you have running on your machine all the time.

00:37:25.650 --> 00:37:31.490
And its fairly straight forward especially for those of
you that know SQL or SQLite, you can just stick your data

00:37:31.489 --> 00:37:37.750
in there and it will go around with you and then
finally the NSCollectionView, which is just fantastic

00:37:37.750 --> 00:37:42.739
because you get all those great little
animations right out of the box.

00:37:42.739 --> 00:37:44.629
And then we have bindings.

00:37:44.630 --> 00:37:50.630
Bindings are used to connect some of the
NS ray controllers into NSCollectionView

00:37:50.630 --> 00:37:55.340
so that we just get the layout just
kind of comes out so it's really great

00:37:55.340 --> 00:38:01.400
when you add a new company everything
just kind of sorts and falls into place.

00:38:01.400 --> 00:38:06.720
So again here is what we started with,
this is jut kind of AppKit out of the box.

00:38:06.719 --> 00:38:10.699
One of the great things about using Core
Data is that there's a prototyping tool

00:38:10.699 --> 00:38:15.839
where you can just drag your models in to Interface
Builder and it will just pump out a simple interface.

00:38:15.840 --> 00:38:21.110
So when I was developing this I used that
and just kind of moved things around a bit

00:38:21.110 --> 00:38:25.940
so that I could get this column view,
it's a little bit easier to look at.

00:38:25.940 --> 00:38:32.220
And then here's the application without any CSS at
all, so as you can see it's not much to look at.

00:38:32.219 --> 00:38:38.439
Kind of difficult to see what's going on, you
can, those of you are web developers might notice

00:38:38.440 --> 00:38:44.659
that there's some unordered list because all the mark
up is symantec even though no one will ever see it.

00:38:44.659 --> 00:38:48.869
And then what we wanted to do is we wanted to
go ahead and try to make this pretty with CSS.

00:38:48.869 --> 00:38:54.589
So here's just a little snippet of some of
the vary straight forward CSS that we used

00:38:54.590 --> 00:38:57.860
to start to kind of massage things into place.

00:38:57.860 --> 00:39:03.079
And then here is an older view of the same application.

00:39:03.079 --> 00:39:06.769
Again all designed just using XHTML and CSS.

00:39:06.769 --> 00:39:14.079
So what I am going to do right now is
give a little WebKit 101 for those of you

00:39:14.079 --> 00:39:16.949
that have used WebKit, this will
be a little bit of a review.

00:39:16.949 --> 00:39:21.299
But hopefully there's a lot of you out
there who haven't made the leap quite yet,

00:39:21.300 --> 00:39:23.000
you've seen some of the applications this week

00:39:23.000 --> 00:39:27.250
and you're really wondering how you can kind
of bring this into your own application.

00:39:27.250 --> 00:39:32.099
And what I am going to do is go over some of the
technologies here in slides and then do another demo to kind

00:39:32.099 --> 00:39:35.319
of do it live so you can see how it really works out.

00:39:35.320 --> 00:39:42.269
So the great thing about WebKit is as many of you might
know, you can make a web browser using one line of code.

00:39:42.269 --> 00:39:47.599
So here's the one line that you need.

00:39:47.599 --> 00:39:54.619
Every web view has a mainframe element and you
just load a request using the NSURLRequest

00:39:54.619 --> 00:39:58.489
and in this particular case I'm just loading apple.com.

00:39:58.489 --> 00:40:03.549
This can also be a local file on the file system
which we, what we've done for the application.

00:40:03.550 --> 00:40:09.780
Well this is all you need to load a particular request
so with this single line of code and just a few minutes

00:40:09.780 --> 00:40:13.150
in Interface Builder and Xcode
you could make an application

00:40:13.150 --> 00:40:16.670
that a user could launch and it
will only load a single web page.

00:40:16.670 --> 00:40:21.909
I've seen a couple of these for Google mail, so you
can just double click and it goes right to Google mail

00:40:21.909 --> 00:40:26.549
and you have Google mail on your own window so you
don't accidentally close it or anything like that.

00:40:26.550 --> 00:40:32.420
There very basic applications but there
actually really, really fantastic.

00:40:32.420 --> 00:40:36.769
So here is a little bit of an expansion
with the famous one line of code browser.

00:40:36.769 --> 00:40:43.250
After adding an NSTextField to your window
you can see I've replaced the URLWithString,

00:40:43.250 --> 00:40:51.489
which is getting the string value from an NSTextField,
which again is just a simple message there.

00:40:51.489 --> 00:40:57.159
So one thing to keep in mind when you are building
these applications is if you have your own HTML,

00:40:57.159 --> 00:41:02.039
you want to bring along with the app, it's very
simple if you need to connect to an external resource.

00:41:02.039 --> 00:41:07.989
But in this case we have our HTML, we have
our CSS, we have the whole Dojo library,

00:41:07.989 --> 00:41:11.049
all of the images and SVG that we are using.

00:41:11.050 --> 00:41:16.280
So something you have to do is kind of wrestle
with Xcode to get it to bring those things along.

00:41:16.280 --> 00:41:24.580
Some of you might have noticed that in Xcode it's not
difficult but it's non trivial to get a directory structure

00:41:24.579 --> 00:41:28.420
of assets to be preserved inside of your resources folder.

00:41:28.420 --> 00:41:33.440
Normally that is not such a big deal for
application development but when you're using a website,

00:41:33.440 --> 00:41:38.820
Since many of us web developers, cause
I also sit on both sides of that fence,

00:41:38.820 --> 00:41:41.760
we use very, very strict directory structures.

00:41:41.760 --> 00:41:47.440
You know, we will have a JavaScript library and
everything has to be in its place and you know we

00:41:47.440 --> 00:41:52.889
like to put our images in one folder and the CSS in
another and everyone has a different way of doing it

00:41:52.889 --> 00:41:55.359
but we're all fairly, fairly strict about it.

00:41:55.360 --> 00:42:02.950
And so one nice thing that you can do is use the Run Script
build phase in Xcode to just copy your whole HTML directory

00:42:02.949 --> 00:42:07.230
into the resources and then just
refer to that from then on out.

00:42:07.230 --> 00:42:12.199
And the nice thing there is that you can actually
have another developer, develop the site using just

00:42:12.199 --> 00:42:16.750
that directory, they can get everything working while
you're working on the application and then just swap

00:42:16.750 --> 00:42:19.429
out the assets and everything just works.

00:42:19.429 --> 00:42:22.529
So here a little sample code as well.

00:42:22.530 --> 00:42:30.610
This is just a simple bash script at the top that uses some
of the built in constants to find out where you project is

00:42:30.610 --> 00:42:35.240
and to first remove the HTML directory
and then just copy the new on in.

00:42:35.239 --> 00:42:41.529
It's kind of a scorched earth approach
but its fairly fast and does the job.

00:42:41.530 --> 00:42:48.740
Next we have how to load a file from the bundle so as I
said, since you , in this case are outing everything into

00:42:48.739 --> 00:42:56.719
and HTML directory, when you load something from the bundle
what you need to do is just use the NSbundle mainBundle

00:42:56.719 --> 00:43:05.009
to get a fix on the applications bundle and then get the
resourcePath on that bundle to get the directory back.

00:43:05.010 --> 00:43:10.800
And here I am using pathWithComponents
to concatenate the HTML directory

00:43:10.800 --> 00:43:14.570
on to the end of the resource path of the bundle.

00:43:14.570 --> 00:43:19.890
And then finally I am going to use
NSbundles pathForResource oftype

00:43:19.889 --> 00:43:24.869
inDirectory method to get the index HTML file for that.

00:43:24.869 --> 00:43:31.889
Now you might see that I could of just used NSStrings
pathWithComponents, I could of just added another member

00:43:31.889 --> 00:43:36.960
to the array there and out index.html on the end
and it would of just slammed it all together.

00:43:36.960 --> 00:43:41.699
But the nice thing about using the pathForResource
method is that it makes sure that it's valid.

00:43:41.699 --> 00:43:46.329
So in this particular case I have taken out
the error checking for the sake of brevity.

00:43:46.329 --> 00:43:51.159
But you might get the full path back
as null if the resource isn't there,

00:43:51.159 --> 00:43:54.259
and so that gives you just a little
bit more error checking especially

00:43:54.260 --> 00:43:57.290
if you intend your application
to be something that's skinnable.

00:43:57.289 --> 00:44:04.059
If you send it out into the world and some of your users
maybe misnames the index HTML or accidentally deletes it

00:44:04.059 --> 00:44:08.239
or something like that, this would be the point in
your application where you can rescue from such a thing

00:44:08.239 --> 00:44:15.849
and either auto generate a new index HTML or give the user
some sort of indication that something gone terribly wrong.

00:44:15.849 --> 00:44:19.279
And then finally just how to load the file there.

00:44:19.280 --> 00:44:25.510
So let me see if I can make a web
browser here in just a couple of minutes.

00:44:25.510 --> 00:44:33.130
( Pause in speaking. )

00:44:33.130 --> 00:44:38.960
>> Chandler: So I've already got my web code project
here, this is just an application here called oneliner.

00:44:38.960 --> 00:44:42.880
And I am going to go through the motions
of just making a one line web browser.

00:44:42.880 --> 00:44:48.539
So I am going to go into frameworks, so the first thing
that's important to do is you need to add the framework.

00:44:48.539 --> 00:44:55.139
So I am going to go to project, add to project, and
we need to add the WebKit framework to this project.

00:44:55.139 --> 00:44:59.509
So, let me see if I can find this here.

00:44:59.510 --> 00:45:05.850
( Pause in speaking. )

00:45:05.849 --> 00:45:14.190
>> Chandler: Alright, so I got my WebKit framework
in there and then in my classes directory,

00:45:14.190 --> 00:45:20.429
I need to make a new file here, so I am just going
to make a new objective C class and this is going

00:45:20.429 --> 00:45:22.779
to be the controller for the application.

00:45:22.780 --> 00:45:35.070
So now I've got my controller here, so then just for sake

00:45:35.070 --> 00:45:42.309
of making sure I am just going to
go ahead and put WebKit in here.

00:45:42.309 --> 00:45:45.329
I think I need the (inaudible) case.

00:45:45.329 --> 00:45:49.869
So now I am importing WebKit into my
controller so I've got that part settled.

00:45:49.869 --> 00:45:55.339
And let's open the nib here
in interface builder, if we can.

00:45:55.340 --> 00:46:00.880
Alright, so here is my window,
let me get this out of the way.

00:46:00.880 --> 00:46:07.110
So here's my window and I am just going to
use the new library to look for the web view.

00:46:07.110 --> 00:46:12.559
Pull this out a little.

00:46:17.090 --> 00:46:30.030
And then I'm going to want in this
text field here for the URL field.

00:46:30.030 --> 00:46:40.510
Now let's get this size inspector here so he
can get some springs involved with everything.

00:46:40.510 --> 00:46:49.160
For those of you that are web developers,
this might seem like magic, I hope.

00:46:50.280 --> 00:47:05.330
Alright, and then let's, get an NS object here so in IB3 the
way to get a particular instance of one of your objects is

00:47:05.329 --> 00:47:11.710
to drag out an NS object and then change
the class, so it should auto fill.

00:47:11.710 --> 00:47:16.740
Its syncing with Xcode to find the class so now
I've got my controller and I am going to go ahead

00:47:16.739 --> 00:47:29.099
and add an action here, lets call it load URL
and I am going to add a couple of outlets.

00:47:29.099 --> 00:47:40.460
One is going to be for the web view, and
one is going to be for the location.

00:47:40.460 --> 00:47:48.820
So now I've got these in place and I want
to add those again to my header here,

00:47:48.820 --> 00:47:54.010
so I am going to see if this will work.

00:47:54.010 --> 00:48:01.740
I'm lazy, so I am just going to try to drag these over
here, it's a very sexy new feature of Interface Builder

00:48:01.739 --> 00:48:07.349
and it should work just fine for that as well.

00:48:07.349 --> 00:48:10.389
And so now I can switch back.

00:48:13.559 --> 00:48:19.250
>> Chandler: Into my class here, so I am back
into the M file and I got this load URL action,

00:48:19.250 --> 00:48:25.110
so now that everything is kind of in place,
let's do the final steps in Interface Builder.

00:48:25.110 --> 00:48:33.740
I'm going to control drag connect to that
to load URL connect this to the web view

00:48:33.739 --> 00:48:38.579
and just for fun connect that to the location.

00:48:38.579 --> 00:48:43.799
So now let's do the one line web browser.

00:48:45.480 --> 00:48:48.309
So I am going to get the web views mainframe.

00:48:48.309 --> 00:48:51.610
I haven't said that in a while.

00:48:54.869 --> 00:49:02.299
And I am going to get the NSURL request.

00:49:02.300 --> 00:49:06.280
Lets see request with URL.

00:49:08.969 --> 00:49:27.519
So let's go to, actually let's go ahead and do this.

00:49:32.280 --> 00:49:39.519
So now I just grab the value coming directly out
of the sender in this case I got all those paired.

00:49:39.519 --> 00:49:44.480
Well let's see what happens.

00:49:45.559 --> 00:49:54.219
Nope I think I have an extra bracket.

00:50:02.309 --> 00:50:03.509
Sorry everyone.

00:50:03.510 --> 00:50:14.200
( Pause in speaking. )

00:50:14.199 --> 00:50:15.699
>> Chandler: Far left.

00:50:19.170 --> 00:50:22.639
Well that's not working out.

00:50:24.039 --> 00:50:26.269
Oh there we go.

00:50:26.269 --> 00:50:26.690
Thank you.

00:50:26.690 --> 00:50:28.510
Sorry about that.

00:50:28.510 --> 00:50:38.040
( Pause in speaking. )

00:50:38.039 --> 00:50:40.980
>> Chandler: And there we have a web browser.

00:50:40.980 --> 00:50:45.039
So now this is just a normal web browser,
any URL that you type here up at the top,

00:50:45.039 --> 00:50:48.759
as soon as you hit enter is going to take you there.

00:50:48.760 --> 00:51:00.100
So we can see you don't get any of the
bells and whistles like loaders but things

00:51:00.099 --> 00:51:02.599
like Flash and all of your plug-ins work.

00:51:02.599 --> 00:51:07.460
So as you can see it fairly simple
to make a very quick web browser.

00:51:07.460 --> 00:51:11.510
So can I go back to slides please?

00:51:11.510 --> 00:51:17.240
( Applause )

00:51:17.239 --> 00:51:22.429
Chandler: Okay so now that we have the web browser out
of the way, let's talk a little bit about how to get

00:51:22.429 --> 00:51:25.019
JavaScript and Cocoa to communicate with one another.

00:51:25.019 --> 00:51:30.630
So in an application like the stock viewer you need to
be able to have some kind of connection between the two

00:51:30.630 --> 00:51:35.559
When you bring an event in through AJAX or something like
that in a web view you need to be able to throw that up

00:51:35.559 --> 00:51:42.679
to your application to go into another view, could be
a table view or to go into something like core date.

00:51:42.679 --> 00:51:51.139
So first I am going to talk about going from JavaScript
in Cocoa so once you have the web view in place you need

00:51:51.139 --> 00:51:55.869
to do a few things just to make sure you've
got a hold of the right bits you need.

00:51:55.869 --> 00:52:01.389
So right here I'm just creating inside
of a controller class in this instance.

00:52:01.389 --> 00:52:07.460
In my init method I am just making a new web view,
just from code without using an Interface Builder.

00:52:07.460 --> 00:52:12.079
And then in the awakeFromNib I'm going
to set the frame load delegate to self.

00:52:12.079 --> 00:52:18.690
Now what that's going to mean is that when ever
a new document loads that this controller is set

00:52:18.690 --> 00:52:21.130
up as the delegate so it will receive all the events.

00:52:21.130 --> 00:52:27.289
And then I am going to just go ahead and use
the loadHTMLString with baseURL method

00:52:27.289 --> 00:52:29.969
and I am just going to load in an empty stream.

00:52:29.969 --> 00:52:36.659
So one great thing here is that if you could put any HTML
you want, you can actually hard code some of the HTML

00:52:36.659 --> 00:52:40.739
into your application and keep that
out of the prying hands of your users.

00:52:40.739 --> 00:52:46.949
So you can kind of split the difference here if you want
to make sure that some of the things here are pristine.

00:52:46.949 --> 00:52:53.210
And then finally you need to be prepared to
answer when the WebScriptObject is available.

00:52:53.210 --> 00:52:58.110
So when a page is loaded the WebScriptObject
which is the way you can communicate

00:52:58.110 --> 00:53:01.710
to the JavaScript engine isn't immediately available.

00:53:01.710 --> 00:53:08.449
So once the page is loaded this delegate method is called
and you can make an ivar in this case the WSO ivar,

00:53:08.449 --> 00:53:14.369
to hold onto reference to this window script.

00:53:14.369 --> 00:53:21.029
Now once you have that object you can start
making your calls, so there are three main ways

00:53:21.030 --> 00:53:26.170
that you can make JavaScript calls from
Cocoa to make JavaScript do what you want.

00:53:26.170 --> 00:53:30.849
So the first tier is just using callWebScriptMethod
with arguments,

00:53:30.849 --> 00:53:37.210
so the WebScript method here is called the helloJS, so this
would just be a normal JavaScript function in the document

00:53:37.210 --> 00:53:41.760
that you loaded and then you can pass in a
number of arguments in an NSArray,

00:53:41.760 --> 00:53:46.910
so in this case I am passing a single
argument which is Cocoa calling JavaScript.

00:53:46.909 --> 00:53:55.460
So once this is called that method, the helloJS function
inside JavaScript is called and passed this argument.

00:53:55.460 --> 00:54:00.990
Another thing you can do is just directly set
values using KVO inside of your JavaScript.

00:54:00.989 --> 00:54:07.069
So here I am just setting a variable called jsVariable
and giving it a value of new value inside of my WebKit.

00:54:07.070 --> 00:54:14.000
So you can very simply pass variable values
back and forth between Cocoa and JavaScript.

00:54:14.000 --> 00:54:18.860
And then here we have a way that you can
evaluate JavaScript and return the result.

00:54:18.860 --> 00:54:23.950
So since I come from the web world and I
like, I'm used to things like math random

00:54:23.949 --> 00:54:27.049
and these quick JavaScript ways to do certain things.

00:54:27.050 --> 00:54:32.630
Right here I am just using evaluateWebScript to just
call math.random to get a random number between zero

00:54:32.630 --> 00:54:38.079
and 100 just one line and it will stick the result
into my variable there and I am ready to go.

00:54:38.079 --> 00:54:45.500
Now of course this uses an eval similar to the JavaScript
eval and whenever you do that you have to be careful

00:54:45.500 --> 00:54:49.230
to keep your quotes straight and
all your commas in the right place

00:54:49.230 --> 00:54:54.429
because it's a little bit less rigid way to do things.

00:54:54.429 --> 00:55:01.149
So now we know how to go from Cocoa to JavaScript and
going back the other way is fairly simple as well.

00:55:01.150 --> 00:55:03.519
Again, there's some things you need to set up first.

00:55:03.519 --> 00:55:08.719
The first thing is you can see I'm using my
script object here and I'm going to set a value,

00:55:08.719 --> 00:55:14.629
in this case called controller, which will make a
variable in JavaScript that references your controller.

00:55:14.630 --> 00:55:19.190
So again, similar is grabbing this WSO
object in the first place to give you a hook

00:55:19.190 --> 00:55:22.380
into the JavaScript engine, this is the inverse move.

00:55:22.380 --> 00:55:28.170
So this way you could go from JavaScript
and you could call out to the Cocoa class.

00:55:28.170 --> 00:55:33.980
The next thing you need to do is allow access to
some or all of the selectors in the Cocoa class.

00:55:33.980 --> 00:55:40.139
Out of the box all of your selectors are
protected so you can't call them from JavaScript.

00:55:40.139 --> 00:55:44.539
So if some of you have poked around with
this but not too much and just got frustrated

00:55:44.539 --> 00:55:47.920
because nothing wasn't working,
this was probably the culprit.

00:55:47.920 --> 00:55:54.320
If this is, again, a scorched earth approach that will
allow JavaScript to access any selector in your class,

00:55:54.320 --> 00:55:59.980
but you can tweak this and you can have some
conditionals in here that only allow certain selectors.

00:55:59.980 --> 00:56:08.639
Again, make notice that this method is selector excluded
from WebScript and if you return NO it's not excluded.

00:56:08.639 --> 00:56:10.679
That always seemed a little bit backwards to me.

00:56:10.679 --> 00:56:14.599
So you have to return NO to mean
that it's okay to call these methods.

00:56:14.599 --> 00:56:19.460
And then finally we have allow
access to some or all properties

00:56:19.460 --> 00:56:23.559
in the Cocoa class using the isKeyExcludedFromWebScript.

00:56:23.559 --> 00:56:27.279
This is basically the cousin of
isSelectorExcludedFromWebScript

00:56:27.280 --> 00:56:32.910
which allows the JavaScript engine
access to certain keys in your class.

00:56:32.909 --> 00:56:39.170
Now there's a few things to keep in mind when
you're going to call from JavaScript to Cocoa.

00:56:39.170 --> 00:56:44.430
Since Cocoa is obviously, or object C is a
severely different language than JavaScript,

00:56:44.429 --> 00:56:47.210
there's a few naming conventions you have to keep in mind.

00:56:47.210 --> 00:56:55.010
Most importantly is any colons in a method in objective
C in Cocoa need to be replaced with underscores.

00:56:55.010 --> 00:57:01.020
And this is incredibly important when you're using a method
that only has a single argument you need to make sure

00:57:01.019 --> 00:57:04.579
to have that trailing underscore on the end.

00:57:04.579 --> 00:57:08.929
And then you also just use the reference to
the Cocoa object that we made a moment ago.

00:57:08.929 --> 00:57:15.250
So what I'm going to do here is you can see a simple
Cocoa method that I just pulled out of the stock here

00:57:15.250 --> 00:57:21.909
the didLoadValue forSymbol and company and I'll show
you how to translate that into the JavaScript equivalent.

00:57:21.909 --> 00:57:26.179
So when this is moved into JavaScript you see
the first thing I have there is the controller,

00:57:26.179 --> 00:57:30.279
that variable I set up using KDO that refers to my class.

00:57:30.280 --> 00:57:38.810
And then the .operator and then the didLoadValue_for
Symbol_andCompany using underscores in place of the colons.

00:57:38.809 --> 00:57:45.389
Now again, here is a Cocoa method that takes
a single argument, just a setName method,

00:57:45.389 --> 00:57:52.069
which in the JavaScript becomes setName_
to replace every colon with an underscore.

00:57:52.070 --> 00:58:00.320
And then finally just a simple instance where there
are no arguments, it's just the method name itself.

00:58:00.320 --> 00:58:05.720
So here's kind of an overview of all of that.

00:58:05.719 --> 00:58:06.549
Let's keep going.

00:58:06.550 --> 00:58:09.240
So you can make better method names.

00:58:09.239 --> 00:58:13.959
So, this is especially important when you're
actually working with a JavaScript

00:58:13.960 --> 00:58:17.289
or an HTML developer to do more sophisticated things.

00:58:17.289 --> 00:58:21.279
You know, this gives you kind of an
easy way to make a light protocol,

00:58:21.280 --> 00:58:25.050
to make some contracts with this
developer that you're working with.

00:58:25.050 --> 00:58:32.140
Some number of JavaScript developers have never seen Cocoa,
have no idea what objective C is, and so when you say yeah,

00:58:32.139 --> 00:58:35.349
you have to have a trailing underscore
on the method, sorry about that,

00:58:35.349 --> 00:58:38.400
they'll get a little bit upset with
you, or just be kind of confused.

00:58:38.400 --> 00:58:44.019
So what you can do is you can use the webScriptName
ForSelector method to set up some conditionals,

00:58:44.019 --> 00:58:48.509
testing against the selector, and then
return a more JavaScript friendly name.

00:58:48.510 --> 00:58:55.200
so in this particular case, I'm testing for the
didLoadValueForSymbolAndCompany selector.

00:58:55.199 --> 00:59:01.819
And I'm just going to return a more JavaScript friendly
camel case sort of format without the underscores.

00:59:01.820 --> 00:59:10.000
And then again, the same thing for the setName selector.

00:59:10.000 --> 00:59:14.050
I'm just going to return it without the trailing underscore.

00:59:14.050 --> 00:59:17.510
So the JavaScript becomes a little bit cleaner.

00:59:17.510 --> 00:59:22.430
So another thing to keep in mind is how
things are serialized as you move between it.

00:59:22.429 --> 00:59:26.849
The engine is pretty phenomenal in
the way that things get mixed up.

00:59:26.849 --> 00:59:32.690
So JavaScript numbers are converted to NSNumber
objects, or basic data types, like int and float,

00:59:32.690 --> 00:59:37.119
strings are converted to NSString,
and all this is just for free.

00:59:37.119 --> 00:59:39.099
And this is all from the documentation.

00:59:39.099 --> 00:59:43.099
The JavaScript arrays are mapped to NSArray objects.

00:59:43.099 --> 00:59:50.679
Kind of. So more often than not your JavaScript arrays are
actually going to show up as WebScript objects in Cocoa,

00:59:50.679 --> 00:59:55.349
which means that you need to use KVC
methods to get out values from that.

00:59:55.349 --> 01:00:00.559
This is particularly true, in my experience, when
you use a JavaScript library such as Prototype,

01:00:00.559 --> 01:00:04.769
which messes around quite a bit with the
built in JavaScript array prototypes.

01:00:04.769 --> 01:00:09.110
It adds other methods and things, and
I think in those particular cases,

01:00:09.110 --> 01:00:11.849
you're more often than not going
to come up with a WebScript object.

01:00:11.849 --> 01:00:17.799
You can use the simple KVC methods, WebScriptValueAtIndex,
which will treat it like an array.

01:00:17.800 --> 01:00:20.610
And there's really no difference otherwise.

01:00:20.610 --> 01:00:27.059
Other JavaScript objects are actually wrapped as
WebScriptObject instances, which you can use KDO to access.

01:00:27.059 --> 01:00:33.559
Going the other way, from Cocoa to JavaScript,
again, NSNumbers are turned into JavaScript numbers.

01:00:33.559 --> 01:00:36.320
NSStrings become JavaScript strings.

01:00:36.320 --> 01:00:41.660
NSArray objects are mapped to special read-only arrays
in JavaScript, you need to make a copy of the array

01:00:41.659 --> 01:00:44.649
if you want to play with it inside the JavaScript.

01:00:44.650 --> 01:00:47.490
And nulls converted to JavaScript nulls

01:00:47.489 --> 01:00:51.299
The Cocoa web undefined type is converted to undefined.

01:00:51.300 --> 01:00:55.590
And all WebScriptObject instances are
unwrapped for the scripting environment.

01:00:55.590 --> 01:01:05.480
Also, the NSDictionary is not
serialized in a usable format.

01:01:05.480 --> 01:01:09.929
It comes in as a type that is very difficult to access.

01:01:09.929 --> 01:01:15.980
So I typically suggest using NSArray instead
and making some nice JavaScript helper methods

01:01:15.980 --> 01:01:20.150
so that you can know the index of
the property that you want to access.

01:01:20.150 --> 01:01:25.010
So just to kind of start an overview, some
different options for Using webView as Toby

01:01:25.010 --> 01:01:29.360
and Keith have mentioned we've made an
entire application that's just a web view.

01:01:29.360 --> 01:01:34.650
We can take a website that we've built, throw it inside of
this application and you get something you can kind of carry

01:01:34.650 --> 01:01:37.329
around on your laptop and show to your clients.

01:01:37.329 --> 01:01:43.900
This is also great for use of things Dojo Offline and
Google Gears, so that you can do a pure JavaScript technique

01:01:43.900 --> 01:01:46.170
for storing things on the user's computer.

01:01:46.170 --> 01:01:50.430
You can also use a web view alongside
of other AppKit views.

01:01:50.429 --> 01:01:55.829
In the example I showed, there is an NSCollection
view, but it uses WebKit views inside of it,

01:01:55.829 --> 01:01:59.259
which is somewhat confusing, but you
can have your WebKit view right up there

01:01:59.260 --> 01:02:02.870
with an NSTable or any of the other AppKit views.

01:02:02.869 --> 01:02:07.029
Another option, as I showed with the NSCollection
view, is to use it inside.

01:02:07.030 --> 01:02:12.750
So any time that there is a cell you can just throw a
web view in there and get a little bit finer control.

01:02:12.750 --> 01:02:19.800
And finally you can also use multiple WebViews, one for
service consumption and status, one for displaying things,

01:02:19.800 --> 01:02:24.150
or just using them in different ways to
kind of leverage the power of your users.

01:02:24.150 --> 01:02:30.940
And also, it gives you an alternative to drawing inside
of custom NSViews, by using WebView and Canvas.

01:02:30.940 --> 01:02:37.119
So you can throw a web view in there just to use
JavaScript so that you can draw inside of it.

01:02:37.119 --> 01:02:39.789
A lot of developers are familiar
with drawing inside of Canvas,

01:02:39.789 --> 01:02:44.259
but not so much how to draw using the NSView methods.

01:02:44.260 --> 01:02:50.680
So again, the most obvious reasons to use WebKit
are to consume resources, to get cheaper designers,

01:02:50.679 --> 01:02:58.819
which is always good, use XHTML web services, images,
videos, rich media, easy drawing using Canvas and SVG,

01:02:58.820 --> 01:03:06.470
and you can also, as Toby mentioned, modify resources with
user registration, activating serials, support requests,

01:03:06.469 --> 01:03:13.679
updating resources internally in the app,
and also, of course, templates and skinning.

01:03:13.679 --> 01:03:15.549
So that does it for me.

01:03:15.550 --> 01:03:16.890
There's one more thing.

01:03:16.889 --> 01:03:21.809
George is going to come back up here and
kind of take you through a few more points.

01:03:21.809 --> 01:03:23.909
So, thank you very much.

01:03:25.510 --> 01:03:29.380
( Applause )

01:03:29.380 --> 01:03:29.619
>> George: Okay.

01:03:29.619 --> 01:03:35.069
Given the time frame right now, we're about twelve
minutes left, show of hands, how many of you have been

01:03:35.070 --> 01:03:39.309
to the iPhone developing websites for
iPhones session or seen the rebroadcast?

01:03:39.309 --> 01:03:40.650
Practically the entire room.

01:03:40.650 --> 01:03:42.250
Great. So let me just get quick through these.

01:03:42.250 --> 01:03:45.489
I'm going to talk about this, I want to open up
the floor for Q and A, and then we have a lab later

01:03:45.489 --> 01:03:50.919
on where you'll be able to meet the Barbarian
Group and talk to the WebKit development team,

01:03:50.920 --> 01:03:52.860
as well as the QuickTime Development Team.

01:03:52.860 --> 01:03:58.780
So as you've seen in the previous sessions,
live or prerecorded, good design practices.

01:03:58.780 --> 01:04:00.780
Be sure to ensure you're using column layouts.

01:04:00.780 --> 01:04:01.130
Using divs.

01:04:01.130 --> 01:04:05.849
If you haven't read up on the Swiss Grid
system, I highly encourage you to pick up some

01:04:05.849 --> 01:04:08.949
of those graphics design novels, it'll
help influence a lot of your web design.

01:04:08.949 --> 01:04:12.279
Size does matter in terms of the assets.

01:04:12.280 --> 01:04:13.019
Media queries.

01:04:13.019 --> 01:04:19.039
Be sure you're reading up on the latest CSS3 implementation
as it relates to both WebKit as well as the W3C

01:04:19.039 --> 01:04:24.539
in handling media queries for resolution
independence, optimizing for iPhone.

01:04:24.539 --> 01:04:26.110
Key things you want to remember.

01:04:26.110 --> 01:04:26.990
Dealing with the view port.

01:04:26.989 --> 01:04:30.359
How large is the actual view port
of your content on any given page.

01:04:30.360 --> 01:04:35.070
That will help the rendering time as the iPhone sort
of designates how to zoom in and zoom out of content.

01:04:35.070 --> 01:04:37.000
Dealing with the double tap.

01:04:37.000 --> 01:04:40.909
Dealing with the two fingers and how you
actually interact with the actual device.

01:04:40.909 --> 01:04:42.359
Text size adjustment.

01:04:42.360 --> 01:04:44.440
That also is based on how big your viewport is.

01:04:44.440 --> 01:04:50.309
Remember, keeping things somewhat contained and not
having things flow across the width of the page.

01:04:50.309 --> 01:04:55.719
Events. Reading up on what the exact JavaScript
DOM events are that the iPhone does support.

01:04:55.719 --> 01:05:02.719
Again we'll be releasing more information probably
sometime at the end of this day around the information

01:05:02.719 --> 01:05:04.889
that you saw previously in your previous sessions.

01:05:04.889 --> 01:05:05.859
And in media.

01:05:05.860 --> 01:05:12.099
Being sure that you encode your media properly using
H.264 baseline profile and have it properly optimized

01:05:12.099 --> 01:05:16.130
for both the Edge network as well as
the WiFi network user reference movies.

01:05:16.130 --> 01:05:19.250
So with that, I'm just going to you
click through the more information.

01:05:19.250 --> 01:05:24.059
If you have specific questions either relating to the
hybrid session you just saw, to iPhone development

01:05:24.059 --> 01:05:27.559
or anything related to web development here at
Apple, in general, please contact Mark Malone.

01:05:27.559 --> 01:05:32.480
He's a World Wide Developer relations
manager and evangelist.

01:05:32.480 --> 01:05:36.360
Anything related to media as it relates
to iPhone or it might be integrated media

01:05:36.360 --> 01:05:44.349
within a hybrid WebKit Cocoa implementation of
your application, please contact Allan Shaffer.

01:05:44.349 --> 01:05:49.480
And then lastly, today we have some interesting sessions.

01:05:49.480 --> 01:05:51.300
Please be sure to check them out if you have time.

01:05:51.300 --> 01:05:55.280
We've got a Developing a Rich Media
WebKit Based Application in Presidio.

01:05:55.280 --> 01:05:59.450
That's going to cover in-depth, the
rich media uses of SVG, QuickTime,

01:05:59.449 --> 01:06:03.149
which are all applicable to the
hybrid app session you just saw.

01:06:03.150 --> 01:06:08.300
As well as later on this evening we're going to have
the founder of, one of the key founders of 37 Signals,
7

01:06:08.300 --> 01:06:12.680
as well as the development lead and creator of Prototype,

01:06:12.679 --> 01:06:17.029
Sam Stevenson will be on Russian Hill
talking about the Prototype Framework.

01:06:17.030 --> 01:06:22.550
We also have a lab dealing specifically
for Hybrid-WebKit/Cocoa Applications.

01:06:22.550 --> 01:06:27.640
If your question was not able to be answerer in the last 90
minutes, please take all your questions out to the hallway,

01:06:27.639 --> 01:06:30.980
because do have to clear out the room to make
room for the next session that's coming in.

01:06:30.980 --> 01:06:32.780
but also, please come to the lab.

01:06:32.780 --> 01:06:37.250
The lab starts at 2 p.m. in the graphics and
media lab, downstairs on the first floor.