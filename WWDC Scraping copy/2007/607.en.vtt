WEBVTT

00:00:20.300 --> 00:00:25.519
>> Jason: Hi, my name's Jason Fields, I'm Product
Evangelist for Emerging Technology for Snap.com,

00:00:25.519 --> 00:00:29.910
a next generation visual search experience
and content distribution network.

00:00:29.910 --> 00:00:34.770
I'd like to first say thanks to George and his
associates at Apple for inviting us here to speak on some

00:00:34.770 --> 00:00:39.690
of the challenges that we faced in regards
to developing a cross platform AJAX app.

00:00:39.689 --> 00:00:51.390
And so most of you probably know about Snap from
our content distribution platform network Snap Shots.

00:00:51.390 --> 00:00:54.070
You've probably seen it on Tech Crunch.

00:00:54.070 --> 00:01:00.159
Many WordPress blogs, many Xanga sites,
Guy Kawasaki's blog, Truemors, etcetera.

00:01:00.159 --> 00:01:05.969
For those of you that are not familiar with the product,
it's a publisher product for bloggers and site owners.

00:01:05.969 --> 00:01:12.310
It's a one line snippet of JavaScript code that you can
add to your page and any hyperlink that you've created

00:01:12.310 --> 00:01:18.900
in your page, if you hover over it, you can see
a preview or more of the destination website.

00:01:19.920 --> 00:01:24.150
So, this is our first release.

00:01:24.150 --> 00:01:27.850
About six months ago we launched a
product line called Snap Preview Anywhere.

00:01:27.849 --> 00:01:33.049
At that time it was just a high
resolution preview of the destination site.

00:01:33.049 --> 00:01:39.509
But at Web 2.0 we've re-launched the product line, calling
it Snap Shots, and utilizing web services and API's,

00:01:39.510 --> 00:01:45.020
we now provide a whole host of other
URL and content types that we recognize.

00:01:45.019 --> 00:01:52.679
This is IMDB, Amazon product, you get product
information, reviews, what the prices is.

00:01:52.680 --> 00:01:54.300
This is our stock ticker.

00:01:54.299 --> 00:01:59.069
We recognize a whole slew of finance
site URLs, stock ticker symbols,

00:01:59.069 --> 00:02:04.109
and provide interactive stock chart, Reuters Stock Feed.

00:02:04.109 --> 00:02:05.739
This is a custom shot, actually.

00:02:05.739 --> 00:02:12.019
There are content providers that might want to provide
additional nuggets of data within the Snap Shots platform,

00:02:12.020 --> 00:02:14.680
and this is our first commercial partnership with Reuters.

00:02:14.680 --> 00:02:20.629
Anyone that links to a financial ticker on
the Reuters news site will get an RSS feed

00:02:20.629 --> 00:02:23.840
of storage relating to that company.

00:02:23.840 --> 00:02:26.110
This is a photo, an example of our photo shot.

00:02:26.110 --> 00:02:30.550
We support PhotoBucket, Flickr and
Picassa, currently, photo streams.

00:02:30.550 --> 00:02:37.680
So anyone that links to any photo stream within a page
can now interact directly with the photos in the bubble.

00:02:37.680 --> 00:02:38.860
Audio Shot.

00:02:38.860 --> 00:02:39.830
This is streaming audio.

00:02:39.830 --> 00:02:44.650
We collect ID3 data and display cover
artwork and title and track information.

00:02:44.650 --> 00:02:50.159
And an example of our Video Shot, which actually
enables you to play a host of video formats.

00:02:50.159 --> 00:02:56.379
YouTube, Google Video, Revver Video,
within the bubble itself, as well.

00:02:56.379 --> 00:02:59.229
So what exactly is Snap Shots?

00:02:59.229 --> 00:03:04.590
Snap Shots is a product that we developed to create a brand

00:03:04.590 --> 00:03:08.490
and viral awareness off Snap.com,
which is our search experience.

00:03:08.490 --> 00:03:10.480
It's actually the opposite of search.

00:03:10.479 --> 00:03:17.799
What it does is it provides relevant nuggets of content
to end users that are browsing the web in general,

00:03:17.800 --> 00:03:23.900
whether it's a website or a blog, and any of the
links that people are creating in these blog posts

00:03:23.900 --> 00:03:30.890
to add support information to their posts, now you can hover
over and see the destination sites or get those nuggets

00:03:30.889 --> 00:03:33.599
of content directly in the Snap Shot itself.

00:03:33.599 --> 00:03:37.620
Our product has experienced exponential growth.

00:03:37.620 --> 00:03:45.930
Within 7 months, we're probably around 13 to 14
million Snap Shot views or impressions per day.

00:03:45.930 --> 00:03:51.750
And we're not on over one million plus publisher sites
and growing at about a rate of 20 percent per month

00:03:51.750 --> 00:03:56.490
as we launch new Snap Shots that we support.

00:03:56.490 --> 00:03:59.350
So what exactly is Snap.com?

00:03:59.349 --> 00:04:04.849
Snap is, I might sound biased because I work there, but
I think it's one of the, it's actually been documented

00:04:04.849 --> 00:04:08.789
in a number of blogs that it's the largest and
fastest growing Web 2.0 search engine currently,

00:04:08.789 --> 00:04:15.049
features some of the most innovative
uses of AJAX and prototype script

00:04:15.050 --> 00:04:20.170
and progressive user interface
design that currently exists online.

00:04:20.170 --> 00:04:25.980
Clearly while we're not beating the big boys of search,
as this chart shows, we are beating many other ones

00:04:25.980 --> 00:04:32.819
and in a very short period of time, noted here, we've
gone from Alexa ranking of 18,000 to 1800.

00:04:34.300 --> 00:04:43.579
So the big question that we get asked, how are we
going to plan to compete with the big boys of search?

00:04:43.579 --> 00:04:52.569
And the answer as inspired by, let's see, there it
is, so these are some still frames of a commercial

00:04:52.569 --> 00:04:56.019
that I'm sure is near and dear to all
of you here at the developer conference.

00:04:56.019 --> 00:04:56.629
It is to me.

00:04:56.629 --> 00:04:58.409
It's one of my favorite directors.

00:04:58.410 --> 00:05:03.500
But these are some still frames of
this video that illustrate our approach

00:05:03.500 --> 00:05:07.930
to this competing in the big search space.

00:05:07.930 --> 00:05:17.250
Utilizing AJAX and web technologies clearly
was sort of the angle that we wanted to go.

00:05:17.250 --> 00:05:19.339
So I guess, let me put it all in perspective.

00:05:19.339 --> 00:05:26.139
So current search, outside of Snap, is kind of like DOS.

00:05:26.139 --> 00:05:35.509
You invert it, you add some blue links, throw
in some ads to monetize it, maybe slap a logo

00:05:35.509 --> 00:05:40.000
and a search box on top, and that's search today.

00:05:40.000 --> 00:05:46.550
So, being inspired by Apple and how they
launched by sort of smashing the status quo,

00:05:46.550 --> 00:05:53.400
we felt that in order to launch a
product we had to sort of go back in time

00:05:53.399 --> 00:05:56.329
and take a look at exactly what the motivations were.

00:05:56.329 --> 00:06:00.129
Do we want to copy what exists now, or
do we want to invent something different?

00:06:00.129 --> 00:06:03.490
And so we looked at desktop application experience.

00:06:03.490 --> 00:06:13.280
And so our approach was to take a look at OS X Finder and
tweak it, add a couple of little logo and there's our,

00:06:13.279 --> 00:06:16.119
this is an example of our search experience as it is today.

00:06:16.120 --> 00:06:22.730
Traditional text results on the left, and high resolution
Snap Shot of the web result on the right hand side.

00:06:22.730 --> 00:06:26.980
And a little bit later in this
presentation we'll actually do a live demo,

00:06:26.980 --> 00:06:31.360
both Snap and Snap Shots, so you
can get a first hand example.

00:06:31.360 --> 00:06:35.509
So, clearly there was many challenges
that we faced in developing this product.

00:06:35.509 --> 00:06:38.819
We're using cutting edge design, cutting edge technology.

00:06:38.819 --> 00:06:46.459
At the time that we launched Snap, which is going on a year
and a half ago, you know, Jason and Prototype were still,

00:06:46.459 --> 00:06:51.839
you know, very new to the scene, and I don't
think had been used as a commercial product,

00:06:51.839 --> 00:06:55.389
so getting those guys to work together,
both on the progressive UI side

00:06:55.389 --> 00:06:58.629
and on the programming side was extremely challenging.

00:06:58.629 --> 00:07:02.899
And I'd like to introduce Mike Agostino, our CTO,

00:07:02.899 --> 00:07:07.310
to get into more technical details in
regards to some of those challenges.

00:07:07.310 --> 00:07:09.509
Thanks a lot.

00:07:09.509 --> 00:07:13.709
( Applause )

00:07:13.709 --> 00:07:14.489
>> Mike: Thank you, Jason.

00:07:14.490 --> 00:07:17.470
My name is Michael Agostino, I'm the CTO of Snap.

00:07:17.470 --> 00:07:23.590
And what I'm going to talk to you about today is our
experience in building Snap.com and the Snap Shots product.

00:07:24.810 --> 00:07:29.670
So I'd like to maybe, at the beginning of the
presentation, just take a little bit of a step back

00:07:29.670 --> 00:07:33.319
and talk about the search experience in general.

00:07:33.319 --> 00:07:38.810
As, sort of, Jason illustrated in somewhat
of a funny fashion with the 1984 commercial,

00:07:38.810 --> 00:07:40.930
we don't believe that it's about the algorithm today.

00:07:40.930 --> 00:07:45.800
It's not about the ranking algorithm, it's
really about redefining the user experience.

00:07:45.800 --> 00:07:49.420
Early on in Snap's existence, we
actually did some double line tests

00:07:49.420 --> 00:07:52.520
where we took the leading search engine's search results,

00:07:52.519 --> 00:07:57.079
placed them on another lesser search
engine's logo and vice versa.

00:07:57.079 --> 00:08:00.109
And we found that even with quote,
unquote, inferior search results,

00:08:00.110 --> 00:08:03.889
people still favored whatever their
favorite search engine was

00:08:03.889 --> 00:08:09.329
That they really did not differentiate on the basis
of search results because all of the search engines

00:08:09.329 --> 00:08:13.699
at the time were the same in terms of the user experience.

00:08:13.699 --> 00:08:19.170
The other thing that we discovered early
on was that most, if not, about 50 percent,

00:08:19.170 --> 00:08:24.379
this is according to the Pew Institute's
studies for the internet and it's use,

00:08:24.379 --> 00:08:27.209
found that 50 percent of all search missions actually fail.

00:08:27.209 --> 00:08:33.059
That is people go to a search engine, they type in something
into the box and they either don't find what they're looking

00:08:33.059 --> 00:08:36.879
for or they run out of time, or they
just get frustrated and give up.

00:08:36.879 --> 00:08:40.480
That told us something else, you know,
that there was really an opportunity here.

00:08:40.480 --> 00:08:47.070
The third thing that we sort of thought back on, and this
sort of goes back to the DOS analogy, is that you know,

00:08:47.070 --> 00:08:54.290
a lot has changed in the world of search in terms of what
machines are operating with, we all have broadband now,

00:08:54.289 --> 00:08:58.699
you know, a lot has changed in 10 years, but the
search experience of typing into an empty box

00:08:58.700 --> 00:09:00.509
and getting back blue links, really hasn't.

00:09:00.509 --> 00:09:05.289
I mean, we said hey, there's really an experience
that we can leverage all that great hardware,

00:09:05.289 --> 00:09:09.599
the fact that everybody's broadband connected,
that there's a lot more content in the world

00:09:09.600 --> 00:09:12.750
and do something interesting with all of that hardware.

00:09:12.750 --> 00:09:19.309
So we basically said there's a radical opportunity
here to just revolutionize what's going on.

00:09:19.309 --> 00:09:21.089
So this is what we came up with.

00:09:21.090 --> 00:09:22.300
Jason showed it to you earlier.

00:09:22.299 --> 00:09:26.919
On the left you see a traditional experience,
on the right you see our experience.

00:09:26.919 --> 00:09:31.339
So going from 10 blue links to visual previews of results.

00:09:31.340 --> 00:09:36.810
Going from a page loading paradigm where you
load pages, to one that's much more interactive.

00:09:36.809 --> 00:09:38.079
We call it channel surfacing.

00:09:38.080 --> 00:09:43.080
This is similar to how some people interact with their
television where they just click, click, click, click,

00:09:43.080 --> 00:09:46.690
click and see different channels very quickly.

00:09:46.690 --> 00:09:51.220
We thought that same approach could be applied to
search, allowing people to visualize the results

00:09:51.220 --> 00:09:54.759
in a very rapid fashion and decide
for themselves what's good.

00:09:54.759 --> 00:10:00.000
Allow them to more directly find the page they're
looking for, rather than a process of going forward

00:10:00.000 --> 00:10:04.750
and then going backwards and then forwards and backwards,
really directly find what they're looking for faster.

00:10:04.750 --> 00:10:08.190
And of course, the technology that
we used for this was AJAX.

00:10:08.190 --> 00:10:13.140
So now we're going to get into the main part of
the conversation, which is really about the rules

00:10:13.139 --> 00:10:20.230
that we developed over time for optimizing
across platform AJAX application.

00:10:20.230 --> 00:10:24.909
So these are rules that we developed
just from going through the process.

00:10:24.909 --> 00:10:27.309
We hope they apply to other applications.

00:10:27.309 --> 00:10:29.269
They're not just search specific.

00:10:29.269 --> 00:10:32.360
Some of them are processes, as we've labeled here.

00:10:32.360 --> 00:10:35.860
Some are much more in depth about the technology.

00:10:35.860 --> 00:10:41.810
So the first process related rule that we really came up
with was about getting everybody involved in the process.

00:10:41.809 --> 00:10:47.949
So you can get down to the tail end of a product
release and we've got weeks or days until the thing has

00:10:47.950 --> 00:10:50.700
to go live, and there's concerns about performance.

00:10:50.700 --> 00:10:51.940
We had this issue.

00:10:51.940 --> 00:10:56.220
One thing that we learned was that you have to
break out of the traditional way of thinking

00:10:56.220 --> 00:10:59.500
about performance being an engineering
concern and only an engineering.

00:10:59.500 --> 00:11:03.960
We actually got our product management involved and it
actually helped us quite a bit because they were able

00:11:03.960 --> 00:11:07.600
to illustrate and help us make the appropriate trade offs

00:11:07.600 --> 00:11:13.759
between what users believed was important
and what maybe was in the product.

00:11:13.759 --> 00:11:19.789
Second thing we discovered was having every developer
really brains from the process and leveraging QA.

00:11:19.789 --> 00:11:26.009
Another main rule that we set up is the, we call it
the no sacred cows here, but it can probably stated

00:11:26.009 --> 00:11:29.269
as the sacred cows make great cheeseburgers rule.

00:11:29.269 --> 00:11:33.809
And the thought behind that is you have to
be willing to sacrifice any product feature

00:11:33.809 --> 00:11:36.649
at any time if performance is not adequate.

00:11:36.649 --> 00:11:41.789
If you can't find a way to optimize
that algorithm to get it to the point

00:11:41.789 --> 00:11:45.509
where people are actually found the product
usable, why have that feature in there?

00:11:45.509 --> 00:11:49.490
And the third thing we did was we actually
published our performance every single day.

00:11:49.490 --> 00:11:55.320
So for us, that was sending out an email that
said how many search transactions met our SLA.

00:11:55.320 --> 00:11:57.110
It was helpful in two ways.

00:11:57.110 --> 00:12:00.509
The first way was really engendered a lot of spirit.

00:12:00.509 --> 00:12:03.370
You know, people saw the numbers getting
better and better every single day,

00:12:03.370 --> 00:12:05.450
they got behind the efforts to improve performance.

00:12:05.450 --> 00:12:10.600
The second was when we dealt with setbacks people were able
to sort of immediately scratch their head and go what was

00:12:10.600 --> 00:12:15.330
that code I checked in yesterday, and is there
something wrong, maybe I should rethink that

00:12:15.330 --> 00:12:20.580
and go back and reexamine what they had done.

00:12:20.580 --> 00:12:27.000
Second sort of theme that's more process related was really
about the frame of mind that we approached this problem.

00:12:27.000 --> 00:12:29.919
Many times people look at this as more of a backend problem.

00:12:29.919 --> 00:12:33.569
But we really wanted to be guided
by user experience research.

00:12:33.570 --> 00:12:37.660
So one of the experts we called upon was Jakob Nielson.

00:12:37.659 --> 00:12:43.559
And he has a few rules that he's created over time
that talk about how people interact with applications

00:12:43.559 --> 00:12:48.679
and what's the necessary time for them to feel
satisfied and to continue to use the product.

00:12:48.679 --> 00:12:52.099
So we developed what we call the .2 to 10 rule.

00:12:52.100 --> 00:12:58.190
The .2 to be for an application
to feel highly interactive,

00:12:58.190 --> 00:13:01.560
small things have to happen in less than .2 seconds.

00:13:01.559 --> 00:13:05.029
If they happen in .1 seconds, that's nice, but it doesn't,

00:13:05.029 --> 00:13:08.379
people don't really see any difference
between .1 and .2 for the most part.

00:13:08.379 --> 00:13:12.519
If it happens in .3 people start
to, you know, feel a little bad.

00:13:12.519 --> 00:13:19.309
Similarly, if you have something that runs in a little
bit longer, it has to happen in about 2 seconds.

00:13:19.309 --> 00:13:23.539
Now if it happens in one and a half seconds, that's
good, you know, people don't differentiate a lot.

00:13:23.539 --> 00:13:28.829
If it happens in more than two seconds, people
start to see friction and their mind wanders

00:13:28.830 --> 00:13:32.500
and maybe they start thinking about, you know, maybe
what am I going to have for dinner tonight and, you know,

00:13:32.500 --> 00:13:36.500
what time do I have to go home, or you know,
what's that other bug I'm thinking about.

00:13:36.500 --> 00:13:39.169
So we've really established a couple of rules here.

00:13:39.169 --> 00:13:42.879
One was that all of our search results would
have to come back in one and a half seconds

00:13:42.879 --> 00:13:45.840
and that our first preview would
have to be loaded within two seconds.

00:13:45.840 --> 00:13:50.160
So that is a total time of two seconds from the time
that people submitted that first preview on the right

00:13:50.159 --> 00:13:54.370
that Jason showed you in the intro
section has to be down in two seconds.

00:13:54.370 --> 00:13:56.840
Now that's a pretty big challenge, even with broadband.

00:13:56.840 --> 00:14:01.560
Now this wasn't a problem for us, but if your
application does happen to take more than 10 seconds,

00:14:01.559 --> 00:14:06.389
people are going to assume it's broken unless you have some
kind of progress indicator, and generally, in today's world,

00:14:06.389 --> 00:14:10.379
people are still frustrated if things are taking 10 seconds.

00:14:10.379 --> 00:14:17.139
Another thing that we looked at is really
taking a look at the end-to-end performance.

00:14:17.139 --> 00:14:21.809
So many web applications that you're probably familiar
with manage performance on a data center perspective.

00:14:21.809 --> 00:14:26.059
That is how long did the servers
take while computing the response?

00:14:26.059 --> 00:14:28.069
We didn't think that was really a good way to look at it.

00:14:28.070 --> 00:14:32.080
We thought the more true way to look at it was
to look at it from the end user's perspective.

00:14:32.080 --> 00:14:38.550
So from the time that they initiated an action until their
browser, in this case, was ready for the next action.

00:14:38.549 --> 00:14:46.639
So that includes all the wait time on the server side,
that includes, the download of any data associated with it,

00:14:46.639 --> 00:14:51.569
any active elements such as JavaScript
executed, all of that had to be complete.

00:14:51.570 --> 00:14:53.970
And that's how we looked at the world.

00:14:53.970 --> 00:15:00.560
So we ended up monitoring every significant end user
action in Snap.com so we could find out how we were doing.

00:15:00.559 --> 00:15:04.699
So this is really easy to do in AJAX,
but you could also do it without AJAX.

00:15:04.700 --> 00:15:08.540
There's some other techniques that
you can do to get this information.

00:15:08.539 --> 00:15:11.409
To talk about this is Brian..

00:15:11.409 --> 00:15:19.240
>> Is more advantageous the rendering the speed at which
things are returned by the servers from the backend

00:15:19.240 --> 00:15:23.230
and then the performance gives a more accurate
idea of what these users are actually experiencing,

00:15:23.230 --> 00:15:28.330
whether they're on any type of platform or
dial up connection or that kind of thing.

00:15:28.330 --> 00:15:34.580
We track the performance numbers on the front end instead
of what the servers tell us, because that way we're able

00:15:34.580 --> 00:15:38.300
to actually gauge what the users are actually experiencing.

00:15:38.299 --> 00:15:43.059
What we discovered from this is that we, there
were a few key areas that we had to improve.

00:15:43.059 --> 00:15:48.659
For example, we know what portion of
our audience is using dial up and we had

00:15:48.659 --> 00:15:51.059
to speed up the experience for those users.

00:15:51.059 --> 00:15:56.879
As well, we knew what browsers and platforms,
what operating systems people were using.

00:15:56.879 --> 00:16:02.769
And with all that information we knew where we could
take advantage of some of the latest technologies

00:16:02.769 --> 00:16:12.919
so we could give a better user
experience, more Web 2.0 type of interaction.

00:16:12.919 --> 00:16:15.139
>> Okay. So what I'm going to show you
probably for the first time outside

00:16:15.139 --> 00:16:17.679
of Snap, is actually our first performance graph.

00:16:17.679 --> 00:16:21.299
So we instrumented all of our code
and you can see from this line here,

00:16:21.299 --> 00:16:29.039
the top blue line is actually our 80th percentile, so that
was the, our SLA so to speak, of we wanted 80 percent of all

00:16:29.039 --> 00:16:32.059
of our searches to actually execute within 1.5 seconds

00:16:32.059 --> 00:16:36.799
so the solid red line there is the
target so to speak or the goal.

00:16:36.799 --> 00:16:41.750
And what we found was we were, on many
days, so this is the days leading up to

00:16:41.750 --> 00:16:46.129
when we launched our optimization
effort, we were 2 seconds too slow.

00:16:46.129 --> 00:16:50.059
So this was a real aw shucks moment for us and we knew it.

00:16:50.059 --> 00:16:50.899
We really had to dig deep.

00:16:50.899 --> 00:16:56.500
We knew that we had performance problems and we wanted
to address them, but we didn't realize the full extent.

00:16:56.500 --> 00:17:00.639
So what this is showing is that when you
really do measure end-to-end up to 50 percent

00:17:00.639 --> 00:17:04.519
of our search experiences were in
adequate in terms of performance.

00:17:04.519 --> 00:17:11.549
So one of the first things we did was
really build a user interaction timeline.

00:17:11.549 --> 00:17:17.879
So this is a simplified version, but what it's
meant to illustrate is a typical user session,

00:17:17.880 --> 00:17:26.840
so you see the user typing in a query, getting images
back, starting to interact with the various listings.

00:17:26.839 --> 00:17:31.289
Now the reason why this is important
is because we wanted to optimize based

00:17:31.289 --> 00:17:34.869
on the end users expectations of how things should function.

00:17:34.869 --> 00:17:37.109
So this is the first thing we built.

00:17:37.109 --> 00:17:42.799
Next thing we did is we actually went one level
deeper, which was to look at the machine perspective.

00:17:42.799 --> 00:17:49.349
So if you think of the green as being the end
user's machine and the blue being our website,

00:17:49.349 --> 00:17:59.699
there's a number of internal steps to each one of those
arrows, so in this case, we're showing in the green, again,

00:17:59.700 --> 00:18:03.380
is the end user machine and then the blue
is the server, and then the white arrows

00:18:03.380 --> 00:18:06.010
between them are actually packets flowing back and forth.

00:18:06.009 --> 00:18:12.089
So what this graph is showing you is that up to 8
packets can be sent for even the simplest request.

00:18:12.089 --> 00:18:17.889
So you download a one byte transparent
GIF, you can sent 8 packets back and forth.

00:18:17.890 --> 00:18:24.330
It turns out that if you have users across
the country or around the world, as we do,

00:18:24.329 --> 00:18:29.519
that can take quite a long time,
all of those round trips add up.

00:18:29.519 --> 00:18:34.369
So, what we're trying to illustrate here is
that HTTP transactions are a significant source

00:18:34.369 --> 00:18:38.129
of slowness in a typical AJAX based application.

00:18:38.130 --> 00:18:44.630
So the first step, if you really want to optimize
your applications is to count the HTTP transactions.

00:18:44.630 --> 00:18:49.730
So a simple test you can do, clear your cache, load
your website up and really see what's going on.

00:18:49.730 --> 00:18:53.809
You know? It sounds simple, it sounds
very simple minded in some ways,

00:18:53.809 --> 00:18:56.740
but that's pretty much the most basic way to start.

00:18:56.740 --> 00:19:02.089
Maybe the next level step is if you want to look
at that machine view is load up a network analyzer,

00:19:02.089 --> 00:19:08.119
so you use your favorite network analyzer and actually
look at all those packets that are going back and forth,

00:19:08.119 --> 00:19:12.119
seeing which things are being re-downloaded
if you re-access them.

00:19:12.119 --> 00:19:14.219
Count the connections that are being created.

00:19:14.220 --> 00:19:16.940
Really start to form a much more detailed timeline.

00:19:16.940 --> 00:19:25.400
One thing that we found that we could optimize
after we did this was really start to use a palette.

00:19:25.400 --> 00:19:32.410
So this is an optimization technique that
tries to combine images into one large image.

00:19:32.410 --> 00:19:36.950
So Snap, because it's very rich and we're
trying to emulate a desktop application,

00:19:36.950 --> 00:19:40.610
actually uses like it says here, 130 independent images.

00:19:40.609 --> 00:19:41.289
It sounds like a lot.

00:19:41.289 --> 00:19:42.039
It sounds crazy.

00:19:42.039 --> 00:19:43.869
It sounds wasteful.

00:19:43.869 --> 00:19:47.979
But if you really want to have
the richness of the experience

00:19:47.980 --> 00:19:51.650
that we're going after, you really do need lots of images.

00:19:51.650 --> 00:19:53.280
They may not all be used at once.

00:19:53.279 --> 00:19:55.519
They maybe be used in different sections of the site.

00:19:55.519 --> 00:19:57.769
But they eventually all have to be there.

00:19:57.769 --> 00:20:00.660
So we have 59 on our search engine results page.

00:20:00.660 --> 00:20:06.210
So if you load each of those, if you think about the
last slide, each of them could potentially be 8 packets

00:20:06.210 --> 00:20:08.769
for every one of those images going back and forth.

00:20:08.769 --> 00:20:14.869
So we created a palette, these palettes are
essentially a very large concatenation of images all

00:20:14.869 --> 00:20:23.099
into one giant image file, they're sorted by color and then
by height, and then we use CSS to actually extract them.

00:20:23.099 --> 00:20:27.389
So what this allowed us to do is
to go from 130 independent images

00:20:27.390 --> 00:20:29.759
that could have been loaded, down
to a small number of palettes.

00:20:29.759 --> 00:20:33.670
So we had one for orange, one for
yellow and one for some other colors.

00:20:33.670 --> 00:20:40.580
We then wrote some tools that allowed our web
developers to interact and write code as though it was

00:20:40.579 --> 00:20:48.879
as a single image rather than having to
understand what was going on with the CSS and such.

00:20:48.880 --> 00:20:59.100
>> We're looking at front end issues when you're analyzing
what the total download speed for search results pages was.

00:20:59.099 --> 00:21:05.589
One of the things we noticed was there is a
huge number of graphics and every graphic had

00:21:05.589 --> 00:21:17.269
to be individually fetched with HTTP headers,
and so one of the ways we increase the load speed was

00:21:17.269 --> 00:21:26.069
to take similar graphics, we basically matched graphics
up by the color palettes that they used and organized them

00:21:26.069 --> 00:21:36.480
into a huge mosaic of images that were pieced together
into one huge image and so then the page could load

00:21:36.480 --> 00:21:46.059
that one image and then we wrote some scripts that
automatically generated the CSS to cut up the palette images

00:21:46.059 --> 00:21:50.250
into the individual pieces and place
them where they belong on the page.

00:21:50.250 --> 00:21:58.589
And I think that the speed improvement
was a half a second just from that one.

00:21:58.589 --> 00:22:02.209
>> So as Tim said, we got about a half a
second out of just that one transformation.

00:22:02.210 --> 00:22:07.250
And if you think about we're trying
to get to 1.5 seconds total time,

00:22:07.250 --> 00:22:11.400
chopping out half a second doesn't sound
like much, but it's pretty significant.

00:22:11.400 --> 00:22:16.420
So taking that as sort of our mantra,
eliminating these transactions were kept going.

00:22:16.420 --> 00:22:17.570
We looked for other places.

00:22:17.569 --> 00:22:23.279
Here's some rules of thumbs that we came up with
that might be applicable to your AJAX applications.

00:22:23.279 --> 00:22:24.970
Have your style sheets inline.

00:22:24.970 --> 00:22:26.559
Pretty simple to do.

00:22:26.559 --> 00:22:27.750
Move your images inline.

00:22:27.750 --> 00:22:28.730
Not many people know about this.

00:22:28.730 --> 00:22:33.279
But this is kind of a wacky thing you can do
where you can actually place the source data

00:22:33.279 --> 00:22:36.420
of the image actually right there in the html.

00:22:36.420 --> 00:22:41.650
But obviously this eliminates one
additional request to your server.

00:22:41.650 --> 00:22:45.930
This is actually was invented, I believe, by Larry
Masinter of Xerox Parc fame.

00:22:45.930 --> 00:22:46.910
It doesn't work in IE.

00:22:46.910 --> 00:22:48.830
Maybe that's not a big concern.

00:22:48.829 --> 00:22:56.679
But if you want to know more, 23,
RFC 2379 has# all the details on it.

00:22:56.680 --> 00:23:00.710
Really big win that we got was
actually using persistent connections.

00:23:00.710 --> 00:23:06.460
So if you think back about the chart that I showed
you before where there's those 8 packets going back

00:23:06.460 --> 00:23:12.019
and forth for every single request, if you use persistent
connections, it can really lower that quite a bit.

00:23:12.019 --> 00:23:13.639
Here's an illustration of that.

00:23:13.640 --> 00:23:17.820
So on the top we have using traditional
non-persistent connections

00:23:17.819 --> 00:23:21.019
and on the bottom you can see using persistent connections.

00:23:21.019 --> 00:23:29.609
There's only two packets going back and forth because
the connection is maintained from request to request.

00:23:29.609 --> 00:23:32.899
So after we did that, this is about where we were.

00:23:32.900 --> 00:23:38.220
So you can, this is a little bit more complicated graph, but
you know, it has multiple different bands in there showing

00:23:38.220 --> 00:23:46.210
where each one fits, but you can see with the orange
line, we're just about our target of 1.5 seconds.

00:23:46.210 --> 00:23:51.220
The green line, which was the 80th
percentile was still quite high.

00:23:51.220 --> 00:23:54.670
We had about another half a second or so to trim out.

00:23:54.670 --> 00:23:56.490
So we kept going.

00:23:57.859 --> 00:24:01.469
Next hint that we came up with was
really about exploring parallelism.

00:24:01.470 --> 00:24:09.150
So using persistent connections, we actually
started to use multiple different hosts.

00:24:09.150 --> 00:24:14.240
So we broke out all of our resources across
the site, so those palettes, the CSS,

00:24:14.240 --> 00:24:15.880
other things, and placed them under different hosts.

00:24:15.880 --> 00:24:22.580
So we'd have, of course, www.Snap.com, but we'd
have other hosts like i.Snap.com for static images.

00:24:22.579 --> 00:24:28.689
Now the trade-off when you do this, you obviously get a
more persistent connections, but you use more DNS time.

00:24:28.690 --> 00:24:33.680
We did some experiments and we've read other places that
this seems like the best case is two to three hosts,

00:24:33.680 --> 00:24:37.220
it might be four for some particularly rich applications.

00:24:37.220 --> 00:24:39.980
This sort of shows visually what it looks like.

00:24:39.980 --> 00:24:46.349
If you do everything in a series,
you know, you just use a single host,

00:24:46.349 --> 00:24:48.539
obviously everything's going to go one after another.

00:24:48.539 --> 00:24:50.619
If you use two hosts, you get a little bit better.

00:24:50.619 --> 00:24:54.719
It effectively makes your site feel a lot more
responsive if you get all the way to four.

00:24:54.720 --> 00:25:01.299
The thing you want to be careful of, of course, is
starting to strain the end user's network connection.

00:25:01.299 --> 00:25:04.919
The other thing that we did was
really look at our cacheability.

00:25:04.920 --> 00:25:10.700
We adopted a rule that we're still using today,
which is to consider all static files immutable.

00:25:10.700 --> 00:25:12.240
That is they don't ever change.

00:25:12.240 --> 00:25:15.680
If they change, you change the version number.

00:25:15.680 --> 00:25:21.009
So we did this on images, we did it
on our CSS and then we set our expires

00:25:21.009 --> 00:25:25.789
so that those would be cached forever out to about a year.

00:25:25.789 --> 00:25:30.279
The other thing we did is we were using a
CDN before this, but we actually used our,

00:25:30.279 --> 00:25:33.089
you should use a CDN to really push that out.

00:25:33.089 --> 00:25:38.149
One gotcha that we did find is that the
CDN doesn't always respect expires headers.

00:25:38.150 --> 00:25:39.500
There are bugs in CDN.

00:25:39.500 --> 00:25:45.700
And it seems funny that there would be some
after five plus years, maybe seven years,

00:25:45.700 --> 00:25:49.830
of CDN's being mainstreamed, but there's still various bugs.

00:25:49.829 --> 00:25:55.929
The other thing that we did discover is be aware
of your use of cookies with your static elements.

00:25:55.930 --> 00:26:00.590
You probably want to move your static files to
another domain so that they don't interfere.

00:26:00.589 --> 00:26:01.759
This has two benefits.

00:26:01.759 --> 00:26:05.420
One, your cache it rate will be preserved at the CDN,

00:26:05.420 --> 00:26:11.210
but secondarily if you have a very long cookie that's
being sent, you'll preserve upstream bandwidth.

00:26:11.210 --> 00:26:18.220
And upstream bandwidth, as many of you know, is
much more precious than downstream bandwidth.

00:26:18.220 --> 00:26:23.559
If a user has to send a 1K cookie
all the way across the internet,

00:26:23.559 --> 00:26:27.829
that may break a request that's normally
one packet into multiple packets,

00:26:27.829 --> 00:26:31.039
which means that the overall application is less responsive.

00:26:31.039 --> 00:26:34.940
The next rule that we came up with is squeeze bytes.

00:26:34.940 --> 00:26:40.890
Now this sounds a little bit 1995ish,
you know, Web 1.0, but it still matters.

00:26:40.890 --> 00:26:45.200
You know? Packets are small on the wild
internet and congestion is everywhere.

00:26:45.200 --> 00:26:51.920
Right? Your end user's neighbor might be running Bit
Torrents out of his house, and it's all going to conflict

00:26:51.920 --> 00:26:56.700
and if you can make your site just a little
bit smaller, you might just get lucky.

00:26:56.700 --> 00:27:01.240
So one thing we did is we actually went through
and audited all of our old image and style sheets.

00:27:01.240 --> 00:27:09.359
This is particularly important for people who are
dynamic, sort of developing sites in a rapid fashion,

00:27:09.359 --> 00:27:11.419
it's very easy for things to get left behind.

00:27:11.420 --> 00:27:14.670
Just the croft builds up very quickly
and it's very easy to get forgotten.

00:27:14.670 --> 00:27:19.279
The other thing you can consider is
really using a compressing obfuscator.

00:27:19.279 --> 00:27:24.240
We did configure our web server to use
GZIP for all of the non image elements.

00:27:24.240 --> 00:27:27.859
And that's how you do that right there, at least in Apache.

00:27:27.859 --> 00:27:32.159
Last thing we discovered we discovered
is really using a format called JSON.

00:27:32.160 --> 00:27:36.650
Now it's not related to Jason Fields,
even though he'd like to think it is.

00:27:36.650 --> 00:27:39.630
It really stands for JavaScript Object Notation.

00:27:39.630 --> 00:27:48.650
This is a way of sending your objects down as sort of
precompiled JavaScript objects so all they have to do,

00:27:48.650 --> 00:27:51.800
all that has to be done is to call the eval function.

00:27:51.799 --> 00:27:56.200
Now it turns out the bytes are about the
same between XML and JSON, typically,

00:27:56.200 --> 00:27:59.460
but the parsing results are quite different.

00:27:59.460 --> 00:28:06.850
So, what we found is on a development machine,
there was about a 65 milliseconed different.

00:28:06.849 --> 00:28:13.209
Now it doesn't sound like a lot, but if you think
about that on top of our, another thing we found out is

00:28:13.210 --> 00:28:18.870
that the typical end user's machine is 3 to
5 times slower than our developer's machines.

00:28:18.869 --> 00:28:20.959
You're starting to talk about a lot of time.

00:28:20.960 --> 00:28:26.910
300 milliseconds and trimming out 300 milliseconds
in the middle of a transaction that's supposed

00:28:26.910 --> 00:28:30.680
to last 1.5 seconds is pretty significant.

00:28:30.680 --> 00:28:34.170
So this is a little visual of what that looks like.

00:28:34.170 --> 00:28:37.810
On the left you'll see what our XML looks like.

00:28:37.809 --> 00:28:40.190
On the right you can see a snippet of the JSON.

00:28:40.190 --> 00:28:44.360
And if you sort of look at that you
can see that it's a JavaScript hash.

00:28:44.359 --> 00:28:49.939
Right? Each of the elements in XML has now become a key.

00:28:49.940 --> 00:28:54.600
Another thing we did to make the site even
more responsive is to enable pre-fetching.

00:28:54.599 --> 00:29:00.319
So if you have that really detailed timeline that we talked
about in the beginning, look through that entire timeline

00:29:00.319 --> 00:29:08.990
and assess are there places where certain actions appear
to require a previous action to end before they can start?

00:29:08.990 --> 00:29:11.839
And really challenge yourself, is that true?

00:29:11.839 --> 00:29:19.349
So you know, what we found is that there's, in
Snap, there's a lot of places where we had end

00:29:19.349 --> 00:29:22.049
to start dependencies, but they weren't really necessary.

00:29:22.049 --> 00:29:25.529
So we put in a pre-fetch in the first preview.

00:29:25.529 --> 00:29:31.940
We also started pre-fetching the images as people go through
the listings and you'll see this when we do the demo.

00:29:31.940 --> 00:29:39.710
The thing to be careful of is that if you arbitrarily
pre-fetch everywhere, you're just going to waste resources

00:29:39.710 --> 00:29:44.660
on your own servers, of course, and you're going to waste,
you're going to tie up resources on your end user's machine.

00:29:44.660 --> 00:29:49.660
So we sort of came up with a rule of thumb, which
is if it's 80 percent likely, go ahead and do it.

00:29:49.660 --> 00:29:55.800
You're end user's probably grateful for the fact
that your application's smooth and responsive

00:29:55.799 --> 00:30:00.730
and your business model's probably not going to break
down because you're using 20 percent more servers.

00:30:02.279 --> 00:30:07.879
>> One of the things we were looking at while we were
testing the Snap.com website was how do we test performance,

00:30:07.880 --> 00:30:14.250
end to end performance from the user's aspect
all the way to the backend of our system?

00:30:14.250 --> 00:30:20.170
The complexities of the system is that it is highly
integrated and that it comprises of multiple segments

00:30:20.170 --> 00:30:25.200
and so one thing we had to look at
was how do we break that system down.

00:30:25.200 --> 00:30:28.029
And what we did was we started looking,

00:30:28.029 --> 00:30:31.779
we took the entire system and we broke it into pieces.

00:30:31.779 --> 00:30:35.920
How does these transactions work
from one segment of the system

00:30:35.920 --> 00:30:38.660
and how does it communicate to another piece of the system?

00:30:38.660 --> 00:30:45.740
We also look at transfers across the
different segments and we tried to eliminate

00:30:45.740 --> 00:30:47.370
as many hops between the systems as possible.

00:30:47.369 --> 00:30:52.909
While testing performance, we also came
across a very big issue was recursive DIVS.

00:30:52.910 --> 00:30:58.840
We have a lot of DIVS across our site and we
noticed that when we have recursive DIVS it ate up a lot

00:30:58.839 --> 00:31:06.220
of browser's memory, especially in Firefox and in IE,
which causes a lot of user's computers to slow down.

00:31:06.220 --> 00:31:14.940
Now most computers, most users don't have computers
that are extremely fast with high volumes of memory.

00:31:14.940 --> 00:31:20.110
So we had to test across multiple platforms and we realized

00:31:20.109 --> 00:31:29.379
that over time the recursive DIVS were basically
draining the memory and we were noticing a lot

00:31:29.380 --> 00:31:34.920
of memory leaks across the system and so that's something
that we had to pay a lot of attention to and we had

00:31:34.920 --> 00:31:44.370
to redesign our site according to how we can use, to how we
confected the use of DIVS across the site basically.

00:31:44.369 --> 00:31:49.729
Another thing that we looked at was image caching
because we wanted to eliminate as many hops

00:31:49.730 --> 00:31:52.710
across the system as possible to the users.

00:31:52.710 --> 00:31:57.960
We needed to cache as much content as possible.

00:31:57.960 --> 00:32:07.329
That included JavaScript files, CSS files, that included
images, so we create a lot of palettes to cache all

00:32:07.329 --> 00:32:13.970
of the images and that way static transfers to the
user's system thereby improving overall performance.

00:32:19.180 --> 00:32:24.170
>> So one thing that Mike highlighted there
was really profiling on every major browser.

00:32:24.170 --> 00:32:28.779
This is easy for us at Snap, we pretty
much have every platform known to man.

00:32:28.779 --> 00:32:34.639
You know? In a developer's hands or in a
QA's hands or in a web designers hands.

00:32:34.640 --> 00:32:40.980
We did find some huge performance differences and some
of the functions are essential to AJAX style programming.

00:32:40.980 --> 00:32:45.029
As Mike highlighted we did use DIVS
extensively and we did find a couple

00:32:45.029 --> 00:32:47.730
of browsers that were not so good at doing that.

00:32:47.730 --> 00:32:49.559
It turns out Safari is okay.

00:32:49.559 --> 00:32:52.109
Here's some performance graphs.

00:32:52.109 --> 00:33:00.979
We'll leave the actual functions out of the
equation here, but what you can see is the blue line

00:33:00.980 --> 00:33:10.110
and the pinkish line show Firefox and IE relative to
Safari, so they're taking anywhere from two to four times

00:33:10.109 --> 00:33:12.819
as long to execute some very common functions.

00:33:12.819 --> 00:33:18.439
And again, this doesn't sound like a lot, but when
you consider that the average end user's computer is 3

00:33:18.440 --> 00:33:22.600
to 5 times slower than our developer
machines, it all really adds up.

00:33:22.599 --> 00:33:31.929
So we actually went through and in certain cases
wrote platform dependent code where we had to.

00:33:31.930 --> 00:33:38.120
So after we went through all of this, this is
where we got, this is where our performance was.

00:33:38.119 --> 00:33:44.649
Showing that the green line finally had been
moved below our 1.5, 1.5 second target line.

00:33:44.650 --> 00:33:49.980
So we've gone from 25 percent of our end users
having a successful experience to 81 percent.

00:33:49.980 --> 00:33:54.940
It took us a lot of work, you know,
but in the end we were very successful.

00:33:54.940 --> 00:34:00.420
Now what I'd like to talk about is how you can apply these
same lessons, how we applied these same lessons at Snap Shot.

00:34:00.420 --> 00:34:04.920
So I want to demonstrate to you that it's not
just a search specific optimizations that we did,

00:34:04.920 --> 00:34:08.869
these are actually cross platform, or
cross application type optimizations

00:34:08.869 --> 00:34:13.150
that you can apply in your own AJAX applications.

00:34:13.150 --> 00:34:18.059
So all the same technical issues that
we saw in Snap, remained in Snap Shots.

00:34:18.059 --> 00:34:20.159
In fact, some of them were even more difficult.

00:34:20.159 --> 00:34:23.909
In Snap, we said we could respond within 1.5 seconds.

00:34:23.909 --> 00:34:28.460
But with Snap Shots, as Jason showed,
it's actually triggered by a mouse over.

00:34:28.460 --> 00:34:33.130
So if someone moves from one link on the page to another
link on the page, they don't want to wait a long time.

00:34:33.130 --> 00:34:36.019
They want that to be a very smooth, flowing experience.

00:34:36.019 --> 00:34:40.199
So it had to be really instantaneously
responsive, not just fast.

00:34:40.199 --> 00:34:42.969
The other thing we have with Snap Shots, it was,

00:34:42.969 --> 00:34:46.129
again a very visually rich experience,
so there were lots of graphics in there.

00:34:46.130 --> 00:34:47.190
So we had to do interesting things.

00:34:47.190 --> 00:34:54.940
And then even more important than in Snap, was that they
identically perform across all the different browsers

00:34:54.940 --> 00:35:00.450
and across all platforms, because people that were going to
use this, they were going to use it on their blogs, right?

00:35:00.449 --> 00:35:05.329
They can't choose what browser their end users are using.

00:35:05.329 --> 00:35:11.130
In search we could say well, maybe there's some
smaller browser that has 1 or 2 percent market share

00:35:11.130 --> 00:35:16.420
and maybe it's really not part of our business
model to serve that user, but with Snap Shots,

00:35:16.420 --> 00:35:21.340
since we wanted to allow the publisher to
really control that and have a good experience

00:35:21.340 --> 00:35:24.620
for their user, we had to be much more cross platform.

00:35:24.619 --> 00:35:31.630
Like Jason said, we conceived it offsite in
October, we launched it six weeks later in November.

00:35:31.630 --> 00:35:33.099
We've been growing really rapidly.

00:35:33.099 --> 00:35:39.039
I think now we're actually available in ten
different languages and we're expanding to 30.

00:35:39.039 --> 00:35:47.429
actually if anyone here has a language that they speak
that's, other than English, Spanish, German, Russian,

00:35:47.429 --> 00:35:55.049
Portuguese, the two different forms of Chinese, I'm
probably forgetting one, please come up and see me after

00:35:55.050 --> 00:35:59.440
and we can talk to you about how you
can get Snap Shots in your language.

00:35:59.440 --> 00:36:02.070
So here are the specific issues that we faced.

00:36:02.070 --> 00:36:03.240
Scalability.

00:36:03.239 --> 00:36:09.389
You know, this is, you know, we're rapidly expanding our
search footprint, but Snap Shots is growing even faster.

00:36:09.389 --> 00:36:12.710
We're up over 1 million sites that have it active today.

00:36:12.710 --> 00:36:15.409
It's used 14 million times per day.

00:36:15.409 --> 00:36:17.599
We're serving about 160 shots per second.

00:36:17.599 --> 00:36:20.889
We peak at 275.

00:36:20.889 --> 00:36:23.210
It has to work, like I said, across any website.

00:36:23.210 --> 00:36:27.490
And we have many more content types than
we ever did in the search experience.

00:36:27.489 --> 00:36:31.779
We have 10 different sites and we
have many different content providers.

00:36:31.780 --> 00:36:38.150
So what we did in optimizing Snap Shots was really
to build a timeline specific to the type of shot.

00:36:38.150 --> 00:36:42.990
So for the Wikipedia Shot it had a
different timeline than say a YouTube Shot.

00:36:42.989 --> 00:36:45.679
So understand what the issues are in each of those.

00:36:45.679 --> 00:36:50.349
Understand where they can breakdown, where
they can fail, where there might be end

00:36:50.349 --> 00:36:53.380
to start dependencies that we need to eliminate.

00:36:53.380 --> 00:36:55.160
So what are the things we did?

00:36:55.159 --> 00:36:57.609
Well, they're the same things we did for Snap.

00:36:57.610 --> 00:36:59.280
Single palette for all the images.

00:36:59.280 --> 00:37:04.680
We used persistent connections everywhere, especially
important when you want to have instantaneous response

00:37:04.679 --> 00:37:08.169
from link to link, we streamlined
our JavaScript and finally,

00:37:08.170 --> 00:37:11.869
we used multiple different IFRAMEs to allow parallelism.

00:37:11.869 --> 00:37:16.630
So we took a look at some of our requests that could take
a little bit longer and actually placed an IFRAMEs in there

00:37:16.630 --> 00:37:22.869
to allow the bubble itself to be responsive
while maybe a transaction that was going to fill

00:37:22.869 --> 00:37:25.159
in that bubble to sort of go in parallel.

00:37:25.159 --> 00:37:30.710
So in conclusion, developing a cross
platform AJAX app is really hard.

00:37:30.710 --> 00:37:33.699
The tools are starting to get better,
but it's still really difficult.

00:37:33.699 --> 00:37:38.759
If you wanted to really be, you know, if you really
want to reinvent an experience and make it seem

00:37:38.760 --> 00:37:41.710
like a desktop application, it's going to be a lot of work.

00:37:41.710 --> 00:37:47.539
You're going to have to do probably 200 really
small things and if you foul up on any one of them,

00:37:47.539 --> 00:37:49.860
you might not get the experience that you want to have.

00:37:49.860 --> 00:37:53.970
But we found is that with a talented
and empowered team, it's not impossible,

00:37:53.969 --> 00:37:56.889
but you could probably have massive growth yourself.

00:37:58.210 --> 00:38:05.510
So I'd like to invite Jason back up to the stage and
we're going to do a demo, as promised, of both Snap,

00:38:05.510 --> 00:38:08.490
the search experience, as well as Snap Shots.

00:38:08.489 --> 00:38:14.739
Once that's completed we're going to have
time for a Q and A if people have it.

00:38:14.739 --> 00:38:24.269
So what Jason is showing you here,
or was showing you, there it goes.

00:38:24.269 --> 00:38:27.849
Okay. So this is Snap Search Engine.

00:38:27.849 --> 00:38:29.750
We actually offer multiple types of search.

00:38:29.750 --> 00:38:35.369
You know, we showed you web search, but
we actually have image search as well.

00:38:35.369 --> 00:38:39.109
So the first thing that you see that makes, that
shows you this is different is actually interactivity

00:38:39.110 --> 00:38:41.269
that you get in the search box.

00:38:41.269 --> 00:38:45.050
So rather than typing into a blank
box, and getting no response,

00:38:45.050 --> 00:38:48.560
you actually get some interactivity
that you can actually do.

00:38:48.559 --> 00:38:55.719
It suggests potential queries that you want to type.

00:38:55.719 --> 00:38:59.819
So the next thing you get is the search engine results page.

00:38:59.820 --> 00:39:06.710
So on the left is our traditional listings,
or text, and on the right is the preview.

00:39:06.710 --> 00:39:11.769
And what Jason is actually doing here is actually scrolling
through those listings and as you see him scrolling

00:39:11.769 --> 00:39:13.730
through them the image on the right is changing.

00:39:13.730 --> 00:39:15.400
So that's an image of the destination site.

00:39:15.400 --> 00:39:21.059
It's providing you with information about it helping you
decide is this an academic site, is this a commercial site,

00:39:21.059 --> 00:39:26.019
is this a pay to use, rich visual images,
is it a site that's written in my language,

00:39:26.019 --> 00:39:30.269
helping you sort of judge more about it so
that you have an informed decision before you,

00:39:30.269 --> 00:39:34.090
look before you leap is what we call it.

00:39:34.090 --> 00:39:35.460
So this is all AJAX based.

00:39:35.460 --> 00:39:38.780
You can use, as we showed, you can click
on things, you can use your keyboard,

00:39:38.780 --> 00:39:40.620
you can use your mouse, all of that to activate that.

00:39:40.619 --> 00:39:43.269
In fact, since its AJAX, you can do all sorts of things.

00:39:43.269 --> 00:39:48.199
You can actually change up the UI
and make the image smaller or larger,

00:39:48.199 --> 00:39:51.819
depending on the particular search
mission that you're actually on.

00:39:55.239 --> 00:39:56.679
Now we're going to show you Snap Shots.

00:39:56.679 --> 00:40:03.389
This is a page on our site called Snap Shot central,
where we list all the different shots that are available.

00:40:03.389 --> 00:40:12.269
We started with the preview shot, which is, as we said,
just a high resolution JPEG of the destination of a link.

00:40:12.269 --> 00:40:13.900
But that's what we launched back in November.

00:40:13.900 --> 00:40:18.680
You can see that you can see the multiple
different sizes, but we actually went beyond

00:40:18.679 --> 00:40:22.649
that into what we call rich shots, so
bringing information directly into the bubble.

00:40:22.650 --> 00:40:24.800
So this is an example of the Wikipedia Shot.

00:40:24.800 --> 00:40:28.850
We're actually bringing the first
paragraph or so of an article about Picasso.

00:40:28.849 --> 00:40:34.329
Here's a movie shot where we have
the bio of Scarlett Johansson.

00:40:34.329 --> 00:40:36.309
All this information is being pulled from IMDB.

00:40:36.309 --> 00:40:42.049
Now you can see, as Jason's interacting
with it, how we responsive this actually is.

00:40:42.050 --> 00:40:46.170
It's showing you all this information that you could
get that normally you'd have to click, go to a website,

00:40:46.170 --> 00:40:50.579
wait five seconds, find your path
around there and then maybe go back.

00:40:50.579 --> 00:40:52.440
We have some other ones on here.

00:40:52.440 --> 00:40:56.579
This is actually an example of our PhotoShot,
we support a number of different providers.

00:40:56.579 --> 00:41:01.590
You can see that you can interact with an
entire photo album right there in the bubble.

00:41:05.360 --> 00:41:11.599
We have a video shot, which allows
you to look at various videos,

00:41:11.599 --> 00:41:16.980
so you can actually see here actually
playing the video directly in the site.

00:41:16.980 --> 00:41:21.449
And of course, you can movie it so that maybe it's out
of your way maybe while you're watching a long video

00:41:21.449 --> 00:41:25.549
if you want to continue working on something else.

00:41:30.519 --> 00:41:32.400
We just recently announced the RSS Shot.

00:41:32.400 --> 00:41:37.869
It actually came live today, just in time
for this conference, is the RSS Shot.

00:41:37.869 --> 00:41:43.119
So what this enables you to do is if you're looking
at a link to any destination page that happens

00:41:43.119 --> 00:41:49.480
to have an RSS feed associated with it, you can get
a summary of that feed right there in the bubble.

00:41:49.480 --> 00:41:54.769
So you get the top four or five
articles, along with the short excerpt,

00:41:54.769 --> 00:41:57.889
and it helps you decide is this
something I want to go visit?

00:41:57.889 --> 00:42:00.629
What are the hot stories that this blog is talking about?

00:42:00.630 --> 00:42:05.160
Something that's not showing here, that we're taking the
next step with RSS, is if you actually link to an article,

00:42:05.159 --> 00:42:09.579
you can actually read the article of a
permalink directly inside the bubble.

00:42:09.579 --> 00:42:11.469
We also support the Profile Shot.

00:42:11.469 --> 00:42:13.199
Do you want to show that, Jason?

00:42:13.199 --> 00:42:15.649
So this is for social networks.

00:42:15.650 --> 00:42:20.539
So if you're browsing around the internet and you want to
find out a little bit more about the people that are there,

00:42:20.539 --> 00:42:24.179
so MySpace and others who will be supporting this soon,

00:42:24.179 --> 00:42:30.460
you can actually get some biographical
details about them just by using Snap Shots.

00:42:30.460 --> 00:42:33.519
We plan to support new shots going forward.

00:42:33.519 --> 00:42:38.119
Actually, if you're interested in talking to us
maybe about a particular content type that you have

00:42:38.119 --> 00:42:42.049
that you want supported in Snap Shot,
come talk to Jason or me after that.

00:42:42.050 --> 00:42:47.140
There's another thing that we did not highlight, which is
we have another technology called Snap Shot market language,

00:42:47.139 --> 00:42:51.699
which actually uses micro formats to give you
direct control over the Snap Shots that appear.

00:42:51.699 --> 00:42:58.169
So not only that, you can mark any form of
content, so an image, a plain piece of text,

00:42:58.170 --> 00:43:03.700
basically removing the Snap Shots restriction
from the links and putting it anywhere.

00:43:03.699 --> 00:43:09.809
So you can say hey, I want the Wikipedia
shot here and I want the bio of Henry Ford.

00:43:09.809 --> 00:43:15.259
So you can get more details about
that in Snap Shots Central as well.

00:43:15.260 --> 00:43:21.310
Can we go back to the slides, please?

00:43:23.969 --> 00:43:36.709
So George is going to come back up.

00:43:36.710 --> 00:43:40.190
>> George: Pretty incredible technology
they've been working on.

00:43:40.190 --> 00:43:44.679
I think a lot of their methodologies are extremely
applicable to probably future applications

00:43:44.679 --> 00:43:49.079
that you're currently or will be
working on in the very near future.

00:43:49.079 --> 00:43:53.559
There's one last thing I wanted to add, which is
more or less a recap of some of the other things

00:43:53.559 --> 00:43:55.299
that you've probably heard during this week.

00:43:55.300 --> 00:44:03.390
One more thing, and that's, you know, when you're designing,
when you're designing AJAX applications in particular,

00:44:03.389 --> 00:44:06.480
as you start thinking about them for the
iPhone, we just wanted to reiterate a couple

00:44:06.480 --> 00:44:10.699
of really good design disciplines and
leave that and see that with the audience.

00:44:10.699 --> 00:44:17.569
Good design practices are extremely important, whether
you're designing AJAX applications for the desktop,

00:44:17.570 --> 00:44:22.019
and even more so importantly for the iPhone as you start
thinking about what you heard in the session yesterday.

00:44:22.019 --> 00:44:29.469
That session will also be re-broadcast in this
room tomorrow at 3:30 p.m. Column layout,

00:44:29.469 --> 00:44:34.029
when you're designing the actual grid structure
for your page, consider columns and DIVS,

00:44:34.030 --> 00:44:38.010
basically laying out the columns and
the constructs of your actual page.

00:44:38.010 --> 00:44:39.120
Size does matter.

00:44:39.119 --> 00:44:45.170
We talked about the Edge Network as well as the
WiFi Network and being able to strategically plan

00:44:45.170 --> 00:44:51.210
out how your contents will scale and have
progressive enhancement based on the network protocol

00:44:51.210 --> 00:44:53.990
and the network connectivity at that given time.

00:44:53.989 --> 00:44:56.919
Media queries, CSS3 media queries is extremely important.

00:44:56.920 --> 00:45:03.559
Use the media queries to do the device detection and the
intelligent auto layout when you design your content.

00:45:03.559 --> 00:45:09.079
And then also, take into consideration as you're
designing your content how you could best,

00:45:09.079 --> 00:45:13.369
do your best practices, optimize
your content for the iPhone.

00:45:13.369 --> 00:45:18.509
The viewport tag, considering what the height
and width will actually be for that content,

00:45:18.510 --> 00:45:22.420
given on whether or not it's portrait or landscape mode.

00:45:22.420 --> 00:45:27.940
Double Tap, the access bits that
we have inside through JavaScript,

00:45:27.940 --> 00:45:31.269
how you actually will interact with that content.

00:45:31.269 --> 00:45:35.199
Text size adjustments, the additional
tags that we've mentioned in that session.

00:45:35.199 --> 00:45:39.649
And then lastly, the dom events that are specific
and they are supported on the actual device.

00:45:39.650 --> 00:45:42.369
Please come do tomorrow's session.

00:45:42.369 --> 00:45:43.019
Listen to it.

00:45:43.019 --> 00:45:44.050
See it all over again.

00:45:44.050 --> 00:45:48.410
We're going to get that content up on the website as soon
as possible so as you're building out your future, you know,

00:45:48.409 --> 00:45:55.210
as you're working on your current AJAX applications to
take all these best design practices into consideration.

00:45:55.210 --> 00:46:00.389
And then media, when you're creating your media
for the iPhone, or whether it's for the desktop,

00:46:00.389 --> 00:46:04.159
be sure to also take into consideration
those bandwidth constraints as well.

00:46:04.159 --> 00:46:09.789
So for more information through the WorldWide Developer
Relations, your contact for dealing with anything related

00:46:09.789 --> 00:46:14.619
with AJAX for the desktop or AJAX
applications for the iPhone is Mark Malone.

00:46:14.619 --> 00:46:16.769
You have the contact information here.

00:46:16.769 --> 00:46:21.230
There's useful information around user agent
and object detection listed here as well.

00:46:21.230 --> 00:46:26.329
This will also be posted onto the Apple Developer
Connection Website and then also within the W3C

00:46:26.329 --> 00:46:32.619
and the What Working Group on the guidance around
dealing with CSS3 media queries for doing the dynamic layout

00:46:32.619 --> 00:46:40.139
and design of those objects and then also within the
image and audio tag that we are contributing as Apple

00:46:40.139 --> 00:46:44.099
to the What Working Group as well
as the HTML 5 specification within the W3C.

00:46:44.099 --> 00:46:49.069
please be sure to take a look at that spec,
it's an open forum if you have advice,

00:46:49.070 --> 00:46:55.780
if you want to contribute your own two bits, be
a participant in helping define what HTML 5 is.

00:46:55.780 --> 00:47:01.810
For the media site, Allan Schaffer is your WWDR
contact handling anything related to QuickTime,

00:47:01.809 --> 00:47:08.159
QuickTime optimization for either the Desktop Safari
Experience or for the iPhone Safari Experience.

00:47:08.159 --> 00:47:14.829
A few housekeeping reminders before we open it up to
Q and A. We have a widget design technique session

00:47:14.829 --> 00:47:21.170
in this room a little bit later this evening, and
then over in the main keynote hall, Presidio,

00:47:21.170 --> 00:47:27.490
we have Vector Graphics for WebKit, where
we will be going in-depth over canvas, CSS3,

00:47:27.489 --> 00:47:32.459
and scalable vector graphics, SVG, which is new to Leopard.

00:47:32.460 --> 00:47:37.429
Tomorrow's sessions, we are going to
be hosting the Apple.com Design Team,

00:47:37.429 --> 00:47:41.029
which you guys have probably already
seen the latest redesign of Apple.com.

00:47:41.030 --> 00:47:46.820
they'll be coming and speaking about the really interesting
uses of AJAX that they've applied to this new redesign

00:47:46.820 --> 00:47:50.440
and actually dissecting it and
giving optimization approaches

00:47:50.440 --> 00:47:53.019
that we here at Apple are using as best practices.

00:47:53.019 --> 00:47:56.079
We have an AJAX Methodologies for
QuickTime Development session tomorrow

00:47:56.079 --> 00:47:57.650
that I think is going to be really interesting.

00:47:57.650 --> 00:48:01.769
And again, the rebroadcast of the Developing
Websites for iPhones session here in this room.

00:48:01.769 --> 00:48:09.469
And then we are also very fortunate to have with us this
week, two very esteemed individuals that are contributing

00:48:09.469 --> 00:48:13.250
and making web applications become a reality on the web.

00:48:13.250 --> 00:48:19.389
We'll have Dillon and Alex Russell from the site penned the
Dojo Foundation for the Dojo library set giving a session.

00:48:19.389 --> 00:48:24.230
And then on Friday, we're also going to have a separate
session with the creator of prototype, Sam Stephenson,

00:48:24.230 --> 00:48:26.519
from 37 Signals, that will be here as well.

00:48:26.519 --> 00:48:28.119
So please, be sure to check out these sessions.

00:48:28.119 --> 00:48:29.639
We also have some labs.

00:48:29.639 --> 00:48:33.879
AJAX Web Development lab for two hours in the
graphics and media section downstairs tomorrow.

00:48:33.880 --> 00:48:37.760
And then on Friday, we'll have a
blog development lab covering MAMP

00:48:37.760 --> 00:48:41.830
and Press as well as our own OS X Server new feature sets.

00:48:41.829 --> 00:48:46.019
And then we have a Hybrid-Web/Cocoa Applications
Development lab on Friday, where those of you that

00:48:46.019 --> 00:48:51.599
might be thinking about I'm going to take the best
of the knowledge that I have inside of AppKit and

00:48:51.599 --> 00:48:55.579
apply that within Cocoa context with a WebKit view,
we're going to be showing some really compelling

00:48:55.579 --> 00:48:57.900
demos of what that means in that session
on Friday.

00:48:57.900 --> 00:48:59.610
But we also have a lab for you as well.