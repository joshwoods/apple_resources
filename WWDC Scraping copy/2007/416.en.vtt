WEBVTT

00:00:20.809 --> 00:00:25.009
>> Tim Monroe: This is going to talk about
how you can integrate QuickTime support

00:00:25.010 --> 00:00:28.490
into your application by using QTKit.

00:00:28.489 --> 00:00:32.059
My name is Tim Monroe and I will
soon be replaced by David Underwood

00:00:32.060 --> 00:00:35.800
to talk about the capture APIs we've added.

00:00:35.799 --> 00:00:40.819
So let's just give a little bit of an introduction to QTKit,
because I know a lot of you are first-time attendees.

00:00:40.820 --> 00:00:45.840
And even those who have been here before may be
looking at QTKit seriously for the first time.

00:00:45.840 --> 00:00:50.310
You all know, I hope, that it's a Cocoa
framework for working with QuickTime content.

00:00:50.310 --> 00:00:56.890
That means that it exposes a set of Objective C classes,
and we use all the normal Cocoa idioms to communicate

00:00:56.890 --> 00:01:00.259
between objects in the framework and your objects.

00:01:00.259 --> 00:01:05.399
For instance, the objects in the framework will
issue notifications when their state changes,

00:01:05.400 --> 00:01:12.810
you can modify the behavior of various objects by
implementing delegate methods, and so on and so forth.

00:01:12.810 --> 00:01:16.390
In Leopard, QTKit has really just
put the pedal to the metal.

00:01:16.390 --> 00:01:23.510
Anywhere in the user interface that you see a
QuickTime movie or a thumbnail from a QuickTime movie,

00:01:23.510 --> 00:01:29.830
chances are very good that QTKit is
behind the scenes there doing the work.

00:01:29.829 --> 00:01:33.129
Which was not true in earlier operating systems.

00:01:33.129 --> 00:01:38.519
In Leopard, there are two additional reasons
that you may want to look seriously at QTKit.

00:01:38.519 --> 00:01:44.299
The first one is as I already mentioned, we've
added some new capture capabilities to QuickTime.

00:01:44.299 --> 00:01:50.439
But currently in Leopard, the only way to get access
to those new capture capabilities is through QTKit.

00:01:50.439 --> 00:01:54.000
There's no C-level interface to that private framework.

00:01:54.000 --> 00:02:01.799
And the second reason to be interested in QTKit is that
if you're working with a 64-bit applicdation, once again,

00:02:01.799 --> 00:02:06.950
QTKit is the only way to get access to those
capabilities, to QuickTime capabilities.

00:02:06.950 --> 00:02:09.099
So what are we going to talk about here today.

00:02:09.099 --> 00:02:15.479
I am going to start with a real quick overview of QTKit,
and I'll do the basic build an application from the ground

00:02:15.479 --> 00:02:19.500
up sort of thing, so that you see how
easy it is to get QuickTime playback

00:02:19.500 --> 00:02:23.389
and even QuickTime editing in an application.

00:02:23.389 --> 00:02:29.319
I'll talk then about the new APIs we've added to the
existing classes; that is to say those that existed in Tiger.

00:02:29.319 --> 00:02:35.479
And then we will talk about some easy integration
with other parts of the imaging system.

00:02:35.479 --> 00:02:40.289
In particular, I'll show a nice example
of using Core Image to modify what comes

00:02:40.289 --> 00:02:44.449
out in a -- in the movie that you see on the screen.

00:02:44.449 --> 00:02:50.739
I'll talk a little bit, but not much, about Core Animation,
and then I'll say a little bit about 64-bit operation.

00:02:50.740 --> 00:02:56.680
And after that, the second half of the talk
will be largely about audio and video capture.

00:02:56.680 --> 00:02:57.569
So let's get started.

00:02:57.569 --> 00:03:02.870
As I said, QTKit is a Cocoa framework
for working with QuickTime content.

00:03:02.870 --> 00:03:06.939
In Tiger we had five classes in QTKit.

00:03:06.939 --> 00:03:11.669
If you're familiar with QuickTime you know
that the data is organized into movies.

00:03:11.669 --> 00:03:14.109
A movie is a collection of tracks.

00:03:14.110 --> 00:03:17.460
And a track can refer to media data.

00:03:17.460 --> 00:03:22.439
So the first three classes that I've
listed here are object-oriented wrappers

00:03:22.439 --> 00:03:25.449
around those basic QuickTime notions.

00:03:25.449 --> 00:03:30.659
You may also know that the basic QuickTime
way of referring to the location of a movie

00:03:30.659 --> 00:03:34.930
or to media data is what's -- with
what's called a data reference.

00:03:34.930 --> 00:03:38.760
So the fourth class that I've listed
there, QTDataReference, again,

00:03:38.759 --> 00:03:42.859
is an object-oriented wrapper around
the notion of a data reference.

00:03:42.860 --> 00:03:44.990
And the final one should be obvious.

00:03:44.990 --> 00:03:52.850
QTMovieView is a subclass of NSView which you could
use to display a QuickTime movie in a window or in a view

00:03:52.849 --> 00:03:57.769
onscreen, and also to control the movie in various ways.

00:03:57.770 --> 00:04:01.550
Now I'm only going to talk about the
first and the last class here today.

00:04:01.550 --> 00:04:07.240
The middle three are for more specialized uses
that we just don't have time to get into today.

00:04:07.240 --> 00:04:09.530
So let's look at QTMovie.

00:04:09.530 --> 00:04:12.330
QTMovie is by far the richest class that we have.

00:04:12.330 --> 00:04:15.600
There are dozens and dozens of methods in QTmovie.

00:04:15.599 --> 00:04:17.110
So I'm going to touch on just a few.

00:04:17.110 --> 00:04:20.840
The first thing you're going to want to do
with the movie is open it up from a file.

00:04:20.839 --> 00:04:25.319
And you'll use initWithFile error to do that, probably.

00:04:25.319 --> 00:04:30.829
So you pass in a file name and we will
give you back a QTMovie that is associated

00:04:30.829 --> 00:04:33.639
with the QuickTime movie data in that file.

00:04:33.639 --> 00:04:41.930
The standard way to change attributes of a QuickTime
movie is with the setAttribute forKey method.

00:04:41.930 --> 00:04:44.910
And we'll see an example of that in just a minute.

00:04:44.910 --> 00:04:49.950
If the user has opened a movie and done some edits
on it, and you want to save the edited movie back

00:04:49.949 --> 00:04:53.159
into the file, you'll call updateMovieFile.

00:04:53.160 --> 00:04:57.730
Now the last two methods that I've
listed here are very interesting.

00:04:57.730 --> 00:05:03.430
It's important that you understand that QTKit
is a subset of QuickTime functionality.

00:05:03.430 --> 00:05:05.000
It's a proper subset.

00:05:05.000 --> 00:05:09.100
So the entire CAPI is not reflected in QTKit.

00:05:09.100 --> 00:05:14.040
There are some things that we just
have not had the time to implement.

00:05:14.040 --> 00:05:20.450
And so what you need sometimes is a way
to get down and use the CAPI in areas

00:05:20.449 --> 00:05:23.829
that we are not offering an object-oriented wrapper.

00:05:23.829 --> 00:05:27.969
So the final two methods here, QuickTime
Movie and QuickTime movie Controller,

00:05:27.970 --> 00:05:30.310
are ways -- what I like to call escape hatches.

00:05:30.310 --> 00:05:32.740
They let you get down into the CAPI.

00:05:32.740 --> 00:05:37.129
You can get the Movie or the Movie
Controller associated with the QTMovie,

00:05:37.129 --> 00:05:43.279
and then call the C Language functions on that identifier.

00:05:44.660 --> 00:05:48.150
I said QTMovieView is a subclass of NSView.

00:05:48.149 --> 00:05:54.229
So you will instantiate a QTMovieView by
calling the standard initWithFrame method.

00:05:54.230 --> 00:05:57.810
Or more likely, you'll just put
a QTMovieView in your nib file

00:05:57.810 --> 00:06:03.410
and it will be automatically instantiated
when you open that nib file.

00:06:03.410 --> 00:06:06.120
To set a movie into a view, very simple.

00:06:06.120 --> 00:06:07.870
You call setMovie.

00:06:07.870 --> 00:06:14.600
If you want to get the movie that's currently associated
with a QTMovieView, you can call the Movie method.

00:06:14.600 --> 00:06:19.090
And the last one here is just an example
of the sort of method you can use

00:06:19.089 --> 00:06:24.099
to modify the user interface shown by QTMovieView.

00:06:24.100 --> 00:06:32.930
This one in particular hides or exposes
the resize indicator in the controller bar.

00:06:35.470 --> 00:06:43.110
Now in addition to those five classes we also have several
data structures that you will use in the QTKit API.

00:06:43.110 --> 00:06:49.920
In particular, these two; QTTime, and QTTimeRange
you will use to indicate a particular time

00:06:49.920 --> 00:06:53.890
in a movie, or a duration, and then a time range.

00:06:53.889 --> 00:06:57.349
So the QTTime -- let's look at timeScale.

00:06:57.350 --> 00:07:05.050
The timeScale field is the number of units per second
that you are to interpret the timeValue field in.

00:07:05.050 --> 00:07:09.449
So for instance, if I wanted to indicate
a point that's 2 seconds into a movie,

00:07:09.449 --> 00:07:13.189
I could set timeScale to 1, and timeValue to 2.

00:07:13.189 --> 00:07:17.360
Or I could set timeScale to 600, and timeValue to 1200.

00:07:17.360 --> 00:07:18.930
And so forth.

00:07:18.930 --> 00:07:23.840
And as you can see a QTTimeRange
is just two QTTime structures.

00:07:23.839 --> 00:07:30.709
One of which indicates the beginning of the range and
the other of which indicates the duration of the range.

00:07:30.709 --> 00:07:35.209
And we also have a whole bunch of functions
that you can use to create and operate

00:07:35.209 --> 00:07:38.979
on QTTime structures or QTTimeRange structures.

00:07:38.980 --> 00:07:41.050
And here I've listed just four of them.

00:07:41.050 --> 00:07:46.650
The standard way to get a QTTime structure is
to pass in the timeValue and the timeScale,

00:07:46.649 --> 00:07:50.859
and QTKit will give you back a QTTime structure.

00:07:50.860 --> 00:07:57.629
If you have two QTTime structures and you want to increment
them, add them together, you can call QTTimeIncrement.

00:07:57.629 --> 00:08:06.659
If you want to scale a given QTTime structure with a
different timeScale you can call QTMakeTimeScaled.

00:08:06.660 --> 00:08:08.570
And the last one, again, fairly obvious.

00:08:08.569 --> 00:08:14.120
If you want to create a QTTimeRange,
pass in the two QTTimes for the start time

00:08:14.120 --> 00:08:17.240
and the duration and you'll get back a TimeRange.

00:08:17.240 --> 00:08:18.360
All right.

00:08:18.360 --> 00:08:20.000
That's enough of the overview that I want to give.

00:08:20.000 --> 00:08:26.819
What I want to do now is jump right in and
actually build a QTKit application from scratch.

00:08:26.819 --> 00:08:30.209
So we're over here on the demo machine.

00:08:30.209 --> 00:08:32.139
And I've got Xcode launched already.

00:08:32.139 --> 00:08:34.970
And I'm just going to create a New Project.

00:08:34.970 --> 00:08:40.980
And what I'd like to create is a project that
can open one or more QuickTime movies in windows

00:08:40.980 --> 00:08:43.879
on the screen, and allow you to edit those movies.

00:08:43.879 --> 00:08:50.029
So I'm going to select the Cocoa
Document-based Application right there.

00:08:50.029 --> 00:08:55.309
And let's call this wwdcdemo.

00:08:56.720 --> 00:09:04.620
And this is the default New Project window
for a Cocoa Document-based Application.

00:09:04.620 --> 00:09:09.220
Now the first thing you want to do is make
sure that you link in the QTKit framework.

00:09:09.220 --> 00:09:15.600
So I'll come down here to Linked Frameworks, and
Control-click, and then I can Add an Existing Framework.

00:09:15.600 --> 00:09:18.940
This automatically takes me to System Library Frameworks.

00:09:18.940 --> 00:09:23.440
And I will just search down here for QTKit Framework.

00:09:23.440 --> 00:09:24.510
There it is.

00:09:24.509 --> 00:09:26.950
And I will add it to my project.

00:09:26.950 --> 00:09:33.820
The next thing you want to do is specify what sorts
of files your application should be able to open.

00:09:33.820 --> 00:09:38.360
So I will select the target here and get its information.

00:09:38.360 --> 00:09:42.940
And then under Properties, let's make that a little bigger.

00:09:42.940 --> 00:09:45.220
I can -- set the extension.

00:09:45.220 --> 00:09:49.920
In this case, it will be .mov
-- and the file type will be MOOV.

00:09:49.919 --> 00:09:51.740
Now, at this point we can add other file types too.

00:09:51.740 --> 00:09:54.720
We could add MP3, we could add Swift files.

00:09:54.720 --> 00:09:58.889
But for the moment we will just stick with .mov files.

00:09:58.889 --> 00:10:00.539
So we're done with that.

00:10:00.539 --> 00:10:05.329
Now let's come up here and define our class interface.

00:10:05.330 --> 00:10:10.879
So I'm opening MyDocument.h. And I'll change
Cocoa/Cocoa.h to QTKit/QTKit.h.

00:10:10.879 --> 00:10:17.210
And I'm just going to have one
thing in my document window.

00:10:17.210 --> 00:10:19.460
That's doing to be a QTMovieView.

00:10:19.460 --> 00:10:24.490
And let's call it movieView.

00:10:26.409 --> 00:10:29.110
There. It looks good.

00:10:29.110 --> 00:10:31.690
Okay. Now let's set up our user interface.

00:10:31.690 --> 00:10:33.700
And this is going to be very simple.

00:10:33.700 --> 00:10:36.250
Let's open the Document.nib.

00:10:36.250 --> 00:10:38.370
This will launch Interface Builder Three.

00:10:38.370 --> 00:10:42.529
And this is the default look of the default document window.

00:10:42.529 --> 00:10:44.089
We'll just get rid of that text there.

00:10:44.090 --> 00:10:51.540
And then I will scroll down in my Object Library,
until I find this icon which is a QTMovieView.

00:10:51.539 --> 00:10:56.149
So I'm going to position it so that
it completely fills the window.

00:10:56.149 --> 00:11:06.899
And then I want to set the resizing attributes so that
when I resize the window, the view will resize with it.

00:11:06.899 --> 00:11:18.289
And the final thing I need to do here is in the Files
Owner add a New Instance variable -- sorry, a New Outlet.

00:11:18.289 --> 00:11:20.839
And of course we want to call that movieView.

00:11:20.840 --> 00:11:38.720
And then we want to connect that -- why isn't
it letting me get -- let me try that again.

00:11:42.580 --> 00:11:46.220
I thought I said movieView.

00:11:46.220 --> 00:11:51.740
Okay. Now let's try connecting this to movieView.

00:11:51.740 --> 00:11:52.700
Bingo. Okay.

00:11:52.700 --> 00:11:55.360
So we're done with that.

00:11:55.360 --> 00:12:00.159
I also need to make a quick change to the MainMenu.nib.

00:12:00.159 --> 00:12:08.509
It turns out that the default project does not
connect to the open dial -- uh menu item -- to anything.

00:12:08.509 --> 00:12:13.169
So let's connect it to the first responder.

00:12:13.169 --> 00:12:17.229
And of course we want to connect
it to the open document action.

00:12:17.230 --> 00:12:29.090
Oops. This machine is way too fast.

00:12:30.409 --> 00:12:32.189
Okay. I think we're done there.

00:12:32.190 --> 00:12:36.610
Now the final thing we need to do is
add some code to the document class.

00:12:36.610 --> 00:12:42.460
And the -- got to love these mice.

00:12:42.460 --> 00:12:45.250
The method we want to change now
is windowControllerDidLoadNib,

00:12:45.250 --> 00:12:49.429
so this will be executed whenever we load a nib file.

00:12:50.500 --> 00:12:56.460
And the code we want to add there is very simple.

00:12:56.460 --> 00:13:13.519
We'll just open the file -- so here you can see if the
user has selected a file in the open dialogue box,

00:13:13.519 --> 00:13:20.169
I'm going to call movieWithFile to create a QTMovie
object from that file name -- from the data in that file.

00:13:20.169 --> 00:13:23.129
Then I'm going set the movie to be editable.

00:13:23.129 --> 00:13:24.980
By default a movie is not editable.

00:13:24.980 --> 00:13:26.710
So I want to allow editing.

00:13:26.710 --> 00:13:27.920
So I will set it to be editable.

00:13:27.919 --> 00:13:32.000
And finally, I will just set the
movie onto the view like that.

00:13:32.000 --> 00:13:37.470
So let's save that, and if everything has
gone right we should be able to build that.

00:13:37.470 --> 00:13:39.600
This will take just a second.

00:13:40.899 --> 00:13:41.850
Okay. Build succeeded.

00:13:41.850 --> 00:13:45.560
Let's try running it and see what we get.

00:13:45.559 --> 00:13:49.299
There's the default window, so let's
actually go out and open a QuickTime movie.

00:13:49.299 --> 00:13:53.199
Here is the stupid movie.

00:13:53.200 --> 00:13:54.970
And it opened.

00:13:54.970 --> 00:13:58.480
And -- it should play fine.

00:13:58.480 --> 00:13:58.920
There we go.

00:13:58.919 --> 00:14:01.539
We have no audio out on this machine, but that's okay.

00:14:01.539 --> 00:14:04.079
Notice that I can resize it.

00:14:04.080 --> 00:14:06.800
But there's one problem here that you can see.

00:14:06.799 --> 00:14:13.279
The Window Resize box overlaps with one of the
controls in the QuickTime movie controller bar.

00:14:13.279 --> 00:14:17.740
So I can step back by clicking the Step
Back button, but I can't step forward.

00:14:17.740 --> 00:14:19.539
All I can do is use that to resize.

00:14:19.539 --> 00:14:21.589
So let's fix that problem really quickly.

00:14:21.590 --> 00:14:31.200
And that's really easy to fix using the
setShowsResizeIndicator method that I talked about earlier.

00:14:31.200 --> 00:14:37.750
So what we want to do is tell them -- window associated
with the movieView not to draw its resize indicator,

00:14:37.750 --> 00:14:42.049
but we want the movieView to draw its resize indicator.

00:14:42.049 --> 00:14:43.179
So let's save that.

00:14:43.179 --> 00:14:45.620
Build it. And run it.

00:14:45.620 --> 00:14:51.679
And in this case, when we open that same movie --

00:14:51.679 --> 00:14:55.539
now you can see that we have the Movie
Controllers resize indicator there,

00:14:55.539 --> 00:14:58.669
and I can indeed step forward with the Step Forward button.

00:14:58.669 --> 00:15:06.049
But of course we went black there so, as you can
see I can step forward with that button.

00:15:06.049 --> 00:15:08.000
Okay. So, let's see.

00:15:08.000 --> 00:15:09.019
Is that all I want to do there?

00:15:09.019 --> 00:15:17.110
No. Let me run that again and show you
that I have a fully editable movie.

00:15:17.110 --> 00:15:23.139
So I can make a selection range here
and just use the Edit Menu to cut.

00:15:23.139 --> 00:15:26.679
I could say come to the end here and paste it in.

00:15:26.679 --> 00:15:28.639
I can also use the keyboard short cuts.

00:15:28.639 --> 00:15:34.210
So let's select some other range and
do Command-X, and that cuts that.

00:15:34.210 --> 00:15:37.860
And maybe paste it in the beginning here with Command-V.

00:15:37.860 --> 00:15:41.960
And one nice feature, I can Undo that paste.

00:15:41.960 --> 00:15:43.879
I can Undo the cut.

00:15:43.879 --> 00:15:45.320
I can Undo the first paste.

00:15:45.320 --> 00:15:46.520
I can Undo the first cut.

00:15:46.519 --> 00:15:51.230
So I have essentially unlimited
Undo with all of my edit operations.

00:15:51.230 --> 00:15:53.710
Nice frame there.

00:15:53.710 --> 00:15:55.740
And I got all of that editing capability.

00:15:55.740 --> 00:16:02.350
All the tie-in with the Edit Menu, all the Undo with
that one line of code that said make the movie editable.

00:16:02.350 --> 00:16:05.409
Okay. If I can go back two slides, please.

00:16:08.389 --> 00:16:14.610
So just to recap, this is the little
bit of code that we used to open a movie

00:16:14.610 --> 00:16:19.029
and to make it editable and to set it into the view.

00:16:19.029 --> 00:16:27.100
One thing I did not show you was if you select the Save
menu item you need to call the updateMovieFile method

00:16:27.100 --> 00:16:30.490
to save the edited movie back into the file it came from.

00:16:30.490 --> 00:16:35.769
And then as you can see I'm calling an
NS document method updateChangeCount

00:16:35.769 --> 00:16:38.250
to let the window know that it's been cleared.

00:16:38.250 --> 00:16:40.200
It's no longer dirty.

00:16:40.200 --> 00:16:46.120
So it's really just that simple to get an
application up and running with QTKit.

00:16:46.120 --> 00:16:50.139
So let's talk a little bit about new
APIs in those five existing classes.

00:16:50.139 --> 00:16:54.939
Again, I am just going to give you the
-- what are the highlights in my mind.

00:16:54.940 --> 00:17:01.180
We can't go through every new API in every
existing class or we'd be here all night.

00:17:01.179 --> 00:17:03.669
So we've added three interesting things to QTMovie.

00:17:03.669 --> 00:17:09.069
The ability to create a writable movie container,
and I'll explain what that means in a minute

00:17:09.069 --> 00:17:14.439
We've added a method that allows you to remove a track from
a movie, and we've also really done some nice improvements

00:17:14.440 --> 00:17:20.000
on the methods that allow you to
get an image of a frame in a movie.

00:17:20.000 --> 00:17:26.630
So in QTKit as it existed in Tiger, the basic idea was
that you could go out and open existing movies, edit them,

00:17:26.630 --> 00:17:29.360
and save the edited movies back on to disc.

00:17:29.359 --> 00:17:34.229
Also maybe do things like export the movie in a
different form and other things like that.

00:17:34.230 --> 00:17:36.759
One thing that sort of slipped
through the cracks was the ability

00:17:36.759 --> 00:17:41.609
to create an empty movie, add data
to it, and then save that out.

00:17:41.609 --> 00:17:49.659
That's a case where you needed those escape door methods
to get down into the CAPI to do that sort of thing.

00:17:49.660 --> 00:17:51.060
So we thought that's not good.

00:17:51.059 --> 00:17:53.929
Let's add some new API that makes this easy.

00:17:53.930 --> 00:17:56.670
So we added the API initToWritableFile.

00:17:56.670 --> 00:18:02.960
And what that does is you pass in a file name,
this method will create a file at that location,

00:18:02.960 --> 00:18:07.309
and pass you back a QTMovie object
associated with that file.

00:18:07.309 --> 00:18:10.809
You can then add data into that new movie, which is empty.

00:18:10.809 --> 00:18:13.029
Say, by pasting in from some other movie.

00:18:13.029 --> 00:18:14.359
Or like I'm doing here.

00:18:14.359 --> 00:18:20.549
Reading an image out of my bundle and then calling
the addImage forDuration withAttributes method.

00:18:20.549 --> 00:18:25.789
And then I just call our favorite little method,
updateMovieFile, and it will write that data

00:18:25.789 --> 00:18:31.089
out into what formerly was an empty file, and
which is now a completely formed QuickTime movie.

00:18:31.089 --> 00:18:34.970
So that's a very nice addition to the API.

00:18:34.970 --> 00:18:38.350
Another nice addition is the ability to remove a track.

00:18:38.349 --> 00:18:45.139
Now this is a case where even if you've got the QuickTime
movie identifier associated with the QTMovie,

00:18:45.140 --> 00:18:52.110
and went down into the CAPI, and called the CAPIs to delete
a track, you essentially would shoot yourself in the foot.

00:18:52.109 --> 00:18:53.849
You would quickly crash.

00:18:53.849 --> 00:19:01.339
It simply was not possible to use a CAPI to
remove a track and not cause problems with QTKit.

00:19:01.339 --> 00:19:07.359
So since people wanted to do that, we added this method
-- removeTrack -- which is very straight forward.

00:19:07.359 --> 00:19:14.449
In this example I am just getting the array
of tracks in a movie using the Tracks method.

00:19:14.450 --> 00:19:20.789
Then I'm grabbing the first item in that
array and simply removing it from the movie.

00:19:20.789 --> 00:19:27.500
If I would then call up that movie file, the movie file
on disc would have one fewer track than it had before.

00:19:27.500 --> 00:19:29.420
Getting a movie frame image.

00:19:29.420 --> 00:19:31.890
We've done some very nice improvements in this area.

00:19:31.890 --> 00:19:35.560
On the top I've listed the API as it exists in Tiger.

00:19:35.559 --> 00:19:38.679
frameImageAtTime -- you give us a time in the movie,

00:19:38.680 --> 00:19:44.340
and we'll give you back an NSImage
that is the frame at that time.

00:19:44.339 --> 00:19:47.399
Now there wasn't a whole lot of
functionality here in the sense

00:19:47.400 --> 00:19:51.780
that you always got back an NSImage,
whether that's what you wanted or not.

00:19:51.779 --> 00:19:55.180
Right? And you always got back an
image which was the current size

00:19:55.180 --> 00:19:57.549
of the movie, whether that's what you wanted or not.

00:19:57.549 --> 00:20:03.529
So people ended up doing a lot of post-processing
on the images they would get back from this method.

00:20:03.529 --> 00:20:05.210
And we got a lot of enhancement requests.

00:20:05.210 --> 00:20:06.870
So we added this new method --

00:20:06.869 --> 00:20:09.619
frameImageAtTime withAttributes error.

00:20:09.619 --> 00:20:16.319
The idea being, you can now pass in a dictionary
of attributes describing exactly the kind

00:20:16.319 --> 00:20:19.450
of image you want, exactly the size you want.

00:20:19.450 --> 00:20:25.299
And we'll give you back that instead of just a
plain old NSImage of the current movie size.

00:20:25.299 --> 00:20:29.619
So let's look at some of the attributes you can specify.

00:20:29.619 --> 00:20:33.169
You can tell us what size you want the returned image to be.

00:20:33.170 --> 00:20:34.480
Very straight forward.

00:20:34.480 --> 00:20:37.269
You can tell us what kind of image you want back.

00:20:37.269 --> 00:20:39.980
So we'll still give you back an
NSImage, if that's what you want.

00:20:39.980 --> 00:20:42.690
Or you can also ask for other types of image.

00:20:42.690 --> 00:20:47.410
Say, a CIImage, if that's what your
application would find most useful.

00:20:47.410 --> 00:20:50.890
The final three here are boolean values that you can use

00:20:50.890 --> 00:20:55.240
to say I want you to deinterlace
the fields of this image,

00:20:55.240 --> 00:20:59.750
I want you to give me the highest quality,
and I want you to give me a single field.

00:20:59.750 --> 00:21:04.519
And we'll get a real good example
of how useful that is in a second.

00:21:04.519 --> 00:21:07.069
This lists the available image types in Leopard.

00:21:07.069 --> 00:21:12.799
You can get an NSImage, you can get a
CGImageRef, you can get a CIImage,

00:21:12.799 --> 00:21:18.619
you can get a CVPixelBuffer, or if you're working in
OpenGL, you can actually get an OpenGLTexture back.

00:21:18.619 --> 00:21:20.929
And work with that.

00:21:20.930 --> 00:21:26.289
If you ask for an NSImage right now
using the frameImageAtTime method,

00:21:26.289 --> 00:21:32.430
you will get back an NSImage with an NS picked ImageRep.

00:21:32.430 --> 00:21:36.620
Well, QuickTime -- QuickDraw has
been deprecated for a little while.

00:21:36.619 --> 00:21:39.489
So the picked ImageRep isn't going
to do you a whole lot of good.

00:21:39.490 --> 00:21:45.440
And people found themselves writing code to
convert that image into something more useful.

00:21:45.440 --> 00:21:51.480
Now you can tell us exactly what kind of image
representation you want in the image we pass you back.

00:21:51.480 --> 00:21:54.970
By default you're going to get back an NSBitmapImageRep.

00:21:54.970 --> 00:21:59.259
But you could ask for any of the other available ImageReps.

00:21:59.259 --> 00:22:03.000
And if you want an OpenGLTexture you've got
to give us two additional pieces of information.

00:22:03.000 --> 00:22:06.740
You need to give us the OpenGLContext
and the PixelFormat.

00:22:06.740 --> 00:22:10.930
And we'll hand you back a texture that
you can then draw into that context.

00:22:10.930 --> 00:22:18.710
So here's a simple example of how you would use
rameImageAtTime withAttributes error to get a CGImageRef.

00:22:18.710 --> 00:22:25.170
You'll make the dictionary with one key value
pair, saying that you want a CGImageRef.

00:22:25.170 --> 00:22:27.120
You'll then say what time you want.

00:22:27.119 --> 00:22:28.789
Say, the current time in the movie.

00:22:28.789 --> 00:22:32.849
Then you'll call the new method
and get back your CGImageRef.

00:22:32.849 --> 00:22:36.889
So let's look at this a little bit more closely in a demo.

00:22:36.890 --> 00:22:41.000
So let's hide that.

00:22:41.000 --> 00:22:45.319
And I've got a precanned application
here just to save us some time.

00:22:45.319 --> 00:22:52.960
And what I want to demonstrate is the quality
improvements that we have made in this API.

00:22:52.960 --> 00:22:55.730
So I'll just open a random movie.

00:22:55.730 --> 00:23:01.049
And you can see I've got two buttons there;
one labeled Tiger and one labeled Leopard.

00:23:01.049 --> 00:23:07.519
This is what you would get if you call frameImageAtTime
in Tiger, or indeed, in Leopard.

00:23:07.519 --> 00:23:09.420
This movie is a DV movie.

00:23:09.420 --> 00:23:13.100
And it was made with a camera that interlaces the frames.

00:23:13.099 --> 00:23:19.349
So you can see, especially if you look, say, at
the right-hand here, it really looks pretty bad.

00:23:19.349 --> 00:23:22.149
You're getting a lot of interlace artifacts there, right?

00:23:22.150 --> 00:23:29.530
That was what you got with frameImageAtTime
called on an interlaced DV movie in Tiger.

00:23:29.529 --> 00:23:34.539
Now if you call frameImageAtTime withAttributes
error, and pass it in nil set of attributes,

00:23:34.539 --> 00:23:39.430
which essentially says give me all the
default values, this is what you'll get.

00:23:39.430 --> 00:23:40.610
A much nicer image.

00:23:40.609 --> 00:23:41.909
Higher quality.

00:23:41.910 --> 00:23:44.650
The interlacing is gone.

00:23:44.650 --> 00:23:45.680
So let's see that again.

00:23:45.680 --> 00:23:48.330
There's the old bad way.

00:23:48.329 --> 00:23:50.099
The wonderful new way.

00:23:50.099 --> 00:23:54.089
Just to really drive this home, let's go to
the first frame.

00:23:54.089 --> 00:23:58.549
This looks almost like it's had a CI
filter applied to it; it looks so bad.

00:23:58.549 --> 00:24:01.289
But then in Leopard you'll get a much nicer image.

00:24:01.289 --> 00:24:03.529
Okay? So that's what I wanted to show there.

00:24:03.529 --> 00:24:05.210
Can I go back to slides?

00:24:05.210 --> 00:24:07.410
( Applause )

00:24:07.410 --> 00:24:08.009
>> Tim Monroe: Thank you.

00:24:08.009 --> 00:24:09.589
( Applause )

00:24:09.589 --> 00:24:14.659
>> Tim Monroe: So more capability, better
quality, it's got to be slower, right?

00:24:14.660 --> 00:24:22.080
No. In Tiger, or again in Leopard, because the
old API is still there if you want to use it,

00:24:22.079 --> 00:24:27.960
this is what you would get if you stepped through a
movie and got a frame image at every frame of the movie.

00:24:27.960 --> 00:24:31.430
For a given movie it might take you 131 seconds.

00:24:31.430 --> 00:24:36.529
Now using the API that I just showed, that is to
say frameImageAtTime withAttributes error,

00:24:36.529 --> 00:24:42.089
and a nil set of attributes asking for the
default values, that will happen in 98 seconds.

00:24:42.089 --> 00:24:45.379
So we've chopped almost a third off that.

00:24:45.380 --> 00:24:49.750
Now, mind you, we have done zero
work to optimize this new method.

00:24:49.750 --> 00:24:54.059
All we've done so far is implement it to give
all the capabilities that we could.

00:24:54.059 --> 00:24:58.589
So I was playing around the other day and I
thought, you know, if I'm getting the image

00:24:58.589 --> 00:25:02.809
from the same movie there's a lot of build
up and tear down that I don't need to do.

00:25:02.809 --> 00:25:12.269
So I defined a new private selector or key that
puts the method into what I call session mode.

00:25:12.269 --> 00:25:16.170
Telling the method that I'm going to
keep calling this on the same movie.

00:25:16.170 --> 00:25:21.480
And then when I run this loop through
that movie, using this private selector,

00:25:21.480 --> 00:25:25.900
I'm down to 53 seconds to get all
of the images in that movie.

00:25:25.900 --> 00:25:31.640
So it's a good chance that I can persuade people
to make this a public API, and you could use that,

00:25:31.640 --> 00:25:36.900
if you're going to step through the same movie.

00:25:36.900 --> 00:25:40.990
Let's talk a little bit about Core Image.

00:25:40.990 --> 00:25:44.380
We added a very nice delegate method to QTMovieView.

00:25:44.380 --> 00:25:46.730
It's called view willDisplayImage.

00:25:46.730 --> 00:25:56.170
The idea being before QTMovieView draws the movie frame
in its view, it gives you a chance to modify the image.

00:25:56.170 --> 00:26:04.210
And as you can see we will pass you a CIImage, and
then you can do whatever you want with that CIImage.

00:26:04.210 --> 00:26:06.549
You're going to pass us back a CIImage.

00:26:06.549 --> 00:26:10.919
And that's what gets drawn in the frame of the window.

00:26:10.920 --> 00:26:15.970
So let's look at an example of how easy
it is to apply a CIFilter to a movie.

00:26:15.970 --> 00:26:23.100
If I can go to the demo machine -- I am just going
to bring forward the same project that I did earlier.

00:26:23.099 --> 00:26:25.769
And this time I'm going add in a Delegate method --

00:26:25.769 --> 00:26:28.869
view willDisplayImage --

00:26:28.869 --> 00:26:32.259
and it's going to be very simple.

00:26:32.259 --> 00:26:38.450
If you've worked with Core Image and core filters,
this will be perfectly straight forward to you.

00:26:38.450 --> 00:26:41.470
I am just going to use a glass distortion filter.

00:26:41.470 --> 00:26:43.059
I'll set the defaults.

00:26:43.059 --> 00:26:49.799
I'm going to read from my bundle an image
that defines the distortion texture.

00:26:49.799 --> 00:26:57.899
And then I'll say, well, the input image for this filter
is the image that I'm being passed in by QTMovie.

00:26:57.900 --> 00:27:03.110
And the result that I want to pass back
is just the output image of the filter.

00:27:03.109 --> 00:27:16.469
And one other thing I need to do, of course, is set myself
or the movieView as the delegate -- sorry -- movieView --

00:27:16.470 --> 00:27:21.009
setDelegate -- and that will just be me;

00:27:21.009 --> 00:27:23.930
this particular class.

00:27:23.930 --> 00:27:25.360
Now I need to do a couple more things.

00:27:25.359 --> 00:27:29.769
Let's save that, and I can actually close
this, but I'll just move it out of the way.

00:27:29.769 --> 00:27:34.240
Since I'm working with Core Image filters
I need to add in the QuartzCore.framework.

00:27:34.240 --> 00:27:36.529
And I'll do that in just the way I did before --

00:27:36.529 --> 00:27:39.450
Add an Existing Framework --

00:27:39.450 --> 00:27:42.940
and we'll come down here and look for QuartzCore.

00:27:42.940 --> 00:27:45.200
There it is.

00:27:45.200 --> 00:27:47.390
Now, in theory this should build.

00:27:47.390 --> 00:27:49.720
If I haven't forgotten anything.

00:27:49.720 --> 00:27:50.450
Build has succeeded.

00:27:50.450 --> 00:27:52.190
Now let's run it.

00:27:52.190 --> 00:27:56.130
And let's open that same movie that we opened before.

00:27:56.130 --> 00:28:00.750
Ah. Something's wrong.

00:28:05.390 --> 00:28:14.750
Let me think about this for a minute.

00:28:14.750 --> 00:28:17.470
Ah. (Inaudible) -- what?

00:28:17.470 --> 00:28:18.920
Any suggestions?

00:28:18.920 --> 00:28:23.390
Let me think about this.

00:28:23.390 --> 00:28:26.180
I added the framework.

00:28:33.289 --> 00:28:33.970
I set -- oh.

00:28:33.970 --> 00:28:35.130
Yeah. Very good.

00:28:35.130 --> 00:28:36.090
Very, very good.

00:28:36.089 --> 00:28:37.059
Thank you.

00:28:37.059 --> 00:28:40.629
I forget to add the texture to my project.

00:28:40.630 --> 00:28:42.160
So I'm going to come over here.

00:28:42.160 --> 00:28:44.920
And I happen to have it sitting on my desktop.

00:28:44.920 --> 00:28:46.769
I knew I wasn't crazy.

00:28:46.769 --> 00:28:48.859
So we'll just add it to our resources.

00:28:48.859 --> 00:28:52.859
And now let's build it.

00:28:52.859 --> 00:28:54.829
And now let's run it.

00:28:54.829 --> 00:28:57.759
Yeah. And now let's open that previous file.

00:28:57.759 --> 00:29:00.809
All right.

00:29:00.809 --> 00:29:03.069
And we'll move to a more interesting frame.

00:29:03.069 --> 00:29:09.589
And now we see that the same movie plays, but I have
added the CIFilter which is the glass distortion.

00:29:09.589 --> 00:29:12.949
Great. Ok. So back to --

00:29:12.950 --> 00:29:17.789
( Applause )

00:29:17.789 --> 00:29:25.180
>> Tim Monroe: Again, it's really just this
simple to add that kind of effect to a movieView.

00:29:26.450 --> 00:29:29.019
Core animation integration.

00:29:29.019 --> 00:29:35.210
There isn't a whole lot to say there, other than we have
added the obvious classes to support core animation.

00:29:35.210 --> 00:29:39.470
In particular, we've added
QTMovieLayer and QTCaptureLayer.

00:29:39.470 --> 00:29:42.799
MovieLayer lets you play a movie in a layer.

00:29:42.799 --> 00:29:51.480
CaptureLayer lets you take data being captured live from
devices attached to the computer and put them in a layer.

00:29:51.480 --> 00:29:54.660
And I don't have a whizzy demo
because you've already seen one.

00:29:54.660 --> 00:30:00.360
When Steve did the Keynote he had that big wall of layers.

00:30:00.359 --> 00:30:03.750
The movies playing in there were using QTMovieLayer.

00:30:03.750 --> 00:30:07.220
Okay. So it's really -- and the performance was excellent.

00:30:07.220 --> 00:30:11.710
So we integrate very well with core animation.

00:30:11.710 --> 00:30:13.450
64-bit. What's to be said.

00:30:13.450 --> 00:30:15.220
Not a whole lot.

00:30:15.220 --> 00:30:18.930
I've already told you that if you
need to move into 64-bits and you want

00:30:18.930 --> 00:30:22.500
to get QuickTime capabilities, you need to use QTKit.

00:30:22.500 --> 00:30:26.299
QuickTime framework is not available in 64-bits.

00:30:26.299 --> 00:30:29.750
The API is identical to everything we've talked about.

00:30:29.750 --> 00:30:34.640
All of the new methods that we've added into
Leopard are available to you in 64-bit.

00:30:34.640 --> 00:30:44.180
There's one principled limitation, which is these escape
door methods, the ability to get the QuickTime movie,

00:30:44.180 --> 00:30:51.539
or the QuickTime movie controller, or the QuickTime track,
or the QuickTime media is simply not there in 64-bits.

00:30:51.539 --> 00:30:53.369
Because there's no QuickTime framework.

00:30:53.369 --> 00:30:56.209
You couldn't do anything useful with those identifiers.

00:30:56.210 --> 00:31:02.360
In the three that you've got, there are two
limitations that will be eventually removed.

00:31:02.359 --> 00:31:07.399
We haven't had time to do the drag and drop
editing, and there are some drawing glitches.

00:31:07.400 --> 00:31:11.800
So you should know that when you
start building 64-bit applications.

00:31:11.799 --> 00:31:21.799
So now I'd like to bring David up to talk to you about
the new capture capabilities that we have in QTKit.

00:31:21.799 --> 00:31:22.109
( Applause )

00:31:22.109 --> 00:31:24.179
>> David Underwood: Thanks Tim.

00:31:25.440 --> 00:31:30.210
So today I am going show you just a handful of the things
you're going be able to do with the new capture API.

00:31:30.210 --> 00:31:35.579
Again, if we showed you every class and method
you would never be able to leave this building.

00:31:35.579 --> 00:31:40.009
So when we talk about capture, what we're
referring to really is you're taking some sort

00:31:40.009 --> 00:31:44.710
of external real-time media source, and you
want to take the data off that and get it

00:31:44.710 --> 00:31:47.200
onto your computer and use that data somehow.

00:31:47.200 --> 00:31:53.600
So in this case -- our API supports, you know, pretty
common obvious sources, like the iSight which is a camera

00:31:53.599 --> 00:31:56.109
that we ship on almost every new Mac now.

00:31:56.109 --> 00:31:59.189
And also a variety of camcorders and tape decks.

00:31:59.190 --> 00:32:02.430
And also just about any audio device that you can think of.

00:32:02.430 --> 00:32:06.720
And you can take that data and send it
to a number of reasonable destinations.

00:32:06.720 --> 00:32:10.829
So you can record that media to a QuickTime movie.

00:32:10.829 --> 00:32:14.990
You can preview what you're doing, so that you can make
an audio or video preview of what you're capturing.

00:32:14.990 --> 00:32:17.460
And then maybe there's something we
haven't thought of yet in the API.

00:32:17.460 --> 00:32:23.789
So you want to be able to get at that raw video
data directly and do some custom processing on it.

00:32:23.789 --> 00:32:25.559
And it's also important to know in this API,

00:32:25.559 --> 00:32:30.740
Tim said that we're exposing new
functionality that's only available in QTKit.

00:32:30.740 --> 00:32:36.599
And in fact you have been able to do capture in the
past in QuickTime using the Sequence Grabber API.

00:32:36.599 --> 00:32:41.009
But this new API is not a wrapper
around that QuickTime Sequence Grabber.

00:32:41.009 --> 00:32:46.009
This actually sits on top of a new framework that
provides a lot of new nice modern functionality

00:32:46.009 --> 00:32:49.259
that you should come to expect with capture API.

00:32:49.259 --> 00:32:54.809
So the most important thing that includes
is you can now share certain cameras

00:32:54.809 --> 00:32:57.839
most notably the iSight, between multiple applications.

00:32:57.839 --> 00:33:02.569
So if you're running QuickTime Player and you're running
Photo Booth and you're running a variety of different apps,

00:33:02.569 --> 00:33:05.669
you'll not longer get these messages
if those applications are using QTKit

00:33:05.670 --> 00:33:08.320
that say this camera is in use by another application.

00:33:08.319 --> 00:33:12.079
So, you pick up this API you become a good citizen.

00:33:12.079 --> 00:33:17.009
In addition, we also put a lot of effort
into synchronizing audio and video together.

00:33:17.009 --> 00:33:22.690
Everything we do under the hood is sample accurate and
time stamped and we put a lot of effort into getting

00:33:22.690 --> 00:33:25.559
so that your video and your audio line up.

00:33:25.559 --> 00:33:27.669
We also have support for some new devices.

00:33:27.670 --> 00:33:31.960
So if you have the appropriate codecs installed
on your system we can now do HDV capture,

00:33:31.960 --> 00:33:34.460
which Sequence Grabber was never able to do.

00:33:34.460 --> 00:33:37.490
In addition, there's some new interesting
use cases that are just sort

00:33:37.490 --> 00:33:40.210
of a new paradigm Sequence Grabber never explored.

00:33:40.210 --> 00:33:45.190
You now will get called back whenever an
individual video frame or audio sample is captured,

00:33:45.190 --> 00:33:48.090
so you can have various frame-accurate capture use cases.

00:33:48.089 --> 00:33:54.689
So, say you can record a specific number of frames
to a movie file, or record along certain timecodes.

00:33:54.690 --> 00:34:00.600
And we also give you an API for controlling the tape
controls on certain devices which is something you used

00:34:00.599 --> 00:34:02.519
to have to go to the AVC framework to do.

00:34:02.519 --> 00:34:04.940
And there's plenty more under the hood
that we don't have time to talk about.

00:34:04.940 --> 00:34:09.849
And I'm just going to highlight these three points up here.

00:34:09.849 --> 00:34:13.190
If you have an applications using
Sequence Grabber now, and it's --

00:34:13.190 --> 00:34:17.940
you have a basic use case, you're not really interested
in frame exact recording or any of these new ideas.

00:34:17.940 --> 00:34:22.389
If you moved your app to QTKit, you would still
get these three things basically for free.

00:34:22.389 --> 00:34:23.679
These two huge advantages.

00:34:23.679 --> 00:34:27.309
Particularly sharing devices between
apps so you become a good citizen.

00:34:27.309 --> 00:34:31.679
The A/V sync has improved, and new device support.

00:34:31.679 --> 00:34:34.969
And because of that, Sequence Grabber is still around.

00:34:34.969 --> 00:34:36.359
We're not deprecating it.

00:34:36.360 --> 00:34:37.940
So you have nothing to worry about there.

00:34:37.940 --> 00:34:41.110
But if you're currently writing an
application that uses Sequence Grabber,

00:34:41.110 --> 00:34:47.470
or certainly if you're developing a new application, we
strongly encourage you to move your app over to QTKit.

00:34:47.469 --> 00:34:52.349
And similarly, QTKit is sitting on top of
a brand new much more modern device model.

00:34:52.349 --> 00:34:55.259
And we haven't quite made the API for that public yet.

00:34:55.260 --> 00:35:01.470
So, if you're in the middle of the developing a device and
you're writing a current vdig component that interfaces

00:35:01.469 --> 00:35:06.759
with Sequence Grabber to let you capture from that
device, come to the QTKit lab tomorrow and talk to us

00:35:06.760 --> 00:35:10.900
and we'll figure out how we can get your
device working with the new device model.

00:35:10.900 --> 00:35:14.050
And finally, this is a brand new API.

00:35:14.050 --> 00:35:14.940
It's a first revision.

00:35:14.940 --> 00:35:18.940
We tried to get down a lot of the sort of
more common use cases that people wanted.

00:35:18.940 --> 00:35:21.650
But your feed back here is very, very important.

00:35:21.650 --> 00:35:25.950
So certainly, if there's something you're doing in
Sequence Grabber that you don't think you can do,

00:35:25.949 --> 00:35:31.059
or can't do using QTKit please tell us, and
if there's anything new and cool that you want,

00:35:31.059 --> 00:35:33.960
that you want at our API level,
please give us that feedback.

00:35:33.960 --> 00:35:38.130
We've already got some great feedback
earlier this week in the labs.

00:35:38.130 --> 00:35:44.630
So let's go over the basic concepts behind
what you do when you use the capture API.

00:35:44.630 --> 00:35:50.170
So when you're doing capture you have
the concept of inputs and outputs.

00:35:50.170 --> 00:35:55.030
So your inputs are logically various
devices, like cameras and microphones.

00:35:55.030 --> 00:35:57.760
And your outputs are wherever you want to send that data.

00:35:57.760 --> 00:36:05.090
So say you want to draw a Cocoa view or play audio
through a speaker, or write that data to a QuickTime file.

00:36:05.090 --> 00:36:09.010
And finally you need something sitting there
in the middle there that distributes that media

00:36:09.010 --> 00:36:10.890
to the various destinations it needs to go to.

00:36:10.889 --> 00:36:15.599
And also performs audio and video sync and
decides when to capture and when not to capture.

00:36:15.599 --> 00:36:19.980
So the way we abstract that in QTKit
is with these three classes.

00:36:19.980 --> 00:36:24.260
The QTCaptureInput, the QTCaptureOutput,
and QTCaptureSession classes.

00:36:24.260 --> 00:36:27.990
And input and output are obviously your
inputs and outputs, as a described.

00:36:27.989 --> 00:36:31.739
In the sessions this thing sits in the
middle, controls when the data is transferred

00:36:31.739 --> 00:36:37.159
and performs sync and does distribution of media data.

00:36:37.159 --> 00:36:38.879
So those are just abstractions.

00:36:38.880 --> 00:36:42.099
Concretely, we actually provide you
with a handful of concrete sub classes

00:36:42.099 --> 00:36:44.360
of QTCaptureInput and QTCaptureOutput.

00:36:44.360 --> 00:36:49.570
But what we provide you right now as far as
inputs go is the QTCaptureDevice input.

00:36:49.570 --> 00:36:53.120
Which, as the name implies, let's
you grab data from a device.

00:36:53.119 --> 00:36:54.579
And we give you a variety of outputs.

00:36:54.579 --> 00:36:57.259
Movie file output will record to a file.

00:36:57.260 --> 00:37:03.070
Decompress video output will hand you via delegate
method every single video frame that's captured

00:37:03.070 --> 00:37:05.950
and decompressed, so can do some custom operation with it.

00:37:05.949 --> 00:37:10.589
And then you have ways of previewing
the video and audio in your session.

00:37:10.590 --> 00:37:14.220
So you can use these inputs and
outputs basically like building blocks.

00:37:14.219 --> 00:37:19.480
And depending on what your application needs to do, you
create a Capture Session and then add inputs and outputs

00:37:19.480 --> 00:37:21.800
as needed, depending on what your goals are.

00:37:21.800 --> 00:37:25.070
So a really simple example is audio video recording.

00:37:25.070 --> 00:37:31.200
So this is what the recording feature in QuickTime
Player does it we have a couple of Capture Inputs here.

00:37:31.199 --> 00:37:33.579
One for a camera and one for a microphone, say.

00:37:33.579 --> 00:37:35.739
And we have those hooked up into the session.

00:37:35.739 --> 00:37:38.019
And then we have a few Capture Outputs.

00:37:38.019 --> 00:37:40.659
So we have a couple for doing video and audio previewing,

00:37:40.659 --> 00:37:44.039
and most importantly we have something
that records the file.

00:37:44.039 --> 00:37:49.159
So -- an example that you have the source
code to that can do this is MyRecorder.

00:37:49.159 --> 00:37:53.029
And this is actually a sample that we gave
out as part of the coding head starts program.

00:37:53.030 --> 00:37:57.380
So hopefully at least some of you have done your
homework and taken a little bit of a look at this.

00:37:57.380 --> 00:38:02.480
But if you haven't seen it, what it does basically is just
what I showed you in that graph, which it does a simple --

00:38:02.480 --> 00:38:07.090
grabs the camera and the microphone and
records what's coming in there to a file.

00:38:07.090 --> 00:38:10.640
I should also point out we had a
few bugs in the sample, actually.

00:38:10.639 --> 00:38:14.409
And when we rushed to release it,
we now have an updated sample

00:38:14.409 --> 00:38:17.259
that fixes those bugs at the web site for this session.

00:38:17.260 --> 00:38:21.310
So if you want to follow along with the sample you
should definitely download it and check that out.

00:38:21.309 --> 00:38:24.150
That will show you all the best practices.

00:38:24.150 --> 00:38:26.579
And so I am not going to go through all the code.

00:38:26.579 --> 00:38:28.670
Actually, I have a much more interesting demo later on.

00:38:28.670 --> 00:38:31.470
But I'll just kind of take you
through the basic steps that you go

00:38:31.469 --> 00:38:35.000
through in an application like
MyRecorder to do your capture.

00:38:35.000 --> 00:38:37.420
So in this case it's three pretty simple steps.

00:38:37.420 --> 00:38:42.630
You want to find some device to work with, or a
couple of devices, if you're using multiple devices.

00:38:42.630 --> 00:38:44.670
You create the Capture Sessions.

00:38:44.670 --> 00:38:49.720
So that's the slide I showed you earlier where you
have a session and you have inputs and outputs to it.

00:38:49.719 --> 00:38:52.029
And then you to something with
that capture while it's running.

00:38:52.030 --> 00:38:54.810
In this case, we're going record to a file.

00:38:54.809 --> 00:39:00.599
So -- and the first step, finding a device, you're
going to go and look at the QTCaptureDevice class.

00:39:00.599 --> 00:39:03.719
And this is a class that represents all
of the devices hooked up to the computer.

00:39:03.719 --> 00:39:05.379
So in this case we're going to do something very simple.

00:39:05.380 --> 00:39:09.700
We're just going to ask the machine what's the default
device of a certain media type you have on your system.

00:39:09.699 --> 00:39:13.599
So if you had a MacBook Pro, this
would be the built in iSight.

00:39:13.599 --> 00:39:17.509
And what you also have to do before you use
a device that's very important is open it.

00:39:17.510 --> 00:39:23.050
And what that tells -- what that does is it tells the device
system I'm about to do some capturing for this device.

00:39:23.050 --> 00:39:25.070
Do any set up you need to do.

00:39:25.070 --> 00:39:28.080
And also it's important to know when
you're done with that device you have

00:39:28.079 --> 00:39:32.309
to call a closed method so that you free up those resources.

00:39:32.309 --> 00:39:34.230
The next step we're going to build a Capture Session.

00:39:34.230 --> 00:39:37.849
And this is just a code version of
that slide I showed you earlier.

00:39:37.849 --> 00:39:39.289
It's a little bit simpler.

00:39:39.289 --> 00:39:39.940
I fit it on the slide.

00:39:39.940 --> 00:39:44.650
But, we'll just create a Capture
Session using standard Cocoa allocation.

00:39:44.650 --> 00:39:48.059
We'll create a device input for
that device that we just found.

00:39:48.059 --> 00:39:50.219
And add that as an input to the session.

00:39:50.219 --> 00:39:54.439
And we'll create a movie file output which is
actually responsible for the movie recording.

00:39:54.440 --> 00:39:57.320
And add that to the sessions as an output.

00:39:57.320 --> 00:40:01.200
And one other extra thing we're doing with the
movie file output is setting a delegate on it.

00:40:01.199 --> 00:40:08.939
So the movie file output is interesting that it does
a large number of operations on background threads.

00:40:08.940 --> 00:40:12.050
So it's important to set a delegate,
and you'll see why in a second.

00:40:12.050 --> 00:40:17.130
So that you can be notified when various
operations are running and when they're completing.

00:40:17.130 --> 00:40:21.070
And then finally say we have a view in our user
interface that's previewing what's going on.

00:40:21.070 --> 00:40:23.660
We're just going to say preview what's
going on in this Capture Session.

00:40:23.659 --> 00:40:27.059
And then finally we have everything set up
so we will tell the session start running;

00:40:27.059 --> 00:40:30.460
start grabbing from inputs and sending data to outputs.

00:40:30.460 --> 00:40:33.670
And then finally we go to step three,
which is actually use the session.

00:40:33.670 --> 00:40:36.200
So we have defined a couple of actions here.

00:40:36.199 --> 00:40:37.639
The first says start recording.

00:40:37.639 --> 00:40:40.440
And we just tell the movie file output record to this URL.

00:40:40.440 --> 00:40:42.300
And then we say stop recording.

00:40:42.300 --> 00:40:45.350
We just tell the movie file output
-- don't record to anything any more.

00:40:45.349 --> 00:40:50.239
pass a nil. So the interesting thing about
this action method is when you call record

00:40:50.239 --> 00:40:53.699
to output file URL it always returns immediately.

00:40:53.699 --> 00:40:59.129
So even if there's some remaining work that
needs to be done on the files it's writing.

00:40:59.130 --> 00:41:00.900
So it probably has to write in the QuickTime header.

00:41:00.900 --> 00:41:04.079
Maybe in the movie add, maybe it saw some
cache data that it needs to write out.

00:41:04.079 --> 00:41:08.569
This method will still return immediately, and all
that work will go on happening in the background.

00:41:08.570 --> 00:41:12.630
And the reason why this is very powerful is because you
will now be able to switch files that you're writing

00:41:12.630 --> 00:41:16.170
to on the fly, without losing any media or samples.

00:41:16.170 --> 00:41:20.190
But the down side is that makes things a little
more complex, because you couldn't just call

00:41:20.190 --> 00:41:24.460
recordToOutputFileURL nil, and expect to
be able to open that QuickTime movie.

00:41:24.460 --> 00:41:25.630
It's not actually done yet.

00:41:25.630 --> 00:41:30.630
So you remember before we set a delegate on the
movie file output and had the file is done for real,

00:41:30.630 --> 00:41:33.349
we get called back with this delegate
method that we implement.

00:41:33.349 --> 00:41:35.759
And it looks like a bit of a mouth
full, but it's pretty straight forward.

00:41:35.760 --> 00:41:40.400
CaptureOutput did finish recordToOutputFileURL
for connections due to error.

00:41:40.400 --> 00:41:42.019
Gives you tons of information.

00:41:42.019 --> 00:41:45.820
But all we're going to do here is we have a perfectly
good movie file now, and so we're going to open it

00:41:45.820 --> 00:41:49.090
up in the work space, which just means
launching it in QuickTime Player.

00:41:49.090 --> 00:41:53.000
So I'm just going to do a quick demo of
what an application like this looks like.

00:41:53.000 --> 00:41:54.429
Again, I'm not going to walk through all the codes.

00:41:54.429 --> 00:41:59.069
I kind of have a more interesting
demo to show you in a second.

00:41:59.070 --> 00:42:05.610
So I'm just going to close this stuff off.

00:42:05.610 --> 00:42:13.500
And so what I have here is this is just
a built version of the MyRecorder sample

00:42:13.500 --> 00:42:15.989
that you can get at the session web site.

00:42:15.989 --> 00:42:21.229
And you'll see I have an iSight
camera hooked up to this computer,

00:42:21.230 --> 00:42:25.579
and I have a nice mascot subject here for my demo.

00:42:25.579 --> 00:42:28.840
Oops. He has a little bit of trouble
standing up, unfortunately.

00:42:28.840 --> 00:42:30.630
He's old, what do you want.

00:42:30.630 --> 00:42:36.349
And -- I can just record kind of a, you
know, make him dance around a little bit.

00:42:36.349 --> 00:42:38.000
So I'm recording all this to disc.

00:42:38.000 --> 00:42:39.980
That was that Start Recording Action.

00:42:39.980 --> 00:42:42.059
And when I hit stop, it tells it stop.

00:42:42.059 --> 00:42:45.730
And then there's a little bit of a delay, and then the
application gets called back had the movie file's done

00:42:45.730 --> 00:42:49.099
for real, and then we can openly it
up here and here's the recorded movie.

00:42:49.099 --> 00:42:50.949
See, there he is dancing around.

00:42:50.949 --> 00:42:52.529
So, success.

00:42:52.530 --> 00:42:54.320
And while I'm here showing this to you.

00:42:54.320 --> 00:42:58.289
You remember before I mentioned one
of the big benefits of using QTKit is

00:42:58.289 --> 00:43:02.480
that certain devices including the iSight
can be shared across multiple applications.

00:43:02.480 --> 00:43:06.260
And in fact in Leopard a ton of
applications and other frameworks

00:43:06.260 --> 00:43:09.440
on the system will be able to take advantage of this.

00:43:09.440 --> 00:43:13.470
For example, we can open up QuickTime
Player and create a new movie recording.

00:43:13.469 --> 00:43:15.879
And we still see that everything is fine there.

00:43:15.880 --> 00:43:17.010
Let's see.

00:43:17.010 --> 00:43:20.120
We could open up this bizarre Quartz Composer composition,

00:43:20.119 --> 00:43:22.719
we're going to run out of the space
on the screen pretty soon.

00:43:22.719 --> 00:43:25.629
But you can see again, everything's being shared.

00:43:25.630 --> 00:43:29.769
Say I want to change my account
picture in System Preferences.

00:43:29.769 --> 00:43:30.869
Just go ahead and do that.

00:43:30.869 --> 00:43:33.819
And this actually uses the standard Image Kit Picture Taker.

00:43:33.820 --> 00:43:39.640
So if you use Image Kit in the Picture Taker class
that takes advantage of this sharing feature in QTKit.

00:43:39.639 --> 00:43:44.009
And again, you see this all works
simultaneously with all these other applications.

00:43:44.010 --> 00:43:50.090
( Applause )

00:43:50.090 --> 00:43:53.130
>> David Underwood: All right.

00:43:53.130 --> 00:43:57.480
So that was kind of a predictable use case.

00:43:57.480 --> 00:43:58.309
It's very simple.

00:43:58.309 --> 00:44:00.049
I've got a camera, I want to record a movie with it.

00:44:00.050 --> 00:44:01.620
What if you want to do something more interesting.

00:44:01.619 --> 00:44:03.809
What if you want to do something
we really haven't thought of yet.

00:44:03.809 --> 00:44:07.630
You want to get those video frames off the
camera and do something special with them.

00:44:07.630 --> 00:44:10.090
So in that case what you're going to do is
you're going to use a different kind of output.

00:44:10.090 --> 00:44:12.559
The QTCaptureDecompressedVideoOutput.

00:44:12.559 --> 00:44:17.650
And what that's going to do is every time a new frame
comes in it's going to call you back by a delegate method

00:44:17.650 --> 00:44:19.510
and say here, do something with this frame.

00:44:19.510 --> 00:44:20.860
I don't care what it is.

00:44:20.860 --> 00:44:23.460
And so -- in this case, the R diagram's
actually much simpler.

00:44:23.460 --> 00:44:27.760
We just have a Capture Session with one
input, which is a device input for the camera,

00:44:27.760 --> 00:44:29.700
and one output, which is the decompressed video output.

00:44:29.699 --> 00:44:32.189
And what it's going to do is every
time a frame comes in it's going

00:44:32.190 --> 00:44:36.840
to hand us a CVImageBuffer representing that frame.

00:44:36.840 --> 00:44:42.130
And so I -- what I'm going do now is I am going
to build this application for you from scratch.

00:44:42.130 --> 00:44:48.440
And this is actually also an application you can
get already built on the Web site for the session.

00:44:48.440 --> 00:44:49.950
It's called StillMotion.

00:44:49.949 --> 00:44:51.469
And it does exactly what I said.

00:44:51.469 --> 00:44:56.789
It uses a decompressed video output
to create a StopMotion animation.

00:44:56.789 --> 00:44:59.650
So I don't know if you've seen animations like this.

00:44:59.650 --> 00:45:03.550
Various -- you've seen claymation where it takes --

00:45:03.550 --> 00:45:08.180
you take a snap shot of a current scene
and then you add that on to a movie slowly.

00:45:08.179 --> 00:45:11.199
And you can create kind of entertaining
scenes and animations with this.

00:45:11.199 --> 00:45:16.029
In a matter of minutes we're going to build
something that actually let's you be pretty creative.

00:45:16.030 --> 00:45:18.800
And so I'll show you around this.

00:45:18.800 --> 00:45:25.120
And so now I'm going to demo building
the StopMotion Animation Application.

00:45:25.119 --> 00:45:32.489
Okay. So this will be somewhat similar to the
movie player that Tim built for you before.

00:45:32.489 --> 00:45:36.939
But instead of opening and editing movies, it's
actually going to create them from scratch.

00:45:36.940 --> 00:45:44.240
So we're going to create a new project in Xcode and again
it will be a document-based application where the data

00:45:44.239 --> 00:45:48.899
in our document will be a QuickTime
Movie, or a QTMovie object.

00:45:48.900 --> 00:45:55.660
And we'll just call it StopMotion -- okay.

00:45:55.659 --> 00:46:01.929
And again, since we're using QTKit the first thing we
want to do is make sure that QTKit is added to our list

00:46:01.929 --> 00:46:04.469
of frameworks that we're linking against.

00:46:04.469 --> 00:46:08.750
So we go in and open up the existing frameworks.

00:46:08.750 --> 00:46:14.099
And we'll go and find QTKit.

00:46:14.099 --> 00:46:17.710
And also we're going to be doing a little
bit with Core Image and Core Video.

00:46:17.710 --> 00:46:21.769
So, like, before we also wanted to add
in QuartzCore.framework

00:46:21.769 --> 00:46:29.429
to let us link against that functionality.

00:46:29.429 --> 00:46:33.899
Okay. And also like before we're working
with movies, that'd our document.

00:46:33.900 --> 00:46:39.700
So I'm opening up the info panel
for the StopMotion target type.

00:46:39.699 --> 00:46:43.949
And I'm going Properties and I'm just changing
this to show we've opened movie files.

00:46:43.949 --> 00:46:52.349
So I'll change the file extension that we
support to mov and the OS time to MooV.

00:46:52.349 --> 00:46:52.940
And great.

00:46:52.940 --> 00:46:55.800
Now we can open and save movie files.

00:46:55.800 --> 00:46:57.180
So let's get to some code here.

00:46:57.179 --> 00:47:00.319
So I'm going to go to my document class.

00:47:00.320 --> 00:47:04.730
And the basic idea here is that we have two things going on.

00:47:04.730 --> 00:47:10.960
We have -- we have on the one hand what's currently --
the image is currently being captured by the camera hooked

00:47:10.960 --> 00:47:13.159
up to the computer, so the current
scene as you've set it up.

00:47:13.159 --> 00:47:15.859
And then what we also have is the
project that we've created before.

00:47:15.860 --> 00:47:17.039
So the movie that we've built.

00:47:17.039 --> 00:47:21.090
So we need to show both of those
things in the user interface.

00:47:21.090 --> 00:47:30.400
So -- what I'm going do is I'm going set up the
instance variables in my class to show this.

00:47:30.400 --> 00:47:35.780
So I'll just replace recall of this here, and
I'll walk you through what I've added here.

00:47:35.780 --> 00:47:41.170
So the first two things I've added are two things that will
be in the user interface, two out lets in Interface Builder.

00:47:41.170 --> 00:47:46.909
So on one side we're going to have a CaptureView, so
I'll show you that live scene that I told you about.

00:47:46.909 --> 00:47:49.409
Then on the other side we'll have a MovieView.

00:47:49.409 --> 00:47:51.859
And I'll show you the movie we created so far.

00:47:51.860 --> 00:47:55.230
We also need a handful of things
to store inside the document.

00:47:55.230 --> 00:47:56.769
So a handful of instance variables.

00:47:56.769 --> 00:47:58.489
We have a QTMovie object.

00:47:58.489 --> 00:48:02.959
So this is the movie itself that
we're creating and adding to.

00:48:02.960 --> 00:48:05.769
And then we have these three objects which are --

00:48:05.769 --> 00:48:08.710
these are the building blocks for the
CaptureSession that we want to use.

00:48:08.710 --> 00:48:13.280
And they refer back to that slide that I
showed you before where we have a session,

00:48:13.280 --> 00:48:18.600
and then on one end we have a device input, and then
on the other hand we have a decompressedVideoOutput.

00:48:18.599 --> 00:48:21.420
And finally, we have one little extra thing here.

00:48:21.420 --> 00:48:22.360
We have an instance variable.

00:48:22.360 --> 00:48:26.789
And what this is going to do is this is just going to
store the most recent video frame that we've captured.

00:48:26.789 --> 00:48:32.460
So when we go around adding something to the movie to
make our scene we're just going to grab it out of this.

00:48:32.460 --> 00:48:36.199
And then finally I defined one method
and this will be hooked up to a button,

00:48:36.199 --> 00:48:42.500
and this will actually take whatever is in front of the
camera and add that in as a still image to the movie.

00:48:42.500 --> 00:48:48.409
So now that I've defined the interface to this
class I am just going to pop open the document nib,

00:48:48.409 --> 00:48:51.359
and I am going to build this user interface.

00:48:51.360 --> 00:48:53.460
So I'm going get rid of this default stuff.

00:48:53.460 --> 00:48:59.929
And I'm just going to add -- so remember we
have both a CaptureView and a MovieView.

00:48:59.929 --> 00:49:04.019
So we have this icon in Interface Builder
Three for the QTCaptureView class.

00:49:04.019 --> 00:49:04.969
So we'll just drag that in there.

00:49:04.969 --> 00:49:08.449
And we also have the QTMovieView that we'll drag in.

00:49:08.449 --> 00:49:12.960
And we'll make these both kind of a reasonable size.

00:49:14.510 --> 00:49:24.580
Oops. And I'll wind those up in the movie, and
I'll do the same thing with the MovieView.

00:49:30.909 --> 00:49:34.989
And the only other thing I need in here is
I need a button that will take a snap shot

00:49:34.989 --> 00:49:39.599
of whatever's currently being displayed in
the CaptureView and add it to the movie.

00:49:39.599 --> 00:49:46.339
So I'll go into the Interface Builder
library and go find a button -- there's one.

00:49:46.340 --> 00:49:51.410
And I'll just center that in the window a little bit.

00:49:51.409 --> 00:49:52.699
Ah. Close enough.

00:49:52.699 --> 00:49:55.230
And I'll call that add frame.

00:49:57.039 --> 00:50:01.670
And also set up all these things so that they
resize pretty nicely when I resize the window.

00:50:01.670 --> 00:50:03.920
So here's how I set up the CaptureView.

00:50:03.920 --> 00:50:10.730
Here's how I set up the MovieView, and I'll make
it so the button sticks to the bottom of the window.

00:50:10.730 --> 00:50:17.119
Okay. And now that I've built my user interface
I can hook it up to that header file

00:50:17.119 --> 00:50:19.730
that I showed you before so I have
a couple of out lets here,

00:50:19.730 --> 00:50:23.340
so I'll drag from the file zone
here, and this is my CaptureView.

00:50:23.340 --> 00:50:24.870
So that's connected.

00:50:24.869 --> 00:50:26.509
And I'll drag to here.

00:50:26.510 --> 00:50:27.620
And here's my MovieView.

00:50:27.619 --> 00:50:28.969
So that's connected as well.

00:50:28.969 --> 00:50:30.599
And finally I have this action.

00:50:30.599 --> 00:50:34.299
So I'll hook up this button to that
method that I find in the class.

00:50:34.300 --> 00:50:36.260
And that's the add frame method.

00:50:36.260 --> 00:50:38.970
So we're done with the user interface now.

00:50:38.969 --> 00:50:43.119
So I'll just quit out of the Interface Builder
and now we'll get to writing some code.

00:50:43.119 --> 00:50:44.539
This will be the meat of it.

00:50:44.539 --> 00:50:47.880
So kind of similarly to what we did with MyRecorder.

00:50:47.880 --> 00:50:50.170
We have kind of three basic things going on.

00:50:50.170 --> 00:50:51.130
Three basic steps.

00:50:51.130 --> 00:50:55.460
We need to get some kind of a device and open it
, we need to build up a Capture Session to run it,

00:50:55.460 --> 00:50:58.740
an then use that Capture Session to do something useful.

00:50:58.739 --> 00:51:04.859
So what I'm going to show you first is this set up step
where we find a device and create a Capture Session.

00:51:04.860 --> 00:51:11.110
So -- I'll just replace the window -- no, I need that.

00:51:11.110 --> 00:51:14.309
I'll replace this windowControllerDidLoadNib method.

00:51:14.309 --> 00:51:19.650
And it looks like a lot, but it's
actually pretty straight forward.

00:51:19.650 --> 00:51:24.760
So, after calling the super classic imitation -- so
remember, our document here is we're building a movie.

00:51:24.760 --> 00:51:29.820
And unlike what Tim showed off, we might
be creating a brand new movie from scratch.

00:51:29.820 --> 00:51:34.400
So what we're going to do first here
is check -- do we have a movie already.

00:51:34.400 --> 00:51:39.550
And if we don't we're going to create a new QTMovie
bject that we're going to write into.

00:51:39.550 --> 00:51:42.890
And this is also a brand new API added into QTKit.

00:51:42.889 --> 00:51:47.750
So it's similar to that initToWritableFile
method that Tim showed you earlier.

00:51:47.750 --> 00:51:50.510
But in this case we haven't really saved a document yet.

00:51:50.510 --> 00:51:51.650
This is a brand new document.

00:51:51.650 --> 00:51:56.230
So we're going to use a counter part of
that method, which is initToWritableData.

00:51:56.230 --> 00:51:58.269
Which just takes an NSMutableData object.

00:51:58.269 --> 00:52:02.639
And all we're doing is saying I want a new movie
and I just want to write into this block of memory

00:52:02.639 --> 00:52:06.639
that we've cordoned off, which we can save to a file later.

00:52:06.639 --> 00:52:11.989
And so once the movie is created, now that we have
a movie, we have a MovieView in our interface.

00:52:11.989 --> 00:52:15.579
So we want to make sure that that MovieView is
displaying the movie that we've created so far.

00:52:15.579 --> 00:52:19.329
And then finally we go to set up our Capture Session.

00:52:19.329 --> 00:52:21.360
So, very similar to before.

00:52:21.360 --> 00:52:24.220
We just create a new QTCaptureSession.

00:52:24.219 --> 00:52:30.689
We find a device, and in this case again I am just going to
use the default device on the system that supports video.

00:52:30.690 --> 00:52:33.769
Open that device up, and then add our inputs and outputs.

00:52:33.769 --> 00:52:37.599
So create a device, input the device,
and add it to the session.

00:52:37.599 --> 00:52:43.319
And create a decompressed video output where we're going
to get our frames and add that as an output to the session.

00:52:43.320 --> 00:52:47.470
And kind of like the movie file output, we need to
set a delegate on the decompressed video output.

00:52:47.469 --> 00:52:50.839
And what that let's it do is call us
back whenever a new frame comes in.

00:52:50.840 --> 00:52:52.840
Which I'll show you in a second.

00:52:52.840 --> 00:52:57.280
And finally, we want to preview whatever's
going on in the CaptureView, in the window.

00:52:57.280 --> 00:52:58.280
So we hook that up to the session.

00:52:58.280 --> 00:52:58.970
So we hook that up to the session.

00:52:58.969 --> 00:53:01.730
And everything's set up now so we say start the session.

00:53:01.730 --> 00:53:05.269
And what we've also shown you here,
I didn't really show you any clean

00:53:05.269 --> 00:53:08.599
up code had I showed you MyRecorder
demo, but it is important to clean up.

00:53:08.599 --> 00:53:13.139
Especially since you're running captures
which can be pretty resource-intensive.

00:53:13.139 --> 00:53:16.759
And you're also opening devices, which
is also fairly resource-intensive.

00:53:16.760 --> 00:53:20.100
So when you're done with everything
you want to kind of clean it up.

00:53:20.099 --> 00:53:22.940
So doing that when the window is
about to close is a good time.

00:53:22.940 --> 00:53:25.639
So right here we stop the Capture Session from running.

00:53:25.639 --> 00:53:31.559
Oops. And we also -- because we've opened
that device before, we're done with it now.

00:53:31.559 --> 00:53:33.039
We're going to close it.

00:53:33.039 --> 00:53:36.909
An then in dealloc, we just release everything
that we allocated.

00:53:36.909 --> 00:53:45.629
So now that we've found a device, set up the Capture
Session, we're going to do something interesting with it.

00:53:45.630 --> 00:53:49.220
You remember before I set a delegate
on the decompressed video output.

00:53:49.219 --> 00:53:51.849
So here's the delegate method that
you immediate to implement.

00:53:51.849 --> 00:53:56.679
And I'm just going resize this window so
you can see -- I'll have to scroll over.

00:53:56.679 --> 00:53:58.929
Again, this method gives you tons of information.

00:53:58.929 --> 00:54:01.349
In this case we're really not going
to use much of any of it.

00:54:01.349 --> 00:54:06.299
But it's Capture Output, did output video
frame with sample buffer from connection.

00:54:06.300 --> 00:54:09.960
And so all we're really interested in
here right now is this video frame.

00:54:09.960 --> 00:54:12.070
Which is a CVImageBufferRef.

00:54:12.070 --> 00:54:15.340
And what this method is going to do is
it's going to take that CVImageBufferRef

00:54:15.340 --> 00:54:17.410
and store it in that instance variable we created.

00:54:17.409 --> 00:54:20.500
So we can always hold onto the most
recent image that's been grabbed.

00:54:20.500 --> 00:54:23.400
And so this actually a pretty standard assignment.

00:54:23.400 --> 00:54:28.389
What we do is we retain this new video frame
and then we assign it to this instance variable.

00:54:28.389 --> 00:54:33.369
And then we release the old one, because we
don't want to leak memory, 30 times a second.

00:54:33.369 --> 00:54:37.449
So one kind of interesting thing here is you
notice I put this in the synchronize block.

00:54:37.449 --> 00:54:42.319
And the reason for this is when QTKit
calls these delegate methods,

00:54:42.320 --> 00:54:44.920
they're not guaranteed to be called on the main thread.

00:54:44.920 --> 00:54:50.210
A lot of traditional Cocoa programming practices kind
of expected delegate methods to come on the main thread.

00:54:50.210 --> 00:54:52.659
But QTKit is very, very multithreaded.

00:54:52.659 --> 00:54:56.679
And for efficiency's sake it doesn't do a
lot of interthread communication by default.

00:54:56.679 --> 00:55:00.960
So you have to realize that you shouldn't always make
that assumption when you implement a delegate method.

00:55:00.960 --> 00:55:04.490
So in that case we just need to do a little
bit of thread safety work to make sure

00:55:04.489 --> 00:55:07.819
that we don't clobber our data or have any erase conditions.

00:55:09.139 --> 00:55:13.869
So now that we've done that, now that we're storing
our most recent frames, we're going to implement

00:55:13.869 --> 00:55:18.029
that action that's called when you click on that button.

00:55:18.030 --> 00:55:21.170
So I'll just put that in here.

00:55:21.170 --> 00:55:23.010
And here's the add frame action.

00:55:23.010 --> 00:55:27.410
And what this essentially does
is it grabs the most recent frame

00:55:27.409 --> 00:55:32.469
and puts into the movie using standard QTKit APIs
that you may have seen before.

00:55:32.469 --> 00:55:35.759
So the first thing we're going to do -- and
again, we have to do this in a synchronized block

00:55:35.760 --> 00:55:40.800
so we avoid race conditions is we grab the most
recent image buffer out of this instance variable.

00:55:40.800 --> 00:55:44.550
And we retain that because we're going
to be using it on a different thread.

00:55:44.550 --> 00:55:52.120
And then assuming we got an image buffer out of there
what I am going to do is turn it into an NSImage.

00:55:52.119 --> 00:55:58.769
And then call this QTKit API, the addImage:image
forDuration withAttributes method that takes an NSImage

00:55:58.769 --> 00:56:02.429
and then just amends that image onto the end of the movie.

00:56:02.429 --> 00:56:05.279
So in order to make the CVImageBuffer into an NSImage --

00:56:05.280 --> 00:56:08.910
this will seem a little bit contrived,
but it's actually pretty efficient.

00:56:08.909 --> 00:56:16.429
We're going to use Core Image, which knows how
to draw CVImageBuffer, and NSCIImageRep,

00:56:16.429 --> 00:56:20.769
which can contain CIImages, and
then put that into an NSImage.

00:56:20.769 --> 00:56:23.480
So it sounds like kind of three levels of translation.

00:56:23.480 --> 00:56:26.530
But in fact there's only actually
-- all the data is in one place.

00:56:26.530 --> 00:56:28.870
No one's making any copies -- so -- you don't need to worry.

00:56:28.869 --> 00:56:33.789
So just think of this -- we're turning
a CVImageBuffer into an NSImage.

00:56:33.789 --> 00:56:39.550
And so when we go ahead and add the image to the
movie we're just going to take an arbitrary time.

00:56:39.550 --> 00:56:42.630
Let's say we want to make our StopMotion animation
ten frames per second.

00:56:42.630 --> 00:56:47.010
You could add another user interface application
that changes that, but we'll keep it simple here.

00:56:47.010 --> 00:56:49.030
And let's say we'll compress it to JPEG.

00:56:49.030 --> 00:56:55.010
We don't want raw YUV frames exploding on your system,
you know, and having taking of gigabytes of disc space.

00:56:55.010 --> 00:56:56.470
So we'll do a little bit of compression.

00:56:56.469 --> 00:57:00.419
And then we'll do some nice interface
-- user interface updating.

00:57:00.420 --> 00:57:04.320
So we'll just tell the movie make
your current time your duration.

00:57:04.320 --> 00:57:06.860
So scroll to the end of the movie.

00:57:06.860 --> 00:57:10.950
And that will show in the user interface the
most recent frame that you've added to the movie.

00:57:10.949 --> 00:57:13.730
And you tell the MovieView redisplay
yourself when you get the chance.

00:57:13.730 --> 00:57:18.440
And then we say we've edited the
document, so let's mark it as dirty.

00:57:18.440 --> 00:57:21.789
And finally, we actually want to
be able to save these movies.

00:57:21.789 --> 00:57:26.980
So I'll just add a little bit of simple
code to be able to open and save.

00:57:26.980 --> 00:57:35.840
And oops -- that's what I want.

00:57:35.840 --> 00:57:44.420
Okay. And I'm just overriding these standard NS
document methods, read from URL and write to URL.

00:57:44.420 --> 00:57:45.920
And read from URL is very simple.

00:57:45.920 --> 00:57:49.409
We just create a new QT Movie with that URL, and --

00:57:49.409 --> 00:57:53.149
what we also want to make sure is we're opening
something, we might be adding images to it.

00:57:53.150 --> 00:57:55.710
So we make sure to set that editable attribute to yes.

00:57:55.710 --> 00:57:58.099
And then write to URL is very simple.

00:57:58.099 --> 00:58:00.039
We just tell the movie write to this file.

00:58:00.039 --> 00:58:03.289
And then we pass on a little flag
that says flatten this movie.

00:58:03.289 --> 00:58:07.779
Which just kind of means arrange the sample tables and
the chunk sizes in such a way that it's convenient.

00:58:07.780 --> 00:58:08.710
But you don't need to do that.

00:58:08.710 --> 00:58:12.079
That's just a nice optimization that you can do.

00:58:12.079 --> 00:58:15.860
Okay. And with any luck this should be everything we need.

00:58:15.860 --> 00:58:18.559
Yes, I do want to save that.

00:58:18.559 --> 00:58:21.980
And we'll just go ahead and build this.

00:58:21.980 --> 00:58:24.769
And hopefully be able to create some brilliant movies.

00:58:24.769 --> 00:58:25.949
Okay. Build succeeded.

00:58:25.949 --> 00:58:28.579
Let's see.

00:58:28.579 --> 00:58:30.840
Okay. So here's a brand new document window.

00:58:30.840 --> 00:58:34.809
And we see we again have a live
preview of our Capture Session in here.

00:58:34.809 --> 00:58:39.670
So we're going to use again -- our friend Einstein
is the subject of our StopMotion animation.

00:58:39.670 --> 00:58:41.740
So I'll have him kind of walk up to the camera.

00:58:41.739 --> 00:58:45.189
And you'll see -- it will be a nice animation.

00:58:45.190 --> 00:58:47.440
So I'll move a little closer.

00:58:47.440 --> 00:58:50.280
A little closer still.

00:58:50.280 --> 00:58:52.480
Well, kind of shifted over there.

00:58:52.480 --> 00:58:55.599
Well, he doesn't want to be in the center of the frame.

00:58:59.409 --> 00:59:01.649
You know, maybe a little further.

00:59:01.650 --> 00:59:03.420
Maybe it's getting a little creepy now.

00:59:03.420 --> 00:59:05.789
All right.

00:59:05.789 --> 00:59:07.619
Well, anyway, I could do this for hours.

00:59:07.619 --> 00:59:09.539
I probably shouldn't keep you here forever.

00:59:09.539 --> 00:59:15.599
But as you can see we're just taking this data
from the camera in -- we've, you know, in --

00:59:15.599 --> 00:59:19.319
you know, a matter of ten minutes we've built an application
that actually let's you do something pretty cool,

00:59:19.320 --> 00:59:24.000
which is this creative application right
here, to create StopMotion videos.

00:59:24.000 --> 00:59:28.679
And if you really spend the kind of time on this,
you know, you can hang out in your office and do work

00:59:28.679 --> 00:59:35.549
on your white board and create masterpieces like this.

00:59:35.550 --> 00:59:46.980
So you can see this is the artistic
talent that goes into this kind of effort.

00:59:46.980 --> 00:59:55.240
So, yeah. There it goes.

00:59:55.239 --> 00:59:57.259
( Applause )

00:59:57.260 --> 01:00:00.750
>> David Underwood: So, just real
quickly, I've known a couple of use cases

01:00:00.750 --> 01:00:03.199
for what you can do with the QTCapture API.

01:00:03.199 --> 01:00:07.679
I'll walk you a little bit through some of the
common classes and methods that you'll use.

01:00:07.679 --> 01:00:10.049
But definitely won't cover them all.

01:00:10.050 --> 01:00:12.710
But this will be things that you'll
see commonly in your applications.

01:00:12.710 --> 01:00:17.940
So QTCaptureSession you'll always
use if you're doing capture.

01:00:17.940 --> 01:00:19.530
And you've basically seen these methods.

01:00:19.530 --> 01:00:22.170
You can add and remove inputs and outputs.

01:00:22.170 --> 01:00:26.039
And it's also important, you need to start
the session when you want to start capturing

01:00:26.039 --> 01:00:28.230
and stop it when you don't need to any more.

01:00:28.230 --> 01:00:31.650
QTCaptureDevice input.

01:00:31.650 --> 01:00:32.260
Very simple.

01:00:32.260 --> 01:00:35.280
You just initialize it with a device
that you've opened already.

01:00:35.280 --> 01:00:37.990
And you can add that to the session.

01:00:37.989 --> 01:00:40.819
QTCapture movie file output as you saw before.

01:00:40.820 --> 01:00:43.690
The most important methods are telling it where to record.

01:00:43.690 --> 01:00:46.389
And also there are a ton of delegate
methods that you can implement.

01:00:46.389 --> 01:00:48.389
But the one that you're always
going to implement, basically,

01:00:48.389 --> 01:00:50.670
is this one that tells you when it's done with a file.

01:00:50.670 --> 01:00:54.490
And you can actually us it as a useable QuickTime file.

01:00:54.489 --> 01:00:59.539
Another delegate method that I didn't show you in
the demo but it opens up some more interesting cases

01:00:59.539 --> 01:01:03.409
for movie file output is you can also implement this method,

01:01:03.409 --> 01:01:08.559
which gets called every single time the movie
file output receives a new video or audio sample.

01:01:08.559 --> 01:01:12.170
So you can -- you get this QTSampleBuffer object

01:01:12.170 --> 01:01:16.119
that contains both the actual sample data
itself and tons of meta data about it.

01:01:16.119 --> 01:01:18.710
So if it has a timecode, you'll
be able to get the timecode.

01:01:18.710 --> 01:01:20.460
You'll be able to get timing information.

01:01:20.460 --> 01:01:23.309
If it has date recorded information, you'll get that.

01:01:23.309 --> 01:01:25.369
So all sorts of interesting stuff.

01:01:25.369 --> 01:01:30.329
And you can use that actually to precisely control
where to start -- start and stop your recording,

01:01:30.329 --> 01:01:32.989
as well as getting information about individual samples.

01:01:32.989 --> 01:01:35.229
So that's pretty cool.

01:01:35.230 --> 01:01:36.440
Video Preview outputs.

01:01:36.440 --> 01:01:40.300
So, Video Preview output is kind
of the guts of QTCaptureView.

01:01:40.300 --> 01:01:46.420
QTCaptureView actually creates one of these and reads
frames off of it when it wants to do a Video Preview.

01:01:46.420 --> 01:01:51.680
But if QTCaptureView is kind of a little bit too simple
for your needs, basically shows a single video frame,

01:01:51.679 --> 01:01:56.710
then you can use this class instead and get those
preview frames directly and do something with them.

01:01:56.710 --> 01:02:01.360
A good example of that is kind of an obvious
way to extend that StopMotion application.

01:02:01.360 --> 01:02:08.030
Say you want an onion skinning effect, where you draw a
translucent version of the Video Preview on top of the movie

01:02:08.030 --> 01:02:13.490
that you've created so far, letting you kind of more
precisely position the various things in your scene

01:02:13.489 --> 01:02:17.329
so you know, you have something a little better
than what I did with Einstein over there.

01:02:17.329 --> 01:02:21.500
And you can do that by hooking directly to
the frames that are returned with this class.

01:02:21.500 --> 01:02:23.360
And there are two ways to get at those frames.

01:02:23.360 --> 01:02:31.870
You can use a QTVisualContext, which is a QuickTime C
API type, which does some nice image timing and queueing,

01:02:31.869 --> 01:02:36.230
and let's you get at the CVBuffers in good time.

01:02:36.230 --> 01:02:42.019
The only caveat about that -- that's not available in
64-bit because again that's in the C QuickTime framework.

01:02:42.019 --> 01:02:45.210
But what you can also do is implement
this delegate method that looks a lot

01:02:45.210 --> 01:02:47.260
like decompressed video output delegate method

01:02:47.260 --> 01:02:51.800
that will just call you back every
time a frame of Video Preview comes on.

01:02:51.800 --> 01:02:52.940
Here's decompressed video output.

01:02:52.940 --> 01:02:59.250
There's really only one method that you care about, which
is this delegate method that calls you for every frame.

01:02:59.250 --> 01:03:01.429
Audio preview output, we didn't go over.

01:03:01.429 --> 01:03:05.000
But it's kind of too simple to
even -- worth mentioning too much.

01:03:05.000 --> 01:03:09.659
But it let's you play audio -- whatever
audio you're capturing from your session,

01:03:09.659 --> 01:03:11.460
you'll play that through the computer's speaker.

01:03:11.460 --> 01:03:16.179
And something you'll probably want
to do with it is set the volume.

01:03:16.179 --> 01:03:23.639
QTCaptureDevice is your main interface
to finding and opening up devices.

01:03:23.639 --> 01:03:26.519
This is actually a pretty huge class already.

01:03:26.519 --> 01:03:28.099
But here are some highlights of what you can do.

01:03:28.099 --> 01:03:32.819
So these first two methods let you
find different QTCaptureDevices.

01:03:32.820 --> 01:03:35.960
And you can either get a list of all of them
if you want to build some kind of a menu.

01:03:35.960 --> 01:03:37.059
Or if you don't really mind.

01:03:37.059 --> 01:03:41.279
If you just want the system to figure it out you can
just get the default one like we did in these demos.

01:03:41.280 --> 01:03:43.490
And you get lots of information about the device.

01:03:43.489 --> 01:03:47.639
One good example is a localized name of it
that you can put in your user interface.

01:03:47.639 --> 01:03:51.710
And also very important, you need to -- when
you want to use a device you need to open it.

01:03:51.710 --> 01:03:55.599
When you're done with it, you have to close it.

01:03:55.599 --> 01:03:59.190
We also give you some information on
the connection state of the device.

01:03:59.190 --> 01:04:02.820
So in particular we define these two notifications

01:04:02.820 --> 01:04:07.240
that will call you back whenever a device gets
plugged in or whenever a device gets unplugged.

01:04:07.239 --> 01:04:10.169
So this is a nice new thing we get with this framework.

01:04:10.170 --> 01:04:12.360
Before, when you were using Sequence
Grabber you would have to dive

01:04:12.360 --> 01:04:15.120
down into IO Kit to find out when things get unplugged.

01:04:15.119 --> 01:04:17.539
And now we defined these notifications for you.

01:04:17.539 --> 01:04:22.670
And we also implement some methods that tell you
whether another application is hogging the device,

01:04:22.670 --> 01:04:26.329
or whether or not that device is connected.

01:04:26.329 --> 01:04:29.789
While we're talking about devices I
should just go over quickly the devices

01:04:29.789 --> 01:04:33.599
that we're supporting in Leopard and in your Leopard seed.

01:04:33.599 --> 01:04:38.569
We support both the VDC over USB
and IIDC over FireWire protocols.

01:04:38.570 --> 01:04:43.830
And they correspond to the built in
and FireWire iSights that Apple ships.

01:04:43.829 --> 01:04:46.739
And also a number of different USB web cams.

01:04:46.739 --> 01:04:49.949
We support any audio device the Core Audio can see.

01:04:49.949 --> 01:04:53.639
We also support a variety of DV and HDV cameras.

01:04:53.639 --> 01:04:59.009
And we have a little asterisk there and that's because
if you're using a camera that uses a pro codec,

01:04:59.010 --> 01:05:03.740
like DVC Pro HD, or HDV, you need Final Cut Pro
to be installed in order to be --

01:05:03.739 --> 01:05:06.069
in order to decode the frames coming off that camera.

01:05:06.070 --> 01:05:08.320
So that's one thing to note.

01:05:08.320 --> 01:05:13.600
And we also have a little bridge in there that if we
don't have any device that's on the new device model,

01:05:13.599 --> 01:05:18.829
we do have a bridge that supports Sequence
Grabber devices through their vdig component.

01:05:18.829 --> 01:05:22.719
So those devices should still work with QTCaptureDevice.

01:05:22.719 --> 01:05:25.699
QTCaptureView, you've already seen.

01:05:25.699 --> 01:05:30.169
And all you really need to do is say preview
this Capture Session and it will do it.

01:05:30.170 --> 01:05:34.800
And you can set various attributes of its visual
appearance, such as the background color that it fills with,

01:05:34.800 --> 01:05:38.580
and whether or not it preserves the
aspect ratio of what's being captured.

01:05:38.579 --> 01:05:46.009
And there are a bunch of other new classes in this API
that we don't really have the time to go over in detail.

01:05:46.010 --> 01:05:52.520
But these are if you really want to get at the sample
level of information and control various media work flows

01:05:52.519 --> 01:05:55.929
and look at the data on a sample by sample basis.

01:05:55.929 --> 01:06:00.009
There's -- we also have a class that let's you
look at the detailed format of those samples.

01:06:00.010 --> 01:06:03.930
So those are worth looking at.

01:06:03.929 --> 01:06:07.909
And definitely if you want more
information, this is all fully documented.

01:06:07.909 --> 01:06:13.129
And this includes both the new editions that Tim talked
about, and also the new editions for the capture API.

01:06:13.130 --> 01:06:17.190
So I definitely recommend -- check
out the reference documentation.

01:06:17.190 --> 01:06:20.860
We also have a really good programming guide
that will take you through some of the concepts

01:06:20.860 --> 01:06:23.579
of building these applications more in depth.

01:06:23.579 --> 01:06:25.460
And a ton of good sample codes.

01:06:25.460 --> 01:06:30.070
So those two samples that I showed you today,
and also we have the QT recorder sample,

01:06:30.070 --> 01:06:32.610
which shows you some interesting
things I didn't show you today;

01:06:32.610 --> 01:06:35.430
like how to build a menu for how
to select different devices.

01:06:35.429 --> 01:06:37.909
So you should definitely go and check that out.

01:06:37.909 --> 01:06:42.109
You can get all that documentation sample
code off of the WWDC attendee web site,

01:06:42.110 --> 01:06:45.570
and so I encourage you to take a look at it.

01:06:45.570 --> 01:06:49.930
Finally, if you have more questions or if you have
a specific thing that you want to work with us

01:06:49.929 --> 01:06:56.399
on we have the QTKit lab tomorrow, and
that should be tomorrow morning, I believe.

01:06:56.400 --> 01:07:00.599
So definitely stop by with any
questions or concerns or feedback.

01:07:00.599 --> 01:07:01.880
We'd love to hear it.