WEBVTT

00:00:16.170 --> 00:00:18.060
>> Welcome to Session 131.

00:00:18.059 --> 00:00:19.160
I'm Tim Hatcher.

00:00:19.160 --> 00:00:25.329
I'm going to talk to you about WYSIWYG editing and
adding it to your webpage or your Cocoa application.

00:00:25.329 --> 00:00:26.139
( Cheering )

00:00:26.140 --> 00:00:26.940
( Applause )

00:00:26.940 --> 00:00:35.630
So I'm a little too young to know
where this reference comes from.

00:00:35.630 --> 00:00:36.220
( Laughter )

00:00:36.219 --> 00:00:43.479
But according to the source of all truthful information,
Wikipedia, this is from the Flip Wilson Show back

00:00:43.479 --> 00:00:48.829
in the sixties or seventies where this is
what he would say when he was being quirky

00:00:48.829 --> 00:00:51.289
or funny about something, about his personality.

00:00:51.289 --> 00:01:01.310
And it's been picked up through time by computer engineers
to talk about laser printing and then on screen editing,

00:01:01.310 --> 00:01:03.130
is what we're going to be talking about today.

00:01:03.130 --> 00:01:03.900
( Period of silence )

00:01:03.899 --> 00:01:11.379
So there's a couple examples of this I have on screen.

00:01:11.379 --> 00:01:14.409
One's a webpage and one's a Cocoa application.

00:01:14.409 --> 00:01:18.679
It's starting to get hard to tell
the difference nowadays what's what.

00:01:18.680 --> 00:01:23.660
So I have Gmail and Sanvox by
Karelia, both used WebKit.

00:01:23.659 --> 00:01:29.750
One's in Safari and one is a Cocoa
application using a WebView.

00:01:29.750 --> 00:01:37.489
How many of you guys are HTML editors or HTML
authors and how many of you are Cocoa, Cocoa people?

00:01:37.489 --> 00:01:39.259
Let's see a show of hands.

00:01:39.260 --> 00:01:42.200
So HTML editors.

00:01:42.200 --> 00:01:44.650
Cocoa. All right.

00:01:44.650 --> 00:01:46.310
So we've got a good mix.

00:01:46.310 --> 00:01:53.640
So we're going to talk about HTML first and then go
into some of the Cocoa stuff with WebView later.

00:01:53.640 --> 00:02:01.180
The Cocoa guys don't sleep because a lot of the end
page editing can now be used in your Cocoa WebView.

00:02:01.180 --> 00:02:03.590
So you can do a lot of mix and match.

00:02:03.590 --> 00:02:09.500
So keep an ear out for some useful information
and a lot of the concepts are similar.

00:02:10.830 --> 00:02:13.810
So like I said, it all starts with Safari.

00:02:13.810 --> 00:02:15.500
Safari's the front end for WebKit.

00:02:15.500 --> 00:02:23.030
You think of WebKit, you somewhat think of Safari too and
we had a lot of big announcements this week about Safari

00:02:23.030 --> 00:02:27.039
and WebKit and that's all related to the engine.

00:02:27.039 --> 00:02:32.379
The engine's been available since
2005 or 2003, I can't remember.

00:02:32.379 --> 00:02:41.430
It's getting old now and it's grown a lot and we've
added a lot to the WebKit engine for you all to embed

00:02:41.430 --> 00:02:48.460
in your applications and take advantage
of in Safari as a webpage author.

00:02:48.460 --> 00:02:55.040
It's also a great Open Source project if you're interested
in Open Source and contributing back and helping out.

00:02:55.039 --> 00:03:00.969
We've seen a lot of interest in HTML editing
in the Open Source arena, where authors

00:03:00.969 --> 00:03:11.139
and people using editing have come in and helped file bugs,
fix things that they have pet peeves about and just help out

00:03:11.139 --> 00:03:15.439
and contribute in any way possible and that's been great.

00:03:16.800 --> 00:03:19.580
So there's three things I want to talk about today.

00:03:19.580 --> 00:03:24.180
I gave a little summary, we're going to
talk about the fundamentals of HTML.

00:03:24.180 --> 00:03:27.500
What it means to use HTML.

00:03:27.500 --> 00:03:33.580
Then we're going to talk about in-page editing in
particular using JavaScript and in your webpage.

00:03:33.580 --> 00:03:36.420
And then get into some of the Cocoa stuff.

00:03:36.419 --> 00:03:39.179
But the Cocoa people, don't sleep please.

00:03:39.180 --> 00:03:43.349
You're going to find a lot of interesting
things in the in-page editing part.

00:03:43.349 --> 00:03:47.289
So let's talk about the fundamentals of HTML.

00:03:47.289 --> 00:03:49.900
As you all know, HTML is a mark up language.

00:03:49.900 --> 00:04:00.240
It's a tag based, it's been around forever for some
of you and it's basically all over the place now.

00:04:00.240 --> 00:04:09.530
It's sprung up with XML now and there's all sorts of
places you see HTML and HTML-like things such as XML.

00:04:09.530 --> 00:04:14.819
So you should be a little bit familiar
already just in passing.

00:04:14.819 --> 00:04:19.649
But the general concept of HTML
is it's a tree-based structure.

00:04:19.649 --> 00:04:23.859
Here's an example of a simple sentence that
has some HTML formatting applied to it,

00:04:23.860 --> 00:04:27.720
some italicize, some bold and some underline.

00:04:27.720 --> 00:04:30.890
But that looks like this in HTML.

00:04:30.889 --> 00:04:32.649
You have all your tags.

00:04:32.649 --> 00:04:37.759
The tags can be nested inside other
tags, so you start getting a tree.

00:04:37.759 --> 00:04:43.800
You have your nodes, your text nodes, your
element nodes and they just keep nesting deeper

00:04:43.800 --> 00:04:47.840
and deeper depending on how nested your content is.

00:04:47.839 --> 00:04:52.569
So this is the full tree for that
example that I have up above.

00:04:52.569 --> 00:04:59.209
And this is nonsemantic mark ups so some
of you people might want me to use them

00:04:59.209 --> 00:05:03.129
or other semantic tags instead of the bold tags.

00:05:03.129 --> 00:05:06.040
But this is simpler for the slides.

00:05:06.040 --> 00:05:09.490
There's another type of structure
which is the flat structure.

00:05:09.490 --> 00:05:16.319
Those of you on the Cocoa land familiar with
NSAttributed string, will know this structure

00:05:16.319 --> 00:05:19.909
because it's all about ranges and attributes.

00:05:19.910 --> 00:05:24.530
So you have text ranges for all the
different properties that you're wanting

00:05:24.529 --> 00:05:28.000
to apply to this string character by character.

00:05:28.000 --> 00:05:31.639
There's some disadvantages with this though.

00:05:31.639 --> 00:05:34.069
Sorry about that.

00:05:34.069 --> 00:05:39.899
Where is you make any changes in this
string, these ranges have to move.

00:05:39.899 --> 00:05:45.979
If you change in the middle, it's just going to keep moving
your numbers around, you don't have a good separation

00:05:45.980 --> 00:05:50.220
of content and presentation which HTML gives you.

00:05:50.220 --> 00:05:55.090
So HTML has some advantages and it has
a lot of advanced layout capabilities.

00:05:55.089 --> 00:06:05.219
We've talked a lot about CSS here before and a lot of the
great features of HTML and CSS that are constantly evolving.

00:06:07.730 --> 00:06:15.509
So now let's go in and start talking about in-page
editing and how HTML applies in in-page editing.

00:06:15.509 --> 00:06:25.219
Of course, there's a lot of ways to do editing and this
is very particular about in-page editing with HTML.

00:06:25.220 --> 00:06:29.330
You Cocoa people are more familiar
with NSTextView and I'll talk

00:06:29.329 --> 00:06:32.689
about the similarities there but just keep that in mind.

00:06:32.689 --> 00:06:37.439
in-page editing, word processor,
that's what we're talking about today.

00:06:39.189 --> 00:06:42.730
So on the web, there's a lot of
adopters of in-page editing.

00:06:42.730 --> 00:06:50.980
There's the new Leopard Server Wiki which this is a screen shot
of, has a nice editing tool bar that lets you apply bold,

00:06:50.980 --> 00:06:56.230
italicized text without having to look
at any mark up or tag around that text.

00:06:56.230 --> 00:06:57.720
It's what you see is what you get.

00:06:57.720 --> 00:06:59.760
That's the concept.

00:06:59.759 --> 00:07:08.060
Google has been doing it for a while in Gmail and
now with their full docs feature, their application.

00:07:08.060 --> 00:07:13.009
Application on the web and that's
what we're targeting the iPhone with.

00:07:13.009 --> 00:07:15.649
Applications on the web.

00:07:15.649 --> 00:07:21.099
Hotmail, eBay and WordPress have also
adopted this and it's just growing.

00:07:21.100 --> 00:07:24.620
People are adding it everywhere.

00:07:24.620 --> 00:07:32.509
There's a lot of people that still used form
fields and plain text fields on the web,

00:07:32.509 --> 00:07:39.269
that's the old way to do editing on the web where
everything's plain text and it's a form element

00:07:39.269 --> 00:07:44.899
and start thinking about new ways to integrate
this editing that I'm talking about today

00:07:44.899 --> 00:07:47.699
into your webpages that you're designing.

00:07:47.699 --> 00:07:56.959
So when we're designing these sites or testing these sites,
we constantly run into this message and if you're a consumer

00:07:56.959 --> 00:08:01.959
and you're visiting these sites, you
always run into oh, Safari's not supported.

00:08:01.959 --> 00:08:03.250
What's that mean?

00:08:03.250 --> 00:08:04.980
Why isn't Safari supported?

00:08:04.980 --> 00:08:07.230
Are we lagging behind?

00:08:07.230 --> 00:08:13.069
Well I'm happy to say, Safari 3.0 is
the best editing experience there is.

00:08:13.069 --> 00:08:19.699
It started out with 2.0, 2.0 added it but
Safari 3.0 has the full support of editing

00:08:19.699 --> 00:08:22.539
and I'll talk about what that means later on.

00:08:22.540 --> 00:08:28.710
So if you're one of these sites that
blocks Safari, I encourage you to go out

00:08:28.709 --> 00:08:32.299
and download the new beta that we announced Monday.

00:08:32.299 --> 00:08:37.899
Test on Windows, test on Mac, you have no
excuse if you don't have a Mac anymore.

00:08:37.899 --> 00:08:41.370
You can test, test, test on Windows now.

00:08:41.370 --> 00:08:46.190
So if you have one of these sites that's
blocking Safari, please turn us on.

00:08:46.190 --> 00:08:54.290
We find that if we just go in to the debug menu in
Safari and spoof is Firefox, it's just supported.

00:08:54.289 --> 00:08:55.439
It just works.

00:08:55.440 --> 00:08:58.790
So if you're looking for Safari, please unblock us.

00:08:58.789 --> 00:09:03.069
And if you're one of the visitors to
these sites, send them a kind message.

00:09:03.070 --> 00:09:12.050
Let them know that Safari 3.0 is out there and that
you can now test and use these new editing features.

00:09:13.429 --> 00:09:17.659
So let's diverge a little bit and talk a
little bit about proper browser detection.

00:09:17.659 --> 00:09:21.409
So these sites are obviously blocking Safari.

00:09:21.409 --> 00:09:27.929
They're obviously doing some browser checking to show
that message to you, that Safari is not supported.

00:09:27.929 --> 00:09:33.599
Well I encourage you to test for WebKit, not Safari.

00:09:33.600 --> 00:09:39.779
WebKits used by many browsers on Mac
OS X such as OmniWeb and Shira.

00:09:39.779 --> 00:09:45.769
You're just going to be either letting them in and not
knowing it or just blocking them for no good reason.

00:09:45.769 --> 00:09:49.870
So if you're testing for Safari, you're
really not testing for the right thing.

00:09:49.870 --> 00:09:51.870
So test for WebKit.

00:09:51.870 --> 00:09:56.919
But besides that, test for engine features, not the engine.

00:09:56.919 --> 00:10:01.559
You don't want to be in the business of
improving your browser sniffing all the time.

00:10:01.559 --> 00:10:07.399
Browsers change too quickly to keep
up with your user agent checking.

00:10:07.399 --> 00:10:13.039
With you can do feature checking with the
queryCommandSupported which I'll talk about later

00:10:13.039 --> 00:10:19.370
and JavaScript object detection,
which I'll talk about later too.

00:10:19.370 --> 00:10:27.440
So if you do have to check the engine, check
for ranges or a number that never ends.

00:10:27.440 --> 00:10:32.790
Just a beginning number and in the future
and I'll talk about that a little later.

00:10:32.789 --> 00:10:36.519
Because Safari now has a version
that's in the 500 ranges.

00:10:36.519 --> 00:10:42.340
It was in the 400 ranges for Tiger but all of a
sudden, once we hit 500, sites that were looking

00:10:42.340 --> 00:10:48.780
for 400, stopped working even though it's the
same Safari, it's an even better version than WebKit.

00:10:48.779 --> 00:10:53.480
So keep that in mind when you have to do version checking.

00:10:53.480 --> 00:11:01.769
So here's an example of feature detection using
JavaScript object detection with the in operator.

00:11:01.769 --> 00:11:08.309
So the first example here and I'll talk about the selection
object later, I'm just going to give you this example first.

00:11:08.309 --> 00:11:09.969
This is for WebKit.

00:11:09.970 --> 00:11:14.990
So we're looking for the getSelection property
on the window object and if that exists,

00:11:14.990 --> 00:11:22.250
we'll get the selection object which
can then be turned into a string later.

00:11:22.250 --> 00:11:30.769
For Mozilla and Gecko, yeah Gecko and Opera, the
getSelection property is the exact same name,

00:11:30.769 --> 00:11:33.639
but it's on the document instead of the window

00:11:33.639 --> 00:11:38.319
And IE has their own way of doing it, when don't they?

00:11:38.320 --> 00:11:44.570
They have a selection property on the document
and then they also have a createRange function

00:11:44.570 --> 00:11:49.070
on that selection object to get the text of the selection.

00:11:49.070 --> 00:11:53.470
So this is the IE trident engine and in the end,

00:11:53.470 --> 00:11:56.730
we're storing that in the same variable
and then we can alert that to the user.

00:11:56.730 --> 00:11:59.360
That works in all engines.

00:11:59.360 --> 00:12:01.810
But this is the three different ways you can test.

00:12:01.809 --> 00:12:10.239
Notice none of these if statements say if Safari,
if WebKit, if trident, if IE, there's none of that.

00:12:10.240 --> 00:12:15.269
Maybe a browser will come along that has
the getSelection object on the window

00:12:15.269 --> 00:12:18.949
and it's not Safari it just works,
maybe they're trying to be compatible.

00:12:18.950 --> 00:12:20.320
That's what the web is all about.

00:12:20.320 --> 00:12:22.700
Everyone's trying to be compatible with each other.

00:12:22.700 --> 00:12:25.830
So some of these things might start
working with other browsers

00:12:25.830 --> 00:12:30.300
and if you design your code right,
it'll just work in the future.

00:12:30.299 --> 00:12:41.209
So as a last resort, if you do need to do user agent
sniffing, look for WebKit like I was talking about earlier

00:12:41.210 --> 00:12:44.090
and look for the engine and not the browser.

00:12:44.090 --> 00:12:47.629
The IE engine is used on other browsers on Windows.

00:12:47.629 --> 00:12:51.570
If you're just looking for IE, it's not going to work.

00:12:51.570 --> 00:12:55.129
Gecko is used in Netscape and Firefox.

00:12:55.129 --> 00:13:01.730
Opera is used in Opera and this
is an example of the user agents.

00:13:01.730 --> 00:13:06.750
I don't want to stay much on this slide because
I really don't encourage doing this at all.

00:13:06.750 --> 00:13:10.210
You really want to do the feature checking.

00:13:11.710 --> 00:13:14.230
So now let's really talk about in-page editing.

00:13:14.230 --> 00:13:16.139
Now that we've gone off on a tangent.

00:13:16.139 --> 00:13:21.919
Now let's get into the meat of editing
instead of how to test for browsers.

00:13:24.210 --> 00:13:29.300
So like I said, there's a lot of adopters
lately and here's an example of a few.

00:13:29.299 --> 00:13:38.199
I really love the new Leopard Server Wiki; they've
done a great job with making a nice, simple Wiki editor.

00:13:40.879 --> 00:13:47.009
So there's two modes of editing:
DesignMode and ContentEditable mode.

00:13:47.009 --> 00:13:53.000
And let's talk about the first one, DesignMode for a bit.

00:13:53.000 --> 00:13:56.399
DesignMode is the entire document is editable.

00:13:56.399 --> 00:13:58.000
Everything.

00:13:58.000 --> 00:14:00.340
You, there's no non-editable areas.

00:14:00.340 --> 00:14:08.980
The only way to mix editable and non-editable
content is to use an i frame or some other frame.

00:14:08.980 --> 00:14:15.159
So in this code example, I'm turning on
designMode for the current document.

00:14:15.159 --> 00:14:19.929
That means, whatever the current document is,
it's just going to be editable by the user now.

00:14:21.169 --> 00:14:28.979
And now here's our second example that has an i frame
that I check for and find with getElementByID

00:14:28.980 --> 00:14:32.610
and get the content document and
turn on designMode that way.

00:14:32.610 --> 00:14:37.830
So now that i frame is editable, but the document
that includes the i frame is not editable.

00:14:37.830 --> 00:14:44.600
That's the only way with DesignMode, to mix content.

00:14:44.600 --> 00:14:56.550
IE came up with the ContentEditable property, which
Safari has adopted and I'll go into that in a bit.

00:14:56.549 --> 00:14:59.199
But this lets you have editable pockets.

00:14:59.200 --> 00:15:05.879
You can have your whole document and do all the fancy
designs that you want and have these specific areas.

00:15:05.879 --> 00:15:11.389
This is closer to a form element than
design mode is, but it's not a form element.

00:15:11.389 --> 00:15:13.639
So don't get confused by that.

00:15:13.639 --> 00:15:18.529
It will not, the content will not
automatically get submitted with a form.

00:15:18.529 --> 00:15:21.089
So it's as simple as that.

00:15:21.090 --> 00:15:29.019
Just contenteditable equals true and you can come in later
in a nested block and say contenteditable equals false

00:15:29.019 --> 00:15:35.610
and that'll prevent any edits inside
that sub-block, but there's a catch.

00:15:35.610 --> 00:15:38.889
That block is inside an editable area.

00:15:38.889 --> 00:15:45.230
So if you can get your selection around that block, inside
the editable area, you can delete the non-editable area.

00:15:45.230 --> 00:15:47.470
So it's tricky.

00:15:47.470 --> 00:15:48.610
It's content editable.

00:15:48.610 --> 00:15:51.259
It's about the content, not about the block.

00:15:51.259 --> 00:15:57.409
So the block can be deleted, the content inside of it can't.

00:15:57.409 --> 00:15:58.789
So that's content editable.

00:15:58.789 --> 00:16:03.329
Now here's the browser story, the compatibility story.

00:16:03.330 --> 00:16:12.900
Firefox only supports DesignMode and I have no idea
if they plan to add ContentEditable in the future.

00:16:12.899 --> 00:16:20.250
But history tells us that browsers always try to be
like each other so it might show up in the future.

00:16:20.250 --> 00:16:21.440
IE has both.

00:16:21.440 --> 00:16:25.430
I was having trouble verifying DesignMode actually.

00:16:25.429 --> 00:16:32.539
I've read all over the place that it supports it, but
every test I've tried say it just doesn't turn on.

00:16:32.539 --> 00:16:34.649
So who knows what that's all about.

00:16:34.649 --> 00:16:44.809
But there's always both that you can try in
IE and Safari and WebKit supports both modes,

00:16:44.809 --> 00:16:46.899
beautifully.

00:16:46.899 --> 00:16:55.620
And if you're doing this, try using DesignMode
across the board and you can always have a frame

00:16:55.620 --> 00:17:03.470
that has a body that's content editable inside of it
to trigger both modes and that won't confuse WebKit

00:17:03.470 --> 00:17:06.100
and that's how I ended up getting IE working.

00:17:06.099 --> 00:17:09.289
By having the body be content editable.

00:17:11.900 --> 00:17:19.650
So when you're editing, there's all these commands that
you as a user might want to do on some text, bold, italic,

00:17:19.650 --> 00:17:26.470
underlined and these are commands,
command names that the engine supports.

00:17:26.470 --> 00:17:29.000
WebKit in particular.

00:17:29.000 --> 00:17:36.430
IE has the same command set and there's
probably a few that both have and some don't.

00:17:36.430 --> 00:17:40.740
But this is the set that WebKit has.

00:17:40.740 --> 00:17:48.829
So these command names you're probably familiar with doing
command B, command i for italicize, that still works.

00:17:48.829 --> 00:17:55.299
If you're in one of these regions in Safari, you can just
type your normal command keys that you're all familiar with.

00:17:55.299 --> 00:18:02.730
These commands are used by what's called the execCommand
function and I'll talk about that on the next slide.

00:18:02.730 --> 00:18:07.990
But these are all the commands we support
and they're always tied to a command key too.

00:18:07.990 --> 00:18:10.200
Most of them at least.

00:18:10.200 --> 00:18:17.759
So there's a lot of text on this slide, but
I've highlighted the areas that are important.

00:18:17.759 --> 00:18:25.549
JavaScript has a function on the body called execCommand
and this is supported by all three browsers

00:18:25.549 --> 00:18:31.970
and what you do is you pass in one of those
command names that was on the previous slide.

00:18:31.970 --> 00:18:38.740
So if you want to design a fancy tool bar, a tool bar that
has a bold button, italicize button, an underline button

00:18:38.740 --> 00:18:45.750
and font size and anything like that, you
would execute one of these commands by name.

00:18:45.750 --> 00:18:47.589
So here's an example.

00:18:47.589 --> 00:18:52.769
I need to get the document, so I have my
frame, I get the content document off of it.

00:18:54.160 --> 00:18:59.070
I then want to check if that command
is supported at all by the browser

00:18:59.069 --> 00:19:05.929
and to do that there's the queryCommandSupported
and queryCommandEnabled.

00:19:05.930 --> 00:19:08.090
They're subtly different.

00:19:08.089 --> 00:19:14.389
Supported means does this engine support it
at all and then there's queryCommandEnabled

00:19:14.390 --> 00:19:21.570
where maybe the current selection doesn't support
that command, but the browser still supports it.

00:19:21.569 --> 00:19:30.339
So you want to check for both and then maybe disable
your tool bar button if neither of those return true.

00:19:30.339 --> 00:19:35.319
Then when the tool bar button's clicked, you'll
just call execCommand and pass on the command name.

00:19:35.319 --> 00:19:42.259
execCommand also takes two other arguments that some of
the commands use, but I won't get into that in detail.

00:19:42.259 --> 00:19:44.160
You can look that up online.

00:19:44.160 --> 00:19:48.170
There's also a couple more query commands.

00:19:48.170 --> 00:19:52.940
This is for toggling state or seeing
the current state of the selection.

00:19:52.940 --> 00:19:58.920
All of these functions operate on whatever
is currently selected in the editable area.

00:19:58.920 --> 00:20:03.920
So this will give you an answer based
on what the user has currently selected

00:20:03.920 --> 00:20:07.980
or the current insertion point
if there's no range selection.

00:20:07.980 --> 00:20:16.849
So the first one, queryCommandIndeterm, will tell me if
the current selection has a mixed state of bold and not bold

00:20:16.849 --> 00:20:25.149
in this example and maybe I'm going to show my tool bar
button in a special way to show this mixed state.

00:20:25.150 --> 00:20:31.530
Then the second one, queryCommandState, will
return true or false if the selection has that bold.

00:20:31.529 --> 00:20:36.149
So if it's not a mixed state, we just
want to check to see if bold is on or off.

00:20:36.150 --> 00:20:38.370
And then we might want to toggle the tool bar differently.

00:20:38.369 --> 00:20:44.729
And then in the end, we'll just turn it back to it's
normal class name and I'm not going to go into detail

00:20:44.730 --> 00:20:53.329
about what those other lines are where we're setting the
class name, that's just standard CSS toggling of class

00:20:53.329 --> 00:20:56.960
and I went into that last year at another presentation.

00:20:56.960 --> 00:21:04.880
So I'm going to give a demo actually of one of these tool
bars I designed when I was doing this presentation.

00:21:04.880 --> 00:21:13.950
I wanted to show a nice tool bar and you're probably
familiar with some of the other tool bars that are out there

00:21:13.950 --> 00:21:22.039
on the web, that look a lot like Windows
95, the ugly gray bezzled buttons.

00:21:22.039 --> 00:21:23.379
So I'm going to show you something special.

00:21:23.380 --> 00:21:25.360
Can we switch to the demo machine?

00:21:25.359 --> 00:21:33.369
So this, this page up in Safari right
now, is actually an editable area.

00:21:33.369 --> 00:21:38.129
If I click in here, it's going to give
me a selection and I can start typing.

00:21:38.130 --> 00:21:42.190
But when I click, my toolbar just fades in.

00:21:42.190 --> 00:21:48.160
It's an editable area, but it respects
the current focus of the user.

00:21:48.160 --> 00:21:50.140
So we don't need to show it all the time.

00:21:50.140 --> 00:21:52.540
The user is not editing all the time.

00:21:52.539 --> 00:21:59.279
So I encourage you, if you are designing tool bars, fade
them in or bring them in when the user actually needs them.

00:21:59.279 --> 00:22:02.670
No reason to clutter up the page when it's not in use.

00:22:02.670 --> 00:22:08.950
So like I was saying earlier, you can
come in here and just start typing.

00:22:08.950 --> 00:22:19.240
This is live text just like a text editor and this is
actually an i frame so it scrolls and you can go in here

00:22:19.240 --> 00:22:25.970
and I'm going to hit command b, maybe I want to
italicize some things and you can see

00:22:25.970 --> 00:22:29.600
up in the top, my tool bar buttons are respecting it.

00:22:29.599 --> 00:22:34.339
I didn't even go up there and touch
it, but I'm responding to these changes

00:22:34.339 --> 00:22:40.289
and I'm toggling my tool bars using the
queryCommand functions I talked about.

00:22:40.289 --> 00:22:44.309
So when I change selections, the tool
bar hides, I can get an insertion point,

00:22:44.309 --> 00:22:50.669
the bold button comes on, changing the justification.

00:22:52.069 --> 00:22:54.409
So let's also add a link.

00:22:54.410 --> 00:23:00.630
So now we have a link to apple.com
here and you can click it open link.

00:23:00.630 --> 00:23:03.660
Links now in Safari are disabled by default.

00:23:03.660 --> 00:23:07.990
So I can get in here in an editable area, they're disabled.

00:23:07.990 --> 00:23:13.380
I can get in here and make any changes
while this is linkified and it's not

00:23:13.380 --> 00:23:17.270
like a hat trick trying to get
your selection around this link.

00:23:17.269 --> 00:23:21.549
Before it was a really difficult to
make a selection while the link is live.

00:23:21.549 --> 00:23:24.869
You would all of a sudden be going off to this other page.

00:23:24.869 --> 00:23:30.769
So that's another change in WebKit in the 3.0 version.

00:23:30.769 --> 00:23:34.400
We can also get in here and insert an image.

00:23:34.400 --> 00:23:38.190
I have a default image in here and that's the Safari logo.

00:23:38.190 --> 00:23:40.210
This is all drag and drop.

00:23:40.210 --> 00:23:43.190
This is how powerful our editing support is.

00:23:43.190 --> 00:23:44.799
It's just like a text editor.

00:23:44.799 --> 00:23:46.240
Just like you would be in text edit.

00:23:46.240 --> 00:23:48.680
You could do all this same things in text edit.

00:23:48.680 --> 00:23:50.230
This is in a webpage.

00:23:50.230 --> 00:23:54.120
You can do whatever you want, put
any chrome around this you want.

00:23:55.410 --> 00:24:01.080
And I, while designing this, I made
this tool bar work also in Firefox.

00:24:01.079 --> 00:24:02.439
It's the same exact tool bar.

00:24:02.440 --> 00:24:10.130
You can go in here, command b, well they overrode
that with bookmarks and they overrode that too.

00:24:10.130 --> 00:24:12.830
Safari doesn't override any of the defaults so.

00:24:12.829 --> 00:24:13.899
( Laughter )

00:24:13.900 --> 00:24:14.960
( Applause )

00:24:14.960 --> 00:24:19.160
It's a much better editing experience.

00:24:19.160 --> 00:24:21.150
So that's why tool bars are invented.

00:24:21.150 --> 00:24:24.970
You can come up here and click and italicize and underline.

00:24:24.970 --> 00:24:29.339
But in Safari, you really don't need the tool bar, you
can just use your command keys that you're always used

00:24:29.339 --> 00:24:33.129
to and everything just works cross browser.

00:24:33.130 --> 00:24:35.790
So back to slides.

00:24:35.789 --> 00:24:52.700
( Applause )
So this tool bar that I designed is going to
be available as sample code for the session.

00:24:52.700 --> 00:25:02.170
( Applause )
And I believe the version up there right now is
a preliminary version that only works in Safari.

00:25:02.170 --> 00:25:08.150
Last night I just got Firefox working and it
only took me a couple hours to get it working.

00:25:08.150 --> 00:25:11.750
So I'm going to get the new version available
and it's going to be up probably soon.

00:25:11.750 --> 00:25:16.019
So be sure to check back and get the cross browser version.

00:25:16.019 --> 00:25:18.809
It's a drop-in library I didn't show you any of the code.

00:25:18.809 --> 00:25:21.319
That's kind of dense, adding the browser support.

00:25:21.319 --> 00:25:23.730
It's a lot of code actually.

00:25:23.730 --> 00:25:27.670
So I'll talk about that later, but
it's, this is a drop-in library.

00:25:27.670 --> 00:25:29.880
You can just include two files.

00:25:29.880 --> 00:25:33.430
The CSS file and the JavaScript file.

00:25:33.430 --> 00:25:39.220
And it'll go in and attach itself to any i
frame that has an editable class name on it.

00:25:39.220 --> 00:25:45.710
So if you just put in any i frames in your code,
it'll go in and attach itself on any of those frames.

00:25:45.710 --> 00:25:51.819
So it'll, it'll respond for focus on any of those.

00:25:51.819 --> 00:25:54.789
So I talked about selection in my demo.

00:25:54.789 --> 00:25:56.789
And selection is difficult.

00:25:56.789 --> 00:26:02.109
There's a lot of complexities with doing
selection in a tree-based structure.

00:26:02.109 --> 00:26:07.579
And I've brought back my example
from earlier showing the HTML nodes.

00:26:07.579 --> 00:26:11.389
Selection in the webpage is represented with a DOM range.

00:26:11.390 --> 00:26:14.370
And that's the Document Object Model.

00:26:14.369 --> 00:26:20.250
Where you have the different nodes
of the page, the different elements

00:26:20.250 --> 00:26:27.019
and a DOM range is represented
with a start node and an end node.

00:26:27.019 --> 00:26:30.779
So there's two nodes somewhere in the tree.

00:26:30.779 --> 00:26:33.200
And they have offsets inside of them.

00:26:33.200 --> 00:26:41.690
So in my example here, my start node is
the bold movement node, the bold element

00:26:41.690 --> 00:26:44.769
and I'm offsetting two characters inside of it.

00:26:44.769 --> 00:26:46.660
It's not really offset of two characters.

00:26:46.660 --> 00:26:51.060
It's an offset of characters or
elements that are inside of that node.

00:26:51.059 --> 00:26:53.519
So keep that in mind.

00:26:53.519 --> 00:26:59.059
And my end is an offset of some other
node that's up higher in the tree.

00:26:59.059 --> 00:27:01.319
And I'm offsetting from the end End:9.

00:27:01.319 --> 00:27:05.359
So that's what the selection looks like in the browser.

00:27:05.359 --> 00:27:06.679
It's just a simple selection.

00:27:06.680 --> 00:27:09.580
But under the hood it's a DOM range.

00:27:09.579 --> 00:27:16.089
What's nice about DOM ranges compared to a flat
structure, if you make a selection, it's just a number.

00:27:16.089 --> 00:27:20.769
It's just two number the start and the offset length.

00:27:20.769 --> 00:27:28.500
But if you go in and make a change to that text,
your numbers are changing behind the scenes.

00:27:28.500 --> 00:27:29.890
And that's true with a DOM range.

00:27:29.890 --> 00:27:31.490
The offsets could change.

00:27:31.490 --> 00:27:35.289
But if you change in the middle,
the DOM range is not going to change.

00:27:35.289 --> 00:27:39.129
It's the same two nodes, it's the same two offsets.

00:27:39.130 --> 00:27:41.290
But content in the middle has changed.

00:27:41.289 --> 00:27:44.109
So keep that in mind when you're working with DOM ranges.

00:27:44.109 --> 00:27:50.629
They could, they can persist through many
edits unless you're editing the nodes

00:27:50.630 --> 00:27:53.000
that are the start and end containers.

00:27:53.000 --> 00:27:56.480
You're DOM range might not change at all.

00:27:56.480 --> 00:27:58.630
So that's selection.

00:27:58.630 --> 00:28:00.430
How do you get a selection?

00:28:00.430 --> 00:28:04.880
So the execCommands handle a lot of this for you.

00:28:04.880 --> 00:28:09.250
Notice in my earlier slides, execCommand
didn't do anything with the selection.

00:28:09.250 --> 00:28:15.180
It just automagically took the selection
that the user had and bold or unbolded it.

00:28:15.180 --> 00:28:17.279
There is no code dealing with the selection.

00:28:17.279 --> 00:28:22.879
But if you want to do any programmatic work
with the selection, here's an example.

00:28:22.880 --> 00:28:23.850
I used this earlier.

00:28:23.849 --> 00:28:27.199
This is the WebKit part of the
getting the selection object.

00:28:27.200 --> 00:28:32.700
There is also other ways to do it for the
different browsers as I showed in my other slides.

00:28:32.700 --> 00:28:34.309
But I'm just going to show the WebKit way.

00:28:34.309 --> 00:28:40.710
Obviously you would do this in a cross browser
way if you really cared about other browsers.

00:28:40.710 --> 00:28:43.450
So window.getSelection.

00:28:43.450 --> 00:28:45.110
That'll get me an object.

00:28:45.109 --> 00:28:51.009
A lot of you might be familiar with this
and you've just seen it get the text.

00:28:51.009 --> 00:28:53.390
But it's really an object.

00:28:53.390 --> 00:28:58.710
It's tricky under the hood. JavaScript, when
you ask for the text, it gives you the text.

00:28:58.710 --> 00:29:01.860
Using the two string function on that object.

00:29:01.859 --> 00:29:05.869
So if you do an alert, that'll
just show you the text selection.

00:29:05.869 --> 00:29:13.009
People forget it's an object, so there's properties on
that object such as the ancestorNode, or the anchorNode

00:29:13.009 --> 00:29:17.450
and the focusNode, which is the start and the endNode.

00:29:17.450 --> 00:29:22.960
Funnily named, but it's for cross browsers
where other browsers have these same names.

00:29:22.960 --> 00:29:28.690
So the anchor node and the offset in that node and
the same for the endNode which is the focusNode.

00:29:28.690 --> 00:29:34.940
And the focusNode is almost the node that you would
have if you just had a single insertion point blinking.

00:29:34.940 --> 00:29:36.400
There would be no anchor node.

00:29:36.400 --> 00:29:38.769
It would just be the focus node.

00:29:40.740 --> 00:29:44.700
So you can also set the selection
using the selection object.

00:29:44.700 --> 00:29:48.740
You get the selection object the
same way depending on your browser.

00:29:48.740 --> 00:29:51.410
This is the WebKit example again.

00:29:51.410 --> 00:29:55.570
The first thing you'll probably want to do
it clear whatever is currently selected.

00:29:55.569 --> 00:30:01.950
If you start messing with the selection object without
clearing it first, it's just going to extend the selection.

00:30:01.950 --> 00:30:03.630
So keep that in mind.

00:30:03.630 --> 00:30:07.370
Here's the first example.

00:30:07.369 --> 00:30:09.889
You ask the document to create a DOM range.

00:30:09.890 --> 00:30:11.830
And these are standard DOM calls.

00:30:11.829 --> 00:30:19.629
If you're not familiar with the DOM, I encourage you to
go learn more about the DOM because the DOM is massive.

00:30:19.630 --> 00:30:23.320
You can spend a lot of time talking just about the DOM.

00:30:23.319 --> 00:30:28.289
But document has a createRange function
that'll give you a new DOM range.

00:30:28.289 --> 00:30:32.589
Then you can mess with that DOM
range, you can change that DOM range.

00:30:32.589 --> 00:30:36.509
And there's a selectNode function on that range.

00:30:36.509 --> 00:30:42.629
And that will select from the start of that one node
to the end of the node all of the content in it.

00:30:42.630 --> 00:30:46.970
And I believe it selects the node in hold too.

00:30:46.970 --> 00:30:48.210
That gives you just a range.

00:30:48.210 --> 00:30:51.319
That doesn't modify the current selection.

00:30:51.319 --> 00:30:52.409
You just have a DOM range.

00:30:52.410 --> 00:30:56.430
You can do a lot of other things with DOM ranges in the DOM.

00:30:56.430 --> 00:30:59.340
But now I want to make that the current selection.

00:30:59.339 --> 00:31:06.149
So I tell the selection object which
is the s variable add this range.

00:31:06.150 --> 00:31:10.810
That will either extend the range, but we
cleared it earlier, but that will extend

00:31:10.809 --> 00:31:15.929
or set the range to whatever you have passed in.

00:31:15.930 --> 00:31:18.230
There's also other ways to make the DOM range.

00:31:18.230 --> 00:31:22.140
You can specify each start and end node.

00:31:22.140 --> 00:31:24.850
And the offset into that node.

00:31:24.849 --> 00:31:33.299
So in this example, I have a paragraph node that
I want to offset 10 in and 20 on the other end.

00:31:33.299 --> 00:31:38.190
And then I add that range just like I did the earlier one.

00:31:38.190 --> 00:31:42.220
So those two are two different
examples of making a DOM range.

00:31:42.220 --> 00:31:45.860
So what about saving?

00:31:45.859 --> 00:31:50.799
I talked earlier, the content editable
areas aren't form elements.

00:31:50.799 --> 00:31:56.049
They don't get sent, the content
doesn't get sent when you submit a form.

00:31:56.049 --> 00:31:59.069
So there's a few ways you can do this.

00:31:59.069 --> 00:32:00.649
You would use DOM operations.

00:32:00.650 --> 00:32:08.090
You can get the content of this thing, this
editable area by using the innerHTML property.

00:32:08.089 --> 00:32:12.939
That'll tell you, that'll serialize
the DOM nodes for you into HTML.

00:32:12.940 --> 00:32:16.320
You don't have to worry about serializing
and walking the DOM or anything.

00:32:16.319 --> 00:32:17.259
This'll do it for you.

00:32:17.259 --> 00:32:23.019
This'll use the engine, the speed of the
engine to serialize this DOM for you.

00:32:24.740 --> 00:32:27.609
So here's an example.

00:32:27.609 --> 00:32:31.069
The first one is for an i frame.

00:32:31.069 --> 00:32:35.000
So I'm getting the content document
and then I'm getting the body element.

00:32:35.000 --> 00:32:40.940
Since the entire document is editable, anything
in the body is what I'm really care about.

00:32:40.940 --> 00:32:47.930
And then I ask the body for the innerHTML and that'll
be everything inside the body, serialized in HTML form.

00:32:47.930 --> 00:32:54.000
The second example is a content editable area.

00:32:54.000 --> 00:32:56.049
And it's the same concept.

00:32:56.049 --> 00:33:03.069
You get your editable area, any div that's on the page.

00:33:03.069 --> 00:33:06.879
And then ask for its innerHTML.

00:33:06.880 --> 00:33:10.000
That's everything inside of the div.

00:33:10.000 --> 00:33:12.839
So what about submitting this?

00:33:12.839 --> 00:33:16.240
So you got the content, now what do you do with it?

00:33:16.240 --> 00:33:24.380
So you have a FormElement and Input hidden,
so it's not showing up anywhere on the page.

00:33:24.380 --> 00:33:28.020
You can change that to text if you want to debug it to see it.

00:33:28.019 --> 00:33:32.809
But hidden will be a hidden element
on the page in your form.

00:33:32.809 --> 00:33:40.429
And then you have some script that when the form
submits, like on your on submit handler for the form,

00:33:40.430 --> 00:33:45.720
you take the content that you got, find the
hidden element that I want to insert this is,

00:33:45.720 --> 00:33:48.660
and just set the value of that hidden element.

00:33:48.660 --> 00:33:53.080
That'll put your edited content in the form element.

00:33:53.079 --> 00:33:57.269
Any future edits that happen after that won't be saved.

00:33:57.269 --> 00:34:00.990
But this is a way you can then submit the form.

00:34:00.990 --> 00:34:08.530
You can also take this content and
send it in an XMLHTTPRequest in AJAX,

00:34:08.530 --> 00:34:12.400
in an AJAX fashion without even leaving the page.

00:34:12.400 --> 00:34:19.360
So you can have like auto save or things
like that, using fancy AJAX technology.

00:34:20.679 --> 00:34:22.750
So that's saving.

00:34:22.750 --> 00:34:25.110
All of this is complicated.

00:34:25.110 --> 00:34:26.460
I talked about a lot of things.

00:34:26.460 --> 00:34:28.960
That's just scratching the surface of editing.

00:34:28.960 --> 00:34:32.470
What if you just want to take this and throw it on your page

00:34:32.469 --> 00:34:36.209
and use something that's already
designed and developed for you?

00:34:36.210 --> 00:34:41.769
You don't want to spend the time learning
all the different browser inconsistencies,

00:34:41.769 --> 00:34:45.610
all the different support that
these browsers have and don't have.

00:34:45.610 --> 00:34:49.789
So there's a lot of people that have
already gone down this route for you

00:34:49.789 --> 00:34:53.739
and they've designed this JavaScript editing libraries.

00:34:53.739 --> 00:34:56.519
And there's just a few up here on screen.

00:34:56.519 --> 00:35:01.429
TinyMCE, which has helped out a
lot in our Open Source community.

00:35:01.429 --> 00:35:08.769
They've come in and helped fixed bug and file a bunch
of bugs to help us really be capable with TinyMCE.

00:35:08.769 --> 00:35:12.469
Same with FCKeditor and Cute Editor.

00:35:12.469 --> 00:35:18.339
And there's other if you just Google around, you'll
find a lot of these free libraries available.

00:35:19.840 --> 00:35:24.280
So that's in-page editing using JavaScript.

00:35:24.280 --> 00:35:32.290
And like I talked about earlier, you Cocoa Heads, now
we're going to talk about adding it to your Cocoa application.

00:35:33.739 --> 00:35:34.709
So.

00:35:34.710 --> 00:35:36.769
( Period of silence )

00:35:36.769 --> 00:35:43.000
We have a lot of experience with editing in Apple products.

00:35:43.000 --> 00:35:49.440
And there's also Sanvox from Karelia which has
also helped out a lot in the Open Source community.

00:35:49.440 --> 00:35:56.679
And helped fix and find bugs and really
contribute a lot to what's editing for 3.0.

00:35:56.679 --> 00:35:59.409
We've also improved it a lot for Mail.

00:35:59.409 --> 00:36:07.809
Mail started using WebKit and WebView for the
compose window and preview windows for HTML in Tiger.

00:36:07.809 --> 00:36:09.969
But now it's all WebKit in Mail.

00:36:09.969 --> 00:36:16.250
Everything is WebKit for the preview, the edit
and it's worked out great for the Mail team.

00:36:16.250 --> 00:36:23.289
And they've added the new stationary feature
in Leopard that uses ContentEditable areas.

00:36:23.289 --> 00:36:25.719
Before they were just using DesignMode.

00:36:25.719 --> 00:36:28.689
Now it's ContentEditable.

00:36:28.690 --> 00:36:32.380
So these stationeries have pockets of information.

00:36:32.380 --> 00:36:36.369
And remember what I said about don't
sleep through the in-page editing.

00:36:36.369 --> 00:36:42.210
This is why, because you can use the
same content editable, in-page features

00:36:42.210 --> 00:36:48.030
in your Cocoa application like Mail has done.

00:36:48.030 --> 00:36:48.250
( Period of silence )

00:36:48.250 --> 00:36:53.820
So to the Cocoa people, a lot of
this sounds like NSTextView.

00:36:53.820 --> 00:36:54.420
Well it is.

00:36:54.420 --> 00:37:02.780
We started with the API, the NSText for API and
added support almost every NSResponder or command,

00:37:02.780 --> 00:37:05.890
editing related command that you can think of.

00:37:05.889 --> 00:37:11.329
And that's in both NSTextView and
WebView when the WebView is editable.

00:37:11.329 --> 00:37:20.639
NSTextView has other things that WebView doesn't
have like ligature support, if that's important to you.

00:37:20.639 --> 00:37:27.000
But WebView goes a lot far beyond
that with full HTML support.

00:37:27.000 --> 00:37:34.380
NSTextView has it with HTML on attributed
string, where you can turn HTML into one

00:37:34.380 --> 00:37:38.269
of these string objects for the text area.

00:37:38.269 --> 00:37:41.110
But its not full HTML support.

00:37:41.110 --> 00:37:43.610
And certainly not full CSS support.

00:37:43.610 --> 00:37:50.180
Which WebView has just because it's,
it needs to be a great web browser too.

00:37:50.179 --> 00:37:54.469
So that's some of the differences
between NSTextView and WebView.

00:37:56.440 --> 00:38:02.240
So like, like I was talking about earlier,
you can use both editing modes, DesignMode,

00:38:02.239 --> 00:38:07.329
and ContentEditable, just like Mail is doing in Leopard.

00:38:07.329 --> 00:38:10.920
And selection is still represented with a DOM range.

00:38:10.920 --> 00:38:17.849
You still can get a DOM range object for the selection,
and manipulate and change, using the same API.

00:38:17.849 --> 00:38:22.299
JavaScript API and the, the Objective-C DOM APIs.

00:38:22.300 --> 00:38:31.950
And you still need to use the DOM operations to serialize
your content when you want to save or get the information back

00:38:31.949 --> 00:38:36.159
out and put it, send an e-mail message, save it to disk.

00:38:36.159 --> 00:38:37.759
You still use the DOM calls.

00:38:37.760 --> 00:38:42.350
So let's talk about three things
about the WebKit editing APIs.

00:38:42.349 --> 00:38:46.219
How to enable editing for a WebView?

00:38:46.219 --> 00:38:49.789
And that's really as simple as this.

00:38:49.789 --> 00:38:52.389
Set editable, YES.

00:38:52.389 --> 00:38:57.219
And that turns on design mode essentially for the WebView.

00:38:57.219 --> 00:38:59.019
Everything is editable.

00:38:59.019 --> 00:39:04.679
Everything in the document, everything
you load is editable from then on.

00:39:04.679 --> 00:39:10.179
And when you use ContentEditable,
you don't want to turn on setEditable.

00:39:10.179 --> 00:39:15.679
Because then things outside of your ContentEditable
areas will still be editable.

00:39:15.679 --> 00:39:19.440
If you really want to mix non editable
areas like in stationary,

00:39:19.440 --> 00:39:25.639
you just want to use the Content Editable
property and not even worry about set editable.

00:39:25.639 --> 00:39:31.659
So that was, that's all you need
to enable editing for a WebView.

00:39:31.659 --> 00:39:35.319
That gets you basically everything that NSTextView can do.

00:39:35.320 --> 00:39:41.530
You can then go in and start typing all the commands
that are supported, command b, command i, command u,

00:39:41.530 --> 00:39:46.000
everything else that you normally do in NSTextView.

00:39:46.000 --> 00:39:51.559
But WebView had to go a lot, far
beyond that because there's a lot

00:39:51.559 --> 00:39:57.590
of HTML web technologies it needs
to convey through its editing APIs.

00:39:57.590 --> 00:40:01.200
So WebView has tons of delegates.

00:40:01.199 --> 00:40:03.629
There's five different delegates I think.

00:40:03.630 --> 00:40:08.990
And editing is one of the delegates
that you can be a delegate of.

00:40:08.989 --> 00:40:17.059
And I'm going to go into some of the
delegates now, but there's many more methods

00:40:17.059 --> 00:40:21.159
that you can implement to augment these default behaviors.

00:40:21.159 --> 00:40:25.389
If you want to do something different
when command b is pressed, you can.

00:40:25.389 --> 00:40:31.210
If you want to go in and manipulate the DOM
during one of these operations, you can.

00:40:31.210 --> 00:40:39.809
And in a lot of the cases, you simply
return no to prevent the default behavior.

00:40:39.809 --> 00:40:43.429
( Period of silence )

00:40:43.429 --> 00:40:47.759
So now let's talk about a few.

00:40:47.760 --> 00:40:50.440
So shouldBeginEditing, did EndEditing.

00:40:50.440 --> 00:40:53.510
These are very straightforward things.

00:40:53.510 --> 00:40:59.590
And you can return node to prevent the editing
from completing or starting altogether.

00:41:01.159 --> 00:41:04.559
ShouldInsertNode, shouldInsertText,
shouldDeleteDOMRange.

00:41:04.559 --> 00:41:07.949
These are all about inserting and
deleting things from the WebView.

00:41:07.949 --> 00:41:09.730
You get these callbacks.

00:41:09.730 --> 00:41:13.469
And I'm going to have all of these on the slide
at the end, so you can write these down.

00:41:13.469 --> 00:41:16.939
But they're going to disappear as I talk about them.

00:41:16.940 --> 00:41:21.250
So like I said earlier, DOM ranges
are all about the selection.

00:41:21.250 --> 00:41:26.460
So this is what's going to happen when you type
in text, when you insert and delete things.

00:41:26.460 --> 00:41:28.170
You're going to get a DOM range.

00:41:28.170 --> 00:41:34.269
So you're going to need to be very familiar with the
DOM range object to work with these callbacks.

00:41:34.269 --> 00:41:42.610
And then we have the styling information,
all about CSS again.

00:41:42.610 --> 00:41:45.280
That's how style is represented on the web.

00:41:45.280 --> 00:41:53.400
So you get a callback, did ApplyStyle, should
ApplyStyle and I only have the shoulds up here.

00:41:53.400 --> 00:41:59.240
These are about the typing style and when someone
presses command b, you'll get a callback saying okay,

00:41:59.239 --> 00:42:03.959
now this range has the bold property on it.

00:42:03.960 --> 00:42:05.670
( Period of silence )

00:42:05.670 --> 00:42:15.710
This is the very powerful command, the selector
you really might be interested in a lot.

00:42:15.710 --> 00:42:23.210
So I talked about the NSResponder API
and that's all about CommandByWelector.

00:42:23.210 --> 00:42:30.389
So you might be familiar with that when you're
overriding things in NSTextView sub class.

00:42:30.389 --> 00:42:34.429
Well you really don't need the
subclass WebView to do that here.

00:42:34.429 --> 00:42:42.299
Because WebView has nested views and a lot of
inner workings that's different than a normal view.

00:42:42.300 --> 00:42:48.769
We've exposed this normally subclass
method to the editing delegate.

00:42:48.769 --> 00:42:53.539
So you'll get this call before WebKit handles the selector.

00:42:53.539 --> 00:43:00.679
So you'll get a call from the bold selector and
every, all the other NSResponder selectors.

00:43:00.679 --> 00:43:04.769
And if you handle it return yes and
WebView won't do anything with it.

00:43:04.769 --> 00:43:09.289
You can do any DOM operations in
response to one of these selectors.

00:43:09.289 --> 00:43:14.869
So that's a very, very powerful editing
delegate method that you should know about.

00:43:14.869 --> 00:43:21.630
And then there's a few at the end that are just
default notifications that we sign you up for.

00:43:21.630 --> 00:43:26.670
Any object can sign themselves up for these
notifications, be an observer of these.

00:43:26.670 --> 00:43:32.050
Begining editing, did editing, changing
the typing style, changing selection.

00:43:32.050 --> 00:43:35.890
The bottom one is really important
if you're tracking the selection.

00:43:35.889 --> 00:43:40.139
So when the selection changes, you can then ask
the WebView what the current selected DOM range is

00:43:40.139 --> 00:43:42.440
and follow it if you need to.

00:43:43.639 --> 00:43:44.960
So here's all of them.

00:43:44.960 --> 00:43:46.740
There's not, this isn't all of them.

00:43:46.739 --> 00:43:48.669
But here's all the ones that I talked about.

00:43:48.670 --> 00:43:54.480
And there's more all documented in the headers.

00:43:54.480 --> 00:43:59.849
Nothing really new in Leopard, so you don't have to
worry about compatibility between Tiger and Leopard.

00:43:59.849 --> 00:44:05.739
Obviously the editing support is a lot better with the
new WebKit and that's also available on Tiger too.

00:44:05.739 --> 00:44:12.349
So if you want to require the new WebKit once it's a final
version, that would have the better editing support

00:44:12.349 --> 00:44:17.369
( Period of silence )
So that's the editing delegate.

00:44:17.369 --> 00:44:23.869
But there's a few additional methods on WebView
that aren't your typical NSTextView APIs.

00:44:23.869 --> 00:44:26.639
And here's just a few.

00:44:26.639 --> 00:44:29.569
There's a couple more other than these.

00:44:31.369 --> 00:44:38.690
You can get the current editing area
at a particular point of a WebView.

00:44:38.690 --> 00:44:43.409
If you're using ContentEditable
there's pockets of editing areas.

00:44:43.409 --> 00:44:46.549
Some is editable, some is not.

00:44:46.550 --> 00:44:55.380
And this API will return nil or an empty DOM range
if the current point is not an editable area.

00:44:55.380 --> 00:45:03.260
But if it is an editing area, it'll return the range from
start to end, everything that's in that editable area.

00:45:03.260 --> 00:45:10.140
So you can tell immediately if the user just
clicked for example on one of these editing areas

00:45:10.139 --> 00:45:15.989
if you want to show your tool bar or show
your UI or do whatever you need to.

00:45:17.219 --> 00:45:23.509
And then there's also ways to get the selected
DOM range and set the selected DOM range.

00:45:23.510 --> 00:45:27.870
And you still ask the document to
create a new DOM range for you,

00:45:27.869 --> 00:45:32.779
just like you do in JavaScript,
using the Cocoa API for that.

00:45:32.780 --> 00:45:38.650
And you can also get the current typing
style and set the current typing style.

00:45:38.650 --> 00:45:41.000
This is a CSS declaration.

00:45:41.000 --> 00:45:46.679
And I talked a little bit about this last year and some
of the other sessions where you can make a typing style

00:45:46.679 --> 00:45:54.169
or a CSS style declaration with all the typing style
information you want the current user to be typing when,

00:45:54.170 --> 00:45:58.170
when they actually start inserting characters.

00:45:58.170 --> 00:45:59.590
So that's the additional APIs.

00:45:59.590 --> 00:46:00.510
There's not a lot.

00:46:00.510 --> 00:46:04.580
Again it's very similar to NSTextView.

00:46:04.579 --> 00:46:13.670
So if you're using NSTextView now, I recommend if you're
interested or need HTML support, just use a WebView.

00:46:13.670 --> 00:46:19.590
There's no reason to be converting back and
forth between attributed strings and HTML.

00:46:19.590 --> 00:46:26.250
You can use a WebView and get everything
that WebKit supports in HTML and CSS.

00:46:28.510 --> 00:46:33.010
So that's it for the Cocoa session of the talk.

00:46:33.010 --> 00:46:39.120
And in summary, Safari and WebKit
fully support rich editing now.

00:46:39.119 --> 00:46:43.079
Editing is very hot and large in this version of Safari.

00:46:43.079 --> 00:46:44.190
( Applause )

00:46:44.190 --> 00:46:45.300
( Cheering )

00:46:45.300 --> 00:46:51.230
So, go out and test it if you haven't
installed the Beta now, get it.

00:46:51.230 --> 00:46:52.920
Try it on Windows, try it on Mac.

00:46:52.920 --> 00:46:54.760
It's the same engine.

00:46:54.760 --> 00:46:57.770
The same editing features are in both.

00:46:59.480 --> 00:47:01.820
Test, test, test.

00:47:01.820 --> 00:47:07.519
Test Safari, test WebKit when deploying your new sites.

00:47:07.519 --> 00:47:11.590
This is critical now that we have
a lot more users of Safari.

00:47:11.590 --> 00:47:14.430
Now that the Windows version is out.

00:47:16.510 --> 00:47:18.950
And again, test for functionality.

00:47:18.949 --> 00:47:26.619
If you're testing for engine features, not browser
versions or engine versions if you can avoid it.

00:47:28.400 --> 00:47:36.599
and for the Cocoa people, if you're really interested
in HTML and need HTML output or fully styled areas

00:47:36.599 --> 00:47:44.710
in your application, editable areas, fully visual
that you would normally have to subclass NSTextView

00:47:44.710 --> 00:47:49.630
and NSLayoutManager and all these other
crazy classes, you could use a WebView

00:47:49.630 --> 00:47:53.940
and simple HTML and CSS to achieve the same thing.

00:47:55.590 --> 00:47:57.950
And that's it.

00:47:57.949 --> 00:48:00.609
We have, the sample code is going to be up, like I said.

00:48:00.610 --> 00:48:03.150
There's a preliminary version up there now.

00:48:03.150 --> 00:48:07.690
And I'm going to upload the new version
that has the cross browser support.

00:48:07.690 --> 00:48:11.440
And we have an article, a new article that's been updated

00:48:11.440 --> 00:48:15.690
about JavaScript Object Detection
if you're interested in that.

00:48:15.690 --> 00:48:18.309
On the ADC site.

00:48:18.309 --> 00:48:20.409
We also have a lab on Friday.

00:48:20.409 --> 00:48:24.210
I encourage you to come if you're still sober and here.

00:48:24.210 --> 00:48:28.730
( Laughter )
At 3:30 to come down and talk to us about editing.

00:48:28.730 --> 00:48:30.280
I'll be there personally.

00:48:30.280 --> 00:48:33.180
And a lot of my teammates will be there.

00:48:33.179 --> 00:48:40.940
Where we'll answer any of your questions about the new
Safari, the new WebKit, how it works, anything like that.

00:48:42.380 --> 00:48:47.039
And just some information about the new version of WebKit.

00:48:47.039 --> 00:48:51.719
A lot of you have noticed that it replaces
the system version of the framework.

00:48:51.719 --> 00:48:56.209
The beta replaces the currently
available system version of the framework.

00:48:56.210 --> 00:49:03.240
And a lot of people are wondering why we didn't put
that into a double clickable version of the new Safari.

00:49:03.239 --> 00:49:10.849
Because we didn't want to hold back all of this great new
technology, this new editing support from your applications.

00:49:10.849 --> 00:49:16.529
We certain could have shipped a new version of
WebKit that was just for Safari and only Safari.

00:49:16.530 --> 00:49:23.230
But we want, all that powerful new features
in WebKit to be available to all the web,

00:49:23.230 --> 00:49:26.760
all the application developers
out there that are using WebKit.

00:49:26.760 --> 00:49:31.620
And let us know if there's any bugs or
breaks, anything in your application.

00:49:31.619 --> 00:49:32.920
Just let us know.

00:49:32.920 --> 00:49:36.980
And if you have any trouble or questions about
that, come down to the lab and talk to us.