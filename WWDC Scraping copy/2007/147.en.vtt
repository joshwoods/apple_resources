WEBVTT

00:00:13.619 --> 00:00:15.979
>> Good afternoon everybody.

00:00:15.980 --> 00:00:22.480
Thank you for hanging around to the end of WWDC this year.

00:00:23.609 --> 00:00:28.050
My name is Scott Kovatch, and I am an
engineer on the Java team here at Apple.

00:00:28.050 --> 00:00:34.399
And now you have the answer to the question to who is
that guy that's been hobbling around on crutches all week.

00:00:34.399 --> 00:00:39.859
And so we got a lot of good stuff for you today,
and thanks for sticking around till the end,

00:00:39.859 --> 00:00:42.210
and I hope we're going to, hope to make it worth your while.

00:00:42.210 --> 00:00:42.969
So let's get started.

00:00:42.969 --> 00:00:49.320
So this is the last stage on the Java world tour.

00:00:49.320 --> 00:00:56.149
Today's session is about polishing your application, and
sort of putting on those little, last little final touches.

00:00:56.149 --> 00:01:02.670
You know, we've gave you the good overview yesterday
morning, and we had a session yesterday about you know,

00:01:02.670 --> 00:01:07.409
the basics of bringing an application
to Mac OS X built in Java.

00:01:07.409 --> 00:01:10.659
And today's session has really got two parts in it.

00:01:10.659 --> 00:01:12.759
We're going to sort of continue on the theme of what we did

00:01:12.760 --> 00:01:17.680
in the bring your application session
yesterday, so sort of taking those final steps.

00:01:17.680 --> 00:01:21.770
And then we're going to continue on and talk about
what's new in Leopard, and talk some of the new things

00:01:21.769 --> 00:01:29.319
that you can take advantage to put
in your applications on Mac OS X.

00:01:29.319 --> 00:01:32.109
So, so far what have we done?

00:01:32.109 --> 00:01:39.430
So you built an app, learned how to build an application,
you know how to modify the Info.plist to you know,

00:01:39.430 --> 00:01:42.400
do the basic things you need to be an application.

00:01:42.400 --> 00:01:47.500
And we've also set properties via the Java
dictionary for things like the screen menu bar.

00:01:47.500 --> 00:01:53.099
So today we're going to add a few
more features to that application

00:01:53.099 --> 00:01:56.319
so you can get a great Mac OS X application in Java.

00:01:56.319 --> 00:02:01.179
And we're not going to break "write once
test run anywhere, run everywhere."

00:02:01.180 --> 00:02:02.190
I still cannot say that.

00:02:02.189 --> 00:02:05.409
I've been practicing this for four weeks,
and I still cannot say that phrase correctly.

00:02:05.409 --> 00:02:07.329
Write once, run anywhere.

00:02:07.329 --> 00:02:07.599
Thank you.

00:02:07.599 --> 00:02:08.629
( applause )

00:02:08.629 --> 00:02:09.299
All right.

00:02:09.300 --> 00:02:14.790
So here's what we're going to learn today.

00:02:14.789 --> 00:02:20.889
Today we're going to talk about handling a few
more of those basic Apple events, and you know,

00:02:20.889 --> 00:02:25.169
beyond the quit event that you learned about yesterday.

00:02:25.169 --> 00:02:27.030
We got some what we call best practices.

00:02:27.030 --> 00:02:32.349
There are a lot of things that we see come up time
and time again on Java Dev, and that come into DTS.

00:02:32.349 --> 00:02:37.729
And we're going to talk about a few of those today, and what
we think are the best ways to handle them on the Mac.

00:02:37.729 --> 00:02:40.449
They're also actually probably going to
be valid on other platforms as well,

00:02:40.449 --> 00:02:45.789
but they tend to crop up more on
the Mac for whatever reason.

00:02:45.789 --> 00:02:49.449
We're going to look at some of the new Aqua look
and feel features that we've added in Leopard,

00:02:49.449 --> 00:02:51.729
and show you how you can take advantage of those.

00:02:51.729 --> 00:02:58.069
And we're going to talk about using Java with other toolkits,
that's sort of the really advanced part of the session.

00:02:58.069 --> 00:03:04.889
We'll talk about how Java fits in with some of
the other native libraries on the Mac, I'm sorry,

00:03:04.889 --> 00:03:09.659
the native user interface libraries on the
Mac, and some other Java toolkits as well.

00:03:10.979 --> 00:03:15.439
So to get the most out of this session,
at least the first part of it anyway,

00:03:15.439 --> 00:03:19.139
you should be comfortable building a Java
application in any IDE, doesn't matter.

00:03:19.139 --> 00:03:23.619
I'm going to use Xcode today, but for what we're
going to talk about it doesn't really matter.

00:03:23.620 --> 00:03:30.090
You need to know what the Info.plist file is and why
you need to modify it, or why you would want to modify it.

00:03:30.090 --> 00:03:34.469
And last of all, be sure that you're comfortable
getting and setting system properties.

00:03:34.469 --> 00:03:37.789
Now for a lot of what I'm going to
do, that's really not important.

00:03:37.789 --> 00:03:41.090
But up to this point you know, if you got that part,

00:03:41.090 --> 00:03:46.039
if you are clear on that part, the
rest of this should be pretty easy.

00:03:46.039 --> 00:03:47.419
And finally can you make one of these?

00:03:47.419 --> 00:03:48.939
If you can do that, you're set.

00:03:48.939 --> 00:03:54.340
I mean you know, with a title like Advanced Java, I
imagine a lot of people are well beyond this stage.

00:03:54.340 --> 00:04:01.330
But how many people out here are new to the Mac
this year, this is the first time they've come?

00:04:03.099 --> 00:04:05.219
Okay, great.

00:04:07.370 --> 00:04:13.990
All right, let's first talk about some of the core
application events that your application can receive.

00:04:13.990 --> 00:04:18.910
All of them tell your application to do
something, and they're usually triggered

00:04:18.910 --> 00:04:24.010
by the Finder, or some other process on the Mac.

00:04:24.009 --> 00:04:26.930
They're not anything that you know,
come from within your application,

00:04:26.930 --> 00:04:30.800
they come from some action outside your application.

00:04:30.800 --> 00:04:37.340
You know, quit, you know, the obvious one is you know,
how to quit gracefully, which you learned about yesterday.

00:04:37.339 --> 00:04:42.789
The other ones you'll get are you'll be
told when your application has started,

00:04:42.790 --> 00:04:46.650
you'll be told that when to reopen the application.

00:04:46.649 --> 00:04:52.899
And what that means is when the, your application is in the
dock, and the user is doing something else in the system,

00:04:52.899 --> 00:04:57.060
and they want to come back to your application,
they click on your application in the dock.

00:04:57.060 --> 00:04:58.699
That's called reopening the application.

00:04:58.699 --> 00:05:00.399
And you get an event for that.

00:05:00.399 --> 00:05:03.319
Now what you want to do with that
depends on your application.

00:05:03.319 --> 00:05:09.089
If you're document based, typically you want
to open a new untitled window for example.

00:05:09.089 --> 00:05:14.179
And the other two are printing a
document and opening a document.

00:05:14.180 --> 00:05:16.110
Those are the two we're going to focus on today.

00:05:16.110 --> 00:05:20.710
The last two, okay, before we do that.

00:05:20.709 --> 00:05:25.819
These are the corresponding interfaces
that go along with those events.

00:05:25.819 --> 00:05:29.969
And the first three, quit, open, and
reopen, are pretty straightforward.

00:05:29.970 --> 00:05:34.630
I mean you'll just get, if you register for them you
get them, and you either handle them or you don't.

00:05:34.629 --> 00:05:39.019
But the last two, handlePrintFile and handleOpenFile,
actually need a little bit more

00:05:39.019 --> 00:05:44.569
than just registering for the event and handling it.

00:05:44.569 --> 00:05:50.750
So when you go about, when you want to open a
handle, handle opening files in your application,

00:05:50.750 --> 00:05:55.709
first of all you know, what happens, what does that mean?

00:05:55.709 --> 00:05:57.680
What does opening a document entail?

00:05:57.680 --> 00:05:59.860
When are you going to have to do that?

00:05:59.860 --> 00:06:02.730
Well, if the user double clicks on
a document that's been associated

00:06:02.730 --> 00:06:07.290
with your application, that's the most obvious case.

00:06:07.290 --> 00:06:13.450
If they drag a document onto your open
application icon you'll get an open file event.

00:06:13.449 --> 00:06:19.920
And finally, if the user right clicks and, in the
Finder, I'm sorry, control clicks or gets a context menu

00:06:19.920 --> 00:06:29.850
on a file icon, if your file can handle that file, it will
show up in the list of applications that can open that file.

00:06:29.850 --> 00:06:37.770
And if the user chooses that, then
you'll be sent an open file event.

00:06:37.769 --> 00:06:43.639
So to handle opening events, well yes, you got
to register for the event with the application,

00:06:43.639 --> 00:06:47.599
you learned how to do that yesterday so
I'm not going to go into too much detail.

00:06:47.600 --> 00:06:53.540
But the other thing you have to do is you have to tell
LaunchServices what kind of files you can handle.

00:06:53.540 --> 00:06:58.900
And you know, registering for documents is sort
of the you know, sort of the global theme here.

00:06:58.899 --> 00:07:03.179
But you know, we're really talking
about working with LaunchServices.

00:07:03.180 --> 00:07:07.800
And what you do in your application bundle you
have to tell LaunchServices about your document types.

00:07:07.800 --> 00:07:13.520
It's a pretty straightforward thing to do, and basically
you're going to add a new entry to your Info.plist,

00:07:13.519 --> 00:07:21.169
fill in all the data, and here's a, sort of a quick
example of how, show you the tool that we're going to use here

00:07:21.170 --> 00:07:24.080
in just a minute to do this, but
this is a property list editor.

00:07:24.079 --> 00:07:27.359
And here you can see a list of document
types that have already been registered.

00:07:27.360 --> 00:07:33.500
We're going to add a new one and fill in
these three particular pieces of data.

00:07:33.500 --> 00:07:35.949
And finally, check your work.

00:07:35.949 --> 00:07:39.420
And I'll show you what I mean by
that here in the demonstration.

00:07:39.420 --> 00:07:43.330
All right, so let's go over to the demo machine here.

00:07:43.329 --> 00:07:48.079
This is not painful, for those
of you who are worried about me.

00:07:48.079 --> 00:07:50.310
( laughter )

00:07:50.310 --> 00:07:52.509
I'm used to this by now.

00:07:52.509 --> 00:08:00.829
All right, so the first thing I want to show you
here, oops, is we have the OS X adapter sample code

00:08:00.829 --> 00:08:04.819
that you've been working with all
along, and I've already built it.

00:08:04.819 --> 00:08:09.259
Made a slight modification to it,
you're going to see why in a minute.

00:08:09.259 --> 00:08:16.759
But here I've got a jpeg file, and
I want my application to open jpegs.

00:08:16.759 --> 00:08:21.969
So let's try dragging this over, and we can
see that nope, nothing's going to happen here.

00:08:21.970 --> 00:08:26.810
You know, the Finder just you know, treats this
as we're trying to put this file in the folder.

00:08:26.810 --> 00:08:28.420
All right.

00:08:28.420 --> 00:08:31.400
So let's take a look at the Info.plist file.

00:08:31.399 --> 00:08:35.730
And here you see, well we've got a few already.

00:08:35.730 --> 00:08:43.659
We've got the CFBundle document types, and we see that
gif files are registered, and bmps, and tiff and ping.

00:08:43.659 --> 00:08:48.969
And well, you know, there's your answer,
we haven't registered for jpeg files.

00:08:48.970 --> 00:08:56.330
So I could do this right here in an Xcode,
but that's not something you really want to do.

00:08:56.330 --> 00:09:00.740
If you mess up the XML in some subtle
way, you know, you're basically hosed.

00:09:00.740 --> 00:09:04.680
And it's going to be really very hard
to tell what you did wrong.

00:09:04.679 --> 00:09:13.059
So the best way to do that is in Xcode to do a
control click on the file and say open with Finder,

00:09:13.059 --> 00:09:17.589
and the default application for
property list is property list editor.

00:09:18.649 --> 00:09:23.879
Let's open up the property list here, and
we'll look at our CFBundle document types.

00:09:23.879 --> 00:09:26.700
And here we've got an array of dictionaries.

00:09:26.700 --> 00:09:29.780
Okay, that's what the CFBundle document
types are, it's an array of dictionaries.

00:09:29.779 --> 00:09:34.649
So it's got all the information about
each type of file that we can handle.

00:09:34.649 --> 00:09:42.850
And here's the simple one for the png, we'll expand
all the, so here we have the extensions, the type name,

00:09:42.850 --> 00:09:45.580
and I'll explain what that is in
a moment, and the type role.

00:09:45.580 --> 00:09:48.100
So let's go ahead and add a new one.

00:09:48.100 --> 00:09:50.680
And I click on the document types,
I'm going to add a new child.

00:09:50.679 --> 00:09:56.449
And the first thing I got to do is, it by default
assumes a string, so we're going to turn this

00:09:56.450 --> 00:09:59.850
into a dictionary, and we'll expand that.

00:09:59.850 --> 00:10:03.750
And we'll do a new child.

00:10:03.750 --> 00:10:08.029
And let's go ahead and start, basically we're going to
add the same things that we added over here for a png,

00:10:08.029 --> 00:10:10.919
but this time we're going to do it for jpegs.

00:10:10.919 --> 00:10:19.179
So the first thing is CFBundleTypeExtensions,
and we have to turn that into an array.

00:10:19.179 --> 00:10:23.779
And we'll add a new child, and the first one is jpg.

00:10:23.779 --> 00:10:30.439
And you'll notice as I'm typing these,
I'm being very careful to hit return

00:10:30.440 --> 00:10:34.430
after I add the, or set the value for a given line.

00:10:34.429 --> 00:10:38.489
One of the quirks of property list editor is
that if you just click and go somewhere else,

00:10:38.490 --> 00:10:42.639
you'll end up editing a completely different
line than you thought you were editing.

00:10:42.639 --> 00:10:46.710
And I've done this so many times that I
think it's worth mentioning to you guys, so.

00:10:46.710 --> 00:10:48.490
So we'll close that up.

00:10:48.490 --> 00:10:55.009
And what I've done here is I've said that jpg and
jpeg are the extensions for this particular type.

00:10:55.009 --> 00:10:55.919
That's enough for now.

00:10:55.919 --> 00:10:57.149
There's other possibilities, but.

00:10:57.149 --> 00:11:11.990
And we'll go back here and add these last two descriptors,
CFBundleTypeName, and the type then, the name descriptor,

00:11:11.990 --> 00:11:23.889
if your document has a, sort of a custom type, and
the user views a list of folders in the Finder,

00:11:23.889 --> 00:11:30.590
it will use the CFBundleTypeName for the kind
part, for the kind column in that list of files.

00:11:30.590 --> 00:11:35.950
So you know, if you have some special type, or you
have multiple document types for your application,

00:11:35.950 --> 00:11:39.480
this is the kind that gets associated with the extension.

00:11:39.480 --> 00:11:50.259
So here we'll just say jpeg files, and
last of all is CFBundle type role.

00:11:50.259 --> 00:11:56.480
And there are multiple value, there, I believe at least
three types of values, there are now more in Leopard.

00:11:56.480 --> 00:12:03.230
But the two that you're going to care more, most
about for your typical work are viewer and editor.

00:12:03.230 --> 00:12:10.149
And in this case I'm going to use viewer because
the OS X adapter does nothing to edit jpeg files,

00:12:10.149 --> 00:12:13.549
it's just we're going to open it and view it.

00:12:13.549 --> 00:12:15.279
So there you go, that's all the data we need.

00:12:15.279 --> 00:12:20.839
So I'll save that, and we will rebuild.

00:12:22.519 --> 00:12:30.449
And now we see that, aha, oh what happened there?

00:12:30.450 --> 00:12:55.040
What did I do wrong?

00:12:55.039 --> 00:12:58.189
And there we go.

00:12:58.190 --> 00:13:05.200
Bring that back up here, now the Finder thinks that oh
yes, this file, this application can handle jpeg files.

00:13:05.200 --> 00:13:11.730
And if I drop it, sure enough, there
we get our nice little landscape here.

00:13:11.730 --> 00:13:15.710
Now you're going to say well wait a minute,
what about that handle open file part?

00:13:15.710 --> 00:13:22.160
Well that part's already in the code, so
if you look at the OS X adapter sample code,

00:13:22.159 --> 00:13:24.909
you'll see how we implemented the handle open file.

00:13:24.909 --> 00:13:29.379
We get the full path to the file that was
dropped on us from the application event,

00:13:29.379 --> 00:13:33.100
and in this example we open up an image viewer.

00:13:33.100 --> 00:13:42.139
So that's pretty much it, that's pretty, that's how you
go about adding a new document type to your application.

00:13:42.139 --> 00:13:54.740
All right, so let's head back to the slides here.

00:13:54.740 --> 00:14:01.389
Okay. So another thing you want to look at
for your application is the file manager.

00:14:01.389 --> 00:14:10.569
And this is part of the EAWT, this is, also goes with the
application events we've been talking about all along.

00:14:10.570 --> 00:14:14.780
The different package, it's an EIO, com.apple.eio.

00:14:14.779 --> 00:14:20.860
And it is a Java API to a number of
common file and bundle related operations.

00:14:20.860 --> 00:14:27.310
Now if you learn, you know what a bundle
is by now, just a hierarchy of folders.

00:14:27.309 --> 00:14:31.869
And you know, there's the package and the
name of the class that we're going to look at.

00:14:31.870 --> 00:14:36.009
There's actually some other interesting things in
there that you might want to take advantage of,

00:14:36.009 --> 00:14:42.909
but we're going to focus today on resources, and
specifically resources in your application's bundle.

00:14:42.909 --> 00:14:49.209
And the main use of file manager will
help you find localized resources.

00:14:49.210 --> 00:14:52.759
And this is all based on the user's language selection.

00:14:52.759 --> 00:14:57.649
And when I mean the language selection, we go to the
international menu, and we look at the language list.

00:14:57.649 --> 00:15:09.990
And here what, users can pick a ordering of languages
that they prefer when they, when running an application.

00:15:09.990 --> 00:15:13.490
So the best example I always think
of this is a Swiss user for example,

00:15:13.490 --> 00:15:17.159
who understands French and German,
and maybe Italian as well.

00:15:17.159 --> 00:15:22.919
So the first thing you, a French Swiss user
would say is oh I understand French best,

00:15:22.919 --> 00:15:25.349
so I'll put French at the top of the list.

00:15:25.350 --> 00:15:29.070
But I'm comfortable with German too, so
if German's there I'll put that second,

00:15:29.070 --> 00:15:33.770
I'd rather have French first, and Italian third.

00:15:33.769 --> 00:15:43.350
So if you use the file manager API, your application from
Java can just deal with the situation without any problems.

00:15:43.350 --> 00:15:44.440
So these are the two calls.

00:15:44.440 --> 00:15:51.310
We have a get resource that just takes a resourceName,
and by resourceName we basically mean a file name here.

00:15:51.309 --> 00:15:57.000
We're going to go find the file named
resourceName inside your bundle.

00:15:57.000 --> 00:16:02.799
And we've got a variant that will look in
a subdirectory of the resources directory.

00:16:02.799 --> 00:16:11.279
But what's interesting about this you know, what this
does, if you look at the contents and resources directory

00:16:11.279 --> 00:16:17.339
of your bundle, you can specify a number of
localizations, you know, do all the localizations

00:16:17.340 --> 00:16:19.740
for your strings, and your other resources.

00:16:19.740 --> 00:16:25.299
These calls will find the right resource based on the
current, on the user's current language selection.

00:16:25.299 --> 00:16:30.259
And if it can't find it in the
primary, it'll find it in the secondary,

00:16:30.259 --> 00:16:33.210
and if it can't find it there it'll go find it in the third.

00:16:33.210 --> 00:16:39.910
Now you know, if you're comfortable with Java
and you've done localization in Java before,

00:16:39.909 --> 00:16:42.039
you're saying to yourself okay, well this is silly.

00:16:42.039 --> 00:16:45.599
Why should I use this if Java already
has localization built into it?

00:16:45.600 --> 00:16:50.090
You know, I stick all my resources into
my Jar file, and in the right directory,

00:16:50.090 --> 00:16:52.970
and the resource bundle goes off and finds it.

00:16:52.970 --> 00:16:56.220
Well there's a slight problem with this on the Mac.

00:16:56.220 --> 00:17:03.029
Java's only got one fallback language, and typically what
happens is you provide a default set, which is English,

00:17:03.029 --> 00:17:07.920
and the user's main language, we pick that up.

00:17:07.920 --> 00:17:15.200
And they find your resources for that language, but if they
don't find it for the particular language that they ask for,

00:17:15.200 --> 00:17:18.160
they're going to get English, and not their second choice.

00:17:18.160 --> 00:17:21.560
And generally this just leads to a bad user experience.

00:17:21.559 --> 00:17:28.159
And if you use the Mac OS ones, you're
going to get the experience that they expect

00:17:28.160 --> 00:17:33.640
with all their other non-Java applications,
so that they're going to get the right language,

00:17:33.640 --> 00:17:38.570
we're going to get the right language
for the string that they've asked for.

00:17:38.569 --> 00:17:41.319
And remember you write once, run anywhere.

00:17:41.319 --> 00:17:48.960
You know, I ran a little pseudocode that says if you're
on a Mac, we'll call FileManager.getResource,

00:17:48.960 --> 00:17:55.480
otherwise we'll go to the resource bundle that
we've already got, and we'll get a string from it.

00:17:55.480 --> 00:17:59.180
Now one thing I didn't write on this slide, but it
actually came up this week and I wanted to call it out,

00:17:59.180 --> 00:18:06.080
is that there's nothing about getResource that
says this has to be a text file of strings.

00:18:06.079 --> 00:18:13.519
All getResource does is return you a path to
someplace inside your bundle for some file.

00:18:13.519 --> 00:18:20.950
And if that some you know, some sort of like a command
line tool that you bundle inside your application,

00:18:20.950 --> 00:18:24.160
you can stick that in the non-localized
part of your resources,

00:18:24.160 --> 00:18:27.570
just in contents resources, and call getResource.

00:18:27.569 --> 00:18:33.809
We'll go find it for you, and then you can
run runtime.exec on it, for example.

00:18:33.809 --> 00:18:39.240
This is a, it's a handy way to stuff things inside
your application and not worry about you know,

00:18:39.240 --> 00:18:43.319
well how am I going to find it, because I don't
have you know, I don't know what path, where my,

00:18:43.319 --> 00:18:45.879
what current directory we're in or anything like that.

00:18:45.880 --> 00:18:50.150
If you bundle it all up and use get
resource, you'll be able to find it that way,

00:18:50.150 --> 00:18:53.009
much in the same way as you would a string, so.

00:18:53.009 --> 00:18:58.890
Just wanted to call that out, cause that's actually
turned into an interesting little problem these days.

00:18:58.890 --> 00:19:03.330
And last thing is, this is a non-issue on Java 6.

00:19:03.329 --> 00:19:10.419
We gave feedback to Sun actually in the Java 4 or 5
timeframe that you know, this happens quite frequently.

00:19:10.420 --> 00:19:16.870
That you'll end up with a situation where the menu bar is
in one language, and the user's application is in another.

00:19:16.869 --> 00:19:22.069
And we told Sun you know, you know, this is a
problem, okay, because you don't have a way to look

00:19:22.069 --> 00:19:25.299
up other languages other than the
one that the user's currently on.

00:19:25.299 --> 00:19:34.589
So in Java 6 what we will do is report back that
the user's current language preference is to Java.

00:19:34.589 --> 00:19:38.939
And then Java will look it up you
know, like we want it to on a Mac.

00:19:38.940 --> 00:19:44.890
And so you know, that's a, that's the way that
we're trying to make Java better for everybody.

00:19:44.890 --> 00:19:51.370
But now after I said that, that's not working yet
in the developer preview that we released today.

00:19:51.369 --> 00:19:54.839
But we do know about it, and we'll
get, we'll keep working on it.

00:19:54.839 --> 00:19:57.980
But it's an assumption you can make
when you start working with Java 6.

00:19:57.980 --> 00:20:03.920
So okay, I put in that little on a Mac in brackets.

00:20:03.920 --> 00:20:09.550
And this sort of gets back to what Ben covered
yesterday, but I want to reinforce it here.

00:20:09.549 --> 00:20:11.680
You want to know which VM is running your code.

00:20:11.680 --> 00:20:15.789
There are times when you need to
know what platform you're on.

00:20:15.789 --> 00:20:20.079
And you know, I'll click through these.

00:20:20.079 --> 00:20:23.629
You know, these are sort of the tried and true ways.

00:20:23.630 --> 00:20:29.120
You ask what os.name is, you ask what Java.version
is, and then you can figure out oh okay,

00:20:29.119 --> 00:20:33.750
I know I'm on a Mac, I know I'm on Windows, or I know this
bug was fixed because I'm running this version of the JDK.

00:20:33.750 --> 00:20:37.000
On the Mac that's not enough.

00:20:37.000 --> 00:20:40.589
What you're also going to want to do is
look at java.runtime.version,

00:20:40.589 --> 00:20:45.439
and let's talk a little bit about why that is.

00:20:45.440 --> 00:20:52.690
Usually you know, you know, if you're a Windows
developer you're saying duh right now because, right,

00:20:52.690 --> 00:20:56.210
this is how you do it, we know how to do this.

00:20:56.210 --> 00:21:01.150
Well you can't assume on the Mac that java.version
is unique from release to release.

00:21:01.150 --> 00:21:03.710
There's a couple of reasons for this.

00:21:03.710 --> 00:21:05.930
We could have only just fixed bugs, you know.

00:21:05.930 --> 00:21:09.400
We had to do a rapid turnaround and fix a few bugs,

00:21:09.400 --> 00:21:16.420
and we did that before Sun could update
their JDK, so we just updated ours.

00:21:16.420 --> 00:21:19.810
So therefore java.version hasn't changed.

00:21:21.589 --> 00:21:27.179
We will always append the build information
at the end of java.runtime.version.

00:21:27.180 --> 00:21:33.039
And for any given version of Java, 1.4.2,
1.5.0, that number's always going to increase.

00:21:33.039 --> 00:21:39.259
So to sort of explain what I'm saying here, I did
a little example where we did Java -version

00:21:39.259 --> 00:21:43.140
on the command line, and this was taken from Tiger.

00:21:43.140 --> 00:21:51.840
But if you look at Java., the first part here,
we see, I'm pointing down here which you can't see.

00:21:51.839 --> 00:21:57.049
And up here we see the 1.5.0_07,
that's java.version.

00:21:57.049 --> 00:22:01.309
java.runtime.version is out there after build.

00:22:01.309 --> 00:22:09.200
And if you parse off that, the piece after the dash, that'll
give you the build number that goes along with the version.

00:22:09.200 --> 00:22:15.680
And with that you can make, draw some conclusions
about what was fixed, what was not fixed.

00:22:15.680 --> 00:22:24.120
This is true on Sun's JVM as well on
Windows, and Solaris and elsewhere.

00:22:24.119 --> 00:22:31.479
However, typically when they, whenever
they release they always bump

00:22:31.480 --> 00:22:34.130
up the bug fix version, the _07 part.

00:22:34.130 --> 00:22:36.220
So that's generally not a problem elsewhere.

00:22:36.220 --> 00:22:40.920
But on the Mac you're going to need to know how
to do this, because we've done it before,

00:22:40.920 --> 00:22:44.830
I can't guarantee we won't do it
again, we probably will do it again.

00:22:44.829 --> 00:22:47.960
So that's something to keep in mind.

00:22:47.960 --> 00:22:53.690
And finally, we strongly recommend that you
use reflection to find all of these classes

00:22:53.690 --> 00:22:55.960
that we've been talking about that are Mac only.

00:22:55.960 --> 00:23:03.069
We do this in the OS X adapter example, and that
actually does a really good job, and it's a really good job

00:23:03.069 --> 00:23:06.740
of using reflection in general, so
you might want to take a look at that.

00:23:06.740 --> 00:23:11.990
But that'll give you some idea of how you would
go about finding some of these classes at runtime,

00:23:11.990 --> 00:23:14.549
so you don't have to worry about
stubs or anything like that.

00:23:14.549 --> 00:23:23.779
Okay. Now let's talk a little about using runtime.exec.
Because this is actually something that comes up not

00:23:23.779 --> 00:23:29.339
so much any more, but it tends to happen more on a Mac
because, well you'll see why here in just a minute.

00:23:29.339 --> 00:23:33.970
First of all, runtime.exec does not use
any shell, doesn't use your current user shell,

00:23:33.970 --> 00:23:36.519
doesn't use a default shell, or anything like that.

00:23:36.519 --> 00:23:41.910
It will attempt to exec what you pass to it.

00:23:41.910 --> 00:23:48.190
The default case of runtime.exec, which takes
just a big command, is very naive in how it operates.

00:23:48.190 --> 00:23:52.809
It's just going to break it up according to
whatever space it, wherever it finds a space

00:23:52.809 --> 00:23:56.519
in the command, and will just try to execute it.

00:23:56.519 --> 00:24:01.940
So here's an example, and this happens
more on the Mac because I think users tend

00:24:01.940 --> 00:24:03.830
to put spaces in their file names more often.

00:24:03.829 --> 00:24:09.839
If we're going to open this file,
2005 annual report.rtf.

00:24:09.839 --> 00:24:15.179
So here's the first try, you know, we'll do,
we'll just try to open that line cause you know,

00:24:15.180 --> 00:24:21.440
open in terminal's how you go about
opening a file from the command line.

00:24:21.440 --> 00:24:27.259
Well you end up with a string array that looks like
this, you know, with all the pieces, parts divided up.

00:24:27.259 --> 00:24:31.079
So you think to yourself oh yeah right,
that's right, my file has spaces in it

00:24:31.079 --> 00:24:34.039
so I need to you know, put quotes around it.

00:24:34.039 --> 00:24:38.710
So you try it again and you try to
backslash and put quotes in there.

00:24:38.710 --> 00:24:40.850
And well gee, that's no better.

00:24:40.849 --> 00:24:46.569
Because that's what it looks like to runtime.exec,
it just looks like a file with quotes

00:24:46.569 --> 00:24:50.730
in the name, in the pieces, in the parts.

00:24:50.730 --> 00:24:57.680
The way to do this is the string array version
of runtime.exec, in fact I would go so far

00:24:57.680 --> 00:25:02.130
to say you should do this on all platforms,
but it works, it's more obvious on the Mac.

00:25:02.130 --> 00:25:07.880
But just make an array with all the arguments that you
want to pass called runtime.exec, there you go.

00:25:07.880 --> 00:25:09.480
That's going to work every time.

00:25:09.480 --> 00:25:11.690
All right.

00:25:11.690 --> 00:25:19.890
So that's sort of finishing up the sort of your
introduction to building applications on the Mac.

00:25:19.890 --> 00:25:23.790
The rest of today's talk is about getting
ready for the new features in Leopard,

00:25:23.789 --> 00:25:26.750
and using the Leopard preview that you got this week.

00:25:26.750 --> 00:25:28.890
And we're going to start off with
Mike Swingler,

00:25:28.890 --> 00:25:32.020
who's going to cover the new Swing features that we have.

00:25:32.019 --> 00:25:32.579
And, Mike?

00:25:32.579 --> 00:25:34.509
Why don't you take it from here for a while.

00:25:34.509 --> 00:25:41.500
( applause )

00:25:41.500 --> 00:25:42.549
>> Thanks Scott.

00:25:42.549 --> 00:25:47.460
Well today I'm here to tell you about
some of the new features and controls,

00:25:47.460 --> 00:25:52.279
and some exciting stuff that we've
added for Java on Leopard.

00:25:52.279 --> 00:26:01.210
Well first of all who we're talking to today, these are
for Swing developers, so you know, we clipped our CP guys

00:26:01.210 --> 00:26:05.220
or you know, service side folks, you
can take a little nap for a while.

00:26:05.220 --> 00:26:11.089
And we're specifically targeting the Swing
developers who want to go the extra mile on the Mac.

00:26:11.089 --> 00:26:18.069
But since you're choosing Java in the first place, we
know that you want to remain compatible and portable,

00:26:18.069 --> 00:26:24.939
and you know, that if on a Mac should be kind
of reduced to the bare minimum necessity.

00:26:24.940 --> 00:26:34.789
And so we're looking to help you out here, and
write once run anywhere should look really good too.

00:26:34.789 --> 00:26:38.690
So this is our agenda for my little segment here.

00:26:38.690 --> 00:26:45.350
And you know, we're going to talk about why we're using
client properties in Swing, we'll show you some kind of new

00:26:45.349 --> 00:26:49.019
and exciting small and mini controls
that have never been in Java before.

00:26:49.019 --> 00:26:57.400
We've got new JButton styles, a bunch of fun stuff you can
do to your window frames, talk a little bit about borders,

00:26:57.400 --> 00:27:01.060
and finally wrap up with resolution-independent images,

00:27:01.059 --> 00:27:08.059
as you might have heard in Guy
Fullerton's talk in The Presidio.

00:27:08.059 --> 00:27:11.339
So why are we using client properties?

00:27:11.339 --> 00:27:17.389
Client properties are this really cool thing
that Sun put on the root JComponent object,

00:27:17.390 --> 00:27:21.380
that allows you to assign just
kind of arbitrary key value pairs.

00:27:21.380 --> 00:27:27.340
You know, the key is a string, and you can put
whatever you want as the object on the other end.

00:27:27.339 --> 00:27:34.230
And well, by default they don't do anything,
they're basically like little hints.

00:27:34.230 --> 00:27:44.150
And they're inert on other platforms, and we thought this
would be a really great place to put some stuff for the Mac.

00:27:44.150 --> 00:27:48.430
So the first client property I'd like to
talk about is JComponent.sizeVariant.

00:27:48.430 --> 00:27:57.880
And so these are just the regular size controls that you
know and love and use today, and you know, they're nice.

00:27:57.880 --> 00:28:03.900
But today we're introducing small and
mini size variant controls as well.

00:28:03.900 --> 00:28:07.759
You know, small is good for when you're
wanting to group together a bunch of buttons,

00:28:07.759 --> 00:28:10.289
kind of in a, in sort of a logic grouping.

00:28:10.289 --> 00:28:14.200
If you got a lot of you know, fields
of checkboxes, you know,

00:28:14.200 --> 00:28:19.059
they're really good for just kind of visual containment.

00:28:19.059 --> 00:28:24.230
Mini controls really are only appropriate
in very, very limited circumstances.

00:28:24.230 --> 00:28:26.079
You don't want to put them on your main application windows,

00:28:26.079 --> 00:28:29.919
cause they're really small and
they're kind of hard to peck at.

00:28:29.920 --> 00:28:37.080
Mini controls are particularly good for palettes,
and we'll see a little bit more about that later.

00:28:37.079 --> 00:28:41.250
Other, let's see, buttonTypes, okay.

00:28:41.250 --> 00:28:48.599
So these are some kind of buttonTypes that we've had in Mac
OS X for a while, the default, the bevel, and the square.

00:28:48.599 --> 00:28:52.929
You've probably noticed if you shrink a button
down, it kind of turns into a square style,

00:28:52.930 --> 00:28:55.400
if you pull a button kind of big
it turns into a bevel style.

00:28:55.400 --> 00:28:57.830
And you really didn't have a lot of control over that.

00:28:57.829 --> 00:29:06.429
Well today if you put a bevel as the string
in the JButton.buttonType client property,

00:29:06.430 --> 00:29:11.410
you will always get a bevel button,
and it will stay like that.

00:29:11.410 --> 00:29:19.050
Some other additional styles that we're adding
today are the textured variant, the recessed style,

00:29:19.049 --> 00:29:28.799
like you see in a Safari bookmarks bar, the roundRect, which
is actually pretty, which is used for when you have a field

00:29:28.799 --> 00:29:32.039
of buttons inside some sort of
scrolling view, some sort of grid view.

00:29:32.039 --> 00:29:37.430
You'll notice this in iTunes, kind of the buy it now button.

00:29:37.430 --> 00:29:43.200
Gradient style buttons, which you normally notice at the
bottom of source lists, they have you know, a little plus,

00:29:43.200 --> 00:29:45.890
a little minus, and a little gear, stuff like that.

00:29:45.890 --> 00:29:48.640
And also help.

00:29:48.640 --> 00:29:57.160
Please don't set any text or imagery on this style though,
because it already has a question mark there for you.

00:29:57.160 --> 00:30:00.490
Some additional buttonTypes are segmented.

00:30:00.490 --> 00:30:08.759
And so if you've ever seen the view switcher in the
Finder, going between you know, icon list and column,

00:30:08.759 --> 00:30:13.579
and now cover flow view, you can
build those two in your Java apps.

00:30:13.579 --> 00:30:15.899
You actually build them out of separate JButtons.

00:30:15.900 --> 00:30:22.640
So you just assign the first end cap,
the last end cap, any middle ones.

00:30:22.640 --> 00:30:28.450
If your buttons are all on their
own there's the only style as well.

00:30:28.450 --> 00:30:34.880
And we also have round rect style, the textured,
which you know, should go on your textured windows

00:30:34.880 --> 00:30:38.350
when you're trying to simulate the unified toolbar look.

00:30:38.349 --> 00:30:45.709
And, I'm sorry, segmented capsule go on toolbars
when you're doing a unified toolbar look.

00:30:45.710 --> 00:30:49.069
Textured is for when you're down below lower in the window.

00:30:49.069 --> 00:30:55.609
And you know, just look to iTunes as an example of that.

00:30:55.609 --> 00:30:57.359
And they just squeeze and fit together.

00:30:57.359 --> 00:31:01.490
And when you put them inside of a box
layout or any other layout manager

00:31:01.490 --> 00:31:08.819
that will assume, that will abut them all together.

00:31:08.819 --> 00:31:11.579
Next I'd like to talk about JComboBoxes.

00:31:11.579 --> 00:31:15.750
And this is the JComboBox that we all know and love.

00:31:15.750 --> 00:31:20.630
It's, on the Mac we actually have a special
name for this, this is called a popup.

00:31:20.630 --> 00:31:28.140
And popups are kind of good when you just have an ordinary
sort of selection of choices, and you select a variety

00:31:28.140 --> 00:31:31.180
of items, you know, chicken, beef, or fish, you know.

00:31:31.180 --> 00:31:33.350
No real action associated with that.

00:31:33.349 --> 00:31:36.500
Well we also have another style called popdowns.

00:31:36.500 --> 00:31:42.819
And if, when you set the isPopdown style to
a Boolean true, you can actually have the style

00:31:42.819 --> 00:31:47.109
which simulates more of an action button sort of idea.

00:31:47.109 --> 00:31:54.349
Popdowns, the popup menu always shows down below
the menu, the popup, the little window that pops

00:31:54.349 --> 00:31:57.259
up with your choices will only show above the control.

00:31:57.259 --> 00:32:05.140
So popdowns are only, should only be used in cases where
you have actions that you're actually going to select,

00:32:05.140 --> 00:32:07.190
and something is in fact going to happen, you know.

00:32:07.190 --> 00:32:14.759
When you simply choose a normal choice in a popup
there's no action that's supposed to take place.

00:32:14.759 --> 00:32:24.509
And you'll have to install your own selection, not,
selection manager on that to get the right behavior

00:32:24.509 --> 00:32:28.269
so the title stays the same, even
when your selection changes.

00:32:28.269 --> 00:32:32.230
We also have the square style as
well, because they kind of look cool.

00:32:32.230 --> 00:32:38.670
And you might have seen them before in Mail, in the
compose window if you've got a variety of views,

00:32:38.670 --> 00:32:43.090
a variety of accounts that you want to
switch between when you send a message.

00:32:43.089 --> 00:32:50.449
So, and I don't think we have any guidance for
that except for use them when they look cool.

00:32:50.450 --> 00:32:54.850
Next the search field is another
control that we've enhanced.

00:32:54.849 --> 00:32:59.240
And there hasn't really been anything all
that terribly interesting about text fields.

00:32:59.240 --> 00:33:02.759
You know, you kind of stretch them and
they become big and they become small.

00:33:02.759 --> 00:33:07.279
But today we're going to give you search.

00:33:07.279 --> 00:33:08.049
The search field -

00:33:08.049 --> 00:33:08.549
( applause )

00:33:08.549 --> 00:33:12.389
Thank you.

00:33:12.390 --> 00:33:17.150
The search field, you'll get a
ton of behavior automatically.

00:33:17.150 --> 00:33:23.000
The little x will show up as you type in text
in the field, as you delete text, or you know,

00:33:23.000 --> 00:33:29.500
you drag and drop operations out
of it, it'll go away by itself.

00:33:29.500 --> 00:33:35.900
The icon with the magnifying glass, you get a
little triangle that shows that there's a popdown

00:33:35.900 --> 00:33:44.130
if you install a popup, a Jpopup menu as another
client property in addition to the search variant

00:33:44.130 --> 00:33:48.950
in the textfield.variant class, client property rather.

00:33:48.950 --> 00:33:56.420
The preferred way that you would use this would
be to attach a document listener to the document

00:33:56.420 --> 00:34:01.420
of the text field itself, because if you try and install
your own key listeners, and your own mouse listeners,

00:34:01.420 --> 00:34:06.830
and your drag event listeners, you're
bound to miss something in trying

00:34:06.829 --> 00:34:09.949
to you know, have complete control of it.

00:34:09.949 --> 00:34:14.169
Adding, actually just listening to the abstract
document is probably the most common way

00:34:14.170 --> 00:34:19.440
that you can get a nice good crisp feel of live search,
and then still be able to handle all the input methods,

00:34:19.440 --> 00:34:25.110
and mouse and drag operations that could
possibly happen on the search field.

00:34:25.110 --> 00:34:31.039
So now let's move on to windows.

00:34:31.039 --> 00:34:34.949
This is just a plain old document
window you'd bring up in Java.

00:34:34.949 --> 00:34:40.939
But something that we're adding that we're really
excited about is if you install a file object

00:34:40.940 --> 00:34:49.369
that actually backs the window that is in fact a
document window, you get a little icon up at the top.

00:34:49.369 --> 00:34:56.690
And if you click on that icon while holding down the
command key, you actually get a popup, which well,

00:34:56.690 --> 00:34:59.380
document modified also shows a dirty
bit on there.

00:34:59.380 --> 00:35:04.769
But you get a popup that shows where the
file really does live and exist on disk.

00:35:04.769 --> 00:35:11.199
And if you drag the icon, it'll actually drag it just
like you're dragging it from the top of text edit

00:35:11.199 --> 00:35:17.429
or Xcode, or any other good Cocoa application.

00:35:17.429 --> 00:35:23.469
And so another thing that you can
change on windows are the styles.

00:35:23.469 --> 00:35:25.899
So you have a palette style window here.

00:35:25.900 --> 00:35:28.360
Well the window style should actually reflect that.

00:35:28.360 --> 00:35:38.460
So if you just say that the window style is
small, you actually get palette style window.

00:35:38.460 --> 00:35:44.019
Other JFrame decorations you can use,
you can use the brush metal look and feel.

00:35:44.019 --> 00:35:49.059
This looks particularly well, gives you that nice kind of
unified appearance between your title bar and your toolbar,

00:35:49.059 --> 00:35:52.500
especially when your content area
takes up the full width of your window.

00:35:52.500 --> 00:35:59.230
The draggable window background is kind of a
property set sort of to match the expectation

00:35:59.230 --> 00:36:02.039
that when you grab the background
of the window it really does move.

00:36:02.039 --> 00:36:03.219
Might want to experiment with that.

00:36:03.219 --> 00:36:08.089
And you can also change the opacity of the
window, it's sort of fun to play around with,

00:36:08.090 --> 00:36:14.740
but I haven't really found many particularly interesting
examples except maybe in kind of full screen applications.

00:36:14.739 --> 00:36:17.239
Oh, and very important.

00:36:17.239 --> 00:36:20.919
JFrames themselves are not JComponents.

00:36:20.920 --> 00:36:26.519
However, if you get their root panes you do get the
Jcomponent, which then you can set the client property on.

00:36:26.519 --> 00:36:33.030
Kind of a little where did it go sort of problem.

00:36:33.030 --> 00:36:38.480
So another feature that we've added, not necessarily
client property, but something that we've installed

00:36:38.480 --> 00:36:44.550
in the Aqua look and feel UI manager
for you are the title border,

00:36:44.550 --> 00:36:48.170
title borders that actually match the Mac OS X style.

00:36:48.170 --> 00:36:52.980
By default, when you create a new border using
just new title border, or using the border factory,

00:36:52.980 --> 00:36:57.389
you're going to get something that just
has this sort of etched line around it.

00:36:57.389 --> 00:37:02.449
And it's not great, and I wish
I could change it, but we can't.

00:37:02.449 --> 00:37:07.719
Because in order to use the Mac OS X
style that has kind of a deep inset sort

00:37:07.719 --> 00:37:12.319
of recessed turns the background a lot darker,
you have to really change the assumption

00:37:12.320 --> 00:37:14.110
of the opacity of several of your components.

00:37:14.110 --> 00:37:17.710
You have to set opaque false on a number
of components that go inside that.

00:37:17.710 --> 00:37:22.789
And if we did that automatically for you by
default, performance would drop in a hole,

00:37:22.789 --> 00:37:31.179
and for some very kind of common cases, and you'd
file bugs and yell at me, and that would be bad.

00:37:31.179 --> 00:37:31.539
( laughter )

00:37:31.539 --> 00:37:36.400
So we're still going to keep performance up,
but we'd like you to use this border style.

00:37:36.400 --> 00:37:43.070
This is something that you see already on JTabbed
panes, to no cause of trouble of its own.

00:37:43.070 --> 00:37:50.640
And the, if you just snarf the Aqua variant of the
title border, and use that for your own title borders,

00:37:50.639 --> 00:37:52.489
you can provide that as a parameter yourself.

00:37:52.489 --> 00:37:58.679
Or even better, if you just put it as the
official title border border in the UI manager,

00:37:58.679 --> 00:38:04.839
just replaces them everywhere in your application.

00:38:04.840 --> 00:38:05.390
Works really great.

00:38:05.389 --> 00:38:10.210
And finally, switching gears again,
resolution-independent images are something

00:38:10.210 --> 00:38:14.220
that we will allow you to access in Java.

00:38:14.219 --> 00:38:19.230
By default Java has absolutely no concept
of what resolution independence is.

00:38:19.230 --> 00:38:23.179
Fundamentally everything is points, and
points is pixels, and pixels is points.

00:38:23.179 --> 00:38:28.690
And there's no way you can really know the better,
cause we can't change the API to expose this to you.

00:38:28.690 --> 00:38:38.610
So for now, the best thing that we can do is just say
that everything in Java coordinates is relative in points,

00:38:38.610 --> 00:38:43.190
and there's no real need for you to
know kind of the underlying details,

00:38:43.190 --> 00:38:45.789
except in this one little case of images.

00:38:45.789 --> 00:38:53.019
So we're doing something here today, so if your application
is bundled in you know, Mac OS X bundle format,

00:38:53.019 --> 00:38:57.519
and you have a resources directory, you can
toss your images in there, particularly PDF

00:38:57.519 --> 00:39:03.849
and ICNS are interesting types,
multi res tiffs also work as well.

00:39:03.849 --> 00:39:08.069
And you throw them into your application, but
you can ask for them by name in the same way

00:39:08.070 --> 00:39:11.850
that you could ask the NSImage API for a named image.

00:39:11.849 --> 00:39:19.619
This will also fetch out system images that we have
artwork for on the system, like the network icon logo,

00:39:19.619 --> 00:39:27.250
and the variety of things that Guy talked about
in the icons.h file that's on the system.

00:39:27.250 --> 00:39:31.969
And this will load just about anything NSImage
will load from the image named API.

00:39:31.969 --> 00:39:38.029
You just prepend this NSImage:// on
the beginning of whatever the name of the image is.

00:39:38.030 --> 00:39:45.010
Normally this API is used to fetch files, but we kind of
figured that since no files are likely to have that prefix

00:39:45.010 --> 00:39:51.120
in them because of the well, double slashes,
we thought this was a pretty good kind

00:39:51.119 --> 00:39:54.829
of way to kind of bend the rules a little bit.

00:39:54.829 --> 00:39:59.170
And so what's the catch of all these things?

00:39:59.170 --> 00:40:05.250
Well let's see, client properties,
they kind of work everywhere.

00:40:05.250 --> 00:40:11.030
They don't, they work in bundled applications,
any sort of WebStart or applet context,

00:40:11.030 --> 00:40:13.380
everything, nothing is, it's all fair game.

00:40:13.380 --> 00:40:23.530
They work on all the, they don't do anything
on any other platforms, they are simply no ops.

00:40:23.530 --> 00:40:29.120
So the very specific catches we have is that NSImage
will only work with a bundled application,

00:40:29.119 --> 00:40:32.130
cause you can't fetch anything
out of a bundle if you're not,

00:40:32.130 --> 00:40:35.890
if you're just a double clickable jar, you've got no bundle.

00:40:35.889 --> 00:40:40.230
You might be able to fetch stuff from the system, maybe.

00:40:40.230 --> 00:40:44.740
And unprivileged applets in WebStart
should not be putting files,

00:40:44.739 --> 00:40:50.589
trying to claim that they're windows actually
are represented or backed by some sort of file

00:40:50.590 --> 00:40:54.690
on the file system, because that would be a lie.

00:40:55.829 --> 00:40:58.849
And so where you find all these magic goodie strings?

00:40:58.849 --> 00:41:01.869
Well we put them in the release notes for DP6.

00:41:01.869 --> 00:41:08.619
The, however Java 5, all of these client properties will
work on Java 5, they're documented in the release notes,

00:41:08.619 --> 00:41:14.980
with the only exception of the sheets client property,
which is not something that was on the Leopard CD.

00:41:14.980 --> 00:41:18.380
That's why we didn't make a big hubbub about it today.

00:41:18.380 --> 00:41:26.740
So in summary you know, we talked about how we're
using client properties, saw some of the nice controls

00:41:26.739 --> 00:41:29.589
that we're adding with the small and mini variants.

00:41:29.590 --> 00:41:35.590
The release notes will tell you precisely
which controls all have the mini variants.

00:41:35.590 --> 00:41:39.340
The new button styles, including all
the segmented controls, also have small

00:41:39.340 --> 00:41:43.970
and mini variants as well for almost all of them.

00:41:43.969 --> 00:41:51.379
Ones that don't should look exactly the same as
the small variant, JFrame, the JFrame styles,

00:41:51.380 --> 00:41:55.720
and kind of when it's appropriate to use them on palettes,

00:41:55.719 --> 00:41:59.379
and we covered some borders and
resolution-independent images.

00:41:59.380 --> 00:42:02.510
So I'm going to turn it back to Scott for toolkit integration.

00:42:02.510 --> 00:42:11.250
( applause )

00:42:11.250 --> 00:42:16.900
>> Okay. So, toolkit integration, what does that mean?

00:42:18.159 --> 00:42:26.129
Well, after a while we sort of think that there
are other ways that you're going to want to use Java.

00:42:26.130 --> 00:42:31.690
Now we are sort of hoping that after you've been to WWDC
this year, you know, you're going to take a look at some

00:42:31.690 --> 00:42:38.940
of the technologies we presented and think wow, some
of that's, stuff is really cool, how can I use that?

00:42:38.940 --> 00:42:44.849
But you know, we'll get to that in just a minute.

00:42:44.849 --> 00:42:49.099
So basically what we're going to talk about is
how you go about using Java in other toolkits.

00:42:49.099 --> 00:42:56.119
This comes up on a regular basis, and we've had
some good stories, some not so great stories.

00:42:56.119 --> 00:43:02.409
But with Leopard we really got, we've really got
answers for just about anybody who wants to do this.

00:43:02.409 --> 00:43:04.529
So there are three main toolkits we have in mind here.

00:43:04.530 --> 00:43:09.550
First there's Cocoa, you have the SWT,
which is the user interface toolkit

00:43:09.550 --> 00:43:13.450
from the Eclipse project, and finally Carbon.

00:43:13.449 --> 00:43:19.799
So what's the answer on Cocoa?

00:43:19.800 --> 00:43:21.789
Use JNI, all right?

00:43:21.789 --> 00:43:25.750
We said it yesterday, I'll say it
again today, don't use Cocoa Java.

00:43:25.750 --> 00:43:32.480
It's deprecated, and as you're going to
see in a moment, it's partially gone.

00:43:32.480 --> 00:43:35.659
Tech note 2147, right?

00:43:35.659 --> 00:43:40.449
If you're using JNI, please read
and understand this document.

00:43:40.449 --> 00:43:45.059
It's got a lot of great examples
about what to do on the right thread.

00:43:45.059 --> 00:43:55.389
And I can sum it up basically as don't call Java from the
AppKit thread, don't call AppKit, don't make AppKit calls

00:43:55.389 --> 00:43:58.920
from a Java event thread, Java event handler.

00:43:58.920 --> 00:44:01.340
That's the, in a nutshell, that's what's going on.

00:44:01.340 --> 00:44:05.100
But tech note 2147
will give y!Gou a lot more information.

00:44:06.210 --> 00:44:11.929
Watch your threads, that's another way of saying it.

00:44:11.929 --> 00:44:15.369
Cocoa Java does not exist in a 64-bit runtime.d

00:44:15.369 --> 00:44:18.639
It is not available in Java 1.5 on Leopard.

00:44:18.639 --> 00:44:24.150
I'm sorry, it's, well it, actually it
doesn't pay attention to the version so,

00:44:24.150 --> 00:44:26.970
but it's not available in the 64-bit runtime adt all.

00:44:26.969 --> 00:44:32.949
So in particular I'm talking about the
implementations you see in these two files,

00:44:32.949 --> 00:44:36.439
NSJavaVirtualMachine and NSJavaConfiguration.

00:44:36.440 --> 00:44:45.559
So, let's say you know, you've been
watching these sessions this week,

00:44:45.559 --> 00:44:49.799
and you think core animation rocks, core data rocks, okay?

00:44:49.800 --> 00:44:52.150
I'd love to use that in an application.

00:44:52.150 --> 00:45:02.389
But you know, I've got a lot of non-UI code,
you know, I've got my existing Java code.

00:45:02.389 --> 00:45:09.269
It's not a big deal to call that code from a Cocoa
application with JNI, that's really not that bad.

00:45:09.269 --> 00:45:10.469
UI code is a lot harder.

00:45:10.469 --> 00:45:15.719
I mean tech note 2147,
that'll get you most of the way there.

00:45:15.719 --> 00:45:19.480
But the main focus there is creating new windows.

00:45:19.480 --> 00:45:21.869
And admittedly, that's not hard either.

00:45:21.869 --> 00:45:26.670
Once you get a new window open, there's
not much that you have to worry about.

00:45:26.670 --> 00:45:28.730
So what about your old UI code?

00:45:28.730 --> 00:45:34.429
Say you bought some Swing library, some Swing package,
or you've written a really cool control that you need,

00:45:34.429 --> 00:45:38.269
or you know, you've got some code
that you just can't give up.

00:45:38.269 --> 00:45:41.449
Well we've got an answer for you in Leopard.

00:45:41.449 --> 00:45:43.859
It's called the JavaFrameEmbedding.framework.

00:45:43.860 --> 00:45:46.190
And what is that?

00:45:46.190 --> 00:45:51.559
Well it does a couple of things for you.

00:45:51.559 --> 00:45:56.309
The JavaFrameEmbedding takes care of starting
up the Java VM for you in the right way.

00:45:56.309 --> 00:46:04.150
So by that I mean we start it on another thread, you know,
we do all the right things so that it will come up correctly

00:46:04.150 --> 00:46:06.670
and the AWT will work in your application.

00:46:07.750 --> 00:46:14.960
We're going to hand you a java.awt.Frame, and
basically what you're going to end up with is an NSView

00:46:14.960 --> 00:46:21.250
in your window that will represent a Java frame.

00:46:21.250 --> 00:46:24.409
We've got a delegate and notification callback mechanism.

00:46:24.409 --> 00:46:29.639
I'm going to show you how you go about using those, but
basically the purpose of that is to provide you a safe way

00:46:29.639 --> 00:46:40.210
to manipulate the frame, and a safe way to set up your
Cocoa user interface to use, to work with the Java.

00:46:40.210 --> 00:46:43.940
We're going to make sure, and the reason
for that is we're going to make sure

00:46:43.940 --> 00:46:47.110
that all the operations happen on the right thread.

00:46:47.110 --> 00:46:52.710
This works with Interface Builder, and I'm going to show you a
little example that shows you how you can drag out a view,

00:46:52.710 --> 00:47:00.260
and set it up to use, to say this chunk of the window
is for Java, and we can set it up in Interface Builder.

00:47:00.260 --> 00:47:06.130
And to show you that, let's go over to the demo machine,
and I'll show you my little sample application I've written.

00:47:06.130 --> 00:47:11.320
Now if you've downloaded this from the server,
we're out of sync with what I've got here today.

00:47:11.320 --> 00:47:19.260
We're going to take care of that as soon as we can,
but the code that you have is actually correct.

00:47:19.260 --> 00:47:25.520
So if you build it and it doesn't run, or it doesn't
build, don't worry about that, the code is right.

00:47:25.519 --> 00:47:27.759
So let's look here.

00:47:27.760 --> 00:47:36.200
And the first thing I'm going to do is I've got
the, what I call the interesting source files.

00:47:36.199 --> 00:47:40.599
I mean we've got a, everything over here on
the left, but I'm going to hide that for you.

00:47:40.599 --> 00:47:46.170
Actually very briefly, all you have to do is add this
framework to your project, that's all you're going to need

00:47:46.170 --> 00:47:48.079
to do, and it's got all the headers in there.

00:47:48.079 --> 00:47:52.569
You know, take a look at those when you get a chance.

00:47:52.570 --> 00:47:55.769
But I've got the interesting files in my popup here.

00:47:55.769 --> 00:48:04.030
And along the way I'm also going to give a little bit of
information about using JNI as well in your application.

00:48:04.030 --> 00:48:07.220
Because we've got different versions at any given time,

00:48:07.219 --> 00:48:14.009
there's no way for you to control via JNI
which version of Java's going to load.

00:48:14.010 --> 00:48:18.390
You know, by default it's going to use
the default JVM, which is 1.5.

00:48:18.389 --> 00:48:25.719
But if you wanted to use 1.4 or 1.6,
there's no way you can really control that.

00:48:25.719 --> 00:48:31.349
So if you set this environment variable, Java
JVM version to the version that you want,

00:48:31.349 --> 00:48:33.940
the first JNI operation will use that Java VM.

00:48:33.940 --> 00:48:37.929
And this is how you go about selecting it.

00:48:37.929 --> 00:48:43.899
And the reason it's here in the main is that I
want to do this before NSApplication starts up,

00:48:43.900 --> 00:48:49.510
because as we're going to see in a minute, my
Java frame view is going to start up Java for me.

00:48:51.329 --> 00:48:53.769
All right.

00:48:53.769 --> 00:48:55.289
So let's see here.

00:48:55.289 --> 00:49:05.949
Let's go over here to Interface Builder, and
going to take a look at the nib for this application.

00:49:05.949 --> 00:49:07.869
So as you can see, I've created an instance

00:49:07.869 --> 00:49:15.949
of this application delegate class,
and let's open up our window here.

00:49:15.949 --> 00:49:22.929
And we see that inside here I've got a custom
view, and it's class is Java frame view,

00:49:22.929 --> 00:49:28.119
which goes with the Java frame view
in the framework that we've added.

00:49:28.119 --> 00:49:34.900
And if we control click on it, we see that
we've already set up the delegate relationship.

00:49:34.900 --> 00:49:36.579
I've already done that here in Interface Builder.

00:49:36.579 --> 00:49:45.500
And when I mouse over it, the matching
one highlights over here in the window

00:49:45.500 --> 00:49:49.550
for the nib, so you can see how that's set up.

00:49:49.550 --> 00:49:50.800
And we've got a few other buttons.

00:49:50.800 --> 00:49:56.550
They're currently disabled right now, and the reason
that is is that when this application comes up,

00:49:56.550 --> 00:49:58.930
you won't be able to interact with that window.

00:49:58.929 --> 00:50:01.739
And I'm going to show you how we'll, when to turn those on.

00:50:01.739 --> 00:50:05.919
And we got a little table view here, and we
got some sample data that I'm going to show you.

00:50:05.920 --> 00:50:10.659
And so that's sort of the nib right now, for right now.

00:50:10.659 --> 00:50:15.940
So you're going to create a custom NSView,
and give it a class of Java frame view.

00:50:15.940 --> 00:50:16.840
Let's close up that.

00:50:16.840 --> 00:50:21.890
And now let's go back over here.

00:50:21.889 --> 00:50:25.639
Okay, let's go look at that delegate class.

00:50:25.639 --> 00:50:30.719
And thanks to the power of code folding,
I am going to limit our discussion here

00:50:30.719 --> 00:50:34.480
to what you actually need to care
about for this application.

00:50:34.480 --> 00:50:42.349
So in the wake from nib, what I've done here
is I've built up as an NSString my class path.

00:50:42.349 --> 00:50:49.509
This project is going to use a jar that we're building, and
I'm going to use the SwingX project and its support class.

00:50:49.510 --> 00:50:54.670
And then I've added all that to a java.class.path argument.

00:50:54.670 --> 00:51:00.750
And then I use Java frame to use set Java startup
options to pass those arguments into the VM.

00:51:00.750 --> 00:51:06.250
So this is how you go about setting a
custom class path with this package.

00:51:06.250 --> 00:51:14.159
And the other thing I have to do, remember I said
we have a delegate and a notification mechanism.

00:51:14.159 --> 00:51:17.429
Well we already set up the delegate,
as I showed you Interface Builder.

00:51:17.429 --> 00:51:25.460
But the next thing I have to do is register as a listener
with NS notification center for this message right here,

00:51:25.460 --> 00:51:30.949
JavaFrameDid, JavaFrameViewDidCreateJavaFrame.

00:51:30.949 --> 00:51:35.589
So the first thing I want to do is I want to go up
here and, first I'm going to show you the delegate method,

00:51:35.590 --> 00:51:37.210
because that's the first thing that gets called.

00:51:37.210 --> 00:51:46.059
Now in this method you're going to be passed
a, the Java frame that you can manipulate,

00:51:46.059 --> 00:51:49.119
and you're going to get a JNI environment to work with as well.

00:51:49.119 --> 00:51:52.000
Don't cache this JNI environment.

00:51:52.000 --> 00:51:56.619
You don't know what thread it came from, and
when you don't know what thread it came from,

00:51:56.619 --> 00:52:01.099
you don't know if it's ever going to be valid again.

00:52:01.099 --> 00:52:09.860
So in this case, what I do is I find the classes
that I need that's going to go into that Java frame,

00:52:09.860 --> 00:52:19.420
I call my setup method, which in this case is just a
static method that manipulates the contents of the frame,

00:52:19.420 --> 00:52:27.680
and I check for JNI exceptions and make sure that we're
okay before we hand over control back to the framework.

00:52:27.679 --> 00:52:34.789
Do not do anything related to AppKit in this
method, because you're not on the AppKit thread.

00:52:34.789 --> 00:52:38.929
Okay. Now once that's all set up, then
you're going to get the notification.

00:52:38.929 --> 00:52:41.399
That's going to come on the AppKit thread.

00:52:41.400 --> 00:52:46.829
And in this case, we're going to turn on all
those buttons, and we're going to enable them.

00:52:46.829 --> 00:52:52.489
And then we're going to say that the
Java frame is now ready to go.

00:52:52.489 --> 00:53:00.689
So at this point I'm going to run the
application so you can see what's going on.

00:53:00.690 --> 00:53:02.760
And, all right.

00:53:02.760 --> 00:53:07.640
So here we have, all right.

00:53:07.639 --> 00:53:13.109
So what I've done here is I've grabbed a
little bit of geocaching data, I, well,

00:53:13.110 --> 00:53:18.579
I hope to do some more in the future,
but this is from geocaching.com.

00:53:18.579 --> 00:53:27.259
And you are looking at Greenwich in London, as
you can tell by the almost zero longitudes there.

00:53:27.260 --> 00:53:35.770
And what I have here is the JX map viewer from the
SwingX project, which is a great open source project

00:53:35.769 --> 00:53:39.420
that Josh Marinacci introduced last year at JavaOne.

00:53:39.420 --> 00:53:44.340
And I'm using it here to embed
their map viewer inside my window.

00:53:44.340 --> 00:53:49.579
And this data's coming from open street map,
which is the other reason it's from London,

00:53:49.579 --> 00:53:52.319
it's because there's a lot of good data there.

00:53:52.320 --> 00:54:01.519
But anyway, if I click on something in my
table view, I jump to that location in the map.

00:54:01.519 --> 00:54:06.340
And of course I can drag this around,
because it's you know, it's a map viewer.

00:54:06.340 --> 00:54:15.660
And I can change the zoom level, you know, with
that slider, come back out like this, go back in.

00:54:15.659 --> 00:54:20.049
And with these check boxes I can
also hide and show these controls.

00:54:20.050 --> 00:54:24.230
And sometimes we'll crash, so.

00:54:24.230 --> 00:54:26.909
All right.

00:54:26.909 --> 00:54:30.929
But, be that as it may.

00:54:30.929 --> 00:54:37.319
So the next thing I want to show you is what
happens when, what are you supposed to do

00:54:37.320 --> 00:54:41.690
when the user clicks on one of those AppKit elements?

00:54:41.690 --> 00:54:48.730
So let's specifically talk about
the table selection changing.

00:54:48.730 --> 00:54:54.289
So here what we do is we make sure that
it's okay to talk to the Java view.

00:54:54.289 --> 00:54:58.070
Then again we use JNI to find this
method, set new center point.

00:54:58.070 --> 00:55:03.650
And we get the selected longitude, latitude and longitude,
and then we call this method, setNewCenterPoint.

00:55:03.650 --> 00:55:05.210
All right?

00:55:05.210 --> 00:55:09.539
So now let's go see what setNewCenterPoint is doing.

00:55:09.539 --> 00:55:14.159
Well right there we create a new geo
position, and we move the map to that location.

00:55:14.159 --> 00:55:19.399
But very importantly, I wrap this up
in a SwingUtilities.invokeLater.

00:55:19.400 --> 00:55:23.820
That's because I know this method
was called from the AppKit thread.

00:55:23.820 --> 00:55:31.330
So if you're doing something in response to the user
interface in AppKit, you always want to wrap it

00:55:31.329 --> 00:55:36.489
in an invokeLater, or a SwingUtilities.invokeLater
that will guarantee

00:55:36.489 --> 00:55:41.559
that the AWT operations happen on the AWT event thread.

00:55:41.559 --> 00:55:44.400
So that's sort of a quick overview.

00:55:44.400 --> 00:55:46.180
I hope you're going to take advantage of this.

00:55:46.179 --> 00:55:48.739
And please give us any feedback.

00:55:48.739 --> 00:55:53.709
So with that, let's go back to slides and finish up.

00:55:53.710 --> 00:56:09.610
Okay. All right, let's move on to
talk about the SWT a little bit.

00:56:09.610 --> 00:56:13.470
The SWT, for those of you who don't
know, it comes from the Eclipse project.

00:56:13.469 --> 00:56:16.449
And as I mentioned, it's their user interface toolkit.

00:56:16.449 --> 00:56:24.460
It's the thin interface over all UI
toolkits, and on the Mac that's Carbon.

00:56:24.460 --> 00:56:28.349
We first released support for embedding,
this has allowed you

00:56:28.349 --> 00:56:34.750
to embed a AWT frame inside an SWT
frame, we did that last year at JavaOne.

00:56:34.750 --> 00:56:40.420
We fixed that up a little bit more in Java
5 update four for Tiger earlier this year.

00:56:40.420 --> 00:56:45.079
Now we think we've got pretty good
integration between the two

00:56:45.079 --> 00:56:49.940
You know, it's, we're pretty comfortable with how it works.

00:56:49.940 --> 00:56:56.840
So we're going to continue to support the SWT, we
really believe that Eclipse is an important part

00:56:56.840 --> 00:57:01.250
of Java development on the Mac, and we
really like the things that they're doing.

00:57:01.250 --> 00:57:09.210
You know, we work very closely with the SWT team in
particular, but you know, the whole Eclipse community,

00:57:09.210 --> 00:57:12.679
we're more than happy to have them on the Mac.

00:57:12.679 --> 00:57:19.879
We've, in Leopard we've made a number of bug
fixes to the embedding support, specifically on,

00:57:19.880 --> 00:57:22.619
there have been a number of bugs related to focus.

00:57:22.619 --> 00:57:30.909
We fixed a long standing problem with shutting down
an application that uses the SWT and the AWT together.

00:57:30.909 --> 00:57:38.559
And just in general, the overall stability is much better
than it's been, than what we have on Tiger right now.

00:57:38.559 --> 00:57:43.449
New in Leopard, we've added the
ability to deploy via WebStart.

00:57:43.449 --> 00:57:50.689
This is like a two year old feature, and we actually had
a few little breakthroughs in the past couple of months,

00:57:50.690 --> 00:57:56.150
and we're now able to announce that we can,
you can deploy via WebStart on Leopard.

00:57:58.989 --> 00:58:04.699
So, if you're going to use the SWT in your
application, how do you go about doing it?

00:58:04.699 --> 00:58:10.549
Well, there are a few things that are
different between the SWT and the AWT.

00:58:10.550 --> 00:58:15.300
The SWT wants to control the entire application,
wants to be like a Carbon application.

00:58:15.300 --> 00:58:23.620
And because of that, it wants to start the Java VM on
the first thread so that the SWT will run properly.

00:58:23.619 --> 00:58:27.179
Well, you can do that in just about
any technology we've got.

00:58:27.179 --> 00:58:33.129
So if you're on a command line, which is what Eclipse
is going to do, do Java -XstartOnFirstThread.

00:58:33.130 --> 00:58:41.590
In a WebStart application you need to pass that in Java
VM args, that same -XstartOnFirstThread.

00:58:41.590 --> 00:58:46.320
We'll figure out the right things to do
and start up the application appropriately.

00:58:46.320 --> 00:58:51.120
And if you're bundling an application, we
support that as well, and the Java dictionary.

00:58:51.119 --> 00:58:53.329
You just want to set the property StartOnMainThread.

00:58:53.329 --> 00:58:57.670
And this is not a property in the Java property sense,

00:58:57.670 --> 00:59:00.440
but it's just a key that you're
going to put in the Java dictionary.

00:59:00.440 --> 00:59:04.320
So StartOnMainThread and evaluate with true.

00:59:04.320 --> 00:59:10.370
So that's pretty much it for what
we've done with SWT and Leopard.

00:59:10.369 --> 00:59:15.139
You know, it, because the SWT is based
on Carbon, when you do find problems,

00:59:15.139 --> 00:59:18.829
please file a bug with us so we
can get it to the Carbon team.

00:59:18.829 --> 00:59:22.900
And if you find a problem, you know, file it in both places.

00:59:22.900 --> 00:59:27.570
The Eclipse has their own Bugzilla, so I'm sure
the SWT wants, team wants to know about it,

00:59:27.570 --> 00:59:29.920
but we need to know about it too,
cause at this point it's likely

00:59:29.920 --> 00:59:33.269
that it's a problem that we may have caused in this beta.

00:59:33.269 --> 00:59:37.969
And last of all is Carbon.

00:59:37.969 --> 00:59:47.109
For Carbon developers, they haven't felt a lot
of love when it comes to Java over the years.

00:59:47.110 --> 00:59:53.200
You know, the SWT is based on Carbon, and
we've been able to glean a lot of knowledge

00:59:53.199 --> 00:59:56.980
from that work that we've done over the years.

00:59:56.980 --> 01:00:01.179
And if you're a Carbon developer and you wanted to use Java,

01:00:01.179 --> 01:00:04.609
we basically said sorry, you're
out of luck, you can't do it.

01:00:04.610 --> 01:00:09.000
Well now we've been able to take that, advantage
of that work, and put that to your benefit.

01:00:09.000 --> 01:00:12.789
And now Carbon apps can now use the AWT.

01:00:12.789 --> 01:00:15.150
I don't know if this is something you need to do.

01:00:15.150 --> 01:00:22.480
You know, Carbon is only available in 32-bit
now in Leopard, but we've now got the ability

01:00:22.480 --> 01:00:26.630
for a Carbon application to start
up the AWT and have it just work.

01:00:26.630 --> 01:00:29.840
And again, follow tech note 2147.
G

01:00:29.840 --> 01:00:35.410
Same rules apply there for Carbon applications as it
does on Leopard, as it does with Cocoa applications.

01:00:35.409 --> 01:00:40.809
And that's really all I need to
say about Carbon for this year.

01:00:40.809 --> 01:00:46.070
So in summary, let's finish up, and
talk about what we covered again today.

01:00:46.070 --> 01:00:51.840
We want you to make a great OS X application,
not just a Java app that comes over to the Mac.

01:00:51.840 --> 01:00:55.250
And we hope we've given you, between
yesterday's session and the first part

01:00:55.250 --> 01:00:58.510
of today's session we've given you all the tools
and all the information you need to do that.

01:00:58.510 --> 01:01:03.710
You want to think cross-platform when
you're adding this kind of functionality.

01:01:03.710 --> 01:01:09.119
So we've sort of given you some guidelines about how to do
that, and we want you to think about reflection, and take,

01:01:09.119 --> 01:01:14.349
and read up on that for the right,
the best way to do that on the Mac.

01:01:14.349 --> 01:01:16.549
Use the appropriate Swing controls now.

01:01:16.550 --> 01:01:22.769
We've given you a lot of great new features you
can use to use the right control at the right time,

01:01:22.769 --> 01:01:26.920
and you want to take a look at the
release notes to find out when to do that.

01:01:26.920 --> 01:01:33.539
And finally, there's the right way and a wrong
way to integrate Java with your native code.

01:01:33.539 --> 01:01:38.429
And if you read tech note 2147
you'll learn the right way.

01:01:38.429 --> 01:01:43.369
And we've given you a lot of new options this
year in Leopard, and we hope you'll be able

01:01:43.369 --> 01:01:45.679
to take advantage of some of those in your application.

01:01:45.679 --> 01:01:52.579
So for more information talk to Matt, or
I don't think, we didn't put it on here,

01:01:52.579 --> 01:01:55.769
but Java Dev is also a good place
for these kinds of discussions.

01:01:55.769 --> 01:01:59.309
There's a lot of great people that know
how to answer these kinds of questions

01:01:59.309 --> 01:02:02.829
when the Java team can't get there to do it first.

01:02:02.829 --> 01:02:09.719
And please be sure to check out the sample code, we'll make
sure that this example is ready to go when you need it.