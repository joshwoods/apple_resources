WEBVTT

00:00:16.039 --> 00:00:18.750
>> Tom: This is Discover Java on Mac OS X Leopard

00:00:18.750 --> 00:00:23.120
and I am Tom O'Brian the manager of
the Java engineering team at Apple.

00:00:24.449 --> 00:00:29.460
We're going to talk today about why Mac OS X
is such a great Java platform for developing

00:00:29.460 --> 00:00:35.020
and delivering your applications, this is true whether
you're an experienced Java developer on other platforms

00:00:35.020 --> 00:00:40.760
and are coming to Mac OS X. For those of you who are already
developers and have already been on a platform developing

00:00:40.759 --> 00:00:46.539
in Java for sometime, but its especially true for
your customers, the people you ship your software to.

00:00:46.539 --> 00:00:52.079
Because we think the way we deliver Java on Mac
OS X makes it a great consistence experience

00:00:52.079 --> 00:00:55.670
for your customers running your
applications in the best way possible.

00:00:55.670 --> 00:01:00.020
We're going to have five sections in the talk today.

00:01:00.020 --> 00:01:04.700
First we'll do a brief overview of Java on
Mac OS X and a little bit of the philosophy

00:01:04.700 --> 00:01:08.500
of the way we deliver Java to make it the best experience.

00:01:09.620 --> 00:01:14.260
We're going to look at some Java developers who
are delivering applications on Mac OS X today

00:01:14.260 --> 00:01:19.730
and focus especially on a couple of them who are doing
extra polish to make their applications really stand

00:01:19.730 --> 00:01:27.469
out on Mac OS X. We'll give you pointers to two sessions
later this week to help make your applications great

00:01:27.469 --> 00:01:31.890
so that you can take advantage of new features
that we're bringing to Java and Leopard

00:01:31.890 --> 00:01:37.569
and really make your applications
something your customers really want to see.

00:01:37.569 --> 00:01:43.199
We'll spend a while covering highlights of new
features that we've added to Java in Leopard

00:01:43.200 --> 00:01:51.290
and we have a couple things coming up, but lets get started.

00:01:51.290 --> 00:01:59.040
Java on Mac OS X is delivered in a particular way
that's unique in all the platforms that have Java.

00:01:59.040 --> 00:02:05.450
Java is a core feature of the OS on Mac OS X and its
available in all this standard deployment application,

00:02:05.450 --> 00:02:12.890
options, applications, applets in the browser, web start
applications and server command line apps, as you'd expect,

00:02:12.889 --> 00:02:19.159
but its preinstalled as part of the OS and that makes a
difference to the way you can deliver your applications

00:02:19.159 --> 00:02:22.689
and what your customers experience
when using your applications.

00:02:22.689 --> 00:02:25.849
What does it mean that its part of the
OS, well it's integrated into the OS,

00:02:25.849 --> 00:02:31.099
which means both that we take advantage of technology
that's in the OS to make Java work the best possible

00:02:31.099 --> 00:02:38.489
and the OS also knows about us, to make Java
integration in other applications work great.

00:02:38.490 --> 00:02:44.430
We keep it up to date through regular software updates
that customers get to make sure that it's always up to date

00:02:44.430 --> 00:02:49.120
with the best technologies in the OS
and the best technologies in Java.

00:02:49.120 --> 00:02:55.069
And in contrast to some other platforms where you are
delivering Java applications, this means that Mac OS X,

00:02:55.069 --> 00:02:59.979
you typically don't bundle a JRE you don't have
to take the additional download hit for the size

00:02:59.979 --> 00:03:05.560
and the additional instillation complexity to bring
along your own Java runtime when you deliver applications

00:03:05.560 --> 00:03:12.629
on Mac OS X because you can count on a Java that's
in the operating system by default on all Mac OS X's

00:03:12.629 --> 00:03:15.460
and we make Java transparent to our users.

00:03:15.460 --> 00:03:22.260
That's our overall goal here, is to make the Java
experience transparent to the users of your applications.

00:03:24.979 --> 00:03:32.419
One of the ways we approach this is to have at any
time a single preferred Java version on Mac OS X,

00:03:32.419 --> 00:03:39.759
on Leopard this will be J2SE 5.0 and one of the
benefits of having a preferred Java version is

00:03:39.759 --> 00:03:45.909
that you have a predictable user configuration on
the platforms, the systems that your delivering to so

00:03:45.909 --> 00:03:50.259
that you know what Java their getting and
its always going to be kept up to date.

00:03:50.259 --> 00:03:52.819
Users can choose other versions in some cases.

00:03:52.819 --> 00:03:56.319
Let's look a little bit more at the preferred Java VM.

00:03:56.319 --> 00:04:00.389
There's one Java version that we consider best
to anytime and we focus our attention on bringing

00:04:00.389 --> 00:04:03.429
that forward to all the new technologies.

00:04:03.430 --> 00:04:09.370
We move it to new technologies and features in the operating
system and we'll be talking about those in Leopard soon.

00:04:09.370 --> 00:04:13.849
We keep the older versions around for
compatibility but we phase them out over time

00:04:13.849 --> 00:04:21.610
and we'll do a brief compressed recap of what the preferred
Java version has been in older versions of Mac OS X starting

00:04:21.610 --> 00:04:31.160
with Java 1.3.1 on 10.0 and 10.1 and then moving all
the way forward to the newest version of Java in Leopard

00:04:31.160 --> 00:04:37.730
which is Java version 1.5.0 under bar 11, and
we phase out the older versions as I said.

00:04:37.730 --> 00:04:41.480
Now we're focusing more on the
right-hand side of this chart.

00:04:44.360 --> 00:04:49.740
One of the other benefits about having Java integrated
with the OS and shipped as part of software updates is

00:04:49.740 --> 00:04:54.160
that we bring you and your customers
through transitions transparently.

00:04:54.160 --> 00:05:01.790
Of course as I talked about we shipped, we've switched the
preferred Java version over time from 1 thru 1 then to 1.4

00:05:01.790 --> 00:05:08.370
and then early last year we shipped an update for Tiger
which brought the preferred Java version for application

00:05:08.370 --> 00:05:13.300
and applets in the browser forward from 1.4.2 to 1.5.0.

00:05:13.300 --> 00:05:17.750
As a result of that transition we has over
10 million downloads of that software update

00:05:17.750 --> 00:05:22.350
and we had fewer then 40 bugs in
connection with that transition.

00:05:22.350 --> 00:05:26.110
We worked very hard to make these transitions
very seamless for you and your customers,

00:05:26.110 --> 00:05:30.840
so that in principal what they are getting
is just a better Java and they don't notice

00:05:30.839 --> 00:05:33.279
that they've been switched to a newer version.

00:05:34.889 --> 00:05:39.740
Other transitions of course that you know about are
hardware transitions over the past two years we've been

00:05:39.740 --> 00:05:44.180
in the process of switching form
PowerPC processors to Intel processors

00:05:44.180 --> 00:05:48.319
and again Java came across that transition very seamlessly.

00:05:48.319 --> 00:05:52.849
Java was unique in an application delivery strategy.

00:05:52.850 --> 00:05:57.820
In most cases you didn't even have to recompile
your applications, your code just continued to work

00:05:57.819 --> 00:06:00.300
on the new processors when they came out.

00:06:00.300 --> 00:06:06.060
Also beginning last year and continuing in earnest as you've
heard at the conference this year, we've been in transition

00:06:06.060 --> 00:06:14.439
from 32 bit processors to 64 bit processors and again Java
is uniquely suited to benefit from transitions like this

00:06:14.439 --> 00:06:20.279
because Java updates on the operating system will
make your applications naturally take advantage

00:06:20.279 --> 00:06:27.229
of new architectures like 64 bit Intel.

00:06:27.230 --> 00:06:31.350
Let's fill in some of the Java
improvements in the last year.

00:06:31.350 --> 00:06:37.830
First as I mentioned early in 2006 we shipped
an update, our fourth update of J2SE 5.0

00:06:37.829 --> 00:06:43.699
in which we switched the default Java version,
the preferred Java version on Tiger to Mac OS,

00:06:43.699 --> 00:06:49.519
to J2SE 5.0 and that was a very
seamless transition for our customers.

00:06:50.600 --> 00:06:56.010
Later in that year we shipped an improvement
to the SWT compatibility for the SWT tool kit

00:06:56.009 --> 00:07:02.529
from the Eclipse Foundation and we also
began previews of Java SC6 also on Tiger.

00:07:02.529 --> 00:07:11.739
In the middle of the year last year with the release of new
Intel processor Macintosh's, we updated the version of Java

00:07:11.740 --> 00:07:17.430
in that version of the operating system with those
processors, with those machines to better advantage

00:07:17.430 --> 00:07:24.709
of the hardware, to make it an even
better performance story for you on Intel.

00:07:24.709 --> 00:07:30.139
We continued our developer previews
through the summer so Java SC6 on Tiger.

00:07:33.350 --> 00:07:42.310
Early this year we shipped two updates, one for Panther,
Mac OS X3 and one for Tiger, Mac OS X4 to again brig them

00:07:42.310 --> 00:07:47.120
up to date with the latest Java versions from
Sun and also to include additional enhancements

00:07:47.120 --> 00:07:50.829
and fixes that were essential for
our customers and developers.

00:07:50.829 --> 00:07:54.069
We're continuing our strategy of
making sure the Java in those versions

00:07:54.069 --> 00:07:58.740
of the operating system is the best it can be.

00:07:58.740 --> 00:08:04.160
And now of course at the conference this week your
getting yet another update of new Java versions

00:08:04.160 --> 00:08:07.800
in the Leopard beta preview that
you are getting on DVD this week

00:08:07.800 --> 00:08:11.079
and we'll be talking about that quite a bit in this talk.

00:08:11.079 --> 00:08:21.969
All of this goes together we feel to make Mac OS X the best
platform for desktop Java and for other Java deployments.

00:08:21.970 --> 00:08:27.820
This is because every Java at any time had the best Java
version they can have that automatically gets updated

00:08:27.819 --> 00:08:34.179
with new improvements in the operating system,
new architectural features and new technologies.

00:08:34.179 --> 00:08:40.849
You as developers have both the great SDK tools that are
part of Mac OS X, but you also have access to a wide arrange

00:08:40.850 --> 00:08:48.529
of Java development tools that also run great on Mac OS X
and you can use those to benefit in developing your apps.

00:08:48.529 --> 00:08:53.850
So that's a brief coverage especially for those
of you new to the platform of how we do Java

00:08:53.850 --> 00:09:00.790
on Mac OS X. Let's take a look at what
some Java developers are doing on Mac OSX

00:09:00.789 --> 00:09:03.059
with their applications and other products today.

00:09:03.059 --> 00:09:07.589
As you saw in Bertrons (Assumed spelling) talk there's
a whole constellation a whole galaxy of applications

00:09:07.590 --> 00:09:09.710
out there and many of them are written in Java.

00:09:09.710 --> 00:09:14.620
Here's just a few, a sampling of some of the
most recent applications written in Java,

00:09:14.620 --> 00:09:18.139
delivered on the Mac and, Mac OS X and looking great.

00:09:18.139 --> 00:09:22.539
Of course in the Enterprise Java space,
Java's a major player and all the names

00:09:22.539 --> 00:09:28.329
that you know form the Enterprise Java world run great on
Mac OS X in addition there are several that are specific

00:09:28.330 --> 00:09:32.780
to this platform like web objects
that you probably already know about.

00:09:32.779 --> 00:09:38.799
And again as java developers in addition to the tools that
are built into Mac OS X you have access to the wide range

00:09:38.799 --> 00:09:44.500
of development tools out there from third parties
all of which we work to make run great on Mac OS X

00:09:44.500 --> 00:09:49.440
and many developers chose Mac OS X as
their development platform for this reason,

00:09:49.440 --> 00:09:53.900
even if they are deploying to multiple
other operating systems.

00:09:53.899 --> 00:09:57.100
We think that Mac OS X is a great development story.

00:09:58.600 --> 00:10:05.740
Let's take a closer look at two developers who
are doing great work to polish their applications,

00:10:05.740 --> 00:10:11.090
to take advantage of new technologies on
Mac OS X and really make them stand out.

00:10:11.090 --> 00:10:16.550
First I would like to invite (inaudible) from the
development team, the Java development team at Apple

00:10:16.549 --> 00:10:22.509
to demo Maple which is great mathematical
analyze package written in Java.

00:10:22.509 --> 00:10:29.179
( Applause )

00:10:29.179 --> 00:10:37.599
>> Good morning I am (inaudible) and I
work on the Java team over here at Apple.

00:10:37.600 --> 00:10:41.129
If my machine wakes up, and it's up, there we go.

00:10:41.129 --> 00:10:43.860
Okay so today I am going to showcase Maple.

00:10:43.860 --> 00:10:50.490
Maple is a mathematical analyze tool and it helps you
develop advance mathematical models and its written in Java

00:10:50.490 --> 00:10:55.269
so it runs on Windows, it runs on Linux and of
course it runs on the Mac and what I am going

00:10:55.269 --> 00:11:00.860
to show you today is how, some of the things that
they have taken care of to make sure that the app look

00:11:00.860 --> 00:11:08.149
like a polished app on the Mac, so the first
thing you notice when you download Maple is

00:11:08.149 --> 00:11:14.149
that they have an installer package, so they need to
install some source code, some example code along with it

00:11:14.149 --> 00:11:20.870
and (inaudible) they create an installer
package that looks right at home on the Mac

00:11:20.870 --> 00:11:25.090
and I'm going to install it because I already have it.

00:11:25.090 --> 00:11:30.389
Alright so just launching Maple here and you'll
notice that it's a double clickable bundle

00:11:30.389 --> 00:11:36.629
that just looks like a normal Mac OS X app.

00:11:36.629 --> 00:11:43.779
So once you launch it you see this nice little
simulated (inaudible) display, very slick,

00:11:43.779 --> 00:11:48.100
very polished with some real nice (inaudible) effects.

00:11:48.100 --> 00:11:56.149
And one of the things you notice is the menu bar is at the
top, now that's the normal place for the menu bar on the Mac

00:11:56.149 --> 00:12:01.870
but when you take a Java app and you just
run it and when you create a menu bar on the,

00:12:01.870 --> 00:12:07.750
when you put a menu bar inside a window on a Mac by default
the menu bar show up inside the window which is how it shows

00:12:07.750 --> 00:12:11.279
up on all the other platforms,
but you know a small little tweak,

00:12:11.279 --> 00:12:15.309
one extra system property and the menu bar goes at the top.

00:12:15.309 --> 00:12:19.239
So you got to be aware of that when
you bring your app to the Macintosh.

00:12:19.240 --> 00:12:25.529
Okay the other thing to notice is the
app name, it says Maple 11 over there

00:12:25.529 --> 00:12:32.579
and again by default usually you would see the main class
name over there, you'd see like, if they didn't take care

00:12:32.580 --> 00:12:37.330
of it your would of seen com.maplesof.mainpp
but you know a small little tweak

00:12:37.330 --> 00:12:42.310
to your info.p list file and you will see the app name.

00:12:42.309 --> 00:12:46.469
So let's take a look at some of
the UI controls that they've added.

00:12:46.470 --> 00:12:54.540
They have a really polished looking pop
down over here with (inaudible) style

00:12:54.539 --> 00:12:58.329
and look really, feels right at home on the Mac.

00:12:58.330 --> 00:13:04.280
If you look over here they've got buttons but these are
(inaudible) style buttons sort of like the ones you find

00:13:04.279 --> 00:13:12.289
in the Safari (inaudible) box bar and again
you know just a nice little touch of polish.

00:13:12.289 --> 00:13:22.179
So what I am going to do over here is I am going to open
up my document and if you noticed I just double clicked

00:13:22.179 --> 00:13:25.039
on the document and it opened it up using Maple.

00:13:25.039 --> 00:13:26.959
Well how did it do that?

00:13:26.960 --> 00:13:35.370
You know the Maple engineers took the trouble to actually
register their extension the .mw extension and they UI type

00:13:35.370 --> 00:13:41.899
in the info.p list so that Mac OS X knows
that when a document of type (inaudible)

00:13:41.899 --> 00:13:45.860
of extension of mw it should open it up using Maple.

00:13:45.860 --> 00:13:50.100
So again another thing you need
to do in your info.p list file.

00:13:50.100 --> 00:13:56.040
So you know you could obviously create lots of advanced
mathematical models over here but what I am going

00:13:56.039 --> 00:14:00.769
to do is something very simple, I'm just
going to change the color of this oval

00:14:00.769 --> 00:14:04.429
from hideous purple to something more pleasing to the eye.

00:14:04.429 --> 00:14:11.500
So I just go to the drawing properties and
here's another you know neat little thing.

00:14:11.500 --> 00:14:21.789
They've got segmented controls over here for the fill
type again very Mac like and when you click for the color,

00:14:21.789 --> 00:14:31.480
what you see is a color chooser that looks like a Mac OS X
color chooser and it even has a color sampler so I can take

00:14:31.480 --> 00:14:40.350
that you know and select some nice lets say this aqua
blue alright so lets say I am done with my color change

00:14:40.350 --> 00:14:48.860
and now I go ahead and quit the app and I go to the
app menu and I press quit, now by default on a Mac

00:14:48.860 --> 00:14:54.980
when you press quit the (inaudible) will cause
(inaudible) it will just shut down the whole application

00:14:54.980 --> 00:15:01.779
and while that maybe fine for a normal, for
many Java applications, for a document based app

00:15:01.779 --> 00:15:04.269
like Maple that's now the right thing to do.

00:15:04.269 --> 00:15:09.379
You want to be given then chance to save the document which
is what they have done, so they have taken care of it,

00:15:09.379 --> 00:15:15.350
there is some little extra code that you need to
add to your application, to ensure that you know

00:15:15.350 --> 00:15:19.340
that you get notified when the app quits.

00:15:19.340 --> 00:15:24.340
So you get a nice little save dialog and
again this is not your standard yes, no,

00:15:24.340 --> 00:15:28.759
cancel j dialog you know it looks right
at home on the Mac with the don't save,

00:15:28.759 --> 00:15:31.689
cancel and save which is what it is suppose to be.

00:15:31.690 --> 00:15:36.820
Each button is an action like it's suppose to be on the Mac.

00:15:36.820 --> 00:15:43.120
So just save over there and (inaudible).

00:15:43.120 --> 00:15:57.679
Okay so that was a really short small demo of Maple and we
believe that its fantastic Mac OS X app that just happens

00:15:57.679 --> 00:16:03.289
to be written in Java and I think you know, you can
definitely take your app and really polish it up

00:16:03.289 --> 00:16:07.669
and we got sessions later today
and tomorrow to help you do that.

00:16:07.669 --> 00:16:13.860
Now can we go back to the slides?

00:16:13.860 --> 00:16:22.200
Well from one fantastic app to another and I'd like to
welcome onstage Ted (inaudible) and Steve (inaudible).

00:16:22.200 --> 00:16:24.950
Tad and Steve will (inaudible) and they
double up an app called (inaudible)

00:16:24.950 --> 00:16:29.800
which is a video production assistance
and as you see it a really amazing app.

00:16:29.799 --> 00:16:30.509
Thanks.

00:16:30.509 --> 00:16:37.980
( Applause )

00:16:37.980 --> 00:16:43.800
>> Tad: Morning everybody I am very glad to be here
to share some of our experiences that we've had.

00:16:43.799 --> 00:16:46.949
Steve and I have been doing Java
developments for a long time as well

00:16:46.950 --> 00:16:51.710
as our other crew back home that's helped us
do this application and I'm pleased to say

00:16:51.710 --> 00:16:56.100
when we wrote this application we chose to do it in Java.

00:16:56.100 --> 00:17:00.250
Tom is reminding me to say Java, Java, Java, Java,
Java a bunch of times because the app is really

00:17:00.250 --> 00:17:07.680
about 98 percent Java, there is a little bit of native code
which I will go into but the real message is that when we,

00:17:07.680 --> 00:17:11.960
we didn't start on the OS X platform when we
started writing this thing and when we decided

00:17:11.960 --> 00:17:18.610
to make it the primary emphasis of our efforts, the
bulk of moving it over and getting it working correctly

00:17:18.609 --> 00:17:24.199
in an Apple way was very short time, was you
know way less then a week, a couple day, two,

00:17:24.200 --> 00:17:28.000
three days to get most of the things you need to do
right and there was a couple of other polish things

00:17:28.000 --> 00:17:29.990
that we wanted to do, which I'll point out.

00:17:29.990 --> 00:17:35.569
But what single shot does, it solves a problem
that if anybody shot any video here in this room,

00:17:35.569 --> 00:17:38.700
whether professionally or semi-professionally
or maybe it's just your kid

00:17:38.700 --> 00:17:41.120
at the school play, you've had the following problems.

00:17:41.119 --> 00:17:46.269
You've had, you get everybody up and you want to go
set it and you get to shot and the lighting was wrong

00:17:46.269 --> 00:17:50.019
and the audio was out and you don't realize it or
your color calibrations wrong and you don't find this

00:17:50.019 --> 00:17:54.379
out till you get back and you load what's on your
tape up into iMovie or final cut or something

00:17:54.380 --> 00:17:58.660
and you go oh I just screwed that up I
got to go redo the whole thing again.

00:17:58.660 --> 00:18:00.220
Now you can solve this a couple ways.

00:18:00.220 --> 00:18:05.950
You can go to a shot, something like this which
are several dozen across the country every year

00:18:05.950 --> 00:18:11.730
and you can buy very expensive dedicated hardware, one
to solve lighting, one to solve audio, one to solve focus

00:18:11.730 --> 00:18:17.710
and these range from 1,000 to 5,000 dollars a pop
or and this is what the Spielberg's of the world do,

00:18:17.710 --> 00:18:20.430
they have these huge budgets and they go and
buy the dedicated hardware and they need that,

00:18:20.430 --> 00:18:23.120
for the rest of us, there's something like single shot.

00:18:23.119 --> 00:18:30.809
Now what single shot is, it's a Java application,
let's go to the camera and let's see if you could,

00:18:30.809 --> 00:18:36.169
and what we got is a live video feed from
Fire wire connected to this video camera.

00:18:36.170 --> 00:18:44.269
This is standard DV camera, a Panasonic camera and
we are care capturing video and audio in real time

00:18:44.269 --> 00:18:48.900
at thirty frames a second, this is a 720 by 480 size image

00:18:48.900 --> 00:18:53.030
because that's the raw image that
we get off the camera in Java.

00:18:53.029 --> 00:19:00.109
So we have a video canvas which is the big upper left canvas
and we have a four track video timeline down below that

00:19:00.109 --> 00:19:02.490
and then to the right we have a tool palette.

00:19:02.490 --> 00:19:09.680
And this too palette has a dozen or so tools each of which
you have to spend that hundreds of thousands of dollars

00:19:09.680 --> 00:19:16.370
in hardware, we got completely in software a Java
software to let you know what's going on in your shot.

00:19:16.369 --> 00:19:20.939
So what were going to show today is a couple of ways
that single shot can help you both before the shot,

00:19:20.940 --> 00:19:25.130
so as you are getting setup and making sure that
your camera's calibrated right so that when you take

00:19:25.130 --> 00:19:31.890
that footage you get what you want as well as something's
we can do during the shot to help you with your film.

00:19:31.890 --> 00:19:34.900
So what can we do in shot setup?

00:19:34.900 --> 00:19:39.610
Well if we go to the video area, were going to go to
the exposure tool and were going to talk about lighting

00:19:39.609 --> 00:19:43.819
because this is one of the big things that particularly
beginning videographers get wrong, they get out there,

00:19:43.819 --> 00:19:47.419
you get the shots set up and the lighting
is wrong and you don't know it's wrong.

00:19:47.420 --> 00:19:48.410
So what can we do?

00:19:48.410 --> 00:19:55.840
Well in this tool palette we have an exposure histogram and
on the right side what you see is a bunch of white pixels,

00:19:55.839 --> 00:20:00.269
lets do something in front of the thing and kind of adjust,
there you go you can kind of see it bouncing around.

00:20:00.269 --> 00:20:06.450
Now what we're taking, is again, in real time, 720 by 480
pixels, each pixel, 30 times a secon0d and we're plotting

00:20:06.450 --> 00:20:11.230
that in Java 2D on that right hand side
to tell you what the luminance value is.

00:20:11.230 --> 00:20:13.920
If you see a bunch of pixels to the left like you see here,

00:20:13.920 --> 00:20:17.140
that means we're way underexposed
in what the camera is looking at.

00:20:17.140 --> 00:20:21.170
If you see a bunch of pixels on the right
side it means you're way overexposed.

00:20:21.170 --> 00:20:26.220
So right off the bat, you have some sense of I got to do
something about my lighting, I've got to change the iris

00:20:26.220 --> 00:20:31.009
on the camera, I've got to adjust lighting if I have
lights, I've got to move the camera somewhere else.

00:20:31.009 --> 00:20:36.400
And that gives you a rough approximation, but we
can also show you exactly where the problem is.

00:20:36.400 --> 00:20:40.110
And we do that by these check marks
called the highlights and the shadows.

00:20:40.109 --> 00:20:44.500
And what highlights are going to do and shadows are
going to do is tell you where you are overexposed

00:20:44.500 --> 00:20:47.390
and underexposed based on a number of indicators.

00:20:47.390 --> 00:20:49.480
The first one we have is a zebra indicator.

00:20:49.480 --> 00:20:55.819
And as Steve is adjusting the camera, you're seeing
those red lines appear on me, which means the lighting is

00:20:55.819 --> 00:20:59.250
at a certain level of brightness
and we want to adjust things

00:20:59.250 --> 00:21:01.890
until basically you don't see any more of those red lines.

00:21:01.890 --> 00:21:04.259
Okay? That's our zebra marks.

00:21:04.259 --> 00:21:08.829
Now we can do that with both highlights and lowlights
based on thresholds that you set in the application.

00:21:08.829 --> 00:21:12.029
And we can also be very specific
about where we want to look.

00:21:12.029 --> 00:21:19.649
So if we change the input from the entire camera shot to
a region, now we can focus directly on just what you want

00:21:19.650 --> 00:21:24.290
to look at and we can also change the
indicator from an overall gross approximation,

00:21:24.289 --> 00:21:31.069
which is what zebra marks give you, to a very fine grained
approximation, which is what our false color gives you.

00:21:31.069 --> 00:21:38.269
Let's go back to the, there we go, as he's adjusting this
what's going on is if you see that color band on the bottom

00:21:38.269 --> 00:21:43.809
of the histogram from oranges on the right
side all the way to purples on the left side,

00:21:43.809 --> 00:21:47.720
purples means underexposed regions,
red means overexposed regions.

00:21:47.720 --> 00:21:51.279
So right from my face here, over here, it's too bright.

00:21:51.279 --> 00:21:53.420
On the back of my head it's too dark.

00:21:53.420 --> 00:21:55.320
And this is what this is showing you.

00:21:55.319 --> 00:21:58.679
So that's how, again, with our Java application,

00:21:58.680 --> 00:22:02.779
we are showing in real time exactly
what's going on inside your video.

00:22:02.779 --> 00:22:05.369
So let's move over to the audio tools.

00:22:05.369 --> 00:22:07.569
We can do the same thing in audio.

00:22:07.569 --> 00:22:12.240
Now in audio what we've got is a levels indicator.

00:22:12.240 --> 00:22:18.299
And the level indicator is going to show you a
gross approximation of where your audio inputs are

00:22:18.299 --> 00:22:21.059
and then we've only got two channels
in this particular camera,

00:22:21.059 --> 00:22:23.779
so we just see the two channels
active on the left side there.

00:22:23.779 --> 00:22:25.619
But this tells you am I piquing my audio out?

00:22:25.619 --> 00:22:28.819
Am I going to get back tonight and try to
put this together I iMovie or Final Cut

00:22:28.819 --> 00:22:32.220
and realize I've blown my audio out
and I've totally wasted the shot?

00:22:32.220 --> 00:22:34.180
I better dial down this audio.

00:22:34.180 --> 00:22:41.690
So we can do both the gross approximation here by the
levels meter and then we can also go to the spectra analyzer

00:22:41.690 --> 00:22:47.309
and we can see individual frequencies of the
sound in this room as I'm actually talking here.

00:22:47.309 --> 00:22:51.889
And one of the big problems is you'll go and you'll set
up and you don't realize it's right next to a refrigerator

00:22:51.890 --> 00:22:58.370
or an air conditioner and it's got a 60 hertz hum and
you don't really hear it but you pick it up on your film

00:22:58.369 --> 00:23:01.250
and you get back and you go, argh,
what am I going to do about that?

00:23:01.250 --> 00:23:04.779
So we can let you know is my audio dialed in right?

00:23:04.779 --> 00:23:06.369
Now that's all during the shot.

00:23:06.369 --> 00:23:11.489
You get your shot set up correctly, you like what you see,
and now we're going to do something for you while you shoot.

00:23:11.490 --> 00:23:14.970
We can actually directly capture
video to disk with this tool.

00:23:14.970 --> 00:23:17.309
We do a little bit of it.

00:23:17.309 --> 00:23:19.740
Go ahead and do a little bit of it,
just keep the camera where it's at.

00:23:19.740 --> 00:23:22.930
So we're actually recording now, what
the camera is seeing, directly to disc.

00:23:22.930 --> 00:23:25.720
Let's go ahead and stop it not Steve.

00:23:25.720 --> 00:23:29.769
And when we do that, we set it up in a
project, so let's go back to the project view.

00:23:29.769 --> 00:23:31.889
And we've actually taken a couple of clips here.

00:23:31.890 --> 00:23:35.000
One before the session started and this one we just did.

00:23:35.000 --> 00:23:36.839
Bring up the second on Steve.

00:23:36.839 --> 00:23:37.769
There we go.

00:23:37.769 --> 00:23:42.049
Now we can scrub this clip, just
like you would in any other tool.

00:23:42.049 --> 00:23:43.460
So we can move back and forth.

00:23:43.460 --> 00:23:45.380
Do I really want to keep this or not?

00:23:45.380 --> 00:23:46.870
Or do I want to take a still frame?

00:23:46.869 --> 00:23:52.229
And then all those tools for analysis, you can look
right there and see if this is something I want to keep.

00:23:52.230 --> 00:23:56.660
The other thing we can do for you during the
shot is we can analyze the frames in real time.

00:23:56.660 --> 00:23:58.200
Steve, if you can go to the analyzer.

00:23:58.200 --> 00:24:03.110
And we can turn on audio here, and it's
picking up in real time our audio channels.

00:24:03.109 --> 00:24:08.269
And we can set a threshold to while we're doing a
recording if it sees a frame that piques the audio

00:24:08.269 --> 00:24:11.910
or piques the luminance values or
we have too many dropped frames.

00:24:11.910 --> 00:24:13.330
Boom. It knows that.

00:24:13.329 --> 00:24:15.730
And it puts a marker in our timeline.

00:24:15.730 --> 00:24:21.370
So the last thing I want to show before we end
up today is another way that we can help preview

00:24:21.369 --> 00:24:24.359
and this is a little bit more of a sophisticated set up.

00:24:24.359 --> 00:24:29.439
If you have more than one shot, and typically what you'll
do is you go do some outside footage and then you want

00:24:29.440 --> 00:24:33.950
to shoot somebody and you want to set them in the
scene, you want to do what they call a composite shot,

00:24:33.950 --> 00:24:36.390
well we can actually do some of that as well.

00:24:36.390 --> 00:24:39.720
If I can get Tom to come over here,
he's going to be our guinea pig.

00:24:39.720 --> 00:24:47.309
We're going to bring up a clip that we took
earlier that has the empty audience in it.

00:24:48.519 --> 00:24:49.480
There we go.

00:24:49.480 --> 00:24:57.730
And now we're going to go to our composite effects area of
the tool and what this allows us to do is to key a color

00:24:57.730 --> 00:25:04.670
in the green screen color back here and get an
approximation of where we want that, the key in color,

00:25:04.670 --> 00:25:10.810
to be and then what you would normally do is you would shoot
the subject in front of the green screen and get that clip

00:25:10.809 --> 00:25:21.029
and then that is going to allow us to put
him into the shot that you shot previously.

00:25:21.029 --> 00:25:26.039
So let's move over to the other source.

00:25:26.039 --> 00:25:27.480
There we go.

00:25:27.480 --> 00:25:33.420
Now we've got Tom kind of in the middle of
the audience here really, kind of, sort of.

00:25:33.420 --> 00:25:39.810
And so what this is for, it's not to replace the
composite king in Final Cut or the sophisticated editors,

00:25:39.809 --> 00:25:43.549
it's to give you an approximation set correctly.

00:25:43.549 --> 00:25:47.440
Do we really want him there or do we want him moved
over in front of the mountains, or what have you?

00:25:47.440 --> 00:25:49.390
And is the color key approximately correct?

00:25:49.390 --> 00:25:50.460
And then you do your shot.

00:25:50.460 --> 00:25:53.660
And now you've got something that
you can actually use as a clip.

00:25:53.660 --> 00:25:55.259
Let's go to the sunny ad.

00:25:55.259 --> 00:25:59.210
So in summary, what we have here is a java application.

00:25:59.210 --> 00:26:05.769
The only native code we have here really, is if
you look in this video, the big panel video area,

00:26:05.769 --> 00:26:13.170
when we did those zebra marks and we did the false color,
we are using some native code on the backend to process

00:26:13.170 --> 00:26:16.279
that with what's called a pixel shader
to actually get those zebra marks.

00:26:16.279 --> 00:26:21.480
But everything else, all the tools that you see,
all the UI that you see, all that's pure Java.

00:26:21.480 --> 00:26:26.799
So we're able to help you with the shot setup, we're able to
help you during the shot, with the record and the analyzer.

00:26:26.799 --> 00:26:33.970
And again, it took us two or three days to get 98
percent of the way to porting this app to Apple,

00:26:33.970 --> 00:26:38.779
including all the stuff, not to mention,
with the menus and all those other things.

00:26:38.779 --> 00:26:40.639
And we're actually very pleased.

00:26:40.640 --> 00:26:44.270
This app runs very well, even on a Power PC notebook.

00:26:44.269 --> 00:26:47.119
Steve develops on a Power PC, an
old Power PC book every day.

00:26:47.119 --> 00:26:48.649
He doesn't have mine.

00:26:48.650 --> 00:26:50.550
I don't let him have the new dual core stuff.

00:26:50.549 --> 00:26:54.680
He gets that when we ship the app.

00:26:54.680 --> 00:26:59.509
So all in all it's been a very pleasing
experience to develop with Java on OS X.

00:26:59.509 --> 00:27:04.379
( Applause. )

00:27:04.380 --> 00:27:06.030
>> Did you crash it?

00:27:08.450 --> 00:27:08.880
>> Tom: Thank you.

00:27:08.880 --> 00:27:13.720
That's a really great example of
high performance Java application

00:27:13.720 --> 00:27:22.539
that is also just a great application
on Mac OS X. Thank you Ted and Steve.

00:27:22.539 --> 00:27:28.460
So there's a recap of some of the developers on Mac O X
that you should know about today with some great examples.

00:27:28.460 --> 00:27:33.759
But at this point you're probably wondering how you can
learn more about how to make your applications great

00:27:33.759 --> 00:27:40.180
on Mac OS X. Today's talk is the first of
three talks on our Java World Tour this week.

00:27:40.180 --> 00:27:44.640
We have two more coming up later today and tomorrow.

00:27:44.640 --> 00:27:50.170
In the talk later today, we'll cover the
essentials of developing an application on Mac OS X

00:27:50.170 --> 00:27:55.620
or bringing a Java application to Mac OS X. one of
the typical things we'll show you in that talk is how

00:27:55.619 --> 00:28:00.789
to take a Java application downloaded from the web
at random, which is a collection of random jars

00:28:00.789 --> 00:28:08.059
and files in a directory and turning it into a double
clickable that your customers will expect running

00:28:08.059 --> 00:28:12.509
on Mac OS X. There's some very simple
steps you can take, some of which we talked

00:28:12.509 --> 00:28:15.559
about in the demos, that will get you that far.

00:28:15.559 --> 00:28:24.409
That and more is in the Bring Your Java Application Into Mac
OS X talk, this afternoon at three thirty in Russian Hill.

00:28:24.410 --> 00:28:33.170
In the third talk, we'll talk about advanced
tips for polishing your Java application.

00:28:33.170 --> 00:28:40.590
Here's an example swing application on Mac OS X. one
of the things we'll show you in the third talk is how

00:28:40.589 --> 00:28:47.599
to take this swing application and make it look like this
with some very simple code changes that remain portable.

00:28:47.599 --> 00:28:55.299
Your code will continue to run just fine on other platforms
and will still look good, it'll just look great on Mac OS X.

00:28:55.299 --> 00:29:02.019
that and a lot more is in the advanced Java development
talk, tomorrow at three thirty in the Marina.

00:29:02.019 --> 00:29:06.230
So we hope you can join us for those two talks.

00:29:06.230 --> 00:29:13.769
Now let's talk about what's new for Java in Leopard.

00:29:13.769 --> 00:29:20.990
We've made a lot of improvements over the past year or
more to make the Java experience on Leopard even better

00:29:20.990 --> 00:29:25.539
than on previous versions of Mac OS
X. one of the highlights I'll start

00:29:25.539 --> 00:29:30.259
with is enhancements to swing user interface elements.

00:29:30.259 --> 00:29:32.129
Here's a typical swing application.

00:29:32.130 --> 00:29:34.890
It's a random blogging application.

00:29:34.890 --> 00:29:36.580
You notice there's a list of blog entries.

00:29:36.579 --> 00:29:40.649
It looks like this blogger's probably
at the conference this week.

00:29:40.650 --> 00:29:45.250
They have some comments about lunch
yesterday, it looks like, perhaps.

00:29:45.250 --> 00:29:47.140
This is a good looking application.

00:29:47.140 --> 00:29:51.990
It looks like a standard swing application,
and this is what you get for free

00:29:51.990 --> 00:29:55.130
when you bring your application just in from the web.

00:29:55.130 --> 00:30:01.310
But you can make it look even better on Mac OS X, to make
it look like it really fits into the look on Leopard.

00:30:01.309 --> 00:30:06.379
The first step we'll do is just giving the window a
face lift and making it look like a Leopard window.

00:30:06.380 --> 00:30:08.340
And that's one very simple step you can make.

00:30:08.339 --> 00:30:11.149
And again, all of the steps we're
going to show you, remain portable.

00:30:11.150 --> 00:30:12.680
Your code continues to run.

00:30:12.680 --> 00:30:19.769
The same code continues to run on other platforms, just
looking better on Mac OS X. Next the toolbar at the top

00:30:19.769 --> 00:30:25.910
of the window could be updated to have real
toolbar buttons more appropriately sized menu items

00:30:25.910 --> 00:30:28.920
and a real search field rather than an anonymous text field.

00:30:28.920 --> 00:30:33.430
That's a real working search field with
a simple step you can do on Leopard.

00:30:33.430 --> 00:30:35.990
Next, we can update many of the
other elements in the window.

00:30:35.990 --> 00:30:39.259
We can give a sort indicator to the J. table.

00:30:39.259 --> 00:30:43.269
We can update other components of the window
that may make them work better on Mac OS X.

00:30:43.269 --> 00:30:49.619
If we can give it a better splitter, and we can update other
controls including the controls on the lower left corner

00:30:49.619 --> 00:30:53.439
of the window, this application is looking pretty good.

00:30:53.440 --> 00:30:55.080
You can also if you have a palette.

00:30:55.079 --> 00:30:59.199
You can turn the palette into something
that looks like a palette on Mac OS X

00:30:59.200 --> 00:31:05.080
by giving it more appropriately sized
controls, and a pallet sized toolbar.

00:31:05.079 --> 00:31:08.699
Again, simple steps for each one.

00:31:08.700 --> 00:31:12.559
So here's where we started we started
with this good looking swing application,

00:31:12.559 --> 00:31:16.109
and we turned it into a great swing application.

00:31:17.630 --> 00:31:24.670
For many more details on how to do this and more come
to the talk advanced Java development tomorrow at 330

00:31:24.670 --> 00:31:29.050
and we'll tell you how you can take
easy steps to make portable code

00:31:29.049 --> 00:31:33.460
that looks great when running on Mac OS X Leopard.

00:31:33.460 --> 00:31:38.630
Next, let's move onto SWT support.

00:31:38.630 --> 00:31:51.230
We've been working with the eclipse community and the SWT
team to continually improve the SWT experience on Mac OS X.

00:31:51.230 --> 00:31:57.250
But let's step back a little bit and recap.

00:31:57.250 --> 00:32:03.069
We have Apple engineers who are continually working with
eclipse team contributing to the community and working

00:32:03.069 --> 00:32:05.619
with them to solve problems to make things work better.

00:32:05.619 --> 00:32:12.899
As I mentioned before, we released a compatibility
upgrade in early 2006, and we may even more improvements

00:32:12.900 --> 00:32:17.340
in the updates we shipped in February
of this year to make SWT really great,

00:32:17.339 --> 00:32:21.559
integrated really integrated well on Tiger.

00:32:21.559 --> 00:32:24.779
But in Leopard were taking this a step further.

00:32:24.779 --> 00:32:30.639
We've improved the over all stability of
embedding the SWT components and AWT Windows.

00:32:30.640 --> 00:32:37.110
And we've also made Java start up more SWT away
or so SWT and AWT get along together better

00:32:37.109 --> 00:32:40.519
in the same application, and other stability improvement.

00:32:40.519 --> 00:32:44.059
We added support for RCP applications.

00:32:44.059 --> 00:32:51.159
We've launched by Web start so that you can
take advantage of that functionality on Leopard.

00:32:51.160 --> 00:32:58.120
For many more details about our SWT support improvements in
Leopard come to the advanced Java development talk tomorrow.

00:32:58.119 --> 00:33:02.989
Now let's move on to the Java command line.

00:33:02.990 --> 00:33:09.380
This is a small thing, but it's been a major request
for years since we introduced multiple versions of Java

00:33:09.380 --> 00:33:14.950
on Mac OS X. On Tiger, when you switch the Java version,

00:33:14.950 --> 00:33:21.549
when a user switches the Java version using the Java
preferences application, it changes the version of Java used

00:33:21.549 --> 00:33:25.359
for double clickable applications and for Web start.

00:33:25.359 --> 00:33:29.740
But it didn't effect the version
of Java used on the command line.

00:33:29.740 --> 00:33:33.319
You had to use full paths to get
to the version that you wanted,

00:33:33.319 --> 00:33:36.319
if you wanted to run something that wasn't the latest.

00:33:36.319 --> 00:33:42.049
Now in Leopard, when you switch the Java version in Java
preferences the version on the command line policy changes,

00:33:42.049 --> 00:33:51.099
so user bin Java will change behavior for
you when you switch it in your preferences.

00:33:51.099 --> 00:33:53.569
Thank you, we thought you'd be pleased.

00:33:54.619 --> 00:33:57.129
Next, let's move onto performance.

00:33:57.130 --> 00:33:59.870
We wouldn't be talking about performance
if it wasn't better performance.

00:33:59.869 --> 00:34:02.269
Performance on Leopard is looking even better than Tiger.

00:34:02.269 --> 00:34:05.029
But let's go into a little more detail.

00:34:05.029 --> 00:34:10.469
Here's our recent run of swing mark using J2SC on Leopard.

00:34:10.469 --> 00:34:12.629
Well first let's look at Tiger.

00:34:12.630 --> 00:34:14.059
On Tiger our performance is here.

00:34:14.059 --> 00:34:19.519
But in comparison our Leopard performance
is significantly improved in recent testing.

00:34:19.519 --> 00:34:22.550
So, we're really pleased how well
performance is looking in Leopard.

00:34:22.550 --> 00:34:27.780
And you should be able to check this out in the preview
that you're getting this week at the conference.

00:34:27.780 --> 00:34:33.410
We're 41 percent faster at this
point, and we're really proud of that.

00:34:37.969 --> 00:34:42.629
And the server space, spec JVB is a common bench mark used.

00:34:42.630 --> 00:34:47.539
And if you're in that space, you may already
know that our Tiger performance is better

00:34:47.539 --> 00:34:51.309
than comparable operating systems on the same hardware.

00:34:51.309 --> 00:34:57.549
This is the Tiger performance compared
on a fork war 3 gig hertz Mac Pro.

00:34:57.550 --> 00:35:01.410
And we're already doing much better
than Lennox on the same hardware.

00:35:01.409 --> 00:35:05.639
But on Leopard were pleased to say
we're doing even better than that.

00:35:05.639 --> 00:35:12.639
And this is true when you also look at the version of this
switches scale per instance of the Java virtual machine,

00:35:12.639 --> 00:35:15.949
because there's two virtual machines
running on this four core machine.

00:35:15.949 --> 00:35:20.579
And the story is basically identical,
but were including that for completeness.

00:35:20.579 --> 00:35:25.719
We are publishing these results today on the spec site.

00:35:29.019 --> 00:35:33.340
Overall, the message I want to give you is
that Java performance on Leopard is great.

00:35:33.340 --> 00:35:35.950
We've been doing a lot of work over the past year

00:35:35.949 --> 00:35:43.059
to really make Leopard performance great
for Java and were really proud of that.

00:35:44.550 --> 00:35:48.370
Now let's move to some graphic enhancements.

00:35:48.369 --> 00:35:52.599
Resolution independence is a direction you
are hearing more about in other sessions

00:35:52.599 --> 00:35:56.889
of the conference this year in Leopard and beyond.

00:35:56.889 --> 00:36:00.029
As higher resolution displays become available.

00:36:00.030 --> 00:36:05.710
You want the operating system to be aware that there are
different numbers of dots per inch on those displays,

00:36:05.710 --> 00:36:10.740
and adapted that take advantage of them because
the default is that your original window,

00:36:10.739 --> 00:36:16.389
which was rendered in the user interface space of
72 dots per inch through the original standard.

00:36:16.389 --> 00:36:20.460
When run on an extremely high resolution
display of three times that resolution,

00:36:20.460 --> 00:36:24.199
just ends up getting a lot smaller
sure isn't really what you want.

00:36:24.199 --> 00:36:27.489
What you really want is to take
advantage of all this extra pixels

00:36:27.489 --> 00:36:33.119
to make your application windows and
elements the same size but sharper.

00:36:33.119 --> 00:36:40.230
So, if you look closely at this pixels scaled
up, if you look closely at those pixels.

00:36:40.230 --> 00:36:45.769
If we just scale them up, naively, you'd end up
with the same pixels except they'd just be bigger.

00:36:45.769 --> 00:36:50.869
So the net effect is that your window would be,
and the elements in the window would be blockier.

00:36:50.869 --> 00:36:53.210
You really want things to be Chris.

00:36:53.210 --> 00:36:58.650
We have a great story for you as Java
developers with resolution independence.

00:36:58.650 --> 00:37:00.980
When resolution independence is fully supported,

00:37:00.980 --> 00:37:06.110
and you have bought some super high res
display your application will end up looking

00:37:06.110 --> 00:37:09.110
like this, with no additional work on your part.

00:37:09.110 --> 00:37:14.360
You notice we've made the text crisper, taking
full advantage of the higher resolution.

00:37:14.360 --> 00:37:16.280
We've made the user interface elements crisper.

00:37:16.280 --> 00:37:17.910
I'll go back and forth here.

00:37:17.909 --> 00:37:20.259
We've made the user interface element sharper

00:37:20.260 --> 00:37:24.580
and overall your window is really
taking advantage of all of those pixels.

00:37:24.579 --> 00:37:26.400
You paid for on the high wrist display.

00:37:26.400 --> 00:37:34.039
But if you look closely, there is one part of
this that is not at the full resolution yet.

00:37:34.039 --> 00:37:40.940
In the upper left-hand corner of the screen the images in
these toolbar buttons were provided by the application.

00:37:40.940 --> 00:37:43.329
And they were provided at a single resolution.

00:37:43.329 --> 00:37:48.150
And so the automatic scaling that we're doing, because
we're part of the operating system and take advantage

00:37:48.150 --> 00:37:51.050
of the resolution independence,
can't do anything about that.

00:37:51.050 --> 00:37:54.190
We can't make your images magically sharper.

00:37:54.190 --> 00:37:57.510
With a simple step that we'll tell
you about later this week.

00:37:57.510 --> 00:38:02.250
You can make your application's images
also support resolution independence,

00:38:02.250 --> 00:38:05.659
so that they end up looking like this.

00:38:05.659 --> 00:38:09.379
For more about that and about resolution
independence in Java come

00:38:09.380 --> 00:38:12.510
to the advanced Java development talk tomorrow at 330.

00:38:12.510 --> 00:38:17.470
( Silence )

00:38:17.469 --> 00:38:19.829
>> Tom: Now let's move onto another graphics enhancement.

00:38:19.829 --> 00:38:23.019
The Sun 2D render is going to be the default in Leopard.

00:38:23.019 --> 00:38:27.889
But let's go back to recap and
tell you what that really means.

00:38:27.889 --> 00:38:34.369
Graphics rendering on Tiger and early operating systems
was rendered using something we called the Quartz renderer,

00:38:34.369 --> 00:38:39.269
which mapped the Java drawling
primitives to Mac OS X Quartz APIs.

00:38:39.269 --> 00:38:46.059
And because of that we were able to take advantage of
some key functionality in the Quartz rendering APIs

00:38:46.059 --> 00:38:54.259
to do cool things with text that Quartz
could do, that wasn't in other rendering.

00:38:54.260 --> 00:39:02.740
However, we added the Sun 2D renderer in the past and past
updates over the past year as an option for you to try out.

00:39:02.739 --> 00:39:09.519
And the reason we did, that is that the Sun 2D renderer is a
better match for the foreman's profile of graphics rendering

00:39:09.519 --> 00:39:13.829
on the other Java platforms and a
better match for pixel fidelity.

00:39:13.829 --> 00:39:18.409
So you get the exact same pixel coverage
using the Sun 2D renderer on Mac OS X,

00:39:18.409 --> 00:39:23.210
Java, and on other Java on other platforms.

00:39:23.210 --> 00:39:28.559
But because the Tigers Sun 2-D renderer didn't
support all of the functionality that we were used

00:39:28.559 --> 00:39:36.179
to from the Quartz API's such as advanced
texts like bi directional text rendering,

00:39:36.179 --> 00:39:39.559
we kept Quartz renderer to default on Tiger.

00:39:39.559 --> 00:39:44.150
We left the Sun 2D renderer available on options
so that you could try it out in special cases.

00:39:44.150 --> 00:39:47.880
But we felt the Quartz renderer
was the best default on Tiger.

00:39:47.880 --> 00:39:51.059
On Leopard, we flipped that.

00:39:51.059 --> 00:39:59.070
The Sun 2-D renderer is now the default on Leopard, because
we've improved it to take advantage of the Mac OS X graphics

00:39:59.070 --> 00:40:03.120
and text enhancements that we wanted to support.

00:40:03.119 --> 00:40:05.039
We left the Quartz renderer still available.

00:40:05.039 --> 00:40:07.759
So you can switch to that as an option.

00:40:07.760 --> 00:40:14.270
But again, we believe that using the Sun 2-D renderer
by default is the best match for performance of graphics

00:40:14.269 --> 00:40:18.070
with other Java platforms and with
pixel coverage that you may be expecting

00:40:18.070 --> 00:40:21.510
when you're rendering Java where that really matters.

00:40:21.510 --> 00:40:27.220
But we need your feedback, we need you to tell
us how this change in default is working for you.

00:40:27.219 --> 00:40:35.579
So please try it out on the Leopard data preview, and
with your application and let us know what you find.

00:40:35.579 --> 00:40:38.969
So that's the Sun 2D renderer.

00:40:40.739 --> 00:40:47.829
You've been hearing a lot this week about how Leopard
before bit from top to bottom and the good news for you

00:40:47.829 --> 00:40:53.250
as Java developers is Java is no
exception in the Leopard preview

00:40:53.250 --> 00:41:00.010
that you're getting this week J2SC50
to 64 bit enabled for Intel.

00:41:00.010 --> 00:41:03.960
So again we're bringing you, we're
bringing you to new enhancements

00:41:03.960 --> 00:41:06.500
in the operating systems without work on your part.

00:41:06.500 --> 00:41:08.590
You're getting the advantage of new hardware

00:41:08.590 --> 00:41:12.620
and new operating system improvements
and this is just one example of that.

00:41:12.619 --> 00:41:13.739
Well, what's the performance like?

00:41:13.739 --> 00:41:22.359
Well let's take a look at a recent comparison we did on
Leopard with 32 bit J2SE 5.0 SciMark and here 64 bit.

00:41:22.360 --> 00:41:23.970
You notice that we are up across the board.

00:41:23.969 --> 00:41:27.509
64 bit performance on Leopard is great.

00:41:27.510 --> 00:41:30.160
And we are really pleased that it's looking good so far.

00:41:30.159 --> 00:41:33.099
We are 39 percent faster in our recent measurements.

00:41:33.099 --> 00:41:36.759
So again, our performance story
on Leopard is looking spectacular.

00:41:36.760 --> 00:41:41.430
But your next question of course is what runs?

00:41:41.429 --> 00:41:46.980
Well, if you've been to talks in previous years, you
know that we are bringing new enhancements to you

00:41:46.980 --> 00:41:50.269
without much work on your part or any in most cases.

00:41:50.269 --> 00:41:57.769
But we'll reiterate here, everything we spent just to
work all J2SE 5.0 should work great in Intel's 64 bit.

00:41:57.769 --> 00:42:01.670
We want you to try it out on your preview.

00:42:01.670 --> 00:42:06.450
Of course if your application has a little bit
or a medium size bit or a live native code.

00:42:06.449 --> 00:42:11.000
You're going to have to make that native
code run on Intel's 64 bit as well.

00:42:11.000 --> 00:42:16.210
The benefits of job of being transparent,
across transition don't apply to native code.

00:42:16.210 --> 00:42:20.849
But there are simple steps you can do to make
that transition for your native portions.

00:42:20.849 --> 00:42:28.179
For more information about 64 bit in
Leopard, and about 64 bit in native code come

00:42:28.179 --> 00:42:35.509
to the talk later today bring your Java application
to Mac OS X. That's at 330 in Russian Hill.

00:42:35.510 --> 00:42:40.900
( Silence )

00:42:40.900 --> 00:42:44.510
>> Tom: Now let's move on to tool
support in Leopard for Java.

00:42:44.510 --> 00:42:52.650
( Silence )

00:42:52.650 --> 00:43:00.389
>> Tom: We have a lot of great performance goals on
Mac OS X and we have even more great ones on Leopard.

00:43:00.389 --> 00:43:01.650
Going back to Tiger.

00:43:01.650 --> 00:43:03.920
We've had Java support in Shark.

00:43:03.920 --> 00:43:06.490
And if you don't know about Shark, you should check it out.

00:43:06.489 --> 00:43:12.589
It's a great performance tool, including with
Mac OS X with profiles both native and Java code

00:43:12.590 --> 00:43:18.650
and the Java profiling is available
in Java 1.4.2 and in J2SE 5 on Tiger.

00:43:18.650 --> 00:43:21.139
And this continues in Leopard, of course.

00:43:21.139 --> 00:43:25.989
So again, if you haven't checked out Shark, it's a
fantastic tool included with the operating system

00:43:25.989 --> 00:43:29.929
that lets you really target performance in your application.

00:43:31.849 --> 00:43:38.690
Also beginning when we shipped J2SE for Tiger, we picked up
Suns J Console profiling Tools, which are especially useful

00:43:38.690 --> 00:43:41.800
for server and other long running deployment applications.

00:43:41.800 --> 00:43:47.750
And those are also included in Tiger
and continue to be included in Leopard.

00:43:47.750 --> 00:43:51.699
But new in Leopard, you should know about Xray.

00:43:51.699 --> 00:43:59.239
Xray is a new performance tool from Apple that lets you
get the big picture of your applications performance,

00:43:59.239 --> 00:44:04.119
including java applications, we're pleased
to say, because one of the tools you can use

00:44:04.119 --> 00:44:08.339
in Xray is the java threads inspector tool.

00:44:08.340 --> 00:44:14.500
You can use many tools in Xray to understand the overall
picture of your applications performance and customize it

00:44:14.500 --> 00:44:17.079
to what you're trying to find out about performance.

00:44:17.079 --> 00:44:19.340
And this is true for java applications as well.

00:44:19.340 --> 00:44:23.840
Let's take a look at the java threading tool briefly here.

00:44:23.840 --> 00:44:27.780
Here you see running across the
timeline in the middle of the window,

00:44:27.780 --> 00:44:34.280
each java thread in this sample application running,
some are running, some are waiting, some are blocked.

00:44:34.280 --> 00:44:39.330
The two threads in orange red in
the middle of the window are blocked

00:44:39.329 --> 00:44:42.380
because they're contending for a single java lock.

00:44:42.380 --> 00:44:48.650
And you can double click on the threads and find out exactly
what they're contending on and really target the problem.

00:44:48.650 --> 00:44:56.240
Xray is a great tool for understanding performance in
Leopard in applications in general and it's a great tool

00:44:56.239 --> 00:44:59.269
for understanding performance in your java applications.

00:44:59.269 --> 00:45:00.150
So check that out.

00:45:00.150 --> 00:45:02.510
That is on the DVD as well.

00:45:02.510 --> 00:45:11.650
( Applause )

00:45:11.650 --> 00:45:14.230
>> We've improved the support for Ant in X Code.

00:45:14.230 --> 00:45:17.670
New in Leopard, Ant understand build XML files.

00:45:17.670 --> 00:45:23.619
So if you're working on an Ant based project with
others on your team or in a community, you can just drag

00:45:23.619 --> 00:45:29.429
and drop the available XML file into Leopard and it
will understand how to deal with it so you can continue

00:45:29.429 --> 00:45:33.949
to collaborate with other people using Ant based projects.

00:45:33.949 --> 00:45:39.319
In addition to improving Ant support in X Code, we've
also updated the version of Ant that comes with Leopard.

00:45:39.320 --> 00:45:46.850
And we've added two more tools that you, as java
developers, may be interested in, J Unit and Maven,

00:45:46.849 --> 00:45:51.980
are also included in Leopard and they're included
on the DVD that you're getting this week.

00:45:54.320 --> 00:45:55.870
Of course, there's many other tools.

00:45:55.869 --> 00:45:58.489
I told you that there's a lot of great tools for java.

00:45:58.489 --> 00:46:02.199
Some of them are java specific, like
jar bundler for doing basic packaging

00:46:02.199 --> 00:46:04.579
of an application to make it a double clickable.

00:46:04.579 --> 00:46:13.659
We talked about Shark and Xray for performance profiling,
but there's other tools for performance and other analysis

00:46:13.659 --> 00:46:19.589
of your application that are not specific to Java,
but can be used to understand your Java application.

00:46:19.590 --> 00:46:23.050
For example, DTrace and Quartz Debug.

00:46:23.050 --> 00:46:28.600
Quartz Debug would be especially useful in some cases
when you're profiling graphics issues on your application.

00:46:28.599 --> 00:46:30.299
Quartz Debug can help you with that.

00:46:30.300 --> 00:46:36.180
You should look into all of the tools in the
Mac OS X developer tools folder to understand

00:46:36.179 --> 00:46:39.089
which things may be useful to you as Java developers.

00:46:39.090 --> 00:46:41.680
Because it's not just the java tools.

00:46:42.800 --> 00:46:49.980
Of course, if we're talking about tools, all of the
standard java development tools that you're used to,

00:46:49.980 --> 00:46:57.719
and that means Idea and Eclipse run great on Mac OS
X and we continue to work to make that story great.

00:46:57.719 --> 00:47:02.349
Many java developers as we say prefer
Mac OS X as their platform of choice even

00:47:02.349 --> 00:47:04.829
if they're deploying it across multiple environments.

00:47:04.829 --> 00:47:10.509
And we're pleased that the Mac OS X
development story is so strong for Java.

00:47:10.510 --> 00:47:14.630
( Pause in speaking. )

00:47:14.630 --> 00:47:21.880
>> So those are just highlights of some of the top things
that we've changed in Leopard in Java to make it even better

00:47:21.880 --> 00:47:26.539
for you and for your customers running
your applications and other Java code.

00:47:26.539 --> 00:47:28.889
We've also made tons of other improvements.

00:47:28.889 --> 00:47:34.150
We've made over 700 bug fixes so far in Leopard for Java.

00:47:34.150 --> 00:47:35.570
And that's a conservative estimate.

00:47:35.570 --> 00:47:38.760
I cut out some that I didn't count.

00:47:38.760 --> 00:47:42.440
We're doing this to take advantage of
new Leopard features and functionality.

00:47:42.440 --> 00:47:49.450
We're responding to developer and customer reports of things
that they wanted improved, some of them very long standing

00:47:49.449 --> 00:47:51.809
that we're pleased to have fixed in Leopard.

00:47:51.809 --> 00:47:56.940
We're improving overall stability and we talked about
improvements to performance and we're continuing that story.

00:47:56.940 --> 00:47:58.570
We have a lot of just plain bugs.

00:47:58.570 --> 00:48:04.180
We've been fixing those diligently over the past
year and I've very pleased with the team's work

00:48:04.179 --> 00:48:07.509
to make Leopard Java so great at this point.

00:48:07.510 --> 00:48:12.320
( Pause in speaking. )

00:48:12.320 --> 00:48:15.760
>> Tom: Let's talk about the preferred
Java versions for Leopard.

00:48:19.949 --> 00:48:25.869
As I mentioned earlier on Leopard, J2SE 5.0 will be
the preferred Java version where we're focusing most

00:48:25.869 --> 00:48:31.559
of our attention on performance and
stability and other enhancements.

00:48:31.559 --> 00:48:34.659
Java 1.4.2 is still present on Leopard, but it's deprecated.

00:48:34.659 --> 00:48:39.460
And what that means is that it's there,
but we don't suggest that you use it

00:48:39.460 --> 00:48:42.929
or count on it for operating systems after Leopard.

00:48:42.929 --> 00:48:46.469
You can's expect it to be in the next thing after Leopard.

00:48:46.469 --> 00:48:52.339
So you should migrate anything that depends
on Java 1.4.2 specifically to J2SE 5.0.

00:48:52.340 --> 00:48:58.960
and we need to hear from you if there are specific issues
that are keeping you from migrating from Java 1.4.2

00:48:58.960 --> 00:49:04.710
to J2SE 5.0 on Leopard, because
Java 1.4.2's days are numbered.

00:49:04.710 --> 00:49:08.470
The clock ran out on Java 1.3.1 in Leopard.

00:49:08.469 --> 00:49:13.549
Java 1.3.1 was deprecated in Tiger and it
has been completely removed in Leopard.

00:49:13.550 --> 00:49:14.610
It's gone.

00:49:14.610 --> 00:49:17.599
We already gave you warning about that.

00:49:17.599 --> 00:49:22.409
Now we talked a little bit about Java 6 previews.

00:49:22.409 --> 00:49:26.509
Hold that thought for one more second.

00:49:26.510 --> 00:49:31.250
( Pause in speaking. )

00:49:31.250 --> 00:49:36.369
>> Tom: We've made a ton of improvements in
Leopard and we'll recap those highlights again.

00:49:38.489 --> 00:49:43.809
But let's move on to the last step that I had
in the talk, which is something coming up.

00:49:43.809 --> 00:49:44.539
What was coming up?

00:49:44.539 --> 00:49:46.039
Well, I gave it away already.

00:49:46.039 --> 00:49:47.509
It's Java SE 6.

00:49:47.510 --> 00:49:53.850
( Applause )

00:49:53.849 --> 00:49:57.610
>> Tom: We're continuing our developer
previews with DP 7 on Leopard.

00:49:57.610 --> 00:50:02.180
But what's in that preview?

00:50:02.179 --> 00:50:04.029
Well, it's DP 7 on Leopard.

00:50:04.030 --> 00:50:09.470
It runs on the WWC beta that you
get at the conference this week.

00:50:09.469 --> 00:50:14.459
It's in synch with Sun's 1.6 underscore 01 release of Java.

00:50:14.460 --> 00:50:17.309
And it's available today.

00:50:17.309 --> 00:50:23.400
If it's not live right now, it should be live in moments.

00:50:23.400 --> 00:50:28.889
Today, I feel safe saying today.

00:50:28.889 --> 00:50:33.119
But what works?

00:50:33.119 --> 00:50:38.019
We've made a lot of enhancements since DP
6 on Tiger, our last developer preview.

00:50:38.019 --> 00:50:44.050
You should expect, on Leopard in DP 7, bundled
applications, Java web start and command line Java,

00:50:44.050 --> 00:50:48.830
including command line Java that launches
graphical applications all to work in DP 7.

00:50:48.829 --> 00:50:51.059
and you should try those out.

00:50:51.059 --> 00:50:53.599
This preview is Intel 64 bit only.

00:50:53.599 --> 00:50:58.769
So you'll need that hardware to take
advantage of the functionality in DP 7.

00:50:58.769 --> 00:51:04.860
there's many tips in the relief notes that you should
read over to understand how to take the best advantage

00:51:04.860 --> 00:51:10.059
of Developer Preview 7, learn a lot more
about all of the bug fixes that we've made

00:51:10.059 --> 00:51:15.610
since DP 6, and get more tips about how to use DP 7.

00:51:16.860 --> 00:51:24.539
as always with Developer Previews, we actively want you
to report bugs you find, report bugs you find we've fixed,

00:51:24.539 --> 00:51:27.719
and give us your feedback on how DP 7 is working for you.

00:51:27.719 --> 00:51:33.339
You can use bugreporter.apple.com
to report that, as developers.

00:51:33.340 --> 00:51:36.090
You can find that link from the Apple web site.

00:51:37.349 --> 00:51:44.860
Let's talk a preliminary look at the
Java performance numbers for SE 6 DP 7.

00:51:44.860 --> 00:51:54.120
in SciMark, here's our Java 5 performance on our
recent Leopard build and here's the Java 6 performance,

00:51:54.119 --> 00:51:57.179
which is as good as or better in most cases.

00:51:57.179 --> 00:52:03.299
We're continuing to improve this, but right now we're
overall 13 percent faster on this benchmark than Java 5,

00:52:03.300 --> 00:52:06.950
which is a great story for performance in Java 6.

00:52:06.949 --> 00:52:10.359
your next question, of course, is where do I get it?

00:52:10.360 --> 00:52:16.130
Some of you may already know, but it's connect.apple.com,
you should log in with your developer account

00:52:16.130 --> 00:52:18.530
and look in the new Java downloads section.

00:52:18.530 --> 00:52:22.790
And again, if it's not live right at this
second, it should be live really soon today.

00:52:22.789 --> 00:52:29.179
Again, please read over the release notes very carefully
for tips on how to take advantage of this preview.

00:52:29.179 --> 00:52:35.509
And that's Java 6, which we're pleased
to continue previewing on Leopard.

00:52:35.510 --> 00:52:41.190
( Applause )

00:52:41.190 --> 00:52:44.619
>> Tom: Every Java talk needs a pun.

00:52:44.619 --> 00:52:47.940
This is it.

00:52:47.940 --> 00:52:49.260
So, where have we been today?

00:52:49.260 --> 00:52:57.390
Well, we've had an overview of our Java deployment strategy
on Mac OS X and how we work to make it the best place

00:52:57.389 --> 00:53:05.869
for you to develop and the best place for your customers
to run Java applications, applets and other java code.

00:53:05.869 --> 00:53:13.000
We looked at what some java developers are doing on Mac
OS X today and we had two great examples of applications

00:53:13.000 --> 00:53:20.440
that did extra steps to really polish their apps
and stand out on Mac OS X. we gave you pointers

00:53:20.440 --> 00:53:26.250
to two sessions this week, which I'll put up again in a
minute, to help you make your applications great on Mac OS X

00:53:26.250 --> 00:53:32.289
and we want you to keep delivering great java
on Mac OS X. we covered a lot of highlights

00:53:32.289 --> 00:53:36.650
of new things we've added to java in Leopard.

00:53:36.650 --> 00:53:42.230
And we told you about DP 7 for
Leopard, which you can get today.

00:53:42.230 --> 00:53:44.139
So here's those sessions again.

00:53:44.139 --> 00:53:51.710
The Bring Your Java Application To Mac OS X Leopard
talk is this afternoon at three thirty in Russian Hill.

00:53:51.710 --> 00:53:57.570
That contains information about getting your application
off the ground on Mac OS X and doing all the basic things

00:53:57.570 --> 00:54:04.500
to make it look good, have the double clickable
application icon, make the menu bar work.

00:54:04.500 --> 00:54:10.519
And also that's the talk you should go to if you're
interested in learning more about the Intel 64 bit story

00:54:10.519 --> 00:54:16.960
in Leopard so that you can understand how to
take advantage of 64 bit in your dapplication,

00:54:16.960 --> 00:54:19.500
especially if you have pieces of native code.

00:54:19.500 --> 00:54:22.079
Come to that talk for 64 bit information.

00:54:22.079 --> 00:54:30.190
The Advanced Java Development talk tomorrow, at three thirty
in the Marina, is where we'll give you a lot more details

00:54:30.190 --> 00:54:34.130
on how to polish your application, make it really stand out.

00:54:34.130 --> 00:54:38.910
Those tips about how to make your swing
application both great looking on Mac OS X

00:54:38.909 --> 00:54:42.719
and still portable are in that talk, and there's a lot more.

00:54:42.719 --> 00:54:48.079
The SWT embedding updates are gone
into in much more detail in that talk.

00:54:48.079 --> 00:54:50.710
Three thirty tomorrow in the Marina.

00:54:50.710 --> 00:54:54.280
We have two Java labs this week.

00:54:54.280 --> 00:55:03.190
The first one immediately follows this talk is
downstairs on the lab level in the IT Lab at ten thirty.

00:55:03.190 --> 00:55:11.139
Tomorrow at ten thirty in the Mac OS X lab,
section A at ten thirty, we have another Java lab.

00:55:11.139 --> 00:55:15.319
Come to those labs, bring your
applications, bring your questions.

00:55:15.320 --> 00:55:21.210
The Team will be there to talk to you.

00:55:21.210 --> 00:55:25.250
For more information, these are some
major links that you should know.

00:55:25.250 --> 00:55:29.199
Matt (inaudible) is our evangelist who covers our area.

00:55:29.199 --> 00:55:34.049
For documentation and all the other resources, you
probably already know about the developers site,

00:55:34.050 --> 00:55:36.760
in addition to the WWDC portion of the site.

00:55:36.760 --> 00:55:44.840
There's many other resources and documentation, technical
notes, and other information for you as a java developer.

00:55:46.369 --> 00:55:51.019
If you're a java developer on Mac OS X and you
don't already know about Java Dev, you should.

00:55:51.019 --> 00:55:58.769
Java Dev is a mailing list with a community of java
developers on Mac OS X who are trading information about how

00:55:58.769 --> 00:56:04.920
to make the best use of Java on Mac OS X and
we're pleased to participate in that community.