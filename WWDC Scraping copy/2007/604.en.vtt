WEBVTT

00:00:10.019 --> 00:00:11.390
>> Thank you everyone for coming out.

00:00:11.390 --> 00:00:16.070
Welcome to the Content and Media Track
on the Content and Media Track DRI.

00:00:16.070 --> 00:00:17.449
My name is George Areola.

00:00:17.449 --> 00:00:21.059
I'm one of the senior project line
managers for OS X product marketing.

00:00:21.059 --> 00:00:30.689
It is my absolute pleasure to kick this portion of the
track off, which we're going to be dealing with more design,

00:00:30.690 --> 00:00:40.140
Cocoa and web related sessions and we have the distinguished
honor of having Kelly Goto, principal of gotomedia

00:00:40.140 --> 00:00:45.820
and Garrett Murray, senior developer of Blue Flavor,
to give an interesting and in depth presentation

00:00:45.820 --> 00:00:48.070
on iterative Cocoa and web application development.

00:00:48.070 --> 00:00:57.030
So at this time, please give a large and loud round
of applause for Kelly Goto who'll kick things off.

00:00:57.030 --> 00:00:58.460
Thank you.

00:00:58.460 --> 00:00:58.539
( applause )

00:00:58.539 --> 00:01:00.030
>> Thanks George.

00:01:00.030 --> 00:01:02.380
Thanks you guys for getting up so early.

00:01:02.380 --> 00:01:07.140
Well you know, just to start off, it's kind of interesting
because Garrett and I come from different spectrums

00:01:07.140 --> 00:01:10.790
and I'm gonna approach this a little
more as the project manager type.

00:01:10.790 --> 00:01:14.740
The person that's dealing with enterprise size teams,
and I just wanted to get a quick show of hands,

00:01:14.739 --> 00:01:21.560
how many of you guys are here representing a large
team that has to deal with Legacy systems or roll outs

00:01:21.560 --> 00:01:25.700
of application development over time? How
many of your are enjoying your job right now?

00:01:25.700 --> 00:01:29.210
Okay, now how many of you represent
the independent developer

00:01:29.209 --> 00:01:33.029
and you're here just kinda doing
cowboy coding and cutting it out?

00:01:33.030 --> 00:01:38.500
Yeah? Okay, so we've got a little bit of a half and
half here and we hope this session is fulfilling for all

00:01:38.500 --> 00:01:43.890
of you because, there's gonna be things that you say duh,
I know that, but just like vegetables and working out,

00:01:43.890 --> 00:01:48.719
you know you're supposed to be doing these things
right and so we wanna make sure that we reiterate some

00:01:48.719 --> 00:01:52.870
of the key points and tools and tips that
we think are very important in this process.

00:01:52.870 --> 00:01:59.760
So just to get started this whole theme in the last year,
maybe even more has been innovation and it's interesting

00:01:59.760 --> 00:02:04.750
because I look left and right and see covers, this is a
cover that I picked up on an airplane coming into town.

00:02:04.750 --> 00:02:07.909
Newsweek you know just, Business Week,
everything innovation, innovation, innovation.

00:02:07.909 --> 00:02:13.569
Of course, Apple is at the top all the time and what
are the secrets that these companies that innovate?

00:02:13.569 --> 00:02:15.019
What are they doing?

00:02:15.020 --> 00:02:18.610
How are they actually succeeding in this space?

00:02:18.610 --> 00:02:23.690
Now there's a couple things that come up, but one
of them is really about listening to your customers.

00:02:23.689 --> 00:02:29.359
So the other key thing that I'm gonna try and convey as
I'm speaking quickly in the first part of this session,

00:02:29.360 --> 00:02:31.280
is that you need to listen to your customers.

00:02:31.280 --> 00:02:37.640
Now once again, you know this, right, but how many
of you actually get out there and undergo either one

00:02:37.639 --> 00:02:41.519
on one interviews or usability tests
with your customers on a regular basis?

00:02:41.520 --> 00:02:43.290
Please raise your hand.

00:02:43.289 --> 00:02:49.009
So for the rest of you, as a take away, please
remember that one of the goals is to iterate

00:02:49.009 --> 00:02:52.699
within their customers' space and continue to get feedback.

00:02:52.699 --> 00:02:58.949
This is kind of a great quote by the guy who start 3M
and he's not started 3M, but he works for 3M, and he said,

00:02:58.949 --> 00:03:03.219
we listen carefully to what our customers
didn't say and observed what they did.

00:03:03.219 --> 00:03:08.359
So this is the other key thing, is that as we get
into lifestyle design, we're not just designing

00:03:08.360 --> 00:03:13.420
for the web anymore, we're not just designing applications,
we're not designing just for kiosks or for mobile phones,

00:03:13.419 --> 00:03:19.969
we're just designing for a lifestyle experience and so
more and more, we need to get into the actual mindset

00:03:19.969 --> 00:03:23.289
of your customers and understand how they really live.

00:03:23.289 --> 00:03:27.069
And that's the other key thing that
I wanna leave you as a take away.

00:03:27.069 --> 00:03:34.159
So just you know, some convergent technologies as you've got
Apple merging with Utube, we've got content that's coming

00:03:34.159 --> 00:03:36.520
from different places and shapes and forms.

00:03:36.520 --> 00:03:41.950
We have to think about placelessness and that's kind
of a fun term that we're dealing with these days,

00:03:41.949 --> 00:03:46.909
is you're not just dealing with
people sitting at their desks anymore.

00:03:46.909 --> 00:03:51.590
You're dealing with people that are gonna be
watching your content at home, on the fly,

00:03:51.590 --> 00:03:54.930
on the road, on their phones and in every which way.

00:03:54.930 --> 00:03:58.349
There's also a lot of match ups going
on in the 2.0 environment,

00:03:58.349 --> 00:04:03.719
not to belabor that because we've been hearing it hammered
over and over this 2.0 world, what's going on.

00:04:03.719 --> 00:04:09.539
But Google keeps announcing new ways and shapes and
forms of allowing us to access our content in new

00:04:09.539 --> 00:04:14.019
and interesting ways and we keep passing
the bar and keep going up and up and up.

00:04:14.020 --> 00:04:15.270
Well what's next?

00:04:15.270 --> 00:04:21.590
How do we actually integrate these products and services
in a way that's gonna make our lives smoother and easier?

00:04:21.589 --> 00:04:24.519
Because we're actually not trying to complicate it so much.

00:04:24.519 --> 00:04:28.240
So this is a diagram that we came
up with about lifestyle design.

00:04:28.240 --> 00:04:32.180
Now the goal is really to be lifestyle
driven, exceed expectations.

00:04:32.180 --> 00:04:38.240
But often times, you have these pesky investors or
business drivers that make you hurry up a little bit faster

00:04:38.240 --> 00:04:40.900
and generally you have an app that's
ready to launch but I don't know

00:04:40.899 --> 00:04:43.819
if it's ready to hit mainstream or if it looks great.

00:04:43.819 --> 00:04:48.259
Now the goal with iterative development is
to move up the scale towards the end result

00:04:48.259 --> 00:04:55.750
which is lifestyle oriented design that iterate
carefuller during the process and I have to say that we

00:04:55.750 --> 00:05:03.680
like to evoke a lot of usability testing, contextual inquiry
and research into the process until we get to this point

00:05:03.680 --> 00:05:07.350
where you hit lifestyle driven
design and that's really the goal.

00:05:07.350 --> 00:05:13.520
It's not just to make something useful or easy to learn,
but it's to really effect people so that they want to,

00:05:13.519 --> 00:05:18.049
they encourage people to use things because
they desire to use it, because it's fun.

00:05:18.050 --> 00:05:19.430
Because it's friendly.

00:05:19.430 --> 00:05:21.470
Because it's easy and it's simple.

00:05:21.470 --> 00:05:24.620
Getting to that point is pretty challenging.

00:05:24.620 --> 00:05:29.720
So I kind of talk a lot about research
and we do that a lot at our office

00:05:29.720 --> 00:05:33.420
and we started off just by talking
to people and that's great.

00:05:33.420 --> 00:05:37.270
Talking is good, going out there, doing focus groups.

00:05:37.269 --> 00:05:43.089
I don't actually have any bad, anytime you can get
feedback from customers is good, but we generally stay away

00:05:43.089 --> 00:05:46.169
from focus groups because we're just
kinda getting people's opinions.

00:05:46.170 --> 00:05:50.720
Now how many people wash their
hand when you leave a bathroom?

00:05:50.720 --> 00:05:51.860
Excellent.

00:05:51.860 --> 00:05:54.180
Well that's a focus group.

00:05:54.180 --> 00:05:58.879
You guys think you wash your hands, but when you're hurrying
to get into this session it's like oh no the line's long,

00:05:58.879 --> 00:06:03.659
you'll run in, they'll have a camera in there and
actually you know, four out of five people do

00:06:03.660 --> 00:06:05.370
or three out of four or something like that.

00:06:05.370 --> 00:06:10.060
So what you think you might do
in a situation, is a focus group.

00:06:10.060 --> 00:06:13.899
So taking it to the next stage, asking
questions, okay interviews, fantastic.

00:06:13.899 --> 00:06:18.769
Any time you can get in front of your audience,
ask questions, one on one is way better.

00:06:18.769 --> 00:06:23.870
You're actually getting some questions now, getting
into a little bit more contextual questioning is better

00:06:23.870 --> 00:06:27.579
because you're actually sitting with
them at their desks or at their workplace

00:06:27.579 --> 00:06:29.699
or even at a cafe where they might be working.

00:06:29.699 --> 00:06:31.439
That's really great.

00:06:31.439 --> 00:06:33.719
The next stage is really watching.

00:06:33.720 --> 00:06:38.380
Watching people as they go through their daily
routines, spending a little bit more time with them,

00:06:38.379 --> 00:06:43.600
understanding why is this project or service that
I'm trying to launch, why is this important to them.

00:06:43.600 --> 00:06:48.230
So many times we assume that our website
is bookmarked, is the person's homepage.

00:06:48.230 --> 00:06:52.750
But as we get into a little bit more detail,
we realize, oh, they have thirty bookmarks.

00:06:52.750 --> 00:06:56.170
This is not the first thing they do when
they sit down at their desk every morning.

00:06:56.170 --> 00:07:01.600
We wanna actually observe and find out what they're
doing, which is this, which is ethnography.

00:07:01.600 --> 00:07:07.320
Now it's not true ethnography, I'm not a PhD
in cognitive psychology or in social science,

00:07:07.319 --> 00:07:15.240
but what we try to do is introduce methods that are quick
and easy and can be iterated quickly into the life cycle

00:07:15.240 --> 00:07:20.220
of the product or service that you're launching over time,
so that you're actually getting into these people's lives

00:07:20.220 --> 00:07:23.950
and this is just a quick snapshot of
a study that we did on mobile devices

00:07:23.949 --> 00:07:26.189
and this is the, you know, Singapore site of it.

00:07:26.189 --> 00:07:31.629
But we actually did a study recently where we were in
Finland, we were in Singapore, and we were in the US

00:07:31.629 --> 00:07:38.560
and we were actually watching and learning over a one day
period and then we followed up with a five day photo diary

00:07:38.560 --> 00:07:43.250
where the people took pictures and recorded their
thoughts and then we follow up with a two hour interview

00:07:43.250 --> 00:07:47.629
and you know, within one week you can get a
snap shot of global products and services.

00:07:47.629 --> 00:07:52.560
Now how many of you guys are actually
releasing things that are outside of the US?

00:07:52.560 --> 00:07:53.420
So it's interesting.

00:07:53.420 --> 00:07:59.770
More and more of us are getting to that point and so we
need to think about outside US thinking and it's really hard

00:07:59.769 --> 00:08:06.659
because we're so used to the way we do things, but even in
a place like Japan or China, if you have a wireless device

00:08:06.660 --> 00:08:11.250
that goes within your house, how big is a house in the US?

00:08:11.250 --> 00:08:13.689
Twenty two hundred square feet, something like that.

00:08:13.689 --> 00:08:18.430
And if you go into Japan or China, the size of
a person's household is about a quarter of that.

00:08:18.430 --> 00:08:20.870
And so you have to start thinking
about things also about desktop.

00:08:20.870 --> 00:08:22.930
We have desktop metaphors, well they don't have that.

00:08:22.930 --> 00:08:25.079
They use their kitchen in different ways.

00:08:25.079 --> 00:08:32.889
So it's very interesting to get context around the products
and services that you're creating because your head's

00:08:32.889 --> 00:08:40.509
down into code and you need to look up and actually
watch and observe people using your products or devices.

00:08:40.509 --> 00:08:47.000
So what we try and evoke is this combining
of agile and user centered design.

00:08:47.000 --> 00:08:52.909
UCD is a you know, an acronym of user centered design
and really the goal is to merge those two practices.

00:08:52.909 --> 00:08:57.199
And I don't know how many of you guys
are you know, currently kind of working

00:08:57.200 --> 00:09:00.430
in an agile environment, any of you guys?

00:09:00.429 --> 00:09:03.729
Agile you know and Scrub, any
of you guys using Scrub right now?

00:09:03.730 --> 00:09:06.830
Any of you guys you know, just sort of winging it?

00:09:06.830 --> 00:09:10.790
So you know, we're gonna get into, Garrett's
gonna get into process a lot more but,

00:09:10.789 --> 00:09:15.199
we don't really care what process you use, just as
long as you're using it to communicate effectively

00:09:15.200 --> 00:09:19.190
with your team and also outside into you customer base.

00:09:19.190 --> 00:09:26.900
So whatever process you use and whatever you can do to
create a way of iterating through the normal process

00:09:26.899 --> 00:09:33.039
of agile, which is to do things within a short time
frame, to keep your features and specifications light

00:09:33.039 --> 00:09:39.279
so that you can actually execute, to keep your documentation
low and at the same time you are gathering input

00:09:39.279 --> 00:09:42.360
from your customers in every way, shape or form.

00:09:42.360 --> 00:09:46.710
Recently we did an interface for a Japanese client
and it was a product that was released in Japan

00:09:46.710 --> 00:09:49.700
and all over the world and they came
to us and they said, you know Kelly,

00:09:49.700 --> 00:09:53.100
we'd love to do testing in America and we said great.

00:09:53.100 --> 00:09:57.519
You know, you know, we can recruit all
these moms and grandmas and do all this,

00:09:57.519 --> 00:09:59.289
we said why in America when you're global?

00:09:59.289 --> 00:10:03.549
And he says well, you guys are
the lowest common denominator.

00:10:03.549 --> 00:10:07.699
So we figure if you can use it in
America, you can use it anywhere.

00:10:07.700 --> 00:10:11.610
So that's great, because you know, we
can return anything anytime, you know,

00:10:11.610 --> 00:10:13.850
we don't read instructions, all kinds of things.

00:10:13.850 --> 00:10:15.220
So it sort of turns out good.

00:10:15.220 --> 00:10:19.259
Now what we did with them is they had a
life cycle of eight month development period

00:10:19.259 --> 00:10:21.179
and they still had a product to roll out.

00:10:21.179 --> 00:10:24.339
Now this was a hard product, this wasn't
something that could iterate over time

00:10:24.340 --> 00:10:27.399
as a launch, soft launch or an application online.

00:10:27.399 --> 00:10:34.110
And what we ended up doing is we iterated seven rounds of
prototyping and testing, usability testing with five people,

00:10:34.110 --> 00:10:40.560
over a seven week period, seven times and then the eighth
week we handed off our specifications to their team.

00:10:40.559 --> 00:10:45.869
Now I'm not saying each of you can do that, it was a
lot of work and we had people running around like crazy,

00:10:45.870 --> 00:10:51.450
but we did the slam end user feedback
during that very short cycle,

00:10:51.450 --> 00:10:54.920
knowing that we couldn't push it,
push it, push it way out by months.

00:10:54.919 --> 00:11:01.229
And after the project ended, our Japanese client came
to us and said, you've really changed the way we think

00:11:01.230 --> 00:11:03.870
about our process and we're gonna
do things differently from now on.

00:11:03.870 --> 00:11:06.659
So that was pretty effective.

00:11:06.659 --> 00:11:09.189
So today we have designers here.

00:11:09.190 --> 00:11:10.860
We have developers here.

00:11:10.860 --> 00:11:15.830
You know in the old world before CSS really came
out, we used to have designers and coders that lived

00:11:15.830 --> 00:11:22.770
in different spaces and places, but really what we're
merging towards more and more is a hybrid and Garrett is one

00:11:22.769 --> 00:11:28.960
of those hybrid designer, developer types that's able to
think, but if you guys have a large team or even a small team

00:11:28.960 --> 00:11:35.269
where you have to take the design side, the UCD, user center
design principles, and merge it with a development practice,

00:11:35.269 --> 00:11:38.740
we need to think about communicating
in a new and different way.

00:11:38.740 --> 00:11:43.919
And that's also why iteration and process is so
important, whatever process that you pick, because,

00:11:43.919 --> 00:11:49.229
you need to communicate effectively with people
that think very differently than yourselves.

00:11:49.230 --> 00:11:55.320
So it's an interesting conundrum that we're facing these
days, as we get into rich application design and development

00:11:55.320 --> 00:11:59.410
and we start to move towards this
new era of you know, 2.0.

00:11:59.409 --> 00:12:03.829
We don't call it 2.0, I'm calling
it now web nouveau and web passe.

00:12:03.830 --> 00:12:06.509
Because I don't really like the term 2.0.

00:12:06.509 --> 00:12:10.450
But anyway, you kind of have this rich
application development and that's really the goal.

00:12:10.450 --> 00:12:19.450
So the end result is to think about your process as
merging the best of user center design principles

00:12:19.450 --> 00:12:28.410
with agile development, iterating all along that life cycle
and then coming up with a new process all along the way.

00:12:28.409 --> 00:12:34.529
So that's sort of the take away, the beginning that I
wanna get into from a high level and have you understand

00:12:34.529 --> 00:12:39.740
that there's many, many ways to skin a cat
right, there's many ways to approach this.

00:12:39.740 --> 00:12:45.289
But what we would like to leave partially
with you and Garrett has a lot more to say,

00:12:45.289 --> 00:12:49.539
is we want you to get feedback from your customers.

00:12:49.539 --> 00:12:56.199
We want you to iterate and not do as much documentation
but, to still during that time period communicate clearly

00:12:56.200 --> 00:13:02.800
with your team, and in the end, evoke a process that's gonna
work within your organization or within your own mentality

00:13:02.799 --> 00:13:06.139
so that you can create the correct
kind of products and services

00:13:06.139 --> 00:13:09.120
that are gonna merge with people's actual lifestyles.

00:13:09.120 --> 00:13:11.289
So that's my take away.

00:13:11.289 --> 00:13:17.839
And so I'd like to introduce Garrett, a rock star and
Garrett has a podcast too, which I encourage you guys all

00:13:17.840 --> 00:13:21.019
to listen to but, he's gonna talk about process.

00:13:21.019 --> 00:13:22.189
>> Thank you.

00:13:22.190 --> 00:13:28.540
( applause )

00:13:28.539 --> 00:13:29.839
Yes, I'm gonna start with process.

00:13:29.840 --> 00:13:31.629
Good morning.

00:13:31.629 --> 00:13:35.809
So Kelly talked a lot about thinking
kind of in a different way about products

00:13:35.809 --> 00:13:38.869
and this lifestyle driven development
and really thinking about your users.

00:13:38.870 --> 00:13:42.909
I'm gonna hit a lot on thinking,
which is kind of a weird thing to say.

00:13:42.909 --> 00:13:47.899
But I'm gonna talk a lot about thinking a little
bit differently about how we develop applications,

00:13:47.899 --> 00:13:56.590
how we develop software, who we're developing for and
kind of how iteration can make this process a lot easier.

00:13:56.590 --> 00:14:02.980
Now, part of this is a little bit of a buzz
thing and everybody here I'm sure has heard agile

00:14:02.980 --> 00:14:06.730
about five million times in the last year.

00:14:06.730 --> 00:14:12.850
And things like getting real and so there is a
lot of buzz and it can be a little bit you know,

00:14:12.850 --> 00:14:17.470
when you start to consider should I change
my process to fit these more agile methods,

00:14:17.470 --> 00:14:20.230
am I signing onto something that's more buzz driven?

00:14:20.230 --> 00:14:24.629
And the reality is there is buzz, but if you
cut through it, you can get a lot of stuff done.

00:14:24.629 --> 00:14:28.480
So we're gonna talk a little bit
about process to begin with here.

00:14:29.629 --> 00:14:32.939
We'll start off with the waterfall.

00:14:32.940 --> 00:14:36.270
So how many of you are familiar with Waterfall?

00:14:36.269 --> 00:14:38.449
Okay so everyone.

00:14:38.450 --> 00:14:39.450
That's good.

00:14:39.450 --> 00:14:40.700
So a lot of people use the waterfall.

00:14:40.700 --> 00:14:46.490
Waterfall's a really common methodology, very commonly
used, especially in large teams and so we talk

00:14:46.490 --> 00:14:49.090
about the waterfall, we talk about this pattern right here.

00:14:49.090 --> 00:14:52.680
We're talking about requirements, design,
implementation, verification, maintenance.

00:14:52.679 --> 00:14:55.549
And the waterfall is, it can be successful.

00:14:55.549 --> 00:14:57.649
People use this all the time, it's very common.

00:14:57.649 --> 00:15:02.769
So when we talk about iterative development, we start
to talking about what's wrong with current processes.

00:15:02.769 --> 00:15:05.840
When we're using the waterfall, what
are the problems that we encounter?

00:15:05.840 --> 00:15:09.440
And the most common problems that I've
found using waterfall and that I've heard

00:15:09.440 --> 00:15:14.440
from other people is that waterfall
is locked into absolutes.

00:15:14.440 --> 00:15:19.610
It's locked into long term planning and I don't know
about any of you, but I'm a terrible long term planner.

00:15:19.610 --> 00:15:22.519
Especially when it comes to work.

00:15:22.519 --> 00:15:23.490
Work changes all the time.

00:15:23.490 --> 00:15:27.860
So when we plan a whole development
cycle, when we plan a whole design cycle,

00:15:27.860 --> 00:15:32.110
we plan a whole implementation
cycle, we're making a lot of plans.

00:15:32.110 --> 00:15:38.600
So when we go through this app, what happens if during
verification, we've got our full app, it's beautiful,

00:15:38.600 --> 00:15:41.970
it's been designed and we're in
verification and somebody says, you know,

00:15:41.970 --> 00:15:45.830
this doesn't work the way we had
planned or something didn't go right.

00:15:45.830 --> 00:15:47.389
So what do we do?

00:15:47.389 --> 00:15:49.460
What's, what's the, what do we do now?

00:15:49.460 --> 00:15:53.700
Well a lot of the problem with the waterfall is it
requires now that we go back to teams that are probably

00:15:53.700 --> 00:15:58.770
on different projects that have finished their work
and we have to redo a lot of work and it's, it's,

00:15:58.769 --> 00:16:01.559
it's a waterfall effect quite literally even in this case.

00:16:01.559 --> 00:16:07.769
Because when we go back to requirements and we make
changes, we affect design, we affect implementation

00:16:07.769 --> 00:16:10.829
and we are not guaranteed these
resources even to begin with.

00:16:10.830 --> 00:16:14.070
These people may be on a different project and
on top of that, we're redoing a lot of work.

00:16:14.070 --> 00:16:19.320
So it's dangerous to have, to make everything one big plan.

00:16:19.320 --> 00:16:24.580
And the truth of the matter is and what I'm getting at
is you can't plan for everything and what this means,

00:16:24.580 --> 00:16:30.009
quite literally, is that your plan are
very rarely equal to your users' plans.

00:16:30.009 --> 00:16:35.439
And things are very rarely equal to the way
that you thought they'd be six months ago

00:16:35.440 --> 00:16:39.760
and your client's preferences almost
never equal yours in the long term.

00:16:39.759 --> 00:16:45.080
You know, your preferences when you're developing an
application or you're making a large scale website,

00:16:45.080 --> 00:16:47.610
you preference is to have a good product.

00:16:47.610 --> 00:16:51.620
You're gonna develop a good application, you're
gonna develop good code, you're gonna do a great job

00:16:51.620 --> 00:16:53.230
and you're gonna give it to the client
and the client's gonna be happy.

00:16:53.230 --> 00:16:55.060
Your business is development.

00:16:55.059 --> 00:16:56.879
Your business is application development.

00:16:56.879 --> 00:16:59.509
You client's business might be yoyos, you know.

00:16:59.509 --> 00:17:03.679
So as far as their concerned, all
they care about is selling yoyos.

00:17:03.679 --> 00:17:08.109
So when you are looking at your development
cycle and you're saying this is going perfectly,

00:17:08.109 --> 00:17:12.089
your client might be saying you know, we're not
selling enough yoyos with the work you're doing.

00:17:12.089 --> 00:17:18.730
So your preferences are not, you're not aligned and even
when you try to align your preferences, it's impossible.

00:17:18.730 --> 00:17:23.349
Because you have different goals and your goals are to
develop different product and their goal's to sell yoyos.

00:17:23.349 --> 00:17:30.379
And your plans are never equal to your user's plans and I
know that this happens all the time, especially in software

00:17:30.380 --> 00:17:34.640
and non-web application development, is that people
use your apps for things you never thought you would.

00:17:34.640 --> 00:17:39.290
You know, people will release, spend a year on an app,
release it and all of a sudden they'll get feedback

00:17:39.289 --> 00:17:41.879
from people saying this doesn't
work the way I thought it did

00:17:41.880 --> 00:17:44.250
and the immediate reaction is well
you're not using it the right way.

00:17:44.250 --> 00:17:49.829
But then what you realize is it may not be the right way,
it may be totally different than your users may use it.

00:17:49.829 --> 00:17:55.250
Your users you know, you may provide an Apple
Script support and they may start doing crazy things

00:17:55.250 --> 00:17:57.170
with your app and asking you for support.

00:17:57.170 --> 00:18:01.680
So if you plan that everything's gonna be peachy
and from the beginning it's all gonna be right,

00:18:01.680 --> 00:18:04.860
then you're gonna find yourself in a bad situation.

00:18:04.859 --> 00:18:09.289
So this hits on assumptions and
assumptions are a big part of development.

00:18:09.289 --> 00:18:11.960
It's a requirement you know.

00:18:11.960 --> 00:18:17.549
We write specs, we do RFP's, we talk to
clients, a lot of assumptions are made.

00:18:17.549 --> 00:18:21.480
And there's a big difference between
safe assumptions and unsafe assumptions.

00:18:21.480 --> 00:18:23.940
So we'll talk about some unsafe assumptions.

00:18:23.940 --> 00:18:26.480
The database won't change right.

00:18:26.480 --> 00:18:27.480
Everything's gonna be great.

00:18:27.480 --> 00:18:31.319
You know, I spent a week on this
database and it's sweet right.

00:18:31.319 --> 00:18:35.509
I got like fifty tables and it's perfect and then
I'm perfect that's it, I never have to do it again.

00:18:35.509 --> 00:18:37.740
That's a crazy assumption and still happens all the time.

00:18:37.740 --> 00:18:40.230
I've made this mistake plenty of times.

00:18:40.230 --> 00:18:41.660
Features are locked is another assumption.

00:18:41.660 --> 00:18:46.570
Well we've got 1 point 0 set, got like twenty pages of
documentation, so there's no way anything's gonna change.

00:18:46.569 --> 00:18:49.000
At least not until your user sees it.

00:18:49.000 --> 00:18:51.470
There's gonna be five users.

00:18:51.470 --> 00:18:52.870
The scalability is a huge assumption.

00:18:52.869 --> 00:18:56.209
Like oh, well this is an app design for a small
internal team, so it'll never get any bigger.

00:18:56.210 --> 00:19:00.549
Well what happens if the you know, the company starts
selling lots of yoyos, I'm gonna keep hitting on that

00:19:00.549 --> 00:19:03.329
by the way, keeps selling lots of yoyos
and then their team gets much bigger.

00:19:03.329 --> 00:19:08.509
You can't assume that it's gonna be a five user
app and of course you can't assume softwarewise

00:19:08.509 --> 00:19:10.500
that you're always gonna be using something like Apache.

00:19:10.500 --> 00:19:14.960
If this app is dependent on one
thing, it's an unsafe assumption.

00:19:14.960 --> 00:19:16.809
And then of course there are safe assumptions.

00:19:16.809 --> 00:19:18.299
There is gonna be a database.

00:19:18.299 --> 00:19:22.740
If you're developing a web app, this is almost
guaranteed that there's probably these days,

00:19:22.740 --> 00:19:26.650
gonna be a database in a web app and since there's
probably gonna be some sort of an administration section,

00:19:26.650 --> 00:19:30.890
you're probably gonna have many users, maybe
many more than you believed that you would have

00:19:30.890 --> 00:19:35.630
and it may be a safe assumption as well, as to say
you're probably gonna use all open source tools right.

00:19:35.630 --> 00:19:40.890
Almost always, especially now, you
can pretty much guarantee that.

00:19:40.890 --> 00:19:45.310
So what we're driving at here is
the core iterative development.

00:19:45.309 --> 00:19:50.690
We've talked about processors, talked about the waterfall,
but there are many processes for iterative development.

00:19:50.690 --> 00:19:55.830
In fact, when I was doing research for some of the
processors here, I was actually amazed to find you know,

00:19:55.829 --> 00:19:59.539
thirty, forty common process models
developed for iterative development.

00:19:59.539 --> 00:20:03.250
But there is a core that we're
driving at here and it's three parts.

00:20:03.250 --> 00:20:07.509
It's planning, which is requirements, analysis and design.

00:20:07.509 --> 00:20:13.750
And then there is a broken, there we
go, then there's development right.

00:20:13.750 --> 00:20:17.160
So this is the implementation and the
deployment and deployment's a big part of this.

00:20:17.160 --> 00:20:21.850
Development in this case also includes pushing
this out to users, to testers and then of course

00:20:21.849 --> 00:20:23.740
that gets to testing, which is evaluation.

00:20:23.740 --> 00:20:26.690
Now this in and of itself, is kind of like the waterfall.

00:20:26.690 --> 00:20:31.220
You've gotta you know, you've got a pattern,
you're doing things in a processed way,

00:20:31.220 --> 00:20:34.860
but what's key about this is that it's cyclical.

00:20:34.859 --> 00:20:40.109
Okay? So we're not talking about planning everything
and we're not talking about developing everything,

00:20:40.109 --> 00:20:44.209
we're not talking about testing everything, what we're
talking about is focusing on one thing at a time.

00:20:44.210 --> 00:20:46.850
One or a few, very few things at a time.

00:20:46.849 --> 00:20:53.679
We're talking about working on it in a cyclical pattern,
planning, developing, testing, releasing to users, testing,

00:20:53.680 --> 00:20:57.190
testing, testing, feedback, more
planning, development testing.

00:20:57.190 --> 00:21:04.170
And so there's many versions of this process, but the core
of this is that we're gonna focus on one thing at a time.

00:21:04.170 --> 00:21:10.370
And this is kind of one of the important parts, is that
people are why process fails and what this means is

00:21:10.369 --> 00:21:15.779
that if you have fifty people planning one
project, everybody's got different ideas of that.

00:21:15.779 --> 00:21:19.740
And so what being agile is, is it's about being flexible.

00:21:19.740 --> 00:21:25.359
Your customers are gonna change their minds about
things, you boss is gonna change his mind about things,

00:21:25.359 --> 00:21:27.319
if it's just you, you're gonna
change your mind about things.

00:21:27.319 --> 00:21:31.109
If you're anything like me, you're probably gonna
change how you're doing it several times alone,

00:21:31.109 --> 00:21:33.299
just because you feel like oh,
I found a better way to do this.

00:21:33.299 --> 00:21:38.980
Things are gonna change, it's inevitable and
attempting to plan and hope that things won't change,

00:21:38.980 --> 00:21:42.740
is gonna get you into a situation
where you're out of options.

00:21:42.740 --> 00:21:48.529
So if people are why process fails, then we have
to create processes that take into account the fact

00:21:48.529 --> 00:21:50.849
that these are people, right, that we're dealing with people.

00:21:50.849 --> 00:21:53.559
We're all people and everything's gonna change.

00:21:53.559 --> 00:21:59.909
So what's great about, excuse me, iterative
development, is that it allows for narrow scope.

00:21:59.910 --> 00:22:01.940
Okay and narrow scope is key here.

00:22:01.940 --> 00:22:07.019
And when you break things down into small
pieces, they're easier to accomplish right.

00:22:07.019 --> 00:22:11.579
So as far as I'm concerned, focusing
on things to me, equals productivity.

00:22:11.579 --> 00:22:15.029
I get a lot more done when I'm focusing on
small things and I'm doing a lot of them.

00:22:15.029 --> 00:22:19.509
And productivity equals profit and profit equals
vacations, which is kind of the goal right.

00:22:19.509 --> 00:22:24.839
Like I wanna go to Italy, I don't wanna sit in
front of my computer twenty four hours a day.

00:22:24.839 --> 00:22:31.019
And I think Apple requires that I say not
a guarantee on vacations, because it's not.

00:22:31.019 --> 00:22:37.400
But the point here is that you, allowing for narrow scope
and focusing on one thing at a time, allows you to get a lot

00:22:37.400 --> 00:22:42.690
of work done that may be overwhelming when you
sit and you say I've got, here's my entire spec,

00:22:42.690 --> 00:22:47.440
here's everything I have to do within the next
few months and when you break things down,

00:22:47.440 --> 00:22:51.029
suddenly it's a lot easier to accomplish things.

00:22:51.029 --> 00:22:52.690
So ways to iterate.

00:22:52.690 --> 00:23:01.120
We're talking about the iterative development core,
we've also talked about processes and there are a lot.

00:23:01.119 --> 00:23:04.169
Like I said, million might be a
little high, but it's kinda close.

00:23:04.170 --> 00:23:07.930
So I'm gonna click through a couple of these
and I'm, some of you may have seen these before,

00:23:07.930 --> 00:23:14.570
some of you may not, cleanroom, RAD, I like that name.

00:23:14.569 --> 00:23:18.609
Spiral, I think a lot of people have heard of before.

00:23:18.609 --> 00:23:20.399
RUP, I think is how you pronounce that, I'm not sure.

00:23:20.400 --> 00:23:22.540
It sounds very scientific.

00:23:22.539 --> 00:23:26.720
XP is very common thing talked about when
you talk about iterative development.

00:23:26.720 --> 00:23:31.880
XP as in extreme programming not as in Windows
XP, which I don't think was done iteratively.

00:23:31.880 --> 00:23:33.320
I'm pretty sure.

00:23:33.319 --> 00:23:34.470
( laughter )

00:23:34.470 --> 00:23:37.440
You would see some of that stuff
while you were testing right.

00:23:37.440 --> 00:23:40.250
And scrum which is also and Kelly hit on scrum.

00:23:40.250 --> 00:23:44.559
Scrum is actually kind of becoming very popular and scrum's
an interesting one and I'm not gonna talk a lot about it.

00:23:44.559 --> 00:23:47.879
We can get to it in Q and A maybe if we have time.

00:23:47.880 --> 00:23:54.130
And then there's cowboy coding right, which is
like going nuts, I love that animation by the way.

00:23:54.130 --> 00:23:58.190
I spent like three hours on that.

00:23:58.190 --> 00:23:59.180
It's difficult.

00:23:59.180 --> 00:24:00.560
So cowboy coding is really fun.

00:24:00.559 --> 00:24:06.289
Because you just don't think about anything right, you just
go oh, here's version 2, here's version 3, here's version 4,

00:24:06.289 --> 00:24:09.629
your user's are like, what the hell's happening.

00:24:09.630 --> 00:24:13.400
( laughter )
You know, like the testing part of it is almost people
going stop, stop, stop, I can't figure this out.

00:24:13.400 --> 00:24:14.480
( laughter )

00:24:14.480 --> 00:24:17.700
You change things like twice a day and you don't even
know what's happening sometimes, so you look at your code

00:24:17.700 --> 00:24:19.519
and you're like what was I doing yesterday.

00:24:19.519 --> 00:24:22.549
Cowboy coding I think a lot of
times comes also with drinking.

00:24:22.549 --> 00:24:22.990
( laughter )

00:24:22.990 --> 00:24:30.319
So you just sit in front of iChat, talk
to people in code and release stuff.

00:24:30.319 --> 00:24:33.829
Cowboy coding can be a little dangerous, it's
fun I don't know if any of you have done it,

00:24:33.829 --> 00:24:38.439
I actually recommend one you know you just try it one time
just to kind of mess with everybody you're working with.

00:24:38.440 --> 00:24:41.220
Cause no one else can do their jobs
by the way when you cowboy code.

00:24:41.220 --> 00:24:43.549
People are like do you need design, I don't know.

00:24:43.549 --> 00:24:46.159
No I don't care.

00:24:46.160 --> 00:24:53.130
But what's interesting about cowboy coding is it's kind
of, it's taking iterative to a level that's even extreme,

00:24:53.130 --> 00:24:54.830
which is that you really don't think about anything.

00:24:54.829 --> 00:24:57.579
You don't plan, you just work, work,
work, release, release, release.

00:24:57.579 --> 00:25:01.819
So it's a little dangerous, but we're getting at here
is that there's a huge spectrum of processes right

00:25:01.819 --> 00:25:05.859
and the difference you know, some are more
predictive, which means they have a lot more structure

00:25:05.859 --> 00:25:07.709
and some are more adaptive which
means they don't have any structure.

00:25:07.710 --> 00:25:10.910
Obviously cowboy coding, line should
probably be about five times higher.

00:25:10.910 --> 00:25:14.220
But what we're looking for here is we're
to find something that works for us.

00:25:14.220 --> 00:25:19.150
Right? So part of the assumption saying here as
well is that you can't assume that going into this,

00:25:19.150 --> 00:25:20.940
cleanroom is even gonna work for you the first time.

00:25:20.940 --> 00:25:24.230
Coming into a project thinking this is exactly
how we're gonna do it beginning to end,

00:25:24.230 --> 00:25:27.309
is almost as dangerous as assuming that
there's gonna be a database with ten tables.

00:25:27.309 --> 00:25:33.419
Because I don't know, depending on the size of your
projects and depending on the size of your teams,

00:25:33.420 --> 00:25:36.779
but you're not always even guaranteed
you're gonna be on the project end to end.

00:25:36.779 --> 00:25:40.529
Something may happen, you may need to leave,
something you know may change, something may go wrong,

00:25:40.529 --> 00:25:41.849
you may need to bring ten more people on.

00:25:41.849 --> 00:25:46.879
So making assumptions about processes is that they're gonna
last forever and this project you know before we even get

00:25:46.880 --> 00:25:50.510
into it, we're gonna use cleanroom beginning to end,
is almost as dangerous as making other assumptions.

00:25:50.509 --> 00:25:55.829
And what we're getting at here is that you have to
be flexible, even with your process selection right

00:25:55.829 --> 00:25:58.559
and being agile means that there is no lock process.

00:25:58.559 --> 00:26:01.379
There is no I'm not cleanroom, I'm not
stuck with clean room this whole time

00:26:01.380 --> 00:26:02.880
and especially if cleanroom isn't working for me.

00:26:02.880 --> 00:26:04.330
I don't have to stick it out.

00:26:04.329 --> 00:26:08.629
I don't have to suffer, the project doesn't
have to suffer for me to get through cleanroom.

00:26:08.630 --> 00:26:13.440
You know, if we're in spiral and we're all feeling like
it's out of control, there's no reason that you have to stay

00:26:13.440 --> 00:26:20.269
with spiral and part of being agile is deciding
it's safer for us to make, to change things.

00:26:20.269 --> 00:26:26.819
So I wanna talk about, a little bit about what I called in
this slide the movement, which is a kind of a weird term

00:26:26.819 --> 00:26:30.929
for this, but part of what's great about
agile development is there's a lot of,

00:26:30.930 --> 00:26:36.900
there's a lot of stuff happening right now to make our lives
as developers easier and I've been developing for the web

00:26:36.900 --> 00:26:42.730
for about nine years and I've done some Cocoaa
development and I've played in some windows development

00:26:42.730 --> 00:26:50.529
and I remember a time where it was very, very
difficult to get into these higher level concepts.

00:26:50.529 --> 00:26:52.220
It was very difficult to learn programming languages.

00:26:52.220 --> 00:26:53.480
They were a lot more cryptic.

00:26:53.480 --> 00:26:57.970
And so what we're talking about here is we're talking about
the movement, it's not only about processes becoming easier

00:26:57.970 --> 00:27:02.839
and agile development, we're also talking
about people helping people get stuff done.

00:27:02.839 --> 00:27:06.849
And everybody is just gonna know every single one of these
frameworks and the reason for that is not necessarily even

00:27:06.849 --> 00:27:10.399
because of buzz, but because of
how powerful this idea is becoming.

00:27:10.400 --> 00:27:15.100
That if we simplify the work that we're doing,
we can actually get a lot more work done.

00:27:15.099 --> 00:27:18.969
So tools for rapid prototyping and building right.

00:27:18.970 --> 00:27:23.730
Appkit. If you go back you know, fifteen
years, you were doing a lot of work on your own.

00:27:23.730 --> 00:27:28.120
Appkit does a lot of work for you and WebKit
might even be a better example right now,

00:27:28.119 --> 00:27:32.849
because of how popular bundling the internet is and
how powerful the internet can be and building you know,

00:27:32.849 --> 00:27:35.809
web apps and using Java Script and all these things.

00:27:35.809 --> 00:27:41.389
And so WebKit allows you to drop a browser
into your app and you know, you go back,

00:27:41.390 --> 00:27:45.040
I'm not sure which year WebKit was released
exactly, but if you go back five, six years,

00:27:45.039 --> 00:27:48.220
people were writing their own browsers all the time.

00:27:48.220 --> 00:27:52.610
You know, if you have an app that you need web browsing in,
you're either gonna have to license something like Mozilla

00:27:52.609 --> 00:27:58.059
or you're gonna have to build your own web browser
and so we've got five thousand different web browsers,

00:27:58.059 --> 00:28:03.079
just in OS X alone that are bundled inside of apps and
each one of them renders slightly differently and each one

00:28:03.079 --> 00:28:05.179
of them handles you know, standards differently.

00:28:05.180 --> 00:28:10.560
And so you look at tools like WebKit and you say okay,
this is gonna remove the necessity for doing this work over

00:28:10.559 --> 00:28:14.859
and over and it's going to streamline the process
and it's gonna make a lot of assumptions right.

00:28:14.859 --> 00:28:17.079
And this go back to safe assumptions.

00:28:17.079 --> 00:28:22.359
Safe assumptions, WebKit has features that most
people who need the internet are gonna have you know.

00:28:22.359 --> 00:28:24.349
It's gonna have copy and paste, it's
gonna have all the system level features,

00:28:24.349 --> 00:28:25.569
but it's also gonna have web features.

00:28:25.569 --> 00:28:31.079
It's gonna you know, it's gonna support CSS, it's gonna
support Java Script and these are safe assumptions.

00:28:31.079 --> 00:28:34.559
We're beyond rails is another very popular
framework right now and there's a reason for it,

00:28:34.559 --> 00:28:39.799
it does a lot of the listing that you had to do
over and over and over and it does it for you.

00:28:39.799 --> 00:28:42.960
And it's open source, so you you know,
you're not, you can look at the source

00:28:42.960 --> 00:28:45.799
and you can continue to add to it and Django as well.

00:28:45.799 --> 00:28:52.879
Again in that same vein, web applications, building web
applications, more rapidly with less rewriting and such.

00:28:52.880 --> 00:28:55.210
CakePHP is on the PHP side.

00:28:55.210 --> 00:28:59.620
So there are many more than this, I picked just a few.

00:28:59.619 --> 00:29:01.529
And then there are tools for releasing also.

00:29:01.529 --> 00:29:03.609
Because releasing is a big part of iteration.

00:29:03.609 --> 00:29:08.240
So when you're developing your app and your rapidly
iterating, you have to have a way to get this to your users

00:29:08.240 --> 00:29:13.130
and that way has to be as simple as possible and that's
a key part of iteration, is that if your users have

00:29:13.130 --> 00:29:17.760
to do a lot of work to test your app,
you're gonna get less good feedback.

00:29:17.759 --> 00:29:22.559
Right? So making it easier for users makes it easier for
them to submit feedback, which makes it easier for you

00:29:22.559 --> 00:29:25.529
to iterate, makes it your app better in the long run.

00:29:25.529 --> 00:29:32.920
So Sparkle is a huge thing right now and I remember
you know, just going back even two or three years,

00:29:32.920 --> 00:29:37.250
if I wanted to find a new version you know,
I'd go through my applications folder,

00:29:37.250 --> 00:29:41.410
excuse me and I'd be like oh I wonder
how many of these apps have updates?

00:29:41.410 --> 00:29:42.340
You'd have to go one at a time.

00:29:42.339 --> 00:29:46.069
You'd have to go to websites, you'd have to figure
out what current version was or you'd have to,

00:29:46.069 --> 00:29:53.490
the app developer himself would have to he or she would have
to build their own updating mechanism and how many of you

00:29:53.490 --> 00:29:57.529
by the way, are Mac OS X application developers?

00:29:57.529 --> 00:30:00.990
Okay, how many of you have written
an updating mechanism of some sort?

00:30:00.990 --> 00:30:02.940
Yeah, that's what I thought.

00:30:02.940 --> 00:30:04.799
Okay, so like eighty percent of you.

00:30:04.799 --> 00:30:08.139
Now how many of you have used Sparkle?

00:30:08.140 --> 00:30:10.380
Okay, so the other twenty percent.

00:30:10.380 --> 00:30:12.790
You guys should all talk.

00:30:12.789 --> 00:30:17.059
So Sparkle is great because it's this really easy
to implement module and it does that work for you.

00:30:17.059 --> 00:30:18.099
It's very simple to update.

00:30:18.099 --> 00:30:22.199
All you have to do to update you, to update your
build, is you drop a new version on the server,

00:30:22.200 --> 00:30:26.730
you update like an xml file I think it is now and
that's it and it pushes it to users and what's great is

00:30:26.730 --> 00:30:30.750
that not only does it make it easier for you, which is
key to development, it makes it easier for your users.

00:30:30.750 --> 00:30:37.279
Because all they have to do is click, install and we
all know that installing apps on the Mac is easy right?

00:30:37.279 --> 00:30:38.670
Just drag and drop, that's great.

00:30:38.670 --> 00:30:42.560
But, if you can cut out even the easiest
part of it, then it's even easier.

00:30:42.559 --> 00:30:47.309
Users are gonna upgrade all the time and you're more
guaranteed to get people testing newer versions.

00:30:47.309 --> 00:30:51.769
You know, one of the hardest parts about being
an application developer is legacy support right.

00:30:51.769 --> 00:30:55.269
Supporting everybody who's using these old
apps and trying to, trying to deal with that.

00:30:55.269 --> 00:31:00.389
But if you can push new apps and your throughput on
pushing apps is much higher because of your tools,

00:31:00.390 --> 00:31:04.280
you're more likely to have users using your newest content.

00:31:04.279 --> 00:31:06.210
And RubyGems is another example of this.

00:31:06.210 --> 00:31:11.430
It's not directly related on Ruby on Rails obviously because
it's a ruby thing, but rails hits on RubyGems a lot.

00:31:11.430 --> 00:31:15.860
Because it's an easy way to create
gems and push them out to everybody.

00:31:15.859 --> 00:31:22.349
And what we're talking about here is we're talking about
the reality which is that rewriting things causes errors.

00:31:22.349 --> 00:31:26.359
Right? Every time you do something again, it's dangerous.

00:31:26.359 --> 00:31:32.459
So talking to you guys again, how many
times, does anybody in here write PHP at all?

00:31:32.460 --> 00:31:38.509
Okay, how many times have you written an SQL function
or a class or something to handle dealing with SQL?

00:31:38.509 --> 00:31:42.039
Okay, just about everybody who's PHP developer.

00:31:42.039 --> 00:31:45.690
How many times have you done that over and over and over?

00:31:45.690 --> 00:31:49.180
Every single project, you take the
same code, you tweak it, whatever?

00:31:49.180 --> 00:31:49.700
None of you?

00:31:49.700 --> 00:31:50.920
Oh okay, there we go.

00:31:50.920 --> 00:31:54.880
Okay and then how many times have you written
an SQL class or anything in Rails right.

00:31:54.880 --> 00:31:56.250
It's like zero times.

00:31:56.250 --> 00:32:03.279
Occasionally you'll have to add to it, but you very
rarely have to write this stuff and in Cocoaa post-WebKit,

00:32:03.279 --> 00:32:06.139
how many times have people written
web browsers right for their apps.

00:32:06.140 --> 00:32:11.080
And what we're driving at here is this, you
don't have to redo this work and when you do,

00:32:11.079 --> 00:32:14.949
you are reinventing the wheel and
reinventing the wheel is extremely dangerous.

00:32:14.950 --> 00:32:18.049
It's dangerous monetarily, it's dangerous sanity wise.

00:32:18.049 --> 00:32:22.960
There have been plenty of times where I've sat in a room
for a week doing something I've done a thousand times before

00:32:22.960 --> 00:32:24.829
and I'm thinking, why am I doing this, this is dangerous.

00:32:24.829 --> 00:32:27.189
I'm wasting my time and wasting my client's time.

00:32:27.190 --> 00:32:31.299
So if you don't have to, then you
shouldn't and what we're talking

00:32:31.299 --> 00:32:36.460
about here is using commonly used
tools to save time and time is key.

00:32:36.460 --> 00:32:41.740
So part of this is, is trends towards
human-riendly languages right.

00:32:41.740 --> 00:32:45.269
What we had is, before, languages were easier for computers.

00:32:45.269 --> 00:32:50.400
You go back twenty years and you try to read programming
languages and it's, you have to be a scientist right.

00:32:50.400 --> 00:32:56.710
You have to know math, which I guess
you don't anymore, right, no you don't.

00:32:56.710 --> 00:33:01.490
And you had to, you know, you had to, you had to
really, you were like interfacing with the computer.

00:33:01.490 --> 00:33:06.400
It's a little crazy, writing to memory directly, you know,
you're doing all these swaps and it's very complicated

00:33:06.400 --> 00:33:09.870
and if you try to explain it to a layman, they
were like, I don't know what you're talking about.

00:33:09.869 --> 00:33:14.239
And what we're realizing over time is that this
is kind of a silly way to approach things,right.

00:33:14.240 --> 00:33:19.650
So what we have now is we have program languages
and tools that are easier for people to use.

00:33:19.650 --> 00:33:23.950
And the point of this really is that
computers are built for processing.

00:33:23.950 --> 00:33:27.500
Why are we making it easier for them?

00:33:27.500 --> 00:33:29.569
You know, they can't leave the
house, they can't go to Italy.

00:33:29.569 --> 00:33:34.129
I can. So why are we making, this,
a Mac Pro is specifically designed

00:33:34.130 --> 00:33:36.800
to crunch numbers, to do math, to do this work for you.

00:33:36.799 --> 00:33:39.659
So why is the trend to make languages
that are harder for me?

00:33:39.660 --> 00:33:41.050
They should be harder for the Mac.

00:33:41.049 --> 00:33:43.389
And that's what we're starting to
see now with languages like ruby,

00:33:43.390 --> 00:33:46.630
with popular frameworks with things like WebKit is.

00:33:46.630 --> 00:33:50.020
Why are we forcing ourselves to do
work that a computer's built to do?

00:33:50.019 --> 00:33:54.500
And the truth is, you can't upgrade your
brain, but you can upgrade your Mac Pro right.

00:33:54.500 --> 00:34:00.170
It's like I can throw now like what it is, five hundred gigs
of memory into a Mac Pro or something, it's out of control.

00:34:00.170 --> 00:34:02.180
But my brain's not getting any smarter.

00:34:02.180 --> 00:34:05.730
In fact, I think I'm kind of going down as time goes on.

00:34:05.730 --> 00:34:10.869
So why am I sitting in a room struggling with
a computer and begging it to do what I want it

00:34:10.869 --> 00:34:12.960
to do when I should be bossing it around.

00:34:12.960 --> 00:34:14.400
That's, that's the future right.

00:34:14.400 --> 00:34:15.519
We're telling them what to do.

00:34:15.519 --> 00:34:22.219
So the point here is that things need to be easier for
us and that trend is beginning and it's getting stronger

00:34:22.219 --> 00:34:26.319
and it's very good for everyone who develops applications.

00:34:26.320 --> 00:34:29.809
So let's talk about some real-wrld examples.

00:34:29.809 --> 00:34:33.259
So as I said, I'm a developer.

00:34:33.260 --> 00:34:38.590
I do mostly web development but, we're
gonna talk first about some Cocoaa tuff.

00:34:38.590 --> 00:34:40.530
We're gonna talk about iGTD.

00:34:40.530 --> 00:34:48.950
I don't know if anyone's familiar with getting
things done, it's a very popular movement.

00:34:48.949 --> 00:34:54.750
So iGTD is a Cocoa application, written by Bartek Bargiel,
I believe is how you pronounce his last name

00:34:54.750 --> 00:34:59.800
and the point of this is to, is to you
know, help users focus on their work.

00:34:59.800 --> 00:35:04.100
And it's been downloaded many, many times and the reason
that that's number is on there is it's kind of important

00:35:04.099 --> 00:35:10.289
and the reason that it's been downloaded so many times
is that Bartek has a really open iteration policy right.

00:35:10.289 --> 00:35:15.170
So he builds like crazy, almost to the verge of cowboy
coding in the fact that he's building so frequently

00:35:15.170 --> 00:35:16.840
and he's pushing it out to users all the time.

00:35:16.840 --> 00:35:20.360
So he's getting constant user feedback
and he's getting on the scale of you know,

00:35:20.360 --> 00:35:24.099
fifteen to twenty thousand users a
month and that's a lot of user feedback

00:35:24.099 --> 00:35:29.190
and that much user feedback actually allows you to very,
very quickly make changes that everyone's requesting

00:35:29.190 --> 00:35:32.210
and try new things and get a lot of user feedback.

00:35:32.210 --> 00:35:37.970
So iGTD kinda has a built in ambiance which is
great, it's great for Bartek at least, because iGTD,

00:35:37.969 --> 00:35:41.509
because GTD is such a huge movement right now.

00:35:41.510 --> 00:35:48.610
So here's just a really quick example of how iteration
can be really powerful and this is a design example.

00:35:48.610 --> 00:35:53.110
And so this is iGTD as of I think two
and a half months ago and at the pace

00:35:53.110 --> 00:35:56.300
that he develops, it's probably completely different now.

00:35:56.300 --> 00:36:04.150
But, so we look here, we see a date functionality
here and Bartek's a developer and he's a programmer

00:36:04.150 --> 00:36:09.570
and he thinks kind of more in a programmatic thing,
so when he created this calendar functionality,

00:36:09.570 --> 00:36:11.980
he did it almost a way a developer would do it you know.

00:36:11.980 --> 00:36:15.090
People can write in their start date, they can
write in their recurrence, they can you know,

00:36:15.090 --> 00:36:19.039
they can do it themselves and he pushes this
update to everybody and his users immediately are

00:36:19.039 --> 00:36:21.960
like this is too complicated, I
don't think the way you think.

00:36:21.960 --> 00:36:26.880
And so what we're seeing here is we're seeing some research.

00:36:26.880 --> 00:36:31.490
He looks at the problem, he decides this is how he's
gonna do it, he implements it and he releases it to users

00:36:31.489 --> 00:36:35.099
and testing begins and testing almost
immediately gives him feedback right.

00:36:35.099 --> 00:36:41.179
So a couple weeks later or however long it is, we've changed
functionality and this is based directly on user feedback.

00:36:41.179 --> 00:36:43.049
User feedback and testing.

00:36:43.050 --> 00:36:48.420
Now what's also important about this is that
this is not how he planned to do it right.

00:36:48.420 --> 00:36:53.300
So his plan, this is how I'm gonna implement the date and
this should work and then he gives it to users and users say

00:36:53.300 --> 00:36:57.700
that doesn't work for me and it should be
closer to like an OS X you know, standard

00:36:57.699 --> 00:37:01.269
the way that the calendars look in most other applications.

00:37:01.269 --> 00:37:07.019
And what you have here is you have planning and you have
design and you have development and you have testing

00:37:07.019 --> 00:37:10.429
and then you also have assumptions being changed right.

00:37:10.429 --> 00:37:14.029
I assume that it's, that every user will
understand this and then you realize

00:37:14.030 --> 00:37:16.230
that users don't and then users need it a different way.

00:37:16.230 --> 00:37:20.369
So it's really easy for him, based on all
this user feedback, to make these changes.

00:37:20.369 --> 00:37:22.609
To make them quickly.

00:37:22.610 --> 00:37:26.039
So I'm gonna toot my own horn and I'm gonna talk about xPad.

00:37:26.039 --> 00:37:28.130
I wrote xPad in 2003.

00:37:28.130 --> 00:37:34.079
It's a universal binary now and the and xPad is
focused on doing one thing and doing it well.

00:37:34.079 --> 00:37:39.750
And the point of xPad, for anybody who's never seen
it before, is when I first switched to the Mac,

00:37:39.750 --> 00:37:45.329
I think in 2001 in early 2001, it's been like six years now,

00:37:45.329 --> 00:37:49.989
when I first switched to the Mac, I was doing a lot of work
for various companies, various web development companies.

00:37:49.989 --> 00:37:54.519
I was fixing a lot of old code and I think like half of
you raised your hand about legacy applications earlier.

00:37:54.519 --> 00:37:56.289
So we're all in the same boat here.

00:37:56.289 --> 00:38:05.710
And I was fixing a lot of applications that were old, a
lot of them were ASP based called fusion, things like this.

00:38:05.710 --> 00:38:07.090
Lovely, lovely languages.

00:38:07.090 --> 00:38:13.710
And I would end the day, I would take chunks of code,
sorry, I would take chunks of code out of applications

00:38:13.710 --> 00:38:18.030
and I would have, you know I would keep them because
I was nervous as far as if I need to reuse them again

00:38:18.030 --> 00:38:23.730
and this is before a lot of my the places I would work would
use SVN or what not and I'd have all this code and I'd have,

00:38:23.730 --> 00:38:27.519
I'd end the day with thirty open text files
right, each with blocks of code in them

00:38:27.519 --> 00:38:30.719
that I wouldn't remember what they were,
I wouldn't remember where they came from.

00:38:30.719 --> 00:38:34.449
At the end of the day when I went to leave, I'd
realize that if I wanted to keep these snippets,

00:38:34.449 --> 00:38:39.119
if I wanted to reuse them, I'd have to save thirty
documents and I'd have to name every single one of them,

00:38:39.119 --> 00:38:41.420
I'd have to find a location for
them and then in the morning,

00:38:41.420 --> 00:38:44.880
if I need to look through them again,
I'd have to open thirty documents.

00:38:44.880 --> 00:38:48.900
So I realized as a developer is I
shouldn't have to do this at all.

00:38:48.900 --> 00:38:53.170
I need something that's gonna open my documents,
I need something that's gonna save my documents,

00:38:53.170 --> 00:38:57.150
I need an easy way to just throw
stuff into an app and be done with it.

00:38:57.150 --> 00:39:03.250
And this is around 2003 when the
whole notepad thing in OS X was not very popular.

00:39:03.250 --> 00:39:05.159
So there wasn't really a solution for this.

00:39:05.159 --> 00:39:10.609
So I decided I would look into creating one and initially
I was gonna create one web base, cause that was my field

00:39:10.610 --> 00:39:13.660
and then I realized that the developer
tools with OS X are free,

00:39:13.659 --> 00:39:17.409
which is kinda crazy when you're
coming from a Windows world right.

00:39:17.409 --> 00:39:20.019
Cause visual studio costs like thirty
thousand dollars or something crazy.

00:39:20.019 --> 00:39:25.239
And you're paying for it and then you
look at it and go, why did I pay for this.

00:39:25.239 --> 00:39:29.599
( laughter )
So I look at my OS X disk and I say oh, Xcode is
free, I think it was project builder at the time

00:39:29.599 --> 00:39:33.259
and so I installed it and I looked
at it and I was like oh okay.

00:39:33.260 --> 00:39:35.900
So I'm gonna lose nine months of my life and I did.

00:39:35.900 --> 00:39:40.700
And I just started working on doing this and what's
interesting about this is I did not know coco at all.

00:39:40.699 --> 00:39:46.019
I did not know objective C at all and I used really
simple iterative techniques to develop this application.

00:39:46.019 --> 00:39:52.489
It took me about nine months and I learned Cocoa and
I learned objective C and what I did is I focused

00:39:52.489 --> 00:39:54.979
on doing one thing at a time and in this case,

00:39:54.980 --> 00:39:58.260
it's an extreme example because, I
didn't know how to do anything else.

00:39:58.260 --> 00:40:04.800
So when I was working with NS text viewer, when I was
working with table viewer, when I was working on you know,

00:40:04.800 --> 00:40:09.710
features like mini bars and preferences, I was
literally working for the first time in this technology.

00:40:09.710 --> 00:40:11.380
I had no idea how to accomplish these things.

00:40:11.380 --> 00:40:14.750
I was reading tons of tutorials, I bought lots of books.

00:40:14.750 --> 00:40:16.889
And I iterated you know, in a way that was extreme.

00:40:16.889 --> 00:40:22.230
I focused on literally one thing at a time and sometimes
it would take me days to get one thing working.

00:40:22.230 --> 00:40:25.949
But when I did, one more thing was done.

00:40:25.949 --> 00:40:30.429
So this was what xPad looked like in it's first public beta.

00:40:30.429 --> 00:40:38.289
Like I said, it's extremely simple and you can see a couple
of things here, this modified dates in a funky little view

00:40:38.289 --> 00:40:43.610
and it's kinda difficult to look at
and then is version 1.0b.

00:40:43.610 --> 00:40:46.550
This is a couple of revisions later
and it's a little more cleaned up.

00:40:46.550 --> 00:40:51.450
The bottom bar actually got more complicated,
which again, this is user feedback and they wanted

00:40:51.449 --> 00:40:53.480
to know what category their document was in.

00:40:53.480 --> 00:40:55.949
So I thought oh great, I'll just throw it
in the bottom there, that should be fine.

00:40:55.949 --> 00:41:00.789
Well what you realized and what isn't in the screen
shot is if you have a full document in this window,

00:41:00.789 --> 00:41:05.190
you have text lined up right along the bottom of
that and all of a sudden it becomes very difficult

00:41:05.190 --> 00:41:08.809
to read the bottom line of text and that
and also, how frequently do you need to know

00:41:08.809 --> 00:41:12.269
when you last modified something,
especially in like computer language.

00:41:12.269 --> 00:41:18.860
You know, with like a full date in a format that
most people in the US don't even read dates in

00:41:18.860 --> 00:41:21.490
and the category is hanging out down there.

00:41:21.489 --> 00:41:27.769
So this is version 1.0 and version 1.0
is quite different and I added a drawer to the bottom

00:41:27.769 --> 00:41:33.309
and I moved the date into the bottom and I moved, I had
categories still there and that was based on user feedback

00:41:33.309 --> 00:41:39.710
and you know, I've got a button to hide the drawer and
we see here is that we've got a new thing appearing here

00:41:39.710 --> 00:41:45.250
and it's the word count and it's kind of an ironic
story about xPad, but word count was not planned at all.

00:41:45.250 --> 00:41:46.719
I had no plan for this feature.

00:41:46.719 --> 00:41:54.839
As I was developing the app though, when I got
to the end I had this drawer, and I realized all

00:41:54.840 --> 00:42:00.250
of a sudden I wasn't constrained by what I had before, which
was this tiny bar, I could suddenly put a lot more info

00:42:00.250 --> 00:42:06.750
into this, into this drawer and this is before the
movement toward the semi-transparent black panels,

00:42:06.750 --> 00:42:11.710
but and drawers were awesome back then,
I don't know if anybody, it's true.

00:42:11.710 --> 00:42:13.860
I could get two more drawers on there if possible.

00:42:13.860 --> 00:42:15.780
( laughter )

00:42:15.780 --> 00:42:18.550
Preference would have like six drawers.

00:42:18.550 --> 00:42:22.780
They're so great, they're so cool, they slid out.

00:42:22.780 --> 00:42:28.780
Anyway, so when you look at the word count
and the word count just kinda happened.

00:42:28.780 --> 00:42:32.290
It was like, I have extra space, what
would someone who's editing a lot of text,

00:42:32.289 --> 00:42:33.900
who's not a developer, what would they do?

00:42:33.900 --> 00:42:37.300
And I started to get a lot of feedback from
people saying, I need more tools for writing,

00:42:37.300 --> 00:42:41.519
which I thought was kinda funny cause I thought
well, there's already text edit and there are Word

00:42:41.519 --> 00:42:44.349
and there's all these other things for
writing, why are you gonna write in xPad

00:42:44.349 --> 00:42:48.299
and what people said is xPad loads in
like you know, one tenth of a second.

00:42:48.300 --> 00:42:52.440
Because there's nothing there, it's such a
simple application, that it just pops open.

00:42:52.440 --> 00:42:55.289
So now it doesn't pop open, but it pops
open even if you have tons of documents.

00:42:55.289 --> 00:42:56.119
It's very fast.

00:42:56.119 --> 00:43:01.509
Right? So what people were realizing is opening Word would
take thirty seconds or however long it took depending

00:43:01.510 --> 00:43:03.960
on what computer you were using,
xPad would open in half a second.

00:43:03.960 --> 00:43:07.619
Well yeah, Word's got a lot of features but if
I can get my work done now, then I'll use xPad.

00:43:07.619 --> 00:43:10.029
So people were like word count is what I need.

00:43:10.030 --> 00:43:13.840
So I had this space now and I had it iterated through
this development process and I was like okay well,

00:43:13.840 --> 00:43:16.559
users are saying that they need
word count, I'll do word count.

00:43:16.559 --> 00:43:20.900
So I put it in and it turns out that word count is
actually kinda like the feature that everybody focuses

00:43:20.900 --> 00:43:23.420
on when they talk about xPad and I had no idea.

00:43:23.420 --> 00:43:27.110
I thought the highlight and the
strike were just spectacular.

00:43:27.110 --> 00:43:28.950
People were like, I don't use that.

00:43:28.949 --> 00:43:33.000
Word count is where it's at and I was, I was asking
people why they needed to know how many words there are

00:43:33.000 --> 00:43:38.659
and everything, if people were writing with a
lot of constraints and so I, that was my focus.

00:43:38.659 --> 00:43:43.759
When I put those in, I was showing testers
and I was like highlight, they're like, no.

00:43:43.760 --> 00:43:44.820
( laughter )

00:43:44.820 --> 00:43:50.690
And then we see 1.2.5, which I released actually
a couple months ago which is actually universal binary

00:43:50.690 --> 00:43:53.300
and we've got you know, some more OS X familiar stuff.

00:43:53.300 --> 00:43:57.120
We've got the unified tool bar look and
this kind of shows more of what xPad looks

00:43:57.119 --> 00:44:01.670
like in use, some documents, some categories.

00:44:01.670 --> 00:44:04.389
And so what we're talking about
here is we're talking about the fact

00:44:04.389 --> 00:44:08.179
that I learned a language through iteration effectively.

00:44:08.179 --> 00:44:10.809
It's extremely powerful as a development process.

00:44:10.809 --> 00:44:14.449
Because I didn't know what I was gonna do,
I didn't know what I was gonna have to do,

00:44:14.449 --> 00:44:17.779
I didn't know what I was gonna have to do to get
in this, all I decided is, I'm gonna do this app

00:44:17.780 --> 00:44:20.990
and I'm gonna focus on one thing at a time.

00:44:20.989 --> 00:44:22.719
And that's a unified tool bar there.

00:44:22.719 --> 00:44:24.329
Point that out.

00:44:24.329 --> 00:44:30.039
And here's another great example of iterative design
and user feedback, is this is, this is the first,

00:44:30.039 --> 00:44:36.239
one of the first beta panels and you can see how much text
is in this preference panel and I was very nervous initially

00:44:36.239 --> 00:44:40.169
that people wouldn't understand how to use my
application, so I so like told them everything about it.

00:44:40.170 --> 00:44:44.400
Like the help was so literal that it was hard
to read because it was like you click this

00:44:44.400 --> 00:44:46.769
and then you click this and then you'll be happy.

00:44:46.769 --> 00:44:52.980
And if we look at, actually this kinda goes in, these
slides are in reverse order, that's even worse.

00:44:52.980 --> 00:44:57.190
There's like three paragraphs there on the top thing
and what you figure out is you get user testing,

00:44:57.190 --> 00:44:59.610
is that people are like calm down,
you don't need to tell me so much.

00:44:59.610 --> 00:45:01.630
Some of these things are pretty obvious.

00:45:01.630 --> 00:45:02.930
You know, show, delete confirmation.

00:45:02.929 --> 00:45:06.739
It doesn't really need a full paragraph to describe it.

00:45:06.739 --> 00:45:10.059
And then you look at closer to the final
and we're stripping out all that stuff

00:45:10.059 --> 00:45:11.719
and we're making it, making it much more simple.

00:45:11.719 --> 00:45:17.009
We also have a couple more features that appear,
because as we iterate and as we add features,

00:45:17.010 --> 00:45:18.830
we're able to focus on new features at a time.

00:45:18.829 --> 00:45:25.549
So when I hit my based feature set, I had
a lot of user feedback of feature requests

00:45:25.550 --> 00:45:28.960
and some of them became really easily
doable because I had done work before,

00:45:28.960 --> 00:45:30.829
that I wasn't planning on, that allowed me to do it.

00:45:30.829 --> 00:45:31.880
Word count was a great example.

00:45:31.880 --> 00:45:35.590
Suddenly I had space, it made sense and I could do it.

00:45:35.590 --> 00:45:43.690
And now we'll talk about SimpleLog and SimpleLog
is a Ruby on Rails application, that I also wrote.

00:45:43.690 --> 00:45:44.220
I'm a genius.

00:45:44.219 --> 00:45:47.609
( laughter )
You came to see me.

00:45:47.610 --> 00:45:52.230
That's not true, you came to see Kelly.

00:45:52.230 --> 00:45:56.050
And this is cross platform, this is
database agnostic, it's rails app.

00:45:56.050 --> 00:46:01.539
So it's been downloaded not very many times, I'm
trying, I'm pushing it and that point of SimpleLog,

00:46:01.539 --> 00:46:04.369
it's a web app, it's a web logging application right.

00:46:04.369 --> 00:46:08.809
So the whole point of this is again,
much like xPad, is to focus on simplicity

00:46:08.809 --> 00:46:13.769
and focus on the core application process and one
of the things that I talk about a lot when I talk

00:46:13.769 --> 00:46:17.559
and people don't wanna hear, is that
things are too complicated, right.

00:46:17.559 --> 00:46:22.119
I think of myself as a smart guy, but things
are too complicated and we have this habit,

00:46:22.119 --> 00:46:26.699
especially as developers, to complicate things
even more even when we don't need to and we start

00:46:26.699 --> 00:46:32.469
out with new applications, we start out with
new apps, we think of all the possibilities.

00:46:32.469 --> 00:46:38.539
You know, we can, we can, we can put, we'll have core data,
we'll have core animation, we'll have WebKit, AppKit,

00:46:38.539 --> 00:46:43.559
it'll do a lot of work for you and we just, we cram because
these things are so fun, they're so interesting to use

00:46:43.559 --> 00:46:46.500
and we just cram all this stuff into
it and that's called bloat right.

00:46:46.500 --> 00:46:50.289
And everybody knows that word bloat, because you hear it all
the time, you say it about other people's apps all the time,

00:46:50.289 --> 00:46:52.769
that's so bloated, my thing is so much easier.

00:46:52.769 --> 00:46:57.840
But the reality is we all, bloat is normal
because we get excited about what we do.

00:46:57.840 --> 00:47:01.910
And so I've been writing a web log for nine years
and I've used various things, used movable type

00:47:01.909 --> 00:47:04.980
and all these different things
and I wanted to focus on writing.

00:47:04.980 --> 00:47:09.230
I have a problem with focusing, especially when it comes
to writing on my website and one of the problems is

00:47:09.230 --> 00:47:13.829
that if there's too much stuff going on, I can't
focus on the actual task, which is writing.

00:47:13.829 --> 00:47:16.949
So I decided I was gonna write
my own, my own thing and later,

00:47:16.949 --> 00:47:20.449
at the prodding of people who helped
me test it, I released it.

00:47:20.449 --> 00:47:22.469
Open source to the community.

00:47:22.469 --> 00:47:27.649
So this is a great example of how I talk
about things and then I don't do them.

00:47:27.650 --> 00:47:34.750
Right? So this is simple op 1.0 and people would
look at it and go, the word simple is very inappropriate

00:47:34.750 --> 00:47:39.500
because it's not simple at all, it's out of
control, right, and it's a developer application.

00:47:39.500 --> 00:47:43.489
I looked at this and I was like, you can set
every detail of a post, without doing anything.

00:47:43.489 --> 00:47:45.139
You don't have to go anywhere else.

00:47:45.139 --> 00:47:47.529
And you'd look at this thing and it's insane.

00:47:47.530 --> 00:47:52.700
There's, why would you need to modify dates so
frequently that they need to be the first thing.

00:47:52.699 --> 00:47:56.039
Like that's the most important part of
writing an entry, is what date it was on.

00:47:56.039 --> 00:47:57.900
I wanna get that straight right away.

00:47:57.900 --> 00:48:04.840
And you know, there's just so much stuff here and I released
this to testers and they were like, this is out of control.

00:48:04.840 --> 00:48:07.100
So this is 1.1.

00:48:07.099 --> 00:48:09.610
Now, 1.1, a lot simpler.

00:48:09.610 --> 00:48:14.220
What I've done here, for the most part, is I've
taken everything that's on the top that's not related

00:48:14.219 --> 00:48:16.619
to writing a post, I've gotten rid of it right.

00:48:16.619 --> 00:48:18.539
And I've moved it to the bottom.

00:48:18.539 --> 00:48:21.550
And we look at SimpleLog 2.0 and we're even simpler, right.

00:48:21.550 --> 00:48:27.800
So now we've, we've moved all the stuff that was hanging
around the top, all the options and actually if you look

00:48:27.800 --> 00:48:32.789
at this, you'll see at the top, that it says,
SimpleLog colon and then has the options,

00:48:32.789 --> 00:48:36.059
as if I need to tell people every
minute that they're using SimpleLog.

00:48:36.059 --> 00:48:38.029
Like don't forget, this is SimpleLog.

00:48:38.030 --> 00:48:41.050
So these things like users would say, I don't
need to see that, I know that it's SimpleLog.

00:48:41.050 --> 00:48:43.110
I'm not gonna forget where I am.

00:48:43.110 --> 00:48:50.090
And so we moved to, I moved to this you know, easier
to read the top, the navigation is clearly defined,

00:48:50.090 --> 00:48:52.700
much more clearer than before and
again, focusing on just writing.

00:48:52.699 --> 00:48:56.029
If you look now, you see title, body and tags.

00:48:56.030 --> 00:49:03.060
And the point of this is yes, there is a lot of developer
or crazy stuff you can do, but it's all hidden, right.

00:49:03.059 --> 00:49:05.730
So we've got a simplified top and
we've got everything hidden

00:49:05.730 --> 00:49:09.090
in these collapsible things below
and we focus on just the content.

00:49:09.090 --> 00:49:13.800
We've got the preview and we've got the actual data itself.

00:49:13.800 --> 00:49:18.220
Now, this is the preferences panel
for SimpleLog 1.0b.

00:49:18.219 --> 00:49:18.599
( laughter )

00:49:18.599 --> 00:49:21.150
You'll notice I couldn't even fit this on a slide.

00:49:21.150 --> 00:49:25.680
It's actually, I think I actually, you had to remove
one whole section because I was like, I can't,

00:49:25.679 --> 00:49:28.199
like you know, it wouldn't let me copy and paste it in.

00:49:28.199 --> 00:49:29.539
This is out of control.

00:49:29.539 --> 00:49:34.500
But this is every single preference that I've created
for the thing and I have a thing with preferences

00:49:34.500 --> 00:49:38.389
and I think a lot of people like preferences
in general, when you get a new version of it

00:49:38.389 --> 00:49:40.279
and after you've seen your preferences,
you're like all right.

00:49:40.280 --> 00:49:45.240
But then in the long run, you don't really use
them most of the time and I have that problem.

00:49:45.239 --> 00:49:46.519
Where I just create them like crazy.

00:49:46.519 --> 00:49:48.739
What if somebody wants to do this?

00:49:48.739 --> 00:49:51.419
They may never do it, but at least
they could if they wanted to right.

00:49:51.420 --> 00:49:55.639
So this is out of control and again, much
like everything else, testing is what is key.

00:49:55.639 --> 00:49:59.750
Getting someone else's sane opinion
about what you're doing helps.

00:49:59.750 --> 00:50:02.090
So this is 1.0.

00:50:02.090 --> 00:50:06.630
Now, again I went with the same basic
idea of hiding stuff in collapsible panels

00:50:06.630 --> 00:50:11.000
and deciding what I thought was most important
to show to begin with, but again we're still,

00:50:11.000 --> 00:50:13.170
we're still thinking about this from a developers mindset.

00:50:13.170 --> 00:50:17.139
I feel like it's important that you see all this stuff
to begin with, but then I got feedback from people

00:50:17.139 --> 00:50:19.079
and they were saying I never change the text filter.

00:50:19.079 --> 00:50:22.079
I'll never change that, so why is it always visible?

00:50:22.079 --> 00:50:26.900
But I might change the extra stuff which has things
like meta information which they may update their design

00:50:26.900 --> 00:50:29.389
and need to change their meta information, etc.

00:50:29.389 --> 00:50:35.909
So again, things are hidden and this is 2.0.

00:50:35.909 --> 00:50:42.230
Now, the point of 2.0 here, the idea was how can I
use commonly used, you know, metaphors that everyone uses,

00:50:42.230 --> 00:50:46.519
the people that used to to hide things
but to make it easier to find and tabs.

00:50:46.519 --> 00:50:47.489
Tabs work for everyone.

00:50:47.489 --> 00:50:51.879
You know, years now, everyone's been
using tabs and it's easy to understand.

00:50:51.880 --> 00:50:55.320
So we put tabs in, everything's
hidden, quickly switch between things,

00:50:55.320 --> 00:50:59.130
but really only show what I feel is absolutely necessary
and to be perfectly honest, I'm working on a new version

00:50:59.130 --> 00:51:02.470
of SimpleLog and I've changed
this again, based on user feedback.

00:51:02.469 --> 00:51:10.409
And so what I'm trying to say is that user feedback is
key and it helps you do your job so much more effectively.

00:51:10.409 --> 00:51:13.839
So also, talk about the Adobe CS3 Installer.

00:51:13.840 --> 00:51:17.550
I don't know how many people have installed
CS3, if you have, you've seen part of this.

00:51:17.550 --> 00:51:22.860
This was built with WebKit by Blue
Flavor and it's cross-platform.

00:51:22.860 --> 00:51:28.530
It's based on html web technologies and this is a really
interesting case because we're starting to get to a point

00:51:28.530 --> 00:51:33.410
where we can use existing tools, everyone know how to
use already, for things we weren't using them for before.

00:51:33.409 --> 00:51:38.769
Right? So if you look at installing applications on
the Mac, most people think of drag and drop and drag

00:51:38.769 --> 00:51:41.960
and drop is you know, the commonly used practice.

00:51:41.960 --> 00:51:46.900
But occasionally you do have applications that have to be
fully installed and right to a lot of different places

00:51:46.900 --> 00:51:50.139
and even on the Mac, where there's not a lot of competition

00:51:50.139 --> 00:51:55.339
in the installer main space, you
still have a lot of different ones.

00:51:55.340 --> 00:51:59.930
And so what companies are starting to realize
is that when they're writing installers,

00:51:59.929 --> 00:52:03.969
they're having to create Windows installers, they're having
to create Mac installers, they're having to create, you know,

00:52:03.969 --> 00:52:06.599
depending on with Linux installers, etc.

00:52:06.599 --> 00:52:10.049
And they're rewriting a lot of different stuff
in different languages and different installers

00:52:10.050 --> 00:52:14.750
and so what Adobe said is why do we have
to do, why do we have to create this

00:52:14.750 --> 00:52:16.710
in a technology that doesn't already exist?

00:52:16.710 --> 00:52:19.070
Why do we have to like create this
differently for every platform?

00:52:19.070 --> 00:52:20.950
Right? Why can't we use web technologies?

00:52:20.949 --> 00:52:23.730
Everybody knows that web technologies work on all platforms.

00:52:23.730 --> 00:52:28.639
They may be rendered slightly different, but for the most
part, now you can kinda safely use web for everything.

00:52:28.639 --> 00:52:35.250
So this is one of the betas of the installer
and this is all WebKit rendered, right.

00:52:35.250 --> 00:52:38.309
So it looks like a normal installer,
it has normal installer options,

00:52:38.309 --> 00:52:41.779
but the technology behind it is
able to be portable to other things.

00:52:41.780 --> 00:52:47.440
So in Windows for instance, you use, I think it's
Internet Explorer's tool kit, to render the same thing.

00:52:47.440 --> 00:52:55.150
So what you have is you have a single base for everything
and that again, cuts down on rewrites and cutting

00:52:55.150 --> 00:52:57.090
down on rewrites allows you to change things a lot faster.

00:52:57.090 --> 00:52:58.769
Because you don't have to do them for multiple platforms.

00:52:58.769 --> 00:53:01.280
You don't have to you know, test the actual content.

00:53:01.280 --> 00:53:03.220
You have to test the usability and everything like that.

00:53:03.219 --> 00:53:06.399
So, one of the things about working with Adobe though is

00:53:06.400 --> 00:53:11.070
that they obviously were not final
on their look and feel for CS3.

00:53:11.070 --> 00:53:16.670
We all know now it's the small square
icons, the colors, the wavy colors.

00:53:16.670 --> 00:53:21.990
But back here, we see more of the CS2 look,
which is the feathers and stuff like that.

00:53:21.989 --> 00:53:24.299
So it's never locked down until you get to close to the end

00:53:24.300 --> 00:53:30.170
So part of the development process of this
installer is making sure that you take into account

00:53:30.170 --> 00:53:32.720
that this is not the way its going
to look, even tomorrow, potentially.

00:53:32.719 --> 00:53:37.250
And you know, Adobe has a team at, Blue Flavor has a team
and everybody's working, and iteration allows you to work

00:53:37.250 --> 00:53:41.699
with a lot of people because everyone's only
assumption is that everything is going to change.

00:53:41.699 --> 00:53:45.939
So we know that, tomorrow, this installer
might look totally different so we're not going to plan

00:53:45.940 --> 00:53:49.050
that this is final and we're not going to plan
that this is how everything's going to work.

00:53:49.050 --> 00:53:54.810
And, of course, its not final, and you get into other
things too, which are kind of interesting technology wise,

00:53:54.809 --> 00:53:59.480
is when you build an installer, there are
things that you, everyone has to do, right.

00:53:59.480 --> 00:54:00.469
You have to choose a drive.

00:54:00.469 --> 00:54:05.099
A lot of times, on the Mac, you don't have to choose
drives, but on Windows, it's a very common occurrence

00:54:05.099 --> 00:54:10.219
to choose a drive before you install,
choose a folder, choose like 50 folders.

00:54:10.219 --> 00:54:14.619
And so now we're doing web technologies,
how do we do things that are commonly done

00:54:14.619 --> 00:54:17.480
with non-web technologies like drive selection.

00:54:17.480 --> 00:54:21.179
So these things are interesting, new problems
that are caused while you're iterating

00:54:21.179 --> 00:54:22.869
and so you focus on these things one at a time.

00:54:22.869 --> 00:54:26.519
So when you start this out, you don't say,
okay these are every single problem we're going

00:54:26.519 --> 00:54:27.900
to encounter because you don't even know yet.

00:54:27.900 --> 00:54:30.710
Like you know, maybe you don't consider the fact
oh, I'm going to have to do drive selection.

00:54:30.710 --> 00:54:32.110
I wonder how I'm going to do that using Webkit.

00:54:32.110 --> 00:54:35.880
And you just focus on doing these
things one thing at a time.

00:54:35.880 --> 00:54:41.660
And so, everybody might recognize this one, this
is from the beta, from public beta of PhotoShop

00:54:41.659 --> 00:54:43.920
and now we can see that the look is totally different.

00:54:43.920 --> 00:54:48.710
Right? We've got this blue look, the
text is different, there's more of the,

00:54:48.710 --> 00:54:51.869
they kind of switched to a more
simple look for a lot of their stuff.

00:54:51.869 --> 00:54:55.880
And so again, we're not having to redo
a lot of work because we didn't assume

00:54:55.880 --> 00:54:58.550
that that previous look was the
correct one, that it was done.

00:54:58.550 --> 00:55:00.769
In fact, we assumed it was probably
going to change almost entirely.

00:55:00.769 --> 00:55:05.650
And then we see the final and every, a lot of
people who have installed this have seen this one,

00:55:05.650 --> 00:55:08.750
which is now we've got the branding,
we've got the full name.

00:55:08.750 --> 00:55:13.550
This happens to be design premium, there
are only like, I think, 40 versions.

00:55:13.550 --> 00:55:20.590
And so we've got a final look and this process has
allowed two separate teams, two different offices,

00:55:20.590 --> 00:55:26.000
albeit close offices, to work on a project that's
cross platform that uses new technology effectively

00:55:26.000 --> 00:55:31.829
for what its doing, and to work together to
create something over a processed time, right?

00:55:31.829 --> 00:55:35.860
So continually making changes until you, until you get done.

00:55:35.860 --> 00:55:45.230
So, take aways, just simple things that
you can do today to start iterating.

00:55:45.230 --> 00:55:51.250
Embrace agile methods, now that sounds like buzz,
it sounds like I'm saying you know, something crazy.

00:55:51.250 --> 00:55:57.300
But the reality here is, this is basically saying start
thinking about things like they're not set in stone.

00:55:57.300 --> 00:56:00.140
Start thinking about processes like
its going to be different tomorrow.

00:56:00.139 --> 00:56:04.539
Start thinking that maybe you don't have
to focus on the entire app right now.

00:56:04.539 --> 00:56:09.259
Maybe you just have to focus on one or two features, right?

00:56:09.260 --> 00:56:11.400
And that goes to avoiding feature creep.

00:56:11.400 --> 00:56:16.309
And feature creep can be an immensely powerful and I
fight this a lot when I get close to the end of projects,

00:56:16.309 --> 00:56:21.090
especially as I just start adding features and adding
features for the sake of adding features adds testing,

00:56:21.090 --> 00:56:23.180
and testing, of course, adds more iterations.

00:56:23.179 --> 00:56:28.009
So you want to avoid feature creep and you
want to focus on just one feature at a time.

00:56:28.010 --> 00:56:32.590
And this allows you to get work done
and to work succinctly, right?

00:56:32.590 --> 00:56:35.809
And you want to establish a realistic
process and if there's anything I can drive

00:56:35.809 --> 00:56:37.820
at here, this is a very important point.

00:56:37.820 --> 00:56:40.370
Which is that you cant create process
for the sake of process.

00:56:40.369 --> 00:56:43.589
You cant decide we're going to use
Cleanroom and just use it until, you know,

00:56:43.590 --> 00:56:46.530
your company goes out of business,
but use Cleanroom till the end.

00:56:46.530 --> 00:56:48.940
You know, you have to establish
a process that works for you.

00:56:48.940 --> 00:56:50.590
And it may not be fully iterative.

00:56:50.590 --> 00:56:51.970
That, that's a possibility.

00:56:51.969 --> 00:56:55.829
SCRUM is a very interesting example
because its not technically fully iterative.

00:56:55.829 --> 00:56:59.309
It has this thing called Sprint Cycle,
where you build up a lot of ideas

00:56:59.309 --> 00:57:01.610
and then you do like a 30 day sprint, I think it is.

00:57:01.610 --> 00:57:04.940
And that's kind of an interesting mix between more

00:57:04.940 --> 00:57:08.460
of a non-iterative development process
and an iterative development process.

00:57:08.460 --> 00:57:10.220
And that may be the way that works for you.

00:57:10.219 --> 00:57:13.349
Well the goal here is to establish
realistic process that allows you

00:57:13.349 --> 00:57:17.539
to use these tools which can help you get your work done.

00:57:17.539 --> 00:57:19.329
And this one is my personal favorite.

00:57:19.329 --> 00:57:20.509
Its an acronym I made up.

00:57:20.510 --> 00:57:24.920
Its called GLUE and I want everybody
to use this, just 24 hours a day.

00:57:24.920 --> 00:57:25.869
Tell this to everyone.

00:57:25.869 --> 00:57:30.139
Its, get lots of users early and this is key.

00:57:30.139 --> 00:57:33.589
And this is key for everything that you do,
design, development, testing, everything.

00:57:33.590 --> 00:57:37.990
You need to have as many people using
your work immediately as you can.

00:57:37.989 --> 00:57:43.239
And this may be that these users are
getting non-full quality assured work

00:57:43.239 --> 00:57:44.939
and that's a reality of development, right?

00:57:44.940 --> 00:57:46.909
Is that you cant always give people final product.

00:57:46.909 --> 00:57:50.069
You cant always, you never, nothing's perfect, right?

00:57:50.070 --> 00:57:55.539
So the point here is not to wait until the last minute
and get 15 people and say here's a final app, test it.

00:57:55.539 --> 00:57:57.940
Because they're going to give you feed back
that's going to make you go back to the beginning,

00:57:57.940 --> 00:58:00.740
because they're going to say well, I don't
even like how this works to begin with.

00:58:00.739 --> 00:58:04.479
What you need to do is you need to get users right
away and that may be, for some of you who work

00:58:04.480 --> 00:58:08.610
in large teams internally, you're working on
internal apps, that may be your coworkers.

00:58:08.610 --> 00:58:12.890
It may not be outside users, it may not be
people who don't know how to use the app.

00:58:12.889 --> 00:58:13.869
But its still users.

00:58:13.869 --> 00:58:17.009
Its powerful to get people to use the app.

00:58:17.010 --> 00:58:22.150
I always talk about how I have both my girlfriend
and my mother test my applications and the reason is

00:58:22.150 --> 00:58:26.579
that my girlfriend is computer savvy, she's a
magazine editor and she knows how to use a computers

00:58:26.579 --> 00:58:29.840
but she doesn't think the way that I think at all, at all.

00:58:29.840 --> 00:58:32.130
( Laughter )

00:58:32.130 --> 00:58:34.550
Serious problem.

00:58:34.550 --> 00:58:40.970
So and my mother, well is my mother and she's not
computer savvy really, no matter how much I beg her

00:58:40.969 --> 00:58:47.339
to just understand that right clicking is the right side
of the mouse and so I, but I give these things to them

00:58:47.340 --> 00:58:51.140
because it's powerful to get non-technical
users using your applications.

00:58:51.139 --> 00:58:56.609
Because they're gonna give you feedback that you wouldn't
even think of, even when you're asking normal testers right.

00:58:56.610 --> 00:59:01.079
So when I give xPad to my girlfriend,
she uses it in slightly different ways

00:59:01.079 --> 00:59:06.469
and then she starts using it all the time and then she
starts you know, getting angry that I spent nine months,

00:59:06.469 --> 00:59:08.500
but she's using it and so it's a big problem.

00:59:08.500 --> 00:59:09.989
Seriously we have problems.

00:59:09.989 --> 00:59:15.250
And so but, you know, you need to get
users who aren't in your target audience.

00:59:15.250 --> 00:59:16.260
That's a very important part.

00:59:16.260 --> 00:59:17.660
People who don't know how to use your stuff.

00:59:17.659 --> 00:59:19.589
Because they're gonna give you
feedback that you never expected.

00:59:19.590 --> 00:59:22.640
They're gonna say I don't know how to use this at all right.

00:59:22.639 --> 00:59:24.109
So use GLUE a lot.

00:59:24.110 --> 00:59:27.950
Things like zero link building right and
these are tools for iterating quicker.

00:59:27.949 --> 00:59:31.289
Zero link is a great technology because
it quickens the building time, right.

00:59:31.289 --> 00:59:36.420
You don't have to do, you don't have to rebuild all the
links and everything, you can pump out builds even faster

00:59:36.420 --> 00:59:41.030
and what's great especially if you're an internal teams,
using things like Xcode, is that you don't have to go

00:59:41.030 --> 00:59:43.280
through a lot of processes for releasing to people.

00:59:43.280 --> 00:59:44.590
You don't have to package, you don't have to do that.

00:59:44.590 --> 00:59:49.900
You can literally you know, send out builds over email
or over your internal network or over iChat or whatever

00:59:49.900 --> 00:59:53.789
and you can get these things out to
your users really, really quickly.

00:59:53.789 --> 00:59:55.809
Rail tests and script/console is another thing.

00:59:55.809 --> 00:59:57.960
Test driven development is a really great way to iterate,

00:59:57.960 --> 01:00:01.260
because it allows you to quickly
test all the work you've done before.

01:00:01.260 --> 01:00:05.200
Which is a very important part of it as well,
is you know, if you have to do less work

01:00:05.199 --> 01:00:09.269
to verify the things you've changed, then even better.

01:00:09.269 --> 01:00:13.130
So thank you very much and let's
have George come back up here.

01:00:13.130 --> 01:00:21.039
( Applause )

01:00:21.039 --> 01:00:22.449
>> Thanks a lot Garrett, thanks a lot Kelly.

01:00:22.449 --> 01:00:25.839
So to wrap things up before we
head into Q&A really quickly.

01:00:25.840 --> 01:00:33.200
For more information around Apple HCI guidelines, go
ahead it's located on the Apple developer connection.

01:00:33.199 --> 01:00:35.929
John Geleynse is the individual
that's responsible for that.

01:00:35.929 --> 01:00:38.629
His contact information is above.

01:00:38.630 --> 01:00:42.030
Mark Malone who will be up on stage
shortly also to help field questions,

01:00:42.030 --> 01:00:47.900
is responsible for all the internet technology
evangelism now here at Apple, including the iPhone.

01:00:47.900 --> 01:00:51.840
So feel free to get in contact with
him regarding any of the WebKits

01:00:51.840 --> 01:00:54.809
or WebKit related technologies, java script etcetera.