WEBVTT

00:00:17.290 --> 00:00:20.500
My name is Alessandro Sabatelli,
and I'm a motion graphic

00:00:20.500 --> 00:00:22.200
artist here at Apple.

00:00:22.210 --> 00:00:25.710
So in today's session, Motion Graphic
Design Using Quartz Composer,

00:00:25.710 --> 00:00:30.440
we're going to focus on Quartz Composer
from a designer's point of view.

00:00:30.480 --> 00:00:33.020
So just basically,
we're going to take an overview

00:00:33.020 --> 00:00:34.560
of what Quartz Composer is.

00:00:34.560 --> 00:00:36.580
Then we're going to look
at how you actually create

00:00:36.580 --> 00:00:39.270
content for Quartz Composer,
and then a few further

00:00:39.270 --> 00:00:41.390
examples of how it's used.

00:00:41.500 --> 00:00:43.860
All right, so what is Quartz Composer?

00:00:43.860 --> 00:00:46.500
Quartz Composer is an extensible
technology designed for,

00:00:46.500 --> 00:00:49.490
or primarily designed
for rendering graphics.

00:00:49.520 --> 00:00:53.000
It was introduced into the
operating system as part of OS 10.4,

00:00:53.140 --> 00:00:54.430
also known as Tiger.

00:00:54.490 --> 00:00:57.720
And so what that means to you
as designers is that you don't

00:00:57.720 --> 00:01:01.820
really need any special plug-ins or
downloads in order to get it to work,

00:01:01.820 --> 00:01:03.000
it just works.

00:01:03.760 --> 00:01:06.210
Now, in order to create content,
you'll need to download

00:01:06.210 --> 00:01:07.400
the developer tools.

00:01:07.480 --> 00:01:11.310
And with those tools, you'll get a full
featured graphical editor.

00:01:11.360 --> 00:01:15.400
Another important aspect of Quartz
Composer is that it wraps a great number

00:01:15.400 --> 00:01:19.360
of other technologies found within OS X.

00:01:20.570 --> 00:01:24.300
So let's take a look at some of these
technologies and what that means to you.

00:01:24.380 --> 00:01:27.600
So these technologies can really be
broken down into three main groups.

00:01:27.600 --> 00:01:32.400
We have graphics, communications,
and input devices.

00:01:33.240 --> 00:01:35.750
So for instance, in the graphics area,
we have things like

00:01:35.750 --> 00:01:39.030
Core Image for filtering images.

00:01:39.270 --> 00:01:43.180
We have OpenGL for 2D and 3D graphics.

00:01:43.560 --> 00:01:48.220
In the communications front,
we have things like RSS and XML.

00:01:48.230 --> 00:01:51.560
And now in Leopard, we also have OSC,
among others.

00:01:54.060 --> 00:01:58.680
And then for input devices,
we have your basic mouse, keyboard,

00:01:58.750 --> 00:02:02.060
but also things like video input,
et cetera.

00:02:02.170 --> 00:02:05.200
Now it's important to note that now
that Quartz Composer is extensible,

00:02:05.200 --> 00:02:08.270
if a technology that you're
interested in doesn't fit into one

00:02:08.270 --> 00:02:12.540
of these categories or isn't drawn
in one of these little bubbles,

00:02:12.540 --> 00:02:15.240
then you can go ahead and
implement that yourself,

00:02:15.270 --> 00:02:19.120
or ask on our developer list,
and maybe someone will help you out.

00:02:19.980 --> 00:02:23.260
So what I mean by the fact that
Quartz Composer wraps these

00:02:23.260 --> 00:02:27.460
technologies is that whether
you're a programmer or a designer,

00:02:27.510 --> 00:02:29.460
you don't actually have to
learn all the intricacies of

00:02:29.460 --> 00:02:31.510
working with these technologies.

00:02:31.690 --> 00:02:34.600
And so that means you don't have
to be proficient in Objective-C and

00:02:34.600 --> 00:02:37.120
really understand the technology
that you're working with.

00:02:37.150 --> 00:02:38.880
You really just have to
understand the capabilities that

00:02:38.880 --> 00:02:41.140
you want to take advantage of,
and then you can pretty

00:02:41.150 --> 00:02:44.340
easily employ that within the
Quartz Composer environment.

00:02:45.900 --> 00:02:49.600
So just briefly, some of the places that
Quartz Composer is integrated.

00:02:49.600 --> 00:02:51.780
We have things like
Photo Booth and iChat.

00:02:51.890 --> 00:02:56.070
And Quartz Composer is used to apply
all the filters to your input images.

00:02:56.080 --> 00:02:57.430
So if you've had a chance
to play with Photo Booth,

00:02:57.430 --> 00:02:58.530
you'll know what I'm talking about.

00:02:58.560 --> 00:03:01.610
And all of these filters actually
now come from the system-wide

00:03:01.610 --> 00:03:03.020
composition repository.

00:03:03.020 --> 00:03:06.340
So it's very easy to, for instance,
leverage all of the filters that

00:03:06.340 --> 00:03:10.040
you're familiar with in Photo Booth
within your own applications.

00:03:12.100 --> 00:03:14.210
Then we have iMovie
HD and Podcast Producer.

00:03:14.210 --> 00:03:17.860
And so, for instance,
these two applications use Quartz

00:03:17.860 --> 00:03:21.900
Composer to render graphics in both
a real-time and a non-real-time way.

00:03:22.970 --> 00:03:25.740
So, for instance, iMovie HD,
all of your little themes,

00:03:25.740 --> 00:03:28.100
which are beautifully
rendered in real-time,

00:03:28.100 --> 00:03:30.840
are also rendered out
in non-real-time to HD.

00:03:30.840 --> 00:03:34.490
Podcast Producer using Quartz Composer
to do things like lower thirds,

00:03:34.510 --> 00:03:35.380
titles, etc.

00:03:36.820 --> 00:03:41.210
QuickTime Anywhere you can play
back a QuickTime movie on OS X,

00:03:41.230 --> 00:03:45.850
as of Tiger, you can play back a Quartz
Composer composition.

00:03:45.850 --> 00:03:48.930
If you want to use that
content on Windows,

00:03:48.930 --> 00:03:53.220
you could always render it out
or export to QuickTime and then

00:03:53.380 --> 00:03:55.760
export as a frame sequence.

00:03:57.320 --> 00:04:01.650
QuickTime Anywhere you can play
back a QuickTime movie on OS X,

00:04:01.680 --> 00:04:04.620
as of Tiger,
you could always render it out

00:04:04.750 --> 00:04:07.090
or export as a frame sequence.

00:04:07.950 --> 00:04:10.680
Of course, there's screen savers.

00:04:10.750 --> 00:04:11.560
Definitely a lot of fun.

00:04:11.560 --> 00:04:14.200
We have some new ones in Leopard.

00:04:14.260 --> 00:04:17.100
And now in Leopard,
we also have integration with iTunes.

00:04:17.180 --> 00:04:20.560
And so now you can create music
visualizers using Quartz Composer.

00:04:20.560 --> 00:04:22.200
And we'll take a look
at that in a little bit.

00:04:22.240 --> 00:04:25.220
So how is content created?

00:04:28.050 --> 00:04:30.450
So as I mentioned,
Quartz Composer is integrated

00:04:30.450 --> 00:04:33.240
into the operating system,
but in order to create

00:04:33.240 --> 00:04:35.440
content for Quartz Composer,
you'll need to download

00:04:35.440 --> 00:04:36.320
the developer tools.

00:04:36.370 --> 00:04:40.960
And once you do that, they will appear in
developer applications.

00:04:40.970 --> 00:04:43.410
That's where you'll find
our main application.

00:04:43.500 --> 00:04:45.610
This is our main workspace
here on the left,

00:04:45.610 --> 00:04:47.560
and our viewer on the right.

00:04:47.620 --> 00:04:49.740
So you would define
content in the workspace,

00:04:49.740 --> 00:04:52.190
and then it would get
rendered in our viewer.

00:04:53.210 --> 00:04:56.380
So let's take a look at just a
simple example of how you define

00:04:56.380 --> 00:04:58.660
content in Quartz Composer.

00:04:58.710 --> 00:05:00.380
So if we can go to demo, please.

00:05:00.380 --> 00:05:00.880
Nice.

00:05:00.880 --> 00:05:08.900
All right, so as I mentioned,
developer applications.

00:05:13.600 --> 00:05:15.590
Here is Quartz Composer.

00:05:15.600 --> 00:05:22.750
So you'll notice on first launch,
a whole bunch of windows will pop up.

00:05:22.900 --> 00:05:24.560
The first thing to note
is the release notes.

00:05:24.560 --> 00:05:26.970
So if you're familiar with
Quartz Composer on Tiger,

00:05:26.980 --> 00:05:29.520
this is going to tell you what's changed,
what's new.

00:05:29.620 --> 00:05:31.920
For a more in-depth look
at some of these changes,

00:05:31.920 --> 00:05:36.940
you can go to the session later today,
Mastering the Quartz Composer Editor.

00:05:40.760 --> 00:05:44.940
And if you are new to Quartz
Composer in the Help menu,

00:05:44.940 --> 00:05:47.320
you'll see the Getting Started.

00:05:47.320 --> 00:05:49.860
And that'll just,
it's some documentation just to

00:05:49.860 --> 00:05:51.570
get you quickly up and running.

00:05:52.160 --> 00:05:54.980
So for this first example,
in our template picker,

00:05:54.980 --> 00:05:58.130
I'm just going to choose
a blank composition.

00:05:58.150 --> 00:06:00.610
Get cleaned up here a little bit.

00:06:04.770 --> 00:06:07.760
And so you'll notice three main windows.

00:06:08.130 --> 00:06:11.670
We have our workspace,
which is this gridded

00:06:11.670 --> 00:06:13.530
area here on the left.

00:06:13.590 --> 00:06:15.500
Again, this is where you define content.

00:06:15.620 --> 00:06:18.060
We have our viewer window,
which is this gray and white

00:06:18.110 --> 00:06:19.290
checked window on the right.

00:06:19.460 --> 00:06:21.040
This is where that content is rendered.

00:06:21.080 --> 00:06:23.520
And now, new in Leopard,
we have a patch creator.

00:06:23.520 --> 00:06:29.780
And this is where you actually search for
patches and add those to your workspace.

00:06:29.860 --> 00:06:32.980
So I'm just going to find a clear patch.

00:06:36.850 --> 00:06:39.960
So basically, for those of you that are
new to Quartz Composer,

00:06:39.960 --> 00:06:43.270
a patch can really be thought
about as just kind of a function.

00:06:43.420 --> 00:06:45.520
It's a basic building block
within Quartz Composer.

00:06:45.520 --> 00:06:48.760
And these functions,
or patches in this case,

00:06:48.760 --> 00:06:51.170
can have inputs and/or outputs.

00:06:51.210 --> 00:06:53.490
And oftentimes,
they'll act on those inputs,

00:06:53.510 --> 00:06:55.930
process some data,
and produce some output.

00:06:56.150 --> 00:07:01.500
So this first type of patch here,
as denoted by the pink top,

00:07:01.500 --> 00:07:02.920
is known as a consumer patch.

00:07:03.160 --> 00:07:05.160
And consumer patches
generally consume data,

00:07:05.210 --> 00:07:06.570
so they'll have some inputs on the left.

00:07:06.700 --> 00:07:10.860
And generally, consumer patches will
render to the screen.

00:07:10.860 --> 00:07:12.980
So in this case,
the clear patch is actually

00:07:12.980 --> 00:07:15.990
clearing the screen once per frame,
which is a common concept

00:07:15.990 --> 00:07:18.380
in computer animation.

00:07:20.090 --> 00:07:29.910
And also, consumer patches have an order
in which they're executed.

00:07:29.910 --> 00:07:29.910
So here at the top right
of our clear patch,

00:07:29.910 --> 00:07:29.910
we have the number one,
meaning this is being executed first.

00:07:30.570 --> 00:07:33.780
So I'm just going to
add a particle system.

00:07:33.790 --> 00:07:37.790
Most of you are probably familiar with a
particle system in some form or another.

00:07:37.810 --> 00:07:42.010
In this case,
we simply have a bunch of white squares

00:07:42.010 --> 00:07:44.570
that are flowing around on screen.

00:07:46.930 --> 00:07:51.160
And our particle system patch allows
us to define some of these parameters

00:07:51.160 --> 00:07:55.800
holistically over the particle system.

00:07:55.910 --> 00:08:00.110
So I'm just going to add a little image
to our particle system to get started.

00:08:02.380 --> 00:08:04.450
So I'm just going to drag
this image from the Finder and

00:08:04.460 --> 00:08:05.880
directly into our workspace.

00:08:05.900 --> 00:08:12.050
And what that did was that
actually created another patch.

00:08:12.090 --> 00:08:14.650
Here it's titled Particle Ball.

00:08:15.360 --> 00:08:17.960
And what happened was,
by dragging it from the Finder into

00:08:17.960 --> 00:08:21.960
the Quartz Composer workspace here,
Quartz Composer created a new patch

00:08:22.000 --> 00:08:25.230
called the Image Importer Patch,
copied the data from the Finder

00:08:25.550 --> 00:08:28.080
directly into our composition.

00:08:28.120 --> 00:08:30.360
And this created the second
type of patch in Quartz

00:08:30.360 --> 00:08:32.360
Composer known as the Processor.

00:08:32.450 --> 00:08:35.810
So I'm just gonna drag from my image
output port on my particle ball to the

00:08:35.810 --> 00:08:40.770
image input port on my particle system,
and you'll see a whole bunch of

00:08:41.180 --> 00:08:43.240
Little balls flying around on the screen.

00:08:43.290 --> 00:08:45.480
You'll notice they have a black border.

00:08:45.590 --> 00:08:48.140
This image actually does have an alpha.

00:08:48.220 --> 00:08:53.140
So if I just change my blending
mode from replaced to over,

00:08:53.140 --> 00:08:59.080
you can see we now have
proper transparency.

00:09:04.100 --> 00:09:39.000
( Transcript missing )

00:09:55.310 --> 00:09:59.700
So now we have a bunch of little
bubbles kind of flowing upwards.

00:09:59.700 --> 00:10:01.180
It's kind of fun.

00:10:03.140 --> 00:10:04.690
So the next thing I'm going
to do is add a little bit of

00:10:04.690 --> 00:10:06.060
interactivity to our example.

00:10:06.100 --> 00:10:12.310
And I'm going to do that
just by adding a mouse patch.

00:10:15.100 --> 00:10:18.360
The mouse patch is the third type of
patch found within Quartz Composer,

00:10:18.370 --> 00:10:21.290
or illustrates the third type of patch,
and this is known as a provider.

00:10:21.300 --> 00:10:23.680
And providers generally provide
data from an external source.

00:10:23.710 --> 00:10:28.790
So again, things like the keyboard,
the mouse, video input, etc.

00:10:29.440 --> 00:10:32.770
So I'm just going to connect my
X position and Y position from

00:10:32.770 --> 00:10:35.440
my mouse to my particle system.

00:10:36.470 --> 00:10:42.280
And you'll notice that I can now drag my
little particle system around the screen.

00:10:43.790 --> 00:10:54.700
Alessaandro Sabatelli:
I'm actually quite enjoyable.

00:10:54.700 --> 00:10:54.700
Alessaandro Sabatelli: But unfortunately,
I can't let go.

00:10:54.700 --> 00:10:54.700
That's because I'm directly driving
these parameters with my mouse position.

00:10:55.200 --> 00:11:10.390
Alessaandro Sabatelli:
And so the behavior that

00:11:10.390 --> 00:11:10.390
I'm really looking for,
what I'd like to be able to do is drag

00:11:10.390 --> 00:11:10.390
the particle system around when I'm
holding down the left mouse button.

00:11:10.390 --> 00:11:10.390
Then when I release
that left mouse button,

00:11:10.390 --> 00:11:10.390
I'm going to leave the
particle system there.

00:11:10.390 --> 00:11:10.390
So basically like a typical drag
and drop kind of experience.

00:11:10.840 --> 00:11:14.850
And one way you can achieve this
effect in Quartz Composer is what is

00:11:14.860 --> 00:11:16.560
known as the sample and hold patch.

00:11:16.780 --> 00:11:21.290
And the sample and hold patch will simply
remember a value when told to do so.

00:11:23.410 --> 00:11:26.340
I'm just going to get a sample and hold.

00:11:26.500 --> 00:11:31.540
And I can duplicate that, one for the X,
one for the Y, simply by holding down

00:11:31.540 --> 00:11:33.290
the Alt and dragging.

00:11:33.330 --> 00:11:38.180
Though I can just undo that, select that,
and duplicate directly.

00:11:41.290 --> 00:11:45.700
So I'll just connect my X and Y position
of my mouse to my sample and hold.

00:11:45.760 --> 00:11:53.990
And the left mouse button to the sampling
input of each of the sample and holds.

00:11:57.120 --> 00:12:07.530
And so now I can actually drag, release,
and place my little particle system.

00:12:13.580 --> 00:12:15.920
So there's actually one other
type of patch in Quartz Composer

00:12:16.160 --> 00:12:19.600
that you should be familiar with,
and this is known as the macro patch.

00:12:19.630 --> 00:12:22.240
And what the macro patch does
is it simply allows you to

00:12:22.240 --> 00:12:27.320
group patches which are similar
or have similar functionality.

00:12:27.790 --> 00:12:29.780
Alessaandro Sabatelli:
And it also allows you to kind

00:12:29.780 --> 00:12:32.880
of clean up your workspace,
which is definitely key as things

00:12:32.910 --> 00:12:35.200
become more and more complicated.

00:12:35.220 --> 00:12:38.080
Alessaandro Sabatelli:
So in order to illustrate that,

00:12:38.080 --> 00:12:39.980
I will just pick my two
sample and hold patches.

00:12:40.480 --> 00:12:44.320
And in our menu bar,
we have a Create Macro button.

00:12:44.320 --> 00:12:46.560
So I can just click on that.

00:12:46.690 --> 00:12:52.000
And Quartz Composer created a new patch,
which is called Macro Patch.

00:12:52.200 --> 00:12:55.750
And Macro Patches are denoted
by their square corners.

00:12:56.380 --> 00:13:00.110
So this macro patch has three
inputs corresponding to the X,

00:13:00.170 --> 00:13:02.800
Y,
and left mouse button of our mouse patch,

00:13:02.970 --> 00:13:04.940
and outputs two values,
the X and Y position,

00:13:04.940 --> 00:13:08.520
which is controlling the X and
Y position of our particle system.

00:13:09.740 --> 00:13:13.570
So it's important to note that what
I've actually done is I've just created

00:13:13.580 --> 00:13:15.950
a hierarchy within our workspace.

00:13:16.070 --> 00:13:20.300
So we have our main workspace,
or the top level of our workspace,

00:13:20.300 --> 00:13:23.100
which is known as the root macro patch.

00:13:23.150 --> 00:13:25.300
And you can actually see that
in our new hierarchy browser

00:13:25.300 --> 00:13:29.900
at the upper left-hand corner,
where it says root macro patch.

00:13:29.990 --> 00:13:34.330
And so if I delve into our macro
patch by simply double-clicking it,

00:13:35.230 --> 00:13:37.760
You'll notice at the upper left
hand corner it says root macro

00:13:37.830 --> 00:13:39.260
patch and then macro patch.

00:13:39.260 --> 00:13:41.090
We're now inside of that macro patch.

00:13:41.200 --> 00:13:44.500
You'll notice we have our
two sample and hold patches.

00:13:45.170 --> 00:13:48.640
And Quartz Composer has also created
this Boolean splitter here on the left,

00:13:48.640 --> 00:13:51.340
which corresponds to
the left mouse button.

00:13:51.420 --> 00:13:54.830
And so that the Boolean splitter simply
takes a value from its input port

00:13:54.960 --> 00:13:56.890
and provides it on its output port.

00:13:56.970 --> 00:13:59.150
In this case,
it's providing that left mouse

00:13:59.300 --> 00:14:02.190
button to both sampling inputs
of our sample and holds.

00:14:02.300 --> 00:14:06.270
It's also important to note that
there are these colored or these

00:14:06.270 --> 00:14:10.690
solid circles for inputs and outputs,
and these indicate that these values

00:14:10.690 --> 00:14:12.550
are published to the top layer.

00:14:13.550 --> 00:14:16.290
So I can just go back to our
root macro patch by simply

00:14:16.720 --> 00:14:20.530
clicking on the root macro patch
here in our hierarchy browser.

00:14:21.180 --> 00:14:29.730
Alessaandro Sabatelli:
As a good practice,

00:14:29.730 --> 00:14:29.730
I'm going to go ahead and
rename our macro patch.

00:14:29.730 --> 00:14:29.730
You can simply do that by double-clicking
on the title bar of your patch.

00:14:34.520 --> 00:14:37.200
Here's our sampled position.

00:14:37.210 --> 00:14:39.820
And as another good practice,
you're going to want to go ahead and

00:14:39.830 --> 00:14:42.340
rename your inputs and your outputs.

00:14:42.340 --> 00:14:47.160
And you can do that now in Leopard
by using the Patch Inspector.

00:14:47.450 --> 00:14:51.180
And going to published
inputs and outputs.

00:14:51.230 --> 00:14:54.430
And I can just change the
names of my published inputs.

00:14:54.440 --> 00:15:01.950
So I'm really just doing this to kind of
hopefully reinforce some best practices.

00:15:01.980 --> 00:15:09.920
And then my exposition for output.

00:15:19.230 --> 00:15:32.340
Alessaandro Sabatelli:
So this is kind of fun.

00:15:32.340 --> 00:15:32.340
We can make this a little bit more fun.

00:15:32.340 --> 00:15:32.340
I can go ahead and just maybe modulate
the color of my little particles.

00:15:32.340 --> 00:15:32.340
So HSL color.

00:15:43.100 --> 00:15:47.380
It's a little garish,
but you get the idea.

00:15:47.470 --> 00:15:49.220
And then say, for instance,
I could just pick a

00:15:49.220 --> 00:15:51.930
random hue every frame.

00:15:54.990 --> 00:16:01.680
By grabbing a random patch,
and there we have our little

00:16:01.700 --> 00:16:03.790
colored particle system.

00:16:05.210 --> 00:16:07.740
So this is just a very basic example,
just to kind of give you guys a

00:16:07.740 --> 00:16:12.440
little bit of a tour of how you
create content in Quartz Composer.

00:16:12.560 --> 00:16:16.230
Let's take a look at actually making
a more interesting or fun example.

00:16:19.530 --> 00:16:22.600
So for this next demo,
we're going to take a look at creating

00:16:22.600 --> 00:16:25.510
a music visualizer for use in iTunes.

00:16:30.240 --> 00:16:32.080
So I'm going to create a new document,
and this time I'm going to

00:16:32.100 --> 00:16:35.700
create a document from the
Music Visualizer template.

00:16:35.750 --> 00:16:40.950
And you'll notice here below that we have

00:16:43.100 --> 00:17:01.100
( Transcript missing )

00:17:01.580 --> 00:17:05.670
You're not actually creating
music visualizers for iTunes.

00:17:05.860 --> 00:17:09.420
You're just creating music
visualizers that can be used

00:17:09.420 --> 00:17:14.470
really with any application which
is going to communicate with our

00:17:14.470 --> 00:17:17.390
composition using predefined inputs.

00:17:17.480 --> 00:17:21.400
So as you recall,
I had mentioned that our composition had

00:17:21.400 --> 00:17:23.760
what was known as a root macro patch.

00:17:23.760 --> 00:17:27.080
You can actually publish inputs and
outputs from this root macro patch,

00:17:27.080 --> 00:17:29.700
and this is really how your
applications can communicate

00:17:29.700 --> 00:17:31.340
with different compositions.

00:17:31.500 --> 00:17:33.980
So in this case,
our music visualizer is going to have

00:17:33.980 --> 00:17:38.230
a bunch of inputs which are predefined,
and this is how iTunes is going to

00:17:38.230 --> 00:17:41.300
send data directly to our composition.

00:17:45.670 --> 00:17:48.320
Choose Music Visualizer,
and you'll notice that we have this

00:17:48.330 --> 00:17:52.440
nice little gray gradient in our viewer.

00:17:57.900 --> 00:18:03.780
And here are the required inputs
for our Music Visualizer protocol.

00:18:03.780 --> 00:18:07.050
In this case,
the audio peak and the audio spectrum.

00:18:07.510 --> 00:18:14.180
Alessaandro Sabatelli:
And then we also have

00:18:14.180 --> 00:18:14.180
some optional inputs,
which are in this case the track signal,

00:18:14.180 --> 00:18:14.180
track position, and some track info.

00:18:15.330 --> 00:18:18.720
And so you'll notice that
nothing's actually happening.

00:18:18.720 --> 00:18:22.510
And that's because we'll need to get
some data coming from iTunes and,

00:18:22.510 --> 00:18:25.630
in fact, some music actually playing.

00:18:25.700 --> 00:18:28.480
So I'm going to go ahead and open iTunes.

00:18:30.540 --> 00:18:35.260
And as this is,
or as Leopard is still in beta,

00:18:35.260 --> 00:18:37.350
we're still working on
integration with iTunes.

00:18:37.350 --> 00:18:42.410
So in order to actually get the data from
iTunes into the Quartz Composer editor,

00:18:42.410 --> 00:18:45.030
what you'll just need to do is have
a Quartz Composition playing as

00:18:45.040 --> 00:18:48.140
a music visualizer within iTunes.

00:18:48.370 --> 00:18:52.130
So I'll get some music playing.

00:18:52.900 --> 00:18:55.570
So I just have a simple composition
which displays our little

00:18:55.570 --> 00:18:58.270
icon and a heads up display.

00:18:59.990 --> 00:19:02.660
So this music was actually created
by an employee here at Apple.

00:19:02.660 --> 00:19:03.800
His name is Justin Maxwell.

00:19:03.800 --> 00:19:04.910
I hope you enjoy it.

00:19:04.940 --> 00:19:09.620
And if you do so, please take a look at
some of his other work.

00:19:10.140 --> 00:19:13.910
So what we have here is just
our simple gradient and a 16

00:19:14.350 --> 00:19:19.090
band spectrum going from lows on
the left to highs on the right,

00:19:19.100 --> 00:19:21.360
reds to greens.

00:19:22.650 --> 00:19:24.390
And really in Quartz Composer,
what you're doing is you're

00:19:24.400 --> 00:19:25.610
defining a data flow.

00:19:25.720 --> 00:19:28.760
So I can show you a little
bit of what's going on here.

00:19:28.790 --> 00:19:34.630
So we have our data coming in on
that required audio spectrum port.

00:19:36.410 --> 00:19:39.220
And we have our 16 members
coming in in structure,

00:19:39.220 --> 00:19:41.040
going from 0 through 15.

00:19:41.050 --> 00:19:43.480
Each of these is a number.

00:19:43.480 --> 00:19:47.050
And these numbers are actually
just driving our little bars.

00:19:49.700 --> 00:19:51.700
Let's make a little space here.

00:19:51.700 --> 00:19:56.750
So the first thing that I'm going
to do is add a little character that

00:19:56.750 --> 00:20:02.940
I've created for this year's WWDC.

00:20:06.050 --> 00:20:18.790
Alessaandro Sabatelli:
And I'm sure you can

00:20:18.790 --> 00:20:18.790
probably guess who that is.

00:20:18.790 --> 00:20:18.790
As you can see, I'm going a little gray.

00:20:18.790 --> 00:20:18.790
Hopefully that's not from overwork.

00:20:19.890 --> 00:20:22.960
So here's my little character that
I built in a style that mostly,

00:20:22.960 --> 00:20:26.770
or most of you are probably familiar
with in some form or another.

00:20:27.140 --> 00:20:30.460
And what you'll notice is
that when I went full screen,

00:20:30.500 --> 00:20:33.190
all of our bars, our text,
everything is still very sharp.

00:20:33.190 --> 00:20:36.330
And that's because with Quartz Composer,
you can actually define

00:20:36.340 --> 00:20:38.000
resolution independent content.

00:20:38.000 --> 00:20:42.450
This is definitely something that's
becoming more and more important as

00:20:42.450 --> 00:20:45.010
we start to target different devices.

00:20:49.260 --> 00:20:51.960
So here's my little character.

00:20:52.010 --> 00:20:55.340
I've rigged him up so
I can actually control him.

00:20:56.240 --> 00:21:00.920
So let's see, so for instance I control
his position in z space.

00:21:00.950 --> 00:21:03.360
I can make him smile.

00:21:04.910 --> 00:21:05.900
Blink.

00:21:05.900 --> 00:21:10.850
Get him to nod his head to the music.

00:21:12.500 --> 00:21:28.400
( Transcript missing )

00:21:29.120 --> 00:21:32.400
And again, if you get a little lost,
we have our little hierarchy browser

00:21:32.400 --> 00:21:34.600
in the upper left-hand corner.

00:21:34.600 --> 00:21:39.590
Right now I'm inside myself,
interestingly enough.

00:21:40.810 --> 00:21:46.970
Alessaandro Sabatelli:
And so what I'm doing is I'm rendering

00:21:46.970 --> 00:21:46.970
out an image of my little character.

00:21:47.600 --> 00:21:58.500
( Transcript missing )

00:21:59.330 --> 00:22:03.850
So within my actual character,
basically I'm just kind of

00:22:03.870 --> 00:22:06.810
building him up out of little
pieces that I can control.

00:22:06.820 --> 00:22:09.280
So the first thing that
I do is I draw his legs,

00:22:09.280 --> 00:22:12.590
and then I draw his torso,
which includes the little hands.

00:22:12.620 --> 00:22:16.470
His head, which is just really a little
head drawn on a sprite that

00:22:16.470 --> 00:22:18.520
I can control the Y position of.

00:22:18.560 --> 00:22:21.730
In order to do this,
I just have a little reference

00:22:21.820 --> 00:22:24.800
character that I display,
and then I take all of these

00:22:24.800 --> 00:22:27.410
little pieces and line them up,
and then I can animate them.

00:22:28.080 --> 00:22:34.170
So here's my little reference character,
which is a little disturbing.

00:22:37.680 --> 00:22:39.600
Okay.

00:22:39.600 --> 00:22:43.280
So now that you kind of see a little bit
of how the structure is employed in order

00:22:43.280 --> 00:22:46.560
to kind of create this little character,
we'll take a look at actually

00:22:46.560 --> 00:22:48.470
animating this with the music.

00:22:58.530 --> 00:23:02.140
So, just as a side note,
generally what I've found when

00:23:02.140 --> 00:23:05.970
I'm creating abstract characters
that are being driven by music,

00:23:05.990 --> 00:23:10.040
I often find that I'm just generally
inundated with a little too much data.

00:23:10.040 --> 00:23:13.930
So in this case I have 16 bars of audio,
or 16 bands of audio,

00:23:13.930 --> 00:23:17.170
but I don't have 16 parameters
that I want to directly

00:23:17.170 --> 00:23:18.860
drive from low to high.

00:23:19.950 --> 00:23:22.600
So what I generally do is
I generally reduce that data.

00:23:22.600 --> 00:23:27.910
So in this case what I've done is I have
broken this data up into three buckets:

00:23:28.000 --> 00:23:31.250
lows, mids, and highs,
and then I use that to drive

00:23:31.260 --> 00:23:33.080
higher level parameters.

00:23:33.400 --> 00:23:38.260
So what I did was I simply dragged
my Simplify Audio composition,

00:23:38.260 --> 00:23:41.050
again, it really can be thought
about as just a macro patch,

00:23:41.060 --> 00:23:43.390
dragged that directly
into my new composition,

00:23:43.390 --> 00:23:46.200
and by doing that it just copied
the contents of that original

00:23:46.200 --> 00:23:48.590
composition into my new composition.

00:23:50.700 --> 00:23:54.860
And I'm just going to connect that there.

00:23:54.860 --> 00:23:57.410
And then I have some automation.

00:23:57.900 --> 00:24:02.560
So generally what I'm doing
here is simplifying the audio,

00:24:02.560 --> 00:24:05.360
then using that to drive
higher level parameters,

00:24:05.500 --> 00:24:10.980
and those will drive my
character's parameters here.

00:24:11.310 --> 00:24:12.550
So I'm just going to rig him up.

00:24:12.610 --> 00:24:15.100
So in this case, he's going to smile
anytime there's any bass,

00:24:15.100 --> 00:24:17.180
as you could imagine.

00:24:17.720 --> 00:24:20.800
He's going to blink any time
there's a high level noise that

00:24:20.870 --> 00:24:23.100
breaks a certain threshold.

00:24:26.030 --> 00:24:28.000
He'll start nodding
his head to the music.

00:24:28.000 --> 00:24:33.100
I'll get him to pump his little fists.

00:24:37.700 --> 00:24:39.700
This is kind of my favorite part here.

00:24:39.700 --> 00:24:43.700
It's kind of like my little break off.

00:24:57.900 --> 00:25:00.100
So if this was a club that
I was going to be going to,

00:25:00.100 --> 00:25:02.860
hopefully there'd be better visuals
than these little bars on the floor,

00:25:02.860 --> 00:25:06.440
even though that would
probably be pretty cool.

00:25:06.440 --> 00:25:09.580
So I'm just going to go ahead and
delete our little audio spectrum.

00:25:09.580 --> 00:25:12.490
You can see that he's still
moving with the music.

00:25:13.960 --> 00:25:17.140
So I have this kind of like
abstract character here.

00:25:17.140 --> 00:25:18.670
This is being drawn on top of everything.

00:25:18.670 --> 00:25:23.110
I'm just going to move that behind
and connect that up with the music.

00:25:37.230 --> 00:25:41.960
So now here we have myself, I guess,
standing in front of this abstract

00:25:42.230 --> 00:25:45.040
colored character behind me.

00:25:45.050 --> 00:25:46.240
Again, I'm doing the same thing.

00:25:46.240 --> 00:25:48.280
I'm just breaking that
audio down into like lows,

00:25:48.280 --> 00:25:52.490
mids, and highs, and using that to drive
higher level parameters.

00:25:56.020 --> 00:25:59.450
So keeping with tradition,
for those of you that saw last year's

00:25:59.450 --> 00:26:05.090
session or were able to attend,
we introduced Peter Graffagnino,

00:26:05.090 --> 00:26:08.210
our director of the interactive
media group at Apple,

00:26:08.210 --> 00:26:09.000
into our composition.

00:26:09.000 --> 00:26:11.280
And so I'm going to go
ahead and do that again,

00:26:11.280 --> 00:26:13.100
just because I couldn't resist.

00:26:13.100 --> 00:26:15.820
So here we have Peter.

00:26:23.900 --> 00:26:26.120
He's kind of looking a little sad,
and it's probably because

00:26:26.120 --> 00:26:28.170
he's not hearing the music.

00:26:28.170 --> 00:26:31.710
So let's go ahead and
connect him to the audio.

00:26:31.900 --> 00:26:37.460
And so there we have
our final composition.

00:26:51.700 --> 00:26:53.700
All right.

00:26:53.700 --> 00:26:57.200
So you can imagine there's a lot
of fun things that you can do.

00:26:57.230 --> 00:27:00.620
And again,
now we've just created a composition

00:27:00.620 --> 00:27:04.340
which can simply be dropped
into iTunes and sent to all your

00:27:04.340 --> 00:27:07.860
friends and sent all over Apple,
for instance.

00:27:25.380 --> 00:27:26.460
So if we can go back to slides.

00:27:26.460 --> 00:27:35.630
All right, so now you have an idea of how
you actually create content using

00:27:35.640 --> 00:27:40.720
Quartz Composer and some examples
of how that content is used.

00:27:41.350 --> 00:27:44.330
Let's take a look at
some further examples.

00:27:44.420 --> 00:27:49.830
So we just took a look at music
visualization using Quartz Composer.

00:27:49.830 --> 00:27:53.120
And so that is data coming
directly from within the system.

00:27:53.120 --> 00:27:56.140
So for this next demo,
we're going to take a look at

00:27:56.140 --> 00:27:58.320
visualizing data coming from the web.

00:27:59.000 --> 00:28:02.720
So what I did was I chose
Twitter as my example of data to

00:28:02.770 --> 00:28:05.200
visualize coming from the web.

00:28:05.200 --> 00:28:08.130
For those of you that are not
familiar with what Twitter is,

00:28:08.190 --> 00:28:13.390
it's basically a social messaging
service which allows you to stay

00:28:13.390 --> 00:28:17.520
in touch or communicate with
what you call friends in Twitter.

00:28:17.520 --> 00:28:22.320
These are basically just contacts
that you decide are your friends.

00:28:22.420 --> 00:28:32.410
Alessaandro Sabatelli:
And it's actually a pretty

00:28:32.410 --> 00:28:32.410
interesting service because there's
some nice constraints on it,

00:28:32.410 --> 00:28:32.410
and it's really easy to communicate with.

00:28:33.040 --> 00:28:35.980
So for instance,
you can post the minutiae of

00:28:35.980 --> 00:28:40.240
your daily life to Twitter using,
for instance, the main web interface.

00:28:40.270 --> 00:28:45.540
You can also use SMS,
so via your mobile phone.

00:28:45.670 --> 00:28:50.020
You can use instant messenger,
and you can also use web services.

00:28:51.710 --> 00:28:55.500
So what I found in using Twitter,
from my point of view,

00:28:55.500 --> 00:29:00.300
is that now that I have so many friends,

00:29:02.800 --> 00:29:05.190
Especially considering I now
have it hooked up via SMS,

00:29:05.260 --> 00:29:08.800
I seem to be getting these
posts every 10 or 15 minutes,

00:29:08.800 --> 00:29:12.190
24 hours a day, seven days a week.

00:29:13.570 --> 00:29:15.240
And it's not really going very well.

00:29:15.240 --> 00:29:18.360
I'm basically just being inundated
with tons of information.

00:29:19.630 --> 00:29:23.590
And what I found is that almost every
visualization or user interface that

00:29:23.670 --> 00:29:27.290
interacts with the Twitter service
displays all the information coming

00:29:27.360 --> 00:29:29.640
from Twitter in a linear fashion.

00:29:29.650 --> 00:29:32.710
So in this case,
we have the Twitter home page.

00:29:32.980 --> 00:29:37.330
And so with all of my friends,
this list can get very quickly saturated.

00:29:37.510 --> 00:29:40.150
So here we have a few other examples.

00:29:40.160 --> 00:29:43.540
Some of them can be more
attractive than others.

00:29:43.580 --> 00:29:46.840
Over here on the upper right,
we have one which is using Quartz

00:29:46.870 --> 00:29:52.000
Composer in its menu bar to display
a little background animation.

00:29:52.180 --> 00:29:53.950
But you can see that they
all basically display this

00:29:53.950 --> 00:29:56.340
information in a linear fashion.

00:29:56.400 --> 00:30:00.990
And as I mentioned,
it's just complete information overload.

00:30:01.710 --> 00:30:04.440
One example that I did find
is called Twitter Vision,

00:30:04.480 --> 00:30:07.260
which is actually really interesting
Google Maps and Twitter mashup.

00:30:07.320 --> 00:30:11.300
And what it does is that people that
post what we call tweets to Twitter and

00:30:11.300 --> 00:30:15.200
include localization information,
this is actually displayed

00:30:15.630 --> 00:30:19.310
in 2D and also in 3D in this
case on a little Google Earth.

00:30:19.390 --> 00:30:22.380
So here we have Stephen Colbert,
and he's wondering what he

00:30:22.380 --> 00:30:23.990
can't do with Quartz Composer.

00:30:24.150 --> 00:30:35.480
Alessaandro Sabatelli:
I guess you'll have to wait to see.

00:30:35.480 --> 00:30:35.480
So what I've done is I've
created a little visualization

00:30:35.480 --> 00:30:35.480
of what I call the Twitterverse.

00:30:35.480 --> 00:30:35.480
So if we can go back to demo, please.

00:31:04.850 --> 00:31:06.840
So here is my Twitterverse.

00:31:06.860 --> 00:31:09.240
That's me at the center.

00:31:09.300 --> 00:31:11.430
Of course, I would be at the center
of my own Twitterverse.

00:31:11.440 --> 00:31:16.460
And these are my friends
surrounding me in the periphery.

00:31:16.460 --> 00:31:22.000
What I've done is I've gone ahead and
tried to make the friends that I'm most

00:31:22.030 --> 00:31:24.880
interested in more easily identified.

00:31:24.880 --> 00:31:28.960
So in this case, they're larger,
they're brighter, they're closer to me.

00:31:28.960 --> 00:31:32.180
And then I have some
friends on the periphery,

00:31:32.180 --> 00:31:36.220
and they're darker and further away.

00:31:37.100 --> 00:31:56.510
Alessaandro Sabatelli:
For those of you that are

00:31:56.510 --> 00:31:56.510
familiar with Time Machine,
you might recognize our

00:31:56.510 --> 00:31:56.510
little background here.

00:31:56.510 --> 00:31:56.510
So the background that we built
in last year's hands-on session,

00:31:56.510 --> 00:31:56.510
gone ahead and recycled that.

00:31:56.510 --> 00:31:56.510
So we have this background layer,
which is being animated in

00:31:56.510 --> 00:31:56.510
real time using Core Image,
among other technologies.

00:31:56.510 --> 00:31:56.510
And

00:31:57.750 --> 00:32:00.090
I'm also using Core Image to
kind of process our images,

00:32:00.090 --> 00:32:02.700
and we'll take a little
look at that in a second.

00:32:02.700 --> 00:32:09.280
All right, so let's take a look at how
this was actually built.

00:32:12.340 --> 00:32:13.860
So here's my composition.

00:32:13.900 --> 00:32:16.760
It's basically broken
up into two main areas.

00:32:16.780 --> 00:32:20.420
On the left, I have all of my data coming
from Twitter that I'm processing.

00:32:20.640 --> 00:32:22.860
And then on the right,
what I'm doing is I'm just kind

00:32:22.860 --> 00:32:24.970
of displaying that information.

00:32:30.950 --> 00:32:35.000
So the data that I end up getting
from Twitter and processing,

00:32:35.000 --> 00:32:37.490
I end up getting my user image.

00:32:39.700 --> 00:32:57.870
Alessaandro Sabatelli:
I've designed a bunch

00:32:57.870 --> 00:32:57.870
of my friend images,
which I've then packed into a structure

00:32:57.870 --> 00:32:57.870
for display using an iterator.

00:32:57.870 --> 00:32:57.870
And then my friend tweets,
which I actually didn't show you,

00:32:57.870 --> 00:32:57.870
but I can go ahead and display what my
friends are saying at any given time.

00:33:05.850 --> 00:33:08.060
So let's take a look at how
you actually get data from

00:33:08.060 --> 00:33:10.960
the web using Quartz Composer.

00:33:11.050 --> 00:33:15.630
So the Twitter service requires
that you authenticate or log in.

00:33:15.900 --> 00:33:18.580
It's not a very sophisticated service,
but in this case what you

00:33:18.580 --> 00:33:23.190
basically do is you create a
URL and post that to Twitter.

00:33:23.290 --> 00:33:25.330
And once you do that,
you'll be authenticated for

00:33:25.330 --> 00:33:27.470
a certain amount of time.

00:33:27.490 --> 00:33:30.500
So in this case,
just a note for this demo,

00:33:30.770 --> 00:33:33.060
All of the data that you're
seeing here is local.

00:33:33.100 --> 00:33:36.100
And the reason,
as most of you can imagine,

00:33:36.100 --> 00:33:42.850
is not that I don't trust all of you,
but I definitely don't trust some of you.

00:33:44.000 --> 00:33:54.800
( Transcript missing )

00:33:55.920 --> 00:33:58.920
So here I construct my
username and password,

00:33:59.080 --> 00:34:02.770
string, which I won't show you.

00:34:03.660 --> 00:34:10.420
And then I just go ahead and post that to
Twitter using our XML Downloader patch,

00:34:10.420 --> 00:34:12.680
which is also new in Leopard.

00:34:14.770 --> 00:34:16.930
So basically,
once you've logged in or authenticated,

00:34:16.930 --> 00:34:19.940
then I can go ahead and get
information about myself and my

00:34:19.940 --> 00:34:22.890
friends from the Twitter service.

00:34:24.620 --> 00:34:28.570
So I get my user info,
and that includes the user image

00:34:28.610 --> 00:34:30.260
that I had mentioned earlier.

00:34:30.260 --> 00:34:32.120
Let's see.

00:34:32.200 --> 00:34:33.840
It's here.

00:34:35.170 --> 00:34:37.630
That's kind of a little bit
of an interesting process.

00:34:37.750 --> 00:34:44.120
So again, I download my XML using
our XML downloader patch.

00:34:47.670 --> 00:34:52.000
And basically get the URL for that image.

00:34:52.020 --> 00:34:57.000
Then I use our image downloader
patch to download that image.

00:34:57.250 --> 00:35:02.430
And once that image is downloaded,
I then use Core Image to take this image,

00:35:02.430 --> 00:35:09.100
which, as you can see here,
is 48 by 48 pixels square.

00:35:10.570 --> 00:35:13.220
Alessaandro Sabatelli:
I then blow that up using

00:35:13.220 --> 00:35:17.650
Core Image to 256x256 square,
and I add these nice little rounded

00:35:17.650 --> 00:35:19.200
corners and this little highlight.

00:35:19.330 --> 00:35:22.840
So I basically create this
little badge of my character.

00:35:22.890 --> 00:35:26.560
Alessaandro Sabatelli:
And this allows me to overcome the icon

00:35:26.680 --> 00:35:29.930
limit size of 48x48 inherent in Twitter.

00:35:29.990 --> 00:35:33.490
And so again, I can just go full screen,
and I can still get

00:35:33.530 --> 00:35:35.200
some nice quality here.

00:35:42.130 --> 00:35:44.440
Okay, so my friends data,
it's a little bit more complicated

00:35:44.440 --> 00:35:48.120
there because in this case I have,
I don't know,

00:35:48.300 --> 00:35:51.240
20 some odd friends or friends.

00:35:51.240 --> 00:35:54.920
And I want to do the same
thing to all of these images.

00:35:57.840 --> 00:36:02.600
So what I'm doing here,
I won't really get too deeply into it,

00:36:02.600 --> 00:36:05.120
but I can just kind of explain
it to you on a higher level.

00:36:05.120 --> 00:36:08.660
What I do is basically the same thing
that I just did for my first user image.

00:36:08.670 --> 00:36:11.750
I get my friend's image URL.

00:36:11.860 --> 00:36:13.700
I go ahead and download that image.

00:36:13.720 --> 00:36:16.180
I then process it using core image.

00:36:16.200 --> 00:36:18.880
And then I pack that into a structure.

00:36:18.890 --> 00:36:22.490
And you can now do that
in JavaScript inside of

00:36:22.530 --> 00:36:24.930
Quartz Composer for Leopard.

00:36:25.120 --> 00:36:26.840
And once I've packed
that into that structure,

00:36:26.840 --> 00:36:31.080
I can then, using feedback,
re-signal using a new

00:36:31.080 --> 00:36:32.990
URL for my friend image.

00:36:33.320 --> 00:36:36.250
I can then re-signal another download,
grab the next friend's image,

00:36:36.350 --> 00:36:38.300
process that,
pack that into the structure,

00:36:38.300 --> 00:36:42.160
and continue basically going down
the list and downloading all of my

00:36:42.160 --> 00:36:44.580
friend's images and processing them.

00:36:47.840 --> 00:36:51.360
So I can actually show
you that in progress.

00:36:51.510 --> 00:36:54.150
First, I'm going to show you this.

00:36:54.210 --> 00:36:56.960
This looks like a lot of
connections and this big patch.

00:36:57.130 --> 00:37:01.190
So what I'm actually doing here is I'm
just getting a whole bunch of data,

00:37:01.270 --> 00:37:05.530
or a whole bunch of progress data,
from all of my XML downloaders and

00:37:05.530 --> 00:37:08.300
concatenating that into a string.

00:37:08.630 --> 00:37:27.310
Alessaandro Sabatelli:
And this is really just going

00:37:27.310 --> 00:37:27.310
to give me some debug info.

00:37:27.310 --> 00:37:27.310
So generally when I'm dealing
with an external service,

00:37:27.310 --> 00:37:27.310
I like to know what's going on because,
so for instance, Twitter could be down,

00:37:27.310 --> 00:37:27.310
and I could just be bashing my head
against the desk or something like that.

00:37:27.310 --> 00:37:27.310
So I can just go ahead and turn that on.

00:37:27.310 --> 00:37:27.310
Here's my debug info.

00:37:28.610 --> 00:37:38.260
Alessaandro Sabatelli:
So if I were to start this over,

00:37:38.260 --> 00:37:38.260
you can see very quickly,
because it's local,

00:37:38.260 --> 00:37:38.260
it downloaded a whole bunch of images.

00:37:38.260 --> 00:37:38.260
So if you look on the right-hand side,

00:37:39.300 --> 00:37:40.630
You can just see a bunch
of numbers changing,

00:37:40.670 --> 00:37:42.040
things like that.

00:37:42.050 --> 00:37:44.580
So this is going to tell me each
step of the way what's going

00:37:44.580 --> 00:37:46.810
on with the Twitter service.

00:37:55.110 --> 00:37:58.500
So once I have all of my
friend images pre-processed,

00:37:58.500 --> 00:38:00.520
I do the same thing
for my friends' tweets.

00:38:00.670 --> 00:38:02.880
So these are going to
be updated periodically.

00:38:03.000 --> 00:38:06.000
These are the posts that they're
actually posting to the Twitter service.

00:38:06.000 --> 00:38:09.880
I go ahead and grab those and pack
those into a structure as well.

00:38:09.880 --> 00:38:14.000
And so then we have all of the
data that we actually need.

00:38:20.300 --> 00:38:22.860
So on the rendering
side of our composition,

00:38:22.860 --> 00:38:25.520
the first thing I'm doing
is I'm clearing the screen.

00:38:25.540 --> 00:38:30.020
Then I'm drawing our galaxy,
which I can go ahead and disable,

00:38:30.020 --> 00:38:31.880
and then re-enable.

00:38:31.950 --> 00:38:34.170
So that's our little galaxy.

00:38:35.370 --> 00:38:38.160
And there's this little input here,
and it's called Start Supernova.

00:38:38.320 --> 00:38:41.670
So basically,
once my data has been downloaded,

00:38:41.730 --> 00:38:45.590
then I indicate to this macro
patch that it can start its

00:38:45.650 --> 00:38:48.930
big bang or its explosion,
its supernova.

00:38:56.060 --> 00:38:58.580
And the way that this really
works is once I tell this

00:38:58.890 --> 00:39:03.200
macro to start the supernova,
I start a stopwatch,

00:39:03.200 --> 00:39:07.170
which is really the time
base for this macro patch.

00:39:07.330 --> 00:39:10.400
And using the new
timelines patch in Leopard,

00:39:10.450 --> 00:39:14.160
I can create an introduction
animation for our composition.

00:39:16.080 --> 00:39:18.640
And so these are the timelines.

00:39:23.860 --> 00:39:26.830
These are the timelines that
I'm using to actually do that.

00:39:31.300 --> 00:39:42.490
Alessaandro Sabatelli:
I can show you that again.

00:39:42.490 --> 00:39:42.490
And that's that whole kind
of expansion of the galaxy,

00:39:42.490 --> 00:39:42.490
the stars flowing outwards,
that little lenticular

00:39:42.490 --> 00:39:42.490
halo on the outside.

00:39:49.190 --> 00:39:54.420
Then I go ahead and draw the
little stems coming from my tweets,

00:39:54.490 --> 00:39:57.660
which I want to draw
underneath my friend images.

00:39:57.740 --> 00:40:00.930
I draw my friend images
using an iterator.

00:40:02.740 --> 00:40:05.510
Then I actually draw the friends'
tweets on top of those in these

00:40:05.510 --> 00:40:07.940
little bubbles that you see here.

00:40:09.640 --> 00:40:12.380
Then my user image at the center,
and then a little bit of a glow

00:40:12.380 --> 00:40:17.500
on top to add a little bit of
radiance to the composition.

00:40:17.500 --> 00:40:23.000
And that about covers it.

00:40:23.000 --> 00:40:29.270
All right, if we can go back to slides.

00:40:40.140 --> 00:40:42.890
So that shows you a little
bit of how you can interact

00:40:42.980 --> 00:40:47.410
with data coming from the web,
and how you can actually use

00:40:47.410 --> 00:40:50.510
Quartz Composer in more of a
passive visualization sense.

00:40:50.600 --> 00:40:53.350
But you can imagine extending
something like the Twitterverse

00:40:53.510 --> 00:40:57.500
by adding it to your application,
adding it to a widget.

00:40:58.480 --> 00:41:03.120
And in so doing, you can add a little bit
more interactivity to it.

00:41:03.120 --> 00:41:06.340
So say, for instance,
you could click on your main user icon,

00:41:06.340 --> 00:41:09.040
drop down a little bubble,
post your little tweets.

00:41:09.040 --> 00:41:10.540
You can even move a step further.

00:41:10.540 --> 00:41:13.180
Say, for instance,
clicking on your friends directly,

00:41:13.320 --> 00:41:18.120
dropping down a little bubble,
posting tweets directly to them.

00:41:18.210 --> 00:41:21.690
Say, for instance, you could visualize
communication between friends,

00:41:21.690 --> 00:41:26.000
so inter-friend communication,
drawing little arcs, little lines.

00:41:26.040 --> 00:41:28.340
You could even use it as
a source of data mining.

00:41:28.340 --> 00:41:31.220
So for instance,
you could use it to do friend

00:41:31.220 --> 00:41:35.100
intersections to find new
friends in the Twitterverse.

00:41:35.230 --> 00:41:37.660
And so you can visualize those, say,
perhaps on the periphery

00:41:37.660 --> 00:41:39.710
of your Twitterverse,
and then just simply drag

00:41:39.710 --> 00:41:41.170
those into your Twitterverse.

00:41:41.320 --> 00:41:44.710
Or if you have one of those
offending friends that seems to

00:41:44.720 --> 00:41:48.800
be a little bit too detailed with
the minutia of his daily life,

00:41:48.840 --> 00:41:51.710
you could just drag them
out of your Twitterverse.

00:41:51.970 --> 00:41:54.160
So one thing to note is that
if you were then to take this

00:41:54.180 --> 00:41:57.910
visualization and drop that into a--

00:41:58.000 --> 00:42:19.100
( Transcript missing )

00:42:20.720 --> 00:42:23.020
All right, so let's take a look at
some further examples.

00:42:23.080 --> 00:42:27.640
This one is probably of particular
interest to you as designers

00:42:27.640 --> 00:42:30.730
that are new to Quartz Composer,
and that's the use of Quartz

00:42:30.820 --> 00:42:32.390
Composer within our Genius Bars.

00:42:32.400 --> 00:42:36.500
So we use Quartz Composer to
display within our Genius Bars

00:42:36.510 --> 00:42:40.000
times and some real-time data.

00:42:40.000 --> 00:42:42.520
So for instance,
when the next appointment is,

00:42:42.520 --> 00:42:46.840
and this really helps people maximize
their time within our stores.

00:42:47.800 --> 00:42:52.840
And so what we do here is we actually
have pre-rendered an HD movie

00:42:52.840 --> 00:42:55.730
that we use in the background,
and this allows you to

00:42:55.730 --> 00:42:59.830
leverage the skills that you
already have as designers.

00:43:00.080 --> 00:43:03.760
And then we simply overlay some text,
which is the information

00:43:03.760 --> 00:43:06.200
that's coming from an RSS feed.

00:43:09.270 --> 00:43:12.490
So here's a shot of some of the
pre-rendered graphics that we're

00:43:12.490 --> 00:43:16.490
displaying behind our real-time text.

00:43:16.900 --> 00:43:21.400
This is really a great way in which you
can use Quartz Composer very quickly.

00:43:21.420 --> 00:43:23.230
And again,
it allows you to leverage skills

00:43:23.230 --> 00:43:30.130
that you probably already have,
let's say, in Motion, and then use Quartz

00:43:30.130 --> 00:43:31.900
Composer on top of that.

00:43:31.930 --> 00:43:37.400
Another example of some real-time
signage is the signs here at WWDC.

00:43:37.400 --> 00:43:39.570
So, for instance,
all of those 30-inch monitors that

00:43:39.650 --> 00:43:43.390
are displaying agenda information
are using Quartz Composer.

00:43:43.510 --> 00:43:45.910
So here we have some examples.

00:43:47.850 --> 00:43:51.040
And it allows you to really easily
lay out a whole bunch of information

00:43:51.360 --> 00:43:53.760
and update that in real time.

00:43:57.740 --> 00:43:59.910
Another example is the Time Machine.

00:43:59.980 --> 00:44:03.320
So as you saw on the Twitterverse,
I was doing that little background,

00:44:03.360 --> 00:44:06.780
something that we also covered
in last year's hands-on session.

00:44:07.500 --> 00:44:11.310
And so Quartz Composer was really
integral in building the time machine.

00:44:11.390 --> 00:44:18.040
It allows you to prototype a
lot of ideas as designers and

00:44:18.040 --> 00:44:19.580
really play around with them.

00:44:19.580 --> 00:44:22.640
Before,
you would have to program something,

00:44:22.640 --> 00:44:27.400
change a value, go ahead, recompile,
test it out, see how it looked.

00:44:27.520 --> 00:44:30.060
Using Quartz Composer,
you can very simply just

00:44:30.600 --> 00:44:33.030
build out a structure,
and as you're building,

00:44:33.030 --> 00:44:35.580
see the contents rendered in real time.

00:44:36.230 --> 00:44:39.630
And then, you can get approval for what
it's actually going to be,

00:44:39.630 --> 00:44:41.990
because that's what it's going to be.

00:44:42.000 --> 00:44:45.940
You don't have to try to
explain something to somebody

00:44:45.940 --> 00:44:49.860
in some kind of diminished way,
particularly with interaction.

00:44:49.860 --> 00:44:53.130
You can just kind of show them
exactly what it's going to be,

00:44:53.130 --> 00:44:55.190
get approval, and go from there.

00:44:57.140 --> 00:44:59.520
So here's our time machine.

00:44:59.540 --> 00:45:02.520
And what we did for the
actual shipping product is,

00:45:02.520 --> 00:45:06.660
we moved all of the windows and stuff
like that into Core Animation for

00:45:06.660 --> 00:45:10.010
better integration within the Finder,
but we left the background

00:45:10.010 --> 00:45:13.100
in Quartz Composer.

00:45:13.110 --> 00:45:15.530
And the reason being is because
Core Animation is really

00:45:15.530 --> 00:45:18.010
good at displaying contents,
but in this case,

00:45:18.090 --> 00:45:21.050
Quartz Composer is really good
at generating those contents.

00:45:21.140 --> 00:45:23.750
So again, we have Quartz Composer here
in the background and all of

00:45:23.750 --> 00:45:25.570
our windows in the foreground.

00:45:28.340 --> 00:45:31.050
So here's a little video of
our time machine in action.

00:45:31.100 --> 00:45:36.720
And so for instance,
interactivity like this is fairly

00:45:37.040 --> 00:45:39.600
easy to prototype in Quartz Composer.

00:45:39.600 --> 00:45:43.070
And you can do things like, say,
change the bend in all of the windows,

00:45:43.100 --> 00:45:47.300
change how the stars move,
the gas clouds, colors, things like that.

00:45:47.300 --> 00:45:50.360
You can also prototype the
little menu on the right,

00:45:50.360 --> 00:45:53.510
see how the bubbles feel, et cetera.

00:45:57.010 --> 00:46:01.520
Next example is the Apple TV.

00:46:01.520 --> 00:46:04.420
So Quartz Composer is used
on the Apple TV for the music

00:46:04.470 --> 00:46:10.100
visualizers and also our slideshows,
and was really integral as well

00:46:10.100 --> 00:46:11.940
in prototyping a lot of the UI.

00:46:12.100 --> 00:46:16.110
Makes it really easy, again,
to try out a whole bunch of

00:46:16.170 --> 00:46:22.600
different ideas and present those,
and go really from your prototype

00:46:22.650 --> 00:46:25.790
directly to a production model.

00:46:32.500 --> 00:46:35.400
Another example being iMovie HD.

00:46:35.400 --> 00:46:40.950
So in iMovie HD,
all of those beautiful themes that we've

00:46:40.950 --> 00:46:42.680
created were rendered in Quartz Composer.

00:46:43.000 --> 00:46:45.730
As I mentioned,
they're rendered in real time so you

00:46:45.730 --> 00:46:49.610
guys can see what exactly is happening,
and then rendered out

00:46:49.760 --> 00:46:51.850
to disk at HD quality.

00:46:56.510 --> 00:46:59.490
So a few other things to note.

00:46:59.690 --> 00:47:03.400
Quartz Composer is really great
at generating adaptive content.

00:47:03.420 --> 00:47:06.440
And what this means is that you can
actually create content which is

00:47:06.470 --> 00:47:10.060
going to adapt to the environment
in which it's being displayed.

00:47:10.070 --> 00:47:13.020
So there's actual patches found
within Quartz Composer that give you

00:47:13.030 --> 00:47:14.840
information about this environment.

00:47:14.850 --> 00:47:18.460
Say, for instance,
is core image supported,

00:47:18.460 --> 00:47:21.730
other things like that,
how many CPUs you have, CPU load,

00:47:21.780 --> 00:47:23.310
et cetera.

00:47:23.560 --> 00:47:26.660
And you can use this information
to dynamically scale and

00:47:26.660 --> 00:47:30.730
adapt your compositions to
fit within that environment.

00:47:31.970 --> 00:47:34.120
So for instance,
you could take advantage of the latest

00:47:34.120 --> 00:47:38.000
and greatest hardware out there and
make these beautiful compositions.

00:47:38.030 --> 00:47:41.000
And at the same time,
you can have the same composition

00:47:41.000 --> 00:47:44.400
running on older or lower end hardware.

00:47:44.510 --> 00:47:48.340
And so this is really important if your
target is someone other than yourself,

00:47:48.370 --> 00:47:50.940
and you're producing a product
that's going to be released

00:47:50.940 --> 00:47:52.500
to the general public.

00:47:54.290 --> 00:47:56.300
Also, as I mentioned,
it gives you access to a

00:47:56.300 --> 00:47:57.930
large number of data sources.

00:47:57.930 --> 00:48:04.110
So this is everything from RSS and
XML that you saw on the Twitterverse

00:48:04.410 --> 00:48:09.590
to things like external devices,
your mouse, your keyboard, video input,

00:48:09.590 --> 00:48:09.880
etc.

00:48:10.600 --> 00:48:13.810
And again, it's important to note that
Quartz Composer is extensible.

00:48:13.820 --> 00:48:20.200
So whether you're a programmer yourself
or you work with programmers or you find

00:48:20.550 --> 00:48:24.360
someone nice enough on our developer list
to actually implement something for you,

00:48:24.360 --> 00:48:26.610
you can extend Quartz Composer.

00:48:26.640 --> 00:48:29.290
And now in Quartz Composer,
we also have some local

00:48:29.290 --> 00:48:30.920
networking capabilities.

00:48:30.920 --> 00:48:35.480
And these allow you to have compositions
which communicate with other

00:48:35.520 --> 00:48:38.110
compositions on the local network.

00:48:38.120 --> 00:48:40.560
So for instance,
you can imagine you have a

00:48:40.560 --> 00:48:42.380
lab filled with computers.

00:48:42.380 --> 00:48:44.510
You want to generate a screensaver.

00:48:44.520 --> 00:48:47.140
You can have these screensavers
actually talk to each other

00:48:47.140 --> 00:48:48.660
and create all kinds of mayhem.

00:48:53.930 --> 00:48:57.770
So just as a final example,
one thing that we've gone ahead and done

00:48:57.880 --> 00:49:01.810
for you as developers is we've created
what is known as the QC display wall.

00:49:01.960 --> 00:49:06.400
And this is on display downstairs
within our graphics and media lab.

00:49:06.550 --> 00:49:08.870
And what this is,
is this is a high resolution

00:49:08.870 --> 00:49:10.790
multi-monitor display system.

00:49:12.810 --> 00:49:17.990
And what we've done is we've generated
the code for this using all public APIs,

00:49:18.000 --> 00:49:22.570
and we've given the code to you free
as part of the developer examples.

00:49:22.610 --> 00:49:26.720
And what this does is it simply
takes a composition and tiles it out,

00:49:26.840 --> 00:49:33.120
so in this case, to nine Mac Pros,
each with two 30-inch monitors,

00:49:33.160 --> 00:49:37.410
being coordinated by one master Mac Pro,
which is setting up all

00:49:37.470 --> 00:49:39.390
the monitor positions,
et cetera,

00:49:39.540 --> 00:49:42.170
and tiling out this composition.

00:49:42.870 --> 00:49:46.400
So what I do is I would invite
you to come down to our lab,

00:49:46.400 --> 00:49:49.650
bring your favorite compositions,
and we can help you get them up on the

00:49:49.650 --> 00:49:55.590
wall and see what they look like in all
their glory on this massive display.

00:49:58.790 --> 00:50:02.640
All right, so for more information,
you can contact Alan Schaffer.

00:50:02.640 --> 00:50:04.700
He's our graphics evangelist.

00:50:04.710 --> 00:50:09.430
Of course, we have tons of documentation,
sample code, other resources online.

00:50:09.530 --> 00:50:12.780
And again, our developer mailing
list is really active.

00:50:12.930 --> 00:50:17.560
We have about a thousand members,
and I invite you to become one of them.

00:50:17.660 --> 00:50:19.110
Oops.

00:50:21.450 --> 00:50:25.810
So there are a few other sessions
which may be of interest to you.

00:50:25.950 --> 00:50:29.040
For instance, with regards to the
Twitterverse and Dashcode,

00:50:29.040 --> 00:50:32.400
you might want to go to
Unlocking Potential of Dashcode.

00:50:32.460 --> 00:50:35.110
Later this afternoon,
we're going to explain all the

00:50:35.220 --> 00:50:38.270
new things inside of Quartz
Composer in the Mastering the

00:50:38.270 --> 00:50:40.260
Quartz Composer Editor session.

00:50:40.430 --> 00:50:42.340
GLSL,
for those of you that are interested,

00:50:42.400 --> 00:50:45.290
it's really powerful.

00:50:45.400 --> 00:50:47.920
Then tomorrow morning at 10:30,
we have Using Quartz

00:50:47.920 --> 00:50:49.400
Composer in Your Application.

00:50:49.400 --> 00:50:53.460
And then we'll go further into actually
how the display wall was built,

00:50:53.460 --> 00:50:56.580
along with a bunch of other
really interesting examples of

00:50:56.580 --> 00:50:59.200
how you can push Quartz Composer.

00:50:59.400 --> 00:51:03.380
And then there is Create Stunning
Effects with Core Image.

00:51:04.180 --> 00:51:07.620
Labs, again,
I invite you to come down and

00:51:07.620 --> 00:51:10.620
play with our display wall.

00:51:14.010 --> 00:51:20.240
So in closing, Quartz Composer is really
part of the operating system.

00:51:20.250 --> 00:51:22.410
And again, this means you don't need
any special downloads,

00:51:22.480 --> 00:51:24.000
no plug-ins, it just works.

00:51:25.610 --> 00:51:28.770
Again, in order to create content,
you'll need to download developer tools,

00:51:28.870 --> 00:51:31.390
but then you'll get our
super sexy application,

00:51:31.390 --> 00:51:34.710
and you can make all of your
awesome graphics using it.

00:51:35.010 --> 00:51:37.750
It's also very easy to integrate
into your applications.

00:51:37.860 --> 00:51:40.170
So again,
the compositions that you build can

00:51:40.170 --> 00:51:41.800
be thought about as macro patches.

00:51:41.960 --> 00:51:46.620
You simply publish inputs and
outputs from these compositions,

00:51:46.620 --> 00:51:49.320
and then you can, for instance,
use bindings to communicate

00:51:49.320 --> 00:51:54.220
directly with your composition.

00:51:54.550 --> 00:51:56.420
Quartz Composer is extensible.

00:51:56.460 --> 00:52:00.180
This was the main request that
we got for Quartz Composer.

00:52:00.180 --> 00:52:02.340
We've gone ahead and implemented that.

00:52:02.390 --> 00:52:06.650
So we look forward to seeing a whole
bunch of new patches and different ways

00:52:06.650 --> 00:52:08.620
in which you can use Quartz Composer.

00:52:08.670 --> 00:52:11.730
And then finally,
and this one is probably the

00:52:11.730 --> 00:52:15.780
main focus of today's session,
is that Quartz Composer really opens

00:52:15.780 --> 00:52:21.250
up a lot of new doors and a lot of
new applications to us as designers.

00:52:21.620 --> 00:52:24.800
So for instance,
we can now approach a whole array

00:52:24.800 --> 00:52:29.180
of new problems and approach this
new problem space as designers

00:52:29.180 --> 00:52:32.640
without actually having to be,
again, proficient in all of these

00:52:32.640 --> 00:52:34.340
different technologies.

00:52:34.500 --> 00:52:39.300
You simply allow Quartz Composer to
simplify the usage of these technologies,

00:52:39.480 --> 00:52:43.500
and now you can create, say for instance,
real-time signage,

00:52:43.500 --> 00:52:47.930
real-time data visualization,
installations, etc.