WEBVTT

00:00:20.030 --> 00:00:24.880
>> My name is Jack Matthew and I'm the Manager
of the Installation and Set Up team at Apple

00:00:24.879 --> 00:00:27.320
and we're responsible for several things.

00:00:27.320 --> 00:00:32.399
The installer obviously from the name, but also set up
assistant which is the first thing after you buy a new Mac

00:00:32.399 --> 00:00:37.239
and it asks you for your name and
sets up your first user account.

00:00:37.240 --> 00:00:43.340
Also software update for Mac and Windows
and disk utility and a few other things.

00:00:43.340 --> 00:00:45.290
So, what are we going to talk about today?

00:00:45.289 --> 00:00:53.170
We're going to talk about the best strategy for delivering your
application on Mac OS X and that may be in the disk image

00:00:53.170 --> 00:00:59.679
and it may be the a package and we're going to talk about
PackageMaker which is our tool for creating those packages

00:00:59.679 --> 00:01:06.719
and finally we're going to talk about some of the new
features in Leopard for the Apple installer and packages.

00:01:06.719 --> 00:01:14.039
And we've divided this up into three segments and
to talk about the first, which is choosing a strategy.

00:01:14.040 --> 00:01:20.110
going to invite Luke Bellandi, who is our
lea engineer on the OS installer for Mac OS X.

00:01:20.109 --> 00:01:21.909
Take it away Luke.

00:01:21.909 --> 00:01:26.909
( applause )

00:01:26.909 --> 00:01:30.789
>> All right, thanks Jack.

00:01:30.790 --> 00:01:34.890
So when you're distributing your software,
you've got a couple of different options

00:01:34.890 --> 00:01:43.219
and one of the most important things to
remember is that first impressions count.

00:01:43.219 --> 00:01:47.250
While this isn't the first experience
your user's going to have with your software,

00:01:47.250 --> 00:01:50.340
it is the first experience they're
going to have with your product.

00:01:50.340 --> 00:01:54.900
So you want your installation to
be simple, fast and pleasant.

00:01:54.900 --> 00:02:03.010
One of the things you need to consider when considering a
delivery vehicle for your users, is their expertise level

00:02:03.010 --> 00:02:11.020
with computers in general, are you working with sort of
a novice computer base, user base, more expert user base

00:02:11.020 --> 00:02:17.570
or for example for a product like
iTunes, a really wide range of expertise.

00:02:17.569 --> 00:02:21.180
Also, are these people that are
familiar with the Mac platform?

00:02:21.180 --> 00:02:26.780
I know a lot of you are Windows developers who are new
to the Mac platform, so you have a lot of familiarity

00:02:26.780 --> 00:02:34.560
with programming and computers in general, but
you're not maybe completely clued in to the specifics

00:02:34.560 --> 00:02:39.990
of where everything's located on the Mac, things like that.

00:02:39.990 --> 00:02:44.250
The second thing to consider when
assessing what kind of delivery vehicle

00:02:44.250 --> 00:02:47.610
to use is the content that you're installing.

00:02:47.610 --> 00:02:49.030
How many items are you installing?

00:02:49.030 --> 00:02:50.780
Is it just a single application?

00:02:50.780 --> 00:02:52.900
Do you have additional documentation?

00:02:52.900 --> 00:02:57.349
Other media, fonts, graphics, audio?

00:02:57.349 --> 00:02:59.340
Where do those items live in the file system?

00:02:59.340 --> 00:03:05.539
For example, if you're installing a kernel extension
because you're distributing a new piece of audio hardware,

00:03:05.539 --> 00:03:11.319
you'll need to have elevated privileges to
be able to install that kernel extension.

00:03:11.319 --> 00:03:14.049
How do you manage that?

00:03:14.050 --> 00:03:20.020
And lastly, does the user system have to meet certain
criteria in order for the software to be installed?

00:03:20.020 --> 00:03:28.180
Are you using Tiger APIs and therefore do you
want to lock out users from installing on Panther?

00:03:28.180 --> 00:03:32.430
So, taking those two things into consideration,

00:03:32.430 --> 00:03:40.030
you've got two options for delivering
your software, disk images and packages.

00:03:40.030 --> 00:03:42.400
So how do you know which method to use?

00:03:42.400 --> 00:03:47.569
Well, disk images lend themselves to
a drag-and-drop install experience.

00:03:47.569 --> 00:03:52.569
You've got an application in a disk image
window, the user drags it onto their desktop

00:03:52.569 --> 00:03:55.319
or into their applications folder, the install is finished.

00:03:55.319 --> 00:04:04.329
This is an installation method that you can consider if
your software is sufficiently contained, self contained

00:04:04.330 --> 00:04:08.050
and your user base would prefer a drag-and-drop install.

00:04:08.050 --> 00:04:11.160
Otherwise you can use a package-based install.

00:04:11.159 --> 00:04:15.799
One thing though is that it is never a
bad idea to use a package-based install.

00:04:15.800 --> 00:04:17.220
It's always okay.

00:04:17.220 --> 00:04:22.730
Here's an example of a drag-install by a disk image.

00:04:22.730 --> 00:04:25.810
It's a single item, one application.

00:04:25.810 --> 00:04:33.530
We've got a background graphic giving some instructions
as to how the user needs to perform the install.

00:04:33.529 --> 00:04:39.809
The two icons on there, we've got the application
MarsEdit and then we've actually got a SIM link

00:04:39.810 --> 00:04:43.360
to the applications folder on the user's system.

00:04:43.360 --> 00:04:47.290
So the user doesn't even have to drag out
of this window to perform the install.

00:04:47.290 --> 00:04:51.050
The background picture also have some clear instructions.

00:04:51.050 --> 00:04:57.220
One thing to note is that the instructions in this case
are in English and if you're distributing an application

00:04:57.220 --> 00:05:04.750
with multiple localizations, having text instructions
in the background may not be the right solution.

00:05:04.750 --> 00:05:08.540
And this leverages the finder.

00:05:08.540 --> 00:05:13.410
So that's a finder window that
has the disk image open in it.

00:05:13.410 --> 00:05:16.700
The other option is a package-based install.

00:05:16.699 --> 00:05:20.789
Here we've got a screen shot of an iWork '06 install.

00:05:20.790 --> 00:05:27.050
If any of you have installed iWork, Final Cut Studio
2, iLife on your Mac, you're probably familiar

00:05:27.050 --> 00:05:33.470
with the Mac installer and this
leverage is Installer.app.

00:05:33.470 --> 00:05:40.010
So those are some of the things to keep
in mind when you're trying to decide how

00:05:40.009 --> 00:05:42.680
to distribute your software to customers.

00:05:42.680 --> 00:05:44.370
So let's look at the first of the two.

00:05:44.370 --> 00:05:45.780
Disk images.

00:05:45.779 --> 00:05:51.639
So what's the user experience like downloading a disk image?

00:05:51.639 --> 00:05:56.199
Well, step one they download the disk image.

00:05:56.199 --> 00:05:59.180
Step two they open it.

00:05:59.180 --> 00:06:04.259
And step three they drag the contents onto their system.

00:06:04.259 --> 00:06:12.329
One thing I mentioned earlier is that you may
want to consider that having a specific language

00:06:12.329 --> 00:06:15.349
in your background picture, could pose a problem.

00:06:15.350 --> 00:06:21.580
What the folk at Firefox have done is made
a localization free background picture

00:06:21.579 --> 00:06:25.129
that still instructs the user on
how to install their software.

00:06:25.129 --> 00:06:28.129
Pretty cool.

00:06:28.129 --> 00:06:30.730
So why disk images?

00:06:30.730 --> 00:06:40.200
A disk image is, it's essentially a single file that is a
logical disk so all it ends up being is a compressed file.

00:06:40.199 --> 00:06:44.879
So why use a disk image over a tar file or a zip file?

00:06:44.879 --> 00:06:51.550
Well let's take a look at some of
the advantages and disadvantages.

00:06:51.550 --> 00:06:57.060
Compressed files offer cross-platform
support, disk images don't.

00:06:57.060 --> 00:07:05.629
For most of you, we're thinking you're probably going to be
installing applications, drivers, things that are binaries

00:07:05.629 --> 00:07:12.310
that are specific to Mac OS X and so that cross-platform
capabilities are probably less interesting to you.

00:07:12.310 --> 00:07:18.290
For things like media distributions, audio, video, movies,

00:07:18.290 --> 00:07:23.450
certainly a cross-platform solution
like a zip file might make more sense.

00:07:23.449 --> 00:07:28.789
Both, both compression mechanism, I'm sorry.

00:07:28.790 --> 00:07:33.410
Both delivery vehicles offer compression.

00:07:33.410 --> 00:07:39.360
As we saw in the previous two examples,
disk images offer a background picture.

00:07:39.360 --> 00:07:41.199
Zip files don't.

00:07:42.600 --> 00:07:47.240
Another advantage of disk images is that
they offer a license agreement to users.

00:07:47.240 --> 00:07:52.960
On double clicking an image that has a license
agreement tied to it, the user will first be presented

00:07:52.959 --> 00:08:01.329
with the license agreement, which they have to agree to,
before the disk image will be opened and presented to them.

00:08:01.329 --> 00:08:03.699
Disk images can be Internet enabled.

00:08:03.699 --> 00:08:08.670
We'll talk a little bit more about that in a couple slides.

00:08:08.670 --> 00:08:14.800
And lastly, disk images are resource Fork-aware,
which if that means something to you that's great.

00:08:14.800 --> 00:08:17.920
If it doesn't, don't worry about it.

00:08:17.920 --> 00:08:24.030
So what we want you to take away from all of this is
that disk images offer a superior user experience.

00:08:24.029 --> 00:08:30.009
Here's an example of the license
agreement sheet that comes down.

00:08:30.009 --> 00:08:33.370
This is actually from Firefox.

00:08:33.370 --> 00:08:37.570
This comes down when you double click
the disk image for the first time.

00:08:37.570 --> 00:08:40.379
If you decline, it won't open the disk image.

00:08:40.379 --> 00:08:48.830
So this is a great way to you know, force your users into
a license agreement and keep your legal department happy.

00:08:48.830 --> 00:08:51.030
So how do you make a disk image?

00:08:51.029 --> 00:08:57.610
Well we've got a command line tool, usr/bin, hdiutil,
it's got a great comprehensive man page.

00:08:57.610 --> 00:08:59.259
Go check it out.

00:08:59.259 --> 00:09:08.029
The three lines on the bottom of this slide
take us through the creation of a disk image.

00:09:08.029 --> 00:09:14.009
The first line creates the disk
image from the folder MyApp.

00:09:14.009 --> 00:09:17.509
The second line internet enables it
and the third line compresses it.

00:09:17.509 --> 00:09:24.019
We're going to get to Interent enabling in just a couple more.

00:09:24.019 --> 00:09:30.210
Advanced hdi util, using the unflattened
command, will expose resources in it

00:09:30.210 --> 00:09:34.200
so when you can for example, add a license agreement.

00:09:34.200 --> 00:09:41.090
It's a little more complex and there's
documentation on the ADC website on how to do that.

00:09:41.090 --> 00:09:47.550
One thing to note, too, is that if you check out
VersionTracker or downloads on Apple.com/macosx,

00:09:47.549 --> 00:09:56.549
there is some great third-party GUI tools that make
management of disk image distributions that much easier.

00:09:56.549 --> 00:10:00.589
All right, so Internet-enabled disk images.

00:10:00.590 --> 00:10:02.259
What it is this?

00:10:02.259 --> 00:10:05.460
So the user experience is great.

00:10:05.460 --> 00:10:11.540
The user experience is that the user clicks
and disk image download think in Safari.

00:10:11.539 --> 00:10:17.579
After the download completes, the contents of the
disk image are available in the downloads folder

00:10:17.580 --> 00:10:21.180
and the user had no idea that the
content was archived at all.

00:10:21.179 --> 00:10:24.409
It's a great user experience when used with packages.

00:10:24.409 --> 00:10:28.850
And the reason for that is that if your
disk image contains a single package,

00:10:28.850 --> 00:10:34.230
which Jack will talk about in the next section, packages,
the installer will automatically launch the package.

00:10:34.230 --> 00:10:42.060
So the user experience in that case is that the user
goes from clicking a link in Safari to immediately being

00:10:42.059 --> 00:10:44.909
in the installer, installing your software.

00:10:44.909 --> 00:10:53.329
A couple clicks, next, agree, install and close
and they've got your software on their system.

00:10:53.330 --> 00:10:59.810
The implementation details of disk images are
less interesting, but we'll go through them.

00:10:59.809 --> 00:11:04.689
The disk image after being downloaded is mounted,
its contents extracted into the parent directory,

00:11:04.690 --> 00:11:10.420
the disk image is unmounted and then moved to the trash
and like I just said, the package is automatically opened

00:11:10.419 --> 00:11:14.189
if you have a single package in your disk image.

00:11:14.190 --> 00:11:19.180
So that's disk images.

00:11:19.179 --> 00:11:22.819
I'm going to turn it back over to Jack to talk about packages.

00:11:22.820 --> 00:11:23.550
Jack.

00:11:23.549 --> 00:11:31.120
( applause )

00:11:31.120 --> 00:11:32.409
>> Thank you Luke.

00:11:32.409 --> 00:11:34.159
Okay, so packages.

00:11:34.159 --> 00:11:39.719
Probably a lot of you are here to learn about the
installer, so that's what we're going to talk about now.

00:11:40.850 --> 00:11:44.930
And, but before we do that, a quick little diversion.

00:11:44.929 --> 00:11:50.129
So how many of you have come to us from the other platform?

00:11:50.129 --> 00:11:52.549
A few, okay, a few, couple of you.

00:11:52.549 --> 00:11:59.299
Okay. So when talking about installation
on Windows versus installation on the Mac,

00:11:59.299 --> 00:12:06.979
there's really one thing you've got to know, which is
that basically, installation on the Mac is simpler.

00:12:06.980 --> 00:12:08.389
For better or for worse.

00:12:08.389 --> 00:12:11.639
So we'll talk about for better first.

00:12:11.639 --> 00:12:16.419
Generally speaking, you're only
concerned with the installation of files.

00:12:16.419 --> 00:12:22.500
There really is not registry to worry
about and kind of along these lines,

00:12:22.500 --> 00:12:29.019
you tend to do things like create preferences
files on application first launch and our APIs

00:12:29.019 --> 00:12:33.409
and core foundation and Cocoa make it really easy to do that.

00:12:33.409 --> 00:12:39.279
Whereas on Windows, for whatever reason, there's much more
of a model of installers installing preferences files.

00:12:39.279 --> 00:12:41.759
We tend not to do that on a Mac.

00:12:41.759 --> 00:12:47.500
The Mac has the concept of bundles which make it really
easy for you to organize your application binary along

00:12:47.500 --> 00:12:57.539
with resources whereas in Windows, you tend to spray a bunch
of files in one place and makes it a little more challenging

00:12:57.539 --> 00:13:00.699
to deal with upgrading that software after
the fact because there's the potential

00:13:00.700 --> 00:13:03.330
for users to move things around, etcetera.

00:13:03.330 --> 00:13:06.150
What's more, we have free and easy to use dev tools.

00:13:06.149 --> 00:13:08.669
We're going to show you a PackageMaker in a minute.

00:13:08.669 --> 00:13:17.120
But we think it's pretty good and it's gotten substantially
better as of this Leopard release and on Windows,

00:13:17.120 --> 00:13:23.970
there are a number of things available,
but they tend to be expensive and large.

00:13:23.970 --> 00:13:32.149
We found that in the course of delivering installers
on Windows for our own software, iTunes, etcetera,

00:13:32.149 --> 00:13:40.750
that sometimes we run into trouble with things like JScript
and we're actually kind of moving away from using that

00:13:40.750 --> 00:13:43.960
and just writing C code to do everything we need.

00:13:43.960 --> 00:13:50.280
But on the Mac of course we have the whole suite of
UNIX command line tools and scripting line which is,

00:13:50.279 --> 00:13:55.429
in fact we encourage you to use things like Perl
and shell scripts in your install scripts just

00:13:55.429 --> 00:13:58.959
to avoid any binary incompatibility issues.

00:13:58.960 --> 00:14:01.190
But it's not all good.

00:14:02.210 --> 00:14:09.269
It's simpler, because we have fewer features,
notably uninstall and something that probably some

00:14:09.269 --> 00:14:14.720
of you are going to ask us about in the Q and A,
but we'll get to that later and what's more,

00:14:14.720 --> 00:14:20.000
we don't have a C API for dealing with the installer.

00:14:20.000 --> 00:14:23.779
Okay, so let's get back to packages.

00:14:23.779 --> 00:14:31.730
So, basic features of the installer are that we
offer a compressed payload and we offer the ability

00:14:31.730 --> 00:14:35.430
to present some UI to the user at
various points in the install process.

00:14:35.429 --> 00:14:40.169
Throughout the whole process you can have a background
picture that's displayed in the main install window

00:14:40.169 --> 00:14:47.860
and we also have a welcome text which is
available upon first launching the package.

00:14:47.860 --> 00:14:53.430
A read me which is useful for displaying
things like release notes, etcetera.

00:14:53.429 --> 00:14:56.449
A license agreement, obviously we've talked about that.

00:14:56.450 --> 00:15:03.520
And conclusion is available which is the final message that
you see upon the quit or restart button being presented

00:15:03.519 --> 00:15:08.329
at the end of a file copying process
and that's available in 10.4 or later.

00:15:08.330 --> 00:15:18.070
So, let's get to the demo machine here and have
Luke talk about or show to you, a screen saver.

00:15:19.210 --> 00:15:22.040
Some, creating a basic package in PackageMaker.

00:15:22.039 --> 00:15:22.629
Take it away Luke.

00:15:22.629 --> 00:15:24.419
>> All right.

00:15:24.419 --> 00:15:26.860
Thanks Jack.

00:15:26.860 --> 00:15:29.120
So PackageMaker 3.0 in Leopard.

00:15:29.120 --> 00:15:32.679
Let's take a look at it.

00:15:32.679 --> 00:15:38.709
Okay, the first thing I need to do when I launch
PackageMaker is provide my organization name.

00:15:38.710 --> 00:15:43.680
You can really put anything in here
that you want, it'll accept any string.

00:15:43.679 --> 00:15:48.609
The way we do it at Apple and the way we
recommend that you do it is reverse DNS naming

00:15:48.610 --> 00:15:55.039
with .pkg after your organization's name.

00:15:55.039 --> 00:16:05.029
So if I am working at acme.com,
I'm going to do com.acme.pkg.

00:16:05.029 --> 00:16:07.159
the application we're distributing is my MyApp.

00:16:07.159 --> 00:16:10.409
So I'm going to put MyApp.

00:16:10.409 --> 00:16:13.079
And this app leverages some Tiger APIs.

00:16:13.080 --> 00:16:17.570
It is binary, it is compatible with Leopard.

00:16:17.570 --> 00:16:22.900
We checked that out and so that's cool,
however we know it doesn't run on Panther,

00:16:22.899 --> 00:16:26.669
so we won't allow this to run on Panther.

00:16:26.669 --> 00:16:28.729
So that's our minimum target.

00:16:28.730 --> 00:16:32.170
So those are the first two things we
need to set up when creating a package.

00:16:32.169 --> 00:16:37.429
So we dismiss the sheet there and here's PackageMaker.

00:16:37.429 --> 00:16:42.269
For those of you who've used PackageMaker 2.0,
earlier versions of PackageMaker,

00:16:42.269 --> 00:16:49.189
you'll notice that we've really moved
to a more work flow oriented interface.

00:16:49.190 --> 00:16:56.480
So it's less like a property list editor,
more like Xcode in some ways, really.

00:16:56.480 --> 00:17:00.129
So, I've got all of my content over here

00:17:00.129 --> 00:17:04.509
and this is actually the first step,
before even launching PackageMaker.

00:17:04.509 --> 00:17:07.119
You want to assemble all the content
that you're going to distribute.

00:17:07.119 --> 00:17:14.000
So over here in my demo 1 folder, under my build
results I have my application that I want to distribute,

00:17:14.000 --> 00:17:21.140
I have a read me file from my documentation department
and I've got a license file from my legal department.

00:17:21.140 --> 00:17:25.690
So, given those three things, let's make a package.

00:17:25.690 --> 00:17:30.130
So right over here I've got some
instructions drop contents here, all right.

00:17:30.130 --> 00:17:34.720
Now we're going to install MyApps, so drag it over.

00:17:34.720 --> 00:17:36.329
Cool. Okay.

00:17:36.329 --> 00:17:45.569
So MyApp is over here and it's installing the file that
we just dragged over that was on our desktop and it's going

00:17:45.569 --> 00:17:48.779
to install it on the user's system in /Applications.

00:17:48.779 --> 00:17:53.649
Now PackageMaker makes some good
guesses when you drag files in.

00:17:53.650 --> 00:17:58.650
since this has the extension .app, it assumes
that we want to install it in /Applications.

00:17:58.650 --> 00:18:01.300
So it'll populate this field automatically.

00:18:01.299 --> 00:18:05.200
If you dragged into widget, it would
populate with /library/widgets.

00:18:05.200 --> 00:18:10.220
I think there are a few other cases
where it makes smart decisions.

00:18:10.220 --> 00:18:15.430
Otherwise it'll just present slash
and you can adjust it as appropriate.

00:18:16.480 --> 00:18:22.970
Now, I need to go over here to the
components section and unclick this check box.

00:18:22.970 --> 00:18:25.210
We're not going to talk about that right now.

00:18:25.210 --> 00:18:31.690
Jack's going to explain about that in a
later portion of the, of the session.

00:18:31.690 --> 00:18:38.660
But the next thing we want to do is if we go up to the top
level here, package parameters, we want to edit the interface

00:18:38.660 --> 00:18:42.320
because we still have that license
and read me to include in the package.

00:18:42.319 --> 00:18:43.619
So this is kind of cool.

00:18:43.619 --> 00:18:49.899
I've got a window comes up and it looks a lot like the
installer with the drawer popping out of the right side.

00:18:49.900 --> 00:18:58.800
What I can do is click on any of these bullets on the
left hand side of this window and drag in content.

00:18:58.799 --> 00:19:07.839
So I'll click on read me because I have a read me
file, let me drag this in and it's just hello world,

00:19:07.839 --> 00:19:11.179
we clearly didn't spend a whole lot of time on this one.

00:19:11.180 --> 00:19:11.730
( laughter )

00:19:11.730 --> 00:19:21.849
But this supports RTF so you can incorporate graphics
and fonts and really do a beautiful presentation here.

00:19:21.849 --> 00:19:25.019
License agreement we will drag in as well.

00:19:25.019 --> 00:19:29.619
Same thing, supports RTF as well as multiple languages.

00:19:29.619 --> 00:19:32.219
So you'll notice down here we've got English.

00:19:32.220 --> 00:19:37.569
If I had license agreements in other languages,
I could add them using the plus key over here.

00:19:37.569 --> 00:19:39.000
However I don't.

00:19:39.000 --> 00:19:40.920
This is an English only release.

00:19:40.920 --> 00:19:43.000
So that's that.

00:19:43.000 --> 00:19:45.349
So let me close this down.

00:19:45.349 --> 00:19:49.349
Now the next thing I want to do is
actually save this PackageMaker document.

00:19:49.349 --> 00:19:56.439
Like I said, this is kind of like Xcode and in that
sense, you can actually save your working document

00:19:56.440 --> 00:20:01.710
so that you can come back later if you made a mistake
or if you've got version 2.0 of your product

00:20:01.710 --> 00:20:07.500
that you need to release and make some adjustments
and rebuild a package without having to go through,

00:20:07.500 --> 00:20:09.960
slug through all the steps all over again.

00:20:09.960 --> 00:20:23.880
So I'm going to save this as MyAppPackageSpecs
and it'll add a .pmdoc doc extension

00:20:23.880 --> 00:20:27.590
and we'll just put it on the desktop to make it easy.

00:20:27.589 --> 00:20:28.949
Save that, okay?

00:20:28.950 --> 00:20:32.150
Cool, it's right there in the finder.

00:20:32.150 --> 00:20:33.660
So I'm ready to go.

00:20:33.660 --> 00:20:36.000
I'm going to go ahead and build and run this package.

00:20:36.000 --> 00:20:39.750
It'll build it and we'll launch the installer.

00:20:39.750 --> 00:20:51.849
So let's see, we'll save it as MyApp on the desktop.

00:20:51.849 --> 00:20:55.359
Okay. So welcome to My App installer.

00:20:55.359 --> 00:20:58.649
You will be guided through the steps
necessary to install this software.

00:20:58.650 --> 00:21:02.300
That's just something the installer puts
in if you don't have a welcome file.

00:21:02.299 --> 00:21:06.480
If you did have a welcome file, this
piece would be replaced with that text.

00:21:06.480 --> 00:21:07.420
Hit continue.

00:21:07.420 --> 00:21:08.840
There's our read me.

00:21:08.839 --> 00:21:09.639
Hello world.

00:21:09.640 --> 00:21:13.020
We can print or save it if we want.

00:21:13.019 --> 00:21:17.799
Continue on, hey, there's our license agreement in
English which is the only language we specified

00:21:17.799 --> 00:21:21.339
so it's the only thing available in the pop up.

00:21:21.339 --> 00:21:26.549
And I agree, it is in fact a license agreement
because it says it's a license agreement.

00:21:26.549 --> 00:21:27.930
That's cool.

00:21:27.930 --> 00:21:35.480
All right, so it says it'll take 4 MB of space on
my computer and we remember that this is going to install

00:21:35.480 --> 00:21:46.410
in /Applications, so just so you know
that we are not doing any slight of hand here,

00:21:46.410 --> 00:21:56.610
I'll show you our applications folder and we'll
organize it by name and let's see, is MyApp in here?

00:21:56.609 --> 00:21:58.639
We've got mail and we've got photo booth.

00:21:58.640 --> 00:22:00.720
So MyApp is not in here.

00:22:00.720 --> 00:22:05.690
Okay, let's shrink this and let's do our install.

00:22:05.690 --> 00:22:18.890
Cool. All right, let's close the installer
and let's check the applications folder again.

00:22:18.890 --> 00:22:21.450
Probably way at the bottom.

00:22:21.450 --> 00:22:23.930
It's going to be MyApp.

00:22:23.930 --> 00:22:28.509
So we've just installed it using a package.

00:22:28.509 --> 00:22:31.079
And that is a basic package demo.

00:22:31.079 --> 00:22:33.909
Let me turn it back over to Jack for
some more advanced features of packages.

00:22:33.910 --> 00:22:34.110
Jack.

00:22:34.109 --> 00:22:35.079
( applause )

00:22:35.079 --> 00:22:40.470
>> Thank you Luke.

00:22:40.470 --> 00:22:44.789
Okay. So what Luke showed you is obviously pretty simple.

00:22:44.789 --> 00:22:48.210
Yes, we can install simple text.

00:22:48.210 --> 00:22:54.490
But let's talk about what we can
do beyond something that simple.

00:22:54.490 --> 00:22:58.299
That's pretty much accomplishable with a disk image.

00:22:58.299 --> 00:23:01.529
So let's talk about what else we can do.

00:23:01.529 --> 00:23:03.109
So, admin authorization.

00:23:03.109 --> 00:23:10.759
Obviously if you distributed a disk image that had
two things to install, it would be annoying for a user

00:23:10.759 --> 00:23:14.579
to not only have to navigate to two
different locations in the file system,

00:23:14.579 --> 00:23:20.639
but then an unprivileged user would say have to drag-
install your font and then drag-install your application

00:23:20.640 --> 00:23:28.380
and the fact that we're able to authorize once
in a package installer makes it a lot easier.

00:23:28.380 --> 00:23:30.160
So, requirements.

00:23:30.160 --> 00:23:36.160
So the installer has the ability to enforce that
certain criteria are met before you're allowed

00:23:36.160 --> 00:23:39.240
to proceed through UI and actually install files.

00:23:39.240 --> 00:23:43.329
So there are two different hooks that we provide.

00:23:43.329 --> 00:23:50.720
One applies for the system as a whole and those checks
are run immediately upon double clicking the package

00:23:50.720 --> 00:23:53.900
and the other and we call that
the InstallationCheck mechanism.

00:23:53.900 --> 00:24:00.860
The other mechanism is called the VolumeCheck mechanism
and it is run per volume and you can do things like enforce

00:24:00.859 --> 00:24:07.279
that a minimum version of the OS is present on the given
partition or that a certain version of another piece

00:24:07.279 --> 00:24:10.470
of dependent software is already installed.

00:24:10.470 --> 00:24:13.600
So, again we're going to haul Luke back
up here and he's going to show you how

00:24:13.599 --> 00:24:16.629
to make some basic requirements using PackageMaker.

00:24:16.630 --> 00:24:18.290
Demo machine please.

00:24:18.289 --> 00:24:21.649
>> All right.

00:24:21.650 --> 00:24:22.290
All right.

00:24:22.289 --> 00:24:24.250
Thanks Jack.

00:24:24.250 --> 00:24:33.250
Okay, so just for kicks, let's close this
down and sure we'll save our changes.

00:24:33.250 --> 00:24:40.299
Okay. Let me throw away the package that
we just made and really throw it away.

00:24:40.299 --> 00:24:44.899
Okay. Let me load up my PackageMaker document from before.

00:24:46.319 --> 00:24:47.200
Okay, cool.

00:24:47.200 --> 00:24:54.380
So it's still got our app in here, it's still
go all of our interface stuff, so great.

00:24:54.380 --> 00:24:59.210
You know, I had a chat with my engineering
department though and they told me

00:24:59.210 --> 00:25:08.860
that this is pretty hard core text editing application
and actually requires at least eight processors.

00:25:08.859 --> 00:25:09.719
So.

00:25:09.720 --> 00:25:10.730
( laughter )

00:25:10.730 --> 00:25:19.019
We are going to check for the number of CPUs
such that it needs to be at least eight.

00:25:19.019 --> 00:25:24.629
And you know what, I don't know what computer
I'm working on so that might actually pass.

00:25:24.630 --> 00:25:26.000
We're going to check for sixteen.

00:25:26.000 --> 00:25:28.200
( laughter )

00:25:28.200 --> 00:25:41.330
And the failure message here, will be you need
at least 16 processors to run this upgrade.

00:25:41.329 --> 00:25:47.939
Okay. And we'll just put the same thing in the message.

00:25:47.940 --> 00:25:50.330
Okay, we'll save that.

00:25:50.329 --> 00:25:54.769
And cool, that's one requirement we
can add and remove more if we need to,

00:25:54.769 --> 00:25:58.309
but that's all engineering told me,
so that's all I need to worry about.

00:25:58.309 --> 00:26:03.730
Let's save this document again and
build and run the package from it.

00:26:03.730 --> 00:26:11.539
Yep, we'll save it as myapp.pkg on the desktop.

00:26:11.539 --> 00:26:14.149
Okay, oh, what was that?

00:26:14.150 --> 00:26:16.490
My app cannot be installed on this computer.

00:26:16.490 --> 00:26:19.870
You need at least 16 processors to run this upgrade.

00:26:19.869 --> 00:26:22.669
Okay, so I can't install this at all.

00:26:22.670 --> 00:26:26.500
The sheet comes down and my only
option is to close the installer.

00:26:26.500 --> 00:26:32.130
There's no way that I can install this on a machine
that the software won't work on, which is great.

00:26:32.130 --> 00:26:34.440
You don't want users doing that.

00:26:34.440 --> 00:26:41.820
So, let's go back and edit this package
and put in a reasonable requirement.

00:26:41.819 --> 00:26:48.939
Double click on this and we'll say that
we need at least two processors and again,

00:26:48.940 --> 00:26:53.110
I don't know what kind of machine I'm
running on so this might not work either.

00:26:53.109 --> 00:26:59.069
Okay, we'll save the document and
we'll build and run the package.

00:26:59.069 --> 00:27:05.029
Let me delete the old package first though.

00:27:05.029 --> 00:27:07.849
Yep. Okay.

00:27:07.849 --> 00:27:09.779
All right.

00:27:12.630 --> 00:27:18.370
So now it's letting me go through like I expected.

00:27:18.369 --> 00:27:21.779
The requirements check was run
but it's invisible to the user.

00:27:21.779 --> 00:27:26.170
Great user experience if your computer passes the checks.

00:27:26.170 --> 00:27:29.880
So that's an example of requirement checks in action.

00:27:29.880 --> 00:27:32.180
Let me pass it back over to Jack.

00:27:35.430 --> 00:27:36.480
>> Slides please.

00:27:36.480 --> 00:27:38.549
Thank you.

00:27:38.549 --> 00:27:40.159
Okay, so basic stuff.

00:27:40.160 --> 00:27:44.460
Let's get a little more complicated.

00:27:44.460 --> 00:27:52.579
So, this is a little screen shot from the Xcode
tools installer, I'm sure you've probably seen this before

00:27:52.579 --> 00:27:58.699
and the line items that you see there are what we refer
to in installer parlance as a choice and you'll see

00:27:58.700 --> 00:28:01.900
that language choice throughout the PackageMaker UI.

00:28:01.900 --> 00:28:08.810
A choice have, choices have a couple of properties.

00:28:08.809 --> 00:28:13.529
First of all there is a hierarchy that
you can establish using sub choices

00:28:13.529 --> 00:28:18.109
and choices also have an enabled or selected state.

00:28:18.109 --> 00:28:27.699
In this example here, the developer tools essentials are
disabled and selected and everything else is enabled but,

00:28:27.700 --> 00:28:33.940
only the Dashcode, the reference
library and examples are selected.

00:28:33.940 --> 00:28:39.360
I guess we don't want Java API Documentation
installed by default, it's knocked in.

00:28:40.640 --> 00:28:48.930
So a couple of things to note about choices is that prior to
10.4, there was a 1:1 relationship between choice

00:28:48.930 --> 00:28:51.930
and what you, between choice and package.

00:28:51.930 --> 00:28:58.380
Whereas beginning with Tiger, you can have many choices,
you can have many packages associated with a choice

00:28:58.380 --> 00:29:06.200
so that you can have a simple UI, but actually install
many packages depending on your packaging needs.

00:29:06.200 --> 00:29:11.140
And these enabled and selected states are dynamic.

00:29:11.140 --> 00:29:18.280
You can actually write JavaScript to
influence how these behave if, for example,

00:29:18.279 --> 00:29:23.379
you want one choice to be enabled only when
another choice is selected, you can do that

00:29:23.380 --> 00:29:25.990
and they can have complicated relationships.

00:29:25.990 --> 00:29:31.500
We actually designed this to work with the
Final Cut Studio installer which is really huge.

00:29:31.500 --> 00:29:34.839
It has hundreds of packages and
really, really complicated UI.

00:29:34.839 --> 00:29:39.139
So we're pretty confident that you'll be
able to achieve what you want to achieve.

00:29:39.140 --> 00:29:44.170
One note is that prior to 10.4, the
ability to do this is actually quite limited.

00:29:44.170 --> 00:29:48.350
It runs tools and looks at the exit
value and it's kind of arcane.

00:29:48.349 --> 00:29:52.899
Thankfully PackageMaker shields you from most
of that but if you need to do anything fancy,

00:29:52.900 --> 00:29:56.430
you might not be able to do it
and feel free to ask us about it.

00:29:56.430 --> 00:29:58.620
We can help you out.

00:29:58.619 --> 00:30:02.189
Okay, so custom install.

00:30:02.190 --> 00:30:08.450
We're going to bring Luke back up here, go back
to the demo machine and take it away Luke.

00:30:10.250 --> 00:30:14.490
>> All right, thanks Jack.

00:30:14.490 --> 00:30:21.990
So Steve mentioned yesterday in the keynote that we've got
about sixty seven percent of our user base running Tiger.

00:30:21.990 --> 00:30:26.130
So you've noticed probably that in a lot of
the slides we've been talking about features

00:30:26.130 --> 00:30:28.950
that are available in 10.4 and later.

00:30:28.950 --> 00:30:38.880
So I'm not sure how many of you are sort of concerned
with the versions of Mac OS X you want to support.

00:30:38.880 --> 00:30:43.950
But if you're looking to distribute to Tiger and
later customers, you've got a pretty big market.

00:30:43.950 --> 00:30:51.920
So in a lot of cases I think it's safe to
stick to those features and leverage them.

00:30:51.920 --> 00:30:53.550
So, same thing.

00:30:53.549 --> 00:31:03.109
Let's delete our old package and
let's open our PackageMaker document.

00:31:03.109 --> 00:31:05.409
Okay, cool.

00:31:05.410 --> 00:31:12.509
So one thing we didn't mention when I made the
first package is that by dragging the application

00:31:12.509 --> 00:31:15.410
into the sidebar here, it actually created a choice for us.

00:31:15.410 --> 00:31:18.180
That's what this line is with the blue bubble

00:31:18.180 --> 00:31:23.650
and when we click the disclosure triangle,
it shows us what is in that choice.

00:31:23.650 --> 00:31:29.600
So for example, I could have that choice
install an application and a widget.

00:31:29.599 --> 00:31:38.409
I don't want to do that so I'll delete that but, I've
also got a couple other things that I want to install.

00:31:38.410 --> 00:31:41.930
I've got this widget and I've got some user documentation.

00:31:41.930 --> 00:31:51.660
So let me drag those in and PackageMaker is going to make
choices for each of those items and it was real smart

00:31:51.660 --> 00:31:55.990
about the widget's thing, it figured
out that it was a widget and it's going

00:31:55.990 --> 00:31:59.269
to install it into /library/widgets.

00:31:59.269 --> 00:32:02.210
User documentation, it doesn't really know what to do with.

00:32:02.210 --> 00:32:08.410
It wants to install it into slash, for
the time being we'll just let it do that.

00:32:08.410 --> 00:32:12.990
Let's go take a look at some of
the specifics of the choices.

00:32:12.990 --> 00:32:17.319
So clicking on My App choice, gives
us the parameters of the choice

00:32:17.319 --> 00:32:22.659
and the initial state here is that
this is selected and enabled.

00:32:22.660 --> 00:32:28.710
Well, we figure that if the user install this
package, they want the application for sure.

00:32:28.710 --> 00:32:33.600
So we're going to have it selected,
but we're not going to have it enabled.

00:32:33.599 --> 00:32:36.889
Meaning that if the user's installed this
package, they have to installed the application.

00:32:36.890 --> 00:32:38.900
There's no way around it.

00:32:38.900 --> 00:32:46.530
The widget choice, we're going to enable
but we're not going to select by default.

00:32:46.529 --> 00:32:51.049
We think maybe most users won't want
the widget, maybe it's a Pro feature.

00:32:51.049 --> 00:32:56.980
So we'll leave it enabled so you can select
it, but it won't be installed by default.

00:32:56.980 --> 00:33:00.529
And user documentation we want selected and enabled.

00:33:00.529 --> 00:33:06.069
We want it installed by default but if folks don't
want to install it, that's cool, they can uncheck the box.

00:33:06.069 --> 00:33:14.869
So let's save this and create a package.

00:33:14.869 --> 00:33:20.629
MyApp and we're building a package.

00:33:20.630 --> 00:33:22.900
Oh, and we got a build error.

00:33:22.900 --> 00:33:28.850
So also kind of like Xcode, PackageMaker
will walk you through errors and warnings

00:33:28.849 --> 00:33:31.490
that you run into during package creation.

00:33:31.490 --> 00:33:32.549
So what did we get?

00:33:32.549 --> 00:33:35.190
We have one error, zero warnings.

00:33:35.190 --> 00:33:38.080
Distribution title must not be blank.

00:33:38.079 --> 00:33:42.990
Okay. And I've got a magnifying glass
icon over here, what does that mean?

00:33:42.990 --> 00:33:45.170
What if I click on that?

00:33:45.170 --> 00:33:56.160
It actually brings me to the point, it's
to the place in the UI that I need to fix.

00:33:56.160 --> 00:33:58.540
( applause )

00:33:58.539 --> 00:34:03.950
So, put a string in there, we'll just call it My Application
and now that that's fixed, I'll save the document

00:34:03.950 --> 00:34:15.570
and we'll try to build it and run it again
and see if that fixed all our problems.

00:34:15.570 --> 00:34:17.160
And it did.

00:34:17.159 --> 00:34:19.750
And I need two processors to run this upgrade.

00:34:19.750 --> 00:34:24.269
I don't know what that is.

00:34:24.269 --> 00:34:26.780
That's hm, hm.

00:34:26.780 --> 00:34:37.440
Well, let's go back to the package and I'll
pull that requirement off for the meantime.

00:34:37.440 --> 00:34:54.740
We'll save it and delete this and
build and run and cross our fingers.

00:34:54.739 --> 00:34:56.589
Okay, great.

00:34:56.590 --> 00:35:02.150
So if I continue through, we've got
all our stuff from before, agreed?

00:35:02.150 --> 00:35:07.800
I'm going to customize this and sure enough we've
got the changes that we made in PackageMaker.

00:35:07.800 --> 00:35:14.870
My App must be installed because, well, that's hard to
read, it's got a disabled check box that is checked.

00:35:14.869 --> 00:35:22.139
My widget won't be installed but, I can install it if I want
to so sure why not and user documentation, no I'm a pro.

00:35:22.139 --> 00:35:23.690
I don't need that.

00:35:23.690 --> 00:35:28.099
So we'll go ahead and perform the install
and it's going to go by really quickly,

00:35:28.099 --> 00:35:31.549
but it will say My App installing and My Widget installing.

00:35:31.550 --> 00:35:37.130
So see if you can catch it.

00:35:37.130 --> 00:35:40.590
My App, My Widget.

00:35:40.590 --> 00:35:49.700
Okay. Close and we've installed My App and My Widget and
so that's an example of using choices in the installer.

00:35:49.699 --> 00:35:52.349
Let me hand the presentation back over to Jack

00:35:52.349 --> 00:35:53.059
Jack.

00:35:53.059 --> 00:35:56.869
( applause )

00:35:56.869 --> 00:35:58.829
>> Thank you Luke.

00:35:58.829 --> 00:36:04.289
Okay, well we have either something wrong with PackageMaker
or something wrong with the demo machine.

00:36:04.289 --> 00:36:07.210
But anyhow, okay.

00:36:07.210 --> 00:36:10.130
So some more advanced needs you may have.

00:36:10.130 --> 00:36:15.289
Relocatable choices, again going
back to the Final Cut Studio example,

00:36:15.289 --> 00:36:22.889
it's huge and some of the content actually fills up an
entire DVD and that can fill up your hard drive pretty fast

00:36:22.889 --> 00:36:33.019
and so what we have is the notion of being able to relocate
some of that content and we're doing that here via a choice,

00:36:33.019 --> 00:36:42.119
which is a relocatable choice and that will actually
reroute all of the contents associated with the choices

00:36:42.119 --> 00:36:48.809
that you see below to a different hard drive probably.

00:36:48.809 --> 00:36:49.909
Multidisc installation.

00:36:49.909 --> 00:36:55.569
So again, Final Cut Studio, it's
six DVDs, DVD nines, quite huge.

00:36:55.570 --> 00:37:02.170
So we're pretty sure that it'll work
for ever, for whatever you guys have to do.

00:37:02.170 --> 00:37:08.130
Plug-ins. So, if you were to launch the Final Cut
Studio installer pretty early on you'd be presented

00:37:08.130 --> 00:37:12.090
with a UI asking you for a serial number.

00:37:12.090 --> 00:37:18.829
This is great. It's a good way for users, it's a good thing
for users psychologically because they can kind of take care

00:37:18.829 --> 00:37:22.199
of all their set up needs really
early on and be done with it.

00:37:22.199 --> 00:37:27.639
But there are a number of caveats when we talk about
plug-ins and extending the installer's UI which is

00:37:27.639 --> 00:37:29.900
that first of all, they're not guaranteed to run.

00:37:29.900 --> 00:37:34.260
So for the obvious example here is if
you use the command line installer.

00:37:34.260 --> 00:37:38.310
Well, there's no serial number entry
of the command line installer.

00:37:38.309 --> 00:37:43.400
What's more, you shouldn't be using
the, something like a licensed plug-in

00:37:43.400 --> 00:37:47.280
as a real gate keeper for any kind of copy protection.

00:37:47.280 --> 00:37:52.320
Because well the users can either go to the command
line or they can go get a tool from VersionTracker

00:37:52.320 --> 00:37:55.010
and just rip the contents out of
it and put it wherever they like.

00:37:55.010 --> 00:38:00.580
So the thing you should remember is that it's a
nice convenience for the user to have this kind

00:38:00.579 --> 00:38:04.329
of a thing implemented as a plug-in,
but you should also do the same thing

00:38:04.329 --> 00:38:07.610
in your app and handle it on app first launch.

00:38:07.610 --> 00:38:10.900
Finally, there's no integration
between PackageMaker and plug-in.

00:38:10.900 --> 00:38:14.599
So, by all means, use PackageMaker,
but at the end of that process,

00:38:14.599 --> 00:38:22.039
you're going to have to insert the plug-in
bits into the package after the fact.

00:38:22.039 --> 00:38:25.619
Okay, so what happens after you click install?

00:38:25.619 --> 00:38:36.900
Upgrades. Upgrades are the notion of the installer examining
the target disk and looking at what it has to install

00:38:36.900 --> 00:38:42.660
and it checks for any older versions of that package
and it does that by the identifier of the package.

00:38:42.659 --> 00:38:46.589
That stuff that Luke was typing
into the PackageMaker UI up there.

00:38:46.590 --> 00:38:56.140
And what it does is it sees if there are any files that are
no longer present in its payload, that are on the disk.

00:38:56.139 --> 00:39:04.119
So it will go and do things like for example,
if you no longer support a certain localization,

00:39:04.119 --> 00:39:09.619
it'll happily remove all of those localization
files as part of the upgrade process.

00:39:09.619 --> 00:39:17.500
A thing to note, this is determined by the bundle identifier
or the package identifier in the case of a flat package,

00:39:17.500 --> 00:39:22.590
of the package and so what you don't want to
do is go reusing that same identifier,

00:39:22.590 --> 00:39:27.440
because if you're distributing two applications
and they have the same identifier, it'll happily go

00:39:27.440 --> 00:39:32.440
and remove all the files associated with
you other application and that's bad.

00:39:34.469 --> 00:39:37.529
So, version comparison.

00:39:37.530 --> 00:39:41.320
If any of the files that you are installing
happen to already be on the disk,

00:39:41.320 --> 00:39:45.690
independent of whether it was packaged
in some other package beforehand,

00:39:45.690 --> 00:39:50.849
we will make sure that there isn't already
a newer version of that bundle on the disk

00:39:50.849 --> 00:39:54.139
and we don't stomp out any newer versions.

00:39:54.139 --> 00:39:58.400
It is overridable in the PackageMaker UI.

00:39:58.400 --> 00:40:06.380
If you have individual files that have their
own kind of internal versioning scheme,

00:40:06.380 --> 00:40:10.470
it's possible to hand the installer a piece of
code to run to do a version comparison for you.

00:40:10.469 --> 00:40:13.139
We have some documentation on that.

00:40:13.139 --> 00:40:16.559
We're not going to talk too much about that here.

00:40:16.559 --> 00:40:27.309
And of course, pre and post installation scripts can
be run beforehand, after the fact or in both cases,

00:40:27.309 --> 00:40:34.719
for any of your packages and the installer will just go and
run a binary but again, we suggest that you use something

00:40:34.719 --> 00:40:41.939
like Perl or shell that won't have
any binary incompatibility issues.

00:40:41.940 --> 00:40:43.639
Okay, locater.

00:40:43.639 --> 00:40:51.679
So you may recall earlier when Luke was doing his
first demo, that he went and unchecked something

00:40:51.679 --> 00:40:59.179
and what that something was, was the installer's locater
feature and he did that because in the course of his demo,

00:40:59.179 --> 00:41:03.690
had he done that, the installer would have found
the old, the same version of that application

00:41:03.690 --> 00:41:06.950
in it's build results folder and upgraded it there.

00:41:06.949 --> 00:41:09.239
But this is a useful feature obviously.

00:41:09.239 --> 00:41:11.579
If you install any of the OS updates, we do that.

00:41:11.579 --> 00:41:15.619
So if you've gone and organized your
applications folder in some specific way,

00:41:15.619 --> 00:41:20.429
we go and find those previous
versions and upgrade them in place.

00:41:20.429 --> 00:41:30.889
So, cool thing about locater in Leopard is that it's been
enhanced quite a bit and first off, it's easier to use.

00:41:30.889 --> 00:41:33.730
You can actually influence how a
locater works through JavaScript.

00:41:33.730 --> 00:41:48.170
You can use locater results as search, excuse me, as requirement and
requirement criteria for either the installation as a whole

00:41:48.170 --> 00:41:53.599
or for individual choices which is really cool so,
for example, you can say that the user can't proceed

00:41:53.599 --> 00:41:57.019
with installation unless locater finds
some old version of your app.

00:41:57.019 --> 00:41:58.159
Really handy.

00:41:58.159 --> 00:42:06.519
And, along this lines you can also pass the results of
what locater found to a pre or post install script.

00:42:06.519 --> 00:42:09.090
Very, very cool.

00:42:09.090 --> 00:42:12.960
So that's segues to Leopard new features.

00:42:12.960 --> 00:42:14.099
Flat file packages.

00:42:14.099 --> 00:42:19.190
That's probably the biggest feature
here and as Luke mentioned earlier,

00:42:19.190 --> 00:42:22.539
in Leopard, a flat file is an archive container.

00:42:22.539 --> 00:42:26.630
It's the thing you download, it's the
thing you can double click and run.

00:42:26.630 --> 00:42:30.599
And because we have this, it's really
easy to get cryptographic signing.

00:42:30.599 --> 00:42:33.289
So that's one cool thing.

00:42:33.289 --> 00:42:42.420
We have better compression using bz2 and we now have
for flat packages a utility in Leopard called pkgutil

00:42:42.420 --> 00:42:46.680
and that allows you to examine
properties of a package that's either

00:42:46.679 --> 00:42:49.539
that ever has been installed or
that has yet to be installed.

00:42:49.539 --> 00:42:52.019
A few other things.

00:42:52.019 --> 00:42:56.210
Home directory installation and binary patch packages.

00:42:56.210 --> 00:43:01.159
We actually had binary patch packages a little
while ago, but they were really hard to make

00:43:01.159 --> 00:43:06.199
and so finally we have a good UI
around it in the new PackageMaker.

00:43:06.199 --> 00:43:10.439
Okay, installer best practices.

00:43:10.440 --> 00:43:11.230
Packaging.

00:43:11.230 --> 00:43:17.360
So, you should package your software in a modular way.

00:43:17.360 --> 00:43:22.530
What I mean by this is that you don't, you probably
don't want to group together your documentation

00:43:22.530 --> 00:43:25.710
and your application in the same package.

00:43:25.710 --> 00:43:29.720
You probably want to be able to update your
documentation independently and not have

00:43:29.719 --> 00:43:34.029
to touch your application that's
already GM'd in some other package.

00:43:34.030 --> 00:43:37.810
And this works really well when
you talk about doing upgrades.

00:43:37.809 --> 00:43:48.409
And again, along those lines, use a unique identifier for
those packages and you don't have to worry about it too much

00:43:48.409 --> 00:43:54.339
if you use PackageMaker because it guides you down the
right path and puts sensible identifiers for packages

00:43:54.340 --> 00:43:58.370
and creates individual packages as you drag things into it.

00:43:58.369 --> 00:44:02.219
But it's just something to be aware of.

00:44:02.219 --> 00:44:07.859
Okay, so if you just remember a few
things, really just use packages.

00:44:07.860 --> 00:44:14.200
You can use packages and use PackageMaker to create
them, but if you have a reasonably competent user base

00:44:14.199 --> 00:44:21.419
and you're just distributing one thing, a disk image
based drag-install is a pretty good way to go, too.

00:44:21.420 --> 00:44:26.740
So, that brings us about to the
end here, but further information.

00:44:26.739 --> 00:44:33.949
We have an installer release notes document and
that's probably the single most concise place

00:44:33.949 --> 00:44:42.129
to really understand a lot of the nitty gritty details about
the installer document format and how the installer behaves.

00:44:42.130 --> 00:44:45.300
There's also a brand new PackageMaker user guide,

00:44:45.300 --> 00:44:48.160
which goes over the PackageMaker 3.0
which we've been showing you here.

00:44:48.159 --> 00:44:55.579
We have a lab tomorrow from noon
to 3:00 in Lab C and finally,

00:44:55.579 --> 00:44:59.739
last year's presentations are actually quite useful.

00:44:59.739 --> 00:45:02.339
They go into a lot more detail.

00:45:02.340 --> 00:45:06.530
This is really a 50,000 foot
oPverview of what your options are here.

00:45:06.530 --> 00:45:11.110
But there's a lot more detail in those
presentations and really all that still is applicable.

00:45:11.110 --> 00:45:11.430
So.