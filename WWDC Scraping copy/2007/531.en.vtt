WEBVTT

00:00:15.660 --> 00:00:18.140
>> Hello. My name is George Cook.

00:00:18.140 --> 00:00:22.190
I'm a consulting engineer with
Apple Education, US Education.

00:00:22.190 --> 00:00:23.580
I couldn't be more thrilled to be here.

00:00:23.579 --> 00:00:31.119
Because this technology is just a fabulous
vehicle for education, educational contact.

00:00:31.120 --> 00:00:33.570
( Applause )

00:00:33.570 --> 00:00:39.740
Also with me from Apple Europe is Eric Circlaeys
and Eric's the demo God of the day.

00:00:39.740 --> 00:00:44.050
So, and Eric's going to lead us
through some, some incredible demos.

00:00:44.049 --> 00:00:47.299
And he's been deeply involved with this project.

00:00:47.299 --> 00:00:53.079
( Applause )

00:00:53.079 --> 00:00:55.570
What we're going to talk about is
we're going to do a little overview.

00:00:55.570 --> 00:01:02.630
If you weren't in Dave O's great session last, we're
just going to do one slide to review that last session.

00:01:02.630 --> 00:01:08.320
And then we're going to jump into an architectural overview
focusing first on infrastructure briefly and then getting

00:01:08.319 --> 00:01:11.699
into the architecture of Podcast Producer.

00:01:11.700 --> 00:01:18.920
We're also very lucky to have with us today a couple of
guest speakers from De Anza College and UC Berkeley to talk

00:01:18.920 --> 00:01:21.290
about their plans to deploy this technology.

00:01:21.290 --> 00:01:27.120
And then Eric will join us in a presentation
of a project that he's involved in in Europe,

00:01:27.120 --> 00:01:31.060
which is a very large scale deployment of the technology.

00:01:31.060 --> 00:01:38.640
So, in summary of the last session, Podcast Producer
was designed to be an open and flexible platform.

00:01:38.640 --> 00:01:43.120
So it's more than just a product.

00:01:43.120 --> 00:01:47.950
It's really a platform, which means
customization is its DNA.

00:01:47.950 --> 00:01:58.500
And it's designed specifically to streamline
the capture and delivery of content.

00:01:58.500 --> 00:02:04.359
It's designed to offload that processing from the
workstation, to simplify the experience for end users,

00:02:04.359 --> 00:02:07.969
because end users, as Dave stated
in the last presentation, you know,

00:02:07.969 --> 00:02:12.340
there's just too many steps involved
in getting their content published.

00:02:12.340 --> 00:02:17.069
And so it simplifies that interface of
them and provides consistent results.

00:02:17.069 --> 00:02:21.909
For example, putting the university
logo on every presentation.

00:02:21.909 --> 00:02:25.299
And it feeds that publishing mechanism.

00:02:25.300 --> 00:02:31.080
So it itself is not the delivery tool, it sits
in the middle but then it can feed into iTunes U,

00:02:31.080 --> 00:02:33.760
to a blog wiki, to a streaming server, etcetera.

00:02:33.759 --> 00:02:40.979
So let's take a look at the infrastructure
that's required for Podcast Producer.

00:02:40.979 --> 00:02:48.280
The first thing that you need, as with any, many things
in Mac OS X Server, is solid DNS, forward and reverse DNS.

00:02:48.280 --> 00:02:50.490
You've got to have that first.

00:02:50.490 --> 00:02:52.300
Next, Open Directory and Kerberos.

00:02:52.300 --> 00:02:56.530
As you heard in Dave O's session it's secured with Kerberos.

00:02:56.530 --> 00:02:58.990
Open Directory is used for access control lists.

00:02:58.990 --> 00:03:02.030
So you need to have Open Directory infrastructure in place.

00:03:02.030 --> 00:03:03.939
You need to have a shared file system.

00:03:03.939 --> 00:03:07.789
A high performance shared file system is highly preferred.

00:03:07.789 --> 00:03:12.539
Xsan fills that niche and Xsan gives
you the scalability that you'll,

00:03:12.539 --> 00:03:16.719
you'll need going forward with, with Podcast Producer.

00:03:16.719 --> 00:03:18.000
You need Xgrid.

00:03:18.000 --> 00:03:23.120
Xgrid is the processing engine behind Podcast Producer.

00:03:23.120 --> 00:03:29.000
And what's great about Xgrid is that it's very simple
to scale just by adding additional processing nodes.

00:03:29.000 --> 00:03:33.840
And finally, Podcast Producer, the
command and control for the entire system,

00:03:33.840 --> 00:03:36.770
and then whatever publishing points you might have.

00:03:36.770 --> 00:03:40.920
So from Apple we'll have the wiki server,
for example, as a publishing point.

00:03:40.919 --> 00:03:43.659
But it doesn't necessarily have
to be part of your infrastructure.

00:03:43.659 --> 00:03:47.310
For instance, you may want to publish through iTunes U

00:03:47.310 --> 00:03:51.789
and that's another workflow that
will be part of Podcast Producer.

00:03:51.789 --> 00:03:54.729
So let's take a look at some of the
scaling factors for a deployment.

00:03:54.729 --> 00:03:58.799
The first thing you have to think
about are storage requirements.

00:03:58.800 --> 00:04:03.920
Well, DV, which is compressed but not highly
compressed video is about 13GB per hour.

00:04:03.919 --> 00:04:06.699
So if you're going to archive that
DV you have to start to think,

00:04:06.699 --> 00:04:10.879
how much storage am I going to need for that archival purposes?

00:04:10.879 --> 00:04:16.990
If you want to deliver to Apple TV that's about
1GB per hour and iPod is roughly 500MB per hour.

00:04:16.990 --> 00:04:23.769
So you're going to have to look at your delivery
types, the amount of contents you want to provide

00:04:23.769 --> 00:04:27.680
and start to scale your storage to meet those needs.

00:04:27.680 --> 00:04:34.350
And then processing power, again,
Xgrid makes this really easy to scale.

00:04:34.350 --> 00:04:38.700
Initially what you're probably going to do is take
some of the workflows that you're going to deploy

00:04:38.699 --> 00:04:41.560
and you are going to benchmark those workflows.

00:04:41.560 --> 00:04:47.680
You want to run some media through the workflows,
benchmark the workflows, and then say, Ok, this is great.

00:04:47.680 --> 00:04:52.780
We know what one takes now we have, you know, a
dozen classrooms we're initially going to deploy

00:04:52.779 --> 00:04:57.579
and we want a target of one hour
for the delivery of this content.

00:04:57.579 --> 00:05:00.509
How many nodes do we need to have to support that?

00:05:00.509 --> 00:05:03.769
So then you just add these Xgrid
nodes to increase your capacity.

00:05:03.769 --> 00:05:07.969
And finally, bandwidth, as I said Xsan,
ideal for the backend of the system,

00:05:07.970 --> 00:05:12.240
because it gives you the bandwidth
you need to process all this media.

00:05:12.240 --> 00:05:21.069
So that's required for the Xgrid nodes as well as the
Podcast Producer command and control server and then network

00:05:21.069 --> 00:05:27.860
for the submission of this content to Podcast Producer
and the delivery and distribution out to your clients.

00:05:27.860 --> 00:05:29.810
So that overview.

00:05:29.810 --> 00:05:33.170
Let's jump right into the client piece of Podcast Producer.

00:05:33.170 --> 00:05:38.600
We're going to focus in on three
areas, query, control and submit.

00:05:38.600 --> 00:05:46.570
So the first piece, query, QuickTime Player,
Podcast Capture, two things that are part of Leopard

00:05:46.569 --> 00:05:51.009
and then potentially your application
may want to access a workflow.

00:05:51.009 --> 00:05:51.849
So how does that happen?

00:05:51.850 --> 00:05:55.110
First I have to find out what workflows I have access to.

00:05:55.110 --> 00:05:57.150
So I talk to the Podcast Producer server.

00:05:57.149 --> 00:06:03.829
Based on ACLs on the server it delivers the set of
workflows, the list of workflows that I have access to.

00:06:03.829 --> 00:06:08.359
Once I know which workflows I have
access to, then I want to submit a file.

00:06:08.360 --> 00:06:14.960
So I go to submit a file, I contact the server,
submit the file with the specified workflow.

00:06:14.959 --> 00:06:15.899
Now, how does that happen?

00:06:15.899 --> 00:06:20.989
Under the covers it all works with
the pcast command line utility.

00:06:20.990 --> 00:06:22.829
QuickTime Player calls through that.

00:06:22.829 --> 00:06:27.659
Podcast Capture is simply a Cocoa
app that wraps the pcast command.

00:06:27.660 --> 00:06:29.560
And your app can do the exact same thing.

00:06:29.560 --> 00:06:35.709
We're going to take a deeper look at the pcast command.

00:06:35.709 --> 00:06:41.370
There's a little screen shot of the command page for pcast.

00:06:41.370 --> 00:06:47.680
Another thing that you can do with
Podcast Producer is you can bind a camera,

00:06:47.680 --> 00:06:53.379
which is used for these headless lecture capture systems.

00:06:53.379 --> 00:06:58.800
In the application, the Podcast Capture application,
the GUI, you can do this from a GUI standpoint.

00:06:58.800 --> 00:07:04.939
You can bind the local camera and it
registers itself with the server, it's secure.

00:07:04.939 --> 00:07:10.300
The reason it's secure is your application or QuickTime
Player or Podcast Capture, they can query the cameras.

00:07:10.300 --> 00:07:15.870
Again, using ACLs to find out
which cameras I have access to.

00:07:15.870 --> 00:07:20.209
So under the covers this is all pcast again.

00:07:20.209 --> 00:07:25.839
All of the starting, pausing and stopping
of that camera is done via the server.

00:07:29.069 --> 00:07:32.370
So that's how this camera agent is controlled.

00:07:32.370 --> 00:07:35.910
So at that, at this point I'm going to hand
the clicker, well, you don't need the clicker.

00:07:35.910 --> 00:07:37.800
We'll just have Eric go to the demo.

00:07:37.800 --> 00:07:41.129
So Eric will give us the demo of the client side.

00:07:41.129 --> 00:07:42.230
( Applause )

00:07:42.230 --> 00:07:44.210
>> Thank you very much, George.

00:07:45.339 --> 00:07:46.789
I've got a question before starting.

00:07:46.790 --> 00:07:49.340
How are you today?

00:07:49.339 --> 00:07:50.719
Wow, excellent.

00:07:50.720 --> 00:07:55.990
How many of you have installed Podcast
Producer this week and test it?

00:07:55.990 --> 00:07:57.430
Great, excellent.

00:07:57.430 --> 00:08:03.269
What I'm going to do now is to give you a
quick overview of the pcast command line.

00:08:03.269 --> 00:08:09.539
As you know, pcast is the tool behind Podcast Capture
application, which means anything you need to do

00:08:09.540 --> 00:08:13.550
like controlling an agent or submitting
a file with the workflow attached

00:08:13.550 --> 00:08:16.790
to it can be done very easily with no effort.

00:08:16.790 --> 00:08:20.040
So let me show that to you in action.

00:08:20.040 --> 00:08:26.280
First of all, pcast is a very well documented
command line utility with all the input

00:08:26.279 --> 00:08:30.489
and output descriptions you need
to understand it's usage.

00:08:30.490 --> 00:08:39.230
So I'm not going to go into the details and read this
with you but I'm sure you can do that after the session.

00:08:39.230 --> 00:08:43.720
But what I'd like to do with you is to
highlight some of these commands and show you how

00:08:43.720 --> 00:08:48.680
to use this command line utility to
control some of the cameras, for example,

00:08:48.679 --> 00:08:52.000
to get the stages or to submit a file manually.

00:08:52.000 --> 00:08:53.679
So let's do that for example.

00:08:53.679 --> 00:09:00.319
What I like to do is to list all the cameras
I have access to with my credentials.

00:09:00.320 --> 00:09:04.330
So I use the pcast command with the server name.

00:09:04.330 --> 00:09:11.259
So actually this one is podcastproducer.apple.demo.

00:09:11.259 --> 00:09:21.539
I'm using my account and actually
I want to list all the cameras.

00:09:21.539 --> 00:09:23.929
Boom! That's it, very simple.

00:09:23.929 --> 00:09:28.929
Actually there is only one camera I had
access to, this one in Pacific Heights' room.

00:09:28.929 --> 00:09:34.169
What I can do is to get a live status about this camera.

00:09:34.169 --> 00:09:49.079
And exactly the same way I ask for stages of that camera,
named Pacific Heights and I like also to get a live preview of it

00:09:49.080 --> 00:09:53.700
so I can ask it to actually a data preview.

00:09:53.700 --> 00:09:57.980
So there is actually the description
of my status of the camera.

00:09:57.980 --> 00:10:03.759
So I got a couple of properties and one that
is actually very interesting is the preview here.

00:10:03.759 --> 00:10:10.039
So you can imagine, for example, if you use that command
line in your own application you can easily grab this

00:10:10.039 --> 00:10:16.740
and actually show a preview of your
application like I'm doing here using Safari.

00:10:16.740 --> 00:10:18.659
So there actually is the preview.

00:10:18.659 --> 00:10:24.279
I was not in front of the camera but you get the idea.

00:10:24.279 --> 00:10:34.709
Ok. In Podcast Capture application in addition to do
and control cameras to record a course, for example,

00:10:34.710 --> 00:10:38.379
you can also submit a file manually
and attach your workflow.

00:10:38.379 --> 00:10:42.309
I like to reproduce this behavior using p  cast command line.

00:10:42.309 --> 00:10:46.459
So first what I need to do here is
actually get the workflow I like to use.

00:10:46.460 --> 00:10:54.710
So, same as I did before listing the
cameras I can list the workflows.

00:10:54.710 --> 00:11:05.879
OK. Here are all the workflows I can use and, for example,
this one named French 1 is the workflow I like to use

00:11:05.879 --> 00:11:08.809
in that demonstration as you can read in the description.

00:11:08.809 --> 00:11:12.219
OK. Actually I'm the only one, knowing what
I want, using that demo, but, trust me,

00:11:12.220 --> 00:11:15.550
this is the one I recommend for that demonstration.

00:11:15.549 --> 00:11:24.370
The other thing I have to pass to the command to
submit a file manually are the user requirements

00:11:24.370 --> 00:11:28.350
that the engine needs to complete this workflow properly.

00:11:28.350 --> 00:11:34.350
As this is described here in that node, I
need to provide a title and description.

00:11:34.350 --> 00:11:41.460
OK. For the sake of the demonstration I already
prepared a file, metadata .plist file with this information.

00:11:41.460 --> 00:11:44.560
Let me just show that to you.

00:11:44.559 --> 00:11:54.619
OK. So this is a file, a plist file, describing
this title and description I have to provide

00:11:54.620 --> 00:11:57.740
to the pcast command line in addition to the workflow.

00:11:57.740 --> 00:11:59.680
I'm going to pass this as a parameter.

00:11:59.679 --> 00:12:05.439
So I define the title, name, manual
submission demonstration.

00:12:05.440 --> 00:12:09.160
So I think I'm ready, with all this
information, to submit it by it by now.

00:12:09.159 --> 00:12:15.399
So I can get this called the submit
action, specifying a file.

00:12:15.399 --> 00:12:19.120
I'm going to use an advertising from Apple, Get a Mac.

00:12:19.120 --> 00:12:22.669
I'm sure you're all familiar with that one.

00:12:22.669 --> 00:12:26.759
I'll use the workflow I've previously selected.

00:12:26.759 --> 00:12:32.700
And I'm going to use this metadata file with the title

00:12:32.700 --> 00:12:38.280
and description this workflow needs
to complete perfectly, this one.

00:12:38.279 --> 00:12:42.850
Ok. And boom!

00:12:42.850 --> 00:12:44.550
File is submitted.

00:12:44.549 --> 00:12:49.229
And the results are going to be
available in a few minutes on my RSS feed.

00:12:49.230 --> 00:12:55.050
And if you subscribe now to my feed then
you'll get access to this content with iTunes.

00:12:55.049 --> 00:12:58.879
I can show, maybe, this to you using Xgrid.

00:13:02.840 --> 00:13:08.320
Ok. And this is actually being post processed.

00:13:11.159 --> 00:13:13.459
Pcast command is really a magic tool.

00:13:13.460 --> 00:13:17.200
The beauty of it is it's very easy
to integrate it with your own tool.

00:13:17.200 --> 00:13:19.730
You can wrap it very fast.

00:13:19.730 --> 00:13:25.500
What I'd like to show you to complete this
demonstration are two other great demo,

00:13:25.500 --> 00:13:28.909
two other great applications wrapping these two.

00:13:28.909 --> 00:13:32.490
The first one is actually a dashboard widget.

00:13:32.490 --> 00:13:35.870
And I'd like to, if I could use, with
that dashboard the exact same behavior

00:13:35.870 --> 00:13:38.750
as done previously with that pcast submit action.

00:13:38.750 --> 00:13:43.580
Let me show you that dashboard.

00:13:43.580 --> 00:13:45.889
So this is the dashboard.

00:13:45.889 --> 00:13:50.000
I run it. This one is a very simple.

00:13:50.000 --> 00:13:51.440
Let me just kill out the windows.

00:13:51.440 --> 00:13:54.680
This is just a very simple application.

00:13:54.679 --> 00:13:59.549
I have to enter some of the information for my credentials.

00:13:59.549 --> 00:14:05.089
And I just need to drag and drop a movie to this one.

00:14:05.090 --> 00:14:09.889
So I can use another movie, like for example,
this one that is coming from my camera.

00:14:09.889 --> 00:14:14.480
Ok. That's actually a cable car thing.

00:14:15.580 --> 00:14:22.930
I call this widget, I drag this to the
widget and this calls, actually pcast,

00:14:22.929 --> 00:14:25.569
(unclear) the workflow based on my credentials.

00:14:25.570 --> 00:14:31.170
And same I can select a French 1
workflow as I've done previously.

00:14:31.169 --> 00:14:42.419
Put a title, a description, and again,
as easy as this I press the submit button

00:14:42.419 --> 00:14:48.939
and the file is submitted calling another
pcast call with the submit option.

00:14:48.940 --> 00:14:53.550
The other demonstration is a web application.

00:14:53.549 --> 00:15:00.449
This web application is based on Ruby on Rails which is now
part of Leopard and this one does exactly the same

00:15:00.450 --> 00:15:10.140
by providing a web interface to any user, using any
browser to actually submit a file or control any camera.

00:15:10.139 --> 00:15:15.399
So let me run this web application on that machine.

00:15:15.399 --> 00:15:31.679
OK. And now I should be able to connect.

00:15:33.539 --> 00:15:37.620
So, same way I need to authenticate using my credentials.

00:15:37.620 --> 00:15:47.759
And, as you can see, just by building a web application
less than 200 lines of codes I can wrap this pcast command

00:15:47.759 --> 00:15:55.559
and give to other users using other type of browsers or
computers the ability to submit a file very basically

00:15:55.559 --> 00:16:01.789
or to record any camera from a web interface.

00:16:01.789 --> 00:16:09.029
Like, for example, Pacific Heights' camera is actually available.

00:16:09.029 --> 00:16:10.120
Thank you very much.

00:16:10.120 --> 00:16:10.919
George.

00:16:10.919 --> 00:16:18.729
( Applause )

00:16:18.730 --> 00:16:20.460
>> So back to the slides.

00:16:20.460 --> 00:16:23.900
So that's a little look at the client.

00:16:23.899 --> 00:16:32.750
And you can see some of the opportunities there for
taking your application or your custom set-up and tying it

00:16:32.750 --> 00:16:37.370
in on the client's side to submit
files, to control cameras, etcetera.

00:16:37.370 --> 00:16:40.159
Now we're going to switch over and take
a look at the server side and this is

00:16:40.159 --> 00:16:44.789
where there's a phenomenal opportunity for integration.

00:16:44.789 --> 00:16:53.219
Podcast Producer server, the command and control center, and
Xgrid, the processing engine, are controlled by workflows.

00:16:53.220 --> 00:16:54.960
This is the architecture.

00:16:54.960 --> 00:17:01.330
We just took a look at this piece, the
client side, part of Podcast Producer.

00:17:01.330 --> 00:17:07.799
And so you can see at the center of this we have the
pcast command allows you to submit, control, etcetera.

00:17:07.799 --> 00:17:15.789
In the center piece the command and control and processing
we have Podcast Producer itself as well as Xgrid.

00:17:15.789 --> 00:17:19.379
And then over on the right hand side we
have all these different publishing points,

00:17:19.380 --> 00:17:23.490
wiki weblog, iTunes U, etcetera.

00:17:23.490 --> 00:17:29.079
There's also notification services as part of
workflow so you may send an email to the person

00:17:29.079 --> 00:17:32.799
that submitted the content saying it's ready.

00:17:32.799 --> 00:17:40.369
Or to a list of students, for example, that are in
the class, you can now subscribe to the lecture.

00:17:40.369 --> 00:17:44.889
We're going to focus in on this center
piece, Podcast Producer server.

00:17:44.890 --> 00:17:47.550
And the first piece we're going to
take a look at here is the file system.

00:17:47.549 --> 00:17:53.549
Again, this is a shared file system, all of the
Xgrid nodes are accessing the shared file system

00:17:53.549 --> 00:17:57.599
and one of the things that's on the shared
file system are the submissions themselves,

00:17:57.599 --> 00:18:00.449
the files and the workflows that have been submitted.

00:18:00.450 --> 00:18:07.450
Then the workflow, the cache of workflows, are accessible
to all of the Xgrid nodes so they know how to execute this,

00:18:07.450 --> 00:18:11.069
and the resources for those workflows are also there.

00:18:11.069 --> 00:18:19.599
For instance, you may have an intro movie that you want
to put before every, every lecture that you do in biology.

00:18:19.599 --> 00:18:26.949
And so you have a nice little biology intro video
and that's part of that shared file system as well.

00:18:26.950 --> 00:18:33.500
And then the cache of the produced content,
the Podcast, the streams and archival content,

00:18:33.500 --> 00:18:40.349
by default Podcast Producer is going to save
everything in its highest resolution in an archive.

00:18:40.349 --> 00:18:46.819
And this is one of the reasons that Xsan is such
a great thing, because you can grow the storage

00:18:46.819 --> 00:18:50.230
and you probably need to grow the
storage if you archive everything.

00:18:50.230 --> 00:18:54.970
And then, of course, the processing piece, Xgrid.

00:18:54.970 --> 00:19:02.170
So, what's fabulous about Xgrid is to add capacity
you just add additional machines to the grid.

00:19:02.170 --> 00:19:06.730
No need to tear down the system, no need
to shut it off, you add additional agents

00:19:06.730 --> 00:19:10.000
and then you have more processing capacity.

00:19:10.000 --> 00:19:14.269
This is what a workflow looks like, a simple workflow.

00:19:14.269 --> 00:19:19.710
These are all stages in the workflow that are
submitted with that, that job to the grid.

00:19:19.710 --> 00:19:26.329
In this example we have a preflight script, we
have, we archived the original and then we annotate,

00:19:26.329 --> 00:19:33.949
add some metadata to the file, perhaps a title, we
encode in multiple formats, encode one for the iPod,

00:19:33.950 --> 00:19:40.170
encode an audio only version, and then post it
to the wiki, send an email this has been done,

00:19:40.170 --> 00:19:43.910
and then a little post flight script to clean up.

00:19:43.910 --> 00:19:46.350
So workflows, where are they?

00:19:46.349 --> 00:19:52.219
Well, there's a set of system workflows and like
everything in the system library if you modify this

00:19:52.220 --> 00:19:56.589
and Apple does a software update it may go away.

00:19:56.589 --> 00:19:59.579
So you don't want to modify these workflows.

00:19:59.579 --> 00:20:03.139
However, they're a great starting
point for your own workflows.

00:20:03.140 --> 00:20:08.480
So if you go into system library Podcast
Producer workflows you will see a number

00:20:08.480 --> 00:20:10.079
of workflows and these are all bundles.

00:20:10.079 --> 00:20:14.059
So if you're familiar with bundles on
Mac OS X, this is a familiar concept.

00:20:14.059 --> 00:20:20.139
You can reach inside those bundles and you
will see a set of resources for that workflow.

00:20:20.140 --> 00:20:24.009
Customer workflows should be installed
in library Podcast Producer workflows.

00:20:24.009 --> 00:20:29.690
These will automatically be distributed
across your shared file system for you.

00:20:29.690 --> 00:20:33.240
Inside of there there's a critical file that we're going

00:20:33.240 --> 00:20:37.680
to spend a little time looking at,
which is the template.plist file.

00:20:37.680 --> 00:20:43.190
So it is the technical specifications
or the source code for your workflow.

00:20:43.190 --> 00:20:47.330
It includes a new feature of Xgrid, which is Scoreboarding.

00:20:47.329 --> 00:20:54.169
So in Leopard Xgrid has a new capability to target
specific systems with a Scoreboarding system.

00:20:54.170 --> 00:21:01.779
So, for example, if you had workflow that had GPU intensive
tasks you could target or eliminate certain systems

00:21:01.779 --> 00:21:04.559
that had no GPUs in them, for instance, from your grid.

00:21:04.559 --> 00:21:09.220
So if you had some older Xserves with no
video cards they probably aren't great

00:21:09.220 --> 00:21:11.700
for doing Quartz Composer types of things.

00:21:11.700 --> 00:21:17.430
You may want to eliminate those from
the workflows that need those tasks.

00:21:17.430 --> 00:21:22.190
The task specifications themselves define the task and
the dependencies and we're going to drill down on that

00:21:22.190 --> 00:21:26.570
and the user requirements, the required
metadata for a workflow to execute.

00:21:26.569 --> 00:21:30.519
So this is what it looks like inside of a plist as it.

00:21:30.519 --> 00:21:36.759
You'll notice that there are some run time
variables that get substituted in the workflow.

00:21:36.759 --> 00:21:39.420
This is the metadata that you submit into the job.

00:21:39.420 --> 00:21:43.980
So, for instance, the notification email,
this workflow is successful executed

00:21:43.980 --> 00:21:50.980
The art conditions, that's the Scoreboarding part of the
plist and then the task specifications and user requirements.

00:21:50.980 --> 00:21:58.410
So the task specification, this is the command, the
arguments and the dependencies for the workflow.

00:21:58.410 --> 00:22:05.880
So the command line executable that is actually
executed at that stage in the workflow.

00:22:05.880 --> 00:22:08.330
So this could be a script, it could be a binary.

00:22:08.329 --> 00:22:14.220
If you are writing applications and you want them
to run in this environment it's important to factor

00:22:14.220 --> 00:22:17.779
to the command line so that they
can be executed across the grid.

00:22:17.779 --> 00:22:21.039
It includes these arguments with run time set substitutions.

00:22:21.039 --> 00:22:26.299
That's the metadata that comes into the workflow
and dependencies, any dependencies on other tasks.

00:22:26.299 --> 00:22:32.669
For instance, if you're going to publish to iTunes U
the file has to be processed before you can publish.

00:22:32.670 --> 00:22:34.539
So there would be a dependency there.

00:22:34.539 --> 00:22:36.659
And this is what a task looks like.

00:22:36.660 --> 00:22:43.040
For encoding to iPod, it's calling this script,
it's actually a Ruby Script, usr/bin/pcastaction.

00:22:43.039 --> 00:22:44.329
It's a wrapper.

00:22:44.329 --> 00:22:50.049
So this is actually a Ruby Script that wraps many of the
other executables that are included with Podcast Producer.

00:22:50.049 --> 00:22:56.019
We've done this to simplify the development of
workflows using what Apple builds into Podcast Producer.

00:22:56.019 --> 00:23:01.220
It includes some arguments we want to
encode and then the run time substitutions,

00:23:01.220 --> 00:23:03.930
the base directory where the file lives, etcetera.

00:23:03.930 --> 00:23:06.960
And then this depends on the watermark task.

00:23:06.960 --> 00:23:12.650
So this will not execute until the watermark
has been applied to the source content.

00:23:12.650 --> 00:23:20.880
If you look at pcastaction and the functions that it wraps,
these include editing functions, and Dave went through some

00:23:20.880 --> 00:23:28.830
of these in his presentation, those are pre-encoding
steps, things like merging, joining, splitting the movie,

00:23:28.829 --> 00:23:32.099
extracting tracks, deleting tracks, etcetera.

00:23:32.099 --> 00:23:36.990
And then there are encoding tasks that
we put into this encoding category.

00:23:36.990 --> 00:23:44.589
There are things like annotation, setting the poster and
the primary one, of course, encode for iPod, encode for 3G.

00:23:44.589 --> 00:23:50.309
And you may want to extract or
delete tracks after you've encoded.

00:23:50.309 --> 00:23:57.819
So, for instance, if you're going to iTunes with an audio
only version, why not just extract the already encoded audio

00:23:57.819 --> 00:23:59.919
from the video instead of encoding twice?

00:23:59.920 --> 00:24:01.070
Makes sense.

00:24:01.069 --> 00:24:07.409
Then publishing tasks go to the wiki server for a group
blog, publish to the streaming server, publish to iTunes U

00:24:07.410 --> 00:24:14.420
and notification to email, to iTunes U
or iTunes 4, I published a new Podcast.

00:24:14.420 --> 00:24:18.330
And then some utility tasks as well.

00:24:18.329 --> 00:24:23.419
You can get help on any of these from the command line
and Eric's again going to go into more detail on this

00:24:23.420 --> 00:24:26.490
by typing pcastaction help and the name of the action.

00:24:26.490 --> 00:24:29.609
And you can also get a list, etcetera.

00:24:29.609 --> 00:24:33.009
Another piece of these workflow tasks
are the metadata that flows into them.

00:24:33.009 --> 00:24:34.299
Some of it's recording metadata.

00:24:34.299 --> 00:24:38.710
So, for instance, with this DV camera it
would be, this is the format, it's DV video.

00:24:38.710 --> 00:24:42.500
It was recorded for 36 minutes, etcetera.

00:24:42.500 --> 00:24:45.799
That is part of the metadata that
you receive into your workflow.

00:24:45.799 --> 00:24:51.480
Then there is user metadata and title one description
in Eric's last example are examples of user metadata.

00:24:51.480 --> 00:24:53.019
And then there's server metadata.

00:24:53.019 --> 00:24:59.379
And if you came to Dave's last session you'll
notice in server admin there's this properties area,

00:24:59.380 --> 00:25:04.060
all those properties are server metadata
that can be tied into a workflow.

00:25:04.059 --> 00:25:10.679
There's the metadata that Apple ships as part of it and
then there's custom fields that you can configure yourself.

00:25:10.680 --> 00:25:18.430
So if you have metadata that you need for a specific
part of a workflow you can append your own properties

00:25:18.430 --> 00:25:22.320
into there and they're available to a workflow.

00:25:22.319 --> 00:25:29.769
So in terms of creating your custom workflows you're
going to want to bundle all these executables and scripts.

00:25:29.769 --> 00:25:35.009
If you're a developer, factor to the command
line so that they can be included in a workflow.

00:25:35.009 --> 00:25:40.289
You want to install custom workflows in library
Podcast Producer workflows not in system library.

00:25:40.289 --> 00:25:43.649
And you can monitor workflow execution
as Eric showed with Xgrid admin.

00:25:43.650 --> 00:25:47.750
And, of course, you can also use syslog
to monitor workflow execution.

00:25:47.750 --> 00:25:52.890
So, with that, I'm going to turn it back over
to Eric and I'll give him the clicker this time.

00:25:52.890 --> 00:25:54.320
>> Thank you.

00:25:54.319 --> 00:25:56.319
Can I, The slides please.

00:25:56.319 --> 00:25:59.529
>> So we need slides too.

00:25:59.529 --> 00:26:00.309
>> Thank you.

00:26:00.309 --> 00:26:06.379
So the purpose of this demonstration is to show you how
easy it is to create or modify an existing workflow.

00:26:06.380 --> 00:26:09.670
We have been using so far the French 1
workflow, if you remember.

00:26:09.670 --> 00:26:13.529
We are going to use that one and extend it.

00:26:13.529 --> 00:26:15.779
Before going through the demonstration
I'd like to talk a bit

00:26:15.779 --> 00:26:19.269
about this workflow and what we are going to do actually.

00:26:19.269 --> 00:26:20.990
So for that I have a slide.

00:26:20.990 --> 00:26:30.079
This is the typical diagram of a workflow describing
the different tasks and the dependencies of these tasks.

00:26:30.079 --> 00:26:31.369
This is a French 1 workflow.

00:26:31.369 --> 00:26:36.959
In that workflow what I do is, actually,
archiving the original movie then

00:26:36.960 --> 00:26:43.460
in parallel I annotate this original movie
and then you can see two different branches.

00:26:43.460 --> 00:26:49.420
The first one is actually encoding for iPod and then the
other one that can be, that is executed and parallel,

00:26:49.420 --> 00:26:52.560
if you have enough power, is the encoding for audio.

00:26:52.559 --> 00:27:01.029
And then we did a post to iTunes, and finally we have some
kind of image with a dependency to this send email,

00:27:01.029 --> 00:27:05.009
which is waiting for those tasks to complete properly.

00:27:05.009 --> 00:27:14.369
So, as you can see here I have some kind of pattern
of encoding and post to iTunes U. What I like to do

00:27:14.369 --> 00:27:21.789
in that demonstration is extend that workflow to
encode to another format, like for 3G, for example.

00:27:21.789 --> 00:27:32.710
So the basic thing would be to reuse this pattern and extend
it for a new encode for 3G and a new post to iTunes U. OK.

00:27:32.710 --> 00:27:44.620
So let's go to the demo machine now to, Can
I, can you switch to the demo machine, please?

00:27:44.619 --> 00:27:50.859
Before going through the changes I made to the workflow
to encode for 3G and post to iTunes U.result,

00:27:50.859 --> 00:27:58.439
I'd like to run the demo with the Get a Mac movie so
that at the end of this demo we can get the result.

00:27:58.440 --> 00:28:13.210
So for that I will use the Pcast Capture application with
file submission feature and use this Get a Mac movie.

00:28:15.039 --> 00:28:20.389
And I select my extended workflow,
which is actually French 1 Plus.

00:28:20.390 --> 00:28:30.930
So this is, add from Apple, Enjoy!, here it is.

00:28:30.930 --> 00:28:39.289
So, what I did actually to create that
workflow, I connected, I connected to the server

00:28:39.289 --> 00:28:45.369
and I get this workflow to have
a base as a working environment.

00:28:45.369 --> 00:28:55.029
So I duplicate this French 1 workflow that already exists
and if I open the package content and browse into it,

00:28:55.029 --> 00:29:01.960
as George demonstrated, I cannot access to this
template this plist file, which describes all the tasks

00:29:01.960 --> 00:29:06.860
and all these dependencies that are going to be apply
and on the movie I will submit to Podcast Producer.

00:29:06.859 --> 00:29:13.349
So this is the main file to edit to actually
change the behaviors of this workflow.

00:29:13.349 --> 00:29:17.669
So I'm going to edit it in editor, zoom a bit.

00:29:17.670 --> 00:29:22.960
If you remember my previous slide I define a pattern.

00:29:22.960 --> 00:29:28.559
This pattern does an encode and then it
posts to iTunes U. So then I should find,

00:29:28.559 --> 00:29:34.230
I should find this template an encode
for iPod opposed to iTunes U for iPod.

00:29:34.230 --> 00:29:39.519
So then I can duplicate these ones
and modify this as a start.

00:29:39.519 --> 00:29:44.160
So, if I browse into this file
you'll see all these different tasks.

00:29:44.160 --> 00:29:47.279
And actually, here I added this encode for iPod.

00:29:47.279 --> 00:29:49.869
So let's duplicate this task.

00:29:50.950 --> 00:29:52.940
This is the name of the task.

00:29:52.940 --> 00:29:56.740
Let's rename it encode3g.

00:29:56.740 --> 00:29:58.740
Dependency is exactly the same.

00:29:58.740 --> 00:30:00.410
Remember my branching?

00:30:00.410 --> 00:30:09.410
Actually the annotate task will then call for encode
for iPod, encode for audio and encode for 3G.

00:30:09.410 --> 00:30:13.800
And I want these to execute in
parallel so this one is correct.

00:30:13.799 --> 00:30:15.430
The command is pcastaction.

00:30:15.430 --> 00:30:19.910
It uses the encode subcommand.

00:30:19.910 --> 00:30:21.370
The parameter looks correct for me.

00:30:21.369 --> 00:30:24.299
The input is still the original movie.

00:30:24.299 --> 00:30:25.720
The output is a bit different.

00:30:25.720 --> 00:30:33.360
I want to name it 3g and the extension will be 3gp.

00:30:33.359 --> 00:30:36.329
And the last parameter is the encoder.

00:30:36.329 --> 00:30:37.259
Well, guess what?

00:30:37.259 --> 00:30:40.799
I have no idea about the encoder
name for the 3G I want to use.

00:30:40.799 --> 00:30:42.319
I know that we support it.

00:30:42.319 --> 00:30:50.589
So for that I'm going to go into the help of pcastaction
to have an idea about the encoder type.

00:30:50.589 --> 00:30:56.829
So if I type pcastaction help, you'll get
a list of all the subcommands we support.

00:30:56.829 --> 00:31:01.230
But let's focus on the encode part of it.

00:31:01.230 --> 00:31:08.720
So if I go to the encode you'll see all the different
parameters you need to pass to that command in your tasks

00:31:08.720 --> 00:31:11.880
so then you can use that subcommand properly.

00:31:11.880 --> 00:31:17.690
And as an encoder I like to use, actually, 3gpp_release_5.

00:31:17.690 --> 00:31:23.930
So let's go back to my template of plist
file and replace this by the correct one.

00:31:23.930 --> 00:31:31.470
So once this is done, what I want to do
now is to post this output to iTunes U.

00:31:31.470 --> 00:31:42.360
So let's duplicate an iTunes U
task and rename it iTunesU3g.

00:31:42.359 --> 00:31:46.969
And I want this task to depend on the previous one.

00:31:46.970 --> 00:31:53.759
So let's copy this encode_3g name
and that will be my dependency.

00:31:53.759 --> 00:31:58.259
For that I'm using pcastaction coding iTunes U subcommand.

00:31:58.259 --> 00:32:02.089
Most of the parameters here are
correct, only this one looks suspicious.

00:32:02.089 --> 00:32:06.919
So let me fix this one.

00:32:06.920 --> 00:32:09.060
And that should be correct.

00:32:09.059 --> 00:32:14.389
One last thing you remember this sort of
join at the end, when you submit the mail.

00:32:14.390 --> 00:32:20.090
So I want to make sure that the mail is well
submitted once all these tasks are completed.

00:32:20.089 --> 00:32:26.339
So I need to add this one here to
complete the chain of my workflow.

00:32:26.339 --> 00:32:30.829
So this workflow is finished actually.

00:32:30.829 --> 00:32:38.639
You just have now to modify the main input of plist
file here to put a new title and a new description.

00:32:38.640 --> 00:32:45.120
Then you can copy back this workflow on the server in
/library/Podcast Producer/workflows

00:32:45.119 --> 00:32:51.409
and you have then to trigger this sync workflows
command line that George demonstrated previously.

00:32:51.410 --> 00:32:54.500
So then this workflow can now be used by the users.

00:32:54.500 --> 00:33:00.049
So let's see if my previous demonstration
completed perfectly.

00:33:00.049 --> 00:33:04.980
Yes, I received an email named A Great Ad from Apple.

00:33:04.980 --> 00:33:14.690
If I go to iTunes U I should see my iPod
version, my audio version and now my 3G version.

00:33:17.910 --> 00:33:20.480
OK. It's coming.

00:33:20.480 --> 00:33:26.730
This has been posted to elementary French.

00:33:26.730 --> 00:33:34.690
And, as you can see, you have my Apple Get a Mac iPod movie.

00:33:34.690 --> 00:33:35.630
( Movie plays )

00:33:35.630 --> 00:33:39.280
You have the audio only.

00:33:39.279 --> 00:33:40.119
( Audio plays )

00:33:40.119 --> 00:33:53.659
Ok. And then you have this 3G version
that has been generated properly.

00:33:53.660 --> 00:33:53.980
( Applause )

00:33:53.980 --> 00:33:57.329
Can we go back to the slide, please?

00:33:57.329 --> 00:34:01.000
Now, let's move forward to the case studies.

00:34:01.000 --> 00:34:09.059
And for that I am pleased and honored to have on stage
Willie Pritchard from De Anza College to talk to you

00:34:09.059 --> 00:34:11.860
about podcasting initiatives and Podcast Producer.

00:34:11.860 --> 00:34:12.150
Thank you.

00:34:12.150 --> 00:34:12.720
( Applause )

00:34:12.719 --> 00:34:14.559
>> Thank you, Eric.

00:34:14.559 --> 00:34:15.449
Good job.

00:34:15.449 --> 00:34:18.269
( Applause )

00:34:18.269 --> 00:34:19.000
Good morning.

00:34:19.000 --> 00:34:20.059
It's good to see everybody here.

00:34:20.059 --> 00:34:21.670
I just wanted to get a quick poll.

00:34:21.670 --> 00:34:26.940
How many people here represent or
are from educational institutions?

00:34:26.940 --> 00:34:29.130
Oh, this is really gratifying.

00:34:29.130 --> 00:34:34.599
Great. Let me just settle the context here first.

00:34:34.599 --> 00:34:36.029
I'm from De Anza College.

00:34:36.030 --> 00:34:43.950
It's a community college, a large urban community college in
Cupertino, California, about a mile away from Infinite Loop.

00:34:43.949 --> 00:34:48.609
As you might imagine we have a few
Apple products in our inventory.

00:34:48.610 --> 00:34:53.269
We serve about 25,000 students% a year.

00:34:53.269 --> 00:34:59.519
And, as you might imagine, we're often seen as
the poor step sibling in higher ed communities.

00:34:59.519 --> 00:35:06.190
So we often have challenges that many other
universities or four year institutions do not face.

00:35:06.190 --> 00:35:11.780
And that primarily revolves around the staffing
limitations that we have because the budget

00:35:11.780 --> 00:35:15.500
that we have is somewhat bleak when it comes to that.

00:35:15.500 --> 00:35:23.369
However, we have been doing distance learning
through a television studio for about 30 years,

00:35:23.369 --> 00:35:32.079
broadcasting out to about 300,000 homes over
the local cable in San Jose, Santa Clara area.

00:35:32.079 --> 00:35:37.759
And we have been moving since that time more
and more into the digital arena and also more

00:35:37.760 --> 00:35:44.240
and more into distributing our
classroom media out into the classrooms.

00:35:44.239 --> 00:35:48.279
So let me just tell you what we've
done in the last, say, ten years.

00:35:48.280 --> 00:35:51.000
We've managed to move all of our,

00:35:51.000 --> 00:35:59.329
I'm sorry, about 100 of our classrooms into
what we call a multimedia console environment.

00:35:59.329 --> 00:36:06.679
This console consists of a Mac mini with a flat screen for
the faculty to stand at the front of the room and be able

00:36:06.679 --> 00:36:14.089
to do their lecture, also has a projector and full
audio capabilities as well as a document camera

00:36:14.090 --> 00:36:17.890
so that the instructor can place
objects or a document on the podium

00:36:17.889 --> 00:36:21.920
and be able to project that as well to the students.

00:36:21.920 --> 00:36:29.740
And, as appropriate for the subject matter,
we also have other equipment as appropriate.

00:36:29.739 --> 00:36:36.559
Because of the staff intensive nature of old technology
we've only had one classroom to date where we've been able

00:36:36.559 --> 00:36:40.989
to do the kind of quality video that we've wanted to do.

00:36:40.989 --> 00:36:50.819
And that, even then, has requirements that we have, in our
case, student helper who's basically doing the production

00:36:50.820 --> 00:36:53.190
and switching between cameras and so forth.

00:36:53.190 --> 00:36:58.929
However, we are now starting to play
around with adding additional classrooms.

00:36:58.929 --> 00:37:04.199
And we're looking at reducing further the
amount of staff involvement in these productions

00:37:04.199 --> 00:37:11.219
so that we can auto-track the instructor as they
move around the room, which they like to do.

00:37:11.219 --> 00:37:20.009
And we are experimenting with pads on the floor and
sensing devices, audio capabilities to be able to take

00:37:20.010 --> 00:37:25.480
in the student questions and comments as well.

00:37:25.480 --> 00:37:27.050
And we're seeing,

00:37:27.050 --> 00:37:31.530
And we fully expect that we're
going to do many more of these.

00:37:31.530 --> 00:37:37.920
And one of the reasons is because the good
citizens of Silicon Valley do support education.

00:37:37.920 --> 00:37:42.570
Just last year we passed a $500 million dollar bond issue.

00:37:42.570 --> 00:37:43.160
( Applause )

00:37:43.159 --> 00:37:47.159
Yeah. We really appreciate that.

00:37:47.159 --> 00:37:52.179
And about $100 million of it is going to be going
into technology over the next decade or so.

00:37:52.179 --> 00:37:58.379
So we do have the resources to be able
to get the hardware but we still need

00:37:58.380 --> 00:38:02.860
to find a solution that's not so staff intensive.

00:38:02.860 --> 00:38:07.660
And voila, Podcast Producer comes along.

00:38:07.659 --> 00:38:12.539
So we also, concurrent with all
this are seeing needs for changes.

00:38:12.539 --> 00:38:18.789
We are seeing an increasing demands for classrooms
that can record sessions in a fully automated way.

00:38:18.789 --> 00:38:23.130
We're hearing this mostly from
faculty and deans but we also know

00:38:23.130 --> 00:38:26.990
that students are the ones that are motivating this desire.

00:38:26.989 --> 00:38:32.179
We know that ease of use is critically important.

00:38:32.179 --> 00:38:35.149
Those of you who are from educational
institutions know that faculty

00:38:35.150 --> 00:38:38.740
like to just walk into the classroom teach and walk out.

00:38:38.739 --> 00:38:42.769
They don't want to have to be pushing
buttons or controlling devices

00:38:42.769 --> 00:38:46.460
or essentially looking like a fool
in front of the classroom.

00:38:46.460 --> 00:38:50.820
So we have to make it as automatic and as easy as possible.

00:38:50.820 --> 00:38:58.280
And we also are looking for a way to automatically place
the material that's recorded into our distribution medium,

00:38:58.280 --> 00:39:04.540
which in our case is iTunes U, as well as Moodle,
which is an open source course management system

00:39:04.539 --> 00:39:08.199
that many of you are probably, have heard about.

00:39:09.530 --> 00:39:16.180
For the future we want to move to an
environment so that every classroom can do this.

00:39:16.179 --> 00:39:18.869
So it can record, store and distribute activities

00:39:18.869 --> 00:39:24.839
to all these other online assets
that students will be able to get to.

00:39:24.840 --> 00:39:28.470
We also need to have flexibility in the scheduling.

00:39:28.469 --> 00:39:32.709
We are on a quarter system so we're
rotating through quite a bit.

00:39:32.710 --> 00:39:37.449
Classrooms are often times scheduled
on a sort of impromptu basis.

00:39:37.449 --> 00:39:43.179
So we need to be able to capture what's going on in those
classrooms, or we have guest speakers in and so forth.

00:39:43.179 --> 00:39:45.779
So we need to have some flexibility in scheduling.

00:39:45.780 --> 00:39:50.590
And we also need to have automatic
as well as manual control.

00:39:50.590 --> 00:39:56.530
We have faculty who are now producing Podcast, as I'm sure
many of you are experiencing at your home institutions.

00:39:56.530 --> 00:40:04.340
And we would like to be able to have them be able to do this
and feed directly into Podcast Producer so we don't have

00:40:04.340 --> 00:40:08.600
to have a whole lot of staff intervention on that too.

00:40:08.599 --> 00:40:16.409
So we plan to set up individual Podcast development stations
or faculty being able to do it right out of their office.

00:40:16.409 --> 00:40:19.420
So now it's the time that all the geeky
side of the audience likes to see,

00:40:19.420 --> 00:40:24.740
which is our flow chart for how we see this working.

00:40:24.739 --> 00:40:29.659
We really see that Podcast Producer is the
glue that kind of holds together the two ends

00:40:29.659 --> 00:40:32.059
that we've sort of got in place right now.

00:40:32.059 --> 00:40:38.029
This first one is the classroom capture environment.

00:40:38.030 --> 00:40:44.090
I already mentioned our multimedia
consoles where we have microphones,

00:40:44.090 --> 00:40:50.430
the DVD or VCR, computer, a document camera, etcetera.

00:40:50.429 --> 00:40:56.569
And what we're going to be doing is simply adding a
camera into that mix with an audio microphone as well.

00:40:56.570 --> 00:41:04.680
So it's a fairly low cost addition to be able to make
all of our classrooms upgradeable to Podcast Producer.

00:41:04.679 --> 00:41:06.449
And then we...

00:41:06.449 --> 00:41:09.649
All of them have a mini in them already.

00:41:09.650 --> 00:41:17.670
So we can see that that can serve as our encoder
in our client system for the, for the capturing.

00:41:17.670 --> 00:41:24.260
The middle part here is Podcast Producer and it's
really central to what, the success of what we're doing.

00:41:24.260 --> 00:41:28.420
This is where we handle our scheduling, storage, etcetera.

00:41:28.420 --> 00:41:37.420
And, of course, you've seen these before, if you went to
the previous session and seen the Xray and Xgrid, etcetera,

00:41:37.420 --> 00:41:40.190
for being able to do some of the processing.

00:41:40.190 --> 00:41:49.900
Traditionally, I should say, we also, as many
of you know, are required to caption video

00:41:49.900 --> 00:41:52.490
that we go out for those with disabilities.

00:41:52.489 --> 00:42:01.759
And this has been a very difficult time to, in terms of
expense, for staffing and the cost of finding captioners

00:42:01.760 --> 00:42:03.260
to be able to put that information in there.

00:42:03.260 --> 00:42:05.870
So that's a challenge for us.

00:42:05.869 --> 00:42:13.859
Then the distribution, of course, we can put it out to
multiple media, QuickTime server, iTunes U, our, of course,

00:42:13.860 --> 00:42:17.210
management system Moodle, which we've
branded as Catalyst and then from there

00:42:17.210 --> 00:42:22.210
to the web so that students can access it.

00:42:22.210 --> 00:42:25.369
This sort of captures all of the detail.

00:42:25.369 --> 00:42:31.279
I'm not going to go through it, specifically every
one, but we have locations where we're going to be able

00:42:31.280 --> 00:42:34.500
to place the Podcast Producer capture stations

00:42:34.500 --> 00:42:40.630
We have a variety of applications that we see for web
archiving, distance learning, guest speakers, etcetera.

00:42:40.630 --> 00:42:45.470
Clearly there's a lot of value added by
adding Podcast Producer into this mix.

00:42:45.469 --> 00:42:47.699
We have a number of capture formats.

00:42:47.699 --> 00:42:57.769
We can do it either audio only, audio and data, video,
audio and data as well and distribution formats.

00:42:57.769 --> 00:43:05.250
The one outstanding issue for us, as many of you in
the audience know, is this whole idea of captioning.

00:43:05.250 --> 00:43:10.880
We are required by state and federal
law to provide materials in a format

00:43:10.880 --> 00:43:13.670
so that those with disabilities can access them.

00:43:13.670 --> 00:43:20.380
So this is our biggest challenge and we're looking at
speech detects technology to try to find a solution

00:43:20.380 --> 00:43:23.140
and we are very interested in talking to.

00:43:23.139 --> 00:43:27.079
Here's a developer opportunity for those
of you who are working in this area.

00:43:27.079 --> 00:43:29.889
We think the market is potentially huge.

00:43:29.889 --> 00:43:32.879
In California alone there are 109 community colleges.

00:43:32.880 --> 00:43:38.289
We serve three, I'm sorry, two and a half
million students in the state of California.

00:43:38.289 --> 00:43:46.969
If you throw in UC and CSU into the mix then you're up
over three million students and 150 different campuses.

00:43:46.969 --> 00:43:49.319
So the opportunity is really there.

00:43:49.320 --> 00:43:55.059
And I'd be happy and very eager to talk to anybody
after the session who might be working in that area.

00:43:55.059 --> 00:44:01.380
Let me just say that our vision is to be
able to automate that process as well.

00:44:01.380 --> 00:44:08.150
Imagine dropping the lecture into the text track
of a QuickTime movie time sync and then searchable

00:44:08.150 --> 00:44:16.519
through Spotlight, a student at any moment can get
online, type in a concept and voila there's a whole list

00:44:16.519 --> 00:44:21.650
of all the various lectures that are available online
for that particular concept they're looking for.

00:44:21.650 --> 00:44:26.110
So we think the potential for some really
exciting learning opportunities is there.

00:44:26.110 --> 00:44:29.150
We're really excited about Podcast Producer.

00:44:29.150 --> 00:44:30.760
So, thank you very much.

00:44:30.760 --> 00:44:31.840
And I'm going to,

00:44:31.840 --> 00:44:35.059
( Applause )

00:44:35.059 --> 00:44:39.190
Turn it over to Adam Hochman from UC Berkeley.

00:44:41.699 --> 00:44:43.329
>> Thanks Willie.

00:44:43.329 --> 00:44:49.289
I'm here today to talk about UC Berkeley's webcast
and Podcast program and why we chose Podcast Producer

00:44:49.289 --> 00:44:53.639
as a major component for our next
generation capture and delivery system.

00:44:55.349 --> 00:45:01.549
Eleven years ago computer science professor Larry Roe
started a research project webcasting a few of his courses.

00:45:01.550 --> 00:45:05.440
His students loved it and the university
thought, wow, this is a really good idea.

00:45:05.440 --> 00:45:11.730
So four years later they started a
webcast service for the entire campus.

00:45:11.730 --> 00:45:16.639
Today we have six webcasts and 14
Podcasts in general assignment classrooms.

00:45:16.639 --> 00:45:19.670
From the faculty's perspective it's completely automated.

00:45:19.670 --> 00:45:23.440
All they need to do is simply put a mic
on their lapel and they're ready to go.

00:45:23.440 --> 00:45:28.150
From these classrooms we've captured
around 82 courses in the past year.

00:45:28.150 --> 00:45:36.519
There's been a huge explosion of growth and
popularity of webcasting and Podcasting on our campus.

00:45:36.519 --> 00:45:42.400
Just recently we had a survey on campus with incoming
freshman and we found that they expect Podcasting

00:45:42.400 --> 00:45:47.059
to be an essential service on campus
on par with email and wireless.

00:45:47.059 --> 00:45:54.090
So for, for freshman and for students on our campus,
they depend on this as a study tool and they just assume

00:45:54.090 --> 00:45:56.829
that all their classes are going to be Podcast.

00:45:56.829 --> 00:46:04.690
We started Podcasting several years ago and we were one
of the first universities to deploy an iTunes U site.

00:46:07.739 --> 00:46:11.239
We also have a worldwide audience of lifelong learners.

00:46:11.239 --> 00:46:16.059
Every dot on this map represents
thousands to hundreds of thousands of users

00:46:16.059 --> 00:46:19.799
that visit our site and download our Podcasts.

00:46:21.320 --> 00:46:25.180
In 2006 alone we had over 3000 hours of lecture content.

00:46:25.179 --> 00:46:32.419
As I mentioned before, 82 courses captured, 3.5M
unique views and 10.6M MP3 downloads

00:46:32.420 --> 00:46:36.760
from our webcast.berkeley.edu
distritubtion channel alone.

00:46:36.760 --> 00:46:43.730
The reason for our success is, one, all
our content is open free to the public

00:46:43.730 --> 00:46:49.409
As a public institution we believe that our content
should be distributed to the public for free.

00:46:49.409 --> 00:46:54.730
We also use iTunes U and Google video as major
distribution channels, and what that allows us

00:46:54.730 --> 00:46:56.710
to do is a wide distribution of our content.

00:46:56.710 --> 00:46:59.360
It really puts us on a world stage.

00:46:59.360 --> 00:47:04.570
Also we happen to have really great professors
and we have notable speakers come to our campus,

00:47:04.570 --> 00:47:13.820
like this past spring Jimmy Carter and Stephen Hawking
came and you can see that webcast on our delivery system.

00:47:13.820 --> 00:47:23.130
Although, although we're extremely popular the bar of
expectations for our program has risen quite a bit.

00:47:23.130 --> 00:47:30.130
We receive emails from both our lifelong learners and our
students, they want more quantity, they want more quality,

00:47:30.130 --> 00:47:35.369
they want more portability and they
want it now and it's quite overwhelming.

00:47:35.369 --> 00:47:42.549
And to meet that demand we're hoping within the next three
to five years to have 200 plus classrooms Podcast enabled.

00:47:45.190 --> 00:47:50.059
To meet this demand though and to have these sort
of ambitions we're kind of shaking in our boots

00:47:50.059 --> 00:47:55.420
because our existing system has a lot of
challenges and we really need to start over.

00:47:55.420 --> 00:48:02.800
And we found that Podcast Producer really provides
a scalable system and a robust and flexible system

00:48:02.800 --> 00:48:06.269
for capturing, post processing and delivering media.

00:48:06.269 --> 00:48:08.480
So we're very excited about it.

00:48:08.480 --> 00:48:12.719
There's various challenges that we face
and I'm going to go through the ways

00:48:12.719 --> 00:48:15.419
in which Podcast Producer is going to solve those for us.

00:48:15.420 --> 00:48:24.930
From a scalability standpoint our existing system was not
built for high volume post processing of video and audio.

00:48:24.929 --> 00:48:30.469
What Podcast Producer facilitates is
media batched processing over the Xgrid

00:48:30.469 --> 00:48:36.129
and then also seamlessly integrates
Xgrid with QuickTime and Quartz Composer.

00:48:36.130 --> 00:48:41.430
From an accessibility standpoint we
are unfortunately capturing in Real.

00:48:41.429 --> 00:48:43.069
That's a legacy decision.

00:48:43.070 --> 00:48:45.030
And everyone emails us all the time.

00:48:45.030 --> 00:48:46.110
Why are capturing in Real?

00:48:46.110 --> 00:48:50.050
We need to download a Real Media Player,
it's not portable, etcetera, etcetera

00:48:50.050 --> 00:48:53.660
And we're capturing in a lower bit rate and
we really don't have an archive strategy.

00:48:53.659 --> 00:48:54.670
It's just been Real.

00:48:54.670 --> 00:49:00.610
Well, the workflows that Podcast Producer
provides really allows a flexible way to encode

00:49:00.610 --> 00:49:03.300
to various formats that QuickTime provides.

00:49:03.300 --> 00:49:12.180
So now we can, now we can transcode easily
for the iPod or Apple TV or for the archiving.

00:49:12.179 --> 00:49:15.710
We're moving all of our content to Creative Commons.

00:49:15.710 --> 00:49:18.690
So in order to do so we need to,

00:49:18.690 --> 00:49:18.769
( Applause )

00:49:18.769 --> 00:49:20.179
Thank you.

00:49:21.679 --> 00:49:28.059
So we really want to facilitate distribution
everywhere and we're really excited about that.

00:49:28.059 --> 00:49:34.210
But in order to do so we need to brand and copyright all
our material so people know that it's coming for UC Berkeley

00:49:34.210 --> 00:49:37.570
and they know what they can do with it
by just looking at the media itself.

00:49:37.570 --> 00:49:41.010
We do not have the staff to do
this level of branding manually.

00:49:41.010 --> 00:49:43.510
What we love about Podcast Producer is that through Quartz

00:49:43.510 --> 00:49:49.430
and QuickTime we can do the composting
intros and outros automatically.

00:49:49.429 --> 00:49:52.809
And I've learned a lot more about Quartz Composer this,

00:49:52.809 --> 00:49:57.070
this week and I'm really excited about
the fun things we can do with it.

00:49:57.070 --> 00:50:04.610
From a sustainability standpoint our current system doesn't
talk to one another, various components and it breaks

00:50:04.610 --> 00:50:10.650
down in various locations from the capture point
to the post processing point to the delivery point

00:50:10.650 --> 00:50:12.430
and we don't really know what's going on.

00:50:12.429 --> 00:50:13.480
It could be the database.

00:50:13.480 --> 00:50:16.360
It could be that the encoder didn't get an updated script.

00:50:16.360 --> 00:50:18.970
And it's just not a very stable system.

00:50:18.969 --> 00:50:26.439
So what happens is when the system breaks down
it basically, basically is an exponential affect

00:50:26.440 --> 00:50:29.539
and it affects our video production staff and students.

00:50:29.539 --> 00:50:34.179
We like, we like Podcast Producer because
it provides automated classroom capture.

00:50:34.179 --> 00:50:35.099
It's very stable.

00:50:35.099 --> 00:50:41.699
And it also provides automated metadata harvesting so that
it injects the content coming from our registrar system

00:50:41.699 --> 00:50:44.609
so that our video production step
doesn't have to do that manually.

00:50:44.610 --> 00:50:50.510
Right now they take every single MP3 that we
deliver and inject the ID3 tags themselves.

00:50:50.510 --> 00:50:58.620
From an automated distribution standpoint, now we push
our stuff to Google video and iTunes U ourselves manually.

00:50:58.619 --> 00:51:03.750
It's a really, it's a really hard process
and we're really excited about the fact

00:51:03.750 --> 00:51:07.409
that Podcast Producer could provide the service for us.

00:51:10.239 --> 00:51:16.389
Our next generation system, we're looking to
basically marry Sakai and Podcast Producer.

00:51:16.389 --> 00:51:20.650
If you're not familiar with Sakai, many in
the audience already might be because they're

00:51:20.650 --> 00:51:24.440
from the educational domain, but
Sakai is an open source product.

00:51:24.440 --> 00:51:27.519
It's essentially an open source competitor with Blackboard.

00:51:27.519 --> 00:51:29.750
It's a consortium of 90 plus universities.

00:51:29.750 --> 00:51:36.619
And we have an implementation of Sakai as a
learning and management environment on our campus.

00:51:36.619 --> 00:51:42.230
We're really excited about building a content management
system inside Sakai because it's already integrated

00:51:42.230 --> 00:51:49.829
from an authentication authorization standpoint and from a
metadata standpoint with the existing systems on campus.

00:51:49.829 --> 00:51:54.980
So we're basically going to put a content
management system on top of Podcast Producer

00:51:54.980 --> 00:52:01.840
and orchestrate the Podcast Producer workflows through Sakai.

00:52:01.840 --> 00:52:06.940
We're also, as I mentioned before, integrating
with the campus system so that the gathering

00:52:06.940 --> 00:52:08.849
of metadata is going to be fully automated.

00:52:08.849 --> 00:52:12.989
We're just going to grab the information from
the registrar and then we'll be ready to go.

00:52:12.989 --> 00:52:20.649
From a self healing and redundant system standpoint, right
now if an encoder breaks down it has an exponential effect.

00:52:20.650 --> 00:52:27.389
With Podcast Producer it monitors the various workflows that
are happening from capturing, post processing and delivering

00:52:27.389 --> 00:52:33.429
so we know at which various points we need
to, we need to, we need to fix the system.

00:52:33.429 --> 00:52:36.839
From a hopes and dreams standpoint,
we're building from the ground up now

00:52:36.840 --> 00:52:39.269
and we can't do a lot of the sexy stuff that we like to do.

00:52:39.269 --> 00:52:44.199
In fact, we like to just jump to the sexy stuff and
have someone else worry about the infrastructure.

00:52:44.199 --> 00:52:46.869
But unfortunately we need to start from the bottom up again.

00:52:46.869 --> 00:52:51.969
One of the things that we're really, A few
things that we see as developer opportunities

00:52:51.969 --> 00:52:55.869
that we would be really interested in is we
have three distribution channels right now.

00:52:55.869 --> 00:52:58.989
Our local distribution channel uses AWStats.

00:52:58.989 --> 00:53:07.599
We have Google Analytics for our Google video site and
we also have iTunes U giving us spreadsheets every month.

00:53:07.599 --> 00:53:11.610
Our faculty look at stats as a big carrot on a stick.

00:53:11.610 --> 00:53:13.019
They like to know how well they're doing.

00:53:13.019 --> 00:53:16.480
And it really influences them to join our program.

00:53:16.480 --> 00:53:21.740
We have these three different ways to show stats
and it would be great if we could homogenize those

00:53:21.739 --> 00:53:25.759
and deliver those through Sakai to our
faculties so they can see how they're doing.

00:53:25.760 --> 00:53:28.140
We're also moving to screen casting.

00:53:28.139 --> 00:53:32.329
And through screen casting we're really excited
about the emerging video OCR technologies.

00:53:32.329 --> 00:53:37.900
And it would be great if there was a way to have time
coded metadata so that students can simply just click

00:53:37.900 --> 00:53:41.420
on a tag and go to a relevant part of a video.

00:53:41.420 --> 00:53:46.059
One other thing is that from an
audio, Audio is very difficult

00:53:46.059 --> 00:53:52.940
and although our faculty only essentially put a mic
on their lapel, sometimes they put it on their belt,

00:53:52.940 --> 00:53:56.369
sometimes they put it near their neck,
sometimes they don't wear it at all.

00:53:56.369 --> 00:54:00.029
So almost constantly we have to adjust our audio levels.

00:54:00.030 --> 00:54:05.500
It would be wonderful if there was some automated way
to adjust the audio levels to the range that we want

00:54:05.500 --> 00:54:11.630
so that a person doesn't need to
get involved in that process.

00:54:11.630 --> 00:54:13.920
So this is where we're heading next.

00:54:13.920 --> 00:54:22.500
We've created a scheduling utility to generate iCal
format so that, so essentially now we're using,

00:54:22.500 --> 00:54:28.420
We have a scheduling component to
schedule the workflows in Podcast Producer.

00:54:28.420 --> 00:54:35.230
So we're pulling stuff from our registrar right now and
automating the workflows based on the classroom schedule.

00:54:35.230 --> 00:54:39.579
We're also doing requirements gathering from other campuses.

00:54:39.579 --> 00:54:44.730
We're really interested in understanding other campuses
use cases because we want to make a generalizable tool

00:54:44.730 --> 00:54:49.730
that other campuses may be able to use
to bootstrap their own webcast program.

00:54:49.730 --> 00:54:57.070
We're also looking to, we're also looking to create a
loosely coupled tool so that you could potentially work

00:54:57.070 --> 00:55:01.660
with it outside of Sakai, potentially
in Moodle or some other environment.

00:55:01.659 --> 00:55:10.539
Thanks. So for Fall 2007 we're basically
have a little microcosm of eight classrooms

00:55:10.539 --> 00:55:12.739
in which we're doing a Podcast Producer pilot.

00:55:12.739 --> 00:55:16.939
We want to understand the benchmarks of
the system and know what we can and can not do

00:55:16.940 --> 00:55:20.019
and whether we need to scale our stack of Xgrids.

00:55:20.019 --> 00:55:26.920
And by Summer 2008 we're looki ng to have a
full roll out of our next generation system.

00:55:26.920 --> 00:55:28.289
That's all with my presentation.

00:55:28.289 --> 00:55:31.239
I'd like to give it back Eric.

00:55:36.230 --> 00:55:36.519
Thank you.

00:55:36.519 --> 00:55:36.550
( Applause )

00:55:36.550 --> 00:55:40.910
>> Ok. I would like to talk to another
project named Universia.

00:55:40.909 --> 00:55:42.869
That is a (unclear) project.

00:55:42.869 --> 00:55:49.230
Universia is one of the biggest university cooperation
network, with more than 900 associated universities

00:55:49.230 --> 00:55:55.039
from 11 different countries from Latin
America, from Portugal and from Spain.

00:55:55.039 --> 00:55:59.550
What they want to do is to provide
an advanced Podcasting technology

00:55:59.550 --> 00:56:04.450
and advanced Podcasting service to
this big network as a hosted service.

00:56:04.449 --> 00:56:09.069
And for that they are trying to put together
a scalable central infrastructure based

00:56:09.070 --> 00:56:11.970
on Podcast Producer to serve this.

00:56:11.969 --> 00:56:17.279
So I'd like to show you a quick snapshot of
the infrastructure that they're working on.

00:56:17.280 --> 00:56:25.690
What they want to have first is per university
recording and content creation stations so you can post

00:56:25.690 --> 00:56:34.289
from these machines the content you create to a central,
sorry, to a local Podcast Producer all in one system,

00:56:34.289 --> 00:56:40.690
which will relay this content you submit to a
central infrastructure where the competing power

00:56:40.690 --> 00:56:48.500
and the storage capacity will match the needs
for the complex workflows they want to run.

00:56:48.500 --> 00:56:58.070
Indeed, as a service company they need to be format and
platform agnostic for the delivery of the learning measure.

00:56:58.070 --> 00:57:03.070
So what they are going to do there is extend the workflows

00:57:03.070 --> 00:57:11.830
so they can have multiple outputs leveraging the
QuickTime technology as well as the Telestream new product

00:57:11.829 --> 00:57:17.279
for Podcast Producer named episode engine podcast
Podcast, which allows you to actually encode

00:57:17.280 --> 00:57:23.290
to different formats such as Flash 8 or Windows Media.

00:57:23.289 --> 00:57:31.340
And then you get access to this content with a collaboration
system that can talk to the Podcast Producer engine.

00:57:31.340 --> 00:57:37.550
And thanks to this technology behind the
scene they'll get a reliable and scalable architecture

00:57:37.550 --> 00:57:41.789
for this service for that school network.

00:57:41.789 --> 00:57:47.000
And both university and a Telestream will be
available at the lab this afternoon at 2 PM.

00:57:47.000 --> 00:57:49.559
So if you have any questions please come.

00:57:49.559 --> 00:57:54.469
I've got one more thing to you.

00:57:54.469 --> 00:58:01.539
What we have seen so far are the great
default capabilities of this technology.

00:58:01.539 --> 00:58:09.210
What I like to show you now as a demonstration,
as a final demonstration is our crazy you can,

00:58:09.210 --> 00:58:14.250
our crazy workflow can be, or creative
you can go actually with this technology.

00:58:14.250 --> 00:58:19.619
Before going to the details of the workflow I'm
going to use I like to run the demonstration first

00:58:19.619 --> 00:58:23.659
because it's going to take a few minutes to post process.

00:58:23.659 --> 00:58:26.480
Can you switch to the demo machine, please?

00:58:26.480 --> 00:58:34.900
So I'm going to run a screen capture of myself
presenting, of course, about something great in France.

00:58:34.900 --> 00:58:38.160
So I've got my Keynote running here.

00:58:38.159 --> 00:58:41.099
So I log into Podcast Capture.

00:58:41.099 --> 00:58:46.710
I select screen capture.

00:58:46.710 --> 00:58:51.840
My audio input and then I run the screen capture.

00:58:53.650 --> 00:58:58.480
Thank you very much for attending this
session about the essence of the monument.

00:58:58.480 --> 00:59:00.980
This session is about L'Arc de Triomphe.

00:59:03.849 --> 00:59:08.509
This monument is one of the famous one in Paris.

00:59:08.510 --> 00:59:15.270
It was commissioned in 1806 and it stands,
actually, in the middle of L'Place de l'Etoile.

00:59:18.059 --> 00:59:24.840
The architecture of this monument is really
close to the Roman Empire's Janus Arc

00:59:24.840 --> 00:59:32.420
and one of the important part of it is the left
side of this monument that represents the Peace.

00:59:33.929 --> 00:59:37.519
Thank you very much for attending this
session and I hope to see you next one.

00:59:37.519 --> 00:59:37.840
Thank you.

00:59:37.840 --> 00:59:44.490
( Applause )
OK. Cross our fingers.

00:59:44.489 --> 00:59:48.039
I'm going to use this, Oh!

00:59:48.039 --> 01:00:03.809
End screen capture, Podcast to iTunes U. So let's call that
the essence of the monument, all about France, history.

01:00:05.179 --> 01:00:05.989
I submit it.

01:00:05.989 --> 01:00:10.849
Let's check that is going to work first.

01:00:13.789 --> 01:00:16.769
Oh! OK. Can I go back to the slides, please?

01:00:16.769 --> 01:00:22.750
This is going, This will take, This should take
about three or four minutes to post process.

01:00:22.750 --> 01:00:29.050
So, this is all about my first crazy workflow
and this is for demonstration purpose only.

01:00:29.050 --> 01:00:30.450
This is not going to be part of the report.

01:00:30.449 --> 01:00:35.579
OK. So what do I have?

01:00:35.579 --> 01:00:39.909
When I press the stop button I actually
receive from the camera agent a movie.

01:00:39.909 --> 01:00:43.940
This movie is actually a screen capture
and as I'm running slides this is going

01:00:43.940 --> 01:00:46.630
to be a video of my slides and my speech.

01:00:46.630 --> 01:00:53.890
Cool. What I like to do is I like to create video
opening, a customized video opening of my school.

01:00:53.889 --> 01:00:57.650
So, well, that looks very easy now
since I know I can use Quartz Composer.

01:00:57.650 --> 01:00:58.700
Thank you.

01:00:58.699 --> 01:01:09.579
So let's generate, let's build a Quartz composition, which
will take this school logo and use a title and the order

01:01:09.579 --> 01:01:15.480
that I receive it from the agent so then
I can have dynamic tasks in that movie.

01:01:15.480 --> 01:01:21.010
The great thing would be maybe to add
another track to this video opening.

01:01:21.010 --> 01:01:25.120
And maybe I can use my description
that I entered previously.

01:01:25.119 --> 01:01:27.650
Why can't I do that?

01:01:27.650 --> 01:01:28.960
How can I do that, sorry?

01:01:28.960 --> 01:01:31.470
I can do that using the text to speech.

01:01:31.469 --> 01:01:39.869
We announce in Leopard and call this technology has a
task, generate an audio track and have this audio track

01:01:39.869 --> 01:01:42.460
to this video opening with my description.

01:01:42.460 --> 01:01:47.539
Cool. So then I can maybe put a transition
between those two things using, again,

01:01:47.539 --> 01:01:52.480
a cool Quartz composition transition
like a cubic thing called the swing.

01:01:53.769 --> 01:01:57.710
OK. So now I have, I think, a great movie.

01:01:57.710 --> 01:02:01.539
But that's still a movie and something's missing from it.

01:02:01.539 --> 01:02:06.259
What I like to have in that movie are chapters.

01:02:06.260 --> 01:02:12.910
I love to be able to jump to the end of my
presentation or to the slide that actually occurs to me.

01:02:12.909 --> 01:02:15.710
So how can I do that since I have a movie?

01:02:15.710 --> 01:02:22.490
Well, again that's a movie of my slides but I have
transitions and then these are not still images.

01:02:22.489 --> 01:02:28.279
Well, I can use a QuickTime API, I can get these frames,
I can use CoreImage and compile these frames together

01:02:28.280 --> 01:02:35.960
and maybe try to figure out this problem
just by finding stability in this video.

01:02:35.960 --> 01:02:43.079
So very simple I have all the tools and all the frameworks
that I can build a command line for doing this task.

01:02:43.079 --> 01:02:51.170
So then I can extract from this video stable images
and since I'm able to extract these images I can know

01:02:51.170 --> 01:02:53.490
about the time code at the moment this image occurs.

01:02:53.489 --> 01:02:58.039
So then I have images, time code, I have this video.

01:02:58.039 --> 01:03:02.630
Again, I have got the QuickTime
Kit API to add structures to movie.

01:03:02.630 --> 01:03:09.210
So I can write another task that can add this
in a movie so add chapters in this movie.

01:03:09.210 --> 01:03:10.480
OK, great.

01:03:10.480 --> 01:03:18.269
So I can generate a video movie or I can generate a
chaptered audio file for my iPod Nano, for example.

01:03:18.269 --> 01:03:23.509
But my titles are still one, two, three, four.

01:03:23.510 --> 01:03:29.060
What I like to have are actually
great titles for my chapters.

01:03:29.059 --> 01:03:32.889
How can I do that since I have only picture now?

01:03:32.889 --> 01:03:38.829
Well, I browse on the Internet and I found a
great open source OCR technology.

01:03:38.829 --> 01:03:42.369
I bring, I did bring this on the platform.

01:03:42.369 --> 01:03:43.849
I compiled it.

01:03:43.849 --> 01:03:51.659
I put this final result in my bundle and I
use this, actually, to OCR every image I have.

01:03:51.659 --> 01:03:57.269
So now I am able to extract the text from this image.

01:03:57.269 --> 01:04:01.849
And I suppose the first line of this text is my title.

01:04:01.849 --> 01:04:08.269
So now I'm able to generate a chapter with that
title instead of my one, two, three, four counter.

01:04:08.269 --> 01:04:18.440
Cool. OK, WWDC came up so I had to stop and actually
I decided to and cut this in different multiple formats

01:04:18.440 --> 01:04:22.679
but I wanted to have also a last thing and last minute.

01:04:22.679 --> 01:04:31.349
Since I have all these descriptions, all these key words
part of my images I can add this in my video itself

01:04:31.349 --> 01:04:38.809
so then I can search for the content of my slides as
metadata in Spotlight instead of just the title and description.

01:04:38.809 --> 01:04:42.989
Again, easy, I've got all the tools
in Podcast Action to annotate.

01:04:42.989 --> 01:04:45.339
I just need to have something to extract this.

01:04:45.340 --> 01:04:48.019
As I have it done.

01:04:48.019 --> 01:04:51.429
Let's go back to the slide to see the results.

01:04:54.250 --> 01:04:57.210
OK. Whoo!

01:04:57.210 --> 01:04:57.699
( Applause )

01:04:57.699 --> 01:05:00.029
Thank you.

01:05:00.030 --> 01:05:03.460
Thank you very much.

01:05:04.539 --> 01:05:08.110
OK. So I should have received an email.

01:05:08.110 --> 01:05:09.349
Ooh, cool.

01:05:09.349 --> 01:05:14.309
And this email tells me just please
connect to iTunes U to see the results.

01:05:14.309 --> 01:05:19.529
OK, it's going to take a few sec.

01:05:19.530 --> 01:05:26.930
You see I have many new tracks.

01:05:26.929 --> 01:05:33.460
And I will subscribe to my feed
and show you some of the results.

01:05:33.460 --> 01:05:38.409
So actually I need to show you the video I
generated, something else and another one.

01:05:38.409 --> 01:05:43.609
So three different outputs that I like to highlight today.

01:05:43.610 --> 01:05:46.550
The first one is chapter order.

01:05:46.550 --> 01:05:50.250
I think I should have, cool, I should have audio.

01:05:50.250 --> 01:05:52.429
So as I told you,

01:05:52.429 --> 01:05:55.219
>> The essence of the monument (speaks French).

01:05:55.219 --> 01:06:02.139
>> So this is my voice over thing
with the title, this is my speech.

01:06:02.139 --> 01:06:02.980
( Video playing )

01:06:02.980 --> 01:06:07.420
And this is the way I can jump
from one chapter to the other.

01:06:07.420 --> 01:06:09.170
So I can go to Architecture.

01:06:09.170 --> 01:06:10.680
( Applause )

01:06:10.679 --> 01:06:17.949
I can go, thank you.

01:06:17.949 --> 01:06:23.159
The other one is, so this one is an audio
chapter file so that works on an iPod Nano.

01:06:23.159 --> 01:06:32.230
OK. The other one is exactly the same but as
a video but actually for great video opening.

01:06:32.230 --> 01:06:32.880
( Video playing )

01:06:32.880 --> 01:06:36.150
And again, all my transition things and so on.

01:06:36.150 --> 01:06:44.329
If I open this one using QuickTime, for
example, which is another application,

01:06:44.329 --> 01:06:49.630
you can see here actually all my chapters and
this is a video so I have all the transitions.

01:06:49.630 --> 01:06:50.180
( Video playing )
Cool.

01:06:50.179 --> 01:06:50.219
( Applause )

01:06:50.219 --> 01:06:50.649
Thank you.

01:06:50.650 --> 01:06:53.619
I have a last thing.

01:06:53.619 --> 01:07:06.420
Since I have these pictures, why not generate a PDF?

01:07:06.420 --> 01:07:15.130
And, again, with color graphics it's just a couple of lines.

01:07:15.130 --> 01:07:21.349
So this is a PDF with a cover page, title of my
document using the metadata, my name, the date,

01:07:21.349 --> 01:07:27.679
the logo of my school and these are the
slides for the chapters and all the things.

01:07:27.679 --> 01:07:33.049
Even with my cover video I added with
Quartz Composer and that's even better.

01:07:33.050 --> 01:07:37.490
If I zoom you will see some lines so
then the students can take some notes.

01:07:37.489 --> 01:07:38.659
Thank you very much.

01:07:38.659 --> 01:07:50.769
( Applause )

01:07:50.769 --> 01:07:55.500
>> Back to the slide.

01:07:55.500 --> 01:08:00.309
Now you see why we brought Eric in for the demo.

01:08:00.309 --> 01:08:00.900
( Laughter )

01:08:00.900 --> 01:08:06.849
OK. So, in summary, there's tremendous
opportunities here for, first,

01:08:06.849 --> 01:08:11.219
starting with the infrastructure that's
required, then looking at the capture,

01:08:11.219 --> 01:08:14.169
workflow and publishing components of this.

01:08:14.170 --> 01:08:21.069
And, to me, being in education this really meets this
immediate need that every institution that I'm working

01:08:21.069 --> 01:08:25.729
with has of automating the processing
and distribution of high value content.

01:08:25.729 --> 01:08:31.669
And I think it's just a really exciting time
to, to be engaged with my education customers

01:08:31.670 --> 01:08:34.619
and I'm really excited about taking this forward