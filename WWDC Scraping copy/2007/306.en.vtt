WEBVTT

00:00:11.039 --> 00:00:11.769
>>Good afternoon.

00:00:11.769 --> 00:00:15.169
My name is Jon Hess and I'm going to be joined
today by Kelly Keenan and together we're going

00:00:15.169 --> 00:00:26.570
to teach you everything you need to know about Interface
Builder 3.0 and building applications from start to finish.

00:00:26.570 --> 00:00:28.230
( Applause )

00:00:28.230 --> 00:00:34.250
>>Interface Builder 3.0. Interface Builder 3.0 has
received a major update from Mac OS X on Leopard.

00:00:34.250 --> 00:00:38.380
For those of you who are returning to us
from WWDC 2006, we're going to be telling you

00:00:38.380 --> 00:00:40.870
about everything that is new with Interface Builder 3.0.

00:00:40.869 --> 00:00:45.299
For those of you who are new to the Mac OS X platform
we're going to be teaching you everything you need to know

00:00:45.299 --> 00:00:51.549
to build interfaces on Mac OS X with Interface Builder 3.0.

00:00:51.549 --> 00:00:51.689
( Pause )

00:00:51.689 --> 00:00:57.509
Mac OS X provides a highly graphical user experience and
has beautiful applications across the system. And in order

00:00:57.509 --> 00:01:01.559
for you to build a great interface that will
stun your users you need a great design tool

00:01:01.560 --> 00:01:05.629
and on Mac OS X Interface Builder 3.0 is that design tool.

00:01:05.629 --> 00:01:11.000
Interface Builder 3.0 is accompanied with all the
great controls that the framework developers

00:01:11.000 --> 00:01:13.569
of Mac OS X have integrated into our platform.

00:01:13.569 --> 00:01:17.919
There's hundreds of controls ready
for you to use in your applications.

00:01:17.920 --> 00:01:22.790
Because of the cohesiveness of the Cocoa
frameworks on Mac OS X, Interface Builder is able

00:01:22.790 --> 00:01:24.370
to use real objects from start to finish.

00:01:24.370 --> 00:01:31.210
As you design your Interface Builder documents
you'll use real instances of window, push button,

00:01:31.209 --> 00:01:36.889
menus and toolbars to compose your user interface and
because those are the same objects that you'll be using

00:01:36.890 --> 00:01:43.140
at run time Interface Builder is able to give you a
true what you see is what you get editing experience.

00:01:43.140 --> 00:01:50.000
Interface Builder also places a clean separation
between your user interface design and your source code.

00:01:50.000 --> 00:01:56.329
This means that Interface Builder is a great tool for
both software engineers and user interface designers.

00:01:57.560 --> 00:02:00.609
Let's take a step back for a moment and
look at where Interface Builder fits

00:02:00.609 --> 00:02:02.450
into the development process on Mac OS X.

00:02:02.450 --> 00:02:07.820
At design time we use Interface Builder to
configure visual representation of our interface.

00:02:07.819 --> 00:02:12.799
We configure these real objects that we're going to use
at design time and when we're ready with our interface

00:02:12.800 --> 00:02:19.650
and have configured it precisely the
way that we like it, we save it to disk.

00:02:19.650 --> 00:02:23.039
Interface Builder takes the object
that we saved and it serializes it on,

00:02:23.039 --> 00:02:25.319
it freeze dries them into a package and places them on disk.

00:02:25.319 --> 00:02:31.519
At build time we use Xcode to copy our interface that
we built with Interface Builder into our application

00:02:31.520 --> 00:02:36.490
and at run time the Cocoa APIs take that
freeze dried file that represents our interface

00:02:36.490 --> 00:02:39.110
and reconstitute all the objects
that we previously were working

00:02:39.110 --> 00:02:43.350
with in Interface Builder into
the run time of our application.

00:02:43.349 --> 00:02:47.849
So what are we going to teach you today?

00:02:47.849 --> 00:02:52.509
We're going to teach you to construct and
layout a user interface with Interface Builder.

00:02:52.509 --> 00:02:55.500
We're going to teach you how to
configure all the user interface elements

00:02:55.500 --> 00:02:58.020
to behave precisely the way that you'd like them to.

00:02:58.020 --> 00:03:02.469
We're going to learn how to integrate our user interface
elements with our source code and finally we're going

00:03:02.469 --> 00:03:09.780
to learn how to deploy an Interface Builder
document in our application with Xcode.

00:03:10.870 --> 00:03:15.590
As we teach you about all the features of Interface
Builder today we're going use a sample project.

00:03:15.590 --> 00:03:18.780
We're going to start with a blank window;
we're going to learn how to add scroll bars

00:03:18.780 --> 00:03:21.979
and toolbars and configure them in Interface Builder.

00:03:21.979 --> 00:03:27.469
We're going to learn to make a side sheet that will have
resizing rules and perform actions with our source code

00:03:27.469 --> 00:03:33.699
and finally we'll build a tool palette that
we'll use to let the user edit our icons

00:03:33.699 --> 00:03:39.039
in the icon editor that we'll be making today.

00:03:39.039 --> 00:03:43.650
As we progress through our presentation today we're going
to start with the fundamentals of Interface Builder.

00:03:43.650 --> 00:03:46.050
I'm going to teach you just the
basics of everything you need to know.

00:03:46.050 --> 00:03:51.930
We'll move on to editing objects which will include laying
out our interfaces; we'll take precise control over all

00:03:51.930 --> 00:03:55.939
of our interface elements with Interface Builder inspectors;
we'll learn to make connections that will allow us

00:03:55.939 --> 00:04:00.939
to establish relationships between our user interface
objects and our source code and we'll learn how

00:04:00.939 --> 00:04:04.259
to deploy our Interface Builder documents with Xcode.

00:04:04.259 --> 00:04:07.759
Let's get started and take a look at
the fundamentals of Interface Builder.

00:04:10.270 --> 00:04:15.780
The first component you'll become familiar with as part of
your Interface Builder documents is the document window.

00:04:15.780 --> 00:04:20.490
Every Interface Builder document has a document window
and the document window shows all of the content

00:04:20.490 --> 00:04:25.610
of your user interfaces; shows all of your push
buttons, shows all of your menus, shows everything.

00:04:25.610 --> 00:04:29.210
It's also your starting place to get started
editing the content of your documents.

00:04:29.209 --> 00:04:32.919
You'll be able to double click on any of the content
that's shown in your document window to jump straight

00:04:32.920 --> 00:04:35.949
into what you see is what you get editor.

00:04:35.949 --> 00:04:40.039
We're also going to learn about Interface Builder's library.

00:04:40.040 --> 00:04:43.060
The library in Interface Builder is
how you get all the content that you'd

00:04:43.060 --> 00:04:45.759
like to integrate into your Interface Builder documents.

00:04:45.759 --> 00:04:49.990
It's filled with all the controls from Mac OS X
and all the images and sounds that are available

00:04:49.990 --> 00:04:53.650
to your Interface Builder documents
through your Xcode projects.

00:04:56.740 --> 00:05:01.600
The great Cocoa frameworks in Mac OS X let us
put real controls into Interface Builder's libraries.

00:05:01.600 --> 00:05:05.120
If you'll scroll through Interface Builder's library
those instances that you see are really push buttons,

00:05:05.120 --> 00:05:10.240
they're really menus and they're really array
controllers; they're not always just images.

00:05:10.240 --> 00:05:12.230
Besides being able to drag all the controls

00:05:12.230 --> 00:05:19.050
from it. Interface Builder's library is also completely
customizable. You can create your own smart groups

00:05:19.050 --> 00:05:23.040
and your own favorite groups and besides being able
to drag content out of the library you're also able

00:05:23.040 --> 00:05:26.770
to drag content back into the library for later reuse.

00:05:26.769 --> 00:05:31.490
Because there are so many controls available to
the Mac OS X frameworks in Interface Builder

00:05:31.490 --> 00:05:36.819
and we've integrated them all for you to drag and drop
into your applications there's a lot of information for you

00:05:36.819 --> 00:05:40.050
to deal with and we've brought in
two great features to help you work

00:05:40.050 --> 00:05:42.490
with all the controls that are
available in Interface Builder.

00:05:42.490 --> 00:05:46.540
The first is that the library is completely
searchable. If you know what content you're looking

00:05:46.540 --> 00:05:51.180
for in Interface Builder's library you can jump
straight to it with the search field in the library.

00:05:52.920 --> 00:05:59.340
There's also hundreds of controls in Interface Builder
and with all those controls you're bound to find new ones

00:05:59.339 --> 00:06:01.299
as you scroll through Interface Builder's library.

00:06:01.300 --> 00:06:05.960
I know that with every new release of Mac OS X we
provide more and more controls and often the first time

00:06:05.959 --> 00:06:10.229
that you'll encounter the control as a
software developer is while scrolling

00:06:10.230 --> 00:06:14.509
through Interface Builder's library. We offer
inline documentation in Interface Builder's library

00:06:14.509 --> 00:06:18.680
to help teach you about all the new controls that
are available with each release of Mac OS X;

00:06:18.680 --> 00:06:22.959
so as you see something that you aren't familiar
with you can simply select it and get a brief summary

00:06:22.959 --> 00:06:26.289
of how the control can be used and
integrated into your application.

00:06:26.290 --> 00:06:31.250
That covers the fundamentals of Interface Builder 3.0.

00:06:31.250 --> 00:06:41.350
Now I'm going to turn it over to Kelly Keenan so we
can get into the details of laying out an interface.

00:06:41.350 --> 00:06:44.160
( Applause )

00:06:44.160 --> 00:06:45.530
>>Good afternoon.

00:06:45.529 --> 00:06:49.689
Now I'm kind of curious how many of you
are actually new to Interface Builder?

00:06:49.689 --> 00:06:54.379
Okay, we have a few.

00:06:54.379 --> 00:06:58.310
These next few slides are definitely for you.

00:06:58.310 --> 00:07:04.759
A lot of you who have used Interface Builder
2.0, your job now is to figure out what's changed

00:07:04.759 --> 00:07:08.050
between Interface Builder 2.0.0 and Interface Builder 3.0.

00:07:08.050 --> 00:07:14.329
We're going to go through editing objects and the best
way to do that is to start by tempting the demo Gods.

00:07:14.329 --> 00:07:15.979
( Pause )

00:07:15.980 --> 00:07:30.590
So, John and I have already started a project, our icon
editor, and I'm going to start by opening up our nib.

00:07:30.589 --> 00:07:35.199
Now the first thing you'll notice is
the document window that John spoke of.

00:07:35.199 --> 00:07:39.569
Some of the changes that we've done to the
document window is that there's now three views.

00:07:39.569 --> 00:07:46.099
The first view is the icon view and the icon view
shows you all of the top level items in your interface;

00:07:46.100 --> 00:07:50.210
so for example, our main menu in our
main window are here as well as files

00:07:50.209 --> 00:07:54.129
on our first responder which John
will talk more about later.

00:07:54.129 --> 00:07:56.469
The second view is the outline view.

00:07:56.470 --> 00:08:01.660
I like to use the outline view to find some
of those hard to reach places like, you know,

00:08:01.660 --> 00:08:07.970
a hidden button inside of a tab view,
inside of a window and you can just use this

00:08:07.970 --> 00:08:11.080
to go through the hierarchy of your interface.

00:08:11.079 --> 00:08:11.629
( Applause )

00:08:11.629 --> 00:08:16.259
I see you're excited about that.

00:08:16.259 --> 00:08:20.800
For those of you who don't like the outline
view as much as the browser view we also have

00:08:20.800 --> 00:08:28.800
that so now you can look at just one line of the hierarchy.

00:08:28.800 --> 00:08:32.570
( Laughter and applause )

00:08:32.570 --> 00:08:39.900
Personally I'm a big fan of the icon view mainly because
I like the pretty pictures so we'll stick there for now.

00:08:39.899 --> 00:08:46.679
You'll also notice that our document window now comes
with a search field which is great for searching

00:08:46.679 --> 00:08:48.729
for those items that you're really looking for.

00:08:48.730 --> 00:08:54.629
For example, I want to find the speech menu item
and now you'll see the entire hierarchy reaching

00:08:54.629 --> 00:09:01.960
down to the speech menu item or for example, that line
view also shows the ID and the type and I can search for ID

00:09:01.960 --> 00:09:14.850
if I know the ID of a certain widget I can search for 300
and I find the format menu or you can search for any type.

00:09:14.850 --> 00:09:23.149
So I can search for NS application and get file zone
or an application; another great way to find information

00:09:23.149 --> 00:09:27.230
in the document window. And at the bottom
you'll notice we've added a status bar.

00:09:27.230 --> 00:09:34.190
John will talk more about this but right now you'll see
that it shows us that we're connected to our Xcode project.

00:09:35.769 --> 00:09:38.519
Now that you've opened up the document window and, you know,

00:09:38.519 --> 00:09:42.039
we've just gotten started here,
I'm going to open up a main window.

00:09:42.039 --> 00:09:45.240
Now it would be great if I added
some controls to this, right?

00:09:45.240 --> 00:09:47.100
So what do we need for that?

00:09:47.100 --> 00:09:51.389
The library. So we open up the new library.

00:09:51.389 --> 00:09:56.210
One of the things that you'll notice if you've gone to
some of the earlier sessions, the library is the same

00:09:56.210 --> 00:10:00.680
in Interface Builder as it is in Xray
and Dashcode so a lot of the things

00:10:00.679 --> 00:10:05.799
that I show you here you can use
in those two applications as well.

00:10:05.799 --> 00:10:13.629
It stores all of our objects and media; so you can see here
all of the controls that John was talking about earlier

00:10:13.629 --> 00:10:18.909
as well as all the media that's available to
us in our Xcode project are on the system.

00:10:21.460 --> 00:10:31.519
So, if you're familiar with Interface Builder 2.0 the library is
replacing the old palettes and I know one of the things

00:10:31.519 --> 00:10:36.889
that I always wondered about in the palettes was I
looked at some of the icons and said, "What are they?"

00:10:36.889 --> 00:10:44.480
Well, now if you mouse over an item it will give
you a short description of what that item is.

00:10:44.480 --> 00:10:53.800
You can also turn on labels so that now you can see
labels for each of the items that are in the library

00:10:53.799 --> 00:10:58.879
or you can also see short descriptions of all the items.

00:11:00.210 --> 00:11:05.370
At the bottom you'll notice as well that there's a longer
description, so now we've really worked some documentation

00:11:05.370 --> 00:11:11.990
into our library so that especially for anybody who's new
you'll be able to quickly get up to speed with what each

00:11:11.990 --> 00:11:18.259
of our controls does and if you've been around for a while
it'll also let you know what one of those objects was

00:11:18.259 --> 00:11:22.330
that you never could figure out,
what it did and why it existed.

00:11:25.320 --> 00:11:30.290
Now at the top of the library you'll notice
that things are grouped in an hierarchy.

00:11:30.289 --> 00:11:36.429
We've done this so that you could easily find
all of the widgets that you're looking for.

00:11:36.429 --> 00:11:43.819
So for example, we have the Cocoa plug-in which
has all of the Cocoa controls, PDF kit, Automator,

00:11:43.820 --> 00:11:52.920
and this is where all of...if you build a plug-in, your
plug-in will show up in this list as well and if you come

00:11:52.919 --> 00:11:56.189
to our session on Friday you'll
learn how to build a plug-in.

00:11:58.529 --> 00:12:05.600
Now the best part, one of my favorite parts, is
the search field, because a lot of times all I want

00:12:05.600 --> 00:12:13.620
to do is find a window really quickly and I can just
type it in now or I know that I want controllers

00:12:13.620 --> 00:12:18.549
and I can just start typing in controllers
and easily find what I'm looking for.

00:12:18.549 --> 00:12:20.259
I'm going to switch this back to icon view

00:12:20.259 --> 00:12:34.490
so we can see things a little easier...and next...Sometimes
these groups aren't exactly what I'm looking for.

00:12:34.490 --> 00:12:39.000
I'd really like to make my own group;
so we've also added that option.

00:12:39.000 --> 00:12:48.220
So, for example, I can make a smart group and here
I'd like to keep all of my text fields, in one group.

00:12:48.220 --> 00:12:55.040
So I'm going to set my predicate to
be "is kind of" and say NS text field.

00:12:55.039 --> 00:13:04.009
So now you'll see a new smart group has been added and it
includes all of the text fields and subclasses of text field

00:13:04.009 --> 00:13:07.399
that I have available to me in my library.

00:13:07.399 --> 00:13:14.649
Now I might not want a specific group that I
can use a predicate for; instead, I might just want

00:13:14.649 --> 00:13:17.289
to random group of all of my favorite controls.

00:13:17.289 --> 00:13:27.079
So in this case some of my favorite
controls are a array controller, let's see,

00:13:27.080 --> 00:13:35.560
I really like to use a window a lot, and maybe a table.

00:13:35.559 --> 00:13:41.379
So now you'll see that all of my
favorite controls are in this group.

00:13:41.379 --> 00:13:47.289
Now lucky for me this is also very useful for giving
demonstrations; so I've already created a group

00:13:47.289 --> 00:13:51.750
of all the items that I'm going
to use in today's presentation.

00:13:51.750 --> 00:13:54.970
Hopefully this will remind me what I need to do next.

00:13:56.450 --> 00:13:59.330
Let's start by adding a button to my window.

00:13:59.330 --> 00:14:07.129
In Interface Builder, it's as easy as just dragging things
from the library and throwing them into your window.

00:14:07.129 --> 00:14:15.559
And now I'd like to duplicate this button, because one of
the things that you often do is have an OK/cancel button.

00:14:15.559 --> 00:14:22.089
OK and cancel buttons at the bottom of your window.
Notice here that I have some guides that show me

00:14:22.090 --> 00:14:30.370
where I should put my second button in relation to
the first button; this helps to keep my interface

00:14:30.370 --> 00:14:37.419
within the human interface guidelines so that your
application will be a first class citizen on Mac OS X.

00:14:38.450 --> 00:14:44.330
Now to edit your objects one of the easiest things to
do is to double click them and you can change things

00:14:44.330 --> 00:14:48.620
like the title so that now this can be the
cancelled title if I can type correctly

00:14:48.620 --> 00:14:53.009
and we're going to make this the OK button.

00:14:53.009 --> 00:15:00.600
Now I use these two buttons a lot in my work and so what
I'm going to do now is select both of them and if I hold

00:15:00.600 --> 00:15:05.790
down the option key I can copy them back into my library.

00:15:05.789 --> 00:15:13.839
I can give them a title...we'll call them (applause).

00:15:13.840 --> 00:15:19.220
So I can give them a short description
which is also my favorite buttons

00:15:19.220 --> 00:15:27.500
and a long description, These buttons Rock!... fabulous.

00:15:27.500 --> 00:15:34.889
Okay and notice there's also an image up here of what it's
going to look like. And now the widgets I've created are

00:15:34.889 --> 00:15:40.949
in my library and I can just drag them out as often as
I want, do whatever I want with them, they're great.

00:15:40.950 --> 00:15:47.750
So this is awesome for those times that you have a control
that you've customized and you want to use that control over

00:15:47.750 --> 00:15:52.710
and over again in different parts of your
application; just drag it back to the library;

00:15:52.710 --> 00:15:57.220
every time you open up Interface Builder it'll still
be there and you can use in other applications.

00:15:57.220 --> 00:15:59.660
Now I'm going to go ahead and delete these.

00:16:01.039 --> 00:16:08.779
So, getting back to the icon editor
I have just an empty window.

00:16:08.779 --> 00:16:09.889
What do I want do next?

00:16:09.889 --> 00:16:15.350
Well, the first thing is if I think about it
when I put an icon on here it might be to big

00:16:15.350 --> 00:16:18.920
for this window so I'm going to use a scroll view.

00:16:18.919 --> 00:16:25.370
So let's just drag out a scroll view and I can move it
around and again you'll see the Aqua guides and I'm going

00:16:25.370 --> 00:16:29.060
to stretch the scroll view to fill up my window.

00:16:29.059 --> 00:16:37.079
Now I've forgotten that I really, really wanted to add that
toolbar that you guys are all excited about and all I have

00:16:37.080 --> 00:16:40.500
to do now is drag it from the library
and drop it onto my window.

00:16:40.500 --> 00:16:45.850
( Applause )

00:16:45.850 --> 00:16:50.139
And now I want to customize it and I'm going
to have to go to code for that, just kidding.

00:16:50.139 --> 00:16:56.639
So, I'm just going to click on it; I want to add a new
zoom button so I'm just going to drag out my pop up;

00:16:56.639 --> 00:17:06.450
I'm going to double click on it here, edit the list, so that
I have a 1 time zoom, let's say 2x and 10x zoom

00:17:06.450 --> 00:17:14.220
and I'm going to make it default to 1x zoom and
then I'm going to select, oh, actually it's a little big

00:17:14.220 --> 00:17:22.259
so I'm just going to resize it...just by sliding it
around and so now it's ready to go and I'm just going

00:17:22.259 --> 00:17:27.000
to drag it right up into my toolbar and now I'm done.

00:17:27.000 --> 00:17:29.880
Now one of the things you'll notice
is I didn't change the title.

00:17:29.880 --> 00:17:36.950
There's a lot of things that you can do when editing your
controls just by double clicking on them to change titles

00:17:36.950 --> 00:17:41.870
or resizing just by grabbing the resizing
knobs, but occasionally there are things

00:17:41.869 --> 00:17:49.789
that you can't do and for those you need the inspector.

00:17:49.789 --> 00:17:56.990
So, let's go back to slides.

00:17:56.990 --> 00:17:57.569
( Pause )

00:17:57.569 --> 00:18:03.409
Quick recap of what we just saw, we talked about the document
window; this is the first thing that you're going to see

00:18:03.410 --> 00:18:07.650
when you open Interface Builder and
open a new nib; it's the starting point.

00:18:07.650 --> 00:18:16.620
We have three views, icon view where you can see all of the top
level items in your project; outline view to make it easy

00:18:16.619 --> 00:18:23.049
to drill through the hierarchy and find some to those hard
to find items; column view for those of you who don't really

00:18:23.049 --> 00:18:33.159
like outline view, there's column view; and it's searchable
so that you can easily get to that hidden button.

00:18:34.220 --> 00:18:41.250
The second thing was the library; the library is where all
of your controls are stored whether they're your controls,

00:18:41.250 --> 00:18:46.859
plugs-ins that you added from another
developer or plug-ins you made yourself.

00:18:46.859 --> 00:18:54.399
You have access to all of your objects and media including
all of the images that were in your Xcode project.

00:18:54.400 --> 00:19:02.210
It's grouped in a hierarchy so that you
can easily find subgroups like objects

00:19:02.210 --> 00:19:05.990
and controls or windows, things like that.

00:19:05.990 --> 00:19:07.509
There's a rich set of components.

00:19:07.509 --> 00:19:13.129
Like John said there's over a hundred that we ship with the
system already and that's not to count all of the other ones

00:19:13.130 --> 00:19:20.900
that you're going to install and we've added inline
documentation so that you can easily see what each

00:19:20.900 --> 00:19:31.110
of those controls is used for and it's all searchable.
And if there aren't enough controls already, like I said,

00:19:31.109 --> 00:19:35.279
you can customize all the controls you
want, drag them back to the library

00:19:35.279 --> 00:19:40.779
and drag them back out again when you need them.

00:19:40.779 --> 00:19:42.899
We also use the design surface

00:19:42.900 --> 00:19:45.960
The design surface is really your entire desktop.

00:19:45.960 --> 00:19:52.840
Now for those of you with those 30 inch cinema0 displays
don't forget that some people have 13 inch MacBooks;

00:19:52.839 --> 00:19:58.059
so when you're designing you may have a huge
space but don't forget about those people.

00:20:00.509 --> 00:20:05.460
Using the design surface is as easy as just dragging
a window out and dropping it on your desktop.

00:20:05.460 --> 00:20:15.069
It makes it easy to edit all of your windows, toolbars,
and menus and we give you guides to make sure that you,

00:20:15.069 --> 00:20:21.309
your application can conform to
the human interface guidelines.

00:20:21.309 --> 00:20:25.509
So that's what I wanted to say about editing objects.

00:20:25.509 --> 00:20:36.869
Now, we have that toolbar item that we want to change the
title for and in order to do that we need the inspector.

00:20:36.869 --> 00:20:44.459
So the inspector is what you will use to
edit all of the properties of your controls.

00:20:44.460 --> 00:20:52.970
The inspectors are grouped by type; so we've put all
of the attributes together, all of the animations,

00:20:52.970 --> 00:20:59.829
all of the size constraints, they're
in a separate tab and such like that.

00:20:59.829 --> 00:21:08.309
We've also divided them by inheritance;
this makes it easier for us to be able

00:21:08.309 --> 00:21:13.119
to find attributes that are common in different controls.

00:21:13.119 --> 00:21:17.959
For example, the tool tip is actually part of
NS view and will now always be at the bottom

00:21:17.960 --> 00:21:25.950
in the NS view section whereas the state, the enabled
state, is in control and you'll be able to find

00:21:25.950 --> 00:21:31.319
that in the same section every time
no matter what control you're using.

00:21:31.319 --> 00:21:39.149
There are three inspectors that I'm going to talk about
right now; the first is the attributes inspector.

00:21:39.150 --> 00:21:44.730
We use this in the case where say I have a
label and I'd like to change to the title.

00:21:44.730 --> 00:21:49.529
I can change the title; I can change
the alignment, the border,

00:21:49.529 --> 00:21:54.039
all of the attributes of that label in the inspector.

00:21:54.039 --> 00:22:01.730
The second that I'm not going to talk about except
for this one moment is the animations inspector;

00:22:01.730 --> 00:22:08.730
hopefully you went to the two animations talks yesterday and
got a good idea about how the animations inspector works

00:22:08.730 --> 00:22:20.150
and if I wanted to turn on layer backing for this
view it's as easy as setting the content view

00:22:20.150 --> 00:22:27.040
in the animations inspector and then you can do
things like turning on shadows and other fun stuff

00:22:29.910 --> 00:22:35.350
like that...and one transition I forgot, sorry.

00:22:35.349 --> 00:22:47.319
The third is the size inspector; you're going to use this
a lot and the reason is that you need to make sure that all

00:22:47.319 --> 00:22:54.589
of your controls work well when
their containing view is resized;

00:22:54.589 --> 00:23:00.279
so you're going to use the auto
resizing rules in this section a lot.

00:23:00.279 --> 00:23:05.609
You'll also notice if you've used Interface Builder
2.0 before that the control size has moved now

00:23:05.609 --> 00:23:14.149
from the attributes inspector to the size inspector and with
multiple inspection you can now select all of your controls

00:23:14.150 --> 00:23:19.769
and change the type from regular to
small to mini all at the same time.

00:23:19.769 --> 00:23:24.269
( Applause )

00:23:24.269 --> 00:23:28.779
You'll also notice if you've used
IB 2.0 before that the group placement

00:23:28.779 --> 00:23:33.029
and the alignment has moved to the size inspector as well.

00:23:35.500 --> 00:23:41.410
One quick example of why you need the size
inspector, how many of you have had a window like this

00:23:41.410 --> 00:23:44.970
that when it was resized it looked like this?

00:23:44.970 --> 00:23:47.410
This is what we need the size inspector for.

00:23:47.410 --> 00:23:53.870
( Pause )

00:23:53.869 --> 00:24:01.579
One thing that I want to point out in the
size inspector is the auto sizing section.

00:24:03.470 --> 00:24:10.470
For example in the window I just showed you that text
field I wanted to stretch all the way across the window

00:24:10.470 --> 00:24:19.200
when the window is resized; so in order to do that I'm going
to set the anchor to the left side of my containing view;

00:24:19.200 --> 00:24:27.970
I'm going to set it to stretch in the center and
I'm also going to set the anchor to the right side

00:24:27.970 --> 00:24:34.860
so that now it's anchored on both sides and stretches
in the center and will resize when my window resizes.

00:24:34.859 --> 00:24:40.359
These same rules apply vertically as well as horizontally.

00:24:40.359 --> 00:24:46.699
You'll also notice that there's a new animation
and we'll see this in the demo of how these work.

00:24:46.700 --> 00:24:48.730
So, let's go back to the demo machine.

00:24:48.730 --> 00:24:53.470
( Pause )

00:24:53.470 --> 00:25:00.720
So when we last left the demo machine we were wondering
how to change the title of this pop up button.

00:25:00.720 --> 00:25:02.549
So, let's bring up the attributes inspector

00:25:02.549 --> 00:25:10.720
and in the attributes inspector I can select
the pop up button and change the label to zoom.

00:25:10.720 --> 00:25:16.120
Now you're going to notice that there's two labels here;
one is the label and one is a palette label and the reason

00:25:16.119 --> 00:25:24.719
for this is that when you're users are editing
or customizing their toolbar, for example,

00:25:24.720 --> 00:25:32.839
with the flexible space you don't want a title when it's
actually in the toolbar but you do want a title in the sheet

00:25:32.839 --> 00:25:41.549
that comes out when they're customizing so this lets you
set both of those titles so that you can one in, one title

00:25:41.549 --> 00:25:45.589
for one thing and a different title when it's in the sheet.

00:25:45.589 --> 00:25:50.269
So I think that our window here looks
pretty good so I'm going to put that away

00:25:50.269 --> 00:25:55.440
for now.  And let's start by building the tools palette.

00:25:55.440 --> 00:26:03.160
If I drag out a panel I can just drop it anywhere
on my design surface; otherwise known as my desktop

00:26:03.160 --> 00:26:07.410
and you'll notice that it shows up in my document window.

00:26:07.410 --> 00:26:15.110
The first thing I'd like to do is add some buttons;
so we'll use the Aqua guidelines and I can grab any

00:26:15.109 --> 00:26:19.009
of the resizing knobs and just start resizing my button.

00:26:19.009 --> 00:26:27.740
Now I have an idea of exactly how big I want my button
to be and so I'm going to change the size inspector

00:26:27.740 --> 00:26:35.140
and in the size inspector I can set
my button to be exactly 34 x 36.

00:26:37.930 --> 00:26:43.970
So, now my button is 34 x 36 and that's exactly
what I'd like so I'm going to duplicate it,

00:26:43.970 --> 00:26:50.690
if I pick the right menu, and I'm going to make six of these.

00:26:52.630 --> 00:26:55.810
Now one of the things I have a hard time with is mousing.

00:26:55.809 --> 00:27:00.899
For some reason when I mouse things
go everywhere and so to move things

00:27:00.900 --> 00:27:09.660
in small increments I can also use the arrow keys so
that I can make sure that things line up perfectly.

00:27:09.660 --> 00:27:10.310
Okay, great.

00:27:10.309 --> 00:27:17.779
I have six buttons but I forgot that I really
wanted them to all be toggle buttons.

00:27:17.779 --> 00:27:24.859
So, thanks to multiple inspection I can go back to
the attributes inspector, select all of my buttons

00:27:24.859 --> 00:27:33.409
and change them from momentary push in to toggle and now
each one of them is set to toggle; a lot easier than it used

00:27:33.410 --> 00:27:36.450
to be when I would have had to change each one.

00:27:37.950 --> 00:27:43.069
I'd also like for each of these
buttons to have an icon it in.

00:27:43.069 --> 00:27:52.769
Well I'd really like the first one to be a pencil and so in
the attributes inspector I can select the image attribute.

00:27:52.769 --> 00:28:04.680
You'll notice that there's a tool tip that popped up
and that tool tip when using the inspectors you'll find

00:28:04.680 --> 00:28:10.840
that we've added tool tips with short
explanations of what each of the attributes does.

00:28:12.180 --> 00:28:21.850
So now I can type in pencil and notice it filled in pencil
already for me; if I just hit return my pencil shows up.

00:28:21.849 --> 00:28:27.059
If I look at the pop down menu I'll see
that all of the icons that I have available

00:28:27.059 --> 00:28:35.399
in my Xcode project are here already; so I can just make
the next one a paint bucket and maybe the third one is going

00:28:35.400 --> 00:28:42.759
to be the eyedropper and the image up
here, I never can remember the name of,

00:28:42.759 --> 00:28:45.609
so it would be really helpful if I had a picture of it.

00:28:45.609 --> 00:28:52.169
If I go back to the library and select media I
can turn this down and select today's project,

00:28:52.170 --> 00:28:59.000
notice that all of the icons from my Xcode project
show up automatically in the media and now I realize

00:28:59.000 --> 00:29:06.420
that I really wanted this marquee button
and let's add a line and a hand tool.

00:29:06.420 --> 00:29:17.580
So now I have all of the images that I'd like
to use and the last thing that I think I need is

00:29:17.579 --> 00:29:22.869
if we go back here I need a color palette so
that I can change the colors that I'm using

00:29:22.869 --> 00:29:32.359
with my icon. And now I can resize
my window and I have a tool palette.

00:29:33.740 --> 00:29:41.900
Now personally I like the Aqua human interface guidelines
but sometimes I think I know better than they do

00:29:41.900 --> 00:29:46.860
and I know you all feel that way sometimes
so I'm going to show you some tricks.

00:29:46.859 --> 00:29:54.189
One is that I'd like the edge of my window to
be about 8 pixels away from all the content;

00:29:54.190 --> 00:30:01.090
in that case I want to use some guides so I'm going
to add a horizontal guide and drag it towards the top;

00:30:01.089 --> 00:30:04.199
you'll notice that there's two small little tool tips there

00:30:04.200 --> 00:30:11.220
and they tell me exactly how far my
guide is from the containing view.

00:30:11.220 --> 00:30:20.089
I'm going to do the same thing with a vertical guide
and move that over 8 pixels from the left...dragging all

00:30:20.089 --> 00:30:25.909
of my controls over; now I need
to get rid of this extra space.

00:30:25.910 --> 00:30:32.350
Well when I resize I get the Aqua guides
and that's not exactly what I'm looking for.

00:30:32.349 --> 00:30:35.779
So one of the things that I'm going
to do is hold down the option key;

00:30:35.779 --> 00:30:40.230
if I hold down the option key while I'm dragging
you'll notice that the tool tips pop up again

00:30:40.230 --> 00:30:48.200
that tell me exactly how far my containing view is
from the views inside of it so that I can set it

00:30:48.200 --> 00:30:53.860
so that it's exactly 8 pixels from the objects inside.

00:30:53.859 --> 00:30:58.869
Now that I have my tool palette exactly
how I want it, I don't really want my users

00:30:58.869 --> 00:31:03.149
to change it; so I don't want it to be resizable.

00:31:03.150 --> 00:31:16.710
So, I'm going to go back to the size inspector and if I
switch to my panel you'll see the size inspector changes.

00:31:16.710 --> 00:31:23.130
We've done something special with windows
so that now you can set the minimum size;

00:31:23.130 --> 00:31:30.170
you can say that my panel has a minimum size and I'm
going to use the current size as the minimum size.

00:31:30.170 --> 00:31:35.259
I'm also going to set the maximum
size so that I use the current size

00:31:35.259 --> 00:31:39.789
as a maximum size and now my panel is no longer resizable.

00:31:41.140 --> 00:31:45.410
Another part of the windows size inspector is

00:31:45.410 --> 00:31:57.550
that in Interface Builder 2.0 wherever I left my window
last while I was designing it is where it showed

00:31:57.549 --> 00:32:03.549
up when the user opened the application for the first time.

00:32:03.549 --> 00:32:11.980
So now we've made it so that you can use this little replica
of your desktop to decide where your window is going to show

00:32:11.980 --> 00:32:16.670
up on the desktop when the application is run.

00:32:16.670 --> 00:32:22.240
( Applause )

00:32:22.240 --> 00:32:28.269
By clicking on the little knobs you can anchor it to the
sides of the window so in this case I want to anchor it

00:32:28.269 --> 00:32:37.500
to the top left and just move it to a position that I think
I'd like it to show up in when I first open the application.

00:32:39.140 --> 00:32:47.150
Okay, now I think, yeah, I think I'm done with the
tools palette, so we can put that away for now

00:32:47.150 --> 00:32:49.700
and the next thing I want to add is the size sheet.

00:32:49.700 --> 00:32:56.210
So, let's just drag out a window
again into my design surface, and

00:32:56.210 --> 00:33:02.039
if you remember the size sheet earlier had
two fields, one was width and one was height;

00:33:02.039 --> 00:33:11.019
so we'll drag out some labels, and I'm going to make this a
little bigger to work with for now and drag out a text field

00:33:11.019 --> 00:33:16.859
and use the Aqua guidelines to line
it up for me, make it a little bigger

00:33:16.859 --> 00:33:30.019
and now I can duplicate this, and now I have two and I'd
like to change this to width and I'll set the other one

00:33:30.019 --> 00:33:38.990
to height. Again I love multiple inspection because I'd
like to set both of these to be aligned on the right;

00:33:38.990 --> 00:33:44.690
so if I go back to the attributes inspector I
can change the align, if I select both of them,

00:33:44.690 --> 00:33:51.809
I can change the alignment now to the
right instead of natural and I'd also,

00:33:51.809 --> 00:33:57.589
I made these bigger so that I could work with them but I'd
like to make them the same size as the text that I have

00:33:57.589 --> 00:34:03.099
in them so I'm going to use the size
to fit option from the layout menu

00:34:03.099 --> 00:34:11.849
and now my text field is the same
size as the text inside of it.

00:34:11.849 --> 00:34:16.299
So, the next thing I need to add
are the OK/cancel buttons.

00:34:16.300 --> 00:34:20.200
So, luckily I made those earlier and
I can just drag them right back out.

00:34:20.199 --> 00:34:34.549
I told you I'd use them later; so, now when the user goes to
actually use this, a lot of times you want to just be able

00:34:34.550 --> 00:34:38.100
to press return and make that be the same as OK.

00:34:38.099 --> 00:34:44.139
So, if I select the OK button I can set the
queue equivalent in the attributes inspector

00:34:44.139 --> 00:34:48.900
by just pressing return in the key equivalent field.

00:34:48.900 --> 00:34:56.039
Same thing goes for cancel; I'd like to be able to escape,
use escape, to cancel out of my sheet and so I'm going

00:34:56.039 --> 00:35:02.190
to set the key equivalent by just hitting escape.

00:35:02.190 --> 00:35:02.860
( Applause ) You can clap. It's okay.

00:35:02.860 --> 00:35:11.890
And while I'm talking about what the user is going to do, I
don't know about you but when I'm a user I have a bad habit

00:35:11.889 --> 00:35:19.409
of typing random characters in the text fields or, you
know, I'm chatting with somebody else and accidently am

00:35:19.409 --> 00:35:24.750
in a text field instead of the iChat window and
start typing away; well I'd like some user validation

00:35:24.750 --> 00:35:28.789
into these text fields that I have
because I really only want them to be able

00:35:28.789 --> 00:35:32.199
to put whole numbers into the text field.

00:35:32.199 --> 00:35:40.730
For that we're going to use the formatter; so if I
just drag the formatter out I can drop into a text field

00:35:40.730 --> 00:35:46.699
and when I select the text field you'll notice there's
a little badge here that shows me there's a formatter

00:35:46.699 --> 00:35:54.719
and I can select the formatter and I'm going to use
here; I'm just going to use the presets that come

00:35:54.719 --> 00:36:05.179
with this formatter and set it up so
that it only uses whole numbers.

00:36:05.179 --> 00:36:13.009
I'd also like it to not allow negative numbers
so I'm going to set the minimum to zero.

00:36:16.000 --> 00:36:23.579
So now we've set up formatters, we've set the
OK/cancel button so that we can use key equivalents;

00:36:23.579 --> 00:36:29.420
so let's finish up with just cleaning
up our interface by moving these buttons

00:36:29.420 --> 00:36:34.210
up into the corner and resizing the window.

00:36:35.940 --> 00:36:41.280
Now, if I resize the window now;
if I just run the application

00:36:41.280 --> 00:36:44.930
and resize the window those fields
aren't going to do anything.

00:36:44.929 --> 00:36:49.719
So the last thing I'd like to do
is set some of the resizing rules.

00:36:49.719 --> 00:36:53.649
So now let's go back to our size inspector.

00:36:54.769 --> 00:36:57.920
We'll start by selecting the labels.

00:36:57.920 --> 00:37:04.960
I'd like those labels to stay in the upper left corner; so
notice that they are already set, they're already anchored

00:37:04.960 --> 00:37:08.769
to the upper left corner and you can see
this by watching the animation next to it

00:37:08.769 --> 00:37:14.980
that shows you what a view inside
of a view that's changing will do.

00:37:16.150 --> 00:37:25.530
Now let's select the text fields; now the text fields
I'd like those to get bigger when the window gets bigger

00:37:25.530 --> 00:37:27.670
and smaller when the window gets smaller.

00:37:27.670 --> 00:37:33.090
I'd like them to stay to the top so I'm going to keep
them attached to the top but I'm going to anchor them

00:37:33.090 --> 00:37:37.890
to both sides and set the stretching in
the center; notice our animation changed

00:37:37.889 --> 00:37:40.339
to show us exactly what's going to happen.

00:37:40.340 --> 00:37:47.550
So now you have a good idea when you change the auto
sizing rules what's going to happen to your control

00:37:47.550 --> 00:37:51.010
when the containing control changes size.

00:37:51.010 --> 00:38:00.600
The last thing is I'd like the two buttons at the bottom to
be anchored to the lower left, to the lower right, sorry.

00:38:00.599 --> 00:38:06.319
So, I'm going to set the anchors on the right and
the bottom and remove the anchors on the left and top

00:38:06.320 --> 00:38:11.210
and now you'll see that it's anchored in the bottom.

00:38:11.210 --> 00:38:18.119
Lastly I'd like to set the window so that
it has a minimum size and we're going

00:38:18.119 --> 00:38:20.909
to use current again and it has a maximum size.

00:38:20.909 --> 00:38:29.469
I'll start with the current but I don't, I would actually
like people to be able to change the size horizontally

00:38:29.469 --> 00:38:34.109
so I'm going to change the width
and say that they can go up to 350.

00:38:35.539 --> 00:38:43.650
So now if I'd like to test those resizing rules I can
go to the layout menu and select enabled auto resizing

00:38:43.650 --> 00:38:54.110
and if I resize my window I can see how my window is going
to react when the user changes the size of their window

00:38:54.110 --> 00:39:03.420
and now that we're done with the size sheet...the
next thing we're going to want to do is to set

00:39:03.420 --> 00:39:09.690
up some connections and we're going to do that next.

00:39:09.690 --> 00:39:19.950
So let's go back to the slides...and let's recap
some of the stuff that we just talked about.

00:39:19.949 --> 00:39:29.759
One of the things was the new inspector that's arranged
in groups so that all the properties that you have

00:39:29.760 --> 00:39:38.070
in the inspector you can now easily, you have
a good understanding of how they map to the API

00:39:38.070 --> 00:39:43.610
that they're associated with and it makes
it easier to do multiple inspection.

00:39:43.610 --> 00:39:51.079
We've added a resizing animation in the size inspector
as well as moved the control size to the size inspector;

00:39:51.079 --> 00:39:56.509
also the alignment and the grouping are
here as well and we talked about formatters.

00:39:56.510 --> 00:40:01.270
This is a great way to restrict and validate user input.

00:40:03.510 --> 00:40:08.160
There are four inspectors that I didn't
talk about and those are all inspectors

00:40:08.159 --> 00:40:11.440
that allow you to connect to your view to your code.

00:40:11.440 --> 00:40:17.539
So the next thing we're going to talk about
is making connections and John is going

00:40:17.539 --> 00:40:20.429
to come back up to talk to you about that.

00:40:20.429 --> 00:40:28.449
( Applause )

00:40:28.449 --> 00:40:32.250
>>Thanks. So far we've learned about all
the great features of Interface Builder

00:40:32.250 --> 00:40:35.360
that will help you build the superb
view layer of your application.

00:40:35.360 --> 00:40:40.150
Now to breathe life into our view layer we need to
associate it with source code and in Cocoa application,

00:40:40.150 --> 00:40:44.530
that Cocoa applications, that typically means
integrating our view layer with our controller layer

00:40:44.530 --> 00:40:50.140
and Interface Builder allows us to do that
with the technology called connections.

00:40:50.139 --> 00:40:52.929
There are two types of connections that
we're going to learn about today.

00:40:52.929 --> 00:40:54.739
The first are outlet connections.

00:40:54.739 --> 00:40:59.239
An outlet is a name for an instance variable and it's
a name for instance variable that we're going to use

00:40:59.239 --> 00:41:03.079
to connect part of our, to connect
one of our instance variables

00:41:03.079 --> 00:41:06.329
to user interface elements in our
Interface Builder documents.

00:41:07.659 --> 00:41:11.849
We tell Interface Builder that instance
variable and a source code is an outlet

00:41:11.849 --> 00:41:13.719
by tagging it with an IB outlet key word.

00:41:13.719 --> 00:41:22.409
The next type of connection that we're going to be
use in Interface Builder is an action connection.

00:41:22.409 --> 00:41:27.299
An action connection is like an outlet connection except
instead of associating a piece of our user interface

00:41:27.300 --> 00:41:32.050
with one of our instance variables we use it to associate
a piece of our interface with one of our methods.

00:41:32.050 --> 00:41:37.180
So, for example, to have one of our methods be envoked
every time a user interface item like a button is clicked

00:41:37.179 --> 00:41:41.029
or a menu is selected we would use an
action connection in Interface Builder.

00:41:41.030 --> 00:41:44.500
In order to tell Interface Builder that one
on our methods is to be used with an action

00:41:44.500 --> 00:41:48.539
in Interface Builder we tag the
return tag with the IB action keyword.

00:41:48.539 --> 00:41:53.509
( Pause )

00:41:53.510 --> 00:41:57.560
So I've told you what connections are and I've told
you how we use them to integrate our view layer

00:41:57.559 --> 00:42:00.820
with our controller layer and our source
code but so far we haven's seen how

00:42:00.820 --> 00:42:04.510
to integrate our controllers into Interface Builder.

00:42:04.510 --> 00:42:09.680
We integrate our controllers into Interface Builder the
same way that we integrate any other user interface content;

00:42:09.679 --> 00:42:14.309
we use the library and the document
window to do drag and drop.

00:42:14.309 --> 00:42:17.389
We can start in the library with an instance of object.

00:42:17.389 --> 00:42:22.199
Among all the various controls that Interface Builder
provides in the library one of them is just a simple object

00:42:22.199 --> 00:42:26.649
and you can drag that to your Interface
Builder documents like anything else.

00:42:26.650 --> 00:42:31.400
Once we've done that we can use one of Interface
Builders additional inspectors, the identity inspector

00:42:31.400 --> 00:42:35.289
and in the identity inspector we can configure the
class of our object and we can change it from an instance

00:42:35.289 --> 00:42:38.579
of object to an instance of our controller.

00:42:38.579 --> 00:42:44.849
Now after we've added an instance of our controller to our
Interface Builder document we can tell Interface Builder

00:42:44.849 --> 00:42:50.599
about some of the actions it's able to perform and the
outlets that it is able to refer to interface elements

00:42:50.599 --> 00:42:55.250
and source code with by using the
action and outlet inspectors.

00:42:57.460 --> 00:43:02.110
After we've declared actions and outlets and it has
created an instance of our controller we're ready

00:43:02.110 --> 00:43:06.740
to actually make connections and to hook up parts
of our controllers, the parts of our user interface

00:43:06.739 --> 00:43:08.599
so that we can utilize them in source code.

00:43:08.599 --> 00:43:11.569
To do this we use Interface Builder connections inspector.

00:43:11.570 --> 00:43:16.530
In the connections inspector you'll see all the actions
and outlets that pertain to your class and you'll be able

00:43:16.530 --> 00:43:24.550
to drag from the connection hot spot to some user
interface element in your Interface Builder document

00:43:24.550 --> 00:43:27.980
to connect them together so that they're
available to use as source code and to show you

00:43:27.980 --> 00:43:30.130
that I'd like to demonstrate something to you.

00:43:30.130 --> 00:43:32.490
Can we switch to the demo machines?

00:43:32.489 --> 00:43:37.869
( Pause )

00:43:37.869 --> 00:43:41.179
I'm going to return to the project that Kelly and
I have been working on today, the icon editor,

00:43:41.179 --> 00:43:44.730
and I'm going to start by building and running the project.

00:43:46.610 --> 00:43:49.110
Right now we don't have any source
code and we don't have any connections;

00:43:49.110 --> 00:43:52.260
we just have an interface that
we've created in Interface Builder.

00:43:52.260 --> 00:43:56.820
If I switch to the application we can see that we
have the window that we designed in Interface Builder

00:43:56.820 --> 00:44:00.019
and we have the tool palette but
our sheet is nowhere to be found

00:44:00.019 --> 00:44:03.780
and our buttons don't work quite
the way that we would like them to.

00:44:03.780 --> 00:44:07.740
So, let's return to Interface Builder and make some
connections between our user interface elements

00:44:07.739 --> 00:44:12.299
and our source code so that we can
breathe some life into our application.

00:44:12.300 --> 00:44:19.800
I'm going to return to our document, and I'm going to go
to the library and I'm going to find the instance of object;

00:44:19.800 --> 00:44:22.910
it's right here and I'm going to drag it to our application.

00:44:22.909 --> 00:44:27.250
Once we have this instance of object in our
application we can use identity inspector

00:44:27.250 --> 00:44:29.809
to change the class to an instance of my controller.

00:44:29.809 --> 00:44:34.889
Notice the auto completion; we find
this by synchronizing with Xcode.

00:44:34.889 --> 00:44:38.759
Now that I've declared that I have
an instance of my controller

00:44:38.760 --> 00:44:41.550
in my document I can go ahead and
declare some actions and outlets.

00:44:41.550 --> 00:44:46.280
We're going to need a couple of actions and outlets in
order to show some functionality for our user interface.

00:44:48.000 --> 00:44:52.179
We're going to start with some actions and outlets
for the OK and cancel buttons on our size sheet

00:44:52.179 --> 00:44:55.690
so let's add an action called OK size sheet.

00:44:55.690 --> 00:44:59.639
We'll have this evoked every time the user
clicks the OK button in our size sheet.

00:44:59.639 --> 00:45:02.789
We'll have a complimenting action, cancel size sheet.

00:45:02.789 --> 00:45:11.190
We'll also need an action for when the user selects some
of the tool widgets, the tool buttons in our tool palette.

00:45:11.190 --> 00:45:15.460
So, let's add a toggle tool action.

00:45:15.460 --> 00:45:18.449
Finally we're going to need a couple of outlets
in Interface Builder so that we can refer

00:45:18.449 --> 00:45:20.719
to the elements of our interface in our source code.

00:45:20.719 --> 00:45:28.709
I'm going to add a main window outlet so that we can
refer to our window in source code and I'm also going

00:45:28.710 --> 00:45:35.490
to add a size sheet window so we can
refer to our size sheet from source code.

00:45:35.489 --> 00:45:40.649
So at this point we can move over to Interface Builder's
connections inspector and begin to make connections.

00:45:40.650 --> 00:45:44.470
I can drag from our main window connection,
the connections hot spot, over to our window

00:45:44.469 --> 00:45:48.059
and Interface Builder will highlight the
window to indicate that I can connect them.

00:45:49.880 --> 00:45:55.840
I can also drag a connection from our size sheet
outlet to our size sheet and from our OK size sheet

00:45:55.840 --> 00:46:00.050
to our push button and our cancel
size sheet to our other push button.

00:46:00.050 --> 00:46:04.180
So now when the user click our OK and
cancel buttons our methods OK size sheet

00:46:04.179 --> 00:46:07.210
and cancel size sheet and code will be envoked.

00:46:07.210 --> 00:46:11.369
We also need connections for Interface
Builder for our toggle tool action.

00:46:11.369 --> 00:46:13.659
Now for this I'm going to show you something else.

00:46:13.659 --> 00:46:15.710
When you're going to make lots of
connections you can take advantage

00:46:15.710 --> 00:46:18.570
of Interface Builder's inline connections inspector.

00:46:18.570 --> 00:46:21.830
We can right click or control click on
any element in Interface Builder to bring

00:46:21.829 --> 00:46:27.610
up the inline connections inspector and once we've
done this...thanks...once we've done this we're able

00:46:27.610 --> 00:46:31.870
to make action outlet connections just
like with normal connections inspector.

00:46:31.869 --> 00:46:35.909
So, I'm going to start dragging a connection for my toggle
tool outlet; notice that I drag over the HUD;

00:46:35.909 --> 00:46:39.489
it gets out of my way in case I want to
make a connection to something behind it.

00:46:41.150 --> 00:46:45.130
Now I've started to drag but I forgot to open
up my tool palette before I started to drag.

00:46:45.130 --> 00:46:51.740
I don't have to abandon the drag there because Interface
Builder's connection mechanism is all fully spring loaded.

00:46:51.739 --> 00:46:58.159
So I can mouse over my tool palette and if I wait for just a
second Interface Builder is going to open the window for me;

00:46:58.159 --> 00:47:02.339
so now I can go ahead and proceed with making my
connections and I'm going to connect these one at a time

00:47:02.340 --> 00:47:06.180
to all the elements in this palette interface.

00:47:06.179 --> 00:47:11.869
( Pause )

00:47:11.869 --> 00:47:14.250
Now you'll notice that as I mouse
over the different elements

00:47:14.250 --> 00:47:18.510
in the inline connections inspector Interface
Builder is telling me what each of those actions

00:47:18.510 --> 00:47:21.900
and outlets is associated to by
highlighting them on the editor surface.

00:47:21.900 --> 00:47:27.760
So, for example this toggle tool action that's connected
to multiple elements in my interface and as I mouse

00:47:27.760 --> 00:47:29.280
over Interface Builder shows me all of them.

00:47:29.280 --> 00:47:32.980
I can disclose this to see a list
of each of them individually.

00:47:32.980 --> 00:47:37.429
Now you might have also noticed that I accidently
connected the toggle tool action to my color well

00:47:37.429 --> 00:47:41.779
and that was a mistake and Interface Builder
has undo and redo integrated throughout all

00:47:41.780 --> 00:47:44.010
of Interface Builder including making connections.

00:47:44.010 --> 00:47:48.640
So I can undo and redo this; I can undo
this because if feel that I made a mistake

00:47:48.639 --> 00:47:51.150
and I can redo it to re-add the connection.

00:47:51.150 --> 00:47:57.019
If I see a connection that I've made that I've decided I
no longer need there's an X button in both the inspector

00:47:57.019 --> 00:48:02.000
and the inline inspector that I
can use to disconnect a connection.

00:48:02.000 --> 00:48:06.519
So at this point I've made all the connections that
I need to integrate my view layer with my source code

00:48:06.519 --> 00:48:09.940
but I need backing source code for all of them.

00:48:09.940 --> 00:48:13.920
For that I can return to Interface Builder's
identity inspector and look at actions

00:48:13.920 --> 00:48:17.980
and outlets that I was working with earlier.

00:48:17.980 --> 00:48:20.099
( Pause )

00:48:20.099 --> 00:48:28.150
If I select each of the actions and outlets that I defined
in Interface Builder I can drag them back to Xcode.

00:48:28.150 --> 00:48:31.269
So I drag these here; they're going
to show up in my Xcode project.

00:48:31.269 --> 00:48:36.929
( Applause )

00:48:36.929 --> 00:48:39.589
I can do the same thing for my outlets.

00:48:39.590 --> 00:48:42.740
( Pause )

00:48:42.739 --> 00:48:46.619
Now of course I'd need a backing implementation for
these actions in order to make them perform something

00:48:46.619 --> 00:48:51.539
and if we switch to the .m file for our controller
I've already written implements simple limitations

00:48:51.539 --> 00:48:52.349
for each of our actions.

00:48:52.349 --> 00:48:58.409
So I'm going to un-comment them and
we're going to run our application again.

00:48:58.409 --> 00:49:03.699
So, now we've run our application and we've immediately be
presented with a size sheet; so interface said we were able

00:49:03.699 --> 00:49:06.199
to do that through our outlet connections.

00:49:06.199 --> 00:49:09.889
We also made an action connections from the buttons
inter size sheet and now I can press the OK

00:49:09.889 --> 00:49:15.509
and cancel buttons to confirm or reject the sheet.

00:49:15.510 --> 00:49:23.120
Our tool palette also behaves as
expected selecting one tool at a time.

00:49:23.119 --> 00:49:26.889
So now I've showed you how to make connections to
Interface Builder and to integrate your view layer

00:49:26.889 --> 00:49:29.400
with your source code, let's return to the slides.

00:49:29.400 --> 00:49:36.160
( Pause )

00:49:36.159 --> 00:49:41.069
To recap what we have heard in the demo we learned
how to integrate custom instances of our objects

00:49:41.070 --> 00:49:45.870
that are represented in our Xcode project into our
Interface Builder documents by dragging instances of objects

00:49:45.869 --> 00:49:51.029
from the library into our document and then using
Interface Builder's identity inspector to change the class

00:49:51.030 --> 00:49:55.140
of our objects from objects to instances of our controllers.

00:49:55.139 --> 00:49:59.269
We've learned how we can define actions and outlets
in Interface Builder and drag them back to Xcode

00:49:59.269 --> 00:50:05.650
and how we can use the connections inspector to establish
relationships between our objects and our interface layer.

00:50:06.949 --> 00:50:11.439
Now up until this point in our presentation there's
been three objects that have been part of every one

00:50:11.440 --> 00:50:15.440
of our Interface Builder documents that we've been ignoring.

00:50:15.440 --> 00:50:20.970
Those objects are the file's owner, the
first responder, and the application.

00:50:24.760 --> 00:50:30.220
The first object that I'd like to
talk to you about is the file's owner.

00:50:30.219 --> 00:50:36.289
When nibs are loaded at run time they're loaded
with NSBundle API, loadNibNamed:owner.

00:50:36.289 --> 00:50:40.980
The first parameter to API is simple; it's
the name of your Interface Builder document.

00:50:40.980 --> 00:50:45.860
The second parameter to this method
is the owner and this owner is used

00:50:45.860 --> 00:50:48.220
to resolve the file's owner in Interface Builder.

00:50:48.219 --> 00:50:52.009
The file's owner object that you see
in Interface Builder is a proxy object

00:50:52.010 --> 00:50:56.960
and it's a proxy object it doesn't represent an object inside
your nib but instead an object that lives outside your nib

00:50:56.960 --> 00:51:04.329
and that proxy is resolved as the parameter that you
pass in to the loadNibNamed:owner method as the owner.

00:51:04.329 --> 00:51:07.989
So the primary purpose of the file's owner
is to allow you to make connections

00:51:07.989 --> 00:51:12.299
from objects inside your nib to objects outside of your nib.

00:51:12.300 --> 00:51:17.100
So if you have an Interface Builder, if you have a
controller in your application that loads content

00:51:17.099 --> 00:51:22.469
from multiple interfaces a great way
to do that is with the file's owner.

00:51:22.469 --> 00:51:27.179
The next Interface Builder object that I'd like to talk to
you about that acts as a proxy for you to make connections

00:51:27.179 --> 00:51:32.199
to is the first responder but before I can describe to
you that what the first responder is used for I need

00:51:32.199 --> 00:51:37.099
to first describe to you a Cocoa concept
and that concept is the responder chain.

00:51:37.099 --> 00:51:40.539
Let's look at this example.

00:51:40.539 --> 00:51:45.019
Cocoa delivers many events to the
focus user interface element

00:51:45.019 --> 00:51:52.349
and in Cocoa we call the focus user interface element the first
responder. And the first responder along with its parents

00:51:52.349 --> 00:51:57.579
in this simplified example, a window in an
application, together form the responder chain,

00:51:57.579 --> 00:52:03.829
and as events are delivered in Cocoa they'll first present
to the first responder and if he's able to satisfy those,

00:52:03.829 --> 00:52:09.170
to respond to those events it will; otherwise
it will pass the events up the responder chain.

00:52:09.170 --> 00:52:17.200
So for example, if we use the edit menu and select copy,
a copy message will be sent to the first responder.

00:52:17.199 --> 00:52:22.589
In our example text fields understand the copy message
and they'll take their selected text and place it

00:52:22.590 --> 00:52:25.720
on the clipboard and satisfy the copy request.

00:52:25.719 --> 00:52:32.049
As an alternative example if we use the file
close menu a perform close message will be sent

00:52:32.050 --> 00:52:34.450
to the first responder in the responder chain.

00:52:34.449 --> 00:52:37.789
Now text fields don't understand performClose so instead

00:52:37.789 --> 00:52:40.820
of performing the close action the
text field forwards the message

00:52:40.820 --> 00:52:44.220
on to the next responder; in our example that's the window.

00:52:44.219 --> 00:52:46.769
The window happily accepts the message and closes.

00:52:46.769 --> 00:52:53.920
So now that we know what the responder chain is I can tell
you how to use the first responder in Interface Builder.

00:52:53.920 --> 00:52:58.409
Just like the file's owner, the first responder is
a proxy object that represents objects outside

00:52:58.409 --> 00:53:05.329
of your nib except unlike the file's owner, the
first responder represents a dynamic object;

00:53:05.329 --> 00:53:09.719
it represents an object that's not resolved until
your user interface action, the click of a button,

00:53:09.719 --> 00:53:13.039
the selection of a menu item, is pressed.

00:53:13.039 --> 00:53:17.320
So we use the first responder for action connections.

00:53:17.320 --> 00:53:23.860
We typically use it for menu items and toolbar items so
that they can work on the front most user interface element.

00:53:25.329 --> 00:53:29.599
In addition to the file's owner and the first responder
there's one additional connection target that we're going

00:53:29.599 --> 00:53:33.589
to use in all of our Interface Builder
documents and that's the application.

00:53:33.590 --> 00:53:38.900
Every Cocoa application has one instance of an NSApplication
either direct instance within this application

00:53:38.900 --> 00:53:43.610
or custom subclass that you're providing with your
application and this object is always available for you

00:53:43.610 --> 00:53:47.099
to make connections to and from with Interface Builder 3.0.

00:53:49.789 --> 00:53:54.570
So now I've described connections to you and how you can use
connections to integrate the view layer of your application

00:53:54.570 --> 00:53:59.260
with the controller layer of your application and to
breathe life into you interface and give it functionality.

00:53:59.260 --> 00:54:07.010
Now we're going to move on to how we can integrate
our interface with Xcode and deploy it on Mac OS X.

00:54:07.010 --> 00:54:10.640
Xcode and Interface Builder have a lot of information.

00:54:10.639 --> 00:54:15.579
Xcode knows about all the classes in you project and all
the images and sounds and you need all this information

00:54:15.579 --> 00:54:19.639
when you're working with Interface Builder
and with Interface Builder 3.0 and Xcode 3.0

00:54:19.639 --> 00:54:24.539
on Leopard we've automated this
entire information exchange process.

00:54:25.590 --> 00:54:29.590
Your key to this information exchange process
will be Interface Builder's document window.

00:54:29.590 --> 00:54:34.660
If you're working with a document in Interface Builder
and that document is associated with a project in Xcode

00:54:34.659 --> 00:54:38.989
and that project is currently open then Interface Builder
and Xcode are going to be talking and working together

00:54:38.989 --> 00:54:43.529
to share all the information that you need to build
your interface; this includes all the class information.

00:54:43.530 --> 00:54:48.350
So as you build classes in Xcode if you return
to Interface Builder they'll be available.

00:54:48.349 --> 00:54:52.089
This also includes all your images and sounds.

00:54:52.090 --> 00:54:57.230
This light at the bottom of your document window
is your key to the synchronization status.

00:54:57.230 --> 00:54:59.150
When you're working with an Xcode project

00:54:59.150 --> 00:55:04.059
and Interface Builder is syncing, this light
will turn green and refer to you project.

00:55:06.079 --> 00:55:09.039
Perhaps the biggest benefit of the
automatic synchronization that's new

00:55:09.039 --> 00:55:12.710
in Interface Builder 3.0 is the class synchronization.

00:55:14.710 --> 00:55:17.929
When you edit your source code if
you type actions and outlets directly

00:55:17.929 --> 00:55:22.629
into your header files they'll automatically show
up in Interface Builder in the identity inspector.

00:55:22.630 --> 00:55:27.190
Interface Builder's synchronizing all
of your class information with Xcode

00:55:27.190 --> 00:55:32.530
and with Interface Builder 3.0 we're able to provide
great features to you by doing this and all the places

00:55:32.530 --> 00:55:35.610
in Interface Builder where you might type
a class name we're able to auto complete

00:55:35.610 --> 00:55:38.000
that class name to make sure you don't make mistakes.

00:55:38.000 --> 00:55:45.650
In Interface Builder 3.0 we also offer first class
support for in addition to Objective-C, Ruby and Python.

00:55:45.650 --> 00:55:49.269
So you can now build first class Cocoa
applications with Ruby and Python

00:55:49.269 --> 00:55:52.659
on Mac OS X using Xcode and Interface Builder.

00:55:52.659 --> 00:55:58.819
A big feature for Xcode in version 3.0 is
refactoring support and if you refactor your project

00:55:58.820 --> 00:56:03.260
with Xcodes refactoring engine that also
provides full integration with Interface Builder.

00:56:03.260 --> 00:56:09.410
So if you use refactoring to rename your actions or outlets
or move them up or down to class hierarchy or sideways left

00:56:09.409 --> 00:56:14.440
and right, Interface Builder will respond to those
refactorings and will automatically update your connections,

00:56:14.440 --> 00:56:18.940
outlets and actions in your Interface Builder documents.

00:56:18.940 --> 00:56:23.760
Interface Builder, by synchronizing with Xcode and
finding out about all of your classes is also able

00:56:23.760 --> 00:56:26.630
to help you to detect broken connections.

00:56:28.309 --> 00:56:33.250
I find that it's often the case that I'll return to
some component of my application that I haven't worked

00:56:33.250 --> 00:56:38.690
with in a long time and I'll see actions and outlets that
I don't think are in use anymore and I might delete them.

00:56:38.690 --> 00:56:43.059
If I delete them and they actually are in use and I return
to Interface Builder, Interface Builder is able to tell

00:56:43.059 --> 00:56:47.590
to me that I have actions and outlets connected
with no backing source code and we figure all this

00:56:47.590 --> 00:56:50.470
out by automatically synchronizing with Xcode.

00:56:51.690 --> 00:56:56.329
Beyond synchronizing your class information Interface
Builder also synchronizes all the images and sounds

00:56:56.329 --> 00:57:02.019
in your Xcode project and when you use images and sounds in
Interface Builder, Interface Builder refers to those images

00:57:02.019 --> 00:57:05.690
and sounds by name; this means that
if you use an image multiple times

00:57:05.690 --> 00:57:09.650
in your interface they'll only be one instance
in your running application; this saves memory.

00:57:09.650 --> 00:57:14.110
This also means that Interface Builder gets to always show
you the latest image data that you have in your project

00:57:14.110 --> 00:57:18.590
in your Interface Builder documents and as Kelly
showed you in your demo it also lets us auto complete

00:57:18.590 --> 00:57:21.680
in all the places in Interface Builder that accept images.

00:57:24.429 --> 00:57:27.589
We make all this possible in Mac OS X with nib files.

00:57:27.590 --> 00:57:31.140
As we've started at the beginning of the presentation
we saw the Interface Builder offers nib files

00:57:31.139 --> 00:57:35.069
and nibs files are free stride contents of your interfaces.

00:57:35.070 --> 00:57:40.670
All versions of Interface Builder have edited nib files
and nib files are editable with, of course, all versions

00:57:40.670 --> 00:57:46.329
of Interface Builder; they're also buildable with all
versions of Xcode and deployable on all recent versions

00:57:46.329 --> 00:57:51.179
of Mac OS X 10.2 and later for
the nibs files in Interface Builder 3.0 offers.

00:57:51.179 --> 00:57:56.269
Unfortunately the nib 2.0 files are incompatible
with some of the newest features that we've added

00:57:56.269 --> 00:58:02.940
to Interface Builder 3.0; such as toolbars,
connections to cells and custom cell classes.

00:58:02.940 --> 00:58:07.590
With Interface Builder 3.0 on Leopard we're
introducing a new file format and that's XIB files.

00:58:07.590 --> 00:58:13.360
Interface Builder 2.0 nib files were file packages
and they were often awkward to integrate with SCM systems.

00:58:13.360 --> 00:58:18.530
Interface Builder XIB files provide first class
SCM integration; they're single textual files;

00:58:18.530 --> 00:58:23.330
they're human readable and you can get diff them with
common utilities like file merge in Xcode's SCM Integration.

00:58:23.329 --> 00:58:31.789
( Applause )

00:58:31.789 --> 00:58:36.420
>>Now textual XML files are great for source
code development but they're not the best format

00:58:36.420 --> 00:58:42.180
for deploying your interface; for that we want fast,
small binary files so that we can get the best performance

00:58:42.179 --> 00:58:47.529
and the smallest memory usage and so in order to
achieve that we compile your Interface Builder documents

00:58:47.530 --> 00:58:53.080
when you build an Xcode; so now Interface Builder
documents are compiled as you deploy your interface.

00:58:53.079 --> 00:58:55.699
Because we're compiling your Interface
Builder documents we're able

00:58:55.699 --> 00:58:58.839
to give you build warnings and errors in your Xcode build.

00:58:58.840 --> 00:59:05.250
So if you're targeting Mac OS 10.2 with your
XIB files in your Xcode project and you use controls

00:59:05.250 --> 00:59:09.449
from Interface Builder that weren't available on Mac OS
10.2, Interface Builder will be able to tell you

00:59:09.449 --> 00:59:12.899
as part of the build with a build
error that you've caused such a problem

00:59:12.900 --> 00:59:15.820
and you can take action to rectify the situation.

00:59:15.820 --> 00:59:22.620
( Applause )

00:59:22.619 --> 00:59:27.960
XIB files are only editable with Interface Builder
3.0; they're only buildable with Xcode 3.0

00:59:27.960 --> 00:59:33.119
but they're deployable on all versions of Mac OS X;
so you can still use Interface Builder 3.0 and Xcode 3.0

00:59:33.119 --> 00:59:40.089
and take advantage of all the great SCM features of the
XIB files and deploy the previous versions of Mac OS X.

00:59:40.090 --> 00:59:45.600
We're also introducing a third migrational file
format and that's the Interface Builder 3.0.0 nib file.

00:59:45.599 --> 00:59:48.659
This nib file provides for all the
features of Interface Builder 3.0.

00:59:48.659 --> 00:59:52.679
You can use toolbars, custom cell
classes; you can connect the cells

00:59:52.679 --> 00:59:55.329
and use every other feature of Interface Builder 3.0.

00:59:55.329 --> 00:59:59.519
These files are also deployable everywhere
just like XIB files and nib 2.0 files;

00:59:59.519 --> 01:00:04.460
they're also buildable everywhere; that's their key
difference between nib and XIB files, between nib 2.0

01:00:04.460 --> 01:00:09.750
and XIB files so you can build them with
all the different Xcode tool chains;

01:00:09.750 --> 01:00:12.840
again they're only editable with Interface Builder 3.0.

01:00:12.840 --> 01:00:19.200
So with me just presenting three file formats to you, you may
be asking which one should I be using in my applications?

01:00:19.199 --> 01:00:26.269
If you're editing and building on Mac OS X 10.5 with
the Xcode 3.0 tool chain you should be using XIB files;

01:00:26.269 --> 01:00:30.960
that's the preferred file format of Interface Builder
3.0 to support all the features of Interface Builder 3.0

01:00:30.960 --> 01:00:37.750
it's going to give you the best run time characteristics by
compiling your user files into small binary representations

01:00:37.750 --> 01:00:42.469
and it's going to provide great
SCM and build warnings and errors.

01:00:42.469 --> 01:00:46.809
Now if some of you, if you've have a mixed it all
team where some of your teams are working on Tiger

01:00:46.809 --> 01:00:50.769
and some of your team is sometimes working on Leopard you
can still take advantage of many of the great features

01:00:50.769 --> 01:00:57.860
in Interface Builder 3.0 including toolbars
by using Interface Builder 3.0 nib files.

01:00:57.860 --> 01:01:02.450
These files are still on editable on Interface
Builder 3.0 on Leopard but you can still build them

01:01:02.449 --> 01:01:10.369
with the Xcode 2.0 tool chain on either Tiger, a previous
release of Xcode if you're going that far back or Leopard.

01:01:10.369 --> 01:01:15.089
Last if you have the occasion to edit with Interface
Builder 3.0 on Leopard but mostly your team is sticking

01:01:15.090 --> 01:01:22.400
with the Interface Builder 2.0 tool chain you can use
Interface Builder 2.0 nib files with Interface Builder 3.0;

01:01:22.400 --> 01:01:26.980
this will restrict you slightly in the amount features that
you can use such as toolbars, for example, but you still get

01:01:26.980 --> 01:01:31.460
to take advantage of all Interface Builders great editing
enhancements like multiple selection, the library,

01:01:31.460 --> 01:01:35.780
the new connections mechanisms, Xcode integration and on.

01:01:35.780 --> 01:01:43.990
So now that we've learned about all the file formats in Xcode's
and Interface Builder's automatic information exchange,

01:01:43.989 --> 01:01:48.619
we've learned how to deploy our
interfaces. Let's take a quick moment to go

01:01:48.619 --> 01:01:50.989
over a summary of what we've learned so far.

01:01:50.989 --> 01:01:54.729
We learned how to use Interface Builder's
library to add new content to our documents.

01:01:54.730 --> 01:01:58.429
We learned that we can customize the
library with custom groups and smart groups.

01:01:58.429 --> 01:02:02.369
We learned that the library has real
objects in it and we can extend it

01:02:02.369 --> 01:02:05.469
with our own plug-ins if we're a framework developer.

01:02:07.030 --> 01:02:10.580
We learned how to lay out objects in Interface
Builder; how to take advantage of the Aqua guides,

01:02:10.579 --> 01:02:16.199
how to bring our own user guides in and that we can use
the option key to mouse over elements of our interface

01:02:16.199 --> 01:02:19.789
and see the relative distances between them.

01:02:19.789 --> 01:02:24.070
We learned how to use inspectors to take precise
control over the various elements of our interface

01:02:24.070 --> 01:02:27.830
and to configure their behavior
down to the smallest details.

01:02:29.639 --> 01:02:33.069
We've also learned how to connect objects in
Interface Builder using the identity inspector

01:02:33.070 --> 01:02:38.059
to integrate our controllers and the connections inspector
to make connections between our various interface elements

01:02:38.059 --> 01:02:42.920
so we can integrate them with source code and breathe
life into our interfaces and last we learned how

01:02:42.920 --> 01:02:47.610
to deploy our interfaces on Mac OS X with
Xcode, take great advantage of new features

01:02:47.610 --> 01:02:54.750
like Interface Builders XIB files for great
SCM integration and build warnings and errors.

01:02:54.750 --> 01:03:00.510
With that I'd like to point you to some more
information; there's developer documentation

01:03:00.510 --> 01:03:05.750
and sample code available at developer.apple.com
for the WWDC attendees section

01:03:05.750 --> 01:03:12.829
and on your Xcode CDs is an Interface Builder 3.0 Getting
Started Guide that's available in Xcode's documentation.