WEBVTT

00:00:20.010 --> 00:00:21.520
>> Hi, I'm Chuck Hill.

00:00:21.519 --> 00:00:26.550
For those of you who hang out in the WebObjects
mailing list, you'll probably recognize the name Chuck.

00:00:26.550 --> 00:00:29.600
I'm also one of the authors of Practical WebObjects.

00:00:29.600 --> 00:00:32.920
If you're doing WebObjects development,
you don't have it, you want to.

00:00:32.920 --> 00:00:39.609
I work for Global Village Consulting, which is a
WebObjects development house based in Vancouver, Canada.

00:00:39.609 --> 00:00:43.740
My goal today is to make those of you here
who are not using Eclipse for your day

00:00:43.740 --> 00:00:46.300
to day WebObjects development want to start using it.

00:00:46.299 --> 00:00:49.000
And for those of you who are already using it,

00:00:49.000 --> 00:00:53.090
pay attention because you might see a
few new features you haven't seen yet.

00:00:53.090 --> 00:01:00.440
I'm also going to give you some idea of what you need to
do to get from the IDE you're using today into Eclipse

00:01:00.439 --> 00:01:04.319
and what the costs to you are going to be of that migration.

00:01:07.469 --> 00:01:13.189
Okay, we've had some sessions on Eclipse before at
WWDC but they were never really looking at WebObjects.

00:01:13.189 --> 00:01:16.859
So what I want to do today is I want
to look at features in Eclipse that are

00:01:16.859 --> 00:01:20.019
of particular interest to WebObjects developers.

00:01:20.019 --> 00:01:24.079
Now, before we get started, I'm assuming
everybody has at least heard of Eclipse.

00:01:24.079 --> 00:01:30.329
Can I have a show of hands of the people who are
not using Eclipse for WebObjects development.

00:01:31.510 --> 00:01:34.760
Oh my. Oh my.

00:01:34.760 --> 00:01:37.560
Okay, so let's take a brief look at what it is.

00:01:37.560 --> 00:01:44.519
Eclipse is a platform neutral IDE for general development.

00:01:44.519 --> 00:01:48.719
It has become wildly popular, partly I think
because it is free and developers like free.

00:01:48.719 --> 00:01:52.959
As it comes out of the box, it's not particularly for Java.

00:01:52.959 --> 00:01:53.739
It is for anything.

00:01:53.739 --> 00:01:55.920
You can do COBOL in it, you can do whatever.

00:01:55.920 --> 00:01:58.909
It's just a platform for development environments.

00:01:58.909 --> 00:02:02.869
It does come with some Java tools, which are really good.

00:02:02.870 --> 00:02:06.040
But, it doesn't know anything about WebObjects

00:02:06.040 --> 00:02:07.550
That's where WOLips comes in.

00:02:07.549 --> 00:02:12.340
WOLips is a plug-in which integrates into
Eclipse and teaches it about WebObjects.

00:02:12.340 --> 00:02:15.050
So, it tells it how do you build a WebObjects application?

00:02:15.050 --> 00:02:17.280
How do you build a WebObjects framework?

00:02:17.280 --> 00:02:19.419
What do you do to edit a Neomodel?

00:02:19.419 --> 00:02:21.669
What do you do to edit a WoComponent?

00:02:21.669 --> 00:02:25.069
So it's the part that makes Eclipse smart about WebObjects.

00:02:25.069 --> 00:02:30.840
Now it also comes with one other thing, which is
Will Project, now this is an ant based build system

00:02:30.840 --> 00:02:34.670
and it's the command line way of
building a WebObjects application.

00:02:34.669 --> 00:02:41.089
So, it's going to replace what we've done in the
past with making project builder, with jam in Xcode.

00:02:44.139 --> 00:02:52.969
Now, why migrate, why not stick with what you have?

00:02:55.159 --> 00:02:58.370
You're going to have problems in it,
you're going to have to learn the new IDE

00:02:58.370 --> 00:03:06.780
you're going to have to move all your projects
and you might run into problems, but you're not.

00:03:06.780 --> 00:03:13.319
Tomorrow there's a lab, there is Apple engineers
there, ready to help you move your projects.

00:03:13.319 --> 00:03:17.959
I'll be there, I think Mike Shrag
will also be there to help you.

00:03:17.960 --> 00:03:18.849
There is a WOLips mailing list

00:03:18.849 --> 00:03:23.139
mailing list, almost as active as a web
objects mailing list, a lot of the same great,

00:03:23.139 --> 00:03:28.689
friendly people there ready to
help you, there's also a Wiki for WOLips

00:03:28.689 --> 00:03:31.569
that has some pretty good tutorials and getting started.

00:03:31.569 --> 00:03:36.719
It doesn't cover everything, but between that and
the list you can find out what you need to find out.

00:03:36.719 --> 00:03:38.719
So, why migrate?

00:03:38.719 --> 00:03:40.770
Why not just stick with what you know?

00:03:40.770 --> 00:03:42.480
I migrated a long time ago.

00:03:42.479 --> 00:03:46.000
For me, the reason to migrate was productivity gains.

00:03:46.000 --> 00:03:54.050
It's a better IDE for Java, it's a better IDE for Web
Objects, you can get more done quicker, that's why I moved.

00:03:54.050 --> 00:04:01.300
But, this year, Apple has given you an even better
reason to move, last year it was announced that some

00:04:01.300 --> 00:04:06.040
of the tools were going away, EO modeler was going away,
WebObjects builder was going away, sometime in the future,

00:04:06.039 --> 00:04:10.199
we didn't know when, and this year
they've announced that, as of Leopard,

00:04:10.199 --> 00:04:14.259
that transitions complete, bye bye, no more Legacy tools.

00:04:14.259 --> 00:04:18.149
There're replacements tools right
now, today, to replace those

00:04:18.149 --> 00:04:25.129
in WOLips. So, with the productivity gains and
the new tools, the decision makes itself,

00:04:25.129 --> 00:04:28.159
you really want to be using Eclipse and WOLips.

00:04:28.160 --> 00:04:33.460
It's the future of WebObjects, it's
a great future, embrace that future.

00:04:33.459 --> 00:04:39.699
So in a few minutes I'm going to go through a very, very
brief demo of some of the key features of what's in Eclipse

00:04:39.699 --> 00:04:45.620
and WOLips, and I'm not going to be able to show you
everything that's up here, but I want you to ask yourself,

00:04:45.620 --> 00:04:49.379
when you're doing your development,
what is your machine doing for you?

00:04:49.379 --> 00:04:50.750
What is that IDE doing for you

00:04:50.750 --> 00:04:53.800
You've got a great piece of silicon sitting in front of you,

00:04:53.800 --> 00:04:58.079
is that IDE helping make your life
easier, or is it just sitting there?

00:04:58.079 --> 00:05:01.339
Is it just a GUI wrapper around some command line tools,

00:05:01.339 --> 00:05:04.159
the same tools that people have been
using for the command line forever.

00:05:04.160 --> 00:05:05.240
What about code completion?

00:05:05.240 --> 00:05:07.480
Does it have code completion?

00:05:07.480 --> 00:05:09.750
Does it have intelligent code completion?

00:05:09.750 --> 00:05:12.579
Context sensitive code completion?

00:05:12.579 --> 00:05:15.719
Debugging, does it even have a debugger?

00:05:15.720 --> 00:05:17.560
Does it have a Java debugger?

00:05:17.560 --> 00:05:20.000
Is the Java debugger aware of WebObjects?

00:05:20.000 --> 00:05:22.509
Does it give you special support for WebObjects?

00:05:22.509 --> 00:05:23.430
And how about error reporting?

00:05:23.430 --> 00:05:24.930
Error reporting, for me, is a big thing.

00:05:24.930 --> 00:05:27.030
I make lots of mistakes, I'm a very bad typer.

00:05:27.029 --> 00:05:31.419
Do you have to build to find your errors?

00:05:31.420 --> 00:05:33.509
Does it show them to you automatically?

00:05:33.509 --> 00:05:35.509
Does it tell you exactly where they are?

00:05:35.509 --> 00:05:37.269
Exactly what they are?

00:05:37.269 --> 00:05:40.209
Does it help you fix your errors?

00:05:40.209 --> 00:05:43.539
Now I've talked to a lot of people over the
years, I migrated back in the days of Project,

00:05:43.540 --> 00:05:48.120
and I've talked to a lot of people who've gone from
Project Builder to Eclipse, from Xcode to Eclipse,

00:05:48.120 --> 00:05:51.899
and a lot of them did so reluctantly, they
kind of thought they were being pushed

00:05:51.899 --> 00:05:54.729
into it, they weren't too happy about it.

00:05:54.730 --> 00:06:00.710
I haven't talked to one single person that wanted to
move back after a couple of days, or a couple of weeks,

00:06:00.709 --> 00:06:09.680
of real experience with Eclipse, I don't
think any of you are going to be the first.

00:06:09.680 --> 00:06:19.250
So now we're going to go into a brief demo.

00:06:19.250 --> 00:06:25.180
So here's Eclipse, I'm not going to go through
what's in the IDE and to do that demo today,

00:06:25.180 --> 00:06:31.639
we've got the pet store application, which you're probably
familiar with through the last few versions of WebObjects.

00:06:31.639 --> 00:06:38.319
Now, I'll point out that the demo I'm showing today are
the WebObjects 5.3 versions of the Pet Store,

00:06:38.319 --> 00:06:42.430
they're not the WebObjects 5.4 versions,
because it appears Don had cleaned up some

00:06:42.430 --> 00:06:44.509
of the mess that I want to show you today.

00:06:44.509 --> 00:06:54.259
So we're going to open this up and we're going
to go into one of the classes, and here we have,

00:06:55.459 --> 00:07:01.579
it's a little bit slow to load up the first
time because, again, it's loading the plug-ins

00:07:01.579 --> 00:07:06.159
into memory, after the first file it snaps right up.

00:07:06.160 --> 00:07:12.250
So, you take a look here and you can see
that there is a little warning sign there

00:07:12.250 --> 00:07:16.339
and some of the imports are underlined.

00:07:16.339 --> 00:07:23.409
Now, Eclipse keeps a model of your project as you're
developing it, and it's not just what's in your project,

00:07:23.410 --> 00:07:29.840
it's not just what files are in your project, it's what
in the files in your project, and it can tell here,

00:07:29.839 --> 00:07:34.929
because it knows what's in this Java file,
that none of these imports are being used.

00:07:34.930 --> 00:07:39.920
So we can just go here to the source menu
and we can just say, Organize my imports,

00:07:39.920 --> 00:07:43.040
clean them up, and bang, they're finished.

00:07:43.040 --> 00:07:48.410
It can do the same thing in add imports, so it's an
example of something that you've probably done everyday,

00:07:48.410 --> 00:07:52.510
and it's just grunt work, it's not intelligent,
here the machine's doing it for you.

00:07:52.509 --> 00:07:54.409
It's keeping any eye out for what's going on.

00:07:54.410 --> 00:08:04.730
And you'll notice that there's no build button in Eclipse,
there's just a run button, because there's no build cycle,

00:08:04.730 --> 00:08:09.080
because it's constantly doing this in the
background, constantly keeping the model updated,

00:08:09.079 --> 00:08:11.250
all you need to do is run the application.

00:08:11.250 --> 00:08:12.899
So, there's a lot of great tools you can build with that.

00:08:12.899 --> 00:08:16.689
We saw one, with the imports, let's
take a look at another one here.

00:08:17.930 --> 00:08:25.740
So here's a very simple method and it's just copying
some strings into some attributes of our order object.

00:08:25.740 --> 00:08:28.910
So I'm going to go ahead and I'm
going to delete that and pretend,

00:08:28.910 --> 00:08:33.769
like I usually do, that I've forgotten what the thing was.

00:08:33.769 --> 00:08:44.689
So, I'm going to type address one instead of addrone,
and you can see that it puts a red underline in it.

00:08:44.690 --> 00:08:51.150
I haven't saved it, I haven't built it, but it says
already, okay, whatever you're typing, that's wrong.

00:08:51.149 --> 00:08:54.340
And, I can go figure it out myself, but why bother?

00:08:54.340 --> 00:09:03.710
I can just ask for a quick fix and it'll pop up a list of
things I can do to bring my Java back into a valid state.

00:09:03.710 --> 00:09:07.940
And I don't really want to create local
variables, oh I meant, address one.

00:09:07.940 --> 00:09:15.590
So, just two very simple examples of the way that Eclipse
is using that model to help you fix errors as soon

00:09:15.590 --> 00:09:18.580
as you make them, help you keep
them from finding in the run loop.

00:09:18.580 --> 00:09:23.440
So the only time now that you need to run
the application is to find your logic errors,

00:09:23.440 --> 00:09:28.150
errors when you weren't thinking correctly
and you programmed the wrong thing.

00:09:28.149 --> 00:09:36.049
Now, the next thing I want to look at is
the replacement for WebObjects Builder.

00:09:36.049 --> 00:09:58.639
The related view kind of takes the place of what
groups did in Xcode where it kept all your Java files,

00:09:58.639 --> 00:10:02.059
all your API files, your files all
together, it's there in the related view.

00:10:02.059 --> 00:10:03.359
So, we're going to go down here to the

00:10:03.360 --> 00:10:12.220
file, double click on that, open it up, and the first thing
you're going to notice is, oh no, there's no GUI view,

00:10:12.220 --> 00:10:20.330
and that's true, there's no wizzy wigdo, this is
strictly text mode editing, and you can see from this,

00:10:20.330 --> 00:10:27.370
it's not going to be much fun editing it because
this line goes on and on and on and on and on

00:10:27.370 --> 00:10:33.799
and WebObjects Builder kind of kept some of these things
hidden behind the way for you, it didn't show you some

00:10:33.799 --> 00:10:35.620
of the messy stuff it was creating in the background.

00:10:35.620 --> 00:10:42.389
And we're not going to want to keep editing
five feet of HTML, so we can just quickly come

00:10:42.389 --> 00:10:47.659
up here and tell it, okay, format that up.

00:10:49.480 --> 00:10:56.029
So at least now we've got a fighting
chance of being able to read what's there.

00:10:56.029 --> 00:11:02.289
Now the next thing we're going to get is we've got here,
we've got conditional three, conditional one, string 15,

00:11:02.289 --> 00:11:04.709
conditional five, this are all default names.

00:11:04.710 --> 00:11:08.129
In Web Builder, WebObjects Builder, it didn't
matter because you had a little inspector

00:11:08.129 --> 00:11:12.700
and you could see what it was, it's not going to
cut it anymore, you're not going to be able to do

00:11:12.700 --> 00:11:15.470
that in text mode, who knows what string 15 is.

00:11:15.470 --> 00:11:19.300
Now, you don't have to go through and
rename them all, it'll do that for you.

00:11:19.299 --> 00:11:24.449
So, you can come down here, do another refactoring
and say, okay, clean up those web builder names.

00:11:26.179 --> 00:11:32.799
And now, much easier to read, not has entry error, not
as confirmed shipping, page back, edit credit card info,

00:11:32.799 --> 00:11:37.969
it looks in there, it has bindings and it makes an
intelligent guess at what a reasonable name is going to be.

00:11:37.970 --> 00:11:40.990
It's not completely finished, but it will be done soon.

00:11:40.990 --> 00:11:47.340
A few more brief things I'll point out is, there's a
palette here, just like there was in WebObjects Builder,

00:11:47.340 --> 00:11:50.629
you can click and insert things into your page.

00:11:50.629 --> 00:11:58.590
You'll notice there's a whole lot of red down here, well
component editor adds something we've never had before,

00:11:58.590 --> 00:12:04.009
binding validation, and some of these old examples are
dirty, and you can see this one, it's full of dirty code,

00:12:04.009 --> 00:12:07.649
it's complaining about a lot of bad things
it's not going to let you do anymore.

00:12:07.649 --> 00:12:10.840
So, one of the impacts of this
is, when you run your application,

00:12:10.840 --> 00:12:16.300
you're not going to see component blah blah has no
key name, blah blah, or underscore blah, blah, or,

00:12:16.299 --> 00:12:19.599
you find that right there, at design
time, before you even save.

00:12:19.600 --> 00:12:24.210
That saves a lot of money, certainly a lot of time.

00:12:24.210 --> 00:12:26.680
There is full auto complete on these.

00:12:26.679 --> 00:12:31.609
Because there's so many errors here I can't really
show you in this one, but we can come up here

00:12:31.610 --> 00:12:37.740
to one that's not all messed up and, so there's
full auto complete, so instead of navigating through

00:12:37.740 --> 00:12:41.220
and dragging up, you can just auto complete through.

00:12:41.220 --> 00:12:49.540
It works for names, it works for component names,
so there's not a whole lot of stuff you have to do.

00:12:49.539 --> 00:12:53.199
Now, the last thing we're going
to look at is entity modeler,

00:12:53.200 --> 00:12:59.190
entity modeler being the replacement for EO modeler.

00:12:59.190 --> 00:13:07.750
And again, like the components in this
example, there's some dirty stuff in the model,

00:13:07.750 --> 00:13:12.070
there's a lot more model validations that you're
going to get, finding errors before you run,

00:13:12.070 --> 00:13:17.010
and it's complaining about a bunch of
things that aren't quite right in the model.

00:13:17.009 --> 00:13:24.210
So the UI is going to be pretty familiar to those of you
who have used EO modeler before, it's basically the same,

00:13:24.210 --> 00:13:32.720
pretty much the same UI, click on EO, you've got tabs
instead of instant views, same attributes, relationships,

00:13:32.720 --> 00:13:37.759
inspectors to the relationships,
it's EO modeler without the bugs.

00:13:37.759 --> 00:13:43.029
And one more thing, there's a ton of cool new
features to it, I don't have time to show you.

00:13:43.029 --> 00:13:50.029
Indexes, EOF now does indexes, EO Modeler now handles
indexes, support for multiple connection dictionaries,

00:13:50.029 --> 00:13:57.850
multiple prototype definitions, prototypes, you can switch
them live, reverse engineering with guesses to prototypes

00:13:57.850 --> 00:14:01.240
and does a pretty good job of it,
synchronizing of names as you type

00:14:01.240 --> 00:14:03.440
so you don't have to type the same name three times.

00:14:03.440 --> 00:14:06.890
It's got wizards, relationship wizard,
a many to many relationship wizard,

00:14:06.889 --> 00:14:10.279
a sub classing wizard, this keeps
coming and coming and coming.

00:14:10.279 --> 00:14:12.240
Adios EO Modeler, I won't miss you.

00:14:12.240 --> 00:14:25.070
Okay, why not migrate?

00:14:26.210 --> 00:14:30.790
Like everything, Eclipse is not perfect, it
has some parts of it that aren't so good,

00:14:30.789 --> 00:14:34.629
and those of you who are not using Eclipse
are probably familiar with the parts

00:14:34.629 --> 00:14:38.019
that are not perfect, because you don't like them.

00:14:38.019 --> 00:14:43.629
First thing people complain about is, it's slightly
slow, and certainly some version back this was true.

00:14:44.700 --> 00:14:49.920
So, going to the demo, I hope you saw, it's not really
that slow, there are a couple pauses here and there.

00:14:49.919 --> 00:14:54.779
I mean, when you were watching Mike's demo
yesterday, were you thinking, wow, that's really slow?

00:14:54.779 --> 00:14:58.220
No, probably not because he was just flipping
things around as fast as he could go.

00:14:58.220 --> 00:15:00.820
It's not a serous problem, don't worry about it.

00:15:00.820 --> 00:15:02.090
Now the big one.

00:15:02.090 --> 00:15:04.019
GUI is not OS 10, and that's true.

00:15:04.019 --> 00:15:09.289
You take a look at Eclipse and you know
there have been Apple designers involved

00:15:09.289 --> 00:15:12.659
in Eclipse, ever, that's pretty obvious.

00:15:12.659 --> 00:15:17.629
But, it's an effective UI, it's a very
functional UI, it gets things done.

00:15:17.629 --> 00:15:23.950
We're supposed to be engineers, not prima donna's, we're
supposed to care about results, getting things done,

00:15:23.950 --> 00:15:28.740
so forget about the UI, go on with
your job, get your work done.

00:15:28.740 --> 00:15:33.549
Now there's no GUI component editor and for
the way a lot of us work, this is a big,

00:15:33.549 --> 00:15:36.449
big change, there's no GUI component editor.

00:15:36.450 --> 00:15:41.980
Now, I hope you saw some of the tools there to clean up
the existing code you have, with the auto completion,

00:15:41.980 --> 00:15:45.129
when you're using rapid turnaround,
when you're using Hot Code replace,

00:15:45.129 --> 00:15:48.559
you can edit the Java too, I actually think this is better.

00:15:48.559 --> 00:15:52.239
I can do more, quicker like this then
I could in the drag and drop view.

00:15:52.240 --> 00:15:55.129
It was nice when you started out,
but it wasn't nice for very long.

00:15:55.129 --> 00:15:58.259
So, I think this better, I don't see this as an impediment.

00:15:58.259 --> 00:16:04.539
Now custom build steps, a lot of people say I've got some
special build things I'm doing, how am I going to do it?

00:16:04.539 --> 00:16:09.399
The Eclipse is ANT based, the build system is ANT based,
the easiest way to deal with this is just to take them

00:16:09.399 --> 00:16:14.529
out of wherever they are now, put them in the shell script,
put them in with the project, and just run them from ANT.

00:16:14.529 --> 00:16:18.220
It's very easy to do, it's a very
easy way to migrate the things across,

00:16:18.220 --> 00:16:20.860
it works, I think that's the way you should start.

00:16:20.860 --> 00:16:24.830
Long term, learn ANT, migrate these things
into ANT, you've got them in one place

00:16:24.830 --> 00:16:27.480
for maintenance, you've got them in one place for use.

00:16:27.480 --> 00:16:33.930
This is not an impediment to migrating,
it's just a step that you have to do.

00:16:33.929 --> 00:16:39.169
So one of the first questions that's going to come into your
mind is, I've got all these projects that are all in Xcode,

00:16:39.169 --> 00:16:42.990
or IntelliJ or whatever, I've got to get them all
into Eclipse, how long is that going to take me?

00:16:42.990 --> 00:16:45.830
I'm behind schedule, I don't have the time for this.

00:16:45.830 --> 00:16:48.050
So to try and give you some idea
of that, I took the Pet Store Demo

00:16:48.049 --> 00:16:50.659
that I showed you and I converted it into Eclipse.

00:16:50.659 --> 00:16:57.219
So, I took the projects and moved them into Eclipse, got
them built, got the errors out of them, got them running,

00:16:57.220 --> 00:17:04.910
and the time to do that was in minutes for
the two projects, thirteen to be exact.

00:17:04.910 --> 00:17:07.390
Now that might sound like a long time,
but that's a worst case scenario.

00:17:07.390 --> 00:17:09.240
I did that the slowest way I knew how.

00:17:09.240 --> 00:17:15.319
I didn't practice at all, so that's the worst case.

00:17:17.369 --> 00:17:23.409
So, how? Now the tools that I used to migrate the Pet
Store in those 13 minutes were finder and Eclipse,

00:17:23.410 --> 00:17:29.019
popped open finder, popped open Eclipse, find my Java
files, drag them over, find my EO Model, drag it over,

00:17:29.019 --> 00:17:34.339
find this drag it over, it works fine if you have one
project, it works fine if you have a small project,

00:17:34.339 --> 00:17:37.289
long term, if you've got more projects, it's not so good.

00:17:37.289 --> 00:17:38.799
So there's scripts is what I recommend.

00:17:38.799 --> 00:17:45.250
With scripts about two to three minutes I can
get those migrated over, built and running.

00:17:45.250 --> 00:17:49.670
There's a URL there, if you go there you
can find the scripts that I've been using,

00:17:49.670 --> 00:17:57.539
you can find some fairly simple steps about how to get
from Xcode, in this case, into Eclipse, there are,

00:17:57.539 --> 00:18:03.869
as I mentioned before, a lab tomorrow with Apple
Engineers, I'll be there, Mike Shrag will be there,

00:18:03.869 --> 00:18:06.769
some other people will be there to help, there's the

00:18:06.769 --> 00:18:11.129
WOLips mailing list and there is some tutorials out there.

00:18:11.130 --> 00:18:14.200
It's not that hard to migrate, you can do it.

00:18:14.200 --> 00:18:16.910
This year, now, this is the time to migrate.

00:18:16.910 --> 00:18:18.110
Go, migrate.

00:18:18.109 --> 00:18:19.339
Thank you.

00:18:19.339 --> 00:18:32.730
>> So, good morning everybody.

00:18:32.730 --> 00:18:37.890
My name's Anjo Krank, I am with Logic United,
that's a German company providing web object services

00:18:37.890 --> 00:18:43.170
and I was invited by Apple to tell you a little
bit about Direct Web and what you can do with it.

00:18:43.170 --> 00:18:48.610
As some of you may know, Direct Web is a rapid
development environment that is part of WebObjects,

00:18:48.609 --> 00:18:53.259
which in turn is part of the development
tools and it's now on your disk.

00:18:53.259 --> 00:18:59.200
It's also been known as the best keep secret of the best
kept secret because virtually no one knows about it.

00:18:59.200 --> 00:19:02.110
So, first about Project Wonder.

00:19:02.109 --> 00:19:10.329
We've been fixing WebObjects since 2001, we
have tons of fixes and utility classes and,

00:19:10.329 --> 00:19:12.500
as you have seen yesterday, we also have great

00:19:12.500 --> 00:19:15.150
Ajax support. We have more than a dozen

00:19:15.150 --> 00:19:19.680
frameworks doing all kinds of stuff you might
want to do with WebObjects, like, for example,

00:19:19.680 --> 00:19:24.390
there's an indexing framework and a
support framework for all kinds of things.

00:19:24.390 --> 00:19:29.509
We have hundreds of reusable components, you
can just plug-into your application and use

00:19:29.509 --> 00:19:40.349
and post on the WebObjects staff meeting
list where he can actually get that content.

00:19:40.349 --> 00:19:41.449
So what is Direct Web?

00:19:41.450 --> 00:19:49.340
It's, is an environment that takes your information
from you, model and creates virtual pages of these,

00:19:49.339 --> 00:19:54.109
for common tasks like list or inspect or query.

00:19:54.109 --> 00:19:59.490
It works by, you have a factory and you ask for a
special page for example, a list page for a user entity.

00:19:59.490 --> 00:20:03.200
You can provide a subclass of that
factory and provide your own logic to it.

00:20:03.200 --> 00:20:09.190
And these, the pages that get returned
from that are template pages

00:20:09.190 --> 00:20:14.769
that are configured by the so called D2W context.

00:20:14.769 --> 00:20:22.680
Now, the pages, these template pages continue to ask
this context for some information like for example,

00:20:22.680 --> 00:20:30.060
what kind of keys I'm going to display on the page.

00:20:30.059 --> 00:20:33.629
The D2W context, in turn, asks root system.

00:20:33.630 --> 00:20:42.260
And there's, there's two different ways to
configure this root system for this information.

00:20:42.259 --> 00:20:47.390
And then returns it to the D2W context,
which in turn returns it to the page.

00:20:47.390 --> 00:20:59.160
Now, this sounds very complicated and slow, but actually
it's very fast because it's cashed on multiple layers.

00:20:59.160 --> 00:21:01.529
So let me give you a brief example.

00:21:01.529 --> 00:21:06.160
Let me say the, let me assume the
D2W context has been initialized

00:21:06.160 --> 00:21:08.509
with the task equals list, and
the entity is the user entity.

00:21:08.509 --> 00:21:11.579
And the page wants to display property keys.

00:21:11.579 --> 00:21:14.009
Now, let's assume you have two rules.

00:21:14.009 --> 00:21:21.539
One is if task equals edit and entity name equals user,

00:21:21.539 --> 00:21:25.480
then the display property keys will
be name, login date and password.

00:21:25.480 --> 00:21:30.930
Because you want, would want to edit
the password on the user edit page.

00:21:30.930 --> 00:21:37.670
Now, rule number two says if the task
equals list and the entity name equals user,

00:21:37.670 --> 00:21:42.360
then the display property keys are just name and login date.

00:21:42.359 --> 00:21:47.500
So when this process runs through, rule number two wins.

00:21:47.500 --> 00:21:53.930
And the, the value is returned to the page of the
display property key is just name and login date.

00:21:53.930 --> 00:21:58.049
So what do you got to get out of it?

00:21:58.049 --> 00:22:04.240
Well, first of all, it kind of jump starts your application.

00:22:04.240 --> 00:22:14.269
You get a lot of default function out of it for free.

00:22:14.269 --> 00:22:23.299
You don't have when you're starting out, create edit
pages, list pages, all this stuff for the

00:22:23.299 --> 00:22:26.069
It's all basically done for you.

00:22:26.069 --> 00:22:28.980
And as such you get incremental delivery.

00:22:28.980 --> 00:22:34.329
I mean, you're starting out with a complete
working application and you can just refine those,

00:22:34.329 --> 00:22:40.189
the parts that you don't like or you want to extend,
either by supplying rules to configure the pages

00:22:40.190 --> 00:22:42.289
that are there or plugging your own stuff into that.

00:22:42.289 --> 00:22:43.809
It's very easy.

00:22:43.809 --> 00:22:46.369
As such you have to manage fewer assets.

00:22:46.369 --> 00:22:48.679
You don't have to write no HTML for that.

00:22:48.680 --> 00:22:53.769
You don't have to write any codes for these pages
because it's all provided by a few templates

00:22:53.769 --> 00:22:58.619
And you can, of course, as such adapt
faster to changes, to requirements.

00:22:58.619 --> 00:23:05.899
Meaning, if someone comes in and wants to add some key to
an entity and wants to display it in a half a dozen pages,

00:23:05.900 --> 00:23:08.990
it's totally easy to do that because
he'll just go into his root system,

00:23:08.990 --> 00:23:13.799
figure out which pages is, of this
thing is going to get displayed.

00:23:13.799 --> 00:23:18.659
At this key, we load your page and it's there.

00:23:18.660 --> 00:23:25.590
And I think it leads to an overall better development model
because you'll be having your business logic on the one side

00:23:25.589 --> 00:23:28.329
and tiny specialized property level components.

00:23:28.329 --> 00:23:33.079
You try to really make reusable on the other
side and Direct Web mediating between these two.

00:23:33.079 --> 00:23:35.039
It's a complete data flow.

00:23:36.849 --> 00:23:39.389
So why should you use ER Direct Web?

00:23:39.390 --> 00:23:44.080
This is the direct, the web frame from Project 1.

00:23:44.079 --> 00:23:50.500
Of course we have tons of reusable
property components for all common tasks

00:23:50.500 --> 00:23:56.000
for querying or editing or displaying strings, dates

00:23:56.000 --> 00:24:00.609
booleans, relationship as embedded lists
and what have you.

00:24:00.609 --> 00:24:07.779
We also have a lot of very cool looking, good
looking templates also, not only for the common tasks,

00:24:07.779 --> 00:24:15.839
but also for exporting to CVS, exporting
to Excel, having edited of a list pages,

00:24:15.839 --> 00:24:19.709
grouping pages, reporting stuff, compare.

00:24:19.710 --> 00:24:22.470
Really, a bunch of stuff.

00:24:22.470 --> 00:24:25.870
We also have a good concept for flow control.

00:24:25.869 --> 00:24:33.679
Meaning, that you can easily create flows
of pages which model a distance process.

00:24:33.680 --> 00:24:37.810
Let's say you start at one thing
and click on a select button.

00:24:37.809 --> 00:24:40.639
Then, the select page comes up.

00:24:40.640 --> 00:24:43.730
Then, you do some process with a
selected item which takes long.

00:24:43.730 --> 00:24:46.579
And you want to plug a progress page into that.

00:24:46.579 --> 00:24:49.539
Stuff like that is totally easy to do.

00:24:49.539 --> 00:24:54.109
Then, for the international users,
we have a great localization system,

00:24:54.109 --> 00:24:59.019
which is working basically automatically
for the English language.

00:24:59.019 --> 00:25:04.299
But for a foreign languages, you just have to work
once through the application and you get returned

00:25:04.299 --> 00:25:09.029
to dictionary just replacing the keys
or translating the values for some keys.

00:25:09.029 --> 00:25:16.470
And once you restart your application, it will
be a totally localized in this other language.

00:25:16.470 --> 00:25:19.460
And we have a concept for user preferences.

00:25:19.460 --> 00:25:27.019
Currently, we use this to store information such as the
benching size or the sought audit and the list page.

00:25:27.019 --> 00:25:29.859
You can configure that to allow that for some pages or not.

00:25:29.859 --> 00:25:34.750
You can, you could also store information
like the selected languages or what have you.

00:25:34.750 --> 00:25:36.859
It's just open to your own imagination.

00:25:36.859 --> 00:25:38.369
And we have tons of bug fixes

00:25:38.369 --> 00:25:38.769
and vastly better rule handing

00:25:38.769 --> 00:25:44.579
than the rule handling that is currently in WebObjects.

00:25:44.579 --> 00:25:48.480
So who should use Direct Web?

00:25:48.480 --> 00:25:52.750
Well, everybody, of course.

00:25:52.750 --> 00:25:57.460
In particular, if you have a small team.

00:25:57.460 --> 00:26:01.610
If you need to get a lot of stuff
done with a small amount of people.

00:26:01.609 --> 00:26:06.490
And you can do that because you wouldn't have
to, you won't have to write that much code.

00:26:06.490 --> 00:26:11.150
And you won't have to write the
entire HTML for most of the pages.

00:26:11.150 --> 00:26:20.950
Also, it's good if you have one large or one
growing project or lots of similar projects.

00:26:20.950 --> 00:26:30.029
It's important, there's, as someone has said, a
learning cliff, in which you, in which you may run.

00:26:30.029 --> 00:26:35.649
It's, you can get into that stuff,
but you have to keep on doing it.

00:26:35.650 --> 00:26:37.830
You have to, to keep on practicing it.

00:26:37.829 --> 00:26:41.799
So it's important that you actually stay with this thing.

00:26:41.799 --> 00:26:48.730
Then, you get a consistent layout for free because it's all
created by templates who can make lots of structural changes

00:26:48.730 --> 00:26:54.079
to the application in an incredibly easy manner.

00:26:54.079 --> 00:27:01.349
Also, when you have a complex project, like complex
flows, complex business processes, lots of data injury,

00:27:01.349 --> 00:27:04.399
lots of validation, you all want to do this in your model

00:27:04.400 --> 00:27:07.540
and have the interface just display
the messages that are in your model.

00:27:07.539 --> 00:27:09.700
You don't want to do that in your page.

00:27:09.700 --> 00:27:12.670
And Direct Web encourages that approach.

00:27:12.670 --> 00:27:15.410
Or if you have fast changing requirements.

00:27:15.410 --> 00:27:20.560
I mean, every five minutes someone's banging at your
door and wants some, some stuff done until yesterday.

00:27:20.559 --> 00:27:24.519
It's really easy to do that with Direct Web.

00:27:24.519 --> 00:27:27.230
So who is using that stuff?

00:27:27.230 --> 00:27:31.779
Well, this is of course, a totally uncomplete
list and I have no idea who else is using it.

00:27:31.779 --> 00:27:36.139
But I'm just going to tell you about the example
I personally, half way been involved with.

00:27:36.140 --> 00:27:37.990
First of all, there's NET Structure.

00:27:37.990 --> 00:27:46.000
This was a company who originally open sourced
the Project Wonder.

00:27:46.000 --> 00:27:50.119
And they were providing corporate real estate management.

00:27:50.119 --> 00:27:58.289
This must have been an incredibly lengthy and complex
process because their model had about 200 entities

00:27:58.289 --> 00:28:02.200
and the entire application had about 1,200 pages.

00:28:02.200 --> 00:28:05.130
This whole thing was done by five people.

00:28:05.130 --> 00:28:07.620
Well, six, six, six developers.

00:28:07.619 --> 00:28:08.939
Then, there's Logic United.

00:28:08.940 --> 00:28:12.460
We provide a, we maintain a content brokerage system.

00:28:12.460 --> 00:28:16.450
There's also lots of actors involved, like you
have people supplying different forms of content.

00:28:16.450 --> 00:28:17.559
You have different pricing.

00:28:17.559 --> 00:28:23.009
You have, then, the, the people of, of the, the
website where this stuff is going to get displayed,

00:28:23.009 --> 00:28:25.009
you make bundles of that content and so on.

00:28:25.009 --> 00:28:26.890
It's lots of configuration involved.

00:28:26.890 --> 00:28:30.590
I'm maintaining this entire backend from, by myself.

00:28:30.589 --> 00:28:33.049
It's about 150 entities right now.

00:28:33.049 --> 00:28:36.710
It's also not growing as fast as it was like a year ago.

00:28:36.710 --> 00:28:39.210
But it's also growing.

00:28:39.210 --> 00:28:43.170
And it has about 350 pages, something like that.

00:28:43.170 --> 00:28:48.009
Then, there is Merces, which ones
a product from the late David Teron,

00:28:48.009 --> 00:28:53.379
who was a committer from Project Wonder who died in 2002.

00:28:53.380 --> 00:29:01.010
And I was approached by the family to continue
this project because he had one customer, who,

00:29:01.009 --> 00:29:04.660
it was half finished and they, they needed to finish it.

00:29:04.660 --> 00:29:12.060
This project has about a 100 entities and about 150 pages
and I was able to make the decision if I even wanted,

00:29:12.059 --> 00:29:17.429
or could maintain this project in about two days
worth of time just to, to evaluate the thing

00:29:17.430 --> 00:29:26.070
and make huge structural changes to the entire
application in a very, very short amount of time.

00:29:26.069 --> 00:29:28.909
These are all kind of, sort of

00:29:28.910 --> 00:29:29.630
( inaudible )

00:29:29.630 --> 00:29:34.040
So for the ones who were on the talk
yesterday when Mike was showing off his block,

00:29:34.039 --> 00:29:37.750
if you look for Web 2.0
Solutions, this is probably not for you.

00:29:37.750 --> 00:29:41.619
But this currently isn't for the front-end.

00:29:41.619 --> 00:29:46.149
I mean, you can very well create
back-end applications with that.

00:29:46.150 --> 00:29:53.519
But a few weeks ago there was a post under WebObjects
mailing list from a company called Design Maximum.

00:29:53.519 --> 00:29:59.440
And these guys are using ER Direct
Web to produce a website, it's called,

00:29:59.440 --> 00:30:05.900
Thank you to Apple for allowing
to showcase a competitor to them.

00:30:05.900 --> 00:30:12.690
These are all direct web pages and I think you will agree
that they look nothing like the stuff you have seen before.

00:30:12.690 --> 00:30:15.559
So you can make front end applications with it.

00:30:15.559 --> 00:30:24.779
It takes some configuration and it takes some
brain work on that but obviously you can do that.

00:30:24.779 --> 00:30:30.769
Now, when I was originally invited here I
thought I would make it through a few screenshots

00:30:30.769 --> 00:30:33.450
of our backend applications or just run through it.

00:30:33.450 --> 00:30:40.500
I thought it would a better idea to actually
provide you with a working example you can get into.

00:30:40.500 --> 00:30:44.880
You can try to figure it out and configure it
yourself making changes and all that stuff.

00:30:44.880 --> 00:30:51.790
It turns out in project one since the first version
there was a back tracking application actually used at

00:30:51.789 --> 00:30:54.210
Net Structure.

00:30:54.210 --> 00:31:00.420
It's pretty simple application it had
like 15 entities and about fifty pages.

00:31:00.420 --> 00:31:07.930
It's done entirely by CSS and the entire user interface
had at the time of writing and it's grown a bit since then.

00:31:07.930 --> 00:31:10.960
It had about 800 lines of code

00:31:10.960 --> 00:31:18.890
There about eleven pages which mainly deal with specialized
reporting, about four special property level components

00:31:18.890 --> 00:31:25.690
and seven support components and needed
one week for the entire first version.

00:31:25.690 --> 00:31:34.460
So this is what happens when you are dropping the
business logic into a normal direct web application.

00:31:34.460 --> 00:31:39.630
So you get a generic navigation system like you
select the entity, then you select some actions.

00:31:39.630 --> 00:31:46.630
Then you have these graphically title
bars and graphically submit buttons.

00:31:46.630 --> 00:31:53.340
If you were at the presentation yesterday, Pierre showcased
that the direct web look has changed a little bit.

00:31:53.339 --> 00:31:56.519
Of course it looks more modernized
and it's doesn't look like 1979.
y

00:31:56.519 --> 00:32:03.450
But it is still, from a conceptual
standpoint, it's pretty much the same.

00:32:03.450 --> 00:32:06.460
The real backtracking application more looks like this.

00:32:06.460 --> 00:32:09.269
This is the homepage.

00:32:09.269 --> 00:32:15.170
It has a navigation system that is
actually that is usable and would conform

00:32:15.170 --> 00:32:18.380
to the business process of the
normal backtracking application.

00:32:18.380 --> 00:32:23.530
It has some nice features like the quick
query and the greeting things in there.

00:32:23.529 --> 00:32:31.019
On this homepage there is a normalable component
which has several embedded list pages inside of that.

00:32:31.019 --> 00:32:35.460
This list pages in turn are also direct web pages.

00:32:35.460 --> 00:32:44.930
Let me show you a little bit about the navigational system
that is in the ER extensions framework, ERX navigation.

00:32:44.930 --> 00:32:50.330
It is a three level navigational system
which is configured by a property list.

00:32:50.329 --> 00:32:55.240
It has nice access control and it is totally easy to
configure you just changing some keys in your property list

00:32:55.240 --> 00:33:01.230
and you can specify that this item
is only to be seen if the session dot

00:33:01.230 --> 00:33:04.069
is admin equals true something like that.

00:33:04.069 --> 00:33:06.869
It also has the concept of activities.

00:33:06.869 --> 00:33:15.989
Activities meaning that you have, let's a complex
navigational with dozens of iterms and various levels

00:33:15.990 --> 00:33:22.829
and you have something interesting like the user
has an unread item going on very below this tree.

00:33:22.829 --> 00:33:26.899
So if you are setting some keys in
this property list the information

00:33:26.900 --> 00:33:31.900
about there is something interesting happening
there is kind of bubbles up in the interface.

00:33:31.900 --> 00:33:38.259
Then you get something like an indicator at the
top level that the user should click on there.

00:33:38.259 --> 00:33:42.230
This is built-in, default functionality.

00:33:42.230 --> 00:33:46.150
Of course you can override and extend it by your own stuff.

00:33:46.150 --> 00:33:48.080
The entire thing is styled by CSS.

00:33:48.079 --> 00:33:51.169
It is just bunch of leads so you can make it look it was.

00:33:51.170 --> 00:33:55.470
I'm not a graphic designer so I really put
this thing together on the seat of my pants.

00:33:55.470 --> 00:34:01.630
I would have love to have some app
people taking a walk through that.

00:34:01.630 --> 00:34:07.450
This one is a query page with an embedded results list page.

00:34:07.450 --> 00:34:13.099
What is notable here is we have the titles are localized.

00:34:13.099 --> 00:34:19.880
I should have done this is English but I
could not have proven that they are localized.

00:34:19.880 --> 00:34:22.980
It means search box.

00:34:22.980 --> 00:34:30.449
The application has a neat mote where
you can, in development, some tiny mark

00:34:30.449 --> 00:34:33.239
and there's a title that pulled from the database.

00:34:33.239 --> 00:34:35.289
It's just some example of what you can do.

00:34:35.289 --> 00:34:38.119
I mean you can do vastly different things.

00:34:38.119 --> 00:34:43.670
You can change the whole thing but it is just
an example of probably what you want to do.

00:34:43.670 --> 00:34:50.260
It's nice in this part that you have
some sort of embedded content management

00:34:51.460 --> 00:34:59.470
but you can have someone else edit the title of your
page and you don't have to change the html components.

00:34:59.469 --> 00:35:05.189
This thing is also localized in modern
languages as much and is easy to do.

00:35:05.190 --> 00:35:10.880
Then the query is rather long so it's divided into sections.

00:35:10.880 --> 00:35:15.769
Each section is configured by the display
property keys and they are also very easy to do.

00:35:15.769 --> 00:35:20.329
These are stylable by CSS and you can
pretty much do what you want with it.

00:35:20.329 --> 00:35:24.779
They also have a nice feature and I didn't
get around to make an indication of it.

00:35:24.780 --> 00:35:33.590
When you click on that, I stole this idea from
Gyra, it kinds of collapses or de-collapses.

00:35:33.590 --> 00:35:42.010
And also what is in there, in the list side of the
page, in a non-direct web application there are just,

00:35:42.010 --> 00:35:48.680
you have tiny edits icon on the one side
and the delete icon on the second side.

00:35:48.679 --> 00:35:57.899
And what this is, is a sort of a collection of actions what
you can do with the current item and the list repetition.

00:35:57.900 --> 00:36:03.030
So the idea being that there's just
one class that defines the whole thing.

00:36:03.030 --> 00:36:07.510
You just have to implement some method
and automatically put in the interface

00:36:07.510 --> 00:36:10.570
and automatically plucked in the localization system.

00:36:10.570 --> 00:36:12.269
No html involved.

00:36:12.269 --> 00:36:21.250
Anyhow to get new features and new
actions into this component there.

00:36:23.130 --> 00:36:24.890
Whoops, sorry.

00:36:24.889 --> 00:36:29.420
So this is an example of an edit page.

00:36:29.420 --> 00:36:31.930
Here we have some nice features.

00:36:31.929 --> 00:36:40.500
Like, for example, when you change a value the
background cell gets highlighted indicating to the user

00:36:40.500 --> 00:36:43.090
that there is some change going on in this item.

00:36:43.090 --> 00:36:50.740
Also, we have a nice reusable component based on
tiny nice where you have rich text html component.

00:36:50.739 --> 00:36:59.119
You can copy tables from Word into this
text and get saved as html in your database.

00:36:59.119 --> 00:37:01.509
But it's all just an example of what you can do.

00:37:01.510 --> 00:37:05.160
It's totally usable but just a starting mark.

00:37:05.159 --> 00:37:09.349
Then we have, this is a screenshot from Safari.

00:37:09.349 --> 00:37:14.360
And these are not the input buttons
you normally know but button text.

00:37:14.360 --> 00:37:22.599
Button texts have the nice features that you can use CSS
on them and it really goes across browser compatible.

00:37:22.599 --> 00:37:30.409
So you could make like tiny icons on the side or
you can style the rollover and stuff like that.

00:37:30.409 --> 00:37:35.809
Normally button texts don't that work
that well on Internet Explorer on Windows.

00:37:35.809 --> 00:37:38.679
Actually each version is broken in some different ways.

00:37:38.679 --> 00:37:41.539
It's really incredible.

00:37:41.539 --> 00:37:44.889
So I've been providing some Java script magic to fix that.

00:37:44.889 --> 00:37:50.190
And now they work fine on Internet Explorer and
just the setting in your application startup

00:37:50.190 --> 00:37:54.340
to replace all the info text by these things here.

00:37:54.340 --> 00:38:01.420
They are also, as you can see, plucked into the
localization system, automatically localized for you.

00:38:01.420 --> 00:38:03.400
Now here I deleted the

00:38:03.400 --> 00:38:12.070
title and tried to save although it's the user
gets an error because the title is mandatory.

00:38:12.070 --> 00:38:15.440
We are providing several indications here for the user.

00:38:15.440 --> 00:38:23.130
One of those is the tiny what is
floppy symbol, I don't know the term.

00:38:23.130 --> 00:38:29.480
This is showing the user that the editing context on this
page, of course the user doesn't know about any context.

00:38:29.480 --> 00:38:33.530
That there are changes on the page and that he
is going to lose them if he leaves the page.

00:38:33.530 --> 00:38:38.810
This item is also styable by CSS or you
can provide your own thing in there.

00:38:38.809 --> 00:38:50.539
We also have a localized error message that is very
nice in that point; I mean title is both now here.

00:38:50.539 --> 00:38:57.190
If the entry in the model actually
wouldn't be called title but something else.

00:38:57.190 --> 00:39:03.360
Still you would see here that you should
fill out the field title which is important

00:39:03.360 --> 00:39:10.860
because otherwise the user would get confused or an
error message thrown from EOF that he should fill out

00:39:10.860 --> 00:39:11.070
field 4

00:39:11.070 --> 00:39:11.440
when

00:39:11.440 --> 00:39:11.530
field 4

00:39:11.530 --> 00:39:13.500
is not even on the page.

00:39:13.500 --> 00:39:17.840
To give him even more indication we make
some highlights just right beside it

00:39:17.840 --> 00:39:21.650
to tell him where he should fix his errors.

00:39:21.650 --> 00:39:28.280
So the backtracking application
obviously has quite a bit of features.

00:39:28.280 --> 00:39:36.120
I didn't even get around to shoe the rest of the stuff
because at some point in time I got mad and decided

00:39:36.119 --> 00:39:39.469
to put everything we had on project one into this thing.

00:39:39.469 --> 00:39:40.619
So we have a rest

00:39:40.619 --> 00:39:48.420
interface, we have a capture interface, we have the
reporting engine, the Excel export, what have you.

00:39:48.420 --> 00:39:51.740
How do we do that?

00:39:51.739 --> 00:39:56.199
How do we transform this into this?

00:39:56.199 --> 00:40:04.139
So on Sunday I was trying to give an overview of the
steps you need to create, how to create a control floor?

00:40:04.139 --> 00:40:06.009
How to link pages together?

00:40:06.010 --> 00:40:11.600
How to navigate from inside of your
pages to some other direct webpages?

00:40:11.599 --> 00:40:15.819
How to plug-into the localization
system, how to customize it?

00:40:15.820 --> 00:40:17.840
How to build your templates?

00:40:17.840 --> 00:40:19.820
How to write property level components?

00:40:19.820 --> 00:40:24.370
And a variety of tips and tricks because
you will run into trouble of course.

00:40:24.369 --> 00:40:28.569
This provides you some means to figure out what is going on.

00:40:28.570 --> 00:40:33.840
So, in closing I would like to say
again project one is all open source.

00:40:33.840 --> 00:40:35.870
We have great features and great people.

00:40:35.869 --> 00:40:41.650
Please visit us on wonder dot sf dot net and
please subscribe to the wonder mailing list.

00:40:41.650 --> 00:40:48.710
Thank you.

00:40:48.710 --> 00:40:52.429
>> And the next guest please.

00:40:52.429 --> 00:40:54.169
Oops sorry.

00:40:54.170 --> 00:41:00.639
>> Just one word.

00:41:00.639 --> 00:41:02.710
Before Benoit starts.

00:41:02.710 --> 00:41:08.960
This is a new technology that we are
working on and this is not available in Leopard

00:41:08.960 --> 00:41:14.440
This is used internally so we hope to see
that in the future version of Web Object

00:41:14.440 --> 00:41:22.289
and hope you are going to enjoy what you are going to see.

00:41:22.289 --> 00:41:23.199
>> Good morning.

00:41:23.199 --> 00:41:24.489
My name is Benoit Marchant.

00:41:24.489 --> 00:41:27.779
I am a Senior Software Engineer in the iTunes store.

00:41:27.780 --> 00:41:30.230
I work in the contact management application there.

00:41:30.230 --> 00:41:34.630
And I decided to add some AJAX
features like I'm sure a lot of you.

00:41:34.630 --> 00:41:39.180
So I started that framework and
it took about in that context.

00:41:39.179 --> 00:41:46.789
Previously I was Lead Engineer for Homepage the dot
Mac web publishing application from 2000 to 2005.

00:41:46.789 --> 00:41:49.929
And through these years, I'm not sure how
familiar each of you are with Homepage

00:41:49.929 --> 00:41:54.769
but it's a web publishing application
targeted to the end user.

00:41:54.769 --> 00:41:58.699
We tried to target people who never used the web before.

00:41:58.699 --> 00:42:01.599
It was back in 2000 it was not  as

00:42:01.599 --> 00:42:03.230
advanced as it is now.

00:42:03.230 --> 00:42:11.210
And the web was really the best way we could do
it at the time, still being in OS 9 client side.

00:42:11.210 --> 00:42:15.099
So we went there and we started to
add some Java Script features drag

00:42:15.099 --> 00:42:18.659
and roll to let you reorganize your photo albums.

00:42:18.659 --> 00:42:22.170
And it made a huge, huge difference in terms of usability.

00:42:22.170 --> 00:42:27.269
So today I would like to talk about why
I call desktop class web applications.

00:42:30.320 --> 00:42:34.110
So I'm going to explain what it is.

00:42:34.110 --> 00:42:39.010
Before we start I would like to
know how many of you were asked

00:42:39.010 --> 00:42:41.970
to add some AJAX to the application you are working on?

00:42:41.969 --> 00:42:46.309
Most people in the room.

00:42:46.309 --> 00:42:49.969
So, if you went to the talk yesterday where Mike

00:42:49.969 --> 00:42:50.589
was in

00:42:50.590 --> 00:42:54.579
project wonder that is there now.

00:42:54.579 --> 00:42:56.130
It is working well.

00:42:56.130 --> 00:43:02.809
It can be very easy to use if you take the time
to learn a little bit of framework to get there.

00:43:02.809 --> 00:43:07.949
What I'm going to talk about is more
looking ahead slightly in the future.

00:43:07.949 --> 00:43:12.379
So I'm going to get back to our desktop web
publishing applications and then I will explain ways

00:43:12.380 --> 00:43:16.780
of framework I have been working on
and what is the philosophy behind it.

00:43:16.780 --> 00:43:19.420
Finally I'll show you some sample code

00:43:19.420 --> 00:43:21.360
of how it looks like.

00:43:21.360 --> 00:43:26.460
So first of all, what is desktop
web publishing applications?

00:43:26.460 --> 00:43:33.400
It runs in a browser, it is an application and the big
thing is it should feel like a desktop application.

00:43:33.400 --> 00:43:39.180
It's not like you add some AJAX to an
otherwise pretty classical application.

00:43:39.179 --> 00:43:44.089
You really build an application using Java Script
as the cornerstone of your programming language

00:43:44.090 --> 00:43:53.039
and you use web technologies: CSS, Java Script
and XHTML to actually build the interface.

00:43:53.039 --> 00:43:56.059
So let's go back in time, 1990,

00:43:56.059 --> 00:43:56.360
Tim Berners-Lee

00:43:56.360 --> 00:43:59.430
invented the world wide web on a XCube.

00:43:59.429 --> 00:44:02.199
That is actually a screenshot of the very XCube he used.

00:44:02.199 --> 00:44:06.500
And on the very first version of his
application which was called the world wide web.

00:44:06.500 --> 00:44:12.579
In 1996, Next launched WebObjects
which is why we owe him that room.

00:44:12.579 --> 00:44:20.799
Revolutionized the field, by being first of all, the first
real objective internet application server available.

00:44:20.800 --> 00:44:26.000
Secondly because they used EOF which was available on the
desktop and bring the power to be on the web application.

00:44:26.000 --> 00:44:32.110
Third because the concept of building
web pages was built on templates not you

00:44:32.110 --> 00:44:35.820
as a developer
having to code all the HTML code yourself
in your object.

00:44:35.820 --> 00:44:47.220
So the idea is that you get requests and suddenly what
is coming by is the merge of the data in the template.

00:44:47.219 --> 00:44:51.819
In 2005, something big happened in term of industry wide.

00:44:51.820 --> 00:44:54.809
Google released Google Maps.

00:44:54.809 --> 00:45:03.340
That was a big, big awakening for the industry that suddenly
technology which was not new, had been around for awhile

00:45:03.340 --> 00:45:10.410
and suddenly Google with its clout and large visibility
released an application that was using Java Script

00:45:10.409 --> 00:45:13.759
in a very, very serious way to do very, very serious things.

00:45:13.760 --> 00:45:14.580
That scale is very

00:45:14.579 --> 00:45:17.319
wide. So people started to notice.

00:45:17.320 --> 00:45:20.030
In the very same year, Jesse Garrett

00:45:20.030 --> 00:45:20.130
from Adaptive Path

00:45:20.130 --> 00:45:33.630
coined the term AJAX which means
Asynchronous JavaScript and XML.

00:45:33.630 --> 00:45:41.860
So in AJAX the idea is to start using more on the client
side and stop relying entirely on the server for everything.

00:45:41.860 --> 00:45:48.309
So you get the first request and some of the
presentation back and from that point on the idea is

00:45:48.309 --> 00:45:51.279
to the client just ask data to the server.

00:45:51.280 --> 00:45:54.040
And that data can be returned in different forms.

00:45:54.039 --> 00:46:00.480
You can return XML or you can return JSON which
means JavaScript Object Notation which is kind

00:46:00.480 --> 00:46:04.000
of a serialization format of Java Script objects.

00:46:04.000 --> 00:46:13.380
In 2000, we'll see the idea would be to build to keep
the trend of doing even more stuff on the client side

00:46:13.380 --> 00:46:16.340
and really start building real applications.

00:46:16.340 --> 00:46:20.880
I don't know if you've checked the job
market in the field, but it is crazy.

00:46:20.880 --> 00:46:27.450
Everybody wants to do that but you're in a situation where
you want to do an application and that is really complex.

00:46:27.449 --> 00:46:31.279
So here we're talking about instead
of us serving taking care

00:46:31.280 --> 00:46:40.500
of presentation the server would just return the static
resources: HTML, Java Script files, CSS which will

00:46:40.500 --> 00:46:45.030
start the bootstrapping of your
obligation on the client side.

00:46:45.030 --> 00:46:50.900
And from that point on we're back to the point where
clients ask data and the server responds to data.

00:46:50.900 --> 00:46:55.889
The big difference is that the merging
of the data and the JavaScript, sorry,

00:46:55.889 --> 00:47:02.609
the merging of data to actually produce what
you want happens entirely on the client side.

00:47:02.610 --> 00:47:07.670
Basically you relieve the server from doing
that since there is a need growing within AJAX,

00:47:07.670 --> 00:47:13.200
which is kind of funny because the first you
return is the your server side application did most

00:47:13.199 --> 00:47:15.489
of the Java rendering that UI.

00:47:15.489 --> 00:47:18.219
Suddenly on the client side you want to retrieve data

00:47:18.219 --> 00:47:23.980
and then you don't have the same tools we
used to use to do that on the client side.

00:47:23.980 --> 00:47:26.760
So what are the benefits of doing such applications?

00:47:26.760 --> 00:47:34.320
The big one is you get the goals you had to give
back to the user a desktop class user experience.

00:47:34.320 --> 00:47:37.440
And that's really the main focus.

00:47:37.440 --> 00:47:41.269
The second huge benefit is that you get instant deployment.

00:47:41.269 --> 00:47:46.440
It's not like a Cocoa application where
you have to share, download.

00:47:46.440 --> 00:47:49.900
Everytime your clients are going to

00:47:49.900 --> 00:47:54.059
trigger the browser to hit your servers you
did all the application.

00:47:54.059 --> 00:47:56.340
The application is statefull.

00:47:56.340 --> 00:47:58.430
Your client side is the real application.

00:47:58.429 --> 00:47:59.789
The page is not going to reload.

00:47:59.789 --> 00:48:03.259
Suddenly you can start having

00:48:03.260 --> 00:48:03.400
session states

00:48:03.400 --> 00:48:07.630
being ended by the client side without
having the server to worry about it.

00:48:07.630 --> 00:48:16.039
And the server, therefore, can become leaner, more
focused on doing the data layer and become stateless.

00:48:16.039 --> 00:48:19.880
Doesn't have to be, but it's much, much more easier.

00:48:20.900 --> 00:48:28.220
So we are going to show you a demo of
what we've completed for that to show you.

00:48:28.219 --> 00:48:32.329
We are going to receive an email it's
about a monitor application about web AJAX.

00:48:32.329 --> 00:48:40.750
So we are going to receive an email saying
an instance is down and not responding.

00:48:40.750 --> 00:48:42.670
So this instance 2002.

00:48:42.670 --> 00:48:49.630
So we are going click here and enter a
small application to go in and fix it.

00:48:49.630 --> 00:48:54.420
So here we enter an application that
is formatted to run on a mobile device.

00:48:54.420 --> 00:48:57.409
Here you can see we have the navigation route.

00:48:57.409 --> 00:49:02.549
We have the size, the host, the preference
is users and we are going to click

00:49:02.550 --> 00:49:05.250
on fix me to get to the instance that was down

00:49:05.250 --> 00:49:13.110
So here is the instance and we get the picture of the
instance where we can see it stopped and then it was up.

00:49:13.110 --> 00:49:17.470
So may be it was down because the port was misconfigured.

00:49:17.469 --> 00:49:20.109
So we are going to go in and change the port.

00:49:21.769 --> 00:49:26.539
There we go.

00:49:26.539 --> 00:49:28.779
Then we have to stop and restart.

00:49:28.780 --> 00:49:32.990
There we go.

00:49:32.989 --> 00:49:35.269
And we are going to save.

00:49:35.269 --> 00:49:39.210
And let's get back to look at the operations.

00:49:39.210 --> 00:49:42.240
So let's get down to size that the application will show.

00:49:42.239 --> 00:49:46.649
The size you would manage by size you would
have release of the apps and you would click

00:49:46.650 --> 00:49:50.720
on the apps you would have all the other instances.

00:49:50.719 --> 00:49:52.069
And you have different inspectors, one is for instances

00:49:52.070 --> 00:49:57.170
We've seen that let's get back to the apps.

00:49:57.170 --> 00:49:58.400
This instance.

00:49:58.400 --> 00:49:59.849
This is

00:49:59.849 --> 00:50:01.690
for the application.

00:50:01.690 --> 00:50:09.490
So here is, from a technical standpoint, all you see
there has been created using client side components.

00:50:09.489 --> 00:50:12.799
So, basically, you take web components, the idea, you move

00:50:12.800 --> 00:50:19.269
those to the client side, and all these features, all you
see on the screen are component, so then you detail that.

00:50:19.269 --> 00:50:19.759
The column view

00:50:19.760 --> 00:50:26.620
view is a component itself which is its own JavaScript
class, its own XHTML, which is loaded dynamically.

00:50:26.619 --> 00:50:31.009
The overall application, which is the first
page you land in, is a component all by itself.

00:50:31.010 --> 00:50:34.230
You have the JavaScript class,
which again control the XHTML.

00:50:34.230 --> 00:50:35.309
Everything start with CSS.

00:50:35.309 --> 00:50:46.029
The animations use CSS as well, and all the inspectors are
as well components with their own XHTML and JavaScript.

00:50:47.050 --> 00:50:49.900
And now we're done, let's get the demo.

00:50:49.900 --> 00:50:52.030
There we go.

00:50:52.030 --> 00:50:52.860
Thank you.

00:50:52.860 --> 00:50:56.410
Let's get back to the slide.

00:51:00.929 --> 00:51:07.389
So, that sounds all fine and dandy, but if
developing desktop class web applications was easy,

00:51:07.389 --> 00:51:16.129
we would see a lot more of them, so it's not, and the reason
is that technologies we are talking about, JavaScript, HTML,

00:51:16.130 --> 00:51:23.300
CSS, were not initially designed to be on
such high level constructions as applications.

00:51:23.300 --> 00:51:26.610
And so therefore, applications are complex, we know that,

00:51:26.610 --> 00:51:32.220
and we've been doing them client-side
on the desktop for many years.

00:51:32.219 --> 00:51:36.799
The other side of developing desktop
applications involve the server.

00:51:36.800 --> 00:51:41.870
You still have to implement the server side, and Web
Objects is probably one of the best tools to do that.

00:51:41.869 --> 00:51:44.319
To me it is the best, even if we

00:51:44.320 --> 00:51:44.710
stray a bit

00:51:44.710 --> 00:51:51.679
from doing the presentation layer, we still have the amazing
layer there, and the request doing the business logic there,

00:51:51.679 --> 00:51:57.259
so that's pretty what's the service will be focused,
but you still have to integrate both together.

00:51:57.260 --> 00:51:58.530
How do you make the client

00:51:58.530 --> 00:51:59.100
talk to the server.

00:51:59.099 --> 00:52:03.219
At what point, which point in the flow do
you decide it needs to talk to the server?

00:52:03.219 --> 00:52:06.659
How do you find what change in
your graphic objects client side?

00:52:06.659 --> 00:52:12.259
All these are technical decisions that you need to
make, and there is no, there is no guideline currently.

00:52:12.260 --> 00:52:15.720
And of course, you have to use JavaScript,
DOM, and CSS.

00:52:15.719 --> 00:52:19.750
Let me take the occasion to
say that JavaScript has very bad press,

00:52:19.750 --> 00:52:24.860
and a lot of people try to hide it as much as they can.

00:52:24.860 --> 00:52:29.610
I don't want to learn that stuff, it's too
bizarre, it's not friendly, it's different.

00:52:29.610 --> 00:52:37.380
The truth is the job market is super hot in the Javascipt
land because people want to start doing much more stuff

00:52:37.380 --> 00:52:46.559
on the client side, but it used to be traditionally the
realm of web developers who are after all mainly designers

00:52:46.559 --> 00:52:46.869
who turn into html coder.

00:52:46.869 --> 00:52:52.659
We turn into an html coder, and here we're talking
about building applications which require, I mean,

00:52:52.659 --> 00:52:56.339
it doesn't require, but you're better off if
you have a software engineering background,

00:52:56.340 --> 00:53:02.519
or years of experience in doing real development,
whether desktop or server doesn't matter.

00:53:02.519 --> 00:53:07.820
But you have to have the training or the
experience to manage the complexity, and it is,

00:53:07.820 --> 00:53:10.530
I think it is time to embrace JavaScript.

00:53:10.530 --> 00:53:11.280
JavaScript is hot

00:53:11.280 --> 00:53:17.120
in the market, and the very good reason
for that is it's very fun to use.

00:53:17.119 --> 00:53:24.500
So, what I started to think, to think
about AJAX to my own project Apple, I was,

00:53:24.500 --> 00:53:30.150
if I had a wish list for framework, what would I pick?

00:53:30.150 --> 00:53:33.070
I have five years of background in Cocoa, seven in
WebObjects

00:53:33.070 --> 00:53:35.680
AJAX, what would I like?

00:53:35.679 --> 00:53:38.349
So, first of all, I would like a real

00:53:38.349 --> 00:53:38.549
object orientation in

00:53:38.550 --> 00:53:44.030
JavaScript, and by real I mean something
that is much more familiar to what I know,

00:53:44.030 --> 00:53:47.450
then the object orientation JavaScript has built in.

00:53:47.449 --> 00:53:49.139
JavaScript is object oriented.

00:53:49.139 --> 00:53:53.739
The only difference that is in everything is
prototype based compared to be class based,

00:53:53.739 --> 00:53:57.409
so basically you have to chain
objects, you have to chain instances

00:53:57.409 --> 00:53:57.449
to individual

00:53:57.449 --> 00:54:02.210
capabilities, and that's not the way
we do that in Objective C or Java.

00:54:02.210 --> 00:54:09.929
So the first thing would be have a layer that make,
that bring me back to what I know in terms of language.

00:54:09.929 --> 00:54:11.889
The other one would be familiar APIs.

00:54:11.889 --> 00:54:14.210
Like I said, I've been using Cocoa and WebObjects

00:54:14.210 --> 00:54:18.900
for many years, I have nothing against framework like

00:54:18.900 --> 00:54:20.280
Dojo, Scritaculous, Prototye

00:54:20.280 --> 00:54:25.130
but all those APIs are pretty strange to me,

00:54:25.130 --> 00:54:31.829
and a lot of them are actually pretty function
oriented, not object oriented, so not friendly.

00:54:31.829 --> 00:54:38.380
So if I had a framework where I could find stuff I
know, like I know NS arrays, and these dictionaries,

00:54:38.380 --> 00:54:42.849
notification center, web components,
stuff like that, that would be great.

00:54:42.849 --> 00:54:44.250
Client side components then.

00:54:44.250 --> 00:54:45.309
Web components.

00:54:45.309 --> 00:54:49.449
I have been using web components, you've been
using components on server side for many years.

00:54:49.449 --> 00:54:53.159
Now, if we could have the same concept
working on the client side to take care of

00:54:53.159 --> 00:54:55.269
building the UI, that'd be awesome.

00:54:55.269 --> 00:55:01.969
UI controls, well, table views, column views, that's
a given, and you need this in framework to have that,

00:55:01.969 --> 00:55:05.679
and actually most of the framework
are extremely rich in that respect.

00:55:05.679 --> 00:55:06.909
Data management.

00:55:06.909 --> 00:55:11.359
KVC, KVO, KVB, if your not familiar with this
abbreviation

00:55:11.360 --> 00:55:17.070
and what it does, so KVC's Key Value Coding,
KVO, Key Value Observing, KVB, Key Value Binding.

00:55:17.070 --> 00:55:19.980
These are all Cocoa technologies.

00:55:19.980 --> 00:55:27.829
Well, Key Value Coding was introduced by WebObjects,
but I encourage you to go check on the website, the

00:55:27.829 --> 00:55:30.090
ADC documentation to know more about that.

00:55:30.090 --> 00:55:30.980
The idea is these are

00:55:30.980 --> 00:55:37.130
tools to let your data flow through your UI controls
without having to code every time your data change.

00:55:37.130 --> 00:55:44.849
Animations are a cornerstone of any modern UI, especially
more so with Leopard, the train is irreversible now.

00:55:44.849 --> 00:55:48.309
Drag and drop, obviously, and finally
server side integration

00:55:48.309 --> 00:55:51.920
with AJAX and on server side and the client side.

00:55:51.920 --> 00:55:58.119
So, I'm going to focus on three points in that list
which are probably the most original and why I'm going

00:55:58.119 --> 00:56:02.239
to show you, and I'm going to jump
first to the client side component.

00:56:02.239 --> 00:56:08.739
So, like I said before, it's inspired from WebObjects
components, where you have not now Java class

00:56:08.739 --> 00:56:11.969
on the client side, but the Java suite
class would play the exact same role,

00:56:11.969 --> 00:56:17.219
have the same roles in controlling the
XHTML templates, and really for the,

00:56:17.219 --> 00:56:19.989
I don't know if maybe some of you in the room are not

00:56:19.989 --> 00:56:20.569
WebObjects developers.

00:56:20.570 --> 00:56:27.100
The class, the role of the class really is to
be the container of that UI, pretty much like

00:56:27.099 --> 00:56:27.279
a nib owner

00:56:27.280 --> 00:56:34.130
in Interface Builder. The topic is XHTML, and you can
obviously, if it's inspired from web components,

00:56:34.130 --> 00:56:37.320
you would assume that you can declare sub components in it,

00:56:37.320 --> 00:56:43.190
declare with the WOD syntax preferably,
and the bindings inside of the declarations

00:56:43.190 --> 00:56:49.550
uses actually the Key Value Bindings to make sure that
once your UI controls are wired, and you refresh your data

00:56:49.550 --> 00:56:53.080
through AJAX, well it just flow back into the UI.

00:56:53.079 --> 00:56:56.219
The next part is the AJAX request reference

00:56:56.219 --> 00:57:02.209
loop. So, the idea is, well, let's take a scenario,
you have an application on the client side,

00:57:02.210 --> 00:57:07.460
and your user actually changed the properties
on the object, and you clicked the save button.

00:57:07.460 --> 00:57:12.579
So, the save button would be wired to trigger
an action on your page level component

00:57:12.579 --> 00:57:14.920
which most likely would be called save action.

00:57:14.920 --> 00:57:17.050
So, your component receives save action.

00:57:17.050 --> 00:57:22.180
Save action is most likely going to have
to send back what changed to server side.

00:57:22.179 --> 00:57:29.179
So, let's assume we have the save methods in
your client side component, web component.

00:57:29.179 --> 00:57:30.980
The client would invoke

00:57:30.980 --> 00:57:34.990
a prepackage to do that which could
be called invoke remote action.

00:57:34.989 --> 00:57:36.589
So, you call invoke remote action

00:57:36.590 --> 00:57:39.100
passing name as a string.

00:57:39.099 --> 00:57:46.089
Then what would happen is invoke remote action would call
appendto request, passing a request that's been created

00:57:46.090 --> 00:57:50.900
for you, down to subgraph of the objects
that actually receive the action.

00:57:50.900 --> 00:57:56.849
And the idea is to get a chance to all the objects
involved, and one of them obviously could be a low quality

00:57:56.849 --> 00:57:58.299
sync context when you would

00:57:58.300 --> 00:58:02.240
knew the changes that you have on your
light weight EOs on the client side.

00:58:02.239 --> 00:58:07.109
To piggy back on that request that's about
to leave, all the information they have.

00:58:07.110 --> 00:58:10.610
In the same idea, you have elements, web components have

00:58:10.610 --> 00:58:11.829
a unique ID so they are identified on

00:58:11.829 --> 00:58:12.880
the other side.

00:58:12.880 --> 00:58:13.480
Same idea.

00:58:13.480 --> 00:58:19.869
Every subject would be tagged, piggy back
information, then the request is being sent,

00:58:19.869 --> 00:58:22.139
arrive on the server, where you have a more object

00:58:22.139 --> 00:58:30.829
version of tech values from request, it happens, then the
invocation, again objects are oriented to take care of the

00:58:30.829 --> 00:58:32.029
cache and stuff like that.

00:58:32.030 --> 00:58:32.690
And finally an append to response phase

00:58:32.690 --> 00:58:32.720
An append to response phase

00:58:32.719 --> 00:58:38.549
which contributes to the sub graph, which is
most likely equivalent to your client side graph,

00:58:38.550 --> 00:58:44.820
your client side object peers on the server
side, it will have to, but most of them will be

00:58:44.820 --> 00:58:44.930
in variable

00:58:44.929 --> 00:58:49.909
editing context is going to have a peer
editing context on the server side,

00:58:49.909 --> 00:58:54.480
they get a chance to piggy back some information,
so for examples, let's change a person,

00:58:54.480 --> 00:59:00.690
and I change the name on the client side, and when we
save, we find out there is a conflict, in context refresh,

00:59:00.690 --> 00:59:06.010
the conflict wasn't too bad because somebody else
changed another property like the address for example.

00:59:06.010 --> 00:59:08.190
The object is merged, saved back again.

00:59:08.190 --> 00:59:10.360
The address changed, and the response look

00:59:10.360 --> 00:59:15.710
want to send me that to my client side
object, so it would attach the new address

00:59:15.710 --> 00:59:20.059
to the client side EO to the response that's about to leave.

00:59:20.059 --> 00:59:25.659
So, when that process is done, the response arrive,
trigger a call back on the client side, and again,

00:59:25.659 --> 00:59:31.849
all sub objectives involving the sub graph will
receive a message, take value from response,

00:59:31.849 --> 00:59:38.099
basically giving them the occasion to extract from the
response that came back what might be relevant to them.

00:59:38.099 --> 00:59:41.630
Finally, you have the did invoke remote action that's called

00:59:41.630 --> 00:59:47.780
on the component actually trigger
initially and send the real request and you

00:59:47.780 --> 00:59:53.010
have completed the loop. So, now I would like to show you
some sample code.

00:59:53.010 --> 00:59:57.470
So, the first part is going to be about
the component, the JavaScript part itself.

00:59:57.469 --> 01:00:03.939
So, one of the things that we are all, we all take
for granted on the server side are dependencies.

01:00:03.940 --> 01:00:09.849
When you write code in Java or Objective-C, you
have an import function, and you can say my class inits

01:00:09.849 --> 01:00:15.630
from that class, so I need to import it, and if you use
other classes in your code, well, then you import them.

01:00:15.630 --> 01:00:18.329
Unfortunately in JavaScript there is no such thing.

01:00:18.329 --> 01:00:25.730
You have to basically put your source
JavaScript, that script tag, in your html.

01:00:25.730 --> 01:00:26.000
In an environment

01:00:26.000 --> 01:00:29.679
like Dojo, there is a combination of

01:00:29.679 --> 01:00:30.279
metas

01:00:30.280 --> 01:00:32.930
called provide and require, which

01:00:32.929 --> 01:00:33.099
implement my

01:00:33.099 --> 01:00:42.190
file and import, and I tried that first, but to my surprise,
what happens that in order to implement dependency,

01:00:42.190 --> 01:00:47.579
they actually use an XML http request
in a synchronous way, so it's blocking,

01:00:47.579 --> 01:00:53.349
and that's the way they insured
your dependency is respected.

01:00:53.349 --> 01:00:59.339
So, what I came up with is a system where
it is not synchronous, it is asynchronous.

01:00:59.340 --> 01:01:05.300
So, basically the imports are going to be executed
adding script tags dynamically to your page,

01:01:05.300 --> 01:01:11.310
and there is going to be a bunch of
code beyond the scene to track events

01:01:11.309 --> 01:01:14.269
when stuff is being loaded, triggering other things.

01:01:14.269 --> 01:01:16.280
And it just works.

01:01:16.280 --> 01:01:17.090
It's not blocking

01:01:17.090 --> 01:01:23.010
so your browser keeps working as these resources are
being done, and your html is still being passed.

01:01:23.010 --> 01:01:28.660
Other resources, images, css files being downloaded
by the browser, and that uses as much bandwidth

01:01:28.659 --> 01:01:34.440
as the browser can have, which is usually around
4, 6 requests, http requests at the same time.

01:01:34.440 --> 01:01:37.929
So here, file is about the same where you are.

01:01:37.929 --> 01:01:39.489
Imports the list of the stuff you need

01:01:39.489 --> 01:01:43.929
Then the next step is creating the class.

01:01:43.929 --> 01:01:49.109
So, I tried to come up with a syntax
that is as close as I could get

01:01:49.110 --> 01:01:53.099
to stuff we are familiar with, and
I came up with a three fold code.

01:01:53.099 --> 01:01:54.789
You have the first code which is class,

01:01:54.789 --> 01:01:55.059
upper case C

01:01:55.059 --> 01:01:57.099
C because class work is reserved.

01:01:57.099 --> 01:02:01.420
You pass the name of the class you want to create.

01:02:01.420 --> 01:02:02.470
You chain an extends call,

01:02:02.469 --> 01:02:06.659
that's the name of the superclass you want to

01:02:06.659 --> 01:02:09.629
init from, and implements, you really pass implementation.

01:02:09.630 --> 01:02:13.269
It's not like a Java interface implements, and you pass

01:02:13.269 --> 01:02:14.530
JavaScript

01:02:14.530 --> 01:02:20.540
object, where you have encased the IVARS names, or
the meta names if these, if the values are functions,

01:02:20.539 --> 01:02:25.139
so here we have an album, setter for an album, setter for,

01:02:25.139 --> 01:02:33.400
album, the instance variable initialized in there, and
you can, well, let me get back, and you have also a super,

01:02:33.400 --> 01:02:41.590
so I provide a super meta to let you be object oriented in a
way again, you're used to using more traditional languages.

01:02:41.590 --> 01:02:43.190
Super doesn't exist in JavaScript.

01:02:43.190 --> 01:02:49.599
You can do it by hand to some extent, but when you
start narrating with more labels, you start to get iffy.

01:02:49.599 --> 01:02:52.659
So that super meta data go up the chain of

01:02:52.659 --> 01:02:55.519
init instances
and involve the right method for you.

01:02:55.519 --> 01:03:02.070
And finally, you can do class methods
by predicting with static.

01:03:02.070 --> 01:03:03.470
You can do category as well.

01:03:03.469 --> 01:03:04.379
The same syntax.

01:03:04.380 --> 01:03:06.150
You just keep the

01:03:06.150 --> 01:03:10.780
initerates, you take a class, it's going to return one if it
exists instead of creating one, and you can pass implements,

01:03:10.780 --> 01:03:14.200
and that way with a syntax I can add the objected

01:03:14.199 --> 01:03:18.319
index method to the array object, which is in

01:03:18.320 --> 01:03:22.269
native JavaScript to make it more friendly.

01:03:22.269 --> 01:03:26.269
So, let's move to the component parts.

01:03:26.269 --> 01:03:27.579
Sorry, the template parts.

01:03:27.579 --> 01:03:32.179
So, that's an XHTML, totally standards for now.

01:03:32.179 --> 01:03:40.259
You can import stuff like you would do in html, so that's
a link to a css file, that's packaged with my components.

01:03:40.260 --> 01:03:43.660
That's going to be the way I want to style it.

01:03:43.659 --> 01:03:48.119
This is a script tag to declare
the package of my own application,

01:03:48.119 --> 01:03:52.980
and to link the JavaScript file inside the page.

01:03:52.980 --> 01:03:54.119
Next is declarations.

01:03:54.119 --> 01:03:58.980
So, I told you we're using the same
declaration from WebOjects, I was not kidding.

01:03:58.980 --> 01:04:03.900
That's a script tag with the different types, text
declaration so that the browser's not going to try

01:04:03.900 --> 01:04:09.910
to evaluate that, but it's a very convenient container,
and here you can see I declare two subcomponents.

01:04:09.909 --> 01:04:12.869
One is artistURL, it's a hyperlink, like a

01:04:12.869 --> 01:04:14.639
WO hyperlink
hyperlink, with an HREF

01:04:14.639 --> 01:04:17.659
HREF which is bonded to a key path, and

01:04:17.659 --> 01:04:24.759
artist name is a string, again, bonded to my album that
artist name came from.

01:04:24.760 --> 01:04:25.810
So, in the

01:04:25.809 --> 01:04:30.650
the mapping here between these components,
and where they happen is the name.

01:04:30.650 --> 01:04:31.840
So, here you see atistURL

01:04:31.840 --> 01:04:33.460
you will find DOM elements,

01:04:33.460 --> 01:04:36.079
sorry, a tag in the page with artistURL

01:04:36.079 --> 01:04:44.400
and you will find a tag with the ID artist name,
and these are most likely dynamic elements.

01:04:44.400 --> 01:04:47.470
The same is true for component label.

01:04:47.469 --> 01:04:51.049
The inspector you've seen in the
demo, they were component label,

01:04:51.050 --> 01:04:58.380
and all the fields you are seeing were using input tags,
were using strings to be dynamic in the exact same way.

01:04:58.380 --> 01:05:02.840
And that's it.

01:05:02.840 --> 01:05:13.230
So, again, to conclude, I think that the time is pretty
close where all this technology we have on the client side,

01:05:13.230 --> 01:05:18.070
which again, we know we're not meant
to do that, are going in that direction.

01:05:18.070 --> 01:05:24.360
I mean, there is a train in a way that is not stoppable.

01:05:24.360 --> 01:05:30.050
Everybody's doing that, everybody wants to do it,
the tools are not perfect, they are pretty good.

01:05:30.050 --> 01:05:31.320
I mean, they're getting better.

01:05:31.320 --> 01:05:34.420
You have a larger and larger choice.

01:05:34.420 --> 01:05:35.950
Every week on Ajaxian.com, I don't know

01:05:35.949 --> 01:05:42.159
if many of you read that website, but there
are also one or two new frameworks every month.

01:05:42.159 --> 01:05:50.259
So, I mean, there is an explosion of people working
that field, and as far as I can tell in my experience,

01:05:50.260 --> 01:05:58.040
pushing the envelope further, doing real applications, there
are not many tools available which lets you provide the level

01:05:58.039 --> 01:06:01.070
of structure you are accustomed to use on the server

01:06:01.070 --> 01:06:01.170
( inaudible )

01:06:01.170 --> 01:06:06.659
in WebObjects, or on the desktop with Cocoa, to
actually raise the bar and save you work

01:06:06.659 --> 01:06:09.569
to actually do these kind of applications.

01:06:09.570 --> 01:06:12.640
Thank you, and I'm going to pass the microphone to Pierre.