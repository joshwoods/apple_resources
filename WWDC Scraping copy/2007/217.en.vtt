WEBVTT

00:00:16.230 --> 00:00:20.710
>> Good afternoon and welcome to
Unlocking the Potential of Dashcode.

00:00:20.710 --> 00:00:22.140
I'm Phil Schuler.

00:00:22.140 --> 00:00:25.699
And before we get going, I have just a couple of questions.

00:00:25.699 --> 00:00:33.509
Just a show of hands, how many out there had a chance to
download and get their hands on the Dashcode beta for Tiger?

00:00:33.509 --> 00:00:34.960
Oh, that's good.

00:00:34.960 --> 00:00:40.509
And how many of you have had a
chance to mess around with Dashcode

00:00:40.509 --> 00:00:43.309
in the Leopard beta you've had for a couple of days?

00:00:43.310 --> 00:00:47.179
Oh, some people have had some quality laptop time I see.

00:00:47.179 --> 00:00:53.299
So, what do we mean when we say
unlocking the potential of Dashcode?

00:00:53.299 --> 00:00:57.209
What we mean is making customization pay off.

00:00:57.210 --> 00:01:03.060
So, taking custom art, a little bit of custom code,
and in fact a surprisingly small amount of it,

00:01:03.060 --> 00:01:10.120
and turning a template into a unique expression of your
brand and what it is you want to accomplish in your widget.

00:01:10.120 --> 00:01:14.969
But then also we're talking about some
very powerful features in Dashcode.

00:01:14.969 --> 00:01:20.510
The debugger for instance which you may have
seen if you've seen some other sessions here.

00:01:20.510 --> 00:01:24.380
We're gonna show you a little bit more
and how it's not just for debugging.

00:01:24.379 --> 00:01:27.739
We're also going to show you some
glitz and glamour techniques,

00:01:27.739 --> 00:01:32.619
how you can make some widgets that are fun and easy to use.

00:01:32.620 --> 00:01:39.850
And we're going to show you the Dashcode localization
workflow which is so easy to use we're betting you're going

00:01:39.849 --> 00:01:42.919
to want to localize all of your widgets from now on.

00:01:42.920 --> 00:01:47.490
So I'm going to get things going with
a very easy little demonstration just

00:01:47.489 --> 00:01:51.019
to get our brains up and running a little bit after lunch.

00:01:51.019 --> 00:01:58.170
What I'm going to do is I am going to take an RSS template,
I'm going to make a new widget and I'm going to turn it

00:01:58.170 --> 00:02:02.420
into a widget that feeds up two different feeds.

00:02:02.420 --> 00:02:03.510
Pretty simple.

00:02:03.510 --> 00:02:05.180
Now, how am I going to do that?

00:02:05.180 --> 00:02:07.730
I'm going to brand the widget.

00:02:07.730 --> 00:02:16.629
I work for a little company called Apple and I'm going
to use Apple feeds and I'm going to use Apple artwork

00:02:16.629 --> 00:02:23.930
to make it look like it's a widget that maybe even
Steve would approve of, although I wouldn't bet on that.

00:02:23.930 --> 00:02:29.569
I'm going to add parts from the Dashcode
library to extend the UI and that's very simple.

00:02:29.569 --> 00:02:30.780
I'll show you how to do that.

00:02:30.780 --> 00:02:36.020
Just a tiny bit of coding which is all you want
me to do because I'm no Java script expert.

00:02:36.020 --> 00:02:42.040
But that's good because I'm going to show
you how easy it is to do, even for me.

00:02:42.039 --> 00:02:48.439
I'm going to run the widget in Dashcode and we're all
going to burst into spontaneous applause when we see

00:02:48.439 --> 00:02:51.359
that I've done what I said I was going to do.

00:02:51.360 --> 00:02:54.000
Let's go to the demo machine.

00:02:55.539 --> 00:03:01.719
Before we launch into Dashcode I just wanted to
show you what it is we're dealing with content wise.

00:03:01.719 --> 00:03:05.469
So there are two feeds in particular
that I'm interested in from Apple.

00:03:05.469 --> 00:03:12.680
The iTunes Top 10 Songs, which is what you
see before you, and the Top 10's Album feed.

00:03:12.680 --> 00:03:17.140
Now as to look and feel, maybe some
of you are familiar with this look.

00:03:17.139 --> 00:03:19.879
It just happens to be plastered all over the world.

00:03:19.879 --> 00:03:25.199
So that's basically the look I'm going
for and I'm going to use these two feeds.

00:03:25.199 --> 00:03:26.969
So, let's get going.

00:03:26.969 --> 00:03:33.030
I'm going to launch Dashcode and pick the RSS template.

00:03:33.030 --> 00:03:35.870
Easy as that, I'm up and running.

00:03:35.870 --> 00:03:47.530
And just so we can see what it is I'm doing, I'll make this
nice and big, kind of bigger than you'd want a widget to be,

00:03:47.530 --> 00:03:52.669
but just sort of big enough so
that we can get a feel for it.

00:03:52.669 --> 00:04:00.949
Now, like so many templates, the RSS template allows
you to just drop a URL onto it to set the feed source.

00:04:00.949 --> 00:04:02.239
So that's how I'm going to get going.

00:04:02.240 --> 00:04:10.570
I'm going to take the top ten songs feed, I'm just going
to grab it out of Safari and drop it onto my widget.

00:04:10.569 --> 00:04:13.060
If I rename this...

00:04:15.810 --> 00:04:19.470
iTunes Top Ten Songs, that's pretty much it.

00:04:19.470 --> 00:04:27.550
If I want to ship a stock looking widget with one feed, I'm
practically done, but that's not what you came here to see,

00:04:27.550 --> 00:04:31.189
so we're going to go in and do a little customization.

00:04:31.189 --> 00:04:33.480
Now, as I said, I want to customize the look.

00:04:33.480 --> 00:04:40.120
And I'm a UI guy so I like to work from the outside in
and get the interface right first before I do a code.

00:04:40.120 --> 00:04:41.759
Dashcode allows you to work both ways.

00:04:41.759 --> 00:04:42.779
It doesn't really matter.

00:04:42.779 --> 00:04:45.109
I just prefer to work this way.

00:04:45.110 --> 00:04:48.170
So, I know I want the look to change.

00:04:48.170 --> 00:04:51.980
So this header and footer really aren't of much use to me.

00:04:51.980 --> 00:04:54.900
I'm just going to get rid of them.

00:04:54.899 --> 00:05:00.539
And what I'm going to replace them with is
a little bit of art that I did in Photoshop.

00:05:00.540 --> 00:05:05.220
So if you have a little bit of Photoshop skills
or know somebody who does, easy enough to do.

00:05:05.220 --> 00:05:10.580
I'm just going to drag both of these pieces
of art in and place them where I want them.

00:05:10.579 --> 00:05:15.879
So you can see that I used the
theme from the iTunes commercial

00:05:15.879 --> 00:05:21.389
to get a particular look and that's pretty much it.

00:05:21.389 --> 00:05:24.269
So it's obscured some other content on my widget.

00:05:24.269 --> 00:05:28.169
All I need to do is grab those two
elements, and I can do that over here

00:05:28.170 --> 00:05:31.790
in the navigator, and I'm going to drag them underneath.

00:05:31.790 --> 00:05:33.350
So now I've branded my widget.

00:05:33.350 --> 00:05:36.330
It's an expression of my brand.

00:05:36.329 --> 00:05:38.300
Steve's brand.

00:05:38.300 --> 00:05:44.530
Sorry. So again, if I just wanted to ship a
single feed widget that had my brand in it,

00:05:44.529 --> 00:05:47.549
I'm just about done, but you didn't come to see that either.

00:05:47.550 --> 00:05:53.319
You may not have come to see any of this,
but, I'm going to show you something anyway.

00:05:53.319 --> 00:05:57.189
What I want to do is allow the users
of my widget to switch the feed.

00:05:57.189 --> 00:06:01.329
So right now they're seeing songs
if they just ran this widget,

00:06:01.329 --> 00:06:05.300
so I want to give them an affordance
to switch to the albums feed.

00:06:05.300 --> 00:06:07.520
So they're going to need a button to click on.

00:06:07.519 --> 00:06:18.939
And the way I can add that is just bring up the library
in Dashcode, in the parts tab, which is coming soon,

00:06:18.939 --> 00:06:24.839
we have a whole lot of parts that you can
add to your widget to extend the interface.

00:06:24.839 --> 00:06:27.879
They're really easy to work with
and provide a lot of functionality.

00:06:27.879 --> 00:06:29.409
I want to add a button.

00:06:29.410 --> 00:06:32.540
In fact, I want to grab this one, the lozenge button.

00:06:32.540 --> 00:06:36.879
All I need to do is drag it onto
my widget and there, it's in place.

00:06:36.879 --> 00:06:37.939
Size it a little bit...

00:06:37.939 --> 00:06:38.839
Rename it.

00:06:38.839 --> 00:06:43.079
So now it's an albums button.

00:06:43.079 --> 00:06:46.430
It's kind of sticking out like a sore thumb.

00:06:46.430 --> 00:06:48.860
So I can style it a little bit.

00:06:48.860 --> 00:06:56.389
Bring up the Inspector and in the fill and stroke Inspector,
right here, I can do things like change it to a gradient,

00:06:56.389 --> 00:06:59.849
I can add some glass to it, some fairly common things.

00:06:59.850 --> 00:07:06.570
I'm going to make these little semi-transparent which is
a nice little design trick to make it look like it's sort

00:07:06.569 --> 00:07:10.409
of built of the same stuff of the thing that it's on top of.

00:07:10.410 --> 00:07:12.920
And so now I've got a button, great!

00:07:12.920 --> 00:07:14.210
What does it do?

00:07:14.209 --> 00:07:16.849
Nothing. I haven't wired it up yet.

00:07:16.850 --> 00:07:19.050
But that's easy enough to do too.

00:07:19.050 --> 00:07:21.699
And the way I do that is in the Inspector again.

00:07:21.699 --> 00:07:29.990
I can select the albums button, bring up the
Inspector, and go to the last tab, the Behaviors tab.

00:07:29.990 --> 00:07:38.100
Now the Behaviors tab lets me wire up all of the events
that this object listens to, to handlers in my code.

00:07:38.100 --> 00:07:42.310
So all I need to do is double click in
the Handlers and I can start typing.

00:07:42.310 --> 00:07:45.769
And you can see it autocompletes for me.

00:07:45.769 --> 00:07:50.529
So if I already have a function written, I
can just wire it up very simply like this.

00:07:50.529 --> 00:07:57.909
But I want to actually create a new handler so
all I need to do is type in a new handler name.

00:07:57.910 --> 00:07:59.160
Now what just happened?

00:07:59.160 --> 00:08:02.200
Well, Dashcode created a new function for me.

00:08:02.199 --> 00:08:08.990
It took the name I gave it and made a new function, stubbed
it in, opened the code to show me where it was putting it

00:08:08.990 --> 00:08:13.069
and left me a little place to insert my code.

00:08:13.069 --> 00:08:18.500
Now, like I said, I'm not much of a coder and you sure
don't want to watch me mistype this again and again.

00:08:18.500 --> 00:08:24.790
So I'm going to show you another nice bit of functionality
in the library, and that's the Code Snippets Library.

00:08:24.790 --> 00:08:28.879
Dashcode comes with a whole bunch
of code snippets that help you

00:08:28.879 --> 00:08:32.970
out with some pretty common things
that you want to do in Java script.

00:08:32.970 --> 00:08:35.149
It also allows you to save your own.

00:08:35.149 --> 00:08:35.949
That's what I did.

00:08:35.950 --> 00:08:39.890
I prepared these snippets a while ago and
I just saved them back into the library.

00:08:39.889 --> 00:08:43.600
So now I can reuse them by dragging them back.

00:08:43.600 --> 00:08:48.440
So I'm just gonna drag this back
and let's see what we have here.

00:08:48.440 --> 00:08:58.300
I'm now setting the feed source which I
should tell you why I'm setting it that.

00:08:58.299 --> 00:09:00.259
How about this for a demo?

00:09:00.259 --> 00:09:04.009
Now, why am I calling Set Feed Source?

00:09:04.009 --> 00:09:06.460
Well, I happen to know how this widget works.

00:09:06.460 --> 00:09:08.950
But I'm gonna show you how you might understand it too.

00:09:08.950 --> 00:09:16.470
So I'm going to go up to the search field and type
feed, because we're dealing with feeds, right?

00:09:16.470 --> 00:09:25.340
So, the search field in Dashcode lets me search
throughout my widget project to find elements, code,

00:09:25.340 --> 00:09:29.910
styles, all kinds of things that I can use.

00:09:29.909 --> 00:09:36.629
and you'll see that when I search for feed,
it found objects, events, functions, styles,

00:09:36.629 --> 00:09:41.379
end files and even the line numbers
where these surfer results appeared.

00:09:41.379 --> 00:09:45.990
And here's the one I've already blown my cool reveal of,

00:09:45.990 --> 00:09:47.250
Set Feed Source.

00:09:47.250 --> 00:09:51.129
That's the one that I need to wire up to.

00:09:51.129 --> 00:09:52.870
And that's exactly what I'm doing.

00:09:52.870 --> 00:10:01.000
So let me go back to my function and we can see
that what I'm doing is I'm calling Set Feed Source.

00:10:01.000 --> 00:10:06.500
So I'm passing it in the URL of the
albums feed instead of the songs feed.

00:10:06.500 --> 00:10:10.639
And I know that because it says Top Albums right there.

00:10:10.639 --> 00:10:16.439
And then I'm doing a refresh feed so that
I know that the content is up to date.

00:10:16.440 --> 00:10:21.780
There's one more thing I need to do and that is
the title of this widget is Top Ten Songs so I know

00:10:21.779 --> 00:10:25.559
that when the user switches to albums I
need to switch the title of the widget too.

00:10:25.559 --> 00:10:27.329
And that's easy enough to do.

00:10:27.330 --> 00:10:32.500
I also have a code snippet for that.

00:10:32.500 --> 00:10:40.450
And what I'm doing here is I'm using our old
friend Get Element by ID, the Feed Title.

00:10:40.450 --> 00:10:46.570
And that element, the Feed Title, is this
element and I know that again because I can look

00:10:46.570 --> 00:10:50.050
in the Navigator and see that that's its name.

00:10:50.049 --> 00:10:57.629
And I'm setting its inner HTML, in other words,
the text inside of it, to be Top Ten Albums.

00:10:57.629 --> 00:11:00.509
So, hey, I'm pretty close to being done.

00:11:00.509 --> 00:11:05.480
I now have a widget that gets the songs feed
and lets the user switch the albums feed.

00:11:05.480 --> 00:11:10.080
But they may want to switch back.

00:11:10.080 --> 00:11:12.060
Darn users!

00:11:12.059 --> 00:11:15.239
So, I can do that just like I did before.

00:11:15.240 --> 00:11:18.590
I want to work from the UI in again.

00:11:18.590 --> 00:11:29.259
So all I'm going to do now is I'm just going to duplicate
this button, Command D, and let's rename this to Songs.

00:11:29.259 --> 00:11:36.529
Now it's still wired up to the albums feed
handler and I don't want that so I want

00:11:36.529 --> 00:11:42.529
to wire this up to another one, Songs Feed.

00:11:42.529 --> 00:11:50.000
So, again, just like with Albums Feed, Dashcode made
anew function for me and took me there in the code view

00:11:50.000 --> 00:11:54.879
and all I need to do is add some code, which,
again I'm not going to make you watch me type.

00:11:54.879 --> 00:11:57.759
And this will look pretty familiar to you by now.

00:11:57.759 --> 00:12:01.600
I'm setting the Feed Source, this time to songs.

00:12:01.600 --> 00:12:05.389
I'm refreshing the feed, and I'm setting the Feed Title too.

00:12:05.389 --> 00:12:12.580
So now, if the demo gods are with
me, I will have a working widget.

00:12:12.580 --> 00:12:14.180
Let's see if I'm wrong.

00:12:14.179 --> 00:12:15.509
Here it is loading.

00:12:15.509 --> 00:12:16.250
We've got songs!

00:12:16.250 --> 00:12:17.629
We're almost there.

00:12:17.629 --> 00:12:20.379
Top Ten Songs and Top Ten Albums!

00:12:20.379 --> 00:12:20.700
There! All right!

00:12:20.700 --> 00:12:30.129
Can we go back to slides please?

00:12:35.480 --> 00:12:37.580
Okay, well, what'd you just learn?

00:12:37.580 --> 00:12:39.960
I'm not the best demoer in the world.

00:12:39.960 --> 00:12:43.810
But, you learned that custom art pays off, right?

00:12:43.809 --> 00:12:46.239
So a little bit of art goes a long way.

00:12:46.240 --> 00:12:51.990
What you want to do with your widgets is express your brand
to your users so they know it's your widget and they know

00:12:51.990 --> 00:12:55.470
to go to you for more widgets in the future.

00:12:55.470 --> 00:12:58.320
Parts make customization very easy.

00:12:58.320 --> 00:13:02.910
You saw how easy it was to just drag
a button out, style it, wire it up.

00:13:02.909 --> 00:13:04.689
Boom! I'm done.

00:13:04.690 --> 00:13:07.310
And clicking buttons is a lot of fun.

00:13:07.309 --> 00:13:12.819
So, we're not going to stop there though
because that was a fairly lame demo.

00:13:12.820 --> 00:13:16.600
What we're going to do now is we're
going to show you so more in-depth stuff.

00:13:16.600 --> 00:13:18.950
We're going to write our own code from scratch.

00:13:18.950 --> 00:13:25.920
We're going to interact with feeds but not just RSS feeds
because RSS is pretty prevalent out there but there's a lot

00:13:25.919 --> 00:13:28.639
of other data out there that you might need to work with.

00:13:28.639 --> 00:13:35.199
We're going to show you how to interact with those
feeds and learn how they work so that you can parse them

00:13:35.200 --> 00:13:38.540
in your widget and extract the data out of them.

00:13:38.539 --> 00:13:44.179
We're also going to take this project and we're
going to iterate through the design steps.

00:13:44.179 --> 00:13:47.500
So we're going to start out with something
very simple and we're going to move along

00:13:47.500 --> 00:13:50.090
until we get something that's fairly fun.

00:13:50.090 --> 00:13:54.160
And we're going to show you, of
course, how Dashcode makes that easy.

00:13:54.159 --> 00:13:57.429
Here's the set up.

00:13:57.429 --> 00:14:02.469
When my stock portfolio is up I'm happy.

00:14:02.470 --> 00:14:03.950
My mood is good.

00:14:03.950 --> 00:14:07.970
When my stock portfolio is down, my mood is bad.

00:14:07.970 --> 00:14:11.170
So, you know, it doesn't get a lot simpler than that.

00:14:11.169 --> 00:14:15.099
So I thought well, what would be a good way to express that?

00:14:15.100 --> 00:14:21.110
Well, what came to mind immediately is the
glass is half full or it isn't half full.

00:14:21.110 --> 00:14:22.470
But that's what I want.

00:14:22.470 --> 00:14:32.040
I want a widget that looks at my stock portfolio, figures
out how I'm doing and then tells me what my mood is.

00:14:32.039 --> 00:14:34.089
It's either half full or half empty.

00:14:34.090 --> 00:14:42.290
Now, as I told you, I'm not much of a coder, so what
I did, I did the sensible thing and that is I got one

00:14:42.289 --> 00:14:44.620
of my engineer friends to help me with it.

00:14:44.620 --> 00:14:53.379
And to tell you all about that is Mike Kahl, engineer
extraordinaire and master of the Dashcode debugger.

00:14:53.379 --> 00:15:00.639
Mike!

00:15:04.919 --> 00:15:07.969
>> Thanks Max.

00:15:07.970 --> 00:15:14.629
My name's Mike Kahl and I work on the Dashcode JavaScript
debugger which I'll be showing you in a few minutes.

00:15:14.629 --> 00:15:19.939
Max has asked me to help us get started
on this money mood widget which is going

00:15:19.940 --> 00:15:24.320
to display our mood based on how
our stock portfolio is doing.

00:15:24.320 --> 00:15:26.180
Now, I'm not much of a UI guy.

00:15:26.179 --> 00:15:32.229
I'm here to do the behind the scenes work of this widget, so
we're just going to use that graphic of a glass that we got

00:15:32.230 --> 00:15:36.320
from Max and if our stocks are doing
well the glass will seem half full

00:15:36.320 --> 00:15:40.360
and if our stocks are doing poorly
then glass will seem half empty.

00:15:40.360 --> 00:15:44.500
So, let's get started.

00:15:44.500 --> 00:15:48.179
This widget follows a common design pattern for widgets.

00:15:48.179 --> 00:15:55.729
We go out to the Web, we request some data, the
data arrives and we load it up into our widget.

00:15:55.730 --> 00:16:02.539
Now for this widget, the data is available
from a feed provided by Yahoo Finance.

00:16:02.539 --> 00:16:07.740
You tell it which stocks you're interested in and
it gives you the information about that stock.

00:16:07.740 --> 00:16:14.019
And the JavaScript object that we're going to use
to retrieve that data is called XML HTTP Request.

00:16:14.019 --> 00:16:22.549
As the name implies, XML HTTP Request is usually
used to fetch data that is in XML format.

00:16:22.549 --> 00:16:24.179
But that's not required.

00:16:24.179 --> 00:16:26.259
It can fetch data that's in any format.

00:16:26.259 --> 00:16:29.259
And this particular data is not in XML format.

00:16:29.259 --> 00:16:33.669
So we're going to have to figure
out how to parse it ourselves.

00:16:33.669 --> 00:16:41.079
Then we'll process the data, crunch it down to
just one number representing our mood and finally,

00:16:41.080 --> 00:16:48.389
we'll present some initially simple
UI to display the result.

00:16:48.389 --> 00:16:51.819
Okay, let's write some code.

00:16:53.090 --> 00:16:58.410
We begin by creating our XML HTTP Request object.

00:16:58.409 --> 00:17:04.839
Ultimately, we're going to send that object
out onto the Web to retrieve our data.

00:17:04.839 --> 00:17:10.329
First we have to tell it where to go to find
the data and we're going to disable caching

00:17:10.329 --> 00:17:14.539
because we don't want stale data,
we want up to the minute data or,

00:17:14.539 --> 00:17:18.740
in the case of stocks, up to the twenty minute delay data.

00:17:18.740 --> 00:17:21.730
Now, there's one more thing we have to do.

00:17:21.730 --> 00:17:26.299
When we request this data, it's going to
take a few milliseconds for it to arrive

00:17:26.299 --> 00:17:31.289
and even though that's not a long time from a
programming point of view, that's an asynchronous event

00:17:31.289 --> 00:17:34.329
so we have to specify a call back function.

00:17:34.329 --> 00:17:38.809
And this function will be called
to notify us when the data arrives.

00:17:38.809 --> 00:17:44.960
Our call back function just checks that the request
completed successfully and calls another function,

00:17:44.960 --> 00:17:48.789
Data Ready, which looks something like this.

00:17:48.789 --> 00:17:52.960
Remember our three P's - Parse, Process, Present?

00:17:52.960 --> 00:17:58.120
We're going to parse the feed, process
the data and present the results.

00:17:58.119 --> 00:18:00.159
Now, we haven't seen this data yet.

00:18:00.160 --> 00:18:03.570
So we don't know exactly how to write a parsing code.

00:18:03.569 --> 00:18:12.809
But a good goal would be to create an array of stocks with
one entry with information about each stock in our portfolio

00:18:12.809 --> 00:18:17.750
and then we can pass that array to
a function to calculate our mood.

00:18:17.750 --> 00:18:23.690
And once we've got our mood as a number, we
can call another function to display the UI.

00:18:23.690 --> 00:18:24.809
All right.

00:18:24.809 --> 00:18:29.179
So we're ready to run this code even
though we haven't finished writing it.

00:18:29.180 --> 00:18:34.490
It would be a good idea to test what we
have so far and also, more importantly,

00:18:34.490 --> 00:18:40.900
we're going to use Dashcode's debugger
to inspect this feed live and experiment

00:18:40.900 --> 00:18:44.350
and figure out how to write the parsing code.

00:18:44.349 --> 00:18:52.029
So, let's go to the demo.

00:18:52.029 --> 00:18:55.930
Okay, so here's our widget.

00:18:55.930 --> 00:18:58.370
I've already done a little bit of work on it.

00:18:58.369 --> 00:19:06.279
I've incorporated the graphic of a glass that I got from
Max and I typed in this code that we just saw in the slides.

00:19:06.279 --> 00:19:14.200
I took the XML HTTP Request set up code and I
wrapped it in a function called Request Data,

00:19:14.200 --> 00:19:17.360
and down here is our Data Ready function.

00:19:17.359 --> 00:19:21.649
So, there's a few things that we do have
to do before we're ready to run this code.

00:19:21.650 --> 00:19:30.060
First of all, this is obviously not the real URL, so
let's get rid of that and I'm going to drag in the code

00:19:30.059 --> 00:19:37.279
to construct the real URL as a function
of which stocks are in our portfolio.

00:19:37.279 --> 00:19:40.599
Now, where is that coming from?

00:19:40.599 --> 00:19:46.409
How does the widget know which stocks are in our portfolio?

00:19:46.410 --> 00:19:56.040
Well, ultimately, this widget will have a back and we'll
be able to configure our portfolio of each stock we have.

00:19:56.039 --> 00:20:01.409
But, for getting started, let's just hard wire that.

00:20:01.410 --> 00:20:03.800
So I'm going to drag in some more code.

00:20:03.799 --> 00:20:10.809
By the way, every time I drag in code just please
pretend that I'm a very fast and accurate typist.

00:20:12.029 --> 00:20:18.619
So we'll start with the initial portfolio with
100 shares of Apple and just five shares of Google

00:20:18.619 --> 00:20:20.369
because that's all the Google we can afford.

00:20:20.369 --> 00:20:24.209
Okay, so we're ready to run the widget.

00:20:24.210 --> 00:20:30.079
I'm going to set a break point here at the
entry to this data ready function so that

00:20:30.079 --> 00:20:35.129
when the data arrives we can take a look, and click run.

00:20:35.130 --> 00:20:40.690
Up comes the widget and nothing happens.

00:20:40.690 --> 00:20:42.289
What did we do wrong?

00:20:42.289 --> 00:20:44.769
Well, we did forget to do one thing.

00:20:44.769 --> 00:20:49.019
We never actually called that request
data function that we wrote.

00:20:49.019 --> 00:20:52.420
So we never asked for the data, no data arrived.

00:20:52.420 --> 00:20:59.590
We could stop the widget, insert that
code, start over, but we don't have to.

00:20:59.589 --> 00:21:05.769
We can use Dashcode's evaluator
which is a live JavaScript console.

00:21:05.769 --> 00:21:14.579
Allows us to type in anything in JavaScript and
have it evaluated so we can do it on the fly.

00:21:14.579 --> 00:21:19.470
And, just in that fraction of a second, it
went out to the Web, it requested the data,

00:21:19.470 --> 00:21:22.390
the data came back and we hit our break point.

00:21:22.390 --> 00:21:25.210
So now the widget is paused at this break point.

00:21:25.210 --> 00:21:28.059
Here's the line of code that's about to be executed.

00:21:28.059 --> 00:21:34.730
Up here we have the local variables that
are visible in this frame and their values.

00:21:34.730 --> 00:21:40.049
We can single step and a value got
assigned to this variable called data.

00:21:40.049 --> 00:21:42.759
And that's our feed.

00:21:42.759 --> 00:21:45.569
So let's take a closer look at that.

00:21:45.569 --> 00:21:47.480
We'll go back to the Evaluator.

00:21:47.480 --> 00:21:57.299
Now what we need to do here is figure out how to take
this big long string and extract from it the information

00:21:57.299 --> 00:22:00.259
that we need in order to calculate our mood.

00:22:00.259 --> 00:22:08.059
So, it looks like we've got multiple lines in that
string, one line for each stock that we requested.

00:22:08.059 --> 00:22:15.500
So the first step would be to split it up into lines
and I'm going to use carriage return, new line,

00:22:15.500 --> 00:22:19.980
as a separator because I noticed that these lines
actually end in a carriage return as well as a new line.

00:22:19.980 --> 00:22:24.839
And that gives us an array of three elements.

00:22:24.839 --> 00:22:26.250
Well, why three elements?

00:22:26.250 --> 00:22:28.559
There are only two stocks.

00:22:28.559 --> 00:22:31.190
Well, let's take a look.

00:22:31.190 --> 00:22:33.880
The first element is the first line.

00:22:35.529 --> 00:22:37.279
The second element is the second line.

00:22:37.279 --> 00:22:40.089
Well, what's the third element?

00:22:40.089 --> 00:22:41.750
It's the empty string.

00:22:41.750 --> 00:22:43.109
Why do we have an empty string?

00:22:43.109 --> 00:22:50.349
Well, that empty string is the one that follows the
final carriage return new line in our original string.

00:22:50.349 --> 00:22:54.490
So it's an artifact of the way the split function works.

00:22:54.490 --> 00:23:00.900
But that's okay, we can still use the split function but
we just need to make a mental note when we write the code,

00:23:00.900 --> 00:23:04.420
if we see any empty strings we should just ignore them.

00:23:04.420 --> 00:23:10.320
Okay, now I want to show you another
way we could have done what we just did.

00:23:10.319 --> 00:23:24.009
Instead of looking at each element that we write
individually, we could have created a local variable

00:23:24.009 --> 00:23:29.339
on the fly here in the Evaluator, to hold that array.

00:23:29.339 --> 00:23:35.480
Now, as I enter this, watch up here with the
variables and you'll see a new variable being created.

00:23:35.480 --> 00:23:38.880
There it is, it's called lines and
it's an array of three elements

00:23:38.880 --> 00:23:41.490
and we can twist it down and see all the strings at once.

00:23:41.490 --> 00:23:45.470
All right, so let's move on.

00:23:45.470 --> 00:23:51.110
Now we need to look inside each line
and extract the fields for that stock.

00:23:51.109 --> 00:23:54.079
And let's use that same technique.

00:23:54.079 --> 00:24:03.730
We'll create a variable called fields and we'll use
the Apple line and it looks like this data is separated

00:24:03.730 --> 00:24:08.250
by commas, so this time let's split on comma.

00:24:08.250 --> 00:24:12.039
And if we look up here, that gave us
a new local variable called fields.

00:24:12.039 --> 00:24:14.059
It's an array of nine elements.

00:24:14.059 --> 00:24:18.470
We can twist it down and we can see all of the fields.

00:24:18.470 --> 00:24:26.009
There's the ticker symbol, the current
price, down here is the daily delta,

00:24:26.009 --> 00:24:29.940
the difference between the current
price and yesterday's close.

00:24:29.940 --> 00:24:34.900
And the other values in this array, we don't
really care about for the purpose of this widget.

00:24:34.900 --> 00:24:38.100
We're just going to concentrate on those three.

00:24:38.099 --> 00:24:41.139
Now, each of these three fields needs a little bit

00:24:41.140 --> 00:24:45.440
of massaging before it's really
exactly in the format that we want.

00:24:45.440 --> 00:24:51.870
For example, this ticker symbol has some
extraneous quotes in it that we don't want.

00:24:51.869 --> 00:24:56.719
So let's see if we can figure out
how to get rid of those quotes.

00:24:56.720 --> 00:25:01.110
Let's try replacing those quotes with the empty string.

00:25:01.109 --> 00:25:02.769
That'll be our first try.

00:25:02.769 --> 00:25:04.349
And it doesn't quite work.

00:25:04.349 --> 00:25:06.529
It only removed the first quote.

00:25:06.529 --> 00:25:08.910
We need to remove all the quotes.

00:25:08.910 --> 00:25:11.580
So let's try again.

00:25:11.579 --> 00:25:15.730
This time, let's use a regular expression
because that gives us the opportunity

00:25:15.730 --> 00:25:19.079
to specify that we want to replace globally.

00:25:19.079 --> 00:25:21.369
And that worked.

00:25:21.369 --> 00:25:29.729
So now, by experimenting in the Evaluator, we have figured
out how to write the code that will extract that field.

00:25:29.730 --> 00:25:33.650
Now let's look at our other two fields.

00:25:33.650 --> 00:25:35.780
These are numeric fields.

00:25:35.779 --> 00:25:38.789
But actually that's not a number, that's a string.

00:25:38.789 --> 00:25:43.000
And we need it to be a number because we're
going to be performing arithmetic on it.

00:25:43.000 --> 00:25:45.890
So let me share with you a little JavaScript tip.

00:25:45.890 --> 00:25:50.880
the quickest way to convert a string to a number is to use

00:25:50.880 --> 00:25:51.510
( inaudible )

00:25:51.509 --> 00:25:53.970
plus. As you see now, now it's a number.

00:25:53.970 --> 00:26:01.700
So at this point we have gathered all the
information that we need to write the parsing code.

00:26:01.700 --> 00:26:09.990
Let's stop the widget, go back to our source
code and I'm going to drag in the parsing code.

00:26:09.990 --> 00:26:11.420
Pretend I'm typing!

00:26:11.420 --> 00:26:18.090
This code is pretty much what we just
figured out how to do in the Evaluator.

00:26:18.089 --> 00:26:26.259
We start by splitting on carriage return and line feed,
that gives us an array of lines, we loop to the lines.

00:26:26.259 --> 00:26:29.920
If a line is an empty string, then we skip it.

00:26:29.920 --> 00:26:32.940
We only process the lines that are really there.

00:26:32.940 --> 00:26:39.059
We split on comma and then for each line we create an object

00:26:39.059 --> 00:26:43.549
with three properties corresponding to
the three fields that we care about.

00:26:43.549 --> 00:26:47.319
And using those expressions that
we figured out in the Evaluator

00:26:47.319 --> 00:26:51.329
to suitably massage those fields into what we want.

00:26:51.329 --> 00:26:57.949
Then we accumulate that object into an array of stocks.

00:26:57.950 --> 00:27:05.759
Set a break point here following the loop so that we can
inspect it and let me get rid of this other break point.

00:27:05.759 --> 00:27:08.170
And we'll do one more thing before we run the widget.

00:27:08.170 --> 00:27:13.380
I want to go and insert that call to
request data that we left out the first time

00:27:13.380 --> 00:27:15.880
so that we don't have to simulate it again.

00:27:15.880 --> 00:27:19.910
I'm going to put it here in the show method.

00:27:19.910 --> 00:27:22.400
Click run.

00:27:22.400 --> 00:27:27.930
Up comes the widget, hits our break point and you
can see here we have our local variable, stocks,

00:27:27.930 --> 00:27:35.769
it's an array of two elements, we can twist it down,
we can inspect the contents and everything looks right.

00:27:35.769 --> 00:27:37.289
No extraneous quotes.

00:27:37.289 --> 00:27:41.579
The numbers are numbers, we did it right.

00:27:41.579 --> 00:27:47.500
So the only thing that's left is to write these
functions, calculate mood, and display mood.

00:27:47.500 --> 00:27:53.150
I've already written them, let me drag
them in and show you what they do.

00:27:53.150 --> 00:27:54.900
It's very simple.

00:27:54.900 --> 00:27:57.680
Calculate mood is just doing some arithmetic.

00:27:57.680 --> 00:28:03.799
It computes the total value of our
portfolio both now and as of close yesterday

00:28:03.799 --> 00:28:09.779
and returns a number representing the percentage change.

00:28:09.779 --> 00:28:16.740
And if that was a positive number, that means
that the value of our portfolio increased

00:28:16.740 --> 00:28:22.029
and so the glass is half full,
otherwise the glass is half empty.

00:28:22.029 --> 00:28:25.619
So let's remove this break point and test our widget.

00:28:25.619 --> 00:28:28.519
There it goes.

00:28:28.519 --> 00:28:31.039
The glass is half empty.

00:28:31.039 --> 00:28:33.789
Now I'm in a bad mood.

00:28:35.670 --> 00:28:40.410
So, for testing purposes, we'd
like to see the glass be half full.

00:28:40.410 --> 00:28:41.279
So how can we do that?

00:28:41.279 --> 00:28:45.910
Remember I said there was going to be a back to
this widget where you can configure your portfolio?

00:28:45.910 --> 00:28:50.850
Well, while you weren't looking I actually implemented that.

00:28:50.849 --> 00:28:55.099
So here it is and let's try some different stocks.

00:28:55.099 --> 00:29:00.849
Let's get rid of that loser Apple stock.

00:29:00.849 --> 00:29:02.919
What if we invested instead in Adobe?

00:29:02.920 --> 00:29:07.090
Wow! That's not enough.

00:29:07.089 --> 00:29:13.759
Maybe we have to invest in more Adobe.

00:29:13.759 --> 00:29:15.789
I don't know.

00:29:15.789 --> 00:29:19.339
Didn't Adobe go up today?

00:29:19.339 --> 00:29:33.889
Now the glass will be half full.

00:29:33.890 --> 00:29:39.820
So back to slides.

00:29:39.819 --> 00:29:44.929
So we've seen how to implement
a common widget design pattern.

00:29:44.930 --> 00:29:51.660
We used XML HTTP Request to go out onto the
Web, ask for some data, when the data arrives,

00:29:51.660 --> 00:29:56.040
we load it up into our widget following the three P's.

00:29:56.039 --> 00:30:01.920
We've also seen some of the features
of Dashcode's JavaScript debugger.

00:30:01.920 --> 00:30:08.789
The debugger is not just good for tracking down bugs, it
also has some tools that will help you to figure out how

00:30:08.789 --> 00:30:14.109
to write your code correctly in the first place.

00:30:14.109 --> 00:30:20.759
Well, now that we've got our widget working,
the next step is going to be to improve the UI.

00:30:20.759 --> 00:30:27.650
So for that, I'd like to introduce my
colleague Hau Mingh Ohm, take it away Hau Mingh.

00:30:27.650 --> 00:30:33.180
>> Hi there.

00:30:33.180 --> 00:30:38.039
My name is Hau Mingh Ohm, same old
Dashcode engineer from last year's session.

00:30:38.039 --> 00:30:43.889
Now we've seen how a widget developer like Mike could make
use of Dashcode's incredibly powerful debugging environment

00:30:43.890 --> 00:30:47.090
to write a widget with robust functionality.

00:30:47.089 --> 00:30:50.449
But you and I know for your users to want to

00:30:50.450 --> 00:30:53.309
crave for your widget, it's going to have to possess.

00:30:53.309 --> 00:30:57.829
So in this part of the session, we're going
to see how you can make use of Dashcode

00:30:57.829 --> 00:31:01.779
to add some of the glamour to your widget.

00:31:01.779 --> 00:31:05.470
And using Dashcode, it is simple to go the extra amount.

00:31:05.470 --> 00:31:13.500
The big piece of the puzzle to jazz up your UI is this
wonderful parts technology that we're putting into Dashcode.

00:31:13.500 --> 00:31:17.569
We're going to make use of one of them in the demo.

00:31:17.569 --> 00:31:22.149
Let's have a look at Version 2.0 of the UI.

00:31:22.150 --> 00:31:25.800
So, instead of showing that the glass
is half full when the mood is good,

00:31:25.799 --> 00:31:29.849
we're going to show a huge smiley when you're happy.

00:31:29.849 --> 00:31:35.789
So to do that we're going to make use
of this symbol part from the library.

00:31:35.789 --> 00:31:38.079
This is the symbol indicator part.

00:31:38.079 --> 00:31:41.699
Now if you go to the library there
are other kind of parts like the

00:31:41.700 --> 00:31:45.400
guage part which is the indicator part but
it has a range associated with it.

00:31:45.400 --> 00:31:47.410
This is the simple one.

00:31:47.410 --> 00:31:50.019
The concept behind this one is pretty easy.

00:31:50.019 --> 00:31:52.139
You have one value you are monitoring.

00:31:52.140 --> 00:31:58.960
And when that value which is set at a point, you want to
show the user, visually, that you have reached a state.

00:31:58.960 --> 00:32:10.460
And there's four states and you use this API, set
value, to change the state by setting it to a new value.

00:32:13.569 --> 00:32:18.189
Let's go to the demo machine please.

00:32:18.190 --> 00:32:25.880
Okay. This is the widget that you saw earlier on.

00:32:25.880 --> 00:32:32.020
Since I'm going to change the UI, I'll start by deleting the

00:32:32.019 --> 00:32:35.440
glass image text and the front image.

00:32:35.440 --> 00:32:42.320
And then I'm going to set it to be 500 pixels by 500 pixels .

00:32:42.319 --> 00:32:50.279
The next thing I'm going to do, I'm going to drag in
the indicator part that I talked about earlier on.

00:32:52.049 --> 00:32:52.690
There you go.

00:32:52.690 --> 00:33:00.900
I'm just going to eyeball it to the size that I want.

00:33:02.599 --> 00:33:08.599
Okay. Now if you go to the attributes inspector pane,

00:33:08.599 --> 00:33:12.240
here is where we check out the indicator
part or other parts that you drag in.

00:33:12.240 --> 00:33:15.370
Let's take a look at the images.

00:33:15.369 --> 00:33:20.129
I know some of you out there actually make use of
this for default traffic light images as the

00:33:20.130 --> 00:33:23.250
UI for your widget. Now if it looks right for your
widget, that's fine.

00:33:23.250 --> 00:33:28.400
Obviously we're going to change them
to smileys so let's start doing that.

00:33:28.400 --> 00:33:42.090
First, we're going to drag into our
widget project and once it's there,

00:33:42.089 --> 00:33:50.129
I'm going to make use of the first
state to be the downloading state.

00:33:50.130 --> 00:33:59.870
And the second state to be the indifferent state, the
fourth one to be the angry state and the fifth one

00:33:59.869 --> 00:34:02.969
to be the static state when you're really, really happy.

00:34:02.970 --> 00:34:09.780
And if you flip over to the values tab you will see
the four values that correspond to these four states.

00:34:09.780 --> 00:34:12.760
We're going to make use of them in the code.

00:34:12.760 --> 00:34:17.820
Now usually while in the front, you do
want to take care of your info button.

00:34:17.820 --> 00:34:19.240
You can make it visible.

00:34:19.239 --> 00:34:23.859
It's always fun and challenging
to put where your info button is.

00:34:23.860 --> 00:34:28.390
Here I want to make it into a nose.

00:34:28.389 --> 00:34:29.929
Now we are ready to call up the UI.

00:34:29.929 --> 00:34:35.969
Let's go to the file that you saw earlier on.

00:34:35.969 --> 00:34:39.899
And I'm going to drag in my own code snippets.

00:34:39.900 --> 00:34:44.780
So these are the three values that define the state.

00:34:44.780 --> 00:34:49.250
Zero being the default so we don't have to define it.

00:34:49.250 --> 00:34:51.530
Go to the function that we saw earlier on.

00:34:51.530 --> 00:34:56.670
Again, we want to delete this since we're changing it.

00:34:56.670 --> 00:35:00.880
And drag in my own body.

00:35:02.210 --> 00:35:08.199
This part here just maps the percentage
change to the stated value.

00:35:08.199 --> 00:35:10.339
So if the stock is less than,

00:35:10.340 --> 00:35:15.110
went down more than 0.5 percent,
half a percent, then we're mad.

00:35:15.110 --> 00:35:20.530
If it goes up by 0.5 percent we're
happy, anything else, we don't care.

00:35:20.530 --> 00:35:26.269
The second part here, get hold of the
indicator object and do something to it.

00:35:26.269 --> 00:35:30.789
As with other Apple supply classes, when
you need to get hold of the object you want

00:35:30.789 --> 00:35:36.739
to manipulate, get hold of the application right here.

00:35:36.739 --> 00:35:39.959
Once you get hold of the indicator, you can set value API.

00:35:39.960 --> 00:35:45.659
Now, for other parts, if you want to know what other
API you can use, you can read the documentation

00:35:45.659 --> 00:35:50.949
but probably most of you wouldn't, so here's a trick.

00:35:50.949 --> 00:35:54.159
Go to the code library, just search the part that you want.

00:35:54.159 --> 00:35:57.019
In this case, for example, indicator.

00:35:57.019 --> 00:36:05.509
And often times you'll find something that probably was so
unique, set indicator value, and there you go, set value.

00:36:05.510 --> 00:36:07.130
Okay, so we are ready to run it.

00:36:07.130 --> 00:36:08.500
Let's test it!

00:36:08.500 --> 00:36:09.289
It's thinking.

00:36:09.289 --> 00:36:15.219
Okay, I know what it is going to
be, mad, so but you probably ?

00:36:15.219 --> 00:36:23.369
most of you probably don't invest in
this company, but some of you might.

00:36:23.369 --> 00:36:28.730
So let's buy a boat load of it.

00:36:28.730 --> 00:36:32.300
So I guess Bill is pretty happy today.

00:36:32.300 --> 00:36:33.180
All right.

00:36:33.179 --> 00:36:39.219
Let's go back to the slides please.

00:36:39.219 --> 00:36:46.399
Thank you.

00:36:46.400 --> 00:36:50.930
Okay, what you've just learned is that even after
you have come up with the basic functionality

00:36:50.929 --> 00:36:58.019
of the widget using Dashcode, it is not difficult to
change the UI and experiment a little bit with it.

00:36:58.019 --> 00:37:02.780
And check out the parts library to see if
that's anything that can help you with your UI.

00:37:02.780 --> 00:37:10.230
Don't forget that you can actually customize
the parts itself by using inspector panes.

00:37:10.230 --> 00:37:14.760
Okay, there are other ways to make your
widgets even more visually appealing.

00:37:14.760 --> 00:37:18.350
For example, you can use core graphics operations on the

00:37:18.349 --> 00:37:24.429
canvas object. Other ways to take advantage of the
cool Apple technology known as Quartz composition.

00:37:24.429 --> 00:37:28.359
We're going to take a QC which is modifiable via JavaScript

00:37:28.360 --> 00:37:32.480
and then use the Apple Animator
to feed values directly to the QC.

00:37:32.480 --> 00:37:37.110
Again, let's have a look at Version 3.0 of the UI.

00:37:37.110 --> 00:37:40.870
Same basic functionality but we're
not happy with the smilies anymore,

00:37:40.869 --> 00:37:44.230
we want to have a wheel of fortune to tell us our mood.

00:37:44.230 --> 00:37:47.969
And this wheel of fortune is the QC.

00:37:47.969 --> 00:37:56.839
The thing about a QC is if you're a QC designer, you can
expose certain parameters in the QC by publishing them

00:37:56.840 --> 00:38:00.710
so that it can be modified by using JavaScript.

00:38:00.710 --> 00:38:06.300
Now this is actually a very powerful concept that
bridges between JavaScript and quartz composition.

00:38:06.300 --> 00:38:08.690
The way they do it is pretty straight forward.

00:38:08.690 --> 00:38:13.119
Use the regular get element by the API.

00:38:13.119 --> 00:38:16.920
Once you get hold of the element, use the set value API.

00:38:16.920 --> 00:38:23.590
Here we're assuming that the published
parameter is called property.

00:38:23.590 --> 00:38:29.190
Okay, for those not familiar with the
Apple animator class, here is a review.

00:38:29.190 --> 00:38:30.159
Now, as the new cliche

00:38:30.159 --> 00:38:33.279
goes, an animation is worth more than ten thousand words.

00:38:33.280 --> 00:38:37.120
So I'm going to use an animation to explain it.

00:38:37.119 --> 00:38:46.730
The Apple animator takes the duration of the animation, maps
it to a range of value, start and you the widget developer,

00:38:46.730 --> 00:38:55.550
provides a function handler so that at each interval
of the animation, the animator will call you back.

00:38:55.550 --> 00:39:02.050
And when it calls you back it gives you a new
value that is dependent on where the animator is

00:39:02.050 --> 00:39:05.260
and that is visible along the range of values.

00:39:05.260 --> 00:39:13.010
In API form, here's the API with the parameters
reflecting the five concepts that we talked about.

00:39:13.010 --> 00:39:17.340
Now, Apple animator does the heavy lifting
of driving the animation but you get

00:39:17.340 --> 00:39:19.440
to decide how the animation should happen.

00:39:19.440 --> 00:39:28.720
So for our case, the new value represents the degree of
the wheel to turn to so we just feed it directly to the QC.

00:39:28.719 --> 00:39:31.449
Demo time, okay.

00:39:31.449 --> 00:39:40.730
So let's look at the previous widget.

00:39:40.730 --> 00:39:48.409
Okay, we're going to start by deleting
dedicator because we don't need it.

00:39:48.409 --> 00:39:51.099
And let's drag in the wheel of fortune.

00:39:51.099 --> 00:39:59.860
First thing we want to do is, for our case, set it to
transparent and let it show below all the drawn elements.

00:39:59.860 --> 00:40:03.340
Again, eyeballing to resize it.

00:40:03.340 --> 00:40:12.070
Okay. Let's take care of the info button again.

00:40:12.070 --> 00:40:15.120
Because spinning the wheel is so much
fun I'm going to spin it manually.

00:40:15.119 --> 00:40:20.139
So here I'm going to use a button to do that.

00:40:22.130 --> 00:40:25.380
So let's drag it in.

00:40:25.380 --> 00:40:35.849
And let's quickly harmonize the color by going to the even
stroke and making it gradient, choosing a few choice colors.

00:40:35.849 --> 00:40:37.339
Give it a stroke.

00:40:37.340 --> 00:40:43.500
And I'm going to call it spin the wheel.

00:40:43.500 --> 00:40:46.769
Here we go.

00:40:46.769 --> 00:40:50.679
And let's make the type bigger so they can see it.

00:40:50.679 --> 00:40:53.629
All right, we're all set.

00:40:53.630 --> 00:41:01.950
But you've seen how we have to hook
up the function for the unclick event.

00:41:01.949 --> 00:41:08.299
And you've seen this function before, it's
request data, so I'm just going to type it in.

00:41:08.300 --> 00:41:11.800
All right, at this point we are
now ready to hook up the new UI.

00:41:11.800 --> 00:41:18.450
Let's do that.

00:41:18.449 --> 00:41:24.649
So we don't need this anymore, steal it back.

00:41:24.650 --> 00:41:29.269
Let's go to Version 3 of our code snippets.

00:41:29.269 --> 00:41:33.259
These are the values that my QC
designer told me that correspond

00:41:33.260 --> 00:41:38.940
to the segment of the wheel that I want to turn to.

00:41:38.940 --> 00:41:41.039
And let's go to display mode.

00:41:41.039 --> 00:41:46.929
I'm going to keep this chunk of code,
okay, because it's still useful.

00:41:46.929 --> 00:41:54.629
All I need to do is delete this and
drag in our create animation code.

00:41:54.630 --> 00:41:57.140
This is the important one, the animation handler.

00:41:57.139 --> 00:42:05.909
So here we get a new value and set it to
the rotation as I mentioned earlier on.

00:42:05.909 --> 00:42:11.319
Now, make sure that a QC has actually
exposed rotation as the published parameter.

00:42:11.320 --> 00:42:12.450
Here's the trick.

00:42:12.449 --> 00:42:16.169
You select the QC, put it in Inspector, attributes pane,

00:42:16.170 --> 00:42:21.170
hit the added parameters button and
you'll see that rotation is there.

00:42:21.170 --> 00:42:26.409
Okay? Now, let's run it.

00:42:26.409 --> 00:42:32.579
But I know it's you know, we're not going
to be too happy because it's the same.

00:42:32.579 --> 00:42:38.989
So is there any stock ticker today that will make me happy?

00:42:38.989 --> 00:42:42.139
Anyone? Intel!

00:42:42.139 --> 00:42:44.690
Okay, our partner.

00:42:44.690 --> 00:42:54.510
INTC? Oh way, first I have to get
rid of something here because...

00:42:54.510 --> 00:43:02.670
All right, let's spin it again.

00:43:02.670 --> 00:43:05.230
There you go!

00:43:05.230 --> 00:43:05.539
All right.

00:43:05.539 --> 00:43:30.039
Okay. Now notice that we went from a binary state of UI
like half full/half empty to one with multiple states.

00:43:30.039 --> 00:43:38.000
So the lesson here is that you should experiment and evolve
your UI until you find something that not only pleases you

00:43:38.000 --> 00:43:42.849
but the one important thing is that your
widget users will use it, they will love it.

00:43:42.849 --> 00:43:49.529
And if you need to add motion graphics to
your widget, consider course composition.

00:43:49.530 --> 00:43:55.880
Apple Animator Plus, when used judiciously,
will definitely add more spice to your widget.

00:43:55.880 --> 00:44:04.500
And finally to wrap up the rest of the UI,
please check your default image and widget icon.

00:44:04.500 --> 00:44:09.369
Dashcode does a good job in tracking them
based on the front slide of the image.

00:44:09.369 --> 00:44:14.329
But because each widget is different, so just
take a look at them and make sure they look right.

00:44:14.329 --> 00:44:22.250
And because strings and majors are part of UI, you want
to make sure that they look good in other languages.

00:44:22.250 --> 00:44:23.440
Now that's localization.