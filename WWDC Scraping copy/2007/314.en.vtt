WEBVTT

00:00:20.000 --> 00:00:25.030
>> Welcome to Session 314 at WWDC 2007.

00:00:25.030 --> 00:00:29.450
Our session today is Project-Free Xcode
and Mixed Language Development.

00:00:29.449 --> 00:00:33.390
I'm Chris Hanson, and running demos
today is going to be Norbert Schatz.

00:00:33.390 --> 00:00:37.090
We are Developer Tools Engineers working on Xcode.

00:00:38.280 --> 00:00:40.520
So what are we going to talk about today?

00:00:40.520 --> 00:00:42.660
What's the whole point of this session?

00:00:42.659 --> 00:00:47.479
Well, Xcode is a really, really great
Mac OS X development environment.

00:00:47.479 --> 00:00:53.549
And historically Xcode has been targeted specifically
at developing native applications for Mac OS X.

00:00:53.549 --> 00:00:58.359
Developing applications, plug-ins,
and so on for Mac OS X technologies,

00:00:58.359 --> 00:01:02.619
and the Mac OS X overall technology architecture.

00:01:02.619 --> 00:01:08.609
But there's a lot of people that come to Mac OS X
because it has such a great user experience,

00:01:08.609 --> 00:01:16.730
because it has such a great development experience,
that still want to use their existing infrastructure.

00:01:16.730 --> 00:01:21.880
They have all sorts of projects using all sorts of
different infrastructure, and we don't necessarily want

00:01:21.879 --> 00:01:25.839
to force them in to the Xcode project mold.

00:01:27.489 --> 00:01:32.049
So specifically what we're talking
about is community development.

00:01:32.049 --> 00:01:35.539
This might be development with all of the
different scripting languages that have come out,

00:01:35.540 --> 00:01:40.520
from Shell scripts, to Perl scripts, to Python and Ruby.

00:01:40.519 --> 00:01:46.039
It might involve Java development,
and targeting the Java platform.

00:01:46.040 --> 00:01:51.190
It typically involved open source
development, although not always.

00:01:51.189 --> 00:01:57.459
That would be development targeting, say,
auto conf, configure, make, and so on.

00:01:57.459 --> 00:02:05.509
It even covers non-open source,
traditional UNIX style development.

00:02:05.510 --> 00:02:10.780
There are a lot of people with very large code bases that
are built for traditional UNIXs that are really drawn

00:02:10.780 --> 00:02:16.199
to Mac OS X because of the strength of the
user and developer experience on the platform,

00:02:16.199 --> 00:02:22.139
that still have these large code
bases, but they want to use on Mac OS X.

00:02:22.139 --> 00:02:34.439
So what we're going to cover is how the Xcode
Organizer works, and how you'll work with it

00:02:34.439 --> 00:02:37.250
to enable all of this kind of development.

00:02:37.250 --> 00:02:44.210
How you can create your own templates for the Organizer,
and put actions in them that you can use with that template

00:02:44.210 --> 00:02:48.240
to enhance the Organizer so it
can build your kinds of projects.

00:02:48.240 --> 00:02:53.250
And specifically, what the Organizer can do
for you in different types of development,

00:02:53.250 --> 00:02:59.280
specifically in native Mac OS X development, because
it adds some value there too, plus build-free

00:02:59.280 --> 00:03:06.629
and scripting development, and community
development built around external build systems.

00:03:06.629 --> 00:03:11.819
So let's dive right in, and start talking
about how the Organizer can help you

00:03:11.819 --> 00:03:16.150
when you're working with native Mac OS X projects.

00:03:16.150 --> 00:03:21.069
Now a native Mac OS X project is one
that you're going to build something

00:03:21.069 --> 00:03:24.810
with that you're going to deploy to Mac OS X users.

00:03:24.810 --> 00:03:28.229
And these projects are going to be
using Mac OS X native technologies.

00:03:28.229 --> 00:03:33.829
Technologies like Carbon, Cocoa, they might
be applications, they might be plug-ins,

00:03:33.830 --> 00:03:37.500
they might be enhancements to our
pro applications, and so on.

00:03:37.500 --> 00:03:42.620
Typically you'll be using native tools
along with Xcode to work on these projects.

00:03:42.620 --> 00:03:47.670
You'll be using tools like Interface Builder and X-Ray.

00:03:47.669 --> 00:03:51.969
And even when we're working on these types of
projects, which are already very well supported

00:03:51.969 --> 00:03:56.770
in the Xcode environment, there are a
lot of issues that we might run into.

00:03:56.770 --> 00:04:04.030
For example, a lot of people, including us at
Apple, have a lot of inter-related Xcode projects.

00:04:04.030 --> 00:04:08.990
We have a bunch of projects that we need to
work with to work on one particular product.

00:04:08.990 --> 00:04:12.480
So we might have applications that
have a bunch of frameworks.

00:04:12.479 --> 00:04:17.019
We might have whole suites of applications that
are all related and share some common code,

00:04:17.019 --> 00:04:23.359
and we might also have plug-in based applications where
most of the application is implemented in terms of plug-ins

00:04:23.360 --> 00:04:26.710
that need to be related back to the original application.

00:04:26.709 --> 00:04:33.209
All this means that we'll probably have a large number of Xcode
projects that we need to work with and integrate with.

00:04:33.209 --> 00:04:38.879
And it can be really hard to keep everything you need
close at hand, typically, in this kind of environment.

00:04:38.879 --> 00:04:45.259
You wind up creating, say, folders full of aliases, which
you put on your dock, or you put things on the desktop,

00:04:45.259 --> 00:04:50.079
or you just have a folder that you know to go to,
and you start using the Open Recents menu item,

00:04:50.079 --> 00:04:58.389
except the Open Recent Project menu item only holds so many
items, so you go in and turn up the volume on that setting,

00:04:58.389 --> 00:05:02.620
and then all of your applications
have very large Open Recent menus.

00:05:02.620 --> 00:05:05.540
It's just kind of inconvenient.

00:05:05.540 --> 00:05:12.700
So with the Organizer, what we have is essentially your
dock in Xcode, so you can put your Xcode projects on it,

00:05:12.699 --> 00:05:17.449
put your related resources on it, and work
with them straight from the Organizer.

00:05:18.579 --> 00:05:23.419
So what we're going to do is a
simple hands-on example using one

00:05:23.420 --> 00:05:26.270
of the developer examples that's already on your systems.

00:05:26.269 --> 00:05:31.870
I know the slide that you saw as you were coming into
the room said you needed to go to connect.apple.com

00:05:31.870 --> 00:05:39.389
and go to the WWDC 2007 attendee site to get the materials
for this session, but actually you don't need to do anything

00:05:39.389 --> 00:05:44.750
to have the materials for this session other
than boot into Leopard and launch Xcode 3.0,

00:05:44.750 --> 00:05:48.730
because everything that we're going to do
is actually part of the developer examples,

00:05:48.730 --> 00:05:52.080
or is something that we're going to do from scratch.

00:05:52.079 --> 00:05:57.930
So the example code that we're going to see comes
from the PictureSharing foundation example.

00:05:57.930 --> 00:05:59.790
It's actually a pair of examples.

00:05:59.790 --> 00:06:04.430
One is PictureSharing itself, which
is a Bonjour example which shows how

00:06:04.430 --> 00:06:11.230
to share a simple picture using the foundation
Bonjour APIs, NSNetService and friends,

00:06:11.230 --> 00:06:19.290
and the other example is PictureSharing browser, which
shows you how to use the Bonjour APIs to browse for pictures

00:06:19.290 --> 00:06:21.650
that are being shared by PictureSharing.

00:06:21.649 --> 00:06:23.099
We won't actually be running this.

00:06:23.100 --> 00:06:27.330
I'm just giving you sort of the overview of what
these examples are about in case you're wondering.

00:06:27.329 --> 00:06:32.180
What, instead, we'll see is how we would
work with these in the Organizer itself.

00:06:32.180 --> 00:06:34.509
So let's go hands on.

00:06:35.879 --> 00:06:48.639
We can see up here we have our normal Mac OS X desktop,
and if we switch to Xcode, we can open the Organizer.

00:06:48.639 --> 00:06:52.969
Now, the default Organizer has nothing in it, and
I've heard some comments already this week about,

00:06:52.970 --> 00:06:55.210
well, what is what is this window?

00:06:55.209 --> 00:06:56.899
What am I supposed to put in it?

00:06:56.899 --> 00:06:59.310
The answer really is anything you want.

00:06:59.310 --> 00:07:01.819
Anything that will help you in your work.

00:07:01.819 --> 00:07:10.399
So let's first go to developer examples foundation, which
is the folder that contains the PictureSharing example.

00:07:10.399 --> 00:07:16.939
And Norbert is just putting this into column
view so we can easily see the path down there.

00:07:16.939 --> 00:07:20.870
And let's create a folder on our
desktop called PictureSharing.

00:07:20.870 --> 00:07:26.540
We don't necessarily want to work with
the examples right in the examples folder.

00:07:26.540 --> 00:07:31.939
It's always good to drag them out before we actually
start working with them in case we make modifications.

00:07:31.939 --> 00:07:36.040
Then we still have a pristine example
in our developer folder.

00:07:36.040 --> 00:07:40.510
So we're going to drag out the PictureSharing
and PictureSharingBrowser examples,

00:07:40.509 --> 00:07:46.589
and copy them into the folder that
we just created on the desktop.

00:07:46.589 --> 00:07:51.619
And now we're going to drag that
folder into the Xcode Organizer.

00:07:51.620 --> 00:07:58.189
And we can see that we've added a folder to the Organizer.

00:07:58.189 --> 00:08:03.639
It looks sort of like an Xcode project,
and it has a disclosure triangle next to it.

00:08:03.639 --> 00:08:07.689
If we just option click that disclosure
triangle, like every disclosure triangle,

00:08:07.689 --> 00:08:10.300
all of the things beneath it will be shown.

00:08:10.300 --> 00:08:12.810
And you can see that we can highlight things.

00:08:12.810 --> 00:08:17.199
Down at the bottom of the window, we
have some controls that let us do things

00:08:17.199 --> 00:08:21.069
like show some actions that we can apply to the selection.

00:08:21.069 --> 00:08:26.000
The one to the left of it, the plus button,
lets us add a new item to the Organizer,

00:08:26.000 --> 00:08:27.839
and we could have added the folder that way.

00:08:27.839 --> 00:08:33.079
By just clicking that it would bring up a sheet, and
we could select the folder that we wanted to add.

00:08:33.080 --> 00:08:36.450
And there's also a button that
lets us toggle the embedded editor.

00:08:36.450 --> 00:08:41.750
So we've embedded Xcode's text editing environment
right into the Organizer, and if you want to,

00:08:41.750 --> 00:08:44.809
you can edit right there instead of in separate windows.

00:08:44.809 --> 00:08:49.149
Also, along the top of the Organizer
we have a few action buttons.

00:08:49.149 --> 00:08:54.649
And these are buttons in the toolbar that also act as menus.

00:08:54.649 --> 00:09:02.250
So if you click and hold on one of them, you can see that
there are no actions defined for what Norbert has selected.

00:09:02.250 --> 00:09:07.669
And you can also see that, for at least some
selections, you can edit an action as well.

00:09:07.669 --> 00:09:10.250
We'll talk about what that does a little bit later.

00:09:10.250 --> 00:09:15.620
For right now, though, we're just
going to build these two projects.

00:09:15.620 --> 00:09:23.960
So first, highlight PictureSharing, the Xcode
project, itself, and just click the build button.

00:09:23.960 --> 00:09:33.280
And what this does is it invokes Xcode's build
infrastructure, and it will build that project.

00:09:35.470 --> 00:09:40.200
And you can see, if you have your build
folders to show up in your project folder,

00:09:40.200 --> 00:09:42.879
that it's created a build folder right in the Organizer.

00:09:42.879 --> 00:09:49.519
Unlike folder references in Xcode, when something changes
in the file system, and you have that open in the Organizer,

00:09:49.519 --> 00:09:51.710
you see the changes reflected immediately.

00:09:51.710 --> 00:09:57.850
If we were to go into the finder and rename something,
those changes would show up immediately in the Organizer.

00:09:57.850 --> 00:10:03.820
Now we can just go to the other Xcode
project, and we can also build that.

00:10:03.820 --> 00:10:08.330
And this makes it a lot easier when you have
to deal with multiple Xcode projects at once.

00:10:08.330 --> 00:10:13.700
You can even just put the projects themselves directly in
the Organizer, rather than the folders that contain them,

00:10:13.700 --> 00:10:17.740
and you can just go down the list and say,
okay, I want to build this one and this one,

00:10:17.740 --> 00:10:22.669
and now I'm going to double click this one because I'm
actually going to work with it and manipulate the project.

00:10:22.669 --> 00:10:28.629
We could even, if we wanted to, go into some of the source
code, using the embedded editor, work with the code,

00:10:28.629 --> 00:10:35.230
change it, highlight the project, click
build, and our project would build.

00:10:35.230 --> 00:10:40.100
We wouldn't have opened the project
in Xcode at all with that overhead.

00:10:41.500 --> 00:10:45.769
So let's go back to slides and talk a
little bit about what we've learned.

00:10:45.769 --> 00:10:48.429
Oops. Okay.

00:10:48.429 --> 00:10:52.329
So what did we see?

00:10:52.330 --> 00:10:59.790
Well, we saw that the Organizer lets us keep frequently
used resources, such as projects, really handy.

00:10:59.789 --> 00:11:02.039
Aah, I didn't show you one thing, though.

00:11:02.039 --> 00:11:06.149
Let's go back to the demo and see one of
the coolest things about the Organizer.

00:11:06.149 --> 00:11:13.069
It's always good that this happens
early in the presentation, right?

00:11:13.070 --> 00:11:18.030
So we've also enhanced Xcode's
find in folder functionality.

00:11:18.029 --> 00:11:25.120
It used to be called find in project, but if we bring
down the edit menu and show the find menu underneath it,

00:11:25.120 --> 00:11:30.299
we can see that it's called find in selected Organizer item.

00:11:30.299 --> 00:11:31.959
Or find in selected Organizer folder.

00:11:31.960 --> 00:11:33.490
Excuse me.

00:11:33.490 --> 00:11:39.310
So if we bring up that panel, we
can search for, say, NSNetService.

00:11:43.070 --> 00:11:53.190
And just click the find button, and we found all instances
of NSNetService, which is the standard Bonjour advertising

00:11:53.190 --> 00:11:59.440
and browsing class, in the folder that
we have selected in the Organizer.

00:11:59.440 --> 00:12:06.310
Now we can even close that up well, first
we can control click on one of the results,

00:12:06.309 --> 00:12:11.539
and it will take and we see a reveal in Organizer item.

00:12:11.539 --> 00:12:15.539
We can choose that, and it will bring
us right to that item in the Organizer.

00:12:15.539 --> 00:12:19.110
If we were to show the embedded editor,
and then do that, it would take us,

00:12:19.110 --> 00:12:22.690
even in the embedded editor, right to that line.

00:12:23.789 --> 00:12:28.110
The other thing we can do let Norbert show that in a second.

00:12:28.110 --> 00:12:38.620
The other thing we can do is close the find in Organizer
folder window, get rid of our selection entirely,

00:12:38.620 --> 00:12:42.419
and then go to the edit menu and look in the find submenu.

00:12:42.419 --> 00:12:44.439
Now we see just find in Organizer.

00:12:44.440 --> 00:12:51.140
What this will do is find across
all of the items in the Organizer.

00:12:51.139 --> 00:12:54.879
So right here, we can even say do a regular expression find.

00:12:54.879 --> 00:13:03.129
So we want to find all of the things that start with
NSNetService, and we can just change the find type

00:13:03.129 --> 00:13:06.689
to regular expression, and then click find.

00:13:06.690 --> 00:13:15.580
And you can see that we find results such as picture
and controller from the PictureSharing project,

00:13:15.580 --> 00:13:22.259
and we find results such as let me see here.

00:13:22.259 --> 00:13:27.269
I think there's a pic browser controller in
there from the PictureSharing browser project.

00:13:27.269 --> 00:13:30.679
So we've searched across multiple
projects, multiple folders at once.

00:13:30.679 --> 00:13:33.709
So if you have a set of folders
that you want to search against,

00:13:33.710 --> 00:13:38.420
you can just drag them into your Organizer,
and then just do a search in Organizer.

00:13:38.419 --> 00:13:46.479
And you can even bring this up by choosing by just pressing
command, shift, F, in Xcode, with the Organizer in front.

00:13:47.759 --> 00:13:53.240
This time, let's really go back to
slides and talk about what we've learned.

00:13:54.450 --> 00:14:01.129
So of course, we've already seen how we can keep
frequently used projects handy in the Organizer.

00:14:01.129 --> 00:14:06.600
But we can also use the Organizer for our easy
find in project, and find in folder functionality.

00:14:06.600 --> 00:14:09.300
And we can find across the entire Organizer.

00:14:09.299 --> 00:14:13.229
And especially if you have a lot of things to
search against, the enhancements that we've made

00:14:13.230 --> 00:14:19.379
to the multi-file find in Xcode, combined
with the Organizer, can really make it useful.

00:14:19.379 --> 00:14:25.939
You'll have no more, you know, going to the terminal,
and going to the folder that you want to search,

00:14:25.940 --> 00:14:31.260
and figuring out the right syntax to use with graph
to make it search recursively or non-recursively.

00:14:31.259 --> 00:14:36.259
You can just use the Organizer, and do all
of this in a very natural, intuitive way.

00:14:36.259 --> 00:14:41.759
And before we go on, just drag the item
that we've added to the Organizer out of it.

00:14:41.759 --> 00:14:43.230
Just like you would the doc.

00:14:43.230 --> 00:14:45.450
And you can see it disappear in a puff of smoke.

00:14:45.450 --> 00:14:47.950
It won't actually disappear from disk.

00:14:47.950 --> 00:14:49.970
It's just being removed from the Organizer.

00:14:49.970 --> 00:14:52.820
But that will keep the Organizer clean for our next demo.

00:14:52.820 --> 00:14:59.250
So the next thing we're going to talk about
is how the Organizer can really help you

00:14:59.250 --> 00:15:02.669
with what we call build-free projects.

00:15:02.669 --> 00:15:10.339
Now these are typically scripting projects, and scripting
has always been extremely popular on the UNIX platforms,

00:15:10.340 --> 00:15:15.110
and the UNIX drive platforms like
Mac OS X, and it's really been coming

00:15:15.110 --> 00:15:18.840
into its own lately, with technologies like Python and Ruby.

00:15:18.840 --> 00:15:24.290
And script based applications are more
and more, and progressively more common.

00:15:24.289 --> 00:15:26.049
And they're also getting bigger.

00:15:26.049 --> 00:15:30.339
And as they get bigger, it gets
harder and harder to organize them.

00:15:30.340 --> 00:15:36.480
So a lot of the project management functionality that
Xcode offers might actually be useful for these types

00:15:36.480 --> 00:15:44.310
of scripting projects, but Xcode projects
themselves are really targeted towards building,

00:15:44.309 --> 00:15:51.009
towards the traditional C style
compile, link, build, run, debug cycle.

00:15:51.009 --> 00:15:54.519
Whereas most scripting projects, you can just edit and go.

00:15:54.519 --> 00:15:56.870
And the Organizer really supports you in this.

00:15:56.870 --> 00:16:02.740
It gives you just enough Xcode project-level
functionality to make your life easier when working

00:16:02.740 --> 00:16:09.629
with scripting projects, but it doesn't impose
the heavyweight build paradigm on these projects.

00:16:09.629 --> 00:16:15.269
So what we're going to do is a
simple example of Ruby unit testing.

00:16:15.269 --> 00:16:19.319
In our developer examples folder, we
actually have a bunch of Ruby examples,

00:16:19.320 --> 00:16:22.050
including both Ruby and Ruby Cocoa examples.

00:16:22.049 --> 00:16:28.229
And under the Ruby examples themselves, we have
some examples of the Ruby unit testing framework

00:16:28.230 --> 00:16:32.610
that comes standard with Ruby itself,
and therefore with Mac OS X.

00:16:32.610 --> 00:16:33.820
It's called test unit.

00:16:33.820 --> 00:16:35.490
It's a really cool framework.

00:16:35.490 --> 00:16:42.029
And, for some reason, in our developer examples folder,
there are actually two Ruby folders on the path to it.

00:16:42.029 --> 00:16:51.230
So what we're going to do is see what that edit script,
edit action item in the Organizer's pop up menus meant,

00:16:51.230 --> 00:16:57.090
and we're going to see how we can use the
Organizer to run existing scripts from disk.

00:16:57.090 --> 00:17:00.720
So let's go hands on.

00:17:00.720 --> 00:17:04.230
And we can start figuring this out.

00:17:04.230 --> 00:17:14.029
So the first thing you'll want to do is to navigate
through your developer folder to developer, examples, Ruby.

00:17:14.029 --> 00:17:20.359
There's no oh, thanks.

00:17:22.049 --> 00:17:28.960
Okay. There is so developer, examples, Ruby, Ruby.

00:17:28.960 --> 00:17:35.840
And under that, towards the very
bottom, you'll see a test unit folder.

00:17:37.029 --> 00:17:41.240
Now we just want to drag that entire
folder to the Organizer.

00:17:41.240 --> 00:17:50.750
And if we open that folder up, we can see that
there are just a few simple Ruby files inside of it,

00:17:50.750 --> 00:17:54.950
and these show how to use the unit
testing framework that comes with Ruby.

00:17:54.950 --> 00:17:57.309
We're not going to talk in depth about that part of it.

00:17:57.309 --> 00:18:01.139
Instead, what we're going to see is
how we can actually run some of these.

00:18:01.140 --> 00:18:09.970
So the first thing we're going to do is show you that
yes, this really is Xcode's editing infrastructure.

00:18:09.970 --> 00:18:16.289
You see that when we open the embedded editor
window, and we highlight one of the Ruby files,

00:18:16.289 --> 00:18:22.609
that we have full syntax coloring for Ruby,
just like we would in an Xcode 3.0 project.

00:18:22.609 --> 00:18:25.699
And we even have, in the function pop up,

00:18:25.700 --> 00:18:30.490
all of the functions that are defined
in this file, the classes, and so on.

00:18:31.710 --> 00:18:36.069
Now say we want to actually run this unit test.

00:18:36.069 --> 00:18:43.079
Well, there's no easy way to just do this without
going to the terminal in previous versions of Xcode.

00:18:43.079 --> 00:18:53.159
But now, we can go into the action, the
gear pop up button, and choose edit actions.

00:18:53.160 --> 00:19:01.230
And what this does is bring down an editing sheet that
allows us to associate actions with the test unit folder.

00:19:01.230 --> 00:19:04.740
It's not actually putting anything in the test unit folder.

00:19:04.740 --> 00:19:08.440
It's just associating them with the test unit folder.

00:19:08.440 --> 00:19:13.410
So all of these actions are associated with the
Organizer itself, and you don't have to worry

00:19:13.410 --> 00:19:20.279
about cluttering your folders up with things that, say,
the build system that you're using might not understand.

00:19:20.279 --> 00:19:26.970
So the first thing you'll notice is that we have a
table view on the left of this that lists action names,

00:19:26.970 --> 00:19:34.250
key bindings, and has a couple of buttons
below it for adding and deleting items.

00:19:34.250 --> 00:19:39.400
And then to the right, we have an editing
area, and we'll see that in a minute.

00:19:39.400 --> 00:19:45.120
And we also have a couple of pop ups for choosing where we
get input and output, and we'll also take a look at that.

00:19:45.119 --> 00:19:49.519
So the first thing to do is add a new text script.

00:19:51.970 --> 00:19:56.150
You can see that this adds an item to
the table at left called text script.

00:19:56.150 --> 00:20:00.500
And we can just rename this to run, to just run.

00:20:00.500 --> 00:20:04.549
And you can see at the right that the
script already has some boiler plate in it.

00:20:04.549 --> 00:20:11.149
It's going to be just a generic shell script by default,
a born shell script, and it already comes with the shebang

00:20:11.150 --> 00:20:16.050
to tell the shell or to tell the
operating system how to run this.

00:20:16.049 --> 00:20:23.629
And we can just type in some text in here to invoke
the Ruby interpreter with the test tc_adder.rb.

00:20:23.630 --> 00:20:29.410
Now if we look at the pop up menus above
and below the text field, or the text area,

00:20:29.410 --> 00:20:33.230
we can see that we can take our input from different places.

00:20:33.230 --> 00:20:38.349
For example, we can take the input that we
provide to the script from the current selection,

00:20:38.349 --> 00:20:41.019
or we can say that the script has no input.

00:20:41.019 --> 00:20:46.319
Since this script was just going to invoke another
script, we're going to tell it that it has no input.

00:20:47.690 --> 00:20:54.370
Below that, we can see that we have a pop up menu that
says what directory this script is going to execute in.

00:20:54.369 --> 00:21:00.359
By default, it will execute in the script
in the directory that it's defined on.

00:21:00.359 --> 00:21:07.669
So for example, we're defining this script on we're
defining this action on the test unit directory,

00:21:07.670 --> 00:21:11.210
and that lets us associate the action with that directory.

00:21:11.210 --> 00:21:17.900
But if we had a large directory hierarchy beneath test
unit, we could actually define an action on test unit,

00:21:17.900 --> 00:21:23.870
and invoke one of those actions on a
sub-directory, or on something far below it.

00:21:23.869 --> 00:21:29.889
So we need to tell the action infrastructure
where we actually want to execute the action.

00:21:29.890 --> 00:21:31.590
What context we want it to execute it.

00:21:31.589 --> 00:21:35.039
And that's what this menu allows us to do.

00:21:35.039 --> 00:21:39.430
Below the script, we have options
for where our output should go.

00:21:39.430 --> 00:21:42.769
Of course, in the UNIX world there are two kinds of output.

00:21:42.769 --> 00:21:45.629
There's plain output, and there's error output.

00:21:45.630 --> 00:21:49.130
And, of course, we can choose independent options for each.

00:21:49.130 --> 00:21:54.260
We're just going to send our output
for this one into a new document,

00:21:54.259 --> 00:21:59.660
and we're going to merge any errors
that occur into the same output.

00:21:59.660 --> 00:22:06.880
So let's click OK, and if we
pull down the action button now,

00:22:06.880 --> 00:22:11.430
we can see that there's a run item under the test unit item.

00:22:11.430 --> 00:22:17.009
We use a disabled item to indicate
that there's a folder that has actions,

00:22:17.009 --> 00:22:22.629
and then underneath that we have an indented
item that represents the actual action.

00:22:22.630 --> 00:22:27.530
And, of course, you can add hierarchy yourself to
the actions that you define through the editor,

00:22:27.529 --> 00:22:30.099
just like you can through the user script editor.

00:22:30.099 --> 00:22:38.809
Now if we choose run, we can see that we ran
the script, and the script ran the unit test.

00:22:38.809 --> 00:22:45.789
It finished in two ten-thousandth of a second, and it had no failures.

00:22:45.789 --> 00:22:51.299
Now let's see what this looks like if we were to
run it and show the output in an alert instead.

00:22:51.299 --> 00:22:56.430
For example, you might do that if you, you might choose
to do that for errors, so you really get noticed

00:22:56.430 --> 00:23:01.509
or so you really notice if there's an error when
running something, but you can only half pay attention

00:23:01.509 --> 00:23:05.519
if you're just running these as a normal course of business.

00:23:05.519 --> 00:23:10.509
You know, if a window pops up, you can say OK,
everything's fine, just close it, and go on.

00:23:10.509 --> 00:23:13.379
So let's go back, edit our actions.

00:23:13.380 --> 00:23:16.940
We've got the run item already highlighted.

00:23:16.940 --> 00:23:20.990
We can change its output to display an alert.

00:23:20.990 --> 00:23:22.299
Click OK.

00:23:22.299 --> 00:23:31.839
And now if we invoke this again, it shows
in an alert panel titled command output.

00:23:33.789 --> 00:23:38.690
Now let's say we want to run a
whole script through the Organizer.

00:23:38.690 --> 00:23:44.730
We don't necessarily have to create a shell script
that turns around and then invokes that script again.

00:23:44.730 --> 00:23:50.650
Instead, we could just add that
script directly to the actions menu.

00:23:50.650 --> 00:23:59.610
So let's open the actions sheet
again, and go back to the finder.

00:23:59.609 --> 00:24:14.000
And at ne level above test unit, under developer examples,
Ruby, Ruby, we'll see an item named test.rb.

00:24:14.000 --> 00:24:21.369
This runs a larger suite of tests against the Ruby
interpreter itself to test things like assignment.

00:24:21.369 --> 00:24:24.169
And it's a fairly comprehensive test suite for Ruby.

00:24:24.170 --> 00:24:25.810
It's not too big.

00:24:25.809 --> 00:24:29.519
It doesn't take too long to run, but
you might want to run it directly rather

00:24:29.519 --> 00:24:31.950
than having a shell script run it indirectly.

00:24:31.950 --> 00:24:39.580
So we can just grab that in the finder, and drag it
directly to the table at the left of the edit actions sheet.

00:24:39.579 --> 00:24:45.929
That will put that that will put a reference
to that script right in the edit actions sheet.

00:24:45.930 --> 00:24:51.220
If we were to change it on disk, it wouldn't it
would still be those changes would be reflected

00:24:51.220 --> 00:24:54.019
in the would be reflected in what gets run.

00:24:54.019 --> 00:25:00.930
If we highlight test.rb in the table, we can
see that instead of showing an embedded editor,

00:25:00.930 --> 00:25:05.410
it shows us the path using the new Cocoa path control.

00:25:06.859 --> 00:25:15.699
But of course, we can still choose where to send
its output, and where to send its error output.

00:25:15.700 --> 00:25:20.910
We can tell it where to get its input from, and
we can tell it what directory it needs to run in.

00:25:20.910 --> 00:25:22.860
So let's just click OK.

00:25:22.859 --> 00:25:27.079
And then we can run this script.

00:25:27.079 --> 00:25:35.159
And we can see that we get a whole
bunch of output in a new Xcode window.

00:25:35.160 --> 00:25:39.410
And a lot of the tests passed, and
there's some error output at the top.

00:25:39.410 --> 00:25:47.330
That shows us that, in fact, error messages are
being merged with the with the script output itself.

00:25:47.329 --> 00:25:49.099
Those error messages are harmless.

00:25:49.099 --> 00:25:55.730
They're basically saying, hey, you're running this from a
write-protected directory, because it's actually being run

00:25:55.730 --> 00:26:01.670
in the developer examples directory,
which, by default, is owned by root.

00:26:01.670 --> 00:26:08.610
We can close this window, and talk about what we've learned.

00:26:08.609 --> 00:26:13.750
So let's go back to the slides.

00:26:13.750 --> 00:26:22.900
And what we really saw in this example is how to work with
the command editor to create new scripts and add scripts

00:26:22.900 --> 00:26:29.280
that we already have, and how we would change
command input output error settings, and so on.

00:26:29.279 --> 00:26:35.369
And one other thing we can do is look to
Xcode's user scripts menu as an example.

00:26:35.369 --> 00:26:41.799
The user scripts menu, the edit user scripts option at
the very bottom, uses exactly the same editing sheet.

00:26:41.799 --> 00:26:47.690
It gives you the same kinds of options, and
it gives you the same embedded Xcode editor

00:26:47.690 --> 00:26:51.759
for editing your scripts with full
syntax highlighting and so on.

00:26:51.759 --> 00:26:56.960
And it gives you a lot of good examples of the
syntax that you need to use if you want to, say,

00:26:56.960 --> 00:27:01.299
extract the text selection from
the selected item in the Organizer.

00:27:01.299 --> 00:27:04.169
There is a there is some syntax for doing that.

00:27:04.170 --> 00:27:09.070
It's something like %%%[pbxfilename]%%%,
something like that.

00:27:09.069 --> 00:27:17.210
I always just look at the examples in the user scripts menu.

00:27:17.210 --> 00:27:20.809
And we've got a bunch of them.

00:27:20.809 --> 00:27:26.470
So that's great, but what if you want
to do a lot of repetitive actions?

00:27:26.470 --> 00:27:29.339
Like let's say that you always
create a lot of similar items.

00:27:29.339 --> 00:27:31.289
You create a lot of command line tools.

00:27:31.289 --> 00:27:38.180
You create a lot of simple Ruby projects that might have
one, two, three Ruby scripts, that might have some actions

00:27:38.180 --> 00:27:44.240
that you want to perform for building, that might have
some actions that you want to perform for unit testing.

00:27:44.240 --> 00:27:48.799
Well, we have a template mechanism in the
Organizer that's a lot more lightweight

00:27:48.799 --> 00:27:53.450
than the Xcode project template mechanism that
a lot of people have figured out how to use.

00:27:53.450 --> 00:28:02.670
We can use this through the action button at the bottom
of the Organizer under the new from template menu item.

00:28:02.670 --> 00:28:07.810
And what we've done with templates is just
allowed them to be folders that are copied

00:28:07.809 --> 00:28:11.000
with some very, very simple substitution.

00:28:11.000 --> 00:28:16.569
When you create a template, it's just a folder that
you put at a certain location in the file system,

00:28:16.569 --> 00:28:20.429
and the name that you give it is what shows up in the menu.

00:28:20.430 --> 00:28:26.900
Once you instantiate that template in the Organizer,
the Organizer will ask you to pick where you want

00:28:26.900 --> 00:28:30.820
to instantiate it, where you want to create a
copy of that template, and what name to use.

00:28:30.819 --> 00:28:36.919
And then it will go through any text files in
your template, and wherever the name that you used

00:28:36.920 --> 00:28:41.220
for the template appears, it will replace
it with the name that you've used for the

00:28:41.220 --> 00:28:44.079
that you've specified for the new folder.

00:28:44.079 --> 00:28:48.769
So it won't change the names of the files that
are copied, because for some build systems,

00:28:48.769 --> 00:28:51.859
some project systems, that really makes a difference.

00:28:51.859 --> 00:28:52.909
For example, Java.

00:28:52.910 --> 00:29:00.440
Java always wants the Java file named
the same as the class inside of it.

00:29:00.440 --> 00:29:03.789
So we don't really want to mess
with file names or anything else.

00:29:03.789 --> 00:29:12.369
We just want to give you a mechanism where
you can say, this substitution is safe.

00:29:12.369 --> 00:29:16.059
So how do you tell Xcode about your Organizer templates?

00:29:16.059 --> 00:29:19.639
Well, you put them in Xcode's
new application support folder.

00:29:19.640 --> 00:29:26.530
Because we have co-existence technology now,
you'll need to put this in your own library folder,

00:29:26.529 --> 00:29:31.389
or your machine's library folder,
rather than under /Developer.

00:29:32.690 --> 00:29:37.970
And since we can have multiple co-existing versions
of Xcode, you'll probably want to put this

00:29:37.970 --> 00:29:43.519
under the Developer/3.0/Xcode folder within
your library application support folder,

00:29:43.519 --> 00:29:46.970
as opposed to the developer shared Xcode folder.

00:29:46.970 --> 00:29:50.009
Now you'll probably already, if you've run Xcode 3.0,

00:29:50.009 --> 00:29:55.569
have a library application support
Developer/3.0/Xcode folder itself,

00:29:55.569 --> 00:29:59.980
but you won't have the necessary
Organizer templates folder underneath that.

00:29:59.980 --> 00:30:02.690
So you can just create that.

00:30:02.690 --> 00:30:07.640
The items within the Organizer templates
folder are going to be folders themselves,

00:30:07.640 --> 00:30:10.690
and they're going to be folders representing categories.

00:30:10.690 --> 00:30:16.259
Organizer templates are always in a category
of some sort because we've found that,

00:30:16.259 --> 00:30:19.400
by and large, people do like to categorize things.

00:30:19.400 --> 00:30:25.920
So we've given you one level of category
of hierarchy for these categories.

00:30:25.920 --> 00:30:28.519
You can say, these are my command line tool templates.

00:30:28.519 --> 00:30:29.849
Or, these are my Ruby templates.

00:30:29.849 --> 00:30:31.889
Or, these are my Java templates.

00:30:31.890 --> 00:30:35.430
And within that, you can put your templates.

00:30:35.430 --> 00:30:41.509
And we already have a bunch of Java templates on
your system that you can look to for examples.

00:30:41.509 --> 00:30:45.430
They're in developer library, Xcode,
under Organizer templates.

00:30:45.430 --> 00:30:52.250
So what if you want to provide commands for these templates?

00:30:52.250 --> 00:30:57.309
Well, for certain kinds of projects, Xcode
will actually sniff out that they are that kind

00:30:57.309 --> 00:30:59.980
of project and supply some default commands.

00:30:59.980 --> 00:31:06.180
For example, if your template, or a project that
you drag into the Organizer, has a Makefile in it,

00:31:06.180 --> 00:31:10.789
or has a configure script in it, Xcode oops, sorry.

00:31:10.789 --> 00:31:14.960
Xcode will say, hey, this is a Makefile based project.

00:31:14.960 --> 00:31:17.329
Or, this is an autoconf based project.

00:31:17.329 --> 00:31:24.470
And it will populate the build, the clean, the run,
and the action menus with some default actions.

00:31:24.470 --> 00:31:31.380
It won't necessarily look inside the Makefiles and figure
out what the targets are, and what the executable is,

00:31:31.380 --> 00:31:35.610
and so on, because that's almost an intractable problem.

00:31:35.609 --> 00:31:40.250
But at least we can provide some
template actions that get you started.

00:31:40.250 --> 00:31:47.009
For Java projects, too, we can look to see if
you have an Ant build.xml file, and if you do,

00:31:47.009 --> 00:31:52.799
we can actually look to see what its targets
are, and generate build commands for those.

00:31:52.799 --> 00:31:58.149
However, if you have your own kinds of projects,
you'll probably want to supply some default commands

00:31:58.150 --> 00:32:01.350
when you create Organizer templates for them.

00:32:01.349 --> 00:32:07.719
So what we've done is come up with a simple
syntax for what we call "xccommands" files.

00:32:07.720 --> 00:32:16.870
And these what you just specify in an array of dictionaries,
a set of commands that will show up under the Organizer

00:32:16.869 --> 00:32:22.129
when under the Organizer's toolbar
buttons when the template is instantiated.

00:32:22.130 --> 00:32:30.730
And what's more, they're copied, rather than referenced,
so the user who creates who instantiates their template,

00:32:30.730 --> 00:32:35.599
can then go in and modify them without
actually modifying the template itself.

00:32:35.599 --> 00:32:42.029
So of course, all of this is done by name.

00:32:42.029 --> 00:32:47.049
And the name describes the toolbar item
that the commands should be associated with.

00:32:47.049 --> 00:32:52.490
For example, if you have a build.xccommands
file, the commands within it will show

00:32:52.490 --> 00:32:57.250
up under the build button in the Organizer toolbar.

00:32:57.250 --> 00:33:03.190
And we've already talked about how they act as a
template, where the changes are kept with the Organizer,

00:33:03.190 --> 00:33:08.080
and not written back to the original
file, or to your template.

00:33:09.089 --> 00:33:15.259
As I said, the syntax for command
template is just a simple property list.

00:33:15.259 --> 00:33:21.210
It's an array of dictionaries, and you can create
it using either the old style, or XML plist format,

00:33:21.210 --> 00:33:25.490
using any text editor you like, such
as the Xcode built in text editor,

00:33:25.490 --> 00:33:30.410
or you can use property list editor
if you're more comfortable that way.

00:33:30.410 --> 00:33:36.910
There are three properties that are required
for a command for an individual command.

00:33:36.910 --> 00:33:42.600
In particular, you need to specify the name of the command,
and that's what will show up in the menu item itself.

00:33:42.599 --> 00:33:45.659
And you actually there are two required properties.

00:33:45.660 --> 00:33:47.810
There's an or there.

00:33:47.809 --> 00:33:52.179
And you need to supply either a script or a path.

00:33:52.180 --> 00:34:00.080
Now the script is the text of the script to
associate with that command, and the path is the path

00:34:00.079 --> 00:34:02.349
to an executable to run for that command.

00:34:02.349 --> 00:34:10.799
And that path is relative to the location of the xccommands
file when it's when your template is instantiated.

00:34:12.710 --> 00:34:18.750
There's also one optional property that you can
supply for a particular command, and that's directory.

00:34:18.750 --> 00:34:24.010
And that can either be a path that's
relative to the commands file,

00:34:24.010 --> 00:34:31.670
or it can be one of several constants indicating that
you want the command to run in whatever the directory

00:34:31.670 --> 00:34:40.860
of the selected item is in the Organizer, that it should
run in the topmost item of the directory of the topmost item

00:34:40.860 --> 00:34:49.370
in the Organizer that that command is associated with, that
it should run in the directory in which it's specified,

00:34:49.369 --> 00:34:54.440
that it should run in your home directory,
or that it should run in your root directory.

00:34:54.440 --> 00:34:59.070
So here's an example.

00:34:59.070 --> 00:35:03.150
We see here that this is just an array of two dictionaries.

00:35:03.150 --> 00:35:07.800
One specifies a command named build for debugging.

00:35:07.800 --> 00:35:16.760
And this is just the this is effectively what you would get
if you just went into the build menu and chose edit actions

00:35:16.760 --> 00:35:21.140
and added a new text script named build for debugging.

00:35:21.139 --> 00:35:23.109
We can see here that it has a name.

00:35:23.110 --> 00:35:25.390
That's what will be shown in the Organizer.

00:35:25.389 --> 00:35:34.879
It has dot for a directory, indicating that it will be run
in the directory in which the command's file is located.

00:35:34.880 --> 00:35:42.380
And it has a script, which is just
the text of the script to run.

00:35:42.380 --> 00:35:44.780
We can see that that script ends with \n.

00:35:44.780 --> 00:35:48.980
And that's because we actually want
to put that new line in the script.

00:35:48.980 --> 00:35:55.090
If you want to put new lines, quotation
marks, or tab characters,

00:35:55.090 --> 00:35:59.720
or other characters in the script,
you'll need to quote them.

00:35:59.719 --> 00:36:02.750
Our second command here is very similar.

00:36:02.750 --> 00:36:09.460
It's called package for deployment, and it, too,
runs in the directory in which it is defined.

00:36:09.460 --> 00:36:17.139
But instead of being a script, it's a reference
to a script outside via xccommand's file itself.

00:36:17.139 --> 00:36:22.089
Instead it just references a script in
the script's folder at the same level

00:36:22.090 --> 00:36:25.460
of the file system as that xccommand's file.

00:36:25.460 --> 00:36:27.059
That is named package for deployment.

00:36:27.059 --> 00:36:34.269
And this is the kind of Ruby script you might write to,
say, put everything in the right place on a disk image,

00:36:34.269 --> 00:36:42.159
generate a disk image, and then
upload it to your web server.

00:36:42.159 --> 00:36:45.859
So let's say that you often create
very simple command line tools.

00:36:45.860 --> 00:36:48.570
I know I do when I'm figuring out new low level APIs.

00:36:48.570 --> 00:36:54.970
I like to create a command line tool where I can
just say, okay, I'm going to use this one API.

00:36:54.969 --> 00:36:58.049
I'm going to maybe create just a couple of files.

00:36:58.050 --> 00:37:02.170
One is a wrapper, and one where I really exercise the API.

00:37:02.170 --> 00:37:09.039
Now, I'll create one or more source files, and I generally
won't bother with creating a whole Makefile for that,

00:37:09.039 --> 00:37:13.340
or with creating a whole Xcode project for
that, because that's really kind of heavyweight.

00:37:13.340 --> 00:37:16.230
Instead, I just recompile everything every time.

00:37:16.230 --> 00:37:20.039
But sometimes I get myself in trouble,
because I either edit my command line wrong,

00:37:20.039 --> 00:37:23.559
and I wind up not compiling something
I should, or what have you.

00:37:23.559 --> 00:37:28.389
So it's really handy to have a template to do this with.

00:37:28.389 --> 00:37:33.579
So let's go hands on, and see how
the Organizer can help us with that.

00:37:33.579 --> 00:37:38.789
The first thing we're going to do is create
a directory to represent our template.

00:37:38.789 --> 00:37:43.110
So we're just going to create this in the
finder, and we're going to call it my tool,

00:37:43.110 --> 00:37:45.840
because this is my type of command line tool.

00:37:45.840 --> 00:37:50.120
And then we can drag that folder to the Organizer,

00:37:50.119 --> 00:37:53.679
so we can actually use the Organizer
to build things for the Organizer.

00:37:53.679 --> 00:37:56.859
It's a little meta.

00:37:58.170 --> 00:38:05.690
Within the Organizer, we'll just push that
down and create a new file inside of it.

00:38:05.690 --> 00:38:12.240
And now we're going to go to the finder and rename it,
just so we can see that as we change things in the finder,

00:38:12.239 --> 00:38:14.469
they're reflected immediately in the Organizer.

00:38:14.469 --> 00:38:18.359
We're using the great FSEvents
technology in Leopard to do this.

00:38:18.360 --> 00:38:21.000
I have to tell you, it's really cool.

00:38:21.000 --> 00:38:23.400
It just works.

00:38:23.400 --> 00:38:29.070
So we're going to name this mytool.c, because it's going
to be the simple template that we're always going to start

00:38:29.070 --> 00:38:35.000
from when creating a C command line tool.

00:38:35.000 --> 00:38:40.199
Now if we we say add to the are you sure you
want to add an extension alert that we get.

00:38:40.199 --> 00:38:46.500
Of course, on development systems,
typically you'll turn that off.

00:38:46.500 --> 00:38:50.489
And we can highlight the C file
itself, open up our embedded editor,

00:38:50.489 --> 00:38:54.099
and just put some boiler plate,
hello world, type text in it.

00:38:54.099 --> 00:39:11.460
So we'll just include standard I/O, put in, say, a main
declaration that we would have standard in C, and say,

00:39:11.460 --> 00:39:19.429
let's put in a printf of the name of the
Organizer template that we're creating.

00:39:19.429 --> 00:39:26.069
We're just going to say my tool, just
like we did in the finder for the folder.

00:39:26.070 --> 00:39:33.039
Of course, we have to return something,
because this function has a return value.

00:39:33.039 --> 00:39:36.690
And we can save.

00:39:36.690 --> 00:39:44.130
And of course, we do get all of the normal
syntax highlighting, and function pop ups,

00:39:44.130 --> 00:39:48.890
and so on that you would get from any Xcode
project within the Organizer, too.

00:39:48.889 --> 00:39:56.989
Now, let's create another new file in our folder here.

00:39:56.989 --> 00:40:01.209
We can go back to the finder and rename it.

00:40:02.699 --> 00:40:06.409
And we'll name this one build.xccommands.

00:40:06.409 --> 00:40:20.730
Now if we drag now if we pop open the embedded
editor again, we can just create a very simple array

00:40:20.730 --> 00:40:24.090
of dictionaries, so put in parentheses, and a brace.

00:40:24.090 --> 00:40:28.920
That means an array in a dictionary,
in the old style property list format.

00:40:28.920 --> 00:40:36.300
We can put in a set of key value
pairs, starting with name equals, say, build.

00:40:38.650 --> 00:40:40.099
Or build for debugging, actually.

00:40:40.099 --> 00:40:47.059
And we'll terminate each of these
key value pairs with a semi-colon.

00:40:47.059 --> 00:40:52.480
We're going to say that we want this to execute in the
directory in which the Organizer command comes from.

00:40:52.480 --> 00:40:57.400
And we're just going to put in the text of a script.

00:40:57.400 --> 00:41:03.610
So we'll just say script, and we'll invoke GCC -g.

00:41:03.610 --> 00:41:08.340
The -g is important, because that
means generate debugging information.

00:41:08.340 --> 00:41:16.230
And we're going to compile all C files, and we're
just going to generate an executable named my tool.

00:41:16.230 --> 00:41:22.900
And we'll terminate that dictionary with a
closing brace, and we'll terminate the array

00:41:22.900 --> 00:41:30.190
with a closing parenthesis, and we can save.

00:41:30.190 --> 00:41:39.369
Now let's hide our embedded editor, and find
where we need to put this in the finder.

00:41:39.369 --> 00:41:46.150
So let's go to our Leopard volume, and let's just go to
column view, because it will be easier to navigate this way.

00:41:46.150 --> 00:41:52.950
And start with our user directory,
and look in our library folder.

00:41:52.949 --> 00:42:00.689
Under application support, hopefully we'll all
already have a developer folder underneath that.

00:42:00.690 --> 00:42:10.579
Under that is Version 3.0 for Xcode 3.0, and there's
an Xcode folder under that for the Xcode IDE itself.

00:42:10.579 --> 00:42:14.960
And underneath that, you'll probably
have a user script plist already

00:42:14.960 --> 00:42:17.159
to represent the items in the user scripts menu.

00:42:17.159 --> 00:42:24.339
What we're going to do is add, under that,
a new folder, named Organizer templates.

00:42:28.090 --> 00:42:36.650
And underneath that, we're going to add
another new folder named my templates.

00:42:36.650 --> 00:42:41.800
And this allows you to categorize all
of the different templates you create.

00:42:41.800 --> 00:42:47.039
So for example, if you have some templates for command
line tools, you could name it command line tool templates.

00:42:47.039 --> 00:42:51.590
You could have a separate set of
templates for Ruby tools, for Python tools,

00:42:51.590 --> 00:42:54.700
or for templates that you're creating
for different clients, for example.

00:42:54.699 --> 00:42:57.969
There's a lot of flexibility here.

00:42:57.969 --> 00:43:03.679
Now we can just drag our my tool folder
directly from the desktop into that new folder

00:43:03.679 --> 00:43:11.579
that we've created, and we can go back to Xcode.

00:43:11.579 --> 00:43:18.380
We'll just leave this up on the why don't we go back to that
window and leave it up on the screen so people can navigate.

00:43:22.409 --> 00:43:33.029
We start with the home directory, we go to
library application support, developer, 3.0, Xcode,

00:43:33.030 --> 00:43:40.910
and we can just leave that path open
for people that need to navigate there.

00:43:40.909 --> 00:43:48.399
It is a little bit cumbersome to get to where we're
going, but fortunately, we actually can get there.

00:43:48.400 --> 00:43:58.860
Now let's go back to the Organizer window, and
let's look at that action menu at the very bottom.

00:43:58.860 --> 00:44:02.789
First, let's make sure that we don't have
anything selected in the Organizer, of course.

00:44:02.789 --> 00:44:11.099
And let's go to the action button.

00:44:11.099 --> 00:44:15.170
The action menu at the bottom of the Organizer, rather.

00:44:15.170 --> 00:44:21.460
And we can see our new from templates
item has two sub-items now,

00:44:21.460 --> 00:44:25.050
one for the built in Java templates,
and one called my templates.

00:44:25.050 --> 00:44:27.830
And that includes an item called my tool.

00:44:27.829 --> 00:44:30.409
That is the template that we just created.

00:44:30.409 --> 00:44:36.489
So if we select that, the Organizer will give us
a sheet that lets us instantiate that template.

00:44:36.489 --> 00:44:39.699
And it says, Do you want, please name what you're...?

00:44:39.699 --> 00:44:43.029
Actually, I can't read that.

00:44:43.030 --> 00:44:49.570
But it lets you name whatever you're instantiating, so
let's call it hello world, and let's put it on the desktop.

00:44:49.570 --> 00:44:51.559
We can just pick that from pop up at the bottom.

00:44:51.559 --> 00:44:56.579
This is a full save panel, so of course, you know,
you can navigate anywhere in your file system with it.

00:44:56.579 --> 00:44:59.869
But we have that convenient pop up at the bottom of it.

00:44:59.869 --> 00:45:05.150
And the Organizer has just created
a new folder on our desktop for us.

00:45:05.150 --> 00:45:09.380
And if we twist that down we can see that
it has the contents that we were expecting.

00:45:09.380 --> 00:45:16.490
It has our mytool.c file, and it has our xccommands file.

00:45:16.489 --> 00:45:24.889
If we look under the build pop up item, the build
toolbar item, we can see that it added our build

00:45:24.889 --> 00:45:34.210
for debugging command to the build item, and if we look
at mytool.c, we can see that it replaced in the printf

00:45:34.210 --> 00:45:38.840
where we had been saying mytool,
it replaced that with hello world,

00:45:38.840 --> 00:45:42.829
because my tool was the name of the
folder, the name of the template.

00:45:42.829 --> 00:45:47.190
It replaced it with what we decided
to name our instance of that template.

00:45:47.190 --> 00:45:53.130
And if we wanted to, we could even
go in and edit our commands now

00:45:53.130 --> 00:46:00.289
without affecting the xccommands file that's either
already in this folder, or in the template folder.

00:46:00.289 --> 00:46:04.570
So let's go back to the slides and see what we've learned.

00:46:07.650 --> 00:46:14.050
Well, we've learned how to create Organizer
templates to automate a common task.

00:46:14.050 --> 00:46:17.940
And we've even seen how we can use the Organizer to do that.

00:46:17.940 --> 00:46:23.820
We've seen where we should put these items, and
that they go under the Organizer templates folder

00:46:23.820 --> 00:46:29.019
in Library/Application Support/Developer/
3.0/Xcode/ in your home directory,

00:46:29.019 --> 00:46:33.130
or they can go on your machine if,
say, you share among multiple people.

00:46:33.130 --> 00:46:37.630
Or if you want to you know, if you
just prefer to have it installed there.

00:46:37.630 --> 00:46:39.970
So you're providing an SDK to others.

00:46:39.969 --> 00:46:44.889
And we've seen how to use this
template right from the Organizer.

00:46:44.889 --> 00:46:50.460
So often you'll want to work with community projects.

00:46:50.460 --> 00:46:58.710
And these are projects from the outside world,
from the open source world, from the UNIX world.

00:46:58.710 --> 00:47:03.170
And the reason you'll want to work with them is that
there are a lot of different technologies out there,

00:47:03.170 --> 00:47:09.099
all over the place, and they are created by a lot
of different people with a lot of great ideas.

00:47:09.099 --> 00:47:12.380
And they are written in a lot of different ways.

00:47:12.380 --> 00:47:20.280
So rather than try to figure out how to
cram everything into Xcode's project model,

00:47:20.280 --> 00:47:28.930
we really want to help these people get to Mac OS X with its
best-of-breed user and developer experience without having

00:47:28.929 --> 00:47:35.980
to change the way that everyone's projects are built.

00:47:35.980 --> 00:47:41.280
So most community projects use one form
or another of a non-Xcode build system.

00:47:41.280 --> 00:47:45.950
They'll use make, they'll use rake,
they'll use ant, they'll use maven.

00:47:45.949 --> 00:47:48.909
I've seen projects that use C-Make.

00:47:48.909 --> 00:47:50.579
There are all sorts of different options.

00:47:50.579 --> 00:47:55.029
And traditionally what you do is you work with
files in the finder, you work with a text editor,

00:47:55.030 --> 00:48:00.769
you work with the terminal, you issue terminal
commands to configure, to make, to make install,

00:48:00.769 --> 00:48:04.769
to remake, to remake as you edit some files.

00:48:04.769 --> 00:48:08.780
You remake it again to make sure that it
all builds everything that it needs to.

00:48:08.780 --> 00:48:14.110
Maybe you issue a make depend to have
all the dependency tracking happen.

00:48:14.110 --> 00:48:21.099
Well, integrating all of that kind of work style with
Xcode was really a pain, because Xcode really wants you

00:48:21.099 --> 00:48:26.559
to work on Xcode or Mac OS X native projects.

00:48:26.559 --> 00:48:33.519
But with Xcode 3.0 and the Organizer, it's a lot easier
to use those action to use those action buttons,

00:48:33.519 --> 00:48:40.840
and to use just the file reference capabilities of the
Organizer to integrate with these types of build systems.

00:48:40.840 --> 00:48:44.480
So we're going to show you an example
of how to do this using Java and and.

00:48:44.480 --> 00:48:52.409
And this works really well for these Java types of
projects, because they already have their own world,

00:48:52.409 --> 00:48:57.559
their own way of doing things, that works really
well, that they've tuned over the years for Java.

00:48:57.559 --> 00:49:00.920
So we're going to leverage that from the Organizer.

00:49:00.920 --> 00:49:08.500
So let's go hands on and see what happens when
we actually create an ant based Java project.

00:49:08.500 --> 00:49:14.690
Now I said we had some Java templates
already as examples of Organizer templates.

00:49:14.690 --> 00:49:19.289
And you can see those in new from template,
right in the action menu from the Organizer.

00:49:19.289 --> 00:49:23.190
So what we're going to do is just
create a simple Java applet,

00:49:23.190 --> 00:49:30.920
and we'll put it on our desktop,
and let's just name it hello applet.

00:49:33.650 --> 00:49:38.900
When we create it, of course, the folder
is created on our desktop that contains all

00:49:38.900 --> 00:49:41.789
of the Java files, the ant build script, and so on.

00:49:41.789 --> 00:49:46.150
Let's expand it in the Organizer to
see what it actually laid down for us.

00:49:46.150 --> 00:49:49.220
And you see that it actually put down a folder structure.

00:49:49.219 --> 00:49:57.309
Now let's highlight the Java file, and then pull
down the build menu, just to see what's in it.

00:49:57.309 --> 00:50:02.860
You can see that it has multiple layers of hierarchy in it,

00:50:02.860 --> 00:50:11.940
so you can see that it shows the applet the hello
applet directory itself has the ant, the ant compile,

00:50:11.940 --> 00:50:19.769
and ant jar actions on it, and then the source
directory doesn't have any actions to find on it.

00:50:19.769 --> 00:50:25.039
What this shows is that you can actually define
actions on different levels of hierarchy,

00:50:25.039 --> 00:50:29.889
and whenever you define an action on a level
of hierarchy, or whenever you have a selection,

00:50:29.889 --> 00:50:36.239
you can actually use the actions that are at that level,
or any higher level, to operate on that selection.

00:50:36.239 --> 00:50:41.949
For example, if you have, say, things that you need to do
across your entire project, like get the status of something

00:50:41.949 --> 00:50:47.669
from your source code management system, you
can put those at the very root of your project,

00:50:48.960 --> 00:50:56.240
and then invoke them on any item within your
project, no matter what subdirectory it's in.

00:50:56.239 --> 00:51:02.159
Now let's just show the embedded editor, and you can
see that we'll still have Java syntax highlighting

00:51:02.159 --> 00:51:10.420
that we have the pop up menu for our
classes, and functions, and so on.

00:51:10.420 --> 00:51:17.170
And let's just change the text that we're
going to show from hello world to hello WWDC.

00:51:17.170 --> 00:51:22.309
I just want to show you that we're not pulling this
out of the oven, that this is real and building live.

00:51:22.309 --> 00:51:28.670
Let's save the file, and go to the build toolbar item.

00:51:28.670 --> 00:51:31.099
Pull it down and choose ant.

00:51:31.099 --> 00:51:33.349
And that does the whole build process.

00:51:33.349 --> 00:51:40.360
You can see that it brings up the Xcode build
window, and it actually uses the Xcode build window,

00:51:40.360 --> 00:51:45.789
because that has a lot of knowledge about how to display
errors and warnings, and if you actually get errors

00:51:45.789 --> 00:51:50.500
and warnings in your code that's being built
through the Organizer, as long as those errors

00:51:50.500 --> 00:51:54.170
and warnings are generated in a
fashion that Xcode can understand,

00:51:54.170 --> 00:52:01.590
Xcode will take you to the appropriate source code
when you click on them, it will show the source code

00:52:01.590 --> 00:52:03.570
in the embedded editor in the build panel.

00:52:03.570 --> 00:52:09.490
It will show it can take you straight to a
separate editing window, or to the Organizer,

00:52:09.489 --> 00:52:13.779
and it can even show you message bubbles in your source.

00:52:13.780 --> 00:52:18.700
So we can see that this built successfully, and it
added a bunch of additional folders to the Organizer,

00:52:18.699 --> 00:52:21.939
because it put a bunch of additional folders on disk.

00:52:21.940 --> 00:52:30.780
What we're going to do is just go to the disk folder, and
we can highlight the HTML document that got put in there

00:52:30.780 --> 00:52:35.800
to contain our applet, and we can control
click, or click on the action button

00:52:35.800 --> 00:52:38.380
to see the actions that are available on this.

00:52:38.380 --> 00:52:43.530
Now, there are a couple that include
reveal on finder, and open in finder.

00:52:43.530 --> 00:52:48.320
Since this is an HTML document, chances are that
opening in the finder will open it in Safari.

00:52:48.320 --> 00:52:49.660
So let's just do that.

00:52:49.659 --> 00:52:58.519
Let's open it in the finder, Safari opens, and we
see hello WWDC, because Safari ran our Java applet.

00:52:58.519 --> 00:53:02.710
We've created this Java applet without
bothering with Xcode projects at all.

00:53:02.710 --> 00:53:07.110
Instead, we've just used the ant infrastructure.

00:53:07.110 --> 00:53:15.300
So let's go back to the slides and
talk a little bit more about this.

00:53:15.300 --> 00:53:20.710
We saw how we can integrate with the mainstream
of Java development through the Organizer

00:53:20.710 --> 00:53:29.030
by intuiting what's available in an ant based project,
and just running the ant scripts ourselves through ant.

00:53:29.030 --> 00:53:34.080
And you can really use this to work
with any external build environment.

00:53:34.079 --> 00:53:40.110
So you can use Makefiles, you can use rake files,
you can completely invent your own build environment.

00:53:40.110 --> 00:53:45.390
I've heard some people still use JAM, and
in fact, JAM is a pretty cool environment.

00:53:45.389 --> 00:53:52.829
So this is a great way to leverage
Xcode for a JAM based project.

00:53:52.829 --> 00:53:57.730
Now one other thing that, at least I tend to do,

00:53:57.730 --> 00:54:01.579
is I want to get a quick start with
a new language or a new technology.

00:54:01.579 --> 00:54:06.670
And, you know, the obvious case of this are
the people who just get a Mac, they say, Okay,

00:54:06.670 --> 00:54:08.450
I want to learn how to program this thing.

00:54:08.449 --> 00:54:11.919
I've never programmed before, I'm new
to programming, and where do I start?

00:54:11.920 --> 00:54:13.789
Obviously, we're not new to programming.

00:54:13.789 --> 00:54:18.340
We're all developers, but in a lot of ways,
whenever we do want to learn a new technology

00:54:18.340 --> 00:54:21.320
or a new language, we sort of go back to square one.

00:54:21.320 --> 00:54:28.210
And for really small projects, starting
out by creating projects in Xcode feels

00:54:28.210 --> 00:54:30.329
like you're pulling out a really big gun.

00:54:30.329 --> 00:54:37.579
You know, you don't really want to you don't really
need to use heavy artillery just for target practice.

00:54:37.579 --> 00:54:46.369
But with the Organizer templates, and with the Organizer
itself, Xcode 3.0 is a lot easier to use for getting started

00:54:46.369 --> 00:54:50.049
with this kind of new technology process.

00:54:50.050 --> 00:54:57.280
So let's just see what standard C 101 would look like
when using the Organizer instead of the command line.

00:54:57.280 --> 00:55:01.350
So what we're going to do is just go through the
process of printing hello world to the terminal,

00:55:01.349 --> 00:55:07.909
and then we've already done that once, and instead of
using an Xcode project for that and figuring out, well,

00:55:07.909 --> 00:55:10.949
where do we start, what do we modify,
what does all this stuff mean,

00:55:10.949 --> 00:55:16.279
how do we debug it, where what goes on in this huge thing?

00:55:16.280 --> 00:55:20.610
We're just going to create a folder,
put some source in it, and go.

00:55:20.610 --> 00:55:23.940
So let's go hands on to the demo machine.

00:55:23.940 --> 00:55:29.389
And you can see that we've cleaned our Organizer out again.

00:55:29.389 --> 00:55:33.960
And let's just create a simple folder
to contain our hello world example.

00:55:33.960 --> 00:55:35.230
Let's just call it hello.

00:55:35.230 --> 00:55:37.139
We can call it anything we want.

00:55:37.139 --> 00:55:46.069
And we can drag it to the Organizer, like
always, making it available to Xcode.

00:55:46.070 --> 00:55:50.900
And we can just put a file in it through the new file item.

00:55:52.070 --> 00:56:12.100
And we'll rename that to hello.c. And of course, the finder
asks us if we really want to put an extension on that file.

00:56:12.099 --> 00:56:13.469
In this case, we do.

00:56:13.469 --> 00:56:18.299
Now, let's just use the embedded editor to
put in sort of our standard hello world.

00:56:18.300 --> 00:56:27.440
So, of course, we include stdio.h. And all of the
things that we saw before with adding a main function.

00:56:27.440 --> 00:56:54.760
And we'll probably want to put the \n inside the quotes.

00:56:54.760 --> 00:57:06.630
Now we've got our standard C 101 program here.

00:57:06.630 --> 00:57:08.930
Well, what do we do with it?

00:57:08.929 --> 00:57:13.250
Typically a book that's introducing C programming,
or something like that, will say, Well,

00:57:13.250 --> 00:57:20.659
you type at the command line gcc hello.c -o hello,
or something to that effect.

00:57:20.659 --> 00:57:26.210
Well, rather than pulling up terminal and figuring out
where to CD to, and how to use terminal, and all that,

00:57:26.210 --> 00:57:29.769
let's just edit an action under the build item.

00:57:29.769 --> 00:57:33.530
We can create a new text script.

00:57:33.530 --> 00:57:38.310
Call it build.

00:57:38.309 --> 00:57:48.320
And we'll just fill in gcc -g hello.c, and we'll say -o hello.

00:57:48.320 --> 00:58:06.690
Now if we click OK, and we go back to the build item
and choose our new build action, we see that it builds.

00:58:06.690 --> 00:58:12.960
You show again, it shows us through the
standard Xcode build window what it builds,

00:58:12.960 --> 00:58:20.240
and we see that we've gotten a dSym file, and
that we've got a hello executable in there.

00:58:20.239 --> 00:58:22.509
Now let's say we actually want to run that.

00:58:22.510 --> 00:58:23.700
Well, what do we do?

00:58:23.699 --> 00:58:26.319
Again, our book might say you type

00:58:26.320 --> 00:58:33.630
./hello. Well, in this case, well,
let's say that we want to clean up.

00:58:33.630 --> 00:58:37.720
You know, we've made some mistake, or we
just want to be able to rebuild things first.

00:58:37.719 --> 00:58:40.959
Before we run things, let's make sure we know how to clean.

00:58:40.960 --> 00:58:45.829
So let's add an item to the clean menu item, and say clean.

00:58:45.829 --> 00:58:57.159
And let's just make it rm - rf, or rm -f rather, that
hello executable, and let's make it rm -rf hello.dSym.

00:58:57.159 --> 00:59:02.779
The dSym file is our debugging symbol information,
and you'll see why that's important later.

00:59:02.780 --> 00:59:09.920
And actually that needs to be spelled with capitals.

00:59:09.920 --> 00:59:13.220
The last I believe SYM is capitalized.

00:59:13.219 --> 00:59:28.369
Yeah. So that way if we were to execute clean, we'll see,
again, that it removed all the files that it had just added.

00:59:28.369 --> 00:59:30.170
Now let's rebuild it.

00:59:30.170 --> 00:59:37.250
It built really fast because we're just invoking gcc once.

00:59:37.250 --> 00:59:44.349
We can go to the run menu item, and show Xcode
or show Xcode's Organizer how to run this tool.

00:59:44.349 --> 00:59:49.440
So we're just going to create a
new action under run called run.

00:59:49.440 --> 00:59:54.429
And again, we just create a new
script command, but in this case,

00:59:54.429 --> 00:59:59.289
we're going to replace the entire
contents of that script command with just

00:59:59.289 --> 01:00:05.480
./hello. And this is because Xcode will interpret
the contents of this script as a command line,

01:00:05.480 --> 01:00:11.090
and figure out how to run just this command directly.

01:00:11.090 --> 01:00:16.660
So we can click OK, and now we can choose our run command.

01:00:16.659 --> 01:00:23.379
And you can see that it brought up our debugger's console.

01:00:23.380 --> 01:00:27.530
And unfortunately, due to a bug
in X, in this release of Xcode,

01:00:27.530 --> 01:00:31.110
you'll need to resize the window
a little bit to see its output.

01:00:31.110 --> 01:00:33.240
We're working on that.

01:00:33.239 --> 01:00:35.209
But you can see that it printed our hello WWDC.

01:00:35.210 --> 01:00:43.309
Now if we close this window, and we want to debug what
we've just created say it didn't print what we wanted,

01:00:43.309 --> 01:00:44.690
we can just do the same thing.

01:00:44.690 --> 01:00:47.630
We can duplicate our text script.

01:00:47.630 --> 01:00:55.640
We can name the new one debug,
and we can replace its contents

01:00:55.639 --> 01:00:58.750
with what we would normally use
to debug this on the command line.

01:00:58.750 --> 01:01:04.269
We can just say gdb ./hello,

01:01:04.269 --> 01:01:11.480
click OK, and then we can actually
set a break point in, say, our main.c file.

01:01:11.480 --> 01:01:21.440
So let's say we want to break on printf.
If we go to the if we go to the build menu,

01:01:21.440 --> 01:01:27.250
the build menu in the menu bar,
rather than the toolbar, hmm.

01:01:27.250 --> 01:01:30.989
The run menu, I'm sorry.

01:01:30.989 --> 01:01:40.139
We can say activate break points, and now we
should be able to put a break point in that file.

01:01:40.139 --> 01:01:47.289
And unfortunately, the demo gods aren't smiling on us right
now, and we're not able to actually set that break point.

01:01:47.289 --> 01:02:01.440
But if we do choose debug from our if
we do choose debug from our run item,

01:02:01.440 --> 01:02:06.820
you can see that it is run through
Xcode's integrated debugger.

01:02:06.820 --> 01:02:10.890
And if we had been able to set that
break point, we would actually be stopped

01:02:10.889 --> 01:02:13.579
at that break point in the debugger right now.

01:02:13.579 --> 01:02:20.369
And if we show the debugger console, which you can see
at the right of the debugger window in the toolbar,

01:02:21.389 --> 01:02:25.049
just like last time, you can see that it shows hello world.

01:02:25.050 --> 01:02:29.530
Only this time, we ran gdb first.

01:02:29.530 --> 01:02:34.170
So let's go back to the slides and talk about
what we've learned in this whole session.

01:02:34.170 --> 01:02:42.809
So first, going back to standard C 101, we
saw how we could really just get started fast.

01:02:42.809 --> 01:02:48.949
We could just work with the same kind of flow that we
would normally have when developing on the command line,

01:02:48.949 --> 01:02:54.349
only what we're creating is persistent, and we can reuse it.

01:02:54.349 --> 01:02:58.799
We can scale up the environment with your with our needs.

01:02:58.800 --> 01:03:04.360
So for example, I may start out by just
invoking by just running what I'm trying

01:03:04.360 --> 01:03:07.730
to what I'm working on, but then I might start debugging it.

01:03:07.730 --> 01:03:11.929
Or I might start passing different command line
parameters to it, and different situations.

01:03:11.929 --> 01:03:14.529
I can keep all of those things around.

01:03:14.530 --> 01:03:20.900
You can customize and write your own commands for
anything that you put in the Organizer, and, of course,

01:03:20.900 --> 01:03:26.340
what you do in the Organizer integrates with the
rest of Xcode, including the Xcode debugger.

01:03:27.409 --> 01:03:35.349
So overall what we've seen today is that the
Organizer really lets us leverage Xcode to work

01:03:35.349 --> 01:03:39.549
on community and scripting oriented projects.

01:03:39.550 --> 01:03:46.450
It opens up the world of Xcode to a lot more projects
that would normally be handled on the command line,

01:03:46.449 --> 01:03:49.589
using the finder, using external text editors.

01:03:49.590 --> 01:03:56.150
So it makes it a lot easier for these projects
to come to Mac OS X, as they really want to,

01:03:56.150 --> 01:04:03.240
and take advantage of the best-of-breed user
experience that we have when working on their code.

01:04:03.239 --> 01:04:10.219
And of course, we can see how the Organizer
lets you scale up your use of Xcode,

01:04:10.219 --> 01:04:15.149
and Xcode's features with your project's needs.

01:04:15.150 --> 01:04:22.800
For more information, you can contact our developer
tools evangelist, Matthew Formica, and of course,

01:04:22.800 --> 01:04:29.840
we'll have documentation, sample code, and
other resources on the attendee website.

01:04:29.840 --> 01:04:36.600
We also have a couple of labs, including
an open lab, today at 3:30 where I'll be,

01:04:36.599 --> 01:04:39.579
and a bunch of other members of the Xcode team will be.

01:04:39.579 --> 01:04:42.380
And we have a developer tools lab tomorrow morning, as well.

01:04:42.380 --> 01:04:45.760
I'll be there, and a whole bunch of
other Xcode people will be there.

01:04:45.760 --> 01:04:49.230
And you can certainly ask us anything you want about this.