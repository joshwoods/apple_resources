WEBVTT

00:00:15.730 --> 00:00:22.329
>> Welcome to Refactoring in Xcode.
My name is Andrew Pontious.

00:00:22.329 --> 00:00:28.629
The agenda for today consists of three parts.

00:00:28.629 --> 00:00:34.129
First, what is refactoring and why would you want to do it?

00:00:34.130 --> 00:00:39.770
Second, we'll go through the refactoring
transformations in Xcode.

00:00:39.770 --> 00:00:42.750
The workflow, to do them.

00:00:42.750 --> 00:00:47.990
And third, we will give you some hints on
how to make the best use on refactoring

00:00:47.990 --> 00:00:53.100
and give you some things to consider when using it.

00:00:56.070 --> 00:01:04.299
For those of you were in this session last year, some of
this will be review and some of this will be entirely new.

00:01:04.299 --> 00:01:11.429
But before we get to that agenda, some of you may
be thinking project wide automatic code changes,

00:01:11.430 --> 00:01:15.900
I can do that already with project find and replace.

00:01:15.900 --> 00:01:23.609
So I'm going to give you an example that
those goes beyond project find and replace.

00:01:23.609 --> 00:01:31.760
Let's say you inherited a project from a co-worker,
but that co-worker, a little bit of a bird brain.

00:01:31.760 --> 00:01:37.080
When he was coming up with names for all of the
parts of his program, all he could think of was:

00:01:37.079 --> 00:01:47.079
( Plays audio clip from Disney's Finding Nemo.
Seagulls repeating mine, mine, mine )

00:01:47.079 --> 00:01:53.390
He had a class named Mine, a protocol
named Mine, a structure named Mine,

00:01:53.390 --> 00:01:56.409
a function named Mine, a method named Mine.

00:01:56.409 --> 00:01:58.500
You get the picture.

00:01:58.500 --> 00:02:03.870
So, what we'd like to do is change
the class named Mine to its real name.

00:02:03.870 --> 00:02:06.010
And we'll show that to you right now.

00:02:06.010 --> 00:02:07.740
Can we switch to the demo machine?

00:02:07.739 --> 00:02:16.359
Can we switch to the demo machine?

00:02:19.430 --> 00:02:23.430
Are we all set, oh ok thank you.

00:02:23.430 --> 00:02:28.200
On our demo machine this morning, Yugi Yakomoto.

00:02:28.199 --> 00:02:29.909
Ah great.

00:02:29.909 --> 00:02:31.889
( applause )

00:02:31.889 --> 00:02:36.459
>> Return engagement from last year.

00:02:36.460 --> 00:02:44.990
Okay, so we bring up the project find window and
we type in the word mine, click the find button.

00:02:44.990 --> 00:02:51.460
And you can see there are quite a few results there.

00:02:51.460 --> 00:03:03.319
So if we go to look at some of these results for example
the ClassMineFunction.m file, quite a few results.

00:03:03.319 --> 00:03:13.959
We can see that interspersed among the usages of the class
named mine there are also uses of the method named mine,

00:03:13.960 --> 00:03:16.879
even a string named mine, all sorts of things.

00:03:16.879 --> 00:03:24.359
So if you wanted to replace just the class names,
you'd have to pick out exactly which results you wanted

00:03:24.360 --> 00:03:30.350
and then click the replace button, do a build and make
sure you had selected everything that you needed to select

00:03:30.349 --> 00:03:34.549
that you didn't select things you
weren't supposed to select.

00:03:34.550 --> 00:03:38.600
It'd be really messy, really tedious
thing to do, it would be a minefield.

00:03:38.599 --> 00:03:39.079
( laughter )

00:03:39.080 --> 00:03:39.560
( applause )

00:03:39.560 --> 00:03:44.930
>> Not my joke.

00:03:44.930 --> 00:03:55.909
Okay, so if instead we go to the Mine.h file
and select the class name mine, the string,

00:03:55.909 --> 00:04:04.639
and bring up the refactoring window and we type in
the new name we want in this case drawing engine,

00:04:04.639 --> 00:04:10.349
click the rename related files check
box and click the preview button.

00:04:10.349 --> 00:04:14.019
Pretty quick, huh?

00:04:14.020 --> 00:04:21.600
So if we look at the results here you can see
that for that same file that we were looking

00:04:21.600 --> 00:04:27.140
at before what refactoring has done for you is picked
out exactly the ones you wanted to change for you.

00:04:27.139 --> 00:04:29.169
It's left the methods, it's left the string.

00:04:29.170 --> 00:04:34.790
Now if we look a little further we can see to the next file

00:04:34.790 --> 00:04:41.230
of Mine.h. We're actually renaming
Mine.h and Mine.m to the new names.

00:04:41.230 --> 00:04:50.439
Now very common custom in Cocoa programming, when you name a file the
same name as the class, you want those to stay in sync.

00:04:50.439 --> 00:04:56.069
And refactoring does that for you and in fact it even
changes import statements that refer to those files.

00:04:56.069 --> 00:05:04.800
Great. We can click the apply button and that will
make the changes in the files in your project.

00:05:06.889 --> 00:05:11.769
But you see there's even more to it than that.

00:05:11.769 --> 00:05:13.049
Save this file here.

00:05:13.050 --> 00:05:18.980
If you go back to the project window
you can see that in fact this project is

00:05:18.980 --> 00:05:21.650
under a source control management system.

00:05:21.649 --> 00:05:26.979
And you can see with the ClassMineFunction.m there's
an m next to it, it's a little cut off because the font is

00:05:26.980 --> 00:05:32.810
so big, but that's telling us that we made those changes
and the source control management system recognizes that.

00:05:32.810 --> 00:05:36.829
But next to the new class names,
there's an a. And what does that mean?

00:05:36.829 --> 00:05:41.259
That means that what refactoring has done is it's noticed
that you're using a source control management system

00:05:41.259 --> 00:05:46.750
and instead of just changing the files on disk it's
also changed them in your local repository for you.

00:05:46.750 --> 00:05:52.139
So all you would need to do to upload these
changes is do one commit and you're done.

00:05:52.139 --> 00:05:53.379
Pretty cool, huh?

00:05:53.379 --> 00:05:57.469
( applause )

00:05:57.470 --> 00:06:00.500
>> Okay. So we can switch back to the slide machine.

00:06:00.500 --> 00:06:04.430
Now that I've given you a taste of what
refractory can do for you I will bring

00:06:04.430 --> 00:06:07.920
up Robert Bowdidge to get started with our agenda.

00:06:07.920 --> 00:06:09.100
Thanks.

00:06:15.279 --> 00:06:17.569
>> Thank you Andrew.

00:06:17.569 --> 00:06:24.589
Okay. So Andrew's given you an example
of what refactoring looks like.

00:06:24.589 --> 00:06:31.500
What I would like to do is tell you what refactoring
is and why you want to use it on your own projects.

00:06:31.500 --> 00:06:38.379
So if I was asked to define what refactoring is, this
is what I'd say: Refactoring is a way to make global,

00:06:38.379 --> 00:06:42.420
structural, controlled changes to a program.

00:06:42.420 --> 00:06:45.259
The changes are global because
they affect all your source code.

00:06:45.259 --> 00:06:50.430
When you go and you say I want to rename this
declaration, it's changed in all the places it appears.

00:06:50.430 --> 00:06:53.850
The changes are structural because they're
affecting the design of your program.

00:06:53.850 --> 00:06:58.750
They're affecting what abstractions exist, what
they're called, how they relate to each other.

00:06:58.750 --> 00:07:02.819
And the changes are controlled they're not just
a set of edits, but they're actually trying

00:07:02.819 --> 00:07:05.069
to maintain certain properties about the code.

00:07:05.069 --> 00:07:09.199
Refactoring tries to make sure your code
still compiles the same before as after.

00:07:09.199 --> 00:07:14.300
And that it has the same running behavior before as after.

00:07:14.300 --> 00:07:23.060
Now why would you want to use refactoring and there's two
good reasons to use it: the first one is it allows you

00:07:23.060 --> 00:07:27.370
to make your code more maintainable and more understandable.

00:07:27.370 --> 00:07:37.530
For example, let's imagine that we're
writing a program to run a car rental agency.

00:07:37.529 --> 00:07:42.179
And one of the classes we're liable to have in
that application is something called CarRental

00:07:42.180 --> 00:07:45.980
which has all the information about
a specific rental experience.

00:07:45.980 --> 00:07:51.090
And this is a fine name, I would've done
this if I had written the program myself.

00:07:51.089 --> 00:07:55.599
However let's imagine that you decide to change
the program and you decide to start allowing

00:07:55.600 --> 00:07:58.540
that you can rent trucks as well as cars.

00:07:58.540 --> 00:08:01.170
And the problem is now this name is inappropriate.

00:08:01.170 --> 00:08:05.210
That whenever you or anybody else on
the team looks at the code they're going

00:08:05.209 --> 00:08:09.500
to say okay was this just on the
cars or is this for everything.

00:08:09.500 --> 00:08:16.189
And so what you'd like to be able to do is
change that name with a rename refactoring

00:08:16.189 --> 00:08:21.069
so that the name is something more generic like rental
record so you know that this is nor just car specific

00:08:21.069 --> 00:08:23.099
but it's for all the vehicles you're renting.

00:08:23.100 --> 00:08:30.689
Now the second reason you can use refactoring is
it makes it easier to apply certain enhancements.

00:08:33.320 --> 00:08:38.580
So for example, there's the case of partitioning a class

00:08:38.580 --> 00:08:42.340
so in the car rental example you'll
probably have a class called car

00:08:42.340 --> 00:08:45.280
that has all the information about
one of the cars being rented.

00:08:45.279 --> 00:08:50.019
And that car as you can see on the left hand
side has some information that's probably generic

00:08:50.019 --> 00:08:56.399
like what the odometer reading is, when the car
was last serviced and then that class is also going

00:08:56.399 --> 00:08:58.929
to have methods that are more specific about cars.

00:08:58.929 --> 00:09:03.199
How many seats does it have, does it
have a radio, does it have a roof rack.

00:09:03.200 --> 00:09:06.090
And this is a perfectly fine way to structure the program.

00:09:06.090 --> 00:09:10.129
However let's imagine that you
decide to start renting trucks now.

00:09:10.129 --> 00:09:15.830
And the problem is that you'd like to be able to reuse
some of that code in the car class, the generic stuff.

00:09:15.830 --> 00:09:22.320
And so you can use refactoring to break that class into two
pieces so you now have a generic vehicle class like you see

00:09:22.320 --> 00:09:25.910
on the right that has all the generic
behavior and the subclass of that

00:09:25.909 --> 00:09:29.389
which is the car class that has all the car behavior.

00:09:29.389 --> 00:09:32.549
And once you've done this, it's easy to make the truck class

00:09:32.549 --> 00:09:38.579
that inherits off a vehicle and
you get all that code for free.

00:09:38.580 --> 00:09:44.020
Another example of how refactoring can help
enhance code is the idea of encapsulation.

00:09:44.019 --> 00:09:49.210
So let's imagine that you have a class called CarRental
which represents the information about the rentals,

00:09:49.210 --> 00:09:52.320
and that class probably has an
instance variable called dailyRate

00:09:52.320 --> 00:09:54.280
which represents the cost to rent that car for a day.

00:09:54.279 --> 00:09:59.049
And that variable is probably accessed
in a lot of places in your code.

00:09:59.049 --> 00:10:01.359
There's probably places where you're
changing the value based

00:10:01.360 --> 00:10:04.440
on what the discount rate is for
the person who's renting the car.

00:10:04.440 --> 00:10:08.100
There might be something that accesses
the daily rate to print out the receipt.

00:10:08.100 --> 00:10:11.120
And those are just going to access it directly

00:10:11.120 --> 00:10:13.830
That seems like a fine way to write the program.

00:10:13.830 --> 00:10:19.520
However what happens when you decide that, that daily
rate shouldn't be just a variable set in the class

00:10:19.519 --> 00:10:23.000
but it should be accessing a database
so that the rates are consistent.

00:10:23.000 --> 00:10:28.049
And if you want to make that change now you have to go
to every place where daily rate's referenced and you have

00:10:28.049 --> 00:10:30.979
to figure out okay how does this
relate to the database example.

00:10:30.980 --> 00:10:33.940
You know how do I need to change my code
so that it will work with the database.

00:10:33.940 --> 00:10:40.160
And the problem is that's going to be a lot of work, you
have to go to a bunch of places, it's easy to make mistakes

00:10:40.159 --> 00:10:44.189
and what you'd prefer to do is be able to
convert the code to what you see on the right.

00:10:44.190 --> 00:10:49.470
Where you encapsulate all the references to daily
rate so that their hidden behind a getter and setter.

00:10:49.470 --> 00:10:54.000
And once you've done that and all the
various code that was accessing it now goes

00:10:54.000 --> 00:10:57.809
through these functions all you have
to do is change those two functions.

00:10:57.809 --> 00:11:03.739
And now you can do whatever behavior you
need to change how daily rate's represented.

00:11:03.740 --> 00:11:08.610
Now we as programmers do this kind of stuff already,
we already do renames, we already do refactoring,

00:11:08.610 --> 00:11:12.360
but the problem is that it's an
error prone and tedious activity.

00:11:12.360 --> 00:11:15.720
And so every time that I do this sort of thing,

00:11:15.720 --> 00:11:20.700
I have to ask myself am I introducing
subtle bugs into my code by doing this?

00:11:20.700 --> 00:11:25.509
And if you want to do refactoring correctly you need
to follow some steps kind of like what we have here.

00:11:25.509 --> 00:11:29.000
So first of all you need to compile
your code and run your unit test

00:11:29.000 --> 00:11:32.190
to make sure the program behaves the way you think it does.

00:11:32.190 --> 00:11:35.150
Then you have to test some preconditions
for that transformation.

00:11:35.149 --> 00:11:38.689
So for example, in the case of rename
you need to make sure that every place

00:11:38.690 --> 00:11:42.840
where the declaration is used doesn't have
something already defined with the name

00:11:42.840 --> 00:11:45.750
of the new name where you have conflicts.

00:11:45.750 --> 00:11:50.409
Or in the case of encapsulation you'd have to look at
every place in the code and decide whether the variable

00:11:50.409 --> 00:11:56.339
that you're encapsulating can be changed
into either a getter or setter call.

00:11:56.340 --> 00:12:01.870
Once you've decided that the transformation is safe, now
you actually need to go through the code from top to bottom

00:12:01.870 --> 00:12:06.740
and at every single place that you need to change you need
to make exactly the right change in exactly the right place.

00:12:06.740 --> 00:12:10.090
And if you mess up you introduce subtle bugs into your code.

00:12:10.090 --> 00:12:14.030
And then once you're done now you need to
recompile the code to make sure it still compiles.

00:12:14.029 --> 00:12:18.649
And you need to run your unit test to
make sure that it still behaves the same

00:12:18.649 --> 00:12:21.090
But why do we have to do that?

00:12:21.090 --> 00:12:27.220
We have tools that already understand our source code we
have compilers, we have code completion in our editors.

00:12:27.220 --> 00:12:31.610
Why can't I as the programmer decide
what my design should look like so

00:12:31.610 --> 00:12:34.440
that I can tell my tools hey this is how I need this to be?

00:12:34.440 --> 00:12:38.070
And the tools can do all the nasty,
dirty work to actually make that true,

00:12:38.070 --> 00:12:40.860
can make the changes, can prove the changes are safe.

00:12:40.860 --> 00:12:47.039
And tools like this exist for other
platforms and for other languages.

00:12:47.039 --> 00:12:50.209
But in general they haven't been
available for Objective-C programmers.

00:12:50.210 --> 00:12:57.320
And so the key issue in this session is that
Xcode 3.0 now has refactoring support.

00:12:57.320 --> 00:13:04.150
And more than just support it's been optimized
for Apple's languages and Apple's environment.

00:13:04.149 --> 00:13:12.309
So Xcode 3.0 will allow you to change
C and Objective-C source files in your projects,

00:13:12.309 --> 00:13:15.769
the transformations understand the new
Objective-C 2.0 language features

00:13:15.769 --> 00:13:19.230
and in fact there's some transformations
specific to Objective-C 2.0.

00:13:19.230 --> 00:13:25.940
Xcode also understands that your source
code isn't just your source files.

00:13:25.940 --> 00:13:28.010
That there's other things that
affect the behavior of your code.

00:13:28.009 --> 00:13:31.330
For example, there's nib files
which describe the user interface.

00:13:31.330 --> 00:13:35.509
And there's core data files which describe
how it interacts with the database.

00:13:35.509 --> 00:13:41.549
And then you have key-value coding so that you
can access fields of a class by name, by string.

00:13:44.450 --> 00:13:50.280
And most importantly we realize that your
programs aren't just little small examples.

00:13:50.279 --> 00:13:55.350
You have real programs of hundreds of thousands of lines
and so we've worked hard to make sure that this will work

00:13:55.350 --> 00:13:58.659
on hundreds of thousands of lines of code on large projects.

00:13:58.659 --> 00:14:08.949
Now there's five kinds of refactoring
transformations that Xcode 3.0 supports.

00:14:08.950 --> 00:14:13.820
And the operations are called transformations because
they have the mathematical sense of converting something

00:14:13.820 --> 00:14:17.860
from one form to another in a very controlled way.

00:14:17.860 --> 00:14:23.730
The first kind of transformation is rename
as you saw, that Andrew demonstrated.

00:14:23.730 --> 00:14:27.870
And the rename transformation will allow you
to rename classes and functions and methods

00:14:27.870 --> 00:14:30.090
and categories and protocols and everything.

00:14:30.090 --> 00:14:35.250
The second kind of transformation that
we have is an extract transformation.

00:14:35.250 --> 00:14:41.490
This allows you to select a block of code in your
program and say I need this to be a new function.

00:14:41.490 --> 00:14:45.940
And Xcode will automatically make the new function, put
in the function call, choose what the parameters need to be

00:14:45.940 --> 00:14:50.750
and this gives you a way to make your code more
understandable by breaking up large functions

00:14:50.750 --> 00:14:58.889
or it allows you to break code off into a new method so
that you can actually reuse the behavior or change it.

00:14:58.889 --> 00:15:03.509
The third kind of transformation that Xcode
supports manipulates the class hierarchy.

00:15:03.509 --> 00:15:06.090
These are transformations for creating
an abstract superclass.

00:15:06.090 --> 00:15:09.009
For moving instance variables up and down on the hierarchy.

00:15:09.009 --> 00:15:13.379
The fourth class are the encapsulate transformations.

00:15:13.379 --> 00:15:16.939
These allow you to wrap either a field
of a structure or an instance variable

00:15:16.940 --> 00:15:20.230
in the class behind getter and setter methods.

00:15:20.230 --> 00:15:24.340
And finally there's transformation specific
to Objective-C 2.0 that allow you

00:15:24.340 --> 00:15:33.660
to automatically convert iterators of our
NS arrays and NS sets into the new for in notation

00:15:33.659 --> 00:15:39.529
with Objective-C 2.0 that's
both faster and easier to understand.

00:15:39.529 --> 00:15:44.439
And there's also a transformation that will convert
instance variables in your code into properties

00:15:44.440 --> 00:15:46.360
so you can see what properties look like.

00:15:46.360 --> 00:16:01.490
Now to actually demonstrate these I'd like to bring Andrew
Pontious back on stage to show you the features in Xcode.

00:16:01.490 --> 00:16:01.759
( applause )

00:16:01.759 --> 00:16:02.019
>> Thank you.

00:16:02.019 --> 00:16:13.100
Thank you Robert.

00:16:13.100 --> 00:16:16.490
So I'm going to walk you through these transformations.

00:16:16.490 --> 00:16:19.029
For some of them I will be doing a demonstration for you,

00:16:19.029 --> 00:16:26.949
for some of them due to time considerations I will just
be showing you some slides about them, some use cases.

00:16:26.950 --> 00:16:29.879
So we'll start with rename.

00:16:29.879 --> 00:16:36.269
Now to demonstrate rename for you and all of the other
transformations that we'll be demonstrating for you today,

00:16:36.269 --> 00:16:41.110
we're going to use a program called Bricksmith.

00:16:41.110 --> 00:16:47.080
Bricksmith is a real world, open
source, Cocoa based application.

00:16:47.080 --> 00:16:56.470
And what Bricksmith does for you is it lets you model
creations made out of Lego bricks, so you can both see them

00:16:56.470 --> 00:17:01.230
and you can make little instructions
for other people to use them as well.

00:17:01.230 --> 00:17:12.569
Now one of the things that happens with open source
projects is that you can get contributions from anywhere.

00:17:12.569 --> 00:17:17.079
You can get them from all over the
world, from people that you don't know.

00:17:17.079 --> 00:17:22.929
So sometimes these contributions might be in
the wrong format for the existing program.

00:17:22.930 --> 00:17:26.000
So we're going to look at a case
where we need to change that.

00:17:26.000 --> 00:17:28.480
Can we switch to the demo machine?

00:17:28.480 --> 00:17:36.599
So as you can see Yugi is playing around a
little bit with the Bricksmith user interface.

00:17:36.599 --> 00:17:45.949
There's a pretty neat spaceship there, spaceship creation,
and he's putting a mini figure inside of the cockpit.

00:17:45.950 --> 00:17:48.450
So pretty cool stuff.

00:17:48.450 --> 00:17:58.440
So now if we go back to the Bricksmith project, and we look
through the files in it, you can see that many of the files

00:17:58.440 --> 00:18:01.830
in this project start with the prefix LDraw.

00:18:01.829 --> 00:18:04.799
So the files are of the form LDraw plus something.

00:18:04.799 --> 00:18:12.659
But there's one file, there's one set of files in
the list where the pattern is LDrawn plus something.

00:18:12.660 --> 00:18:17.610
And you can see that, that's for
the class called LDrawnPart.

00:18:17.609 --> 00:18:25.639
So if we open up, save the header file, we're going to
rename this file so that it matches all of the others.

00:18:25.640 --> 00:18:31.430
So we can bring up the refactoring window, there
are several ways to bring up the refactoring window,

00:18:31.430 --> 00:18:40.279
you can use the main menu bar, edit menu which has a
refactor menu item, you can use the contextual menu

00:18:40.279 --> 00:18:47.369
for the text selection that you've made,
and you can also use a tool bar item

00:18:47.369 --> 00:18:52.429
that you can add to your Xcode window toolbar.

00:18:52.430 --> 00:18:57.610
Now when you've selected something which
represents something that can be refactored,

00:18:57.609 --> 00:19:01.289
the tool bar item, the menu item will all be enabled.

00:19:01.289 --> 00:19:05.129
If you select something which cannot
be refactored, for example blank space

00:19:05.130 --> 00:19:10.020
or comment, those items will be disabled.

00:19:10.019 --> 00:19:14.079
So let's bring up the refactoring window.

00:19:14.079 --> 00:19:21.490
And we'll rename that class to LDrawPart and do the same
thing we did the first time which is rename related files.

00:19:21.490 --> 00:19:22.630
Preview that.

00:19:22.630 --> 00:19:28.820
So as you can see as the preview's going on there,
you can see activity going on in the window.

00:19:28.819 --> 00:19:30.519
You can see what it's analyzing.

00:19:30.519 --> 00:19:35.690
Now if we look at the result in here, save the first file,

00:19:35.690 --> 00:19:41.950
you can see that we've changed the
usage of the LDrawnPart class.

00:19:41.950 --> 00:19:47.340
If we go down to the next file, you can see
as before we've changed an import statement.

00:19:47.339 --> 00:19:52.819
But the most interesting thing about this
demonstration occurs a little down further

00:19:52.819 --> 00:19:59.839
in the results area we are also changing instead of
just text files we're changing a nib file as well.

00:19:59.839 --> 00:20:02.279
So let's go to that.

00:20:05.269 --> 00:20:10.670
So you can see that the view that you see for nib files is
a little different than the view you see for text files.

00:20:10.670 --> 00:20:18.130
For the nib file what refactoring does is it shows you the
pieces, the parts of a nib that refactoring can change.

00:20:18.130 --> 00:20:26.020
These are broken up into categories, the first category
is the classes category because you can rename classes,

00:20:26.019 --> 00:20:31.539
if you go down a little further, you can see that
the second category is for object controllers.

00:20:31.539 --> 00:20:37.940
Object controllers refer to classes and you can see
that for each one of the object controllers here,

00:20:37.940 --> 00:20:44.000
it has the name of the class that it refers to in bold
and there are eight of these in particular nib file

00:20:44.000 --> 00:20:47.019
and they all refer to the LDrawnPart class.

00:20:47.019 --> 00:20:51.819
So what refactoring does for you is it
changes that reference to LDrawPart.

00:20:51.819 --> 00:20:56.210
That'll work so we can apply those changes.

00:20:59.569 --> 00:21:06.149
And we can switch back to the slide machine.

00:21:06.150 --> 00:21:09.680
Okay. Now that I've shown you a little
more about the rename transformation I'd

00:21:09.680 --> 00:21:14.850
like to walk you though the contents
of the refactoring window.

00:21:14.849 --> 00:21:18.250
The refactoring window is made up of three areas.

00:21:18.250 --> 00:21:24.859
From top to bottom they are, the set up area,
the results area and the comparison area.

00:21:24.859 --> 00:21:28.379
The first area you will see when you
bring up the refactoring window is the set

00:21:28.380 --> 00:21:32.190
up area, all the other areas start out blank.

00:21:32.190 --> 00:21:35.360
The set up area is where you set up your transformation.

00:21:35.359 --> 00:21:39.579
Type in what needs to be typed in, check
whatever check boxes need to be checked.

00:21:39.579 --> 00:21:48.369
Now another thing you'll see in the set up area, you can
see right now, is there's a checkbox called snapshot.

00:21:48.369 --> 00:21:55.009
And that's actually using the snapshot feature that's
new in Xcode 3.0 that was described

00:21:55.009 --> 00:21:58.849
in the Xcode 3.0 the new
development workflow yesterday in this room.

00:21:58.849 --> 00:22:03.219
And we'll talk a little bit more about that in a minute.

00:22:03.220 --> 00:22:04.730
Now if you don't want to do rename if you want

00:22:04.730 --> 00:22:10.569
to use a different transformation what you do is
you bring up the transformation pop up button.

00:22:10.569 --> 00:22:16.919
Now for this particular example, this
selection has no other relevant transformations.

00:22:16.920 --> 00:22:22.480
But we'll see later on in many cases, there will
be several available for you for your selection.

00:22:22.480 --> 00:22:27.069
Now when you click the preview button as you saw,
the next area comes up, this is the results area.

00:22:27.069 --> 00:22:33.679
And when the preview's going on the file that is currently
being analyzed will have a little progress spinner next

00:22:33.680 --> 00:22:34.519
to it.

00:22:34.519 --> 00:22:39.339
Files that have not yet been analyzed
will be in a lighter grey color.

00:22:39.339 --> 00:22:44.129
Now when the preview is done, most of
the files will show checkboxes next

00:22:44.130 --> 00:22:47.640
to them which means changes from the preview.

00:22:47.640 --> 00:22:52.310
Another thing you may see and we will
see in many of our examples today,

00:22:52.309 --> 00:22:56.389
is a new category called the errors and warnings category.

00:22:56.390 --> 00:23:00.830
Now why does refactoring show you this category?

00:23:00.829 --> 00:23:08.309
When refactoring is doing a transformation and it finds
something which it needs some help with where it knows

00:23:08.309 --> 00:23:13.250
or it suspects that it can't complete the
transformation, it will give you that information.

00:23:13.250 --> 00:23:16.750
For warnings it's when it isn't quite sure what to do.

00:23:16.750 --> 00:23:26.910
For example you're renaming something which is of type id
and so it can't perform the same kind of class inspection,

00:23:26.910 --> 00:23:32.700
class analysis that it normally would because
that's something that will only be known at runtime.

00:23:32.700 --> 00:23:37.259
For errors it's something where refactoring
knows that something's going wrong.

00:23:37.259 --> 00:23:40.119
And it may be something that you can fix, it may
be something that you just have to take note of

00:23:40.119 --> 00:23:44.869
but this transformation as it is, it knows will not succeed.

00:23:44.869 --> 00:23:47.479
And we'll see some examples of that too.

00:23:47.480 --> 00:23:54.490
Now if you select one of the files in the results area,
the third area comes up and that is the comparison area.

00:23:54.490 --> 00:23:59.059
The comparison area should remind you of another
application that comes with the Xcode tools

00:23:59.059 --> 00:24:02.519
that you've probably all used, file merge.

00:24:02.519 --> 00:24:09.379
Like file merge there are two subviews that shows two
different states of a file, like file merge there's a strip

00:24:09.380 --> 00:24:15.870
in the middle which has arrows to show the direction of
the changes whether the changes are being made or not.

00:24:15.869 --> 00:24:20.439
But there's several things where
it is unlike file merge as well.

00:24:20.440 --> 00:24:27.009
In file merge when you flip an arrow around so a change
will not be made, there's a merge view at the bottom

00:24:27.009 --> 00:24:30.039
that shows you the results of your choices.

00:24:30.039 --> 00:24:35.210
But in the refactoring window the
right hand view is the merge view.

00:24:35.210 --> 00:24:41.850
So you can see when we flip the arrow so a change
isn't being made that shows up on the right hand side.

00:24:41.849 --> 00:24:48.799
Another difference is that the results area
and the comparison area are kept synchronized.

00:24:48.799 --> 00:24:54.849
So in this case above what we've done is we've turned
off one change but two changes are still being made.

00:24:54.849 --> 00:24:57.649
So the checkbox changes to a mix state.

00:24:57.650 --> 00:25:03.769
If we flipped all the arrow around so that no
changes are being made the checkbox would become unchecked

00:25:03.769 --> 00:25:08.339
and if you flip them all around
again then it would become checked.

00:25:08.339 --> 00:25:13.899
Now this doesn't need to be driven from the arrow side
you can also check and uncheck the checkbox yourself

00:25:13.900 --> 00:25:17.940
and that will flip the arrows around
so everything is kept in sync.

00:25:17.940 --> 00:25:23.480
And the last way that the comparison view is
different is that you can actually put your cursor

00:25:23.480 --> 00:25:28.490
in the right hand side of this area and start typing.

00:25:28.490 --> 00:25:36.079
As you can see we've typed a one at the end of the parameter
name and what happens when you do this during a refactoring,

00:25:36.079 --> 00:25:40.970
is the icon for the file changes to a dirty state.

00:25:40.970 --> 00:25:46.539
So now that I've shown you that we can
go on to the extract transformation.

00:25:46.539 --> 00:25:49.089
Let me switch back to the demo machine.

00:25:52.869 --> 00:25:57.519
Okay so to show you extract we're
going to use some functionality

00:25:57.519 --> 00:26:01.220
from Bricksmith that has to do with the mini figure.

00:26:01.220 --> 00:26:07.269
A cute little figure you can get in Lego bricks there.

00:26:07.269 --> 00:26:12.639
So as you can see the mini figure has a lot
of different options that can be set for it.

00:26:12.640 --> 00:26:17.100
It can have a different hat, different
hair, different face, different arms

00:26:17.099 --> 00:26:20.689
and legs, different clothing, all sorts of things.

00:26:20.690 --> 00:26:27.039
So as you can imagine the method that brings all
that together is pretty long and pretty complicated.

00:26:27.039 --> 00:26:33.029
So it switched back to that, that's the mini figure
dialog controller classes method generate mini figure.

00:26:33.029 --> 00:26:36.799
Bring that up.

00:26:40.559 --> 00:26:44.379
And as we scroll down through that
you can see it's a pretty long method.

00:26:44.380 --> 00:26:50.230
Now the trouble with long methods like this is that
they're hard to maintain and they're hard to augment.

00:26:50.230 --> 00:26:56.960
Because whenever you change something inside of that
method, you have to make sure that you're not messing

00:26:56.960 --> 00:27:01.970
up functionality that exists anywhere
above and below what you're changing.

00:27:01.970 --> 00:27:08.819
So what you'd like to do is split this up into
discreet self contained identifiable chunks of logic

00:27:08.819 --> 00:27:11.960
and you can do that through the extract transformation.

00:27:11.960 --> 00:27:20.309
So let's start pretty much right at the top and
we'll select a piece of code and we'll bring

00:27:20.309 --> 00:27:23.159
up the refactoring window and we'll see what happens.

00:27:23.160 --> 00:27:27.990
As you can see for the extract transformation unlike
the other transformations that bit of analysis has

00:27:27.990 --> 00:27:34.750
to happen before it can even show you its
initial set up, user interface and options.

00:27:34.750 --> 00:27:42.599
As you can see what happens when that analysis
is done is refactoring shows you the signature

00:27:42.599 --> 00:27:44.869
of the method that it is going to extract.

00:27:44.869 --> 00:27:46.319
So let's preview that.

00:27:46.319 --> 00:27:48.500
Have a look.

00:27:48.500 --> 00:27:52.839
Ooh. Yeah that's s a pretty long method signature isn't it?

00:27:52.839 --> 00:27:59.929
So what's going on here is refactoring has done all
that analysis work that I told you about for you.

00:27:59.930 --> 00:28:04.880
What it's found is that all 15 of those
local variables that we selected are being created

00:28:04.880 --> 00:28:09.350
in that chunk of code are all needed later on.

00:28:09.349 --> 00:28:15.009
So what refactoring does is it creates out parameters for
those local variables If they were variables that needed

00:28:15.009 --> 00:28:18.970
to come in to the chunk of code
they would become input parameters.

00:28:18.970 --> 00:28:22.360
So what refactoring is actually telling
us here is this particular chunk

00:28:22.359 --> 00:28:26.279
of code is not a good candidate for our goal.

00:28:26.279 --> 00:28:28.220
It's not to be self contained.

00:28:28.220 --> 00:28:29.910
So let's try again.

00:28:29.910 --> 00:28:35.090
We can cancel out of this and select
some code a little farther down.

00:28:35.089 --> 00:28:38.029
The head pieces section.

00:28:38.029 --> 00:28:46.519
We bring up the refactoring window again,
a little bit more analysis going on.

00:28:46.519 --> 00:28:52.700
Now when we see the method for this
piece of code it's much more reasonable.

00:28:52.700 --> 00:28:54.870
Why don't you preview that here.

00:28:54.869 --> 00:28:57.569
Bring that up.

00:28:57.569 --> 00:29:03.419
You can see that for this method there are only three
input parameters, the head, hat and neck pieces.

00:29:03.420 --> 00:29:08.340
So that makes some more sense to extract that out.

00:29:08.339 --> 00:29:14.139
But before we go ahead and apply that let's have a look
at the other option that's available to you in extract

00:29:14.140 --> 00:29:18.200
which is instead of extracting a
method, you can extract a function.

00:29:18.200 --> 00:29:20.120
Now why would you want to do that?

00:29:20.119 --> 00:29:24.839
The thing about functions is they are
even more self contained than classes.

00:29:24.839 --> 00:29:28.419
So preview this.

00:29:28.420 --> 00:29:34.440
And what we see here is when we attempt to extract a
function from the same code there are more parameters.

00:29:34.440 --> 00:29:35.580
What's going on?

00:29:35.579 --> 00:29:39.309
What's going on is there's two methods that
we saw before the new one and the old one.

00:29:39.309 --> 00:29:43.389
We're actually communicating, had context
going back and forth that was hidden

00:29:43.390 --> 00:29:46.710
because it was the instance variables of the class.

00:29:46.710 --> 00:29:52.340
So what we see here is some of those instance variables are
actually needed by the functionality in the new method,

00:29:52.339 --> 00:29:56.919
new function, so that means that this is not
a good candidate for making a function out of.

00:29:56.920 --> 00:30:02.860
What you want to do for functions is make functionality
that can be used by more than one class that's very generic.

00:30:02.859 --> 00:30:07.909
So refactoring can do both those
things for you as appropriate.

00:30:07.910 --> 00:30:14.660
For now we'll switch back to extracting a method
and we'll call this method generate head pieces.

00:30:14.660 --> 00:30:19.550
And we can preview that again and apply it.

00:30:19.549 --> 00:30:20.659
And we're all done.

00:30:20.660 --> 00:30:24.650
Switch back to the slide machine.

00:30:31.450 --> 00:30:37.410
So the third set of transformations I'm going
to show you have to do with class hierarchy.

00:30:37.410 --> 00:30:39.810
Create superclass move up, move down.

00:30:39.809 --> 00:30:44.730
Now to show you these transformations,
I have to ask a simple question.

00:30:44.730 --> 00:30:47.890
What's better than this?

00:30:47.890 --> 00:30:50.360
Modeling Lego bricks.

00:30:50.359 --> 00:30:54.769
How about modeling Lincoln Logs?

00:30:54.769 --> 00:30:57.819
You guys know what Lincoln Logs are right?

00:30:57.819 --> 00:31:01.049
Okay well, look it up.

00:31:02.059 --> 00:31:07.849
So but what you actually want to do is you
don't just want to model one or the other.

00:31:07.849 --> 00:31:15.519
You want to do both, you want to use the existing modeling
infrastructure from Bricksmith and have it be able

00:31:15.519 --> 00:31:19.549
to do the same sorts of things,
the same generic things for both.

00:31:19.549 --> 00:31:22.259
So let's try that out.

00:31:22.259 --> 00:31:24.279
Switch back to the demo machine.

00:31:28.349 --> 00:31:34.189
Okay. So we'll go to the LDrawDocument class.

00:31:34.190 --> 00:31:45.830
Now just by it's name you can tell that it's actually
fairly intimately tied with the Lego bricks implementation.

00:31:45.829 --> 00:31:51.000
Actually, LDraw is an open standard for Lego modeling programs.

00:31:52.210 --> 00:31:58.029
But there is still some functionality in this
class that can be used for a generic modeling.

00:31:58.029 --> 00:32:05.109
So what we're going to do is we're going to create a superclass
of this specific class and then move stuff up to it.

00:32:05.109 --> 00:32:09.209
So we select the class name, bring
up the refactoring window again.

00:32:09.210 --> 00:32:14.700
And this time we're going to switch from the rename
transformation to the create superclass transformation.

00:32:14.700 --> 00:32:18.490
We'll type in a new name, the name will be modeling document

00:32:18.490 --> 00:32:28.009
since this is a generic modeling
class and we can preview that now.

00:32:28.009 --> 00:32:31.750
Interesting thing going on here, we see
our first warnings in a demonstration.

00:32:31.750 --> 00:32:38.430
And the warnings say import statement
may need to be changed.

00:32:38.430 --> 00:32:40.640
So let's look at the second warning.

00:32:40.640 --> 00:32:47.200
Now what you can see here, this particular import
statement that refactoring has created for you,

00:32:47.200 --> 00:32:53.090
what refactoring does is it takes the immediate
header file for a particular class and puts it

00:32:53.089 --> 00:32:55.039
in an import statement using quote notation.

00:32:55.039 --> 00:32:59.750
So straight, simple logic for you that's
available in Xcode 3.0.

00:32:59.750 --> 00:33:06.960
But we know in this particular case that NS document
is part of the umbrella framework, Cocoa framework.

00:33:06.960 --> 00:33:12.799
So what you really want to do here is
use the Cocoa framework umbrella header.

00:33:12.799 --> 00:33:19.779
So what you're just going to do here is type
in that umbrella header import statement.

00:33:19.779 --> 00:33:23.670
So we're using that capability of doing manual edits.

00:33:23.670 --> 00:33:27.529
Other than that, we're in good shape.

00:33:27.529 --> 00:33:34.339
So what you can see here is the first case of you
working with refactoring, you intervening as necessary

00:33:34.339 --> 00:33:37.369
to complete a transformation that refactoring began for you.

00:33:37.369 --> 00:33:40.959
Refactoring did all the work that it could, you do the rest

00:33:40.960 --> 00:33:44.620
and you can apply the changes and
know that everything will work.

00:33:44.619 --> 00:33:48.559
So you can go ahead and apply those changes.

00:33:48.559 --> 00:33:51.109
Okay so now we've created our superclass.

00:33:51.109 --> 00:33:53.159
Let's move some stuff up to it.

00:33:53.160 --> 00:33:58.990
Go back to the LDrawDocument class and if you look

00:33:58.990 --> 00:34:10.429
at the very first instance variable there it's
the tool bar controller instance variable.

00:34:10.429 --> 00:34:18.369
Now both the Lego document window and the brick I should
mean and the log modeling window will need a tool bar.

00:34:18.369 --> 00:34:21.679
So this is something that's generic
enough to be moved up to the superclass.

00:34:21.679 --> 00:34:29.089
So we select the instance variable, we bring up the
refactoring window again and we switch to move up

00:34:29.090 --> 00:34:37.340
and we're going to check the move up related
methods check box as well and preview that.

00:34:37.340 --> 00:34:45.769
Now there's no need for any other options for
what class to move your instance variable up to

00:34:45.769 --> 00:34:49.769
because in Objective-C a single
inheritance so there's only one superclass.

00:34:49.769 --> 00:34:55.989
As you can see in the errors and warnings section we're
letting you know that we're also moving up a method.

00:34:55.989 --> 00:35:02.979
So let's have a look at LDrawDocument.h.
And you can see that in this existing subclass,

00:35:02.980 --> 00:35:09.460
we've removed the instance variable if we scroll down
you can see we've also removed the method declaration.

00:35:09.460 --> 00:35:17.269
And if we look at the new class you can see that we've moved
in that instance variable and the method declaration to it.

00:35:17.269 --> 00:35:20.590
Okay? We can apply those changes.

00:35:20.590 --> 00:35:22.610
And alright.

00:35:22.610 --> 00:35:31.000
So we can switch back tot the slide machine.

00:35:31.000 --> 00:35:38.750
Okay so for move down I'm not going to show you a
demonstration I'm just going to show you an example of it.

00:35:38.750 --> 00:35:42.809
So here we have the refactoring
window for a move down transformation.

00:35:42.809 --> 00:35:48.150
And as you can see for a move down because you can have
several subclasses we show all of them and that you choose

00:35:48.150 --> 00:35:53.650
which ones you want you can choose one or some
or all, in this case we've chosen all of them.

00:35:53.650 --> 00:35:59.670
And you can see from the comparison view what's
happened is for the subclass LDrawPart,

00:35:59.670 --> 00:36:04.550
we've moved down the instance variable is subclass to it.

00:36:04.550 --> 00:36:10.450
Okay? So moving on to the encapsulate transformation.

00:36:10.449 --> 00:36:13.519
For encapsulate we will also not
be showing you a demo today.

00:36:13.519 --> 00:36:16.539
But here's an example.

00:36:16.539 --> 00:36:21.730
So for that example we're going to go back to that mini
figure dialog controller class that we looked at already

00:36:21.730 --> 00:36:27.360
and you can see in this class there
are these 13 instance variables

00:36:27.360 --> 00:36:32.650
which all are Boolean, which all
start with has, has something.

00:36:32.650 --> 00:36:37.940
That's a little bit of repetition and maybe a little bit
of wasted space that you might want to do something about.

00:36:37.940 --> 00:36:42.300
So what you could do is you could put these
instance variables as the bit fields in a structure

00:36:42.300 --> 00:36:47.720
or you could put them into a core data entity
so that would take care of all the storage

00:36:47.719 --> 00:36:51.759
and all you'd have to do is refer to them by keyword.

00:36:51.760 --> 00:36:56.070
But in any case in order to do
any of that you need to be able

00:36:56.070 --> 00:37:01.420
to separate the back end implementation from all the colors.

00:37:01.420 --> 00:37:05.619
So you can start doing that by encapsulating
the very first instance variable.

00:37:05.619 --> 00:37:10.359
And we can see how this works right here.

00:37:10.360 --> 00:37:13.360
So here what's happened is,

00:37:13.360 --> 00:37:18.030
what refactoring has found out is
that there's already a setter method

00:37:18.030 --> 00:37:20.990
of the name that we chose that's being used here.

00:37:20.989 --> 00:37:26.769
Now if we look at the results what refactoring has done is
it's said oh here's a place where we're setting the variable

00:37:26.769 --> 00:37:31.630
to a value so we're going to replace that with the
setHasHat method but in fact it's actually inside

00:37:31.630 --> 00:37:33.640
of the already existing setHasHat method.

00:37:33.639 --> 00:37:34.730
So that's no good.

00:37:34.730 --> 00:37:42.139
So you can go ahead and flip the arrow around to undo that
particular change or you can use manual editing to fix it.

00:37:42.139 --> 00:37:45.109
Either way once you fix those particular
problems again the rest

00:37:45.110 --> 00:37:48.289
of the refactoring transformations work is done for you.

00:37:48.289 --> 00:37:52.909
And you can apply those changes.

00:37:52.909 --> 00:37:59.179
Okay so the last set of transformations I will be showing
you today has to do with Objective-C 2.0.

00:37:59.179 --> 00:38:04.659
And as Robert said there is two things we can help you
with to convert you towards Objective-C 2.0.

00:38:04.659 --> 00:38:10.219
We can help modernize your groups and we can help
convert your instance variables to properties.

00:38:10.219 --> 00:38:17.009
So for the first one as you can see here very simple loop.

00:38:17.010 --> 00:38:21.450
But even for this very simple loop there
are some working instance variables

00:38:21.449 --> 00:38:24.669
that there's some working local variables,

00:38:24.670 --> 00:38:31.380
the indexing variable i, the cut variable
ct, the working variable strItem, that kind

00:38:31.380 --> 00:38:34.070
of make this thing a little harder to read.

00:38:34.070 --> 00:38:38.780
So after you've converted this to
the new syntax it's much shorter,

00:38:38.780 --> 00:38:42.560
it's much more easily understood
and it's also actually much faster.

00:38:42.559 --> 00:38:49.110
If you want more details about Objective-C 2.0
functionality I would encourage you to go

00:38:49.110 --> 00:38:57.930
to the Using Advanced Objective-C 2.0
Features sessions in this very room at 5 o'clock.

00:38:57.929 --> 00:39:05.649
The second thing that refactoring does for you is it
adds property declarations and definitions to your classes

00:39:05.650 --> 00:39:09.170
that match the existing instance variables of that class.

00:39:09.170 --> 00:39:14.470
So as you can see here we have a myString
instance variable and what refactoring will do

00:39:14.469 --> 00:39:19.669
for you is add a myString property
declaration to that class.

00:39:19.670 --> 00:39:23.940
So let's have a look at how this works.

00:39:23.940 --> 00:39:28.690
Switch back to the demo machine.

00:39:28.690 --> 00:39:34.389
So while there is a modernized loop transformation
that acts on your selection which you can try yourself,

00:39:34.389 --> 00:39:41.869
what we're going to do here, is do something a little
more grand and we're going to use the project wide convert

00:39:41.869 --> 00:39:44.920
to Objective-C 2.0 transformation.

00:39:44.920 --> 00:39:50.930
This transformation is available from the edit menu just
as the refactor menu item is so we'll select

00:39:50.929 --> 00:39:56.519
that right now that brings up the refactoring window with
two checkboxes for the two options that we've talked about,

00:39:56.519 --> 00:40:00.480
we're going to check both of those
and click the preview button.

00:40:00.480 --> 00:40:08.559
Now because this is project wide instead of just
working on a certain sub selection of files it's going

00:40:08.559 --> 00:40:15.199
to take a little longer, that's the first thing,
the other thing is it doesn't work on a selection

00:40:15.199 --> 00:40:17.460
so as you see we didn't have any selection set up there.

00:40:17.460 --> 00:40:22.630
That's because again it's for the entire project.

00:40:22.630 --> 00:40:27.099
So let's have a look at the first file here and you can see

00:40:27.099 --> 00:40:35.099
that here what refactoring has done is it has
added a property declaration and if you'll look

00:40:35.099 --> 00:40:38.469
at the second file we've added a property definition.

00:40:38.469 --> 00:40:41.579
In this case it's in the form of a synthesized directive.

00:40:41.579 --> 00:40:47.639
And if we look at the third file
we have modernized the loop.

00:40:47.639 --> 00:40:55.889
And for this particular loop we have eliminated
the need for the counter local variable, okay?

00:40:55.889 --> 00:40:59.759
We can go ahead and apply these changes.

00:40:59.760 --> 00:41:03.670
Now refactoring can get you part of the way there.

00:41:03.670 --> 00:41:09.220
There are still other things you can do yourself
you can switch to the dot notation for the usages

00:41:09.219 --> 00:41:18.559
of your properties you can remove unneeded getter
setter methods in your class so there is more work to do

00:41:18.559 --> 00:41:22.090
but refactoring can definitely get you
started and point you in the right direction.

00:41:22.090 --> 00:41:31.120
We can switch back to the demo
machine, to the slide machine.

00:41:31.119 --> 00:41:37.099
So we've shown you what happens when
you refactor individual projects.

00:41:37.099 --> 00:41:41.170
But what happens when you want to rename
something that's in more than one project?

00:41:41.170 --> 00:41:46.309
And in that case you have to perform some steps
which we call cross-project transformations.

00:41:46.309 --> 00:41:51.650
Now Bricksmith the open source project
actually has an example of this.

00:41:51.650 --> 00:41:56.610
There are actually two Xcode projects
that come with the Bricksmith project.

00:41:56.610 --> 00:42:02.320
One is the Bricksmith project itself and then
there's a second one as well that we'll get to in a minute.

00:42:02.320 --> 00:42:10.059
So if you wanted to change the class AMSProgressPanel to
something more generic, progress being a linear thing zero

00:42:10.059 --> 00:42:16.219
to whatever and you want to rename it to ActivityPanel
so it's just a user doing something in the middle

00:42:16.219 --> 00:42:19.539
of something rather than progressing somewhere.

00:42:19.539 --> 00:42:22.000
You can go ahead and do that in the Bricksmith project.

00:42:22.000 --> 00:42:25.530
But it turns out that, that particular
class is actually declared and defined

00:42:25.530 --> 00:42:28.980
in a second project called AMSProgressBar.

00:42:28.980 --> 00:42:34.260
AMSProgressBar builds a framework that
is then used by the Bricksmith application.

00:42:34.260 --> 00:42:38.620
But if you were to build things
in this state it wouldn't work.

00:42:38.619 --> 00:42:39.309
So what do you do?

00:42:39.309 --> 00:42:47.549
It's actually very simple, you go ahead and
rename the class in the second project as well.

00:42:47.550 --> 00:42:50.160
Now order turns out to be important here.

00:42:50.159 --> 00:42:57.460
What you want to do is you want to start with usages
of a class and then you want to progress on up

00:42:57.460 --> 00:43:00.690
to the place where the class is declared and defined.

00:43:00.690 --> 00:43:02.179
Why do you need to do this?

00:43:02.179 --> 00:43:07.429
You need to do this because refactoring has a
safety feature built in which doesn't allow you

00:43:07.429 --> 00:43:10.149
to rename a class to the name of another existing class.

00:43:10.150 --> 00:43:13.889
So you can't rename your class NSObject for example.

00:43:13.889 --> 00:43:18.759
So if you change the framework first refactoring would
say well you're trying to change this other class

00:43:18.760 --> 00:43:20.570
to this name of something which already exists.

00:43:20.570 --> 00:43:26.200
So just very simple just go ahead and do
all the usages first and you'll be fine.

00:43:26.199 --> 00:43:28.750
So let's go ahead and try this out.

00:43:28.750 --> 00:43:30.860
Switch back to the demo machine.

00:43:34.489 --> 00:43:36.969
Okay so you can see the two projects here.

00:43:36.969 --> 00:43:43.199
So we're going to start with the Bricksmith project, the
usage of the class and we're going to find that class

00:43:43.199 --> 00:43:54.649
that we talked about AMSProgressPanel, and
once we find our usage of it if we can go ahead

00:43:54.650 --> 00:43:57.639
and select the class name and bring
up the refactoring window.

00:43:57.639 --> 00:44:02.549
So we're going to go ahead and
rename it to AMSActivityPanel

00:44:02.550 --> 00:44:06.900
and also again rename related files
and you'll see why in a minute.

00:44:11.530 --> 00:44:19.200
Okay so if we look at the results here first, we'll get
to that error in a second, if we go to LDrawDocument go

00:44:19.199 --> 00:44:27.980
to the file, there we go, LDrawDocument file.

00:44:27.980 --> 00:44:34.130
So we've renamed the files in this particular project
because you wanted to rename the import statements.

00:44:34.130 --> 00:44:39.650
But if we go on we can also see we're also
changing usages, everything that we need to.

00:44:39.650 --> 00:44:42.519
But what's going on with that error at the top.

00:44:42.519 --> 00:44:49.509
What's going on is that refactoring attempts to find all
of the files that it can find that it can see and if any

00:44:49.510 --> 00:44:53.320
of them seem to be files that need to
be changed, it tries to change them.

00:44:53.320 --> 00:44:59.610
But what it finds sometimes is that some of these files
are files that it can't guarantee that it can change.

00:44:59.610 --> 00:45:05.539
Files that are system header files for example
or files that belong to another project

00:45:05.539 --> 00:45:07.409
for those it tells you know I can't do this.

00:45:07.409 --> 00:45:11.420
I'm going to let you know that I
can't complete this transformation.

00:45:11.420 --> 00:45:14.500
But in our case we know that we can't complete it.

00:45:14.500 --> 00:45:19.400
We know that we have two steps to do so we're
going to go ahead and apply these changes anyway.

00:45:19.400 --> 00:45:27.539
Now we go to the second project and do the same thing.

00:45:29.429 --> 00:45:35.039
So you see that what Yugi's been doing is he's
been saving some of these files as we go along.

00:45:35.039 --> 00:45:42.389
In some cases this actually turns out to be pretty necessary
because the code sense index will only re-index files

00:45:42.389 --> 00:45:47.779
and re add that information that it knows about, when
a file is saved not just when a file has been edited,

00:45:47.780 --> 00:45:52.080
and so in some cases you may need to save
your files in between transformations

00:45:52.079 --> 00:45:54.960
to be sure that everything's updated properly.

00:45:54.960 --> 00:46:00.970
So here we're going to go ahead
and do the transformation again.

00:46:13.150 --> 00:46:17.710
And here you see the results have no error in them.

00:46:17.710 --> 00:46:22.650
That's because as far as this project is concerned it has
everything it needs, the declaration and the definition

00:46:22.650 --> 00:46:26.289
of the class are all in files that it controls.

00:46:26.289 --> 00:46:27.309
We have a look.

00:46:27.309 --> 00:46:32.420
We can see again usages are getting changed, the
file names themselves are getting changed here,

00:46:32.420 --> 00:46:36.530
import statements are getting changed, it's all good.

00:46:36.530 --> 00:46:46.390
So we can apply these changes and then save the files
so what we then need to do is rebuild both projects,

00:46:46.389 --> 00:47:02.569
rebuild the framework first and rebuild the
application project and if the demo gods are with us,

00:47:02.570 --> 00:47:09.890
which okay give it another second here,
okay maybe the demo gods aren't with us.

00:47:09.889 --> 00:47:11.079
But what you'll find, oh there we go.

00:47:11.079 --> 00:47:17.679
Okay. Well definitely in your own projects when you
try this what's going to happen is everything is going

00:47:17.679 --> 00:47:21.909
to get built correctly and you'll be
able to run your application again.

00:47:21.909 --> 00:47:24.779
Everything will work.

00:47:24.780 --> 00:47:28.840
Okay so the demo gods weren't quite with us.

00:47:28.840 --> 00:47:30.820
But you trust me that, that works.

00:47:30.820 --> 00:47:36.680
So we switch back to the slide machine.

00:47:36.679 --> 00:47:42.469
Okay. Now one thing that we have
inadvertently showed you today is

00:47:42.469 --> 00:47:46.799
that when you are doing refactoring
transformations sometimes there can be problems.

00:47:46.800 --> 00:47:55.120
So what do you do when you do a transformation where
there was a problem or where you know that while I played

00:47:55.119 --> 00:47:58.690
around with this I actually don't want to keep it.

00:47:58.690 --> 00:48:02.980
And that's where the Xcode features snapshots comes in.

00:48:02.980 --> 00:48:08.400
As we saw already snapshots are turned on by the check box

00:48:08.400 --> 00:48:12.420
in the refactoring window and that
checkbox is on by default.

00:48:12.420 --> 00:48:18.059
So you always have snapshot functionality
unless you uncheck that checkbox yourself.

00:48:18.059 --> 00:48:25.820
And what it does for you is it provides a way to go back.

00:48:25.820 --> 00:48:28.130
Try to do a kind of global undo.

00:48:28.130 --> 00:48:34.160
What happens with these changes that we're making some of
the changes are text files and for those text files at least

00:48:34.159 --> 00:48:39.309
in theory you can click undo for each one of them
and undo all of the changes made by refactoring.

00:48:39.309 --> 00:48:44.009
But we also make changes to things like
project files or nib files or core data files,

00:48:44.010 --> 00:48:46.860
actually core data files have an undo
stack but nib files do not because they're

00:48:46.860 --> 00:48:50.260
in interface builder and not in Xcode proper.

00:48:50.260 --> 00:48:52.440
For those you can't undo yourself.

00:48:52.440 --> 00:48:54.730
So for those you want to use snapshots.

00:48:54.730 --> 00:49:00.869
What snapshots do is whenever you make a snapshot it
archives away all of the files in your project for you.

00:49:00.869 --> 00:49:09.599
Saves them under its own administration and
so what happens is you get a window like this.

00:49:09.599 --> 00:49:18.039
So this particular window has some usages of
snapshots very much like what we did today.

00:49:18.039 --> 00:49:22.840
Usually it says before rename, before
extract, before create superclass.

00:49:22.840 --> 00:49:29.240
What happens is, is you said for example like we did
with this last one when we renamed AMSProgressPanel

00:49:29.239 --> 00:49:35.089
if there was a problem with it you don't have to go ahead
and get rid of all of your changes that you've made.

00:49:35.090 --> 00:49:37.710
Go back to say your source control management version.

00:49:37.710 --> 00:49:42.820
You can just restore to the snapshot
right before that last change.

00:49:42.820 --> 00:49:45.690
So we highly encourage you to do that for your projects.

00:49:45.690 --> 00:49:59.329
And so with that, I'm done. I will hand things back off to
Robert Bowdidge who will talk about hints for refactoring.

00:49:59.329 --> 00:50:04.409
( Applause )

00:50:04.409 --> 00:50:06.559
>> Thanks.

00:50:06.559 --> 00:50:11.940
Okay so you've just heard today what refactoring is.

00:50:11.940 --> 00:50:14.460
You've seen it in use in Xcode.

00:50:14.460 --> 00:50:18.300
What I would like to do in this last section
is talk to you about what you should expect

00:50:18.300 --> 00:50:22.510
when you start using refactoring on your own projects.

00:50:22.510 --> 00:50:25.600
Now one question you might have
is how long does refactoring take?

00:50:25.599 --> 00:50:29.659
And the short answer is that refactoring takes
time proportional to the number of files that need

00:50:29.659 --> 00:50:36.899
to be analyzed, a.k.a. parsed or compiled, to figure out the
changes and the number of files that need to be changed.

00:50:36.900 --> 00:50:40.480
So here's some times on two machines that were in my office.

00:50:40.480 --> 00:50:47.590
When the change and I should also mention this is for a
200,000 line program that's part of Xcode.

00:50:47.590 --> 00:50:53.059
So if you do a rename that's only one file
for example, renaming a local variable

00:50:53.059 --> 00:50:57.509
on my two machines the time went
between three and eight seconds.

00:50:57.510 --> 00:51:03.770
If the change involved analyzing and changing three
files it also took between three and eight seconds.

00:51:03.769 --> 00:51:07.849
And the reason why is because most of that time
is spent parsing the system headers that are

00:51:07.849 --> 00:51:11.759
in every single source file that you include.

00:51:11.760 --> 00:51:17.580
If the change involved 43 files, we
saw times between 10 and 26 seconds.

00:51:17.579 --> 00:51:22.340
And if 123 files had to be analyzed and
changed the transformation took

00:51:22.340 --> 00:51:25.019
between 25 and 43 seconds.
C

00:51:25.019 --> 00:51:29.599
This was for rename and these times were comparable
for all of the individual transformations.

00:51:29.599 --> 00:51:35.469
For the whole program transformation to convert to
Objective-C 2.0, it's a little different

00:51:35.469 --> 00:51:40.759
because that transformation has to parse every single
file in your project to figure out what to change.

00:51:40.760 --> 00:51:46.280
And so the time to do that is more proportional
to the time it would take to compile your project.

00:51:46.280 --> 00:51:51.060
And so it's not surprising for
large projects for the convert

00:51:51.059 --> 00:51:57.179
to Objective-C 2.0 to
take on the order of minutes.

00:51:57.179 --> 00:52:01.529
Now another issue is what will
refactoring change in your source code.

00:52:01.530 --> 00:52:08.300
So in Xcode 3.0 the refactoring feature
will change the C and Objective-C files in your project.

00:52:08.300 --> 00:52:14.430
It will also do some analysis to figure out whether
changes are necessary in C++ or Objective-C++ files

00:52:14.429 --> 00:52:16.869
and will warn you if it thinks
that there's changes needed there.

00:52:16.869 --> 00:52:22.569
But it will not currently change
a C++ and Objective-C++ files

00:52:22.570 --> 00:52:25.320
Now refactoring does understand about comments in your code.

00:52:25.320 --> 00:52:28.690
So if you for example extract a new function the comments

00:52:28.690 --> 00:52:33.610
in that new function body will
move along with the new function.

00:52:33.610 --> 00:52:37.090
If you move an instance variable
from a subclass to a superclass,

00:52:37.090 --> 00:52:40.620
the comment leading that instance variable will also move.

00:52:40.619 --> 00:52:46.969
However in Xcode 3.0 if you rename a
declaration Xcode will not go looking through your comments

00:52:46.969 --> 00:52:49.730
in your source code looking for
references to that declaration.

00:52:49.730 --> 00:52:53.190
So that's a case where you'll have
to fall back on find and replace.

00:52:53.190 --> 00:52:58.000
Xcode also understand about macros.

00:52:58.000 --> 00:53:04.710
And so if there are changes required in macro parameters
Xcode will be able to do those as part of refactoring.

00:53:04.710 --> 00:53:09.869
It currently will not make the changes in macro bodies and
it will warn you saying that this macro uses this variable

00:53:09.869 --> 00:53:13.359
that I need to change and you'll need to do that by hand.

00:53:13.360 --> 00:53:17.990
And as Andrew explained earlier
if you have a change that goes

00:53:17.989 --> 00:53:21.879
across multiple projects you'll need
to make that change in each project.

00:53:25.150 --> 00:53:30.940
Now a second issue is what code actually
gets analyzed as part of refactoring?

00:53:30.940 --> 00:53:36.809
So for example one of the great things about the C
programming language is you have the preprocessor.

00:53:36.809 --> 00:53:41.019
And the preprocessor lets you declare conditional code.

00:53:41.019 --> 00:53:43.429
Code that's only compiled in certain situations.

00:53:43.429 --> 00:53:48.960
So you can take a block of coding you could say this
code should only be compiled if I'm building for Intel.

00:53:48.960 --> 00:53:51.690
This code should only be compiled
if I'm doing a debug build.

00:53:51.690 --> 00:53:58.480
This code should only be compiled if I'm building
this particular feature that I want to test.

00:53:58.480 --> 00:54:03.269
So the question is what happens with conditional code,
what happens when we're doing the analysis and the rule

00:54:03.269 --> 00:54:10.309
for Xcode 3.0 is that whatever code would
compile when you hit the build button is the same code

00:54:10.309 --> 00:54:13.739
that would be changed if you did refactoring at that point.

00:54:13.739 --> 00:54:21.349
So in this example here, we see that there's a variable
called dailyRate that's used on all three lines.

00:54:21.349 --> 00:54:25.759
But the second line is hidden inside
of a #ifdef that says that,

00:54:25.760 --> 00:54:30.280
that line is only compiled if the debug macro is set.

00:54:30.280 --> 00:54:35.350
So if you went to rename dailyRate that
variable would only be changed on all three lines

00:54:35.349 --> 00:54:39.110
if the debug macro is going to be set in the current build.

00:54:39.110 --> 00:54:44.380
You can see at the top that our current build setting for
this project is the debug build setting which happens to set

00:54:44.380 --> 00:54:53.059
that macro and so all three occurrences would
change if we renamed this at this point.

00:54:53.059 --> 00:54:58.829
Another issue with analysis is the question
of what happens when your code's incorrect.

00:54:58.829 --> 00:55:02.849
Xcodes refactoring will allow you
to change files that don't compile.

00:55:02.849 --> 00:55:10.339
However while it will be able to make changes in those files
it may not get things exactly right near the syntax error

00:55:10.340 --> 00:55:12.280
that's causing the compiler.

00:55:12.280 --> 00:55:17.940
So whenever possible try to make sure that your
code compiles before you start doing refactoring.

00:55:23.150 --> 00:55:28.519
And finally here are some strategies
for the best results with refactoring.

00:55:28.519 --> 00:55:32.530
As Andrew pointed out refactoring changes
your source code and as programmers,

00:55:32.530 --> 00:55:35.500
our work product is our source code we want to keep it.

00:55:35.500 --> 00:55:37.409
It's important to us.

00:55:37.409 --> 00:55:41.099
And to keep it correct.

00:55:41.099 --> 00:55:46.079
So one of the issues with refactoring is that
refactoring is often an exploratory process.

00:55:46.079 --> 00:55:49.029
You'll start doing a few transformations
you'll look at your program

00:55:49.030 --> 00:55:53.300
and you'll say gee is this going in the direction I want?

00:55:53.300 --> 00:55:59.780
And you might find after several transformations you've
either figured out that the entire task was inappropriate

00:55:59.780 --> 00:56:05.930
for some reason, isn't going to work out because of
some detail you'd missed, or is actually incorrect.

00:56:05.929 --> 00:56:09.500
And so you'd like to be able to go back in those cases.

00:56:09.500 --> 00:56:13.389
And so when you're using refactoring
make sure you have a way to go back.

00:56:13.389 --> 00:56:18.259
Either use the snapshot feature that
we built into Xcode for refactoring,

00:56:18.260 --> 00:56:23.080
save the files into your source code control system,
save the files on the side, but make sure you have a way

00:56:23.079 --> 00:56:26.409
of going back because that's going to be a common practice.

00:56:26.409 --> 00:56:33.909
The other thing to remember is that sometimes
it's okay to do incorrect transformations.

00:56:33.909 --> 00:56:40.710
So for example let's imagine that you're renaming a
declaration and it's used in 240 places.

00:56:40.710 --> 00:56:46.539
And you're able to change 200, or you ask Xcode
to refactor that and it can make the changes in 239

00:56:46.539 --> 00:56:51.449
and there's one case where
it can't because of a conflicting name.

00:56:51.449 --> 00:56:53.869
There's nothing wrong with hitting the apply button then,

00:56:53.869 --> 00:56:59.319
having Xcode make all of the changes
and then fixing that last case by hand.

00:57:00.409 --> 00:57:06.579
Similarly there might be cases where you can actually
use the analysis done by refactoring to do clever tricks

00:57:06.579 --> 00:57:10.619
that we didn't think of or that aren't really refactoring.

00:57:10.619 --> 00:57:17.549
So for example one way that you can actually
change from one API to another is through rename.

00:57:17.550 --> 00:57:25.769
For example in Leopard the NSString's CString
method is actually deprecated now.

00:57:25.769 --> 00:57:32.300
And so if you, for example, need to change all of the CStrings
to UTF-8 string one way you could do that is simply

00:57:32.300 --> 00:57:36.350
to rename the CString method to be UTF-8 string.

00:57:36.349 --> 00:57:40.460
You'll get a bunch of errors because refactoring
will say that this isn't a safe transformation,

00:57:40.460 --> 00:57:43.630
it's not going to keep the code compiling
it's not going to keep it running,

00:57:43.630 --> 00:57:49.890
because first of all it can't actually change the
definition of the method because it's in a system header

00:57:49.889 --> 00:57:53.929
and it's write protected, and because
it can't actually find the definition.

00:57:53.929 --> 00:58:02.049
But you can still hit apply, get the changes throughout
your program and use some of the analysis of refactoring

00:58:02.050 --> 00:58:05.680
to find exactly where that method is actually used.

00:58:08.309 --> 00:58:15.000
So what you've learned today is that Xcode
3.0 has support for refactoring.

00:58:15.000 --> 00:58:21.409
And specifically it allows you to modify and refactor
your C and Objective-C files in your projects.

00:58:21.409 --> 00:58:31.159
You've learned that refactoring is a way to make
global, structural, controlled changes to your program.

00:58:31.159 --> 00:58:36.639
And you've learned that refactoring is a great way to
make your code more maintainable, more understandable

00:58:36.639 --> 00:58:39.889
or to make it easier to apply future enhancements.

00:58:39.889 --> 00:58:43.929
We hope you enjoy using this feature of Xcode
we look forward to hearing your experiences,

00:58:43.929 --> 00:58:47.969
seeing the bugs that you find and
please let us know what you think.

00:58:47.969 --> 00:58:52.569
With that I'd like to bring Matt
Formica up to close the session.

00:58:52.570 --> 00:58:53.269
Thanks.

00:58:53.269 --> 00:58:59.110
( Applause )

00:58:59.110 --> 00:59:02.269
>> Thank you, I'd like to invite the
Q and A team to come up at this point.

00:59:02.269 --> 00:59:08.690
If you have questions after this session
or later in the week or in coming weeks,

00:59:08.690 --> 00:59:11.829
feel free to email me, I'm the Developer Tools Evangelist.

00:59:11.829 --> 00:59:16.819
I'd love to get your feedback on refactoring
and how we can continue to enhance it.