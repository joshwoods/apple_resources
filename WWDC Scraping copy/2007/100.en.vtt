WEBVTT

00:00:24.039 --> 00:00:24.969
>> I'm Deric Horn.

00:00:24.969 --> 00:00:27.309
I'm the Application Technologies Evangelist.

00:00:27.309 --> 00:00:31.119
And usually when I tell people my title,
the next question is what is an evangelist?

00:00:31.120 --> 00:00:33.050
So let me try and give you the quick run down.

00:00:33.049 --> 00:00:39.689
Basically as an evangelist, there's a small group of us
that try to promote the adoption of our key technologies.

00:00:39.689 --> 00:00:44.379
So we work directly with developers and largely with
developers like you that might be new to the platform,

00:00:44.380 --> 00:00:50.760
coming to the platform or that just want more help
or questions with certain technologies and APIs.

00:00:50.759 --> 00:00:55.909
And in addition to that, I'm also the Mac
OS X Essentials track manager here at WWDC.

00:00:55.909 --> 00:01:01.289
So essentially responsible for the Mac OS X essentials
track that you see here and was involved with a lot

00:01:01.289 --> 00:01:06.189
of the content, going to endless rehearsals, sample
code, creating those head starts that you saw.

00:01:06.189 --> 00:01:11.879
So hopefully today I'll be able to kind of give you
some good insight as to the cool new sessions

00:01:11.879 --> 00:01:14.500
that you're going to want to see
to help further your application.

00:01:14.500 --> 00:01:15.099
( Period of silence )

00:01:15.099 --> 00:01:19.809
So before I really get started here
though, I'd like to know how many of you

00:01:19.810 --> 00:01:21.750
out there are here for the first time at WWDC.

00:01:21.750 --> 00:01:23.489
Oh excellent.

00:01:23.489 --> 00:01:25.140
Okay, so this is a great crowd.

00:01:25.140 --> 00:01:27.329
So I expect this is the perfect crowd for me.

00:01:27.329 --> 00:01:29.159
And always, you'll see my email a few times.

00:01:29.159 --> 00:01:31.739
Feel free to email me and I can always
help you get in touch with the right people

00:01:31.739 --> 00:01:33.920
or help you with your issues in particular.

00:01:33.920 --> 00:01:40.790
So over the last six years, we've had five
releases of Mac OS X and Mac OS X server.

00:01:40.790 --> 00:01:46.400
And each one increases in power and
capability, stability as well as security.

00:01:46.400 --> 00:01:53.670
And our upcoming release, Mac OS X Leopard, our sixth
release I think is really a culmination of a lot of time.

00:01:53.670 --> 00:01:55.670
This is really the release that I think I'm most proud of.

00:01:55.670 --> 00:01:59.719
I mean, it's just the release that just seems like
all of our technologies, are all coming together.

00:01:59.719 --> 00:02:03.099
You see a lot more of these pervasive
technologies across the system,

00:02:03.099 --> 00:02:06.239
a lot of collaborative technologies and so forth.

00:02:06.239 --> 00:02:10.280
I had lunch with a developer today,
Wil Shipley and he mentioned

00:02:10.280 --> 00:02:13.300
that this release is the one that
is really the developers' release.

00:02:13.300 --> 00:02:15.790
It has so many features for developers.

00:02:15.789 --> 00:02:20.310
In his words, it'll make your application
10000 times better than it already is.

00:02:20.310 --> 00:02:23.460
So hopefully we'll go over a number
of those technologies today.

00:02:23.460 --> 00:02:29.110
And really the way we're working this session is we have
two sessions in a row, part one which is the first hour

00:02:29.110 --> 00:02:31.110
and then part two which will be the second hour.

00:02:31.110 --> 00:02:33.690
And each part is divided into two sections.

00:02:33.689 --> 00:02:37.060
And in the first section we'll have Larry Coopet
come up on stage and talk a little bit

00:02:37.060 --> 00:02:43.080
about the overall Mac OS X architecture, some issues with
building your application on Mac OS X, as well as some,

00:02:43.080 --> 00:02:48.630
as well as some cross platform techniques, some things
that you should be aware of, how to deal with strings

00:02:48.629 --> 00:02:51.560
across both platforms, Mac OS X and
for instance Windows and so forth.

00:02:51.560 --> 00:02:57.689
And then I get to come back up on stage and Steve had
his top ten list this morning and I have my top ten list

00:02:57.689 --> 00:03:01.340
of killer new development technologies
that you'll want to take advantage of.

00:03:01.340 --> 00:03:04.860
And these are technologies that I think are
really give you a big bang for the buck.

00:03:04.860 --> 00:03:07.050
What I call kind of these deep APIs.

00:03:07.050 --> 00:03:11.630
In that you just write a few lines of code and you get to
incorporate the whole new technology into your application

00:03:11.629 --> 00:03:15.210
and really add a lot of value to your applications.

00:03:15.210 --> 00:03:21.159
And in the second hour, we'll talk
a little bit more about graphics.

00:03:21.159 --> 00:03:27.210
Mac has and continues to be the platform of choice
for creative, creative engineers or creative folks.

00:03:27.210 --> 00:03:30.469
One of the reasons why is we have a whole new
track this year, the content and media track.

00:03:30.469 --> 00:03:36.129
So we'll have Babak Mahbod come up, come up on stage
and talk about our graphics and multimedia frameworks

00:03:36.129 --> 00:03:42.349
as well as imaging and OpenGL and so forth and then
we'll wrap that up with Matt Henderson coming up on stage,

00:03:42.349 --> 00:03:48.909
talking about our development tools, Xcode, our IDE,
Interface Builder, what we use to layout the user interface

00:03:48.909 --> 00:03:52.439
as well as embed some logic into that user interface design.

00:03:52.439 --> 00:03:55.509
And then the new features in our Leopard development tools.

00:03:55.509 --> 00:03:58.299
So at this time, I'd like to welcome
Larry Coopet on stage.

00:03:58.300 --> 00:04:00.270
( Applause )

00:04:00.270 --> 00:04:00.520
Thank you.

00:04:00.520 --> 00:04:02.350
( Applause )

00:04:02.349 --> 00:04:03.030
>> Thanks Derek.

00:04:03.030 --> 00:04:04.599
( Applause )

00:04:04.599 --> 00:04:11.579
Like Derek said, I want to talk to you guys about
coming to Mac OS X and its implications for developers.

00:04:11.580 --> 00:04:14.000
A little bit about me.

00:04:14.000 --> 00:04:22.410
Most recently I was at Alias Wave Front where I did, I
was a project lead for Maya coming to the Mac from Windows.

00:04:22.410 --> 00:04:27.000
And in another lifetime ago, and Apple
is still blaming me for this one.

00:04:27.000 --> 00:04:31.680
I was the lead on Photoshop to Windows from the Mac.

00:04:31.680 --> 00:04:35.750
So I've got a broad base of multi platform experience.

00:04:35.750 --> 00:04:40.189
And we're going to kind of hit the 50000 foot
level and make sure you guys come to the labs

00:04:40.189 --> 00:04:43.810
if you guys have specific questions this week.

00:04:43.810 --> 00:04:49.160
And so for people who are familiar
with OS X, this might be a rehash.

00:04:49.160 --> 00:04:50.860
So let's get started.

00:04:50.860 --> 00:04:53.319
One of the things that, oh I want to talk about the agenda.

00:04:53.319 --> 00:05:00.659
So what, first of all the things I want to talk about are what
are the major code components you're going to be dealing with?

00:05:00.660 --> 00:05:06.650
What are the localization issues because
you know OS X has a great story for this.

00:05:06.649 --> 00:05:10.529
Model view controller which you're going to hear
a lot this week if you're new to the Mac.

00:05:10.529 --> 00:05:16.899
And a bit about Cocoa and then I'm going to run through
a development, quick, quick development demo.

00:05:16.899 --> 00:05:21.089
So one thing I want to stress is you already know this stuff.

00:05:21.089 --> 00:05:26.009
You know people come to the Mac, they see Cocoa, they see
square brackets and all this and they get a little nervous.

00:05:26.009 --> 00:05:27.980
You already know this stuff.

00:05:27.980 --> 00:05:30.950
So these are very familiar concepts.

00:05:30.949 --> 00:05:36.800
Applications, shared code, DLLs,
you know resources, localization,

00:05:36.800 --> 00:05:41.270
and you know settings and preferences across invocations.

00:05:41.269 --> 00:05:45.189
So first of all, let's talk about
applications in shared code.

00:05:45.189 --> 00:05:46.310
What are they on the Mac?

00:05:46.310 --> 00:05:47.389
How do they work?

00:05:47.389 --> 00:05:51.389
Well, I want to talk about some structural differences.

00:05:51.389 --> 00:05:56.250
One is you know now modern applications
in DLLs are much more complex, right?

00:05:56.250 --> 00:06:01.329
It's just not your, your DLL, you
EXE just floating in space.

00:06:01.329 --> 00:06:07.759
So on the Mac this week you're going to hear about
things like four way binaries and universal binaries.

00:06:07.759 --> 00:06:08.439
So what are these?

00:06:08.439 --> 00:06:10.709
And how does Apple solve this?

00:06:10.709 --> 00:06:14.539
So universal binaries or four way binaries are simply two

00:06:14.540 --> 00:06:19.340
or more binaries stored together
in the Mach-O executable format.

00:06:19.339 --> 00:06:26.569
Okay, the interesting thing about this is that the Mach-O
format stores this information and then Mac OS X knows how

00:06:26.569 --> 00:06:31.139
to load these separate binaries on the
fly depending on the current architecture.

00:06:31.139 --> 00:06:36.959
And what's really interesting about this is there's
absolutely no thunking, there's no intermediate code.

00:06:36.959 --> 00:06:42.899
And just like Steve said this morning with 32
and 64-bit, you build these things, it just goes.

00:06:42.899 --> 00:06:45.120
Only your code is duplicated, right?

00:06:45.120 --> 00:06:52.280
Resources, HTML content that are stored inside
your application bundle are not duplicated.

00:06:52.279 --> 00:06:55.699
So you do, people say oh my application
is going to be three times as big.

00:06:55.699 --> 00:06:58.289
That's not what happens.

00:06:58.290 --> 00:07:01.350
So there is some issues that you'll bump into.

00:07:01.350 --> 00:07:06.950
And in byte swapping, this is not an issue
for any high level APIs you'll be using for,

00:07:06.949 --> 00:07:11.969
on the system for loading images
or string data things like that.

00:07:11.970 --> 00:07:16.800
It will be an issue if you've got
proprietary file formats and you want them

00:07:16.800 --> 00:07:20.550
to support both Intel and Power PC architectures.

00:07:20.550 --> 00:07:25.750
There's tons of swapping macros and, and
function calls for doing this on the fly.

00:07:25.750 --> 00:07:29.600
And its important to remember when you
see Xcode these are trivial to build.

00:07:29.600 --> 00:07:35.450
In fact they release and you select your
release configuration, you get end way binaries.

00:07:35.449 --> 00:07:43.060
And for all you 64-bit people, please
remember that our compiler is LP64 not P64
d

00:07:43.060 --> 00:07:47.780
so this can cause a problems for
some people coming from Windows.

00:07:47.779 --> 00:07:49.639
So back to applications of shared code.

00:07:49.639 --> 00:07:51.680
What's the other issue we have to resolve?

00:07:51.680 --> 00:07:52.910
We have more than just code.

00:07:52.910 --> 00:07:59.090
As I mentioned, we've got HTML pages, resources,
you have helper apps that you want to launch.

00:07:59.089 --> 00:08:02.759
Now you're going to learn about QuickLook
and Spotlight plug-ins.

00:08:02.759 --> 00:08:04.719
Where the heck does all this stuff go?

00:08:04.720 --> 00:08:08.190
So this has been in Mac OS X since the first version.

00:08:08.189 --> 00:08:09.829
We have a thing called a bundle.

00:08:09.829 --> 00:08:13.229
Okay? Bundles are just formalized directories.

00:08:13.230 --> 00:08:15.420
They're just well formed directory structures.

00:08:15.420 --> 00:08:18.850
And the idea that while the formalization
of the structure is

00:08:18.850 --> 00:08:21.900
so that the system can recognize these components quickly.

00:08:21.899 --> 00:08:24.719
Okay, it hides the complexity from the user, right.

00:08:24.720 --> 00:08:29.220
You don't have this spewing of content all over the place.

00:08:29.220 --> 00:08:32.139
Common bundles are application frameworks.

00:08:32.139 --> 00:08:34.269
You can see this a lot and a framework is a DLL.

00:08:34.269 --> 00:08:37.220
Okay? That's wrapped inside a bundle folder.

00:08:37.220 --> 00:08:42.670
All of your necessary subcomponents
go inside your framework, okay?

00:08:42.669 --> 00:08:47.360
And what, so let me just show you a little bit.

00:08:47.360 --> 00:08:50.769
( Period of silence )
Hang on a second.

00:08:50.769 --> 00:08:52.389
( Period of silence )
Okay, so I'll show you.

00:08:52.389 --> 00:08:53.529
This is how you do it.

00:08:53.529 --> 00:08:55.409
This is the application.

00:08:55.409 --> 00:08:59.149
And I want you to see the, the contents there
and what's important, a couple of things.

00:08:59.149 --> 00:09:01.090
There's my dot exe.

00:09:01.090 --> 00:09:03.690
Stored inside that folder.

00:09:03.690 --> 00:09:10.470
Okay? Then I also have, you'll be seeing this a lot in
both DLL, in your frameworks and in your applications.

00:09:10.470 --> 00:09:12.120
Your going to see info dot P list.

00:09:12.120 --> 00:09:16.129
This is an XML file that tells
the system about your application.

00:09:16.129 --> 00:09:18.559
It's just, and we call them P lists or property lists.

00:09:18.559 --> 00:09:20.529
It's just XML.

00:09:20.529 --> 00:09:21.839
Meta data.

00:09:21.840 --> 00:09:24.940
Frameworks, that's where your DLLs go.

00:09:24.940 --> 00:09:31.270
Okay? You'll see the iTunes has two private
frameworks there and at utilities and at iPod updater.

00:09:31.269 --> 00:09:35.419
Those are my DLLs that are private to my application.

00:09:35.419 --> 00:09:41.129
And then of course my resources folder,
which we'll talk about a little more later.

00:09:41.129 --> 00:09:43.580
So what are the benefits for the bundle?

00:09:43.580 --> 00:09:46.950
Obviously you know you've got all these components.

00:09:46.950 --> 00:09:50.570
Now I keep them together in one, one thing, all right?

00:09:50.570 --> 00:09:54.720
And the cool thing is, folders are
already part of the system, right?

00:09:54.720 --> 00:10:00.629
I don't have to do anything, just a little bit of code in
the system to recognize bundles and what type of bundles.

00:10:00.629 --> 00:10:04.110
Easy versioning, you'll talk about that in the labs.

00:10:04.110 --> 00:10:07.620
And of course you're avoiding your DLL confusion.

00:10:07.620 --> 00:10:10.960
Right, and so the other thing drag and drop installs.

00:10:10.960 --> 00:10:14.200
Apple recommends drag and drop
installs where possible forever.

00:10:14.200 --> 00:10:17.290
Now since it's just a folder basically, boom, I drag it on.

00:10:17.289 --> 00:10:19.969
And yep, documents can be bundles as well.

00:10:19.970 --> 00:10:24.040
In fact Xcode projects are simply document bundles.

00:10:24.039 --> 00:10:30.059
So next I want to talk about the next big part of
most applications and frameworks, is resources.

00:10:30.059 --> 00:10:34.719
Okay? Again more and more complex
resources, how do we sort this out?

00:10:34.720 --> 00:10:37.490
And what are the localization issues?

00:10:37.490 --> 00:10:42.909
Well, again as you saw in iTunes, resource, resources
are just put inside a folder inside your bundle.

00:10:42.909 --> 00:10:46.370
Now your bundle could be both an
application bundle and a framework bundle.

00:10:46.370 --> 00:10:48.500
Don't forget that.

00:10:48.500 --> 00:10:53.059
So they're just files stored in the proper
location, no more resource compiler,

00:10:53.059 --> 00:10:56.539
no more deciphering these Arcadian formats.

00:10:56.539 --> 00:11:05.009
So and the cool thing in both inside OS, Mac OS X is that
I have really, really high level functions for doing this.

00:11:05.009 --> 00:11:08.220
We had some arguments during, when
we were putting the slides together.

00:11:08.220 --> 00:11:10.730
We were going I can do that in one line.

00:11:10.730 --> 00:11:11.810
You don't need two lines of code there.

00:11:11.809 --> 00:11:13.549
So this is what's interesting.

00:11:13.549 --> 00:11:17.839
Its very high level and you can see for
you know I've got an image loader and,

00:11:17.840 --> 00:11:22.490
and that's code taken out of the
sample I wrote that works, okay?

00:11:22.490 --> 00:11:24.680
So that's it.

00:11:24.679 --> 00:11:29.929
And so let's talk about, about
resource localization a little bit.

00:11:29.929 --> 00:11:35.459
What you have inside your resources folder is
you'll have the ISO standard naming convection

00:11:35.460 --> 00:11:39.930
and you'll have the English lproj , the
French lproj, I'll show in the demo later.

00:11:39.929 --> 00:11:43.839
And these are just subfolders that
hold your localized data, okay?

00:11:43.840 --> 00:11:52.320
Now this, I want to stress here one thing, absolutely zero
code has to be written to support arbitrary languages, okay?

00:11:52.320 --> 00:11:55.460
You localize your content, not code.

00:11:55.460 --> 00:12:03.180
System finds and loads proper resource bundle
based on your current you know language settings.

00:12:03.179 --> 00:12:06.219
Okay? And there's fall back support
which is very interesting.

00:12:06.220 --> 00:12:13.019
If the resource isn't localized, it goes through that chain
inside the system and says, okay, I can't find French.

00:12:13.019 --> 00:12:16.329
The next one language you've got chosen,
these that are chosen is English.

00:12:16.330 --> 00:12:21.180
It will find the English resource and
all the way up the chain so on and so on.

00:12:21.179 --> 00:12:23.739
As Derek said, I wanted to talk
a little bit about strings.

00:12:23.740 --> 00:12:27.580
This is where developers kind of
get caught sometimes in the Mac.

00:12:27.580 --> 00:12:32.210
Strings first of all are stored as Unicode text files.

00:12:32.210 --> 00:12:36.920
Okay? And they are just stored
as key value pairs, very simple.

00:12:36.919 --> 00:12:41.079
It's all Unicode all the time on the Mac, okay?

00:12:41.080 --> 00:12:46.090
So I told developers if I see lots of
char starred declarations in their code,

00:12:46.090 --> 00:12:51.759
you're probably going to have problems unless you
know implicitly that this is all UTF 8 encoded.

00:12:51.759 --> 00:12:55.350
If its not you're going to really have some issues.

00:12:55.350 --> 00:13:03.279
One thing I like to talk about is STL strings are 32-bit
or W char T is 32 bits on the Mac, freaks some people out.

00:13:03.279 --> 00:13:08.110
But you really need to write like 2 bottleneck
routines to solve this problem when you're reading

00:13:08.110 --> 00:13:11.139
and writing your own, your own data text files

00:13:11.139 --> 00:13:16.779
Mac high level APIs for loading strings does not have this
issue and don't forget about bomb characters if you're

00:13:16.779 --> 00:13:19.879
like I said writing your own file formats.

00:13:19.879 --> 00:13:26.820
The third part is your settings and preferences
and storing state across invocation, okay.

00:13:26.820 --> 00:13:28.050
Where does the information go?

00:13:28.049 --> 00:13:31.279
How do I handle multiple users?

00:13:31.279 --> 00:13:35.899
Again, our setting and preference
system is just based on XML.

00:13:35.899 --> 00:13:38.850
They're just Unicode text XML files.

00:13:38.850 --> 00:13:43.139
The interesting thing is they're
stored per application and you can kind

00:13:43.139 --> 00:13:45.509
of take control of that and change that a little bit.

00:13:45.509 --> 00:13:47.049
But you only care about your info.

00:13:47.049 --> 00:13:52.079
You're not writing into a registry
where you can scrag someone else's data.

00:13:52.080 --> 00:13:57.530
These P list files are not utilized by
the system, only by your application.

00:13:57.529 --> 00:14:01.679
Okay? And the APIs are again as
you can see are key value paired.

00:14:01.679 --> 00:14:05.870
My little example there, again I
load the standard default mechanism

00:14:05.870 --> 00:14:08.659
and I literally say give me this Boolean for this key.

00:14:08.659 --> 00:14:11.980
I'm done. You can make these as complex as you want.

00:14:11.980 --> 00:14:15.480
I can store arrays of dictionaries and
dictionaries of arrays and all this.

00:14:15.480 --> 00:14:19.529
And that's, its, there's one function
called the store this out.

00:14:19.529 --> 00:14:22.100
And you can store these in different domains.

00:14:22.100 --> 00:14:24.930
The Mac has the concept of domains similar to Windows.

00:14:24.929 --> 00:14:28.469
And so I can say I want this stored for the current user,

00:14:28.470 --> 00:14:33.710
all users of the machines, anyone
on this system, so on and so on.

00:14:33.710 --> 00:14:39.540
So the next thing I want to talk
about is model view controller.

00:14:39.539 --> 00:14:45.009
Hopefully you guys have heard of this paradigm and
you're going to hear it over and over again this week.

00:14:45.009 --> 00:14:45.549
And what is it?

00:14:45.549 --> 00:14:49.490
Obviously the model, I kinda like to
use engine view controller, right,

00:14:49.490 --> 00:14:52.310
but the model is your intellectual property.

00:14:52.309 --> 00:14:53.649
This is your code.

00:14:53.649 --> 00:14:57.750
The view is what you know the view,
users view into your data set

00:14:57.750 --> 00:15:00.350
and the controller is the view that ties all these together.

00:15:00.350 --> 00:15:02.590
And why is this important.

00:15:02.590 --> 00:15:09.940
Okay, for coming from other platforms, this is really
critical, right, for you guys to reuse and share your code.

00:15:09.940 --> 00:15:14.710
You really want to uncouple the platform
specific code from the platform neutral object.

00:15:14.710 --> 00:15:18.190
Obvious, but its amazing how many
people still don't do that.

00:15:18.190 --> 00:15:23.050
And what's really critical is you see
with Mac OS X and Leopard the idea

00:15:23.049 --> 00:15:29.859
of what my view will be changes dramatically right and
you guys are, have probably bumped into that with dot net.

00:15:29.860 --> 00:15:36.310
So whether it's an HTML view because I can write code that
can be uses a plug-in inside Safari, things like that.

00:15:36.309 --> 00:15:39.399
I don't know where my code might live.

00:15:39.399 --> 00:15:47.350
Language changes of course you know coming from C Sharp to
Objective-C. And you know these widely divergent tool kits

00:15:47.350 --> 00:15:51.460
like Windows Presentation framework, Core Animation.

00:15:51.460 --> 00:15:55.250
And it's really important when you separate
that code to leverage the system, right?

00:15:55.250 --> 00:16:01.190
I want to do my work in my engine code and let
the system take care of all that other thing

00:16:01.190 --> 00:16:03.560
which is you know what Derek talked about in Leopard.

00:16:03.559 --> 00:16:05.599
You really, really want to take advantage of that.

00:16:05.600 --> 00:16:09.110
Of course, this lets you share you code more effectively.

00:16:09.110 --> 00:16:12.050
So what should you be doing?

00:16:12.049 --> 00:16:14.479
Okay. You need to take ownership of your code.

00:16:14.480 --> 00:16:16.670
People always say, oh you know this is complex.

00:16:16.669 --> 00:16:19.240
You're like yeah, of course its complex, right?

00:16:19.240 --> 00:16:24.350
But you need to factor this and start thinking
about how your code breaks down into these models

00:16:24.350 --> 00:16:28.490
and not worry about the view so much right now.

00:16:28.490 --> 00:16:30.330
Please remove view dependency.

00:16:30.330 --> 00:16:33.770
I have all these developers say, oh
I just have a check box on screen.

00:16:33.769 --> 00:16:37.699
I, I load up my code and I set the state once and I'm done.

00:16:37.700 --> 00:16:38.680
MVC that breaks, right?

00:16:38.679 --> 00:16:45.379
You have to store your application state inside
your controller or inside your model code.

00:16:45.379 --> 00:16:50.950
You do not want to because I had a guy this morning say
yep, I took some code and I wrote some AppleScript behavior

00:16:50.950 --> 00:16:57.280
for it, it broke because they were storing the
UI, the application state and the UI guess what,

00:16:57.279 --> 00:17:01.279
you don't have a UI when you're being
called from somebody's AppleScripts.

00:17:01.279 --> 00:17:03.949
Avoid intermediate representations.

00:17:03.950 --> 00:17:11.080
I cannot tell you how many times I have had developers come
and say oh, I load this and I have this cross platform code

00:17:11.079 --> 00:17:14.099
and I convert the thing to a C string
and then I try and load the file.

00:17:14.099 --> 00:17:15.329
I'm like, what?

00:17:15.329 --> 00:17:20.529
You've blown away the whole Unicode thing and,
and they have this intermediate representation.

00:17:20.529 --> 00:17:21.519
Don't do it.

00:17:21.519 --> 00:17:26.670
It's better to wrap the high level system objects, right?

00:17:26.670 --> 00:17:28.860
And again take advantage of what the system offers.

00:17:28.859 --> 00:17:32.389
Let the system do the work for you.

00:17:32.390 --> 00:17:36.610
A real quick thing about you're
going to see this slide all week,

00:17:36.609 --> 00:17:38.709
in fact you probably already seen it a couple times today.

00:17:38.710 --> 00:17:46.450
What I want to say is what's cool about Mac OS X is you're
free to pick from any of these layers, drop down into BSD

00:17:46.450 --> 00:17:50.860
and Darwin if you want, pop back
up into your Cocoa, Java code.

00:17:50.859 --> 00:17:57.000
It's really, really cool that we don't have a lot of
limitations you know that you see on other systems.

00:17:57.000 --> 00:17:59.000
This, you're free to mix and match.

00:17:59.000 --> 00:18:00.819
And I think that I need to stress that too.

00:18:00.819 --> 00:18:02.720
Don't, you know people talk about Objective-C Cocoa.

00:18:02.720 --> 00:18:08.309
Remember, as Matt will point out later, our
tools are all kind of language agnostic.

00:18:08.309 --> 00:18:13.919
C, C++, Objective-C, Java, you
can mix and match wherever you want.

00:18:15.390 --> 00:18:21.380
So on to Objective-C. It's a superset of
C, Matt's going to go more into this later.

00:18:21.380 --> 00:18:27.890
It, as an old traditional long time C and C++
developer, I have to tell you that I'm really,

00:18:27.890 --> 00:18:32.410
really enjoying Objective-C. And it's, I've
just gotten into it in the last 10 months.

00:18:32.410 --> 00:18:35.380
And I, I can tell you that it's really incredible.

00:18:35.380 --> 00:18:41.790
And the idea that it's heavily introspected so
that facilitates all these things like delegation

00:18:41.789 --> 00:18:46.909
that you'll hear over and over again and all this
introspection allows the dynamic runtime binding.

00:18:46.910 --> 00:18:50.920
Okay? Its really dynamically bond up by name.

00:18:50.920 --> 00:18:58.480
Okay? And Cocoa, you know Cocoa is the
equivalent, is you know our dot net equivalent.

00:18:58.480 --> 00:19:04.069
It's built on, its Objective-C code and it's, you know
there's thousands of mannerisms in this frameworks.

00:19:04.069 --> 00:19:05.960
And that's why I tell people, use it.

00:19:05.960 --> 00:19:10.150
Take advantage of the system and just do
what's important for your application.

00:19:10.150 --> 00:19:11.900
Don't do the heavy lifting.

00:19:11.900 --> 00:19:14.090
The NS prefix, people say what's that?

00:19:14.089 --> 00:19:16.119
It's NeXTSTEP legacy.

00:19:16.119 --> 00:19:23.000
So that's the kind of the 50000 foot overview
and I just wanted to do a, a quick demo.

00:19:23.000 --> 00:19:25.509
Demo please.

00:19:25.509 --> 00:19:33.400
( Period of silence )

00:19:33.400 --> 00:19:37.680
So what I want to start out with here, one
thing that people bump into more a lot

00:19:37.680 --> 00:19:40.490
when they're bringing their MVC layer over right.

00:19:40.490 --> 00:19:41.549
I have my DLLs.

00:19:41.549 --> 00:19:45.339
I want to bring those over to the Mac
and integrate them with my application.

00:19:45.339 --> 00:19:52.139
So I'm going to start here with a simple,
this is my little test framework code.

00:19:52.140 --> 00:19:58.490
And all it does is oh, let's see.

00:19:58.490 --> 00:20:00.000
Let's build it and run it.

00:20:00.000 --> 00:20:01.049
I put this together.

00:20:01.049 --> 00:20:03.460
There's absolutely no code behind this right now.

00:20:03.460 --> 00:20:07.440
This is a typically entry point for Cocoa application.

00:20:07.440 --> 00:20:09.820
You see there's absolutely no other code in here.

00:20:09.819 --> 00:20:11.769
I've got some resources.

00:20:11.769 --> 00:20:13.859
I've got my standard linked in frameworks.

00:20:13.859 --> 00:20:15.000
That's it.

00:20:15.000 --> 00:20:16.930
So let's run that.

00:20:16.930 --> 00:20:24.529
Comes up behind here and this is my nib, my resource
file and I've got a button and a text field in there.

00:20:24.529 --> 00:20:32.329
So I want to show you how I can integrate a straight C++
non Cocoa, there's no, into this application.

00:20:32.329 --> 00:20:36.319
( Period of silence )

00:20:36.319 --> 00:20:41.259
So here I've got my simple C++ framework.

00:20:41.259 --> 00:20:49.390
I've got a simple string class that actually
kinda mimics C string if you've seen this on MFC.

00:20:49.390 --> 00:20:50.530
Called TX string.

00:20:50.529 --> 00:20:53.470
All straight C++.

00:20:53.470 --> 00:20:57.740
Okay? And I'm going to build that.

00:20:57.740 --> 00:21:01.009
( Period of silence )

00:21:01.009 --> 00:21:04.740
And then I'm going to integrate that
into my test framework here.

00:21:04.740 --> 00:21:06.160
So let's bring up the folder.

00:21:06.160 --> 00:21:08.390
( Period of silence )

00:21:08.390 --> 00:21:10.310
And this, you're going to see this a lot this week.

00:21:10.309 --> 00:21:17.829
So I'm going to integrate my two Cocoa files
and I want to share my Cocoa header here.

00:21:17.829 --> 00:21:20.619
( Period of silence )

00:21:20.619 --> 00:21:23.349
This is a typical controller class.

00:21:23.349 --> 00:21:31.779
I've got a text field I bar and I've
got a, an action that I'm going to tie to.

00:21:31.779 --> 00:21:32.519
( Period of silence )

00:21:32.519 --> 00:21:34.299
So I'm going to open my nib.

00:21:34.299 --> 00:21:37.740
I'm going to drag in an object.

00:21:37.740 --> 00:21:41.480
So a couple points I want to point, I'm going
very fast, but you're going to see more of this.

00:21:41.480 --> 00:21:48.769
So what Xcode is doing is telling Interface Builder
to parse all the source in my code right now.

00:21:48.769 --> 00:21:56.789
And what's interesting is if I go back to Xcode and look
at my controller class, I've called it AA simple controller.

00:21:56.789 --> 00:21:59.889
Now I've just added a dumb object to Interface Builder.

00:21:59.890 --> 00:22:01.400
I'm going to get info about that.

00:22:01.400 --> 00:22:06.400
And I'm going to tell it I want it
to be an AA simple controller.

00:22:06.400 --> 00:22:09.540
Xcode has actually told Interface Builder to parse this.

00:22:09.539 --> 00:22:10.740
It's parsed my headers.

00:22:10.740 --> 00:22:14.049
It knows already knows about my code.

00:22:14.049 --> 00:22:14.649
That's the difference.

00:22:14.650 --> 00:22:17.580
This is not a new I wizard, okay.

00:22:17.579 --> 00:22:21.159
Interface Builder is integral to building your code.

00:22:21.160 --> 00:22:22.570
It knows about your code.

00:22:22.569 --> 00:22:25.579
Again, Cocoa introspection, right.

00:22:25.579 --> 00:22:27.240
So I'm going to tie that to that.

00:22:27.240 --> 00:22:31.690
Here's my little window that I put together
from my little tool palette over here.

00:22:31.690 --> 00:22:33.009
And this is standard behavior.

00:22:33.009 --> 00:22:36.549
I'm going to drag, don't worry too much about the details.

00:22:36.549 --> 00:22:40.669
But I'm going to drag from my button to my object.

00:22:40.670 --> 00:22:42.769
And guess what, hey it sees the action.

00:22:42.769 --> 00:22:44.639
Set string on some action.

00:22:44.640 --> 00:22:46.420
I click just like that.

00:22:46.420 --> 00:22:50.630
Now my object needs to know about the
text field so it can set that data.

00:22:50.630 --> 00:22:52.340
I controlled right from that to that.

00:22:52.339 --> 00:22:55.909
And I set the outlet, my text field.

00:22:55.910 --> 00:23:00.500
Okay. So now I've got my, I save my nib.

00:23:02.920 --> 00:23:06.269
And I build and everything great.

00:23:06.269 --> 00:23:07.670
But I wanted to do something.

00:23:07.670 --> 00:23:11.050
So now I've set this up ahead of time
so not to bore you guys too much.

00:23:11.049 --> 00:23:15.720
And I'm going to say I want to use this
framework that I've built, okay.

00:23:15.720 --> 00:23:21.680
And so I'm going to turn that on and then.

00:23:21.680 --> 00:23:22.060
( Period of silence )

00:23:22.059 --> 00:23:23.740
Okay, very clean.

00:23:23.740 --> 00:23:32.819
And then I need to go back here to my
framework and make sure that's built.

00:23:32.819 --> 00:23:34.049
Go up here.

00:23:34.049 --> 00:23:37.990
( Period of silence )

00:23:37.990 --> 00:23:43.920
And I'm going to drag my framework
into my high level code here.

00:23:43.920 --> 00:23:47.769
( Period of silence )

00:23:47.769 --> 00:23:51.119
Okay. And then I gotta do one more step.

00:23:51.119 --> 00:23:55.959
Remember that this is going to build an application bundle.

00:23:55.960 --> 00:24:01.670
Okay and I, so you're seeing parts of Xcode if you
haven't seen before, I'm going to add a copy files phase.

00:24:01.670 --> 00:24:05.509
New build phase.

00:24:05.509 --> 00:24:06.369
Copy files.

00:24:06.369 --> 00:24:09.949
And I'm going to tell it to put it in my frameworks bundle.

00:24:09.950 --> 00:24:11.850
Which is my, where my DLLs go.

00:24:11.849 --> 00:24:17.419
And I simple drag that down into there.

00:24:17.420 --> 00:24:21.630
Now when I build and run.

00:24:21.630 --> 00:24:28.320
Now what this code has done, let
me go to my simple framework here.

00:24:28.319 --> 00:24:36.849
In the controller, when I get the action,
it literally calls into string from key

00:24:36.849 --> 00:24:41.609
which is a function I put in my
simple C++ object here.

00:24:41.609 --> 00:24:44.079
And there it is.

00:24:44.079 --> 00:24:45.169
String from key.

00:24:45.170 --> 00:24:48.570
So I'm calling into the DLL directly from my framework.

00:24:48.569 --> 00:24:53.349
So it's a straight C++ being
called from Cocoa, absolutely no problem.

00:24:53.349 --> 00:24:56.959
Now one interesting thing about localization.

00:24:56.960 --> 00:24:59.230
Okay. So one, one more minute here.

00:24:59.230 --> 00:25:03.839
So I'm going to go into my resources here
and there's the string that you say.

00:25:03.839 --> 00:25:05.949
This is the English version of my string.

00:25:05.950 --> 00:25:10.580
Okay? Here's how easy, I'm not
going to change one line of code.

00:25:10.579 --> 00:25:16.549
I'm going to get info about this string and I'm
going to tell it make this file localizable.

00:25:16.549 --> 00:25:20.450
You see that the little spin out appears here.

00:25:20.450 --> 00:25:24.779
I'm going to go back and say I want to add a localization.

00:25:24.779 --> 00:25:27.299
I'm going to make it French.

00:25:27.299 --> 00:25:29.039
I'm done with that.

00:25:30.680 --> 00:25:32.120
Hopefully this will work.

00:25:32.119 --> 00:25:37.750
Then I'm going to say this is the le.

00:25:37.750 --> 00:25:38.710
( Background noise )

00:25:38.710 --> 00:25:41.500
French version of my string, right.

00:25:41.500 --> 00:25:45.839
Okay. Now what I want to point out is let's quit that.

00:25:45.839 --> 00:25:48.829
I haven't touched any code right.

00:25:48.829 --> 00:25:56.019
So now I have to clean this and actually there's
a bug currently in, in Xcode and the pre,

00:25:56.019 --> 00:26:01.079
in the beta, so let's delete the framework as well.

00:26:01.079 --> 00:26:06.189
And then clean my target here.

00:26:06.190 --> 00:26:07.910
( Period of silence )

00:26:07.910 --> 00:26:10.350
Rebuild my project.

00:26:10.349 --> 00:26:12.250
And hopefully this will work.

00:26:12.250 --> 00:26:16.490
Oh, I need to bring up the System
Preferences so I can change my language.

00:26:17.710 --> 00:26:21.809
And then build my application that uses my framework.

00:26:21.809 --> 00:26:22.389
And let's run it.

00:26:22.390 --> 00:26:27.390
( Period of silence )
All right, I still get the English version, cool.

00:26:27.390 --> 00:26:29.120
So let's quit.

00:26:30.130 --> 00:26:32.710
Go to international.

00:26:32.710 --> 00:26:34.680
Change my language to French.

00:26:34.680 --> 00:26:37.470
Again, no code, hopefully this will still work.

00:26:37.470 --> 00:26:44.009
( Period of silence )
All right, zero code.

00:26:44.009 --> 00:26:47.210
Okay. Only content changes.

00:26:47.210 --> 00:26:54.579
And it's really that simple whether its image
data, HTML content, the system finds it for you.

00:26:54.579 --> 00:26:57.369
So and I wanted to show you the finished product here.

00:26:57.369 --> 00:27:00.709
If you go to my products here.

00:27:00.710 --> 00:27:03.450
And oh, sorry.

00:27:03.450 --> 00:27:13.130
And let's reveal this in the finder and if I
right click on this, show package contents.

00:27:13.130 --> 00:27:15.620
Hey, does that look familiar?

00:27:15.619 --> 00:27:19.029
There's my frameworks, there's my DLL.

00:27:19.029 --> 00:27:26.129
And there's any and if I go into my
resources folder, hey, French and English.

00:27:26.130 --> 00:27:31.430
Again, I've had to do nothing except
change my resource content.

00:27:31.430 --> 00:27:36.870
Okay. And, and that's how easy it can be.

00:27:36.869 --> 00:27:42.299
And once you get these systems set up and
lets just, so there's my test framework.

00:27:42.299 --> 00:27:46.659
And there's the resources that
are for that actual application.

00:27:46.660 --> 00:27:49.410
Okay? That's it.

00:27:49.410 --> 00:27:50.320
Slides please.

00:27:50.319 --> 00:27:52.589
( Period of silence )

00:27:52.589 --> 00:27:52.909
Oop.

00:27:52.910 --> 00:27:53.330
( Period of silence )

00:27:53.329 --> 00:28:01.889
And now Derek's going to come up and
hit you with some even neater stuff.

00:28:01.890 --> 00:28:04.080
>> Yeah. Thank you Larry.

00:28:04.079 --> 00:28:08.720
( Applause )

00:28:08.720 --> 00:28:11.420
So as you can see, the goal isn't trying

00:28:11.420 --> 00:28:14.400
to create an application that's going to be the
less common denominator across all the OSs.

00:28:14.400 --> 00:28:20.170
The goal is really to take advantage of whatever OS that
you're writing for and give the best user experience

00:28:20.170 --> 00:28:22.850
for whatever platform you're going
to deliver that application on.

00:28:22.849 --> 00:28:27.139
And the way Larry suggests of writing a Cocoa
front end which bundles our latest technologies

00:28:27.140 --> 00:28:30.920
and then having a common backend, the C++
engine is really the way to go

00:28:30.920 --> 00:28:32.840
if you're going to go this cross platform route.

00:28:32.839 --> 00:28:37.269
So now I get to tell you about what I think are
probably the five killer technologies in Mac OS X.

00:28:37.269 --> 00:28:41.400
I'll start off by just giving you kind of a brief
overview so you can just kind of wet your palette with it

00:28:41.400 --> 00:28:44.070
and see if you want to learn more
through, throughout the rest of the week.

00:28:44.069 --> 00:28:48.700
Before I can talk about these killer new
technologies, I have to talk about Cocoa itself.

00:28:48.700 --> 00:28:52.019
Cocoa is our object oriented class library.

00:28:52.019 --> 00:28:53.460
It's our object oriented framework.

00:28:53.460 --> 00:28:57.490
And what I would have to say the single
neatest thing about Cocoa is the ability

00:28:57.490 --> 00:29:00.870
that it just follows these common
coding conventions and styles.

00:29:00.869 --> 00:29:06.699
Really meaning, once you start to learn a couple of these
conventions, it makes it so easy to go away and grab

00:29:06.700 --> 00:29:12.309
and grasp this whole new technologies, add them into your
application with a few lines of code and things just work.

00:29:12.309 --> 00:29:16.849
Most of the time people compare developing
applications in Cocoa like building a house with Legos.

00:29:16.849 --> 00:29:19.109
You take this technology over here
and you just fit it right on.

00:29:19.109 --> 00:29:19.539
Works great.

00:29:19.539 --> 00:29:23.599
Over the last year, we've been working
a lot on the infrastructure of Cocoa.

00:29:23.599 --> 00:29:28.289
The whole thing is now 64-bit clean from
the top all the way down through the bottom.

00:29:28.289 --> 00:29:31.809
In Tiger we have the BSD layer that's
64-bit clean and now we've brought

00:29:31.809 --> 00:29:34.629
that up through the application class libraries.

00:29:34.630 --> 00:29:37.170
Cocoa is also resolution independent.

00:29:37.170 --> 00:29:42.600
That means if you were to write and application in
Cocoa that used our common user interface design,

00:29:42.599 --> 00:29:49.209
Interface Builder and so forth, automatically your
application is going to scale with resolution independence.

00:29:49.210 --> 00:29:53.059
Also in Cocoa for the last year we've
introduced a number of new controls.

00:29:53.059 --> 00:29:58.259
Typically developers love new controls because it
means you get a whole lot of functionality developed

00:29:58.259 --> 00:30:01.269
by the experts back in Cupertino and you get that for free.

00:30:01.269 --> 00:30:05.180
Some of the new controls here are for instance
predicate editor which you see up here.

00:30:05.180 --> 00:30:09.660
And this is similar to what you might see in your
mail for filtering out your spam for instance.

00:30:09.660 --> 00:30:13.180
We have a new collections view which
used to be called the grid view.

00:30:13.180 --> 00:30:16.590
By taking advantage of these new controllers, you
also get the latest functionality in there too.

00:30:16.589 --> 00:30:17.779
These are available in Leopard.

00:30:17.779 --> 00:30:22.250
So both of these views come like
pre bundled with animation in them.

00:30:22.250 --> 00:30:25.529
Core data is also part of what I would call Cocoa.

00:30:25.529 --> 00:30:28.559
In general CoreData I think at the
highest level you can think of this

00:30:28.559 --> 00:30:31.669
as almost embedding a database into your application.

00:30:31.670 --> 00:30:38.370
We've stored the backend in either
binary, XML or SQL light format.

00:30:38.369 --> 00:30:42.139
And the biggest improvement, well I don't want to say
the biggest, but one of the improvements since Tiger

00:30:42.140 --> 00:30:46.090
that we've made in CoreData is its now
somewhere between 5 and 20 times faster ,

00:30:46.089 --> 00:30:50.519
depending on the operation you want to make.

00:30:50.519 --> 00:30:53.559
Tomorrow we have a session at 2 o'clock
in the Presidio, that's upstairs,

00:30:53.559 --> 00:30:56.220
Cocoa today that will give you a rough
idea of what we've been doing in Cocoa

00:30:56.220 --> 00:30:59.539
in the last year at 2 o'clock like I said tomorrow.

00:30:59.539 --> 00:31:02.230
I can't really talk about Cocoa
though without talking a little bit

00:31:02.230 --> 00:31:04.870
about Objective-C. Larry mentioned a little bit about it.

00:31:04.869 --> 00:31:07.429
And I just wanted to mention Objective-C 2 point 0.

00:31:07.430 --> 00:31:13.100
One of the main goals of writing Objective-C 2 point
0 is to make it so you guys have to write less code.

00:31:13.099 --> 00:31:15.689
And by doing that we added garage collection.

00:31:15.690 --> 00:31:19.789
A lot of modern languages now a
days include garage collection.

00:31:19.789 --> 00:31:23.349
So this means if you have an existing
Java app, should make it that much easier

00:31:23.349 --> 00:31:26.959
to bring your Java app over towards Cocoa.

00:31:28.150 --> 00:31:30.210
We also added properties.

00:31:30.210 --> 00:31:33.650
Properties are, let me see how I can describe this.

00:31:33.650 --> 00:31:37.019
It's a way of maybe sticking on
attributes onto instance variables.

00:31:37.019 --> 00:31:38.750
This might be one way of thinking about it.

00:31:38.750 --> 00:31:43.960
So you can say I want to access this
instance variable by reference.

00:31:43.960 --> 00:31:47.829
When you do that, it will automatically
synthesize you accessor routines.

00:31:47.829 --> 00:31:51.269
You're getters and your setters
to access this instance variable.

00:31:51.269 --> 00:31:55.539
So if you have a FU, it might generate
that set FU type routine for you.

00:31:55.539 --> 00:32:00.180
Now based on that attribute is how it will
automatically synthesize those accessors.

00:32:00.180 --> 00:32:04.990
So it'll either do a deep copy, copying the
contents of that pointer or maybe a shallow copy

00:32:04.990 --> 00:32:07.259
and just point the, copy the pointer across.

00:32:07.259 --> 00:32:09.079
That's one of the functions of properties.

00:32:09.079 --> 00:32:13.159
The other one is changing that bracket
notation to more of a standard dot notation

00:32:13.160 --> 00:32:16.190
that people are familiar with, as
you can see on the slide up here.

00:32:16.190 --> 00:32:19.960
And lastly we wanted to improve performance
as you may have seen this morning.

00:32:19.960 --> 00:32:24.420
One of the ways that we improve performance in the language
is by making it not only easier to read through things

00:32:24.420 --> 00:32:28.640
like this fast iteration, but its also faster.

00:32:28.640 --> 00:32:31.450
As the, as the name implies.

00:32:31.450 --> 00:32:38.090
So that's a little bit about Objective-C. Overall, I think
you know throughout the industry I think that for a number

00:32:38.089 --> 00:32:43.379
of years software developers were looking at making
developers more productive by you know adding more

00:32:43.380 --> 00:32:46.750
and more enhancements to these gigantic class libraries.

00:32:46.750 --> 00:32:47.230
Things like MFC.

00:32:47.230 --> 00:32:50.230
But I think over the last five
years or so there's been a trend

00:32:50.230 --> 00:32:53.150
to also go ahead and improve the languages in themselves.

00:32:53.150 --> 00:32:58.810
And that's when we start to see things like C Sharp
and Ruby and Objective-C 2 point 0 come to life.

00:32:58.809 --> 00:33:05.169
So now on with my top favorite technologies
in Leopard and Mac OS X in general.

00:33:05.170 --> 00:33:11.160
Animation has got to be hands down the
technology that developers are clamoring for.

00:33:11.160 --> 00:33:15.990
This is the technology that's when
developers see decide that the next version

00:33:15.990 --> 00:33:20.029
of their products are going to
be targeted toward Leopard only.

00:33:20.029 --> 00:33:24.220
And it's really amazing the way that it's implemented.

00:33:24.220 --> 00:33:29.059
We have a lot of things, for instance,
no animation loops or timers.

00:33:29.059 --> 00:33:32.190
No frame by frame drawing and automatic retargeting.

00:33:32.190 --> 00:33:36.720
To kind of put this in perceptive, in the past I
have written some of the functionality for instance

00:33:36.720 --> 00:33:38.750
where I would show a palette window on screen.

00:33:38.750 --> 00:33:42.250
And as I mouse over that pout window it'd
come to the front, be completely opaque.

00:33:42.250 --> 00:33:44.369
And as I move my mouse away, it would fade out.

00:33:44.369 --> 00:33:49.129
Just doing simple things like this currently
really involves you chaining up your timers,

00:33:49.130 --> 00:33:53.680
you say fire a timer ten times a second and at
the same time change that alpha of that window.

00:33:53.680 --> 00:33:57.400
But that really involves keeping almost like a
state machine, which direction was I going in?

00:33:57.400 --> 00:33:58.410
I'm fading out.

00:33:58.410 --> 00:33:59.690
How much alpha have I already applied?

00:33:59.690 --> 00:34:00.690
How much is left?

00:34:00.690 --> 00:34:03.380
Once the user puts that mouse right
in there, what do I have to do now?

00:34:03.380 --> 00:34:04.620
I have to think about retargeting.

00:34:04.619 --> 00:34:05.399
What state am I in?

00:34:05.400 --> 00:34:06.500
Which direction do I go in?

00:34:06.500 --> 00:34:11.340
That involves writing quite a substantial
amount of fragile code with your timers and all.

00:34:11.340 --> 00:34:12.840
Now we handle all this for you.

00:34:12.840 --> 00:34:18.320
It really gets dropped down to about half of a line of
code to implement this type of thing through animation.

00:34:18.320 --> 00:34:23.450
And it really allows you to take your
application user experience to the next level.

00:34:23.449 --> 00:34:27.500
Its not, its not a means of adding
eye candy to your application.

00:34:27.500 --> 00:34:32.980
It really allows you to provide something
that's more intuitive to our users.

00:34:32.980 --> 00:34:37.030
At this point I also wanted to mention
that we have coding head starts.

00:34:37.030 --> 00:34:39.250
We developed 19 of these for this conference.

00:34:39.250 --> 00:34:43.400
We have one called the Core Animation
head start which includes a video,

00:34:43.400 --> 00:34:47.829
a read me as well as tutorials and sample code.

00:34:47.829 --> 00:34:51.559
We have two sessions covering animation
and they occur tomorrow

00:34:51.559 --> 00:34:54.139
in Presidio immediately following that Cocoa today session.

00:34:54.139 --> 00:34:58.859
And they start off at the view level describing how
to add an animation of the view level and then the one

00:34:58.860 --> 00:35:02.990
at 5 pm will talk more about the
underlying Core Animation engine.

00:35:02.989 --> 00:35:06.649
So I'm going to go ahead and talk a little
bit more about animation while I'm up here.

00:35:06.650 --> 00:35:11.139
In general I think that there's four types of
animation you can add to your applications.

00:35:11.139 --> 00:35:12.440
We'll start off with the easiest.

00:35:12.440 --> 00:35:19.099
The easiest way is to have to write absolutely no code at
all and start integrating animation into your application.

00:35:19.099 --> 00:35:24.659
Then we have the ability to animate these
built in view and with the properties.

00:35:24.659 --> 00:35:28.349
So every view and every window has
certain properties associated with it.

00:35:28.349 --> 00:35:31.759
We know its size, the rectangle
that it makes, we know its origin.

00:35:31.760 --> 00:35:33.550
We know the amount of alpha applied to that.

00:35:33.550 --> 00:35:35.170
That has other properties as well.

00:35:35.170 --> 00:35:37.400
For instance maybe the rotation of that view.

00:35:37.400 --> 00:35:39.860
( Period of silence )

00:35:39.860 --> 00:35:44.190
Then we also have the ability to
animate custom view properties.

00:35:44.190 --> 00:35:50.200
So if currently your creating your own view, lets say
you're creating add volume knob for your application.

00:35:50.199 --> 00:35:55.289
And you want to animate that knob going from you know
volume one on the dial all the way up to volume 10.

00:35:55.289 --> 00:35:57.579
You want that knob to slowly turn up there.

00:35:57.579 --> 00:36:00.529
This is what I mean about adding
animation to your custom view properties.

00:36:00.530 --> 00:36:04.900
You can't just tell a normal view set volume to 10.

00:36:04.900 --> 00:36:06.740
It doesn't understand what this concept of volume is.

00:36:06.739 --> 00:36:07.959
This is your own view.

00:36:07.960 --> 00:36:10.610
So you know how you're going to want to turn that volume up.

00:36:10.610 --> 00:36:16.599
And if you think about this, this also allows
you to hook in to things that aren't only visual.

00:36:16.599 --> 00:36:21.119
So while you're animating this control, you can
also be setting the output level of your speakers.

00:36:21.119 --> 00:36:24.440
So now you're animating non visual properties as well.

00:36:24.440 --> 00:36:29.659
And fourth, and this is probably the
most complex and this is the ability

00:36:29.659 --> 00:36:34.239
to use the underlying Core Animation engine
directly from your, from your Cocoa application

00:36:34.239 --> 00:36:37.049
to get that fully immersive user interface.

00:36:37.050 --> 00:36:39.720
The things like what we have in Front Row or Time Machine.

00:36:39.719 --> 00:36:41.279
You can now create your own UI

00:36:41.280 --> 00:36:45.610
And you can do this all, starting at the Cocoa
level and then dive down as deep as you need to go.

00:36:45.610 --> 00:36:49.980
So lets talk about the easiest way
first, the ability to add animation

00:36:49.980 --> 00:36:51.809
into your applications without having to write any code.

00:36:51.809 --> 00:36:54.250
There's a couple ways to do this.

00:36:54.250 --> 00:36:59.869
One of them is the new Interface Builder 3 allows you
to add these transition effects into your application.

00:36:59.869 --> 00:37:05.769
So as you design your user interface in Interface
Builder, it allows you to set transition effects.

00:37:05.769 --> 00:37:10.159
So for instance if I have a tab window and
I want to switch from one tab to the next tab,

00:37:10.159 --> 00:37:12.289
maybe I don't want to just pop in the new view.

00:37:12.289 --> 00:37:17.130
Maybe I wanted to do a page scroll effect
or dissolve to the next one, or slide in.

00:37:17.130 --> 00:37:21.400
You can now add all of these transition
effects directly in Interface Builder.

00:37:21.400 --> 00:37:25.690
And in fact you could probably add a whole bunch of
them because it not only does some standard ones,

00:37:25.690 --> 00:37:29.519
it does anything that core image transition effects support.

00:37:29.519 --> 00:37:35.150
So as new transition effects get added to your system,
you can now add these directly to your user interface.

00:37:36.250 --> 00:37:42.579
Next, the ability to animate these
built in view and window properties.

00:37:42.579 --> 00:37:47.710
So what we see up here is a simple
call to set the frame of a view,

00:37:47.710 --> 00:37:52.260
that basically means set the origin
and set the size of this view.

00:37:52.260 --> 00:37:56.010
So how would we, how would you go
about adding animation to this API?

00:37:56.010 --> 00:38:01.970
I mean, for me the obviously solution is stick on an
extra parameter, say whether or not it's animatable.

00:38:01.969 --> 00:38:04.099
Okay? Yes or no.

00:38:04.099 --> 00:38:05.289
That's a, that's a solution.

00:38:05.289 --> 00:38:09.239
That's one that I thought of, but that has a side
effect of now double the number of APIs you have.

00:38:09.239 --> 00:38:13.529
You have all the existing APIs and you have to
double them and stick on an extra parameter.

00:38:13.530 --> 00:38:16.750
So what we came up with was something
quite really elegant solution.

00:38:16.750 --> 00:38:19.159
This is the half line of code that I was talking about.

00:38:19.159 --> 00:38:22.960
We can now ask the view for its animator proxy.

00:38:22.960 --> 00:38:26.010
And then send that message to the animator proxy itself.

00:38:26.010 --> 00:38:30.650
Anything that gets sent to this animator
will automatically animate over time.

00:38:30.650 --> 00:38:32.150
We have built in defaults.

00:38:32.150 --> 00:38:34.789
I believe it's a quarter second to do the animation.

00:38:34.789 --> 00:38:37.730
And we have this kind of ease in, ease out time curve,

00:38:37.730 --> 00:38:42.809
so your animation will start slow,
speed up and then slow down at the end.

00:38:42.809 --> 00:38:48.829
And probably the most elegant thing about this animator
concept, or this animator proxy is messages that you send

00:38:48.829 --> 00:38:54.029
to the animator that it doesn't understand, for instance
if we want to change the title of one of our views,

00:38:54.030 --> 00:38:56.769
there's no clear way to animate the changing of the text.

00:38:56.769 --> 00:39:01.170
So when it doesn't understand that message set title,
it'll go ahead and forward it on to the view itself.

00:39:01.170 --> 00:39:04.650
So this becomes very powerful if you
already have your existing layout code

00:39:04.650 --> 00:39:07.260
where you were passing in views to change the layout.

00:39:07.260 --> 00:39:10.800
You now passing in the animator, it will then
go ahead and animate all those transitions.

00:39:10.800 --> 00:39:13.380
Anything it doesn't understand will
still get handled appropriately.

00:39:13.380 --> 00:39:20.570
So at this time I'd like to show off a couple of
demos from the Core Animation coding head start.

00:39:20.570 --> 00:39:25.350
If we can go to demo machine please?

00:39:26.510 --> 00:39:31.450
( Period of silence )

00:39:31.449 --> 00:39:37.809
Okay. First thing I'm going to show
off is this picture spinner demo.

00:39:37.809 --> 00:39:43.579
Go ahead and launch the project and we'll build and run it.

00:39:43.579 --> 00:39:50.009
So what we have here is a small application
which is going to, let me bring this up,

00:39:50.010 --> 00:39:54.200
which is going to apply certain effects to our image here.

00:39:54.199 --> 00:39:57.469
We'll go ahead and drag and drop an image on this window.

00:39:57.469 --> 00:40:04.000
I go ahead and maybe change the alpha value, the
rotation, the size, the origin and we'll hit start.

00:40:04.000 --> 00:40:05.360
( Background noise )

00:40:05.360 --> 00:40:13.079
This is the effect that you're going to
get through Core Animation by adding in,

00:40:13.079 --> 00:40:15.590
by adding in just normal visual effects in here.

00:40:15.590 --> 00:40:20.220
I think currently today if you were to do these types
of things, it would have an animation time of zero here.

00:40:20.219 --> 00:40:22.819
As you hit start, it just flashes into place.

00:40:22.820 --> 00:40:31.030
By changing this duration time over here, you can now
start to get a better user experience for, for our user.

00:40:31.030 --> 00:40:33.519
It'll slowly start to slide into perspective.

00:40:33.519 --> 00:40:37.940
So users can kind of keep contact with
that image and see how it's changing.

00:40:37.940 --> 00:40:39.550
( Period of silence )

00:40:39.550 --> 00:40:44.620
The other thing I wanted to show you here
is the actual code to this application.

00:40:46.110 --> 00:40:47.380
There we go.

00:40:47.380 --> 00:40:52.119
The actual code to this application, the entire
application is really only this one method here.

00:40:52.119 --> 00:40:54.079
It's a very small method.

00:40:54.079 --> 00:40:58.559
And you can see that by using the built in Cocoa
framework, you get all that other functionality for free.

00:40:58.559 --> 00:41:06.320
You get the ability to do, to accept drag and drop, to
display the, the entire menuing Windows and so forth.

00:41:06.320 --> 00:41:08.480
This is the whole bulk of our application here.

00:41:08.480 --> 00:41:16.869
The only change that we really had to make
is actually, let me see what's going on here.

00:41:16.869 --> 00:41:21.170
I think I maybe already had one of those running.

00:41:21.170 --> 00:41:21.300
Quit.

00:41:21.300 --> 00:41:22.039
( Period of silence )

00:41:22.039 --> 00:41:27.500
Okay. Let me just change one thing.

00:41:27.500 --> 00:41:28.960
I'm sorry.

00:41:28.960 --> 00:41:30.579
Okay that's still fading out.

00:41:30.579 --> 00:41:35.299
The only change that we had to make to get this to work
is actually the send messages to the animator itself.

00:41:35.300 --> 00:41:38.100
I think I've got a little inconsistency
here with the version that I'm showing

00:41:38.099 --> 00:41:40.509
and the version I'm actually running though.

00:41:40.510 --> 00:41:41.270
( Period of silence )

00:41:41.269 --> 00:41:44.750
But, if we can go back to slides please.

00:41:44.750 --> 00:41:49.449
( Period of silence )

00:41:49.449 --> 00:41:56.809
So now we talked a little bit about how to get animation
for free and how to animate those built in properties.

00:41:56.809 --> 00:42:00.239
Now I'd like to talk a little bit more
about those more advanced concepts.

00:42:00.239 --> 00:42:05.359
Those adding animation to your own custom views
and, and calling down to Core Animation directly.

00:42:05.360 --> 00:42:07.840
If we could go back over to demo.

00:42:07.840 --> 00:42:13.550
( Period of silence )

00:42:13.550 --> 00:42:19.150
First we'll start off with a sample that
we put together on the coding head starts.

00:42:19.150 --> 00:42:20.139
And this is a custom view.

00:42:20.139 --> 00:42:21.730
This is a speedometer here.

00:42:21.730 --> 00:42:26.719
So if you have your own custom view that's a
speedometer, you might want it to change the speed from 70

00:42:26.719 --> 00:42:31.819
to lets make it go 100 miles an hour
and we're going to do this over one second.

00:42:31.820 --> 00:42:36.519
When we hit draw, you can see that
needle smoothly go over to 100.

00:42:36.519 --> 00:42:40.369
This particular sample has a number of
other animation effects built in as well.

00:42:40.369 --> 00:42:46.980
So we can go ahead and animate several different
properties of this speedometer all at once for us.

00:42:46.980 --> 00:42:53.130
So that's the ability to add custom animation to your
own custom views and it really boils down to only having

00:42:53.130 --> 00:42:56.360
to override one method called default animation for keying.

00:42:56.360 --> 00:42:57.620
( Period of silence )

00:42:57.619 --> 00:43:05.139
And the last animation demo I'd like to show you is
one which calls down into Core Animation directly.

00:43:05.139 --> 00:43:10.799
This is a small sample I wrote on a, I think
on a plane ride from somewhere to Chicago.

00:43:10.800 --> 00:43:16.630
And the idea behind this is we take a regular view
hierarchy, something which we design in Interface Builder

00:43:16.630 --> 00:43:22.240
and we're actually calling down into the Core Animation
a matrix transformations directly from Core Animation.

00:43:22.239 --> 00:43:26.209
We take this entire view hierarchy and
it can now be rendered onto a layer

00:43:26.210 --> 00:43:29.579
and we can now animate it through Core Animation directly.

00:43:29.579 --> 00:43:31.719
And as you can see there are actually two different views.

00:43:31.719 --> 00:43:34.309
We might have our own application which is an address book.

00:43:34.309 --> 00:43:36.009
And this might be the read only view.

00:43:36.010 --> 00:43:37.760
We flip it around.

00:43:37.760 --> 00:43:40.910
We'll go ahead and take a snapshot.

00:43:40.909 --> 00:43:42.369
See if this all works.

00:43:42.369 --> 00:43:44.589
Hey! There I am.

00:43:44.590 --> 00:43:46.070
Not a good picture.

00:43:46.070 --> 00:43:47.900
( Laughter )

00:43:47.900 --> 00:43:52.910
But you can see by integrating an image kit into this
application, it's really just a few more lines of code,

00:43:52.909 --> 00:43:55.500
I flip it around, and now I have my read only version here.

00:43:55.500 --> 00:43:58.099
So that's the idea of calling down Core Animation directly.

00:43:58.099 --> 00:44:02.139
And being integrated into your Cocoa view layer.

00:44:02.139 --> 00:44:03.529
Go back to slides please.

00:44:03.530 --> 00:44:07.450
( Period of silence )

00:44:07.449 --> 00:44:09.179
So that was Core Animation.

00:44:09.179 --> 00:44:13.460
Next I'd like to talk to you just a
little bit about resolution independence.

00:44:13.460 --> 00:44:19.900
I think there's kind of a common misconception that
the displays now a days have about 72 pixels per inch.

00:44:19.900 --> 00:44:25.070
But if we actually look at a chart, even back
in 2001, we were up to 96 pixels per inch.

00:44:25.070 --> 00:44:32.620
And we just announced a few weeks ago the new MacBook
Pros and they are coming in at about 133 pixels per inch.

00:44:32.619 --> 00:44:36.420
So you can image that if we did nothing
from our side and just kept on giving,

00:44:36.420 --> 00:44:39.000
giving you better and better display hardware.

00:44:39.000 --> 00:44:43.869
And you did nothing on your side in writing the
applications, things are going to get smaller and smaller

00:44:43.869 --> 00:44:46.880
and smaller to the point of being unusable.

00:44:46.880 --> 00:44:51.280
So one idea here is we can just go ahead
and magnify what we see on this screen.

00:44:51.280 --> 00:44:54.440
And then you get kind of this pixilated look.

00:44:54.440 --> 00:44:58.550
You're not getting the full capabilities
of that display hardware.

00:44:58.550 --> 00:45:02.470
We don't want a pixilated look, we want
something that's going to be crisp and clear.

00:45:02.469 --> 00:45:06.839
You see the difference between this, this
is the resolution independent version.

00:45:06.840 --> 00:45:10.370
Here's the kind of pixilated one that
we might just get if we magnify it.

00:45:10.369 --> 00:45:12.949
The resolution independent version.

00:45:12.949 --> 00:45:17.279
So really in your applications, to take
advantage of resolution independence,

00:45:17.280 --> 00:45:19.960
there's very few things that you have to do.

00:45:19.960 --> 00:45:25.070
If you use our standard controls, you're going to get
resolution independence built in for you for free.

00:45:25.070 --> 00:45:29.590
If you have your own custom art work, your own
custom controls, your splash screens or so forth,

00:45:29.590 --> 00:45:36.579
I recommend that you save those images in what we call
multi representation tip files or multi image tip files.

00:45:36.579 --> 00:45:40.429
That basically means your going to keep
one representation at 72 pixels per inrch,

00:45:40.429 --> 00:45:47.230
another one maybe at 144 pixels per inch, and another
one at 288, collapse them all together in the same file.

00:45:47.230 --> 00:45:53.130
NS Image will automatically pull out the appropriate
representation and then downsize it for you.

00:45:53.130 --> 00:45:57.059
So you're always going to get a crisp
and clear look in your user interface.

00:45:57.059 --> 00:46:00.549
So you can image the time, depending
on how good your eyes are,

00:46:00.550 --> 00:46:03.510
you might want to scale that user
interface with any application.

00:46:03.510 --> 00:46:06.960
And this will allow it to agate at any resolution.

00:46:06.960 --> 00:46:11.699
Or I can think of lots of other reasons why you want to
do this, I just hooked up a Mac mini to TV at home.

00:46:11.699 --> 00:46:15.549
I can make the content of my, of my web
pages nice and big so I can read the text,

00:46:15.550 --> 00:46:17.310
but I still can't read the tabs and the menus.

00:46:17.309 --> 00:46:20.489
Because it's too far away.

00:46:20.489 --> 00:46:23.529
( Period of silence )

00:46:23.530 --> 00:46:24.860
Next is Quick Look.

00:46:24.860 --> 00:46:27.460
You may have already seen quite a little,
quite a bit about Quick Look today.

00:46:27.460 --> 00:46:33.119
Quick Look gives you the ability to provide
quick, rich previews of your documents.

00:46:33.119 --> 00:46:37.219
We have Quick Look plug-ins built in for all the
standard types that you might think of on the Internet.

00:46:37.219 --> 00:46:42.769
Things like JPEG, TIFs, PDFs, HTML files, even Excel files.

00:46:42.769 --> 00:46:47.360
But if you have an application which write
proprietary content out to document files,

00:46:47.360 --> 00:46:50.829
it's crucial that you also deliver a Quick Look plug-in.

00:46:50.829 --> 00:46:54.799
Now it's very easy to write a Quick Look plug
in because you've already written the code.

00:46:54.800 --> 00:46:59.470
Basically all you're going to do is take that code
that's going to read from that file and display that file

00:46:59.469 --> 00:47:03.219
into graphic context and separate that
out into your own Quick Look plug-in.

00:47:03.219 --> 00:47:06.169
And then you get a great deal of functionality from this.

00:47:06.170 --> 00:47:08.079
Quick Look is used throughout the system.

00:47:08.079 --> 00:47:09.250
It's used in Time Machine.

00:47:09.250 --> 00:47:10.420
It's used in Finder.

00:47:10.420 --> 00:47:11.880
It's used in Spot Light.

00:47:11.880 --> 00:47:15.680
Quick Look plug-ins allow you to
talk directly to iChat Theater.

00:47:15.679 --> 00:47:21.250
If you have an open save panel or navigation
save, or a navigation services panel,

00:47:21.250 --> 00:47:25.750
the way we used to generate previews has now
changed to excepting Quick Look plug-ins.

00:47:25.750 --> 00:47:30.460
So if you provide that Quick Look plug-in, your users will
automatically get this rich view of what you're looking for.

00:47:30.460 --> 00:47:32.199
( Period of silence )

00:47:32.199 --> 00:47:34.989
Here we see an implementation inside the Spotlight window.

00:47:34.989 --> 00:47:37.859
We see the picture we want, we hit the space bar, boom,

00:47:37.860 --> 00:47:42.390
you see a really quick look plug-in,
you can see exactly what you want.

00:47:42.389 --> 00:47:48.889
Again the Quick Look and Spotlight session
is on Thursday at 3:30 in the Marina.

00:47:48.889 --> 00:47:50.609
Quartz Composer.

00:47:50.610 --> 00:47:52.019
Okay I really love Quartz Composer.

00:47:52.019 --> 00:47:56.210
Quartz Composer is a great way of mixing
different types of media together.

00:47:56.210 --> 00:48:01.110
You can mix QuickTime with the
mouse, with a graphics and so forth.

00:48:01.110 --> 00:48:05.420
And I really love it because you put it all together
in these scenes without having to write any code.

00:48:05.420 --> 00:48:07.950
You simply take the output of what we call one patch,

00:48:07.949 --> 00:48:10.649
like maybe a mouse patch might output
in its X and its Y coordinates.

00:48:10.650 --> 00:48:13.539
And then you just hook that up
to the input of another patch.

00:48:13.539 --> 00:48:18.710
And you start to hook these things up like Legos
or wires and you generate these beautiful scenes.

00:48:18.710 --> 00:48:23.820
We might have an RSS feed as one of these and you
might want to wrap that RSS feed onto a cube for instance

00:48:23.820 --> 00:48:26.370
and have the cube follow your mouse around the screen.

00:48:26.369 --> 00:48:29.690
You can put together these giant compositions
all without having to write any code.

00:48:29.690 --> 00:48:33.820
So you can really separate maybe what
you do in code from what your motion

00:48:33.820 --> 00:48:36.450
or your graphic artist does though Quartz Composer.

00:48:36.449 --> 00:48:41.019
One of the new things that we added in
Leopard is the ability to add your own patch.

00:48:41.019 --> 00:48:44.380
So for instance, if you are writing
a stock market application,

00:48:44.380 --> 00:48:48.030
you might want to create your own patch
that can read Apple Stock Quote.

00:48:48.030 --> 00:48:52.540
And then you can link up the output of that text string
to be rendered into an image and now this image is going

00:48:52.539 --> 00:48:56.440
to be rendered on one side of a cube which
is spinning through space for instance.

00:48:56.440 --> 00:48:59.389
That would be the similar workflow
that you're going to go through.

00:48:59.389 --> 00:49:04.279
If you're a hardware vendor, you can also write a
Quartz Composer patch to read from that hardware

00:49:04.280 --> 00:49:06.620
and then integrate the output from
that through that whole workflow.

00:49:06.619 --> 00:49:09.339
It's very hard to explain, but we're seeing more

00:49:09.340 --> 00:49:12.950
and more place throughout the system
where we're using Quartz Composer.

00:49:12.949 --> 00:49:16.649
Here's a little part where we're using
it inside of the iMovie theme chooser.

00:49:16.650 --> 00:49:21.809
You can see all of the content that we're looking
for is all rich, dynamic and a users content.

00:49:21.809 --> 00:49:26.619
But it's so hard to, for me to describe what Quartz
composer is, I think I have to show you really quickly.

00:49:26.619 --> 00:49:28.369
So we can go back over to demo

00:49:28.369 --> 00:49:31.170
( Period of silence )

00:49:31.170 --> 00:49:34.720
Whenever you install Mac OS X, you
get your development tools for free.

00:49:34.719 --> 00:49:39.149
So if you look on the, on the root of my
system, we'll go inside the developer folder.

00:49:39.150 --> 00:49:42.000
Inside of a folder called examples.

00:49:42.000 --> 00:49:45.500
And we're going to look down here
for, there's tons of examples.

00:49:45.500 --> 00:49:48.139
Quartz Composer sample code.

00:49:48.139 --> 00:49:50.319
There's one over here called chart.

00:49:51.510 --> 00:49:56.480
( Period of silence )

00:49:56.480 --> 00:49:57.639
Chart, let's take a look at it.

00:49:57.639 --> 00:50:02.319
And we'll go ahead and take a look at
the Quartz Composer composition first.

00:50:02.320 --> 00:50:05.610
This is what it looks like from
the Quartz Composer application.

00:50:05.610 --> 00:50:08.050
We can see our separate patches here.

00:50:08.050 --> 00:50:12.180
And basically what we look at right now
just seems to be the inside of a cube.

00:50:13.550 --> 00:50:16.720
But you're going to notice over here
someone now put some sample data here.

00:50:16.719 --> 00:50:22.769
If we link up this sample data into the input of
our patch, it will now display a graph for us.

00:50:22.769 --> 00:50:26.239
So maybe in your application, you
were thinking about creating a graph,

00:50:26.239 --> 00:50:30.849
but maybe you didn't think you'd have the time
to create a 3D graph that looked so pretty

00:50:30.849 --> 00:50:33.900
or that you can change right here from Quartz Composer.

00:50:33.900 --> 00:50:38.800
If you look closely at this sample data.

00:50:38.800 --> 00:50:38.840
( Period of silence )

00:50:38.840 --> 00:50:45.430
Excuse me, the settings, you can see that the sample data,
if you can read that far back is really just an array.

00:50:45.429 --> 00:50:51.639
Now like I said, one of the, probably the most beneficial
thing about Cocoa is these similar coding conventions.

00:50:51.639 --> 00:50:56.000
So we can now start to export what we see
in Quartz Composer three different ways.

00:50:56.000 --> 00:50:57.940
We can export it as a QuickTime movie.

00:50:57.940 --> 00:51:00.130
We can export it as a screen saver.

00:51:00.130 --> 00:51:02.059
Both of these are not so exciting.

00:51:02.059 --> 00:51:05.210
But the third way we can export it
is exactly as a Quartz Composer view.

00:51:05.210 --> 00:51:10.639
By exporting it as a view, our application can
now supply this data dynamically at run time.

00:51:10.639 --> 00:51:12.829
So let me show you a little bit
about how we're going to do that.

00:51:12.829 --> 00:51:13.719
We'll unhook this data.

00:51:13.719 --> 00:51:19.129
And as you see now, this little data dot
here used to be dark gray and now it's white.

00:51:19.130 --> 00:51:23.170
Whatever we want to publish, we'll publish
through a concept called bindings and through

00:51:23.170 --> 00:51:27.619
out application we can help bind
our new data to this value here.

00:51:27.619 --> 00:51:30.079
So we'll go ahead and publish this value.

00:51:30.079 --> 00:51:35.269
Published inputs, data, we can name it
whatever we want, publish it as data.

00:51:35.269 --> 00:51:40.039
Save it. Quit this.

00:51:40.039 --> 00:51:43.739
And open up our Xcode project.

00:51:43.739 --> 00:51:48.469
The first thing we'll do is take a look at what
it actually looks like from Interface Builder.

00:51:48.469 --> 00:51:53.079
Inside of our resources folder we're
going to have our nib file here.

00:51:54.500 --> 00:51:59.300
And if we look at the main window, this is what the
user interface of our application is going to look like.

00:51:59.300 --> 00:52:01.760
We're going to have a table on the
left which is going to supply data.

00:52:01.760 --> 00:52:05.880
And this black area here will be
populated by that Quartz Composer view.

00:52:05.880 --> 00:52:08.309
( Period of silence )

00:52:08.309 --> 00:52:09.829
So now we'll go ahead and build and run this.

00:52:09.829 --> 00:52:12.049
( Period of silence )

00:52:12.050 --> 00:52:18.400
So the important thing to take away here is that if
you are going to design something in your application,

00:52:18.400 --> 00:52:20.630
you might first want to see what Quartz Composer has to offer.

00:52:20.630 --> 00:52:22.400
You might want to add an RSS feed.

00:52:22.400 --> 00:52:25.720
Why not add one that's rich, full of
graphics and see what we have there?

00:52:25.719 --> 00:52:30.579
Now all of this can actually be handled
with, mutated live from our application

00:52:30.579 --> 00:52:32.980
and affect our Quartz Composer composition.

00:52:32.980 --> 00:52:38.900
So for instance, I live in a, in
a little town called Los Ghettos.

00:52:38.900 --> 00:52:46.380
And, and I think it's, I think it's a 10.

00:52:46.380 --> 00:52:47.519
So I can just put it up there like that.

00:52:47.519 --> 00:52:51.710
And you can see the actual text of our Quartz
composer changes as well as the bar chart.

00:52:51.710 --> 00:52:54.340
( Period of silence )

00:52:54.340 --> 00:52:55.200
Back to slides please.

00:52:55.199 --> 00:52:56.849
( Period of silence )

00:52:56.849 --> 00:53:01.269
So that's Quartz Composer.

00:53:01.269 --> 00:53:06.079
The fifth technology I want to mention
real quickly is iChat and iChat Theater.

00:53:06.079 --> 00:53:09.259
In iChat you may or may not have known that we have already

00:53:09.260 --> 00:53:12.640
in Tiger released a framework called
the instant message framework.

00:53:12.639 --> 00:53:16.460
And that framework allows you to get the status
of your buddies, whether or not they're online,

00:53:16.460 --> 00:53:19.460
to get their address book so you can find
out their phone number or other information.

00:53:19.460 --> 00:53:21.449
To get the picture that they use in their address book.

00:53:21.449 --> 00:53:22.879
All powerful things.

00:53:22.880 --> 00:53:25.720
But now in Leopard we're releasing iChat Theater.

00:53:25.719 --> 00:53:30.889
And that gives you the ability to take
your application data and then post it

00:53:30.889 --> 00:53:34.039
through the AV connection and share
it with one of your buddies.

00:53:34.039 --> 00:53:38.199
So for instance, if I'm writing a keynote
presentation and I want to show it off to my boss,

00:53:38.199 --> 00:53:42.379
the picture of myself shrinks down,
I can now see that presentation live.

00:53:42.380 --> 00:53:43.800
So this is pretty sophisticated.

00:53:43.800 --> 00:53:47.610
It's going to take your application
data, use our H264 compressor,

00:53:47.610 --> 00:53:50.820
compress it and then throttle that across your bandwidth.

00:53:50.820 --> 00:53:56.170
And the resolution that's going to throttle
across also gets determined by your network speed.

00:53:56.170 --> 00:53:57.700
So that can also change over time.

00:53:57.699 --> 00:54:01.669
You can get a high resolution picture going
across as your network capability goes up.

00:54:01.670 --> 00:54:03.280
And it lowers all dynamically.

00:54:03.280 --> 00:54:04.960
So you get all this functionality.

00:54:04.960 --> 00:54:09.190
Now how much code do you guys think you'd
have to write to get this all working?

00:54:09.190 --> 00:54:12.510
Let me tell you, there was only three
lines of code to get all these working.

00:54:12.510 --> 00:54:18.790
I can basically take any NS view hierarchy and then
say iChat Theater, I want to share this with my buddy.

00:54:18.789 --> 00:54:24.989
This is a, I think a very interesting concept, especially
if you want to build community, if you're working on a game,

00:54:24.989 --> 00:54:28.639
a card game and you want to start making
that multi player or share any of your,

00:54:28.639 --> 00:54:31.159
any of your content on one of your
windows with someone else.

00:54:31.159 --> 00:54:32.469
This is great way to go.

00:54:32.469 --> 00:54:38.819
Again we have a theater, we have a session
in Russian Hill on Tuesday at 1030 am.

00:54:38.820 --> 00:54:41.160
But let me show you a little bit more about how this works.

00:54:41.159 --> 00:54:42.699
So we can go back to demo?

00:54:42.699 --> 00:54:45.139
( Period of silence )

00:54:45.139 --> 00:54:50.769
So this is the demo that I decided to put together right
before the presentation, so the logistics people love me

00:54:50.769 --> 00:54:52.829
for scrambling around to find these iSight cameras.

00:54:52.829 --> 00:54:57.150
But what we're going to do now is we're going to take
our existing application and we're going to go ahead

00:54:57.150 --> 00:55:01.220
and broadcast that Quartz Composer view
across iChat Theater to one of our buddies.

00:55:01.219 --> 00:55:03.319
( Period of silence )

00:55:03.320 --> 00:55:05.390
so let me first see.

00:55:07.059 --> 00:55:07.529
There we go.

00:55:07.530 --> 00:55:08.000
( Period of silence )

00:55:08.000 --> 00:55:16.260
So the first thing that I'm going to have to do from Xcode
is the project that I have here works on Tiger 10.4,

00:55:16.260 --> 00:55:19.520
and I want to upgrade it, I want to make sure
that its going to run on 10.5 only.

00:55:19.519 --> 00:55:24.920
Because iChat is 10.5 only technology.

00:55:24.920 --> 00:55:31.240
So we simply go to the information, change this to Xcode
3 and change our target from 10.4 to 10.5.

00:55:31.239 --> 00:55:33.099
( Period of silence )

00:55:33.099 --> 00:55:35.789
That's the first step.

00:55:35.789 --> 00:55:39.269
Next thing we're going to want to do is every small
application that you're going to see sample code

00:55:39.269 --> 00:55:43.039
for always has this controller
class, remember that MVC model.

00:55:43.039 --> 00:55:45.380
And it's usually called app controller.

00:55:45.380 --> 00:55:49.590
We want to add a few extra things into our app controller.

00:55:49.590 --> 00:55:55.880
The first thing we want to add is a
shared reference to iChat Theater.

00:55:55.880 --> 00:55:59.470
We already have a reference to the view
that's going to be our Quartz Composer view.

00:55:59.469 --> 00:56:02.599
So one we've just added an, an
instance variable to our iChat Theater.

00:56:02.599 --> 00:56:05.210
And we want to add one more action.

00:56:05.210 --> 00:56:12.300
This is the method that we're going to call when we want to
start broadcasting our content across to our buddies.

00:56:12.300 --> 00:56:13.490
So that's about all we have to do.

00:56:13.489 --> 00:56:19.139
I'll do a little more housekeeping by adding in the header
files up here, the instant messaging framework header files.

00:56:19.139 --> 00:56:20.799
( Period of silence )

00:56:20.800 --> 00:56:24.180
So this is the change to a header file that we need to do.

00:56:24.179 --> 00:56:30.009
Now let's go ahead and modify our user interface of our
application so we can now add a button for iChat Theater.

00:56:31.559 --> 00:56:38.130
Let's pop the window up here and we're going to
go ahead and resize this in Interface Builder.

00:56:38.130 --> 00:56:39.440
And find the button we're looking for.

00:56:39.440 --> 00:56:41.539
( Period of silence )

00:56:41.539 --> 00:56:45.349
In this case I'm going to grab this square button over here.

00:56:45.349 --> 00:56:48.029
We'll move it up.

00:56:48.030 --> 00:56:49.150
That looks good.

00:56:49.150 --> 00:56:51.639
And let me resize this so it looks a little bit better.

00:56:51.639 --> 00:56:55.059
You can see these blue lines help guide
me so I'll just automatically snap

00:56:55.059 --> 00:56:57.759
to position to follow the user interface guidelines.

00:56:57.760 --> 00:56:59.660
Now this kind of a boring button.

00:56:59.659 --> 00:57:02.489
So what I'm going to do here is I'm going
to go ahead and make it a little snazzier.

00:57:02.489 --> 00:57:04.959
I'm going to add an icon onto it.

00:57:04.960 --> 00:57:05.809
( Period of silence )

00:57:05.809 --> 00:57:08.960
So here is the icon I want to use.

00:57:08.960 --> 00:57:13.119
I stole this directly from the iChat application.

00:57:13.119 --> 00:57:18.849
And what we want to do now is add this
iChat resource into our Xcode project.

00:57:18.849 --> 00:57:22.679
So we simply drop it into our resources folder here.

00:57:22.679 --> 00:57:24.710
It'll ask me if I want to copy it across.

00:57:24.710 --> 00:57:25.619
Sure.

00:57:25.619 --> 00:57:29.059
( Period of silence )

00:57:29.059 --> 00:57:33.219
Now one of the great new things about
Leopard and our tools is that the integration

00:57:33.219 --> 00:57:36.449
between Interface Builder and Xcode
has gotten so much better.

00:57:36.449 --> 00:57:38.789
So it seems like they're in constant communication.

00:57:38.789 --> 00:57:43.480
I can now simply click on this
button, get my inspector window up.

00:57:43.480 --> 00:57:44.019
( Period of silence )

00:57:44.019 --> 00:57:49.190
Let me see which one is was.

00:57:49.190 --> 00:57:54.960
Image. When I clicked on image, it automatically sees
now that I have an image in my application called iChat.

00:57:54.960 --> 00:57:58.710
I'll select that and now we have
a nice little icon on there.

00:57:58.710 --> 00:58:01.990
The next thing we're going to want to do
is when someone clicks on this button,

00:58:01.989 --> 00:58:07.229
we want it to actually call our method
that we just added, that toggle iChat.

00:58:07.230 --> 00:58:13.269
So in order to do that, we'll drag a connection
from our button back to our app controller.

00:58:13.269 --> 00:58:17.409
And this is that new method that
we added, toggle iChat Theater.

00:58:17.409 --> 00:58:21.289
It'll start the iChat Theater session when
we click it once and stop it the next time.

00:58:21.289 --> 00:58:23.039
( Period of silence )

00:58:23.039 --> 00:58:26.590
So now we should be done with Interface
Builder, let's go back to code.

00:58:26.590 --> 00:58:29.760
( Period of silence )

00:58:29.760 --> 00:58:35.130
So we've already added the method, toggle iChat
theater and we've added the instance variable,

00:58:35.130 --> 00:58:39.420
this iChat, iChat Theater manager instance variable.

00:58:39.420 --> 00:58:45.720
So now let's go ahead and add, change our code
to actually launch this session in iChat Theater.

00:58:45.719 --> 00:58:48.009
( Period of silence )

00:58:48.010 --> 00:58:51.630
First thing we're going to want to do
is initialize that shared connection.

00:58:51.630 --> 00:58:53.500
So we'll find a routine called init.

00:58:53.500 --> 00:58:55.539
That looks like a pretty good place to do it.

00:58:55.539 --> 00:58:59.309
( Period of silence )

00:58:59.309 --> 00:59:01.259
Don't you guys just love how I just copy and paste codes?

00:59:01.260 --> 00:59:05.730
There's no way I could actually trust
myself actually typing it on stage.

00:59:05.730 --> 00:59:11.039
So now what we've just done is initialize this
connection to our iChat Theater, our instant messenger.

00:59:11.039 --> 00:59:14.500
And we want to go ahead and copy that one method across.

00:59:14.500 --> 00:59:17.780
( Period of silence )

00:59:17.780 --> 00:59:21.540
This is the toggle iChat Theater method.

00:59:21.539 --> 00:59:24.779
As you can see, the first time we
start it, we'll hit the stopped method.

00:59:24.780 --> 00:59:27.440
So we'll go ahead and start the video right here.

00:59:27.440 --> 00:59:32.409
When it's already running, we'll fall into
this state and stop the video from running.

00:59:32.409 --> 00:59:35.409
So I think that I have done everything I need to do.

00:59:35.409 --> 00:59:37.159
( Period of silence )

00:59:37.159 --> 00:59:39.599
Let's go ahead and build it.

00:59:39.599 --> 00:59:43.829
Actually I know I left out one stage, but
that's half the fun, showing the errors.

00:59:43.829 --> 00:59:45.210
So we have an error here.

00:59:45.210 --> 00:59:49.059
( Period of silence )

00:59:49.059 --> 00:59:52.309
And basically the error is that it didn't
find the framework that we're looking for.

00:59:52.309 --> 00:59:57.509
We added the headers that we need, but we
don't have that actual library linked in yet.

00:59:57.510 --> 01:00:02.820
So the easiest way to add an extra library to link
to directly from Interface Builder is to go ahead

01:00:02.820 --> 01:00:08.130
and control click on the frameworks folder,
we'll hit add and existing framework.

01:00:08.130 --> 01:00:11.170
It'll open up the panel directly to
the frameworks folder and all we have

01:00:11.170 --> 01:00:14.460
to do now is navigate down to the instant message framework.

01:00:14.460 --> 01:00:17.019
( Period of silence )

01:00:17.019 --> 01:00:18.780
Which is right here.

01:00:18.780 --> 01:00:22.150
( Period of silence )

01:00:22.150 --> 01:00:28.849
Now let's build it, okay.

01:00:28.849 --> 01:00:29.589
Excellent.

01:00:29.590 --> 01:00:33.530
So I'd like to ask Larry to come up on
stage and help me out here a little bit.

01:00:33.530 --> 01:00:37.120
The way to use iChat Theater from your application,

01:00:37.119 --> 01:00:44.039
the first thing to do is launch
iChat Theater, or excuse me, iChat.

01:00:44.039 --> 01:00:46.929
And start a connection with one of your buddies.

01:00:46.929 --> 01:00:49.799
So in this case, I'll start a video connection with Larry.

01:00:49.800 --> 01:00:52.070
( Period of silence )

01:00:52.070 --> 01:00:55.700
Hi, are you going to talk to me Larry?

01:00:55.699 --> 01:00:57.699
>> No.

01:00:57.699 --> 01:00:59.939
>> That's his typical response.

01:00:59.940 --> 01:01:02.409
Okay. So we have a regular session going here.

01:01:02.409 --> 01:01:04.819
( Period of silence )

01:01:04.820 --> 01:01:10.019
Back to Xcode, we'll go ahead
and build and run our application.

01:01:10.019 --> 01:01:13.519
And now we'll simply click the button.

01:01:13.519 --> 01:01:17.090
And you can see that our iChat
theater presentation has now changed.

01:01:17.090 --> 01:01:21.010
So my picture has been replaced
with the content of my application.

01:01:21.010 --> 01:01:22.740
And this is all completely live.

01:01:22.739 --> 01:01:28.509
I'm going to go ahead and change Los Altos and
we'll go ahead and make Los Altos a 10 here.

01:01:28.510 --> 01:01:35.280
And it automatically updates from within iChat Theater and
you can see the presentation that Larry gets on his side,

01:01:35.280 --> 01:01:38.290
he'll see a small picture of myself
along with my application content.

01:01:38.289 --> 01:01:41.259
So we can go back to slides.

01:01:41.260 --> 01:01:45.710
( Period of silence )

01:01:45.710 --> 01:01:49.840
So that's really how easy it is to add
iChat Theater into your applications.

01:01:49.840 --> 01:01:52.760
As you can see, it really just takes
a few minutes to do this and adds,

01:01:52.760 --> 01:01:55.270
it could add some great value to your applications.

01:01:55.269 --> 01:02:01.699
So to wrap things up, I wanted to tell you about a few of
the great resources that I use when developing on the Mac.

01:02:01.699 --> 01:02:03.069
One of them, you're here, WWDC.

01:02:03.070 --> 01:02:04.460
This is like the Mecca.

01:02:04.460 --> 01:02:10.349
This is the place where you're going to get the latest and
best information either through the presentation format

01:02:10.349 --> 01:02:15.440
that we have here or if you have individual questions,
down in the labs downstairs, where you can work one on one

01:02:15.440 --> 01:02:17.820
with the engineers that actually write the technology.

01:02:17.820 --> 01:02:22.019
And I also want to encourage you to
enjoy the social aspect of WWDC.

01:02:22.019 --> 01:02:24.659
We have events going on in the evenings.

01:02:24.659 --> 01:02:29.319
Tonight we have the AD, ADC, ADC
reception on the third floor.

01:02:29.320 --> 01:02:34.120
Tomorrow we have the events, stumps the experts
and the ADA awards, Apple design awards.

01:02:34.119 --> 01:02:36.949
And on Thursday we have the bash up at Gwenna Gardens.

01:02:36.949 --> 01:02:39.909
So it gives you a great opportunity to meet other
developers that are in the same boat as you,

01:02:39.909 --> 01:02:42.649
working on the same types of things as you.

01:02:42.650 --> 01:02:44.170
Next is Cocoa Heads.

01:02:44.170 --> 01:02:49.539
Cocoa Heads is an independent developer
group and they have organizations ranging

01:02:49.539 --> 01:02:53.199
from Toronto, Canada to Osaki to Quala Lampure.

01:02:53.199 --> 01:02:58.259
So if you go to Cocoaheads dot org, you might
be able to find a Cocoa Heads meeting close

01:02:58.260 --> 01:03:01.540
to where you live or its very easy to start one up.

01:03:01.539 --> 01:03:06.000
Or if you don't like either one of those and you just
want to try one out, you can go this Wednesday at 7 o'clock

01:03:06.000 --> 01:03:11.340
in the Apple Store, not too far from here, we have
a Cocoa Heads meeting and the theme is going Indy.

01:03:11.340 --> 01:03:16.730
So we have some of the you know prominent Independent
Mac developers will come up and give some advice,

01:03:16.730 --> 01:03:19.990
both technical, marketing type advice on what it takes to,

01:03:19.989 --> 01:03:24.969
to go independent with your own company
and writing software for the Mac.

01:03:24.969 --> 01:03:28.480
There's, there's a saying that if you ask any
Cocoa developer what they're favorite book is,

01:03:28.480 --> 01:03:30.050
they'll always name two books.

01:03:30.050 --> 01:03:34.610
And one of them is always Cocoa Programming
for Mac OS X, writing by Aaron Hillegass.

01:03:34.610 --> 01:03:38.400
I talked to him about an hour ago, he's
revving this book to, to work with Leopard.

01:03:38.400 --> 01:03:42.369
And he also is teaching at the Big Nerd Ranch.

01:03:42.369 --> 01:03:48.630
If any of you have heard about it, the Big Nerd Ranch is
this immersive class, week long class where you can go to

01:03:48.630 --> 01:03:54.000
and learn all about Cocoa, just immerse
yourself for one week over in Atlanta.

01:03:54.000 --> 01:04:00.489
One of the neat things about the Mac OS X development
in general is it has this great little ecosystem.

01:04:00.489 --> 01:04:03.649
There's a number of independent
developers out there with their own blogs.

01:04:03.650 --> 01:04:07.630
And I usually use the site Cocoa blogs
dot com which is kind of an aggregate.

01:04:07.630 --> 01:04:12.220
It'll take all these individual blogs, write a
sentence about each of them and then post links to the,

01:04:12.219 --> 01:04:15.489
to the most influential or most interesting blogs.

01:04:15.489 --> 01:04:18.139
And lastly, developer dot apple dot com.

01:04:18.139 --> 01:04:21.879
This is the place where you're going to go to get all
the information from Apple, whether it be information

01:04:21.880 --> 01:04:27.980
about conferences we're having, latest
technical information, SDKs and so forth.