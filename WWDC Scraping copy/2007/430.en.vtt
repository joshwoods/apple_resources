WEBVTT

00:00:11.369 --> 00:00:19.219
>> Hi. So, I'm going to tell you about how to use PDF in
your application in this session, and we're going to talk

00:00:19.219 --> 00:00:25.369
about PDF kit, and I'm John Calhoun
(phonetic), I'm the engineer on PDF kit,

00:00:25.370 --> 00:00:27.580
and here's kind of what we're going to do in this session.

00:00:27.579 --> 00:00:32.469
I'm going to give you kind of a brief overview
of the framework, the PDF kit framework,

00:00:32.469 --> 00:00:36.179
but then I'm going to go right into how
you would use PDF kit in your application,

00:00:36.179 --> 00:00:41.909
and I'm actually going to give you four examples of how you
might use PDF kit, it sounds like a lot, but I'm actually,

00:00:41.909 --> 00:00:47.299
I'm going to spend most of my time on the first two
examples, and go over the last two a little quickly.

00:00:47.299 --> 00:00:53.619
Okay, well let's get started on PDF kit, the framework.

00:00:53.619 --> 00:01:03.239
So PDF kit is a framework, and it's essentially a suite
of Cocoa classes, so if you're are writing an application

00:01:03.240 --> 00:01:08.109
in Cocoa, and you include the PDF kit, the
framework, then in addition to all the Cocoa classes,

00:01:08.109 --> 00:01:15.469
you get an additional 20, 30 or so odd classes, that
PDF kit provides and obviously these have focus on PDF.

00:01:15.469 --> 00:01:23.900
It's, it uses Cocoa, so it uses a lot of the
same Cocoa types like NSdictionary, and NSArray,

00:01:23.900 --> 00:01:27.690
but it sits on top of quartz 2D or core graphics.

00:01:27.689 --> 00:01:33.649
So, if you're familiar at all with sort of the PDF API
that's in core graphics, that's where PDF kit gets all

00:01:33.650 --> 00:01:41.860
of it's functionalities, but in a way it extends it quite
a bit, and I show you examples of that in the session.

00:01:41.859 --> 00:01:50.370
PDF kits used in preview, if you've opened a PDF in preview,
you've seen PDF kit, if you've used the default plug-in

00:01:50.370 --> 00:02:01.200
in safari, and visited a site with a PDF, that's also PDF
kit, and now in Leopard, quicklooks is using PDF kit, mail,

00:02:01.200 --> 00:02:12.539
if you send and PDF attachment, their using PDFview directly
inside your mail message and a few other places as well.

00:02:12.539 --> 00:02:23.280
So PDF kit the framework is part of the Umbrella courts
framework, so if you go to system library frameworks,

00:02:23.280 --> 00:02:30.140
courts framework inside courts frame are a number of sub
frameworks, PDF kit's one of them, the new image kit is one,

00:02:30.139 --> 00:02:35.059
courts filters, courts composer,
so that's where it's located.

00:02:35.060 --> 00:02:41.069
And if you want to use some of the new, if you
want to use of the PDF classes in your interface,

00:02:41.069 --> 00:02:46.989
and you're using the old interface builder then you're going
to need to add the PDF kit palette to interface builder,

00:02:46.990 --> 00:02:52.340
and the PDF kit palette is located in developers
extra's palette, so you'll have to point the,

00:02:52.340 --> 00:02:57.469
your old interface builder to that,
in order to get the PDF kit classes.

00:02:57.469 --> 00:03:02.520
The new interface builders, their not
called palettes, their called plug-ins,

00:03:02.520 --> 00:03:10.140
and the plug-ins themselves are stored inside the frameworks
resources directory, but I think, I'll show you an example

00:03:10.139 --> 00:03:16.729
of how you go about adding that to the
new interface builder a little later.

00:03:16.729 --> 00:03:25.099
So PDF kit was introduced in Tiger, and in Leopard,
we've extended it, and to give you kind of,

00:03:25.099 --> 00:03:31.180
I guess a simplification of the differences
between Tiger PDF kit and the Leopard kit,

00:03:31.180 --> 00:03:37.530
the focus in Tiger was to be able to display PDF content,
allow the user to interact with that PDF content,

00:03:37.530 --> 00:03:44.219
to select text, to click on links, what we
tried to in Leopard is kind of extend it to more

00:03:44.219 --> 00:03:53.579
of the editing capabilities, and like PDF content creation,
and again, I guess maybe to simplify it even further,

00:03:53.580 --> 00:03:57.860
you can think of the Tiger PDF kit,
who is pretty immutable and we tried

00:03:57.860 --> 00:04:03.120
to add mutability where we could in the Leopard PDF kit.

00:04:03.120 --> 00:04:12.069
So here are the classes, I've highlighted in yellow
the new ones for Leopard, PDFview, PDFthumbnailview,

00:04:12.069 --> 00:04:19.389
that's new for Leopard, PDFdocument, PDFpage, annotation,
annotation is a class that has a number of subclasses,

00:04:19.389 --> 00:04:27.599
so I show only the two new annotation subclasses in
Leopard, PDFannotationpopup and stamp, but Tiger had though,

00:04:27.600 --> 00:04:35.210
probably another 10 or 12 inklines, links,
circle, square, a handful of others.

00:04:35.209 --> 00:04:44.109
PDFaction is a new class for Leopard, and it also, like
PDFannotation has a number of subclasses, so there's a GoTo,

00:04:44.110 --> 00:04:51.259
PDFaction GoTo, represents the GoTo type of action,
there's names, there's URL, reset form, a few others.

00:04:51.259 --> 00:05:00.029
In PDFoutline, PDFdestination, PDFselection, PDFborder,
so one way, I guess to digest all these classes

00:05:00.029 --> 00:05:05.859
and get to sort of, I guess get a handle of them,
is to really separate them in to two groups,

00:05:05.860 --> 00:05:11.960
I'm going to pull the first two out, and call these
the view classes, PDFview and PDFthumbnailview,

00:05:11.959 --> 00:05:17.569
and that kind of makes sense because they have
the word view in them, their subclasses of NSview,

00:05:17.569 --> 00:05:24.579
so all the sort of things that Nsview inherits like,
it can become first responder, it has a draw method,

00:05:24.579 --> 00:05:29.269
you can drop them into a window,
resize them, those kinds of things,

00:05:29.269 --> 00:05:33.009
the PDFview and the thumbnailview,
they inherits all of those attributes.

00:05:33.009 --> 00:05:40.740
The rest of the, the PDFview is the main view, I think
that you're familiar with, if you've opened up a document

00:05:40.740 --> 00:05:46.110
in Preview, of PDF, that sort of main content
where the PDF is displayed, is the PDFview.

00:05:46.110 --> 00:05:52.730
And on Leopard preview, in the sidebar, when you're
displaying thumbnails, that's the PDFthumnailview,

00:05:52.730 --> 00:06:01.030
so the rest of the classes, I'm just going to lump
together and call the base classes, these aren't subclasses

00:06:01.029 --> 00:06:08.279
of Nsview, their subclasses of Nsobjects, so in that sense
these are more primitive classes, but I kind like to think

00:06:08.279 --> 00:06:16.029
of the foundation classes upon which the PDFview and
the PDFthumbnailview sit, I should point out though,

00:06:16.029 --> 00:06:21.859
just because I'm kind of characterizing them
as just base classes or foundation classes,

00:06:21.860 --> 00:06:29.439
it doesn't meant that you can't use them independent
of the PDFview and thumbnailview, in fact, in Leopard,

00:06:29.439 --> 00:06:35.740
there's a handful on new automator actions that we've added
that deal with PDFcontent like extracting the text from PDF

00:06:35.740 --> 00:06:43.079
or counting the number of annotations in a PDF, all of these
new automator actions were actually written using PDFkit,

00:06:43.079 --> 00:06:49.939
using strictly these base classes, no PDFview or
thumbnailview was used, so you can take advantage

00:06:49.939 --> 00:06:53.680
of PFD kit and only use these base classes.

00:06:53.680 --> 00:07:00.199
So of these base classes, I'm just going to focus on
four, I think, I'm going to call these the core classes,

00:07:00.199 --> 00:07:10.240
PDFdocument, PDFpage, PDFannotation, and PDFoutline,
PDFdocument, that's going to represent the file on disk,

00:07:10.240 --> 00:07:22.629
or maybe if you're in a browser, you've just got the file as
NSdata, that PDFdocument represents that file, the PDFpage,

00:07:22.629 --> 00:07:28.969
when a document is created, when a PDFdocument object
is created, it creates a PDFobject for each page that is

00:07:28.970 --> 00:07:35.420
in that document, so if you had for example, a ten page
PDF, you would have a single PDFdocument that represents

00:07:35.420 --> 00:07:44.120
that ten page PDF, and there would be ten PDFobjects
that that document creates, one for each page in the PDF.

00:07:44.120 --> 00:07:51.759
Some PDFpages can have annotation on them, the example in
this slide here, you see a yellow highlight at the top,

00:07:51.759 --> 00:07:58.709
that would be a highlight annotation, there's a red
eclipse at the bottom, that might be a circle annotation,

00:07:58.709 --> 00:08:04.469
if a page has annotations, then each one of
those annotations is going to be represented by

00:08:04.470 --> 00:08:08.910
and PDFannotation object, probably the most
common annotation that you're likely to run

00:08:08.910 --> 00:08:14.240
into in a PDF is a link annotation, they don't draw,
they don't make for good slides, but when the user clicks

00:08:14.240 --> 00:08:21.689
on a link and it take them to page 14, for example, that's
probably the most common annotation that you run across,

00:08:21.689 --> 00:08:29.550
and PDFoutline, not all PDF's have outlines, usually
it's the bigger, more richer PDF's that have an outline,

00:08:29.550 --> 00:08:35.799
but when a PDF has an outline, in preview that's
what shows in the sidebar, that looks like, in fact,

00:08:35.799 --> 00:08:43.909
that's actually an Nsoutlineview there, I've heard this
called the table of content, Adobe calls these bookmarks,

00:08:43.909 --> 00:08:48.000
you see this one has contents,
tables, figures, and listings.

00:08:48.000 --> 00:08:54.389
Each one of these element will be represented as a
PDFoutline object, and it's kind of a tree structure,

00:08:54.389 --> 00:09:00.659
so this particular PDF may have, you know, I'll have to
twist down some of those, but it may well have 20, 30, 40,
@

00:09:00.659 --> 00:09:05.990
50 different PDF objects, each one kind of having
children, and like I say, it's kind of a whole,

00:09:05.990 --> 00:09:14.279
kind of like a tree like structure, and I'll talk a little
bit more about that later, and if wasn't kind of apparent,

00:09:14.279 --> 00:09:20.019
I'll just make it real explicit here, there is a kind
of hierarchy here, the document is the single object,

00:09:20.019 --> 00:09:26.720
it can own pages, it'll own PDFpage object for each
page, pages if they have annotations will allocate

00:09:26.720 --> 00:09:34.240
and own any number of PDFannotation objects, if there
is an outline, there will be a root outline object,

00:09:34.240 --> 00:09:39.789
the document will own, then that outline object can
own children and those children can own children,

00:09:39.789 --> 00:09:44.179
so I kind of represented it, yeah,
as a bunch of nested boxes up there.

00:09:44.179 --> 00:09:51.389
So there is this sort of hierarchy, so I probably should
point out to that sort of extensibility or mutability

00:09:51.389 --> 00:09:56.110
that we tried to add in Leopard means that you can
insert and reorder and remove these page objects,

00:09:56.110 --> 00:10:02.610
you don't have to just take them as they come off the
disk, you can insert, reorder, remove the outline objects,

00:10:02.610 --> 00:10:07.149
and the annotations, as well, and I'll
show you a few examples of that today.

00:10:07.149 --> 00:10:14.559
So that's enough kind overview, I guess of the
framework, let's get straight to what you might want

00:10:14.559 --> 00:10:22.819
to use PDF kit for, and obviously, I think probably the
most common usage of PDF kit is going to be display a PDF.

00:10:22.820 --> 00:10:30.310
So if you, I don't know if you've took a
look at the headstart code for this session,

00:10:30.309 --> 00:10:36.599
where there was an application called PDF kit viewer, and
it's kind of like, I guess it's kind of like the PDF half

00:10:36.600 --> 00:10:41.240
of preview, it's kind of a poor man's PDF, half of
preview, and I'm going to show you how you would go

00:10:41.240 --> 00:10:47.879
about writing an application like that, we want
our application to open PDF and display them,

00:10:47.879 --> 00:10:53.669
we want the user to be able to select text, click
on links, you know kind of interact with the PDF,

00:10:53.669 --> 00:11:01.399
if there is an outline, let's display that, and let's allow
searching as well, so if the user wants to search for a word

00:11:01.399 --> 00:11:03.689
in the PDF, they can do that in this application.

00:11:03.690 --> 00:11:11.000
So the way that we're going to do that is, we're going to
go interface builder, and we're going to use the PDFview,

00:11:11.000 --> 00:11:15.379
and since the PDFthumbnailview is new in
Leopard, we're throw that in as well, why not,

00:11:15.379 --> 00:11:19.110
and for all that other functionality,
like the searching, and the outline,

00:11:19.110 --> 00:11:23.399
we'll go ahead and use PDF kit to do the rest of that.

00:11:23.399 --> 00:11:28.939
So the first step, I'll just go over to this demo machine,
I'll show you how you would actually set up the interface,

00:11:28.940 --> 00:11:37.320
so I'm going to bring up interface builder,
and I'll go ahead and create a new application,

00:11:37.320 --> 00:11:44.230
presumably I should probably pause for a second
here, I'm assuming you probably, you went into Xcode

00:11:44.230 --> 00:11:51.180
and you're creating a new Cocoa application,
probably Nsdocoment base, I'm guessing,

00:11:51.179 --> 00:11:56.109
so we're going to create a window
here and let me show you real quick,

00:11:56.110 --> 00:12:00.269
how you would go and add the PDF kit in ID plug-in.

00:12:00.269 --> 00:12:07.019
If you go into interface builder's preferences,
there's plug-in panel's here preferences,

00:12:07.019 --> 00:12:11.689
and I've already added PDF kit here, normally
it wouldn't show up in this list on the left,

00:12:11.690 --> 00:12:19.700
but you'd hit the plus button, and then it's going to bring
up the, it's going to bring up the Nsopen panel and you'd go

00:12:19.700 --> 00:12:25.390
to system library frameworks, and
the way ID or the way interface,

00:12:25.389 --> 00:12:31.769
the new interface builder works is you would just select the
umbrella framework, select courts.framework and then as soon

00:12:31.769 --> 00:12:39.409
as I select this, interface builder looks in all of the
sub frameworks and looks for ID plug-ins and then adds them

00:12:39.409 --> 00:12:46.889
to interface builder, so over here if I scroll down through
all the library of objects, towards the bottom here,

00:12:46.889 --> 00:12:53.370
there is a PDFview and there is the PDFthumbnail
view, so I'll go ahead and drag the PDFthumbnailview

00:12:53.370 --> 00:13:05.490
into my empty window here, and there's some PDF content
already for you, and I'll drag the thumbnailview in as well,

00:13:05.490 --> 00:13:14.039
and I'll just place it over here, and if I go over to
the inspector, you see that there's already a number

00:13:14.039 --> 00:13:22.399
of perimeters that I can just, I can set within interface
builder itself, I can turn on automatically resizing

00:13:22.399 --> 00:13:29.519
or I can turn on the change the display mode, if I
want to display two up or two up with the scroll bar,

00:13:29.519 --> 00:13:36.860
I'll just leave it in single page continuously, let
me just go ahead why I'm here and set the strings.

00:13:36.860 --> 00:13:42.930
Let's go to the thumbnailview and set the strings,
there's one thing here that's pretty important here to do,

00:13:42.929 --> 00:13:49.559
I want to associate this thumbnail view with the PDFview
without having to write any code, so if I control click

00:13:49.559 --> 00:13:56.299
and drag from the thumbnailview to the PDFview, when I
let go on the mouse, you see I've got a contextual menu,

00:13:56.299 --> 00:14:01.289
and one of the outlets is the PDFview,
I'll click that, and by doing that,

00:14:01.289 --> 00:14:06.990
I've now told the thumbnail view this is your PDFview and
the thumbnailview is pretty much automatically just going

00:14:06.990 --> 00:14:13.210
to respond to the PDFview, and I'll
show you how that works in a second.

00:14:13.210 --> 00:14:25.180
I select both of these views, and I'll go ahead and embed
them in a, nope wrong one, I'll embed them in a split view,

00:14:25.179 --> 00:14:30.219
and set the strings on the split view,
and now if I just test the interface,

00:14:30.220 --> 00:14:37.399
stimulate the interface inside interface
builder, here's our window, we've got the,

00:14:37.399 --> 00:14:44.569
the thumbnailview has populated itself and from
this PDFdocument that's inside this PDFview,

00:14:44.570 --> 00:14:49.960
the thumbnailview automatically went and fetched, got
the number of pages, generated thumbnails for each

00:14:49.960 --> 00:14:56.900
of those pages, and you'll see to, as I'm scrolling
through this PDFview, the thumbnailview is listening

00:14:56.899 --> 00:15:01.639
to that PDFview's notifications, and one
of the notifications that PDFview sends

00:15:01.639 --> 00:15:06.539
out is a page changed notification, so the
thumbnailview listens for paged changed

00:15:06.539 --> 00:15:13.829
and updates the current selection appropriately,
I can inside the PDFview select text, if there is,

00:15:13.830 --> 00:15:19.879
let me go up to the top here, find a good link,
here's a whole screen of link annotations,

00:15:19.879 --> 00:15:25.049
if I just hover over a link annotation, there's a
tool tip you get for free, if I go to page nine,

00:15:25.049 --> 00:15:31.609
if I click on the tool tip or on the link and hold down, you
see the highlight as soon as I let go, it goes to page nine,

00:15:31.610 --> 00:15:35.470
and again the page change notification
fires off, the thumbnail view tracks

00:15:35.470 --> 00:15:39.180
and you're displaying to the user their own page nine.

00:15:39.179 --> 00:15:43.250
There's a similar and just as a sort of,
the thumbnailview responds to the PDFview,

00:15:43.250 --> 00:15:47.889
the thumbnailview can also drive the PDFview,
so if I click on difference pages over here,

00:15:47.889 --> 00:15:55.559
you'll see that it's instructing PDFview to go to this page,
go to the page represented, by page six, by page seven,

00:15:55.559 --> 00:16:03.509
by page eight, and I can do certain operations like you see
at the beginning of this document we have the title page

00:16:03.509 --> 00:16:12.100
and then Apple legal, legalese, I click over to the
thumbnailview, I can actually drag page two in front

00:16:12.100 --> 00:16:18.639
of page one, and it's reordered the document for us, so now
the legalese's are at the front, and there's the title page,

00:16:18.639 --> 00:16:27.840
Undo is built in, I can hit command Z, and it's got the
page back in order, I'll show you something else that's kind

00:16:27.840 --> 00:16:36.259
of fun, I've got, you can drag in PDF's and other file
types, I've got some images here, so if I just drag a photo

00:16:36.259 --> 00:16:44.980
in between here, page three and four, the thumbnailview
created a new PDFpage from that image and inserted it

00:16:44.980 --> 00:16:52.149
into the document, and now if I saved out this PDF
or printed it, this new page would show up right

00:16:52.149 --> 00:16:56.919
between pages three and four, and again, Undo.

00:16:56.919 --> 00:17:07.549
So, I think that's all I really wanted to show you in this,
so I'll go back to the slides then, so that was step one,

00:17:07.549 --> 00:17:12.759
create your nib, and I showed you how to add a
PDFview, well first how to add the ID plug-in,

00:17:12.759 --> 00:17:18.299
so that interface builder has the PDFview and the
thumbnailview, how to add the PDFview, the thumbnailview,

00:17:18.299 --> 00:17:25.680
connect that outlet, so that the thumbnailview knows
about the PDFview, that it's going to respond to,

00:17:25.680 --> 00:17:31.299
and since I'm talking a lot about PDFview, and I'm not
really going to show you the headers or all the methods,

00:17:31.299 --> 00:17:36.990
I thought I'd at least kind of talk on them, just for
a second, an in fact, you can actually go to PDF kit,

00:17:36.990 --> 00:17:42.910
go to the PDF header, and I think frankly, it's pretty self
explanatory, you can look at the methods and guess what most

00:17:42.910 --> 00:17:48.850
of them do, just in sort of broad, sweeping terms,
there are methods for dealing with navigation,

00:17:48.849 --> 00:17:55.240
if you want to say go next page, go previously page, go
to page N, there's methods to deal with display attributes

00:17:55.240 --> 00:18:00.319
on the view, do you want to see single pages, two
pages, hide/show pages, page breaks, turn on and off,

00:18:00.319 --> 00:18:05.970
(inaudible) set the background color, that kind of
thing, you can zoom in, zoom out, turn on auto sizing,

00:18:05.970 --> 00:18:12.390
I showed you that in interface builder, go to a
specific scale factor like, go to two x, three x,

00:18:12.390 --> 00:18:19.520
you can get the current text selection, the user
selects text, and there's a notification for that,

00:18:19.519 --> 00:18:26.680
you can set the current text selection, you can
print the document, you can save the document,

00:18:26.680 --> 00:18:32.700
there's some conversion routine in PDFview that I'll talk
about a little later, that allow you to basically map

00:18:32.700 --> 00:18:39.860
from the PDFview to the page and back and I'll
explain those in a little bit later in this session,

00:18:39.859 --> 00:18:45.500
I told you that were a whole suite of notifications
and much more, so just go and look at the header,

00:18:45.500 --> 00:18:48.630
and I think you can, like I said,
it's pretty self explanatory.

00:18:48.630 --> 00:18:54.570
Let's go back to our application, I was sort of
cheating in interface builder, actually PDF kit cheats,

00:18:54.569 --> 00:18:59.079
when a PDFview is created and it recognizes
that it's inside interface builder,

00:18:59.079 --> 00:19:06.009
it kinds of pony up that phony PDFdocument, but your
application, you're going to have to actually provide

00:19:06.009 --> 00:19:13.589
that PDF content yourself, and the way that you do
that, is to tell the PDFview to associate a PDFdocument

00:19:13.589 --> 00:19:18.549
with the PDFview, so you'll going to have to
create a PDFdocument object, this was that,

00:19:18.549 --> 00:19:24.389
kind of probably the most core of core
base classes, create that PDFdocument,

00:19:24.390 --> 00:19:30.690
and tell the PDFview display this PDFdocument, and here's
all the code that you need, the first line in yellow,

00:19:30.690 --> 00:19:37.350
document equals, PDFdocument, Alex, that's going
to allocate storage for the PDFdocument object,

00:19:37.349 --> 00:19:42.549
and the PDFdocument has a method called (inaudible) with
URL, and I'm going to assume that you've got some code

00:19:42.549 --> 00:19:48.279
that brings up the NSopenpanel, and you've allowed the user
to select a PDF, so you get the URL from the open panel,

00:19:48.279 --> 00:19:52.930
and now you just saw PDFdocument, end
it with URL, and you pass on that URL,

00:19:52.930 --> 00:19:58.549
and if that URL represents a valid PDF file, then
you're going to get back a PDFobject document,

00:19:58.549 --> 00:20:06.169
that's what the document value return here is, then
I'm going to assume also that you have an outlet

00:20:06.170 --> 00:20:11.960
in your application to that PDFview that we added
in interface builder, an outlet called my PDFview,

00:20:11.960 --> 00:20:18.590
so my PDFview, there's a method called set document, you
pass at the PDFdocument, and that's all you need to do,

00:20:18.589 --> 00:20:25.769
as soon as you do that, all the machinery kind of kicks
in, it gets the number of pages, it sizes it views,

00:20:25.769 --> 00:20:30.970
it sends out a notifications, the thumbnail view, finds
out the number of pages, start loading thumbnails,

00:20:30.970 --> 00:20:35.120
it all just kinds of happens at that point, and
one of the other thing that the PDFview does,

00:20:35.119 --> 00:20:41.529
is it retains the document, so that last line of code, I
can just go ahead and release the document, forget about it,

00:20:41.529 --> 00:20:47.089
later if I want to get back that
PDFdocment for whatever reason,

00:20:47.089 --> 00:20:50.699
there's an accessor (phonetic) on
PDFview that'll return that document.

00:20:50.700 --> 00:20:58.000
So since we're talking about PDFdocument, I thought I'd
feel you in a little bit more about what this class has,

00:20:58.000 --> 00:21:04.839
is capable of, since it does represent the file,
since it is kind of the lowest level of this sort,

00:21:04.839 --> 00:21:10.879
this sort of hierarchy, it's at this level, the PDFdocument
level, that you would ask, for example, the number of pages,

00:21:10.880 --> 00:21:16.320
so there's method page count, that tell you how many pages
there are in a document, also the PDFdocument allocate

00:21:16.319 --> 00:21:23.220
and creates the PDFpage objects, so it's from the
PDFdocument, you would say, give me the page at index zero,

00:21:23.220 --> 00:21:28.059
for example if you wanted the first page, and
the PDFdocument would return you a PDF page

00:21:28.059 --> 00:21:31.079
that represents the first page in the document.

00:21:31.079 --> 00:21:36.429
There's API in PDFdocument for adding pages,
removing, reordering, probably want surprise you

00:21:36.430 --> 00:21:41.140
that that's what the PDFthumbnailview is calling,
it's calling these API's on the PDFdocument

00:21:41.140 --> 00:21:44.610
when the user is dragging the pages
around and inserting the images.

00:21:44.609 --> 00:21:53.349
Certain meta data, like subjects, authors,
keywords, you get from the PDFdocument class as well,

00:21:53.349 --> 00:22:02.279
searching we're going to wire up our searching, using the
PDFdocument class, I also mentioned that the root outline,

00:22:02.279 --> 00:22:08.109
you can get from the PDFdocment, so for our outline, we're
going to ask the document for that, and then finally,

00:22:08.109 --> 00:22:16.049
there's a lot, several API for dealing with saving the
PDF's, so for example, if the user has reordered the pages,

00:22:16.049 --> 00:22:22.319
and inserting pages, cropped pages, added annotation
or done anything like that, you can call these methods

00:22:22.319 --> 00:22:29.399
on PDFdocments, write the PDF out to disk and
it will write out, flatten out a new PDF file

00:22:29.400 --> 00:22:33.410
that represents all these changes,
all these edits that you've done.

00:22:33.410 --> 00:22:38.960
And there's a lot more, there's a lot more too,
there's all kinds of notifications that the PDF has,

00:22:38.960 --> 00:22:43.910
there's delicate methods, etcetera, again, I think if
you look at the headers, you can figure most of this out,

00:22:43.910 --> 00:22:52.160
or sample code, there's going to be lots of sample
codes from this session, and if you go to the wwc site

00:22:52.160 --> 00:22:55.269
for this session, you can find all those.

00:22:55.269 --> 00:23:03.910
So, I'm not going to go a lot into how you sort of setup
the PDFoutline, the headstart application shows you

00:23:03.910 --> 00:23:09.450
in detain how to do this, but I will give you just
a brief overview, in order to get the outline root,

00:23:09.450 --> 00:23:12.029
that's the sort of the first step in
presenting the outline of the PDF,

00:23:12.029 --> 00:23:18.879
there's a method on PDFdocument called outline root,
and you'll see this line of code in yellow, my outline,

00:23:18.880 --> 00:23:24.750
that's this PDFoutline object, I'm going
to get back hopefully, my PDFview document,

00:23:24.750 --> 00:23:30.390
so there's that outlet to the PDFview, document simply
returns that PDFdocument that I had passed in originally,

00:23:30.390 --> 00:23:36.660
so essentially I'm asking the PDFdocument, give me
the outline root, now if that PDF has an outline,

00:23:36.660 --> 00:23:44.259
then outline root method will return a PDFoutline
object, if it return null, then there's no PDFoutline,

00:23:44.259 --> 00:23:50.490
there's no outline in that file, so you'll have
to figure out how to handle that in your UI.

00:23:50.490 --> 00:23:57.559
What you do with this outline root though, is in the
sample application and in fact, in preview itself,

00:23:57.559 --> 00:24:03.409
is populate and NSoutlineview, we didn't need to add
an outline view like we did for the thumbnail view

00:24:03.410 --> 00:24:09.650
because there's already a perfectly good NSoutline
view and if you've ever used an NSoutlineview,

00:24:09.650 --> 00:24:16.160
it uses delicately methods, so you make some object
in your application a delicate in a NSoutline view

00:24:16.160 --> 00:24:23.820
and then it's going to ask things like how many children to
display, give me the children, child at index, you know, I,

00:24:23.819 --> 00:24:29.399
an there are methods on PDFoutline that
perfectly mirrors these kinds of delicate calls

00:24:29.400 --> 00:24:34.870
that the NSoutlineview is going to call for, and if you
look at the sample code, you'll see how that's implemented,

00:24:34.869 --> 00:24:41.819
I think, honestly I think it's probably six lines of
codes or something like that, and here are the attributes

00:24:41.819 --> 00:24:48.009
for PDFoutline, number of children, you want to know
for a given outline item, how many children it has,

00:24:48.009 --> 00:24:54.200
and for the outline root that you get from a PDFdocument,
it's got to have children, if it doesn't have children,

00:24:54.200 --> 00:24:59.360
it's not very interesting because the root is never
displayed, it's the first sort of children of that

00:24:59.359 --> 00:25:06.359
that root, it's the first level that you see in the
actually outline view, so if you take an example of,

00:25:06.359 --> 00:25:13.179
imagine a PDF that has an outline, that has like ten
chapters in it, chapter one, chapter two, chapter three,

00:25:13.180 --> 00:25:16.960
you would expect then, when you get that outline,
you'd expect to get back an outline root,

00:25:16.960 --> 00:25:21.269
first of all from the document, and you would expect that
if you asked that outline root for a number of children,

00:25:21.269 --> 00:25:28.539
you should get back ten, and then there's also a method on
PDFoutline, that say, okay give me the child at index zero,

00:25:28.539 --> 00:25:36.569
if you wanted that first item, and you should get back a new
PDFoutline item, and this new item will respond to the third

00:25:36.569 --> 00:25:43.819
and fourth method up here, label and action, label is what
gets displayed, so I would expect for the first child,

00:25:43.819 --> 00:25:48.609
the label chapter one, that'll be a string that
I'll get back from that, and then action is,

00:25:48.609 --> 00:25:50.589
what happens when the user clicks on that.

00:25:50.589 --> 00:25:55.929
So if chapter one begins on page seven, for example,
you would expect the action that you get back

00:25:55.930 --> 00:26:04.490
from that first child to be a Goto action, that
says to go to page seven or something like that.

00:26:04.490 --> 00:26:09.140
If that's all there is, if there's only just the ten
chapters, then you would expect, if you asked that child

00:26:09.140 --> 00:26:13.880
in chapter one for it's number of children, you
should get back zero, but it is a tree like structure,

00:26:13.880 --> 00:26:18.800
you could have subchapters or subsections, so
chapter one could have several subsections,

00:26:18.799 --> 00:26:22.440
so it would give each of those children, etcetera.

00:26:22.440 --> 00:26:29.690
So the last stop is searching, there's a
couple of different ways in PDF kit to search,

00:26:29.690 --> 00:26:35.059
there's a couple of different methods in PDFdocument
that you call to search, if you want to say, you know,

00:26:35.059 --> 00:26:38.690
find me the next instance of this word,
like find me the next instance of the word,

00:26:38.690 --> 00:26:44.620
Bob or find the previously instance of the word, Bob,
there's methods for that, I'm showing up here, I guess,

00:26:44.619 --> 00:26:50.679
it's kind of like the google method, it's more
like just find me all the instances of the word,

00:26:50.680 --> 00:26:57.080
find me all the instances of the word, Bob,
and the method looks like this, my PDFdocument,

00:26:57.079 --> 00:27:03.000
again that's going to return a PDFdocument object,
begin fine string, so you'll pass in a search string,

00:27:03.000 --> 00:27:11.190
maybe it's the word, Bob or whatever the user typed in, with
options, and I've got up here, NS case insensitive search,

00:27:11.190 --> 00:27:16.940
and this is just a constant defined by app kit, and
there's a number of other ones, like literally search,

00:27:16.940 --> 00:27:20.740
search backward, and you can use any of
these flags in PDF kit to do your search,

00:27:20.740 --> 00:27:27.390
but you might noticed that it doesn't return anything
because actually this call happens (inaudible),

00:27:27.390 --> 00:27:30.780
when you say begin fine search, or sorry, begin fine string,

00:27:30.779 --> 00:27:36.410
the PDFdocument just goes off (inaudible)
and starts doing this fine.

00:27:36.410 --> 00:27:41.910
So this method actually returns immediately, so
you may be wondering how do you get notified then,

00:27:41.910 --> 00:27:47.290
how do you find out that the word, Bob was found, well
there's two different ways, one is with notifications,

00:27:47.289 --> 00:27:53.730
at the bottom, I've got the list of, PDFdocment did
find match notification, so if you listen for those,

00:27:53.730 --> 00:28:01.039
every time it finds the word Bob, you'll get a notification,
I actually kind of prefer the other method, just above that,

00:28:01.039 --> 00:28:08.039
did match string, if you make some class in
you application a delicate of PDFdocument,

00:28:08.039 --> 00:28:13.700
then every time it finds the word, Bob, it's
going to look to see if it's delicate, your class

00:28:13.700 --> 00:28:19.980
implements a method called, did match string, so if you
implement this, then every time it finds the word, Bob,

00:28:19.980 --> 00:28:25.410
your get match string will get called, and this PDFselection
object that's passed is going to represent where in

00:28:25.410 --> 00:28:30.540
that document that instance of the word was
found, and there's a lot of things that you can do

00:28:30.539 --> 00:28:33.839
with that PDFselection, I'll show you in the demo here.

00:28:33.839 --> 00:28:45.629
Yeah let me go ahead and switch to the demo machine, and
I'll just show you, PDF kit viewer, so if you did download

00:28:45.630 --> 00:28:58.200
and run this, headstart application, you'll run this, this
is our little PDFviewer, and I did write this for Tiger,

00:28:58.200 --> 00:29:02.990
timeframe, so I didn't have a chance to
modernize it or might have added a thumbnail view,

00:29:02.990 --> 00:29:08.799
I might have got rid of the draw too,
preview's got rid of the draw, over on the left,

00:29:08.799 --> 00:29:15.789
obviously the large content is the PDFview, you
see on the right, the sidebar at the top, is,

00:29:15.789 --> 00:29:21.309
this document happens to have an outline, so
there's our outline, and it's very easy to listen

00:29:21.309 --> 00:29:30.779
for a change page notification, and update that NSoutline
view, so that you can basically track the current page,

00:29:30.779 --> 00:29:40.160
where it is in the outline tree, and also as I click on
various items in this outline tree, you can see that it goes

00:29:40.160 --> 00:29:45.650
to that specific part of the PDF document
over here, and if I do a search here,

00:29:45.650 --> 00:29:59.450
I'll search for the word color (inaudible), this is just a
standard NStableview, PDFdocument, and did the search, if I,

00:29:59.450 --> 00:30:07.620
it's probably going to be too quick, now, let me try
searching for something else, like PDF, yeah you see,

00:30:07.619 --> 00:30:13.750
I can kind of still interact with the document, well
it's done now, no it's still going, while it's searching,

00:30:13.750 --> 00:30:20.289
an actually that's kind of interesting because one I start
resizing and starting basically taking over the run loop,

00:30:20.289 --> 00:30:26.230
the PDFdocument kind of stalled it search
and waited until the run loop was free again,

00:30:26.230 --> 00:30:31.289
and just with the PDF selection object that's
passed into my did match string method,

00:30:31.289 --> 00:30:38.549
I'm able to get things like the page that the instance
was found on, page nine, I'm able to get the section

00:30:38.549 --> 00:30:45.059
that that corresponds to inside the outline,
I've able to get all kinds of information,

00:30:45.059 --> 00:30:51.289
I've even able to tell the PDFview to go
and select that text and scroll to that.

00:30:51.289 --> 00:30:56.549
So if you look at the code for this, and again you
can download it, it's associated with this session,

00:30:56.549 --> 00:31:05.720
you can see how all this is implemented, and it's
not a lot of code, so I'll go back to the slides.

00:31:05.720 --> 00:31:13.490
Okay, so this is the next kind of, how to, so that was kind
of a simple app, where we just kind of reusing PDF kit,

00:31:13.490 --> 00:31:17.460
kind of the way you would expect it to be
used, the way it was intended it to be used.

00:31:17.460 --> 00:31:24.529
But now let's say we want to kind of extend it a bit, and
what we're going to try to do, is generate our all content

00:31:24.529 --> 00:31:32.269
on top of the PDFcontent, we want to do like an overlay,
and we want to display something on top of the PDFcontent

00:31:32.269 --> 00:31:34.240
and allow the user to be able to interact with that.

00:31:34.240 --> 00:31:38.309
So the way, that we're going to do that
actually, is simply to subclass PDFview,

00:31:38.309 --> 00:31:50.559
and I'll show you on the demo machine here, this
application that I wrote, it's called PDFviewsubclasser,

00:31:50.559 --> 00:31:59.569
and this actually is a PDFview, the big region on
the top, and I'm loading a PDF from my resources,

00:31:59.569 --> 00:32:07.339
and I've got a PDF that is just a map of Europe, a just
a gray scale map of Europe, but that push pin that's

00:32:07.339 --> 00:32:14.849
in the middle, with that like Indigo circle, that's the
part that I'm actually overlaying onto the PDFcontent,

00:32:14.849 --> 00:32:22.889
and I can go in, and I can zoom in for example
and place that push pin right on Warsaw, Poland,

00:32:22.890 --> 00:32:30.870
and you'll see that even as I zoom out, or as I scroll
that I'm able to pretty, I'm able to very accurately track

00:32:30.869 --> 00:32:34.569
that PDFcontent and put that push
pin right where I want it too,

00:32:34.569 --> 00:32:43.689
inside the PDFview, so I'll show you now how you do that.

00:32:43.690 --> 00:32:48.930
So the first step, sorry I didn't even see that,
thank you, the first thing we need to do is,

00:32:48.930 --> 00:32:55.140
so we're going to subclass PDFview, and we need to
handle user input, so that we can track the user grabbing

00:32:55.140 --> 00:33:02.110
and dragging the push pin around, and obviously we also need
to handle displaying that push pin on top of the PDFcontent,

00:33:02.109 --> 00:33:08.819
so the way we're going to handle the first part, the user
end put is, I told you that PDFview is a subclass of Nsview,

00:33:08.819 --> 00:33:14.179
so it inherits NSresponder's mouse down
method, so we're going to override mouse down,

00:33:14.180 --> 00:33:19.279
and be able to get that mouse down, so that we can
detect if that user has clicked on our push pin,

00:33:19.279 --> 00:33:26.680
but I should point out that PDFview also implements mouse
down, all that sort of text selection and clicking on links

00:33:26.680 --> 00:33:32.950
and that sort of things, that's handled inside
PDFview's mouse down, so if I subclass PDFView

00:33:32.950 --> 00:33:38.559
and I override mouse down, if I don't call Super,
then all that functionality isn't going to happen,

00:33:38.559 --> 00:33:42.759
now maybe for this application, I don't really
care, I don't care if the user can select text,

00:33:42.759 --> 00:33:47.759
and there's no links in this particular map of
Europe, so I don't need to call Super mouse down,

00:33:47.759 --> 00:33:52.269
but I do want to point it out, you know, that if you
want your application, if you want to still be able

00:33:52.269 --> 00:33:56.029
to select text, you're going to have to call Super.

00:33:56.029 --> 00:34:05.079
Now the only trick though, with PDFview is that it comes,
it becomes very handy actually to be able to sort of map

00:34:05.079 --> 00:34:13.969
from the mouse down in the view to some specific
point on the page, on a specific PDFpage and that's

00:34:13.969 --> 00:34:21.559
where all these methods in PDFview from mapping the view
to the page and from the page back to the view come in,

00:34:21.559 --> 00:34:29.409
and I guess, I call these, I call the coordinates, that
are in the view's coordinates system, the view space

00:34:29.409 --> 00:34:38.239
and the coordinates that are in the pages coordinates, page
space, so here's kind of a one slide explanation of those,

00:34:39.260 --> 00:34:47.210
I've got in the blue box here, that's suppose to represent
the PDFview, itself, and you know with standard app kit,

00:34:47.210 --> 00:34:53.670
that probably the lower left corner of this PDF kit is
zero, zero, but that's not necessary going to correspond

00:34:53.670 --> 00:35:00.269
to anything particular in the PDFdocument, the user can
zoom in, the user can zoom out, they can, in this case,

00:35:00.269 --> 00:35:03.829
there's actually three pages shown here,
there's a little silver of a page at the top,

00:35:03.829 --> 00:35:10.469
and a little silver on the bottom, and in the main page in
the center, so what we want to find is if the user clicks

00:35:10.469 --> 00:35:17.269
on some arbitrary page in the view, what page
does that corresponds to, and then in page space,

00:35:17.269 --> 00:35:24.509
in that pages coordinates, where does that point corresponds
to, and the reason why this is important is, all of PDF kit,

00:35:24.510 --> 00:35:29.900
with the exception of these methods, I'm going to
show you here, all the rest off PDF kit deal strictly

00:35:29.900 --> 00:35:36.050
in page coordinates, in page space, so the pages
bounds, it's going to return you the bounds in points,

00:35:36.050 --> 00:35:43.260
that's the way Adobe defines the PDF back, it's
always points, seventy two points per inch,

00:35:43.260 --> 00:35:46.830
if there's annotations on the page, and
you asks for the annotations bounds,

00:35:46.829 --> 00:35:51.670
it's going to return you the bounds again in
page coordinates, that means that regardless

00:35:51.670 --> 00:35:58.860
of whether the user zooms in, zooms out of the, that
the page coordinates are always going to be the same,

00:35:58.860 --> 00:36:04.490
it's the view coordinates, or you know mapping from
the view to the page coordinates that will change.

00:36:04.489 --> 00:36:12.019
So, I guess the example that I'm giving here is that yellow
cross is like the origin of the page, that might mean,

00:36:12.019 --> 00:36:16.369
let's say zero, zero on the page, but that's
obviously not going to be zero, zero on the view.

00:36:16.369 --> 00:36:22.789
So here's the method that we're used, here's our
subclass of mouse down, that first line in yellow,

00:36:22.789 --> 00:36:27.289
view point equals self, convert point,
event, location and window, from (inaudible),

00:36:27.289 --> 00:36:34.090
this is standard NSview subclass stuff, this is standard
code that takes the NSevent that's been passed in,

00:36:34.090 --> 00:36:38.230
and maps it to the windows coordinates and from
the window coordinates to your views coordinates.

00:36:38.230 --> 00:36:42.969
So this is just standard NSview subclasses
that you would do that first line.

00:36:42.969 --> 00:36:51.449
It's next two lines that are sort of the PDFview specific
stuff, the first one, page near equals self, page per point,

00:36:51.449 --> 00:36:56.699
viewpoint nearest, yes page per point is the
method that PDFview implements, that's says,

00:36:56.699 --> 00:37:02.899
I'm going to give you a point in view coordinates, and
you give me back the page that the user clicked on,

00:37:02.900 --> 00:37:08.599
the PDF page object and if I passed in nearest,
yes then, if the user didn't exactly hit a page,

00:37:08.599 --> 00:37:11.980
it will at least return something, the
nearest page that the user clicked on.

00:37:11.980 --> 00:37:21.360
So I get back PDF page object, and then now that I got a PDF
page, I can call the next method in PDFview and say, okay,

00:37:21.360 --> 00:37:28.599
convert this point from view coordinates to this
pages page coordinate, so self convert, view point,

00:37:28.599 --> 00:37:33.460
and it's still in view coordinates, to page, and then
that page that we found that the user was nearest,

00:37:33.460 --> 00:37:37.699
and what's that's going to return is page
point and I delivered name it that way,

00:37:37.699 --> 00:37:44.049
so that you know that this point is in the pages coordinated
system, so at that point, you can do all your hit testing,

00:37:44.050 --> 00:37:51.250
I'm going to assume that that push pin for
example, that were ever it's located on Warsaw,

00:37:51.250 --> 00:37:59.610
that you've got that position in page coordinates,
and so then you can just do a real simple, you know,

00:37:59.610 --> 00:38:04.510
point in (inaudible) or something like that to
determine if the user has clicked on that point

00:38:04.510 --> 00:38:08.050
and I didn't show you the all the dragging
codes in here, you can look at the sample codes

00:38:08.050 --> 00:38:16.120
to see how that's implemented, but it's standard app kit
stuff, and wasn't related to PDF, so I didn't show it here.

00:38:16.119 --> 00:38:22.730
Okay, so the second part, we've been able to take the
user's input, mapped it to the PDF page and pages space

00:38:22.730 --> 00:38:27.530
and able to determine if the user has clicked
on the push pin and we handled the drag,

00:38:27.530 --> 00:38:35.170
now we want to be able to display the push pin, well you
might think that since PDFview is a subclass of Nsview,

00:38:35.170 --> 00:38:41.340
that you would override Nsview's draw rect method,
but you would be wrong, actually you could do that,

00:38:41.340 --> 00:38:47.910
but you wouldn't want to, because PDF kit or PDFview
has a much more interesting method called a page,

00:38:47.909 --> 00:38:51.949
and I'll explain why this is interesting in a minute here.

00:38:51.949 --> 00:38:56.189
First of all, draw a page, gets called for
every visible page, so in that example I had

00:38:56.190 --> 00:39:02.139
where I showed you the view space to page space,
there was those three pages visible, when that NS,

00:39:02.139 --> 00:39:07.379
sorry when that PDFview gets called to draw,
it's going to call draw a page, three times,

00:39:07.380 --> 00:39:13.619
and each time it calls this method, it
pass in the page that needs drawing.

00:39:13.619 --> 00:39:18.059
And so that's the first interesting thing, if you
know that your push pin is only on a specific page,

00:39:18.059 --> 00:39:21.750
you don't need to draw your push pin on
every page, only the page when the page comes

00:39:21.750 --> 00:39:24.590
in that your push pin corresponds
too, you can draw your push pin.

00:39:24.590 --> 00:39:31.190
The other thing that's kind of interesting is that
when, I guess I'm a little bit out of order here,

00:39:31.190 --> 00:39:40.059
but when draw page gets called, the graphical context
has already been setup to be in the pages, in page space,

00:39:40.059 --> 00:39:46.599
in the pages coordinate system, so if the user has
zoomed in or, you know, if they've scroll up a bit,

00:39:46.599 --> 00:39:53.360
and there's a bit of a translation, then the scale and the
translate will already be set up into the graphical context,

00:39:53.360 --> 00:39:59.360
so that when draw a pages is called, you can just
draw at, you know, let's say that Warsaw is, you know,

00:39:59.360 --> 00:40:03.620
at a hundred comma hundred, I don't know what that point
represents in that document, but let's say that it did,

00:40:03.619 --> 00:40:07.339
then you can just go to position one hundred,
comma one hundred, and draw your push pin,

00:40:07.340 --> 00:40:11.910
and it'll be at the right place and
as you scale, as you scroll around,

00:40:11.909 --> 00:40:17.109
it'll just track because the graphical context
has already been set up to be in page coordinates,

00:40:17.110 --> 00:40:25.700
and if you do everything in page space, then it just
kind of work, I skipped over the super method there,

00:40:25.699 --> 00:40:33.259
I should point out that PDFviews implementation of draw
page actually draws the page, draws the pages content,

00:40:33.260 --> 00:40:38.940
so this is a case where I don't thing you should skip the
super, if I didn't call super, you wouldn't see the map

00:40:38.940 --> 00:40:43.599
of Europe, so the first thing I've got to do is call
Super, so that the PDFview can draw it's content

00:40:43.599 --> 00:40:49.360
and then when that returns, I draw my push pin, and
that's the way it all kind of gets composited together.

00:40:49.360 --> 00:40:55.579
So I'm just going to mentioned this as a
side, sometimes having the content setup to be

00:40:55.579 --> 00:41:02.610
in page space isn't always what you want, if you want if
for example, to do a one pixel boarder around an annotation

00:41:02.610 --> 00:41:06.500
to show it's selected for example, you
would kind of hate as the user zoomed in

00:41:06.500 --> 00:41:09.610
or out that that one picture pixel
border would get fat or thinner.

00:41:09.610 --> 00:41:16.760
So there is a method and in the sample of PDFsubclassview,
you can see where, I actually used both of these,

00:41:16.760 --> 00:41:21.910
I actually used both the draw a page and this new
method, this other method to draw a page post,

00:41:21.909 --> 00:41:28.849
draw page post is just like draw a page, expect the context
has not been set up in page space, it's been popped off,

00:41:28.849 --> 00:41:37.069
and as you might guess, it be called after draw
a page, so in that view subclasser example,

00:41:37.070 --> 00:41:42.000
you may have noticed that the blue circle got
bigger and smaller as I zoomed in and out,

00:41:42.000 --> 00:41:49.980
that was hooked up via draw page, the push pin never changed
scale, I actually draw the push pin in draw page post,

00:41:49.980 --> 00:41:54.710
but there's a little extra work to do because you're
going to have to map from the push pin coordinates

00:41:54.710 --> 00:42:00.570
to page coordinates because it hasn't been set up for
you in the context, again look at this sample code,

00:42:00.570 --> 00:42:07.300
it's to confusing to even talk about, here's what all our
methods look like, draw a page, we're going to call Super,

00:42:07.300 --> 00:42:14.190
again first line, call Super, let the PDFview draw the page
for that, the content for that PDF, and then, you know,

00:42:14.190 --> 00:42:20.309
I've got this line if page equal page marker page,
presumably we have some page marker pages that represent

00:42:20.309 --> 00:42:32.019
which page the push pin is on, then we do our drawing,
okay, so by the way, well this next part here,

00:42:32.019 --> 00:42:36.309
has to do with how you would create your own PDF
content, the last two parts I've really focused

00:42:36.309 --> 00:42:41.960
on the high level classes, PDFview in particular, but
I wanted to spend a little time in this session talking

00:42:41.960 --> 00:42:49.050
about how you kind of can manipulate the lower level
classes, the base classes, and last year, I did,

00:42:49.050 --> 00:42:54.440
if you saw my session last year, I did a little calendar
application, again you can download that if you want,

00:42:54.440 --> 00:43:00.530
and it shows you how to basically programmatically generate
calendar content and create a 12 page, 12 months in a year,

00:43:00.530 --> 00:43:05.710
PDF, but it wasn't a very practical
example, I don't think anybody that wanted

00:43:05.710 --> 00:43:10.780
to write a calendar application would think let's
use PDF kit and I kept having people come up to me

00:43:10.780 --> 00:43:15.810
and asking me can you use PDF kit to add
watermarks to a page, so I thought this year,

00:43:15.809 --> 00:43:20.090
I'd show you how you can add watermarks to a PDF page.

00:43:20.090 --> 00:43:26.039
What we want to be able to do is render on top
of the PDF content, some kind of a watermark and,

00:43:26.039 --> 00:43:32.909
but here's the kind of the cavy, you might thing, well I
could just subclass PDFview, like I did with the push pin

00:43:32.909 --> 00:43:38.629
and then I can implement draw a page and every time
draw a page gets called, I can draw, I can call Super,

00:43:38.630 --> 00:43:45.070
and then draw my watermark, and that would work, the
problem is, and this is kind of the fundamental differences

00:43:45.070 --> 00:43:51.580
between the two approaches we're going to take, the
different approach we're going to take here is when we call,

00:43:51.579 --> 00:43:58.139
when we added that push pin, we wasn't adding it to
the content of the PDF, we we're really just kind

00:43:58.139 --> 00:44:07.029
of overlaying it, inside PDFview, if I was to save that PDF
out or print it for example, the push pin wouldn't be there,

00:44:07.030 --> 00:44:15.440
I want this watermark to actually be a part of the PDF
itself, so I want to go down to PDFpage and subclass that,

00:44:15.440 --> 00:44:20.630
so that's how we're going to do this, we're going
to subclass PDFpage, override it's draw method

00:44:20.630 --> 00:44:27.110
and draw the watermark at that level, the only difference
now, I should say the only draw back that this has

00:44:27.110 --> 00:44:33.740
versus the last method is, PDFpage doesn't have
a mouse down method, it's not a view class,

00:44:33.739 --> 00:44:38.669
it's like an NSobject subclass, so that kind of
interactivity where the user wants to be able

00:44:38.670 --> 00:44:43.680
to move the push pin around, we want
be able to do by subclassing PDFpage,

00:44:43.679 --> 00:44:46.949
but as you'll see there's some more
interesting things that we can do.

00:44:46.949 --> 00:44:51.710
So let me go ahead and show you the application
that I wrote; I'll switch over to the demo machine,

00:44:51.710 --> 00:45:04.659
and it's called, switch over to the demo
machine, and it's called PDFwatermarker.

00:45:04.659 --> 00:45:13.230
And this application, by the way, the, this is a
PDFview here, but it gray because I don't have any,

00:45:13.230 --> 00:45:20.119
I haven't associated the PDF document with it, so I click
this button, select PDF and I bring up and NSopenpanel,

00:45:20.119 --> 00:45:29.529
and we'll go ahead and let the user select a PDF, and
I'll pick a small one because they save more quickly,

00:45:29.530 --> 00:45:36.640
and here's our watermark, the big red text confidential,
and you'll see that it's displayed across every page

00:45:36.639 --> 00:45:47.460
and if I type in another watermark, "Do not print", now
it's added the do not print to every page of the document,

00:45:47.460 --> 00:45:53.889
and if I save this, and this is really where, like
the fundamental difference is, if I save this,

00:45:53.889 --> 00:46:01.059
this document that got saved, and I'll go ahead and throw it
on the Adobe reader, so that you know that I have no tricks

00:46:01.059 --> 00:46:12.880
up my sleeve here, it's a real PDFdocument, and
there's the text, and the reason why this is possible

00:46:12.880 --> 00:46:19.320
and the reason why it's possible by subclassing
PDFpage is because PDFpage's draw method gets called,

00:46:19.320 --> 00:46:25.890
not only for displaying like this in the PDFview where
a graphical context, a (inaudible) map is set up,

00:46:25.889 --> 00:46:31.000
and the page is told draw and by subclassing
you can draw, you know your watermark,

00:46:31.000 --> 00:46:36.090
and it'll just show up in the PDFview, but
you know when I click on save to save the PDF,

00:46:36.090 --> 00:46:41.840
the PDFpages draw method is called again but this time it's
being recorded into a PDF context and written into file,

00:46:41.840 --> 00:46:48.750
or if I go to print this PDF, again the
pages draw method gets called and this time

00:46:48.750 --> 00:46:51.750
into a print context and sent out to the printer.

00:46:51.750 --> 00:46:57.679
So that's the kind of the powerful
part of subclassing PDFpage,

00:46:57.679 --> 00:47:05.059
so switch back to the slides and show you how you do that.

00:47:05.059 --> 00:47:12.150
I switched back to the slides and I'm talking to fast.

00:47:12.150 --> 00:47:21.119
So the irony is, in order to subclass PDFpage,
we have to actually subclass first PDFdocument,

00:47:21.119 --> 00:47:29.109
and the reason for that is, if you think about how I
explained it, you know, if you point a PDFdocument to a file

00:47:29.110 --> 00:47:35.470
on disk, you've got a URL and you create a PDF
document, the PDFdocument is going to go and create,

00:47:35.469 --> 00:47:42.399
let's say it's a 10 page PDF, the PDF document is going to
go and then create and then allocate 10 PDF page objects

00:47:42.400 --> 00:47:48.960
and that's the problem, we don't won't the PDFdocument
to create 10 PDFpage objects, we're going to subclass it,

00:47:48.960 --> 00:47:57.460
we're going to have a PDFpage watermark class, so we want
to tell PDF document to create 10 PDFpage watermark classes,

00:47:57.460 --> 00:48:05.849
so there is a method in Tiger for a new method on
PDFdocument called page class, and default implementation

00:48:05.849 --> 00:48:10.589
for this is simple to return PDFpage class.

00:48:10.590 --> 00:48:17.059
So by subclassing PDFdocument and let's say we call it
a PDFdocument watermark, that's going to be our subclass

00:48:17.059 --> 00:48:22.000
in PDFdocument, we're just going to implement this
one class, this one method, page class and we're going

00:48:22.000 --> 00:48:29.030
to return PDFpage watermark class,
now go and do an out PDFpage, sorry,

00:48:29.030 --> 00:48:36.060
we do a PDFdocument watermark Alex (phonetic), end
it with URL, now this PDFdocument watermark is going

00:48:36.059 --> 00:48:47.849
to create 10 PDFpage watermark classes or objects, and
this is what, oh I've got this page out of order, I guess,

00:48:47.849 --> 00:48:55.630
let me just, as and aside talk about PDFpage
since we're subclassing PDFpage, so as I said,

00:48:55.630 --> 00:49:03.150
the document creates the pages, there's one thing you can do
with the PDFpage is, you can, there's a week reference back

00:49:03.150 --> 00:49:09.690
up to the document that owns it, so you can get back to
that document from the page, so there's a document method,

00:49:09.690 --> 00:49:15.510
I told you that PDFpage, you can ask for it's bounds and
it's going to return the bounds, and page coordinates,

00:49:15.510 --> 00:49:24.480
of course, there's a rotation associated with the
PDFpage, 09018270, their always in 90 degree increments,

00:49:24.480 --> 00:49:32.730
the PDFpage creates and own its annotations, so if there
annotations on the page, you can ask for the annotations

00:49:32.730 --> 00:49:39.360
and it brings you back an array of those, the text,
within a PDFdocument is actually broken across,

00:49:39.360 --> 00:49:45.510
and stored in each page, so you can ask the page for the
text, and it'll give you the text that's on that page,

00:49:45.510 --> 00:49:52.660
it would actually be kind of painful for you, if you wanted
to do a search to have to go to each page, get it's text,

00:49:52.659 --> 00:49:58.210
do the search, look for the word, go to the next page,
get it's text, do the search, that's actually why we put

00:49:58.210 --> 00:50:02.369
that method in the document because we do that for you.

00:50:02.369 --> 00:50:09.779
But, more importantly the PDFpage implements a draw
method to draw the PDFcontent and that's what we're going

00:50:09.780 --> 00:50:20.540
to subclass, so here's what our draw method would look
like, PDFpage draw method is called draw with box,

00:50:20.539 --> 00:50:27.630
so we implement our PDFpage watermark class, one
method, draw with box, we're going to call Super,

00:50:27.630 --> 00:50:33.440
it's just like PDFview, if we don't call Super, the content
doesn't get displayed, so we call Super, draw with box,

00:50:33.440 --> 00:50:39.039
pass the box to it, and then when that
return, anything we draw, in this case,

00:50:39.039 --> 00:50:45.340
I've got something called watermark strings, some kind of
a sting and I'm just calling a standard Nsstring call draw

00:50:45.340 --> 00:50:51.510
and rect, presumably I've got a destination rectangular,
with attributes, you know, font size, font color,

00:50:51.510 --> 00:50:58.450
that gets composited, right after the PDF gets drawn,
and like I said that gets composited when printing

00:50:58.449 --> 00:51:01.369
to the printer, that gets composited
when saving to the PDFfile,

00:51:01.369 --> 00:51:07.630
and obviously when displayed in the PDFview, so that's it.

00:51:07.630 --> 00:51:15.230
The last section here, I'm going to go over kind of
quickly, it has to do with PDFannotations, so here's a list,

00:51:15.230 --> 00:51:22.559
oh actually something got cropped off, this is
a list of all the annotations that PDF supports,

00:51:22.559 --> 00:51:30.009
the ones in yellow are the new ones are that we added for
Leopard, you can see there's button widgets, circles, text,

00:51:30.010 --> 00:51:35.110
inkline, bunch of different types and if you actually
go to Adobe's web page and download their PDF specs,

00:51:35.110 --> 00:51:39.430
they'll tell you everything you'd want
to know about all these annotations.

00:51:39.429 --> 00:51:46.980
One thing that the classes themselves have and the
methods on these classes have in common though,

00:51:46.980 --> 00:51:53.420
are there's a type attribute, so you can ask the annotation
for it's type and if it's a circle it'll return circle,

00:51:53.420 --> 00:52:01.269
etcetera, there's a page, again, a week's reference back
up to the page since the page creates the annotation,

00:52:01.269 --> 00:52:06.909
you can ask the annotation for the page that it's on and
from page you can go up to the document if you wanted,

00:52:06.909 --> 00:52:11.670
if for some reason if the annotation needed
to know the document that it was a part of,

00:52:11.670 --> 00:52:17.900
a bounds method on the annotation, so again in page
coordinates, it'll tell you what it's bound are on that page

00:52:17.900 --> 00:52:21.619
that it's apart of, and also it as well has a draw method,

00:52:21.619 --> 00:52:25.809
so the circle annotation knows
how to draw a circle etcetera.

00:52:25.809 --> 00:52:32.809
A PDFannotation could have an action, the link annotation
most obviously example you would expect a link annotation

00:52:32.809 --> 00:52:39.610
to have an action like Goto page 14 or
something like that, then the various subclasses

00:52:39.610 --> 00:52:48.539
of PDFannotation have a type specific attribute, so the
circle will have color and the thickness of the line

00:52:48.539 --> 00:52:55.300
and whether the lines dashed or not or an arrow, sorry a
line, annotation would have whether it has an arrowhead

00:52:55.300 --> 00:53:01.019
on the end, etcetera, and you can again look in the
headers and you can, it's all pretty self explanatory.

00:53:01.019 --> 00:53:09.340
So I'll you this annotation editor over on the demo machine
that you can download and this is probably the most,

00:53:09.340 --> 00:53:16.200
I guess richest application that I'm going to
show you today, so the sample code for this,

00:53:16.199 --> 00:53:21.509
I think is a real kind of treasure
cove of things that you can do.

00:53:21.510 --> 00:53:29.910
We're going to open a small PDF here, again it's
easier, quicker to save, here's the standard PDFview

00:53:29.909 --> 00:53:37.359
and I've got a thumbnailview over here, as well, one
thing this application does is add this annotation menu,

00:53:37.360 --> 00:53:44.870
and you see, I can go new circle and when I select
that, what I'm doing is, I'm calling Alex (phonetic)

00:53:44.869 --> 00:53:52.819
and it will rect a new PDFannotation circle object,
then I'm getting the current page from the PDFview

00:53:52.820 --> 00:53:58.610
and saying add this annotation, and just
by doing that, when the PDFview redraw,

00:53:58.610 --> 00:54:06.180
it's going to redraw with this circle annotation here,
I can move this around, it probably want surprise you

00:54:06.179 --> 00:54:14.489
that the red box around this circle annotation is
being done by subclassing PDFview, I'm getting the,

00:54:14.489 --> 00:54:21.989
I've overriding the mouse down, so that if the mouse is
inside the selected annotation, I can drag it around,

00:54:21.989 --> 00:54:32.259
I can resize it, and then this is kind of fun, over
here on the side is a palette, and I've written that,

00:54:32.260 --> 00:54:37.380
depending on the type of annotation that's selected,
gives you various attributes, access to some of these,

00:54:37.380 --> 00:54:47.380
so for example, I can set the thickness on the border to,
let's say 12 points, I can set it to be dashed or not,

00:54:47.380 --> 00:54:54.910
I can bring up the color pixel here, and drag a color
swatch to the border color, now I've called set color

00:54:54.909 --> 00:55:07.440
on that annotation and it just displays correctly here,
go ahead and add another here, I'll add a link annotation,

00:55:07.440 --> 00:55:15.360
link annotation aren't very pretty, they
don't draw anything, but let's go ahead,

00:55:15.360 --> 00:55:20.220
over hear on the annotation palette, go ahead and
give it an action, let me give it a URL action,

00:55:20.219 --> 00:55:27.480
so I've created a link annotation, I've added it to
the page, now I'm going to create PDFaction GoTo,

00:55:27.480 --> 00:55:36.360
or PDFaction URL, and by default, I've the URL to be
apple.com, we'll just leave that, and then I call set mouse,

00:55:36.360 --> 00:55:41.349
up action on that annotation and pass at that action.

00:55:41.349 --> 00:55:47.139
I'll show you one other interested annotation,
the stamp annotation and what's interesting

00:55:47.139 --> 00:55:53.900
about this annotation is stamp annotation don't actually
have a draw method, I mean they have a draw method,

00:55:53.900 --> 00:56:02.800
but they don't actually draw anything, you have to actually
subclass the stamp annotation, and override that draw method

00:56:02.800 --> 00:56:07.980
and implement that, so what I've done here,
is I get my bounds and draw, is I stretch out,

00:56:07.980 --> 00:56:13.869
I've got this little apple text that I draw
and stretch it to fix, so I've go a link here,

00:56:13.869 --> 00:56:24.909
I've got a circle annotation here and a stamp annotation
here, and if I go ahead and save this, I'll go ahead

00:56:24.909 --> 00:56:38.269
and open this up in Adobe reader again, just prove I'm
on the up and up here, and here's that circle annotation,

00:56:38.269 --> 00:56:44.250
here's the stamp annotation, by overriding it's
draw method, when that PDF gets written out to disk,

00:56:44.250 --> 00:56:52.420
the annotation draw method is called, it's recorded into
an appearance string, and saved out into a PDFannotation,

00:56:52.420 --> 00:57:00.990
and up here, I see, yes there is a link annotation here,
and if I click on it, it launches the browser and works.

00:57:00.989 --> 00:57:09.750
So those are some of the things that you can do, have
to quick this to quit, these are some of the things

00:57:09.750 --> 00:57:20.619
that you can do with PDF kit, switch back
to the slides, that's all I have for today.

00:57:20.619 --> 00:57:30.460
So I've said this many times already, go to the
session on wwc session, there's tons of demo apps,

00:57:30.460 --> 00:57:36.519
I do a couple every year, so we're up to quite
a few new, there's documentation there as well,

00:57:36.519 --> 00:57:41.150
there's a couple of apps that we've written,
go to Adobe's website and get the PDF spec,

00:57:41.150 --> 00:57:44.000
you can find out a lot of information
about annotations for example.