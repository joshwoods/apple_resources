WEBVTT

00:00:21.230 --> 00:00:22.949
>> Thank you very much.

00:00:22.949 --> 00:00:23.910
Thank you for being here.

00:00:23.910 --> 00:00:29.750
Thank you for taking the time to come in and learn
about Automator and creating actions for Automator.

00:00:29.750 --> 00:00:33.200
Can I switch to the demo machine for just a second?

00:00:33.200 --> 00:00:34.990
We have to call an audible here.

00:00:34.990 --> 00:00:35.780
Is that okay?

00:00:35.780 --> 00:00:43.799
Yes. So some of the project files might not
be at the URL that was in the precious slide,

00:00:43.799 --> 00:00:47.529
so I put an extra copy up on Automator.us.

00:00:47.530 --> 00:00:53.980
If you go to Automator.us slash
Leopard, you'll get this page here.

00:00:53.979 --> 00:01:03.849
And if you click the examples link, you'll see at the bottom
there's a link there for WWDC Session 206 Project Files.

00:01:03.850 --> 00:01:07.810
If they're not on the Apple Developer site,
you can download them there while I'm going

00:01:07.810 --> 00:01:10.620
through my little ten minute slide thing.

00:01:10.620 --> 00:01:13.700
Okay? Can we go back to slides?

00:01:13.700 --> 00:01:15.000
Thank you.

00:01:15.000 --> 00:01:17.980
So I'm going over here because the slide's over here.

00:01:17.980 --> 00:01:21.770
I'm an analogue person stuck in a digital world.

00:01:21.769 --> 00:01:29.899
Okay. Welcome to Session 206, Creating
and Building Automator Actions.

00:01:29.900 --> 00:01:32.630
And this is going to be a hands on session.

00:01:32.629 --> 00:01:35.159
Today, you will actually create actions yourself.

00:01:35.159 --> 00:01:43.179
You will build them here, live, in multiple languages,
giving you more power than you ever thought that you had.

00:01:43.180 --> 00:01:51.690
So what you'll learn today is you'll learn basically how to
build Automator actions and how to deploy Automator actions.

00:01:51.689 --> 00:01:53.409
It's very simple.

00:01:53.409 --> 00:01:55.519
So, what is Automator?

00:01:55.519 --> 00:02:05.530
Back in Tiger, we came up with a very interesting and
powerful technology that allows users to create automations,

00:02:05.530 --> 00:02:11.550
kind of like recipes for doing things
over and over on their computer.

00:02:11.550 --> 00:02:17.670
And customers often think of it in
there terms as visual programming.

00:02:17.669 --> 00:02:23.129
For example, can you imagine being able to
walk up to the computer and say okay, computer,

00:02:23.129 --> 00:02:29.579
I want you to go to a certain webpage, I want you
to find all the images on that page that are linked

00:02:29.580 --> 00:02:38.960
from the little thumbnails, I want you to download
those to my, oops, it's giving me extra stuff.

00:02:38.960 --> 00:02:40.719
How do I get back to there?

00:02:40.719 --> 00:02:45.169
How do you do button?

00:02:45.169 --> 00:02:46.599
Button. No.

00:02:46.599 --> 00:02:47.989
Back. Button.

00:02:47.990 --> 00:02:50.510
How do you use this thing?

00:02:50.509 --> 00:02:53.239
( Laughter )

00:02:53.240 --> 00:02:57.629
>> How do you stop it from giving
me the slide preview guy down there?

00:02:57.629 --> 00:03:01.859
I don't want slide preview guy.

00:03:01.860 --> 00:03:07.950
I don't want slide preview guy, I want actual slide.

00:03:07.949 --> 00:03:09.739
Escape key.

00:03:09.740 --> 00:03:11.260
There's no escape key on here.

00:03:11.259 --> 00:03:12.359
There is on here.

00:03:12.360 --> 00:03:13.450
Interesting.

00:03:13.449 --> 00:03:15.669
Okay. So I'm talking to my computer.

00:03:15.669 --> 00:03:21.780
I say computer I want you to go to a web page, I want
you to find any linked images on there and I want you

00:03:21.780 --> 00:03:26.280
to download them to my hard drive and
then I want you to put them into iPhoto.

00:03:26.280 --> 00:03:32.560
Wouldn't it be great if you could just talk to your
computer and quickly tell it what you want it to do for you?

00:03:32.560 --> 00:03:33.819
Well, you can.

00:03:33.819 --> 00:03:38.729
Because in Tiger we created this
incredible application called Automator.

00:03:38.729 --> 00:03:43.549
And what it lets you do is create a recipe that each step

00:03:43.550 --> 00:03:50.730
of the recipe becomes an individual little
task that gets done by the computer.

00:03:50.729 --> 00:03:55.099
And these tasks are called actions.

00:03:55.099 --> 00:03:59.849
The whole recipe itself is called a workflow.

00:03:59.849 --> 00:04:04.669
And when the workflow is run by
pressing the run button, things happen.

00:04:04.669 --> 00:04:12.539
Automator executes each step of the workflow, or each action
in the workflow, passing the results of one action one

00:04:12.539 --> 00:04:16.069
to another and then what you want done gets done.

00:04:16.069 --> 00:04:22.959
In this case, it's copying images from
a website into your iPhoto library.

00:04:22.959 --> 00:04:25.349
And that's the power of Automator.

00:04:25.350 --> 00:04:28.129
And it's been very popular and very successful.

00:04:28.129 --> 00:04:31.480
As a matter of fact, a lot of people have noticed it.

00:04:31.480 --> 00:04:38.509
And it won the Eddy for Best Productivity
Software from MacWorld, which is really great.

00:04:38.509 --> 00:04:43.039
( Applause )

00:04:43.040 --> 00:04:43.520
>> Golf clap.

00:04:43.519 --> 00:04:43.959
Golf clap.

00:04:43.959 --> 00:04:46.199
That was really good.

00:04:46.199 --> 00:04:53.279
So Automator really derives its power from
the actions that you have on your computer.

00:04:53.279 --> 00:04:58.479
And naturally, the more actions that you
have, the more you can do with Automator.

00:04:58.480 --> 00:05:00.879
And that's why we're here today.

00:05:00.879 --> 00:05:07.269
Because we want you, Auto wants you and
I want you to develop Automator actions.

00:05:07.269 --> 00:05:12.759
And we think that when you see the basic
principles involved in creating an action

00:05:12.759 --> 00:05:17.670
and actually do it yourself you're going to
find that hey, this is fun, it's powerful

00:05:17.670 --> 00:05:22.900
and it's a great way for me to
express myself as a developer.

00:05:22.899 --> 00:05:26.979
So let's look at how you create Automator actions.

00:05:26.980 --> 00:05:30.879
Well, Automator actions are Xcode projects.

00:05:30.879 --> 00:05:35.019
They're built in Xcode just like all
other applications are built in Xcode,

00:05:35.019 --> 00:05:37.229
all the good applications are built in Xcode.

00:05:37.230 --> 00:05:42.460
And all the various projects that Automator
uses, which are like actions, conversion actions

00:05:42.459 --> 00:05:45.680
and definition files are create within Xcode.

00:05:45.680 --> 00:05:53.480
And because Automator actions are created in Xcode,
they can use any language or framework supported

00:05:53.480 --> 00:05:57.200
by the operating system can be part of your project.

00:05:57.199 --> 00:06:01.089
As a matter of fact, you can take all that stuff
and just kind of throw it in there if you want.

00:06:01.089 --> 00:06:02.000
It's great.

00:06:02.000 --> 00:06:04.149
It lets you be flexible.

00:06:04.149 --> 00:06:06.009
It lets you do what you want to do.

00:06:06.009 --> 00:06:11.459
If you have a skill set that involves writing objective
C, Automator actions are going to be a great way for you

00:06:11.459 --> 00:06:17.930
to express functionality of objective C. If you use
AppleScript, if you use Ruby, Python, Pearl, Shell,

00:06:17.930 --> 00:06:22.590
whatever you want to put into your
Automator action, it's available to you.

00:06:22.589 --> 00:06:26.939
And it's done through three different
templates that Xcode presents.

00:06:26.939 --> 00:06:35.810
The first template is an AppleScript based
action whose run code is simply an apple script.

00:06:35.810 --> 00:06:46.139
The next template is a Cocoa based action whose run
code is the .M.H Class stuff that Cocoa lives in.

00:06:46.139 --> 00:06:55.709
And the third template is a shell based action
whose run code is a shell command or shell script.

00:06:55.709 --> 00:07:00.219
And using each three of these templates
you can access other languages.

00:07:00.220 --> 00:07:04.930
For example, within AppleScript, you can use
the call method command to talk to frameworks,

00:07:04.930 --> 00:07:09.870
or you can use the do shell script
command to talk to the command line.

00:07:09.870 --> 00:07:15.079
Or within shell you could use an OSA
script command to send an Apple Event.

00:07:15.079 --> 00:07:21.259
And you've seen in previous sessions some remarkable new
things you can do with scripting bridge that allows Cocoa

00:07:21.259 --> 00:07:25.370
and Ruby and Python to be able to send
Apple Events to other applications.

00:07:25.370 --> 00:07:28.769
So these three templates will provide
you the tools to be able

00:07:28.769 --> 00:07:34.479
to express yourself dynamically using multiple languages.

00:07:34.480 --> 00:07:41.310
So, the interfaces for your action, or the little bit of
UI that you present to your users that have the parameters

00:07:41.310 --> 00:07:47.230
and controls on them are built using interface
builder, the same application that you're used

00:07:47.230 --> 00:07:51.810
to building native Mac OS X
applications and use standard nibs.

00:07:51.810 --> 00:07:54.280
You can add custom controls if you want.

00:07:54.279 --> 00:07:57.169
And you can also take advantage of Cocoa bindings.

00:07:57.170 --> 00:08:00.850
So you don't have to write any
kind of specialized code to be able

00:08:00.850 --> 00:08:05.439
to connect your interface into
the code of your Automator action.

00:08:05.439 --> 00:08:11.490
Some of the actions like AppleScript
and Shell use this parameter object

00:08:11.490 --> 00:08:15.340
and you declare your various parameters
that you want to use.

00:08:15.339 --> 00:08:22.679
Then you select the control and then identify which
parameter is bound to that particular control.

00:08:22.680 --> 00:08:29.900
At run time, whatever your user settings have
been, whatever the settings your customer's set

00:08:29.899 --> 00:08:32.840
in the workflow get passed your run code automatically.

00:08:32.840 --> 00:08:36.620
You don't have to do anything special to get that.

00:08:36.620 --> 00:08:39.250
Now, how to use power actions?

00:08:39.250 --> 00:08:43.600
What are some of the ways that actions can be designed?

00:08:43.600 --> 00:08:46.879
What are some of the philosophy behind creating actions?

00:08:46.879 --> 00:08:52.059
Well, one of the easiest ways to create
an action is to use Apple Events.

00:08:52.059 --> 00:08:53.129
Scripting.

00:08:53.129 --> 00:08:59.939
It's probably the most used method for creating
Automator actions because it's simple and fast,

00:08:59.940 --> 00:09:03.970
very light weight in its inter-application communication.

00:09:03.970 --> 00:09:12.420
If your action wants to talk to File Maker Pro and it wants
to talk to InDesign and it wants to talk to Aperture, well,

00:09:12.419 --> 00:09:17.299
Apple events is a great way to communicate between
those three different applications and you could put

00:09:17.299 --> 00:09:20.679
that kind of code within your Automator action.

00:09:20.679 --> 00:09:24.389
Whether using an AppleScript action
or whether using an objective C action

00:09:24.389 --> 00:09:27.080
that has the scripting bridge code in there.

00:09:27.080 --> 00:09:30.370
So that's one philosophy for creating an Automator action.

00:09:30.370 --> 00:09:32.610
Use Apple Events.

00:09:32.610 --> 00:09:35.419
Another way is to call external code sources.

00:09:35.419 --> 00:09:40.799
I mean, there's a lot of code hanging around in the OS
that you can rely on and your action can call that code

00:09:40.799 --> 00:09:43.709
and use, take advantage of, what's available.

00:09:43.710 --> 00:09:48.509
Like you might call a framework, like the address book
framework, or you might call a command line utility,

00:09:48.509 --> 00:09:55.450
like it is here, so your action could basically just be
a little bit of code that executes stuff that's already

00:09:55.450 --> 00:09:59.970
in the OS and you don't have to
write any backend code for that.

00:09:59.970 --> 00:10:01.230
It depends o what you want to do.

00:10:01.230 --> 00:10:03.840
So that's a second way.

00:10:03.840 --> 00:10:05.980
Here's another philosophy.

00:10:05.980 --> 00:10:08.920
You could add stuff into your own action.

00:10:08.919 --> 00:10:11.870
You could have your own code sources within your action.

00:10:11.870 --> 00:10:17.560
So if you have routines and functionality and
libraries that you've created of your own special stuff

00:10:17.559 --> 00:10:21.689
and your own special sauce, you want
to mix that into your action, you can.

00:10:21.690 --> 00:10:23.750
It's an Xcode project.

00:10:23.750 --> 00:10:28.809
And you could have other applications
living in your action bundle.

00:10:28.809 --> 00:10:33.049
You could have scripts living in there and you
could even have command line utilities in there.

00:10:33.049 --> 00:10:33.809
It's a bundle.

00:10:33.809 --> 00:10:38.099
Whatever you want to put in and
call internally, you could do.

00:10:38.100 --> 00:10:40.029
So there's three different ways that we just saw.

00:10:40.029 --> 00:10:45.289
You could use Apple Events as a way of communicating
to other applications or accomplishing things.

00:10:45.289 --> 00:10:52.169
You can call external code sources, you can call
internal code stuff or a combination of all of those.

00:10:52.169 --> 00:10:55.399
These are just three ideas and
philosophies that you can think

00:10:55.399 --> 00:10:59.919
about once you start designing
Automator actions for yourself.

00:10:59.919 --> 00:11:03.659
It gives you a great way to think
about how to solve a problem.

00:11:03.659 --> 00:11:05.959
With this action, I might use some Apple events.

00:11:05.960 --> 00:11:12.730
With this action I want to do a little but more
interface, I want to use some objective C. Now,

00:11:12.730 --> 00:11:15.789
once you've created your actions, how do you install them?

00:11:15.789 --> 00:11:17.459
Where do they live?

00:11:17.460 --> 00:11:21.480
Well, Automator actions live in a couple of places.

00:11:21.480 --> 00:11:24.159
The first is in libraries.

00:11:24.159 --> 00:11:32.480
Now in the system library folder
there's a folder called Automator,

00:11:32.480 --> 00:11:37.610
and that's where Apple puts the Automator
actions that ship with Automator.

00:11:37.610 --> 00:11:39.230
Now you don't want to put your stuff in there

00:11:39.230 --> 00:11:42.320
because you don't know what we're going
to do to it once it gets in there.

00:11:42.320 --> 00:11:48.750
So you're much safer putting it at the
top level library in an Automator folder.

00:11:48.750 --> 00:11:53.740
And you can also put it in the user's
library Automator folder as well.

00:11:53.740 --> 00:11:58.450
Once the actions are in there, when Automator
starts up, it'll recognize them, see them,

00:11:58.450 --> 00:12:02.879
and put it in its list of Automator
actions for the customer.

00:12:02.879 --> 00:12:07.870
The next place is you could put Automator
actions right within your own application bundle.

00:12:07.870 --> 00:12:09.769
A lot of people don't know this.

00:12:09.769 --> 00:12:14.659
But it's a great way to deliver stuff
without having to have a specialized install.

00:12:14.659 --> 00:12:19.779
Now you can still do a drag and drop install,
but also still be installing Automator actions.

00:12:19.779 --> 00:12:24.000
What you do is in the contents folder,
you create a folder called library

00:12:24.000 --> 00:12:27.179
and then within that folder you
have a folder called Automator

00:12:27.179 --> 00:12:31.659
Put your actions in there, launch services
will recognize that when your apps installed

00:12:31.659 --> 00:12:35.159
and then tell Automator hey, you've
got a new set of actions.

00:12:35.159 --> 00:12:44.179
That's the same process that Aperture uses, that
Soundtrack Pro uses, the barebones BB Edit uses.

00:12:44.179 --> 00:12:48.859
A lot of companies put their Automator
actions within their own bundle.

00:12:48.860 --> 00:12:55.110
Now if you're a third party developer and you don't have
an application, but you want to deliver a collection

00:12:55.110 --> 00:13:00.370
of all your Automator actions that's
easily updatable and definable,

00:13:00.370 --> 00:13:05.690
you can create your own little
bundle that's called an action pack.

00:13:05.690 --> 00:13:10.900
Now there's a template for this on
Automator.us, click the developer link.

00:13:10.899 --> 00:13:13.490
There's a little link for one that's already pre-done.

00:13:13.490 --> 00:13:19.470
But it's basically a small application and it
has a library folder within the contents folder

00:13:19.470 --> 00:13:21.870
and within the library folder's an Automator folder.

00:13:21.870 --> 00:13:27.590
You just take your actions, put it in that collection
and then the user takes your little action pack

00:13:27.590 --> 00:13:30.040
and keep sit on his hard drive some place.

00:13:30.039 --> 00:13:37.559
Launch services scans it, sees it and as long as that little
bundle is on the computer, Automator will see those actions.

00:13:37.559 --> 00:13:43.789
The nice thing about an action pack is to get rid of it
or update it, the user just takes the pack and puts it

00:13:43.789 --> 00:13:47.110
in the trash and then downloads the latest pack.

00:13:47.110 --> 00:13:52.139
And the action pack template that's on
Automator.us has an automatic mechanism that will go

00:13:52.139 --> 00:13:55.449
up to your website and check for a new version anyway.

00:13:55.450 --> 00:13:59.860
So that's how you deploy Automator actions.

00:13:59.860 --> 00:14:07.830
To summarize, Automator actions use any
language or framework supported by Xcode.

00:14:07.830 --> 00:14:09.310
There's three different templates.

00:14:09.309 --> 00:14:16.759
There's an Apple template, an Objective
C template and a Shell Script template.

00:14:16.759 --> 00:14:23.840
And for design strategies, you can use scripting or
Apple Events, you can call external code sources,

00:14:23.840 --> 00:14:28.750
you can call internal code sources
or any combination of those.

00:14:28.750 --> 00:14:30.629
So that's pretty much correct.

00:14:30.629 --> 00:14:32.370
Guys? Come on, nod.

00:14:32.370 --> 00:14:33.779
Okay. That's my team over there.

00:14:33.779 --> 00:14:34.470
They're going huh?

00:14:34.470 --> 00:14:37.340
What? I didn't know that.

00:14:37.340 --> 00:14:40.070
So we're going to build stuff.

00:14:40.070 --> 00:14:43.810
Instead of talking about it we're
going to actually build stuff.

00:14:43.809 --> 00:14:45.679
Not quite yet.

00:14:45.679 --> 00:14:49.139
A couple of more slides.

00:14:49.139 --> 00:14:51.350
I appreciate your thought there, though.

00:14:51.350 --> 00:14:53.350
So we're going to build stuff.

00:14:53.350 --> 00:15:00.379
And what we're going to do is we're
going to create some Automator actions,

00:15:00.379 --> 00:15:04.840
three different actions, for a image processing workflow.

00:15:04.840 --> 00:15:17.370
Cool. And each action, the workflow will start, we'll take
some images from my Mac Mania 4.5 trip to the Mediterranean

00:15:17.370 --> 00:15:24.029
and then the next action will find images that have
been key worded with a certain spotlight key word.

00:15:24.029 --> 00:15:29.309
And then the next action we're going to create is
called select images that'll support a wonderful,

00:15:29.309 --> 00:15:40.349
beautiful image kit kind of window with floating pudness and
you'll be able to select the images that you want to process

00:15:40.350 --> 00:15:45.360
in that window and then we're going to
create an Automator action in AppleScript

00:15:45.360 --> 00:15:50.090
that will convert the images to a letterbox format.

00:15:50.090 --> 00:15:55.340
So instead of being your standard four by
three it's going to be your 16 by nine.

00:15:55.340 --> 00:16:00.370
And then it will open up all of
the convert3ed images into preview.

00:16:00.370 --> 00:16:02.639
Pretty cool little workflow, right?

00:16:02.639 --> 00:16:06.319
So the first action we're going to
create is called find images by keyword.

00:16:06.320 --> 00:16:08.680
It will be a shell script action.

00:16:08.679 --> 00:16:12.389
You like my Nabiscoesk kind of thing here, right?

00:16:12.389 --> 00:16:14.740
My little touch.

00:16:14.740 --> 00:16:17.289
The next action will be called select images.

00:16:17.289 --> 00:16:24.299
It will be a Cocoa based action and it presents
this nice little UI that you've seen before.

00:16:24.299 --> 00:16:29.919
And then the third action is an Apple Script action
where the user has a choice of whether they want

00:16:29.919 --> 00:16:35.809
to make their image a letterbox format
by padding it or by cropping it.

00:16:35.809 --> 00:16:40.399
And the final result will be wonderful
images like this of Corsica,

00:16:40.399 --> 00:16:44.000
that's actually named sunset, but
it's four o'clock in the morning.

00:16:44.000 --> 00:16:45.389
That's sunrise.

00:16:45.389 --> 00:16:50.649
Apparently I was messed up so I thought it was the sunset.

00:16:50.649 --> 00:16:52.819
Let's not talk about that.

00:16:52.820 --> 00:16:54.200
It's like a month of therapy.

00:16:54.200 --> 00:16:58.830
Okay. So let's go over here and build some stuff.

00:16:58.830 --> 00:17:04.660
By now you've gone to the Automator.us, thank you,
you've gone to the Automator.us site or the Apple site

00:17:04.660 --> 00:17:16.220
that was listed in the URL and you've downloaded your
little set of files called WWDC Session 206 projects.

00:17:16.220 --> 00:17:23.190
And within the folder that you downloaded there,
you'll notice that in red there are three projects.

00:17:23.190 --> 00:17:27.440
And in green there are the same
three projects, but they're done.

00:17:27.440 --> 00:17:35.490
So, if something goes wrong and we
can't create them, we've got backup.

00:17:35.490 --> 00:17:41.000
And in addition there's a folder that
says put contents in user library.

00:17:41.000 --> 00:17:45.109
That's in case my backup goes wrong,
these are the completed actions

00:17:45.109 --> 00:17:48.639
that we just shove off in there, we look like we're heroes.

00:17:48.640 --> 00:17:52.120
There's also a zipped file called demo images.

00:17:52.119 --> 00:17:56.889
I'm going to copy that to my desktop
here and I'm going to unpack that.

00:17:56.890 --> 00:18:06.970
And there's a folder called demo images and if we open
it up and set the viewing preferences here to like that,

00:18:06.970 --> 00:18:16.150
and they go like this, then you have a nice little,
let's make it arrange by name, very good, okay,

00:18:16.150 --> 00:18:22.830
then you have a set of demo images that we're
going to be using today to do some processing.

00:18:22.829 --> 00:18:25.730
So everybody ready to begin?

00:18:25.730 --> 00:18:28.349
Okay. Is this semi interesting?

00:18:28.349 --> 00:18:29.299
All right.

00:18:29.299 --> 00:18:31.980
Good. I just want to make sure you're there.

00:18:31.980 --> 00:18:34.069
So we're going to open up the first project.

00:18:34.069 --> 00:18:38.970
It's called find images by keyword.

00:18:38.970 --> 00:18:39.460
And you know what?

00:18:39.460 --> 00:18:45.630
I'm going to set this thing to be
globally, use that as the default

00:18:45.630 --> 00:18:50.890
because it just makes it a lot
easier and neater to do it that way.

00:18:50.890 --> 00:18:55.280
And while I'm at it I'm going to
grab a little cheat sheet here.

00:18:55.279 --> 00:19:02.649
Yes. You're seeing Sal use a cheat sheet just
in case I can't remember the name of a variable.

00:19:02.650 --> 00:19:04.769
Okay. So there's our project file.

00:19:04.769 --> 00:19:07.710
Let's double click that.

00:19:07.710 --> 00:19:12.380
And this opens it up in wonderful Xcode, who we love.

00:19:12.380 --> 00:19:15.100
It's getting better with each incarnation.

00:19:15.099 --> 00:19:19.509
We really enjoy using it more and more every day.

00:19:19.509 --> 00:19:24.019
That was a nod to Tim, the project manager.

00:19:24.019 --> 00:19:27.200
Now let's look at what's in an action project.

00:19:27.200 --> 00:19:34.350
So over here under action group and files, you'll
see the first folder is one called scripts.

00:19:34.349 --> 00:19:40.969
Now this scripts folder will exist if your
project is an AppleScript based project

00:19:40.970 --> 00:19:44.210
or a Shell Script based project, you'll have this folder.

00:19:44.210 --> 00:19:51.019
Now if it's a shell based project, you'll see
this thing called main command and that's your,

00:19:51.019 --> 00:19:54.509
basically your shell command, and
that's what it looks like right there.

00:19:54.509 --> 00:19:57.539
And we're going to go over that and explain it.

00:19:57.539 --> 00:20:02.490
Then you'll see that there's a
resources folder that contains your nib.

00:20:02.490 --> 00:20:10.529
And info p.strings file, and this file
contains the localized descriptions

00:20:10.529 --> 00:20:12.559
that go along with an Automator action.

00:20:12.559 --> 00:20:19.639
You can pretty much field out most of this kind of
stuff because it's boring, but I make it easier for you.

00:20:19.640 --> 00:20:28.770
And then down here, there's a target and this will be
the final Automator action once we complete building

00:20:28.769 --> 00:20:30.170
the project.

00:20:30.170 --> 00:20:34.100
Now let's take a look and we'll
look at this code here first.

00:20:34.099 --> 00:20:38.309
And I'll start there and just kind of
walk you through what this is about.

00:20:38.309 --> 00:20:45.559
Now since this is a shell script based
action, how many in here are shell writers?

00:20:45.559 --> 00:20:46.659
Oh, the cool people.

00:20:46.660 --> 00:20:49.360
And how many in here are the Objective-C guys?

00:20:49.359 --> 00:20:53.039
And how many in here are AppleScripters?

00:20:53.039 --> 00:20:54.909
Say it loud, say it proud.

00:20:54.910 --> 00:20:58.850
Okay. So we have a nice mix in here of everybody.

00:20:58.849 --> 00:21:03.609
So I don't expect you, if you're not
used to shell, to understand what it is,

00:21:03.609 --> 00:21:07.729
but I'll walk you through this command
up here and just explain what it does.

00:21:07.730 --> 00:21:16.890
So the way that information is passed to an
action is Automator takes the results of an action

00:21:16.890 --> 00:21:21.160
that precedes your action and passes that to your action.

00:21:21.160 --> 00:21:27.759
In this case, we're looking for
references to files or a folder.

00:21:27.759 --> 00:21:30.869
And that will be passed to this action by Automator.

00:21:30.869 --> 00:21:36.639
This reference will be in the shape
of like a POSIX path.

00:21:36.640 --> 00:21:43.009
So the first thing we'll be doing in
this command, in this little script here,

00:21:43.009 --> 00:21:47.970
is to iterate the list of paths that is passed to it.

00:21:47.970 --> 00:21:53.190
Now this comes from standard in, for those
that know shell, it will be in standard in.

00:21:53.190 --> 00:22:01.769
so you'll see a command here while read, and then a variable
called folder path do and what that's doing is it will go

00:22:01.769 --> 00:22:10.710
through each paragraph of the list of folders that's
passed to it and do this process with that list.

00:22:10.710 --> 00:22:15.829
MD find is a shell command that was introduced in Tiger.

00:22:15.829 --> 00:22:17.970
MD find is for Meta data.

00:22:17.970 --> 00:22:20.920
It's the spotlight command line tool.

00:22:20.920 --> 00:22:28.440
And so it's going to only look in the fo9lder
that is passed from the previous action.

00:22:28.440 --> 00:22:32.200
And then it's going to perform
this little weird looking thing.

00:22:32.200 --> 00:22:40.670
This is called, right here, where
item content type is a public JPEG.

00:22:40.670 --> 00:22:46.039
All that's saying is I'm looking for
anything in this folder that's an image,

00:22:46.039 --> 00:22:54.039
that's a JPEG or it's a TIFF or it's a PNG file.

00:22:55.539 --> 00:23:04.639
In addition to that, plus, plus, I'm looking for
an image that has a key word and this is a way

00:23:04.640 --> 00:23:08.590
of indicating a parameter that will be passed to it.

00:23:08.589 --> 00:23:12.799
This is a variable that will come
from the environment variables.

00:23:12.799 --> 00:23:18.049
So this is what we're going to get from the user
when they enter in the name of their keyword.

00:23:18.049 --> 00:23:21.539
It's going to be replaced automatically during runtime.

00:23:21.539 --> 00:23:29.000
This dollar sign bracket keyword string is going to
be replaced by whatever the user has typed in there.

00:23:29.000 --> 00:23:31.720
So that's our basic run code script.

00:23:31.720 --> 00:23:35.019
A simple, single line, but a very powerful command

00:23:35.019 --> 00:23:39.299
that invokes the entire spotlight
architecture to do it's magic for you.

00:23:39.299 --> 00:23:41.460
Oh, that was good.

00:23:41.460 --> 00:23:42.269
I liked that one.

00:23:42.269 --> 00:23:48.970
Okay. So the next thing that we're going to do is now that
we've seen what the run code looks like is we're going

00:23:48.970 --> 00:23:54.430
to create a user interface that
appears in the Automator workflow area

00:23:54.430 --> 00:23:57.570
when the user drags this action into the workflow.

00:23:57.569 --> 00:24:05.720
To do that we're going to double click the main.nib in the
resources folder from the groups and files on the left.

00:24:05.720 --> 00:24:12.210
Doing so, grab the peanut butter with your right hand,
with your left hand turn the jar counter clockwise.

00:24:12.210 --> 00:24:17.650
So what this does is it launches
Interface Builder, which has a totally new,

00:24:17.650 --> 00:24:21.900
redesigned look to it, a different kind of functionality.

00:24:21.900 --> 00:24:23.040
I'm getting used to it.

00:24:23.039 --> 00:24:25.240
I'm starting to like it.

00:24:25.240 --> 00:24:28.380
It's that kind of a thing, you
know, we're creatures of habit.

00:24:28.380 --> 00:24:34.560
So you'll see I just selected over here is your document
window with the various kinds of instances in it.

00:24:34.559 --> 00:24:40.089
You'll see there's a parameter object
up there and there's also a view.

00:24:40.089 --> 00:24:42.299
And this is the view.

00:24:42.299 --> 00:24:47.369
The view is the action view as UI to the user.

00:24:47.369 --> 00:24:55.059
And on this view you place your controls that you want
to interact and present the various options to your user.

00:24:55.059 --> 00:25:06.500
So since we're doing an action that demands text
input, we're going to have a text field on this view

00:25:06.500 --> 00:25:09.990
that the user can type in the keyword that they want to use.

00:25:09.990 --> 00:25:19.849
Now if I type in here like text, you can see that it
shows up a variety of different kinds of text fields.

00:25:19.849 --> 00:25:25.709
There's your basic text field, here's a
secure text field, here's a text field cell.

00:25:25.710 --> 00:25:34.730
But one of the new features of Automator in Leopard is
that we now have this thing called workflow variables,

00:25:34.730 --> 00:25:43.049
where the user can take these either predefined or user
defined variables and drag them into text field so that

00:25:43.049 --> 00:25:47.200
that content changes dynamically as the workflow is run.

00:25:47.200 --> 00:25:50.160
Now those aren't your standard text field.

00:25:50.160 --> 00:25:52.040
They're called token fields.

00:25:52.039 --> 00:25:56.990
So I'm going to go down to my little
search here and type in the word token.

00:25:56.990 --> 00:26:00.700
And you'll see I have two options.

00:26:00.700 --> 00:26:05.440
The one on the left with the little gel
in it, that's a standard token field.

00:26:05.440 --> 00:26:10.700
You'll find that in like the date and time
system preference for when you can drag

00:26:10.700 --> 00:26:12.799
in the formatting kind of things you want.

00:26:12.799 --> 00:26:14.809
That's only takes tokens.

00:26:14.809 --> 00:26:20.169
We want a special kind of text field that will
take either text or tokens and it's to the right

00:26:20.170 --> 00:26:24.029
and it's called an Automator token field.

00:26:24.029 --> 00:26:26.680
And we can't really afford a description yet.

00:26:26.680 --> 00:26:32.060
We're hoping that we can get some resources
from above to be able to put in a description.

00:26:32.059 --> 00:26:39.960
So we're going to take that and add it to our view by just
simply dragging it over and letting it go on the view.

00:26:39.960 --> 00:26:47.509
Now once you've done that, you can bring up the
inspector for that, the attributes inspector

00:26:47.509 --> 00:26:53.490
by just typing command one or by just selecting it from the
tools menu like I'm doing now, and this brings up this new,

00:26:53.490 --> 00:26:59.579
unified palette for getting all the various
information about that particular text field,

00:26:59.579 --> 00:27:02.799
being able to set it's various attributes and qualities.

00:27:02.799 --> 00:27:09.230
And one of the things that you'll notice here is
if you select the ruler that's your size inspector,

00:27:09.230 --> 00:27:13.349
you'll notice that the control is already preset for small.

00:27:13.349 --> 00:27:20.619
By default, Automator guidelines suggest that you use
small controls in designing your Automator actions,

00:27:20.619 --> 00:27:26.369
and that's because vertical space is at a premium and
you want to be able to use up, you don't want to cram it

00:27:26.369 --> 00:27:29.479
in there so it's ugly, but you
want to be able to be conservative

00:27:29.480 --> 00:27:33.160
in how you use vertical space in designing your action.

00:27:33.160 --> 00:27:36.540
So we do it for you by presetting it to small.

00:27:36.539 --> 00:27:37.740
Now watch this.

00:27:37.740 --> 00:27:45.210
You can see the wonder of Interface Builder in
my shaky hand that as I move it over here closer,

00:27:45.210 --> 00:27:50.500
it lines up on the baseline and then once I get
a certain distance from the label, it stops,

00:27:50.500 --> 00:27:55.190
there's a little vertical line that appears so
that you're following the interface guidelines

00:27:55.190 --> 00:27:59.009
for the distance between a text label and the control.

00:27:59.009 --> 00:28:03.019
And then we'll take our text field and
expand it out to about the edge of there.

00:28:03.019 --> 00:28:05.910
I think that's big enough for a keyword.

00:28:05.910 --> 00:28:08.130
So there's our user interface.

00:28:08.130 --> 00:28:16.340
We have a little text label with a text field and now what
we need to do is declare a parameter that can get bound

00:28:16.339 --> 00:28:21.369
to the text field and that parameter
will then get passed to our code.

00:28:21.369 --> 00:28:28.079
Now you remember that in the source code over here, you can
see I have selected and conveniently left off to the right

00:28:28.079 --> 00:28:31.139
of that screen over there, wasn't that class?

00:28:31.140 --> 00:28:33.310
It is the name of our parameter.

00:28:33.309 --> 00:28:36.829
Keyword inter cap string.

00:28:36.829 --> 00:28:39.519
That's what we're going to use as our parameter.

00:28:39.519 --> 00:28:42.269
And to declare a parameter in Interface
Builder, it's really easy.

00:28:42.269 --> 00:28:48.089
You just select the parameter's object, go to
your inspector palette, click the first tab there

00:28:48.089 --> 00:28:51.179
at the top and that's your attributes inspector.

00:28:51.180 --> 00:28:56.460
And right here will be a list of all the
parameter keys that you want to declare.

00:28:56.460 --> 00:28:58.680
There's a plus button at the bottom.

00:28:58.680 --> 00:28:59.360
Enter that.

00:28:59.359 --> 00:29:02.990
And then your new model key will
be put, entered right there.

00:29:02.990 --> 00:29:04.710
It's pre-selected for you.

00:29:04.710 --> 00:29:06.630
So type in exactly the same way.

00:29:06.630 --> 00:29:11.150
Keyword inter cap string.

00:29:11.150 --> 00:29:14.019
Keyword inter cap string.

00:29:14.019 --> 00:29:15.879
And then click someplace.

00:29:15.880 --> 00:29:17.940
So that's our parameter.

00:29:17.940 --> 00:29:21.130
That's what we're going to bind to the text field.

00:29:21.130 --> 00:29:24.630
Now to bind it to the text field it's pretty simple.

00:29:24.630 --> 00:29:26.830
You can just select your text field.

00:29:26.829 --> 00:29:31.960
And then in your attributes, your
inspector palette, the fourth one,

00:29:31.960 --> 00:29:36.069
with the little green circle and box is bindings.

00:29:36.069 --> 00:29:40.369
If you click that, these are all the
possible bindings that you can do

00:29:40.369 --> 00:29:44.609
to that particular text field, or token field in this case.

00:29:44.609 --> 00:29:46.699
The first one is the one we want.

00:29:46.700 --> 00:29:52.660
Value. Select that and it will
disclose itself automatically for you.

00:29:52.660 --> 00:30:00.910
And the first thing we do is say there's a check box, we
want to bind that to the parameters object and the model key

00:30:00.910 --> 00:30:06.300
that we're looking for will appear in
a pop down list for you automatically.

00:30:06.299 --> 00:30:13.509
Select keyword string and now that
will be bound to that text field.

00:30:13.509 --> 00:30:14.529
Here's a tip though.

00:30:14.529 --> 00:30:20.899
Anytime you're doing text fields, they
don't really take what you put into them

00:30:20.900 --> 00:30:25.220
until you start to run and sometimes it gets messed up.

00:30:25.220 --> 00:30:27.380
So there's a nice little option down here.

00:30:27.380 --> 00:30:29.850
It says continuously updates value.

00:30:29.849 --> 00:30:31.259
Select that.

00:30:31.259 --> 00:30:36.509
And that way, once the user types, it won't
accidentally delete that if they tab out of it

00:30:36.509 --> 00:30:39.150
or something else, it'll get their value.

00:30:39.150 --> 00:30:40.030
So here we are.

00:30:40.029 --> 00:30:42.069
We're bound to the parameters object.

00:30:42.069 --> 00:30:44.799
Keyword dot keyword inter cap string.

00:30:44.799 --> 00:30:47.309
And we're continuously updates value.

00:30:47.309 --> 00:30:49.129
That's our user interface.

00:30:49.130 --> 00:30:56.580
We save and we can quit Interface
Builder and go back to Xcode.

00:30:56.579 --> 00:30:57.710
That's our UI.

00:30:57.710 --> 00:31:01.700
So we have run code and UI.

00:31:01.700 --> 00:31:06.690
There's one other thing that we need to do
is to let our target know about all of this.

00:31:06.690 --> 00:31:11.210
Select your target, which you can
disclose here with the little triangle,

00:31:11.210 --> 00:31:16.420
select that and hit the info button on the Xcode tool bar.

00:31:16.420 --> 00:31:20.759
And this brings up all the information
about your planned action.

00:31:20.759 --> 00:31:23.150
General, any kind of build properties.

00:31:23.150 --> 00:31:24.180
Blah blah blah.

00:31:24.180 --> 00:31:26.299
Rules, nah, we're not interested.

00:31:26.299 --> 00:31:27.379
Properties.

00:31:27.380 --> 00:31:29.880
Properties is what we want to go to.

00:31:29.880 --> 00:31:33.800
So the first one up at the very top is important.

00:31:33.799 --> 00:31:35.430
It's a unique identifier.

00:31:35.430 --> 00:31:37.640
It's the bundle identifier for it.

00:31:37.640 --> 00:31:40.280
And there's different formats for doing that,

00:31:40.279 --> 00:31:50.339
but probably the best way probably is
com.yourcompany.automator.mushednameofaction is probably the

00:31:50.339 --> 00:31:54.349
best identifier that you cold use
and it's an appropriate way.

00:31:54.349 --> 00:32:00.659
So you want to identify that's the way
that Automator keeps track of your action.

00:32:00.660 --> 00:32:03.160
It doesn't go by the name, it goes by your identifier.

00:32:03.160 --> 00:32:04.120
And then a version.

00:32:04.119 --> 00:32:09.899
If you've revved, if you've already built this
one before and now this is the new improved 2.0,

00:32:09.900 --> 00:32:12.670
then you would put the new improved 2.0 there.

00:32:12.670 --> 00:32:20.650
And down here on the pop up is where you can get various
and input various information about your Automator action.

00:32:20.650 --> 00:32:22.240
And this is important.

00:32:22.240 --> 00:32:27.579
Under the general category you'll see
that there's one for name and this is

00:32:27.579 --> 00:32:31.009
where you'll enter the name of the
action as you want it to appear.

00:32:31.009 --> 00:32:35.519
And there's also one for application.

00:32:35.519 --> 00:32:39.700
Is there an application that you
want to associate this action with?

00:32:39.700 --> 00:32:46.190
In this case we're just using preview, although we're not
doing anything with preview we like associating with preview

00:32:46.190 --> 00:32:49.690
because it fits well within the photo world.

00:32:49.690 --> 00:32:56.250
And for category, we want to us AM
category photos and all that's inter capped.

00:32:56.250 --> 00:33:02.329
And there's a list of all the carious categories
that Automator uses on the documentation site

00:33:02.329 --> 00:33:04.779
for building Automator actions on the Apple website.

00:33:04.779 --> 00:33:06.730
Did I get that right Emily?

00:33:06.730 --> 00:33:09.380
Okay. She reminded me about that.

00:33:09.380 --> 00:33:11.630
And then finally the icon name.

00:33:11.630 --> 00:33:15.260
Where will Automator draw the icon from?

00:33:15.259 --> 00:33:17.879
Will it use an existing app like Preview?

00:33:17.880 --> 00:33:26.630
Or if you have a custom icon you would add that to your
project and put it's file name in there and it will see it.

00:33:26.630 --> 00:33:29.310
The next thing in the list is input.

00:33:29.309 --> 00:33:33.049
Okay? What kind of data does your action expect to get?

00:33:33.049 --> 00:33:38.180
You have to tell Automator what kind of,
the format that you want your information.

00:33:38.180 --> 00:33:43.810
Because Automator will do the conversion between different
data types for you, if you tell it what you want.

00:33:43.809 --> 00:33:50.089
And in this case we're saying give me just a plain
Cocoa string, which is like a POSIX path.

00:33:50.089 --> 00:33:51.919
That's what I expect.

00:33:51.920 --> 00:33:57.590
And when I'm done I'm going to go to the
next one and say I'm going to give that back.

00:33:57.589 --> 00:34:03.569
That's the kind of data I'm going to pass back,
is another Cocoa string when I'm completed.

00:34:03.569 --> 00:34:07.609
Sometimes actions might pass back
a totally different kind of thing.

00:34:07.609 --> 00:34:14.509
Like if you're action generates an object within an
application, you might pass back an object reference to that

00:34:14.510 --> 00:34:18.270
within the application even though
you took a file in as input.

00:34:18.269 --> 00:34:23.880
So this is how you tell Automator how
to treat your action when it's using it.

00:34:23.880 --> 00:34:26.470
Then there is your parameters.

00:34:26.469 --> 00:34:29.579
And this is where we want to add a parameter.

00:34:29.579 --> 00:34:32.960
And guess what the parameter name is?

00:34:32.960 --> 00:34:43.360
Keyword inter cap string and there's a pop up is
it's value of string integer Boolean real or other?

00:34:43.360 --> 00:34:44.730
It's going to be a string.

00:34:44.730 --> 00:34:47.990
We don't have any default value we're going
to use, we're just going to leave it empty.

00:34:47.989 --> 00:34:53.169
But if you had placed a word in there that
would show up in the text field automatically

00:34:53.170 --> 00:34:56.200
when Automator drew the action view for you.

00:34:56.199 --> 00:35:00.509
So there are also settings in here for required resources.

00:35:00.510 --> 00:35:02.970
Are there any warnings you want to post to the user?

00:35:02.969 --> 00:35:06.889
Are their keywords that you want
your action to be searched by?

00:35:06.889 --> 00:35:11.940
Is there a description and are there other
actions that are related to this one,

00:35:11.940 --> 00:35:15.659
like if you like this action you
might like this one instead?

00:35:15.659 --> 00:35:18.960
And so that's pretty much what we're going to set in there.

00:35:18.960 --> 00:35:21.670
Close that.

00:35:21.670 --> 00:35:25.309
And I think we are ready.

00:35:25.309 --> 00:35:26.079
Nervousness.

00:35:26.079 --> 00:35:27.880
Did I kill the goat this morning?

00:35:27.880 --> 00:35:31.559
We're going to click build and go.

00:35:31.559 --> 00:35:35.750
Na na na na na na na.

00:35:35.750 --> 00:35:38.980
Na na na na na na.

00:35:38.980 --> 00:35:40.449
Na na na na.

00:35:40.449 --> 00:35:41.139
Op, there he is.

00:35:41.139 --> 00:35:44.349
Okay. And then Automator will launch.

00:35:44.349 --> 00:35:52.880
What build and go does is it secretly puts the
Automator action into a place where Automator can see it

00:35:52.880 --> 00:35:55.019
and it loads it up without actually installing it.

00:35:55.019 --> 00:35:56.289
It's kind of tricky.

00:35:56.289 --> 00:36:02.529
So Automator starts up and the first thing you see is
that we have this new wonderful starting points feature.

00:36:02.530 --> 00:36:07.540
For people that aren't used to using
Automator, it's a great way to get started.

00:36:07.539 --> 00:36:11.710
It guides you to creating your
first initial step in the work flow.

00:36:11.710 --> 00:36:14.059
Like do I want to work with files and folders?

00:36:14.059 --> 00:36:15.279
Do I want to work with audio things?

00:36:15.280 --> 00:36:16.820
And we're working with photos.

00:36:16.820 --> 00:36:19.980
We're just going to click custom and go choose.

00:36:19.980 --> 00:36:22.860
And it will just leave us a blank workflow.

00:36:22.860 --> 00:36:26.170
And for our purposes, we're going to turn that off by going

00:36:26.170 --> 00:36:29.440
over to the Automator menu and
choose disable starting points.

00:36:29.440 --> 00:36:33.159
Since we're going to be using this in
testing, we don't need to keep doing that.

00:36:33.159 --> 00:36:37.069
Now, let's see if this will actually work.

00:36:37.070 --> 00:36:45.240
I'm going to go to the finder, to my desktop, I'll
actually open up a new finder window to do this,

00:36:45.239 --> 00:36:49.599
and drag the folder demo images into the workflow area.

00:36:49.599 --> 00:36:53.519
Yes. Just wantonly drag it into the workflow area

00:36:53.519 --> 00:37:02.969
and Automator will automatically create a new get specified
finders action containing our dragged in item and the result

00:37:02.969 --> 00:37:07.529
of this action will be a path to that particular item.

00:37:07.530 --> 00:37:09.450
We don't care what format that it's in.

00:37:09.449 --> 00:37:11.000
it might be an alias reference.

00:37:11.000 --> 00:37:13.199
It might be a finder item reference.

00:37:13.199 --> 00:37:14.579
We don't particularly care.

00:37:14.579 --> 00:37:16.730
Automator will handle the rest.

00:37:16.730 --> 00:37:21.619
Let's go up to our search field here and type in keyword.

00:37:21.619 --> 00:37:27.299
I barely got through key and it says find images by keyword.

00:37:27.300 --> 00:37:31.560
Drag that in and let go at the end of our workflow.

00:37:31.559 --> 00:37:34.429
So here's our newly created action.

00:37:34.429 --> 00:37:37.029
It gets us an input.

00:37:37.030 --> 00:37:43.269
A POSIX path from the previous
action identifying a particular folder.

00:37:43.269 --> 00:37:49.170
And then we're going to just enter
in here the word Mac Mania.

00:37:49.170 --> 00:38:00.340
It's, for those that don't know, okay, it looks like that.

00:38:00.340 --> 00:38:06.010
M A C capital M A N I A. macMania.

00:38:06.010 --> 00:38:08.290
That's from geekcruises.com.

00:38:08.289 --> 00:38:10.639
there's my shameless plug.

00:38:10.639 --> 00:38:13.349
Okay. So now we're ready to run our workflow.

00:38:13.349 --> 00:38:18.650
Click the run button and something happened.

00:38:18.650 --> 00:38:20.250
Where do we see the results?

00:38:20.250 --> 00:38:24.880
Well we have these new, wonderful inline
data views within Automator actions.

00:38:24.880 --> 00:38:28.880
There's actually a result gel right
here at the bottom of our action view.

00:38:28.880 --> 00:38:47.130
You can click that, um, okay.

00:38:47.130 --> 00:38:51.039
This is where we switch to plan two.

00:38:51.039 --> 00:38:52.570
All right.

00:38:52.570 --> 00:38:59.100
It would return a list of all the various images
in there that have been key worded with macMania.

00:38:59.099 --> 00:39:02.039
Not to fear we know it'll work.

00:39:02.039 --> 00:39:08.389
So just quit Automator and go to the finder.

00:39:08.389 --> 00:39:15.440
Choose new and let's go to the user library folder.

00:39:15.440 --> 00:39:20.860
And within this folder we're going
to create a folder called Automator.

00:39:20.860 --> 00:39:22.000
New folder.

00:39:22.000 --> 00:39:22.849
Automator.

00:39:22.849 --> 00:39:36.969
And you'll see it appear up here and we're going
to open that up and then go back to our files

00:39:36.969 --> 00:39:38.589
Let's go back up here.

00:39:38.590 --> 00:39:40.650
Session projects.

00:39:40.650 --> 00:39:44.280
And I'm going to open up put contents in user library.

00:39:44.280 --> 00:39:45.080
Automator.

00:39:45.079 --> 00:39:51.630
And drag in the find images by
keyword action into the workflow area.

00:39:51.630 --> 00:39:56.900
Okay. Now let's launch Automator again.

00:39:56.900 --> 00:40:01.809
And what is the shortcut for doing that?

00:40:01.809 --> 00:40:04.960
Let's just go to applications and Auto's right on the top.

00:40:04.960 --> 00:40:06.920
Let's keep them in the dock.

00:40:06.920 --> 00:40:08.329
All right.

00:40:08.329 --> 00:40:11.139
Now let's try this whole thing again and see if it'll work.

00:40:11.139 --> 00:40:20.400
So I'm going to drag in the folder, then I'm
going to go keyword, find images by key word.

00:40:20.400 --> 00:40:23.430
And then type in macMania.

00:40:23.429 --> 00:40:27.529
And run it.

00:40:27.530 --> 00:40:32.550
And then check the results.

00:40:33.710 --> 00:40:38.480
Okay. Backup plan's not working.

00:40:38.480 --> 00:40:39.670
All right.

00:40:39.670 --> 00:40:43.280
Well, we'll continue on and find
out later what's going on here.

00:40:43.280 --> 00:40:44.230
Let's make sure though.

00:40:44.230 --> 00:40:46.159
Let's check our script.

00:40:46.159 --> 00:40:48.599
Let's look at the code.

00:40:48.599 --> 00:40:53.139
Keyword string, I'm going to copy
that just to make sure I did it right.

00:40:53.139 --> 00:41:00.619
Let's go over here to my nib and
select my parameter, type command one

00:41:00.619 --> 00:41:02.799
and make sure that that's what I entered in there.

00:41:02.800 --> 00:41:10.010
It is. I'm going to select this up here and I'm
going to choose my bindings and value parameters,

00:41:10.010 --> 00:41:13.640
bind to parameters keyword string is correct.

00:41:13.639 --> 00:41:15.210
Continuously updates results.

00:41:15.210 --> 00:41:17.440
Save. Okay.

00:41:17.440 --> 00:41:24.200
And quit. And I think we're done about everything
except for go over here and select that.

00:41:24.199 --> 00:41:30.329
And choose our parameters, keyword
string looks like it's there.

00:41:30.329 --> 00:41:31.969
It looks fine.

00:41:31.969 --> 00:41:32.959
Yep. That's it.

00:41:32.960 --> 00:41:43.179
String. Oh, the images, I believe, are still key worded,
unless they got munched in the download, which is possible.

00:41:43.179 --> 00:41:46.699
Okay. Let me try this again.

00:41:46.699 --> 00:41:51.819
I'll try one more time here just in case.

00:41:51.820 --> 00:41:54.580
In Auto, you're running.

00:41:54.579 --> 00:41:55.699
Let's go to finder.

00:41:55.699 --> 00:42:00.199
Drag in my images folder.

00:42:00.199 --> 00:42:02.719
And then go keyword.

00:42:06.409 --> 00:42:09.409
And type in macMania.

00:42:12.170 --> 00:42:15.400
Hi a return on that, just in case.

00:42:15.400 --> 00:42:16.160
Make it work.

00:42:16.159 --> 00:42:18.039
Go. All right.

00:42:18.039 --> 00:42:21.480
Results. And nothing.

00:42:21.480 --> 00:42:24.369
Okay. Well enough of that.

00:42:24.369 --> 00:42:26.059
They're key worded in the image itself.

00:42:26.059 --> 00:42:31.110
And if you get the info window
here, you'll see that more info.

00:42:31.110 --> 00:42:45.470
Okay. How did the keywords get taken out of the images?

00:42:46.739 --> 00:42:47.469
Okay. Yes.

00:42:47.469 --> 00:42:48.149
Good idea.

00:42:48.150 --> 00:42:49.630
Thank you.

00:42:49.630 --> 00:42:53.570
And let's look for the word macMania.

00:42:54.909 --> 00:42:59.960
Ah! Okay. Well then let's do the next best thing.

00:42:59.960 --> 00:43:01.170
So we actually were right.

00:43:01.170 --> 00:43:09.329
Let's select all the images and select this,
go to tools, inspector, sorry about this.

00:43:09.329 --> 00:43:10.199
Click on that.

00:43:10.199 --> 00:43:12.750
Op, they are key worded.

00:43:12.750 --> 00:43:15.769
Spotlight doesn't know about them.

00:43:15.769 --> 00:43:20.369
Why not? Ah.

00:43:20.369 --> 00:43:25.329
Let's take these guys and duplicate them.

00:43:25.329 --> 00:43:27.489
Now let's see if Spotlight recognized them.

00:43:27.489 --> 00:43:29.019
Sorry about that.

00:43:29.019 --> 00:43:32.989
That's a bug, isn't it?

00:43:32.989 --> 00:43:34.909
No. okay. That's okay.

00:43:34.909 --> 00:43:36.789
We can bypass this action anyway.

00:43:36.789 --> 00:43:37.130
it's all right.

00:43:37.130 --> 00:43:39.030
But you get the idea.

00:43:39.030 --> 00:43:40.440
We didn't do anything wrong.

00:43:40.440 --> 00:43:42.159
It's not our fault.

00:43:42.159 --> 00:43:44.879
That's the important thing I've
learned in product management.

00:43:44.880 --> 00:43:47.360
It's not my fault.

00:43:48.380 --> 00:43:49.650
(laughter) okay.

00:43:49.650 --> 00:43:55.210
So, that's building an action with the shell command.

00:43:55.210 --> 00:44:01.880
Let's hope that it gets better when we go to Objective
C. so the net action we're going to build is going

00:44:01.880 --> 00:44:09.950
to take whatever gets found and then present it to the user
so that the user can select which images can be processed.

00:44:09.949 --> 00:44:16.769
And to do that, we're going to cross our
fingers and open up the selected images project.

00:44:16.769 --> 00:44:19.090
At this point, I will drink water.

00:44:19.090 --> 00:44:24.480
It happens to the best of us.

00:44:24.480 --> 00:44:27.329
Double click and open up this project.

00:44:27.329 --> 00:44:32.349
And you can see that this is a little bit different.

00:44:32.349 --> 00:44:39.179
Instead of a script folder over here on the left, you
now see that there's a classes folder because this is

00:44:39.179 --> 00:44:44.019
about writing objective C classes and it has a header file.

00:44:44.019 --> 00:44:46.679
It contains some stuff.

00:44:46.679 --> 00:44:54.190
And it contains then a dot M file, a main file that
constrains some code that I already have entered in here

00:44:54.190 --> 00:44:57.440
for you for those that didn't know how to write objective C,

00:44:57.440 --> 00:45:00.900
I didn't want to go through the process
of giving you each on of these lines.

00:45:00.900 --> 00:45:08.519
And then basically you have some code here at the
beginning that does your setup when the action runs

00:45:08.519 --> 00:45:12.099
and it will do the tear down for
the memory when the action closes.

00:45:12.099 --> 00:45:16.659
You have a new kind of run method within Leopard

00:45:16.659 --> 00:45:21.049
where things can happen dynamically
while your action is executing.

00:45:21.050 --> 00:45:29.660
There's a section here that creates the photo browser
and then finally this is for presenting a dialogue.

00:45:29.659 --> 00:45:32.730
And there's a little disposal routine down here.

00:45:32.730 --> 00:45:35.760
Then responders for the close and open buttons.

00:45:35.760 --> 00:45:41.060
I'm not going to get into the specific code,
but basically that's what I'm looking at.

00:45:41.059 --> 00:45:46.210
Over here we have a resources folder, just like the
previous action, and we have a select images nib.

00:45:46.210 --> 00:45:52.949
We're going to double click that
to open up an Interface builder.

00:45:52.949 --> 00:45:56.969
Our view. Now this view's different.

00:45:56.969 --> 00:46:02.509
This view uses one of the new hud look things that's in IB3.

00:46:02.510 --> 00:46:06.070
so this window has a translucent effect to it.

00:46:06.070 --> 00:46:08.809
It has a cancel and an okay button.

00:46:08.809 --> 00:46:12.610
And you'll see that we still have
a document object over on the left

00:46:12.610 --> 00:46:16.079
and we have our library controls over here on the right.

00:46:16.079 --> 00:46:25.599
Now what we're going to do is connect the
various controls up to our files owner,

00:46:25.599 --> 00:46:29.889
which is our document, our Xcode project.

00:46:29.889 --> 00:46:33.989
So we want to use an image browser.

00:46:33.989 --> 00:46:37.719
I'll search over here in IB for browser.

00:46:38.789 --> 00:46:40.789
And you'll get one right here on the right.

00:46:40.789 --> 00:46:45.889
This is part of the new image kit and it's an image browser.

00:46:45.889 --> 00:46:47.369
It's really simple to use.

00:46:47.369 --> 00:46:51.589
You just drag it over here and let go on the window.

00:46:51.590 --> 00:46:58.300
Now we want to kind of push it up to the top and the
left and it'll snap into place for you automatically.

00:46:58.300 --> 00:47:00.820
So it'll fit right in under the title bar.

00:47:00.820 --> 00:47:07.240
Then grab the bottom right grow handle and
drag it down toward the buttons and the right.

00:47:07.239 --> 00:47:10.829
You'll see it'll snap right where
it's supposed to be for the buttons

00:47:10.829 --> 00:47:14.179
to be there like this and so it'll sna0p into place.

00:47:14.179 --> 00:47:21.629
And by default it will display images in this manner,
at this size and with no names or anything else.

00:47:21.630 --> 00:47:25.970
We can change that by opening up our inspector window here.

00:47:25.969 --> 00:47:30.579
If you don't have it open, just choose
command one for attributes inspector.

00:47:30.579 --> 00:47:35.319
And you'll notice that there's lot of things that
we can change about the way that it displays images.

00:47:35.320 --> 00:47:43.800
The first is we can have the images titled so you
can turn that off and on, and we want them outlined.

00:47:43.800 --> 00:47:46.440
It'll place a little crisp outline around them.

00:47:46.440 --> 00:47:48.780
We want to use that too, as well.

00:47:48.780 --> 00:47:52.120
And then you can control the scaling of the thumbnails.

00:47:52.119 --> 00:47:54.710
Give it one nudge up to like five six.

00:47:54.710 --> 00:47:56.699
It think that's a good size.

00:47:56.699 --> 00:47:59.889
I think that will work perfectly for us.

00:47:59.889 --> 00:48:09.339
So that's, we've dragged out this new image browser into
our window and now we want to wire that up to our code.

00:48:09.340 --> 00:48:15.760
Well since we're using Objective-C in Cocoa, you
do it slightly differently than what we did before.

00:48:15.760 --> 00:48:25.350
Holding down the control key, click on the files owner
and drag that, you'll see a string come off of it,

00:48:25.349 --> 00:48:30.940
drag it over on top of the image browser and let go.

00:48:30.940 --> 00:48:35.639
A little pop up will come up here that'll
say outlet, what outlet do you want to use?

00:48:35.639 --> 00:48:40.400
That relates to the chunk of code in our
project that will control this browser.

00:48:40.400 --> 00:48:47.550
There's only one option, underscore browser,
select that and that will do the attachment for us.

00:48:47.550 --> 00:48:55.110
Now to indicate to the browser, that just indicated
to the code that we have an image browser we're using.

00:48:55.110 --> 00:49:02.970
And then to indicate to the browser what source
are you going to use for your images to display,

00:49:02.969 --> 00:49:07.619
command click on the image browser itself.

00:49:08.889 --> 00:49:12.239
Oh, I'm sorry, no, don't do that.

00:49:12.239 --> 00:49:20.829
Control click on the image browser and drag the little
string from that over to the files owner and let go.

00:49:20.829 --> 00:49:24.110
No, and that didn't work.

00:49:24.110 --> 00:49:26.430
Command click on the browser.

00:49:26.429 --> 00:49:28.409
And what are we missing?

00:49:28.409 --> 00:49:28.980
Something.

00:49:28.980 --> 00:49:30.740
Oh, I'm sorry.

00:49:30.739 --> 00:49:32.779
Okay. Let's do this again.

00:49:32.780 --> 00:49:39.450
Finger, control key, click on image
browser, this window wasn't open all the way.

00:49:39.449 --> 00:49:40.919
That's what we want.

00:49:40.920 --> 00:49:44.260
And we're looking for source.

00:49:44.260 --> 00:49:47.440
And we're not seeing source in there.

00:49:47.440 --> 00:49:49.369
Data source.

00:49:50.969 --> 00:49:54.369
Hmm. What's up Kerry?

00:49:54.369 --> 00:49:56.949
Why am I not seeing data source there?

00:49:56.949 --> 00:50:04.059
>> I think it's a bug.

00:50:04.059 --> 00:50:07.190
>> Okay. I've just been informed that that's a bug.

00:50:07.190 --> 00:50:10.429
That on some of the demo machines
it appears and on some it don't.

00:50:10.429 --> 00:50:15.829
some of you might have it and it's called data source,
in which case you would grab the thing next to it

00:50:15.829 --> 00:50:18.969
and take it back over to the files owner and let it go.

00:50:18.969 --> 00:50:25.529
I'm not seeing data source over here, but that's okay.

00:50:25.530 --> 00:50:28.000
We always have our backup option.

00:50:28.000 --> 00:50:32.320
Once you wire up the data source, you
have to wire up the buttons as well.

00:50:32.320 --> 00:50:36.990
Control click on the button and
then you'll get your pop up hud.

00:50:36.989 --> 00:50:40.829
You'll see one under sent actions selector.

00:50:40.829 --> 00:50:44.880
Grab the little selector circle
and drag it over the files owner.

00:50:44.880 --> 00:50:47.230
When you let go it'll give you two options.

00:50:47.230 --> 00:50:49.519
Is that a cancel button or okay.

00:50:49.519 --> 00:50:52.269
Choose cancel for that one.

00:50:52.269 --> 00:50:58.239
And then control click the other
button, grab the selector from that

00:50:58.239 --> 00:51:02.359
and go over to your files owner, let go and choose okay.

00:51:02.360 --> 00:51:06.820
So both of those buttons have now
been wired to the code that's back

00:51:06.820 --> 00:51:10.530
in the project and we're done with our interface.

00:51:10.530 --> 00:51:14.250
And I'm going to save and quit.

00:51:14.250 --> 00:51:16.489
Of course, this is not going to work for me.

00:51:16.489 --> 00:51:21.689
It might work for you if you did
have the other object there.

00:51:21.690 --> 00:51:31.110
So instead, what I'm going to do is go back down
to the finder, go to my session projects folder,

00:51:31.110 --> 00:51:37.550
my put contents in, grab that select
images action and drop it in there.

00:51:37.550 --> 00:51:42.269
And now let's launch Automator and see if it works.

00:51:42.269 --> 00:51:47.730
Okay. So this time I'm going to
select the image files themselves.

00:51:47.730 --> 00:51:49.840
I'll select it first.

00:51:49.840 --> 00:51:50.610
Let's see.

00:51:50.610 --> 00:51:52.690
I don't need the copies here.

00:51:52.690 --> 00:52:02.590
Go through and do a little clean up.

00:52:02.590 --> 00:52:06.570
And we're not going to copy.

00:52:06.570 --> 00:52:11.309
Okay. I'm going to grab my six
images, drag them into the workflow.

00:52:11.309 --> 00:52:18.719
And now we'll get a get specified finders items
with those images and then let's see if we have,

00:52:18.719 --> 00:52:28.699
in Automator over here, select images, there's
the actions, we drag that into the workflow area.

00:52:28.699 --> 00:52:30.469
And now we're ready to run.

00:52:30.469 --> 00:52:37.519
So what should happen is, ah!

00:52:37.519 --> 00:52:38.829
It showed up.

00:52:38.829 --> 00:52:42.489
Well it didn't show up pretty, but it did show up.

00:52:42.489 --> 00:52:43.049
That's good.

00:52:43.050 --> 00:52:45.920
It is a beta.

00:52:45.920 --> 00:52:50.800
So this is, you'll get a nice dialogue
that actually looks good in real life

00:52:50.800 --> 00:52:54.830
and the user can select what images they want to work with,

00:52:54.829 --> 00:52:59.460
so I can pick a couple of images
like those and then go okay.

00:52:59.460 --> 00:53:09.650
If you click the results gel in the action, you should
get a picture of a bunch of images in there as the result.

00:53:09.650 --> 00:53:12.720
And it's not showing that.

00:53:12.719 --> 00:53:15.469
Okay. Quite nice.

00:53:15.469 --> 00:53:16.889
Very good.

00:53:16.889 --> 00:53:19.179
Okay. So we're done with that one.

00:53:19.179 --> 00:53:22.489
Phew. All right.

00:53:22.489 --> 00:53:25.819
And who used this machine before me?

00:53:25.820 --> 00:53:26.450
Was it Nebble?

00:53:26.449 --> 00:53:29.059
Oh, I found my scapegoat.

00:53:29.059 --> 00:53:30.989
All right.

00:53:30.989 --> 00:53:40.109
So the next action we're going to create, it actually works
better than this, boy is this good salesmanship, or what?

00:53:40.110 --> 00:53:41.700
Yeah, it really works better than this.

00:53:41.699 --> 00:53:42.719
It's so exciting.

00:53:42.719 --> 00:53:44.739
We just watched him fumble for like an hour.

00:53:44.739 --> 00:53:45.719
It's wonderful.

00:53:45.719 --> 00:53:50.379
Okay. They last action is going to be
convert images to letterbox format.

00:53:50.380 --> 00:53:56.090
And this project is an AppleScript
project using AppleScript.

00:53:56.090 --> 00:53:58.890
And that'll work.

00:53:58.889 --> 00:54:00.859
Yeah. It's duct taped.

00:54:00.860 --> 00:54:02.490
It'll work, I'll tell yeah.

00:54:02.489 --> 00:54:04.729
So let's take a look at the project.

00:54:04.730 --> 00:54:11.170
Just like the Shell script, it has a scripts folder and
if you select the main you can see, and click editor,

00:54:11.170 --> 00:54:14.980
you see that here's the actual AppleScript.

00:54:14.980 --> 00:54:24.949
It also has a resources folder that has a nib and it
has a target just like the previous one we looked at.

00:54:24.949 --> 00:54:30.710
Lets take a look at the script first by selecting
main.applescript and I'll explain what this does.

00:54:30.710 --> 00:54:35.380
So here's your basically the running routine.

00:54:35.380 --> 00:54:41.490
By default, Automator will pass in
this variable called input at the top.

00:54:41.489 --> 00:54:47.119
A list of file references in alias format.

00:54:47.119 --> 00:54:50.519
So it'll take the POSIX paths,
convert them into an alias reference

00:54:50.519 --> 00:54:54.259
that AppleScript understand and pass them to the action.

00:54:54.260 --> 00:55:01.080
Then there's another thing that gets passed to the
run handler at launch and it's a parameters record.

00:55:01.079 --> 00:55:07.779
This variable called parameters will contain a record
of all the different controls and their values.

00:55:07.780 --> 00:55:10.370
So if it's a pop up, it'll have this value.

00:55:10.369 --> 00:55:12.679
If it's a text field it'll have that value.

00:55:12.679 --> 00:55:20.750
And then what you do in your script is you extract from
the parameters record whatever value you're looking for

00:55:20.750 --> 00:55:27.980
and place it into a variable that you can use in your
run handler and there's just a simple repeat loop

00:55:27.980 --> 00:55:35.570
where it checks to see if the method indicator is zero,
it must be padding, therefore I will pad the images

00:55:35.570 --> 00:55:40.070
if it's one then it must be cropping
and I will call these sub routines.

00:55:40.070 --> 00:55:48.300
Using the image events built in image events architecture
scriptable image manipulation architecture here,

00:55:48.300 --> 00:55:53.260
it just calls a sub routine that opens
up an image and crops it and scales it.

00:55:53.260 --> 00:55:57.930
And the same down here, I mean
this is the cropping one down here.

00:55:57.929 --> 00:56:00.139
And then this is the padding one.

00:56:00.139 --> 00:56:03.379
So that's all the code that there is for this.

00:56:03.380 --> 00:56:06.590
Let's double click our nib to work on the interface.

00:56:06.590 --> 00:56:11.070
So we open up the nib and we have our view.

00:56:11.070 --> 00:56:14.330
I put a little label there called conversion method.

00:56:14.329 --> 00:56:19.069
So what we're going to do is present the user with a
little pop up where they can choose whether they want

00:56:19.070 --> 00:56:25.740
to have the image converted to letterbox
format by padding or by cropping.

00:56:25.739 --> 00:56:28.199
So to do that we need a little pop up menu.

00:56:28.199 --> 00:56:34.480
Just choose pop up as our search word
over here and we have a couple of choices.

00:56:34.480 --> 00:56:38.050
The middle one is a pop up button.

00:56:38.050 --> 00:56:41.220
It's your standard button pop up.

00:56:41.219 --> 00:56:44.899
There's also another one called
Automator path pop up button.

00:56:44.900 --> 00:56:49.030
And this is a specialized control
for Automator that just deals with.

00:56:49.030 --> 00:56:55.460
We just want a simple control for giving the user either
or so we'll select a pop up button and drag it over here.

00:56:55.460 --> 00:57:03.139
A simple control for giving the user either or so
we'll select a pop up button and drag it over here.

00:57:03.139 --> 00:57:05.389
Place it on our view.

00:57:05.389 --> 00:57:10.519
And in our inspector window, we'll
click on the size control,

00:57:10.519 --> 00:57:14.710
which is the third tab and choose
to make it a small control.

00:57:14.710 --> 00:57:21.530
Remember I said Automator UI guidelines want you to
use small because we want to conserve vertical space.

00:57:21.530 --> 00:57:26.930
So now we've made it a small control and let's
fill it out by just double clicking the pop up.

00:57:26.929 --> 00:57:28.929
It will expose its menu.

00:57:28.929 --> 00:57:33.489
Double click the first item and make it pad.

00:57:33.489 --> 00:57:39.149
Then double click the second item and make it crop.

00:57:39.150 --> 00:57:44.750
Click the third item, go to the edit menu and choose delete.

00:57:44.750 --> 00:57:51.500
Now to make the default as it appears, just select
pad and then click somewhere else in the view.

00:57:51.500 --> 00:57:57.480
Now here's a tip, if you want to make your control
fit the menu items it will display, select a control

00:57:57.480 --> 00:58:01.809
and type command equal, and it will
shrink it to the relevant size for you.

00:58:01.809 --> 00:58:03.840
Just a little tip.

00:58:03.840 --> 00:58:12.240
Now let's take our control, line it up with our
label and move it over until it clicks into position.

00:58:12.239 --> 00:58:21.219
Now we want to resize our window until its
10 pixels from either side of the controls.

00:58:21.219 --> 00:58:28.799
So I'll select the control, hold down the option key
and you can see that instantly Interface Builder pops

00:58:28.800 --> 00:58:32.570
up these little windows with the
number of pixels left to go.

00:58:32.570 --> 00:58:40.200
I'm going to grab that and size it down until its 10
pixels from the edge and 10 pixels from the bottom

00:58:40.199 --> 00:58:44.399
and there's my officially approved interface.

00:58:44.400 --> 00:58:45.950
Save that.

00:58:45.949 --> 00:58:50.799
Now, unlike wiring up with Cocoa,
AppleScript uses the same method

00:58:50.800 --> 00:58:56.289
for passing information to the
run script as shell scripts do.

00:58:56.289 --> 00:59:02.650
So we need to click our parameters object over here,
click the first tab and let's make a new parameter.

00:59:02.650 --> 00:59:14.170
We're going to call it conversion and then method
inner capped, conversion method inner capped.

00:59:14.170 --> 00:59:18.170
And I'll just copy that to the clip
board because I'm suspicious today.

00:59:18.170 --> 00:59:22.300
Now let's take this parameter and bind it to the control.

00:59:22.300 --> 00:59:29.320
Just select the control, choose bindings which is
your fourth tab, and now you have a series of options.

00:59:29.320 --> 00:59:34.950
You have content, selected index, selected
objects, selected tag, selected value.

00:59:34.949 --> 00:59:37.539
We want to use selected index.

00:59:37.539 --> 00:59:44.650
And what that will do is when the user selects the
control they'll be returned a number indicating

00:59:44.650 --> 00:59:50.889
which menu item was selected 0 being the
first, 1 being the second, 2 being the third.

00:59:50.889 --> 00:59:55.159
So, put bind two and then under model key path

00:59:55.159 --> 01:00:01.809
if you click you can see our new parameters
right there select that and choose save.

01:00:01.809 --> 01:00:08.449
So we've now created our interface, we added the
control we bound the control we declared a parameter.

01:00:08.449 --> 01:00:12.939
And now we're ready to go back to our code.

01:00:12.940 --> 01:00:21.769
The only thing we have to do now is in the code we
place those series of X's with conversion method.

01:00:21.769 --> 01:00:24.900
And you'll notice that it's placed within pipes.

01:00:24.900 --> 01:00:30.700
That's to indicate to the script that
this is a parameter, just like that.

01:00:30.699 --> 01:00:33.339
Otherwise it thinks it's a variable.

01:00:33.340 --> 01:00:40.010
And, let's go down to our target, select our target,
click the info button to bring up our wonderful parameters

01:00:40.010 --> 01:00:44.240
and properties interface, we've
already given this an identifier.

01:00:44.239 --> 01:00:47.529
We've indicated that here's the
action name, it belongs to preview,

01:00:47.530 --> 01:00:58.120
the category was AM categories, AM category categories.

01:00:58.119 --> 01:01:05.190
Category photo's, I'm doing this live with no net.

01:01:05.190 --> 01:01:09.869
Now, for input we've already declared that
this is the kind of thing we're looking for,

01:01:09.869 --> 01:01:15.170
we're looking for an AppleScript
object, and not just AppleScript,

01:01:15.170 --> 01:01:27.139
we want AppleScript dot alias dash object com
dot apple dot apple script dot alias dash object.

01:01:27.139 --> 01:01:32.400
And I will copy that and also use that as our output.

01:01:32.400 --> 01:01:36.869
And this is an alias reference in
AppleScript format for a file.

01:01:36.869 --> 01:01:47.239
And let's go to parameters and we need
to add our parameter conversion method.

01:01:47.239 --> 01:01:51.849
And this time it's not a string
it's going to be an intriguer.

01:01:51.849 --> 01:01:56.210
And its initial value will be 0.

01:01:56.210 --> 01:02:02.610
So we've declared our parameter in
both the code and in our target.

01:02:02.610 --> 01:02:08.789
We are now ready to build and go
he says breathlessly waiting.

01:02:08.789 --> 01:02:12.719
Yes, save everything I have and let's watch the fun begin.

01:02:12.719 --> 01:02:19.519
Alright, for this one I'm just going
to check and see if it's there.

01:02:19.519 --> 01:02:26.650
Let's see, so I can type in like a
word like letter box, it showed up.

01:02:26.650 --> 01:02:28.889
Will it actually join?

01:02:28.889 --> 01:02:31.989
It shows up.

01:02:31.989 --> 01:02:34.669
Okay, that's all we need.

01:02:34.670 --> 01:02:45.470
Quit. Alright, and I'm going to go down to our project,
I'm going to open the build folder and show you

01:02:45.469 --> 01:02:53.709
that we can go right in and drag our action copy of our
action into our Automator folder that's in the user library.

01:02:53.710 --> 01:02:56.369
So now we have all three actions installed.

01:02:56.369 --> 01:03:02.869
We can try this and see if it'll
work just for the heck of it.

01:03:02.869 --> 01:03:06.880
Let's launch Automator and see if
our work flow will actually happen.

01:03:06.880 --> 01:03:10.090
We're going to choose the demo images folder.

01:03:10.090 --> 01:03:16.039
And then we're going to search by
key word, find images by key word.

01:03:16.039 --> 01:03:19.909
If you hit a return key it will select
it hit the return key it will add it.

01:03:19.909 --> 01:03:25.909
Then once we found those images by key
word we're going to go select images.

01:03:25.909 --> 01:03:27.309
And there it is at the bottom.

01:03:27.309 --> 01:03:29.320
Hit return it joins the list.

01:03:29.320 --> 01:03:32.300
Use the up and down arrows to get to the action you want.

01:03:32.300 --> 01:03:34.310
Hit the return it will add it.

01:03:34.309 --> 01:03:40.049
Then once that's processed then
we're going to crop it to letter box.

01:03:40.050 --> 01:03:47.930
And then finally type in open and then
preview and there it open images in preview.

01:03:47.929 --> 01:03:51.119
So, ostensibly that's our work flow.

01:03:51.119 --> 01:03:53.349
We'll see how good it actually works.

01:03:53.349 --> 01:03:55.480
Here we go.

01:03:55.480 --> 01:03:59.119
Key word Mac mania.

01:04:00.190 --> 01:04:02.340
And I want that.

01:04:02.340 --> 01:04:02.700
You know what?

01:04:02.699 --> 01:04:05.579
I actually want to see this when it runs.

01:04:05.579 --> 01:04:11.049
Let's go to our options on the find Images by key
word, click the options jell and we're going to choose

01:04:11.050 --> 01:04:15.769
to have this action UI appear to the
user whenever the workflow is run.

01:04:15.769 --> 01:04:20.139
And we're going to do the same for the
convert images to letter box format.

01:04:20.139 --> 01:04:21.230
Show that one run.

01:04:21.230 --> 01:04:23.349
And we'll make our choices dynamically.

01:04:23.349 --> 01:04:24.929
I'll run the workflow.

01:04:24.929 --> 01:04:28.659
I'm looking for the word Mac Mania.

01:04:28.659 --> 01:04:33.889
Continue, and then I have no images so it didn't work.

01:04:33.889 --> 01:04:36.269
But, that's not all lost.

01:04:36.269 --> 01:04:45.599
I'm going to delete these actions here and then
select all my images, drag it into the work flow.

01:04:45.599 --> 01:04:50.630
I will make this work I don't care.

01:04:50.630 --> 01:04:53.660
Alright so now I bypass the search stuff.

01:04:53.659 --> 01:04:59.049
It's going to show us the images, we're going to choose
the ones we want and what we're going to do to them.

01:04:59.050 --> 01:05:02.730
Ooh, so now, let's see.

01:05:02.730 --> 01:05:04.110
Do we want to crop them first?

01:05:04.110 --> 01:05:05.360
Yeah let's do crops.

01:05:05.360 --> 01:05:10.390
So here's a picture of Monaco, this is
the coast I was on the ship right off.

01:05:10.389 --> 01:05:13.409
I took that picture.

01:05:13.409 --> 01:05:14.420
I was I the Riviera.

01:05:14.420 --> 01:05:15.800
I took that picture.

01:05:15.800 --> 01:05:17.160
That's Monaco.

01:05:17.159 --> 01:05:21.980
And we're going to select that and
the sunset at, the sunrise at Corsica.

01:05:21.980 --> 01:05:25.150
And we're going to crop those to letter box format.

01:05:25.150 --> 01:05:25.950
We're not going to pad them.

01:05:25.949 --> 01:05:26.739
We're going to crop them.

01:05:26.739 --> 01:05:27.679
So, watch what happens.

01:05:27.679 --> 01:05:32.000
We're going to go okay, and then it's going to
bring up the next and we're going to choose crop.

01:05:32.000 --> 01:05:39.480
Click continue, so you can see it really
like took the center out of the image.

01:05:39.480 --> 01:05:40.780
It works though doesn't it?

01:05:40.780 --> 01:05:42.730
That would look great on a wide screen TV.

01:05:42.730 --> 01:05:44.480
And look at that.

01:05:44.480 --> 01:05:46.860
Ah, ah, it captures it.

01:05:46.860 --> 01:05:50.490
( Applause )

01:05:50.489 --> 01:05:59.849
Through the magic of chemistry and I'll see you at the bar
across the street when we're done, not that I drink, okay.

01:05:59.849 --> 01:06:05.059
So, now let's try the other approach,
right, alright let's run our thing again.

01:06:05.059 --> 01:06:07.070
And this time we're going to choose the other images.

01:06:07.070 --> 01:06:09.710
We're going to choose door knocker, goblet, leaning tower.

01:06:09.710 --> 01:06:11.659
I actually stood before the leaning tower.

01:06:11.659 --> 01:06:14.859
I didn't have the guts to go up but I did stand before it.

01:06:14.860 --> 01:06:16.820
And the Western, this is where I stayed.

01:06:16.820 --> 01:06:20.110
I stayed at the Western Excelsior
I Florence on the Arno River.

01:06:20.110 --> 01:06:25.380
Used up every hotel point I'd been saving
for ten years but it was absolutely glorious.

01:06:25.380 --> 01:06:28.300
Florence is wonderful they have real tomatoes.

01:06:28.300 --> 01:06:30.950
Okay, back to our demo.

01:06:30.949 --> 01:06:36.579
So, I've selected these images choose okay and
this time I want to use pad instead of crop.

01:06:36.579 --> 01:06:47.840
Click continue, and voila it padded all of
the images and presented it to us in preview.

01:06:47.840 --> 01:06:54.890
So aside from the little bugaboo's that happened
today what you saw and what you did is you saw

01:06:54.889 --> 01:06:58.359
that creating Automator actions is very flexible.

01:06:58.360 --> 01:07:00.599
You can use a variety of approaches.

01:07:00.599 --> 01:07:02.659
You can us a variety of languages.

01:07:02.659 --> 01:07:08.079
If you're a shell person creating a little interface
and then wiring it up so that the stuff comes

01:07:08.079 --> 01:07:11.489
in through environment variables is very easy to do.

01:07:11.489 --> 01:07:12.629
And very powerful.

01:07:12.630 --> 01:07:18.460
You can create all kinds of work flows that you can
just drag out and then save and run whenever you want.

01:07:18.460 --> 01:07:23.240
If you like objective C, I hope that
you have better luck than I did today.

01:07:23.239 --> 01:07:29.119
But you can see that it's really with a
new IB3 it's really drag and drop to wire

01:07:29.119 --> 01:07:32.769
up to the various parts of your
code to the interface elements.

01:07:32.769 --> 01:07:42.190
And finally if you use AppleScript
it works all the time, so ha.

01:07:42.190 --> 01:07:43.670
( Applause )
Can we go back to slides now?

01:07:43.670 --> 01:07:46.050
Thank you.

01:07:46.050 --> 01:07:48.950
Slides, isn't that beautiful?

01:07:50.329 --> 01:07:53.909
I actually was there, blows my mind.

01:07:53.909 --> 01:07:59.299
So, if you want to learn more about this
whole process there's lots of documentation.

01:07:59.300 --> 01:08:03.050
If there's one thing there's plenty
of great documentation for Automator

01:08:03.050 --> 01:08:06.660
on teaching you how to do this correctly and easily.

01:08:06.659 --> 01:08:07.920
That's me up there.

01:08:07.920 --> 01:08:11.840
I am, today I'm the automation technology evangelist.

01:08:11.840 --> 01:08:15.780
Well okay, I'm normally the product
manager for automation technologies.

01:08:15.780 --> 01:08:17.539
But I also do that as well.

01:08:17.539 --> 01:08:22.800
And Kerry Hazelgren is the
engineering manager for Automator.

01:08:22.800 --> 01:08:24.000
Raise your hand.

01:08:24.000 --> 01:08:24.899
That's him over there.

01:08:24.899 --> 01:08:30.759
It's his fault that everything messed up for
me, him and Chris Nebel that was the problem.

01:08:30.760 --> 01:08:34.489
And then for documentation there's
the Apple development stuff.

01:08:34.489 --> 01:08:40.219
But Automator dot US is a great jumping off point
because it has links to all the developer stuff too.

01:08:40.220 --> 01:08:46.539
And you saw it earlier, just go to Automator dot us if you
want and see about leopard Automator dot us slash leopard.

01:08:46.539 --> 01:08:52.560
Then there are other great sites if you want to
watch videos about Automator, Automator dot TV.

01:08:52.560 --> 01:08:56.170
Then there's Automator actions dot com.

01:08:56.170 --> 01:09:00.359
And there's a great online community
there and they have thousands of actions

01:09:00.359 --> 01:09:03.559
that you can download and talk
to other people about and use.

01:09:03.560 --> 01:09:07.760
And then there's the wonderful Automator
world blog that gives you the up to date scoop

01:09:07.760 --> 01:09:10.510
on what's happening in the world of Automator.

01:09:10.510 --> 01:09:16.230
Now we have a little bit of time we're going to
do some Q and A here so you can ask questions

01:09:16.229 --> 01:09:19.829
and the first answer is I don't know what
that went wrong it wasn't my fault, okay.