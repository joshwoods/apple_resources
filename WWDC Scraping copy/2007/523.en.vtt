WEBVTT

00:00:12.400 --> 00:00:16.469
>> Deploying large net boot networks.

00:00:16.469 --> 00:00:18.689
Large net boot networks.

00:00:18.690 --> 00:00:21.570
A couple of good things in here.

00:00:21.570 --> 00:00:26.149
My name is Joel Rennich, CE manager for Enterprise Sales.

00:00:26.149 --> 00:00:29.640
So we do nice enterprise things.

00:00:29.640 --> 00:00:32.130
So a couple things about net boot in here,

00:00:32.130 --> 00:00:36.660
I've got a favorite a personal favorite,
I'm very proud of this, very excited.

00:00:36.659 --> 00:00:38.899
I've yet to get anybody to use it yet.

00:00:38.899 --> 00:00:42.600
But I'm very excited about it, entry
that we have that changes net boot,

00:00:42.600 --> 00:00:46.170
allows you to do more load balancing,
get more stuff out of it.

00:00:46.170 --> 00:00:49.630
We then have Mike Bombich who's
coming up here who's talking about.

00:00:49.630 --> 00:00:49.980
( Applause )

00:00:49.979 --> 00:00:56.609
>> Where was that when I said who I was?

00:00:56.609 --> 00:00:56.969
( Laughter )

00:00:56.969 --> 00:00:57.329
( Applause )

00:00:57.329 --> 00:01:01.229
>> Alright, alright, alright.

00:01:01.229 --> 00:01:02.119
Thank you.

00:01:02.119 --> 00:01:03.649
Thank you.

00:01:03.649 --> 00:01:04.049
>> Whey don't you have on a blue shirt?

00:01:04.049 --> 00:01:07.590
>> I don't have on a blue shirt, I was hoping
to blend in the background a little bit more.

00:01:07.590 --> 00:01:09.400
But I didn't get any purple stripes.

00:01:09.400 --> 00:01:11.180
Blend, yeah I know.

00:01:11.180 --> 00:01:18.930
So with new features, a system utility and then we have
Chris from Pixar who's coming out here with some great ideas

00:01:18.930 --> 00:01:23.810
of how they do a lot of their management
within their solutions.

00:01:25.180 --> 00:01:30.650
Click. So what you'll learn, how Pixar
uses NetBoot automated system utility

00:01:30.650 --> 00:01:37.320
and how to make NetBoot systems more redundant and
this would be the American definition of redundant.

00:01:37.319 --> 00:01:40.439
Not to make redundant as in fire people.

00:01:40.439 --> 00:01:44.019
Alright? So we're giving you more options not less.

00:01:44.019 --> 00:01:50.479
So we're getting old enough with net boot now
that we can use words like traditional, old style.

00:01:50.480 --> 00:01:54.990
Alright so traditional net boot balancing, you've got a
couple of net boot servers out there you've got a bunch

00:01:54.989 --> 00:02:00.729
of net boot clients, net boot clients boot up they ask
who their net boot daddy is, they get that information.

00:02:00.730 --> 00:02:05.340
The net boot server that handles
them will cache their Mac address.

00:02:05.340 --> 00:02:09.509
In further boots that server will prefer that client.

00:02:09.509 --> 00:02:14.899
In a decent world with a lot of randomization all your
machines over a period of time will kind of balance

00:02:14.900 --> 00:02:17.730
out across all the servers based upon load.

00:02:17.729 --> 00:02:24.500
However, it is quite possible that at one time if you
only boot half a lab or depending on just how the chips

00:02:24.500 --> 00:02:29.969
or the Mac addresses fall, you may end up
with all of your clients on one system.

00:02:29.969 --> 00:02:37.030
Alright? So while it is randomized and while it is
balanced, it is not necessarily randomly balanced.

00:02:37.030 --> 00:02:39.930
So that's traditional net boot balancing.

00:02:39.930 --> 00:02:43.120
Alright? Still in 10.4 still
works nothing changed there.

00:02:43.120 --> 00:02:47.189
If you're using this and you have a
set up and all that, nothing changes.

00:02:47.189 --> 00:02:55.219
What we have now is the fancy new net boot load balancing.

00:02:55.219 --> 00:02:55.729
Alright? Ooooh.

00:02:55.729 --> 00:03:02.239
So if you go into your NB image info dot p list
file, you'll find that you can put in a new key.

00:03:02.240 --> 00:03:04.510
Load balanced server.

00:03:04.509 --> 00:03:10.709
This is a string that can be either fully
qualified DNS name or it can be an IP address.

00:03:10.710 --> 00:03:13.450
Alright? Now your clients will boot up.

00:03:13.449 --> 00:03:15.709
They'll send out the boot strap discovery protocol packet.

00:03:15.710 --> 00:03:19.460
They will get a net boot server,
the net boot server will respond.

00:03:19.460 --> 00:03:23.000
Net boot server responds with a couple
of different pieces of information.

00:03:23.000 --> 00:03:25.840
One is where it's going to go for its TFTP image.

00:03:25.840 --> 00:03:30.599
The other is where it's going to go
for its NFS or HTTP system image.

00:03:30.599 --> 00:03:38.919
The address either the DNS name or the IP address that's
given in both the TFTP or the NFS or HTTP URL is going

00:03:38.919 --> 00:03:47.199
to be the IP address or the fully qualified DNS name that
you provide in that string under the load balanced server.

00:03:50.229 --> 00:03:51.750
What does that mean?

00:03:51.750 --> 00:03:52.259
Let me show you.

00:03:52.259 --> 00:04:01.269
Alright. We've got some fun new iMacs on the right side,
we've got some G5 Xserves, or Intel Xserves,

00:04:01.270 --> 00:04:03.270
oh I'm sorry, Intel Xserves on the other side.

00:04:03.270 --> 00:04:06.730
We've got some net boot servers that are also up there too.

00:04:06.729 --> 00:04:12.419
So this is kind of a common larger environment net
boot set up where we have a DHCP helper running

00:04:12.419 --> 00:04:15.379
on the switch that's forwarding on the information.

00:04:15.379 --> 00:04:18.449
Alright? Now my iMacs are going to begin net booting.

00:04:18.449 --> 00:04:21.680
Begin net booting, there we go.

00:04:21.680 --> 00:04:26.579
And they're going to go off and they're
going to get a net boot response.

00:04:26.579 --> 00:04:30.370
That net boot response is going to come
directly from those net boot servers.

00:04:30.370 --> 00:04:36.129
So far we are no different than any other set up
that you may have where this is already working.

00:04:36.129 --> 00:04:41.180
Now where the magic happens, we have
a hardware load balancer, right?

00:04:41.180 --> 00:04:45.550
A variety of companies have Coyote
Point, couple other places that do this.

00:04:45.550 --> 00:04:48.800
The load balancer will allow you
to have a virtual IP address.

00:04:48.800 --> 00:04:54.500
The load balancer as a virtual IP address takes all the
incoming connections on that IP address and distributes

00:04:54.500 --> 00:04:58.779
that traffic across the server farm behind it.

00:04:58.779 --> 00:05:06.439
Ah! So now when my net boot servers respond
back with who your TFTP and NFS share point is,

00:05:06.439 --> 00:05:11.189
they can actually provide that
virtual IP on the load balancer.

00:05:11.189 --> 00:05:16.360
Now all of your traffic back to those net boot
servers, will go through that load balancer

00:05:16.360 --> 00:05:19.990
and be truly distributed across the back end systems.

00:05:19.990 --> 00:05:23.850
Alright? Load balancers can have a lot of logic in them.

00:05:23.850 --> 00:05:27.920
They can redirect clients to new
machines if one machine goes down.

00:05:27.920 --> 00:05:31.460
They can maintain state, they can do all kinds of fun stuff.

00:05:31.459 --> 00:05:34.889
Alright? So this gives you a huge amount of options

00:05:34.889 --> 00:05:39.099
of how you can actually make your net
boot system significantly more redundant.

00:05:39.100 --> 00:05:45.290
What we're really excited about here is
the possibility of hosting images on Xsan.

00:05:45.290 --> 00:05:51.410
Alright? Leopard, new Xsan, all kinds of
good stuff, right, go in there, do this,

00:05:51.410 --> 00:05:54.890
put the net boot servers up there, alright?

00:05:54.889 --> 00:06:02.379
Post your image on that, I can have a server farm providing
that net boot image and load balanced entirely across it.

00:06:02.379 --> 00:06:06.319
Ah! Perception coming through here, okay?

00:06:06.319 --> 00:06:09.370
So some great ideas that you can
use now for load balancing just

00:06:09.370 --> 00:06:15.730
with that one additional net boot
setting and that NB image info P list.

00:06:15.730 --> 00:06:18.379
Now keep in mind experimental.

00:06:18.379 --> 00:06:23.370
Alright? We're very interested in what you think you
can do with this, we're very interested in seeing some

00:06:23.370 --> 00:06:30.420
of the setups that you might have, we're very interested
in helping you with this redundancy and this larger scale.

00:06:30.420 --> 00:06:42.699
When I lie awake at night thinking about net boot, I
don't think I do it as much as Mike, but I sometimes do.

00:06:42.699 --> 00:06:48.110
And I think about net boot and I think about what it
can do for your set up, what it can do for your systems.

00:06:48.110 --> 00:06:52.680
I really get excited about this, I really, really do.

00:06:52.680 --> 00:07:00.910
Alright? So we're calling this the super kinky net boot.

00:07:00.910 --> 00:07:03.370
( Laughter )

00:07:03.370 --> 00:07:06.560
>> Combining the elements of the load
balancing that we're talking about,

00:07:06.560 --> 00:07:11.490
combining all of this into to make
a very redundant net boot solution.

00:07:11.490 --> 00:07:17.680
We want this to be redundant across network links,
we want this to be redundant across net boot servers.

00:07:17.680 --> 00:07:20.910
The loss of any single thing will not slow you down.

00:07:20.910 --> 00:07:23.510
You'll be able to net boot regardless.

00:07:23.509 --> 00:07:26.409
Alright? As long as you don't lose all your clients.

00:07:26.410 --> 00:07:29.020
If you only have one client, make
two, then you can get that.

00:07:29.019 --> 00:07:33.479
So again, it will be using a combination
of DNS, so bind named views,

00:07:33.480 --> 00:07:37.800
so you can actually do DNS resolution differently
depending on where your clients are booting up from,

00:07:37.800 --> 00:07:43.120
we're also going to do this with some Cisco or
some other networking IOS where you can go in there

00:07:43.120 --> 00:07:48.590
and do some interior routing protocols with
OSPF or whatever you might want to use.

00:07:48.589 --> 00:07:52.469
So this is a very highly advanced, this
isn't something you put in, in an afternoon,

00:07:52.470 --> 00:07:56.920
but it's something that you can really plan
out to truly really increase your scale

00:07:56.920 --> 00:07:59.550
and increase your redundancy with a net boot solution.

00:07:59.550 --> 00:08:00.949
So let's go over this.

00:08:00.949 --> 00:08:11.670
We have the WAN, we have Chicago, we have
LA, net boot systems in both sides okay?

00:08:11.670 --> 00:08:15.780
We now have our net boot servers somewhere else.

00:08:15.779 --> 00:08:17.719
Now try to find a third place, maybe New York.

00:08:17.720 --> 00:08:19.160
But eh, it's kind of cliche.

00:08:19.160 --> 00:08:20.300
So somewhere else.

00:08:20.300 --> 00:08:23.460
A secret undisclosed location in your server room.

00:08:23.459 --> 00:08:29.899
In there you have your net boot systems you have a couple
of different IP addresses, your routing system sets

00:08:29.899 --> 00:08:34.730
up using OSPF, something else, you
have these IP addresses show up here.

00:08:34.730 --> 00:08:40.610
Alright? My Chicago net boot systems are going to net boot.

00:08:40.610 --> 00:08:49.129
I'm using BSDP helpers, DHCP helpers so that BSDP
query response goes back to my central location.

00:08:49.129 --> 00:08:55.149
I change that NB image info p list key
so that the net boot server

00:08:55.149 --> 00:08:58.409
that its responses are going to be NB.apple.com.

00:08:58.409 --> 00:09:03.279
Alright? So I have two net boot
servers there in my server room.

00:09:03.279 --> 00:09:07.250
They're set up to respond with NB.apple.com.

00:09:07.250 --> 00:09:11.539
I have DNS view set up in Chicago.

00:09:11.539 --> 00:09:22.750
My systems in Chicago resolve NB.apple.com
to that 10.0.10.10 address.

00:09:22.750 --> 00:09:29.179
This means that my Chicago net boot systems will now
be definitely net booting off of local net boot pare.

00:09:29.179 --> 00:09:33.129
That 10.0.10.10
address can actually be the virtual IP

00:09:33.129 --> 00:09:39.389
of a hardware load balancer that's actually balancing
the traffic between two net boot servers behind it.

00:09:40.690 --> 00:09:41.820
So far so good.

00:09:41.820 --> 00:09:44.750
Essentially what I talked about a couple of slides ago.

00:09:44.750 --> 00:09:46.789
Now I'm going to LA and I boot a system in LA.

00:09:46.789 --> 00:09:53.250
Have a similar BSDP traffic, the
response back is NB.apple.com.

00:09:53.250 --> 00:09:56.759
We have local DNS we have a view set up.

00:09:56.759 --> 00:10:02.289
This now turns into 192.168.10.10.

00:10:02.289 --> 00:10:06.899
So the same configuration to net boot
server somewhere off in the middle

00:10:06.899 --> 00:10:12.139
of nowhere are actually telling the clients
to go net boot off different systems.

00:10:12.139 --> 00:10:17.699
And those net boot systems are different based
upon your location based upon those DNS views.

00:10:17.700 --> 00:10:21.290
Not anything that's very complicated to set up whatsoever.

00:10:21.289 --> 00:10:26.379
Alright? Now the other thing that I can do with this,

00:10:26.379 --> 00:10:32.610
not only can I resolve that to a local IP address
using interior routing protocols OSPF like I said,

00:10:32.610 --> 00:10:39.930
getting probably not a six pack, but maybe a twelve or
twenty four pack of beer to your Cisco or your Nortel

00:10:39.929 --> 00:10:43.079
or whoever guy that you have to do that for you.

00:10:43.080 --> 00:10:45.830
You can actually do redundant links.

00:10:45.830 --> 00:10:52.180
So now that 10.0.10.10 address
has a very low path cost in at Chicago.

00:10:52.179 --> 00:10:56.189
But if it can't be reached in Chicago because
the link is down, that load balancer went away,

00:10:56.190 --> 00:11:01.630
it can actually appear over in your central server room.

00:11:01.629 --> 00:11:08.120
Ah! So now your Chicago clients net boot, they get
NB.apple.com, they resolve that locally

00:11:08.120 --> 00:11:12.310
to 10.0.10.10 , they boot
off the local systems if they're there.

00:11:12.309 --> 00:11:18.250
If the local systems aren't there, the network and the
router will actually pass all that traffic across the WAN

00:11:18.250 --> 00:11:21.179
or the mantling that they have back
to wherever else you want to go.

00:11:21.179 --> 00:11:26.409
So you have instantaneous redundancy
on your net boot service.

00:11:27.759 --> 00:11:33.909
If you're using HTTP to net boot your
systems, stateless protocol right?

00:11:33.909 --> 00:11:38.250
You should be able to get away
with having your live clients.

00:11:39.279 --> 00:11:46.240
Survive a server failure and be redirected by the
network or the hardware load balancers to another server.

00:11:46.240 --> 00:11:50.820
Ah! That's where this gets cool.

00:11:50.820 --> 00:11:53.460
Alright? Again experimental but
we want to give you the tools

00:11:53.460 --> 00:11:56.100
so you can start testing around with this and see what you can do.

00:11:56.100 --> 00:11:59.889
And now you can end up with a server
farm of net boot servers.

00:11:59.889 --> 00:12:03.449
Where you can pull them in and out without having
to worry about all the clients being shut down

00:12:03.450 --> 00:12:06.330
or what interruption this is going to give them.

00:12:06.330 --> 00:12:11.120
So again, redundant across net boot
servers, redundant across networks.

00:12:11.120 --> 00:12:13.870
Very, very redundant, lots of stuff.

00:12:13.870 --> 00:12:17.210
So very interested anyone that wants to do this.

00:12:17.210 --> 00:12:18.940
Again, this is my dream.

00:12:18.940 --> 00:12:22.690
I wake up in cold sweats, aahhh we can do this.

00:12:22.690 --> 00:12:29.440
So hopefully it gives you some options and all of this
is predicated off that one little entry in the P list.

00:12:29.440 --> 00:12:33.650
So now that I've bored you with
networking, bring on Mike Bombich.

00:12:33.649 --> 00:12:34.090
( Applause )

00:12:34.090 --> 00:12:38.660
>> Talk about System Image Utility.

00:12:38.659 --> 00:12:42.350
( Applause )

00:12:42.350 --> 00:12:46.710
>> That one, don't press the other one.

00:12:46.710 --> 00:12:51.410
>> What's the other one do?

00:12:51.409 --> 00:12:54.519
Well thank you, we all need to wake up now.

00:12:54.519 --> 00:12:55.809
No I'm kidding.

00:12:55.809 --> 00:13:01.819
( Laughter )
Because last year, if you remember
last year I did a just total geek fest

00:13:01.820 --> 00:13:04.280
and we looked at net boot at the packet level.

00:13:04.279 --> 00:13:07.069
And it was great.

00:13:07.070 --> 00:13:13.050
I mean we had this beautiful slide that was like twenty
feet high with just a bunch of little hexadecimal.

00:13:13.049 --> 00:13:14.609
Just awesome.

00:13:14.610 --> 00:13:16.430
So we're going to change gears this year.

00:13:16.429 --> 00:13:23.169
I'm going to talk about one of the Apple applications
that leverages net boot technology for mass deployment.

00:13:23.169 --> 00:13:25.620
We're going to talk about System Image Utility.

00:13:25.620 --> 00:13:28.810
It's been completely overhauled for Leopard.

00:13:28.809 --> 00:13:36.399
It still retains the core functionality of creating a
net boot, net install and a restore based net boot set.

00:13:36.399 --> 00:13:43.799
But if you compare the interface to what we had in Tiger
and Panther, you can see that it's completely different.

00:13:43.799 --> 00:13:46.859
They really don't bear much resemblance
to each other at all.

00:13:46.860 --> 00:13:55.340
That's because in Tiger System Image Utility
had that horizontally aligned tabbed interface.

00:13:55.340 --> 00:14:01.030
And if we ever wanted to add functionality to
System Image Utility, we had to add another tab.

00:14:01.029 --> 00:14:05.870
So there's only so many tabs that you can add to
an application before it starts looking like one

00:14:05.870 --> 00:14:08.269
of those applications developed by another vendor.

00:14:08.269 --> 00:14:09.799
And obviously we don't want to go there.

00:14:09.799 --> 00:14:11.559
We don't want to keep adding tabs.

00:14:11.559 --> 00:14:18.289
So Apple addressed these limitations by implementing
Automator technology in System Image Utility.

00:14:18.289 --> 00:14:21.449
This is great.

00:14:21.450 --> 00:14:29.570
System imaging, whenever you break down
something into discrete tasks, excuse me.

00:14:29.570 --> 00:14:34.150
So we're going to break things down
into discrete tasks and then we're going

00:14:34.149 --> 00:14:37.069
to have an Automator action for each one of them.

00:14:37.070 --> 00:14:41.750
Whenever we break things down into discrete tasks
like this it's easier to provide support for things,

00:14:41.750 --> 00:14:44.720
for lots of new features like volume partitioning.

00:14:44.720 --> 00:14:48.670
I'm not going to go into tons and tons
of detail on System Image Utility.

00:14:48.669 --> 00:14:57.069
The folks that actually develop it are going to talk more
about that on Friday at I think it's 5ive pm in Nob Hill.

00:14:57.070 --> 00:15:00.230
So please go ahead and check out that session.

00:15:00.230 --> 00:15:05.210
With the arrival of Intel Macs, system
administrators have a lot of new opportunities

00:15:05.210 --> 00:15:09.530
for deploying Macs for doing Mac OS X deployment.

00:15:09.529 --> 00:15:13.839
At the same time we also face some
new deployment challenges.

00:15:13.840 --> 00:15:20.410
I think that building blocks specifically Automator
actions is exactly the technology that we need

00:15:20.409 --> 00:15:23.969
to meet the diverse needs of Macintosh
system administrators.

00:15:23.970 --> 00:15:30.000
In the next few minutes I'm going to give a brief
overview of system image utility just so that we're all

00:15:30.000 --> 00:15:32.500
on the same page with what's new in Leopard.

00:15:32.500 --> 00:15:38.129
Then I'll talk about how we can extend the functionality
of System Image Utility and finally I will talk

00:15:38.129 --> 00:15:43.860
about how we can create our own Automator actions
that will plug in to System Image Utility.

00:15:43.860 --> 00:15:52.200
So let's take a look at the interfaces of the
Tiger and the Leopard System Image Utility.

00:15:52.200 --> 00:15:56.810
In Tiger you've got that horizontally
aligned tabbed interface and in Leopard

00:15:56.809 --> 00:16:00.049
when you first launch system image
utility, you get two options.

00:16:00.049 --> 00:16:03.199
I can create a net install set
or I can create a net boot set.

00:16:03.200 --> 00:16:10.800
If I click on net install set, I can click on
continue and get a super easy deployment solution

00:16:10.799 --> 00:16:14.269
or I can click on customize for more advanced options.

00:16:14.269 --> 00:16:22.179
As soon as you click on customize you can see that
Automator is now part of the DNA of System Image Utility.

00:16:24.809 --> 00:16:31.559
When you first start customizing your net install image you
get an interface that's very much like that of Automator.

00:16:31.559 --> 00:16:38.209
You get a palette of Automator actions that are specific to
System Image Utility and then on the right you get a canvas

00:16:38.210 --> 00:16:40.310
for assembling your deployment work flow.

00:16:40.309 --> 00:16:42.579
So you can see a lot of the actions up here.

00:16:42.580 --> 00:16:49.610
Basically they took the tab, each tab from the interface
in Tiger and they turned it into an Automator action.

00:16:49.610 --> 00:16:55.330
So the main actions, the most important ones of course,
are define image source and create image and then the rest

00:16:55.330 --> 00:17:01.020
of them up there are just extras
to give us some more customization.

00:17:01.019 --> 00:17:03.139
So let's take a look at a basic work flow.

00:17:03.139 --> 00:17:05.829
The first thing that we're going to do is
we're going to define our image source.

00:17:05.829 --> 00:17:09.439
So we're going to pick either a
net boot or a net install set.

00:17:09.440 --> 00:17:16.240
If I choose a net install set, which is my favorite
because I like mass deployment, we have two options.

00:17:16.240 --> 00:17:21.180
We're going to get either a package based deployment
or we're going to get a restore based deployment.

00:17:21.180 --> 00:17:24.120
Which one we get depends on the
type of source that we chose.

00:17:24.119 --> 00:17:30.529
So if I chose a Mac OS X installer DVD as my
source, I'm going to get a package based deployment.

00:17:30.529 --> 00:17:37.670
If I picked a volume that's already got Mac OS X installed
on it, I'm going to get a restore based deployment.

00:17:37.670 --> 00:17:42.120
So next let's say I want to partition
my target disk on my client machines.

00:17:42.119 --> 00:17:43.049
That's great.

00:17:43.049 --> 00:17:48.089
I can't really do anything with that second
partition just yet, but we're going to get there.

00:17:48.089 --> 00:17:50.990
That's kind of the point of this presentation.

00:17:50.990 --> 00:17:56.250
So next let's say I want to apply
some system configuration settings.

00:17:56.250 --> 00:18:03.700
I want to bind my client systems to the same
directory service that my master machine is bound to.

00:18:03.700 --> 00:18:09.130
Let's say I want to change the file name of the
bi-host preferences to match the Mac address

00:18:09.130 --> 00:18:12.030
of the current machine and say
I want to set the computer name.

00:18:12.029 --> 00:18:14.180
I'll go ahead and do that here.

00:18:14.180 --> 00:18:17.140
Obviously we want automation, go head and drop that in here.

00:18:17.140 --> 00:18:21.280
In this case, I'm going to go ahead and say there's a volume

00:18:21.279 --> 00:18:24.359
on my client machine's named Macintosh
and that's what I wanted to use.

00:18:24.359 --> 00:18:29.359
I could say that some user sitting in
front of the machine could pick the volume.

00:18:29.359 --> 00:18:30.819
That's a nice safety step.

00:18:30.819 --> 00:18:33.649
But kind of anti-automation.

00:18:33.650 --> 00:18:38.790
I also want to erase before installing to
make sure I get my block level deployment.

00:18:38.789 --> 00:18:42.519
Finally and this one must come last,
we're going to create our image.

00:18:42.519 --> 00:18:46.470
So the first five Automator actions
didn't actually do anything.

00:18:46.470 --> 00:18:52.049
They just kind of modified some preferences and then there's
a dictionary that's passed down to each Automator action.

00:18:52.049 --> 00:18:57.000
It's this last Automator action create image that
actually takes those preferences specified earlier

00:18:57.000 --> 00:19:00.140
and it will create a net install
image, create my master image

00:19:00.140 --> 00:19:04.370
and then do anything else extra
to configure that net install set.

00:19:04.369 --> 00:19:09.509
So at this point I think we could say that
System Image Utility covers the basics.

00:19:09.509 --> 00:19:16.910
We can create a master image, we can create our deployment
set, we can do some basic pre and post restore actions.

00:19:16.910 --> 00:19:19.279
And we can do all of this with automation.

00:19:19.279 --> 00:19:24.549
For a lot of system administrators, this is
fantastic, this is a great base deployment.

00:19:24.549 --> 00:19:29.149
For a lot of other people though and I think probably a
lot of people in this room, we do want a little bit more.

00:19:29.150 --> 00:19:30.800
We want to customize our deployment.

00:19:30.799 --> 00:19:35.539
We've got a hundred or ten thousand or a
million machines that we need to deploy

00:19:35.539 --> 00:19:38.599
and we want to add some more customization to this.

00:19:38.599 --> 00:19:41.449
So how else can we do that?

00:19:41.450 --> 00:19:45.880
Well the first thing that we can do
is we can install additional software.

00:19:45.880 --> 00:19:51.980
There is an Automator action that's built in the system
image utility that allows us to specify additional packages

00:19:51.980 --> 00:19:57.519
of software and scripts that we
want to install after our restore.

00:19:57.519 --> 00:20:00.619
Now this may seem to make more sense
with a package based deployment.

00:20:00.619 --> 00:20:08.029
So remember the package based deployment started with our
Mac OS X installer DVD and if we just install Mac OS X,

00:20:08.029 --> 00:20:10.049
obviously there's a lot of other
things that we want to add on there,

00:20:10.049 --> 00:20:14.289
say Microsoft Office, Parallels, lots of other things.

00:20:14.289 --> 00:20:18.349
It does have some merit in a restore
based deployment too though.

00:20:18.349 --> 00:20:23.299
Anytime you factor out the software that's going to go
out to your machines, it gives you a lot more flexibility

00:20:23.299 --> 00:20:28.149
in what software gets installed
onto each one of your end machines.

00:20:28.150 --> 00:20:31.050
I'm not going to go into a lot of detail on this either.

00:20:31.049 --> 00:20:34.649
There's a lot of different ways to create
packages, there's tons of resources

00:20:34.650 --> 00:20:37.269
on the internet, Mac enterprise is a great site for this.

00:20:37.269 --> 00:20:43.049
There was also a session yesterday, Session 304,
that went into a lot of detail

00:20:43.049 --> 00:20:46.710
on the why and the how of package based deployment.

00:20:46.710 --> 00:20:51.940
I encourage you to review those slides and check
out that podcast when that becomes available.

00:20:54.440 --> 00:21:01.180
So there's this thing, system image
utility really leverages installer.

00:21:01.180 --> 00:21:07.320
That's just the technology that's built into Mac
OS X and installer's great but it's an installer.

00:21:07.319 --> 00:21:10.659
It just kind of installs things.

00:21:10.660 --> 00:21:16.130
So the only way that we can legitimately
customize or extend the functionality

00:21:16.130 --> 00:21:20.390
of System Image Utility is by adding package installers.

00:21:20.390 --> 00:21:26.800
That's kind of what installers is built to handle,
so that's what System Image Utility can do.

00:21:26.799 --> 00:21:30.159
With that condition in mind, maybe we
should sharpen our pencils and figure

00:21:30.160 --> 00:21:32.690
out what else we can do with package installers.

00:21:32.690 --> 00:21:37.850
So a lot of you probably already know package
installers can also run shell scripts.

00:21:37.849 --> 00:21:40.980
And there's this thing that we like to
call payload free package installers

00:21:40.980 --> 00:21:44.750
that won't install anything at all
it will just run a shell script.

00:21:44.750 --> 00:21:46.390
So this is great.

00:21:46.390 --> 00:21:52.030
I've got a shell script that I've used for
deployment before, I can take my shell script,

00:21:52.029 --> 00:21:57.029
drop it into a package installer, I can drop
my package installer into System Image Utility,

00:21:57.029 --> 00:22:02.750
System Image Utility will create my net install set
and copy my package installer into the net install set.

00:22:02.750 --> 00:22:08.140
I'm going to net boot my clients, they'll
restore and then they'll install my package

00:22:08.140 --> 00:22:12.360
which doesn't install anything but
it does run my post lite script.

00:22:12.359 --> 00:22:14.589
This is great.

00:22:14.589 --> 00:22:17.079
Whew. Let me ask you something though.

00:22:17.079 --> 00:22:23.769
When I said Automator's now part of the DNA of system image
utility, did you think I'd stand up here and say we're going

00:22:23.769 --> 00:22:28.309
to customize our Mac OS X mass deployment
with a whole bunch of shell scripts?

00:22:28.309 --> 00:22:29.069
I hope not.

00:22:29.069 --> 00:22:32.740
I really hope not.

00:22:32.740 --> 00:22:37.039
If I were to stop here, we wouldn't
be anywhere closer to the idea

00:22:37.039 --> 00:22:40.519
of deployment solution than we ever have been before.

00:22:40.519 --> 00:22:45.450
We'd still be longing for additional functionality
and we'd be turning to command line tools

00:22:45.450 --> 00:22:49.140
and shell scripts to customize our Mac OS X deployment.

00:22:49.140 --> 00:22:53.700
To customize the deployment of
hundreds of thousands of machines.

00:22:53.700 --> 00:22:57.710
Who wakes up in the morning and
says gee I can't wait to get to work

00:22:57.710 --> 00:23:00.750
to tweak some shell scripts to
manage my thousands of machines?

00:23:00.750 --> 00:23:01.170
( Laughter )

00:23:01.170 --> 00:23:08.550
>> Yes I know I hear some, I know I hear you
and I am not knocking shell scripts, I'm not.

00:23:08.549 --> 00:23:12.049
A lot of us here are plenty comfortable with shell scripts.

00:23:12.049 --> 00:23:13.240
Heck you know I am.

00:23:13.240 --> 00:23:14.650
I love them they're great.

00:23:14.650 --> 00:23:19.340
But there's a lot of system administrators
that do want a graphical user interface

00:23:19.339 --> 00:23:22.569
for specifying the post restore customizations.

00:23:22.569 --> 00:23:26.629
In particular, I mean we're a bunch
of Mac heads here for the most part.

00:23:26.630 --> 00:23:28.690
Ninety nine percent maybe?

00:23:28.690 --> 00:23:33.650
If we want to woo system administrators from
say the Windows platform to our platform,

00:23:33.650 --> 00:23:36.790
deployment is one of the first things that gets in the way.

00:23:36.789 --> 00:23:37.619
How do I deploy?

00:23:37.619 --> 00:23:48.639
And if we're going to shove shell scripts in their face,
maybe that's not the best way to get them to our platform.

00:23:48.640 --> 00:23:51.810
So there has to be a better way.

00:23:51.809 --> 00:23:53.859
And again, I'm not knocking shell scripts.

00:23:53.859 --> 00:23:54.299
They're great.

00:23:54.299 --> 00:23:57.720
They give us unattended automation and
the number of command line utilities

00:23:57.720 --> 00:24:00.809
that are built into Mac OS X, it's just incredible.

00:24:00.809 --> 00:24:04.349
You can do anything with Unix that's what I always say.

00:24:04.349 --> 00:24:06.669
It's the interface where things break down though.

00:24:06.670 --> 00:24:12.070
You set some newbie system administrator in front of
a terminal window and it's got the blinking cursor

00:24:12.069 --> 00:24:14.869
and they're supposed to type text
into it to make it do things?

00:24:14.869 --> 00:24:16.649
That's where things fall down.

00:24:16.650 --> 00:24:20.250
Fortunately Automator is here to bridge the gap.

00:24:20.250 --> 00:24:23.710
So deployment already consists
of a series of discrete tasks.

00:24:23.710 --> 00:24:27.789
You can line up a list of tasks
and that would be your deployment.

00:24:27.789 --> 00:24:33.569
We've also recognized that having modularity in
our deployment tools gives us a lot of flexibility

00:24:33.569 --> 00:24:39.460
into how much customization we
add into our deployment solution.

00:24:39.460 --> 00:24:46.670
So all that we need to do now, as developers and system
administrators is create an Automator action for each task

00:24:46.670 --> 00:24:49.450
that we want to achieve in our deployment.

00:24:49.450 --> 00:24:55.259
These Automator actions will provide a very
friendly interface for the case specific options,

00:24:55.259 --> 00:25:01.079
just the information that they need to provide to
customize it to their own situation while it's gearing all

00:25:01.079 --> 00:25:08.559
of the back end details, everything that's
driven by command line tools and shell scripts.

00:25:09.859 --> 00:25:15.209
So Apple can provide all of this functionality
there is definitely no lack of talent

00:25:15.210 --> 00:25:18.630
at Apple for creating very innovative solutions.

00:25:18.630 --> 00:25:23.980
But I think that the developer community, the
deployment community can play a large role

00:25:23.980 --> 00:25:30.269
in not only defining what functionality should exist,
raise your hand if you've ever submitted a bug report,

00:25:30.269 --> 00:25:34.609
but also in developing that functionality.

00:25:34.609 --> 00:25:39.240
Automator actions of course can be written using
Objective-C, obviously we would assume that.

00:25:39.240 --> 00:25:45.079
But they can also be written using AppleScript Studio and a
lot of system administrators are familiar with AppleScript,

00:25:45.079 --> 00:25:49.409
even coming from the Windows world,
they're familiar with, what's it called?

00:25:49.410 --> 00:25:53.850
Visual basic or something like that.

00:25:53.849 --> 00:25:59.429
So we, deployers, we know what we need.

00:25:59.430 --> 00:26:03.980
We can develop this functionality
and when I say we, I mean you.

00:26:03.980 --> 00:26:06.049
( Laughter )

00:26:06.049 --> 00:26:10.690
>> So here's my hit list, this is the list of
functionality that I would like to see in addition

00:26:10.690 --> 00:26:16.029
to the core functionality that is
provided by Apple and System Image Utility.

00:26:16.029 --> 00:26:18.450
You probably recognize a lot of items up here on this list.

00:26:18.450 --> 00:26:22.539
This is a list of the shell scripts that I've
included with net restore over the last several years.

00:26:22.539 --> 00:26:26.359
I think that we can do some really cool things
with these shell scripts using Automator.

00:26:26.359 --> 00:26:33.269
So what I'd like to do next is take a look at what
we can do with one of these items, with Automator.

00:26:33.269 --> 00:26:38.859
Before I get into that though, as you probably
imagined, there are some implementation details.

00:26:38.859 --> 00:26:40.089
There's some things to keep in mind.

00:26:40.089 --> 00:26:43.240
So before we get into the example,
I want to lay some ground rules.

00:26:43.240 --> 00:26:49.099
First of all, remember that the product of our
Automator action has to be a package installer.

00:26:49.099 --> 00:26:53.159
That's what we're going to be able to put into
our net install image is a package installer.

00:26:53.160 --> 00:26:57.070
So whatever we do in our action,
we have to put a package somewhere.

00:26:57.069 --> 00:27:01.779
And what we're going to do with that package is,
it's going to be a payload free package installer,

00:27:01.779 --> 00:27:06.700
it's going to have a postflight script and whatever we
provide in the interface, we're going to take the options

00:27:06.700 --> 00:27:12.180
that the user specified and we're going to use
that to populate variables in our post lite script.

00:27:12.180 --> 00:27:19.019
If there are any additional utilities that we
need to, need in addition to our shell script,

00:27:19.019 --> 00:27:25.660
maybe a custom command line application, we're going to have
to include that as a resource in our packages installer.

00:27:25.660 --> 00:27:32.130
If our custom utility requires any frameworks
that aren't part of the base net install set,

00:27:32.130 --> 00:27:37.030
so that net boot image that we net boot from
for deployment, things get a little bit hairy.

00:27:37.029 --> 00:27:41.099
You would actually have to crack open that net
boot image and install your own frameworks.

00:27:41.099 --> 00:27:41.929
Try to avoid that.

00:27:41.930 --> 00:27:44.000
And I'm speaking to you as developers.

00:27:44.000 --> 00:27:50.799
What I would like to see is a deployment community where
we contribute Automator actions to a collective whole.

00:27:50.799 --> 00:27:55.319
So if you're going to develop Automator actions
for that community try to avoid the type

00:27:55.319 --> 00:27:59.059
of situation that has lots of external dependencies.

00:28:00.109 --> 00:28:04.639
Finally System Image Utility acting
as a work flow administrator,

00:28:04.640 --> 00:28:08.960
it passes a dictionary of information
from each action down to the next.

00:28:08.960 --> 00:28:15.600
So we're actually going to take that dictionary
of information and use one of the arrays within it

00:28:15.599 --> 00:28:22.169
to let System Image Utility know where we're
putting functionality into this process.

00:28:22.170 --> 00:28:26.160
So those are the ground rules.

00:28:26.160 --> 00:28:29.040
Set firmware password.

00:28:29.039 --> 00:28:31.089
I love this one.

00:28:31.089 --> 00:28:37.439
It's really super simple, the firmware password
post action script is probably nine lines of code,

00:28:37.440 --> 00:28:39.450
is really easy and there's only one variable.

00:28:39.450 --> 00:28:41.759
So I think it's going to be a really
good example for demonstrating how

00:28:41.759 --> 00:28:45.710
to create an Automator action that
plugs in to System Image Utility.

00:28:45.710 --> 00:28:50.480
So to do this, here's what we would do, and again,
you can create Automator actions in Objective-C,

00:28:50.480 --> 00:28:59.180
it's probably what I would prefer but for the interest
of system administrators who don't have lots of time

00:28:59.180 --> 00:29:01.950
to learn Objective-C we're doing it in AppleScript Studio.

00:29:01.950 --> 00:29:05.910
So step one: create a new apple script Automator action.

00:29:05.910 --> 00:29:07.200
You do that in Xcode.

00:29:07.200 --> 00:29:11.740
Next go ahead and set up a really
simple interface in interface builder.

00:29:11.740 --> 00:29:15.250
In this case it's really simple, there's
just a couple secure text fields.

00:29:15.250 --> 00:29:20.710
I had another little field with a checkmark
just so people know if their passwords match.

00:29:21.930 --> 00:29:26.100
Next, we need to create our payload free package installer.

00:29:26.099 --> 00:29:32.899
Now we could leverage the package maker command line utility
to do this for us programmatically when our action runs.

00:29:32.900 --> 00:29:35.620
But this payload free package installer
is really pretty simple.

00:29:35.619 --> 00:29:37.819
So I think that would add just a lot of extra code.

00:29:37.819 --> 00:29:43.730
So step one for me is to just go into package
maker and create my payload free package installer.

00:29:43.730 --> 00:29:46.069
It's going to have an empty folder for the contents

00:29:46.069 --> 00:29:50.399
and then we have just two things that
we're going to include as scripts.

00:29:50.400 --> 00:29:55.210
We're going to include that OFPW utility
that's hosted by Mac enterprise dot org.

00:29:55.210 --> 00:29:57.910
That's the thing that actually sets the firmware password,

00:29:57.910 --> 00:30:01.269
and then we're going to include
our template post lite script.

00:30:01.269 --> 00:30:05.319
So in the script you can see its pretty boiler plate.

00:30:05.319 --> 00:30:08.549
The one thing of interest is the password variable.

00:30:08.549 --> 00:30:13.940
We're going to have to change that password variable
during the runtime of our action so I like to set this

00:30:13.940 --> 00:30:17.900
to some easily parseable string in
this case percent password percent.

00:30:17.900 --> 00:30:24.690
I've got a nice one liner in Perl that's
going to replace that really easily for us.

00:30:24.690 --> 00:30:29.180
So once we've created our payload free package
installer we're going to drop that package

00:30:29.180 --> 00:30:31.450
into our Automator action project in Xcode.

00:30:31.450 --> 00:30:36.590
It will pop up a little dialogue asking if we want
to copy it into our Xcode project, click yes,

00:30:36.589 --> 00:30:42.740
that's what we want to do because when our action
runs, I'm sorry when we build our action in Xcode,

00:30:42.740 --> 00:30:48.420
it's actually going to copy that package
installer into our actions bundle.

00:30:48.420 --> 00:30:53.259
So wherever our action goes, be it distributed
on the internet or just around our network,

00:30:53.259 --> 00:30:58.450
that payload free package installer the template,
is going to be right there within our action.

00:30:58.450 --> 00:31:10.549
So the next thing that we need to do is configure our
Automator action to accept input from System Image Utility.

00:31:10.549 --> 00:31:13.940
And last Friday I discovered a very interesting thing.

00:31:13.940 --> 00:31:21.830
It only affects AppleScript Automator actions and
I'm hesitant to even describe this little caveat

00:31:21.829 --> 00:31:25.689
because it's a one time thing and
hopefully it's going to be so transparent

00:31:25.690 --> 00:31:27.500
to you all that you'll never have to deal with it.

00:31:27.500 --> 00:31:29.119
But here it is.

00:31:29.119 --> 00:31:34.359
AppleScript Automator actions will spit out an NS
Apple event descriptor instead of an NS mutable array.

00:31:34.359 --> 00:31:36.909
And that's kind of icky.

00:31:36.910 --> 00:31:41.279
So we actually need a converter
action that will convert the output

00:31:41.279 --> 00:31:46.220
from our AppleScript Automator action
to the next System Image Utility action.

00:31:46.220 --> 00:31:48.990
Again, I've already done this for you.

00:31:48.990 --> 00:31:54.759
In the sample code that I'll show you at the end of this,
I've included a converter action that does this for you.

00:31:54.759 --> 00:32:01.049
As long as you include that in your project, or
you include it in your Automator actions folder,

00:32:01.049 --> 00:32:03.579
you're going to be all set and
you're never even going to notice.

00:32:03.579 --> 00:32:06.059
Anyway so for reference, here it is.

00:32:06.059 --> 00:32:10.190
This is what your info.plist has
to look like for your Automator action.

00:32:10.190 --> 00:32:18.460
I feel like I missed something.

00:32:18.460 --> 00:32:24.730
I did miss something, I missed a slide.

00:32:24.730 --> 00:32:31.710
No I didn't, I guess its next.

00:32:31.710 --> 00:32:35.920
That or it mysteriously disappeared and I
wanted to see if I could act on my feet.

00:32:35.920 --> 00:32:41.590
So the next thing that we need to do during runtime
is we need to take the input that we received

00:32:41.589 --> 00:32:45.039
and we need to, it did miss a slide, I swear.

00:32:45.039 --> 00:32:49.509
I'm sorry, there was a slide here that was supposed to say
what we're supposed to do during the action of our script.

00:32:49.509 --> 00:32:52.970
It's pretty important because we need
to do two things when our action runs,

00:32:52.970 --> 00:32:56.829
we need to copy our package installer
to some temporary location.

00:32:56.829 --> 00:33:03.179
We're going to do that with a really simple do shell
script ditto my package to temp location, one line.

00:33:03.180 --> 00:33:07.769
And we need another line that's going to
take the input from the user, the password,

00:33:07.769 --> 00:33:10.480
and plug that into our template post lite script.

00:33:10.480 --> 00:33:11.569
Another one liner.

00:33:11.569 --> 00:33:17.389
Do shell script, Perl, blah, blah,
blah, blah, blah, path my shell script.

00:33:17.390 --> 00:33:21.259
You'll see that, I'm sorry it's not up here.

00:33:21.259 --> 00:33:27.859
So once we're done with that we need to take
that dictionary of information that was passed

00:33:27.859 --> 00:33:32.629
from the previous Automator action and modify
it to let it know where our package is located.

00:33:32.630 --> 00:33:39.680
So within that dictionary of input from the previous
action, there is an array keyed by package list.

00:33:39.680 --> 00:33:47.060
That package list just contains an array of paths to
various packages that we want to add to our net install set.

00:33:47.059 --> 00:33:52.669
So we're going to plug in the path to
our package which is temp FW dot package,

00:33:52.670 --> 00:33:58.730
and then as our Automator work flow runs, it eventually
is going to get down to the create image action

00:33:58.730 --> 00:34:03.740
and that create image action is going to create our
net install set, it's going to create our master image,

00:34:03.740 --> 00:34:10.610
it's then going to iterate through this package list
array and copy each package into our net install set.

00:34:10.610 --> 00:34:12.200
So that's all there is to it.

00:34:12.199 --> 00:34:19.159
All that we had to do is take input from the user, plug
that into a template post lite script, pop out a package

00:34:19.159 --> 00:34:25.429
and let System Image Utility know where it is because then
System Image Utility is going to do the rest of it for us.

00:34:25.429 --> 00:34:27.480
Piece of cake right?

00:34:27.480 --> 00:34:34.860
There's like four months between now and Leopard, you
guys should crank out like a dozen of these at least.

00:34:34.860 --> 00:34:43.289
So the sample code project that I developed to describe
this procedure is available up on the ADC website at least

00:34:43.289 --> 00:34:46.610
if it isn't right now it should be
available within the next couple days.

00:34:46.610 --> 00:34:49.130
I encourage you guys to take a look at that.

00:34:49.130 --> 00:34:53.340
Download it, check it out and please
go ahead and try to create your own.

00:34:53.340 --> 00:34:58.730
Automators are very empowering technology, or
the deployers, we always rely on somebody else

00:34:58.730 --> 00:35:02.230
to give us the tools to customize our deployment.

00:35:02.230 --> 00:35:03.740
Now it's in our hands.

00:35:03.739 --> 00:35:05.489
We can do it.

00:35:05.489 --> 00:35:09.369
And again, I say we, I mean you.

00:35:09.369 --> 00:35:13.349
And we can do this now with the tools that are in Leopard.

00:35:13.349 --> 00:35:16.730
So of course I use the word now very liberally.

00:35:16.730 --> 00:35:18.869
Leopard's not going to be available just yet.

00:35:18.869 --> 00:35:23.980
Up next is Chris LaSalle, he's going to show
us what Pixar is doing with the current set

00:35:23.980 --> 00:35:26.039
of tools for their Mac OS X mass deployment.

00:35:26.039 --> 00:35:26.529
( Applause )

00:35:26.530 --> 00:35:38.570
>> Hi, hi.

00:35:38.570 --> 00:35:45.670
I'm Chris and I am the lead infrastructure
admin for the Mac group at Pixar.

00:35:45.670 --> 00:35:55.760
And I'm going to talk about how we use net boot in something
we call Metro which is our Macintosh deployment system

00:35:55.760 --> 00:36:03.900
that we built back in the Jaguar days and it's constantly
being modified and we're really looking forward to Leopard.

00:36:03.900 --> 00:36:07.349
First a little bit about our environment.

00:36:07.349 --> 00:36:13.929
At Pixar we have four buildings on one campus, we have
about nine hundred Macs spread across those buildings,

00:36:13.929 --> 00:36:18.440
and nine hundred Linux machines and about
two hundred Windows machines as workstations.

00:36:18.440 --> 00:36:21.570
Our network infrastructure is pretty diverse it's grown

00:36:21.570 --> 00:36:25.000
up over the last twenty years from
a very Linux based background.

00:36:25.000 --> 00:36:34.289
We have an LDAP database that's our authoritative source
of information for users and machines and everything else,

00:36:34.289 --> 00:36:45.269
it's all in LDAP and our NFS data and NIS data and DHCP
data and DNS data all comes to out of our LDAP database.

00:36:45.269 --> 00:36:49.869
Most of the Mac accounts, even though the Macs are
all on this network and all have access to this stuff,

00:36:49.869 --> 00:36:53.960
our Macs are all pretty standalone,
they don't net boot for normal use.

00:36:53.960 --> 00:37:01.329
They are local, they have local accounts, they have
access to the network but everything's all local.

00:37:01.329 --> 00:37:04.599
We've done that for various reasons especially historical.

00:37:04.599 --> 00:37:11.299
We're looking forward to getting away from that but for
now that's how it is and Metro is built around that.

00:37:11.300 --> 00:37:15.950
But we still use net boot as an
administrative tool for deploying all

00:37:15.949 --> 00:37:19.669
of these Macs in this really complex environment.

00:37:20.900 --> 00:37:31.660
So Metro is a collection of shell scripts of course,
and PHP scripts and Perl scripts that all work together

00:37:31.659 --> 00:37:36.519
to do four basic tasks that we use as administrators.

00:37:36.519 --> 00:37:39.730
The users never really see net boot.

00:37:39.730 --> 00:37:46.269
But as administrators we use it primarily to deploy new
Macs, that's the most thing, the thing we do every day.

00:37:46.269 --> 00:37:52.110
We pull a Mac out of the box and
we net boot it and we use Metro.

00:37:52.110 --> 00:37:56.019
We also use it to troubleshoot and diagnose
Macs that are out there on a user's desk.

00:37:56.019 --> 00:38:01.849
And say we need to run a disk utility on it or
something to do some repair, the admin will net boot it

00:38:01.849 --> 00:38:06.069
and then have all the tools they expect to
have and they're not booted off a hard drive

00:38:06.070 --> 00:38:08.309
so they can start doing things to the hard drive.

00:38:08.309 --> 00:38:10.730
We use it to redeploy existing Macs.

00:38:10.730 --> 00:38:16.480
We've got one in inventory, we need to send it back
out to another user, we'll net boot it and use Metro

00:38:16.480 --> 00:38:19.659
to completely reconfigure it for the new user.

00:38:19.659 --> 00:38:24.210
And we use it for major OS upgrades
say from Tiger to Leopard.

00:38:24.210 --> 00:38:28.500
We plan to be using Metro, we also used
it, we've used it since the days of Jaguar.

00:38:28.500 --> 00:38:35.050
That was our first, Jaguar to Panther was our very
first time really pushing Metro to its limits.

00:38:35.050 --> 00:38:38.850
And of course it's all based upon net boot.

00:38:38.849 --> 00:38:43.980
We couldn't do it without net boot so
let's talk about how we use net boot.

00:38:43.980 --> 00:38:49.170
We start with a net boot image, using the
traditional Tiger net boot image tools,

00:38:49.170 --> 00:38:54.000
we build one with system image
utility, but we really strip it down.

00:38:54.000 --> 00:38:58.349
We customize it as much as possible and we
take everything out of it that we don't need.

00:38:58.349 --> 00:39:06.210
And then when it's made our image, that's not stripped
down enough, so we will mount the image and we used

00:39:06.210 --> 00:39:12.440
to do this manually, we would go through and tweak the
image and remove things and add things and do what we wanted

00:39:12.440 --> 00:39:15.840
with it, but we finally said, no we do
this too much lets make a shell script.

00:39:15.840 --> 00:39:17.809
So we made a shell script to do all that stuff.

00:39:17.809 --> 00:39:23.049
So that script will mount the image after
we've made it and apply all these modifications

00:39:23.050 --> 00:39:26.039
to it and it will strip it down even farther.

00:39:26.039 --> 00:39:35.090
And then we'll put it on our net boot server and
use server admin to set it up and make it live.

00:39:35.090 --> 00:39:37.780
Here's an example of some of the
things that, that shell script does.

00:39:37.780 --> 00:39:45.250
We do more than this, but we will resize the image as
appropriate depending upon what we want to do with it.

00:39:45.250 --> 00:39:51.519
First off we'll remove most of the applications from it
like since every net booted machine at Pixar is being used

00:39:51.519 --> 00:39:55.179
by an administrator for administrative
purposes, we don't need iTunes on there.

00:39:55.179 --> 00:39:56.429
So we'll take iTunes off.

00:39:56.429 --> 00:39:58.489
We'll take Chess off, we'll take almost everything

00:39:58.489 --> 00:40:02.729
in the applications folder off of
there, because we just don't need it.

00:40:02.730 --> 00:40:07.599
We'll also set the root password because most
of the administrators will log in as root

00:40:07.599 --> 00:40:14.219
to do various high level things with it, we will create a
single admin account which gets used for other purposes.

00:40:14.219 --> 00:40:19.500
And this is all happening on the image
as it's mounted just on our work station.

00:40:19.500 --> 00:40:24.750
We'll create the SSH keys because most of our
administrators are used to using the command line,

00:40:24.750 --> 00:40:30.690
they'll want to net boot a machine and SSH into it
to start running some tools that we have on there.

00:40:30.690 --> 00:40:40.119
So if we don't generate these keys on the disk image itself
then every time a client net boots, it's net booting fresh

00:40:40.119 --> 00:40:48.199
and it's going to generate those keys the first time you SSH
in and that takes about thirty seconds on a slow machine.

00:40:48.199 --> 00:40:50.250
So you sit there and wait, and wait and wait.

00:40:50.250 --> 00:40:56.329
So in order just to avoid that way, we generate
them once and then we've got the SSH keys.

00:40:56.329 --> 00:41:02.789
We also, and this is important, we create a little RC
dot local script that we put onto the net boot image.

00:41:02.789 --> 00:41:09.789
This little shell script will run during the boot process
and it will look at the environment it's booting in

00:41:09.789 --> 00:41:16.320
and kick off a cascade of other scripts that will allow us
to do those four different functions that we want to do.

00:41:16.320 --> 00:41:24.800
And we also just touch a little file on the image itself so
that some of these scripts which run both in the net booted

00:41:24.800 --> 00:41:29.940
and the locally booted environments, they need to
know whether or not they're net booted very quickly,

00:41:29.940 --> 00:41:32.630
so we just touch a little file on
the image and if that file is there

00:41:32.630 --> 00:41:36.610
and knows it's net booted, and
the scripts connect appropriately.

00:41:38.420 --> 00:41:44.630
So when a machine net boots at Pixar, the
little RC dot local script starts running.

00:41:44.630 --> 00:41:48.550
And it will basically branch into one
of two different modes of net booting.

00:41:48.550 --> 00:41:55.990
It will do a normal net boot in which case the administrator
can log in to the GUI, or can log into the terminal,

00:41:55.989 --> 00:42:00.149
and we use that mainly for a new
machine deployment and for diagnostics

00:42:00.150 --> 00:42:03.309
and troubleshooting when there's a problem with the machine.

00:42:03.309 --> 00:42:08.500
But we also have kind of like a net install
process we have an auto install process

00:42:08.500 --> 00:42:16.369
where the RC dot local strip will see certain things
happening on the disk drive and on the net boot image

00:42:16.369 --> 00:42:21.119
and it will say, okay I need to start immediately
installing a system and it will go do that.

00:42:21.119 --> 00:42:27.230
And in that case it won't give anyone
an option to log in to the GUI.

00:42:27.230 --> 00:42:30.849
So let's look at the normal net boot process.

00:42:30.849 --> 00:42:35.969
In this process RC dot local will take a look
at things and say oh I need to boot normally,

00:42:35.969 --> 00:42:40.279
this is what happens if you just
boot a machine with the N key down.

00:42:40.280 --> 00:42:46.890
During the boot process, RC dot local will, through
other scripts, it will install various GUI admin tools

00:42:46.889 --> 00:42:53.319
like Carbon Copy Cloner or Disk Utility or, well Disk
Utility is already there, but it will do Disk Warrior

00:42:53.320 --> 00:42:59.539
or any number of other admin tools that we might
want to do troubleshooting work on the machine.

00:42:59.539 --> 00:43:06.269
It will also install all of the command line tools that
we use at Pixar that we've home grown over the years

00:43:06.269 --> 00:43:08.679
that we're all used to having on every machine.

00:43:08.679 --> 00:43:11.899
It will just install them so that when
an admin logs in through terminal,

00:43:11.900 --> 00:43:14.619
they'll have the tools they're used to having.

00:43:14.619 --> 00:43:17.630
It also configures the environment
both in the GUI and the shell.

00:43:17.630 --> 00:43:25.160
For example it modifies roots dock during the boot process
so that when it finally boots up and administrator can log

00:43:25.159 --> 00:43:31.569
in to the GUI, and the dock with all the tools
is right there, and it does this on the fly so that

00:43:31.570 --> 00:43:36.360
when there's a new version of something or when we
want to add another tool, we just change a script

00:43:36.360 --> 00:43:39.059
and it suddenly appears the next time someone net boots.

00:43:39.059 --> 00:43:45.750
It also modifies the shell environment it will create
new path environments it will create everything

00:43:45.750 --> 00:43:49.900
that the admin needs so that when they
log into the machine, start working on it,

00:43:49.900 --> 00:43:54.840
they have the tools that they expect
on any Pixar configured machine.

00:43:54.840 --> 00:43:58.460
Most importantly it will activate a web front end.

00:43:58.460 --> 00:44:07.369
It downloads from our central server a bunch of PHP pages
that it puts into library web server documents it turns

00:44:07.369 --> 00:44:15.750
on Apache after activating PHP, and then once the
machine comes up, the admin goes back to their desk.

00:44:15.750 --> 00:44:23.619
Actually they just, the admin will take a machine out of
the box, plug it into the network, plug it into a keyboard,

00:44:23.619 --> 00:44:29.069
hold down the M key and boot it, once they wait a few
seconds they go back to their desk, they open up a web page

00:44:29.070 --> 00:44:33.150
to the net boot server which shows a
log of all the net booting machines.

00:44:33.150 --> 00:44:41.210
And they can see the machine that they just net booted,
they click a button, and they will see this webpage.

00:44:41.210 --> 00:44:49.110
This webpage gathers information from the machine
itself and gives them some fields to fill out

00:44:49.110 --> 00:44:54.700
and once they fill this all out they will create the L
app entry in our central LDAP server for this machine

00:44:54.699 --> 00:44:59.239
from which all of the other stuff
about this machine will get created.

00:44:59.239 --> 00:45:03.949
So they can fill out this form,
click the create or update button,

00:45:03.949 --> 00:45:08.460
and the record is either created or updated as appropriate.

00:45:08.460 --> 00:45:12.130
And they do this from their desk after they've
booted the machine and so they can boot their machine

00:45:12.130 --> 00:45:15.269
in another room and do all this from their webpage.

00:45:15.269 --> 00:45:24.750
Then they go back after they've created the LDAP page,
they get a similar page but this page let's them decide how

00:45:24.750 --> 00:45:27.659
and what they're going to actually install onto the machine.

00:45:27.659 --> 00:45:31.750
They can select which of the hard
drives that's connected to the machine.

00:45:31.750 --> 00:45:35.639
They can choose whether or not they're going to
erase it or repair it before they run an installer.

00:45:35.639 --> 00:45:39.619
They can choose which installer they're going to run
or they can let the system just choose the default

00:45:39.619 --> 00:45:44.029
and solar for an Intel machine or PPC machine or whatever.

00:45:44.030 --> 00:45:48.080
Or if they've got a machine that's going to be used
for certain activities that needs an older version

00:45:48.079 --> 00:45:51.230
of the system, it will know that automatically.

00:45:51.230 --> 00:45:54.840
And if they just let it by default,
it will install the right system.

00:45:54.840 --> 00:45:59.030
They can choose to install some of the network
installed packages that we have available

00:45:59.030 --> 00:46:05.700
that we build our own little packages for and they
come down through the network after the installation.

00:46:05.699 --> 00:46:09.799
All they do is click that button when
they fill out the form that says build out

00:46:09.800 --> 00:46:12.860
and the machine immediately starts installing.

00:46:12.860 --> 00:46:16.230
And they can just kind of watch the
progress on a couple of different web pages.

00:46:16.230 --> 00:46:23.010
In about twenty to thirty minutes, it's done, they can
unplug it, take it to the user, it's completely configured.

00:46:24.820 --> 00:46:26.910
So that's how we build out a new machine.

00:46:26.909 --> 00:46:27.460
( Applause )

00:46:27.460 --> 00:46:41.240
>> For existing machines that are already out
there, we say we want to go from Tiger to Leopard.

00:46:41.239 --> 00:46:47.829
We will, and this is how we move from
ten three to 10.4 and actually even

00:46:47.829 --> 00:46:50.670
from ten two to ten three, we started with this.

00:46:50.670 --> 00:46:59.829
On every Pixar configured machine there's a little shell
script that we will use to initiate an auto install.

00:46:59.829 --> 00:47:08.049
So we can just SSH into a machine and will run
this command that will tell it to auto install.

00:47:08.050 --> 00:47:14.200
It will net boot but this time instead of doing all
this on the fly configuration during the boot process,

00:47:14.199 --> 00:47:17.339
it will say oh I'm just immediately
going to start installing.

00:47:17.340 --> 00:47:22.170
So first it does a couple of preinstall tasks because
it doesn't bother installing all the admin tools

00:47:22.170 --> 00:47:24.320
and all that stuff because it doesn't need to.

00:47:24.320 --> 00:47:26.780
All it needs to do is start installing.

00:47:26.780 --> 00:47:33.560
So it first checks like, if on a laptop okay,
is there a battery or are we plugged in.

00:47:33.559 --> 00:47:36.710
If it's just running on battery
power it will stop and give an error.

00:47:36.710 --> 00:47:39.699
Is there enough hard drive space for what I want to do?

00:47:39.699 --> 00:47:42.139
It runs a bunch of checks to make sure things are good.

00:47:42.139 --> 00:47:47.529
Assuming they're all good, it immediately starts running
the installer program using the installer package

00:47:47.530 --> 00:47:49.150
that we specified.

00:47:49.150 --> 00:47:54.200
And after the install it will run
all of the configuration for Pixar.

00:47:54.199 --> 00:47:57.739
So that all happens while the machine is at the users desk.

00:47:57.739 --> 00:48:01.729
We can SSH in, type a command, the
machine net boots, off it goes.

00:48:01.730 --> 00:48:07.639
Twenty minutes later the user can
log back in, it's got the new OS.

00:48:07.639 --> 00:48:09.420
So how do we initiate that process?

00:48:09.420 --> 00:48:13.889
Here's the shell script that we
use or a little bit of it anyway.

00:48:13.889 --> 00:48:21.210
Basically the admin makes an SSH connection to the user's
machine, runs the script, it asks a bunch of questions.

00:48:21.210 --> 00:48:28.090
The script is kind of like a mix of the start of the
preference pane, and the build out webpage that you just saw

00:48:28.090 --> 00:48:30.870
where it asks like which disk do you want to install on.

00:48:30.869 --> 00:48:35.609
It will ask the admin a bunch of questions,
if they want they can erase the drive,

00:48:35.610 --> 00:48:41.420
they can run a repair on the drive, they choose which
drive and this little script will just write a bunch

00:48:41.420 --> 00:48:45.579
of little files onto the machine in a
little hidden directory and then the RC'd

00:48:45.579 --> 00:48:50.349
out local file during the net boot
process, will see those and say okay I need

00:48:50.349 --> 00:48:53.019
to start installing using these parameters.

00:48:53.019 --> 00:48:54.550
And off it goes.

00:48:54.550 --> 00:48:57.370
So that's how the auto install process works

00:48:57.369 --> 00:49:01.059
and we'll probably be using something
very similar when we move to Leopard.

00:49:01.059 --> 00:49:06.409
We're hoping actually to write a GUI wrapper
with AppleScript Studio or something around this,

00:49:06.409 --> 00:49:10.289
so that when we make the move to Leopard, we
can actually have the users do it themselves.

00:49:10.289 --> 00:49:14.369
We'll just say run this program, fill out
the form, type your password, and go away.

00:49:14.369 --> 00:49:16.259
( Laughter )

00:49:16.260 --> 00:49:18.660
>> And come back in a half an hour, go have lunch.

00:49:18.659 --> 00:49:19.799
( Applause )

00:49:19.800 --> 00:49:24.220
>> And then after that they'll
come back and they'll have Leopard.

00:49:24.219 --> 00:49:28.079
So where are we going with Metro from here?

00:49:28.079 --> 00:49:33.659
Well Metro's been around for awhile now so we're trying
to, we're always rewriting it and trying to make it better.

00:49:33.659 --> 00:49:40.179
Right now I'm working on it to make it a little
more modular so that we can make changes on the fly.

00:49:40.179 --> 00:49:44.940
I'm also implementing a live environment versus
a development environment on the same server

00:49:44.940 --> 00:49:49.740
so that my co-workers can connect in to
use it while I'm continuing to work on it.

00:49:49.739 --> 00:49:54.179
And then as I make small improvements
I can move them over easily and quickly

00:49:54.179 --> 00:49:59.539
and my co-workers will get the benefits of that work.

00:49:59.539 --> 00:50:03.070
Especially with Leopard now we're
constantly reevaluating what we have to do.

00:50:03.070 --> 00:50:09.660
There's so much new stuff and there's a lot of
better ways we could implement the stuff we've done.

00:50:09.659 --> 00:50:13.670
So we're really looking forward to Leopard
and as Mike was just talking about,

00:50:13.670 --> 00:50:18.070
we're looking forward to how we might be able to use the
new System Image Utility, it has a lot more flexibility

00:50:18.070 --> 00:50:21.860
and we can probably get rid of some
of our shell scripts and use that.

00:50:21.860 --> 00:50:29.670
So that is Pixar's Metro and hopefully
it will be inspiring to some folks.

00:50:29.670 --> 00:50:31.760
And now I'm going to hand it back to Joel, thanks.