WEBVTT

00:00:16.329 --> 00:00:19.909
>> Welcome to Extending the Aperture Workflow.

00:00:19.910 --> 00:00:20.809
My name is Blake Seely.

00:00:20.809 --> 00:00:22.739
I'm one of the engineers on the Aperture team.

00:00:22.739 --> 00:00:27.779
And today we're going to talk about how
to build export plug-ins for Aperture.

00:00:27.780 --> 00:00:32.090
So here are some of the high level
things we're going to talk about.

00:00:32.090 --> 00:00:36.830
We'll talk about Aperture and how its work flow
works, how it gets images from camera out to print

00:00:36.829 --> 00:00:40.929
and how your plug-ins can fit into that workflow.

00:00:40.929 --> 00:00:46.179
And we'll also obviously talk about what
the specific features of the export API are

00:00:46.179 --> 00:00:49.240
and what you can build into your plug-in.

00:00:49.240 --> 00:00:51.280
Here are some of the specifics.

00:00:51.280 --> 00:00:52.770
We're going to talk about the Aperture SDK.

00:00:52.770 --> 00:00:58.320
We'll actually build a small plug-in
during the session so you can see what some

00:00:58.320 --> 00:01:00.640
of the features are, you can see how it works.

00:01:00.640 --> 00:01:05.299
We'll talk about how to provide your
own custom UI in an export plug-in.

00:01:05.299 --> 00:01:11.229
And obviously, and most importantly, how to access
Aperture's image data, how to get metadata out of Aperture,

00:01:11.230 --> 00:01:17.260
how to get thumbnails so you can show them to your
user, and how to send metadata back into Aperture again

00:01:17.260 --> 00:01:21.550
so your plug-ins can be part of that workflow.

00:01:21.549 --> 00:01:26.200
So how many of you are familiar
with Aperture or Aperture users?

00:01:26.200 --> 00:01:30.560
Good. It's hard to demo an app like
Aperture in one slide, so, you know,

00:01:30.560 --> 00:01:39.230
it's geared towards getting project management, raw images
from camera, organizing them, editing them, sorting them,

00:01:39.230 --> 00:01:41.730
adjusting them and getting them out to print.

00:01:41.730 --> 00:01:47.640
It's heavy on project management, being able to search,
sort, filter based on really extensive metadata.

00:01:47.640 --> 00:01:52.469
Obviously it works with other formats, but
raw is traditionally difficult to work with.

00:01:52.469 --> 00:01:55.340
So that's really where Aperture shines.

00:01:55.340 --> 00:02:02.480
I'm going to do a brief demo of Aperture and
point out a few of the things that are going

00:02:02.480 --> 00:02:04.200
to be important to use plug-in developers.

00:02:04.200 --> 00:02:07.939
So let's switch to the demo machine.

00:02:07.939 --> 00:02:14.829
So as you all probably know, this
is the Aperture main window.

00:02:14.830 --> 00:02:21.730
Aperture is a non destructive editor, which means it always
keeps the original master file on disk, never touches it,

00:02:21.729 --> 00:02:33.870
everything you see here is done in real time, if we bring
up the adjustments,you know, we use core image and

00:02:33.870 --> 00:02:40.960
image IO and other OS features to do all the image
manipulations in realtime as the user wants to see them.

00:02:40.960 --> 00:02:48.629
If I put away the adjustment panel and
bring up metadata, and it's grouped,

00:02:48.629 --> 00:02:55.009
but you can see some of the extensive metadata
that Aperture provides on this right side.

00:02:55.009 --> 00:03:01.149
All of this information is searchable, sortable,
filterable, you can build smart albums around it.

00:03:01.150 --> 00:03:06.330
And through the export API, your plug-ins
have access to all of this, all the IPTC,

00:03:06.330 --> 00:03:11.180
all the exit information, everything Aperture can store.

00:03:11.180 --> 00:03:17.840
And Aperture also provides something else that's
really flexible for users, which is custom metadata,

00:03:17.840 --> 00:03:20.969
which is basically any key value pair you want.

00:03:20.969 --> 00:03:23.250
The user can type in anything they want.

00:03:23.250 --> 00:03:29.539
I mean, it could be, you know, something
about the color and the image and then search

00:03:29.539 --> 00:03:37.310
for red, and there you go, you get that image.

00:03:37.310 --> 00:03:42.500
And so what's great about this is not only is
it incredibly flexible for users to be able

00:03:42.500 --> 00:03:45.259
to attach any key value pairs they want to images,

00:03:45.259 --> 00:03:49.509
but through the export API, you can
read and write this information.

00:03:49.509 --> 00:03:57.139
So your plug-in can record really flexibly what it did to
an image and actually store that back in Aperture's database.

00:03:59.289 --> 00:04:08.639
So something else is key words, which, you know,
key words, usually just a list of key words,

00:04:08.639 --> 00:04:14.329
just a list of strings that you can attach to images, but
in Aperture, these are also hierarchical, which, again,

00:04:14.330 --> 00:04:20.009
provides incredible flexibility for users,
so, you know, I can attach, you know,

00:04:20.009 --> 00:04:24.750
backyard to this image and search on backyard.

00:04:24.750 --> 00:04:35.509
But because it's hierarchical, I can also search on
personal, and, you know, basically still get the same image.

00:04:36.709 --> 00:04:41.379
Again, that's something that's really flexible, and
not only can you read that information out of Aperture

00:04:41.379 --> 00:04:46.639
to see what the user's done and get all their information,
but you can also write that information back into photos

00:04:46.639 --> 00:04:50.709
when your plug-in has done its
thing, including the full hierarchy.

00:04:50.709 --> 00:04:55.799
And then the last thing we want to point
out is, you know, versions and masters.

00:04:55.800 --> 00:05:00.250
Again, a master file is everything that
the user imported that's sitting on disk.

00:05:00.250 --> 00:05:01.899
Aperture never touches it.

00:05:01.899 --> 00:05:04.269
And everything you see on screen is a version.

00:05:04.269 --> 00:05:10.159
And that means I can change, I can
change, I can duplicate versions,

00:05:10.160 --> 00:05:16.320
so let's say I wanted to do something,
oops, not delete, I want to duplicate.

00:05:19.790 --> 00:05:25.580
Now I can do something totally different with
this image than I did with any other image.

00:05:25.579 --> 00:05:28.229
But there's still only one master file on disk.

00:05:28.230 --> 00:05:34.830
And that's really important during export because exporting
a version, Aperture actually has to render that image data.

00:05:34.829 --> 00:05:38.419
And the export API is geared around that rendering process.

00:05:38.420 --> 00:05:41.500
There's no file on disk that you can just read and upload.

00:05:41.500 --> 00:05:44.709
Aperture actually has to build it for you.

00:05:44.709 --> 00:05:55.149
So in normal export for Aperture, there's export version,
and you can see there's, you know, different presets,

00:05:55.149 --> 00:06:01.719
different formats for how Aperture should
actually render that data for the user.

00:06:01.720 --> 00:06:11.170
And you can change these presets, specify
different sizes, different formats, everything.

00:06:11.170 --> 00:06:15.439
And the export API takes advantage of
these presets to let you, as a developer,

00:06:15.439 --> 00:06:19.029
specify how users are allowed to export their versions.

00:06:19.029 --> 00:06:30.209
And then there's also master export, which allows the user
to take the original master file, again, with no changes,

00:06:30.209 --> 00:06:33.120
nothing done to it, exactly as it came out of the camera

00:06:33.120 --> 00:06:38.319
or exactly how it was imported and
export it out of the application.

00:06:38.319 --> 00:06:45.399
That can be sometimes of limited use, but, you know,
archiving, back-up, or if the user wants that original copy

00:06:45.399 --> 00:06:52.379
so that someone can compare against the version to see
how much manipulation was done, they may want to do that.

00:06:52.379 --> 00:06:58.699
And again, the export API, you have
access to export versions or masters

00:06:58.699 --> 00:07:01.209
and control what the user is allowed to do.

00:07:01.209 --> 00:07:06.079
So if we look at the export menu, everything
below this divider, all of the installed plug-ins,

00:07:06.079 --> 00:07:09.289
if they're not installed, it will say no plug-ins installed.

00:07:09.290 --> 00:07:11.750
Let's take a look at the FTP plug-in.

00:07:11.750 --> 00:07:13.910
So this is a plug-in that should slit the SDK.

00:07:13.910 --> 00:07:15.090
You can build it.

00:07:15.089 --> 00:07:16.379
It does standard FTP.

00:07:16.379 --> 00:07:22.550
You can put in your server path
and it will upload versions along

00:07:22.550 --> 00:07:25.509
with whatever format or however you want to export those.

00:07:25.509 --> 00:07:28.139
You can also export masters.

00:07:28.139 --> 00:07:33.639
And obviously that menu goes away if you're going to
export a master because there's no format to choose from.

00:07:33.639 --> 00:07:40.740
You're getting that original file and users
can name the exported images however they wish.

00:07:43.089 --> 00:07:52.039
Here is another plug-in that allows a user to export any
number of images they want and build a Final Cut Pro movie

00:07:52.040 --> 00:07:57.610
out of them, including the format of the
movie and the transitions that they want.

00:07:57.610 --> 00:08:03.949
And then they can go into Final Cut to do,
you know, the really flexible editing there.

00:08:03.949 --> 00:08:07.709
And here's a plug-in we're actually going to build today.

00:08:07.709 --> 00:08:09.949
It's very simple.

00:08:09.949 --> 00:08:16.079
You put in different sizes of images you want.

00:08:16.079 --> 00:08:28.039
So let's say I want a 400 pixel image and I want
a 500 pixel image, and let's say I want a 200.

00:08:28.040 --> 00:08:36.050
And I also want the full size image.

00:08:36.049 --> 00:08:50.990
So let's put these on my desktop, and then the plug-in goes
and actually generates each of the thumbnails you specified.

00:08:50.990 --> 00:08:56.529
So if I go out to the desktop, you'll
see I got a full size image plus each

00:08:56.529 --> 00:09:01.339
of the ones I specified including the file name I specified.

00:09:01.340 --> 00:09:06.720
And if I open these in preview, you'll
see we've got several different sizes.

00:09:06.720 --> 00:09:08.960
So very simple.

00:09:08.960 --> 00:09:16.480
All right, so that's the brief run through of
Aperture and a little bit about what plug-ins can do.

00:09:16.480 --> 00:09:25.009
And let's go ahead and switch back to the slides.

00:09:25.009 --> 00:09:30.990
So the key things from that are you have a lot
of flexibility with custom metadata and key words

00:09:30.990 --> 00:09:33.950
because you can write them back into the Aperture database.

00:09:33.950 --> 00:09:36.370
Besides that, Aperture stores a ton of metadata.

00:09:36.370 --> 00:09:38.950
You have access to all of that through the export API.

00:09:38.950 --> 00:09:41.960
And there's a difference between versions and masters.

00:09:41.960 --> 00:09:46.230
And again, you have full control
of that through the export API.

00:09:46.230 --> 00:09:52.060
So specifically for the API, it's
available in Aperture 1.5 and later.

00:09:52.059 --> 00:09:55.469
The SDK is available on Apple developer connection.

00:09:55.470 --> 00:09:58.460
We're actually going to build a plug-in,
like I said, during this session.

00:09:58.460 --> 00:10:00.660
So if you want to download it now, you can.

00:10:00.659 --> 00:10:04.850
If you just go to developer.apple.com,
click on Apple applications,

00:10:04.850 --> 00:10:09.290
click on Apple application downloads,
and it should be in the list there.

00:10:09.289 --> 00:10:15.480
As far as how plug-ins are actually
structured, there's standard Cocoa bundles.

00:10:15.480 --> 00:10:18.500
If you're not familiar with OS X or Cocoa bundles,

00:10:18.500 --> 00:10:26.529
they're just folders with a very specific
code and folder hierarchy underneath them.

00:10:26.529 --> 00:10:30.439
So as far as the user developer is
concerned, they're just folders.

00:10:30.440 --> 00:10:36.540
But the finder will treat them as files
and they'll have the Aperture plug-in icon.

00:10:36.539 --> 00:10:41.480
But Aperture plug-ins are also something
just a little bit more called a pro plug.

00:10:41.480 --> 00:10:47.039
And that is an architecture that a lot
of the proaps use to build plug-ins.

00:10:47.039 --> 00:10:53.679
For example, if you're familiar with FX plug that Final
Cut Pro and Motion use, that's also a type of pro plug.

00:10:53.679 --> 00:10:57.689
And there's only three things that are
a little bit different about a pro plug

00:10:57.690 --> 00:11:01.090
And none of them will really affect
you for Aperture plug-ins.

00:11:01.090 --> 00:11:03.269
So the first is an info.plist file.

00:11:03.269 --> 00:11:09.659
There are a few pro plug keys that are
specific to Aperture and specific to pro plug.

00:11:09.659 --> 00:11:14.189
The documentation and the SDK describe them.

00:11:14.190 --> 00:11:22.790
The project template that comes at the SDK has almost
everything you need in there, including documentation.

00:11:22.789 --> 00:11:25.480
So it shouldn't get in your way too much.

00:11:25.480 --> 00:11:28.769
Then there's two protocols that are part of pro plug.

00:11:28.769 --> 00:11:34.449
The first allows you to put multiple
plug-ins inside one bundle.

00:11:34.450 --> 00:11:36.620
So let's say you're going to ship
a suite of export plug-ins.

00:11:36.620 --> 00:11:41.250
You can put them all in one bundle and they'll
show up as several in the Aperture menu.

00:11:41.250 --> 00:11:42.759
It's fully documented in the SDK.

00:11:42.759 --> 00:11:46.240
It's totally optional that you use it,
so we're not going to cover it today.

00:11:46.240 --> 00:11:53.210
And then the last one, the last protocol is something
that your plug-in will use at initialzation time.

00:11:53.210 --> 00:11:56.200
But the Xcode template includes
all the codes you need for that.

00:11:56.200 --> 00:12:02.020
And again, it's fully covered in the documentation, so
we're not going to discuss it a whole lot today here either.

00:12:02.019 --> 00:12:06.549
But the last two things, the last two protocols you
will care about, and those are the two most important,

00:12:06.549 --> 00:12:10.719
which are ApertureExportManager
and ApertureExportPlugin

00:12:10.720 --> 00:12:14.149
And those are the ones we're going to really cover
today because those are the ones you're going

00:12:14.149 --> 00:12:17.419
to use the most when you're building a plug-in.

00:12:17.419 --> 00:12:19.709
So let's switch to the demo machine.

00:12:19.710 --> 00:12:30.600
I'll actually go into Xcode, and I'll show you what
the basics of-- let me make sure we're logged off here.

00:12:30.600 --> 00:12:34.889
All right, so let's go into Xcode.

00:12:34.889 --> 00:12:40.340
And once you install the SDK, when you create a
new project, you scroll down towards the bottom,

00:12:40.340 --> 00:12:47.399
there should be a section called standard Apple
plug-ins, and you'll see Aperture Export Plug-in.

00:12:47.399 --> 00:12:50.879
So let's go ahead and create a new one.

00:12:56.990 --> 00:13:02.039
So here's what the basic project that
you get from the template looks like.

00:13:02.039 --> 00:13:05.860
You see we already have the required Aperture headers.

00:13:05.860 --> 00:13:08.649
It's created the base class for you.

00:13:08.649 --> 00:13:16.870
And we've got a basic nib and an info.plist file.

00:13:16.870 --> 00:13:19.370
So let's look at some of the things.

00:13:19.370 --> 00:13:25.980
The top of the info.plist file is more or
less a standard Cocoa bundle info.plist file.

00:13:25.980 --> 00:13:32.570
If you scroll down a little bit, you'll start to
see some of the pro plugs specific keys, and again,

00:13:32.570 --> 00:13:37.360
some documentation telling you not to change
certain ones because Aperture needs to use them.

00:13:37.360 --> 00:13:44.050
And there's really only two things in this file that
when you're building a plug-in, you'll probably change.

00:13:44.049 --> 00:13:46.779
The first is right here, the helpURL.

00:13:46.779 --> 00:13:52.240
If you put a URL there, Aperture will put a
help button on your export window for you.

00:13:52.240 --> 00:13:55.909
And when the user clicks it, Aperture will launch that URL.

00:13:55.909 --> 00:14:03.409
This can be on your website, this can
be a file URL, any valid URL will work.

00:14:03.409 --> 00:14:07.230
We don't have one for this session, so I'm
just going to go ahead and delete that.

00:14:07.230 --> 00:14:10.930
And then Aperture will hide that help button for us.

00:14:10.929 --> 00:14:14.620
And the next thing is where it says put a UUID here,

00:14:14.620 --> 00:14:18.810
including the comments also saying you
need to put a universal unique ID here.

00:14:18.809 --> 00:14:22.839
And that's so Aperture can identify
your plug-ins specifically.

00:14:22.840 --> 00:14:25.560
And building one of these is very easy.

00:14:25.559 --> 00:14:28.549
If you haven't done it before, we'll just go to terminal.

00:14:28.549 --> 00:14:32.099
And you're just going to type UUIDgen.

00:14:32.100 --> 00:14:36.170
And there's a unique ID for you.

00:14:36.169 --> 00:14:44.610
So all you have to do is copy that
and paste it into your file.

00:14:44.610 --> 00:14:50.100
Those are really the only two things you'll
want to change in your info.plist file.

00:14:50.100 --> 00:14:54.500
So I'll save that.

00:14:54.500 --> 00:14:58.519
After you create a project, if you
haven't done plug-in development before,

00:14:58.519 --> 00:15:03.009
there's two other things you'd probably want
to do to make plug-in development very easy.

00:15:03.009 --> 00:15:07.669
The first is you'll notice the build
and go button is disabled in Xcode.

00:15:07.669 --> 00:15:09.399
And that's because there is no executable.

00:15:09.399 --> 00:15:11.620
There's nothing to run in this project.

00:15:11.620 --> 00:15:12.779
There's no application.

00:15:12.779 --> 00:15:15.379
But we can actually fix that.

00:15:15.379 --> 00:15:24.080
If you go to executables and right click, you can say
add new custom executable, and what do we want to run?

00:15:24.080 --> 00:15:26.330
Well, we want to run Aperture.

00:15:26.330 --> 00:15:30.340
When we run our plug-in or when we click
run in Xcode, we run around Aperture.

00:15:30.340 --> 00:15:33.050
So we can actually do that.

00:15:33.049 --> 00:15:41.669
Just say choose and just select Aperture.

00:15:41.669 --> 00:15:44.990
Click finish.

00:15:44.990 --> 00:15:48.639
We don't need to change any specifics
about how Aperture runs.

00:15:48.639 --> 00:15:51.100
Xcode will take care of most of it.

00:15:51.100 --> 00:15:56.550
So now if we click build and go, Aperture is
what will run, which is exactly what we want.

00:15:56.549 --> 00:16:01.669
Aperture will-- when Aperture loads our
plug-in code, we can separate points in there.

00:16:01.669 --> 00:16:07.199
We can debug write-in our plug-in running inside Aperture.

00:16:07.200 --> 00:16:11.110
But that begs the question how does
Aperture know to run the plug-in?

00:16:11.110 --> 00:16:12.450
How does Xcode tell it?

00:16:12.450 --> 00:16:18.050
And, you know, Aperture only looks in a
couple specific places for your plug-in.

00:16:18.049 --> 00:16:23.399
It's in the library folders, application support Aperture.

00:16:23.399 --> 00:16:25.789
Obviously it's not going to look in our build folder.

00:16:25.789 --> 00:16:30.049
So there's one more thing you can do, and
that's when you build, you want to get Xcode,

00:16:30.049 --> 00:16:33.240
you want to get your project to put
your plug-in in the correct spot.

00:16:33.240 --> 00:16:35.240
And there's a couple ways to do that.

00:16:35.240 --> 00:16:38.430
You can configure your build settings to do it for you.

00:16:38.429 --> 00:16:42.019
I like to use a shell script that does the copying for me.

00:16:42.019 --> 00:16:48.519
So I actually have some of that
code that I can just copy in.

00:16:48.519 --> 00:16:55.929
And if you want this code, it's actually
included in the project attached to the session.

00:16:55.929 --> 00:17:03.449
But I just want to add new build phase, new run
script build phase, and I'll paste in that code

00:17:03.450 --> 00:17:06.569
and tell you briefly what it's going to do here.

00:17:06.569 --> 00:17:14.149
So first of all, it's just a shell script that
makes sure your Aperture plug-ins folder exists.

00:17:14.150 --> 00:17:19.130
Then if we run this previously, it just
cleans up any old versions of our plug-in.

00:17:19.130 --> 00:17:24.860
And then the last thing is if you're
debugging, it puts a symbolic link

00:17:24.859 --> 00:17:27.899
from your build directory to the plug-ins folder.

00:17:27.900 --> 00:17:33.190
And if you are in release mode, it
will just copy it over there for you.

00:17:33.190 --> 00:17:36.390
And that's it.

00:17:36.390 --> 00:17:43.210
Now whenever we click build, Xcode will automatically
copy or link our plug-in into the correct spot.

00:17:43.210 --> 00:17:47.230
And whenever we run, Xcode will run Aperture for us.

00:17:47.230 --> 00:17:52.860
So now we're pretty much ready to, you know,
build and debug our plug-in, really easy,

00:17:52.859 --> 00:17:56.839
we don't have to worry about copying, we don't
have to worry about running Aperture ourselves.

00:17:56.839 --> 00:18:04.639
So let's go ahead and switch back to the slides.

00:18:04.640 --> 00:18:09.700
So that was the basics of getting
started on a plug-in development.

00:18:09.700 --> 00:18:10.840
Make sure you install the SDK.

00:18:10.839 --> 00:18:15.299
It comes with an Xcode template,
which is the best way to get started.

00:18:15.299 --> 00:18:21.460
One thing I didn't mention, but all the places in the
code where you have to return something just to compile,

00:18:21.460 --> 00:18:27.130
they're marked with Xcode markers, which means when you
hit control slash, those will be highlighted for you

00:18:27.130 --> 00:18:31.950
and you can just control slash through the file
and add the return values just to get going.

00:18:31.950 --> 00:18:33.769
We'll actually show that in a bit.

00:18:33.769 --> 00:18:37.170
And then the two things, the one thing
you have to do just to get your Aperture

00:18:37.170 --> 00:18:40.220
to recognize your plug-in is make sure you add a UUID.

00:18:40.220 --> 00:18:43.759
If you get built, you put in the right
spot, everything you can tell is great,

00:18:43.759 --> 00:18:47.250
but Aperture is just not seeing it, double check the UUID.

00:18:47.250 --> 00:18:48.539
Make sure that's there.

00:18:48.539 --> 00:18:55.170
And then just two tricks to make sure you
can build and run directly from Xcode.

00:18:55.170 --> 00:19:01.130
So as I mentioned, there's two protocols
that you're going to care about in the API.

00:19:01.130 --> 00:19:03.940
The first is ApertureExportManager.

00:19:03.940 --> 00:19:07.330
As far as you're concerned as a
plug-in developer, this is Aperture.

00:19:07.329 --> 00:19:13.179
When you're talking to this object, you're
asking Aperture for information about the export.

00:19:13.180 --> 00:19:15.299
You want to know how many images are being exported.

00:19:15.299 --> 00:19:17.309
I want to get metadata for a certain image.

00:19:17.309 --> 00:19:19.759
I want to get thumbnails for a certain image.

00:19:19.759 --> 00:19:24.839
And whenever you want to add metadata back
to the database, you talk to this object.

00:19:24.839 --> 00:19:28.480
And then obviously the most important
one is the ApertureExportPlugIn

00:19:28.480 --> 00:19:32.750
This is the class that you're going to
implement, and this is important because this is

00:19:32.750 --> 00:19:34.480
where all your custom code is going to go.

00:19:34.480 --> 00:19:38.839
All the things that you do that make
your plug-in unique are going to happen

00:19:38.839 --> 00:19:41.480
in this protocol that you're going to implement.

00:19:41.480 --> 00:19:50.279
It has methods for updating Aperture's progress panel so you
can show the user where you're at and what you're doing.

00:19:50.279 --> 00:19:57.629
And it has all the methods that you need to provide
the custom UI and make your plug-in look unique.

00:19:57.630 --> 00:20:00.010
So speaking of which, what does a plug-in look like?

00:20:00.009 --> 00:20:03.759
So we saw this when we did the brief Aperture demo.

00:20:03.759 --> 00:20:05.680
This is the resizer.

00:20:05.680 --> 00:20:09.279
And you see there's some controls there
that are obviously unique to this plug-in.

00:20:09.279 --> 00:20:12.980
And then there's a few controls
that we saw in several plug-ins.

00:20:12.980 --> 00:20:18.319
Aperture provides this whole window
for you, it provides the window object.

00:20:18.319 --> 00:20:21.389
But you can provide a custom view.

00:20:21.390 --> 00:20:24.490
And Aperture will put it in the window for you

00:20:24.490 --> 00:20:28.690
so you can provide all your own controls,
they'll go in the top of the window.

00:20:28.690 --> 00:20:33.299
And then there's a series of controls
that Aperture provides,

00:20:33.299 --> 00:20:38.470
but your plug-in can turn them on
and off depending on what it needs.

00:20:38.470 --> 00:20:43.240
There's a lot of functionality built into these, and
we thought we can either provide some detailed API

00:20:43.240 --> 00:20:47.349
into specifically asking your plug-in for certain aspects.

00:20:47.349 --> 00:20:48.079
But you know what?

00:20:48.079 --> 00:20:55.179
It's just easier, all these controls are here, it will be
easier for you as developers if we can just provide all

00:20:55.180 --> 00:20:58.870
of this for you and you tell us
whether you want them or not.

00:20:58.869 --> 00:21:02.529
So to get your custom UI in, there's one method to do it.

00:21:02.529 --> 00:21:03.410
It's called settingsView.

00:21:03.410 --> 00:21:06.850
You can return any NSView you want in this method.

00:21:06.849 --> 00:21:09.939
It can be an NSView that you create in code on the fly.

00:21:09.940 --> 00:21:12.490
It can be something you create in interface builder.

00:21:12.490 --> 00:21:17.049
It doesn't matter, any NSView, Aperture
will go ahead and put it in the window

00:21:17.049 --> 00:21:20.409
for you, make sure the window is sized correctly.

00:21:20.410 --> 00:21:27.590
There is one constraint, and there is a maximum
size to that window, which is 1,100 pixels by 750.

00:21:27.589 --> 00:21:30.339
So keep that in mind when you're building your UI.

00:21:30.339 --> 00:21:31.980
It can't be just gigantic.

00:21:31.980 --> 00:21:37.079
If it is, Aperture will actually size it down for you.

00:21:37.079 --> 00:21:42.369
And that's where you just need to make sure
that your sizing constraints are all set.

00:21:42.369 --> 00:21:48.669
That guarantees that if this changes or as Aperture does its
thing behind the scenes, your plug-in will always look good.

00:21:48.670 --> 00:21:55.920
So just make sure it resizes well, pass it to custom
view, and you're good to go with your custom UI.

00:21:55.920 --> 00:22:00.259
Now, the controls that Aperture
provides are a little different.

00:22:00.259 --> 00:22:03.079
So again, Aperture is going to give you all of these basics.

00:22:03.079 --> 00:22:06.389
And there's three main areas up here.

00:22:06.390 --> 00:22:10.390
The first is whether you will add
export of masters or versions.

00:22:10.390 --> 00:22:11.450
These are very simple.

00:22:11.450 --> 00:22:13.059
There's two methods that control it.

00:22:13.059 --> 00:22:16.750
And you just return yes or no and
Aperture will do the right thing.

00:22:16.750 --> 00:22:22.130
So if you don't want to allow master export, return
no to the top method there, allowsMasterExport.

00:22:22.130 --> 00:22:28.060
If you say no, Aperture will hide the radio
buttons and consume the extra space for you.

00:22:28.059 --> 00:22:35.169
If you return no to both, Aperture will default
to version, so you can't try and outsmart it.

00:22:35.170 --> 00:22:37.360
Next is a version preset menu.

00:22:37.359 --> 00:22:42.000
Now, that one is a little more complicated of
whether Aperture is going to show that or not.

00:22:42.000 --> 00:22:46.819
So obviously the master version
methods will have a say in that.

00:22:46.819 --> 00:22:52.069
If you're going to export masters, that menu
has no use, so Aperture will hide it for you.

00:22:52.069 --> 00:22:57.759
But you actually, as a plug-in developer, like I
said, have control over what shows up in this menu.

00:22:57.759 --> 00:23:04.759
So you can provide your own plug-in presets
that will show up at the bottom of this menu.

00:23:04.759 --> 00:23:09.539
Aperture does that for you automatically
if you include them in your plug-in.

00:23:09.539 --> 00:23:14.670
Now, the bottom method here, if you say
allowsOnlyPlugInPresets, and you return yes,

00:23:14.670 --> 00:23:18.170
then Aperture shows only your presets in that menu.

00:23:18.170 --> 00:23:24.130
And if you include only one preset in your
plug-in, then the menu goes away all together.

00:23:24.130 --> 00:23:31.210
So to hide this, you either need to only export
masters, which may not be what you want to do,

00:23:31.210 --> 00:23:37.140
or you need to do three things, which is
include your own preset, include only one,

00:23:37.140 --> 00:23:41.680
and return yes to allowsOnlyPlugInPresets.

00:23:41.680 --> 00:23:44.170
And we'll show that in case it isn't clear.

00:23:44.170 --> 00:23:47.870
And then the file name and controls
is these last three fields.

00:23:47.869 --> 00:23:50.659
They all go together.

00:23:50.660 --> 00:23:52.400
And again, it's very simple.

00:23:52.400 --> 00:23:55.250
Aperture will ask you if you want the final naming controls.

00:23:55.250 --> 00:23:58.119
If you reply yes, it will show the controls to the user.

00:23:58.119 --> 00:24:04.329
If you reply no, it will hide all
three fields, consume the extra space.

00:24:04.329 --> 00:24:06.929
So let's actually go in and implement the UI.

00:24:06.930 --> 00:24:11.600
Let's switch to the demo.

00:24:12.660 --> 00:24:16.420
So still in the same project here.

00:24:16.420 --> 00:24:19.539
We'll build the UI.

00:24:19.539 --> 00:24:24.139
There's a couple ivars I know I'll need just to build
what we saw earlier, so I'm just going to go ahead

00:24:24.140 --> 00:24:27.870
and add them now before we switch to interface builder.

00:24:27.869 --> 00:24:35.969
First is an array controller just to
store the different sizes the user inputs.

00:24:40.190 --> 00:24:46.230
And then the second is that check
box that allows the user to say yeah,

00:24:46.230 --> 00:24:50.360
I want a full size version of this as well or not.

00:24:54.619 --> 00:25:04.809
And there's one other I'll need that's not for the
UI, but I'm going to go ahead and put it in there now,

00:25:04.809 --> 00:25:09.970
which is where the user is actually
going to save the files to.

00:25:09.970 --> 00:25:12.890
So let's open our nib.

00:25:12.890 --> 00:25:18.690
I'll drag in my header so we get all the extra outlets.

00:25:18.690 --> 00:25:22.279
So this is the default nib that
comes with the project template.

00:25:22.279 --> 00:25:28.200
You can see we already have a custom view built in.

00:25:28.200 --> 00:25:29.240
Very basic.

00:25:29.240 --> 00:25:30.660
You don't have to use this.

00:25:30.660 --> 00:25:31.420
You can use it.

00:25:31.420 --> 00:25:33.050
You can throw it all away.

00:25:33.049 --> 00:25:36.230
It doesn't matter, again, as long
as you just provide a custom view.

00:25:36.230 --> 00:25:39.259
I'm going to go ahead and keep this for now.

00:25:39.259 --> 00:25:42.129
We already have an NS box in here as well.

00:25:42.130 --> 00:25:47.320
So let's open my library and put in the controls I need.

00:25:47.319 --> 00:25:49.529
Let's put in the array controller.

00:25:49.529 --> 00:25:59.389
I'll put in the table where the user
is going to store all of their choices.

00:25:59.390 --> 00:26:04.980
We have a size column, a suffix column.

00:26:04.980 --> 00:26:08.900
And the size column is going to be a number.

00:26:08.900 --> 00:26:14.790
And I'll just set the properties in that number now.

00:26:14.789 --> 00:26:24.990
We probably don't want them to have zero sized
images, so we'll say 10 pixels is the minimum.

00:26:24.990 --> 00:26:35.480
We want buttons for them to be
able to add and remove the values.

00:26:35.480 --> 00:26:56.259
And we also wanted a check box that tells whether
they want to include the full size version or not.

00:26:56.259 --> 00:27:07.369
So let me just size everything up now.

00:27:07.369 --> 00:27:10.979
So remember, one of the keys is making
sure everything resizes correctly.

00:27:10.980 --> 00:27:17.610
So one of the first things I always do is
just go in and set our resize controls so that

00:27:17.609 --> 00:27:23.959
as Aperture is shuffling window sizes and things behind
the scenes, our view will always resize correctly.

00:27:23.960 --> 00:27:34.980
We want the buttons to stay on the bottom
right, the check box to stay on the bottom left,

00:27:34.980 --> 00:27:41.279
and that view and that view are already set correctly.

00:27:41.279 --> 00:27:42.569
So those are the basics of our UI.

00:27:42.569 --> 00:27:48.480
Let's go ahead and set up our outlets.

00:27:48.480 --> 00:27:52.950
So array controller, our button.

00:27:52.950 --> 00:27:58.470
And then your class is already set up
with outlets to provide the settings view.

00:27:58.470 --> 00:28:01.269
So we'll just hook that up.

00:28:01.269 --> 00:28:07.690
And then so that your view hooks into the
tab order correctly, we also have first view,

00:28:07.690 --> 00:28:11.180
so let's hook that up to our table, assuming
that will be the first one the user can tab to.

00:28:11.180 --> 00:28:16.320
And then our last view, we'll make this button.

00:28:16.319 --> 00:28:20.259
And then I'll hook up these.

00:28:23.099 --> 00:28:26.909
So now the user can totally tab
through our interface as well.

00:28:26.910 --> 00:28:29.440
And there's your UI.

00:28:29.440 --> 00:28:31.210
That's basically all we need to do to build a UI.

00:28:31.210 --> 00:28:37.610
I'm actually just going to save
this in Interface Builder 3 format.

00:28:40.930 --> 00:28:55.009
And now let's hook up our bindings, just so we don't
have to write a whole lot of data storage codes.

00:28:55.009 --> 00:28:57.129
So there's our table view.

00:28:57.130 --> 00:28:59.590
Just hook it to arranged objects.

00:29:04.569 --> 00:29:21.970
We'll make this a thumbnail size, thumbnail suffix,
hook this to the add of our array controller,

00:29:21.970 --> 00:29:28.460
hit the remove button to remove, and I think that's it.

00:29:28.460 --> 00:29:33.730
Let me make sure I set the selection so
we can add and remove the correct ones.

00:29:33.730 --> 00:29:37.019
Save. And there's our UI.

00:29:37.019 --> 00:29:49.289
So if I want to build a run this just to see
how it looks, like I said, there's a few values,

00:29:49.289 --> 00:29:51.329
a few methods that require a return value.

00:29:51.329 --> 00:29:53.980
So just to build, there's a few
things I'll have to fill out.

00:29:53.980 --> 00:29:55.450
And let's fill those out real quick.

00:29:55.450 --> 00:30:01.980
You can see there's a lot of code that's already here
for you, all the basic initialization code releasing

00:30:01.980 --> 00:30:12.470
and retaining your nib objects, getting your settings
view out of the nib, that's all there already for you.

00:30:12.470 --> 00:30:17.940
WillBeActivated and willBeDeactivated, there's
nothing special our plug-in needs to do at those times.

00:30:17.940 --> 00:30:21.190
But they be we get to some of the
ones with the Xcode markers, again,

00:30:21.190 --> 00:30:25.220
so if I hit control slash, the next
one will be highlighted for me.

00:30:25.220 --> 00:30:28.809
For now, we don't have any of our
own presets, so we'll say no.

00:30:28.809 --> 00:30:30.220
Control slash.

00:30:30.220 --> 00:30:33.390
We don't allow master export.

00:30:33.390 --> 00:30:35.970
We do allow version export.

00:30:37.089 --> 00:30:41.939
We do want file naming controls.

00:30:41.940 --> 00:30:46.070
These next three methods have to
do with how Aperture will determine

00:30:46.069 --> 00:30:49.089
where to save the files, where shall we export them to.

00:30:49.089 --> 00:30:51.829
We just want the user to choose.

00:30:51.829 --> 00:30:55.589
So we'll say yes to wantsDestinationPathPromp.

00:30:55.589 --> 00:31:00.220
That means will Aperture give the
user an open save dialogue.

00:31:00.220 --> 00:31:05.019
If we didn't do that, then we would need
to tell Aperture where those files go.

00:31:05.019 --> 00:31:08.000
And that's what the destinationPath method is for.

00:31:08.000 --> 00:31:11.160
Since we're going to ask the user, we
don't need to return anything here.

00:31:11.160 --> 00:31:18.630
And when the user gets the open save dialogue, what's the
default directory, we may want to save in between runs here

00:31:18.630 --> 00:31:22.680
so we leave them-- we start them where they left off.

00:31:22.680 --> 00:31:33.560
But I'm just going to take the easy way out and
just leave them in their home directory for now.

00:31:33.559 --> 00:31:40.049
So all the methods below here have to do with the actual
export process, which we'll discuss in just a little bit,

00:31:40.049 --> 00:31:42.859
but I'm going to go ahead and fill in a few methods.

00:31:42.859 --> 00:31:48.539
The first just tells Aperture to begin the export process.

00:31:58.309 --> 00:32:04.200
The next is Aperture asking us to confirm
whether we should export certain images.

00:32:04.200 --> 00:32:10.779
Say yes. Whether it should write image data to disk for us.

00:32:10.779 --> 00:32:13.170
We'll say yes.

00:32:13.170 --> 00:32:16.539
And then the last two calls are
for finishing the export process.

00:32:16.539 --> 00:32:19.119
Again, we'll just fill those in for now.

00:32:27.009 --> 00:32:35.220
And exportManagerShouldCancel in
case the user clicks the cancel button.

00:32:35.220 --> 00:32:41.289
And then there's some progress methods,
which we'll discuss in a bit as well.

00:32:41.289 --> 00:32:45.750
So we should have filled everything in.

00:32:45.750 --> 00:33:00.119
So we should be able to build and run Xcodable--
well, actually, I want to put this in debug mode, save.

00:33:00.119 --> 00:33:03.799
So we've set up our project so our
plug-in should end up in the right spot.

00:33:03.799 --> 00:33:07.190
Xcode knows to run Aperture for us.

00:33:07.190 --> 00:33:08.330
And there we go.

00:33:08.329 --> 00:33:13.710
And if we go to the export plug-ins area,
you'll see there's the plug-in we just built.

00:33:13.710 --> 00:33:15.640
And there's our UI.

00:33:15.640 --> 00:33:22.080
And as we specified, we get the version
presets and we get the file naming controls,

00:33:22.079 --> 00:33:28.189
but we don't get the master version radio buttons.

00:33:28.190 --> 00:33:31.190
All right, so let's switch back
to the slides for just a moment.

00:33:31.190 --> 00:33:37.100
So that was the basics of building the UI.

00:33:37.099 --> 00:33:37.829
It's very simple.

00:33:37.829 --> 00:33:41.470
You're just going to create your own custom view.

00:33:41.470 --> 00:33:43.850
Aperture will put that view in a window for you.

00:33:43.849 --> 00:33:49.189
Aperture provides several custom controls,
but you can turn those on and off as you need.

00:33:49.190 --> 00:33:53.180
And you can optionally provide your own export presets.

00:33:55.509 --> 00:34:03.109
So now let's actually go in and finish the rest of the
export process, if we switch to the demo again, please.

00:34:03.109 --> 00:34:06.819
So let's get Aperture.

00:34:06.819 --> 00:34:13.889
Now let's talk about those actual export
methods that I just ran through really quick.

00:34:13.889 --> 00:34:21.129
So the first one, you need to tell Aperture when it
should actually start generating image data for you.

00:34:21.130 --> 00:34:24.840
Now, this isn't just a return value, because
your plug-in may want to do initialization.

00:34:24.840 --> 00:34:27.030
It may need to do some network activity.

00:34:27.030 --> 00:34:31.260
So Aperture will tell your plug-in when it's ready to start.

00:34:31.260 --> 00:34:35.020
You can go off and run callbacks, run something
on another thread, do anything you want.

00:34:35.019 --> 00:34:38.710
You just have to call this shouldBeginExport
method when you're ready to go.

00:34:38.710 --> 00:34:40.889
And that's when Aperture will start.

00:34:40.889 --> 00:34:45.589
We don't have any initialization,
any checks we need to do here.

00:34:45.590 --> 00:34:49.620
So I'm just going to call shouldBeginExport directly.

00:34:49.619 --> 00:34:51.750
The next method is Aperture will confirm.

00:34:51.750 --> 00:34:55.829
Here's the path the user chose or
here's the path that you gave me.

00:34:55.829 --> 00:35:01.509
Just so you can save it if you need to, which we will do.

00:35:08.750 --> 00:35:17.530
The next two methods allow you to confirm whether
you really want to export certain images or not.

00:35:17.530 --> 00:35:19.610
And why would this be useful?

00:35:19.610 --> 00:35:22.450
Because generating the image data can take time.

00:35:22.449 --> 00:35:29.149
And maybe your plug-in like iStockphoto or Geddy Images
that require a lot of extra metadata for your images,

00:35:29.150 --> 00:35:33.510
maybe the images aren't appropriate
size that the user selected.

00:35:33.510 --> 00:35:36.550
So you may indicate that to them, to the user, and say well,

00:35:36.550 --> 00:35:40.289
you filled out the correct information
for five images out of the ten.

00:35:40.289 --> 00:35:42.550
Do you want me to go ahead and export the rest?

00:35:42.550 --> 00:35:48.650
And this method allows your plug-in to say don't generate
data for this image, do generate data for this image.

00:35:48.650 --> 00:35:51.690
If you're going to do that, make sure
it's clear to the user what's going on.

00:35:51.690 --> 00:35:54.980
For this plug-in, we just reply yes to each one.

00:35:54.980 --> 00:35:58.789
We don't have any criteria where we
wouldn't export an image for the user.

00:35:58.789 --> 00:36:03.730
And the next method just confirms your previous reply.

00:36:03.730 --> 00:36:12.500
This next method, export manager should write
image data to relative path for image at index.

00:36:12.500 --> 00:36:14.519
This is the heart of the API.

00:36:14.519 --> 00:36:18.349
So this is where Aperture has rendered an image for you,

00:36:18.349 --> 00:36:23.019
has put it in the NS data object and
is giving it to do with as you wish.

00:36:23.019 --> 00:36:27.730
And it's telling you here's the
path that I will store this at.

00:36:27.730 --> 00:36:31.000
Now, you'll notice it says relativePath.

00:36:31.000 --> 00:36:35.530
In Aperture 15, this is just going to be a file name.

00:36:35.530 --> 00:36:38.820
But creating folders is part of Aperture's export process.

00:36:38.820 --> 00:36:41.610
So this may contain a relative path in the future.

00:36:41.610 --> 00:36:44.750
It may contain something that has directory names in it.

00:36:44.750 --> 00:36:47.940
So you should just be ready for that.

00:36:47.940 --> 00:36:55.000
Now, if I return yes here, I'm basically telling
Aperture go ahead and write this to disk at that path.

00:36:55.000 --> 00:36:59.389
If I return no, Aperture's assumption
is it's done with that image data.

00:36:59.389 --> 00:37:01.029
It will not write it to disk.

00:37:01.030 --> 00:37:02.460
It's going to release it.

00:37:02.460 --> 00:37:06.190
So you're going to do all the handling you
need to do, whether that's uploading it,

00:37:06.190 --> 00:37:10.429
writing it to your own location on disk, anything like that.

00:37:10.429 --> 00:37:13.759
For our plug-in, this is where
we want to do most of our work.

00:37:13.760 --> 00:37:14.750
We have the image data.

00:37:14.750 --> 00:37:19.579
We want to call the CG methods and do all the resizing here.

00:37:19.579 --> 00:37:30.079
So I actually have code for that that I
will paste in and just go through briefly.

00:37:30.079 --> 00:37:37.630
So this is some fairly basic CG and CF code.

00:37:37.630 --> 00:37:43.070
We basically create an image source on that data and
then walk through each of the entries the user made,

00:37:43.070 --> 00:37:53.740
get the thumbnail size, create a thumbnail, figure out
what suffix they wanted to add and build the new file name

00:37:53.739 --> 00:38:01.489
and then write that new thumbnail to
disk and then release all our objects.

00:38:01.489 --> 00:38:04.469
We also update the progress here.

00:38:04.469 --> 00:38:11.359
For progress Aperture, the code template builds a structure.

00:38:11.360 --> 00:38:14.070
And you can update that structure whenever you want.

00:38:14.070 --> 00:38:18.330
Make sure, because of threading, in that some of
these methods are going to run on separate threads,

00:38:18.329 --> 00:38:22.679
make sure you call lock progress and unlock
progress every time you use the structure.

00:38:22.679 --> 00:38:24.879
But there's several fields.

00:38:24.880 --> 00:38:26.670
The first is just a message.

00:38:26.670 --> 00:38:29.920
And that's the text that Aperture
will put in the window for you.

00:38:29.920 --> 00:38:33.510
There is the value of a progress bar.

00:38:33.510 --> 00:38:39.200
You can set the total and the current value however
you want or you can set it to indeterminant.

00:38:39.199 --> 00:38:45.069
And then the last thing is do we want
Aperture to write this data to disk?

00:38:45.070 --> 00:38:47.250
Well, if the user clicked the check box, we do.

00:38:47.250 --> 00:38:49.650
If they didn't click the check box, we don't.

00:38:49.650 --> 00:38:53.059
And that's it.

00:38:53.059 --> 00:38:56.840
If Aperture writes the data, there's
nothing we need to do in the next method,

00:38:56.840 --> 00:39:00.019
which is Aperture just telling us that it did that.

00:39:01.239 --> 00:39:03.000
ExportManagerDidFinishExport.

00:39:03.000 --> 00:39:05.340
It means Aperture is done with all of the images.

00:39:05.340 --> 00:39:10.780
It's rendered data for every single image, and now it's
time for your plug-in to do any other work it needs to do.

00:39:10.780 --> 00:39:14.210
For a lot of plug-ins, this is where
the export code is going to be.

00:39:14.210 --> 00:39:18.199
This is where you're going to upload
from, do any further image processing.

00:39:18.199 --> 00:39:24.419
For us, we can go ahead and tell
Aperture that we're also done.

00:39:24.420 --> 00:39:27.369
And then should cancel.

00:39:27.369 --> 00:39:31.039
Aperture will call this when the users click
the cancel button or if there's been some sort

00:39:31.039 --> 00:39:34.909
of other error on Aperture's side, and it's similar.

00:39:34.909 --> 00:39:38.759
You can clean up, do whatever you want
here, Aperture will leave the progress bar

00:39:38.760 --> 00:39:41.780
up until you tell it that you are also ready to cancel.

00:39:41.780 --> 00:39:46.750
And the unique thing about these two methods
is as soon as you confirm that you're ready

00:39:46.750 --> 00:39:48.949
to finish or that you're ready to cancel.

00:39:48.949 --> 00:39:52.409
Aperture will clean up on its side and release your plug-in.

00:39:52.409 --> 00:39:58.399
So especially for cancel, if you have anything running
on any other run loops, if you have anything running

00:39:58.400 --> 00:40:02.599
on other threads, make sure those are
cleaned up and totally finished here

00:40:02.599 --> 00:40:04.789
because Aperture is going to release you right away.

00:40:04.789 --> 00:40:10.130
And if those run loops or those threads are still calling
back, they're going to call back to a released object.

00:40:10.130 --> 00:40:12.170
Your plug-in will crash.

00:40:12.170 --> 00:40:13.849
Aperture will crash.

00:40:13.849 --> 00:40:19.650
So make sure you clean up before you call
these, and then your plug-in goes away.

00:40:21.190 --> 00:40:27.909
So that's basically all of the logic needed for resizer.

00:40:27.909 --> 00:40:35.359
We should be able to build and go again.

00:40:35.360 --> 00:40:38.250
Let's select a few images here

00:40:43.210 --> 00:40:51.440
Let's just say we want 100 pixel small image.

00:40:51.440 --> 00:40:57.269
And let's export that.

00:41:00.139 --> 00:41:05.500
Put it in a new folder.

00:41:05.500 --> 00:41:09.610
So we should just get three images.

00:41:09.610 --> 00:41:14.250
I will then initialize the progress
so it's not going to change.

00:41:14.250 --> 00:41:16.670
But you saw some of the text pop up.

00:41:16.670 --> 00:41:29.170
So now if I switch-- so I included a full size,
and then I got three small versions of each image.

00:41:29.170 --> 00:41:32.690
There's my 100 pixel version along
with the full size version.

00:41:32.690 --> 00:41:44.970
All right, so let's switch back to the slides.

00:41:46.849 --> 00:41:53.099
So that was just a real brief look at how do you actually
import-- how do you actually implement the export process.

00:41:53.099 --> 00:41:55.670
A couple quick things to note.

00:41:55.670 --> 00:42:01.220
You're going to get a path from Aperture saying where it
wants to store the disk, where it wants to store the image.

00:42:01.219 --> 00:42:06.809
That may contain directories, so don't just
assume it's going to be a file name all the time.

00:42:06.809 --> 00:42:09.900
When you tell Aperture that you're done
or when you tell it that you're ready

00:42:09.900 --> 00:42:12.329
to cancel, make sure your callbacks are done.

00:42:12.329 --> 00:42:16.980
Make sure anything that you've got running in other
threads is totally finished because you're going

00:42:16.980 --> 00:42:19.349
to be released as soon as you call those methods.

00:42:19.349 --> 00:42:24.029
And one thing I didn't mention, but as
you get image data back from Aperture,

00:42:24.030 --> 00:42:27.300
that could be many, many megabites of image data.

00:42:27.300 --> 00:42:30.230
Do not try and retain each of those as they come back.

00:42:30.230 --> 00:42:33.389
Keep them in memory and then do uploads
from memory or anything like that.

00:42:33.389 --> 00:42:38.159
Try and work on image-- with image data one at a time.

00:42:38.159 --> 00:42:47.750
If you-- a good strategy is usually to write all the images
to a temporary disk or temporary directory and then work

00:42:47.750 --> 00:42:50.480
with them one at a time after Aperture is done.

00:42:50.480 --> 00:42:56.579
So the last thing that we haven't covered is
how do you get metadata back into Aperture?

00:42:56.579 --> 00:43:03.319
I mean, that's really what makes this export API unique
is its ability to not only be the end point, you know,

00:43:03.320 --> 00:43:10.890
I'm getting images out of Aperture, but to record
what your plug-in did, to save information later both

00:43:10.889 --> 00:43:14.250
for the user or for the next run of your plug-in.

00:43:14.250 --> 00:43:19.449
Maybe you get a unique ID or something from a
service that you uploaded to and you want to save

00:43:19.449 --> 00:43:21.730
that so you can actually use that next time.

00:43:21.730 --> 00:43:27.860
Or maybe you're the FTP plug-in, you want to
actually record the URL that the user uploaded to.

00:43:27.860 --> 00:43:33.670
So this is how you're going to become kind of
part of the ongoing workflow, part of Aperture.

00:43:33.670 --> 00:43:39.840
There's two things to note about
putting metadata back in Aperture.

00:43:39.840 --> 00:43:45.490
First is as soon as you call the method to add
the data, it will get applied to the image.

00:43:45.489 --> 00:43:47.959
It cannot be undone.

00:43:47.960 --> 00:43:53.590
Even if the user cancels halfway through an export,
if you've applied metadata, it's already been applied.

00:43:53.590 --> 00:43:56.059
It doesn't get taken back off images.

00:43:56.059 --> 00:44:00.369
So just make sure you're applying it after
something has happened in your plug-in.

00:44:00.369 --> 00:44:04.000
When the plug-in comes up, don't
settle their metadata and then assume

00:44:04.000 --> 00:44:06.199
that all your exports are going to go through successfully.

00:44:06.199 --> 00:44:09.819
Wait until something happens and then apply it.

00:44:09.820 --> 00:44:11.480
So real quick, let's just show how that works.

00:44:11.480 --> 00:44:18.579
Let's switch to the demo.

00:44:18.579 --> 00:44:21.230
So I'll go back into our export.

00:44:21.230 --> 00:44:23.840
And this is an excellent example.

00:44:23.840 --> 00:44:24.650
This is fairly simple.

00:44:24.650 --> 00:44:29.000
But, you know, maybe we want to attach key
words back to our images that say, you know,

00:44:29.000 --> 00:44:33.690
what sizes the user resized their
images to using our plug-in.

00:44:33.690 --> 00:44:36.730
So I'll have some very brief code that does it.

00:44:36.730 --> 00:44:39.840
Again, three lines to add those key words.

00:44:39.840 --> 00:44:47.900
And right after we actually write the image, let's do that.

00:44:47.900 --> 00:44:53.880
So as I mentioned earlier, not only can you
just add a key word like resized to an image,

00:44:53.880 --> 00:44:56.500
but you can actually add the whole hierarchy.

00:44:56.500 --> 00:45:00.739
So you specify a hierarchy by putting
the hierarchy in an array.

00:45:00.739 --> 00:45:08.489
So let's put the suffix that the user asked
for, whatever it was, under apparent of resized.

00:45:08.489 --> 00:45:13.599
So that way, if they ever want to know what are
all the images I resized, they can type in resized.

00:45:13.599 --> 00:45:16.920
Or what are all the images that I attached small to?

00:45:16.920 --> 00:45:18.130
They can search for that as well.

00:45:18.130 --> 00:45:23.740
We'll put all those key words in an array,
and then we just tell the export manager,

00:45:23.739 --> 00:45:28.559
we tell Aperture add these hierarchical
key words to an image.

00:45:28.559 --> 00:45:38.849
So let's save that and build and run.

00:45:38.849 --> 00:45:50.460
So if I'm looking for small images now, there's nothing
in the database that has small in any key words,

00:45:50.460 --> 00:45:53.630
any metadata, any custom metadata, anything.

00:45:53.630 --> 00:45:58.190
But let's do another export.

00:46:02.610 --> 00:46:06.050
And we'll do a couple sizes.

00:46:06.050 --> 00:46:07.789
We'll do a 150.

00:46:07.789 --> 00:46:10.099
That's small.

00:46:11.829 --> 00:46:15.299
300. That's medium.

00:46:15.300 --> 00:46:18.480
And then a full size.

00:46:18.480 --> 00:46:20.219
So let's export this.

00:46:20.219 --> 00:46:27.730
We'll put it in a new folder.

00:46:34.289 --> 00:46:40.599
And you can see the key words tags just popped up
on those images, which tells me that it's working.

00:46:40.599 --> 00:46:41.460
First let's go look.

00:46:41.460 --> 00:46:46.460
So we've got six images, which was what we
expected, a small and a medium for each one.

00:46:46.460 --> 00:46:53.490
Now let's go back to Aperture.

00:46:53.489 --> 00:47:04.259
Now, if I look at our key words head, I'll see there's
now a resized key word that has some children in it.

00:47:04.260 --> 00:47:08.030
And these are from a previous run.

00:47:08.030 --> 00:47:12.330
So now we have these key words
have been attached to some images.

00:47:12.329 --> 00:47:19.750
So if I search now for small, I get all three of those.

00:47:19.750 --> 00:47:24.010
If I search for resized, I also get all three.

00:47:24.010 --> 00:47:29.410
So again, this can be a really flexible
way to attach what your plug-in did

00:47:29.409 --> 00:47:33.369
to certain images and allow the user to find those later.

00:47:33.369 --> 00:47:40.019
And let's go back to the slides, please.

00:47:40.019 --> 00:47:48.099
So that was a very basic life cycle of
building a plug-in and running it in Aperture.

00:47:48.099 --> 00:47:49.380
These are some of the tips and tricks.

00:47:49.380 --> 00:47:53.750
These are some things to watch out
for as you're building your plug-ins.

00:47:53.750 --> 00:47:57.409
Some methods are going to be called
on your plug-in in a secondary thread.

00:47:57.409 --> 00:47:59.670
They're all noted in the documentation.

00:47:59.670 --> 00:48:04.329
And I mentioned some things like locking the
progress or surrounding those things with locks

00:48:04.329 --> 00:48:08.480
and making sure any threads or callbacks you start finish.

00:48:08.480 --> 00:48:11.050
Here are some other things to note.

00:48:11.050 --> 00:48:15.269
Don't try and create or modify UI in those methods.

00:48:15.269 --> 00:48:20.759
Don't try and do KVO or bindings to any UI items
while those methods are running on a separate thread.

00:48:20.760 --> 00:48:23.440
And again, finish your callbacks.

00:48:23.440 --> 00:48:29.200
Your plug-in is going to be released as
soon as you tell Aperture you're done.

00:48:29.199 --> 00:48:32.889
The ApertureExportManager object is not bindings-enabled.

00:48:32.889 --> 00:48:38.799
So things like metadata, don't try
and bind directly to that object.

00:48:38.800 --> 00:48:40.820
It builds those things on the fly for you.

00:48:40.820 --> 00:48:44.080
They're not necessarily cached there.

00:48:44.079 --> 00:48:50.670
So if you need to use bindings, cache them on your side,
cache them in your plug-in and then use bindings to your UI,

00:48:50.670 --> 00:48:53.630
as long as you're running on the main thread.

00:48:53.630 --> 00:48:58.769
Again, key words Custom Metadata, extremely
useful and a great way to, you know,

00:48:58.769 --> 00:49:02.050
integrate your plug-in back into Aperture.

00:49:02.050 --> 00:49:05.070
They're going to be applied immediately
and the user can't undo them.

00:49:05.070 --> 00:49:06.530
Your plug-in can't undo them.

00:49:06.530 --> 00:49:10.400
So apply them when something has happened.

00:49:10.400 --> 00:49:16.910
Don't retain a lot of thumbnails in metadata,
especially if your plug-in needs to run

00:49:16.909 --> 00:49:20.879
through every single image that's being
exported and look for something in the metadata.

00:49:20.880 --> 00:49:26.940
Make sure you set up your own auto release
pool and release those as you use them.

00:49:26.940 --> 00:49:32.650
Otherwise, you'll run out of memory pretty
quick if the user decides to export 700 images.

00:49:32.650 --> 00:49:40.010
And then the last thing for plug-in development, if
you haven't done it before, set up a Custom Executable,

00:49:40.010 --> 00:49:45.380
set up a shell script or change the build rule so
that the plug-in gets put in the correct place.

00:49:45.380 --> 00:49:51.160
So that was it, that was the basics
of creating an Aperture export API.

00:49:51.159 --> 00:49:54.579
It's available in Aperture 15 and later.

00:49:54.579 --> 00:49:58.230
Plug-ins are basic Cocoa bundles, written Objective C,

00:49:58.230 --> 00:50:01.909
the API is an objective C. You have to
install the software development kit.

00:50:01.909 --> 00:50:04.019
It comes with all the documentation you need.

00:50:04.019 --> 00:50:05.789
It comes with sample code.

00:50:05.789 --> 00:50:09.269
It comes with an Xcode plug-in.

00:50:09.269 --> 00:50:11.070
Aperture has to render versions.

00:50:11.070 --> 00:50:13.370
There's a difference between versions and masters.

00:50:13.369 --> 00:50:15.269
That kind of shows in the API.

00:50:15.269 --> 00:50:18.650
So make sure you have an idea of what you want users to do.

00:50:18.650 --> 00:50:24.960
And you have full control over what formats
and how users are allowed to export.

00:50:24.960 --> 00:50:29.780
And you can send data back to Aperture.

00:50:29.780 --> 00:50:33.740
So if you want more information,
here's some great resources.

00:50:33.739 --> 00:50:36.859
Again, I've got the URL to where you can get the SDK.

00:50:36.860 --> 00:50:40.420
You have to install it in order to build any of this stuff.

00:50:40.420 --> 00:50:47.360
If the graphics in media lab, me and several other Aperture
team members will be there tomorrow from 2:00 to 6:00,

00:50:47.360 --> 00:50:52.200
if you have any specific questions, if you want
to ask us or show us anything, or, you know,

00:50:52.199 --> 00:50:58.379
even if you just want to see some of the stuff again, drop
by, grab one of us, we'll be happy to discuss it with you.

00:50:58.380 --> 00:51:02.150
And a great resource is the Aperture
dev mailing list.

00:51:02.150 --> 00:51:05.150
You can sign up at list.apple.com.

00:51:05.150 --> 00:51:11.190
Not only is there all kinds of people that have built
plug-ins and done a lot of this stuff before, but, you know,

00:51:11.190 --> 00:51:14.210
engineers are also on that list, so we see what's going on.

00:51:14.210 --> 00:51:16.530
It's a great place to ask questions,
great place to get help.

00:51:16.530 --> 00:51:19.490
So if you're interested in plug-ins, sign up there.

00:51:19.489 --> 00:51:23.289
And then there's also a whole website
dedicated to Aperture plug-ins.

00:51:23.289 --> 00:51:26.110
So if you're looking for a plug-in,
if you want to see what's out there,

00:51:26.110 --> 00:51:29.070
if you want to see what other people are
doing or if you want to ask questions

00:51:29.070 --> 00:51:31.890
on those forums, go to aperturepluggedin.com.