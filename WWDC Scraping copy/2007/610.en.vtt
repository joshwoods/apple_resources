WEBVTT

00:00:09.990 --> 00:00:14.379
>> So Innovation Behind Apple dot
com, it's kind of a big title.

00:00:14.380 --> 00:00:18.160
But basically you know, what we're gonna do today
is talk about some of the things that have gone

00:00:18.160 --> 00:00:20.579
into the new site that we launched this week.

00:00:20.579 --> 00:00:24.799
And just give you a little bit of background
on sort of some stuff we've done in the past,

00:00:24.800 --> 00:00:28.600
and you know, try to have a little bit of fun with it.

00:00:28.600 --> 00:00:34.329
The team's gonna present a bunch of demos today,
I'm gonna give you guys a little bit of background.

00:00:34.329 --> 00:00:35.100
Here's what we're gonna cover.

00:00:35.100 --> 00:00:39.810
I'm gonna go through a sort of brief history
of the site for the last ten years or so,

00:00:39.810 --> 00:00:41.109
thousands of slides, no I'm just kidding.

00:00:41.109 --> 00:00:45.590
We're gonna do a little bit of a backstage
tour talking about our new search,

00:00:45.590 --> 00:00:50.380
talking about how we're integrating QuickTime
into the DOM with age, and trying to you know,

00:00:50.380 --> 00:00:52.150
take more advantage of what we can do with QuickTime.

00:00:52.149 --> 00:00:58.049
And then we're gonna talk about how we're trying to actually
do some really compelling UI elements using open standards.

00:00:58.049 --> 00:01:03.539
And then lastly we're gonna talk a little bit about
the tools that we're using to do these things.

00:01:03.539 --> 00:01:05.890
So little bit of history on the site.

00:01:05.890 --> 00:01:08.299
Basically you know, the theme here
is Evolution's a Good Thing.

00:01:08.299 --> 00:01:12.509
You know, one of the things I've been reading a
lot about in terms of the response to the redesign

00:01:12.510 --> 00:01:15.219
of the site is you know, people are
saying oh they haven't changed anything

00:01:15.219 --> 00:01:17.480
in seven years, it's you know, it's been that long.

00:01:17.480 --> 00:01:22.450
There's been a lot of change, but it's been sort of
invisible, or it's been us experimenting with elements.

00:01:22.450 --> 00:01:25.070
And so I was gonna you know, highlight a few of those things

00:01:25.069 --> 00:01:28.899
and kind of poke a little bit of
fun at ourselves with some examples.

00:01:28.900 --> 00:01:32.880
First, this is actually the first Apple website I
worked on, which was you know, really hard code,

00:01:32.879 --> 00:01:36.159
because basically it's a giant
jpeg with an image mount, you know.

00:01:36.159 --> 00:01:37.729
So things were really hard back then.

00:01:37.730 --> 00:01:45.850
But then you know, as we started getting into
you know, what Apple dot com is gonna become,

00:01:45.849 --> 00:01:50.369
and having our first online store and other stuff,
you know, you're dealing, at the time we were dealing

00:01:50.370 --> 00:01:57.160
with the classic Netscape and early IE days where you
know, you're trying to hack a table any which way you can.

00:01:57.159 --> 00:02:03.489
And you know, so I, we went back and found some really fun
code examples of some stuff that we definitely don't aspire

00:02:03.489 --> 00:02:05.489
to do any more, but are just kind of fun, you know.

00:02:05.489 --> 00:02:09.889
So you know, here's a page we had up for Think Different,
and you know, this is like the most extensive use

00:02:09.889 --> 00:02:11.750
of non-breaking space that you know, I could find.

00:02:11.750 --> 00:02:11.830
( laughter )

00:02:11.830 --> 00:02:18.280
And there's some other just really fun you know, you
know, inconsistencies in here and some other stuff.

00:02:18.280 --> 00:02:20.020
So you know, that's kind of a fun thing.

00:02:20.020 --> 00:02:27.960
In two thousand with the introduction, or sort of
the debut of the fact that we were gonna do OS X,

00:02:27.960 --> 00:02:32.189
we redesigned the site to have the classic tabs that
everybody thinks we have that were the same for seven years.

00:02:32.189 --> 00:02:35.280
And actually they changed a few times, but they're
kind of subtle, so you'll see some examples

00:02:35.280 --> 00:02:38.770
This was the first incrination
of them with the sort

00:02:38.770 --> 00:02:42.469
of giant red apple, and the tabs here are much taller.

00:02:42.469 --> 00:02:50.639
And it's kind of like going back and looking at you know,
OS X zero, or even Jaguar after getting so used to Tiger,

00:02:50.639 --> 00:02:56.599
or now Leopard, you know, like oh my God, you know,
those elements are you know, there's so much color

00:02:56.599 --> 00:03:01.949
and everything going on, you know, it's just
interesting how far the design's evolved there too.

00:03:01.949 --> 00:03:07.209
But around this time you know, like I said, we were kind
of hacking tables every which way you can, is you know,

00:03:07.210 --> 00:03:10.510
we just had inline styles and all
kinds of stuff absolutely everywhere.

00:03:10.509 --> 00:03:14.149
So it's impossible to read, and you know, don't take
notes about this at all, of course it's just to show

00:03:14.150 --> 00:03:19.370
that you know, we had some stuff that was really
hard to read, and really hard to work with,

00:03:19.370 --> 00:03:22.969
and stuff still wasn't really necessarily
evolving fast enough.

00:03:22.969 --> 00:03:26.840
But we were, at this point, this was
about 2002, you know,

00:03:26.840 --> 00:03:29.120
2003, we'd been on OS X for a little while.

00:03:29.120 --> 00:03:34.390
And you know, in that intervening time really what we were
doing was we were experimenting a lot with what we could do

00:03:34.389 --> 00:03:38.979
with QuickTime in media, and doing some full
screen video, and some things like that.

00:03:38.979 --> 00:03:43.849
But there wasn't a whole lot happening with browsers
yet, because you know, Firefox hadn't really happened.

00:03:43.849 --> 00:03:48.989
Safari came out around that timeframe, and that's
when we really started to look at you know,

00:03:48.990 --> 00:03:55.670
how do we get into things like CSS and really start evolving
what we're doing in the base you know, content on the site.

00:03:55.669 --> 00:04:00.719
So we actually did some stuff with CSS initially,
but it was kind of a baby step in the sense

00:04:00.719 --> 00:04:05.639
that we were basically removing a lot of the inline
styles, and kind of replacing them with a set of classes

00:04:05.639 --> 00:04:11.579
that did kind of the equivalent, but we
weren't really taking advantage of it yet.

00:04:11.580 --> 00:04:13.590
A couple of years later, and you
notice now the tabs have changed,

00:04:13.590 --> 00:04:15.360
there's a blue apple and they're a little bit different.

00:04:15.360 --> 00:04:19.270
You know, we introduced this thing called iPod,
and around the same time we were you know,

00:04:19.269 --> 00:04:24.079
starting to get into a few other things we could do with
CSS, and again, still doing some stuff with QuickTime.

00:04:24.079 --> 00:04:30.430
The home page here had a QuickTime VR that
kind of transformed from being a QuickTime VR

00:04:30.430 --> 00:04:33.840
into the image at the end of the little presentation.

00:04:33.839 --> 00:04:38.189
Couple years later, you know, iPod's
starting to take off, we're on Windows,

00:04:38.189 --> 00:04:40.719
and we're doing a little bit more with CSS.

00:04:40.720 --> 00:04:44.940
But again, poking fun at ourselves, you know, here we
thought you know, more was better, so we had you know,

00:04:44.939 --> 00:04:50.019
a green and a purple, and a blue and a pink CSS to
manage swapping out colors and stuff on the site.

00:04:50.019 --> 00:04:54.539
And you know, making some progress.

00:04:54.540 --> 00:05:01.170
The next year too, this is I think about two
thousand four, iTunes is really starting to take off.

00:05:01.170 --> 00:05:05.580
And we started to do some stuff that was getting a little
bit into manipulating X amount, a little bit of data.

00:05:05.579 --> 00:05:12.259
Here we're taking an actual sales feed
from the online store for music as part

00:05:12.259 --> 00:05:16.189
of the hundred million song countdown that we did.

00:05:16.189 --> 00:05:18.910
And so this was kind of fun, cause this was
kind of a dynamic page, it was updating.

00:05:18.910 --> 00:05:25.270
We had you know, lots of traffic cause you had people
were sitting there reloading and reloading and reloading.

00:05:25.269 --> 00:05:29.069
But along with this we actually started
to see some changes under the hood.

00:05:29.069 --> 00:05:35.459
Even though things kind of look a lot the same, at
this point we're actually starting to break the CSS

00:05:35.459 --> 00:05:40.029
down to some global elements, some page
elements, you know, some area elements.

00:05:40.029 --> 00:05:46.539
And you know, getting into having
some really core basic trivia things.

00:05:46.540 --> 00:05:49.189
This takes us to about 2005.

00:05:49.189 --> 00:05:51.319
Here we're doing some fun with some dynamic HTML.

00:05:51.319 --> 00:05:56.050
We had a home page that was you know,
scrolling iPods and some other stuff.

00:05:56.050 --> 00:06:00.740
Doing some stuff, managing video on
the home page as recently as last year.

00:06:00.740 --> 00:06:02.879
You know, this is just a month or so ago.

00:06:02.879 --> 00:06:09.810
And you know, now we've actually moved on to
having some discrete global scripts and styles.

00:06:09.810 --> 00:06:13.300
And you guys can go look, this is the stuff that's kind of
up on the site now, so if you're curious you can go look

00:06:13.300 --> 00:06:15.889
at the actual CSS classes that are live on the site.

00:06:15.889 --> 00:06:22.379
You know, so we're doing a lot with layout, the
team's done a lot to really develop a good grid,

00:06:22.379 --> 00:06:25.779
and it's really impressive the sort of progress
they've made over the last couple of years.

00:06:25.779 --> 00:06:30.599
So, and this is kind of what the
new finished site looks like.

00:06:30.600 --> 00:06:36.010
So you know, even though this is sort of the most dramatic
visible change, you know, there's been a lot of change

00:06:36.009 --> 00:06:40.449
over time, even though the tabs have
been there you know, pretty consistently.

00:06:40.449 --> 00:06:43.529
So that's pretty much it.

00:06:43.529 --> 00:06:44.769
We're a little ahead of the schedule.

00:06:44.769 --> 00:06:51.680
Douglas is gonna you know, tell you all
about what it took to improve our search.

00:06:56.720 --> 00:07:00.380
So, Douglas?

00:07:00.379 --> 00:07:08.129
>> Okay. I'm not sure what Dan is trying to say, he
used two of my code examples in the earlier slides.

00:07:08.129 --> 00:07:15.029
So I guess that's why he made me a manager and I
deal with budget and those types of things now.

00:07:15.029 --> 00:07:18.739
Anyway, and before I begin, not everybody
on our team could be up there, up here,

00:07:18.740 --> 00:07:22.310
but we had a monumental effort in
terms of what we launched on Monday.

00:07:22.310 --> 00:07:27.220
I think we covered more of the site than
pretty much any other company could handle,

00:07:27.220 --> 00:07:34.240
particularly when most of our HTML is, we're not
driven by content management systems, it's static.

00:07:34.240 --> 00:07:38.470
So I'd just like to acknowledge the team.

00:07:38.470 --> 00:07:44.550
Scott, Kevin, who had, Kevin actually
is, was the hundred billion song winner.

00:07:44.550 --> 00:07:46.960
We brought him from Kansas.

00:07:46.959 --> 00:07:50.479
David and two other people who
aren't here, Stephanie and Johnson.

00:07:50.480 --> 00:07:52.020
So thank you.

00:07:53.060 --> 00:07:53.649
All right.

00:07:53.649 --> 00:07:57.799
So, search.

00:07:57.800 --> 00:08:02.689
Dan asked me to look at search
at the end of two thousand two.

00:08:02.689 --> 00:08:06.459
Basically up to that point search
was largely an afterthought.

00:08:06.459 --> 00:08:11.379
It was just, yeah it's there, you know, guess it works.

00:08:11.379 --> 00:08:17.029
So I went and took a look at it, and
the first thing I did was I took ten

00:08:17.029 --> 00:08:20.299
of our top products and I ran searches against it.

00:08:20.300 --> 00:08:29.699
And the results were one item managed to just eke
itself into the top ten results on the first page.

00:08:29.699 --> 00:08:32.789
So we were at less than ten percent accuracy.

00:08:32.789 --> 00:08:36.939
So had a little discussion with our
IS team, who managed the search.

00:08:36.940 --> 00:08:41.800
Search was custom CGIs paired with an
old version of Verity.

00:08:41.799 --> 00:08:49.079
And I guess I sort of already belated the point,
but if Ralph C was beef, we were vegetarians.

00:08:49.080 --> 00:08:59.320
So, and search was slow, and the user experience design
was also an afterthought, nothing particularly inspiring.

00:08:59.320 --> 00:09:06.970
So the IS team gave us sort of free reign to go out
and look at options, and of course at this time,

00:09:06.970 --> 00:09:09.580
beginning of 2003 there
was this little company called Google,

00:09:09.580 --> 00:09:12.580
and they were doing some pretty cool
things in search, and most of us used it.

00:09:12.580 --> 00:09:19.090
And of all the companies that were invested in the search,
they had these things, these GSAs, Google search appliances.

00:09:19.090 --> 00:09:29.280
And so we got one of those, we tested it for a month,
and I believe on an initial crawl we had relevancy,

00:09:29.279 --> 00:09:32.409
good results, about seventy percent plus accuracy.

00:09:32.409 --> 00:09:34.789
So we were pretty happy.

00:09:34.789 --> 00:09:40.629
Speed was clearly an improvement, and what we saw in the
way we thought about implementing it was the potential

00:09:40.629 --> 00:09:49.580
for more flexible custom designs on some sub-collection
types of search, which I'll show you an example of.

00:09:49.580 --> 00:09:54.900
So we rolled this search out, I
believe it was June 2003.

00:09:54.899 --> 00:10:00.829
And there's nothing dramatically inspiring about
the design, but fundamentally it was working.

00:10:00.830 --> 00:10:05.420
You would actually search for something and
you would find what you were looking for.

00:10:05.419 --> 00:10:13.099
The one key element that we did is we introduced
a featured result based on keyword matching.

00:10:13.100 --> 00:10:22.970
So in this case we're pulling in the snippet of HTML, and it
was just a logo, or a box shot, a little bit of intertext,

00:10:22.970 --> 00:10:27.420
and then sort of key links off to the
things we figured you'd most like to do.

00:10:27.419 --> 00:10:33.250
And that was pretty well received, and people
liked the search cause it actually worked.

00:10:33.250 --> 00:10:39.740
So, and then to customization, two WWDCs ago
we actually launched the Dashboard widget site.

00:10:39.740 --> 00:10:44.710
And as part of that we decided to
customize the sub-collection search.

00:10:44.710 --> 00:10:55.790
And basically it's all fundamentally the same except for
the wrapper, but it was very well received with the site.

00:10:55.789 --> 00:11:03.669
So, search sort of stayed in its Google search
appliance fashion for about three years,

00:11:03.669 --> 00:11:06.659
and then we started talking about
a redesign of Apple dot com.

00:11:06.659 --> 00:11:11.730
And in part of that discussion, and
how we plan to change the navigation.

00:11:11.730 --> 00:11:18.120
We decided that search should become a
core element of navigating Apple dot com,

00:11:18.120 --> 00:11:22.190
and decided to elevate it up into
the tab bar which you've seen.

00:11:22.190 --> 00:11:28.260
So in discussing that and making it a strategic
part of the navigation experience we knew,

00:11:28.259 --> 00:11:31.799
we had to do something really great,
so we started asking questions.

00:11:31.799 --> 00:11:36.469
Could we actually make search better than
the Google implementation we have now?

00:11:36.470 --> 00:11:42.139
And if so, you know, what questions came
up, and what would we have to tackle?

00:11:42.139 --> 00:11:46.529
So the first one was could we improve our
meta data to enhance our search options?

00:11:46.529 --> 00:11:49.500
Could we make Google work really hard?

00:11:49.500 --> 00:11:55.970
Could we launch simultaneous queries on one
search term, and bring back categorized results?

00:11:55.970 --> 00:12:00.800
Could we merge in other results, like
from iTunes, from the online store,

00:12:00.799 --> 00:12:04.149
which were basically running their own search engines?

00:12:04.149 --> 00:12:12.579
Could we provide more results in a page
without actually having to commit more queries?

00:12:12.580 --> 00:12:14.650
And could we enhance the user experience and design?

00:12:14.649 --> 00:12:22.110
Could we actually bring in our A designers and
have them help us achieve something really great?

00:12:22.110 --> 00:12:28.649
And then lastly the biggest challenge was could we come up
with something that actually avoided search all together?

00:12:28.649 --> 00:12:34.139
Could we something that was sort of a spotlight
like shortcut, and we'd sort of drive that based

00:12:34.139 --> 00:12:39.970
on site analytics, what was popular, and also certain
specific keyword targeting that we wanted to do.

00:12:39.970 --> 00:12:46.090
And then lastly, we wanted if at all possible, to
make it fun, make it feel Apple, something engaging,

00:12:46.090 --> 00:12:50.840
something you'd actually want to play with.

00:12:50.840 --> 00:12:57.019
So here is the example of the search
results page that we rolled out this Monday.

00:12:57.019 --> 00:13:04.519
And what you'll see is we're still doing the featured
result, we thought that's a powerful element.

00:13:04.519 --> 00:13:08.549
What we added to it was a complementary result.

00:13:08.549 --> 00:13:17.409
We've got search results coming back categorically
for the most part, we devout to our products,

00:13:17.409 --> 00:13:21.629
but in certain other areas we bubble other elements up.

00:13:21.629 --> 00:13:27.320
We have again, multiple categories, and I'll show
you a little bit more about that in a second.

00:13:27.320 --> 00:13:32.070
And then just a teeny bit of personalization,
your most recent searches,

00:13:32.070 --> 00:13:35.260
some other things that we plan to do in the future.

00:13:35.259 --> 00:13:39.299
And then just scrolling down the page,
you see those additional sections.

00:13:39.299 --> 00:13:47.359
Downloads, we're actually pulling in the iTunes
results from the store, and a few other sections, so.

00:13:47.360 --> 00:13:51.250
And I believe, let's go to a real demo.

00:13:51.250 --> 00:13:59.240
So here's the, are we up?

00:13:59.240 --> 00:14:02.450
Go to demo please.

00:14:02.450 --> 00:14:05.129
There we go.

00:14:05.129 --> 00:14:16.169
So this is essentially the same
search, this is Aubrey by the way.

00:14:16.169 --> 00:14:17.629
Mister Anderson, yes.

00:14:17.629 --> 00:14:18.340
That's what he goes by.

00:14:18.340 --> 00:14:29.110
So what you see is actually each category here on the
right side is actually an individual query to Google.

00:14:29.110 --> 00:14:37.159
So we're actually running six queries to Google, which
is based on the metadata that we've put into pages.

00:14:37.159 --> 00:14:39.860
And then we're also making the query out to iTunes.

00:14:39.860 --> 00:14:51.940
And with the categories you can
isolate them, oops, I always do that.

00:14:51.940 --> 00:14:57.220
So you know, little enhancements, like if you want
to actually, if you're really searching for something

00:14:57.220 --> 00:15:02.690
and you just kind of want to go through each of the
top results of the category, you can move through them.

00:15:02.690 --> 00:15:07.650
Oops. And then on iTunes we're pulling in,
I think we're pulling in a hundred results,

00:15:07.649 --> 00:15:14.470
and those are grouped into the available sections
that the iTunes search service allows us to see.

00:15:14.470 --> 00:15:18.290
And so in this case there's some
podcasts and there's some music,

00:15:18.289 --> 00:15:21.500
and just like the iTunes interface,
you can move through them.

00:15:21.500 --> 00:15:22.830
Did I see something called boosicle?

00:15:22.830 --> 00:15:23.340
( laughter )

00:15:23.340 --> 00:15:24.440
It's possible.

00:15:24.440 --> 00:15:26.640
All right, well I won't go all the way through.

00:15:26.639 --> 00:15:27.039
( laughter )

00:15:27.039 --> 00:15:35.379
Anyway, and then so you see most, you can run,
these are the most recent searches that I was doing.

00:15:35.379 --> 00:15:41.549
You can provide feedback, that actually goes into a
database that we can see how people are responding to it.

00:15:41.549 --> 00:15:45.620
I actually haven't looked at it
yet, it's been kind of a crazy week.

00:15:45.620 --> 00:15:47.230
So, and a couple of other things.

00:15:47.230 --> 00:15:48.960
So if I run through a couple of these searches, you know,

00:15:48.960 --> 00:15:53.570
movies are actually a very popular element
on the site, the movie trailer site.

00:15:53.570 --> 00:15:57.400
And so somebody comes here and sees the
navigations, like where'd my movies go?

00:15:57.399 --> 00:16:01.149
So maybe they search for it.

00:16:01.149 --> 00:16:10.720
And so we're getting the feature result back,
and you can see where else we talk about movies,

00:16:10.720 --> 00:16:14.170
since it's pretty much an important
aspect of our overall strategy.

00:16:14.169 --> 00:16:22.009
And then you see related store results,
downloads, and even some iTunes results.

00:16:22.009 --> 00:16:26.720
Oh look, the Goofy Goober Rock album, SpongeBob.

00:16:26.720 --> 00:16:35.070
So, and the nice thing is we're pulling in,
for our own search we're pulling in data from,

00:16:35.070 --> 00:16:43.590
we do have a number of content management systems for
different areas, downloads, retail, things like that.

00:16:43.590 --> 00:16:47.290
So there's this movie Once that I've been
wanting to see, I've heard a lot about.

00:16:47.289 --> 00:16:54.620
And so if you actually commit a search for that, we
actually grab that out of our content management system,

00:16:54.620 --> 00:16:58.289
and make it a featured result, so pretty cool.

00:16:58.289 --> 00:17:01.919
So that's the search results.

00:17:01.919 --> 00:17:08.759
Now sort of going back to our original
site and what we were trying to accomplish,

00:17:08.759 --> 00:17:13.369
the results give us the categories driven
by content and description meta data,

00:17:13.369 --> 00:17:20.569
we have Google committing multiple simultaneous queries,
we're merging in results from iTunes and the online store,

00:17:20.569 --> 00:17:24.529
we're providing more results inlining the page
without having to make an additional query,

00:17:24.529 --> 00:17:31.869
and I think we've got an enhanced user experience and
design that fits the needs of what people would want to do.

00:17:31.869 --> 00:17:38.559
So now going beyond that, and avoiding, considering
avoiding search all together, what we really wanted to get

00:17:38.559 --> 00:17:46.039
to was giving the user the ability to have quick findability
of items, even possibly the sense of predictability,

00:17:46.039 --> 00:17:49.649
like we're actually thinking what
they might be looking for in advance,

00:17:49.650 --> 00:17:53.150
and encouraging a little bit of exploration and fun.

00:17:53.150 --> 00:17:57.810
And so that's where we came up
with this dynamic shortcut model.

00:17:57.809 --> 00:18:04.659
And so if I go out to Apple, and someone comes to the
site, and I don't know, there's this thing we're launching

00:18:04.660 --> 00:18:09.269
that people are pretty interested in, iPhone.

00:18:09.269 --> 00:18:14.099
And so we're literally doing dynamic query.

00:18:14.099 --> 00:18:16.959
Someone types in iPhone, and there's
the two things that we'd most like them

00:18:16.960 --> 00:18:20.920
to potentially do, go learn about it or watch the ads.

00:18:20.920 --> 00:18:26.930
So maybe another example is one day this
user heard about this browser that you know,

00:18:26.930 --> 00:18:30.950
some data browser that Apple's doing on the Windows
side, but they can't quite remember what the name is.

00:18:30.950 --> 00:18:34.180
It's like Safarini, or something like that.

00:18:34.180 --> 00:18:39.580
So they come and they start typing, oh, there it is.

00:18:39.579 --> 00:18:40.259
Ah, it's Safari.

00:18:40.259 --> 00:18:45.759
But maybe they've heard something
else, that oh it's just a beta, right?

00:18:45.759 --> 00:18:49.180
Or you know, well it's a new type of browser.

00:18:49.180 --> 00:18:52.460
Or well I just, it's got something to do with the Internet.

00:18:52.460 --> 00:18:53.970
( laughter )

00:18:53.970 --> 00:18:54.269
So -

00:18:54.269 --> 00:18:54.420
( applause )

00:18:54.420 --> 00:18:55.480
Aww.

00:19:02.630 --> 00:19:04.100
>> How about Steve Jobs?

00:19:04.099 --> 00:19:04.389
( laughter )

00:19:04.390 --> 00:19:07.100
>> What are you trying to say?

00:19:07.099 --> 00:19:08.980
( laughter )
>> Keep going.

00:19:08.980 --> 00:19:09.920
( laughter )

00:19:09.920 --> 00:19:10.860
( applause )

00:19:10.859 --> 00:19:13.740
>> No dice.

00:19:13.740 --> 00:19:13.829
( applause )

00:19:13.829 --> 00:19:19.899
>> (inaudible) webcast, good idea.

00:19:19.900 --> 00:19:26.000
>> Yeah. One of my favorite ones was I got some feedback
from our trailers guy that one of his customers sent

00:19:26.000 --> 00:19:30.269
in some feedback and said you know, I
came to the site, and I was looking,

00:19:30.269 --> 00:19:33.150
and there's this new Will Smith movie
out and I couldn't remember the name.

00:19:33.150 --> 00:19:39.930
So I just went up and I typed Will Smith, oh
well if I could type, Will Smooth, not so much.

00:19:39.930 --> 00:19:42.960
Ah, there it is, there's his movie.

00:19:42.960 --> 00:19:44.410
And I did it again.

00:19:44.410 --> 00:19:46.550
( laughter )

00:19:46.549 --> 00:19:49.169
So pretty cool.

00:19:49.170 --> 00:19:58.390
One of the key technology challenges for the shortcuts
is they are dynamic, they are a significant load,

00:19:58.390 --> 00:20:03.950
and our IS team basically demanded that we build
something from the infrastructure standpoint

00:20:03.950 --> 00:20:11.370
that did not basically trespass on
the Apple dot com serving environment.

00:20:11.369 --> 00:20:13.729
And so that was one challenge.

00:20:13.730 --> 00:20:18.130
And then the next challenge was this
obviously had to be ridiculously fast.

00:20:18.130 --> 00:20:24.070
It had to be, it had to be as good if not
better than actual spotlight in the OS.

00:20:24.069 --> 00:20:29.149
So that was a challenge, and we kind of started,
and we were pretty far down the mountain,

00:20:29.150 --> 00:20:32.840
and within four weeks we got to a pretty impressive place.

00:20:32.839 --> 00:20:35.619
And that's where I bring in Mister Anderson.

00:20:35.619 --> 00:20:36.509
Thank you.

00:20:36.509 --> 00:20:48.009
( applause )

00:20:48.009 --> 00:20:51.759
( humming )

00:20:51.759 --> 00:20:54.230
>> Ah, there I am.

00:20:54.230 --> 00:21:00.460
So when I first heard about the search idea,
a ton of thoughts went through my head,

00:21:00.460 --> 00:21:05.850
and most of them were just sort
of about predicting people's text.

00:21:05.849 --> 00:21:16.719
This is what we just were showing you, and how to begin
to guess at what the user might be thinking as she typed.

00:21:16.720 --> 00:21:20.730
And we came to think that we probably
could do that, and did a bunch of demos.

00:21:20.730 --> 00:21:29.730
And we thought we could try a few things,
and react in real time as the user searched.

00:21:29.730 --> 00:21:37.009
Used this thing call AJAX to search asynchronously, which
was perform search as you type without reloading the page,

00:21:37.009 --> 00:21:42.170
begin to show best guesses and
narrow it down the more text we got,

00:21:42.170 --> 00:21:46.220
and then try to enhance the experience and not be annoying.

00:21:46.220 --> 00:21:48.140
We didn't want to sort of throw something up at the user

00:21:48.140 --> 00:21:52.300
that would be bothersome, we wanted
to try to like help them.

00:21:52.299 --> 00:21:56.589
So we thought all right, well we should
think about all the products we have,

00:21:56.589 --> 00:21:59.149
and relate them to a bunch of keywords, right?

00:21:59.150 --> 00:22:02.800
Should be pretty simple, we'll have a list
of keywords, we'll look at the people typing,

00:22:02.799 --> 00:22:06.319
and if we see one of those keywords,
we'll guess at the product

00:22:06.319 --> 00:22:11.319
or at the iTunes hit, or whatever it was, and show it.

00:22:11.319 --> 00:22:13.899
There were so many keywords.

00:22:13.900 --> 00:22:19.980
We, our initial list I think we had
six hundred, seven hundred, and the,

00:22:19.980 --> 00:22:25.710
we originally thought that maybe we would run it
off of a static XML document where you just have it,

00:22:25.710 --> 00:22:31.620
we'd have JavaScript go out and read a document,
parse it in real time, and it wouldn't be that slow,

00:22:31.619 --> 00:22:35.129
and then there'd be no server hit, it
would just be like another request.

00:22:35.130 --> 00:22:42.150
But the document grew and grew and grew, and before
too long it was four hundred K, five hundred K,

00:22:42.150 --> 00:22:45.050
and there was still tons of stuff coming.

00:22:45.049 --> 00:22:50.809
So that clearly wasn't gonna work, we needed it to
be, we liked the maintainability of having it all sort

00:22:50.809 --> 00:22:53.200
of in one source document that people could kind of edit

00:22:53.200 --> 00:22:56.279
and we could make sense of, but
it had to be way, way, way faster.

00:22:56.279 --> 00:23:01.829
There's no you know, sitting for five hundred K to
load while people are searching, that was pointless.

00:23:01.829 --> 00:23:07.669
So the first guess we had was maybe we'd put a CGI in the
middle because we already had infrastructure to do that.

00:23:07.670 --> 00:23:16.490
So we had a CGI written to kind of pre-parse the
text based on whatever letters you threw at it.

00:23:16.490 --> 00:23:21.839
And that basically worked for a test,
it was really good for proving concept.

00:23:21.839 --> 00:23:24.490
But it was immediately super hard to maintain.

00:23:24.490 --> 00:23:31.930
It was still relatively slow to sort the source
file, but we tried it as a big flat text file, and,

00:23:31.930 --> 00:23:35.810
so it would parse faster, and it
was still just not really happening.

00:23:35.809 --> 00:23:40.409
And we also ran into a problem
of generally limited semantics,

00:23:40.410 --> 00:23:43.930
where your search would only match on the keywords.

00:23:43.930 --> 00:23:50.320
But sometimes to be more effective we thought it
should match in the description, in the title.

00:23:50.319 --> 00:23:54.990
And so the CGI, that general approach
broke down pretty quick.

00:23:54.990 --> 00:24:00.079
So, I'm slightly out of order.

00:24:00.079 --> 00:24:07.579
So then we tried JavaScript and pared down XML
files, which would hit sort of XML files by section,

00:24:07.579 --> 00:24:12.480
which were sort of pre-sorted in general,
but that was also still terribly slow.

00:24:12.480 --> 00:24:16.809
But we liked, once the files were in XML,
we liked the maintainability of that,

00:24:16.809 --> 00:24:24.710
and the idea of you could have the structure of the,
what your searching against is kind of indicated

00:24:24.710 --> 00:24:27.360
in the file, and that it started to make sense

00:24:27.359 --> 00:24:33.659
We were able to build some business rules into the
formatting of the file, and that seemed like a good deal.

00:24:33.660 --> 00:24:43.580
But slow. So then I started playing around
with a PHP, which we put in front of the XML.

00:24:43.579 --> 00:24:48.299
Essentially the PHP would read and cache
the XML file, which we already liked,

00:24:48.299 --> 00:24:51.339
but it would only have to read it
once, or maybe once per session.

00:24:51.339 --> 00:25:02.629
We got to maintain our sort of cool editing workflow in the
XML, PHP sort of like pre-sorted it based on you type IPH,

00:25:02.630 --> 00:25:06.890
PHP did the quick search through the XML,
sorted it down to a tiny little XML snippet,

00:25:06.890 --> 00:25:12.270
which it threw back at the JavaScript,
which it would parse and show you.

00:25:12.269 --> 00:25:14.960
And that actually, everybody was
pretty encouraged by that, and it was,

00:25:14.960 --> 00:25:19.170
it seemed pretty fast until we started load testing.

00:25:19.170 --> 00:25:26.930
The, it wasn't interestingly the file read or the
memory requirements, it was literally CPU load

00:25:26.930 --> 00:25:32.039
on the processor just under I think
thirty concurrent users or something?

00:25:32.039 --> 00:25:38.529
It brought an XServe to a halt, so not sustainable.

00:25:38.529 --> 00:25:41.549
So we started brainstorming, thinking
of other possible approaches.

00:25:41.549 --> 00:25:48.259
We thought about putting it in a
SQL database, and MY SQL came up.

00:25:48.259 --> 00:25:55.859
And we did a quick test, which we've since refined,
where the core data would be pulled from our XML file,

00:25:55.859 --> 00:26:01.719
which we like, thrown into MY SQL as a
sort of temporary holding place to cache.

00:26:01.720 --> 00:26:07.450
Php would sort of do a normal SQL
query and cache that as well.

00:26:07.450 --> 00:26:10.590
So the more people that used it, the faster it would get.

00:26:10.589 --> 00:26:18.509
So if you search for IPH, the next person doesn't have to
hit the database again, they can go to the cache layer.

00:26:18.509 --> 00:26:26.569
So rather than having thirty concurrent users slow it down,
thirty concurrent users in many cases will speed it up.

00:26:26.569 --> 00:26:28.259
And then we did the same thing.

00:26:28.259 --> 00:26:34.129
PHP formatted it real quick as XML,
and sent it back to JavaScript. Eureka!

00:26:34.130 --> 00:26:35.100
Fast, scalable.

00:26:35.099 --> 00:26:40.449
So what we have now, the current solution
has a farm of PHP machines running

00:26:40.450 --> 00:26:45.970
against a dedicated MY SQL instance, and that seems to work.

00:26:48.509 --> 00:26:58.849
( applause )

00:26:58.849 --> 00:27:02.259
>> Hello. Hi, Mike Czepiel,
I'm a web developer on the Apple dot com team.

00:27:02.259 --> 00:27:07.180
And on a daily basis I get the pleasure of working with
some really amazing designers, bringing their prototypes

00:27:07.180 --> 00:27:10.440
to live using HTML, CSS, and JavaScript, and putting them

00:27:10.440 --> 00:27:15.180
on the web using web standards
technology we've all come to know and love.

00:27:15.180 --> 00:27:19.950
Increasingly they've been trying to integrate video
seamlessly with their work, and today I'd like to share

00:27:19.950 --> 00:27:23.539
with you how we go about doing that on Apple dot com.

00:27:23.539 --> 00:27:28.460
Obviously when you go talk about video on the web,
you have a lot of, you have several solutions,

00:27:28.460 --> 00:27:34.450
but most of them have proprietary closed source, and
they require that you invest in a particular tool set,

00:27:34.450 --> 00:27:41.190
follow certain methodologies, and just basically
you're following a particular vendor's workflow.

00:27:41.190 --> 00:27:45.080
We embrace the open web and try to stick
with the standards that we've been using.

00:27:45.079 --> 00:27:49.210
We were all born and raised on view
source, and we like to embrace that.

00:27:49.210 --> 00:27:52.519
And we use those technologies.

00:27:52.519 --> 00:27:57.720
One of the great things about doing that is that by
using the open web, we're able to plug in our own video,

00:27:57.720 --> 00:28:03.360
we're not chained to any particular implementation,
any particular movie container format.

00:28:03.359 --> 00:28:08.049
So when we go to show our products off in the best light,
we want to use the best, the highest quality video we can,

00:28:08.049 --> 00:28:12.399
and of course being Apple, that means that
we're gonna choose the best QuickTime.

00:28:12.400 --> 00:28:16.440
Unfortunately you don't typically
see QuickTime used in this manner.

00:28:16.440 --> 00:28:20.259
Usually you'll see a page dedicated
to QuickTime, and it's just gonna be,

00:28:20.259 --> 00:28:24.440
the sole purpose of that page is to
have a QuickTime video just in place.

00:28:24.440 --> 00:28:31.340
So you don't usually see much JavaScript interacting
with it, which is how you, we'd want to accomplish this.

00:28:31.339 --> 00:28:36.439
Thankfully, QuickTime since around 2000, around
QuickTime 4.1 actually had JavaScript,

00:28:36.440 --> 00:28:39.180
had a JavaScript API that you could interact with.

00:28:39.180 --> 00:28:43.490
You're not gonna find many references of this
available online, just because when it first came

00:28:43.490 --> 00:28:49.259
out I don't think the situation was you know, too conducive
to actually do anything really amazing with JavaScript.

00:28:49.259 --> 00:28:54.079
There was enough difficulty just getting your JavaScript to
where it crossed browser, crossed platform, that you know,

00:28:54.079 --> 00:28:57.889
controlling QuickTime movies was probably
the furthest thing from your mind.

00:28:57.890 --> 00:29:02.700
Thankfully, the situation's gotten a lot better, and
now you can actually do some really amazing stuff thanks

00:29:02.700 --> 00:29:06.970
to you know, improvements in browsers,
development technology, the tools,

00:29:06.970 --> 00:29:11.089
and tireless efforts of the open source community to make
libraries and really smooth over any of these differences.

00:29:11.089 --> 00:29:15.789
So now that the situation's a lot better, we can
actually start playing with the QuickTime API,

00:29:15.789 --> 00:29:17.899
and do some really awesome stuff with it.

00:29:17.900 --> 00:29:23.200
Unfortunately, the QuickTime API really
hasn't changed since two thousand.

00:29:23.200 --> 00:29:27.610
So right off the bat we want to go and start
making QuickTime fit into our workflow.

00:29:27.609 --> 00:29:32.639
We want to make it feel like it's
a real part of our libraries.

00:29:32.640 --> 00:29:38.240
We use prototype and Scriptaculous (assumed spelling)
for our JavaScript typically on Apple dot com.

00:29:38.240 --> 00:29:41.549
And so we wanted to make QuickTime just
feel like any other part of that library,

00:29:41.549 --> 00:29:44.769
anything else that you know, that we'd be using.

00:29:44.769 --> 00:29:48.599
So we actually made our own script, kind of in parallel

00:29:48.599 --> 00:29:53.539
to the official AC QuickTime dot js that's
available officially from the QuickTime group.

00:29:53.539 --> 00:30:01.700
And just to give a modern invocation to how we actually
will package up QuickTime on the web, and use in our site.

00:30:01.700 --> 00:30:06.230
The official version actually uses you know,
document write, as you can see on the bottom here,

00:30:06.230 --> 00:30:10.410
it's a kind of inline, put your QuickTime into the page.

00:30:10.410 --> 00:30:14.960
Typically we're working with a DOM tree in this day
and age, so we want to be able to use you know, a pen.

00:30:14.960 --> 00:30:20.840
So we made our script actually package up a movie as
an element, a node that we could then append later

00:30:20.839 --> 00:30:22.299
on into the DOM whenever we felt like it.

00:30:22.299 --> 00:30:27.200
And this worked pretty well, and we've
been using it for about the past year.

00:30:27.200 --> 00:30:31.640
Unfortunately you know, we made, we did all this work
up ahead to make it easier to work with QuickTime,

00:30:31.640 --> 00:30:34.250
get into the page, but that really
hasn't made the designers any happier.

00:30:34.250 --> 00:30:38.210
You know, they want a nice interface, but
not the same interface we're talking about.

00:30:38.210 --> 00:30:41.539
They obviously want a nice graphical
user interface integrating QuickTime,

00:30:41.539 --> 00:30:45.399
and we haven't gotten any further along to that goal.

00:30:46.480 --> 00:30:49.670
So while we've got it on the page, we still
need to be able to talk to it really easily.

00:30:49.670 --> 00:30:55.710
It's a lot easier getting on the page, now we want to be
able to talk to the plug in, and we want to be able to do

00:30:55.710 --> 00:30:59.970
that in the same way, have a custom class
that just feels like a part of our library.

00:30:59.970 --> 00:31:05.289
So we've start, we decided to abstract the plug in, use
our own custom class that basically will act as a proxy

00:31:05.289 --> 00:31:08.599
to the plug in, so we never really will talk
directly to the plug in if we don't have to.

00:31:08.599 --> 00:31:14.709
This helps us deal with any sort of cross browser issues,
or the plug in being unresponsive at any point in time,

00:31:14.710 --> 00:31:17.460
or, it really just makes our lives easier.

00:31:17.460 --> 00:31:21.430
Like right off the bat, when you go to actually put
a QuickTime movie on the page, you're gonna actually,

00:31:21.430 --> 00:31:25.410
you're gonna end up with two objects, or an object,
an embed depending upon which script you use,

00:31:25.410 --> 00:31:27.790
just because depending upon the browser you use,

00:31:27.789 --> 00:31:32.869
you're either looking at an active X
control or a Netscape style plug in.

00:31:32.869 --> 00:31:37.049
You need to eventually figure out which one of
those is the one that your browser cares about.

00:31:37.049 --> 00:31:41.750
The easiest way isn't actually browser
sniffing, which you know, you don't want to do.

00:31:41.750 --> 00:31:46.450
It's actually just hit one of these, and
figure out which one responds as the plug in.

00:31:46.450 --> 00:31:51.580
You might need to do this in a loop, you
know, because initially when you load this,

00:31:51.579 --> 00:31:57.359
the actual plug in's probably not gonna
respond correctly off the bat anyways.

00:31:57.359 --> 00:32:01.199
And you don't want to be writing this code
constantly every time you work with QuickTime.

00:32:01.200 --> 00:32:03.470
You really want this to be a part of your library.

00:32:03.470 --> 00:32:06.799
That's the reason we're making libraries,
to make it easier to work with QuickTime.

00:32:06.799 --> 00:32:10.139
So right here our custom control is gonna make it real easy.

00:32:10.140 --> 00:32:15.810
We're gonna create an API like this, where we just kind
of pass it to node, and it will work out all the details

00:32:15.809 --> 00:32:18.980
and become the expert as to what
movie object it's talking to.

00:32:18.980 --> 00:32:23.000
So this makes it real easy to talk to our custom
controller on our page in a really high level

00:32:23.000 --> 00:32:26.529
and not worry about which DOM element
we're actually referencing.

00:32:26.529 --> 00:32:32.089
And as you can see, it looks pretty much like any prototype
Scriptaculous you know, library that you'd be used to.

00:32:32.089 --> 00:32:37.769
This helps us get around other problems, such as the
plug in may take some time to be responsive, so again,

00:32:37.769 --> 00:32:39.990
this is gonna sit there and kind of ping it.

00:32:39.990 --> 00:32:45.509
And additionally lets us tie in
custom events, or register callbacks.

00:32:45.509 --> 00:32:50.160
So with prototype obviously we're usually working
with callbacks similar to like Scriptaculous is

00:32:50.160 --> 00:32:53.019
on you know, after finish before start sort of deal.

00:32:53.019 --> 00:32:57.639
If you're working with the YUI, Dojo, or
anything that supports custom events, you might,

00:32:57.640 --> 00:33:02.160
if you're working with a custom controller on your
own page, is one actually implement your own API

00:33:02.160 --> 00:33:05.519
to fire off custom events that you can then observe.

00:33:05.519 --> 00:33:10.889
We want to be able to talk to the plug in in plain English,
so whenever we're working on higher level components,

00:33:10.890 --> 00:33:14.050
we don't want to be dealing with
getting the rate of something.

00:33:14.049 --> 00:33:19.180
It's just nice to have that, a nice common
vocabulary of common things that we're gonna be doing,

00:33:19.180 --> 00:33:21.090
that really makes sense when you see them in code.

00:33:21.089 --> 00:33:27.490
Obviously being on the web there's gonna be non-technical
people you know, mucking around in your pages,

00:33:27.490 --> 00:33:31.190
and you don't want to scare them off with
any more syntax than you really need.

00:33:31.190 --> 00:33:37.880
And so this is a nice way to make it really easy for
everyone to see what's actually happening in your page.

00:33:37.880 --> 00:33:44.040
And you can create all sorts of convenient methods for
common operations that you might be doing with QuickTime.

00:33:44.039 --> 00:33:47.000
We also might want to have certain side effects.

00:33:47.000 --> 00:33:52.259
So for instance if our controller is keeping track of
whether the movie's playing at any given time or not,

00:33:52.259 --> 00:33:53.529
this would be the place where we do this.

00:33:53.529 --> 00:33:57.259
So when we send a message that we
want passed along to the plug in,

00:33:57.259 --> 00:34:01.569
this would be where we actually perform other operations.

00:34:01.569 --> 00:34:06.750
We also with our custom plug in are able to,
or custom controller attached to the plug in,

00:34:06.750 --> 00:34:12.860
are able to handle exceptions that might
arise, or be thrown by the underlying plug in.

00:34:12.860 --> 00:34:17.880
So we can do certain things like just assume that if
the movie's playing, and, or we ask if it's playing,

00:34:17.880 --> 00:34:20.320
if it throws an error we'll just assume that it's not.

00:34:20.320 --> 00:34:24.440
And what's great is because we've put in this layer, if we
don't want that to be the assumption that we always make,

00:34:24.440 --> 00:34:29.260
we might want to cache whether it's playing and return
that, and assumed that well if it was playing and we ask

00:34:29.260 --> 00:34:30.840
and it fails, maybe it was always playing.

00:34:30.840 --> 00:34:35.180
And this you know, is the place where
you tie in that sort of custom behavior.

00:34:35.179 --> 00:34:40.500
We can also do some really cool things like cache values.

00:34:40.500 --> 00:34:45.750
So for instance, if we're in a loop and
actually polling the movie to find its status,

00:34:45.750 --> 00:34:48.070
we can actually you know, cache the value.

00:34:48.070 --> 00:34:51.150
So if it ever fails when we're trying to find out
what time it is, we're not gonna, for instance,

00:34:51.150 --> 00:34:54.139
we're updating a progress bar, we're
not gonna go and shrink it back

00:34:54.139 --> 00:34:56.190
to the beginning just cause it
failed and we're gonna assume zero.

00:34:56.190 --> 00:35:00.800
We're gonna figure out where we last knew the
movie was, and just append the delay that we have

00:35:00.800 --> 00:35:02.980
as we're polling to figure out where it should be.

00:35:02.980 --> 00:35:08.590
And it's kind of a rough guestimation, but usually it works,
and it helps keep things look really smooth on the page.

00:35:08.590 --> 00:35:18.510
So I'm sure you've all seen Apple dot com, but I'm gonna go
to the demo right now and show you a bit of what we have.

00:35:18.510 --> 00:35:25.560
So here's an example of us using a QuickTime
plug in, and our custom controls on the Mac page.

00:35:25.559 --> 00:35:30.650
This is an example of, this is what we call the front row
component, which basically is a way for us to switch movies.

00:35:30.650 --> 00:35:35.460
And we've integrated a custom controller which is what the
designers are really going for, cause they just want this

00:35:35.460 --> 00:35:37.340
to look like it's a native part of the page.

00:35:37.340 --> 00:35:42.269
They don't want it to cry out that it's QuickTime in any
way, shape, or form, it's just got to be really seamless.

00:35:42.269 --> 00:35:44.590
So we have a placeholder graphic,
which can be clicked to play.

00:35:44.590 --> 00:35:50.590
You click it, and you notice that there's a progress
bar that actually indicates the loading progress

00:35:50.590 --> 00:35:53.650
of the movie, although I thought these were cached.

00:35:53.650 --> 00:35:59.829
And as you can see it's actually monitoring the
movie in a loop, and updating the play head.

00:35:59.829 --> 00:36:05.980
There's a play pause that gets updated, and this is actually
a physical manifestation of the custom controller class,

00:36:05.980 --> 00:36:13.119
where we just gave the custom controller, since
we're doing this quite a bit, a custom render method,

00:36:13.119 --> 00:36:16.339
which basically renders in the DOM
using the Scriptaculous slider.

00:36:16.340 --> 00:36:20.670
And we just attach in certain events
so that we can tell when the movie

00:36:20.670 --> 00:36:23.820
if you know, paused, when we want to play the movie.

00:36:23.820 --> 00:36:26.480
And additionally since it's polling, and
it's not actually tied directly to this,

00:36:26.480 --> 00:36:29.659
we can actually pause the movie
indirectly through QuickTime itself,

00:36:29.659 --> 00:36:33.559
and you'll notice that the play
button still reacts correctly.

00:36:33.559 --> 00:36:38.279
So it's just part of make it really seem
like a seamless native part of the page.

00:36:38.280 --> 00:36:44.160
Additionally, you can obviously drag, and we're just
capturing all the events on the Scriptaculous slider,

00:36:44.159 --> 00:36:48.879
and just passing that along to our plug in to update
the you know, we soft pause this so you can job

00:36:48.880 --> 00:36:52.510
through the movie easily, and this
just picks up where you left off.

00:36:52.510 --> 00:36:53.830
We can also now set URL.

00:36:53.829 --> 00:36:59.639
There's a whole API available to you for changing,
manipulating the movie object in the page once its loaded.

00:36:59.639 --> 00:37:03.909
And so one of the things that we do is we
actually let you, yeah this was cached,

00:37:03.909 --> 00:37:10.190
and now it's just gonna take a while to load.

00:37:10.190 --> 00:37:17.740
Well, should be able to set the movie,
and maybe it will actually start playing.

00:37:20.920 --> 00:37:24.820
Yeah. Are they?

00:37:27.949 --> 00:37:30.629
Looks like same deal here.

00:37:30.630 --> 00:37:35.440
Okay, so here's another example, you're on the
iTunes page with shorter videos that load quicker,

00:37:35.440 --> 00:37:38.159
except for the Ratatouille
one, which is probably long.

00:37:38.159 --> 00:37:41.960
And so you can see that it actually
will swap between the movies

00:37:41.960 --> 00:37:43.789
and play them, and you still get the loading progress.

00:37:43.789 --> 00:37:47.710
And it's actually recalculating, and it's doing
the whole translate to pixels method that's

00:37:47.710 --> 00:37:53.139
in the Scriptaculous slider to ensure that the scaling's
correct between the movies, which may differ in length.

00:37:54.500 --> 00:38:00.380
And additionally one of the nice things is we lost
the ability recently to detect the end of a movie,

00:38:00.380 --> 00:38:03.920
you used to be able to do that QT next
and then point it at JavaScript link,

00:38:03.920 --> 00:38:06.280
and we've actually lost that because of security concerns.

00:38:06.280 --> 00:38:10.600
So one of the only ways that you can really do this
now to have something occur at the end of the movie is

00:38:10.599 --> 00:38:13.349
to just poll the movie, and when
it ends you can fire an event.

00:38:13.349 --> 00:38:18.589
So in a lot of cases we have these nice little end states
that the designers want to flip to, and so we're able to do

00:38:18.590 --> 00:38:24.240
that now, so that when the movie actually ends, there
was a custom trailer we have that was monitoring it,

00:38:24.239 --> 00:38:28.529
realizes that, fires the event, and
we get you know, the custom end state.

00:38:28.530 --> 00:38:34.120
We actually have some really awesome designers, like I
said, and some really hard working people in our group

00:38:34.119 --> 00:38:36.000
that put a lot of work into some of these.

00:38:36.000 --> 00:38:41.800
Some, one of the most impressive ones I realize on the
underlying QuickTime stuff, there's a custom done widget,

00:38:41.800 --> 00:38:47.200
or component, is the Leopard site, which actually
is really neat, because it's you know, got popups,

00:38:47.199 --> 00:38:51.429
and yet it still integrates QuickTime really nicely.

00:38:51.429 --> 00:38:52.069
Probably best to make this wider.

00:38:52.070 --> 00:38:55.470
And still lets you, you know, navigate in place.

00:38:55.469 --> 00:38:58.939
And it's just a really seamless integration of QuickTime.

00:38:58.940 --> 00:39:03.590
And actually it's really interesting is a lot of
the comments that I was reading initially about this

00:39:03.590 --> 00:39:07.680
in various places online after we did the redesign
were people mistaking it for some other technology.

00:39:07.679 --> 00:39:10.509
And so I'll take that as compliment
that we were able to fool people a bit.

00:39:10.510 --> 00:39:16.100
( applause )

00:39:16.099 --> 00:39:21.029
Yeah, so in general QuickTime is definitely
the way to deliver really high quality video.

00:39:21.030 --> 00:39:28.070
And it works really well, the API's there, it's been
there since two thousand, the state of AJAX development,

00:39:28.070 --> 00:39:32.080
JavaScript development, DOM scripting is such that you
can actually start to really leverage these in your pages.

00:39:32.079 --> 00:39:35.159
So I would urge you to do so and take a look at that.

00:39:35.159 --> 00:39:39.549
Additionally I'll plug the session after this,
in the same room, is actually gonna be put

00:39:39.550 --> 00:39:44.300
on by the QuickTime engineers, and they're gonna
be talking about some of the future of the plug in,

00:39:44.300 --> 00:39:48.420
and some of the really cool stuff that they've been
working on, and I'll talk a bit further in depth about some

00:39:48.420 --> 00:39:50.460
of the browser issues that you might run into.

00:39:50.460 --> 00:39:54.010
Other than that, I'd like to bring Aubrey
back on stage I think, back to the slides.

00:39:54.010 --> 00:39:54.110
( applause )

00:39:54.110 --> 00:39:55.730
>> Just oh man, you rocked it.

00:39:58.190 --> 00:40:01.730
>> There you go.

00:40:01.730 --> 00:40:03.710
>> Oh man.

00:40:03.710 --> 00:40:14.559
You know, I think I'm gonna start always wearing
gaffer tape on my shirt, that's kind of hot.

00:40:14.559 --> 00:40:15.239
( laughter )

00:40:15.239 --> 00:40:19.319
So the title was too complicated.

00:40:19.320 --> 00:40:28.360
Essentially we're trying to get down to the core
of what makes a compelling element on the page.

00:40:28.360 --> 00:40:35.599
A compelling element is like an on brand experience,
it's gonna be exciting to use, it's gonna be interesting.

00:40:35.599 --> 00:40:38.079
Mike's QuickTime stuff completely rocks it.

00:40:38.079 --> 00:40:46.460
We want to show with elements, and not tell, so
we're not necessarily gonna list a lot of text

00:40:46.460 --> 00:40:48.960
and have you just kind of like have to deal with it.

00:40:48.960 --> 00:40:58.030
We want to do more with a smaller footprint, and to
create sort of a unique experience with every widget

00:40:58.030 --> 00:41:01.150
that really talks about a brand experience.

00:41:01.150 --> 00:41:07.780
And that's sort of a maybe a bland way to say it, but
Apple dot com really is like the flagship on the web

00:41:07.780 --> 00:41:12.680
for the Apple brand, and it needs to be experiential.

00:41:12.679 --> 00:41:18.649
So that's what Flash if for, right?

00:41:18.650 --> 00:41:24.289
Apple, especially with this revision, Apple dot
com has been really committed to using the DOM

00:41:24.289 --> 00:41:29.509
and using standards based implementations
for everything possible.

00:41:29.510 --> 00:41:33.170
Things like video obviously we're gonna
run to a plug in, but even the way the plug

00:41:33.170 --> 00:41:41.920
in is implemented is leaning very heavily on
trying to play nice in the DOM, use the new deal.

00:41:41.920 --> 00:41:46.820
There's also some serious benefits
to maintaining standards based.

00:41:46.820 --> 00:41:54.690
You don't have to rely on plug ins to make compelling
elements, you, it's indexable, you can search it, you can,

00:41:54.690 --> 00:41:59.630
you know, Google will index it, it's just HTML.

00:41:59.630 --> 00:42:04.880
We also recognized a huge benefit with the way things
are implemented at Apple, where you have designers

00:42:04.880 --> 00:42:08.050
over in one building, and coders over in another building,

00:42:08.050 --> 00:42:14.610
being able to separate the presentation
layer from the code is huge in a big team.

00:42:14.610 --> 00:42:22.090
And to, for like Mike or me to be able to sit there
and buzzing away on JavaScript totally in the abstract,

00:42:22.090 --> 00:42:28.559
and then just send it along and let people style it in CSS
and make it look awesome is really a win for everybody.

00:42:28.559 --> 00:42:36.259
And the other thing that we're still working toward,
but it's, the beginnings of it are already evidence,

00:42:36.260 --> 00:42:42.460
we want to be able to degrade gracefully, so that you
don't end up with the situation like with a Flash widget

00:42:42.460 --> 00:42:47.579
where if you don't have Flash installed, you don't
like it, whatever, you get the broken puzzle piece.

00:42:47.579 --> 00:42:52.309
We want to be able to degrade down to just
plain old HTML, which is what we do now.

00:42:52.309 --> 00:42:57.570
If you turn off JavaScript and look at Apple dot com,
you still have an essentially compelling experience.

00:42:57.570 --> 00:43:05.730
It's lessened in terms of the whiz bang as you would
expect, but it still works, and it doesn't look terrible.

00:43:05.730 --> 00:43:09.519
So how do we accomplish that?

00:43:09.519 --> 00:43:16.969
You've probably seen Flash on the Apple site in the
past, and indeed there's still a team of people who comp,

00:43:16.969 --> 00:43:22.959
design elements up in Flash, and just to sort of
demonstrate how things will work, show them around,

00:43:22.960 --> 00:43:27.880
especially up to the management level, and
get a, just a feel for what we're going for.

00:43:27.880 --> 00:43:35.150
So we had to figure out a way, kind of evolve a
process to take an idea that was comped in Flash,

00:43:35.150 --> 00:43:38.369
and move it into standards based implementation.

00:43:38.369 --> 00:43:45.150
We leaned pretty heavily on prototype for that,
and there's just sort of a general compatibility

00:43:45.150 --> 00:43:48.130
between ActionScript and JavaScript, they're similar.

00:43:55.619 --> 00:44:00.929
So what we're doing is, oh I lost my place, sorry.

00:44:00.929 --> 00:44:06.119
Occasionally with a Flash comp, sometimes we're one
to one on features there, we're looking at something,

00:44:06.119 --> 00:44:09.299
and we can just bring it right
over, because it works the same.

00:44:09.300 --> 00:44:18.019
Other times what we need to do is fairly complicated,
DOM wizardry, like where the layering model is different

00:44:18.019 --> 00:44:28.599
Occasionally we're able to port different math
and using algorithms just one to one, copy paste.

00:44:28.599 --> 00:44:31.829
Toolkits are your friend in making compelling elements.

00:44:31.829 --> 00:44:38.269
We've been using prototype a lot, but we've always
looked at J query, Dojo has a ton of potential, and is,

00:44:38.269 --> 00:44:41.980
I urge you to look into that as
well, especially the 0 nine stuff.

00:44:41.980 --> 00:44:47.969
We're gonna talk about different
toolkit options a little bit later.

00:44:47.969 --> 00:44:49.609
In general we are happy.

00:44:49.610 --> 00:44:57.940
We've noticed some interesting things about performance,
there are in a lot of cases gain in performance

00:44:57.940 --> 00:45:03.309
over a Flash implementation, and something in
standards based with JavaScripting the animation.

00:45:03.309 --> 00:45:11.199
There's some sticking points like opacities is expensive,
you need to kind of manage the way you use opacity

00:45:11.199 --> 00:45:15.359
in leverage, like p and g opacity wherever possible.

00:45:15.360 --> 00:45:19.930
But in a lot of our widgets we've
noticed generally when we ported them

00:45:19.929 --> 00:45:25.889
over to JavaScript based animation it was
faster and cooler, easier to interact with.

00:45:25.889 --> 00:45:33.629
The other cool side effect is that as computers get faster,
the performance of a standards based element gets better all

00:45:33.630 --> 00:45:37.349
by itself without you having to do anything.

00:45:37.349 --> 00:45:45.460
It, as your laptops get faster, the interpretation of
JavaScript on the page is better, and things just speed up.

00:45:45.460 --> 00:45:51.280
So I want to show you a quick thing here.

00:45:55.030 --> 00:46:03.260
As just an example, I'm gonna begin with a page load,
because we're looking at this element right here.

00:46:03.260 --> 00:46:05.040
Oh, these alone.

00:46:05.039 --> 00:46:08.250
What am I?

00:46:08.250 --> 00:46:09.690
A? We got it.

00:46:09.690 --> 00:46:10.559
Hey, cool.

00:46:10.559 --> 00:46:20.670
The first thing to notice, this component here is moveable.

00:46:20.670 --> 00:46:26.220
The first thing to notice is on page load.

00:46:28.170 --> 00:46:38.210
We wanted to kind of indicate quickly
unobtrusively that it does something.

00:46:38.210 --> 00:46:43.309
So what we did is the little slide in, which gives you an
immediate sense that there's more to the story on the left

00:46:43.309 --> 00:46:49.730
and the right, which is always a challenge
with the horizontal scrolling situation.

00:46:49.730 --> 00:46:55.230
This component acts like any sort of mature widget.

00:46:55.230 --> 00:47:01.809
There's multiple functionality,
different ways to interact with it,

00:47:01.809 --> 00:47:06.159
and even little Easter eggs you
can kind of throw the scroller.

00:47:12.030 --> 00:47:17.930
Other things to notice are these kind of
little drawer widgets doing more with less,

00:47:19.800 --> 00:47:23.340
packing more content, creating something more experiential.

00:47:26.510 --> 00:47:30.690
And then of course these are all
links, they're just real HTML.

00:47:38.219 --> 00:47:43.799
Or not. Okay, that's it for me.

00:47:45.510 --> 00:47:53.040
( applause )

00:47:53.039 --> 00:47:53.820
>> Yeah we're back up there now.

00:47:53.820 --> 00:47:56.519
>> Oh, are we still going?

00:47:56.519 --> 00:47:56.820
( laughter )

00:47:56.820 --> 00:47:58.030
>> Nice try.

00:47:58.030 --> 00:48:00.650
>> Oh, but you said I could go home.

00:48:00.650 --> 00:48:03.160
>> You got this, where did you go to the slides?

00:48:03.159 --> 00:48:04.750
Are we on slides?

00:48:04.750 --> 00:48:07.230
Cool. Going on.

00:48:07.230 --> 00:48:10.090
Okay, so I think we're gonna talk about
the building blocks of Apple dot com,

00:48:10.090 --> 00:48:12.970
some of the tool sets we chose,
some of the decisions we made.

00:48:12.969 --> 00:48:15.459
So here's what we've been using.

00:48:15.460 --> 00:48:17.250
I didn't really script this or anything.

00:48:17.250 --> 00:48:22.190
Pretty much we've been using Apache obviously
for searching, or for serving up content,

00:48:22.190 --> 00:48:26.480
content is really hard to beat in our situation.

00:48:26.480 --> 00:48:29.170
I can talk about tracking subversion.

00:48:29.170 --> 00:48:32.809
We recently switched over in the past year
to basically any of our new developments ends

00:48:32.809 --> 00:48:37.710
up in subversion makes it really easy across our
entire team to be working concurrently on the projects.

00:48:37.710 --> 00:48:43.730
Prior to this it was a bit messier, a bit more difficult
to actually work with I think, cause people you know,

00:48:43.730 --> 00:48:45.530
swapping files back and forth, and Apple shares, whatnot.

00:48:45.530 --> 00:48:50.610
And thankfully Subversion I think really
makes it a bit easier to coordinate.

00:48:50.610 --> 00:48:51.970
>> That's for sure.

00:48:51.969 --> 00:48:57.469
>> And track definitely helps us keep tabs on what's
going on, and makes it real easy to watch the activity.

00:48:57.469 --> 00:49:00.219
And so it's actually really kind of fun to
watch some of the stuff as it's flying by.

00:49:00.219 --> 00:49:04.259
The past couple days prior to launch,
well it was really chaotic actually.

00:49:04.260 --> 00:49:07.000
I mean the timeline was just huge.

00:49:07.000 --> 00:49:11.230
I actually had to just, I could only watch like
the first day, the past zero day basically.

00:49:11.230 --> 00:49:15.699
And it was really exciting watching some of
the other people working, like all the writers

00:49:15.699 --> 00:49:18.750
and the designers that we have committing stuff.

00:49:18.750 --> 00:49:23.650
>> You know, and seeing non-techie
people begin to interact with -

00:49:23.650 --> 00:49:23.869
>> Yeah.

00:49:23.869 --> 00:49:24.529
>> - version control system.

00:49:24.530 --> 00:49:25.030
>> It's been a little -

00:49:25.030 --> 00:49:25.350
>> Fascinating.

00:49:25.349 --> 00:49:30.480
>> It's been difficult, because we definitely have a lot
of non-techie people, and for them to get into it, it's -

00:49:30.480 --> 00:49:31.519
>> But overall they like it.

00:49:31.519 --> 00:49:32.559
I mean they're, when you -

00:49:32.559 --> 00:49:32.769
>> Yeah.

00:49:32.769 --> 00:49:35.559
>> - mess up, you can revert, which is thrilling.

00:49:35.559 --> 00:49:38.929
>> Definitely some big wins there, definitely.
I mean if you're not on version control by now,

00:49:38.929 --> 00:49:41.639
I don't know what's stopping you, it's great.

00:49:41.639 --> 00:49:45.509
Especially for web development, even
across a gigantic site like Apple dot com.

00:49:45.510 --> 00:49:48.790
But I don't think we'd be able to do any
work without Firebug at this point.

00:49:48.789 --> 00:49:49.380
>> Definitely.

00:49:49.380 --> 00:49:54.840
>> It's a Godsend, if you're not
using Firebug, please start using it.

00:49:54.840 --> 00:49:59.559
Things like just the DOM inspector, the
debugger, the console, the profiler.

00:49:59.559 --> 00:50:05.940
These all make it really easy to work with
anything that you're doing, JavaScript wise.

00:50:05.940 --> 00:50:11.869
If you want to talk about some of the server side stuff.

00:50:11.869 --> 00:50:18.659
>> On the server side, as I mentioned, for search
we're leaning pretty heavily on PHP and MY SQL.

00:50:18.659 --> 00:50:27.299
The, we had to sort of make a dedicated farm for
those just to get infrastructure happy with their use.

00:50:27.300 --> 00:50:31.410
But we've been really, really happy
with that implementation,

00:50:31.409 --> 00:50:34.519
and the speed and scalability is really terrific.

00:50:34.519 --> 00:50:35.009
It's just -

00:50:35.010 --> 00:50:36.510
>> It's been holding up really well I think.

00:50:36.510 --> 00:50:40.750
>> Yeah. Really, really well, and
I mean under unbelievable load,

00:50:40.750 --> 00:50:43.269
and especially this week it hasn't hiccupped even at all.

00:50:43.269 --> 00:50:47.340
I mean it's just one of those great
rewards to using open source software.

00:50:47.340 --> 00:50:54.720
And we've also, as I mentioned, standardized in
general for Apple dot com on Scriptaculous and,

00:50:54.719 --> 00:51:00.000
for doing the core of the eye candy,
and prototype to kind of back it all up,

00:51:00.000 --> 00:51:03.659
and make objects, and extend other people's objects.

00:51:03.659 --> 00:51:09.469
And that's helped a lot too, because people aren't just sort
of rewriting and rewriting and rewriting per implementation.

00:51:09.469 --> 00:51:14.929
We have just a common core of things that you can implement
or extend, almost like a real programming language.

00:51:14.929 --> 00:51:17.179
>> Yeah. I'm not gonna lie, that wasn't an easy decision.

00:51:17.179 --> 00:51:19.000
We evaluated a lot of different -

00:51:19.000 --> 00:51:19.360
>> Yeah.

00:51:19.360 --> 00:51:20.500
>> - tool sets out there.

00:51:20.500 --> 00:51:22.949
They're all great choices, I mean you really can't go wrong.

00:51:22.949 --> 00:51:27.230
It's just some of them might be a better fit
for your particular site, your particular group.

00:51:27.230 --> 00:51:31.440
Everyone that I think we were working with pretty much knew
prototype and Scriptaculous, they were familiar with it,

00:51:31.440 --> 00:51:34.820
so it was real easy for us to just get the ball
rolling, and start rolling this out across the site.

00:51:34.820 --> 00:51:38.430
>> And I think at the time, this time last year or so -

00:51:38.429 --> 00:51:38.519
>> Yeah.

00:51:38.519 --> 00:51:43.059
>> - it was sort of the most mature
toolkit, and we just had to make a call.

00:51:43.059 --> 00:51:43.570
>> Yeah.

00:51:43.570 --> 00:51:44.870
>> And it's been good.

00:51:44.869 --> 00:51:46.170
>> And even today they've got the numbers.

00:51:46.170 --> 00:51:49.500
I mean prototype is probably one
of the more popular ones I'd argue.

00:51:49.500 --> 00:51:49.909
>> Yeah.

00:51:49.909 --> 00:51:51.789
>> And you really do gain from that.

00:51:51.789 --> 00:51:57.679
I mean all of these libraries, whichever one you pick,
you're going to be gaining just the sheer volume of people

00:51:57.679 --> 00:52:00.199
that are hitting that library and
testing it for you in a sense.

00:52:00.199 --> 00:52:03.739
So, and it really makes sense to start using that.

00:52:03.739 --> 00:52:07.919
I think that's about it as far as technology wise goes.

00:52:07.920 --> 00:52:08.990
>> Um hm.

00:52:08.989 --> 00:52:12.159
>> So I think that's, it's up for Dan.

00:52:12.159 --> 00:52:13.899
>> Over to Dan.

00:52:15.460 --> 00:52:19.409
Here you go.

00:52:19.409 --> 00:52:23.219
( applause )

00:52:23.219 --> 00:52:24.239
>> Thanks guys.

00:52:24.239 --> 00:52:29.349
So in summary, you know, evolution's a good thing.

00:52:29.349 --> 00:52:32.049
You can evolve stuff even if it's not a visible change.

00:52:32.050 --> 00:52:36.330
You know, work on improving the
underpinnings of everything you're doing.

00:52:36.329 --> 00:52:40.699
We're trying to you know, come up with ways of
making sure that the content can drive navigation,

00:52:40.699 --> 00:52:42.710
you know, search is a good example of that.

00:52:42.710 --> 00:52:49.960
You know, the up time is a really important thing
to us, you know, them talking about the tools,

00:52:49.960 --> 00:52:54.559
you know we really looked at MY SQL hard, and looked
at the libraries, and are these things gonna be things

00:52:54.559 --> 00:52:57.230
that are gonna you know, be a drag
on our pages or be a boost.

00:52:57.230 --> 00:53:02.030
And you know, we want to pick things that are gonna
be really good and smart, and keep the site running.

00:53:02.030 --> 00:53:06.730
We want media experiences to be seamless, so
we need that seamless degradation of stuff.

00:53:06.730 --> 00:53:11.079
We want you know, the UIs that we put on these pages
to be really compelling and open center spaced.

00:53:11.079 --> 00:53:15.309
And you know, there's a really you know, a great
selection of open source projects out there to help you.

00:53:15.309 --> 00:53:18.369
And you know, there's stuff we're
always constantly looking at.

00:53:18.369 --> 00:53:21.960
And we didn't mentioned Moo (assumed spelling),
we've been looking at Moo a little bit too.

00:53:21.960 --> 00:53:25.429
You know, the Moo effects guys have been
doing some really interesting examples too.

00:53:25.429 --> 00:53:29.710
So you know, there's definitely a
lot of stuff out there to explore.

00:53:29.710 --> 00:53:31.970
Couple of things real quick to wrap up.

00:53:31.969 --> 00:53:34.959
We're kind of doing this one more thing
at the end of the sessions to sort

00:53:34.960 --> 00:53:37.980
of remind people about some things to consider.

00:53:37.980 --> 00:53:41.480
Since iPhone's coming so soon, there aren't
very many things you have to consider

00:53:41.480 --> 00:53:43.659
to make you know, your site work great on the iPhone.

00:53:43.659 --> 00:53:48.219
But here's a few things that we want people to
sort of start thinking about, and understand.

00:53:48.219 --> 00:53:53.129
You know, column layout's great because you know, you can
double tap and zoom right into something, so you know,

00:53:53.130 --> 00:53:59.090
having elements that are boxed nicely is gonna
make it easier for people to navigate around.

00:53:59.090 --> 00:54:03.400
Size of the page matters, you know, we're looking at, we
have a lot of rich graphics here, we're looking at some ways

00:54:03.400 --> 00:54:07.269
of even trying to be smart and
leaner about some of that stuff.

00:54:07.269 --> 00:54:13.250
Because if somebody's on edge of network, you want
to you know, try to make it not a painful experience

00:54:13.250 --> 00:54:15.199
to get to the content they're looking for.

00:54:15.199 --> 00:54:18.419
CSS media queries are gonna be a way to help
people with some of that, because you're gonna be able

00:54:18.420 --> 00:54:23.019
to selectively maybe swap between elements.

00:54:23.019 --> 00:54:26.179
Couple of specific things that are
about optimizing for the iPhone.

00:54:26.179 --> 00:54:29.839
There's a thing called the view port which basically lets
you define the width of the content you're looking at.

00:54:29.840 --> 00:54:36.220
And what that does is on page load helps you zoom you
know, to the right proportion so you see a nice full page.

00:54:36.219 --> 00:54:40.799
Understanding how double tap's gonna
work, there'll be some more documentation

00:54:40.800 --> 00:54:42.830
about this stuff on developer's site later.

00:54:42.829 --> 00:54:46.759
Text size adjustment, they're doing some automatic
boosts, but there'll be some ways of controlling text.

00:54:46.760 --> 00:54:56.090
And then just understanding how events, and
how QuickTime content needs to be encoded

00:54:56.090 --> 00:54:59.430
and embedded in your pages to work on the phone, so.

00:54:59.429 --> 00:55:07.669
And you guys you know, will be able to look at Apple dot
com for some good examples of the stuff in a month or so.

00:55:07.670 --> 00:55:14.980
So gonna bring George back up here to do
the wrap up, and lead us into Q and A.

00:55:14.980 --> 00:55:18.929
>> All right, thanks a lot everyone.

00:55:18.929 --> 00:55:26.359
So as Dan mentioned, optimizing your content and your
AJAX applications for designing specifically for iPhone.

00:55:26.360 --> 00:55:31.269
For information regarding that as Dan mentioned, there'll be
documentation on ADC, as well as Mark Malone who's sitting

00:55:31.269 --> 00:55:37.360
down here in the front row is going to be your
WWDR internet technologies evangelist contact.

00:55:37.360 --> 00:55:43.230
There's some useful URLs here for information about
getting down into browser user agent detection,

00:55:43.230 --> 00:55:49.300
some useful hints on what's going on in the
W three C working group regarding HTML five,

00:55:49.300 --> 00:55:53.990
and some of the stuff that we're involved in here
at Apple, as well as the CSS three media queries.

00:55:53.989 --> 00:56:00.309
On the media side, essentially your contact is gonna be
Allen Shafer, his contact information is listed above.

00:56:00.309 --> 00:56:02.539
And there's going to be additional information regarding how

00:56:02.539 --> 00:56:07.670
to optimize your QuickTiming coding
using H264 baseline,

00:56:07.670 --> 00:56:13.050
and helpful ref movie maker application
tools available as well.