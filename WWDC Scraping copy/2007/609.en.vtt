WEBVTT

00:00:09.990 --> 00:00:13.359
>> Welcome to session 609, Widget Design Techniques.

00:00:13.359 --> 00:00:18.210
And today's session will be led by three
gentlemen from Monkey Business Labs,

00:00:18.210 --> 00:00:22.339
and those gentlemen are Josh Keay,
David Keay, and Chris Masto.

00:00:22.339 --> 00:00:31.829
And with that I will hand it over to Josh.

00:00:31.829 --> 00:00:32.600
( Applause )

00:00:32.600 --> 00:00:34.240
>> Good morning.

00:00:34.240 --> 00:00:40.780
Like I said, Stephen said, my name is Joshua Keay,
and I'm from Monkey Business Labs in New York City.

00:00:40.780 --> 00:00:45.609
And Apple invited us here today to give a
presentation about widget design techniques.

00:00:45.609 --> 00:00:50.200
We've been doing widget development for about two years,
and we learned a couple tricks during that period of time,

00:00:50.200 --> 00:00:54.140
and they said it would be good
to share them, so here we are.

00:00:54.140 --> 00:00:56.950
Let's go to the starting slide.

00:00:56.950 --> 00:01:01.090
Like I said, my name is Joshua Keay, I work
with my brother, Dave Keay, and Chris Masto.

00:01:01.090 --> 00:01:05.980
And we are going to be covering
the following things here today.

00:01:05.980 --> 00:01:09.420
We're going to start by this idea of what makes a good widget.

00:01:09.420 --> 00:01:14.329
You have to ask yourself when you're going to be doing these
development things, is this a widget or an application?

00:01:14.329 --> 00:01:15.469
And it's a tough question.

00:01:15.469 --> 00:01:20.250
A lot of our stuff actually kind of like bridges
that gap between the application and widget.

00:01:20.250 --> 00:01:25.959
And we you know, have to make a lot of decisions about what
features to include and what not to, so that's a big issue.

00:01:25.959 --> 00:01:29.589
We're going to give a intro into widget interface design.

00:01:29.590 --> 00:01:34.640
My background is as a designer, so I'm going to be
able to share a little bit of insight into that.

00:01:34.640 --> 00:01:39.569
And then we're going to take it over to Dave, who's going to
talk about doing widget development outside of Dashcode.

00:01:39.569 --> 00:01:44.009
Been a lot of sessions here today talking about how you
can use this new tool to your advantage, but you know,

00:01:44.010 --> 00:01:51.100
as we've learned, widgets are made using some basic coding
techniques, so you can use the skills from web development

00:01:51.099 --> 00:01:54.280
to build these things by hand, and
there's a lot you can learn from that.

00:01:54.280 --> 00:01:57.420
We're going to get into this idea of
where to get data for your widget.

00:01:57.420 --> 00:02:00.650
Cause if you're going to build something, you
actually need to have a really good data source.

00:02:00.650 --> 00:02:02.219
There are a lot of different places you can get that data.

00:02:02.219 --> 00:02:05.689
You can get it off the web, and we're
going to have Chris talk about that.

00:02:05.689 --> 00:02:07.329
You can also have a Cocoa plug-in.

00:02:07.329 --> 00:02:11.009
If you've got an existing application
you can talk to it using a plug-in.

00:02:11.009 --> 00:02:13.409
Questionable technique, but we'll talk about that too.

00:02:13.409 --> 00:02:18.210
And lastly, you can have a self contained widget
like stickies, and store the data locally.

00:02:18.210 --> 00:02:23.800
After that we're going to get into some advanced widget
interface design techniques, and talk about you know,

00:02:23.800 --> 00:02:30.719
different ways of using resizing if you want really good
animated effects, along with some good CSS practices

00:02:30.719 --> 00:02:33.819
to make your coding process a little bit easier.

00:02:33.819 --> 00:02:35.120
And lastly, a question and answer.

00:02:35.120 --> 00:02:37.250
So let's get started.

00:02:37.250 --> 00:02:38.430
Brief history of the company.

00:02:38.430 --> 00:02:42.290
I'm the president of the company, and
there's a pretty inauspicious beginning.

00:02:42.289 --> 00:02:47.120
I was you know, working as a designer in New
York, I was working on this book project.

00:02:47.120 --> 00:02:49.009
It was like two o'clock in the afternoon on a Tuesday.

00:02:49.009 --> 00:02:53.799
And you know that feeling where you just look
around and you think like oh my God, I need a nap.

00:02:53.800 --> 00:02:57.570
And I sat down, I was going to take that
nap, and I realized I wasn't even tired.

00:02:57.569 --> 00:03:00.439
I was just sick of this stupid book project.

00:03:00.439 --> 00:03:01.389
So I started sketching.

00:03:01.389 --> 00:03:04.879
I think I'd been you know, reading on the web
something about Dashboard widget development.

00:03:04.879 --> 00:03:08.870
I was thinking this is a pretty new technology, but
nobody's doing really exciting stuff with it yet,

00:03:08.870 --> 00:03:11.210
cause this was back before Tiger even shipped.

00:03:11.210 --> 00:03:13.490
And I said okay, let's see what we can do with that.

00:03:13.490 --> 00:03:16.950
So this here is the first shot of that sketchbook.

00:03:16.949 --> 00:03:20.810
On the left side you see all this
weird you know, like book layout stuff,

00:03:20.810 --> 00:03:24.420
and the right side there's this long list different ideas.

00:03:24.419 --> 00:03:28.599
And you get a lot of bad concepts in
there, but a couple good ones as well.

00:03:28.599 --> 00:03:32.000
TV Tracker was in there, like to
do Tracker, all this other stuff.

00:03:32.000 --> 00:03:39.689
You can see little tiny like an alarm clock, and TV Tracker,
actually tiny little thing right underneath the guy's leg.

00:03:39.689 --> 00:03:40.919
So that was pretty good.

00:03:40.919 --> 00:03:44.369
Now since this sketch we've shipped a number of widgets.

00:03:44.370 --> 00:03:49.610
On the upper left we've got TV Tracker, which is
pretty high profile, you may have played with it.

00:03:49.610 --> 00:03:52.750
It's a really simple way of finding
out what's on television right now.

00:03:52.750 --> 00:03:55.830
To the right of that, Checkmarker,
which is basically a to do list,

00:03:55.830 --> 00:03:58.920
you can just have a million different
things that you're keeping track of.

00:03:58.919 --> 00:04:01.780
So it's a easy way of you know, keeping your mind on that.

00:04:01.780 --> 00:04:07.629
Lower left we've got Picture Framer, which is a
pretty simple way of experiencing your photographs.

00:04:07.629 --> 00:04:09.500
It's a little different from iPhoto.

00:04:09.500 --> 00:04:13.960
You can think of iPhoto as being like the photo album
that you keep on your shelf, and Picture Framer is more

00:04:13.960 --> 00:04:16.009
like the shelf, the little photo that you put on your desk.

00:04:16.009 --> 00:04:19.709
You could put a picture of your dog, you
could you know, plug-in a Flickr photo screen

00:04:19.709 --> 00:04:21.969
with like your favorite photos coming in.

00:04:21.970 --> 00:04:26.790
Lower right you also may have seen Package Tracker,
this is the latest version, Package Tracker 3.

00:04:26.790 --> 00:04:29.990
It integrates the tracking multiple
packages within one widget.

00:04:29.990 --> 00:04:34.110
You just enter in the package number and it
shows you where your package is right now.

00:04:34.110 --> 00:04:35.949
So it's a pretty interesting story.

00:04:35.949 --> 00:04:39.689
I mean we started you know, from almost
nothing, just like a couple ideas.

00:04:39.689 --> 00:04:46.069
And we started building things, and as they say, if
you build it they will come, and indeed they did.

00:04:46.069 --> 00:04:47.620
This was a pretty big day for us.

00:04:47.620 --> 00:04:51.990
Apple put us on the front page of Apple.com, number one downloaded widget

00:04:51.990 --> 00:04:54.030
that day, and for a couple days thereafter.

00:04:54.029 --> 00:04:58.079
It's amazing the amount of publicity
you can from something like that.

00:04:58.079 --> 00:04:59.870
So needless to say, our traffic went a little crazy.

00:04:59.870 --> 00:05:03.720
But it was a good day, kind of nice
little photo for the scrapbook.

00:05:03.720 --> 00:05:06.820
So now without further ado, we're
going to talk about making great widgets.

00:05:06.819 --> 00:05:09.430
Now a couple questions for you guys.

00:05:09.430 --> 00:05:13.610
How many people here have made a widget
before? If you'd just raise your hand.

00:05:13.610 --> 00:05:14.879
Okay, good.

00:05:14.879 --> 00:05:18.579
Now how many of you have gone to those sessions
that we've had in the last couple days talking

00:05:18.579 --> 00:05:21.859
about Dashcode and other widget development techniques?

00:05:21.860 --> 00:05:23.230
Okay, cool.

00:05:23.230 --> 00:05:25.220
So a decent mix.

00:05:25.220 --> 00:05:28.840
We're going to be getting into some
slightly different techniques

00:05:28.839 --> 00:05:31.269
than the Dashcode stuff that they were talking about.

00:05:31.269 --> 00:05:35.219
We're more traditional developers, we
started before Dashcode even shipped.

00:05:35.220 --> 00:05:37.450
So we do most of our stuff you know, by hand.

00:05:37.449 --> 00:05:41.289
We build the graphics in PhotoShop,
we wire it together with code.

00:05:41.290 --> 00:05:45.569
But you know, they're definitely good
complementary skill sets to have.

00:05:45.569 --> 00:05:49.889
So we're going to talk about it just starting from scratch,
you know, starting with an idea, and how to build it,

00:05:49.889 --> 00:05:52.129
and then if you've built widgets before, we're going to get

00:05:52.129 --> 00:05:55.370
into some more advanced techniques
of resizing and animation.

00:05:55.370 --> 00:05:58.340
So the question, what is a widget?

00:05:58.339 --> 00:06:00.000
Seems like a pretty simple question, right?

00:06:00.000 --> 00:06:03.759
But if you think about it, you know, applications
are getting bigger and bigger, and more complicated.

00:06:03.759 --> 00:06:08.420
You know, GarageBand is a great app, but
it's got a trillion little controls to it.

00:06:08.420 --> 00:06:11.580
You have to think that there are you know,
applications that are well suited to this.

00:06:11.579 --> 00:06:15.449
You want to make a DVD, you want to you know,
capture photos of your wedding, that's great.

00:06:15.449 --> 00:06:20.829
But sometimes there are simple little goals that you
have, and widgets hopefully will take care of those goals.

00:06:20.829 --> 00:06:23.180
So first and foremost, widgets should be simple.

00:06:23.180 --> 00:06:26.090
I like to think of them as physical objects.

00:06:26.089 --> 00:06:30.009
You know, basic functionality, you can
almost mix and match your appliances.

00:06:30.009 --> 00:06:32.740
If one doesn't work you throw it out, you
know, there's going to be some competitor

00:06:32.740 --> 00:06:36.189
who makes something that will track TV a little differently.

00:06:36.189 --> 00:06:38.719
You know, basic, basic levels of modulation.

00:06:38.720 --> 00:06:41.430
You know, you should be able to
adjust things, but not too much.

00:06:41.430 --> 00:06:44.949
If it's going to start taking over your life,
if it's going to start taking over your screen,

00:06:44.949 --> 00:06:46.949
maybe you're not talking about a widget any more.

00:06:46.949 --> 00:06:51.860
But in the event that you are, you're going to need
to figure out how to design a good widget interface.

00:06:51.860 --> 00:06:54.980
And there are some interesting considerations for that.

00:06:54.980 --> 00:06:58.580
A lot of people think of widgets, and
they think of the way that they look.

00:06:58.579 --> 00:07:03.139
And you know, I don't blame them. They're, that's definitely
one of the most standing out qualities that they have.

00:07:03.139 --> 00:07:04.969
But there's a lot more to it than just that.

00:07:04.970 --> 00:07:09.020
You know, if you're going to make something
really great, you have to think about it

00:07:09.019 --> 00:07:11.719
on all different levels, and beyond just the graphics.

00:07:11.720 --> 00:07:14.990
So we'd start you know, on paper like we saw before.

00:07:14.990 --> 00:07:19.500
But I really think the key to making good
design decisions, like the iPod, you know,

00:07:19.500 --> 00:07:23.279
figuring out how to make something
simple, is knowing what to leave out.

00:07:23.279 --> 00:07:25.409
There are lots and lots of different choices.

00:07:25.410 --> 00:07:29.460
You know, feature requests come in every day, people
want you to turn your application into something

00:07:29.459 --> 00:07:31.609
that you didn't originally conceive it as.

00:07:31.610 --> 00:07:35.750
Sometimes that's a good thing, more often
than not you say hmm, maybe, you know.

00:07:35.750 --> 00:07:40.889
You put it on your list of things to do, but it's about
staying focused, staying true to that original vision.

00:07:40.889 --> 00:07:46.419
So I think you know, having those real confident design
decisions, and saying you know, that's not what we're about.

00:07:46.420 --> 00:07:48.350
You know, we're about giving people something simple.

00:07:48.350 --> 00:07:50.320
We're a toaster, we're going to toast things.

00:07:50.319 --> 00:07:54.159
You know, there are appliances that people
make that you know, toast and make coffee?

00:07:54.160 --> 00:07:57.530
That's okay, but that's more of an application, so.

00:07:57.529 --> 00:07:59.369
We ask ourselves what is the customer's goal?

00:07:59.370 --> 00:08:01.740
And it's an interesting, tricky question to ask.

00:08:01.740 --> 00:08:05.730
Because you can say you know, on a really
basic level the customer has a goal

00:08:05.730 --> 00:08:07.390
of like the weather widget, what is the weather?

00:08:07.389 --> 00:08:10.699
So you have to kind of like burrow
down a little deeper than that.

00:08:10.699 --> 00:08:14.449
Like it's, you know, I look at a lot of
different dashboards, and people use the dashboard

00:08:14.449 --> 00:08:17.000
for different things, but it seems
like everybody has this weather widget.

00:08:17.000 --> 00:08:21.079
And what's weird is there are people who use
the weather widget in two different ways.

00:08:21.079 --> 00:08:25.219
Like the first level is like the basic one,
you know, I have one weather widget open.

00:08:25.220 --> 00:08:30.130
And it shows me you know, what the weather is right now in
New York, the next five days of it, which is pretty cool.

00:08:30.129 --> 00:08:32.840
But there's a second level of things
that people are curious about.

00:08:32.840 --> 00:08:36.670
They want to know what the weather is like in
Florida right now, you know, or San Francisco.

00:08:36.669 --> 00:08:38.990
So they open up multiple weather
widgets, which is pretty neat.

00:08:38.990 --> 00:08:43.100
But you don't need to know what the weather's going to
be like in Florida in five days, it's irrelevant.

00:08:43.100 --> 00:08:46.550
You know, you just are kind of curious right
now so you can do side by side comparisons.

00:08:46.549 --> 00:08:48.459
So they created this really simple interface.

00:08:48.460 --> 00:08:50.490
You know, it actually doesn't have any buttons or anything.

00:08:50.490 --> 00:08:55.419
It does expand and collapse, and it will show you the
next five days, or it will just show you the simple,

00:08:55.419 --> 00:08:58.349
straight forward, this is what the
weather is right now in Florida.

00:08:58.350 --> 00:08:59.909
So it's a pretty neat question.

00:08:59.909 --> 00:09:04.569
Our process for that, we start on paper, as you
saw, then we wireframe, and then we render.

00:09:04.570 --> 00:09:08.280
So for a case in point I've got
TV Tracker on screen right now.

00:09:08.279 --> 00:09:10.620
Kind of an interesting example.

00:09:10.620 --> 00:09:15.179
TV Tracker started, we were working with a developer
who had actually built his own front end and the engine,

00:09:15.179 --> 00:09:20.049
and we said you know, this is a great engine,
but we could probably upgrade it a little bit.

00:09:20.049 --> 00:09:23.579
So this was TV Tracker you know, .01

00:09:23.580 --> 00:09:28.190
All the functionality's there, you get the channels
over here, you can see the different things on screen,

00:09:28.190 --> 00:09:32.730
it's got a nice little icon in the background
to kind of remind you that it's the TV.

00:09:32.730 --> 00:09:35.680
But at the end of the day you look
at it and you say good functionality,

00:09:35.679 --> 00:09:38.000
but you don't want to decorate your dashboard with it.

00:09:38.000 --> 00:09:40.610
So we started sketching, and there's a TV.

00:09:40.610 --> 00:09:46.490
It's a really obvious idea, but you know, widgets,
you can kind of get away with stuff like that,

00:09:46.490 --> 00:09:51.379
whereas normal application, unless
Apple's making you, you know,

00:09:51.379 --> 00:09:54.769
and it's QuickTime, you can't so much go crazy like that.

00:09:54.769 --> 00:09:58.460
So we segued, and you get this wire frame.

00:09:58.460 --> 00:10:02.090
You know, once we started working out the
details, you want to actually map out the pixels,

00:10:02.090 --> 00:10:05.930
and figure out like how much space do you need for that
scroll bar, how much space do you need for everything else.

00:10:05.929 --> 00:10:08.439
So you kind of get a feel for that.

00:10:08.440 --> 00:10:10.350
Really, really basic interface

00:10:10.350 --> 00:10:15.610
What's interesting about this is, you look at the
next slide, this is TV Tracker 1, 2, and 3.

00:10:15.610 --> 00:10:20.800
And you know, the skins have changed, it's shinier
now than it used to be, a little less chrome,

00:10:20.799 --> 00:10:24.659
but at the end of the day the interface
is still exactly the same thing.

00:10:24.659 --> 00:10:28.219
If you start with something really basic, really
functional, you don't need to change all that much,

00:10:28.220 --> 00:10:30.259
you don't need to add a trillion features.

00:10:30.259 --> 00:10:35.189
So if you look at this, you know, the one on the
upper left, you get this little diamond button,

00:10:35.190 --> 00:10:37.310
which was a convention that we borrowed from iCal.

00:10:37.309 --> 00:10:39.789
You know, we'd, you'd click that and
it would center it on the current time

00:10:39.789 --> 00:10:42.049
and place you at like, click forward till tomorrow.

00:10:42.049 --> 00:10:44.500
You could just press that and suddenly you'd jump back.

00:10:44.500 --> 00:10:48.649
The second version we said okay, let's
play with that functionality a little bit.

00:10:48.649 --> 00:10:52.970
The little nudge arrows are right there next to
the time, and there's a little gear menu there

00:10:52.970 --> 00:10:54.779
that you can use to change some settings.

00:10:54.779 --> 00:10:57.549
We added one little piece of functionality there.

00:10:57.549 --> 00:11:00.199
We realized that there was another
way that people are using this.

00:11:00.200 --> 00:11:03.650
You know, aside from just showing people what
was on TV right now, which is very useful.

00:11:03.649 --> 00:11:06.470
If you're at work, it's three o'clock in
the afternoon, you know, what's on TV?

00:11:06.470 --> 00:11:10.149
Oprah. You know, it's just like you
don't really need to know what's on TV,

00:11:10.149 --> 00:11:12.149
but you might want to find out what's on TV tonight.

00:11:12.149 --> 00:11:15.699
You might want to know what you can do, whether you
should go to dinner or whether you should stay in.

00:11:15.700 --> 00:11:20.580
So we added this functionality called prime time mode,
which allows you to kind of like alternate between that.

00:11:20.580 --> 00:11:24.600
You can flip it over, you can choose your own prime
time in case you get home from work really late.

00:11:24.600 --> 00:11:28.480
But it's just a different way of
thinking about how people use the widget.

00:11:28.480 --> 00:11:30.029
TV Tracker 3 over here.

00:11:30.029 --> 00:11:35.240
Basically exactly the same thing, we did add a little
bit of resizability, we changed the look up too.

00:11:35.240 --> 00:11:39.750
So that was TV Tracker's evolution
in a nutshell, not too much change.

00:11:39.750 --> 00:11:42.980
So if you start with a good design,
you can just run with it.

00:11:42.980 --> 00:11:44.310
Next slide, how to look good.

00:11:44.309 --> 00:11:47.649
And this is you know, a real question.

00:11:47.649 --> 00:11:49.319
There are some good tools out there.

00:11:49.320 --> 00:11:52.780
You know, Apple actually ships some little
glass buttons that you can use by default.

00:11:52.779 --> 00:11:55.019
You're not supposed to use aqua, at
least on the front of the widget.

00:11:55.019 --> 00:11:56.429
You can use it on the back, but not on the front.

00:11:56.429 --> 00:11:58.739
So you could go into Photoshop every time and be like okay,

00:11:58.740 --> 00:12:02.669
it's going to be purple button with
rounded corners and a drop shadow.

00:12:02.669 --> 00:12:05.279
Or you could use this glass button,
and that works pretty well.

00:12:05.279 --> 00:12:08.129
You could use Dashcode, which has
some great objects built into it,

00:12:08.129 --> 00:12:10.210
you can you know, get away with some good style in there.

00:12:10.210 --> 00:12:13.450
You could use rounded rectangles and all that.

00:12:13.450 --> 00:12:15.660
The sessions the other day covered all that.

00:12:15.659 --> 00:12:20.839
Beyond that, there's this whole realm of trying
to figure out what can you do, what can you do.

00:12:20.840 --> 00:12:24.090
At the end of the day, good design is hard.

00:12:24.090 --> 00:12:25.280
You know, there's a lot of decisions.

00:12:25.279 --> 00:12:29.059
You can look at different things, you can follow
Apple's precedent, which is always a good idea.

00:12:29.059 --> 00:12:31.469
But if you really want to take
it to the next level, you know,

00:12:31.470 --> 00:12:35.129
I'm assuming a lot of you guys are
developers, it's a developer conference.

00:12:35.129 --> 00:12:38.299
And this idea of division of labor,
you know, that you're really good

00:12:38.299 --> 00:12:40.409
at one thing, it's hard to be good at everything.

00:12:40.409 --> 00:12:42.549
So oftentimes we work with designers.

00:12:42.549 --> 00:12:46.120
I myself am a designer, I don't code,
I'm pretty bad at even just like CSS.

00:12:46.120 --> 00:12:49.379
But I can occasionally make a nice graphic.

00:12:49.379 --> 00:12:50.679
So I work with developers.

00:12:50.679 --> 00:12:54.539
For you guys you know, I suggest
this idea of hiring a designer.

00:12:54.539 --> 00:12:57.889
This slide actually should just say work with a
designer, because you don't have to hire somebody,

00:12:57.889 --> 00:13:01.409
there's a lot of really talented people out
there, they want to make great applications.

00:13:01.409 --> 00:13:04.549
You can go on the web, you can look at different sites.

00:13:04.549 --> 00:13:06.099
There's companies like IconFactory.

00:13:06.100 --> 00:13:08.060
You know, in the old days you needed a good icon.

00:13:08.059 --> 00:13:11.539
Rather than drawing your own icon,
nowadays there's user interface companies.

00:13:11.539 --> 00:13:14.279
There's this website called Programmer Meet Designer.

00:13:14.279 --> 00:13:18.879
You know, it actually helps connect to people like that,
it's almost like a dating service for developers, so.

00:13:18.879 --> 00:13:19.769
( Laughter )

00:13:19.769 --> 00:13:23.590
It works pretty well, and it's just a really
great paradigm, you know, working in teams,

00:13:23.590 --> 00:13:30.110
like being able to bounce ideas off somebody changes the way
that you develop, and you see the program in different ways.

00:13:30.110 --> 00:13:35.529
Part of the problem, you know, you're under the hood
all the time, and just seeing how programs work,

00:13:35.529 --> 00:13:39.740
oftentimes the developer really you
know, is too intimate with this stuff.

00:13:39.740 --> 00:13:43.299
The end user doesn't necessarily care
how the cache is being cleaned up.

00:13:43.299 --> 00:13:48.229
So you know, you bring in the outside guy, he'll say
you know, we don't need that cache cleanup button,

00:13:48.230 --> 00:13:51.570
we're just going to kind of like gloss over
that feature, and it works just fine.

00:13:51.570 --> 00:13:54.490
But it's a different way of getting
a new perspective on your stuff.

00:13:54.490 --> 00:13:55.899
So when possible, hire a designer.

00:13:55.899 --> 00:14:00.000
One of the weird things, and there's a lot of really
young designers out there, some twenty five year old guys,

00:14:00.000 --> 00:14:03.340
you know, some eighteen year old guys,
and they make amazing, amazing stuff.

00:14:03.340 --> 00:14:07.590
They're not necessarily looking for a lot of money,
you know, they don't have a wife and kids to support.

00:14:07.590 --> 00:14:12.420
So you can really get some great design talent at
not a lot of money, and really make an amazing app.

00:14:12.419 --> 00:14:15.629
So it's a good paradigm for development.

00:14:15.629 --> 00:14:19.029
In a nutshell, our design process,
we always start with a good idea.

00:14:19.029 --> 00:14:21.929
We have to ask ourselves what does the customer want?

00:14:21.929 --> 00:14:25.459
There's this next question that you know, we
have to address, is it actually buildable?

00:14:25.460 --> 00:14:28.259
Like we get a lot of feature requests
for things, and they're just impossible.

00:14:28.259 --> 00:14:31.870
You know, like we'd love to have live streaming
TV in TV Tracker, it's not going to happen.

00:14:31.870 --> 00:14:33.440
You know, the technology's not there.

00:14:33.440 --> 00:14:36.250
So the reality is you have to find
something that's sustainable,

00:14:36.250 --> 00:14:40.429
find a really good data source, make
sure it's going to be able to last.

00:14:40.429 --> 00:14:44.879
We sketch out our ideas, we iterate, you
need to just keep making a million sketches.

00:14:44.879 --> 00:14:49.149
Like we showed one TV Tracker sketch up there
because they vetoed me showing a hundred.

00:14:49.149 --> 00:14:51.659
But you know, I drew that damn thing over and over and over.

00:14:51.659 --> 00:14:53.589
Every time it gets a little bit better.

00:14:53.590 --> 00:14:56.980
You know, you might just streamline it,
you might just understand it better.

00:14:56.980 --> 00:15:02.970
But when you're developing the stuff, it's just
very, very powerful to just keep working on it.

00:15:02.970 --> 00:15:05.940
Beyond that, we do discuss a spec.
You know, it's pretty informal,

00:15:05.940 --> 00:15:08.010
we don't have any printed document or anything like that.

00:15:08.009 --> 00:15:14.299
It's email, just bouncing around ideas, you know, bouncing
features off of existing users is always a good idea.

00:15:14.299 --> 00:15:16.870
Just try to keep the scope about right.

00:15:16.870 --> 00:15:22.759
You know, it's important to introduce new features,
but not get carried away, so that's what a spec is for.

00:15:22.759 --> 00:15:26.139
We start building and making our
rendered graphics simultaneously.

00:15:26.139 --> 00:15:31.629
Oftentimes you know, you realize halfway
through that this button's not going to work,

00:15:31.629 --> 00:15:33.879
it's too big, it's too small, whatever it is.

00:15:33.879 --> 00:15:39.559
If you have you know, one design and then you pass it off
to a developer, or vice versa, if you read all your code

00:15:39.559 --> 00:15:43.299
and then hired a designer to come in,
it's going to be a very strange process,

00:15:43.299 --> 00:15:45.120
and you're going to actually waste a lot of time.

00:15:45.120 --> 00:15:48.879
So this idea that you know, you're going to
discuss it all along works very well.

00:15:48.879 --> 00:15:50.840
Lastly we say iterate.

00:15:50.840 --> 00:15:52.460
You know, you just keep churning.

00:15:52.460 --> 00:15:55.379
You know, TV Tracker 3 is pretty good, the other ones?

00:15:55.379 --> 00:15:57.139
You know, it took time to get there.

00:15:57.139 --> 00:15:59.519
But you just keep working and keep shipping.

00:15:59.519 --> 00:16:03.970
If we decided to ship TV Tracker 3 as TV Tracker
1, you know, somebody else would have done it.

00:16:03.970 --> 00:16:07.029
So just keep churning, keep trying, and it's a lot of fun.

00:16:07.029 --> 00:16:11.220
So, okay. Now the fun graphicky stuff is over,
and we're going to actually get into the real meat

00:16:11.220 --> 00:16:13.830
of the things, which is how to make a widget.

00:16:13.830 --> 00:16:19.879
My brother Dave is going to give a little bit of an
introduction on the ways to make a widget without Dashcode,

00:16:19.879 --> 00:16:22.740
you know, all the ingredients you
need, how to mix it together.

00:16:22.740 --> 00:16:27.120
And I think it's going to be pretty informative, because
you know, it's amazing stuff, and it's not too hard.

00:16:27.120 --> 00:16:28.620
So without further ado, Dave.

00:16:28.620 --> 00:16:29.700
>> Thanks Josh.

00:16:29.700 --> 00:16:35.210
( Applause )

00:16:35.210 --> 00:16:39.150
I'm Dave. I develop with Monkey Business
Labs, and I'm just going to go over the basics

00:16:39.149 --> 00:16:41.970
of making your own widget without using Dashcode.

00:16:41.970 --> 00:16:45.570
So first, development tools.

00:16:45.570 --> 00:16:48.430
I say without using Dashcode,
but I actually do use Dashcode.

00:16:48.429 --> 00:16:51.439
It has a great debugger, it has a great evaluator,

00:16:51.440 --> 00:16:56.170
so it is very handy for solving problems
in your widgets and things like that.

00:16:56.169 --> 00:16:59.990
But generally I just use TextMate for all my development.

00:16:59.990 --> 00:17:03.220
It's pretty much a really good text
editor, they won an ADA last year.

00:17:03.220 --> 00:17:07.230
So I'm sure you've heard of it,
but if you haven't, check it out.

00:17:07.230 --> 00:17:12.279
And then behind the scenes in widgets, it's basically
just web technologies that you have to learn.

00:17:12.279 --> 00:17:19.410
So I'm going to cover everything that happens inside
of a really basic widget, and let's look at that.

00:17:19.410 --> 00:17:21.880
So widgets are really just folders.

00:17:21.880 --> 00:17:24.180
There's pretty much five things you have to have in there.

00:17:24.180 --> 00:17:29.840
There's your info.plist file, that's the
widget properties, HTML, your document tree,

00:17:29.839 --> 00:17:35.829
you just define everything that's on the front and back of
your widget, your CSS, that's where you control the layout

00:17:35.829 --> 00:17:40.619
and styles in your widget, JavaScript is everything
dynamic, if you want something cool to happen,

00:17:40.619 --> 00:17:42.969
that's where you write it, and then images.

00:17:42.970 --> 00:17:46.720
I think you know what they do, but there's
a couple things you have to know about them.

00:17:46.720 --> 00:17:50.000
So I'm going to cover a really simple hello world widget.

00:17:50.000 --> 00:17:52.990
When you click on the widget, it
changes and says goodbye world.

00:17:52.990 --> 00:17:56.220
So first info.plist.

00:17:56.220 --> 00:18:00.970
It's just key value pairs, it's a list of
properties, a lot of Mac applications use them.

00:18:00.970 --> 00:18:03.220
There are really only three things you have to specify here.

00:18:03.220 --> 00:18:08.789
So there's the main HTML file, web pages have
index.HTML, widgets don't really have

00:18:08.789 --> 00:18:12.180
that default HTML file, so you specify that.

00:18:12.180 --> 00:18:17.029
The CFBundleIdentifier, that's the name
that the OS uses to refer to your widget.

00:18:17.029 --> 00:18:23.089
It's in reverse domain format, so something like
com.monkeybusinesslabs.widget.TVtracker.

00:18:23.089 --> 00:18:26.589
And then there's the CFBundleDisplayName,
that's what you see in the finder,

00:18:26.589 --> 00:18:29.929
you see in the tray in the dashboard, and things like that.

00:18:29.930 --> 00:18:32.950
You can also, there are optional
keys in this info.plist file,

00:18:32.950 --> 00:18:36.559
so there's the allow full access, allow network access.

00:18:36.559 --> 00:18:41.849
And you can control things like writing files, reading
things from the network, and sending things out.

00:18:41.849 --> 00:18:46.149
And you can control the size of your widget, you
can see that I control the width and height there,

00:18:46.150 --> 00:18:52.970
and I have that allow multiple instances key, which you
can use to let users run multiple instances of the widget.

00:18:52.970 --> 00:18:56.809
In your HTML you can import your CSS and JavaScript files,

00:18:56.809 --> 00:19:00.200
you see them doing that with the
import tag and the script tag.

00:19:00.200 --> 00:19:05.019
And then underneath that there's the body tag, and
that's where you define all those elements in your HTML.

00:19:05.019 --> 00:19:09.720
So I have one image, which is that
background image, default.png, and a span,

00:19:09.720 --> 00:19:12.110
which is just a container which holds some text.

00:19:12.109 --> 00:19:13.599
It says hello world.

00:19:13.599 --> 00:19:17.859
I set IDs for both of those, so I can
refer to them in the CSS and JavaScript.

00:19:17.859 --> 00:19:23.069
And the only other thing you have to notice is
this onClick event that I have in the body tag,

00:19:23.069 --> 00:19:26.829
and that's a JavaScript function
that you'll see in a minute.

00:19:26.829 --> 00:19:28.539
In the CSS there's just two items.

00:19:28.539 --> 00:19:32.329
There were two elements in the HTML,
so there's that background image.

00:19:32.329 --> 00:19:35.470
I set the position to be in the
upper left corner of the widget.

00:19:35.470 --> 00:19:40.190
CSS uses a coordinate system that starts in the
upper left at zero zero and moves right or down,

00:19:40.190 --> 00:19:46.230
depending on those two values, or you can specify where the
image would be from the right and bottom of the widget too.

00:19:46.230 --> 00:19:48.150
And then I do the same for that text.

00:19:48.150 --> 00:19:51.720
I have it forty one pixels from
the top, thirty two from the left.

00:19:51.720 --> 00:19:57.500
And I set the font, and set it as bold,
and white text, and things like that.

00:19:57.500 --> 00:20:02.369
In the JavaScript there's that changeText
function that I mentioned earlier in the HTML.

00:20:02.369 --> 00:20:07.439
You can see I used this getElementById method to look at
that span, hello text, and see what's going on in it.

00:20:07.440 --> 00:20:11.539
If it says hello text, I change it to
goodbye, or if it says hello world I change it

00:20:11.539 --> 00:20:14.240
to goodbye world, otherwise I change it back.

00:20:14.240 --> 00:20:18.970
And I'm also changing the location of
that text by that style.top property.

00:20:18.970 --> 00:20:23.059
So once you make those files, you
just put all those in a folder.

00:20:23.059 --> 00:20:25.179
There are a couple images you need that I mentioned before.

00:20:25.180 --> 00:20:30.380
You need that default.png, and that's the image people
see when they first open your widget and it's loading.

00:20:30.380 --> 00:20:35.680
And you need icon.png, which is just the icon
that's in the tray at the bottom of the widget.

00:20:35.680 --> 00:20:41.060
Rename that folder to something.wdgt, and it's a widget.

00:20:41.059 --> 00:20:45.659
So if you actually want to go make your own
widget, you probably want to have some resources.

00:20:45.660 --> 00:20:53.080
I use the Apple widget documentation which is at
developer.apple.com/macosx/dashboard.html

00:20:53.079 --> 00:20:55.329
There's the Safari CSS documentation.

00:20:55.329 --> 00:20:57.759
Widgets just use WebKit to render everything,

00:20:57.759 --> 00:21:02.829
so if you just use a Safari CSS doc then
that'll work out pretty much correctly.

00:21:02.829 --> 00:21:05.869
And for JavaScript, O'Reilly's JavaScript book is great.

00:21:05.869 --> 00:21:08.789
Chris and I both use it, so check it out.

00:21:08.789 --> 00:21:13.730
And now Chris is going to talk about getting some data for
your widgets so you can say things other than hello world.

00:21:13.730 --> 00:21:15.009
( Applause )

00:21:15.009 --> 00:21:18.569
>> Thanks Dave.

00:21:25.019 --> 00:21:28.059
My name's Chris Masto, I am also a widget developer.

00:21:28.059 --> 00:21:32.509
And one thing that a lot of widgets do
is they retrieve data from the internet,

00:21:32.509 --> 00:21:35.690
they process it a little bit, they
display it in a simplified form.

00:21:35.690 --> 00:21:39.670
The standard way to do that is XMLHTTPRequest.

00:21:39.670 --> 00:21:39.980
So -

00:21:39.980 --> 00:21:42.960
( Laughter )
We'll talk a little bit about that too.

00:21:42.960 --> 00:21:48.259
We'll talk a little bit about the
basics of how XMLHTTPRequest works.

00:21:48.259 --> 00:21:49.650
It's fairly straight forward.

00:21:49.650 --> 00:21:53.880
I'm going to start out here with just one little
quick tip, the way I like to do things.

00:21:53.880 --> 00:22:02.130
Most widgets in my experience, they only retrieve one source
of data, and they retrieve it again when a timer goes off,

00:22:02.130 --> 00:22:04.810
or a user clicks a refresh button or something like that.

00:22:04.809 --> 00:22:09.359
So what I like to do is I keep my
request object in a global variable,

00:22:09.359 --> 00:22:12.829
and I just abort any pending request
before I do anything else.

00:22:12.829 --> 00:22:16.529
This is just in case you know, the user's
sitting there slamming on the refresh button,

00:22:16.529 --> 00:22:19.559
but it actually takes a minute to pull the data down.

00:22:19.559 --> 00:22:27.789
To create your XMLHTTPRequest you just use a standard
JavaScript new syntax to get the request object.

00:22:27.789 --> 00:22:30.649
And then you're going to set up a
couple of properties to make it work.

00:22:30.650 --> 00:22:34.290
The first one is the onreadystatechange handler.

00:22:34.289 --> 00:22:41.500
This is a function which we will write, called
stateChanged in this example, and this is called when there,

00:22:41.500 --> 00:22:45.549
as the request goes through its
different request cycle process.

00:22:45.549 --> 00:22:50.240
We then call the open method, which takes three parameters.

00:22:50.240 --> 00:22:55.059
The first is the, whether the request is a get or a post.

00:22:55.059 --> 00:23:00.159
The second is the URL of the data that
we're actually getting in this case.

00:23:00.160 --> 00:23:05.380
And the third is flagged for whether the
request is synchronous or asynchronous.

00:23:05.380 --> 00:23:12.270
It's very important, especially in Leopard as you may have
heard already, where all of the widgets in the dashboard run

00:23:12.269 --> 00:23:16.889
in a single process, to do your
request in an asynchronous manner.

00:23:16.890 --> 00:23:22.550
If you do a synchronous XMLHTTPRequest,
say it takes a few seconds to run,

00:23:22.549 --> 00:23:26.379
all of the widgets in the dashboard will
pause while it's waiting to get your data,

00:23:26.380 --> 00:23:29.400
and that's obviously not an optimal user experience.

00:23:29.400 --> 00:23:35.990
So the recommendation is to definitely always set
this flag to true, always do asynchronous requests.

00:23:35.990 --> 00:23:41.309
Then we set a cache-control header here, because we
want to make sure that we're always getting fresh data.

00:23:41.309 --> 00:23:44.819
This also helps to avoid a slight
problem, which I'll talk about in a minute.

00:23:44.819 --> 00:23:50.960
And then finally we simply call send,
that fires off the request asynchronously,

00:23:50.960 --> 00:23:57.670
and your onreadystatechange handler will
be called back as the request processes.

00:23:57.670 --> 00:24:03.350
There are several properties of the
XMLHTTPRequest object that you can examine.

00:24:03.349 --> 00:24:08.689
There's the readyState, there's a status,
and there's the actual data itself.

00:24:08.690 --> 00:24:13.220
So let's start by talking about the readyState property.

00:24:13.220 --> 00:24:18.900
Okay. This is a value which starts out at
zero initially, and as the request goes

00:24:18.900 --> 00:24:22.290
through the different phases of
the request cycle it advances.

00:24:22.289 --> 00:24:25.769
It eventually gets to four, which is the loaded state.

00:24:25.769 --> 00:24:30.339
Most widgets will ignore everything except the loaded state,

00:24:30.339 --> 00:24:34.519
because until that point you haven't
actually retrieved any data.

00:24:34.519 --> 00:24:38.160
Well you haven't received all of your data,
and there's nothing really to do with it.

00:24:38.160 --> 00:24:42.700
So let's look at a sample onreadystatechange handler.

00:24:42.700 --> 00:24:50.769
So here's our stateChanged function from earlier, and as you
can see, as I was just saying, it waits for the readyState

00:24:50.769 --> 00:24:54.529
to get to four, which means that
the data has finally been loaded.

00:24:54.529 --> 00:24:56.779
It checks the status of the request.

00:24:56.779 --> 00:25:00.980
If it was successful then we call a processing function,

00:25:00.980 --> 00:25:06.230
and if it was unsuccessful then we handle
the error however we're going to handle it.

00:25:06.230 --> 00:25:12.349
I want to focus in a little bit as a
tip here on this HTTP status value.

00:25:12.349 --> 00:25:19.869
You might expect that what you're looking for is the
two hundred okay status, and that's true in most cases.

00:25:19.869 --> 00:25:26.909
But this is where XMLHTTPRequest is badly
named, because it's not just for HTTP.

00:25:26.910 --> 00:25:29.029
It takes a URL.

00:25:29.029 --> 00:25:35.069
So you can for example, and I've quite frequently
used a file URL to get data from the file system,

00:25:35.069 --> 00:25:38.089
or you can actually get data that
you've bundled inside of your widget.

00:25:38.089 --> 00:25:45.099
You have to set a flag in your info.plist to allow
that for security reasons, but you'll find if you do that,

00:25:45.099 --> 00:25:48.059
then you'll get back a status value of zero.

00:25:48.059 --> 00:25:53.710
It's also been the case, depending on which version of the
OS you have, and the phase of the moon and the alignment

00:25:53.710 --> 00:25:57.430
of Jupiter, and things like that,
sometimes if you get back a cache version

00:25:57.430 --> 00:26:01.590
of a previous request, the status might also be set to zero.

00:26:01.589 --> 00:26:08.069
So the takeaway tip here is basically just don't
rely terribly, terribly much on the status.

00:26:09.970 --> 00:26:14.900
So once you've gotten data back, you want to
look at it, you want to do something with it.

00:26:14.900 --> 00:26:19.800
So the way I see it, there are basically three types
of data that you might be requesting, excuse me.

00:26:19.799 --> 00:26:26.200
You might be getting back XML, an XML document,
you might be getting back an HTML document,

00:26:26.200 --> 00:26:29.390
or you might be getting back none
of the above, aka plain text.

00:26:29.390 --> 00:26:36.460
In the even that you're requesting XML,
you can look at the responseXML property,

00:26:36.460 --> 00:26:41.720
that contains a standard XML document, you
can call dom methods on it, you can you know,

00:26:41.720 --> 00:26:44.730
use it as an XML document, it's fairly straight forward.

00:26:44.730 --> 00:26:54.470
In the event you're retrieving say some plain text,
or as we saw in an earlier session maybe a csv file,

00:26:54.470 --> 00:27:01.240
you can look at the responseText property, and that
simply contains the body of the response, its text string.

00:27:01.240 --> 00:27:06.039
The nice thing about this is that you can use
this even if you're retrieving XML data as well.

00:27:06.039 --> 00:27:09.680
So it's kind of a view source function, you
know, especially if you're in Dashcode.

00:27:09.680 --> 00:27:15.380
You can pop into the evaluator, you can print out response
text, you can see what that XML document looks like.

00:27:15.380 --> 00:27:17.820
It might help you to know how you need to parse it.

00:27:17.819 --> 00:27:20.399
There is however, the third possibility.

00:27:20.400 --> 00:27:25.310
Let's say you're just requesting a web page, and you
want to look at that data that's on the web page.

00:27:25.309 --> 00:27:30.529
Well very few HTML pages out there
are well formed, valid XML.

00:27:30.529 --> 00:27:37.289
And if they're not well formed, valid XML, response XML
is just going to be null, you can't actually use it.

00:27:37.289 --> 00:27:41.509
And you could look at response text,
but of course that's just a string.

00:27:41.509 --> 00:27:46.529
So then you'd start parsing it with regular
expressions, and you know, nested tags are really hard

00:27:46.529 --> 00:27:49.339
to read with parts of regular expressions.

00:27:49.339 --> 00:27:54.039
Ideally, at least ideally for me, I'd like to
have an HTML document that I could you know,

00:27:54.039 --> 00:27:57.420
I could walk the dom tree on and
I could process it that way.

00:27:57.420 --> 00:28:03.100
So what we want is to turn that text that
we've gotten back into an actual HTML document.

00:28:03.099 --> 00:28:07.980
Fortunately there is createHTMLDocument,
which will do that for you.

00:28:07.980 --> 00:28:11.450
So let's take a quick look at how that works.

00:28:11.450 --> 00:28:14.289
Fairly straight forward, there are only a few steps.

00:28:14.289 --> 00:28:19.029
First thing is that you have to actually
dig up the createHTMLDocument function.

00:28:19.029 --> 00:28:23.660
It's a dom level two function, it
lives in the dom implementation,

00:28:23.660 --> 00:28:26.110
which is, can be accessed from your document.

00:28:26.109 --> 00:28:30.829
So essentially there's some boiler plate
code that you can use to get to that.

00:28:30.829 --> 00:28:38.029
It takes one parameter, which is a string that represents
the title of the document that's going to be created.

00:28:38.029 --> 00:28:45.970
CreateHTMLDocument creates a full HTML
document, with a head and a title and a body,

00:28:45.970 --> 00:28:48.740
but we're basically about to throw that away.

00:28:48.740 --> 00:28:52.609
So we just pass in an empty string
and deal with it that way.

00:28:52.609 --> 00:28:59.769
So here we call document doc.open, which
says hey I'm going to write a new document.

00:28:59.769 --> 00:29:04.680
We simply write out the document, which is the
response text that we received, and then we close it.

00:29:04.680 --> 00:29:11.980
And then the underlying machinery will churn
away and produce a nice HTML document object,

00:29:11.980 --> 00:29:17.730
which you can then call dom methods on, process
it in whatever way is convenient to you.

00:29:17.730 --> 00:29:21.200
So there is how to use createHTMLDocument.

00:29:21.200 --> 00:29:29.330
And now Dave is going to talk about using Cocoa plug-
ins as another way to get data into your widget.

00:29:29.329 --> 00:29:31.419
( applause )

00:29:31.420 --> 00:29:33.509
( applause )

00:29:33.509 --> 00:29:34.140
>> All right.

00:29:34.140 --> 00:29:40.150
So I think a lot of you guys are probably Cocoa
developers, so what Chris just showed you is a great way

00:29:40.150 --> 00:29:45.350
to integrate widgets with your web applications,
but it's not as good for some of your Cocoa apps.

00:29:45.349 --> 00:29:48.809
So let's say you have an application
that uses core data to store your data,

00:29:48.809 --> 00:29:54.039
or you just have it stored some way that's not
really accessible just in a flat file like that.

00:29:54.039 --> 00:29:57.190
Then a Cocoa plug-in could really work well there.

00:29:57.190 --> 00:30:02.420
Or if you wanted your widget to do something when the user
gets email, then you probably aren't going to really detect

00:30:02.420 --> 00:30:05.440
that from JavaScript, but you might
be able to with a plug-in.

00:30:05.440 --> 00:30:08.410
So you can get to data, you can get to different events.

00:30:08.410 --> 00:30:13.350
So for those reasons you think Cocoa plug-ins,
it sounds great, but there are some problems.

00:30:13.349 --> 00:30:18.809
Just like Chris said, once Leopard comes out, all
the widgets are going to run in their own process.

00:30:18.809 --> 00:30:23.759
But once you have a widget plug-in, you're going to
have, or your widget will branch off in its own process.

00:30:23.759 --> 00:30:26.140
So not only do you have the overhead of a widget plug-in,

00:30:26.140 --> 00:30:29.740
there's all this extra overhead because
it's running in its own process.

00:30:29.740 --> 00:30:32.450
So we try to avoid them for that reason.

00:30:32.450 --> 00:30:36.430
And also you might be tempted to actually
make your widgets interface in a plug-in,

00:30:36.430 --> 00:30:39.779
but Apple wants us to just stick
to JavaScript and CSS and HTML.

00:30:39.779 --> 00:30:45.339
So just use Cocoa plug-ins to get data and events.

00:30:45.339 --> 00:30:49.279
So just getting right down to how to make
your own plug-in, it's really simple.

00:30:49.279 --> 00:30:51.849
You create it as a Cocoa Bundle in Xcode.

00:30:51.849 --> 00:30:55.699
You need to use a special initialiser,
this initWithWebView method.

00:30:55.700 --> 00:30:59.039
And that takes a web view, but that just
gets called by the dashboard automatically,

00:30:59.039 --> 00:31:01.579
so you don't have to do anything else with it.

00:31:01.579 --> 00:31:06.899
Then you have to expose your class to JavaScript, you
do that with this WebScriptObjectAvailable method.

00:31:06.900 --> 00:31:10.790
You see this string demo plug-in that I have
here, you could use whatever you want there,

00:31:10.789 --> 00:31:15.319
and then that's how you're going to
refer to your plug-in in JavaScript.

00:31:15.319 --> 00:31:18.809
Then you create methods in your Cocoa plug-in of course.

00:31:18.809 --> 00:31:21.179
So here I just have one that returns a string,

00:31:21.180 --> 00:31:25.759
you're obviously going to do something much
more interesting, but this is a good for a demo.

00:31:25.759 --> 00:31:30.750
And then any selectors that you make
you can actually refer to in JavaScript.

00:31:30.750 --> 00:31:36.210
But if you have any characters like colons, underscores, or
dollar signs in the selector name, then it could get weird.

00:31:36.210 --> 00:31:40.940
So I think colons actually turn into
underscores when you refer them in JavaScript,

00:31:40.940 --> 00:31:45.690
underscores become dollar sign underscores,
and dollar signs become two dollar signs.

00:31:45.690 --> 00:31:48.590
So that's where a webScriptNameForSelector comes in.

00:31:48.589 --> 00:31:53.000
In this you, it's a method which takes
a selector and actually returns a string

00:31:53.000 --> 00:31:55.630
which you can use in JavaScript to refer to it.

00:31:55.630 --> 00:31:58.580
So if I had you know, a bunch of dollar signs in that name,

00:31:58.579 --> 00:32:02.429
then I could just return a really simple
string, and use that in JavaScript.

00:32:02.430 --> 00:32:05.830
There is the equivalent web script
name for key which you can use.

00:32:05.829 --> 00:32:09.819
It works the same way, so you can access
all your keys in JavaScript as well.

00:32:11.039 --> 00:32:16.329
Then going back to the info.plist file that
I talked about before, you just include something,

00:32:16.329 --> 00:32:18.750
or include this key for the plug-in there.

00:32:18.750 --> 00:32:23.450
And when you launch your widget, then the dashboard
is going to call that initialization method,

00:32:23.450 --> 00:32:27.549
and you can refer to that plug-in just
with that string you wrote, demoPlugin.

00:32:27.549 --> 00:32:31.039
So here you see this JavaScript,
I have this variable, hello text.

00:32:31.039 --> 00:32:34.279
It's going to get that string, hello world, from my plug-in.

00:32:34.279 --> 00:32:41.660
And in your Cocoa you can return NSStrings, NSArrays,
NSNumbers, and those all just get converted to data structures

00:32:41.660 --> 00:32:46.580
that JavaScript can understand automatically, so
you don't have to bother with any weird conversion.

00:32:46.579 --> 00:32:50.809
And it goes the other way as well, JavaScript
arrays, numbers, and strings just get transferred,

00:32:50.809 --> 00:32:54.399
or converted to things which Cocoa can understand.

00:32:54.400 --> 00:32:56.690
So that's really it for Cocoa plug-ins.

00:32:56.690 --> 00:32:59.940
They can get as complicated as you want
them to be, but I didn't want to go

00:32:59.940 --> 00:33:03.390
through an actual data access thing,
cause that's not that relevant.

00:33:03.390 --> 00:33:10.190
So now let's look at what we can actually do to store
that data inside of our widgets using preferences.

00:33:10.190 --> 00:33:15.450
So widget preferences can be used just for simple things,
like the stickies widget remember what color this,

00:33:15.450 --> 00:33:17.730
the widget is when you restart your computer.

00:33:17.730 --> 00:33:19.539
So simple settings like that.

00:33:19.539 --> 00:33:24.180
You could also store more data, like if you grabbed a little
document from the web, and you just wanted to cache it

00:33:24.180 --> 00:33:28.769
so that next time they used the widget, if it's
not online, they can still see that document.

00:33:28.769 --> 00:33:30.920
I think weather does something like that.

00:33:30.920 --> 00:33:33.450
And you can also use it for multiple instances.

00:33:33.450 --> 00:33:38.450
So if you set up your preferences right, then you can
avoid overwriting all the data from one preference.

00:33:38.450 --> 00:33:43.009
So first let's just look at the
actual technical parts of it.

00:33:43.009 --> 00:33:44.339
Reading and writing is really simple.

00:33:44.339 --> 00:33:49.990
There are two methods you're going to use,
widget.setPreferenceForKey, that takes the preference and key.

00:33:49.990 --> 00:33:54.329
And an example is just setPreferenceForKey red and color.

00:33:54.329 --> 00:33:58.849
Then later if you call widget.preferenceForKey with color,
you would get red.

00:33:58.849 --> 00:34:00.789
You can store strings in there.

00:34:00.789 --> 00:34:06.619
I'm actually not sure of the upper limit on the size,
but you can store a good amount of data in there.

00:34:07.970 --> 00:34:13.670
Then that's it for just storing preferences
in all of the instances of your widget.

00:34:13.670 --> 00:34:16.960
So a preference stored that way gets shared
between all the instances of your widget.

00:34:16.960 --> 00:34:21.260
If you set the color in one, read the color
in another, it's going to be the same thing.

00:34:21.260 --> 00:34:25.220
So that could be a problem if you have
two instances that overwrite some data,

00:34:25.219 --> 00:34:27.939
so that's where widget identifiers come in.

00:34:27.940 --> 00:34:32.090
The widget identifier is just a unique
string associated with each widget instance,

00:34:32.090 --> 00:34:34.820
and you refer to it as widget.identifier.

00:34:34.820 --> 00:34:39.370
You don't lose it when you restart your computer, it
only gets lost when you actually close the widget.

00:34:39.369 --> 00:34:47.250
So it's, you can just use that to store
preferences that are unique to that instance,

00:34:47.250 --> 00:34:49.800
and here are two methods that I use to do that.

00:34:49.800 --> 00:34:56.010
You can see that I just send a preference and key just like
I did before, but then I call that setPreferenceForKey,

00:34:56.010 --> 00:34:59.490
and I use the widget identifier
along with the key that I sent.

00:34:59.489 --> 00:35:02.949
So going on.

00:35:02.949 --> 00:35:05.929
You actually, or sorry.

00:35:07.219 --> 00:35:12.259
When you're using a few instances like that, then you're
going to want to actually use JavaScript events to figure

00:35:12.260 --> 00:35:14.940
out when you need to read data and when you should save it.

00:35:14.940 --> 00:35:18.510
And there's the widget.onshow
and widget.onfocus events.

00:35:18.510 --> 00:35:22.620
On how fires whenever someone opens the
dashboard, and that's going to fire in all

00:35:22.619 --> 00:35:24.829
of your instances of your widget at once.

00:35:24.829 --> 00:35:27.619
On focus happens when you actually click on a widget.

00:35:27.619 --> 00:35:34.259
So here's how you use them, you just say widget.onshow,
and specify a function, just like Chris specified

00:35:34.260 --> 00:35:39.420
that callback function for XMLHTTPRequest before.

00:35:39.420 --> 00:35:42.470
And you know, that's basically when
you'd want to read your preferences,

00:35:42.469 --> 00:35:45.009
if you think another instance would have changed them.

00:35:45.010 --> 00:35:49.340
The last thing you need to do with multiple
instance preferences is actually removing them.

00:35:49.340 --> 00:35:53.300
When you close your widget, this widget.onremove
function gets called.

00:35:53.300 --> 00:35:57.330
And in that you want to set all the
preferences that you would use there to know.

00:35:57.329 --> 00:36:02.670
That's because that instance of the widget is the only
thing which can actually access that widget identifier,

00:36:02.670 --> 00:36:05.710
so if you don't remove them here, they'll
just stay in that preference file forever.

00:36:05.710 --> 00:36:11.789
It will get a little bit bigger every time someone launches
one of your widgets, and that's not a really good thing.

00:36:11.789 --> 00:36:15.630
So that covers it for widget preferences.

00:36:15.630 --> 00:36:19.110
So we're going to leave data and get into interface stuff.

00:36:19.110 --> 00:36:23.280
And I'm going to start out by talking about resizing widgets.

00:36:24.289 --> 00:36:28.059
Josh talked about TV Tracker before, and
that's a really good example of how one

00:36:28.059 --> 00:36:31.989
of our widgets went from being a static size to resizing.

00:36:31.989 --> 00:36:37.289
The initial version showed one hour of data, and
everyone wrote to us and said hey we love your widget,

00:36:37.289 --> 00:36:39.710
but it's way too small, I can't see anything.

00:36:39.710 --> 00:36:43.260
So we said all right, we'll make it show an hour and a half,

00:36:43.260 --> 00:36:47.040
the next amount of data you can use,
and everyone said it was too big.

00:36:47.039 --> 00:36:50.650
So we said you guys are kind of crazy,
so we'll just make it resizable.

00:36:50.650 --> 00:36:54.930
And that's TV Tracker 3, you can click
in the corner and drag and resize it.

00:36:54.929 --> 00:37:01.339
So I'll show you how we did that, but first let's
talk about a few different kinds of resizing.

00:37:01.340 --> 00:37:06.329
Josh talked about the weather widget, you click on the top
of it and it just grows a little bit with a nice animation.

00:37:06.329 --> 00:37:09.650
So there's only two states, it's really simple.

00:37:09.650 --> 00:37:12.050
The stocks widget is a little more complicated than that.

00:37:12.050 --> 00:37:14.490
If you're looking at two stocks
it doesn't have to be very tall,

00:37:14.489 --> 00:37:18.399
but once you have four stocks like
this it has to be a bit taller.

00:37:18.400 --> 00:37:23.110
And then TV Tracker, this resizing is
really just controlled by the user.

00:37:23.110 --> 00:37:26.470
We knew there was too much data to show
at once, so we said we can't do it,

00:37:26.469 --> 00:37:28.799
we'll let them decide how much they want to see.

00:37:28.800 --> 00:37:33.200
I'm actually going to show you how we did that, and
you probably won't need to do it in your widgets,

00:37:33.199 --> 00:37:35.269
but if you can do that, you can do all the other kinds.

00:37:35.269 --> 00:37:38.500
So let's look at that.

00:37:38.500 --> 00:37:42.119
First, to make a widget resize
you need some flexible images.

00:37:42.119 --> 00:37:45.509
The first TV Tracker, it just had
one static image as the background.

00:37:45.510 --> 00:37:49.860
It worked fine at that size, but if you
stretched it, it would have looked really bad.

00:37:49.860 --> 00:37:55.110
Then you need something to trigger the resizing, maybe it's
the user clicking on the top of the widget like in weather,

00:37:55.110 --> 00:37:58.450
maybe it's the data that you want
to display changing, like in stocks.

00:37:58.449 --> 00:38:02.049
Or it could be that click and drag
that we have in TV Tracker.

00:38:02.050 --> 00:38:05.700
And then you need to actually write
that JavaScript to make things happen.

00:38:05.699 --> 00:38:09.779
So here's TV Tracker 1 and 3.

00:38:09.780 --> 00:38:13.500
That TV Tracker 3, it's not one
background image, it's actually nine.

00:38:13.500 --> 00:38:17.650
So the four that are in the corners are
always static, and they don't change size.

00:38:17.650 --> 00:38:20.160
But the five of them that are in the
middle, in the column and row there,

00:38:20.159 --> 00:38:23.750
actually just stretch to fit whatever size the widget is.

00:38:23.750 --> 00:38:27.510
So this is what that looks like, kind of
exploded so you can see the nine images.

00:38:27.510 --> 00:38:30.950
And here's the HTML and CSS that we're using for that.

00:38:30.949 --> 00:38:36.359
So the upper left image, grid one, well you can think of
this almost as if the images are numbered like the numbers

00:38:36.360 --> 00:38:40.019
on a phone, so the upper left is
one, and the lower right is nine.

00:38:40.019 --> 00:38:42.780
So grid one is that first image in the upper left.

00:38:42.780 --> 00:38:48.350
You can see in the CSS I just have that position to
be zero zero, so it's in the upper left all the time.

00:38:48.349 --> 00:38:53.509
And I specify that width and height there,
which is just the resolution of the image.

00:38:53.510 --> 00:38:57.170
Then we do something weird, which is this grid2Holder.

00:38:57.170 --> 00:39:01.210
So we do that because you can't just
have an image stretch between two points,

00:39:01.210 --> 00:39:03.960
and continually stretch when you resize the widget.

00:39:03.960 --> 00:39:08.849
When you change the size of the widget, an image that's
stretched like that is just going to stay the same size.

00:39:08.849 --> 00:39:12.929
But you can have a div, which is really just
like an element which holds other elements

00:39:12.929 --> 00:39:15.849
in the HTML, and that will resize properly.

00:39:15.849 --> 00:39:19.750
So here you see that I have this
positioned absolutely as well.

00:39:19.750 --> 00:39:22.039
It's at the top of the widget, so that's zero.

00:39:22.039 --> 00:39:27.259
Its left value is sixty eight pixels in, because that's the
size of that upper left image, and the right is sixteen,

00:39:27.260 --> 00:39:31.820
or sixty nine pixels from the right, which is
the resolution of that image in the upper right.

00:39:31.820 --> 00:39:37.930
So when I resize the widget, this is going to continue to
stretch from that left side to the right side of the widget.

00:39:37.929 --> 00:39:40.940
Grid two is inside of that, which is the actual image.

00:39:40.940 --> 00:39:45.570
And you can see that I have that specified to be
always zero pixels from the left, top, bottom

00:39:45.570 --> 00:39:49.320
and right of that div, and it's width is a hundred percent.

00:39:49.320 --> 00:39:52.080
If I didn't have it inside of that
div, which is smaller than the widget,

00:39:52.079 --> 00:39:56.400
then it would stretch over the whole thing
and cover those images one and three.

00:39:56.400 --> 00:40:02.380
So now that's really it for the CSS and HTML,
so we have to check out the JavaScript for this.

00:40:02.380 --> 00:40:08.579
We're, we use mouse input from the user, so that uses
three events, mouseDown, mouseMove, and mouseUp.

00:40:08.579 --> 00:40:13.449
So in our HTML we added this dragThumb, which
is a nice little image in the lower right.

00:40:13.449 --> 00:40:19.589
And we have the onMouseDown event registered there,
and that calls a method that we wrote called resizeDown.

00:40:19.590 --> 00:40:25.260
So looking at resize down, the first thing I do is just
register those other two events, mouseMove and mouseUp.

00:40:25.260 --> 00:40:29.020
We don't care about those events until now
because the user can do whatever they want

00:40:29.019 --> 00:40:31.009
with the mouse until they're resizing.

00:40:31.010 --> 00:40:34.520
So we register those here, two more functions that we wrote.

00:40:34.519 --> 00:40:39.960
And then we just set a variable, this growboxInset,
and that's the distance that the user clicked and dragged

00:40:39.960 --> 00:40:42.440
on the widget from the lower right corner.

00:40:42.440 --> 00:40:44.599
You need to know that if you want
to figure out where the new value

00:40:44.599 --> 00:40:47.779
for the lower right corner should
be, so we're going to use that later.

00:40:47.780 --> 00:40:54.769
And in that you can see we use this event.x and event.y,
and that's just the values of where the user clicked.

00:40:54.769 --> 00:40:58.829
The event.stopPropagation and preventDefault
are there just to make sure that any other events

00:40:58.829 --> 00:41:04.289
that could have happened when they clicked the
mouse aren't happening, we just want it to resize.

00:41:04.289 --> 00:41:09.809
In the mouseMove event we calculate the new value for the
lower right corner, that's going to be the event values again

00:41:09.809 --> 00:41:14.309
where the mouse actually is, plus that distance
that they clicked from the lower right.

00:41:14.309 --> 00:41:18.059
Then we call window.resizeTo,
that's something that Apple gives us

00:41:18.059 --> 00:41:20.059
in the dashboard, and that resizes the widget.

00:41:20.059 --> 00:41:26.420
If you had set values in your info.plist file
for the width and height, this changes what those are.

00:41:26.420 --> 00:41:30.360
Once again, you need to stop the event,
and then when they let go of the mouse,

00:41:30.360 --> 00:41:36.050
we just need to unregister those two events,
and stop this event as well, and that does it.

00:41:36.050 --> 00:41:38.780
There are a few more things that you
could add in that JavaScript of course.

00:41:38.780 --> 00:41:43.350
So if you had a lot of elements in your widget which
have to resize when they're clicking and dragging,

00:41:43.349 --> 00:41:48.880
it might actually slow down the machine a lot, so in
that mouseDown event you might hide a lot of elements.

00:41:48.880 --> 00:41:51.610
If you did that then in mouseUp
you'd have to show them again.

00:41:51.610 --> 00:41:55.660
Or if you wanted more live feedback of
something which doesn't automatically resize,

00:41:55.659 --> 00:42:00.690
you would do that in mouseMove, and you could just
modify all the styles of your elements the same way

00:42:00.690 --> 00:42:06.809
that we changed the text and location of
that hello world text in that first example.

00:42:06.809 --> 00:42:10.139
So you've seen how we did it in TV
Tracker with clicking and dragging,

00:42:10.139 --> 00:42:14.269
but you say that's not how anything works
in the weather widget and in stocks.

00:42:14.269 --> 00:42:17.750
So in the weather widget you could
use something called AppleAnimator.

00:42:17.750 --> 00:42:23.860
And that's just a way to make one value, like the height
that you want your widget to be change to a different value

00:42:23.860 --> 00:42:27.340
over time in a set number of intervals that you choose.

00:42:27.340 --> 00:42:33.480
So that's in all, or that's on all your computers
in system library, widget resources, Apple classes.

00:42:33.480 --> 00:42:36.960
And the way you would use that
is just when you call the resize,

00:42:36.960 --> 00:42:40.240
you do anything that you would
have done in that mouseDown event.

00:42:40.239 --> 00:42:44.519
When the AppleAnimator actually fires off
its callback function that you register,

00:42:44.519 --> 00:42:48.670
then you do what you would have done in the mouseMove
event, and when the animation is finished,

00:42:48.670 --> 00:42:51.240
exactly what you would have done in mouseUp.

00:42:51.239 --> 00:42:53.849
So it's really the same as resizing the way that we do it,

00:42:53.849 --> 00:42:57.750
it's just handled automatically instead
of having the user use the mouse.

00:42:57.750 --> 00:42:59.820
And stocks is even simpler than that.

00:42:59.820 --> 00:43:02.190
They don't animate or anything,
it's just when you're on the back

00:43:02.190 --> 00:43:05.820
of the widget you change what data you're
looking at, and the widget gets bigger.

00:43:05.820 --> 00:43:08.750
So that's really it for those three kinds of resizing,

00:43:08.750 --> 00:43:11.909
they're all pretty much the same,
just the input is different.

00:43:11.909 --> 00:43:17.319
And now Chris is going to come back and tell
you about some good CSS practices that he uses.

00:43:17.320 --> 00:43:20.690
And that's it.

00:43:20.690 --> 00:43:26.050
( applause )

00:43:26.050 --> 00:43:27.050
>> Thank you Dave.

00:43:27.050 --> 00:43:35.350
So I am going to talk about using CSS Introspection to
create dynamic documents without using evil magic constants.

00:43:35.349 --> 00:43:40.279
So let's break that into pieces and see
if it actually makes any sense at all.

00:43:40.280 --> 00:43:47.010
Let's say for example, you have a widget which needs to
change size depending on how much data it needs to display.

00:43:47.010 --> 00:43:49.020
Here is an example of one.

00:43:49.019 --> 00:43:57.909
In this state it has four rows, you can add another row
to it, and it will expand to show that extra information.

00:43:57.909 --> 00:43:59.359
Well how does this work?

00:43:59.360 --> 00:44:04.670
Since widgets are JavaScript, you can actually just
take a peek and see how the author implemented it.

00:44:04.670 --> 00:44:09.930
If you do that, you'll find a function, like
this calculateWidgetHeight for example.

00:44:09.929 --> 00:44:13.719
You see in here that basically what
it's doing is it's adding up the heights

00:44:13.719 --> 00:44:17.049
of the various elements of this widget's graphic design.

00:44:17.050 --> 00:44:21.980
So each of these numbers here is
some piece of that total display,

00:44:21.980 --> 00:44:26.920
and this figures out what the new
height is going to have to be set to.

00:44:26.920 --> 00:44:30.210
Now there are a couple other places
where numbers are used here like this.

00:44:30.210 --> 00:44:34.110
There's a, the size of the back for example.

00:44:34.110 --> 00:44:38.340
We see some other sizes here and here, and so on.

00:44:38.340 --> 00:44:41.610
Now this is fine, this is the standard method.

00:44:41.610 --> 00:44:44.420
We all use it, it's in several things I've written.

00:44:44.420 --> 00:44:50.380
But we might want to think about
why that could be difficult.

00:44:50.380 --> 00:44:55.349
Every time your graphic designer goes out and changes
your graphics, you have to go back to the code,

00:44:55.349 --> 00:44:59.199
and you have to copy the numbers in, and
you have to remember where you put them.

00:44:59.199 --> 00:45:02.129
So it can get a little tedious over time.

00:45:02.130 --> 00:45:04.079
Is there a better way that we can do this?

00:45:04.079 --> 00:45:10.650
Or is there an alternative method where we don't
have to do as much copying of constants around?

00:45:11.809 --> 00:45:16.420
Let's look at a CSS snippet from this particular widget.

00:45:16.420 --> 00:45:21.170
Here we can see that the height of this
particular row is actually specified there.

00:45:21.170 --> 00:45:27.760
If we go back and look at the code, we can see that
the height of twenty five is already in the CSS.

00:45:27.760 --> 00:45:33.000
Similarly, if we look at another piece of the CSS
here, we can see there's a height of thirty four,

00:45:33.000 --> 00:45:38.019
it's already in there, and another one, and so on.

00:45:38.019 --> 00:45:40.369
They're all in there, they're already in the CSS.

00:45:40.369 --> 00:45:45.019
Well it turns out that we can use a
function called getComputedStyle,

00:45:45.019 --> 00:45:47.480
which will allow, it's a very simple function.

00:45:47.480 --> 00:45:55.159
It takes an element, and it takes a string pseudo element,
which is one of those colon before colon first line things

00:45:55.159 --> 00:45:58.989
that you use in really fancy CSS,
and you never use in widgets.

00:45:58.989 --> 00:46:03.479
So we'll just let that be null for
our examples for these purposes.

00:46:03.480 --> 00:46:10.719
And what it does is it returns a CSSStyleDeclaration
back, with all of the CSS values computed,

00:46:10.719 --> 00:46:13.219
filled out, filled in, their absolute values.

00:46:13.219 --> 00:46:16.399
You can look at them and see actually how big things are.

00:46:16.400 --> 00:46:21.170
It's kind of like a measuring device
for your current layout.

00:46:21.170 --> 00:46:26.670
Now a very important point of this is that
it's measuring the current computed style.

00:46:26.670 --> 00:46:30.180
It's not telling you what it says in the CSS file itself,

00:46:30.179 --> 00:46:33.969
it's telling you what's in there
on the screen or in the widget.

00:46:33.969 --> 00:46:41.879
This means that it's handy, because you can leave things
unspecified, you can let WebKit lay it out for you,

00:46:41.880 --> 00:46:44.660
and then you can find out how big it turned out to be.

00:46:44.659 --> 00:46:50.589
But it's somewhat of a double edged sword, because if you've
changed that, if you've animated something, resized it,

00:46:50.590 --> 00:46:56.650
or perhaps made something invisible, you won't really
be able to get the you know, how big does it want to be,

00:46:56.650 --> 00:46:59.809
you'll just be able to find out
how big something currently is.

00:46:59.809 --> 00:47:06.259
I think the biggest fallout from this is that if you've
done the common technique of setting the display property

00:47:06.260 --> 00:47:11.420
in something CSS to none to get
rid of it, it's no longer there,

00:47:11.420 --> 00:47:15.389
so getComputedStyle will just tell you it's zero by zero.

00:47:15.389 --> 00:47:17.920
There's another way of working around this in most cases.

00:47:17.920 --> 00:47:21.050
You can use the visibility property, set it to hidden.

00:47:21.050 --> 00:47:25.320
The difference really is that visibility:
hidden says just don't draw this.

00:47:25.320 --> 00:47:28.430
But it still appears in the layout, it still takes up space.

00:47:28.429 --> 00:47:33.699
If you say display:none, it's kind of like saying
well, temporarily pretend this doesn't exist.

00:47:34.980 --> 00:47:40.940
So how can we use getComputedStyle to
rework some of this code in this example?

00:47:40.940 --> 00:47:47.070
Let's just focus on the top here, and let's say that
we want to replace these constants with a function

00:47:47.070 --> 00:47:49.769
that will determine their heights dynamically.

00:47:51.090 --> 00:47:58.450
So we'll write a function called getElementHeight,
we'll pass in the HTML ID of the element we want

00:47:58.449 --> 00:48:02.589
to get the height, of and we'll use get
computed style to figure out what it is.

00:48:02.590 --> 00:48:08.440
So the getElementHeight function would look something
like this, fairly straight forward, fairly short.

00:48:08.440 --> 00:48:16.559
First thing we do is we just use our old friend, the
standard dom getElementByID, we dig up that element.

00:48:16.559 --> 00:48:23.789
We call getComputedStyle on it, and we're passing
null in for the, for that pseudo element parameter.

00:48:23.789 --> 00:48:30.019
Once we've got the style back, we look at
its height, and we return it, simple as that.

00:48:30.019 --> 00:48:34.759
Now there's a little JavaScript tip here
that I just want to throw in quickly.

00:48:34.760 --> 00:48:38.870
What you get back from getComputedStyle are CSS styles.

00:48:38.869 --> 00:48:42.109
So that height will be something like thirty seven PX.

00:48:42.110 --> 00:48:47.599
We're only interested in the integer of thirty
seven, so we just use parseInt to get that.

00:48:47.599 --> 00:48:54.710
However, if you leave off that second parameter
to parsent, which is the base that you're parsing,

00:48:54.710 --> 00:48:59.699
and your string happens to start with zero or
zero X, then it will be interpreted as octal,

00:48:59.699 --> 00:49:02.439
or hexadecimal, and it's often not what you want.

00:49:02.440 --> 00:49:05.200
So I've been guilty of that a lot myself.

00:49:05.199 --> 00:49:08.230
You leave it off and then suddenly you get a strange value.

00:49:08.230 --> 00:49:11.289
So always supply the base.

00:49:11.289 --> 00:49:13.989
And there is getComputedStyle.

00:49:15.050 --> 00:49:20.070
So in this session here we talked, first Josh
explained a little bit about what makes a good widget,

00:49:20.070 --> 00:49:24.680
how to do good design, how you might
want to hire a designer to work with.

00:49:24.679 --> 00:49:30.669
We went through the basics of what pieces go into
making a widget, discussed some of the different ways

00:49:30.670 --> 00:49:34.150
that you can retrieve data for your
widget, whether it's over the internet,

00:49:34.150 --> 00:49:38.300
from a Cocoa plug-in, or just storing it in preferences.

00:49:38.300 --> 00:49:42.530
And we discussed a couple of fancy
dancy advanced techniques for resizing,

00:49:42.530 --> 00:49:47.130
and for dynamically computing the
current style of your widget.

00:49:47.130 --> 00:49:53.570
And here is the how to get more information.

00:49:55.570 --> 00:50:00.840
>> So if you guys have any questions, or for more
information you can contact the evangelist for WebKit,

00:50:00.840 --> 00:50:05.430
who's Mark Malone, or the 2D and 3D graphics evangelist,
Allan Schaffer.