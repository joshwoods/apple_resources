WEBVTT

00:00:20.030 --> 00:00:23.410
>> Welcome to Building Animated Cocoa User Interfaces.

00:00:23.410 --> 00:00:24.330
I'm Deric Horn.

00:00:24.329 --> 00:00:26.579
I'm the application technologies evangelist.

00:00:26.579 --> 00:00:31.169
And being an evangelist over the last year
we've spoken to thousands of developers

00:00:31.170 --> 00:00:33.000
about all of our new Leopard technologies.

00:00:33.000 --> 00:00:37.990
And overall, we're getting a really enthusiastic
responses from all of your technologies in Leopard.

00:00:37.990 --> 00:00:39.700
And it's really great to see.

00:00:39.700 --> 00:00:45.770
But hands down, the technology that more developers are
looking for more than any other has got to be animation.

00:00:45.770 --> 00:00:48.490
This is the technology that is really driving developers

00:00:48.490 --> 00:00:52.120
to write the next version of their
applications for Leopard only.

00:00:54.829 --> 00:00:58.890
So what we've done today is we've broken
animation up into two different sessions.

00:00:58.890 --> 00:01:01.939
Today we'll present animation from kind of the view level,

00:01:01.939 --> 00:01:03.409
the user interface level.

00:01:03.409 --> 00:01:07.950
We'll take Q&A, and then give you about 15
minutes to jockey for seating, get better positions

00:01:07.950 --> 00:01:12.049
And then we'll present animation
from the Core Animation engine layer.

00:01:12.049 --> 00:01:18.500
How to bring those APIs directly up into your
application and give it that really immersive experience.

00:01:18.500 --> 00:01:23.430
We also have coding headstarts for Core Animation.

00:01:23.430 --> 00:01:26.850
These coding headstarts can be
found in your WWDC attendee area.

00:01:26.849 --> 00:01:31.979
And they include a video, a read-me,
some tutorials, and sample code.

00:01:31.980 --> 00:01:36.640
One of the sample codes, for instance, displays
how to use cover flow in your applications.

00:01:36.640 --> 00:01:43.400
So before we start talking about animation,
we should really define what animation is.

00:01:43.400 --> 00:01:46.100
And to do that, I turn to Mac OS X dictionary.

00:01:46.099 --> 00:01:51.909
And it says animation is the state of the
being full of life, vigor, liveliness.

00:01:51.909 --> 00:01:54.700
It comes from the Latin term, animare.

00:01:54.700 --> 00:01:55.620
Instill with life.

00:01:55.620 --> 00:02:03.030
And I think animation really provides the means to
bring the user experience of your applications to life.

00:02:04.120 --> 00:02:07.280
It allows you to think about the
way that you portray your data,

00:02:07.280 --> 00:02:11.550
the way that you're interacting with
your users, and really change that.

00:02:11.550 --> 00:02:16.180
I think as developers, we tend
to use lists and tables a lot.

00:02:16.180 --> 00:02:18.670
And this is kind of a paradigm
that works great for developers,

00:02:18.669 --> 00:02:22.089
but may not always be the right paradigm for our users.

00:02:22.090 --> 00:02:27.629
So at the same time, when you consider adding
animation to your application, don't go too crazy.

00:02:27.629 --> 00:02:32.340
Keep things quick, meaningful, and something
that really adds value to your users.

00:02:32.340 --> 00:02:39.110
So overall, I wanted to talk a little
bit about the overall architecture.

00:02:39.110 --> 00:02:44.490
And when I think about the architecture, the heart
of animation is really the Core Animation engine.

00:02:44.490 --> 00:02:47.900
The Core Animation engine really relies on layers.

00:02:47.900 --> 00:02:53.090
Now when I think of layers, I think of layers as
these transparencies that sit on top of my screen.

00:02:53.090 --> 00:02:55.780
I render my content onto these layers.

00:02:55.780 --> 00:02:57.270
I can then move them around.

00:02:57.270 --> 00:02:59.540
I can shrink them, grow them.

00:02:59.539 --> 00:03:02.469
I can maybe change the Z order by
putting other layers in front of them.

00:03:02.469 --> 00:03:07.900
I can even apply these complex matrix transformations
to them to make these layers swirl around the screen.

00:03:07.900 --> 00:03:12.580
And we really get great performance out of this,
because we don't have to rerender that content.

00:03:12.580 --> 00:03:15.270
Once its rendered on to that layer, we keep it cached.

00:03:15.270 --> 00:03:21.719
Now we further improve on that performance by letting
it sit directly on top of OpenGL and taking advantage

00:03:21.719 --> 00:03:25.129
of the hardware acceleration that the GL pipeline provides.

00:03:25.129 --> 00:03:28.469
And then we further improve on that performance --

00:03:28.469 --> 00:03:31.620
because now all the machines that we ship
have at least two processors on them --

00:03:31.620 --> 00:03:34.250
so we allow Core Animation to run in its own thread.

00:03:34.250 --> 00:03:39.979
And then even to further improve on that,
we rely on the multithread OpenGL layer.

00:03:39.979 --> 00:03:43.939
So you can see that we're really trying to eek out
the best performance we can from this whole pipeline.

00:03:43.939 --> 00:03:50.609
But at the same time, Core Animation is
also this great graphics unification layer.

00:03:50.610 --> 00:03:55.080
And really what I mean by that is now we can start to
render different types of content onto these layers.

00:03:55.080 --> 00:04:01.240
We can render QuickTime, OpenGL, Quartz Composer, text,
we can render pictures or controls on these layers,

00:04:01.240 --> 00:04:05.810
and we can kind of coalesce them all and flatten
them, so we can have an OpenGL background,

00:04:05.810 --> 00:04:08.659
controls in the foreground, or text scrolling above that.

00:04:08.659 --> 00:04:11.240
Now in the past, this was pretty difficult to implement.

00:04:11.240 --> 00:04:16.009
One way of doing that would have been to create these
child windows -- these invisible child windows --

00:04:16.009 --> 00:04:17.610
and stick them all right next to each other.

00:04:17.610 --> 00:04:22.449
But then that really meant that we had to add logic
into our codes to keep track of these extra windows.

00:04:22.449 --> 00:04:24.050
And now we're giving that all to you for free.

00:04:24.050 --> 00:04:32.270
And then what I really think is interesting is we brought
all this power that the Core Animation engine provides

00:04:32.269 --> 00:04:34.579
for you, and we brought it right up into the view layer.

00:04:34.579 --> 00:04:38.279
And that's what we're really here to
talk about today is adding animation

00:04:38.279 --> 00:04:40.699
to existing user interfaces and to your views.

00:04:40.699 --> 00:04:44.009
And to do that, I'd like to welcome James
Dempsey on stage.

00:04:44.009 --> 00:04:44.279
( Applause )

00:04:44.279 --> 00:04:46.269
>> Thank you, James.

00:04:46.269 --> 00:04:49.039
>> Thank you, Deric.

00:04:49.040 --> 00:04:51.760
Good afternoon.

00:04:51.759 --> 00:04:53.420
How's everybody doing this afternoon?

00:04:53.420 --> 00:04:56.230
That bad, huh?

00:04:56.230 --> 00:04:59.350
How's everybody doing this afternoon?

00:04:59.350 --> 00:05:01.040
( cCheering )

00:05:01.040 --> 00:05:03.450
>> That's somewhat better.

00:05:03.449 --> 00:05:10.279
Okay. My name is James Dempsey. I am an engineer working on
the Cocoa frameworks, and today we're going to be talking

00:05:10.279 --> 00:05:15.250
about building animated Cocoa user interfaces.

00:05:15.250 --> 00:05:16.550
So let's get started.

00:05:16.550 --> 00:05:24.790
So, we've noticed that over time user interfaces
are becoming much more fluid, much more cinematic.

00:05:24.790 --> 00:05:32.420
We saw that going all the way back in the original version
of Mac OS X, with the magnifying doc and the Genie effect,

00:05:32.420 --> 00:05:38.900
and all the way up through Leopard, even in bigger
scale with things like Cover Flow and Time Machine.

00:05:38.899 --> 00:05:45.179
But we're here talking specifically
about animating Cocoa user interfaces.

00:05:45.180 --> 00:05:53.800
And in Cocoa, NSWindows and NSViews are the central
classes that we use for implementing user interfaces.

00:05:53.800 --> 00:06:03.030
So we want these wonderful, rich cinematic animation
experiences, and we're using Cocoa with Windows and Views.

00:06:03.029 --> 00:06:12.989
So what we've done in Leopard to make it easy for you is
to add a simple flexible API to AppKit for animation.

00:06:12.990 --> 00:06:17.829
Now, you may have heard of this thing called
Core Animation, maybe once or twice already.

00:06:17.829 --> 00:06:24.509
We have this wonderful, new underlying
graphics technology called Core Animation.

00:06:24.509 --> 00:06:30.180
And another thing that we've done in Cocoa
and Leopard is to harness Core Animation

00:06:30.180 --> 00:06:35.600
and expose its capabilities and functionalities to NSViews.

00:06:35.600 --> 00:06:38.870
So what we're going to talk about today.

00:06:38.870 --> 00:06:44.790
The first thing we're going to talk about is how
ridiculously easy it is to animate Windows and Views.

00:06:44.790 --> 00:06:53.090
And I use that word very specifically because when you
see the half line of code it takes, that's ridiculous.

00:06:53.089 --> 00:06:59.469
The other thing we're going to learn
about is how to create and use views

00:06:59.470 --> 00:07:02.720
that are backed by these Core Animation layers.

00:07:02.720 --> 00:07:08.620
And we'll get to that, and that
we'll find is a whole line of code.

00:07:08.620 --> 00:07:16.509
So with this one-and-a-half lines of code you're
able to take all that underpinning of OpenGL

00:07:16.509 --> 00:07:21.259
and then Core Animation built on top of
it, and have that in your application.

00:07:21.259 --> 00:07:25.339
And then we have an extraordinary short presentation.

00:07:25.339 --> 00:07:31.060
But these will get you all of the
default animations that we have built in.

00:07:31.060 --> 00:07:34.019
However, there's a lot more that you can do.

00:07:34.019 --> 00:07:37.439
And so we're going to spend the rest of the
time, or a good chunk of the rest of the time,

00:07:37.439 --> 00:07:41.079
talking about creating and using custom animations.

00:07:41.079 --> 00:07:47.599
So, keyframes following a path, grouping
animations, using Core Image filters, and transitions.

00:07:47.600 --> 00:07:56.010
Finally, we're going talk about mixing various content types
in your application, and then we'll do some usage tips.

00:07:56.009 --> 00:08:01.310
So we're already, what, a few minutes
into an animation session without a demo.

00:08:01.310 --> 00:08:04.160
So I think we need to rectify that immediately.

00:08:04.160 --> 00:08:09.890
And so I'm going have Troy Stephens, a coworker
of mine on the Cocoa frameworks team, come up,

00:08:09.889 --> 00:08:13.389
and he's going to show a little app called Cocoa Shuffle.

00:08:13.389 --> 00:08:20.269
Now, in iTunes, there's a lovely feature called Party
Shuffle, which is kind of this never-ending play list.

00:08:20.269 --> 00:08:24.930
And we thought that using the new Cocoa
Scripting Bridge that let's us talk to iTunes,

00:08:24.930 --> 00:08:32.889
we would write a small application that more visually
demonstrates what songs are coming up in your shuffle.

00:08:32.889 --> 00:08:40.899
So let's take a look, Troy.

00:08:40.899 --> 00:08:46.750
So this is showing us essentially what
is currently playing is in the front.

00:08:46.750 --> 00:08:49.909
And then what's going on is in the back.

00:08:49.909 --> 00:08:51.919
And I think we need some sound.

00:08:51.919 --> 00:08:53.289
But that's okay.

00:08:53.289 --> 00:08:55.679
It's an animation talk after all.

00:08:55.679 --> 00:08:56.979
We can just imagine the sound.

00:08:56.980 --> 00:09:03.180
You know, we'll just put it away.

00:09:03.179 --> 00:09:08.469
I think everybody believes that
the Foo Fighters know how to sing.

00:09:08.470 --> 00:09:09.600
And we'll get back here.

00:09:09.600 --> 00:09:12.170
And, of course, we can advance along.

00:09:12.169 --> 00:09:14.909
And as we do, the new item pops up on the top.

00:09:14.909 --> 00:09:17.419
And we get a new first song.

00:09:17.419 --> 00:09:18.849
And let's do it in slow motion.

00:09:18.850 --> 00:09:20.250
You can look at the pop at the top.

00:09:20.250 --> 00:09:21.639
Because we're going to show you how to do that.

00:09:21.639 --> 00:09:25.009
Where it pops in opacity, springs back,

00:09:25.009 --> 00:09:27.149
following a path along.

00:09:27.149 --> 00:09:35.039
Of course, at this point I was going say, boy, that's
loud Todd -- or Troy -- would you please pause it?

00:09:35.039 --> 00:09:40.189
And when we pause, we're able to
use a background filter to blur.

00:09:40.190 --> 00:09:43.780
And again, this all being done with standard NSViews.

00:09:43.779 --> 00:09:45.339
Those are image views.

00:09:45.340 --> 00:09:48.590
This is just an NSView with a box and a text field in it.

00:09:48.590 --> 00:09:51.100
And we're adding animation to it.

00:09:51.100 --> 00:09:53.269
So let's unpause.

00:09:53.269 --> 00:09:56.179
And in fact, we've also added tool tips to each item,

00:09:56.179 --> 00:10:03.149
because from the album you might not know exactly what
the song is that's coming up, and contextual menus.

00:10:03.149 --> 00:10:08.490
Let's try one of those contextual menus.

00:10:08.490 --> 00:10:09.430
There we go.

00:10:09.429 --> 00:10:16.019
And again, it's as easy as setting the tool tip
and setting the menu on a standard NSImage view.

00:10:16.019 --> 00:10:19.929
Now we might like this pattern, but
we might want another path to follow.

00:10:19.929 --> 00:10:22.769
So we added a few presets.

00:10:26.669 --> 00:10:32.039
But then we figured, you know what,
sometimes the presets aren't what you want.

00:10:32.039 --> 00:10:41.799
You may just want to edit the path yourself.

00:10:41.799 --> 00:10:43.039
( Cheering )

00:10:43.039 --> 00:10:45.849
>> And so we add a little Bezier path editor in here.

00:10:45.850 --> 00:10:49.990
And of course, it's all live, it's
all advancing right from iTunes.

00:10:49.990 --> 00:10:52.610
You see it moving in the background there.

00:10:55.450 --> 00:11:01.250
And that's a little bit of what
we can do with animation in Cocoa.

00:11:01.250 --> 00:11:02.700
Thank you very much, Troy.

00:11:02.700 --> 00:11:07.040
( Applause )

00:11:07.039 --> 00:11:13.079
>> I would also like to thank Kevin
Perry, our intern who did a lot of work

00:11:13.080 --> 00:11:16.310
on that demo over the last week-and-a-half or so.

00:11:16.309 --> 00:11:21.149
All right, so we hear a lot about animation.

00:11:21.149 --> 00:11:25.970
What I want to do is kind of frame things in terms
of what are the different use case scenarios.

00:11:25.970 --> 00:11:30.980
Who are the major players as you're thinking
about adding animation to your Cocoa app.

00:11:30.980 --> 00:11:36.170
So we're going to be talking primarily
about things happening in AppKit.

00:11:36.169 --> 00:11:41.159
Specifically NSViews and some animation API that we've added.

00:11:41.159 --> 00:11:47.039
And then underneath AppKit is this
wonderful graphics framework, Core Animation.

00:11:47.039 --> 00:11:53.610
And out of all of Core Animation the things we're
going be talking and referencing today are layers,

00:11:53.610 --> 00:11:58.909
as well as animations which help
us define custom animations.

00:11:58.909 --> 00:12:01.379
So let's focus first on NSView,

00:12:01.379 --> 00:12:04.629
which is not new to the party of Leopard.

00:12:04.629 --> 00:12:07.370
We've had it for quite a while.

00:12:07.370 --> 00:12:10.830
And NSView provides a lot of functionality.

00:12:10.830 --> 00:12:18.220
It has all of the Cocoa controls are NSView
subclass, or NSControl subclasses.

00:12:18.220 --> 00:12:25.410
Accessibility support, printing, complex event handling,
dealing with the responder change, drawing the focus rings,

00:12:25.409 --> 00:12:30.029
handling full keyboard navigation,
dealing with drag and drop.

00:12:30.029 --> 00:12:35.399
We saw tool tips and contextual
menus, cursor reps, tracking reps.

00:12:35.399 --> 00:12:40.899
There is a lot of interface that's part of NSView.

00:12:40.899 --> 00:12:46.639
A lot of the interactive experience
that you want to maintain.

00:12:46.639 --> 00:12:48.340
You want to take advantage of that.

00:12:48.340 --> 00:12:51.970
You don't want to write your own text field from scratch.

00:12:51.970 --> 00:12:54.649
It doesn't make a lot of sense.

00:12:54.649 --> 00:13:01.590
So what we are doing is taking all of these
views and making them animatible.

00:13:01.590 --> 00:13:07.000
So the second thing we've added -- or the first
thing we've added in AppKit, is an animation API.

00:13:07.000 --> 00:13:11.450
And the first scenario might be just basic common animation.

00:13:11.450 --> 00:13:12.610
I have a window.

00:13:12.610 --> 00:13:15.560
I need to resize it, and I want that to animate.

00:13:15.559 --> 00:13:21.559
I want to move a view from point A to point
B. And to do this we don't necessarily even need

00:13:21.559 --> 00:13:24.319
to bring all of Core Animation into the picture.

00:13:24.320 --> 00:13:32.370
We can simply use the existing AppKit classes and the
new animation API to have some basic animations occur.

00:13:32.370 --> 00:13:40.299
However, scenario 2 would be using
what we call layer-backed views.

00:13:40.299 --> 00:13:42.259
We'll talk a little more in a moment.

00:13:42.259 --> 00:13:49.919
But again, you're using the AppKit API, but behind the
scenes we've using the power of Core Animation for all

00:13:49.919 --> 00:13:52.620
of the drawing, rendering, and animating.

00:13:52.620 --> 00:13:59.539
As well, you can continue using those AppKit
animation APIs just as you had in the first scenario.

00:13:59.539 --> 00:14:06.039
But now it's bringing all of Core
Animation to bear in the background.

00:14:06.039 --> 00:14:08.029
Scenario 3.

00:14:08.029 --> 00:14:14.419
Once we've done these default animations,
you may want to do custom animations similar

00:14:14.419 --> 00:14:18.779
to what we saw in that Cocoa Shuffle demonstration.

00:14:18.779 --> 00:14:26.870
And in this case, you would be using in addition to
the AppKit APIs, you would also be using CAAnimation

00:14:26.870 --> 00:14:33.659
and its friends, its subclasses, in the Core
Animation framework to help define those animations.

00:14:33.659 --> 00:14:35.839
And there's a fourth scenario.

00:14:35.840 --> 00:14:43.460
Which is sometimes you may just want to take one NSView
and then do all of your animating down in Core Animation.

00:14:43.460 --> 00:14:48.450
Of these four scenarios, the first three
we'll be talking about in this session.

00:14:48.450 --> 00:14:53.110
The next session will be focused a
great deal on the fourth scenario.

00:14:53.110 --> 00:15:02.279
Okay. So as we talk about animations --
and let's get to getting things done --

00:15:02.279 --> 00:15:04.839
we're going to first talk about some fundamentals.

00:15:04.840 --> 00:15:07.530
And then we'll get into custom animations.

00:15:07.529 --> 00:15:10.529
So the fundamentals.

00:15:10.529 --> 00:15:16.120
In general, animation is fairly straight forward.

00:15:16.120 --> 00:15:17.600
Objects have properties.

00:15:17.600 --> 00:15:23.120
We change the value of the property, and we
want that object to then change gradually

00:15:23.120 --> 00:15:26.370
over time, rather than jumping to the new value.

00:15:26.370 --> 00:15:33.899
Now in Cocoa, we have accessor methods we have been
using for quite a long while to set new property values.

00:15:33.899 --> 00:15:37.629
So we don't want setFrame to suddenly start moving things

00:15:37.629 --> 00:15:41.860
around where developers have not
been expecting that previously.

00:15:41.860 --> 00:15:48.570
So we needed a mechanism for setting a new
property value, as well as triggering an animation.

00:15:52.429 --> 00:15:55.069
And we use what we call the Animator.

00:15:55.070 --> 00:15:58.890
And here's that half a line of code I was talking about.

00:15:58.889 --> 00:16:05.519
So Views and Windows have animators, instead of
talking directly to the view or directly to the window

00:16:05.519 --> 00:16:08.409
and telling it to set its frame, for instance.

00:16:08.409 --> 00:16:13.189
Instead you talk to the Animator
and tell it to set the frame.

00:16:13.190 --> 00:16:21.050
That will trigger the animation as well as set
that value in the view that it's a proxy for.

00:16:21.049 --> 00:16:23.089
Now these animators are very handy.

00:16:23.090 --> 00:16:29.160
You can take one and you can hand it in to any
API that would normally take the original object.

00:16:29.159 --> 00:16:35.730
And any message that isn't animated will just
pass it through directly to the viewer window.

00:16:39.429 --> 00:16:45.009
So with that half line of code you
can actually get a great deal done.

00:16:45.009 --> 00:16:51.230
For all animatible properties, there
are already built-in default animations.

00:16:51.230 --> 00:16:54.930
There are linear animations going from one value to another.

00:16:54.929 --> 00:16:59.509
They all have a default duration of a
quarter second, so they're nice and snappy.

00:16:59.509 --> 00:17:04.049
And by default, they're all grouped
into one event loop cycle.

00:17:04.049 --> 00:17:09.779
So in the course of an event you happen
to move or change a few different items,

00:17:09.779 --> 00:17:12.399
they won't start and stop at various different times.

00:17:12.400 --> 00:17:16.509
They will all be synchronized to the event cycle.

00:17:16.509 --> 00:17:22.539
And this is all happening with that half a line of code.

00:17:22.539 --> 00:17:26.539
Now you might -- though -- want to change some items.

00:17:26.539 --> 00:17:30.470
And one that you may want to change
specifically is the duration.

00:17:30.470 --> 00:17:37.509
And we've introduced a new class in
Leopard called the NSAnimationContext.

00:17:37.509 --> 00:17:42.369
And essentially, we begin a context or
beginning a grouping and end a grouping.

00:17:42.369 --> 00:17:46.629
Anything within there will be performed at the same time.

00:17:46.630 --> 00:17:50.570
And we can also use that context to set the duration.

00:17:50.569 --> 00:17:56.099
And in fact this is a very handy way to get that
slow motion effect when you hold the shift key down.

00:17:56.099 --> 00:17:59.969
So you can wow people with the slow-mo kind of feature.

00:17:59.970 --> 00:18:05.910
And we'll show you how to do that
in just a couple of minutes.

00:18:05.910 --> 00:18:11.320
So I want to just emphasize that the
Animator and the animation context --

00:18:11.319 --> 00:18:14.579
they're general additions to Cocoa for animating.

00:18:14.579 --> 00:18:22.250
So regardless of how you're rendering the content,
for the basic geometry of Views and Windows,

00:18:22.250 --> 00:18:32.069
as well as the Window's alphaValue, you can use just
Animator and the animation context and get lovely results.

00:18:32.069 --> 00:18:39.079
However, we do want to take advantage
of that Core Animation underneath us.

00:18:39.079 --> 00:18:43.389
So let's talk a little bit about that.

00:18:43.390 --> 00:18:47.410
Core Animation layers are at the core of Core Animation.

00:18:47.410 --> 00:18:50.850
They are analogous to views, the rectangular areas.

00:18:50.849 --> 00:18:54.449
They have a hierarchy or a tree of sub layers.

00:18:54.450 --> 00:18:58.120
They're buffering their context per layer.

00:18:58.119 --> 00:19:03.929
We can do all sorts of nice visual effects, like applying
filters, like the blur filter you saw a little earlier,

00:19:03.930 --> 00:19:10.080
transitions, shadows, and masking, combining context types.

00:19:10.079 --> 00:19:12.629
So we want to use these layer things.

00:19:12.630 --> 00:19:22.050
In AppKit, we call using a layer a layer
-- to back a view, a layer-backed view.

00:19:22.049 --> 00:19:28.079
So here I have stylized segmented control and an
image view and the little blue is just representing

00:19:28.079 --> 00:19:30.750
that they're part of AppKit; they're AppKit views.

00:19:30.750 --> 00:19:36.670
And when I'm making a layer-backed view, essentially
what I am doing is literally creating these layers

00:19:36.670 --> 00:19:41.610
in the Core Animation context underneath
the Core Animation framework underneath.

00:19:41.609 --> 00:19:47.019
And then the content, instead of being
drawn where it typically is for a view,

00:19:47.019 --> 00:19:52.509
it is now drawn into the layer and cached there.

00:19:52.509 --> 00:19:55.029
And so we call these layer-backed views.

00:19:55.029 --> 00:19:58.359
It gives us those per-view content buffering.

00:19:58.359 --> 00:20:02.179
In addition, some of the more -- some of the visual effects,

00:20:02.180 --> 00:20:06.150
or all of the visual effects of
Core Animation come into play.

00:20:06.150 --> 00:20:12.750
So in addition to the content buffering,
we also can apply Core Image effects.

00:20:12.750 --> 00:20:15.609
Like here we applied a glass filter to the image.

00:20:15.609 --> 00:20:19.500
We changed the alpha value of the segmented control.

00:20:19.500 --> 00:20:25.140
And we can apply them and just have
them sit, or we can animate them.

00:20:25.140 --> 00:20:29.410
So in this case we're just slowly coming back.

00:20:29.410 --> 00:20:35.290
Core Animation gives us asynchronous
animation happening on another thread.

00:20:35.289 --> 00:20:41.859
As well as we pick up the ability to do transition
animations when we're switching subviews,

00:20:41.859 --> 00:20:44.919
and we can combine different content types.

00:20:44.920 --> 00:20:51.039
So there's a lot that we can pick up
from an NSView if it is layer-backed.

00:20:51.039 --> 00:20:53.480
So how do we make this happen?

00:20:56.950 --> 00:21:00.630
We call this line of code.

00:21:00.630 --> 00:21:03.980
[view setWantsLayer: YES];

00:21:03.980 --> 00:21:09.009
And it really didn't strike -- I've been working with this
API -- and it really didn't strike me until I was sitting

00:21:09.009 --> 00:21:14.529
in the Mac OS X State of the Union yesterday and Bertrand,
and all they're talking about,

00:21:14.529 --> 00:21:18.069
you know, going on at the Ope GL layer and
all the work they've been doing down there,

00:21:18.069 --> 00:21:22.460
and the work they've been doing in the Core Animation
layer, and all the work that's been going on --

00:21:22.460 --> 00:21:27.900
and the full magnitude didn't strike me that there's
all this work going on and for me to get that to happen

00:21:27.900 --> 00:21:33.690
with my view hierarchy, I basically have one
line of code where I say, yeah, I want that.

00:21:33.690 --> 00:21:37.340
And I was like, that's kind of amazing.

00:21:37.339 --> 00:21:43.740
And in fact, if we really don't want to write that one
of code we also do have a check box in InterfaceBuilder.

00:21:43.740 --> 00:21:45.460
( Laughter )

00:21:45.460 --> 00:21:52.210
>> Which puts us back down to a half line of code.

00:21:52.210 --> 00:22:00.160
Great. So as sometimes happens, that
one little flag has big effects.

00:22:00.160 --> 00:22:02.450
So what happens when we do that?

00:22:02.450 --> 00:22:03.289
Check that off?

00:22:03.289 --> 00:22:07.190
A lot's going on underneath even
though we just made a little tweak.

00:22:07.190 --> 00:22:13.180
So AppKit is mirroring that entire
view subtree into a tree of layers.

00:22:13.180 --> 00:22:20.740
However, from your standpoint as the creator of a view,
-drawRect is still being called when drawing needs to be done.

00:22:20.740 --> 00:22:27.250
You still use setNeedsDisplay, and it passes -- does
the appropriate thing in the Core Animation framework

00:22:27.250 --> 00:22:31.740
to make sure that that layer that's
backing your view does the right thing.

00:22:31.740 --> 00:22:39.519
And view properties are basically as you change them
they're sent down to the layer as layer properties.

00:22:39.519 --> 00:22:47.339
And then if there are non-layer properties that we've
made animatible, AppKit will handle that animation.

00:22:47.339 --> 00:22:54.449
This last bullet point, rather than trying to explain
it, let's just talk about it, looking at a picture.

00:22:54.450 --> 00:22:56.930
So we have a view hierarchy.

00:22:56.930 --> 00:23:02.860
And that WantsLayer very much expresses --
not necessarily that your preference is going

00:23:02.859 --> 00:23:06.029
to be respected or not respected in this sense

00:23:06.029 --> 00:23:12.769
When I say setWantaLayer on any one particular
view, that view and all of its subviews

00:23:12.769 --> 00:23:15.930
in the view hierarchy are backed by a layer.

00:23:15.930 --> 00:23:20.900
And this is true, then, if say higher up
in the hierarchy somebody wanted a layer.

00:23:20.900 --> 00:23:23.720
Then from that point on down the tree.

00:23:23.720 --> 00:23:26.799
There it is.

00:23:26.799 --> 00:23:29.700
We would see backed by layer.

00:23:29.700 --> 00:23:35.390
However, if saying that first view decided,
no, I no longer want to be backed by a layer,

00:23:35.390 --> 00:23:38.940
it's already part of a hierarchy that does want a layer.

00:23:38.940 --> 00:23:42.130
So it retains its layered backing.

00:23:44.589 --> 00:23:51.899
Now another nice addition to InterfaceBuilder
is that when you're looking at the animations tab

00:23:51.900 --> 00:23:57.540
for any selected item it will show you the entire
view hierarchy, and it will show you if anywhere

00:23:57.539 --> 00:24:01.859
in the view hierarchy in Interface
Builder somebody wants a layer.

00:24:01.859 --> 00:24:03.979
And I think that's a very handy feature.

00:24:03.980 --> 00:24:10.240
Okay, I wanted to bring up one
other point about layered backing.

00:24:10.240 --> 00:24:15.859
Which is that it certainly is wonderful
and extraordinarily powerful.

00:24:15.859 --> 00:24:23.089
But if I have a preference paying with check boxes
and stuff and it doesn't usually animate very much,

00:24:23.089 --> 00:24:27.009
it can be quite overkill to make
every single thing layer-backed,

00:24:27.009 --> 00:24:29.809
because we're caching all of that content, right?

00:24:29.809 --> 00:24:31.349
In video memory.

00:24:31.349 --> 00:24:41.939
And so it can be a very nice strategy if you have typically
boring views that occasionally do something exciting

00:24:41.940 --> 00:24:45.690
and animate, to toggle layer-backed mode.

00:24:45.690 --> 00:24:50.150
So turn it on and they all get backed by a layer.

00:24:50.150 --> 00:24:54.090
Have the animation occur, change
the animation using the Animator.

00:24:54.089 --> 00:24:56.740
And then turn layer-backed mode off.

00:24:56.740 --> 00:25:00.009
So that those resources can get reclaimed.

00:25:00.009 --> 00:25:02.539
All right.

00:25:02.539 --> 00:25:04.779
There we go.

00:25:04.779 --> 00:25:13.079
I also wanted to point out that as a -- what's
the word I'm looking for -- as a side effect --

00:25:13.079 --> 00:25:19.649
not even a side effect, asa direct result of being
layer-backed, NSViews pick up some new visual properties.

00:25:19.650 --> 00:25:25.150
alphaValue, shadow, as well as the
ability to apply content -- excuse me --

00:25:25.150 --> 00:25:30.780
Core Image filters to the content as well
as the background in a compositing filter.

00:25:30.779 --> 00:25:35.039
In addition, you can set all of
these up in InterfaceBuilder.

00:25:35.039 --> 00:25:44.950
Okay. I'm going to bring Troy back up, and
we're going to demo using default animations.

00:25:54.930 --> 00:25:57.539
Everybody likes this Shuffle.

00:25:57.539 --> 00:26:04.599
Okay. So the first thing we have here, it's a very simple
application, and I believe if this is not available already

00:26:04.599 --> 00:26:08.500
as sample code, it should be very shortly after the session.

00:26:08.500 --> 00:26:11.789
It's a simple Cocoa application, and we're just going

00:26:11.789 --> 00:26:18.569
to first move this NSImageView the
old fashioned way using setFrameOrgin.

00:26:18.569 --> 00:26:21.409
And it jumps from spot to spot.

00:26:21.410 --> 00:26:22.900
We can even jump it back.

00:26:22.900 --> 00:26:24.210
And now let's animate it.

00:26:24.210 --> 00:26:26.309
Because that is pretty jumpy.

00:26:26.309 --> 00:26:29.769
So take a look at the code.

00:26:29.769 --> 00:26:39.129
And in the spot where we do that, moveView,
the imageView setFrameOrigin we're going to --

00:26:39.130 --> 00:26:45.130
instead of talking to the view directly, add
that half line of code and talk to the Animator.

00:26:50.130 --> 00:26:51.990
Then we'll recompile.

00:26:51.990 --> 00:26:57.990
And now we've added animation.

00:26:57.990 --> 00:27:04.589
( Applause )

00:27:04.589 --> 00:27:08.869
>> Now if we switch to the medium
size, I have different size views here.

00:27:08.869 --> 00:27:12.159
And then we'll try large.

00:27:12.160 --> 00:27:13.360
Go back to medium.

00:27:13.359 --> 00:27:18.859
You'll notice that we're resizing the window as we go.

00:27:18.859 --> 00:27:23.519
And we're also, I believe, getting a cross-data effect.

00:27:23.519 --> 00:27:33.779
Let's try it with the shift key down.

00:27:33.779 --> 00:27:41.009
Ah. We were not getting a cross-fade
effect because we were not wanting a layer.

00:27:41.009 --> 00:27:47.339
When you run into a situation where you're not seeing the
animation that you're expecting, because it does happen,

00:27:47.339 --> 00:27:55.099
the first thing to check is, is it because I forget to make
myself layer backed? Now that we do want to layer,

00:27:55.099 --> 00:27:56.909
we're getting that lovely cross-data effect.

00:27:56.910 --> 00:28:00.600
We try it with the shift key so
that we get that slow-mo effect.

00:28:03.650 --> 00:28:06.920
And so we saw the line of code that we wanted to layer.

00:28:06.920 --> 00:28:11.640
Now let's take a look at the line of code that is both
changing the size of the window and the line of code.

00:28:11.640 --> 00:28:14.770
that is doing the switching of views.

00:28:14.769 --> 00:28:18.359
So back in Xcode in switchView

00:28:18.359 --> 00:28:24.089
Most of the code is just figuring out
what the new and the old view are based

00:28:24.089 --> 00:28:27.549
on what was clicked, figuring out the new frame.

00:28:27.549 --> 00:28:30.349
But then the core of the code is there.

00:28:30.349 --> 00:28:33.889
We begin an ending animation context grouping.

00:28:33.890 --> 00:28:39.990
We only need to do this because we want to
implement this shift key slow-mo effect.

00:28:39.990 --> 00:28:43.190
We do that in two lines of code
where we check for the shift key.

00:28:43.190 --> 00:28:47.340
And if so, we bump the duration up to a second.

00:28:47.339 --> 00:28:56.379
And then the core of the work is we tell the contentView
to replace its subview, the old view with the new view.

00:28:56.380 --> 00:29:01.390
But instead of talking directly to
the view, we talk to its Animator.

00:29:01.390 --> 00:29:06.900
Similarly, when we resize the frame of the
window we don't talk to the window directly.

00:29:06.900 --> 00:29:09.980
We just talk to its Animator.

00:29:09.980 --> 00:29:14.710
And so in that little method we're able
to get that very common effect that we see

00:29:14.710 --> 00:29:18.049
with the animated resize and the subview swapping.

00:29:18.049 --> 00:29:21.889
Thank you very much, Troy.

00:29:21.890 --> 00:29:27.009
(Applause)

00:29:27.009 --> 00:29:36.079
>> So the point -- or a point I would
like to make at this point is that yes,

00:29:36.079 --> 00:29:39.409
it's a line of code and half a line of code.

00:29:39.410 --> 00:29:46.880
Really, when it comes to building user interfaces in
general, but animated user interfaces in particular,

00:29:46.880 --> 00:29:52.930
a lot of the work -- a lot of the time
is spent deciding what you want to do.

00:29:52.930 --> 00:29:57.029
And what we're trying to do with the API
is make it such that it's not the API

00:29:57.029 --> 00:30:00.069
that is the thing that you have to spend the time on.

00:30:00.069 --> 00:30:06.179
It's really working on the usability and
making sure that it's an effect that looks nice

00:30:06.180 --> 00:30:09.940
and that people would want to see over and over again.

00:30:09.940 --> 00:30:16.200
With this line-and-a-half of code you can get
a tremendous amount done in your application.

00:30:16.200 --> 00:30:21.220
However, sometimes we would like to do custom animations.

00:30:21.220 --> 00:30:26.009
So let's talk about that a little bit.

00:30:26.009 --> 00:30:32.190
So the two things we're going to talk about next are, first,

00:30:32.190 --> 00:30:36.950
defining custom animations, and then
how do we set these animations.

00:30:36.950 --> 00:30:44.440
We're going to look at a few examples that are kind of
little chunks of the things we've seen already so far.

00:30:44.440 --> 00:30:46.080
So defining animations.

00:30:46.079 --> 00:30:50.929
We use an expressive set of classes
from the Core Animation framework.

00:30:50.930 --> 00:30:55.180
Rather than reinventing a new set
of animation description classes,

00:30:55.180 --> 00:30:59.930
we're using the wonderful set that Core Animation has added.

00:30:59.930 --> 00:31:04.310
And we'll go through each of these in a moment or two.

00:31:04.309 --> 00:31:07.919
But then once we have created an animation,
how do we set it?

00:31:07.920 --> 00:31:11.960
And it's a very -- well, I'll tell you.

00:31:11.960 --> 00:31:14.750
First, you create the animation.

00:31:14.750 --> 00:31:19.599
The next thing we do is add it to a
dictionary, the key in that dictionary is --

00:31:19.599 --> 00:31:26.549
or the key in that dictionary is the name of the
property that you want this animation to be triggered for.

00:31:26.549 --> 00:31:32.039
So, in this case, if frameOrigin was
set, that animation would be triggered.

00:31:32.039 --> 00:31:42.299
And then finally we add that dictionary to the views
and -- we set that dictionary as the views animations.

00:31:42.299 --> 00:31:44.899
Now let's take a look at it in code.

00:31:44.900 --> 00:31:46.690
Create the animation.

00:31:46.690 --> 00:31:49.120
In this case, a basic animation.

00:31:49.119 --> 00:31:50.889
Create a dictionary.

00:31:50.890 --> 00:31:55.850
In this case, with one animation, one key frameOrigin.

00:31:55.849 --> 00:31:59.079
And then set that dictionary on the view or window.

00:31:59.079 --> 00:32:05.679
After we've done that, at any point in
the future, somebody talks to that view,

00:32:05.680 --> 00:32:09.750
or that view's Animator and sets the frameOrigin.

00:32:09.750 --> 00:32:13.670
That key is going to match up with
the key in the dictionary,

00:32:13.670 --> 00:32:20.870
find that animation that we have added, and it will
execute that custom animation rather than the default.

00:32:20.869 --> 00:32:23.699
We'll see this pattern a lot.

00:32:26.200 --> 00:32:36.090
So in dealing with setting up these custom animations,
Core Animation classes -- these are the concrete classes,

00:32:36.089 --> 00:32:42.970
or subclasses of CAAnimation that we'll be dealing
with, as well as a MediaTimingFunction to be able

00:32:42.970 --> 00:32:47.100
to mix up or change up the timing on things.

00:32:47.099 --> 00:32:50.719
BasicAnimation goes from one value to another.

00:32:50.720 --> 00:32:51.309
Keyframe.

00:32:51.309 --> 00:32:54.250
We can use a path similar to what we did in the Shuffle.

00:32:54.250 --> 00:32:58.690
Or we can go from one value to another.

00:32:58.690 --> 00:33:02.799
A Group allows us to group a bunch of animations together.

00:33:02.799 --> 00:33:08.609
And finally, a Transition as we move
between subviews to define visual effects.

00:33:08.609 --> 00:33:10.009
All right.

00:33:10.009 --> 00:33:12.629
Let's take a look at a little animation.

00:33:12.630 --> 00:33:17.440
And let's take a look at it in slow motion.

00:33:17.440 --> 00:33:22.340
This is animation along the path
using a single keyframe animation.

00:33:22.339 --> 00:33:26.369
So how do we do this?

00:33:27.890 --> 00:33:32.700
We use the CAKeyframeAnimation class.

00:33:32.700 --> 00:33:34.150
We create one.

00:33:34.150 --> 00:33:40.690
We create a CGPath to describe
the path that will be followed.

00:33:40.690 --> 00:33:44.039
We set the path in the animation.

00:33:44.039 --> 00:33:46.309
And then we release the path.

00:33:46.309 --> 00:33:51.190
I would like to point out that in this case
you'll notice that we're just making an animation.

00:33:51.190 --> 00:33:56.320
We're not tying it at the moment to
any particular key or property name.

00:33:56.319 --> 00:34:01.319
And then once we create it, we're going to set it.

00:34:01.319 --> 00:34:03.619
Again, we make that dictionary.

00:34:03.619 --> 00:34:07.409
We hand in that custom animation.

00:34:07.410 --> 00:34:10.090
We do it for the key, in this case frameOrigin

00:34:10.090 --> 00:34:13.530
And then set it in the animations dictionary on the view.

00:34:13.530 --> 00:34:23.040
Then at any point going through the Animator, when that
frameOrigin is set, our custom animation will be triggered.

00:34:26.039 --> 00:34:29.619
Now let's look at a more complex one.

00:34:29.619 --> 00:34:32.529
That pop animation and there
are two things happening here.

00:34:32.530 --> 00:34:34.310
We'll play it in slow-mo.

00:34:34.309 --> 00:34:41.739
There's the opacity going from zero to 1, as well as
the size going from zero to larger than the end result,

00:34:41.739 --> 00:34:44.079
and then popping back.

00:34:51.190 --> 00:34:55.650
So to put this together we end up using an AnimationGroup.

00:34:55.650 --> 00:35:02.889
And in this case we're doing a basic animation,
which is the alphaValue going from zero to 1.

00:35:02.889 --> 00:35:09.339
And we're doing a KeyframeAnimation that
scales the frame up and then back a little.

00:35:09.340 --> 00:35:13.539
Then we're grouping them all together so
that they all happen at the same time.

00:35:13.539 --> 00:35:19.969
So that's what's going on with the opacity or the
alphaValue going from zero to 1.

00:35:19.969 --> 00:35:25.409
And then more complex is the Keyframe animation,

00:35:25.409 --> 00:35:30.699
where we're starting at a particular
rect, we're popping up to a size,

00:35:30.699 --> 00:35:33.969
and that's taking 80 percent of the animation.

00:35:33.969 --> 00:35:37.169
And then the remaining 20 percent is shrinking back down.

00:35:37.170 --> 00:35:43.019
So creating the basic animation is very, very simple.

00:35:43.019 --> 00:35:48.759
Create the basic animation. Now
in this case the basic animation

00:35:48.760 --> 00:35:52.960
and the keyframe animation are
inside of a bigger animation.

00:35:52.960 --> 00:35:58.710
So we need to specify what property
this animation is actually effecting.

00:35:58.710 --> 00:36:01.369
So we use animationWithKeyPath.

00:36:01.369 --> 00:36:03.440
And this will be effecting the alphaValue.

00:36:03.440 --> 00:36:07.730
And then we set the from value and the to value.

00:36:07.730 --> 00:36:12.539
The keyframe's a bit longer.

00:36:12.539 --> 00:36:14.300
Then we create it.

00:36:14.300 --> 00:36:19.650
We can also call setKeyPath to do so after we create it.

00:36:19.650 --> 00:36:25.800
We create the values in array of -- in this case
rectangles that we're going to set as the frame.

00:36:25.800 --> 00:36:32.680
And by default, those keyframes will happen at
equal times along the period or along the animation.

00:36:32.679 --> 00:36:36.419
But we want them to happen slightly different times.

00:36:36.420 --> 00:36:40.789
So we will provide a set of times
or an array of times between zero

00:36:40.789 --> 00:36:48.119
and 1 that map to the rectangles for the keyframes.

00:36:50.869 --> 00:36:53.489
So we've created those two animations.

00:36:53.489 --> 00:36:57.979
Now the animation group -- we create the group.

00:36:57.980 --> 00:36:59.070
We set the animations.

00:36:59.070 --> 00:37:01.910
It's just an array that goes into the group.

00:37:01.909 --> 00:37:07.739
And then as we might imagine, we create
the ever-popular animations dictionary.

00:37:07.739 --> 00:37:09.599
We set the dictionary.

00:37:09.599 --> 00:37:13.519
And now, in this case, we're setting
in the dictionary the key alpha.

00:37:13.519 --> 00:37:19.670
Whenever the alpha value of that view happens
to be set, this animation will take place.

00:37:19.670 --> 00:37:26.360
The final custom piece we'll look at are transitions.

00:37:26.360 --> 00:37:29.870
And this happens when subviews change.

00:37:29.869 --> 00:37:34.690
That was a -- a basic, built-in Core Animation transition.

00:37:34.690 --> 00:37:40.220
We can also use any of the transitions
that are provided in Core Image.

00:37:40.219 --> 00:37:43.289
This is the photocopying transition.

00:37:43.289 --> 00:37:45.929
We'll take a look at doing both of those.

00:37:45.929 --> 00:37:49.299
It's just loving photocopying, isn't it?

00:37:50.429 --> 00:37:51.639
There we go.

00:37:51.639 --> 00:37:54.409
So a built-in Core Animation transition.

00:37:54.409 --> 00:37:58.139
We make the transition.

00:37:58.139 --> 00:38:00.259
And we set its type and subtype.

00:38:00.260 --> 00:38:04.030
And those are -- there are a number defining Core Animation.

00:38:04.030 --> 00:38:07.610
And then from there it's that same old story.

00:38:07.610 --> 00:38:10.220
Put it in the dictionary with the particular key.

00:38:10.219 --> 00:38:12.139
In this case subviews.

00:38:12.139 --> 00:38:14.230
Set it in the enclosingView, right?

00:38:14.230 --> 00:38:19.260
Because it's the one whose subviews are
changing that needs to have this animation set.

00:38:19.260 --> 00:38:22.540
And then any time you change the subviews

00:38:22.539 --> 00:38:31.309
of that particular view using the Animator,
it's going to use this particular transition.

00:38:31.309 --> 00:38:39.409
Now, if we want to use a Core Image transition,
the only difference here is that we use --

00:38:39.409 --> 00:38:44.159
we create a Core Image transition
filter and set it how we'd like.

00:38:44.159 --> 00:38:49.619
And then when we create the Core
Animation transition animation,

00:38:49.619 --> 00:39:01.500
we set the filter, and then do all the same things.

00:39:01.500 --> 00:39:08.920
So at least for me the -- what I see
when I'm doing custom animations is

00:39:08.920 --> 00:39:18.139
that it is very much deciding what it is you that want to
happen, and then those expressive classes make it very simple

00:39:18.139 --> 00:39:22.599
to tweak what's going on and kind
of play with what's going on,

00:39:22.599 --> 00:39:24.319
and also just not get in your way.

00:39:24.320 --> 00:39:27.280
It's a fairly straight-forward methodology.

00:39:27.280 --> 00:39:31.430
Now what if you want to create some
of your own animatible properties?

00:39:31.429 --> 00:39:38.419
Before we talk about that I just
want to point out that NSView

00:39:38.420 --> 00:39:43.639
and NSWindow do have a lot of
built-in animatible properties.

00:39:43.639 --> 00:39:50.079
So it may very well be that the thing you're
thinking you might need to customize already exists.

00:39:50.079 --> 00:39:52.639
So keep that in mind.

00:39:52.639 --> 00:39:58.329
And then also to really talk about
customize -- or making your own properties,

00:39:58.329 --> 00:40:07.170
we need a little bit more formal discussion
of the API that we've added in Leopard.

00:40:07.170 --> 00:40:12.289
That Animator that we've been talking to, and
that animations dictionary, the ability to set it

00:40:12.289 --> 00:40:16.800
and then retrieve it from a view or a window,
are actually part of another protocol.

00:40:16.800 --> 00:40:21.860
The NSAnimatiblePropertyContainer protocol.

00:40:21.860 --> 00:40:31.370
Essentially, it's possible to be adopted by any object
that has properties that could be animated.

00:40:31.369 --> 00:40:33.949
Now we're familiar with the first three, the Animator.

00:40:33.949 --> 00:40:36.599
We've been talking to him the whole time.

00:40:36.599 --> 00:40:38.339
Animations, getting and setting them.

00:40:38.340 --> 00:40:41.769
That dictionary to define custom animations.

00:40:41.769 --> 00:40:45.570
Let's talk about those last two.

00:40:45.570 --> 00:40:48.880
And so how are these animations triggered?

00:40:48.880 --> 00:40:53.250
You talk to the Animator and then it looks for an animation.

00:40:53.250 --> 00:40:57.989
So that animation for key method, you don't call it.

00:40:57.989 --> 00:41:02.759
The framework calls it to retrieve the
right animation for a particular key.

00:41:02.760 --> 00:41:06.460
And the first thing it will do
is look in a custom animation,

00:41:06.460 --> 00:41:11.059
or that animations dictionary if one is set on the object.

00:41:11.059 --> 00:41:19.469
If it's not set on the object it will call that classes
+defaultAnimationForKey to try to find an animation.

00:41:19.469 --> 00:41:24.159
And in fact, that's how all of the
default framework animations show up.

00:41:24.159 --> 00:41:31.019
And so when -animationForKey is called after you've talked
to the Animator, we'll first call that animations method

00:41:31.019 --> 00:41:34.429
to get whatever dictionary may have been set.

00:41:34.429 --> 00:41:41.730
If none is set or if there's no value in there for
that particular key, it will go on to ask the class

00:41:41.730 --> 00:41:49.030
for the default animation for that particular key.

00:41:49.030 --> 00:41:54.710
So that said, implementing a custom
property is largely a two-step process.

00:41:54.710 --> 00:41:57.480
First, define a custom property.

00:41:57.480 --> 00:42:01.809
It needs to be KVC compliant, KVC setter method.

00:42:01.809 --> 00:42:07.019
And also important to note that the setter
method should trigger needing display,

00:42:07.019 --> 00:42:10.340
or should tell the view that it needs to redisplay itself.

00:42:10.340 --> 00:42:19.730
And then second, provide a default animation for that
property by overriding +defaultAnimationForKey.

00:42:19.730 --> 00:42:26.789
Now once this is done, you can specify custom animations
and set them for that key in an animations dictionary.

00:42:26.789 --> 00:42:32.469
You can treat it pretty much like
any other animatible property.

00:42:32.469 --> 00:42:36.919
And AppKit for these properties
will be able to automatically,

00:42:36.920 --> 00:42:41.030
with a basic animation, interpret basic scalar types.

00:42:41.030 --> 00:42:44.410
So let's look at an example.

00:42:44.409 --> 00:42:47.299
Here's the KVC-Compliant setter method.

00:42:47.300 --> 00:42:54.890
Important thing to note is the self setNeedsDisplay:
YES, so we can redraw itself as it's animated.

00:42:54.889 --> 00:43:00.599
And then overriding +defaultAnimationForKey.

00:43:00.599 --> 00:43:03.839
And so all that's happening here is that if the key coming

00:43:03.840 --> 00:43:08.420
in is our custom property, we'll
return some default animation.

00:43:08.420 --> 00:43:14.180
And again, a basic animation for any scalar type is perfectly fine.

00:43:14.179 --> 00:43:22.279
Otherwise, we'll just let the superclass return
whatever the defaultAnimationForKey is.

00:43:24.860 --> 00:43:28.430
Okay. Let's talk about mixing content types.

00:43:28.429 --> 00:43:38.649
So in the past if you have had, say, an NSOpenGLView
and you've tried to put Cocoa controls as subviews,

00:43:38.650 --> 00:43:42.300
that's something that hasn't been directly possible.

00:43:42.300 --> 00:43:50.720
We've had to do some workarounds, such as having
child windows as overlays, that sort of thing.

00:43:50.719 --> 00:43:57.009
With a layer-backed view we're able to
now mix and match these content types

00:43:57.010 --> 00:44:00.290
in a way we've really never been able to do before.

00:44:00.289 --> 00:44:03.029
So there are two ways we can go about doing this.

00:44:03.030 --> 00:44:07.130
There's an easy approach, which is
that you create the view, an NSView,

00:44:07.130 --> 00:44:09.099
set that it wants a layer,

00:44:09.099 --> 00:44:13.889
and then create a Core Animation layer
of the appropriate content type.

00:44:13.889 --> 00:44:18.900
And then we just say set layer, and
hand in that type for that view.

00:44:18.900 --> 00:44:23.869
And then that view will be displaying that
particular layer with that particular content.

00:44:23.869 --> 00:44:28.449
But we can also add subviews as we've always done.

00:44:28.449 --> 00:44:32.489
However, if we have an NSOpenGLView it's even easier.

00:44:32.489 --> 00:44:36.989
We can just create an NSOpenGLView.

00:44:36.989 --> 00:44:39.089
Turn on layer backing.

00:44:39.090 --> 00:44:40.500
And that's it.

00:44:40.500 --> 00:44:48.590
We can then just add sub iews, Cocoa controls, Cocoa
widgets to that OpenGLView as a -- as subviews.

00:44:48.590 --> 00:44:51.340
Just like any other view.

00:44:51.340 --> 00:44:55.860
And to demonstrate this I would like to bring Troy out.

00:45:01.809 --> 00:45:07.409
Okay. So we have here is a rotating earth.

00:45:07.409 --> 00:45:09.679
It's an OpenGL, NSOpenGLView.

00:45:09.679 --> 00:45:12.440
It is currently not layer-backed.

00:45:12.440 --> 00:45:14.800
We have a little checkbox up top.

00:45:14.800 --> 00:45:16.650
We can spin it, we can do all sorts of stuff.

00:45:16.650 --> 00:45:26.820
But once we make it layer backed, what we've done is we've
animated in an NSBox that is holding Cocoa controls,

00:45:26.820 --> 00:45:30.850
and these are subviews of the NSOpenGLView.

00:45:30.849 --> 00:45:35.500
They're not a parent or child window,
they're not some other done overlay.

00:45:35.500 --> 00:45:37.019
Just a simple item.

00:45:37.019 --> 00:45:40.349
And then as we adjust the items -- like, let's do the roll.

00:45:40.349 --> 00:45:42.650
Maybe the camera distance a little.

00:45:42.650 --> 00:45:45.869
We're effecting that OpenGLView.

00:45:45.869 --> 00:45:47.949
I'll turn on the wire frame.

00:45:47.949 --> 00:45:51.500
You can't have OpenGL without a wire frame.

00:45:51.500 --> 00:45:53.530
Okay. And no wire frame.

00:45:53.530 --> 00:45:58.870
And we can also, of course, since these are layer
backed apply a Core Image filter in this case.

00:45:58.869 --> 00:46:00.869
We'll do that glass effect.

00:46:00.869 --> 00:46:03.019
We seem to like the glass effect.

00:46:03.019 --> 00:46:13.009
But, of course, if we get rid of the layers by
hitting that checkbox, go back to the way we were.

00:46:13.010 --> 00:46:15.940
Those layers get collected up in
the background, they're gone.

00:46:15.940 --> 00:46:28.269
And let's turn them back on because -- there we go.

00:46:28.269 --> 00:46:33.800
Thank you, Troy.

00:46:33.800 --> 00:46:35.260
( Applause )

00:46:35.260 --> 00:46:42.400
>> So the other thing that I actually did want to mention
is that all of the demos, as well as those animation movies,

00:46:42.400 --> 00:46:47.800
and hopefully, even Cocoa Shuffle we'd
like to get to you as sample code.

00:46:47.800 --> 00:46:50.890
Some of that will be available this week at the show,

00:46:50.889 --> 00:46:55.369
and then some of it might take a little
while for us to get it out to you.

00:46:55.369 --> 00:47:01.989
But our intent is to get everything you've
seen here out as sample source code.

00:47:01.989 --> 00:47:07.919
Now let's just talk -- close up with a few usage tips.

00:47:07.920 --> 00:47:11.619
Some behavioral nuances.

00:47:11.619 --> 00:47:17.429
Because when we check that little checkbox
we really are rendering the content of a view

00:47:17.429 --> 00:47:19.819
in a very different way that we have been in the past.

00:47:19.820 --> 00:47:23.730
So there are a few little nuances.

00:47:23.730 --> 00:47:32.360
One of which is that setNeedsDisplay -- you want to make
sure that you're very specific about setting needing display

00:47:32.360 --> 00:47:40.240
or invalidating portions of your view that actually
need to be invalidated, and not possibly assuming

00:47:40.239 --> 00:47:46.109
that because somebody somewhere else in the
view hierarchy above you is invalidating,

00:47:46.110 --> 00:47:51.050
that you're going to get automatically
redrawn, even if you haven't asked to be.

00:47:51.050 --> 00:47:54.840
So be very specify about your setNeedsDisplay.

00:47:54.840 --> 00:48:01.930
Another thing to note is that in layer-backed mode,
when things move from point A to point B as far

00:48:01.929 --> 00:48:08.669
as AppKit is concerned, as soon as the animation
starts that item is already at its new location.

00:48:08.670 --> 00:48:11.720
It's a visual treatment that it's moving along.

00:48:11.719 --> 00:48:15.969
So it's a good idea, one, to turn
off or disable, I should say,

00:48:15.969 --> 00:48:19.759
controls as they're moving so that
users don't try to hit them.

00:48:19.760 --> 00:48:23.280
Because AppKit thinks they're already here.

00:48:23.280 --> 00:48:30.650
And finally, layer content is drawn
axis-aligned essentially into a buffer.

00:48:30.650 --> 00:48:33.930
And then that whole buffer is composited in.

00:48:33.929 --> 00:48:41.149
So as we rotate stuff that looks very nice, but it's also
the case that some things that you draw might not look pixel

00:48:41.150 --> 00:48:46.309
for pixel exactly like the way you
draw -- or how we draw right now.

00:48:46.309 --> 00:48:49.509
Some performance tips.

00:48:49.510 --> 00:48:51.830
The first is to avoid redrawing.

00:48:51.829 --> 00:49:00.299
So things that are not going to change very often, isolate
those so that we can cache them and keep them cached.

00:49:00.300 --> 00:49:02.140
And design by compositing.

00:49:02.139 --> 00:49:03.559
Applying effects.

00:49:03.559 --> 00:49:07.590
Rather than redrawing, sometimes
the Core Image effect can change --

00:49:07.590 --> 00:49:13.340
make something look like its state has
changed rather than redrawing the whole thing.

00:49:13.340 --> 00:49:17.329
And finally, optimate -- optimize that backing store.

00:49:17.329 --> 00:49:24.590
If you're drawing something this big, don't have a
view that's that big and waste a lot of backing store.

00:49:26.150 --> 00:49:27.570
So learning more.

00:49:27.570 --> 00:49:30.130
There's a good deal of the documentation about this.

00:49:30.130 --> 00:49:35.780
Draft documentation for taking
a look at the custom animations.

00:49:35.780 --> 00:49:38.680
There's the Core Animation headers.

00:49:38.679 --> 00:49:41.000
Of course, the Leopard AppKit Release Notes.

00:49:41.000 --> 00:49:43.340
I love the AppKit Release Notes.

00:49:43.340 --> 00:49:50.570
And then, of course, the sample code that we will be getting
to you and some of which should be already available.

00:49:51.809 --> 00:49:56.630
For more information, of course,
there's the website and Deric Horn.

00:49:58.369 --> 00:50:00.630
Some take-home points.

00:50:00.630 --> 00:50:09.640
We really do want these wonderful, lavish animated
applications that just have an amazing user experience.

00:50:09.639 --> 00:50:17.449
But we don't want you to have to completely
rearchitect all of your user interfaces to do that

00:50:17.449 --> 00:50:23.849
What we've done is we've added a small set of
API and the ability to access the vast power

00:50:23.849 --> 00:50:28.449
of Core Animation using standard views and controls.

00:50:28.449 --> 00:50:34.059
And so we want you to keep designing
those great user interfaces.

00:50:34.059 --> 00:50:35.920
Let us help you do so.

00:50:35.920 --> 00:50:42.960
And yeah -- we're going to love
seeing what you come up with.

00:50:42.960 --> 00:50:52.039
( Applause )

00:50:52.039 --> 00:51:00.429
>> And from time to time, in the past they've let me sing.

00:51:00.429 --> 00:51:14.019
So in the past we have done little
songs, or

00:51:14.019 --> 00:51:20.349
we've done fun songs about model
view controller, modelling man,

00:51:20.349 --> 00:51:25.869
the now somewhat obsolete Cocoa memory
management song, Hold Me, Use Me, Release Me.

00:51:25.869 --> 00:51:34.429
( Laughter )

00:51:34.429 --> 00:51:48.349
>> And well, this year -- we --
well, let's just put it this way.

00:51:48.349 --> 00:51:58.029
I guess sometimes in a person's life they get a feeling deep
down that's just so strong that really the only way --

00:51:58.030 --> 00:52:05.800
the only way -- you can properly express it
is with an up-tempo country western love song.

00:52:05.800 --> 00:52:06.310
( Laughter )

00:52:06.309 --> 00:52:10.130
>> And so we'd like to do that for you.

00:52:10.130 --> 00:52:11.460
Am I ready?

00:52:11.460 --> 00:52:13.510
Yeah. Right now.

00:52:13.510 --> 00:52:16.850
( Music )

00:52:16.849 --> 00:52:30.119
>> Singing: I love you -- I love view -- thinking
back on all the things that we've been through.

00:52:30.119 --> 00:52:36.119
-- sometimes I take for granted
all those many things you do --

00:52:36.119 --> 00:52:42.150
so let me take this moment just to say that I love view --

00:52:43.940 --> 00:52:51.099
NSView, they say opposites attract
and so I guess it makes some sense --

00:52:51.099 --> 00:53:00.059
well, I am not big on parties, but you love handling
events -- I can't draw Tippy the Turtle, no,

00:53:00.059 --> 00:53:09.199
nor Pete the Pirate too -- but once you lock
your focus there's no drawing you can't do --

00:53:12.530 --> 00:53:17.790
I love view -- I love view

00:53:17.789 --> 00:53:30.190
-- and all the subclasses in your retinue -- look it up --
sometimes I take for granted all those many things you do,

00:53:30.190 --> 00:53:42.860
let me count the reasons why I say that I love view --
Well, you've got buttons and sliders, split view dividers,

00:53:42.860 --> 00:53:48.900
you never sent a rumor in Apple
Insider, handling the drag drops,

00:53:48.900 --> 00:53:54.059
printing with the can't stop, tool tips, -isFlipped
makes you do the flip-flop, handling the menus --

00:53:54.059 --> 00:53:57.679
-- well, back that up a little bit.

00:53:57.679 --> 00:54:04.399
I forget to tell you all a little earlier
that, well, this is a Beta version of the song.

00:54:06.579 --> 00:54:17.239
Now, let me tell you, it's feature-complete mind you,
but I won't have the words memorized till October.

00:54:17.239 --> 00:54:23.859
( Laughter )

00:54:23.860 --> 00:54:28.550
>> Singing: Let's slow this down a little bit.

00:54:28.550 --> 00:54:35.830
Well -- you've got buttons and sliders, split view
dividers, you never sent a rumor in Apple Insider,

00:54:35.829 --> 00:54:43.360
handling the drag drop, creating like you can't stop, tool
tips this, makes you do the flip-flop, menus in the context,

00:54:43.360 --> 00:54:48.990
cursor and tracking rects -- you draw the focus
ring when the user selects, device independence,

00:54:48.989 --> 00:55:00.919
responder chain descendants, and accessibility
too -- I love view -- I love view --

00:55:00.920 --> 00:55:10.420
it's a simple love, not much hullabaloo --
I once sent a greeting card by Maya Angelou,

00:55:10.420 --> 00:55:22.809
the words were mighty flowery, but the gist was I
love view -- well, I don't like to say you're easy,

00:55:22.809 --> 00:55:31.710
I regard you with respect, but it's easy to
start drawing, I just implement -drawRect:

00:55:31.710 --> 00:55:41.349
And then when something changes I just say -setNeeds
Display:, you record what needs a date and then redraw it

00:55:41.349 --> 00:55:55.610
as you may -- well, on that keyboard over yonder there
might be a typing sound -- if you are the first responder,

00:55:55.610 --> 00:56:04.260
you'll then message with -keyDown: -- as for handling
a mouse that's been running around your -bounds,

00:56:04.260 --> 00:56:19.070
I can build a better mousetrap with -mouseUp, -mouseDragged
-mouseDown -- I love view -- I love view --

00:56:19.070 --> 00:56:31.390
that's why I have your API as a tattoo -- you've added
lots of features, 'specially since 10.2 --

00:56:31.389 --> 00:56:37.730
I'm running out of places to display that I want you --

00:56:41.550 --> 00:56:49.870
well, oh, that Core Animation has a
reputation of turning a head or two --

00:56:51.280 --> 00:57:02.490
it's so dang good, stick it under the hood of every
layer-backed NSView -- I love view -- I love view --

00:57:02.489 --> 00:57:18.209
let me tell you one thing more just entre new,
I might merge with other classes, but in the end I'm true --

00:57:18.210 --> 00:57:30.510
'cause you won't be drawing a damn thing
if you ain't got NSView -- I love view!

00:57:30.510 --> 00:57:39.120
( Applause )

00:57:39.119 --> 00:57:41.159
>> Thank you, Gordy.fd

00:57:41.159 --> 00:57:43.449
Stay up here.

00:57:43.449 --> 00:57:54.329
I'm going introduce you -- Gordy!

00:57:54.329 --> 00:58:05.699
>> Thanks.

00:58:05.699 --> 00:58:06.099
( Applause )

00:58:06.099 --> 00:58:06.719
>> Thank you very much.

00:58:06.719 --> 00:58:13.730
I also did want to introduce the break points which --
not yet.

00:58:13.730 --> 00:58:15.990
This is Gordie Freedman on guitar.

00:58:15.989 --> 00:58:23.869
And Victor Alexander on keyboard.

00:58:23.869 --> 00:58:24.400
( Applause )

00:58:24.400 --> 00:58:33.300
>> I always call him the best slide
advance man in the business.

00:58:33.300 --> 00:58:34.760
Thank you.

00:58:34.760 --> 00:58:37.950
Now to --

00:58:37.949 --> 00:58:40.119
>> That was fantastic, James.

00:58:40.119 --> 00:58:43.609
>> Oh, take that down.

00:58:43.610 --> 00:58:44.519
>> We'll look for you on iTunes.

00:58:44.519 --> 00:58:47.130
>> Do we have time for Q&A?

00:58:47.130 --> 00:58:47.260
>> Yeah.

00:58:47.260 --> 00:58:48.230
>> Excellent.

00:58:48.230 --> 00:58:50.800
>> I think we have about 15 minutes for Q&A.

00:58:50.800 --> 00:58:51.269
>> Perfect.

00:58:51.269 --> 00:58:52.239
( Laughter )

00:58:52.239 --> 00:58:56.569
>> We can do another song.

00:58:56.570 --> 00:59:04.820
No, have we rehearsed another song?

00:59:04.820 --> 00:59:09.519
Oh dear. Let's do Hold me, Use me, Release me.

00:59:09.519 --> 00:59:16.460
( Cheering )
>> Yeah. But we'll do it quick.

00:59:16.460 --> 00:59:24.250
Encore. Unless you want some Q&A?

00:59:24.250 --> 00:59:24.349
>> Group: No!

00:59:24.349 --> 00:59:27.549
>> If you do there is always the
Cocoa Labs Wednesday and Thursday.

00:59:27.550 --> 00:59:29.750
( Music )

00:59:29.750 --> 00:59:34.159
>> This is in G. Actually, you play, I'll sing.

00:59:34.159 --> 00:59:36.639
That's what happened on the first song anyway.

00:59:39.929 --> 00:59:59.210
>> Singing: Hold me, use me, then release me --
hold me, use me, then release me -- there we go.

00:59:59.210 --> 01:00:03.820
When you play, yeah, go around again.

01:00:03.820 --> 01:00:06.450
Yes, we rehearsed this thoroughly.

01:00:06.449 --> 01:00:10.429
One more time.

01:00:12.050 --> 01:00:14.700
There you go.

01:00:14.699 --> 01:00:31.369
-- when you were locking it, you must dispose of this, yes,
and if you should copy, release so your code is not sloppy,

01:00:31.369 --> 01:00:46.750
do I have to explain -- if you explicitly retain then
release me, yes, release me, oh release me, oh --

01:00:46.750 --> 01:01:03.369
hold me, use me, oh, oh, oh, release me
-- hold me, use me, then release me --

01:01:04.989 --> 01:01:11.059
darling, if you don't want me any
more, please, please just let me know.

01:01:11.059 --> 01:01:15.900
I've been sitting out here just
waiting, just waiting to hear from you.

01:01:15.900 --> 01:01:23.960
We've had some good times, and I want you to know
my accessor methods are wide open for business, baby.

01:01:23.960 --> 01:01:27.250
But you know, I understand if you don't need me any more --

01:01:27.250 --> 01:01:30.550
if you don't need me any more than just
please, please just send me a message.

01:01:30.550 --> 01:01:44.519
A simple message -- a simple message to let me know --
then release me, yes, release me, release me -- oh --

01:01:44.519 --> 01:01:54.050
go into one of those middle parts -- if you ==
we'll go around again -- uh, yeah.

01:01:54.050 --> 01:02:12.180
Okay, I got it now -- here we go -- yes, if you garbage
collect me, can't be bothered to personally reject me,

01:02:12.179 --> 01:02:27.629
send your bookkeeping clerk to do your dirty work, and
release me, yes, release me, oh release me, oh -- Everybody!

01:02:27.630 --> 01:02:47.369
Hold me, use me, then release me -- one more time,
hold me, use me, then release -- me -- oh oh oh oh.

01:02:47.369 --> 01:02:48.659
That'll work.

01:02:48.659 --> 01:02:50.509
Thank you.

01:02:50.510 --> 01:03:04.970
( Applause )