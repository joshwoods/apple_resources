WEBVTT

00:00:11.250 --> 00:00:13.429
>>Kevin: This is session 6 11.

00:00:13.429 --> 00:00:17.039
AJAX methodologies for QuickTime development
in which you will also coincidentally

00:00:17.039 --> 00:00:17.300
( audio skip )

00:00:17.300 --> 00:00:21.010
QuickTime methodologies for AJAX development.

00:00:21.010 --> 00:00:26.140
My name is Kevin Calhoon and by preference
and profession, I'm a software engineer.

00:00:27.160 --> 00:00:31.730
In this session we are going to be harkening
back to what Peter Graffagnino said on Monday

00:00:31.730 --> 00:00:34.149
in the Graphics and Media State of the Union.

00:00:34.149 --> 00:00:40.589
In which he recommended that you use web technologies
for interactivity, and for media such as audio

00:00:40.590 --> 00:00:43.580
and video and even time text you use QuickTime.

00:00:43.579 --> 00:00:48.969
In this session we are going to be talking about
how you can combine those powerful things together.

00:00:48.969 --> 00:00:53.729
The bridge between the two is the Java
script API of the QuickTime plug-in.

00:00:53.729 --> 00:01:00.429
In this session we'll be going over its scope, we'll
give you some handy usage tips, we'll tell you what's new

00:01:00.429 --> 00:01:06.000
in the JavaScript API of the QuickTime plug-in in the
Leopard time frame, and we'll give you some demonstrations

00:01:06.000 --> 00:01:10.879
of some really cool things that are under
development now and what you may already have

00:01:10.879 --> 00:01:16.239
and not know it of the plug-in and web technologies.

00:01:16.239 --> 00:01:23.399
Ok. Specifically you will learn how to detect the
presence of the plug-in on the users machine for the use

00:01:23.400 --> 00:01:29.130
of the browser and how to do a check of the version
of QuickTime so you're sure that the features

00:01:29.129 --> 00:01:32.119
of QuickTime that your media requires are present.

00:01:32.120 --> 00:01:36.490
We will give you our best practice
recommendation for how to use the plug-in

00:01:36.489 --> 00:01:40.839
to embed content in your document or in your web app.

00:01:40.840 --> 00:01:46.140
We will go over the basics of controlling
time based media via the JavaScript API.

00:01:46.140 --> 00:01:52.670
Also how to query state of media if you want to
display the state or to respond to the state.

00:01:52.670 --> 00:01:59.870
In fact, how to respond to state changes in the media
without polling in JavaScript, we'll cover in this session.

00:01:59.870 --> 00:02:06.790
Further, how to register for time notifications if you
want to synchronize other things happening in your document

00:02:06.790 --> 00:02:12.510
with time media, and you'll also learn about as
I already mentioned, some usage in the real world

00:02:12.509 --> 00:02:18.229
of how this media stuff and web technology
can be married for interesting results.

00:02:18.229 --> 00:02:20.879
Ok. What technology frame works are we dealing with?

00:02:20.879 --> 00:02:25.549
If you are a web developer, if you're developing web
pages, if you're a web app developer and you want

00:02:25.550 --> 00:02:30.410
to integrate time media such as audio and
video into it, this session is for you.

00:02:30.409 --> 00:02:36.930
If you are a QuickTime developer and you are interested in
following our recommendation for how to add interactivity

00:02:36.930 --> 00:02:42.040
to your QuickTime media via the use of
web technologies, this session is for you.

00:02:42.039 --> 00:02:45.030
Also if you are a classicist, this session may be for you.

00:02:45.030 --> 00:02:48.180
You'll have to tell us afterwards.

00:02:48.180 --> 00:02:52.819
Alright, let's jump right into the nuts
and bolts of the usage of the plug-in.

00:02:52.819 --> 00:02:57.209
How to detect that it's present and
how to check the version of QuickTime.

00:02:57.210 --> 00:03:01.570
Well this whole process is very straight-forward
if the browser that your user happens

00:03:01.569 --> 00:03:07.680
to be using the Netscape plug-in API, and I'll show
you the straight forward code for this in just a moment,

00:03:07.680 --> 00:03:11.750
but there is a little bit of a wrinkle if
that browser that the user is using happens

00:03:11.750 --> 00:03:15.689
to use the ActiveX API for browser plug-ins.

00:03:15.689 --> 00:03:21.990
The reason that there is a wrinkle, is that Apple's
recommendation up until now has been for you

00:03:21.990 --> 00:03:27.210
to use the QuickTime check object ActiveX
control to do the version check of QuickTime.

00:03:27.210 --> 00:03:31.520
Unfortunately when Microsoft revamped
its security policies for IE7,

00:03:31.520 --> 00:03:37.700
it did not bless the QuickTime check
object ActiveX control for use with IE7.

00:03:37.699 --> 00:03:45.679
So if you use it your user may get a warning that
the plug-in that the page uses may be unstable,

00:03:45.680 --> 00:03:49.879
may have diseases, and the user may wish to
run away and this of course is not something

00:03:49.879 --> 00:03:52.629
that you want your users to do
when they navigate to your pages.

00:03:52.629 --> 00:03:57.439
So you will want to follow this new recommendation
for how to do the version check of QuickTime.

00:03:57.439 --> 00:04:04.590
First of all, you would want to include in your object tag
that you wish for the page to use the sufficient version

00:04:04.590 --> 00:04:07.950
of the QuickTime ActiveX control that has this feature.

00:04:07.949 --> 00:04:12.019
We'll be adding the feature essentially
of the QuickTime check object control

00:04:12.020 --> 00:04:18.540
to the QuickTime dot QuickTime control, which is the
one that you have been using in order to embed content

00:04:18.540 --> 00:04:23.580
in web pages in IE, or other browsers
that use the ActiveX API.

00:04:23.579 --> 00:04:30.599
If any. And what you'll want to do when we ship you this
new version of the QuickTime dot QuickTime control,

00:04:30.600 --> 00:04:36.170
once you've included in your object tag that version number,
of course IE will help the user to download that version

00:04:36.170 --> 00:04:42.509
and to install that technology that it requires, and
once the page is loaded you can instantiate that control

00:04:42.509 --> 00:04:48.680
and call its get QuickTime version method in order to
determine the version of QuickTime that is being used.

00:04:48.680 --> 00:04:52.939
Alright, if any of this check fails, the code
for which I will show you in just a moment,

00:04:52.939 --> 00:04:55.459
or if the version of QuickTime is insufficient,

00:04:55.459 --> 00:04:59.919
our recommendation is that you navigate
the user to the QuickTime download page.

00:04:59.920 --> 00:05:01.400
Here's the URL for that.

00:05:01.399 --> 00:05:06.899
So that the user can download the sufficient version
of QuickTime that's required for your documents.

00:05:06.899 --> 00:05:12.039
Ok so here's the code; first of all the
first clause is, the first if clause is going

00:05:12.040 --> 00:05:16.490
to run any browser that supports the Netscape plug-in API.

00:05:17.629 --> 00:05:22.529
What this code essentially does is to iterate
through the installed navigator plug-ins,

00:05:22.529 --> 00:05:28.009
search for a match among those plug-ins
of the name QuickTime and a number.

00:05:28.009 --> 00:05:30.490
The name of our plug-in has a name in that form.

00:05:30.490 --> 00:05:36.180
QuickTime and the version number of QuickTime
that's installed and you can use that version number

00:05:36.180 --> 00:05:41.910
as the version number of QuickTime that you can
compare against the version that you require.

00:05:41.910 --> 00:05:47.230
This else clause will run in browsers that
do not support the Netscape plug-in API,

00:05:47.230 --> 00:05:52.780
and here is the code for the recommendation
that I just walked through a moment ago.

00:05:52.779 --> 00:05:58.209
Instantiate the QuickTime dot QuickTime
control, invoke its get QuickTime version method,

00:05:58.209 --> 00:06:01.029
and that will be the version of Quick
Time that you would compare against.

00:06:01.029 --> 00:06:01.579
So there you go.

00:06:01.579 --> 00:06:07.099
That will guarantee that your page has
the appropriate version of QuickTime.

00:06:07.100 --> 00:06:12.300
Of course if it's not available, navigate to
the QuickTime download page, alert the user.

00:06:12.300 --> 00:06:15.360
Of course it's up to you to determine what to do.

00:06:15.360 --> 00:06:19.540
Once the appropriate version of the
plug-in and QuickTime is available,

00:06:19.540 --> 00:06:23.400
how do you embed audio and video media in your page?

00:06:23.399 --> 00:06:28.069
Well there are a number of differences among browsers
as you probably know, in the way that certain things

00:06:28.069 --> 00:06:30.430
such as objects and bed tags are treated.

00:06:30.430 --> 00:06:35.790
So we have a very specific recommendation
on how to construct those tags in HTML

00:06:35.790 --> 00:06:42.650
for the broadest possible compatibility with the browsers
and the browser versions that our plug-in supports.

00:06:42.649 --> 00:06:44.060
It's a little bit finicky.

00:06:44.060 --> 00:06:50.149
So what we've done is to supply a JavaScript
library for your use that you can invoke

00:06:50.149 --> 00:06:53.459
in order to create those tags appropriately.

00:06:53.459 --> 00:06:56.560
The JavaScript library that Apple provides for embedding,

00:06:56.560 --> 00:06:59.220
I'll give you the URL for that
a little later in the session.

00:06:59.220 --> 00:07:05.510
You can download and use on your site and
invoke via the QT right object function,

00:07:05.509 --> 00:07:08.810
and that function will formulate the appropriate tags

00:07:08.810 --> 00:07:12.889
so that your content can be embedded
and displayed by the QuickTime plug-in.

00:07:12.889 --> 00:07:18.349
The first parameter to the function is the URL
of the media you wish to plug-in to display.

00:07:18.350 --> 00:07:24.629
The next two parameters control its width and height, and
other parameters map to embed in object tags on the plug-in

00:07:24.629 --> 00:07:27.310
and they are all documented in
the library that you can download.

00:07:27.310 --> 00:07:29.990
But that's the easy way to do it.

00:07:29.990 --> 00:07:35.610
If you have a need to construct these tags
yourself, we also document what they look like.

00:07:35.610 --> 00:07:39.860
That example will expand to this construct in HTML.

00:07:39.860 --> 00:07:43.960
You'll note that there is an outer
object tag and an inner embed tag

00:07:43.959 --> 00:07:48.569
and this is what works best across the universe of browsers.

00:07:48.569 --> 00:07:54.719
And you'll see that the attributes of the object element
and those of the embed element mirror each other.

00:07:54.720 --> 00:07:59.070
Well it depends on what browser happens to
running, which one it actually picks up.

00:07:59.069 --> 00:08:02.579
That leads to an interesting question, which
element is going to turn out to be live

00:08:02.579 --> 00:08:05.680
for scripting once it's inserted into the DOM?

00:08:05.680 --> 00:08:09.420
Well it's a bit of a difficult problem
that Mike has got a solution to,

00:08:09.420 --> 00:08:13.680
and I have a more modern solution to
in just a moment, but there you go.

00:08:13.680 --> 00:08:16.720
That's the raw stuff.

00:08:16.720 --> 00:08:20.380
Once you've got the thing embedded
and you want to control it.

00:08:20.379 --> 00:08:24.310
You want it to start to play or you want the
user to start it to play, what do you do?

00:08:24.310 --> 00:08:28.649
Well you have two options, in one the
first option is the simple one for you

00:08:28.649 --> 00:08:32.939
if you have no need to mediate the control of the playback.

00:08:32.940 --> 00:08:39.710
You can use the plug-ins controller attribute,
set it to true in order to tell QuickTime

00:08:39.710 --> 00:08:46.090
to display it's standard 16 pixel tall user interface
for media control, and the user can interact with that

00:08:46.090 --> 00:08:48.530
to stop and start the movie and so forth.

00:08:48.529 --> 00:08:55.470
However, most web pages these days have their own look and
feel and you will certainly want to have your own controller

00:08:55.470 --> 00:08:58.509
that matches that look for control of media.

00:08:58.509 --> 00:09:04.740
You can design that anyway you like, and control
the media via the plug-ins JavaScript API.

00:09:04.740 --> 00:09:07.779
Here are some of the methods that you
might want to use in order to do that.

00:09:07.779 --> 00:09:11.949
High level methods for playback, play stop, rewind and step.

00:09:11.950 --> 00:09:14.379
Or intermediate level methods such as set rate.

00:09:14.379 --> 00:09:16.059
Let me walk through these.

00:09:16.059 --> 00:09:20.809
The rate of a movie in QuickTime par
less is the rate in which it's playing.

00:09:20.809 --> 00:09:24.669
1.0 corresponds to the movie's intrinsic
rate, its natural rate.

00:09:24.669 --> 00:09:28.589
The rate at which it would typically
play for normal viewing.

00:09:28.590 --> 00:09:33.830
Zero corresponds to stopping, so you stop or
pause a movie by setting its rate to zero,

00:09:33.830 --> 00:09:39.410
and you can detect whether a movie is playing by
checking whether its rate is zero or some other number.

00:09:39.409 --> 00:09:44.419
You can make it fast-forward for
example by setting its rate to 2.

00:09:44.419 --> 00:09:51.069
You can also seek through time through the movies duration
for zero to it's duration by means of the set time method.

00:09:51.070 --> 00:09:58.430
In the QuickTime plug-in time is an integer,
and that integer represents the number

00:09:58.429 --> 00:10:02.589
of increments that you want to advance in time

00:10:02.590 --> 00:10:06.980
The number of increments per second
is given by the movies time scale.

00:10:06.980 --> 00:10:10.870
In order to get that you invoke the
plug-in method get movie time scale.

00:10:10.870 --> 00:10:15.450
So for example, if you want to navigate
to 2 seconds from the movies start,

00:10:15.450 --> 00:10:18.700
you would set the time to 2 times the movies times scale.

00:10:18.700 --> 00:10:24.129
Alright so we have other control there about
the sound volume, whether the movies loops.

00:10:24.129 --> 00:10:29.230
You can use these last two methods, set start time and
end time in order to give the movie in and out points

00:10:29.230 --> 00:10:33.360
to play only a segment of its full duration, and so forth.

00:10:33.360 --> 00:10:37.820
You can also use these methods in order
to fetch information about the movie.

00:10:37.820 --> 00:10:42.870
Now for those of you that have a background in
object oriented design, or perhaps just opinions

00:10:42.870 --> 00:10:47.509
about object orientated design may be asking
the question "Why have you exposed methods

00:10:47.509 --> 00:10:50.519
in order to control and to query these things?

00:10:50.519 --> 00:10:53.460
Why haven't you exposed attributes?"

00:10:53.460 --> 00:10:57.759
Well the answer to that question is that in
the QuickTime engineering group we are not

00:10:57.759 --> 00:11:00.330
"Johnny come latelys" to the JavaScript world.

00:11:00.330 --> 00:11:07.820
We designed this API to work with the very first scriptable
browser Netscape 4, and with Netscape 4 was the most natural

00:11:07.820 --> 00:11:12.990
for a plug-in that wanted to advertise
a JavaScript API to expose methods.

00:11:12.990 --> 00:11:17.639
If it was natural for it to expose attributes,
we never quite found out how to do it.

00:11:17.639 --> 00:11:20.559
So we designed our API to work in this way.

00:11:21.950 --> 00:11:25.770
Ok. What happens if you want to respond to state changes?

00:11:25.769 --> 00:11:31.069
If you are implementing a custom controller and you want
it to reflect whether the movie is currently playing

00:11:31.070 --> 00:11:33.830
or whether the movie has reached its full duration.

00:11:33.830 --> 00:11:37.170
Well if you have been implementing
such a thing up until now,

00:11:37.169 --> 00:11:42.049
as you know it would be necessary
to poll the state of the movie.

00:11:42.049 --> 00:11:48.589
You would instantiate a JavaScript timer and then as that
timer fires at an increment of your choice you would have

00:11:48.590 --> 00:11:52.360
to use the methods I just showed you in
order to query the state of the movie.

00:11:52.360 --> 00:11:55.669
Well that's inefficient, and it's not very AJAX like either.

00:11:55.669 --> 00:11:57.939
So what would you prefer to use?

00:11:57.940 --> 00:12:04.260
Naturally it would be better if the plug-in were to
emit DOM events that you can register listeners for,

00:12:04.259 --> 00:12:08.100
and then when your listeners were invoked
you could do whatever you needed to do.

00:12:08.100 --> 00:12:11.129
Well we agree with that.

00:12:11.129 --> 00:12:17.240
And so in the version of the plug-in that we will be
shipping concurrently with Leopard for both Mac OS X

00:12:17.240 --> 00:12:22.090
and Windows, the QuickTime plug-in for
the first time will be admitting DOM events

00:12:22.090 --> 00:12:23.830
to indicate state changes in the movie.

00:12:23.830 --> 00:12:29.590
And here is a list of the DOM events
that we are implementing.

00:12:29.590 --> 00:12:35.790
We haven't chosen these completely independently
in fact, these DOM events are modeled very closely

00:12:35.789 --> 00:12:40.849
after the current W3C draft specifications for HTML5.

00:12:40.850 --> 00:12:47.250
As you may know HTML5 for the first
time includes HTML time media elements

00:12:47.250 --> 00:12:50.190
of which one instance is the audio
element and another is the video.

00:12:50.190 --> 00:12:52.420
Well where did all that come from?

00:12:52.419 --> 00:12:59.329
We've actually been participating with the working groups
that have contributed to the HTML5 draft specifications.

00:12:59.330 --> 00:13:04.540
Based on our experience with media in web pages all
the years we've been doing the QuickTime plug-in.

00:13:04.539 --> 00:13:11.480
We went to them with the model of how we thought
media would naturally behave inside of the HTML DOMain

00:13:11.480 --> 00:13:15.350
and we even proposed a set of events
that those plug-ins should emit.

00:13:15.350 --> 00:13:20.450
And together with other members of the working group
the current draft specifications have been formulated

00:13:20.450 --> 00:13:25.980
and we're taking that draft and implementing
this portion of it back into our plug-in.

00:13:25.980 --> 00:13:32.990
First of all we want to validate the design of HTML5
and also we want to provide this functionality to you

00:13:32.990 --> 00:13:36.769
in the plug-in in the form in which we
already provide embedding with media.

00:13:36.769 --> 00:13:37.629
So here are the events.

00:13:37.629 --> 00:13:38.639
What do they mean?

00:13:38.639 --> 00:13:40.740
Begin is an interesting one.

00:13:40.740 --> 00:13:45.029
Its and event that the plug-in will emit
when an instance of it has been inserted

00:13:45.029 --> 00:13:48.220
in the DOM and it becomes live for scripting.

00:13:48.220 --> 00:13:53.269
Begin is an event that you can listen
to, to determine whether the outer object

00:13:53.269 --> 00:13:58.340
or the inner embed element is the
one that is live for scripting.

00:13:58.340 --> 00:14:03.930
Loaded is emitted when the media
resource has been completely loaded.

00:14:03.929 --> 00:14:08.629
You can listen to that if you don't
want to play for a really long time.

00:14:08.629 --> 00:14:13.039
However, any media technology worth
a nickel is going to allow you

00:14:13.039 --> 00:14:20.069
to play back however much media has already been transferred
and the QuickTime plug-in certainly is worth at least that.

00:14:20.070 --> 00:14:26.110
and when there is some media that is available
for playing we will emit the can play event.

00:14:26.110 --> 00:14:31.440
That's the one that you listen for to determine
that you want to enable for example a play control.

00:14:31.440 --> 00:14:37.750
However it may not be exactly one you want to initiate
playback because what you really want to do is wait

00:14:37.750 --> 00:14:42.600
for sufficient amount of media to be transferred
and you also want to have some assurance

00:14:42.600 --> 00:14:47.879
that the transfer rate is high enough that you can start
playing and continue playing all through to the end

00:14:47.879 --> 00:14:52.769
of the duration of the media without having
to wait for more media to be transferred.

00:14:52.769 --> 00:14:59.470
The can play through event is emitted when plug-in
judges, according to current network status

00:14:59.470 --> 00:15:03.320
that it's safe to start playback right now.

00:15:03.320 --> 00:15:09.230
But network states can change and if for some reason the
transfer slows down while you are playing and we have

00:15:09.230 --> 00:15:15.330
to stop playback because you run out of media, we will first
emit a pause event to tell you that we stopped playback

00:15:15.330 --> 00:15:21.040
and then we will emit a waving event to tell you
that the reason we stopped is we need more media.

00:15:21.039 --> 00:15:27.009
If after a while because you yanked the cord out of the
wall, we discover that no media is being transferred

00:15:27.009 --> 00:15:29.879
after what I think is 3 seconds we will issue a stall event

00:15:29.879 --> 00:15:34.200
so that you can advise your users
on the best recovery options.

00:15:34.200 --> 00:15:41.640
These other events, whether they mean you can go to
the W3C draft of HTML5 and they're defined there.

00:15:41.639 --> 00:15:45.389
You'll note that we're emitting loaded
and not the standard load event.

00:15:45.389 --> 00:15:46.269
Why are we doing that?

00:15:46.269 --> 00:15:52.919
Well we are currently in the testing phase, making sure
that all this works across the full range of browsers

00:15:52.919 --> 00:15:59.629
that we support, and we discovered then that in at least
one browser when a plug-in tries to emit a standard event

00:15:59.629 --> 00:16:04.419
that the browser already knows about, and
may emit itself under other circumstances.

00:16:04.419 --> 00:16:08.429
These events are suppressed, they
don't bubble, listeners aren't invoked.

00:16:08.429 --> 00:16:14.250
Though I won't tell you which browser does that,
although I'll mention that its name or the technology

00:16:14.250 --> 00:16:20.179
that under lies it includes one of the last
of the 3 letters of the English alphabet.

00:16:20.179 --> 00:16:24.929
Ok. One last feature and then I'll
turn this over to some web developers

00:16:24.929 --> 00:16:27.149
that are getting some interesting stuff with it.

00:16:27.149 --> 00:16:31.539
What if you want to synchronize with media all
the things that that are happening on the page?

00:16:31.539 --> 00:16:37.399
For example, make images pop up as you play through certain
portions of the media or whatever else you may want to do.

00:16:37.399 --> 00:16:43.250
For the first time in the version of plug-in that will shift
with Leopard and concurrently with Leopard for windows,

00:16:43.250 --> 00:16:48.139
you can register for time notifications
by the actupoint function.

00:16:48.139 --> 00:16:52.600
You tell us what time you want to be invoked,
the name of the function that you want called,

00:16:52.600 --> 00:16:58.370
or the function object that you want invoked, and you
could also tell us by the third parameter pause whether

00:16:58.370 --> 00:17:01.340
or not you want the movie automatically
to pause at that time.

00:17:01.340 --> 00:17:08.019
And when the movie plays through that time
either to that time or traversing that time,

00:17:08.019 --> 00:17:10.349
that function or that function object will be invoked.

00:17:10.349 --> 00:17:14.969
You know that it will be invoked only when that time
is reached or traversed during a normal playback.

00:17:14.970 --> 00:17:19.640
It will not be invoked if a time is skipped over by seeking.

00:17:19.640 --> 00:17:22.810
Now we realize that there is value
for that kind of notification too.

00:17:22.809 --> 00:17:29.450
We will be working with the W3C working group in
order to propose that kind of notification as well

00:17:29.450 --> 00:17:35.809
and if you have an interest in helping to craft
that specification please by all means join the W3C

00:17:35.809 --> 00:17:41.829
and let your input be known about time media
or any other aspect of that specification.

00:17:43.680 --> 00:17:50.210
OK. This slide is only here to tell me that I'm running
over, I'd better get over there to the demo machine

00:17:51.529 --> 00:18:03.849
where some guy, oh wait that's me, will be showing you an
example of these DOM events and these notifications at work.

00:18:03.849 --> 00:18:09.159
Now you solve this page if you came to the
Graphics and Media State of the Union on Monday.

00:18:09.160 --> 00:18:14.350
Where you saw a really nice web
page which has its own controller.

00:18:14.349 --> 00:18:34.250
( music playing )
And you'll see at the bottom of the page is well, that
the content below the movie is updating automatically

00:18:34.250 --> 00:18:37.579
as the movie plays that displays
sycronize the movie playback.

00:18:37.579 --> 00:18:42.119
There are some custom controls to the left
that allow you to navigate from a segment

00:18:42.119 --> 00:18:45.029
to sub chapters if you will of this movie.

00:18:45.029 --> 00:18:46.680
I can play and pause.

00:18:46.680 --> 00:18:47.370
( movie plays )

00:18:47.369 --> 00:18:54.869
Control. There's also some very nice stuff on the bottom
which I wish I could scroll to, but you can get the idea

00:18:54.869 --> 00:19:01.739
as I mouse over this portion of the controller,
a thumbnail of the segment or chapter

00:19:01.740 --> 00:19:03.890
of the movie that's associated is displayed.

00:19:03.890 --> 00:19:07.270
I can click on the thumbnail in
order to navigate to that chapter.

00:19:07.269 --> 00:19:12.059
So all of this control is achieved
via standard web technologies together

00:19:12.059 --> 00:19:15.389
with the QuickTime plug-in that manages playback.

00:19:15.390 --> 00:19:26.150
Let me show you a bit of a simpler example
to illustrate how this can be done.

00:19:26.150 --> 00:19:30.740
( movie plays )
This is a scaled down version of the same
thing and the control here is a lot simpler.

00:19:30.740 --> 00:19:34.920
I mentioned the standard 16 pixel tall
QuickTime controller, that's what this is.

00:19:34.920 --> 00:19:37.890
It's just here for the demonstrator
to have something to hand on to.

00:19:37.890 --> 00:19:43.700
The page itself implements only a simple button
for playback control and you'll see that.

00:19:43.700 --> 00:19:43.779
( movie plays )

00:19:43.779 --> 00:19:47.119
It changes its name as the movie plays and pauses.

00:19:47.119 --> 00:19:50.689
Events that are generated let me reload
the page and show you the sequence

00:19:50.690 --> 00:19:50.730
( movie plays in background )

00:19:50.730 --> 00:19:52.799
of events that are generated.

00:19:54.410 --> 00:19:56.850
I can really get used to that.

00:19:56.849 --> 00:19:59.679
This events are generated as the movie is loaded.

00:19:59.680 --> 00:20:04.940
I mentioned some of these before begin as an emitted
when the incidence of the plug-in is inserted

00:20:04.940 --> 00:20:07.549
in the DOM and you can begin to talk with it.

00:20:07.549 --> 00:20:13.879
These other events that I didn't talk through as
I mentioned you can read about in the W3C draft.

00:20:13.880 --> 00:20:18.760
Let me do one more thing here; let
me navigate back to the beginning.

00:20:18.759 --> 00:20:31.970
I'll play and then I'll add a queue point by clicking this
button at whatever time the movie happens to be playing.

00:20:31.970 --> 00:20:32.140
( movie plays )

00:20:32.140 --> 00:20:34.420
Now I'll navigate back to the beginning.

00:20:34.420 --> 00:20:38.880
Let me clear that display for you.

00:20:38.880 --> 00:20:44.190
Then as I play again,

00:20:44.190 --> 00:20:44.900
( movie plays )

00:20:44.900 --> 00:20:50.519
you see the queue for the time I registered for was hit
and if I wish to I could do whatever I wanted in my scripts

00:20:50.519 --> 00:20:53.759
in order to synchronize something else
happening on the page with the media.

00:20:53.759 --> 00:20:56.029
So that's a simple demonstration of how it all works.

00:20:56.029 --> 00:21:03.849
For some richer demonstrations and a lot more
information about plug-in in real world use.

00:21:03.849 --> 00:21:09.589
I'm going to turn the podium over to Mike Seeple
who is a web developer who did a lot of the work

00:21:09.589 --> 00:21:14.240
on the new Apple dot com pages that you've been
enjoying since the Keynote on Monday morning.

00:21:14.240 --> 00:21:18.160
Mike's going to come up and he's going to tell you
the real truth about the QuickTime plug-in.

00:21:18.160 --> 00:21:18.340
Mike

00:21:18.339 --> 00:21:19.139
( applause )

00:21:19.140 --> 00:21:26.330
>>Mike: Thanks Kevin.

00:21:26.329 --> 00:21:30.849
I wish I could say I have more exciting
examples but honestly I am dying to get my hands

00:21:30.849 --> 00:21:33.389
on the new stuff he's been talking about showing off.

00:21:33.390 --> 00:21:34.530
I'm Mike Czepiel.

00:21:34.529 --> 00:21:38.079
I'm a web developer on the Apple dot com team
and if you're in the session before this,

00:21:38.079 --> 00:21:40.789
I'm going to be talking about pretty much the same thing.

00:21:40.789 --> 00:21:46.099
If you weren't great cuz you're going to be getting
the best part of the section, right here right now.

00:21:46.099 --> 00:21:51.209
As a web developer on the Apple dot com team, I get to
work with some really amazing designers on a daily basis.

00:21:51.210 --> 00:21:52.799
I'll bring their prototypes to life.

00:21:52.799 --> 00:21:59.559
I'm on the web using HTML, CSS, and JavaScript, full gambit
of web scan technologies we've all come to know and love.

00:21:59.559 --> 00:22:03.829
In create and some of the create some really
seamless video experiences in with their work,

00:22:03.829 --> 00:22:06.629
and I'll share with you how we
actually helped them do that today.

00:22:06.630 --> 00:22:11.880
Right now without all the great DOM events on Apple dot com.

00:22:11.880 --> 00:22:15.090
There's a we use standards but you don't have to.

00:22:15.089 --> 00:22:21.439
There's actually a lot of or several closed proprietary
scores options that we want to get video on the web.

00:22:21.440 --> 00:22:25.710
But we were born and raised on view
source we really embrace the open web.

00:22:25.710 --> 00:22:27.340
We want to be able to use whatever video we want.

00:22:27.339 --> 00:22:31.480
We don't want to have to invest in
particular tools, particular methodology.

00:22:31.480 --> 00:22:38.440
So it's great about being able to use HTML,CSS and
JavaScript is we can choose the highest quality video

00:22:38.440 --> 00:22:40.720
for displaying our products online.

00:22:40.720 --> 00:22:44.640
Of course this means this video you
immediately start thinking of QuickTime.

00:22:44.640 --> 00:22:50.460
Unfortunately QuickTime is not typically something you
will see a lot online in an interactive environment.

00:22:50.460 --> 00:22:54.700
Usually the page that your loading is just going
to be a page with the QuickTime movie loaded.

00:22:54.700 --> 00:22:58.610
Its sole purpose of that page is just to
show QuickTime movie with standard control.

00:22:58.609 --> 00:23:01.829
This is really isn't what our designers are
going for though, they want something that looks

00:23:01.829 --> 00:23:05.099
like it's a native part of the page
and really integrates correctly.

00:23:05.099 --> 00:23:10.199
Thankfully the QuickTime team was created seven
years ago around 2000 QuickTime 4.1.

00:23:10.200 --> 00:23:13.210
They were really forward thinking and added the
JavaScript API.

00:23:13.210 --> 00:23:16.250
I could have been back here 7 years ago talking about this

00:23:16.250 --> 00:23:20.019
and it pretty much would have been
the same presentation honestly.

00:23:20.019 --> 00:23:24.039
Fortunately no one was really doing
anything with the JavaScript API back then.

00:23:24.039 --> 00:23:29.319
Honestly it's just probably more trouble to get Java
script working across browsers reliably back then.

00:23:29.319 --> 00:23:31.099
Now the first thing from your mind was integrate.

00:23:31.099 --> 00:23:35.259
How am I going to integrate rich media into my applications?

00:23:35.259 --> 00:23:42.950
Thankfully, thanks to increased browser...advances
in browsers development tools and tireless efforts

00:23:42.950 --> 00:23:46.819
of the open source community in
developing JavaScript libraries.

00:23:46.819 --> 00:23:50.730
We really come a long way and it's a
lot easier now to work with JavaScript.

00:23:50.730 --> 00:23:53.329
Which now lets us turn our attention
to actually doing some cool stuff

00:23:53.329 --> 00:23:58.369
with JavaScript and this is where QuickTime comes in.

00:23:58.369 --> 00:24:04.000
Unfortunately the QuickTime API itself does look like
it was ran in 2000 and it really hasn't changed yet.

00:24:04.000 --> 00:24:06.730
It's going to change obviously as Kevin pointed out.

00:24:06.730 --> 00:24:10.240
Unfortunately for today we really
don't want to be coding like its 2000.

00:24:10.240 --> 00:24:16.049
We want to be able to integrate QuickTime as another
native part of our actual libraries that we're using

00:24:16.049 --> 00:24:19.609
to just prototype scriptaculus on Apple dot com.

00:24:19.609 --> 00:24:21.979
So we decided to actually go off the beaten path here.

00:24:21.980 --> 00:24:24.140
We're not using the official AC QuickTime.

00:24:24.140 --> 00:24:28.460
We actually wanted to you know create
a more modern indication of it.

00:24:28.460 --> 00:24:31.590
You know pending the QuickTime elements to the page.

00:24:31.589 --> 00:24:36.299
So we didn't want to be inline doc and writing with
QuickTime, only then turn around and when we're working

00:24:36.299 --> 00:24:41.799
with our modern libraries be document pending (inaudible).

00:24:41.799 --> 00:24:45.450
Like I said, we created our own and
the differences are pretty clear

00:24:45.450 --> 00:24:49.890
that one looks a bit more familiar to you at this point.

00:24:49.890 --> 00:24:53.320
Additionally gives us the flexibility of
being able to call it within our script

00:24:53.319 --> 00:24:56.409
without having to put it inline with the page.

00:24:56.410 --> 00:24:58.440
You, but you can go with either
one and really the great thing

00:24:58.440 --> 00:25:04.140
about the JavaScript API just being raw JavaScript
is you can kinda take and do what you want with it.

00:25:04.140 --> 00:25:05.840
You can create this node in any fashion you want.

00:25:05.839 --> 00:25:10.369
So if you don't like how we're doing it on Apple
dot com or the way that the its officially provided

00:25:10.369 --> 00:25:13.449
by the QuickTime team, you can go
in and make your own theoretically.

00:25:13.450 --> 00:25:14.950
You're going to be off the beaten path.

00:25:14.950 --> 00:25:17.230
You're going to have to kind of do it yourself.

00:25:17.230 --> 00:25:22.920
Fortunately on Apple dot com really wants to just get a
really nice experience going and the designers aren't going

00:25:22.920 --> 00:25:25.880
to be thrilled with us having spent all
this time on creating a nice interface.

00:25:25.880 --> 00:25:29.720
When they think interfaces, they obviously
want a really nice graphical user interface.

00:25:29.720 --> 00:25:31.539
This code really hasn't impressed them.

00:25:31.539 --> 00:25:36.659
We just want to get to this point where we can
work with QuickTime live, in the real world today,

00:25:36.660 --> 00:25:40.700
without having to revert back to document writing content.

00:25:40.700 --> 00:25:46.120
Once that's actually set though, we can actually
turn our attention to the plug-in API itself.

00:25:46.119 --> 00:25:52.869
Again we want to be able to integrate this
into our own components without too much fuss.

00:25:52.869 --> 00:25:55.129
We want to really feel like a part of our library.

00:25:55.130 --> 00:26:01.780
So we on Apple dot com created a QuickTime controller
class that we use to help communicate with the plug-in.

00:26:01.779 --> 00:26:04.769
This helps us get around some issues, as Kevin mentioned.

00:26:04.769 --> 00:26:11.079
Helps us abstract the plug-in itself and
get around some issues as Kevin mentioned.

00:26:11.079 --> 00:26:15.689
Right off the bat when you go insert one of the QuickTime
movies in the page, you're going to end up with 2 objects.

00:26:15.690 --> 00:26:18.490
The object and the embed depending on the script your using.

00:26:18.490 --> 00:26:21.329
Different browsers are going to look at different objects.

00:26:21.329 --> 00:26:25.869
We don't want to have to every time we write a
script, figure out which one we are talking to.

00:26:25.869 --> 00:26:29.149
So the custom control we created
is a great place to do this.

00:26:29.150 --> 00:26:32.480
You've read this code once and the control
is going to be able to, from then on,

00:26:32.480 --> 00:26:37.529
be the expert on which element it needs to talk to.

00:26:37.529 --> 00:26:40.509
Now its we want to be able to do that really easily,

00:26:40.509 --> 00:26:44.210
we exposed this API within the custom
control that simply attached to a movie.

00:26:44.210 --> 00:26:49.130
So we just give it the movie we just created in the previous
step and it's able to figure out the rest and then from now

00:26:49.130 --> 00:26:51.120
on we can use it as a proxy to the plug-in.

00:26:51.119 --> 00:26:53.029
Whenever we want to send events, it just delegates

00:26:53.029 --> 00:26:57.250
and send it right...and then it passes
the message right along to the plug-in.

00:26:57.250 --> 00:27:04.549
Plugging can take some time to get be responsive and
actually respond to events depending on the browser.

00:27:04.549 --> 00:27:08.919
Just in general can take some time but we don't
have the benefit of being able to wait for it

00:27:08.920 --> 00:27:11.570
to actually report that it's available and ready to begin.

00:27:11.569 --> 00:27:13.929
So we need somebody to stand in there and look at it.

00:27:13.930 --> 00:27:15.930
Now the controller knows which movie to look at.

00:27:15.930 --> 00:27:17.779
Its the obvious choice to just sit there and monitor.

00:27:17.779 --> 00:27:23.450
So we will set up a loop to just sit there and ping it.

00:27:23.450 --> 00:27:26.160
While it's doing that we can also have it emit events.

00:27:26.160 --> 00:27:33.400
So we've if your using a prototype..if you're using
DoJo or YUI or Mood tools or something allows your

00:27:33.400 --> 00:27:37.190
to fire custom events, you can do that
but we use the prototype Scriptaculus

00:27:37.190 --> 00:27:38.740
and we've exposed these function call backs.

00:27:38.740 --> 00:27:41.180
Which you can register call back functions to.

00:27:41.180 --> 00:27:47.490
So when the custom controller, monitoring the movie, hits
one of these events its a legit call we'll just call one

00:27:47.490 --> 00:27:50.470
of our call backs and we're able to execute code.

00:27:50.470 --> 00:27:55.960
This is really important point I'll make later,
but really the loss of the QT next pointing

00:27:55.960 --> 00:28:00.529
at the JavaScript protocol is
security concerns fairly recently.

00:28:00.529 --> 00:28:02.789
This is actually one of the few ways
that you're going to be able to tell

00:28:02.789 --> 00:28:07.059
when a movie is finished right now and do some activity.

00:28:07.059 --> 00:28:10.909
Also because we have the custom controller, we really
want to be able to talk to the movie in plain English.

00:28:10.910 --> 00:28:16.750
While it's great that we can actually the rate if
it's equal to zero, find out if it's playing or not.

00:28:16.750 --> 00:28:20.240
We really want to in our own components
being able to work at a much higher level,

00:28:20.240 --> 00:28:21.970
so it just feels again that we really need it.

00:28:21.970 --> 00:28:25.190
We want to be able to talk to this in
English, create our own vocabulary.

00:28:25.190 --> 00:28:31.150
Where working with QuickTime feels
very native and very non special.

00:28:31.150 --> 00:28:35.930
We really don't want it to be this
foreign object in our pages

00:28:37.319 --> 00:28:40.740
We might also want to time custom
behaviors when we send events,

00:28:40.740 --> 00:28:43.089
so for instance if we're caching the state of the movie.

00:28:43.089 --> 00:28:48.089
When we change the state of the movie
directly we might want to do something.

00:28:48.089 --> 00:28:50.730
This also allows us when certain events occur,

00:28:50.730 --> 00:28:53.940
when errors are thrown at a lower level
and communicating with the plug-in.

00:28:53.940 --> 00:28:59.049
We're able to capture those events and respond in
a way that we might want to make assumptions about.

00:28:59.049 --> 00:29:02.440
So for instance if we're asking a movie
that's played if we get a failure right now,

00:29:02.440 --> 00:29:05.299
we might just want to assume that the movie is not playing.

00:29:05.299 --> 00:29:07.779
You know this would be a place where
that's not the assumption you want

00:29:07.779 --> 00:29:09.460
to make, you have the ability now to change that.

00:29:09.460 --> 00:29:14.029
So if you'd rather cash the state of the movie and just
return that, you have a place to do that really easily.

00:29:14.029 --> 00:29:19.940
We can also use this to make estimations so if
we're keeping track where the movie is for instance

00:29:19.940 --> 00:29:23.809
to update a custom controller, and draw progress for.

00:29:23.809 --> 00:29:27.639
This would be where we're able to
keep track of where was the last time;

00:29:27.640 --> 00:29:30.740
if we get a failure on the plug-in we can guess
where it should be just by just by figuring

00:29:30.740 --> 00:29:33.170
out where it was and how long we waited until we checked.

00:29:33.170 --> 00:29:35.300
This helps just keep things looking really smooth even

00:29:35.299 --> 00:29:40.869
if the plug-in underneath is not
responding as much as we'd like.

00:29:40.869 --> 00:29:48.399
So anyways we just want to be able to extract to the plug-in
itself so it's not dealing with circuit 2000 technology.

00:29:48.400 --> 00:29:54.560
And we're going to use this to talk to the plug-in.

00:29:54.559 --> 00:29:57.119
Of course one of the things that we
really want to do on Apple dot com,

00:29:57.119 --> 00:30:01.599
its really one of the most requested
things is to use custom controllers.

00:30:01.599 --> 00:30:09.439
And so we've actually allowed the custom controller in code
to be represented and rendered in pages as DOM elements

00:30:09.440 --> 00:30:12.420
and update using the scriptaculus slider.

00:30:12.420 --> 00:30:18.140
I'd like to show you right now the demo
of the Apple dot com web site and its use

00:30:18.140 --> 00:30:26.630
of the custom controller and some
of the QuickTime stuff today.

00:30:26.630 --> 00:30:28.290
So this is live today.

00:30:28.289 --> 00:30:30.240
If you go to Apple dot com, you'll see this.

00:30:30.240 --> 00:30:33.150
Down at the bottom we have a movie player.

00:30:33.150 --> 00:30:36.030
With the poster frame, it's actually
really not a poster frame,

00:30:36.029 --> 00:30:38.619
it's not a movie its just a jpeg
which you use to click to play.

00:30:38.619 --> 00:30:45.049
We're actually not going to play that one right
now, we're just grab one of these other guys

00:30:45.049 --> 00:30:46.419
( movie start and plays )
starts playing the movie.

00:30:46.420 --> 00:30:51.360
You'll notice that there is a custom
controller which allows us to pause the movie

00:30:51.359 --> 00:30:52.209
( movie stops )

00:30:52.210 --> 00:30:52.920
play the movie

00:30:52.920 --> 00:30:53.160
( movie starts again )

00:30:53.160 --> 00:30:55.250
it also responds because it's polling

00:30:55.250 --> 00:30:55.519
( movie stops again )

00:30:55.519 --> 00:30:58.109
to us actually interacting with the plug-in itself.

00:30:58.109 --> 00:30:59.779
( movie starts again )
and it reflects in the correct state.

00:30:59.779 --> 00:31:04.009
( movie stops again )
I'm not sure if you saw it flash by, but there
is actually is a loading status in the queue.

00:31:04.009 --> 00:31:08.039
We get just by querying the progress of the movie itself.

00:31:08.039 --> 00:31:16.029
In addition because it's just a slider, we're able to
actually drag and send change events off to the plug-in

00:31:16.029 --> 00:31:19.720
through our custom controller and
have it update the state of the movie.

00:31:19.720 --> 00:31:19.809
( movie starts )

00:31:19.809 --> 00:31:23.859
Additionally like I said we're able to change the movie,

00:31:23.859 --> 00:31:24.939
( movie quiets but continues playing )

00:31:24.940 --> 00:31:28.500
because we have that whole set
URL API already baked in there.

00:31:28.500 --> 00:31:31.400
So we're able to progressively
advance our content of the page.

00:31:31.400 --> 00:31:33.280
All these are really just links directly to the movie.

00:31:33.279 --> 00:31:38.879
We extract the URL we're able to attach them to the movie
and send that off of to the custom controller and tell it

00:31:38.880 --> 00:31:41.760
to just update the movie that its attached to.

00:31:41.759 --> 00:31:48.559
We also have, like I said, custom events kind of
baked into this such that when the movie ends,

00:31:48.559 --> 00:31:52.809
we're actually going to throw an end state up.

00:31:52.809 --> 00:31:53.879
( movie ends )

00:31:53.880 --> 00:31:56.150
So there's an example of that.

00:31:56.150 --> 00:31:58.850
Really that is the only way you are
going to be able to do this at this point

00:31:58.849 --> 00:32:02.659
because we don't have the QT next to rely on.

00:32:02.660 --> 00:32:08.190
Lets see. Another example, and this is probably one of the
most impressive ones I think on Apple dot com right now.

00:32:08.190 --> 00:32:16.820
It's a lot of hard work by some really great developers that
builds upon the QuickTime library that we already have.

00:32:16.819 --> 00:32:17.769
This is our Leopard site.

00:32:17.769 --> 00:32:22.250
There we go.

00:32:22.250 --> 00:32:29.519
And these actually pop up the movie, video window
and I think it's still loading but the movie

00:32:29.519 --> 00:32:34.279
( movie plays )
actually load in the pop-up and you're
allowed to navigate throughout them.

00:32:34.279 --> 00:32:38.119
It's a really nice seamless integrate
experience that our designers are going for.

00:32:38.119 --> 00:32:42.889
One of the best things about this was, as I was
looking at around the web at some of the comments.

00:32:42.890 --> 00:32:45.170
People were defiantly mistaking
this for some other technology.

00:32:45.170 --> 00:32:47.120
Assuming we used something else to get this going.

00:32:47.119 --> 00:32:49.779
So I'm taking this as a compliment
that they really didn't understand

00:32:49.779 --> 00:32:54.119
that this was just QuickTime and the JavaScript.

00:32:54.119 --> 00:32:56.729
You know we all have access to really easily.

00:32:56.730 --> 00:33:03.480
So back to the slides, I have some
information about how we actually work

00:33:03.480 --> 00:33:07.240
around some of the issues we run into in doing this.

00:33:07.240 --> 00:33:12.160
For instance when you are working with Firefox,
the plug-in..Actually I think this actually occurs

00:33:12.160 --> 00:33:15.980
in Safari too now that I after some
experience before these files are finalized

00:33:15.980 --> 00:33:17.910
to work in the last minutes for the redesign.

00:33:17.910 --> 00:33:20.970
Plug-ins are only available while
they are visible in the view port,

00:33:20.970 --> 00:33:23.870
so you really can't talk to the
plug-in while it's off screen.

00:33:23.869 --> 00:33:26.449
You can't talk to it while it's hidden while it's visible.

00:33:26.450 --> 00:33:30.230
So these are just some of the things that you
need to keep in mind while you're working with it.

00:33:30.230 --> 00:33:32.700
That just..yeah.

00:33:32.700 --> 00:33:39.069
Firefox also kind of bogs down a bit so if your
actually pinging it quite a bit its plug-in seems

00:33:39.069 --> 00:33:40.269
to fail a bit more often.

00:33:40.269 --> 00:33:44.970
So this makes the custom controller all the more important
because now you have a place to handle those appropriately

00:33:44.970 --> 00:33:50.390
and not expose them to higher level component
that really don't care most of the time.

00:33:50.390 --> 00:33:57.770
Internet Explorer, Internet explorer because
of the obviously the garbage collection issue

00:33:57.769 --> 00:34:02.129
of the circular references between
the DOM and the JavaScript objects.

00:34:02.130 --> 00:34:06.620
You have to be really careful that when you
create a movie and you maintain a reference.

00:34:06.619 --> 00:34:08.329
The DOM object that you eventually do clear it.

00:34:08.329 --> 00:34:11.549
Otherwise you can actually with
the movie persisting across pages.

00:34:11.550 --> 00:34:15.230
So you can browse to another persons web
site and your movie will still be playing.

00:34:15.230 --> 00:34:20.050
Which you know might be great from a marketing start
point, 'cause now you've branded other peoples web sites.

00:34:20.050 --> 00:34:23.120
Your visitors really really aren't going to appreciate that.

00:34:23.119 --> 00:34:25.880
Additionally you're leaking memory
at that point, which can be an issue.

00:34:25.880 --> 00:34:27.950
So you just need to be really careful about that.

00:34:27.949 --> 00:34:35.399
So just tying the movie usually works pretty well
honestly, but you can still have audio playing.

00:34:35.400 --> 00:34:39.680
So just make sure that you keep track
of the references as you're doing this.

00:34:39.679 --> 00:34:44.259
Additionally if your trying to position a movie, absolutely
somewhere within the page you'll sometimes see a kind

00:34:44.260 --> 00:34:51.110
of drawn in from the top left and one of the solutions
to that is prior to you showing just tip the visibility

00:34:51.110 --> 00:34:54.460
of it hidden until it gets into place
and the movie is already situated.

00:34:54.460 --> 00:34:56.619
You won't see it.

00:34:56.619 --> 00:35:01.819
As your working with Opera, well it
doesn't have a JavaScript API as of now.

00:35:01.820 --> 00:35:08.120
So I'd advise that you play really nicely with
Opera because it does handle QuickTime very well,

00:35:08.119 --> 00:35:11.219
but you're going to have to you know keep it in mind

00:35:11.219 --> 00:35:15.509
that you can't do all the fancy set URL
stuff for monitor, custom controllers.

00:35:15.510 --> 00:35:17.900
So it's just a matter or progressively
enhancing what you already have.

00:35:17.900 --> 00:35:22.070
For instance all the links on the bottom
of the Apple dot com movie switch.

00:35:22.070 --> 00:35:27.410
Again they start as movie links, so if you don't have
JavaScript at all they link right to the movies.

00:35:27.409 --> 00:35:31.920
If you're in Opera and you don't have the Java
script API we actually rewrite the URL to point back

00:35:31.920 --> 00:35:34.519
to the page with that movie initially loaded.

00:35:34.519 --> 00:35:37.750
So you still get that functionality in
Opera that when you click the bottom,

00:35:37.750 --> 00:35:40.079
you'll actually load the page with
the movie that you're expecting.

00:35:40.079 --> 00:35:44.299
It's not going to be as nice but its going to work
and people are going to appreciate the effort.

00:35:44.300 --> 00:35:48.039
So just some obtrusive JavaScripting
and progressive enhancement,

00:35:48.039 --> 00:35:51.759
all the stuff that you're already
used to makes life a lot easier.

00:35:51.760 --> 00:35:58.320
Fire works pretty damned well actually,
surprisingly, perhaps not.

00:35:58.320 --> 00:36:01.830
So you shouldn't have too many issues with that.

00:36:01.829 --> 00:36:08.630
And some really useful parameters I found in working with
the object and the embed tags are the show logo false

00:36:08.630 --> 00:36:10.840
because people don't need to see the queue.

00:36:10.840 --> 00:36:14.329
They are going to know when you're use
it that the quality of the video is there

00:36:14.329 --> 00:36:16.799
and it's QuickTime and if they don't that's fine.

00:36:16.800 --> 00:36:19.410
They'll still appreciate the high quality video.

00:36:19.409 --> 00:36:23.559
Additionally the save embed tags, if you're going to
start doing movie swapping it becomes really important

00:36:23.559 --> 00:36:25.309
that probably want to save the embed tags.

00:36:25.309 --> 00:36:26.659
'Cause other wise you wipe them away.

00:36:26.659 --> 00:36:31.789
So if you set the controller false initially, and
then you switch the movie without saving embed tags,

00:36:31.789 --> 00:36:35.670
you're going to get the controller
back and you probably don't want that.

00:36:35.670 --> 00:36:40.329
So you probably want to save the
embed tags you originally set on it.

00:36:40.329 --> 00:36:48.159
So in general in working with QuickTime within JavaScript
and HTML TSS without relying on proprietary solutions,

00:36:48.159 --> 00:36:54.069
you really want to be able to course JavaScript
to kind of fit in with everything that you're doing

00:36:54.070 --> 00:36:56.600
and make it feel like a part of your own library.

00:36:56.599 --> 00:36:59.659
You don't want it to be a special case you're working on.

00:36:59.659 --> 00:37:06.079
It's just good design, object orientation, oriented
methodologies really help make it easy to work with

00:37:06.079 --> 00:37:09.869
and your able to really build some
spectacular components just by compositing

00:37:09.869 --> 00:37:13.730
with all the other stuff your working on.

00:37:13.730 --> 00:37:15.079
I think that's pretty much it.

00:37:15.079 --> 00:37:18.529
I'd like to bring up Todd up on stage
to talk about some of his usage.

00:37:18.530 --> 00:37:19.200
Thank you

00:37:19.199 --> 00:37:19.539
( applause )

00:37:19.539 --> 00:37:25.480
>>Todd: Hi.

00:37:29.500 --> 00:37:36.570
I think we all saw Steve demoed the widget
during his Keynote so you're probably with that.

00:37:36.570 --> 00:37:38.570
What were going to look at here.

00:37:42.880 --> 00:37:46.730
And one thing that I want to say up front so I'm just
going to talk about a couple of implementation details

00:37:46.730 --> 00:37:50.949
for the movie widget and also talk about how
the movie widget uses the QuickTime plug-in

00:37:50.949 --> 00:37:52.559
to display movie trailers.

00:37:52.559 --> 00:37:56.480
Something that's really interesting about the movie
widget is that it does not use a widget plug-in.

00:37:56.480 --> 00:38:03.740
It does everything that it does to once again
standard web technologies, HTML, JavaScript and CSS.

00:38:05.090 --> 00:38:06.160
So what's a widget plug-in?

00:38:06.159 --> 00:38:10.519
If you've done widget development in the past, you're
probably familiar with the concept of widget plug-in.

00:38:10.519 --> 00:38:13.380
Its a plug-in type specific to
Dashboard widget development.

00:38:13.380 --> 00:38:18.000
It allows you to access native services of the
platform that may not normally be available to you

00:38:18.000 --> 00:38:21.880
through JavaScript or other web technologies in the widget.

00:38:21.880 --> 00:38:26.450
So widget developers often use widget plug-ins if
they're doing something maybe really sophisticated

00:38:26.449 --> 00:38:31.509
in the user interface, or they're accessing some kind of
API on the system that's not available to JavaScript.

00:38:31.510 --> 00:38:33.800
And once again the movies that widget
doesn't have to resort to this.

00:38:33.800 --> 00:38:37.670
Everything once again is like a broken
record here but everything is HTML,

00:38:37.670 --> 00:38:43.450
JavaScript and CSS so it's a good example of the kind
of sophisticated user interfaces in rich media interfaces

00:38:43.449 --> 00:38:48.710
that you can get through web technologies
in the QuickTime plug-in.

00:38:48.710 --> 00:38:53.880
In a lot of the Apple widgets and also the third party
widget used AJAX to communicate with the remote web services

00:38:53.880 --> 00:38:57.550
and fetch XML resources and then display
that information in the user interface

00:38:57.550 --> 00:39:00.530
and the movie widget is another
one of those widget's obviously.

00:39:00.530 --> 00:39:06.370
When you first launched the widget, obviously it
communicated with a fandango remote web service

00:39:06.369 --> 00:39:08.019
and fetches the movies that are playing in your area.

00:39:08.019 --> 00:39:13.210
And then it displays this for obtaining
animation of the movie posters.

00:39:13.210 --> 00:39:19.710
It actually uses a couple of JavaScript classes that
we've released as OS XTiger10 dot four dot three.

00:39:19.710 --> 00:39:23.720
We released a collection of JavaScript classes
that you can reuse in your Dashboard widgets.

00:39:23.719 --> 00:39:28.679
These classes actually work across all the
modern browsers, so you can reuse these classes

00:39:28.679 --> 00:39:31.429
in your web applications as well
and they can be really useful

00:39:31.429 --> 00:39:36.019
So let's kind of point out the reusable Dashboard
JavaScript classes that the widget uses as I see them

00:39:36.019 --> 00:39:40.309
in the user interface but you can see right
away that it uses a class called Apple animator

00:39:40.309 --> 00:39:45.029
that does handles this animation for
the movie posters of the beginning here.

00:39:46.719 --> 00:39:52.599
So many go ahead to click the widget to expand it and you
notice that whatever poster I click on comes preselect

00:39:52.599 --> 00:39:55.679
in the user interface when the movies widget expands.

00:39:55.679 --> 00:40:00.319
So it's got 2 states here I can click at the top again
and it will shrink back down to the to the small state

00:40:00.320 --> 00:40:03.530
and if I click it again it expands to the expanded state.

00:40:05.150 --> 00:40:09.150
So the first feature we should probably talk about
its really obvious is there's this calm view.

00:40:09.150 --> 00:40:13.900
This is obviously happily inspired
by the OS X finder column view

00:40:13.900 --> 00:40:20.690
and in the finder there's a coco objective C class
called AS browser, and in the movies widget there is kind

00:40:20.690 --> 00:40:22.829
of a JavaScript equivalent of that class.

00:40:22.829 --> 00:40:27.340
It's heavily inspired by the API MNS browser
that we call the Apple browser for this widget.

00:40:27.340 --> 00:40:31.180
It's a reusable JavaScript classic
it can create this user interface,

00:40:31.179 --> 00:40:37.359
and it also has an associated JavaScript delegated API
that you can implement in your application or widget.

00:40:37.360 --> 00:40:42.380
And the use that to fill up the user interface
with custom data for your application.

00:40:42.380 --> 00:40:48.230
So be curious how we did the code for this calm browser
up to, you can just take it that the Java to the widget

00:40:48.230 --> 00:40:50.349
and even copy paste your own applications.

00:40:50.349 --> 00:40:52.730
We don't mind if you look in there so..

00:40:54.429 --> 00:41:01.109
As you can see that this is fully operational
column view done in HTML, JavaScript and CSS.

00:41:01.110 --> 00:41:08.940
Can also be clicked theaters or movies the
browser view will resort currently we have movies

00:41:08.940 --> 00:41:11.099
on the left side in the first column.

00:41:11.099 --> 00:41:15.639
Click theaters, now it's sorted by theaters and then the
movies for each theater displayed in the second column.

00:41:15.639 --> 00:41:22.319
And this is just 3 HTML UL elements, and
each movie item reached, time item reached,

00:41:22.320 --> 00:41:25.960
theater item is just HTML list item elements.

00:41:25.960 --> 00:41:28.250
These are just standard HTML.

00:41:31.780 --> 00:41:37.790
So obviously the center piece of this widget is really
about the trailer playback with the QuickTime plug-in.

00:41:37.789 --> 00:41:42.829
So I'm going to go see "Fantastic Four" tomorrow
so let's take a quick look at the trailer here.

00:41:42.829 --> 00:41:50.440
( movie plays )

00:41:50.440 --> 00:42:06.130
So once again this actually uses a lot of features
you've already heard about in this session today.

00:42:06.130 --> 00:42:09.500
Obviously we've got a custom dHTML
controller here at the bottom.

00:42:09.500 --> 00:42:15.440
So using the same controller equals false
attribute on the embed or object HTML element.

00:42:15.440 --> 00:42:20.400
To remove the standard QuickTime controller so
that we can add our own custom to HTML controller

00:42:20.400 --> 00:42:25.980
and then of course we're using the Java API you've heard
Kevin and Mike talk about today to control the widget.

00:42:25.980 --> 00:42:29.300
Very similar to what you see in Apple dot com.

00:42:29.300 --> 00:42:32.600
A couple of the other Apple classes
are being used in the interface here.

00:42:32.599 --> 00:42:39.179
There's actually an Apple class called Apple slider, and
we're using that for the controller progress meter down here

00:42:39.179 --> 00:42:43.210
and we're obviously we've customized
with some custom CSS and HTML.

00:42:43.210 --> 00:42:51.010
But it's just for using another standard class
you've got available since OS X, 10.4.3.

00:42:51.010 --> 00:42:55.970
You'll notice as we load any theater, you'll also get
a progress indicator sliding across behind the slider.

00:42:55.969 --> 00:42:56.949
It's kind of subtle to.

00:42:56.949 --> 00:42:59.279
I'm not sure how well you can see on the screen here,

00:42:59.280 --> 00:43:03.210
but again we're just using the same
APIs that Kevin talked about earlier.

00:43:03.210 --> 00:43:06.900
He mentioned there is an older polling
style if usage of the API to get that kind

00:43:06.900 --> 00:43:09.230
of progress indicator in your user interface.

00:43:09.230 --> 00:43:11.030
Versus the newer DOM media events.

00:43:11.030 --> 00:43:17.630
The DOM media events API is so new we actually didn't even
have time to implement the movies widget using that new API,

00:43:17.630 --> 00:43:21.059
for today but we're definitely looking
forward to using that before Leopard shifts

00:43:21.059 --> 00:43:26.849
because the movies widget will really significantly
benefit from that simplified API but you can kind

00:43:26.849 --> 00:43:30.960
of see the progress meter going across the bottom.

00:43:30.960 --> 00:43:40.539
( movie plays )
and the QuickTime plug-in, I mean it's really great.

00:43:40.539 --> 00:43:45.179
You can abuse the slider as much as you want,
and the movie keeps up and everything works.

00:43:45.179 --> 00:43:47.069
Works extremely well again just web technology.

00:43:47.070 --> 00:43:49.120
It's really great now what you can
do with the QuickTime plug-in.

00:43:49.119 --> 00:43:51.699
A couple of things that I wanted to
mention about the browsers that I forgot

00:43:51.699 --> 00:43:54.960
to mention was it actually has
full keyboard navigate abilities.

00:43:54.960 --> 00:44:01.269
So also I'm going to use just the up and down arrows here
to switch to the com view as I'm not using the mouse.

00:44:01.269 --> 00:44:07.800
Just the kind of interactivity you'd expect
from a native user interface like Coco or Aqua.

00:44:07.800 --> 00:44:12.150
And also you can use the right and
left keys to switch between columns.

00:44:12.150 --> 00:44:16.680
Then also I can hold down and get
the kind of auto repeat action.

00:44:19.070 --> 00:44:21.120
But those are some of the features of the movies widget.

00:44:21.119 --> 00:44:22.859
I hope you guys really enjoy.

00:44:22.860 --> 00:44:28.400
I think it's going to be pretty exciting
widget for Leopard and that's all I've got.

00:44:30.980 --> 00:44:32.300
Thanks

00:44:32.300 --> 00:44:38.330
( applause )

00:44:38.329 --> 00:44:42.289
>>Kevin: Stay turned for the sequel
movies widget rounded corners.

00:44:42.289 --> 00:44:45.179
How did he do that?

00:44:45.179 --> 00:44:49.509
Oh well where's the...there you go.

00:44:49.510 --> 00:44:54.050
Ok. So to wrap this part of the session
before we get to some questions.

00:44:54.050 --> 00:45:00.700
If I could invite Eric Carlson to come up on stage,
who knows the one more thing even better than I do.

00:45:00.699 --> 00:45:02.399
If we could get the podium mike up for Eric.

00:45:02.400 --> 00:45:05.970
He's going to walk us through the one more one more thing.

00:45:07.170 --> 00:45:08.420
>>Eric: One more thing.

00:45:08.420 --> 00:45:17.500
Anybody who has been to the sessions in this track has
probably seen this slide, but it's really important

00:45:17.500 --> 00:45:23.389
as your designing web pages and web applications.

00:45:23.389 --> 00:45:27.279
Keep the keep the Phone in mind.

00:45:27.280 --> 00:45:30.830
Because you want your content to work there are well.

00:45:30.829 --> 00:45:34.199
Remember best design practices

00:45:34.199 --> 00:45:39.319
You want column lay out, size matters.

00:45:39.320 --> 00:45:46.480
Remember that band width available on phone can fluxuate

00:45:46.480 --> 00:45:54.199
and you want your you want your
content to deal to it well with that.

00:45:54.199 --> 00:46:04.079
Use media queries, they can help you adapt your
content to the settings that it's running one.

00:46:04.079 --> 00:46:06.989
Optimize for the iPhone.

00:46:06.989 --> 00:46:17.869
Remember the viewport code for double tap.

00:46:17.869 --> 00:46:25.619
Make sure that your content deals
with text size adjustments.

00:46:25.619 --> 00:46:38.150
Deal with DOM events and remember when you have media
and to in code appropriate appropriately for the Phone.

00:46:38.150 --> 00:46:51.340
Use reference movies so that phone can pick the content
that most appropriate for the conditions on the Phone.

00:46:51.340 --> 00:46:57.210
And...why don't we go to the next one.

00:46:57.210 --> 00:46:57.659
>>Kevin: Alright.

00:46:57.659 --> 00:47:05.549
So if you're looking for more information on these topics
or places to research on the stuff we've been talking

00:47:05.550 --> 00:47:10.920
about there are some URLs that are useful to you.

00:47:10.920 --> 00:47:12.659
For example the object detection URL.

00:47:12.659 --> 00:47:14.309
What did we add this one?

00:47:14.309 --> 00:47:15.590
That's for the Phone.

00:47:15.590 --> 00:47:18.079
ahhh this is for the Phone.

00:47:18.079 --> 00:47:20.119
You want to talk to these?

00:47:20.119 --> 00:47:26.779
Sure Mark Malone is the Internet technologies evangelist.

00:47:26.780 --> 00:47:34.350
Contact him for more information or
help on things either for the Phone

00:47:34.349 --> 00:47:37.420
or for the Apple's other Internet technologies.

00:47:37.420 --> 00:47:53.599
And here we have some useful URLs for finding out more
about coding for the Phone and also for the standard groups.

00:47:53.599 --> 00:48:07.750
The W3C media query and the HTML5 HTML5
spec that that's currently being developed.

00:48:09.340 --> 00:48:09.559
>>Unknown speaker: Ok.

00:48:09.559 --> 00:48:12.599
These are the URLs that I was prepared to talk about.

00:48:12.599 --> 00:48:17.589
The first URL there the tutorial on the
embed tells you all you need to know

00:48:17.590 --> 00:48:21.780
about formulating the embed tags for
the QuickTime plug-in on your own.

00:48:21.780 --> 00:48:27.269
The second URL there, the scripting dash
title URL gives you complete documentation

00:48:27.269 --> 00:48:30.619
on the current JavaScript API of the QuickTime plug-in.

00:48:30.619 --> 00:48:36.759
And we'll be updating that document to cover the new
features that we are adding the the Leopard time frame.

00:48:36.760 --> 00:48:42.020
Eric also mentioned that to cover multiple devises,
you'll want to use QuickTime reference movies

00:48:42.019 --> 00:48:48.780
to allow the run time installed version of Quick
Time to choose the appropriate movie for the device

00:48:48.780 --> 00:48:51.490
under the conditions that are currently pertain.

00:48:51.489 --> 00:48:59.229
In order to create those reference movies and learn more
about them, go to the that make movie 2 URL at the bottom.

00:48:59.230 --> 00:49:04.659
If you are interested in the QuickTime seating
program, you want to get your hands on this technology.

00:49:04.659 --> 00:49:11.219
The enhancements to the plug-in that we've talked about
today are not in your WWDC Leopard seed, unfortunately.

00:49:11.219 --> 00:49:17.409
But you can participate in the QuickTime seating program
and get these things to try out before they go final,

00:49:17.409 --> 00:49:21.940
contact the Apple representative at that email address.

00:49:21.940 --> 00:49:24.909
CQT@Apple dot com to get involved in that program.