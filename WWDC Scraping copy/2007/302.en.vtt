WEBVTT

00:00:20.109 --> 00:00:25.600
>> My name's Matthew Formica, I'm the Developer Tools
Software Evangelist in Apple's Developer Relations Group

00:00:25.600 --> 00:00:29.420
and this session is Getting Started with Xcode.

00:00:29.420 --> 00:00:34.039
So as you may have seen in the
previous session in this room,

00:00:34.039 --> 00:00:39.679
Xcode is the integrated development environment you'll
use to write your code on Mac OS X and it's got a lot

00:00:39.679 --> 00:00:46.450
of advanced features; features you've probably
seen demo'd yesterday in the state of the union.

00:00:46.450 --> 00:00:53.310
But if you're new to Mac OS X Development with Xcode you may
be wondering how do the standard every day features work.

00:00:53.310 --> 00:00:58.790
How do you use Xcode in a regular work
flow and how do you get the fuller picture

00:00:58.789 --> 00:01:01.619
of what Xcode can do and that's what this session is for.

00:01:01.619 --> 00:01:05.359
How many of you were at the earlier session?

00:01:05.359 --> 00:01:06.370
Okay, a chunk of you.

00:01:06.370 --> 00:01:11.450
How many of you are relatively new to Mac OS X Development?

00:01:11.450 --> 00:01:14.040
Good, then this is the right session for you.

00:01:14.040 --> 00:01:18.390
This is going to be a session for you if you are
new to Xcode or to the Mac and if you're doing one

00:01:18.390 --> 00:01:23.879
of the two types of, two of the types of development that
were talked about in the state of the union yesterday.

00:01:23.879 --> 00:01:30.089
Writing native code for the Mac or doing
open source development on the Mac.

00:01:30.090 --> 00:01:37.650
What we're going to cover is the basics of Xcode 3.0, starting
with first steps and first launch of Xcode all the way

00:01:37.650 --> 00:01:42.340
through the development cycle: editing,
building and debugging your code.

00:01:42.340 --> 00:01:47.090
And you're going to see all of
this in both slides and demos.

00:01:47.090 --> 00:01:50.510
So let's jump right in.

00:01:50.510 --> 00:01:56.939
Xcode ships with Leopard when you install the development
tools they'll live in /Developer by default,

00:01:56.939 --> 00:01:59.539
that's where you can find them on your hard drive.

00:01:59.540 --> 00:02:05.110
And I should make one note, which is that Xcode 2.4.1
is the current shipping version

00:02:05.109 --> 00:02:11.050
on Tiger our current GM release, but we're not going
to be talking about that version in this session.

00:02:11.050 --> 00:02:18.260
You can see when you open the developer folder
that Xcode will be one of the icons in that folder

00:02:18.259 --> 00:02:21.469
in the applications directory inside of that folder.

00:02:21.469 --> 00:02:28.710
And when you double click it for the first time, you'll
get a new user assistant that looks something like this.

00:02:28.710 --> 00:02:34.290
The assistant's going to help you with
some basic configuration as you get set up.

00:02:34.289 --> 00:02:39.500
The first thing it's going to ask you is
where do you want to save intermediated files

00:02:39.500 --> 00:02:42.889
for your build and final results and products.

00:02:42.889 --> 00:02:47.289
And generally, the defaults are fine
you can just click through that.

00:02:47.289 --> 00:02:53.769
The other thing it'll ask you is do you want your
window configuration to be saved when you quit Xcode

00:02:53.770 --> 00:02:58.400
so that when you launch it again the next time all
those windows will come back where they were.

00:02:58.400 --> 00:03:02.830
Some people like it, some people don't, it's your choice.

00:03:02.830 --> 00:03:08.210
After setting up your initial configuration you'll be
presented with the Xcode news panel and this will show

00:03:08.210 --> 00:03:15.280
up whenever you launch Xcode to give you up to the minute
information about new updates to Xcode, documentation tips

00:03:15.280 --> 00:03:17.909
and tricks, links to sample code and so on.

00:03:17.909 --> 00:03:25.439
It's a great jumping off point to explore the
documentation and find out about what's new with Xcode.

00:03:27.250 --> 00:03:32.819
Typically as you get started on a project you
won't actually be starting with a blank project.

00:03:32.819 --> 00:03:39.159
Instead you'll choose from one of the templates that we
have that are preconfigured for building all kinds of things

00:03:39.159 --> 00:03:46.329
on Mac OS X. these templates give you prewritten
source code and projects that are designed

00:03:46.330 --> 00:03:52.700
to help get you started whether you're trying to build
basic Cocoa applications or screen saver plug ins,

00:03:52.699 --> 00:04:00.289
kernel extensions or whatever else
you're trying to build on the platform.

00:04:00.289 --> 00:04:05.280
Once you pick a template, give it a name,
you'll be presented with the project window.

00:04:05.280 --> 00:04:12.409
And if you're coming over from Visual Studio I believe their
word for this is solution, in Xcode we call them projects.

00:04:12.409 --> 00:04:16.029
It's basically the container where
you'll do all of your development.

00:04:16.029 --> 00:04:22.859
And the project window has a variety of different components
to it; first of all there's the tool bar with a variety

00:04:22.860 --> 00:04:26.699
of easy access buttons to do things
like building and cleaning.

00:04:26.699 --> 00:04:30.990
Some of them have a little triangle on the edge, and if
you click and hold you'll actually get a little pop down

00:04:30.990 --> 00:04:35.949
and it gives you extended choices
for more things you can do.

00:04:35.949 --> 00:04:42.420
On the left side of your project window is the
groups and files list and this is where you're going

00:04:42.420 --> 00:04:47.290
to see all the source files in your project as well
as any resources you may have associated with it.

00:04:47.290 --> 00:04:52.590
At the bottom there is actually additional
other groups for special purposes.

00:04:52.589 --> 00:04:58.209
For example, your find results can show up there so you
can easily jump back to previous finds that you did.

00:04:58.209 --> 00:05:04.399
You could also see for example all the symbols
in your project by going to the right group.

00:05:05.839 --> 00:05:12.750
The right hand side of the project window is the detail
view and this will either show you a list of files

00:05:12.750 --> 00:05:18.240
in a particular folder in your project or it can
actually show you the actual contents of a file.

00:05:18.240 --> 00:05:23.019
You could also double click source
files to open them in a separate window.

00:05:25.870 --> 00:05:28.550
Typically as you're working on code you'll want to bring

00:05:28.550 --> 00:05:32.079
up our full documentation viewer,
this is what the window looks like.

00:05:32.079 --> 00:05:39.399
And it gives you nice documentation sets; grouping
various APIs and functionality in Mac OS X.

00:05:39.399 --> 00:05:45.159
And you can actually subscribe to feeds for these
different sets you get automatically notified

00:05:45.160 --> 00:05:46.980
when the documentation is updated.

00:05:46.980 --> 00:05:52.230
And when you're doing searches, you can search
on specific strings in the documentation,

00:05:52.230 --> 00:05:55.830
on particular APIs or even titles of documents.

00:05:55.829 --> 00:06:00.240
So there's a lot of flexibility here
for finding things in the documentation.

00:06:03.110 --> 00:06:07.620
Okay, so you've got your basic project set
up, you know where to find documentation.

00:06:07.620 --> 00:06:12.180
You'll probably spend most of the time in
your development process in the code editor.

00:06:12.180 --> 00:06:15.319
So let's talk about that next.

00:06:15.319 --> 00:06:20.500
Xcode's code editor does what you would
expect any powerful code editor to do.

00:06:20.500 --> 00:06:25.410
It helps you write code quickly and easily
with a smooth work flow via such features

00:06:25.410 --> 00:06:31.210
as syntax coloring, bookmarks, various pop ups and so on.

00:06:31.209 --> 00:06:38.649
Here's a screen shot of Xcode's code editor, you can see
the syntax coloring, you can actually customize that.

00:06:38.649 --> 00:06:42.519
It also has a tool bar on top that
gives you similar quick access

00:06:42.519 --> 00:06:47.109
as the project window did to things
like building and cleaning.

00:06:47.110 --> 00:06:56.740
Below the main toolbar is a little mini pop up bar that
let's you quickly jump through things like all the headers

00:06:56.740 --> 00:07:02.240
that you have included in this particular source
file, so you can easily navigate your code.

00:07:02.240 --> 00:07:10.800
And Xcode has code completion, there's two styles
actually; one is the mail style complete and place

00:07:10.800 --> 00:07:16.560
and you can also have Xcode give you a full
function pop up that gives you all the choices.

00:07:16.560 --> 00:07:25.100
Either way it's going to complete as you type
and reduce the amount of typing you have to do.

00:07:25.100 --> 00:07:29.900
As we demo'd yesterday in the state of the
union, Xcode has code folding and code focus.

00:07:29.899 --> 00:07:35.739
You can collapse chunks of code so you can get a
better picture of the layout of your source file

00:07:35.740 --> 00:07:42.189
and the particular chunk of code
you actually want to work on.

00:07:42.189 --> 00:07:45.100
And message bubbles are also imbedded in Xcode's code editor.

00:07:45.100 --> 00:07:49.510
This allows you to see errors and warnings for your
code when you're building without having to jump

00:07:49.509 --> 00:07:54.569
to some other build results panel that might
be obscuring the code that you just wrote.

00:07:54.569 --> 00:08:01.209
So Xcode's editor goes beyond simple things like syntax
coloring and indentation to providing you a rich environment

00:08:01.209 --> 00:08:04.199
for your complete work flow as you work on your application.

00:08:04.199 --> 00:08:08.680
And at this time I'd like to bring up
Scott Tooker to do a demo of the editor.

00:08:08.680 --> 00:08:21.340
>> So just to give a little overview here, the project we're
looking at is sketch which you can actually find as one

00:08:21.339 --> 00:08:24.389
of the developer examples on your developer DVD.

00:08:24.389 --> 00:08:27.969
Just a quick question, how many people
here are coming from a Windows background?

00:08:27.970 --> 00:08:31.730
UNIX background?

00:08:31.730 --> 00:08:37.379
Okay. One thing I wanted to point out is I'm working
here in what's called the grouped editor mode.

00:08:37.379 --> 00:08:40.179
We're going to be staying mostly in editor for this demo.

00:08:40.179 --> 00:08:43.189
The Xcode does allow you to have one window per file,

00:08:43.190 --> 00:08:46.870
but for the purposes of this demo we
wanted to show off the group mode.

00:08:46.870 --> 00:08:54.860
So I'm your tour guide and I'm going to start off by
showing you the navigation bar part of the editor.

00:08:54.860 --> 00:09:00.620
This is this thin strip up here and
everything in here is about getting,

00:09:00.620 --> 00:09:04.110
moving within your file or moving
to different related files.

00:09:04.110 --> 00:09:07.430
And so the one part you'll use the
most, probably over ninety percent

00:09:07.429 --> 00:09:10.250
of the time is the function pop up or symbol pop up.

00:09:10.250 --> 00:09:18.299
So you notice here what I get is I get a layout of here, all
the, here's all the symbolic information in this file kind

00:09:18.299 --> 00:09:21.199
of laid out as you'd find it moving through the file.

00:09:21.200 --> 00:09:24.840
So for example I can click on mouse
down, it takes me to mouse down.

00:09:24.840 --> 00:09:31.050
Now we also support, if you hold down option
key, you can get an alphabetical listing.

00:09:31.049 --> 00:09:36.000
So in some cases depending on how the files laid out it's
easier to go with alphabet, sometimes it's better to go

00:09:36.000 --> 00:09:38.340
with how the original author laid out the file.

00:09:38.340 --> 00:09:45.660
Some of the other ways we can get around
files as Matt pointed out is bookmarks.

00:09:45.659 --> 00:09:50.679
So, for example, right now I've got one in here,
it says start here for the debugging demo.

00:09:50.679 --> 00:09:54.669
And you'll notice that just jumps
me to a given selection in the code.

00:09:54.669 --> 00:10:03.250
You can also, for example, if I wanted to go to the top and
be able to jump where my imports are, you can select a range

00:10:03.250 --> 00:10:09.080
and then go to edit, add to bookmarks,
it's command D just like Safari.

00:10:09.080 --> 00:10:12.900
And by default we'll offer to label this
with the line you started your selection on,

00:10:12.899 --> 00:10:16.129
but I can name if anything I want
so for example, my My Imports.

00:10:16.129 --> 00:10:24.689
And then this will show up in the little bookmark
pop up here and I can just jump around my code.

00:10:24.690 --> 00:10:30.560
This is really useful when you're exploring code or
when you're dealing with code you know intimately

00:10:30.559 --> 00:10:36.419
and you just want to have some metadata that allows you
to quickly get to places but you don't necessarily want to

00:10:36.419 --> 00:10:40.879
or you may not be able to edit the file itself.

00:10:40.879 --> 00:10:47.779
Some other things we provide and this is new to, this next
one's new to Xcode 3.0 is we provide class navigation now.

00:10:47.779 --> 00:10:53.929
So for example you'll notice I popped on, I bring
up the C here and I can see the super classes

00:10:53.929 --> 00:10:57.349
for this class, I can also see categories on it.

00:10:57.350 --> 00:11:02.500
And so let's jump to NS View and so you
can see here, here are the super classes

00:11:02.500 --> 00:11:07.509
of NS View itself, various subclasses and categories.

00:11:07.509 --> 00:11:10.309
And for those of you that have
had experience with Objective-C,

00:11:10.309 --> 00:11:15.879
you know that categories sometimes can be especially
interesting to find since they may end up in different files

00:11:15.879 --> 00:11:23.019
and so this is a convenient way to see
all the potential categories on a class.

00:11:23.019 --> 00:11:27.110
Now for those of you who aren't doing a lot of object
oriented programming, maybe you're more C based, for example,

00:11:27.110 --> 00:11:32.110
or C++, we also provide an include pop up.

00:11:32.110 --> 00:11:37.870
And so here what we're showing you is what is included
by this file and then which files include this

00:11:37.870 --> 00:11:42.210
and so this provides you a nice way to kind
of move up and down in your include hierarchy.

00:11:42.210 --> 00:11:47.879
Now you may notice that when I'm using either the
include hierarchy or I'm using the class navigator,

00:11:47.879 --> 00:11:52.149
it takes you to the definitions
of the classes or the headers.

00:11:52.149 --> 00:11:55.590
So, well, how do I get quickly back to my implementation.

00:11:55.590 --> 00:11:58.190
Well in this case we provide what's called the counterpart,

00:11:58.190 --> 00:12:03.490
so here I'm in SKTGraphicView.h,
which is my definition.

00:12:03.490 --> 00:12:08.940
But I can just click this little button here to
swap quickly to the implementation for that file.

00:12:08.940 --> 00:12:14.530
This is probably the second thing you'll
use the most, next to the function pop up.

00:12:14.529 --> 00:12:18.370
Okay, so now let's jump over to the left side.

00:12:18.370 --> 00:12:21.990
One thing you've been noticing is I've been opening
these files because it's grouped they're showing

00:12:21.990 --> 00:12:28.440
up in the same window, well, what you can do if you,
for example, want to get back to a separate file,

00:12:28.440 --> 00:12:32.070
you can actually just bring this file pop up
here and we'll just let you jump back and forth.

00:12:32.070 --> 00:12:35.370
So for example I can go back to NS View.

00:12:35.370 --> 00:12:40.509
You'll also notice, although it's a little bit hard to
see here on this screen that we actually do badge the files

00:12:40.509 --> 00:12:44.259
in the pop up to show you which ones are locked or not.

00:12:44.259 --> 00:12:47.870
In addition, we can also use the go back and
go forward arrows and these just let you step

00:12:47.870 --> 00:12:49.509
through the files that you've been looking at.

00:12:49.509 --> 00:12:53.659
And then I mentioned you know we
badge files that are locked,

00:12:53.659 --> 00:12:57.069
well we also provide you the ability to control that.

00:12:57.070 --> 00:13:02.240
Over here at the very edge we have a lock
icon and this actually maps for those of you

00:13:02.240 --> 00:13:10.220
with classic Mac OS experience or some Mac OS X
experience, this maps to the Finders lock flag.

00:13:10.220 --> 00:13:14.389
For those of you coming from UNIX,
that's the unchangeable flag.

00:13:14.389 --> 00:13:19.830
And so you can go in here and just lock down a file if, for example,
you want to make sure you don't make any changes to it,

00:13:19.830 --> 00:13:25.970
or if you're using something like Perforce,
it's one way to make sure you can have a file

00:13:25.970 --> 00:13:29.820
to be unlocked so you can go ahead and edit it.

00:13:29.820 --> 00:13:33.460
Okay, so before I jump, that's basically the navigator bar.

00:13:33.460 --> 00:13:38.120
As I said everything in the navigator bar is
predominantly about getting around your files,

00:13:38.120 --> 00:13:42.720
getting around the file you're in, going to other
files, getting you there quickly and easily.

00:13:42.720 --> 00:13:46.250
One final thing I wanted to talk about
that's kind of in between the navigator bar

00:13:46.250 --> 00:13:50.299
and the actual editor view is our split view button.

00:13:50.299 --> 00:13:58.759
And so what I can do here is I can just click and get
any number of splits that I want and I can also hold

00:13:58.759 --> 00:14:02.009
down option and I can get side by side splitting.

00:14:02.009 --> 00:14:08.309
I should point out the one thing we don't do currently that
we, it's a requested feature, is that we don't allow you

00:14:08.309 --> 00:14:13.529
to mix splits right now so you can do all horizontal,
you can do all vertical but you can't do both currently.

00:14:13.529 --> 00:14:16.079
So let's move on to the main editor window.

00:14:16.080 --> 00:14:23.070
As you can see in Xcode 3.0 we have enhanced syntax
coloring here and this is something actually

00:14:23.070 --> 00:14:31.650
that, not only do we provide a number of different
languages, you can actually customize the syntax coloring

00:14:31.649 --> 00:14:32.199
to your liking.

00:14:32.200 --> 00:14:35.870
For example I'm using a custom set right now.

00:14:35.870 --> 00:14:39.090
We found out really late that we were going to
have a lot more room on the screen so I went ahead

00:14:39.090 --> 00:14:41.509
and bumped up the fonts right before the session.

00:14:41.509 --> 00:14:46.539
But there are a lot of different types of, a
lot of control you have here so, for example,

00:14:46.539 --> 00:14:52.949
and you'll have to forgive the fonts getting smaller
but we have the default look and then we have things

00:14:52.950 --> 00:15:00.129
like the basic look or bare which are very, very simple
if you don't want a lot of information showing up.

00:15:00.129 --> 00:15:04.169
But we also allow you to control things like
the background colors so you can even do things

00:15:04.169 --> 00:15:08.559
like midnight where we swap in a black background.

00:15:08.559 --> 00:15:11.559
So let's go back to my large fonts.

00:15:11.559 --> 00:15:19.849
We also provide control for our indentation which uses the
same syntactic information we're using for syntax coloring,

00:15:19.850 --> 00:15:27.779
we also provide good automatic indentation support and also
we're using that same information when we do code sense.

00:15:27.779 --> 00:15:33.360
So let me go ahead, I'm going to jump to this align, we're
going to spend a lot of time in align left I did yesterday.

00:15:33.360 --> 00:15:37.350
So let's jump there for right now
and make this window a little larger.

00:15:37.350 --> 00:15:43.250
Whoa, let me just give myself a little room here.

00:15:43.250 --> 00:15:48.860
So what I'm going to show you now is the code,
we have two kind of basic styles of code sense.

00:15:48.860 --> 00:15:53.629
One is we can automatically, we can not
automatically suggest and it's all user driven.

00:15:53.629 --> 00:15:57.600
You hold down a key, pops up a
menu, you can choose from that.

00:15:57.600 --> 00:16:01.690
What I'm actually going to show you is a mode
that's new to Xcode 3.0 which is automatically,

00:16:01.690 --> 00:16:06.440
we always suggest, it's much like mail's inline completion.

00:16:06.440 --> 00:16:14.340
So for example what you'll notice is as I type
Xcode's automatically completing what I want.

00:16:14.340 --> 00:16:16.960
Now I can just keep typing and it will change.

00:16:16.960 --> 00:16:25.500
I can type the entire word here and it never gets in your
way, so you can have it on, it will give you suggestions,

00:16:25.500 --> 00:16:30.620
but you're never going to get in the situation where it
will try to override what you're doing; you're in control.

00:16:30.620 --> 00:16:34.950
So here I've got selection and so if
we want to bring up something else.

00:16:34.950 --> 00:16:38.710
So now at this point I've got the
first, I've got objected index here.

00:16:38.710 --> 00:16:42.410
Now there's two different things I can do here,
I can, well many things, I can continue to type,

00:16:42.409 --> 00:16:48.819
I can hold down the escape key to pop up a menu
and I go up and select something out of here.

00:16:50.659 --> 00:16:57.659
But the other thing I can do is I can also use control
period to actually cycle through and in this case,

00:16:57.659 --> 00:17:01.860
and you'll notice here it'll just let me cycle
through the various choices directly there

00:17:01.860 --> 00:17:05.920
and in this case I want an observe value for key path.

00:17:05.920 --> 00:17:11.110
Not that I'm actually going to do anything with this beyond
the code sense, but we wanted to actually also show off the fact

00:17:11.109 --> 00:17:19.469
that you'll see we have these placeholders here for
example string key path, idObject, NS Dictionary.

00:17:19.470 --> 00:17:24.839
If you use control slash we have this nice
feature where you can just cycle right through

00:17:24.839 --> 00:17:27.159
and go straight to each one and fill it in.

00:17:27.160 --> 00:17:30.830
So that's just a really quick introduction to code sense.

00:17:30.829 --> 00:17:35.740
We'll be talking more about this
in the New Workflow Xcode session.

00:17:37.210 --> 00:17:42.910
So let's go ahead and revert that.

00:17:42.910 --> 00:17:47.440
So the other thing we did, you know code sense,
it's a common feature of a lot of editors,

00:17:47.440 --> 00:17:51.210
we wanted to go a little bit further and
so we have all this syntactic information

00:17:51.210 --> 00:17:54.549
and we understand the structure we
code but what can we do with that.

00:17:54.549 --> 00:17:56.009
Well there's two things we did.

00:17:56.009 --> 00:18:02.210
The first was a little, it's something new
and the second was just an outgrowth of that.

00:18:02.210 --> 00:18:06.299
And the first things which was new, we introduced
what we call code focus and so what this allows you

00:18:06.299 --> 00:18:10.450
to do is have a very graphical representation of
where your scope, where your current scope is.

00:18:10.450 --> 00:18:16.600
So you'll notice right now, the current scope is in white
and as I get further away it gets darker and darker.

00:18:16.599 --> 00:18:22.599
And this provides a really nice visual cue to
understanding exactly what's in scope when you're writing.

00:18:22.599 --> 00:18:27.619
And this works not just when editing
but also when debugging.

00:18:27.619 --> 00:18:33.669
In addition, as a part of this, we also
added the ability to collapse code.

00:18:33.670 --> 00:18:39.160
So, for example, we'll just put in a little glyph here
and you can either come back to the focus ribbon here

00:18:39.160 --> 00:18:42.590
or you can just go ahead and double
click on the glyph to open it.

00:18:42.589 --> 00:18:47.129
Also, if you go under view in code folding we
added some nice conveniences like, for example,

00:18:47.130 --> 00:18:52.910
if you want to fold all your methods and functions,

00:18:52.910 --> 00:18:58.120
you'll notice that even though it says fold all, what we
were smart enough to know is that, oh, you are in this scope

00:18:58.119 --> 00:19:00.049
so we're going to leave this method open.

00:19:00.049 --> 00:19:07.409
So it really allows you to zero in on what you're working
on and not have the feature get in the way of your coding.

00:19:07.410 --> 00:19:15.120
We also have the same capabilities from, oops, from the
contextual menu which you can either right click

00:19:15.119 --> 00:19:18.729
or control click to bring up and so
I'm going to go ahead and unfold.

00:19:18.730 --> 00:19:26.019
Now the last thing I wanted to
touch on here was documentation.

00:19:26.019 --> 00:19:32.129
As Matt mentioned, we have a great documentation viewer, a
lot of great features in Xcode 3.0, but how do you get to it?

00:19:32.130 --> 00:19:37.960
Well, there are two features that lead up to this and
then one of them that's a very common thing that lots

00:19:37.960 --> 00:19:40.100
of people use is called command double clicking.

00:19:40.099 --> 00:19:44.559
And what this allows you to do is it uses the
indexed information and so, for example, I'm going

00:19:44.559 --> 00:19:51.859
to command double click on objected index and when I do
that I jump automatically to the definition in the header.

00:19:51.859 --> 00:19:56.309
Well that's great, unfortunately a lot of
times the headers can be a little bit terse

00:19:56.309 --> 00:19:59.169
in what they might be able to tell you about a given method.

00:19:59.170 --> 00:20:09.519
So you can also option click on any symbol and then
will automatically bring up the documentation window

00:20:09.519 --> 00:20:15.079
and you'll notice here that now I have the information
about objected index, I can read through it and if,

00:20:15.079 --> 00:20:20.269
let's expand this window out a little bit, you'll
notice that I can also, it has other references

00:20:20.269 --> 00:20:26.410
and it's just a nice way to get straight into the
documentation and learn more about the Mac OS X APIs.

00:20:26.410 --> 00:20:29.190
So with that you can see, and I've just
touched the surface here by the way,

00:20:29.190 --> 00:20:32.789
there's lost of stuff that I've either glossed
over or have not covered about our editor,

00:20:32.789 --> 00:20:37.829
but I think this gives you a kind of good introduction
to the layout of the editor and so that's it.

00:20:37.829 --> 00:20:38.689
Thanks Matt.

00:20:38.690 --> 00:20:39.769
>> Thank you Scott.

00:20:39.769 --> 00:20:46.740
( Clapping )

00:20:46.740 --> 00:20:47.750
So what did we see there.

00:20:47.750 --> 00:20:53.200
We saw that Xcode's editor gives you powerful
workflow features to help speed your development.

00:20:53.200 --> 00:20:59.420
We saw things like code completion and both modes that it
works in, we saw the code folding and code focus features,

00:20:59.420 --> 00:21:05.810
where we take advantage of the information Xcode has about
your project allow you to easily collapse chunks of code

00:21:05.809 --> 00:21:07.990
that you're not interested in seeing right now.

00:21:07.990 --> 00:21:12.420
And Scott showed you the navigator bar where
you can easily jump around to various chunks

00:21:12.420 --> 00:21:16.060
of your code and navigate around smoothly.

00:21:16.059 --> 00:21:20.519
Scott also showed you a lot of key
equivalents that you'll want to start learning

00:21:20.519 --> 00:21:23.160
as you use Xcode to become even more productive.

00:21:23.160 --> 00:21:29.560
And he showed you some of the key ones, some of the
key, key equivalents for things like code completion

00:21:29.559 --> 00:21:34.299
where a tab completes and escape brings up a pop up menu

00:21:34.299 --> 00:21:38.369
and then control period actually let's
you cycle through the different choices.

00:21:38.369 --> 00:21:43.809
He also showed you things like how to
indent code and how to jump to definition;

00:21:43.809 --> 00:21:46.509
command double click, option double click.

00:21:46.509 --> 00:21:51.849
And we could see from that in general
in Xcode as with other Mac OS X apps,

00:21:51.849 --> 00:21:55.740
option action actually does a related behavior.

00:21:55.740 --> 00:21:59.019
So option double clicking brings you to the documentation,

00:21:59.019 --> 00:22:05.710
option clicking the split view control
actually creates the split the other way.

00:22:05.710 --> 00:22:08.690
And as you may have already heard there's a whole session

00:22:08.690 --> 00:22:14.640
on Xcode's editor the New Development
Workflow, that's tomorrow morning in Presidio.

00:22:14.640 --> 00:22:20.420
Let's talk about the build system next.

00:22:20.420 --> 00:22:26.380
Xcode's build system architecture is fast,
configurable and built on industry standards.

00:22:26.380 --> 00:22:30.760
And the industry standards we build
on are things like the GCC Compiler.

00:22:30.759 --> 00:22:37.220
4.0.1 is the default in Leopard, the
ld linker and gdb for our debugging capabilities,

00:22:37.220 --> 00:22:43.200
but Xcode builds a lot of functionality on top of these
industry standard components, enabling you to do more

00:22:43.200 --> 00:22:46.900
than you would be able to easily do with those tools.

00:22:46.900 --> 00:22:53.070
Let's talk about some of the terminology
and concepts that allow Xcode to do this.

00:22:53.069 --> 00:22:55.099
Xcode has this concept of targets.

00:22:55.099 --> 00:22:59.490
The target explains how to build a particular product.

00:22:59.490 --> 00:23:07.490
You think of targets as the recipe and your source
code and other graphical resources as the ingredients.

00:23:07.490 --> 00:23:12.779
And the target tells Xcode how to put all those
things together to make what you are trying to build.

00:23:12.779 --> 00:23:19.039
If you're coming from Visual Studio, I think the terminology
they use is project, so we're a little cross purposes

00:23:19.039 --> 00:23:22.779
with them over terminology, but
in Xcode it's called the target.

00:23:22.779 --> 00:23:28.509
And one project in Xcode can contain multiple targets.

00:23:28.509 --> 00:23:34.680
So you've got your project window you may be building
both an application and a shared library it depends on

00:23:34.680 --> 00:23:38.990
and each of those would be its own target.

00:23:38.990 --> 00:23:46.079
Xcode has a target inspector that allows you to configure
both your project and your target and there's a variety

00:23:46.079 --> 00:23:51.740
of settings involved that allow you to
tweak various aspects of your target.

00:23:51.740 --> 00:23:55.589
These settings are called build settings.

00:23:55.589 --> 00:23:58.929
So how do targets tell Xcode how
to actually build your code.

00:23:58.930 --> 00:24:00.950
It's through these build settings.

00:24:00.950 --> 00:24:06.400
These build settings control all
aspects of compilation and linking.

00:24:06.400 --> 00:24:09.480
And you can see a few examples of build settings.

00:24:09.480 --> 00:24:18.680
They're generally some setting name, some
value name that tells Xcode what to do.

00:24:18.680 --> 00:24:28.370
Now you can actually set up build settings and their
values at either the project level or in specific targets.

00:24:28.369 --> 00:24:33.279
What happens is you set some settings
in your project and some in your target.

00:24:33.279 --> 00:24:37.740
But your target values override
whatever you've set at the project level.

00:24:37.740 --> 00:24:42.140
So settings flow down from the project,
they could be overridden by the target,

00:24:42.140 --> 00:24:46.850
and eventually they are actually
used to build your source code.

00:24:48.029 --> 00:24:51.829
The basic rule that you'll want to
use when trying to figure out where

00:24:51.829 --> 00:24:57.549
to put your particular build settings is you'll
want to set general policy at your project level.

00:24:57.549 --> 00:25:04.009
For example, if you've got a set of warnings
that you want all of your targets to use,

00:25:04.009 --> 00:25:06.710
set that build setting at the project level.

00:25:06.710 --> 00:25:11.590
On the other hand you can customize
specific settings for your target.

00:25:11.589 --> 00:25:15.019
For example, what do you want your
final executable to be named.

00:25:15.019 --> 00:25:20.190
You don't want to set that for all targets in a
project, you want to set that on a per target basis.

00:25:20.190 --> 00:25:28.880
One additional level of detail, you can actually have multiple
sets of build settings for a given project and target.

00:25:28.880 --> 00:25:33.330
And these different sets of settings
are called build configurations.

00:25:33.329 --> 00:25:38.629
We actually give you a couple of build
configurations by default: debug and release.

00:25:38.630 --> 00:25:40.630
And you can see how these would be useful.

00:25:40.630 --> 00:25:46.830
You would use the debug build configuration when you
want to have an optimizations off and you want to build

00:25:46.829 --> 00:25:49.939
for the native architecture of
the machine you're actually on.

00:25:49.940 --> 00:25:55.070
And this is useful when you're doing your
iterative development cycle on that actual machine.

00:25:55.069 --> 00:26:02.109
You'll switch over to the release build configuration when
you want to do final testing and preparation for release

00:26:02.109 --> 00:26:08.129
of your product and it might have optimizations on and build
a universal binary for all of the different architectures

00:26:08.130 --> 00:26:17.900
for Mac OS X. And you can define your own build
configurations for specific needs you may have

00:26:17.900 --> 00:26:24.450
Once Xcode and the targets know what build settings to
apply the targets are going to follow a series of steps

00:26:24.450 --> 00:26:27.850
in a pipeline to actually build your product.

00:26:27.849 --> 00:26:30.500
And these steps are called build phases.

00:26:30.500 --> 00:26:34.140
And there are some standard build
phases that almost every target has.

00:26:34.140 --> 00:26:38.710
Things like compiling your sources
and actually linking things together.

00:26:38.710 --> 00:26:44.900
But you can actually customize how Xcode builds
things by adding some custom build phases.

00:26:44.900 --> 00:26:51.070
For example, you could add a copy files build phase that
at a certain point in your build actually moves files

00:26:51.069 --> 00:26:55.950
from point A to point B. Or you could have
shell script build phase and this allows you

00:26:55.950 --> 00:26:58.880
to basically do anything as a part of your build.

00:26:58.880 --> 00:27:05.960
Maybe it's update a given webpage, build a tar
file for your final binary or whatever it is else

00:27:05.960 --> 00:27:11.610
that you want to do as a part of your build.

00:27:11.609 --> 00:27:17.659
Once you actually click build and it starts executing
all these build phases you'll see errors and warnings

00:27:17.660 --> 00:27:20.660
in message bubbles right in line in your code editor.

00:27:20.660 --> 00:27:25.340
And in general this is what you want because
you just wrote usually this chunk of code,

00:27:25.339 --> 00:27:30.649
why should you have to go somewhere
else to see what's wrong with it.

00:27:30.650 --> 00:27:34.140
Sometimes however, you actually are going to
want to bring up the build results window,

00:27:34.140 --> 00:27:38.970
particularly if you are doing a clean build
of your entire project and want to see errors

00:27:38.970 --> 00:27:41.579
and warnings across your entire source base.

00:27:41.579 --> 00:27:47.159
And Command B will bring up the build results window or when
you have errors and warnings, the bottom right hand corner

00:27:47.160 --> 00:27:52.480
of the editor window will actually allow you to
click there and bring up the build results window.

00:27:52.480 --> 00:27:57.900
And you'll see all the errors and warnings you may have and
you can actually select them and see them right in line

00:27:57.900 --> 00:28:01.100
in your code to fix the problem right there.

00:28:01.099 --> 00:28:02.619
So we allow you to work either way.

00:28:02.619 --> 00:28:07.949
When you're working on a chunk of code you just wrote,
you can see message bubbles right in line to fix things,

00:28:07.950 --> 00:28:13.630
when you're doing a complete clean build of a large project,
you might want to bring up the build results window.

00:28:13.630 --> 00:28:19.230
I'd like to bring up Scott Tooker again
to show you a demo of the build system.

00:28:19.230 --> 00:28:25.230
( Clapping )

00:28:25.230 --> 00:28:29.380
>> So one of the interesting things I've demo'd the
build system a lot and the thing I've learned is

00:28:29.380 --> 00:28:33.990
that demoing actual building is boring so I
went ahead and built while Matt was talking

00:28:33.990 --> 00:28:36.160
so that we could get to the interesting stuff.

00:28:36.160 --> 00:28:39.920
So you'll notice here I've built and of course my tendency

00:28:39.920 --> 00:28:44.509
to make typos has bit me because
I have some warnings and errors.

00:28:44.509 --> 00:28:48.259
So you notice what we do is we provide
warning and error information right in line

00:28:48.259 --> 00:28:57.069
and so, for example, you get the same, this is the same
message you would get in a normal build log and it's local,

00:28:57.069 --> 00:29:00.509
sorry, it is local to where the warning or error occurred.

00:29:00.509 --> 00:29:06.329
We can go ahead and we can hide these if we
want and they will just flow with the code.

00:29:06.329 --> 00:29:11.659
Now this is great and most of time this is exactly what you
want, you don't want to have to jump to a separate window.

00:29:11.660 --> 00:29:16.370
However there are times when you want to see the
bigger picture so you'll notice down here in the corner

00:29:16.369 --> 00:29:20.609
where it says failed, we also have these
little icons of warnings and errors.

00:29:20.609 --> 00:29:26.959
Now you can click on any of these little images
and that'll bring up the build results window.

00:29:26.960 --> 00:29:29.700
So this is how the build results window comes up by default.

00:29:29.700 --> 00:29:34.000
You'll notice up top I have an outline
view here that lists my warnings and errors

00:29:34.000 --> 00:29:36.940
and it groups them by which file is being compiled.

00:29:36.940 --> 00:29:41.420
You'll notice that in this mode we're only
showing you files that had warnings and errors.

00:29:41.420 --> 00:29:45.560
And then below if I go ahead and
select the warnings and errors

00:29:45.559 --> 00:29:48.480
that they'll actually jump to the proper place in the file.

00:29:48.480 --> 00:29:50.049
Well, that's great.

00:29:50.049 --> 00:29:54.649
And sometimes for example, I don't care
about warnings, especially if I'm bringing

00:29:54.650 --> 00:29:57.820
over a new project I may have a bunch of
warnings, I just want to get it to build.

00:29:57.819 --> 00:30:03.049
So we also provide you the easy ability here
with the warning icon button to just go ahead

00:30:03.049 --> 00:30:06.480
and hide those warnings for now
and we won't show them to you.

00:30:06.480 --> 00:30:08.960
However, sometimes you want more information.

00:30:08.960 --> 00:30:10.960
You want to know exactly what happened.

00:30:10.960 --> 00:30:15.069
So we kind of have two stages of this;
in addition to showing you the warnings,

00:30:15.069 --> 00:30:17.240
we can actually show you all the build steps.

00:30:17.240 --> 00:30:20.319
And so if I click the check mark
here now we get to see everything,

00:30:20.319 --> 00:30:22.659
including stuff that just succeeded and went well.

00:30:22.660 --> 00:30:25.540
And so you can see exactly what happened.

00:30:25.539 --> 00:30:30.599
Well, not exactly, because you can see these are all
summary lines, but what if you want more detail.

00:30:30.599 --> 00:30:33.199
Well, we also provide the build transcript.

00:30:33.200 --> 00:30:36.150
So let me go ahead and hide the editor window for a second.

00:30:36.150 --> 00:30:43.430
And here's the build transcript and you'll notice as I click
on these steps we actually highlight the actual commands

00:30:43.430 --> 00:30:48.529
that Xcode used to send to GCC or
the underlying tools or to the shell.

00:30:48.529 --> 00:30:54.420
And so for example if I go and look at my warning, I can
even look at, for example, the compile line and you can do

00:30:54.420 --> 00:30:59.009
for example comparisons of, oh, let me look at this compile
that succeeded, let me look at this compile that failed.

00:30:59.009 --> 00:31:01.170
We give you all the information right there.

00:31:01.170 --> 00:31:09.940
The text in this window you can select it, you can copy/
paste it to other people and you can even take the lines

00:31:09.940 --> 00:31:14.900
and it's a full complete line so you can use it with GCC.

00:31:14.900 --> 00:31:19.070
So that's the build results window, it's there for you.

00:31:19.069 --> 00:31:24.049
One, for those of you who are used to having a separate
window we definitely provide it, it's fully functional.

00:31:24.049 --> 00:31:26.720
It's also a place to go when you need an overview.

00:31:26.720 --> 00:31:30.049
But as I said earlier, most of
the time this is just overkill.

00:31:30.049 --> 00:31:32.750
It's a separate window; it's got you out of your flow.

00:31:32.750 --> 00:31:37.140
Instead you can do most of what you need to
do just simply right in the window itself.

00:31:37.140 --> 00:31:42.030
So for example in this case, I see where
my warnings and errors are, I can just,

00:31:44.950 --> 00:31:50.890
and this is why we do sacrifices to demo gods?

00:31:50.890 --> 00:31:53.210
( Laughter )

00:31:53.210 --> 00:31:53.440
Come on.

00:31:53.440 --> 00:31:53.490
( Sigh )

00:31:53.490 --> 00:32:03.349
Okay, we're going to move on to the next part of the demo.

00:32:03.349 --> 00:32:08.149
The next part of the demo is the fun part of the demo
where I get to talk to you about something that I used

00:32:08.150 --> 00:32:11.259
to be responsible for which is the target inspector.

00:32:11.259 --> 00:32:16.430
So Matt talked a little bit about the target inspector and
talked about projects and targets and so I'm just going

00:32:16.430 --> 00:32:21.769
to give you a little guided tour of
looking at build settings for the target.

00:32:21.769 --> 00:32:27.259
So what you'll notice is, sorry I did that a little
quickly, what you can do is go into the project window here

00:32:27.259 --> 00:32:32.329
and you can open, just close targets over here and you
can double click on targets to bring up the window.

00:32:32.329 --> 00:32:41.349
You can also say edit active target, to go ahead
and bring up this get info window for the target.

00:32:41.349 --> 00:32:45.079
The tab we're going to look at today is the build tab.

00:32:45.079 --> 00:32:47.949
This shows all the build settings and
right now we're showing everything.

00:32:47.950 --> 00:32:52.279
We're saying okay from my bug defiguration
show me all the settings.

00:32:52.279 --> 00:32:55.789
And as you can see there are a lot of settings.

00:32:55.789 --> 00:33:01.269
In fact there are a lot that you'll never care about and
so one of the things we wanted to provide was quick ways

00:33:01.269 --> 00:33:03.349
for you to get the settings you might care about.

00:33:03.349 --> 00:33:06.719
So what I'm going to look for is I
want to look for my prefix header

00:33:06.720 --> 00:33:09.250
because I want to make sure that I'm precompiling it.

00:33:09.250 --> 00:33:12.789
So what I can do is type into the field
here and type prefix and you'll notice

00:33:12.789 --> 00:33:17.299
that you're automatically filtering while still
keeping things grouped in an outline view.

00:33:17.299 --> 00:33:20.849
You'll also notice, well here's my prefix
header and it is being pre compiled,

00:33:20.849 --> 00:33:23.549
but the prefix header's in bold, what's that about?

00:33:23.549 --> 00:33:28.329
Well, because you can set things at multiple
levels most notably the project and the target,

00:33:28.329 --> 00:33:33.970
we needed a way to show you that you've
set this for the target in this case.

00:33:33.970 --> 00:33:37.370
And so that's what the bold means;
it means this was set at this level.

00:33:37.369 --> 00:33:41.759
And we've also provided a convenient short cut in the show pop up here

00:33:41.759 --> 00:33:44.250
to say well I can look at all settings
defined at this level.

00:33:44.250 --> 00:33:48.950
And then I can see this is the only one with prefix,
I can remove the search filter and then I get

00:33:48.950 --> 00:33:51.279
to see well here's all the things I define in my target.

00:33:51.279 --> 00:33:56.069
And as you can see they're all things specific
to just this target; the prefix header,

00:33:56.069 --> 00:33:59.980
the product name, what extension it might use.

00:34:01.650 --> 00:34:09.599
And just to give a quick look in comparison, to kind of
give a concrete example of what Matt was talking about.

00:34:09.599 --> 00:34:12.500
If we bring up the project settings
which we can bring up in a similar way,

00:34:12.500 --> 00:34:15.880
double clicking on the project brings up a get info window.

00:34:15.880 --> 00:34:20.539
You can notice that if I look at the settings I define
for the project, they tend to be more generic things.

00:34:20.539 --> 00:34:24.659
What SDK I want to use, how do I want
to debug, what formats do I want to use.

00:34:24.659 --> 00:34:28.929
And what we are strongly encouraging people think
about it this way, anything that can be shared

00:34:28.929 --> 00:34:31.279
across targets should move up to the project.

00:34:31.280 --> 00:34:34.360
Because what we want to do is make it so
it's real easy for you to go one place.

00:34:34.360 --> 00:34:41.390
Change it there and then not worry about, oh, did I
remember in my fifteenth target to change that setting.

00:34:41.389 --> 00:34:47.710
So as you can see, oh and oh sorry, there's
one final thing, one last thing I wanted

00:34:47.710 --> 00:34:51.769
to show off was the research assistant and
how it integrates in the build settings.

00:34:51.769 --> 00:34:57.159
So one thing you may notice is this is great, you're giving
me titles, you're giving me values but I'm new to the Mac,

00:34:57.159 --> 00:35:02.139
I'm new to the Xcode, I don't know what any of these
things mean how can I find out more information.

00:35:02.139 --> 00:35:08.359
Well in most cases this is as easy as just selecting one
of the build settings and just clicking this little button

00:35:08.360 --> 00:35:10.780
down here to show the research assistant.

00:35:12.110 --> 00:35:19.180
Hey, let's move this over here.

00:35:19.179 --> 00:35:25.769
And so you'll notice what the research assistant
does is it tells me the localized name, which we show

00:35:25.769 --> 00:35:29.869
and then it also gives me just as a
convenience the actual raw build setting name.

00:35:29.869 --> 00:35:35.619
This is useful sometimes if you want to reference these
build settings and shell scripts or from the command line.

00:35:35.619 --> 00:35:38.130
But the meat of it here is this abstract.

00:35:38.130 --> 00:35:42.269
So this is a bunch of help text, it
tells you what the function's for,

00:35:42.269 --> 00:35:47.259
how it works and gives you additional information.

00:35:47.260 --> 00:35:51.920
And so I can have this research assistant open and I can
basically kind of browse through my different settings

00:35:51.920 --> 00:35:53.530
and see what these different settings mean.

00:35:53.530 --> 00:36:00.240
And so it provides a really nice way to get
to learn more about your project easier.

00:36:00.239 --> 00:36:06.649
And once again this is just a brief kind of
snapshot of what the build system is about.

00:36:06.650 --> 00:36:11.700
There's a lot that we haven't talked about
here like build phases and other things.

00:36:11.699 --> 00:36:17.039
I'd encourage people that are interested in the build
system, there's a talk later on Wednesday evening

00:36:17.039 --> 00:36:20.150
about the build system in depth, it is very good to go to.

00:36:20.150 --> 00:36:21.090
Matt.

00:36:21.090 --> 00:36:22.110
>> Thank you Scott.

00:36:22.110 --> 00:36:28.329
( Clapping )

00:36:28.329 --> 00:36:34.130
So what you saw was that the build system allows you
to easily see errors and warnings in lining your codes,

00:36:34.130 --> 00:36:37.480
you can fix them right next to
the line of code you just wrote.

00:36:37.480 --> 00:36:42.740
And when you need more contexts you can
build up, bring up the build results panel

00:36:42.739 --> 00:36:47.839
and Scott showed how you can get a lot of additional
information out of the build results panel,

00:36:47.840 --> 00:36:52.390
including the complete GCC build
transcript which is sometimes helpful.

00:36:52.389 --> 00:36:57.190
And finally we touched on customizing your build
with the target inspector and build settings

00:36:57.190 --> 00:36:59.619
and you could go into a lot more depth on that.

00:36:59.619 --> 00:37:06.259
We actually, oops, not that slide yet,
as he said, we actually have a session

00:37:06.260 --> 00:37:10.870
on the build system tomorrow evening at 5:00 I believe.

00:37:10.869 --> 00:37:16.789
So there's a couple other concepts that I just wanted
to touch on briefly that you should know about relating

00:37:16.789 --> 00:37:23.610
to the build system and these will require further
exploration on your part because they can be fairly complex

00:37:23.610 --> 00:37:29.660
but they're important for you to know these
are there and start getting familiar with them.

00:37:29.659 --> 00:37:32.170
The first is the concept of SDKs.

00:37:32.170 --> 00:37:38.180
Now these are, we have Mac OS X SDKs that we
provide with Xcode and these are specialized SDKs.

00:37:38.179 --> 00:37:43.690
They're a little different than the SDK concept
you may be familiar with on other platforms.

00:37:43.690 --> 00:37:50.740
Basically what we mean by SDK is a set of all the headers
and libraries that originally shipped on that version

00:37:50.739 --> 00:37:55.719
of Mac OS X, so that you can easily target
that version of Mac OS X by building

00:37:55.719 --> 00:37:59.859
against those headers and libraries to avoid API pollution.

00:37:59.860 --> 00:38:06.110
By doing this you make sure that for example if
10.4 Tiger is your minimum system requirement

00:38:06.110 --> 00:38:10.579
that you don't accidentally use a 10.5 only API.

00:38:10.579 --> 00:38:16.150
So we ship several SDKs with Xcode
for 10.3, 10.4 and 10.5,

00:38:16.150 --> 00:38:21.030
and you essentially decide what your minimum
system version's going to be and then pick that SDK

00:38:21.030 --> 00:38:23.810
to make sure you don't accidentally leak over.

00:38:23.809 --> 00:38:32.349
The other thing that you may need once you build up
more complex projects is Xcode configuration files.

00:38:32.349 --> 00:38:36.539
And these are basically text files
with the .xcconfig extension

00:38:36.539 --> 00:38:39.110
that contain lists of build settings and values.

00:38:39.110 --> 00:38:43.780
And the great thing about them is you can
actually reuse them across targets and projects.

00:38:43.780 --> 00:38:49.200
You can tell a particular target or project,
get your settings from this config file.

00:38:49.199 --> 00:38:55.500
And so you could have dozens of targets in
several projects across your whole hard drive,

00:38:55.500 --> 00:39:02.559
all referring back to the same Xcode configuration file,
which would enable you to make a change to a build setting

00:39:02.559 --> 00:39:08.460
in one file in one place and instantly have it be
picked up across all of your projects and targets.

00:39:08.460 --> 00:39:13.710
So it's great if you're dealing with a very large build
environment with a lot of locking pieces.

00:39:13.710 --> 00:39:22.659
So the summary for the build system, we've got
familiar underlying compilers and tools with Xcode.

00:39:22.659 --> 00:39:29.069
If you're familiar with GCC or other similar open source
tools and other platforms, you're getting the same tools

00:39:29.070 --> 00:39:37.140
on Mac OS X. Xcode puts a flexible architecture on top
of those tools allowing you to insert custom build steps,

00:39:37.139 --> 00:39:42.769
customize settings and easily make changes
across all your projects in one fell swoop.

00:39:42.769 --> 00:39:47.019
And we give you a seamless work flow to actually
fix the errors and warnings in your project.

00:39:47.019 --> 00:39:51.599
You can do it either in the code
editor or in the build results window.

00:39:51.599 --> 00:39:56.969
And at the bottom of the slide there's the details
on the session we've been referring to tomorrow.

00:39:56.969 --> 00:40:01.589
Next, the debugger.

00:40:01.590 --> 00:40:05.440
How many of you write perfect code
the first time every time?

00:40:05.440 --> 00:40:09.059
Right. Hello World's a killer isn't it.

00:40:09.059 --> 00:40:11.179
( Laughter )

00:40:11.179 --> 00:40:14.419
Under the hood Xcode uses gdb.

00:40:14.420 --> 00:40:19.789
So if you prefer that, if you're familiar
with that Xcode can give you access to that,

00:40:19.789 --> 00:40:26.150
but we think you'll prefer the much richer
functionality that the rest of Xcode's debugger provides.

00:40:26.150 --> 00:40:34.369
Here's Xcode's debugger window so when you do find that
rare bug you may have inserted in your code, you can go in

00:40:34.369 --> 00:40:40.199
and debug it and you can bring up Xcode's debugger window
and this is going to provide a very similar functionality

00:40:40.199 --> 00:40:43.759
to what you are perhaps familiar with in other platforms.

00:40:43.760 --> 00:40:53.210
So you can stop at a breakpoint, you can continue, you
can step into, you can customize breakpoints, and so on.

00:40:55.030 --> 00:40:58.420
But as we're fixing errors and
warnings, we think there's a better way.

00:40:58.420 --> 00:41:01.400
You can actually do a lot of your
debugging right in the code editor.

00:41:01.400 --> 00:41:07.559
And this makes sense if you just wrote this chunk of code
and you just fixed the bugs in it, why should you have to go

00:41:07.559 --> 00:41:12.820
to some other window to actually go in and debug it.

00:41:12.820 --> 00:41:16.240
And so that's what the editor let's you do.

00:41:16.239 --> 00:41:22.809
You can actually customize breakpoints right in the editor,
you get the little mini debugger toolbar across the top

00:41:22.809 --> 00:41:27.929
that allows you to step over, step into and so on,
just like you could in the full debugger window.

00:41:27.929 --> 00:41:35.159
For those cases when you want to see what's inside
a variable, you can simply hover over that variable

00:41:35.159 --> 00:41:39.049
with your mouse and Xcode will give you the contents of it.

00:41:39.050 --> 00:41:43.370
So it's very easy, very intuitive
to just start mousing around

00:41:43.369 --> 00:41:47.440
and hover over things and find out what the values are.

00:41:48.929 --> 00:41:54.509
Now whether you prefer working in Xcode's
dedicated debugger window or in the code editor,

00:41:54.510 --> 00:41:56.780
either way you're going to get a rich set of functionality.

00:41:56.780 --> 00:42:03.120
You'll be able to customize breakpoints, set watch points
and view expressions, view variables and collections

00:42:03.119 --> 00:42:06.369
and data tips and even customize variable formatting.

00:42:06.369 --> 00:42:16.809
You can decide if you would prefer for results for a
particular variable to always be presented a certain way.

00:42:16.809 --> 00:42:21.429
One of Xcode 3.0s most powerful features
is its seamless run/debug/run workflow.

00:42:21.429 --> 00:42:25.739
And what this means is you can run
your application not in the debugger,

00:42:25.739 --> 00:42:28.119
it'll launch quickly, you'll see it right there.

00:42:28.119 --> 00:42:31.940
When you reach a point in your app where
you actually want to set a breakpoint

00:42:31.940 --> 00:42:34.800
and start debugging, simply add the breakpoint.

00:42:34.800 --> 00:42:38.760
And Xcode will automatically attach the
debugger to that running application,

00:42:38.760 --> 00:42:42.960
there's no need to stop your app relaunch
it on the debugger and keep going.

00:42:42.960 --> 00:42:47.860
So things are very smooth, Xcode
automatically attaches the debugger,

00:42:47.860 --> 00:42:53.650
you fix the problem when you remove the breakpoint,
the debugger detaches and you just keep working.

00:42:53.650 --> 00:42:58.079
So it's a very seamless flow back and
forth between running and debugging.

00:42:58.079 --> 00:43:02.559
Xcode also saves you time by allowing
you to restart, which means,

00:43:02.559 --> 00:43:05.940
run your application again the same way you did last time.

00:43:05.940 --> 00:43:10.829
And that could mean running it again under the debugger,
it could mean running it again with a performance tool,

00:43:10.829 --> 00:43:14.049
see you don't have to reselect the
same options over and over again,

00:43:14.050 --> 00:43:18.130
Xcode remembers what you did and lets
you easily do that again.

00:43:18.130 --> 00:43:24.970
And to show you this, I'd like to bring
up Scott Tooker again to give you a demo.

00:43:24.969 --> 00:43:28.949
( Clapping )

00:43:28.949 --> 00:43:37.169
>> Okay, so I'm here in align left edges and I
want to go ahead and let's just build and go.

00:43:37.170 --> 00:43:41.930
And you can see here's sketch and it's
all loaded, let's create some circles.

00:43:41.929 --> 00:43:49.819
And what I've done, I've selected them all and now I'm
going to go ahead and align them and I want a break.

00:43:49.820 --> 00:43:51.670
Oh, that's right I need to set a breakpoint.

00:43:51.670 --> 00:43:55.670
So as you can see I'm just running here.

00:43:55.670 --> 00:44:01.240
In the past what we've had to do is actually as Matt says,
you have to quit out, set up your debugger again and go.

00:44:01.239 --> 00:44:07.409
Now what we do is just set a breakpoint, let me
go back here, let me go ahead and just reselect

00:44:07.409 --> 00:44:11.429
that align call and boom right into debugger.

00:44:11.429 --> 00:44:12.349
So?

00:44:12.349 --> 00:44:12.809
( Clapping )

00:44:12.809 --> 00:44:19.210
And you'll also notice I've kept, I've stayed in my
editor window, haven't brought up a new window yet.

00:44:19.210 --> 00:44:26.280
I've added now this debugger bar up along top
that has all the common functionality I'd need.

00:44:26.280 --> 00:44:31.769
But let's take a short detour; I want to show off the
main debugger window, especially since a lot of you coming

00:44:31.769 --> 00:44:36.460
from Windows, probably more familiar with an
interface that looks more similar to this.

00:44:36.460 --> 00:44:43.740
You'll see on the left I have my stack frame list,
I have a thread pop up, over I have variables

00:44:43.739 --> 00:44:47.879
and then down at the bottom I've got my source code.

00:44:47.880 --> 00:44:54.269
And so I can go ahead and as Matt said I can do step
over, I can step into, I can continue from here.

00:44:54.269 --> 00:44:58.420
But with Xcode 3, we actually wanted to have
something that was more tied to the editor.

00:44:58.420 --> 00:45:02.599
There's no reason I should have to come to this
other window for most of my debugging needs.

00:45:02.599 --> 00:45:06.329
So we introduced some new things
called data tips and step controls.

00:45:06.329 --> 00:45:09.529
And I'm just going to show them here to you just briefly.

00:45:09.530 --> 00:45:12.290
So first off we have data tips.

00:45:12.289 --> 00:45:20.710
And so for example here, let me go ahead and step
a little bit, in fact, and so you can go here

00:45:20.710 --> 00:45:25.220
and okay now this has been evaluated
and I can see that C is equal to 8.

00:45:25.219 --> 00:45:29.709
Well, that's great, I could hit this step next and
look at things as they evaluate or I could just,

00:45:29.710 --> 00:45:33.929
I really want to get down to this bottom part
here where I'm actually setting up some bounds.

00:45:33.929 --> 00:45:40.329
So another thing we added were step controls and so
for this case, I can just click on the step control,

00:45:48.170 --> 00:46:07.289
what is going on, okay well normally I
could, let me try something, yeah I know,

00:46:07.289 --> 00:46:29.190
I'm going to go ahead, I'm going to try that one more time.

00:46:32.369 --> 00:46:33.099
Come on?

00:46:33.099 --> 00:46:34.519
>> Usually this works great.

00:46:34.519 --> 00:46:37.929
>> Yes, every other time we practiced it it worked fine.

00:46:37.929 --> 00:46:41.029
But that's always how demos are.

00:46:41.030 --> 00:46:43.480
So let's go ahead, there we go.

00:46:43.480 --> 00:46:49.059
So as you can see with the step control when it's
working the way it should, you actually get to go ahead

00:46:49.059 --> 00:46:53.769
and step in line, you can just click right in line,
right in your editor and you just jump to this line

00:46:53.769 --> 00:46:58.250
and now I can actually go and look at all
these other things and just investigate.

00:46:58.250 --> 00:47:04.469
For example, current bounds here I can actually drill in
and look at the individual point and size information.

00:47:04.469 --> 00:47:08.480
You'll also notice along the side
here, that we have summary information.

00:47:08.480 --> 00:47:11.500
And this is a feature of Xcode we call data formatters.

00:47:11.500 --> 00:47:13.769
We provided it; there are two ways we provide it.

00:47:13.769 --> 00:47:19.000
This is a very simple, in this case we're just
using a very simple kind of mark up language

00:47:19.000 --> 00:47:22.699
so you can just say I want to see
x equals y equals and so on.

00:47:22.699 --> 00:47:27.379
We also provide for those of you that have more
complex custom types, you can actually write plug ins

00:47:27.380 --> 00:47:35.030
to the debugger so you can just display
information about your custom code.

00:47:35.030 --> 00:47:38.820
Now in addition to that, we also,
as you notice here as I move around,

00:47:38.820 --> 00:47:44.080
I'm just kind of using the syntactic information we
already have to say, oh, current bounds that's a symbol,

00:47:44.079 --> 00:47:46.670
I know that and we can go look up the information.

00:47:46.670 --> 00:47:51.200
However, we can do more than that, we can also, for
example, notice that when we're looking at structures,

00:47:51.199 --> 00:47:56.259
we can drill down into that structure automatically so
for example here I can look at the origin which is a point

00:47:56.260 --> 00:47:59.980
or I can move over and just look at x in that point.

00:48:01.050 --> 00:48:07.730
We can also do evaluation.

00:48:07.730 --> 00:48:15.110
So just to be clear here, what I've done is I've actually
selected curGraphic bounds and then asked the debugger

00:48:15.110 --> 00:48:21.360
to evaluate it right now and then show me the information
and so you see here, oops let's bring that back up,

00:48:21.360 --> 00:48:24.670
that I'm actually looking at the structure and
that I've got live information about the data.

00:48:24.670 --> 00:48:30.800
And it goes even further than that because actually if I
go down to curbounds here, which is the current bounds

00:48:30.800 --> 00:48:36.019
of the graphic I'm about to set, I can select that.

00:48:36.019 --> 00:48:37.769
Actually I don't need to evaluate it.

00:48:37.769 --> 00:48:50.860
I can select that, I can for example
go down into the size and just inline?

00:48:50.860 --> 00:48:58.590
( Sigh )
Inline. I can go ahead and change it right there.

00:48:58.590 --> 00:49:04.579
And so when I decide to go ahead and say
continue, and bring back up sketch you'll notice

00:49:04.579 --> 00:49:09.489
that I've actually had an affect directly
on the program while it was running.

00:49:09.489 --> 00:49:12.429
So there's actually a lot more to the debugger experience.

00:49:12.429 --> 00:49:16.279
We're going to be covering a lot more of this in the
Xcode New Workflow, especially issues about being able

00:49:16.280 --> 00:49:20.450
to quickly jump in and out of functions,
but this is just a brief overview

00:49:20.449 --> 00:49:22.059
that hopefully shows you the power of the debugger.

00:49:22.059 --> 00:49:23.150
Matt.

00:49:23.150 --> 00:49:30.180
>> Thank you Scott.

00:49:30.179 --> 00:49:30.750
( Clapping )

00:49:30.750 --> 00:49:32.619
So what did you just see?

00:49:32.619 --> 00:49:38.289
You saw that you could actually get a lot of your common
everyday debugging tasks done right in the code editor.

00:49:38.289 --> 00:49:45.119
Now you can control breakpoints and message bubbles, you
can view variables and data tips in line and so really a lot

00:49:45.119 --> 00:49:47.159
of your day will be spent right in the code editor.

00:49:47.159 --> 00:49:52.489
Writing code, building code, debugging
it and it's a very seamless flow

00:49:52.489 --> 00:49:55.869
and experience as Andreas talked about yesterday.

00:49:55.869 --> 00:49:58.849
Sometimes if you want to do a broader
investigation you might want to bring

00:49:58.849 --> 00:50:01.599
up the debugger window, it's there if you need it.

00:50:01.599 --> 00:50:10.839
But we think that the seamless run/debug/run experience of
Xcode will be much appreciated as you develop applications.

00:50:12.300 --> 00:50:21.039
So edit, build, debug, those are kind of the
core things that an integrated environment does.

00:50:21.039 --> 00:50:26.119
But there's actually more things to your project that
you need to keep track of that you'd like for the project

00:50:26.119 --> 00:50:31.920
to be able to handle for you and we don't have time
to go into these aspects and detail in this session.

00:50:31.920 --> 00:50:37.980
But I just wanted to touch on three of them briefly so that
you know that Xcode can do these things and you can find

00:50:37.980 --> 00:50:46.519
which sessions you should go to to find out more.
First of all, Xcode's source code management system.

00:50:46.519 --> 00:50:53.699
We actually support three systems Subversion, Perforce
and CVS, and where the underlying SCM system supports

00:50:53.699 --> 00:51:00.909
it will actually give you a nice browser for
you to easily browse through your repository,

00:51:00.909 --> 00:51:03.119
find the project you want and then check it out.

00:51:03.119 --> 00:51:07.679
So you configure it and then you can handle
most of your common SCM operations right

00:51:07.679 --> 00:51:11.649
from Xcode, check code back in and so on.

00:51:15.050 --> 00:51:21.230
We also support refactoring in Xcode and you saw
this demo'd yesterday in the state of the union.

00:51:21.230 --> 00:51:27.740
Refactoring basically allows you to quickly,
safely and broadly upgrade or change your code,

00:51:27.739 --> 00:51:34.479
either to make it more maintainable or make it easier to
add new features to your code, such as new Leopard features.

00:51:34.480 --> 00:51:39.500
And you could use find and replace, very
manual thing to do to try and accomplish this,

00:51:39.500 --> 00:51:41.199
but it's going to be much more error prone.

00:51:41.199 --> 00:51:46.710
And why do all that when you have tools to do
this for you? And that's what refactoring is about

00:51:46.710 --> 00:51:50.610
and there's a session on that on Thursday in The Presidio.

00:51:50.610 --> 00:51:55.890
And finally the Organizer; this was demo'd yesterday

00:51:55.889 --> 00:51:59.839
and there are two key ways you'll
probably find yourself using the Organizer,

00:51:59.840 --> 00:52:03.110
first as a way to manage and view all of your projects.

00:52:03.110 --> 00:52:08.660
So if you're doing particularly native developing
from Mac OS X, Cocoa applications for example,

00:52:08.659 --> 00:52:14.199
you'll be using projects primarily and you can drag
those projects into the Organizer easily get to them,

00:52:14.199 --> 00:52:17.980
open them up, build them right from the Organizer.

00:52:17.980 --> 00:52:25.130
If you are more of an open source kind of guy
and you don't want to use a full Xcode project

00:52:25.130 --> 00:52:30.230
for your development you can actually still use
the Organizer, simply drag in folders of code,

00:52:30.230 --> 00:52:38.789
we've go build in support from Make, AutoConf and
Ant and you can actually customize actions as well.

00:52:38.789 --> 00:52:45.650
The Organizer gives you easy access to your projects, a free
form development workflow and the ability to extend it based

00:52:45.650 --> 00:52:49.550
on your needs and we have a whole
session on the Organizer on Thursday,

00:52:49.550 --> 00:52:54.230
it's called Project Free Xcode,
Mixed Language Development.

00:52:54.230 --> 00:52:57.820
So, what have we seen in this session?

00:52:57.820 --> 00:53:04.450
We've seen that Xcode's intuitive workflow helps accelerate
your development by giving you a very editor centric focus;

00:53:04.449 --> 00:53:09.449
you don't have to keep bringing up
other windows to get your work done.

00:53:09.449 --> 00:53:15.369
Xcode's build system gives you the power based
on industry standard tools and also the ability

00:53:15.369 --> 00:53:18.920
to customize the build system based on your needs.

00:53:18.920 --> 00:53:27.289
And finally we've seen that Xcode makes development more
fun by handling common tasks for you, like SCM operations,

00:53:27.289 --> 00:53:32.289
refactoring and helping organize your code.

00:53:32.289 --> 00:53:38.269
For more information you can email me with feedback,
mformica@apple.com, I'm the Software Evangelist.

00:53:38.269 --> 00:53:43.250
There's also a variety of chunks of
documentation for Xcode I encourage you to read.