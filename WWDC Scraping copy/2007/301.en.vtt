WEBVTT

00:00:20.320 --> 00:00:25.199
>> Good morning and welcome to Session 301
getting started with Mac OS X Development Tools.

00:00:25.199 --> 00:00:30.519
I'm Todd Fernandez, and I manage the
engineering teams which create Apple's IDEs,

00:00:30.519 --> 00:00:33.969
otherwise known as integrated development environments.

00:00:33.969 --> 00:00:37.280
So it's early, let's get started
with a little audience participation.

00:00:37.280 --> 00:00:41.590
How many of you are new to developing on Mac OS X?

00:00:41.590 --> 00:00:44.030
Whew. Good, I came to the right room this morning.

00:00:44.030 --> 00:00:45.469
Excellent.

00:00:45.469 --> 00:00:49.719
Well, we in the development tools organization and
everyone at Apple, are really excited that you're here

00:00:49.719 --> 00:00:55.789
with us this week and want to create great products
for and on the Mac and to help you get started,

00:00:55.789 --> 00:00:59.530
we have a number of important objectives
today for this session.

00:00:59.530 --> 00:01:06.280
The first is to introduce you to the breadth and depth of
our Apple Developer Tool Suite and as we do so to point

00:01:06.280 --> 00:01:10.629
out the comparisons and contrasts with some of
the other tool suites which you may be familiar

00:01:10.629 --> 00:01:13.039
with on the platforms you already work on.

00:01:13.040 --> 00:01:21.340
We want to make sure that you understand what task
each tool is particularly well-suited for and, finally,

00:01:21.340 --> 00:01:27.799
we know that conferences like these can be overwhelming
and it can be easy to end up spending time inefficiently,

00:01:27.799 --> 00:01:32.629
you've made a big investment to be here this week, and I
want to help you make the most of it by providing guidance

00:01:32.629 --> 00:01:37.289
on which sessions will be most useful to you.

00:01:37.290 --> 00:01:39.950
So, we're -- we're all developers here, right?

00:01:39.950 --> 00:01:45.469
Okay. We know what developers do; we edit our
source code; we search and read documentation;

00:01:45.469 --> 00:01:49.609
we build our products; we test them, ideally.

00:01:49.609 --> 00:01:53.030
For those of you who put bugs in your code, we debug them.

00:01:53.030 --> 00:01:57.810
We analyze and tune their performance to
give our users the best experience possible.

00:01:57.810 --> 00:02:04.230
We package them up and then we deliver them to our
adoring fans otherwise known as our customers

00:02:04.230 --> 00:02:08.150
if we've done the testing and debugging part correctly.

00:02:08.150 --> 00:02:15.020
So you already have a workflow and a set of tools that you
use to do these tasks already wherever you may be coming

00:02:15.020 --> 00:02:20.710
from and whether your tools are platform
agnostic or tailored to a particular platform,

00:02:20.710 --> 00:02:26.000
you already have a workflow and a set of
tools that you -- you work with every day.

00:02:26.000 --> 00:02:32.030
Well, we have a great set of tools
on Mac OS X too, the Xcode tools.

00:02:32.030 --> 00:02:36.050
And while they may be tailored to
creating native Mac applications,

00:02:36.050 --> 00:02:40.850
they are also great at building
lots of other types of products.

00:02:40.849 --> 00:02:45.849
So whatever it is that you like to
build, we have the tools for you.

00:02:45.849 --> 00:02:50.810
So to get you oriented let's take a brief
high-level tour before we get into the details

00:02:50.810 --> 00:02:53.939
to show you what -- just get you oriented.

00:02:53.939 --> 00:02:58.599
This, in fact, is a stylized version of what
you might see if you install the Leopard preview

00:02:58.599 --> 00:03:02.519
that you received yesterday in
the Developer Applications folder.

00:03:02.520 --> 00:03:06.370
So let's start right at the top
with Xcode; our universal IDE.

00:03:06.370 --> 00:03:13.039
This is where most of you will spend the majority of
your time editing source code, reading documentation,

00:03:13.039 --> 00:03:18.629
building your products and debugging them.

00:03:18.629 --> 00:03:23.900
Interface Builder is our interface design tool, and it
makes it really easy to build beautiful user interfaces

00:03:23.900 --> 00:03:28.060
and connect them up to your source code implementation.

00:03:28.060 --> 00:03:33.439
It also provides you a lot of guidance to make your user
interface match the Apple Human Interface Guidelines

00:03:33.439 --> 00:03:38.120
so that your application looks great on the Mac.

00:03:38.120 --> 00:03:42.460
Dashcode is another IDE that's
focused on widget development,

00:03:42.460 --> 00:03:46.230
and it makes it really fun to build beautiful widgets.

00:03:46.229 --> 00:03:51.500
It gives you all the user interface elements
and source codes snippets that you need

00:03:51.500 --> 00:03:57.120
to get started, and it's also new in Leopard.

00:03:57.120 --> 00:04:03.990
Xray is another great new tool that's new in Leopard
that is an analysis tool that allows you to --

00:04:03.990 --> 00:04:10.219
it uses the kind of the concept of GarageBand to
allow you to assemble instruments and record data

00:04:10.219 --> 00:04:15.919
on your program's performance along a timeline allowing you
to correlate all sorts of different types of information

00:04:15.919 --> 00:04:21.120
about your program's behavior to
analyze and optimize its performance.

00:04:21.120 --> 00:04:27.079
It also includes a UI recording feature that
allows you to playback over several times

00:04:27.079 --> 00:04:32.729
with different instruments a particular scenario that
you're debugging, and we'll talk about it more later.

00:04:32.730 --> 00:04:38.710
We also have a number of more specialized utilities
whether you're making your application more accessible

00:04:38.709 --> 00:04:41.719
for those with disabilities.

00:04:41.720 --> 00:04:46.750
Whether you're building a plug-in to take
advantage of our synchronization technology, iSync,

00:04:46.750 --> 00:04:53.170
to synchronize your program's data files for your users
or debug it with Syncrospector whether you need

00:04:53.170 --> 00:04:58.300
to build a custom package for your -- to
install your product with PackageMaker

00:04:58.300 --> 00:05:03.540
or perhaps perform more prosaic programming tasks
like editing property lists with Property List Editor

00:05:03.540 --> 00:05:10.069
or comparing two source files with FileMerge,
we have lots of great utilities to help you.

00:05:10.069 --> 00:05:17.129
Next I'd like to talk a little bit about graphics
tools. Quartz Composer is a great tool that allows you

00:05:17.129 --> 00:05:21.259
to create different types of motion
graphics for integration into all sorts

00:05:21.259 --> 00:05:25.019
of different applications, and
we'll talk more about that later on.

00:05:25.019 --> 00:05:32.069
OpenGL Shader Builder is a great tool for
building vertex and fragment programs for the GPU,

00:05:32.069 --> 00:05:36.579
and we'll talk more about that later on as
well and Core Image Fun House allows you

00:05:36.579 --> 00:05:43.079
to explore the Core Image Framework to make
your application's graphics look really great.

00:05:43.079 --> 00:05:46.139
So moving on to performance tools
we've already talked about Xray.

00:05:46.139 --> 00:05:52.399
We have a number of other great performance tools starting
with Shark which is more in the instruction level,

00:05:52.399 --> 00:05:54.299
and we'll talk more about that more later as well.

00:05:54.300 --> 00:05:59.069
I also want to highlight Quartz Debug
which among other things allows you

00:05:59.069 --> 00:06:02.879
to set the user interface resolution
scaling factor to ensure

00:06:02.879 --> 00:06:05.769
that your application looks great at higher resolutions.

00:06:05.769 --> 00:06:14.009
I want to highlight ObjectAlloc and Sampler
which prior to Leopard were independent tools

00:06:14.009 --> 00:06:18.800
but have now been incorporated into Xray so that you
can take advantage of their functionality, again,

00:06:18.800 --> 00:06:22.410
in that integrated way and correlate
it with other types of data.

00:06:22.410 --> 00:06:29.750
So that's our initial tour to kind of get
you oriented and to move on further I'm going

00:06:29.750 --> 00:06:32.360
to ask Anders Bertelrud
to come up and talk about how

00:06:32.360 --> 00:06:35.199
to use our Toolchain to build native Mac applications.

00:06:35.199 --> 00:06:36.750
So, please welcome Anders.

00:06:36.750 --> 00:06:37.240
( Applause )

00:06:37.240 --> 00:06:39.889
>> Thank you, Todd.

00:06:42.420 --> 00:06:47.189
Okay. Great so we're going to talk about
creating native application using Xcode.

00:06:47.189 --> 00:06:52.689
As Todd mentioned Xcode is the central
development IDE hub on Mac OS X,

00:06:52.689 --> 00:06:56.120
this is where you'll spend most of
your time doing Mac OS X development.

00:06:56.120 --> 00:06:57.840
So what can you build with Xcode?

00:06:57.839 --> 00:07:03.289
Well, native applications, what do I mean by
that that means Cocoa, Carbon applications,

00:07:03.290 --> 00:07:10.850
applications designed specifically for Mac OS X
using the Aqua User Interface those kinds of things,

00:07:10.850 --> 00:07:13.670
but Xcode is also great for open source projects.

00:07:13.670 --> 00:07:21.170
If you saw the talk yesterday where the organizer was
showing there's a new feature in Xcode designed specifically

00:07:21.170 --> 00:07:26.710
to work with open source projects that maybe have
a different build system than native Xcode one,

00:07:26.709 --> 00:07:33.199
code bases that can be built for multiple platforms,
you may be bringing some of that over onto Mac OS X,

00:07:33.199 --> 00:07:37.839
maybe putting an native interface on that and
using that open source as part of your project.

00:07:37.839 --> 00:07:41.159
You can, of course, also build other
kinds of projects like kernel extensions.

00:07:41.160 --> 00:07:44.250
You may be doing image unit plug-ins,
you might want to do a plug-in

00:07:44.250 --> 00:07:47.939
for a specific application such as
Photoshop, those kinds of things.

00:07:47.939 --> 00:07:51.319
You can do that with Mac OS X as well -- with Xcode as well.

00:07:51.319 --> 00:07:56.370
We're going to focus on native applications just
take you through a workflow here and as I go

00:07:56.370 --> 00:08:01.189
through the workflow I'm going to just show a
series of screen shots and describe what's going on,

00:08:01.189 --> 00:08:05.529
and then we'll give you pointers to sessions
where you can go and see much more detail

00:08:05.529 --> 00:08:07.989
about the particular topic that interests you.

00:08:07.990 --> 00:08:10.740
So creating a new project in Xcode is pretty easy.

00:08:10.740 --> 00:08:13.660
Xcode has a wide variety of project
templates to get you started.

00:08:13.660 --> 00:08:19.090
You see here -- if you can read that, you see there's
a lot of different kinds of application templates.

00:08:19.089 --> 00:08:25.599
The most common thing is to create a Macintosh application
that the user can double click and can run as a menu bar

00:08:25.600 --> 00:08:28.680
but there's also all kinds of other
templates for whatever you want to do.

00:08:28.680 --> 00:08:33.720
Maybe you want to create one of these little
preview plug-ins that were shown in the keynote

00:08:33.720 --> 00:08:37.410
where you can actually see the contents of
your document right there in the finder.

00:08:37.409 --> 00:08:39.059
There's all kinds of plug-ins.

00:08:39.059 --> 00:08:45.879
So, when you create a new project, you see the Xcode Project
Window and as you can see it's already populated for you

00:08:45.879 --> 00:08:48.990
with all kinds of information and,
in fact, it can -- it can -

00:08:48.990 --> 00:08:56.460
you can build and run it as it is and get a standard
application and then, of course, you fill in your parts.

00:08:56.460 --> 00:09:02.530
So I just want to take you through the contents of the
Project Window here, there's obviously source code files.

00:09:02.529 --> 00:09:10.629
We list those that's regular Objective-C or C
any -- any language that you have compiled for.

00:09:10.629 --> 00:09:16.909
User interface files as Todd mentioned we have a great
tool called Interface Builder that allows you to create UI

00:09:16.909 --> 00:09:20.199
for your application; we'll talk about that in a minute.

00:09:20.200 --> 00:09:27.920
But those files are included in an Xcode project so Xcode
project references all those and organizes them together.

00:09:27.919 --> 00:09:33.059
There's also Data Model Files so just
like your user interface is a structure

00:09:33.059 --> 00:09:38.189
of UI elements, we have data modeled files as well.

00:09:38.190 --> 00:09:43.820
I'll show that in a minute also there are other
resource files, in this case we see a couple

00:09:43.820 --> 00:09:46.220
of string files a couple of other localized files.

00:09:46.220 --> 00:09:52.090
Mac OS X has great localization features so you can
very easily take all of your human readable strings

00:09:52.090 --> 00:09:57.200
and other UI elements and localize them
into a variety of different languages.

00:09:57.200 --> 00:10:02.009
It's all dynamics so your one application package
can contain many, many different localizations

00:10:02.009 --> 00:10:05.220
and then the users can switch on the fly and, in fact,

00:10:05.220 --> 00:10:09.910
different users on the same machine
can choose to see different languages.

00:10:09.909 --> 00:10:14.879
So you can have all these other resources in
various localizations in your Xcode project.

00:10:14.879 --> 00:10:21.860
So those are the building blocks, the parts, from
which you build your project, your application

00:10:21.860 --> 00:10:25.730
or plug-in whatever it is and targets are the instructions.

00:10:25.730 --> 00:10:30.000
It's like these -- this furniture that comes in
the package, right, you have all the various parts

00:10:30.000 --> 00:10:33.919
and then you have the big sheet that labels
everything and says how to put everything together.

00:10:33.919 --> 00:10:37.949
In Xcode those are the targets, in an open
source project that might be a Makefile

00:10:37.950 --> 00:10:41.430
or an Ant file if you're doing Java development.

00:10:41.429 --> 00:10:46.329
So in our case it's the targets that contain all
the instructions and the little details about how

00:10:46.330 --> 00:10:52.460
to put all these pieces together and Xcode also
let's you define execution environments for your --

00:10:52.460 --> 00:10:57.680
your app and what do I mean by that, well,
there's various ways you can run your program.

00:10:57.679 --> 00:10:59.629
You might want to run with certain debug settings.

00:10:59.629 --> 00:11:03.409
You might want to run it with a certain
performance tool or you might want to set it

00:11:03.409 --> 00:11:07.870
up to open some test documents automatically,
so you can set up a bunch of those in an Xcode

00:11:07.870 --> 00:11:11.889
and very quickly test your app in various scenarios.

00:11:11.889 --> 00:11:16.730
So, for more about the details of this, we have a
great session called Getting Started with Xcode

00:11:16.730 --> 00:11:20.519
and that's actually in this room
right after this session so...

00:11:22.230 --> 00:11:27.950
So one of the most common things you would do in
Xcode besides organizing all the input files is

00:11:27.950 --> 00:11:31.790
to actually edit your source code because that's
what contains all your custom logic for --

00:11:31.789 --> 00:11:38.189
for the app and as you might have seen yesterday we have
a great embedded Source Editor that's very powerful

00:11:38.190 --> 00:11:43.500
and also contains a lot of features to let you focus
on the code sort of eyes on the code principle.

00:11:43.500 --> 00:11:51.000
So as you see here there's a warning message that's
shown in yellow here that's shown right below the line

00:11:51.000 --> 00:11:55.740
that has the warning there's also in this case
we see a debugging tool tip that shows you --

00:11:55.740 --> 00:12:00.190
not only shows you the value but you can actually edit
the value, evaluate expressions, those kinds of things

00:12:00.190 --> 00:12:04.110
and you can set break points right there
in the gutter, what we call the gutter,

00:12:04.110 --> 00:12:09.330
and you can also enable various other
features, the line numbers, all kinds of things.

00:12:10.679 --> 00:12:16.899
For more about the new sort of editor-centric development
workflow in Xcode 3.0, we have another session on that,

00:12:16.899 --> 00:12:21.240
that's 305, session 305 that's tomorrow in the Presidio.

00:12:23.049 --> 00:12:28.609
I mention Interface Builder, you edit
through logic in the Source Code Editor

00:12:28.610 --> 00:12:33.519
but you use the separate Interface Builder tool
which is very tightly integrated with Xcode

00:12:33.519 --> 00:12:37.460
so you might have seen a demo yesterday
where a simple context click can open

00:12:37.460 --> 00:12:42.280
up a corresponding interface file in the Interface Builder.

00:12:42.279 --> 00:12:48.909
Interface Builder works a little bit differently from some
of the tools on other -- other platforms that generate code.

00:12:48.909 --> 00:12:52.120
Interface Builder does not generate code for your UI.

00:12:52.120 --> 00:12:56.970
It actually keeps a rich, well-connected representation
of your user interface elements and the connections

00:12:56.970 --> 00:13:02.550
between them and this is great over time because it's
a lot more maintainable then generating a bunch of code

00:13:02.549 --> 00:13:04.379
that you then have to understand and modify.

00:13:04.379 --> 00:13:11.090
So it's actually an object archive of your UI
elements and of the connections between them

00:13:11.090 --> 00:13:15.310
and something called bindings which is
a connection between the UI elements

00:13:15.309 --> 00:13:19.259
and the fundamental properties
of the objects in your program.

00:13:21.870 --> 00:13:28.250
There's a session on Interface Builder tomorrow
in the Mission Room, and they'll be showing some

00:13:28.250 --> 00:13:33.889
of the great features of the new Interface
Builder in Xcode 3.0 which includes the library --

00:13:33.889 --> 00:13:42.159
parts library and also very good Aqua guides for
creating really high quality Aqua User Interfaces.

00:13:42.159 --> 00:13:52.289
So similar to how we have a hierarchy of User Interface
Elements that are well connected and editable over time,

00:13:52.289 --> 00:13:58.649
Xcode also has a Data Model Editor that actually
does the same thing really for your objects,

00:13:58.649 --> 00:14:00.370
your -- for your fundamental object graph.

00:14:00.370 --> 00:14:04.429
So these are the objects that are underneath
your UI that represent your actual data set.

00:14:04.429 --> 00:14:10.370
So, if you're doing an address book application, you
might imagine you have a person, records, you have groups,

00:14:10.370 --> 00:14:17.379
you have these kinds of objects and you can code all that by
hand, but it's a lot easier to lay that out and to develop

00:14:17.379 --> 00:14:25.360
that as a connected graph of objects and
classes and here again Xcode maintains this

00:14:25.360 --> 00:14:33.409
as a strongly connected representation and uses Core Data
underneath the hood to let you do a lot of these things

00:14:33.409 --> 00:14:37.019
without actually writing any code
so that's a great timesaver.

00:14:37.019 --> 00:14:43.079
There's a session on that too, Core Data
session which would be actually today

00:14:43.080 --> 00:14:46.600
It's following this session in a
different room in the Russian Hill --

00:14:46.600 --> 00:14:54.460
hard to go to both, so part of this session is to help you
choose which is going to be the most appropriate for you

00:14:54.460 --> 00:14:59.050
and make sure you're seeing the
right -- the right presentations.

00:14:59.049 --> 00:15:05.719
So we've taken a look at a couple of different
screen shots in terms of workflow for using Xcode

00:15:05.720 --> 00:15:14.620
to build the native app what we've done here -- well, part
of what we're doing is to use Code and User Interface

00:15:14.620 --> 00:15:23.389
and Data Model Editors together and the language the
primary language, Objective-C, is a very dynamic language

00:15:23.389 --> 00:15:27.110
and the frameworks and tools take great
advantage of that and actually --

00:15:27.110 --> 00:15:30.490
you can actually use Ruby or Python or
some of the other scripting languages

00:15:30.490 --> 00:15:33.680
which are also very dynamic to do the coding part.

00:15:33.679 --> 00:15:38.529
So there's dynamism in the Cocoa frameworks,
there's dynamism in the language and the tools

00:15:38.529 --> 00:15:43.519
and there is a common paradigms used throughout the
stack and one of those is Model-View-Controller that many

00:15:43.519 --> 00:15:49.189
of you may be familiar with and that's where you quite
simply separate out your Data Model which has nothing to do

00:15:49.190 --> 00:15:54.570
with your user interface and then you have your view
layer up at the top which is edited with Interface Builder

00:15:54.570 --> 00:15:57.360
and then in between those are the controller layer.

00:15:57.360 --> 00:16:01.050
One of the great things about Mac OS X is
that there is technology called bindings

00:16:01.049 --> 00:16:05.750
which let's you really drastically reduce the amount
of code you write for the controller layer so that,

00:16:05.750 --> 00:16:10.389
if you want a button to enable or disable
based on the state of some model object,

00:16:10.389 --> 00:16:13.149
you can easily do that in Interface
Builder, just set-up the connection.

00:16:13.149 --> 00:16:18.620
You don't write a single line of code
the properties of the UI elements will --

00:16:18.620 --> 00:16:24.960
will take their values from the corresponding properties in
the model and vice versa so that, when you enter something

00:16:24.960 --> 00:16:28.290
in the UI, it automatically affects the model.

00:16:28.289 --> 00:16:34.689
There's also integration with Core Data which is
this great technology for building up your data model.

00:16:34.690 --> 00:16:41.670
So the tools and the frameworks and the language
all fit together and this is a bit similar to some

00:16:41.669 --> 00:16:45.769
of the other platforms you may be familiar
with Visual Studio and C Sharp and .NET

00:16:45.769 --> 00:16:47.990
where those three things kind of work together.

00:16:47.990 --> 00:16:54.399
On Mac OS X we have the same thing Xcode, Cocoa and
Objective-C, but it's very dynamic and it really --

00:16:54.399 --> 00:16:58.389
it really let's you kind of shift into
another gear in terms of development.

00:16:58.389 --> 00:17:01.919
So one of the examples of the integration
here is the refactoring feature in Xcode.

00:17:01.919 --> 00:17:08.240
It's actually new in 3.0 so let's take a look at that --
oh, I should say, yes there's a session on getting started

00:17:08.240 --> 00:17:14.740
with Cocoa Bindings that's going to be later on
today, not at the same time as the 10:30 one.

00:17:16.150 --> 00:17:21.670
So refactoring what is that, well, refactoring
in general is to make whole program modifications

00:17:21.670 --> 00:17:26.090
to your code while preserving the semantics and
Xcode let's you do that you can, for example,

00:17:26.089 --> 00:17:30.669
extract a little piece of a function or a method
into another one, you can rename something

00:17:30.670 --> 00:17:33.470
across your whole program and preserve the semantics.

00:17:33.470 --> 00:17:39.710
We actually go a little bit beyond that too you might
have heard the Objective-C 2.0 which is new in Leopard.

00:17:39.710 --> 00:17:43.690
It's garbage collected, it has iterate
support for iteration those kinds of things.

00:17:43.690 --> 00:17:47.320
It's a newer edition of the language that you can opt in to.

00:17:47.319 --> 00:17:51.490
In addition to the refactoring operations
that preserve the semantics entirely,

00:17:51.490 --> 00:17:56.910
we also let you do whole program transformations that
may go beyond that and modify the semantics to something

00:17:56.910 --> 00:17:59.560
that you want, to make it garbage collected, for example.

00:17:59.559 --> 00:18:07.250
So we have refactoring operations to adopt
some of the Objective C-2.0 paradigms.

00:18:07.250 --> 00:18:16.559
In this case we see an example of the integration, this
is an example of doing a simple rename refactoring,

00:18:16.559 --> 00:18:22.990
but you notice that not only the source code is being named
but also the nib files, these Interface Builder files.

00:18:22.990 --> 00:18:28.480
So Xcode can index and it knows about your Data Model
Files, and it knows about your UI files and then,

00:18:28.480 --> 00:18:33.730
when you make changes, it goes across all those
and make, make the changes correspondingly.

00:18:33.730 --> 00:18:41.610
So here we see the difference here in terms of the
structure of a UI element file the Interface Builder File

00:18:41.609 --> 00:18:47.699
and that it's kind of reached in there and
modified the -- modified the attributes.

00:18:47.700 --> 00:18:49.430
You'll notice there's a checkbox here.

00:18:49.430 --> 00:18:52.480
I don't know if you can read it
in the back; it says snapshot

00:18:52.480 --> 00:18:59.309
and what this is is whenever you make a whole program
transformation, you probably want to take a snapshot

00:18:59.309 --> 00:19:03.139
of the state of your project so this means
that if you decide later that you did something

00:19:03.140 --> 00:19:10.850
that you didn't really want you can rollback to that and
that will be talked about more, refactoring and snapshots,

00:19:10.849 --> 00:19:17.639
in the special session on that and that is
actually on Thursday in the Presidio Session 312,

00:19:17.640 --> 00:19:20.340
all of these are listed in your schedule as well.

00:19:21.609 --> 00:19:26.990
So, once I've taken a snapshot and I've decided
that it wasn't such a good idea to rename it,

00:19:26.990 --> 00:19:33.569
I can actually restore from a snapshot and these snapshots
just stay around and you can decide when you want

00:19:33.569 --> 00:19:38.730
to delete them but by default they just kind of build
up a history of the different states that you moved

00:19:38.730 --> 00:19:46.750
through in your project, and it makes it very easy
to see what changes you made even to Data Model Files

00:19:46.750 --> 00:19:53.329
and UI Element files not just your source code and you
can easily roll back or just restore a particular change.

00:19:53.329 --> 00:19:59.299
So those are all about editing and modifying
the parts that go into your project.

00:19:59.299 --> 00:20:02.669
Talked about targets that are the
blueprints that are these instruction sheets

00:20:02.670 --> 00:20:06.330
for how Xcode should actually assemble
all these things together.

00:20:06.329 --> 00:20:10.939
So a target consists of a variety of different parts itself.

00:20:10.940 --> 00:20:11.799
It's very flexible.

00:20:11.799 --> 00:20:14.700
You can use a target to copy headers.

00:20:14.700 --> 00:20:16.660
You would do that, for example, into a framework.

00:20:16.660 --> 00:20:25.470
A framework on Mac OS X contains both a code and resources
and the APIs in terms of headers that are accessible.

00:20:25.470 --> 00:20:33.089
There's obviously resource files, you may have
something like a framework that has UI functionality

00:20:33.089 --> 00:20:40.849
and it may have Interface Builder files in and of itself in
there or actually Core Data model files might be in there.

00:20:40.849 --> 00:20:44.519
There's a facility you can run,
actually, an arbitrary script.

00:20:44.519 --> 00:20:50.460
You can run Shell scripts, Ruby scripts any of those kinds
of things as part of your build, this can be very powerful

00:20:50.460 --> 00:20:55.350
because it gives you hooks such that you can
evoke even an entire rebuild system if you want to

00:20:55.349 --> 00:20:57.899
but more commonly people will just run some custom tool.

00:20:57.900 --> 00:21:02.220
You can even set-up your projects so that
one of your targets builds a custom tool

00:21:02.220 --> 00:21:08.210
that converts let's say an image into some custom format
and then a later target can actually evoke that tool

00:21:08.210 --> 00:21:11.690
and then perform that transformation
on the resources for your application.

00:21:11.690 --> 00:21:19.019
So very powerful and something that really, really
let's you do almost anything as part of the build.

00:21:19.019 --> 00:21:26.279
There's obviously the code that's in your projects most
-- most interesting projects contain some custom logic,

00:21:26.279 --> 00:21:33.149
so Xcode will compile and link that code for you and
there is like the project template there is a variety

00:21:33.150 --> 00:21:41.110
of different target templates for you to choose from all the
way from Carbon and Cocoa, UI stuff even if you just want

00:21:41.109 --> 00:21:47.009
to create a command line tool you can easily
do that with the starting point templates.

00:21:47.009 --> 00:21:53.160
There's another session called 311 about the
Xcode build system and that one is on Wednesday.

00:21:53.160 --> 00:21:59.100
And there they're going into a lot more
detail about how to customize the build system.

00:22:01.789 --> 00:22:08.349
So you've edited all your files; you've built your
project and then, of course, you want to run and debug

00:22:08.349 --> 00:22:11.709
and Xcodes' debugging is pretty powerful.

00:22:11.710 --> 00:22:16.980
You have a debugger window that you can just really
immerse yourself in if you want to but in general we want

00:22:16.980 --> 00:22:21.289
to keep the eyes on the code. This screen shot shows
the debugging window that you might not have seen

00:22:21.289 --> 00:22:27.009
in the previous sessions typical thing with the stack
trace and showing the various variables, of course,

00:22:27.009 --> 00:22:33.009
you can evaluate expressions on the fly you can
modify expressions, modify the value variables.

00:22:33.009 --> 00:22:38.289
You can actually drag the program counter back
in time and rerun a piece of code over again

00:22:38.289 --> 00:22:49.099
after you've modified a value those kinds of things that
can really help you -- help you figure out what's going on.

00:22:49.099 --> 00:22:50.569
( Inaudible audience question )
There's some support for that.

00:22:50.569 --> 00:22:58.279
I think it's probably best to go to the debugging
session and ask that question -- oh, sorry.

00:22:58.279 --> 00:23:00.910
In general, if we could ask the
questions at the end, that would be great.

00:23:00.910 --> 00:23:08.430
We're actually going to have a Q&A session at the end of
this, so we will -- we'll remention that question then.

00:23:08.430 --> 00:23:16.009
Unit testing is a pretty powerful thing that's in Xcode
and the idea here is that your software is composed

00:23:16.009 --> 00:23:20.210
of various components that can be tested in isolation.

00:23:20.210 --> 00:23:24.910
So you may have a little tool box or you may even
have just a class with some kind of data structure

00:23:24.910 --> 00:23:33.670
where you can test it outside of its use in your
app and what you can do in Xcode is set up Unit tests

00:23:33.670 --> 00:23:38.300
for that component and there are several benefits to this.

00:23:38.299 --> 00:23:44.539
One of the benefits obviously is that it helps you develop
your API and make sure that that component is well designed

00:23:44.539 --> 00:23:47.289
but also over time as you optimize or make changes

00:23:47.289 --> 00:23:51.319
to the component it actually helps you make sure
you didn't change your semantics inadvertently,

00:23:51.319 --> 00:23:56.269
and you can easily set-up Xcode to run all of
these unit tests whenever you build your project.

00:23:56.269 --> 00:24:03.500
And this is great, this example shows, for example, that I
just intentionally in this case introduced a semantic change

00:24:03.500 --> 00:24:11.490
in one of my components and because these unit tests are all
run all the time, if you choose, you can easily see as soon

00:24:11.490 --> 00:24:16.000
as you made that change and then you can debug that and
step into it and see what caused the change maybe you tried

00:24:16.000 --> 00:24:24.640
to optimize something but you forgot about some edge case. So
in summary about Xcode we have tools; we have the language;

00:24:24.640 --> 00:24:31.980
and the frameworks that work very well together, Xcode,
Cocoa, Objective-C are the tools framework and language,

00:24:31.980 --> 00:24:37.920
and they're really designed together to make you more
productive and all of them are improved in Leopard.

00:24:37.920 --> 00:24:40.920
So you've built your app.

00:24:40.920 --> 00:24:45.690
You're running it; maybe now you've debugged it, tested it,
and now it works well but maybe it's running a bit slow,

00:24:45.690 --> 00:24:52.160
maybe it's using too much memory, so
like Xcode is the hub for development,

00:24:52.160 --> 00:24:55.190
Xray is really the first starting point for analysis.

00:24:55.190 --> 00:24:57.980
So what is Xray, what can it help you analyze?

00:24:57.980 --> 00:25:00.450
Well, obviously memory usage that's the big thing.

00:25:00.450 --> 00:25:04.569
It's often related to the performance
because, if you use lots and lots of memory,

00:25:04.569 --> 00:25:07.429
your machine is probably going to slow to a crawl.

00:25:07.430 --> 00:25:11.289
CPU performance if you are doing
numeric calculations just raw --

00:25:11.289 --> 00:25:15.339
raw performance there but there's all kinds of
other stuff maybe you're interested in, you know,

00:25:15.339 --> 00:25:20.279
why is this file being opened 10
times, what in my code is doing that.

00:25:20.279 --> 00:25:23.910
There's network activity and specialized
graphics calls and really

00:25:23.910 --> 00:25:28.660
with Xray almost any behavior of
the application can be analyzed.

00:25:28.660 --> 00:25:32.700
There are great starting point templates,
you might have seen this panel before.

00:25:32.700 --> 00:25:36.630
This is what you see when you first launch
Xray and you can start with either one

00:25:36.630 --> 00:25:44.920
of those commonly encountered analysis templates or you
can start with a blank one and drag in your own instruments

00:25:44.920 --> 00:25:51.330
from the part library. Just a quick overview
of the Xray window as you can guess I'm going

00:25:51.329 --> 00:25:54.099
to refer you to an Xray session here for the details.

00:25:54.099 --> 00:26:01.309
But the basic idea is that it is a collection of instruments
and you can add as many of those as you want and then,

00:26:01.309 --> 00:26:06.990
once you've collected data, all these data streams are
collected together so that you can correlate them over time

00:26:06.990 --> 00:26:13.799
and that's a really powerful thing so, once you've
done that, you can see your data in various ways,

00:26:13.799 --> 00:26:17.359
there's all kinds of options that
are based on the selected instrument.

00:26:17.359 --> 00:26:23.409
There is a list of trace events for the selected instrument
for a sampling instrument this would be, you know,

00:26:23.410 --> 00:26:29.620
what was the stack at any given time; for an
allocation instrument; it might be well what --

00:26:29.619 --> 00:26:34.509
what's the actual object allocation so that's the detail
there at the bottom for the instrument you have selected

00:26:34.509 --> 00:26:40.759
and there's an extended detail of you that usually shows
you the stack trace of an extended selected trace event

00:26:40.759 --> 00:26:45.619
so you can see exactly where any
given block of memory was allocated

00:26:45.619 --> 00:26:48.549
where a particular file was open, those kinds of things.

00:26:48.549 --> 00:26:50.149
There is another session on Xray.

00:26:50.150 --> 00:26:57.560
It's in the Presidio on Wednesday and that's a
great session that will really give you introduction

00:26:57.559 --> 00:27:02.279
to how -- how to use the power of Xray.

00:27:02.279 --> 00:27:09.569
So one of the powerful things about Xray that is
kind of new is the ability to add an arbitrary set

00:27:09.569 --> 00:27:12.139
of instruments and collect all these things over time.

00:27:12.140 --> 00:27:18.520
Very often you'll find -- you'll be running
your tests and then discover that, well,

00:27:18.519 --> 00:27:23.619
now I understand that it's doing a certain thing
but now I need to add another instrument to know why

00:27:23.619 --> 00:27:28.149
and what you can do is you can develop your own
templates, if you want to, you can customize

00:27:28.150 --> 00:27:33.100
and save off your own templates and in particular what's
really useful is you can actually add one instrument

00:27:33.099 --> 00:27:38.929
that records the UI actions that you performed and you can
play those back and this is great for when you say, well,

00:27:38.930 --> 00:27:42.620
let me see what the CPU is doing
and then you discover, well, okay,

00:27:42.619 --> 00:27:45.879
now I know what the CPU was doing but
was I opening any files at the time.

00:27:45.880 --> 00:27:49.430
You can just go back and add that
instrument in and then rerun your test

00:27:49.430 --> 00:27:55.750
and Xray will rerun exactly the same UI actions that
you performed and you can see exactly what's going

00:27:55.750 --> 00:27:58.029
on with this other instrument -- really powerful.

00:27:58.029 --> 00:28:02.009
So once you have your data you, of
course, want to see what's going on there.

00:28:02.009 --> 00:28:09.640
You can narrow down the scope onto just the
timeline that you want to see and, of course,

00:28:09.640 --> 00:28:12.390
one of the interesting things is
to see it what line of code --

00:28:12.390 --> 00:28:18.410
of my code was causing this, so as you may have
seen of the demo yesterday you can go directly

00:28:18.410 --> 00:28:23.360
from a back trace back to the line of source code in Xcode.

00:28:23.359 --> 00:28:29.279
So in summary it's really a way to gather all these
different tools that Apple has had for a long time

00:28:29.279 --> 00:28:36.539
for analyzing your program's behavior; do it in a nice
intuitive user interface based on the GarageBand metaphor

00:28:36.539 --> 00:28:41.269
and to be able to capture data streams and those kinds
of things and it's compatible with lower level tools

00:28:41.269 --> 00:28:45.250
like Sample, these old -- older
tools Xray can open those traces

00:28:45.250 --> 00:28:49.609
and really show you everything in one unified front end.

00:28:49.609 --> 00:28:56.439
So we've seen just a brief overview of what it looks like
to create a native application and to analyze it using Xcode

00:28:56.440 --> 00:29:01.570
and Todd's going to come back on stage and
show you what else you can build with Xcode.

00:29:01.569 --> 00:29:07.710
( Applause )

00:29:07.710 --> 00:29:12.799
>> So buckle your seatbelts, we're going to continue on
with kind of a whirlwind tour of a sampling of the variety

00:29:12.799 --> 00:29:20.149
of other types of products and other types of tasks you
can perform with the -- the diversity of tools on Mac OS X;

00:29:20.150 --> 00:29:23.300
first starting with what else can Xcode build?

00:29:23.299 --> 00:29:30.309
This is obviously in order of importance but you can
build screen saver plug-ins and integrate great content

00:29:30.309 --> 00:29:35.950
that you create using Quartz Composer which, again,
I'll talk a little bit more about in a moment

00:29:35.950 --> 00:29:42.140
and there's a Quartz Composer session about how to use
it to design your motion graphics tomorrow morning.

00:29:42.140 --> 00:29:49.980
Next project particularly dear to my heart,
Automator Actions for those of you not aware

00:29:49.980 --> 00:29:56.870
of Automator it's a great end user level automation tool and
what we have seen is that, if you build a well-designed set

00:29:56.869 --> 00:30:02.429
of Automator actions for your application, you can expose
its power and it's functionality to a much wider audience

00:30:02.430 --> 00:30:08.420
and sell more copies of your software and, if you make it
really easy for your customers to integrate your application

00:30:08.420 --> 00:30:11.740
into an automated workflow, they're
going to be loyal customers.

00:30:11.740 --> 00:30:18.279
They will not want to go back to doing that task by hand
and there's a great hands-on session tomorrow morning.

00:30:18.279 --> 00:30:22.849
It's a popular time on how to build Automator actions.

00:30:25.970 --> 00:30:33.279
Something else really fun, games: Mac OS X includes
industry standards frameworks like OpenGL, OpenAL,

00:30:33.279 --> 00:30:40.329
GLUT that makes it easy to bring your platform agnostic code
over to Mac OS X and put a beautiful Cocoa user interface

00:30:40.329 --> 00:30:51.250
on top of it, and we have sessions on bringing your OpenGL
Code over to Mac OS X. What else can we build, well,

00:30:51.250 --> 00:30:57.829
perhaps the polar opposite of games, if you need to
build I/O Kit Drivers or other types of kernel extensions,

00:30:57.829 --> 00:31:03.960
Xcode makes it easy to do that as well and, if
you need to know how to do this or already know

00:31:03.960 --> 00:31:09.950
and just need some additional tips and tricks, we have a
session immediately following this one on kernel debugging.

00:31:09.950 --> 00:31:16.870
So one of the things that Anders has mentioned
several times already is that particularly

00:31:16.869 --> 00:31:21.279
in Leopard this has been possible before but
there's a lot of great new functionality in Leopard

00:31:21.279 --> 00:31:28.259
that makes it much easier to build native Mac OS X
applications using your scripting language of choice.

00:31:28.259 --> 00:31:31.160
Historically you've been able to do that with
our own scripting language, AppleScript,

00:31:31.160 --> 00:31:37.250
but we have also bundled the bridges that you need
to build your applications using Python or Ruby

00:31:37.250 --> 00:31:40.950
and that's all really easy to do in
Xcode as well, support syntax coloring

00:31:40.950 --> 00:31:47.830
and the other important editor features right in Xcode
for those languages and there's an entire session

00:31:47.829 --> 00:31:54.480
on that Thursday morning on how to develop
Cocoa applications using Python and Ruby.

00:31:54.480 --> 00:31:59.610
Moving along on our whirlwind tour, again,
Anders mentioned open source projects earlier

00:31:59.609 --> 00:32:05.389
and there's a great new Xcode feature called the Organizer
which you may have seen in yesterday's developer tools State

00:32:05.390 --> 00:32:09.680
of the Union session that makes it really
easy to bring over projects that don't use --

00:32:09.680 --> 00:32:13.769
that aren't Xcode projects and use
other build systems like Make or Autocom

00:32:13.769 --> 00:32:18.759
for Ant. The Organizer makes it really
easy to just drag those projects in.

00:32:18.759 --> 00:32:23.099
It will automatically detect that your
project uses one of those build systems

00:32:23.099 --> 00:32:25.549
and set-up the build, clean and run buttons for you.

00:32:25.549 --> 00:32:33.200
You can also integrate all sorts of other type of scripting
into the action menu and customize your -- your --

00:32:33.200 --> 00:32:38.930
the Organizer to your heart's content so it builds and works
just the way you like it, and there's a complete session

00:32:38.930 --> 00:32:44.299
on that, hands-on, so you can follow along
with the presenter on Thursday afternoon.

00:32:45.950 --> 00:32:50.400
So, that's, again, a whirlwind tour of other
types of products that you can build with Xcode.

00:32:50.400 --> 00:32:55.660
Let's look at some of the other tools
that we have for other types of projects.

00:32:55.660 --> 00:33:01.160
So I just refer to the Organizer and the fact that it can --
it supports the Ant Build System which makes it really easy

00:33:01.160 --> 00:33:06.440
to work with Java Projects and Mac OS X is
a really great Java development platform.

00:33:06.440 --> 00:33:12.350
How do I know that because we see the seeds of
MacBook Pros in Java conferences and we have a number

00:33:12.349 --> 00:33:17.279
of sessions this week about bringing your
Java applications to Mac OS X Leopard.

00:33:19.690 --> 00:33:26.700
So perhaps a diversion -- so how many out there think that
this whole GUI thing is a fad and it's not going to last,

00:33:26.700 --> 00:33:31.029
prefer to just be working with vi and Emacs in a terminal?

00:33:31.029 --> 00:33:36.490
I -- I sympathize, and we have tools for you as well,
both specialized tools like Xcode Build which allows you

00:33:36.490 --> 00:33:42.210
to build your Xcode project at the command line and Xed
which is a great new tool in Leopard which allows you

00:33:42.210 --> 00:33:46.870
to open up the Xcode Editor from the command
line and integrate Xcode into your --

00:33:46.869 --> 00:33:54.579
allow you to script these tools and interact with them
from terminal, plus we have the other command line tools

00:33:54.579 --> 00:34:02.569
that you'd expect on any Linux -- oh, Linux,
UNIX platform, wow, including our Compiler GCC

00:34:02.569 --> 00:34:07.119
and the other tools you might expect and for those of you
who don't know what these tools are, you don't need to,

00:34:07.119 --> 00:34:12.269
the GUI tools will take care of it for you but those of
you who do love these tools, they're there for your use

00:34:12.269 --> 00:34:21.130
and there's a session on compiler advances that we've made
in GCC for our purposes on the Mac on Thursday afternoon.

00:34:23.130 --> 00:34:29.360
So we've mentioned Shark earlier. Xray is a
great new performance analysis tool on Leopard,

00:34:29.360 --> 00:34:34.030
Shark has been around later -- ah, longer
but it has a great new version in Leopard,

00:34:34.030 --> 00:34:37.060
and it focuses more on instruction level analysis.

00:34:37.059 --> 00:34:41.860
It is great at helping you find hot
spots and highly optimized algorithms.

00:34:41.860 --> 00:34:46.590
You can use it to take profiles of your
application or the entire system to see what kinds

00:34:46.590 --> 00:34:51.160
of interactions are taking place between your
application and all the other processes on the system

00:34:51.159 --> 00:34:55.589
and this can be great for tackling all
sorts of problems like those that are listed

00:34:55.590 --> 00:34:58.269
on the slide which I'm not going to read to you.

00:34:58.269 --> 00:35:00.119
Some of you may have encountered these problems before

00:35:00.119 --> 00:35:03.889
and Shark is a really great tool
for helping you solve them.

00:35:03.889 --> 00:35:10.389
This is a screen shot of a Shark time profile of one
particular application and you can take similar profiles of,

00:35:10.389 --> 00:35:18.239
again, the entire system that tell you exactly
where the time is being spent. And there's a session

00:35:18.239 --> 00:35:25.750
on Thursday afternoon about getting started
using Shark to analyze and optimize your code.

00:35:25.750 --> 00:35:31.179
So, again, let's drop back to the terminal, we have a
number of analysis tools that are also accessible, again,

00:35:31.179 --> 00:35:37.929
including specialized tools that are specific to the
Mac like a command line tool for Xray that allows you

00:35:37.929 --> 00:35:45.549
to take the data which you can then later analyze using the
GUI, DTrace which is great open source technology that many

00:35:45.550 --> 00:35:50.990
of the Xray instruments rely on you can also,
of course, access from the command line;

00:35:50.989 --> 00:35:57.779
Sample is a great tool for sampling a performance of your
application periodically pausing it every ten milliseconds

00:35:57.780 --> 00:36:04.940
and finding out where it's spending its time but
Sample, again, has been also incorporated in Xray.

00:36:04.940 --> 00:36:10.849
Shark we have a command line tool to take the Shark Profiles
which you can then later analyze with the GUI and a number

00:36:10.849 --> 00:36:16.039
of other tools that you -- many of which you will
find familiar from other UNIX platforms to look

00:36:16.039 --> 00:36:19.230
at in various ways at how your
program is using memory use --

00:36:19.230 --> 00:36:24.480
using memory and how you can optimize it to give
your users a better experience with your application

00:36:24.480 --> 00:36:33.110
And we have a session on using DTrace which,
again, will be great for those of you who --

00:36:33.110 --> 00:36:36.550
not these newfangled GUI's on Thursday afternoon.

00:36:38.329 --> 00:36:43.259
So how many of you are familiar
with installing your application

00:36:43.260 --> 00:36:47.000
on other platforms, how many of you have dealt with that?

00:36:47.000 --> 00:36:53.550
Installation is lot similar -- simpler on Mac OS X. In
many cases it can be as easy as building a disc image

00:36:53.550 --> 00:36:56.289
with your application bundle and
just allowing your users to drag it

00:36:56.289 --> 00:37:04.079
over into their applications folder. That's it. The bundle
technology on Mac OS X allows you to include all kinds

00:37:04.079 --> 00:37:09.819
of associated data that the operating system can then
find in the bundle like document icons and other kinds

00:37:09.820 --> 00:37:15.410
of associations so that the operating system
shows that it knows your application is there

00:37:15.409 --> 00:37:19.039
without you having to do anything with registry keys.

00:37:19.039 --> 00:37:25.259
The operating system takes care of that for you but,
of course, if you have more complex installation needs,

00:37:25.260 --> 00:37:29.820
we have a great tool called PackageMaker which allows
you to build custom installers that allow you to do pre

00:37:29.820 --> 00:37:34.620
and postinstallation scripts and all the other
bells and whistles that you might need if you need

00:37:34.619 --> 00:37:38.980
to install other things on the system and this is just a --

00:37:38.980 --> 00:37:45.219
a look at it; allows you to graphically lay out
your welcome screen and provide the look you want;

00:37:45.219 --> 00:37:49.819
your license agreement whatever else you need in
your custom installer and then there's a session

00:37:49.820 --> 00:37:54.210
on that later this afternoon in this very room.

00:37:55.869 --> 00:37:59.969
So continuing on with our tour we've
referenced Quartz Composer several times.

00:37:59.969 --> 00:38:06.019
It's a great tool for designing motion graphics which you
might not think about but can really be quite powerful

00:38:06.019 --> 00:38:10.190
in a lot of different types of applications,
not just screen savers as I mentioned before.

00:38:10.190 --> 00:38:17.409
Quartz Composers animations are actually used in a wide
variety of applications on Mac OS X from iTunes to Dashcode

00:38:17.409 --> 00:38:25.319
to screen savers and you might find it very interesting
to add some more visual pizzazz to your application

00:38:25.320 --> 00:38:30.960
so I encourage you to come out to one of the sessions to
find out what you can do with Quartz Composer tomorrow

00:38:30.960 --> 00:38:40.199
and Thursday, again, in this very room another very
interesting graphics app is OpenGL Shader Builder

00:38:40.199 --> 00:38:47.239
which I mentioned earlier, and it's a dedicated tool that
allows you to build your vertex and fragment GPU programs

00:38:47.239 --> 00:38:58.709
for OpenGL and test and debug them. And there's a great
session on tuning your application on Thursday morning,

00:38:58.710 --> 00:39:04.510
which brings me to Dashcode, another
project particularly near

00:39:04.510 --> 00:39:09.040
and dear to my heart which you
may have seen shown yesterday.

00:39:09.039 --> 00:39:13.250
It's an IDE focussed on building widgets
which are a lot of fun and it makes --

00:39:13.250 --> 00:39:15.690
Dashcode makes building widgets really fun.

00:39:15.690 --> 00:39:17.329
You can start off with a variety of templates.

00:39:17.329 --> 00:39:22.650
You can see that we have a similar concept in
many of our development tools from Xray, to Xcode,

00:39:22.650 --> 00:39:27.710
to Dashcode where we provide you rich
starting points to get you going.

00:39:27.710 --> 00:39:33.940
You can create all sorts of different
types of widgets, edit them graphically,

00:39:33.940 --> 00:39:41.570
we have the DOM there on the left navigator to make it easy
to select different portions of your widget's interface,

00:39:41.570 --> 00:39:45.410
steps which actually lead you through
the whole process of building a widget.

00:39:45.409 --> 00:39:52.869
The parts library, again, similar to Interface Builder
and Xray where we have a library that allows you to drag

00:39:52.869 --> 00:39:59.539
in instruments in Xray or different user interface
elements here in Dashcode as well as Interface Builder

00:39:59.539 --> 00:40:06.039
and an Inspector to customize those parts to look
just the way -- look and behave just the way you want them to.

00:40:06.039 --> 00:40:08.820
It also has an integrated editor which makes it very easy

00:40:08.820 --> 00:40:14.830
to edit your JavaScript CSS and
HTML source that makes your widget.

00:40:14.829 --> 00:40:18.009
There it is and it is very similar to the editor in Xcode.

00:40:18.010 --> 00:40:23.430
It gives you the same syntax coloring and
code completion that you would expect.

00:40:23.429 --> 00:40:28.859
We also have a Files View which allows you to manage
the files that make up your widget and, again,

00:40:28.860 --> 00:40:33.820
in the library we have also reasonable code
snippets, little pieces of JavaScript code that --

00:40:33.820 --> 00:40:38.100
for common tasks that you might
need to implement your widget,

00:40:38.099 --> 00:40:44.239
and finally we have an integrated JavaScript debugger
as well with the controls you'd expect to step

00:40:44.239 --> 00:40:51.239
through your code, examine the variables and the stack
frame and easily see your running widget as you're stepping

00:40:51.239 --> 00:40:57.539
through your code and debugging it, and we have a great
session -- I know because I've been in the rehearsals --

00:40:57.539 --> 00:41:06.489
tomorrow afternoon in this very room, popular room, and I
hope to see you there and that concludes our whirlwind tour

00:41:06.489 --> 00:41:15.169
of tools on Mac OS X. But let's refresh our memory, again,
to keep us all oriented, so again Xcode is our universal IDE

00:41:15.170 --> 00:41:20.650
where you're going to spend the bulk of your time for
most products; Interface Builder where you're going

00:41:20.650 --> 00:41:25.579
to build your user interfaces for your products;
Dashcode where you can build a great widget

00:41:25.579 --> 00:41:32.039
that can help promote your products and give your users
a really quick experience if you to enter some data

00:41:32.039 --> 00:41:37.449
for your particular application; Xray is a
great new application makes it really easy

00:41:37.449 --> 00:41:43.079
and fun to analyze your programs's behavior
and find performance and memory usage problems.

00:41:44.510 --> 00:41:50.350
These are our tools, again, this is what you'll see when
you install the Leopard preview that you received yesterday

00:41:50.349 --> 00:41:57.349
which I'll highlight right there on the DVD, you
can open up the installer and install the tools.

00:41:57.349 --> 00:42:03.559
One of the great things about Mac OS X is that each
release includes the latest and greatest tools,

00:42:03.559 --> 00:42:10.699
tools aren't an afterthought, they're part of every release
of Mac OS X but what about in between releasees? Well,

00:42:10.699 --> 00:42:14.849
we often have tools releases in between OS
releases and you can easily down load them

00:42:14.849 --> 00:42:17.730
from the ADC web site at developer.apple.com/tools.

00:42:17.730 --> 00:42:27.490
So to sum up, again, as Anders mentioned earlier Xray is
really the hub of the development experience on Mac OS X,

00:42:27.489 --> 00:42:33.369
but Mac OS X also has all the other tools you need
for specialized purposes and other types of products.

00:42:33.369 --> 00:42:38.509
We encourage you to use our powerful analysis tools
to polish your software and make it run really great

00:42:38.510 --> 00:42:43.580
on the Mac, and please take advantage of the many
detailed sessions; those we've highlighted today

00:42:43.579 --> 00:42:48.500
and there are many others as well that we didn't
have time to point out and have a great conference.

00:42:48.500 --> 00:42:56.480
We're really happy to see you here and we look forward
to what you build with our tools, go out and amaze us.

00:42:56.480 --> 00:43:01.099
Matthew Formica is our evangelist and, if you have any
questions about tools, he's a great contact and, in fact,

00:43:01.099 --> 00:43:04.539
he'll be giving the Getting Started with
Xcode session immediately following this one.