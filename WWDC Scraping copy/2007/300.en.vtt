WEBVTT

00:00:20.710 --> 00:00:24.609
>> Good afternoon and welcome to
the Developer Tools State of the Union.

00:00:24.609 --> 00:00:27.070
( Period of silence )

00:00:27.070 --> 00:00:29.320
Mac users have high standards.

00:00:29.320 --> 00:00:32.609
They want you to amaze them, with cool applications.

00:00:32.609 --> 00:00:36.079
They want to use truly outstanding software.

00:00:36.079 --> 00:00:38.929
And of course great things don't just happen by themselves.

00:00:38.929 --> 00:00:42.740
But they do happen a lot faster
if you apply the right tools.

00:00:42.740 --> 00:00:44.580
And that's what this session is about.

00:00:44.579 --> 00:00:46.719
You want to build fantastic applications.

00:00:46.719 --> 00:00:48.780
And we build the tools to help you with that.

00:00:48.780 --> 00:00:52.300
We build the tools that keep you productive and creative.

00:00:54.039 --> 00:00:57.780
Together, with Xcode 2.0 on top of
Tiger, we just finished the transition

00:00:57.780 --> 00:01:01.320
to Universal Intel and PowerPC applications.

00:01:02.600 --> 00:01:07.519
And now with Leopard and the next generation of the
tools, we're going to take the lead that will take us

00:01:07.519 --> 00:01:13.250
to 64-bit binaries to graphically stunning user interfaces
on top of frameworks like Core Animation.

00:01:13.250 --> 00:01:16.430
And to garbage collected Cobalt Objective-C apps.

00:01:17.450 --> 00:01:21.909
This Leopard tools release to us engineers here at Apple is really exciting.

00:01:21.909 --> 00:01:27.969
A few years ago the when the inter transition was about to
happen, they started putting a lot of energy into our tools.

00:01:27.969 --> 00:01:33.280
And of course, since the most important goal was to
allow for easy transition of all your applications,

00:01:33.280 --> 00:01:36.969
we funneled almost all the energy into the transition.

00:01:36.969 --> 00:01:40.099
It took a lot of work but it did
pay off and that is behind us.

00:01:40.099 --> 00:01:47.039
If we can take that same energy and momentum and push
out in new directions that are a lot of more innovative,

00:01:47.040 --> 00:01:50.040
and to really advance the state of developer tools.

00:01:50.040 --> 00:01:55.590
So in Leopard we've prepared a release for you that is
a great mix of improvements to the base functionality,

00:01:55.590 --> 00:02:01.870
performance enhancements, commonly requested features
and features that are based on completely new ideas.

00:02:03.799 --> 00:02:09.680
Like every release of Mac OS X, Leopard will contain
a lot of developer tools, some big and some small.

00:02:09.680 --> 00:02:11.920
We won't have the time to cover
them all today in this session.

00:02:11.919 --> 00:02:17.039
But I do want to give you an impression for the most
important improvements and additions that we implemented.

00:02:17.039 --> 00:02:20.739
And to do that, we're going to structure the session to four parts.

00:02:20.740 --> 00:02:23.760
( Period of silence )

00:02:23.759 --> 00:02:28.280
We're going to start out by taking a look at what
we have in our toolbox for the Mac developers.

00:02:28.280 --> 00:02:31.490
Those of you that develop native Mac applications.

00:02:32.939 --> 00:02:36.590
Then you're going to take a look at the growing
number of Mac developers that leverage software

00:02:36.590 --> 00:02:41.620
from other communities, like UNIX,
Open Source or Scientific Computing.

00:02:42.930 --> 00:02:46.099
Next we're going to take a look at the
needs of the automation solution providers.

00:02:46.099 --> 00:02:50.549
Those of you that combine multiple
applications into custom solutions.

00:02:50.550 --> 00:02:53.560
And last but not least, we are going to
take a look at how it can help the thousands

00:02:53.560 --> 00:02:58.870
of developers that develop widgets for Mac OS X.

00:02:58.870 --> 00:02:59.550
( Period of silence )

00:02:59.550 --> 00:03:02.130
So this is our agenda, let's dive right in.

00:03:02.129 --> 00:03:03.930
Let's start with the Mac developers.

00:03:03.930 --> 00:03:07.860
( Period of silence )

00:03:07.860 --> 00:03:11.510
Native applications, all right, the
center of the Mac user experience.

00:03:11.509 --> 00:03:15.519
Native applications are the ones that make use of
the unique features that Mac OS X has to offer.

00:03:15.520 --> 00:03:21.110
And whether you work in one of the large companies or
one of the major application suites or whether you work

00:03:21.110 --> 00:03:24.270
in a small shop in one of the
more specialized Mac applications,

00:03:24.270 --> 00:03:28.280
you want to build tools for you
that work great for all of you.

00:03:28.280 --> 00:03:31.840
And so we commonly ask for your
feedback and this is what you tell us.

00:03:31.840 --> 00:03:35.270
You want tools that are fast, so fast
they don't interrupt your work flow.

00:03:35.270 --> 00:03:37.390
( Period of silence )

00:03:37.389 --> 00:03:40.959
You want tools that scale to even
the largest projects out there.

00:03:40.960 --> 00:03:44.080
You want tools that are tightly
integrated with the Mac OS X platform

00:03:44.080 --> 00:03:46.610
and the underlying hardware and
know how to make best use of it.

00:03:46.610 --> 00:03:51.790
And maybe most importantly, you want
tools that quickly unlock new features

00:03:51.789 --> 00:03:55.859
in Mac OS X to you and thus foster your innovation.

00:03:55.860 --> 00:04:00.590
The tools that most of you need of most Mac applications
developers use are of course Xcode, our universal IDE,

00:04:00.590 --> 00:04:04.550
and Interface Builder, our user interface design tool.

00:04:04.550 --> 00:04:08.600
And in Leopard we are shipping major new
revisions of both these applications.

00:04:08.599 --> 00:04:14.469
Both applications have dramatically improved workflows
and new features that allow you to be even more creative.

00:04:14.469 --> 00:04:18.100
And to explain that a little bit,
I'd like to read a quote to you.

00:04:18.100 --> 00:04:22.439
It's from a book that inspired us
while we were working on this release.

00:04:22.439 --> 00:04:24.889
It's from, never mind.

00:04:24.889 --> 00:04:25.449
( Laughter )

00:04:25.449 --> 00:04:30.509
But here's how it goes.

00:04:30.509 --> 00:04:34.800
"What makes experience generally satisfying
is a state of consciousness called flow

00:04:34.800 --> 00:04:39.910
a state of concentration so focused that it
amounts to absolute absorption in an activity."

00:04:39.910 --> 00:04:42.550
The new workflow is an excellent interface builder.

00:04:42.550 --> 00:04:46.420
in precisely at keeping you in such a state of flow.

00:04:46.420 --> 00:04:56.900
And to show you I'd like to ask Chris Espinosa
to come up on stage and give you the first demo.

00:04:56.899 --> 00:04:58.629
( Applause )
>> Thank you Andreas.

00:04:58.629 --> 00:05:04.329
The two key elements of the flow of Xcode 3.0
and Interface Builder 3.0 are

00:05:04.329 --> 00:05:10.370
that we're bringing information to you where you
are and then we're moving the tools out of the way.

00:05:10.370 --> 00:05:13.560
And I'm going to show you that by
doing some simple development steps

00:05:13.560 --> 00:05:18.079
in a little application I like called Grand Perspective.

00:05:18.079 --> 00:05:22.969
Grand Perspective looks at my disk and gives
me a tree view of everything on my disk.

00:05:22.970 --> 00:05:31.600
I can drill down in it to see the sizes and names of the
individual files in the directories of pop back up.

00:05:31.600 --> 00:05:37.500
Now what I'm going to do with Grand Perspective is something
I've always wanted to in it, which is to add some menu items

00:05:37.500 --> 00:05:42.029
to go down and up and put command keys on there
so I can go down and up with the keyboard.

00:05:42.029 --> 00:05:44.259
Fairly simple step.

00:05:44.259 --> 00:05:47.430
So the first thing I'm going to do is go
over to my Grand Perspective project.

00:05:47.430 --> 00:05:52.689
Now I've started doing this already, and so I've got a
couple of things wired up, but I'm not quite finished yet.

00:05:52.689 --> 00:06:00.689
So I will go open up the main menu
code file for my recent files menu.

00:06:00.689 --> 00:06:04.889
And I can see this is the state of
the program where I left it off.

00:06:04.889 --> 00:06:07.509
Now notice, I'm just seeing a top level overview of my code.

00:06:07.509 --> 00:06:11.659
That's because I folded all the methods
and even all of the comments out of the way.

00:06:11.660 --> 00:06:16.860
I'm moving things out of the way so I can focus on my work.

00:06:16.860 --> 00:06:22.770
Down here, I see this not quite finished up
action method, which is where I've been working.

00:06:22.769 --> 00:06:26.719
And what I want to do is compile to
see how well it's going so far.

00:06:26.720 --> 00:06:29.320
Well I compile and I get a compiler error.

00:06:29.319 --> 00:06:35.779
But the compiler error doesn't pop up in a second window
covering my work, it pops up as a message bubble right

00:06:35.779 --> 00:06:39.519
in line in my text telling me exactly what's wrong.

00:06:39.519 --> 00:06:44.649
And I can see that it's, I can
hide it or show it again if I want.

00:06:44.649 --> 00:06:47.159
And I can see all messages at a time.

00:06:47.160 --> 00:06:51.730
I see that it says I've got a syntax
error before my semicolon.

00:06:51.730 --> 00:06:57.330
I just fix it, recompile and now that the
error is gone, the message bubble is gone.

00:06:57.329 --> 00:06:59.870
We bring the information to you.

00:06:59.870 --> 00:07:05.620
Now the second thing I need to do is I need to
create the menu item for the up, the up control.

00:07:05.620 --> 00:07:07.220
And to do that I need to go to the nib.

00:07:07.220 --> 00:07:12.000
Now I don't know where that nib is and I don't want to
go, have to go back to my project window to find it.

00:07:12.000 --> 00:07:15.959
But I know the nib is in the class
I'm working in, the main menu control.

00:07:15.959 --> 00:07:21.399
I command double click on main menu control and it shows me

00:07:21.399 --> 00:07:25.179
where the class is defined in the
nib, not just in the source code.

00:07:25.180 --> 00:07:27.840
We have the information of where
everything is defined in the nibs.

00:07:27.839 --> 00:07:35.419
We bring that information to you
rather than making you go look for it.

00:07:35.420 --> 00:07:35.560
( Applause )

00:07:35.560 --> 00:07:38.420
Now you can see, this is new Interface Builder 3.0.

00:07:38.420 --> 00:07:40.390
It has a really refreshed graphic look.

00:07:40.389 --> 00:07:43.000
It's got a not, lot of new Interface Builder elements.

00:07:43.000 --> 00:07:45.660
It's got a really refined work flow.

00:07:45.660 --> 00:07:49.490
And one of the things is the new
library that replaces the palettes.

00:07:49.490 --> 00:07:56.040
I've got, I can go quickly to all of my menu,
menu related items in my Interface Builder.

00:07:56.040 --> 00:08:02.020
And I see for example, this menu item
right here, pick it up, drag it right in.

00:08:02.019 --> 00:08:04.509
( Period of silence )

00:08:04.509 --> 00:08:05.019
Move up.

00:08:05.019 --> 00:08:05.870
( Period of silence )

00:08:05.870 --> 00:08:09.259
Add the command key.

00:08:09.259 --> 00:08:10.370
And I've created my item.

00:08:10.370 --> 00:08:14.410
Now I need to wire it to that class,
that class I navigated directly to.

00:08:14.410 --> 00:08:21.120
I just go to the main menu control,
and I bring up a connection panel.

00:08:21.120 --> 00:08:25.050
And the connection panel shows me all of
the connections from that class to that nib.

00:08:25.050 --> 00:08:29.350
And I see down at the bottom, the up action is unconnected.

00:08:29.350 --> 00:08:34.790
So I just grab this connection,
and I'll drag it to that item.

00:08:34.789 --> 00:08:41.740
And notice Interface Builder moves the connection
panel out of the way to let me make the connection.

00:08:41.740 --> 00:08:44.639
When I close it and save it.

00:08:44.639 --> 00:08:46.330
( Period of silence )

00:08:46.330 --> 00:08:52.820
Then I can go back here and I can
build and run my application

00:08:52.820 --> 00:08:58.420
and Grand Perspective is running
and I have my move up command.

00:08:58.419 --> 00:09:04.569
Now usually I don't run code that
I've never debugged before.

00:09:04.570 --> 00:09:10.010
So I want to go in and set a break point in this
application so I step through that code that I just wrote.

00:09:10.009 --> 00:09:13.649
But notice I build and ran it, I
didn't start it under the debugger.

00:09:13.649 --> 00:09:17.379
If I want to set a break point, do I have
to quit the application and go back?

00:09:17.379 --> 00:09:22.509
No. I just click the break points there,
Xcode automatically attaches the debugger

00:09:22.509 --> 00:09:26.919
to the running application when you set the break
point and now it's running under the debugger.

00:09:26.919 --> 00:09:30.839
( Applause )

00:09:30.840 --> 00:09:35.769
So that when I, so that when I drill
down and move up, I hit my break point.

00:09:35.769 --> 00:09:38.539
Now notice, I'm not in a debugger window.

00:09:38.539 --> 00:09:42.110
I'm still in my source code at
exactly the point where I was editing.

00:09:42.110 --> 00:09:44.909
But notice also there are some new things up here.

00:09:44.909 --> 00:09:47.850
Here's my back trace, my stack trace of where I am.

00:09:47.850 --> 00:09:49.420
Here's my list of threads.

00:09:49.419 --> 00:09:55.620
And here are my simple debugger controls to step
into code right here in my source code window.

00:09:55.620 --> 00:09:59.879
So I don't have to go to a separate window
to debug, I can debug right in my source.

00:09:59.879 --> 00:10:03.700
Now one of the debug window has is all of my variables.

00:10:03.700 --> 00:10:05.360
Well, how do I get those?

00:10:05.360 --> 00:10:10.700
I just hover over this item, and I see
the value of that variable right here

00:10:10.700 --> 00:10:12.640
in my source without having to go elsewhere.

00:10:12.639 --> 00:10:15.159
Now this is an Objective-C class.

00:10:15.159 --> 00:10:18.679
I see the class pointer doesn't do very much for me.

00:10:18.679 --> 00:10:21.069
But I can see all the I vars like that.

00:10:21.070 --> 00:10:28.310
I can even see that this object which is the tree map, has
a top level array and I can see the contents of that array.

00:10:28.309 --> 00:10:41.219
You can see NS arrays, CF arrays, C arrays and even STL
vectors right in the tool kit, right in your source code.

00:10:41.220 --> 00:10:42.240
( Applause )

00:10:42.240 --> 00:10:46.350
And the data tips as we call them
aren't just for seeing data.

00:10:46.350 --> 00:10:48.399
You can also change data as well.

00:10:48.399 --> 00:10:52.899
If I step over this line of code and get
to this one, I want to test for robustness

00:10:52.899 --> 00:10:56.120
and see how visible root tree index works.

00:10:56.120 --> 00:11:02.830
So I can just go in here and if I set this to a
different value, I can continue straight from here

00:11:02.830 --> 00:11:06.170
and I can even set the value of variables in the debugger.

00:11:06.169 --> 00:11:10.439
So now you can see I've wired up
that menu item and it works.

00:11:10.440 --> 00:11:17.390
But one of the things we notice is when I'm
at the top of the tree, even when the up menu,

00:11:17.389 --> 00:11:22.100
the up button is dimmed, the up item is still enabled.

00:11:22.100 --> 00:11:24.300
I have a little more work to do.

00:11:24.299 --> 00:11:27.179
So let me go back here.

00:11:27.179 --> 00:11:31.419
I'll remove my other break point.

00:11:31.419 --> 00:11:37.610
Fold up my code and move up my validate menu item method.

00:11:37.610 --> 00:11:43.120
Now I can see that this method is a little difficult
to read because the authors use indentation not just

00:11:43.120 --> 00:11:50.009
to show the braces in the if statements, but also to
show the parallelism of the clauses in the if statements.

00:11:50.009 --> 00:11:52.389
Then the indentation gets a little screwy.

00:11:52.389 --> 00:12:00.279
So I can set my insertion point and turn
on code foldings focus follow selection.

00:12:00.279 --> 00:12:03.500
And it shows me the scope of where the insertion point is.

00:12:03.500 --> 00:12:07.129
Gets successively grayer as I get
successively further out of scope.

00:12:07.129 --> 00:12:09.259
Just really helps me focus on my work.

00:12:09.259 --> 00:12:13.100
As I move the insertion point,
the focus follows the selection.

00:12:13.100 --> 00:12:15.980
And I can turn that on and off with command keys.

00:12:15.980 --> 00:12:20.800
( Applause )

00:12:20.799 --> 00:12:26.179
Now I can see that what I'm looking for
is the handler for the up action selector.

00:12:26.179 --> 00:12:29.039
I'll set my break point here, go back.

00:12:29.039 --> 00:12:32.879
And when I touch the file menu that method
should fire and the break point should hit.

00:12:32.879 --> 00:12:34.379
And there I am.

00:12:34.379 --> 00:12:35.939
Well, this doesn't help very much.

00:12:35.940 --> 00:12:37.270
I'm in a return statement.

00:12:37.269 --> 00:12:40.679
How do I figure out what the return
value of the statement is going to be?

00:12:40.679 --> 00:12:42.199
I can't see that anywhere.

00:12:42.200 --> 00:12:47.490
Well what I can do is just double click this
brace and a little information button pops up.

00:12:47.490 --> 00:12:50.490
I click it and it evaluates the expression.

00:12:50.490 --> 00:12:56.500
( Applause )

00:12:56.500 --> 00:13:04.070
This shows me that the return value is going to be
one, which is why its, why it's enabled at this point.

00:13:04.070 --> 00:13:06.160
And I want it to be disabled.

00:13:06.159 --> 00:13:10.500
Well, I can see by inspection, what I
did was I just copied and pasted the line

00:13:10.500 --> 00:13:16.000
from the previous method, so I'll
change this from down to up.

00:13:16.000 --> 00:13:23.009
And evaluate that, just to kind of test
fly it to see whether that's what I want.

00:13:23.009 --> 00:13:29.259
Click it, it evaluates it, I see the
value is zero and that's what I want.

00:13:29.259 --> 00:13:30.850
So now I can continue.

00:13:30.850 --> 00:13:31.649
( Period of silence )

00:13:31.649 --> 00:13:35.720
Quit the application, go back here.

00:13:35.720 --> 00:13:36.460
( Period of silence )

00:13:36.460 --> 00:13:43.269
And then I can build and go and notice
it remembered I was in debug mode,

00:13:43.269 --> 00:13:46.049
so when I build and go, it goes back into debug mode.

00:13:46.049 --> 00:13:46.829
( Period of silence )

00:13:46.830 --> 00:13:52.940
And I'm building and running again.

00:13:52.940 --> 00:13:58.580
Now one of the things that's going to happen is
when I test this code, if I hit the break point,

00:13:58.580 --> 00:14:02.040
I'm going to hit it, but it swaps Xcode to the front.

00:14:02.039 --> 00:14:06.449
And when I continue through, the menu is going
to have been rolled up so I can't verify my work.

00:14:06.450 --> 00:14:08.610
I want Xcode to get out of my way.

00:14:08.610 --> 00:14:15.029
So what I'm going to do is I'm
going to turn on our mini debugger.

00:14:15.029 --> 00:14:19.839
And the mini debugger is a little floating window
that floats on top of the front most application.

00:14:19.840 --> 00:14:25.820
So I can go back here, even make it full screen,
it's great for debugging full screen applications.

00:14:25.820 --> 00:14:30.160
And when I hit, it just expands
it in place without swapping.

00:14:30.159 --> 00:14:36.350
( Applause )

00:14:36.350 --> 00:14:43.950
And when I continue, the menu pops
down and I can see what I've done.

00:14:43.950 --> 00:14:44.410
( Period of silence )

00:14:44.409 --> 00:14:48.100
So now my work here with adding my menu items is done.

00:14:48.100 --> 00:14:51.720
But I want to do a little more clean up
on this application before I'm finished.

00:14:51.720 --> 00:15:00.070
One of the things I like doing is to change the terminology
of classes to more match my favorite terminology.

00:15:00.070 --> 00:15:06.640
I, I like performance panel control to be
preferences panel controller for example.

00:15:06.639 --> 00:15:09.379
But that kind of clean up can be error prone.

00:15:09.379 --> 00:15:13.990
You know, I don't know where all the places
that this person used that in the application.

00:15:13.990 --> 00:15:17.690
And, and just general find and
replace may not find all the places.

00:15:17.690 --> 00:15:21.220
Well that's why we have refactoring in Xcode 3.0.

00:15:21.220 --> 00:15:27.470
I can select a preferences panel control
name and I can click the refactor button.

00:15:27.470 --> 00:15:32.050
And it brings up a panel that lets me type a new name.

00:15:32.049 --> 00:15:34.109
This is one of the many refactorings available.

00:15:34.110 --> 00:15:37.460
I will choose to rename the related files.

00:15:37.460 --> 00:15:41.290
( Period of silence )

00:15:41.289 --> 00:15:43.389
And I'll make a preview.

00:15:43.389 --> 00:15:47.669
And it shows me all of the places in my
code that it would need to make changes

00:15:47.669 --> 00:15:50.939
to have it semantically equivalent application.

00:15:50.940 --> 00:15:57.960
Not just in the names and the contents of the files
that implement that class, but where the class is used

00:15:57.960 --> 00:16:03.129
and also even in the nib file where
that class is connected to.

00:16:03.129 --> 00:16:09.909
And with one button, it makes all the
changes at once so when I build and run,

00:16:09.909 --> 00:16:21.669
I have a semantically correct application where the
preferences panel controller works correctly the first time.

00:16:21.669 --> 00:16:25.789
Now this will lead me to do a lot of
experimentation, a lot of innovation,

00:16:25.789 --> 00:16:29.679
and make a lot of changes maybe
some of which I don't want to make.

00:16:29.679 --> 00:16:35.679
One of the ways that Xcode will help bring information
to you is to bring your old versions of your software back

00:16:35.679 --> 00:16:38.750
to you when you need them, when you've been too innovative.

00:16:38.750 --> 00:16:41.309
And that's with our snapshot function.

00:16:41.309 --> 00:16:47.250
You notice all along I've been making snapshots
of the program, as I've been changing it.

00:16:47.250 --> 00:16:50.519
I've taken a snapshot at every
stage where I've changed something.

00:16:50.519 --> 00:16:56.799
And what I can do is for each version,
I can see what files were changed.

00:16:56.799 --> 00:17:02.639
And I can look at the changes on a file by file basis.

00:17:02.639 --> 00:17:08.160
And pick any version, and roll back to it at any time.

00:17:08.160 --> 00:17:18.140
So you can see with Xcode, we're really allowing you to
not only focus on your work, to bring the information to you

00:17:18.140 --> 00:17:22.560
to get the tools out of your way,
but also fostering experimentation

00:17:22.559 --> 00:17:25.220
and innovation to make your great applications

00:17:25.220 --> 00:17:26.920
Thank you very much.

00:17:28.509 --> 00:17:33.859
( Applause )

00:17:33.859 --> 00:17:34.379
>> Thank you Chris.

00:17:34.380 --> 00:17:39.730
So let's quickly the review that features of Xcode 3.0.

00:17:39.730 --> 00:17:42.230
We have a great new editor for you.

00:17:42.230 --> 00:17:44.279
It has dramatically better speed.

00:17:44.279 --> 00:17:47.059
It has improved in syntax coloring and code completion.

00:17:47.059 --> 00:17:51.059
We added code forwarding and code focus which
highlights the block structure of your code

00:17:51.059 --> 00:17:57.029
and it's incredibly useful especially if you work
with somebody else's code that you're unfamiliar with.

00:17:57.029 --> 00:18:01.440
Around this editor, we built a lot of workflows
to bring the right information to the center

00:18:01.440 --> 00:18:05.330
of your attention instead of forcing
you to switch the window.

00:18:05.329 --> 00:18:09.759
Message bubbles will display information about
bit errors and warnings as break point states

00:18:09.759 --> 00:18:12.049
and conditions right embedded in your source code.

00:18:12.049 --> 00:18:15.539
And while the debugging, the debugger
button shows that at the top of the window,

00:18:15.539 --> 00:18:18.480
we give you access to the most common debugger controls.

00:18:18.480 --> 00:18:24.519
And data tips allow you to view and edit
the, the values of variables while debugging.

00:18:24.519 --> 00:18:29.150
We've also made dropping in and out
of the debugger much more seamless.

00:18:29.150 --> 00:18:32.680
Xcode will simply do the right thing
based on the state of your break points

00:18:32.680 --> 00:18:34.850
and attach the debugger whenever necessary.

00:18:34.849 --> 00:18:39.449
( Period of silence )

00:18:39.450 --> 00:18:45.009
And the mini debugger is great because it stays tiny and out
of your way until you really need it and because it hovers

00:18:45.009 --> 00:18:51.420
on top of your applications, so it works great
for debugging full screen applications or games

00:18:53.269 --> 00:18:55.619
And if you want help with making
some large structure changes

00:18:55.619 --> 00:18:58.689
to your source code, you can use
our new refactoring feature.

00:18:58.690 --> 00:19:03.850
The factoring uses the indexing information that you collect
about your project and it offers you set of operations

00:19:03.849 --> 00:19:06.319
that you can selectively apply to your source code.

00:19:06.319 --> 00:19:11.460
You can choose from things like renaming classes and
methods or moving them up and down in the class hierarchy

00:19:11.460 --> 00:19:16.309
or extracting new ones or applying
the new Objective-C 2.0 syntax to it.

00:19:16.309 --> 00:19:22.339
What's great about our implementation of refactoring is
is that it applies to all types of files in your project.

00:19:22.339 --> 00:19:27.909
While refactoring you can keep nib files data
modifiers and sources in sync with each other.

00:19:27.910 --> 00:19:30.630
( Period of silence )

00:19:30.630 --> 00:19:33.760
Now refactoring can be quite invasive
changes to your projects.

00:19:33.759 --> 00:19:35.000
But it's still very safe.

00:19:35.000 --> 00:19:38.960
In fact, much safer than making all the changes by hand.

00:19:38.960 --> 00:19:45.019
First of all, you can preview all the changes that we
are suggesting in the dialogue that is based on finders.

00:19:45.019 --> 00:19:46.779
So you can see all available diffs.

00:19:46.779 --> 00:19:49.379
And before applying any changes, you will take a snapshot.

00:19:49.380 --> 00:19:52.720
You will archive really the entire
state of your project in a snapshot.

00:19:52.720 --> 00:19:55.519
So snapshotting pretty much gives
you a project wide undo mechanism.

00:19:55.519 --> 00:19:59.619
And if you go and change your mind and you want to try
another refactoring operation, you can simply revert back

00:19:59.619 --> 00:20:01.659
to the previous state with a click of a button.

00:20:01.660 --> 00:20:05.440
( Period of silence )

00:20:05.440 --> 00:20:07.059
Let's also look at Interface Builder.

00:20:07.059 --> 00:20:11.129
Interface Builder has a fresh new workflow,
starting with a redesigned document window

00:20:11.130 --> 00:20:14.180
which now supports searching capabilities.

00:20:14.180 --> 00:20:21.039
The new Inspector supports the number one feature
request editing of multiple objects at the same time.

00:20:21.039 --> 00:20:25.079
( Applause )

00:20:25.079 --> 00:20:29.139
The new library window is a flexible
and efficient way to organize

00:20:29.140 --> 00:20:31.390
and find the objects that you want to add to your nib files.

00:20:31.390 --> 00:20:37.230
And in the spirit of flow, the connection panel bring
connection information right to the center of your objects.

00:20:37.230 --> 00:20:40.870
( Period of silence )

00:20:40.869 --> 00:20:49.269
The Inspector has a new section that allows you to
define, to set core animation for graphics properties.

00:20:49.269 --> 00:20:54.889
So you can now define graphically interesting user
interface and animations right in Interface Builder.

00:20:54.890 --> 00:20:58.390
And Xcode and Interface Builder have been
much more tightly integrated than before.

00:20:58.390 --> 00:21:01.130
They're now automatically sync class information.

00:21:01.130 --> 00:21:04.870
So if you go into your code and you add
methods and variables, they automatically show

00:21:04.869 --> 00:21:13.609
up as actions and outlets in Interface Builder.

00:21:13.609 --> 00:21:14.279
( Applause )

00:21:14.279 --> 00:21:16.970
So that will give you pretty good
idea of what's going on in the tools.

00:21:16.970 --> 00:21:22.630
But of course on the Mac the tools are just one part of
what makes the platform such a great place for developers.

00:21:22.630 --> 00:21:25.770
Underneath the tools there are
powerful programming languages,

00:21:25.769 --> 00:21:29.079
frameworks and of course the advancement hardware platform.

00:21:29.079 --> 00:21:32.339
And many of the prime advantages of
the Mac development environment come

00:21:32.339 --> 00:21:35.159
from the tight integration of all these different layers.

00:21:35.160 --> 00:21:40.450
Interface Builder is, is a fine example for an
application that is powerful because the needs

00:21:40.450 --> 00:21:44.710
of the tools have been designed right
into the underlying Cocoa frameworks.

00:21:44.710 --> 00:21:49.289
The previous session already have the different layers quite
extensively, so I'm not going to repeat all of that to you.

00:21:49.289 --> 00:21:50.859
But I do want to point out a few highlights.

00:21:50.859 --> 00:21:53.629
I want to start with Objective-C.

00:21:53.630 --> 00:21:56.380
( Period of silence )

00:21:56.380 --> 00:21:58.840
On the Mac we of course support many program languages.

00:21:58.839 --> 00:22:04.559
But our language of choice is Objective-C. Objective-C
really is the engine that powers Mac OS X.

00:22:04.559 --> 00:22:08.470
Objective-C and the underlying Cocoa frameworks
were one of the big reasons why we were able

00:22:08.470 --> 00:22:10.990
to move so quickly from PowerPC to Intel.

00:22:10.990 --> 00:22:14.180
And then one of the reasons why you
can now move quickly from 32 to 64 bit.
2

00:22:14.180 --> 00:22:20.060
And in Leopard we are taking Objective-C to the next
level by adding a lot of great features for you.

00:22:20.059 --> 00:22:23.329
The most important one of course being garbage collection.

00:22:23.329 --> 00:22:25.189
It's implemented in opt-in fashion.

00:22:25.190 --> 00:22:28.360
So you can decide to adopt it at your own pace.

00:22:28.359 --> 00:22:32.689
But since it has made memory management so much
simpler, and your applications more reliable,

00:22:32.690 --> 00:22:36.650
we do recommend that you consider using
garbage collection for your next project.

00:22:36.650 --> 00:22:39.470
( Period of silence )

00:22:39.470 --> 00:22:43.980
In addition to garbage collection,
Objective-C 2.0 has a variety of features

00:22:43.980 --> 00:22:47.390
that will make you write less code,
and at the same time faster code.

00:22:47.390 --> 00:22:51.590
The most noteworthy features are
the fast loop enumerators properties

00:22:51.589 --> 00:22:56.599
for which we also added a new convenient
dot syntax, option methods and protocols.

00:22:56.599 --> 00:23:01.269
And in the 64-bit version of the run time, you also
get a unified exception order of the C++

00:23:01.269 --> 00:23:05.569
and non-fragile instance variables which
allows you to make changes to the definition

00:23:05.569 --> 00:23:09.269
of your class without breaking any client code.

00:23:09.269 --> 00:23:13.710
Now knowledge about all these features in
Objective-C 2.0 is already built into the tools.

00:23:13.710 --> 00:23:16.480
The tools are ready for you to use with Objective-C 2.0.

00:23:16.480 --> 00:23:20.039
We've updated Xcode, the editor, the
syntax carrier and code completion.

00:23:20.039 --> 00:23:22.759
We've updated Interface Builder
and the core data modeling tools.

00:23:22.759 --> 00:23:26.230
Even give you performance tools that
allow you to get a better understanding

00:23:26.230 --> 00:23:28.829
for how your applications behave in a garbage collection.

00:23:28.829 --> 00:23:31.990
( Period of silence )

00:23:31.990 --> 00:23:34.890
On the hardware side, everyone
is pressing aggressively ahead

00:23:34.890 --> 00:23:40.040
with bring 64-bit capable multicore
processors to the desktop environment.

00:23:40.039 --> 00:23:43.809
It was just last year that we shipped
the first four core systems.

00:23:43.809 --> 00:23:45.899
And this year we are already shipping eight core systems.

00:23:45.900 --> 00:23:51.360
And in fact, if you look at the new hardware that
we ship today, almost all of it is 64-bit capable

00:23:51.359 --> 00:23:56.219
and there's not a single piece of new Mac hardware
that we ship that is not a multicore processor system.

00:23:56.220 --> 00:24:04.600
So the time for you to get the applications ready for 64-bit
address spaces and highly paralel execution models is now.

00:24:04.599 --> 00:24:07.319
It's really important that you use the Leopard tools now

00:24:07.319 --> 00:24:11.159
to prepare your applications for
the next generation of processors.

00:24:12.319 --> 00:24:15.279
For Xcode, we've already done that work.

00:24:15.279 --> 00:24:20.410
I'm proud to tell you that Xcode runs in 64-bit
and garbage collected and has a build system

00:24:20.410 --> 00:24:23.910
that has been cued extensively for many processor cores.

00:24:23.910 --> 00:24:26.290
Let's take a look at how the last point worked out for us.

00:24:26.289 --> 00:24:28.500
( Period of silence )

00:24:28.500 --> 00:24:33.349
This graph shows you build times on a
Mac Pro by a number of processor cores.

00:24:33.349 --> 00:24:39.309
As you can see, we've dramatically improved both the
speed and the scalability of our new build system.

00:24:39.309 --> 00:24:45.089
In fact, on the latest eight core systems building on
Leopard with Xcode 3.0 is about twice as fast than building

00:24:45.089 --> 00:24:48.429
with Tiger and Xcode 2.4, twice as fast.

00:24:48.430 --> 00:24:51.250
And those are just subtle improvements.

00:24:51.250 --> 00:24:55.990
Let's take advances in hardware into consideration as well.

00:24:55.990 --> 00:25:00.910
This graph shows you how build time decreased over
the last year on the latest and greatest Mac hardware.

00:25:00.910 --> 00:25:07.070
As you can see, since 2003, we have
decreased build time by a factor of 14.

00:25:07.069 --> 00:25:11.759
Now that's through a combination of
both hardware and software improvements.

00:25:11.759 --> 00:25:17.180
So optimizing for multiple processor cores has been
big time, has paid off big time for us in Xcode.

00:25:17.180 --> 00:25:23.330
And I can't stress often enough how important it
is that you do the same in your own applications.

00:25:23.329 --> 00:25:25.460
You might wonder how you can get some help with that.

00:25:25.460 --> 00:25:30.920
Well in Leopard, we are also taking a major
step forward with our performance tool strategy.

00:25:30.920 --> 00:25:33.940
Leopard will contain two major performance applications.

00:25:33.940 --> 00:25:38.390
There's going to be new version of Shark, our powerful
profiling tool that many of you are already familiar with.

00:25:38.390 --> 00:25:42.630
And there's going to be a brand new
application that's called Xray.

00:25:42.630 --> 00:25:47.560
Xray compliments Shark by looking at
your application from a much higher level.

00:25:49.390 --> 00:25:52.600
Essentially what Xray allows you to
do is monitor, monitor the aspects.

00:25:52.599 --> 00:26:01.219
Monitor performance aspects of your applications, display
them graphically in a timeline, visually correlate them

00:26:01.220 --> 00:26:05.380
and then drill into the events that
stick out to you as performance problems.

00:26:05.380 --> 00:26:09.190
This is a screen shot of Xray.

00:26:09.190 --> 00:26:16.009
As you can see it looks a lot like GarageBand, uses the
same metaphor of instruments and recordings in a timeline.

00:26:16.009 --> 00:26:18.859
One might even say Xray makes the applications rock.

00:26:18.859 --> 00:26:22.529
( Laughter )

00:26:22.529 --> 00:26:25.259
Xray gains a lot of its power through the use of DTrace,

00:26:25.259 --> 00:26:28.500
which is an Open Source technology
that you integrate into Leopard.

00:26:28.500 --> 00:26:30.579
( Applause )

00:26:30.579 --> 00:26:34.220
It's a system-wide tracing mechanism that
runs at the core of the OS and allows you

00:26:34.220 --> 00:26:37.430
to monitor the execution of any process in the system.

00:26:37.430 --> 00:26:43.640
Essentially you can observe inputs, outputs and
behaviors of funky parts and then analyze them

00:26:43.640 --> 00:26:45.650
with the help of synthesis scripting language.

00:26:45.650 --> 00:26:50.470
And we've integrated both DTrace and that
scripting language right into Xray for you.

00:26:50.470 --> 00:26:56.509
And to show you, I'd like to ask Dave Payne to
come up on stage and give you a demo of Xray.

00:26:56.509 --> 00:27:01.400
( Applause )

00:27:01.400 --> 00:27:03.810
>> Thank you Andreas.

00:27:03.809 --> 00:27:04.450
Okay.

00:27:04.450 --> 00:27:11.549
So I have a project I've been working on in Xcode
that's a simple project and it has a list

00:27:11.549 --> 00:27:13.869
of groups and the members of those groups.

00:27:13.869 --> 00:27:16.229
Groups of people, members of those.

00:27:16.230 --> 00:27:21.079
And as a standard part of my development
workflow, I also like to check the performance

00:27:21.079 --> 00:27:24.309
and behavioral characteristics of my application.

00:27:24.309 --> 00:27:33.909
Xcode makes that easy to do directly from the run
menu with the start with performance tool sub menu.

00:27:33.910 --> 00:27:40.790
Here we list various performance
tools and various templates for Xray.

00:27:40.789 --> 00:27:45.909
You can also define your own templates for
Xray and they would show up here also.

00:27:45.910 --> 00:27:49.430
So I'm going to go ahead and choose
the object allocations template.

00:27:49.430 --> 00:27:52.490
So Xcode launches Xray.

00:27:52.490 --> 00:27:57.759
Xray goes ahead and launches my
group viewer target application.

00:27:57.759 --> 00:28:02.750
I'll go ahead and bring up a document in group viewer.

00:28:02.750 --> 00:28:08.359
Hmm. That lovely spinning wheel.

00:28:08.359 --> 00:28:12.659
Now we see in the graph of the object alloc instrument,

00:28:12.660 --> 00:28:19.210
memory growth over time as my,
I'm exercising my application.

00:28:19.210 --> 00:28:27.410
And as I close the window, all the memory
will be released and I'll get, or not.

00:28:27.410 --> 00:28:31.759
Okay, well maybe we have a problem
here that we need to take a look at.

00:28:31.759 --> 00:28:32.369
( Period of silence )

00:28:32.369 --> 00:28:38.309
So I can click in the inspection bar and
scrub through with the inspection head

00:28:38.309 --> 00:28:43.019
and actually see how much memory is
allocated in my application over time.

00:28:43.019 --> 00:28:46.490
And might be a little hard to read
here, but that's almost 40 megabytes

00:28:46.490 --> 00:28:50.700
of memory still remaining after I closed my document window.

00:28:50.700 --> 00:28:56.240
That's fairly excessive when we started
out much, much smaller than that.

00:28:56.240 --> 00:28:59.960
How can I take a look at what that memory is?

00:28:59.960 --> 00:29:05.750
Well down at the bottom at the detail view for
object alloc, I can sort by various columns,

00:29:05.750 --> 00:29:10.680
one of the most useful ones is to
sort by the net number of bytes.

00:29:10.680 --> 00:29:15.650
How many bytes do we have at the end
of our run compared to at the start?

00:29:15.650 --> 00:29:23.540
So we see this for all allocations and also for various
different categories of types and sizes of allocations.

00:29:23.539 --> 00:29:26.399
By far the largest category is the top one here.

00:29:26.400 --> 00:29:32.680
And in fact if I click on the check box,
let's go ahead and expand this a bit.

00:29:32.680 --> 00:29:35.019
So we can see this in more detail.

00:29:35.019 --> 00:29:35.680
( Period of silence )

00:29:35.680 --> 00:29:47.340
So now we see a red line on the graph that represents
the, that top category of allocation type and its growth

00:29:47.339 --> 00:29:52.899
over time and the fact that it didn't
go away when we closed the window.

00:29:52.900 --> 00:29:58.930
So I can go in and take a look at all the
specific allocations that we have there.

00:29:58.930 --> 00:30:04.690
Click on any particular one of those and bring
up the extended detail view on the right.

00:30:04.690 --> 00:30:11.799
Now by skipping down through the framework code, I can
get down to a stack frame from my application itself.

00:30:11.799 --> 00:30:20.250
When I double click on that, it takes me directly back to
the line of code in Xcode where we allocated the NS image.

00:30:20.250 --> 00:30:23.250
( Applause )

00:30:23.250 --> 00:30:30.509
And in fact we very conveniently told
ourselves that we left a leak in there.

00:30:30.509 --> 00:30:34.390
So we allocated an NS image and set and I Var to that,

00:30:34.390 --> 00:30:39.970
but we didn't release the group image
file here in the dealloc method.

00:30:39.970 --> 00:30:47.650
So I can go ahead and enter that in using Xocde's
excellent new inline code completion.

00:30:47.650 --> 00:30:51.430
Makes it very easy for me to type this on stage.

00:30:51.430 --> 00:30:53.960
Go ahead and hit build and go.

00:30:53.960 --> 00:30:58.250
And again Xcode remembers the
way I last launched my application

00:30:58.250 --> 00:31:02.690
so it brings it right back up in, in Xray again.

00:31:02.690 --> 00:31:04.490
Open up the documents.

00:31:04.490 --> 00:31:09.660
Huh, again though that delay.

00:31:09.660 --> 00:31:12.630
But let's go ahead and scroll through the list of groups.

00:31:12.630 --> 00:31:21.750
Now we see the red line staying down at the bottom as
we are deallocating those images as we brought them in.

00:31:21.750 --> 00:31:23.609
Close the window now.

00:31:23.609 --> 00:31:29.909
Ah, excellent, memory swiftly goes
right back down to where it should be.

00:31:29.910 --> 00:31:35.090
So for demo purposes I'm going
to close this document in Xray.

00:31:35.089 --> 00:31:38.990
And go ahead and bring up a new document.

00:31:38.990 --> 00:31:45.509
So I'd like to take a look at what was going on
with that delay at the start of the application.

00:31:46.789 --> 00:31:51.779
So again I'd like to use the object alloc template.

00:31:51.779 --> 00:31:57.579
But in addition, click to bring up
the library of instruments in Xray.

00:31:57.579 --> 00:32:03.789
Here we see a wide variety of different aspects of
the behavior of the application that we can consider.

00:32:03.789 --> 00:32:08.250
I'd like to drag in the reads and writes instrument.

00:32:08.250 --> 00:32:10.059
And go ahead and close the library again.

00:32:10.059 --> 00:32:14.029
Now if you had used DTrace, you can
customize your own instruments there.

00:32:14.029 --> 00:32:16.970
And get more in your library.

00:32:16.970 --> 00:32:19.240
So I'll go ahead and launch the executable.

00:32:19.240 --> 00:32:24.339
This is running exactly the same
way as it was the last time around.

00:32:24.339 --> 00:32:29.970
But now we're going to be capturing two types
of information, both the memory allocations

00:32:29.970 --> 00:32:33.970
and the read/write behavior of the application.

00:32:33.970 --> 00:32:39.839
So now we see as the window is opening, we seem
to have a lot of reads and writes going on.

00:32:39.839 --> 00:32:43.709
And just for kicks here, I'll scroll
down through the list of members

00:32:43.710 --> 00:32:48.240
and see that in this case we have no activity here.

00:32:48.240 --> 00:32:54.890
And go ahead and quit out of group viewer again.

00:32:54.890 --> 00:33:04.290
So again with the inspection hat I can scrub through
and take a look and see that we've got a lot of read

00:33:04.289 --> 00:33:07.809
and write activity that coming from SQL Light.

00:33:07.809 --> 00:33:11.200
So my group viewer application is based on core data.

00:33:11.200 --> 00:33:14.450
And it's using SQL Light in the background.

00:33:14.450 --> 00:33:17.170
In this case, we tried to be smart.

00:33:17.170 --> 00:33:22.870
And prematurely optimize our application,
give the users a great user experience.

00:33:22.869 --> 00:33:29.699
So gee, we'll preload all our data upfront so that
it's nice and fast when the user needs it, right?

00:33:29.700 --> 00:33:38.210
Well, now that the customers are using larger documents, the
scalability of our application isn't working out very well.

00:33:38.210 --> 00:33:40.370
So this is something for you to consider as well.

00:33:40.369 --> 00:33:46.459
Your app may work great but what happens when you
throw a document that's a hundred times larger at it?

00:33:46.460 --> 00:33:52.610
So in fact as we scrub through here, we can see that
we've got thousands of read and write calls going on.

00:33:52.609 --> 00:33:55.949
In fact, over 10,000 of them.

00:33:55.950 --> 00:34:00.830
So this gives me an opportunity to
change my application to fix that.

00:34:00.829 --> 00:34:04.119
I'll go into the document.

00:34:04.119 --> 00:34:08.690
Now the window for the document is
backed by a core data array controller.

00:34:08.690 --> 00:34:21.079
For Leopard, we've added a new feature to the core data
controllers that allows me to turn on lazy fetching.

00:34:21.079 --> 00:34:27.239
So in this case, save and build.

00:34:27.239 --> 00:34:33.339
And I'll just go ahead and run the
document, the target application again.

00:34:33.340 --> 00:34:36.680
This gives me a new run in Xray.

00:34:36.679 --> 00:34:39.440
So hides what was there before, gives me a new run.

00:34:39.440 --> 00:34:44.000
I can go ahead and bring up the target document again.

00:34:44.000 --> 00:34:49.210
Now we see that it was instantaneous in bringing this up.

00:34:49.210 --> 00:34:55.340
And as I scroll through the list of members, now I
do have some disk activity as I bring new members in.

00:34:55.340 --> 00:35:00.170
So that appears to be giving a much better user experience.

00:35:00.170 --> 00:35:09.360
And in fact if we scrub through we can see that in this
case, remember before we had over 10,000 reads and writes.

00:35:09.360 --> 00:35:13.710
Here we have less than 300 in this case.

00:35:13.710 --> 00:35:19.159
In fact, by closing the detail view and
bringing up the Inspector for the reads

00:35:19.159 --> 00:35:23.099
and writes instrument, first off I can zoom in on that.

00:35:23.099 --> 00:35:25.469
And also do show all runs.

00:35:25.469 --> 00:35:29.889
So I can see on the bottom the initial run that I had done

00:35:29.889 --> 00:35:35.359
with all the disk activity upfront
and then the improved run on the top.

00:35:35.360 --> 00:35:40.890
And by going into the object alloc
instrument, I can also show all runs on it.

00:35:40.889 --> 00:35:46.750
And see that in fact I've got a second
benefit out of doing the lazy fetching

00:35:46.750 --> 00:35:50.360
in that I've vastly reduced the
amount of memory that I'm using.

00:35:50.360 --> 00:35:57.079
So we can see that I'm correlating different
types of performance data for my application.

00:35:57.079 --> 00:36:00.579
So we're really excited about the
possibilities with Xray and DTrace.

00:36:00.579 --> 00:36:05.250
And we look forward to seeing what you can do
with them to really improve the performance

00:36:05.250 --> 00:36:08.369
and scalability of your applications and just amaze us.

00:36:08.369 --> 00:36:08.589
Thank you.

00:36:08.590 --> 00:36:08.789
( Applause )

00:36:08.789 --> 00:36:09.130
>> Thank you Dave.

00:36:09.130 --> 00:36:24.920
Xray. The basic workflow of Xray is
similar to many of our other tools.

00:36:24.920 --> 00:36:29.630
It's a document based application where
each document represents a trace scenario.

00:36:29.630 --> 00:36:32.099
And you use like in Interface Builder, a live read window

00:36:32.099 --> 00:36:34.980
to manage the instruments that
you want to add to your documents.

00:36:34.980 --> 00:36:37.929
( Period of silence )

00:36:37.929 --> 00:36:42.409
Out of the box, Xray has a set of about 15 instruments
that allow you to monitor the different aspects

00:36:42.409 --> 00:36:49.349
of the system ranging from CPU usage,
memory, fire activity, I/O graphics, etcetera.

00:36:49.349 --> 00:36:52.469
But you aren't limited to this set of instruments.

00:36:52.469 --> 00:36:56.699
Because of DTrace and the DTrace based
instrument builder that we have in Xray,

00:36:56.699 --> 00:36:58.689
you can actually define your own instruments.

00:36:58.690 --> 00:37:03.460
And that of course allows you to turn this
library into your own much larger custom library.

00:37:03.460 --> 00:37:07.420
Define your own instruments allows you to take Xray
into directions that we haven't foreseen yet.

00:37:07.420 --> 00:37:09.380
( Period of silence )

00:37:09.380 --> 00:37:12.490
Let's take a look at the document window again.

00:37:12.489 --> 00:37:16.069
As you already saw is based on timeline.

00:37:16.070 --> 00:37:22.230
If you run the same scenario multiple times, you can
look at the different runs side by side in the window.

00:37:22.230 --> 00:37:27.510
And once you're done collecting all the data that you
want to analyze, Xray has great data mining tools.

00:37:27.510 --> 00:37:31.550
You can zoom in on smaller ranges of
time to fade out unnecessary data.

00:37:31.550 --> 00:37:35.539
You can bring up detailed views to look
at individual measurements and stack traces.

00:37:35.539 --> 00:37:36.329
( Period of silence )

00:37:36.329 --> 00:37:43.509
To set up repetitive test scenarios, you
can use UI recording feature in Xray.

00:37:43.510 --> 00:37:48.440
UI recording allows you to record the
scenario in the application you're monitoring,

00:37:48.440 --> 00:37:54.280
user interface events to record user interface events
and then replay them several times from within Xray.

00:37:54.280 --> 00:37:58.870
So you can study how the behavior of the
application changes if you make changes to your code.

00:37:58.869 --> 00:38:02.859
( Period of silence )

00:38:02.860 --> 00:38:05.849
And Xray allows you to save documents as templates.

00:38:05.849 --> 00:38:08.509
And that gives you a nice integration into Xcode.

00:38:08.510 --> 00:38:11.740
You can invoke those templates right
from within Xcode, right after building

00:38:11.739 --> 00:38:16.019
and immediately see the changes
that your codes changes invoked.

00:38:16.019 --> 00:38:21.780
( Period of silence )

00:38:21.780 --> 00:38:28.030
So, as you can see, we took the tools for the native
application developers a huge step forward in Leopard.

00:38:28.030 --> 00:38:33.540
You can simply flow from one task to the other in Xcode
and Interface Builder and continue right into Shark

00:38:33.539 --> 00:38:40.610
and Xray to work on performance like what user
performance, users obviously crave for performance.

00:38:40.610 --> 00:38:45.740
And going forward, that of course means that
you should take a look at multi core processors

00:38:45.739 --> 00:38:49.769
that's going to be the most important way for you
to get performance out of your applications.

00:38:49.769 --> 00:38:54.099
So with that, let's go on to the community developers.

00:38:54.099 --> 00:38:54.869
( Period of silence )

00:38:54.869 --> 00:39:06.909
There are many communities that UNIX, Open Source,
Scientific Computing or Web that explore new technologies.

00:39:06.909 --> 00:39:10.069
Often those communities are not tied to the Mac ecosystem,

00:39:10.070 --> 00:39:14.230
but they use the Mac because they find it's the
most desirable place to do that kind of exploration.

00:39:14.230 --> 00:39:17.119
It's the platform that keeps them most productive.

00:39:18.139 --> 00:39:21.539
Of course when working on such a project, it
often feels much more like being a passenger

00:39:21.539 --> 00:39:24.380
on the train instead of the driver in your own car.

00:39:24.380 --> 00:39:27.289
Because you don't control the entire technology stack.

00:39:27.289 --> 00:39:30.920
Often you bring in cross platform
projects that are not designed or not,

00:39:30.920 --> 00:39:33.680
they are not prepared to work with Xcode directly.

00:39:33.679 --> 00:39:37.759
So the needs of the community developers
are quite a bit different

00:39:37.760 --> 00:39:40.400
from the needs of the native application developers.

00:39:40.400 --> 00:39:46.139
Most importantly, they need lightweight tools
that don't impose any kind of restrictions on them.

00:39:46.139 --> 00:39:51.519
Specifically they need to be able to choose arbitrary
build systems and arbitrary programming languages.

00:39:52.610 --> 00:39:56.019
Unfortunately, most of the time the tools that are

00:39:56.019 --> 00:39:59.739
at your disposal are not designed
to work together as developer tools.

00:39:59.739 --> 00:40:03.859
Many of you simply use finder,
terminal and the text editor of your choice.

00:40:03.860 --> 00:40:05.730
So we thought you can do a lot better than that.

00:40:05.730 --> 00:40:10.179
And in effort to extending Xcode with a
new feature that is specifically designed

00:40:10.179 --> 00:40:12.489
for the needs of the community developers.

00:40:12.489 --> 00:40:13.729
And we call it the Organizer.

00:40:13.730 --> 00:40:19.789
The Xcode Organizer allows you to leverage the
strengths of Xcode without getting any restrictions.

00:40:19.789 --> 00:40:25.110
To show you, I'd like to ask Matt Firlik
to come up on stage and give you another demo.

00:40:26.510 --> 00:40:31.470
( Applause )

00:40:31.469 --> 00:40:32.589
>> Thank you Andreas.

00:40:32.590 --> 00:40:37.720
Show of hands, how many of you guys use Open Source
technologies or community oriented technologies?

00:40:37.719 --> 00:40:39.769
That's great.

00:40:40.840 --> 00:40:45.680
Typically when you're working with community oriented
software, you have a large number of elements to deal with.

00:40:45.679 --> 00:40:49.829
You've got repositories, you've got build
systems, you've got projects you've got languages,

00:40:49.829 --> 00:40:51.590
you've got all these things you need to put together.

00:40:51.590 --> 00:40:56.620
And the Xcode Organizer and a lot of these
other features in Xcode 3.0 make this really easy.

00:40:56.619 --> 00:40:59.579
So let's take a look at how we do that.

00:40:59.579 --> 00:41:03.710
Up here on the screen, you're going to see
the Xcode Organizer, in the upper left.

00:41:03.710 --> 00:41:05.769
And it looks like a standard Xcode window.

00:41:05.769 --> 00:41:08.269
There's a toolbar at the top with
some standard build controls.

00:41:08.269 --> 00:41:10.369
And there's a content view beneath it.

00:41:10.369 --> 00:41:16.230
And in this content view you can see I've, see I've
dragged in two Xcode projects that I've used before.

00:41:16.230 --> 00:41:22.329
So if I want to work with one of these projects, all
I need to do is go and click on one of the projects,

00:41:22.329 --> 00:41:26.779
double click on it, and up comes the Xcode project.

00:41:26.780 --> 00:41:28.830
Close it, goes away.

00:41:28.829 --> 00:41:33.699
So very simply, it's an easy way to manage
all of the projects you want to work with.

00:41:33.699 --> 00:41:37.579
So there's no more relying on the recent files
menu and making it this big so you see them all,

00:41:37.579 --> 00:41:40.009
or putting aliases on your desktop or anything like that.

00:41:40.010 --> 00:41:42.990
you can easily just put the projects
in your Organizer that you work with.

00:41:42.989 --> 00:41:45.750
and this works great for framework oriented
technologies where you need to build a bunch

00:41:45.750 --> 00:41:49.130
of things that integrate into your project.

00:41:49.130 --> 00:41:53.309
Even better, I can just select one
of these and click the build button.

00:41:53.309 --> 00:41:56.019
And without even opening the project,
it's going to go ahead and build it.

00:41:56.019 --> 00:41:59.659
So if I have frameworks for libraries that I need
to use but I don't need to edit, I can go ahead

00:41:59.659 --> 00:42:02.179
and build them and get on with the rest of my work.

00:42:02.179 --> 00:42:06.699
Now the Organizer actually works
better when we have some more content,

00:42:06.699 --> 00:42:11.529
so I'm going to use one of the new Xcode
features which is the SCM Repository browser.

00:42:11.530 --> 00:42:14.720
So I'm going to go into the SCM menu
and bring up the repository browser.

00:42:14.719 --> 00:42:19.889
And here you see a window on the left hand side are a list
of all the repositories that have code that I work with.

00:42:19.889 --> 00:42:24.279
so I can select a repository and use the controls
across the top to browse the repositories,

00:42:24.280 --> 00:42:27.410
take a look at content and check out the content I need.

00:42:27.409 --> 00:42:32.549
So in this case, I'm going to select my local
repository, click projects, click check out

00:42:32.550 --> 00:42:36.769
and select the desktop and there's my projects.

00:42:36.769 --> 00:42:39.230
No more going to a separate app, no more going to terminal.

00:42:39.230 --> 00:42:42.250
It's all right there.

00:42:42.250 --> 00:42:46.670
( Period of silence )
I can drag my project folder into
the Organizer and then expand it.

00:42:46.670 --> 00:42:49.950
And we can see a list of projects beneath it.

00:42:49.949 --> 00:42:54.460
Now these two projects may look interesting if you
look very closely, these are not Xcode projects.

00:42:54.460 --> 00:42:57.110
These are in fact projects built with Makefiles.

00:42:57.110 --> 00:43:03.610
So what happens say if I were to select this first
project and click and hold on the build button?

00:43:03.610 --> 00:43:07.120
The menu comes down and the menu item says make all.

00:43:07.119 --> 00:43:10.589
The Organizer has gone and introspected my project
and found that there's a build system it knows

00:43:10.590 --> 00:43:13.079
about and put in the commands that I need.

00:43:13.079 --> 00:43:18.349
So whether you're using a Makefile project, an Auto
Comp project, or an Ant project, the Organizer allows you

00:43:18.349 --> 00:43:22.069
to build it now seamlessly with the same
workflow you would with an Xcode project.

00:43:22.070 --> 00:43:27.760
( Applause )

00:43:27.760 --> 00:43:31.720
I just clicked make all and it built really
quickly because of our nice fancy new hardware.

00:43:31.719 --> 00:43:34.009
But here's the Makefile that it actually invoked.

00:43:34.010 --> 00:43:36.900
And so it built the application on my desktop here.

00:43:36.900 --> 00:43:38.170
I'll go and launch it.

00:43:38.170 --> 00:43:42.639
And this is a Ruby Cocoa application that plays Asteroids.

00:43:42.639 --> 00:43:43.589
Very, very simple.

00:43:43.590 --> 00:43:46.559
So I just built this game from the Organizer.

00:43:46.559 --> 00:43:49.789
Now the Organizer provides a number
of other integration points with a lot

00:43:49.789 --> 00:43:52.279
of the same Xcode features that you know and love.

00:43:52.280 --> 00:43:54.580
For example, if I wanted to go ahead and modify this game,

00:43:54.579 --> 00:43:58.739
let's say I want to make it a little
more less 80s and more 90s let's say.

00:43:58.739 --> 00:44:05.199
I can go ahead and bring up say, standard, actually I need
to select Xcode first and bring up the standard find panel.

00:44:05.199 --> 00:44:06.789
And I'll just type in game.

00:44:06.789 --> 00:44:12.360
Hit return and it searches all the contents of my
Organizer and I can double click on one to bring it up

00:44:12.360 --> 00:44:15.660
or I could say show me where this is the
Organizer and it highlights the file.

00:44:15.659 --> 00:44:20.879
I can click on the little button here at the button
here at the bottom and reveal the embedded editor.

00:44:20.880 --> 00:44:24.750
And now here's the standard Xcode editor with
all the great features you guys know and love.

00:44:24.750 --> 00:44:26.710
Syntax highlighting, code completion.

00:44:26.710 --> 00:44:31.090
I can even use the function pop up at
the top to see all the list of classes

00:44:31.090 --> 00:44:33.539
and all the list of methods that are in this.

00:44:33.539 --> 00:44:36.269
So I can go ahead and pick one and
instantly get into working with my code.

00:44:36.269 --> 00:44:42.170
But we've also made sure to integrate other features
with the Organizer including Interface Builder.

00:44:42.170 --> 00:44:46.659
So if I were to go ahead and take the game.nib
file here and just double click on it,

00:44:46.659 --> 00:44:49.639
it's going to open up in Interface Builder like you'd expect.

00:44:49.639 --> 00:44:50.809
And this is the nib file.

00:44:50.809 --> 00:44:54.840
The interface is presented in a
single view that's the looks here.

00:44:54.840 --> 00:44:57.120
Now I want to go ahead and add something interesting to this.

00:44:57.119 --> 00:44:59.210
let's say we're going to add a tool bar.

00:44:59.210 --> 00:45:01.679
I can bring up the library as you saw Chris do before.

00:45:01.679 --> 00:45:05.299
But I'm going to actually take use of
a new feature in Interface Builder

00:45:05.300 --> 00:45:08.240
which is the ability to customize
the content in the library.

00:45:08.239 --> 00:45:12.250
I've prebuilt a toolbar that I wanted to use
and I just dragged it back into the library.

00:45:12.250 --> 00:45:15.900
So now I can drag it out and drop it in
my interface, and there's my toolbar.

00:45:15.900 --> 00:45:17.180
Here's the one I want to use.

00:45:17.179 --> 00:45:20.889
And I can edit this just the same way I do
a regular toolbar in a running application.

00:45:20.889 --> 00:45:24.929
Drag widgets in, connect them up,
get on with your application.

00:45:24.929 --> 00:45:27.599
So I want to connect up two methods to these sliders.

00:45:27.599 --> 00:45:33.559
I can select the files owner in document
window here and bring up the Inspector.

00:45:33.559 --> 00:45:35.759
Those of you who are close enough
to read it, at the very top,

00:45:35.760 --> 00:45:39.510
you'll see under the action list, it says rubyrocks.rb.

00:45:39.510 --> 00:45:43.010
Interface Builder has talked back to Xcode
and said, where's the game class?

00:45:43.010 --> 00:45:44.650
And Xcode said, it's in this file.

00:45:44.650 --> 00:45:49.789
And not only lists the file, but lists all the
methods that are already in that file for me.

00:45:49.789 --> 00:45:54.409
So if I want to add some new methods, I can
just click the plus button here and I'll type

00:45:54.409 --> 00:45:57.980
in a method, we'll call this change rock size.

00:45:57.980 --> 00:45:59.940
and hit return.

00:45:59.940 --> 00:46:03.920
Now Interface Builder has always had the ability
to generate source code for you for Objective-C,

00:46:03.920 --> 00:46:07.869
but it now includes the ability to generate
source code for Ruby and for Python.

00:46:07.869 --> 00:46:08.630
So.

00:46:08.630 --> 00:46:12.660
( Applause )

00:46:12.659 --> 00:46:16.839
So I can go ahead and grab this and
instead of generating entire source file,

00:46:16.840 --> 00:46:18.660
what I want to do is just make this a little more efficient.

00:46:18.659 --> 00:46:22.109
I'm going to grab it from the Inspector
and just drag it into my source code.

00:46:22.110 --> 00:46:25.570
What do you think is going to happen when I let go?

00:46:25.570 --> 00:46:27.760
There's the method that I need to implement.

00:46:27.760 --> 00:46:29.620
So it's put it right in my source code.

00:46:29.619 --> 00:46:34.759
I can go ahead and use some completion here to get
asteroid size as the instance variable I want to change.

00:46:34.760 --> 00:46:38.590
And I want to send it to the integer value of the slider.

00:46:38.590 --> 00:46:43.910
Now while I'm already in the editor here, let's just go
ahead and implement the other method that I want to create.

00:46:43.909 --> 00:46:48.849
And we'll call this change missile
size, make sure to copy that down here.

00:46:48.849 --> 00:46:52.619
And the instance variable I want to
change is called missile size.

00:46:52.619 --> 00:46:54.000
so I'll save that.

00:46:54.000 --> 00:46:56.230
So now I have the new method that I want to connect up.

00:46:56.230 --> 00:46:58.929
And let's go back to Interface Builder to connect those.

00:46:58.929 --> 00:47:02.129
You'll note that when I go back to
Interface Builder, the Inspector is updated

00:47:02.130 --> 00:47:04.369
with the method I just typed into my source code.

00:47:04.369 --> 00:47:06.480
No importing headers, no refreshing anything.

00:47:06.480 --> 00:47:09.730
It's gone back and found the method
that I just created in the source code.

00:47:09.730 --> 00:47:13.059
( Applause )

00:47:13.059 --> 00:47:17.809
So I can go to the Inspector and or the
connections Inspector and set up the missile size

00:47:17.809 --> 00:47:21.659
and set up the asteroid size, save my game.

00:47:21.659 --> 00:47:24.829
Let's go back to the Organizer and build the game again.

00:47:24.829 --> 00:47:31.659
And now when I bring up the asteroids game, now I have a
technical advantage where if my aim is really, really poor,

00:47:31.659 --> 00:47:38.219
I can make the asteroids much bigger or if I want to
do something more appropriate for like a 9 year old,

00:47:38.219 --> 00:47:41.719
I could just give myself bigger
missiles and take over the universe.

00:47:41.719 --> 00:47:43.389
( Laughter )

00:47:43.389 --> 00:47:47.710
So, very quickly and very easily, see we can integrate
different build systems and different languages

00:47:47.710 --> 00:47:51.090
with the Organizer and get you
guys on the way with your projects.

00:47:51.090 --> 00:47:57.920
( Applause )

00:47:57.920 --> 00:48:01.309
Now the second project I want to show
you is something called Square Charge.

00:48:01.309 --> 00:48:04.730
And this is actually a project built
with the Intel Fortran compiler.

00:48:04.730 --> 00:48:06.630
So this is a project that I just wanted to put in here.

00:48:06.630 --> 00:48:10.510
And I'm taking advantage in this case of another
integration feature, which if you look up,

00:48:10.510 --> 00:48:14.210
there are some extra files in this
project called XC command files.

00:48:14.210 --> 00:48:19.550
Instead of modifying the project as it existed, I just
want to augment it with information for the Organizer.

00:48:19.550 --> 00:48:24.039
So for this project, if I go and select it, you'll
note that now when I pull down the build window,

00:48:24.039 --> 00:48:27.440
build menu, it has a list of all the Make configurations.

00:48:27.440 --> 00:48:32.090
I went in to configure this before, so I
can pick any one of them and have it built.

00:48:32.090 --> 00:48:36.750
If I bring up the detail view, you can see
this is invoking the Intel Fortran compiler.

00:48:36.750 --> 00:48:39.280
And just went and build it for me.

00:48:39.280 --> 00:48:44.510
But this becomes much more interesting when you consider the
possibilities outside of building or outside of cleaning.

00:48:44.510 --> 00:48:48.340
So for example, I can go over to the action
menu here and you can see that I built

00:48:48.340 --> 00:48:52.030
in standard SCM commands that I want to use for this project.

00:48:52.030 --> 00:48:55.340
And I could augment this by selecting
the edit action menu here.

00:48:55.340 --> 00:48:59.990
And we provide an interface for you to add as
many scripts as you want and different kinds.

00:48:59.989 --> 00:49:01.769
I can type them in directly here.

00:49:01.769 --> 00:49:04.579
I can reference shell scripts that exist on the file system.

00:49:04.579 --> 00:49:07.949
I could even go ahead and add Automator actions.

00:49:07.949 --> 00:49:09.569
So I could pull down the menu here.

00:49:09.570 --> 00:49:15.490
Go into my home directory and grab a list of Automator
actions and add those right to my script menu.

00:49:15.489 --> 00:49:21.229
And I can select any one of them and change where the input
comes from, if I wanted to have the output discarded or not,

00:49:21.230 --> 00:49:24.210
display the errors and alerts, any kind of thing like that.

00:49:24.210 --> 00:49:27.500
And I could start to make my project much, much richer.

00:49:27.500 --> 00:49:33.380
Now I'm told that this project, let me get this straight,
calculates the electrostatic potential of a series

00:49:33.380 --> 00:49:38.730
of points due the uniform distribution
of the square of the bounding rectangle.

00:49:38.730 --> 00:49:39.960
I have no idea what that means.

00:49:39.960 --> 00:49:41.240
( Laughter )

00:49:41.239 --> 00:49:48.089
However, I was able to go through and create an
Automator action called create analysis chart.

00:49:48.090 --> 00:49:52.450
When I select it, it's going to invoke the
Fortran application, process the output,

00:49:52.449 --> 00:49:59.879
dynamically generate AppleScript based on the output, tell
pages to create a chart of what my application looks like.

00:49:59.880 --> 00:50:04.900
So now, any time I want to figure out my
electrostatic whosy what's it, it's a click away.

00:50:06.510 --> 00:50:09.220
( Laughter )

00:50:09.219 --> 00:50:11.929
( Applause )

00:50:11.929 --> 00:50:14.219
So you can start to see the potential here.

00:50:14.219 --> 00:50:16.899
Different kinds of build systems,
different kind of languages,

00:50:16.900 --> 00:50:19.090
unlimited possibilities with the scripting interface.

00:50:19.090 --> 00:50:21.680
So we think this is going to be a
great tool for you guys to use.

00:50:21.679 --> 00:50:21.929
Thank you.

00:50:21.929 --> 00:50:22.349
( Applause )

00:50:22.349 --> 00:50:29.159
>> Thank you Matt.

00:50:29.159 --> 00:50:29.210
( Applause )

00:50:29.210 --> 00:50:30.630
Thank you Matt.

00:50:32.300 --> 00:50:37.230
So the Organizer, it's been around, a tree view,
that you can use to bookmark your project folders

00:50:37.230 --> 00:50:40.030
and other files that you want quick access to.

00:50:40.030 --> 00:50:43.220
You can expand the window to show the
embedded editor and that editor is

00:50:43.219 --> 00:50:46.349
of course the new Xcode editor that
has code forwarding and code focus.

00:50:46.349 --> 00:50:49.549
And very important in this context, we
added syntax coloring and code completion

00:50:49.550 --> 00:50:52.070
for common scripting languages like Ruby and Python.

00:50:52.070 --> 00:50:54.550
( Period of silence )

00:50:54.550 --> 00:50:58.900
But the real meat of the Organizer is the powerful
scripting infrastructure that you built on top of it.

00:50:58.900 --> 00:51:02.849
you can define arbitrary shade scripts
to build and run your applications

00:51:02.849 --> 00:51:05.500
or to perform any other action that comes to your mind.

00:51:05.500 --> 00:51:08.789
In addition to shade scripts, you can also
use Automator actions and AppleScripts.

00:51:08.789 --> 00:51:10.779
( Period of silence )

00:51:10.780 --> 00:51:14.090
This combination of a tree view, file
tree view and embedded editor

00:51:14.090 --> 00:51:18.660
and the scripting infrastructure
gives you nice integrated experience.

00:51:18.659 --> 00:51:23.429
And again this all without imposing,
without actually imposing any,

00:51:23.429 --> 00:51:26.779
and that is all without exposing
any kind of restrictions on you.

00:51:26.780 --> 00:51:32.560
Now just to make sure that I'm not confusing anybody here,
the Organizer is not meant as a replacement for projects.

00:51:32.559 --> 00:51:39.179
It's meant as a lightweight and uncomplicated addition
to make Xcode accessible to a new group of users.

00:51:39.179 --> 00:51:44.069
If you work in a native application project, you should
of course continue using projects and get the benefits

00:51:44.070 --> 00:51:49.970
of the fast build system and all the features that can
aid in your building the project index, like refactoring.

00:51:49.969 --> 00:51:53.209
That said, the Organizer does have
everything you need to build

00:51:53.210 --> 00:51:56.449
with arbitrary build systems, arbitrary program languages.

00:51:56.449 --> 00:51:58.869
And it's not limited to the community project.

00:51:58.869 --> 00:52:04.079
Its also very, it's also very useful for Xcode
projects, for native application projects.

00:52:04.079 --> 00:52:10.769
You can, you can get quick access to commonly used files
and you can use the scripting infrastructure to run scripts

00:52:10.769 --> 00:52:12.630
across multiple projects at the same time.

00:52:12.630 --> 00:52:14.760
( Period of silence )

00:52:14.760 --> 00:52:18.760
So the strength of the Organizer will be
its simplicity and its flexibility.

00:52:18.760 --> 00:52:22.770
And we hope that it will make it very attractive to
the group of users that so far have not been able

00:52:22.769 --> 00:52:26.050
to benefit from the Xcode infrastructure.

00:52:26.050 --> 00:52:29.800
With that, let's go on to the automation,
automation solution providers.

00:52:29.800 --> 00:52:32.220
( Period of silence )

00:52:32.219 --> 00:52:35.309
Automation solution providers fill
at very critical need on the Mac.

00:52:35.309 --> 00:52:40.529
They use technologies like AppleScript to combine
multiple applications together into custom solutions

00:52:40.530 --> 00:52:44.990
that automate business processes and production workflows.

00:52:44.989 --> 00:52:47.899
They of course need the support from
all the application vendors out there.

00:52:47.900 --> 00:52:53.599
In the form of scripting dictionaries and
Automator actions and they need a good tool.

00:52:53.599 --> 00:52:56.440
And that tool of course is Automator.

00:52:56.440 --> 00:53:03.360
Automator is a dedicated workflow building tool
for both scripting professionals and end users.

00:53:03.360 --> 00:53:06.490
And since we shipped it in Tiger,
it has become a runaway success.

00:53:06.489 --> 00:53:11.029
Developers have, have literally created thousands
of actions and made them available for download.

00:53:11.030 --> 00:53:15.019
Developers have really created a full
ecosystem around the application.

00:53:15.019 --> 00:53:18.559
And now in Leopard, we're making Automator
even easier to use and more powerful.

00:53:18.559 --> 00:53:24.730
And to give you a demo of that, I'd like to ask Francois
Jouaux to come up on stage and give you another demo.

00:53:24.730 --> 00:53:30.030
( Applause )

00:53:30.030 --> 00:53:32.840
>> Let's have fun with Automator today.

00:53:34.409 --> 00:53:43.599
Automator turns applications and OS features into building
blocks, actions that let you build all kinds of work flows.

00:53:43.599 --> 00:53:48.549
And with an OS that is packed with fun features like Leopard,

00:53:48.550 --> 00:53:54.230
t here is an entire universe of
fun workflows waiting to be built.

00:53:54.230 --> 00:53:58.849
Today I want to build in front of
you a party registration workflow.

00:53:58.849 --> 00:54:07.009
My idea is that I will put my computer at my entrance
door and guests coming into my party will sign in.

00:54:07.010 --> 00:54:09.130
A snapshot of them will be taken.

00:54:09.130 --> 00:54:12.849
And they will be able to see who
has joined the party before them.

00:54:12.849 --> 00:54:17.259
( Period of silence )

00:54:17.260 --> 00:54:18.260
Demo machine?

00:54:18.260 --> 00:54:25.760
So when you start Automator you are
greeted by the starting point panel.

00:54:25.760 --> 00:54:30.570
So starting point panel gives you some
options to preconfigure your workflow.

00:54:30.570 --> 00:54:39.490
I think of it as a way to avoid the dreaded white
doc, workflow document syndrome that I fear so much.

00:54:40.710 --> 00:54:50.470
And I will select the photos and images starting point
and use my computer's camera here on iSight, as input.

00:54:50.469 --> 00:54:51.559
( Period of silence )

00:54:51.559 --> 00:54:54.860
That's it.

00:54:54.860 --> 00:54:59.800
I have a very simple workflow.

00:54:59.800 --> 00:55:08.539
Let's save the picture taken in my snapshots folder
which is also happens to be a stack on my desktop.

00:55:08.539 --> 00:55:09.429
( Period of silence )

00:55:09.429 --> 00:55:17.460
Now there are many, many actions available in Automator.

00:55:17.460 --> 00:55:23.289
And for me the easiest way to find the
action I need is to use a search field.

00:55:23.289 --> 00:55:31.349
The search field here will let me search for a feature
that I want to apply to my action, to my picture taken.

00:55:32.829 --> 00:55:39.909
I type the first few letters of Quartz
and I find a Quartz Composition feature.

00:55:39.909 --> 00:55:47.210
So there are many features available, but trust me
I will look less creepy in sepia than anything else.

00:55:47.210 --> 00:55:51.050
( Laughter )

00:55:51.050 --> 00:55:57.720
Let's take this opportunity to show
a few more fun actions available.

00:55:57.719 --> 00:56:01.039
For example, there is a, a new
action to control a screensaver.

00:56:01.039 --> 00:56:02.179
( Period of silence )

00:56:02.179 --> 00:56:10.149
There is also a new action to perform loops.

00:56:10.150 --> 00:56:11.840
So this is actually very powerful.

00:56:11.840 --> 00:56:14.430
It lets me look over and over my workflow.

00:56:14.429 --> 00:56:18.869
It can take the output of the workflow
as the input of the next run.

00:56:18.869 --> 00:56:22.279
It, you can decide how many times
you want to run it or for how long.

00:56:22.280 --> 00:56:32.250
In that case, that trivial case, I will loop
automatically and loop for the duration of my party.

00:56:32.250 --> 00:56:32.650
( Period of silence )

00:56:32.650 --> 00:56:38.340
That's it, I already have a quite functional workflow,
but remember that I want some more user interaction.

00:56:38.340 --> 00:56:40.220
I want people to sign in.

00:56:40.219 --> 00:56:46.589
So I'm going to search this time for my,
the next action by using the categories.

00:56:46.590 --> 00:56:54.140
And if I go to the text category, I see I can ask for text.

00:56:54.139 --> 00:57:00.069
Which will pop up a panel, and
the question is what's your name?

00:57:00.070 --> 00:57:07.250
( Period of silence )

00:57:07.250 --> 00:57:19.889
Now, hmm. I think here I need to keep the
result of the, of this action in a variable.

00:57:19.889 --> 00:57:26.239
Well this is the biggest feature added to
Automator in Leopard, support for variables.

00:57:26.239 --> 00:57:30.089
It is very simple to use variables in Leopard.

00:57:30.090 --> 00:57:32.340
Watch this.

00:57:32.340 --> 00:57:38.510
I select a field, right click, create a new variable.

00:57:38.510 --> 00:57:43.200
( Period of silence )

00:57:43.199 --> 00:57:49.269
This takes care of using the variable.

00:57:49.269 --> 00:57:53.079
Now how do I set its value?

00:57:53.079 --> 00:57:55.980
Well actions return results.

00:57:55.980 --> 00:58:04.969
And variables can take these results when you
drag them just below the action as needed.

00:58:04.969 --> 00:58:09.589
It's a magical set value of variable action appears.

00:58:09.590 --> 00:58:14.620
That's it, my variable is entirely wired up.

00:58:14.619 --> 00:58:19.710
( Applause )

00:58:19.710 --> 00:58:23.800
Now variables are very useful, they are
real time savers when you reuse them.

00:58:23.800 --> 00:58:28.810
And to illustrate this, I'm going to
send myself a to do item to remind me

00:58:28.809 --> 00:58:31.969
to thank the person that just came to the party.

00:58:31.969 --> 00:58:37.659
And I can go to the calendar category of action.

00:58:37.659 --> 00:58:43.509
Search, find a new to do item.

00:58:43.510 --> 00:58:51.060
And I will add it just before the screen saver action.

00:58:54.119 --> 00:59:01.239
See how I can mix plain text and variable
to build the title of the to do item.

00:59:01.239 --> 00:59:06.229
( Period of silence )

00:59:06.230 --> 00:59:12.139
For this particular action, I need to
remember to tell it to ignore its input.

00:59:12.139 --> 00:59:15.849
( Period of silence )

00:59:15.849 --> 00:59:16.559
Whoa.

00:59:16.559 --> 00:59:18.809
( Laughter )

00:59:18.809 --> 00:59:23.389
The party already started.

00:59:23.389 --> 00:59:25.289
( Laughter )

00:59:25.289 --> 00:59:27.179
( Applause )

00:59:27.179 --> 00:59:32.710
Okay. there's another type of variable,
a variable in Automator too.

00:59:32.710 --> 00:59:34.750
We call them smart variables.

00:59:34.750 --> 00:59:43.130
These are non customizable, they are preset by
the computer, but they are not constant either.

00:59:43.130 --> 00:59:46.910
They will always be reevaluated
as your workflow run depending

00:59:46.909 --> 00:59:50.619
on who is the current user on which machine it is run on.

00:59:50.619 --> 00:59:56.409
And in that case I would like to
change the name of the picture taken.

00:59:56.409 --> 00:59:59.609
( Period of silence )

00:59:59.610 --> 01:00:06.690
And give it a month and a day.

01:00:06.690 --> 01:00:12.360
This way I will forever remember the date when
Joe came in dressed as a penguin to my party.

01:00:14.260 --> 01:00:15.180
That's it.

01:00:15.179 --> 01:00:16.869
I have a complete workflow.

01:00:16.869 --> 01:00:20.389
It's ready to be run.

01:00:20.389 --> 01:00:34.029
But first I want to save it as a plug in and
to save it as a plug in I just give it a name.

01:00:34.030 --> 01:00:35.510
( Period of silence )
And hide Automator.

01:00:35.510 --> 01:00:41.050
It is now in my script menu bar, right up there.

01:00:41.050 --> 01:00:42.460
( Period of silence )

01:00:42.460 --> 01:00:43.099
No it's not.

01:00:43.099 --> 01:00:45.259
( Laughter )

01:00:45.260 --> 01:00:49.830
Let me bring it back up.

01:00:49.829 --> 01:00:51.889
Save as plug in.

01:00:51.889 --> 01:00:55.529
Oh yeah, I saved it in my script menu.

01:00:59.969 --> 01:01:03.069
Okay. All right.

01:01:03.070 --> 01:01:08.630
My name is Francois.

01:01:08.630 --> 01:01:10.869
( Period of silence )

01:01:10.869 --> 01:01:11.980
>> Tomi!

01:01:11.980 --> 01:01:16.250
( Laughter )

01:01:16.250 --> 01:01:18.159
>> And the screen saver kicks in.

01:01:18.159 --> 01:01:20.599
( Applause )

01:01:20.599 --> 01:01:24.460
Looks like there are only geeks that
showing to me at this party for now.

01:01:25.670 --> 01:01:27.849
Next person can come in, why don't you join us Andreas?

01:01:27.849 --> 01:01:29.179
>> Ah, maybe later.

01:01:29.179 --> 01:01:30.819
>> Let's party.

01:01:32.139 --> 01:01:36.159
So I'm sure you will have a lot of fun
with the new features in Automator.

01:01:36.159 --> 01:01:36.779
Thank you.

01:01:36.780 --> 01:01:44.510
>> Thank you Francois.

01:01:44.510 --> 01:01:44.680
( Applause )

01:01:44.679 --> 01:01:45.949
Automator.

01:01:45.949 --> 01:01:49.679
The most important new feature in Automator
like Francois just mentioned is variables.

01:01:49.679 --> 01:01:55.619
You can use smart variables, set your computer by Automator,
and give you access to common system and user properties.

01:01:55.619 --> 01:02:02.000
Or you can define your own variables which allows you to
reuse input values multiple times within your workflow.

01:02:03.690 --> 01:02:06.980
Like Xray, Automator supports UI recording.

01:02:06.980 --> 01:02:09.960
In Automator we call it Watch Me Do.

01:02:09.960 --> 01:02:15.380
You can use it to define your own custom actions, even
for applications that don't support any actions yet.

01:02:15.380 --> 01:02:20.900
Indeed the Automator gets rounded up by a
variety of smaller workflow improvements.

01:02:20.900 --> 01:02:24.320
Starting points make it a lot easier
for you to create new workflows.

01:02:24.320 --> 01:02:28.240
The Run Log gives you a better overview
of what's going on while you execute them.

01:02:28.239 --> 01:02:34.489
There's a new looping facility and of course there are many
new actions that allow you to define new types of workflows.

01:02:35.880 --> 01:02:39.160
Let's also take a look at of the
technologies behind Automator

01:02:39.159 --> 01:02:43.690
Most importantly is of course AppleScript
which has become even more powerful in Leopard

01:02:43.690 --> 01:02:45.309
with the addition of the Scripting Bridge.

01:02:45.309 --> 01:02:47.469
( Period of silence )

01:02:47.469 --> 01:02:52.019
With the Scripting Bridge developers who add support for
SppleScript to their applications also get support

01:02:52.019 --> 01:02:54.900
for other programming languages for free.

01:02:54.900 --> 01:02:58.099
Essentially what happens is that if you take
your application and you make it scriptable,

01:02:58.099 --> 01:03:04.909
it can be accessed through other programming languages like
Objective-C, Ruby and Python through the Scripting Bridge.

01:03:04.909 --> 01:03:09.960
The scripting dictionary pretty much turns
in an API that other developers can use.

01:03:09.960 --> 01:03:16.340
( Applause )

01:03:16.340 --> 01:03:20.000
So using Leopard means having a good time
for the automation solution providers.

01:03:20.000 --> 01:03:25.090
The combination of the new Automator, AppleScript
and the Scripting Bridge is a powerful punch

01:03:25.090 --> 01:03:27.150
to make it even more productive than ever before.

01:03:27.150 --> 01:03:32.369
And of course whenever there's a good time for the
automation solution providers, there's also a good time

01:03:32.369 --> 01:03:35.769
for those of you that make your application scriptable.

01:03:35.769 --> 01:03:39.469
Adding script ability in our experiences
saves additional software.

01:03:39.469 --> 01:03:42.449
And especially now with the Scripting
Bridge, there's a huge community of people

01:03:42.449 --> 01:03:45.089
out there that want to use your applications.

01:03:45.090 --> 01:03:49.960
So it's definitely worth the smallest extra
effort to add scriptability to your apps.

01:03:49.960 --> 01:03:55.449
And with that, let's go on to widget development.

01:03:55.449 --> 01:04:00.829
As you already heard this morning, Leopard will contain a
new tool that is focused solely on the creation of bridges.

01:04:00.829 --> 01:04:03.679
And it's called Dashcode.

01:04:03.679 --> 01:04:06.199
Dashcode is a complete widget development environment

01:04:06.199 --> 01:04:11.219
and after last year's WWDC we already made a
public beta version of it available for download.

01:04:11.219 --> 01:04:13.759
That beta was a huge success for us.

01:04:13.760 --> 01:04:19.960
We had nearly 50,000 downloadsP with a result that of the many
thousands of widgets currently available on Apple's website

01:04:19.960 --> 01:04:23.699
for download, many of them have
already been created with Dashcode.

01:04:23.699 --> 01:04:26.089
( Period of silence )

01:04:26.090 --> 01:04:27.990
This is what some of you had to say about it.

01:04:27.989 --> 01:04:32.719
( Period of silence )

01:04:32.719 --> 01:04:36.049
So as you can see, the feedback on
Dashcode was overwhelmingly positive.

01:04:36.050 --> 01:04:37.850
You have sent in a lot of encouraging feedback.

01:04:37.849 --> 01:04:42.839
You have sent in a great amount of great suggestions
and we have tried to incorporate as many of them

01:04:42.840 --> 01:04:45.780
as possible into the Leopard version of Dashcode.

01:04:45.780 --> 01:04:50.130
And to show you, I'd like to ask Todd Fernandez
to come up on stage and give you another demo.

01:04:50.130 --> 01:04:58.579
( Applause )
>> Thank you Andreas, and good afternoon developers.

01:04:58.579 --> 01:05:02.469
We really do appreciate all of your
feedback on our Dashcode Beta.

01:05:02.469 --> 01:05:07.139
As Andreas mentioned, we have incorporated your
suggestions as well as a number of exciting new features

01:05:07.139 --> 01:05:11.629
into a great Dashcode release for Leopard.

01:05:11.630 --> 01:05:15.099
There's been a lot of excitement in
the web community about mashups.

01:05:15.099 --> 01:05:19.360
Combining all sorts of different types of
information provided by RSS feeds

01:05:19.360 --> 01:05:24.820
with their geographical location with maps
makes that information far more useful.

01:05:24.820 --> 01:05:31.640
So we've added a new maps template to Dashcode that makes
it really easy and fun to take advantage of all those feeds.

01:05:31.639 --> 01:05:38.039
And I'd love to show it to you now.

01:05:38.039 --> 01:05:40.679
( Period of silence )
Here's Dashcode's template chooser,
I'm going to create my widget.

01:05:40.679 --> 01:05:42.989
And let's see.

01:05:42.989 --> 01:05:45.329
Let's find a nice feed in Safari.

01:05:45.329 --> 01:05:50.119
This is, this is a Flickr feed that
provides photos with particular tag.

01:05:50.119 --> 01:05:54.309
I thought Leopard would be particularly appropriate today.

01:05:54.309 --> 01:06:01.019
All we need to do is drag this
feed into our widget and run it.

01:06:01.019 --> 01:06:08.289
And the widget will fetch all that information from the
feed and lay out those pictures around the world on the map.

01:06:08.289 --> 01:06:11.840
And I can see the photos and get a nice full screen view.

01:06:11.840 --> 01:06:12.260
That's it.

01:06:12.260 --> 01:06:13.520
It's that easy.

01:06:13.519 --> 01:06:18.739
( Applause )

01:06:18.739 --> 01:06:20.750
But the power of Dashcode is really what,

01:06:20.750 --> 01:06:25.230
the power it gives you to go beyond the
template and create customized widgets.

01:06:25.230 --> 01:06:29.010
And to do that I'm going to use Dashcode's library.

01:06:29.010 --> 01:06:32.850
Very similar to what you've already seen
today in Xray and Interface Builder.

01:06:32.849 --> 01:06:36.559
I'm also going to switch to use a different feed.

01:06:36.559 --> 01:06:45.079
One from our friends at the US Geological Service
which provides information on recent earthquakes,

01:06:45.079 --> 01:06:49.429
which I hope will be completely irrelevant
to us here in San Francisco this week.

01:06:50.739 --> 01:06:54.189
So let me bring up Dashcode's library,

01:06:54.190 --> 01:06:59.250
which provides me with three different types of
content that I can use to customize my widget.

01:06:59.250 --> 01:07:03.170
The first I'm going to use is some art from my iPhoto library.

01:07:03.170 --> 01:07:11.519
And I can just drag it out to my widget
and use Dashcode's guides to line it up.

01:07:11.519 --> 01:07:12.639
All right, that's great.

01:07:12.639 --> 01:07:16.609
I have customized the look of my widget but
I also want to customize its functionality.

01:07:16.610 --> 01:07:20.860
I'd like to add a button to my widget
that recenters the map on home.

01:07:20.860 --> 01:07:25.550
And to do that I'm going to use Dashcode's parts library.

01:07:25.550 --> 01:07:32.039
Dozens of reusable parts of all sorts of different user
interface elements that I can use to build my widget.

01:07:32.039 --> 01:07:35.070
And as I mentioned I'm going to use a button.

01:07:35.070 --> 01:07:38.080
So I can just drag that out of the library to my widget.

01:07:38.079 --> 01:07:42.539
And again use the guides to resize it.

01:07:42.539 --> 01:07:46.150
Let's give it a name.

01:07:46.150 --> 01:07:51.539
All right, well, I've got my button there,
but I need to give it some behavior.

01:07:51.539 --> 01:07:55.829
So I'm going to bring up the behaviors Inspector.

01:07:55.829 --> 01:08:00.880
And define a function for it to call
when my user clicks that button.

01:08:00.880 --> 01:08:06.070
And when I make that connection, Dashcode
opens up its integrated source editor

01:08:06.070 --> 01:08:09.019
and gives me a function prototype
for that new function I've created.

01:08:09.019 --> 01:08:12.489
Keeping me in the flow of the task I'm trying to complete.

01:08:15.610 --> 01:08:21.470
And that brings me to the third type of
content in Dashcode's library, code snippets.

01:08:21.470 --> 01:08:27.860
Again, dozen of little pieces of code that you can
use to build your widgets, common tasks that you use.

01:08:27.859 --> 01:08:31.609
And again, like in Interface Builder, you can
drag your own snippets back to the library

01:08:31.609 --> 01:08:34.849
that you can use again and again as you build widgets.

01:08:34.850 --> 01:08:38.100
And in fact, I've done that myself for this demo.

01:08:38.100 --> 01:08:42.020
I have the definition of this function as a
snippet and I can just drag it right in there.

01:08:42.020 --> 01:08:42.740
( Period of silence )

01:08:42.739 --> 01:08:45.409
And there we go.

01:08:45.409 --> 01:08:46.609
So that's great.

01:08:46.609 --> 01:08:48.250
I've customized the look of my widget.

01:08:48.250 --> 01:08:52.960
I've customized its functionality, but I
also want to give my widget's users the ability

01:08:52.960 --> 01:08:57.170
to customize the widget's behavior at run time.

01:08:57.170 --> 01:09:03.649
So another great feature that the template provides is
filtering of the information that the feed provides.

01:09:03.649 --> 01:09:08.769
It gives me for free, filtering on the title and
description, common keys that are provided in the feeds

01:09:08.770 --> 01:09:13.700
and a couple of spare controls that I can
wire up to other keys that of interest.

01:09:13.699 --> 01:09:19.300
Since we are looking at an earthquake feed, I thought we
might be able to filter on the magnitude of the earthquakes.

01:09:19.300 --> 01:09:22.480
All I need to do is provide the key.

01:09:22.479 --> 01:09:27.359
But how do I know what key is in the
feed that represents the magnitude?

01:09:27.359 --> 01:09:32.779
This is actually a common problem for designing
a widget that consumes any kind of RSS feed.

01:09:32.779 --> 01:09:36.090
How do I explore the feed and find out what's in it?

01:09:36.090 --> 01:09:38.750
Dashcode makes this really easy.

01:09:38.750 --> 01:09:42.050
( Period of silence )

01:09:42.050 --> 01:09:49.409
So I know this is an RSS feed that I'm consuming,
but I haven't seen the code for this template before.

01:09:49.409 --> 01:09:51.970
How will I find where in the code this might be?

01:09:51.970 --> 01:09:57.600
Well I can use Dashcode's search field to
search the entire project and see what I find.

01:09:57.600 --> 01:10:00.860
And surely enough, there's a function parse RSS feed.

01:10:00.859 --> 01:10:02.750
That sounds promising.

01:10:02.750 --> 01:10:07.819
Let's look through here and see if I can find
where it's parsing getting, get all item elements.

01:10:07.819 --> 01:10:10.139
That sounds like what I need.

01:10:10.140 --> 01:10:13.490
Let me set a break point and run, run the widget.

01:10:13.489 --> 01:10:17.529
Which will launch it under Dashcode's
integrated JavaScript debugger.

01:10:17.529 --> 01:10:19.679
There I've hit my break point.

01:10:19.680 --> 01:10:25.380
And as you can see, the graphical canvas view has
been swapped out with my stack frame variable view.

01:10:25.380 --> 01:10:26.730
Again, keeping me in the flow.

01:10:26.729 --> 01:10:30.989
I can go ahead and step through my code.

01:10:30.989 --> 01:10:38.319
And as I step over lines of code, I can see that objects
up in my stack frame and variable view get live data.

01:10:38.319 --> 01:10:43.719
And I can see that this item class looks like what I need.

01:10:43.720 --> 01:10:47.600
But how am I going to find out what, what it has inside of it?

01:10:47.600 --> 01:10:50.820
Well, I'm going to use Dashcode's code evaluator.

01:10:50.819 --> 01:10:54.909
A live JavaScript console that allows
me to interact with my running widget

01:10:54.909 --> 01:10:58.289
and execute arbitrary JavaScript code on it.

01:10:58.289 --> 01:11:04.350
So I can use code completion here to explore
this class, if I've never seen this code before.

01:11:04.350 --> 01:11:09.170
Although I'm going to skip a couple
steps since I have seen it before.

01:11:09.170 --> 01:11:12.539
But you can imagine how I did this the first time.

01:11:12.539 --> 01:11:16.039
And find that that is in fact the
magnitude that I'm looking for.

01:11:16.039 --> 01:11:18.550
All I need to do is find the key.

01:11:18.550 --> 01:11:22.750
( Period of silence )

01:11:22.750 --> 01:11:30.590
And I don't know why, but the author of this
feed decided to call the magnitude subject.

01:11:30.590 --> 01:11:34.279
I'm not going to be particular, all
I need to know is what it is.

01:11:34.279 --> 01:11:35.529
So I can stop my widget.

01:11:35.529 --> 01:11:36.170
( Period of silence )

01:11:36.170 --> 01:11:45.710
And get back to my source code because
I need to disable that break point.

01:11:45.710 --> 01:11:53.170
And all I need to do again is provide that key for my
range filter feeds, right here in the attributes Inspector.

01:11:53.170 --> 01:11:56.130
So it was subject, right?

01:11:56.130 --> 01:11:57.529
Excellent, and I'm done.

01:11:57.529 --> 01:11:58.689
Let's go ahead and run the widget.

01:11:58.689 --> 01:11:59.199
( Period of silence )

01:11:59.199 --> 01:12:05.340
And again I see the widget laying out all
the place marks for all the earthquakes.

01:12:05.340 --> 01:12:05.920
( Period of silence )

01:12:05.920 --> 01:12:11.239
I can click on my home button which
takes me back home to California.

01:12:11.239 --> 01:12:16.439
And sure enough, there's plenty
of earthquake activity there.

01:12:16.439 --> 01:12:28.089
I can flip over and filter on lets see if there
are any larger earthquakes, magnitudes 6 to 7.

01:12:28.090 --> 01:12:28.279
( Period of silence )

01:12:28.279 --> 01:12:32.369
So we've just scratched the surface of the power
of Dashcode to help you go beyond the template

01:12:32.369 --> 01:12:35.409
and create beautiful widgets that help promote your brand.

01:12:35.409 --> 01:12:38.510
And I hope that you love it, you
have as much fun with it as we do.

01:12:38.510 --> 01:12:39.539
Thank you very much.

01:12:39.539 --> 01:12:40.680
Back to you Andreas.

01:12:40.680 --> 01:12:46.650
( Applause )

01:12:46.649 --> 01:12:47.920
>> So, Dashcode.

01:12:47.920 --> 01:12:50.380
It's comes with a great set of templates that allows you,

01:12:50.380 --> 01:12:54.480
that allow you to create fully functional
widgets often in just a few clicks.

01:12:54.479 --> 01:12:57.709
And even if you're not an experienced JavaScript developer.

01:12:57.710 --> 01:13:00.420
But if you are, Dashcode has great editors for you.

01:13:00.420 --> 01:13:05.029
There's a graphical HTML/CSS editor, as
well as an Xcode like JavaScript editor

01:13:05.029 --> 01:13:07.380
which of course has syntax coloring and code completion.

01:13:07.380 --> 01:13:09.600
( Period of silence )

01:13:09.600 --> 01:13:13.039
The library in Dashcode allow, gives you
every thing you need to customize your widget.

01:13:13.039 --> 01:13:17.769
You can choose from a long list of
predefined reusable JavaScript parts.

01:13:17.770 --> 01:13:19.790
You can choose from useful code snippets.

01:13:19.789 --> 01:13:23.649
And of course you get access to
the folders in your media library.

01:13:23.649 --> 01:13:26.619
But the most powerful feature of Dashcode is the debugger.

01:13:26.619 --> 01:13:31.699
It's a fully JavaScript debugger that you can set break
points, break point conditions, you can monitor the state

01:13:31.699 --> 01:13:33.889
of variables while you execute your widget.

01:13:33.890 --> 01:13:36.900
You can even drop into the evaluator
which allows you to interact

01:13:36.899 --> 01:13:39.579
with your running widget through
full JavaScript expressions.

01:13:39.579 --> 01:13:40.460
( Period of silence )

01:13:40.460 --> 01:13:45.430
So Dashcode is really fun.

01:13:45.430 --> 01:13:50.920
I actually can't tell you how many count on widgets three
little daughters at home have already created with it.

01:13:50.920 --> 01:13:55.680
So if you haven't given it a try yet,
please go take it out for a test ride.

01:13:55.680 --> 01:14:00.970
If you already have a native Mac application, please
consider writing a widget that compliments your application.

01:14:00.970 --> 01:14:05.430
Users really love the quick status updates
they can get through Dashboard widgets.

01:14:05.430 --> 01:14:09.270
Now before I let you go and put all
the cool news toys we showed you today

01:14:09.270 --> 01:14:12.370
to good use, let's talk about releases for a moment.

01:14:12.369 --> 01:14:15.340
Earlier today you received a Leopard DVD and that DVD

01:14:15.340 --> 01:14:18.819
of course contains all the tools I
showed you in this session today.

01:14:18.819 --> 01:14:22.429
We are also working on an Xcode 2.0 based release for you.

01:14:23.529 --> 01:14:27.659
Later day, there will be a download of the
2.5 beta available for download to you

01:14:27.659 --> 01:14:31.840
and it contains bug fix releases to the older tools.

01:14:31.840 --> 01:14:37.069
What's great about Xcode 2.5 is it not
only runs on Tiger, but both on Tiger and Leopard.

01:14:37.069 --> 01:14:40.859
So if you have specific projects you
can't bring forward to Xcode 3.0 right now,

01:14:40.859 --> 01:14:43.409
this can smooth your transition to Leopard a bit.

01:14:43.409 --> 01:14:44.579
And what's.

01:14:44.579 --> 01:14:47.569
( Applause )

01:14:47.569 --> 01:14:50.799
And what's even better than that, is that they
are delivering on the promise from last year.

01:14:50.800 --> 01:14:56.610
And you can install and run both Xcode 2.5
and Xcode 3.0 side by side on Leopard.

01:14:56.609 --> 01:15:01.399
( Applause )

01:15:01.399 --> 01:15:02.569
So these are the new tools.

01:15:02.569 --> 01:15:03.710
They are ready for you to use.

01:15:03.710 --> 01:15:08.239
And they do their best to make sure you don't
end up with this, but instead with a modern piece

01:15:08.239 --> 01:15:11.229
of software and users really love and embrace.

01:15:11.229 --> 01:15:14.349
So please go out, innovate, amaze
us, thank you for coming today.