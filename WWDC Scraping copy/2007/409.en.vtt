WEBVTT

00:00:17.570 --> 00:00:18.789
>> Good afternoon everybody.

00:00:18.789 --> 00:00:26.289
You are about to listen to the Session 409 called
Mastering QuickTime Digital Video Techniques.

00:00:26.289 --> 00:00:29.820
So what is this session all about?

00:00:29.820 --> 00:00:37.280
Actually, instead of usually talking about new APIs and
flashy demo that we are doing, we are stepping back here

00:00:37.280 --> 00:00:44.590
and trying to give you more concepts and
key elements you need to know in order

00:00:44.590 --> 00:00:48.290
to write a video professional applications.

00:00:48.289 --> 00:00:50.500
So we'll talk about three things.

00:00:50.500 --> 00:00:55.600
First of all what defines professional video applications.

00:00:55.600 --> 00:01:03.480
Then a couple of QuickTime concept and vocabulary
you need to understand what this technology is.

00:01:03.479 --> 00:01:08.450
And the last one is how to make
these two technology happy together.

00:01:08.450 --> 00:01:14.120
But I am not somebody who is writing
application and pro application as well.

00:01:14.120 --> 00:01:21.160
So I have somebody which is going to come up on stage to
tell us what professional video application is all about.

00:01:21.159 --> 00:01:34.219
So let's welcome David Black, Senior
Architect Pro application.

00:01:34.219 --> 00:01:34.370
David?

00:01:34.370 --> 00:01:35.469
( Applause )

00:01:35.469 --> 00:01:40.400
>> -- some of the topics that Ken and
Jean-Michel are going to talk about today.

00:01:40.400 --> 00:01:48.260
And really talk about what a pro application is in the
context of media as opposed to maybe a consumer application.

00:01:48.260 --> 00:01:52.150
And really, we're going to come up with
a base definition of a pro application.

00:01:52.150 --> 00:01:56.690
It is a tool that really is designed
for production professionals.

00:01:56.689 --> 00:02:01.560
You know, it can be a really big complex
application, it can be a small specialized tool.

00:02:01.560 --> 00:02:04.109
You know, in some cases it will do just one operation,

00:02:04.109 --> 00:02:07.329
in other cases it's a scriptable
environment to do lots of things.

00:02:07.329 --> 00:02:14.969
But really, the key concept here is that it's built for
creative people who aren't necessarily computer people.

00:02:14.969 --> 00:02:19.949
So there will be logic there to handle all the graphics
operations and creative looks they want to build.

00:02:19.949 --> 00:02:23.639
But without, necessarily, the complexity
that an engineer will understand.

00:02:23.639 --> 00:02:31.009
And another key concept here, especially when it comes to
larger customers, is that it's reliable and consistent.

00:02:31.009 --> 00:02:34.139
Some pro customer expectations.

00:02:34.139 --> 00:02:35.699
We touched this a little bit before.

00:02:35.699 --> 00:02:37.250
We want a tool that's useable.

00:02:37.250 --> 00:02:38.819
They can learn it.

00:02:38.819 --> 00:02:40.680
They can get data in and out of it.

00:02:40.680 --> 00:02:41.629
It's reliable.

00:02:41.629 --> 00:02:43.069
It doesn't crash a whole lot.

00:02:43.069 --> 00:02:44.469
Or at least it's a little bit predictable.

00:02:44.469 --> 00:02:47.840
And it doesn't necessarily consume extreme amounts of time.

00:02:47.840 --> 00:02:54.200
If you have a tool that will render at -- you
know, one frame takes four minutes to render,

00:02:54.199 --> 00:02:57.329
you're certainly going to limit
yourself on who's going to use that tool.

00:02:57.330 --> 00:02:58.860
And also the tools are repeatable.

00:02:58.860 --> 00:03:00.340
But this comes back to reliability.

00:03:00.340 --> 00:03:07.259
But if I am going run media through a tool multiple times
I will get the same results with the same parameters.

00:03:07.259 --> 00:03:10.810
Just for a minute, you know, I talked about pro customers.

00:03:10.810 --> 00:03:14.240
And the pro space in many ways is
kind of split in two these days.

00:03:14.240 --> 00:03:15.490
Where you sort of have the high end.

00:03:15.490 --> 00:03:18.140
You know, the production houses, the film studios.

00:03:18.139 --> 00:03:20.549
And sort of the presumers or the Indies.

00:03:20.550 --> 00:03:25.070
Right? These are people who are buying a lot more
pro applications in volume than the high end guys.

00:03:25.069 --> 00:03:31.000
And there's certainly -- what you think about it in terms
of what kind of tools they need in their expectations.

00:03:31.000 --> 00:03:35.610
On the one hand, they expect everything the pro
people want, or the high end pro people want.

00:03:35.610 --> 00:03:40.230
But they have the advantage that
they will trade some convenience for cost.

00:03:40.229 --> 00:03:42.780
If it takes a long time to render their film, it's okay.

00:03:42.780 --> 00:03:45.879
Because they don't necessarily
have the budgets of the big guys.

00:03:45.879 --> 00:03:50.189
And you think in some ways this would
mean that they're more forgiving of flaws.

00:03:50.189 --> 00:03:52.280
But they're actually not in many ways.

00:03:52.280 --> 00:03:56.240
They are probably the more difficult customer to code for.

00:03:56.240 --> 00:04:00.180
Because they're not necessarily
going to spend a lot of money.

00:04:00.180 --> 00:04:05.409
And whereas the big guys will take a lot of time to evaluate
a piece of software and confirm it meets their needs.

00:04:05.409 --> 00:04:10.680
The little guys in some ways will flock to
something that has a lot of forum or review buzz.

00:04:10.680 --> 00:04:14.750
And they might be as proficient, or
consistently proficient as you expect.

00:04:14.750 --> 00:04:17.500
So they can be a tech support challenge.

00:04:19.029 --> 00:04:23.250
This is kind of the slide I sort of -- in coming up
with this presentation with Ken and Joe Michelle,

00:04:23.250 --> 00:04:26.240
I realized this might sort of make
people panic a little bit.

00:04:26.240 --> 00:04:29.210
It's not really as dire, maybe, as it sounds.

00:04:29.209 --> 00:04:32.629
Because really, when can comes
down to creating a pro application.

00:04:32.629 --> 00:04:38.600
As long as you're implementing for the high end guys
you're really going to get everybody for the most part.

00:04:38.600 --> 00:04:41.670
You know, just make sure your interfaces are well developed.

00:04:41.670 --> 00:04:45.960
If you have chances to go through Q A
cycles, make sure your software is stable.

00:04:45.959 --> 00:04:49.189
Everyone's really going to be happy.

00:04:49.189 --> 00:04:54.339
But you know, if you have to sort of segment for one
or the other, you can target the reliability features

00:04:54.339 --> 00:05:02.019
of a high end, and you will eventually get (Inaudible)
-- I also want to sort of set the stage with a work flow.

00:05:02.019 --> 00:05:05.279
You can start off by, you know, acquiring media.

00:05:05.279 --> 00:05:07.750
Work flow that your customers will
go thorough with your products.

00:05:07.750 --> 00:05:10.540
And you want to think about where they fit in this chain.

00:05:10.540 --> 00:05:14.750
So you might shoot with a high def
video camera, Telecine off of film.

00:05:14.750 --> 00:05:20.930
And then once they have that content into the system
they're going to use your tools, our tools, multiple tools,

00:05:20.930 --> 00:05:23.959
to go ahead and edit that content, you
know, make changes to it, render it.

00:05:23.959 --> 00:05:30.919
And really provide, you know, as a creative,
their value add what comes out of the lens.

00:05:30.920 --> 00:05:35.210
Once they've got that phase complete, you know, they're
going to take that content out of your application

00:05:35.209 --> 00:05:39.939
and they're going to put it into maybe a final
container, or maybe an intermediate container.

00:05:39.939 --> 00:05:45.230
Sort of collapse everything down and get sort of
the component pieces into at least a single chunk.

00:05:45.230 --> 00:05:49.439
And then of course when you're done with
that, it's going to go somewhere for playback.

00:05:49.439 --> 00:05:53.110
They might be sending it out to film,
might be sending it out to DVD mastering,

00:05:53.110 --> 00:05:57.580
might be sending it out to Apple TV or iPod.

00:05:57.579 --> 00:06:03.839
And really, the message we want to talk about today is
that all of these operations you can do in QuickTime.

00:06:03.839 --> 00:06:06.799
And you can do them for the pro customer.

00:06:06.800 --> 00:06:12.319
They're just, you know, certain concerns, common
issues you'll want to keep in mind and code around so

00:06:12.319 --> 00:06:15.819
that ultimately you're meeting everyone's expectations.

00:06:15.819 --> 00:06:18.610
And really, you know, that is what the session's about.

00:06:18.610 --> 00:06:22.889
You know. Those details, those "gottchas" that
Jean Michelle and Ken are going to go into.

00:06:22.889 --> 00:06:32.990
And with that I'll actually invite Jean Michelle back
on the stage to begin with a very brief overview.

00:06:32.990 --> 00:06:41.310
>> So, before we dive into this detail, David was mentioning
we need to get a quick tour of QuickTime, what it is,

00:06:41.310 --> 00:06:48.220
so you understand the vocabulary, the concept, and
the other thing that we're going to talk about.

00:06:48.220 --> 00:06:49.710
So what is QuickTime?

00:06:49.709 --> 00:06:55.930
It's a set of APIs, basically, in
OS X terminology, it is a framework.

00:06:55.930 --> 00:07:05.930
But it's also a file format which let's you capture
and modify your content and deliver it to your end users.

00:07:05.930 --> 00:07:13.740
So when you combine all this together you
basically have a solution for your application.

00:07:13.740 --> 00:07:19.280
So we're going to go one by one
to all these bullets on screen,

00:07:19.279 --> 00:07:24.500
and after that we'll tell you all that's
relative to your pro video application.

00:07:24.500 --> 00:07:27.170
So let's start with the first one.

00:07:27.170 --> 00:07:28.420
The movie.

00:07:28.420 --> 00:07:33.290
The movie is a basic container of all this
content or whatever it is, audio, video --

00:07:33.290 --> 00:07:39.500
and we organize it and try to display
it in a fashionable manner.

00:07:39.500 --> 00:07:44.399
The important thing is that the movie can
be a file, but also can stay in memory.

00:07:44.399 --> 00:07:49.339
The first element in this movie is the track.

00:07:49.339 --> 00:07:56.619
Each different type of data is organized in a
track which can contain different types of media.

00:07:56.620 --> 00:07:58.110
One more time, audio and video.

00:07:58.110 --> 00:08:01.100
But there could also be multiple video tracks.

00:08:01.100 --> 00:08:06.410
Representing different piece of your content.

00:08:06.410 --> 00:08:09.740
Inside this track we have what we call media.

00:08:09.740 --> 00:08:14.790
And media is where the bits which
are going to produce this content.

00:08:14.790 --> 00:08:19.560
The media doesn't have to be physically
in the QuickTime representation.

00:08:19.560 --> 00:08:21.889
It can be outside of it.

00:08:21.889 --> 00:08:24.329
And how do we represent that?

00:08:24.329 --> 00:08:29.009
We have what we call data references,
which actually allow QuickTime

00:08:29.009 --> 00:08:34.490
to fetch this data either locally inside
your movie, or even on the network.

00:08:34.490 --> 00:08:36.210
And we'll see later what this is.

00:08:36.210 --> 00:08:38.440
Why this is important for you.

00:08:38.440 --> 00:08:43.120
Another concern that QuickTime have is the Time Scale.

00:08:43.120 --> 00:08:49.779
Basically, it's a really simple definition
from us, but it's critical for your content.

00:08:49.779 --> 00:08:56.500
It's the number of time -- per second, simply, I
mean in this example on the graphic, for instnace,

00:08:56.500 --> 00:08:59.330
if you count the little ticks you'll see 18 of them,
I believe.

00:08:59.330 --> 00:09:03.889
Which will make your movie user Time Scale 16.

00:09:03.889 --> 00:09:10.159
Historically, QuickTime has defaulted to
use a value of 600 for this Time Scale.

00:09:10.159 --> 00:09:18.730
And the reason why, like, 16 years ago when we decided
to create our first movie, 600 was a perfect number.

00:09:18.730 --> 00:09:24.550
You could play 12, 15, 24, 36 --
in FPS what else did you need.

00:09:24.549 --> 00:09:27.169
In the pro video space today that is no longer true.

00:09:27.169 --> 00:09:29.490
We need something much better than that.

00:09:29.490 --> 00:09:36.710
The last thing that you need to know is that
this Time Scale is present inside your movie

00:09:36.710 --> 00:09:40.150
to drive the entire movie API you're going to use.

00:09:40.149 --> 00:09:43.980
But it's also contained inside your media track.

00:09:43.980 --> 00:09:50.889
So you've got to be able careful when you're
going to select both of them that they make sense.

00:09:50.889 --> 00:10:01.139
Tagging. What we mean by tagging on the video side is
basically describe the color space of your video as well

00:10:01.139 --> 00:10:07.279
as some temporal information, like
field, and also two other tag,

00:10:07.279 --> 00:10:12.539
called pasp and clap -- we'll go through each of them later.

00:10:12.539 --> 00:10:21.329
Another QuickTime capabilities is getting
content from other files within QuickTime.

00:10:21.330 --> 00:10:25.420
So on one hand you have the importer
which are getting-- sorry --

00:10:25.419 --> 00:10:32.250
getting you in these files, and the
exporter, which are going the other way.

00:10:32.250 --> 00:10:34.659
Codecs. Video codecs. What they are.

00:10:34.659 --> 00:10:38.370
Basically they take the cells in and they compress them.

00:10:38.370 --> 00:10:43.259
And the decompressor is doing exactly the opposite way.

00:10:43.259 --> 00:10:50.169
It is taking this compressed data
stream and produce pixel.

00:10:50.169 --> 00:10:52.240
From the outside, very simple.

00:10:52.240 --> 00:10:56.960
Inside they are extremely complex pieces.

00:10:56.960 --> 00:11:02.960
So the pixel that I was just mentioning
that this codecs get in and out,

00:11:02.960 --> 00:11:05.960
they can be represented in different color space.

00:11:05.960 --> 00:11:11.920
The one I have on screen right now is our common
QuickTime format called 2yuv

00:11:11.919 --> 00:11:17.299
which is 42 yuv representation of pixels.

00:11:17.299 --> 00:11:23.719
Another one could be RGB. That graphics people
usually understand much better than YU space.

00:11:23.720 --> 00:11:31.820
But they are unified with some of this
4 CC, like this one is alpha RGB.

00:11:31.820 --> 00:11:32.910
Last link.

00:11:32.909 --> 00:11:35.100
Visual context.

00:11:35.100 --> 00:11:41.149
This is something we introduce with QuickTime
7.0 to replace entire pipeline video engine.

00:11:41.149 --> 00:11:46.110
We used to be based on GWorld (assumed spelling),
and the visual context totally replaced it.

00:11:46.110 --> 00:11:52.019
And basically it built around OS X native
technology instead of the predicated one.

00:11:52.019 --> 00:11:57.120
So we integrate fully with Core Image
openGL, and Core Video.

00:11:59.080 --> 00:12:03.750
So now that we are done with the terminology side of the --

00:12:03.750 --> 00:12:10.080
of this presentation, let me go back
to the slide a minute ago it will show

00:12:10.080 --> 00:12:12.600
in the application or the processing pipeline.

00:12:12.600 --> 00:12:15.879
And let's take a look at the first one.

00:12:15.879 --> 00:12:18.559
Which is the acquisition of the media.

00:12:18.559 --> 00:12:25.029
We will go through each of these points one by
one to describe exactly what we mean by that.

00:12:25.029 --> 00:12:30.720
There is three ways your application
is going to get content.

00:12:30.720 --> 00:12:32.360
The first one is to digitize.

00:12:32.360 --> 00:12:40.440
If you have VCR or any input device capabilities will be
able to take this digitized and eventually compress it,

00:12:40.440 --> 00:12:45.230
rendition of the video and make a movie out of it.

00:12:45.230 --> 00:12:49.980
The next one that I said earlier,
is to import existing file.

00:12:49.980 --> 00:12:52.279
Which I not represented in the QuickTime format.

00:12:52.279 --> 00:12:58.659
But for instance, AVI file or anything else,
and translate that to a QuickTime Movie.

00:12:58.659 --> 00:13:01.620
And the last one which is the easiest one is

00:13:01.620 --> 00:13:06.269
to natively open QuickTime
file that other application created.

00:13:06.269 --> 00:13:10.269
But nothing in this process is very specific to pro video.

00:13:10.269 --> 00:13:14.480
Any application could do that really
easily in a couple line of code.

00:13:14.480 --> 00:13:19.810
So what would you be worried about if
you write professional video application?

00:13:19.809 --> 00:13:25.849
It is extremely critical for you to check
that the content is properly ordered.

00:13:25.850 --> 00:13:31.610
It's not because it's a QuickTime Movie
that you can trust it as properly tagged.

00:13:31.610 --> 00:13:38.539
You have to verify that the Time Scale that was used to
create this movie is appropriate for what you want to do.

00:13:38.539 --> 00:13:43.819
You have to also make sure that the
video is fully described in the movie.

00:13:43.820 --> 00:13:50.980
Otherwise you are introducing content which is untagged,
and QuickTime is going to have to guess how to process it.

00:13:50.980 --> 00:13:55.629
And when we guess, most of the time we guess wrong.

00:13:55.629 --> 00:14:02.830
In a professional application you can nag the
user and say you are getting untagged content.

00:14:02.830 --> 00:14:04.610
Please tell us where its coming from.

00:14:04.610 --> 00:14:06.990
Because sometimes I know it's not in the file.

00:14:06.990 --> 00:14:10.529
But they know that this file, they
got it from this production houses,

00:14:10.529 --> 00:14:14.139
and they know it is SD NTSC (unclear) content.

00:14:14.139 --> 00:14:17.059
So they can tell you, and you can override this tagging.

00:14:17.059 --> 00:14:21.389
If you let content get inside our application untagged,

00:14:21.389 --> 00:14:25.919
basically it's going to be an issue
for all the rest of the processing.

00:14:25.919 --> 00:14:31.229
So you can offer different choice if you want, to
have the user understand what you are talking about.

00:14:31.230 --> 00:14:36.629
But you should never let untagged
content flow through your application.

00:14:36.629 --> 00:14:44.009
The way you view tags is to use a tool we call Dumpster,
or basically what is showing you the internal of the movie.

00:14:44.009 --> 00:14:51.950
And on this picture you will see if you can read of
course, that there is 4 which are very important for us.

00:14:51.950 --> 00:14:57.170
Which are a field, back, clap, and color.

00:14:57.169 --> 00:15:00.909
The column one is probably the most critical one.

00:15:00.909 --> 00:15:08.879
This is describing how the video is going to be processed
internally by QuickTime and all the rendering tag lengths.

00:15:08.879 --> 00:15:15.549
We define what we call an nclc at home,
which has three information containers.

00:15:15.549 --> 00:15:18.929
The primaries, the transfer function, and the matrix.

00:15:18.929 --> 00:15:27.089
So this is describing, basically, three command crawl
space in the video world which are either NTSC, PAL or HD.

00:15:27.090 --> 00:15:33.019
If you don't use one of the three tags, probably
you're going to run into what people describe

00:15:33.019 --> 00:15:37.539
as gamma shift, brightness issues, stuff like that.

00:15:37.539 --> 00:15:40.949
>> We have a nice floe posted on the Web site called
Ice Floe 19

00:15:40.950 --> 00:15:46.150
which exactly describe how we enter
all this specific value internally.

00:15:48.289 --> 00:15:52.539
Before this nclc we had what we called a gamma tag.

00:15:52.539 --> 00:15:54.730
This is a Legacy tag.

00:15:54.730 --> 00:15:57.879
If you put it in the movie, we will still respect it.

00:15:57.879 --> 00:16:05.179
But if it's fully described by the
nclc we will override it.

00:16:06.679 --> 00:16:12.669
Something else you have to be aware
when you -- in the crawl space.

00:16:12.669 --> 00:16:17.379
Pixels in the computer space are always square.

00:16:17.379 --> 00:16:19.919
Well, they are not in a video space.

00:16:19.919 --> 00:16:23.009
Because basically in the video
space you didn't really have pixels.

00:16:23.009 --> 00:16:24.569
It's coming from some analog lines.

00:16:24.570 --> 00:16:25.930
It depends on how simple.

00:16:25.929 --> 00:16:33.329
And you end up as -- the pixel have a different aspect
ratio and in order to tell QuickTime how to --

00:16:33.330 --> 00:16:39.750
the content should be presented you better make
sure that this information is correct in your file.

00:16:41.090 --> 00:16:46.759
Other concepts that are quite different
from the computer and the video space.

00:16:46.759 --> 00:16:49.429
In the video space they defined what
they call a Clean Aperture,

00:16:49.429 --> 00:16:54.739
which is basically the area that
you want to present to the user.

00:16:54.740 --> 00:17:01.360
And the reason why -- because in the analog space there
was some garbage on the side that they couldn't get right.

00:17:01.360 --> 00:17:06.390
On the computer space all the pixels are well defined.

00:17:06.390 --> 00:17:12.250
You have to make sure that the movie you're getting
into your app does contain this information as well.

00:17:12.250 --> 00:17:17.759
So we present it, properly, to the end user.

00:17:17.759 --> 00:17:18.910
Frame weight.

00:17:18.910 --> 00:17:27.279
Another topic, when this time it's not about video
versus computer, it's not -- video versus QuickTime.

00:17:27.279 --> 00:17:33.149
QuickTime doesn't really have natively
definition of frame rate.

00:17:33.150 --> 00:17:37.380
You can make a movie with any kind of frame duration.

00:17:37.380 --> 00:17:40.170
QuickTime, again, will be happy to deal with that.

00:17:40.170 --> 00:17:43.490
In the video space you're talking
about a constant frame rate.

00:17:43.490 --> 00:17:44.509
Either for

00:17:44.509 --> 00:17:50.589
For film 24fps, for NTSC 29.97 or for PAL 25 fps.

00:17:50.589 --> 00:17:57.209
but QuickTime doesn't have any API interest
to make this movie at this frame rate.

00:17:57.210 --> 00:18:05.079
We can have three frame with a special integration in it,
in the last one which has nothing to do with the other one.

00:18:05.079 --> 00:18:08.589
In the video space they can't live with that.

00:18:08.589 --> 00:18:13.769
When you're going to go back to your device
this last frame will be unmanageable for them.

00:18:13.769 --> 00:18:20.789
It's up to your application to enforce this
policy, because as I said, QuickTime can mix anything.

00:18:20.789 --> 00:18:26.799
You can create a QuickTime Movie with a 24 fps NTSC or PAL source content, we don't care.

00:18:26.799 --> 00:18:33.589
So you have to make sure that you don't
let QuickTime do this fancy stuff.

00:18:33.589 --> 00:18:37.029
So my last slide is about time code.

00:18:37.029 --> 00:18:41.399
We had support for time code in
QuickTime since a long, long time.

00:18:41.400 --> 00:18:47.420
But the reason I put that up there is
that we have a new 64-bit version of it,

00:18:47.420 --> 00:18:51.390
which allows us to support higher
sampling rate for the audio side.

00:18:51.390 --> 00:18:56.440
If you are using it you might consider
switching to the new representation.

00:18:56.440 --> 00:18:59.230
So I am done with the acquisition part.

00:18:59.230 --> 00:19:04.349
Let's have Ken talk to you about the rest of the pipeline.

00:19:06.029 --> 00:19:07.299
Okay?

00:19:08.380 --> 00:19:10.740
( Applause )

00:19:10.740 --> 00:19:12.390
>> Thank you, Jean-Michel.

00:19:12.390 --> 00:19:18.000
So, I work with Jean-Michel in QuickTime, and actually
I work on just these aspects of the QuickTime pipeline.

00:19:18.000 --> 00:19:19.579
The back of the pipeline.

00:19:19.579 --> 00:19:22.059
Rendering, export, and display.

00:19:22.059 --> 00:19:24.539
And this is what I will be talking about today.

00:19:24.539 --> 00:19:29.250
I will be taking us through the next three sections.

00:19:29.250 --> 00:19:31.089
Editing, export, and playback.

00:19:31.089 --> 00:19:32.419
But first edit and render.

00:19:32.420 --> 00:19:35.750
We're going to be looking at these five points.

00:19:35.750 --> 00:19:38.839
And we're going to be covering a lot of territory.

00:19:38.839 --> 00:19:42.059
So we're going to maybe skip around a little bit.

00:19:42.059 --> 00:19:45.049
So first we're going to turn back to Time Scale.

00:19:45.049 --> 00:19:49.579
So Jean-Michel already described Time Scale
to you, so now we'll take a look at some

00:19:49.579 --> 00:19:51.829
of the trade offs you have in Time Scale.

00:19:51.829 --> 00:19:55.099
And like so many things, there really are trade offs.

00:19:55.099 --> 00:19:59.399
So when I describe Time Scale it's a little confusing.

00:19:59.400 --> 00:20:03.500
So if I describe Time Scale as being numerically larger,

00:20:03.500 --> 00:20:07.160
it's really talking about chopping
your second into more and more pieces.

00:20:07.160 --> 00:20:11.710
And that's giving you a finer and
finer granularity for edits.

00:20:11.710 --> 00:20:16.950
And you might say, well, why would you want
any granularity beneath the frame level.

00:20:16.950 --> 00:20:19.620
And that's for a couple of reasons.

00:20:19.619 --> 00:20:28.000
First, Jean-Michel described just how flexible QuickTime
is with respect to durations and what you can do.

00:20:28.000 --> 00:20:32.240
And you can actually do quite a bit
more than what traditional video can do.

00:20:32.240 --> 00:20:36.180
So that's one reason why you might want
to chop things up into finer pieces.

00:20:36.180 --> 00:20:37.960
But also for audio.

00:20:37.960 --> 00:20:44.269
Your audio edits, you might want those
to be -- more fine or more accurate.

00:20:44.269 --> 00:20:46.250
Basically sub frame edits.

00:20:46.250 --> 00:20:54.759
And there are some other things we'll talk about as well.

00:20:54.759 --> 00:20:59.690
So if you look at the bottom of the
display you'll see that there is a movie.

00:20:59.690 --> 00:21:02.400
And that move o is intended to be film.

00:21:02.400 --> 00:21:05.620
And film is 24 frames per second.

00:21:05.619 --> 00:21:11.319
So on the top you'll see a bunch of orange
bars and those are broken into pieces.

00:21:11.319 --> 00:21:18.399
And that shows you the granularity of the possible edits if
you had a Time Scale that corresponded to your frame rate.

00:21:18.400 --> 00:21:20.190
In this case, 24.
$

00:21:20.190 --> 00:21:23.559
So you get one potential edit per frame.

00:21:23.559 --> 00:21:27.509
Now if we multiply by three you get the bottom row.

00:21:27.509 --> 00:21:30.670
And there we see that we have a Time Scale of 72.
r

00:21:30.670 --> 00:21:35.460
And there are three possibly edit points per frame.

00:21:35.460 --> 00:21:39.380
Now there's one particular requirement
that's very important to remember.

00:21:39.380 --> 00:21:44.130
And that is not only does your movie
have a Time Scale associated with it,

00:21:44.130 --> 00:21:47.610
but every piece of media also has a Time Scale.

00:21:47.609 --> 00:21:52.569
So at the very least you have to make sure that
your Time Scale for your movie is as large,

00:21:52.569 --> 00:21:56.250
probably equal to the Time Scale for your media track.

00:21:56.250 --> 00:22:02.940
And if you have more than one media track you want to
make sure that the Time Scale for the movie is a multiple

00:22:02.940 --> 00:22:05.830
of the Time Scales for each of the media tracks.

00:22:05.829 --> 00:22:10.629
Otherwise you won't be able to individually
access frames, and that would be inappropriate.

00:22:10.630 --> 00:22:19.440
I should also mention that the larger the Time Scale
selected the longer the duration of each frame.

00:22:19.440 --> 00:22:23.809
So really, that creates another kind of a limit
that we're going to look at in this next slide.

00:22:23.809 --> 00:22:28.839
And that limit is in the last column, the duration.

00:22:28.839 --> 00:22:36.539
So that the numerically larger your Time Scale
the finer the resolution of things you can index.

00:22:36.539 --> 00:22:42.519
But potentially the shorter the duration
of the entire movie that you can deal with.

00:22:42.519 --> 00:22:47.480
All that said, there's no correct answer
for what is the proper Time Scale.

00:22:47.480 --> 00:22:49.740
These are some that we consider to be proper.

00:22:49.740 --> 00:22:53.039
Most of them are pretty simple.

00:22:53.039 --> 00:22:54.750
64 frames per second.

00:22:54.750 --> 00:22:57.039
6,000 Time Scale.

00:22:57.039 --> 00:22:59.779
The duration for each frame would be 100.

00:22:59.779 --> 00:23:00.680
That makes sense.

00:23:00.680 --> 00:23:06.049
And you can see in that last column that
you have, that's four days worth of movies.

00:23:06.049 --> 00:23:10.669
Now, and that's in a signed 32-bit integer.

00:23:10.670 --> 00:23:12.150
So that seems like a lot.

00:23:12.150 --> 00:23:13.560
And maybe it is.

00:23:13.559 --> 00:23:14.269
Maybe it's not.

00:23:14.269 --> 00:23:16.920
But you can make those your trade offs.

00:23:16.920 --> 00:23:19.950
The one point I want to bring up is for NTSC.

00:23:19.950 --> 00:23:24.930
That's that 29.97 frames per second slide.

00:23:24.930 --> 00:23:29.560
Here there are a lot of ratios
that are used for Time Scales.

00:23:29.559 --> 00:23:32.649
And frankly, most of those are incorrect.

00:23:32.650 --> 00:23:35.460
They are imprecise, they don't give quite the right results.

00:23:35.460 --> 00:23:41.120
And then what will happen is over time when you do an edit
you won't get the frame that you're really expecting.

00:23:41.119 --> 00:23:48.689
So the 3,000 Time Scale with the 1001 duration
is one of the ratios that works out correctly.

00:23:48.690 --> 00:23:51.570
And that comes out of the actual specification.

00:23:51.569 --> 00:23:55.179
Now, a 3,000 Time Scale, it's a pretty large number.

00:23:55.180 --> 00:23:58.600
And sure enough it does use up your duration faster.

00:23:58.599 --> 00:24:04.500
So what you'll see is that we have just under
20 hours of dura tion possible for that movie.

00:24:04.500 --> 00:24:06.329
Which still seems like quite a bit.

00:24:06.329 --> 00:24:10.779
But there are already companies that
just run continuously 24 hours a day.

00:24:10.779 --> 00:24:13.740
So that may or may not be an issue for you.

00:24:13.740 --> 00:24:22.559
So Jean-Michel has already mentioned
the flexibility of QuickTime.

00:24:22.559 --> 00:24:28.399
And also the responsibility as you as professional
video application developers have in sort

00:24:28.400 --> 00:24:33.580
of constraining QuickTime's flexibility
into something that's legal for video.

00:24:33.579 --> 00:24:41.059
So one concept is if you're doing an edit, it only makes
sense in the video world to edit on frame boundaries.

00:24:41.059 --> 00:24:43.839
But QuickTime doesn't have that concept at all.

00:24:43.839 --> 00:24:47.039
And I'll show you a quick animation.

00:24:47.039 --> 00:24:51.750
So you can see that that arrow is smoothing smoothly across.

00:24:51.750 --> 00:24:54.730
And it's not moving completely smoothly.

00:24:54.730 --> 00:25:00.870
But it's jumping by the granularity of our Time Scale.

00:25:00.869 --> 00:25:05.709
But pretty much, it allows us to perform
edits at an arbitrary time within a frame.

00:25:05.710 --> 00:25:11.730
So as I've already mentioned, and I'll show you the
animation will be on the top of this film strip --

00:25:11.730 --> 00:25:15.529
that in the video of the land, you
can only edit at frame boundaries.

00:25:15.529 --> 00:25:18.339
And that's how can we move that in
a sort of a quantatized (sic) way.

00:25:18.339 --> 00:25:23.539
And it's up to you, again, to make sure
that you're doing the proper thing.

00:25:27.029 --> 00:25:32.359
So the next concept that's important to
remember has to do with frame selection.

00:25:32.359 --> 00:25:34.979
And again, I have another animation.

00:25:34.980 --> 00:25:37.210
Maybe I'll bring that up first.

00:25:41.450 --> 00:25:48.650
So here you see as the edit point moves between
basically selecting times specifically that correspond

00:25:48.650 --> 00:25:53.240
to the beginning of one frame and
the ending of the previous frame.

00:25:53.240 --> 00:25:59.759
So you should all remember that within QuickTime, QuickTime
will always choose the frame that's beginning at that time.

00:25:59.759 --> 00:26:04.690
And we represent that here as being selected in orange.

00:26:06.369 --> 00:26:11.569
So Jean-Michel also mentioned data
references and references movies.

00:26:11.569 --> 00:26:17.470
And reference movies are a powerful and
perhaps underutilized concept within QuickTime.

00:26:17.470 --> 00:26:23.690
So pretty much, just a review, it allows you
to have a QuickTime Movie complete with edits

00:26:23.690 --> 00:26:27.390
and compositions and any number of other kind of effects.

00:26:27.390 --> 00:26:30.440
But have all the media be somewhere emphasis.

00:26:30.440 --> 00:26:36.950
That somewhere else could be other movie files, and those
movies files could be basically anywhere on the Internet.

00:26:36.950 --> 00:26:41.150
Which is hugely, hugely flexible.

00:26:41.150 --> 00:26:45.560
Really, allows you to do some interesting thing as well.

00:26:45.559 --> 00:26:48.629
You can have any under of edits.

00:26:48.630 --> 00:26:50.000
I mean, you can keep all of those.

00:26:50.000 --> 00:26:54.130
Because those would be represented
in their own reference movies.

00:26:54.130 --> 00:26:56.940
And those would be really pretty small.

00:26:56.940 --> 00:27:01.009
Each of those movies, again, are going to be small.

00:27:01.009 --> 00:27:06.980
Each of those different edits, basically doesn't effect
your original content at all, your original media.

00:27:06.980 --> 00:27:11.329
So that's how we can say that they
can be done non destructively.

00:27:11.329 --> 00:27:15.289
Now, with that flexibility comes responsibility.

00:27:15.289 --> 00:27:21.079
Being small, you can mail those reference
movies to other engineers, you can back them up.

00:27:21.079 --> 00:27:25.919
But it's really important for either
your application or for your application

00:27:25.920 --> 00:27:28.710
to notify the users of those responsibilities.

00:27:28.710 --> 00:27:33.610
And that is either before handing the
reference movie back out to the end user,

00:27:33.609 --> 00:27:38.069
you want to convert it to a standard
movie using a process we call flattening.

00:27:38.069 --> 00:27:41.679
And basically that brings back in all the media files.

00:27:41.680 --> 00:27:49.039
Or alternately, you want to make sure that your end users
are aware that the reference movie alone isn't complete,

00:27:49.039 --> 00:27:55.069
and that they have to keep the reference -- the
media that's referenced along with that movie.

00:27:55.069 --> 00:27:57.720
So -- powerful, but there are trade offs.

00:27:57.720 --> 00:28:03.319
So, now I'd like to talk about rendering just briefly.

00:28:03.319 --> 00:28:08.089
And rendering is really a process
where you take your content in.

00:28:08.089 --> 00:28:14.449
It's going to be decoded by a codec
basically into a pixel format that we've talked about.

00:28:14.450 --> 00:28:16.519
And we're going to talk about again in a moment.

00:28:16.519 --> 00:28:19.920
And then allows you to do some value add.

00:28:19.920 --> 00:28:23.370
QuickTime can do all sorts of things to those pixels.

00:28:23.369 --> 00:28:28.049
It can apply effects, it can do
competitions, compositing, I should say.

00:28:28.049 --> 00:28:28.769
And other things.

00:28:28.769 --> 00:28:32.220
And it's also another opportunity
for your application to add value.

00:28:32.220 --> 00:28:35.410
Processing it in any manner of ways.

00:28:35.410 --> 00:28:37.370
And then you go back out again.

00:28:37.369 --> 00:28:40.299
Back out to a QuickTime Movie.

00:28:40.299 --> 00:28:45.259
So the point I really want to make
here is that up until QuickTime 7,

00:28:45.259 --> 00:28:51.210
that's the QuickTime that was released
corresponding to the Tiger release.

00:28:51.210 --> 00:28:55.600
Up until that time we were using
this GWorld rendering model.

00:28:55.599 --> 00:28:58.929
So the visual context has replaced that model.

00:28:58.930 --> 00:29:06.490
And if you happen to be using the GWorld model, then
please, it's time to switch off to the visual context model.

00:29:06.490 --> 00:29:10.759
And if you're new to QuickTime, then welcome.

00:29:10.759 --> 00:29:15.700
But this isn't a good time to go and
investigate the GWorld model at all.

00:29:15.700 --> 00:29:23.190
And I should make a plug for one thing that QuickTime is
-- it's an old technology, and it's a mature technology.

00:29:23.190 --> 00:29:28.910
There are a lot of wonderful demos and source
codes up on the Internet and elsewhere.

00:29:28.910 --> 00:29:32.100
Please be very careful when you're
looking at those examples to make sure

00:29:32.099 --> 00:29:35.699
that you're using the latest and best practices.

00:29:35.700 --> 00:29:40.640
So now we're going to take a look at pixel formats.

00:29:40.640 --> 00:29:43.980
And this is actually an area that
we get a lot of questions about.

00:29:43.980 --> 00:29:47.220
And there are some aspects that are a little bit confusing.

00:29:47.220 --> 00:29:50.170
So I am going to talk about two aspects.

00:29:50.170 --> 00:29:52.960
The first is this concept of video range.

00:29:52.960 --> 00:29:55.360
And the next is something called full range.

00:29:55.359 --> 00:29:59.459
Both of those are defined in the Rec. 601 video standard.

00:29:59.460 --> 00:30:06.160
They're pretty much -- that standard talks about how to
take analog video and represent it in a digital space.

00:30:06.160 --> 00:30:15.830
So in terms of video range data, all the legal video values
-- I'm talking about in this case an 8-bit representation.

00:30:15.829 --> 00:30:19.079
So of course, 8-bits, of course,
represents values 0 to 255.

00:30:19.079 --> 00:30:27.480
However, in terms of video range only the
values 16 to 235 contain legal video data.

00:30:29.210 --> 00:30:34.140
The values beneath 16 are actually superblack.

00:30:34.140 --> 00:30:40.100
And superblack is -- it's an old analog video word.

00:30:40.099 --> 00:30:44.169
But pretty much superblacks aren't
used to represent content.

00:30:44.170 --> 00:30:49.160
They're really used for switching
and other kinds of meta purposes.

00:30:49.160 --> 00:30:55.620
The values above 235, 236 to 255,
are what's kUnown as superwhite.

00:30:55.619 --> 00:30:58.829
That's another old analog video concept.

00:30:58.829 --> 00:31:03.960
But in this case, you can have certain
content in the superwhite range.

00:31:03.960 --> 00:31:08.710
Basically, you can have brief excursions
as they say into superwhites.

00:31:08.710 --> 00:31:12.539
Maybe as the camera tracks across
the sun or something like that.

00:31:12.539 --> 00:31:17.759
But at least in the old analog days you were limited to how
much superwhite you could have on the screen at one time.

00:31:17.759 --> 00:31:22.720
Otherwise, your video transmitter might
blow up or your receivers might blow up.

00:31:22.720 --> 00:31:24.329
It was bad.

00:31:24.329 --> 00:31:27.699
It is possible for some content to be out in that format.

00:31:27.700 --> 00:31:37.110
So just to be clear, if you're dealing with pixel
format that's in video range, the value 16 is black.

00:31:37.109 --> 00:31:38.479
It's as black as you can get.

00:31:38.480 --> 00:31:45.210
And that corresponds to, let's say an
RGB full range pixel format's zero.

00:31:45.210 --> 00:31:46.750
And the same with 235.

00:31:46.750 --> 00:31:49.539
235 is really as white as you're going to get.

00:31:49.539 --> 00:31:56.369
And that corresponds to your full range RGB value of 255.

00:31:58.640 --> 00:32:04.160
Now, most of us are computer users and
we feel comfortable in RGB formats.

00:32:04.160 --> 00:32:12.680
But they can cause pieces of confusion as you import and
export through RGB, basically, it's not without a loss.

00:32:12.680 --> 00:32:15.340
It's not without repercussions.

00:32:15.339 --> 00:32:21.789
So the most important one, perhaps, to some
at least, is that there is a potential.

00:32:21.789 --> 00:32:27.700
And actually, you can and will lose your
superblacks and superwhites as you convert

00:32:27.700 --> 00:32:32.569
from a video format into a full range RGB format.

00:32:32.569 --> 00:32:35.369
And also you can introduce artifacts.

00:32:35.369 --> 00:32:37.099
I'll go into details in a moment.

00:32:37.099 --> 00:32:40.659
But these artifacts are typically called contouring.

00:32:40.660 --> 00:32:46.080
Pretty much if you have a gradient,
maybe it's somebody's face.

00:32:46.079 --> 00:32:49.500
You can see areas that look like they're equivalent.

00:32:49.500 --> 00:32:51.819
It's also called posterization

00:32:51.819 --> 00:32:54.319
It's not the best possible effect.

00:32:54.319 --> 00:32:55.829
There are ways to mitigate it.

00:32:55.829 --> 00:32:59.009
But you see should be aware of this.

00:32:59.009 --> 00:33:08.039
So if we go from your video range, our video
values, 16 to 235 gets stretched out to 0 to 255.

00:33:08.039 --> 00:33:14.789
And the areas that were superblack and
superwhite now are not representable.

00:33:14.789 --> 00:33:18.639
You'll see that we make those areas disappear.

00:33:18.640 --> 00:33:21.530
And we've introduced these black bars.

00:33:21.529 --> 00:33:24.930
And these black bars are what I call stretch marks.

00:33:24.930 --> 00:33:31.410
If you think about it, if you had a perfect gradient,
basically a gradient that increased by one value

00:33:31.410 --> 00:33:38.970
between the 16 and 235 range and you stretch it
out to 0 to 255, that gradient is going to have to --

00:33:38.970 --> 00:33:40.980
if it's in the same quantitization, I should say.

00:33:40.980 --> 00:33:44.620
It started out as 8-bits and you wound up at 8-bits --

00:33:44.619 --> 00:33:48.939
the only thing you can do is every
once in a while repeat a value.

00:33:48.940 --> 00:33:52.380
And those I have represented as those black lines.

00:33:52.380 --> 00:33:57.800
And those do and will show up as contouring in your image.

00:33:57.799 --> 00:34:03.079
Now if we take our full range RGB
data and squish it back down again,

00:34:03.079 --> 00:34:09.429
we're switching the value 255 into the value of 16 to 235.

00:34:09.429 --> 00:34:12.719
And I'm drawing these white bars now.

00:34:12.719 --> 00:34:14.579
And I call those wrinkles.

00:34:14.579 --> 00:34:16.690
And there you get the same kind of effect.

00:34:16.690 --> 00:34:23.929
If you had that gradient that only skipped by one
from the value of 0 to 255, then every once in a while

00:34:23.929 --> 00:34:28.739
when you had squozen (sic) it into 16 to 235,
instead of skipping by one by one by one,

00:34:28.739 --> 00:34:32.369
even once in a while it's going
to go one by one by two -- by one.

00:34:32.369 --> 00:34:35.529
And those also create visual artifacts.

00:34:35.530 --> 00:34:43.519
And the last point as you can see by the dotted lines
around the video range is that even though you're

00:34:43.519 --> 00:34:48.619
in video range again, representation,
pixel format that does support superblacks

00:34:48.619 --> 00:34:53.130
and superwhites, that there's no information to fill in.

00:34:53.130 --> 00:34:55.329
Because the RGB format didn't have it.

00:34:55.329 --> 00:34:58.920
So these values basically will never be used.

00:34:58.920 --> 00:35:06.119
So there's also an issue of color and color gamma.

00:35:06.119 --> 00:35:09.469
What you see here are two representations.

00:35:09.469 --> 00:35:16.589
You see the NTSC, and actually I believe
that's NTSC 1953 for those who are astute.

00:35:16.590 --> 00:35:22.720
And there's also the generic RGB
color proceed file displayed as well.

00:35:22.719 --> 00:35:28.929
So that interesting looking chart that its
displayed on is basically the C I E space

00:35:28.929 --> 00:35:33.169
that defines all colors that are humanly visible.

00:35:33.170 --> 00:35:38.559
And one of these color spaces is defined
by what are known as the primaries.

00:35:38.559 --> 00:35:47.059
Back in the old days of C R Ts, those were defined
by the phosphors for the R, G, and B colors.

00:35:47.059 --> 00:35:49.559
I know it's a little difficult to make out.

00:35:49.559 --> 00:35:56.009
But you can probably see red, green, and
blue Xs at the vertices of the triangles.

00:35:56.010 --> 00:36:03.050
And you can probably see that the NTSC and
the generic RGB, again, aren't the same size.

00:36:03.050 --> 00:36:03.800
I'll zoom this in.

00:36:03.800 --> 00:36:05.300
It makes it a little bit easier to see.

00:36:05.300 --> 00:36:10.180
Please remember that the blue is the
NTSC and the red is the generic RGB.

00:36:10.179 --> 00:36:13.109
And now I'll combine them for you.

00:36:13.110 --> 00:36:21.920
And here you can see that there are fairly large areas from
the NTSC that just aren't representable in the RGB space.

00:36:21.920 --> 00:36:30.050
And also there are smaller areas that were openly in the
RGB space that are not representable in the NTSC space.

00:36:30.050 --> 00:36:34.920
And there are a lot of things that can
happen depending on the exact nature

00:36:34.920 --> 00:36:39.250
of the scular space manipulations that you do.

00:36:39.250 --> 00:36:43.599
But pretty much, you get some sort of
clamping or squashing of the gammas.

00:36:43.599 --> 00:36:50.630
So the point here to remember is that if you take a round
trip through RGB space, potentially you're going to lose

00:36:50.630 --> 00:36:54.200
or change the characteristics of your colors.

00:36:55.690 --> 00:36:58.809
So back to our professional video pipeline.

00:36:58.809 --> 00:37:08.320
We're going to continue on with
expert and look at these three points.

00:37:08.320 --> 00:37:15.370
So QuickTime when you export can and will
automatically apply color space conversions for you.

00:37:16.449 --> 00:37:20.589
The most common place that this
happens is if you change sizes.

00:37:20.590 --> 00:37:29.660
If you go between an HD image -- and most all HD
representations are in the rec. 709 color space.

00:37:29.659 --> 00:37:33.299
And let's say you export to an SD size.

00:37:33.300 --> 00:37:44.470
Most SD representations are NTSC and the more professional
way to describe NTSC space as the SMPTE C,

00:37:44.469 --> 00:37:48.449
or sometimes you'll see it as the 170 M space.

00:37:48.449 --> 00:37:57.619
So in the example here, if you take a DV 100 source, and
DV 100 is an HD codec, and you export that using QuickTime

00:37:57.619 --> 00:38:04.429
to the H.264 codec, but at a
640 x 40 size, th@at's an SD size,

00:38:04.429 --> 00:38:06.739
then you're going to get an automatic
color space conversion.

00:38:06.739 --> 00:38:15.909
You're going to go from rec. 709 to 170 M. The second
place that you'll get an automatic color conversion is

00:38:15.909 --> 00:38:20.949
if your export codec has basically
a well-defined color space.

00:38:20.949 --> 00:38:24.299
In our example we're going to talk about DV.

00:38:24.300 --> 00:38:27.140
Don't confuse DV with DV 100.

00:38:27.139 --> 00:38:30.099
DV is either NTSC or PAL.

00:38:30.099 --> 00:38:32.309
Let's call it NTSC in this case.

00:38:32.309 --> 00:38:39.730
So that if you were exporting something that
was in HD Rec. 709 color space to the DV codec,

00:38:39.730 --> 00:38:47.400
then QuickTime automatically is going to perform the color
space conversion to make it legal and valid for that codec.

00:38:48.690 --> 00:38:51.610
Now we do have a concept that we call color space agnostic.

00:38:51.610 --> 00:38:58.180
The H.264 is probably the best example
of a codec that's color space agnostic.

00:38:58.179 --> 00:39:04.679
That it will accept either the HD Rec. 709
or the SD SMPTE C color space.

00:39:04.679 --> 00:39:15.989
So when you export to H.264 there won't be an
automatic color space conversion for the codec itself.

00:39:15.989 --> 00:39:17.250
Possibly for the size.

00:39:17.250 --> 00:39:21.889
But not just going to the codec.

00:39:21.889 --> 00:39:26.509
Now some of our newest codecs automatically tag for you.

00:39:26.510 --> 00:39:28.320
Jean-Michel described tagging.

00:39:28.320 --> 00:39:31.550
He mentioned Dumpster and some of these tags.

00:39:31.550 --> 00:39:34.670
And all I can say is the best thing for you folks to do is

00:39:34.670 --> 00:39:39.220
to understand what codecs you're
using, and what their behaviors are.

00:39:39.219 --> 00:39:41.959
And the best way to do that is to use Dumpster.

00:39:41.960 --> 00:39:47.059
So go export your content, and
then examine it using Dumpster.

00:39:47.059 --> 00:39:51.880
Frankly, look at your source content in Dumpster
to make sure that you're getting tags of the

00:39:51.880 --> 00:39:57.820
and the tags are what you want and expect them to be.

00:39:57.820 --> 00:40:04.500
So one thing that's a little bit maybe
non intuitive is that the aperture mode.

00:40:04.500 --> 00:40:09.070
And we're going to talk about aperture mode
a little bit when we talk about display.

00:40:09.070 --> 00:40:14.400
But aperture mode, the aperture mode of
your movie will expect -- excuse me --

00:40:14.400 --> 00:40:18.740
will influence what you get when you export.

00:40:18.739 --> 00:40:24.509
So in this case we're going to look at the example
of taking a piece of DV content and exporting it

00:40:24.510 --> 00:40:29.400
to the uncompressed codec, which
is also called the 2 vy codec.

00:40:29.400 --> 00:40:32.160
In two different aperture modes.

00:40:32.159 --> 00:40:36.489
So this is our content displayed in clean aperture mode.

00:40:36.489 --> 00:40:43.129
And you can't tell, but in the non clean aperture
region we have two fuchsia bars on either side.

00:40:43.130 --> 00:40:45.090
And we'll see those in a little bit.

00:40:45.090 --> 00:40:52.180
But if we were to take this movie and export it while
it's in clean aperture mode -- they get this result.

00:40:52.179 --> 00:40:53.949
Which looks very much the same.

00:40:53.949 --> 00:40:59.480
Basically, it's the clean aperture content in the new file.

00:40:59.480 --> 00:41:00.639
And two things happen.

00:41:00.639 --> 00:41:04.239
One is the non-clean aperture content.

00:41:04.239 --> 00:41:08.189
Those fuchsia bars that you can't
see aren't there in the new movie.

00:41:08.190 --> 00:41:09.909
They're just not there at all.

00:41:09.909 --> 00:41:16.339
Whereas if we were to take the source movie and change
its aperture mode you would see those fuchsia bars.

00:41:16.340 --> 00:41:20.269
Changing the aperture mode on the
resulting movie won't have any effect.

00:41:20.269 --> 00:41:21.719
It's gone.

00:41:21.719 --> 00:41:28.359
The other thing to know is that the result
of the export is actually to a square pixel.

00:41:28.360 --> 00:41:31.250
So your pixel aspect ratio is changed.

00:41:31.250 --> 00:41:34.780
That's a conversion and a process
that's been applied to your movie.

00:41:34.780 --> 00:41:38.600
So you should understand that your
movie has been profoundly altered.

00:41:38.599 --> 00:41:42.500
In more ways that in the nature of the compression.

00:41:42.500 --> 00:41:48.789
Now if we instead look at our source movie in the
encoded pixels aperture mode, and that's an aperture mode

00:41:48.789 --> 00:41:52.889
where you see all the content, and you
can see that our fuchsia bars are back.

00:41:52.889 --> 00:41:54.699
And you export that.

00:41:54.699 --> 00:42:01.119
Then you get a result where all the pixels are
maintained and there's been no aspect ratio change.

00:42:01.119 --> 00:42:09.509
So now we'll look at the last stage
of the professional video pipeline.

00:42:09.510 --> 00:42:10.800
Which is playback.

00:42:10.800 --> 00:42:15.980
And playback is actually pretty sophisticated,
so we'll spend a little bit of time with it.

00:42:17.429 --> 00:42:21.179
So we'll return again to look at
aperture mode as I promised.

00:42:21.179 --> 00:42:28.559
And one of the themes we have for this
talk is that tagging is really critical.

00:42:28.559 --> 00:42:34.289
In this case, aperture modes are
dependent on the pasp and the clap tags.

00:42:34.289 --> 00:42:41.869
Where pasp is the pixel aspect ratio, and clap is
clean aperture, in case those haven't been defined yet.

00:42:41.869 --> 00:42:47.659
So aperture modes, those were defined
in the SMPTE 187 standard.

00:42:47.659 --> 00:42:49.629
And there are three of them.

00:42:49.630 --> 00:42:57.059
Pretty much the encoded pixel and the production
aperture modes are intended for professional use.

00:42:57.059 --> 00:42:58.340
We'll talk about those in a moment.

00:42:58.340 --> 00:43:01.470
And then there's a third called the clean aperture mode.

00:43:01.469 --> 00:43:05.269
And that's really what the end user really wants to see.

00:43:05.269 --> 00:43:07.480
And again, we'll show that as well.

00:43:07.480 --> 00:43:10.210
To that, in QuickTime, we add a fourth mode.

00:43:10.210 --> 00:43:11.630
Which we call classic.

00:43:11.630 --> 00:43:16.289
And classic is what you get when the content isn't tagged.

00:43:16.289 --> 00:43:19.759
And it's one of the reasons you do want to tag content.

00:43:21.769 --> 00:43:28.259
So to begin with, I will quickly show
you how to manipulate aperture modes

00:43:28.260 --> 00:43:32.160
so you can see what your content actually
will look like in each of these modes.

00:43:32.159 --> 00:43:36.089
This is actually QT player's property panel.

00:43:36.090 --> 00:43:48.690
And you can bring that up by just typing Command J. So
if you select the video track, the presentation tab,

00:43:48.690 --> 00:43:56.450
and you click the conform aperture mode to
check box, then you get a drop down list

00:43:56.449 --> 00:43:59.500
with the four different modes that you can select between.

00:43:59.500 --> 00:44:02.360
So let's go back.

00:44:02.360 --> 00:44:07.190
This is the same DV movie that we
already looked at in the export example.

00:44:07.190 --> 00:44:13.389
So clean classic aperture mode, again,
that's what you get for untagged content.

00:44:13.389 --> 00:44:18.769
Pretty much we're picking up the
dimensions from the track dimensions.

00:44:18.769 --> 00:44:21.059
This isn't information that's coming from the codec.

00:44:21.059 --> 00:44:24.820
This is just the way QuickTime had
done this since the dawn of time.

00:44:24.820 --> 00:44:27.960
And pretty much there's no processing at all applied.

00:44:27.960 --> 00:44:34.659
You get all the pixels, no aspect ratio correction,
and this is what you had before QuickTime 7.

00:44:37.610 --> 00:44:42.519
You can see the fuchsia bars that I have circled.

00:44:42.519 --> 00:44:51.489
And zooming in to the corner you can see that the
non-clean aperture region actually has pretty much garbage.

00:44:51.489 --> 00:44:55.879
In fact, garbage could come from your
camera, it could come from the codec.

00:44:55.880 --> 00:44:59.750
But it's really content that's not
necessarily intended to be seen.

00:44:59.750 --> 00:45:02.380
Certainly not intended to be seen by the end user.

00:45:02.380 --> 00:45:07.230
Next, the encoded pixels aperture mode.

00:45:07.230 --> 00:45:08.619
That's a mouthful.

00:45:08.619 --> 00:45:12.369
So you can see that we're at 720 x 480 resolut ion.

00:45:12.369 --> 00:45:15.119
We can compare that to these other ones.

00:45:15.119 --> 00:45:19.609
This is one of the modes I already
mentioned that the professional may want.

00:45:19.610 --> 00:45:23.190
Basically you get all the pixels and no aspect correction.

00:45:23.190 --> 00:45:24.159
It looks like this.

00:45:24.159 --> 00:45:30.339
And as you can see, it looks distorted,
and you get the fuchsia bars.

00:45:30.340 --> 00:45:36.300
But for the professional you may want to see
it without any additional QuickTime processing.

00:45:36.300 --> 00:45:40.010
I will bring up some calipers so we
can actually see how distorted it is.

00:45:40.010 --> 00:45:44.070
I'm not sure on the nature of the
projector if this is clear or not.

00:45:44.070 --> 00:45:51.750
But you can see here that you have it being 390
pixels wide, but I think only 254 vertically.

00:45:51.750 --> 00:45:53.340
So it's not square.

00:45:53.340 --> 00:45:58.260
Or at least it doesn't look round, if you
were to look at it on a square-pixel display.

00:45:58.260 --> 00:46:06.110
If you were looking at it on an 11 x 10
ratio, analog monitor, then it will look fine.

00:46:06.110 --> 00:46:08.180
So production aperture mode.

00:46:08.179 --> 00:46:11.079
This is the second of the professional modes.

00:46:11.079 --> 00:46:13.000
You get the fuchsia bars.

00:46:13.000 --> 00:46:16.349
But in this case you get the aspect ratio corrected.

00:46:16.349 --> 00:46:22.069
So depending on what your purposes are, and what
the purposes you anticipate your end users using,

00:46:22.070 --> 00:46:24.160
you may want to be in either of these modes.

00:46:24.159 --> 00:46:29.909
Or you may allow the user to select between them.

00:46:29.909 --> 00:46:33.489
And finally, clean aperture mode.

00:46:33.489 --> 00:46:38.989
Now we're down to 640 bx 680, which is
less than the previous dimensions we saw.

00:46:38.989 --> 00:46:42.359
Because not only have we corrected for the aspect ratio,

00:46:42.360 --> 00:46:47.510
but now we've removed those fuchsia
bars, the non-clean aperture areas.

00:46:47.510 --> 00:46:49.590
And we're doing all the processing to this.

00:46:49.590 --> 00:46:54.829
We're doing the aspect correction and
we're removing the non-clean aperture.

00:46:54.829 --> 00:47:00.069
I should mention -- this is important -- that
this is the default for all tagged content.

00:47:00.070 --> 00:47:04.539
We display all tagged content in clean aperture mode.

00:47:04.539 --> 00:47:15.420
And you can see if we bring up our calipers that we
actually get a truly round object, 354 x 354 pixels.
T

00:47:15.420 --> 00:47:27.349
So next we're going to talk about QuickTime and
sort of described as being color-spaced aware.

00:47:27.349 --> 00:47:31.009
This is a relatively new feature from QuickTime 7.

00:47:31.010 --> 00:47:38.400
And there's a lot of confusion about it, so
I am going spend a couple few slides on this.

00:47:38.400 --> 00:47:44.570
Pretty much what our intention is to
provide consistent color across displays.

00:47:44.570 --> 00:47:46.150
That's what the slide says.

00:47:46.150 --> 00:47:51.800
But really what that means is we're going to
obey the rendering intent of the source media.

00:47:51.800 --> 00:48:02.440
The source media is in the rec. 709 space, then
when it's viewed on a true rec. 709 HD monitor,

00:48:02.440 --> 00:48:05.599
let's say a professional monitor,
it's going to look a certain way.

00:48:05.599 --> 00:48:14.380
Here, QuickTime is using ColorSync technologies to try to
make the result on whatever display you happen to be using

00:48:14.380 --> 00:48:17.519
as close of an analog to that as possible.

00:48:17.519 --> 00:48:20.969
And it does that using two mechanisms.

00:48:20.969 --> 00:48:24.789
The first is the color tag and
as Jean-Michel already mentioned,

00:48:24.789 --> 00:48:28.369
you can specify the color space
of your content using that tag.

00:48:28.369 --> 00:48:31.029
So that's the rendering intent that I mentioned.

00:48:31.030 --> 00:48:38.560
And the second is that we used ColorSync to match
that rendered intent to your display profile.

00:48:38.559 --> 00:48:42.489
So we're going to look at this
a little bit more closely too.

00:48:42.489 --> 00:48:49.009
You're familiar that by default Apple,
Macintosh, display buffers are at a 1.8 gamma.

00:48:49.010 --> 00:48:54.360
But there are all sorts of color
characteristics that differ between the models.

00:48:54.360 --> 00:49:02.960
And it's through the display profile, the color scheme
display profile, that we figure out what to match to.

00:49:02.960 --> 00:49:08.619
So this is where things get really confusing.

00:49:08.619 --> 00:49:11.889
And this is where I get a lot of
people talking to me personally.

00:49:11.889 --> 00:49:15.210
Pretty much, interpreting color is really difficult.

00:49:15.210 --> 00:49:19.220
So the standard way to do that is
to use what you see on the display.

00:49:19.219 --> 00:49:23.439
Which are 75 percent SMPTE color bars.

00:49:23.440 --> 00:49:28.420
That's the standard that's been used for quite a long time.

00:49:28.420 --> 00:49:31.970
But that SMPTE standard is simply an analog standard.

00:49:31.969 --> 00:49:38.099
It was defined quite a long time ago --
long time before digital representations.

00:49:38.099 --> 00:49:42.389
If you crunch all the math, and
again, this is an 8-bit space,

00:49:42.389 --> 00:49:51.889
you will figure out that those 75 percent
leveuls correspond to a 191 out of 255 value.

00:49:51.889 --> 00:49:57.559
And that is if your RGB space is in that native space.

00:49:57.559 --> 00:50:02.179
So if this is -- let's say there
are SD bars in the SMPTE C space.

00:50:02.179 --> 00:50:06.649
Then this would be in an RGB space,
it's also a SMPTE C space.

00:50:06.650 --> 00:50:11.260
Basically the same RGB primaries.

00:50:11.260 --> 00:50:20.810
So the white bar would be 191, 191, 191, the
same odd percent, magenta bar 191, 0, 191.

00:50:22.030 --> 00:50:26.600
Unfortunately, or maybe fortunately, because
we're doing a lot of processing for you.

00:50:26.599 --> 00:50:29.099
Digital color meter will give you another answer.

00:50:29.099 --> 00:50:33.319
So at least on my monitor -- this is on my MacBook.

00:50:33.320 --> 00:50:35.700
I actually read back different values.

00:50:35.699 --> 00:50:40.879
I actually read back 187, 22, 193 for magenta.

00:50:40.880 --> 00:50:47.150
Which is if you think about it considerably
different than the 191, 0, 191 we were expecting.

00:50:47.150 --> 00:50:49.440
I would say it different in two ways.

00:50:49.440 --> 00:50:52.920
One is that -- certainly that red value is low.

00:50:52.920 --> 00:50:55.289
It's not 191.

00:50:55.289 --> 00:51:04.519
And then maybe in a more confusing way we have 22 --
that's 22" units out of 255 energy in the green channel.

00:51:04.519 --> 00:51:10.030
When really we're expecting nothing
in the green channel from magenta.

00:51:10.030 --> 00:51:13.260
So that's -- that's a bit of a mystery.

00:51:13.260 --> 00:51:18.800
Well, the good news is that this
response is actually correct.

00:51:18.800 --> 00:51:27.450
That it's actually QuickTime in conjunction with ColorSync
trying to make these color bars to appear to you visually

00:51:27.449 --> 00:51:31.529
to be as correct as possible on whatever monitor you have.

00:51:31.530 --> 00:51:35.710
And frankly, using the calibration that
you may have performed on that monitor.

00:51:35.710 --> 00:51:39.840
And not to get the right values when you
read them back out of the pixel buffer.

00:51:39.840 --> 00:51:43.410
So that pixel buffer isn't there for inspection.

00:51:43.409 --> 00:51:48.559
It's really there to produce the appropriate response.

00:51:48.559 --> 00:51:51.489
So these are some of the points.

00:51:51.489 --> 00:51:56.369
And I can spend easily an entire talk just describing these.

00:51:56.369 --> 00:51:59.339
But these are some of the things
that are going on under the hood.

00:51:59.340 --> 00:52:04.460
And chances are there's more going
on there than you are aware of.

00:52:04.460 --> 00:52:10.470
So I already mentioned that by default
the frame buffer is at a 1.8 level.

00:52:10.469 --> 00:52:16.230
So because it's at a 1.8 level and not video's native 2.2,

00:52:16.230 --> 00:52:19.880
then you would expect those 191
energy levels to be somewhat lower.

00:52:19.880 --> 00:52:22.170
And that is indeed what we see

00:52:22.170 --> 00:52:27.639
So already we're not expecting that 191, 191, 191 value.

00:52:28.880 --> 00:52:34.059
So I should mention that QuickTime does
use the display profile that's on record.

00:52:34.059 --> 00:52:40.480
And that means if your professional users actually manually
calibratee their monitors, we're going to be using

00:52:40.480 --> 00:52:43.690
and syncing to the display profile that they've created.

00:52:43.690 --> 00:52:45.429
Which is a very good thing.

00:52:45.429 --> 00:52:53.429
And if they've decided to move their pixel buffer off of
1.8, maybe to the 2.2 level, then we're going to use that.

00:52:53.429 --> 00:52:54.869
Which is also a very good thing.

00:52:54.869 --> 00:52:59.500
And I think it answers questions that
I've heard from a bunch of people.

00:52:59.500 --> 00:53:03.940
Now one thing that you may not know is
that there's actually a piece of hardware

00:53:03.940 --> 00:53:07.480
between your frame buffer and the actual display.

00:53:07.480 --> 00:53:11.889
Because old C R Ts really aren't at a 2.2 level.

00:53:11.889 --> 00:53:15.009
They're more at a 2.5, 2.6 range.

00:53:15.010 --> 00:53:17.650
LCDs are at an even different level.

00:53:17.650 --> 00:53:25.789
So there's actually a 2-D look up table that provides
the mapping between what that buffer is advertised

00:53:25.789 --> 00:53:30.210
as being, and what the actual hardware is.

00:53:30.210 --> 00:53:37.400
So really, it means that the pixel values you read
back from the buffer are not the actual pixel values

00:53:37.400 --> 00:53:40.320
that actually go out to the output hardware.

00:53:40.320 --> 00:53:48.690
So another aspect is that those pixels that you're reading
out of that buffer, they've been already through ColorSync.

00:53:48.690 --> 00:53:52.000
And that's why the colors aren't pure.

00:53:52.000 --> 00:53:53.489
And that's what I call pure.

00:53:53.489 --> 00:53:58.709
In this case, it's really where
we got the green energy magenta.

00:53:58.710 --> 00:54:00.990
The example I use here is red.

00:54:00.989 --> 00:54:05.789
That if you were looking at, say,
SMPTE C, 75 percent red bar,

00:54:05.789 --> 00:54:10.159
you would be expecting only energy in the red component.

00:54:10.159 --> 00:54:15.339
But if you were to read that value back you may
see that you have energy in the green or the blue.

00:54:15.340 --> 00:54:17.970
And that's just the mathematics of ColorSync.

00:54:17.969 --> 00:54:22.299
Trying to make that color appear to you
as close as possible to what it would look

00:54:22.300 --> 00:54:26.000
like if it was displayed on the true broadcast monitor.

00:54:26.000 --> 00:54:33.110
Now the implications for what I
just mentioned are kind of profound.

00:54:34.150 --> 00:54:38.030
The way ColorSync term determines
the profile is actually dynamic.

00:54:38.030 --> 00:54:41.900
ColorSync reads a serial number off that display device.

00:54:41.900 --> 00:54:48.639
So even if you had a pair of cinema displays sitting next
to each other, same size, apparently the same model --

00:54:48.639 --> 00:54:52.960
those may actually have different serial numbers,
they could have been made by a different manufacturer,

00:54:52.960 --> 00:54:56.900
come off a different production run, have
slightly different color characteristics.

00:54:56.900 --> 00:55:01.599
The good news is ColorSync is going to
automatically create the correct profile for each.

00:55:01.599 --> 00:55:06.929
Perhaps the bad news for you trying to
analyze your data using digital color meter is

00:55:06.929 --> 00:55:14.559
that if you're displaying the same image on two monitors
you're going to get potentially different values read back.

00:55:14.559 --> 00:55:20.639
And certainly, if you're looking at it on two
different machines, then it's really not comparable.

00:55:20.639 --> 00:55:23.190
So please don't compare those values.

00:55:23.190 --> 00:55:29.059
Or if you want to talk to me at the lab tomorrow I can tell
you some tricks you can use to allow you to do just that.

00:55:29.059 --> 00:55:34.130
And finally, we get a lot of questions
about what I call Legacy applications.

00:55:34.130 --> 00:55:37.309
And right now there are a lot of Legacy applications.

00:55:37.309 --> 00:55:43.369
And in this case, I mean that to say that there
are video applications that are not ColorSynced.

00:55:43.369 --> 00:55:50.710
They're not ColorSynced, they don't follow the same
characteristics, they're going to give you different result.

00:55:50.710 --> 00:55:53.730
And on top of that they tend to make assumptions.

00:55:53.730 --> 00:55:59.130
So one assumption they make is
video gamma is actually 2.2 exactly.

00:55:59.130 --> 00:56:08.099
And that the proper way to display that content is
to do sort of the inverse 2.2 to 1.8 display mapping.

00:56:08.099 --> 00:56:13.349
And that doesn't really follow true video engineering
guidelines, where you're probably are going

00:56:13.349 --> 00:56:17.380
to use a more complicated representation
for the reconstruction filter.

00:56:17.380 --> 00:56:23.670
Incidentally, QuickTime uses for the purposes
of reconstruction a 1.961 gamma value.

00:56:23.670 --> 00:56:27.579
And again, if you have questions
about that come see me tomorrow.

00:56:27.579 --> 00:56:34.489
The other assumption that's made is that the buffer,
the display buffer, is always at a 1.8 gamma.

00:56:34.489 --> 00:56:37.500
And that simply is mot the case.

00:56:37.500 --> 00:56:44.349
Anybody that has done a custom calibration of
their monitor may have set it to another value.

00:56:44.349 --> 00:56:48.759
And then they're going to get some
very interesting and peculiar values.

00:56:48.760 --> 00:56:53.920
So the next topic is the visual context.

00:56:53.920 --> 00:56:59.860
And I should say that if you're using visual context,
that's really where all our efforts are placed

00:56:59.860 --> 00:57:05.550
to give you basically as accurate results as possible.

00:57:05.550 --> 00:57:12.860
It's through the visual context that you get the aperture
modes implemented, it's through the visual context

00:57:12.860 --> 00:57:22.079
and Core Video that you get correct HD Rec. 709
up loads so that your 709 colors look correct.

00:57:25.039 --> 00:57:29.639
So some of you may be using GWorld
or thinking about using GWorld.

00:57:29.639 --> 00:57:31.879
You really should avoid those.

00:57:31.880 --> 00:57:38.490
GWorld are based on QuickDraw, I am sure that all of you
have heard by now that QuickDraw has long been deprecated.

00:57:38.489 --> 00:57:45.009
Additionally, as I sort of alluded to,
the GWorld colors are simply incorrect.

00:57:45.010 --> 00:57:50.350
I should also mention that the visual context is
actually GPU accelerated and you get all sorts

00:57:50.349 --> 00:57:53.199
of wonderful processing, largely for free.

00:57:53.199 --> 00:58:01.199
So you get chroma filtering and some other effects that
we're not really going to talk about in this presentation.

00:58:01.199 --> 00:58:04.250
So visual context does come at a cost.

00:58:04.250 --> 00:58:07.809
You may have to implement or reimplement parts of your code.

00:58:07.809 --> 00:58:10.400
If you want to avoid the complexities, really,

00:58:10.400 --> 00:58:16.639
the simplest way to get the visual
context is to use QTKit's QTMovieView.

00:58:16.639 --> 00:58:23.239
And if you recall way back when Jean-Michel first
introduced the visual context he displayed a diagram

00:58:23.239 --> 00:58:25.299
that looks similar to the one I am showing.

00:58:25.300 --> 00:58:29.690
But QTMovieView replaces that
whole entire center part for you.

00:58:29.690 --> 00:58:37.880
If you're interested in more about QTKit, there's
a talk coming up in the same room in a little bit.

00:58:40.409 --> 00:58:49.089
So, to summarize, you can create really wonderful,
professional video applications using QuickTime.

00:58:49.090 --> 00:58:51.280
But you have to do a number of things.

00:58:51.280 --> 00:58:57.400
One is you have to really take very special care to
-- I say on the slide manage QuickTime's flexibility.

00:58:57.400 --> 00:59:02.240
But I think part of that responsibility
is to understand what QuickTime does,

00:59:02.239 --> 00:59:07.419
and also understand what you need
in the professional video space.

00:59:07.420 --> 00:59:12.539
The single most important thing to do is make
sure that all your content is properly tagged.

00:59:12.539 --> 00:59:19.420
As Jean-Michel stated, you really don't want QuickTime
to guess, because often it's going to guess wrong.

00:59:19.420 --> 00:59:22.639
To that end, Dumpster is really your friend.

00:59:22.639 --> 00:59:32.989
You can take that content, drag it on to Dumpster and
actually look to tell what tags are set and how they're set.

00:59:32.989 --> 00:59:35.609
And also, please use best practices.

00:59:35.610 --> 00:59:39.579
That really is using the visual context.

00:59:40.780 --> 00:59:44.960
So there are two labs I want you to be aware of.

00:59:44.960 --> 00:59:47.730
Tomorrow morning is the QuickTime video lab.

00:59:47.730 --> 00:59:49.610
Jean-Michel and myself will be there.

00:59:49.610 --> 00:59:52.849
As well as some members of our team.

00:59:52.849 --> 00:59:58.239
That's really the best place to get into the
really detailed questions that I am sure you have.

00:59:58.239 --> 01:00:03.519
It looks like we're going to have some time for
Q&A. So we'll be able to field some now.

01:00:03.519 --> 01:00:06.659
Also, there's a pro applications technology lab.

01:00:06.659 --> 01:00:07.949
That's Friday afternoon.

01:00:07.949 --> 01:00:12.669
And that will be your opportunity to
talk to David Black in depth as well.

01:00:12.670 --> 01:00:17.119
We do have more information online.

01:00:17.119 --> 01:00:20.069
The best place to find this information
-- and you don't have to copy this down,

01:00:20.070 --> 01:00:23.530
I am sure you all have it -- is at the attendee Web site.

01:00:23.530 --> 01:00:28.610
And another really wonderful reference is the Ice Floe 19.

01:00:28.610 --> 01:00:30.960
You can try to copy down the URL.

01:00:30.960 --> 01:00:35.159
The easiest way to get that information,
though, is just to Google Ice Floe 19.

01:00:35.159 --> 01:00:40.699
Please remember that we're remember that
we're spelling flow F L O E, and not O W.