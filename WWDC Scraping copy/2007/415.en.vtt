WEBVTT

00:00:13.050 --> 00:00:13.700
Hello.

00:00:13.730 --> 00:00:16.960
Welcome to session 415,
Mastering the Quartz Composer Editor.

00:00:17.010 --> 00:00:18.840
As I was just introduced,
my name's Nathan Wertman.

00:00:18.840 --> 00:00:21.240
We've got a bunch of
things to cover today,

00:00:21.290 --> 00:00:22.480
so let's just go ahead and jump right in.

00:00:22.500 --> 00:00:24.950
There seems to have
been a bit of a snafu.

00:00:24.950 --> 00:00:27.330
This session was marked as a hands-on.

00:00:27.330 --> 00:00:29.430
The assets weren't available,
so I'm just going to go

00:00:29.430 --> 00:00:30.700
through and demo everything.

00:00:30.700 --> 00:00:33.010
If you guys could just follow along,
that would be great.

00:00:33.020 --> 00:00:36.430
The first demo is going to be new
Quartz Composer Editor features.

00:00:36.440 --> 00:00:40.020
We've added a whole bunch of things
to make content creation easier.

00:00:41.070 --> 00:00:43.040
Then one of my coworkers is
going to come on stage and

00:00:43.040 --> 00:00:44.480
show new and improved patches.

00:00:44.480 --> 00:00:47.260
And a third person is going to
come on stage for the last section

00:00:47.510 --> 00:00:50.720
and talk about the improvements
to the programmable patches.

00:00:50.720 --> 00:00:53.050
So what do you guys care about?

00:00:53.060 --> 00:00:55.980
The new features that we've
added for composition creators

00:00:55.980 --> 00:00:57.660
include a redesigned editor.

00:00:57.660 --> 00:01:00.100
We've gone through and made
it so easy to create content,

00:01:00.120 --> 00:01:01.180
it's not even funny.

00:01:01.180 --> 00:01:03.310
An optimized image pipeline.

00:01:03.310 --> 00:01:07.100
Most of what you deal with in
Quartz Composer are images,

00:01:07.110 --> 00:01:10.140
so we've made small
images more efficient,

00:01:10.140 --> 00:01:10.720
faster images.

00:01:11.020 --> 00:01:13.340
We've added a new feature called
"Composers" that allows you to

00:01:13.340 --> 00:01:14.020
add images to Quartz Composer.

00:01:14.020 --> 00:01:15.980
So you can add images to Quartz
Composer and it will handle it.

00:01:16.020 --> 00:01:18.120
We've added support for custom patches.

00:01:18.150 --> 00:01:20.670
So if any of you are developers
and you realize that there's just

00:01:20.670 --> 00:01:23.020
a patch that you don't have that
you really wish that you did,

00:01:23.020 --> 00:01:24.020
you can write it.

00:01:24.020 --> 00:01:27.150
Or you can chime in on the Quartz
Composer mailing list and I'm sure

00:01:27.150 --> 00:01:29.020
somebody would write it for you.

00:01:29.020 --> 00:01:32.000
We've added a composition repository.

00:01:32.080 --> 00:01:36.480
Since Tiger,
a lot of Mac OS X clients have started

00:01:36.480 --> 00:01:39.020
accepting Quartz Composer as the
default way to define your image.

00:01:39.020 --> 00:01:41.330
So we've added a new feature
called "Composers". It's a new

00:01:41.350 --> 00:01:43.980
feature that allows you to define
motion graphics in the system.

00:01:43.980 --> 00:01:46.500
So we decided to make a
centralized location where

00:01:46.500 --> 00:01:47.950
everybody can go to get it.

00:01:48.040 --> 00:01:54.980
We also decided to make this public
for third party applications.

00:01:55.010 --> 00:01:59.150
So that way you as content
creators can create content and

00:01:59.310 --> 00:02:01.980
give it to all these applications.

00:02:01.980 --> 00:02:04.960
You no longer need to carry both torches.

00:02:04.980 --> 00:02:07.960
So how do you create repository content?

00:02:07.980 --> 00:02:10.940
It's a simple three step process.

00:02:11.020 --> 00:02:12.940
You only need to do two of them.

00:02:12.940 --> 00:02:15.940
The first step is create compositions
which conform to protocols.

00:02:15.940 --> 00:02:19.030
And if any of you were at
Alessandra's session this morning,

00:02:19.030 --> 00:02:21.940
session 606, you've already seen this.

00:02:21.950 --> 00:02:25.790
A protocol is just an agreed
upon set of inputs and outputs.

00:02:25.960 --> 00:02:28.780
Once you've created the composition,
just put the composition

00:02:28.960 --> 00:02:30.860
into Library Compositions.

00:02:30.860 --> 00:02:33.900
And then finally, the applications then
take care of the rest.

00:02:34.030 --> 00:02:40.400
They ask the composition repository for
compositions that conform to a protocol,

00:02:40.520 --> 00:02:41.820
and then they receive a list back.

00:02:42.000 --> 00:02:46.270
And then they do what
they will with them.

00:02:46.320 --> 00:02:49.890
So let's just go ahead and
jump right into a demo of that,

00:02:49.890 --> 00:02:49.890
if I could have the demo machine.

00:02:52.560 --> 00:02:53.960
So the first thing I'm going
to do is I'm going to launch

00:02:53.960 --> 00:02:56.260
the Quartz Composer Editor.

00:02:56.310 --> 00:02:58.860
And for those of you who
are unfamiliar with it,

00:02:58.900 --> 00:03:05.170
it is in Developer, Applications,
Quartz Composer.

00:03:07.790 --> 00:03:11.360
On first launch, you see a couple of
different windows pop up,

00:03:11.360 --> 00:03:13.290
including our new template assistant.

00:03:13.350 --> 00:03:17.240
This is where we list all of the
available protocols that are currently

00:03:17.240 --> 00:03:18.890
in the composition repository.

00:03:18.900 --> 00:03:23.080
We have music visualizers
and image filters.

00:03:23.150 --> 00:03:25.370
And down here,
you see an explanation of what the

00:03:25.370 --> 00:03:29.330
inputs and output ports are representing.

00:03:29.400 --> 00:03:31.420
So for this demo,
I'm going to go ahead and create

00:03:31.690 --> 00:03:35.640
an old Western-themed filter
that can be used in image,

00:03:35.640 --> 00:03:38.340
in iChat or Photo Booth.

00:03:38.370 --> 00:03:39.670
And I'm going to do something
a little bit fun with it,

00:03:39.670 --> 00:03:40.820
too.

00:03:40.970 --> 00:03:43.060
So I'm going to go ahead
and choose Image Filter.

00:03:43.310 --> 00:03:47.630
And you'll see when you first
look at it that we have--

00:03:47.840 --> 00:03:49.270
A bunch of patches on the workspace.

00:03:49.460 --> 00:03:52.400
You'll also notice that we,
if you're familiar with Quartz Composer,

00:03:52.400 --> 00:03:55.320
you'll notice that we've removed
the patch browser from the

00:03:55.320 --> 00:03:57.000
left-hand side of the workspace.

00:03:57.170 --> 00:04:06.550
We've created a patch creator window,
which is just a floating window

00:04:06.550 --> 00:04:07.700
that you use to go ahead and
add patches to the workspace.

00:04:08.280 --> 00:04:10.470
It can also be closed
whenever you don't need it.

00:04:10.600 --> 00:04:14.290
The main problem in Tiger was that you
could never close the patch browser.

00:04:14.410 --> 00:04:16.630
So I'm going to close that for now.

00:04:16.730 --> 00:04:19.790
And what exactly does the image
filter protocol provide us?

00:04:19.960 --> 00:04:24.970
Well, the darker patches are
required inputs and outputs.

00:04:25.120 --> 00:04:28.600
So here we have a required input image,
the image to process,

00:04:28.730 --> 00:04:33.350
and we have a required output image,
the processed image.

00:04:33.890 --> 00:04:35.640
We also have a few optional inputs.

00:04:35.730 --> 00:04:41.010
We have an X and Y optional input here,
which is used to center the image,

00:04:41.080 --> 00:04:43.500
center the effect
appropriately on the image.

00:04:43.550 --> 00:04:47.570
In the case of the
boilerplate we have here,

00:04:47.570 --> 00:04:50.180
it focuses the zoom blur.

00:04:51.090 --> 00:04:53.920
And we also have a preview mode,
which you can take a lighter

00:04:53.920 --> 00:04:56.690
weight rendering path down.

00:04:56.690 --> 00:04:58.830
But I don't need that for this demo,
so I'm just going to

00:04:58.830 --> 00:05:00.210
go ahead and remove it.

00:05:01.930 --> 00:05:04.700
So the first thing that we need
to do if we're doing anything

00:05:04.700 --> 00:05:06.400
old western is add a sepia tone.

00:05:06.400 --> 00:05:09.040
So I'm going to go ahead and
remove this process image.

00:05:09.060 --> 00:05:12.180
And if you were paying attention
during the previous session,

00:05:12.180 --> 00:05:14.190
you'll notice that we've
added Undo Support,

00:05:14.190 --> 00:05:16.380
which is completely supported
within the editor now.

00:05:16.390 --> 00:05:21.670
No longer do you need to
remember your last 10 steps.

00:05:22.320 --> 00:05:24.560
So we're doing a Western theme.

00:05:24.560 --> 00:05:27.160
So when you think Western theme,
you think sepia.

00:05:27.160 --> 00:05:28.900
So I'm going to go ahead
and add a sepia tone.

00:05:28.900 --> 00:05:33.950
The patch creator here has a whole
bunch of hotkeys associated with it.

00:05:33.950 --> 00:05:36.280
Well, not a whole bunch of hotkeys,
a whole bunch of quick functionality.

00:05:36.280 --> 00:05:38.170
I can close it with the escape key.

00:05:38.170 --> 00:05:40.960
I can bring it forward with
Enter or Command Enter.

00:05:40.980 --> 00:05:43.740
When I bring it forward,
the search field's already

00:05:43.740 --> 00:05:45.750
selected so I can type what I want.

00:05:45.840 --> 00:05:49.680
And there are a few preferences
that you can go ahead and check to

00:05:49.680 --> 00:05:52.180
customize it more to your work style.

00:05:52.200 --> 00:05:54.890
So I'm going to go ahead and
connect our incoming image,

00:05:54.890 --> 00:05:58.820
the protocol provided incoming image,
to the sepia tone.

00:05:58.900 --> 00:06:01.290
And I'm going to connect the
processed image of the sepia

00:06:01.290 --> 00:06:02.200
tone to the outgoing image.

00:06:02.200 --> 00:06:03.590
And look at that.

00:06:03.600 --> 00:06:06.200
We have sepia tone flowers.

00:06:06.250 --> 00:06:07.640
It's not terribly exciting.

00:06:07.640 --> 00:06:11.600
I'm going to go ahead and make a
little bit more room for myself.

00:06:12.030 --> 00:06:14.240
If you look at any old
Western photography,

00:06:14.240 --> 00:06:16.080
you'll notice it's got
a bit of a grain to it.

00:06:16.370 --> 00:06:19.170
So what's a good way to do
that in Quartz Composer?

00:06:19.590 --> 00:06:21.900
It's to add a dot screen.

00:06:21.900 --> 00:06:25.900
So I'm going to go ahead and add
the dot screen to the workspace

00:06:26.070 --> 00:06:29.750
and connect it up appropriately.

00:06:35.860 --> 00:06:39.400
Now this is, it obviously is applying a
bit of a grain to the image,

00:06:39.400 --> 00:06:42.050
but it looks a bit too intense.

00:06:42.100 --> 00:06:45.440
So we need to change some of
the settings on this dot screen.

00:06:45.440 --> 00:06:46.860
And to do that,
I'm going to bring forward

00:06:46.940 --> 00:06:47.800
the Patch Inspector.

00:06:47.800 --> 00:06:49.700
And we can change the settings here.

00:06:49.700 --> 00:06:51.370
But before we change
any of those settings,

00:06:51.370 --> 00:06:53.690
I want to talk a little bit
more about core image filters.

00:06:54.520 --> 00:06:58.580
So core image filters have,
core image filters can have

00:06:58.580 --> 00:07:01.830
a set of inputs that are
expressed in pixel dimensions,

00:07:01.830 --> 00:07:02.500
such as width.

00:07:02.500 --> 00:07:06.990
If we are adding this composition
to the composition repository,

00:07:06.990 --> 00:07:10.150
we have no idea how big
the incoming image is.

00:07:10.150 --> 00:07:15.120
So if we were to just leave this
width setting to 5.8 like we have it,

00:07:15.200 --> 00:07:20.130
then images that are only 20 pixels
wide are going to look much different

00:07:20.390 --> 00:07:23.520
than images that are 200 pixels wide.

00:07:24.500 --> 00:07:27.120
So in Tiger,
the way you worked around this was

00:07:27.120 --> 00:07:30.850
by doing a little bit of math and
calculating the width you cared about

00:07:30.850 --> 00:07:33.420
as a percentage of the image's width.

00:07:33.540 --> 00:07:36.620
Well, for Leopard,
we've added the ability to just

00:07:36.620 --> 00:07:39.360
normalize these pixel-based coordinates.

00:07:39.360 --> 00:07:44.920
So if you check it, that means then,
and you can read here in the description,

00:07:44.950 --> 00:07:48.670
that pixel dimensions come
in as a range of 0 to 1,

00:07:48.740 --> 00:07:53.550
which means that all images are
going to end up looking the same.

00:07:54.880 --> 00:07:56.870
So to change the parameters,
I'm going to bring forward

00:07:57.180 --> 00:08:02.920
our new Patch Parameter tab,
which allows you to see the

00:08:03.310 --> 00:08:07.760
parameters for the selected patch,
or all the selected patches,

00:08:07.840 --> 00:08:09.440
as well as the macro patch.

00:08:09.540 --> 00:08:13.410
This is really useful for
things like copying colors

00:08:13.490 --> 00:08:17.200
from one color well to another,
as well as just seeing an overall

00:08:17.200 --> 00:08:20.140
view of all of the settings at once.

00:08:21.220 --> 00:08:23.480
For this demo,
I happen to know exactly what I want.

00:08:23.520 --> 00:08:23.980
Go figure.

00:08:23.980 --> 00:08:28.660
So I'm going to add a bit of a grain,
and I'm going to adjust this

00:08:28.800 --> 00:08:31.910
to-- I'm going to make it
a little bit more intense.

00:08:32.090 --> 00:08:34.130
Okay, so now we've got grainy flowers.

00:08:34.130 --> 00:08:37.440
And that would be fine for
an Old West style theme.

00:08:37.520 --> 00:08:39.790
But like I said,
I want to do something a little bit fun.

00:08:39.950 --> 00:08:43.190
Since this is going in
Photo Booth or iChat,

00:08:43.650 --> 00:08:46.680
What I need to do is have an image
that represents what I'm actually

00:08:46.680 --> 00:08:47.880
going to be applying the effect on.

00:08:47.880 --> 00:08:51.550
Let's grab an image.

00:08:51.720 --> 00:08:55.520
So I'm just going to drag a
picture of our boss up here,

00:08:55.520 --> 00:08:56.680
Bertrand.

00:08:57.080 --> 00:08:59.680
You're welcome, Peter.

00:08:59.970 --> 00:09:01.240
And now we see that we have Bertrand.

00:09:01.240 --> 00:09:04.160
So now we can start kind of getting
an idea of how this is actually

00:09:04.160 --> 00:09:06.500
going to feel within Photo Booth.

00:09:06.590 --> 00:09:08.710
You know, I always thought that
Bertrand needed a mustache.

00:09:08.770 --> 00:09:10.140
I don't know about you guys,
so I'm going to go ahead

00:09:10.140 --> 00:09:11.640
and add a mustache to him.

00:09:11.710 --> 00:09:14.020
Close the patch parameter view.

00:09:14.440 --> 00:09:18.180
And if you notice,
those of you who are familiar

00:09:18.180 --> 00:09:21.400
with Quartz Composer,
I'm sure a little while

00:09:21.400 --> 00:09:23.300
ago you were like,
how is this even drawing anything?

00:09:23.320 --> 00:09:25.260
There's no renderers on the screen.

00:09:25.380 --> 00:09:30.060
Well,
the Quartz Composer Editor understands

00:09:30.060 --> 00:09:36.180
the image filter protocol and
understands that what needs to

00:09:36.180 --> 00:09:36.950
be displayed is this outgoing image.

00:09:36.950 --> 00:09:36.950
So it automatically does that for you.

00:09:37.140 --> 00:09:39.260
If we were to add a
billboard to this level,

00:09:39.490 --> 00:09:43.260
which is just a simple way of
rendering in Quartz Composer,

00:09:43.310 --> 00:09:45.260
you'll see that it stops
drawing altogether.

00:09:45.310 --> 00:09:49.050
That's because image filters
can't have any renderers,

00:09:49.050 --> 00:09:51.340
or also known in Quartz
Composer as consumers,

00:09:51.410 --> 00:09:53.240
at their top level.

00:09:53.240 --> 00:09:56.700
That's because when
the patch is being run,

00:09:56.700 --> 00:09:58.300
we don't know what
application is running it,

00:09:58.340 --> 00:10:01.550
and we can't guarantee that
the correct-- that there will

00:10:01.550 --> 00:10:04.680
even be a display attached to
the machine while it's running.

00:10:05.700 --> 00:10:10.620
So in order to draw a mustache
over a picture of Bertrand,

00:10:10.680 --> 00:10:13.720
we're going to need to have a patch that
will allow us to do some compositing,

00:10:13.790 --> 00:10:16.360
allow us to do the drawing
not at the top level,

00:10:16.410 --> 00:10:17.930
and then output an image.

00:10:18.000 --> 00:10:21.370
In Quartz Composer,
that's the render an image patch.

00:10:23.500 --> 00:10:27.220
Now, render an image can use quite a
bit of VRAM if it's misconfigured.

00:10:27.380 --> 00:10:29.700
So for Leopard,
we've added the ability to define

00:10:29.700 --> 00:10:31.190
the pixels wide and pixels high.

00:10:31.490 --> 00:10:34.170
And we want to make sure to
always set those every time

00:10:34.170 --> 00:10:35.700
you use a render an image.

00:10:35.790 --> 00:10:42.990
So what I want to do is I want to
have this outcoming image have the

00:10:42.990 --> 00:10:47.330
same dimensions as our source image.

00:10:47.330 --> 00:10:47.330
So I'm going to grab an
image dimensions patch.

00:10:49.310 --> 00:10:52.310
Which is basically just a tool
that-- let me make a little bit more

00:10:52.310 --> 00:10:56.600
room here-- which is basically just
a tool that when given an image,

00:10:56.620 --> 00:11:03.470
gives you information about the image,
both the width and height in Quartz

00:11:04.200 --> 00:11:09.100
Composer coordinate space up here
and the pixels high and pixels wide.

00:11:09.100 --> 00:11:09.100
Obviously, we need to use pixels
high and pixels wide here.

00:11:09.390 --> 00:11:12.620
And I'm going to go ahead and connect the
image out resulting up to the dot screen.

00:11:12.620 --> 00:11:15.670
And you'll see that everything
just goes to garbage.

00:11:15.810 --> 00:11:19.540
It's nice and western-y garbage,
but it's still garbage.

00:11:19.600 --> 00:11:22.290
That's because we're not drawing
anything in this render and image patch.

00:11:22.290 --> 00:11:24.560
Since this render and
image patch is a macro,

00:11:24.560 --> 00:11:27.900
you can tell by the square corners,
double-clicking on it will move in.

00:11:28.040 --> 00:11:32.180
We've added a lot more powerful
zooming to Quartz Composer in Leopard,

00:11:32.180 --> 00:11:36.600
as well as removing the
2,000 by 2,000 window bounds.

00:11:36.600 --> 00:11:43.340
So now you can actually use all
30 inches of your real estate.

00:11:44.590 --> 00:11:47.640
So we're getting garbage here
because we're not drawing anything.

00:11:47.640 --> 00:11:51.510
So the first thing we should do--
and since we're not at the top level,

00:11:51.510 --> 00:11:54.610
we can have consumers-- is clear it.

00:11:55.150 --> 00:11:58.500
And since we want to put
a mustache on Bertrand,

00:11:58.600 --> 00:12:01.230
we're going to need to have
Bertrand being drawn at this level.

00:12:01.350 --> 00:12:07.000
So we're going to go ahead
and create a billboard.

00:12:07.100 --> 00:12:09.710
And I'm going to zoom in a little bit.

00:12:10.860 --> 00:12:13.520
So those of you who aren't familiar
with Quartz Composer are going

00:12:13.520 --> 00:12:14.880
to immediately see a problem.

00:12:14.910 --> 00:12:18.420
How can we connect this incoming
image of Bertrand to an image

00:12:18.430 --> 00:12:19.720
inside the render an image?

00:12:19.870 --> 00:12:22.560
Those of you who are familiar with
Quartz Composer already know the answer.

00:12:22.680 --> 00:12:27.640
You need to publish the input.

00:12:27.640 --> 00:12:30.310
And you can do that by
right-clicking on the billboard,

00:12:30.310 --> 00:12:30.310
Publish Inputs, Image.

00:12:30.750 --> 00:12:34.190
So now when we move up to the top level,
going up to the root macro patch

00:12:34.210 --> 00:12:37.970
in our new hierarchy browser here,
you'll see that we now have an image

00:12:37.970 --> 00:12:40.180
input that we can connect it to.

00:12:40.240 --> 00:12:41.460
So I'm going to connect that up now.

00:12:41.460 --> 00:12:44.020
And you'll see we have Bertrand.

00:12:44.030 --> 00:12:47.410
Moving back into the render in image,
you see Bertrand is small.

00:12:47.460 --> 00:12:52.710
He's not being drawn the full width
and size of our render in image.

00:12:53.050 --> 00:12:56.670
In Quartz Composer coordinate space,
the left edge is negative 1

00:12:57.040 --> 00:12:58.840
and right edge is positive 1.

00:12:58.870 --> 00:13:02.760
So we have a width of two
Quartz Composer coordinates.

00:13:02.780 --> 00:13:06.900
And you can see by double-clicking on
the billboard here that the width is 1.

00:13:06.990 --> 00:13:09.690
We could just set that to 2,
but we've added a new feature

00:13:09.790 --> 00:13:13.160
for Leopard in the settings
under the Patch Inspector.

00:13:13.320 --> 00:13:15.000
Go to Settings.

00:13:15.010 --> 00:13:16.560
You'll see that we have dimensions.

00:13:16.560 --> 00:13:19.140
And we have a lot of dimensions
because we found that people kept

00:13:19.140 --> 00:13:21.140
doing this over and over by hand.

00:13:21.160 --> 00:13:23.240
So I'm going to go ahead
and set it to real size,

00:13:23.270 --> 00:13:27.780
which just draws Bertrand at
full size for the incoming image.

00:13:28.020 --> 00:13:29.340
So now we're back where we started.

00:13:29.420 --> 00:13:31.680
We've got Bertrand applied
with an old Western theme,

00:13:31.720 --> 00:13:33.960
but we now have the ability
to do our own drawings.

00:13:33.960 --> 00:13:37.890
So let's go ahead and
put that mustache on him.

00:13:37.960 --> 00:13:41.310
I'm going to grab a
mustache out of the assets.

00:13:45.300 --> 00:13:47.740
And we need another
billboard to put that on,

00:13:47.740 --> 00:13:50.190
something that we can
put over Bertrand's face.

00:13:50.190 --> 00:13:56.200
So I'm going to drag that
one out and connect it up.

00:13:58.300 --> 00:14:01.500
You guys can't see this,
but rather than having to do

00:14:01.500 --> 00:14:04.740
drag connections for Leopard,
we've added the ability to

00:14:04.830 --> 00:14:05.800
just do a click to connect.

00:14:05.800 --> 00:14:08.380
So you click on the source port,
you click on the destination port.

00:14:08.380 --> 00:14:11.060
If you hold down Option,
it won't break the connection.

00:14:11.060 --> 00:14:13.420
You can click on multiple
destination ports and you can

00:14:13.420 --> 00:14:15.260
connect multiple things in one pass.

00:14:19.330 --> 00:14:21.680
So now we've got a black box
drawing over Bertrand's face.

00:14:21.680 --> 00:14:24.160
And if he was going for
a really boxy mustache,

00:14:24.170 --> 00:14:25.230
that might make sense.

00:14:25.330 --> 00:14:30.390
But you can see here in the tool
tip that this image actually has

00:14:30.570 --> 00:14:32.540
some alpha associated with it.

00:14:32.590 --> 00:14:38.060
Actually, you can't see that in the
tool tip because-- anyway.

00:14:38.130 --> 00:14:39.310
Sorry.

00:14:39.610 --> 00:14:42.550
That's because this image
has alpha associated with it.

00:14:42.620 --> 00:14:45.560
But we haven't told the
billboard to respect this alpha

00:14:45.560 --> 00:14:46.760
and do the correct blending.

00:14:46.760 --> 00:14:49.840
In Quartz Composer,
you do that with the blending input.

00:14:49.880 --> 00:14:51.600
And we choose blending over.

00:14:51.620 --> 00:14:53.140
Now you can see we have a mustache.

00:14:53.210 --> 00:14:54.850
But it's not properly centered.

00:14:54.920 --> 00:14:59.090
And while we could drop this composition
just like it is in Photo Booth,

00:14:59.320 --> 00:15:01.620
everybody would have to cream
their neck and try to position

00:15:01.620 --> 00:15:05.880
their head just right to get the
mustache in the appropriate place.

00:15:05.890 --> 00:15:08.780
As I said earlier,
we have x and y values coming in

00:15:08.870 --> 00:15:12.390
from the host application that
typically are going to correspond to

00:15:12.390 --> 00:15:14.160
where you want the effect centered.

00:15:14.170 --> 00:15:16.160
I'm going to use those
to center the mustache.

00:15:17.960 --> 00:15:20.920
So if I jump into the rendering image,
it's the same issue as getting Bertrand's

00:15:20.960 --> 00:15:22.160
image inside the rendering image.

00:15:22.160 --> 00:15:24.710
We need to publish the input ports.

00:15:24.790 --> 00:15:29.670
So I'm going to publish
X and I'm going to publish Y.

00:15:30.120 --> 00:15:32.340
And I accidentally did
that in the wrong order.

00:15:32.340 --> 00:15:35.040
So you see I published Y first,
followed by X.

00:15:35.180 --> 00:15:37.280
Well, with these two patches
being oriented X and Y,

00:15:37.280 --> 00:15:40.320
this is just a recipe for disaster.

00:15:40.320 --> 00:15:42.800
In Tiger,
I would have to go unpublish those

00:15:42.800 --> 00:15:45.200
ports and then republish them again.

00:15:45.250 --> 00:15:49.060
New for Leopard,
we've added the ability to

00:15:49.090 --> 00:15:51.750
reorder published ports.

00:15:54.520 --> 00:15:57.190
You can also rename the ports
in there if you would like.

00:15:57.340 --> 00:16:04.430
So if I wanted to
change it to Mustache X,

00:16:04.510 --> 00:16:06.330
you can do that as well.

00:16:07.700 --> 00:16:10.190
And then I'm going to connect things up.

00:16:10.190 --> 00:16:15.870
And you should see that we have
the mustache moving on his face.

00:16:16.040 --> 00:16:16.760
But something's not right.

00:16:16.760 --> 00:16:18.720
It's not tracking the mouse properly.

00:16:18.870 --> 00:16:23.210
And that's because protocols,
when their numerical values --

00:16:23.210 --> 00:16:27.590
when the host application gives a
numerical value to a composition,

00:16:27.620 --> 00:16:30.100
it's normalized in a
range from zero to one.

00:16:30.100 --> 00:16:34.610
This allows an app to know that zero is,
in this case, for X,

00:16:34.610 --> 00:16:38.740
zero is the left corner,
Y is zero is the bottom.

00:16:38.760 --> 00:16:42.630
So 00 is the lower left corner,
11 is the upper right corner.

00:16:42.820 --> 00:16:44.390
And they know that if
they want it centered,

00:16:44.450 --> 00:16:45.900
they can just do .5, .5.

00:16:45.900 --> 00:16:47.940
They don't need to know how
the composition works at all.

00:16:49.690 --> 00:16:52.420
So in order to offset this appropriately,
we need to do some math to

00:16:52.430 --> 00:16:56.250
translate between these two scales.

00:16:57.300 --> 00:17:00.220
In Tiger, what we would have had to
do is break the connections,

00:17:00.380 --> 00:17:04.790
insert the math, then connect everything
back up to the X position.

00:17:04.970 --> 00:17:09.090
For Leopard, we've added the ability to
just insert an input splitter,

00:17:09.140 --> 00:17:14.090
which will maintain the published state
of the port as well as the connections.

00:17:15.090 --> 00:17:18.310
So now we have room in here to do the
math without breaking all of these

00:17:18.310 --> 00:17:21.490
other connections and having to remember
how to connect everything back up.

00:17:21.590 --> 00:17:25.400
So I'm going to go ahead
and publish it for the Y.

00:17:25.500 --> 00:17:30.290
Let me bring forward a new patch
called Mathematic Expression.

00:17:30.370 --> 00:17:32.990
The Math Patch was really powerful,
and the Mathematic Expression doesn't

00:17:33.000 --> 00:17:37.830
do anything that the Math Patch doesn't,
but it makes it a lot easier.

00:17:37.940 --> 00:17:42.200
You can just type an arbitrary equation
in here and it'll automatically

00:17:42.270 --> 00:17:46.610
propagate the inputs and outputs,
or the input ports appropriately.

00:17:47.470 --> 00:17:49.440
So I'm going to go ahead
and type 2 times a minus 1.

00:17:49.450 --> 00:17:53.070
And you'll notice that it removed
the b input on this particular

00:17:53.070 --> 00:17:55.360
Mathematic Expression patch.

00:17:55.400 --> 00:17:59.520
You'll also notice the title
was automatically updated.

00:17:59.560 --> 00:18:02.970
There are a certain set of patches where
the settings really represent the titles.

00:18:03.070 --> 00:18:07.810
So we have set up automatic titles
for those particular patches.

00:18:07.950 --> 00:18:12.160
Things like splitters and
the Mathematic Expression.

00:18:12.300 --> 00:18:14.520
So now we have the mustache
centered on the mouse.

00:18:14.530 --> 00:18:16.270
And that's exactly what we want.

00:18:16.390 --> 00:18:17.410
So step one is done.

00:18:17.640 --> 00:18:21.130
Step one is creating the composition
that conforms to a protocol.

00:18:21.210 --> 00:18:24.640
So what I'm going to do now is save
it to the appropriate location.

00:18:24.840 --> 00:18:27.140
I'm going to save it to--

00:18:27.620 --> 00:18:32.100
My home directory, library, compositions.

00:18:32.100 --> 00:18:34.360
I'm going to overwrite the
one that was previously there.

00:18:34.360 --> 00:18:43.660
Then when I launch Photo Booth
and go to the effects,

00:18:47.950 --> 00:18:52.070
After you get through all of these
great background removal effects,

00:18:52.100 --> 00:18:54.300
you'll see that we have
the mustache effect.

00:18:54.300 --> 00:18:59.670
And I can go ahead and orient things
appropriately and take my picture.

00:19:09.940 --> 00:19:12.900
So that's really great that
it just works in Photo Booth,

00:19:12.990 --> 00:19:15.740
but if you noticed,
one of our other clients is Automator.

00:19:15.740 --> 00:19:18.890
I've got a picture of
Bertrand now with a mustache,

00:19:18.920 --> 00:19:21.200
but what if I want all of the
executives to have a mustache?

00:19:23.300 --> 00:19:28.930
Bertrand is the, or Bertrand,
the Automator is the

00:19:28.930 --> 00:19:28.930
perfect tool for that.

00:19:30.180 --> 00:19:33.820
So I'm opening the Automator workflow,
and I'm going to drag in

00:19:33.840 --> 00:19:35.790
my directory of pictures.

00:19:39.500 --> 00:19:55.500
( Transcript missing )

00:19:55.810 --> 00:20:02.090
Basically, all this is doing is,
it's basically just getting finder items,

00:20:02.260 --> 00:20:05.780
copying the directory someplace,
and then opening them up in preview.

00:20:05.880 --> 00:20:08.060
So here we have all of our
executives with a bit of an old

00:20:08.060 --> 00:20:09.540
Western theme applied to them.

00:20:09.540 --> 00:20:16.400
Tony's my favorite.

00:20:16.710 --> 00:20:17.750
Yeah.

00:20:17.930 --> 00:20:22.700
So if I could go back to slides, please.

00:20:30.620 --> 00:20:31.260
So here's a list.

00:20:31.260 --> 00:20:33.280
I mean,
we've got a whole bunch of new features,

00:20:33.390 --> 00:20:37.420
but here's a few of them that
I couldn't quite work into the demo.

00:20:37.420 --> 00:20:39.320
Occasionally,
you know the exact aspect ratio

00:20:39.320 --> 00:20:42.610
or pixel dimensions you're
dealing with for your application,

00:20:42.610 --> 00:20:45.640
and you don't want to have
to worry about resizing the

00:20:45.640 --> 00:20:47.880
viewer appropriately by hand.

00:20:47.880 --> 00:20:50.530
For Leopard,
we've added a pop-up menu in the viewer,

00:20:50.870 --> 00:20:54.060
which allows you to quickly choose
which either aspect ratio or

00:20:54.080 --> 00:20:57.970
pixel dimensions you care about,
as well as customizing them in the

00:20:57.980 --> 00:21:00.160
preferences for the application.

00:21:01.000 --> 00:21:02.320
For those of you familiar
with Quartz Composer,

00:21:02.320 --> 00:21:04.210
you'll know what clips are.

00:21:04.350 --> 00:21:06.640
Clips,
for those of you who aren't familiar,

00:21:06.640 --> 00:21:09.820
in Tiger were sort of persistent
copies of small functional

00:21:09.820 --> 00:21:11.380
units of the composition.

00:21:11.500 --> 00:21:13.390
They weren't really first-class citizens.

00:21:13.450 --> 00:21:16.290
In Leopard, we've moved them to be
first-class citizens.

00:21:16.370 --> 00:21:21.020
They now show up in the patch
creator when you search for a patch.

00:21:21.020 --> 00:21:26.610
You can create them on the fly just by
this Create Clip button in the toolbar.

00:21:26.610 --> 00:21:28.800
And you can manage them
within the Preferences window.

00:21:29.600 --> 00:21:31.630
With all these changes,
there's going to be some

00:21:31.650 --> 00:21:33.690
compatibility issues,
and we tried to make it as

00:21:33.690 --> 00:21:35.000
easy on you guys as possible.

00:21:35.000 --> 00:21:40.130
So what we have for compatibility
with 10.4 is we've added the

00:21:40.210 --> 00:21:44.860
ability to have badges displayed on
the patches for whichever patches

00:21:44.860 --> 00:21:46.740
have either warnings or errors.

00:21:46.780 --> 00:21:50.940
This makes it easy to know right away
if something isn't behaving correctly.

00:21:50.940 --> 00:21:54.710
I don't have a slide for it,
but we also have the ability on

00:21:54.710 --> 00:21:58.240
Leopard to run the composition
using the Tiger runtime,

00:21:58.240 --> 00:22:01.190
which allows you to see what it
would look like in Tiger right

00:22:01.190 --> 00:22:02.480
next to the Leopard version.

00:22:02.790 --> 00:22:05.270
That's under the File menu.

00:22:06.320 --> 00:22:09.880
And Quartz Composer,
in some environments, runs in safe mode.

00:22:09.880 --> 00:22:12.600
Safe mode basically restricts
some patches from running

00:22:12.600 --> 00:22:17.800
for security reasons,
such as WebKit, Dashboard, et cetera.

00:22:17.900 --> 00:22:19.990
We've added another badge
as well to indicate whether

00:22:19.990 --> 00:22:21.180
or not a patch is running.

00:22:21.210 --> 00:22:23.900
It will be available in safe mode.

00:22:24.020 --> 00:22:27.310
And to talk about all of the new patches,
here's Troy.

00:22:32.690 --> 00:22:35.230
Thank you, Nate,
for showing us a look at the

00:22:35.290 --> 00:22:36.940
new Quartz Composer Editor.

00:22:37.040 --> 00:22:40.330
And now, my name is Troy Koelling,
and I'm going to show you a little bit

00:22:40.330 --> 00:22:42.310
deeper look at the Quartz Composer world.

00:22:42.390 --> 00:22:44.400
We're going to talk about some
of the new patches that you might

00:22:44.400 --> 00:22:47.440
be interested in when mastering
the Quartz Composer Editor.

00:22:47.510 --> 00:22:49.810
So let's go ahead and start with a demo.

00:22:54.480 --> 00:22:57.710
Now, as a developer,
say I'm a game developer,

00:22:57.940 --> 00:23:02.020
I spend a long time perfecting my game,
whether it's in Quartz

00:23:02.020 --> 00:23:03.920
2D or if it's in OpenGL.

00:23:04.230 --> 00:23:08.210
And now the last thing I need to
do is create a high score screen

00:23:08.650 --> 00:23:11.350
to display the user's high scores.

00:23:12.220 --> 00:23:15.100
Now, I don't really want to take a
whole lot of time to develop it,

00:23:15.100 --> 00:23:16.270
but I do want something that looks great.

00:23:16.390 --> 00:23:20.090
So Quartz Composer is my first choice.

00:23:20.530 --> 00:23:24.800
Here's kind of what I came up
with to display these high scores.

00:23:25.020 --> 00:23:29.800
Because my game is a pinball game,
I came up with the theme of a kind of

00:23:29.800 --> 00:23:34.780
dive bar to display the high scores,
keeping the user in the

00:23:34.780 --> 00:23:37.330
environment they're embedded in
while they're playing the game.

00:23:38.150 --> 00:23:42.910
You can see the most prominent
aspect of this high score screen is,

00:23:42.910 --> 00:23:44.530
of course, the scores on the menu.

00:23:44.530 --> 00:23:48.870
But I also have an image in the
background and a movie playing to

00:23:48.870 --> 00:23:51.840
show to you how Quartz Composer
can be interactive as well.

00:23:51.900 --> 00:23:56.840
This video could be your game trailer or
it could be a replay of the current game.

00:23:56.840 --> 00:23:58.820
I think if Ducati was
actually advertising,

00:23:58.820 --> 00:24:01.490
they probably wouldn't choose
to advertise in this bar.

00:24:01.490 --> 00:24:02.680
But you get the idea.

00:24:04.600 --> 00:24:06.900
Now, the most important part
of this composition is,

00:24:06.900 --> 00:24:07.750
of course, the scores.

00:24:07.880 --> 00:24:12.380
So I'm going to dive in and show
you a really popular design pattern,

00:24:12.390 --> 00:24:16.270
how to get data from your
application into a composition.

00:24:20.630 --> 00:24:22.630
The goal state we're
going to look for is this,

00:24:22.770 --> 00:24:24.770
just a list of names.

00:24:24.950 --> 00:24:26.450
Of course,
you could have the scores as well.

00:24:26.460 --> 00:24:30.900
This list comes from your
application as a structure.

00:24:30.900 --> 00:24:34.130
It could be on a published port
or it could be as a file on disk

00:24:34.150 --> 00:24:36.000
with the new XML Downloader patch.

00:24:38.860 --> 00:24:41.920
I'm going to close this down
and start directly from scratch.

00:24:42.090 --> 00:24:44.510
Now, because I don't have an
actual game to show you,

00:24:44.740 --> 00:24:49.320
I'm going to use some fake data
in order to get the structure

00:24:49.320 --> 00:24:51.180
that I want into the composition.

00:24:51.190 --> 00:24:59.400
I'm also going to go ahead and
right away clear the rendering view.

00:25:01.640 --> 00:25:03.620
Now, whenever you have a list,
the first thing you

00:25:03.630 --> 00:25:08.890
should think is iterator,
because an iterator simply takes its

00:25:08.890 --> 00:25:11.430
contents and renders them to screen.

00:25:11.680 --> 00:25:16.060
It has a number of iterations,
so every iteration, it renders whatever

00:25:16.060 --> 00:25:17.750
it contains to screen.

00:25:19.800 --> 00:25:23.780
The number of times we want to compute
the contents of the iterator is defined

00:25:23.780 --> 00:25:26.400
by the number of items in our data set.

00:25:26.490 --> 00:25:30.960
So we can get a structure count out
and set the number of iterations.

00:25:39.420 --> 00:25:41.800
Now I'd like to send the
structure inside the iterator,

00:25:41.810 --> 00:25:42.680
but there's no port for that.

00:25:42.910 --> 00:25:45.330
So just like Nathan did,
I'm going to go inside and

00:25:45.330 --> 00:25:47.460
publish a port for that.

00:26:03.680 --> 00:26:07.840
Now you can go back to the top
level and get that structure inside.

00:26:07.890 --> 00:26:09.890
Now you can see what the
structure looks like.

00:26:10.180 --> 00:26:13.600
It's got a list of key value pairs.

00:26:13.610 --> 00:26:16.590
Now, fundamentally, each one of those key
value pairs is a string.

00:26:16.650 --> 00:26:22.290
So naively, we could just try to display
that as you would any string.

00:26:22.620 --> 00:26:25.990
And of course, you use the image with
string patch for that.

00:26:36.940 --> 00:26:40.940
I'm going to set the blending just
as if you saw Alessandra's example.

00:26:40.940 --> 00:26:44.010
You want to make sure that the
alpha component of the string

00:26:44.370 --> 00:26:46.060
is respected on the billboard.

00:26:46.090 --> 00:26:48.620
I'm also going to set the
width so that it's always

00:26:48.620 --> 00:26:50.780
rendered as sharp as possible.

00:26:55.120 --> 00:26:57.740
Now if we take our structure
and put it on the string,

00:26:57.740 --> 00:26:59.900
you'll see that Quartz Composer
knows there's a structure in there,

00:26:59.990 --> 00:27:02.500
it just doesn't know how
to display the contents.

00:27:02.630 --> 00:27:05.530
What we need to do is split out
each of those items in the structure

00:27:05.940 --> 00:27:12.210
and display them individually,
one per iteration as we go.

00:27:14.320 --> 00:27:15.930
So it makes more space for us.

00:27:15.930 --> 00:27:20.250
And the two items that we can
use to split out that structure

00:27:20.550 --> 00:27:26.040
is the structure index member
and the structure key member.

00:27:26.110 --> 00:27:27.950
Let's go ahead and get those out.

00:27:31.890 --> 00:27:33.720
Now as we flow the
structure through there,

00:27:33.770 --> 00:27:36.590
we can split off each item
based on index and key.

00:27:36.600 --> 00:27:39.330
I'm going to set the key to name.

00:27:39.420 --> 00:27:43.140
And you can see that I can set
the index here and get different

00:27:43.140 --> 00:27:45.990
items out of the structure.

00:27:46.170 --> 00:27:49.150
Now really what I want to do
is set that index depending

00:27:49.190 --> 00:27:51.060
on which iteration we're on.

00:27:51.380 --> 00:27:55.180
Well,
the iterator patch has a convenience

00:27:55.680 --> 00:27:59.000
patch called the iterator variables,
which allows you to know which

00:27:59.000 --> 00:28:01.790
iteration you're currently rendering.

00:28:05.460 --> 00:28:08.280
Thus I can set the current index
on the structure index member

00:28:08.580 --> 00:28:10.300
and display all the names.

00:28:10.440 --> 00:28:12.900
But you'll notice they're all
displayed on top of each other.

00:28:13.130 --> 00:28:20.610
This is a common mistake just because
we don't have a differentiation

00:28:20.700 --> 00:28:23.500
in the position of the billboards.

00:28:23.550 --> 00:28:26.600
You'll also notice that there's a current
position on the iterator variables,

00:28:26.810 --> 00:28:32.110
which I can connect from here to the
Y position in order to spread them out.

00:28:34.390 --> 00:28:37.540
That's great and all,
but they look a little off-centered.

00:28:37.610 --> 00:28:43.450
The current position is a number
between 0 and 1 because it's simply

00:28:43.450 --> 00:28:48.050
taking the current index and divide
it by the number of iterations.

00:28:48.160 --> 00:28:52.960
What I want to do is get between negative
0.5 and 0.5 on the rendering destination.

00:28:53.040 --> 00:28:55.990
So let's go ahead and just subtract 0.5.

00:29:11.310 --> 00:29:14.930
Now you can see that the names are
properly displayed on the composition

00:29:15.230 --> 00:29:18.790
and we can go ahead and modify
those as we want in order to put

00:29:18.790 --> 00:29:21.190
them in our pinball demonstration.

00:29:21.200 --> 00:29:26.810
So let's go ahead and see how that
fits in with the broader demonstration.

00:29:37.240 --> 00:29:41.100
So we have names and scores on the menu.

00:29:41.100 --> 00:29:43.220
Let's take a look at
how this all fits in.

00:29:43.380 --> 00:29:45.290
First thing we do--

00:29:45.870 --> 00:29:48.440
is we're clearing the workspace.

00:29:48.500 --> 00:29:52.110
We're just doing that so that we ensure
that wherever the image doesn't cover,

00:29:52.230 --> 00:29:55.820
we're not going to get garbage in the
application that we're running us in.

00:29:55.950 --> 00:29:58.600
After that, I import an image of a bar.

00:29:58.600 --> 00:30:02.440
This is a bar down by
Apple Campus that I like to go to.

00:30:02.490 --> 00:30:08.400
And we apply a bloom effect so that it
kind of gives a kind of dreamlike state.

00:30:08.430 --> 00:30:14.590
And that's just set on this sprite here.

00:30:15.330 --> 00:30:18.700
Next thing we do is we
draw the television.

00:30:18.860 --> 00:30:22.320
The movie playing on it is just
loaded from a file on disk,

00:30:22.320 --> 00:30:27.580
and I've made it a macro so that I could
display both the image of the movie

00:30:28.120 --> 00:30:31.580
and sort of a frame around the image.

00:30:33.150 --> 00:30:37.540
I'd like to stress the importance
of using kind of real assets

00:30:37.710 --> 00:30:40.700
because it really gives you a good
composition rather than trying

00:30:40.700 --> 00:30:45.890
to construct everything with
core image filters from scratch.

00:30:46.870 --> 00:30:48.000
Lastly, we have the menu.

00:30:48.200 --> 00:30:51.660
This is a 3D transformation in
order to give us control over

00:30:51.660 --> 00:30:53.490
where it is positioned in space.

00:30:53.780 --> 00:30:56.310
You'll notice here the fake
data that I had earlier.

00:30:56.310 --> 00:30:58.420
And this, of course,
would be a published port to your

00:30:58.420 --> 00:31:02.150
application or an XML downloader,
as I mentioned earlier.

00:31:02.370 --> 00:31:04.550
Inside the menu,
we have a lighting patch.

00:31:04.550 --> 00:31:10.210
It gives it kind of the red-blue glow on
the pages and also gives it some shading.

00:31:10.280 --> 00:31:13.740
Inside that,
we have the menu left and right,

00:31:13.740 --> 00:31:17.980
which displays the image on some
sprites that are rotated in space so

00:31:17.980 --> 00:31:20.370
that they give a kind of folded effect.

00:31:20.430 --> 00:31:23.990
I'm using a render an image here
to composite the high score title

00:31:24.380 --> 00:31:30.280
with the list and also the texture
of the paper so that it has an

00:31:30.320 --> 00:31:32.300
easy way to get that all together.

00:31:33.890 --> 00:31:38.090
You can see here the image with
string is displaying the high

00:31:38.090 --> 00:31:43.200
of high scores and this is the
actual paper that it's drawing on.

00:31:43.330 --> 00:31:44.880
Here, of course,
is the Structure Iterator

00:31:44.890 --> 00:31:47.180
demo that I just completed.

00:31:47.250 --> 00:31:50.950
You'll see this in many compositions
because it's a very useful way to

00:31:51.000 --> 00:31:53.570
get data into your application.

00:31:56.490 --> 00:31:59.760
Now,
this composition that I'm showing you

00:31:59.810 --> 00:32:01.230
is completely compatible with Tiger.

00:32:01.410 --> 00:32:07.270
Everything you're seeing can be done
with patches that will work on Tiger.

00:32:07.390 --> 00:32:10.600
But let's see what we can do with
new patches in Leopard in order

00:32:10.600 --> 00:32:12.710
to spruce it up a little bit.

00:32:13.570 --> 00:32:19.010
First thing,
this JavaScript I've created is sorted

00:32:19.920 --> 00:32:21.900
in order to make my point clear.

00:32:22.180 --> 00:32:24.310
But if I change this data,

00:32:24.860 --> 00:32:28.870
You'll get unsorted values and
this may be closer to what is

00:32:29.010 --> 00:32:30.800
happening in your application.

00:32:30.800 --> 00:32:36.630
Because say you save the data
in the high scores data file

00:32:37.120 --> 00:32:40.310
chronologically or just randomly,
you may want to be

00:32:40.330 --> 00:32:42.200
able to sort that data.

00:32:42.200 --> 00:32:45.620
So, new in Leopard,
we have a structure sort.

00:32:49.360 --> 00:32:50.950
The interesting thing
about the structure sort,

00:32:50.960 --> 00:32:56.360
of course, is the sorting descriptor,
which allows you to define

00:32:56.790 --> 00:33:01.300
what item in the structure
you're going to be sorting on.

00:33:01.350 --> 00:33:05.220
Because structures may have
many types of numerical data,

00:33:05.220 --> 00:33:10.300
or you may want to sort on the
alphanumeric value of a string,

00:33:10.500 --> 00:33:15.220
you have the ability to set the
sorting descriptor based on a

00:33:15.280 --> 00:33:18.090
dotted path into the structure.

00:33:20.420 --> 00:33:25.830
Now let's talk about something that
most people just try to ignore,

00:33:25.830 --> 00:33:31.040
and that is how this menu
has kind of got jaggy edges.

00:33:31.130 --> 00:33:33.630
If you're an OpenGL programmer,
you know the reason behind this is

00:33:33.640 --> 00:33:36.390
because OpenGL works on discrete pixels.

00:33:36.540 --> 00:33:40.300
But for you as developers and your users,
don't care about those discrete pixels.

00:33:40.300 --> 00:33:42.270
They just want smooth edges.

00:33:42.430 --> 00:33:45.630
Well, new in Leopard,
we've added the ability to make

00:33:45.910 --> 00:33:48.330
sprites anti-aliased on the edges.

00:33:48.630 --> 00:33:53.000
Let's go ahead and dive down to
where the sprites are rendered.

00:33:53.190 --> 00:33:54.960
You'll see here,

00:33:55.870 --> 00:34:00.820
In the settings panel of the inspector,
we have the ability to give

00:34:01.400 --> 00:34:04.590
it some anti-aliased edges.

00:34:05.300 --> 00:34:10.100
This only works on the sprite patch
because we wanted to make sure

00:34:10.100 --> 00:34:11.800
that you are using this properly.

00:34:11.800 --> 00:34:14.340
It can use some extra resources.

00:34:14.340 --> 00:34:17.670
It's also important to note
that the sprites that have the

00:34:17.670 --> 00:34:21.500
anti-aliasing setting on need to have
a blending of over or add because

00:34:21.640 --> 00:34:25.550
the sprites are actually compositing
with the layers below them.

00:34:29.920 --> 00:34:33.720
Next thing I'd like to do,
this Ducati video looks pretty nice,

00:34:33.720 --> 00:34:36.870
but what if I wanted to
apply an effect on it?

00:34:37.150 --> 00:34:41.580
I may or may not have time to actually
think about a core image kernel to

00:34:41.580 --> 00:34:46.020
write and apply an effect to the movie,
but wouldn't it be great if I could

00:34:46.170 --> 00:34:48.330
farm that work off to somebody else?

00:34:48.410 --> 00:34:51.290
If I could, say,
create a composition which applied

00:34:51.290 --> 00:34:56.710
that effect and then just load that
in on the fly in my composition.

00:34:56.790 --> 00:35:00.330
Well, new in Leopard,
we have the new Composition Loader.

00:35:01.620 --> 00:35:08.430
This is a very powerful concept because
it allows you to modularize your

00:35:08.430 --> 00:35:13.400
compositions and load them on the fly.

00:35:14.550 --> 00:35:19.550
But so as an extension to that,
we also have the Composition Repository,

00:35:19.560 --> 00:35:24.270
which provides a set of filters which
you can use in your application.

00:35:24.360 --> 00:35:27.970
It includes-- we haven't really talked
about some of the other things that

00:35:28.040 --> 00:35:31.260
Composition Repository provides for you,
but image filters are

00:35:31.260 --> 00:35:32.080
one of the most useful.

00:35:32.230 --> 00:35:36.550
We also have animations for those of you
who have-- want to display backgrounds,

00:35:36.550 --> 00:35:42.080
or we have music visualizers,
as Alessandro talked about this morning.

00:35:42.420 --> 00:35:50.210
So in order to configure this composition
loader to work as an image filter,

00:35:50.270 --> 00:35:55.090
we can go to the settings and
auto-configure from a protocol.

00:35:56.820 --> 00:35:59.950
In this case,
we're going to use Image Filter as

00:35:59.950 --> 00:36:02.140
a protocol we're going to use.

00:36:02.270 --> 00:36:07.840
Now,
you could use the input ports here and

00:36:07.840 --> 00:36:12.370
create those ports on your own manually.

00:36:12.970 --> 00:36:16.570
But the auto-configure from protocol
is a convenience feature to allow you

00:36:16.570 --> 00:36:22.420
to get the required input ports to the
composition loader without any work.

00:36:22.440 --> 00:36:26.960
Now when we route the image
through here and set the location,

00:36:26.960 --> 00:36:28.820
let's talk about the location first.

00:36:28.840 --> 00:36:32.840
Location is, of course,
going to be a URL on disk.

00:36:32.840 --> 00:36:36.860
You can load any kind of composition
and speak to the inputs of that

00:36:36.970 --> 00:36:41.560
composition using these inputs here
as long as they're named the same.

00:36:42.680 --> 00:36:45.970
But as a special case for
the composition repository,

00:36:45.970 --> 00:36:50.610
you can use the identifier of a
composition with a forward slash

00:36:50.800 --> 00:36:55.330
at the beginning in order to load a
composition directly from the repository.

00:36:55.340 --> 00:36:57.260
So I'm going to use a film stock.

00:36:59.860 --> 00:37:05.210
And there instantly you can see the
video playing is black and white.

00:37:05.290 --> 00:37:09.680
It's got some changed aspect ratio
and a little bit of grain to give it

00:37:09.770 --> 00:37:12.400
kind of the right effect that we want.

00:37:13.730 --> 00:37:17.610
But let's say we wanted to mimic
a bar closer to San Francisco.

00:37:17.840 --> 00:37:19.650
I could change this.

00:37:19.650 --> 00:37:22.230
Right now we're on the fly
to something you might be

00:37:22.310 --> 00:37:29.210
familiar with in Photo Booth,
and that's the Pop Art effect.

00:37:34.700 --> 00:37:37.990
All right, let's see what else we can do
to this composition to make

00:37:37.990 --> 00:37:40.010
it just a little bit better.

00:37:44.900 --> 00:37:47.560
Actually,
let's take a look at some compositions,

00:37:47.580 --> 00:37:50.750
some patches that we,
I didn't have a chance to

00:37:50.750 --> 00:37:53.950
fit into this demonstration,
but we're really excited

00:37:53.950 --> 00:37:57.370
about them and we think that
you will enjoy them as well.

00:37:58.360 --> 00:38:04.310
I'm going to save this as
a new file on the desktop.

00:38:08.640 --> 00:38:13.380
Now I can demonstrate the
Compare Compositions feature,

00:38:13.510 --> 00:38:18.500
which is a window allowing you to see
the differences between two compositions.

00:38:18.500 --> 00:38:30.320
If I load up the original
composition on the right side here,

00:38:39.530 --> 00:38:42.590
You can see the differences
between these two compositions

00:38:42.910 --> 00:38:46.180
are demonstrated in red here.

00:38:46.610 --> 00:38:49.260
And this allows me to
remember what I had forgotten,

00:38:49.260 --> 00:38:54.500
and that is I actually want to add the
ability to move the menu out of the way.

00:38:54.530 --> 00:38:58.010
So let's go ahead and open this back up.

00:39:02.840 --> 00:39:09.930
Now,
the menu is a great item here in the way,

00:39:09.930 --> 00:39:09.930
but...

00:39:11.800 --> 00:39:14.440
I'd really like to be able
to move it out of the way,

00:39:14.580 --> 00:39:17.400
just kind of on the
fly in my application.

00:39:17.420 --> 00:39:20.820
Maybe the user wants to see
what's going on in the background.

00:39:21.190 --> 00:39:25.650
Well, since this menu is situated
in a 3D environment,

00:39:25.650 --> 00:39:29.300
I can move that simply by
showing the patch parameters and

00:39:29.300 --> 00:39:32.140
scaling around this number here.

00:39:32.380 --> 00:39:35.690
But I really know what values I want.

00:39:35.710 --> 00:39:37.680
I just want to go between two presets.

00:39:37.850 --> 00:39:42.790
So the best way to do that is to use
a multiplexer to set those presets.

00:39:46.010 --> 00:39:52.930
I have two presets,
so I can go ahead and...

00:39:53.580 --> 00:39:59.120
Change the number of inputs to
two and make them number inputs.

00:39:59.160 --> 00:40:01.110
And then what I can do

00:40:02.510 --> 00:40:08.640
is set those presets
here on the input ports.

00:40:13.700 --> 00:40:24.700
( Transcript missing )

00:40:27.660 --> 00:40:33.240
go between two positions of the
menu just by sliding this slider.

00:40:33.290 --> 00:40:35.260
Of course,
I could also set this zero and one here.

00:40:35.260 --> 00:40:37.580
But I don't really want
to remember zero and one,

00:40:37.580 --> 00:40:41.600
and the slider doesn't give me any clue
about what position the menu is in.

00:40:41.650 --> 00:40:46.160
So, new in Leopard,
I have the ability to add labels to

00:40:46.160 --> 00:40:49.390
that menu position published input.

00:40:49.390 --> 00:40:53.320
I can simply insert an input splitter,
which automatically

00:40:53.320 --> 00:40:56.590
creates an index splitter,
and change the type of that

00:40:56.590 --> 00:40:59.290
to use labeled indices.

00:40:59.290 --> 00:41:03.180
If I label this menu up and menu down, I

00:41:08.920 --> 00:41:12.120
You'll see that the input parameters
allow me to switch directly

00:41:12.550 --> 00:41:15.710
between the up and down position.

00:41:16.570 --> 00:41:21.950
You'll also, new in Leopard,
you'll also find that this pop-down menu

00:41:21.960 --> 00:41:31.240
and any published ports are provided to
you as a view that you can put in your

00:41:31.240 --> 00:41:32.560
application called the QC parameter view,
QC patch parameter view.

00:41:32.990 --> 00:41:39.580
This allows you to give your composition
a nice interface without having to

00:41:39.580 --> 00:41:42.920
actually query the ports and see
what type they are and all that jazz.

00:41:44.960 --> 00:41:48.950
Now what if I wanted to change the
behavior of the menu so that it

00:41:49.000 --> 00:41:51.680
slides in a more graceful fashion?

00:41:52.180 --> 00:41:54.400
It would be great if
I could just smooth it out.

00:41:54.400 --> 00:41:58.620
So with NU in Leopard,
we have a smooth patch.

00:41:59.790 --> 00:42:03.810
Which goes between one value and
another value in a smooth way,

00:42:03.940 --> 00:42:06.700
with a settable speed
here on the input ports.

00:42:06.700 --> 00:42:13.970
Now when I change this,
the menu glides into place.

00:42:21.510 --> 00:42:24.840
So now I can really go and show
you some of those new patches that

00:42:24.870 --> 00:42:26.960
didn't fit in that presentation.

00:42:29.940 --> 00:42:33.100
One idea you have in Quartz Composer
is the idea that you need to

00:42:33.100 --> 00:42:36.080
save a state in your composition.

00:42:36.300 --> 00:42:39.240
So I have this Pin the Tail on
the Donkey composition,

00:42:39.240 --> 00:42:45.190
which allows me to click and
hold the position of the tail.

00:42:45.350 --> 00:42:47.570
If you saw Alessandro's
session this morning,

00:42:47.750 --> 00:42:51.060
you'll know that's done
by the sample on hold.

00:42:51.060 --> 00:42:53.400
What the sample on hold
does is has three inputs.

00:42:53.400 --> 00:42:56.020
One is what to remember,
the second one is when to remember it,

00:42:56.110 --> 00:42:57.560
and the third one is when to forget.

00:42:57.780 --> 00:43:03.410
In this case, we want to remember the
X position of the mouse and the

00:43:03.410 --> 00:43:03.410
Y position on the second one.

00:43:03.530 --> 00:43:08.500
We also want to remember it when the
left mouse button is pushed in both

00:43:08.500 --> 00:43:10.360
of those sample and hold patches.

00:43:10.360 --> 00:43:12.530
And when to forget, well,
we don't really need to

00:43:12.580 --> 00:43:13.660
forget any time soon.

00:43:13.830 --> 00:43:17.890
So the output value is just set on
the X and Y position of the sprite.

00:43:19.790 --> 00:43:24.130
The values compatible with the
sample and whole patch are anything

00:43:24.130 --> 00:43:25.250
that Quartz Composer handles.

00:43:25.390 --> 00:43:27.230
That could be images,
it could be numbers,

00:43:27.290 --> 00:43:31.090
it could be structures,
or it could be booleans or strings.

00:43:31.470 --> 00:43:36.600
The sample and hold idea can be extended
to another new patch called the queue,

00:43:36.600 --> 00:43:42.540
which not only remembers one item,
it can remember a whole

00:43:43.310 --> 00:43:46.500
series of values to store.

00:43:47.170 --> 00:43:49.020
The queue patch is just
like the sample on hold.

00:43:49.020 --> 00:43:53.060
It has what to remember is the value,
when to remember it is the filling value,

00:43:53.100 --> 00:43:55.530
and the reset signal is
still when to forget.

00:43:55.820 --> 00:43:59.140
We also have an additional parameter,
and it's the queue size.

00:43:59.220 --> 00:44:01.800
In this case, it's four,
because I want to remember

00:44:01.800 --> 00:44:05.720
the last four clicks,
four tries for that pin

00:44:05.850 --> 00:44:07.550
the tail on the donkey.

00:44:07.700 --> 00:44:11.160
The output of this is a queue,
and that's, of course, just a structure,

00:44:11.160 --> 00:44:12.530
a list.

00:44:12.610 --> 00:44:14.620
So what do we do when
we have a structure?

00:44:14.620 --> 00:44:16.470
We use the iterator.

00:44:16.810 --> 00:44:18.400
And it's just like you would imagine.

00:44:18.400 --> 00:44:22.570
You have the X positions as a structure.

00:44:22.660 --> 00:44:26.840
You split the items of that structure
using the structure index member

00:44:27.160 --> 00:44:31.350
and place them on the billboard
where this tail is being drawn.

00:44:32.230 --> 00:44:34.370
You'll also notice that
I'm using a pulse patch.

00:44:34.510 --> 00:44:37.200
Because the cue can remember
more than one value,

00:44:37.230 --> 00:44:39.680
you want to make sure that
it only remembers the instant

00:44:39.700 --> 00:44:41.480
the mouse button is pushed.

00:44:41.840 --> 00:44:49.380
So because the mouse button can
have a kind of square input where it

00:44:49.420 --> 00:44:52.840
instantly changes from zero to one,
but then stays there for a long time,

00:44:53.000 --> 00:44:58.860
the pulse patch can detect when that
value goes from false to true and

00:44:58.860 --> 00:45:05.470
send out a single pulse frame to that
filling parameter of the cue patch.

00:45:07.420 --> 00:45:10.900
The next composition I have
displays something that will be

00:45:10.900 --> 00:45:17.060
familiar to you if you've used more
traditional rendering packages,

00:45:17.060 --> 00:45:19.070
and that is the timelines.

00:45:19.860 --> 00:45:24.550
If you want to be able to define
arbitrary motion in a composition,

00:45:24.550 --> 00:45:29.220
then it's useful to be able
to use timelines to do that.

00:45:29.360 --> 00:45:31.440
So let's see how that works.

00:45:33.470 --> 00:45:37.440
Here is the definition
of those timelines.

00:45:37.750 --> 00:45:41.200
You have keyframes,
you have control points,

00:45:41.370 --> 00:45:47.300
you can move these around and come
up with all sorts of crazy motion.

00:45:47.430 --> 00:45:50.890
You can add as many timelines
as you want and name them.

00:45:52.600 --> 00:45:55.600
and you have all sorts
of power with that.

00:45:55.740 --> 00:45:58.010
Now, if you remember Tiger,
any time you click off

00:45:58.010 --> 00:46:00.940
the Timelines patch,
that goes away.

00:46:01.610 --> 00:46:03.710
But new in Leopard,
we have the ability to go

00:46:03.750 --> 00:46:07.390
to show patch settings,
and that'll give you a solid

00:46:07.390 --> 00:46:12.370
window that doesn't go away when
you choose different patches.

00:46:18.440 --> 00:46:23.600
Next,
I'd like to show you this noise patch.

00:46:23.690 --> 00:46:25.760
In Quartz Composer,
it's always been possible to

00:46:25.760 --> 00:46:28.260
get high-quality random values.

00:46:28.300 --> 00:46:32.700
But because Quartz Composer
is a 3D environment,

00:46:32.700 --> 00:46:37.250
it's important to get those random
values in multiple dimensions.

00:46:37.570 --> 00:46:42.300
Since the random patch is essentially
just a one-dimensional stream of values,

00:46:42.380 --> 00:46:48.170
now you can insert a
position in space and get 1D,

00:46:48.310 --> 00:46:51.190
2D or 3D noise.

00:46:54.500 --> 00:46:58.250
As you can see,
this rotating cube is simply the

00:46:58.250 --> 00:47:01.950
3D noise displayed on screen.

00:47:08.080 --> 00:47:13.500
Next I have two patches that work in
tandem that we think are really neat.

00:47:13.500 --> 00:47:16.350
These are two separate compositions,
but they're synchronized

00:47:16.460 --> 00:47:20.920
using the network broadcaster
and network receiver patches.

00:47:26.410 --> 00:47:27.970
Of course,
this is just running on one machine,

00:47:27.970 --> 00:47:30.000
but you can imagine this
happening in a lab or something.

00:47:30.000 --> 00:47:33.480
It communicates over UDP on
the local area network.

00:47:33.520 --> 00:47:36.170
We want to stress the fact that
this is not for mission-critical

00:47:36.260 --> 00:47:37.520
synchronization across the world.

00:47:37.520 --> 00:47:43.220
It's simply a string
transmitted over the network.

00:47:43.220 --> 00:47:46.250
The string can't be more
than about 200 characters.

00:47:46.340 --> 00:47:50.300
As you can see,
the data generators get the data here

00:47:50.750 --> 00:47:53.520
and output it on the broadcaster sprite.

00:47:53.680 --> 00:47:57.400
It also packs it into a sort of datagram
and transmits it over the network

00:47:57.500 --> 00:48:00.050
using this network broadcaster patch.

00:48:00.120 --> 00:48:04.790
On the other side, we receive the data,
which you can see here with the

00:48:04.850 --> 00:48:06.920
colon-separated numerical values.

00:48:07.020 --> 00:48:08.220
It's a string.

00:48:08.390 --> 00:48:12.220
We separate it out and
then put it on the sprite.

00:48:12.610 --> 00:48:16.140
If we close the Broadcaster Renderer,
you'll notice that the glow

00:48:16.140 --> 00:48:18.500
ball stops on the receiver end.

00:48:18.500 --> 00:48:22.480
So that's how you know that the
data is in fact transmitting.

00:48:23.460 --> 00:48:26.800
I'm going to go back to slides and
just talk about some patches you might

00:48:26.800 --> 00:48:30.370
want to explore on your own time.

00:48:31.280 --> 00:48:37.740
There's some advanced patches for those
of you who are image processing mavens.

00:48:37.740 --> 00:48:41.850
Image Histogram and Image Pixel are
very powerful patches and I hope that

00:48:41.870 --> 00:48:48.220
those of you who know kind of the
difference between them will take

00:48:48.220 --> 00:48:48.220
a minute to explore what they do.

00:48:48.640 --> 00:48:52.180
We also have open sound control
client and server patches for

00:48:52.180 --> 00:48:57.070
communicating with outside devices,
as well as patches geared for

00:48:57.500 --> 00:49:00.060
communicating with hardware,
such as the Apple Remote and

00:49:00.060 --> 00:49:04.240
HID-compliant hardware devices.

00:49:04.370 --> 00:49:07.540
We have some numeric patches,
some more string patches

00:49:07.540 --> 00:49:10.240
such as grep patch,
and of course the OpenGL Shading

00:49:10.240 --> 00:49:13.560
Language is the newest programming
patch for you to explore just

00:49:13.560 --> 00:49:15.100
what you can do with GLSL.

00:49:17.280 --> 00:49:20.630
And to talk about some of the
research applications that

00:49:20.630 --> 00:49:23.880
Quartz Composer is capable of,
I'd like to invite Kevin up

00:49:23.880 --> 00:49:25.710
on stage to talk about.

00:49:30.380 --> 00:49:30.950
All right.

00:49:31.150 --> 00:49:31.760
Hello, everybody.

00:49:31.870 --> 00:49:36.420
So I'm going to talk to you about the
redesigned Core Image Filter patch

00:49:36.580 --> 00:49:38.660
that we have now in Leopard.

00:49:38.840 --> 00:49:44.310
So this guy used to be called
Core Image Kernel Patch in Tiger,

00:49:44.310 --> 00:49:44.310
and we did not only change one word.

00:49:44.500 --> 00:49:47.210
For those of you who are
not familiar with this,

00:49:47.210 --> 00:49:50.230
a core image kernel is a little
bit of software that runs on the

00:49:50.230 --> 00:49:53.000
GPU and that does image processing in
parallel using the power of the GPU.

00:49:53.000 --> 00:49:55.040
It's pretty fast and it's pretty cool.

00:49:55.040 --> 00:50:01.200
What you used to do in Tiger is that you
type your little kernel and you add the

00:50:01.200 --> 00:50:05.260
input ports of your patch that reflected
the input arguments of your kernel.

00:50:05.260 --> 00:50:06.770
So here you have the simple case.

00:50:06.840 --> 00:50:09.230
It takes an image, returns the image.

00:50:09.350 --> 00:50:12.050
It always returns an image only,
but it can take multiple images,

00:50:12.210 --> 00:50:12.840
floats and so on.

00:50:14.400 --> 00:50:15.750
So,

00:50:15.960 --> 00:50:20.580
So why did we move from kernel to filter?

00:50:20.980 --> 00:50:22.940
Well,
it's because in the Core Image world,

00:50:22.940 --> 00:50:25.020
a Core Image filter can be a
lot more than just a kernel.

00:50:25.020 --> 00:50:27.570
It can be two kernels, three kernels,
five kernels, or lots of kernels.

00:50:27.750 --> 00:50:31.250
And domain of definition,
lots of other options that you can set.

00:50:31.910 --> 00:50:36.120
So what we did is that we added all,
we brought all what

00:50:36.120 --> 00:50:38.160
Core Image can do at the QC level.

00:50:38.160 --> 00:50:45.100
And what it means is that QC is now the
pretty much perfect environment for you

00:50:45.100 --> 00:50:47.700
to prototype your Core Image filters.

00:50:47.700 --> 00:50:50.130
And the reason why is because
you have immediate feedback

00:50:50.230 --> 00:50:51.380
once you're getting QC.

00:50:51.380 --> 00:50:53.470
So you type something and you see
immediately the result on screen,

00:50:53.470 --> 00:50:55.040
you change the parameter,
you change the kernel,

00:50:55.040 --> 00:50:56.900
you change something,
and you see what's happening.

00:50:56.900 --> 00:50:59.040
So you don't have to set up
your Xcode project to build,

00:50:59.100 --> 00:51:01.840
to compile, and to do your test images
and that kind of thing.

00:51:01.840 --> 00:51:05.040
You can do all these things to
see the effect of what you do.

00:51:05.040 --> 00:51:06.650
You can see it immediately.

00:51:06.650 --> 00:51:09.860
And the result is that you can
be more efficient and so you can

00:51:09.860 --> 00:51:11.760
go far away in a faster manner.

00:51:11.800 --> 00:51:15.430
And I'm going to show you in
just a little bit some examples

00:51:15.510 --> 00:51:19.230
of the possibilities and the
location you can go to with this

00:51:19.640 --> 00:51:22.030
redesigned Core Image filter patch.

00:51:22.040 --> 00:51:24.620
I'm going to show you some
image processing and some

00:51:24.620 --> 00:51:26.080
for scientific research.

00:51:26.080 --> 00:51:27.190
Okay.

00:51:27.700 --> 00:51:32.200
So, one example I'm going to show you
is going to be a WaveLay transform.

00:51:32.200 --> 00:51:35.830
It's pretty cool math for
those of you who like math.

00:51:35.850 --> 00:51:41.370
And it's at the core of the JPEG 2000
high-quality image compression.

00:51:41.600 --> 00:51:45.920
And so that's what it looks like,
it's level 4.

00:51:45.920 --> 00:51:49.300
And that's pretty complex,
lots of things.

00:51:49.300 --> 00:51:52.230
And that's a little -- that's too
bad because you see here you have

00:51:52.230 --> 00:51:54.670
four times the same functional block.

00:51:54.670 --> 00:51:58.730
So you would like to be able to just
put that in a function and on the

00:51:58.730 --> 00:52:01.470
loop and something like iterate this.

00:52:01.700 --> 00:52:05.450
But this one works just by chaining
one kernel per patch together.

00:52:05.520 --> 00:52:08.380
So it's possible with
one kernel per patch.

00:52:08.380 --> 00:52:10.580
But, you know,
so we would like to improve this.

00:52:10.580 --> 00:52:12.930
And if you look a little closer,
you see you have lots

00:52:13.010 --> 00:52:14.020
of times the same patch.

00:52:14.020 --> 00:52:18.600
So we would like to have a better way to
deal with all these kernel duplications.

00:52:18.800 --> 00:52:22.720
So now in the core image filter patch,
you can define more than one kernel.

00:52:22.720 --> 00:52:23.660
So that's one thing.

00:52:23.660 --> 00:52:26.000
So then you need to say, well,
you need to say to your filter

00:52:26.000 --> 00:52:28.250
which kernel is going to go first,
and then which kernel

00:52:28.250 --> 00:52:30.660
is going to go after,
and so these things.

00:52:30.660 --> 00:52:33.890
So to do this,
we added a second editable text

00:52:33.900 --> 00:52:37.430
view that is JavaScript environment
in which you apply your kernel.

00:52:37.440 --> 00:52:41.960
You call the apply function on each
kernel variable that becomes available

00:52:41.960 --> 00:52:45.690
in this JavaScript environment.

00:52:45.800 --> 00:52:47.890
So I just want to say
something now real quick,

00:52:47.940 --> 00:52:49.690
is that this stuff is for advanced users.

00:52:49.700 --> 00:52:55.620
So if you create a new core
image filter patch in Leopard,

00:52:55.620 --> 00:52:59.540
it's going to behave exactly
just like it used to in Tiger.

00:52:59.550 --> 00:53:02.360
But for those of you who might
want to do advanced users,

00:53:02.420 --> 00:53:06.300
advanced image processing, and so on,
well, you have the option of adding

00:53:06.300 --> 00:53:09.020
the extra power of core image.

00:53:09.020 --> 00:53:13.500
So what you see now is that this kernel,
and you have all this apply function

00:53:13.500 --> 00:53:17.100
is encompassed in between inside
a main function of JavaScript.

00:53:17.100 --> 00:53:21.110
And so in this advanced mode,
it's now the input arguments of this

00:53:21.120 --> 00:53:26.480
main function that becomes the input
port of your core image filter.

00:53:26.640 --> 00:53:29.640
And so here, for instance,
I just added an index.

00:53:29.660 --> 00:53:33.000
And I can use this index to
preprocess and preprocess data

00:53:33.000 --> 00:53:35.560
before fitting into my kernels.

00:53:35.580 --> 00:53:40.710
Or I can also change the
kernel suite in itself.

00:53:40.860 --> 00:53:45.350
For instance, here I applied a number of
times iteratively regarding

00:53:45.350 --> 00:53:46.300
the count input parameter.

00:53:46.300 --> 00:53:47.970
input parameter.

00:53:48.470 --> 00:53:51.100
So that's it.

00:53:51.110 --> 00:53:52.640
So that's one thing that we added.

00:53:52.710 --> 00:53:55.430
So you can define multiple kernels.

00:53:55.550 --> 00:53:58.750
Another thing is the possibility
to define domain of definition,

00:53:58.750 --> 00:53:59.290
or DoD.

00:53:59.400 --> 00:54:02.090
So domain of definition is
pretty important for this

00:54:02.180 --> 00:54:05.440
kind of filter that transform,
that explode, you know, for which,

00:54:05.450 --> 00:54:09.180
so domain of definition, I'm sorry,
is this region in which the result image

00:54:09.240 --> 00:54:10.980
of your kernel is going to be defined.

00:54:10.980 --> 00:54:13.640
And for some filters,
kernels just like this, a zoom blur,

00:54:13.640 --> 00:54:16.700
the region where your filter is
defined is bigger than the domain

00:54:16.700 --> 00:54:18.720
of definition of the input image.

00:54:18.740 --> 00:54:21.420
So you need to say to your kernel
that this is going to be the case,

00:54:21.420 --> 00:54:23.150
and to do this,
you use the first argument

00:54:23.230 --> 00:54:24.180
of the apply function.

00:54:24.320 --> 00:54:26.520
So it's a rectangle,
and it can be unions of rectangle,

00:54:26.520 --> 00:54:29.040
intersection, rotation, and so on,
lots of funky things.

00:54:29.040 --> 00:54:32.110
And we wrap the CI filter shape for
those of you who are familiar with this

00:54:32.110 --> 00:54:35.140
to do all these operational rectangles.

00:54:35.140 --> 00:54:37.710
So another thing is region of interest,
which is, if I can help you,

00:54:37.710 --> 00:54:39.830
the domain of definition
in the other direction.

00:54:39.940 --> 00:54:44.740
So a region of interest is which,
given a destination rectangle,

00:54:44.740 --> 00:54:49.620
what is the source rectangle that I need
to process this destination rectangle?

00:54:49.620 --> 00:54:52.900
And in the case of sub-sampling,
for instance, the default,

00:54:52.900 --> 00:54:54.900
which is identity, doesn't work.

00:54:54.940 --> 00:54:54.940
You need to say that.

00:54:54.970 --> 00:54:57.410
So you say that the source
rectangle is actually bigger,

00:54:57.450 --> 00:54:59.390
and for this,
you set the ARI handler property on

00:54:59.390 --> 00:55:01.870
the kernel variable to a function,
which is JavaScript,

00:55:01.870 --> 00:55:03.880
so all of this is in the
JavaScript environment,

00:55:03.880 --> 00:55:06.260
and this function is going to
take the destination rectangle

00:55:06.260 --> 00:55:10.180
and return the region of interest,
so the source rectangle.

00:55:10.380 --> 00:55:16.240
One last thing is that you can
access from within the JavaScript all

00:55:16.240 --> 00:55:18.680
the built-in core image filters
that are shipped in the system.

00:55:18.680 --> 00:55:22.000
So you don't have to redo
the color transformation,

00:55:22.020 --> 00:55:27.200
geometry, compositing and all the
stuff that CIS already does

00:55:27.270 --> 00:55:28.080
where you blur and so on.

00:55:28.220 --> 00:55:29.760
So it's very easy to do.

00:55:29.760 --> 00:55:33.020
You just write the name of
the kernel of the filter,

00:55:33.020 --> 00:55:34.530
core image filter,
built-in core image filter,

00:55:34.730 --> 00:55:35.370
and you apply it.

00:55:35.420 --> 00:55:38.520
You give it a name and it works fine.

00:55:38.880 --> 00:55:45.710
So now let me show you an example
of the Core Image filter patch

00:55:45.740 --> 00:55:55.060
in action for advanced users.

00:55:55.350 --> 00:55:55.500
So now -- let me go there.

00:56:00.390 --> 00:56:00.800
Here we go.

00:56:00.800 --> 00:56:04.020
So that's this fabulous advertisement
that we absolutely all adore,

00:56:04.500 --> 00:56:09.850
which is the Ducati
motorbike something ad.

00:56:09.860 --> 00:56:12.180
So you even have sound.

00:56:12.180 --> 00:56:13.880
So it doesn't look like
a lot is happening.

00:56:13.880 --> 00:56:16.640
You have the advertisement full quality,
so you're very happy.

00:56:16.640 --> 00:56:17.500
It's in HD, you see.

00:56:17.500 --> 00:56:20.440
So here you have,
if you look at the composition,

00:56:20.440 --> 00:56:23.520
you have a movie patch that
feeds images and that goes

00:56:23.520 --> 00:56:25.380
through a core image filter.

00:56:25.380 --> 00:56:26.860
So actually something
seems to be happening.

00:56:26.860 --> 00:56:30.540
So what this core image filter does
is does as much as what I said before,

00:56:30.540 --> 00:56:33.010
it's doing a full-fledged wave-led
decomposition and recomposition.

00:56:33.020 --> 00:56:36.100
And so this stuff is used in JPEG 2000.

00:56:36.100 --> 00:56:37.940
For those of you who are
image processing people,

00:56:37.940 --> 00:56:44.140
you know that wave-led waveform
is less at compression level zero.

00:56:44.140 --> 00:56:45.140
So here that's what we have.

00:56:45.140 --> 00:56:45.600
We have zero.

00:56:45.640 --> 00:56:48.660
But we can in real time,
I'm going to start,

00:56:48.790 --> 00:56:51.830
we can in real time adjust the
compression parameter and see the effect

00:56:51.830 --> 00:56:53.350
of compression in the input image.

00:56:53.430 --> 00:56:55.820
And in real time,
a lot of stuff is happening over there.

00:56:55.820 --> 00:56:56.480
Lots of math.

00:56:56.550 --> 00:56:59.660
All the kernel that you saw before,
that's what is going on there.

00:56:59.660 --> 00:57:03.910
And it's in real time
happening on your video.

00:57:03.940 --> 00:57:06.700
You can also stop.

00:57:06.700 --> 00:57:09.220
So yeah, so what I want to say,
so all this stuff is

00:57:09.220 --> 00:57:11.300
happening on the GPU,
the JavaScript from the CPU,

00:57:11.300 --> 00:57:13.100
but it's just there to
build the suite of kernels.

00:57:13.210 --> 00:57:18.500
So the kernel function,
all this kernel junction stuff,

00:57:18.630 --> 00:57:19.520
kernel one after the other.

00:57:19.710 --> 00:57:23.540
So the kernel recipe, the filter recipe,
but the evolution of the kernel function,

00:57:23.560 --> 00:57:27.200
the evolution of this kernel recipe,
so the core image filters is

00:57:27.200 --> 00:57:29.090
actually evaluated on the GPU.

00:57:29.190 --> 00:57:32.500
So that's where the expensive stuff is
going on because you have to process

00:57:32.500 --> 00:57:33.690
all these pixels of these bits.

00:57:35.010 --> 00:57:40.040
So, you can also use the same patch
to show you the wavelet transform

00:57:40.040 --> 00:57:42.420
at the decomposition level.

00:57:42.890 --> 00:57:46.950
So, you have all the multi edges,
multi resolution thing, which is, I mean,

00:57:46.950 --> 00:57:49.250
you know,
it's pretty exciting for people,

00:57:49.250 --> 00:57:51.080
like this kind of image processing stuff.

00:57:51.200 --> 00:57:53.360
You can change, you know,
you can see the effect of compression

00:57:53.360 --> 00:57:55.650
on the wavelet coefficient,
change the wavelet level.

00:57:55.780 --> 00:58:00.020
So, you have full compression,
then you have more.

00:58:00.020 --> 00:58:03.610
You can also save that as an
image filter to take a photo booth

00:58:03.720 --> 00:58:09.140
picture of decomposition of your
face to your friends and family.

00:58:09.140 --> 00:58:11.290
You know,
that's a secret feature of WebViewer.

00:58:11.300 --> 00:58:12.300
Secret secret.

00:58:12.300 --> 00:58:13.290
Nobody knew about it.

00:58:13.300 --> 00:58:14.300
Of course.

00:58:16.990 --> 00:58:18.940
So here we go.

00:58:18.940 --> 00:58:22.710
So I hope all the image processing
gurus over here are going to

00:58:22.720 --> 00:58:23.830
have a lot of fun with this.

00:58:23.990 --> 00:58:24.780
It's very practical.

00:58:24.780 --> 00:58:31.170
And I'm just going to show
you how the code looks like.

00:58:31.260 --> 00:58:32.100
so we have it here.

00:58:32.100 --> 00:58:35.320
We have some kernels,
so we have maybe a dozen,

00:58:35.320 --> 00:58:38.250
maybe a little more, convolution,
sub-sampling, so yeah,

00:58:38.250 --> 00:58:39.020
you can check it out.

00:58:39.020 --> 00:58:41.390
You have the source
available on the WC website.

00:58:41.740 --> 00:58:46.350
Here, that's a JavaScript,
so you have a little bit, but the -- so,

00:58:46.460 --> 00:58:50.140
but, okay, so this is a bunch of DODRIs,
so we use all the parts,

00:58:50.140 --> 00:58:52.800
so here that's just the
code for the recomposition,

00:58:52.800 --> 00:58:54.840
which is the main thing,
and here that the code

00:58:54.890 --> 00:58:57.280
for the decomposition,
which is just the hopper, so it's,

00:58:57.280 --> 00:59:00.730
you know, it's not insurmountable,
and if you had to do that in a CGA,

00:59:00.730 --> 00:59:02.360
it would be bad.

00:59:02.360 --> 00:59:04.280
It would be worse.

00:59:04.640 --> 00:59:10.140
So now a last example for computer
-- computer vision research,

00:59:10.140 --> 00:59:14.170
so stereo depth computation
from a stereo pair of camera.

00:59:14.250 --> 00:59:18.010
So you have left and right image,
and there is an algorithm up there -- so

00:59:18.130 --> 00:59:21.200
two cameras looking at the same scene,
a little distant one to the other.

00:59:21.420 --> 00:59:23.230
So there's one algorithm
up there that say that,

00:59:23.230 --> 00:59:26.000
you know, we're doing some translation
distance and minimum.

00:59:26.000 --> 00:59:27.660
You can actually find the depth.

00:59:27.660 --> 00:59:30.290
So we just did it in a couple
of hours' read in Teclon.

00:59:30.400 --> 00:59:31.700
And that's the result.

00:59:31.700 --> 00:59:33.620
So, you know, it's not too bad.

00:59:33.620 --> 00:59:36.310
White means closer,
and dark means far away.

00:59:36.310 --> 00:59:38.560
So, you know, pretty much get the idea.

00:59:38.560 --> 00:59:40.780
The lamp is closer and so on.

00:59:40.780 --> 00:59:42.890
But what is cool is that
now you have this depth map.

00:59:43.040 --> 00:59:44.540
So that's a depth map.

00:59:44.560 --> 00:59:46.560
But now you're in QC,
so you can use it to -- you can use

00:59:46.560 --> 00:59:49.580
all the other patches to visualize,
to interpret better this data.

00:59:49.730 --> 00:59:50.660
That's what we did.

00:59:50.730 --> 00:59:56.030
So you can just see -- explore
that in space using Sprite and

00:59:56.030 --> 01:00:02.090
visualize your depth map and
projecting on the HITPUS sprite.

01:00:02.090 --> 01:00:02.090
Thank

01:00:05.100 --> 01:00:06.600
Thank you.

01:00:06.600 --> 01:00:07.250
So you see that's nice.

01:00:07.320 --> 01:00:09.340
And then you can see even better
that you have a bunch of noise.

01:00:09.470 --> 01:00:11.780
I mean,
that's really -- I'm not -- you know,

01:00:11.780 --> 01:00:14.360
it's not a SIGGRAPH paper of next year.

01:00:14.620 --> 01:00:18.120
Just to show you what we
can do and to point out.

01:00:18.120 --> 01:00:20.570
So what we can do is actually
you can reuse what we just did,

01:00:20.580 --> 01:00:22.330
which is a JPEG 2000 thing.

01:00:22.440 --> 01:00:25.480
So we're just -- it's used for denoising,
so I can just insert the guy,

01:00:25.750 --> 01:00:26.900
have a noise threshold here.

01:00:27.010 --> 01:00:28.380
So here's the left and right image.

01:00:28.380 --> 01:00:30.610
I'm sorry,
left and right image going through

01:00:30.610 --> 01:00:35.700
the core image for the patch that
returns the depth map over here.

01:00:35.700 --> 01:00:38.610
So I'm just going to put that
through the JPEG 2000 patch with

01:00:38.690 --> 01:00:42.360
a noise threshold with a threshold
with a coefficient of 0.6.

01:00:42.560 --> 01:00:43.060
Let's go.

01:00:43.060 --> 01:00:43.790
Let's see.

01:00:43.830 --> 01:00:45.100
Let's insert that.

01:00:45.440 --> 01:00:46.840
And you see we're doing denoising.

01:00:46.940 --> 01:00:48.910
So you can play with that
and you can experiment.

01:00:49.000 --> 01:00:51.440
And you know it's very easy to
reuse the work you're doing.

01:00:51.440 --> 01:00:52.420
It's very fast.

01:00:52.420 --> 01:00:56.490
And the code, real quick.

01:00:57.490 --> 01:01:00.810
So you see this is easier
than we have transformed some

01:01:00.840 --> 01:01:05.640
kernels and the JavaScript.

01:01:05.650 --> 01:01:09.790
So the JavaScript, you know,
it fits in one page,

01:01:09.790 --> 01:01:11.730
so it's not too hard.

01:01:12.710 --> 01:01:14.700
Okay.

01:01:14.700 --> 01:01:15.610
Let me quit that.

01:01:15.750 --> 01:01:16.660
Oops, I'm sorry.

01:01:16.660 --> 01:01:18.370
Let me go back to slides, please.

01:01:25.300 --> 01:01:26.740
Thank you.

01:01:26.740 --> 01:01:31.690
Okay, yes, I need to change this line.

01:01:32.770 --> 01:01:33.180
So here we go.

01:01:33.280 --> 01:01:35.380
So just briefly,
check out the new JavaScript patch.

01:01:35.530 --> 01:01:36.980
It's improved.

01:01:36.980 --> 01:01:37.930
We did a lot of work over there.

01:01:38.120 --> 01:01:40.140
Now you can have typed
input and output ports.

01:01:40.140 --> 01:01:41.500
And globals are fully supported.

01:01:41.500 --> 01:01:48.370
So you can conserve state along
the execution of your composition.

01:01:48.370 --> 01:01:48.370
It's very powerful.

01:01:48.370 --> 01:01:48.370
OK, check it out.

01:01:48.370 --> 01:01:48.370
Thank you.

01:01:54.180 --> 01:01:55.520
All right,
I'm going to talk to you guys really

01:01:55.570 --> 01:01:57.940
quickly about composition optimization.

01:01:58.000 --> 01:01:59.520
Now that we've made
all these compositions,

01:01:59.540 --> 01:02:03.370
we want to make them fast on all
the hardware that Apple ships.

01:02:03.430 --> 01:02:06.930
And there are a few simple
things that you guys can do.

01:02:07.260 --> 01:02:09.830
First one,
only execute the necessary patches.

01:02:09.900 --> 01:02:12.800
It sounds obvious,
but a lot of people continue to execute

01:02:12.800 --> 01:02:15.030
patches that are no longer on screen.

01:02:15.110 --> 01:02:20.630
Use the enable input port on consumers
to disable all of the patches

01:02:20.690 --> 01:02:23.920
that they're pulling data from.

01:02:24.440 --> 01:02:27.640
Since most of what you deal with
in Quartz Composer is images,

01:02:27.790 --> 01:02:29.300
make sure that you optimize your images.

01:02:29.450 --> 01:02:34.530
There is no point in applying very large,
expensive effects on a large

01:02:34.530 --> 01:02:37.430
image if you're only going
to resize it down later.

01:02:37.440 --> 01:02:40.960
So make sure that your image
dimensions are what they need to be,

01:02:40.960 --> 01:02:43.630
and to make that more convenient,
we added an image

01:02:43.630 --> 01:02:45.010
resize patch in Leopard.

01:02:46.240 --> 01:02:48.190
Also factorize common images.

01:02:48.190 --> 01:02:51.470
If you need an image in
multiple different macro

01:02:51.470 --> 01:02:57.520
patches within Quartz Composer,
publish things up to the top

01:02:57.580 --> 01:03:00.500
level and have one copy of that
image rather than having multiple

01:03:00.500 --> 01:03:01.990
copies in all those macro patches.

01:03:01.990 --> 01:03:05.130
They're just taking up extra space.

01:03:05.580 --> 01:03:08.050
Like I said during my demo,
the render in image patch

01:03:08.100 --> 01:03:09.200
is incredibly powerful.

01:03:09.200 --> 01:03:12.400
You're going to run into it if you
want to do anything complicated.

01:03:12.400 --> 01:03:15.260
But it can also be very expensive.

01:03:15.260 --> 01:03:16.730
It can use up a lot of VRAM.

01:03:16.750 --> 01:03:20.160
So make sure you configure the
pixels wide and pixels high.

01:03:20.160 --> 01:03:22.970
Also make sure that you configure
the settings appropriately.

01:03:22.980 --> 01:03:26.100
There are some internal settings
on it that you can use to tweak

01:03:26.100 --> 01:03:27.560
the amount of VRAM it uses.

01:03:28.170 --> 01:03:30.680
Core Image is an incredibly
powerful technology.

01:03:30.680 --> 01:03:32.640
Just make sure you use it carefully.

01:03:32.640 --> 01:03:36.350
It can do some amazing things
that really can bog down even

01:03:36.350 --> 01:03:38.370
the best systems out there.

01:03:38.370 --> 01:03:41.230
So make sure that you sort of chain
them together in your composition

01:03:41.230 --> 01:03:43.990
so you're not bouncing from the
GPU to the CPU and back and forth.

01:03:44.060 --> 01:03:46.850
And this one's one that
most people don't consider.

01:03:46.850 --> 01:03:50.700
Adapt your compositions dynamically
to the hardware capabilities.

01:03:50.700 --> 01:03:54.200
We provide a couple patches such
as Host Info and OpenGL Info

01:03:54.200 --> 01:03:58.030
that allow you to tell what the
machine you're on is capable of.

01:03:58.060 --> 01:04:00.600
So for instance,
if Core Image isn't supported,

01:04:00.600 --> 01:04:04.000
go down a different path rather than,
you know, if Core Image isn't

01:04:04.040 --> 01:04:05.740
supported in hardware,
I mean,

01:04:05.740 --> 01:04:09.850
go down a different path as opposed to
continuing to fall back to software.

01:04:09.860 --> 01:04:11.090
So that's a couple of things
that we're going to talk about.

01:04:11.320 --> 01:04:16.240
And those are really the five things
that help with optimizing compositions.

01:04:16.320 --> 01:04:18.440
All of this information,
plus everything that we

01:04:18.440 --> 01:04:20.920
didn't have time to cover,
is in the release notes.

01:04:20.980 --> 01:04:22.050
It's under the Help menu.

01:04:22.260 --> 01:04:26.430
There's also a Getting Started guide
there if you are new to Quartz Composer.

01:04:27.230 --> 01:04:29.060
For more information,
contact Alan Schaefer.

01:04:29.060 --> 01:04:30.250
He's our graphic evangelist.

01:04:30.250 --> 01:04:34.530
We have a very active mailing list
with almost 1,000 members on it.

01:04:34.580 --> 01:04:36.600
All the members of the Quartz
Composer team are on it

01:04:36.600 --> 01:04:39.200
pretty much every day as well,
answering your questions.

01:04:39.200 --> 01:04:42.720
We have a lab tomorrow.

01:04:42.720 --> 01:04:44.580
We're going to be here
pretty much all afternoon,

01:04:44.580 --> 01:04:46.970
so feel free to come in and
ask us any questions you want.

01:04:47.000 --> 01:04:50.110
We also have a session tomorrow
on writing custom patches and

01:04:50.110 --> 01:04:52.340
integrating within your application.

01:04:52.340 --> 01:04:53.700
That's session number 421.

01:04:53.700 --> 01:04:55.570
It's at 1030 tomorrow morning.

01:04:57.250 --> 01:04:58.970
And in summary--

01:04:59.560 --> 01:05:02.120
We've changed the editor
and removed a bunch of the

01:05:02.120 --> 01:05:04.080
limitations that were in 10.4.

01:05:04.080 --> 01:05:06.420
We've made it easier to
create compelling content.

01:05:06.420 --> 01:05:10.610
With the Composition Repository,
we've made it easier for you to get that

01:05:10.750 --> 01:05:12.930
compelling content into applications.

01:05:12.940 --> 01:05:16.820
So what we want you to do is we want
you to take some time and explore.

01:05:16.820 --> 01:05:18.320
You know, poke around.

01:05:18.330 --> 01:05:21.070
Things that you didn't think were
possible with Quartz Composer,

01:05:21.140 --> 01:05:22.770
like a lot of the stuff
Kevin was showing,

01:05:22.940 --> 01:05:23.340
try them.

01:05:23.460 --> 01:05:25.880
See if you're able to do it now.

01:05:26.240 --> 01:05:28.420
And most of all, have fun,
because that's why we really

01:05:28.420 --> 01:05:30.770
want to be in software anyway.