WEBVTT

00:00:20.250 --> 00:00:24.490
>> Welcome to Xcode 3.0,
The New Development Workflow.

00:00:24.489 --> 00:00:28.449
I'm Chris Espinosa, the manager of the Xcode IDE Core group.

00:00:28.449 --> 00:00:35.189
( applause )

00:00:35.189 --> 00:00:38.079
>> And we're only going to talk about one thing today.

00:00:38.079 --> 00:00:42.729
And that's the new features of Xcode
that help you speed your work.

00:00:42.729 --> 00:00:48.379
Some of this content may be a repeat from last year when we
debuted Xcode 3.0 at this developer conference.

00:00:48.380 --> 00:00:53.600
But we've done a lot of work in the interim
to hone those features and improve them

00:00:53.600 --> 00:00:57.079
and we've added a couple new things
that we're going to show you.

00:00:57.079 --> 00:01:03.890
What you'll learn is about how configuring Xcode
installations and projects so that you can be interoperable

00:01:03.890 --> 00:01:07.909
and portable between Xcode 2.0 and Xcode 3.0.

00:01:07.909 --> 00:01:11.030
We'll talk about the new editor features
that help you focus on your work.

00:01:11.030 --> 00:01:15.210
You saw some of those in the Developer
Tools State of the Union on Monday.

00:01:15.209 --> 00:01:17.879
We'll talk about keeping the debug and build windows

00:01:17.879 --> 00:01:22.890
out of your way while you work using
things like data tips and message bubbles.

00:01:22.890 --> 00:01:26.260
We'll talk about how you can find
information and help faster.

00:01:26.260 --> 00:01:30.830
And we'll talk about keeping your work safe
in sharing it with others and being able

00:01:30.829 --> 00:01:34.469
to roll back changes so that you can be more innovative.

00:01:34.469 --> 00:01:37.819
So let's start with your development environment.

00:01:37.819 --> 00:01:38.969
How do you configure it?

00:01:38.969 --> 00:01:40.200
How do you set it up?

00:01:40.200 --> 00:01:47.060
Now historically when you've installed Xcode tools
on a version of Mac OS X you get a big folder of stuff

00:01:47.060 --> 00:01:50.840
in /developer and that's your
developer folder and there it is.

00:01:50.840 --> 00:01:54.240
You can't move it, you can't put it
anywhere else, you can't sim link it.

00:01:54.239 --> 00:02:00.979
But now in Xcode 3.0, your Xcode 3.0
folder is self contained.

00:02:00.980 --> 00:02:06.680
Everything is in one folder.

00:02:06.680 --> 00:02:06.770
( applause )

00:02:06.769 --> 00:02:09.629
>> There's nothing in system library
private frameworks anymore.

00:02:09.629 --> 00:02:14.799
We have our own copies of all the
tools that we install in usr bin.

00:02:14.800 --> 00:02:19.580
So everything's in one folder, you can take that
and you can put it on an external drive if you want,

00:02:19.580 --> 00:02:25.020
you can even share copies off a file server, but the
best thing is when we come out with the new version

00:02:25.020 --> 00:02:30.110
of Xcode 3.0, you can put it down
right next to it and switch back and forth.

00:02:30.110 --> 00:02:34.110
( applause )

00:02:34.110 --> 00:02:41.500
>> And even better, if you still have projects and are
sharing work with the group that needs to use Xcode 2.0

00:02:41.500 --> 00:02:47.240
to build for Tiger for shipping systems,
but you want to run on a Leopard system,

00:02:47.240 --> 00:02:51.070
you can put Xcode 2.5 down on the same system.

00:02:51.069 --> 00:02:54.539
( applause )

00:02:54.539 --> 00:02:58.759
>> So you can install the developer folder wherever
you wish, you can move and rename it as long

00:02:58.759 --> 00:03:02.759
as it remains self contained, that includes external drives,

00:03:02.759 --> 00:03:06.049
you can even put it on a, you know
thumb drive, plug it in and go.

00:03:06.050 --> 00:03:11.950
You don't need to reserve space on that volume all of
our caches are on the main boot drive and you can install

00:03:11.949 --> 00:03:15.679
and run separate versions of Xcode simultaneously.

00:03:15.680 --> 00:03:19.300
You can actually have Xcode 2.5
and 3.0 launched side by side

00:03:19.300 --> 00:03:22.640
with different projects building at the same time.

00:03:22.639 --> 00:03:25.179
( applause )

00:03:25.180 --> 00:03:26.629
>> Now there's some tricks to this.

00:03:26.629 --> 00:03:32.599
Every version will use its own tools so if you double
click a nib with an Xcode 2.5, it'll go

00:03:32.599 --> 00:03:35.780
to Interface Builder Tiger and if you double click a nib

00:03:35.780 --> 00:03:39.530
with a Xcode 3.0 it'll
launch Interface Builder 3.0.

00:03:39.530 --> 00:03:45.819
Similarly, we use the GCC compiler from Xcode
3.0 when running it in Xcode 3.0

00:03:45.819 --> 00:03:51.819
and we use the Tiger based GCC compiler when you're
running Xcode 2.5 even on Leopard.

00:03:51.819 --> 00:03:56.879
Not all of the Xcode 2.5 tools
will run on Leopard, there are some limitations.

00:03:56.879 --> 00:04:01.650
But moving forward we hope that this will really
make it easy to maintain multiple versions

00:04:01.650 --> 00:04:06.990
of your development environment so you can
go to a new OS without being forced to switch

00:04:06.990 --> 00:04:11.060
to a new development environment and vice versa.

00:04:11.060 --> 00:04:16.339
Now once you're doing that you've got an issue with opening
your projects, you know, what about opening a 2.4

00:04:16.339 --> 00:04:18.389
or 2.5 project in 3.0.

00:04:18.389 --> 00:04:21.370
Won't that change the project file
format so I can't go back?

00:04:21.370 --> 00:04:22.670
Is everything a trap door?

00:04:22.670 --> 00:04:30.140
Well, by default, Xcode 3.0 opens, builds
and runs Xcode 2.4 projects unchanged.

00:04:30.139 --> 00:04:32.409
It will not alter them.

00:04:32.410 --> 00:04:36.040
So you can take them back even to a
Tiger machine with Xcode 2.4

00:04:36.040 --> 00:04:38.730
or 2.5 and they will not change.

00:04:38.730 --> 00:04:46.009
It will, we made one change in Xcode 3.0,
we're kind of dropping support for Xcode 1.5

00:04:46.009 --> 00:04:49.719
and 1.2 and 1.1 and 1.0
and project builder and so forth.

00:04:49.720 --> 00:04:55.880
So if you want to upgrade old projects upgrade
them in 2.4 or 2.5 on Tiger

00:04:55.879 --> 00:05:01.529
or Leopard before opening them in 3.0, but
once they're in 2.4 or 2.5 format you're fine.

00:05:01.529 --> 00:05:08.609
We have a new slice in the project inspector that
shows project format and project compatibility.

00:05:08.610 --> 00:05:11.360
By default, it's set to the one that it was.

00:05:11.360 --> 00:05:17.830
If you open up existing 2.4 projects in 3.0,
the project format will be 2.4 compatible.

00:05:17.829 --> 00:05:26.050
If you try to make a change in that project to adopt an
Xcode 3.0 feature that will not be compatible

00:05:26.050 --> 00:05:31.660
with 2.5 or 2.4, you get an alert
giving you the choice of making the change

00:05:31.660 --> 00:05:35.070
and upgrading the project format or not making the change.

00:05:35.069 --> 00:05:39.689
So you always know when you're making a change that
will make your project incompatible with 2.4,

00:05:39.689 --> 00:05:42.980
you always have the choice to accept it or back out.

00:05:42.980 --> 00:05:48.110
And if somehow somebody's added a 3.0-ism
for some reason or something we didn't catch

00:05:48.110 --> 00:05:52.610
that makes it incompatible with 2.4, we'll
show a warning right in the status line saying

00:05:52.610 --> 00:05:57.439
that this project says it's compatible with 2.4,
but it's using 3.0 features.

00:05:57.439 --> 00:06:03.629
So you can go and know what's going on there.

00:06:03.629 --> 00:06:08.100
So now that we've got your system configured
and installed and you're up and running

00:06:08.100 --> 00:06:12.400
on Xcode 3.0, let's talk about the workflow.

00:06:12.399 --> 00:06:19.919
Now in the classic Xcode workflow you open your project
in either the condensed mode, the condensed layout

00:06:19.920 --> 00:06:25.900
or the default layout which is what's here or the all
in one layout and usually to do file navigation you want

00:06:25.899 --> 00:06:30.060
to show the detailed view so you can get some
sorting and searching and filtering on your files.

00:06:30.060 --> 00:06:34.519
And now already your source code's a little
bit constrained and then you go to build

00:06:34.519 --> 00:06:38.879
and then you get a build window plopped down on
top of your source code and then you go to debug

00:06:38.879 --> 00:06:42.759
and you get a debug window plopped down on
your source code and you really want to focus

00:06:42.759 --> 00:06:46.360
on your code, but there's all this stuff in the way.

00:06:46.360 --> 00:06:51.639
In the new workflow, we keep your
source code front and center.

00:06:51.639 --> 00:06:56.889
You can just open up your document
window and do your work there.

00:06:56.889 --> 00:07:02.039
When you build your errors or warnings are brought
straight to the line that's causing the warning and error.

00:07:02.040 --> 00:07:08.470
You can enable them, disable them right there in the
editor and when you recompile and fix them they go away

00:07:08.470 --> 00:07:12.000
without having to open a separate window.

00:07:12.000 --> 00:07:17.589
When you're debugging, we bring your debug controls
right to the editor window in a small script at the top.

00:07:17.589 --> 00:07:23.560
So you have your stack back trace and your thread
view and your step controls and easy access to all

00:07:23.560 --> 00:07:29.129
of your debug controls right there in the editor.

00:07:29.129 --> 00:07:35.189
When you're debugging in the editor and you want to see the
value of variables we have data tips that show you the value

00:07:35.189 --> 00:07:40.800
of variables as you hover over them even deep
and nested structures so you can drill down even

00:07:40.800 --> 00:07:45.569
in very complex data structures
without even clicking the mouse.

00:07:45.569 --> 00:07:52.620
And when you want to set break points you not only can
set break points right in the editor but if you open

00:07:52.620 --> 00:07:58.100
up a message bubble for the break point you can even set
the conditional breakpoints right there in your source code

00:07:58.100 --> 00:08:00.150
without having to go to a separate window.

00:08:00.149 --> 00:08:04.849
( applause )

00:08:04.850 --> 00:08:11.170
>> Now when you're reading and editing code we also
provide some other things that help you focus on your work.

00:08:11.170 --> 00:08:17.420
You saw the code folding, you've seen code folding in other
editors before, we're not going to do that much of a demo

00:08:17.420 --> 00:08:23.170
of it because everybody knows code folding and it's well
supported in Xcode 3.0 but what we do have

00:08:23.170 --> 00:08:25.330
in addition is this thing called code focus.

00:08:25.329 --> 00:08:32.189
We use the same semantic analysis of your source code
that we do to fold it to essentially give you a preview

00:08:32.190 --> 00:08:40.500
of what's going to be folded if you fold by highlighting the
blocks in scope using the standard Macintosh UI technique

00:08:40.500 --> 00:08:46.980
of highlighting the thing that is enabled or in focus
and then dimming back the things that are less relevant.

00:08:46.980 --> 00:08:56.370
And you can either turn this on ad hoc by just moving into
the code focus ribbon or you can leave it on all the time

00:08:56.370 --> 00:09:01.779
and just have the thing that's in scope
always highlighted and everything that's

00:09:01.779 --> 00:09:04.649
out of scope always dimmed back as you type.

00:09:04.649 --> 00:09:08.659
That helps get unneeded detail out of your way.

00:09:08.659 --> 00:09:11.929
But another important thing we've
added here editing workflow

00:09:11.929 --> 00:09:18.509
is we've formalized and enhanced the
built in scripting capabilities of Xcode.

00:09:18.509 --> 00:09:23.389
Now many of you have known all along
that you could by dropping a secret file

00:09:23.389 --> 00:09:30.049
in a secret folder enable a secret menu in Xcode
that let you execute these scripts that were written

00:09:30.049 --> 00:09:39.069
in some bizarre melange of shell scripting language with
percent percent percent some random keyword identifiers

00:09:39.070 --> 00:09:47.010
in them that were mystically substituted at execution
time and then did something about piping the results back.

00:09:47.009 --> 00:09:49.250
It was a little cryptic.

00:09:49.250 --> 00:09:57.710
What we've done is we've brought user interface,
we've brought scripting right into the user interface,

00:09:57.710 --> 00:10:04.290
the script menu is now enabled all the time, you can have
the access to all the scripts that have been in Xcode

00:10:04.289 --> 00:10:11.389
since 1.0 and in the same scripting language
but by choosing edit user scripts you also get a window

00:10:11.389 --> 00:10:16.389
that lets you create, add and edit
the scripts right there in Xcode.

00:10:16.389 --> 00:10:22.939
And you have the choices of straight shell scripts, the
modified shell scripts which Xcode will substitute things

00:10:22.940 --> 00:10:30.060
into the script before executing them and you can also
drag-and-drop Automator actions and AppleScripts right

00:10:30.059 --> 00:10:33.979
into the window and execute them
from the Xcode script menu.

00:10:33.980 --> 00:10:40.070
So we hope that this is going to fill a missing
hole in extensibility and tailorability in Xcode.

00:10:40.070 --> 00:10:44.480
People have always wanted to create their
custom workflows and to tailor Xcode

00:10:44.480 --> 00:10:48.980
for their working style now you can
do it with the Xcode script menu.

00:10:48.980 --> 00:10:54.840
So rather than talking about it anymore let's see
some of the code focus, the code folding, the code sense

00:10:54.840 --> 00:10:59.480
and the syntax coloring the script menu and here's
Dave Ewing of the Xcode team to give you a demo.

00:10:59.480 --> 00:11:00.129
( applause )

00:11:00.129 --> 00:11:02.029
>> Hi thanks Chris.

00:11:05.730 --> 00:11:08.470
Alright, well I'm going to show you some
of the features here in the text editor

00:11:08.470 --> 00:11:11.960
in Xcode 3.0 some of the new features here.

00:11:11.960 --> 00:11:15.220
To do that I'm going to use a project called
Grand Perspective. You may have seen it

00:11:15.220 --> 00:11:16.790
in some of the earlier sessions.

00:11:16.789 --> 00:11:24.059
It's a tool that let's you visualize the
file in folder hierarchy on your disk.

00:11:24.059 --> 00:11:27.149
You'll get to see that running a little bit later.

00:11:27.149 --> 00:11:30.529
But first we'll just bring up an editor window here.

00:11:30.529 --> 00:11:36.209
And this editor window looks a lot like what you're
used to in Xcode 2.0, things are syntax colored.

00:11:36.210 --> 00:11:39.759
but I assure you underneath it's quite a bit different.

00:11:39.759 --> 00:11:45.399
If we scroll down a little bit into the file you can
see that things actually get a little bit more colorful

00:11:45.399 --> 00:11:52.539
than they were in Xcode 2.0. So for instance in this dealloc
method there's an instance variable called tree

00:11:52.539 --> 00:12:03.889
balancer that's colored and the release method on that
is a system class method release on NS object, of course.

00:12:03.889 --> 00:12:16.049
So let's go ahead and look a little bit further down
in the file and this file is actually unfamiliar to me,

00:12:16.049 --> 00:12:19.740
it's indented differently than I'm used to.

00:12:19.740 --> 00:12:21.580
So it's an open source project.

00:12:21.580 --> 00:12:25.120
It would be kind of rude if I went in and
re-indented everything so I want to be able

00:12:25.120 --> 00:12:28.310
to look, see the block structure of the code.

00:12:28.309 --> 00:12:35.889
So what I would normally do in Xcode 2.0 is just double
click on some braces that I can see those blocks highlighted

00:12:35.889 --> 00:12:43.919
but if I double click on something big and scroll around in
it I really don't see any of that block structure anymore.

00:12:43.919 --> 00:12:50.059
In Xcode 3.0, we have the notion of code focus that
lets you see that block structure a little more easily.

00:12:50.059 --> 00:12:52.189
So go down into the view menu and at the bottom

00:12:52.190 --> 00:12:58.860
of the code folding menu we have an item called focus
follow selection, I'll go ahead and select that.

00:12:58.860 --> 00:13:06.379
So what this does is it turns on code focus, it's on
all the time now so I can click in a different block

00:13:06.379 --> 00:13:10.100
and it will highlight that block of code.

00:13:10.100 --> 00:13:17.129
And, of course, it's dynamic so as I
type it actually updates as you go.

00:13:17.129 --> 00:13:23.169
And it's accessible through the keyboard
so I can turn it off if I want, hit undo.

00:13:23.169 --> 00:13:26.949
Alright, the next thing I'm going to show you briefly,

00:13:26.950 --> 00:13:31.050
link code folding is indeed something
you've seen in other editors.

00:13:31.049 --> 00:13:35.490
But along the left edge here there's this bar

00:13:35.490 --> 00:13:41.389
that we call the cold folding ribbon,
my mouse is moving around on me here.

00:13:41.389 --> 00:13:47.830
And if you hover over it you can see that it highlights
the block of code that it will fold and marks them

00:13:47.830 --> 00:13:53.340
with little twisty triangles there and you
can click and fold away that piece of code.

00:13:53.340 --> 00:13:56.410
Click again and fold away the whole method if you like.

00:13:56.409 --> 00:14:02.819
And since it's like an outline view you can just
option click to unfold everything that's underneath it.

00:14:02.820 --> 00:14:14.830
Alright, well let's go ahead and use some
code here, make this a little bit bigger.

00:14:14.830 --> 00:14:17.259
Not big enough.

00:14:17.259 --> 00:14:21.879
Well, it's been reformatted since I looked at it so anyhow.

00:14:21.879 --> 00:14:25.889
I'm going to now show you a little bit
of code completion in Xcode 3.0.

00:14:25.889 --> 00:14:30.250
So Xcode has had code completion since the beginning

00:14:30.250 --> 00:14:33.289
and we've been refining it over
the years, making it more accurate.

00:14:33.289 --> 00:14:37.579
We've added something new in Xcode
3.0 called automatic code folding

00:14:37.580 --> 00:14:44.139
that will show you its best guess of
what you want to insert as you type.

00:14:44.139 --> 00:14:51.480
To motivate that let's just go ahead and say
we want to add a new local variable here.

00:14:51.480 --> 00:14:58.680
Another NS mutable array and you can bring up the code
completion list with the escape key and that's nice it knows

00:14:58.679 --> 00:15:02.979
that the most likely thing is NS mutable array
and you can hit return and have it insert it.

00:15:02.980 --> 00:15:05.279
That's pretty good.

00:15:05.279 --> 00:15:08.490
But let's go ahead and create an array.

00:15:12.809 --> 00:15:18.559
And you can do the same thing but there should be a
better way than that and there is in Xcode 3.0.

00:15:18.559 --> 00:15:25.139
So I'm going to go ahead into the preferences here and go
into the code sense panel and turn on automatic suggestion.

00:15:25.139 --> 00:15:26.679
And I'm going to set it to immediate.

00:15:26.679 --> 00:15:29.659
You can have it happen after a short delay if you'd like to.

00:15:29.659 --> 00:15:39.319
But now when I go and type it shows you its best
guess of what you might want to insert immediately.

00:15:39.320 --> 00:15:43.820
If you want to accept that you just go ahead and hit tab,

00:15:43.820 --> 00:15:52.070
type an A and the most likely method you'll call
is alloc, we'll go ahead and accept that as well.

00:15:52.070 --> 00:15:59.010
You type I, it also knows that init with capacity is the
most likely thing you're going to want to use which in those

00:15:59.009 --> 00:16:05.549
for a number of reasons, one of them of course you've
been using it in this method already so it knows

00:16:05.549 --> 00:16:10.029
that you're more likely to call that method, but
that's actually not the method I want to call.

00:16:10.029 --> 00:16:14.919
Now if I type a little bit more I get to init,
it knows that init is a valid method to call

00:16:14.919 --> 00:16:19.159
so it actually takes the automatic suggestion away.

00:16:19.159 --> 00:16:22.139
But init isn't the method I want to call either.

00:16:22.139 --> 00:16:29.720
I want to call init with contents of URL so I go
ahead and type the W it puts, it's best guess in again,

00:16:29.720 --> 00:16:33.160
that shouldn't have changed certainly,
it thinks that's the most likely thing,

00:16:33.159 --> 00:16:35.350
but it's done something a little bit differently here.

00:16:35.350 --> 00:16:42.320
It knows that all of the methods that begin with
init w also begin with init with and it shows

00:16:42.320 --> 00:16:44.760
that to me by selecting that portion of the text.

00:16:44.759 --> 00:16:48.710
So I can go ahead and hit type
or hit tab and complete on that

00:16:48.710 --> 00:16:53.920
and start typing a little bit more
and it gets to the method I want.

00:16:53.919 --> 00:16:57.039
And I'll just fill in the rest of the way.

00:16:57.039 --> 00:17:05.859
Passing nil there is probably a bad idea, you guys shouldn't
do that I can do that in my demo, but you shouldn't do that.

00:17:05.859 --> 00:17:13.819
Alright, well now let's look at a
little bit more of the code down here.

00:17:13.819 --> 00:17:19.339
We have let's see there's this class directory item.

00:17:19.339 --> 00:17:26.939
I don't know what this class is, so the way to
find that out you'd probably go to the source code

00:17:26.940 --> 00:17:28.559
to that, you'd command double click on it.

00:17:28.559 --> 00:17:32.720
That's certainly something you
guys are very familiar with by now.

00:17:32.720 --> 00:17:39.579
But I actually want to see what the class hierarchy
of that class is and there's a new way to do

00:17:39.579 --> 00:17:43.139
that in Xcode 3.0 and it's called the class navigator.

00:17:43.140 --> 00:17:47.450
So here up in the top right of the
window we have a new popup menu

00:17:47.450 --> 00:17:52.250
that shows the hierarchy of the
current class that you're in.

00:17:52.250 --> 00:17:57.950
So directory item inherits from file item which
inherits from item which inherits from NS object.

00:17:57.950 --> 00:17:59.029
That's not a big surprise.

00:17:59.029 --> 00:18:07.099
If you select on it, it goes right
to the implementation of that class.

00:18:07.099 --> 00:18:12.599
Okay. So the last thing I want
to show you is some scripting.

00:18:12.599 --> 00:18:17.000
I did a little code completion that
makes it much easier for me to type,

00:18:17.000 --> 00:18:20.089
I'm not a very good typist so that's good for me.

00:18:20.089 --> 00:18:23.449
But I actually don't like to type at all.

00:18:23.450 --> 00:18:29.630
So I have this NS log here that just doesn't
stick out enough for me in the console

00:18:29.630 --> 00:18:32.200
when it comes up so I want to make it upper case.

00:18:32.200 --> 00:18:35.990
Well I can't make it upper case in Xcode, because
there's no way to do it there's no command to do

00:18:35.990 --> 00:18:38.690
that in Xcode, but there is a way to add a command.

00:18:38.690 --> 00:18:39.910
And that's in the scripts menu.

00:18:39.910 --> 00:18:46.800
And those of you that did scripting in Xcode in 2.0.
Chris described a little bit of it more than I,

00:18:46.799 --> 00:18:51.619
I couldn't believe it, it's so gory, I couldn't
believe he said as much as he did about it.

00:18:51.619 --> 00:18:59.609
But we have a new item, the edit user scripts menu item at
the bottom, that let's you do it without all that complexity.

00:18:59.609 --> 00:19:05.559
So I'll go ahead and bring that up here. On the left here
we have a outlying view that shows you the hierarchy

00:19:05.559 --> 00:19:10.940
of the menu and we can go down inside and
just go ahead and add some items to it.

00:19:10.940 --> 00:19:13.269
I'm going to add a new separator.

00:19:13.269 --> 00:19:20.200
And separators are pretty uninteresting so I'm
going to go ahead and add a script below that.

00:19:20.200 --> 00:19:27.799
And text script is also pretty uninteresting
I'm going to change the name of that.

00:19:27.799 --> 00:19:31.849
So now I have a new menu item called
upper case and it's all live so I can go

00:19:31.849 --> 00:19:34.699
down into the menu and it's in the menu already.

00:19:34.700 --> 00:19:41.930
It doesn't do much and I can go ahead and fill in the
script so over here on the right we have a text field.

00:19:41.930 --> 00:19:49.740
Right now it's showing there's a shebang at the top of that,
that says it'll run with /bin/sh, the Born Shell.

00:19:49.740 --> 00:19:55.049
So you can use other scripting languages
if you want, Python, Perl, whatever.

00:19:55.049 --> 00:20:01.269
But I'm going to go ahead and use Born Shell,
I was a UNIX programmer in a previous life.

00:20:01.269 --> 00:20:06.779
And to convert something to upper case being an old
UNIX programmer I in ASCII still and I'm going

00:20:06.779 --> 00:20:11.190
to use the translate command just to
convert lower case A to upper case.

00:20:11.190 --> 00:20:19.779
Lower case A through Z to upper case A
through Z. And if I type it correctly,

00:20:19.779 --> 00:20:22.960
I did say something about not being a good typist, right?

00:20:24.259 --> 00:20:26.099
Alright, so now we have a translate command.

00:20:26.099 --> 00:20:27.419
>> ( inaudible )

00:20:27.420 --> 00:20:29.330
>> Hey, thank you!

00:20:29.329 --> 00:20:29.980
( laughs )

00:20:29.980 --> 00:20:32.799
Excellent.

00:20:34.009 --> 00:20:39.680
You know if you guys were all in
my office you could, well, anyhow.

00:20:39.680 --> 00:20:43.860
Okay, so what's this going to do? Well, it's going to take
the input and translate the lower case to upper case.

00:20:43.859 --> 00:20:48.339
Where's it going to get that input? Well, it's going to get
the input from the current selection up, here at the top.

00:20:48.339 --> 00:20:53.559
You can also have it get things from the entire
document or the cases where you don't even need input.

00:20:53.559 --> 00:20:59.169
And right now it's set to send the output after
the current selection which isn't what I want

00:20:59.170 --> 00:21:01.640
to do I want it to actually replace the selection.

00:21:01.640 --> 00:21:08.830
So I'll go ahead and change that and let's give it a try.

00:21:08.829 --> 00:21:11.299
And look at that, it's converted to upper case

00:21:11.299 --> 00:21:16.589
Whoo.( applause )

00:21:16.589 --> 00:21:18.949
>> So that's actually pretty ugly.

00:21:18.950 --> 00:21:20.380
I'm just going to undo.

00:21:20.380 --> 00:21:24.640
Now of course the scripts I mean it's a
real command that acts on the text editors

00:21:24.640 --> 00:21:28.860
so everything works as you would normally expect.

00:21:28.859 --> 00:21:31.409
You can undo, redo all that sort of stuff.

00:21:31.410 --> 00:21:34.620
So with that I'll pass it back to Chris
and we'll move on with more workflow.

00:21:34.619 --> 00:21:36.429
>> Thank you Dave.

00:21:36.430 --> 00:21:42.110
( applause )

00:21:42.109 --> 00:21:44.219
>> So let's move on to building and debugging.

00:21:44.220 --> 00:21:49.490
Once you've used the features of the editor to write your
code now you need to build it and once you need to run it

00:21:49.490 --> 00:21:51.769
and once you run it you need to find the bugs in it.

00:21:51.769 --> 00:21:55.619
Which will send you back to the editor to fix it again.

00:21:55.619 --> 00:22:01.779
In building and debugging you've already seen in
the demo on Monday the errors and warnings in line,

00:22:01.779 --> 00:22:04.849
the message bubbles that bring the
errors and warnings right in your code.

00:22:04.849 --> 00:22:11.629
And you saw a little bit of the seamless debugging
where you can switch from run to debug in mid-stride.

00:22:11.630 --> 00:22:15.450
I think you really have to experience
this to understand how cool it is.

00:22:15.450 --> 00:22:20.080
You really forget very quickly that
there is a build and debug mode.

00:22:20.079 --> 00:22:24.720
You just do what you did last time and
if you need to switch, you just switch.

00:22:24.720 --> 00:22:26.750
You enable or disable break points.

00:22:26.750 --> 00:22:32.349
There isn't a palpable difference between running your
application like you've double clicked it from the finder

00:22:32.349 --> 00:22:36.209
and debugging your application so that you
can step through it and see variable values.

00:22:36.210 --> 00:22:39.180
It really is very seamless.

00:22:39.180 --> 00:22:43.039
And also you've seen the variables and data
tips where you can introspect what's going

00:22:43.039 --> 00:22:50.639
on inside your source code right inside your editor window
rather than having to set up a, preconfigure a globals list

00:22:50.640 --> 00:22:54.550
or put an expressions window in or anything like that.

00:22:54.549 --> 00:23:00.720
And finally the mini debugger which is a great tool for
debugging full screen applications or debugging situations

00:23:00.720 --> 00:23:05.039
where layer switching between your application
and interacting with the debugger are going

00:23:05.039 --> 00:23:08.220
to disrupt the flow of the application being debugged.

00:23:08.220 --> 00:23:13.730
The mini debugger is a great tool that just puts
a floating window over your running application

00:23:13.730 --> 00:23:17.259
with the full debug information including the step controls

00:23:17.259 --> 00:23:21.710
and including the data tips right
there in your running application.

00:23:21.710 --> 00:23:28.400
And better shown than done, let's bring up Scott Tooker of
the Xcode team to show you the building and debugging

00:23:28.400 --> 00:23:31.140
with message bubbles, the debug strip and data tips.

00:23:31.140 --> 00:23:32.210
>> Thanks Chris.

00:23:32.210 --> 00:23:37.000
( applause )

00:23:37.000 --> 00:23:41.849
>> So one primary thing about debugging is when you think
about it, it's all about understanding your code better.

00:23:41.849 --> 00:23:45.869
So what I'm going to go through right now is
showing you how you can use our new data tips

00:23:45.869 --> 00:23:49.689
and step control features to better understand your code.

00:23:49.690 --> 00:23:54.480
So as Dave said we are using the
project here, Grand Perspective.

00:23:54.480 --> 00:23:59.910
It gives you a top down view of a given folder and
then graphically represents it in terms of squares,

00:23:59.910 --> 00:24:03.450
each file being a small square as part of larger squares.

00:24:03.450 --> 00:24:08.720
So let me go ahead and run this.

00:24:08.720 --> 00:24:15.799
And it's going to ask me for a folder to scan
and I'll scan the Grand Perspective sources.

00:24:21.910 --> 00:24:29.940
And so you'll notice that I've automatically jumped in
which, and so we're actually looking at the build tree

00:24:29.940 --> 00:24:33.930
for path part here and so this is
actually the guts of the program.

00:24:33.930 --> 00:24:39.190
It actually figures out, it goes and scans everything
and I want to learn a little bit more about how it works.

00:24:39.190 --> 00:24:43.190
So let's go ahead here and just
start looking at things in the code.

00:24:43.190 --> 00:24:46.930
So, for example, I can go here to path and
automatically I can just start looking

00:24:46.930 --> 00:24:49.480
at what is the path that is being passed down.

00:24:49.480 --> 00:24:52.740
Well, it's to the Grand Perspective folder.

00:24:52.740 --> 00:24:56.829
Okay. Well this is kind of interesting but I want
to jump down a little bit so I'm going to use some

00:24:56.829 --> 00:25:02.859
of the step controls and in this case what I'm going to
do is just continue to there and so what this does just

00:25:02.859 --> 00:25:11.349
to be clear is when I click on that line, the little green
button, I'm telling Xcode, GDB specifically, to go down,

00:25:11.349 --> 00:25:13.419
execute to that line and then stop there.

00:25:13.420 --> 00:25:18.050
So it's like having a temporary break point that then we
just remove but it gets rid of the need for you to put

00:25:18.049 --> 00:25:23.690
in a lot of break points that you just end up wanting
to get rid of later or that you trip over later.

00:25:23.690 --> 00:25:30.080
Okay, so this is great so it looks like most of the work is
done here in build tree for directory, but you know I forgot

00:25:30.079 --> 00:25:33.799
to set a break point for build tree for directory.

00:25:33.799 --> 00:25:38.539
And I mean, how can I go, oh well
I've got this little button here.

00:25:38.539 --> 00:25:43.500
And so if I go over here, I can actually inline in
the code not even have to go to the debugger bar,

00:25:43.500 --> 00:25:46.460
I can just click and it steps me right in.

00:25:46.460 --> 00:25:51.519
And we actually support this we also support, for
example, if I'm on a given line, I can go ahead

00:25:51.519 --> 00:25:54.279
and just say step next right on that line.

00:25:54.279 --> 00:25:58.210
And so you can stay literally in your code
you don't have to go to anywhere else.

00:25:58.210 --> 00:26:00.590
I don't have to go up to the debugger bar if I don't want.

00:26:00.589 --> 00:26:04.279
The controls are right there literally
at your mouse pointer.

00:26:04.279 --> 00:26:08.599
So let's go ahead and drop down a little bit further in
this code, because there's some interesting stuff down here

00:26:08.599 --> 00:26:11.659
with some structures that I want to look at.

00:26:11.660 --> 00:26:17.759
So let's use this, continue to step, and you'll notice
I've come down here and now I can scroll back up

00:26:17.759 --> 00:26:22.200
and for example I can go and take a look at
this bulk catalog info that just got populated.

00:26:22.200 --> 00:26:26.160
And you'll notice that, okay, I automatically
see the structure, but we automatically,

00:26:26.160 --> 00:26:29.420
we also notice that oh this is part of a
structure so I'll just show you that part.

00:26:29.420 --> 00:26:34.940
And then I can go and, for example, look and see oh
ok so these are the file names and I can jump up

00:26:34.940 --> 00:26:38.940
and say, oh, these are the FS
reps relating to those file names.

00:26:39.980 --> 00:26:41.180
But there's even more.

00:26:41.180 --> 00:26:46.970
One of the things that takes some time and it
breaks your workflow is let's say I wanted

00:26:46.970 --> 00:26:49.589
to go look at dirItem name.

00:26:49.589 --> 00:26:52.730
And I wanted to understand okay
what did that actually evaluate to?

00:26:52.730 --> 00:26:57.519
Well I'd have to open up the GDB panel or I'd have to
go to the textual menu, tell it to print an object,

00:26:57.519 --> 00:27:01.549
or to call a method and then I'd have to
go somewhere other than my source code.

00:27:01.549 --> 00:27:06.230
But what I can do now in 3.0 is
I can actually select this expression,

00:27:06.230 --> 00:27:09.710
click the information button and there it is right there.

00:27:09.710 --> 00:27:15.559
This is the actual live value at the
location of the PC for that expression.

00:27:15.559 --> 00:27:20.529
So it makes it a lot easier for me especially when I
have a lot of nested function, if I have methods nested

00:27:20.529 --> 00:27:24.200
in other methods and I just want to understand,
okay, what did this one subpart return.

00:27:24.200 --> 00:27:28.240
I can select it, evaluate it and move on.

00:27:28.240 --> 00:27:33.279
If it also works for example I can come down here and
look at this if statement and say well am I going to step

00:27:33.279 --> 00:27:38.819
over this or not. Well, looking at the code I
think I might know but what I can do is go,

00:27:38.819 --> 00:27:41.899
evaluate and say, okay, it's 0 I'm not going to.

00:27:41.900 --> 00:27:47.330
And so let's go ahead, we'll step over
and there we go, we didn't step over.

00:27:47.329 --> 00:27:51.029
So as you can see it's really powerful,
it keeps me in my code I'm always looking

00:27:51.029 --> 00:27:54.980
at my code, and it's a nice augmentation.

00:27:54.980 --> 00:27:58.620
It's something that's nice for most of your
debugging where you're concerned about flow control.

00:27:58.619 --> 00:28:05.769
We still provide easy access from the debugger bar, things
like the debugger window and the GDB console but we think

00:28:05.769 --> 00:28:09.470
that people are going to find the debug tips really useful.

00:28:09.470 --> 00:28:14.350
And then one final thing I wanted to show you real
quickly is the new break point message bubble.

00:28:14.349 --> 00:28:17.709
We've seen it in slides a lot but no
one has actually shown it on stage.

00:28:17.710 --> 00:28:22.690
So one thing I might want to do in this section
down here, you'll notice that I'm looping through.

00:28:22.690 --> 00:28:30.070
Well, let's say that for some reason I want
to actually drop here when I equals two.

00:28:30.069 --> 00:28:34.809
So what I can do is just go ahead and normally I just set a
break point but in this case I want to do a little bit more.

00:28:34.809 --> 00:28:36.119
I want to set a condition.

00:28:36.119 --> 00:28:40.459
So I'm going to bring up the contextual menu on
this break point and show the message bubble.

00:28:40.460 --> 00:28:46.019
And so now right in here I can control whether it's enabled
or not, whether I want to automatically just skip over this

00:28:46.019 --> 00:28:53.139
for now or I can just type in simple
conditions, for example, I equals two.

00:28:53.140 --> 00:29:00.890
And so now if I go up here to continue, you'll notice
I've stopped here and if I just scroll up a little bit

00:29:00.890 --> 00:29:03.160
and lets look at I, you'll see that I is two.

00:29:03.160 --> 00:29:08.350
So automatically I've been able to skip over, go
straight to where I want with very minimal moving

00:29:08.349 --> 00:29:11.139
around of windows or losing my context or anything.

00:29:11.140 --> 00:29:19.530
So as I think you can see the new features for the data
tips and control strip will give you a lot more power

00:29:19.529 --> 00:29:23.539
to just look around in your code and
learn a lot more about it quickly.

00:29:23.539 --> 00:29:25.049
And with that, I'd like to hand it back to Chris.

00:29:25.049 --> 00:29:26.019
>> Thanks Scott.

00:29:26.019 --> 00:29:31.309
( applause )

00:29:31.309 --> 00:29:35.529
>> The simple power of our data tips are really going
to help address a lot of the things you've asked

00:29:35.529 --> 00:29:40.859
for over the years such as being able to see the
return value of a function before you return form it.

00:29:40.859 --> 00:29:49.990
Being able to see the contents of an NS array or a C
array or even a STL vector right there in the debugger

00:29:49.990 --> 00:29:52.950
without having to go down and drill down every element.

00:29:52.950 --> 00:29:58.779
I think you're really going to enjoy these things.

00:29:58.779 --> 00:30:03.660
( applause )
>> Now when you're debugging and when you're
writing your code you may need to find out more

00:30:03.660 --> 00:30:07.890
about your code in order to write it successfully.

00:30:07.890 --> 00:30:12.780
And there are two things you need to know. You need to know
information about how your code works and where things are

00:30:12.779 --> 00:30:17.889
in your code and you need to know information
about Mac OS X and the set of APIs you're using

00:30:17.890 --> 00:30:22.600
and we've really added a lot of new things in Xcode
3.0 to help you find that information fast.

00:30:22.599 --> 00:30:28.509
And the first thing is a fairly substantial revamp
of the underlying machinery and Project Find.

00:30:28.509 --> 00:30:34.779
Now Project Find hadn't had a lot of love over the last
five years, but we really worked on the underlying mechanics

00:30:34.779 --> 00:30:41.250
of it to make it much faster, much more accurate,
much more correct and much more useful to you.

00:30:41.250 --> 00:30:45.279
The overall user interface is pretty much the same.

00:30:45.279 --> 00:30:49.990
The one secret is click that options button
all of the button is under that options button

00:30:49.990 --> 00:30:53.440
if you're not using that you're not using Project Find.

00:30:53.440 --> 00:30:58.990
But we've added some important new things
to Project Find in Xcode 3.0.

00:30:58.990 --> 00:31:04.099
First, we will find in this project and all
reference projects if you have a master project

00:31:04.099 --> 00:31:08.869
that builds everything else, one project
find will find across all of them.

00:31:08.869 --> 00:31:17.009
Second, we index symbols using the Xcode
parser and we do that with Spotlight now.

00:31:17.009 --> 00:31:22.109
So even if you do a Spotlight search from the
Spotlight icon in the menu bar if you search

00:31:22.109 --> 00:31:26.719
for a program symbol, you're going to find
hits in source code where that's used.

00:31:26.720 --> 00:31:32.750
If you do a find symbol in project, you're
going to find use points of that symbol.

00:31:32.750 --> 00:31:36.890
So you don't have to do a full text
search, you don't have to grep just

00:31:36.890 --> 00:31:43.780
in case you have a class name that's very similar to
instance variable names. You can search for a symbol

00:31:43.779 --> 00:31:48.509
and Xcode will show you all of the uses of
that symbol's the declarations the definitions

00:31:48.509 --> 00:31:51.900
and the accesses of it in your project with find symbol.

00:31:51.900 --> 00:31:55.970
We will also search nib files.

00:31:55.970 --> 00:32:05.779
If you have connections in nib files to classes or to
methods in your code from nib files we index those nib files

00:32:05.779 --> 00:32:11.410
so that when you do a project search you'll not
only find the places in code where those methods

00:32:11.410 --> 00:32:16.110
and classes are mentioned but you'll also
find the nib files in which they're mentioned.

00:32:16.109 --> 00:32:23.139
Makes it very easy to do a wholesale change on a class even
if your nib files are not organized in your project well

00:32:23.140 --> 00:32:26.710
so that you have to go and search
for where that nib file is.

00:32:26.710 --> 00:32:29.269
And finally, we've really improved the speed of it.

00:32:29.269 --> 00:32:35.099
We've had a recent regression in the seed you
have so if you do clock measures you're only going

00:32:35.099 --> 00:32:41.230
to find you know fifty percent faster to doubled, but
in previous versions of the Leopard seed we've been

00:32:41.230 --> 00:32:46.269
up to ten times faster than Tiger and X
code 2.5 and we expect to get

00:32:46.269 --> 00:32:50.410
that back there before we switch,
before we ship Xcode 3.0.

00:32:50.410 --> 00:32:59.130
We're really shooting for equal to or faster
than grep speed for full Project Find.

00:32:59.130 --> 00:33:06.650
An important thing that we've added when you start up
Xcode 3.0 is a new page called Xcode News.

00:33:06.650 --> 00:33:10.750
This comes up when you don't open
a project or a document in Xcode.

00:33:10.750 --> 00:33:13.900
So if you're going right to your
work it stays out of your way.

00:33:13.900 --> 00:33:18.900
But if you're just launching Xcode from the dock or
double clicking in the finder you'll see this panel

00:33:18.900 --> 00:33:24.100
and it's a miniature web view with some old Tiger
style tabs in it that we're going to have to update now

00:33:24.099 --> 00:33:27.909
for the new Leopard look that give you basic information

00:33:27.910 --> 00:33:32.540
about being a Macintosh developer
using Xcode 3.0.

00:33:32.539 --> 00:33:34.069
It's got five tabs on it.

00:33:34.069 --> 00:33:35.609
First is getting started.

00:33:35.609 --> 00:33:41.079
We get a lot of frequently asked questions and we get
a lot of how do I set up Xcode questions from people

00:33:41.079 --> 00:33:44.689
who just launch Xcode and they're
faced with a blank screen.

00:33:44.690 --> 00:33:47.970
Well, this is the not blank screen
that helps people orient themselves

00:33:47.970 --> 00:33:51.680
and go straight to the documentation and the tech notes.

00:33:51.680 --> 00:33:57.990
The second tab is really cool it's a series of RSS
feeds from ADR that shows you the latest tech notes,

00:33:57.990 --> 00:34:02.120
the latest technical documentation, the
latest sample code and the latest news.

00:34:02.119 --> 00:34:05.469
And you can just subscribe to these
RSS feeds straight in this window

00:34:05.470 --> 00:34:11.980
and every time you open Xcode you will see what's
new from ADR and the Apple Developer Connection

00:34:11.980 --> 00:34:21.269
and by clicking it you go straight to ADC in Safari so
you can download new sample code or read new tech notes.

00:34:21.269 --> 00:34:27.599
The middle tab is a comprehensive overview of
documentation with links that take your right

00:34:27.599 --> 00:34:32.150
to the documentation viewer which
I'll talk about in a minute.

00:34:32.150 --> 00:34:38.690
The fourth tab is a handy reference to all of the Apple
mailing lists with RSS feeds of those mailing lists

00:34:38.690 --> 00:34:46.039
so you can connect directly to your Xcode
users or Carbon dev lists right from Xcode.

00:34:46.039 --> 00:34:52.779
And finally there's a feedback page so you can give
feed back on Xcode, you can file bug reporter bugs

00:34:52.780 --> 00:34:59.100
and you can file feedback on our technical
documentation right from this window in Xcode.

00:34:59.099 --> 00:35:03.299
This pops up the first time you run Xcode
without any window and you can also get it

00:35:03.300 --> 00:35:06.680
from the Xcode News item in the help menu.

00:35:06.679 --> 00:35:11.690
Another thing we've added is the research assistant.

00:35:11.690 --> 00:35:16.210
We've showed this last year and it's
been in the Leopard seed all year.

00:35:16.210 --> 00:35:21.849
When you open up the research assistant it's a
floating window that tracks as you type and as you use

00:35:21.849 --> 00:35:25.940
or select APIs it shows you a quick summary of those APIs.

00:35:25.940 --> 00:35:32.440
It shows you the calling conventions, it shows
you what class and file it's declared in,

00:35:32.440 --> 00:35:36.900
it gives you the availability and deprecation
information and this is the most important thing.

00:35:36.900 --> 00:35:43.660
If you are getting deprecation warnings in your
code that say the call you're using is deprecated,

00:35:43.659 --> 00:35:50.989
bring up research assistant, select that call and the
research assistant will tell you what call to use instead

00:35:50.989 --> 00:35:55.569
and you can click it and go right to the technical
documentation for the new call to learn how to do it.

00:35:55.570 --> 00:36:00.120
So if you're migrating off of old APIs
and you need to replace deprecated APIs

00:36:00.119 --> 00:36:04.539
with new ones the research assistant
is a great tool for doing that.

00:36:04.539 --> 00:36:08.590
And then finally we've completely
revamped the documentation viewer.

00:36:08.590 --> 00:36:14.720
We've really improved its workflow and its
aesthetics and we've rebuilt the model instead

00:36:14.719 --> 00:36:22.239
of one monolithic folder full of documentation in
your developer folder, we've rebuilt it to be a set

00:36:22.239 --> 00:36:27.869
of modular document sets that can be
updated individually via RSS feeds.

00:36:27.869 --> 00:36:35.159
So you can get incremental updates and documentation
one by one as you need them rather than having

00:36:35.159 --> 00:36:40.199
to download a huge documentation
set every two or three months.

00:36:40.199 --> 00:36:45.429
( applause )

00:36:45.429 --> 00:36:51.389
>> And once you have those documentation sets installed
you can focus your searches on those documentation sets.

00:36:51.389 --> 00:36:58.099
So that when you're working in Carbon you can only look
at Carbon APIs when you're doing kernel development,

00:36:58.099 --> 00:37:03.420
you can only look at kernel development topics and
it really helps you get to your information faster.

00:37:03.420 --> 00:37:10.630
We've also changed the searching interface so it's more
Spotlight-like so you can use the tab buttons on the top

00:37:10.630 --> 00:37:13.329
to really focus in on what you're searching.

00:37:13.329 --> 00:37:17.569
The document, and I already talked about all those.

00:37:17.570 --> 00:37:22.840
And I'll bring up Brett Shank from the Developer Technical
Publications group to give you a demo of those features.

00:37:22.840 --> 00:37:23.620
Thank you.

00:37:23.619 --> 00:37:27.449
( applause )

00:37:27.449 --> 00:37:28.599
>> Thanks Chris.

00:37:28.599 --> 00:37:32.230
Well, as you know we have three ways to access
documentation in Xcode, we have the News window,

00:37:32.230 --> 00:37:35.099
the research assistant and the documentation viewer.

00:37:35.099 --> 00:37:38.089
You've seen the Xcode News one on other
sessions, so I'm just going to focus

00:37:38.090 --> 00:37:40.289
on the research assistant and the news window.

00:37:40.289 --> 00:37:48.159
So to show you the research assistant, I'm going to use the
Grand Perspective project here and open the code window.

00:37:48.159 --> 00:37:55.019
And you can get to the research assistant from the help
menu, you can also add it as an item to your toolbar.

00:37:55.019 --> 00:38:03.210
So the research assistant will come up here, there
it is, like Chris said it's just a floating palette,

00:38:03.210 --> 00:38:07.340
and when I place the cursor in my source code
you'll see the research assistant will update

00:38:07.340 --> 00:38:11.300
to show me high-level information about this particular API.

00:38:11.300 --> 00:38:18.010
So as you can see I see the documentation class reference
I can find more information about this symbol in,

00:38:18.010 --> 00:38:21.670
I see header file, it's declared in as declaration

00:38:21.670 --> 00:38:26.659
and I can disclose these slices here
to get as much information as I want.

00:38:26.659 --> 00:38:34.319
And again, as you click around in your code
your research assistant updates dynamically. So that's great.

00:38:34.320 --> 00:38:38.320
Well, what if you want more detailed
information about a particular symbol?

00:38:38.320 --> 00:38:42.910
Well, all you need to do is click any of
these blue links in the research assistant

00:38:42.909 --> 00:38:47.099
and that's going to open the full documentation window.

00:38:47.099 --> 00:38:49.069
Ignore what I'm doing right now.

00:38:49.070 --> 00:38:50.600
There it is.

00:38:50.599 --> 00:38:55.409
So like Chris said we've given the
doc window a major refresh in Leopard.

00:38:55.409 --> 00:39:00.379
We've refreshed both the user interface and the
infrastructure we used to provide documentation to Xcode.

00:39:00.380 --> 00:39:02.910
And we've created a technology called documentation sets.

00:39:02.909 --> 00:39:07.469
I'll talk more in detail about that in a few minutes,
but the important thing to know about them is

00:39:07.469 --> 00:39:10.379
that they let you include only
the documentation you care about

00:39:10.380 --> 00:39:13.230
and they let you exclude the documentation
you don't care about.

00:39:13.230 --> 00:39:19.340
So if you're not a Java or WebObjects developer, you no
longer have to install the Java in WebObjects documentation.

00:39:19.340 --> 00:39:24.660
If you want to install those the system makes it really
easy to install those doc sets and to get updates

00:39:24.659 --> 00:39:27.569
from your doc sets and I'll show you that in a few minutes.

00:39:27.570 --> 00:39:34.420
So for now I want to focus on the new user interface for
the doc window, we have, we've introduced the browse mode

00:39:34.420 --> 00:39:40.250
which is a lot like the browse mode in iTunes
all you need to do is click the eyeball here

00:39:40.250 --> 00:39:51.420
and you can browse all the categories and the
subcategories and actually see documents right in line here.

00:39:51.420 --> 00:39:57.409
And to pop out of browse mode you can actually click
the button or you can just type in the search field

00:39:57.409 --> 00:40:00.429
and it will take you out of search mode here.

00:40:00.429 --> 00:40:01.730
And I'll just select NS data.

00:40:01.730 --> 00:40:08.329
I wanted to point out one thing that you've heard about in
other sessions, we also support the class navigator control

00:40:08.329 --> 00:40:15.440
in the doc window so you see the C over here, this little
menu, I can now navigate to subclasses and super classes

00:40:15.440 --> 00:40:19.480
of documentation, the documentation
window itself so I wanted to point

00:40:19.480 --> 00:40:22.309
that out because it hasn't been mentioned yet.

00:40:22.309 --> 00:40:26.230
So, let's focus again on some of the new searching features.

00:40:26.230 --> 00:40:31.150
Like in Xcode 2.0 we have an API search and a
full text search, we also have a title search

00:40:31.150 --> 00:40:33.050
that I'll talk about more in a few minutes.

00:40:33.050 --> 00:40:36.200
I'm going to do an API search for bytes.

00:40:36.199 --> 00:40:38.809
And you can see in Xcode 3.0 we've made it a lot easier

00:40:38.809 --> 00:40:41.889
to tell exactly what you're searching
for and how you're searching.

00:40:41.889 --> 00:40:49.329
So in this case I'm doing a prefix search to start with
search that we have two other search matching types

00:40:49.329 --> 00:40:52.389
in Xcode 3.0 so if you want to do
a contained search you can do that

00:40:52.389 --> 00:40:55.039
and suddenly I give a lot more results that I got before.

00:40:55.039 --> 00:40:59.000
We know you've requested that for many years
so we're really happy to provide that to you.

00:40:59.000 --> 00:41:05.139
You can also do an exact match type and you can
see on the list of results here I'm getting result

00:41:05.139 --> 00:41:09.969
in all different languages, but what
if I just care about results in C++?

00:41:09.969 --> 00:41:16.919
Well, I can configure a language filter, you do that through
the tool bar here and now I've created my language filter.

00:41:16.920 --> 00:41:18.240
( applause )

00:41:18.239 --> 00:41:25.679
>> So likewise say I want to add C symbols back into that
again I can just change the filter and it's really easy

00:41:25.679 --> 00:41:28.589
to toggle back between showing all languages and filtering

00:41:28.590 --> 00:41:32.870
on just the languages you care
about for a particular task at hand.

00:41:32.869 --> 00:41:40.940
So we also have another filter for documentation sets
so in this case I have two documentation sets installed,

00:41:40.940 --> 00:41:48.179
you didn't see the third one, the core
reference library and the developer tools library

00:41:48.179 --> 00:41:53.539
and as I select either of these in the doc sets window.

00:41:53.539 --> 00:41:55.070
One second.

00:41:56.219 --> 00:41:57.389
There we go.

00:41:57.389 --> 00:42:04.690
You can see the list of results updates to show me
result just in that particular documentation set.

00:42:04.690 --> 00:42:08.619
So if you do want to have the Java in WebObjects
documentation installed this is an easy way

00:42:08.619 --> 00:42:12.839
to exclude those or include those in your search results.

00:42:12.840 --> 00:42:15.950
Okay, so more about documentation sets.

00:42:15.949 --> 00:42:22.569
You see this subscribe button right here? Well, I have
the doc sets for one vendor installed and that's Apple

00:42:22.570 --> 00:42:27.640
and Apple actually provides a lot of documentation, more
than just the core reference and the developer tools.

00:42:27.639 --> 00:42:33.980
And if I want to know what more documentation I can get
from Apple all I need to do is click the subscribe button

00:42:33.980 --> 00:42:39.900
and I think we're still having network problems
so I'm going to move to the demo machine over here

00:42:39.900 --> 00:42:49.380
and if the demo gods are with me, alright, so imagine that
I had just pressed the subscribe button on this system

00:42:49.380 --> 00:42:54.760
and now you can see I have all these
documentation sets that are available from Apple.

00:42:54.760 --> 00:42:59.130
I also see that there's an update to the
core reference library doc set right here.

00:42:59.130 --> 00:43:03.660
So to install that, all I need to do
is click update and assuming I was,

00:43:03.659 --> 00:43:09.099
the network was all working Xcode would take care of
downloading that documentation set and installing it.

00:43:09.099 --> 00:43:13.599
So these are all one click updates you don't have
to go through intrusive dialogs, you don't have to go

00:43:13.599 --> 00:43:23.779
through installer. Xcode takes care of
downloading and installing the doc sets for you.

00:43:23.780 --> 00:43:24.620
( applause )
>> But there's one more thing.

00:43:24.619 --> 00:43:27.319
We didn't just create documentation sets for Apple.

00:43:27.320 --> 00:43:29.230
We created them for you, too.

00:43:29.230 --> 00:43:35.130
So it's an open architecture we encourage third parties to
create doc sets and to deploy them to your framework clients

00:43:35.130 --> 00:43:39.340
and anyone else and to help you get going
with that we've actually written a document.

00:43:39.340 --> 00:43:40.360
( applause )

00:43:40.360 --> 00:43:41.280
Thank you.

00:43:41.280 --> 00:43:46.460
Now I'm going to show you we have this new title
search, search mode in Xcode and this is a great way

00:43:46.460 --> 00:43:52.769
to find all the books that we have
documentation, all of our documentation.

00:43:52.769 --> 00:43:59.920
So I'm just going to type in documentation set
and you can see we have a documentation set guide.

00:43:59.920 --> 00:44:04.559
It's very comprehensive it teaches you everything you
need to know about creating and deploying doc sets,

00:44:04.559 --> 00:44:07.269
we really encourage you to do this
it's a great new technology.

00:44:07.269 --> 00:44:11.489
So with the research assistant we bring the
API documentation to your source code window

00:44:11.489 --> 00:44:15.189
and with the doc window, we provided
a great new user interface

00:44:15.190 --> 00:44:19.150
and a great new way to install and deploy new documentation.

00:44:19.150 --> 00:44:20.099
Thanks Chris.

00:44:20.099 --> 00:44:20.980
>> Thank you Brett.

00:44:20.980 --> 00:44:27.940
( Applause )

00:44:27.940 --> 00:44:34.000
>> So your project's working or at least it's running.
Let's talk a little bit about the life cycle features

00:44:34.000 --> 00:44:37.750
in Xcode 3.0 and managing your projects.

00:44:37.750 --> 00:44:45.099
If your project is working you probably want to commit
the changes back to the repository that it came from.

00:44:45.099 --> 00:44:52.259
And in Xcode 2.0 you can commit individual
changes back if you've already set up your project

00:44:52.260 --> 00:44:56.250
for an SEM system like Perforce or Subversion or CVS.

00:44:56.250 --> 00:45:02.300
But if you want to create a new repository somewhere, or if
you want to get a new project out of a repository you have

00:45:02.300 --> 00:45:05.060
to go to the command line or third-party tool.

00:45:05.059 --> 00:45:11.570
In Xcode, we keep those tools out of your way we let
you do it within Xcode with repository management.

00:45:11.570 --> 00:45:21.590
In the repository preference panel, in the Xcode preferences,
you can set up CVS subversion and Perforce repositories

00:45:21.590 --> 00:45:26.670
and just by typing information into the fields
it automatically validates the connections

00:45:26.670 --> 00:45:31.980
and makes the connection to your repository and
it takes care of secure connections as well.

00:45:31.980 --> 00:45:41.219
So if you happen to be using SSH to connect to CVS or
Perforce, it does those connections right in the window.

00:45:41.219 --> 00:45:47.739
Once you've connected to a repository, you can bring up
our new repository browser and you can interactively walk

00:45:47.739 --> 00:45:54.639
through your repository and find branches and
projects and tags within that repository interactively

00:45:54.639 --> 00:46:02.089
and then with one tool bar click, bring that
project down into your, down onto your disk.

00:46:02.090 --> 00:46:07.730
And when you check out that project on your disk
that project is already automatically configured

00:46:07.730 --> 00:46:11.590
for the SEM repository you brought it out of.

00:46:11.590 --> 00:46:20.180
So it's configured the repository, browse it,
download the project, open it and it's ready to go.

00:46:20.179 --> 00:46:25.039
You don't have to leave Xcode to connect to or
browse a repository, you can check out in open projects

00:46:25.039 --> 00:46:34.570
in a single step and you can create new repositories
right from inside Xcode using your favorite SEM system.

00:46:34.570 --> 00:46:39.550
But say you're not sharing your work with
others or you're doing a lot of experimentation

00:46:39.550 --> 00:46:45.670
that you really don't want others to see but you want the
security of being able to roll back to other versions.

00:46:45.670 --> 00:46:52.840
Sometimes it's impolite to check in your incremental
changes on a main branch or even in a repository

00:46:52.840 --> 00:46:59.340
that other people are using, because it creates check in
messages and you just want to keep this on your local disk

00:46:59.340 --> 00:47:03.090
but you want to be able to go back
to the version that was working.

00:47:03.090 --> 00:47:08.160
We've built snapshots into Xcode 3.0
to make it easy to do that.

00:47:08.159 --> 00:47:15.779
You can make fast snapshots of your work using the same
mechanisms that Time Machine uses using directory hard links

00:47:15.780 --> 00:47:25.170
and using an HFS+ disc image that's
mounted inside your, on your hard disk.

00:47:25.170 --> 00:47:32.639
We make snapshots of your project that are durable and
long lasting so that you can roll back to previous versions

00:47:32.639 --> 00:47:39.960
and go back and get your project file, get individual source
files, see what changes are made even compared two different

00:47:39.960 --> 00:47:46.900
versions to see what's different there and go down and
look even to the line by line changes within those files

00:47:46.900 --> 00:47:51.410
to see what was different between now and then
or what was different between the one that worked

00:47:51.409 --> 00:47:56.670
and one that didn't work, and then roll back
either the entire project or even a single file.

00:47:56.670 --> 00:48:01.010
We think this is really going to help you especially
when you're using features like refactoring

00:48:01.010 --> 00:48:04.270
that make broad based changes to your project.

00:48:04.269 --> 00:48:07.389
And to show you SCM and snapshots, here's Scott Tooker again.

00:48:07.389 --> 00:48:08.710
( Applause )

00:48:08.710 --> 00:48:11.610
>> Thanks Chris.

00:48:14.820 --> 00:48:17.240
So let's see.

00:48:17.239 --> 00:48:19.979
I'll just clean up a little bit here.

00:48:19.980 --> 00:48:26.460
So I want to just reiterate one thing
that Chris talked about which was

00:48:26.460 --> 00:48:30.220
that source control management is
a great tool for all developers.

00:48:30.219 --> 00:48:33.309
Snapshots is not a replacement for source control.

00:48:33.309 --> 00:48:38.179
Snapshots is meant to be used on the very lightweight
end where you might be working on your own

00:48:38.179 --> 00:48:42.079
and you don't have access to source
control or you don't have something set up.

00:48:42.079 --> 00:48:45.299
It's also, though, meant to augment
people who are using source control.

00:48:45.300 --> 00:48:50.560
For example when you're doing things that are truly
experimental and you either don't want to bother others

00:48:50.559 --> 00:48:56.440
with the traffic that would entail or you just don't want
to mess up even your own repositories with some things

00:48:56.440 --> 00:48:59.329
that you just want to investigate on the side.

00:48:59.329 --> 00:49:04.199
So what I've brought up here is the snapshots window
and this is the Grand Perspective project again

00:49:04.199 --> 00:49:10.239
and when I was going through and working on Grand
Perspective I was taking snapshots along the way.

00:49:10.239 --> 00:49:16.319
So for example the first one here I have is the initial
version 99 of Grand Perspective and you can see

00:49:16.320 --> 00:49:23.660
when I select one item here I get to see the differences
versus what my current sources on disk look like.

00:49:23.659 --> 00:49:26.109
And I can go to any one of these and I can just select one.

00:49:26.110 --> 00:49:32.800
So, for example, I can look at you know, some string names
because at some point I went through and I changed some

00:49:32.800 --> 00:49:35.410
of the localized names to try some things out.

00:49:35.409 --> 00:49:40.399
We also show you things like, for
example, I changed the Info.plist code.

00:49:40.400 --> 00:49:44.470
Will also for those of you that are a little
more familiar more advanced users familiar

00:49:44.469 --> 00:49:48.719
with our project file format, we even
have the project file format in here.

00:49:48.719 --> 00:49:53.519
And this is a code word style view, not a code,
sorry, not a code word, file merge style view.

00:49:53.519 --> 00:49:53.800
( Laughter )

00:49:53.800 --> 00:49:57.150
Yeah, yeah, yeah.

00:49:57.150 --> 00:49:58.530
Telling my background.

00:49:58.530 --> 00:50:04.760
And so anyway, you can just go ahead you can use the space
bar, which provides an experience very similar to Mail.

00:50:04.760 --> 00:50:07.750
Or so, for example, I can space through to get to them.

00:50:07.750 --> 00:50:10.210
Or I can just use the arrow keys to move up and down.

00:50:10.210 --> 00:50:14.949
And you'll notice for each one we
selected you can see the differences.

00:50:14.949 --> 00:50:19.089
Now, it may also be that you want to look at, well, I
don't really care so much about what we have right now

00:50:19.090 --> 00:50:22.140
but what did I change like two
days ago verses three days ago?

00:50:22.139 --> 00:50:25.579
So I was looking at something there and
I think I've introduced the problem.

00:50:25.579 --> 00:50:29.590
So, I can go ahead, and, for example, just
look at the first and the second here.

00:50:29.590 --> 00:50:33.590
And then I see, well, okay, when I cleaned
up the project obviously, you know,

00:50:33.590 --> 00:50:36.150
pretty obviously it was mostly
dealing with the project file.

00:50:36.150 --> 00:50:39.760
And so I can just focus in on those
changes right then and there.

00:50:41.409 --> 00:50:47.199
Now, one other feature we added due
to feedback was that a lot of people want

00:50:47.199 --> 00:50:48.669
to be able to go back and say something like.

00:50:48.670 --> 00:50:49.320
Well, you know what?

00:50:49.320 --> 00:50:52.420
I want to go back to where I cleaned up this project there.

00:50:52.420 --> 00:50:58.639
And I want everything else, like, for example, in this
Info.plist, I changed the string, I changed the version.

00:50:58.639 --> 00:51:00.059
I want to keep that.

00:51:00.059 --> 00:51:04.750
But it turns out the names, as cool as I thought
they were, other people didn't like them.

00:51:04.750 --> 00:51:07.110
So, I want to roll back these localized names.

00:51:07.110 --> 00:51:08.280
So what you can do is,

00:51:08.280 --> 00:51:12.230
you can just select this one file and say restore.

00:51:12.230 --> 00:51:15.949
And when I do that all it does
is it goes back to that snapshot

00:51:15.949 --> 00:51:21.129
and pulls that single file forward
into my current working copy.

00:51:21.130 --> 00:51:23.780
All the other files, all the other
changes, they're still there.

00:51:23.780 --> 00:51:30.660
But now I've been able to extract this one file
out and get back to my work with minimal fuss.

00:51:30.659 --> 00:51:35.980
So, as you can see snapshots really provide you a lot
of flexibility in both understanding where you're going,

00:51:35.980 --> 00:51:40.340
where you've been on these kinds
of small scale experimental jaunts.

00:51:40.340 --> 00:51:47.910
But, it also provides you really nice ability to
correct course as it were, take individual files back.

00:51:47.909 --> 00:51:50.219
And now, a quick word about SEM.

00:51:50.219 --> 00:51:54.500
So, I finish up here and I want to go and check this into SEM.

00:51:54.500 --> 00:51:58.980
And so, let's go ahead bring up the repositories window.

00:51:58.980 --> 00:52:02.670
And you'll notice here I have a couple
repositories just sitting around.

00:52:02.670 --> 00:52:07.630
These are actually stored at the app level so, what you
do is you only have to define your repositories once

00:52:07.630 --> 00:52:13.349
and you can use them across multiple projects which makes
it really nice when you may have, like with Xcode,

00:52:13.349 --> 00:52:17.650
tons of projects that you need to deal with.

00:52:17.650 --> 00:52:23.340
So, what I'm going to go ahead, I've got this WWWC demo
subversion repository, there's not much in it right now.

00:52:23.340 --> 00:52:30.780
Let's just create a directory and we can call
it, you know my project or Grand Perspective.

00:52:30.780 --> 00:52:38.630
And I can put some, I can put comments in
here, new directory, and create directory.

00:52:38.630 --> 00:52:39.579
And there it is.

00:52:39.579 --> 00:52:40.420
It's automatically in there.

00:52:40.420 --> 00:52:43.780
You'll see on the bottom here we're
actually showing you what's going on as far

00:52:43.780 --> 00:52:46.970
as the steps being taken with your
source control environment.

00:52:46.969 --> 00:53:02.789
And then I can just go ahead select that, and say
import, and I can just choose the Grand, in this case,

00:53:02.789 --> 00:53:06.500
just to make it a little bit clearer, I'm just going to
choose this Grand Perspective directory right here.

00:53:06.500 --> 00:53:09.739
I can say my copy.

00:53:11.159 --> 00:53:15.279
And so there it goes.

00:53:15.280 --> 00:53:17.830
And I can, and you'll notice here it's just completed.

00:53:17.829 --> 00:53:19.219
It's actually been imported.

00:53:19.219 --> 00:53:21.730
And now if I wanted to I could go
easily and just check that back out.

00:53:21.730 --> 00:53:26.059
And you'll notice we actually give you quite
a bit of detail here on exactly what went on.

00:53:26.059 --> 00:53:31.269
So that you know exactly what we did when
we imported or what we did when we exported.

00:53:31.269 --> 00:53:38.869
I should also point out that this works with all the systems
that we currently support Perforce, CVS, and Subversion.

00:53:38.869 --> 00:53:43.230
So, I hope you can see that not only are we providing
you some interesting ways to experiment with your code

00:53:43.230 --> 00:53:48.059
like snapshots, we're also providing improvements
to the tools you use every day like source control.

00:53:48.059 --> 00:53:48.630
Thanks Chris.

00:53:48.630 --> 00:53:49.510
>> Chris: Thanks Scott

00:53:49.510 --> 00:53:55.090
( Applause )

00:53:55.090 --> 00:53:59.510
Now in addition to the big changes in
the editor, the big changes to debugging,

00:53:59.510 --> 00:54:05.410
the big changes to documentation viewing, the big
changes to repository and source code management.

00:54:05.409 --> 00:54:10.739
We've made some other little workflow
improvements that you've requested over the years.

00:54:10.739 --> 00:54:17.379
The open quickly menu will now search that same
symbol data base that we do with find.

00:54:17.380 --> 00:54:23.039
So, if you have a class that's not in a file
of its own name you can just open quickly,

00:54:23.039 --> 00:54:26.960
command shift D type the class name and you'll
go right to the file that declares that class.

00:54:26.960 --> 00:54:30.789
You can do that with any symbol that's in the index. Open...

00:54:30.789 --> 00:54:33.199
( Applause )

00:54:33.199 --> 00:54:36.429
Open quickly now also accepts the colon line numbers syntax.

00:54:36.429 --> 00:54:41.440
So if you want to go to a specific line or if you're
looking in your full build transcription it says

00:54:41.440 --> 00:54:47.510
that the error is at, you know, this line of the
make file with the file name colon line number.

00:54:47.510 --> 00:54:51.540
You can select that, command shift
D. You'll go directly to that line.

00:54:51.539 --> 00:54:55.820
( Applause )

00:54:55.820 --> 00:55:00.110
We've added a real recent files
menu along with recent projects.

00:55:00.110 --> 00:55:04.010
( Applause )

00:55:04.010 --> 00:55:08.960
And this will remember what context,
project context the files were in.

00:55:08.960 --> 00:55:13.929
So if you've got a project open and you open a recent
file it will open it in the context of that project.

00:55:13.929 --> 00:55:16.119
So you've got all of the in project navigation.

00:55:16.119 --> 00:55:23.359
And then we've added a little tool called, that
we call xed, the Xcode editor command line tool.

00:55:23.360 --> 00:55:28.760
This is in user being in your developer
folder and so you should put

00:55:28.760 --> 00:55:30.860
that in your path if you want to execute as a command.

00:55:30.860 --> 00:55:35.700
You can use this as the editor environment
variable for things like command line check ins.

00:55:35.699 --> 00:55:40.049
Or you can pipe text to it and it will
open it up in the Xcode text editor.

00:55:40.050 --> 00:55:45.550
So if you want to use code folding and code focus,
if you want to use the scripts in our script menu,

00:55:45.550 --> 00:55:53.480
if you want to use the features of the editor, on a file that
you get from UNIX command or a piped text or open up a file

00:55:53.480 --> 00:55:56.840
on the disk you can use the xed command to do that.

00:55:56.840 --> 00:56:01.300
And interesting enough, if you've been
going to the scripting bridge sessions,

00:56:01.300 --> 00:56:05.120
xed is completely implemented using
the scripting bridge back to Xcode.

00:56:05.119 --> 00:56:08.380
It's a really interesting application technology.

00:56:09.750 --> 00:56:14.050
And some other things that you should
really be interested in but are covered

00:56:14.050 --> 00:56:18.050
in their own sessions the Xcode Organizer.

00:56:18.050 --> 00:56:22.710
Go to the Project Tree Xcode session and you
will learn all about how to use the Organizer,

00:56:22.710 --> 00:56:29.159
not just if you're an Xcode user and want to use it
with Xcode projects to organize your Xcode projects,

00:56:29.159 --> 00:56:34.379
but also if you're using open source
projects and using Makefiles

00:56:34.380 --> 00:56:40.010
or non-C, non compiled languages:
Ruby, Python, things like that.

00:56:40.010 --> 00:56:48.300
Or, if you just want to, if you want to navigate,
search and make snapshots of random sets of files

00:56:48.300 --> 00:56:51.160
on your disk and execute scripts on them.

00:56:51.159 --> 00:56:57.859
You can take any directory from your disk whether it
has code in it or not, drop ot in the Xcode Organizer

00:56:57.860 --> 00:57:02.829
and you can make snapshots of it, have
generational storage of the changes in it.

00:57:02.829 --> 00:57:08.819
You can use the inline editor to, the in
window editor to edit the files in it.

00:57:08.820 --> 00:57:13.460
You can use the script menu to execute scripts, on it.

00:57:13.460 --> 00:57:18.980
And I even use this as you can see, to keep
backups of my presentations as I was developing it.

00:57:18.980 --> 00:57:22.500
I just had a presentations folder that
had my Keynote presentations in it.

00:57:22.500 --> 00:57:27.780
Every once and a while I would make a snapshot, and if I
made a change that was wrong I can go back and restore it

00:57:27.780 --> 00:57:34.390
from the snapshot very quickly without having to, you
know, go back and navigate in Time Machine or go back

00:57:34.389 --> 00:57:37.219
and save several copies of my keynote presentation.

00:57:37.219 --> 00:57:42.599
It's a really general purpose organizing
tool for editing and manipulating

00:57:42.599 --> 00:57:44.719
and performing script actions on information.

00:57:44.719 --> 00:57:47.349
We think you're really going to love it.

00:57:47.349 --> 00:57:50.909
Also the refactoring tool, there
are several sessions on refactoring.

00:57:50.909 --> 00:57:52.109
You should really go look at it.

00:57:52.110 --> 00:57:59.070
If you're using Objective-C and need to make broad based
changes in a project and maintain a semantic meaning

00:57:59.070 --> 00:58:03.530
of the project then refactoring is for you.

00:58:03.530 --> 00:58:05.830
So, let's wrap up.

00:58:05.829 --> 00:58:13.590
In Xcode 3.0, we put in some significant improvements
in your workflow that help you focus on your work.

00:58:13.590 --> 00:58:16.320
You can choose and use the version of the tools you need.

00:58:16.320 --> 00:58:20.880
So you don't have to use the wrong set
of tools in order to do your work just

00:58:20.880 --> 00:58:22.960
because of your choice of operating system.

00:58:22.960 --> 00:58:26.710
With Xcode 3.0 and Xcode 2.5
you can choose the version you want.

00:58:26.710 --> 00:58:30.579
And you can use the version of the project file you want.

00:58:30.579 --> 00:58:33.690
You can focus on the task at hand
in the editor with code focus

00:58:33.690 --> 00:58:37.700
and code folding to keep extraneous code out of the way.

00:58:37.699 --> 00:58:40.339
You can keep your code front and center at all times.

00:58:40.340 --> 00:58:45.530
You can do a lot of navigation including
class navigation right there in the browser.

00:58:45.530 --> 00:58:47.620
We don't have a debug mode anymore.

00:58:47.619 --> 00:58:52.150
You can go smoothly between running and
debugging and running and debugging without having

00:58:52.150 --> 00:58:56.680
to quit your application, turn on the
debugger, and go back and work your way back

00:58:56.679 --> 00:58:59.250
through the application to where you happened to have been.

00:58:59.250 --> 00:59:05.590
And if you're using our performance tools it remembers which
performance tool you're using so that when you build and go,

00:59:05.590 --> 00:59:15.200
if you had launched under Xray or Shark the previous
time it will launch it under Xray or Shark the next time.

00:59:15.199 --> 00:59:20.980
We can find code and documentation faster with
improvements in Project Find, a better documentation window,

00:59:20.980 --> 00:59:26.679
and the research assistant to show you a quick
summary of the APIs that you're using in your code.

00:59:26.679 --> 00:59:32.750
And finally, you can share work with others and keep
your work safe with the integrated repository management

00:59:32.750 --> 00:59:39.489
and the built in snapshots for Xcode projects and
for the Organizer to keep generations of your work

00:59:39.489 --> 00:59:44.969
as you go and roll back individually as you need.

00:59:44.969 --> 00:59:47.779
For more information Matt Formica is going to be up here.

00:59:47.780 --> 00:59:50.190
We'll do some Q and A, the documentation sample

00:59:50.190 --> 00:59:53.900
and other resources we'll just fire
up Xcode and go to the help menu.

00:59:53.900 --> 00:59:57.740
And all the information is there including
the Xcode 3.0 release notes,

00:59:57.739 --> 01:00:02.069
which is a really good comprehensive list
of what's going on in Xcode 3.0.