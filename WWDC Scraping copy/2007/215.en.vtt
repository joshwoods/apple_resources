WEBVTT

00:00:20.199 --> 00:00:23.300
>> I'm Kerry Hazelgren and I am the
Automator Engineering Manager

00:00:23.300 --> 00:00:27.380
and this is embracing Automator
workflows with your application.

00:00:27.379 --> 00:00:33.700
I would like to start out today by introducing some
new features that we've added to Automator for Leopard

00:00:33.700 --> 00:00:39.320
and then we'll go into the real session or topic
of our session, which is how you can embrace,

00:00:39.320 --> 00:00:43.869
or integrate Automator into your application.

00:00:44.960 --> 00:00:51.840
So for our, for Leopard we have a new user interface,
definitely some similarities with the tiger user interface.

00:00:51.840 --> 00:00:54.890
But we've sort of refreshed it
and brought it forward to Leopard.

00:00:54.890 --> 00:01:02.109
We've also added a few niceties and some tweaks
like having the log integrated into the main window,

00:01:02.109 --> 00:01:05.469
instead of in a drawer and things like that.

00:01:05.469 --> 00:01:13.019
We also have a new mechanism for organizing actions,
which is by category rather than by application.

00:01:13.019 --> 00:01:19.780
We feel this is more natural way to organize
actions representing an easier right,

00:01:19.780 --> 00:01:24.079
or a better flow for how you want to accomplish your tasks.

00:01:24.079 --> 00:01:25.709
We also have groups.

00:01:25.709 --> 00:01:28.239
Now what are you going to put in those groups?

00:01:28.239 --> 00:01:35.039
Actions, we got a way that if you have a workflow
or an action in your workflow and you configure it,

00:01:35.040 --> 00:01:41.430
set it up how you want it, you can then drag it to the
library, into a group that you created and that's now part

00:01:41.430 --> 00:01:46.000
of your library and you can use it whenever you want.

00:01:46.000 --> 00:01:53.609
We also have smart folders, we've, we ship with three
default smart folders but you can also create more

00:01:53.609 --> 00:01:59.859
as specifies criteria for them and they'll
always be up to date and however you want them.

00:01:59.859 --> 00:02:04.930
So we also have an integrated results view in every action.

00:02:04.930 --> 00:02:08.540
This should make debugging a little easier.

00:02:08.539 --> 00:02:16.259
As you can see once the workflow is run you can look
at the results for any action and see what they were,

00:02:16.259 --> 00:02:21.120
see if the action actually ran properly or what.

00:02:21.120 --> 00:02:26.120
We have over 30new actions.

00:02:26.120 --> 00:02:30.390
RSS is one big set of new actions
we have to deal with RSS feeds.

00:02:30.389 --> 00:02:39.989
We also have some Quartz Composer actions, and a Take
Video Snapshot action which we'll feature later on.

00:02:39.990 --> 00:02:42.040
There's a built in media browser.

00:02:42.039 --> 00:02:48.259
A lot of workflows deal with media such
as iTunes or iPhoto or Aperture media.

00:02:48.259 --> 00:02:54.729
So it's really nice to be able to quickly get at
that media and add that data to your workflow.

00:02:54.729 --> 00:02:58.530
We also have recording feature

00:02:58.530 --> 00:03:05.169
Now this will let you click the record button in the
toolbar and Automator will start recording your actions

00:03:05.169 --> 00:03:09.280
and when you're done it will add a
Watch Me Do action to you workflow.

00:03:09.280 --> 00:03:14.689
So whenever that Watch Me Do action runs
it will replay the steps that you recorded.

00:03:14.689 --> 00:03:20.949
This is really handy for automating things
that normally would be difficult to automate.

00:03:20.949 --> 00:03:26.619
Such as if you are working with a non
scriptable application for example.

00:03:27.650 --> 00:03:32.930
One of the biggest new features
that we have are workflow variables

00:03:32.930 --> 00:03:39.830
and this lets the user customize how
the workflow will behave when it's done.

00:03:39.830 --> 00:03:47.340
And the user can create variables of their own or choose
form a set of default variables that we ship with Automator.

00:03:47.340 --> 00:03:56.580
You can also use variables to sort of store the output of an
action to a variable and then perform some other operations

00:03:56.580 --> 00:04:01.920
and then later on read that data back in from the variables.

00:04:01.919 --> 00:04:07.239
So it can act as sort of a store and
retrieve mechanism for your workflow data.

00:04:07.240 --> 00:04:17.819
As we'll also talk about later you can programmatically set
and get the values of those variables as, through API's.

00:04:17.819 --> 00:04:24.019
Now we have starting points and this is, this starting
points is a sheet that comes down when you open

00:04:24.019 --> 00:04:31.759
up a new document and the design, the purpose is really
to let you quickly get started building your workflow.

00:04:31.759 --> 00:04:38.439
So by making a few choices and clicking the
return button Automator will add a couple,

00:04:38.439 --> 00:04:45.100
one or two actions that will hopefully provide your workflow
with the data that you are going to be working with.

00:04:46.290 --> 00:04:53.780
And then now we come to new public APIs that
we have added to the Automator Framework

00:04:53.779 --> 00:04:56.899
that will be the main topic of our session today.

00:04:56.899 --> 00:05:04.569
That basically with a workflow and your
application you can create an application

00:05:04.569 --> 00:05:11.680
that has more features then it would otherwise, you know you
can quickly add features to you application so to talk more

00:05:11.680 --> 00:05:17.509
about that I'd like to introduce Emily
Kim who is on the Automator team.

00:05:17.509 --> 00:05:24.439
( Applause )

00:05:24.439 --> 00:05:31.139
>> Emily Kim: Hi I'm Emily and today I am going to talk
to you about adding workflow support to your application.

00:05:31.139 --> 00:05:33.259
Let's take a quick review of Automator.

00:05:33.259 --> 00:05:37.079
Automator is an application used
to create automated workflows.

00:05:37.079 --> 00:05:45.029
If there is something you do repeatedly, you can create
an automated workflow to do this process for you, great.

00:05:45.029 --> 00:05:48.329
Workflows are made of one or more actions.

00:05:48.329 --> 00:05:54.279
Actions are bundles of code that are designed to do
pretty much one particular task and then you can put a UI

00:05:54.279 --> 00:05:58.229
on top of it and configure that tasks behavior.

00:05:58.230 --> 00:06:03.120
Once you've created your workflow you can
run this workflow from a variety of places.

00:06:03.120 --> 00:06:08.540
You can run it from within Automator,
as a stand alone application

00:06:08.540 --> 00:06:12.569
or as a plug in for something like iCal or Finder.

00:06:12.569 --> 00:06:19.659
And now in Leopard with the new APIs we are going to
provide you, you can now run workflows in you application.

00:06:19.660 --> 00:06:25.170
So this is great, you can have all the
power of Automator in your application.

00:06:25.170 --> 00:06:31.300
Now some of you might be wondering well if Automator is
for automating things there's nothing in my application

00:06:31.300 --> 00:06:35.290
that I need to automate, you know
what am I getting out of this session.

00:06:35.290 --> 00:06:37.689
Well I'm getting there don't worry.

00:06:37.689 --> 00:06:45.040
If any of you were paying attention in Betrand's State
of the Union on Monday you would notice that he said,

00:06:45.040 --> 00:06:47.520
he said two key phrases that I want to emphasize.

00:06:47.519 --> 00:06:50.449
The first is Encapsulation and Reuse.

00:06:50.449 --> 00:06:53.170
The second is Building Fast.

00:06:53.170 --> 00:06:57.540
Now with Automator in Leopard you
can do both of these things.

00:06:57.540 --> 00:07:02.520
Automator actions are in the library and essentially they
are just pieces of code that other people have written

00:07:02.519 --> 00:07:06.969
for you in a tiny little bundle,
you drag and drop it into Automator.

00:07:06.970 --> 00:07:12.640
I don't know how much more Encapsulation and
Reuse that you can get then that, I mean really.

00:07:12.639 --> 00:07:18.490
And then when you come to Building Fast, all you do is add
these actions to you workflow and you've got a workflow

00:07:18.490 --> 00:07:21.000
that does something for you just from drag and drop.

00:07:21.000 --> 00:07:27.120
If you can put the functionality of this workflow in your
application you barely even have to write any code to do it,

00:07:27.120 --> 00:07:30.129
it was drag and drop and suddenly you
have a new feature in your application.

00:07:30.129 --> 00:07:33.279
If that's not Building Fast, I mean I don't know what is.

00:07:33.279 --> 00:07:38.619
So with that in mind workflows can sort
of act as plug-ins for your application.

00:07:38.620 --> 00:07:45.689
And then Automator essentially becomes your plug-in
development environment, there by becoming the new Xcode.

00:07:45.689 --> 00:07:48.589
Note the sweet icon.

00:07:48.589 --> 00:07:54.029
So let's get you a concrete example of how you
might be able to use this technology yourself.

00:07:54.029 --> 00:07:59.679
Say you're a developer for a photo application, something
kind of like iPhoto where you can see your pictures

00:07:59.680 --> 00:08:06.730
and they look great and then one day your boss comes
to you and he says you know everyone's really excited

00:08:06.730 --> 00:08:09.700
about those new iSight cameras on their computers.

00:08:09.699 --> 00:08:13.019
Let's have a feature that uses those,
so you got to say to yourself okay then

00:08:13.019 --> 00:08:16.189
that sounds like a good idea, iSight are fun.

00:08:16.189 --> 00:08:19.680
But how do you go about adding
this feature to your application?

00:08:19.680 --> 00:08:24.949
Some people may know, some people may not and even if you
do kind of have an idea you still have to do the research

00:08:24.949 --> 00:08:29.439
and figure out which framework that you need to pull
in and then how those API's work and then do you have

00:08:29.439 --> 00:08:35.600
to do your own UI and then how do you debug it and you
know it's a lot of work so even if you knew where to start

00:08:35.600 --> 00:08:38.509
from you would still have a lot of code to write.

00:08:38.509 --> 00:08:45.080
So now picture for a moment, you can go into
Automator, take out that new Take Video Snapshot action

00:08:45.080 --> 00:08:51.020
that Kerry mentioned earlier add it to your
workflow, add that workflow to your application

00:08:51.019 --> 00:08:54.240
and suddenly that's the feature that your boss asked for.

00:08:54.240 --> 00:08:59.509
Sounds crazy, maybe, but lets bring Kerry up
on stage and he'll show you how it's done.

00:08:59.509 --> 00:09:04.720
( Applause )

00:09:04.720 --> 00:09:05.800
>>Kerry: Not that crazy.

00:09:05.799 --> 00:09:11.370
Okay so here I have a sample application
that I wrote and it's really great.

00:09:11.370 --> 00:09:16.669
It's called photo browser, it displays photos but
it really doesn't really do much more then that.

00:09:16.669 --> 00:09:23.849
So as Emily said, my boss asked me to create
a function or a feature that takes a photo.

00:09:23.850 --> 00:09:28.300
So how am I going to do that?

00:09:28.299 --> 00:09:33.149
Well I'm going to start by creating an Automator workflow

00:09:33.149 --> 00:09:36.949
and here's my starting points dialog
that I talked about earlier.

00:09:36.950 --> 00:09:45.100
I am just going to start with an empty, an empty workflow
so I am just going to choose the custom selection.

00:09:45.100 --> 00:09:51.320
Now if I go to the photo's category I can see
all of my photo related actions and down here

00:09:51.320 --> 00:09:55.150
at the bottom there is a Take Video Snapshot
action and that's the one that I want.

00:09:55.149 --> 00:09:57.179
So I drag it to my workflow.

00:09:57.179 --> 00:10:03.829
I have a couple of properties that I can choose
from, I'm going to save it to the pictures folder,

00:10:03.830 --> 00:10:08.840
when the snapshot is taken, then I am going to
leave the rest of it alone because I don't want

00:10:08.840 --> 00:10:11.399
to take it automatically, I want the user to take it.

00:10:11.399 --> 00:10:16.319
So that's my workflow and I am just gonna save it like that.

00:10:16.320 --> 00:10:18.100
Oh mistype.

00:10:18.100 --> 00:10:20.850
Save it again.

00:10:20.850 --> 00:10:25.629
I am going to call it Take Photo's.

00:10:25.629 --> 00:10:31.629
I meant to save it to the desktop, oh well.

00:10:31.629 --> 00:10:35.700
So there we have my workflow.

00:10:35.700 --> 00:10:41.150
Now if I go and I am going to look
that up again, there it is.

00:10:41.149 --> 00:10:46.559
I am going to drag and add that
workflow to my Xcode project.

00:10:46.559 --> 00:10:54.229
So I am just going to drag it over here
to this workflows folder that I created.

00:10:54.230 --> 00:10:58.149
Now anyone that used Xcode has seen this dialog before.

00:10:58.149 --> 00:11:03.789
The one thing you have to know about adding a workflow
to your project is that this setting right here

00:11:03.789 --> 00:11:07.360
that say recursively create groups for any added folders.

00:11:07.360 --> 00:11:12.330
A workflow is actually a bundle and if
you add a bundle to your Xcode project

00:11:12.330 --> 00:11:15.200
and you have this set, it won't work properly.

00:11:15.200 --> 00:11:22.840
The idea is that when your project is build and your
application is created it will bundle the workflow inside

00:11:22.840 --> 00:11:26.960
of your applications bundles so you need
that bundle to be intact so we are just going

00:11:26.960 --> 00:11:29.980
to change this to create folder references.

00:11:29.980 --> 00:11:32.529
Trust me it won't work unless you do that.

00:11:32.529 --> 00:11:40.279
And even in Xcode it doesn't look quite like a
workflow, it looks like a folder but it will work.

00:11:40.279 --> 00:11:44.730
Now we have our workflow in our Xcode project.

00:11:44.730 --> 00:11:49.009
I previously wired up the toolbar item that you saw,

00:11:49.009 --> 00:11:55.689
that when it is pressed it will call this Take
Photo action, the Take Photo method I should say.

00:11:55.690 --> 00:11:59.140
So let's look at the code that we are going to run.

00:11:59.139 --> 00:12:02.000
And the user clicks the toolbar button.

00:12:02.000 --> 00:12:08.809
First we are going to start by getting a path to the
workflow that we want to run, and it's in our main bundles

00:12:08.809 --> 00:12:13.989
that so we just call path for resource,
take photo of type workflow.

00:12:13.990 --> 00:12:20.980
Sorry, oh did I name it wrong?

00:12:20.980 --> 00:12:28.340
Alright and once, well I would know, I would find
out later but thank you for saving me the time.

00:12:28.340 --> 00:12:32.910
Once I have the workflow object I can
just call this AM workflow class method,

00:12:32.909 --> 00:12:41.610
its one line and what it will do is load the workflow and
execute it and return the result back to my application.

00:12:41.610 --> 00:12:49.210
So I call run Work flow at URL and I pass a URL
that we create from the path with input I'm not going

00:12:49.210 --> 00:12:55.670
to pass any input this time so I just passed nil and then
there's an error perimeter that Automator can let me know

00:12:55.669 --> 00:13:01.039
if something went wrong wither
loading the workflow or executing it.

00:13:01.039 --> 00:13:07.740
So if I have a result and there is no error then I
know that it executed properly and I have a result.

00:13:07.740 --> 00:13:16.149
Now in this case the result is an array of one item
and that item is a path to the picture that was taken.

00:13:16.149 --> 00:13:19.149
I know that because that's the output of that one action.

00:13:19.149 --> 00:13:24.970
But this can change depending on whatever the
action, the last action in the output returns.

00:13:24.970 --> 00:13:31.750
It could be Cocoa strings or it could be
AppleEvent Descriptors or what have you.

00:13:31.750 --> 00:13:37.440
So I just call this method that I wrote in my app, that
doesn't really concern our demo it's just going to take,

00:13:37.440 --> 00:13:40.460
it's just going to add those items
to the photo browser object.

00:13:40.460 --> 00:13:43.110
So let me build and run this.

00:13:46.509 --> 00:13:56.509
And here we have our app again and if I click this it
should take a picture and I am sorry the pictures of me,

00:13:58.490 --> 00:14:03.639
but here we have it and if I click return, there it is.

00:14:03.639 --> 00:14:06.509
I get the result in my workflow.

00:14:06.509 --> 00:14:10.559
( Applause )

00:14:10.559 --> 00:14:11.669
>> So that was really easy.

00:14:11.669 --> 00:14:19.120
It's a simple one action workflow but obviously you can add,
you know you can have a workflow with however many actions

00:14:19.120 --> 00:14:25.750
in it and still for the developer you only have to do
a couple of lines of code so its scales really well.

00:14:25.750 --> 00:14:35.679
And so to continue and talk about what we learned, Emily.

00:14:35.679 --> 00:14:39.309
(Applause 0:14:35 to 0:14:39)

00:14:39.309 --> 00:14:42.779
>> Emily: Slides please.

00:14:42.779 --> 00:14:47.860
Okay. So what did you learn in this demo?

00:14:47.860 --> 00:14:53.610
Kerry showed you how you can create an Automator workflow
and add an action to it then once you added the workflow

00:14:53.610 --> 00:15:00.050
to your applications Xcode project you can and add a couple
lines of code you've pretty much added a brand new feature

00:15:00.049 --> 00:15:06.589
to your application that your boss is thrilled with
and it was so easy that even my manager could do it.

00:15:06.590 --> 00:15:10.220
So clearly this is great technology.

00:15:10.220 --> 00:15:13.279
But this is really the tip of the ice burg.

00:15:13.279 --> 00:15:16.500
This was just one line and workflow class
method and you can run this workflow.

00:15:16.500 --> 00:15:21.120
But what if you wanted to set the input of the
workflow if maybe get at the actions in the workflow.

00:15:21.120 --> 00:15:28.529
We need something more powerful but before we get to into
that let's take a step back and look at the big picture.

00:15:28.529 --> 00:15:34.199
This is Starry Night by Vincent van Gogh, painted
in 1889 and when he was still pretty insane.

00:15:34.200 --> 00:15:38.360
Now you might be wondering what does
Starry Night have to do with Automator.

00:15:38.360 --> 00:15:42.090
I'm also getting there trust me.

00:15:42.090 --> 00:15:48.200
Lets say somebody gave you this a blank canvas and
a paint brush and they said paint Starry Night.

00:15:48.200 --> 00:15:53.670
I'm no artist and most of you are probably not
artist either and even those of us who are artist,

00:15:53.669 --> 00:15:57.079
it would probably take us years to try
to recreate van Gogh's master piece

00:15:57.080 --> 00:16:01.590
and even when we were done it probably
would look nothing like Starry Night anyway.

00:16:01.590 --> 00:16:07.200
But then lets say someone gave you a paint by number version
of Starry Night all you have to do is connect the numbers

00:16:07.200 --> 00:16:15.330
on the colors, how hard can that be and suddenly
even like you or I could create Starry Night.

00:16:15.330 --> 00:16:20.680
Now imagine that your application is like that blank
canvas, you want to add features to your application,

00:16:20.679 --> 00:16:24.179
you want it to be great but your just
maybe not quite sure how to do it

00:16:24.179 --> 00:16:27.719
or it might take you a really long
time, you just don't have the resources.

00:16:27.720 --> 00:16:32.110
Now what if an Automator was like your
paint by number version of your application,

00:16:32.110 --> 00:16:36.810
then all you'd have to do is create the workflows with
drag and drop and then stick them in your application

00:16:36.809 --> 00:16:40.949
and suddenly you got fully a featured
application that you developed quickly and easily.

00:16:40.950 --> 00:16:46.090
Either that of you have Starry Night,
one or the other so both are great,

00:16:46.090 --> 00:16:51.330
so to tell you more about this technology we're
going to talk about the Automator Framework now.

00:16:51.330 --> 00:16:55.330
And the three workflow classes we've
made public for you in Leopard.

00:16:55.330 --> 00:17:00.310
The first on is Automator workflow,
this is the model object for workflows.

00:17:00.309 --> 00:17:03.419
The second is AM workflow controller.

00:17:03.419 --> 00:17:06.789
And the third is AM workflow view, big surprise.

00:17:06.789 --> 00:17:11.190
So these three classes follow the model
controller design pyridine and are meant

00:17:11.190 --> 00:17:14.230
to be implemented directly so don't sub class these.

00:17:14.230 --> 00:17:20.309
But first let's go more into detail on AM workflow.

00:17:20.309 --> 00:17:22.319
Taking my water break.

00:17:25.670 --> 00:17:29.200
I'm building up the anticipation.

00:17:30.819 --> 00:17:34.409
So AM workflow is the workflow model object.

00:17:34.410 --> 00:17:39.940
You can load this workflow from disc and then once
you have the workflow you can access the actions in it

00:17:39.940 --> 00:17:43.670
or you can set the input for the
workflow or get and set variable values.

00:17:43.670 --> 00:17:47.980
So how do we allocate an AM workflow object?

00:17:47.980 --> 00:17:53.380
First you have some NSURL that points to a workflow in disc

00:17:53.380 --> 00:17:56.520
and then you allocate the object by
calling in it with contents of URL.

00:17:56.519 --> 00:18:02.420
And you also have an error parameter so for some
reason the workflow isn't created you can check that.

00:18:02.420 --> 00:18:04.250
Now what we do once we have this workflow?

00:18:04.250 --> 00:18:07.680
Well we can look at all the actions
in the workflow, that's great.

00:18:07.680 --> 00:18:14.490
Once you have this you can also add actions or remove
actions as well as insert them or move them around.

00:18:14.490 --> 00:18:17.910
So basically you can do anything
programmatically with the workflow and its actions.

00:18:17.910 --> 00:18:23.380
You can also set the input of the workflow so if you
have the workflow in your application and you want it

00:18:23.380 --> 00:18:28.780
to interact more directly with your application you
can for example pass it, call set input on the workflow

00:18:28.779 --> 00:18:33.460
and pass in objects from and Automator will work with them.

00:18:33.460 --> 00:18:37.779
Kerry also mentioned that a new feature
for Automator in Leopard called variables.

00:18:37.779 --> 00:18:43.539
You can programmatically get and set variables by calling
value for variable with name and then passing it the name

00:18:43.539 --> 00:18:45.569
of the variable that you are interested in.

00:18:45.569 --> 00:18:52.409
or you can also call set value for variable of name
giving it the values you want the variable to have.

00:18:52.410 --> 00:18:56.700
So now that we talked about AM workflow you might be
wondering well you know I still have all these things

00:18:56.700 --> 00:19:00.549
and I want to run the workflow, so we don't have,

00:19:00.549 --> 00:19:04.099
so you saw already that you can run a
workflow using the AM workflow class method

00:19:04.099 --> 00:19:08.199
but to run a workflow object you
need AM workflow controller.

00:19:08.200 --> 00:19:14.170
So that's what we are going to talk about now, how
to run you workflow using AM workflow controller.

00:19:14.170 --> 00:19:19.920
The controller is the controller objects for workflows
and this is how you ruin an AM workflow object.

00:19:19.920 --> 00:19:25.410
You can also set a delegate on the controller and implement
delegate methods there which we'll talk about in a bit.

00:19:25.410 --> 00:19:32.009
But first running the workflow, we have AM workflow that we
created before and we've done whatever it is that we wanted

00:19:32.009 --> 00:19:38.430
to do to it, so we're set, we want to run this thing so
now we have, we create a controller which can also be found

00:19:38.430 --> 00:19:41.340
in the Automator pallet in interface builder three.

00:19:41.339 --> 00:19:43.579
Then you simple call set workflow on the controller,

00:19:43.579 --> 00:19:47.279
and you give it the workflow object
and then you call run, that s easy.

00:19:47.279 --> 00:19:53.779
It may not be one line of code but its still
now just four, so it's really not a big deal.

00:19:53.779 --> 00:19:59.970
You can also set a delegate on the controller to receive
call backs for status updates when the workflow is running.

00:19:59.970 --> 00:20:06.319
So to do that you simply call set delegate on
the controller and you give it the delegate.

00:20:06.319 --> 00:20:11.909
You can implement several delegate methods
including when the workflow will run or stop as well

00:20:11.910 --> 00:20:15.410
as when actions will run or stop and if the workflow fails.

00:20:15.410 --> 00:20:19.730
And for example, to something useful you could do with
this is you could update the UI in your application

00:20:19.730 --> 00:20:23.670
and give user feedback on the status
of the workflow while it's running.

00:20:23.670 --> 00:20:28.960
So we've talked about AM workflow and
we've talked about AM workflow controller.

00:20:28.960 --> 00:20:29.920
But talk is cheap.

00:20:29.920 --> 00:20:31.070
Let's see this thing in action.

00:20:31.069 --> 00:20:34.599
So I am going to invite Kerry back
up on stage for another demo.

00:20:34.599 --> 00:20:39.919
He'll show you how you can create a workflow object and
how you can set a variable value in the workflow as well

00:20:39.920 --> 00:20:43.050
as set the input for the workflow so it
can interact more with our application

00:20:43.049 --> 00:20:49.210
and then he run the workflow using
AM workflow controller so Kerry.

00:20:49.210 --> 00:20:51.309
>> Kerry: Thanks Emily.

00:20:51.309 --> 00:20:55.429
You heard that so easy my manager can do it thing right?

00:20:55.430 --> 00:21:01.880
If she's not here next year you'll know why.

00:21:01.880 --> 00:21:12.170
Okay so in this demo I want to add a new feature to my
application, to take whatever photos I select and add them,

00:21:12.170 --> 00:21:18.190
create an Email message, put them in an Email message
so that I can send them to friends and family.

00:21:18.190 --> 00:21:26.090
I'm going to do it a little differently this time
though using AM workflow and AM workflow controller.

00:21:26.089 --> 00:21:31.069
I already have my workflow here that I am going to run.

00:21:31.069 --> 00:21:36.970
It's already in my project, if I just
right click and open with Finder,

00:21:36.970 --> 00:21:41.750
we can open it up in Automator and see what it looks like.

00:21:41.750 --> 00:21:47.990
So there's three actions, copy Finder items, I want to
make a copy of them first because the second action,

00:21:47.990 --> 00:21:53.720
a scale image is going to you know alter
them in a way that is not undoable.

00:21:53.720 --> 00:21:59.019
So we are going to copy them and we are going to scale them
down to a size that's good for fitting in an Email message

00:21:59.019 --> 00:22:07.670
and then we're going to create that Email message using the
new mail message action which when its past files as input,

00:22:07.670 --> 00:22:11.210
it adds those to the body of the mail message.

00:22:11.210 --> 00:22:19.559
Now there's one more thing that we want to do with this,
I want to, I want to create a variable to use as a subject

00:22:19.559 --> 00:22:24.929
of my Email message, because I want
to have it different each time.

00:22:24.930 --> 00:22:31.310
So if I right click in the subject field, I can see
that at the bottom there is a new variable menu item

00:22:31.309 --> 00:22:37.720
and I am just going to choose that and it's going to
create a variable and put it in that field and then pop

00:22:37.720 --> 00:22:40.110
up this window that lets me edit the variable.

00:22:40.109 --> 00:22:49.079
I am going to call it subject and I am not going to give
it a value, I am going to do that when the workflow runs,

00:22:49.079 --> 00:22:58.159
so just erase that and then click done and then my workflow
is ready for me to, I'm done with the workflow now.

00:22:58.160 --> 00:23:02.100
So let me just close it and go back to my project.

00:23:02.099 --> 00:23:08.969
Now let's look at the code we're going to
run when we want to execute the workflow.

00:23:08.970 --> 00:23:15.850
So Email photos here is the method that gets called
when I got a new toolbar item that you'll see

00:23:15.849 --> 00:23:21.819
and when the user clicks that its going to call it
my Email photos method and again what we are going

00:23:21.819 --> 00:23:26.039
to do is start by getting a path to the workflow.

00:23:26.039 --> 00:23:31.649
Once we have that instead of calling the class
method to run and execute it what we're going

00:23:31.650 --> 00:23:34.700
to do is actually allocate an AM workflow object.

00:23:34.700 --> 00:23:42.670
What we do is call AM workflow end it with contents
or URL, creating a URL form the path to the workflow

00:23:42.670 --> 00:23:45.480
and then there's also an error parameter.

00:23:45.480 --> 00:23:55.559
Now the next thing we are going to do is determine what the
subject of our variable, or what the subject is going to be.

00:23:55.559 --> 00:24:01.289
So we sort of get the paths to the photos that were
selected and we see if there's just one and we are going

00:24:01.289 --> 00:24:06.029
to take the name of that photo, if there's
more then one then its going to be the name

00:24:06.029 --> 00:24:09.059
of the first photo and how many ever more.

00:24:09.059 --> 00:24:17.169
So when we done all that work to determine what the
subject is we are going to set that as the values

00:24:17.170 --> 00:24:22.240
of the subject variable calling
set value for variable with name.

00:24:22.240 --> 00:24:32.960
Then we're going to set the input of the workflow to be
the path to the photos that we selected and we are going

00:24:32.960 --> 00:24:38.180
to tell workflow controller here's
your workflow by calling set workflow.

00:24:38.180 --> 00:24:41.700
And finally we're going to run it.

00:24:41.700 --> 00:24:52.000
So if we build and run our application, again we have our
photo browser application and we have an Email toolbar item.

00:24:52.000 --> 00:24:58.579
So let me select the lady bug and the
rhinoceros here, I mean the zebra.

00:24:58.579 --> 00:25:02.649
Sorry looks like a rhino doesn't it?

00:25:02.650 --> 00:25:09.140
And if I click Email then I get an Email
message with the two photos that I selected

00:25:09.140 --> 00:25:14.270
and the subject is ladybug.jpeg and one more.

00:25:14.269 --> 00:25:19.160
And just for demo purposes lets
just select a couple different ones.

00:25:19.160 --> 00:25:23.670
We can see it adds those and we
have a different subject this time.

00:25:23.670 --> 00:25:29.250
So this workflow for example just to give you an idea

00:25:29.250 --> 00:25:33.589
of the time savings here its just a little more
complicated then last time cause we were talking

00:25:33.589 --> 00:25:40.309
about three very different technologies and these actions,
one is in the file system interacting and copying files,

00:25:40.309 --> 00:25:48.710
the second one calls into the image library to scale it,
the third one calls some apple script code to tell mail

00:25:48.710 --> 00:25:56.140
to create a new message and to add those again instead
of having to learn those different technologies

00:25:56.140 --> 00:26:01.680
and implementing them in your application,
this workflow a simple drag and drop

00:26:01.680 --> 00:26:05.470
and again very little code to implement it.

00:26:05.470 --> 00:26:09.509
So to go over again we will bring back Emily.

00:26:09.509 --> 00:26:17.930
( Applause )

00:26:17.930 --> 00:26:19.180
>> Emily: Slides please.

00:26:19.180 --> 00:26:23.310
Thanks. Thanks Kerry.

00:26:23.309 --> 00:26:25.609
So what did you learn in the demo?

00:26:25.609 --> 00:26:30.669
Kerry showed you how you can allocate AM workflow
objects and how you can set variable values

00:26:30.670 --> 00:26:33.340
for this objects as well as set the input for them.

00:26:33.339 --> 00:26:39.639
And then you saw how you can create AM workflow
controller objects and use them to run AM workflows.

00:26:39.640 --> 00:26:44.710
So we've talked about AM work flow, and
we've talked about AM work flow controller.

00:26:44.710 --> 00:26:48.490
I am guessing that the next one
is going to be AM work flow view.

00:26:48.490 --> 00:26:55.500
So AM work flow view, this is essentially the view
that we have in auto mater, so imagine taking that view

00:26:55.500 --> 00:26:59.539
with all the actions in it and
putting that in your application.

00:26:59.539 --> 00:27:05.200
So this is invaluable for a number of reasons, first
of all, not only can you and your users view work flows

00:27:05.200 --> 00:27:10.500
from within your application, no more having to switch
applications and going from your app to auto mater and back

00:27:10.500 --> 00:27:12.750
but in your application you can see these.

00:27:12.750 --> 00:27:16.049
And not only can you see them but you can edit them.

00:27:16.049 --> 00:27:21.619
Let's say for example this gives your users so much more
power than they could if you had just created some feature

00:27:21.619 --> 00:27:23.789
for your application and then shipped it with that.

00:27:23.789 --> 00:27:27.529
Let's say you really like the color
eggplant purple, but someone's like "I don't

00:27:27.529 --> 00:27:31.029
like that color, I want it to be, you know, tomato red."

00:27:31.029 --> 00:27:36.139
if you put AM work flow view in your application they
can just go to the color well and choose tomato red

00:27:36.140 --> 00:27:40.640
and be perfectly happy and the best part about
that is you didn't even have to write any UI

00:27:40.640 --> 00:27:43.009
to provide this customization for your user.

00:27:43.009 --> 00:27:49.319
All you have to do is stick in the work flow view and some
develop, action developer has already done the UI for you.

00:27:49.319 --> 00:27:53.319
All you have to do is put it in your
application and let the user go to town.

00:27:53.319 --> 00:28:00.210
So how do you get name work flow view in your application,
the work flow view is also in the auto mater pallet

00:28:00.210 --> 00:28:05.480
in interface builder three and so using IB three's
new lovely library we have the auto mater pallet

00:28:05.480 --> 00:28:07.690
in there and the work flow view.

00:28:07.690 --> 00:28:15.120
So, that's what it looks like, the controller is also in the
pallet so you can hook those guys up in interface builder

00:28:15.119 --> 00:28:19.119
or you can do it programmatically
by creating a work flow view

00:28:19.119 --> 00:28:22.579
and then in the controller called
set work flow view with that view.

00:28:22.579 --> 00:28:27.679
So, seems easy enough so lets see is
Kerry can manage this in his next demo.

00:28:27.680 --> 00:28:33.200
He's going to show you how you can use AM work flow view
and he'll show you that, he'll implement a delegate

00:28:33.200 --> 00:28:38.230
for the controller and show you how you can update
your UI depending on the status of the work flow

00:28:38.230 --> 00:28:43.360
and then he'll also show you how you can allow
users to customize feature of your application.

00:28:43.359 --> 00:28:45.099
Please don't fire me.

00:28:45.099 --> 00:28:49.389
(laughs)

00:28:49.390 --> 00:28:58.160
>> Kerry: it should not be this much fun presenting
WWC sessions I swear (clears throat) okay, so um,

00:28:58.160 --> 00:29:06.759
what we want to do is I'm going to show you how
to use a AM work flow view in your application.

00:29:06.759 --> 00:29:10.379
Hello? Yeah can I get a demo machine?

00:29:10.380 --> 00:29:15.190
Okay actually we're just going to look at the code
because we've already wired it up in interface builder

00:29:15.190 --> 00:29:21.279
and she showed you a screen shot of that um
what we're going to do differently here is

00:29:21.279 --> 00:29:24.049
that in the previous two examples
is when a user clicked on one

00:29:24.049 --> 00:29:29.639
of the tool bar items we loaded the
work flow and executed it all at once.

00:29:29.640 --> 00:29:35.820
This time we're actually we want to pre load the work flow
because we want the user to be able to configure it first,

00:29:35.819 --> 00:29:39.189
and then when they click on the
tool bar button it will execute.

00:29:39.190 --> 00:29:48.509
So I have this set up add color work flow method that I
call from the awake from Nib method in my window controller

00:29:48.509 --> 00:29:55.059
so this gets run when the window in opened and again I don't
think there's really much new here oh well I guess there one

00:29:55.059 --> 00:30:00.730
line new, we take a work flow path
and allocate a work flow object,

00:30:00.730 --> 00:30:09.670
an AM work flow object then we have a work flow controller,
I have a new work flow controller for this method just

00:30:09.670 --> 00:30:12.470
because I didn't want it to get
away, in the way of the other ones

00:30:12.470 --> 00:30:17.160
but I'm allocating a new work flow
controller just using alloc init,

00:30:17.160 --> 00:30:20.480
there's not special initializer for AM work flow controller.

00:30:20.480 --> 00:30:28.150
Then we tell the work flow controller here's your
work flow view, the work flow view is initiated,

00:30:28.150 --> 00:30:35.490
instantiated in the Nib so that's a reference is an
I-bar, so the work flow controller's that work flow view

00:30:35.490 --> 00:30:42.250
with our work flow view we also set the work flow for
the work flow controller now they work in harmonies

00:30:42.250 --> 00:30:49.299
so if you set a work flow view on a controller and you give
it a work flow it will automatically load the work flow

00:30:49.299 --> 00:30:56.440
in the work flow view and you can do those in either order
and it'll just automatically load and display the work flow

00:30:56.440 --> 00:31:01.620
so you don't have to worry about how you
display a work flow in a work flow view.

00:31:01.619 --> 00:31:05.789
Now we're going to set a delegate this
time so we can get delegate methods

00:31:05.789 --> 00:31:10.430
as the workflow runs and I'll show you those.

00:31:10.430 --> 00:31:14.799
Now when the user clicks on the tool bar
button, it's going to call this add color method

00:31:14.799 --> 00:31:18.230
and there's not much left to do at this point.

00:31:18.230 --> 00:31:24.049
We basically just set the input for the
workflow with the paths to the selected photos

00:31:24.049 --> 00:31:28.009
and then we tell the workflow controller to run.

00:31:28.009 --> 00:31:35.420
Now the rest of this code here are delegate
methods and there's several of them,

00:31:35.420 --> 00:31:40.769
but they all just use slight variations of the same
thing, like when the workflow controller is going to run,

00:31:40.769 --> 00:31:46.150
just before it starts running, I have a text field
and a progress indicator at the bottom of the window

00:31:46.150 --> 00:31:52.370
and I just want to display progress, so when the
workflow's about to run I am just setting up the minimum,

00:31:52.369 --> 00:31:56.739
the maximum and the starting values
of the progress indicator.

00:31:56.740 --> 00:32:04.339
And then when say down here when the workflow is
about to run an action, I just put in the text field

00:32:04.339 --> 00:32:08.869
that we're running this action and the
same when the action finishes running,

00:32:08.869 --> 00:32:12.389
I say it finished running such and such an action.

00:32:12.390 --> 00:32:20.000
Now there's one more thing I do is that when
the workflows done I have to get the results.

00:32:20.000 --> 00:32:27.950
So, this is a little wordy, but basically what I'm doing
is getting the out put of the last action in the workflow.

00:32:27.950 --> 00:32:31.019
And that's essentially the output of the workflow.

00:32:31.019 --> 00:32:37.789
So I'm asking the controller for it's workflow and
then getting the actions array from the workflow,

00:32:37.789 --> 00:32:41.809
getting the last one and asking for its output.

00:32:41.809 --> 00:32:47.619
And then I'm adding those items back
into my workflow, into my photo browser.

00:32:47.619 --> 00:32:53.229
So this is a way that you can add a little more control.

00:32:53.230 --> 00:32:56.849
If something happens that's wrong
you can stop the work flow.

00:32:56.849 --> 00:33:04.189
You can perform additional setup or
follow along if your application needs to.

00:33:04.190 --> 00:33:08.990
but those delegate methods aren't
necessary, they're just for your convenience.

00:33:08.990 --> 00:33:17.210
Okay. So now lets run building around
this workflow or application I should say.

00:33:17.210 --> 00:33:24.630
Now if I make this a little bit bigger and expand this,
you can see that there's a workflow view already in here.

00:33:24.630 --> 00:33:29.970
Whoo, now Emily said we want to add a color to it.

00:33:29.970 --> 00:33:33.740
But we might want to, as the user, I
might want to change what color it is.

00:33:33.740 --> 00:33:42.220
So let me change it to a nice red and I'm going to select
a couple of images here and click the add color button.

00:33:42.220 --> 00:33:48.660
As you can see there's, well it actually allocated
pretty quickly, but you can see there's the results.

00:33:48.660 --> 00:33:57.910
I'll do it a couple of more times so you can see the
progress here at the bottom in the progress indicator.

00:33:57.910 --> 00:34:04.750
So you can see that it's actually keeping the
workflow as I specified, assuming I'm the user,

00:34:04.750 --> 00:34:07.910
and it's returning the results to my application.

00:34:07.910 --> 00:34:09.700
So there you have.

00:34:09.699 --> 00:34:11.159
Now Emily.

00:34:12.510 --> 00:34:19.850
( Applause )

00:34:19.849 --> 00:34:24.339
>> Emily: That was unplanned, him doing
Tomato Red and Eggplant purple, by the way.

00:34:24.340 --> 00:34:26.050
So slides, please.

00:34:27.929 --> 00:34:29.000
Thank you.

00:34:29.000 --> 00:34:31.179
So what did you see in that demo?

00:34:31.179 --> 00:34:34.230
You saw how to use an AM workflow view in your application.

00:34:34.230 --> 00:34:37.139
And you also saw how you can set
a delegate on the controller

00:34:37.139 --> 00:34:41.000
and to implement delegate methods
and update your application's UI.

00:34:41.000 --> 00:34:45.159
You also saw how you can allow customers,
op, this is what you will learn.

00:34:45.159 --> 00:34:45.980
Same thing.

00:34:45.980 --> 00:34:48.250
So you did learn all of that.

00:34:48.250 --> 00:34:52.179
And you also learned how you can allow users
to customize your application's features.

00:34:52.179 --> 00:34:58.349
And in doing so, we learned how to use all three of
the workflow classes that we've made public in Leopard.

00:34:58.349 --> 00:35:05.099
So, we've now talked about AM workflow and
AM workflow controller and AM workflow view.

00:35:05.099 --> 00:35:06.819
There's only three circles on there.

00:35:06.820 --> 00:35:08.990
So that's a pretty sure sign that we're close to the end.

00:35:08.989 --> 00:35:10.759
So don't worry.

00:35:10.760 --> 00:35:14.470
Let's take another step back and
look again at the big picture.

00:35:14.469 --> 00:35:17.219
What have we learned in this session today?

00:35:17.219 --> 00:35:21.989
First Kerry told you about some of the new
features that we have in Automator in Leopard.

00:35:21.989 --> 00:35:25.549
We hope you're thrilled to start using these
features and we had a fun time making them.

00:35:25.550 --> 00:35:28.539
So feedback is great.

00:35:28.539 --> 00:35:34.179
We also learned how you can make Automator
your plug-in development environment.

00:35:34.179 --> 00:35:36.980
It really doesn't get much easier
than just dragging and dropping.

00:35:36.980 --> 00:35:44.010
And if you just remember that paint by number example that
I gave, making applications suddenly becomes really easy.

00:35:44.010 --> 00:35:48.420
We also learned how you can utilize all three
of the new workflow classes that we've added

00:35:48.420 --> 00:35:54.280
in the Automator framework, and in doing that you
can add trivial amounts of code to your application

00:35:54.280 --> 00:35:58.040
and get non trivial features out of that code.

00:35:58.039 --> 00:36:01.759
You've also learned how you can
empower the user with customization,

00:36:01.760 --> 00:36:05.330
with allowing them to customize their
experience with your application.

00:36:05.329 --> 00:36:10.340
So often with rapid application development environments,
the programmer just wanted to get the application

00:36:10.340 --> 00:36:12.920
out the door really quickly and make money.

00:36:12.920 --> 00:36:17.180
But the user usually ends up having to suffer because
of that, because the programmer wasn't really thinking

00:36:17.179 --> 00:36:19.589
about the user, he just wanted to be done quickly.

00:36:19.590 --> 00:36:24.750
However, if you use Automator as your rapid application
development environment, not only do you save time,

00:36:24.750 --> 00:36:29.059
and you still get your application out the
door quickly, but the user also benefits

00:36:29.059 --> 00:36:33.639
because you've given them a workflow view and they
can customize how they want that feature to behave.

00:36:33.639 --> 00:36:35.650
Everyone profits.

00:36:35.650 --> 00:36:41.730
So with that, you now know how you can deploy fully featured
applications quickly and easily using the three classes

00:36:41.730 --> 00:36:47.050
in the Automator framework, AM workflow, AM
workflow controller and AM workflow view.

00:36:47.050 --> 00:36:53.180
So with that, I hope you will all go out and
embrace Automator workflows with your applications.

00:36:54.510 --> 00:37:00.040
( Applause )

00:37:00.039 --> 00:37:00.429
>> Emily: Thanks.

00:37:00.429 --> 00:37:01.719
I especially liked the hug gesture.

00:37:01.719 --> 00:37:03.579
Everyone should hug their neighbor.

00:37:03.579 --> 00:37:09.739
So for more information, you can contact Matt
Drance, our sharing technologies evangelist.

00:37:09.739 --> 00:37:15.419
And there's also an automated developer's mailing list
that you can join and get your questions answered.

00:37:15.420 --> 00:37:18.670
And for documentation and other sources,
you can go to the developer website.