WEBVTT

00:00:10.859 --> 00:00:12.839
>> Good to see you.

00:00:12.839 --> 00:00:17.699
Yesterday we did a printing session
covering the application side of printing.

00:00:17.699 --> 00:00:21.429
And this morning we're going to turn our
attention to the world of printer drivers.

00:00:21.429 --> 00:00:26.239
Pretty much anything that happens between the Print
Dialogue and paper coming out of the printer --

00:00:26.239 --> 00:00:29.070
or not coming out of the printer, which sometimes happens.

00:00:29.070 --> 00:00:35.140
And before Mike gets up on stage to tell you all about
CUPS, all I want to do is take a minute to say thank you.

00:00:35.140 --> 00:00:37.750
Pretty much thank you to everybody in this room.

00:00:37.750 --> 00:00:43.549
Because these days you can hook up pretty much any
Mac -- any printer on the planet to a Macintosh.

00:00:43.549 --> 00:00:46.379
And it's through all your hard work that that's possible.

00:00:46.380 --> 00:00:52.179
And I want to say a special thank you to the folks in
this room who have been working with us since the advent

00:00:52.179 --> 00:00:59.560
of Mac OS X, through the evolution of the printing
system, to deliver a huge number of printer drivers.

00:00:59.560 --> 00:01:03.320
And when I say huge, huge is the operative word.

00:01:03.320 --> 00:01:07.939
If you check out the Leopard build that
you have, that you picked up on Monday,

00:01:07.939 --> 00:01:12.230
you'll find that you have three-and-a-half
gigabytes of printer drivers.

00:01:12.230 --> 00:01:14.880
And that's -- that's a lot of code.

00:01:14.879 --> 00:01:17.759
A lot of resources.

00:01:17.760 --> 00:01:22.730
But it's all testament to the amount of work
that's gone into supporting all the printers

00:01:22.730 --> 00:01:24.799
that you've done over the last few years.

00:01:24.799 --> 00:01:31.250
The upside of those three-and-a-half
gigabytes on everybody's hard disc is support

00:01:31.250 --> 00:01:37.599
for about 2500 printer models, and the number
may even grow before we even ship Leopard.

00:01:37.599 --> 00:01:40.549
So again, thank you very much for all the hard work.

00:01:40.549 --> 00:01:44.209
Please keep up the work because
we're not done yet with Leopard.

00:01:44.209 --> 00:01:48.039
But I know you've been working hard to make that happen.

00:01:48.040 --> 00:01:53.530
So, without any further ado, I am going to bring
Mike up on stage, tell you all about CUPS in Leopard.

00:01:53.530 --> 00:01:56.480
So thanks very much.

00:01:56.480 --> 00:02:00.530
( Applause )

00:02:00.530 --> 00:02:02.290
>> Thank you, Paul.

00:02:02.290 --> 00:02:03.240
Welcome, everybody.

00:02:03.239 --> 00:02:06.069
Congratulations on making it to Friday.

00:02:06.069 --> 00:02:10.009
My name is Mike Sweet, and I'm the creator of CUPS.

00:02:10.009 --> 00:02:13.969
And so -- we're going to talk about CUPS today

00:02:13.969 --> 00:02:16.080
Now I'll mirror Paul's thank you.

00:02:16.080 --> 00:02:22.660
I've worked with some of you, I'm probably going
be working with a lot more of you as time goes on.

00:02:22.659 --> 00:02:29.400
CUPS is a really complicated thing in many ways, and
printing, yeah, everybody says printing has to be simple.

00:02:29.400 --> 00:02:34.510
And it's nothing further from simple when
it comes to actually developing a driver.

00:02:34.509 --> 00:02:37.000
So thank you for doing all the hard work.

00:02:37.000 --> 00:02:39.270
Thank you for reporting bugs if
you have been reporting bugs.

00:02:39.270 --> 00:02:41.920
It has really helped to make CUPS the product that it is.

00:02:41.919 --> 00:02:46.829
And to start today with an overview of CUPS.

00:02:46.830 --> 00:02:51.130
And just give you an idea of what CUPS
is, if you're not familiar with it.

00:02:51.129 --> 00:02:53.319
Common UNIX Printing System.

00:02:53.319 --> 00:02:55.680
The acronym comes from CUPS.

00:02:55.680 --> 00:02:59.050
Provides printing services for most
operating systems that you have out there.

00:02:59.050 --> 00:03:01.469
The major exception, of course, being Windows.

00:03:01.469 --> 00:03:09.030
And created it in 1997 while I was work for D C Software
Products (assumed spelling), and the idea was wanted

00:03:09.030 --> 00:03:10.569
to come up with something to replace LPR.

00:03:10.569 --> 00:03:13.340
Because LPR, quite frankly, sucks.

00:03:13.340 --> 00:03:21.780
So at the time we were able to develop
something using a new Internet printing protocol.

00:03:21.780 --> 00:03:28.919
And that eventually got adopted by all the LINUX,
it's available on all the commercial and BSD UNIXes,

00:03:28.919 --> 00:03:35.509
and obviously it's available on Mac OS X. If you go on
CUPS dot org, you will find a lot of components you can use

00:03:35.509 --> 00:03:39.199
with Mac OS X. And also the developer forms.

00:03:39.199 --> 00:03:40.439
You go on there, ask questions.

00:03:40.439 --> 00:03:42.849
You generally get an answer pretty quickly.

00:03:44.189 --> 00:03:48.460
Now CUPS got introduced into Mac OS X in 10.2.

00:03:48.460 --> 00:03:53.200
And as we've gone along, we've included
newer and newer versions of CUPS.

00:03:53.199 --> 00:03:59.310
The Leopard beta that you have has a
1.3 snap shot from a view weeks ago.

00:03:59.310 --> 00:04:07.000
And you know, basically whatever you see going into
1.3 on the CUPS Web site is also going into Leopard.

00:04:07.000 --> 00:04:09.300
CUPS has been purchased by Apple.

00:04:09.300 --> 00:04:11.360
So I am now working for Apple.

00:04:11.360 --> 00:04:14.320
Woo whoo.

00:04:14.319 --> 00:04:15.159
( Applause )

00:04:15.159 --> 00:04:21.759
>> But to -- to allay any fears, nothing's going to
change as far as CUPS is concerned with the license.

00:04:21.759 --> 00:04:27.420
It's still going to be the new G P L and L G P L. We're
still going to have to the site hosted at CUPS dot org.

00:04:27.420 --> 00:04:29.310
And it's still going to be developed.

00:04:29.310 --> 00:04:32.220
We're just doing it from Apple
instead of from D C Software Products.

00:04:32.220 --> 00:04:35.600
So from your standpoint, nothing's
really going to change except

00:04:35.600 --> 00:04:38.820
for the copyright notices that you'll see on the pages.

00:04:40.129 --> 00:04:44.719
Now CUPS itself is based around a
single program called the scheduler.

00:04:44.720 --> 00:04:48.720
If you look in the process list you'll
see a program called CUPS D running.

00:04:48.720 --> 00:04:52.420
On Mac OS X, it started on demand by the Launchd service.

00:04:52.420 --> 00:04:54.350
If you have shared printers, it's running all the time.

00:04:54.350 --> 00:04:57.610
If you don't, it just gets run
when you go to print something.

00:04:57.610 --> 00:04:59.259
It's a very light weight program.

00:04:59.259 --> 00:05:03.189
All it does is collect jobs and then
run other programs to print them.

00:05:03.189 --> 00:05:09.790
So for the most part you won't see any massive
memory use or C P use from the scheduler,

00:05:09.790 --> 00:05:12.000
just because it doesn't have to do much of anything.

00:05:12.000 --> 00:05:13.970
Scheduler runs it's route.

00:05:13.970 --> 00:05:21.590
But most everything it runs to actually print stuff runs as
an unprivileged user called L P. Now when you actually go

00:05:21.589 --> 00:05:25.189
to print from an application, that
application goes through all the layers

00:05:25.189 --> 00:05:29.490
and it's talking to the scheduler via the IPP protocol.

00:05:29.490 --> 00:05:35.420
That also happens to run over HTPP, so you
get a Web interface to go along with it.

00:05:35.420 --> 00:05:39.530
Now if you show it graphically, you see the application
-- in this case it would be a Cocoa application.

00:05:39.529 --> 00:05:44.639
Which sits on top of Cocoa, which sits on top of
Core Printing, which sits on top of the CUPS API,

00:05:44.639 --> 00:05:48.649
which is the lowest level API to talk to CUPS.

00:05:48.649 --> 00:05:54.319
The CUPS API sends the request over to the
scheduler, via the HTTP and IPP protocols.

00:05:54.319 --> 00:06:01.170
And the scheduler uses that same API to read the request, do
whatever processing is needed, and then send a response back

00:06:01.170 --> 00:06:03.790
to the application to say, hey, I printed your file.

00:06:03.790 --> 00:06:05.550
Or here's the list of printers you asked for.

00:06:05.550 --> 00:06:08.180
Or here's the printer description file.

00:06:09.860 --> 00:06:14.410
Now once you actually submit a job for
printing, the job gets filtered by one

00:06:14.410 --> 00:06:17.560
or more programs to actually get sent to the printer.

00:06:17.560 --> 00:06:22.480
So here we have a PDF document
sent from a Cocoa application.

00:06:22.480 --> 00:06:26.660
And it's going to be run through one or
more filters to actually get that converted

00:06:26.660 --> 00:06:30.010
into a form that can be used by the printer driver.

00:06:30.009 --> 00:06:33.259
So in this case we're going have a Raster printer driver.

00:06:33.259 --> 00:06:37.709
So we're going to have a few filters in
there to convert it to a CUPS Raster format.

00:06:37.709 --> 00:06:43.799
And along the way we're going to have any log or
user messages that would get relayed to the user

00:06:43.800 --> 00:06:48.020
on the desktop sent to the standard error.

00:06:48.019 --> 00:06:55.289
The output from those filters gets piped into your filter
driver, which again could send messages to the user.

00:06:55.290 --> 00:07:00.610
That, in turn, sent into an optional port monitor
program which handles any kind of encoding

00:07:00.610 --> 00:07:04.530
or protocol requirement that's your driver has.

00:07:04.529 --> 00:07:11.899
Typically, it using for things like USB, framing, and
other sorts of things that are interface-specific.

00:07:11.899 --> 00:07:14.209
But you don't want to have to write a custom back in for.

00:07:14.209 --> 00:07:18.719
And then the output from that program
gets sent into the back ends.

00:07:18.720 --> 00:07:22.320
Now the back end is the actual
program that talks to your printer.

00:07:22.319 --> 00:07:28.339
CUPS comes with USB, serial, parallel,
network, and various protocols back ends.

00:07:28.339 --> 00:07:31.529
There's Apple Talk, there's Bonjour Back End.

00:07:31.529 --> 00:07:36.459
Basically, any kind of protocol you're generally
going to use, we already have something for.

00:07:36.459 --> 00:07:42.269
Nice general purpose back ends that you can then
interface with to do specialized stuff for your device.

00:07:42.269 --> 00:07:45.089
Now of course sometimes these printers talk back.

00:07:45.089 --> 00:07:48.889
And something that's new in Leopard
is support for back channel data.

00:07:48.889 --> 00:07:53.579
So that back end, whatever it gets from the
printer, relays it back to the port monitor

00:07:53.579 --> 00:07:55.839
and the driver so they can do something with it.

00:07:55.839 --> 00:08:01.739
See what the tonner levels are, see if
it's printed to page; that sort of thing.

00:08:01.740 --> 00:08:08.930
Now also new in Leopard is the ability to actually
talk to the back end and do some control commands

00:08:08.930 --> 00:08:11.430
and query commands on the interface itself.

00:08:11.430 --> 00:08:17.980
So there's a side channel API that allows you to
communicate between the driver and the back end to do things

00:08:17.980 --> 00:08:23.319
like soft reset and, you know,
what's the status of the device.

00:08:23.319 --> 00:08:26.759
Now, once all this goes through, you
actually get something out in the printer.

00:08:26.759 --> 00:08:31.550
And if you don't, it's a driver bug.

00:08:31.550 --> 00:08:35.779
And when that happens, you're going see messages
in the log files of the now these messages --

00:08:35.779 --> 00:08:42.159
and you saw those little arrows going up there --
are just messages you sent with F Print F or NS log,

00:08:42.159 --> 00:08:46.209
or whatever you happen to use, to the standard error file.

00:08:46.210 --> 00:08:52.460
And those messages generally get relied to the user with
a few exception, and we'll cover those in a little bit.

00:08:52.460 --> 00:08:56.960
All of the filters, drivers, and port
monitors are running as the L P user.

00:08:56.960 --> 00:09:00.080
The back ends may run as L P or route.

00:09:00.080 --> 00:09:03.520
And we'll talk about how you can control that at runtime.

00:09:03.519 --> 00:09:07.840
And this is also different from previous releases.

00:09:07.840 --> 00:09:12.550
Now when you put that message out to standard
error, it's going get logged somewhere.

00:09:12.549 --> 00:09:17.899
Typically, anything you're putting out for user messages,
like, I'm printing page one, I'm printing page two;

00:09:17.899 --> 00:09:22.750
those just go straight to the user on the console.

00:09:22.750 --> 00:09:27.600
Various other errors and so forth
will end up in that error log file.

00:09:27.600 --> 00:09:30.620
Any page accounting information
is going into the page log file.

00:09:30.620 --> 00:09:35.889
And finally, any access information for applications,
printing jobs, checking the status of printers

00:09:35.889 --> 00:09:38.399
and so forth gets logged in the access log file.

00:09:38.399 --> 00:09:40.829
These are all available from the console application.

00:09:40.830 --> 00:09:47.030
You can also see via the CUPS Web interface, access
log file in particular is standard Apache format

00:09:47.029 --> 00:09:51.439
so you can use Webalizer (Phonetic) and
other tools to analyze that information.

00:09:51.440 --> 00:09:56.160
And then page log, there's several utilities for
processing that data as well so you will Address Book able

00:09:56.159 --> 00:10:03.860
to see John printed 50 pages to our existing color
printer, and now we have to go track him down.

00:10:03.860 --> 00:10:06.740
So that's a little bit about CUPS in general.

00:10:06.740 --> 00:10:13.149
I am going talk a little bit now about what's
new in Leopard compared to what you had in Tiger.

00:10:13.149 --> 00:10:16.490
Now CUPS itself, we've kind of skipped the release.

00:10:16.490 --> 00:10:21.080
So we've actually accumulated over
100 new features since Tiger.

00:10:21.080 --> 00:10:24.870
And along with that we've also gained
a lot of performance improvements.

00:10:24.870 --> 00:10:31.560
Previously, there were a lot of things with job history
and printer attributes that would use up a lot of memory

00:10:31.559 --> 00:10:35.319
and use up a lot of CPU when you first start up the system.

00:10:35.320 --> 00:10:40.940
We've really leaned things down so the scheduler
doesn't keep all that in memory all the time,

00:10:40.940 --> 00:10:45.090
and also cache the information so we
don't have to reprocess it all the time.

00:10:45.090 --> 00:10:48.250
So you see a lot better performance
from the scheduler itself.

00:10:48.250 --> 00:10:51.629
But while we've done all this stuff, we've
kept it 100 percent binary compatible.

00:10:51.629 --> 00:10:56.279
So many of your drivers or applications
aren't going to notice any difference.

00:10:58.250 --> 00:11:02.940
Now one of the major new category of features
we have in CUPS is the networking support.

00:11:02.940 --> 00:11:05.500
And we've added quite a few new features to that.

00:11:05.500 --> 00:11:07.850
And this is a highlight of a few of them.

00:11:07.850 --> 00:11:10.029
I know a lot of you asked for this before.

00:11:10.029 --> 00:11:12.789
We have I P version six support throughout.

00:11:12.789 --> 00:11:15.279
There are two limitations with that.

00:11:15.279 --> 00:11:19.110
One is that CUPS browsing protocol
doesn't work with I P Version Six.

00:11:19.110 --> 00:11:23.759
And the other is we don't currently use
I P Version Six for S M N P browsing.

00:11:23.759 --> 00:11:27.519
So that's basically the extent of the limitations.

00:11:27.519 --> 00:11:34.519
Everything else, shared printing, printing to
network printers all work over I P Version Six.

00:11:34.519 --> 00:11:36.199
We've added support for curb rows.

00:11:36.200 --> 00:11:40.930
So now if you have a curb rows environment,
you can use that for authentication

00:11:40.929 --> 00:11:42.779
and single sign on and all that goes with that.

00:11:42.779 --> 00:11:45.350
I'll talk about that in a sec.

00:11:45.350 --> 00:11:49.110
You can now have shared printers that
have user name and pass word requirements.

00:11:49.110 --> 00:11:56.340
So you don't want somebody printing to it, some expensive
printer, you can actually require a user name and pass word,

00:11:56.340 --> 00:11:59.180
and then only authorized users can print to that.

00:11:59.179 --> 00:12:05.669
And then finally, in Tiger we added the
ability to do printer discovery via Bonjour.

00:12:05.669 --> 00:12:07.439
That's great for newer printers.

00:12:07.440 --> 00:12:10.670
But the older printers that a lot
of you have don't support that.

00:12:10.669 --> 00:12:14.079
But they do support the older S N M P protocol.

00:12:14.080 --> 00:12:18.120
And we've added support for our
printer discovery via that protocol.

00:12:19.759 --> 00:12:24.889
Now curb rows authentication isn't enabled by default.

00:12:24.889 --> 00:12:28.210
Basically, because not everybody uses curb rows.

00:12:28.210 --> 00:12:36.710
The way we've implemented is we're taking the
credentials that are cached by curb rows when you sign on

00:12:36.710 --> 00:12:40.879
and sending them on to wherever you're doing a print job.

00:12:40.879 --> 00:12:45.689
So it can then authenticate against
your key distribution center.

00:12:45.690 --> 00:12:53.170
So basically one sign on, one -- one set of
credentials can be used all across the network.

00:12:53.169 --> 00:12:57.089
The limitation with this is that
we only support single domain.

00:12:57.090 --> 00:13:02.490
If you have a multi domain environment,
please see me and we'll talk

00:13:02.490 --> 00:13:05.700
about what things we can do to support that in the future.

00:13:05.700 --> 00:13:08.170
So it's not enabled by default

00:13:08.169 --> 00:13:12.519
There's a one-line change that you can
make to the scheduler configuration file,

00:13:12.519 --> 00:13:15.659
which you can also do via the Web interface.

00:13:15.659 --> 00:13:21.389
And that -- you go on to HTTP colon,
slash, slash, local host, colon, 631.

00:13:21.389 --> 00:13:23.319
Click on the administration tab.

00:13:23.320 --> 00:13:26.129
And you'll see under the server
column there, there's a setting,

00:13:26.129 --> 00:13:29.250
a little check box that says use curb rows authentication.

00:13:29.250 --> 00:13:30.080
So just check that.

00:13:30.080 --> 00:13:31.509
And click change settings.

00:13:31.509 --> 00:13:34.450
And all of a sudden your system is set up for curb rows.

00:13:34.450 --> 00:13:38.210
So -- about as easy as we can make it, I guess.

00:13:39.820 --> 00:13:44.670
Now on the administration front, we've added
some things, a lot of people have been asking

00:13:44.669 --> 00:13:47.659
for over the years and have finally worked their way in.

00:13:47.659 --> 00:13:54.009
We have support for the IPP notification spec.
Basically allows asynchronous notifications

00:13:54.009 --> 00:13:55.980
of any event that happens on the scheduler.

00:13:55.980 --> 00:13:57.470
And you'll see that in a sec.

00:13:57.470 --> 00:14:02.660
The Web interface compared to what
was in Tiger is vastly improved.

00:14:02.659 --> 00:14:07.919
There's searchable help, there's paging
of the individual printer and job pages.

00:14:07.919 --> 00:14:14.149
If you use that Web interface at any -- any time
-- you'll find it's a lot easier to use now.

00:14:14.149 --> 00:14:18.329
Similarly, the logging -- we've
standardized a lot of the messages.

00:14:18.330 --> 00:14:25.450
The access log actually shows you for IPP requests
what the IPP request was rather than just seeing a post

00:14:25.450 --> 00:14:29.810
and not knowing what the application was doing

00:14:29.809 --> 00:14:35.500
And in page logging you can actually see some of
the attributes that are coming through for the jobs.

00:14:35.500 --> 00:14:41.429
And finally, previously, all you could
do is have the standard CUPS policies

00:14:41.429 --> 00:14:44.209
for what users can do and what users can't do.

00:14:44.210 --> 00:14:48.100
You can now customize them at the
individual IPP operation level.

00:14:48.100 --> 00:14:49.100
Also for printers.

00:14:49.100 --> 00:14:52.560
When there's an error that occurs
you can tell CUPS what to do.

00:14:52.559 --> 00:14:57.589
If you want to retry, or if you want
to just abort or -- or whatever.

00:14:58.990 --> 00:15:06.899
Now for the event notifications you basically can find
out anything about a job, printer, or server that happens.

00:15:06.899 --> 00:15:09.799
So if a printer gets stopped, you can get an event.

00:15:09.799 --> 00:15:12.389
If a job is completed, you can get an event.

00:15:12.389 --> 00:15:17.929
Service restarted or somebody does something that
triggers the security alarm, you can actually get notified

00:15:17.929 --> 00:15:22.329
that something happened and here's
who did it, and when it happened.

00:15:22.330 --> 00:15:24.879
There's two main notifiers that come with CUPS.

00:15:24.879 --> 00:15:30.110
There's mail 2 for e-mail notifications that
requires a mail server in order to function.

00:15:30.110 --> 00:15:34.389
You can't just have it attach to your pop account.

00:15:34.389 --> 00:15:37.580
And an RSS notifier for RSS feeds.

00:15:37.580 --> 00:15:43.460
So you can actually create an RSS feed and
subscribe to it and do all that fun stuff.

00:15:43.460 --> 00:15:45.660
You can add your own notifiers very easily.

00:15:45.659 --> 00:15:49.909
Like any other program in CUPS, you
just have a simple command line program

00:15:49.909 --> 00:15:53.389
and it reads all the information
it needs on the command line.

00:15:53.389 --> 00:15:54.629
And that's standard input.

00:15:54.629 --> 00:15:56.330
And then you just process things.

00:15:56.330 --> 00:16:00.879
Notifiers are run on demand so they don't use
up system resources when there's no events.

00:16:00.879 --> 00:16:06.189
And basically can do anything you want with it.

00:16:06.190 --> 00:16:11.360
If you have a driver, you can actually trigger
events for printers through a state message.

00:16:11.360 --> 00:16:14.050
And you'll see that in a little bit.

00:16:14.049 --> 00:16:17.579
And you know, basically get something to happen on the UI.

00:16:18.700 --> 00:16:23.800
So again, if you go on the CUPS Web interface
you'll see that you can actually click

00:16:23.799 --> 00:16:26.189
on a button that says add RSS subscription.

00:16:26.190 --> 00:16:31.900
You get this form and this allows you to set
up an RSS feed right on your print server

00:16:31.899 --> 00:16:34.480
that you can then subscribe to from any other system.

00:16:34.480 --> 00:16:38.730
And you know, for example at my office
I have all my printers set up in this.

00:16:38.730 --> 00:16:43.879
And then I have the screen saver pointed at the feed
so I can know what's happening with the printers.

00:16:43.879 --> 00:16:49.850
You can control how many events are
showing up in the list, and all the --

00:16:49.850 --> 00:16:56.180
the news items in the feed actually take you to
the corresponding page on the CUPS Web interface.

00:16:57.830 --> 00:17:04.269
Now if you're a developer, and particularly a driver
developer, we've added a lot of new stuff in Leopard.

00:17:04.269 --> 00:17:08.299
Biggest one I think you're going to see
is the support for multi language PPDs.

00:17:08.299 --> 00:17:11.849
Previously, if you supported ten
languages for a particular printer,

00:17:11.849 --> 00:17:15.750
you needed to have 10 PPDs with
the corresponding sides increase.

00:17:15.750 --> 00:17:23.500
We now have all encoded into one PPD if you want, and
then you can just have one PPD file instead of 10.

00:17:23.500 --> 00:17:29.759
If you have constraints in your drivers where you
can not print, say, duplex on transparency media,

00:17:29.759 --> 00:17:35.250
those are actually supported by the Print Dialogue, and you
can use them in PPD files, and we'll show that in a sec.

00:17:35.250 --> 00:17:41.690
And you know, basically it eliminates the
need for a PPD in a lot of circumstances.

00:17:41.690 --> 00:17:47.710
The back channel, side channel interfaces we showed on the
slide before that will allow you to actually communicate

00:17:47.710 --> 00:17:54.039
with a printer more effectively -- there's a new CUPS
driver interface that you can use , instead of PPD files.

00:17:54.039 --> 00:17:56.180
And we'll show that in a sec.

00:17:56.180 --> 00:18:00.830
If you have a printer that has a lot of different
options and you can't configure via postscript theory

00:18:00.829 --> 00:18:05.909
or S N M P look ups, you can actually
provide a program that goes out

00:18:05.910 --> 00:18:10.009
and automatically configures the
printer once it's been detected.

00:18:10.009 --> 00:18:16.920
And finally, if you're doing a photographic quality printer,
the print path is now fully 16-bit all the way through.

00:18:16.920 --> 00:18:21.420
So you wouldn't any artifacts depending
on the type of quality printing.

00:18:23.099 --> 00:18:26.919
Now those constraints I was talking
about before -- input script --

00:18:26.920 --> 00:18:32.360
printer description files, you can basically
say this option conflicts with this option.

00:18:32.359 --> 00:18:38.849
So the duplex option for two-sided printing
is incompatible with transparency media.

00:18:38.849 --> 00:18:43.099
Or letter sized pages can't be
printed on an envelope feeder.

00:18:43.099 --> 00:18:50.569
The very simple constraints, a lot of printers can make
use of these and have sufficient safeguards in there.

00:18:50.569 --> 00:18:56.399
If you have multiway constraints, though, you're
going to need a custom Print Dialogue pane, or PD P,

00:18:56.400 --> 00:19:01.280
with your printer driver to implement those.

00:19:01.279 --> 00:19:05.289
And how it shows up in the Print
Dialogue is pretty straight and simple.

00:19:05.289 --> 00:19:06.819
Here I am -- got my document.

00:19:06.819 --> 00:19:08.579
I go to print.

00:19:08.579 --> 00:19:15.279
And I bring up the -- the paper feed
section -- and I select envelope feed.

00:19:15.279 --> 00:19:19.069
But if you look there, you also see I
had of the paper size set to U.S. letter.

00:19:19.069 --> 00:19:21.970
And you can't print U.S. letter on the envelope feeder.

00:19:21.970 --> 00:19:24.970
So when I do that, I'll get a dialogue that pops up

00:19:24.970 --> 00:19:30.210
and says media source option envelope feed is
not available with the destination paper size.

00:19:30.210 --> 00:19:37.039
So you have the option either of continuing and using
that setting and having it resized down to it will fit

00:19:37.039 --> 00:19:42.539
on to an envelope, or you can cancel and
revert back to the previous paper source.

00:19:45.059 --> 00:19:50.389
Now for the back channel and side channel
interfaces, the back channel APIs is simple.

00:19:50.390 --> 00:19:51.650
It's two functions.

00:19:51.650 --> 00:19:53.460
One to read and one to write.

00:19:53.460 --> 00:19:59.900
If you're writing a back end you use CUPS back channel
right to write the data back to the -- to the driver.

00:19:59.900 --> 00:20:06.320
And if you're writing a driver, you use CUPS back
channel read to read the data from the back end.

00:20:06.319 --> 00:20:08.549
Side channel API is a little more complicated.

00:20:08.549 --> 00:20:10.279
There's three functions.

00:20:10.279 --> 00:20:15.649
The one that you use in the printer
driver is a CUPS side channel do request.

00:20:15.650 --> 00:20:18.690
And that will allow you to do five different things.

00:20:18.690 --> 00:20:25.490
Reset during the out put or get the very status
information that you can get from the back end.

00:20:25.490 --> 00:20:30.519
And uses in conjunction with the back channel
to do synchronization and configuration

00:20:30.519 --> 00:20:35.089
of your driver when you actually print the job.

00:20:35.089 --> 00:20:38.970
So now I'm going to kind of go over how you
would actually develop the printer driver

00:20:38.970 --> 00:20:42.700
for CUPS and Mac OS X in particular.

00:20:42.700 --> 00:20:43.730
It's fairly simple.

00:20:43.730 --> 00:20:52.319
But coming from a Tiger era, you may not
be familiar with some of the terminology.

00:20:52.319 --> 00:20:54.549
Basically, there's three different kinds of drivers.

00:20:54.549 --> 00:20:55.759
And this is kind of a broad class.

00:20:55.759 --> 00:20:58.920
But three different kinds of drivers for CUPS.

00:20:58.920 --> 00:21:03.920
There's a post-script driver, which is a --
a driver that doesn't have any extra filters.

00:21:03.920 --> 00:21:08.550
And you just provide the PPD file for
the printer and everything just works.

00:21:08.549 --> 00:21:13.649
There's a CUPS Raster driver which is for
Raster printers, and it's the easiest way

00:21:13.650 --> 00:21:17.640
to support a non post script printer,
just because it's the simplest interface.

00:21:17.640 --> 00:21:23.330
And you just need to provide one filter to actually convert
the Raster data to something that your printer can take.

00:21:23.329 --> 00:21:25.730
Last but not least, there's the custom driver.

00:21:25.730 --> 00:21:30.269
Custom drivers will typically have
two or more filters, and they --

00:21:30.269 --> 00:21:33.549
if they do vector processing and all sorts of fancy stuff

00:21:33.549 --> 00:21:37.190
that will get the data into an
optimal format for the printer.

00:21:37.190 --> 00:21:41.480
But to caution you, a lot of times
you'll implement these things only

00:21:41.480 --> 00:21:45.799
to realize a 5 percent improvement
in speed or even a loss in speed.

00:21:45.799 --> 00:21:50.059
Because you're spending so much time on the computer,
the printer's just sitting there waiting for data,

00:21:50.059 --> 00:21:57.259
whereas the Raster driver might just go
straight through and print just as fast.

00:21:57.259 --> 00:22:00.160
Now every printer driver has some common components.

00:22:00.160 --> 00:22:04.279
Number one component is the postscript
printer description file.

00:22:04.279 --> 00:22:09.389
Which despite the name, PPD files are used for
post postscript and non postscript printers.

00:22:09.390 --> 00:22:16.210
And in Leopard, you also have the option of using
a CUPS driver interface instead of the PPD files.

00:22:16.210 --> 00:22:23.140
But ultimately, that driver interface is going
to create a PPD file for your print queue.

00:22:23.140 --> 00:22:26.020
Along with PPD time you'll have any driver files.

00:22:26.019 --> 00:22:33.009
This is the filters, prefilters, port monitors and
back ends that you have with the -- with the driver.

00:22:33.009 --> 00:22:37.529
There's plug-ins that you use, auto set up
tool, which is something new in Leopard.

00:22:37.529 --> 00:22:45.509
Any custom Print Dialogue panes or PD Es that you use in
your -- in your driver to provide driver-specific options.

00:22:45.509 --> 00:22:49.629
A monitoring tool which is -- needs
to be called (Inaudible) tool,

00:22:49.630 --> 00:22:55.200
allows you to monitor the printer while jobs are printing so
that you know, hey, I'm low on ink or Paper Tray 2 is empty.

00:22:55.200 --> 00:23:00.779
And finally, the printer utility for doing things
like head alignment and cleaning and so forth.

00:23:00.779 --> 00:23:03.339
Last but not least, there's support files.

00:23:03.339 --> 00:23:06.869
These are things that a lot of
users don't even know are there.

00:23:06.869 --> 00:23:13.849
But there's online help, there's color profiles, mime
files, if you have custom file types that you're using.

00:23:13.849 --> 00:23:17.269
And the printer icon, which shows up on the desktop.

00:23:18.890 --> 00:23:22.080
Now these all go in specific locations.

00:23:22.079 --> 00:23:25.779
If you're doing PPD files they go under library printer.

00:23:25.779 --> 00:23:28.660
PPDs contents, and so forth.

00:23:28.660 --> 00:23:36.550
Any of the driver interfaces, back ends notifiers, or port
monitors need to go under the corresponding CUPS directory.

00:23:36.549 --> 00:23:40.190
And you'll see there user, lib exec
CUPS (assumed spelling) something.

00:23:40.190 --> 00:23:45.930
If you're doing any custom file formats, they need to
be defined in the private et cetera CUPS directory.

00:23:45.930 --> 00:23:49.180
That's where CUPS looks for those -- that information.

00:23:49.180 --> 00:23:55.200
And finally, anything else you threw into your own
directory under library printers and your vendor name.

00:23:56.359 --> 00:24:00.919
Now of all those components, the PPD
file is basically the most important.

00:24:00.920 --> 00:24:04.080
And that's the file that actually
defines what your printer can do.

00:24:04.079 --> 00:24:05.359
What options are available.

00:24:05.359 --> 00:24:08.599
You know, what paper sizes and what the margins are.

00:24:08.599 --> 00:24:11.309
How to identify it as that particular printer.

00:24:11.309 --> 00:24:13.799
All that information comes from that file.

00:24:13.799 --> 00:24:20.589
Now all the features that you have in that file, like
double-sided printing and media type and so forth,

00:24:20.589 --> 00:24:24.199
are organized into groups and options in the PPD file.

00:24:24.200 --> 00:24:29.910
A group would be finishing features, and
then the options themselves would be,

00:24:29.910 --> 00:24:32.810
you know, staple and punch and so forth.

00:24:32.809 --> 00:24:36.869
All of those choices that you make
map to actual postscript code.

00:24:36.869 --> 00:24:41.500
And if you're doing a CUPS Raster driver, that
postscript code is actually the sub postscript

00:24:41.500 --> 00:24:44.069
that we support for CUPS Raster drivers.

00:24:44.069 --> 00:24:50.659
And if any of you have been involved with the Leopard
testing, you may have noticed since we introduced CUPS 1.2

00:24:50.660 --> 00:24:54.440
that the allowed postscript code has changed very slightly

00:24:54.440 --> 00:25:00.279
because we're actually interpreting the post script
code rather than just looking for keys and values.

00:25:00.279 --> 00:25:04.980
So if you're having problems like that please see
me and I can direct you to the right documentation.

00:25:04.980 --> 00:25:10.930
The PPD files in Leopard can actually
contain multiple languages.

00:25:10.930 --> 00:25:15.750
If you're using and shipping a driver for
previous releases you'll still want to be able

00:25:15.750 --> 00:25:22.279
to deliver PPD files with one PPD for each language.

00:25:22.279 --> 00:25:28.799
And then finally, if you're developing and
distributing drivers use the CUPS test PPD utility

00:25:28.799 --> 00:25:31.240
that comes with CUPS to test your PPD files.

00:25:31.240 --> 00:25:34.569
It's very important that you at
least pass those basic tests.

00:25:34.569 --> 00:25:40.210
Ensures that the format's right and that you
don't have any obvious conflicts in the file.

00:25:41.720 --> 00:25:46.610
Now the alternative to developing PPD
files is to do a CUPS driver interface.

00:25:46.609 --> 00:25:53.509
And the advantage here is that you can actually
programatically generate your PPD files depending

00:25:53.509 --> 00:25:56.619
on the printer that's attached or
the type of system that you're using.

00:25:56.619 --> 00:25:58.269
So it's optimized for the user.

00:25:58.269 --> 00:26:01.009
And there's other advantages I'll talk about in a sec.

00:26:01.009 --> 00:26:11.170
Now basically you have this program that you install
in -- in -- in the user lib exec CUPS driver directory.

00:26:11.170 --> 00:26:15.480
And it either takes a list command
or a cat command (assumed spelling).

00:26:15.480 --> 00:26:22.000
List lists all the drivers that you can generate
PPD files for, and cat actually tells you

00:26:22.000 --> 00:26:25.220
to generate the PPD file for that particular driver.

00:26:25.220 --> 00:26:31.130
If you look in the CUPS source code you'll see a
test driver dot C file in the driver sub directory

00:26:31.130 --> 00:26:34.510
that will give you an example of how
to implement one of these things.

00:26:34.509 --> 00:26:35.259
It's super-simple.

00:26:35.259 --> 00:26:40.910
So it's not necessarily the best thing
to base an entire driver interface on.

00:26:40.910 --> 00:26:43.330
But it will show you the basics.

00:26:44.390 --> 00:26:50.590
Now when deciding whether to ship PPD files or driver
interfaces, there's a couple of simple questions.

00:26:50.589 --> 00:26:53.509
Number one, how many drivers are you shipping?

00:26:53.509 --> 00:26:56.420
If you're shipping one driver there's
no sense using a driver interface,

00:26:56.420 --> 00:26:58.710
because you're not going to notice any savings.

00:26:58.710 --> 00:27:05.170
And also if you're only providing drivers that
will work on older releases of OS X all the way

00:27:05.170 --> 00:27:08.630
through the current release then you probably
don't want to use the driver interface there either

00:27:08.630 --> 00:27:13.400
because you're not going to be able to
access the drivers in older releases.

00:27:13.400 --> 00:27:17.650
But if you are developing something where
you're going to be distributing on Leopard

00:27:17.650 --> 00:27:23.830
and you can provide some back compatibility thing
in your post install to generate the PPDs if you're

00:27:23.829 --> 00:27:27.909
on older releases, you may find
some significant improvements.

00:27:27.910 --> 00:27:32.730
And I'll use Good Print here as an
example, which has, as of a few weeks ago,

00:27:32.730 --> 00:27:37.630
17 languages and 819 printer models defined in it.

00:27:37.630 --> 00:27:42.940
If you generate all the PPDs with all the
languages, it's 212 megabytes compressed.

00:27:42.940 --> 00:27:47.090
If you use the driver interface, it's 1.1 Megs.

00:27:47.089 --> 00:27:51.349
So significant savings in certain circumstances.

00:27:51.349 --> 00:27:54.279
It's entirely up to you to decide which way to go.

00:27:54.279 --> 00:27:57.519
But, you know, if you see that
you're in the same boat as, say,

00:27:57.519 --> 00:28:00.829
the Good Print folks, you probably
see a significant savings.

00:28:00.829 --> 00:28:05.240
And that will help you, you know, for
downloading files and it will help us

00:28:05.240 --> 00:28:08.920
for distributing the files on their install DVD.

00:28:11.769 --> 00:28:17.559
Now once you've got the PPD file you're going to
identify certain filters and programs that are going

00:28:17.559 --> 00:28:21.549
to be used with that PPD to support your printer.

00:28:21.549 --> 00:28:25.329
The first one that you're going to
do is the printer driver filter,

00:28:25.329 --> 00:28:29.419
which is defined in the PPD file
using the CUPS filter attribute.

00:28:29.420 --> 00:28:36.080
And basically the CUPS filter attributes
defines a file format this filter accepts,

00:28:36.079 --> 00:28:42.619
a cost associated with running the filter, and then
the full path to the filter that you want to run.

00:28:42.619 --> 00:28:47.919
So, in this case, as an example we're going to run
a filter from library printer's vendor name Raster

00:28:47.920 --> 00:28:53.140
to Foo (assumed spelling), and we're giving
the cost of 100 because it's a Raster filter.

00:28:53.140 --> 00:28:56.320
It's doing dither (assumed spelling) and
color management, and all that stuff in it.

00:28:56.319 --> 00:29:01.970
And it's going to use a lot of CPU and a lot
of memory, and we just want to let CUPS know

00:29:01.970 --> 00:29:04.329
that it's going to be an expensive operation.

00:29:04.329 --> 00:29:11.609
When you actually go to print something, the default
on OS X is not to limit the number of simultaneous jobs

00:29:11.609 --> 00:29:18.859
that are printing, but if you have somebody with one hundred
printers in a lab, they may have configured the system

00:29:18.859 --> 00:29:22.619
to only print up to, say, ten jobs simultaneously.

00:29:22.619 --> 00:29:28.929
So the limit that you put in there, the cost that you put
in there, is going to be used to limit the number of jobs

00:29:28.930 --> 00:29:31.130
that are printed simultaneously in certain circumstances.

00:29:31.130 --> 00:29:32.490
So it's important.

00:29:32.490 --> 00:29:34.500
Put a reasonable value in there.

00:29:34.500 --> 00:29:39.069
If you know your driver is heavy duty, put in 100.

00:29:39.069 --> 00:29:41.369
If it's just a pass through, you can put a zero.

00:29:41.369 --> 00:29:46.729
But just put in something that
matches the kind of work its doing.

00:29:46.730 --> 00:29:53.049
Now in some cases you want to know what's in the
original spool file before you actually run your driver.

00:29:53.049 --> 00:29:56.680
And so in Leopard we have added support for prefilters.

00:29:56.680 --> 00:30:02.060
And what this basically allows you to do is when
somebody prints a PDF file I want to have first look

00:30:02.059 --> 00:30:04.629
at it so I can know what's in the PDF file.

00:30:04.630 --> 00:30:09.360
Or somebody prints a postscript file, you know, I want
to look at that first before you do anything with it.

00:30:09.359 --> 00:30:14.159
So you can specify that with a CUPS
prefilter attribute in the PPD file.

00:30:14.160 --> 00:30:16.440
It's the same format as the CUPS filter.

00:30:16.440 --> 00:30:23.700
But in this case it's put in front of
rather than after the corresponding type.

00:30:23.700 --> 00:30:28.360
Again, that cost there is used to limit the
number of jobs that are printed at any given time.

00:30:28.359 --> 00:30:30.990
And you know, if you're just a
pass through, you can put zero.

00:30:30.990 --> 00:30:34.509
But in most cases I would put something at least like 50.

00:30:34.509 --> 00:30:38.279
Because you're going to be doing something
with the data that's going through.

00:30:40.089 --> 00:30:45.199
Now after everything and before the back
end, you have these port monitor programs.

00:30:45.200 --> 00:30:50.200
And as I mentioned before, they're used to
do the protocol and encoding kinds of things

00:30:50.200 --> 00:30:53.730
with the data that your driver is sending out.

00:30:53.730 --> 00:30:58.980
It's a way to have the advantages of a back
end without having to write a back end.

00:30:58.980 --> 00:31:01.500
It's only supported on Leopard.

00:31:01.500 --> 00:31:06.660
And we provide the BCP and TBCP for
port monitors for postscript printers.

00:31:06.660 --> 00:31:14.150
So if your printer needs TBCP encoding to do
binary printing, just tag that in the PPD file

00:31:14.150 --> 00:31:17.750
and you'll see here CUPS port monitors,
the attribute you define.

00:31:17.750 --> 00:31:19.640
And back end name.

00:31:19.640 --> 00:31:21.970
In this case, USB.

00:31:21.970 --> 00:31:26.920
Defines that when I'm printing to a USB
interface I need to use this port monitor.

00:31:26.920 --> 00:31:31.420
And we have a human readable name so that
we know what that port monitor is doing.

00:31:31.420 --> 00:31:32.870
And then the name of the port monitor.

00:31:32.869 --> 00:31:37.279
In this case, TBCP.

00:31:37.279 --> 00:31:39.829
All the way at the end of the print
chain you have the back end.

00:31:39.829 --> 00:31:41.609
This is the one that communicates with the printer.

00:31:41.609 --> 00:31:46.209
It's like any other filter, but, you
know, it's the last one in the chain.

00:31:46.210 --> 00:31:49.269
So there's nobody else it needs to talk to but the printer.

00:31:49.269 --> 00:31:53.869
Back ends also perform another function
in that they list the available devices

00:31:53.869 --> 00:31:57.169
or printers that are supported by that back end.

00:31:57.170 --> 00:32:02.100
And you find some back ends, like in CUPS, the S
N M P back end, actually don't do any printing.

00:32:02.099 --> 00:32:03.629
All they do is discovery.

00:32:03.630 --> 00:32:10.910
So there's a lot of possibilities there if you
have a specify device and you need to discover it.

00:32:10.910 --> 00:32:13.700
But once it's discovered you can use the standard protocol.

00:32:13.700 --> 00:32:17.299
You can act as a proxy for that protocol.

00:32:17.299 --> 00:32:21.730
You register these not in the PPD file, but
by putting them in the back end directory.

00:32:21.730 --> 00:32:28.440
And unless you set them to mode 700,
they're going to be run as the L P user.

00:32:28.440 --> 00:32:30.930
This is different from previous releases.

00:32:30.930 --> 00:32:34.269
We've done this to enhance the security of CUPS.

00:32:34.269 --> 00:32:36.849
Because most back ends don't need to run as root.

00:32:36.849 --> 00:32:40.329
And I'll caution you, if you're
using running as root so you can read

00:32:40.329 --> 00:32:43.399
from the user's home directory ,
that's really not a good thing to do.

00:32:43.400 --> 00:32:47.110
Because the user's home directory
might be on somebody else's machine.

00:32:47.109 --> 00:32:49.569
So keep that in mind.

00:32:49.569 --> 00:32:53.539
If you have something that depends on running
as root you will need to change the permissions

00:32:53.539 --> 00:32:57.740
to 700 and then it will run as root on Leopard.

00:32:57.740 --> 00:33:00.750
And as far as previous releases go, they won't care.

00:33:00.750 --> 00:33:04.109
They will just see the back end
and run it as root regardless.

00:33:04.109 --> 00:33:09.750
So make sure to check that in your
own back ends if you have them.

00:33:09.750 --> 00:33:12.059
Now the last thing, I kind of lumped
it into printer drivers.

00:33:12.059 --> 00:33:16.279
But you could actually develop these separate
from printer drivers, is the notifier.

00:33:16.279 --> 00:33:22.970
And the notifier is a program that's
run to notify the user of some event.

00:33:22.970 --> 00:33:28.440
You install them and user lib exec CUPS
notifier, and then you can subscribe to events

00:33:28.440 --> 00:33:36.880
for that particular notifier via the CUPS API or
various other programs that are available on the net.

00:33:36.880 --> 00:33:38.080
They're run on demand.

00:33:38.079 --> 00:33:43.849
And you read any I G P messages that you need
to forward on to whatever protocol you're using.

00:33:43.849 --> 00:33:45.549
From standard input.

00:33:45.549 --> 00:33:46.940
And send them out.

00:33:46.940 --> 00:33:50.910
And if you look at the example
notifiers in the sample source code,

00:33:50.910 --> 00:33:55.120
you will see that the -- the loop for that is very simple.

00:33:55.119 --> 00:33:57.649
You just -- wow, I can read a message.

00:33:57.650 --> 00:33:59.870
I can send a notification.

00:33:59.869 --> 00:34:02.509
And when I end a file I exit.

00:34:02.509 --> 00:34:06.579
We've got two helper functions for
you to give you human readable text.

00:34:06.579 --> 00:34:10.460
CUPS Notify Subject and Cups Notify Text.

00:34:10.460 --> 00:34:16.470
They take the message that you received and process it and
give you sometimes that you can then display to the user.

00:34:16.469 --> 00:34:19.829
It's localized for the language that's -- that's set.

00:34:19.829 --> 00:34:23.579
And just very simple messages and everything.

00:34:23.579 --> 00:34:29.529
So if you're doing anything that don't require
any detailed responses, use those functions.

00:34:32.579 --> 00:34:38.319
Now on the Leopard side, we now actually
have support for this auto set up tool.

00:34:38.320 --> 00:34:42.890
Use register in N A PD file with A P auto set up tool.

00:34:42.889 --> 00:34:47.539
And provide the path to your tool, which
would be under library printer's vendor name.

00:34:47.539 --> 00:34:49.420
This gets run when you add the queue.

00:34:49.420 --> 00:34:55.420
And it will be able to configure the printer and the
PPD file with whatever installable options are in there,

00:34:55.420 --> 00:35:03.590
an even set the defaults for media, size and paper tray
if that information is available from your printer.

00:35:03.590 --> 00:35:08.470
Custody Print Dialogue panes, which used to be called PD Es,

00:35:08.469 --> 00:35:13.769
provide extra panes in the Print
Dialogue for printer specific options.

00:35:13.769 --> 00:35:22.409
So the general rule of thumb is use a custom Print Dialogue
pane if what you can do in a PPD file is insufficient.

00:35:22.409 --> 00:35:28.779
So if you're doing something where you need
to have 5-way dependencies between 50 options,
P

00:35:28.780 --> 00:35:35.190
you might want to do a custom Print Dialogue pane to handle
that and to provide the user with a useable interface rather

00:35:35.190 --> 00:35:42.000
than pick from a bunch of lists and resolve
a lot of those constriction dialogues.

00:35:42.000 --> 00:35:47.579
It's important when you compile these that they are
full way fact, and also have Garbage Collection enabled.

00:35:47.579 --> 00:35:50.500
There's a little check box in Xcode for that.

00:35:50.500 --> 00:35:53.300
So that they will work with all applications.

00:35:53.300 --> 00:35:58.140
If you have a Carbon pane, that will
not work with 64-bit applications.

00:35:58.139 --> 00:36:04.279
And similarly, if you have a -- a 64-bit
pane but it's not Garbage Collection enabled,

00:36:04.280 --> 00:36:07.560
it's won't work for a Garbage Collection application.

00:36:07.559 --> 00:36:11.630
So it's important when you compile these things
make sure that they have those options enabled.

00:36:11.630 --> 00:36:13.570
And then they'll work everywhere.

00:36:14.619 --> 00:36:19.880
Another thing to keep in mind is these don't get
invoked if you don't use the standard Print Dialogue.

00:36:19.880 --> 00:36:23.930
So if you're printing from Microsoft Office
or you're printing from the command line,

00:36:23.929 --> 00:36:29.089
those options that you're expecting from
your custom PD E won't actually be coming

00:36:29.090 --> 00:36:31.990
to your driver because they were never generated.

00:36:31.989 --> 00:36:33.729
So keep that in mind.

00:36:33.730 --> 00:36:40.240
Have some defaults that you can use in case there
aren't those options, or, you know, fail accordingly.

00:36:40.239 --> 00:36:46.409
You register all your -- your dialogue panes
with the A P dialogue extension attribute.

00:36:46.409 --> 00:36:48.309
You can have one or more of those.

00:36:48.309 --> 00:36:51.789
And they'll appear in that order in your Print Dialogue.

00:36:51.789 --> 00:36:55.500
And there's an output PINs example that you can look at.

00:36:55.500 --> 00:36:57.500
Believe it shows all the basics.

00:36:57.500 --> 00:37:02.369
And build your own custom panes from there.

00:37:02.369 --> 00:37:08.980
Now the monitoring tool, again, is something where you can
monitor the of ink levels, what paper trays are empty --

00:37:08.980 --> 00:37:12.920
any kind of monitoring you need to do for your device.

00:37:12.920 --> 00:37:18.150
You register it in the PPD file with
A P printer low ink tool attribute.

00:37:18.150 --> 00:37:21.650
And again, library printer vendor
name whatever the application is.

00:37:21.650 --> 00:37:27.920
And it will get run and show you the
-- the status of the queue as needed.

00:37:27.920 --> 00:37:32.980
The last thing is the printer utility.

00:37:32.980 --> 00:37:37.309
You have A P printer utility paths
specifies where to find that.

00:37:37.309 --> 00:37:39.320
Again, this is where you do your printer maintenance.

00:37:39.320 --> 00:37:43.220
Clean the print heads, align the print heads,
anything that you need to do with that.

00:37:44.510 --> 00:37:47.430
On the support files front -- there's A P book file.

00:37:47.429 --> 00:37:48.960
Which defines your help file.

00:37:48.960 --> 00:37:52.740
So when somebody clicks on help and says,
hey, what do I do with this error message,

00:37:52.739 --> 00:37:55.709
it will forward you to your page
so that they know what to do.

00:37:55.710 --> 00:38:02.530
The color profiles for your particular
printer are defined with CUPS ICC profile.

00:38:02.530 --> 00:38:05.240
And there's a whole bunch of selectors
that go along with that.

00:38:05.239 --> 00:38:07.339
If you look in the CUPS documentation

00:38:07.340 --> 00:38:12.200
under the PPD specification you will
find a nice verbose description of this.

00:38:12.199 --> 00:38:14.960
There's also a tech note off the Apple developer's site.

00:38:14.960 --> 00:38:16.599
On the same subject.

00:38:16.599 --> 00:38:23.589
And basically allows you to define the color profile
that will be used when ripping the data for your printer.

00:38:23.590 --> 00:38:26.130
And then the icon is API icon path.

00:38:26.130 --> 00:38:32.210
And then you're sending it to a Tif file or an ICNS
file or whatever -- whatever you happen to use.

00:38:34.269 --> 00:38:40.059
Now if your driver needs to define custom file
times and the vast majority of them don't,

00:38:40.059 --> 00:38:43.039
you define them in the private et cetera CUPS directory.

00:38:43.039 --> 00:38:46.639
And you create a dot types file to define the file type.

00:38:46.639 --> 00:38:51.089
And a dot com file to define the filters
that are used for that file type.

00:38:51.090 --> 00:38:55.910
More typically, this is used if you're
developing an application or some sort

00:38:55.909 --> 00:39:01.949
of a service that's converting some custom file
types, say, an XML document, into something printable.

00:39:01.949 --> 00:39:06.419
You would use this to define the
filter that's used for that data.

00:39:06.420 --> 00:39:12.389
The convention is you use the vendor name, dot application
name, dot types for the types file, and then again,

00:39:12.389 --> 00:39:16.400
vendor name dot app name dot coms for the conversion file.

00:39:18.420 --> 00:39:21.269
Now I'm going it talk a little bit
about writing a CUPS Raster driver.

00:39:21.269 --> 00:39:25.059
Because by far we get the most questions about this.

00:39:25.059 --> 00:39:27.949
CUPS Raster drivers are very simple.

00:39:27.949 --> 00:39:33.329
You have to a Raster filter, which converts CUPS
Raster data, which is essentially a page header

00:39:33.329 --> 00:39:36.090
that says this is the page size and the media source.

00:39:36.090 --> 00:39:40.780
And the other options you use are selected for
this page, and then the image for that page.

00:39:40.780 --> 00:39:43.750
And then the next page header and
the next page image, and so on.

00:39:43.750 --> 00:39:46.059
Until you reach the end of the file.

00:39:46.059 --> 00:39:50.719
So you have this filter that reads that Raster data
and converts it into something that can be printed.

00:39:50.719 --> 00:39:53.269
And then you can optionally provide a command filter.

00:39:53.269 --> 00:39:55.869
And this is something that we've added new in Leopard.

00:39:55.869 --> 00:40:01.619
Basically to have basic control commands instead
of having your own custom printer utility,

00:40:01.619 --> 00:40:07.929
if all you need is print a self-test page or clean print
heads, you can implement that via the command filter.

00:40:07.929 --> 00:40:11.929
Again, both of these get done with the
CUPS filter attribute in the PPD file.

00:40:11.929 --> 00:40:16.730
And then you just point them to library
printers, run your name, an then the filter name.

00:40:18.780 --> 00:40:27.620
Now in the main loop for your Raster driver you're
going to open up a stream for the Raster data.

00:40:27.619 --> 00:40:29.670
And in this case we're using CUPS Raster open.

00:40:29.670 --> 00:40:34.210
We're reading from file descriptors
zero, which is standard input.

00:40:34.210 --> 00:40:35.960
And then we just do a wild loop.

00:40:35.960 --> 00:40:43.449
While we can read a page header we send out a message
to standard error saying we are printing a page,

00:40:43.449 --> 00:40:46.869
and please do this, otherwise paper counting doesn't work.

00:40:46.869 --> 00:40:54.380
We allocate memory for the line of -- each line
of data we're reading from the Raster page.

00:40:54.380 --> 00:40:59.680
And then we do whatever Page Setup
commands we need to do for our printer.

00:41:00.699 --> 00:41:05.589
Once we've done that we loop through
every line in the page image.

00:41:05.590 --> 00:41:07.670
We give the user some status information.

00:41:07.670 --> 00:41:11.230
Hey, I'm printing page 1 and I'm at 53 percent.

00:41:11.230 --> 00:41:15.300
And then we convert that Raster data
into something the printer can take.

00:41:15.300 --> 00:41:17.310
So PCL, NACP -- what have you.

00:41:17.309 --> 00:41:23.619
Once we're done reading the page
we'll free the buffer that we had.

00:41:23.619 --> 00:41:27.009
We'll send out any end of page commands
that we need to for the printer.

00:41:27.010 --> 00:41:30.170
And then we'll go and do that again.

00:41:30.170 --> 00:41:33.710
Once we get to the last one we
don't have any more page headers.

00:41:33.710 --> 00:41:35.400
We close the stream and we exit.

00:41:35.400 --> 00:41:36.480
And we're done.

00:41:36.480 --> 00:41:39.559
So very simple to do this Raster driver.

00:41:39.559 --> 00:41:41.610
It's meant to go a line at a time.

00:41:41.610 --> 00:41:46.120
But there are drivers that buffer
up into bands and so forth.

00:41:46.119 --> 00:41:47.880
However works best for your device.

00:41:47.880 --> 00:41:50.760
You just read the data from the standard input.

00:41:51.909 --> 00:41:58.059
Now as you're going along and you're notifying the user of
what's happening, you're sending messages to standard error.

00:41:58.059 --> 00:42:04.369
And there's little prefix strings that we use to
tell the scheduler what kind of message it is.

00:42:04.369 --> 00:42:08.359
So if you have info on the front of it,
it's just general information for the user.

00:42:08.360 --> 00:42:11.650
And it gets sent to the user but
not generally to the error log file.

00:42:11.650 --> 00:42:18.510
Because if you're seeing 500 messages that say printing page
1, zero percent, it's not all that useful for debugging.

00:42:18.510 --> 00:42:24.930
So we don't put info messages into the error log
file unless you set it to the highest log level.

00:42:24.929 --> 00:42:28.980
Error messages do get logged in the error log file.

00:42:28.980 --> 00:42:30.780
But they also get sent to the user.

00:42:30.780 --> 00:42:33.550
And you use error on the front of it.

00:42:33.550 --> 00:42:39.030
And again, if you're developing this, it's kind of
straight forward once you kind of look at the code.

00:42:39.030 --> 00:42:43.820
Debug messages don't normally go into the
error log file unless you enable debugging.

00:42:43.820 --> 00:42:50.760
But if you're providing tech support, it's very useful to
have some debug in there so that when somebody calls you up

00:42:50.760 --> 00:42:56.110
and said I can't print to your printer, you
can say, okay, turn on the debug logging,

00:42:56.110 --> 00:43:01.590
an then let's look in that error log file and
we'll see what messages are coming from the driver.

00:43:01.590 --> 00:43:06.000
Those page messages that I mentioned
earlier are very important.

00:43:06.000 --> 00:43:09.500
If you don't put them out then page accounting
doesn't work, and you don't see anything

00:43:09.500 --> 00:43:13.199
in the page log file saying that
your driver printed anything.

00:43:13.199 --> 00:43:18.569
Without the page messages, you don't get
any kind of accounting on the system.

00:43:18.570 --> 00:43:21.240
So make sure you put them out if you're a Raster driver.

00:43:21.239 --> 00:43:23.889
Because you're the only one that's going to do it.

00:43:23.889 --> 00:43:28.269
And finally, there's a state message,
this is something new in Leopard.

00:43:28.269 --> 00:43:33.219
And it allows you to set the printer state reasons
values that are being reported for that printer.

00:43:33.219 --> 00:43:39.029
This is how you can actually notify somebody via
the notification mechanism we talked about earlier

00:43:39.030 --> 00:43:41.670
that something's happened on the printer.

00:43:41.670 --> 00:43:43.380
So you can say state paused.

00:43:43.380 --> 00:43:47.890
And that will actually stop the queue and alert
the Admin that something really bad has happened.

00:43:47.889 --> 00:43:54.799
Or you can -- if you're monitoring the ink levels as
you're going through, you can say state marker low.

00:43:54.800 --> 00:43:59.330
And it will notify the user that hey, you're low on ink.

00:43:59.329 --> 00:44:01.849
So those are the general messages that you'll send.

00:44:01.849 --> 00:44:05.500
They all go to standard error,
and the scheduler sorts them out.

00:44:07.340 --> 00:44:16.610
Now, we get a lot of messages from people on the CUPS forums
that I cancelled my job and the printer keeps printing.

00:44:16.610 --> 00:44:22.870
The reason for this is because a lot of drivers
don't actually implement a signal handler

00:44:22.869 --> 00:44:26.489
to know when they're being stopped.

00:44:26.489 --> 00:44:31.549
So what you need to do is use the
signal function to register a function

00:44:31.550 --> 00:44:35.180
to call when the scheduler cancels your job.

00:44:35.179 --> 00:44:37.469
We send sig term (assumed spelling).

00:44:37.469 --> 00:44:39.089
Once you get that, you want to set a flag.

00:44:39.090 --> 00:44:41.930
Because the signal handler can't really do a whole lot.

00:44:41.929 --> 00:44:44.929
And then in your main loop you can
check to see if that flag's been set.

00:44:44.929 --> 00:44:51.480
And then you can clean up gracefully and, you know, eject
the last page and you know the printer's in a good state.

00:44:51.480 --> 00:44:57.250
If you don't do that, it will probably just
terminate your driver, an then the next job that comes

00:44:57.250 --> 00:45:01.889
through will be printing to the printer in
an unknown state, and it's probably going

00:45:01.889 --> 00:45:08.269
to spew garbage -- and user will be angry.

00:45:08.269 --> 00:45:11.949
Now when you're writing all this Raster
data sometimes you need to communicate

00:45:11.949 --> 00:45:14.569
with the printer and know what state its in.

00:45:14.570 --> 00:45:17.760
So this is where the batch handle comes in.

00:45:17.760 --> 00:45:21.510
If you're sending out a command to the
printer, okay, tell me what's going on.

00:45:21.510 --> 00:45:25.940
You also want to flush standard output
if you're using the buffer output.

00:45:25.940 --> 00:45:28.950
So that the data does get to the back end.

00:45:28.949 --> 00:45:33.029
And then use the back channel read
function to read that data back.

00:45:33.030 --> 00:45:36.330
And here I use the example of a five second time out.

00:45:36.329 --> 00:45:39.179
Whatever it appropriate for your
device is what you should use.

00:45:39.179 --> 00:45:42.899
Five seconds is a general rule of thumb for most devices.

00:45:42.900 --> 00:45:49.090
And what you'll get back is either the number
of bytes that the printer provided you, or zero,

00:45:49.090 --> 00:45:52.320
indicating that -- that nothing came back.

00:45:52.320 --> 00:45:56.200
The time out there helps you avoid a dead
lock situation where you send something,

00:45:56.199 --> 00:45:59.379
expect something back, and the printer doesn't respond.

00:45:59.380 --> 00:46:02.430
Not all interfaces support by directional IO.

00:46:02.429 --> 00:46:05.429
So it's important to find out that before you do this.

00:46:05.429 --> 00:46:08.669
There's a side channel API to actually query this.

00:46:08.670 --> 00:46:11.369
And we'll show that here in just a sec.

00:46:13.730 --> 00:46:19.800
So the side channel APIs, as I mentioned before -- it's
a little more complicated that than back channel API.

00:46:19.800 --> 00:46:21.340
There's three functions.

00:46:21.340 --> 00:46:26.579
The one you use in your drivers is
going to be CUPS Side Channel Do Request

00:46:26.579 --> 00:46:29.480
and you're going to send one of five commands.

00:46:29.480 --> 00:46:36.869
And the one in particular for the buy directional support
is CUPS C S command get by die to get back whether

00:46:36.869 --> 00:46:39.900
or not the back end support is bidirectional.

00:46:41.030 --> 00:46:47.680
And if you're doing this, keep in mind that of those five
commands, not all of them are supported by all back ends

00:46:47.679 --> 00:46:51.539
because they're not all supportable on all back ends.

00:46:51.539 --> 00:46:58.659
So check the status that you get back from the back
end as to whether it's supported that operation or not.

00:46:58.659 --> 00:47:00.679
There's actually a status code for that.

00:47:00.679 --> 00:47:02.589
And just keep in mind.

00:47:02.590 --> 00:47:06.650
Most of them are going to support drain output,
which gets everything out to the printer.

00:47:06.650 --> 00:47:08.829
And get bidirectional capabilities.

00:47:08.829 --> 00:47:11.980
But most will not support the others.

00:47:13.510 --> 00:47:16.380
So we want to check for bidirectional support.

00:47:16.380 --> 00:47:24.869
There's a header file include CUPS slash side channel dot
H. And then you initialize this buffer to hold the response.

00:47:24.869 --> 00:47:26.759
In this case it's going to be a 1 byte response.

00:47:26.760 --> 00:47:31.440
So you can do care data and then we pass
that through to CUPS side channel do request.

00:47:31.440 --> 00:47:34.349
And we ask for the bidirectional capabilities.

00:47:34.349 --> 00:47:36.500
And you notice we check -- we get the status back.

00:47:36.500 --> 00:47:42.510
And if the status is okay and we got 1 byte of
data back, then we know we can use that value.

00:47:42.510 --> 00:47:45.240
Otherwise we're just going to assume
that bidirectional is not supported

00:47:45.239 --> 00:47:48.339
because we got some response we didn't understand.

00:47:51.050 --> 00:47:55.630
Now that's the CUPS Raster driver path there.

00:47:55.630 --> 00:47:57.490
And you know, a lot of you are doing those.

00:47:57.489 --> 00:48:05.659
But more generally, if you're developing a printer driver,
there are tools available to do all of the heavy lifting.

00:48:05.659 --> 00:48:08.460
CUPS driver development kit.

00:48:08.460 --> 00:48:10.340
It's available on CUPS dot org.

00:48:10.340 --> 00:48:10.940
It's free.

00:48:10.940 --> 00:48:17.450
There's source code and the universal binary
for Mac OS X. It's not included with Leopard.

00:48:17.449 --> 00:48:21.429
But you can install it on Leopard, and you'll
see that in a second on the demo machine.

00:48:21.429 --> 00:48:26.159
If you're going to be developing drivers
you're going to need CUPS 1.2 or higher.

00:48:26.159 --> 00:48:29.769
Which means Leopard to do the driver development.

00:48:29.769 --> 00:48:36.900
But what you create can be used on any
version of Mac OS X back to panther's 10.3.

00:48:36.900 --> 00:48:38.309
There's three major components.

00:48:38.309 --> 00:48:45.730
The PPD Compiler, the support tools for PPD files, and last
but not least, there's some sample drivers that you can use.

00:48:45.730 --> 00:48:49.250
These sample drivers are much more
functional than what comes with CUPS.

00:48:49.250 --> 00:48:54.570
And we've used them for anything from a little
ink jet printer all the way up to big copiers.

00:48:56.030 --> 00:49:00.660
Now the PPD Compiler is equivalent to, like, a C Compiler.

00:49:00.659 --> 00:49:05.079
And if you're ever developed a PPD
file it's a bit like machine language.

00:49:05.079 --> 00:49:10.299
You know, you can develop it and you know,
put in all the attributes and everything,

00:49:10.300 --> 00:49:13.660
write it by hand, but it's really hard to maintain.

00:49:13.659 --> 00:49:19.719
And I know from experience looking at PPD files, it looks
like there's a lot of cut and paste that goes on in order

00:49:19.719 --> 00:49:24.139
to keep these maintained and move up to new drivers.

00:49:24.139 --> 00:49:31.429
We've been using this particular tool for many
years internally to create the PPD files we use.

00:49:31.429 --> 00:49:38.549
And basically it allows you to use a
higher level description of the device

00:49:38.550 --> 00:49:43.050
to generate PPD files programatically,
rather than doing it all by hand.

00:49:43.050 --> 00:49:45.550
There's a lot of advantages with this.

00:49:45.550 --> 00:49:51.019
If you're developing drivers for a lot of similar devices,
or if you want to have a separate PPD for every variation

00:49:51.019 --> 00:49:57.420
of a device, you can define those differences
in the file that you use for the PPD Compiler.

00:49:57.420 --> 00:50:03.180
And generate from that one source more
multiple languages and multiple platforms.

00:50:03.179 --> 00:50:06.239
So if gives you a lot of advantages
over just doing everything by hand.

00:50:06.239 --> 00:50:09.709
So please do use it.

00:50:09.710 --> 00:50:14.429
You can generate single or multi language
PPD files with a DDK PPD Compiler.

00:50:14.429 --> 00:50:16.969
They can be compressed or uncompressed, depending

00:50:16.969 --> 00:50:20.539
on the platform you're shipping for,
an you can control the line endings.

00:50:20.539 --> 00:50:24.860
So if you've got a postscript printer and you
want to support this on multiple platforms

00:50:24.860 --> 00:50:28.380
that will get you into that situation very quickly.

00:50:28.380 --> 00:50:34.039
When you actually run the PPD Compiler, it's very simple.

00:50:34.039 --> 00:50:39.519
You provide the file that you're
going to convert on the command line.

00:50:39.519 --> 00:50:45.739
And it creates by default a PD sub directory
that contains the PPD files defined in there.

00:50:45.739 --> 00:50:49.500
If you wanted to add additional languages to that PPD file

00:50:49.500 --> 00:50:52.789
that you create you can just list
them on the command line there.

00:50:52.789 --> 00:50:56.960
In this case, we'll do French and
German in addition to the English.

00:50:56.960 --> 00:51:05.079
And you've got PPD files that contain English, German,
and French without any -- any extra development time.

00:51:05.079 --> 00:51:11.039
And then finally, if you want to generate compressed PPD
files, which is not the default in the current release,

00:51:11.039 --> 00:51:17.340
use them to the Z option and then you get nice
compressed files for distribution now a lot

00:51:17.340 --> 00:51:21.470
of you have existing PPD files you don't
necessarily want to go to the trouble

00:51:21.469 --> 00:51:25.859
of creating new PPD files to use with the PPD Compiler.

00:51:25.860 --> 00:51:31.710
There's a merge application that can merge single
language PPD files into multi language ones.

00:51:31.710 --> 00:51:36.610
And a lot of you have been using that to great effect.

00:51:36.610 --> 00:51:41.059
If you want to use the PPD Compiler you
can actually import those existing PPD

00:51:41.059 --> 00:51:45.039
into a dot DRV file that the PPD Compiler uses.

00:51:45.039 --> 00:51:48.380
And then regenerate them as needed
after you've made your changes.

00:51:48.380 --> 00:51:54.170
So if you've got existing stuff you can
use this, and start using the PPD Compiler

00:51:54.170 --> 00:51:57.650
for your generation of PPDs in the future.

00:51:57.650 --> 00:52:05.090
If you have people that are doing the localization for you
separate, you can actually take the options that are defined

00:52:05.090 --> 00:52:10.180
in your -- in your DRV file into a message catalog.

00:52:10.179 --> 00:52:11.829
(Inaudible) new text format.

00:52:11.829 --> 00:52:17.829
They then edit that, provide it back to you, an then
you can incorporate it into the PPDs that you generate.

00:52:17.829 --> 00:52:24.789
And finally for the managers here, if you want to see what
drivers are being supported by a particular dot G R V file,

00:52:24.789 --> 00:52:28.960
you can generate this HTML file that gives
you a nice little summary of the printers

00:52:28.960 --> 00:52:33.909
and the options that are available in there.

00:52:33.909 --> 00:52:37.529
And last but not least, the Raster drivers we've included.

00:52:37.530 --> 00:52:39.000
There's two main drivers.

00:52:39.000 --> 00:52:44.429
A PCL driver for basically any HP or
HP compatible driver in existence.

00:52:44.429 --> 00:52:48.759
And an E S C P 2 driver for all
of the Epson ink jet printers.

00:52:48.760 --> 00:52:52.620
Both of these drivers are completely
customizable through the PPD files.

00:52:52.619 --> 00:52:56.389
So you don't have to do any changes to the
drivers themselves unless you really want

00:52:56.389 --> 00:53:00.629
to incorporate something custom to your driver.

00:53:00.630 --> 00:53:07.570
They provide dithering and ink limiting and color management
functionality in them, so that you can actually set things

00:53:07.570 --> 00:53:11.930
up in the PPD file and the driver will behavior accordingly.

00:53:11.929 --> 00:53:17.609
And we include command filters to do the
basic head cleaning and self-test page.

00:53:18.920 --> 00:53:24.760
Now the PC L driver supports all the major PC L
variants, as well as H P R T L for the plotters.

00:53:24.760 --> 00:53:26.780
It supports P GL device commands.

00:53:26.780 --> 00:53:32.850
So if you have a device that supports stapling,
punching, finishing, folding -- all that stuff --

00:53:32.849 --> 00:53:38.009
and using P GL for that, you can actually set
that up in the PPD file and it will use those.

00:53:38.010 --> 00:53:42.220
And we support gray scale and color
printing, and various color spaces.

00:53:42.219 --> 00:53:48.489
Similarly, with the E S C P 2 driver, we
support the two main commands that are used

00:53:48.489 --> 00:53:51.829
for the older an the newer Epson ink jets.

00:53:51.829 --> 00:53:56.000
We support the publicly documented remote mode commands.

00:53:56.000 --> 00:53:58.469
And various color spaces, up to 7 color.

00:53:58.469 --> 00:54:00.889
And we'll have 8 color at some point.

00:54:00.889 --> 00:54:07.309
We handle all of the weaving code that's necessary
for the Epson printers so that if you're printing

00:54:07.309 --> 00:54:12.269
at a higher resolution it will actually work on the
printer rather than generating some sort of error.

00:54:13.380 --> 00:54:18.530
So without further ado, we'll do a
quick demo on the demo machine here.

00:54:20.239 --> 00:54:25.309
And I've got the -- from the DDK there are several examples.

00:54:25.309 --> 00:54:31.460
And the R 300 basic example is
the one we're going to start with.

00:54:31.460 --> 00:54:36.769
And I actually have an R 260 Epson photo printer up here.

00:54:36.769 --> 00:54:43.639
And we're going to modify this R 300 driver
so that it works with the 260 as well.

00:54:43.639 --> 00:54:45.969
Now that DRV file is a plain text file.

00:54:45.969 --> 00:54:48.119
I have it open in Xcode right now.

00:54:48.119 --> 00:54:51.880
And starts off with some standards includes.

00:54:51.880 --> 00:54:54.590
Font definitions for standard fonts on the system,

00:54:54.590 --> 00:54:59.289
and media definitions for standard media
sizes that are defined in the PPD section.

00:54:59.289 --> 00:55:04.690
Since we're using the Epson driver we're
going to include the header for that.

00:55:04.690 --> 00:55:06.940
We're going to say we're using that driver.

00:55:06.940 --> 00:55:11.280
And that will define the CUPS filters
that are associated with that driver.

00:55:11.280 --> 00:55:14.850
And then we're going to do the model number for the printer.

00:55:14.849 --> 00:55:24.400
And in the case of the sample drivers, we're using the model
number as kind of a capabilities number for the driver.

00:55:24.400 --> 00:55:28.750
So in this case, we support various command sets.

00:55:28.750 --> 00:55:32.050
We put them all inside parentheses,
and we're using constants

00:55:32.050 --> 00:55:35.710
that are defined in that E S E P dot H header file.

00:55:35.710 --> 00:55:38.780
And they're orred together by using the parentheses there.

00:55:38.780 --> 00:55:43.320
So if you have a driver that supports
multiple devices you can actually identify

00:55:43.320 --> 00:55:48.570
which device you're going to be
write for with this model number.

00:55:48.570 --> 00:55:52.460
And this gets in the PPD file and
the CUPS model number attribute.

00:55:52.460 --> 00:55:59.639
Since we wanted to include support for all the
fonts that are on the system, we do font star.

00:55:59.639 --> 00:56:03.109
We identify the manufacturer and the driver version.

00:56:04.309 --> 00:56:08.400
And then we list out all the paper sizes that we support.

00:56:09.579 --> 00:56:15.170
And you notice there's a hardware margins command
there that tells you what margins to use for each size.

00:56:15.170 --> 00:56:23.659
And if you have different margins for each size you can
just put the new margin that you need before the media size.

00:56:23.659 --> 00:56:26.129
And then since this printer supports variable sizes,

00:56:26.130 --> 00:56:30.820
we tell the PPD Compiler we support
various sizes, and then the size range.

00:56:30.820 --> 00:56:33.070
So the minimum size and the maximum size.

00:56:33.070 --> 00:56:34.769
And width and height.

00:56:35.840 --> 00:56:38.850
This particular printer supports
black and white and color printing.

00:56:38.849 --> 00:56:42.519
So we have four different color spaces we're defining here.

00:56:42.519 --> 00:56:45.869
There's gray scale and RGB, which
correspond to screen color.

00:56:45.869 --> 00:56:54.960
And then there's black and C M Y K, which correspond to a
linear device color space that you would use for profiling.

00:56:54.960 --> 00:56:58.460
This particular printer supports a number of resolutions.

00:56:58.460 --> 00:57:04.309
This sample driver does 360, 720, and 1440 D P  I.

00:57:04.309 --> 00:57:06.469
And the numbers there actually mean something.

00:57:06.469 --> 00:57:10.959
And you'll find in the DDK documentation
what each one of them means.

00:57:10.960 --> 00:57:17.369
In short, it's the -- the second number there is
the number of lines that the print head prints.

00:57:17.369 --> 00:57:22.319
And then the last number here is what you need
it do in order to print at that resolution.

00:57:22.320 --> 00:57:28.530
And -- a little complicated, but there's a
nice description of it in the documentation.

00:57:28.530 --> 00:57:34.450
Because this is a color printer we need to tell
it how many channels of color are actually are.

00:57:34.449 --> 00:57:36.779
In this case, it's a six-color printer.

00:57:36.780 --> 00:57:39.690
And how much ink to put down on the page at any given page.

00:57:39.690 --> 00:57:43.720
At 1.0 means 100 percent, 2.0 means 200 percent.

00:57:43.719 --> 00:57:48.779
So in this case we don't want to
put more than 200 percent ink.

00:57:48.780 --> 00:57:52.930
There's some basic mapping for the -- the light inks.

00:57:52.929 --> 00:57:56.929
You can define it with custom look up tables or this stuff,

00:57:56.929 --> 00:58:00.049
since we're using the basic example,
we're going to use this.

00:58:00.050 --> 00:58:07.080
And then dithering constants to
use for the various resolutions.

00:58:07.079 --> 00:58:10.139
These will vary depending on the printer that you're using.

00:58:10.139 --> 00:58:14.569
Last but not least, we've got the dot sizes
that are going to be used for the printer.

00:58:14.570 --> 00:58:21.539
And then we'd actually define the printer that
we want and the PPD that we want to create.

00:58:21.539 --> 00:58:29.219
So in order to add support for the 260, it's a similar
printer to the 300, but it's a little bit different.

00:58:29.219 --> 00:58:34.379
So I am just going to bring up and highlight the
differences everything up to this point has been the same.

00:58:34.380 --> 00:58:44.960
But what we're going to do is break out the resolution dot
size and model name information into two separate groupings.

00:58:44.960 --> 00:58:49.940
You see, we have the curly braces -- this is
how you do nesting in the driver info files.

00:58:49.940 --> 00:58:55.900
It allows you to create multiple PPD
files from a single dot DRV file.

00:58:55.900 --> 00:58:58.160
So here we have the 260.

00:58:58.159 --> 00:59:02.149
We've changed the numbers there, the last
numbers (Inaudible) for the resolutions.

00:59:02.150 --> 00:59:09.269
We've changed the dot size constants, and then
obviously the model name and the PPD is changed.

00:59:09.269 --> 00:59:16.179
The original one here is exactly as it
was from the example from the DDK manual.

00:59:16.179 --> 00:59:28.539
And when we run the PPD Compiler,
we'll actually get two PPD files.

00:59:28.539 --> 00:59:34.820
The first one there is the -- the PPD for
the R 260, and the second one for the R 300.

00:59:34.820 --> 00:59:38.880
And we can create a print queue.

00:59:38.880 --> 00:59:41.730
Using that PPD, using the L P Admin command or you know,

00:59:41.730 --> 00:59:49.789
if you were distributing this driver they would just use the
standard printer sharing and printer effects set up pane.

00:59:49.789 --> 00:59:54.210
An then we can print something out on the printer.

00:59:54.210 --> 01:00:00.090
And as they do on the cooking shows --
here's what it looks like when it comes out!

01:00:00.090 --> 01:00:01.180
Basically --

01:00:01.179 --> 01:00:04.069
( Applause )

01:00:04.070 --> 01:00:07.410
>> So basically you get the output on the printer.

01:00:07.409 --> 01:00:09.719
And it is doing its work.

01:00:09.719 --> 01:00:11.829
And as ink jets go it's fairly fast.

01:00:11.829 --> 01:00:14.539
But not fast enough for this demo.

01:00:14.539 --> 01:00:19.190
As you can see, you can create new drivers very easily.

01:00:19.190 --> 01:00:22.519
Typically, these are going to be
used for the Epson printers.

01:00:22.519 --> 01:00:27.009
For any kind of drivers that you'll do custom ink sets.

01:00:27.010 --> 01:00:34.270
But for the PC L driver you will probably find a lot for
applicability for copiers and other H P compatible devices

01:00:34.269 --> 01:00:36.719
that don't necessarily have postscript capability.

01:00:36.719 --> 01:00:39.239
So if we can switch back to the slides.

01:00:43.599 --> 01:00:48.519
Now that you've seen all this you can look at
the documentation that goes into much more depth

01:00:48.519 --> 01:00:51.860
than I can possibly do in the amount of time allotted.

01:00:51.860 --> 01:00:53.519
There's the original CUPS book.

01:00:53.519 --> 01:00:55.590
It's still available in stores.

01:00:55.590 --> 01:00:58.150
Amazon dot com and so forth.

01:00:58.150 --> 01:01:06.519
It covers everything in the previous versions of Mac OS X
and also covers some stuff from CUPS 1.2 that's in Leopard.

01:01:06.519 --> 01:01:12.199
Particularly notifiers and some of the back
channel stuff you find documentation for.

01:01:12.199 --> 01:01:19.369
They were designed but not actually implemented at
that point when I wrote the book seven years ago.

01:01:19.369 --> 01:01:22.409
And so it's still a really good reference.

01:01:22.409 --> 01:01:27.309
If you need information about the current
release, you can look on the CUPS Web site

01:01:27.309 --> 01:01:31.199
or on your local system, local host colon 631 slash help.

01:01:31.199 --> 01:01:33.279
And search for whatever it is you're looking for.

01:01:33.280 --> 01:01:40.490
You will find information on doing operation
policies, error policies and so forth,

01:01:40.489 --> 01:01:45.139
to actually do stuff in your own environment.

01:01:45.139 --> 01:01:47.920
Much more in depth than what you're
going to get in the CUPS book.

01:01:47.920 --> 01:01:51.369
Because those topics didn't even exist then.

01:01:51.369 --> 01:01:55.889
There's also a printing page Apple
provides on the developer site.

01:01:55.889 --> 01:02:01.250
That gives you all of the stuff that's specify
to Leopard and all other Mac OS X releases.

01:02:01.250 --> 01:02:05.619
They have all the tech notes that are useful
for your CUPS Raster drivers in particular.

01:02:05.619 --> 01:02:12.000
So take a look at there, and if you have any
questions, please do get onto the CUPS forums,

01:02:12.000 --> 01:02:18.369
or the Apple printing list and ask them,
because we're here to answer your questions.

01:02:18.369 --> 01:02:21.659
If you go on the CUPS dot org site you
will also be able to also subscribe

01:02:21.659 --> 01:02:26.019
to those forms via your news reader or post them on line.

01:02:26.019 --> 01:02:28.849
We've got a little Web interface for that.

01:02:28.849 --> 01:02:30.559
And there's a bug reporting page there.

01:02:30.559 --> 01:02:34.099
So if you actually have a bug that's
in CUPS, report it there.

01:02:34.099 --> 01:02:40.179
If you have a bug that's specific to Mac
OS X, please report it through the radar.