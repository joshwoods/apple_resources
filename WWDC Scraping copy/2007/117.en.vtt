WEBVTT

00:00:15.529 --> 00:00:17.000
>> My name is Stuart Chesire and I'm going

00:00:17.000 --> 00:00:20.109
to be telling you about what's new in Bonjour this year.

00:00:23.489 --> 00:00:26.750
So, for the talk today we have five sections.

00:00:26.750 --> 00:00:32.590
We are going to start with the recap, because I know a lot
of you in the room are familiar with Mac OS X and Bonjour,

00:00:32.590 --> 00:00:35.900
but we have a lot of developers
this year who are new to the Mac.

00:00:35.899 --> 00:00:37.839
So we'll start with a recap.

00:00:37.840 --> 00:00:43.120
I'm going to tell you about what's
new in Bonjour, in Leopard this year.

00:00:43.119 --> 00:00:46.609
We're going to cover tips and hints and reminders.

00:00:46.609 --> 00:00:52.759
If there is time at the end I want to show you some demos
of some cool stuff that I have and we'll finish up with time

00:00:52.759 --> 00:00:59.879
for Q and A. So let's begin with the recap.

00:00:59.880 --> 00:01:13.629
The point of Bonjour is the ease of USB devices but using
TCPIP and TCPIP technologies like ethernet and 822 dot 11.

00:01:13.629 --> 00:01:24.169
And the reason we do that is, not just to make products
that are easier to use, but also to enable a whole new sets

00:01:24.170 --> 00:01:28.490
of products that previously would
not have been commercially viable.

00:01:28.489 --> 00:01:35.000
When things are hard to use you get the support of customer
support calls, you get the expensive product returns

00:01:35.000 --> 00:01:39.439
and there are many product categories
that are just killed by that expense.

00:01:39.439 --> 00:01:46.129
So what Bonjour gives you is not just better ease of use
for today's products, but it opens the door to possibilities

00:01:46.129 --> 00:01:53.469
for things that in the past would not of made sense
and I hope to show you a couple of those later on.

00:01:53.469 --> 00:01:59.629
So that's the goal of Bonjour and that's the most
important thing to keep in mind when talking Bonjour,

00:01:59.629 --> 00:02:04.489
is why we're doing this, but of course as engineers
we care about the details about how it works.

00:02:04.489 --> 00:02:11.840
And there are three simple technologists that have
foundation of Bonjour and I'm not going to go into these

00:02:11.840 --> 00:02:14.840
in great detail because many of you have heard it before,

00:02:14.840 --> 00:02:19.000
but for the benefit of the new comers
I'm going to give a quick recap.

00:02:19.000 --> 00:02:25.560
The three layers of technology that make up
Bonjour are: Number one is link local addressing.

00:02:25.560 --> 00:02:28.870
You're not going to do much IP
networking without an address.

00:02:28.870 --> 00:02:29.930
DHCP is great.

00:02:29.930 --> 00:02:33.129
We're not competing with DHCP,
but if there isn't a DHCP server

00:02:33.129 --> 00:02:37.669
on the network then simply failing
is not an acceptable option.

00:02:37.669 --> 00:02:41.899
So, link local addressing is the safety
net that guarantees that your hardware

00:02:41.900 --> 00:02:45.170
and software will always have a working IP address to use.

00:02:45.169 --> 00:02:50.709
It's very simple how it works, the machine
picks a random address in a designated range

00:02:50.710 --> 00:02:53.349
and sends an op request and if somebody answers

00:02:53.349 --> 00:02:56.750
that request then it picks a different
address and tries again.

00:02:56.750 --> 00:03:01.710
So now we've got a bunch of machines hooked
up to an ethernet hub or on a wireless network

00:03:01.710 --> 00:03:07.969
that have unique addresses, which is great, but if we
don't know what those addresses are we've only solved half

00:03:07.969 --> 00:03:08.870
the problem.

00:03:08.870 --> 00:03:12.789
So that's brings us to the second
technology, which is multicast DNS.

00:03:12.789 --> 00:03:19.359
Multicast DNS, very much like the first
point is building on existing technologies.

00:03:19.360 --> 00:03:25.170
This is not competing with DNS, but if you don't have a DNS
server on the network or you don't have access to modify

00:03:25.169 --> 00:03:33.589
that DNS server, then multicast DNS is
peer to peer distributed name resolution.

00:03:33.590 --> 00:03:36.599
Every device runs a little responder that knows its name.

00:03:36.599 --> 00:03:39.840
When you multicast a query to the whole network the device

00:03:39.840 --> 00:03:43.439
that recognizes its name sends you
back a standard DNS format answer.

00:03:43.439 --> 00:03:48.079
So that's giving its name, giving its addressing,
but you still need to know what name to use.

00:03:48.080 --> 00:03:54.690
So the third layer of technology is browsing
the network using DNS base service discovery,

00:03:54.689 --> 00:03:59.930
running over the aforementioned multicast
DNS to discover what services are available.

00:03:59.930 --> 00:04:02.000
So, those are the technologies.

00:04:02.000 --> 00:04:07.180
That's as much as I shall say about the protocol call
issues I'll say today, but you can see the website URLs

00:04:07.180 --> 00:04:11.050
where you can read the RFC's and
the internet graphs and learn more.

00:04:12.430 --> 00:04:17.750
For you software guys, at an API
level there are three basic operations

00:04:17.750 --> 00:04:21.550
that cover almost everything you need to do with Bonjour.

00:04:21.550 --> 00:04:30.240
If you have a piece of software that opens a
socket and binds to an address and port and listens

00:04:30.240 --> 00:04:35.699
for incoming packets of connections, then in our
terminology you are running a server on the network

00:04:35.699 --> 00:04:39.509
and if you are running a server, there's
normally no benefit keeping that secret.

00:04:39.509 --> 00:04:44.180
So you advertise that by registering
with Bonjour, that's the first operation.

00:04:44.180 --> 00:04:48.220
Then, when clients are looking for
that particular type of service come

00:04:48.220 --> 00:04:56.120
on the network they do a Bonjour browsing operation and they
multicast a query on the network and they get back a list

00:04:56.120 --> 00:05:02.019
of names of devices and services that are
offering the type of service they want.

00:05:02.019 --> 00:05:07.370
And then the third operation is resolving from
that name to the address and port and the reason

00:05:07.370 --> 00:05:12.949
that resolving is a separate operation, not part of
the browsing is because browsing is typically something

00:05:12.949 --> 00:05:18.050
that you do on an occasional basis and
most familiar example is picking a printer.

00:05:18.050 --> 00:05:23.980
You browse to pick a printer from the available printers
on the network, but having picked it you then may print

00:05:23.980 --> 00:05:29.290
on it multiple times a day and after that you're not
browsing again cause you have your default printer set

00:05:29.290 --> 00:05:30.850
and you just want to use it.

00:05:30.850 --> 00:05:37.629
But in a world of DHCP and link local with dynamic
addresses, the IP address of that printer could change.

00:05:37.629 --> 00:05:40.490
What it doesn't change is its Bonjour service name.

00:05:40.490 --> 00:05:46.600
So, at print time you resolve from name to address to
get the current address of that printer and if that way

00:05:46.600 --> 00:05:52.640
if tomorrow it's rebooted, if the DHPC server is changed,
if the network is renumbered, the printer that you see

00:05:52.639 --> 00:05:59.860
in your menu with a given name still connects, conceptually
to the printer you want even if the IP address is different.

00:06:01.670 --> 00:06:07.400
When we originally launched Bonjour five
years ago, it feels like a long time.

00:06:07.399 --> 00:06:13.279
It's been five years since Mac OS X 10.2
was announced with Bonjour.

00:06:13.279 --> 00:06:19.509
At that time the focus was on link local networking,
small scale networking, because that was the area

00:06:19.509 --> 00:06:23.370
that was really most neglected
by traditional TCIP networking.

00:06:23.370 --> 00:06:30.350
It was the area most desperately in need of
improvement, but now we've really solved those problems

00:06:30.350 --> 00:06:36.420
and we're taking the success of link local
Bonjour back out to the wide area network.

00:06:36.420 --> 00:06:46.210
Now, for you programmers using the APIs, unless you've
made mistakes your code should still work just the same,

00:06:46.209 --> 00:06:50.889
because the APIs are the same, the difference
is the underlying transport that implements it.

00:06:50.889 --> 00:06:58.889
Instead of you using peer to peer multicast we now use
dynamic DNS using the existing technology that exist

00:06:58.889 --> 00:07:02.849
for DNS updates and DNS queries,
we take the same semantic concepts

00:07:02.850 --> 00:07:08.629
of link local Bonjour and scale
them back to the global scale.

00:07:08.629 --> 00:07:16.170
Bonjour as I'm sure you know by now is available in Mac
OS going back to 10.2, we have it for Windows.

00:07:16.170 --> 00:07:23.410
It's in Linux and BSD, we just heard this
month that Open Solaris is adopting it.

00:07:23.410 --> 00:07:29.300
The slim down versions for embedded operation systems for
going in printers and network cameras and things like that.

00:07:29.300 --> 00:07:31.879
So it's widely available.

00:07:31.879 --> 00:07:38.959
When it comes to software, if Apple has software that does
networking then you can be pretty sure it uses Bonjour.

00:07:38.959 --> 00:07:43.680
Same thing goes for third party
software on the Mac, it does networking.

00:07:43.680 --> 00:07:46.569
When it comes to hardware products same story.

00:07:46.569 --> 00:07:53.199
The new one on this list since last year from
Apple is Apple TV and those of you who have used

00:07:53.199 --> 00:07:56.759
that will, I hope tell us how easy it is to use.

00:07:56.759 --> 00:07:59.199
You plug it in and in discovers iTunes on the network.

00:07:59.199 --> 00:08:04.930
iTunes discovers your Apple TV and
of course that's using Bonjour.

00:08:05.990 --> 00:08:13.610
Ten months ago when we last met at the 2006 developer
conference we had about 300 registered service types.

00:08:13.610 --> 00:08:17.389
This year it's up to 10 months later another 68.

00:08:17.389 --> 00:08:23.189
So that's one new application adopting
Bonjour roughly every three working days.

00:08:23.189 --> 00:08:30.350
So adoption continues to grow and what's
interesting is not just the individual application

00:08:30.350 --> 00:08:35.290
from individual companies adopting Bonjour, but
just in the last month we got two registrations

00:08:35.289 --> 00:08:40.699
from other standard bodies that are
adopted Bonjour for their standards.

00:08:40.700 --> 00:08:47.190
And that's pretty rewarding to see that Bonjour is gone
from being in the early days something that was seen

00:08:47.190 --> 00:08:52.930
as a Mac thing to now something that is really seen
by other standard bodies as an industry standard.

00:08:52.929 --> 00:08:57.269
And that's a good point I think
for us to move into, what's new.

00:09:00.059 --> 00:09:07.959
So, in Tiger we only allocate an IPV4 link local address
on the first interface in your network control panel

00:09:07.960 --> 00:09:12.830
and in Leopard we allocate link
local addresses on all interfaces.

00:09:12.830 --> 00:09:18.389
And with more IP interfaces on our machines
now that we do things like IP over FireWire,

00:09:18.389 --> 00:09:22.899
that helps user ability and it helps reliability.

00:09:22.899 --> 00:09:24.309
We're big fans of IPV6.

00:09:24.309 --> 00:09:30.519
Of course we do IPV6 local addressing, ivory
interface, but we recognize that a lot of devices

00:09:30.519 --> 00:09:34.029
that Macs need to communicate with may not do V6 yet.

00:09:34.029 --> 00:09:39.299
So for compatibility with those, we're doing
V4 link local with, on every interface.

00:09:39.299 --> 00:09:44.279
Last year I showed you the DNS
enabler from cutting edge systems

00:09:44.279 --> 00:09:49.449
that lets you turn your Mac into a wide area Bonjour server.

00:09:49.450 --> 00:09:55.480
This year I'm pleased to announce that we have
officially supported UI in Leopard server.

00:09:56.789 --> 00:10:02.789
Last year we showed you the Bonjour preference pane,
you go download to play with wide area Bonjour on Tiger.

00:10:02.789 --> 00:10:10.529
This year it's an official part of the Leopard
client user interface in the sharing panel.

00:10:10.529 --> 00:10:16.620
Another new thing this year which you may have seen and I'm
sure some of you have is the new Airport Extreme base station

00:10:16.620 --> 00:10:20.730
and I'm going to show you that in the demo at the end.

00:10:20.730 --> 00:10:25.370
The Airport Extreme base station
supports wide area Bonjour natively.

00:10:25.370 --> 00:10:34.350
So, in the Airport set-up, you can put in a host
name and credentials if you want to do secure update

00:10:34.350 --> 00:10:38.850
and now when you make manually port
mappings for devices in your home

00:10:38.850 --> 00:10:46.470
that don't do wide area Bonjour the airport extreme base
station will create wide area Bonjour dynamic updates

00:10:46.470 --> 00:10:48.860
automatically on their behalf.

00:10:48.860 --> 00:10:52.909
So those services are visible when
you browse with wide area Bonjour.

00:10:52.909 --> 00:10:58.929
Of course, all of you who saw the keynote on
Monday would have seen the other manifestation

00:10:58.929 --> 00:11:02.529
of wide area Bonjour which is under dot Mac.

00:11:02.529 --> 00:11:08.669
Back to my Mac is dot Macs name for their wide area
Bonjour service that they'll be providing for Leopard

00:11:08.669 --> 00:11:17.259
and because they know the user name and the password and
other details about what host names being assigned for you.

00:11:17.259 --> 00:11:19.399
They can simplify the set-up down to a single button.

00:11:19.399 --> 00:11:22.929
You click it and it says start and
it sets up everything you need to do

00:11:22.929 --> 00:11:27.309
to be doing dynamic DNS update and wide area Bonjour.

00:11:27.309 --> 00:11:32.599
Another new feature in Leopard is something we are
calling private DNS, which is where all the queries

00:11:32.600 --> 00:11:41.210
and responses are encrypted so that only authorized users
can do queries for your records and the data is protected

00:11:41.210 --> 00:11:44.610
from ease droppers snooping the packets in transit.

00:11:44.610 --> 00:11:51.060
This requires Leopard because it requires the
new code that knows how to do encrypted DNS.

00:11:51.059 --> 00:11:59.239
When we shipped Bonjour originally, Mac OS X 10.2, pretty
much the only language you would use was C. In 10.3

00:11:59.240 --> 00:12:04.289
and 10.4 we added java support and
on your developer seat last year

00:12:04.289 --> 00:12:10.360
at the conference we added Ruby as well and thank you.

00:12:10.360 --> 00:12:17.169
We listen to feedback and this year I am happy to tell
you that we've also added Python bindings for Bonjour

00:12:17.169 --> 00:12:22.399
and we are still interested in hearing
feedback for what to do after Leopard.

00:12:22.399 --> 00:12:29.379
Perl is one we hear, maybe there are other up and
coming languages that you would like to see supported

00:12:29.379 --> 00:12:34.250
and I remind everybody, this is an open source
project and we mean that in absolute sincerity.

00:12:34.250 --> 00:12:39.529
So, if other people have things they want to contribute
to us we're very happy to take them and in fact,

00:12:39.529 --> 00:12:45.480
that's true of both the ruby and the Python
findings were contributed by external developers.

00:12:47.519 --> 00:12:56.399
Another new thing we have in the Leopard API, we listen
to find back from developers and one comment they had

00:12:56.399 --> 00:13:02.419
about the way the Bonjour APIs works is that
every operation you do has a separate UNIX

00:13:02.419 --> 00:13:07.849
to main socket connection to the
daemon running in the background.

00:13:07.850 --> 00:13:09.830
And we did that for simplicity.

00:13:09.830 --> 00:13:16.060
It means that applications, plug ins, libraries all in the
same address page, can all do their own Bonjour operations

00:13:16.059 --> 00:13:20.229
and not interfere with each other, because
everyone talks independently to the daemon.

00:13:20.230 --> 00:13:27.149
And that was good for simplicity, but if you're creating
a piece of software that registers hundreds of services,

00:13:27.149 --> 00:13:31.019
then you can use up a lot of file
descriptors in your process that way.

00:13:31.019 --> 00:13:35.470
So we added a new mode that let's you
share a single connection to the daemon

00:13:35.470 --> 00:13:42.000
and multiplex multiple registrations, browsers calls,
resolves calls, whatever you want over a single connection.

00:13:43.769 --> 00:13:48.100
That gives a benefit of efficiency
if you're rendering lots of services.

00:13:48.100 --> 00:13:53.659
It gives a benefit of convenience, which
especially is helpful for the windows developers,

00:13:53.659 --> 00:14:01.649
because you only have one socket open and when data rides
on that socket you call DNS service processor results

00:14:01.649 --> 00:14:09.529
for that socket and that works out which of your call back
functions needs to be called and on the Mac with CF Run Loop

00:14:09.529 --> 00:14:15.639
and CF socket that was very easy, but we found out from
Windows developers that it's a little bit hard on Windows.

00:14:15.639 --> 00:14:18.110
They need to build their own house,
table, their own link and search it

00:14:18.110 --> 00:14:22.139
and work out which DNS service ref the service relates to.

00:14:22.139 --> 00:14:26.659
Not difficult programming, but just a little
bit of a burden, so we're glad to of fixed that.

00:14:26.659 --> 00:14:32.600
And the other implication of this is that the more coming
flag that tells you when it's time to update you're UI,

00:14:32.600 --> 00:14:37.420
you don't have to update the UI every time there's a
change because that would create a lot of flickering,

00:14:37.419 --> 00:14:40.979
but when there are no more events in
the queue, it's time to update the UI.

00:14:40.980 --> 00:14:45.430
When you have four separate browsers
going, the four are independent

00:14:45.429 --> 00:14:49.509
and if you're not careful you can
end up updating the UI four times.

00:14:49.509 --> 00:14:55.480
We now combined the more coming flag so that if
you've got multiple browsers over a single connection,

00:14:55.480 --> 00:14:59.820
the more coming flag is set as long as there
is any result coming on that connection.

00:14:59.820 --> 00:15:04.770
Only when there are no more results and aggregates
do you get call back with the more coming flag,

00:15:04.769 --> 00:15:10.149
not certain then you can update all
your UI at once and not have it flicker.

00:15:10.149 --> 00:15:12.789
So I'll talk through quickly how to use that.

00:15:12.789 --> 00:15:20.939
First you create a connection to the daemon and then
you copy that connection and then you do your operation

00:15:20.940 --> 00:15:25.760
with the copy, but passing this flag that
says share connection and that tells it

00:15:25.759 --> 00:15:29.450
to repurpose the existing connection
instead of opening a new one.

00:15:29.450 --> 00:15:33.460
And then we can copy it again and
then we can do another connection.

00:15:33.460 --> 00:15:41.480
Now, you'll see here, the same callback function is being
used for both browse calls, even though one is browsing

00:15:41.480 --> 00:15:46.580
for HTTP and one is browsing for
FTP, but the context is different.

00:15:46.580 --> 00:15:52.250
So when your callback is called you can have a pointer
to a structure or an object or some other reference

00:15:52.250 --> 00:15:55.559
that tells your callback function
what is going on and helps it

00:15:55.559 --> 00:16:00.969
to recover its state efficiently and do what it needs to do.

00:16:00.970 --> 00:16:04.310
Our other new API is NAT port mapping.

00:16:04.309 --> 00:16:09.509
This works with Apple base stations using the
NAT port protocol and it works with most UP

00:16:09.509 --> 00:16:16.009
and P base stations using the internet
gateway control protocol.

00:16:16.009 --> 00:16:19.319
You can take this today; you can
try this out on your Leopard seed.

00:16:19.320 --> 00:16:24.840
Type DNSD dash X and if you are behind a
Mac gateway it will talk to the Mac gateway

00:16:24.840 --> 00:16:28.250
and find out your public address and tell you.

00:16:28.250 --> 00:16:34.639
The CAPI is below and those of you that have done Bonjour
programming recognize that template as being very familiar.

00:16:34.639 --> 00:16:40.720
You pass the address to the service ref, which is
initialized, you pass flags, you pass a bunch of parameters

00:16:40.720 --> 00:16:44.320
and the last two are always the
callback function and the context,

00:16:44.320 --> 00:16:48.060
because like all the other Bonjour
calls this is an asynchronous call.

00:16:48.059 --> 00:16:53.619
We don't know how long it will take to talk to
the gateway, in fact you can start this operation

00:16:53.620 --> 00:16:56.450
when there is no cable connected to you machine.

00:16:56.450 --> 00:17:01.170
The operation will hang out there waiting for
something interesting to happen, you plug in the cable,

00:17:01.169 --> 00:17:04.659
your application gets a callback that
says, hey, this is the IP address.

00:17:04.660 --> 00:17:07.800
If it changes, you get a new callback,
telling the new IP address.

00:17:07.799 --> 00:17:13.819
So you don't have to pause, you do one call and then you
get notified of be events until you cancel that operation.

00:17:13.819 --> 00:17:21.750
This is the other form where we actually
specify some more parameters and this call says,

00:17:21.750 --> 00:17:30.950
we want to the map an incoming port mapping so we can
receive TCP connections on port AT and you see the result

00:17:30.950 --> 00:17:40.069
of that operation says, your private port AT has been mapped
to public ports 36296 on the publbic side of the Mac gateway

00:17:40.069 --> 00:17:48.970
and it has a TTL of 3600, which means, that mapping
will remain good for an hour and it's not your job

00:17:48.970 --> 00:17:50.940
to renew it, that's merely informational.

00:17:50.940 --> 00:17:58.539
The system service will keep renewing that
mapping for you until you cancel the operation.

00:17:58.539 --> 00:18:06.849
Now, just want to stress that API is exposed because certain
developers wanted it for specialized things like games.

00:18:06.849 --> 00:18:09.029
I don't want you all to think that you need to do this.

00:18:09.029 --> 00:18:14.049
If you advertise a service with wide area
Bonjour, we do all of this for you automatically.

00:18:14.049 --> 00:18:22.619
This is really just exposing the NAT mapping capability for
specialized programs that are not using wide area Bonjour.

00:18:22.619 --> 00:18:27.799
So now we'll come on to tips and reminders.

00:18:27.799 --> 00:18:32.240
I've talked before about the point of Bonjour
is not just technology for it's own sake,

00:18:32.240 --> 00:18:39.759
it's because of what it enables and USB is very popular
because of it's convenience, but it has limitations in terms

00:18:39.759 --> 00:18:46.460
of cable length and number devices and speed
and what Bonjour gives you is that ease of use

00:18:46.460 --> 00:18:51.450
without sacrificing the power of
flexibility of IP networking.

00:18:51.450 --> 00:18:58.080
Now, one of the other benefits of USB apart from
ease of use, is that it provides power on the cable

00:18:58.079 --> 00:19:03.119
and what's happened in recent years that I'm very
happy about is the power of ethernet has come

00:19:03.119 --> 00:19:05.799
down and become affordable for consumers.

00:19:05.799 --> 00:19:13.029
So this is the Netgear power ethernet hub that I use in
my house and this is another one of my favorite things

00:19:13.029 --> 00:19:17.000
which many of you've seen before, little Bonjour device.

00:19:17.000 --> 00:19:21.559
The reason I'm showing it again now is last year
you probably remember I joked that the power brick

00:19:21.559 --> 00:19:25.559
for this thing is bigger then the device itself and I
said it was just crying out for power over ethernet.

00:19:25.559 --> 00:19:30.889
Well the good news is they heard that message
and this year's model doesn't need a power brick

00:19:30.890 --> 00:19:32.509
It's powered off the ethernet cable.

00:19:32.509 --> 00:19:38.509
( Background noise )

00:19:38.509 --> 00:19:45.700
>> When you make Bonjour products you can license the
Bonjour logo at no cost and that's something you should do

00:19:45.700 --> 00:19:51.240
because when customers are looking for products that
are reliable and easy to use, that's what they look for.

00:19:51.240 --> 00:19:58.220
And there's no charge to do that, all you have
to do is run the conformist test to make sure

00:19:58.220 --> 00:20:04.569
that everything is implemented correctly and
even if you don't care a lot about the logo,

00:20:04.569 --> 00:20:10.359
running the conformist test is good thing to do any way
because it will help you find both bugs that you'll want

00:20:10.359 --> 00:20:14.119
to fix and help make your product better.

00:20:14.119 --> 00:20:21.089
Available today is a new release of the
conformist test Version 123, we fixed a few bugs.

00:20:21.089 --> 00:20:26.500
It now runs more reliably on multi-processors, we have
some bugs before about threading, those have been fixed

00:20:26.500 --> 00:20:30.950
and this is a fat binary that runs on an Intel and
PowerPC.

00:20:32.089 --> 00:20:35.859
Another thing you can license at
no cost, Bonjour for Windows.

00:20:35.859 --> 00:20:41.899
Downloadable from the Apple website or you can license
it to go on the CD on the box with your products.

00:20:41.900 --> 00:20:46.019
When the user runs the installer it adds a Bonjour plug

00:20:46.019 --> 00:20:51.460
in to the Internet Explorer tool
bar that works just like Safari.

00:20:51.460 --> 00:20:57.610
That was last year, this year if you want
your users, you can just run Safari on Windows

00:20:57.609 --> 00:21:05.859
with the same Bonjour discovery as OS X and increasingly
many of the customers will already have Safari installed,

00:21:05.859 --> 00:21:08.309
so in fact, they won't need to install anything.

00:21:08.309 --> 00:21:14.480
If you have a product like a printer or a camera or
something where its user interface is through a web page,

00:21:14.480 --> 00:21:19.110
then without installing anything the user
can just run Safari and Bonjour, find it,

00:21:19.109 --> 00:21:21.459
click it, connect to it and configure it.

00:21:21.460 --> 00:21:30.590
And Safari and Bonjour on Windows provides the same
wide area capabilities as on OS X and those of you

00:21:30.589 --> 00:21:36.490
who have looked here at the conference you will see there's
a couple conference pages being automatically advertised,

00:21:36.490 --> 00:21:39.900
using wide area Bonjour in your Safari bookmarks.

00:21:39.900 --> 00:21:47.420
This is on Tiger and on Leopard and those same bookmarks
will appear when you run Safari on Windows as well.

00:21:50.609 --> 00:21:58.369
If you make products that use Bonjour on Windows let
us know so we can add them to our Bonjour product list.

00:21:58.369 --> 00:22:02.669
We have a new release of Bonjour for Windows out today.

00:22:02.670 --> 00:22:09.940
What we've added is Vista support in the printer
set-up wizard, we've added support for 64-bit clients,

00:22:09.940 --> 00:22:16.799
fixed a few bugs and brought it up to feature parity with
the ten four nine version of Bonjour on the Macintosh.

00:22:16.799 --> 00:22:26.119
We are planning to make this GM very soon, so if you have
Bonjour applications, download 104 developer preview,

00:22:26.119 --> 00:22:31.849
give it a try, report bugs because there
isn't much time left and the sooner we find

00:22:31.849 --> 00:22:34.869
out about the bugs the better chance
that we will get them fixed before GM.

00:22:34.869 --> 00:22:39.589
There's a question in the front row, what is GM?

00:22:39.589 --> 00:22:44.689
GM is a piece of old Apple terminology from when we
used to make software on CD's and in the very early days

00:22:44.690 --> 00:22:50.390
of CD writers when the disks cost 20 dollars
each, there were these golden colors blank disks

00:22:50.390 --> 00:22:53.420
and we would make a golden master
and send it off to distribution.

00:22:53.420 --> 00:22:57.410
So that's the phrase that's remained at Apple.

00:22:59.039 --> 00:23:07.359
So people keep asking why we do Bonjour for Windows and
iTunes and Safari and why we working to make Windows better

00:23:07.359 --> 00:23:13.159
and journalist are starting to
realize what the real reason is.

00:23:13.160 --> 00:23:21.740
And this is great quote I just saw last week, the reason
we make things like Bonjour and Safari available is

00:23:21.740 --> 00:23:31.849
because we need a eco-system of reliable networking so that
we can all make great products that work in that eco-system

00:23:31.849 --> 00:23:40.349
and if we have a great foundation for networking where
products, software and hardware devices can work reliably,

00:23:40.349 --> 00:23:45.759
configure themselves, discover what else is on the
network, advertise their services on the network,

00:23:45.759 --> 00:23:49.410
then we all have opportunities to make successful products.

00:23:49.410 --> 00:23:52.940
If we exist in a world where nothing
works reliably on the network,

00:23:52.940 --> 00:23:55.370
then the opportunities for all of us is very limited.

00:23:55.369 --> 00:24:03.209
So, every piece of user who installs Safari is installing
Bonjour for Windows at the same time and that means

00:24:03.210 --> 00:24:12.039
that those same APIs that you have on Mac and Linux and Open
Solaris, you also have available increasingly on Windows

00:24:12.039 --> 00:24:17.500
and you can come to rely on those and use
those and write software that works just

00:24:17.500 --> 00:24:20.059
as reliably just on all those different platforms.

00:24:20.059 --> 00:24:27.079
So now we get into more of the tips.

00:24:27.079 --> 00:24:32.179
There really is no need when you make a hardware
product to put the ethernet address into the name.

00:24:32.180 --> 00:24:36.930
These are real printer names discovered
on our network at Apple.

00:24:36.930 --> 00:24:42.750
I just changed the company name because I don't
want to be picking on anybody in particular here.

00:24:42.750 --> 00:24:46.109
But this is very, very common that you see.

00:24:47.180 --> 00:24:53.900
I think the mistake is that people got this assumption
some how that it's necessary that the printers got to ship

00:24:53.900 --> 00:24:59.950
from the factories with the names already
globally unique and that's just a mistake,

00:24:59.950 --> 00:25:05.190
because multicast DNS has automatic name
conflict detention and resolution built in.

00:25:05.190 --> 00:25:10.650
You can ship two devices with the
same name and when they both appear

00:25:10.650 --> 00:25:13.090
on the network they will realize
they can't have the same name

00:25:13.089 --> 00:25:18.049
and one of them will automatically rename
by putting a number two on the end.

00:25:18.049 --> 00:25:25.730
So, I want to consider the three scenarios
and I hope you've seen all three of them

00:25:25.730 --> 00:25:31.110
that putting 12 hexadecimal characters on
the end isn't improving the user experience.

00:25:31.109 --> 00:25:32.490
One is a home user with one printer.

00:25:32.490 --> 00:25:34.799
Well clearly they only have one printer.

00:25:34.799 --> 00:25:41.659
They just need it to say, Canon
5700 or Epson whatever or HP 2800.

00:25:41.660 --> 00:25:44.220
They just want to see the name of the printer and select it.

00:25:44.220 --> 00:25:52.910
So, in that case having a bunch of ugly computery stuff
on the end isn't making a better experience for the user.

00:25:52.910 --> 00:25:54.370
The next scenario is two printers.

00:25:54.369 --> 00:25:57.599
Imagine a small dentist office, they have
a printer and then they buy another one.

00:25:57.599 --> 00:26:05.709
Well because of the way Bonjour works the second
printer will see that Canon 5700 and is already taken

00:26:05.710 --> 00:26:15.970
and so it will call itself Canon 5700 2 and that is
very intuitive to the users, because they had a printer

00:26:15.970 --> 00:26:21.059
and now they have a new one and the new one is
number 2 and that's seem very logical and natural.

00:26:21.059 --> 00:26:26.389
The third scenario is suppose you have a big company where
they got ten printers on the network that are all the same,

00:26:26.390 --> 00:26:30.660
well I would argue even in that case, having a big list

00:26:30.660 --> 00:26:35.750
of hexadecimal numbers is not memorable
at all to the human users.

00:26:35.750 --> 00:26:42.890
Having printer's numbered from 1 to 10 is better then
bunch of hex-decimal numbers, but even going beyond that.

00:26:42.890 --> 00:26:48.960
By the time you got that many printers, if you're the
administrator setting them up you really do a service

00:26:48.960 --> 00:26:53.779
to your users by going in where the web
browser, going to the configuration page

00:26:53.779 --> 00:26:58.319
and giving the printer a descriptive name
that says where it is or what it's purpose is

00:26:58.319 --> 00:27:01.240
or some other name than just factory default.

00:27:01.240 --> 00:27:07.789
So in all three of those scenarios having the big ugly
hexadecimal on the end really didn't help anybody.

00:27:07.789 --> 00:27:16.750
Related to that, after a conflict and a name change store
that name change persistently in non-volatile storage just

00:27:16.750 --> 00:27:22.450
as if the user had changed it through the web
interface, because the scenario I gave of printer

00:27:22.450 --> 00:27:26.319
and printer 2 is really most compelling
if the names are stable.

00:27:26.319 --> 00:27:30.369
If whichever printer is turned on first in the
morning is printer and the other one is printer 2,

00:27:30.369 --> 00:27:32.879
then the identities keep flipping and that's not good.

00:27:32.880 --> 00:27:38.710
So that's why once a conflict has been detected
and resolved, store the name persistently

00:27:38.710 --> 00:27:42.779
and that gives an experience that makes sense to the users.

00:27:43.930 --> 00:27:50.400
For client software, we've seen a few applications,
not too many thankfully, but we do see applications

00:27:50.400 --> 00:27:58.040
where they have a refresh button and one of the
big things we've worked hard to do in Bonjour is

00:27:58.039 --> 00:28:00.549
to make so that the display is always fresh.

00:28:00.549 --> 00:28:10.419
You don't have to refresh it because you're seeing reality
on the network and if you look at the Apple programs Safari,

00:28:10.420 --> 00:28:17.880
iChat, iTunes, we don't have a refresh
button because the list is always fresh.

00:28:18.950 --> 00:28:26.100
Another user interface thing, people like to use pull
down menus, but the difficulty with pull down menus is

00:28:26.099 --> 00:28:32.869
that the user interface paradigm people
expect is a static list of unchanging data.

00:28:32.869 --> 00:28:35.729
You pull down the font menus to look at the fonts.

00:28:35.730 --> 00:28:44.170
But the network is a dynamic changing environment and
trying to meet those two goals at the same time is hard.

00:28:44.170 --> 00:28:49.250
Windows containing lists are much
more amenable to dynamic updating.

00:28:49.250 --> 00:28:55.630
People are familiar with seeing a list of files in the
Finder and if you're doing an Xcode build same time.

00:28:55.630 --> 00:29:02.530
You see the files appear in the Finder as Xcode builds
them and that's a much more familiar thing then pulling

00:29:02.529 --> 00:29:07.309
down a menu and having it change while
you're trying to select something in it.

00:29:07.309 --> 00:29:10.769
Leopard does support dynamic menus, but it's
something you want to use very carefully

00:29:10.769 --> 00:29:13.329
because it's very easy to make
a bad user interface that way.

00:29:13.329 --> 00:29:19.559
So, we really recommend use lists and
windows rather then pull down menus.

00:29:19.559 --> 00:29:24.429
Go into browser mode and show the list,
pick something they dismiss the window.

00:29:27.410 --> 00:29:34.850
Another common bug we see is when browsing,
you get given add events and remove events

00:29:34.849 --> 00:29:40.569
and each add event is associated with the name
of the service that was discovered, the type,

00:29:40.569 --> 00:29:48.899
the domain and the interface on which it was discovered
and a lot of developers have ignored the interface index.

00:29:48.900 --> 00:29:51.430
So let me explain to you what can happen if you do that.

00:29:51.430 --> 00:29:59.029
First you do a browse call and let say
the computers got ethernet and airport.

00:29:59.029 --> 00:30:06.039
So you discover that a given service
is reachable by two different paths.

00:30:06.039 --> 00:30:08.629
So you get two different add events.

00:30:08.630 --> 00:30:14.830
Then the user turns airport off and the
airport instance is no longer available.

00:30:14.829 --> 00:30:17.579
So you get a remove event for that.

00:30:17.579 --> 00:30:24.019
If you then go and delete it from your user
interface, you now got an incorrect user interface

00:30:24.019 --> 00:30:26.809
because the service is still reachable over ethernet,

00:30:26.809 --> 00:30:30.210
but it's disappeared from the screen
and the user can't click on it.

00:30:30.210 --> 00:30:39.559
So, there are two solutions to that, when you get the
add remove events, store all the data, name type domain,

00:30:39.559 --> 00:30:46.339
interface and then when you go to remove event match
that up to find which instance is being removed.

00:30:46.339 --> 00:30:50.709
The four two name type domain interface index is unique.

00:30:50.710 --> 00:30:57.650
You'll get exactly one and only one remove
event paired with exactly one add event.

00:30:57.650 --> 00:31:00.480
So, that's an easy way to do it.

00:31:00.480 --> 00:31:07.069
If you are using some of the high level APIs that
don't expose the interface index, you can also do that,

00:31:07.069 --> 00:31:13.879
but then you have to reference camps, because you may
get two adds for the same name type domain and one remove

00:31:13.880 --> 00:31:18.800
and at that point, if you are reference counting properly
you'll recognize it's still a reference count one

00:31:18.799 --> 00:31:19.529
of that service.

00:31:19.529 --> 00:31:21.069
So you shouldn't delete it from the display.

00:31:21.069 --> 00:31:27.309
Either of those solutions will work fine, but do be
aware of that issue or you can have things disappear

00:31:27.309 --> 00:31:35.679
from the user interface and be
very frustrating for the users.

00:31:35.680 --> 00:31:42.430
So, when browsing, I said you get back name type and domain.

00:31:42.430 --> 00:31:49.310
Another mistake that we saw a few developers make is to
ignore the domain and back in the days of link local Bonjour

00:31:49.309 --> 00:31:54.740
when the domain was always local it
was always local so you could ignore it

00:31:54.740 --> 00:31:57.059
and then when you resolve you just press local.

00:31:57.059 --> 00:32:00.869
Now with wide area Bonjour you
can discover non local services

00:32:00.869 --> 00:32:04.049
where the domain is Apple dot com or something else.

00:32:04.049 --> 00:32:09.829
So if you try to resolve you have
to pass back the right domain.

00:32:09.829 --> 00:32:16.129
So the easiest thing to do is store same type domain
pass those same name type domains when you resolve.

00:32:16.130 --> 00:32:19.330
The interface index is actually optional when you resolve.

00:32:19.329 --> 00:32:20.869
If you don't specify the index.

00:32:20.869 --> 00:32:27.459
we will actually try all available interfaces, but
you definitely need to get the name type domain right.

00:32:29.609 --> 00:32:33.959
Another bug we've seen is ignoring the port number.

00:32:33.960 --> 00:32:39.120
When you resolve a service on Bonjour you don't just
get told the IP address where the service is reachable,

00:32:39.119 --> 00:32:44.019
you get told the port number and
in a world with NAT port mapping,

00:32:44.019 --> 00:32:47.879
we live in a world where pretty much
every home user is behind a NAT gateway.

00:32:47.880 --> 00:32:54.600
You can't assume services will be reachable on that standard
well known ports, because even if the web server is running

00:32:54.599 --> 00:33:00.219
on port 80, if you have 3 machines they can't all
have the same port 80 on the outside interface.

00:33:00.220 --> 00:33:04.279
So they will have three different port numbers.

00:33:04.279 --> 00:33:08.940
This is why Bonjour gives you the
port number when it resolves.

00:33:08.940 --> 00:33:13.269
We found a few applications that where the developer
didn't realize the importance of that and they ignored it

00:33:13.269 --> 00:33:17.299
and passed the well known port and then
they fail to connect when they are working

00:33:17.299 --> 00:33:21.859
with wide area Bonjour and NAT port mapping.

00:33:22.990 --> 00:33:28.259
So now I'm going to try to show
a few demos of this in action.

00:33:30.539 --> 00:33:34.609
So this nice little product I got last week from La Cie.

00:33:34.609 --> 00:33:40.659
Its a FireWire hard disk, probably
many of you have things like this.

00:33:40.660 --> 00:33:44.380
What's special about this is it's
also got giga ethernet on it.

00:33:44.380 --> 00:33:46.920
So you can just plug it into the network.

00:33:46.920 --> 00:33:50.509
So I'm going to do that right now
and we'll see what happens.

00:33:50.509 --> 00:34:08.489
( Background noise )

00:34:08.489 --> 00:34:14.589
>> So I, when I got this I thought, I'm
not going too make it to easy for the guys.

00:34:14.590 --> 00:34:21.000
I'm going to plug it straight into the ethernet
port on my computer so there's no DHCP server,

00:34:21.000 --> 00:34:26.469
let's see if they do the link local
address and get that right.

00:34:26.469 --> 00:34:30.049
It came in the box with a manual and a disk,
but I'm not going to bother with those.

00:34:30.050 --> 00:34:32.600
I'm just going to plug it in and see what happens.

00:34:37.360 --> 00:34:41.370
So, this thing is booting up now.

00:34:41.369 --> 00:34:43.670
I think it runs Linux.

00:34:43.670 --> 00:34:45.510
It will take a few seconds.

00:34:45.510 --> 00:34:53.450
( Background noise )

00:34:53.449 --> 00:34:59.319
>> The light is still blinking.

00:34:59.320 --> 00:35:07.030
So I was very pleased to find that it in fact it did
work without a DHCP server, it assigned itself an address

00:35:07.030 --> 00:35:21.100
and it advertised itself with Bonjour and I discovered it's
in Safari and when I double click it, it finds the host name

00:35:21.099 --> 00:35:29.769
and it connects and it's got this user
interface and that was how easy it was

00:35:29.769 --> 00:35:32.009
to plug it into the network and access it.

00:35:32.010 --> 00:35:36.580
So that's how you configure it in Safari.

00:35:36.579 --> 00:35:45.949
I had a look in Leopard in the side bar and under
shared computers where you saw Steve jobs show back

00:35:45.949 --> 00:35:53.309
to the Mac yesterday, this Lassie disk
advertises with Bonjour and shows up

00:35:53.309 --> 00:36:05.420
and you just click it and, okay
I'm not sure, okay there we go.

00:36:05.420 --> 00:36:09.950
Let's try that.

00:36:09.949 --> 00:36:17.969
So it's running an AFP server and I
copied some music onto it and I noticed

00:36:17.969 --> 00:36:24.459
in the web user interface it had
this thing where it said, media.

00:36:24.460 --> 00:36:26.389
I thought, that's interesting.

00:36:26.389 --> 00:36:39.809
So I ran iTunes and it advertises iTunes compatible
media server and it shows music on the network as well

00:36:39.809 --> 00:36:44.409
and it shows up in iTunes, it shows up in front row.

00:36:45.789 --> 00:36:54.009
When we started this Bonjour work all those years
ago, everybody thought it was about Macs and Windows

00:36:54.010 --> 00:37:00.590
and software applications and making
the media to use and it was about that.

00:37:00.590 --> 00:37:05.120
But it wasn't just about making the stuff
we did five years ago easier to use.

00:37:05.119 --> 00:37:14.710
What it was really about was making a whole new breed of
products available and we had this vision of home networks

00:37:14.710 --> 00:37:22.470
where clusters of devices just configured themselves
and discover what's available in their environment

00:37:22.469 --> 00:37:28.939
and advertise what services they are willing to offer
to the environment and all this configures seamlessly

00:37:28.940 --> 00:37:32.650
and this box I'm showing you now is
as it came out of the shrink wrap.

00:37:32.650 --> 00:37:40.030
I did not configure that or set anything up, I just plugged
in the power and plugged in the ethernet and if what we did

00:37:40.030 --> 00:37:47.260
with Bonjour in some small way helped make products
like that now become commercially viable and possible

00:37:47.260 --> 00:37:51.110
in today's world, then that's very rewarding.

00:37:51.110 --> 00:37:54.300
So this is the Lassie product.

00:37:55.369 --> 00:38:01.969
It's only fair that I show you an Apple product as well.

00:38:01.969 --> 00:38:08.949
This is the new Apple Airport Extreme
822.11 base station

00:38:08.949 --> 00:38:12.869
and this doesn't have a disk in it, but this has a USB port.

00:38:12.869 --> 00:38:21.509
So I can take just any old standard external USB hard drive.

00:38:21.510 --> 00:38:59.420
( Background noise )

00:38:59.420 --> 00:39:08.510
>> And I told you that if we look in airport utility.

00:39:08.510 --> 00:39:22.430
( Background )

00:39:22.429 --> 00:39:26.129
>> This thing is powering up.

00:39:26.130 --> 00:39:39.280
So then we discovered the base station and
if you, if you look under advance in Bonjour,

00:39:39.280 --> 00:39:46.650
this is where you can enter the
information for your dynamic DNS updates.

00:39:46.650 --> 00:39:52.900
Right now you can do that with your own server using the DNS
enabler products or by editing the configuration products

00:39:52.900 --> 00:39:57.700
by hand or with Leopard server you can set it up.

00:39:57.699 --> 00:40:03.989
Dot Mac is providing the back for my Mac service and
we're also talking to other dynamic DNS providers.

00:40:03.989 --> 00:40:10.569
Because wide area Bonjour is built on top of dynamic
DNS, it really isn't a radically new technology.

00:40:10.570 --> 00:40:13.070
It's just a new use of an existing technology.

00:40:13.070 --> 00:40:17.360
So we've been talking to TZO, which is
one of the biggest dynamic DNS providers

00:40:17.360 --> 00:40:22.329
and by the time Leopard ships they're planning
to be offering wide area Bonjour support.

00:40:22.329 --> 00:40:26.360
So for those of you who don't want to run your
own name server, they will run the name server

00:40:26.360 --> 00:40:30.380
for you give you wide area Bonjour capability.

00:40:30.380 --> 00:40:37.059
So you can put this information in here and when you make
manual port mappings it will do the wide area Bonjour

00:40:37.059 --> 00:40:43.509
updates on behalf of those things and if you connect.

00:40:43.510 --> 00:41:01.320
( Background noise )

00:41:01.320 --> 00:41:03.510
>> We'll see if that shows up.

00:41:03.510 --> 00:41:08.640
( Background noise )

00:41:08.639 --> 00:41:09.900
>> Something showed up in the sidebar.

00:41:09.900 --> 00:41:11.769
Let's see.

00:41:11.769 --> 00:41:13.309
There we go.

00:41:13.309 --> 00:41:21.659
So that USB disk that I connected to my Airport
Extreme is now showing up as just another shared volume

00:41:21.659 --> 00:41:30.129
in the side bar automatically discovered with Bonjour
and you can also back up to that using Time Machine.

00:41:30.130 --> 00:41:35.820
So rather than having a FireWire disk that you
carry around the house to your laptop and your iMac

00:41:35.820 --> 00:41:40.920
to backup you can just plug a USB2
disk into your Apple base station

00:41:40.920 --> 00:41:45.880
and Time Machine will automatically backup
all that over the network to your machines.

00:41:52.139 --> 00:41:56.940
So, I have one last thing.

00:41:56.940 --> 00:42:05.780
I always like to end with something
a bit more new and groundbreaking.

00:42:05.780 --> 00:42:17.340
Here are some things discovered with wide
area Bonjour and if I turn airport on.

00:42:17.340 --> 00:42:21.510
Let's see if I can.

00:42:21.510 --> 00:42:49.090
( Background noise )

00:42:49.090 --> 00:42:55.110
>> I think the wireless network here may
be a bit busy, but I can tell you about.

00:42:55.110 --> 00:43:01.789
I got a new thermostat at home which
has a web server built into it.

00:43:01.789 --> 00:43:02.509
So,

00:43:02.510 --> 00:43:12.420
( Background noise )

00:43:12.420 --> 00:43:18.840
>> So over the network I can see the
temperature in the various rooms in the house

00:43:18.840 --> 00:43:22.519
and with the right password even change them.

00:43:22.519 --> 00:43:25.480
I didn't have a password for a while.

00:43:25.480 --> 00:43:31.869
But the risk of thermal practical jokes in
the middle of the night seemed a bit too much.

00:43:31.869 --> 00:43:37.559
Now for me in my house dropping an ethernet
cable down to the thermostat wasn't a big deal.

00:43:37.559 --> 00:43:44.250
But in a lot of people's houses that's too much
of a burden to adopt in this kind of product.

00:43:44.250 --> 00:43:51.099
So wouldn't it be great if we could do that kind of thing
with wi-fi and classically complained about wi-fi is

00:43:51.099 --> 00:43:58.730
that it uses too much battery power and it's too expensive
and I'm very happy that the price of wi-fi been coming down

00:43:58.730 --> 00:44:01.510
and the efficiency is getting much, much better.

00:44:01.510 --> 00:44:07.040
( Background noise )

00:44:07.039 --> 00:44:19.369
>> So what I have here is a brand new prototype of a
new kids toy which is a little remote control tank,

00:44:19.369 --> 00:44:24.480
except it's not controlled by the
normal kind of analog remote control.

00:44:24.480 --> 00:44:26.510
This is wi-fi.

00:44:26.510 --> 00:44:39.610
( Background noise )

00:44:39.610 --> 00:44:45.510
>> Now this is a brand new prototype, so we'll have to see.

00:44:45.510 --> 00:45:06.720
( Background noise )

00:45:06.719 --> 00:45:08.689
>> It moved and then it stopped.

00:45:08.690 --> 00:45:09.510
I'm not sure.

00:45:09.510 --> 00:45:24.620
( Background noise )

00:45:24.619 --> 00:45:29.159
>> Yeah, there maybe too much wireless interference in
this room, but you can drive that around and control it,

00:45:29.159 --> 00:45:34.279
it also collision senses on the
corners and they transmit back

00:45:34.280 --> 00:45:37.760
so these green circles are indicated that collision status.

00:45:37.760 --> 00:45:43.700
So, I think this is a great development,
because this thing is running wi-fi,

00:45:43.699 --> 00:45:46.619
but taking about a tenth of the power of blue tooth.

00:45:46.619 --> 00:45:48.940
So you've got wi-fi capability.

00:45:48.940 --> 00:45:57.010
You can control this with your Mac or PC, your laptop
maybe even your iPhone, anything that's got wi-fi on it

00:45:57.010 --> 00:46:03.030
and that opens up the possibilities
for so many home products

00:46:03.030 --> 00:46:08.860
that now instead of doing proprietary wireless communications
technologies could be using standard wi-fi and all talking

00:46:08.860 --> 00:46:10.000
to each other.

00:46:10.000 --> 00:46:11.889
So with that, I think we're running out of time.

00:46:11.889 --> 00:46:12.480
Time to wrap up.

00:46:12.480 --> 00:46:17.969
Want to leave a bit of time for Q and
A. If we could go back to the slides.

00:46:24.719 --> 00:46:34.399
So to recap, Bonjour is very easy to adopt, makes your
products not just easy to use, but reliable and robust

00:46:34.400 --> 00:46:37.139
and it's all open source and it's
under the Apache two license

00:46:37.139 --> 00:46:43.119
You can get more information on the
developer at apple dot com website

00:46:43.119 --> 00:46:48.529
at slash Bonjour or externally at zero com dot organize.

00:46:48.530 --> 00:46:55.090
If you are looking for a little light reading on the
airplane back, this the O'Reilly book is a 250 pages,

00:46:55.090 --> 00:46:57.590
thin enough you can read it in a couple of hours.