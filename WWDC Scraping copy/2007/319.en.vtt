WEBVTT

00:00:15.339 --> 00:00:16.870
>> Good morning everyone.

00:00:16.870 --> 00:00:18.480
I'm Chris Pavicich.

00:00:18.480 --> 00:00:22.820
Joining me on stage today will be Matt Gamble.

00:00:22.820 --> 00:00:25.530
We're both interface builder engineers
and we're gonna talk to you

00:00:25.530 --> 00:00:29.980
about creating custom plug ins
for Interface Builder 3 today.

00:00:29.980 --> 00:00:32.859
I apologize if I'm a little hoarse.

00:00:32.859 --> 00:00:37.920
I've got a bit of a sore throat, so bear with me please.

00:00:37.920 --> 00:00:41.960
So how many of you, show of hands, were at the introduction

00:00:41.960 --> 00:00:47.450
to Interface Builder this week or
you've used Interface Builder before?

00:00:47.450 --> 00:00:48.859
All right, almost everyone.

00:00:48.859 --> 00:00:53.979
Super. So really quick agenda of
what we're gonna go over today.

00:00:53.979 --> 00:00:56.199
We're gonna talk about Interface Builder.

00:00:56.200 --> 00:01:04.409
Interface Builder Kit, the framework responsible for
doing all the heavy lifting for Interface Builder.

00:01:04.409 --> 00:01:07.810
We're gonna talk about the architecture
of Interface Builder plug ins.

00:01:07.810 --> 00:01:16.230
And we're gonna, Matt and I are gonna walk you through
building an Interface Builder Plug Ins step by step.

00:01:16.230 --> 00:01:19.200
So who is this talk primarily focused at?

00:01:19.200 --> 00:01:28.700
It's primarily directed towards those of you
developing custom views or controls for OS X.

00:01:28.700 --> 00:01:32.640
That wanna package them up and
integrate them into Interface Builder 3.

00:01:32.640 --> 00:01:40.870
The talk's a little bit out of scope for folks who maybe
have written one custom view or one custom control.

00:01:40.870 --> 00:01:48.750
And you're using it internally on only project via, the
whole point of writing IB plug ins is to promote reuse.

00:01:48.750 --> 00:01:51.329
So there you go.

00:01:51.329 --> 00:01:54.730
This might not be for you if you've
just written one custom view.

00:01:54.730 --> 00:02:02.189
But if you're doing a bunch of custom view work, we think
it's something you're gonna wanna look into further.

00:02:02.189 --> 00:02:03.780
So, let's get started.

00:02:03.780 --> 00:02:05.579
What's Interface Builder?

00:02:05.579 --> 00:02:10.430
Interface Builders are graphical design and development tool.

00:02:10.430 --> 00:02:18.140
It's filled with all of the shipping on the system
controls, preconfigured in the Interface Builder library.

00:02:18.139 --> 00:02:23.839
Uses real objects from start to finish, so what we're
gonna see when we do our integration today is a view Matt

00:02:23.840 --> 00:02:32.780
and I will be integrating is, is a real view and it,
we're not faking things up with graphics and images.

00:02:32.780 --> 00:02:35.360
It's just really the real view we'll be integrating.

00:02:35.360 --> 00:02:40.310
It's primarily focused towards designers and engineers.

00:02:40.310 --> 00:02:46.920
And it separates, it promotes a strong
separation of the bottle view controller.

00:02:46.919 --> 00:02:51.169
So great, that's IB.

00:02:52.539 --> 00:02:54.789
So Interface Builder kit.

00:02:54.789 --> 00:02:59.079
It's a new framework shipping in
developer library frameworks.

00:02:59.080 --> 00:03:03.280
And it's the public API for Interface Builder.

00:03:03.280 --> 00:03:10.509
There are three classes it exposed for you guys to subclass.

00:03:10.509 --> 00:03:14.579
Those are IBDocument, IBInspector and IBPlugin.

00:03:14.580 --> 00:03:18.520
We're really not gonna talk about IBDocument
today, but we are gonna focus quite a bit

00:03:18.520 --> 00:03:23.370
on the IBInspector and IBPlugin classes.

00:03:23.370 --> 00:03:28.420
The other thing you'll find in the Interface
Builder Kit framework, in the public headers,

00:03:28.419 --> 00:03:33.689
are two files filled with category
methods declared on object and view.

00:03:33.689 --> 00:03:39.819
And these are the API you're gonna be
implementing as categories on your view or object.

00:03:39.819 --> 00:03:46.859
There's also a file full of geometry utilities, so
if you need to do any sort of view geometry math,

00:03:46.860 --> 00:03:49.450
there's utility functions in there for you guys to use.

00:03:49.449 --> 00:03:53.239
And the important thing to remember
is that this framework is installed

00:03:53.240 --> 00:03:57.760
in developer library frameworks,
not system library frameworks.

00:03:57.759 --> 00:04:02.569
So, that's the Interface Builder Kit.

00:04:02.569 --> 00:04:05.919
Let's talk about Interface Builder Plug ins.

00:04:05.919 --> 00:04:12.280
Plug ins in IB3 replace Interface Builder 2x palettes.

00:04:12.280 --> 00:04:13.319
They're simple bundles.

00:04:13.319 --> 00:04:17.909
If you've worked with Cocoa for a while
you'll probably be familiar with bundles.

00:04:17.910 --> 00:04:21.230
There are three ways to get you plug in loaded into IB.

00:04:21.230 --> 00:04:22.950
Via Xcode.

00:04:22.949 --> 00:04:27.329
If you build and run the default
Interface Builder template project,

00:04:27.329 --> 00:04:32.639
it'll automatically launch, build
your plug in and load it into IB3.

00:04:32.639 --> 00:04:40.189
There's a preference pane that you can set up plug
ins to be loaded every time Interface Builder launches

00:04:40.189 --> 00:04:42.730
or you can double click any IB plug in in the finder

00:04:42.730 --> 00:04:47.430
and it will automatically launch
and load Interface Builder for you.

00:04:47.430 --> 00:04:53.150
So why would you wanna write an IB plug in?

00:04:53.149 --> 00:05:00.089
The first thing that you're gonna get from
integrating your view or control directly

00:05:00.089 --> 00:05:04.909
into Interface Builder is what
you see is what you get editing.

00:05:04.910 --> 00:05:08.439
You're gonna get a lot of reuse out of this as well.

00:05:08.439 --> 00:05:10.279
You're gonna have to write less code.

00:05:10.279 --> 00:05:17.269
And you're gonna be able to piggyback on the localization
support we've worked pretty hard on in Interface Builder 3.

00:05:17.269 --> 00:05:23.099
So let's talk about those three
points in a little bit further depth.

00:05:23.100 --> 00:05:28.629
While Matt and I were working on this presentation over
the past couple of weeks, we wanted to come up with a view

00:05:28.629 --> 00:05:31.909
to show you guys on stage that we were gonna integrate.

00:05:31.910 --> 00:05:35.180
And so we came up with this simple shape view.

00:05:35.180 --> 00:05:38.740
It draws closed polygons and it's pretty nice.

00:05:38.740 --> 00:05:45.840
So we wrote a bunch of demo applications and while
we were working with the new view we'd written,

00:05:45.839 --> 00:05:52.919
but before we'd integrated it in Interface
Builder, Matt sent me a nib he'd been working on.

00:05:52.920 --> 00:05:58.720
And when I first loaded it up, I got
this, which is a sea of blue custom views.

00:05:58.720 --> 00:06:02.100
These are all actually the shape
view that we'll be integrating,

00:06:02.100 --> 00:06:07.280
but it's a little bit confusing
as to what's what in this nib.

00:06:08.420 --> 00:06:15.740
The other thing you'll notice is that there's, I've got the
inspector open there and there's no inspector for the view.

00:06:15.740 --> 00:06:24.129
So there's no configuration I can do
to the view that Matt me in IB, yet.

00:06:24.129 --> 00:06:28.209
So great Matt, you sent me a sea of blue squares.

00:06:28.209 --> 00:06:32.839
Thanks a lot, this will be really useful whew.

00:06:32.839 --> 00:06:36.799
Not the best day being a developer at Apple ever.

00:06:36.800 --> 00:06:44.189
So Matt realized the error of his ways and
he sent me the plug in for the shape view.

00:06:44.189 --> 00:06:51.500
And low and behold, I did load the plug in, I did reload the
view and it turns out Matt being the total sweetheart he is,

00:06:51.500 --> 00:06:57.569
had drawn me this beautiful picture
of a sunny day and my house.

00:06:57.569 --> 00:07:05.279
I'm not sure why I have a fire burning on such a sunny
day without snow, but, we'll go with it, thanks Matt.

00:07:05.279 --> 00:07:07.019
It's gorgeous.

00:07:07.019 --> 00:07:09.199
You'll see that the other thing
that I got when I loaded Matt's plug

00:07:09.199 --> 00:07:16.079
in was an inspector that'll let me configure any one of
these shape views that make up this gorgeous picture.

00:07:16.079 --> 00:07:24.569
So great. As I said, we worked with this view for
quite a while before we actually wrote our plug in.

00:07:24.569 --> 00:07:28.939
And we ended up writing a lot of code that looks like this.

00:07:28.939 --> 00:07:33.379
It's an awake from nib method and we're
initializing one of our shape views

00:07:33.379 --> 00:07:37.459
and setting it up and setting fill colors and position.

00:07:37.459 --> 00:07:40.459
And great, it's pretty simple code.

00:07:40.459 --> 00:07:50.049
But it was scattered all throughout our project and working
with things in code while it's fine is not nearly as nice

00:07:50.050 --> 00:07:56.270
as dragging things around in IB and
resizing them and playing with inspectors.

00:07:56.269 --> 00:08:02.240
So after we got our integration done,
my awake from nib method went to this.

00:08:02.240 --> 00:08:04.920
Zero lines of code, why?

00:08:04.920 --> 00:08:08.750
Because I'm doing all of my configuration
in Interface Builder.

00:08:08.750 --> 00:08:18.569
So comparing the two, this one to that one, show of
hands, who thinks this second one is, has fewer bugs?

00:08:18.569 --> 00:08:21.409
Yeah, we thought so too.

00:08:21.410 --> 00:08:27.030
All right so the third reason to integrate you
control into Interface Builder 3 via plug in is

00:08:27.029 --> 00:08:29.669
that you can piggy back on our localization support.

00:08:29.670 --> 00:08:36.300
Of course if you guys are shipping apps, and
hopefully you all are, and you've got your great views

00:08:36.299 --> 00:08:44.319
and controls you've written, you don't want that just to
be targeted towards one market, towards English speakers

00:08:44.320 --> 00:08:47.820
or Finnish speakers or whoever it might be.

00:08:47.820 --> 00:08:52.570
You want it to reach as broad an audience as possible.

00:08:52.570 --> 00:08:57.660
And we've spent a lot of time working on localization
in the newest version of Interface Builder.

00:08:57.659 --> 00:09:00.079
So really streamlined and automated process.

00:09:00.080 --> 00:09:03.370
There's a bunch of new APIs available.

00:09:03.370 --> 00:09:07.560
Unfortunately, it's a little bit beyond the
scope of this talk today to talk about it.

00:09:07.559 --> 00:09:12.569
So I'm gonna suggest for those of you who are interested
in localization and hopefully it should be all of you,

00:09:12.570 --> 00:09:14.930
that you consult the developer documentation.

00:09:14.929 --> 00:09:16.189
We've got a great tech writer.

00:09:16.190 --> 00:09:22.670
He's done a great job on putting the docs together
for this, so they're out there, please use them.

00:09:24.649 --> 00:09:30.389
So as I mentioned before, IB plug
ins are just simple bundles.

00:09:30.389 --> 00:09:36.429
They're bundles that act as bridges
between interface builder and your code.

00:09:36.429 --> 00:09:38.309
How do we bridge the gap?

00:09:38.309 --> 00:09:46.299
We bridge the gap by linking against Interface
Builder Kit and by linking against in our case

00:09:46.299 --> 00:09:49.000
for Matt and I today, our shape view framework.

00:09:49.000 --> 00:09:53.990
Our shape view framework happens to have
all the code for our custom shape view.

00:09:53.990 --> 00:10:02.360
And there are a bunch of files in the Interface Builder plug
in template project that you're gonna have to deal with.

00:10:02.360 --> 00:10:04.620
Writing a plug in doesn't involve writing a lot of code.

00:10:04.620 --> 00:10:08.240
In fact it requires writing very little code.

00:10:08.240 --> 00:10:12.399
But let's take a walk through and
see what files you'll have to touch

00:10:12.399 --> 00:10:19.799
in that template project to get your plug in up and running.

00:10:19.799 --> 00:10:23.809
The first thing you're gonna need
to do is subclass IB plug in.

00:10:23.809 --> 00:10:31.849
The IB plug in subclass you're gonna write is gonna be
responsible for doing any set up and tear down necessary

00:10:31.850 --> 00:10:35.350
for your plug in to work correctly
when it's loaded by Interface Builder.

00:10:35.350 --> 00:10:39.040
For the most part, you won't actually
have to do any set up and tear down.

00:10:39.039 --> 00:10:45.669
But if you need to, there's hooks there for to
be called when your plug in loads and unloads.

00:10:45.669 --> 00:10:52.929
It provides a list of library nibs to Interface
Builder to be loaded so that your content,

00:10:52.929 --> 00:10:56.500
your custom view or control ends up in the library.

00:10:56.500 --> 00:11:01.179
There's also one method you pretty much
have to override or should override,

00:11:01.179 --> 00:11:05.449
strongly suggested that you override
that sets the label in the library.

00:11:05.450 --> 00:11:14.500
The next thing you're gonna find in
the template project is a library nib.

00:11:14.500 --> 00:11:22.500
We actually use Interface Builder to build Interface Builder
so one of the things you're gonna have to configure is a nib

00:11:22.500 --> 00:11:27.679
with the content you want integrated into
Interface Builder 3 and it's a pretty simple process

00:11:27.679 --> 00:11:29.739
and we're gonna run through it in the first demo.

00:11:29.740 --> 00:11:36.220
So this nib just contains the views and controls
that you're gonna wanna put into the library.

00:11:36.220 --> 00:11:43.240
Then these next three files I'm gonna talk about are each
per view or control that you're gonna be integrating

00:11:43.240 --> 00:11:48.680
So every view or control needs an inspector.

00:11:48.679 --> 00:11:59.849
And this is the view loaded into the attribute
inspector stack that allows you to configure your view.

00:11:59.850 --> 00:12:04.379
And what shows up in the inspector
stack is based on document selection.

00:12:04.379 --> 00:12:11.750
So when your view or control is selected in the
design surface, it's gonna ask your view, hey,

00:12:11.750 --> 00:12:17.570
do you have an attribute inspector that you'd like to
contribute to the stack so that you can be configured?

00:12:20.029 --> 00:12:22.379
The next file you'll find is an integration file.

00:12:22.379 --> 00:12:26.230
This is the bridge between your class and Interface Builder.

00:12:26.230 --> 00:12:29.649
And I mentioned a bunch of category methods earlier.

00:12:29.649 --> 00:12:34.480
Those category methods are gonna be
the API you're going to implement

00:12:34.480 --> 00:12:38.659
to get your view correctly talking with Interface Builder.

00:12:38.659 --> 00:12:42.169
And that API is defined in the Interface Builder Kit.

00:12:42.169 --> 00:12:46.689
And the last thing is a class description file

00:12:46.690 --> 00:12:53.470
Class description file is a pretty simple plist,
listing the class name for your view, its super class,

00:12:53.470 --> 00:13:00.930
so who is it inheriting from and
a list of its actions and outlets.

00:13:00.929 --> 00:13:03.289
So how do we build a plug in?

00:13:03.289 --> 00:13:04.759
It's a pretty simple process.

00:13:04.759 --> 00:13:07.080
And we're gonna start walking you through it.

00:13:07.080 --> 00:13:08.320
we're gonna go in three steps today.

00:13:08.320 --> 00:13:13.060
The first demo we're gonna do is building the library nib

00:13:13.059 --> 00:13:18.849
and the very rudimental plug in
just to get things off the ground.

00:13:18.850 --> 00:13:23.170
We're gonna talk about building an inspector for your view.

00:13:23.169 --> 00:13:31.769
And we're gonna talk about polishing off your plug in
and adding the finishing touches and getting your plug

00:13:31.769 --> 00:13:36.750
in content to look as good as or better than ours does.

00:13:36.750 --> 00:13:46.110
So let's start off with getting your
view integrated into the library.

00:13:46.110 --> 00:13:52.669
What you see on screen here on the left
is the library nib for this shape view

00:13:52.669 --> 00:13:54.870
that Matt and I will be integrating today.

00:13:54.870 --> 00:13:58.600
And I wanna talk about the parts of this for just a second.

00:13:58.600 --> 00:14:04.519
We've got the white square, it might be a
little hard to see, no you can see it okay.

00:14:04.519 --> 00:14:05.949
Is a library template object.

00:14:05.950 --> 00:14:11.560
For every view you're gonna be integrating, you're
gonna use one of these library template objects.

00:14:11.559 --> 00:14:15.589
And inside of it or I'm sorry.

00:14:15.590 --> 00:14:19.940
The library template object is
what the library knows how to load.

00:14:19.940 --> 00:14:26.060
Inside of that library template object is another
view generally the view you're integrating.

00:14:26.059 --> 00:14:30.199
The custom class of this view here is set to our shape view.

00:14:30.200 --> 00:14:34.670
So it's drawing a nice pentagon is five sides, yes?

00:14:34.669 --> 00:14:37.539
My team is nodding yes, that is in fact a pentagon.

00:14:37.539 --> 00:14:41.009
So you can see that we've got a
pentagon loaded in our library nib.

00:14:41.009 --> 00:14:43.659
And that's what shows up in the library.

00:14:43.659 --> 00:14:46.919
As I mentioned earlier, Interface
Builder works with real objects.

00:14:46.919 --> 00:14:53.919
So the real objects you're configuring in the library
nib are the same real objects that show in the library

00:14:53.919 --> 00:14:58.429
and they're the same real objects that
you'll drag to your design surface.

00:15:00.360 --> 00:15:10.769
So this is the library template nib you get by default
when you open up the template project from XCode.

00:15:10.769 --> 00:15:13.970
And we think we've done a nice thing here.

00:15:13.970 --> 00:15:20.550
And there's an example view at the bottom that's
actually how button is integrated into the library.

00:15:20.549 --> 00:15:23.379
And there are tool tips set on all of these views.

00:15:23.379 --> 00:15:30.820
So if you start working on your plug in and you get lost
or confused when you're configuring your library nib,

00:15:30.820 --> 00:15:33.510
hover your mouse over any of these views.

00:15:33.509 --> 00:15:40.169
Wait for the tool tip to pop up and you'll get a
really, really long and verbose description of what

00:15:40.169 --> 00:15:44.589
that view represents and what you should be doing with it.

00:15:44.590 --> 00:15:50.310
So in our demo today we're actually
not gonna use any of that example code.

00:15:50.309 --> 00:15:56.949
We're just gonna work with the one
library template object that we have left.

00:15:56.950 --> 00:16:01.640
And we're gonna select the view in the
center that will appear in the library.

00:16:01.639 --> 00:16:03.539
We're gonna bring up the identity inspector.

00:16:03.539 --> 00:16:07.419
And we're gonna set its custom class to shape view.

00:16:07.419 --> 00:16:11.610
And at that point, we're gonna be done.

00:16:11.610 --> 00:16:14.820
One thing I wanna emphasize about building plug ins

00:16:14.820 --> 00:16:21.680
for the new Interface Builder is that
it's very much a, an opt in model.

00:16:21.679 --> 00:16:29.139
You can do as little or as much of what John and I are,
or what Matt and I are gonna show you on stage today.

00:16:29.139 --> 00:16:29.750
Sorry Matt.

00:16:29.750 --> 00:16:33.490
Hello John.

00:16:33.490 --> 00:16:39.029
So at each of those points where we think you could
quit, we're gonna try to remember to give a shout

00:16:39.029 --> 00:16:42.649
out today and say like, hey, you could stop here.

00:16:42.649 --> 00:16:48.209
For instance, after my first demo, if you only had one
view you wanted to integrate, and you really didn't care

00:16:48.210 --> 00:16:55.910
about building an inspector, you could stop after
what I'm about to show you and you'd be good to go.

00:16:55.909 --> 00:17:03.299
Of course, we think you should go through the entire
process and leverage as much of the API as we've given you.

00:17:03.299 --> 00:17:05.509
But you don't have to.

00:17:05.509 --> 00:17:09.509
( Period of silence )

00:17:09.509 --> 00:17:20.029
So I wanna start off showing you today where you're going
to find the sample project for Interface Builder Plug Ins.

00:17:20.029 --> 00:17:28.059
So I'm gonna fire up Xcode, the new project assistant
is up, and you see there's an Interface Builder Plug in

00:17:28.059 --> 00:17:32.369
Project Template available for your use.

00:17:32.369 --> 00:17:40.269
In the interest of not walking you
through a lot of boring set up today,

00:17:40.269 --> 00:17:52.349
we've actually got a template project already
configured, so I'm gonna go ahead and work with that one.

00:17:52.349 --> 00:17:52.539
( Period of silence )

00:17:52.539 --> 00:17:57.210
So I mentioned earlier, plug ins are bundles.

00:17:57.210 --> 00:18:03.210
The one thing that every bundle on the
system has to have is a unique identifier.

00:18:03.210 --> 00:18:08.690
So the first thing I'm gonna configure,
so I'm gonna just close the targets.

00:18:08.690 --> 00:18:13.549
Select my plug in target, bring up the inspector.

00:18:13.549 --> 00:18:17.269
( Period of silence )

00:18:17.269 --> 00:18:22.000
And I'm gonna give it a unique identifier.

00:18:22.000 --> 00:18:27.910
There's a default one provided, but things will get
mighty confusing for your users if you use the default one

00:18:27.910 --> 00:18:32.509
and they're also loading plug in
code that that developer decided

00:18:32.509 --> 00:18:41.400
to use the default plug in identifier
as well, so set your own.

00:18:41.400 --> 00:18:48.700
And the next thing I'm going to do
is open up the library template nib,

00:18:48.700 --> 00:18:52.680
double clicking that in Xcode should
automatically launch it in Interface Builder.

00:18:52.680 --> 00:18:56.220
And as I said earlier, I'm gonna
whack all this example code.

00:18:56.220 --> 00:18:57.970
Let me show you the tool tips first.

00:18:57.970 --> 00:19:01.549
There you go.

00:19:01.549 --> 00:19:03.019
So this is all explained.

00:19:03.019 --> 00:19:07.129
( Period of silence )

00:19:07.130 --> 00:19:11.280
Selecting things is hard when you're on stage.

00:19:11.279 --> 00:19:17.049
So as I mentioned earlier, there's my library template
object, there's the custom view in the center.

00:19:17.049 --> 00:19:22.919
I'm gonna bring up the identity inspector and
I'm gonna set the class of this to MC Shape view.

00:19:22.920 --> 00:19:27.019
The view that Matt and I are gonna be integrating today.

00:19:27.019 --> 00:19:30.559
And low and behold, I'm gonna save this.

00:19:30.559 --> 00:19:32.789
And we're done.

00:19:34.009 --> 00:19:36.809
That was pretty simple.

00:19:36.809 --> 00:19:42.329
The other file I mentioned that you had to have per
view that you're integrating is a class description

00:19:42.329 --> 00:19:47.509
and I have a class description already
configured here for our shape view.

00:19:47.509 --> 00:19:49.279
Our shape view inherits from NS View.

00:19:49.279 --> 00:19:53.129
And it's about the simplest view you
could integrate into Interface Builder

00:19:53.130 --> 00:19:56.710
because it doesn't have any actions
and it doesn't have any outlets.

00:19:56.710 --> 00:20:02.279
So I'm gonna go ahead and build and run this project.

00:20:02.279 --> 00:20:09.190
We've done a, a nice thing which is set up build
and run in the template project to go ahead

00:20:09.190 --> 00:20:15.890
and launch Interface Builder and preload your plug in.

00:20:15.890 --> 00:20:20.320
So there's our shapes plug in, here's my shape view.

00:20:20.319 --> 00:20:24.769
I'm gonna go ahead and drag it out onto this window.

00:20:24.769 --> 00:20:27.389
And I'll duplicate it a bunch of times.

00:20:27.390 --> 00:20:30.420
I'm a really big fan of triangles.

00:20:33.150 --> 00:20:37.910
So super, that took me 45 seconds?

00:20:37.910 --> 00:20:40.750
And my view is integrated.

00:20:40.750 --> 00:20:45.289
One problem with this though is, thank you.

00:20:45.289 --> 00:20:45.720
( Applause )

00:20:45.720 --> 00:20:47.390
All right.

00:20:47.390 --> 00:20:49.810
( applause )

00:20:49.809 --> 00:20:51.230
So this is all well and good.

00:20:51.230 --> 00:20:55.099
I've now got a bunch of triangles I
can pull off the library and swell.

00:20:55.099 --> 00:21:00.159
I can save this document, as long as I ship
the plug in to any of my friends who wanna work

00:21:00.160 --> 00:21:03.100
with the shape view, things are gonna work out great.

00:21:03.099 --> 00:21:11.169
But there's one nagging issue here is I don't want these
all to be triangles and I don't want them all to be white.

00:21:11.170 --> 00:21:14.890
Well, how do we configure things in Interface Builder?

00:21:14.890 --> 00:21:20.740
We do it with the attribute inspector and I don't have one.

00:21:20.740 --> 00:21:26.500
Huh. That's gonna be pretty hard to configure these things.

00:21:26.500 --> 00:21:29.910
we're gonna have to write a lot of code.

00:21:29.910 --> 00:21:32.610
That's less than positive.

00:21:32.609 --> 00:21:41.449
Huh. All right, well luckily that's
the next section of our talk is talking

00:21:41.450 --> 00:21:45.900
about how you write Interface Builder inspectors.

00:21:45.900 --> 00:21:50.980
So I'm gonna go ahead and save this file
that I've created so Matt can use it later.

00:21:50.980 --> 00:21:56.400
And if we can go back to the slides, please.

00:21:56.400 --> 00:22:00.560
I'm gonna recap what I just told you guys.

00:22:00.559 --> 00:22:05.679
So first thing you have to remember
is to link the right frameworks.

00:22:05.680 --> 00:22:12.320
Our sample code linked against our shape
view framework and the Interface Builder Kit.

00:22:12.319 --> 00:22:17.919
We had the set up the bundle identifier
to make sure it was unique, done.

00:22:17.920 --> 00:22:21.430
Set the label and the demo gods are not with today.

00:22:21.430 --> 00:22:23.529
That was in the script and I forgot to show it to you.

00:22:23.529 --> 00:22:25.230
Bad, bad, bad.

00:22:25.230 --> 00:22:29.940
And the last thing that we walked through
was configuring the library template

00:22:29.940 --> 00:22:34.480
where I set the custom class of
the view appearing in the library.

00:22:34.480 --> 00:22:40.289
So I'm gonna hand things off to Matt now and
he's gonna talk about building inspectors.

00:22:40.289 --> 00:22:41.279
( Applause )

00:22:41.279 --> 00:22:43.269
>> Good job, man.

00:22:45.519 --> 00:22:46.769
>> Good luck.

00:22:46.769 --> 00:22:49.109
( Applause )

00:22:49.109 --> 00:22:51.709
>> So thank you Chris.

00:22:51.710 --> 00:22:56.579
So we were able to get our custom view
into the Interface Builder library.

00:22:56.579 --> 00:23:03.250
But as Chris showed you, we weren't actually able to
change any of the attributes that are specific to our view.

00:23:03.250 --> 00:23:07.059
So for that we're gonna need an inspector.

00:23:07.059 --> 00:23:12.480
So here you see our inspector that we're
gonna be integrating for our shape view today.

00:23:12.480 --> 00:23:18.089
Now for those of you who have worked with Interface
Builder this week and it seemed like it was a lot of you,

00:23:18.089 --> 00:23:24.990
you've seen that Interface Builder inspectors are
divided into slices where each slice is corresponding

00:23:24.990 --> 00:23:28.980
to a class in the inspected object's hierarchy.

00:23:28.980 --> 00:23:35.990
Well that makes our job easier because all we need to do
is add the attributes that are specific to our custom view.

00:23:35.990 --> 00:23:42.870
Now an inspector in Interface Builder
is composed of two main parts.

00:23:42.869 --> 00:23:45.759
The first part is actual inspector view.

00:23:45.759 --> 00:23:50.259
Now this is the view with the controls
that'll be synchronized to the custom view

00:23:50.259 --> 00:23:55.490
and this is the view that shows
up in the IB inspector stack.

00:23:55.490 --> 00:24:00.569
The second part is a custom subclass
of the IB inspector class.

00:24:00.569 --> 00:24:06.079
And this is the class that will act as
the controller for our inspector view.

00:24:06.079 --> 00:24:11.049
Now we won't actually be making too many
changes to the code of this class today.

00:24:11.049 --> 00:24:17.309
But depending how you were integrating your view, you
might need to touch this is a little bit more depth.

00:24:17.309 --> 00:24:22.990
And also as Chris mentioned, it's important to point
out that you're going to need one inspector subclass

00:24:22.990 --> 00:24:26.730
and one inspector view for each
controller view that you'll be integrating.

00:24:26.730 --> 00:24:27.180
( period of silence )

00:24:27.180 --> 00:24:33.299
So now let's talk about actually
constructing the inspector view.

00:24:33.299 --> 00:24:38.909
What you see on screen is the default inspector
view that you'll be getting in the inspector nib

00:24:38.910 --> 00:24:42.410
that comes as a part of your project in Xcode.

00:24:42.410 --> 00:24:45.190
You can see it has some sample controls.

00:24:45.190 --> 00:24:51.130
And these have been laid out in a manner that's consistent
with the rest of the inspectors in Interface Builder.

00:24:51.130 --> 00:24:54.990
You also could probably notice those red lines.

00:24:54.990 --> 00:25:02.410
These are user guides that we've provided to make sure that
as you are readjusting and moving around your controls,

00:25:02.410 --> 00:25:07.480
that you are making sure to keep your look consistent.

00:25:07.480 --> 00:25:13.490
So at this point, the process of building your inspector
view is just dragging in the different controls

00:25:13.490 --> 00:25:17.740
that you'll be using to reflect
the attributes of your custom view.

00:25:17.740 --> 00:25:21.220
And it's important to make sure
to select the, the right controls.

00:25:21.220 --> 00:25:28.350
Things like check boxes work well for Boolean values and
combo box might be just the thing for an enumeration.

00:25:28.349 --> 00:25:35.480
So now that we've constructed our view, and we
have our controls that we're gonna be using,

00:25:35.480 --> 00:25:42.559
the next step is to actually associate our nib with
the class that we'll be using as its controller.

00:25:42.559 --> 00:25:45.079
And for us that's our IB inspector subclass.

00:25:45.079 --> 00:25:49.289
So what we wanna do is select files owner.

00:25:49.289 --> 00:25:53.329
And then bring up the identity inspector.

00:25:53.329 --> 00:25:58.889
And select our IB inspector subclass from the combo box.

00:25:58.890 --> 00:26:05.480
If you were using the template from Xcode and you have
that project open, then through the magic of Xcode

00:26:05.480 --> 00:26:09.990
and IB synchronization, you should be able
to just select it from the pull down menu.

00:26:09.990 --> 00:26:14.700
If not, simply type it in.

00:26:14.700 --> 00:26:15.490
( Period of silence )

00:26:15.490 --> 00:26:20.269
Now there are two methods for configuring your inspector.

00:26:20.269 --> 00:26:22.539
We have our inspector view built.

00:26:22.539 --> 00:26:25.039
We have it associated with our controller class.

00:26:25.039 --> 00:26:31.200
But now we need to make sure to synchronize our controls
with the attributes of our view that they'll be reflecting.

00:26:31.200 --> 00:26:37.720
Now the two methods of this are Cocoa bindings,
which is by far the easier of the two methods.

00:26:37.720 --> 00:26:41.380
You're leaving all the work to Interface Builder.

00:26:41.380 --> 00:26:46.610
The second, if you're used to using actions and
outlets and you'd prefer to go that route, that's fine.

00:26:46.609 --> 00:26:51.949
You'll just need to make sure to override the
refresh method in our IB inspector subclass.

00:26:51.950 --> 00:26:55.000
You need to connect your outlets and
actions to your various controls.

00:26:55.000 --> 00:26:59.759
And then make sure to modify your
selection in your action methods.

00:26:59.759 --> 00:27:03.680
Now we definitely recommend using Cocoa bindings.

00:27:03.680 --> 00:27:08.980
It's much easier and it's much less error prone.

00:27:08.980 --> 00:27:17.819
Now since I'll take you through this process,
since that's what we'll be using in our demo today.

00:27:17.819 --> 00:27:18.009
( period of silence )

00:27:18.009 --> 00:27:24.069
Now when we know that most of you when you're
thinking about synchronizing controls in this manner,

00:27:24.069 --> 00:27:28.329
the first thing you're gonna wanna do is
drag out an array controller and use that.

00:27:28.329 --> 00:27:31.889
now since we know that you're gonna
do this, we've provided it for you.

00:27:31.890 --> 00:27:37.880
There's a property of the IB inspector class
called the inspected objects controller.

00:27:37.880 --> 00:27:42.560
And this is simply an array controller
that reflects the current selection.

00:27:42.559 --> 00:27:45.460
And so when it comes to binding using Cocoa bindings,

00:27:45.460 --> 00:27:51.049
it's as simple as entering the key path
inspectedObjectsController.selection.the name

00:27:51.049 --> 00:27:53.389
of your KBO compliant property.

00:27:53.390 --> 00:28:01.030
So to do this, we would select the control that
we're binding and bring up the bindings inspector.

00:28:01.029 --> 00:28:06.839
Now since we associated files owner with the
class we will be using as our controller,

00:28:06.839 --> 00:28:11.709
which is the subclass of the IB inspector
class, that we're gonna bind to files owner.

00:28:11.710 --> 00:28:19.610
And next in the model key path, we're gonna enter
inspectedObjectController.selection.the name

00:28:19.609 --> 00:28:21.629
of our KBO compliant property.

00:28:21.630 --> 00:28:25.530
( Period of silence )

00:28:25.529 --> 00:28:28.430
So we have our inspector view built.

00:28:28.430 --> 00:28:35.779
We have our nib associated with our controller and we even
have our control synchronizing through Cocoa bindings.

00:28:35.779 --> 00:28:41.869
So the last step is to make sure that our view appears
as part of the inspector stack in Interface Builder.

00:28:41.869 --> 00:28:48.709
Now the way this works is Interface Builder simply
queries the different classes that are in your,

00:28:48.710 --> 00:28:56.230
in the inspected controls hierarchy asking it if it
has any inspector classes that it should be loading.

00:28:56.230 --> 00:29:00.849
So what we'd like is to get our on the top of that stack.

00:29:00.849 --> 00:29:04.069
So we're gonna do this through a
category method on our custom view.

00:29:04.069 --> 00:29:04.649
( period of silence )

00:29:04.650 --> 00:29:14.630
So in this category, on your custom view,
called IB populate attribute inspector classes.

00:29:14.630 --> 00:29:17.330
We're gonna first make sure to call super.

00:29:17.329 --> 00:29:22.559
And so this is gonna make sure that we have all the
other inspectors that are a part of our hierarchy.

00:29:22.559 --> 00:29:28.490
And then next we're simply gonna add our custom
inspector class to this array of classes.

00:29:28.490 --> 00:29:33.900
So now that we have seen how to
do this, let me actually take you

00:29:33.900 --> 00:29:37.400
through the process and we'll return to the demo machine.

00:29:38.509 --> 00:29:43.670
( Period of silence )

00:29:43.670 --> 00:29:47.360
So I'm just gonna close down Interface Builder for now.

00:29:47.359 --> 00:29:49.629
And return to our Xcode project.

00:29:49.630 --> 00:29:58.690
So in the resources of our plug in, we
see we have our MC shape view inspector.

00:29:58.690 --> 00:30:03.450
So I'm gonna double click on that
nib and open it in Interface Builder.

00:30:03.450 --> 00:30:08.380
And here you see the one that we saw on
screen has a bunch of sample controls

00:30:08.380 --> 00:30:10.290
that have all been laid out appropriately.

00:30:10.289 --> 00:30:12.819
And the user guides to help us out.

00:30:12.819 --> 00:30:19.960
Now in the interest of time, I'm just gonna go
through binding one control for use in our inspector.

00:30:19.960 --> 00:30:21.529
And that's gonna be a color well.

00:30:21.529 --> 00:30:26.240
So I'm gonna just get rid of these guys here.

00:30:26.240 --> 00:30:28.849
Simply press delete.

00:30:28.849 --> 00:30:32.689
And these as well.

00:30:32.690 --> 00:30:35.120
I'm gonna put this in a more appropriate place.

00:30:35.119 --> 00:30:40.329
Here you can see we're using the user guides
to make sure we're lining it up appropriately.

00:30:40.329 --> 00:30:43.389
And just drag this label up here.

00:30:43.390 --> 00:30:50.180
And now the property that I'm gonna be associating with this
color well is gonna be the fill color of our custom view.

00:30:50.180 --> 00:30:54.259
So just make that a little more obvious.

00:30:55.349 --> 00:30:59.689
So now and the last step, we have
got a lot of extra room here.

00:30:59.690 --> 00:31:02.590
So I'm gonna drag this to make this a little bit smaller.

00:31:02.589 --> 00:31:09.519
And the easiest way to do this is to hold down
the shift key and then when you're resizing,

00:31:09.519 --> 00:31:13.869
you'll only be resizing vertically
and not messing with horizontally.

00:31:13.869 --> 00:31:20.659
Now additionally, I could use the user guides to
just do this on sight, but if I want to be a, a,

00:31:20.660 --> 00:31:25.490
make sure I'm exactly perfect, I
can hold down the option key as well

00:31:25.490 --> 00:31:32.140
and there we can see it showing me the
height and get it exactly to match the top.

00:31:32.140 --> 00:31:34.650
Perfect. So we have our control laid out.

00:31:34.650 --> 00:31:38.950
So the next step as we discussed
earlier is to select files owner.

00:31:38.950 --> 00:31:43.779
And then bring up our identity inspector.

00:31:43.779 --> 00:31:50.730
Now since we have our project in Xcode
open, if I look down here I can see

00:31:50.730 --> 00:31:54.210
that our MC shape view inspector is in, appears in the list.

00:31:54.210 --> 00:31:57.309
So I can simply select that.

00:31:57.309 --> 00:32:05.220
So now, returning to our view,
select the color well we have here.

00:32:05.220 --> 00:32:07.940
And open the binding's inspector.

00:32:07.940 --> 00:32:14.110
Now we wanna make sure to that this fill color is gonna
be reflecting the fill color property of our custom view.

00:32:14.109 --> 00:32:16.240
So turn down value.

00:32:16.240 --> 00:32:21.039
And we just associated files owner
with our IB inspector sub class.

00:32:21.039 --> 00:32:23.829
So we'll be binding to that.

00:32:23.829 --> 00:32:29.720
I'm gonna grab our fill color key
path, return to Interface Builder.

00:32:29.720 --> 00:32:37.130
And in the model key path, I'm gonna enter
inspectedObjectsController.selection and then the name

00:32:37.130 --> 00:32:41.720
of our KBO compliant property, in
this case is simply fill color.

00:32:41.720 --> 00:32:43.730
So I'm gonna hit return.

00:32:43.730 --> 00:32:46.529
And there, we say it's all bound up.

00:32:46.529 --> 00:32:52.690
So we're done actually constructing and
associating and binding our inspector nib.

00:32:52.690 --> 00:32:57.210
So I'm gonna make sure to save
this and quit interface builder.

00:32:57.210 --> 00:33:00.059
And return to our Xcode project.

00:33:01.099 --> 00:33:09.129
Now just to keep ourselves organized, we've created
a separate file called our MC shape unit integration

00:33:09.130 --> 00:33:13.010
where we're holding all our various category methods.

00:33:13.009 --> 00:33:19.670
And selecting this we see that we have this
method, IB populate attribute inspector classes.

00:33:19.670 --> 00:33:25.450
Now at this point, as we saw in Chris' demo, all
we did not see the inspector that was associated

00:33:25.450 --> 00:33:28.690
with our custom view, we simply saw the one for NS view.

00:33:28.690 --> 00:33:33.180
That's because we are as good citizens calling super first.

00:33:33.180 --> 00:33:39.299
But now we need to make sure to associate
or to insert our custom inspector as well.

00:33:39.299 --> 00:33:43.409
( Period of silence )

00:33:43.410 --> 00:33:45.320
And that's pretty simple.

00:33:45.319 --> 00:33:51.240
Just add our MC shape view inspector
class to the array of classes.

00:33:51.240 --> 00:33:59.150
So if I save this, then I'm gonna build and
go once again to open it in Interface Builder.

00:33:59.150 --> 00:34:08.250
And now, I can open that file that Chris created during
his demo and here we have a bunch of our shape views.

00:34:08.250 --> 00:34:15.570
But now, if I select one of these shape views and click on
the attributes tab, we can see we have our fill color here

00:34:15.570 --> 00:34:21.769
and its correctly synchronized and it's showing
that yes we indeed have a white triangle.

00:34:21.769 --> 00:34:28.960
Selecting this, we can make this
something I don't know how about green.

00:34:28.960 --> 00:34:33.510
Great. Very quick, very easy.

00:34:33.510 --> 00:34:38.450
( Applause )

00:34:38.449 --> 00:34:42.899
So I'll make this guy a little
bit larger, so we can see him.

00:34:42.900 --> 00:34:51.389
And maybe we'll wanna change this color
instead to something like purple, that's nice.

00:34:51.389 --> 00:34:53.589
Well, maybe we want it to return to green.

00:34:53.590 --> 00:34:57.220
Well, this should be as easy just hitting undo.

00:34:57.219 --> 00:35:01.469
So go to edit, and undo.

00:35:01.469 --> 00:35:04.559
Hmm. Okay.

00:35:04.559 --> 00:35:14.360
Well the size change that we made correctly undid, but
we definitely changed the color from green to purple.

00:35:14.360 --> 00:35:16.210
And so that wasn't working.

00:35:16.210 --> 00:35:24.300
Well it turns out that the change in shape as we know
is an attribute of our super class which is NS view

00:35:24.300 --> 00:35:29.330
where as this change in fill color
is specific to our custom view.

00:35:29.329 --> 00:35:37.610
So we obviously need to make sure to tell IB about the
attributes that we have that are specific to our custom view

00:35:37.610 --> 00:35:44.260
because at this point, it does not know about
them and cannot undo and redo appropriately.

00:35:44.260 --> 00:35:49.670
So I'm gonna turn it, if we could head back to slides.

00:35:49.670 --> 00:35:55.070
Oh, actually one last thing before we turn back to slides.

00:35:55.070 --> 00:35:55.519
( Period of silence )

00:35:55.519 --> 00:35:56.659
Thank you.

00:35:56.659 --> 00:36:00.759
Now that inspector that we created, that
was obviously just had the one property.

00:36:00.760 --> 00:36:02.950
It was a very simple inspector.

00:36:02.949 --> 00:36:07.619
Now instead of going through the tedium of
dragging in a bunch of different controls

00:36:07.619 --> 00:36:12.819
and binding them all, we have a prefigured inspector.

00:36:12.820 --> 00:36:14.480
So I'm just gonna grab that one.

00:36:14.480 --> 00:36:18.980
I'm gonna delete this inspector we have in the project.

00:36:18.980 --> 00:36:25.039
Then I'm just gonna grab this preconfigured
nib that we have.

00:36:25.039 --> 00:36:30.360
If that does not want to work.

00:36:31.590 --> 00:36:33.750
Bring this over.

00:36:38.110 --> 00:36:41.530
And copy it in and that's the correct target.

00:36:41.530 --> 00:36:49.240
So I'm just gonna build and run once more so
you can see what this inspector looks like.

00:36:49.239 --> 00:36:55.129
And again, I'm gonna open the file
that we were working with.

00:36:55.130 --> 00:37:03.200
And so here we see a more fully flushed out inspector
that's synchronized with all our different attributes.

00:37:03.199 --> 00:37:07.149
But we still don't have undo and redo
support and there's a probably a few things

00:37:07.150 --> 00:37:09.960
that we could do at this point to clean things up.

00:37:09.960 --> 00:37:12.949
so if we could now turn back to slides.

00:37:12.949 --> 00:37:14.269
Sorry.

00:37:15.510 --> 00:37:22.010
( period of silence )

00:37:22.010 --> 00:37:27.520
So let me just do a quick recap of
what we took care of in this demo.

00:37:27.519 --> 00:37:33.400
We constructed our inspector view, dragging in the various
controls we're gonna be using to reflect the views of our,

00:37:33.400 --> 00:37:37.019
to reflect the attributes of our custom view.

00:37:37.019 --> 00:37:43.280
We set the class of file's owner so that we could
associate our controller with our inspector nib.

00:37:43.280 --> 00:37:47.430
We then used Cocoa bindings to bind
these controls for our properties,

00:37:47.429 --> 00:37:50.799
taking advantage of the inspected objects controller.

00:37:50.800 --> 00:37:57.930
And then finally we just added one simple
line of code into our integration category,

00:37:57.929 --> 00:38:01.279
our category method on our custom view, making sure

00:38:01.280 --> 00:38:09.070
that Interface Builder had our IB inspector
subclass properly associated with our custom view.

00:38:09.070 --> 00:38:13.890
So now I'm gonna turn it back over to Chris, whose gonna
tell you how to add those last few finishing touches.

00:38:13.889 --> 00:38:15.000
( applause )

00:38:15.000 --> 00:38:21.380
>> Thanks Matt.

00:38:21.380 --> 00:38:24.910
All right, so let's polish this off.

00:38:24.909 --> 00:38:25.730
We're nearly done.

00:38:25.730 --> 00:38:27.829
We're almost there.

00:38:27.829 --> 00:38:32.599
So I'm gonna talk about polish.

00:38:32.599 --> 00:38:39.420
At the end of Matt's Demo, undo
and redo support didn't work.

00:38:39.420 --> 00:38:44.860
So at the point Matt stopped, really not a stopping point.

00:38:44.860 --> 00:38:50.570
But after you add undo and redo support, we will
be at yet another one of those stopping points

00:38:50.570 --> 00:38:54.160
where you could quit here and you'll be done.

00:38:55.360 --> 00:38:59.120
So how does Interface Builder manage its undo stack?

00:38:59.119 --> 00:39:06.659
It's got an unlimited undo stack and almost
every, every property of every view or control

00:39:06.659 --> 00:39:11.469
that you change should be undoable and redo able.

00:39:11.469 --> 00:39:14.759
This is a really important point.

00:39:14.760 --> 00:39:21.480
And it's, it's how in fact internally we test
to make sure things are working correctly.

00:39:21.480 --> 00:39:24.639
If it doesn't undo and redo, it's broken.

00:39:24.639 --> 00:39:29.949
You've done something wrong and
you need to look at your code.

00:39:29.949 --> 00:39:37.639
Fortunately undo and redo support is very
simple and you very nearly get it for free.

00:39:37.639 --> 00:39:42.719
It's a matter of in your integration
class, writing, overriding one method.

00:39:42.719 --> 00:39:46.089
IB populate key paths.

00:39:46.090 --> 00:39:53.460
Like building the inspector stack, Interface Builder
will query your class for all of its attributes,

00:39:53.460 --> 00:40:00.429
and when it queries your class, the first thing your
class should turn around and do is query its super class.

00:40:00.429 --> 00:40:09.679
So that when our shape view gets asked for its properties,
it not only returns its own, but those for NS view.

00:40:09.679 --> 00:40:18.719
So as you can see from the code sample on the slides the
first thing we do in IB populate key paths is call super.

00:40:18.719 --> 00:40:29.449
And we follow that up by adding our own KBO
compliant key paths to the end of that dictionary.

00:40:29.449 --> 00:40:37.699
With that done, Interface Builder knows what properties of
our view to observe, can watch them, see when they change,

00:40:37.699 --> 00:40:43.789
dirty the document as appropriate,
and it can manage the undo and redo stack.

00:40:43.789 --> 00:40:50.759
So very important that you add all of the properties
you need undo and redo support for and very important

00:40:50.760 --> 00:40:55.840
that you remember to call super so that you have
not only your properties but all the properties

00:40:55.840 --> 00:40:57.550
of the classes above you in the hierarchy.

00:40:57.550 --> 00:40:57.900
( Period of silence )

00:40:57.900 --> 00:41:09.190
One of the things you may have noticed in our demos
today that as we were dragging off our shape view

00:41:09.190 --> 00:41:14.610
from the library, it was staying at
the small library size of 80 by 80.

00:41:14.610 --> 00:41:22.360
so when we pulled it into our design surface, it
was tiny and it wasn't configured particularly well.

00:41:22.360 --> 00:41:24.970
Well, there's a solution to that.

00:41:24.969 --> 00:41:35.980
In your library nib, your library template object has two
outlets you can use to provide a better user experience

00:41:35.980 --> 00:41:39.590
to folks dragging your control off the library.

00:41:39.590 --> 00:41:41.920
The first of these is the dragged view outlet.

00:41:41.920 --> 00:41:51.090
And the dragged view outlet simply points to a
preconfigured instance of your view or control.

00:41:51.090 --> 00:41:57.850
If you happened to be integrating something that's
not a view or a control, say a subclass of formatter

00:41:57.849 --> 00:42:08.089
or some other object, you can also use the represented
object outlet and you set the represented object outlet

00:42:08.090 --> 00:42:14.160
to an instance of the object you
want dropped into the design surface

00:42:14.159 --> 00:42:20.369
when you pull your control off of the library.

00:42:20.369 --> 00:42:26.670
So the other thing you may have noticed if
you've worked with IB this week in the seed,

00:42:26.670 --> 00:42:31.610
is that in the library we provide a lot of
documentation for the controls we've integrated.

00:42:31.610 --> 00:42:41.660
We provide a very brief summary of what the controls is to
be used for and we provide a more fuller descriptive text

00:42:41.659 --> 00:42:50.699
that hopefully helps users understand what
the viewer control is to be used for.

00:42:50.699 --> 00:42:55.980
So in the demo today, I'm gonna go ahead and
open up the library nib, configure those things

00:42:55.980 --> 00:43:00.840
and you'll see how they show up in the library.

00:43:00.840 --> 00:43:01.269
( Period of silence )

00:43:01.269 --> 00:43:03.670
So how do we do that?

00:43:03.670 --> 00:43:09.809
With the library nib open and our object selected, we bring
up the attributes inspector on the library template object.

00:43:09.809 --> 00:43:11.420
We fill in a summary.

00:43:11.420 --> 00:43:16.170
And you can see that that reflects
in the library next to our view.

00:43:16.170 --> 00:43:22.019
If I fill in the description field and the
bottom documentation portion of the library,

00:43:22.019 --> 00:43:29.090
our text will show up there and the users will have
a great summary of what your view or control does.

00:43:29.090 --> 00:43:38.450
So if we could go back to the demo machine.

00:43:38.449 --> 00:43:39.069
( Period of silence )

00:43:39.070 --> 00:43:45.050
Okay, so the first thing we need
to do is get undo and redo working.

00:43:45.050 --> 00:43:48.170
So I'm gonna go ahead and open my integration class.

00:43:48.170 --> 00:43:55.730
And we see that my IB populate key paths method is
there, but it, all its doing is calling super right now.

00:43:55.730 --> 00:43:59.650
So whenever our shape view is dragged
out onto the design surface,

00:43:59.650 --> 00:44:05.450
the only attributes that Interface Builder
is gonna know about are those of NS view.

00:44:05.449 --> 00:44:07.259
So we need to change that.

00:44:07.260 --> 00:44:09.230
( Period of silence )

00:44:09.230 --> 00:44:15.969
So I'm gonna go ahead and from my demo
monkey, pull off a line of code here.

00:44:15.969 --> 00:44:21.769
And we see that we're calling super, so we're
getting all of the properties from NS view.

00:44:21.769 --> 00:44:28.469
And then we're adding the key paths for all of
the properties that are shape view supports.

00:44:28.469 --> 00:44:30.989
Number of points, background color, fill color, etcetera.

00:44:30.989 --> 00:44:36.439
So I'm gonna go ahead and save that.

00:44:36.440 --> 00:44:39.710
build and run.

00:44:39.710 --> 00:44:39.880
( Period of silence )

00:44:39.880 --> 00:44:41.860
Switch back to Interface Builder.

00:44:41.860 --> 00:44:45.980
And I'm gonna open our demo file.

00:44:45.980 --> 00:44:52.010
And bring up the attributes inspector.

00:44:53.510 --> 00:45:03.740
( Period of silence )

00:45:03.739 --> 00:45:10.849
Change that one to green, make this one a square.

00:45:10.849 --> 00:45:11.900
Rotate that one a bit.

00:45:11.900 --> 00:45:16.280
Give it a nice, oh that's very chunky.

00:45:16.280 --> 00:45:17.760
Nice thick line.

00:45:17.760 --> 00:45:27.630
And because I've implemented the populate key paths
method, all of those things are undoable and redo able.

00:45:27.630 --> 00:45:33.950
( Applause )

00:45:33.949 --> 00:45:37.109
Okay. So that's undo and redo.

00:45:37.110 --> 00:45:41.579
Gonna switch back to our plug in project.

00:45:41.579 --> 00:45:42.369
( Period of silence )

00:45:42.369 --> 00:45:53.460
And I talked about setting the dragged view in
the library, so I'm gonna open our library nib up.

00:45:53.460 --> 00:45:56.750
( Period of silence )

00:45:56.750 --> 00:46:01.619
And like I mentioned earlier, internally
we use IB to build IB.

00:46:01.619 --> 00:46:03.909
This is a great example of that.

00:46:03.909 --> 00:46:08.500
So I wanna set the drag view for my shape view.

00:46:08.500 --> 00:46:14.860
Oops. Shape, so I'm gonna drag a
shape view out into the library nib.

00:46:14.860 --> 00:46:21.190
And I want squares that are someone shout out a color.

00:46:21.190 --> 00:46:22.389
>> (Unclear).

00:46:22.389 --> 00:46:25.150
>> Awesome, thank you.

00:46:25.150 --> 00:46:27.639
Someone shout out a color that's in this list.

00:46:27.639 --> 00:46:28.989
( Laughter )

00:46:28.989 --> 00:46:32.189
Orange, thank you.

00:46:32.190 --> 00:46:34.440
And gosh, that's tiny.

00:46:34.440 --> 00:46:40.970
People don't wanna work with little
shapes, they wanna work with big shapes.

00:46:40.969 --> 00:46:47.009
So now I'm going to select my library template object.

00:46:47.010 --> 00:46:55.930
Bring up the connections inspector and I'm gonna
drag from this well here, drag view to my shape view.

00:46:57.409 --> 00:47:02.799
So great, now when we drag the shape view off
of the library, we'll get that nice animation,

00:47:02.800 --> 00:47:09.110
we'll see our shape view go from the tiny version
that's in the library to this nice large orange square.

00:47:09.110 --> 00:47:18.829
And it'll deposit a fully configured appropriately sized
version of our shape control right into the design surface.

00:47:18.829 --> 00:47:21.599
So okay, two more things missing.

00:47:21.599 --> 00:47:26.289
We don't have any, boy, that's descriptive.

00:47:26.289 --> 00:47:27.769
Let's fix that.

00:47:27.769 --> 00:47:31.380
So I'm gonna select my library template object.

00:47:31.380 --> 00:47:38.650
( Period of silence )

00:47:38.650 --> 00:47:43.639
And I'm gonna fill in or not.

00:47:43.639 --> 00:47:46.529
( Period of silence )

00:47:46.530 --> 00:47:48.390
The summary field, so great.

00:47:48.389 --> 00:47:49.150
What's a shape view?

00:47:49.150 --> 00:47:52.480
Well it's a view for displaying shapes.

00:47:52.480 --> 00:47:56.219
I'm not a poet, but I try.

00:47:56.219 --> 00:47:59.309
And I'm gonna fill out the description.

00:47:59.309 --> 00:48:03.299
The shape is a custom view that
displays various shapes, super good.

00:48:03.300 --> 00:48:06.530
One more thing I can do is that blue square.

00:48:06.530 --> 00:48:10.800
That's not so good.

00:48:10.800 --> 00:48:15.530
Let's actually whack that.

00:48:15.530 --> 00:48:17.930
Pull in a real shape view.

00:48:20.829 --> 00:48:27.019
Give it our orange fill color.

00:48:27.019 --> 00:48:27.800
( period of silence )

00:48:27.800 --> 00:48:32.019
appropriately size it and I'm gonna
go ahead and save my library nib.

00:48:32.019 --> 00:48:32.920
So I'm done with that.

00:48:32.920 --> 00:48:34.490
I've filled out my description.

00:48:34.489 --> 00:48:36.179
I filled out my summary.

00:48:36.179 --> 00:48:37.789
I set up a drag view.

00:48:37.789 --> 00:48:39.079
I'm done with IB.

00:48:39.079 --> 00:48:41.009
I'm gonna go ahead and quit.

00:48:41.010 --> 00:48:42.770
>> Still no label.

00:48:42.769 --> 00:48:44.509
>> Thank you.

00:48:44.510 --> 00:48:58.970
( period of silence )

00:48:58.969 --> 00:49:01.469
Now I'm done, thank you audience member.

00:49:01.469 --> 00:49:10.809
( laughter )
So I'm gonna quit Interface Builder, go back to my plug in
project, build and run and let's see what I hath wrought.

00:49:10.809 --> 00:49:14.500
Hey, there we go.

00:49:14.500 --> 00:49:16.940
My shape view is actually an orange square.

00:49:16.940 --> 00:49:18.480
( Applause )

00:49:18.480 --> 00:49:26.519
It's got the description and sample label that I set up.

00:49:26.519 --> 00:49:30.000
And when I pull it off, it's appropriately sized.

00:49:31.159 --> 00:49:34.509
And colored.

00:49:34.510 --> 00:49:40.170
( Applause )

00:49:40.170 --> 00:49:41.490
Could we go back to the slides?

00:49:41.489 --> 00:49:42.109
( Period of silence )

00:49:42.110 --> 00:49:47.059
What, whoa!

00:49:47.059 --> 00:49:50.590
( Laughter )

00:49:50.590 --> 00:49:57.920
All right, so I added undo and redo support and
as I mentioned Interface Builder keeps track

00:49:57.920 --> 00:50:04.269
of all the properties in your object
via key value observing.

00:50:04.269 --> 00:50:08.139
So all we have to do to get unlimited undo and redo support

00:50:08.139 --> 00:50:13.960
to work is just add the correct attribute
key paths in our integration category.

00:50:13.960 --> 00:50:20.909
IB will know to watch those properties for
changes, dirty the document, enable undo and redo.

00:50:20.909 --> 00:50:24.199
And the last thing we did was we
polished up our library nib.

00:50:24.199 --> 00:50:26.159
We set the drag view.

00:50:26.159 --> 00:50:29.699
We didn't set the represented object
because we're actually using a view.

00:50:29.699 --> 00:50:36.829
So that we got a fully configured, appropriately sized view
to drag off of the library and into our design surface.

00:50:36.829 --> 00:50:38.909
And then we set the summary and description.

00:50:38.909 --> 00:50:45.839
So that's actually it for today, we're done.

00:50:45.840 --> 00:50:48.440
That was building a plug in.

00:50:48.440 --> 00:50:49.679
so what did we cover?

00:50:49.679 --> 00:50:52.029
We covered what plug ins do.

00:50:52.030 --> 00:50:59.370
they integrate your content into the Interface
Builder library, into the inspector stack.

00:50:59.369 --> 00:51:00.420
Who should write them?

00:51:00.420 --> 00:51:06.539
Well, anyone who's writing a bunch of custom
views or controls being reused in a lot of places,

00:51:06.539 --> 00:51:09.409
you're definitely a candidate for writing an IB plug in.

00:51:09.409 --> 00:51:17.519
If you're working with one custom view and one project,
this is probably honestly a little bit of overkill.

00:51:17.519 --> 00:51:19.619
We talked about the architecture of the IB plug ins.

00:51:19.619 --> 00:51:27.069
All the different files you'll need to touch, inspectors,
inspector subclasses, plug in sub classes, library nibs.

00:51:27.070 --> 00:51:32.700
And we ran you through a quick demo building a plug
in where we talked about configuring a library nib,

00:51:32.699 --> 00:51:38.899
building inspectors for your views, the two
integration classes at a minimum you'll need to support.

00:51:38.900 --> 00:51:46.460
And putting on those final, polishing touches, pardon me.

00:51:46.460 --> 00:51:50.720
So, that concludes our presentation today.

00:51:50.719 --> 00:51:57.299
If you've got anymore questions, please contact
Matthew Formica, that's mformica@apple.com.

00:51:57.300 --> 00:51:59.900
Matthew's our developer tools evangelist.

00:51:59.900 --> 00:52:07.200
And of course, if you go to developer.apple.com/wwdc/attendee,
there's documentation,

00:52:07.199 --> 00:52:09.589
sample code and other resources available.