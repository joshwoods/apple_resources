WEBVTT

00:00:17.670 --> 00:00:19.679
>> This is Session 213.

00:00:19.679 --> 00:00:22.050
Getting Started with Spotlight and Quick Look.

00:00:22.050 --> 00:00:24.710
My name is Jonah Petri. I'm a Spotlight engineer.

00:00:24.710 --> 00:00:29.310
And I hope you guys are ready for a big brain-dump
because we're covering a lot of stuff today.

00:00:29.309 --> 00:00:30.989
So let's get started.

00:00:30.989 --> 00:00:36.579
The first thing I wanted to do if we could quickly
go to demo, is show you a couple of the things

00:00:36.579 --> 00:00:40.939
that we want the Leopard Finder experience to be.

00:00:40.939 --> 00:00:48.899
In Leopard Finder we've done -- if you saw the keynote, a
lot of integration between your apps and the Finder itself.

00:00:48.899 --> 00:00:55.810
So that users can see the applications -- sorry -- the
documents that they've created in the Finder itself.

00:00:55.810 --> 00:01:05.210
And this is a new level of integration that no one's
really done with file manager and the document content.

00:01:05.209 --> 00:01:10.429
And so you can see, you know, if we go to an
images search you can see your actual images.

00:01:10.430 --> 00:01:13.910
And of course, this is nothing new
for images, but we do this with PDFs,

00:01:13.909 --> 00:01:20.179
we do this with Keynote presentations,
we do this with all sorts of documents.

00:01:20.180 --> 00:01:23.080
And most importantly, we want you
to do it with your documents.

00:01:23.079 --> 00:01:27.890
Because users are going to expect this
level of integration in the future.

00:01:27.890 --> 00:01:29.920
So let's go back to slides.

00:01:29.920 --> 00:01:32.640
If I can avoid losing this, that would be good.

00:01:32.640 --> 00:01:35.739
So, how are you going to do this?

00:01:35.739 --> 00:01:40.030
Well, there's two technologies that you need to
integrate with in order to get your apps to the level

00:01:40.030 --> 00:01:43.549
of user experience in the Finder that
users are going to come to expect.

00:01:43.549 --> 00:01:47.269
And these two technologies are Spotlight and Quick Look.

00:01:47.269 --> 00:01:52.679
And Spotlight is a system-wide metadata and
text index that's been around since Tiger.

00:01:52.680 --> 00:01:57.720
And it's integrated with Apple and third-
party documents via a plug-in architecture.

00:01:57.719 --> 00:02:04.609
Quick Look is a system-wide document preview architecture
that generates those nice previews that you saw.

00:02:04.609 --> 00:02:09.900
And it's also integrated with Apple and third-party
documents via a very similar plug-in architecture.

00:02:09.900 --> 00:02:15.420
And I'm pointing that out because a lot of the stuff
that you see for the Spotlight section is also relevant

00:02:15.419 --> 00:02:18.019
for the Quick Look section, and vice versa.

00:02:18.020 --> 00:02:27.469
So we thought that today you were probably coming here with
an example -- your application -- wanting to integrate it.

00:02:27.469 --> 00:02:33.620
And so we integrated -- we -- sorry -- we created a demo app
that we're going to go through the process of integrating

00:02:33.620 --> 00:02:37.370
with these two technologies and it's called MyBooks.

00:02:37.370 --> 00:02:43.990
And so we've got a bunch of -- what this
application does with some apologies

00:02:43.990 --> 00:02:48.090
to Delicious Monster, is it just tracks your books.

00:02:48.090 --> 00:02:52.620
And you've got the cover image, you've
got the title, and you've got the author,

00:02:52.620 --> 00:02:56.120
and you've got a big chunk of review text.

00:02:56.120 --> 00:02:59.289
And this just allows you to basically,
you know, have your books.

00:02:59.289 --> 00:03:03.750
But the experience that you get when
you look for your books is not ideal.

00:03:03.750 --> 00:03:05.810
I can't search for any of the text.

00:03:05.810 --> 00:03:08.490
And these are the book documents that I've got on my system.

00:03:08.490 --> 00:03:10.750
And that's not really compelling.

00:03:10.750 --> 00:03:13.449
And that's not what the users are promised with Leopard.

00:03:13.449 --> 00:03:15.810
So if we can go back to slides.

00:03:15.810 --> 00:03:18.849
We're going to go through the process
of integrating MyBooks into Spotlight

00:03:18.849 --> 00:03:22.439
and Quick Look to get that full Finder user experience.

00:03:22.439 --> 00:03:27.840
So, in order to do this, we have to do a
little bit of talking about the architecture.

00:03:27.840 --> 00:03:35.870
Spotlight and QuickLook, like I said, use plug-ins to
extend their capabilities to other document types.

00:03:35.870 --> 00:03:40.150
And these plug-ins declare the types of
files that they handle, so that Spotlight

00:03:40.150 --> 00:03:44.270
and Quick Look can load the appropriate plug-in for a file.

00:03:44.270 --> 00:03:48.070
Well, what do we mean by type on Mac OS X?

00:03:48.069 --> 00:03:53.049
Types on Mac OS X are composed of uniform type identifiers.

00:03:53.050 --> 00:03:54.850
We call them UTIs.

00:03:54.849 --> 00:04:02.509
And UTIs are an identifier that uses a reverse DNS
naming convention, and they're freely extensible by anyone.

00:04:02.509 --> 00:04:07.329
So you guys can all come up with your own
UTIs if you have a custom document format.

00:04:07.330 --> 00:04:11.900
All that we ask is that you let us own the public domain.

00:04:11.900 --> 00:04:20.310
So that we can provide the standard type so that
-- standard types can work across applications.

00:04:20.310 --> 00:04:28.459
So what do these UTIs actually represent?

00:04:28.459 --> 00:04:32.739
Well, in this example you see public.mp3, that's a UTI.

00:04:32.740 --> 00:04:38.829
And it represents both the description and an icon
that the user might see as well as the information

00:04:38.829 --> 00:04:45.449
that the OS itself needs to map the type
from the file system into the UTI itself.

00:04:45.449 --> 00:04:53.149
Such as the extension or the OS type, or the mime type of
the data. And these UTIs also belong in a big hierarchy,

00:04:53.149 --> 00:04:56.569
which tells you more about the UTI
via it's place in the hierarchy.

00:04:56.569 --> 00:05:00.349
For instance, an MP3 descends from public.audio.

00:05:00.350 --> 00:05:05.640
And so that would tell you that an MP3, if you didn't
know, was a kind of audio, and so on up the tree.

00:05:05.639 --> 00:05:09.579
So it's important to place your
UTIs appropriately within the tree

00:05:09.579 --> 00:05:14.709
so that they are providing information via their placement.

00:05:14.709 --> 00:05:16.560
So how are types organized?

00:05:16.560 --> 00:05:19.759
The first way that they're organized
is via a physical hierarchy.

00:05:19.759 --> 00:05:24.949
And this is a low-level view of how
your file is actually packaged on disk.

00:05:24.949 --> 00:05:30.649
And that can either be a flat file or
a package, as we'll see in a moment.

00:05:30.649 --> 00:05:33.949
The second hierarchy is a functional hierarchy.

00:05:33.949 --> 00:05:39.560
And this is a high-level user view of what
is this content, what does this mean to me,

00:05:39.560 --> 00:05:41.379
is it an image or is it a movie?

00:05:41.379 --> 00:05:45.719
And every type -- and this is key --
has a place in both hierarchies.

00:05:45.720 --> 00:05:50.460
So if you're going to be defining your UTI
you need to place it in both hierarchies.

00:05:50.459 --> 00:05:55.419
So here's a sort of pared down physical hierarchy.

00:05:55.420 --> 00:05:57.370
public.item is the top level.

00:05:57.370 --> 00:06:00.009
The two that I want you to pay
attention to are these two leaf nodes.

00:06:00.009 --> 00:06:02.319
public.data and public.package.

00:06:02.319 --> 00:06:08.189
Because if you've got a custom document format, your
document format must descend from public.data

00:06:08.189 --> 00:06:12.379
if it's a flat file, or public.package
if it's a package.

00:06:12.379 --> 00:06:18.899
And on Mac OS X, for those maybe new to the platform we
have packages which are really directories containing a

00:06:18.899 --> 00:06:23.089
hierarchy of elements, but they're exposed
to the user as a single file.

00:06:23.089 --> 00:06:28.079
The functional hierarchy, on the other hand, is very broad.

00:06:28.079 --> 00:06:31.519
And describes all sorts of content
that the user might be interested in.

00:06:31.519 --> 00:06:34.209
Such as images, or text, or audio, or movies.

00:06:34.209 --> 00:06:41.609
And we encourage you to if you're defining your
own UTI, find the place in the functional hierarchy

00:06:41.610 --> 00:06:44.810
that is most appropriate for your content.

00:06:44.810 --> 00:06:55.370
So in the future when we make more use of the hierarchy
itself, we will treat your document type accordingly.

00:06:55.370 --> 00:07:04.129
So, when you're working with UTIs, the first thing to do
is check whether the UTI that your document type has,

00:07:04.129 --> 00:07:06.750
whether we've already provided a UTI for it.

00:07:06.750 --> 00:07:11.889
And you can check for that in the CoreTypes.bundle
in /System/Library/CoreServices.

00:07:11.889 --> 00:07:18.169
There is an Info.plist in there that's very extensive
and defines a lot of UTIs for standard types.

00:07:18.170 --> 00:07:22.250
And you declare support for a UTI in your
bundle's Info.plist a little bit like this.

00:07:22.250 --> 00:07:26.810
In this example you see that I've declared
the com.mycompany.mybook,

00:07:26.810 --> 00:07:30.379
which is the UTI we're going to
be using for the MyBooks example.

00:07:30.379 --> 00:07:35.659
And I'm going to be -- I've declared that
my bundle is an editor for that UTI type.

00:07:35.660 --> 00:07:37.939
And you could use other roles too.

00:07:37.939 --> 00:07:41.730
For instance, if you are a Quick Look
plug-in you would use that role,

00:07:41.730 --> 00:07:43.960
and if you were a Spotlight plug-in, use that role.

00:07:43.959 --> 00:07:46.329
But don't really pay attention to that too much.

00:07:46.329 --> 00:07:51.050
What is important is to understand the
structure of how these things are defined.

00:07:51.050 --> 00:07:53.210
And there's plenty of documentation on UTIs.

00:07:53.209 --> 00:07:57.269
So if it feels like I'm breezing through this
a little bit, rest assured there's plenty

00:07:57.269 --> 00:07:59.490
of docs out there for you to take advantage of.

00:07:59.490 --> 00:08:05.360
So if you don't have a UTI that's already defined
by the system you'll have to declare your own.

00:08:05.360 --> 00:08:08.310
And that's not too hard.

00:08:08.310 --> 00:08:12.800
The basics are when you're declaring
a new UTI the type that you're going

00:08:12.800 --> 00:08:16.740
to be declaring is declared in
your bundle's Info.plist.

00:08:16.740 --> 00:08:20.579
And that can be your application's
bundle or it can be your Spotlight

00:08:20.579 --> 00:08:23.449
or QuickLook plug-in, or other bundles on the system.

00:08:23.449 --> 00:08:28.709
In general, types that you own, that
you are declaring, should be exported.

00:08:28.709 --> 00:08:30.919
And this is a very strong declaration.

00:08:30.920 --> 00:08:33.490
And we encourage you to use this
for your application bundle,

00:08:33.490 --> 00:08:38.070
where you're being the authoritive
source of information on this type.

00:08:38.070 --> 00:08:42.580
Types that you use in the bundle, on
the other hand, should be imported.

00:08:42.580 --> 00:08:47.000
And this is somewhat a weaker declaration of type.

00:08:47.000 --> 00:08:50.149
And the exception to this, of course,
is system-defined types.

00:08:50.149 --> 00:08:55.250
You don't have to -- you don't have to import those at
all because they'll be on the system for you to use.

00:08:55.250 --> 00:09:01.120
And we encourage you if you're developing a plug-in,
either a Spotlight plug-in or a Quick Look plug-in

00:09:01.120 --> 00:09:05.700
where you're going to be using UTIs to import
the types there and leave the exporting

00:09:05.700 --> 00:09:09.420
of the types to the applications themselves.

00:09:09.419 --> 00:09:14.379
So now that I've talked a little bit
about UTIs, let's see them in practice.

00:09:14.379 --> 00:09:18.549
Let's look at what we did for MyBooks for UTIs.

00:09:18.549 --> 00:09:19.750
So here's the MyBooks app.

00:09:19.750 --> 00:09:23.509
And I'm just going to go into by
showing the package contents.

00:09:23.509 --> 00:09:24.889
Contents, info.plist.

00:09:24.889 --> 00:09:31.490
And I'm going to open that up in Xcode.

00:09:31.490 --> 00:09:36.419
And the two things you should pay attention
to here is this UTExportedTypeDeclarations,

00:09:36.419 --> 00:09:38.500
and this is where we're exporting the type.

00:09:38.500 --> 00:09:43.789
And we're saying, hey, our content
type conforms to public.data.

00:09:43.789 --> 00:09:45.709
Meaning it's a flat file.

00:09:45.710 --> 00:09:46.900
And public.content.

00:09:46.899 --> 00:09:51.049
Meaning this is content that we couldn't figure
out a better place in the functional hierarchy.

00:09:51.049 --> 00:09:54.439
So we're just putting it as a child of public.content.

00:09:54.440 --> 00:09:58.820
Here we name the UTI itself, com.mycompany.mybook.

00:09:58.820 --> 00:10:05.629
And here's the file name extension that allows
the OS to map from a file on disk to our UTI.

00:10:05.629 --> 00:10:12.309
So anything ending in mybook is going to be
mapped to thecom.mycompany.mybook UTI.

00:10:12.309 --> 00:10:15.989
Also, since this is an app bundle appeared at
the top, you see that we've declared ourselves

00:10:15.990 --> 00:10:21.740
as an editor for the com.mycompany.mybook UTI.

00:10:21.740 --> 00:10:26.500
So that's the way that you would go
about integrating UTIs with your app.

00:10:26.500 --> 00:10:28.940
If we could go back to slides.

00:10:28.940 --> 00:10:38.510
One thing I wanted to mention is that you should be careful
when going to UTIs because your reading and writing code

00:10:38.509 --> 00:10:47.840
for document types will be called with the UTI rather
than the file name extension or other Legacy type information.

00:10:47.840 --> 00:10:50.259
So your code needs to be prepared for that.

00:10:50.259 --> 00:10:57.090
And we've seen that bite people for
NSDocument and other frameworks.

00:10:57.090 --> 00:10:58.649
So just be prepared.

00:10:58.649 --> 00:11:01.509
So why do we talk about all this type stuff anyway?

00:11:01.509 --> 00:11:03.830
It seems like kind of a segue.

00:11:03.830 --> 00:11:08.759
But in fact, UTIs are really important
for Spotlight and Quick Look integration,

00:11:08.759 --> 00:11:11.669
because Spotlight and Quick Look only integrate using UTIs.

00:11:11.669 --> 00:11:17.579
If you're going to build a Spotlight or a Quick Look
plug-in, you must declare the UTIs that you handle.

00:11:17.580 --> 00:11:21.420
You can't say I handle everything that ends in .jpg.

00:11:21.419 --> 00:11:26.199
And then Quick Look and Spotlight once
they determine the UTI of the file

00:11:26.200 --> 00:11:29.610
on the disck can unload the appropriate plug-in and proceed.

00:11:33.279 --> 00:11:42.159
So let's talk a little specifically about Spotlight.

00:11:42.159 --> 00:11:46.809
Spotlight is, as I said, an architecture
for metadata and text indexing.

00:11:46.809 --> 00:11:54.199
And for you as a plug-in developer, the key process
you want to be aware of is this mdworker process.

00:11:54.200 --> 00:11:59.640
And this is the process that's going to load the plug-
ins that you develop and also the system plug-ins,

00:11:59.639 --> 00:12:04.490
and it's going to take the files on disk and call
your plug-in with the path to these files on disk

00:12:04.490 --> 00:12:07.710
as appropriate for the UTI of the file itself.

00:12:07.710 --> 00:12:16.360
And your plug-in is expected to extract the attributes and
text content of these documents and mdworker will feed

00:12:16.360 --> 00:12:21.550
that information to mds, which will store
it in the various databases that mds has.

00:12:21.549 --> 00:12:25.389
mds is the metadata server, by the way.

00:12:25.389 --> 00:12:30.210
And once mds has stored that it can be
used, but, like, by the Finder, for example.

00:12:30.210 --> 00:12:33.490
And you can see, this is an image that I had on my computer.

00:12:33.490 --> 00:12:37.289
And there's all this juicy metadata that
the user might want to take advantage of,

00:12:37.289 --> 00:12:40.419
like the dimensions or the make and model of the camera.

00:12:40.419 --> 00:12:44.169
That's all stamped into the JPEG
itself by the camera at photo time.

00:12:44.169 --> 00:12:48.089
And we've extracted that in the image Spotlight plug-in.

00:12:48.090 --> 00:12:49.399
And we can provide that to the user.

00:12:49.399 --> 00:12:52.590
And you can do the same thing with
your document's metadata.

00:12:52.590 --> 00:12:54.790
What is all this stuff actually coming from?

00:12:54.789 --> 00:13:00.319
Well, like I said, it's attributes and values,
and the image Spotlight plug-in is going

00:13:00.320 --> 00:13:03.710
to be extracting the metadata in
terms of attributes and values.

00:13:03.710 --> 00:13:05.740
And you can see a couple of examples here.

00:13:05.740 --> 00:13:09.399
Like the kMDItemPixelWidth and the
kMDItemPixelHeight.

00:13:09.399 --> 00:13:12.769
Or the AcquisitionMake or the
AcquisitionModel of the camera.

00:13:12.769 --> 00:13:18.269
So you can see attributes and values are a very
simple key value way to talk about metadata,

00:13:18.269 --> 00:13:28.649
and we support a couple types, strings, numbers, and
booleans -- but it's not a very structured metadata schema.

00:13:28.649 --> 00:13:36.309
So once you've figured out -- actually wait --
I'm going to talk a little more about attributes.

00:13:36.309 --> 00:13:38.369
So that we support a lot of attributes on the system.

00:13:38.370 --> 00:13:41.460
And you should decide what attributes are
most appropriate for your document types.

00:13:41.460 --> 00:13:44.340
There is a lot of general predefined
attributes that you can use.

00:13:44.340 --> 00:13:46.360
You can see a couple of examples up there.

00:13:46.360 --> 00:13:51.480
There is also a lot of specialized attributes that
might only be appropriate for certain types of files,

00:13:51.480 --> 00:13:55.539
like a video bitrate, or the album of an MP3 file.

00:13:55.539 --> 00:14:00.899
And there's a full list of attributes available in
MDItem.h,
in the Metadata.framework under CoreServices.

00:14:00.899 --> 00:14:05.399
And you can also look in the docs for good
descriptions of what these attributes actually mean,

00:14:05.399 --> 00:14:10.539
if kMDAcquisitionMake is not self-explanatory
for some reason.

00:14:10.539 --> 00:14:14.389
So the other one I wanted to call
out is the kMDItemTextContent.

00:14:14.389 --> 00:14:17.569
This is an attribute that's treated specially by Spotlight.

00:14:17.570 --> 00:14:19.490
It is write and query only.

00:14:19.490 --> 00:14:26.620
Meaning that clients cannot get the
text content back after the fact.

00:14:26.620 --> 00:14:32.580
But it's a -- the contents of the kMDItemTextContent
are placed into a very fast text index

00:14:32.580 --> 00:14:35.950
that we can search very quickly, especially on Leopard.

00:14:35.950 --> 00:14:40.790
And this is useful for any representation
of your document format as text.

00:14:40.789 --> 00:14:45.879
And that can be if you're a word processor, obviously the
text content of the document as the user would see it.

00:14:45.879 --> 00:14:47.840
But you can also be more creative.

00:14:47.840 --> 00:14:53.420
For example, Automator takes the strings from the actions
that you've laid out, the actual strings that would be

00:14:53.419 --> 00:14:56.990
on the screen, and concatenates them together
into the text content.

00:14:56.990 --> 00:15:00.990
And that forms a pretty good representation
of the document in text form.

00:15:00.990 --> 00:15:09.779
So be creative with your apps, if your app is slightly
graphical or not necessarily directly text based.

00:15:09.779 --> 00:15:17.759
So now that you've decided what your application's
attributes -- metadata attributes might be,

00:15:17.759 --> 00:15:20.980
let's talk about how you're actually
going to build one of these plug-ins.

00:15:20.980 --> 00:15:21.980
There's three steps.

00:15:21.980 --> 00:15:23.990
The first is to start with Xcode.

00:15:23.990 --> 00:15:28.710
And we provide these templates for
you for both Spotlight and Quick Look.

00:15:28.710 --> 00:15:35.379
And start with those because they've got a lot of glue
code in them that's very dicey to work out on your own.

00:15:35.379 --> 00:15:40.539
And we've done that for you, so don't bother, basically.

00:15:40.539 --> 00:15:46.059
Then edit the info.plist to declare the UTI
types that your plug-in is going to handle.

00:15:46.059 --> 00:15:51.059
And that would also be a step where you could import
the type declarations if you've got your own UTI type.

00:15:51.059 --> 00:15:54.789
And then implement the callback function.

00:15:54.789 --> 00:15:58.189
Which in the case of Spotlight
would be GetMetadataForFile.

00:15:58.190 --> 00:16:02.950
In the case of Quick Look, it would be GeneratePreview
ForFile, and a couple of others that we'll see later.

00:16:02.950 --> 00:16:09.330
So now that we've got these three steps in front of
us, let's talk about building a Spotlight plug-in.

00:16:09.330 --> 00:16:16.480
So I'd like to invite Julien Jalon
up on stage to walk us through this.

00:16:16.480 --> 00:16:19.430
( Applause )

00:16:19.429 --> 00:16:23.649
>> So the first thing we're going to do,
step one, was to go and make a new project.

00:16:23.649 --> 00:16:25.980
And use the Spotlight Xcode template.

00:16:25.980 --> 00:16:28.009
Which is all the way down at the bottom of the list.

00:16:28.009 --> 00:16:33.009
And we're going to name our project, let's
say, MyBooksSpotlight.

00:16:33.009 --> 00:16:34.340
Let's throw in the desktop

00:16:34.340 --> 00:16:37.330
so that we can find it easier.

00:16:39.340 --> 00:16:46.000
And so the second step, if you remember,
was to edit the info.plist, to use --

00:16:46.000 --> 00:16:50.309
to declare that our plug-in is going to
handle the UTI type that we chose for our app.

00:16:50.309 --> 00:16:52.909
Now, there's all this helpful information
at the top of your --

00:16:52.909 --> 00:16:58.149
at the top of the template's info.plist about
exporting or importing a type declaration.

00:16:58.149 --> 00:17:01.720
We provide all of this commented-out XML for you to use.

00:17:01.720 --> 00:17:03.790
But we're not going to go into that right now.

00:17:03.789 --> 00:17:12.149
We're just going to remove it because it's not
necessary in the case where your UTI is already defined.

00:17:15.369 --> 00:17:22.789
So, you'll see that we have this nice capitalized
text for you to fill in, the supported UTI type.

00:17:22.789 --> 00:17:27.159
Go ahead and let's fill in com.mycompany.mybook,
what was the UTI that we chose.

00:17:27.160 --> 00:17:30.950
And the one other thing that you
have to do in info.plist is you have

00:17:30.950 --> 00:17:34.930
to declare the unique bundle identifier for this bundle.

00:17:34.930 --> 00:17:37.390
And that's down there under CFBundleIdentifier.

00:17:37.390 --> 00:17:40.990
And we're going to change that
com.mycompany.mybook.spotlight

00:17:40.990 --> 00:17:46.470
to uniquely identify our Spotlight
importer plug-in bundle.

00:17:46.470 --> 00:17:50.170
So once we've done that, we can
actually go and write code.

00:17:50.170 --> 00:17:56.430
So for this code we're going to actually change the
type of this file from a .C to an Objective-C file.

00:17:56.430 --> 00:17:58.580
Because we want to take advantage of Foundation.

00:17:58.579 --> 00:18:00.169
And that's fine to do.

00:18:00.170 --> 00:18:05.990
The other thing you have to do when you do
that is to add in the Foundation framework.

00:18:05.990 --> 00:18:08.759
Because you're going to be using Foundation.

00:18:13.839 --> 00:18:19.419
And then we've also got a couple
utility files that we created in advance

00:18:19.420 --> 00:18:22.920
that parse the document format that we used.

00:18:22.920 --> 00:18:27.820
This would be where you fill in
your document's parsing code.

00:18:27.819 --> 00:18:30.980
So the contents of those files are not super-important.

00:18:30.980 --> 00:18:35.250
But once you've got those added in the project,
you can open up GetMetadataForFile.m,

00:18:35.250 --> 00:18:38.599
or .C. There's also all these helpful comments in here

00:18:38.599 --> 00:18:41.059
about what you should be doing and
different options that you have.

00:18:41.059 --> 00:18:43.509
We're just going to remove those for the sake of the demo.

00:18:43.509 --> 00:18:47.799
We're going to move all the contents of this one
callback file, that's GetMetadataForFile.

00:18:47.799 --> 00:18:48.990
Like I said earlier.

00:18:48.990 --> 00:18:53.680
And what this function does is it
calls your plug-in with a path.

00:18:53.680 --> 00:18:56.650
You can see the fourth parameter is path to a file.

00:18:56.650 --> 00:19:02.200
And you're directed to take that path, open it, and do
whatever you're going to do with it, extract the attributes,

00:19:02.200 --> 00:19:06.360
the metadata attributes of that file, and put them --

00:19:06.359 --> 00:19:10.419
add them into the attributes dictionary
that passes the second parameter.

00:19:10.420 --> 00:19:15.529
And then return true or false depending on
your success or failure in dealing with file.

00:19:15.529 --> 00:19:21.829
So we're just going to add some imports to
use the code that we added in the Foundation.

00:19:21.829 --> 00:19:26.389
And here's the entire contents of our Spotlight plug-in.

00:19:26.390 --> 00:19:28.910
The first thing we do is we parse the document out.

00:19:28.910 --> 00:19:31.250
And if we couldn't parse it we're
going to say, ah, we give up

00:19:31.250 --> 00:19:33.000
and return false.

00:19:33.000 --> 00:19:35.410
If we could parse it, we're going to
keep going, and we're going to say, okay,

00:19:35.410 --> 00:19:37.220
let's extract the title from our document.

00:19:37.220 --> 00:19:39.850
And we're going to use the title as a kMDItemTitle

00:19:39.849 --> 00:19:43.529
and the kMDItemDisplayName attributes.

00:19:43.529 --> 00:19:48.410
And then we're going to go on and extract
the author and use that as the kMDItemAuthors

00:19:48.410 --> 00:19:50.790
attribute for the metadata.

00:19:50.789 --> 00:19:53.029
And we're also going to extract that review text.

00:19:53.029 --> 00:20:00.099
Remember that MyBooks app allowed you
to track the review text of these books.

00:20:00.099 --> 00:20:03.939
And we're going to extract that and put
that as the kMDItemTextContent

00:20:03.940 --> 00:20:06.090
so the users could search on something
that was in the review

00:20:06.089 --> 00:20:07.759
and find their documents.

00:20:07.759 --> 00:20:13.589
And then once we've done that we've successfully
parsed and added the metadata attributes,

00:20:13.589 --> 00:20:15.000
and so we're going to return true.

00:20:15.000 --> 00:20:17.230
And so that's it.

00:20:17.230 --> 00:20:19.650
We've just created a Spotlight plug-in.

00:20:19.650 --> 00:20:27.740
We're going to build it, and build succeeded
-- and so let's go back to slides.

00:20:32.329 --> 00:20:36.349
So, once you've built it, we do encourage you to test it.

00:20:36.349 --> 00:20:42.179
And there's this nice command-line utility called
mdimport, which has been around since Tiger,

00:20:42.180 --> 00:20:45.820
but we've enhanced it in Leopard with this -g switch.

00:20:45.819 --> 00:20:51.220
So the way you probably want to use mdimport now
is to call mdimport -g

00:20:51.220 --> 00:20:55.809
and then a path to your import -- your Spotlight plug-in.

00:20:55.809 --> 00:20:59.649
And that will cause mdimport to load only your plug-in.

00:20:59.650 --> 00:21:03.769
And so you can bypass some of the launch
services UTI registration issues

00:21:03.769 --> 00:21:07.069
that some people have run into in the past.

00:21:07.069 --> 00:21:13.069
And also provide a file that you like it
to run on or an entire hierarchy of files.

00:21:13.069 --> 00:21:18.730
And mdimport will run your plug-in
in a similar environment to mdworker.

00:21:18.730 --> 00:21:25.089
And you can debug it there, you can test to
see the performance of your plug-in, etc.

00:21:25.089 --> 00:21:26.879
A couple of switches that are useful.

00:21:26.880 --> 00:21:34.390
-d will give you useful diagnostics about what
mdimport is doing and what your plug-in is doing.

00:21:34.390 --> 00:21:38.550
And you can increase the level of debug output up to four.

00:21:38.549 --> 00:21:40.549
-p summarizes your performance.

00:21:40.549 --> 00:21:46.769
So if you give mdimport the entire hierarchy it's
going to import that whole hierarchy and then report

00:21:46.769 --> 00:21:53.259
if you pass -p, what the most expensive
files were, and how long the average file took,

00:21:53.259 --> 00:21:55.930
and all sorts of good, juicy performance numbers.

00:21:55.930 --> 00:22:00.340
And there's a bunch of other switches too
that are helpful, and I encourage you to look

00:22:00.339 --> 00:22:03.799
man mdimport for those.

00:22:03.799 --> 00:22:08.039
So what are we actually looking for
when we're testing a Spotlight plug-in?

00:22:08.039 --> 00:22:10.069
Well, the first thing is performance.

00:22:10.069 --> 00:22:11.919
And this is super important.

00:22:11.920 --> 00:22:19.370
Because these plug-ins are run in the background and
the user may not understand why their computer is all

00:22:19.369 --> 00:22:23.549
of a sudden slow whenever they save one of your documents.

00:22:23.549 --> 00:22:27.500
So you should really work to minimize the VM impact.

00:22:27.500 --> 00:22:34.420
Don't leak memory, don't leak threads, and
definitely minimize the disk impact of your code.

00:22:34.420 --> 00:22:41.960
If your code is going to be loading a whole bunch of
stuff and then scanning back and forth across the file,

00:22:41.960 --> 00:22:47.940
it may be worth it to refactor your code a little bit
to make it more streamlined for Spotlight importing.

00:22:47.940 --> 00:22:50.289
And the second is stability.

00:22:50.289 --> 00:22:55.470
Because if the program -- sorry, if your
plug-in crashes you're going to be --

00:22:55.470 --> 00:22:59.240
not only is your metadata not going to get
imported so users won't be able to find anything,

00:22:59.240 --> 00:23:00.960
but you're going to disrupt the user because they're going

00:23:00.960 --> 00:23:04.289
to be having these crashing processes
in the background all the time.

00:23:04.289 --> 00:23:06.539
And that does churn the disk a lot, etc.

00:23:06.539 --> 00:23:08.369
And the third thing is scalability.

00:23:08.369 --> 00:23:14.269
And this is even more important in Leopard than it was in
Tiger, because we're pushing Spotlight on to the server,

00:23:14.269 --> 00:23:16.839
and so you're going to have an
order of magnitude or two orders

00:23:16.839 --> 00:23:21.939
of magnitude more files to deal with than you did in Tiger.

00:23:21.940 --> 00:23:26.870
So, you know, test on thousands of
files, or tens of thousands of files.

00:23:26.869 --> 00:23:28.329
Whatever you would expect.

00:23:28.329 --> 00:23:36.139
And test on edge case files, zero byte files,
fuzz your Spotlight plug-in, if you like.

00:23:36.140 --> 00:23:41.220
You know, really beat it up so that
it's proof against the server case.

00:23:41.220 --> 00:23:47.950
So, let's just go back to the demo machine
and I'll show you a little bit of mdimport.

00:23:54.509 --> 00:23:56.230
So -- here's our built plug-in.

00:23:56.230 --> 00:24:00.650
So I'm going to run mdimport -d1.

00:24:00.650 --> 00:24:04.060
To get a little bit of debug output.

00:24:04.059 --> 00:24:09.299
And then -- oops, I want to pass the -g
flag before the path to my plug-in.

00:24:09.299 --> 00:24:14.419
And then I've got a bunch of files here.

00:24:14.420 --> 00:24:15.850
I've picked one.

00:24:15.849 --> 00:24:18.240
MyBook file.

00:24:18.240 --> 00:24:25.559
And you can see the mdimport is pretty sparse with
-d1. It says, hey, I imported this document

00:24:25.559 --> 00:24:27.970
which is the one I said of the right UTI.

00:24:27.970 --> 00:24:33.370
And that's something that can be tricky, if
you're not seeing your imports work properly,

00:24:33.369 --> 00:24:35.519
check to see if the UTI is properly registered.

00:24:35.519 --> 00:24:37.519
And this is the plug-in that I used.

00:24:37.519 --> 00:24:40.250
Okay. That all looks great, but
did I get the right attributes?

00:24:40.250 --> 00:24:46.690
Well, if I bump the debug level up one more and clear
the screen to make it a little bigger because it's going

00:24:46.690 --> 00:24:52.029
to be a more spewy -- you'll see that,
hey, you know, I got the authors correctly,

00:24:52.029 --> 00:24:58.500
and I got the UTIs correctly imported,
and the title is right.

00:24:58.500 --> 00:25:00.549
And here's the text content.

00:25:00.549 --> 00:25:02.809
Hey, there's all this good stuff.

00:25:02.809 --> 00:25:04.319
So that seems to work properly.

00:25:04.319 --> 00:25:06.159
So it looks like my plug-in is working.

00:25:06.160 --> 00:25:08.740
Now let's go back to slides.

00:25:08.740 --> 00:25:15.289
But -- just -- we would do more testing
in the real world than just that.

00:25:15.289 --> 00:25:19.079
But that's just a demo of where mdimport can go.

00:25:19.079 --> 00:25:24.210
So once you've got a tested and working
Spotlight plug-in, where are you going to put it?

00:25:24.210 --> 00:25:26.450
This is very similar to the Quick Look case.

00:25:26.450 --> 00:25:32.559
So if you've been sleeping through
this so far you might want to wake up.

00:25:32.559 --> 00:25:34.559
The Spotlight plug-in can go in two places.

00:25:34.559 --> 00:25:43.279
It can go in your application bundle inside your Application
-- inside the Contents/Library/Spotlight directory.

00:25:43.279 --> 00:25:47.710
Or you can put it in as a stand-alone
importer in Library/Spotlight.

00:25:47.710 --> 00:25:54.519
And this would be a good -- it's also good to provide
your plug-in as a stand-alone plug-in for the server case,

00:25:54.519 --> 00:26:01.039
because server admins may not want to install your app, but
they still may want your files to be indexed on the server.

00:26:01.039 --> 00:26:02.680
So that's something to think about.

00:26:02.680 --> 00:26:04.259
And there's a precedence for these plug-ins.

00:26:04.259 --> 00:26:07.190
But that only happens if two plug-ins claim the same UTI.

00:26:07.190 --> 00:26:13.059
So in the general case of custom document formats
that's not something you have to worry about.

00:26:13.059 --> 00:26:19.230
So let's go back to the demo machine and I'll
show you what happens when we install this thing.

00:26:19.230 --> 00:26:26.519
So I've still got the content of this file
that I -- that I ran my plug-in against.

00:26:26.519 --> 00:26:31.269
And there's this unique term here, Eiji,
which is one of the characters from this book.

00:26:31.269 --> 00:26:36.019
So I am going copy that and save that
off for demo purposes in a moment.

00:26:36.019 --> 00:26:39.500
But I just wanted to call that guy out.

00:26:39.500 --> 00:26:44.170
So I'm going go back into my released build.

00:26:44.170 --> 00:26:45.800
And here's my Spotlight importer.

00:26:45.799 --> 00:26:50.220
I am just going to drop it into
the Library/Spotlight folder.

00:26:50.220 --> 00:26:54.120
Now I'm going to replace the one that was there.

00:26:54.119 --> 00:26:59.479
And then I'm going to run mdimport -r on that plug-in.

00:26:59.480 --> 00:27:02.910
This is something that you'll see
on the mdimport man page.

00:27:02.910 --> 00:27:10.840
And this will cause all of the documents that were
associated with the UTIs of this plug-in claims

00:27:10.839 --> 00:27:13.349
to be reprocessed with the newly installed plug-in.

00:27:13.349 --> 00:27:19.599
So that might be something good to do at install
time for your apps so the documents on the system

00:27:19.599 --> 00:27:27.109
that have your UTI will be reprocessed and indexed
so the users can find them without saving them again.

00:27:27.109 --> 00:27:29.099
So I am going to run that.

00:27:29.099 --> 00:27:31.250
It runs very quickly.

00:27:31.250 --> 00:27:36.430
Now if I go in here and type Eiji, like
I had before, hey, I find that file.

00:27:36.430 --> 00:27:38.870
Great. My Spotlight plug-in works.

00:27:38.869 --> 00:27:43.479
And we can go back to the slides.

00:27:43.480 --> 00:27:48.890
( Applause )

00:27:48.890 --> 00:27:52.350
>> So this was Spotlight.

00:27:52.349 --> 00:27:57.609
And that's a really important part of
the fFinder user experience in Leopard.

00:27:57.609 --> 00:27:59.490
But I know you're all saying,

00:27:59.490 --> 00:28:01.120
it wasn't pretty enough.

00:28:01.119 --> 00:28:04.129
We didn't have that beautiful, Cover Flow experience.

00:28:04.130 --> 00:28:06.230
All we had was these generic document icons.

00:28:06.230 --> 00:28:09.470
And I don't really know what I'm
looking at when I'm looking at those.

00:28:09.470 --> 00:28:14.370
Well, the technology that you need to
provide those awesome inline previews

00:28:14.369 --> 00:28:17.109
and thumbnails for your documents is Quick Look.

00:28:17.109 --> 00:28:22.009
In order to talk about Quick Look I'd like to
invite once again Julien Jalon up to the stage.

00:28:22.009 --> 00:28:24.089
And hand you over to him.

00:28:24.089 --> 00:28:25.689
>> Thank you, Jonah

00:28:25.690 --> 00:28:29.980
( Applause )

00:28:29.980 --> 00:28:30.579
>> Hello, everyone.

00:28:30.579 --> 00:28:40.529
My name is Julien, and I am a Quick Look engineer, and
we will talk about Quick Look really is, and how it works.

00:28:40.529 --> 00:28:44.460
And how you can participate in Quick Look to make your
documents look great in Finder.

00:28:44.460 --> 00:28:48.769
So as we mentioned earlier, Quick Look
is a system-wide preview service.

00:28:48.769 --> 00:28:51.420
And it's mainly used in Finder.

00:28:51.420 --> 00:28:58.590
We wanted to move away from the generic icons and
only provide view information on your document types.

00:28:58.589 --> 00:29:05.409
And we wanted to move to visual informations
that provide information on your document contents.

00:29:05.410 --> 00:29:13.330
And that's what really -- what we do in finder now, so you can
really find your document and identify them in the code.

00:29:13.329 --> 00:29:17.589
And what's even more important
is generation of the Cover Flow.

00:29:17.589 --> 00:29:22.019
Because the main feature of Cover Flow is
for you to spread through a lot of documents

00:29:22.019 --> 00:29:26.730
and visually identifies your document
and stop on it when you find it.

00:29:26.730 --> 00:29:29.670
We will also introduce what we call the Quick Look panel.

00:29:29.670 --> 00:29:33.220
The Quick Look panel let's you take a
different look in your document content.

00:29:33.220 --> 00:29:37.589
And the QuickLook panel is very,
very interesting in Time Machine.

00:29:37.589 --> 00:29:42.099
It's a great help for Time Machine because
it let's you find the precise version

00:29:42.099 --> 00:29:44.919
of your documents when you go back in time.

00:29:47.190 --> 00:29:52.330
We are also building -- the Quick Look panel
in Mail and iCal so you can take a look --

00:29:52.329 --> 00:29:56.369
take a look at your documents,
your mail, and even attachments.

00:29:56.369 --> 00:29:59.119
Also, Quick Look is compatible with iChat

00:29:59.119 --> 00:30:04.879
so you can really easily share your documents
in video chat using the Quick Look panel.

00:30:04.880 --> 00:30:11.490
So really, Quick Look is a technology that helps
all of this technology, like Spotlight, Finder,

00:30:11.490 --> 00:30:18.549
Time Machine, Mail, iChat, etc., so it's really
an important technology for (Inaudible). Technically,

00:30:18.549 --> 00:30:25.000
while QuickLook is really about previews we have two very
different terms for the previews Quick Look provides.

00:30:25.000 --> 00:30:34.869
The first one is Thumbnails which is a static image that
represent your document in a compact form as a static image.

00:30:34.869 --> 00:30:38.449
We also have what we call previews, full previews.

00:30:38.450 --> 00:30:39.890
That's what you see in the Quick Look panel.

00:30:39.890 --> 00:30:47.200
In fact, previews are a representation of your document's
content in several different common types, like,

00:30:47.200 --> 00:30:56.049
essentially images, movies, audios,
QuickTime supported, PDF, and HTML.

00:30:56.049 --> 00:30:59.799
The goal of the panel is to for you to navigate
through your documents.

00:30:59.799 --> 00:31:01.509
Not for everything.

00:31:01.509 --> 00:31:05.819
It's really not about replacing your applications.

00:31:05.819 --> 00:31:10.980
But to support every kind of document,
Quick Look comes with a side kick.

00:31:10.980 --> 00:31:17.000
It's a small daemon process named quicklookd. And
quicklookd can take any kind of document and uses --

00:31:17.000 --> 00:31:22.650
using the same plug-in architecture that
you have already listened to for Spotlight,

00:31:22.650 --> 00:31:28.920
quicklookd can produce thumbail documents or translate your
documents that the QuickLook panel supports.

00:31:28.920 --> 00:31:32.940
In your part, we have already built
in support for several document types.

00:31:32.940 --> 00:31:44.539
Maybe you have already seen the support for Word or Excel
documents, but we are also supporting V-cards, events,

00:31:44.539 --> 00:31:46.509
mails, fonts, or iChat transcripts which is quite

00:31:46.509 --> 00:31:50.039
handy when you are searching for a description
in your iChats.

00:31:50.039 --> 00:31:53.139
And since we really want to support any kind of document,

00:31:53.140 --> 00:31:59.830
we are asking you to support your
own kind of documents in Quick Look.

00:31:59.829 --> 00:32:01.750
So how do you do that?

00:32:01.750 --> 00:32:03.799
We tried to make that as simple as possible.

00:32:03.799 --> 00:32:06.419
You have two ways to do that.

00:32:06.420 --> 00:32:11.410
If your document type is a document bundle or document
package, you can pre-generate your previews and thumbnails

00:32:11.410 --> 00:32:15.310
and put them inside -- inside your document bundle.

00:32:15.309 --> 00:32:18.730
Or you can create them on demand.

00:32:18.730 --> 00:32:22.779
As Jonah already mentioned, document
bundles are just folders,

00:32:22.779 --> 00:32:28.289
and Mac OS X is smart enough to
just display a flat file to the user.

00:32:28.289 --> 00:32:34.339
And it's a very, very useful way to just pack
all of your document resources in your document.

00:32:34.339 --> 00:32:40.609
And since it's just a folder, you can create a subfolder
in it, named quicklookd. You can do that at save time.

00:32:40.609 --> 00:32:45.809
And you can put an image file that will be used as
your document thumbnail and the preview file be HTML,

00:32:45.809 --> 00:32:52.490
QuickTime, whatever the Quick Look panel supports, and it
will be used as your document previews.

00:32:52.490 --> 00:32:54.620
Pre-generated previews are really nice.

00:32:54.619 --> 00:33:00.599
Nice for you because it's most probably the
simplest way for you to support Quick Look.

00:33:00.599 --> 00:33:04.339
Since additional code will reside in
your application code

00:33:04.339 --> 00:33:11.589
and will be executed inside your application you will
probably not have to refactor all your code a lot.

00:33:11.589 --> 00:33:14.599
It's really so nice for us, because
it's really cheap to display.

00:33:14.599 --> 00:33:22.609
quicklookd knows how to find these files inside your
document bundles, and view them directly as native previews.

00:33:22.609 --> 00:33:27.779
Of course, pre-generated previews comes
at the expense of your document size.

00:33:27.779 --> 00:33:34.869
Because putting a preview file inside your document
naturally significantly increases your document size.

00:33:34.869 --> 00:33:40.199
And so it will make your saving longer as you will
have to produce these additional files at save time.

00:33:40.200 --> 00:33:44.029
And of course, it only works for document bundles.

00:33:44.029 --> 00:33:47.049
So that's why we provide the more
active way to support Quick Look.

00:33:47.049 --> 00:33:54.109
In fact, we are using the same kind of ideas
that you have already seen in Spotlight.

00:33:54.109 --> 00:33:58.619
You just have to write a specific Quick Look
plug-in binded to your document's UTI.

00:33:58.619 --> 00:34:03.669
And whenever a client, for example, is assigned
to ask for a thumbnail or a preview,

00:34:03.670 --> 00:34:10.950
quicklookd will load your plug-in and
call some -- callback you have to implement.

00:34:10.949 --> 00:34:14.919
And you will have just thrown back the main
difference with Spotlight is you don't have

00:34:14.920 --> 00:34:18.039
to provide attributes and values in a dictionary.

00:34:18.039 --> 00:34:24.789
Instead you will get an object reference to the request
itself, and using the QuickLook.framework API we just

00:34:24.789 --> 00:34:29.289
answer to that request, and we have different ways to do that.

00:34:29.289 --> 00:34:33.090
So let's take a look at really
what the code looks like.

00:34:33.090 --> 00:34:37.280
So, here is a Generate Thumbnail callback
you will
have to implement.

00:34:37.280 --> 00:34:42.810
As you can see there is this QLThumbnailRequestRef
object, which represents the request itself.

00:34:42.809 --> 00:34:48.650
That is the one that will manipulate transfer
to Quick Look.

00:34:48.650 --> 00:34:51.410
You have the URL for the file UTI, same kind
of things you
already seen in Spotlight.

00:34:51.409 --> 00:35:00.199
So there is this maxSize parameter which is, which is
the desired maximum size the ThumbnailRequst asks for.

00:35:00.199 --> 00:35:03.789
Generally, you won't have to worry about
it, because Quick Look will enforce it.

00:35:03.789 --> 00:35:06.719
But sometimes it can be useful to take a look at it.

00:35:06.719 --> 00:35:11.859
Because -- the smaller the thumbnail is we
won't -- there is less attention to put in there,

00:35:11.860 --> 00:35:15.440
and generally, the faster we want you to do be.

00:35:15.440 --> 00:35:19.130
So, how do you produce your thumbnail callback.

00:35:19.130 --> 00:35:20.450
We have two ways to do that.

00:35:20.449 --> 00:35:22.839
The first way, just draw it.

00:35:22.840 --> 00:35:27.150
Just ask for CGContext to the request.

00:35:27.150 --> 00:35:31.550
And you draw your thumbnail in there and
once you're done you flush the context.

00:35:31.550 --> 00:35:36.240
At this point Quick Look will create the resulting
image and send it back to the client.

00:35:36.239 --> 00:35:43.239
But if you are -- your image directly available,
for example as jpgData or any image-supported format,

00:35:43.239 --> 00:35:50.349
just send it to QuickLook using the
QLThumbnailRequestSetImageWithData API.

00:35:50.349 --> 00:35:56.159
QuickLook knows how to render that
and will create the image accordingly.

00:35:56.159 --> 00:36:01.389
And there is a callback you have to implement to
generate previews. Almost the same thing

00:36:01.389 --> 00:36:07.329
as except there is no maximum size because
we don't have the notion of maximum size for previews.

00:36:07.329 --> 00:36:11.340
At this point when you have to implement
your preview callback you will have

00:36:11.340 --> 00:36:14.600
to decide what kind of type you will provide to Quick Look.

00:36:14.599 --> 00:36:15.610
You have several choice.

00:36:15.610 --> 00:36:18.530
We have already seen that.

00:36:18.530 --> 00:36:20.310
QuickTime, HTML, PDF -- whatever.

00:36:20.309 --> 00:36:26.079
We tried to make it as simple -- as simple as
possible for you to implement that callback.

00:36:26.079 --> 00:36:32.159
If you decide to provide PDF for images you can
just draw your preview directly using the same kind

00:36:32.159 --> 00:36:36.769
of ideas we provide for thumbnails you
just ask for context, CGContext,

00:36:36.769 --> 00:36:39.889
you draw in it, and once you're done you flush it.

00:36:39.889 --> 00:36:49.529
We also provide the same kind of APIs what you see here
to create a full PDF multipage context, which is,

00:36:49.530 --> 00:36:55.320
QLPreviewRequestCreatePDFContext so you can provid
real full page previews.

00:36:55.320 --> 00:36:59.220
Also, there is a way to provide previews is
just to give us --

00:36:59.219 --> 00:37:02.329
the raw data after preview in one of
the types your documents supports.

00:37:02.329 --> 00:37:08.489
And one of the good examples for that
is to create -- is to use HTML previews.

00:37:08.489 --> 00:37:14.899
You -- you use generally, HTML previews if your
document presentation or the one you want to provide

00:37:14.900 --> 00:37:17.880
to Quick Look has no particular layout or texture.

00:37:17.880 --> 00:37:21.710
So it's a good way to provide previews for some documents,

00:37:21.710 --> 00:37:26.880
like you create HTML dynamically
and send it back to Quick Look.

00:37:28.519 --> 00:37:35.440
The preview API lets you specify some properties
that will be sent alongside your previewed data.

00:37:35.440 --> 00:37:42.010
It's generally -- generally useful when you
want to add Quick Look under your preview.

00:37:42.010 --> 00:37:44.720
One of the good examples for that is for HTML previews.

00:37:44.719 --> 00:37:51.189
Because if you are using HTML previews you will
likely have to include some images in your HTML.

00:37:51.190 --> 00:37:56.280
So we will have to provide these images to
Quick Look so that it can display HTML correctly.

00:37:56.280 --> 00:38:03.310
So these attachments will just have to pack them and
put them in the kQLPreviewPropertyAttachmentsKey

00:38:03.309 --> 00:38:07.099
and send them alongside your preview
data with the properties.

00:38:07.099 --> 00:38:14.409
And in your HTML you will just have to reference these
images or attachments, whatever attachments you are using,

00:38:14.409 --> 00:38:18.409
your HTML that you are using, (Inaudible).

00:38:18.409 --> 00:38:26.059
So -- now we have enough knowledge to make this
MyBooks documents look much nicer and finer.

00:38:26.059 --> 00:38:28.509
So we won't go through all the set up

00:38:28.510 --> 00:38:30.540
we have already seen for Spotlight.

00:38:30.539 --> 00:38:32.059
And we will just take a look at the code.

00:38:32.059 --> 00:38:34.529
So first we have to do thumbnails.

00:38:34.530 --> 00:38:40.360
We have to decide what we will put
in the thumbnail for my document.

00:38:40.360 --> 00:38:42.190
A very good candidate is just the cover.

00:38:42.190 --> 00:38:42.940
So that's what we'll do.

00:38:42.940 --> 00:38:46.800
And in fact the good thing is that the cover
is stored inside the document as JPEG.

00:38:46.800 --> 00:38:48.650
So let's use that.

00:38:48.650 --> 00:38:55.050
So let's take a look at the thumbnail --
thumbnail callback. So really simple.

00:38:55.050 --> 00:38:57.320
First you parse the document.

00:38:58.429 --> 00:38:59.480
Second thing.

00:38:59.480 --> 00:39:03.539
This is a main difference between Spotlight and Quick Look.

00:39:03.539 --> 00:39:09.699
Quick Look callbacks once an error has returned and (inaudible)
just have to return no error whatever happens.

00:39:09.699 --> 00:39:11.739
Even if your parsing fails.

00:39:11.739 --> 00:39:15.699
It's not yours, and you are free to use noErr, for example.

00:39:15.699 --> 00:39:17.909
So you parse your document.

00:39:17.909 --> 00:39:22.859
And then you just get to your cover
JPEG data from the document.

00:39:22.860 --> 00:39:28.329
And send it back to Quick Look using
the QLThumbnailRequestSetImageWithData API.

00:39:28.329 --> 00:39:29.829
And that's it.

00:39:29.829 --> 00:39:31.190
You support thumbnails.

00:39:31.190 --> 00:39:34.750
So now we'll go in the preview part.

00:39:34.750 --> 00:39:38.440
And we have to decide what kind of preview we will use.

00:39:38.440 --> 00:39:43.260
Our books are just to cover title, author, and review,
not specifically (Inaudible) very graphical.

00:39:43.260 --> 00:39:46.720
So what we'll use is just HTML previews.

00:39:46.719 --> 00:39:47.669
So that's what we'll do.

00:39:47.670 --> 00:39:52.730
And to do that we start from very basic HTML templates.

00:39:52.730 --> 00:39:55.780
Something that I designed very fast.

00:39:55.780 --> 00:39:58.300
Not very nice, but maybe sufficient.

00:39:58.300 --> 00:40:05.750
So you will see that on the top left you will have
the cover, then the title, and below the review.

00:40:05.750 --> 00:40:07.550
That will be our preview.

00:40:07.550 --> 00:40:11.240
That's what we'll use to create previews for MyBooks
documents.

00:40:11.239 --> 00:40:14.939
So let's get a look at the real code.

00:40:14.940 --> 00:40:20.720
First, yeah -- so first thing we
start by parsing the document.

00:40:20.719 --> 00:40:23.469
Same thing as for thumbnails.

00:40:23.469 --> 00:40:29.469
And then we have a very great API to
manipulate XML or HTML data.

00:40:29.469 --> 00:40:31.709
It is an XML document.

00:40:31.710 --> 00:40:33.630
And that's what we will use.

00:40:33.630 --> 00:40:37.680
In fact we will really start from the HTML we were just in.

00:40:37.679 --> 00:40:45.250
Read it using NSXMLDocument and filling the node using
the API NSXMLElement, NSXMLNode, stuff like that.

00:40:45.250 --> 00:40:53.230
It's very, very handy if you are producing
HTML previews that is a very good way to do

00:40:53.230 --> 00:41:00.360
that because NSXML will undo all the programs of escaping
stuff and creating correct and valid HTML.

00:41:00.360 --> 00:41:02.730
So this is there.

00:41:02.730 --> 00:41:06.889
Then we'll have to -- we have an
attachment for our previews.

00:41:06.889 --> 00:41:09.079
It's a cover that -- it's a small image.

00:41:09.079 --> 00:41:12.420
And we want to send it alongside the preview that I sent.

00:41:12.420 --> 00:41:13.550
The HTML that I sent.

00:41:13.550 --> 00:41:15.220
So that's what we'll do then.

00:41:15.219 --> 00:41:20.519
We get the cover data like we did for
the thumbnail and we pack it in attachments.

00:41:20.519 --> 00:41:22.559
The formatting of the packing is very simple.

00:41:22.559 --> 00:41:27.340
It's just a dictionary telling,
okay, this is data, it's jpeg.

00:41:27.340 --> 00:41:29.390
And it will be named cover.jpg.

00:41:29.389 --> 00:41:36.839
Which means that in the HTML file we just refer
to data using CID: converted JPEG.

00:41:36.840 --> 00:41:38.090
And that's it.

00:41:38.090 --> 00:41:42.750
We have our properties, we have our
HTML data, we just send it

00:41:42.750 --> 00:41:49.519
to Quick Look using the QLPreviewRequestSetData
Representation API and we have our plug-in.

00:41:49.519 --> 00:41:51.280
So that be that.

00:41:51.280 --> 00:41:56.670
Should be quite -- great.

00:41:56.670 --> 00:41:58.900
So, we'll test it right away.

00:41:58.900 --> 00:42:02.230
So -- we will install it.

00:42:02.230 --> 00:42:03.740
Same thing as for Spotlight.

00:42:03.739 --> 00:42:06.389
Library/QuickLook.

00:42:06.389 --> 00:42:09.339
And no -- oh.

00:42:09.340 --> 00:42:13.329
Yes, sometimes Quick Look takes one or two minutes to detect

00:42:13.329 --> 00:42:17.679
that there is a new plug-in and
refreshes its plug-in database.

00:42:17.679 --> 00:42:21.909
So what we will do is manually force QuickLook
to reset the data,

00:42:21.909 --> 00:42:28.199
so there is a small tool we'll talk about in
a minute, which is qlmanage.

00:42:28.199 --> 00:42:30.619
Okay. Great.

00:42:30.619 --> 00:42:33.309
And now let's try it again.

00:42:33.309 --> 00:42:35.289
And that's it.

00:42:35.289 --> 00:42:41.320
( Applause )

00:42:41.320 --> 00:42:48.260
>> These things I find very nice to browse books,
and we can take a deeper look in the book description.

00:42:48.260 --> 00:42:55.810
We also added some links so that you can search
in Google for the photo of the books.

00:42:55.809 --> 00:42:59.299
And you can do everything you want since it's HTML.

00:42:59.300 --> 00:43:00.280
I think that's all.

00:43:00.280 --> 00:43:02.790
Let's go back to the presentation.

00:43:02.789 --> 00:43:03.509
Thank you, Jonah.

00:43:03.510 --> 00:43:11.740
( Applause )

00:43:11.739 --> 00:43:17.029
>> So as for Spotlight to provide a small tool,
which is a Swiss Army Knife for Quick Look.

00:43:17.030 --> 00:43:23.050
You have already seen that in the
demonstration to reset the plug-in database,

00:43:23.050 --> 00:43:25.019
to make sure everything is nice so that you can test it.

00:43:25.019 --> 00:43:30.829
It is very handy when you develop your plug-ins
because you are continually installing it --

00:43:30.829 --> 00:43:33.489
them -- and removing them, modifying them.

00:43:33.489 --> 00:43:35.479
So it's really useful to use that.

00:43:35.480 --> 00:43:36.920
But qlmanage can do more.

00:43:36.920 --> 00:43:41.119
And especially can let you really debug your plug-in.

00:43:41.119 --> 00:43:46.219
Because qlmanage can execute your plug-in in a very
similar environment as quicklookd.

00:43:46.219 --> 00:43:50.629
So you can use qlmanage in Xcode as a custom executable.

00:43:50.630 --> 00:43:55.700
Just use -p or -t to test previews of thumbnails.

00:43:55.699 --> 00:44:00.210
And you can use GDB Graphical Interface to break
in your code using qlmanage.

00:44:00.210 --> 00:44:01.889
So it's very, very useful.

00:44:01.889 --> 00:44:09.150
And also since your plug-in won't be properly registered
until it's installed, we provide -c and -g

00:44:09.150 --> 00:44:14.650
to override the UTI checking launch services
registration of everything so you can force everything,

00:44:14.650 --> 00:44:21.539
You can force Xcode or qlmanage to use your plug-in
and don't care about installing your plug-in first.

00:44:21.539 --> 00:44:22.969
qlmanage can do a lot of stuff.

00:44:22.969 --> 00:44:29.239
So really let's -- go through the man page.

00:44:29.239 --> 00:44:32.769
And once you are done just install your plug-in,
nothing new here.

00:44:32.769 --> 00:44:35.719
It's exactly the same as for Spotlight.

00:44:35.719 --> 00:44:40.619
You can use your plug-in as standalone and put it
in a well-known location, like /Library

00:44:40.619 --> 00:44:44.289
/QuickLook, or embedded in your application.

00:44:45.409 --> 00:44:48.359
So let's talk about optimization.

00:44:48.360 --> 00:44:52.269
You will have to help Quick Look under your plug-in.

00:44:52.269 --> 00:44:54.369
You can do that in two ways.

00:44:54.369 --> 00:45:00.819
The first way -- the first thing you have to do
is optimize how Quick Look will call your plug-in.

00:45:00.820 --> 00:45:08.880
You can specify static properties inside your info-plist
of your plug-in, so QuickLook knows even before loading

00:45:08.880 --> 00:45:15.070
your plug-in, even before calling your callbacks what to
do with your plug-in and how to call it.

00:45:15.070 --> 00:45:19.780
And once your plug-in is called you can
specify some dynamic properties.

00:45:19.780 --> 00:45:24.330
We have already seen some with
attachment stuff, but there are more.

00:45:24.329 --> 00:45:28.730
So you can help Quick Look previews
once you have produced them.

00:45:28.730 --> 00:45:34.309
So the main thing you will have to tell Quick Look is
how thread friendly is your plug-in.

00:45:34.309 --> 00:45:40.809
Because quicklookd is multithreaded so we
can dispatch several requests at the same time.

00:45:40.809 --> 00:45:46.409
By default we consider that your plug-in is not thread-
safe, which means that we never, will never dispatch

00:45:46.409 --> 00:45:49.849
or pull in -- call your plug-in twice at the same time.

00:45:49.849 --> 00:45:54.480
But if your code is thread-safe tell us you are
using the QLSupportsConcurrentRequests property.

00:45:54.480 --> 00:46:00.000
But maybe your code does not even
like being dispatched in a thread.

00:46:00.000 --> 00:46:04.570
Not just because of your code, but maybe because
of the underlying frameworks you are using.

00:46:04.570 --> 00:46:08.300
For example, WebView does not like
to be called in the non-main thread.

00:46:08.300 --> 00:46:15.789
So if this is the case you just have to tell Quick Look
using the QLNeedsToBeRunInMainThread property.

00:46:15.789 --> 00:46:21.969
The other static properties you can provide are the minimum
thumbnail size, such as who else is calling your plug-in.

00:46:21.969 --> 00:46:26.099
Because maybe your thumbnail will produce if
they are too small, they will be unreadable,

00:46:26.099 --> 00:46:29.299
not very useful, and in fact it's not worth calling them.

00:46:29.300 --> 00:46:35.269
So we'll just use the generic icon,
and this will make things faster.

00:46:35.269 --> 00:46:42.880
And so you can provide roughly the size of the
preview, you will -- you will provide in the end.

00:46:42.880 --> 00:46:44.550
Maybe it won't be the exact size.

00:46:44.550 --> 00:46:48.350
But it is very important because the
Quick Look panel has to be very reactive.

00:46:48.349 --> 00:46:54.049
When the users ask for the Quick Look panel, if
your plug-in takes too long, the panel will still open.

00:46:54.050 --> 00:47:00.590
So if you provide that size in your info.plist
we will be able to open it in a good size.

00:47:00.590 --> 00:47:04.039
So you won't have to resize it too much.

00:47:05.269 --> 00:47:10.099
But once you are in your code, you know what
the size of your previews will exactly be.

00:47:10.099 --> 00:47:15.869
So you can provide them using the
PropertyWidth and PropertyHeightKey,

00:47:15.869 --> 00:47:20.809
so we can really size the prepanel accordingly.

00:47:20.809 --> 00:47:23.670
So the last property you can provide is display name.

00:47:23.670 --> 00:47:29.800
The display name is used as the Quick Look panel title.

00:47:29.800 --> 00:47:34.560
When developing your plug-ins you
will have to have two concerns.

00:47:34.559 --> 00:47:36.449
The first is performance.

00:47:36.449 --> 00:47:38.750
It's as important as for Spotlight.

00:47:38.750 --> 00:47:42.500
Thumbnails need to be extremely fast, insanely fast.

00:47:42.500 --> 00:47:46.230
Because we are generally displaying a bunch of them.

00:47:46.230 --> 00:47:51.650
So if your plug-in takes time the user experience
will
be very bad.

00:47:51.650 --> 00:47:58.289
And it's even more important with the Cover Flow,
because if your plug-in takes a real long time to

00:47:58.289 --> 00:48:06.449
produce thumbnails, the user will only see placeholders.
This will defeat the whole purpose of the Cover Flow.

00:48:06.449 --> 00:48:13.609
So you will have to find a balance between speed of
generation and quality, and level of details.

00:48:13.610 --> 00:48:20.470
And we really think that the best way to provide
thumbnails is just to pregenerate them inside your

00:48:20.469 --> 00:48:25.259
document and provide them directly using the
QLThumbnailRequestSetImageWithData() API.

00:48:25.260 --> 00:48:29.180
Like we did for the MyBooks document.

00:48:29.179 --> 00:48:35.449
It generally is the best way to provide thumbnails because
it won't take too much size inside your document,

00:48:35.449 --> 00:48:38.779
and it will be very, very cheap to display.

00:48:38.780 --> 00:48:46.560
You won't have to load the whole document to see how you
will lay out the whole thumbnail and stuff like that.

00:48:46.559 --> 00:48:47.789
Previews need to be fast too.

00:48:47.789 --> 00:48:53.050
Maybe not as extremely fast, but really, really fast still.

00:48:53.050 --> 00:49:03.450
Because the user experience we expect from new parties,
the
user sees a thumbnail, an icon in Cover Flow, and opens a

00:49:03.449 --> 00:49:06.399
panel, and immediately you're sending
him off to the QuickLook panel.

00:49:06.400 --> 00:49:11.139
And sees exactly what's in -- what's in the document.

00:49:11.139 --> 00:49:14.000
But if your preview takes too long
we will have to open the panel.

00:49:14.000 --> 00:49:18.000
And the user will see the loading indicator.

00:49:18.000 --> 00:49:24.659
And it's really, really a bad experience because we expect
to really see the contents of the document right away.

00:49:24.659 --> 00:49:26.769
It's what all Quick Look is about.

00:49:26.769 --> 00:49:28.469
That it's quick.

00:49:28.469 --> 00:49:31.109
So like for thumbnails you will have to find
a proper balance.

00:49:31.110 --> 00:49:35.070
And in fact quicklookd won't let you take too much time.

00:49:35.070 --> 00:49:38.059
So -- think about reducing the number of pages

00:49:38.059 --> 00:49:42.610
if you are producing multipage previews
for very large files.

00:49:42.610 --> 00:49:46.019
You don't need to provide the full
details of your documents.

00:49:46.019 --> 00:49:48.690
We are not your application.

00:49:48.690 --> 00:49:51.500
So we -- thumbnails need to be extremely fast.

00:49:51.500 --> 00:49:54.429
Previews need to be fast too.

00:49:54.429 --> 00:49:57.509
The other concern you might have is design.

00:49:57.510 --> 00:50:02.090
Of course, your thumbnails and previews
have to be very good looking.

00:50:02.090 --> 00:50:07.570
But just focus on the content,
because we are focusing on the decor.

00:50:07.570 --> 00:50:14.210
You focus on the content, and we will try to
add the proper decor around your thumbnail.

00:50:14.210 --> 00:50:18.199
For example, we will add a nice icon
touch, you will see in the Finder.

00:50:18.199 --> 00:50:23.609
Or we can -- we will be able to use a thumbnail
in the 3D environment like the Cover Flow.

00:50:23.610 --> 00:50:27.010
So don't add -- don't add bells
and whistles in your thumbnails.

00:50:27.010 --> 00:50:28.760
Just the content.

00:50:28.760 --> 00:50:31.260
The same thing is true for your previews.

00:50:31.260 --> 00:50:35.240
Because you should not assume that your previews
will just be displayed in the Quick Look panel.

00:50:35.239 --> 00:50:36.250
And in fact, they are not.

00:50:36.250 --> 00:50:42.159
They are also displayed inside the Cover Flow, for
example. You have already seen that you can scroll

00:50:42.159 --> 00:50:45.690
through pages in Cover Flow. This is a preview.

00:50:45.690 --> 00:50:50.440
And this -- the previews are also used in
the info panel of preview -- of Finder.

00:50:50.440 --> 00:50:53.929
And -- or the column preview, too.

00:50:53.929 --> 00:50:57.359
And we can use it everywhere, in fact.

00:50:57.360 --> 00:51:00.690
So what should you remember about Quick Look?

00:51:00.690 --> 00:51:06.070
The goal of Quick Look was to move away from
generic icons and to provide a visual information

00:51:06.070 --> 00:51:08.559
about the document contents using thumbnails.

00:51:08.559 --> 00:51:12.650
So thumbnails are compact so we
can display a bunch of them.

00:51:12.650 --> 00:51:19.400
And if a user wants to he can really get
a deeper look at his document content.

00:51:19.400 --> 00:51:22.099
But Quick Look is not about replacing your application.

00:51:22.099 --> 00:51:26.420
Your application provides the full level
of details and full editing capabilities.

00:51:26.420 --> 00:51:32.519
This is your application, not Quick Look.

00:51:32.519 --> 00:51:37.690
Previews are an interpretation of
your document using a limited set of types.

00:51:37.690 --> 00:51:39.349
We have already seen that.

00:51:39.349 --> 00:51:46.610
Essentially, PDF, HTML, QuickTime, images, other
stuff is not very useful, so don't worry about them.

00:51:46.610 --> 00:51:51.700
And you will have to pick the ones that is best
suited to your documents for presentation.

00:51:51.699 --> 00:51:56.189
So really, it's very easy to provide
thumbnails and previews for your documents.

00:51:56.190 --> 00:52:02.559
It will -- they will integrate very nicely
in Finder and other parts of the OS.

00:52:02.559 --> 00:52:06.170
So this is something very important for us.

00:52:06.170 --> 00:52:09.590
And once you have done that, it is very simple.

00:52:09.590 --> 00:52:14.320
Just use the Xcode template, fill in the
info.plist
implement the callback,

00:52:14.320 --> 00:52:17.289
and your documents will be in Quick Look in no time.

00:52:17.289 --> 00:52:19.509
Thank you.

00:52:19.510 --> 00:52:26.000
( Applause )

00:52:26.000 --> 00:52:28.179
>> Jonah: So that's Spotlight and Quick Look.

00:52:28.179 --> 00:52:32.129
For more information Matt Formica is standing right
over there.

00:52:32.130 --> 00:52:35.320
He's the Spotlight and the Quick Look evangelist.

00:52:35.320 --> 00:52:38.550
There is also a spotlight-dev mailing list,

00:52:38.550 --> 00:52:44.350
and there's tons of documentation on
both of these technologies available.

00:52:44.349 --> 00:52:46.170
So please make use of that.

00:52:46.170 --> 00:52:53.750
Also, we have a Spotlight and Quick Look Lab
tomorrow from noon to 3 in the Mac OS X Lab.

00:52:53.750 --> 00:52:59.909
So please come down, bring your code, and a lot
of people have actually made Spotlight plug-ins

00:52:59.909 --> 00:53:05.519
in the previous WWDCs right in the Lab
and left with it basically in good shape.

00:53:05.519 --> 00:53:07.239
So we think you can do that with Quick Look also.

00:53:07.239 --> 00:53:09.679
So come by, and we will be there answering questions.