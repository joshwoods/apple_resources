WEBVTT

00:00:09.990 --> 00:00:15.230
>> George: We're covering Dojo Toolkit Power Tools
presented by none other than the actual founders

00:00:15.230 --> 00:00:18.089
of the Dojo Foundation and the owners of SitePen.

00:00:18.089 --> 00:00:24.420
So at this time I'd like to welcome up on stage
Dylan Schiemann and Alex Russell of SitePen.

00:00:24.420 --> 00:00:25.440
Um, come on up guys.

00:00:25.440 --> 00:00:26.120
Thank you very much.

00:00:26.120 --> 00:00:26.560
(Applause)

00:00:26.559 --> 00:00:36.320
>> Dylan: Thanks for coming.

00:00:36.320 --> 00:00:36.990
I'm Dylan.

00:00:36.990 --> 00:00:38.359
This is Alex.

00:00:38.359 --> 00:00:40.310
Thank you, George.

00:00:40.310 --> 00:00:41.960
Let's see how this works.

00:00:41.960 --> 00:00:47.620
So, when we started working on this project called Dojo,
about three years ago or three and a half years ago,

00:00:47.619 --> 00:00:51.179
we were at a point where basically
the open web was under attack.

00:00:51.179 --> 00:00:55.329
Flash was becoming ubiquitous, DHTML was dead.

00:00:55.329 --> 00:00:59.429
No one really cared about JavaScript,
and we said, well what can we do now?

00:00:59.429 --> 00:01:01.729
What's, you know, what's possible?

00:01:01.729 --> 00:01:08.979
And fast forward three years and now the world
is, wow, AJAX everywhere all the time non stop.

00:01:08.980 --> 00:01:09.920
So what's next?

00:01:09.920 --> 00:01:11.030
What's happening?

00:01:11.030 --> 00:01:12.650
Is the browser done?

00:01:12.650 --> 00:01:15.810
You know, can we make due with what we have today?

00:01:15.810 --> 00:01:18.379
What do we need to do next, et cetera?

00:01:18.379 --> 00:01:20.679
HTML itself, it's terrible.

00:01:20.680 --> 00:01:22.500
It's lousy for building applications.

00:01:22.500 --> 00:01:25.060
It's a page and document layout language.

00:01:25.060 --> 00:01:26.030
What can we do about that?

00:01:26.030 --> 00:01:28.659
And that's where Dojo comes into play.

00:01:28.659 --> 00:01:32.819
We do things to make your job as
UI developers much much easier.

00:01:32.819 --> 00:01:38.500
We create things that basically get rid of
the inconsistencies and problems and quirks

00:01:38.500 --> 00:01:43.019
with today's browsers as well as trying to
provide solid engineering principles to things

00:01:43.019 --> 00:01:47.949
like event models and AJAX requests and DOM manipulations.

00:01:47.950 --> 00:01:52.510
At the same time, one thing Dojo's always
been pretty big at is pushing the web forward.

00:01:52.510 --> 00:01:58.810
So we've been investing significant resources and time in
vector graphics support across browsers which now works

00:01:58.810 --> 00:02:03.799
in Safari 3, Opera, Firefox, and Internet Explorer.

00:02:03.799 --> 00:02:05.899
We've also been working on Offline.

00:02:05.900 --> 00:02:09.460
And I'm sure most of you have heard
about Google Gears and Dojo Offline.

00:02:09.460 --> 00:02:11.920
And Dojo Offline works now with Google Gears.

00:02:11.919 --> 00:02:15.189
We're also just trying to make life easier for you.

00:02:15.189 --> 00:02:19.199
That's really the bottom line what Dojo's about.

00:02:20.490 --> 00:02:23.960
>> Alex: Hi, I'm Alex.

00:02:23.960 --> 00:02:31.189
So today we're going to cover a bunch of the tools that
we're trying to fix or perfect in Dojo to make it so that

00:02:31.189 --> 00:02:35.389
when you go to build an application,
HTML takes you as far as it can go.

00:02:35.389 --> 00:02:41.439
HTML and CSS is a beautiful way to declaratively out
your page and we're going to show you today the tools

00:02:41.439 --> 00:02:45.639
that we're providing so that you can take
your HTML and CSS that one step further.

00:02:45.639 --> 00:02:49.559
We don't try to make HTML and CSS something that it's not.

00:02:49.560 --> 00:02:53.500
We don't try to do something that's not webbish,
but we do try to provide incremental upgrades.

00:02:53.500 --> 00:02:55.830
And we're going to show you how we incrementally upgrade pages.

00:02:55.830 --> 00:03:00.469
We're going to show you web features like Comet and I
don't think we're going to talk about vector graphics today,

00:03:00.469 --> 00:03:04.580
but we are definitely going to show you some of
the API's that we're working on for Offline.

00:03:04.580 --> 00:03:12.170
And we're going to show you why using Dojo on Safari 3 slash
WebKit is probably the best experience you can deliver

00:03:12.169 --> 00:03:14.289
to your users today.

00:03:17.599 --> 00:03:21.650
So to do that, to get through those points,

00:03:21.650 --> 00:03:25.129
we're going to cover some of the core Dojo
API's that we're going to use to get there.

00:03:25.129 --> 00:03:31.349
We're going to talk about how you can wire up the mark up
you've already got to declaratively provided behaviors,

00:03:31.349 --> 00:03:37.560
talk about how you can take the mark up you've got
and improve it into entirely new muted, essentially,

00:03:37.560 --> 00:03:44.129
into entirely new UI's and then look at the
things that we talked about like GFX and storage.

00:03:46.860 --> 00:03:54.020
So with Dojo we have, for a very long time, taken the
approach that mark up is the right way to set up a UI.

00:03:54.020 --> 00:03:57.380
There are many piles of JavaScript out
there that you can choose from today.

00:03:57.379 --> 00:04:03.650
There's YUI and Prototype and there's going to be a great
talk tomorrow by Sam Stephenson, the author of Prototype

00:04:03.650 --> 00:04:06.120
and Prototype, and Dojo is one of these piles.

00:04:06.120 --> 00:04:11.620
And Dojo has, for a long time, taken the approach that
we want to continue to be able to take the advantages

00:04:11.620 --> 00:04:15.599
of mark up, being able to declare stuff where
we get it, where we want to show it in the page,

00:04:15.599 --> 00:04:23.399
being able to degrade gracefully, being able to provide
semantic information in our mark up about what it is we want

00:04:23.399 --> 00:04:28.599
to see on the screen and provide that across as
many devices as we can so that we're providing tools

00:04:28.600 --> 00:04:31.560
that will allow you to do this in the page itself.

00:04:31.560 --> 00:04:34.540
One of the things that we've learned
in the, I think four and a half years

00:04:34.540 --> 00:04:41.600
since we've been employing a JavaScript mark up for
mutating the DOM is that JavaScript is a pretty good way

00:04:41.600 --> 00:04:46.430
for programming and XML and mark up languages aren't.

00:04:46.430 --> 00:04:49.259
Has anyone used Ant?

00:04:49.259 --> 00:04:52.079
Yeah? Who hates it?

00:04:52.079 --> 00:04:52.589
Okay. Yeah.

00:04:52.589 --> 00:04:53.239
That's about half of you.

00:04:53.240 --> 00:04:53.720
All right.

00:04:53.720 --> 00:04:54.410
>> Dylan: Sorry Eric.

00:04:54.410 --> 00:04:55.050
(Laughter)

00:04:55.050 --> 00:05:02.389
>> Alex: So one of the major pain points of a tool like
that is that XML turns out to be a really tweaky way

00:05:02.389 --> 00:05:09.360
to declare things that can be very densely spoken about in
a programming language, as opposed to a mark up language.

00:05:09.360 --> 00:05:14.520
So what we're trying to do in Dojo 0.9, and we'll show you
how we're going to do it, is unify some of those differences

00:05:14.519 --> 00:05:18.799
so that your mark up and your script no
longer feel like they're in opposition.

00:05:18.800 --> 00:05:21.189
They can talk to each other; they can be scoped more easily

00:05:21.189 --> 00:05:24.209
and we'll show you how we're going to
get there more easily with that.

00:05:24.209 --> 00:05:30.339
>> Dylan: The other thing we've really tried to think
about is people like HTML and CSS; they know HTML and CSS,

00:05:30.339 --> 00:05:35.259
so in many cases, how can we make live
easier for people that know HTML and CSS?

00:05:35.259 --> 00:05:36.449
>> Alex: Great.

00:05:38.670 --> 00:05:40.319
So we're going to dive right in with some code examples.

00:05:40.319 --> 00:05:46.879
There's going to be a lot of code examples today, so if
you don't like code, maybe you should find another talk.

00:05:46.879 --> 00:05:50.360
So this is a pretty simple straight forward HTML page.

00:05:50.360 --> 00:05:55.080
What we've got here is a non conformant document of NEDTD.

00:05:55.079 --> 00:06:02.279
And if you zoom in to the next highlight, you'll
see that we're pulling in Dojo, the library,

00:06:02.279 --> 00:06:07.539
and that's going to pull in a bunch of stuff that we know
that we're going to need, and including a package system.

00:06:07.540 --> 00:06:12.150
So if you go ahead, we're going to show you that we're
pulling in a date and text box which is just something

00:06:12.149 --> 00:06:17.429
that augments our regular old HTML input element,
but we know that we're going to input a date.

00:06:17.430 --> 00:06:25.410
So the (inaudible) and the WD3C are collaborating in HTML
5 which are going to give us richer semantics for a lot

00:06:25.410 --> 00:06:28.420
of the kinds of things we're able
to do now only with JavaScript.

00:06:28.420 --> 00:06:30.060
But until we get there we need something better.

00:06:30.060 --> 00:06:35.680
So what we're going to do is if we keep going down the
page we can see that we've got a regular input node

00:06:35.680 --> 00:06:38.850
and in that input node we've added some extra attributes.

00:06:38.850 --> 00:06:42.629
So particularly Dojo type, which says we're
going to create an instance of the class here

00:06:42.629 --> 00:06:44.719
and we're going to use this node as its constructure.

00:06:44.720 --> 00:06:50.860
And then another property which only applies to
the date text box class, but we're going to set it

00:06:50.860 --> 00:06:53.259
as a value on that instance of this thing.

00:06:53.259 --> 00:06:56.620
So can we jump to the first demo?

00:06:56.620 --> 00:06:57.740
>> Dylan: Yes.

00:07:00.279 --> 00:07:01.569
>> Alex: Thanks.

00:07:01.569 --> 00:07:03.889
So this is what we get out of all that.

00:07:03.889 --> 00:07:04.860
If you yeah.

00:07:04.860 --> 00:07:05.590
Open that up.

00:07:05.589 --> 00:07:08.239
You can see that we've got a better
UI for declaring this stuff.

00:07:08.240 --> 00:07:13.189
Can you enter an invalid date?

00:07:13.189 --> 00:07:15.959
I'm afraid that's still valid.

00:07:15.959 --> 00:07:16.889
Yeah. (Laughter)

00:07:16.889 --> 00:07:17.250
>> Alex: Oh yeah.

00:07:17.250 --> 00:07:18.110
There we go.

00:07:18.110 --> 00:07:26.090
So we get some UI help and if you do go into the
preferences and turn off JavaScript you can see

00:07:26.089 --> 00:07:30.379
that we get the same advantages that we've always gotten
with the web which is the thing is to degrade gracefully.

00:07:30.379 --> 00:07:34.889
So if a user agent can't handle sending
it, we still get the best UI possible.

00:07:34.889 --> 00:07:42.990
We're not changing the way you build an application, we're
only giving you upgrades to the web that we ship today.

00:07:42.990 --> 00:07:45.250
We can't wait for the browsers to do this natively.

00:07:45.250 --> 00:07:46.839
We just can't wait.

00:07:46.839 --> 00:07:48.299
So we're doing it ourselves.

00:07:48.300 --> 00:07:51.949
>> Dylan: Our goal is in five years for all
of our code to be obsolete that we have today,

00:07:51.949 --> 00:07:54.069
and be replaced by new and more interesting stuff.

00:07:54.069 --> 00:07:55.699
>> Alex: Can we go back to slides?

00:07:55.699 --> 00:07:56.889
>> Dylan: Yes.

00:07:59.180 --> 00:08:00.430
>> Alex: Thank you.

00:08:00.430 --> 00:08:02.959
All right.

00:08:04.170 --> 00:08:07.620
So that's pretty good.

00:08:07.620 --> 00:08:10.379
That gives us the ability to upgrade
a bunch of the input elements

00:08:10.379 --> 00:08:14.040
that we've always wanted some nicer
UI looking feel and augmentation for.

00:08:14.040 --> 00:08:16.420
Better affordances for some of those things.

00:08:16.420 --> 00:08:20.430
But HTML falls down primarily when
it comes to laying out pages.

00:08:20.430 --> 00:08:25.240
Now I have participated in any number of mailing
list threads about how you can bend your head

00:08:25.240 --> 00:08:28.189
in the right way to make it look like across browsers.

00:08:28.189 --> 00:08:31.600
You can lay something out in three or four columns in CSS.

00:08:31.600 --> 00:08:34.620
I'm sure many of you have done the same thing.

00:08:34.620 --> 00:08:38.710
But what we would like to be able to do is
specify things that we can't do in CSS today

00:08:38.710 --> 00:08:41.920
or that the browser implementations
don't get us all the way to.

00:08:41.919 --> 00:08:50.189
So if you look at the various browsers today, we have
things that are dash moz, dash KHTML, dash Opera,

00:08:50.190 --> 00:08:53.930
dash WebKit prefixed, and those
provide us with the power of the stuff

00:08:53.929 --> 00:08:58.899
that the CSS working group is still lethargically
specifying that we would love to get to someday.

00:08:58.899 --> 00:09:01.490
But until then we still need to build more complex layouts.

00:09:01.490 --> 00:09:07.799
So Dojo provides a whole set of panel based layouts which
provide you constraints, which provide you relationships,

00:09:07.799 --> 00:09:14.370
and give you the ability to mark up those things using
the HTML and CSS you might already have laying around.

00:09:16.730 --> 00:09:21.389
So again, this is a pretty simple example of
the market that we might have used in order

00:09:21.389 --> 00:09:23.740
to layout a couple of things side by side.

00:09:23.740 --> 00:09:29.299
Now when we lay something out in a
table, obviously we're using a table

00:09:29.299 --> 00:09:32.679
which in HTML is supposed to specify some tabular data.

00:09:32.679 --> 00:09:38.239
We don't have tabular data here most likely; we just have
some stuff that we want to have side by side gosh darn it.

00:09:38.240 --> 00:09:44.799
So and we'd love to be able to put the user in control
of how those things are rendered out over time.

00:09:44.799 --> 00:09:46.329
Unfortunately a table doesn't give us that.

00:09:46.330 --> 00:09:50.420
The user can still specify font sizes, they can go
ahead and they can tweak all other kinds of things,

00:09:50.419 --> 00:09:52.110
but they can't change the relationships between those.

00:09:52.110 --> 00:09:56.830
And we can't specify necessarily anything more
than a single percentage and fill relationship

00:09:56.830 --> 00:09:58.500
or a set of percentage and fill relationships.

00:09:58.500 --> 00:10:01.789
We'd love to be able to say, this one
is this, this one is this percentage.

00:10:01.789 --> 00:10:04.449
The other is this other one minus five.

00:10:04.450 --> 00:10:07.580
I mean CSS should be an expression language, but it's not.

00:10:07.580 --> 00:10:10.490
So we can get a lot of that stuff
if we use something different.

00:10:10.490 --> 00:10:11.990
Can you go to the next slide?

00:10:11.990 --> 00:10:13.669
>> Dylan: CSS can't do math basically.

00:10:13.669 --> 00:10:14.120
>> Alex: Yeah.

00:10:14.120 --> 00:10:16.629
We'd love to be able to do math because
you'd love to be able to do math.

00:10:16.629 --> 00:10:21.269
So instead, what we're doing is we're pulling in
Dojo again and we're using the package system to pull

00:10:21.269 --> 00:10:28.620
in the split container widget which lets us take some
stuff specified in a splitable container and put the user

00:10:28.620 --> 00:10:31.570
in control of that layout and then a content pane.

00:10:31.570 --> 00:10:36.040
And the content pane is just an abstract container
for some stuff that we're going to manage the layout of.

00:10:36.039 --> 00:10:36.809
Fair enough.

00:10:36.809 --> 00:10:42.229
So now if you look at our mark up here, instead of
having a table which specifies some non semantic mark up,

00:10:42.230 --> 00:10:48.420
what we've got is more or less semantic mark up, or
at least inert mark up from the semantic perspective

00:10:48.419 --> 00:10:54.469
which is being augmented with the properties that we care
about to construct a layout that puts the user in control

00:10:54.470 --> 00:11:00.310
without necessarily jeopardizing our ability to render
it correctly across devices should the device we're

00:11:00.309 --> 00:11:02.899
on not handle the JavaScript we're showing.

00:11:02.899 --> 00:11:04.559
All right.

00:11:04.559 --> 00:11:06.289
But we can do more than that.

00:11:06.289 --> 00:11:10.149
We can also take much the same mark up
and because Dojo has a pretty well laid

00:11:10.149 --> 00:11:12.759
out class system, we can do the same thing with tabs.

00:11:12.759 --> 00:11:16.689
So the same mark up that it takes to crease a
split container can represent stuff that's stacked.

00:11:16.690 --> 00:11:21.210
I mean this is just layout primitives which
we're stacking or putting side by side.

00:11:21.210 --> 00:11:24.700
So the container and panel stuff in Dojo is pretty powerful.

00:11:24.700 --> 00:11:30.480
And you'll see that the only additions that we have
to make here, instead of specifying a split container

00:11:30.480 --> 00:11:35.029
for our content, we're specifying a tab
container and then we're adding a title.

00:11:35.029 --> 00:11:35.439
Excuse me.

00:11:35.440 --> 00:11:36.050
I apologize.

00:11:36.049 --> 00:11:37.329
I should have updated these slides.

00:11:37.330 --> 00:11:40.270
We changed that from label to title this week.

00:11:40.269 --> 00:11:46.370
We should have a title attribute which will
specify what the title of the thing is going to be.

00:11:46.370 --> 00:11:47.570
It's a little bit of extra meta data.

00:11:47.570 --> 00:11:48.960
It's semantic.

00:11:48.960 --> 00:11:54.639
We want to be able to display it in a UI that
cares about it, but not in one that doesn't.

00:11:54.639 --> 00:11:56.259
And how do they look?

00:11:56.259 --> 00:12:00.019
Well, I think they look pretty good now.

00:12:00.019 --> 00:12:02.970
And the great thing about these,
these are Dojo 0.9 widgets by the way.

00:12:02.970 --> 00:12:07.029
This is not what you're going to get if you
go download the main Dojo release day.

00:12:07.029 --> 00:12:10.490
This is what we're going to be shipping a beta of next week.

00:12:10.490 --> 00:12:11.700
So

00:12:11.700 --> 00:12:14.360
>> Dylan: And you're not going to get the
default drop Apple drop shadow either.

00:12:14.360 --> 00:12:15.889
That's just a nice slide effect.

00:12:15.889 --> 00:12:18.039
(Laughter)

00:12:18.039 --> 00:12:19.949
>> Alex: I apologize for that.

00:12:19.950 --> 00:12:24.660
So we've got these tabs and your CSS
is what makes them look this way.

00:12:24.659 --> 00:12:29.829
If you specify a CSS on those content panes or
on the split container or on the tab container,

00:12:29.830 --> 00:12:34.730
that CSS is going to get copied over and translated
into whatever the resulting mark up is.

00:12:34.730 --> 00:12:38.340
So if you know HTML and CSS you can
use the HTML and CSS mark up you know

00:12:38.340 --> 00:12:41.480
to augment the behaviors that you're already implementing.

00:12:41.480 --> 00:12:45.279
>> Dylan: How many of you have used
Dojo 0.4 by the way, just so we know?

00:12:45.279 --> 00:12:47.059
>> Alex: All right.

00:12:47.059 --> 00:12:48.719
>> Dylan: A small percentage.

00:12:51.190 --> 00:12:55.470
>> Alex: So going down one level, a lot of folks don't
necessarily want these kind of precanned widgets.

00:12:55.470 --> 00:12:59.889
If you're a professional web developer, you know
what you know and you know that you don't want us

00:12:59.889 --> 00:13:02.720
to know more than you know because we probably don't.

00:13:02.720 --> 00:13:03.810
(Laughter)

00:13:03.809 --> 00:13:09.119
>> Alex: So you've got a lot of existing mark up and you'd
love to be able to just augment it with some behaviors.

00:13:09.120 --> 00:13:11.149
So not everything needs a widget.

00:13:11.149 --> 00:13:16.980
And we want to make sure that the mark up
that we've got can get better over time.

00:13:16.980 --> 00:13:18.350
>> Dylan: Sorry.

00:13:18.350 --> 00:13:22.210
>> Alex: And there are a bunch of libraries out
there today which can make it so that the mark

00:13:22.210 --> 00:13:26.110
up you've got can do stuff that it couldn't when
you initially laid out laid it out on the page.

00:13:26.110 --> 00:13:30.889
This is all about progressive enhancement
as it's become known recently.

00:13:30.889 --> 00:13:35.449
But the behavior libraries that you
can get today tend to be pretty slow.

00:13:35.450 --> 00:13:41.580
So there's kind of an arms race on among the
JavaScript library authors which benefits all of you

00:13:41.580 --> 00:13:48.540
because this arms race is all about who can implement
the best selector syntax across the DOM as it sits

00:13:48.539 --> 00:13:51.959
in your browser today and make it the fastest.

00:13:51.960 --> 00:13:55.350
And so we've got a pretty fast implementation of
that and we'll talk about that in just a second.

00:13:55.350 --> 00:13:58.110
But a lot of them to date have been pretty slow.

00:13:58.110 --> 00:14:04.700
If you call apply a couple of times on 'em, you'll get
the same behavior applied to the same nodes multiple times,

00:14:04.700 --> 00:14:07.230
and that's not what you want more or less.

00:14:07.230 --> 00:14:12.330
In many cases you want to take a CSS selector,
specify a behavior, and then specify another behavior

00:14:12.330 --> 00:14:14.259
and not have the first behavior reapplied to it.

00:14:14.259 --> 00:14:19.950
So Dojo dot behavior, which is the system
we'll talk about here, doesn't do that.

00:14:19.950 --> 00:14:25.280
Dojo dot behavior is reapplication safe so that if you
specify multiple rules additively at multiple points

00:14:25.279 --> 00:14:30.889
in your code, you'll know that when you call apply, Dojo dot
behavior dot apply, you're only going to get the new rules

00:14:30.889 --> 00:14:34.819
on the new nodes; and if you've got old
nodes which were previously matched,

00:14:34.820 --> 00:14:39.040
you'll only get the difference in
rules applied to the old nodes.

00:14:39.039 --> 00:14:44.559
So the system mark up, you know, we've seen mark
up like this before, and we're going to take it

00:14:44.559 --> 00:14:48.409
and we're going to augment it with some Dojo dot behavior.

00:14:48.409 --> 00:14:57.500
Some day. So we're going to pull in Dojo
dot behavior as we've seen before,

00:14:57.500 --> 00:14:59.759
and I apologize that this is a little bit dense.

00:14:59.759 --> 00:15:02.269
But all we're doing is we're setting
up one function called toggle content.

00:15:02.269 --> 00:15:06.789
And toggle content is just going to
say in reference to the node

00:15:06.789 --> 00:15:11.399
that generated this event, find
the related node and slide it in.

00:15:11.399 --> 00:15:15.100
Okay. And then at the bottom is the juicy part.

00:15:15.100 --> 00:15:20.930
Dojo dot behavior dot add takes an object
whose keys are any valid CSS 3 selector.

00:15:20.929 --> 00:15:23.250
So if you've got a CSS 3 selector, whether

00:15:23.250 --> 00:15:27.519
or not your browser implements CSS 3,
you can use it to query properties.

00:15:27.519 --> 00:15:33.179
And this supports things like N plus one odd and even,

00:15:33.179 --> 00:15:37.809
sibling and child relationships,
all that kind of good stuff.

00:15:37.809 --> 00:15:41.859
Compound rules, the kind of stuff that
you'd expect out of a good engine.

00:15:41.860 --> 00:15:46.360
And there's a special property
that's being set at this element

00:15:46.360 --> 00:15:49.769
and that property can be a list of event handlers to set.

00:15:49.769 --> 00:15:55.639
So if you specify on click, on mouse over,
whatever, the function that you specify next,

00:15:55.639 --> 00:16:00.759
or the topic name that you specify next,
will get used as the handler for that event.

00:16:00.759 --> 00:16:03.519
But in this case we're going to use a
specially named one called found,

00:16:03.519 --> 00:16:09.689
and that's going to whenever this rule matches a node,
that node is going to get passed into the found function.

00:16:09.690 --> 00:16:13.250
So we're just going to set up some
behavior here when we find a node.

00:16:13.250 --> 00:16:17.480
And then when we click it you can
see we're going to call toggle content.

00:16:17.480 --> 00:16:21.149
So this is a nice way to take to mark up
what we've got, mix in some JavaScript,

00:16:21.149 --> 00:16:22.990
and get a better UI out of it necessarily.

00:16:22.990 --> 00:16:26.930
Okay. We're going to show you an example
of that in a bit, but not right now.

00:16:26.929 --> 00:16:38.829
But so to understand why Dojo dot behavior does what
it does or how we get there we looked at the entire set

00:16:38.830 --> 00:16:41.700
of selector syntaxes that were available.

00:16:41.700 --> 00:16:52.730
And when we looked out there we saw that there was
XPath, there's OGNL, there's CSS 1, CSS 2, and CSS 3.

00:16:52.730 --> 00:16:56.649
And browsers don't give us a fast path
for getting to almost any of them today.

00:16:56.649 --> 00:17:01.409
And when I say browsers, I mean every browser because
what we do in Dojo has to work in every browser.

00:17:01.409 --> 00:17:08.539
So luckily we've got XPath implementations
across the HTML DOM in WebKit and in Firefox.

00:17:08.539 --> 00:17:10.920
And I believe soon in Opera, if not today.

00:17:10.920 --> 00:17:13.500
IE is obviously the odd man out.

00:17:13.500 --> 00:17:16.890
And we don't have CSS selectors yet really on any browser.

00:17:16.890 --> 00:17:23.610
So one choice, the kind of path of least
resistance would be to implement XPath inside of IE

00:17:23.609 --> 00:17:27.319
in order to give you the native selector syntax.

00:17:27.319 --> 00:17:31.250
But web authors really aren't XML
people and we're not XML people.

00:17:31.250 --> 00:17:33.079
We don't like XML.

00:17:33.079 --> 00:17:40.230
I know that's probably heresy, but XML is kind of a bug.

00:17:40.230 --> 00:17:40.549
And (Laughter)

00:17:40.549 --> 00:17:42.919
>> Alex: It should be the browser's
job to figure it out, right?

00:17:42.920 --> 00:17:48.860
So what we said is, okay, web authors
know how to do CSS, we know how to do CSS.

00:17:48.859 --> 00:17:50.209
And CSS 3 is kind of powerful.

00:17:50.210 --> 00:17:56.180
So what we're doing is we're taking CSS and on the browsers
that do handle XPath, we're translating two XPath selectors

00:17:56.180 --> 00:17:59.269
where it's fastest, because it isn't
always fastest, especially in WebKit.

00:17:59.269 --> 00:18:06.269
WebKit's DOM is so fast that we can use a DOM
iteration and it's faster than it's built in XPath.

00:18:06.269 --> 00:18:08.960
And both blew everything else out of the water.

00:18:08.960 --> 00:18:11.870
We'll show you that in a bit.

00:18:11.869 --> 00:18:14.029
So we've tuned this thing to the hilt.

00:18:14.029 --> 00:18:15.980
And again, this is an arms race.

00:18:15.980 --> 00:18:18.519
A lot of the other tool kit authorize are
doing the exact same things right now,

00:18:18.519 --> 00:18:20.079
but we think we've got a pretty good entry here.

00:18:20.079 --> 00:18:23.399
And Dojo dot query is baked into the core of Dojo 0.9.

00:18:23.400 --> 00:18:29.310
Whenever you call on that Dojo dot
JS, you always get Dojo dot query.

00:18:29.309 --> 00:18:33.029
So to give you an idea of some of the
stuff you can do in Dojo dot query,

00:18:33.029 --> 00:18:36.889
we've put together a couple of little examples here.

00:18:36.890 --> 00:18:43.030
So the first one shows you querying every element
in a document for something with a property set.

00:18:43.029 --> 00:18:45.660
It doesn't have a particular value,
but it has that property set.

00:18:45.660 --> 00:18:47.160
And we're going to get back in array.

00:18:47.160 --> 00:18:49.190
We're going to get back in a real honest to goodness array.

00:18:49.190 --> 00:18:52.500
We're not going to get back some kind
of weird class that we made up.

00:18:52.500 --> 00:18:53.180
We're going to get an array.

00:18:53.180 --> 00:18:55.580
So you can say Dojo dot query.

00:18:55.579 --> 00:19:00.339
And as you get it back you can say bracket zero whatever
and get the first element or bracket N whatever.

00:19:00.339 --> 00:19:03.809
Or you can do foreign iteration on
it just like you would anything else.

00:19:03.809 --> 00:19:09.759
But we're also augmenting it with some other
nice methods like connect and style and styles

00:19:09.759 --> 00:19:14.930
which let you take operations across all
of the elements of that return value.

00:19:14.930 --> 00:19:19.680
So in the second example here we're going to find all
the buttons and connect a particular function to them.

00:19:19.680 --> 00:19:23.070
So if you don't want to use Dojo dot behavior,
you can still get much the same result

00:19:23.069 --> 00:19:29.759
by specifying a connect handler on
any element or group of elements.

00:19:29.759 --> 00:19:32.170
>> Dylan: Why would you want to use query and not behavior?

00:19:32.170 --> 00:19:37.850
>> Alex: Query is baked in to Dojo 0.9's base Dojo dot JS.

00:19:37.849 --> 00:19:43.730
Behavior's available through the package
system, but you get Dojo dot query all the time.

00:19:43.730 --> 00:19:47.710
And I think I think the second to
last one is the most baroque example.

00:19:47.710 --> 00:19:56.430
We're going to scope our query by a particular I.D.
and then we're going to get every odd table row

00:19:56.430 --> 00:20:01.289
and then we're going to get all the table element
children of those odd table rows and animate them.

00:20:01.289 --> 00:20:07.190
So this is how we can take some simple CSS selectors
that we know how to use and augment the mark

00:20:07.190 --> 00:20:09.620
up we've already got on the page with some nice power.

00:20:09.619 --> 00:20:11.789
All right?

00:20:11.789 --> 00:20:16.920
So we showed you the widget system, or
just the beginning of the widget system.

00:20:16.920 --> 00:20:20.820
We showed you how you can take some mark
up, augment it with some extra elements,

00:20:20.819 --> 00:20:23.779
and get something else in the page in return.

00:20:23.779 --> 00:20:26.539
But we can create classes of any type for our mark up.

00:20:26.539 --> 00:20:29.250
So Dojo 0.9 has a parser.

00:20:29.250 --> 00:20:32.170
We're calling it Dojo dot parser.

00:20:32.170 --> 00:20:36.730
And it looks for those things that
have the Dojo type property set.

00:20:36.730 --> 00:20:42.700
When we get the Dojo type property, we look at the value
that's in there and we create an instance of that class.

00:20:42.700 --> 00:20:44.390
It doesn't have to be a widget.

00:20:44.390 --> 00:20:49.009
In Dojo 0.4 we always looked for that and then
tried to match it up with the widget class.

00:20:49.009 --> 00:20:52.970
So if you had something that wasn't a widget, you actually
probably had to wrap it in a widget class in order

00:20:52.970 --> 00:20:56.339
to get an instance of it through
the mark up system in Dojo 0.4.

00:20:56.339 --> 00:21:00.919
In Dojo 0.9, we're removing that barrier
so you can create instances of any type.

00:21:00.920 --> 00:21:11.700
So that means that you can take, as we'll see in
just a second, data binding or setting up classes

00:21:11.700 --> 00:21:17.990
that you might have laying around that
effect other stuff in your page and

00:21:17.990 --> 00:21:21.109
>> Dylan: Or just defining stuff
you would normally define in script.

00:21:21.109 --> 00:21:21.240
>> Alex: Yeah.

00:21:21.240 --> 00:21:21.930
>> Dylan: To substantiate it.

00:21:21.930 --> 00:21:22.140
>> Alex: Yeah.

00:21:22.140 --> 00:21:24.880
>> Dylan: Just don't have to pull up a script
block and remember scripts syntax.

00:21:24.880 --> 00:21:26.810
You can just use simple mark up to

00:21:26.809 --> 00:21:28.210
>> Alex: And you can set properties on them.

00:21:28.210 --> 00:21:33.590
Any property that's on the prototype of
that class can be handled as an attribute

00:21:33.589 --> 00:21:35.779
of the node that you're declaring an instance from.

00:21:35.779 --> 00:21:38.809
Well let's go look at how you use that
because it seems a little bit abstract, right?

00:21:38.809 --> 00:21:39.470
>> Dylan: Yeah.

00:21:39.470 --> 00:21:45.670
>> Alex: So here's one case where Dojo 0.9 has a Dojo
dot data name space and that defines a bunch of stuff

00:21:45.670 --> 00:21:48.170
that conforms to a particular data access API.

00:21:48.170 --> 00:21:49.039
It's nice and flexible.

00:21:49.039 --> 00:21:55.349
You can get CSV files, you can go out to external
services, you can go and you can grab JSAN.

00:21:55.349 --> 00:21:58.369
And in this case we're going to grab a little bit of JSAN.

00:21:58.369 --> 00:22:04.949
And we can see that the argument to that JSAN item
store constructure is an object with a URL property.

00:22:04.950 --> 00:22:07.830
So, oh, can you go back?

00:22:07.829 --> 00:22:09.019
>> Dylan: Sorry.

00:22:09.019 --> 00:22:12.450
>> Alex: Our tree would really love to be
able to use that source so it's going to look at

00:22:12.450 --> 00:22:17.130
and find a JavaScript object named
CS, which we're defining above,

00:22:17.130 --> 00:22:21.650
and using it to expand out the nodes
of that tree based on our data store.

00:22:21.650 --> 00:22:22.009
Pretty good.

00:22:22.009 --> 00:22:25.099
Okay. So we can back all of our trees with data stores.

00:22:25.099 --> 00:22:28.259
But a tool might not want to do that.

00:22:28.259 --> 00:22:31.390
A tool might want to generate some mark up.

00:22:31.390 --> 00:22:38.160
So tool could generate the exact same functional thing using
the Dojo type syntax to create new instances of that class

00:22:38.160 --> 00:22:47.640
and pass in pass in the URL parameter
and assign that instance of that class

00:22:47.640 --> 00:22:49.590
to the name CS in the JavaScript names base.

00:22:49.589 --> 00:22:52.289
That special attribute, JSID can be anything.

00:22:52.289 --> 00:22:57.269
It can be foo dot bar dot bass and we're going
to assign this instance to foo dot bar dot bass.

00:22:57.269 --> 00:22:57.809
Pretty good.

00:22:57.809 --> 00:23:05.679
So we can move a lot of the stuff we were doing
in script before into mark up if it makes sense.

00:23:05.680 --> 00:23:09.560
Let's go. Again, that's a little bit abstract.

00:23:09.559 --> 00:23:10.669
We might need it in some cases.

00:23:10.670 --> 00:23:17.269
We might not need it all of the time, but one of the things
it also allows us to do is define instances of new classes.

00:23:17.269 --> 00:23:21.269
So we put together a 50 line widget
called dijit dot declaration.

00:23:21.269 --> 00:23:26.529
Dijit dot declaration lets us define a new widget.

00:23:26.529 --> 00:23:28.529
So this is a new widget.

00:23:28.529 --> 00:23:37.319
So Dojo widgets have had a dollar curly whatever
variable curly replacement syntax for taking properties

00:23:37.319 --> 00:23:40.939
on in instance and pushing them into a templated output.

00:23:40.940 --> 00:23:45.450
And we can use the exact same thing here in
our mark up and then declare instances of it.

00:23:45.450 --> 00:23:50.960
So if you jump through this a little bit you can see that
we're going to create an instance of dijit dot declaration.

00:23:50.960 --> 00:23:56.289
It's got a special widget class property which
is the name of the class that we're creating.

00:23:56.289 --> 00:24:04.329
We're going to specify some properties that we can set
and then we're going to mirror those properties out inside

00:24:04.329 --> 00:24:07.230
of the rest of the children of this element.

00:24:07.230 --> 00:24:11.329
So that's going to get used as the
template when we create instances of it.

00:24:11.329 --> 00:24:14.609
And then we can use instances of it immediately thereafter.

00:24:14.609 --> 00:24:21.029
So you can create a widget without ever
touching JavaScript today in Dojo 0.9.

00:24:21.029 --> 00:24:23.410
It's pretty powerful stuff.

00:24:23.410 --> 00:24:25.680
Let's look at how we'd use this.

00:24:30.269 --> 00:24:31.369
>> Dylan: Yes.

00:24:32.430 --> 00:24:34.950
>> Alex: So we talked about that splitter example.

00:24:34.950 --> 00:24:37.370
Can you show us the code Dylan?

00:24:37.369 --> 00:24:38.729
Oh yeah. You can drag 'em.

00:24:38.730 --> 00:24:39.910
Users are in control.

00:24:39.910 --> 00:24:42.500
The CSS works.

00:24:42.500 --> 00:24:45.549
That's our example.

00:24:45.549 --> 00:24:50.809
As you can see, we've got some CSS apply,
which wasn't in the slide, to specify stuff.

00:24:50.809 --> 00:24:55.500
There's a sizer width, so if we want to make the drag
handle different we can specify a vertical split,

00:24:55.500 --> 00:24:59.480
we can specify a horizontal split; we can lay
the stuff pretty much out however we want.

00:24:59.480 --> 00:25:07.779
And the CSS that gets applied to those content panes
is mirrored out inside of our resulting layout.

00:25:07.779 --> 00:25:13.529
So let's look at how that would how much
the same thing would look as a set of tabs.

00:25:13.529 --> 00:25:20.180
So we can switch between those tabs just
like we would expect we should be able to.

00:25:20.180 --> 00:25:23.430
And if you look at the source it's just as simple.

00:25:23.430 --> 00:25:27.470
Our mark up is more or less semantic.

00:25:27.470 --> 00:25:31.950
We don't have constructs for doing this
stuff in HTML today, but we can fake it.

00:25:31.950 --> 00:25:34.309
And this is really important from
an accessibility perspective.

00:25:34.309 --> 00:25:40.139
All the widgets in Dojo 0.9 will be accessible
on the browsers that can support it today.

00:25:40.140 --> 00:25:45.700
And that means that if you've got a screen reader, if you've
got system technology, if you've got high contrast mode,

00:25:45.700 --> 00:25:50.370
the Dojo 0.9 widgets are designed to work with
those assistive technologies out of the box.

00:25:50.369 --> 00:25:56.459
And so on devices which don't even have that level
of functionality we can provide really good mark

00:25:56.460 --> 00:25:59.840
up as a result, even if they don't
have any other assistance.

00:25:59.839 --> 00:26:05.069
So we show you that behavior system.

00:26:05.069 --> 00:26:10.869
And the behavior system so this is an example of us
using behaviors to go clone those nodes and, yeah,

00:26:10.869 --> 00:26:16.409
and you can see that we're applying a behavior to
a group of nodes, each one of them to each other.

00:26:16.410 --> 00:26:21.810
Can you go and turn off JavaScript and reload that page?

00:26:21.809 --> 00:26:33.710
Thanks. So we can see here that what we get as a
result is that button doesn't have a behavior applied.

00:26:33.710 --> 00:26:35.160
It's just the market that was there.

00:26:35.160 --> 00:26:41.769
And the initial content wasn't rolled up so that if we don't
have JavaScript in the page, if our browser can't handle it,

00:26:41.769 --> 00:26:46.470
if our device isn't that good, we still get the
content that we would expect from the mark up itself.

00:26:46.470 --> 00:26:50.670
Everything is semantic and the
behavior is split out from the mark up.

00:26:50.670 --> 00:26:58.330
We weren't the first to do this, but we
think we have a pretty good implementation.

00:26:58.329 --> 00:27:01.039
All right.

00:27:01.039 --> 00:27:05.819
Oh. Yeah, let's not look at that.

00:27:05.819 --> 00:27:07.470
>> Dylan: All right.

00:27:07.470 --> 00:27:09.880
(Laughter)
>> Alex: Oh, it's an eye chart.

00:27:09.880 --> 00:27:13.780
So we talked a bit about no.

00:27:13.779 --> 00:27:18.379
Can you zoom out?

00:27:19.650 --> 00:27:21.350
Ah yes. There you are.

00:27:21.349 --> 00:27:22.189
>> Dylan: Okay.

00:27:22.190 --> 00:27:25.500
>> Alex: We talked a little bit about
being able to declare instances of any type

00:27:25.500 --> 00:27:28.059
and back stuff with data stores declaratively.

00:27:28.059 --> 00:27:32.240
If we look at the service for this page, what we're
going to see is that we've got that country JSAN thing

00:27:32.240 --> 00:27:38.410
and we're just, we're going to use a little
class that we called WWDC dot repeater.

00:27:38.410 --> 00:27:47.370
And all it does is take that data store that we're
going to pass into it and it's going to take an instance

00:27:47.369 --> 00:27:55.149
of whatever class we specify and repeat that thing with
parameters passed from the JSAN that we're backing it with.

00:27:55.150 --> 00:28:00.759
So in order to get a continent
repeater, a set of buttons that do this,

00:28:00.759 --> 00:28:03.190
we're going to use this thing as a little hub.

00:28:03.190 --> 00:28:06.470
We're going to create some buttons, repeat 'em,

00:28:06.470 --> 00:28:12.990
and then wire them up as repetitions
to the continent store with that query.

00:28:12.990 --> 00:28:14.069
That's all the easier it is.

00:28:14.069 --> 00:28:16.950
And the code to do this is really straight forward.

00:28:16.950 --> 00:28:19.430
So, but that's not necessarily useful.

00:28:19.430 --> 00:28:24.019
Let's go back and look at the next example, zero six.

00:28:25.119 --> 00:28:27.469
So this is a repeater that can filter.

00:28:27.470 --> 00:28:35.769
So our data store can accept any set of queries that it'll
implement and you can see that we can filter the stuff

00:28:35.769 --> 00:28:43.210
in our page just by using the data store and
a repeater to create instances of any type.

00:28:43.210 --> 00:28:47.299
And most of these widgets are being declared
on the page or are a stock Dojo widget.

00:28:47.299 --> 00:28:52.659
So can you look at the source for that?

00:28:52.660 --> 00:29:04.840
One of the things you will note here is in the on item
method we've got a little bit of oh, is this the right one?

00:29:04.839 --> 00:29:07.289
Ah. Yeah. This is the next one.

00:29:07.289 --> 00:29:09.609
We've got a little bit of code here with Dojo X dot wire.

00:29:09.609 --> 00:29:16.679
And Dojo X dot wire is going to take a property,
map it to from one particular class into a property

00:29:16.680 --> 00:29:18.340
of another class and we're going to pass that in.

00:29:18.339 --> 00:29:25.519
And so if you scroll down you can see that our
repeater here now has a property called mappings.

00:29:25.519 --> 00:29:28.029
And that set of mappings is what
we're going to display on our button.

00:29:28.029 --> 00:29:33.599
We're going to say, on the button class, specify
the name attributes from the caption element

00:29:33.599 --> 00:29:35.709
of the data items that we're representing here.

00:29:35.710 --> 00:29:41.400
So we can wire up any property on our Dojo dot
data items to any property that resulting classes,

00:29:41.400 --> 00:29:46.019
or set of properties in the resulting classes, and
repeat them as we like and filter them in realtime.

00:29:46.019 --> 00:29:49.220
And it's all in a couple of pages of code.

00:29:49.220 --> 00:29:52.180
We think this is pretty powerful.

00:29:52.180 --> 00:29:54.090
>> Dylan: Yeah.

00:29:54.089 --> 00:29:57.879
>> Alex: But just getting the data from that itself is okay.

00:29:57.880 --> 00:30:01.920
But what we'd like to be able to do is
interface this with external services.

00:30:01.920 --> 00:30:10.029
So what we've got here is a is a same repeater,
but we're creating instances of an article class.

00:30:10.029 --> 00:30:13.660
And the article class is going to go
out, and we looked at Yahoo News

00:30:13.660 --> 00:30:17.029
for whatever the latest news is on any of these continents.

00:30:17.029 --> 00:30:22.829
So we put together a little bit of a news
aggregator here where we can zoom into anything

00:30:22.829 --> 00:30:26.949
and filter our news by whatever it is we'd like to look at.

00:30:26.950 --> 00:30:29.730
And if we look at the source code
again, it's all mark up driven.

00:30:29.730 --> 00:30:40.400
So we've got that same wiring code if we scroll
down into the on item, that hasn't changed at all.

00:30:40.400 --> 00:30:47.230
And what we do here is every time we and run
query here every time we create an instance

00:30:47.230 --> 00:30:51.059
of our repeater, we're going to run a query on it.

00:30:51.059 --> 00:30:55.399
And then when we filter with that
input box we just pass in a new query.

00:30:56.700 --> 00:31:02.090
And then in our get news method, we're just
going to use some built in stuff in Dojo to go

00:31:02.089 --> 00:31:04.859
out and call to Yahoo's public web services.

00:31:04.859 --> 00:31:06.089
We didn't have to do anything special.

00:31:06.089 --> 00:31:08.649
There's no proxy, there's no server site code here.

00:31:08.650 --> 00:31:11.110
This is all what you can do with Dojo out of the box today.

00:31:11.109 --> 00:31:16.889
And we didn't specify any of these widgets outside of what's
already in Dojo or what we declared in the page itself.

00:31:16.890 --> 00:31:23.650
So we've gone from some simple mark up representing
some stuff that we thought we'd want to see on the page

00:31:23.650 --> 00:31:27.360
to something that HTML just can't do today.

00:31:27.359 --> 00:31:32.939
Do you want to Dylan, do you want to show us
some of the other power tools that we just

00:31:32.940 --> 00:31:33.480
>> Dylan: Sure.

00:31:33.480 --> 00:31:34.000
Sure.

00:31:34.000 --> 00:31:34.759
>> Alex: come in to?

00:31:34.759 --> 00:31:35.569
>> Dylan: Yes.

00:31:35.569 --> 00:31:39.189
So this is a brand new application called Turbo Studio

00:31:39.190 --> 00:31:42.500
and what it does is it lets you
assemble Dojo based applications,

00:31:42.500 --> 00:31:48.009
or applications that are pretty much any JavaScript,
within the browser and it's built using Dojo 0.9.

00:31:48.009 --> 00:32:02.119
So you can very easily go through, add calendars, you
can allow it to fit the space, you can use all the sorts

00:32:02.119 --> 00:32:03.869
of container widgets we've been describing.

00:32:03.869 --> 00:32:11.799
The nice thing is it outputs the exact
same Dojo code you would write by hand.

00:32:11.799 --> 00:32:15.460
Let's see if I can

00:32:15.460 --> 00:32:22.220
>> Alex: What about attaching events?

00:32:22.220 --> 00:32:24.100
>> Dylan: What about them?

00:32:24.099 --> 00:32:25.029
(Laughter)
>> Dylan: I'm just kidding.

00:32:25.029 --> 00:32:34.759
You can go in and you can basically do your same sort
of, well not in that widget, but you can go in

00:32:34.759 --> 00:32:38.740
and you can bind to any of the events
handlers defined by that widget

00:32:38.740 --> 00:32:41.960
and define exactly what's going
to happen to connect an event.

00:32:41.960 --> 00:32:48.970
And then you can go through and you can edit the code
and you can, you know, make it actually do something all

00:32:48.970 --> 00:32:52.600
within this nice visual browser based tool.

00:32:52.599 --> 00:32:54.500
>> Alex: And what about custom widgets?

00:32:54.500 --> 00:32:56.740
How do we marry custom widgets with this thing?

00:32:56.740 --> 00:33:02.339
>> Dylan: Custom widgets simply require a
custom name space and you can insert them.

00:33:02.339 --> 00:33:02.500
All right.

00:33:02.500 --> 00:33:08.710
We created the world's lamest widget
ever, which is just a box.

00:33:08.710 --> 00:33:10.769
It has a close handler.

00:33:10.769 --> 00:33:15.440
Its properties, you can edit style in realtime, or not.

00:33:20.569 --> 00:33:27.909
>> Alex: What about the what about the widget class?

00:33:27.910 --> 00:33:33.590
Do I have to do anything to the widget class?

00:33:33.589 --> 00:33:41.079
>> Dylan: If I can find the code.

00:33:41.079 --> 00:33:42.529
Ah right. It's in tech center.

00:33:42.529 --> 00:33:43.480
Very good.

00:33:43.480 --> 00:33:47.700
So the the code we wrote for this
is just very straight forward.

00:33:47.700 --> 00:33:52.120
You can go through and you see a
declaration called create the widget.

00:33:52.119 --> 00:33:54.109
You define its name space.

00:33:54.109 --> 00:33:56.309
You define what it inherits from.

00:33:56.309 --> 00:33:59.299
You define a template, which is just this cool box in HTML.

00:33:59.299 --> 00:34:03.220
It's just a very simple HTML file,
and then some basic things.

00:34:03.220 --> 00:34:10.380
Caption box so we could go in here and
we could change the caption to foo.

00:34:10.380 --> 00:34:16.269
We could come down here and we could add an event handler.

00:34:16.269 --> 00:34:17.420
>> Alex: Semi.

00:34:27.610 --> 00:34:30.480
>> Dylan: Did I miss that?

00:34:30.480 --> 00:34:34.440
It's a semi and not a colon?

00:34:34.440 --> 00:34:36.079
>> Alex: No.

00:34:36.079 --> 00:34:37.279
Comma.

00:34:37.280 --> 00:34:38.350
>> Dylan: Duh.

00:34:42.090 --> 00:34:42.559
Thanks. There.

00:34:42.559 --> 00:34:42.799
All right.

00:34:42.800 --> 00:34:54.370
I'm going to dump cache just because that's always
a good idea.

00:34:54.369 --> 00:34:58.480
I didn't save the project so I'm
going to create a new cool box.

00:35:02.809 --> 00:35:09.579
And you see it has the new handler and it
also now has an event handler defined as well.

00:35:09.579 --> 00:35:15.319
>> Alex: So this is a quick way for us to take the widgets
that we're developing, either declaratively in the page

00:35:15.320 --> 00:35:21.490
or in JavaScript using the Dojo widget
class hierarchy to easily wire stuff up,

00:35:21.489 --> 00:35:24.979
augment the mark up we've got, and go from there.

00:35:24.980 --> 00:35:25.740
>> Dylan: Okay.

00:35:25.739 --> 00:35:26.979
>> Alex: Can we go back to the slides?

00:35:26.980 --> 00:35:29.079
>> Dylan: Back to the slides please.

00:35:29.079 --> 00:35:30.360
>> Alex: Thanks.

00:35:34.250 --> 00:35:37.159
>> Dylan: So what happens when
you lose your internet connection?

00:35:37.159 --> 00:35:42.859
The plug gets pulled, your wi fi goes
down, and you're working on a blog post.

00:35:42.860 --> 00:35:46.829
You're using an application and
suddenly or you're on an airplane

00:35:46.829 --> 00:35:49.750
and suddenly you can't use your application anymore?

00:35:51.070 --> 00:35:53.620
There are a lot of existing solutions.

00:35:53.619 --> 00:35:56.019
There are, of course, desktop applications.

00:35:56.019 --> 00:35:59.730
There's Adobe's Apollo or now Air.

00:35:59.730 --> 00:36:04.420
There's application specific code, Zimbra offers a solution.

00:36:04.420 --> 00:36:07.180
And then there's browser augmentation.

00:36:07.179 --> 00:36:10.869
There's the new Google Gears plug
in which Dojo Offline works with,

00:36:10.869 --> 00:36:14.259
and there's the Firefox 3 effort
to off line API's to the browser.

00:36:14.260 --> 00:36:19.750
So what does off line mean, right?

00:36:19.750 --> 00:36:22.219
What are the concepts that we need to define?

00:36:22.219 --> 00:36:23.509
Well there's several cases.

00:36:23.510 --> 00:36:30.100
There's what some applications are very clearly defined
what would happen; what it means to go off line.

00:36:30.099 --> 00:36:32.190
For example, editing a blog.

00:36:32.190 --> 00:36:37.179
It pretty much means I want to be able to edit
posts, type them up, and then when I am connected

00:36:37.179 --> 00:36:40.579
to the internet publish them or
sync them to my online service.

00:36:40.579 --> 00:36:42.239
Other services it's not quite as clear.

00:36:42.239 --> 00:36:44.529
What about Google Maps?

00:36:44.530 --> 00:36:48.150
Well I don't know what it means to use Google Maps
off line because you can't search for new data.

00:36:48.150 --> 00:36:54.119
But maybe you could store your most recent 20
queries to Google Maps or some similar concept.

00:36:54.119 --> 00:36:59.199
And so the goal of Dojo Offline initially
was to solve this off line problem.

00:36:59.199 --> 00:37:01.409
And with Google coming along we
decided to partner with them.

00:37:01.409 --> 00:37:05.649
And basically we're providing high level
API's to extract away the difference

00:37:05.650 --> 00:37:08.930
between Google Gears, Firefox's native support.

00:37:08.929 --> 00:37:13.289
You know, when WebKit or Safari comes out with
off line, API will support that as well natively,

00:37:13.289 --> 00:37:18.289
and just provide nice friendly JavaScript
API's for working with off line.

00:37:18.289 --> 00:37:24.000
So we handle synchronization and the way we do
that is we basically do a log replay mechanism.

00:37:24.000 --> 00:37:30.989
So everything that happens on the client's side is logged
and then if those events don't get published to the server,

00:37:30.989 --> 00:37:35.629
don't get to the server when you get
reconnected we attempt to replay them one by one

00:37:35.630 --> 00:37:39.220
until the server is in sync with the client.

00:37:39.219 --> 00:37:41.039
We also tried to solve the UI problem.

00:37:41.039 --> 00:37:47.079
The off line UI problem is not very straight forward
because, do your users care or do they just want it to work?

00:37:47.079 --> 00:37:52.019
And in some cases you might explicitly
want to say I'm going off line.

00:37:52.019 --> 00:37:56.639
And that's probably not as interesting as the,
okay, let the user know they're working off line

00:37:56.639 --> 00:37:59.469
because their internet connection
dropped or that they're not online.

00:37:59.469 --> 00:38:04.980
But don't force them to think about it too much.

00:38:04.980 --> 00:38:08.170
We have a basic storage provider.

00:38:08.170 --> 00:38:11.389
You've saw the Dojo storage provider
stuff a little bit before.

00:38:11.389 --> 00:38:14.129
This ties into it in very much the same way.

00:38:14.130 --> 00:38:20.320
Google provides a sequel database back end so they
use SQL Lite in the browser as an extension

00:38:20.320 --> 00:38:25.730
and so we provide Dojo dot SQL to
read and write from a local database.

00:38:25.730 --> 00:38:33.309
There's also, since Firefox 2 and, I
guess Firefox 2 and 3 are it right now.

00:38:33.309 --> 00:38:36.170
Maybe does Safari have that, local DOM storage?

00:38:36.170 --> 00:38:36.789
I don't think so.

00:38:36.789 --> 00:38:37.279
>> Alex: I don't think so.

00:38:37.280 --> 00:38:38.110
>> Dylan: Okay.

00:38:38.110 --> 00:38:42.039
Local native browser storage that you can read and write to.

00:38:42.039 --> 00:38:46.909
So just think of it as a very very large cookie
that you can natively write to on your file stem.

00:38:46.909 --> 00:38:51.409
And then there's of course the fallback mechanism
for all of the other browsers which is Flash.

00:38:51.409 --> 00:38:57.319
Flash is always supported larger than your 4K cookies
and we've used that for a couple of years now.

00:38:57.320 --> 00:39:04.110
So we have a few very simple, very straight
forward, very easy to remember API's for doing this.

00:39:04.110 --> 00:39:08.500
There's Dojox dot off dot on off line and on online.

00:39:08.500 --> 00:39:11.750
They sound a little strange because
it's off online and off on online.

00:39:11.750 --> 00:39:12.230
Yeah. (Laughter)

00:39:12.230 --> 00:39:19.380
>> Dylan: It's intended to be very consistent with
the way browsers name events with this on scheme.

00:39:19.380 --> 00:39:23.720
We also have mechanisms for cashing files, refreshing cache,

00:39:23.719 --> 00:39:28.519
not particularly interesting until
you're really digging into it.

00:39:28.519 --> 00:39:33.329
>> Alex: We're going to be providing the Dojo Offline
API's in the data that we're shipping next week

00:39:33.329 --> 00:39:35.590
so you'll be able to start playing with them there.

00:39:35.590 --> 00:39:38.860
We have them mostly ported to Dojo 0.9.

00:39:38.860 --> 00:39:45.430
We did the initial work on Dojo 0.4 and we wrote
our own proxy before Google Gears was available.

00:39:45.429 --> 00:39:51.349
So we've been in the process of porting from that proxy
and the testing workload to refine the API's to work

00:39:51.349 --> 00:39:57.650
in toggle gears and we hope very soon that we'll have
a gears implementation that works with Safari 3 beta.

00:39:57.650 --> 00:40:00.280
I'm hoping very much that Google gets that done.

00:40:00.280 --> 00:40:03.040
Right now I think we are gated on Google to that.

00:40:03.039 --> 00:40:03.500
>> Dylan: Yes.

00:40:03.500 --> 00:40:06.690
>> Alex: So one of the other edge of the web features
that we're really excited about is the ability

00:40:06.690 --> 00:40:10.710
to have the server push events to the client.

00:40:10.710 --> 00:40:19.420
Dojo has for, I think the last six months or so at
least, had an implementation of a Bayeux client.

00:40:19.420 --> 00:40:23.789
Bayeux is this protocol that works by
supplying with some other server vendors,

00:40:23.789 --> 00:40:27.969
a bunch of the people in the Java
community, some Pearl people,

00:40:27.969 --> 00:40:32.319
and it's a JSAN based publish subscribed
notification protocol

00:40:32.320 --> 00:40:35.519
which provides semantics that are above the wire level.

00:40:35.519 --> 00:40:40.360
So if you've seen XMPP's HTTP bind, that
specifies a bunch of wire level stuff.

00:40:40.360 --> 00:40:41.420
HTTP works this way.

00:40:41.420 --> 00:40:42.940
You'll do this and this and get this back.

00:40:42.940 --> 00:40:48.110
We're kind of trying to extract those from each
other so that you know you're going to get JSAN over it

00:40:48.110 --> 00:40:50.769
and that whatever happens on the
wire doesn't really matter to you.

00:40:50.769 --> 00:40:56.369
You've got some simple API's initialize, publish,
and subscribe, which allow you to set up connections,

00:40:56.369 --> 00:41:00.639
set up listeners, and publish stuff to those
listeners so long as it can be serialized to JSAN.

00:41:00.639 --> 00:41:05.449
And so we've been shipping this
for a couple of releases in Dojo.

00:41:05.449 --> 00:41:07.379
The spec for Bayeux is firming up right now.

00:41:07.380 --> 00:41:13.660
We expect that we're going to have a 1.0 spec
any week now but it's not done quite yet.

00:41:13.659 --> 00:41:16.469
And we're still waiting on the servers to get upgraded.

00:41:16.469 --> 00:41:19.619
But we have some really good numbers here.

00:41:19.619 --> 00:41:22.469
And the reason that we have to have separate servers,
the reason that we have to have Python servers

00:41:22.469 --> 00:41:30.019
or just specialized Java, Jedi, and Grizzly, or
Perl on the Perl side, is that leaving lots

00:41:30.019 --> 00:41:33.519
and lots of zombie connections open, which is
what is required to get this low latency data

00:41:33.519 --> 00:41:42.449
to the server done right, requires that we be able to
not consume huge amounts of memory every connection

00:41:42.449 --> 00:41:44.239
that gets instantiated and gets left open.

00:41:44.239 --> 00:41:49.009
So these servers are written with a
synchronous I/O mechanisms underneath them

00:41:49.010 --> 00:41:51.570
and we're not just wanting threads
or processes per instance.

00:41:51.570 --> 00:41:51.809
So

00:41:51.809 --> 00:41:56.420
>> Dylan: Well, it's also that today's common
web servers are not optimized for this.

00:41:56.420 --> 00:42:02.039
So a Comet server is optimized for opening
long lived connections and a typical web server

00:42:02.039 --> 00:42:07.619
like Apache is optimized for opening and closing
as many connections as quickly as possible.

00:42:07.619 --> 00:42:12.929
And so it's a very different optimization
pattern and hence the need for very specialized

00:42:12.929 --> 00:42:15.669
>> Alex: Well let's look at the user experience then.

00:42:15.670 --> 00:42:17.800
>> Dylan: All right.

00:42:19.130 --> 00:42:20.990
The demo please.

00:42:20.989 --> 00:42:24.839
>> Alex: So, we put together a
little Word Press plug in based

00:42:24.840 --> 00:42:30.760
on the can you actually size this
so we can see both windows?

00:42:30.760 --> 00:42:31.820
>> Dylan: Yeah.

00:42:31.820 --> 00:42:32.590
Oh both windows.

00:42:32.590 --> 00:42:37.430
>> Alex: We put together a little Word Press plug in
based on Cometd, the Python implementation of Cometd,

00:42:37.429 --> 00:42:39.750
although it doesn't matter which implementation we use.

00:42:39.750 --> 00:42:40.909
We could use any implementation.

00:42:40.909 --> 00:42:45.359
It doesn't we don't care because
the protocol doesn't matter.

00:42:45.360 --> 00:42:50.539
And no, it matters very much in
that we don't have to care about it.

00:42:50.539 --> 00:42:55.789
So we put together a little imlementation based on Dojo
and on Cometd and a little bit of a Word Press plug in so

00:42:55.789 --> 00:43:01.320
that whenever you publish post to a web
log that's got this plug in enabled,

00:43:01.320 --> 00:43:09.900
everyone else who's on the page can see it immediately,
if you refresh the page and have a connection open.

00:43:09.900 --> 00:43:12.420
Yeah. Yeah.

00:43:18.090 --> 00:43:21.670
So everyone who's on the page at the
same time can sea what's going on.

00:43:21.670 --> 00:43:25.700
Obviously we could add status information,
we could add global notification,

00:43:25.699 --> 00:43:28.509
but what we're doing here is we're
reducing the latency in the conversation.

00:43:28.510 --> 00:43:33.560
We would have loved to have made this available, but
we don't know what the IP address is and we didn't want

00:43:33.559 --> 00:43:37.909
to run this on a public network because we're going to
get a huge number of comments on this pretty quickly.

00:43:37.909 --> 00:43:43.920
(Laughter)
>> There's a little bit more work to be done in terms
of making this work with the guts of Word Press,

00:43:43.920 --> 00:43:46.090
but we will release the source code for this plug in today

00:43:46.090 --> 00:43:51.019
so that you can have comments for
realtime comments for your blog.

00:43:51.019 --> 00:43:52.530
Your conversation can go live.

00:43:52.530 --> 00:43:59.990
And this is stuff that we can do on top of what's in Dojo
0.9 already and what we're doing at the Cometd project.

00:43:59.989 --> 00:44:01.519
So we're really excited about this.

00:44:01.519 --> 00:44:03.460
Can we go back to the slides?

00:44:06.650 --> 00:44:08.590
As you saw, there's only three major API's.

00:44:08.590 --> 00:44:13.450
These are the three API's aside from
Dojo dot require Dojox dot Cometd

00:44:13.449 --> 00:44:17.819
that we needed on the client's side to get this done.

00:44:17.820 --> 00:44:20.510
That's it.

00:44:20.510 --> 00:44:20.880
All right.

00:44:20.880 --> 00:44:21.970
We saw that.

00:44:21.969 --> 00:44:24.959
(Laughter)

00:44:24.960 --> 00:44:27.740
>> Alex: So all the stuff that we're trying
to do here is all about responsiveness.

00:44:27.739 --> 00:44:31.509
We're trying to build more responsive web interfaces.

00:44:31.510 --> 00:44:36.820
We're trying to build a better experience that
gives the users what they want while waiting less.

00:44:36.820 --> 00:44:43.050
And so while we've been doing Dojo's the work for Dojo 0.9,
we've had to rethink a lot of what we've done in the past

00:44:43.050 --> 00:44:48.330
in order to make sure that we're focusing
on the responsiveness of the experience.

00:44:48.329 --> 00:44:52.329
And one of the big problems with doing
anything in JavaScript is that we have to wait

00:44:52.329 --> 00:44:56.779
until the JavaScript interpreter and the DOM
that we're based on are already bootstrapped.

00:44:56.780 --> 00:45:02.030
We have to go and we have to get the code off the wire, we
have to get the DOM that we need, we have to get the HTML,

00:45:02.030 --> 00:45:05.690
CSS, and JavaScript off the wire to do what
we need, we have to have it all substantiated,

00:45:05.690 --> 00:45:08.389
we have to be parsed, and then we can start doing stuff.

00:45:08.389 --> 00:45:12.449
So anything we can do in HTML, anything
we can defer down to HTML is a huge win.

00:45:12.449 --> 00:45:20.329
And so that makes the onus on JavaScript
browser, excuse me, browser vendors for cashing

00:45:20.329 --> 00:45:24.989
and client library vendors for size reduction huge.

00:45:24.989 --> 00:45:28.789
Anything we can't we don't send is
the best bites that we could send.

00:45:28.789 --> 00:45:35.739
So we're trying to make sure that in Dojo
0.9 we're not taking much of a hit in terms

00:45:35.739 --> 00:45:39.159
of either getting the stuff off
the wire, getting out of the cache,

00:45:39.159 --> 00:45:42.219
or making sure that when we construct
the UI's it's as fast as possible.

00:45:42.219 --> 00:45:50.029
And let's look at how we're doing.

00:45:50.030 --> 00:45:57.030
When we're talking about optimizing JavaScript in general,
there's a bunch of stuff, or web pages just in general,

00:45:57.030 --> 00:46:00.750
there's a bunch of stuff that we can throw at the problem.

00:46:00.750 --> 00:46:05.780
We can take out white space, we can take
out comments, we can remove variable names;

00:46:05.780 --> 00:46:07.420
we can shorten variable names in JavaScript.

00:46:07.420 --> 00:46:12.430
We can do much the same thing in CSS if
we have the whole page at our disposal.

00:46:12.429 --> 00:46:17.759
And if we get really really lucky we might be able to
remove some dead code if we got good compiler technology.

00:46:17.760 --> 00:46:23.990
And once we get the stuff off the wire, we have to make
sure that if we're using some exotic packing system,

00:46:23.989 --> 00:46:28.119
like Dean Edwards Packer, we're not taking
a lot of time in decompressing the system.

00:46:28.119 --> 00:46:32.409
So we have to make sure that there's this
there's a valid trade off between the size

00:46:32.409 --> 00:46:34.379
and the wire and the time it takes to decompress.

00:46:34.380 --> 00:46:39.090
If we're on a really fast local connection and it takes
me ten milliseconds to grab something off the wire,

00:46:39.090 --> 00:46:42.039
but 100 milliseconds to unpack
it, that's clearly not a good win.

00:46:42.039 --> 00:46:45.009
So and G zip is our ally.

00:46:45.010 --> 00:46:47.890
We want to make sure that anything we're
sending across the wire is G zipped.

00:46:47.889 --> 00:46:51.659
But at Dojo, we can't verify or force you to G zip anything.

00:46:51.659 --> 00:47:01.089
So what we're doing is providing the smallest possible
downloads we can and we have a build system to do that.

00:47:01.090 --> 00:47:09.190
So yeah. And when we make builds...can I just drive?

00:47:09.190 --> 00:47:09.720
>> Dylan: Yeah.

00:47:09.719 --> 00:47:10.399
Sorry. (Laughter)

00:47:10.400 --> 00:47:10.650
>> Alex: Sorry.

00:47:10.650 --> 00:47:11.059
>> Dylan: You have too many (inaudible).

00:47:11.059 --> 00:47:13.920
>> Alex: When we make builds, what
we're talking about is taking a set

00:47:13.920 --> 00:47:17.360
of related JavaScript components,
using the package system smarts.

00:47:17.360 --> 00:47:19.360
The package system knows what you need if you tell it.

00:47:19.360 --> 00:47:24.340
It can go and it can find out the dependencies that you need
in the order you need them and lay them all out linearly

00:47:24.340 --> 00:47:28.780
so that you could get one file, reduce the number
of HTTP requests you're making, strip the comments

00:47:28.780 --> 00:47:33.880
and white space all at once, and then G zip
one file and make sure that one file is cashed.

00:47:33.880 --> 00:47:39.000
That means that if we have a poorly configured
HTTP server, we don't necessarily have to worry

00:47:39.000 --> 00:47:45.639
about having our 304 setting correctly if we've only get
one file to go check as opposed to lots of little files.

00:47:45.639 --> 00:47:50.819
And we're not blocking on initial page load for
a bunch of stuff that has to happen synchronously

00:47:50.820 --> 00:47:53.820
because getting JavaScript almost
always happens synchronously.

00:47:53.820 --> 00:47:58.870
So we've had a build system in Dojo to help solve
this problem since probably the earliest versions.

00:47:58.869 --> 00:48:04.339
I think 01 had something like this
and that was three years ago.

00:48:04.340 --> 00:48:07.019
We've upgraded the system significantly for 0.9.

00:48:07.019 --> 00:48:08.820
It used to use ant.

00:48:08.820 --> 00:48:11.460
We hate ant and we're fixing it.

00:48:11.460 --> 00:48:15.030
So the entire build system now is pure Java and JavaScript.

00:48:15.030 --> 00:48:22.430
So Java 6 includes Rhino and we're using a custom version
of Rhino that ships when you get the Subversion check out.

00:48:22.429 --> 00:48:25.009
So you don't have to go get any other tools
aside from a Java runtime environment,

00:48:25.010 --> 00:48:26.960
which you've already got installed on OS 10.

00:48:26.960 --> 00:48:30.380
So you can go and you can grab Dojo Dojo source check out.

00:48:30.380 --> 00:48:33.400
We're also done a web based build tools
so that if you know what you need,

00:48:33.400 --> 00:48:35.800
you can go and you can make that stuff yourself.

00:48:35.800 --> 00:48:42.350
And we've got this idea of roll ups in Dojo
0.9, or layer files as we're calling them.

00:48:42.349 --> 00:48:44.989
Dojo Dojo dot JS always means one thing.

00:48:44.989 --> 00:48:51.829
It means one set of base very rich functionality for doing
things like event connection, topics, the package system,

00:48:51.829 --> 00:48:57.139
style manipulation, animation, gosh, AJAX,
a whole bunch of stuff you might need.

00:48:57.139 --> 00:49:02.219
>> Dylan: It's the stuff you need 90 percent of the time
rather than the stuff you need 2 percent of the time.

00:49:02.219 --> 00:49:05.629
>> Alex: But Dojo has a whole other universe of
stuff that you don't necessarily need all the time.

00:49:05.630 --> 00:49:06.840
And we don't have to make it.

00:49:06.840 --> 00:49:09.920
We don't want to have to make it slow for you
to go get that stuff when you know you need it.

00:49:09.920 --> 00:49:17.019
So the build system can roll up the other packages that
are available in Dojo and it can roll up your own code.

00:49:17.019 --> 00:49:22.110
The build system also, because widgets, as we
saw in a little bit here, can have external files

00:49:22.110 --> 00:49:25.190
which specify their UI, the build
system is savvy about those.

00:49:25.190 --> 00:49:29.869
It can take those files, intern them as strings
in the JavaScript file that you're getting

00:49:29.869 --> 00:49:34.150
so that everything you would have made separate
requests for before gets rolled into a single file.

00:49:34.150 --> 00:49:37.599
And we have this idea of layered builds
so that you know in your application.

00:49:37.599 --> 00:49:41.480
So before, we had the ability to
create one big JavaScript file.

00:49:41.480 --> 00:49:46.800
And if I'm heavy in development on an application that's
live and I change one little function kind of over here

00:49:46.800 --> 00:49:52.740
on the right, I don't want to have to go cache churn
for all of my clients all of the stuff that I had.

00:49:52.739 --> 00:49:56.869
I want to make sure that users are getting as much
use out of their cache for all the other stuff

00:49:56.869 --> 00:49:58.750
that didn't change as we can possibly get.

00:49:58.750 --> 00:50:03.170
So being able to require stuff dynamically,
which is what the package system can do.

00:50:03.170 --> 00:50:05.920
I can call dijit dot require at any time and get any package

00:50:05.920 --> 00:50:09.130
that Dojo makes available, but
it has to happen synchronously.

00:50:09.130 --> 00:50:12.960
So I can do that after the page is loaded
if I know that I want to defer execution.

00:50:12.960 --> 00:50:14.449
Or I have to stuff it all up front.

00:50:14.449 --> 00:50:16.989
There's no kind of middle ground in Dojo 0.4.

00:50:16.989 --> 00:50:21.769
What Dojo 0.9 provides is the ability to layer those
things out so that I know if I've got Dojo dot JS

00:50:21.769 --> 00:50:25.840
and then some common stuff in my
application, I can package those into two files

00:50:25.840 --> 00:50:27.579
and those two files can always be loaded.

00:50:27.579 --> 00:50:30.360
And then if I've got page specific stuff I can break it out.

00:50:30.360 --> 00:50:37.019
And I can itemize or delay or load stuff opportunistically,
in whatever way I know will make my application fastest.

00:50:37.019 --> 00:50:41.179
This is a huge win and it's all available
in the beta we'll be releasing next week.

00:50:41.179 --> 00:50:42.629
>> Dylan: You should talk about the CDN.

00:50:42.630 --> 00:50:46.380
>> Alex: And let's look at a demo of the build system.

00:50:46.380 --> 00:50:49.820
Also, yeah, Dylan raised a great point.

00:50:49.820 --> 00:50:50.140
>> Dylan: You (inaudible).

00:50:50.139 --> 00:50:50.420
>> Alex: So

00:50:50.420 --> 00:50:56.000
>> Dylan: You can also get the current version of
Dojo dot JS from the AOL content distribution network.

00:50:56.000 --> 00:51:01.500
So what you can do is you can off load the
requirements of having to download Dojo to AOL

00:51:01.500 --> 00:51:07.150
and at the same time every other site that uses
Dojo can cache the same copy of Dojo dot JS.

00:51:07.150 --> 00:51:08.970
So you can save your users some download,

00:51:08.969 --> 00:51:12.839
you can save yourself some bandwidth
cost, and you get the benefits of Dojo.

00:51:12.840 --> 00:51:14.470
They're just the same.

00:51:15.829 --> 00:51:19.829
So this is the Dojo build system
and it's just command line command.

00:51:19.829 --> 00:51:25.159
It's, you know, Java, pull in a jar file,
define a few properties for your build.

00:51:25.159 --> 00:51:29.949
In this case clean cleans up the file system,
release is going to create a release build.

00:51:29.949 --> 00:51:31.659
Are you going to do intern strings?

00:51:31.659 --> 00:51:31.940
>> Alex: No.

00:51:31.940 --> 00:51:32.280
>> Dylan: No?

00:51:32.280 --> 00:51:34.620
Okay. You pick a profile.

00:51:34.619 --> 00:51:37.309
In this case the profile's named 0 dot 9.

00:51:37.309 --> 00:51:42.469
The profile itself is a JavaScript file that
defines the dependencies or layers that you want.

00:51:42.469 --> 00:51:44.839
You see some output.

00:51:44.840 --> 00:51:49.280
>> Alex: And the only thing you have to change when
you're using the build versus the source of one

00:51:49.280 --> 00:51:54.100
of these distributions, is where you're pointing at
your JavaScript file, your initial Dojo dot JS file.

00:51:54.099 --> 00:51:58.789
Dojo knows where it got loaded from so that it goes
and it auto discovers where it got loaded from.

00:51:58.789 --> 00:52:00.679
So your Dojo dot requires don't have to change.

00:52:00.679 --> 00:52:04.969
You just point it at the release directory that Dojo
dot JS that's being built inside that release directory

00:52:04.969 --> 00:52:07.149
and don't necessarily even have to worry about your stuff.

00:52:07.150 --> 00:52:15.410
So let's go look at a really simple layer file and look
at an application that uses it and look at the before

00:52:15.409 --> 00:52:17.529
and after for the performance of loading stuff

00:52:17.530 --> 00:52:21.720
across the wire using the build system
versus not using the build system.

00:52:21.719 --> 00:52:25.869
And again, it's worth repeating that you
can use this system for your own code.

00:52:25.869 --> 00:52:30.940
You can optimize your own code and your own modules
and using modules in Dojo is really straight forward.

00:52:30.940 --> 00:52:33.880
You just put in a directory; you just say Dojo
dot provide and require at the top of your file.

00:52:33.880 --> 00:52:34.530
That's it.

00:52:34.530 --> 00:52:43.190
And if we look at what we've got here, we
can see that if I go into I'm going to have

00:52:43.190 --> 00:52:45.630
to use Firebug, so I'm going to have to use Firefox here.

00:52:45.630 --> 00:52:48.220
I apologize.

00:52:48.219 --> 00:53:01.079
If I go into this Dojo check out, I've got
a file here called three pane dot HTML.

00:53:01.079 --> 00:53:05.929
And this is just going to create a
really simple three pane tabs you.

00:53:05.929 --> 00:53:12.129
It's got, you know, a data bound tree, it's got
some accordions, you know, just basic stuff.

00:53:12.130 --> 00:53:13.710
Not a lot of mark up.

00:53:13.710 --> 00:53:16.460
But if I look at what I had to pull
across in order to get that done

00:53:16.460 --> 00:53:19.159
in the source version of Dojo,
I'm pulling in a lot of files.

00:53:19.159 --> 00:53:22.009
And as you can see from Firebug, they're all synchronous.

00:53:22.010 --> 00:53:26.150
That's a lot of stuff that I may or may
not want to be pulling in synchronously.

00:53:26.150 --> 00:53:29.250
And it contributes significantly
you can see to the loading the page.

00:53:29.250 --> 00:53:31.579
So what does a build do for us there?

00:53:31.579 --> 00:53:37.449
If we look at the source in this page, we
can see that we're pulling in two files

00:53:37.449 --> 00:53:42.730
that really matter, Dojo dot JS and dijit dot JS.

00:53:42.730 --> 00:53:47.510
And what I'm going to do here is I'm going to
switch to using the built versions of those

00:53:47.510 --> 00:53:52.540
and we're going to go and look at the new network trace.

00:53:54.969 --> 00:53:58.399
So I'm going to go modify my file here.

00:53:58.400 --> 00:53:59.579
I'm just going to comment that out.

00:53:59.579 --> 00:54:05.460
And I'm just going to again, it's only pulling in
from the same directory structure, same names.

00:54:05.460 --> 00:54:10.429
I'm just pulling in the release slash
whatever versions of those of that stuff.

00:54:10.429 --> 00:54:13.269
I'll come in here and I'll clear the cache just for kicks.

00:54:13.269 --> 00:54:15.400
Nothing up my sleeve.

00:54:16.849 --> 00:54:17.789
Oh, not that.

00:54:17.789 --> 00:54:24.029
Fire that back up.

00:54:24.030 --> 00:54:27.330
It's actually a little bit noticeably faster.

00:54:27.329 --> 00:54:32.069
But what we see here is before G zip,
all of these numbers are before G zip.

00:54:32.070 --> 00:54:35.110
What we're seeing on the wire here is unpacking.

00:54:35.110 --> 00:54:38.470
What we're seeing on the wire here
is significantly fewer requests.

00:54:38.469 --> 00:54:44.659
All that stuff got rolled up into two files,
aside from the stuff that is CSS and images.

00:54:44.659 --> 00:54:51.579
So based on this, I've got a layer file for dijit, which are
my widgets, and then I've got a layer file for Dojo dot JS.

00:54:51.579 --> 00:54:53.759
And how did I declare that stuff?

00:54:53.760 --> 00:54:57.940
What kind of magic does it require
to make my application that fast?

00:54:57.940 --> 00:55:05.030
So I can see in dijit dot JS, all I'm doing
here is calling require on a bunch of stuff.

00:55:05.030 --> 00:55:05.690
That's it.

00:55:05.690 --> 00:55:07.119
I'm just pulling in those modules here.

00:55:07.119 --> 00:55:08.329
That's all I'm doing.

00:55:08.329 --> 00:55:14.469
Okay. And in fact, I'm pulling in modules
that I'm not even using in this example.

00:55:19.579 --> 00:55:23.259
In util build scripts profiles script there's a set
of these profiles and I'm going to pull

00:55:23.260 --> 00:55:25.480
up the 0.9 profile which is what I just built.

00:55:25.480 --> 00:55:27.929
And Dojo dot JS is always implicitly build.

00:55:27.929 --> 00:55:30.069
Dojo dot JS is always the same thing.

00:55:30.070 --> 00:55:35.140
It always means that that nicely curated set
of well tested, high performance functions

00:55:35.139 --> 00:55:37.829
that we know that you're always going to need.

00:55:37.829 --> 00:55:40.230
And you can specify a set of layers
in your dependencies object.

00:55:40.230 --> 00:55:46.289
And these layers take an output name, the
name of the file that we're going to generate.

00:55:46.289 --> 00:55:48.389
In this case we're just replacing
the one that was already there.

00:55:48.389 --> 00:55:50.929
We could output it to someplace else.

00:55:50.929 --> 00:55:57.069
We use the package system to load up what it is that
this is going to require and what's worth noting here is

00:55:57.070 --> 00:56:01.840
that if I've got multiple dependencies or multiple,
excuse me, multiple layers, they can specify each other.

00:56:01.840 --> 00:56:06.920
And what's going to get baked into each one of those layers
is only what wasn't covered by the previous layers

00:56:06.920 --> 00:56:09.329
that I specify and everything that they require.

00:56:09.329 --> 00:56:13.449
So this system can be used to layer
your requires just the same way

00:56:13.449 --> 00:56:17.629
that the run time package system only loads
the stuff that it knows that it needs.

00:56:17.630 --> 00:56:21.829
>> Dylan: So it never builds in the same code
twice, even if you require it more than once.

00:56:21.829 --> 00:56:30.799
>> Alex: And so if I want to load in say, stuff from my
app, I just specify that I'm going to pull in the my app stuff

00:56:30.800 --> 00:56:36.120
into my and it's going to live alongside my Dojo directory.

00:56:36.119 --> 00:56:41.969
So that's all it takes to implement your
own layers and Dojo and use the build system

00:56:41.969 --> 00:56:45.609
to to optimize your application for deployment.

00:56:45.610 --> 00:56:47.960
You don't have to change any of your code, you
don't have to change the way you're using it,

00:56:47.960 --> 00:56:52.240
you don't have to change the way you're
using Dojo; you just make a build.

00:56:52.239 --> 00:56:53.269
And that's the result.

00:56:53.269 --> 00:56:55.039
And these these are non G zip numbers.

00:56:55.039 --> 00:56:59.340
If I go and I pull down a G zip version of that,
it's probably going to be close to 20 K on the wire

00:56:59.340 --> 00:57:06.410
for the Dojo dot JS and that 200 K is probably
going to be closer to 50 for all those widgets.

00:57:06.409 --> 00:57:08.989
And in fact there's a lot of widgets here
that I'm not even using on this page.

00:57:08.989 --> 00:57:16.019
There's like the rich text editor and a whole
slew of tab pane and widgets that I'm not using.

00:57:16.019 --> 00:57:18.190
So. All right, that's the build system.

00:57:18.190 --> 00:57:20.260
Can we go back to the slides?

00:57:24.099 --> 00:57:33.179
Thanks. So Dojo has been accused of being kind of an
elephant in the past, kind of big, kind of clunky.

00:57:33.179 --> 00:57:34.529
It's got a lot of stuff.

00:57:34.530 --> 00:57:39.050
It's always been possible to know that you had
something that you wanted to do and Dojo could do it.

00:57:39.050 --> 00:57:42.190
You always had that kind of inkling in the
back of your mind that Dojo could do it,

00:57:42.190 --> 00:57:47.010
but whether or not you knew what the
exact function was going to be called.

00:57:47.010 --> 00:57:51.110
And in Dojo 0.9, we're trying to take that
inkling that you've had and make it very explicit

00:57:51.110 --> 00:57:55.610
that yes you can do it and here's how you find it.

00:57:55.610 --> 00:57:58.349
We've been at this a long time.

00:57:58.349 --> 00:58:02.259
We started Dojo as an amalgamation of three
other pre existing JavaScript toolkits

00:58:02.260 --> 00:58:03.820
and have been building from there.

00:58:03.820 --> 00:58:06.890
And we've been able to implement a lot
of features and a lot of flexibility.

00:58:06.889 --> 00:58:09.309
And that's kind of like the cost of understandability.

00:58:09.309 --> 00:58:12.869
It's been very difficult to know, when
you get a Dojo download, what's there,

00:58:12.869 --> 00:58:16.299
how do you get what you want, what's even possible?

00:58:16.300 --> 00:58:21.600
And so we're taking the opportunity to step back and for
the last six months we've been thinking about every API,

00:58:21.599 --> 00:58:26.319
questioning every design decision, removing
flexibility in places where you don't need it,

00:58:26.320 --> 00:58:30.789
taking the crud out of the system,
removing all the backwards compatibility shims,

00:58:30.789 --> 00:58:36.920
and only providing you with nicely focused API's that
get your job done without having to worry about the past.

00:58:36.920 --> 00:58:39.269
And the results are pretty impressive.

00:58:39.269 --> 00:58:47.130
So these are two roughly equivalent functionality builds,
although Dojo 0.9 base does better than the 0.4 AJAX build

00:58:47.130 --> 00:58:52.369
because it also includes Dojo dot query and
the new high performance style functions.

00:58:52.369 --> 00:58:57.679
As you can see, at almost every axis
between the build size and the G zip size,

00:58:57.679 --> 00:59:00.699
and the uncompressed size, it's half the size.

00:59:00.699 --> 00:59:04.079
Dojo dot JS on the wire for your
application in a well tuned app is

00:59:04.079 --> 00:59:08.449
about 20 K. That's the size of an ad, and it's cashed.

00:59:08.449 --> 00:59:10.539
You only need it the first time.

00:59:10.539 --> 00:59:12.199
So what about a more full featured thing?

00:59:12.199 --> 00:59:19.799
What about Dojo dot JS plus the basic widget stuff, that
dijit file that only includes just the widget system?

00:59:19.800 --> 00:59:23.740
And Dojo 0.4 uncompressed, you were pulling
in almost a half a meg of JavaScript.

00:59:23.739 --> 00:59:25.419
That's a lot for a browser to chew on.

00:59:25.420 --> 00:59:27.039
But the build did a really great job.

00:59:27.039 --> 00:59:32.840
It stripped out comments, it shortened variables,
it got us down to less than half of that.

00:59:32.840 --> 00:59:38.090
And G zipped on the wire, it was 50 K. We're still half
the size, roughly half the size at almost every axis here

00:59:38.090 --> 00:59:41.340
at Dojo 0.9 for equivalent or better functionality.

00:59:41.340 --> 00:59:43.240
We're really happy with these numbers.

00:59:43.239 --> 00:59:47.329
So how does it perform in terms of run time speed?

00:59:47.329 --> 00:59:52.269
So what we're looking at here is the
I apologize, they're blue and purple.

00:59:52.269 --> 00:59:57.250
The blue ones are the Dojo 0 point
the mark up driven numbers.

00:59:57.250 --> 00:59:59.219
So what it takes to parse the page out.

00:59:59.219 --> 01:00:02.429
And then the purple ones are building
100 buttons programmatically.

01:00:02.429 --> 01:00:06.609
And what we can see is that IE is
a dog, Firefox is somewhat better,

01:00:06.610 --> 01:00:11.920
and no matter what browser you're
using, Dojo 0.9 really kicks butt.

01:00:13.619 --> 01:00:19.789
One of the ways that we've improved the speed of the
system is just by doing less to get the same result.

01:00:19.789 --> 01:00:28.550
So one of the ways that this is visible is by looking at
the number of objects that get allocated whenever we pull

01:00:28.550 --> 01:00:35.410
in Dojo, or some variant of Dojo, and see how much
we're doing and how many objects we have to create.

01:00:35.409 --> 01:00:42.989
Again, there's roughly half as many objects for
similar functionality in Dojo 0.9 versus Dojo 0.4.

01:00:42.989 --> 01:00:45.250
We couldn't be happier about that.

01:00:45.250 --> 01:00:49.710
And in particular, we couldn't be
happier about Dojo 0.9 on WebKit.

01:00:49.710 --> 01:00:51.800
WebKit kicks ass.

01:00:51.800 --> 01:00:55.320
I know that that's probably not kosher
for me to say, but WebKit is amazing.

01:00:55.320 --> 01:01:02.030
The Safari 3 beta is probably the fastest browser on
the planet for DHTML stuff and we tend to show you how.

01:01:02.030 --> 01:01:06.360
Last year, or earlier this year, Brian
Breen (assumed spelling) went ahead

01:01:06.360 --> 01:01:10.280
and used the Dojo charting engine so
client side charting is part of Dojo.

01:01:10.280 --> 01:01:17.090
He went ahead and used a charting engine to benchmark
a bunch of the stuff that we were seeing just kind

01:01:17.090 --> 01:01:22.850
of just guessing at that we'd seen between the
WebKit nightlies and the other browsers that are

01:01:22.849 --> 01:01:23.449
>> Dylan: available.

01:01:23.449 --> 01:01:28.579
What he did is he created a test site that the whole
world could go to and hit and then he recorded all

01:01:28.579 --> 01:01:32.519
of the average speeds from basically
every user that went to this site.

01:01:32.519 --> 01:01:36.519
And then collated the numbers, provided them online for us.

01:01:36.519 --> 01:01:45.099
>> Alex: So drawing a chart in this chart the performance
metrix chart in WebKit and this is on the 0.4 branch.

01:01:45.099 --> 01:01:49.000
This is not necessarily a huge
speed gain because of Dojo 0.9.

01:01:49.000 --> 01:01:52.719
On the 0.4 branch, drawing it was three tenths of a second.

01:01:52.719 --> 01:01:55.339
On IE, we're looking oh, excuse me.

01:01:55.340 --> 01:01:59.910
It's, no, 30 milliseconds, not three tenths of a second.

01:01:59.909 --> 01:02:01.769
On IE it's almost three tenths of a second.

01:02:01.769 --> 01:02:07.480
It's almost ten times as slow to render the
exact same thing on Internet Explorer due

01:02:07.480 --> 01:02:11.860
to its kind of lame and slow VML implementation.

01:02:11.860 --> 01:02:17.329
Opera is also an outstanding browser and it
gets pretty close, but WebKit, far and away,

01:02:17.329 --> 01:02:20.199
takes the cake in terms of raw performance.

01:02:20.199 --> 01:02:28.489
If we look at this on another axis, we can see that
we didn't have Safari 3 beta for Windows at the time

01:02:28.489 --> 01:02:31.609
so we couldn't bench mark this, and
we would love to get those numbers.

01:02:31.610 --> 01:02:37.590
But despite the fact that there
are rumors of the the painting path

01:02:37.590 --> 01:02:42.550
on OS 10 being a little bit less performer
versus Windows, it's clearly not true.

01:02:42.550 --> 01:02:45.880
The tuning that's gone into WebKit is astounding.

01:02:45.880 --> 01:02:50.329
It's faster than all commerce across
all browser across all OS's.

01:02:50.329 --> 01:02:55.279
And the same thing is true if we look at different
builds and different versions of those same browsers.

01:02:55.280 --> 01:03:02.160
We're seeing that as WebKit got better, the
performance stayed roughly in line with where it was.

01:03:02.159 --> 01:03:11.159
Yes. But what we care about at Dojo is
how fast it takes to build up our stuff.

01:03:11.159 --> 01:03:11.750
>> Dylan: Yes.

01:03:11.750 --> 01:03:12.150
(Laughter)

01:03:12.150 --> 01:03:17.840
>> Alex: So the fact that it's just generally
roughly a lot faster is awesome for you as a user,

01:03:17.840 --> 01:03:21.360
but we want to make it so that when you're
building apps for your user with Dojo

01:03:21.360 --> 01:03:28.590
that you're getting the best experience possible,
and WebKit is delivering in huge fashion.

01:03:28.590 --> 01:03:33.390
This is a this is a benchmark that we've
checked into both the 0.4 and 0.9 branches.

01:03:33.389 --> 01:03:35.690
You can go run it yourself and verify our results.

01:03:35.690 --> 01:03:41.429
And what we're seeing here is that to generate 100
buttons programmatically is less than a tenth of a second.

01:03:41.429 --> 01:03:45.000
You can paint more than a thousand
widgets a second in WebKit.

01:03:45.000 --> 01:03:52.019
To give you some basis for comparison, the upper limit
for the number of widgets that we could reasonably paint

01:03:52.019 --> 01:03:58.000
in an application on the 0.4 branch
on any browser was roughly two or 300.

01:03:58.000 --> 01:04:02.199
Now we're looking at doing thousands, depending on whether
or not you're building them in response to user action.

01:04:02.199 --> 01:04:04.019
You can provide really really rich UI's.

01:04:04.019 --> 01:04:07.559
Now obviously a thousand buttons
isn't really necessarily a good UI.

01:04:07.559 --> 01:04:10.920
(Laughter)
>> Alex: But you can do it.

01:04:10.920 --> 01:04:12.510
(Laughter)

01:04:12.510 --> 01:04:16.910
>> Alex: The calendar widget is significantly more taxing
in terms of the number of DOM nodes that we're creating.

01:04:16.909 --> 01:04:23.079
A button is like ten DOM nodes to get all the
accessibility and the theming and style stuff all done.

01:04:23.079 --> 01:04:26.670
So the calendar widget is huge in terms of nodes.

01:04:26.670 --> 01:04:28.659
>> Dylan: It's about a hundred nodes.

01:04:28.659 --> 01:04:33.969
>> Alex: Well, what we've got here is is
WebKit totally kicking everyone's butt.

01:04:33.969 --> 01:04:37.859
We're more than three times as
fast versus all the other browsers.

01:04:37.860 --> 01:04:41.130
And these are relatively these are on the same box.

01:04:41.130 --> 01:04:47.150
This is just parallel so we've got
VXT technology on the IE numbers.

01:04:47.150 --> 01:04:52.160
There's a little bit of hypervisor overhead, but
it's not enough to make up for these numbers.

01:04:52.159 --> 01:04:54.529
This is borne out by real world stuff.

01:04:54.530 --> 01:05:00.810
So at the end of this, we want to thank you
for coming today to hear about Dojo 0.9.

01:05:00.809 --> 01:05:06.599
We're going to be making a beta of 0.9 available
next week and you'll be able to start playing

01:05:06.599 --> 01:05:08.569
with all the stuff that we talked about and have shown.

01:05:08.570 --> 01:05:09.490
You can get it from Subversion.

01:05:09.489 --> 01:05:10.359
We're an open source product.

01:05:10.360 --> 01:05:11.260
It's free to use.

01:05:11.260 --> 01:05:12.810
There's no GPL licensing.

01:05:12.809 --> 01:05:18.199
It's all BSD so you can use it in your commercial
projects; you can use it for your open source stuff.

01:05:18.199 --> 01:05:24.349
There are no restrictions and we have code lineage so
that you know when you're using Dojo, it was clean.

01:05:24.349 --> 01:05:28.739
It's good enough for IBM, and it's good enough
for Apple, so we hope it's good enough for you.

01:05:28.739 --> 01:05:29.659
>> Dylan: Oh yeah, one more thing.

01:05:29.659 --> 01:05:30.339
(Laughter)

01:05:30.340 --> 01:05:33.740
>> Dylan: Skip to the next slide.

01:05:33.739 --> 01:05:34.009
>> Alex: George?

01:05:34.010 --> 01:05:37.290
>> Dylan: George, where are you?

01:05:40.519 --> 01:05:43.090
>> George: Thanks guys.

01:05:43.090 --> 01:05:52.450
(Applause)

01:05:52.449 --> 01:05:53.519
>> George: Dylan, Alex, that was awesome.

01:05:53.519 --> 01:05:54.519
Thank you very much.

01:05:54.519 --> 01:06:02.210
So actually given the time that we're at right now,
does the room manager want to make any announcements?

01:06:02.210 --> 01:06:07.369
Because if not I think that we should skip this.

01:06:07.369 --> 01:06:11.779
How many in the room saw the iPhone session at 3:30?

01:06:11.780 --> 01:06:12.550
The rebroadcast?

01:06:12.550 --> 01:06:12.940
Excellent.

01:06:12.940 --> 01:06:17.550
Okay, basically I was going to spend some time
to go through reiterating the best practices

01:06:17.550 --> 01:06:22.260
for creating AJAX applications on the iPhone,
but I do want to open this up for some Q

01:06:22.260 --> 01:06:25.480
and A. This is the end of a very long week.