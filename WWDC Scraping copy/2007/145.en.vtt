WEBVTT

00:00:15.830 --> 00:00:21.100
>> Guy Fullerton: Good afternoon and welcome
to the what's new in HIToolbox session.

00:00:21.100 --> 00:00:22.230
I'm Guy Fullerton.

00:00:22.230 --> 00:00:24.440
I'm the manager of the High Level Toolbox team.

00:00:24.440 --> 00:00:28.400
In the past couple of years at WWDC
our message has been about the future

00:00:28.399 --> 00:00:31.699
of HIToolbox development and
I've said the future is Cocoa.

00:00:31.699 --> 00:00:35.570
Well today I want to talk about that in a little
bit more detail and kind of give you an idea

00:00:35.570 --> 00:00:39.990
of what we do internally in terms of that future.

00:00:39.990 --> 00:00:44.800
So post Leopard, we don't find plan to add a lot
to HIToolbox.

00:00:44.799 --> 00:00:46.849
We plan to only add minor features.

00:00:46.850 --> 00:00:49.939
To give you an idea of the sort of
minor features we would consider adding.

00:00:49.939 --> 00:00:55.809
For the Leopard interface, we added a few API to Leopard
to allow your application to tweak that interface slightly

00:00:55.810 --> 00:00:57.380
and get it to load great under Leopard.

00:00:57.380 --> 00:01:01.520
That's the kind of thing we foresee
adding to HIToolbox post Leopard.

00:01:01.520 --> 00:01:06.710
We also plan on maintaining our existing bridges to Cocoa,
but we've added all the bridges we plan to add there

00:01:06.709 --> 00:01:08.769
and we'll probably fix some bugs in those bridges.

00:01:08.769 --> 00:01:11.959
We'll fix some bugs in our critical
technologies but that's about it.

00:01:11.959 --> 00:01:16.239
That's what we really plan to do for HIToolbox.

00:01:16.239 --> 00:01:19.719
So any of your HIToolbox code that
is currently in existence out there

00:01:19.719 --> 00:01:21.799
that you're maintaining is at a crossroads.

00:01:21.799 --> 00:01:25.730
You've got a number of different ways
to bring it forward to the future.

00:01:25.730 --> 00:01:29.890
One way is to modernize it the Carbon way.

00:01:29.890 --> 00:01:33.209
Depending on your application, this way be
a lot of work or it might be a little work

00:01:33.209 --> 00:01:37.329
but generally this involves getting rid of
QuickDraw, drawing with Quartz instead,

00:01:37.329 --> 00:01:39.730
switching over to HIView compositing mode.

00:01:39.730 --> 00:01:41.750
And that will give you a few benefits.

00:01:41.750 --> 00:01:44.409
You will be able to get the resolution
independence that way.

00:01:44.409 --> 00:01:47.649
You'll be able to use new features like HICocoaView.

00:01:47.650 --> 00:01:52.490
You'll be able to use some of the new views in the
past few releases but that might be a ton a work.

00:01:52.489 --> 00:01:54.079
Now it really depends on your code base.

00:01:54.079 --> 00:01:59.609
It might now be a lot of work for you, but if it is a lot
of work for your application, now is that time to look

00:01:59.609 --> 00:02:03.439
and see if it's the right business
decision to just go to Cocoa.

00:02:03.439 --> 00:02:06.140
Now there's a number of different ways you can go to Cocoa.

00:02:06.140 --> 00:02:10.300
Clearly the most extreme way is to
rewrite your app from the ground up.

00:02:10.300 --> 00:02:15.380
That might be a lot of work, but it might be
less work than transitioning to modern Carbon.

00:02:15.379 --> 00:02:17.549
You can also adopt piecemeal.

00:02:17.550 --> 00:02:21.180
If you're revving your application and you want
to add a new window for a specific function.

00:02:21.180 --> 00:02:25.349
Maybe you're adding a modern preferences dialog
that matches the way Mac OS does preferences.

00:02:25.349 --> 00:02:30.079
Maybe this is the right time to implement
that preferences window as a Cocoa window with Cocoa views.

00:02:30.080 --> 00:02:34.690
Using all the Cocoa technologies and
the Interface Builder support and so on.

00:02:34.689 --> 00:02:41.009
If it's easy to get to compositing in your application,
you can use HICocoaView as a partial bridge.

00:02:41.009 --> 00:02:45.849
You can start adopting some of the new Cocoa views, or older
the Cocoa views and dropping them into your application

00:02:45.849 --> 00:02:48.680
in various places and take advantage of cool functionality.

00:02:48.680 --> 00:02:53.200
And we're going to talk about that
a lot more later in the session.

00:02:53.199 --> 00:02:58.299
Now a lot of these solutions require you to
factor your applications in ways you may not have.

00:02:58.300 --> 00:03:02.390
And that can be a lot of work, and that again
comes back to potentially rewriting in Cocoa.

00:03:02.389 --> 00:03:03.539
So it's really up to you.

00:03:03.539 --> 00:03:05.659
You guys are the ones that are maintaining the code.

00:03:05.659 --> 00:03:11.039
You guys need to look and see what it's going to take to
modernize it via Carbon, versus modernize it via Cocoa.

00:03:11.039 --> 00:03:16.039
If you do go ahead and decide to modernize it via Carbon
realize that your getting yourself into a little bit

00:03:16.039 --> 00:03:20.439
of a dead end strategy because we're not planning
on adding a lot of functionality to Carbon.

00:03:20.439 --> 00:03:22.969
A great example of this, obviously, is 64-bit.

00:03:22.969 --> 00:03:24.020
I'm sure you all hear this.

00:03:24.020 --> 00:03:28.380
I'm sure some of you hissed at this when
Bertrand talked about no Carbon UI in 64-bit.
d

00:03:28.379 --> 00:03:30.109
But the fact is this is the plan.

00:03:30.110 --> 00:03:35.670
So we didn't go into a lot of details
in the earlier sessions.

00:03:35.669 --> 00:03:38.139
I'd like to talk about some of the details now.

00:03:38.139 --> 00:03:42.189
Specifically the Carbon constructs
that generate user interface.

00:03:42.189 --> 00:03:46.210
Your controls, windows and menus
will not be available in 64-bit.

00:03:46.210 --> 00:03:49.250
Some of the other associated technologies won't either.

00:03:49.250 --> 00:03:52.099
MLTE/Textension, whatever you call it.

00:03:52.099 --> 00:03:56.969
Is there purely there to do text editing in
Carbon views, so that won't be available in 64-bit.

00:03:56.969 --> 00:04:00.520
I also have the HIObject listed up there.

00:04:00.520 --> 00:04:04.330
That's only sort of not available in 64-bit.

00:04:04.330 --> 00:04:09.910
The HIObject APIs will be available
in 64-bit purely for the construction

00:04:09.909 --> 00:04:14.240
of just a generic HIObject to use
as a receptor for Carbon events.

00:04:14.240 --> 00:04:17.870
Speaking of Carbon Events, they're still in for 64-bit.

00:04:17.870 --> 00:04:21.590
You will still be able to create events,
destroy events, send them to event targets,

00:04:21.589 --> 00:04:24.500
receive them, get and set parameters and so forth.

00:04:24.500 --> 00:04:29.829
But keep in mind that a huge portion of our existing
Carbon events are all implicitly tied to controls, windows,

00:04:29.829 --> 00:04:32.029
and menus and none of those events will be sent to you.

00:04:32.029 --> 00:04:33.989
So you won't be able to listen to those.

00:04:33.990 --> 00:04:39.780
But there are still some sort of interface agnostic
events that will still get sent out normally.

00:04:39.779 --> 00:04:43.519
Another piece that's going to stick
around is text input sources.

00:04:43.519 --> 00:04:45.620
This is, I believe, it's new for Leopard.

00:04:45.620 --> 00:04:49.980
It's a more modern set of interfaces
to doing input method type technology.

00:04:49.980 --> 00:04:55.920
That is not tied implicitly to Carbon
UI, so that will stick around for 64-bit.

00:04:55.920 --> 00:05:07.199
So there's kind of deciding how to say this next thing.

00:05:07.199 --> 00:05:10.159
There's 2 other points that I want to talk about.

00:05:10.160 --> 00:05:13.830
I don't list all the HIToolbox
technologies on these last 2 slides.

00:05:13.829 --> 00:05:16.909
To be completely honest we're still
figuring out what's in and out.

00:05:16.910 --> 00:05:18.210
Some hard lines have been drawn.

00:05:18.209 --> 00:05:24.589
I've shown them on these slides, but if you've looked
at the Leopard beta you may have noticed that all

00:05:24.589 --> 00:05:27.829
of the HIToolbox APIs are still there for 64-bit.

00:05:27.829 --> 00:05:32.620
And that's because we haven't finished decideing what's
in, what's out and dealing with all the resulting fallout.

00:05:32.620 --> 00:05:35.430
We plan to have all those decisions in the coming weeks.

00:05:35.430 --> 00:05:37.370
And we'll remove them for GM.

00:05:37.370 --> 00:05:42.050
So even if you do get excited and see
that those APIs are there in the beta.

00:05:42.050 --> 00:05:47.949
Please don't develop against them; you're
just getting yourself into a dead end path.

00:05:47.949 --> 00:05:53.139
So with that out of the way, we did add a few things to HI
Toolbox for Leopard and the first thing we'd like to talk

00:05:53.139 --> 00:05:55.610
about is adopting the new Leopard appearance.

00:05:55.610 --> 00:05:58.870
I'd like to bring Kurt up to take you through that.

00:06:02.319 --> 00:06:03.909
>> Kurt: Thank you, Guy.

00:06:06.410 --> 00:06:10.950
So obviously the interface in Leopard has changed.

00:06:10.949 --> 00:06:14.089
The good news is that we've all been
through minor changes in Aqua before.

00:06:14.089 --> 00:06:18.009
So as long as we're continuing to
use the standard window controls.

00:06:18.009 --> 00:06:21.779
In theme brushes, the application interface
should continue to load just great.

00:06:21.779 --> 00:06:28.159
There are a couple of changes related to Leopard
changes however, that you may want to adopt.

00:06:29.290 --> 00:06:35.020
First thing you probably noticed is that
standard windows that have a toolbar rather

00:06:35.019 --> 00:06:39.349
than having this distinct look between
the title bar and the toolbar.

00:06:39.350 --> 00:06:41.530
Now they have this unified appearance.

00:06:41.529 --> 00:06:47.089
This nice gradient from the top of the
title bar to the bottom of the toolbar

00:06:47.089 --> 00:06:48.899
and you don't have to do anything to adopt this.

00:06:48.899 --> 00:06:53.109
This is just a change that we've made
and you'll get this appearance for free

00:06:53.110 --> 00:06:57.910
as long as you're using a Carbon toolbar.

00:06:57.910 --> 00:07:03.080
We did have a similar implementation back on
Tiger, but we didn't publicize how to get that.

00:07:03.079 --> 00:07:06.019
So we're adding a window attribute
and we're exposing that in Leopard.

00:07:06.019 --> 00:07:09.359
The K Window Unified Title And Tool Bar Attribute.

00:07:09.360 --> 00:07:15.310
So using this will get this similar appearance back
on Tiger, but will have no visual effect on Leopard

00:07:15.310 --> 00:07:21.790
because you'll just continue to have the nice gradient.

00:07:21.790 --> 00:07:26.150
Windows with the K Window Metal Attribute
will get this full grey appearance.

00:07:26.149 --> 00:07:31.539
Again it's a consistent title toolbar look
and then this full grey.

00:07:31.540 --> 00:07:36.650
We didn't change any of the metric for windows with
this metal attribute so we continue to outset the frame

00:07:36.649 --> 00:07:39.669
for pixels or for points and on the bottom as well.

00:07:39.670 --> 00:07:41.949
But we don't recommend doing this.

00:07:41.949 --> 00:07:48.189
The recommended appearance is to just use the
standard document window for your appearance.

00:07:48.189 --> 00:07:55.389
This allows the content to go up against the edges
of the window and it has a really nice, clean look.

00:07:55.389 --> 00:07:58.719
Some standard applications including
many that Apple provides

00:07:58.720 --> 00:08:03.120
like in this case Finder or iTunes, iPhoto, and iCal

00:08:03.120 --> 00:08:08.620
have this section in the bottom of
the window which we call the bottom bar

00:08:08.620 --> 00:08:12.800
where you can put your status information
or some controls like buttons,

00:08:12.800 --> 00:08:16.009
like in iTunes there is a plus
button to add a new Play List.

00:08:16.009 --> 00:08:20.439
So since they are using the standard
window, just a standard document window.

00:08:20.439 --> 00:08:23.819
You need to tell the toolbox somehow to draw this area.

00:08:23.819 --> 00:08:26.709
It's not just a standard theme
brush; you can't just draw this look.

00:08:26.709 --> 00:08:30.680
It's nice gradient, so the toolbox needs to know about it.

00:08:30.680 --> 00:08:38.279
So we've added this new API called HI Window Set
Content Border Thickness that allows you to set an inset

00:08:38.279 --> 00:08:42.799
into the content area of your window
where this gradient will be extended.

00:08:42.799 --> 00:08:48.459
Currently we only allow a content border
on the top and the bottom of the window.

00:08:48.460 --> 00:08:49.990
You'll get this nice gradient.

00:08:49.990 --> 00:08:55.000
Since this is now in the content of your window you
can draw in this area using stat, you know, just putting

00:08:55.000 --> 00:09:00.419
in your status information or drawing
some buttons, and it's a nice clean look.

00:09:00.419 --> 00:09:05.729
Since this is in the content of the window, and
your content is rectangular the default look is

00:09:05.730 --> 00:09:08.810
to get the square bottom corners.

00:09:08.809 --> 00:09:14.109
We do realize, however that some
applications may want them to be rounded

00:09:14.110 --> 00:09:18.730
so we've added the KHI Window Bit Round
Bottom Bar Corners.

00:09:18.730 --> 00:09:23.230
This is only valid for windows that
have the content border thickness

00:09:23.230 --> 00:09:26.190
for the bottom and even then if it's only big enough.

00:09:26.190 --> 00:09:29.890
And big enough is currently defined to
be greater than 15 points and this is

00:09:29.889 --> 00:09:32.850
so that the masking of the corners looks good.

00:09:32.850 --> 00:09:36.290
It doesn't work with windows with the metal attribute.

00:09:36.289 --> 00:09:41.120
The metal windows have their own way of
dealing with rounded or squared corners.

00:09:44.809 --> 00:09:49.489
Also in Leopard you obviously noticed
that the menu bar is transparent.

00:09:49.490 --> 00:09:56.600
So if you're having a toolbar in your window by using the
utility window and positioning that underneath the menu bar,

00:09:56.600 --> 00:09:59.790
your users will see what you're doing
and they'll think it looks pretty tacky.

00:09:59.789 --> 00:10:06.349
So that way that you correct this is to use a
window that is using the toolbar window class,

00:10:06.350 --> 00:10:09.300
and you just position this below the menu bar.

00:10:09.299 --> 00:10:15.449
The toolbar window has no title bar so you won't
get the look and you'll get the desired behavior.

00:10:15.450 --> 00:10:21.360
Next I'd like to talk about HICocoaView.

00:10:21.360 --> 00:10:27.009
HICocoaView is a big deal and this
is a new HIView that's available.

00:10:27.009 --> 00:10:33.069
It's only for compositing windows
and it's a container for Cocoa views.

00:10:33.070 --> 00:10:36.379
Why are we providing this to you?

00:10:36.379 --> 00:10:38.210
Well there's 2 reasons.

00:10:38.210 --> 00:10:43.750
The first reason is that we have 2 separate
frameworks implementing the same user interface.

00:10:43.750 --> 00:10:48.870
There's the high level toolbox and Carbon
stack, and AppKit in the Cocoa stack.

00:10:48.870 --> 00:10:50.149
And there's been some discrepancies.

00:10:50.149 --> 00:10:53.379
Some controls have a richer feature set than others,

00:10:53.379 --> 00:10:56.889
and some controls that just been
implemented in one stack and not the other.

00:10:56.889 --> 00:11:01.539
So we want to be able to provide this consistent
experience and allow you to take advantage

00:11:01.539 --> 00:11:03.980
of some controls that are available in AppKit.

00:11:03.980 --> 00:11:08.950
And this basically is the second reason as well.

00:11:08.950 --> 00:11:13.509
We have a rich feature set in HI level tool
box in terms of which controls you can use,

00:11:13.509 --> 00:11:15.580
but AppKit has a really has a super set of that.

00:11:15.580 --> 00:11:20.930
Including some controls like the NS
Rule Editor, NS Token Field as examples.

00:11:20.929 --> 00:11:28.669
Furthermore all new developments with new features are
being represented in terms of NS views or Cocoa views.

00:11:28.669 --> 00:11:33.339
So if you want to use Core Animation or
PDFkit or WebKit in your application,

00:11:33.340 --> 00:11:36.910
you really need to start doing this in terms of Cocoa.

00:11:36.909 --> 00:11:42.509
And we want to allow you a way to use these new technologies
and pull them back into your Carbon applications.

00:11:45.250 --> 00:11:51.980
As an example the decision was made for
Leopard to integrate Finder and Spotlight.

00:11:51.980 --> 00:11:57.670
Now Spotlight had done all their user interface
in Cocoa which was available back on Tiger.

00:11:57.669 --> 00:12:00.219
And we wanted to pull that into Finder as well.

00:12:00.220 --> 00:12:06.920
So when you execute a search in Finder, that whole section
of the window is replaced with a single HICocoaView

00:12:06.919 --> 00:12:13.979
and now a rich NS view hierarchy is
embedded in that area of the window.

00:12:13.980 --> 00:12:15.490
It just reacts how it's expected to.

00:12:15.490 --> 00:12:19.830
The user doesn't even know that there's another
framework that is operating in that area

00:12:19.830 --> 00:12:21.780
of the window, and that's really the idea.

00:12:21.779 --> 00:12:24.870
We just want to be able to allow
you to leverage new technologies

00:12:24.870 --> 00:12:28.120
for Leopard's new development that
you've done in other areas.

00:12:28.120 --> 00:12:31.129
In different application in the utilities as an example.

00:12:31.129 --> 00:12:38.149
There's 2 ways to create in HICocoaView,
the first is problematically.

00:12:38.149 --> 00:12:43.360
Just as a side note, when you're running in the context
of run application event loop, like when you're responding

00:12:43.360 --> 00:12:47.129
to Carbon events that is being sent out of the event loop.

00:12:47.129 --> 00:12:50.850
We take care of setting up and disposing
the auto release pool around there.

00:12:50.850 --> 00:12:57.580
So you only need to create and release and auto release pool
if you're out of the context of run application event loop.

00:12:57.580 --> 00:13:04.540
For example you're setting up your application
initializing before getting into the context.

00:13:04.539 --> 00:13:08.469
Next you just create and initialize your NS view.

00:13:08.470 --> 00:13:13.420
In this case we're just creating an NS button.

00:13:13.419 --> 00:13:22.049
Call the API HICocoaViewCreate the first parameter is
the Cocoa NS view, second parameter is a set of options.

00:13:22.049 --> 00:13:23.389
Currently we only accept zero.

00:13:23.389 --> 00:13:31.090
And this API will return to you an HICocoaView
which is an HIView, a Carbon view.

00:13:31.090 --> 00:13:36.660
So now you can use any of the standard HIView
APIs on it in order to position it so its bounds,

00:13:36.659 --> 00:13:40.299
so it's HIViewLayout information
and in this example I'm just adding it

00:13:40.299 --> 00:13:46.019
to a parent which will then display it in a window.

00:13:46.019 --> 00:13:52.039
The API also retains the incoming Cocoa view
so you can go ahead and release it afterward.

00:13:53.490 --> 00:13:58.049
The second way you create a HICocoa
view is using Interface Builder.

00:13:58.049 --> 00:14:03.120
Now on the Leopard version on the version of
Leopard that is available to you right now,

00:14:03.120 --> 00:14:06.940
there is no distinct HICocoaView in
Interface Builder's library.

00:14:06.940 --> 00:14:09.420
We hope to have that addressed by the time we jam.

00:14:09.419 --> 00:14:17.000
So currently what you would be doing is selecting the
custom HIView item in the Interface Builder library,

00:14:17.000 --> 00:14:23.470
drag it to your window, and in the inspector
window change the class ID and make sure

00:14:23.470 --> 00:14:26.250
that it's com dot Apple dot HICocoaView.

00:14:26.250 --> 00:14:31.889
Then when this window is instantiated there
will be empty HICocoaView container.

00:14:31.889 --> 00:14:36.889
Then you'll programmatically set a
Cocoa view in that HICocoaView.

00:14:36.889 --> 00:14:40.179
Using that HICocoaView set view.

00:14:40.179 --> 00:14:46.839
This API will do what you expect if the
HICocoaView does contain an NS view already;

00:14:46.840 --> 00:14:50.610
it will release it before retaining the incoming one.

00:14:50.610 --> 00:15:00.480
And finally we have an API HICocoaView get
view which will return the associated NS view.

00:15:00.480 --> 00:15:04.090
So this is kind of new, we're using new
technologies that we may not be used to.

00:15:04.090 --> 00:15:07.660
So what are these new changes we have to make?

00:15:07.659 --> 00:15:13.179
First of all since your going to be using AppKit most
likely for some of these controls you need to make sure

00:15:13.179 --> 00:15:15.199
that you're linking to the appropriate frameworks.

00:15:15.200 --> 00:15:17.250
So link to the Cocoa framework.

00:15:17.250 --> 00:15:22.909
If you're using other things like QTKit, you'll have
to make sure that you link against that framework as well.

00:15:22.909 --> 00:15:29.169
You're now adding Objective-C C code to your files as well.

00:15:29.169 --> 00:15:30.379
The compiler will complain.

00:15:30.379 --> 00:15:33.009
It doesn't understand what these brackets mean basically.

00:15:33.009 --> 00:15:35.559
So you need to make sure that you compile your modules,

00:15:35.559 --> 00:15:40.529
your C and C++ files with the Objective-C
or the Objective-C++ compiler.

00:15:40.529 --> 00:15:45.559
The way you do that in Xcode is you
select the file, get info on that file,

00:15:45.559 --> 00:15:50.359
and make sure that the file type is
set to Objective_C of Objective-C++.

00:15:50.360 --> 00:15:56.960
During the initialization of your
application, call NS application load.

00:15:56.960 --> 00:16:01.570
This will load and initialize AppKit
to be run in a Carbon application.

00:16:01.570 --> 00:16:08.930
And finally like I mentioned before, set up an outer
release pool around your code that creates NS objects

00:16:08.929 --> 00:16:13.509
if it's outside of the context
of our application event load.

00:16:13.509 --> 00:16:17.590
Now because this is so easy to do, and
I really want to encourage you to do it,

00:16:17.590 --> 00:16:20.830
I just wanted to run through a quick little demo

00:16:20.830 --> 00:16:27.250
of modifying a Carbon application
to use on your AppKit technologies.

00:16:28.480 --> 00:16:35.019
So first let me provide a little bit of context here.

00:16:35.019 --> 00:16:40.899
What I have here is just a simple Carbon application and
just suppose you have an image processing application

00:16:40.899 --> 00:16:47.129
that brings up a dialog and this
is the dialog that you'll see.

00:16:48.149 --> 00:16:54.120
Over here, well what this style would be for is to
select an image from a particular library for example.

00:16:54.120 --> 00:16:58.100
So I present some libraries, plants, abstracts.

00:16:58.100 --> 00:17:03.310
And then I have this view here which
displays the images in the library

00:17:03.309 --> 00:17:07.329
where I can navigate between the different images.

00:17:07.329 --> 00:17:15.250
When the user finds an image that they like, they
are able to add some tags to it like green grass.

00:17:15.250 --> 00:17:24.319
And then when they select the image, the image process
application will go off and do whatever it needs to do.

00:17:24.319 --> 00:17:30.039
For users this isn't a really great interface for the
tags, because these really are types of tokens where,

00:17:30.039 --> 00:17:35.329
and it's kind of silly to ask the
user to separate each tag by a comma.

00:17:35.329 --> 00:17:39.269
So as a developer I'm looking at this and
thinking I'd really like to have a tokenized feel.

00:17:39.269 --> 00:17:44.150
Something like in Mail, in the To field, and
when you add a name it turns into this atomic unit.

00:17:44.150 --> 00:17:46.230
And I know that the NSTokenField does that.

00:17:46.230 --> 00:17:52.400
So let's go ahead and modify this application
to use an NSTokenField in that area.

00:17:52.400 --> 00:17:57.660
So this is basically my interface.

00:17:57.660 --> 00:18:00.700
There is this data browser view over here.

00:18:00.700 --> 00:18:04.069
This is a custom Carbon view, the image browser view.

00:18:04.069 --> 00:18:11.419
Now if you've come to any of the last two years in
WWC and watched our creative custom HIView sessions,

00:18:11.420 --> 00:18:13.750
we've gone through building a version of this kind of view.

00:18:13.750 --> 00:18:20.950
So this is just that custom view that I've included
the sample code in, in this mocked up application.

00:18:20.950 --> 00:18:23.650
The sample code for that view is
available on the ADC web site.

00:18:23.650 --> 00:18:26.140
So you can download and see how we're doing that.

00:18:26.140 --> 00:18:32.340
But the meat of this is it really let's change this
edit unit code text field to be an NSTokenField.

00:18:32.339 --> 00:18:45.409
So I select the item and in the identity inspector I want
to change the class ID to com dot Apple dot HICocoaView.

00:18:45.410 --> 00:18:55.720
I'm also going to, just for cosmetic reasons,
increase the size of the field and I want

00:18:55.720 --> 00:18:58.210
to make sure to add a control signature and ID in.

00:18:58.210 --> 00:19:05.460
This is just so once the windows instantiated; I have
a way to programmatically access that created view.

00:19:05.460 --> 00:19:16.380
So I add tags here and now I need to
go about modifying my application.

00:19:16.380 --> 00:19:22.480
Since I'm going to be bringing in some files related
to AppKit I need to make sure that I am linking

00:19:22.480 --> 00:19:25.440
against AppKit, so in my external frameworks

00:19:25.440 --> 00:19:35.740
I want to make sure to link against Cocoa and
the Cocoa dot framework is an umbrella framework

00:19:35.740 --> 00:19:38.549
which contains AppKit and Foundation.

00:19:41.690 --> 00:19:47.549
Next, because I am going to be adding
some Objective-C code to my C or C++ file,

00:19:47.549 --> 00:19:52.399
I want to make sure that I'm compiling
with the correct compiler.

00:19:52.400 --> 00:20:02.940
So I select the main file, get info on it; verify that
the file type is set to Objective-C or Objective-C++.

00:20:02.940 --> 00:20:08.130
Finally let's bring out the app or the main file.

00:20:09.309 --> 00:20:16.940
I'm bringing in Cocoa; this is just so I can bring in the
headers so I know I have a reference to the NSTokenField.

00:20:16.940 --> 00:20:26.570
I add a constant so I can access
that HICocoaView in the window.

00:20:26.569 --> 00:20:38.069
Then in main I want to make sure that I call NS
Application Load, this will initialize AppKit to be run

00:20:38.069 --> 00:20:41.919
in a Carbon context and then I
set up an amount of release pool.

00:20:41.920 --> 00:20:47.170
This is because I'm going to be creating this
window during the initialization of this app prior

00:20:47.170 --> 00:20:50.900
to getting into run application event mode.

00:20:50.900 --> 00:20:57.490
I want to free it, release that pool prior to getting the
run application event load, other wise we're just having

00:20:57.490 --> 00:21:04.140
a pool that's leaking for lack of a better term.

00:21:06.029 --> 00:21:07.859
I have this function called SetupWindow.

00:21:07.859 --> 00:21:09.819
This basically just sets up that data browser.

00:21:09.819 --> 00:21:13.779
It populates it with the library information.

00:21:13.779 --> 00:21:22.420
But this is where I'm going to set up that NS token
field so I'm using HIView find by ID in order

00:21:22.420 --> 00:21:25.380
to grab the HICocoaView that is in that nib.

00:21:25.380 --> 00:21:32.510
Once that nib is loaded, I'm creating by
allocating and initializing an NSTokenField

00:21:32.509 --> 00:21:36.910
and then call the HICocoaView Set View API.

00:21:36.910 --> 00:21:38.590
Passing in my HICocoaView.

00:21:38.589 --> 00:21:41.959
In the second parameter is the NS view.

00:21:41.960 --> 00:21:48.890
This API will retain the NS view so you
can go ahead and release it afterwards.

00:21:48.890 --> 00:21:53.480
Now assuming I haven't done anything
wrong, let's see what it looks like now.

00:21:53.480 --> 00:22:03.670
So it's the same application I can navigate between
these but this tags field should be an NSTokenField.

00:22:07.289 --> 00:22:11.289
So this really does provide a nice experience to the user.

00:22:11.289 --> 00:22:13.029
It tokenizes this field.

00:22:13.029 --> 00:22:20.139
It does respond to focusing correctly as I tab you can
see the different controls are still tabbing around,

00:22:20.140 --> 00:22:27.009
and it does get the same user interface that you'd expect
like rollover works, dragging the items continues to work.

00:22:27.009 --> 00:22:31.430
So it just enhances the experiences the
user so you've been able to add a control

00:22:31.430 --> 00:22:33.610
that has been implemented in AppKit, not in Carbon.

00:22:33.609 --> 00:22:38.159
A high level toolbox and use that
in your Carbon application.

00:22:39.369 --> 00:22:43.659
Finally I was looking through the
example code, in the Leopard seed

00:22:43.660 --> 00:22:46.830
and I noticed that developer examples Quartz core.

00:22:46.829 --> 00:22:53.069
There is a Core Animation example where it's
a Core Animation implementation of Cover Flow.

00:22:53.069 --> 00:23:00.740
I thought that was a really good, it's kind of a good
sample code that I could be using in this application.

00:23:00.740 --> 00:23:02.390
It contextualizes the images better.

00:23:02.390 --> 00:23:04.020
You can use Cover Flow, and it's dynamic.

00:23:04.019 --> 00:23:05.079
You know, it's flashy.

00:23:05.079 --> 00:23:09.399
So let's go ahead and add Core
Animation support in here as well.

00:23:09.400 --> 00:23:19.790
So I'm going to go back to my main nib and replace
this image browser view with an HICocoaView.

00:23:23.130 --> 00:23:29.990
So just like I did with the NSTokenField,
I changed this to be an HICocoaView.

00:23:31.650 --> 00:23:39.500
Core Animation is in the Quartz core
frameworks so I need to make sure that I link

00:23:39.500 --> 00:23:55.099
against the appropriate framework there
and I need to offload tie as well on stage.

00:23:55.099 --> 00:23:59.659
And just like with the TokenField,
I go ahead and add some support here.

00:23:59.660 --> 00:24:04.509
Actually before I get into doing
that, I should add the sample code

00:24:04.509 --> 00:24:11.129
from the Core Animation file into my project as well.

00:24:11.130 --> 00:24:16.020
So if you go in and look at that example, the Core
Animation example which they call Covert Flow.

00:24:16.019 --> 00:24:17.299
It's just an MVC.

00:24:17.299 --> 00:24:22.230
It's a standard Cocoa application where there's the
nib and then there's the associated files that deal

00:24:22.230 --> 00:24:24.309
with the model, the view and the controller.

00:24:24.309 --> 00:24:35.470
And all I'm going to do is just take the nib, drag it
into my resources, in this case I'm just going to copy it in.

00:24:35.470 --> 00:24:49.420
I also want to create a group here in my source
code for the Covert Flow and add some of my project.

00:24:49.420 --> 00:24:50.830
And that's basically all I've done.

00:24:50.829 --> 00:24:53.240
I haven't really updated the code
and I'll talk about a little bit

00:24:53.240 --> 00:24:58.049
about what I've updated in that
sample code when I'm done here.

00:24:58.049 --> 00:25:03.240
Then like I said, now we go ahead
and update the code itself.

00:25:03.240 --> 00:25:07.890
So the way the Covert Flow application
is architected there's the controller

00:25:07.890 --> 00:25:10.280
and then we allocate and initialize that.

00:25:10.279 --> 00:25:15.920
It goes ahead and loads that nib up, so I need
to make sure that I reference the controller.

00:25:15.920 --> 00:25:25.930
Back in that same set up window function
after I've set up the TokenField.

00:25:25.930 --> 00:25:27.720
I'm going to add this section of code.

00:25:27.720 --> 00:25:31.390
This basically does the same thing
as what I do with TokenField.

00:25:31.390 --> 00:25:35.100
I have the controller, I allocate and initialize it.

00:25:35.099 --> 00:25:38.259
That will take care of loading any information from the nib.

00:25:38.259 --> 00:25:45.799
I did a reference to my HICocoa and I associate
the controllers view with my HICocoaView.

00:25:45.799 --> 00:25:53.680
Finally I have a function in here to update the
viewable images, and the way I was doing that previously

00:25:53.680 --> 00:25:59.500
with the Image Browser view was using
an API for that view to set its images

00:25:59.500 --> 00:26:05.119
and I changed that to set the images on the NS view.

00:26:05.119 --> 00:26:10.849
Use the API HICocoa get view,
this gets the associated Cocoa view

00:26:10.849 --> 00:26:15.449
and then I set the images using the set images on that view.

00:26:15.450 --> 00:26:23.430
Now this may be a little bit confusing and I intentionally
left the code, the structures are called view.

00:26:23.430 --> 00:26:27.870
And that may be confusing but that's really just what
the sample code for Covert Flow referred to these items

00:26:27.869 --> 00:26:33.469
as so I just didn't want to change any of the things
and make it any more confusing than it needed to be.

00:26:33.470 --> 00:26:36.870
And I mentioned that I did change the
sample code just a tiny little bit.

00:26:36.869 --> 00:26:43.250
And what I did was I added an API on the
NS view that would accept some images

00:26:43.250 --> 00:26:48.750
So when I get the set images message the
view itself just messages the controller,

00:26:48.750 --> 00:26:55.039
and it takes care of putting the images into
the model and then updating the view itself.

00:26:55.039 --> 00:26:58.279
So again, cross your fingers, make
sure I didn't do anything wrong.

00:26:59.289 --> 00:27:08.869
And now we see that we've implemented Cover Flow
using Core Animation inside my Carbon application.

00:27:08.869 --> 00:27:12.899
( Background animation heard. Applause.)

00:27:12.900 --> 00:27:18.759
So the point here is to move forward using,
you know you have to get used to using Cocoa

00:27:18.759 --> 00:27:20.829
and start using it in your Carbon applications.

00:27:20.829 --> 00:27:25.159
And there are these new cool technologies
and I want you to be able to use

00:27:25.160 --> 00:27:28.930
that in your existing apps to go ahead and update it.

00:27:28.930 --> 00:27:31.370
So to talk more about Carbon and Cocoa integration,

00:27:31.369 --> 00:27:36.219
I'd like to bring up Bryan Prusha,
and switch back to the slides please.

00:27:38.869 --> 00:27:45.839
>> Brian: Thank you ,Kurt.

00:27:45.839 --> 00:27:48.889
Alright to...

00:27:48.890 --> 00:27:53.620
continue on with the theme of adding
Cocoa to your existing Carbon application.

00:27:53.619 --> 00:27:58.179
I'm happy to say that we've already
started doing a little bit of that for you.

00:27:58.180 --> 00:28:03.019
Open and save panel, panels through Navigation
Services have been completely reimplemented

00:28:03.019 --> 00:28:06.710
on top of Cocoas open and save panels.

00:28:06.710 --> 00:28:10.120
The three things I want to talk about
here, how this provides more consistency

00:28:10.119 --> 00:28:18.139
for the user some compatibility issues that you'll need
to be aware of in your applications, and continuity.

00:28:18.140 --> 00:28:26.740
How this will help you move on to more
AppKit and Cocoa technologies in the future.

00:28:26.740 --> 00:28:33.150
So because the Navigation Services dialogs
are hosted by the Cocoa UI, the same look

00:28:33.150 --> 00:28:36.530
and feel, the same accessibility characteristics.

00:28:36.529 --> 00:28:41.450
So your users will have a seamless user
interface that they haven't quite had before.

00:28:41.450 --> 00:28:44.080
There always been a couple little glitches along the way.

00:28:44.079 --> 00:28:50.980
One cog yet with accessibility in the beta right now, no
accessibility events reach the custom area at the bottom.

00:28:50.980 --> 00:28:52.420
This will be addressed before we ship.

00:28:52.420 --> 00:28:57.820
So let's look at some of that new UI that we have.

00:28:57.819 --> 00:29:05.230
Navigation Services is inheriting from Cocoa
the new side bar that's shown up in Finder.

00:29:05.230 --> 00:29:07.779
Beautiful new icon view.

00:29:09.529 --> 00:29:16.399
Updated searching capabilities and even a
media browser so you can look at your music,

00:29:16.400 --> 00:29:19.740
your movies, and photos of your kid on your computer.

00:29:21.309 --> 00:29:23.230
Right. So we've got all the new UI.

00:29:23.230 --> 00:29:26.539
What does this mean for you in your application?

00:29:26.539 --> 00:29:29.509
Well we've done everything we can to
make this as seamless as possible.

00:29:29.509 --> 00:29:34.809
With any luck you won't have
to do anything to take advantage of this.

00:29:34.809 --> 00:29:36.569
It will just appear.

00:29:36.569 --> 00:29:40.939
But in some cases, your application
will have the old Tiger look.

00:29:40.940 --> 00:29:42.450
So let's talk about that.

00:29:42.450 --> 00:29:45.519
This will appear for 2 reasons.

00:29:45.519 --> 00:29:50.920
If somewhere along the way during one of the releases
we've discovered an incompatibility with your client code

00:29:50.920 --> 00:29:54.700
in the way that we've made changes
inside Navigation Services.

00:29:54.700 --> 00:29:59.690
One example of this would be the transition
in Panther to compositing dialogs.

00:29:59.690 --> 00:30:03.039
So we've made and added an applications
this doesn't work around.

00:30:03.039 --> 00:30:10.569
And similarly this transition to Cocoa we may have found
a compatibility issue with this new implementation.

00:30:10.569 --> 00:30:16.109
So if your code was doing something that we didn't
expect with the API, or perhaps you were looking

00:30:16.109 --> 00:30:22.099
for specific dialog item, or Carbon control
that no longer exists in the window.

00:30:22.099 --> 00:30:24.569
So what can we do about that?

00:30:24.569 --> 00:30:28.359
First thing to do is to review the bugs
that have been sent to you by Apple.

00:30:28.359 --> 00:30:31.279
Anytime we've made one of these
applications this doesn't work around,

00:30:31.279 --> 00:30:37.099
we've sent a bug to you describing exactly what
the issue is and what you can do to fix it.

00:30:37.099 --> 00:30:43.009
So once you've looked at that, increment
you CF bundle version in your info P list

00:30:43.009 --> 00:30:51.759
and that will tell the Navigation Services implementation
to stop adding the applications to the specific work around.

00:30:51.759 --> 00:30:56.859
Then you'll see wherever crash or drawing glitch or
whatever was keeping us from giving you the new UI.

00:30:56.859 --> 00:31:03.289
You can fix it and ship that in
the next version of your app.

00:31:03.289 --> 00:31:08.349
So one causality of the transition you may
have already have noticed in your seed is

00:31:08.349 --> 00:31:12.559
that the Nav preview proc is no longer
being called by Navigation Services.

00:31:12.559 --> 00:31:17.789
So if you used to have some navigation that looked
like this, where we would pass you a rectangle

00:31:17.789 --> 00:31:22.720
for the entire preview column area which you can draw into.

00:31:22.720 --> 00:31:26.940
On Leopard it looks a little more like this.

00:31:26.940 --> 00:31:30.580
So you'll just have the standard
document icon for your application

00:31:30.579 --> 00:31:35.250
and plus at least you'll get back
some mediate the user can see.

00:31:35.250 --> 00:31:38.160
So we weren't able to provide for.

00:31:38.160 --> 00:31:44.100
So one thing that we've done to address this is to add
QuickLook support to the Cocoa open and save dialog

00:31:44.099 --> 00:31:47.289
which again are inherited by the Navigation Services.

00:31:47.289 --> 00:31:52.200
So if you write a QuickLook plug-in,
you can ship that along side Leopard.

00:31:52.200 --> 00:31:58.519
And even existing customers customers of your
existing application can take advantage of QuickLook

00:31:58.519 --> 00:32:01.940
in your previews here as well as the rest of Leopard.

00:32:04.910 --> 00:32:12.630
Alright. I've said that we've done everything we can to make
sure that this isn't something that you don't have to adopt,

00:32:12.630 --> 00:32:16.160
but there are things that you can adopt, if you want.

00:32:16.160 --> 00:32:21.790
The Nav Dialog Ref in Leopard is actually
a subclass of NS Opener Save Panel,

00:32:21.789 --> 00:32:24.379
depending on what type of dialog that you have.

00:32:24.380 --> 00:32:32.640
So one thing this means is that you can cast that
Nav Dialog Ref to the NS open or save panel pointer

00:32:32.640 --> 00:32:38.580
and once you do that, you can have access to
new API that already exists on the AppKit side.

00:32:38.579 --> 00:32:43.220
So if there's any APIs over there you've
been lusting after, here's your chance.

00:32:43.220 --> 00:32:46.750
So the first thing is that accessors are a-ok.

00:32:46.750 --> 00:32:51.130
Any of the setters and getters are things
that we want you to be able to use.

00:32:51.130 --> 00:32:55.720
One exception on the beta is the API SetAccessoryView.

00:32:55.720 --> 00:32:58.269
Right now this will cause an exception
if you try and do that.

00:32:58.269 --> 00:33:02.559
This has already been addressed in internal
builds and of course we'll shift with the fix.

00:33:02.559 --> 00:33:04.079
But I wanted to make this...

00:33:04.079 --> 00:33:08.279
talk about this one specifically because as
we move forward to resolution independence,

00:33:08.279 --> 00:33:13.069
adding a Cocoa accessory view will
be your only option to achieve that.

00:33:13.069 --> 00:33:18.230
The 2 things that we don't want you to use
are the NS Open and SavePanel runtime APIs.

00:33:18.230 --> 00:33:27.279
If you created your dialog using the navigation
services APIs, you'd execute it using NavDialogRun.

00:33:27.279 --> 00:33:30.769
With Navigation Services in the new
implementation we've added a lot of hooks

00:33:30.769 --> 00:33:33.339
that only get installed when you use NavDialogRun.

00:33:33.339 --> 00:33:40.309
If you try and do an end run around them using the NS Open
Save Panel run time category those won't get installed

00:33:40.309 --> 00:33:41.819
and things will break.

00:33:41.819 --> 00:33:44.730
And similarly don't reset the delegate.

00:33:44.730 --> 00:33:49.900
Navigation Services itself is using the delegate to
provide functionality for your application and make sure

00:33:49.900 --> 00:33:53.019
that everything continues to behave as you expect.

00:33:53.019 --> 00:33:56.869
So if you reset that, again bad things will happen.

00:33:56.869 --> 00:34:00.299
So let's look and see what this will look like in code.

00:34:00.299 --> 00:34:07.190
You create a get file dialog with nav create get file
dialog in standard wave and then we can do a simple cast

00:34:07.190 --> 00:34:11.940
to an NSOpenPanel because this is a get
file dialog corresponds with the open panel.

00:34:11.940 --> 00:34:20.090
We can use the API set prompt, which sets the text
in the default button and what's cool is that instead

00:34:20.090 --> 00:34:25.809
of just being able to set this when you create your
dialog, you can set it at any time during run time.

00:34:25.809 --> 00:34:30.650
I know that in the past some developers have
gone and looked for that Carbon control,

00:34:30.650 --> 00:34:32.809
that default button and set the text manually.

00:34:32.809 --> 00:34:35.219
Well that button doesn't exist anymore on the Carbon side.

00:34:35.219 --> 00:34:40.069
So this is your accepted API to get at that.

00:34:40.070 --> 00:34:45.170
So we created the dialog using navigation
services, we need to use NavDialogRun.

00:34:45.170 --> 00:34:51.180
So the user does the doing, they select some
item, they come back and again we can cast

00:34:51.179 --> 00:34:55.259
that to an NSOpenPanel pointer
and use the files names API.

00:34:55.260 --> 00:35:02.040
What this does is return an NS array of NS
URLs to the selected items on your disk.

00:35:02.039 --> 00:35:06.599
So if any of you've had any trouble
using Apple Event descriptor list to pull

00:35:06.599 --> 00:35:09.509
out all the individual Apple descriptors
and get all the data out,

00:35:09.510 --> 00:35:13.090
this can be a very simple way to do the same thing.

00:35:13.090 --> 00:35:18.809
And because the dialog is an NS object
you can call release if you want.

00:35:18.809 --> 00:35:26.619
So hopefully this will give you ways to add piece
meal, add bit by bit more and more Cocoa functionality

00:35:26.619 --> 00:35:29.799
to your application without having
to do a wholesale rewrite.

00:35:29.800 --> 00:35:35.680
And if you do eventually move entirely
over to Cocoa this is all this new API

00:35:35.679 --> 00:35:39.909
that you're using will not be thrown
away, so you can keep that work.

00:35:39.909 --> 00:35:47.859
Alright. Next I'd like to bring up Eric Schlegel
to continue talking about this transition.

00:35:47.860 --> 00:35:50.860
( applause )

00:35:50.860 --> 00:35:52.700
>>Eric: Ok thanks BrYan.

00:35:52.699 --> 00:35:58.689
So we've been telling you a little bit about the ways
in which we're trying to make it easier to use Cocoa

00:35:58.690 --> 00:36:05.269
in your application in your Carbon application, but we
do also have some other features added to the toolbox

00:36:05.269 --> 00:36:09.150
in Leopard that are actually just
specifically new features in the toolbox.

00:36:09.150 --> 00:36:11.869
So I'm going to talk about a few of those today.

00:36:11.869 --> 00:36:14.400
The first one is Spotlight for menus.

00:36:14.400 --> 00:36:16.680
Which actually isn't just a toolbox feature,

00:36:16.679 --> 00:36:20.789
but I'm going to talk about how it interacts
with your with you Carbon application.

00:36:20.789 --> 00:36:28.119
Spotlight for menus is the term for the feature in
Leopard that adds a search field to the Help menu

00:36:28.119 --> 00:36:35.230
in every application and that search field is there to
try to make the help system more accessible to users

00:36:35.230 --> 00:36:41.219
and to make it more something that is very visible
to them so that they can find it and use it.

00:36:41.219 --> 00:36:48.669
And it lets you search all the text of the menu items in
your application to find items with a specific sub string

00:36:48.670 --> 00:36:54.289
and item name and also to search through the
help files that are bundled with the application.

00:36:54.289 --> 00:37:01.170
So because this is interacting directly with your
application's menus, you might think that you might have

00:37:01.170 --> 00:37:05.639
to do something specific to support it,
but that's not really our design goal.

00:37:05.639 --> 00:37:10.190
Our design goal is to make this complete
invisible to applications as much as we can.

00:37:10.190 --> 00:37:14.500
And there's nothing that you specifically
need to do to support Spotlight

00:37:14.500 --> 00:37:18.809
for menus searching through your applications menu items.

00:37:18.809 --> 00:37:25.480
But we've seen some compatibility bugs, and so
I want to emphasize that if you do see problems

00:37:25.480 --> 00:37:31.210
with using the search facility in your application
or with using Help menu in its modified state

00:37:31.210 --> 00:37:34.349
in your application, tell us about those bugs.

00:37:34.349 --> 00:37:36.900
File them in Radar please let us know about them.

00:37:36.900 --> 00:37:43.230
We can only fix them if you tell us about them so please
do report those compatibility bugs, if you find them.

00:37:43.230 --> 00:37:47.550
Another point I'd like to make here
is the appearance of the Help menu.

00:37:47.550 --> 00:37:53.670
Previously it would be something that you could control;
now the Help menu appearance is slightly different

00:37:53.670 --> 00:37:56.159
from that of the other menus in your applications.

00:37:56.159 --> 00:38:00.309
The menu item text is a little bit
smaller, it's offset slightly.

00:38:00.309 --> 00:38:05.369
And this is all done to make the default
Help menu appearance as synchronized

00:38:05.369 --> 00:38:07.960
with the appearance when you're showing search results.

00:38:07.960 --> 00:38:10.440
And that's under the system's control at this point.

00:38:10.440 --> 00:38:13.869
It's not something you can modify yourself anymore.

00:38:15.420 --> 00:38:20.349
So even though we are trying to make this as
compatible as possible with applications by default,

00:38:20.349 --> 00:38:26.210
I do have some tips about how you can potentially
make your application work a little bit better

00:38:26.210 --> 00:38:28.590
with Spotlight for menus.

00:38:28.590 --> 00:38:31.690
The first one has to do with the hot key.

00:38:31.690 --> 00:38:37.450
You may or may not have noticed that in
Leopard pressing command shift question mark

00:38:37.449 --> 00:38:42.289
which previously might have been mapped to a
menu item or something else in your application,

00:38:42.289 --> 00:38:46.550
will now open the Help menu and if the
Help menu is already open it will close it.

00:38:46.550 --> 00:38:50.810
So that's a new hot key that's been
defined by the operating system.

00:38:50.809 --> 00:38:56.009
You can change the keystrokes that are associated
with it in the keyboard preferences page.

00:38:56.010 --> 00:38:58.190
You can disable it if you want, if that...

00:38:58.190 --> 00:39:04.800
if you disable it then the keystrokes are entirely ignored
by the OS and they just go right back to your application.

00:39:04.800 --> 00:39:11.789
And if you really need to, you can intercept
those keystrokes yourself by installing one

00:39:11.789 --> 00:39:19.989
of the standard Carbon event handlers or text input
such as K event text input unit code for key event.

00:39:19.989 --> 00:39:26.969
So if you do particularly need to use the keystrokes that
are being mapped to the help hot key for your own purposes,

00:39:26.969 --> 00:39:31.259
you can install that Carbon event handler
anywhere on the standard user focus chain.

00:39:31.260 --> 00:39:36.090
On a view, on a window, or the application
target and you'll get those keystrokes

00:39:36.090 --> 00:39:37.860
and you can do whatever you want with them.

00:39:37.860 --> 00:39:39.730
But we really recommend that you don't do that,

00:39:39.730 --> 00:39:46.420
we recommend that you just let the standard
behavior be allowed for the application.

00:39:46.420 --> 00:39:51.869
The second tip here is how...regarding
how you create your Help menu.

00:39:51.869 --> 00:39:55.699
Applications usually have one or two
ways of creating their Help menu.

00:39:55.699 --> 00:40:00.460
They can just create a menu from scratch, and
give it the title help and stick in the menu bar.

00:40:00.460 --> 00:40:04.070
Or they can use the HM get Help menu API.

00:40:04.070 --> 00:40:08.110
And Spotlight for menus will work in either case.

00:40:08.110 --> 00:40:14.260
If you create your Help menu from scratch, we try to seek
it out basically by looking for a menu in the menu bar

00:40:14.260 --> 00:40:21.950
that has the title help and we try to avoid interfering
with your use of the menu as much as possible.

00:40:21.949 --> 00:40:28.730
But that's another case where if your seeing compatibility
problems, file those bugs so we can look at what's going on.

00:40:28.730 --> 00:40:36.809
But we also recommend use the HM get Help menu API which is
part of the help manager in HIToolbox and Mac help dot h

00:40:36.809 --> 00:40:42.710
and if you use that API then we know exactly what
you're doing and there's no confusion at all.

00:40:42.710 --> 00:40:47.340
We know that you're creating a Help menu
and we can treat that appropriately.

00:40:47.340 --> 00:40:52.850
Third tip here has to do with how
you add content to your menus.

00:40:52.849 --> 00:40:59.809
It's pretty common that applications will want to
dynamically populate the menu items in their menus.

00:40:59.809 --> 00:41:08.219
One example might be you could have a recent files menu
that shows you all the recent files that a user has opened.

00:41:08.219 --> 00:41:12.899
And you might not want to actually populate the contents
of that menu until the user pulls it

00:41:12.900 --> 00:41:18.150
down because it might be a little slow to go out and
grab that list of files and stick it into the menu.

00:41:18.150 --> 00:41:24.039
So we've have since 10.1 the K Event Menu Populate
Carbon event.

00:41:24.039 --> 00:41:31.000
Which is sent to your event handlers right before the menu
is opened to let you dynamically add the menu content.

00:41:31.000 --> 00:41:38.110
And it's especially useful to use this Carbon event
today in Leopard, because this Carbon event is also sent

00:41:38.110 --> 00:41:44.490
by Spotlight for menus before it opens the Help menu.

00:41:44.489 --> 00:41:50.419
The Spotlight system needs to index all the menu item
content of all of your menus so it can quickly search

00:41:50.420 --> 00:41:53.099
through it when the user types in a search string.

00:41:53.099 --> 00:41:57.650
And in order to index an up to date
version of the menu item content,

00:41:57.650 --> 00:42:01.660
it sends K event menu populate before
it does the indexing process.

00:42:01.659 --> 00:42:07.589
So definitely use this Carbon event if your dynamic
menu item population and that will make sure

00:42:07.590 --> 00:42:13.490
that whatever you're dynamically adding to the menu
will be properly indexed and searchable by the user.

00:42:13.489 --> 00:42:19.259
And finally, this has to do again
with how you populate menu content.

00:42:19.260 --> 00:42:22.540
Let's go back to that recent files menu again.

00:42:22.539 --> 00:42:29.380
Maybe the items in your recent files menu not
only have text giving the names of the files,

00:42:29.380 --> 00:42:32.170
but they also have the icons of the files.

00:42:32.170 --> 00:42:36.450
Getting those icons might get a little slow
especially if the file's located on a file server

00:42:36.449 --> 00:42:41.899
across an Airport network, and if you go across
the network and pool the icon back and all that.

00:42:41.900 --> 00:42:46.740
And if Spotlight for menus is the
reason why you're adding the content

00:42:46.739 --> 00:42:50.139
to the menu, Spotlight doesn't care about the icons.

00:42:50.139 --> 00:42:52.000
It only searches text.

00:42:52.000 --> 00:42:57.230
So there's really no reason to add the icon or to
pay the performance penalty of going and fetching it,

00:42:57.230 --> 00:43:02.880
if the only reason that you're populating
the menu is to allow Spotlight to search it.

00:43:02.880 --> 00:43:07.900
So to that end, we've added a few
new bit masks which are part

00:43:07.900 --> 00:43:14.910
of the menu context parameter it's a Carbon event
parameter in K event menu populate and other Carbon events.

00:43:14.909 --> 00:43:20.730
And you can see some of them here, K menu
context don't update text, don't update key,

00:43:20.730 --> 00:43:23.619
don't update icon and don't update enabled.

00:43:23.619 --> 00:43:30.639
And those simply indicate what parts of the menu
item state you do not need to update at this time.

00:43:30.639 --> 00:43:37.150
So if Spotlight is sending out this event, it's
going to set the don't update icon flag for example.

00:43:37.150 --> 00:43:42.530
And that tells you I can save some time here, I don't
need to go fetch the icons and stick them into the menu.

00:43:42.530 --> 00:43:47.400
All I need is the text, and also the text
will be faster to update than the icon.

00:43:47.400 --> 00:43:49.950
That's it for the Spotlight for menus section.

00:43:49.949 --> 00:43:55.399
We're going to talk about a few text drawing
enhancements next in HIToolbox for Leopard.

00:43:55.400 --> 00:43:59.740
And the first one is CF Attributed String.

00:43:59.739 --> 00:44:06.799
Now we've had for a long time the ability to draw CF
strings using the toolbox, using the text drawing the keens

00:44:06.800 --> 00:44:13.240
and the Appearance Manager would be draw
theme text box and the HI theme draw text box.

00:44:13.239 --> 00:44:19.929
In Leopard, HIThemeDrawTextBox also
supports drawing a CF attributed string.

00:44:19.929 --> 00:44:25.849
You may not be familiar with a CF attributed string
as a new type that was added in Tiger.

00:44:25.849 --> 00:44:28.299
It's like a string which you can add attribute to it

00:44:28.300 --> 00:44:32.820
and those attributes can be things
like font or font size or color.

00:44:32.820 --> 00:44:41.350
So that lets you draw a string that has multiple different
fonts in it or maybe varies in size or color in other ways.

00:44:41.349 --> 00:44:49.059
That's one one of the ways that we're trying to avoid
some of the deprecated QuickDraw facility

00:44:49.059 --> 00:44:54.840
in previously versions of the OS because previously
in order to customize the appearance of a font

00:44:54.840 --> 00:45:00.800
or of a text string you'd have to set the
port font for the current QuickDraw port

00:45:00.800 --> 00:45:05.400
and then use K theme current port font when
you are calling into the Appearance Manager.

00:45:05.400 --> 00:45:08.980
Since that's all deprecated at this point,

00:45:08.980 --> 00:45:13.530
using CS attributed strings you don't even
have to do anything with QuickDraw there.

00:45:13.530 --> 00:45:17.530
The other way in which we're avoiding
the old QuickDraw path is explicit

00:45:17.530 --> 00:45:22.250
for explicit support for the Core Text font identifiers.

00:45:22.250 --> 00:45:29.079
And Core Text is another new technology in Leopard that's
kind of the lowest level text drawing system, it's now used

00:45:29.079 --> 00:45:36.170
by both HI theme draw text box and a
considerable part of the Cocoa text system.

00:45:36.170 --> 00:45:42.139
And it has a data type called CT font ref which
identifies a font and various of its attributes.

00:45:42.139 --> 00:45:48.929
And you can now pass in the CT font ref to HI theme
draw text box or to the text measuring routines

00:45:48.929 --> 00:45:55.769
by setting the K the theme font to K theme
specified font and setting the font field

00:45:55.769 --> 00:46:03.170
of the HI theme text info structure to your CT font
ref and you also have to update the version field

00:46:03.170 --> 00:46:10.400
of the HI theme text info to the value one instead of
zero to indicate that your now using the font field.

00:46:10.400 --> 00:46:20.210
Finally HI theme get UI font type is a new API if
you are using both Appearance Manager theme fonts

00:46:20.210 --> 00:46:24.309
like K theme system font for example,
but you also want to do...

00:46:24.309 --> 00:46:29.699
you also want to take advantage of the Core
Text API and do some drawing just with Core Text

00:46:29.699 --> 00:46:31.710
and you want to be able to map between those two.

00:46:31.710 --> 00:46:37.750
HI theme get UI font type takes an appearance
manager font identifier and gives you back

00:46:37.750 --> 00:46:43.510
to correspondingCore Text font
identifier so you can figure out what kind

00:46:43.510 --> 00:46:47.720
of font you going to be drawing with Core Text.

00:46:47.719 --> 00:46:49.139
And finally NS images.

00:46:49.139 --> 00:46:56.509
This is another case where we're attempting to
use Cocoa facilities in your Carbon application.

00:46:56.510 --> 00:47:03.030
NS images is a pretty powerful class in AppKit that
encapsulates multiple different resolutions of an image

00:47:03.030 --> 00:47:06.140
and lets you do various transformations on an image.

00:47:06.139 --> 00:47:10.779
So we have some ways for you to do that more
easily inside your Carbon application now.

00:47:10.780 --> 00:47:15.210
HIView draw NS image is a lot like HIView draw CG image.

00:47:15.210 --> 00:47:22.650
You just pass it in NS image and a CG context usually
you'd use this inside your K event draw handler.

00:47:22.650 --> 00:47:28.769
And it takes care of orientating the context
properly in drawing the image into the context.

00:47:28.769 --> 00:47:39.699
You can also associate an NS image directly with any of
the standard views that take image content so HI image view

00:47:39.699 --> 00:47:46.169
for example or a bevel button or a push
button or quite a few others I think.

00:47:46.170 --> 00:47:52.530
You can now pass in an HIView content info
structure when you're setting image content

00:47:52.530 --> 00:47:55.769
for those views that contains an NS image.

00:47:55.769 --> 00:48:01.519
And the view will take care of calling HIView
draw NS image for you, do everything automatically.

00:48:01.519 --> 00:48:08.639
So this is kind of the path that we're advocating that you
take if you have your own image content in your application

00:48:08.639 --> 00:48:12.879
and you want to move towards a more
resolution independent user interface.

00:48:12.880 --> 00:48:19.380
You can create NS images that contain multi
multiple representations at different resolutions

00:48:19.380 --> 00:48:23.390
of your same image content and the
proper one will be drawn according

00:48:23.389 --> 00:48:26.799
to the current scaling factor of the user interface.

00:48:26.800 --> 00:48:29.060
So that's about it for today.

00:48:29.059 --> 00:48:33.539
Some of the overview of what we're talking about today.

00:48:33.539 --> 00:48:40.269
You can start to adopt the Leopard user interface
changes; it's quite easy and in most cases automatic

00:48:40.269 --> 00:48:43.360
if you're using the standard controls the standard windows.

00:48:43.360 --> 00:48:48.800
But if it's not completely automatic for your application
and there are a few simple changes you can make

00:48:48.800 --> 00:48:54.070
to adopt that, but in general the direction
that we're strongly advising that you go.

00:48:54.070 --> 00:48:56.280
You know we've been saying this last year as well

00:48:56.280 --> 00:49:00.560
and we're certainly it this year is
to look towards Cocoa as the future.

00:49:00.559 --> 00:49:06.539
Burtron (assumed spelling) told us all on Monday
Carbon is not going to be significantly enhanced

00:49:06.539 --> 00:49:11.079
in the future it's effectively moving
to a deprecated state at this point.

00:49:11.079 --> 00:49:17.289
And Apple's energies, all it's API are
being developed and looking towards Cocoa.

00:49:17.289 --> 00:49:22.389
And so that's definitely the direction
that you should be looking as well.

00:49:22.389 --> 00:49:26.269
For some more info we have Deric Horn
down here who'll be coming up in a moment.

00:49:26.269 --> 00:49:30.190
He is the application frameworks
evangelist for both Carbon and Cocoa

00:49:30.190 --> 00:49:35.250
and the web site has some sample
code and other documentation.

00:49:35.250 --> 00:49:38.739
And just after the session as soon as
we get out of here we'll all be heading

00:49:38.739 --> 00:49:42.000
to the labs downstairs for the HIToolbox lab.

00:49:42.000 --> 00:49:47.280
So if you miss us now, you can bring your
questions there and my voice will get even worse.