WEBVTT

00:00:00.500 --> 00:00:12.500
( silence )

00:00:12.500 --> 00:00:18.780
>>Welcome to session 221, Dealing
with the Image Kit Framework.

00:00:18.780 --> 00:00:24.240
Actually the Image Kit framework is a
new framework that we have in leopard.

00:00:24.239 --> 00:00:29.409
And as the title basically says,
it's an image- handling framework.

00:00:29.410 --> 00:00:32.539
So we deal with images in this framework.

00:00:32.539 --> 00:00:39.879
And the reason why we are doing this is basically,
well, we get more and more images, digital cameras

00:00:39.880 --> 00:00:47.240
and so and the iPhone will be one of the sources
how you can create images and you really want to deal

00:00:47.240 --> 00:00:50.770
on your computer, you want to deal with images.

00:00:50.770 --> 00:00:56.890
So we have also more and more image handling applications.

00:00:56.890 --> 00:01:00.390
So for example, the Finder is the
first one you will see when you boot

00:01:00.390 --> 00:01:04.560
up your system displaying a whole
bunch of images in a single window.

00:01:04.560 --> 00:01:11.430
And now with the Quick Look technology really displaying
icons for all these very nicely arranged and all that.

00:01:11.430 --> 00:01:17.440
Then, of course, Preview, now the application
that ships with the OS dealing with images.

00:01:17.439 --> 00:01:21.569
And you all know that you can open
multiple images, like in a single window,

00:01:21.569 --> 00:01:25.309
browse through those images, display
one, and do things with that.

00:01:25.310 --> 00:01:30.320
And of course, Image Capture and
all the other bundles that we have.

00:01:30.319 --> 00:01:34.579
So what do all these applications have in common?

00:01:34.579 --> 00:01:35.849
What are they doing with images?

00:01:35.849 --> 00:01:42.989
Well, first of all, they deal with images
finding and displaying, browsing the images.

00:01:42.989 --> 00:01:48.819
And the other thing is really once you found
the image that you want to, going to work with,

00:01:48.819 --> 00:01:55.359
and you want to display, then you
want to bring it up in a single view.

00:01:55.359 --> 00:02:00.829
And you do that for images that are supported,
for example, by the Image I/O framework.

00:02:00.829 --> 00:02:09.229
So a lower level framework dealing with all kinds of
image formats such as JPEG, TIFF, PNG, and so on.

00:02:09.229 --> 00:02:12.560
And of course, Image I/O it's getting
more and more important

00:02:12.560 --> 00:02:22.500
since like higher end digital cameras produce the images
in raw format, so we want to deal with those as well.

00:02:22.500 --> 00:02:27.090
And then we have, like as I said before, a whole bunch

00:02:27.090 --> 00:02:34.610
of image handling applications that
display these images in the view.

00:02:34.610 --> 00:02:45.960
So if its finding and browsing in one hand, the other hand
the viewing and editing the images, then what could we do

00:02:45.960 --> 00:02:55.030
in the framework, in an image handling framework for
Leopard to combine needs and have solutions for you to use

00:02:55.030 --> 00:03:02.960
in your applications, so that it will be a compelling
reason to switch over to this new framework.

00:03:02.960 --> 00:03:12.510
Well, if we look at the components that we
came up with, first of all in image browser.

00:03:12.509 --> 00:03:22.209
So the goal is to have the view that you can
very easily use that allows you to browse images.

00:03:22.210 --> 00:03:34.110
Second is something that you will see in
applications like iChat, Account Panel,

00:03:34.110 --> 00:03:37.350
and all that, that's the picture taking part.

00:03:37.349 --> 00:03:42.180
Then displaying images, the ImageView.

00:03:42.180 --> 00:03:53.230
Then the Image Edit panel basically is set of common
panels that allow you to do some image adjustments.

00:03:54.490 --> 00:04:03.320
Then the built-in Slideshow, easy way for
you to present images on a full screen.

00:04:03.319 --> 00:04:08.769
And a couple of other things that we
will talk during this session.

00:04:08.770 --> 00:04:15.670
Now if we put all these components together, stir well,
and then we should actually have something

00:04:15.669 --> 00:04:20.009
that you will, you can use as the Image Kit.

00:04:20.009 --> 00:04:30.849
So the goal for this session was not to talk so much on
slides, but really go into code and show you some examples

00:04:30.850 --> 00:04:41.220
and source codes that you could use in your
application to make usage out of Image Kit.

00:04:41.220 --> 00:04:47.020
So the question was, like what could we do in a
single session like a little bit more than an hour

00:04:47.019 --> 00:04:55.819
to produce the kind of useful application for you,
and to show all the different parts of Image Kit?

00:04:55.819 --> 00:05:00.879
So we came up with an eyePhoto coding challenge.

00:05:00.879 --> 00:05:09.009
So the idea is we want to do certain things
that the other iPhoto application could do.

00:05:09.009 --> 00:05:13.689
And first thing, of course, as we said before, browsing.

00:05:13.689 --> 00:05:18.899
iPhoto has this, this, the real
iPhoto has this very nice way

00:05:18.899 --> 00:05:24.359
to browse a very large library
of files once you imported those.

00:05:24.360 --> 00:05:32.819
Well, we are not going into the database part, but we will
produce an application that allows you to browse images.

00:05:32.819 --> 00:05:39.860
And then we also want to import images from an "i"
site, we're not talking a high-end digital camera,

00:05:39.860 --> 00:05:46.689
but we want to use either a built in,
or in our case the add on "i" site.

00:05:46.689 --> 00:05:52.319
Then, of course, we want to view the image full size.

00:05:52.319 --> 00:05:56.500
We want to do some basic image manipulation.

00:05:57.649 --> 00:06:03.529
We want to save the image out, ideally, in a
way so that you open the image, maybe a JPEG,

00:06:03.529 --> 00:06:10.049
and you will be able to save it as
TIFF, PNG, or whatever other format.

00:06:10.050 --> 00:06:13.810
And of course, last thing, we want to present it.

00:06:13.810 --> 00:06:17.540
So run a slideshow with the images that you imported.

00:06:17.540 --> 00:06:23.640
Now all this really ends up in eyePhoto in six easy steps.

00:06:23.639 --> 00:06:31.649
And let's have a look at the first one, I actually want
to bring up Thomas, the master of image browser.

00:06:31.649 --> 00:06:32.509
>>Thomas: Thank you!

00:06:32.509 --> 00:06:37.800
( Applause )

00:06:37.800 --> 00:06:44.770
>>Thomas: Okay, so I'm Thomas Goossens, and I
work on Image Kit, and especially on the image browser.

00:06:44.769 --> 00:06:50.599
So today I'm going to show how to use our
image browser into a Cocoa application.

00:06:50.600 --> 00:06:55.060
And so let's start by introducing this image browser.

00:06:55.060 --> 00:07:04.629
So the IKImageBrowserView is a view that you can
use to display and to browse large amounts of images.

00:07:04.629 --> 00:07:12.529
So it lays out images in a grid like this, and user can
scroll or zoom in, zoom out to browse the images.

00:07:12.529 --> 00:07:17.419
This view also come with a set of
features as you will have for free.

00:07:17.420 --> 00:07:23.879
Like for instance a graphical selection, drag and drop with
reordering, accessibility, auto scrolling, type select,

00:07:23.879 --> 00:07:35.870
etc. But the major improvements this next year is now the
capability to browse and preview any kind of document.

00:07:35.870 --> 00:07:42.290
So you can, of course, use the image
browser to browse large amounts of images.

00:07:42.290 --> 00:07:50.280
So here any kind of image formats supported by
Image I/O such as a JPEG, TIFF, PNG, or whatever.

00:07:50.279 --> 00:07:56.339
But you can also use the IKImageBrowserView to browse your movies.

00:07:56.339 --> 00:08:01.149
And for movies the image browser supports inline preview.

00:08:01.149 --> 00:08:08.469
So you can play your movies right inside the image
browser without having to switch to another application.

00:08:08.470 --> 00:08:12.810
So this is very practical to browse movies,
and I will show you that in a little bit.

00:08:12.810 --> 00:08:19.410
You can also browse your PDF, so you can
scroll over a large amount of PDFs and names.

00:08:19.410 --> 00:08:25.560
But in fact they are not only some names, because
if you decide to enlarge one of them by zooming

00:08:25.560 --> 00:08:30.949
in, then the image browser will redraw it to the actual size,

00:08:30.949 --> 00:08:36.139
and so this guaranteed to have
the best quality to preview PDFs.

00:08:36.139 --> 00:08:41.069
And so we have a quality similar to what
you will have in Preview for instance.

00:08:41.070 --> 00:08:44.580
And so you can even read the PDF directly in the browser.

00:08:44.580 --> 00:08:52.100
And to finish you can now browse any
kind of documents, thanks to Quick Look.

00:08:52.100 --> 00:08:57.210
So you can browse any kind of documents
natively supported by Quick Look,

00:08:57.210 --> 00:09:04.160
such as HTML files, Contacts, Notes, Emails, Keynotes.

00:09:04.159 --> 00:09:11.129
But also if you write your own Quick Look plug-in for your
own documents then you can use the IKImageBrowserView

00:09:11.129 --> 00:09:14.970
to browse your own documents in your own application.

00:09:14.970 --> 00:09:21.480
So with image browser we really want
to provide a very generic image browser

00:09:21.480 --> 00:09:24.139
so that you don't get to write your own anymore.

00:09:24.139 --> 00:09:31.460
By using this image browser you won't have to face usual
issues when trying to support large amounts of data

00:09:31.460 --> 00:09:35.310
and trying to keep good performance and good quality.

00:09:35.309 --> 00:09:40.559
So the image browser is made to support
large amounts of data so you won't have

00:09:40.559 --> 00:09:44.849
to worry about potential scalability issues.

00:09:44.850 --> 00:09:50.440
It is entirely run using the GPU, so it gives a very smooth

00:09:50.440 --> 00:09:55.860
and great user experience, especially
on zooming and scrolling.

00:09:55.860 --> 00:10:03.730
And to finish you won't have to deal and worry about
potential memory issues, because Image Kit takes care

00:10:03.730 --> 00:10:11.490
of scheduling the memory for you by keeping less
recently used images on the GPU to maximize performance.

00:10:11.490 --> 00:10:16.389
and keep older images
compressed in RAM to minimize memory usage.

00:10:16.389 --> 00:10:23.279
And it automatically removes images from
the memory when they are not needed anymore.

00:10:23.279 --> 00:10:28.149
So today I am going to show how to use
this image browser by creating step

00:10:28.149 --> 00:10:33.009
by step the first part of our eyePhoto application.

00:10:33.009 --> 00:10:41.279
So the first step will be to use Interface Builder to set
up the interface and to add image browser to our window.

00:10:41.279 --> 00:10:45.549
So I will create a window with Interface
Builder, then I will use Interface Builder

00:10:45.549 --> 00:10:48.849
to add the image browser to this window.

00:10:48.850 --> 00:10:57.870
And then we will need to embed this view, the image browser,
into a scroll view to be able to scroll over the thumbnails.

00:10:57.870 --> 00:11:01.539
Then the second step will be to implement a datasource,

00:11:01.539 --> 00:11:06.559
which will define which images should
be displayed in the image browser.

00:11:06.559 --> 00:11:11.159
So datasource inside object implementing
on the client's side,

00:11:11.159 --> 00:11:14.370
and it's goal is to provide the images
to the image browser.

00:11:14.370 --> 00:11:18.710
So the image browser will ask the datasource
for the images to layout and to display.

00:11:18.710 --> 00:11:24.620
And when the developer wants to change the images in
the image browser you just need to invoke real data

00:11:24.620 --> 00:11:30.629
on the image browser, and the image browser will
automatically replace the changes of the datasource.

00:11:30.629 --> 00:11:34.059
So if you are already familiar with in
NSTableView and NSOutlineView,

00:11:34.059 --> 00:11:37.569
here it's exactly the same datasource mechanism.

00:11:38.610 --> 00:11:44.950
And implementing the datasource of the image browser is
very simple, as you just need to implement two methods.

00:11:44.950 --> 00:11:53.030
So first, like for NSTableView the image browser
needs to know who many images it asks to display,

00:11:53.029 --> 00:11:58.769
and this is done by returning the number of
images in number of items in image browser.

00:11:58.769 --> 00:12:08.610
Then for each index the image browser will ask for an
object, that will present the given image as a given index.

00:12:08.610 --> 00:12:13.450
So here we will need to return an
object in image browser itemAtIndex.

00:12:13.450 --> 00:12:16.640
And the object will return (unclear)
response to the three methods.

00:12:16.639 --> 00:12:26.809
So the first one, imageUID is a unique identifier
that must be different for each different images.

00:12:26.809 --> 00:12:29.059
So it can be whatever you want.

00:12:29.059 --> 00:12:36.409
It can be an absolute full path or UUID,
but it must be different for two different images.

00:12:36.409 --> 00:12:44.299
Then imageRepresentationType and imageRepresentation
makes the integration of the image browser easier,

00:12:44.299 --> 00:12:52.429
because it lets you to choose your favorite image
representation in the large set of possible representations.

00:12:52.429 --> 00:12:59.909
For instance, if you have a path or URL, then
you can just give that to the image browser

00:12:59.909 --> 00:13:03.949
by specifying PathRepresentationType
and ImageRepresentationType,

00:13:03.950 --> 00:13:07.020
and returning the path in imagRepresentation.

00:13:07.019 --> 00:13:13.689
And the image browser will do the job to load that
file, create a thumbnail, and display it on the screen.

00:13:13.690 --> 00:13:16.780
So here you don't have to do anything.

00:13:16.779 --> 00:13:23.620
And, however, if you don't have any paths,
because your images doesn't exist on disk,

00:13:23.620 --> 00:13:29.539
and you only have it in memory, for instance,
then you can choose to return either a CG

00:13:29.539 --> 00:13:34.779
or NSImage; a CGImageSourceRef or bitmap.

00:13:34.779 --> 00:13:39.439
So here just choose a image representation
that you are more comfortable with.

00:13:39.440 --> 00:13:48.430
And to finish you can also specify some kind of specific
image representations like QTMovie and QCComposition

00:13:48.429 --> 00:13:53.419
if you want to have inline preview
of your movies and compositions.

00:13:53.419 --> 00:13:57.079
You can specify QuickLookPath
if you want the image browser

00:13:57.080 --> 00:14:01.990
to use Quick Look to create thumbnails of your documents.

00:14:01.990 --> 00:14:08.870
And you can also use iconRefRepresentationType if you want
the image browser to use icon services to create preview

00:14:08.870 --> 00:14:17.009
of your documents, and so to display generic
icons of your documents instead of for a preview.

00:14:17.009 --> 00:14:21.029
So now let's see how this looks like
in Interface Builder and Xcode.

00:14:21.029 --> 00:14:23.559
Can you switch to the demo machine, please?

00:14:23.559 --> 00:14:33.919
So let me start with Interface Builder,
so and I create a new Cocoa application.

00:14:33.919 --> 00:14:35.769
Let's create a window.

00:14:35.769 --> 00:14:40.449
Now I search for the IKImageBrowserView in the library.

00:14:40.450 --> 00:14:47.310
And here it is, so you can see its
the IKImageBrowserView class.

00:14:47.309 --> 00:14:50.169
I can drag and drop it to my window.

00:14:50.169 --> 00:14:57.199
Resize it so that it fit my window like that.

00:14:57.200 --> 00:15:00.800
Okay, and then just run the simulator.

00:15:00.799 --> 00:15:07.189
So as you can see by just doing that I can have a functional
image browser with the graphical section working.

00:15:07.190 --> 00:15:10.450
We can change the section with the keyboard.

00:15:10.450 --> 00:15:13.300
I can also remove an image.

00:15:13.299 --> 00:15:17.949
I can, reorder also works for free.

00:15:17.950 --> 00:15:23.660
And for the moment that's all what we can do
with Interface Builder, so let's do a bit more.

00:15:23.659 --> 00:15:31.589
I can use the properties in Interface Builder to change
some flavor, for instance, if I don't want shadow,

00:15:31.590 --> 00:15:34.120
or if I want an outline around the images.

00:15:34.120 --> 00:15:38.220
If I want a title in those images select title.

00:15:38.220 --> 00:15:43.980
I may also want to animate the changes
of the datasource when needed.

00:15:43.980 --> 00:15:49.250
And I can also change the default zoom value
if I want to have the images bigger like that.

00:15:49.250 --> 00:15:58.450
And now I also want to be able to scroll over my
images so I need to embed this view into a scroll view.

00:15:58.450 --> 00:16:01.820
Okay, I don't want horizontal scroller because
it's not needed.

00:16:01.820 --> 00:16:07.010
And I change the autoresizing
mask so that it fits the window.

00:16:07.009 --> 00:16:09.990
I run the simulator again.

00:16:09.990 --> 00:16:17.750
So now I have an image browser, I can resize
the window, I can scroll over my images.

00:16:17.750 --> 00:16:24.830
Now I also have titles so I can use type select to
search for an image if I write ladybug, for instance.

00:16:24.830 --> 00:16:28.730
I can write tiger, okay?

00:16:28.730 --> 00:16:30.850
So autoscrolling works.

00:16:30.850 --> 00:16:39.450
Up. And so that's what I can also, yeah,
delete images and now I made the changes.

00:16:39.450 --> 00:16:45.340
And so now to continue we need to use Xcode.

00:16:45.340 --> 00:16:48.810
So, okay that.

00:16:48.809 --> 00:16:51.959
So here are the six steps of our application.

00:16:51.960 --> 00:16:58.180
I will start with the step one, of course, and that's
the steps that you have in the coding at start.

00:16:58.179 --> 00:17:00.399
So let me open the first one.

00:17:00.399 --> 00:17:07.059
And let me start by running this application, and
then I will show the code that is needed to do that.

00:17:07.059 --> 00:17:16.299
With the first type of our application I can scroll over
my images, but now I can also zoom out, zoom in like this,

00:17:16.299 --> 00:17:22.639
and you can see that it's not only thumbnail
images are on there with best quality possible,

00:17:22.640 --> 00:17:25.500
it's a quality that you will have in preview.

00:17:26.839 --> 00:17:30.919
I can also add other images with this button here.

00:17:30.920 --> 00:17:36.380
And for instance, if I add application directory you can see

00:17:36.380 --> 00:17:41.930
that it doesn't only support images,
but in fact here generate icons.

00:17:41.930 --> 00:17:51.580
I can also; I have a nice search feature where I can search
for a given file, I write iCal.

00:17:51.579 --> 00:17:55.819
So here it's very simple, because
I just filter my datasource array,

00:17:55.819 --> 00:18:00.279
and it automatically animates the changes
of the datasource.

00:18:00.279 --> 00:18:04.779
I will show you that in a little bit with the codes.

00:18:04.779 --> 00:18:13.639
And I can continue to work and also reorder files,
delete some items, and move other files like that.

00:18:13.640 --> 00:18:16.470
So now let's have a look to the code.

00:18:16.470 --> 00:18:21.250
Here's the Controller of my application.

00:18:21.250 --> 00:18:30.029
I have an outlet connected to the image browser to be able
to invoke real data and the image browser

00:18:30.029 --> 00:18:33.599
when I want to change the images
displayed in the image browser.

00:18:33.599 --> 00:18:42.689
And then here I have an NSMutableArray that will contain
the images I want to display in the image browser.

00:18:42.690 --> 00:18:49.150
And now let's have a look to the
implementation of the datasource protocol.

00:18:49.150 --> 00:18:52.340
So, sorry, here it is.

00:18:52.339 --> 00:19:00.149
Okay? So you can see that it's very straight
forward, I just need to return the count of elements

00:19:00.150 --> 00:19:03.720
in my NSMutableArray, the number
of items in image browser.

00:19:03.720 --> 00:19:08.500
And when the image browser asks for
a given item at a given index,

00:19:08.500 --> 00:19:12.069
then I just return the object at
index in my NSMutableArray.

00:19:12.069 --> 00:19:19.349
And as I said before in my slides, the
objects are returned here must respond

00:19:19.349 --> 00:19:25.259
to the three methods: imageUID, imageRepresentationType,
and imageRepresentation.

00:19:25.259 --> 00:19:28.960
So this object is here.

00:19:28.960 --> 00:19:31.559
It is MyImageObject.

00:19:31.559 --> 00:19:37.519
It just contains an absolute filepath.

00:19:37.519 --> 00:19:44.759
And now the implementation of the three required methods
is very simple, because I can just return this path

00:19:44.759 --> 00:19:51.470
in imageUID, and I will be sure that this
path will be unique for two different images.

00:19:51.470 --> 00:19:58.200
Then in imageRepresentationType I return
IKImageBrowserPathRepresentationType

00:19:58.200 --> 00:20:02.920
to tell the image browser I will just give him some paths

00:20:02.920 --> 00:20:08.970
and the image browser will load these
paths itself and create thumbnails.

00:20:08.970 --> 00:20:13.880
And so when the image browser ask for the image
Representation I just give him the absolute path

00:20:13.880 --> 00:20:17.760
and I let him do the job to import it.

00:20:17.759 --> 00:20:22.190
I also implemented an optional method, which is imageTitle.

00:20:22.190 --> 00:20:25.860
And this is a title drawn under each image.

00:20:25.859 --> 00:20:33.139
So here I just returned the lastPathComponent
of my absolute path to see the file name.

00:20:33.140 --> 00:20:39.630
So now let's do something interesting by replacing
IKIMageBrowserPathRepresentationType,

00:20:39.630 --> 00:20:47.250
and replacing it by IKImageBrowserQuickLook
PathRepresentationType.

00:20:47.250 --> 00:20:53.819
So like this I will tell the image browser to use
Quick Look to create previews of my given file path.

00:20:53.819 --> 00:20:59.899
Now let's also specifying QTMoviePaths for movies.

00:20:59.900 --> 00:21:03.290
Here I just test the extension of my files.

00:21:03.289 --> 00:21:07.319
I should test the UTI, but it's
just for a demo, so that's fine.

00:21:07.319 --> 00:21:13.039
And let's specify QCCompositionPath
path for .qtz files.

00:21:13.039 --> 00:21:17.269
And now with a change just check how it be as now.

00:21:17.269 --> 00:21:31.819
So that the same application can remove the default
images and how, uh storage, okay, how these files.

00:21:31.819 --> 00:21:39.299
So these files are not on images, but there is a
lot of different kind of images, of documents, sorry.

00:21:39.299 --> 00:21:47.289
And so, for instance, if I search for C++ files,
you can see that it's not only generic previews,

00:21:47.289 --> 00:21:57.859
but in fact the real code beyond the file.

00:21:57.859 --> 00:22:00.629
Then I can also search for contacts.

00:22:00.630 --> 00:22:12.640
And you can see that you can use the image browser to browse
forth, use image browser to create a kind of contact browser

00:22:12.640 --> 00:22:17.090
with really nice previews, thanks to Quick Look, like this.

00:22:17.089 --> 00:22:27.179
And as it supports large amount of images, let's say
300,000 images, I think it will support your contact list.

00:22:28.730 --> 00:22:33.180
Okay, now you can, we can search
for, for instance, MP3, yes,

00:22:33.180 --> 00:22:38.900
so here it displays the covers that you would have in iTunes.

00:22:38.900 --> 00:22:45.890
So I have only three MP3 then we had to convert,
but that's a cover I would have in iTunes.

00:22:45.890 --> 00:22:52.960
I can search for Keynote files, and you can see
that the preview for Keynote files are really nice,

00:22:52.960 --> 00:22:56.319
because they have a really good
quality, thanks to Quick Look.

00:22:56.319 --> 00:23:00.710
And that's exactly what you would see by using Keynote.

00:23:02.009 --> 00:23:14.509
I can search for some emails, up, okay, and
so I can preview, I can preview everything.

00:23:14.509 --> 00:23:17.789
I can preview emails, I can preview some notes.

00:23:17.789 --> 00:23:28.339
I can search for to finish with some PDFs, because
preview of PDF files really nice like for Keynote,

00:23:28.339 --> 00:23:32.679
that's the quality similar to preview here.

00:23:32.680 --> 00:23:37.269
I can also involves a lot of PDFs.

00:23:37.269 --> 00:23:43.700
And now let me show you how movies
behaves in the image browser.

00:23:43.700 --> 00:23:51.340
So as I specified QTMovieRepresentationType for movies,
the image browser automatically showed play control

00:23:51.339 --> 00:23:56.490
under the movies so that you can play
these movies directly in the image browser.

00:23:56.490 --> 00:24:02.150
So if I click on the play button here it plays
the movies directly in the image browser.

00:24:02.150 --> 00:24:06.640
I can continue to navigate while playing.

00:24:06.640 --> 00:24:14.130
I can continue to zoom in, zoom out, onto
a scroll while playing the movie.

00:24:14.130 --> 00:24:17.870
If I switch to another movie it
automatically stops the previous one.

00:24:17.869 --> 00:24:23.089
So if I put in shows, some mixing issues.

00:24:23.089 --> 00:24:26.949
And that is same thing for QCCompositions.

00:24:26.950 --> 00:24:32.690
I can play, here the QCCompositions and to have a
preview of QCCompositions right inside the image browser

00:24:32.690 --> 00:24:36.519
without having to switch to another application.

00:24:36.519 --> 00:24:37.379
And one more time.

00:24:37.380 --> 00:24:44.170
I can continue to, zoom in, zoom
out, while playing the QCCompositions.

00:24:44.170 --> 00:24:48.509
Okay? Can we go back to the slides please?

00:24:48.509 --> 00:24:57.539
( Applause)

00:24:57.539 --> 00:25:01.960
>>Thomas: So now we have a functional
image browser in our eyePhoto application.

00:25:01.960 --> 00:25:08.850
So we can go to the single step of our
application, which is to hide what we call a import;

00:25:08.849 --> 00:25:12.189
the import functionality to our eyePhoto application.

00:25:12.190 --> 00:25:16.880
So image can provide another component
named the picture taker.

00:25:16.880 --> 00:25:23.890
The picture taker is a simple panel to choose
images to take snapshots using the iSight.

00:25:23.890 --> 00:25:30.630
And it gives some tools to enhance
the image and to adjust the crop.

00:25:30.630 --> 00:25:40.620
So most of you already know and used this picture taker
on tTiger, you can find this panel in a lot of application

00:25:40.619 --> 00:25:45.189
on like Setup Assistant, iChat, Address
Book, and Icon Press.

00:25:45.190 --> 00:25:53.789
So users are already familiar with this
panel, very, very simple to use, easy to use.

00:25:53.789 --> 00:26:01.339
And now Leopard we provide a API for developers
who want to use it in their application.

00:26:01.339 --> 00:26:07.099
So what can users do with this picture taker panel?

00:26:07.099 --> 00:26:08.959
They can choose images.

00:26:08.960 --> 00:26:14.850
They can zoom in, zoom out, move the
images, the image to adjust the crop area,

00:26:14.849 --> 00:26:21.639
and now they can also apply
some cool effects with parts composer.

00:26:21.640 --> 00:26:30.090
They can also take snapshots using the iSight,
or any kind of devices supported by QTKit.

00:26:30.089 --> 00:26:37.109
And the image browser automatically saves recent
created pictures in a kind of recent list

00:26:37.109 --> 00:26:40.849
that you can access with a specific product menu.

00:26:41.869 --> 00:26:49.729
So using this picture taker is very straight forward,
as you just need one line of code to launch it.

00:26:49.730 --> 00:26:52.579
You can launch it as three different ways.

00:26:52.579 --> 00:26:56.569
If you want to use it as a panel, then you
will use beginImagePickerWithDelegate,

00:26:56.569 --> 00:27:02.000
if you want to use it as a sheet you will
use beginImagePickerSheetForWindow.

00:27:02.000 --> 00:27:06.859
For instance, Icon Press uses a picture taker as a sheet.

00:27:06.859 --> 00:27:10.459
And if you want you can also start
with a pop-up recent menu.

00:27:10.460 --> 00:27:17.150
In iChat, for example, illustrates this kind of usage.

00:27:17.150 --> 00:27:23.230
So let's jointly see that in Xcode,
so can we switch to the demo machine?

00:27:23.230 --> 00:27:29.299
So here is a step two of our application.

00:27:32.150 --> 00:27:37.540
And you can see that here's the code to
launch the picture taker, it's very short.

00:27:37.539 --> 00:27:43.970
I have an (IBAction) importImage:
here where I get, retrieve sharing stamps

00:27:43.970 --> 00:27:49.769
of the picture taker panel using
IKPictureTaker pictureTaker.

00:27:49.769 --> 00:27:54.379
Then I just, with this line of code I enable as effects.

00:27:54.380 --> 00:27:59.900
I will show you what are the effect
feature in it in a little bit.

00:27:59.900 --> 00:28:08.500
And then I launch the picture taker, so here are the
separate panel with beginPictureTakerWithDelegate.

00:28:08.500 --> 00:28:11.440
And I path didEndSelector here.

00:28:11.440 --> 00:28:18.799
So didEndSelector is a method
that will be invoked on the delegate.

00:28:18.799 --> 00:28:21.169
So delegate here is self.

00:28:21.170 --> 00:28:25.730
And so this method will be invoked when
the user is done with the picture taker.

00:28:25.730 --> 00:28:30.940
Like, for instance, clicking on set, or
by cancelling, or by closing the window.

00:28:30.940 --> 00:28:37.059
So here the delegate is self, so I
implemented didEndSelector here.

00:28:37.059 --> 00:28:42.819
So this method would be invoked by the picture taker.

00:28:42.819 --> 00:28:51.329
Here I just check the returnCode, and if it is
NSOKButton that means the user validate and not cancel.

00:28:51.329 --> 00:28:57.460
So here I want to get the ouputImage from the picture taker.

00:28:57.460 --> 00:29:04.750
So simply with outputImage method I get a simple NSImage.

00:29:04.750 --> 00:29:14.380
Then I save this NSImage as a TIFF on a hard drive,
and I add the new path in my datasource array,

00:29:14.380 --> 00:29:20.370
and I ask the image browser to reflect
the changes on my new datasource.

00:29:20.369 --> 00:29:23.250
So let's see how it works.

00:29:23.250 --> 00:29:33.619
Okay, so here I did a camera button, which
is connected to the import image action.

00:29:33.619 --> 00:29:38.629
So when I click on it, it brings the picture taker panel.

00:29:38.630 --> 00:29:46.450
I can choose an image on my hard
drive, on my other disk, like this.

00:29:46.450 --> 00:29:56.779
I can zoom in, zoom out, move the image to adjust the crop.

00:29:56.779 --> 00:30:03.490
I can choose another image from the recent list like this.

00:30:03.490 --> 00:30:05.410
Hey, it's me.

00:30:07.069 --> 00:30:13.139
I can also take a snapshot, and I cross my finger.

00:30:13.140 --> 00:30:14.300
Hey, it works!

00:30:14.299 --> 00:30:18.950
Woo. (Laughter) So that's me.

00:30:18.950 --> 00:30:27.120
And now a new coll stuff in Leopard is capablity to
add some cool QC features with an effect button here.

00:30:27.119 --> 00:30:35.659
So it bring the effect picture, thank you,
and there are several pages of effects.

00:30:35.660 --> 00:30:45.880
I can choose one of them for some effects, I can also change
some properties here, for instance, the center of my effect.

00:30:45.880 --> 00:30:53.190
And then I can validate, it will
invoke my didEndSelector

00:30:53.190 --> 00:30:56.380
where I get output image, and add it to my datasource.

00:30:56.380 --> 00:31:00.510
And so that's why I can see it in the image browser.

00:31:00.509 --> 00:31:08.319
All the effects are nondescriptive so you can, whenever
you want, just go back and recall the original image,

00:31:08.319 --> 00:31:16.129
or choose another, a different effect like that.

00:31:16.130 --> 00:31:20.530
And if I validate there is another image in my datasource.

00:31:20.529 --> 00:31:23.509
Okay. So can we go back to the slides?

00:31:23.509 --> 00:31:29.599
( Applause )

00:31:29.599 --> 00:31:34.909
>>Thomas: So now we have our eyePhoto
application is able to scroll,

00:31:34.910 --> 00:31:39.660
to browse a lot of images, or other kind of documents.

00:31:39.660 --> 00:31:41.730
We can zoom in, zoom out.

00:31:41.730 --> 00:31:46.200
We have indent preview for movies and QC compositions.

00:31:46.200 --> 00:31:50.890
And we have a nice search functionality
really easy to implement as you just need

00:31:50.890 --> 00:31:57.880
to filter your NSMutableArray
and just ask to reload the data.

00:31:57.880 --> 00:32:03.600
So we have, I think, a complete and fast image
browser thanks to the IKImageBrowserView.

00:32:03.599 --> 00:32:09.740
We have also-- we are also able to import images,
to crop images,

00:32:09.740 --> 00:32:16.630
to take snapshots using the iSight,
and apply some Quartz Composer effects.

00:32:16.630 --> 00:32:20.370
And so now I pass to, I pass back to Werner to continue

00:32:20.369 --> 00:32:23.250
to enhance our eyePhoto application
with other Image Kit components.

00:32:23.250 --> 00:32:24.509
Thanks.

00:32:24.509 --> 00:32:30.660
( Applause )

00:32:30.660 --> 00:32:35.660
>>Okay, so after browsing and importing
we want to view the image.

00:32:35.660 --> 00:32:41.970
Want to view the image, while we could do that
by just changing the slider and fully zoom in,

00:32:41.970 --> 00:32:45.620
but when viewing an image we want
to do maybe a little bit more.

00:32:45.619 --> 00:32:55.489
So if we look at the IKImageView class itself
it handles a single image in its own view.

00:32:55.490 --> 00:33:01.349
And it handles things that you take for more
or less granted; you really want to have that.

00:33:01.349 --> 00:33:06.569
But sometimes it's like a little bit tricky
to get that working right and efficient.

00:33:06.569 --> 00:33:11.679
So what we want to do is we want to be
able to autozoom, autoresize, all right.

00:33:11.680 --> 00:33:21.110
And so basically you resize the window, and you want to
always fit the image on the screen inside the window,

00:33:21.109 --> 00:33:28.459
maybe have bars at the top or bottom, but you are
not interested in kind of distorting the image.

00:33:28.460 --> 00:33:33.100
And then, of course, you want to zoom in, so
whenever you do that you want to have scroll bars

00:33:33.099 --> 00:33:37.069
and that should just work out of the box.

00:33:37.069 --> 00:33:42.679
Next thing that should work out of the box is actually
handling the orientation tag, and Thomas didn't mention

00:33:42.680 --> 00:33:45.630
it for the browser, but actually it works very well.

00:33:45.630 --> 00:33:52.460
So whenever you take a digital image from your camera,
and you, instead of creating the landscape image go

00:33:52.460 --> 00:33:58.410
to portrait mode, then the image itself has
the same dimension as all the landscape ones.

00:33:58.410 --> 00:34:01.269
The only thing that's different is really in the metadata.

00:34:01.269 --> 00:34:09.349
There's the orientation tag, the value from 1 to
8 that tells you how to rotate or flip the image.

00:34:09.349 --> 00:34:14.289
And of course, we want to take care of that,
so we really want to show you where to go.

00:34:14.289 --> 00:34:20.360
Then the next kind of requirement was,
well, we should work with large images.

00:34:20.360 --> 00:34:26.190
Overall, that doesn't seem like a huge thing, because
you could do that in the past, you just create,

00:34:26.190 --> 00:34:31.519
use Image I/O to create a CGImageRef,
and no matter how big it is you just draw it.

00:34:31.519 --> 00:34:37.559
The problem with that approach was
that this CGContextDrawImage call

00:34:37.559 --> 00:34:41.940
that we are going to make may take a long, long time.

00:34:41.940 --> 00:34:47.769
So we are doing some tricks to beef up
the performance so that when you deal

00:34:47.769 --> 00:34:55.400
with large images you will at least
feel that it feels faster.

00:34:55.400 --> 00:35:01.780
So in order to use this new IKImageView
what do you really have to do?

00:35:01.780 --> 00:35:06.210
Well, of course, you have to set the
image and there are two ways to do it.

00:35:06.210 --> 00:35:13.829
One is use Image I/O to create the CGImageSourceRef
and also extract the metadata.

00:35:13.829 --> 00:35:17.860
Remember metadata is important
for an orientation tag, for example.

00:35:17.860 --> 00:35:19.849
So you could do that.

00:35:19.849 --> 00:35:25.009
Or the really preferred approach is you pass in the URL.

00:35:25.010 --> 00:35:34.610
The reason why it's preferred, again you will see in a bit
when we load the first images and show you how to do that.

00:35:34.610 --> 00:35:39.769
Then getting back to the image, well, you want to
save it out to disk, then really what you want

00:35:39.769 --> 00:35:48.019
to get back is a CGImageRef, and also
if user has done some changes you want

00:35:48.019 --> 00:35:51.440
to get an updated version of the image properties.

00:35:51.440 --> 00:35:58.119
Let's switch to the demo machine, and let's
have a look what it takes to use the IKImageView.

00:35:58.119 --> 00:36:04.449
Now I'm going to start off with Interface Builder.

00:36:04.449 --> 00:36:12.929
Of course, Interface Builder, well, we can actually just create
a single window, and that window should probably stick

00:36:12.929 --> 00:36:20.419
to the top part and you may even want to resize it a
little bit, and down here we should have the Image View.

00:36:20.420 --> 00:36:29.639
So when I drag it over you see we actually
automatically create the Interface Builder block in a way

00:36:29.639 --> 00:36:37.849
that we get predefined content for the image
browser view, but also for the image view.

00:36:37.849 --> 00:36:44.489
And you see the sizing is correct, so we could just run it.

00:36:44.489 --> 00:36:48.209
Then what you would expect is really, it autoresizes,

00:36:48.210 --> 00:36:52.639
because we turned on autoresizing,
and it should behave that way.

00:36:52.639 --> 00:36:59.509
Now the next thing we want to do is
we want to put this into a scroll view.

00:36:59.510 --> 00:37:10.970
So once that's in, then you, okay, that's when
it crashes, okay, let's try that again.

00:37:10.969 --> 00:37:25.699
So we do this, bring in the IKImageView,
embed that in the scroll view.

00:37:25.699 --> 00:37:37.849
For the scroll view we have to rewire this, and
then run it, and well, we do not get a scroll view.

00:37:37.849 --> 00:37:38.880
Why is that?

00:37:38.880 --> 00:37:44.800
Well, because we turned on autoresizing on the image view.

00:37:44.800 --> 00:37:50.990
Now instead of like turning off, we want,
actually, let's try a couple of other things.

00:37:50.989 --> 00:37:58.169
And one thing would be, wouldn't it be nice if we could do
some basic coding without actually, without writing any code?

00:37:58.170 --> 00:38:06.889
And the way we do it is we bring up an object
controller, wire that to the image view,

00:38:06.889 --> 00:38:16.539
and then take this autoresize,
and what you want to do is bind it.

00:38:16.539 --> 00:38:26.150
Use bindings, bind it to our object
controller, and just bind it to autoresizes.

00:38:26.150 --> 00:38:34.099
Now by doing that, we should be able, if
we run it, all of this behaves correctly.

00:38:34.099 --> 00:38:42.210
If we turn off autoresize, well, then
you see the image does not no longer fit

00:38:42.210 --> 00:38:48.079
and we can scroll and have the image of the given size.

00:38:48.079 --> 00:38:49.460
Or we could go a little bit further.

00:38:49.460 --> 00:38:57.199
What we could do is also, why not have
a slider to do the actual resizing?

00:38:57.199 --> 00:39:08.699
And again, this slider we could just bind it to the
object controller and bind that to the zoom factor.

00:39:08.699 --> 00:39:21.579
If we run it then-- oh, it didn't take it.

00:39:21.579 --> 00:39:33.409
Okay. If we run it we should see it and can actually
add also an edit field, and actually did prepare that.

00:39:33.409 --> 00:39:41.129
If the image would sample, and the
fields gone so let's do that again.

00:39:41.130 --> 00:39:46.030
Bind it to the zoom factor, let's run it.

00:39:46.030 --> 00:39:50.519
Then we see we have this and we just added
the edit field, it's automatically bound

00:39:50.519 --> 00:39:54.519
to the zoom factor, there's no code involved.

00:39:54.519 --> 00:39:57.650
You can very easily get that to work.

00:39:57.650 --> 00:39:59.940
And autosize, of course, works as well.

00:39:59.940 --> 00:40:07.789
So if you autosize and now you make it smaller, okay, we see
the slider changes and also the value and the edit field.

00:40:07.789 --> 00:40:12.420
So it can go to anything that should just work.

00:40:12.420 --> 00:40:18.950
Now the interesting thing is that while we have
this Cocoa simulator running, let me draw

00:40:18.949 --> 00:40:23.869
up a couple of images on this one directly.

00:40:23.869 --> 00:40:26.529
And we have a folder with large images.

00:40:26.530 --> 00:40:32.670
Like we have an image that's 10,000 by
10,000, so you see it loads kind of fast.

00:40:32.670 --> 00:40:41.230
It's really not bad, but if we
like zoom in it still feels fast.

00:40:41.230 --> 00:40:47.869
And one thing you will notice is like as we zoom
in we may not have the image at full resolution,

00:40:47.869 --> 00:40:54.159
but actually while it's loading and fetching the data to
get to the full resolution we can work with the image.

00:40:54.159 --> 00:40:57.440
Which is kind of nice, because then doing things like that

00:40:57.440 --> 00:41:02.750
and then changing the zoom factor
I can go in and still use it.

00:41:02.750 --> 00:41:06.780
Or another interesting image, first
let's turn autosize on again,

00:41:06.780 --> 00:41:11.970
and then take a very narrow one,
this one is 14,000 by 524.

00:41:11.969 --> 00:41:18.980
So if we go to autoresize there's really not
much to see, but if we zoom in you will see.

00:41:18.980 --> 00:41:27.780
The image comes in and as we zoom around, you
see it feels kind of snappy, and get dizzy,

00:41:27.780 --> 00:41:35.330
but it's loading the information, the image
data and compressor as it needs to,

00:41:35.329 --> 00:41:41.329
which overall, I think, results in a
pretty good performance.

00:41:41.329 --> 00:41:50.210
So you do that or another TIFF image like kites.

00:41:50.210 --> 00:41:53.889
It's kind of nice.

00:41:53.889 --> 00:42:05.639
So once we have that, basically now we want to integrate
this image view with the step two that we ended up with.

00:42:05.639 --> 00:42:11.460
And we could more or less try a similar
thing, actually in Interface Builder.

00:42:11.460 --> 00:42:27.980
So if I drag this one over and combine these two in a
split view, oh, I should, all be in the same height.

00:42:30.070 --> 00:42:38.809
So combine these two, embed those in a split view,
and make sure that the split view behaves correctly.

00:42:38.809 --> 00:42:43.739
And the only thing that I would have
to do is set this one to delegate.

00:42:43.739 --> 00:42:48.609
And this only useful in the image
interface for the demo, it's really,

00:42:48.610 --> 00:42:54.370
see now when I select around I can actually have
an application that uses the browser on one side,

00:42:54.369 --> 00:42:57.989
and has the full size image view on the other side.

00:42:57.989 --> 00:43:04.309
And you can just select, and as Thomas
was showing like rearrange and these things.

00:43:04.309 --> 00:43:06.860
It would just work.

00:43:06.860 --> 00:43:13.420
Now you can go crazy and add a couple
of other things in Interface Builder.

00:43:13.420 --> 00:43:32.820
For example, let's have just a single button saying left,
and let's duplicate that, right, and then put these,

00:43:32.820 --> 00:43:43.539
connect these, and do the image rotation, we can run it
and then this would just work without writing extra code.

00:43:43.539 --> 00:43:48.519
This is just an outlet that we have,
an action that we can directly use.

00:43:48.519 --> 00:43:55.699
The same is true for flip, left, vertical,
horizontal, or zoom in, zoom out, zoom to actual size,

00:43:55.699 --> 00:44:00.889
and all these things, but actual size is also like that.

00:44:00.889 --> 00:44:03.829
So you could do a lot of things in Interface Builder,

00:44:03.829 --> 00:44:12.190
but actually we want to switch back
to Xcode to our step three demo.

00:44:12.190 --> 00:44:18.179
And let's run the application first.

00:44:18.179 --> 00:44:26.799
Well, you see, first of all, we created a couple of nicer or
better-looking icons, you have the arrangement that we have

00:44:26.800 --> 00:44:30.010
at the split view as a horizontal split view.

00:44:30.010 --> 00:44:39.510
We still have all the features that we had before, like
the searching for like just updates and behaves correctly.

00:44:39.510 --> 00:44:51.790
We do have to zoom in, zoom out, zoom to actual
size, zoom to fit, or then the different orientation.

00:44:51.789 --> 00:44:58.300
And interesting thing the undo, all these
things just work without writing any code.

00:44:58.300 --> 00:45:05.180
And if we look at the code that we actually
had to write in order to make it work

00:45:05.179 --> 00:45:08.279
in our application, it's actually not a lot.

00:45:08.280 --> 00:45:16.420
So if we just look at the main controller,
the only thing we had to add here was,

00:45:16.420 --> 00:45:20.230
well, we wanted to have an outlet for the IKImageView.

00:45:20.230 --> 00:45:32.550
Then on the viewing part of the controller what we were adding
was like a set up, and the only thing we want to do there is

00:45:32.550 --> 00:45:35.600
like turn on autoresizing, so make sure that we,

00:45:35.599 --> 00:45:42.579
when we come up with the application we have autoresizing
on no matter what was set in the file.

00:45:42.579 --> 00:45:47.469
And we initialize everything with NULL so display nothing.

00:45:47.469 --> 00:45:56.079
Then on the change of the selection
in the image browser view what we want

00:45:56.079 --> 00:46:02.500
to do is get the current selection,
we're going to index that back.

00:46:02.500 --> 00:46:06.079
Try to see if we have a valid first index.

00:46:06.079 --> 00:46:11.699
Get the item and the itemRepresentation.

00:46:11.699 --> 00:46:15.029
And in our sample code we don't have to test for anything,

00:46:15.030 --> 00:46:20.840
because like we know that in this
step all be returned would be a path.

00:46:20.840 --> 00:46:31.410
So what we are displaying is really, what we're getting is
a file path, and we, so we create a URL with the file path

00:46:31.409 --> 00:46:34.440
and we just initialize the image with that.

00:46:34.440 --> 00:46:36.900
That's all we need.

00:46:36.900 --> 00:46:40.510
Okay, so then for the next step, go back to the slides.

00:46:40.510 --> 00:46:47.700
( Applause )

00:46:47.699 --> 00:46:49.849
>>Now we want to edit the images.

00:46:49.849 --> 00:46:53.579
Well, there are a lot of ways to do it.

00:46:53.579 --> 00:47:03.110
We came up with the idea of having a set of
floating panels that handle image adjustments.

00:47:03.110 --> 00:47:11.980
So basically you get on one part of the panel you
get sliders, they all affect Core Image filters.

00:47:11.980 --> 00:47:17.360
So you could make your arrangement, make your
change on one of the options, for example,

00:47:17.360 --> 00:47:19.650
you can change the brightness, or whatever.

00:47:19.650 --> 00:47:27.059
It will immediately be reflected in the
image view, but it's not applied yet.

00:47:28.300 --> 00:47:38.180
The same is true for the different effects that we
present and the user can pick whatever if she wants.

00:47:38.179 --> 00:47:44.460
And the last thing we cover with
the edit panels is the metadata.

00:47:44.460 --> 00:47:52.490
We just find it convenience to have like a single place,
simple place, single simple place to go to in order

00:47:52.489 --> 00:47:55.199
to get all the information about an image.

00:47:55.199 --> 00:48:02.099
So we display all the metadata, and we get that
information from Image I/O, as we mentioned before,

00:48:02.099 --> 00:48:08.170
but what we really want to do is instead of
having kind of meaningless values, for example,

00:48:08.170 --> 00:48:17.829
if the value for a flash could be zero up to 15 or
so, which is pretty useless if you just look at it.

00:48:17.829 --> 00:48:21.369
Zero probably means there was no flash
involved, but all the other steps

00:48:21.369 --> 00:48:24.579
that do not necessarily mean that the flash did really fire.

00:48:24.579 --> 00:48:27.650
It's just like a different mode of the camera and all that.

00:48:27.650 --> 00:48:33.230
But what we really want to do in this edit panel
then is have some meaningful English names,

00:48:33.230 --> 00:48:39.130
or whatever language you have chosen;
names that the user would understand.

00:48:39.130 --> 00:48:48.059
Then the nice thing when using the edit panel would be,
wel they work kind of automatically with IKImageViews,

00:48:48.059 --> 00:48:52.570
if you want to use them outside the scope of an Image View,

00:48:52.570 --> 00:48:56.680
all you would have to do is implement
a very simple protocol.

00:48:56.679 --> 00:49:03.319
And for the image view using the
Image Edit Panel is very simple.

00:49:03.320 --> 00:49:11.050
All you do is basically you'd turn on one flag, one
Boolean, saying well, on the double click open this panel.

00:49:11.050 --> 00:49:14.650
Let me show you that in step number four.

00:49:14.650 --> 00:49:32.289
So what we did for step number four
is we just go in, and for the setup

00:49:32.289 --> 00:49:40.519
editing part we just basically do the
setDoubleClickOpensImageEditPanel to YES

00:49:40.519 --> 00:49:51.320
And if we run that application then it behaves the same way
as before, but now double clicking just brings up this panel

00:49:51.320 --> 00:49:56.300
and I can change like on the fly,
even for very large images,

00:49:56.300 --> 00:50:00.960
it should be snappy enough, change different bracket.

00:50:00.960 --> 00:50:12.360
I can go to the effect page and then to
whatever we want it to apply as an affect.

00:50:12.360 --> 00:50:19.539
Or actually I can go to the details page where I get
information, different information about images.

00:50:19.539 --> 00:50:23.619
While these images that we have in here do not have,

00:50:23.619 --> 00:50:28.779
these are the standard desktop backgrounds,
so they do not have a lot of metadata.

00:50:28.780 --> 00:50:42.450
But let me actually show you images that do have metadata.

00:50:42.449 --> 00:50:51.710
Oh, I guess we didn't turn on the, actually let me add this.

00:50:51.710 --> 00:50:58.210
Oops. Oh, images with metadata.

00:50:58.210 --> 00:51:11.389
Okay, if I choose this image and go in here, actually you see
this image contains GPS information, so we could actually go

00:51:11.389 --> 00:51:23.769
in and see where was this image taken, and we
would go up (Applause), go up and we'll be able

00:51:23.769 --> 00:51:28.849
to see, well, yeah, that looks kind of, okay.

00:51:28.849 --> 00:51:33.309
So I believe this was really there.

00:51:33.309 --> 00:51:37.250
Then, of course all, the other metadata
like general information,

00:51:37.250 --> 00:51:40.579
here's the orientation tag I was mentioning before.

00:51:40.579 --> 00:51:47.840
This, and kind of information we really
want to display in a more readable way.

00:51:47.840 --> 00:51:53.210
So I think that's kind of handy.

00:51:53.210 --> 00:51:59.860
Okay, so step number four, we have the editing
part, now if you go back to the slides.

00:51:59.860 --> 00:52:08.300
What do we want to do after editing, well of
course, we want to save our changes to disk.

00:52:08.300 --> 00:52:11.539
Now there are a lot of different ways you could do it.

00:52:11.539 --> 00:52:16.590
Well, of course, you use, if you're writing a Cocoa
application, you just use a regular in a save panel,

00:52:16.590 --> 00:52:23.750
and then you'll want to write out the image
information, image data using image I/O to disk.

00:52:23.750 --> 00:52:31.510
And very easy for Image I/O users, like all you do
is you path in your T type to specify is it a JPEG

00:52:31.510 --> 00:52:35.290
or a TIFF, or whatever file formats you want.

00:52:35.289 --> 00:52:43.800
Now the, kind of again, tricky thing is, it's, yeah, you
have to allow the user to specify certain things like,

00:52:43.800 --> 00:52:54.310
what is the compression, what is the quality slider
for my JPEG, what is the alpha value for my TIFF?

00:52:54.309 --> 00:53:02.929
And so we came up with the IKSaveOptions, just a set
of, basically, a class, a set of utilities that allow you

00:53:02.929 --> 00:53:10.179
to use the add on panel to a save
panel in a kind of efficient way.

00:53:10.179 --> 00:53:19.659
What you do whenever you want to invoke this, you call in it
this panel with image properties, out of that, for example,

00:53:19.659 --> 00:53:30.279
the panel will know, the accessory view will know what
the current compression for your TIFF, for example, is.

00:53:30.280 --> 00:53:38.530
And then you pass in a UT type, so the
panel will know, well, default to this type.

00:53:38.530 --> 00:53:45.090
And then all you do is you add this
accessory view to the regular NSSavePanel.

00:53:45.090 --> 00:53:55.990
And then when you're done with that you can get back the
image properties, the UT type that the user has chosen,

00:53:55.989 --> 00:54:01.069
separately or combined in a dictionary
and the user selection.

00:54:01.070 --> 00:54:09.200
So let me show you how to do that in step number five.

00:54:09.199 --> 00:54:17.319
So step number five, you add it, the controller saving part.

00:54:17.320 --> 00:54:27.010
And controller saving part what we had to do, well, first of
all, we want to keep track of the current, the selected URL.

00:54:27.010 --> 00:54:37.570
So it's kind of convenient that we store that information
off whenever the user has modified the current selection.

00:54:37.570 --> 00:54:46.350
So actually that means that in the viewing part
where we were dealing with the current selection,

00:54:46.349 --> 00:54:50.489
at the end we really have to call setSelectedImageURL.

00:54:50.489 --> 00:54:59.619
So once we have that, then we basically
hook up the saveAs option.

00:54:59.619 --> 00:55:07.059
So we create a standard save panel, and we ask
Image I/O for this URL, give me the UT type.

00:55:07.059 --> 00:55:14.769
Image I/O does a pretty good job by
looking at the first end bytes of an image,

00:55:14.769 --> 00:55:20.579
and then determining, okay, this is a JPEG, this is a TIFF.

00:55:20.579 --> 00:55:32.130
And what we do is we get the, from the image view, we
get the image properties, we get the lastPathComponent

00:55:32.130 --> 00:55:45.079
as the file name, then we create and initialize the
IKSaveOptions, and add that to the savePanel.

00:55:45.079 --> 00:55:52.289
Now, then of course, there all the standard Cocoa
stuff where we begin the sheet for the directory,

00:55:52.289 --> 00:55:58.110
we pass in NULL, go to the last
one and pass in the file name and all that.

00:55:58.110 --> 00:56:04.000
And what we want to get called
whenever the user clicks okay.

00:56:04.000 --> 00:56:10.389
That's the only case we evaluate here, and
then we want to save the image to disk.

00:56:10.389 --> 00:56:16.829
Now saving the image to disk is more or less straight
forward, all we do is we get from the save options,

00:56:16.829 --> 00:56:27.900
we get the UT type back, and this is really the one that
we pass in on the CGImageDestinationCreateWithURL.

00:56:27.900 --> 00:56:38.869
So once we have the CGImageDestination we just add the
image, and that's the image that we get from the image view,

00:56:38.869 --> 00:56:44.710
which means that image has all
the changes that the user made to,

00:56:44.710 --> 00:56:50.670
so it will contain the slider change
for the Sepia CI filter.

00:56:50.670 --> 00:56:58.099
And then we add that and call finalize.

00:56:58.099 --> 00:57:04.869
That should create the image on disk.

00:57:04.869 --> 00:57:15.769
And we want, of course, to add that directly to our
browser, reload the browser, since we added an extra object,

00:57:15.769 --> 00:57:25.159
and then since the last one we added we want to make
that also the current selection; meaning we did save it

00:57:25.159 --> 00:57:30.909
and the browser should automatically select
it, so our main view should display it.

00:57:30.909 --> 00:57:44.879
So if you run this then, let's take this image here
and then we can go in, we could make the change,

00:57:44.880 --> 00:57:51.390
add now, change saturation, and just do a save as.

00:57:51.389 --> 00:58:05.139
Saving as, as you can see here, we will have
all the formats that Image I/O supports.

00:58:05.139 --> 00:58:10.469
We can choose JPEG and play with the quality.

00:58:10.469 --> 00:58:15.269
We could save this one, this was
an original, was a JPEG file,

00:58:15.269 --> 00:58:21.489
but we can also switch the file format,
go to TIFF and say, oh, let's use LZW.

00:58:21.489 --> 00:58:25.509
And then do a save.

00:58:25.510 --> 00:58:31.860
Now this image was saved, and down here
we see we have Clown Fish.tiff.

00:58:31.860 --> 00:58:40.480
So that's fairly easy to use, the save options, and it's
kind of powerful, because like you don't have to worry

00:58:40.480 --> 00:58:44.090
about all the different options that you
could have, all different file formats

00:58:44.090 --> 00:58:45.970
that you could when working with Image I/O.

00:58:45.969 --> 00:58:56.579
Now the last part of our eyePhoto application,
would you switch back to the slides, please?

00:58:56.579 --> 00:58:59.369
Is presenting it.

00:58:59.369 --> 00:59:07.389
Well, for that we have a simple to use
Slideshow component within Image Kit.

00:59:07.389 --> 00:59:15.089
And this one works with images, PDFs, and
everything else that Quick Look supports.

00:59:15.090 --> 00:59:24.309
The data that you, or you pass it in, is pretty easy to use.

00:59:24.309 --> 00:59:31.159
I mean it's a, can be passed in as a URL,
the file path, or a CGImageRef, anything,

00:59:31.159 --> 00:59:35.409
or PDF page, or a mixture of those actually.

00:59:35.409 --> 00:59:45.089
And the whole concept behind it is very similar to the
datasource of tableView for the IKImageBrowserView.

00:59:45.090 --> 00:59:50.530
So what you have to do is, there are two methods that
are required. One is give me the number

00:59:50.530 --> 00:59:55.500
of items, and the other one is give ItemAtIndex.

00:59:56.510 --> 01:00:02.650
For those data types that do not
contain information, for example,

01:00:02.650 --> 01:00:08.510
for the orientation that would be
a CGImageRef or an NSImage.

01:00:08.510 --> 01:00:21.140
For those you could provide additional
information using Image Property dictionary.

01:00:21.139 --> 01:00:24.969
But-- and actually the name, because that's the
other thing, like a CGImageRef does not have

01:00:24.969 --> 01:00:29.339
or reflect the name of the original image source.

01:00:29.340 --> 01:00:40.370
And then the datasource can have some callbacks for some,
you can get called when the current selection in the image,

01:00:40.369 --> 01:00:45.599
in the Slideshow changes, when it starts and stops.

01:00:45.599 --> 01:00:52.619
So if you go back to demo six, demo sheet, step number six,

01:00:52.619 --> 01:01:00.039
we have here is on the presenting part,
well, we want to run the Slideshow.

01:01:00.039 --> 01:01:08.409
So we'll if we run the application first and
then see what did we change, what did we add?

01:01:08.409 --> 01:01:14.799
Well, we added a button up here
to actually start the Slideshow.

01:01:14.800 --> 01:01:23.140
And if I do that, then it should take over the entire
screen, we should get our regular Slideshow panel,

01:01:23.139 --> 01:01:26.519
and then we can stop it here, and then go through.

01:01:26.519 --> 01:01:29.199
We can go to full size.

01:01:29.199 --> 01:01:31.289
We can go to the index view.

01:01:31.289 --> 01:01:32.800
Hmm, it's not working.

01:01:32.800 --> 01:01:36.769
Okay, let me see why it's not working.

01:01:36.769 --> 01:01:50.269
If we look at the code, well, we run the
Slideshow by passing in a dictionary of options.

01:01:50.269 --> 01:01:57.099
And the first option that we pass in is a StartIndex.

01:01:57.099 --> 01:02:04.500
Well, the option, the StartIndex just allows you to,
well, you have like 5,000 images in your browser view,

01:02:04.500 --> 01:02:07.159
and you want to go to the Slideshow,
and you want to start off

01:02:07.159 --> 01:02:12.529
with a different index, well, yeah,
use the current selected one.

01:02:12.530 --> 01:02:14.990
That's what we do here.

01:02:14.989 --> 01:02:19.079
Then we run the Slideshow in a different, in a given mode.

01:02:19.079 --> 01:02:25.739
Well, if we want to do it, in our case we
want to do it really with images only.

01:02:25.739 --> 01:02:38.229
And then what we have to implement as a datasource,
because we are specifying self as the datasource,

01:02:38.230 --> 01:02:42.679
then we specify the number of Slideshow items.

01:02:42.679 --> 01:02:45.339
This is just our array count.

01:02:45.340 --> 01:02:55.070
And for a given item at index we get out
of our images array, get the item at index,

01:02:55.070 --> 01:02:58.450
and get the image representation, which is the path.

01:02:58.449 --> 01:03:03.939
So we are returning as the ID here, we return the path.

01:03:03.940 --> 01:03:14.119
Now we also want to respond to, like the Slideshow did,
stop, so actually we want to update our current selection.

01:03:15.559 --> 01:03:27.949
Let's do that, so again we run the Slideshow, and if we go
through that, you could say that was a nice picture here,

01:03:27.949 --> 01:03:36.189
and then we stop then, we should update the main window.
One other thing that we did on the last step that's kind

01:03:36.190 --> 01:03:42.590
of interesting is down here we are
showing the total number of images.

01:03:42.590 --> 01:04:00.130
And actually we're not updating it for the selection, but if
we use the number of bugs, or whatever, we had 2 out of 46,

01:04:00.130 --> 01:04:04.750
let me actually show you how we did that,
because I thought it was also interesting,

01:04:04.750 --> 01:04:09.679
because this one was done without any code.

01:04:12.929 --> 01:04:23.349
So if we go to the view and look at this, then
we actually see it's all done through bindings.

01:04:23.349 --> 01:04:32.170
So the first one we bind to our controller
seeing number of displayed items,

01:04:32.170 --> 01:04:38.990
and the second one is just the total number of items.

01:04:38.989 --> 01:04:49.529
And these were actually the two methods that we were adding
to the controller to allow you to do this with this update.

01:04:49.530 --> 01:05:01.130
But it, whenever the-- current selection changes there's
really no need to invoke any code to update these numbers,

01:05:01.130 --> 01:05:13.150
this happens automatically when the browser
view updates and filters out our items.

01:05:16.530 --> 01:05:30.250
Okay, so, by doing that, overall, I guess we have kind
of nice application that shows the image browser view,

01:05:30.250 --> 01:05:34.460
the image view, and a couple of
other components from Image Kit.

01:05:34.460 --> 01:05:39.349
And I think that's a kind of powerful application
that we just built during this session.

01:05:39.349 --> 01:05:49.500
So if you go back to the slides, there's actually
not much left, just to point you out again

01:05:49.500 --> 01:05:57.219
and Allan who's the 2D and 3D graphics evangelist.

01:05:57.219 --> 01:06:00.969
So if you have any questions, problems, issues, contact him.