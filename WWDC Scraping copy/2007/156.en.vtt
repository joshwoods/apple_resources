WEBVTT

00:00:14.820 --> 00:00:20.530
>> And this is Session 156,
Input Method Kit hands on.

00:00:20.530 --> 00:00:26.720
I'm John Harvey, and Jns kerlund will be taking
you through the code that I talk about.

00:00:26.719 --> 00:00:29.609
So thanks again for coming.

00:00:29.609 --> 00:00:31.509
So we're going to talk about input methods.

00:00:31.510 --> 00:00:38.530
First it's the Input Method Kit, which is new to
Leopard, and all of Apple's input methods

00:00:38.530 --> 00:00:42.490
have been ported to use the Input Method Kit.

00:00:42.490 --> 00:00:51.109
Before we get started, what we'll do
here is show you the Simplified Chinese,

00:00:51.109 --> 00:00:54.619
which is an interesting example
because it uses every bit of the kit.

00:00:54.619 --> 00:00:57.809
And then we'll also show you our Japanese
input method, Kotoeri,

00:00:57.810 --> 00:01:04.140
which is built with the Input Method Kit, but
they opted to use their own candidate window.

00:01:04.140 --> 00:01:06.590
That illustrates the flexibility you have.

00:01:06.590 --> 00:01:10.250
We offer candidate window support, but you can do your own.

00:01:10.250 --> 00:01:14.129
So if you could switch over to the demo machines please?

00:01:15.319 --> 00:01:18.819
And so this right here is Simplified Chinese.

00:01:18.819 --> 00:01:30.319
You see it has annotations, and you can move through the
annotation window, and then we can, it has preferences,

00:01:30.319 --> 00:01:41.000
this is all done by the kit, offered to you by the kit.

00:01:41.000 --> 00:01:44.209
And then we have our Japanese input method, Kotoeri,

00:01:44.209 --> 00:01:49.329
which is probably the most complicated
input method that Apple ships.

00:01:49.329 --> 00:01:53.149
And this candidate window is their own implementation.

00:01:53.150 --> 00:01:57.500
Slightly different, you see this
annotation window's fairly complicated.

00:01:57.500 --> 00:02:02.000
And so there's an example of, that we've been able

00:02:02.000 --> 00:02:08.419
to port our older input component based
input methods fairly easily and successfully.

00:02:08.419 --> 00:02:12.659
So back to the slides please.

00:02:14.150 --> 00:02:16.510
So developing input methods.

00:02:16.509 --> 00:02:22.859
First of all, the big change to understand is that
input methods are now just Cocoa applications.

00:02:22.860 --> 00:02:30.760
They're Cocoa applications that link with the input
method kit framework, which as I said is new to Leopard.

00:02:30.759 --> 00:02:38.419
And what the Input Method Kit does, the simplest way
to look at it is that it provides the boilerplate code

00:02:38.419 --> 00:02:44.369
that in the past if you read an input method, all
developers doing input methods basically just had

00:02:44.370 --> 00:02:46.050
to duplicate this code.

00:02:46.050 --> 00:02:53.510
So as much as possible we've tried to provide methods
that will take care of the common things you need to do.

00:02:55.020 --> 00:03:03.100
So it's a foundation based API, that means
it links below Cocoa, links below HI toolbox.

00:03:03.099 --> 00:03:10.949
Its goal, primary goal is make it easier to develop input
methods to focus on letting you think about text conversion,

00:03:10.949 --> 00:03:16.619
and not logistics or putting you know, code formation.

00:03:16.620 --> 00:03:20.080
So it's make it easier to develop import input methods.

00:03:20.080 --> 00:03:25.630
We think that's illustrated by the fact that
in the examples you have a lot less code.

00:03:25.629 --> 00:03:32.250
The old sample had twenty eight files, while
the new, the simpler new sample has eight.

00:03:32.250 --> 00:03:37.930
And I said they're applications, but there's one thing
to understand, they're primarily background applications.

00:03:37.930 --> 00:03:44.590
They're background applications with a little bit of user
interface, which is reflected in the text input menu,

00:03:44.590 --> 00:03:49.120
and then also in the candidate
window, if you use a candidate window.

00:03:49.120 --> 00:03:53.460
But because they're applications, background
application, that gives you the benefit

00:03:53.460 --> 00:03:58.040
of you have your own separate address
space, which has a lot of advantages.

00:03:58.039 --> 00:04:04.229
For one thing it means that you aren't required to
build a 64-bit version if you don't want to.

00:04:04.229 --> 00:04:10.179
If you needed to load in any running process,
you would have to have a four way FAT version.

00:04:10.180 --> 00:04:13.210
And this way you can build your 30 bit.

00:04:13.210 --> 00:04:15.469
If you need 64, you can use 64.

00:04:15.469 --> 00:04:18.620
It doesn't matter, you're in your own address space.

00:04:18.620 --> 00:04:23.930
And it's made some parts of debugging a lot easier to do.

00:04:23.930 --> 00:04:29.079
And we'll have a slide about that near the end.

00:04:29.079 --> 00:04:31.550
So what's the division of labor?

00:04:31.550 --> 00:04:37.860
The kit provides communication with your client
application, it provides, if you want to use it,

00:04:37.860 --> 00:04:45.030
a basic candidate window support, and
it manages your modes for the most part,

00:04:45.029 --> 00:04:49.639
handling a selection by a user and
informing you about a mode change.

00:04:49.639 --> 00:04:55.419
And then finally it offers semi
automatic preference window display.

00:04:55.420 --> 00:04:58.050
And what do you have to provide?

00:04:58.050 --> 00:05:06.790
You have to provide input text conversion, obviously,
which is done through key bindings, and or event handling.

00:05:06.790 --> 00:05:15.390
By that I mean you need to look at the events and
do some parsing, figure out how to convert it.

00:05:15.389 --> 00:05:22.659
And then you optionally can provide a menu with
commands, mode specific commands or preferences.

00:05:22.660 --> 00:05:29.470
And then you have to tell the system
about yourself and your info P list.

00:05:29.470 --> 00:05:33.060
So now, so this is a hands on session.

00:05:33.060 --> 00:05:37.319
There's going to be five stages, we're going to
start by creating a do nothing input method.

00:05:37.319 --> 00:05:44.349
That's an input method that simply runs, gets
input, and actually logs input to console.

00:05:44.350 --> 00:05:47.900
It doesn't convert or do anything like that.

00:05:47.899 --> 00:05:49.839
Then we'll add a simple conversion engine.

00:05:49.839 --> 00:05:55.039
We won't focus much on that, cause again,
that's where you provide the expertise.

00:05:55.040 --> 00:06:01.800
And we'll provide mode support,
candidate window, and preferences.

00:06:01.800 --> 00:06:09.560
So, if you could have stage zero of number
input open if you're going to follow along.

00:06:09.560 --> 00:06:13.100
This is, we're going to create a do nothing input method.

00:06:13.100 --> 00:06:17.750
Before we look at the code, I just want to
talk about, if you're creating, you know,

00:06:17.750 --> 00:06:20.860
this is real standard Xcode stuff right here.

00:06:20.860 --> 00:06:26.189
If you're going to create an application, you make a
new project, and when the assistant window comes up,

00:06:26.189 --> 00:06:29.399
in this case you want to pick Cocoa application.

00:06:29.399 --> 00:06:33.509
You name it, ours are called number
input, and then you store it somewhere.

00:06:33.509 --> 00:06:37.480
The suggestion here is users share, but of
course you can put it anywhere you want.

00:06:37.480 --> 00:06:40.439
And of course you name it whatever you want.

00:06:40.439 --> 00:06:45.550
But you, naturally if you were starting from
absolute zero, that's what you'd need to do.

00:06:45.550 --> 00:06:52.689
So if we could switch over to the demo
machine, we're going to start looking at code now.

00:06:52.689 --> 00:06:58.430
First thing you want to do is modify the
default main that you get from Xcode.

00:06:58.430 --> 00:07:02.180
Line fifty one there we're going to
import the header for Input Method Kit.

00:07:02.180 --> 00:07:07.560
It's its own framework, you need to import that one header.

00:07:07.560 --> 00:07:12.149
Then you're going to need to define a connection name.

00:07:12.149 --> 00:07:20.139
It's not required, but we suggest
that you use a pseudo DNS string here.

00:07:20.139 --> 00:07:27.750
It's pseudo because this string is used
with NS connection, the foundation class.

00:07:27.750 --> 00:07:31.120
And those strings aren't allowed to have spaces or periods.

00:07:31.120 --> 00:07:38.300
So we've substituted underbars for the periods, so ours
is called com apple input method number input connection.

00:07:38.300 --> 00:07:40.150
That's on line fifty five in the code.

00:07:40.149 --> 00:07:49.459
And so then down in the main function, or actually
right before it, we're going to define a global variable,

00:07:49.459 --> 00:07:53.979
which is our Input Method Kit server, IMK server there.

00:07:53.980 --> 00:07:57.680
We always need to allocate one of these in main,

00:07:57.680 --> 00:08:04.009
and that allocation takes place there
on line sixty seven through sixty eight.

00:08:04.009 --> 00:08:10.060
Notice that the parameters are the bundle
identifier, which of course identifies you.

00:08:10.060 --> 00:08:17.949
And then the connection name, which is going to be the way
clients find your input method and connect with you.

00:08:17.949 --> 00:08:20.709
Once you've done that, we've loaded
the nib explicitly

00:08:20.709 --> 00:08:26.250
because it's a background application,
and then finally we start the run loop.

00:08:26.250 --> 00:08:33.490
Unless you add candidates, which we will later, this is
going to be the last time you ever look at your main file.

00:08:35.600 --> 00:08:43.009
Okay, so can we come back to the slides, talk
a little bit about the input controller class.

00:08:43.009 --> 00:08:48.450
So you create a controller class, and that
class should inherit from IMK input controller,

00:08:48.450 --> 00:08:53.580
which is define, is one of the headers in the kit.

00:08:53.580 --> 00:08:59.440
Whenever an input session starts on the client
side, the IM kit will allocate an instance

00:08:59.440 --> 00:09:03.690
of your controller class, and hook it up with that session.

00:09:03.690 --> 00:09:07.500
That means you don't have to worry about managing sessions.

00:09:07.500 --> 00:09:13.580
When you get, a message is sent to your
controller, you know it is for a specific session.

00:09:13.580 --> 00:09:19.450
But because you have one controller per input
session, that means it needs to be fairly lightweight.

00:09:19.450 --> 00:09:24.690
I mean you won't have millions of them probably, but
there'll be a number, so you don't really want to do things

00:09:24.690 --> 00:09:29.620
like carry along big dictionaries with
every controller or anything like that.

00:09:29.620 --> 00:09:33.560
Then your controller's also responsible
for managing buffers.

00:09:33.559 --> 00:09:38.889
In the example here we have a composition buffer
where we put converted text after we convert it,

00:09:38.889 --> 00:09:45.990
and then we have the original buffer, which holds the
text that the user has entered in an input session.

00:09:45.990 --> 00:09:50.029
Your controller obviously is responsible
for receiving input.

00:09:50.029 --> 00:09:52.480
We'll talk about that in fair depth.

00:09:52.480 --> 00:09:55.970
There's a number of options for how you want to do that.

00:09:55.970 --> 00:10:01.660
And then of course you need to be able to
return, compose, converted text to the client.

00:10:01.659 --> 00:10:15.730
So let's, we'll go to the code now, we're going to look at
our controller class, back to the demo machine please.

00:10:15.730 --> 00:10:22.389
Okay. So we look at number input
controller dot age, it's pretty simple.

00:10:22.389 --> 00:10:28.789
It just inherits from IMK input controller there,
and then doesn't do anything else at this point.

00:10:28.789 --> 00:10:37.990
And then moving over to the dot M file, we see that we've
selected one of three possible input methods, it's called,

00:10:37.990 --> 00:10:43.940
there on line seventy seven, it's what I
like to characterize as the simplest one.

00:10:43.940 --> 00:10:53.080
It just takes a string, which is the Unicode, the
Unicode string that results from typing a given key.

00:10:56.480 --> 00:11:00.720
So let's talk a little bit about
the options that you have for input.

00:11:00.720 --> 00:11:04.050
I need to switch back to the slides here.

00:11:04.049 --> 00:11:06.289
So there's three ways to do this.

00:11:06.289 --> 00:11:13.419
There's this first way which we just saw, which is
the IM kit has taken the event, completely parsed it,

00:11:13.419 --> 00:11:18.659
pulled the Unicode out, and passes you the Unicode,

00:11:18.659 --> 00:11:25.169
and as well the object which represents
the input session on the client side.

00:11:25.169 --> 00:11:28.919
If you want a little bit more information
about the actual key down,

00:11:28.919 --> 00:11:33.219
we have the next one which is input text key modifiers.

00:11:33.220 --> 00:11:39.980
That includes the string, but it also includes
the key that caused that string to be generated,

00:11:39.980 --> 00:11:45.370
and the state of the modifier keys when
you, when the user pressed that key.

00:11:45.370 --> 00:11:49.759
And finally, and this is commonly what you would
use if you're porting an older input method,

00:11:49.759 --> 00:11:55.819
cause it more closely matches the way events were handed
off to you then, you can just use straight events,

00:11:55.820 --> 00:11:59.450
do all the parsing yourself, pull the event apart yourself.

00:11:59.450 --> 00:12:02.690
And that method is called handle event.

00:12:02.690 --> 00:12:10.210
And as in all these you get a client,
which is an ID, and that will, as I said,

00:12:10.210 --> 00:12:14.320
represent the input session on the client side.

00:12:14.320 --> 00:12:18.390
In our example we're going to use the first type.

00:12:18.389 --> 00:12:24.419
Now one thing about using this simpler one, the
input text with just a string, is that we also here,

00:12:24.419 --> 00:12:29.449
because you don't have access to the key
code there, well we do this key binding,

00:12:29.450 --> 00:12:33.160
which is modeled after the way NS responder works.

00:12:33.159 --> 00:12:39.929
We support all the methods that are in NS
responder, like insert new line, delete backwards.

00:12:39.929 --> 00:12:48.809
So if you, and then we also often, excuse me, offer
custom key binding, which you provide a dictionary

00:12:48.809 --> 00:12:54.989
which maps keys to a given action method.

00:12:54.990 --> 00:13:01.440
And again, this is only, this is, you only need to, you
take this approach if you are using the first method

00:13:01.440 --> 00:13:08.170
for receiving input, which is input text client.

00:13:08.169 --> 00:13:16.539
In conjunction with that, what will happen is you'll
always get a message to did command by selector.

00:13:16.539 --> 00:13:21.599
Now if you're familiar with NS responder, you know
they have a method called do command by selector.

00:13:21.600 --> 00:13:26.920
We have did command by selector because as an
input method you always need to return whether

00:13:26.919 --> 00:13:30.449
or not you've eaten the event, or handled the input.

00:13:30.450 --> 00:13:34.379
You return yes if you had, and no if you haven't.

00:13:34.379 --> 00:13:38.500
Now you may say to yourself well wait a
minute, I implemented an action method

00:13:38.500 --> 00:13:41.600
for insert new line, and I just handled that.

00:13:41.600 --> 00:13:46.870
But when you're doing an input method, a lot of
times it depends on the state of your input buffer.

00:13:46.870 --> 00:13:53.850
So for example, if the user presses return key, did command
by selector is called, you want to say well hold on,

00:13:53.850 --> 00:13:56.139
am I actually doing an input session now.

00:13:56.139 --> 00:14:02.659
If I am, well I want to do something, I'll go ahead and
let my method, my action method insert new line be called.

00:14:02.659 --> 00:14:07.429
But if I'm not handling an input session, I
want to just say no, I didn't handle that,

00:14:07.429 --> 00:14:13.870
and let the client application have that return key back.

00:14:13.870 --> 00:14:16.289
Okay. So moving again to the code.

00:14:16.289 --> 00:14:26.179
What we're going to look at now is the info P list, the extra
information you need to add to describe your input method.

00:14:26.179 --> 00:14:27.909
Could we have the demo machine please?

00:14:27.909 --> 00:14:35.019
Okay. So we're looking now at the info P
list, it's you know, generic application one.

00:14:35.019 --> 00:14:39.789
The first thing you need to do is in your
bundle identifier there on line twelve,

00:14:39.789 --> 00:14:45.099
you need to say that you're an input method,
so that comes after your company name.

00:14:45.100 --> 00:14:47.870
And then you name your product.

00:14:47.870 --> 00:14:50.810
You need to use this key LS background only

00:14:50.809 --> 00:14:58.009
that states you're primarily a background
application that has a string value of one.

00:14:58.009 --> 00:15:02.009
You again need to have your public connection name.

00:15:02.009 --> 00:15:05.819
Now probably you're thinking to
yourself why do I have to have it twice?

00:15:05.820 --> 00:15:07.100
You actually don't.

00:15:07.100 --> 00:15:11.970
It's certainly, if you can just define
it here and then load it in main,

00:15:11.970 --> 00:15:16.040
again in our example we had a string
constant just because it's easier to show.

00:15:16.039 --> 00:15:19.379
But this is the important place that you have to have it,

00:15:19.379 --> 00:15:24.049
because this is where the kit will
look to find the connection name.

00:15:24.049 --> 00:15:32.339
You need to define the name of your
input class, that is on line forty seven.

00:15:32.340 --> 00:15:39.220
So the kit will look there and find the name of
the class, and use that to instantiate the class.

00:15:39.220 --> 00:15:46.500
You need, absolute, you need a icon for display
in the preferences panel and the text input menu.

00:15:46.500 --> 00:15:49.620
And then finally you need the name of your primary language.

00:15:49.620 --> 00:15:54.649
This information is there for the
text input sources manager,

00:15:54.649 --> 00:15:59.439
which was talked about in a prior international session.

00:15:59.440 --> 00:16:06.550
So for the do nothing input method since we
don't have modes, that's all we're going to add.

00:16:06.549 --> 00:16:09.949
And so if we can, oh we're on the code, sorry.

00:16:09.950 --> 00:16:15.090
So the next thing you want to do obviously is you
want to build the input method and install it.

00:16:15.090 --> 00:16:20.470
So we can go ahead and just build it,
that's done very quickly on this machine.

00:16:20.470 --> 00:16:24.730
And you have several options where to put it, system input,

00:16:24.730 --> 00:16:30.440
Apple input methods go in system
slash library slash input methods.

00:16:30.440 --> 00:16:36.670
You can put it in library slash input
methods, or tilde library slash input methods.

00:16:36.669 --> 00:16:41.399
Now you probably note that input
methods is a new directory on Leopard.

00:16:41.399 --> 00:16:47.970
You don't put your input method in components the way
you used to, there si now a directory named for you.

00:16:47.970 --> 00:16:53.550
If you happen to be running an older input
method, you can go to terminal and kill it.

00:16:53.549 --> 00:16:59.299
You need to kill it twice, because there's some
notifications that go around, and it'll get,

00:16:59.299 --> 00:17:01.659
once it does, the first time it gets restarted.

00:17:01.659 --> 00:17:04.869
But two kills usually take care of it.

00:17:04.869 --> 00:17:11.089
And so then we can open up text edit and see what we've got.

00:17:11.089 --> 00:17:15.559
First of all on the input menu, you see there it is.

00:17:15.559 --> 00:17:20.980
You can turn it on, shows up in the text input menu.

00:17:20.980 --> 00:17:26.789
And this one doesn't do anything,
it's a do nothing input menu.

00:17:26.789 --> 00:17:30.940
We could look at console if that's very available.

00:17:30.940 --> 00:17:39.690
We'll take a little time and look at it, in
applications, and we should see some output there.

00:17:43.269 --> 00:17:45.500
All right, there's a G in there.

00:17:45.500 --> 00:17:50.119
So we log in that output, and so
that's the do nothing input method.

00:17:50.119 --> 00:17:52.250
That was pretty painless, went pretty fast.

00:17:52.250 --> 00:18:00.930
So next we'll move to stage one, we'll add
some real input and a conversion engine.

00:18:00.930 --> 00:18:03.470
So could I have the slides again?

00:18:03.470 --> 00:18:06.950
Okay, so the conversion engine.

00:18:06.950 --> 00:18:11.120
Again, this is your expertise here,
so our sample will be very simple,

00:18:11.119 --> 00:18:14.589
and we won't get into a lot of detail about that.

00:18:14.589 --> 00:18:17.859
But basically what it does, it takes input and runs it

00:18:17.859 --> 00:18:21.029
through the number conversion classes
that the system provides.

00:18:21.029 --> 00:18:30.069
An interesting thing about the example is it
demonstrates one approach for managing a global resource.

00:18:30.069 --> 00:18:33.419
In the example the conversion engine is a global resource.

00:18:33.420 --> 00:18:41.400
Each controller doesn't carry around its own conversion
engine, instead it will get the global conversion.

00:18:41.400 --> 00:18:48.170
And we manage that by having an application delegate,
which has an accessor to get the conversion engine.

00:18:48.170 --> 00:18:55.450
For that reason, we add number input
application delegate dot H and M, and as I said,

00:18:55.450 --> 00:18:59.069
they manage our global, or manage shared resources.

00:18:59.069 --> 00:19:06.569
In this example that will be the conversion
menu, conversion engine, and then later the menu.

00:19:06.569 --> 00:19:13.689
So if we could look at the code, or look
at the demo machine real quick please

00:19:13.690 --> 00:19:24.840
And so we have the conversion engine right here,
we, one thing to note, so it's an IB outlet.

00:19:24.839 --> 00:19:31.519
The reason for that is that we actually, we told the
interface builder to instantiate our conversion engine

00:19:31.519 --> 00:19:36.069
for us, so we don't actually have any code
that instantiates it, we just wrote it,

00:19:36.069 --> 00:19:41.159
told interface builder about that
class, and said instantiate this.

00:19:41.160 --> 00:19:47.940
So that will be allocated for us when
we open, and we have one accessor here.

00:19:47.940 --> 00:19:50.620
We also have a method to find out the mode.

00:19:50.619 --> 00:19:50.769
All right.

00:19:50.769 --> 00:20:01.900
Okay, we have a method to find out the mode,
and right now, must be the next one, yeah.

00:20:01.900 --> 00:20:08.720
Right now the mode is just numbered decimal, we
haven't added any other but the simplest mode.

00:20:08.720 --> 00:20:16.809
So then we'll go back to the number input controller and
we'll take a look at what we've done to support input.

00:20:16.809 --> 00:20:24.339
In our input method text method there we've added some
scanning, we scan the input with NS scanner to see

00:20:24.339 --> 00:20:30.949
if it's part of a decimal number, and that happens on line
eighty six through eighty nine if you're following along.

00:20:30.950 --> 00:20:38.470
And if it is part of a decimal number we append it to
our original buffer, that happens on line ninety three.

00:20:38.470 --> 00:20:44.259
If we append it we'll then inform the user that we're
running an input session, an active input session,

00:20:44.259 --> 00:20:52.089
or inform the client by calling one of the
communication protocol methods, which we'll get into.

00:20:52.089 --> 00:20:57.639
And if it's not part of a decimal
number we may possibly have

00:20:57.640 --> 00:21:04.120
to convert our other input, and then we send that along.

00:21:04.119 --> 00:21:07.489
And we want to take a look here at the
key binding support I'd talked about.

00:21:07.490 --> 00:21:12.259
On line one seventy we have our did command by selector.

00:21:12.259 --> 00:21:16.140
You can see there on one eighty three,
I'm looking at the state of the buffer

00:21:16.140 --> 00:21:18.040
to decide if I really want to handle this.

00:21:18.039 --> 00:21:27.299
And if I do, I call either one or two of my action
methods, which I can find out by looking at the selector.

00:21:27.299 --> 00:21:37.329
We have insert new line there that will commit
the composition, and we have delete backward.

00:21:37.329 --> 00:21:45.210
Delete the backward user's range of composed character
sequences to figure out backspacing the correct Unicode way.

00:21:45.210 --> 00:21:52.930
And if we're backspacing, we want to tell the client
that the input session is still active, but it's changed.

00:21:52.930 --> 00:21:55.630
So we use a method there called set mark text.

00:21:55.630 --> 00:22:01.870
And so we pass that message to the client, the sender.

00:22:01.869 --> 00:22:09.189
Okay, we added buffer management as well in
this file, that's on line one twenty six.

00:22:09.190 --> 00:22:12.640
One thirty five, one twenty six is the accessor.

00:22:12.640 --> 00:22:15.290
It lazily allocates a buffer.

00:22:15.289 --> 00:22:23.589
One thirty five is where you can change
the buffer and accessor and setter.

00:22:23.589 --> 00:22:28.689
And then for our original text, on line
one forty three we have an accessor.

00:22:28.690 --> 00:22:31.299
We have a setter on one sixty three.

00:22:31.299 --> 00:22:33.879
But we also have an append on one fifty two.

00:22:33.880 --> 00:22:41.110
And if you look on one fifty two there you
see the set mark text method being used again.

00:22:41.109 --> 00:22:50.029
So let's talk a little bit in depth
about sending text to a client.

00:22:50.029 --> 00:22:53.769
You've seen this sender parameter, this
gets passed into your input method.

00:22:53.769 --> 00:22:56.990
And I talked about that represents an input session.

00:22:56.990 --> 00:23:05.440
And that object will always adhere to a group of
protocols that are defined in IMK input session dot age.

00:23:05.440 --> 00:23:08.330
Now that header is actually part of HI toolbox.

00:23:08.329 --> 00:23:16.750
The reason it's there in HI toolbox is because parts
of HI toolbox, in particular the text services manager,

00:23:16.750 --> 00:23:23.349
need to know about those protocols, since
they're defining some client objects.

00:23:23.349 --> 00:23:29.629
And also they don't want to link with the input
method kit, because that is at a lower level.

00:23:29.630 --> 00:23:34.270
So that, you, that you pull in from the HI toolbox headers.

00:23:34.269 --> 00:23:41.129
And there's two important methods, there's set
mark text selection rage replacement range.

00:23:41.130 --> 00:23:45.540
You call that to update or begin an active input session.

00:23:45.539 --> 00:23:52.659
It's obviously, it says set mark so you'll
have the classic underlines, gray or black.

00:23:52.660 --> 00:24:01.330
And we see it here in the code, it's called when we append
new text, on line one fifty nine when we handle a backspace,

00:24:01.329 --> 00:24:07.299
on two twenty two, and when we hit
our special trigger conversion key,

00:24:07.299 --> 00:24:10.480
which is space in our example, and
that's on line two fifty eight.

00:24:10.480 --> 00:24:19.360
You see it takes a selection range, which tells
how to do selection, and it takes a replacement,

00:24:19.359 --> 00:24:28.709
and so the selection range is local to the actual input
session, so zero is the beginning of the input session.

00:24:28.710 --> 00:24:36.100
Then it takes replacement range, which is, references
the whole document and tells where to put it.

00:24:36.099 --> 00:24:44.079
If you just want to use the current insertion point, which
is what we do here, you make a range of NS not found.

00:24:44.079 --> 00:24:49.919
And then when you're ready to complete a session,
when you're done converting and you just want to pass

00:24:49.920 --> 00:24:56.380
that text back to the client and say all right, put
this in your document, it's been converted, that,

00:24:56.380 --> 00:25:03.610
you use a method called insert text, which only takes
a replacement range which tells where to place it.

00:25:03.609 --> 00:25:17.349
And one thing to note is both of these methods can
take either an attributed string or a regular string.

00:25:17.349 --> 00:25:22.730
And so that's stage one, we added input and conversion.

00:25:22.730 --> 00:25:29.940
We want to build that now, and install it, kill the old one.

00:25:29.940 --> 00:25:33.990
These, you'll go through these steps several times.

00:25:33.990 --> 00:25:41.000
So we put it there until the library
input methods, go to terminal maybe.

00:25:41.000 --> 00:25:49.160
Did you kill the old one?

00:25:52.950 --> 00:25:55.230
Yeah. All right.

00:25:55.230 --> 00:26:01.970
You just kill all number input,
kill it twice, try killing it again.

00:26:01.970 --> 00:26:05.680
I don't think, there we go.

00:26:05.680 --> 00:26:11.539
So now we have conversion going on,
a very simple decimal conversion.

00:26:11.539 --> 00:26:16.500
It does things like strip zeros,
round up, pretty simple thing.

00:26:16.500 --> 00:26:20.549
But it was pretty quick to write there.

00:26:20.549 --> 00:26:22.899
Now we move on to stage two where we're going to add modes.

00:26:22.900 --> 00:26:30.810
So if you're following along, you want to find
number input two and get that open in Xcode.

00:26:30.809 --> 00:26:35.490
And could I have the slides again.

00:26:35.490 --> 00:26:36.809
So what are modes?

00:26:36.809 --> 00:26:40.470
Probably you know, but briefly a mode
means that you have one input method

00:26:40.470 --> 00:26:43.400
that converts text in a number of different ways.

00:26:43.400 --> 00:26:48.990
A classic example is a Japanese input method,
although really all the Chinese do it as well.

00:26:48.990 --> 00:26:53.480
But in Japanese you have the well
known modes Hiragana, Katakana,

00:26:53.480 --> 00:26:57.759
and Romaji, along with a number of others.

00:26:57.759 --> 00:27:01.230
As I said, the kit handles basic mode switching for you.

00:27:01.230 --> 00:27:06.710
When the mode switches, the kit will
grab that mode and inform you of it

00:27:06.710 --> 00:27:12.519
by passing you a message, which is set value for tag client.

00:27:12.519 --> 00:27:17.299
And what you really need, the important thing you need to
do, which is actually what you've always had to do ever

00:27:17.299 --> 00:27:27.460
since we've supported modes, is add a component
input mode dict, D I C T, to your info P list.

00:27:27.460 --> 00:27:29.579
And you do that exactly the same way.

00:27:29.579 --> 00:27:32.730
There is one new thing which we'll talk about.

00:27:32.730 --> 00:27:34.740
The details of how to do that are all covered

00:27:34.740 --> 00:27:40.180
in technical note twenty one twenty
eight, which has been out for a while.

00:27:40.180 --> 00:27:46.700
And if we could switch back to the demo machine, we'll
take a look at what we've added to the P list for this one,

00:27:46.700 --> 00:27:53.160
that's the component input mode dict is on
line sixty four through one eighty seven.

00:27:53.160 --> 00:27:54.730
And what's it got in it?

00:27:54.730 --> 00:28:03.890
It's got menu icons, it's got whether or not a mode
is on by default, or whether it is visible by default.

00:28:03.890 --> 00:28:13.440
You can optionally provide a key, a modifier key so the
user doesn't have to pull down the menu to select the mode.

00:28:13.440 --> 00:28:17.440
And all this information is detailed in the technote.

00:28:17.440 --> 00:28:25.610
One thing to look at which is new I think is that first key
you see there in this example, it's on line seventy four.

00:28:25.609 --> 00:28:29.169
That's the TIS input source ID.

00:28:29.170 --> 00:28:34.259
That identifies the mode to the text input sources manager.

00:28:34.259 --> 00:28:40.680
Now if you don't supply that, text input sources
will generate one that it hopes to be unique,

00:28:40.680 --> 00:28:45.850
but it's really best to just identify your mode right there.

00:28:45.849 --> 00:28:52.379
Okay, so this information is primarily
used to display the modes

00:28:52.380 --> 00:28:59.710
in the international preferences
panel, and the text input menu.

00:28:59.710 --> 00:29:07.059
You also need to provide an array of keys in the info P
list, that's on line one eighty eight is where it starts.

00:29:07.059 --> 00:29:16.519
These keys describe the order that the mode should be
displayed, and also provide links to localized strings.

00:29:16.519 --> 00:29:23.069
So it provides the order to show the strings, and then
it gives a key to find the correctly localized string.

00:29:23.069 --> 00:29:29.779
Our examples only have English, and that's done in
the info P list strings file, pretty simple there.

00:29:29.779 --> 00:29:36.129
On line seven you see we have decimal
currency, percent, scientific, and spell out.

00:29:37.359 --> 00:29:43.129
Okay. Then going back to the code, we
add our support for set value for tag.

00:29:43.130 --> 00:29:50.860
We override this method, and all this does is take the
mode string and map it to an NS number, format, or style.

00:29:50.859 --> 00:29:57.949
And then there at the end it tells the
conversion engine what the new mode is.

00:29:57.950 --> 00:30:00.590
So that's it for adding modes.

00:30:00.589 --> 00:30:02.849
We'll build this now.

00:30:02.849 --> 00:30:11.309
Now the one thing about this is we've installed the input
method several times without having to log out or log in.

00:30:11.309 --> 00:30:17.659
When we install this one with the mode changes,
because we're really changing the way it displays

00:30:17.660 --> 00:30:24.950
in the preferences panel, and the text input
method, we're going to need to log out and log in.

00:30:24.950 --> 00:30:30.819
There'll probably be a very simple tool available to
just do this change to make your debugging life easier.

00:30:30.819 --> 00:30:33.589
But we don't have it here now.

00:30:33.589 --> 00:30:42.649
So we'll just quickly log out and log back in, and then
we can go to the preferences panel, let's take a look,

00:30:42.650 --> 00:30:46.340
see what we got, hopefully if we installed it right.

00:30:46.339 --> 00:30:48.769
Right. So there's our modes.

00:30:48.769 --> 00:30:57.529
And you can turn them on and off, and if we go to text
edit and look at the pull down, the text input menu,

00:30:57.529 --> 00:31:00.980
we see modes now, we don't see number nine any more.

00:31:00.980 --> 00:31:06.160
So now we've added modes, and you can,
so you can select spell out there,

00:31:06.160 --> 00:31:08.890
which is a nice new feature that comes in Leopard.

00:31:08.890 --> 00:31:12.350
These are, actually I think it comes in ten point four.

00:31:12.349 --> 00:31:17.089
So we've added modes very quickly.

00:31:17.089 --> 00:31:19.779
So stage three now, we're going to add a candidate window,

00:31:19.779 --> 00:31:24.329
we're going to use the candidate window
support that the IM kit provides.

00:31:24.329 --> 00:31:32.809
So you want to have number input
three, or two open for this in Xcode.

00:31:32.809 --> 00:31:38.740
And could I have the slides back.

00:31:38.740 --> 00:31:41.640
So there's several things you have to do.

00:31:41.640 --> 00:31:47.520
You have to allocate an instance of the IMK candidate's
class, that's the first thing you need to do.

00:31:47.519 --> 00:31:50.019
Then you need to write a method,
you need to override a method

00:31:50.019 --> 00:31:58.329
that actually supplies candidates NS attributed
string, it returns an array of strings.

00:31:58.329 --> 00:32:03.909
Then you need to provide a method to handle
candidate selection and a callback sort of method

00:32:03.910 --> 00:32:08.120
that handles candidate selection and the user browsing.

00:32:08.119 --> 00:32:16.649
For the user's final choice you'll be sent the candidate
selected message, which includes the string they chose.

00:32:16.650 --> 00:32:24.550
And as the user browses, as they browse along you'll get
candidate selected change, which again include the string

00:32:24.549 --> 00:32:29.409
that they just chose as they browsed up
and down or across the candidate window.

00:32:29.410 --> 00:32:34.390
And then if you have selectable
annotations, you can get, you would need this,

00:32:34.390 --> 00:32:39.259
to implement this method, which
is called annotation selected.

00:32:39.259 --> 00:32:46.089
That takes the annotation string, and then the candidate
string, the candidate string the annotation accompanies.

00:32:46.089 --> 00:32:52.099
The example here doesn't use that,
it only illustrates the first two.

00:32:52.099 --> 00:32:54.899
So back to the demo machine.

00:32:54.900 --> 00:32:56.850
And we'll look at what we do for this.

00:32:56.849 --> 00:33:04.769
We'll go back to main, despite my promises, and
declare a global variable there, IMK candidates.

00:33:04.769 --> 00:33:10.670
And then inside main we'll allocate that right there.

00:33:10.670 --> 00:33:15.950
And you'll see the parameters that need to be
passed are the server, which you allocated earlier,

00:33:15.950 --> 00:33:20.160
so you connect the server to a candidates object.

00:33:20.160 --> 00:33:23.070
And then the type of candidates panel it is.

00:33:23.069 --> 00:33:31.179
There's three types, there's a vertical scrolling type, a
horizontal what we call stepping, because it has a stepper

00:33:31.180 --> 00:33:36.990
to move up and down from the rows,
and then we have grid candidates.

00:33:36.990 --> 00:33:45.390
And then finally in our controller class on
line three oh six we have our candidates method.

00:33:45.390 --> 00:33:53.150
You can see it creates na array, then it takes the current
original buffer there, which is the text the user entered,

00:33:53.150 --> 00:33:59.870
runs it through each of the conversions we support, and
then stores the result of each conversion in that array,

00:33:59.869 --> 00:34:05.359
and then returns the array so it can be displayed.

00:34:05.359 --> 00:34:14.170
On line three twenty five we have the method for
when the user browses, candidate selection changed.

00:34:14.170 --> 00:34:20.650
You can see it's just a call to the method set
mark text to update the active input session.

00:34:20.650 --> 00:34:26.920
And we update something we use for backspacing.

00:34:26.920 --> 00:34:31.880
And then candidate selected for when the user
makes a final choice on line three thirty six.

00:34:31.880 --> 00:34:38.320
And in that case we say that's all done, the
user's finished, commit this composition.

00:34:38.320 --> 00:34:42.630
So that's it for candidate windows.

00:34:42.630 --> 00:34:47.250
We want to build that now and see what we got from that.

00:34:48.510 --> 00:34:53.890
Very quick build, move it into
tilde library input methods again,

00:34:53.889 --> 00:34:58.150
kill the old one a couple times till you're sure it's dead.

00:34:59.159 --> 00:35:11.119
And then back to text edit, pick a mode, do some typing,
hit the space twice, and there's the candidate window

00:35:11.119 --> 00:35:14.489
So that was quick, that was very quick.

00:35:14.489 --> 00:35:14.579
( applause )

00:35:14.579 --> 00:35:21.639
Thanks. I think in all my years of doing these WWDCs
that's the first time I've ever gotten any applause,

00:35:21.639 --> 00:35:23.059
so that's a major moment.

00:35:23.059 --> 00:35:24.009
( laughter )

00:35:24.010 --> 00:35:29.590
( applause )

00:35:29.590 --> 00:35:31.579
So, almost done now.

00:35:31.579 --> 00:35:35.239
We're going to have plenty of time for questions it looks like.

00:35:35.239 --> 00:35:41.179
What we're going to do now is add
preferences, a very simple preferences panel.

00:35:41.179 --> 00:35:42.329
Where am I?

00:35:42.329 --> 00:35:48.960
Okay, could I have the slide, or no, let
me, we'll stay on the code, I'm sorry.

00:35:48.960 --> 00:35:51.230
Let's stay on the demo machine.

00:35:51.230 --> 00:35:55.639
So for this you're going to do most of
your work inside interface builder.

00:35:55.639 --> 00:36:00.779
First thing you want to do is you
want to take your main menu dot NIB,

00:36:00.780 --> 00:36:05.670
the default NIB that you get when you create the project.

00:36:05.670 --> 00:36:12.650
You want to open that up in interface builder,
and you want to add a menu, a command menu.

00:36:12.650 --> 00:36:17.260
So we can do that here, main menu dot NIB.

00:36:18.940 --> 00:36:26.030
And you can see in interface builder we've got a little
menu there, and it just has one item, preferences.

00:36:26.030 --> 00:36:31.250
And then you want to go back to your code.

00:36:31.250 --> 00:36:40.050
You want to add an action menu, or an
action method to that item preferences.

00:36:40.050 --> 00:36:48.769
The action method that takes care of preferences as
actually defined in the default IMK input controller class.

00:36:48.769 --> 00:36:52.130
So all you need to do is just say,
you don't need to implement this,

00:36:52.130 --> 00:36:58.059
you just need to say that this preferences
item, it's actual method is show preferences.

00:36:58.059 --> 00:37:03.610
And we do it in the code and the
awake from NIB method there.

00:37:03.610 --> 00:37:09.090
And it's just the standard menu item, method set action.

00:37:09.090 --> 00:37:13.079
And we say the selector is show preferences.

00:37:13.079 --> 00:37:17.889
And the other thing you need to do is now that you
have a menu, you need to return it to the IM kit,

00:37:17.889 --> 00:37:23.579
who will then pass it over eventually
to the text input menu.

00:37:23.579 --> 00:37:32.299
And so what we've got here is we have, we've
overridden the method in IMK input controller menu.

00:37:32.300 --> 00:37:36.850
Remember I said that we're letting the
delegate manage our shared resources.

00:37:36.849 --> 00:37:46.179
We say delegate give me the menu you've got, and that's
returned to the input method, or IM Input Method Kit,

00:37:46.179 --> 00:37:51.559
which will work its way to TSM, and
then up into the text input menu.

00:37:51.559 --> 00:37:54.909
So that's your preferences menu.

00:37:54.909 --> 00:37:59.920
That was a lot of talking for very little thing to do.

00:37:59.920 --> 00:38:05.590
The next thing you do now, you make a separate
NIB, which has to be called preferences dot NIB

00:38:05.590 --> 00:38:09.650
You can see it there, lowercase preferences dot NIB.

00:38:09.650 --> 00:38:17.139
And that has a window, and it has a
controls, whatever kind of controls you want

00:38:17.139 --> 00:38:19.029
to do, it's all done in interface builder.

00:38:19.030 --> 00:38:21.420
We have a matrix of radio buttons.

00:38:21.420 --> 00:38:31.579
And then you use NS binding to bind to an NS user defaults
controller, which is that green object there behind it.

00:38:31.579 --> 00:38:42.130
We just added one of them, and we bind
the value of the matrix to values.

00:38:43.360 --> 00:38:48.930
Okay. So once you do that, you
do all that in interface builder.

00:38:48.929 --> 00:38:57.169
And NS user defaults controller, what that does
is it basically hooks up with NS user defaults,

00:38:57.170 --> 00:39:00.990
and automatically writes the values to NS user default.

00:39:00.989 --> 00:39:09.719
So you will need to add code to look at these or defaults,
which we do back in our code in the controller class

00:39:09.719 --> 00:39:20.839
on line two hundred and forty, which, okay, so you
can see there on, well it's actually two thirty nine.

00:39:20.840 --> 00:39:29.650
We call NS user defaults, standard user defaults,
and we get an integer for the key vertical candidate.

00:39:29.650 --> 00:39:36.130
And then if it's on, we use the single column
scrolling candidate, which you saw before.

00:39:36.130 --> 00:39:42.360
And if it's off, we switch over to our
step, single row stepping candidate.

00:39:42.360 --> 00:39:46.740
Then finally you have to tell us what your
default values are for your preferences.

00:39:46.739 --> 00:39:52.819
You do that in a P list, which again has
a required name, preferences dot P list.

00:39:52.820 --> 00:40:00.280
We define the key vertical candidate, and the integer,
the default value, which is vertical candidate is on.

00:40:00.280 --> 00:40:08.240
So at that point we're ready to
build this and see what we've got.

00:40:08.239 --> 00:40:20.209
So it's a standard thing, you get
pretty used to this as you work.

00:40:20.210 --> 00:40:29.579
Build, get rid of the old one, put in the new one,
kill the old one, and go see if everything's all right.

00:40:37.510 --> 00:40:43.640
Turn it on there, go up to there, pick
one of those, let's see what we got.

00:40:43.639 --> 00:40:49.519
So there, all right, so we have a
preferences item now in the text input menu.

00:40:49.519 --> 00:40:57.110
We can select that, change to horizontal if
we want, you can leave it open, or close it.

00:40:57.110 --> 00:40:59.130
It's a floating utility window.

00:40:59.130 --> 00:41:05.210
And type, see we've changed to a horizontal
stepper there, rather than the vertical.

00:41:05.210 --> 00:41:11.380
We can put that away, and enter that text there.

00:41:11.380 --> 00:41:13.960
I've typed some new text.

00:41:13.960 --> 00:41:16.070
And go back to the vertical.

00:41:16.070 --> 00:41:18.840
So we added preferences, pretty straight forward.

00:41:18.840 --> 00:41:25.329
You can see in the Korean input method and the Chinese
input methods, they use exactly the same approach,

00:41:25.329 --> 00:41:30.460
and their preference panels are
a good bit more sophisticated.

00:41:30.460 --> 00:41:33.679
So it's not just limited.

00:41:33.679 --> 00:41:42.259
So see, they have a tabs and popups,
and more buttons and things like that.

00:41:42.260 --> 00:41:43.480
So it's certainly not limiting.

00:41:43.480 --> 00:41:45.449
Our, the example is very simple.

00:41:45.449 --> 00:41:50.189
But they basically did exactly what we just did here.

00:41:50.190 --> 00:41:54.380
Okay. So that's, so we've built our example, five steps.

00:41:54.380 --> 00:42:02.849
First do nothing, then add input, then we added
modes, conversion window, and preferences.

00:42:02.849 --> 00:42:06.829
So we've got a pretty full featured
input method as the final result.

00:42:06.829 --> 00:42:11.190
And that's what the kit offers.

00:42:11.190 --> 00:42:16.440
So I said I'd talk a little bit about
debugging, could I have the slides back.

00:42:18.550 --> 00:42:20.810
So debugging I think is a lot easier.

00:42:20.809 --> 00:42:23.739
It's easier because you're in your own separate process.

00:42:23.739 --> 00:42:30.929
Cause you're in your own process, it's very easy to
just take GDB and attach to your process and debug,

00:42:30.929 --> 00:42:33.849
just like you would any other application.

00:42:33.849 --> 00:42:40.960
You can actually do a thing where you can
start your application, your input method,

00:42:40.960 --> 00:42:47.429
without selecting it from the text input menu because
it's running, and when you did go and select it,

00:42:47.429 --> 00:42:50.789
it would be, the running version would be you.

00:42:50.789 --> 00:42:59.309
So it's very easy to do things like start it up from
terminal to log output and see things like that.

00:42:59.309 --> 00:43:05.259
And as you've seen throughout this talk, it's easy
to kill it, get the old one out, and restart it.

00:43:05.260 --> 00:43:09.400
In the old days you'd have to put your
component in, launch another application,

00:43:09.400 --> 00:43:13.950
get it loaded inside that application's
process, and then start to debug.

00:43:13.949 --> 00:43:18.480
Now you can just focus on your
application, which is the input method.

00:43:18.480 --> 00:43:24.730
The bad news about this is that if you're going to be, if
you're using GDB, you need to use two machine debugging.

00:43:24.730 --> 00:43:30.289
And that's because if you're using GDB on a
single machine, you're debugging an input method

00:43:30.289 --> 00:43:36.019
which you'd also be doing input into
GDB, and things get a little scary,

00:43:36.019 --> 00:43:39.980
or don't work if you're doing that kind of thing.

00:43:39.980 --> 00:43:43.099
So hopefully you're familiar with
what I mean by two machine debugging.

00:43:43.099 --> 00:43:50.409
It's, my own case, if I debug anything, I usually
go that way, unless I'm really in a hurry.

00:43:50.409 --> 00:43:53.359
So, that's the talk.

00:43:53.360 --> 00:43:57.360
If there's any questions, please ask them.

00:43:57.360 --> 00:44:04.809
The other thing about this which is convenient is that
immediately after this talk we have an input method

00:44:04.809 --> 00:44:10.059
and internationalization lab, lab
D, and that's at 10:30.

00:44:10.059 --> 00:44:17.190
And there'll be engineers to answer any questions on the
new methods that we talked about earlier in the week.

00:44:17.190 --> 00:44:20.470
We'll be there to talk about input methods.

00:44:20.469 --> 00:44:23.689
And then there's the technical note I
mentioned, which you'll want to be familiar

00:44:23.690 --> 00:44:29.980
with if you haven't created component
input mode, and the URL is there.