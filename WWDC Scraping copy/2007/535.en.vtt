WEBVTT

00:00:15.609 --> 00:00:19.859
>> Welcome to bring your job applications
to Mac OS X Leopard.

00:00:19.859 --> 00:00:25.189
I'm Matt Drantz and the sharing technology's
evangelists cover a bunch of technologies on Mac OS X

00:00:25.190 --> 00:00:31.510
but Java is among them and some of you
might know me as Java DTS over the years.

00:00:31.510 --> 00:00:34.850
So I've got a long and storied history with Java

00:00:34.850 --> 00:00:39.320
on Mac OS X going all the way back to
10.0, actually going back to classic.

00:00:39.320 --> 00:00:43.280
So this is still a topic that's near and dear to my heart.

00:00:43.280 --> 00:00:46.679
And no there is no caring technology's evangelists.

00:00:46.679 --> 00:00:54.019
This is the second step in the Java world
tour that we're giving you this week at WWDC.

00:00:54.020 --> 00:01:00.420
This morning you heard Tom give you kind of the ten
thousand foot view of what we're doing with Java on the Mac

00:01:00.420 --> 00:01:03.950
and what's going on right now,
what's coming in Leopard and beyond.

00:01:03.950 --> 00:01:12.400
For the next hour we're going to talk about the basic
fundamental things that you need to know if you're coming

00:01:12.400 --> 00:01:16.520
to the Mac, if you're just starting
to look at Java on the Mac,

00:01:16.519 --> 00:01:20.810
and even if you're somebody who's
already working with Java on the Mac.

00:01:20.810 --> 00:01:25.799
You know, it's still a useful review for the things
that you really need to just kind of have wired

00:01:25.799 --> 00:01:28.239
in your brain for you to do your daily work.

00:01:28.239 --> 00:01:32.929
And tomorrow of course we're going to have all
the stuff that allows you to go the extra mile

00:01:32.930 --> 00:01:37.320
and do some really special things kind of
like what you saw in this morning's demos.

00:01:38.909 --> 00:01:47.229
So if nothing else, if you fall asleep, if you walk out
early, any of the above, what I really want you guys

00:01:47.230 --> 00:01:52.460
to take home is that Mac OS X really is a great
platform for you to do your job of development on.

00:01:52.459 --> 00:01:57.719
Whether you're a cross platform developer or
somebody who's got newer existing work that you need

00:01:57.719 --> 00:02:00.719
to maintain compatibility in and portability with.

00:02:00.719 --> 00:02:04.200
Maybe you've just got a massive
existing investment in Java that you need

00:02:04.200 --> 00:02:07.540
to carry forward and the Mac is included in that picture.

00:02:07.540 --> 00:02:14.250
Or if it just happens to be the language that you're most
familiar with and you happen to have a Mac in your lap.

00:02:14.250 --> 00:02:19.569
All of those people, all those things
apply perfectly and Java's well at home

00:02:19.569 --> 00:02:22.389
and it has a healthy present and healthy future here.

00:02:22.389 --> 00:02:29.289
And while you're here we've got a thing we used to say back
in two thousand one was come for the job stay for the Cocoa.

00:02:29.289 --> 00:02:35.639
We've got a lot of other things available both you
know, Mac features, things like Cocoa and dashboard,

00:02:35.639 --> 00:02:38.599
the stuff like core animation you're
seeing here on the platform,

00:02:38.599 --> 00:02:42.349
as well as plenty of open standards
and stuff like PHP, Rubi on Rails.

00:02:42.349 --> 00:02:48.150
So you know, Java is well at home and
we've got plenty of other things to offer.

00:02:48.150 --> 00:02:55.620
So we hope you look all around the system and continue
to be productive with your technology of choice.

00:02:55.620 --> 00:02:58.640
So the audience here, who are we talking to?

00:02:58.639 --> 00:03:03.439
Well so forgive me for generalizing a little
bit but you know you saw this, this morning,

00:03:03.439 --> 00:03:09.419
there's a couple of general audiences and general
application spaces in terms of Java development.

00:03:09.419 --> 00:03:13.789
The first of course is the server
command line, headless realm.

00:03:13.789 --> 00:03:18.780
Whether it's you know, big enterprise deployments
or just kind of the unsung hero's sorts of things

00:03:18.780 --> 00:03:25.300
that you have running in the background during
your daily life or your daily work environment.

00:03:25.300 --> 00:03:30.370
And then beyond that we start to head towards
more user-centric, publicly facing things.

00:03:30.370 --> 00:03:32.200
Things like applets.

00:03:32.199 --> 00:03:40.649
Just a small bundle of code that you want to deploy
across a network to any number of anonymous clients,

00:03:40.650 --> 00:03:44.849
you don't care who they are, you don't care what
they're running, the stuff should just work.

00:03:44.849 --> 00:03:47.099
Web Start is another example of that.

00:03:47.099 --> 00:03:51.060
You know, more modern version of what
applets were originally solving for you.

00:03:51.060 --> 00:03:58.259
And then of course all the way at the other end of the
spectrum we have the full blown proper desktop application.

00:03:58.259 --> 00:04:01.989
So as it turns out we could probably
generalize even a little bit more and just kind

00:04:01.990 --> 00:04:04.340
of break this up between the client and the server.

00:04:04.340 --> 00:04:10.590
Whether the things you need to know when you're
doing headless server command line base development

00:04:10.590 --> 00:04:14.420
versus what you need to know when
you're doing desktop development.

00:04:14.419 --> 00:04:19.519
And despite those two things being in stark contrast to
each other, they are similar in the sense that when you're

00:04:19.519 --> 00:04:22.899
on a certain target platform there are
things you want to be mindful of and things

00:04:22.899 --> 00:04:26.209
that you really need to know going in and moving forward.

00:04:26.209 --> 00:04:28.089
So that's what we're going to cover today.

00:04:28.089 --> 00:04:33.399
We're going to start with the very basics of Java
on Mac OS X, the things you absolutely need to know,

00:04:33.399 --> 00:04:36.599
the things you're not going to get anywhere without.

00:04:36.600 --> 00:04:40.189
We'll talk about the transition to
64-bit, following up on the news

00:04:40.189 --> 00:04:43.959
that you heard this morning at the discover Java session.

00:04:43.959 --> 00:04:49.099
And then we'll go into the Java desktop
experience and kind of what that means to you

00:04:49.100 --> 00:04:53.700
as a cross platform desktop developer or programmer.

00:04:53.699 --> 00:04:59.529
And we'll also talk about what you do in terms of
the routine of building your code and you know,

00:04:59.529 --> 00:05:04.229
how you can work in some of these platform
sensitivities to your normal routine.

00:05:04.230 --> 00:05:07.879
So let's start with the basics.

00:05:07.879 --> 00:05:09.969
The basics are pretty simple, they're pretty basic.

00:05:09.970 --> 00:05:16.650
We have the Java VM framework, which you know, is like
Tom said this morning: Java's preinstalled on every copy

00:05:16.649 --> 00:05:20.399
of Mac OS X going all the way back to 10.0.

00:05:20.399 --> 00:05:26.579
We've got multiple version support inside that framework
and there are a number of things you want to know

00:05:26.579 --> 00:05:31.930
if you're going to go ahead and work
with this installation on the Mac.

00:05:31.930 --> 00:05:34.430
So let's talk about the framework.

00:05:34.430 --> 00:05:37.209
Again it's preinstalled on every
system, you don't ever have to worry

00:05:37.209 --> 00:05:40.289
about whether or not there is a Java VM on the system.

00:05:40.290 --> 00:05:41.310
It's always there.

00:05:41.310 --> 00:05:47.269
Not only is it there, or is it in place, but
the JDK is there as well and it's on the path.

00:05:47.269 --> 00:05:50.009
You don't need to worry about tweaking
the environment or anything like that.

00:05:50.009 --> 00:05:54.569
You open up terminal, you type Java or
Java C, Java H, and it's just there.

00:05:54.569 --> 00:05:58.550
So this is really, Java is and always
has been an integral part of the OS.

00:05:58.550 --> 00:06:02.990
And you see here in this screen shot
here, you see a bunch of .frameworks.

00:06:02.990 --> 00:06:07.980
For those of you who are new to the platform or not
necessarily familiar with the native things that are going

00:06:07.980 --> 00:06:12.210
on here, our framework is really just a bundle,
it's just a folder with some specific metadata

00:06:12.209 --> 00:06:17.169
and some folder organization and basically
in order to kind of illustrate this fact,

00:06:17.170 --> 00:06:19.759
we've bundled the entire JDK inside a framework.

00:06:19.759 --> 00:06:26.430
And this gives us a number of not only pre-installation,
but a number of benefits like multiple version support.

00:06:26.430 --> 00:06:33.340
And echoing what you heard this morning, 1.5
remains the preferred recommended version on Leopard.

00:06:33.339 --> 00:06:38.079
So more on these multiple versions.

00:06:38.079 --> 00:06:42.109
If you were to dive a little deep, and feel
free to follow along while I talk here,

00:06:42.110 --> 00:06:47.639
if you were to dive into the framework inside
the finder, you'd see a versions directory.

00:06:47.639 --> 00:06:49.169
And you see a bunch of numbers here.

00:06:49.170 --> 00:06:51.750
So you notice that a bunch of these are actually sim links.

00:06:51.750 --> 00:06:58.639
And the real take away here is that for any given
major version we only have a single installation.

00:06:58.639 --> 00:07:04.849
So you see here there's a 1.4, a 1.4.1,
and those are actually both sim links to 1.4.2

00:07:04.850 --> 00:07:11.480
which is usually more often than not the
absolute most latest available JDK on the system.

00:07:11.480 --> 00:07:16.640
So for example in Leopard, if you've gone
and downloaded our DP seven for 1.6

00:07:16.639 --> 00:07:19.439
at the current time you would have 1.4.2_14,

00:07:19.439 --> 00:07:23.300
1.5.0_11 and 1.6.0_01.

00:07:23.300 --> 00:07:27.439
Similarly you see the abstract
1.5 sim link pointing

00:07:27.439 --> 00:07:31.050
to what is currently the most current version 1.5 oh.

00:07:31.050 --> 00:07:39.050
Now again reiterating from this morning, you need to
remember that 1.4 is being deprecated in Leopard.

00:07:39.050 --> 00:07:42.009
So deprecation means a lot of things to a lot of people.

00:07:42.009 --> 00:07:46.329
But this is a developer's conference, you guys are
developers and you're looking to work with this language

00:07:46.329 --> 00:07:50.000
with this framework moving forward
so really as far as you're concerned,

00:07:50.000 --> 00:07:52.860
you should act as if 1.4 is already gone.

00:07:52.860 --> 00:07:55.970
Because it's not going to be around for much longer.

00:07:55.970 --> 00:08:00.760
It will be there on Leopard as long as Leopard
is around, but you should assume that no further.

00:08:00.759 --> 00:08:05.730
So 1.5 remains the preferred version
for multiple architecture support,

00:08:05.730 --> 00:08:08.819
for multiple OS support, for maximum penetration basically.

00:08:08.819 --> 00:08:13.469
So how do you deal with all these multiple JDK versions?

00:08:13.470 --> 00:08:15.430
Well you can set your IDE preferences.

00:08:15.430 --> 00:08:20.680
There's a bunch of IDEs out there and most of
these tools have been written custom, not custom,

00:08:20.680 --> 00:08:26.170
but written to work properly on Mac OS X. So you tell it
which version you want, the id takes care of it for you.

00:08:26.170 --> 00:08:28.650
That of course includes Xcode.

00:08:28.649 --> 00:08:30.689
You can also use the Java preferences.app.

00:08:30.689 --> 00:08:33.620
And for those of you who weren't
at the session this morning,

00:08:33.620 --> 00:08:37.850
the Java Preferences application now also
controls the command line in Leopard.

00:08:37.850 --> 00:08:43.200
So it's no longer just for double clickables or for Web
Start and applets, it controls every aspect of Java.

00:08:43.200 --> 00:08:50.870
Now if you want rapid access to these, do some testing,
the main recommendation we have for your guys is

00:08:50.870 --> 00:08:56.690
to use the Alias command and use it in your
terminal profiles on a per user basis.

00:08:56.690 --> 00:09:00.370
This is really the most flexible and
the easiest way to go ahead and do it.

00:09:00.370 --> 00:09:06.149
And if you've got make file or shell script, etcetera,
it depends on something like a Java home variable,

00:09:06.149 --> 00:09:07.709
you can go ahead and set that accordingly.

00:09:07.710 --> 00:09:10.310
And basically that's going to be
a direct path into the framework.

00:09:10.309 --> 00:09:19.329
System library frameworks, JavaVM.framework,
versions, whichever version you wish, and then home.

00:09:19.330 --> 00:09:23.389
And now I'd like to give you a little
quick tour of what all this looks like.

00:09:23.389 --> 00:09:25.230
So go to demo please.

00:09:28.269 --> 00:09:31.590
Ah there we are.

00:09:31.590 --> 00:09:37.910
So let's open up the terminal and like I said,
there's no path shenanigan's or anything like that.

00:09:37.909 --> 00:09:38.789
Everything just works.

00:09:38.789 --> 00:09:41.919
So I'm going to go ahead and just
type Java -version

00:09:41.919 --> 00:09:46.409
and like I said 1.5 is the preferred
and it's 1.5.0_11.

00:09:46.409 --> 00:09:50.069
So maybe I want to go ahead and
do some testing with 1.4.

00:09:50.070 --> 00:09:54.200
I'm a little slow on the uptake, I have
not downloaded the 1.6 preview yet.

00:09:54.200 --> 00:09:59.910
But so Java preferences is located
in the utilities folder under Java.

00:09:59.909 --> 00:10:04.809
But I'm just going to go ahead and launch
it from Spotlight because I'm lazy.

00:10:04.809 --> 00:10:10.429
And you can see down here we have
Java application runtime settings.

00:10:10.429 --> 00:10:15.019
Right now J2SE 5.0 and here you
would see all of the installed versions.

00:10:15.019 --> 00:10:18.470
So if I had 1.6 installed you
would see JavaSE 6.0 up here.

00:10:18.470 --> 00:10:23.009
So I'm just going to go ahead and drag
1.4 two to the top and click save.

00:10:23.009 --> 00:10:25.730
And sure enough, I type Java -version.

00:10:25.730 --> 00:10:28.009
Now we have 1.4.2_14.

00:10:28.009 --> 00:10:30.039
So simple as that.

00:10:30.039 --> 00:10:36.779
Now let's take a look at these, let's take
a look at the framework on the file system

00:10:36.779 --> 00:10:44.459
for a second just to show you what's going on here.

00:10:44.460 --> 00:10:54.420
Again system library frameworks, JavaVM.framework
and we have this versions directory.

00:10:54.419 --> 00:10:56.449
And again this is very similar to the slide you just saw.

00:10:56.450 --> 00:10:59.990
We've got a lot of sim links pointing
to whatever the most current thing is.

00:10:59.990 --> 00:11:03.769
So if you happen to be doing something
that requires 1.4 or 1.5,

00:11:03.769 --> 00:11:06.960
try to use the most abstract thing
like 1.4 and 1.5.

00:11:06.960 --> 00:11:08.790
Not, nothing more specific than that.

00:11:08.789 --> 00:11:13.049
Because these sim links are generally always there
and they will always point to the right thing.

00:11:13.049 --> 00:11:15.959
And from there, you can see that
we've just got a replication

00:11:15.960 --> 00:11:18.340
of all the command line tools for each individual version.

00:11:18.340 --> 00:11:24.250
So here's the 1.5, I go over to 1.4, it's
got the same folder structure, same executables.

00:11:24.250 --> 00:11:28.620
So basically all this stuff is in place and
this is all usable exactly where it sits.

00:11:28.620 --> 00:11:35.139
And so where it starts to get interesting now is, especially
in an automated testing situation, well maybe I, you know,

00:11:35.139 --> 00:11:38.439
this is a manual process using
this Java preferences application.

00:11:38.440 --> 00:11:39.750
So what can we do here?

00:11:39.750 --> 00:11:51.600
Well I can go ahead and just create a profile
for my user account, for terminal and I can do,

00:11:51.600 --> 00:12:02.259
I can use the alias command, I can go alias Java 1.4
equals and I'm hoping all of you have experimented with drag

00:12:02.259 --> 00:12:08.980
and drop in terminal, but basically I'm just
going to go get the Java executable right here,

00:12:08.980 --> 00:12:14.279
change it, no this is the same login session.

00:12:14.279 --> 00:12:17.829
So I'll create a new tab real quick.

00:12:17.830 --> 00:12:22.200
And now I've got this Java 1.4 executable basically.

00:12:22.200 --> 00:12:24.970
A little dash there, and right.

00:12:24.970 --> 00:12:29.420
So now we have you know, for all intensive
purposes, an executable using 1.4.

00:12:29.419 --> 00:12:42.759
Let's go back here, let's do it again for 1.5,
commands, Java and of course you do this for Java C,

00:12:42.759 --> 00:12:44.809
everything else, whatever you want it to do.

00:12:44.809 --> 00:12:53.479
So quit out of that, another new session, and there we are.

00:12:53.480 --> 00:12:58.980
So, so in the matter of seconds, we've
got multiple version support ready to go,

00:12:58.980 --> 00:13:02.460
ready to automate using shell scripts, whatever you want.

00:13:02.460 --> 00:13:10.009
So very straightforward, very simple and I want to
point this out because depending on who you talk to,

00:13:10.009 --> 00:13:14.539
which mailing list you subscribe to,
there's a lot of talk about this current JDK

00:13:14.539 --> 00:13:18.569
and changing sim links and stuff like that.

00:13:18.570 --> 00:13:20.640
Please don't do that.

00:13:20.639 --> 00:13:25.279
The main reason there is not only because you don't
own the framework but because changing sim links

00:13:25.279 --> 00:13:28.110
at the system level affects all users of the system.

00:13:28.110 --> 00:13:32.490
This is not only easy, it's non-disruptive
and it also only affects you.

00:13:32.490 --> 00:13:34.210
So don't listen to those people.

00:13:34.210 --> 00:13:35.650
Listen to me.

00:13:35.649 --> 00:13:38.230
I'll take good care of you.

00:13:38.230 --> 00:13:45.210
Back to slides please.

00:13:45.210 --> 00:13:52.030
So that was a quick whirlwind tour of just
you know, getting your bearings on the system.

00:13:52.029 --> 00:13:57.189
So once we get into the runtime, once we start actually
executing code and maybe you're doing some special K stuff

00:13:57.190 --> 00:14:00.150
or maybe you just, for whatever reason,
want to know that you're running

00:14:00.149 --> 00:14:04.629
on Mac OS X. Very simple stuff using standard J2SE APIs.

00:14:04.629 --> 00:14:10.059
This is probably something that many of you
have done on this platform or on other ones.

00:14:10.059 --> 00:14:11.849
But here's the recommended way of doing it.

00:14:11.850 --> 00:14:17.710
Go ahead and get the os.name system properties, slam it to
lower case so you don't have to worry about case sensitivity

00:14:17.710 --> 00:14:23.600
and check that it begins with Mac OS X. I don't believe
we're changing the name of the product anytime soon.

00:14:23.600 --> 00:14:26.009
So it's a pretty good guess.

00:14:26.009 --> 00:14:30.799
And this code actually is not Mac specific at all, this
is just some simple code that you might be doing to try

00:14:30.799 --> 00:14:32.679
to figure out which major version you're doing.

00:14:32.679 --> 00:14:39.549
So you know I have this big long string that says
1.5.0_11 - something or other.

00:14:39.549 --> 00:14:45.689
So this is a way to just kind of trim off the first couple
of characters there and see which major JDK you're using.

00:14:45.690 --> 00:14:50.630
And more specific to the Mac is, and I apologize
for not pointing this out directly in terminal,

00:14:50.629 --> 00:14:55.289
but we have a unique version string at
the end of what you're used to seeing.

00:14:55.289 --> 00:15:01.589
So like I said before let's say
there's 1.4.2_11.

00:15:01.590 --> 00:15:04.800
Or is it twelve, fourteen, where are we now?

00:15:04.799 --> 00:15:07.439
Fourteen? Alright.

00:15:07.440 --> 00:15:15.280
So that's the standard JDK version but because we don't
operate on the same schedule as Sun we may very well put

00:15:15.279 --> 00:15:18.919
out two releases in the 1.4.2_14 timeframe.

00:15:18.919 --> 00:15:21.889
So we add a little string at the end
to differentiate our own releases.

00:15:21.889 --> 00:15:25.460
And that's something that you can count on
if it just so happens that there's something,

00:15:25.460 --> 00:15:29.490
a feature you've been waiting for, a bug you've
been waiting to be fixed and work around,

00:15:29.490 --> 00:15:32.549
apply a work around on, this is
the way to go ahead and do that.

00:15:32.549 --> 00:15:36.719
Basically sniff out that hyphen at
the end and find out the number.

00:15:36.720 --> 00:15:41.950
And this number is fairly deterministic
so you can go ahead and extrapolate on it.

00:15:41.950 --> 00:15:47.700
But mainly you would want to check for the exact
string just so you know what release you're on.

00:15:47.700 --> 00:15:53.750
And we have a technical note, it's TN 2110 up
on developer.apple.com that has a matrix of all

00:15:53.750 --> 00:15:59.580
of these version strings dating all
the way back to Mac OS X 10.0.

00:15:59.580 --> 00:16:00.690
2 1 1 0.

00:16:00.690 --> 00:16:10.280
So on the topic of native libraries, those of you, maybe
you're building JNI code, maybe you're just bringing

00:16:10.279 --> 00:16:18.039
down some open source stuff, whether it be on the
command line or on the desktop, it's the standard story,

00:16:18.039 --> 00:16:23.039
you would use the Java.library.path property
to define where you're libraries are sitting.

00:16:23.039 --> 00:16:29.389
And the naming convention here is lib<LoadedName>.JNIlib
and the <LoadedName> would be the same string

00:16:29.389 --> 00:16:32.899
that you pass into your system load
library call in your Java code.

00:16:32.899 --> 00:16:40.159
So very straight forward, the prefix and suffix are unique
to Mac OS X. And of course you want to build these libraries

00:16:40.159 --> 00:16:45.490
as three way universal, meaning PowerPC,
and Intel and 64-bit Intel as well.

00:16:45.490 --> 00:16:50.269
Got a lot of different machines out there
now so you need to be mindful of all of them.

00:16:50.269 --> 00:16:54.100
Speaking of 64-bit, I'd
like to bring Victor Hernandez

00:16:54.100 --> 00:16:57.810
from the VM team up to talk to you about that transition.

00:16:57.809 --> 00:16:58.579
Victor?

00:16:58.580 --> 00:17:03.160
( Applause )

00:17:03.159 --> 00:17:03.980
>> Well thank you Matt.

00:17:03.980 --> 00:17:10.029
I'm Victor Hernandez and I'm one of the engineers who
brings the virtual machine to you for running on Mac OS X.

00:17:10.029 --> 00:17:14.430
So about an hour ago I decided to drink
some coffee even though I regularly don't

00:17:14.430 --> 00:17:19.820
because you can't really trust a VM engineer
who works on Java and doesn't drink java.

00:17:19.819 --> 00:17:22.599
But too there's another reason as well.

00:17:22.599 --> 00:17:28.639
64-bit JVMs are going to enable
a whole new set of amped up applications

00:17:28.640 --> 00:17:31.080
and it's really not just the new architecture.

00:17:31.079 --> 00:17:36.779
But it's a new way of being able to write applications
that you never felt you were able to write before.

00:17:36.779 --> 00:17:39.660
So let's jump into the technology.

00:17:39.660 --> 00:17:43.150
You've heard a lot about 64-bit support in Leopard.

00:17:43.150 --> 00:17:48.650
Most of our machines that we're selling now
are able to run 64-bit applications.

00:17:48.650 --> 00:17:51.769
And Leopard has been updated so that
most of the frameworks and almost all

00:17:51.769 --> 00:17:55.710
of the tools including Java have
been updated for 64-bit.

00:17:55.710 --> 00:18:03.390
We've included a 64-bit JVM ind the
J2SE 5.0 implementation in Mac OS X Leopard.

00:18:03.390 --> 00:18:10.759
And we expect to continue providing 64-bit
JVM support in all the future versions of Java.

00:18:10.759 --> 00:18:19.339
So what does 64-bit mean to you as a Java developer?

00:18:19.339 --> 00:18:24.639
Well 64-bit in an application
just means that the pointer size has gone

00:18:24.640 --> 00:18:27.759
from 32-bit up to 64-bit.

00:18:27.759 --> 00:18:29.349
That's it.

00:18:29.349 --> 00:18:33.159
What does Java care about that

00:18:33.160 --> 00:18:38.300
Well the key thing is that Java as a language
has never exposed pointers or pointer size.

00:18:38.299 --> 00:18:41.480
Your application doesn't need to know and
actually it's kind of hard to figure it out.

00:18:41.480 --> 00:18:45.200
And that's really powerful.

00:18:45.200 --> 00:18:48.740
It's the job of the virtual machine
to do this all under the covers.

00:18:48.740 --> 00:18:57.220
And your application is able to run on a 64-bit
JVM without having to change any Java source

00:18:57.220 --> 00:18:59.630
and also without having to recompile it all.

00:18:59.630 --> 00:19:06.950
Which means the transition for you to 64-bit JVM is
going to be really, really easy to do and it's just going

00:19:06.950 --> 00:19:08.569
to be really painless and it's going to be pretty awesome.

00:19:08.569 --> 00:19:14.799
You're going to see how we're enabling this so that you
can actually switch into this without much work at all.

00:19:14.799 --> 00:19:21.799
So now that you know that it's really
easy to do, what does it actually enable

00:19:21.799 --> 00:19:23.789
Well there's two main things that it let's you do.

00:19:23.789 --> 00:19:27.029
First of all, it lets you have a larger Java heap size.

00:19:27.029 --> 00:19:33.519
In the current 32-bit world, t2hat Java
heap has had a maximum limit of 2GB.

00:19:33.519 --> 00:19:38.690
A lot of you have been telling us that's too
little and we're perfectly aware of that.

00:19:38.690 --> 00:19:40.990
Let's say this is 2GB.

00:19:40.990 --> 00:19:43.430
How big is the new Java heap size?

00:19:43.430 --> 00:19:47.850
Well it's not, I can't even point to the largest
amount because it's really, really that much bigger.

00:19:47.849 --> 00:19:52.569
The key thing to note is that it's definitely
more, it can definitely be larger than the amount

00:19:52.569 --> 00:19:56.009
of actual physical memory you have in your system.

00:19:56.009 --> 00:20:00.210
And so you're actually going to be able to take
full advantage of all that memory you've been buying

00:20:00.210 --> 00:20:03.309
for your machine directly from your Java application.

00:20:03.309 --> 00:20:07.789
There's another really important thing that
you're going to get with 64-bit JVM

00:20:07.789 --> 00:20:13.230
and that's actually performance changes including
performance improvements in your application.

00:20:13.230 --> 00:20:21.700
Okay so I've said that this isn't just a new
architecture, this is actually an architecture

00:20:21.700 --> 00:20:24.480
that lets you rethink how you've
approached your applications.

00:20:24.480 --> 00:20:26.339
And that's really, really true.

00:20:26.339 --> 00:20:32.139
Anytime that you've had to change the architecture
of your application to say oh no I can't do

00:20:32.140 --> 00:20:34.800
that because it will use too much memory.

00:20:34.799 --> 00:20:41.750
Well undo all of that experience, undo all of
that negative learning and just say okay what

00:20:41.750 --> 00:20:44.329
if I had all that memory what could I do now?

00:20:44.329 --> 00:20:52.929
The key thing is not only do you have a large Java heap,
but also if you've been accessing a lot of memory outside

00:20:52.930 --> 00:20:57.930
of the Java heap using new IO buffers, those
can also be much larger than they were before.

00:20:57.930 --> 00:21:05.710
And this allows a lot of new, this allows
applications to do a lot of new things.

00:21:05.710 --> 00:21:11.370
First of all anything processing large data
sets can suddenly process even larger data sets.

00:21:11.369 --> 00:21:18.129
Things like gene sequencing or image files, the files
that they're reading off of the disk can now be really big

00:21:18.130 --> 00:21:24.330
and actually live all in one piece in memory.

00:21:24.329 --> 00:21:29.210
And also applications like scientific
visualization and simulation.

00:21:29.210 --> 00:21:32.970
These are applications that generate
a ton of data during their runtime.

00:21:32.970 --> 00:21:37.450
They might start off with a small set of data but
then they iterate, they run all these algorithms

00:21:37.450 --> 00:21:39.690
and it just grows, and grows, and grows and grows.

00:21:39.690 --> 00:21:43.410
And then it might actually spit out just a
small amount of data from the conclusions.

00:21:43.410 --> 00:21:45.210
Now these applications are enabled.

00:21:45.210 --> 00:21:49.210
So whether it be that you're writing, you're reading big
things off of the disk or you're actually generating a lot

00:21:49.210 --> 00:21:55.250
of data, both of those styles of
applications can now be a lot more powerful.

00:21:55.250 --> 00:22:00.490
Also on the enterprise side, have you ever
wanted to cache your whole database in memory?

00:22:00.490 --> 00:22:02.269
Well now it's actually possible.

00:22:02.269 --> 00:22:03.490
And that's really, really big.

00:22:03.490 --> 00:22:08.150
You're going to reduce your transaction
the latency for each of your transactions

00:22:08.150 --> 00:22:10.540
and just going to be that much more powerful.

00:22:10.539 --> 00:22:13.789
I mean, this is just an unlimited set
of the things that I can think of.

00:22:13.789 --> 00:22:19.049
But I'm really excited to see what's going to be
coming out of the next generation of applications.

00:22:19.049 --> 00:22:26.579
Okay. So I've explained how you can go
about, you know, amping up your application.

00:22:26.579 --> 00:22:31.699
Or if you're current application has memory
limits now you can you know, undo those limits.

00:22:31.700 --> 00:22:34.990
Well great those two situations, it's pretty obvious

00:22:34.990 --> 00:22:39.700
and it's pretty clear why you would
want to move to 64-bit JVM.

00:22:39.700 --> 00:22:44.610
But what about the rest of you that are just,
my application runs fine in a 32-bit.

00:22:44.609 --> 00:22:46.990
When am I going to adopt this technology?

00:22:46.990 --> 00:22:54.269
Well there's one thing that I want you to take away from
my talk today and that's the fact that the time is now.

00:22:54.269 --> 00:22:57.859
There's really no reason not to use
this technology as soon as you can.

00:22:57.859 --> 00:22:59.869
Which is going to be with Mac OS X Leopard.

00:22:59.869 --> 00:23:06.909
And I'm going to go into a few more motivating
slides just to explain the reasons behind that.

00:23:06.910 --> 00:23:12.320
So for service I deployments it's really straight
forward, for desktop jobs it's the same thing,

00:23:12.319 --> 00:23:18.240
your application's going to look the same all the frameworks
are going to be available to you that you're currently used

00:23:18.240 --> 00:23:25.950
to using from your pure job application and also
it's going to be a little bit faster as you'll see.

00:23:25.950 --> 00:23:30.400
Okay. So you need to know about four
characteristics of your performance that are going

00:23:30.400 --> 00:23:33.080
to be changing as you move to 64-bit JVM.
d

00:23:33.079 --> 00:23:35.339
First of all how fast is your application going to be?

00:23:35.339 --> 00:23:37.519
Secondly is it going to use more memory?

00:23:37.519 --> 00:23:41.259
Third how much more time is going
to be spent in garbage collection?

00:23:41.259 --> 00:23:45.629
And fourth, is your launch time
going to change for your application?

00:23:46.650 --> 00:23:49.340
Alright first of all, speed.

00:23:49.339 --> 00:23:55.829
For a lot of applications the speed of your application
is dictated by how fast your hottest methods are.

00:23:55.829 --> 00:24:02.220
That's the whole design of the hot spot Java virtual machine
that we ship with Mac OS X. We take your hottest methods

00:24:02.220 --> 00:24:06.150
and we compile them down to native machine instructions.

00:24:06.150 --> 00:24:09.840
If we do a really good job of that, it's going to be fast.

00:24:09.839 --> 00:24:12.199
If we don't do that, it's going to be slow.

00:24:12.200 --> 00:24:18.009
Well the key thing is that we are actually able to
generate faster and better implementations of your methods

00:24:18.009 --> 00:24:23.029
and native instructions on the 64-bit version
dof Intel than on the 32-bit version of Intel.

00:24:23.029 --> 00:24:26.589
Why? Because there's more registers available.

00:24:26.589 --> 00:24:33.970
More registers means that we can actually cache more of
your variables in the code we generate instead of having

00:24:33.970 --> 00:24:36.549
to write your variable to memory and read it back.

00:24:36.549 --> 00:24:43.720
This is going to be faster and we've
already seen improvements that show

00:24:43.720 --> 00:24:46.799
that this is definitely the case
with the SciMark, benchmark.

00:24:46.799 --> 00:24:51.220
The SciMark Benchmark doesn't spend much
time in IO, isn't spending a lot of time

00:24:51.220 --> 00:24:55.130
or any time reading and writing from sockets.

00:24:55.130 --> 00:24:58.700
It's really just raw computation and just hot methods.

00:24:58.700 --> 00:25:05.080
As you can see on all parts of the benchmark,
we're already doing much better when running

00:25:05.079 --> 00:25:08.439
with the 64-bit Java virtual machine in Leopard.

00:25:08.440 --> 00:25:10.330
And this is just the beginning.

00:25:10.329 --> 00:25:13.199
I mean, currently the number's 39%.
9

00:25:13.200 --> 00:25:19.160
I'm hoping that you guys are possibly salivating right now
like oh cool I can get all that extra performance for free.

00:25:19.160 --> 00:25:26.410
Alright, the second thing you need to know about when
it comes to the different performance characteristics

00:25:26.410 --> 00:25:31.570
for your application with the 64-bit VM is memdory.

00:25:31.569 --> 00:25:34.149
Your application is going to use more memory.

00:25:34.150 --> 00:25:39.600
That's because every reference to one of
your job objects you have is twice as large.

00:25:39.599 --> 00:25:42.219
It was like this now it's twice as big.

00:25:42.220 --> 00:25:45.630
That's just the reality of 64-bits.

00:25:45.630 --> 00:25:53.430
But that's actually, the way you're currently
approaching memory usage in the 32-bit world,
2

00:25:53.430 --> 00:25:57.380
is exactly what you just need to continue
doing in the 64-bit world.

00:25:57.380 --> 00:25:59.610
Don't use any more memory than you have to.

00:25:59.609 --> 00:26:05.479
Measure different Java heap sizes, make sure you're
not encountering out of memory errors, and that's it.

00:26:05.480 --> 00:26:11.390
Make sure that you're not causing other applications
on the system to page out or your own application.

00:26:11.390 --> 00:26:14.320
There is a really easy way to make
your own application to page out.

00:26:14.319 --> 00:26:19.929
If you actually ask for a Java heap size that's larger
than the actual amount of physical memory you have,

00:26:19.930 --> 00:26:24.759
you're going to end up paging a lot because we
scan that whole heap during garbage collection.

00:26:24.759 --> 00:26:26.970
And you should stay away from that.

00:26:26.970 --> 00:26:32.269
Possibly even have dynamic code that detects
how much memory a particular deployment has

00:26:32.269 --> 00:26:35.609
so that it modifies the heap size accordingly.

00:26:35.609 --> 00:26:41.579
And there's two things I also need to point
out with memory usage on the 64-bit.

00:26:41.579 --> 00:26:45.949
First of all even though you can have a larger
heap you can still end up running into out

00:26:45.950 --> 00:26:47.789
of memory error for the same reason as before.

00:26:47.789 --> 00:26:51.509
A leak. A leak is still going to fill up the whole heap.

00:26:51.509 --> 00:26:53.029
It just might take a bit longer.

00:26:53.029 --> 00:26:59.569
Also a lot of the applications, especially applications
that aren't under your control, that are Java apps,

00:26:59.569 --> 00:27:05.089
have hard coded values for the
different heap size parameters.

00:27:05.089 --> 00:27:10.659
We've seen this under Eclipse, we've seen
this with Idea, basically if you just move it

00:27:10.660 --> 00:27:18.060
to 64-bit JVM it will hit an out of memory because
it doesn't fit in that space and you actually just need

00:27:18.059 --> 00:27:20.079
to increase it to something slightly bigger.

00:27:20.079 --> 00:27:25.599
So keep that in mind when you're trying out third
party applications under the new 64-bit JVM

00:27:25.599 --> 00:27:29.579
which you're going to be doing because
you're going to see how easy it is to do.

00:27:29.579 --> 00:27:33.349
Alright the third topic that I want
to talk about is garbage collection.

00:27:33.349 --> 00:27:39.619
If you're already using a larger Java heap it's
actually going to take longer to scan all of that.

00:27:39.619 --> 00:27:43.289
That is if you continue using the current GC algorithm.

00:27:43.289 --> 00:27:50.680
But that's no reason to fret because we've been shipping
since Java 1.4 different garbage collection algorithms

00:27:50.680 --> 00:27:55.140
that actually are to and specifically for this scenario.

00:27:55.140 --> 00:27:59.620
All of the 64-bit Intel
machines have multiple cores.

00:27:59.619 --> 00:28:06.789
Why don't we use the extra processing power to do
some asynchronous or parallelized garbage collection.

00:28:06.789 --> 00:28:11.779
In fact there's a good chance that your pause time
might even go down which is really, really awesome.

00:28:11.779 --> 00:28:16.809
The parallel GC algorithm basically
parallelizes the synchronize GC algorithm

00:28:16.809 --> 00:28:19.259
and then there's also the concurrent mark sweep

00:28:19.259 --> 00:28:24.650
where you basically have a processor that's running
during your application and then when it actually has

00:28:24.650 --> 00:28:30.810
to do some syncronist garbage collection
it's actually reduced the amount of the work.

00:28:30.809 --> 00:28:34.929
So it ends up being a lot fast as
far as the pause time is concerned.

00:28:34.930 --> 00:28:38.519
So just take a look at these algorithms, measure
with the application and you're going to see

00:28:38.519 --> 00:28:47.079
that you're not actually going to end up seeing much
larger GC pauses for a reasonable sized job of heaps.

00:28:47.079 --> 00:28:50.809
Alright and then the fourth issue is launch time.

00:28:50.809 --> 00:28:54.829
You're in a really interesting position
because you can be an early adopter

00:28:54.829 --> 00:28:57.509
of the 64-bit technology of at one Leopard.

00:28:57.509 --> 00:29:00.940
In fact not only could your application
be the first 64-bit app

00:29:00.940 --> 00:29:05.259
out there it could also be the first
one that a user launches on the system.

00:29:05.259 --> 00:29:07.579
Well that's really awesome and something to be proud of.

00:29:07.579 --> 00:29:09.210
There is a cost though of course.

00:29:09.210 --> 00:29:12.210
If you're the first app, you're going
to be the first one to load in all

00:29:12.210 --> 00:29:15.549
of the 64-bit versions
of the frameworks into memory.

00:29:15.549 --> 00:29:17.970
And that is going to reduce your launch time.

00:29:17.970 --> 00:29:26.250
No reason to fret because there's going to be some quick
adoption on the 64-bit technology and as more

00:29:26.250 --> 00:29:31.430
and more apps, basically as one more app before your
app is run, you're not going to see that cost at all.

00:29:31.430 --> 00:29:35.860
And it's just going to get that much better.

00:29:35.859 --> 00:29:42.299
Okay so now that you know like why you want to go about
using the 64-bit VM you need to know how to do that.

00:29:42.299 --> 00:29:48.549
Well we're supporting it in J2SE 5.0 and Leopard, we're
also supporting in the Java SE 6 preview and it runs on all

00:29:48.549 --> 00:29:52.230
of the 64-bit enabled Intel Mac computers.

00:29:52.230 --> 00:29:55.140
And there's different rules on how to
go about doing it from the command line

00:29:55.140 --> 00:29:58.460
in your application bundles and also in Web Start.

00:29:58.460 --> 00:29:59.640
So let's go into these.

00:29:59.640 --> 00:30:01.580
It's really easy, really, really easy.

00:30:01.579 --> 00:30:06.049
Command line you add one new parameter
to the command line -d64.

00:30:06.049 --> 00:30:07.419
That's absolutely it.

00:30:07.420 --> 00:30:11.860
Cool. Next application bundle, not much harder at all.

00:30:11.859 --> 00:30:14.229
It's got a little caveat that I've got to explain though.

00:30:14.230 --> 00:30:19.750
You basically add a new key to
your info.plist JVMArchs.

00:30:19.750 --> 00:30:26.789
And what this key, it's value, what it says,
is my application supports these architectures.

00:30:26.789 --> 00:30:30.509
If you're pure Java, right off
the bat you can support them all.

00:30:30.509 --> 00:30:37.640
If you have native code, you have to list the ones that
you've actually built your libraries universal for.

00:30:37.640 --> 00:30:40.000
And the key thing here is that the order matters.

00:30:40.000 --> 00:30:44.289
So if you want to specify that if there is
64-bit available on an Intel machine,

00:30:44.289 --> 00:30:46.109
you actually do want to run in 64-bit.
d

00:30:46.109 --> 00:30:51.939
You put x86_64 in front of
i386 otherwise you reverse that.

00:30:51.940 --> 00:30:55.309
And that's application bundles.

00:30:55.309 --> 00:30:58.849
The third one is Web Start, as easy as the command line.

00:30:58.849 --> 00:31:05.209
You just need to make sure -d64 gets
passed to the Java VM created by Web Start and you do

00:31:05.210 --> 00:31:11.240
that in the J2SE version field of the JNLP file.

00:31:11.240 --> 00:31:14.180
Once again not very hard.

00:31:14.180 --> 00:31:16.640
There might be more work for you
if you have native libraries.

00:31:16.640 --> 00:31:21.560
First of all you have to make sure that your
source can be ported over to 64-bits.

00:31:21.559 --> 00:31:26.899
You can learn more about that porting process
at other 64-bit sessions here at WWDC.

00:31:26.900 --> 00:31:31.100
The key thing is that just like in
previous years the transition from PowerPC

00:31:31.099 --> 00:31:34.829
to Intel meant that you had a 2-way universal binary.

00:31:34.829 --> 00:31:40.149
Now you're going to have a 3-way universal
one and you just need to add one architecture

00:31:40.150 --> 00:31:45.130
to your make files, x86_64.

00:31:45.130 --> 00:31:48.350
And hopefully that won't be too hard to do either.

00:31:48.349 --> 00:31:51.949
Okay so that's really all you need to know about it.

00:31:51.950 --> 00:31:57.350
I hope I've really motivated you to use the 64-bit
VM because it is really going to be a painless process

00:31:57.349 --> 00:32:02.250
and we really hope that Java is one of the
places where it gets adopted as soon as possible.

00:32:02.250 --> 00:32:03.869
So thank you.

00:32:06.869 --> 00:32:08.829
Back to Matt.

00:32:08.829 --> 00:32:09.659
( Applause )

00:32:09.660 --> 00:32:11.370
>> Thank you Victor.

00:32:13.740 --> 00:32:19.640
So that was the guts view, everything underneath.

00:32:19.640 --> 00:32:22.490
Let's talk a little bit about Java on the desktop.

00:32:22.490 --> 00:32:32.720
The thing to keep in mind is when you're deploying cross
platform portable desktop applications yes you can write

00:32:32.720 --> 00:32:36.579
Java code and compile it and have
it execute just about anywhere,

00:32:36.579 --> 00:32:39.980
write once run anywhere, that's what we've always said.

00:32:39.980 --> 00:32:43.640
But when you get into a desktop experience
there really is more to it than that

00:32:43.640 --> 00:32:46.060
and it's important that everybody realizes it.

00:32:46.059 --> 00:32:51.490
Today's operating systems, there are more of them
than ever, there are more successful ones than ever

00:32:51.490 --> 00:32:54.730
and they've branched off in a bunch of different directions.

00:32:54.730 --> 00:33:00.549
And users are more sophisticated and
unfortunately pickier than they've ever been.

00:33:00.549 --> 00:33:07.430
And that jar file alone, that executable code is not
necessarily enough to just kind of get you up to snuff,

00:33:07.430 --> 00:33:15.990
that one jar file is not going to really look
right in place here and here and here and here.

00:33:15.990 --> 00:33:20.589
So these are things that you know obviously
you've saved yourself some time by writing a ton

00:33:20.589 --> 00:33:23.309
of core logic that's going to work everywhere.

00:33:23.309 --> 00:33:28.470
But if you really want to be successful alongside
all of these other things it's going to be up to you

00:33:28.470 --> 00:33:32.430
to pay attention, not just on the
Mac but in other places as well.

00:33:32.430 --> 00:33:40.200
What is it going to take to have users not, the goal
basically is to have users not know what you've done.

00:33:40.200 --> 00:33:44.990
Now somebody like my dad doesn't know what Java is he's
not going to know whether something is written in Java

00:33:44.990 --> 00:33:51.279
but he may very well know that there's something
not quite right with what he's looking at.

00:33:51.279 --> 00:33:56.750
So I can talk to you, I can't talk about the other
ones but I can tell you what Mac users expect.

00:33:56.750 --> 00:34:01.930
First of all they expect a self-contained
relocated, relocatable application bundle.

00:34:01.930 --> 00:34:07.509
A double-clickable like you saw this
morning with the Maple and Cineshot demos.

00:34:07.509 --> 00:34:09.500
They expect very easy installation.

00:34:09.500 --> 00:34:14.690
We're going to talk about that and you know,
how easy it is for you to give that to them.

00:34:14.690 --> 00:34:17.809
And they, if nothing else, they expect a native menu bar.

00:34:17.809 --> 00:34:25.420
And we've gone out of our way over the years
to make this as easy as possible for you to do.

00:34:25.420 --> 00:34:28.480
So let's start with the first point.

00:34:28.480 --> 00:34:31.980
By now I'm sure you've seen the keynote,
you've seen your build of Leopard,

00:34:31.980 --> 00:34:34.139
here's the new cover flow view of the finder.

00:34:34.139 --> 00:34:38.500
Now the thing to take home here is that just browsing

00:34:38.500 --> 00:34:44.159
around the hard drive is becoming immersive,
more visual, more personal experience.

00:34:44.159 --> 00:34:48.569
So just think long and hard, if you've
got something that you're thinking

00:34:48.570 --> 00:34:52.070
of deploying, is it really going to work out here?

00:34:52.070 --> 00:34:59.340
I've got iTunes, I've moved down to mail, and
then I've just got this jar file hanging out here.

00:34:59.340 --> 00:35:02.430
Does this jar file run on Mac OS X?

00:35:02.429 --> 00:35:03.289
Absolutely.

00:35:03.289 --> 00:35:07.340
Does this jar file look good right
between mail and photo booth?

00:35:07.340 --> 00:35:08.370
Not exactly.

00:35:08.369 --> 00:35:11.139
So what can we do about that?

00:35:11.139 --> 00:35:15.639
Well fortunately it's very, very easy.

00:35:15.639 --> 00:35:22.129
Looking like you belong on Mac OS X is actually not
that hard and it certainly is not a portability issue.

00:35:22.130 --> 00:35:24.210
Creating one of these bundles is super simple.

00:35:24.210 --> 00:35:32.159
They're basically self contained folders that can be moved
anywhere without affecting the execution of the application.

00:35:32.159 --> 00:35:35.879
They're relocatable and they're
really easy for you to create.

00:35:35.880 --> 00:35:37.760
Even in an automated fashion.

00:35:37.760 --> 00:35:39.630
And there are a lot of people who get this.

00:35:39.630 --> 00:35:43.710
You saw Cineshot and Maple this morning
who are doing really wonderful stuff.

00:35:43.710 --> 00:35:44.849
But even the tools.

00:35:44.849 --> 00:35:52.409
I mean if there's anybody who can get away with kind of not
going the extra mile to fit in it's developer tools, right?

00:35:52.409 --> 00:35:56.960
My audience is a bunch of developers they can go
ahead and read, they can go to the wikies, whatever.

00:35:56.960 --> 00:36:03.320
But even these guys, even the Eclipses and NetBeans and
the Ideas, they get it, they understand what it takes

00:36:03.320 --> 00:36:08.190
to just really at least look like
you've downloaded the right thing.

00:36:08.190 --> 00:36:13.030
And so I'd like to thank them for doing that as well.

00:36:13.030 --> 00:36:18.410
So let's talk about bundles and what, you
know, what's the deal with these bundles.

00:36:18.409 --> 00:36:22.339
We'll talk about if you have a finished product
that you're just bringing over to the platform,

00:36:22.340 --> 00:36:25.590
you don't need to make any code
changes, the best way to do that.

00:36:25.590 --> 00:36:29.870
We'll go into kind of under the covers
and see what these bundles are made of

00:36:29.869 --> 00:36:33.650
and what's specific to Java applications.

00:36:33.650 --> 00:36:40.059
Then we'll talk about adapting your daily or regular
build routine to kind of do this in a very simple fashion

00:36:40.059 --> 00:36:43.179
because we want you to do it, we want it to be easy for you.

00:36:43.179 --> 00:36:46.659
And then we'll talk about how you can go ahead
and deploy those and get them into the hands

00:36:46.659 --> 00:36:49.500
of your users the best way, the way that they expect.

00:36:49.500 --> 00:36:54.530
So to start, bundling a finished product.

00:36:54.530 --> 00:36:57.470
I've got my jar or jars in my resources, you know,

00:36:57.469 --> 00:37:01.329
I've got a shell script most likely,
how do I make a bundle out of this?

00:37:01.329 --> 00:37:05.299
Well we have a great tool called Jar
Bundler, it makes this very easy.

00:37:05.300 --> 00:37:10.240
You basically just drop everything into the resources tab.

00:37:10.239 --> 00:37:15.819
We set your class path, we create the folder structure, we
set all the relevant properties, you can add other things

00:37:15.820 --> 00:37:19.850
in like whatever you would normally specify
in the command line, or in the environment,

00:37:19.849 --> 00:37:22.059
and we've even got a great tool called Icon Composer

00:37:22.059 --> 00:37:26.349
which can get you a little desktop
icon in just a couple of seconds.

00:37:26.349 --> 00:37:32.179
And I'd like to show you that right now.

00:37:32.179 --> 00:37:42.119
Okay. So I'd like to show you a little random
app that I pulled down from SourceForge.

00:37:42.119 --> 00:37:48.299
It's called jscicalc and you know, I'm a
developer so this is not too scary to me,

00:37:48.300 --> 00:37:51.490
but again my dad is not going to be a big fan of this.

00:37:51.489 --> 00:37:56.089
So I call my dad and I tell him okay you've
got to type all this stuff in terminal.

00:37:56.090 --> 00:37:59.789
Not the best idea, but let's go
ahead and see what they've done.

00:37:59.789 --> 00:38:03.880
As it turns out they've gone ahead and at least
put a manifest file in here so it's not going

00:38:03.880 --> 00:38:05.849
to be too bad, too hard to at least run it.

00:38:05.849 --> 00:38:08.659
Oh darn. What's happened here?

00:38:08.659 --> 00:38:11.879
Unsupported class version.

00:38:11.880 --> 00:38:17.650
So this looks like it was built for one
five and I happen to be running 1.4.

00:38:17.650 --> 00:38:21.400
I'm going have to hack the sim link
again or change the preferences.

00:38:21.400 --> 00:38:25.099
Well no because we already did all
that alias stuff in the previous demo.

00:38:25.099 --> 00:38:28.099
I can just go ahead and select Java 1.5.

00:38:30.170 --> 00:38:32.940
And now it's running, beautiful.

00:38:32.940 --> 00:38:34.650
So here we are.

00:38:34.650 --> 00:38:37.320
And the first thing you notice is
actually this looks pretty good.

00:38:37.320 --> 00:38:42.950
You know it's pure job application, we've
got all the aqua look and feel pre-installed

00:38:42.949 --> 00:38:47.199
and one thing you should notice right away is
we've actually got an application menu up here

00:38:47.199 --> 00:38:53.199
and at the moment it's using the fully qualified
main class name for the application name.

00:38:53.199 --> 00:38:55.579
We'll take care of that in a second.

00:38:55.579 --> 00:38:56.449
So we're getting there.

00:38:56.449 --> 00:38:57.549
The thing at least runs.

00:38:57.550 --> 00:39:00.690
But what we'd really like to do is
give this a better desktop presence.

00:39:00.690 --> 00:39:03.110
All these other files here, we don't actually need.

00:39:03.110 --> 00:39:06.180
So I'm going to go ahead and launch Jar Bundler.

00:39:06.179 --> 00:39:13.529
And very simple app, I'll go over here to the
class path and files tab, drag this jar in,

00:39:13.530 --> 00:39:16.470
you see it when ahead and set the class path for me already?

00:39:16.469 --> 00:39:19.799
And the main class, I saw it up
in the menu bar but you know,

00:39:19.800 --> 00:39:23.080
let's assume that I don't necessarily
know what the main class is.

00:39:23.079 --> 00:39:28.449
Let's go ahead and just give the jar file over here too
and it actually went ahead and scanned the entire jar

00:39:28.449 --> 00:39:31.009
to find classes with the main definition in it.

00:39:31.010 --> 00:39:36.770
Got a little quirk here, I need
to actually put a dot in here.

00:39:36.769 --> 00:39:40.960
And you can see that we do provide you with
a generic job application icon but you know,

00:39:40.960 --> 00:39:44.030
we would want something a little more personal, personable.

00:39:44.030 --> 00:39:46.840
Let's see, there's actually a bunch of screenshots in here.

00:39:46.840 --> 00:39:53.829
So let's see what they've given us here, 256,
multiple resolution, that unfortunately is not a screenshot

00:39:53.829 --> 00:39:58.000
from Mac OS X. It's totally unacceptable.

00:39:58.000 --> 00:40:01.420
Let's go ahead and try to just get a
good quick screen shot of our own here.

00:40:01.420 --> 00:40:07.930
For those of you who are new to the platform
or perhaps not as much of a geek as others,

00:40:07.929 --> 00:40:12.309
command+shift+4 will let you go ahead and
drag a region of the screen to take a screenshot.

00:40:12.309 --> 00:40:18.610
But if you actually hit the space bar,
you can get a perfectly cropped screenshot

00:40:18.610 --> 00:40:23.740
of any given window, including the shadow.

00:40:23.739 --> 00:40:25.399
So quite nice, perfect.

00:40:25.400 --> 00:40:26.630
We're all ready to go now.

00:40:26.630 --> 00:40:31.200
I'll quit out of this again, hide this window.

00:40:31.199 --> 00:40:35.439
So once we get this icon, it needs to
be in the Mac OS X .icons format.

00:40:35.440 --> 00:40:40.409
So I'll open up Icon Composer, drag our new picture
in and we go ahead and it went ahead and scaled

00:40:40.409 --> 00:40:42.899
down to all the sizes that we're going to need.

00:40:42.900 --> 00:40:45.519
Let me save this.

00:40:45.519 --> 00:40:48.250
calc.icons

00:40:48.250 --> 00:40:52.639
Great, we'll drag that in.

00:40:54.010 --> 00:40:57.800
Alright. And basically I click create application.

00:40:57.800 --> 00:41:02.640
And save it on the desktop, call it jscicalc.

00:41:02.639 --> 00:41:07.039
It looks like we've got a little refresh
issue and I was looking at this before.

00:41:07.039 --> 00:41:11.539
But basically it does work I can go
ahead and launch it and there we are.

00:41:11.539 --> 00:41:17.150
So now we've got a double clickable application which
should have an icon that we can see but not at the moment.

00:41:17.150 --> 00:41:19.820
You can see it here on the dock.

00:41:19.820 --> 00:41:21.490
So there we go.

00:41:21.489 --> 00:41:25.000
If I wasn't talking so much this
would've taken less than sixty seconds.

00:41:25.000 --> 00:41:29.980
Another thing to mention is you notice that
now the name is proper up in the menu bar.

00:41:29.980 --> 00:41:34.909
I've gone ahead and because I specified that name
that while we were creating the application bundle,

00:41:34.909 --> 00:41:40.739
Jar Bundler went ahead and did what was
necessary to make that happen at runtime.

00:41:40.739 --> 00:41:43.459
And that's pretty much it for this demo.

00:41:43.460 --> 00:41:46.320
Can we go back to slides please?

00:41:46.320 --> 00:41:56.240
So that's the kind of quick one off situation if
you've got some stuff that's already built and you want

00:41:56.239 --> 00:42:00.619
to throw things all over the stage,
Jar Bundler's the way to go.

00:42:00.619 --> 00:42:02.679
Very simple very straightforward.

00:42:02.679 --> 00:42:05.409
So what's inside this bundle?

00:42:05.409 --> 00:42:07.670
What did we actually just create?

00:42:07.670 --> 00:42:14.090
So let's talk about the bundle structure, all the resources
that are in there, the info plists as we call it for short,

00:42:14.090 --> 00:42:19.870
information property list is the officially
sanctioned definition of the term.

00:42:19.869 --> 00:42:27.279
And the application stub which is the little piece of
executable magic that makes this thing double-clickable.

00:42:27.280 --> 00:42:29.280
So first of all the anatomy, what is this?

00:42:29.280 --> 00:42:34.760
We just saw this bundle get created on the desktop
so if I right-click on this or control-click on it

00:42:34.760 --> 00:42:40.150
and I click show package contents it actually brings
me right inside and it turns out this is just a folder.

00:42:40.150 --> 00:42:44.970
It's just all that stuff that we dragged into Jar Bundler
just gets thrown into a folder with a .app extension

00:42:44.969 --> 00:42:47.199
and then Mac OS X knows what to do with it.

00:42:47.199 --> 00:42:51.710
I'm of course paraphrasing a little bit
but I'm about to go into more detail.

00:42:51.710 --> 00:42:56.050
So you start with this contents directory, you go in
there and you start to see a bunch of other things.

00:42:56.050 --> 00:42:57.990
The first thing you see is the resources directory.

00:42:57.989 --> 00:43:03.019
Now again this is not Java specific this is
standard Mac OS X 101 bundling stuff.

00:43:03.019 --> 00:43:07.099
If you open a Cocoa application
you're going to see the same thing.

00:43:07.099 --> 00:43:12.900
Inside the resources directory we have that icons file
that we just created with Icon Composer but you don't know

00:43:12.900 --> 00:43:17.820
that because we just dragged it on top of jar
bundler and then we also have this Java directory.

00:43:17.820 --> 00:43:21.370
Obviously being called Java this
is some Java specific stuff.

00:43:21.369 --> 00:43:22.690
So what's in here?

00:43:22.690 --> 00:43:25.220
Well in this case a very simple application.

00:43:25.219 --> 00:43:26.439
It's just a jar file.

00:43:26.440 --> 00:43:31.740
But other things like images that you're going
ahead and loading using the tool kit, JNI libraries,

00:43:31.739 --> 00:43:35.679
all that stuff is going to go here
in the Java resources directory.

00:43:35.679 --> 00:43:44.940
So again that's Contents/Resources/Java off the top of the
bundle, JNI libs, jar files and also raw class directories

00:43:44.940 --> 00:43:46.720
if that's how you've been deploying things.

00:43:46.719 --> 00:43:50.149
You can throw those right in there, they're
on the class path as well as the library path

00:43:50.150 --> 00:43:52.590
which is how the JNI libs can just be thrown in.

00:43:52.590 --> 00:43:55.220
So really that's another thing that bundling gets you.

00:43:55.219 --> 00:44:00.559
If you happen to be using a lot of JNI libraries, now you
don't even need to worry about Java.library.path.

00:44:00.559 --> 00:44:04.279
Just throw it in the bundle and you're done.

00:44:04.280 --> 00:44:09.460
So one level up at contents resources this
is now again the generic Mac OS X stuff.

00:44:09.460 --> 00:44:15.130
Your icon file lives there as you saw, resolution
independent images, this is very relevant in Leopard

00:44:15.130 --> 00:44:18.050
and we're going to be talking about that tomorrow.

00:44:18.050 --> 00:44:23.920
We've made that really very easy for you to adopt as Tom
said this morning, we're going to go into detail tomorrow

00:44:23.920 --> 00:44:27.070
as to just how to take advantage of that.

00:44:27.070 --> 00:44:28.620
As well as nib files.

00:44:28.619 --> 00:44:34.179
If you want to go ahead and get fancy and start adding
some real Cocoa, loadable Cocoa UI in your application,

00:44:34.179 --> 00:44:37.849
maybe you just load it into a nib
and do what's necessary to do

00:44:37.849 --> 00:44:40.690
that communication between the Cocoa and Java environments.

00:44:40.690 --> 00:44:45.240
You can just drop your nib in contents resources
and then load it using your Cocoa code later.

00:44:45.239 --> 00:44:51.500
And we'll be taking a glance at that as
well tomorrow in the advanced session.

00:44:51.500 --> 00:44:54.079
Okay. So we've buried down into the Java area.

00:44:54.079 --> 00:44:57.059
Let's go back up to the contents directory.

00:44:57.059 --> 00:45:00.630
Next thing you see is this information
property list file, info plist for short.

00:45:00.630 --> 00:45:02.960
You're going to hear people toss this around a lot.

00:45:02.960 --> 00:45:09.990
Victor already mentioned it in terms of specifying
your preferred architectures for 32, 64.

00:45:09.989 --> 00:45:11.649
So what is this plist file?

00:45:11.650 --> 00:45:19.300
Well it has a lot of typical properties for any Mac OS X
operation, like the unique bundle identifier which is used

00:45:19.300 --> 00:45:27.420
by anything from parental controls to
installers to document identification.

00:45:27.420 --> 00:45:32.230
The display name, in other words the name that appears
up there in the application and you notice that,

00:45:32.230 --> 00:45:35.780
that changed between running it as
a jar and running it as a bundle.

00:45:35.780 --> 00:45:40.700
That was, that information, that name was stored
in the info plist file as well as document types.

00:45:40.699 --> 00:45:50.109
You remember Pritique this morning double-clicked on a
Maple document and that opened up right away in Maple.

00:45:50.110 --> 00:45:56.700
So there's some Java code that you need to write to make
that work on the runtime side but on the finder side

00:45:56.699 --> 00:46:01.980
on the system side, it's as simple as just adding
the document types in you info plist file.

00:46:01.980 --> 00:46:03.570
I've also got Java information there.

00:46:03.570 --> 00:46:07.289
All the standard stuff you would normally
use outside of a bundle like class path,

00:46:07.289 --> 00:46:11.320
main argument system properties, and the preferred version.

00:46:11.320 --> 00:46:16.400
And we typically recommend you use the +
or * modifiers when you're specifying.

00:46:16.400 --> 00:46:23.369
The key is called JVM version and let's say you do a 1.4
or a 1.4+, a 1.4* and basically

00:46:23.369 --> 00:46:30.519
that gets you some insurance in case when we say
deprecated something, or altogether remove it,

00:46:30.519 --> 00:46:33.329
this ensures that whatever version
you've requested you'll just kind

00:46:33.329 --> 00:46:36.079
of automatically be moved forward to the next version.

00:46:36.079 --> 00:46:39.639
Perfect example is 1.3 which is no longer on Leopard.

00:46:39.639 --> 00:46:44.670
Somebody, any bundle out there that has
1.3+ as its preferred JVM version

00:46:44.670 --> 00:46:46.889
in the bundle is not going to have any problems.

00:46:46.889 --> 00:46:52.489
We're just going to use whatever
is the latest on the system.

00:46:52.489 --> 00:46:58.689
So more concrete examples of what this plist means and
how it translates to what you would normally do in Java.

00:46:58.690 --> 00:47:06.590
So up here you see I've got a class path variable and
I've got a main class and an argument to the main method.

00:47:06.590 --> 00:47:09.769
All this stuff lives down in the
Java dictionary in the plist file.

00:47:09.769 --> 00:47:17.539
So you can see we have a class path, property,
we've got main class, as well as any arguments.

00:47:17.539 --> 00:47:21.170
And most of these things are strings but
you notice the arguments is done in array.

00:47:21.170 --> 00:47:24.490
And for those of you who haven't used
property list editor, you can go ahead

00:47:24.489 --> 00:47:29.149
and just very visually just click new
sibling and have these new entries.

00:47:29.150 --> 00:47:33.210
This is actually an XML file underneath,
you're free to edit yourself.

00:47:33.210 --> 00:47:36.570
But property list editor is a nice
abstract way of managing this.

00:47:36.570 --> 00:47:42.750
You'll notice also the JVM version key
that's here that's specified 1.4+.

00:47:42.750 --> 00:47:45.460
So another example would be replacing system properties,

00:47:45.460 --> 00:47:49.070
the kind of stuff that you would
put in a -d at the command line.

00:47:49.070 --> 00:47:52.390
So this stuff, we also have a properties
dictionary, and this is a dictionary

00:47:52.389 --> 00:47:54.710
because it's going to support multiple versions.

00:47:54.710 --> 00:47:58.740
Who knows how many -d arguments
you've got there on the command line.

00:47:58.739 --> 00:48:06.429
So in this case we go ahead and just take the key
and the value and map them up into the dictionary.

00:48:06.429 --> 00:48:15.129
So non standard VM options, the -x type stuff
that you tend to use a lot in the command line.

00:48:15.130 --> 00:48:18.650
Also we have a VM option string and
you'll notice this is not a dictionary

00:48:18.650 --> 00:48:22.950
like the system properties this is a string, and
that's just a Java thing that's a hotspot thing,

00:48:22.949 --> 00:48:29.449
those non standard properties, the -x, those are all
read in and interpreted as a single string by the VM.

00:48:29.449 --> 00:48:32.059
So we only provide that as a string.

00:48:32.059 --> 00:48:34.929
So that's the plist file.

00:48:34.929 --> 00:48:39.149
And it's actually if you're using something like Jar Bundler
it's actually more information than you need to know.

00:48:39.150 --> 00:48:42.220
You actually never even necessarily have to open this file.

00:48:42.219 --> 00:48:46.459
So there's one more thing and it's the Mac OS directory.

00:48:46.460 --> 00:48:51.829
This is where the real executable is stored and again
this is something that every bundle, whatever language

00:48:51.829 --> 00:48:53.860
or framework it's using is going to have.

00:48:53.860 --> 00:48:57.880
And inside that Mac OS bundle there's a little
piece of executable code and in the case

00:48:57.880 --> 00:49:00.200
of Java we call that the Java application stub.

00:49:00.199 --> 00:49:03.219
So what does the stub do?

00:49:03.219 --> 00:49:06.480
Like I said it's a little piece of executable,
it's a little executable that launches the VM,

00:49:06.480 --> 00:49:13.349
in enables some of the launch time event handlers for
things like document handling as well as alerting your code

00:49:13.349 --> 00:49:17.159
that the application is finished launching,
it's similar to opening documents.

00:49:17.159 --> 00:49:21.319
The finder also has the ability to pass
off a document that you want to be printed.

00:49:21.320 --> 00:49:25.519
All of these things are managed by the stub.

00:49:25.519 --> 00:49:31.710
It starts its life in the framework, inside the
contents resources directory of the JavaVM.framework

00:49:31.710 --> 00:49:36.320
and there's only one copy of it so basically
every Java release we do we update the stub.

00:49:36.320 --> 00:49:39.650
But the stub itself is universal across JVM versions.

00:49:39.650 --> 00:49:44.309
Now because it's copied, because your deployed
application is going to carry around a copy

00:49:44.309 --> 00:49:48.779
of this stub everywhere it goes, we
strongly suggest updating the stub.

00:49:48.780 --> 00:49:53.110
We do a lot of work to just kind of make it as
small as possible, as efficient as possible,

00:49:53.110 --> 00:49:55.380
add little bells and whistles from time to time.

00:49:55.380 --> 00:50:01.970
So whenever you get the chance go ahead and update your
stub with whatever came from the latest Java release.

00:50:01.969 --> 00:50:05.409
Now I want to highlight that last word release.

00:50:05.409 --> 00:50:11.329
The DVD that you receive this Monday
is not a release it is a Beta.

00:50:11.329 --> 00:50:19.860
So please do not distribute a finished shrink
wrapped application using executables from that Beta.

00:50:19.860 --> 00:50:24.539
And it seems like common sense but you'd be
surprised how many people actually do it.

00:50:24.539 --> 00:50:26.880
So I felt the need to call that out.

00:50:26.880 --> 00:50:29.160
Thank you for cooperating.

00:50:29.159 --> 00:50:37.349
So we talked about the easy case or the one
off case but that's really not how we operate.

00:50:37.349 --> 00:50:42.960
We go ahead and we do nightly builds maybe weekly
builds and we don't want to just get up and go to the,

00:50:42.960 --> 00:50:47.059
go to our computer and manual use Jar Bundler every time.

00:50:47.059 --> 00:50:50.400
So how can we do this in an automated fashion.

00:50:50.400 --> 00:50:57.400
Well for starters our Xcode IDE of course
does application bundling very easily.

00:50:57.400 --> 00:51:02.320
And if you're going, if you're using Ant and it's very
highly likely that you're using Ant if you're using one

00:51:02.320 --> 00:51:09.170
of those IDEs that you saw listed before, this is a
great option because Ant is extensible, it's automatable

00:51:09.170 --> 00:51:12.960
and like I said it's transferrable to
all of these IDEs the most popular ones.

00:51:12.960 --> 00:51:15.829
So we've got all the pieces we need so what do we do?

00:51:15.829 --> 00:51:21.170
Well what's great about the new Xcode
in Leopard is that we've re-tasked all

00:51:21.170 --> 00:51:24.670
of our Java application templates to use Ant.

00:51:24.670 --> 00:51:29.240
So when you're building, when you
start a Java application in Xcode,

00:51:29.239 --> 00:51:31.959
a Java project in Xcode it's really just an Ant project.

00:51:31.960 --> 00:51:33.750
And you're going to see that in a second.

00:51:33.750 --> 00:51:35.349
And we've got a package subtask.

00:51:35.349 --> 00:51:39.099
We've got an Ant-based task now that
creates the application bundle for you

00:51:39.099 --> 00:51:42.000
and that's something you can go ahead
and just use and reappropriate anywhere.

00:51:42.000 --> 00:51:47.550
So if you happen to not even be building
on Mac OS X there's an option for you.

00:51:47.550 --> 00:51:50.980
And I would like to show you that right now.

00:51:54.210 --> 00:51:58.000
Get this calculator out of the way.

00:51:58.000 --> 00:52:03.860
So first thing I need is a PC and they're kind of hard to
come by in this building so I'm going to call on our friends

00:52:03.860 --> 00:52:08.329
from Parallels of course to save me some time and trouble.

00:52:08.329 --> 00:52:13.409
Of course this Is a demo so I've got something all ready.

00:52:13.409 --> 00:52:20.839
I've got this Java project here I'm going to
just go right to DOS and go to the desktop.

00:52:20.840 --> 00:52:25.700
I'll go ahead in here and let's see
what this looks like over in Explorer.

00:52:25.699 --> 00:52:29.879
So right, Ant-based project, very simple stuff.

00:52:29.880 --> 00:52:31.840
Let's run it.

00:52:31.840 --> 00:52:34.160
Oh it looks pretty good that font there.

00:52:34.159 --> 00:52:37.219
I thought the command prompt would be small.

00:52:37.219 --> 00:52:43.689
So right. Typical Java application,
nothing special, it's running on Windows.

00:52:43.690 --> 00:52:44.880
Fantastic.

00:52:44.880 --> 00:52:49.230
But what does this actually getting us?

00:52:49.230 --> 00:52:51.769
What's being built?

00:52:51.769 --> 00:52:58.000
Well there's really nothing in here other
than some build stuff, there's a jar in here

00:52:58.000 --> 00:53:00.510
and we've already been through that routine right?

00:53:00.510 --> 00:53:02.320
This is not good enough anymore.

00:53:02.320 --> 00:53:03.330
So what are we going to do?

00:53:03.329 --> 00:53:06.650
I'm building on Windows I don't have a Mac in front of me.

00:53:06.650 --> 00:53:08.789
Let's go over to Xcode.

00:53:08.789 --> 00:53:13.179
Let's just use a Mac for a couple
of minutes if you can manage.

00:53:13.179 --> 00:53:19.539
I'll start a new project, and lets
create a new Java application

00:53:19.539 --> 00:53:25.300
and I will call it, put it in temp, I'll call it test.

00:53:25.300 --> 00:53:31.930
So the first thing you notice, looking at all the files
in here, is this is very clearly an Ant-based project.

00:53:31.929 --> 00:53:35.879
So all I've done is file new and I've
got an Ant project in front of me right?

00:53:35.880 --> 00:53:41.680
So and you know, we're not even going to build and run
this all we're going to do is pay attention to the things

00:53:41.679 --> 00:53:44.509
that are specific to the Macs, specific to the bundle.

00:53:44.510 --> 00:53:48.470
We've got this resources_Mac OS X
directory, again this is part of the template.

00:53:48.469 --> 00:53:50.829
This is not a precooked demo.

00:53:50.829 --> 00:53:54.159
We've got our plist file, we've got our
icons file, those were those two things

00:53:54.159 --> 00:53:56.690
in that anatomy, in those anatomy slides that we needed.

00:53:56.690 --> 00:53:58.750
There's one other thing we need and that's the stub.

00:53:58.750 --> 00:54:02.559
So let's go get it.

00:54:02.559 --> 00:54:14.119
System/library/frameworks/JavaVM.framework/resources
/Mac OS.

00:54:14.119 --> 00:54:16.699
Mac OS. There we are.

00:54:16.699 --> 00:54:22.579
Now I'm just going to actually drag,
actually, no I need to view this in finder.

00:54:22.579 --> 00:54:27.869
I'm just going to go head and drag the stub in here.

00:54:27.869 --> 00:54:32.829
So now we've got everything we need and the idea here
is that we're just going to move this over in a moment.

00:54:32.829 --> 00:54:35.519
So let's see what's going on in the build out XML file.

00:54:35.519 --> 00:54:46.960
Like I said there's a package subtask here so let's
go down here to package, let's see what's going on.

00:54:48.030 --> 00:54:51.610
And right here is your Ant task, this
is what does the packaging for you.

00:54:51.610 --> 00:54:52.880
So it's basically ready to go.

00:54:52.880 --> 00:54:56.710
There's one thing we need to do here
which is get rid of this Unix executable

00:54:56.710 --> 00:55:01.369
since we're not going to be building on Unix of course.

00:55:01.369 --> 00:55:03.589
Let me copy this.

00:55:03.590 --> 00:55:11.130
And because Parallels is so awesome, I
can just start moving this stuff over.

00:55:11.130 --> 00:55:17.579
Actually I'm going to, excuse me,
let's go get this folder first.

00:55:17.579 --> 00:55:27.469
Start by copying over the resources
Mac OS X folder, copy, back over here

00:55:27.469 --> 00:55:41.909
and there's our resources Mac OS X. Open this guy with WordPad,
I've got this on the paste board, did I just, yes I did.

00:55:41.909 --> 00:55:43.299
I just pasted it twice.

00:55:43.300 --> 00:55:45.410
Okay we'll go down to once.

00:55:45.409 --> 00:55:50.259
So we've got a bunch of properties here like
application.resources.Javaapplication.Mac OS.

00:55:50.260 --> 00:55:53.050
Obviously these are specific to our Xcode project.

00:55:53.050 --> 00:55:55.170
Let's go get those as well.

00:55:55.170 --> 00:56:00.490
Resources Mac OS, come on, okay.

00:56:03.869 --> 00:56:13.219
WordPad. Let's go up to the top here and I could've
prebaked this but basically I just want to show you guys

00:56:13.219 --> 00:56:16.909
that there's no trickery here and
that it's very straightforward.

00:56:16.909 --> 00:56:20.009
So and the other thing we want to do is you might notice

00:56:20.010 --> 00:56:25.200
that there's a hard link to the
framework for the stub right now.

00:56:25.199 --> 00:56:36.799
So let's go ahead and change that to resources/Mac
OS X. And that should be all that we need to do.

00:56:36.800 --> 00:56:45.470
Oh actually I need to change, of course I need
to include the file name, and let's see here.

00:56:45.469 --> 00:56:48.519
Let's try our new package task.

00:56:48.519 --> 00:56:49.530
Build successful.

00:56:49.530 --> 00:56:51.960
Yeah well, we'll see.

00:56:51.960 --> 00:56:54.820
Let's see, let's go in the disk directory and test that app.

00:56:54.820 --> 00:56:58.150
And like I said, if you didn't believe
me before, windows is backing me up.

00:56:58.150 --> 00:57:00.559
This is really just a folder.

00:57:00.559 --> 00:57:05.380
Obviously Windows doesn't know what do
with that, let's go ahead and zip it.

00:57:05.380 --> 00:57:07.780
Suck it over here.

00:57:07.780 --> 00:57:14.880
There we go we've got our application
it's got an icon, and wow it runs.

00:57:14.880 --> 00:57:19.880
( applause )

00:57:19.880 --> 00:57:25.590
So even if you're not using the Mac to build
and deploy and obviously we would like you to.

00:57:25.590 --> 00:57:27.320
But if that's the case we understand.

00:57:27.320 --> 00:57:32.950
There's really no reason to not
be doing this to not give yourself

00:57:32.949 --> 00:57:35.799
that proper desktop image, that proper desktop presence.

00:57:35.800 --> 00:57:37.250
I mean this is no brainer stuff.

00:57:37.250 --> 00:57:39.409
And we've done it in just a few minutes.

00:57:39.409 --> 00:57:44.529
And at this point once you've got it
into Ant you can do it every night.

00:57:44.530 --> 00:57:46.220
Back to slides please.

00:57:46.219 --> 00:57:51.559
So a little about deployment.

00:57:51.559 --> 00:57:58.500
The typical distribution mechanism for double
clickable applications on Mac OS X is a disk image.

00:57:58.500 --> 00:58:01.869
You can think of it as an ISO if
you're from the windows world.

00:58:03.230 --> 00:58:09.659
And this is one thing that will require having a Mac on your
hands because we do have a command line tool called hdiutil

00:58:09.659 --> 00:58:11.659
that will allow you to create a disk image.

00:58:11.659 --> 00:58:14.769
If you don't have a Mac on your hands,
you don't have one that's automatable,

00:58:14.769 --> 00:58:16.559
you can go ahead and just create a tar ball.

00:58:16.559 --> 00:58:23.259
A tar plus gzip or standard zip like I just
did as you saw me dragging out of Parallels.

00:58:23.260 --> 00:58:29.640
If nothing else, what we really expect, or what our users
really expect is to just be able to drag with a thing.

00:58:29.639 --> 00:58:33.940
That's the whole point of making these
application bundles is it's one file on the system

00:58:33.940 --> 00:58:38.740
that has everything that's needed to run the
application which is really not too much to ask.

00:58:38.739 --> 00:58:40.489
And it just works.

00:58:40.489 --> 00:58:43.829
Now this is a good example, this  MarsEdit package.

00:58:43.829 --> 00:58:48.840
This is a disk image and when the image is mounted
you'll see this nice, they've done a little extra

00:58:48.840 --> 00:58:55.440
and they've put a custom background in the actual
window itself and they've also included an alias,

00:58:55.440 --> 00:59:00.909
a sim link to the applications folder, which
is a known, you know, deterministic place.

00:59:00.909 --> 00:59:05.319
So this is actually a sim link to /applications
and it works on every system of course.

00:59:05.320 --> 00:59:09.140
So the user doesn't even have to open a
new window to perform the drag install,

00:59:09.139 --> 00:59:12.219
they just move it a couple pixels to the right.

00:59:12.219 --> 00:59:17.009
And if you're a move complicated application like
Maple, you saw this morning they've got a lot

00:59:17.010 --> 00:59:20.360
of sample code they've got a lot of
sample projects, a lot of supporting files

00:59:20.360 --> 00:59:23.130
that don't necessarily make sense to go into the bundle.

00:59:23.130 --> 00:59:27.170
You can use an installer, we of course
would like you to use our installer,

00:59:27.170 --> 00:59:30.329
our PackageMaker tool creates installation bundles.

00:59:30.329 --> 00:59:36.630
And you can see the Maple guys as Pritique pointed out this
morning actually did create a Mac OS X installer package.

00:59:40.010 --> 00:59:45.310
So the final thing is the screen menu
bar and I'm making a big deal out of it

00:59:45.309 --> 00:59:48.779
but it really isn't a big deal it's kind of a no brainer.

00:59:48.780 --> 00:59:51.560
It's very easy to adopt it's a system property.

00:59:51.559 --> 00:59:55.250
Apple.laf.useScreenMenuBar.

00:59:55.250 --> 00:59:58.260
It's a system property so it has
no affect on other platforms.

00:59:58.260 --> 01:00:05.550
Set it early on whether it be in your main method,
preferably as a -d in the command line or of course

01:00:05.550 --> 01:00:11.560
in the Java properties dictionary of your plist
and basically these swing J menu bars that normally

01:00:11.559 --> 01:00:17.679
in a cross platform sense appear inside the window go
right up to the top just where we would expect them to be.

01:00:17.679 --> 01:00:23.299
And of course as a last resort for whatever reason, you can
go ahead and set that in code using System.setProperty.

01:00:23.300 --> 01:00:25.550
If you're going to go that route,
you want to do that, like I said,

01:00:25.550 --> 01:00:28.110
very early like right at the top of your main method.

01:00:28.110 --> 01:00:31.140
But if nothing else before the AWT is loaded.

01:00:31.139 --> 01:00:33.359
Because we only check for this property once.

01:00:33.360 --> 01:00:38.320
So before you call tool kit, get default tool kit before
you instantiate a J frame, anything like that you want

01:00:38.320 --> 01:00:41.610
to make sure this property is set
and doing the system property

01:00:41.610 --> 01:00:46.090
and the command line and the p
list is a good way to do that.

01:00:46.090 --> 01:00:49.950
So we're going to go into this
in a little more detail tomorrow.

01:00:49.949 --> 01:00:55.669
But we have a couple of extension APIs
that allow you to take advantage of this,

01:00:55.670 --> 01:00:58.369
this application menu that you've
been seeing in all these demos.

01:00:58.369 --> 01:01:00.440
Now obviously I haven't written any code to do that.

01:01:00.440 --> 01:01:01.760
That menu just appears.

01:01:01.760 --> 01:01:07.250
That's one of the things we provide to you just to make
it that much easier to look like you belong on the system.

01:01:07.250 --> 01:01:08.889
You get that menu for free.

01:01:08.889 --> 01:01:13.859
And we allow you to do simple things like
set properties to customize the name there.

01:01:13.860 --> 01:01:20.420
Now there's a bunch of actionable things in there thought
in particular the about menu, there's a preferences item,

01:01:20.420 --> 01:01:24.059
and most importantly there's a quit item.

01:01:24.059 --> 01:01:26.349
And that's the one I really want to highlight today.

01:01:26.349 --> 01:01:29.360
Because every application has a quit event.

01:01:29.360 --> 01:01:31.019
Including yours.

01:01:31.019 --> 01:01:36.429
As soon as you launch a Java application
on Mac OS X and load the AWT you're going

01:01:36.429 --> 01:01:40.429
to get an application menu with a quit menu item.

01:01:40.429 --> 01:01:42.899
A functional quit menu item.

01:01:42.900 --> 01:01:48.789
Now all of us have tear down code like you saw
Maple this morning, are you sure you want to quit?

01:01:48.789 --> 01:01:50.369
Do you want to save this stuff?

01:01:50.369 --> 01:01:53.170
Most of us have logic that handles that stuff immediately.

01:01:53.170 --> 01:01:58.860
And it basically comes down to hooking whatever logic
you've already written into these APIs we provide for you.

01:01:58.860 --> 01:02:01.880
It's very straightforward.

01:02:01.880 --> 01:02:03.930
So implementing these quit handlers.

01:02:03.929 --> 01:02:09.210
First you want to import the com.apple.eawt
package and you want to write a simple listener

01:02:09.210 --> 01:02:15.250
that implements the application let's say listener
interface or alternately implements the, excuse me,

01:02:15.250 --> 01:02:19.900
extends the application adapter class if there's
only one method you actually want to override.

01:02:19.900 --> 01:02:26.369
So in this case we're overriding handle quit which receives
an application event that's another one of our EAWT classes

01:02:26.369 --> 01:02:29.519
and really this class should not be a whole lot of code.

01:02:29.519 --> 01:02:34.889
Like I said, if you've written an application on Windows
or Linux and you've got your are you sure logic already,

01:02:34.889 --> 01:02:38.109
you just pass off to that once you receive the event.

01:02:38.110 --> 01:02:45.900
And the event itself has a set handle method which
basically tells the system yes go ahead we're ready

01:02:45.900 --> 01:02:49.240
to quit or alternatively, no the user cancelled.

01:02:49.239 --> 01:02:50.489
And it's basically that simple.

01:02:50.489 --> 01:02:55.899
In most cases it doesn't need to
be more than two lines of code.

01:02:55.900 --> 01:03:00.230
I always forget about those builds.

01:03:00.230 --> 01:03:03.530
And again, registering this application, very easy.

01:03:03.530 --> 01:03:06.940
Go ahead and you have your main method again, similar
to the screen menu bar this is something you want

01:03:06.940 --> 01:03:11.480
to do really early, because you never know when the user's
just going to get twitchy and hit command+Q. So you want

01:03:11.480 --> 01:03:13.869
to have this handler in place very early on.

01:03:13.869 --> 01:03:18.230
You instantiate your listener, add it to the
application class as an application listener.

01:03:18.230 --> 01:03:22.690
You can add more than one of these but
for the most part you only ever need one.

01:03:22.690 --> 01:03:26.500
And go ahead and implement the methods of your choice.

01:03:27.849 --> 01:03:37.480
So I'd like to show you that right now.

01:03:37.480 --> 01:03:38.780
We're done with Windows.

01:03:38.780 --> 01:03:40.870
Round of applause for Parallels ladies and gentlemen.

01:03:40.869 --> 01:03:46.869
( applause )

01:03:46.869 --> 01:03:52.759
>> So I've got a couple of demos here of some of you
are already familiar with the OS X adapter sample.

01:03:52.760 --> 01:03:58.510
I'm just going to go ahead and run it I'm not even
going to bother with the building at the moment.

01:03:58.510 --> 01:04:03.180
So standard Java application, not so
standard actually it doesn't do a whole lot.

01:04:03.179 --> 01:04:09.629
The point of the sample is to show you how
to implement the application menu items.

01:04:09.630 --> 01:04:12.980
So we've got our about, we've got a custom about dialog.

01:04:12.980 --> 01:04:17.210
And you know, most of you guys probably have your
info dialogue that you've already written again.

01:04:17.210 --> 01:04:22.590
So this is just a matter of implementing this method
and passing it off to the code you've already written.

01:04:22.590 --> 01:04:23.950
Screen menu bar is on top.

01:04:23.949 --> 01:04:27.279
This is something I haven't mentioned by the
way and I don't know if anybody else has,

01:04:27.280 --> 01:04:29.720
but you see this search field we have now in Leopard.

01:04:29.719 --> 01:04:35.219
I think the name for this had been spotlight for
help, I don't know if that's the name of it anymore.

01:04:35.219 --> 01:04:40.250
But this just works in Java so if I go ahead and type open,

01:04:41.909 --> 01:04:46.579
it's actually searching my J menu items even
though I haven't written a single line of code

01:04:46.579 --> 01:04:48.389
or even set a system property to do that.

01:04:48.389 --> 01:04:49.309
It all just works.

01:04:49.309 --> 01:04:52.440
I hit enter and I get my, do I?

01:04:52.440 --> 01:04:54.369
No I don't.

01:04:54.369 --> 01:04:58.609
I should be getting my open dialogue any moment now.

01:04:58.610 --> 01:05:02.710
I wonder if this is Spaces having fun with me.

01:05:02.710 --> 01:05:05.769
Maybe not.

01:05:05.769 --> 01:05:14.300
So again, I also have the preferences menu item
here standard preferences dialogue and maybe not.

01:05:14.300 --> 01:05:17.240
But more importantly let's get on to the quit menu item.

01:05:17.239 --> 01:05:22.799
And this is a standard J option pane and
this icon we get for free because it's

01:05:22.800 --> 01:05:25.519
of a certain alert type and we just say are you sure?

01:05:25.519 --> 01:05:26.360
And you say no.

01:05:26.360 --> 01:05:29.170
And we didn't quit.

01:05:29.170 --> 01:05:30.690
You say yes, we do quit.

01:05:30.690 --> 01:05:36.039
Now without the application handler that
we , excuse me the application listener

01:05:36.039 --> 01:05:39.670
that we would've written nothing
would've happened here at all.

01:05:39.670 --> 01:05:42.630
So let me show you what this looks like.

01:05:42.630 --> 01:05:48.180
Again, we're going to extend the application
adapter class, we've got a bunch of stuff here,

01:05:48.179 --> 01:05:52.000
handle about and you can see these
are really short methods right?

01:05:52.000 --> 01:05:55.539
Presumably this main app class which is
our main application, has all the logic.

01:05:55.539 --> 01:06:01.679
We're just passing off to that, setting the events
as handled as necessary, similarly handle quit.

01:06:01.679 --> 01:06:05.750
If you want to delay or cancel the quit set
handle this false and that will reject the quit

01:06:05.750 --> 01:06:09.780
and allow you to opt into quitting yourself.

01:06:09.780 --> 01:06:19.290
So that's great and actually this sample goes a step
further and it actually loads this class using reflection.

01:06:19.289 --> 01:06:22.400
So that basically you don't have to mess
around with your distribution you can go head

01:06:22.400 --> 01:06:30.740
and ship that OS X adapter class and it will only ever be
loaded or even referenced on Mac OS X. So you can go ahead

01:06:30.739 --> 01:06:34.079
and still distribute one code base, have it run everywhere.

01:06:34.079 --> 01:06:40.389
And I know what you're thinking, I still have a source
file in here that's referencing com.apple.eawt.

01:06:40.389 --> 01:06:43.609
I just showed you how to use Ant on Windows
to build something and now I'm telling you

01:06:43.610 --> 01:06:46.150
to use apple specific APIs when you're building.

01:06:46.150 --> 01:06:48.690
So that was OS X adapter 1.0.

01:06:48.690 --> 01:06:53.599
Let me show you 2.0.

01:06:53.599 --> 01:06:54.739
It's another project.

01:06:54.739 --> 01:06:57.569
I went ahead and I built it in Leopard using ant.

01:06:57.570 --> 01:07:01.360
So the whole picture's starting to come together.

01:07:01.360 --> 01:07:09.059
But the adapter is a lot more interesting
than it used to be.

01:07:09.059 --> 01:07:11.090
Obviously you can see the reflect here.

01:07:11.090 --> 01:07:16.260
I don't want to get too dirty into the details this
is something you can download from the attendee's site

01:07:16.260 --> 01:07:22.560
but basically what this new sample does is it uses a proxy
object to go ahead and just dynamically create an object

01:07:22.559 --> 01:07:30.079
that responds to the handle quit, handle about
and handle preferences menu items as necessary.

01:07:30.079 --> 01:07:36.299
So basically what that means is there's no static
reference anywhere in the code to com.apple.eawt.

01:07:36.300 --> 01:07:41.539
So you can even build this, not only run this, but
now build it anywhere without any kind of stub files

01:07:41.539 --> 01:07:43.579
or dummy implementations or anything like that.

01:07:43.579 --> 01:07:44.259
( applause )

01:07:44.260 --> 01:07:48.140
>> I'm glad you appreciate it.

01:07:48.139 --> 01:07:51.230
I certainly worked hard on it.

01:07:51.230 --> 01:07:55.230
So I've actually added some functionality to the app too.

01:07:55.230 --> 01:07:57.820
So we've got something that opens here.

01:07:57.820 --> 01:08:10.460
And in case you were wondering why would we want to do
something like open image files, well of course, oh darn.

01:08:10.460 --> 01:08:13.170
I didn't change my document associations.

01:08:13.170 --> 01:08:18.279
The sample of course also does the document
association that we alluded to earlier.

01:08:18.279 --> 01:08:21.189
But I'm clearly using the wrong version of it.

01:08:21.189 --> 01:08:24.049
And Scott will go into more detail on that on Friday.

01:08:24.050 --> 01:08:29.409
Again it's just a matter of changing some plist
keys and implementing the handle open file method.

01:08:29.409 --> 01:08:35.449
And as you might imagine this thing goes
ahead and builds on windows as well.

01:08:35.449 --> 01:08:37.439
So let's see what we can do about that.

01:08:37.439 --> 01:08:48.059
Let's go to my computer, where do I want to
go, we'll make it easy we'll go to the desktop.

01:08:49.289 --> 01:08:52.210
That's 1.0, we want 2.0.

01:08:58.069 --> 01:09:01.509
Let's copy this guy over here.

01:09:01.510 --> 01:09:16.630
( keyboard clicks )

01:09:16.630 --> 01:09:18.050
>> No, no, no.

01:09:18.050 --> 01:09:21.300
OS X adapter.

01:09:21.300 --> 01:09:23.890
Sure. And let's see.

01:09:23.890 --> 01:09:28.829
And of course we can't run the double-
clickable application so let's go ahead

01:09:28.829 --> 01:09:34.149
and do the, oh excuse me, the run jar command.

01:09:34.149 --> 01:09:41.549
As you can see it builds and ran, so there's
no trickery, no magic or anything like that.

01:09:41.550 --> 01:09:48.860
Another thing worth noting is you know we've got the
open dialogue here we've got the menu bar down here,

01:09:48.859 --> 01:09:54.659
we've got an options menu in the file, excuse
me, an options menu item in the file menu.

01:09:54.659 --> 01:09:59.899
We'll go ahead and select the background color which
doesn't show up until an image is actually loaded.

01:09:59.899 --> 01:10:03.159
We've got a help menu here that has our about information.

01:10:03.159 --> 01:10:06.840
Now this stuff is down in the menu bar.

01:10:06.840 --> 01:10:09.090
Let's go back to the Mac version.

01:10:09.090 --> 01:10:13.590
Excuse me, I should probably launch, oh
there we are, there's our quit handler.

01:10:13.590 --> 01:10:20.840
Perfect. You notice that the file menu does not have the
options in there and the help does not have the about

01:10:20.840 --> 01:10:26.289
and that's because I'm just conditionally in the code
checking whether or not we're on Mac OS X and I am

01:10:26.289 --> 01:10:29.850
or am not going to include that menu
item based on where the platform is.

01:10:29.850 --> 01:10:37.470
The same logic is there, there's no code, you know when
I go ahead and open the preferences here, it goes ahead

01:10:37.470 --> 01:10:41.079
and brings up the same dialog you see over here on Windows.

01:10:41.079 --> 01:10:45.420
So this stuff is very simple and once
you look at the code you realize it's not

01:10:45.420 --> 01:10:47.960
that much work to just kind of be mindful of this.

01:10:47.960 --> 01:10:53.649
So if you're go in here and do this work in the first
place, make sure you do it right and go the distance.

01:10:53.649 --> 01:10:54.429
That's pretty much it.

01:10:54.430 --> 01:10:56.230
We can go back to slides.

01:11:00.510 --> 01:11:04.400
So the things to remember when
we're talking about the desktop.

01:11:04.399 --> 01:11:08.949
First of all I said it in the beginning,
today's users really expect more.

01:11:08.949 --> 01:11:11.319
You ask somebody to download something
and run a shell script

01:11:11.319 --> 01:11:17.859
or double-click some file that's not particularly
personal, not recognizable, I can nearly guarantee you

01:11:17.859 --> 01:11:21.269
that the average Mac user is not going
to receive that particularly well.

01:11:21.270 --> 01:11:24.210
You really want to pay attention to
the platform and I say the platform,

01:11:24.210 --> 01:11:27.060
the work Mac does not appear anywhere in this slide.

01:11:27.060 --> 01:11:31.800
It's not just Mac OS X, it's basically every
desktop environment you intend to deploy to.

01:11:31.800 --> 01:11:36.010
Make sure you think about, look at some of the
other apps whether they're written in Java or not.

01:11:36.010 --> 01:11:39.530
Look at the other apps that are on the
platform and see why they're successful.

01:11:39.529 --> 01:11:45.609
See what it is that makes users want to use this
app instead of the other one and cater to that.

01:11:45.609 --> 01:11:51.909
You can do it without sacrificing portability
and without messing up your daily routine.

01:11:51.909 --> 01:11:56.859
And obviously we'd like you to go even further
than that and do some really interesting things.

01:11:56.859 --> 01:12:02.079
And for that, if I whet your appetite sufficiently
we're going to have a lot of interesting stuff

01:12:02.079 --> 01:12:11.109
on Friday regarding client properties and JNI integration
that you can do in a still do in a portable fashion.

01:12:11.109 --> 01:12:15.099
And that session is tomorrow, Friday at 3:30.

01:12:15.100 --> 01:12:19.970
For more information you can contact
me but hopefully I've given you enough.

01:12:19.970 --> 01:12:25.270
We also have the Java-dev mailing list, those of you
who are not on it, you really need to get on this list.

01:12:25.270 --> 01:12:31.740
This is a fantastic mainly community driven mailing list
that's hosted by Apple, it's monitored by the engineers

01:12:31.739 --> 01:12:39.189
that you're going to see up on stage and in the lab but
we have a tremendous number of non-Apple gurus basically.

01:12:39.189 --> 01:12:41.619
Not just in Java but Java on the Mac.

01:12:41.619 --> 01:12:44.380
And it's a wonderful technical resource.

01:12:44.380 --> 01:12:47.489
And of course there's tons of stuff
on developer.apple.com.

01:12:47.489 --> 01:12:51.170
Not only in the public site but
on the WWDC attendee site as well.

01:12:51.170 --> 01:12:57.119
As you can guess that OS X adapter 2.0 sample is,
requires Xcode 3.0

01:12:57.119 --> 01:13:02.260
because it's using the Ant based templates but it's really
not hard to just take all of that standardized stuff

01:13:02.260 --> 01:13:05.780
out of the project and move it over to something else.

01:13:06.899 --> 01:13:12.769
We have one more lab tomorrow at 10:30am so if you
didn't catch us today and you've got some more questions,

01:13:12.770 --> 01:13:15.840
whether it be from this morning or
from this afternoon, please go ahead

01:13:15.840 --> 01:13:19.039
and stop by and hang out with us a little bit.

01:13:19.039 --> 01:13:24.630
So in summary, it really is just the same Java you're
used to whether been on the Mac or on somewhere else.

01:13:24.630 --> 01:13:29.250
We'd like to think it's even better, it's a
pre-installed JDK with a switchable command line,

01:13:29.250 --> 01:13:36.409
an easy switchable command line, we've got a 64-bit
implementation that is already ready to go.

01:13:36.409 --> 01:13:41.849
We've got easy application bundling, we've done a lot of
work over the years to just make it as simple as possible

01:13:41.850 --> 01:13:47.310
with as minimal effort to have you look
great alongside all these other applications

01:13:47.310 --> 01:13:51.080
that were built using native tools
and platform specific code.

01:13:51.079 --> 01:13:55.710
We've got built in support for Ant now so you can take a
lot of the stuff we were talking about and move it right

01:13:55.710 --> 01:13:59.359
over to other tools or even other platforms
when you're building your projects.

01:13:59.359 --> 01:14:04.969
And we've got some simple APIs that will let you
incorporate all the logic that you've already written

01:14:04.970 --> 01:14:07.869
into Mac OS X specific areas like the application menu.