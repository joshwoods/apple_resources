WEBVTT

00:00:13.779 --> 00:00:16.239
>> Welcome to session number 204.

00:00:16.239 --> 00:00:19.429
This is Fostering User Interaction with iChat.

00:00:19.429 --> 00:00:20.419
I'm Jamie Montgomerie.

00:00:20.420 --> 00:00:24.260
I'm one of the engineers on the iChat team.

00:00:24.260 --> 00:00:26.550
So the agenda for the session.

00:00:26.550 --> 00:00:29.769
First we'll talk a little about what iChat is, iChat 101.

00:00:29.769 --> 00:00:34.640
If you're not familiar with iChat or all
of iChat this should get you up to speed.

00:00:34.640 --> 00:00:39.509
Then we'll talk about observing changes in iChat using the
Instant Message Framework, how you can look for changes

00:00:39.509 --> 00:00:42.649
in iChat and react to them in your application.

00:00:42.649 --> 00:00:46.939
Then we'll talk about controlling
iChat using the AppleScript API

00:00:46.939 --> 00:00:50.329
and the Scripting Bridge, which
is a new technology in Leopard.

00:00:50.329 --> 00:00:54.359
The Scripting Bridge lets you use the
AppleScript API from your language of choice.

00:00:54.359 --> 00:00:59.850
We'll talk about Objective-C. And then
we'll have questions and answers at the end.

00:00:59.850 --> 00:01:01.100
So, iChat 101.

00:01:01.100 --> 00:01:02.829
What is iChat?

00:01:02.829 --> 00:01:03.600
Well, here it is.

00:01:03.600 --> 00:01:06.170
I'm sure we'll see you're familiar with it.

00:01:06.170 --> 00:01:09.269
iChat is Mac OS X's built-in Instant Messaging client.

00:01:09.269 --> 00:01:13.939
It works with AIM, which is AOL's
instant messaging protocol.

00:01:13.939 --> 00:01:17.009
Actually all .Mac users have an AIM handle.

00:01:17.010 --> 00:01:22.650
They can use their @Mac.com address to interact
with AIM users and each other on the AIM network.

00:01:22.650 --> 00:01:29.310
We also support Bonjour, which allows you to
instant message with people on your local subnet

00:01:29.310 --> 00:01:32.490
and we support Jabber, which is more formally known as XMPP.

00:01:32.489 --> 00:01:34.129
It's an open standard.

00:01:34.129 --> 00:01:35.719
It's getting used by more and more people now.

00:01:35.719 --> 00:01:43.560
The largest or the highest visibility
client is probably Google Talk.

00:01:43.560 --> 00:01:48.450
They use Jabber for all their communication and
iChat can talk to Google Talk through Jabber.

00:01:48.450 --> 00:01:51.109
So you can talk to all your Gmail friends.

00:01:51.109 --> 00:01:56.629
It's also used by, I think, by Live Journal Talk and
I think Gizmo uses it for their instant messaging.

00:01:56.629 --> 00:02:02.060
You can also use Jabber in your organization,
that is, if you buy Mac OS X's server it comes

00:02:02.060 --> 00:02:04.150
with iChat server, which is a Jabber server.

00:02:04.150 --> 00:02:09.950
So you can use that to do instant messaging
inside your enterprise or your small business.

00:02:09.949 --> 00:02:11.439
It works pretty well.

00:02:11.439 --> 00:02:15.329
So what does iChat actually do?

00:02:15.330 --> 00:02:17.330
Well, it provides you with a list of buddies.

00:02:17.330 --> 00:02:22.900
Generally these are, the user sets them up for
people they know so they can communicate with them.

00:02:22.900 --> 00:02:25.490
You can text chat to your buddies.

00:02:25.490 --> 00:02:26.840
You can transfer files to them.

00:02:26.840 --> 00:02:29.289
They can send files to you.

00:02:29.289 --> 00:02:34.209
You can do audio and video chat, as
I'm sure you know, as an example.

00:02:34.210 --> 00:02:38.890
And new in Leopard you can share your buddy's
screen, your buddy can share your screen.

00:02:38.889 --> 00:02:43.789
This is great for collaboration or
for helping people out with stuff.

00:02:43.789 --> 00:02:48.009
And, of course, iChat Theater, which
lets your send your applications content

00:02:48.009 --> 00:02:51.569
over the iChat connection in a
sort of show-and-tell type model.

00:02:53.110 --> 00:02:55.880
So what can you do with iChat?

00:02:55.879 --> 00:03:00.490
Well, the Instant Message Framework, which is
part of Leopard and actually also in Tiger,

00:03:00.490 --> 00:03:07.000
although it's expanded in Leopard, allows you to get
presence information and display a new application.

00:03:07.000 --> 00:03:09.580
It also allows you to control iChat Theater.

00:03:09.580 --> 00:03:12.300
iChat Theater, I'm afraid we're
not going to talk about today.

00:03:12.300 --> 00:03:13.780
That's session number 202.

00:03:13.780 --> 00:03:16.680
We'll go into all about iChat Theater
and how you can use it.

00:03:16.680 --> 00:03:17.830
It's tomorrow at 2:00PM.

00:03:17.830 --> 00:03:19.510
I think in Presidio.

00:03:19.509 --> 00:03:21.810
So if you want to know about iChat Theater
you should definitely come along to that.

00:03:21.810 --> 00:03:24.640
It should be an exciting presentation.

00:03:24.639 --> 00:03:30.189
So for today, the Instant Message Framework, it lets
you get presence information and display it in your app

00:03:30.189 --> 00:03:31.770
and that's what we'll be talking about today.

00:03:31.770 --> 00:03:37.189
If you want to do any of the other things that iChat
does, actually the highlights are all in this slide.

00:03:37.189 --> 00:03:40.719
All the white things here, you can
do all of them through AppleScript

00:03:40.719 --> 00:03:46.219
and using the Scripting Bridge you can actually
do them using Objective-C or Ruby or Python.

00:03:46.219 --> 00:03:52.169
So this lets you control iChat to do
what you want via your application.

00:03:53.569 --> 00:03:56.430
So first thing we're going to talk about more in depth,

00:03:56.430 --> 00:03:59.860
observing changes in iChat using
the Instant Message Framework.

00:03:59.860 --> 00:04:03.980
So the Instant Message Framework provides
presence information to your application.

00:04:03.979 --> 00:04:05.669
And we actually use it a lot inside Apple.

00:04:05.669 --> 00:04:10.250
So here's our presence information
in the buddy list, natively in iChat.

00:04:10.250 --> 00:04:10.979
We use it in mail.

00:04:10.979 --> 00:04:15.969
You can see that Eric has a little gem next
to his name here showing that he's online.

00:04:15.969 --> 00:04:18.779
That's using Instant Message Framework
to get that information.

00:04:18.779 --> 00:04:22.889
Similarly in Address Book, the little
gem next to Eric, Eric's picture here.

00:04:22.889 --> 00:04:24.139
It's using the same mechanism.

00:04:24.139 --> 00:04:28.250
And actually a lot of people don't
realize but the iChat menu extra,

00:04:28.250 --> 00:04:33.110
all the information that's displayed here actually comes to
the menu extra through the Instant Message Framework too.

00:04:33.110 --> 00:04:35.350
So you can get all that information
and use it in your application.

00:04:35.350 --> 00:04:37.480
It's not just part of iChat.

00:04:38.920 --> 00:04:40.400
And some people already do.

00:04:40.399 --> 00:04:46.029
Project X and OmniPlan use the Instant Message
Framework to get presence information in their application

00:04:46.029 --> 00:04:48.769
and the next version of Delicious Library
will also be using it.

00:04:48.769 --> 00:04:52.129
And scripting visual iChat, which
we'll talk about a little later on.

00:04:53.279 --> 00:04:56.299
So presence, I'm talking about
presence, it's kind of a weird term.

00:04:56.300 --> 00:04:59.569
This is what presence means to us.

00:04:59.569 --> 00:05:03.009
So presence is the availability of someone
in your buddy list.

00:05:03.009 --> 00:05:06.620
So you see highlighted are the
gems on the left-hand column here.

00:05:06.620 --> 00:05:10.100
The people at the top with the green
gems, they're available to chat.

00:05:10.100 --> 00:05:14.650
I think you can see Pierre here is idle.

00:05:14.649 --> 00:05:15.829
He's been idle for 40 minutes.

00:05:15.829 --> 00:05:17.109
He has the yellow gem.

00:05:17.110 --> 00:05:19.470
That means he's probably somewhere near his computer.

00:05:19.470 --> 00:05:22.600
He's marked himself as available but he hasn't
been using his computer for a long time.

00:05:22.600 --> 00:05:26.310
So we don't know if he's really available or not.

00:05:26.310 --> 00:05:28.170
Bruce has got the red gem.

00:05:28.170 --> 00:05:30.449
That means that he is away.

00:05:30.449 --> 00:05:32.219
His computer is running.

00:05:32.220 --> 00:05:37.110
It's running iChat but he's marked himself as away so
either he's busy or he's gone for lunch or something.

00:05:37.110 --> 00:05:40.590
You probably don't want to send him a message
or at least if you do send him a message,

00:05:40.589 --> 00:05:42.629
probably he's not going to reply immediately.

00:05:42.629 --> 00:05:46.920
And new in Leopard is this sort of gray gem,
which is next to Eric's cell phone here.

00:05:46.920 --> 00:05:51.890
That means that we can send this buddy a
message, and we should be able to send it

00:05:51.889 --> 00:05:54.180
to him immediately but he might not get it immediately.

00:05:54.180 --> 00:05:56.449
They might not be able to react to it.

00:05:56.449 --> 00:06:00.069
Generally the gray gem means that someone's on
a mobile device so we can't really see anything

00:06:00.069 --> 00:06:01.649
about whether they're available or away or not.

00:06:01.649 --> 00:06:05.199
But we know they're there, that
we can send a message to them.

00:06:06.480 --> 00:06:10.030
Also counted as part of presence are the status messages.

00:06:10.029 --> 00:06:14.839
People can set their own message, tell you a little
bit more than just they're available or away.

00:06:14.839 --> 00:06:17.069
You see that Mike is performing some research.

00:06:17.069 --> 00:06:22.670
Justin's pretty exhausted and Bruce
has set himself as being away.

00:06:22.670 --> 00:06:26.720
The picture, people can also change the picture,
little icon down there, right-hand side.

00:06:26.720 --> 00:06:30.280
That is the icon that people have set for
themselves, and sometimes it's a picture of them

00:06:30.279 --> 00:06:33.849
and sometimes it's just something they're
interested in or thought was cool.

00:06:34.860 --> 00:06:38.889
Capabilities, this kind of corresponds
to the column I've got highlighted here.

00:06:38.889 --> 00:06:42.009
So this'll say whether you're capable of video chat,

00:06:42.009 --> 00:06:45.329
whether you're capable of multi-way video
chat, audio chat, multi-way audio chat.

00:06:45.329 --> 00:06:48.939
And also things that aren't showing
here like iChat Theater, file sending.

00:06:48.939 --> 00:06:55.250
You can get that through the Instant Message Framework
and tell whether people are capable of that or not.

00:06:55.250 --> 00:06:59.750
I also, we also use the Address Book card, which
kind of, we think of kind of associated with presence.

00:06:59.750 --> 00:07:03.310
Everybody on the list here you'll see
that we're displaying their full names.

00:07:03.310 --> 00:07:05.040
Those are not actually stored.

00:07:05.040 --> 00:07:07.460
They're not actually given to us by the AIM protocol.

00:07:07.459 --> 00:07:10.879
We just get the handle that you
see here on the Address Book card,

00:07:10.879 --> 00:07:14.290
a fake screen name being Eric's
handle, not actually his real handle.

00:07:14.290 --> 00:07:23.160
And we use the Address Book card to associate the handle
with the full name and you should be able to do the same.

00:07:23.160 --> 00:07:25.790
So delving into the API a little more.

00:07:25.790 --> 00:07:29.450
The IMService class is basically
how you interact with the API

00:07:29.449 --> 00:07:33.379
There are some class methods on it, which will provide
you with the current user's presence information,

00:07:33.379 --> 00:07:35.750
which corresponds to what they've set for themselves.

00:07:35.750 --> 00:07:39.290
The IMService instances, these'll be one per service.

00:07:39.290 --> 00:07:41.350
I'll talk a little bit later about what a service is.

00:07:41.350 --> 00:07:43.520
But it'll give you presence information per buddy.

00:07:43.519 --> 00:07:48.000
So you can get presence information, ask
for the availability or the status message

00:07:48.000 --> 00:07:50.980
of icons for each of the buddies on the list.

00:07:50.980 --> 00:07:54.129
You can get IMService notifications
when any information changes.

00:07:54.129 --> 00:07:55.389
These are Cocoa notifications.

00:07:55.389 --> 00:07:58.360
If you're not familiar with them basically
they're just, you sign up for them

00:07:58.360 --> 00:08:00.449
and you get a callback whenever anything happens.

00:08:00.449 --> 00:08:07.490
You can get IMService notifications whenever any of the
information that's displayed in the buddy list here changes.

00:08:07.490 --> 00:08:09.340
And there are also named status images.

00:08:09.339 --> 00:08:12.310
So you can ask the Instant Message Framework for the images.

00:08:12.310 --> 00:08:16.069
You'll get the same images as are shown in the iChat UI.

00:08:16.069 --> 00:08:18.659
So you can be sure that you'll be consistent with iChat.

00:08:18.660 --> 00:08:21.880
And it's important to use this because
actually there's a preference in iChat,

00:08:21.879 --> 00:08:27.829
which you can set it to show shapes instead
of gems, useful for color blind users.

00:08:27.829 --> 00:08:35.350
So if you want to be like iChat and show consistently
what's in iChat API, use these images and you'll be set.

00:08:35.350 --> 00:08:38.430
So I'll set them back to normal.

00:08:38.429 --> 00:08:39.669
IMService class methods.

00:08:39.669 --> 00:08:43.750
I told you that these provide information
about the current user.

00:08:43.750 --> 00:08:49.029
You can ask for the user status, basically what
they've set their status to is in the pull-down there.

00:08:49.029 --> 00:08:50.519
You can ask for their idle time.

00:08:50.519 --> 00:08:52.289
We don't actually show this in the iChat API.

00:08:52.289 --> 00:08:53.599
This is, I'm sorry,

00:08:53.600 --> 00:08:55.800
we don't actually show this in iChat UI.

00:08:55.799 --> 00:08:59.509
This is how long the user has not
been using their computer for.

00:08:59.509 --> 00:09:03.929
Yeah. As I said, we don't show it but if
it's important to you you can ask for it.

00:09:03.929 --> 00:09:05.319
You can ask for all services.

00:09:05.320 --> 00:09:09.320
So I said before I would delve into what a service was.

00:09:09.320 --> 00:09:11.510
These might be logged into AIM.

00:09:11.509 --> 00:09:13.110
The AIM buddy list here.

00:09:13.110 --> 00:09:15.450
May also be logged into a Jabber server.

00:09:15.450 --> 00:09:17.820
They could be logged into Bonjour.

00:09:17.820 --> 00:09:20.920
They might, even Leopard, be logged
into more than one AIM account.

00:09:20.919 --> 00:09:24.559
They could be logged into more than one
Jabber account if they're Google Talk

00:09:24.559 --> 00:09:27.389
and also in their Enterprise Jabber server.

00:09:27.389 --> 00:09:29.389
But they'll always only be three services.

00:09:29.389 --> 00:09:33.799
They'll be one Jabber service, one AIM service,
and one Bonjour service, or at most three.

00:09:33.799 --> 00:09:37.129
If they're not logged in they won't be available to you.

00:09:37.129 --> 00:09:40.649
So all the Jabber buddy lists are
grouped into one Jabber service.

00:09:40.649 --> 00:09:45.269
All the AIM buddy lists grouped into one AIM service
and the Bonjour service, of course, is only one list.

00:09:45.269 --> 00:09:47.149
It's one service.

00:09:48.470 --> 00:09:53.889
For notifications, there's a NotificationCenter
provided as a class method on the IMService class.

00:09:53.889 --> 00:09:59.149
This is the NotificationCenter that all notifications
to do with instant messaging will be sent from.

00:09:59.149 --> 00:10:02.939
So if you're signing up for notification remember to
use this NotificationCenter, not the default one.

00:10:02.940 --> 00:10:05.510
This is the one we always use.

00:10:05.509 --> 00:10:10.330
And you get notifications, for example,
when someone logs out like that.

00:10:10.330 --> 00:10:12.050
The IMService instance methods.

00:10:12.049 --> 00:10:15.549
Remember I said these correspond to getting
information for each of the buddies on the list.

00:10:15.549 --> 00:10:17.389
There's one of these per service.

00:10:17.389 --> 00:10:21.120
As I said before you get them in API in the last slide.

00:10:21.120 --> 00:10:22.250
You can ask for the localizedName.

00:10:22.250 --> 00:10:25.919
If you're going to show the name of the service
in your UI you should definitely use these.

00:10:25.919 --> 00:10:27.740
For example, you get AIM back for this service.

00:10:27.740 --> 00:10:31.060
It could be different in different languages.

00:10:31.059 --> 00:10:32.069
You can ask for the status.

00:10:32.070 --> 00:10:36.060
This'll give you the most available status
for any of the buddy lists on the service.

00:10:36.059 --> 00:10:39.549
So, say, Joe had logged out his .Mac
service, he'd set it to offline.

00:10:39.549 --> 00:10:42.769
You'd still get available back because
the AIM buddy list is available

00:10:42.769 --> 00:10:46.399
and you're asking for the status of the AIM service.

00:10:46.399 --> 00:10:48.370
You can ask for infoForAllScreenNames.

00:10:48.370 --> 00:10:52.560
This will give you back an array of
information and with one item correspond

00:10:52.559 --> 00:10:56.809
to every individual buddy and all
the buddy lists of the service.

00:10:56.809 --> 00:11:02.409
And you can, kind of in reverse, ask for
the screen names for an Address Book person.

00:11:02.409 --> 00:11:05.919
If you already have an Address Book card
or you've got an Address Book card somehow,

00:11:05.919 --> 00:11:10.799
maybe using the instant message API or maybe some other
API, you could ask the service if there are any screen names

00:11:10.799 --> 00:11:12.500
which will be compatible on that service.

00:11:12.500 --> 00:11:15.769
So you would get Eric's fake screen name back this way.

00:11:19.440 --> 00:11:22.100
So the notifications that IM service sends.

00:11:22.100 --> 00:11:27.810
This is how you find out if anything in the iChat UI is
changing and you can react to it in your application.

00:11:27.809 --> 00:11:35.039
Notifications that are available to you are
the IMServiceStatusChangedNotification.

00:11:35.039 --> 00:11:38.120
You'll get this notification whenever
the service status changes.

00:11:38.120 --> 00:11:43.730
So if Joe changes his status to in a meeting
you'd get back a notification that he'd gone away.

00:11:46.200 --> 00:11:48.259
The IMPersonStatusChangedNotification.

00:11:48.259 --> 00:11:52.610
So if you watch Eric, if he goes away you would get
a similarly, you'd get a notification telling you

00:11:52.610 --> 00:11:55.820
that Eric had gone away and set his local user.

00:11:57.279 --> 00:11:59.899
There's the IMPersonInfoChangedNotification.

00:11:59.899 --> 00:12:04.149
So the previous two notifications will only
give you information about their status,

00:12:04.149 --> 00:12:06.740
like whether they're away, available, idle.

00:12:06.740 --> 00:12:08.919
The PersonInfoChangedNotification,
you should listen for this

00:12:08.919 --> 00:12:12.339
if you're interested in any of
the finer grained information.

00:12:12.340 --> 00:12:16.740
Like, for example, if Eric changes his buddy picture
you would get this PersonInfoChangedNotification

00:12:16.740 --> 00:12:19.450
and then you could requery to get the
new buddy picture to show in your UI.

00:12:19.450 --> 00:12:23.629
On the all return userInfo dictionary there's various keys.

00:12:23.629 --> 00:12:25.710
You can look in the header, I think
they're fairly self explanatory.

00:12:25.710 --> 00:12:31.690
These one's, for example, the PersonScreenNameKey
and the PersonStatusKey correspond to the screen name

00:12:31.690 --> 00:12:35.090
of the person so you could find out who
the notification is for, they're status,

00:12:35.090 --> 00:12:36.830
if they're status has changed, this is what you'd want,

00:12:36.830 --> 00:12:41.620
the key you'd want to look at to
find out what their new status is.

00:12:41.620 --> 00:12:45.710
So having seen the API we'll give a little demo.

00:12:45.710 --> 00:12:52.330
Starting on demo machine B. So
we've got Joe's AIM buddy list here.

00:12:52.330 --> 00:12:56.960
So we have a demo called ABPresence.

00:12:56.960 --> 00:12:59.080
This is just a simple example.

00:12:59.080 --> 00:13:01.820
It basically will show everybody in the Address Book.

00:13:01.820 --> 00:13:03.780
So I show the Address Book here.

00:13:03.779 --> 00:13:05.250
Got a bunch of people.

00:13:05.250 --> 00:13:09.740
And it'll show them and query their status from iChat and
it'll also get notifications when their status changes.

00:13:09.740 --> 00:13:15.139
So here if we look, if we had more than one buddy list
this would show the information from all the buddy lists.

00:13:15.139 --> 00:13:20.830
We can look, you can see the gems here
correspond to the status of the people in iChat.

00:13:20.830 --> 00:13:22.690
If Eric goes offline,

00:13:22.690 --> 00:13:25.500
Eric is listed as Steve Chatter here
on the second demo machine.

00:13:25.500 --> 00:13:28.340
You can see the gem changes reacting
to the change from iChat.

00:13:28.340 --> 00:13:35.310
Now if Eric comes back online, if AIM responds.

00:13:35.309 --> 00:13:35.929
There we go.

00:13:35.929 --> 00:13:36.979
Eric's back online.

00:13:36.980 --> 00:13:38.830
Now he's away.

00:13:38.830 --> 00:13:40.500
Now he's available again.

00:13:42.330 --> 00:13:46.080
So if you want to show status like this in your
application, you want to know how it works.

00:13:46.080 --> 00:13:48.240
So here we've got some classes here.

00:13:48.240 --> 00:13:51.210
The ServiceWatcher class.

00:13:51.210 --> 00:13:55.580
It's the class we have that's listening to the notifications
from iChat, so you'll notice when we start up

00:13:55.580 --> 00:13:58.790
When we awakeFromNib we'll start monitoring.

00:13:58.789 --> 00:14:03.889
And when we start monitoring all we do is listen
for the IMPersonStatusChangedNotification,

00:14:03.889 --> 00:14:06.539
which will tell us when any of our buddies change.

00:14:06.539 --> 00:14:12.929
And we also listen for the IMStatusImagesChanged
AppearanceNotification, that enables us to update our UI

00:14:12.929 --> 00:14:16.819
if the user changes their status image presence.

00:14:16.820 --> 00:14:18.340
So what do we do when we get these notifications?

00:14:18.340 --> 00:14:20.399
Well, in this method here, we take a look at it.

00:14:20.399 --> 00:14:23.929
When we receive this notification, it's pretty simple.

00:14:23.929 --> 00:14:30.189
All we do is we get the IMService, which is
the object the notification was sent from.

00:14:30.190 --> 00:14:34.880
We get the userInfo dictionary from the notification.

00:14:34.879 --> 00:14:38.769
And we also, we ask inside the userInfo
dictionary we get the screenName,

00:14:38.769 --> 00:14:40.870
which tells us the person that this notification was for.

00:14:40.870 --> 00:14:46.659
And then we will look up, by asking the IMService,
for people with the screenName

00:14:46.659 --> 00:14:50.009
that we just got back and for an
array of Address Book people.

00:14:50.009 --> 00:14:56.350
And we get an array because potentially more than
one Address Book person could have the same IM handle

00:14:56.350 --> 00:15:02.290
in their Address Book card, which would be kind of
weird but it's supported so we have to look for it.

00:15:02.289 --> 00:15:10.120
So we look through all the Address Book people that we have,
got information back for, and they'll post this notification,

00:15:10.120 --> 00:15:12.120
which is, this is internal to our application.

00:15:12.120 --> 00:15:17.740
This notification is sent and our UI
class will list that and update itself.

00:15:17.740 --> 00:15:20.500
And we're sending it from the Address Book card.

00:15:20.500 --> 00:15:25.000
And similarly when we get the IMStatusImagesChanged
AppearanceNotification we'll post off this internal

00:15:25.000 --> 00:15:29.870
notification to our UI class telling it that
it needs to refresh itself.

00:15:29.870 --> 00:15:33.399
So if we look at our UI class, we've
got that in the PeopleDataSource.

00:15:33.399 --> 00:15:39.919
And the table here is just a standard Cocoa tableView,
so PeopleDataSource is a tableView data source.

00:15:42.629 --> 00:15:47.929
If we look at what it does, when it awakes from nib
it's actually also registering for AddressBook changes.

00:15:47.929 --> 00:15:50.079
If you want to know more about
that you can look at the code.

00:15:50.080 --> 00:15:57.220
The two we're interested in the
AddressBookPersonStatusChanged, this is the one we're sending

00:15:57.220 --> 00:16:03.759
from our class that's watching iChat and also the Status
ImagesChanged that we're sending our class list watching iChat.

00:16:03.759 --> 00:16:08.860
So if we look at the method recall, we're simply
rebuilding StatusInformationForPerson.

00:16:08.860 --> 00:16:11.070
That's an internal method.

00:16:11.070 --> 00:16:15.150
If you look at what it does, all this
code, by the way, is available to you.

00:16:15.149 --> 00:16:19.269
It's attached to this session, if you
want to download it and take a look.

00:16:19.269 --> 00:16:20.620
It's a little complicated.

00:16:20.620 --> 00:16:22.970
When I go through it you'll see why.

00:16:22.970 --> 00:16:28.389
So we get this abPeople is an instance method that's
holding all the Address Book people we know about.

00:16:28.389 --> 00:16:31.000
So we look through each of them.

00:16:31.000 --> 00:16:37.669
If the person is the person that we got the
notification about, well, first say they're offline.

00:16:37.669 --> 00:16:43.479
Then we will look through all the IMServices
that iChat can tell us about.

00:16:43.480 --> 00:16:49.620
We'll try to see if the person the IMService corresponds
to one of the people in the Address Book cards,

00:16:49.620 --> 00:16:56.070
this for loop is looking through all the screenNames
that this person has on his service.

00:16:56.070 --> 00:17:01.490
And then we will look at the, get the information
for the screenName that we're looking for.

00:17:01.490 --> 00:17:08.500
We'll look up the status inside the dictionary we get back,
using the PersonStatusKey to get that information.

00:17:08.500 --> 00:17:11.690
Then if we get some status back
we'll get the integer value of it

00:17:11.690 --> 00:17:16.549
and we'll IMComparePersonStatus,
which is an instant message function.

00:17:16.549 --> 00:17:22.539
It will tell you the best status out
of the two, so the most available.

00:17:22.539 --> 00:17:27.409
If it's more available than the one we knew
about it'll store the one that we just got.

00:17:27.410 --> 00:17:32.170
And then we will call this internal method to
store it away so we can update our UI with it.

00:17:32.170 --> 00:17:36.529
The reason we're going through all the different
services and looking for all the address cards is

00:17:36.529 --> 00:17:43.349
because an Address Book card might have more than
one, more than one instant message handle in it,

00:17:43.349 --> 00:17:46.889
perhaps more than one service and we want
our UI to display the most available ones.

00:17:46.890 --> 00:17:52.270
So if the user had a Jabber card, a Jabber handle in
their Address Book card and they also had an AIM handle

00:17:52.269 --> 00:17:56.519
in their Address Book card and they went offline
in AIM, we wouldn't want to mark them offline.

00:17:56.519 --> 00:17:59.119
We'd still want them to available because
we can talk to them through Jabber.

00:17:59.119 --> 00:18:03.329
So after we're done this we simply
reload the data in the table

00:18:03.329 --> 00:18:05.889
and it will call our callbacks to get the information back.

00:18:05.890 --> 00:18:10.750
So if you look at the callbacks, this
is the tableView data source callback.

00:18:10.750 --> 00:18:13.349
It's very simple in contrast.

00:18:13.349 --> 00:18:18.169
All we do is look at which column it's for, if
it's the image column we'll ask the IMService

00:18:18.170 --> 00:18:22.620
for the appropriate image, as I show in the
slides, for the status and we'll just return it.

00:18:22.619 --> 00:18:24.839
It'll, the tableView will show it for us.

00:18:24.839 --> 00:18:31.819
And if it's the name column, we just ask the address
book card for the display name and we return that.

00:18:31.819 --> 00:18:36.279
And the only other notification we're looking
for is the statusImagesChanged notification.

00:18:36.279 --> 00:18:40.009
In this case all we need to do is reload
the table data because, as we saw,

00:18:40.009 --> 00:18:48.230
every time the table redraws it will requery the Instant
Message Framework to get the appropriate artwork.

00:18:48.230 --> 00:18:52.210
So if we show that working, go in to iChat.

00:18:55.079 --> 00:19:00.269
If we search to Use shapes to indicate status, if you
watch the shapes on the side you'll notice people will update.

00:19:00.269 --> 00:19:01.960
So everything's working great.

00:19:04.309 --> 00:19:04.950
Ok, so that's it.

00:19:04.950 --> 00:19:12.910
I say, if you want to know more, if you download the sample
code and take a look, hopefully, you'll see what's going on.

00:19:12.910 --> 00:19:14.740
As we go back to the slides.

00:19:19.430 --> 00:19:21.730
Ok, so that's our demo.

00:19:21.730 --> 00:19:23.980
So that's it for watching for changes in your application.

00:19:23.980 --> 00:19:28.730
Just to summarize a little, I use an Instant
Message Framework on the IMService class inside it.

00:19:28.730 --> 00:19:31.890
You can get presence information
from iChat into your application.

00:19:31.890 --> 00:19:36.340
You can get notifications whenever
any of this information changes

00:19:36.339 --> 00:19:38.799
and then you can display information
about the user's presence.

00:19:38.799 --> 00:19:43.269
You can display the information about the presence of the
user's buddies and your application, just like we do in Mail

00:19:43.269 --> 00:19:46.359
or Address Book card, even the more
rich information that's available

00:19:46.359 --> 00:19:48.469
on the Menu extra and some other information besides.

00:19:48.470 --> 00:19:52.140
So that's it for the Instant Message Framework.

00:19:52.140 --> 00:19:56.009
Eric will now talk to you a little
more about how you can control iChat

00:19:56.009 --> 00:20:00.579
from your application as well as
just seeing what it's knowing about.

00:20:00.579 --> 00:20:01.309
>> Thank you, Jamie.

00:20:01.309 --> 00:20:06.579
My name is Eric St. Onge, and today I'm
going to talk to you about controlling iChat.

00:20:06.579 --> 00:20:08.470
And roughly this is going to cover two areas.

00:20:08.470 --> 00:20:13.019
We're going to talk about iChat's AppleScript API and
we're going to talk about the Scripting Bridge, which,

00:20:13.019 --> 00:20:16.779
that you can then use to take advantage
of iChat through the Scripting Bridge.

00:20:16.779 --> 00:20:20.700
But to begin with let's talk about the AppleScript API.

00:20:20.700 --> 00:20:24.960
So, like I said before, the AppleScript API
lets you control iChat using AppleScript,

00:20:24.960 --> 00:20:30.350
and new in Leopard you can also run AppleScript
in response to events that happen in iChat.

00:20:30.349 --> 00:20:32.459
So just to kind of give you a high-level overview.

00:20:32.460 --> 00:20:34.940
Is everybody here familiar with AppleScript?

00:20:34.940 --> 00:20:37.070
Anyone? A few.

00:20:37.069 --> 00:20:41.450
Ok. All right, so AppleScript is basically an
English-like language used to write script files

00:20:41.450 --> 00:20:45.420
that automate the actions of the computer
and the applications that run on it.

00:20:45.420 --> 00:20:50.450
So basically the AppleScript is a Mac OS technology
that's basically used for interapplication communication.

00:20:50.450 --> 00:20:56.049
Most of the applications that ship with Mac OS X include
dictionaries that sort of provide commands that allow you

00:20:56.049 --> 00:20:59.589
to automate the applications and sort of
hook them together to do interesting things.

00:20:59.589 --> 00:21:03.619
And kind of the same technology that runs
AppleScript is actually used for Automator as well.

00:21:03.619 --> 00:21:05.619
So kind of all these things hook together.

00:21:05.619 --> 00:21:09.779
I would encourage you to visit the website to take a
closer look, but today we'll go through a few examples

00:21:09.779 --> 00:21:13.389
of AppleScript at least as they relate to iChat.

00:21:13.390 --> 00:21:18.520
So, as I said before, iChat kind of, or
AppleScript rather, uses dictionaries to sort

00:21:18.519 --> 00:21:21.170
of build vocabularies and create commands and classes.

00:21:21.170 --> 00:21:25.590
So if you want to follow along today, the
application that you can open is Script Editor,

00:21:25.589 --> 00:21:29.829
which is in Applications/AppleScript
and it has the icon that you see here.

00:21:29.829 --> 00:21:32.230
It's the little scroll with the pen.

00:21:32.230 --> 00:21:35.849
Once you open that application you'll
want to go to File > Open Dictionary.

00:21:35.849 --> 00:21:39.679
Under that menu you'll actually see a list
of all the applications that we've detected

00:21:39.680 --> 00:21:44.160
or Script Editor has detected that have dictionaries
and then you can pick whichever one you want to open.

00:21:44.160 --> 00:21:46.890
Obviously for this talk we'll want to look at iChat.

00:21:46.890 --> 00:21:49.970
So if you're running Leopard you'll see something like this.

00:21:49.970 --> 00:21:53.500
Basically to sort of give you a
high-level look at this window,

00:21:53.500 --> 00:21:55.950
in the left most pane you're going to see different suites.

00:21:55.950 --> 00:22:00.350
These are collections of commands and classes
that allow you to do things in AppleScript,

00:22:00.349 --> 00:22:03.109
and in this case there are two
that are sort of added to iChat.

00:22:03.109 --> 00:22:05.459
There's an iChat suite and the Event Handler suite.

00:22:05.460 --> 00:22:08.579
The top two are the Standard suite
and the Text suite are kind of common

00:22:08.579 --> 00:22:11.609
across all applications that sort of have dictionaries.

00:22:11.609 --> 00:22:13.859
So in the middle column, once you've selected a suite,

00:22:13.859 --> 00:22:17.009
you'll see the commands and classes
for that particular suite.

00:22:17.009 --> 00:22:20.839
And if you were to pick one of those commands or classes
you would see a better description on the right sort

00:22:20.839 --> 00:22:27.789
of telling you the properties of a class, you know, maybe
some tips on how to use it and just basically documentation.

00:22:27.789 --> 00:22:30.869
So if you were looking on Tiger you
would actually see something like this.

00:22:30.869 --> 00:22:36.689
Tiger has a few different commands available to you to
kind of let you do some basic things like send invitations,

00:22:36.690 --> 00:22:40.380
log in, or log out and kind of look at the
services that are currently available.

00:22:40.380 --> 00:22:42.700
So, for instance, you could set
your status message through it.

00:22:42.700 --> 00:22:47.610
But today we're going to talk about Leopard,
which as you can see, is greatly expanded.

00:22:47.609 --> 00:22:50.099
And really for the purposes of this
talk we just want to kind of look

00:22:50.099 --> 00:22:53.529
at the two columns so we'll just zoom in a little bit.

00:22:53.529 --> 00:22:57.440
So the first thing that I want to mention is
that the Tiger commands still work on Leopard.

00:22:57.440 --> 00:23:02.930
If anyone here has any script that runs on iChat's Tiger
AppleScript dictionary, it's still supported for Leopard.

00:23:02.930 --> 00:23:05.630
But kind of the new things we've added are more interesting.

00:23:05.630 --> 00:23:07.680
There are new commands for text chats.

00:23:07.680 --> 00:23:11.860
So, for instance, there's a entire text chat object
exposed to you that you can send messages to,

00:23:11.859 --> 00:23:15.899
you can get the status of, you can get
the participants of, and things like that.

00:23:15.900 --> 00:23:19.030
You can accept or decline incoming text chat invitations,

00:23:19.029 --> 00:23:24.109
and additionally you can invite people
to text chats as they're happening.

00:23:24.109 --> 00:23:27.449
Additionally and similarly added
there are new commands for AV chats.

00:23:27.450 --> 00:23:31.490
There are audio and video chat objects, which
you can, you know, invite people to, again.

00:23:31.490 --> 00:23:34.960
You can accept or decline audio and video chat invitations.

00:23:34.960 --> 00:23:38.940
And you can also request and stop recording via AppleScript.

00:23:38.940 --> 00:23:44.860
A new feature in Leopard is actually AV chat
recording and, like I said, it's exposed.

00:23:44.859 --> 00:23:46.559
Additionally file transfer is exposed.

00:23:46.559 --> 00:23:49.799
So if you want to use iChat as a file
transfer mechanism in your own application,

00:23:49.799 --> 00:23:53.490
perhaps to automate some file transfer
in your workflow, you can do that.

00:23:53.490 --> 00:23:58.960
You can send files or you can accept
or decline file transfer invitations.

00:24:00.019 --> 00:24:04.200
And, like I mentioned before, there are event
handlers and this is actually the fourth suite.

00:24:04.200 --> 00:24:09.250
I'll talk about this a little more in depth later but
basically this is going to provide you with a command

00:24:09.250 --> 00:24:13.039
that you can implement to sort of react
to something that happens in iChat.

00:24:13.039 --> 00:24:21.009
But to kind of take a closer look, we'll just
take a brief look at the AppleScript object model.

00:24:21.009 --> 00:24:23.839
As you might expect it's kind of similar
to the Instant Message Framework,

00:24:23.839 --> 00:24:27.639
but it's a little bit different so
I'll go into some of the differences.

00:24:27.640 --> 00:24:30.570
So the first class we want to talk about is the service.

00:24:30.569 --> 00:24:35.559
Now, if you remember from Jamie's talk about the Instant
Message Framework he said that at any time there are

00:24:35.559 --> 00:24:39.129
at most three services that are exposed to
you through the Instant Message Framework.

00:24:39.130 --> 00:24:41.140
In the AppleScript API this isn't true.

00:24:41.140 --> 00:24:44.140
You're actually going to get every
service exposed to you separately.

00:24:44.140 --> 00:24:48.690
So in the case here where we have five buddy lists you're
going to see that you can actually get access to each one.

00:24:48.690 --> 00:24:53.190
So we've got two Jabber lists,
two AIM lists, and a Bonjour list.

00:24:53.190 --> 00:24:56.350
So you're actually going to have these five
buddy lists available to you to do things

00:24:56.349 --> 00:25:00.609
if you need more fine-grained control than you
can get through the Instant Message Framework.

00:25:00.609 --> 00:25:05.359
So here's kind of a sample script that you could run to
sort of get the services that are available in iChat.

00:25:05.359 --> 00:25:09.809
If you were actually to just type this in to Script
Editor and click run, you would get output like this.

00:25:09.809 --> 00:25:14.909
And basically it's going to give you an array of
all the services that you have configured in iChat.

00:25:14.910 --> 00:25:19.620
And as you can see, kind of to go through a little
bit, the brackets indicate that it's an array.

00:25:19.619 --> 00:25:22.669
Service is telling you the type of
object that has been returned to you.

00:25:22.670 --> 00:25:23.880
It's going to give you an ID.

00:25:23.880 --> 00:25:28.010
If you were to run this today the ID you would
get would probably be something like a GUID,

00:25:28.009 --> 00:25:31.420
kind of a longer, you know, text and string kind of thing.

00:25:31.420 --> 00:25:34.740
But for the purpose of this we'll
just pretend they're integers.

00:25:34.740 --> 00:25:40.589
So, in this case, since we have five buddy lists
we're going to get five service objects back.

00:25:40.589 --> 00:25:41.269
So that's kind of good.

00:25:41.269 --> 00:25:43.750
You can get all five, but in most
of the case you're not going to want

00:25:43.750 --> 00:25:45.940
to do something with five services at any time.

00:25:45.940 --> 00:25:47.900
You're really only going to deal with one.

00:25:47.900 --> 00:25:51.890
So, as I mentioned before, AppleScript
is kind of an English-like language,

00:25:51.890 --> 00:25:55.370
so the syntax to do it is pretty much like English.

00:25:55.369 --> 00:25:58.229
So, whereas previously we were just getting the services,

00:25:58.230 --> 00:26:01.839
now we're going to get the first
service whose service type is AIM.

00:26:01.839 --> 00:26:07.779
So service type is a property on the service object
and we just want to get the first one that is AIM.

00:26:07.779 --> 00:26:12.920
So, in this case, if we were to run this
we would get service ID, with an ID of 300,

00:26:12.920 --> 00:26:15.310
so that we can find the first AIM service has an ID of 300.

00:26:15.309 --> 00:26:18.000
And then we can get the name property of that service.

00:26:18.000 --> 00:26:20.200
In this case it's going to be AIM buddy list.

00:26:20.200 --> 00:26:24.549
So the name is actually going to be the name
that appears at the top of the buddy list window.

00:26:26.240 --> 00:26:29.309
So the next class that we need to talk about is the buddy.

00:26:29.309 --> 00:26:31.909
And a buddy is basically a person in the buddy list.

00:26:31.910 --> 00:26:34.290
So every service contains multiple buddies.

00:26:34.289 --> 00:26:36.139
It's pretty straight forward.

00:26:36.140 --> 00:26:40.720
So buddies exist both on the application
level and on the service level.

00:26:40.720 --> 00:26:45.549
So if you were to run this sample script, this is kind
of assuming that we have a service object that we've set,

00:26:45.549 --> 00:26:50.019
perhaps from running our previous, you know, AIM service
script and then you can get the buddies from that.

00:26:50.019 --> 00:26:55.579
And if you were to run this you would see something similar
to what you get when you ask for the list of services.

00:26:55.579 --> 00:26:56.980
Again, it's going to be an array.

00:26:56.980 --> 00:27:00.170
It's going to give you a buddy
and it's going to give you an ID.

00:27:00.170 --> 00:27:04.730
And the ID is basically the account that contains
that object, or at least it's identifier,

00:27:04.730 --> 00:27:11.980
a colon, and then the buddy's handle on that service.

00:27:11.980 --> 00:27:17.349
So, the next thing that is exposed to you in Leopard,
and this is actually completely new, is chat objects.

00:27:17.349 --> 00:27:19.939
So, as I mentioned before when
I was kind of going through it,

00:27:19.940 --> 00:27:25.920
text chat and AV chat objects are now both
exposed to you in the AppleScript dictionary.

00:27:25.920 --> 00:27:28.740
So let's kind of go through some sample AppleScripts.

00:27:28.740 --> 00:27:35.079
This is basically going to follow the basics that are
available to download under the iChat AppleScript sample.

00:27:35.079 --> 00:27:37.599
I'll just go through kind of some of
the syntax that you would use to sort

00:27:37.599 --> 00:27:42.269
of create these objects and you
can follow along if you like.

00:27:42.269 --> 00:27:47.430
So for a new text chat, this is
kind of the script you would run.

00:27:48.490 --> 00:27:53.660
In AppleScript first you have to direct
your, your commands to a specific object.

00:27:53.660 --> 00:27:55.960
In this case, we're going to tell the
application iChat to do something.

00:27:55.960 --> 00:27:58.029
So we're going to direct it that way.

00:27:58.029 --> 00:28:02.869
Next, we're going to create a new variable called
theTextChat, kind of the standard in AppleScript is

00:28:02.869 --> 00:28:05.750
to name variables by what they
are, saying, you know, the object.

00:28:05.750 --> 00:28:10.369
So since we're going to create a text
chat, we'll call it theTexChat.

00:28:10.369 --> 00:28:12.809
Next, we're going to make a new text chat with properties

00:28:12.809 --> 00:28:17.159
and this is basically an initializer
for theTextChat object in AppleScript.

00:28:17.160 --> 00:28:21.930
This basically is similar to an Objective-C
initializer or C++ or Java constructor.

00:28:21.930 --> 00:28:26.400
We're going to pass in a dictionary, that
you can see here, with a participant's array.

00:28:26.400 --> 00:28:31.100
So basically the properties is basically, it's a dictionary.

00:28:31.099 --> 00:28:35.939
So in the left-hand column you'll see there's a key
named participants and on the right you're going

00:28:35.940 --> 00:28:40.470
to specify the participants that are
going to take place in that chat.

00:28:40.470 --> 00:28:45.009
In this case, we're going to just, you know, start
a chat with a single buddy named SmarterChild.

00:28:45.009 --> 00:28:49.019
You'll notice here that actually we haven't
provided an identifier specifically for the buddy.

00:28:49.019 --> 00:28:54.950
You know how I said before you need to, the ID is actually,
that the ID of the service, the colon, and then the handle,

00:28:54.950 --> 00:28:58.960
iChat's actually smart enough to look up this
object for you if you just give it a name.

00:28:58.960 --> 00:29:02.930
So we're going to look for a buddy named Smarter
Child on whichever service we find it on.

00:29:02.930 --> 00:29:07.529
And then at this point we'll actually have a
text chat object that we can send commands to.

00:29:07.529 --> 00:29:10.670
So here we'll just send Hello, SmarterChild! to that object.

00:29:10.670 --> 00:29:14.550
And we would end up with a window like this in iChat.

00:29:14.549 --> 00:29:17.440
And Smarter Child is actually just a bot that's
available to you if you want to, you know,

00:29:17.440 --> 00:29:18.940
it can tell you the weather and news stories.

00:29:18.940 --> 00:29:22.220
So it's available pretty much all the time.

00:29:22.220 --> 00:29:24.269
So that is the new text chat object.

00:29:24.269 --> 00:29:28.289
And as I said before, audio and video chats
are exposed to you as well, and, actually,

00:29:28.289 --> 00:29:32.509
the syntax to create them is very similar,
whereas this is make a new text chat.

00:29:32.509 --> 00:29:35.940
Make new audio chat is just make new audio
chat and it's basically the same syntax.

00:29:35.940 --> 00:29:40.200
It's going to take, you know, the same kind of
properties, the same kind of participants and it's going

00:29:40.200 --> 00:29:45.090
to give you something similar, basically an audio chat.

00:29:46.210 --> 00:29:51.480
So something we've talked about before, and I've actually
heard some confusion about this, is screen sharing.

00:29:51.480 --> 00:29:54.190
Screen sharing does still exist in
iChat and Leopard, as Jamie said,

00:29:54.190 --> 00:29:57.070
and it's actually exposed to you
through AppleScript as well.

00:29:57.069 --> 00:30:00.740
And since screen sharing is basically
always running in audio chat as well,

00:30:00.740 --> 00:30:05.380
it's actually just an additional property
that we add to an ongoing audio chat.

00:30:05.380 --> 00:30:10.730
So as you can see here, as well as providing the
participant with which you want to start screen sharing,

00:30:10.730 --> 00:30:12.860
we provide the direction of the screen showing.

00:30:12.859 --> 00:30:18.250
So screen sharing: local screen is going to
basically share my screen with my buddy.

00:30:18.250 --> 00:30:24.200
And if you run this script you'll get something like this.

00:30:24.200 --> 00:30:27.670
Ok, and finally, is video chats.

00:30:27.670 --> 00:30:32.390
Like I said before, if you're making new audio chat and
make new text chat, same kind of thing just make new video chat,

00:30:32.390 --> 00:30:38.500
specify the properties, and you'll get a video chat object.

00:30:38.500 --> 00:30:40.769
In Tiger we also added multiway video.

00:30:40.769 --> 00:30:47.750
This allows you to chat with four video participants
or ten audio participants including yourself.

00:30:47.750 --> 00:30:52.819
And all you need to do is specify multiple
participants when you create the chat object.

00:30:52.819 --> 00:30:57.759
So here we're going to specify two buddies and
you're going to end up with a multiway video chat.

00:30:57.759 --> 00:31:03.640
So here, for instance, you know, a
fun chat with Johnny Ives and Mac.

00:31:03.640 --> 00:31:05.640
And finally, a chat room.

00:31:05.640 --> 00:31:10.020
So we've actually spent a lot of time in iChat and
Leopard to kind of improve the chat room experience.

00:31:10.019 --> 00:31:13.920
And chat rooms are actually exposed to
you through the AppleScript API as well.

00:31:13.920 --> 00:31:20.370
So whereas previously you would kind of want to specify the
participant for a text chat, now since the chat room kind

00:31:20.369 --> 00:31:24.389
of exists in kind of a different space, it's
basically an address on a specific service,

00:31:24.390 --> 00:31:27.060
you need to specify both of those properties.

00:31:27.059 --> 00:31:32.619
So here we're going to specify the AIM service and
we're going to give it the chat room name of ichatwwdc.

00:31:32.619 --> 00:31:36.049
At this point, much as, you know, when
you were creating the regular text chat,

00:31:36.049 --> 00:31:46.359
you've just got a text chat object you can then
send other commands to, something like that.

00:31:46.359 --> 00:31:49.259
So, next I'm going to talk about event handlers.

00:31:49.259 --> 00:31:54.660
And event handlers are basically AppleScript call
backs that can be triggered when events occur in iChat.

00:31:54.660 --> 00:31:59.580
So basically every action has a
corresponding AppleScript handler.

00:31:59.579 --> 00:32:05.849
So in iChat under Preferences there's an Alerts panel that
you can choose and within that panel you can configure iChat

00:32:05.849 --> 00:32:13.230
to play noises when specific thing hap--when specific things
happen, you know, to maybe speak an event when it occurs or,

00:32:13.230 --> 00:32:15.420
you know, bounce the dock when something happens.

00:32:15.420 --> 00:32:19.269
Now you can hook up an AppleScript to that,
and I'll show you how to do that in a minute.

00:32:19.269 --> 00:32:25.339
But basically every event is going to sort of provide,

00:32:25.339 --> 00:32:29.379
or it's going to callback an AppleScript event
handler with the relevant objects for that.

00:32:29.380 --> 00:32:35.240
So, for instance, when I log in it's going to
call the login finished event with the account

00:32:35.240 --> 00:32:38.839
that finished logging in, likewise for logging out.

00:32:38.839 --> 00:32:43.500
Buddy Becomes Available is going to tell you the
buddy that became available or became unavailable.

00:32:43.500 --> 00:32:48.569
And for message received, you're going to get something
a little different, since it's a little more complicated.

00:32:48.569 --> 00:32:51.149
So let's take a closer look at the message received handler.

00:32:51.150 --> 00:32:57.930
So, as I said before, everything, basically, it's going
to give you the relevant objects for message received.

00:32:57.930 --> 00:33:04.470
So as you can see since the script is not actually be
going to telling iChat, it's not going to tell iChat

00:33:04.470 --> 00:33:08.210
to do something specifically, iChat
is going to tell the script to run.

00:33:08.210 --> 00:33:10.370
We're not going to tell application iChat to do anything.

00:33:10.369 --> 00:33:15.369
We're going to say using terms from application
iChat, and this is basically going to tell this script

00:33:15.369 --> 00:33:19.569
to compile using iChat's dictionary even
though it's not going to directly do anything.

00:33:19.569 --> 00:33:22.089
But next there is actually the message received handler.

00:33:22.089 --> 00:33:28.139
So kind of the way you define a method
or an event in AppleScript is saying on.

00:33:28.140 --> 00:33:31.940
So on event occurred, maybe like you
would see in some other languages.

00:33:31.940 --> 00:33:37.660
And it's going to provide the objects
that, that came with that message.

00:33:37.660 --> 00:33:46.430
So the text message that was actually sent, the buddy that
sent it, and theTextChat object in which it was sent.

00:33:46.430 --> 00:33:50.549
And once you get through this, I mean, at this
point you can really run anything you want.

00:33:50.549 --> 00:33:55.190
In this case, we would just display a dialog
saying, you know, "I got a message", for instance.

00:33:57.769 --> 00:34:00.539
So let me kind of give you a demo.

00:34:05.839 --> 00:34:11.929
So here I'm just going to run off some
of the iChat AppleScript samples, basics.

00:34:11.929 --> 00:34:15.679
And first I'll just start with a new text
chat just to kind of go over it a little bit.

00:34:15.679 --> 00:34:24.809
So if you open this up, I've already
compiled this, but if you go to the bottom

00:34:24.809 --> 00:34:26.559
of the script this script is actually very simple.

00:34:26.559 --> 00:34:32.190
We're just going to display dialog, you know,
asking the handle of the buddy to chat with.

00:34:32.190 --> 00:34:36.360
We're going to take the result of that and then
we're going to make a new text chat with that buddy.

00:34:36.360 --> 00:34:39.370
So I'll just start that here.

00:34:39.369 --> 00:34:42.369
I'll enter Jamie's handle, and now we have a text chat.

00:34:42.369 --> 00:34:43.730
And I'll say hello.

00:34:43.730 --> 00:34:49.170
( Typing )

00:34:49.170 --> 00:34:51.909
And Jamie can respond, you know, kind of any way he likes.

00:34:51.909 --> 00:34:54.940
( Typing )

00:34:54.940 --> 00:34:56.559
Thanks, Jamie.

00:34:56.559 --> 00:35:01.130
Ok. So that's a, that's a new text chat.

00:35:01.130 --> 00:35:03.829
Likewise you could do a new video chat and, you know,

00:35:03.829 --> 00:35:07.909
as I showed you before it's just make new
video chat rather than make new text chat.

00:35:07.909 --> 00:35:09.159
If I click run,

00:35:09.159 --> 00:35:12.000
( Typing )

00:35:12.000 --> 00:35:22.449
enter Jamie's handle, and here it is.

00:35:22.449 --> 00:35:26.319
It's just a chat that was started by AppleScript.

00:35:26.320 --> 00:35:27.970
Thanks, Jamie.

00:35:27.969 --> 00:35:32.259
So next, let me show you something a little different.

00:35:32.260 --> 00:35:36.640
As you can see in the iChat AppleScript samples
we've got a few things that are available to you.

00:35:36.639 --> 00:35:40.440
Some of these are Event Handler, some of them
are basically just, you know, straight up script.

00:35:40.440 --> 00:35:42.650
But let's take a look at one called Chatbot-Eliza.

00:35:42.650 --> 00:35:53.590
And Chatbot-Eliza or Eliza is actually kind of
in, it's basically a text-based psychoanalyst.

00:35:53.590 --> 00:35:57.440
So what it's going to do is it's going to
take text input, rephrase it in the form

00:35:57.440 --> 00:35:59.720
of a question, and kind of ask it back to you.

00:35:59.719 --> 00:36:02.889
And we can actually hook this up
to iChat via Event Handlers.

00:36:02.889 --> 00:36:08.289
So if we go down to the bottom, you
see we have runChatbotEliza method

00:36:08.289 --> 00:36:10.980
that we've defined, which we'll get to in a second.

00:36:10.980 --> 00:36:14.579
But a little further down below
that we have a few Event Handlers.

00:36:14.579 --> 00:36:17.019
So, for instance, received text invitation is here.

00:36:17.019 --> 00:36:23.480
This is basically going to be the Event Handler that
is called whenever a new text chat is hooked up,

00:36:23.480 --> 00:36:27.730
the buddy that sent it, and the chat that it was sent in.

00:36:27.730 --> 00:36:31.630
Since it's an invitation it's going to show up as a
little notifier in the upper right corner of your screen.

00:36:31.630 --> 00:36:35.369
You can just accept that and make, kind
of accept it as a full-fledged chat.

00:36:35.369 --> 00:36:38.359
Then we'll just send a message back saying,
you know, "Hello! What can I do for you?"

00:36:38.360 --> 00:36:40.849
Or, "What can I help you with today?"

00:36:40.849 --> 00:36:46.339
Similarly for a message received all we're going to
do is we're going to take the message that was sent,

00:36:46.340 --> 00:36:50.370
we're going to pass it into Eliza and then
we're going to send the response back.

00:36:50.369 --> 00:36:53.900
So let's take a closer look at Chatbot-Eliza.

00:36:53.900 --> 00:36:55.340
This is actually pretty straight forward.

00:36:55.340 --> 00:36:57.289
AppleScript isn't really doing anything very much here.

00:36:57.289 --> 00:37:01.699
We're actually just going to run a command-line
tool that's going to, sort of, hook it up for you.

00:37:01.699 --> 00:37:07.309
So there is a, there is a Chatbot-Eliza perl script that
will need to be copied in, which I'll show you in a second.

00:37:07.309 --> 00:37:11.809
But all this is going to do is it's going to run
this shell script using the do shell script command.

00:37:11.809 --> 00:37:16.369
It's going to take the response and it's going to
return that response, which we will then send back.

00:37:18.280 --> 00:37:20.640
So let's kind of actually hook this into iChat.

00:37:20.639 --> 00:37:24.929
So if I got into iChat's Preferences, if I go to Alerts,

00:37:24.929 --> 00:37:27.789
as you can see here there are all the
different events you can configure.

00:37:27.789 --> 00:37:31.550
I had been talking about Message Received previously.

00:37:31.550 --> 00:37:32.330
So let's look at that.

00:37:32.329 --> 00:37:34.509
I will go to run AppleScript.

00:37:34.510 --> 00:37:37.970
I've already got the script ready so
I'll just say Open the script folder.

00:37:37.969 --> 00:37:44.649
At this point I'll copy in the AppleScript
file and sort of the perl script I need.

00:37:44.650 --> 00:37:48.610
And then within iChat I'll choose run Chatbot-Eliza.

00:37:48.610 --> 00:37:51.430
I'll also do the same for a text chat invitation.

00:37:53.280 --> 00:37:58.570
So now, at this point, my machine is
configured to kind of run Chatbot automatically.

00:37:58.570 --> 00:38:00.519
So I'll just, I'll just step away from the machine.

00:38:00.519 --> 00:38:07.519
And if Jamie were to go and were to go
and send a message, you can see that it's, that

00:38:07.519 --> 00:38:09.170
Chatbot-Eliza is just going to pick it up for you.

00:38:09.170 --> 00:38:10.519
And now you can just chat away.

00:38:10.519 --> 00:38:15.369
We actually had an experience with our, one of our
program managers or one of our project managers

00:38:15.369 --> 00:38:20.190
who I accidentally left this running on, it
took a good seven or eight tries to catch on.

00:38:22.980 --> 00:38:28.760
So, so at this point, Jamie can actually go and do the
same thing on his side, you know, for an extra bit of fun.

00:38:28.760 --> 00:38:35.450
( Typing )

00:38:35.449 --> 00:38:41.719
So now he's got it hooked up and if I say hello, you can
see that now you have, you know, two Chatbot-Eliza's talking

00:38:41.719 --> 00:38:44.469
to each other, not really having
anything very interesting to say...

00:38:44.469 --> 00:38:44.669
( Audience talking, clapping )

00:38:44.670 --> 00:38:49.150
But what you can see is happening is actually
you notice as the conversation is going

00:38:49.150 --> 00:38:51.559
on the, kind of, the chat's slowing down.

00:38:51.559 --> 00:38:54.829
And iChat's not actually slowing it down
for you, this is actually AIM kicking in.

00:38:54.829 --> 00:38:58.329
If anyone has ever tried to send too
many messages on the AIM service,

00:38:58.329 --> 00:39:01.500
kind of one after the other, it's
actually going to rate limit you.

00:39:01.500 --> 00:39:05.949
So you can't actually just go and write a script
that's going to spam everyone in your buddy list.

00:39:05.949 --> 00:39:08.750
AIM is actually going to actively
prevent you from doing that.

00:39:08.750 --> 00:39:10.849
iChat has a few guards in place to do that as well.

00:39:10.849 --> 00:39:14.699
So we're going try to protect you,
and also kind of help you from taking,

00:39:14.699 --> 00:39:18.589
kind of disallow you from taking
advantage of this for nefarious purposes.

00:39:18.590 --> 00:39:18.809
So...

00:39:18.809 --> 00:39:19.809
( Applause )

00:39:19.809 --> 00:39:25.869
Thank you.

00:39:25.869 --> 00:39:27.539
So, that's Chatbot-Eliza.

00:39:27.539 --> 00:39:29.539
You can go back to the slides.

00:39:32.659 --> 00:39:37.289
So, that was Chatbot-Eliza, like I said,
that's available to you dev for download.

00:39:37.289 --> 00:39:39.250
If you want to install it you can do that.

00:39:39.250 --> 00:39:43.010
You will also need to download
the Chatbot-Eliza perl module.

00:39:43.010 --> 00:39:45.540
We have it just to kind of look on
your desktop, but if you actually want

00:39:45.539 --> 00:39:48.489
to do it properly through perl you could do that.

00:39:48.489 --> 00:39:53.509
So next, let's talk about something a little
different, let's talk about the Scripting Bridge.

00:39:53.510 --> 00:39:55.970
And the Scripting Bridge will allow you to control iChat

00:39:55.969 --> 00:39:58.919
with Objective-C. This is not through
the Instant Message Framework.

00:39:58.920 --> 00:40:01.990
This is actually by way of the AppleScript API.

00:40:01.989 --> 00:40:07.819
So the Scripting Bridge is actually going to go and it's
going to build a dynamic API based on the AppleScript API

00:40:07.820 --> 00:40:11.019
in really whichever language supports the Scripting Bridge.

00:40:11.019 --> 00:40:14.900
At this point it's really Objective-C, Ruby, and Python.

00:40:14.900 --> 00:40:19.230
Third-party developers will probably develop other ones,
but for now, or today anyway, we're just going to talk

00:40:19.230 --> 00:40:25.409
about Objective-C. It's basically going to
make every AppleScript command available

00:40:25.409 --> 00:40:27.480
to whichever language is supporting that bridge.

00:40:27.480 --> 00:40:31.699
Event Handlers, unfortunately, cannot do this directly.

00:40:31.699 --> 00:40:37.429
What you could do is you could write an Event Handler
that sends an AppleScript command to your own application,

00:40:37.429 --> 00:40:39.519
which you could then, sort of, do whatever you like with.

00:40:39.519 --> 00:40:43.170
But you cannot write an Event Handler
in Ruby or Objective-C or Python.

00:40:43.170 --> 00:40:45.409
It always has to be AppleScript.

00:40:45.409 --> 00:40:49.389
It's also worth pointing out that this
works with any scriptable application.

00:40:49.389 --> 00:40:53.139
iChat has not done anything to adopt the Scripting Bridge.

00:40:53.139 --> 00:40:58.170
Just by us having a scripting dictionary the
Scripting Bridge is going to sort of build this for us.

00:40:58.170 --> 00:41:03.930
This is actually true for any Mac OS X application
that has an AppleScript dictionary, including your own.

00:41:03.929 --> 00:41:09.469
So if you needed one more reason to make your
application scriptable, this is a pretty good one.

00:41:09.469 --> 00:41:12.379
So let's talk about using the Scripting Bridge with iChat.

00:41:12.380 --> 00:41:18.019
Again, we're going to talk about Objective-C.
The first thing you're going to want

00:41:18.019 --> 00:41:22.449
to do is build the Objective-C
headers using the sdp command.

00:41:22.449 --> 00:41:28.109
For iChat we're going to use the sdef command to sort of
dump AppleScript's, iChat's AppleScript dictionary out

00:41:28.110 --> 00:41:31.680
and then we're going to pass it into the sdp command.

00:41:31.679 --> 00:41:35.059
This is basically going to create
a header file called iChat.h

00:41:35.059 --> 00:41:38.539
which you can then include in your own Objective-C project.

00:41:38.539 --> 00:41:41.019
And as you can see, here's kind of what you'll see.

00:41:41.019 --> 00:41:43.489
It's basically going to create an Objective-C counterpart

00:41:43.489 --> 00:41:48.159
for every AppleScript command and
class that we see or that it finds.

00:41:48.159 --> 00:41:55.769
So at this point you can dynamically create and use
these objects through Objective-C. So, for instance,

00:41:55.769 --> 00:42:02.239
in this little script here all it would do is at first it's
going to look up the class, look up the application class,

00:42:02.239 --> 00:42:05.349
it's going to initialize it, then
it's going to set its statusMessage.

00:42:05.349 --> 00:42:10.269
So, kind of the counterpart AppleScript of this
would be, you know, tell application iChat

00:42:10.269 --> 00:42:12.579
setStatusMessage to using the Scripting Bridge.

00:42:12.579 --> 00:42:15.549
The Objective-C syntax is actually very close.

00:42:15.550 --> 00:42:18.890
It's also worth pointing out that
if you ever use NSAppleScript

00:42:18.889 --> 00:42:23.400
in your application the Scripting Bridge is
a much easier and a much faster way to do it,

00:42:23.400 --> 00:42:28.840
rather than sort of dynamically building and, you know,
generating your own AppleScript's programmatically.

00:42:28.840 --> 00:42:33.440
You know, just in, build the header file,
include it in your project and use it that way.

00:42:34.639 --> 00:42:37.309
So, I'll just kind of walk through some code.

00:42:37.309 --> 00:42:38.849
We have a demo available.

00:42:38.849 --> 00:42:47.369
iChatStatusFromApplication, which I have open here.

00:42:48.630 --> 00:42:50.260
And the project is pretty simple.

00:42:50.260 --> 00:42:53.730
So I've already gone ahead and I've
wrote, I've included the header file.

00:42:53.730 --> 00:43:02.360
But all this application is going to do is basically just
set iChat status to the current frontmost application.

00:43:02.360 --> 00:43:05.599
So one thing we will actually have
to do here is enable assistive devices.

00:43:05.599 --> 00:43:06.719
So I'll turn that on.

00:43:06.719 --> 00:43:10.769
And I'll just kind of run the application
to show you what it's doing.

00:43:10.769 --> 00:43:12.849
So here's this kind of the window,
it doesn't do all that much.

00:43:12.849 --> 00:43:16.400
I'll just leave it right below iChat status.

00:43:16.400 --> 00:43:20.639
But, sort of, as I browse around to different applications
and launch different things, if I launch Calculator,

00:43:20.639 --> 00:43:26.089
for instance, it's just going to set my status
image and status message to that in iChat.

00:43:27.409 --> 00:43:31.489
So if I wanted to start, you know, chats or whatever.

00:43:31.489 --> 00:43:32.049
And there it is.

00:43:32.050 --> 00:43:34.390
So if you really want to tell everyone
what you're doing all the time,

00:43:34.389 --> 00:43:37.259
here's kind of a sample that you
could use as a basis for that

00:43:37.260 --> 00:43:39.870
So let's look at the code for that.

00:43:39.869 --> 00:43:45.359
There's really only one class that you
need to look at, just the ISFAController.

00:43:48.119 --> 00:43:52.989
And primarily, this is a, it's a pretty simple application.

00:43:52.989 --> 00:43:59.939
The first thing is when the controller awakes from the NIB
we're going to create a reference to the iChat application,

00:43:59.940 --> 00:44:03.369
much like you saw on the slide where
I, kind of, showed some demo syntax.

00:44:03.369 --> 00:44:07.589
We're just going to do classForApplicationWith
BundleIdentifier and then initialize it.

00:44:07.590 --> 00:44:11.150
And we'll just keep a local reference to that.

00:44:12.199 --> 00:44:16.500
So, sort of, as we continue, you'll see we're just
going to register for a few workspace notifications.

00:44:16.500 --> 00:44:20.099
So when an application launches or
terminates we'll kind of keep track of that

00:44:20.099 --> 00:44:23.099
so we can update iChat status appropriately.

00:44:24.920 --> 00:44:31.260
And basically at this point we're just listening
for notifications once the application has launched.

00:44:31.260 --> 00:44:35.170
So applicationLaunched, this is one of the call
backs for those workspace switch notifications,

00:44:35.170 --> 00:44:38.519
going to call an applicationSwitched method.

00:44:38.519 --> 00:44:42.309
If we take a closer look at that, this is pretty simple.

00:44:42.309 --> 00:44:47.469
What it's going to do is we're going to ask
the workspace for the active application.

00:44:47.469 --> 00:44:50.469
So it's going to give us the front
most application at this time.

00:44:50.469 --> 00:44:52.789
We're going to get the application's process identifier.

00:44:52.789 --> 00:44:57.059
This is just so we can keep track of which process
identifier is, you know, to which application

00:44:57.059 --> 00:44:59.650
and so we can just kind of pick out when it changes.

00:44:59.650 --> 00:45:08.250
So, if the process identifier has switched and it's not our
own application's process identifier, we'll continue on.

00:45:08.250 --> 00:45:11.840
If iChat is running, it's pretty straight forward.

00:45:11.840 --> 00:45:15.930
If a status is set to available, all
we're going to do then is we're going

00:45:15.929 --> 00:45:19.079
to get the icon for the front most application.

00:45:19.079 --> 00:45:22.250
We're going to get a tiffRepresentation,
since that's what iChat is expecting.

00:45:22.250 --> 00:45:25.849
Then we're going to set that on the iChat app.

00:45:25.849 --> 00:45:27.809
This is actually a Scripting Bridge call right here.

00:45:27.809 --> 00:45:31.119
It's, it's kind of misleading that it's
actually just, you know, setImage,

00:45:31.119 --> 00:45:35.239
it's really an Objective-C Scripting Bridge call to iChat.

00:45:35.239 --> 00:45:39.479
Likewise we have an icon view in our own application
just to kind of show the status there as well.

00:45:39.480 --> 00:45:41.820
We're going to set the image there.

00:45:41.820 --> 00:45:47.550
Similarly for the statusString we're going to generate,
you know, saying using the front most application.

00:45:47.550 --> 00:45:50.390
We'll set iChat's statusMessage,
again, this is a Scripting Bridge call.

00:45:50.389 --> 00:45:56.519
And we'll also set the label within
our own application to that string.

00:45:56.519 --> 00:46:00.090
And as you can see it's pretty simple.

00:46:00.090 --> 00:46:03.740
So one thing I didn't mention yet
is the Join Chat Room button.

00:46:03.739 --> 00:46:11.699
So if I push that, at this point
I'm in the iChatstatus chat room.

00:46:11.699 --> 00:46:14.429
So this is actually kind of, kind of a neat way,

00:46:14.429 --> 00:46:17.940
if you really want to talk about the iChat
status demo and really how tremendous it is,

00:46:17.940 --> 00:46:20.150
there's an AIM chat room available to you.

00:46:20.150 --> 00:46:21.780
And let's look at that code too.

00:46:21.780 --> 00:46:27.030
So this is the action that is called
when the chat room button is pushed.

00:46:27.030 --> 00:46:31.850
First we're going to look at the services available in iChat
and we're actually going to want to look for an AIM service

00:46:31.849 --> 00:46:34.610
since the chat room really only exists on AIM.

00:46:34.610 --> 00:46:41.570
And we're going to iterate through the services to find
the first AIM service whose status is set to connected.

00:46:42.780 --> 00:46:46.340
And if we do find one we're going
to then create a dictionary.

00:46:46.340 --> 00:46:51.350
Just as we did in AppleScript when we created a new chat
room object there, we specify the service and the name

00:46:51.349 --> 00:46:54.589
of the chat room, which is basically
the chat room's address.

00:46:54.590 --> 00:46:56.440
Then we're going to initialize a text chat.

00:46:56.440 --> 00:47:00.380
So we'll have to look up the class for
the scripting class called textChat.

00:47:00.380 --> 00:47:03.660
We'll initialize it with the properties we create above.

00:47:03.659 --> 00:47:08.429
And then something a little different from the AppleScript
API or from AppleScript directly, you actually have to go

00:47:08.429 --> 00:47:11.829
and add this to the textChat objects within iChat.

00:47:11.829 --> 00:47:16.319
But once you do that you end up in iChat, oh, thanks, people.

00:47:16.320 --> 00:47:17.240
( Laughs )

00:47:17.239 --> 00:47:19.489
You end up, you, thank you.

00:47:19.489 --> 00:47:22.819
You end up in the iChat status chat room.

00:47:22.820 --> 00:47:25.980
Ok. So that is a Scripting Bridge.

00:47:27.409 --> 00:47:30.949
And again, that sample is available to you.

00:47:30.949 --> 00:47:33.759
We can go back to the slides.

00:47:37.429 --> 00:47:41.989
So that's just kind of a few examples of what you can
use the Scripting Bridge for, but, as I said before,

00:47:41.989 --> 00:47:48.369
all the functionality that exists in iChat's AppleScript
dictionary is also available through the Scripting Bridge.

00:47:48.369 --> 00:47:50.799
So you could, for instance, transfer a file.

00:47:50.800 --> 00:47:54.680
If you pass an NSURL to the send command
it's actually going to send the file

00:47:54.679 --> 00:47:57.649
at that URL, a pretty simple way to do it.

00:47:57.650 --> 00:48:01.430
You could do live help for your users.

00:48:01.429 --> 00:48:05.329
In addition to, you know, starting a chat with a chat
room you could just have someone that you, you know,

00:48:05.329 --> 00:48:09.000
one of your employees providing, you
know, kind of help desk services on AIM.

00:48:09.000 --> 00:48:12.059
You could start a text chat this way.

00:48:12.059 --> 00:48:15.969
And, kind of the example that I showed
you in the iChat status, is, you know,

00:48:15.969 --> 00:48:17.799
going to a chat room with a specific name.

00:48:17.800 --> 00:48:21.560
So if you want people to talk about your chat
room or talk about your application in a chat room

00:48:21.559 --> 00:48:24.880
to meet up, you could provide that as well.

00:48:24.880 --> 00:48:26.780
So, that's kind of it.

00:48:26.780 --> 00:48:31.700
Let's kind of take a closer look and kind of
step back and see what we've talked about today.

00:48:31.699 --> 00:48:33.809
So we talked about three technologies.

00:48:33.809 --> 00:48:39.710
We talked about the Instant Message Framework,
iChat's AppleScript API, and the Scripting Bridge.

00:48:39.710 --> 00:48:46.920
And to get information from iChat you can actually use
any of these technologies for kind of ad hoc searching

00:48:46.920 --> 00:48:48.700
and like looking up the status of someone.

00:48:48.699 --> 00:48:52.529
AppleScript and the Scripting Bridge
are perfectly good ways to do that.

00:48:52.530 --> 00:48:59.019
But for, kind of, full-fledged notifications and
sort of real-time status as it happens in iChat,

00:48:59.019 --> 00:49:02.900
the Instant Message Framework is really
the way to go there, so two checks there.

00:49:02.900 --> 00:49:06.730
To control iChat the Instant Message
Framework actually doesn't provide anything.

00:49:06.730 --> 00:49:10.519
So there is no control provided by
way of the Instant Message Framework.

00:49:10.519 --> 00:49:12.579
If you want to do that you'll have to use AppleScript

00:49:12.579 --> 00:49:18.750
and since Scripting Bridge is basically just the AppleScript
API you can do it through the Scripting Bridge as well.

00:49:18.750 --> 00:49:22.280
Now for Event Handling, as I said
before, that's AppleScript only.

00:49:22.280 --> 00:49:24.390
It does not bridge through the Scripting Bridge.

00:49:24.389 --> 00:49:28.799
But you could create an AppleScript that
you could hook into iChat's Event Handlers

00:49:28.800 --> 00:49:33.030
that then does something through
your own scriptable application.

00:49:33.030 --> 00:49:38.640
And, though we didn't talk about it today, iChat Theater
is also available through the Instant Message Framework.

00:49:38.639 --> 00:49:41.129
I would encourage you to come to
your session tomorrow at 2:00PM

00:49:41.130 --> 00:49:44.519
in the Presidio to hear more about iChat Theater.

00:49:44.519 --> 00:49:49.630
So kind of in the summary, as a summary, what we
really want to say is that iChat is not just for users.

00:49:49.630 --> 00:49:54.619
You can take advantage of it in your own application
to sort of connect your users together and provide kind

00:49:54.619 --> 00:49:57.599
of a better and, you know, new communication experience.

00:49:57.599 --> 00:50:01.670
You can also display presence information
in your application

00:50:01.670 --> 00:50:05.550
to provide a more consistent experience as you
might see in mail or Address Book and, you know,

00:50:05.550 --> 00:50:11.030
other applications on Mac OS X. But it also allows you
to kind of take advantage of iChat for automation

00:50:11.030 --> 00:50:16.519
in your own application by way of the AppleScript API
or AppleScript and also through the Scripting Bridge.

00:50:16.519 --> 00:50:20.110
So if you don't want to use AppleScript
you could do it by way of Objective-C,

00:50:20.110 --> 00:50:24.210
Ruby, or Python and probably other languages eventually.

00:50:24.210 --> 00:50:27.289
So for more information, please contact Matt Drance.

00:50:27.289 --> 00:50:29.619
He's the evangelist for our technologies.

00:50:29.619 --> 00:50:33.849
We've also set up a mailing list with which you can,
you know, you can ask us questions about iChat Theater

00:50:33.849 --> 00:50:35.989
or the Scripting Bridge or the AppleScript API.

00:50:35.989 --> 00:50:40.069
And the samples that we talked about
today and a few more are available

00:50:40.070 --> 00:50:43.900
on the attendee site if you want to take a look.

00:50:43.900 --> 00:50:45.710
We've also got a few labs that might be interesting.

00:50:45.710 --> 00:50:52.300
If you want to talk about application scripting and
scriptability, there's a Lab tomorrow at 3:30PM.

00:50:52.300 --> 00:50:54.780
Likewise at the same time there's actually
an iChat Lab.

00:50:54.780 --> 00:50:58.210
So if you have questions about iChat
scripting or the Instant Message Framework

00:50:58.210 --> 00:51:02.010
or iChat Theater, you can talk to us then about it too.