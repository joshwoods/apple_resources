WEBVTT

00:00:12.269 --> 00:00:14.410
>> Gage: Good afternoon.

00:00:14.410 --> 00:00:17.980
Welcome to Session 552 Understanding Manage Deployments.

00:00:17.980 --> 00:00:22.510
So you've now officially entered
the home stretch for WWDC 07.

00:00:22.510 --> 00:00:25.150
( Cheering )

00:00:25.149 --> 00:00:27.779
( Applause )

00:00:27.780 --> 00:00:33.149
So my name is Gage Beauchemin I'm the systems
engineer manager for enterprise at Apple sales.

00:00:33.149 --> 00:00:35.960
And I've got Veronica Law, she's one of our engineers.

00:00:35.960 --> 00:00:39.820
And we're going to be talking today about managed deployments.

00:00:39.820 --> 00:00:43.009
And I know a lot of you would rather
maybe be grabbing a beer right now

00:00:43.009 --> 00:00:45.210
or wonder maybe you should've made that decision.

00:00:45.210 --> 00:00:48.299
So, why would you want to be here?

00:00:48.299 --> 00:00:51.709
Why do you want to be listening to us talk to
you about managed deployments when you've had

00:00:51.710 --> 00:00:56.789
so many sessions this week talking about
deploying software, packaging, all of those things.

00:00:56.789 --> 00:01:02.280
So, what I hope to give you guys today is the, at the very
end, is to wrap it all up and give you the idea of how

00:01:02.280 --> 00:01:08.120
to take all these tools and methodologies and roll them out
and see how some of our customers have actually used these

00:01:08.120 --> 00:01:13.980
to manage the deployments in getting software
out, built, and supported in their organizations.

00:01:13.980 --> 00:01:19.219
So, I've got a history from being an IT
administrator years ago so I'm obviously rusty.

00:01:19.219 --> 00:01:23.859
But, what I've been doing for the last four years is
being part of Apple's professional services division

00:01:23.859 --> 00:01:27.489
and helping deploy software and
helping companies understand how

00:01:27.489 --> 00:01:31.699
to build mass deployments to meet
their organization's needs.

00:01:31.700 --> 00:01:36.659
And so, these customers mostly are
fortune 1000 commercial customers.

00:01:36.659 --> 00:01:42.009
And Veronica comes to us from NASA where she spent
about eight years doing integration of platforms

00:01:42.010 --> 00:01:45.250
and deployments in heterogeneous environments.

00:01:45.250 --> 00:01:50.799
So, if you stick around for the next hour the
things I'm going to try to go over with you is one,

00:01:50.799 --> 00:01:54.979
defining what a managed deployment is because
before we talk about it we want to know what it is.

00:01:54.980 --> 00:01:57.420
The second is process surrounding management deployment.

00:01:57.420 --> 00:02:04.299
We want to discuss what goes into that and also give
you a case study of how someone's used these processes

00:02:04.299 --> 00:02:10.060
to actually do a deployment and then, talk about some
sample scripts, give you those sample scripts to take home

00:02:10.060 --> 00:02:14.509
and go over some tips and tricks to maybe take some
of the things that you seen throughout the week

00:02:14.509 --> 00:02:16.620
and come up with some new ways to use them.

00:02:16.620 --> 00:02:25.550
And then we'll do wrap up and Q and A.
So, simply placing computers on a desk

00:02:25.550 --> 00:02:31.100
and installing some software doesn't count.

00:02:31.099 --> 00:02:37.599
So, if we go to Wikipedia, the source for all definitions,
and look for managed deployment we get nothing.

00:02:39.500 --> 00:02:41.990
( Laughter )

00:02:41.990 --> 00:02:44.480
( Applause )

00:02:44.479 --> 00:02:44.829
This one?

00:02:44.830 --> 00:02:46.880
( Talking in background )

00:02:46.879 --> 00:02:50.990
So I'm sure by the end of the hour you stole my line.

00:02:50.990 --> 00:02:53.450
I am sure by the end of the hour
somebody's going to go upload that.

00:02:53.449 --> 00:02:55.929
So, I'll give you some suggestions
for what a managed deployment is.

00:02:55.930 --> 00:03:02.710
So, according to the "Gage-i-Pedia" managed deployment
is the process for building a system to install support

00:03:02.710 --> 00:03:06.670
and maintain computers in an organization
to achieve specific goals.

00:03:06.669 --> 00:03:09.179
And, this last part is important, specific goals.

00:03:09.180 --> 00:03:12.500
So these are not what I'm dictating
you guys should be having.

00:03:12.500 --> 00:03:15.219
Because, who's going to listen to me, right?

00:03:15.219 --> 00:03:18.599
These are suggestions about what commonly
comes up in a lot of organizations

00:03:18.599 --> 00:03:21.139
that I've talked to about what are some goals.

00:03:21.139 --> 00:03:25.169
And goals are important because you
want to have goals so that as you're going

00:03:25.169 --> 00:03:27.239
through this process it's easy to get sidetracked.

00:03:27.240 --> 00:03:30.620
It's easy to get taken off course and go down a rabbit hole.

00:03:30.620 --> 00:03:37.180
And, setting aside what the goals for your deployment are at
the beginning helps you check in from time to time and go.

00:03:37.180 --> 00:03:40.409
How is what I'm doing right now
working to achieve those goals?

00:03:40.409 --> 00:03:42.289
Or is it not?

00:03:42.289 --> 00:03:46.090
So, some are enabling users to be more productive, duh.

00:03:46.090 --> 00:03:48.629
Minimize the total cost of ownership.

00:03:48.629 --> 00:03:50.199
Improve the user's experience.

00:03:50.199 --> 00:03:51.799
Sometimes that really gets lost.

00:03:51.800 --> 00:03:57.600
Reduce user downtime and reduce
support cost to the organization.

00:03:57.599 --> 00:04:03.829
So, as we go through we're going to talk about how some of
the goals that were for one of our customers get defined.

00:04:03.830 --> 00:04:07.010
But before we do that let's talk about
what else is there to advantage deployment.

00:04:07.009 --> 00:04:11.000
Obviously we talked about building and deploying
a standard image everyone gets that part.

00:04:11.000 --> 00:04:16.850
But, migrating user data, patching and updating
once machines are out there in the ecosystem.

00:04:16.850 --> 00:04:21.960
Training support, and of course
asset tracking and inventory.

00:04:21.959 --> 00:04:23.609
So you know what you still have.

00:04:23.610 --> 00:04:26.150
So if you're going through this
process there's various stages.

00:04:26.149 --> 00:04:27.299
And I define eight of them.

00:04:27.300 --> 00:04:29.290
You guys can choose to do what you want with this.

00:04:29.290 --> 00:04:34.120
But, my whole goal is before you start with this doing
something, you should actually plan what you're going to do.

00:04:34.120 --> 00:04:36.889
Go out and gather user feedback.

00:04:36.889 --> 00:04:38.159
Find out what the needs are.

00:04:38.160 --> 00:04:41.400
Do a needs assessment of what you
need to be delivering to your users.

00:04:41.399 --> 00:04:43.169
And then build something.

00:04:43.170 --> 00:04:47.300
And the first thing you're going to build
is what I consider your best effort.

00:04:47.300 --> 00:04:51.090
And no matter how much we know about our in
users or how much we think we know about our

00:04:51.089 --> 00:04:56.039
in users typically our first best
effort isn't quite good enough.

00:04:56.040 --> 00:05:00.470
And I know it's a knock to the ego but the
reality is, is that you need a pilot to go ahead

00:05:00.470 --> 00:05:06.080
and learn about how your best effort either
does or doesn't meet the needs of your in users.

00:05:06.079 --> 00:05:10.029
And so one of the important things is make
sure your pilot group is as diverse as possible

00:05:10.029 --> 00:05:13.229
to represent the whole organization or at
least the whole organization that's going

00:05:13.230 --> 00:05:16.030
to be using the deployment that you build.

00:05:16.029 --> 00:05:21.379
So, once you've learned from that, use that to revise
your builds and maybe you want to go through this process

00:05:21.379 --> 00:05:25.259
of piloting and revising a couple three four
times until you feel you've got it right.

00:05:25.259 --> 00:05:27.459
And then you want to deploy.

00:05:27.459 --> 00:05:31.329
So, deploying in my mind is just a bigger pilot.

00:05:31.329 --> 00:05:34.060
Right, because you're going to find
out more about what's happening.

00:05:34.060 --> 00:05:38.199
So again, go back to learning and
then go ahead and update your system.

00:05:38.199 --> 00:05:42.139
And this is where once you've gone into the wild
and deployed you want a mechanism to make sure

00:05:42.139 --> 00:05:47.719
that once you learn by doing that you can then
integrate it in and fix and build out wall machines

00:05:47.720 --> 00:05:51.440
that have been deployed without
having to re-image the whole thing.

00:05:51.439 --> 00:05:53.430
So, let's talk about a case study here.

00:05:53.430 --> 00:05:55.459
I'm not going to use the company's name.

00:05:55.459 --> 00:05:58.779
We're just going to say it's a large electronics manufacturer.

00:05:58.779 --> 00:06:03.309
So, the first, these are the goals that this
company came up with for their deployment.

00:06:03.310 --> 00:06:07.139
And the first thing they wanted to do is these
machines were going to buy these nice pretty maps

00:06:07.139 --> 00:06:09.219
and we're going to put them through our inner organization.

00:06:09.220 --> 00:06:14.090
And the concept that our guys sending
the checks are these are expensive.

00:06:14.089 --> 00:06:16.319
Everyone thinks Macs are expensive.

00:06:16.319 --> 00:06:19.969
But they wanted to look further into the system
because, I mean we can get into that debate.

00:06:19.970 --> 00:06:24.590
But what they wanted to look at is what's the total
cost of the organization deploying, supporting,

00:06:24.589 --> 00:06:27.379
and maintaining these machines
throughout the life of the machines?

00:06:27.379 --> 00:06:29.350
How do we protect that cost?

00:06:29.350 --> 00:06:36.220
So, they also wanted to take this new platform they were
building in and they wanted to use that as a platform

00:06:36.220 --> 00:06:41.800
to revisit 15 years of experience deploying Windows
and maybe some of the assumptions and the rules

00:06:41.800 --> 00:06:44.569
that have been built around how the
deploy machines and pull them out,

00:06:44.569 --> 00:06:47.519
put them on the table, and really
see if this still made sense.

00:06:47.519 --> 00:06:50.849
Because they didn't want to infuse a lot
of previous knowledge on a platform

00:06:50.850 --> 00:06:52.860
that may or may not work with this new platform.

00:06:52.860 --> 00:06:56.920
They also wanted to leverage a Windows-focused help desk.

00:06:56.920 --> 00:06:59.800
They didn't want to have to get a whole new IT support group.

00:06:59.800 --> 00:07:02.740
How many here have budget for more people?

00:07:02.740 --> 00:07:04.840
No we're not, those dot com days are over, right.

00:07:04.839 --> 00:07:07.399
We're in more of how to get more out of less.

00:07:07.399 --> 00:07:08.849
So they want to do the same thing.

00:07:08.850 --> 00:07:15.680
In fact, some companies actually, I find, are still looking
at outsourcing off shoring their IT support, their help desk.

00:07:15.680 --> 00:07:22.209
So, they want a way that they can leverage non Mac gurus
to sit on the help desk and use their Mac gurus for building

00:07:22.209 --> 00:07:25.359
and designing their infrastructure
and actually doing proactive work.

00:07:25.360 --> 00:07:30.509
So, they also want to do this all
while minimizing user down time,

00:07:30.509 --> 00:07:33.750
maximizing their up time, and minimizing the impact on IT.

00:07:33.750 --> 00:07:37.980
And where possible, integrating into the
existing infrastructure they already have,

00:07:37.980 --> 00:07:42.330
instead of having to build a whole
new parallel system just for the Macs.

00:07:42.329 --> 00:07:44.810
So, I have, I keep wanting to look at the screen.

00:07:44.810 --> 00:07:49.209
So the first thing they did is they wanted
to, the built out a zero touch deployment.

00:07:49.209 --> 00:07:52.989
And the reason they looked at this is they,
if you look at companies who talk to them,

00:07:52.990 --> 00:07:56.240
to quantify going out and physically touching a box.

00:07:56.240 --> 00:08:03.069
Most companies can quantify that that it cost them
between 35 dollars and 50 dollars to touch a box.

00:08:03.069 --> 00:08:04.199
Now that's not per hour.

00:08:04.199 --> 00:08:06.240
That's just to physically go touch
it whether it's two minutes

00:08:06.240 --> 00:08:09.110
or half an hour it cost them between 35 and 50 dollars.

00:08:09.110 --> 00:08:12.670
So, if you need to touch a box to
deploy it just figure on adding 50 bucks

00:08:12.670 --> 00:08:14.900
to the cost of that machine right off the bat.

00:08:14.899 --> 00:08:17.620
And every time you need to touch it
therefore out, throughout the rest of the life

00:08:17.620 --> 00:08:20.970
of that machine just keep racking that bill up.

00:08:20.970 --> 00:08:26.840
This company previously was spending depending
between two and four hours to set up a box.

00:08:26.839 --> 00:08:33.279
So, what they would do is they'd get the box from procurement,
they would vision and set up and image the box.

00:08:33.279 --> 00:08:35.159
They'd go physically deliver it to the in user.

00:08:35.159 --> 00:08:39.980
And then they'd the set the in user up, attach it to
the directory service, configure their mail client,

00:08:39.980 --> 00:08:44.750
and do all this nice white glove service, real
good experience from the in user's standpoint.

00:08:44.750 --> 00:08:47.559
From the IT standpoint it's a very costly endeavor.

00:08:47.559 --> 00:08:51.039
And so, what they wanted to do is they wanted
to continue this white glove experience,

00:08:51.039 --> 00:08:55.319
but they wanted to reduce the impact
on IT both in man hours and in cost.

00:08:55.320 --> 00:09:03.200
So they leveraged NetBoot with ASR to do a complete hands
off image, zero touch imaging where they used extensive use

00:09:03.200 --> 00:09:09.280
of preflight scripts to automate asset tracking and
other pieces of the process, post flight scripts to bind

00:09:09.279 --> 00:09:14.870
at the directory once everything's done, log-in scripts
to configure the machines to the entourage setups

00:09:14.870 --> 00:09:17.679
because they're using Entourage to exchange.

00:09:17.679 --> 00:09:21.000
So, they wanted all this done automated.

00:09:21.000 --> 00:09:23.399
And they wanted it customized for each user.

00:09:23.399 --> 00:09:25.399
This way they don't have to visit the box.

00:09:25.399 --> 00:09:30.889
All the while they wanted to minimize
total cost of ownership.

00:09:30.889 --> 00:09:33.449
So, how did they minimize that total cost of ownership?

00:09:33.450 --> 00:09:38.410
Some of the things they did were partitioning the
hard drive so that you have one hard drive partition

00:09:38.409 --> 00:09:42.929
for all the system software and a
second partition for all the user data.

00:09:42.929 --> 00:09:48.799
What this provided them was the ability to go ahead and
re-image a box without worrying about the user data.

00:09:48.799 --> 00:09:50.599
They didn't have to back it up.

00:09:50.600 --> 00:09:53.310
That takes time and it also potentially
puts the data at risk.

00:09:53.309 --> 00:09:56.089
They didn't have to worry about archiving that data.

00:09:56.090 --> 00:09:57.290
They can just re image a box.

00:09:57.289 --> 00:10:04.209
So this actually really lowered the threshold for them of
when they could pull the trigger of re-imaging a machine.

00:10:04.210 --> 00:10:11.910
a lot of companies will spend four, five, six hours
invested in a single box trying to trouble shoot the ghost

00:10:11.909 --> 00:10:15.709
in the show in that box knowing full well that if
they just re imaged it, it wouldn't be a problem.

00:10:15.710 --> 00:10:18.600
But there's such a fear that maybe if I re
image it I'm not going to catch everything.

00:10:18.600 --> 00:10:21.990
Or, how do I put it back to where it was
that they just avoid the whole thing.

00:10:21.990 --> 00:10:24.360
So we wanted to take that pain point away.

00:10:24.360 --> 00:10:30.379
They're making extensive use of the packaging
format for deploying all of their software.

00:10:30.379 --> 00:10:34.240
I'll repeat that, for deploying all of their
software they're using packaging format.

00:10:34.240 --> 00:10:36.779
They're leveraging a push-pull model.

00:10:36.779 --> 00:10:41.789
They, phone home and pull software down on a
regular basis but they also can take those packages

00:10:41.789 --> 00:10:44.029
and push them out where it makes appropriate sense.

00:10:44.029 --> 00:10:51.839
They do, not only hands off deployment, but
hands off support and maintenance of the boxes.

00:10:51.840 --> 00:10:58.269
The only time IT physically touches a box is when the
box breaks, there's something hardware wrong with it

00:10:58.269 --> 00:11:01.939
and then the in user brings it into the depot.

00:11:01.940 --> 00:11:05.840
They really embrace this hands off
approach to deployment and support.

00:11:05.840 --> 00:11:12.230
Also leveraging scripts as much as possible to automate as
many things as possible continue to involve on that policy.

00:11:12.230 --> 00:11:18.009
And then also using policy base management out of a
central repository to make decisions about what goes

00:11:18.009 --> 00:11:21.439
where for your customization of these boxes.

00:11:21.440 --> 00:11:25.600
Okay, so let's talk about the components
they put in the machine or into the system.

00:11:25.600 --> 00:11:26.730
So, we've got a NetBoot server.

00:11:26.730 --> 00:11:27.670
We've got a file server.

00:11:27.669 --> 00:11:31.269
We've got directory services and a MySQL Database.

00:11:31.269 --> 00:11:35.299
So what they're really using is they're using
NetBoot and ASR to do the initial deployments.

00:11:35.299 --> 00:11:42.000
They're using AFP file servers to host their
maser DMG image and al the package images.

00:11:42.000 --> 00:11:46.269
They're using package format obviously
and directory service.

00:11:46.269 --> 00:11:48.409
Now this customer, they're using active directory.

00:11:48.409 --> 00:11:54.679
But you can us active directory, open directory
open LDAP, choose your favorite.

00:11:54.679 --> 00:12:01.489
They're also using MySQL server with Java
running on a Java server, which is Tomcat.

00:12:01.490 --> 00:12:09.529
And this system was basically a database for hosting some
logic in Java so they can actually intelligently build

00:12:09.529 --> 00:12:12.679
out a system of triggers, policies and actions.

00:12:12.679 --> 00:12:17.909
So, the trigger is when does the box phone
home to talk to the server and the Java engine.

00:12:17.909 --> 00:12:23.230
Okay, they've got business logic embedded in
the Java engine that allows them to say okay

00:12:23.230 --> 00:12:25.779
if this criteria's met perform this action.

00:12:25.779 --> 00:12:33.189
And the resulting action can be go out and install
this package, run this script, remove something,

00:12:33.190 --> 00:12:36.300
there's a range of things that can happen.

00:12:36.299 --> 00:12:39.599
And that leads right into the fact
that a lot of this is predicated

00:12:39.600 --> 00:12:45.060
on scripts, AppleScript, Perl, and Shell Scripts.

00:12:45.059 --> 00:12:48.659
So, what does a user's experience
look like when they get a new machine?

00:12:48.659 --> 00:12:49.649
IT hasn't touched it.

00:12:49.649 --> 00:12:51.069
How does this box get built?

00:12:51.070 --> 00:12:54.300
So, Veronica's here with me and she's
going to basically go through this with them.

00:12:54.299 --> 00:12:57.849
The in user gets they get a machine.

00:12:57.850 --> 00:13:00.190
And they get a quick start guide,
which is right up here on the screen.

00:13:00.190 --> 00:13:06.090
And this quick start guide says you've got your new box,
congratulations, woo hoo, let's pull it out of the box.

00:13:06.090 --> 00:13:12.930
And the first thing you want to do to get this onto
the corporate build system is plug in the power cord.

00:13:12.929 --> 00:13:18.009
Remember it's Veronica not Vanna.

00:13:18.009 --> 00:13:20.750
Next thing they're going to do is plug in the Ethernet.

00:13:23.700 --> 00:13:26.120
So far we haven't lost the in users yet, right.

00:13:26.120 --> 00:13:27.419
We've got pretty pictures.

00:13:27.419 --> 00:13:29.699
Okay here comes the tricky part.

00:13:29.700 --> 00:13:32.000
Take your finger and hold down the N key.

00:13:32.000 --> 00:13:36.129
Okay, and press the power button.

00:13:36.129 --> 00:13:38.919
Okay I think everybody in this room
knows where we're going with this.

00:13:38.919 --> 00:13:41.389
Right? Okay we're netbooting.

00:13:41.389 --> 00:13:47.720
So, the one thing we learned, remember relentless learning
about the user's experience, is that users were complaining

00:13:47.720 --> 00:13:50.480
that their finger hurt from holding it down too long.

00:13:50.480 --> 00:13:56.509
So, we had to add an extra step saying please remove
your finger from the N key when you see the globe.

00:13:56.509 --> 00:13:59.710
( Laughter )

00:13:59.710 --> 00:14:02.910
( Applause )

00:14:02.909 --> 00:14:06.350
Sometimes it's not the technical stuff.

00:14:06.350 --> 00:14:08.210
Actually most of the time it isn't.

00:14:08.210 --> 00:14:10.220
So how does initial deployment look?

00:14:10.220 --> 00:14:11.029
What's going to happen?

00:14:11.029 --> 00:14:12.360
How 's the system going to build up?

00:14:12.360 --> 00:14:13.629
We're going to walk you through each step.

00:14:13.629 --> 00:14:17.519
This is the time that if you're bored go get a beer.

00:14:17.519 --> 00:14:23.319
Alright, so the first thing we do is we go up to the
net server and we boot off a customize NetBoot image.

00:14:23.320 --> 00:14:26.360
We're booting into us of an image sitting on the server.

00:14:26.360 --> 00:14:30.039
And what it's going to do is it's going to run a preflight script.

00:14:30.039 --> 00:14:35.429
That preflight script's going to go out and find
the first disc in the system, which is disc zero.

00:14:35.429 --> 00:14:38.549
And it's going to look to see if we've touched that box before.

00:14:38.549 --> 00:14:45.529
And the way it looks to see if we touched that box before
is if there's two partitions and one of them is named data.

00:14:45.529 --> 00:14:53.529
Okay so, if it's not named that we haven't touched
the box, we're going to go ahead an partition it.

00:14:53.529 --> 00:14:54.389
So it partitions it.

00:14:54.389 --> 00:14:57.069
And the first partition is called Macintosh HD.

00:14:57.070 --> 00:14:58.810
It's 20 gigs.

00:14:58.809 --> 00:15:02.689
Second partition is the remaining data and it's called data.

00:15:02.690 --> 00:15:04.500
And then we go ahead and build a sim link.

00:15:04.500 --> 00:15:07.860
This actually happens a little later in the
process but we'll say it for user sake now.

00:15:07.860 --> 00:15:13.330
We build a sim link from the base system,
which has the OS and everything on it.

00:15:13.330 --> 00:15:18.050
And we want to go ahead and separate all the user
data to the second partition so /users

00:15:18.049 --> 00:15:23.479
on the Macintosh HD is sim linked over
to /users on the second drive.

00:15:25.399 --> 00:15:30.840
Okay so for those of you who are script junkies
where it is, we can walk through it real fast.

00:15:30.840 --> 00:15:33.769
We're basically using diskutil
to go ahead and do that.

00:15:33.769 --> 00:15:40.179
One thing that we did add that the customers
wanted was a warning for the in users that,

00:15:40.179 --> 00:15:43.799
okay say you brought your home machine and
managed it somehow, figured out how to NetBoot.

00:15:43.799 --> 00:15:49.069
And you're about to image your machine, warning
Robinson, you're about to loose all your data.

00:15:49.070 --> 00:15:51.310
Most of the time, guess what happens?

00:15:51.309 --> 00:15:52.309
>> Audience: They lost all their data.

00:15:52.309 --> 00:15:54.239
>> Gage: Yes.

00:15:54.240 --> 00:15:56.649
Okay the least IT wasn't on the hook at that point.

00:15:56.649 --> 00:15:57.669
You said yes.

00:15:57.669 --> 00:16:05.569
Okay, so then we use diskutil, we partition two
drives, HFS plus one for 20 gigs and one for 2000 gigs.

00:16:05.570 --> 00:16:08.440
So far I haven't seen a laptop with 2000 gigs in it.

00:16:08.440 --> 00:16:12.260
So what that's really doing is saying take all the
remaining space and make an HFS partition.

00:16:12.259 --> 00:16:16.569
So this allows us to future proof the script
a little bit for different drive sizes.

00:16:16.570 --> 00:16:20.700
These are all going to be uploaded to
the site so you can download them.

00:16:20.700 --> 00:16:23.190
This is basically our sim link script.

00:16:23.190 --> 00:16:26.880
And we thank Rick Lemman from professional
services who helped this customer.

00:16:26.879 --> 00:16:28.090
These are all his scripts that he built.

00:16:28.090 --> 00:16:31.129
And he was nice enough to share them with us.

00:16:31.129 --> 00:16:37.100
So, the initial deployment continues on
where after we've got the drive imaged,

00:16:37.100 --> 00:16:42.200
or sorry partitioned we want to take an ASR
master image blast it down on that first partition.

00:16:42.200 --> 00:16:44.690
So, now we have our master sitting on this box.

00:16:44.690 --> 00:16:48.200
This is not rocket science, in fact,
this whole process isn't rocket science.

00:16:48.200 --> 00:16:51.570
The Windows guys have been doing stuff like this
for years, the Mac guys have been doing stuff

00:16:51.570 --> 00:16:53.240
like this for years, managed deployments.

00:16:53.240 --> 00:16:56.149
We're just taking in a unique set of
tools and doing it on the Mac platform.

00:16:56.149 --> 00:16:58.299
I just said the Mac guys didn't I?

00:16:58.299 --> 00:17:01.509
Okay, Lenix guys correction.

00:17:01.509 --> 00:17:10.289
Okay so, after we ASR'd it the box has a post flight
script and that post flight script is going to go out

00:17:10.289 --> 00:17:17.639
and it's going to find the Mac address of the first Ethernet
device in the box, which is En0, and it's going to go out

00:17:17.640 --> 00:17:21.960
and find the second Mac address of
the second device which is En1.

00:17:21.960 --> 00:17:25.730
And we're going to go ahead and use
those as unique identifiers.

00:17:25.730 --> 00:17:31.579
And we're going to go out and throw those up and create
a computer count on the MySQL dataBase.

00:17:31.579 --> 00:17:33.339
So we're creating a record.

00:17:33.339 --> 00:17:39.490
And those are our index fields which is
the Mac address, it's unique to every box.

00:17:39.490 --> 00:17:44.259
The next thing we want to do is a script that's
going to go out and do a inventory of this box.

00:17:44.259 --> 00:17:47.549
So what's a good tool to do inventorying with?

00:17:47.549 --> 00:17:54.919
System Profiler, so we do a system profiler report, export
it as XML, and I think this is running our of batteries,

00:17:54.920 --> 00:17:59.789
and it sends it up to the server and
caches it in the data base, okay.

00:17:59.789 --> 00:18:04.329
And it bears saying that when we created that
computer count record, there's a default template.

00:18:04.329 --> 00:18:09.990
And that template already had predefines from triggers and
some policies for this box that we'll discuss in a minute.

00:18:09.990 --> 00:18:14.500
So, we now have an inventory of
what's physically on this box.

00:18:14.500 --> 00:18:19.490
Well, we could also cache in here pre-populate all
the software that we know that's in our master image.

00:18:19.490 --> 00:18:24.160
Right? But what happens when we change
that master image down the road?

00:18:24.160 --> 00:18:27.710
Are we going to want to go change that
default template every time?

00:18:27.710 --> 00:18:28.720
Probably not.

00:18:28.720 --> 00:18:33.549
So, rather than do that we're just going to go ahead
and inventory and troll through the hard drive

00:18:33.549 --> 00:18:38.409
and find every application that dot, ends in .app
in the applications folder and we're going to go ahead

00:18:38.410 --> 00:18:40.779
and send that up to the server as
well and cache in the data base.

00:18:40.779 --> 00:18:45.379
After that, what else is left?

00:18:45.380 --> 00:18:46.920
Receipts right?

00:18:46.920 --> 00:18:52.550
So, we go ahead and take all seven locations where you can
have a receipt in the system and we throw that up there.

00:18:52.549 --> 00:18:56.500
So now we've not only captured everything that
was installed with the package which we done,

00:18:56.500 --> 00:19:00.589
but anything that wasn't installed with the package
so a third party installer as long as it ends

00:19:00.589 --> 00:19:03.459
in .app extension, which are usually hidden.

00:19:05.869 --> 00:19:09.529
Okay, and then here's the typical,
we'll go back into the typical process.

00:19:09.529 --> 00:19:14.779
If after we built our master image, we're six weeks
down the road, seven weeks down the road and we find

00:19:14.779 --> 00:19:19.180
out you know what, we wanted to add a couple of things or we
wanted to fix a couple things and we don't want to repackage

00:19:19.180 --> 00:19:26.620
up our master image, we'll just throw some packages,
post action package installers and throw them down.

00:19:31.190 --> 00:19:36.380
Okay, so now what we have is we have a
system that has basically been imaged.

00:19:36.380 --> 00:19:40.960
It's got some customization done but
for the most part it's a generic box.

00:19:40.960 --> 00:19:45.640
The last script retargets the internal drive
as you boot device, restarts it and we boot up.

00:19:45.640 --> 00:19:52.770
And remember I said that default account had some
triggers in it the template, those trigger were,

00:19:52.769 --> 00:19:57.940
next time the machine boots up, they'll phone home.

00:19:57.940 --> 00:20:03.259
The other trigger had was first time
user logs into any account, phone home.

00:20:03.259 --> 00:20:07.299
Now we can also have cron'd action triggers,

00:20:07.299 --> 00:20:10.460
we can have log out triggers, there's
a variety of things we can do.

00:20:10.460 --> 00:20:13.740
So, we have some pre-staged in the
box just from the initial get go.

00:20:13.740 --> 00:20:18.539
And the first one phones home to MySQL DataBase
and says okay I'm phoning home.

00:20:18.539 --> 00:20:20.159
What do I do?

00:20:20.160 --> 00:20:25.570
And the data base says okay, you've got this
default thing lets bind you to active directory.

00:20:25.569 --> 00:20:32.389
So, it sends down a startup item and tells
the box go bind yourself to active directory.

00:20:32.390 --> 00:20:38.090
So what we'll do is we'll take, we already used the Ethernet
address to create a computer account in My SQL DataBase.

00:20:38.089 --> 00:20:44.000
So why not use the same, be consistent, and create
an account to Active Directory with the same thing?

00:20:44.000 --> 00:20:46.640
Well the only problem is Active
Directory really like combs in fact

00:20:46.640 --> 00:20:49.350
for that matter MySQL doesn't
like combs in your fields either.

00:20:49.349 --> 00:20:55.289
So, what we do is we go ahead and truncate that down
and pre-cursor it with Mac just so we know it's a Mac

00:20:55.289 --> 00:20:59.639
in their system so that the paranoid
AD admins know how to find us.

00:20:59.640 --> 00:21:05.770
And we go ahead and throw that in and we're
creating a computer count in the computer's OU.

00:21:05.769 --> 00:21:09.960
So, if you guys want to see here's
a script that actually does that.

00:21:09.960 --> 00:21:18.230
This started life as Mike Bombich's scripts and got heavily
modified again by Rick Lemman who's sitting right down here.

00:21:18.230 --> 00:21:21.160
And he'll be available for Q&A
if you have any questions later.

00:21:21.160 --> 00:21:25.830
But, basically what this is doing is
running out and finding doing an if config

00:21:25.829 --> 00:21:31.119
to find your Mac address, doing a
little act truncate things down.

00:21:31.119 --> 00:21:36.159
And then it's setting some variables and
then it ultimately does a dsconfigad.

00:21:36.160 --> 00:21:41.390
Now the last thing you're seeing in
variable on here is a $password.

00:21:41.390 --> 00:21:43.780
Anyone know what's wrong with that?

00:21:45.039 --> 00:21:46.369
Some one scream out.

00:21:46.369 --> 00:21:47.229
What?

00:21:47.230 --> 00:21:48.710
>> Audience: It's in the command history.

00:21:48.710 --> 00:21:49.950
>> Gage: Right it's in the command history.

00:21:49.950 --> 00:21:53.420
What else?

00:21:53.420 --> 00:21:55.070
>> Audience: (Inaudible)

00:21:55.069 --> 00:22:01.129
>> Gage: Okay so you're potentially, the root of what
it's doing is you're opening up a security problem

00:22:01.130 --> 00:22:04.540
because you're giving and admin
password in the active directory system.

00:22:04.539 --> 00:22:07.460
So, how do we, we can't get rid of it.

00:22:07.460 --> 00:22:09.880
How can we minimize the impact?

00:22:09.880 --> 00:22:15.980
So, what we did was we went in and created an account
in Active Directory dialed down the ACL's so that all

00:22:15.980 --> 00:22:20.259
that it had the right to do was to create and
account in the computer's LU and nothing else.

00:22:20.259 --> 00:22:24.160
So if someone managed to get this
that's all they'd be able to do.

00:22:24.160 --> 00:22:30.850
So, this script is getting pushed down at first boot to
systems that have only been imaged by our imaging process.

00:22:30.849 --> 00:22:38.209
It's using a, you know, fairly innocuous computer account.

00:22:38.210 --> 00:22:41.450
And then at the very end we destroy it with a secure remove.

00:22:41.450 --> 00:22:46.259
It's not 100 percent foolproof but
at least it's better than nothing.

00:22:46.259 --> 00:22:49.259
You gotta live with Windows you gotta live with Windows.

00:22:49.259 --> 00:22:53.109
So, customizing the workstation.

00:22:53.109 --> 00:22:54.439
We've shown you how this works in theory.

00:22:54.440 --> 00:22:56.150
Let's actually show how it works in practice.

00:22:56.150 --> 00:23:00.670
So, Veronica's going to go ahead and show
you under the hood of what goes on.

00:23:00.670 --> 00:23:02.250
>> Veronica: Thank you Gage.

00:23:03.509 --> 00:23:07.440
( Applause )

00:23:07.440 --> 00:23:14.160
So, less than ten minute ago I show you NetBooting
this Macbook Pro, so during that time we've laid

00:23:14.160 --> 00:23:19.490
down generic image, bound that system to directory domain.

00:23:19.490 --> 00:23:25.690
Add in some of the startup scripts to talk to
MySQL server data base, and put in the login script.

00:23:25.690 --> 00:23:30.529
So, besides all these scripts it's
basically a very generic build.

00:23:30.529 --> 00:23:34.299
There's nothing specific software-
wise installed for any user.

00:23:34.299 --> 00:23:42.419
So, it's nothing like  Xcode for a developer
or you know CS3 for a creative artist.

00:23:42.420 --> 00:23:51.370
So how do we take a generic system to, from out of the box
kind of experience to totally a customized managed client?

00:23:51.369 --> 00:23:58.669
So, to start let me show you the system at
a generic state using a local admin account

00:23:58.670 --> 00:24:02.220
that we have put into the generic build.

00:24:02.220 --> 00:24:13.509
One of the things I want to show you this, but
let's see, can you switch it over to the demo?

00:24:13.509 --> 00:24:22.000
( Silence )

00:24:22.000 --> 00:24:25.099
Yeah, I'll fix that in just a sec.

00:24:25.099 --> 00:24:31.809
See I didn't put in the mirror mirroring so let's see.

00:24:31.809 --> 00:24:35.509
Is it mirroring now.

00:24:35.509 --> 00:24:38.079
( Silence )

00:24:38.079 --> 00:24:40.659
( Talking in background )

00:24:40.660 --> 00:24:43.230
( Laughter )

00:24:43.230 --> 00:24:53.490
Thanks. I do, you know, give out sacrifice
to the demo God' so it's not working.

00:24:53.490 --> 00:25:00.599
>> Gage: Do you want me to walk them through the
process and then on the screen while you do it?

00:25:00.599 --> 00:25:02.899
>> Veronica: It should be right there.

00:25:02.900 --> 00:25:06.410
>> Gage: I'm going to slide this do you want me to walk
them through the process while you get it set up?

00:25:06.410 --> 00:25:08.509
>> Veronica: We got it, it should be.

00:25:08.509 --> 00:25:17.549
( Silence )

00:25:17.549 --> 00:25:19.960
Oh see, sorry, great.

00:25:22.960 --> 00:25:25.509
Yea thank you.

00:25:25.509 --> 00:25:28.789
( Applause )

00:25:28.789 --> 00:25:31.940
Alright, next time I know better.

00:25:31.940 --> 00:25:34.080
Do something for the demo god.

00:25:35.339 --> 00:25:39.279
Mirror, one more step.

00:25:39.279 --> 00:25:41.509
We'll get there

00:25:41.509 --> 00:25:45.990
( Silence )

00:25:45.990 --> 00:25:49.470
Alright, we're there, okay.

00:25:49.470 --> 00:25:55.920
So, first thing you notice that the hard
disc has been divided into two partitions.

00:25:55.920 --> 00:26:00.960
As Gage has point out in that partitioning script
we have one for the OS and one for the data.

00:26:00.960 --> 00:26:08.860
Then next thing is it's basically for this admin we just
get a default blue desktop, although the dockets move

00:26:08.859 --> 00:26:12.059
from the default location, which
is at the bottom to the left.

00:26:12.059 --> 00:26:19.750
And if you take a look right now you have some of the
generic application like mail, iChat, Safari on there.

00:26:19.750 --> 00:26:26.589
So one of the things I want to kind of show you is, at this
point the system has been bound to our directory service.

00:26:26.589 --> 00:26:31.629
So if I were to execute the SCL, is it too small?

00:26:31.630 --> 00:26:32.800
>> Gage: Bigger.

00:26:32.799 --> 00:26:33.990
>> Veronica: Better?

00:26:33.990 --> 00:26:41.880
Alright, and if I go to my directory
service I can see my list as a user, great.

00:26:41.880 --> 00:26:47.530
So this system has been configured and
it's already bound to our directory server.

00:26:47.529 --> 00:26:55.529
So, how do we take it from this system to something
that's customized with specific software for our user?

00:26:55.529 --> 00:27:03.769
So, let me take you step by step from this point how, say,
for this example we have Joe who's a software developer.

00:27:03.769 --> 00:27:10.480
And he's going to show us how from this point
on how he's going to get the system installed

00:27:10.480 --> 00:27:12.819
with the necessary software he needs.

00:27:12.819 --> 00:27:15.509
Can I switch back to the presentation slide?

00:27:15.509 --> 00:27:20.720
( Silence )

00:27:20.720 --> 00:27:27.839
Okay, so Joe is going to face with a
MacBook Pro with a log in screen.

00:27:27.839 --> 00:27:30.339
So the first thing he does is, what are you going to do?

00:27:30.339 --> 00:27:33.559
Put in a user name and password.

00:27:33.559 --> 00:27:38.700
That information is sent and checked
against the directory domain.

00:27:38.700 --> 00:27:47.319
And when it's authenticated a long in script it
then triggered to phone home to our MySQL DataBase

00:27:47.319 --> 00:27:53.069
with the Ethernet address as well as his user name.

00:27:53.069 --> 00:27:58.109
So, at this point the data base server now
has two pieces of information to work with.

00:27:58.109 --> 00:28:01.009
What it's going to do is three things.

00:28:01.009 --> 00:28:09.420
One; it's going to use this user name and then pole the open
directory server for further use or attributes such as his,

00:28:09.420 --> 00:28:15.269
Joe's real name, his email address, maybe
perhaps what group membership he belongs to.

00:28:15.269 --> 00:28:21.670
The next thing that MySQL is going to do is using
the Mac address it's going to check against the list

00:28:21.670 --> 00:28:26.090
of inventory data base that has been keeping
up all the system and the management.

00:28:26.089 --> 00:28:30.839
And find out, for example, Joe's system
is a MacBook Pro with two gigs of memory.

00:28:30.839 --> 00:28:37.679
Perhaps a little, you know, free
space for software installation.

00:28:37.680 --> 00:28:44.090
Third; with all the information about the user
and the system, it's going to then look at a list

00:28:44.089 --> 00:28:48.990
of configuration policy that someone
has precreated or predefined.

00:28:48.990 --> 00:28:53.890
These policies basically are just a list of action items.

00:28:53.890 --> 00:28:55.850
These could be running a script.

00:28:55.849 --> 00:28:58.759
They could be installing and uninstalling packages.

00:28:58.759 --> 00:29:02.049
These policies are key to any user attributes.

00:29:02.049 --> 00:29:09.619
So it could be key to Joe's group membership being in
the software engineer group he's going to get at Xcode.

00:29:09.619 --> 00:29:13.799
And in other software perhaps is
Omnigraph he's going to be getting.

00:29:13.799 --> 00:29:19.339
Once the MySQL server data base figures out
what policy this system and this user required

00:29:19.339 --> 00:29:28.929
that information is sent back to the client and the client
is going to go mount the AFP server downloads the software,

00:29:28.930 --> 00:29:34.009
the scripts, and proceeds to, you
know, install and run the scripts.

00:29:34.009 --> 00:29:43.170
So, one of the things I want to point out is that,
Gage just mentioned earlier, with the type of script

00:29:43.170 --> 00:29:47.460
that you can configure it can highly
customize it to any actions you want.

00:29:47.460 --> 00:29:52.940
So it can be setting up their mail preferences so
a user doesn't have to figure out what, you know,

00:29:52.940 --> 00:29:58.890
mail server or relay server they need, so, all that,
once they have logged in, everything will be configured.

00:29:58.890 --> 00:30:03.200
So let me take this for a spin.

00:30:03.200 --> 00:30:07.299
Oh by the way the script is basically
Applecript and at the end

00:30:07.299 --> 00:30:12.509
of this session it's going to be up
on the server for you to download.

00:30:12.509 --> 00:30:16.809
( Applause )

00:30:16.809 --> 00:30:20.799
So, can I have it back on the display?

00:30:22.700 --> 00:30:24.049
Thank you.

00:30:24.049 --> 00:30:28.769
So, I'm Joe and I'm logging into the system.

00:30:31.019 --> 00:30:34.549
>> Gage: Prior to this the system is
still generic like everything else.

00:30:34.549 --> 00:30:38.589
>> Veronica: Alright, right away
you can see my desktop is different.

00:30:38.589 --> 00:30:44.750
And if I look down on my application folder
pretty soon you notice this role bar changes

00:30:44.750 --> 00:30:48.069
because Omnigraph was getting installed in the background.

00:30:48.069 --> 00:30:50.750
And you can see that's just popped up.

00:30:50.750 --> 00:30:57.190
And now let's take a look at the developer
folder where Xcode's going to be installed.

00:30:57.190 --> 00:31:00.049
And as you see Interface Builder is being installed.

00:31:00.049 --> 00:31:03.329
And as I speak you can see additional folders popping up.

00:31:03.329 --> 00:31:05.509
There's Xcode.

00:31:05.509 --> 00:31:09.779
( Applause )

00:31:09.779 --> 00:31:15.049
So Joe is pretty psyched I mean being a
developer is like oh my God, my Xcode is there.

00:31:15.049 --> 00:31:17.519
As you know Xcode can be pretty bulky.

00:31:17.519 --> 00:31:23.139
So for this demo it's going to take a couple of minutes
to finish install before it runs the other scripts.

00:31:23.140 --> 00:31:26.380
So I have a different system that
has all that, you know, pre built.

00:31:26.380 --> 00:31:29.480
So I want to show you the end product, once baked.

00:31:29.480 --> 00:31:36.509
Is it showing yet?

00:31:36.509 --> 00:31:45.980
( Silence )

00:31:45.980 --> 00:31:50.509
Okay, is it showing up?

00:31:50.509 --> 00:31:56.400
( Silence )

00:31:56.400 --> 00:31:59.630
Okay, sorry about that.

00:31:59.630 --> 00:32:02.420
It doesn't, are we there?

00:32:02.420 --> 00:32:04.110
Okay good.

00:32:04.109 --> 00:32:06.229
Alright, great.

00:32:06.230 --> 00:32:07.740
So this is Joe's environment.

00:32:07.740 --> 00:32:12.009
As we see the desktop has, you
know, changed to the rock garden.

00:32:12.009 --> 00:32:17.390
And if you take a look at, I want to take you to the dock.

00:32:17.390 --> 00:32:21.520
The dock has Xcode and Omnigraph
or icon already added on there.

00:32:21.519 --> 00:32:24.440
That's part of my policy design.

00:32:24.440 --> 00:32:29.769
And let's take a look at Entourage because
that's the script at the end of that install.

00:32:29.769 --> 00:32:32.420
It basically runs the setup script.

00:32:32.420 --> 00:32:37.460
So, oops, no not that one, and
let's take a look at Entourage.

00:32:37.460 --> 00:32:40.650
So, is it going to prompt me to set up my environment?

00:32:40.650 --> 00:32:44.390
No that's just Graffle... close that.

00:32:44.390 --> 00:32:49.509
And it takes a while but eventually it's going to come up.

00:32:49.509 --> 00:32:54.240
( Silence )

00:32:54.240 --> 00:32:55.490
That's still the Graffle.

00:32:55.490 --> 00:32:57.620
Alright where is it?

00:32:57.619 --> 00:33:00.319
There, it takes a while, okay.

00:33:00.319 --> 00:33:04.899
If I check my account settings you
can see that's all a pre-setup.

00:33:04.900 --> 00:33:13.570
So, for Joe that whole customization has
been done by just merely logging onto system,

00:33:13.569 --> 00:33:18.419
so for a user all Joe know is take the
system out of the box, NetBoot it.

00:33:18.420 --> 00:33:21.029
At the end of NetBoot a log in.

00:33:21.029 --> 00:33:24.920
And wa la, I have all the stuff that I need for my job.

00:33:24.920 --> 00:33:28.509
So, that is the customization that you can do.

00:33:28.509 --> 00:33:32.990
( Applause )

00:33:32.990 --> 00:33:36.509
>> Gage: Can we switch the slides back to the other screen?

00:33:36.509 --> 00:33:41.619
( Silence )

00:33:41.619 --> 00:33:43.459
So, there's a lot of tools.

00:33:43.460 --> 00:33:47.029
And Apple's got a lot of tools well
there's some third party tools out there.

00:33:47.029 --> 00:33:51.099
And a lot of people are looking for this
magic bullet that does everything for them.

00:33:51.099 --> 00:33:56.089
And the reality is is that there is no magic bullet.

00:33:56.089 --> 00:33:59.639
There's a lot of different tools out there and
there's a lot of overlap between those tools.

00:33:59.640 --> 00:34:03.290
And a lot see that overlap like is
that, okay this does a little bit

00:34:03.289 --> 00:34:06.450
of what this other thing does, and which one should I use?

00:34:06.450 --> 00:34:08.610
And the answer's both.

00:34:08.610 --> 00:34:11.260
If you've got options then you've got an option of well,

00:34:11.260 --> 00:34:14.900
in this circumstance this one may work
better for my needs at this point and time.

00:34:14.900 --> 00:34:17.700
And in another circumstance this one may work better.

00:34:17.699 --> 00:34:21.609
So, I'd like to take a tool belt approach to this.

00:34:21.610 --> 00:34:24.460
You don't see your carpenter using
just a hammer to build your house.

00:34:24.460 --> 00:34:25.409
You wouldn't dream of it.

00:34:25.409 --> 00:34:30.049
And so you wouldn't just expect one tool to do
everything for you when you're doing managed deployment.

00:34:30.050 --> 00:34:36.180
So Veronica showed you how you can customize a
box, how the box gets customized after we build it

00:34:36.179 --> 00:34:40.079
to give the user a unique experience of what
software goes on there, what's on their dock.

00:34:40.079 --> 00:34:42.329
There's some overlap there with
some of the other tools out there.

00:34:42.329 --> 00:34:48.400
So, managing preferences, you all know you
can control what goes into the user's dock

00:34:48.400 --> 00:34:51.700
through managed preferences and edit directory service.

00:34:51.699 --> 00:34:52.519
Which one works better?

00:34:52.519 --> 00:34:57.920
Maybe both, maybe some things you want to manage
through policies and actions out of a data base

00:34:57.920 --> 00:35:02.680
and some you want to manage through managed
preferences out of your directory service.

00:35:02.679 --> 00:35:04.710
They're not mutually exclusive.

00:35:04.710 --> 00:35:06.599
They're complimentary.

00:35:06.599 --> 00:35:08.369
There's also Apple Remote Desktop.

00:35:08.369 --> 00:35:12.159
We talked about doing that pull
model where stuff gets pulled down.

00:35:12.159 --> 00:35:16.960
Well sometimes when you're doing help desk you don't want to
set up policy and wait for the user to log out and log back

00:35:16.960 --> 00:35:19.760
in again before they can have this
new software pushed to them.

00:35:19.760 --> 00:35:26.140
You just may want to grab of the AFP repository of all
your packages and go push and install a package to the user

00:35:26.139 --> 00:35:28.500
because you're dealing with them right then and there.

00:35:28.500 --> 00:35:31.980
So, ARD have some overlap with some
of the things we've already discussed.

00:35:31.980 --> 00:35:34.610
There's also some reporting tools in there.

00:35:34.610 --> 00:35:39.090
Maybe the reporting you have a policy for everybody
out there doesn't quite cover something you want.

00:35:39.090 --> 00:35:44.750
And ARD can do it faster and more nimbler or
whatever doesn't mean they're mutually exclusive.

00:35:44.750 --> 00:35:50.260
So, there's also a range of third party tools
out there that try to solve that last piece

00:35:50.260 --> 00:35:58.920
that Apple doesn't have something right off the GUI button
to do, which is how do you install third party applications

00:35:58.920 --> 00:36:01.909
after a box is already out there because
we all know the software update's

00:36:01.909 --> 00:36:03.639
out there but it only handles Apple updates.

00:36:03.639 --> 00:36:07.170
Right? So how do we get those pieces down?

00:36:07.170 --> 00:36:08.389
How do we asset manage?

00:36:08.389 --> 00:36:10.190
How do we inventory these boxes?

00:36:10.190 --> 00:36:16.380
So there are a range of solutions, there's LanDesk,
Radmind, LanREV, there's FileWave, there's Casper,

00:36:16.380 --> 00:36:20.260
and there's Alteris, and there's probably a few
more that I haven't mentioned and if you're in the room

00:36:20.260 --> 00:36:22.940
and I didn't mention your product I apologize sincerely.

00:36:22.940 --> 00:36:29.539
So, all these take a slightly different
tack on solving very similar problems.

00:36:29.539 --> 00:36:37.730
So, for the customer we've been referencing we've had
slides that said MySQL, it said Java, it said Tomcat.

00:36:37.730 --> 00:36:40.570
The reality is is that the customer's looking at doing this.

00:36:40.570 --> 00:36:43.100
And in fact, my own team was looking at doing this.

00:36:43.099 --> 00:36:47.279
And we went down Rick and I were actually at
one point trying to design all this ourselves.

00:36:47.280 --> 00:36:48.910
And we had to make a pragmatic choice.

00:36:48.909 --> 00:36:52.879
And the customer did the same thing in
saying do I want to spend all my time doing,

00:36:52.880 --> 00:36:55.890
building infrastructure with MySQL and building Java.

00:36:55.889 --> 00:37:00.379
Or, do I want to buy something off the
shelf that's already gone through all that

00:37:00.380 --> 00:37:02.840
and just focus my time on solving my business needs.

00:37:02.840 --> 00:37:08.570
So, what they ended up doing was they decided on
one of these previous slide one of these solutions

00:37:08.570 --> 00:37:11.559
and the one these guys managed to
choose and I'm not endorsing anybody.

00:37:11.559 --> 00:37:14.210
I'm just saying the one these guys chose was Casper.

00:37:14.210 --> 00:37:25.900
And, Casper is basically a tool that's just leveraging MySQL
it's levering packages and NetBoot, ASR, AppleScript,

00:37:25.900 --> 00:37:30.320
they're doing Java, it basically runs on
the MySQL server that's built in,

00:37:30.320 --> 00:37:33.760
the Java server that's on there, which is Tomcat.

00:37:33.760 --> 00:37:37.320
It automatically sets up at share point so it's
plumbing, just using the plumbing under the hood.

00:37:37.320 --> 00:37:43.590
Any of you guys given the right skill set and the
will to do it can set these kinds of things up.

00:37:43.590 --> 00:37:45.019
You don't need to buy a solution.

00:37:45.019 --> 00:37:46.449
But where do you want to spend your time?

00:37:46.449 --> 00:37:51.319
So, this customer chose to go ahead
and purchase Casper and we've been kind

00:37:51.320 --> 00:37:53.700
of referencing all this stuff that happens magically.

00:37:53.699 --> 00:37:59.359
So Veronica's going to show you how to set up the policies
on the admin side to make all of this a reality.

00:38:00.769 --> 00:38:03.230
>> Veronica: Thank you Gage.

00:38:03.230 --> 00:38:08.570
So we talked about using Casper to
basically address your business needs.

00:38:08.570 --> 00:38:12.610
One of the things that we did just
in the last demo was to show you how

00:38:12.610 --> 00:38:16.769
to configure a system from the
generic to a customize system.

00:38:16.769 --> 00:38:23.119
So, other things that basically we can address our
installing and uninstalling third party software.

00:38:23.119 --> 00:38:27.250
This could be for an admin C, oh my God CS3 is out.

00:38:27.250 --> 00:38:32.769
I have to go up there and do an inventory
of what's up there and figure out okay,

00:38:32.769 --> 00:38:34.539
what other system out there are using CS2?

00:38:34.539 --> 00:38:41.550
And do I have enough disk space, so, basically all
those are different steps that an admin would have to do

00:38:41.550 --> 00:38:45.410
in preparation work before you can address these specific needs.

00:38:45.409 --> 00:38:48.420
Other things are, you know what?

00:38:48.420 --> 00:38:49.480
Give me a sec.

00:38:49.480 --> 00:38:52.920
do you have the, thank you.

00:38:52.920 --> 00:38:58.450
What we have is policy enforcement.

00:38:58.449 --> 00:39:08.849
When I was working at NASA was I was being asked by
the security officer basically well can you set

00:39:08.849 --> 00:39:16.019
up a screen log that enables it every 15 minutes and make
sure that it's, you can't break it without a password.

00:39:16.019 --> 00:39:22.000
So, as you know, you can reset that
at the system configuration panel.

00:39:22.000 --> 00:39:24.539
So a user can usually reset that.

00:39:24.539 --> 00:39:28.550
So how do you do a persistent policy enforcement?

00:39:28.550 --> 00:39:33.530
Other business needs are, for example,
inventory and asset management.

00:39:33.530 --> 00:39:38.710
I find that actually to be a very
important piece to desktop management

00:39:38.710 --> 00:39:42.980
because not only for hardware refresh but also planning.

00:39:42.980 --> 00:39:48.210
One of the things is, as I'm about to show
you with Casper, is without having an accurate

00:39:48.210 --> 00:39:54.849
and also an updated inventory it's really
hard to create a policy and push out some

00:39:54.849 --> 00:39:57.539
of these configurations and enforcements.

00:39:57.539 --> 00:40:00.710
So, just take a quick step back.

00:40:00.710 --> 00:40:01.650
What is Casper?

00:40:01.650 --> 00:40:08.730
As Gage has kind of let you know it basically
leveraged all the existing Apple technology as well

00:40:08.730 --> 00:40:13.579
as open source technology that's
found in our operating system.

00:40:13.579 --> 00:40:19.619
What I found, one of the things that very helpful is, what
they did is wrap all that up, put in the glues to each

00:40:19.619 --> 00:40:27.690
of these technologies, and allow you to have a very easy
configuration console that you can access through the gooey.

00:40:27.690 --> 00:40:35.119
So one thing I kind of thought is one of my
colleagues has said is what about an iPhone?

00:40:35.119 --> 00:40:40.380
So, maybe in the future you can do some
of this configuration using the iPhone.

00:40:40.380 --> 00:40:44.059
So, before I do, let me log onto
the Casper server and show you how

00:40:44.059 --> 00:40:48.509
to create a policy to remove and install the software.

00:40:48.510 --> 00:41:08.670
( Silence )

00:41:08.670 --> 00:41:12.079
This thing is not having.

00:41:13.230 --> 00:41:18.550
I did, let's see, nope.

00:41:18.550 --> 00:41:19.220
Okay there we go.

00:41:19.219 --> 00:41:23.509
>> Gage: Can we get demo slides please?

00:41:23.510 --> 00:41:28.630
( Silence )

00:41:28.630 --> 00:41:37.510
>> Veronica: B. Start on B. Can you switch it over to demo?

00:41:37.510 --> 00:41:45.360
( Talking in background )

00:41:45.360 --> 00:41:53.200
( Silence )

00:41:53.199 --> 00:41:56.379
There we go.

00:41:58.030 --> 00:41:58.620
Okay.

00:41:58.619 --> 00:41:59.679
( Applause )

00:41:59.679 --> 00:42:02.440
Thank you.

00:42:02.440 --> 00:42:04.769
I don't know, okay.

00:42:04.769 --> 00:42:06.099
Let's try this again.

00:42:06.099 --> 00:42:11.039
let me go over to log onto Casper.

00:42:11.039 --> 00:42:17.029
And it'll prompt me for user name and password.

00:42:17.030 --> 00:42:24.830
Now that I'm on there my objective is to create a policy
that's key to any systems that have an older version

00:42:24.829 --> 00:42:28.219
of a software, remove that and then install the new one.

00:42:28.219 --> 00:42:38.129
So, the first thing we'll do is go over to the
management panel and we'll create a smart computer groups.

00:42:38.130 --> 00:42:41.630
So let's click on the smart computer group.

00:42:41.630 --> 00:42:48.090
For this demo I'm going to be removing an in house Apple Quote
Tool that we use for this enterprise sales group.

00:42:48.090 --> 00:42:51.829
So, I'll call this group that's there, there's there.

00:42:51.829 --> 00:42:55.650
And I want to tag that to the type of software.

00:42:55.650 --> 00:43:01.490
So, you can do that by application
title so I'll click on that.

00:43:01.489 --> 00:43:08.250
And now, application title, I can choose to
have a certain phrase or string within that.

00:43:08.250 --> 00:43:17.190
So, I'll type, there we go, that's Apple Quote
Tool, version 1.2.7 so save that group.

00:43:17.190 --> 00:43:23.820
Next thing I do is to go over at the
policy and create this new policy

00:43:23.820 --> 00:43:27.430
to remove the older version with the newer version.

00:43:27.429 --> 00:43:34.379
So, I call that AQT and you can choose
how to trigger by any startup log in.

00:43:34.380 --> 00:43:37.720
So, for this purpose I'll just go for log in.

00:43:37.719 --> 00:43:43.119
And you can actually set the things up by
active when it's active when it's expired.

00:43:43.119 --> 00:43:46.619
The next thing is how often do I want to run this?

00:43:46.619 --> 00:43:49.809
So, let's just go for ongoing.

00:43:49.809 --> 00:43:57.190
And, I'll tap up at the scope to
basically set up who gets this policy.

00:43:57.190 --> 00:44:03.679
I want to add a computer group so I add a computer
group and I'll show it up as Apple quote tool.

00:44:03.679 --> 00:44:07.329
That's the one that I just created.

00:44:07.329 --> 00:44:14.009
Next, I want to basically define the action items which
that is whatever package that I wanted to install.

00:44:14.010 --> 00:44:18.590
So, I'll tap it over to packages at package.

00:44:18.590 --> 00:44:24.360
And here are the list of packages that
I've already pre-created using Composer.

00:44:24.360 --> 00:44:26.800
That's a toolset within Casper Suites.

00:44:26.800 --> 00:44:34.060
So in this case I'll go over to Apple Quote
Tool version 1.2.7 and go uninstall.

00:44:34.059 --> 00:44:39.929
And with the newer version I've created an install.

00:44:39.929 --> 00:44:43.719
And now I'll just save the policy.

00:44:43.719 --> 00:44:47.059
So, let's just review to make sure
I've got everything right.

00:44:47.059 --> 00:44:52.329
I have active policy that's going to be run on log in.

00:44:52.329 --> 00:45:01.809
and if I go to the scope it's going to basically
install on any system that has 1.2.7 group.

00:45:01.809 --> 00:45:08.690
And action item is uninstall the old one
and install the new Apple Quote Tool.

00:45:08.690 --> 00:45:11.460
So that was it and let's see this in action.

00:45:11.460 --> 00:45:17.510
Let's see if I can now get over to the other screen.

00:45:17.510 --> 00:45:21.560
( Silence )

00:45:21.559 --> 00:45:24.509
Do I have the same?

00:45:24.510 --> 00:45:31.110
( Silence )

00:45:31.110 --> 00:45:36.829
So, any news, we've been having a lot of problem with this.

00:45:36.829 --> 00:45:46.730
Okay, D. And you get to the display,
see if I can detect display again.

00:45:46.730 --> 00:45:51.740
Okay it's mirrored.

00:45:51.739 --> 00:45:55.439
So, okay one more try.

00:45:55.440 --> 00:46:06.139
Alright, so I've logged in as admin on the system
and if I take a look at the application folder.

00:46:06.139 --> 00:46:15.389
At this point I should just have,
let's see where's my Quote Tool, 1.3.1.

00:46:15.389 --> 00:46:17.679
It had 1.2.7 before.

00:46:17.679 --> 00:46:25.469
So if you want to take a look at the library
receipt folder to see, okay when was it installed?

00:46:25.469 --> 00:46:34.939
You can see it was just now Apple Quote Tool 1.3.1 and
that was just a minute ago that that just got installed.

00:46:34.940 --> 00:46:41.440
So, that's how easy it is to create a policy
for you to uninstall and install the package.

00:46:41.440 --> 00:46:49.769
One of the other business needs that we thought was very
cool with this tool is I don't know how many out there

00:46:49.769 --> 00:46:56.119
as a system admin, you'll find applications that are
not really necessarily business related that just,

00:46:56.119 --> 00:46:59.190
you know keep happening on being
installed on the users desktop.

00:46:59.190 --> 00:47:00.990
You can advice them not to install it.

00:47:00.989 --> 00:47:03.949
But some how they just end up being there.

00:47:03.949 --> 00:47:12.419
So, instead of chasing down these applications, you know
like, Internet games or programs doing sniffing on network,

00:47:12.420 --> 00:47:18.760
it would be cool to have a way to set
up, basically blacklisting some softwares.

00:47:18.760 --> 00:47:23.500
So what I've done is on the server
is to create a blacklist software.

00:47:23.500 --> 00:47:28.300
So, now I installed using a thumb drive.

00:47:28.300 --> 00:47:31.830
Say, I'm going to pick on LimeWire here Limewire here.

00:47:31.829 --> 00:47:35.480
so I'm going to go ahead and put in thumb drive.

00:47:35.480 --> 00:47:39.039
And where's my LimeWire?

00:47:39.039 --> 00:47:39.860
There it is.

00:47:39.860 --> 00:47:45.900
Let me open it up, install that,
let me just install as an admin.

00:47:45.900 --> 00:47:51.050
Immediately I get my message.

00:47:52.409 --> 00:47:54.809
( Cheering )

00:47:54.809 --> 00:47:57.210
( Applause )

00:47:57.210 --> 00:48:04.639
And so, as you can see this is an often tool for you to
streamline and basically do your admin job without running

00:48:04.639 --> 00:48:08.420
around and creating all these different customized scripts.

00:48:08.420 --> 00:48:12.389
But again, if you are inclined of
doing that, all this tool underneath,

00:48:12.389 --> 00:48:16.549
Casper is basically Apple technology in open stores.

00:48:16.550 --> 00:48:21.600
So, with some elbow grease and midnight
oil I'm sure that can make it happen.

00:48:21.599 --> 00:48:24.509
So with that, thank you Gage.

00:48:24.510 --> 00:48:30.010
( Applause )

00:48:30.010 --> 00:48:35.310
>> Gage: Can you switch back to slides please?

00:48:35.309 --> 00:48:40.590
So now we have a system where you can build data
based machine based on a common standard image

00:48:40.590 --> 00:48:45.690
and based on users logging in and who they
are, what groups they are, what computer

00:48:45.690 --> 00:48:48.670
or physical inventory of the hardware
that they're sitting at.

00:48:48.670 --> 00:48:53.000
You can customize that experience in
that box to whatever their needs are.

00:48:53.000 --> 00:48:58.409
We talked about the deployment and we
said physically getting the software

00:48:58.409 --> 00:49:00.879
out there and deployed is not the whole bag.

00:49:00.880 --> 00:49:02.550
One of the other parts is support.

00:49:02.550 --> 00:49:07.000
And remember we call that, this customer said that
they wanted to leverage Windows centric help desk guys

00:49:07.000 --> 00:49:11.639
who didn't have any particular knowledge
ahead of time of what the Mac platform was.

00:49:11.639 --> 00:49:12.929
And they were faced with two choices.

00:49:12.929 --> 00:49:18.029
Take their Mac gurus who are designing their infrastructure
and put them on the help desk and make them run

00:49:18.030 --> 00:49:23.100
around fighting fires and putting out
fires and be in a very reactive mode.

00:49:23.099 --> 00:49:29.150
Or they could give their Windows help desk users
some training, not expect them to be gurus.

00:49:29.150 --> 00:49:35.720
But, build some way for them to go ahead and troubleshoot
and triage machines effectively so that the majority

00:49:35.719 --> 00:49:41.289
of the problems that users face can get solved and the few
things that are systemic to the whole system can get bumbled

00:49:41.289 --> 00:49:46.039
up to the map guru so they can solve it,
fix it once and solve it for everybody.

00:49:46.039 --> 00:49:52.509
So, I have this approach, this concept
I call it my value meal system.

00:49:52.510 --> 00:49:55.910
And the value meal system is basically
you go into a fast food restaurant

00:49:55.909 --> 00:49:58.679
and you want the easy pick out what you want, right?

00:49:58.679 --> 00:50:02.199
So we have a value meal system
for supporting at this customer.

00:50:02.199 --> 00:50:08.449
And value meal A is, and this is not rocket science
people, everybody knows to trouble shoot, a user calls up

00:50:08.449 --> 00:50:10.759
and says something's wrong with this application.

00:50:10.760 --> 00:50:11.670
It's not running right.

00:50:11.670 --> 00:50:12.909
It's doing something funky.

00:50:12.909 --> 00:50:15.500
What's the first thing you do?

00:50:15.500 --> 00:50:17.449
Sorry? Fire the user?

00:50:17.449 --> 00:50:17.929
Okay. No.

00:50:17.929 --> 00:50:18.109
( Laughs )

00:50:18.110 --> 00:50:24.710
Okay. So the first thing you do is
you isolate it as it's a user issue.

00:50:24.710 --> 00:50:26.500
Is this isolated to this user?

00:50:26.500 --> 00:50:27.900
So long in as a different user.

00:50:27.900 --> 00:50:30.090
Did the problem follow them or not?

00:50:30.090 --> 00:50:31.309
If it did, we all know what to do.

00:50:31.309 --> 00:50:34.250
You can train the help desk guy with some simple training.

00:50:34.250 --> 00:50:37.780
How to throw away prefs and figure out the user problem.

00:50:37.780 --> 00:50:42.410
If it did follow the user to another
user, it's not the user.

00:50:42.409 --> 00:50:43.750
So what's the next thing you look at?

00:50:43.750 --> 00:50:45.159
It's the applications.

00:50:45.159 --> 00:50:48.769
Value meal B. so go and blast down an application.

00:50:48.769 --> 00:50:50.050
You've got everything in package format.

00:50:50.050 --> 00:50:53.310
You've got A or D. Blast it down.

00:50:53.309 --> 00:50:56.610
Did the problem get fixed, yes or no?

00:50:56.610 --> 00:51:01.250
No? Here's the part where it gets tricky for most people.

00:51:01.250 --> 00:51:06.849
Is this problem just on this system, or is it everybody?

00:51:06.849 --> 00:51:09.400
So spend a little time fixing the problem.

00:51:09.400 --> 00:51:14.720
Here's the prob, the rut for most places that remember
I mentioned earlier that they're willing to spend four

00:51:14.719 --> 00:51:20.569
or five hours finding that ghost in the shell on that
system, because the pain point for the perceived pain

00:51:20.570 --> 00:51:27.910
of a reimaging a box is so high that they'll keep digging
further and further into trouble shooting that box.

00:51:27.909 --> 00:51:32.699
You really shouldn't be spending more than about 15
to 20 minutes troubleshooting a problem on a box.

00:51:32.699 --> 00:51:38.759
If it's not something, if it's just limited to this
box and it's not going to be done, wipe the desktop clean.

00:51:38.760 --> 00:51:41.380
With Apple Remote Desktop, you can go in and you
can say you know what?

00:51:41.380 --> 00:51:45.970
Retarget the boot drive as this NetBoot drive, reboot now.

00:51:45.969 --> 00:51:50.809
What happens is the box goes out, sees the script,
sees it's already been touched, it doesn't repartition,

00:51:50.809 --> 00:51:56.110
it just reimages that first Macintosh
HD, puts it back to zero.

00:51:56.110 --> 00:51:57.890
You know you've got a fresh system.

00:51:57.889 --> 00:52:00.489
I lost all that configuration I did before.

00:52:00.489 --> 00:52:02.109
No you didn't.

00:52:02.110 --> 00:52:03.140
it's still got the triggers.

00:52:03.139 --> 00:52:04.190
It's going to log in.

00:52:04.190 --> 00:52:06.349
it's going to phone home the next time the box starts up.

00:52:06.349 --> 00:52:08.440
It's going to rebind itself back to the directory.

00:52:08.440 --> 00:52:11.559
It's going to see the user count's already
there, so it's going to use the existing one.

00:52:11.559 --> 00:52:13.639
It's going to have the first user login.

00:52:13.639 --> 00:52:18.489
It's going to go look at who the user is, what groups they
belong to, pile on all the policies and do the actions,

00:52:18.489 --> 00:52:20.459
install the software and you're back to good again.

00:52:20.460 --> 00:52:22.720
You don't have to remember what you did to that box.

00:52:22.719 --> 00:52:26.189
You don't have to remember how it's
different from this box and the other box.

00:52:26.190 --> 00:52:28.960
It's all built into a centralized managed system.

00:52:28.960 --> 00:52:35.130
So here's the real power, because now you have a real
simple process for your help desk guys to troubleshoot

00:52:35.130 --> 00:52:40.230
and fix a lot of things with some very
simple training and if it isn't fixed there,

00:52:40.230 --> 00:52:45.219
it must be seismic to the whole system, escalate the
ticket to the guys who know how to build the system.

00:52:45.219 --> 00:52:48.379
They can spend four or five hours
troubleshooting and fixing the problem.

00:52:48.380 --> 00:52:55.400
They fix it once, they build a policy, it's fixed
for everybody, maybe before most users realize it.

00:52:55.400 --> 00:52:55.920
All right.

00:52:55.920 --> 00:52:59.289
So now we need to decide what goes
into our base and our delta.

00:52:59.289 --> 00:53:02.759
Now the base is that first image
that gets pushed out with ASR.

00:53:02.760 --> 00:53:06.400
Why do you want to put stuff into that base image?

00:53:06.400 --> 00:53:07.680
Well, ASR is real fast.

00:53:07.679 --> 00:53:08.960
You're doing block mode copies.

00:53:08.960 --> 00:53:10.780
There's no CRC checking back and forth.

00:53:10.780 --> 00:53:12.670
It's the fastest way to get it out there.

00:53:12.670 --> 00:53:15.329
So, you know, I'm a child of the 70s.

00:53:15.329 --> 00:53:17.750
they used to have this commercial for Prego.

00:53:17.750 --> 00:53:19.420
You don't remember it?

00:53:19.420 --> 00:53:21.130
What's the tag line?

00:53:21.130 --> 00:53:21.880
It's in there.

00:53:21.880 --> 00:53:24.329
Yeah. Thank you.

00:53:24.329 --> 00:53:28.489
So my approach to the base OS is
treat it like a Prego bottle.

00:53:28.489 --> 00:53:29.829
Put it all in there.

00:53:29.829 --> 00:53:34.829
If you have the right, the legal right to install it, it
doesn't matter whether users are going to use it or not,

00:53:34.829 --> 00:53:38.509
if you have the legal right to
install it, put it in the base,

00:53:38.510 --> 00:53:43.210
get it delivered out there in the fastest mode possible.

00:53:43.210 --> 00:53:48.940
All the rest of the apps, you don't have a right
to install, go ahead and put it in your deltas.

00:53:48.940 --> 00:53:53.349
Let your policies push it out and do it policy based.

00:53:53.349 --> 00:53:57.380
Now I just got pointed out five minutes before
here, why wouldn't you put Firefox in your base?

00:53:57.380 --> 00:54:00.329
Right? Okay.

00:54:00.329 --> 00:54:01.779
So, I have no excuse.

00:54:01.780 --> 00:54:03.200
Even I make mistakes.

00:54:03.199 --> 00:54:03.629
( Laughs )

00:54:03.630 --> 00:54:05.390
A lot of them.

00:54:05.389 --> 00:54:06.779
All right.

00:54:06.780 --> 00:54:12.080
So this makes it, the big question here is on here,

00:54:12.079 --> 00:54:15.619
we have a couple of applications that
aren't in package format already.

00:54:15.619 --> 00:54:21.509
They're InDesign, Photoshop, you guys
know they use their own installer, right?

00:54:21.510 --> 00:54:38.700
( Laughter and applause )

00:54:38.699 --> 00:54:40.699
>> Gage: You don't need to go that far.

00:54:40.699 --> 00:54:41.909
We can do it ourselves.

00:54:41.909 --> 00:54:44.710
In fact there's a lot of things that you
just want to roll up as a package yourself

00:54:44.710 --> 00:54:46.559
but it just may not be commercial software.

00:54:46.559 --> 00:54:53.500
It may be packaging up the hack you did to the
login window to put your company policy in it.

00:54:53.500 --> 00:54:55.000
All right?

00:54:55.000 --> 00:54:56.400
So let's start with this.

00:54:56.400 --> 00:54:57.059
PackageMaker.

00:54:57.059 --> 00:54:59.469
Everyone knows PackageMaker, right?

00:54:59.469 --> 00:55:01.519
Okay. If you don't, you've been asleep this week.

00:55:01.519 --> 00:55:06.849
So PackageMaker in Tiger got a relative upgrade to the GUI.

00:55:06.849 --> 00:55:10.509
It's core market that it's focused at is developers.

00:55:10.510 --> 00:55:15.500
There are times to get the full power of it, you want to
drop in and edit an XML file to get something done,

00:55:15.500 --> 00:55:18.730
but the GUI's been greatly enhanced and that's very nice.

00:55:18.730 --> 00:55:22.400
I like PackageMaker, but there's one thing missing.

00:55:22.400 --> 00:55:28.180
If you've got an application like Adobe Photoshop, or
any other commercial application that's not already

00:55:28.179 --> 00:55:33.940
in package format, how do you go ahead
and know what to drop into PackageMaker?

00:55:33.940 --> 00:55:39.409
Well, there's a tool called loggen ,
it's part of the Radmine Suite.

00:55:39.409 --> 00:55:41.789
( Applause )

00:55:41.789 --> 00:55:43.349
Thank you, University of Michigan.

00:55:43.349 --> 00:55:45.650
Part of the whole Rad Mine Suite.

00:55:45.650 --> 00:55:50.250
And this goes back to my philosophy you don't
have to take the whole bath tub of water,

00:55:50.250 --> 00:55:52.760
you can take out the pieces that makes sense for you, right?

00:55:52.760 --> 00:55:58.870
So loggenis a tool, and it's a command line
tool, and what it does is it indexes your system.

00:55:58.869 --> 00:56:04.440
So you run the command line, you tell it to create an
index, and this example it's called the orig.dat,

00:56:04.440 --> 00:56:09.159
and after it's done, you go install
whatever app you want to.

00:56:09.159 --> 00:56:13.549
I'd caution you not to go around surfing the web and all
that kind of stuff, because you're going to create a lot

00:56:13.550 --> 00:56:15.140
of temp files that you later on have to ignore.

00:56:15.139 --> 00:56:17.170
But just install your app.

00:56:17.170 --> 00:56:23.900
Once you're done installing that app, you want to capture,
run loggen again, tell it to create a new index file,

00:56:23.900 --> 00:56:29.260
compare it against the old and the result will be a text
file that says here's all the stuff that's installed

00:56:29.260 --> 00:56:33.470
with a path to each one of them, and
here's all the stuff that was modified.

00:56:33.469 --> 00:56:35.169
So this is your shopping list.

00:56:35.170 --> 00:56:37.740
Go drag it all in and you're ready.

00:56:37.739 --> 00:56:41.919
Okay, you now can build packages.

00:56:41.920 --> 00:56:47.940
As an example, I think Macromedia DreamWeaver was
like 13,000 files, but I only actually had to drag

00:56:47.940 --> 00:56:55.220
about 30 different things in there, because
it'll count every file you have down a path.

00:56:55.219 --> 00:56:57.579
You just have to grab the root of the path.

00:56:57.579 --> 00:57:01.049
Okay. So what are the tools that
are there for building packages?

00:57:01.050 --> 00:57:06.970
Say you don't want to use PackageMaker,
there's a nice tool out there called IceBerg.

00:57:06.969 --> 00:57:09.019
Anyone heard of it?

00:57:09.019 --> 00:57:15.739
Yeah. So IceBerg doesn't have at it's disposal
all the features that PackageMaker has,

00:57:15.739 --> 00:57:18.769
but ultimately what it's doing is it's
really using PackageMaker under the hood

00:57:18.769 --> 00:57:21.579
with just a different skinned interface to it.

00:57:21.579 --> 00:57:28.190
So it gives you, for me, it gives me maybe 70 - 80 percent
of all the features I normally use on a regular basis.

00:57:28.190 --> 00:57:31.150
So this is my quick and dirty, fast get it done tool.

00:57:31.150 --> 00:57:33.079
And again, here's what it looks like.

00:57:33.079 --> 00:57:34.360
It's pretty easy to use.

00:57:34.360 --> 00:57:39.590
And it just exposes most of the options in there so
you can embed preflight scripts, preinstall scripts,

00:57:39.590 --> 00:57:43.350
pre-upgrade scripts, post flight post install, post upgrade,

00:57:43.349 --> 00:57:46.699
all those kinds of things differentiate
as you conversion your stuff, all that.

00:57:46.699 --> 00:57:49.219
So again, you need a shopping list.

00:57:49.219 --> 00:57:52.889
So go get loggen and run it and now
you have your shopping list to build it.

00:57:52.889 --> 00:57:59.139
And if you really want to go the easy route, and you'll
notice we're going harder to easier, more features to less.

00:57:59.139 --> 00:58:04.409
Okay. So if you want to go really easy, there's a
commercial application out there called Composer.

00:58:05.639 --> 00:58:07.699
And I like Composer.

00:58:07.699 --> 00:58:10.829
And the reason I like Composer is it's simple.

00:58:10.829 --> 00:58:14.569
I can go to a company and I can teach them
how to use this in a couple of minutes

00:58:14.570 --> 00:58:17.630
and they can go start working on
building all their packages.

00:58:17.630 --> 00:58:20.570
And it's an easy, low risk thing to do.

00:58:20.570 --> 00:58:28.480
The other cool part is they do some unique stuff like
you build a package, you now have an uninstaller package.

00:58:28.480 --> 00:58:32.340
If you take the whole suite from the
JAMF guys, the Casper Suite,

00:58:32.340 --> 00:58:34.430
it'll upload it to your AP servers for you.

00:58:34.429 --> 00:58:37.279
But you don't need to buy the whole
Casper Suite to take advantage of this.

00:58:37.280 --> 00:58:39.240
This is a 50 dollar app.

00:58:39.239 --> 00:58:44.289
If you buy Apple Remote Desktop, they will
sell you this, Composer, for 50 dollars.

00:58:44.289 --> 00:58:47.279
And so that's a real nice one - two punch.

00:58:47.280 --> 00:58:50.740
Package up all your applications and push them out with ARD.

00:58:50.739 --> 00:58:55.099
Say you don't want to take the whole managed deployment
route, you just want to take what makes sense for you

00:58:55.099 --> 00:59:00.289
guys, right? And the nice part is it does all the indexing for you.

00:59:00.289 --> 00:59:06.460
Okay. So we've got a way to build packages nice and easy.

00:59:06.460 --> 00:59:09.170
We've got a way to build our base.

00:59:09.170 --> 00:59:10.159
We know what goes in the base.

00:59:10.159 --> 00:59:11.769
We know what goes in Deltas.

00:59:11.769 --> 00:59:20.619
But it took us six weeks, three weeks
if you're good, it took you an investment

00:59:20.619 --> 00:59:23.099
of time to build your first master image, right?

00:59:23.099 --> 00:59:27.380
And get it all dialed in with all
the tweaks you wanted to do.

00:59:27.380 --> 00:59:32.890
The only really unique thing when you
want to update that is your OS, right?

00:59:32.889 --> 00:59:34.839
All the rest of your things pretty much stay the same.

00:59:34.840 --> 00:59:40.769
So if we're going from like 10.4.8 to 10.4.9, and you
want to update your image, do you want to go through all

00:59:40.769 --> 00:59:43.480
of those things and remember and
most of us just keep a detailed list

00:59:43.480 --> 00:59:45.550
of everything we did and we have to recreate all of that.

00:59:45.550 --> 00:59:48.380
So we know how to make packages,
why do we have to do that again?

00:59:48.380 --> 00:59:51.420
What we really should be doing is
once you've installed your base OS,

00:59:51.420 --> 00:59:55.690
anything that goes on over that, say
your VPN client, make it a package.

00:59:55.690 --> 01:00:01.490
Your hack to the login window to change
the welcome screen, make it a package.

01:00:01.489 --> 01:00:03.969
Office, make it a package.

01:00:03.969 --> 01:00:05.269
Virus, make it a package.

01:00:05.269 --> 01:00:07.619
Whatever you're doing on top of that base OS,

01:00:07.619 --> 01:00:13.389
package it up so the next time you want to build a
new base image, it's not going to take you three weeks.

01:00:13.389 --> 01:00:19.460
You install a fresh OS, you add all those packages
on top of it in an afternoon, you have a new system,

01:00:19.460 --> 01:00:24.730
go ahead and suck it up with ASR
and make a master image out of it.

01:00:25.769 --> 01:00:30.440
Okay? So that begs the question
when do you update your packages?

01:00:30.440 --> 01:00:31.809
Everyone has their own theory, right?

01:00:31.809 --> 01:00:35.219
Stand on your right foot, rub your tummy, pat your head.

01:00:35.219 --> 01:00:41.429
Okay. So basic philosophy here is
that get your clicker to work first.

01:00:41.429 --> 01:00:48.179
If we've got a system based on 10.4.8 and we come
out with some new hardware, say a new laptop,

01:00:48.179 --> 01:00:54.409
I'm not predicting hardware, we don't talk about unannounced
products, we come out with a new piece of hardware.

01:00:54.409 --> 01:01:01.509
That hardware is not necessarily going to have a
whole new OS rap, it's going to have 10.4.8 plus.

01:01:01.510 --> 01:01:02.560
What's the plus?

01:01:02.559 --> 01:01:06.539
Kernel extensions, hardware drivers, that kind of stuff.

01:01:06.539 --> 01:01:12.460
Apple, when we're focusing on getting a new product out, we
don't necessarily go down the right of regression testing

01:01:12.460 --> 01:01:19.389
that build against every other piece of hardware
that's supported by the last dot release.

01:01:19.389 --> 01:01:21.599
So we're not going to go through all
the engineering of making sure.

01:01:21.599 --> 01:01:24.639
We don't always do that to make sure
every single box out there runs.

01:01:24.639 --> 01:01:25.489
Now can you install it?

01:01:25.489 --> 01:01:26.689
Sure. Will it work?

01:01:26.690 --> 01:01:28.460
Most of the time.

01:01:28.460 --> 01:01:31.860
You guys ever seen those G5 fans
just run and run and run and run?

01:01:31.860 --> 01:01:33.090
Yeah. Okay.

01:01:33.090 --> 01:01:35.860
So what's a good, safe practice?

01:01:35.860 --> 01:01:39.019
And I've heard some people say wait for a retail box.

01:01:39.019 --> 01:01:41.820
How often do we come out with a retail box?

01:01:41.820 --> 01:01:50.519
Okay. So, correct me if I'm wrong, but what I have been told
is the right thing to do is wait for the next dot release.

01:01:50.519 --> 01:01:55.079
What we'll do is take all of the changes and kernel
extensions and everything else that have been done,

01:01:55.079 --> 01:02:00.269
roll it up into that dot release, and then
they do go through an aggression test back.

01:02:00.269 --> 01:02:04.269
Okay? So, okay.

01:02:04.269 --> 01:02:06.969
Everyone's got their own idea, right?

01:02:06.969 --> 01:02:10.219
Okay. So we're updating, we're building this new system.

01:02:10.219 --> 01:02:12.579
We're adding all of our packages on to it.

01:02:12.579 --> 01:02:15.469
But there's still this thing like
do I put this on out in the wild

01:02:15.469 --> 01:02:18.439
across a whole wide ecosystem of
machines without testing it, right?

01:02:18.440 --> 01:02:20.340
So you always want to pilot it.

01:02:20.340 --> 01:02:28.329
But let's talk about how you prevent putting a pilot out
and wearing your pilot users thin, is automated testing.

01:02:28.329 --> 01:02:31.739
And there's a really cool application
out there for OS X called Eggplant.

01:02:31.739 --> 01:02:33.739
Anyone heard of it?

01:02:33.739 --> 01:02:35.289
Okay. Cool.

01:02:35.289 --> 01:02:40.309
So if you do this build, you rev it,
you put all of your packages on it,

01:02:40.309 --> 01:02:44.219
you're building all of these packages
individually anyway, Eggplant's a really cool tool

01:02:44.219 --> 01:02:48.639
where you can build a test script for every single one
of your packages, your applications as you build it.

01:02:48.639 --> 01:02:53.670
So you know if this worked before you can run it
through a script and test to see if it still works.

01:02:53.670 --> 01:02:57.960
So you can build up a while suite of these scripts
for every application you make a package out of

01:02:57.960 --> 01:03:01.720
and then you can just say okay, I've made a new
build list, just run through the script to know

01:03:01.719 --> 01:03:04.139
that what worked before, does it still work?

01:03:04.139 --> 01:03:05.730
If anything's wrong, it'll tell you.

01:03:05.730 --> 01:03:07.340
So how does that actually work?

01:03:07.340 --> 01:03:09.490
Well at it's heart, it's a VNC server.

01:03:09.489 --> 01:03:15.599
So what Eggplant's doing is we already
have a VNC client built into our machine.

01:03:15.599 --> 01:03:18.110
Or do I have that backwards?

01:03:18.110 --> 01:03:18.550
Anyone know?

01:03:18.550 --> 01:03:19.330
I always get it backwards.

01:03:19.329 --> 01:03:21.579
Anyways, one of them is the server, one's the client.

01:03:21.579 --> 01:03:28.139
So VNC, you're not installing anything new onto the OS X
build you did, so you're not corrupting the system,

01:03:28.139 --> 01:03:34.589
all you're doing is you're turning on access to
the VNC clients so the Eggplant server can go in,

01:03:34.590 --> 01:03:37.070
tap in the box, and you can build a script.

01:03:37.070 --> 01:03:39.190
You can say listen, I'm doing this.

01:03:39.190 --> 01:03:44.760
It watches the visual VNC session and
does image recognition and says okay,

01:03:44.760 --> 01:03:47.630
when I did this, the expected result was this.

01:03:47.630 --> 01:03:52.720
And it actually will record all of this for you and you
can build in inputs to it, but it's a pretty easy way

01:03:52.719 --> 01:03:55.959
to build scripts and they have a
powerful scripting language behind it.

01:03:55.960 --> 01:04:02.550
Well what that allows you to do is go ahead and build
a test, automated test script for every application,

01:04:02.550 --> 01:04:05.240
and then at the end just fire them off and run against it.

01:04:05.239 --> 01:04:09.779
If it hits a problem where it veers off the track
that it doesn't know about, it does a screen capture,

01:04:09.780 --> 01:04:12.220
rolls it up into an email and sends it to you.

01:04:14.480 --> 01:04:16.349
Cool. So let's recap.

01:04:16.349 --> 01:04:19.230
We're running into the Q and A time right now.

01:04:19.230 --> 01:04:22.210
So just to repeat, this is nothing new.

01:04:22.210 --> 01:04:24.639
People have been doing this on Windows and Linux for years.

01:04:24.639 --> 01:04:30.309
We now have a great suite of tools that we can employ
in very creative ways to build out a system that's very,

01:04:30.309 --> 01:04:35.049
very cost effective to manage, maintain
and support machines in a wide environment.

01:04:35.050 --> 01:04:38.610
You don't have to do all or nothing.

01:04:38.610 --> 01:04:41.640
You can take the pieces and parts
that make sense for your organization

01:04:41.639 --> 01:04:46.659
that meet the goals that you need and use those pieces.

01:04:46.659 --> 01:04:50.179
I want to reiterate I've done before,
but learn about your users.

01:04:50.179 --> 01:04:52.909
Learn, learn, learn and employ that learning.

01:04:52.909 --> 01:04:57.480
And then lastly, protect your experience
as an administrator.

01:04:57.480 --> 01:04:58.610
Be proactive.

01:04:58.610 --> 01:05:01.320
Don't be reactive and run around fighting fires.

01:05:01.320 --> 01:05:05.000
Okay. So we're going to have, there's some
more resources if you want to know more any

01:05:05.000 --> 01:05:07.489
of these things I've mentioned
are, you can got to our slides.