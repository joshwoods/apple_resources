WEBVTT

00:00:20.000 --> 00:00:27.670
>> I'm the WebObjects Engineering
Manager I think some people know me.

00:00:28.989 --> 00:00:32.119
Today, we are going to talk about two things.

00:00:32.119 --> 00:00:36.820
First, we're going to see what's new in WebObjects 5.4.

00:00:36.820 --> 00:00:45.240
And then I'm going to give the mic to Mike, and he's
going to talk to us about WebObjects 2 and Project Wonder.

00:00:46.500 --> 00:00:49.679
So what's new in WebObjects 5.4?

00:00:49.679 --> 00:00:55.549
So first of all, I'm going to give you a bit of
overview of what the state of WebObjects is today.

00:00:56.689 --> 00:00:59.890
WebObjects started in 1996.

00:00:59.890 --> 00:01:07.810
So it's probably the oldest framework
on the market with WebObjects 1.0.

00:01:09.120 --> 00:01:12.380
We went to Java Native in 2001

00:01:12.379 --> 00:01:13.379
with WebObject 5.0.

00:01:13.379 --> 00:01:17.339
And today, we are to WebObjects 5.4.

00:01:18.879 --> 00:01:23.119
And what is the spot of WebObjects in the marketplace?

00:01:23.120 --> 00:01:29.750
First of all, we use WebObjects within Apple heavily, a lot.

00:01:29.750 --> 00:01:33.209
It powers Apple, it powers all
sorts of systems throughout Apple.

00:01:33.209 --> 00:01:37.869
We've got many, many, many engineer
developing with WebObjects inside.

00:01:37.870 --> 00:01:44.200
We love it, we use it, it's fair to say.

00:01:44.200 --> 00:01:49.060
And the other thing is that we've changed
the WebObjects model, development model,

00:01:49.060 --> 00:01:56.240
and we now integrate within the products
patches that come from the inside Apple users.

00:01:56.239 --> 00:02:02.859
And so you are going to see a lot of movement
on the framework just coming from everyday use

00:02:02.859 --> 00:02:10.990
of people developing with WebObjects within Apple, okay?

00:02:15.729 --> 00:02:17.709
WebObjects outside.

00:02:17.710 --> 00:02:24.129
You can see, if you do a search on Google and
you look at the URLs with WebObjects in it,

00:02:24.129 --> 00:02:28.509
there is 4 million pages, over 4 million pages in Google.

00:02:28.509 --> 00:02:37.090
Those are public pages that you have
created with WebObjects on the web.

00:02:37.090 --> 00:02:43.370
That doesn't count any of the private
page, just public pages.

00:02:43.370 --> 00:02:46.840
And that number is growing I think, by what I can remember,

00:02:46.840 --> 00:02:51.050
because I don't have the long
history, to about half a million a year.

00:02:52.469 --> 00:02:55.550
So WebObjects is growing well.

00:02:55.550 --> 00:03:00.830
And thank you to you all.

00:03:05.180 --> 00:03:10.590
As you know, we announced last year
that we're focusing on the run time.

00:03:10.590 --> 00:03:14.770
In WebObjects 5.4, a lot of change under the hood.

00:03:14.770 --> 00:03:21.250
We have kept all the public API as they were, and we tried
very, very hard to keep the compatibility.

00:03:21.250 --> 00:03:26.990
However, with change, a lot of internals.

00:03:26.990 --> 00:03:41.240
So for all of you that have subclass internal APIs, and I
am one of the culprits, please, please look at your code

00:03:41.240 --> 00:03:45.659
because we don't make an omelette without breaking eggs.

00:03:45.659 --> 00:03:49.299
The internal has changed.

00:03:49.300 --> 00:04:03.360
So look at your code, look at any override of the private
APIs because I cannot guarantee that it didn't break, okay?

00:04:06.050 --> 00:04:08.210
What's in WebObjects 5.4?

00:04:08.210 --> 00:04:12.830
So I'm going to cover four topics
this morning, this afternoon.

00:04:12.830 --> 00:04:15.310
First of all, support for AJAX.

00:04:15.310 --> 00:04:19.129
Then the new look for the i2 web.

00:04:19.129 --> 00:04:23.750
We have done quite a number of
modernization preparation for the frameworks,

00:04:23.750 --> 00:04:29.019
and what's going on with the build
and deployment environment.

00:04:29.019 --> 00:04:31.359
Support for AJAX.

00:04:31.360 --> 00:04:35.889
We have got a new AJAX request handler.

00:04:35.889 --> 00:04:43.069
And the reason for that is that when you
do pages, AJAX typically do page fragments.

00:04:43.069 --> 00:04:50.709
So you don't want to put the page fragments in the
page cache, so we actually put in the framework support

00:04:50.709 --> 00:04:55.889
for page fragments so that you can
actually handle the request properly.

00:04:55.889 --> 00:04:59.360
So this is normally handled completely transparently.

00:04:59.360 --> 00:05:03.120
You don't have to worry about, we just do it.

00:05:03.120 --> 00:05:10.379
And Mike is going to talk a little bit more
on how he's using it in the Project Wonder.

00:05:10.379 --> 00:05:16.029
XHTML-compliant code generation.

00:05:16.029 --> 00:05:19.849
( Applause )

00:05:19.850 --> 00:05:22.590
Thank you.

00:05:22.589 --> 00:05:33.629
All tags are now lower case, quoted and closed
properly, which also means that your code needs to be.

00:05:33.629 --> 00:05:37.199
We correctly handle class and ID, which means

00:05:37.199 --> 00:05:44.089
that you can now create reusable component
that handles class and ID properly.

00:05:44.089 --> 00:05:50.689
We carry them around, we do the right thing
with them, we don't put them with the IMT.

00:05:50.689 --> 00:05:55.329
Also, the weird behaviors that choose to happen.

00:05:55.329 --> 00:06:01.419
The messages you can use it in reusable component.

00:06:01.420 --> 00:06:08.530
We also have a new way of creating
ID because typically all of you know

00:06:08.529 --> 00:06:13.419
that WebObjects element ID has a series of numbers and dots.

00:06:13.420 --> 00:06:21.470
Well, the element ID on the XML page
cannot start with a number and cannot contain dots.

00:06:21.470 --> 00:06:26.220
So we have to do something.

00:06:26.220 --> 00:06:31.490
So you can now invoke a metatag
to return you a proper element ID.

00:06:31.490 --> 00:06:34.220
And (inaudible) is configurable.

00:06:34.220 --> 00:06:36.840
If you don't like to have a WO
in front, you can change it.

00:06:36.839 --> 00:06:39.589
If you don't like this code, you can change it.

00:06:42.509 --> 00:06:43.969
This is a big thing.

00:06:43.970 --> 00:06:48.490
We changed the single file component parser.

00:06:48.490 --> 00:06:57.259
Okay, typically, all components are contained in a bundle
with an HTML in the word and maybe sometimes other files.

00:06:57.259 --> 00:06:59.810
We are still supporting that format.

00:06:59.810 --> 00:07:01.540
We are not duplicating it.

00:07:01.540 --> 00:07:08.330
This is supported, and we intend to carry
on supporting that format for a long time.

00:07:08.329 --> 00:07:17.109
However, we have created a new single confined format
where you can include your binding within the HTML page.

00:07:18.370 --> 00:07:28.840
So essentially, what you can write is a single tag where
you are to put your binding directly in the HTML tag.

00:07:28.839 --> 00:07:32.069
We have got a syntax with the square bracket.

00:07:32.069 --> 00:07:36.209
If you don't like it, you can revert it to the dollar sign.

00:07:36.209 --> 00:07:42.799
It's a question of style.

00:07:42.800 --> 00:07:48.860
The other big thing with the parser
is that you can actually extend it.

00:07:48.860 --> 00:07:52.870
We introduced into binding the notion of protocol,

00:07:52.870 --> 00:07:59.329
which means that you can actually
write protocol column in the binding.

00:07:59.329 --> 00:08:03.919
What that means is you can actually
create your own protocol handler

00:08:03.920 --> 00:08:10.830
within WebObjects to create to go after different syntax.

00:08:10.829 --> 00:08:19.229
Typically, ognl have heard about Groovy, Janino,
which kind of be a bit more obscure.

00:08:19.230 --> 00:08:22.400
But you can extend it to whatever you want.

00:08:22.399 --> 00:08:24.979
And you can do all sort of things.

00:08:24.980 --> 00:08:32.600
You don't have to rewrite the parser anymore.

00:08:32.600 --> 00:08:36.540
Consistent support for secure URLs.

00:08:36.539 --> 00:08:38.459
That's something that should have been done a long time ago.

00:08:38.460 --> 00:08:47.860
You can actually now interrogate the request to know
whether it was a secure request or a non secure request.

00:08:47.860 --> 00:08:51.960
The context is going to have the same thing, a secure mode.

00:08:51.960 --> 00:08:53.600
And typically just works.

00:08:53.600 --> 00:08:59.490
So if you have got a secure request, every URL you are
going to turn are going to be secure and just works.

00:08:59.490 --> 00:09:03.090
The i2 web.

00:09:03.090 --> 00:09:06.259
The i2 web new look.

00:09:06.259 --> 00:09:11.759
Okay, you used to have that kind
of page that we all know about.

00:09:13.070 --> 00:09:16.550
We changed it.

00:09:16.549 --> 00:09:24.219
This is an xmlHttpRequest query so that as I will actually
load page fragments, it's fully AJAX planned.

00:09:24.220 --> 00:09:27.480
And we just modernize everything.

00:09:27.480 --> 00:09:34.690
Same thing for the list where you
actually have got a new look for the list

00:09:34.690 --> 00:09:38.680
where you can have the side and the indication of the focus.

00:09:38.679 --> 00:09:41.509
We're going to see that with file in a minute.

00:09:41.509 --> 00:09:46.259
And we have got a floating palette on the long lists. Daryl...

00:09:46.259 --> 00:09:47.789
( Applause )

00:09:47.789 --> 00:10:04.620
>> So as Pierre said, you know, our direct web templates
were looking pretty long on the tooth circa in 1996.

00:10:04.620 --> 00:10:13.480
So we thought we'd do a pass at them and sort of
AJAXify them and give them a fresher experience.

00:10:13.480 --> 00:10:18.170
So if we could flip to the demo
machine, let's see, here we go.

00:10:18.169 --> 00:10:23.959
So what I'll show you first is the new WebObjects's look.

00:10:23.960 --> 00:10:29.420
And we kind of added a black and white polished look to it

00:10:29.419 --> 00:10:35.339
and prominently put WebObjects's
badges there and things like that.

00:10:35.340 --> 00:10:37.050
Let's do a quick search.

00:10:37.049 --> 00:10:41.959
And let me just look at the 40 items here.

00:10:41.960 --> 00:10:51.250
As you can see, you know, it's kind
of resizing and doing fun things.

00:10:51.250 --> 00:10:57.110
It's really easy to-- let me just show you
a few more pages here just for a quick tour.

00:10:57.110 --> 00:10:59.269
Here's our edit page.

00:10:59.269 --> 00:11:06.669
And, you know, it works just like bold direct web templates.

00:11:06.669 --> 00:11:08.539
Let me show you our new basic look.

00:11:08.539 --> 00:11:14.699
And that one has a little bit more fun AJAXy toolbar in it.

00:11:18.039 --> 00:11:22.939
And as you can see, there's the focus
indication that Pierre was talking about.

00:11:22.940 --> 00:11:25.460
So the mouse events.

00:11:25.460 --> 00:11:32.230
And let me go fetch a bunch of rows here.

00:11:32.230 --> 00:11:40.149
And as you can see, we kind of use CSS
a little bit and layer things.

00:11:40.149 --> 00:11:45.269
Another thing you might be interested in is that
these are all AJAX requests that are going on in here

00:11:45.269 --> 00:11:51.360
when I click the arrow buttons here to page in more rows.

00:11:51.360 --> 00:11:53.460
So there's just a quick tour.

00:11:53.460 --> 00:11:55.540
Just wanted to show you what the looks were.

00:11:55.539 --> 00:11:57.809
We've kept the neutral look pretty much the same.

00:11:57.809 --> 00:12:02.669
So if you like customizing templates that
way, that's still available for you.

00:12:02.669 --> 00:12:05.419
So anyway, so those are our new looks.

00:12:05.419 --> 00:12:07.419
Back to Pierre.

00:12:07.419 --> 00:12:12.000
( Applause )

00:12:16.690 --> 00:12:23.710
>> So after the candy in the store there, some
of the things that we've done to the run time.

00:12:23.710 --> 00:12:32.580
The first thing we did is modernize the NSArray and the mutable
array in a set so that you can now support a Generics.

00:12:32.580 --> 00:12:35.050
So we brought everything back.

00:12:37.639 --> 00:12:42.620
We actually support 1.5, and not only
we support it, but we require it now.

00:12:42.620 --> 00:12:46.190
So you can actually write interation properly.

00:12:46.190 --> 00:12:49.240
So instead of doing the old fashioned
interation with an index,

00:12:49.240 --> 00:12:52.600
you can actually do it a new way
with just an interatim.

00:12:52.600 --> 00:12:59.899
It's actually very nice, and you
don't have to type cast anything.

00:12:59.899 --> 00:13:05.139
We modernize the plist serialization so now
you can read and write XML plist.

00:13:05.139 --> 00:13:13.730
And we fully support the Apple DTD, including
the time value Integer, Float finally.

00:13:13.730 --> 00:13:18.920
Web services, same thing.

00:13:18.919 --> 00:13:25.479
We brought everything to the modern day
and time, so we access one full compliant.

00:13:25.480 --> 00:13:29.480
And I believe they work now.

00:13:34.870 --> 00:13:38.049
We improved the schema performance.

00:13:38.049 --> 00:13:44.479
Essentially what we did, we introduced
into schema the management of indexes,

00:13:44.480 --> 00:13:47.670
so you can actually create your
table index directly in the schema,

00:13:47.669 --> 00:13:51.059
which basically enabled you to keep everything in one place.

00:13:51.059 --> 00:13:59.169
You don't have to have those SQL script lying
around to recreate the indexes each time.

00:14:02.039 --> 00:14:05.849
And I'm going to show it to you in a minute.

00:14:05.850 --> 00:14:13.070
Mike actually provided all the support in WOLips,
so you can actually create them in WOLips.

00:14:13.070 --> 00:14:18.360
We improved the schema generation at run time, so
we actually fixed all the synchronization features

00:14:18.360 --> 00:14:23.129
so that it actually works, create
an index and do the right thing.

00:14:24.509 --> 00:14:32.649
We also enabled the support of enum, so if
you create custom types in your model, custom attributes,

00:14:32.649 --> 00:14:40.059
you can actually return a Java enum, which is
also some feature that I know a lot of you have requested.

00:14:40.059 --> 00:14:45.029
And so you can actually return the
Java enum as a custom type.

00:14:45.029 --> 00:14:46.839
And all of that is supported in WOLips.

00:14:46.840 --> 00:14:51.740
So if you look at your WOLips, probably if you
download the recent version, I don't remember exactly

00:14:51.740 --> 00:14:57.299
when Mike put it in, but if you download the recent
version, you'll see that now you have got an option

00:14:57.299 --> 00:15:03.879
to create an index and actually it just works.

00:15:03.879 --> 00:15:05.480
Thank you, Mike.

00:15:05.480 --> 00:15:15.529
( Applause )

00:15:15.529 --> 00:15:16.709
Java EOGenerator.

00:15:16.710 --> 00:15:23.639
The old EOGenerator doesn't work in Leopard,
so we had to provide it as a replacement.

00:15:23.639 --> 00:15:28.740
So we took the time to actually write
a new one that actually is more modern

00:15:28.740 --> 00:15:38.919
and choose a WebObjects template parser so you can
actually write your template class using your traditional syntax

00:15:38.919 --> 00:15:42.620
of the WebObjects syntax.

00:15:42.620 --> 00:15:48.299
Which also means that it's slightly and
also means that it's all slightly more convenient

00:15:48.299 --> 00:15:54.539
because you can use all the new attribute methods
so you can actually access all the new stuff,

00:15:54.539 --> 00:16:05.980
new Java stuff instead of being
content to the old Objective-C stuff.

00:16:05.980 --> 00:16:12.009
Build deployment, build deployment, build system.

00:16:12.009 --> 00:16:14.379
Let's be very, very clear.

00:16:14.379 --> 00:16:23.189
The old Xcode system, if you have got existing
projects in Xcode, you can still build them.

00:16:23.190 --> 00:16:26.230
The jam build system is still there.

00:16:26.230 --> 00:16:27.870
It's actually not there in the seeds.

00:16:27.870 --> 00:16:29.190
That's a bug.

00:16:29.190 --> 00:16:32.600
It's going to be delivered with Leopard.

00:16:32.600 --> 00:16:38.920
However, you cannot create any
new project using that technology.

00:16:38.919 --> 00:16:46.269
You can create an Ant project in Xcode in you'd
like, but we don't provide any support for it.

00:16:46.269 --> 00:16:48.240
We just provide Xcode support for Ant.

00:16:48.240 --> 00:16:52.289
So there is no template to create a WebObjects in Ant.

00:16:52.289 --> 00:16:56.809
Recommended build system is still
WOLips and Eclipse.

00:16:59.159 --> 00:17:07.909
However, for those of who don't want to
use Eclipse, we are sponsoring tools,

00:17:07.910 --> 00:17:13.080
and we're actually sponsoring an open source
repackaging of the entity  modeler

00:17:13.079 --> 00:17:17.669
so that you can use the entity modeler outside of Eclipse.

00:17:17.670 --> 00:17:26.710
This will be distributed as an open
source part of the WOLips project.

00:17:29.940 --> 00:17:35.009
The second big push that we want to do in
there is a self-contained bundle.

00:17:35.009 --> 00:17:39.420
This is actually a feature of 5.2.

00:17:39.420 --> 00:17:45.269
Poorly documented, poorly supported,
and really, really useful.

00:17:45.269 --> 00:17:53.269
What we want to do is move out of the traditional
framework towards what we call the self contained

00:17:53.269 --> 00:17:54.250
framework jars.

00:17:54.250 --> 00:18:00.390
All that's been delivered since 5.2 in your
/Llibrary WebObjects/lib folder.

00:18:00.390 --> 00:18:08.540
And you've been able to use it forever.

00:18:08.539 --> 00:18:10.500
However, very few people have used them.

00:18:10.500 --> 00:18:16.009
So that's a format we'd like to carry on moving forward.

00:18:16.009 --> 00:18:16.980
Same thing.

00:18:16.980 --> 00:18:19.430
You can actually build self contained applications.

00:18:19.430 --> 00:18:22.100
You have been able to do that since 5.2.

00:18:22.099 --> 00:18:27.909
If you push all your jars into
.woa/Contents/Extensions, all the jars

00:18:27.910 --> 00:18:34.519
in the directory are going to be
loaded before anything else.

00:18:34.519 --> 00:18:40.990
What that means is that if you push in
your application to 5.3 or the 5.4 jars,

00:18:40.990 --> 00:18:48.359
you are going to run with the jars you have tested
with, not the jar that I store on the machine.

00:18:49.539 --> 00:18:56.609
That will provide a much more reliable deployment
environment than trying to mix and match and also enable you

00:18:56.609 --> 00:19:02.689
to upgrade the application independently
of the upgrade of the OS.

00:19:06.130 --> 00:19:07.830
Deployment.

00:19:07.829 --> 00:19:14.970
Last year, we talked about a new deployment
environment with all sorts of things.

00:19:14.970 --> 00:19:17.079
That was premature.

00:19:17.079 --> 00:19:23.250
When we actually put everything together,
we discovered that it wouldn't work.

00:19:23.250 --> 00:19:25.250
Even provide the same services.

00:19:25.250 --> 00:19:32.019
So for this release, for Leopard, we are
keeping the traditional deployment environment

00:19:32.019 --> 00:19:33.559
with JavaMonitor and wotaskd.

00:19:33.559 --> 00:19:39.169
The example source, so if you want to change
or if you were to do a modification, you can.

00:19:39.170 --> 00:19:44.670
What we have done is that we have
folded the mod WebObjects to Apache 2.2.

00:19:44.670 --> 00:19:48.690
It supports 32 and 64 bits without any problem.

00:19:48.690 --> 00:19:53.830
And so you keep your traditional deployment environment.

00:19:53.829 --> 00:19:56.939
Moving forward, we're going to
move to a more modern architecture,

00:19:56.940 --> 00:20:02.490
probably something in the same line than Monitor and wotaskd.

00:20:02.490 --> 00:20:12.069
And we are going to move more toward
JMX integration for the monitoring.

00:20:12.069 --> 00:20:20.189
We are trying to help the community as much as
possible, pushing the run time, helping all the tools,

00:20:20.190 --> 00:20:29.870
the open source tools, working very closely with the
Wonder team and WOLips team to try to get things in sync

00:20:29.869 --> 00:20:33.359
and delivered to you at the same time you need them.

00:20:35.859 --> 00:20:44.439
And the last thing I want to say is please, please
install the 5.4 beta, test it, check it, send me bugs.

00:20:44.440 --> 00:20:54.890
If you have got all bugs, try to see if they are
still there in 5.4 and put a note in the bug report.

00:20:54.890 --> 00:21:02.170
I can guarantee that the bug report, again, the 5.4 beta
is going to have priority against any other version.

00:21:05.569 --> 00:21:12.669
So really, if you want something to be fixed,
add a note in your bug report, have tested it,

00:21:12.670 --> 00:21:17.590
it's still there in 5.4, I really need that to be fixed.

00:21:17.589 --> 00:21:22.500
And we have got a very short period of
opportunity to fix those, if you want them fixed.

00:21:22.500 --> 00:21:28.720
So please, find bugs, go on.

00:21:28.720 --> 00:21:33.019
And now, I invite Mike to present.

00:21:33.019 --> 00:21:33.529
( Applause )

00:21:33.529 --> 00:21:42.940
>> So last year, I had the cell phone camera.

00:21:42.940 --> 00:21:46.309
And Pascal gave me an actual camera
to do the photo with this year.

00:21:46.309 --> 00:21:48.889
So everybody smile.

00:21:48.890 --> 00:21:51.100
We'll see how this works out.

00:21:51.099 --> 00:21:55.269
I've got to get the flash, the 200 feet long.

00:21:55.269 --> 00:22:01.109
All right, so AJAX framework.

00:22:01.109 --> 00:22:07.169
It would help to have the switcher for the slides.

00:22:09.470 --> 00:22:11.670
Can you switch back to slides, please?

00:22:12.769 --> 00:22:13.940
Thank you.

00:22:13.940 --> 00:22:15.170
AJAX framework.

00:22:15.170 --> 00:22:18.880
I guess I should say I'm Mike Schrag
from mDimension Technology.

00:22:19.940 --> 00:22:21.870
What is AJAX?

00:22:21.869 --> 00:22:26.029
AJAX stands for Asynchronous JavaScript And XML.

00:22:27.269 --> 00:22:32.990
If you've seen anything like Google maps or
Flickr or any of the modern web applications,

00:22:32.990 --> 00:22:38.960
you've noticed that they do a lot of behaviors
that are much more like desktop applications.

00:22:38.960 --> 00:22:43.250
Namely, you have things like you click
on a link and it refreshes just a section

00:22:43.250 --> 00:22:46.029
of the page versus doing a full page refresh.

00:22:46.029 --> 00:22:47.789
What this means is several things.

00:22:47.789 --> 00:22:53.450
One is you can do smaller refreshes, which
means, you know, less bandwidth usage.

00:22:53.450 --> 00:22:59.319
It means that your applications perform much more
like a desktop app than a traditional web application.

00:22:59.319 --> 00:23:05.450
And one of the other reasons that you might want to do
this is that, you know, with any new technology like AJAX,

00:23:05.450 --> 00:23:08.319
you have new expectations from your customers.

00:23:08.319 --> 00:23:13.049
Namely, they're also using Google
maps and Flickr and 37 singles apps.

00:23:13.049 --> 00:23:17.970
And they expect your WebObjects
applications to be just as cool.

00:23:17.970 --> 00:23:22.059
So what does this mean for WebObjects?

00:23:22.059 --> 00:23:23.710
Well, components, right?

00:23:23.710 --> 00:23:27.610
I mean, components are what make WebObjects really cool.

00:23:27.609 --> 00:23:32.019
You have the stateful components, you have components
that can-- you could have multiple ones on a page.

00:23:32.019 --> 00:23:39.009
You have automatic binding synchronization, an
itty bitty reference to direct actions with AJAX.

00:23:39.009 --> 00:23:43.059
I'm going to focus on the component aspect.

00:23:43.059 --> 00:23:48.669
If you're doing direct actions with AJAX, you'll find that
it's pretty much just like any other of the frameworks.

00:23:48.670 --> 00:23:51.070
You're doing, you know, your own state management.

00:23:51.069 --> 00:23:52.909
You're passing state back and forth.

00:23:52.910 --> 00:23:59.970
What, to me, is particularly interesting and exciting
is taking advantage of stateful components and AJAX.

00:23:59.970 --> 00:24:05.559
So I'm going to do a little demo here.

00:24:08.349 --> 00:24:11.629
So this first demo is just a quickie.

00:24:11.630 --> 00:24:18.000
And that is to show some of the examples
that are in Project Wonder's AJAX framework.

00:24:18.000 --> 00:24:24.299
The first one that I'll do is the usual hello world example.

00:24:24.299 --> 00:24:29.039
And of course these don't get touched by Apple designers.

00:24:29.039 --> 00:24:33.139
So, you know, that's what you get.

00:24:33.140 --> 00:24:38.960
So in this first section, we have an
example that's showing how this would work

00:24:38.960 --> 00:24:41.190
in a traditional WebObjects application.

00:24:41.190 --> 00:24:45.150
Behind this is essentially it's a WO
hyperlink with an action that's bound to a method.

00:24:45.150 --> 00:24:50.820
Every time I click this WO hyperlink, you can see,
you know, the progress part is a full page reload.

00:24:50.819 --> 00:24:55.409
If it was wide enough, you'd be able
to see all the element IDs changing.

00:24:55.410 --> 00:25:01.050
You know, this is your traditional WO app.

00:25:01.049 --> 00:25:03.109
You can see the time stamp here at the top changing.

00:25:03.109 --> 00:25:08.909
At the bottom here is what we call an AJAX update
link, which I'll tell you about in a little bit.

00:25:08.910 --> 00:25:13.140
And so instead, first of all, you can
see how much faster I can click this.

00:25:13.140 --> 00:25:14.860
I can click it about two times faster.

00:25:14.859 --> 00:25:18.990
And all it's doing is sending just
that one little section back and forth.

00:25:18.990 --> 00:25:25.650
What's particularly cool is on this bottom one, it's
exactly like the top one in that it's a component action.

00:25:25.650 --> 00:25:27.550
It's a stateful component action.

00:25:27.549 --> 00:25:35.299
That string there is a stateful binding on
a WO string to a variable in my component.

00:25:35.299 --> 00:25:41.960
It works exactly like the rest of WO, except now we're
having, you know, partial updates of a page with AJAX.

00:25:41.960 --> 00:25:47.529
So one of the other ones that's kind of
neat is the drag and drop list example.

00:25:47.529 --> 00:25:51.470
This is something that people have
started to do more with drag and drop.

00:25:51.470 --> 00:25:54.680
So this doesn't look necessarily all that exciting,

00:25:54.680 --> 00:25:59.450
but what's cool is this does magical
things, just like you expect WO to do.

00:25:59.450 --> 00:26:05.720
Namely, every one of the things I'm
dragging are actually bound to EOs,

00:26:05.720 --> 00:26:10.069
or can be bound to a full on job objects, whatever it is.

00:26:10.069 --> 00:26:14.210
So, you know, the example I always give is
you could literally be dragging a T-shirt EO

00:26:14.210 --> 00:26:16.490
and drop it into your shopping cart.

00:26:16.490 --> 00:26:22.299
When the action actually fires, it's just like,
you know, your action method with a WO hyperlink

00:26:22.299 --> 00:26:25.079
in that the right object is bound up at the right time.

00:26:25.079 --> 00:26:31.849
So, you know, when you're, you know, its T-shirt
bought method is called, you just have a reference

00:26:31.849 --> 00:26:39.649
to the T-shirt object, which is what, in my mind, makes
WO magical and amazing to be able to develop with.

00:26:39.650 --> 00:26:43.509
And lastly, for the quick demos, is AJAXInPlace.

00:26:43.509 --> 00:26:47.210
This is one of the ones that actually doesn't
get a lot of play on the mailing list,

00:26:47.210 --> 00:26:49.440
but to me is one of the most powerful in the framework.

00:26:49.440 --> 00:26:56.700
And that is it lets you essentially define a view template
and an edit template with a full on WO component.

00:26:56.700 --> 00:27:04.200
So this view template here, when I
click on it, it goes into edit mode.

00:27:04.200 --> 00:27:06.410
I can have custom view and edit controls.

00:27:06.410 --> 00:27:13.450
And as an example of a more complex scenario,
here's a slightly more complicated WO component,

00:27:13.450 --> 00:27:18.140
that when I click on this, it then switches
to a completely different edit component.

00:27:18.140 --> 00:27:20.320
You can actually do some amazing things with this.

00:27:20.319 --> 00:27:27.089
It's a very simple way to be able to, you know, provide,
you know, a very clean look when you're not in an edit mode

00:27:27.089 --> 00:27:29.849
and switch to whatever complexity level you need.

00:27:29.849 --> 00:27:32.969
Again, using components just like you're used to.

00:27:32.970 --> 00:27:36.390
So that's the quick examples.

00:27:36.390 --> 00:27:43.460
Incidentally, everything that you see up here is actually
part of the AJAX example that is inside of Project Wonder.

00:27:43.460 --> 00:27:46.670
So you can grab it and kind of
go through and see everything.

00:27:46.670 --> 00:27:48.090
Slides, please.

00:27:51.019 --> 00:27:58.289
Or not. All right, so, okay, what do you have to do?

00:27:58.289 --> 00:28:02.869
With any framework, any developer is going
to ask, you know, what am I going to have

00:28:02.869 --> 00:28:06.139
to change in my code to make use of this?

00:28:06.140 --> 00:28:12.840
And the hello world example, this is
something roughly like what you saw.

00:28:12.839 --> 00:28:15.409
You have a time stamp above this div.

00:28:15.410 --> 00:28:16.460
You have a div that has an ID.

00:28:16.460 --> 00:28:22.120
You have a WO string bound to a hello
world, you know, it could be a method.

00:28:22.119 --> 00:28:29.449
I have a WO hyperlink with an action, with
an update link, and a time stamp up above.

00:28:29.450 --> 00:28:33.830
So what do we change for hello AJAX world?

00:28:33.829 --> 00:28:35.779
That's pretty much it.

00:28:35.779 --> 00:28:37.450
The parts in yellow are actually what changed.

00:28:37.450 --> 00:28:41.930
And so essentially, what was a
divs now is an AJAX update container.

00:28:41.930 --> 00:28:44.970
Incidentally, you can see I'm using
the inline binding syntax here.

00:28:44.970 --> 00:28:50.049
This is actually Project Wonders, but you can
configure the 5.4.1 to work in the same way.

00:28:50.049 --> 00:28:54.529
My WO hyperlink turned into an AJAX update link.

00:28:54.529 --> 00:28:59.039
And there's one extra sort of magical
thing, and that is UpdateContainerID.

00:28:59.039 --> 00:29:05.019
Unlike a regular WO hyperlink, you know, a WO
hyperlink is just going to refresh the entire page.

00:29:05.019 --> 00:29:07.599
For AJAX, though, you need to be able to specify, you know,

00:29:07.599 --> 00:29:11.449
what part of the page do I want
to refresh as a result of this?

00:29:11.450 --> 00:29:20.480
And so here I'm specifying the HTML ID of the div
that I want to refresh or the LI or whatever it is.

00:29:20.480 --> 00:29:23.690
And so in this case, the update container ID has ID content.

00:29:23.690 --> 00:29:29.380
The link says refresh container with the ID content.

00:29:29.380 --> 00:29:30.170
And that's it.

00:29:30.170 --> 00:29:32.310
And, you know, this is a slightly contrived example.

00:29:32.309 --> 00:29:34.950
But I'm going to walk you through
something you can actually see.

00:29:34.950 --> 00:29:37.720
Doing these conversions really is pretty much this simple.

00:29:37.720 --> 00:29:42.860
There's very few fundamental components that
you need to be aware of that you can then turn

00:29:42.859 --> 00:29:46.199
around and do some very rich things with.

00:29:46.200 --> 00:29:50.809
So this is the one technical slide that I have.

00:29:50.809 --> 00:29:54.809
I started out with much more and we chopped them out.

00:29:54.809 --> 00:30:00.220
The traditional request-response loop, takeValuesFromRequest,
invokeAction, and appendToResponse.

00:30:00.220 --> 00:30:08.519
Those are fundamentally the same, with the one catch
that in an AJAX update, say you have a link at the bottom

00:30:08.519 --> 00:30:14.129
of your page, you have an area that you want to refresh
at the top of your page, when you click the link,

00:30:14.130 --> 00:30:19.740
by the time the action, WO, gets down to
evaluate the action of the link being pressed,

00:30:19.740 --> 00:30:21.900
it's already passed by the part at the top.

00:30:21.900 --> 00:30:27.820
It's now sort of lost its opportunity to append
a response to the area that you want to refresh.

00:30:27.819 --> 00:30:34.799
So what the AJAX framework does is actually sort of sneaks
in there, it runs your invoke action phase the normal way.

00:30:34.799 --> 00:30:41.000
It then turns off some things in the framework so that
it doesn't trip you up and double fire your actions.

00:30:41.000 --> 00:30:45.799
It then does a second invoke action pass,
this time actually triggering the area

00:30:45.799 --> 00:30:48.769
that you told it to refresh to dump its outout out.

00:30:48.769 --> 00:30:50.400
So the most part, you don't need to care about this.

00:30:50.400 --> 00:30:52.140
It's pretty much totally seamless.

00:30:52.140 --> 00:30:53.720
It just happens in the background.

00:30:53.720 --> 00:30:57.559
But it's, you know, sort of a notable element.

00:30:57.559 --> 00:31:01.329
So what are the three primary components
you need to care about?

00:31:01.329 --> 00:31:02.679
The ones right here.

00:31:02.680 --> 00:31:06.490
AJAXUpdateContainer, AJAXUpdateLink, AJAXSubmitButton.

00:31:06.490 --> 00:31:10.309
We have a huge number more that do cool things
like Google maps, you know, what have you.

00:31:10.309 --> 00:31:15.079
But the three that if you were just starting out
and you want to see how do I use AJAX framework,

00:31:15.079 --> 00:31:17.279
these are the ones you need to care about.

00:31:17.279 --> 00:31:19.139
So AJAXUpdateContainer.

00:31:19.140 --> 00:31:21.530
This is sort of the fundamental component.

00:31:21.529 --> 00:31:27.230
AJAXUpdateContainer lets you essentially specify
a section of your page that is AJAX updatable.

00:31:27.230 --> 00:31:31.970
So in the previous example, the hello world example,
I turned a div into an AJAXUpdateContainer.

00:31:31.970 --> 00:31:35.569
What that allows me to do is later
I have an AJAXUpdateLink,

00:31:35.569 --> 00:31:40.659
an AJAXSubmitButton that can
go back and refresh that area.

00:31:40.660 --> 00:31:43.870
I'm listing the important bindings
here, but there are tons of bindings.

00:31:43.869 --> 00:31:48.969
You can actually configure these
things in lots and lots of ways.

00:31:48.970 --> 00:31:53.690
AJAXUpdateLink, pretty much exactly
like the WO hyperlink, but AJAXified.

00:31:53.690 --> 00:31:57.110
The important bindings, action and updateContainerID.

00:31:57.109 --> 00:31:59.519
This basically has the same semantics as the WO hyperlink.

00:31:59.519 --> 00:32:05.269
You can use it, for the most part, just in the same way,
except when you add this additional UpdateContainerID,

00:32:05.269 --> 00:32:08.490
you then tell it I want to refresh this section of the page.

00:32:08.490 --> 00:32:13.519
In fact, if you leave off the updateContainerID,
it lets you essentially make update links

00:32:13.519 --> 00:32:20.200
that all they do is fire background actions,
which is actually kind of a useful feature too.

00:32:20.200 --> 00:32:24.920
I've got to press it very hard.

00:32:24.920 --> 00:32:27.090
AJAXSubmitButton.

00:32:27.089 --> 00:32:29.609
It's the cool friend of WOSubmitButton.

00:32:29.609 --> 00:32:33.459
The important bindings, updateContainterID,
action and value.

00:32:33.460 --> 00:32:38.610
Just like a WOSubmitButton, action and
value work identically, except it now has this--

00:32:38.609 --> 00:32:45.139
just like AJAX update link, updateContainerID, this
essentially lets me say, you know, when I submit this form,

00:32:45.140 --> 00:32:47.890
what area of the screen do I want to refresh?

00:32:47.890 --> 00:32:50.160
What update container do I want to refresh?

00:32:50.160 --> 00:32:53.769
And this actually does a background form submission.

00:32:55.220 --> 00:32:58.289
And like I said, there's tons of
components that are available.

00:32:58.289 --> 00:33:01.899
We have AJAX file up loading, dragging
and dropping, auto complete,

00:33:01.900 --> 00:33:05.800
like the Google auto completion,
highlighting inplace editing.

00:33:05.799 --> 00:33:07.529
There are tons in there.

00:33:07.529 --> 00:33:11.680
AJAX example actually covers most of these,
so if you want to see sort of example uses

00:33:11.680 --> 00:33:13.820
of common cases, definitely look in that.

00:33:13.819 --> 00:33:18.599
But the way we typically work is someone asks
on the mailing list, you know, how do I X?

00:33:18.599 --> 00:33:22.169
And if it's not already in an example,
we make a new one and put it in there.

00:33:22.170 --> 00:33:26.180
So most of the common cases, there
are already some examples of for you.

00:33:27.339 --> 00:33:37.429
So let's actually go through and do a
conversion from a non AJAX app to an AJAX app.

00:33:37.430 --> 00:33:41.130
Actually, this is the div here for what I'm about to show.

00:33:41.130 --> 00:33:45.990
So this app is a very, very simple blog app.

00:33:45.990 --> 00:33:52.309
It really only has a post in this model,
so you have a set of posts on a page.

00:33:52.309 --> 00:34:02.490
And I'll show you how you might go from a boring WO app
to a really, really overblown effects garish AJAX app.

00:34:02.490 --> 00:34:08.219
Can we go to demo machine, please?

00:34:11.369 --> 00:34:19.869
So here we have the very, very boring
Larry World WebObjects non AJAX blog.

00:34:19.869 --> 00:34:28.809
So just to give you a feel for, you know, the types
of things that this blog does, I can add a new post,

00:34:28.809 --> 00:34:33.799
I can click this button here and I can do a full page submit

00:34:33.800 --> 00:34:38.230
and see what this is going to look
like when I actually submit

00:34:38.230 --> 00:34:40.340
It happens to be using a textile parser here.

00:34:40.340 --> 00:34:46.450
So I can post this, you know, as a new post at the top.

00:34:46.449 --> 00:34:52.439
I can choose to edit this, which brings it back down
to the bottom of the screen there back into that form.

00:34:52.440 --> 00:34:55.909
I can click the middle mouse button.

00:34:55.909 --> 00:34:58.849
I can do an update.

00:35:00.289 --> 00:35:02.900
And I can then delete it.

00:35:02.900 --> 00:35:05.180
Notice it's pretty boring, right?

00:35:05.179 --> 00:35:10.039
If you were just starting out and writing
the simplest possible blog you can make

00:35:10.039 --> 00:35:12.230
in WebObjects, this is what you would make.

00:35:12.230 --> 00:35:15.349
So let's start to take a look at, you
know, how could we make this cooler?

00:35:15.349 --> 00:35:19.360
If I can stop clicking the middle mouse button.

00:35:19.360 --> 00:35:24.120
So I'll open my Eclipse here.

00:35:24.119 --> 00:35:27.409
So this is the actual, you know,
inline binding syntax version of this.

00:35:27.409 --> 00:35:31.699
You can see it's very simple.

00:35:31.699 --> 00:35:35.519
So if I switch back here, so the first thing I want
to do is, of course, and I have these notes here,

00:35:35.519 --> 00:35:41.280
so I'm not going to copy and past into it, but I am
following some notes, so I'm not completely cheating.

00:35:41.280 --> 00:35:48.260
So the first thing that I'm going to
want to do is Larry has got to go.

00:35:48.260 --> 00:35:54.340
So we want WObocop.

00:35:54.340 --> 00:36:05.380
And of course, we need to change
this to, if I can spell it right,

00:36:07.750 --> 00:36:15.139
so go ahead and save that, refresh,
automatically much cooler.

00:36:15.139 --> 00:36:18.909
All right, so some of the first
things that we're going to want to do.

00:36:18.909 --> 00:36:22.699
For most of these operations, we're going
to want to take, you know, the center area,

00:36:22.699 --> 00:36:26.349
and essentially be able to AJAX refresh this.

00:36:26.349 --> 00:36:31.179
You know, when you add a new post, when you delete a post,
you want to consider reloading this section of the page.

00:36:31.179 --> 00:36:34.239
So the first thing I'm going to do
is I'm going to convert this div,

00:36:34.239 --> 00:36:37.969
which is the outer div, into an AJAXUpdateContainer.

00:36:37.969 --> 00:36:42.109
So I'm going to go ahead and refactor this.

00:36:42.110 --> 00:36:49.180
So this is some of the refactoring tools in
the new component editor inside of WOLips.

00:36:49.179 --> 00:36:54.279
So it actually changed both tags at the same time.

00:36:54.280 --> 00:36:58.970
So when I save this, you'll see nothing changed, right?

00:36:58.969 --> 00:37:01.980
All I did was say I just want this
area to be AJAX updatable.

00:37:01.980 --> 00:37:04.550
I didn't actually structurally change the page at all.

00:37:04.550 --> 00:37:09.050
And all it does is sort of provide some hooks into
the framework to be able to do other things later.

00:37:09.050 --> 00:37:12.990
So what are some of the other things
I'm going to want to be able to do?

00:37:12.989 --> 00:37:16.829
Inplace editing of posts would be a pretty cool one.

00:37:16.829 --> 00:37:21.250
Right now, I click edit and it goes down
to this form, which is kind of boring.

00:37:21.250 --> 00:37:27.320
So let's go ahead and we'll convert this
list item over to an AJAX inplace editor,

00:37:27.320 --> 00:37:29.070
which I showed you a little example of before.

00:37:29.070 --> 00:37:34.960
So I'll do a little code completion there.

00:37:34.960 --> 00:37:39.570
I want to save this element name as li.

00:37:39.570 --> 00:37:45.289
Then the way AJAX in place works is we give
it a view container and an edit container,

00:37:45.289 --> 00:37:47.809
or sorry, a view component and edit component.

00:37:47.809 --> 00:37:50.519
In this case, the view component
pretty much is already here.

00:37:50.519 --> 00:37:51.949
It's what we already defined.

00:37:51.949 --> 00:38:02.239
So I want to go ahead and wrap this in an AJAX in place
view template and go ahead and make that inline bindings.

00:38:02.239 --> 00:38:08.879
I then want to add a new AJAXInPlaceEditTemplate.

00:38:08.880 --> 00:38:16.039
And in this case, actually I'm going to
reuse this part of this form at the bottom.

00:38:16.039 --> 00:38:21.150
So I can say this happens to be called EditBlogPost.

00:38:21.150 --> 00:38:28.280
And in this case, there's a binding called repetitionBlogPost
that I can actually bind this thing into.

00:38:28.280 --> 00:38:31.780
So in this case, or, you know, in this case, if
I didn't know what the bindings were available,

00:38:31.780 --> 00:38:36.010
I could do a completion and this will actually show
me what bindings are available in my component.

00:38:36.010 --> 00:38:39.480
I can do a completion there.

00:38:39.480 --> 00:38:46.490
This is actually doing a completion against the Java code
inside the wad template here, or sorry, the inline template.

00:38:46.489 --> 00:38:50.379
So I have now essentially defined my view and edit component.

00:38:50.380 --> 00:38:55.039
Some of the things that I need to do for
AJAXInPlace, I need to tell it, you know,

00:38:55.039 --> 00:38:58.090
what actions need to be called when
you actually click the save button?

00:38:58.090 --> 00:39:03.410
By default, it will automatically generate a save and
cancel button or a save button on the cancel link for you.

00:39:03.409 --> 00:39:09.179
So in this case, I'm going to say save action,
I'm going to make this do an update blog post.

00:39:09.179 --> 00:39:20.599
The other thing is by default, the way this works is when
you click anywhere in the div, it goes into edit mode.

00:39:20.599 --> 00:39:25.569
For a lot of things like just having a piece of text,
you click, it turns into a text area, that's fine.

00:39:25.570 --> 00:39:29.470
But in our case, we actually, if you remember
over here, we had these edit and delete links.

00:39:29.469 --> 00:39:32.329
So I don't want to make it so when
the whole thing is clicked to edit.

00:39:32.329 --> 00:39:40.480
So I'm going to basically tell this thing that
I want manual view control, if I can type true.

00:39:40.480 --> 00:39:45.380
So one of the things that you can notice is that in line
bindings is pretty handy for things like WO string.

00:39:45.380 --> 00:39:48.340
But we already have like five or six bindings on here.

00:39:48.340 --> 00:39:50.190
It's starting to get a little bit obnoxious.

00:39:50.190 --> 00:39:53.750
So we can refactor that down into the wad file.

00:39:53.750 --> 00:40:00.599
So one of the other things is the edit
link right now is a WO hyperlink.

00:40:00.599 --> 00:40:04.130
So this is a full page reload and
puts that stuff down at the bottom.

00:40:04.130 --> 00:40:08.530
Instead, we want to change this
over to be an AJAX function link.

00:40:08.530 --> 00:40:13.800
So because we have an AJAXInPlace, it already provides
some hooks to do things like switching to edit mode,

00:40:13.800 --> 00:40:18.210
switching to view mode, saving, things like
that, that you can actually call from JavaScript.

00:40:18.210 --> 00:40:21.980
But, you know, we don't really want to write JavaScript
for most of the things, so we provide some hooks.

00:40:21.980 --> 00:40:26.699
So you can do, instead, an AJAXFfunctionLink.

00:40:26.699 --> 00:40:31.689
In this case, we're going to call
the built-in function edit.

00:40:31.690 --> 00:40:35.420
Note that this is not a binding to a component action.

00:40:35.420 --> 00:40:43.789
This is a binding to a JavaScript function that sort of
edit is a magical one that it knows how to wire up properly.

00:40:43.789 --> 00:40:49.989
So now when we click the edit link, it will
switch us into the edit mode of the AJAXInPlace.

00:40:49.989 --> 00:40:53.219
Delete, we want to be an AJAXUpdateLink.

00:40:53.219 --> 00:40:58.879
We don't want to essentially say when you click this, call
the delete blog post action just like this hyperlink does.

00:40:58.880 --> 00:41:02.730
But instead, we want to go and just refresh
the whole blog contents area because, you know,

00:41:02.730 --> 00:41:05.130
the post is now gone, just reload the whole thing.

00:41:05.130 --> 00:41:08.579
So I'll click the wrong thing.

00:41:12.659 --> 00:41:19.849
So in this case, we want to refactor
this to be AJAX update link.

00:41:19.849 --> 00:41:23.719
And so we call the same delete blog post action.

00:41:23.719 --> 00:41:26.099
But in this case, I want to do an updateContainerID.

00:41:26.099 --> 00:41:31.969
And if you remember, the div up here, blogContent,
I actually want to refresh the whole area.

00:41:31.969 --> 00:41:40.289
So this is essentially now our, of course,
yeah, I changed the structure of the component,

00:41:40.289 --> 00:41:43.690
so if I were to reload that page, because
I injected a whole bunch of components

00:41:43.690 --> 00:41:46.679
in the middle that that link didn't match up to.

00:41:46.679 --> 00:41:51.199
I can now click edit and go to InPlace editing on this.

00:41:51.199 --> 00:41:56.799
I can make a change, and it does InPlace saving.

00:41:56.800 --> 00:42:01.650
And deleting does, if you notice, it's much, much faster.

00:42:01.650 --> 00:42:03.639
We don't do a full page reload.

00:42:03.639 --> 00:42:07.379
All it's doing is now just doing
a refresh of that one section.

00:42:07.380 --> 00:42:10.150
So there's that.

00:42:10.150 --> 00:42:13.130
Now, it would be kind of cool to be able to add on some

00:42:13.130 --> 00:42:15.950
of those fancy scriptaculous effects
that you see all over the place.

00:42:15.949 --> 00:42:24.329
There are a bunch of hooks into the framework to be able
to do some of the common operations like, for instance,

00:42:24.329 --> 00:42:28.759
in this case, we want to do sort of blind
up blind down effect when you go into in

00:42:28.760 --> 00:42:31.460
and out of edit mode for one of those things.

00:42:31.460 --> 00:42:40.159
So if I go to the AJAX InPlace here, I
essentially want to say when you go into edit mode,

00:42:40.159 --> 00:42:42.269
the effect that I want is effect out blind.

00:42:42.269 --> 00:42:44.539
These actually hook into scriptaculous effects.

00:42:44.539 --> 00:42:49.150
So that's course, but if you know scriptaculous,
this actually corresponds to the effect

00:42:49.150 --> 00:42:54.539
that blinds scriptaculous pair,
event pair, or sorry, effect pair.

00:42:54.539 --> 00:42:58.599
When you save, I want it to go ahead and do the same thing.

00:42:58.599 --> 00:43:04.829
When you cancel, again, I just want to do the same
thing, except I want that to be cancelInsertion.

00:43:06.079 --> 00:43:12.179
Just from having put the thing together before, by
default, the speeds are kind of obnoxiously slow.

00:43:12.179 --> 00:43:16.559
So let's go ahead and override the duration to be 0.2.

00:43:16.559 --> 00:43:23.219
And again, for saving and canceling, so this
is 0.2 seconds to do one of these transitions.

00:43:26.219 --> 00:43:32.239
So now, when I reload this page,
let's go ahead and add new post

00:43:32.239 --> 00:43:34.419
and get a little bit more so you can see the effect more.

00:43:34.420 --> 00:43:40.300
So now when I go into edit mode, this now
does some scriptaculous effects for me.

00:43:40.300 --> 00:43:42.990
So notice so far, I have not done any JavaScripts.

00:43:42.989 --> 00:43:44.989
I may be cheating a little bit.

00:43:44.989 --> 00:43:46.609
That's actually technically some JavaScript binding.

00:43:46.610 --> 00:43:52.990
Although this actually is slightly magical because it
knows if you give Effect.blind is the pair of events

00:43:52.989 --> 00:43:54.750
up until into blind up blind down.

00:43:54.750 --> 00:43:57.590
If you did just blind up, it would only do a partial effect.

00:43:57.590 --> 00:44:00.019
It would affect them on one way and not on the other.

00:44:00.019 --> 00:44:03.320
So it actually is doing a little bit of processing here.

00:44:03.320 --> 00:44:04.640
So there's that.

00:44:04.639 --> 00:44:08.170
And again, this demo is going to be just effects crazy.

00:44:08.170 --> 00:44:11.579
You'll never want to build an app like
this, but, you know, if you want to show off

00:44:11.579 --> 00:44:16.730
to all your friends how many effects you can
put on one page, this will be the demo for them.

00:44:16.730 --> 00:44:20.619
So one of the other things is right
now, I hit delete, and, you know,

00:44:20.619 --> 00:44:24.179
if I'm trying to show off doing fancy
effects, that's just not going to cut it.

00:44:24.179 --> 00:44:25.019
That's lame.

00:44:25.019 --> 00:44:28.670
So we want to go to our AJAXUpdateLink.

00:44:28.670 --> 00:44:33.320
And we want to tell it, first of all, again, it's
starting to get kind of a lot of bindings here.

00:44:33.320 --> 00:44:35.760
Let's refactor that down into the wad.

00:44:35.760 --> 00:44:46.440
And I want to say that the effect, the before
effect is blind up, and the duration, again, 0.2.

00:44:46.440 --> 00:44:49.920
And in this case, it's going to
delete after the thing is gone.

00:44:49.920 --> 00:44:52.070
So I don't need the end transition.

00:44:52.070 --> 00:44:54.650
So all I need is the effect before the action.

00:44:54.650 --> 00:45:02.150
So now, when I reload this page, I add a new one
in here, delete binds up, and it's just gone.

00:45:02.150 --> 00:45:06.820
Because what happened was it did a--
before the operation, it did a blind up.

00:45:06.820 --> 00:45:11.660
It then called my background, asynchronously
called my delete action,

00:45:11.659 --> 00:45:18.599
which is literally just a normal component action in
my component, and then did a refresh of the blog post.

00:45:18.599 --> 00:45:24.500
But because of the way this thing is all
set up, it just blinds up and goes away.

00:45:24.500 --> 00:45:30.239
One of the other things is you notice right now,
you can't really see that it's doing anything.

00:45:30.239 --> 00:45:33.599
This effect may not be very visible because we're
on a local machine versus over the Internet.

00:45:33.599 --> 00:45:39.969
But it would be cool if I could basically give a busy
indicator to people any time an AJAX event occurs.

00:45:39.969 --> 00:45:41.919
So I'll use the BusyIndicator.

00:45:41.920 --> 00:45:52.840
So what I actually have here is any time a particular div
performs an operation, or, you know, has an update performed

00:45:52.840 --> 00:45:56.530
on it, I can essentially say go into sort of a busy state.

00:45:56.530 --> 00:46:01.050
And so in this case, it applies a busy
style and takes it back off when it's done.

00:46:01.050 --> 00:46:05.340
So I don't know if you'll be able to see this,
but yeah, there's a little bit of a flash.

00:46:05.340 --> 00:46:10.570
If you look up here next to anything that
actually updates, you'll see a little flash there.

00:46:10.570 --> 00:46:14.269
So over the Internet, obviously you can have operations
that might take a second and a half or something.

00:46:14.269 --> 00:46:15.750
That would be much more noticeable.

00:46:15.750 --> 00:46:19.849
And you wouldn't want your user to sit there
wondering, you know, what is this doing.

00:46:19.849 --> 00:46:24.259
So you can basically just drop that in
and get a busy indicator automatically.

00:46:24.260 --> 00:46:32.090
So now one of the things that's also not particularly cool
is that I typed down here, and I had to press this button,

00:46:32.090 --> 00:46:34.289
you know, I'm way too lazy to press a button.

00:46:34.289 --> 00:46:36.570
That's just not going to fly.

00:46:36.570 --> 00:46:44.450
So let's convert our blog post form over, sorry,
our preview into an automatic updating container.

00:46:44.449 --> 00:46:48.149
So in this case, I no longer need this preview button.

00:46:48.150 --> 00:46:49.590
That's out of there.

00:46:49.590 --> 00:46:53.769
I can now-- this is one part that's slightly contrived.

00:46:53.769 --> 00:46:55.820
You wouldn't normally write this
like this, but because I have--

00:46:55.820 --> 00:47:00.059
I wanted to just keep it simple for the--
and not have to do multiple components.

00:47:00.059 --> 00:47:01.650
I have this edit blog post.

00:47:01.650 --> 00:47:08.210
I'm going to pass in the ID of the text area
that I want it to use so I can watch that.

00:47:08.210 --> 00:47:18.300
So in this case, it is new, I didn't make an API
file, so now I have to type, so I want this to be,

00:47:18.300 --> 00:47:25.830
I forget what I called the thing, never mind, I
was just wrong, I do have an API file for that.

00:47:25.829 --> 00:47:27.759
I want it to be called newBlogPostContents.

00:47:27.760 --> 00:47:29.910
So that's actually the ID of this thing.

00:47:29.909 --> 00:47:33.319
Because I need to be able to hook up
to that on the HTML side and watch it.

00:47:33.320 --> 00:47:39.180
So now I want to convert this blog post
preview, just like we've done before.

00:47:39.179 --> 00:47:42.639
This thing needs to be AJAXUpdateContainer.

00:47:42.639 --> 00:47:45.900
And I want this to observe a field.

00:47:45.900 --> 00:47:48.730
In this case, I want it to observe
the newBlogPostContents field.

00:47:48.730 --> 00:47:52.699
I want it to observe it at a certain
frequency of one second.

00:47:52.699 --> 00:47:56.929
In real life, you'll never do this because
one second is really fast over the web.

00:47:56.929 --> 00:48:02.980
But notice, I'm not touching this at all, this
is all the same bindings that we're used to,

00:48:02.980 --> 00:48:06.400
but I just wrapped it in an update container.

00:48:06.400 --> 00:48:15.740
So now when I type, so there you go.

00:48:15.739 --> 00:48:17.629
Automatically refreshing.

00:48:17.630 --> 00:48:21.240
I can post, except I-- oh, cool, my
model doesn't make title required.

00:48:21.239 --> 00:48:23.659
So that's that.

00:48:23.659 --> 00:48:25.329
New post form.

00:48:25.329 --> 00:48:29.869
It would actually be kind of cool that, you
know, why do I have to see this all the time?

00:48:29.869 --> 00:48:35.849
It would be really nice if this was sort of collapsed when
I don't need it and I can expand it when I want it back.

00:48:35.849 --> 00:48:42.769
So I'm going to go and convert this thing over to
an AJAXInPlace like we did up in the edit form.

00:48:42.769 --> 00:48:54.699
So what I want to do is I'm going to turn this
thing into, let's see, this will be an AJAXInPlace.

00:48:54.699 --> 00:48:59.899
In this case, before we had already
essentially defined the view template.

00:48:59.900 --> 00:49:01.700
In this case, we've defined the edit template.

00:49:01.699 --> 00:49:10.609
So I'm going to go ahead and just wrap this
whole thing into an AJAXInPlaceEditTemplate.

00:49:10.610 --> 00:49:17.940
Oh, actually I forgot to check inline bindings, which is
not a big deal, so it just picked Component as a name,

00:49:17.940 --> 00:49:23.530
which I don't really like, so I'll
refactor this to be NewPostFormInPlace.

00:49:23.530 --> 00:49:27.970
You can actually see a change in both places there.

00:49:27.969 --> 00:49:31.709
So I've now essentially given it the edit template.

00:49:31.710 --> 00:49:34.579
So now I need to define the view template for this.

00:49:34.579 --> 00:49:42.079
So what do I want it to say when it's just in view mode?

00:49:42.079 --> 00:49:47.380
So in this case, I'll go ahead and
just make it an AJAXFunctionLink.

00:49:47.380 --> 00:49:50.180
Action equals edit, in this case.

00:49:50.179 --> 00:49:53.399
I want it to go into edit mode when I click this link.

00:49:53.400 --> 00:50:05.809
And I'll tell this guy to, oh, manual view
control, this guy here, manualViewControl,

00:50:05.809 --> 00:50:07.320
because I am essentially defining my link.

00:50:07.320 --> 00:50:12.380
In this case, actually it's the only thing in there, so
you wouldn't necessarily have to do that, but, you know,

00:50:12.380 --> 00:50:16.320
my script says I'm going to do that, so it's what I'll do.

00:50:16.320 --> 00:50:23.510
So one of the other things is AJAXInPlace
automatically wraps your edit component in a form,

00:50:23.510 --> 00:50:27.540
so you don't actually need that part anymore.

00:50:27.539 --> 00:50:33.960
It also automatically gives you, by
default, your submit and your cancel,

00:50:33.960 --> 00:50:36.760
although you can also override those if you want.

00:50:36.760 --> 00:50:41.410
Then I have to tell it, you know, what is
the action that gets called when you save?

00:50:41.409 --> 00:50:43.279
And what does happen when you cancel?

00:50:43.280 --> 00:50:47.710
So in this case, the save action is at BlogPost.

00:50:47.710 --> 00:50:55.920
And because in this case, normally when you click the
save button, it refreshes the InPlace, the AJAXInPlace.

00:50:55.920 --> 00:51:00.470
In this case, because I'm adding a new blog post,
I want it to refresh that whole blog section

00:51:00.469 --> 00:51:02.209
because I'm putting something new up here.

00:51:02.210 --> 00:51:07.610
So I can actually tell this thing
saveUpdateContainerID.

00:51:07.610 --> 00:51:10.539
So this says on save update this particular container,

00:51:10.539 --> 00:51:15.730
and we're going to do blog content,
which is that one at the very top.

00:51:15.730 --> 00:51:22.159
I removed the form, yep, so let's see
if I've actually got everything right.

00:51:22.159 --> 00:51:25.379
So this is now an AJAXInPlace.

00:51:25.380 --> 00:51:31.050
When I save, that thing goes-- it collapses
back down and the new post appears up here.

00:51:31.050 --> 00:51:35.200
But, again, I'm trying to show off, you
know, how many effects we can put on a page.

00:51:35.199 --> 00:51:37.759
And there are definitely more effects
we can put on this page.

00:51:37.760 --> 00:51:45.950
So one of the things is if you notice when I posted
this, all it did was basically just pop up at the top.

00:51:45.949 --> 00:51:49.829
It doesn't really give me a very
good indication that it did anything.

00:51:49.829 --> 00:51:53.239
In fact, if you were looking down at the bottom,
you might miss that that occurred up there.

00:51:53.239 --> 00:51:56.529
So here's we're going to use something
called AJAX highlight.

00:51:56.530 --> 00:52:00.530
And this lets you, if you've used any of the AJAX
apps on the web, there's that really common idiom

00:52:00.530 --> 00:52:03.750
of yellow flashing, something that's changed.

00:52:03.750 --> 00:52:10.300
That's really easy to do in AJAX framework, except it really
hooks in at an object level because what you really want

00:52:10.300 --> 00:52:16.600
to do is you want to sort of just register with the system
that I want to highlight this object when you get to it.

00:52:16.599 --> 00:52:21.460
So in this case, this is the only Java
parts that we're going to write here.

00:52:21.460 --> 00:52:27.730
These two methods are essentially-- this is called by the
super class, when I click the update, when I save an update,

00:52:27.730 --> 00:52:31.010
this is called a super class when
I click save to add a new one.

00:52:31.010 --> 00:52:39.900
So on the update case, I'm going to call AJAXHighlight,
and I want to highlight for update this blog post.

00:52:39.900 --> 00:52:44.680
So essentially what this does is it registers
with the highlighting system this BlogPost.

00:52:44.679 --> 00:52:46.710
In this case, BlogPost is an EO.

00:52:46.710 --> 00:52:50.170
So I'm registering that this EO should
be highlighted on the next refresh.

00:52:50.170 --> 00:52:55.970
Down here, I want to instead do a
highlightNew of this BlogPost.

00:52:55.969 --> 00:52:58.929
You can actually just use highlight if you want,
but it's kind of common that sometimes you want

00:52:58.929 --> 00:53:01.889
to do a different effect, whether it's new or updated.

00:53:01.889 --> 00:53:05.929
So that's it for Java, and we're going to come back here.

00:53:05.929 --> 00:53:11.409
And so now we essentially, in our template, we need to tell
it, well, where on this page do we want to do a highlight?

00:53:11.409 --> 00:53:14.279
Because it's actually possible you could
have the same object in multiple places.

00:53:14.280 --> 00:53:18.180
So in this case, we want to highlight our ViewBlogPost.

00:53:18.179 --> 00:53:23.489
So if I command 6 this, I can wrap
this in an AJAX highlight.

00:53:23.489 --> 00:53:29.099
And you'll notice it looked at the required
bindings for this component, and so it filled in.

00:53:29.099 --> 00:53:30.900
I need to set a value.

00:53:30.900 --> 00:53:37.369
So in this case, my value here is-- I'm
going through the repetition of BlogPost.

00:53:37.369 --> 00:53:39.369
So the value is repetition BlogPost.

00:53:39.369 --> 00:53:50.949
So essentially what this says is, and I don't like
that, so what this says is basically when you get to--

00:53:50.949 --> 00:53:56.529
when the repetition blog post matches an object that I've
registered as needing a highlight, I want it to highlight.

00:53:56.530 --> 00:54:04.100
So if I reload this page, go into new post, actually,
let's delete something so we can actually see it,

00:54:04.099 --> 00:54:07.289
so you see the yellow flash when that happened.

00:54:07.289 --> 00:54:11.000
Well, that's not as flashy as an
effect as I might want to show here.

00:54:11.000 --> 00:54:15.460
So there's actually, again, the
same kind of hooks you can do.

00:54:15.460 --> 00:54:22.199
So in this case, I want to say-- I want to make it so when
you add a new one that it actually kind of blinds down,

00:54:22.199 --> 00:54:24.960
that it sort of appears down from the top.

00:54:24.960 --> 00:54:28.329
So in this case, neweffect, BlindDown.

00:54:28.329 --> 00:54:30.769
I want it to start hidden.

00:54:30.769 --> 00:54:33.940
I'm going to refresh that area, but I don't
want it to appear and then blind down.

00:54:33.940 --> 00:54:40.490
I want it to disappear at first and
then sort of slide down from invisible.

00:54:40.489 --> 00:54:43.939
And I'm not doing a non findings, so I don't need that.

00:54:43.940 --> 00:54:46.309
And, again, duration of .2.

00:54:46.309 --> 00:55:00.139
So same deal, reel up the page, so now I can delete
and they sort of roll up, make a new one, slide down.

00:55:00.139 --> 00:55:02.889
It's kind of cool.

00:55:02.889 --> 00:55:10.199
Lastly, I want to make it so this new blog post is
definitely something that could have an effect put on it

00:55:10.199 --> 00:55:13.419
because everything on this page
must have an effect put on it.

00:55:13.420 --> 00:55:19.789
So it would actually be kind of cool if this little thing
was where the new post is attached to the bottom of our page

00:55:19.789 --> 00:55:22.920
and just kind of slid up like a little console.

00:55:22.920 --> 00:55:30.539
So what I'm going to do is go back to the BlogPostForm,
which definitely needs that done to it

00:55:30.539 --> 00:55:36.480
because that's not going to fly, and rename that.

00:55:36.480 --> 00:55:39.730
That will do.

00:55:39.730 --> 00:55:45.230
So I've actually defined a CSS class
here called, of course, floaty.

00:55:45.230 --> 00:55:47.590
This makes it sort of stick to the bottom.

00:55:47.590 --> 00:55:49.930
All that is is a position fixed.

00:55:49.929 --> 00:55:56.909
Then I'm going to say, in this case, this is actually
might be a little backwards from what you might think.

00:55:56.909 --> 00:56:07.099
I want to say when you cancel a blind up, and when you edit
blind down, but if you remember, it's stuck to the bottom.

00:56:07.099 --> 00:56:09.889
So it's going to animate from the bottom.

00:56:09.889 --> 00:56:13.629
So what sort of seems like it would be the
backwards effect turns out to be, actually,

00:56:13.630 --> 00:56:18.650
what we want, in this case, and the usual durations.

00:56:18.650 --> 00:56:20.900
I can't remember which one I want.

00:56:20.900 --> 00:56:25.740
That one. So now that thing is
stuck to the bottom of our page.

00:56:25.739 --> 00:56:26.809
We click it and it slides up.

00:56:26.809 --> 00:56:33.409
But actually, you can kind of see on the bottom
here, that little thing pop in the busy symbol.

00:56:35.449 --> 00:56:43.559
It grows from the bottom there, kind of cool, refreshing,
got our textile in there, save it, it pops down,

00:56:43.559 --> 00:56:45.989
and the one animate, you know, it slides in from the top.

00:56:45.989 --> 00:56:48.979
So do that again.

00:56:48.980 --> 00:56:54.590
So you watch this, the bottom will slide
down and it will slide down from the top.

00:56:54.590 --> 00:56:55.420
And that's that.

00:56:55.420 --> 00:57:01.380
We've now taken-- we've gone from, you
know, a very boring WO app to really,

00:57:01.380 --> 00:57:08.760
and I think it turned out to be something like 25 lines have
c%hanged, a really, really overblown effects demo of a blog.

00:57:08.760 --> 00:57:14.890
And so, you know, this is, again, kind of a contrived
example, but it's just sort of to show you how easy it is

00:57:14.889 --> 00:57:18.349
to wrap these things into, you know, wrap
your WO components with these things.

00:57:18.349 --> 00:57:23.940
We have tons of hooks in here for doing all kinds of
effects, all kinds of things like, again, like Google maps,

00:57:23.940 --> 00:57:27.200
highlightings, sliders, any number of things.

00:57:27.199 --> 00:57:31.000
And these actually were built as
part of production applications.

00:57:31.000 --> 00:57:36.409
So we've tested these things on Safari, on
Internet Explorer, on Firefox, on Opera.

00:57:36.409 --> 00:57:40.819
We've run it on a Wii, which is kind of cool.

00:57:40.820 --> 00:57:43.440
And, you know, all of these things just kind of work.

00:57:43.440 --> 00:57:47.550
And one of the things that is particularly notable is that
entire demo was not a single line JavaScript was written.

00:57:47.550 --> 00:57:49.539
And that wasn't like cheating.

00:57:49.539 --> 00:57:52.400
There's literally no JavaScript
in that HTML template anywhere.

00:57:52.400 --> 00:57:58.720
And this certainly varies as to, you know, how
complicated the types of interactions you want will be.

00:57:58.719 --> 00:58:03.339
You know, as you do more complicated things,
you may need to drop down a new JavaScript.

00:58:03.340 --> 00:58:07.039
And we actually have all kinds of
really cool hooks to essentially be able

00:58:07.039 --> 00:58:09.409
to intermingle JavaScript and component action.

00:58:09.409 --> 00:58:14.989
So, you know, you can actually make an AJAX update
link that turns into a JavaScript function for you

00:58:14.989 --> 00:58:18.409
so that you can call update areas of your page

00:58:18.409 --> 00:58:23.190
the refresh components from JavaScript
integrated really nicely together.

00:58:23.190 --> 00:58:25.990
So if you can flip back to slides, please.

00:58:25.989 --> 00:58:26.750
( Applause )

00:58:26.750 --> 00:58:36.239
I ended up changing that.

00:58:36.239 --> 00:58:37.519
That's actually off by like two lines.

00:58:37.519 --> 00:58:43.539
But, you know, so if you go ahead and watch the DVD
next year and you go he lied, that's what's going on.

00:58:43.539 --> 00:58:46.000
So how do you get started?

00:58:46.000 --> 00:58:47.070
It's pretty easy.

00:58:47.070 --> 00:58:50.130
You download and install the frameworks,
you add them to your project,

00:58:50.130 --> 00:58:52.990
and you integrate the framework with your applications.

00:58:52.989 --> 00:58:54.509
Download and installing.

00:58:54.510 --> 00:58:56.680
It's part of Project Wonder.

00:58:56.679 --> 00:59:01.849
So my company, mDimension, actually hosts the
Project Wonder build server, nightly build server.

00:59:01.849 --> 00:59:07.289
Go to webobjects.mdimension.com/wonder,
download the latest version.

00:59:07.289 --> 00:59:12.329
We work pretty hard to keep the latest versions of
that framework actually in a very stable state.

00:59:12.329 --> 00:59:18.380
Install the ones that goes into your library
frameworks, just like you would any framework.

00:59:18.380 --> 00:59:20.309
Adding it to your project.

00:59:20.309 --> 00:59:23.750
There are three frameworks that
are actually very important here.

00:59:23.750 --> 00:59:28.130
ERJars, which is sort of the base
set of jar files that Project Wonder uses.

00:59:28.130 --> 00:59:33.340
ERExtensions, which in the past has been a
highly controversial framework, that does tons

00:59:33.340 --> 00:59:35.240
and tons of cool things in Project Wonder.

00:59:35.239 --> 00:59:40.569
Historically, people have been nervous about
including this framework in their project

00:59:40.570 --> 00:59:43.130
because it basically injects code into your app.

00:59:43.130 --> 00:59:44.950
Most people don't like this.

00:59:44.949 --> 00:59:47.589
It injects code into your app that's really, really cool.

00:59:47.590 --> 00:59:53.640
But last year, Anjo (phonetic) did a whole bunch
of work on this to make it so that just blinking

00:59:53.639 --> 00:59:56.929
to the framework does not bring
in anything that you don't intend.

00:59:56.929 --> 01:00:01.359
So essentially, linking to the framework
now is just linking to any other framework.

01:00:01.360 --> 01:00:02.710
It's purely utilities.

01:00:02.710 --> 01:00:06.920
It's not going to patch in stuff
that you're not anticipating.

01:00:06.920 --> 01:00:11.360
And lastly, Ajax.framework, of course, you will need.

01:00:11.360 --> 01:00:11.760
Integrating.

01:00:11.760 --> 01:00:14.270
There are three basic ways to integrate.

01:00:14.269 --> 01:00:20.269
One way is we've actually refactored out
the parts of the ERX application

01:00:20.269 --> 01:00:23.659
of the ERX section, the sort of the base classes of Wonder.

01:00:23.659 --> 01:00:26.559
And the ERXAjaxApplication and ERXAjaxSession.

01:00:26.559 --> 01:00:30.349
The notable parts of these is that this is just AJAX stuff.

01:00:30.349 --> 01:00:35.579
So again, to try to make this easy for people to integrate
in their apps, this doesn't bring in any other Wonder stuff,

01:00:35.579 --> 01:00:38.710
you don't have to worry about, you know,
other things hooking into your app.

01:00:38.710 --> 01:00:40.250
This is just the AJAX portion.

01:00:40.250 --> 01:00:45.380
So essentially, if you just change your app superclass
to AJAX app and change your session superclass to AJAX,

01:00:45.380 --> 01:00:50.400
the ERX AJAX session, you are
now able to use AJAX framework.

01:00:50.400 --> 01:00:52.460
Better yet, just use Wonder.

01:00:52.460 --> 01:00:58.179
It's awesome, it's one of the largest open source
frameworks out there, tons and tons of cool things

01:00:58.179 --> 01:01:05.119
that will solve problems that you have and fix
deadlocks that you have and don't know it yet.

01:01:06.159 --> 01:01:11.219
And lastly, just like a merger with here,
this is actually not a lot of code in there.

01:01:11.219 --> 01:01:13.459
A couple hundred lines, maybe.

01:01:13.460 --> 01:01:16.389
If you really don't have the, you
know, flexibility in your projects

01:01:16.389 --> 01:01:20.400
to change base class hierarchy,
just copy and past it into yours.

01:01:20.400 --> 01:01:28.539
A notable point here is WO 5.4 includes essentially
what is ERXAjaxApplication to ERXAjaxSession.

01:01:28.539 --> 01:01:33.860
So if you're using WO 5.4, those
parts will be built in for you.

01:01:33.860 --> 01:01:41.030
One of the-- there's not a version of Wonder
released just yet that is WO 5.4 compatible,

01:01:41.030 --> 01:01:43.170
but Anjo has been working feverishly through the night.

01:01:43.170 --> 01:01:47.889
So I suspect by maybe tomorrow, there
will be, maybe the end of the week.

01:01:47.889 --> 01:01:50.819
So we are working on that, though.

01:01:50.820 --> 01:01:56.340
There will be a version that will come out very,
very soon, that will essentially let you experiment

01:01:56.340 --> 01:01:59.460
with all these things with 5.4 and run your apps on 5.4.

01:01:59.460 --> 01:02:01.590
So expect that to come soon.

01:02:01.590 --> 01:02:07.640
And, of course, profit because all of your customers
will just go crazy when you have sliding blog posts.

01:02:07.639 --> 01:02:10.629
Now, download Wonder, try it.

01:02:10.630 --> 01:02:15.220
Like I showed before, the AJAX example
application is in Project Wonder.

01:02:15.219 --> 01:02:18.869
It shows off pretty much every component that we have.

01:02:18.869 --> 01:02:20.480
If there's something in there that's missing,

01:02:20.480 --> 01:02:25.280
get on the Wonder discussion mailing
list post, let us know, we'll add it in.

01:02:25.280 --> 01:02:31.300
There is several people actually using this
application, many actually in production environments,

01:02:31.300 --> 01:02:33.840
who can definitely help answer questions and contribute.

01:02:33.840 --> 01:02:36.340
We're an open source, we're all volunteer.

01:02:36.340 --> 01:02:41.390
We would love to have people come in
and fix bugs, contribute new components.

01:02:41.389 --> 01:02:45.699
I've had a couple people actually come up to me at WWDC
and say, you know, hey, I've been using the framework,

01:02:45.699 --> 01:02:47.960
I have a cool new component, how do I submit it back?

01:02:47.960 --> 01:02:50.780
Get on the mailing list and, you know, submit a patch in.

01:02:50.780 --> 01:02:51.480
We love patches.

01:02:51.480 --> 01:02:53.090
We love not having to do work ourselves.

01:02:53.090 --> 01:02:54.769
That's great.

01:02:54.769 --> 01:02:57.980
I'll bring Pierre back up.

01:02:57.980 --> 01:03:04.360
So for more information in general
on WO 5.4 stuff, talk to these guys.

01:03:04.360 --> 01:03:09.450
For information on AJAX framework or Project
Wonder or WOLips, you know, talk to us.

01:03:09.449 --> 01:03:10.289
Thank you.

01:03:10.289 --> 01:03:13.389
AJAX framework.

01:03:13.389 --> 01:03:19.000
( Applause )

01:03:19.000 --> 01:03:23.610
>> Okay, so if you need anything more, I'm here.

01:03:23.610 --> 01:03:24.820
You all have my e-mail address.

01:03:24.820 --> 01:03:26.700
It's easy.

01:03:26.699 --> 01:03:31.039
Matt I don't think is here in this room today.

01:03:31.039 --> 01:03:39.630
If you need anything with the evangelism,
try Matt.

01:03:39.630 --> 01:03:42.559
Wrong thing.

01:03:42.559 --> 01:03:48.340
Coming up, I would really insist on the first
one because that was not in your program.

01:03:48.340 --> 01:03:50.780
We have reintroduced the Birds of a Feather.

01:03:50.780 --> 01:03:54.550
Bring your cool app, show them to
your fellow developers tonight.

01:03:54.550 --> 01:04:00.280
We have got a special room for you so
that you can actually share your apps.

01:04:00.280 --> 01:04:02.440
So please come.

01:04:03.710 --> 01:04:09.329
Obviously, you need to come to the rest too.

01:04:09.329 --> 01:04:15.500
In summary, WebObjects has a maturity
that's got a staying power.

01:04:15.500 --> 01:04:16.550
We have been there 10 years.

01:04:16.550 --> 01:04:20.120
We are going to be there.

01:04:20.119 --> 01:04:33.380
The WO 5.4 has got more improvement, more
changes than quite a few of the release before.

01:04:33.380 --> 01:04:35.970
So have a look at it.

01:04:35.969 --> 01:04:38.709
It's a very significant release.

01:04:38.710 --> 01:04:44.900
And you can build Web 2.0 with WebObjects today using Wonder.

01:04:44.900 --> 01:04:49.820
And really, it's really about the framework.