WEBVTT

00:00:10.050 --> 00:00:13.700
>> And welcome to session 602 the Encoding Process In-Depth.

00:00:13.699 --> 00:00:17.820
And the way we are going to work this session
today is we actually have three different speakers.

00:00:17.820 --> 00:00:21.940
The first speaker is going to be Doug
Werner who's a manager on our Apple.com team

00:00:21.940 --> 00:00:25.900
who is known most famously for him
amazing looking movie trailers.

00:00:25.899 --> 00:00:30.519
So he is going to talk about his process of actually
creating those HD trailers that we have up on our page.

00:00:30.519 --> 00:00:34.929
Then we are going to hand it off to Nate Caplin and
John McClintock form the American Electric Power Company

00:00:34.929 --> 00:00:40.159
who are going to talk about how to build-out a distributed
encoding render farm using compressors so you know going

00:00:40.159 --> 00:00:42.589
from doing just one encode to doing a whole batch of them.

00:00:42.590 --> 00:00:45.970
And then finally we are going to end with David
Singer who is on our QuickTime engineering team,

00:00:45.969 --> 00:00:51.280
who's going to talk about H264 form an Apple
device perspective and how you can create content

00:00:51.280 --> 00:00:55.789
that is compatible with Apple devices and what
we are doing to make that a little bit easier.

00:00:55.789 --> 00:00:58.560
So with that I am going to hand it over to Doug.

00:00:58.560 --> 00:01:01.310
>> Doug: Good afternoon and thank
you for coming and seeing us today.

00:01:01.310 --> 00:01:07.810
What I'm going to do is literally take you through what
I am going to do to start the encoding of a movie trailer

00:01:07.810 --> 00:01:12.040
that we are going to put up on the site probably tomorrow.

00:01:12.040 --> 00:01:14.890
If you get to the projector, there
you go this is our new site,

00:01:14.890 --> 00:01:18.849
this is what we have been working
on for a little while prior to WWDC.

00:01:18.849 --> 00:01:24.699
We changed to format of the trailer site a little
bit and hopefully people will appreciate the things

00:01:24.700 --> 00:01:32.439
that we've added including a specific section for HD and such
so that said we will get that out of the way and get this

00:01:32.439 --> 00:01:43.120
out of the way and I've connected to my machine
actually in one of my labs at Apple, via Timbuktu,

00:01:43.120 --> 00:01:51.570
and this is the Compressor App running and on my right
side here which you may be familiar with if you are used

00:01:51.569 --> 00:01:56.859
to running Compressor this is your column over
here that allows you to set your custom settings

00:01:56.859 --> 00:02:03.670
if your not using the presets that come with
the app, so I tend to roll my own as they say.

00:02:03.670 --> 00:02:09.569
Let me close you, anyway I'll scroll down.

00:02:09.569 --> 00:02:15.599
So what I am going to do is I'm a going to grab
a file here and the file we are going to use is

00:02:15.599 --> 00:02:21.310
from New Line Cinema's Golden Compass which we,
like I said will be posting on the site shortly.

00:02:21.310 --> 00:02:29.319
I brought it into the app and with my preset settings
here, I have folders already containing a set

00:02:29.319 --> 00:02:38.250
of HD resolution files at 1080, 720 and 480p
and I'm going to bring those on to the app.

00:02:38.250 --> 00:02:41.949
Now when I am doing encoding and after I've done a capture.

00:02:41.949 --> 00:02:45.780
Our captures come in now mostly they come in on D5.

00:02:45.780 --> 00:02:53.229
So I have a D5 deck, I have two RAIDS that are connected as
well as the encoding machines are connected all by fibre.

00:02:53.229 --> 00:02:58.750
And my short hand when I am doing the encoding is
actually to try and label what it is as I am going along

00:02:58.750 --> 00:03:02.099
so in this particular case this clip is a teaser.

00:03:02.099 --> 00:03:09.419
My short hand for 235 is that part here six channels is
the number of channels that are in it and R is a ref movie.

00:03:09.419 --> 00:03:14.809
In another folder I actually have the source movie which
has all eight tracks because when they come into me most

00:03:14.810 --> 00:03:18.099
of the time they will have you know left,
right, surround, sub and all of that

00:03:18.099 --> 00:03:20.719
and then typically it will have
two channels of dedicated stereo.

00:03:20.719 --> 00:03:25.210
And since QuickTime has the ability to do surround sound
of course we will want to take advantage of that so I note

00:03:25.210 --> 00:03:28.320
in the file so that I can have in captured this.

00:03:28.319 --> 00:03:36.069
Actually last week I can quickly look at this and know
which set of settings I should jump on to it or apply to it.

00:03:36.069 --> 00:03:45.370
So what I have done is taken this folder of HD setting,
brought them in and this is my base set of settings.

00:03:45.370 --> 00:03:53.490
It's lagging a little bit and I am not exactly sure why
but let me flip resolutions here and speed it up a tad.

00:03:53.490 --> 00:03:57.080
So the first thing I am looking at right off the bat
is to make sure that the crop marks are going to,

00:03:57.080 --> 00:04:02.810
crops are going to come in the right
position and I'll go ahead and close that.

00:04:02.810 --> 00:04:09.240
In the settings lets just take the 480p and I'll just
run through, just give you an idea of how the setting are

00:04:09.240 --> 00:04:15.820
like out here for this specific size of movie.

00:04:15.819 --> 00:04:17.759
It just, there we go.

00:04:17.759 --> 00:04:22.449
I think the button on my track pad is sticking,
that's why I am getting a little bit of a delay.

00:04:22.449 --> 00:04:27.409
So running through it, I mean often most common question
that I have always been asked is well what settings you use

00:04:27.410 --> 00:04:32.160
and all of that so I am just showing
you for a 480p 235 trailer.

00:04:32.160 --> 00:04:43.740
In this case what I am going to start with is a 2100
there of !course frame reordering and then in the audio

00:04:43.740 --> 00:04:49.960
of course we are going to be using AAC 5.1 surround,
variable bit rating coding and I will typically kind of go

00:04:49.959 --> 00:04:55.979
to the middle of the road for the smaller files and for the
larger like 1080p, kind of like your good, better, best,

00:04:55.980 --> 00:05:01.580
I'll definitely go to the highest setting
for audio I can to support the surround.

00:05:01.579 --> 00:05:11.139
In this case I have a very small amount of what I
would qualify as image sharpening applied for the 480.

00:05:11.139 --> 00:05:15.759
Since you are starting with the 1080 I've noticed that it
does require a bit of sharpening and from what I worked

00:05:15.759 --> 00:05:17.829
on this past week which I will show you here in a moment.

00:05:17.829 --> 00:05:23.139
They use to run about a 50 on the details level but I am
actually going to change it to 20 for this particular one

00:05:23.139 --> 00:05:27.789
and I am going to do the same to the, I
don't think the 720 has any sharpening,

00:05:27.790 --> 00:05:32.439
I do have a slight bit of gamma correction, some
brightness and contrast not really all that much.

00:05:32.439 --> 00:05:36.329
I mean the 264 encoder does a really good job
of pretty much getting it where you want to be

00:05:36.329 --> 00:05:40.159
and of course the last panel here, I'm
telling you what size I want it to be and its,

00:05:40.160 --> 00:05:44.470
2.35 is not true 16 by 9 so I am compensating for that.

00:05:44.470 --> 00:05:46.620
And then the crops, top and bottom.

00:05:46.620 --> 00:05:55.959
And I do try and crop in at least devisable by four, so
let me do a save and since I've shown you that process,

00:05:55.959 --> 00:06:02.449
I'm going to hop down here to the other ones
and this will be 2.35, two channel HD5

00:06:02.449 --> 00:06:09.979
and so this particular set has the lower resolution
size of 640, 480, and this one is going to be one

00:06:09.980 --> 00:06:12.680
of my guinea pig files to convert for iPhone.

00:06:12.680 --> 00:06:17.639
Then I am going to go over here and
essentially triple check to make sure

00:06:17.639 --> 00:06:24.529
that these other guys are definitely the correct
batch, cropped correctly so I can close that.

00:06:24.529 --> 00:06:35.609
Switch this to my cluster, I'm just going to go ahead
and take off, and it will bring up the batch monitor

00:06:35.610 --> 00:06:40.199
and I'll switch this to this cluster server

00:06:40.199 --> 00:06:42.339
and this tells us what we're doing.

00:06:42.339 --> 00:06:48.009
Right off the bat you are going to see that the
four machines that I have attached my cluster,

00:06:48.009 --> 00:06:52.039
have already started to encode these particular
files and I've got the other ones waiting.

00:06:52.040 --> 00:06:55.120
So in theory most of these will
be done by the time I get back.

00:06:55.120 --> 00:06:59.790
To give you a point of comparison, when I started
doing encoding back around '99 they did things

00:06:59.790 --> 00:07:07.730
like the Star Wars trailer, it would take about I think if
memory serves it was about 12 hours to do one 480 in code

00:07:07.730 --> 00:07:14.129
and at the time once I got my lab really going and cranking
I had eight machines all stacked in a pyramid in my office

00:07:14.129 --> 00:07:18.230
and I would use one machine with one setting and
one machine with a slightly different setting

00:07:18.230 --> 00:07:22.000
and would literally be using them in parallel and
then I'd take them out and be like and eye test,

00:07:22.000 --> 00:07:25.889
okay was this one better or was this one better and
you know 12 hours at a whack you kind of wanted to try

00:07:25.889 --> 00:07:30.490
and get it going as promptly as you can, so that was
the best hardware that I could throw at it at the time

00:07:30.490 --> 00:07:39.250
and now to look at it now a days you can see here this
1080p version what 1920 by some odd is probably going

00:07:39.250 --> 00:07:43.329
to take an hour, hour and ten minutes to
do, so we have definitely come a long way.

00:07:43.329 --> 00:07:49.979
With Compressor 3 you can allow a machine to
have a virtual cluster, so I am looking forward

00:07:49.980 --> 00:07:53.509
to literally doubling the number of
machines I have to be able to be able to take advantage

00:07:53.509 --> 00:07:56.180
of the additional horsepower that it will provide.

00:07:56.180 --> 00:08:07.040
So this is off and running and the setting that you saw
me change, let me just close this stuff, gets back to,

00:08:07.040 --> 00:08:31.439
oh where did they go, let me pop to
the web here real quick and here we go.

00:08:31.439 --> 00:08:32.799
Okay here we go.

00:08:32.799 --> 00:08:36.740
I thought I had a couple sample files
with me but I am going to go ahead

00:08:36.740 --> 00:08:52.769
and run down here to this guy, oops where did he go?

00:08:52.769 --> 00:08:57.689
What I was going to do, I may have to come back to it at the
end of the Q and A session, I thought I had a couple files

00:08:57.690 --> 00:09:02.130
with me, I was going to show you first hand the difference,
when you are encoding something and you run through it

00:09:02.129 --> 00:09:04.649
and your looking at it and it still might look
a little bit crunchy, you think oh I might have

00:09:04.649 --> 00:09:09.169
to apply a little more data rate to it, what you can do
is go back into that panel that I showed you previously

00:09:09.169 --> 00:09:15.889
about the percentage slider there and make a slide
adjustment there and it makes a difference in having

00:09:15.889 --> 00:09:21.149
it qualifies less crunchiness in that space,
so that is what I was going to show you.

00:09:21.149 --> 00:09:26.559
And essentially that is it that is what is going to provide.

00:09:26.559 --> 00:09:30.759
Like I said during the Q and A session I might be able
to come back and show them side by side, I'll go get them

00:09:30.759 --> 00:09:33.870
but I wanted to give you an example of my workflow.

00:09:33.870 --> 00:09:40.789
What I will do is, get this guy back up here, after the files
are encoded they go to another machine that is actually

00:09:40.789 --> 00:09:47.360
in my office as opposed to the lab
and this has a setting applied to it.

00:09:47.360 --> 00:09:56.039
I will annotate them using Apple Script by taking a set
of them for example here, whoops I'll just grab a couple

00:09:56.039 --> 00:10:01.219
and I have specific studio scripts
that I will drag them onto

00:10:01.220 --> 00:10:06.830
and they already have all the factors pre
loaded and I think this one is Sony Pictures.

00:10:06.830 --> 00:10:14.600
And I would simply put in the name of the film and
what it is going to do to all of those is open them,

00:10:14.600 --> 00:10:25.029
apply the copyright, whoops, the copyright information,
come back here, and then complete that step automatically

00:10:25.029 --> 00:10:28.329
with having to go in and individually annotate each film.

00:10:28.330 --> 00:10:35.509
Then I have another script that I run that
creates multiple reference movies and the purpose

00:10:35.509 --> 00:10:41.259
of multiple reference movies for one file is once I put
them up on the server I can see if anybody is deep linking

00:10:41.259 --> 00:10:46.340
to the file directly or if I am sharing the file with
multiple people I can have you know like dash a, dash b,

00:10:46.340 --> 00:10:50.820
dash c and when I am doing my reporting I can run a
report and say oh well look at how many people are looking

00:10:50.820 --> 00:10:55.070
at this file via the web as opposed to deep
linking as opposed to one I may have given

00:10:55.070 --> 00:10:58.740
to product support or iTunes and that kind of thing.

00:10:58.740 --> 00:11:05.009
So I actually tract using Apple Script and
multiple movies the ability to keep track

00:11:05.009 --> 00:11:10.730
of how many iTunes people watch the
trailer as opposed to from the main website

00:11:10.730 --> 00:11:16.830
and once I created the reference movies, all they do is
they're just pointers, there's no speed selection or anything

00:11:16.830 --> 00:11:23.050
like that or just simple created a template file which
have the little guy on there and I will just add it,

00:11:23.049 --> 00:11:27.599
throw it on top of this particular script

00:11:30.279 --> 00:11:37.269
and it automatically creates all of those files and I
am ready to drag those up on to the server for tracking.

00:11:37.269 --> 00:11:42.429
The nice thing about this in terms of Compressor 3
is it has the ability now instead of having to do

00:11:42.429 --> 00:11:47.229
that you can annotate the source movie first
and then once you go through the compression

00:11:47.230 --> 00:11:51.420
and all the steps it will automatically pass that
amount of information on to the other movies.

00:11:51.419 --> 00:11:55.949
So I'm really happy about that, the other
thing that is new in Compressor is the ability

00:11:55.950 --> 00:12:04.720
to separately adjust volume control, because in my
experience I've noticed that the audio level drops

00:12:04.720 --> 00:12:10.740
after the encoding takes place and you can essentially
over drive it slightly during the encoding process, although

00:12:10.740 --> 00:12:14.950
when it comes back out your level
should be the same as where you started.

00:12:14.950 --> 00:12:20.870
So that concludes my particular segment of it, and of
course I will be here for Q and A and hopefully if we get,

00:12:20.870 --> 00:12:25.720
if I can hop back up here and run around I'll
show you those two files, show you the comparison

00:12:25.720 --> 00:12:31.509
of what I was talking about how to
refine the encoding a little bit tighter.

00:12:31.509 --> 00:12:39.720
( Applause )

00:12:39.720 --> 00:12:42.649
>> Oh I did have them.

00:12:45.070 --> 00:12:46.860
Clicker. I am clickerless.

00:12:50.129 --> 00:12:51.389
Yeah.

00:12:51.389 --> 00:12:51.919
>> Podium.

00:12:51.919 --> 00:12:54.110
>> Podium.

00:12:54.110 --> 00:13:00.769
>> Nate: Hi I am Nate Caplin from
American Electric Power in Columbus, Ohio.

00:13:00.769 --> 00:13:04.289
This will take us forward, great.

00:13:04.289 --> 00:13:06.899
Okay so we are here to talk a little about our workflow.

00:13:06.899 --> 00:13:11.600
American Electric Power's a company of about
20,000 employees spread across 11 states

00:13:11.600 --> 00:13:14.980
and we use QuickTime extensively on
our corporate intranet called AEP NOW

00:13:14.980 --> 00:13:17.920
which you're are seeing the homepage of right now.

00:13:17.919 --> 00:13:23.000
This is the homepage for all AEP employees,
their web browser whenever they launch it up.

00:13:23.000 --> 00:13:30.470
We've intergraded video into this site for training,
for safety, for communication from executives

00:13:30.470 --> 00:13:36.509
to employees via live web casts etc. As you can see there
is a tab called AEP-TV and when you click that you get

00:13:36.509 --> 00:13:43.539
to this page which has our featured videos as well
as a video library by categories here at the right.

00:13:43.539 --> 00:13:48.879
All of these are QuickTime videos and
this is all driven by a database back end.

00:13:48.879 --> 00:13:54.649
When you finally get to an actual video on the site
you see this large poster frame and a description

00:13:54.649 --> 00:14:01.439
and if you click the Watch Video button it will launch up
the QuickTime player and it uses a QuickTime reference movie

00:14:01.440 --> 00:14:07.700
that detects the bandwidth using QuickTime 7's automatic
bandwidth detection feature and feeds them a small

00:14:07.700 --> 00:14:11.290
or large file depending on the bandwidth at their location.

00:14:11.289 --> 00:14:15.949
That's what it looks like to the users, now let's
talk about how we do this in our production workflow.

00:14:15.950 --> 00:14:24.350
We are going to talk about distributed coding with Xsan
and QuickTime publishing automation with AppleScript

00:14:24.350 --> 00:14:30.529
so I'm going to walk you through building and using
a managed Qmaster cluster which is what we do.

00:14:30.529 --> 00:14:37.230
I'm going to step you through each of the applications
that are used in building a cluster and then I am going

00:14:37.230 --> 00:14:42.080
to turn it over to John McClintock who is
a streaming media developer on our team

00:14:42.080 --> 00:14:45.650
to actually demonstrate to you how we automate our workflow.

00:14:45.649 --> 00:14:55.069
These are some of the Apple technologies that we
use and this is our topography of our cluster.

00:14:55.070 --> 00:15:03.390
We have a seven node, we have seven workstations, one
of them is John's personally and the others are used

00:15:03.389 --> 00:15:06.389
by our video procedures and our video manager.

00:15:06.389 --> 00:15:11.419
They're all Final Cut Pro video editing workstations
that have the Qmaster services on them.

00:15:11.419 --> 00:15:19.069
There all connected together via both an Ethernet network
and Xsan fibre channel network with a shared SAN volume

00:15:19.070 --> 00:15:22.900
that they all use from right within final cut.

00:15:22.899 --> 00:15:28.919
So when they finish a file they actually save it onto the
SAN volume and let us know that it is ready to be encoded

00:15:28.919 --> 00:15:33.279
and then the process that John will demo for you gets started.

00:15:33.279 --> 00:15:43.829
We do have one Xserve that acts as our Qmaster services
cluster controller machine that does little else in the network
in addition

00:15:43.830 --> 00:15:47.830
to the other Xserver that we have
that are QuickTime streaming servers

00:15:47.830 --> 00:15:53.320
so that the QuickTime streaming server is
obviously are the ones that distribute the files

00:15:53.320 --> 00:15:58.350
on demand and live to our users throughout.

00:15:58.350 --> 00:16:05.909
Okay so starting off in the Qmaster system preferences pane
under the Setup tab to make a managed cluster you have to go

00:16:05.909 --> 00:16:14.089
to each node on your cluster and turn on services only
there at the top part, which I guess do we have a,

00:16:14.090 --> 00:16:19.610
on the controller you have to select
services and cluster controller together.

00:16:19.610 --> 00:16:25.759
Now there's this option called QuickCluster with services
which is for making kind of add hoc clusters but we found

00:16:25.759 --> 00:16:32.480
that at Qmaster's more reliable and more rock
solid if you use a manage cluster instead.

00:16:32.480 --> 00:16:39.320
In this pane you can also set up a password so that
the administrator must enter a password for each node

00:16:39.320 --> 00:16:40.920
that they'd like to add into their cluster.

00:16:40.919 --> 00:16:48.120
On the advance tab, this is a key
thing for using an Xsan cluster.

00:16:48.120 --> 00:16:52.220
You have to set this setting here called cluster storage.

00:16:52.220 --> 00:16:54.620
You see there it's /Volumes/Video/qmaster.

00:16:54.620 --> 00:17:03.220
Video is the name of the Xsan volume and it's key that
every node have the same exact path to the cluster storage

00:17:03.220 --> 00:17:08.600
and that path must be somewhere on the
Xsan volume for you to take advantage

00:17:08.599 --> 00:17:12.009
of the faster speed that you get with an Xsan.

00:17:12.009 --> 00:17:18.759
Because what actually happens is that instead
of Qmaster distributing pieces of the file

00:17:18.759 --> 00:17:25.339
or actually the entire source file to every node before it
begins encoding, all the nodes begin encoding immediately

00:17:25.339 --> 00:17:29.679
on the same file that is already
on the Xsan shared by all of them.

00:17:29.680 --> 00:17:36.120
The status option, to show that on the menu bar, it
puts a little status icon on the top right corner

00:17:36.119 --> 00:17:41.579
of the person's screen to let them know when their
machine is being used for a cluster encoding job.

00:17:41.579 --> 00:17:46.649
This is important because if your nodes are actually
production machines that people are using Final Cut

00:17:46.650 --> 00:17:51.980
or Motion, they may want to opt out so that their
machine is not part of the cluster for a period

00:17:51.980 --> 00:17:54.700
of time that they're doing some intense job.

00:17:54.700 --> 00:18:00.360
So if they see that, it's a reminder that they can go
up there and open up the Qmaster tab and turn it off.

00:18:00.359 --> 00:18:04.709
Qadministrator is an application
that ships with Final Cut Studio.

00:18:04.710 --> 00:18:12.180
Once you've turned on Qmaster services on all your nodes
you have to go to Qadministrator and create a new cluster

00:18:12.180 --> 00:18:18.460
and drag and drop the machines into it, which would appear
at the bottom part of the window before its been setup.

00:18:18.460 --> 00:18:24.120
After that it's a simple matter of giving the
cluster a name and applying your settings.

00:18:24.119 --> 00:18:28.949
Then inside of Compressor right here
you have your setting set up just

00:18:28.950 --> 00:18:32.529
as you would any other setting
you are doing like Doug was showing.

00:18:32.529 --> 00:18:39.549
The two key things you want to look for are this Allow
Job Segmenting which is in each preset in Compressor.

00:18:39.549 --> 00:18:46.079
If you check that, what that allows Compressor to do is to
divvy up a single file and send pieces of that source file

00:18:46.079 --> 00:18:53.710
to each of the nodes to work on so that, say if you
have a longer duration file, ten minutes or more,

00:18:53.710 --> 00:18:56.220
that one file will get encoded a lot faster.

00:18:56.220 --> 00:19:02.049
If you don't check that box, the Qmaster
cluster will only speed up the encoding

00:19:02.049 --> 00:19:06.299
of multiple versions of the same output or multiple files.

00:19:06.299 --> 00:19:09.750
And finally when you submit the job
at the bottom left corner you have

00:19:09.750 --> 00:19:13.589
to select the name the cluster instead of this computer.

00:19:13.589 --> 00:19:16.819
Okay so now I am going to turn it over
to John McClintock who will demo this.

00:19:16.819 --> 00:19:21.569
If we can, oh we don't need to switch
to a demo machine, just hit next.

00:19:21.569 --> 00:19:22.210
>> John: All righty.

00:19:22.210 --> 00:19:32.700
I'm going to run through an example of our sort of default
workflow when everything is going simple and our editors,

00:19:32.700 --> 00:19:40.610
when they've completed a project, drop their files into a
masters folder and we're just dragging that into Compressor

00:19:40.609 --> 00:19:46.639
and selecting a file, we like to do this manually
so that we can verify aspect ratio and make sure

00:19:46.640 --> 00:19:50.390
that the project will work well with our default settings.

00:19:50.390 --> 00:20:02.550
This one's a 16-9 project so I'm just going to drag a
set of 16-9 settings on to the project and I'm going

00:20:02.549 --> 00:20:08.769
to check a sort of before and after and you can
see there is a crop being applied and so forth.

00:20:08.769 --> 00:20:15.160
Then we will pretty much be able to select the cluster

00:20:15.160 --> 00:20:20.950
which in our case is called a Newton
Cluster and we'll submit the job.

00:20:20.950 --> 00:20:32.759
The batch monitor pops up and the fact that
the status says Processing is a good thing,

00:20:32.759 --> 00:20:36.359
a bad thing is when it says Waiting
for a long period of time.

00:20:36.359 --> 00:20:41.159
Hitting the twirlies gives you some status of the segments.

00:20:41.160 --> 00:20:45.150
There is as far as I know which
segment belongs to which nodes.

00:20:45.150 --> 00:20:52.830
So if you are having a problem with a particular
node, it's not always oblivious which one.

00:20:52.829 --> 00:21:02.509
When the batch is complete, it dumps the files
into a destination directory and we do a little bit

00:21:02.509 --> 00:21:07.529
of extra processing using an AppleScript afterwards.

00:21:07.529 --> 00:21:19.389
So I am going to select the files in the destination
directory, queue the selection of the files and locate them

00:21:19.390 --> 00:21:27.740
in my droplet and we just drag the files onto the
application and it is going to actually rehint to the movies

00:21:27.740 --> 00:21:34.630
because we need to do that and it mounts the
QuickTime servers if they are not already mounted.

00:21:34.630 --> 00:21:41.400
Copies the rehinted movies onto those
servers and one onto an archive directory

00:21:41.400 --> 00:21:48.840
and right now its building a reference movie, builds
XML and then makes a reference movie out of that

00:21:48.839 --> 00:21:52.689
and then uses Fetch to put it up to production.

00:21:52.690 --> 00:22:03.299
So the is the admin of our content management
system and it's pretty much active server pages,

00:22:03.299 --> 00:22:10.470
classic active server pages and there's
various fields that have prepopulated.

00:22:10.470 --> 00:22:16.509
The critical thing is the file name and we
use filing naming conventions so that they work

00:22:16.509 --> 00:22:25.879
on scripts throughout the entire production process and
those just are the, there's a file stem that is the name

00:22:25.880 --> 00:22:32.080
which has a library number and so forth and then
there's an extension that tell us the size of the file

00:22:32.079 --> 00:22:41.369
and the aspect ratio and all that gets used in various
scripts to populate the user end of things appropriately.

00:22:41.369 --> 00:22:50.500
And we're just sort of wondering around the screen.

00:22:50.500 --> 00:23:00.390
The users are able to download the video which we find
reduces DVD orders they're able to order DVD's online.

00:23:00.390 --> 00:23:06.420
I've set this clip to not visible, it will still run
in the interface but it doesn't show up in searches

00:23:06.420 --> 00:23:10.250
and it doesn't show up in category listings.

00:23:10.250 --> 00:23:19.660
So I sort of verify the settings in the admin and then we'll
go back to the admin screen and launch the chooser page

00:23:19.660 --> 00:23:24.120
that the video shows up on and this
is what the user will end up seeing.

00:23:24.119 --> 00:23:35.479
And we'll just click the Watch Video button,
eventually, and verify that we do in fact have video.

00:23:35.480 --> 00:23:41.569
You may have noticed a little pop up window
that opened and closed that's our stat tracker

00:23:41.569 --> 00:23:49.319
and that gives us some statistics on hits of the
video, so we do have picture and we have sound

00:23:49.319 --> 00:23:55.089
so at least we know the video is out there on the servers.

00:23:56.359 --> 00:24:04.529
Now when we, looking at the page you see that sort of
default graphic that has nothing to do with the video,

00:24:04.529 --> 00:24:11.789
so we want to populate the page with
something that is related to the project,

00:24:11.789 --> 00:24:20.819
so using another AppleScript we select an appropriate
frame, something that will sort of suggest the contents

00:24:20.819 --> 00:24:31.069
and run another script out of the script menu and
that's going to export a still frame out of the video.

00:24:31.069 --> 00:24:42.389
Open it in Photoshop with a preset crop and there's some
human intervention to sort of select where that goes.

00:24:42.390 --> 00:24:54.220
And for our category listing we use a small 65 pixel
square thumbnail that is made in the same script.

00:24:54.220 --> 00:25:00.289
So those are being saved out to the, and
Fetched up to the production servers.

00:25:00.289 --> 00:25:09.740
So we are just going to go back to
the browser and refresh the page

00:25:09.740 --> 00:25:20.240
and we should have pretty much ready
for use and publication and so forth.

00:25:22.529 --> 00:25:31.569
So the Qmaster cluster has been really vary reliable for
us in general but it defiantly does go down now and then.

00:25:31.569 --> 00:25:35.099
There are a couple things that
are like absolutely necessary.

00:25:35.099 --> 00:25:39.490
One is that all the nodes have to be
running the same version of QuickTime.

00:25:39.490 --> 00:25:45.120
They all have to be using the same
Xsan folder for cluster storage.

00:25:45.119 --> 00:25:50.539
The main reason for failure seems
to be if one of the nodes has a hang

00:25:50.539 --> 00:25:57.519
for other reasons while it's crunching,
the whole thing will go down.

00:25:57.519 --> 00:26:05.000
And what that looks like is in the batch monitor the thing
will be waiting and usually by then you can identify which,

00:26:05.000 --> 00:26:10.859
that's there's one node in particular that is
waiting, everything else might be 98 percent done.

00:26:10.859 --> 00:26:17.969
But anyway it's easy to fix, you go
to the cluster controller machine

00:26:17.970 --> 00:26:30.190
and go into its Qmaster preferences stop services
and it says 10 minutes and you say no waiting zero

00:26:30.190 --> 00:26:33.900
and you stop the services, you are
not going to recover them anyway.

00:26:33.900 --> 00:26:40.330
And then click options "Start Services" and this is
sort of hidden, it took me a long time to figure

00:26:40.329 --> 00:26:47.980
out the option-click method to reset
services and then start the services again.

00:26:47.980 --> 00:26:53.309
And then you need to go back into the Qadministrator and
rebuild the cluster,

00:26:53.309 --> 00:26:58.619
which is not a big deal I mean you just
rename it and drag the nodes into the thing

00:26:58.619 --> 00:27:04.659
and so forth so it's a vary straight forward process.

00:27:04.660 --> 00:27:12.060
There's a line on software update here which is
probably confusing, the key to software update is

00:27:12.059 --> 00:27:17.000
to not update any of your nodes ahead of the Xsan.

00:27:17.000 --> 00:27:25.589
The Xsan metadata controllers and so forth
particularly need to be the last word,

00:27:25.589 --> 00:27:29.669
so you need to update everything else to match them.

00:27:29.670 --> 00:27:32.710
And you should do those all at once pretty much.

00:27:32.710 --> 00:27:41.529
You don't want to have different software
versions on different volumes of the whole thing.

00:27:41.529 --> 00:27:48.599
When the script is running its building a
reference movie, this is just a snippet of.

00:27:48.599 --> 00:27:52.289
We're selecting different protocols
for different lengths of videos.

00:27:52.289 --> 00:27:58.430
If we have, we like to do progressive download,
but it doesn't work well with long files

00:27:58.430 --> 00:28:07.500
and being a corporation we are able to produce amazingly
long videos and you don't want them progressively downloaded.

00:28:07.500 --> 00:28:12.920
So this little clip here is just saying
that if the clip is less then 10 minutes,

00:28:12.920 --> 00:28:17.120
it's going to be progressively downloaded,
we'll have its protocol set to http,

00:28:17.119 --> 00:28:21.359
if it's longer then 10 minutes it's
protocol is being set to rtsp.

00:28:21.359 --> 00:28:26.949
>> And I might add that the same machines that run our
QuickTime streaming server are also running web services

00:28:26.950 --> 00:28:33.180
with the same home directory so one can access the same
file by progressive download or rtsp streaming just

00:28:33.180 --> 00:28:37.060
by changing the stem, which is all this does.

00:28:37.059 --> 00:28:44.059
>>Nate: Yeah and this is just a snippet
of how the XML text is being written

00:28:45.369 --> 00:28:56.879
and here's what the XML actually looks like, and this XML
is saved as a, using the file stem underscore REF.QTRM

00:28:56.880 --> 00:29:05.270
and then the QTRM file is opened with Peter Hoddie's
XMLtoRefMovie which is available

00:29:05.269 --> 00:29:10.160
at this website and is the only darn way
I can think of to do this thing.

00:29:10.160 --> 00:29:12.330
But it works great.

00:29:12.329 --> 00:29:19.829
So what it will make is a movie that will be
called something like FILESTEM_REF.MOV and then we,

00:29:19.829 --> 00:29:31.629
the script changes the name to a .QTL for maybe vestigial
reasons, we use to be more concerned about hijacking

00:29:31.630 --> 00:29:38.150
of videos by particularly WinAmp and
Real Player occasionally glom things.

00:29:38.150 --> 00:29:45.530
But nothing gloms a QTL file, not even
Safari knows what to do with it a QTL file.

00:29:45.529 --> 00:29:53.339
So we've had pretty good success really
with our Compressor Qmaster experience.

00:29:53.339 --> 00:29:57.000
>> Yeah I mean overall it has really sped up our process.

00:29:57.000 --> 00:30:02.450
It use to be, we use to use Cleaner until
about maybe a year and half ago and when one

00:30:02.450 --> 00:30:06.120
of our video produces would finish editing a
project, they'd tell us it is ready to be encoded.

00:30:06.119 --> 00:30:11.869
If they gave us a file that was five or ten minutes in
duration, we'd say well we might be able to have it posted

00:30:11.869 --> 00:30:18.109
for you in two or three hours, you know to grind out the couple of
versions that we do because we were doing it on one machine

00:30:18.109 --> 00:30:23.219
and now five or ten minute file, we can have
it posted in a matter of ten or fifteen minutes

00:30:23.220 --> 00:30:29.600
because our cluster can crunch through it faster
than real time creating multiple versions.

00:30:29.599 --> 00:30:36.019
More over we have a lot of these very long movies, 30 minutes
even an hour long, boring legal lectures or something

00:30:36.019 --> 00:30:41.559
and these things use to take a day or two to
encode you know on a machine over a weekend

00:30:41.559 --> 00:30:44.589
and now we can get them done in
a matter of a couple of hours.

00:30:44.589 --> 00:30:51.069
So like Doug said, Compressors really helped out our workflow
and we are really looking forward to using Compressor 3,

00:30:51.069 --> 00:30:57.169
which we hope will take even better advantage of our
multiple core workstations to speed it up even more.

00:30:57.170 --> 00:30:58.910
So thanks a lot.

00:30:58.910 --> 00:31:03.130
And we'll do questions after everyone.

00:31:03.130 --> 00:31:05.240
( Applause )

00:31:05.240 --> 00:31:08.509
>> Oh next David Singer from Apple.

00:31:08.509 --> 00:31:17.579
( Pause in speaking. )

00:31:17.579 --> 00:31:21.839
>> David: Hi so now for a quick change of
subject, slight change of subject perhaps.

00:31:21.839 --> 00:31:25.429
I'm going to try and deal with the
question that we know a lot of you ask.

00:31:25.430 --> 00:31:30.660
How do I make a media file that will play
on my friend's iPod or that new iPhone

00:31:30.660 --> 00:31:34.080
or the Apple TV or the Heads up display in the new iCar.

00:31:34.079 --> 00:31:36.470
Did we announce the new iCar yet?

00:31:39.460 --> 00:31:45.130
So there's two basic ways that we establish
suitability of a file and you could look at a file

00:31:45.130 --> 00:31:48.070
to establish whether it's suitable for a particular usage.

00:31:48.069 --> 00:31:50.960
You can look at the movie atom in the file.

00:31:50.960 --> 00:31:57.029
The movie atom contains all the declarations of
the files, the structure, the codecs it uses,

00:31:57.029 --> 00:32:01.200
whether it's self contained, you can
work out how interleaved it is and so on.

00:32:01.200 --> 00:32:05.769
And you can check to see whether this file
actually conforms to some specifications

00:32:05.769 --> 00:32:09.950
for say a particular device or
whatever so you can scan that.

00:32:09.950 --> 00:32:13.200
Alternatively there is a way of signing a file if you look

00:32:13.200 --> 00:32:16.500
in our files you will see there is a thing
called file-type atom at the front of them,

00:32:16.500 --> 00:32:21.140
it has a list in it of what are called brands,
those brands claim that the file is conformal

00:32:21.140 --> 00:32:28.530
with a particular specification, so you can bypass the check
for movie atom by scanning it, by just looking for a brand

00:32:28.529 --> 00:32:32.180
that asserts what you were hoping to
find, and that makes life much faster

00:32:32.180 --> 00:32:35.430
and obliviously it's something we recommend.

00:32:35.430 --> 00:32:39.180
So these specifications, what do they look like?

00:32:39.180 --> 00:32:43.269
Well there's two, going to be two basic classes
of these specifications we'll be publishing.

00:32:43.269 --> 00:32:50.670
There's class-based specifications and device specific
specifications, now the class-based ones are fairly easy

00:32:50.670 --> 00:32:55.840
to understand, they are going to rely on publicly defined
features of the files, so things you can easily check

00:32:55.839 --> 00:33:00.279
that rely on standards and documents you
can pull down from Apple and other places.

00:33:00.279 --> 00:33:05.730
So for example what codecs do you use, you
know we don't process Cinepak on the iPod

00:33:05.730 --> 00:33:08.960
for example that would be a bad codec to choose.

00:33:08.960 --> 00:33:13.400
The profiles and the levels of the
codecs for MPEG codecs for example,

00:33:13.400 --> 00:33:16.670
do we do main profiles on this
device or is it just baseline?

00:33:16.670 --> 00:33:21.660
What level do we go to, which tends
to limit bit rate and screen size?

00:33:21.660 --> 00:33:23.480
What file for my features are present?

00:33:23.480 --> 00:33:24.960
Is the file self contained?

00:33:24.960 --> 00:33:27.880
That generally helps if you are you are
only going to put the file on another device

00:33:27.880 --> 00:33:31.000
because if it's self contained you got the media as well.

00:33:31.000 --> 00:33:31.890
Is it interleaved?

00:33:31.890 --> 00:33:33.520
Is it in time order and so on?

00:33:33.519 --> 00:33:38.639
Those are sometimes important devices which
don't have a lot of bandwidth to their storage.

00:33:38.640 --> 00:33:40.840
How fast, what's the bit rate of the file?

00:33:40.839 --> 00:33:42.869
How big can the file be and so on?

00:33:42.869 --> 00:33:47.619
So specifications listing things that you can obviously
work out pretty easily from looking at the file

00:33:47.619 --> 00:33:52.699
and indeed the class-based one have
unprotected and protected variants

00:33:52.700 --> 00:33:58.309
Clearly Apple devices tend to be able to play files
that are protected with Apple's FairPlay system,

00:33:58.309 --> 00:34:03.549
but other devices can't and in case you are looking at
files and you want to go why don't I just slide along right

00:34:03.549 --> 00:34:09.690
behind Apple so I can use the same encoding that people are
using for the iPhone but just an unprotected version of it,

00:34:09.690 --> 00:34:14.570
then you can look for the tag that says this
is conforming to an unprotected file.

00:34:14.570 --> 00:34:20.100
And the class-based ones we're intending,
hoping that they will be supported by one

00:34:20.099 --> 00:34:22.339
or more Apple devices over a period of time.

00:34:22.340 --> 00:34:26.850
So if you are building a library and you don't want
to be re-encoding your library every time we come

00:34:26.849 --> 00:34:31.650
out with a new hip device then maybe you want to be
targeting a class-based specification in the hopes

00:34:31.650 --> 00:34:35.570
that we will continue to support
that class in our new devices.

00:34:35.570 --> 00:34:38.380
So let's look at some examples of general classes here.

00:34:38.380 --> 00:34:41.369
Basic Audio, something that'll play on the iPod Shuffle

00:34:41.369 --> 00:34:46.529
and pretty well everything else,
something that's a portable audio-only file.

00:34:46.530 --> 00:34:52.280
Low resolution video, something that will play on the first
generation iPod Video the one we're currently shipping

00:34:52.280 --> 00:34:59.740
and the way we initially published it, you know, the 320
by 240 size that's very portable, very standards based.

00:34:59.739 --> 00:35:05.399
The basic specs for standard video, extended video,
and then probably a class also for desktop video,

00:35:05.400 --> 00:35:10.789
something that we don't actually restrict the bit rates and
the file sizes, because our desktop machines, they're brave.

00:35:10.789 --> 00:35:15.980
They'll attack anything, even if
they drop frames occasionally.

00:35:15.980 --> 00:35:20.490
Now let's contrast that with the
device specific specifications.

00:35:20.489 --> 00:35:27.969
This is where you realize that you want to make a file that
works perfectly on just one device, on a specific device.

00:35:27.969 --> 00:35:30.980
And often this is because all this
is stretching the limits of a device.

00:35:30.980 --> 00:35:35.980
And so this is, the classic example of this is
getting standard def video out of the iPod Video.

00:35:35.980 --> 00:35:39.230
As I said when we first launched
the iPod Video, we didn't tell,

00:35:39.230 --> 00:35:43.639
we didn't actually try to do standard def
video on it, we were doing 320 by 240 on it.

00:35:43.639 --> 00:35:46.609
We realized that we could, in fact,
get standard def video out of it.

00:35:46.610 --> 00:35:50.130
But the recipe to get it is a little tricky.

00:35:50.130 --> 00:35:55.410
You have to tune the bitstream so that they
just get through the decoding process on that.

00:35:55.409 --> 00:36:00.420
So this is the famous low complexity mode that we
publish, but we don't actually tell you what it means,

00:36:00.420 --> 00:36:04.119
and we know that, and this is what I'm telling you
today, is that we know that you don't know what it means

00:36:04.119 --> 00:36:05.569
and we're going to tell you what it means.

00:36:05.570 --> 00:36:07.740
We are working on the documentation for it.

00:36:07.739 --> 00:36:13.769
On the UUID tag that you'll find documented in some sense
or at least mentioned quite a lot of blogs and websites

00:36:13.769 --> 00:36:24.250
around the internet, that is indeed the embodiment of that
claim, of that low complexity tag, seeing that UUID tag.

00:36:24.250 --> 00:36:26.809
That UUID tag is a bitstream tag.

00:36:26.809 --> 00:36:33.329
It claims that the bitstream respects the limits
of and will play on a very particular device.

00:36:33.329 --> 00:36:39.269
Now, as I say, getting these things to work when you're
stretching the limits of a device is sometimes a little,

00:36:39.269 --> 00:36:44.820
ohhhh, so we will publish suggested
ways that you can achieve this.

00:36:44.820 --> 00:36:46.470
We'll probably have to simplify.

00:36:46.469 --> 00:36:51.379
The real recipe may be as complicated as counting the
number of motion vectors over a half second interval

00:36:51.380 --> 00:36:55.650
and multiplying that by 1.3 and subtracting the number
of 4 by 4 macro blocks, adding in the number of 8

00:36:55.650 --> 00:37:00.559
by 8 macro blocks, dividing by the phase of the
moon and checking that it doesn't exceed 237.

00:37:00.559 --> 00:37:04.509
Well, that's more than we're going
to write in a specification.

00:37:04.510 --> 00:37:08.410
( Applause )

00:37:08.409 --> 00:37:11.519
>> David: We'll write something that
is actually comprehensible, we hope.

00:37:11.519 --> 00:37:16.500
But, you and we might experiment with what in fact works.

00:37:16.500 --> 00:37:20.409
You know? If you can prove to yourself, to
your own satisfaction, that my software,

00:37:20.409 --> 00:37:26.199
that your software writes files that actually do work on the
iPod Video, even though it doesn't quite follow the recipe

00:37:26.199 --> 00:37:28.289
that we publish, then bully for you, that's great.

00:37:28.289 --> 00:37:34.159
Go ahead. Now the tag, the UUID tag that I just
mentioned, you have to put that in the movie atom.

00:37:34.159 --> 00:37:37.859
But it's making a claim about the nature
of the bitstream and the rest of the file,

00:37:37.860 --> 00:37:41.970
which as I said at the beginning there, you'll notice
that we didn't look at the rest of the file when we looked

00:37:41.969 --> 00:37:47.119
to see whether a file was suitable for a
device, we're just looking at the movie atom

00:37:47.119 --> 00:37:50.139
and the tags and the brand and the file type atom.

00:37:50.139 --> 00:37:55.329
So the tag is a UUID atom, specific
content in the sample description,

00:37:55.329 --> 00:37:59.179
in the movie atom saying something about the bitstream.

00:37:59.179 --> 00:38:02.569
So summary, let's see if we can
go through this very carefully.

00:38:02.570 --> 00:38:07.760
The file tags, the brand, they assert and
they confirm conformity, you see that?

00:38:07.760 --> 00:38:13.730
You can go man, the person who wrote this file claims
that it conforms to this spec, I don't need to check.

00:38:13.730 --> 00:38:19.099
If you don't see the tag you wanted, the
brand you wanted, the absence doesn't deny it.

00:38:19.099 --> 00:38:21.980
You're going to have to scan the movie item to check.

00:38:21.980 --> 00:38:22.900
Why do we say this?

00:38:22.900 --> 00:38:27.650
Well, maybe the software that wrote this
file wasn't aware of that specification.

00:38:27.650 --> 00:38:30.920
When the person wrote that software,
maybe that specification wasn't available.

00:38:30.920 --> 00:38:35.059
So you want to grandfather files that
will in fact work on a device if you can,

00:38:35.059 --> 00:38:39.019
so check to see whether the file will work.

00:38:39.019 --> 00:38:41.820
Now, you can have device specific file tags here.

00:38:41.820 --> 00:38:48.150
So a file tag will say the entire file has been tuned to
work on this device and you're only allowed to put that in

00:38:48.150 --> 00:38:53.190
if the matching bitstream tag is present in the movie atom
saying the bitstreams have been tuned for that device.

00:38:53.190 --> 00:38:58.510
So the presence of that bitstream tag
claims playability on a particular device.

00:38:58.510 --> 00:39:01.970
But unlike the file level tags,
the absence of that tag means

00:39:01.969 --> 00:39:05.829
that you cannot assume playability
and it's not easily checked either.

00:39:05.829 --> 00:39:09.920
Because putting it in would mean that you would have
to decode say the video and check the number of 4

00:39:09.920 --> 00:39:14.450
by 4 macro blocks, multiplied by 1.3 and minus the
number of 8 by 8 macro blocks and divided by the phase

00:39:14.449 --> 00:39:18.319
of the moon does not in fact exceed
237 over a half second interval.

00:39:18.320 --> 00:39:22.740
And you're not going to do that every time you want
to put a file on an iPod or an iPhone or something.

00:39:22.739 --> 00:39:29.299
That involves scanning the entire file and basically running
a decoder in almost in debugging mode to check that limit.

00:39:29.300 --> 00:39:32.410
So if you can't see the bitstream tag, you give up.

00:39:32.409 --> 00:39:38.500
It clearly wasn't claiming to be compatible, so
there's a good chance it's not, in fact, compatible.

00:39:38.500 --> 00:39:43.340
So, if your software creates files, if you are a
software author and you're writing files out there,

00:39:43.340 --> 00:39:47.590
if you make a stream, obviously, that will work on
a specific device, then put in that bitstream tag

00:39:47.590 --> 00:39:51.150
because nobody is going to put it in after the fact.

00:39:51.150 --> 00:39:55.780
Then look at the movie atom and look at all
the specifications your software is aware of

00:39:55.780 --> 00:40:00.850
and put in the signatures of all the specifications
that you are aware of, all the brands that correspond

00:40:00.849 --> 00:40:04.449
to those specifications that the
file, in fact, does conform to.

00:40:04.449 --> 00:40:10.219
This is trying to catch as many people as you can and
giving them a fast in so that they see the specification

00:40:10.219 --> 00:40:14.480
and they go okay, this file works on my
device, I don't have to check any further.

00:40:14.480 --> 00:40:20.340
Now please, please, please, please if you don't know
what a tag means, a bitstream tag or a file level tag,

00:40:20.340 --> 00:40:23.640
if you don't know what it means, don't put it in the file.

00:40:23.639 --> 00:40:29.529
You're making an unsubstantiated, probably false,
misleading, and almost certainly an unhelpful claim.

00:40:29.530 --> 00:40:34.269
You're claiming that you've checked that this file
conforms to a specification you haven't even read.

00:40:34.269 --> 00:40:37.389
So please, people around the internet
are suggesting on blogs man,

00:40:37.389 --> 00:40:40.259
if you just copy this UUID atom into here, it seems to work.

00:40:40.260 --> 00:40:44.720
Well it will work some of the time, of course, because
by luck, you will hit some bitstreams that do, in fact,

00:40:44.719 --> 00:40:49.099
conform to the limits, but you're telling your
users, or the people that are reading your blogs,

00:40:49.099 --> 00:40:52.150
that it'll work all the time, and that's probably not true.

00:40:53.269 --> 00:40:56.780
So if you're reading media files, flip it around.

00:40:56.780 --> 00:40:59.230
Look for the tags, the brand you support.

00:40:59.230 --> 00:41:00.460
If you see that, you're done.

00:41:00.460 --> 00:41:01.429
That's a quick check.

00:41:01.429 --> 00:41:06.139
You just can do the checks of these four character
codes and if you find one that you support

00:41:06.139 --> 00:41:08.269
and the file conforms to that, you're in.

00:41:08.269 --> 00:41:09.159
We're done.

00:41:09.159 --> 00:41:12.529
Now, if none of them are present,
then do the second level check.

00:41:12.530 --> 00:41:15.240
Scan the movie atom, look for what your device requires.

00:41:15.239 --> 00:41:20.589
Now, for Apple, that means that we may be looking
for bitstream tags in the sample description

00:41:20.590 --> 00:41:22.950
if the file doesn't meet suitable class space limits.

00:41:22.949 --> 00:41:29.269
Obviously if it's an iPod Video and you've
put in simple video, the 320 by 240,

00:41:29.269 --> 00:41:37.429
we don't need to check for the bitstream tag because
it's already a class that the iPod Video supports.

00:41:37.429 --> 00:41:39.879
So, I'm sure you're going to want more information.

00:41:39.880 --> 00:41:47.710
We are going to publish details of the brands, the UUID
tags, the low complexity modes, and how to make them.

00:41:47.710 --> 00:41:52.530
And we're aware of the lack of that documentation and
we realize that you can see that we're doing something

00:41:52.530 --> 00:41:57.400
and we're not telling you what it is and that some of
you are trying to guess and trying to work around that.

00:41:57.400 --> 00:41:59.329
That's not a position that we like to be in.

00:41:59.329 --> 00:42:00.380
We will document this.

00:42:00.380 --> 00:42:03.610
We are working on it and we're
apologetic that we haven't done it so far.

00:42:03.610 --> 00:42:05.809
And Ed Agabeg is your main contact, of course.

00:42:05.809 --> 00:42:10.400
If you have questions after the event,
then he will find the right people

00:42:10.400 --> 00:42:14.550
and harass them to get the documentation that you need.

00:42:14.550 --> 00:42:19.820
Then, coming up this week, if you're entered
in coding, you've got to go and see how

00:42:19.820 --> 00:42:24.100
to create integrated workforce solutions with Final
Cut Pro, because that's the greatest tool out there

00:42:24.099 --> 00:42:26.500
and that's the most fun you're going to have this week.

00:42:26.500 --> 00:42:31.110
Next, after that, however, if you want to have fun
mastering QuickTime Digital Video and creating effective,

00:42:31.110 --> 00:42:34.550
sophisticated podcasts, don't create boring podcasts.

00:42:34.550 --> 00:42:36.760
Create effective, sophisticated podcasts.

00:42:36.760 --> 00:42:39.500
Come to Presidio on Friday.

00:42:39.500 --> 00:42:42.059
Likewise there are labs here that we can help you with.

00:42:42.059 --> 00:42:46.659
Digital video preprocessing, media
encoding and media delivery, and indeed,

00:42:46.659 --> 00:42:51.099
tomorrow you could hit the QuickTime lab, the media
and graphics lab and find out about standards,

00:42:51.099 --> 00:42:53.679
where I'll be there and you can come
and ask me about all the hard questions

00:42:53.679 --> 00:42:55.440
about international standards for multimedia.