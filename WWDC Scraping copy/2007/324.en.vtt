WEBVTT

00:00:20.089 --> 00:00:22.629
>> Welcome to bug reporting best practices.

00:00:22.629 --> 00:00:26.449
I'm Paul Schreiber, a software engineer
on the Mac OS X team.

00:00:26.449 --> 00:00:30.199
Today we're gonna talk about what
happens when things go wrong.

00:00:30.199 --> 00:00:35.530
And when things go wrong in software we call that a bug.

00:00:35.530 --> 00:00:38.609
So, what do you do when you see a bug?

00:00:38.609 --> 00:00:41.399
Well, when you see a bug you write a bug report.

00:00:41.399 --> 00:00:46.299
You write a bug report because you want something
to happen, you want some action to happen.

00:00:46.299 --> 00:00:52.939
And action means different things to different people.

00:00:52.939 --> 00:00:59.949
And sometimes when your computer isn't working you wanna
take different kinds of action against your computer.

00:00:59.950 --> 00:01:04.980
But instead what we wanna encourage
you to do is to write a bug.

00:01:04.980 --> 00:01:09.170
And why is it that we file bugs?

00:01:09.170 --> 00:01:13.960
Well, we file bugs because we want to make better software.

00:01:13.959 --> 00:01:18.659
And if you file a bug against your own
product it helps make your software better.

00:01:18.659 --> 00:01:27.229
And when you file bugs with us at
Apple, it helps us improve Mac OS X.

00:01:27.230 --> 00:01:31.270
So, what is it I mean when I say a bug?

00:01:31.269 --> 00:01:35.250
When it comes to software bug can mean one of two things.

00:01:35.250 --> 00:01:42.560
It can describe either a defect in a piece of software or an
enhancement request, which is a suggestion for a new feature

00:01:42.560 --> 00:01:45.439
or an improvement to an existing feature.

00:01:45.439 --> 00:01:49.409
And there are many different kinds of bugs
you might run across and want to file.

00:01:49.409 --> 00:01:52.459
I'm gonna go over some of the most common ones.

00:01:52.459 --> 00:01:55.489
First type of bug is a security bug.

00:01:55.489 --> 00:01:58.140
A security bug means something very specific.

00:01:58.140 --> 00:02:05.159
It means there is, someone has access to files
or system services they shouldn't or they've able

00:02:05.159 --> 00:02:07.489
that remotely execute code on your computer.

00:02:07.489 --> 00:02:16.590
Now, if you run into a bug in a security component,
for example, something is wrong with a dialogue

00:02:16.590 --> 00:02:20.000
in the key chain access program, that's not a security bug.

00:02:20.000 --> 00:02:20.930
But it's still a bug.

00:02:20.930 --> 00:02:22.730
And it still should be filed.

00:02:22.729 --> 00:02:27.259
Next type of bug is a crashing bug.

00:02:27.259 --> 00:02:33.199
And here we have the familiar, well hopefully
not too familiar, panic screen on Mac OS X.

00:02:33.199 --> 00:02:36.329
When you see the kernel panic that
means your entire computer has crashed.

00:02:36.330 --> 00:02:38.480
And that's definitely a bug.

00:02:38.479 --> 00:02:44.919
On Mac OS X when an application says it has
unexpectedly quit that means the application has crashed.

00:02:44.919 --> 00:02:49.619
And if you see a dialogue like this,
this means you should file a bug.

00:02:49.620 --> 00:02:56.430
When you see the familiar spinning rainbow curser here
this means an application is unresponsive.

00:02:56.430 --> 00:03:02.330
And new on Leopard if an application is force quit while
it's unresponsive you'll see this dialogue over here.

00:03:02.330 --> 00:03:08.430
If an application is hanging or unresponsive file a bug.

00:03:08.430 --> 00:03:10.770
Another type of bug is a performance bug.

00:03:10.770 --> 00:03:16.570
A performance bug means that software is spinning
or hanging or it's slow or it's leaking something

00:03:16.569 --> 00:03:19.759
like memory or mock ports, or file descriptors.

00:03:19.759 --> 00:03:23.729
If you see this happening file a bug.

00:03:23.729 --> 00:03:26.259
The next type of bug is a cosmetic bug.

00:03:26.259 --> 00:03:29.949
And if you look over here to my left you'll
see the familiar finder in photo dialogue.

00:03:29.949 --> 00:03:31.259
And this is from Tiger.

00:03:31.259 --> 00:03:35.909
And if you'll notice the iMac
icon is jaggy and blurry.

00:03:35.909 --> 00:03:36.699
This is a bug.

00:03:36.699 --> 00:03:39.089
This bug's been fixed in Leopard.

00:03:39.090 --> 00:03:41.719
Another type of but is an inconsistency.

00:03:41.719 --> 00:03:47.280
And that means when two pieces of software
will do the same thing in two different ways.

00:03:47.280 --> 00:03:49.080
Over here we have two menus.

00:03:49.080 --> 00:03:53.860
We have the video menu from the DVD player
and the video menu from QuickTime player.

00:03:53.860 --> 00:04:01.140
And yet, normal size is command two
and here actual size is command one.

00:04:01.139 --> 00:04:05.959
So, if you see software accomplishing the
same task in different ways that's a bug.

00:04:05.960 --> 00:04:10.060
The next type of bug I'm gonna
show you is the usability bug.

00:04:10.060 --> 00:04:14.469
And the usability bug means something
works but it could work better.

00:04:14.469 --> 00:04:19.810
Here is the open URL dialogue from QuickTime player.

00:04:19.810 --> 00:04:23.959
Blank and as expected, the OK button is disabled.

00:04:23.959 --> 00:04:29.979
But if we start typing, we've got http://,
the OK button highlights.

00:04:29.980 --> 00:04:35.310
If we were to click OK right now we'd get
an error because this isn't a valid URL.

00:04:35.310 --> 00:04:41.199
So it makes more sense to disable the
button until a valid URL is present

00:04:41.199 --> 00:04:43.959
and then you don't have to display an error to the user.

00:04:43.959 --> 00:04:48.969
Next type of bug is a documentation bug.

00:04:48.970 --> 00:04:51.200
A documentation bug can mean several things.

00:04:51.199 --> 00:04:53.849
It can mean the documentation doesn't
match the implementation.

00:04:53.850 --> 00:04:56.120
It could mean something isn't documented at all.

00:04:56.120 --> 00:04:59.129
It could mean the documentation is unclear or ambiguous.

00:04:59.129 --> 00:05:00.639
It could mean it's confusing.

00:05:00.639 --> 00:05:04.430
It could be something simple as a typo or spelling error.

00:05:04.430 --> 00:05:09.500
Here's an example of a functional
bug in a piece of software.

00:05:09.500 --> 00:05:13.779
Behind me we have the familiar Connect to
Server dialogue from the finder.

00:05:13.779 --> 00:05:17.789
I typed in ftp.apple.com and I click Connect.

00:05:17.790 --> 00:05:26.250
But the finder guessed wrong and it prepended
afp:// to the host name.

00:05:26.250 --> 00:05:29.149
Accessibility is a very important part of Mac OS X.

00:05:29.149 --> 00:05:34.669
And if you run into software that is not fully accessible,
or behaves in unusual ways when using accessibility features

00:05:34.670 --> 00:05:39.620
like voice over, or a full keyboard
access then you should file a bug.

00:05:39.620 --> 00:05:44.959
And finally, if you have any problems with sinking, if you
have data that doesn't sink or if you have duplicate data

00:05:44.959 --> 00:05:48.849
or you have missing data, then that's definitely a bug.

00:05:48.850 --> 00:05:52.090
So, who is it that should file a bug?

00:05:52.089 --> 00:05:53.909
Should you file a bug yourself?

00:05:53.910 --> 00:05:57.020
Should you ask is it okay first?

00:05:57.019 --> 00:05:59.099
You all should file bugs.

00:05:59.100 --> 00:06:03.700
If you see something wrong with software then file a bug.

00:06:03.699 --> 00:06:08.089
So, when I tell people they should always
file a bug they have a few objections.

00:06:08.089 --> 00:06:16.509
And they might say well, Paul this
seems like this is a really trivial bug.

00:06:16.509 --> 00:06:20.930
Maybe it's only a typo or the color is off, or.

00:06:20.930 --> 00:06:22.100
It doesn't matter.

00:06:22.100 --> 00:06:23.280
File a bug.

00:06:23.279 --> 00:06:29.299
Next they'll say well Paul I only saw this
problem once and I've never seen it again.

00:06:29.300 --> 00:06:30.639
Should I file a bug?

00:06:30.639 --> 00:06:32.990
Yes. You should file a bug.

00:06:32.990 --> 00:06:38.210
And finally people will say well this
seems like it's a really obvious bug.

00:06:38.209 --> 00:06:40.169
I'm sure everybody has seen it.

00:06:40.170 --> 00:06:41.910
You must have 12 copies of the bug.

00:06:41.910 --> 00:06:43.270
Should I file a bug?

00:06:43.269 --> 00:06:45.629
And the answer to that question is yes.

00:06:45.629 --> 00:06:46.819
File a bug.

00:06:46.819 --> 00:06:51.779
So, why should you file a bug even if
you think we might already know about it?

00:06:51.779 --> 00:06:57.009
Well, it's much better to have five copies
of a bug report than no copies whatsoever.

00:06:57.009 --> 00:07:01.939
And when you see a lot of reports of the
same problem you know it's pretty wide spread

00:07:01.939 --> 00:07:04.589
and it'll help you prioritize that bug.

00:07:04.589 --> 00:07:11.009
One thing I'd like to add is that a bug
is a bug in the eye of the beholder.

00:07:11.009 --> 00:07:15.219
That means if it looks like a bug to
you even if it was designed that way

00:07:15.220 --> 00:07:18.030
by the person who wrote the software it's still a bug.

00:07:18.029 --> 00:07:20.579
And you should file it because it confused you.

00:07:20.579 --> 00:07:26.899
Now, this doesn't mean to go and file the bug and then
get it closed and file it again and keep arguing with them.

00:07:26.899 --> 00:07:34.389
But if something seems wrong to you as a user it's a bug.

00:07:34.389 --> 00:07:39.219
Now, you don't always know when it
is you're going to run into a bug.

00:07:39.220 --> 00:07:45.200
And it sometimes might happen when you're
not ready or at an inconvenient time.

00:07:45.199 --> 00:07:50.479
So, if you wanna right a bug report there are a few steps
you can do to make sure your map is set up for debugging.

00:07:50.480 --> 00:07:57.580
And the first thing you're gonna wanna do is go into system
preferences and go into sharing and turn on remote log in.

00:07:57.579 --> 00:08:03.269
This way you can insure you can go and log
into your Mac through SSH and do any sort

00:08:03.269 --> 00:08:08.069
of analysis you might need to investigate the problem.

00:08:08.069 --> 00:08:12.959
The next thing you're gonna wanna
do is install some software.

00:08:12.959 --> 00:08:15.009
What software is it that you wanna install?

00:08:15.009 --> 00:08:18.050
First you wanna install the developer tools.

00:08:18.050 --> 00:08:21.090
And in addition to Xcode you've got Xray.

00:08:21.089 --> 00:08:21.919
You've got access to GDB.

00:08:21.920 --> 00:08:28.290
You've got several other useful
performance and analysis tools.

00:08:28.290 --> 00:08:34.159
Aside from installing the developer tools you wanna
install the chug tools, which gives you access to Shark,

00:08:34.159 --> 00:08:36.819
which is a terrific performance analysis tool.

00:08:36.820 --> 00:08:40.120
And we'll get into that a little bit later.

00:08:40.120 --> 00:08:43.820
And finally when you're setting up
your Mac to debug you wanna take notes.

00:08:43.820 --> 00:08:48.220
And when I say you wanna take notes, you
actually wanna take some notes down on paper.

00:08:48.220 --> 00:08:50.070
Why do you wanna take them down on paper?

00:08:50.070 --> 00:08:54.220
Well, suppose that when you run into this
bug it's taken over your Mac in such a way

00:08:54.220 --> 00:08:58.550
that you can't access the screens
you need to look up this information?

00:08:58.549 --> 00:09:00.250
So what do you need to write down?

00:09:00.250 --> 00:09:05.850
First you wanna write down the IP address
of your machine so you can log in remotely.

00:09:05.850 --> 00:09:08.800
Now, sometimes your IP address
is dynamic or it changes a lot,

00:09:08.799 --> 00:09:11.559
or you might be somewhere where
you have a self assigned address.

00:09:11.559 --> 00:09:15.229
In this case you want to know the Bonjour name of your Mac.

00:09:15.230 --> 00:09:17.870
And you can get that from sharing preferences.

00:09:17.870 --> 00:09:25.620
If you're at school or at a workplace where you have
a fixed host name, knowing that is also helpful.

00:09:25.620 --> 00:09:31.679
And finally you should write down the hardware Ethernet
address of your Ethernet and AirPort interfaces.

00:09:31.679 --> 00:09:42.169
This is very useful if you're running
into any sort of a networking problem.

00:09:42.169 --> 00:09:44.799
So, if you run into a but and you're set up.

00:09:44.799 --> 00:09:49.000
Once you're right this bug report, where
is it you should write the bug report?

00:09:49.000 --> 00:09:54.860
So if you've used some of our software you'll see there are
a lot of different options for providing feedback to Apple.

00:09:54.860 --> 00:09:56.940
You have the crash dialogue.

00:09:56.940 --> 00:10:00.970
If you're a WebKit or Safari developer
you'll see you might be using Bugzilla.

00:10:00.970 --> 00:10:06.519
And you can see the report but to
Apple button in the Safari tool bar.

00:10:06.519 --> 00:10:12.350
You might have the iChat feedback dialogue
in Mac OS X 10.4.7 or later.

00:10:12.350 --> 00:10:20.210
If a connection attempt fails you might see the provide
feedback menu item in applications like Keynote or iPhoto.

00:10:20.210 --> 00:10:23.519
You might be using an email address
to communicate with apple.

00:10:23.519 --> 00:10:29.579
In all these cases even if you provide feedback through
one of these means you should use Apple Bug Reporter.

00:10:29.580 --> 00:10:34.009
An Apple Bug Reporter is available
at bugreport.apple.com.

00:10:34.009 --> 00:10:36.340
So why do you need to use Apple Bug Reporter?

00:10:36.340 --> 00:10:45.800
Well two things happen, one is that you have are
given a report number so you can go and follow up

00:10:45.799 --> 00:10:48.059
and add additional information to the bug.

00:10:48.059 --> 00:10:52.739
And you'll be given the opportunity
to verify that the bug is fixed.

00:10:52.740 --> 00:10:56.810
And secondly, if the engineers have a question for you

00:10:56.809 --> 00:11:01.369
or they require their information this way
the have a means in which to contact you.

00:11:01.370 --> 00:11:08.850
So there are five parts to a good bug report.

00:11:08.850 --> 00:11:18.970
There are the bug's title, the bug's description, data
about the problem, the configuration of the machine

00:11:18.970 --> 00:11:25.180
on which the problem occurred, and finally reproducibility.

00:11:25.179 --> 00:11:27.079
How easily does this bug occur?

00:11:27.080 --> 00:11:29.670
So let's start with the bug's title.

00:11:33.669 --> 00:11:37.620
The title of the bug has to be clear and succinct.

00:11:37.620 --> 00:11:41.769
Remember that when you're writing your bug
you don't have a lot of space for the title

00:11:41.769 --> 00:11:46.679
and you wanna convey as much information as you can.

00:11:46.679 --> 00:11:48.109
So, how do you do that?

00:11:48.110 --> 00:11:52.960
Well, you wanna think of the title
as an advertisement for your bug.

00:11:52.960 --> 00:11:58.970
When you, people see your bug you want them to
open it up and investigate it and fix your problem.

00:11:58.970 --> 00:12:05.090
And a good way to do this is to start by
making the first words of your bug title count.

00:12:05.090 --> 00:12:11.280
Good first words usually include the name
of the program where you saw the problem.

00:12:11.279 --> 00:12:17.159
And because space is so limited it's important
that you make every word in your title count.

00:12:17.159 --> 00:12:20.230
What is it I mean when I say make every word count?

00:12:20.230 --> 00:12:26.149
Well you wanna admit things like explanatory, or chatter.

00:12:26.149 --> 00:12:30.449
People often say things such as it
would be nice if my software did this.

00:12:30.450 --> 00:12:33.120
Or, I would really like it if your program did that.

00:12:33.120 --> 00:12:40.450
And this type of exposition, while appropriate in the
bug's description, can be omitted from the bug's title.

00:12:40.450 --> 00:12:45.180
Second thing you can do is you can omit thorough words.

00:12:45.179 --> 00:12:55.349
So if you run into pronouns or articles or prepositions,
usually you can remove them from the bug's title.

00:12:55.350 --> 00:13:00.700
Sometimes when you are reading other
people's bugs you'll come across prefixes

00:13:00.700 --> 00:13:06.050
And people, when screening and analyzing bugs
will often prefix their title to make it easier

00:13:06.049 --> 00:13:08.299
for them to search and sort through bugs.

00:13:08.299 --> 00:13:14.089
And if you're responsible for a bug tracking system at your
company this may be something that you'd wanna consider.

00:13:14.090 --> 00:13:16.430
So I'm gonna show you three common prefixes.

00:13:16.429 --> 00:13:17.529
The first is the prefix ER.

00:13:17.529 --> 00:13:24.549
ER means enhancement request, which says that this
bug describes and improvement and not a defect.

00:13:24.549 --> 00:13:28.620
The second title or second prefix is a build number.

00:13:28.620 --> 00:13:34.090
And here we have 8P2137, which is a
build number for Mac OS X on Intel.

00:13:34.090 --> 00:13:39.340
Build numbers are especially helpful when you're
writing bugs against pre released data or seed software.

00:13:39.340 --> 00:13:45.250
So, people know exactly what version
of the software you saw the problem on.

00:13:45.250 --> 00:13:52.620
And finally the prefix regression means that
something used to work but has now stopped working.

00:13:52.620 --> 00:13:58.720
If you're a Safari or WebKit developer
this is a very common prefix to run into.

00:13:58.720 --> 00:14:04.700
Now if your bug is about a particular error
it's very helpful to include key words

00:14:04.700 --> 00:14:10.560
from the error message and the
error number in the bug's title.

00:14:10.559 --> 00:14:17.379
If you run into a bug that is about a crash or a hang then
it's helpful to include the function name from the top

00:14:17.379 --> 00:14:20.929
of the stack trace at the end of your bug's title.

00:14:20.929 --> 00:14:25.120
You can get this from the crash report
or you can get this from sample.

00:14:25.120 --> 00:14:30.070
Now, when you are doing this there are a
couple of things that you want to omit.

00:14:30.070 --> 00:14:35.379
If you see any low level functions related to memory
management or string comparison or exception hailing

00:14:35.379 --> 00:14:40.220
at the top of the stack trays, skip over them and
go down until you see the first part of the program

00:14:40.220 --> 00:14:48.149
that is performing the action which led to the problem
and include that function at the end of the title.

00:14:48.149 --> 00:14:51.689
And remember that your title needs to stand on its own.

00:14:51.690 --> 00:14:56.060
This bug title will be reviewed on a list
of tens or hundreds of others of bugs.

00:14:56.059 --> 00:14:59.079
And it's gonna be out of context.

00:14:59.080 --> 00:15:02.670
The title is the most common way that
engineers will search for you bug.

00:15:02.669 --> 00:15:10.719
So, when you're writing up the title think about if you
were looking for that problem how would you search for it?

00:15:11.830 --> 00:15:14.660
There are couple of things you want to avoid in titles.

00:15:14.659 --> 00:15:16.250
The first is any clever puns.

00:15:16.250 --> 00:15:19.220
And I enjoy being witty as much as the next person.

00:15:19.220 --> 00:15:22.370
But when you're writing a bug title
I have to remember two things.

00:15:22.370 --> 00:15:27.870
First is that your goal is to be objective
and straight forward and communicate clearly.

00:15:27.870 --> 00:15:33.100
And the second is that the person reading your bug might
not be a native English speaker and might not get the joke.

00:15:33.100 --> 00:15:35.930
So, please avoid the use of puns in bug titles.

00:15:35.929 --> 00:15:41.459
Another thing to take not in is sometimes when people hear
oh call attention to your bug, they think we're on eBay

00:15:41.460 --> 00:15:46.290
and we're gonna use all capitals or we're
gonna put funny symbols in our bug titles.

00:15:46.289 --> 00:15:47.480
And please don't do this.

00:15:47.480 --> 00:15:48.659
There are a couple of problems with it.

00:15:48.659 --> 00:15:52.899
First, thing it takes up more space when you
use all capitals and it's harder to read.

00:15:52.899 --> 00:15:58.509
And when you use funny symbols it's
harder for people to search for your bug.

00:15:58.509 --> 00:16:06.299
And finally, while I have not seen any actual examples of
this in a bug, please don't use l33t speak in a bug title.

00:16:06.299 --> 00:16:15.909
Let's take a look at an example of improving a bug title.

00:16:15.909 --> 00:16:19.629
So, suppose you ran into a problem
where your program crashed

00:16:19.629 --> 00:16:23.389
and you could star by writing a bug title that says crash.

00:16:23.389 --> 00:16:27.269
But I can look at this here and
say, hum, what does this mean?

00:16:27.269 --> 00:16:28.509
What crashed?

00:16:28.509 --> 00:16:30.549
What was going on when the crash occurred?

00:16:30.549 --> 00:16:34.909
So, you can improve this title a little bit by
starting with the name of the program that crashed.

00:16:34.909 --> 00:16:37.079
And you can say finder crashed.

00:16:37.080 --> 00:16:40.750
This is a little better but it's
still missing some information

00:16:40.750 --> 00:16:45.480
because the finder is a very complex
application and there can be a lot going on.

00:16:45.480 --> 00:16:49.300
So it helps if we describe what we
were doing when we saw the crash.

00:16:49.299 --> 00:16:52.990
So, suppose we went to the go menu and
we chose iDisk and finder crashed.

00:16:52.990 --> 00:16:56.810
So we could say finder crash connecting to iDisk.

00:16:56.809 --> 00:16:58.449
And this is a good bug title.

00:16:58.450 --> 00:17:01.000
And if you were to write up a bug
like this we'd be very happy.

00:17:01.000 --> 00:17:02.379
And most people could stop here.

00:17:02.379 --> 00:17:05.569
But there's something we can do to
improve this title even further.

00:17:05.569 --> 00:17:08.419
Remember I mentioned we can add a prefix.

00:17:08.420 --> 00:17:13.480
And because this is a crashing bug we can look in the
crash log, get the function name where the crash occurred.

00:17:13.480 --> 00:17:19.480
So, if we were to write 8P2137:
finder crash connecting to iDisk

00:17:19.480 --> 00:17:23.960
in T container item, we would have a terrific bug title.

00:17:26.809 --> 00:17:32.509
Here I have a couple of examples
of titles, which can be improved.

00:17:32.509 --> 00:17:38.009
And for someone, suppose someone wrote up a bug
that said smudge marks everywhere in Safari.

00:17:38.009 --> 00:17:40.759
And there are a couple of problems in this title.

00:17:40.759 --> 00:17:45.069
The first problem is that Safari is
all the way at the end of the title.

00:17:45.069 --> 00:17:48.389
And it's the most important thing here
because we know this bug is about Safari.

00:17:48.390 --> 00:17:49.390
So it needs to go to the beginning.

00:17:49.390 --> 00:17:53.340
And the second part is what does
it mean when we say smudge marks?

00:17:53.339 --> 00:17:54.409
What is a smudge mark?

00:17:54.410 --> 00:17:57.269
How do we get the smudge mark to show up in the first place?

00:17:57.269 --> 00:17:58.970
What's everywhere?

00:17:58.970 --> 00:18:03.920
So, suppose this is a problem we ran into when
we were looking at QuickTime VR panoramas.

00:18:03.920 --> 00:18:10.100
So, we could write the bug title as Safari redraws
QuickTime VR movies incorrectly during window resize.

00:18:10.099 --> 00:18:15.189
And this conveys a lot of information
about what and how very quickly.

00:18:15.190 --> 00:18:21.850
Another problem is sometimes when
you run into a problem you're upset.

00:18:21.849 --> 00:18:26.879
And suppose you were doing an important demo or
you had a presentation and your computer crashed

00:18:26.880 --> 00:18:28.290
or something went wrong and you would be angry.

00:18:28.289 --> 00:18:32.099
And you would say error this new iSmell
application is a complete failure.

00:18:32.099 --> 00:18:33.809
iSmell is really iStink.

00:18:33.809 --> 00:18:35.099
This is terrible.

00:18:35.099 --> 00:18:40.619
And I understand and I too would feel like it's a
complete failure if it crashed on me during a demo.

00:18:40.619 --> 00:18:43.679
But instead of writing that think about how it failed.

00:18:43.680 --> 00:18:47.590
So, suppose you had this new fancy camera and
it didn't work with your new fancy camera.

00:18:47.589 --> 00:18:54.839
So, you could write a bug that says iSmell is
incompatible with the Sony CyberCube 3000MX.

00:18:56.309 --> 00:19:05.250
And finally sometimes I run across a bug title that is
so strange even I can't think of a way to improve it.

00:19:05.250 --> 00:19:10.220
So, please, please don't write bugs like that.

00:19:10.220 --> 00:19:14.360
So, let's sum up the best practices for writing a bug title.

00:19:14.359 --> 00:19:18.779
Start off with the build of the piece
of software, which had the problem.

00:19:18.779 --> 00:19:22.399
Continue with the name of the application
that had the problem.

00:19:22.400 --> 00:19:27.530
Next, include a verb describing what
you were doing to induce the problem.

00:19:27.529 --> 00:19:33.700
And, describe the situation that was gonna,
that was happening when the problem occurred.

00:19:33.700 --> 00:19:42.269
And finally, in the case of crash or a hang, include the
symbol name that you saw at the top of the stack trace.

00:19:42.269 --> 00:19:49.849
Alright let's move on to the second part
of a bug report, or the bug's description.

00:19:49.849 --> 00:20:02.219
The description had five parts, summary, steps
to reproduce the problem, regression information,

00:20:02.220 --> 00:20:09.220
under what situation the problem does or
doesn't occur, expected results and how the contrast

00:20:09.220 --> 00:20:13.970
with actual results, and finally
any work around if one exists.

00:20:13.970 --> 00:20:17.610
Let's take a look at summary.

00:20:17.609 --> 00:20:26.709
When we talk about the description of
the bug we really mean be descriptive.

00:20:26.710 --> 00:20:31.430
And some of the best descriptive writing you might come
across in the newspaper might be in the sports section.

00:20:31.430 --> 00:20:35.860
For example, a good sports writer would never
write oh Hernandez threw a good curve ball.

00:20:35.859 --> 00:20:39.859
He'd write, it was the bottom of the ninth, they were
two out, it was raining, they were down by a run,

00:20:39.859 --> 00:20:45.250
it was the three two count, the bases were
loaded and then Hernandez threw a curve ball.

00:20:45.250 --> 00:20:51.460
So remember that the person reading your bug report
wasn't there with you when the problem occurred.

00:20:51.460 --> 00:20:54.579
They don't know exactly what your set up is like.

00:20:54.579 --> 00:21:00.379
They don't know exactly all the things
that you saw so you have to tell them.

00:21:00.380 --> 00:21:04.880
So when you're summarizing you bug, the first thing
that you should do is you should repeat the title.

00:21:04.880 --> 00:21:07.370
Why do you wanna repeat the title of the bug?

00:21:07.369 --> 00:21:15.439
Well, often as engineers investigate bugs they will change
the title to reflect the underlined cause of the problem.

00:21:15.440 --> 00:21:20.539
When you repeat the title in the summary of the
bug, you let everyone reading the bug report

00:21:20.539 --> 00:21:25.779
for the first time know what it is that you
saw which lead you to write out the problem.

00:21:25.779 --> 00:21:28.059
Next you need to summarize the problem.

00:21:28.059 --> 00:21:34.279
Describe what was going on, describe what
happened, describe why this was a problem.

00:21:34.279 --> 00:21:38.980
When you're summarizing your bug it's
important that you're very specific.

00:21:41.309 --> 00:21:46.869
For example, if you were to write a bug and
you say Safari is slow, what does this mean?

00:21:46.869 --> 00:21:49.689
Does this mean Safari is slow compared to another browser?

00:21:49.690 --> 00:21:56.180
Does this mean Safari is slow compared to another
version of Safari, or Safari on a different machine?

00:21:56.180 --> 00:22:00.289
And what is Safari slow doing.

00:22:00.289 --> 00:22:03.549
Suppose Safari was slow allocating JavaScript arrays.

00:22:03.549 --> 00:22:07.460
So we could write that and say Safari
is slow allocating JavaScript arrays.

00:22:07.460 --> 00:22:12.700
This is much clearer and it would be really helpful
in this case to include some sample JavaScript

00:22:12.700 --> 00:22:17.350
or Shark profile of what Safari was doing at the time.

00:22:17.349 --> 00:22:20.839
Well, when you're writing your summary you
have to describe the facts of the situation,

00:22:20.839 --> 00:22:25.029
that is what you saw and what you did and what you heard.

00:22:25.029 --> 00:22:32.279
If the bug is about a particular error, the
summary is a good place to include the exact text

00:22:32.279 --> 00:22:34.899
of the error message in any error number.

00:22:34.900 --> 00:22:37.060
Now, many error messages are very similar.

00:22:37.059 --> 00:22:39.159
So it's important to be precise here.

00:22:39.160 --> 00:22:42.700
If you can't get the exact text of the
error message because say it appeared

00:22:42.700 --> 00:22:46.519
and it disappeared too quickly or it wasn't readable.

00:22:46.519 --> 00:22:53.009
That's okay write down what you can remember of
the error and note that this is an approximation.

00:22:53.009 --> 00:22:59.349
So, someone doesn't waste a lot of time chasing down a
false lead if the wording of another error message is very similar.

00:22:59.349 --> 00:23:07.730
And it's important, when you're describing
your problem to use specific references.

00:23:07.730 --> 00:23:10.319
What do I mean by specific references?

00:23:10.319 --> 00:23:17.129
Well instead of saying the window or the panel or the
pallet, you would say the finder's inspector window.

00:23:17.130 --> 00:23:23.520
And instead of saying the round funny gray thing, you
would say the spinning indeterminate progress indicator.

00:23:23.519 --> 00:23:27.539
Now, how man here know what the spinning
indeterminate progress indicator is?

00:23:27.539 --> 00:23:28.619
Alright like two guys.

00:23:28.619 --> 00:23:31.019
Well, this is the spinning indeterminate progress indicator.

00:23:31.019 --> 00:23:35.539
And if you didn't know that that's okay because what
you can, there's two things that you can do when you run

00:23:35.539 --> 00:23:37.509
across something you don't know the name of.

00:23:37.509 --> 00:23:42.809
The first, if it's a control like this you can go to
the Apple human interface guidelines and look it up.

00:23:42.809 --> 00:23:46.210
But, if you don't have a copy of that handy
or you don't have time, that's okay too.

00:23:46.210 --> 00:23:49.269
Instead, take a screen shot of
the item in question and attach it

00:23:49.269 --> 00:23:53.089
to your bug, so that way people know what you mean.

00:23:53.089 --> 00:23:57.339
Another thing you want to make sure of
is to avoid the use of relative pronouns.

00:23:57.339 --> 00:24:03.689
So, instead of saying oh it crashed or
that hung, or the problem was there.

00:24:03.690 --> 00:24:09.950
Describe specifically what application or window
had the problem because by the third paragraph,

00:24:09.950 --> 00:24:20.069
the engineer reading the bug isn't necessarily sure
what you're referring to when you say it or that.

00:24:20.069 --> 00:24:24.659
Another thing to take note is the use
of the words, the use of the word crash.

00:24:24.660 --> 00:24:29.509
If you say the system crashed be
specific about what you actually mean.

00:24:29.509 --> 00:24:32.170
People will use this phrase to mean many things.

00:24:32.170 --> 00:24:36.800
They could say oh an application crashed.

00:24:36.799 --> 00:24:41.139
They could say the system did crash
because we saw the kernel panic dial up.

00:24:41.140 --> 00:24:48.380
You could say the system hung and was unresponsive to use
input or an application hung and maybe it came back later.

00:24:48.380 --> 00:24:54.730
Or perhaps the system froze in such a way that it wasn't
responding to user input from the keyboard or mouse

00:24:54.730 --> 00:24:58.190
but then maybe you could still
SSH in and perform other actions.

00:24:58.190 --> 00:25:05.830
So, instead of saying the system crashed say what, which
of these or other actions actually happened to you.

00:25:05.829 --> 00:25:12.639
Another thing to note is that sometimes people will use
slang terms or informal language to describe problems.

00:25:12.640 --> 00:25:16.910
And they'll say something looks bad
or it's nonsense or this is odd.

00:25:16.910 --> 00:25:20.810
But odd to you isn't necessarily
odd to the engineer reading the bug.

00:25:20.809 --> 00:25:25.029
So instead of doing this it's important to be precise.

00:25:25.029 --> 00:25:28.920
And another way of being precise is
to avoid the use of vague language.

00:25:28.920 --> 00:25:31.960
Sometimes people use the word nothing in
the bug and they'll say nothing happens

00:25:31.960 --> 00:25:35.200
or this does nothing or this doesn't work.

00:25:35.200 --> 00:25:39.950
And instead of saying what didn't happen
you should describe what did happen.

00:25:39.950 --> 00:25:43.950
For example, suppose you were trying to
print and printing didn't work for you.

00:25:43.950 --> 00:25:46.529
So don't say printing, I tried
to print and nothing happened.

00:25:46.529 --> 00:25:51.089
Say, for example, was the, think about what you saw.

00:25:51.089 --> 00:25:54.740
When you clicked on the file menu
was the print menu item enabled?

00:25:54.740 --> 00:25:58.500
When you chose print did the print dialogue appear?

00:25:58.500 --> 00:26:01.480
When the print dialogue appeared was your printer listed?

00:26:01.480 --> 00:26:03.210
When you clicked was the print button enabled?

00:26:03.210 --> 00:26:06.309
When you clicked print did the print dialogue go away?

00:26:06.309 --> 00:26:08.819
When the print dialogue went away
did the progress dialogue come up?

00:26:08.819 --> 00:26:10.950
Did the progress dialogue ever go away?

00:26:10.950 --> 00:26:14.539
Did the printer proxy application launch and so on?

00:26:14.539 --> 00:26:24.159
So you could describe what you saw and at which
point you stopped seeing what you expected to see.

00:26:24.160 --> 00:26:28.980
Let's take a look at an example
of improving a summary of a bug.

00:26:28.980 --> 00:26:30.500
And here's somebody that has written.

00:26:30.500 --> 00:26:35.890
Did you know the Finder eats CPU while connecting
to a server at a Chinese restaurant?

00:26:35.890 --> 00:26:37.960
And you can look at this and say this is really confusing

00:26:37.960 --> 00:26:42.090
because I didn't know they served
CPU at Chinese restaurants.

00:26:42.089 --> 00:26:45.089
And so, the first thing that you wanna
do with this bug is you wanna get rid

00:26:45.089 --> 00:26:47.779
of some chatty language that's unnecessary.

00:26:47.779 --> 00:26:51.809
And we see did you know that, we can cross that out.

00:26:51.809 --> 00:26:59.909
Next thing we see here is we can reverse
the order of the clauses in this sentence

00:26:59.910 --> 00:27:02.180
to make it more clear what was happening.

00:27:02.180 --> 00:27:10.590
So if we say, so here we have, we removed the did
you know that and we're now if we reverse the order

00:27:10.589 --> 00:27:15.209
of the clauses we get at a Chinese restaurant
the finder eats CPU while connecting to a server.

00:27:15.210 --> 00:27:19.490
So it's more clear we've described where we
are and then we've described what happens.

00:27:19.490 --> 00:27:22.400
But we can improve this description even further

00:27:22.400 --> 00:27:27.080
by including specific information specific
technical information about the problem.

00:27:27.079 --> 00:27:31.490
So, when we're at the restaurant it means
we're actually using our EVDO modem.

00:27:31.490 --> 00:27:38.519
And eats CPU means using 90 percent CPU and the
server we're connecting to is an FTP server.

00:27:38.519 --> 00:27:44.049
I know I mentioned earlier if you're upset
when you write a bug and you write the title

00:27:44.049 --> 00:27:47.059
in an angry way and you should avoid doing that.

00:27:47.059 --> 00:27:52.119
Likewise, when you're writing a bug
description when summarizing the bug it's good

00:27:52.119 --> 00:27:55.479
to avoid the use of sarcasm even when you're upset.

00:27:55.480 --> 00:28:01.150
Think of how you would feel if you were
to receive that type of bug report.

00:28:01.150 --> 00:28:04.370
Another important thing to note
is that you should be descriptive

00:28:04.369 --> 00:28:07.759
and not prescriptive when writing your bug summaries.

00:28:07.759 --> 00:28:09.430
And what do I mean by this?

00:28:09.430 --> 00:28:15.850
Well, you want to describe the problem that you saw and
not necessarily what you think the solution should be.

00:28:15.849 --> 00:28:21.189
For example, suppose that you saw
some text and you couldn't read it.

00:28:21.190 --> 00:28:24.830
And so, you might write oh this text should be green.

00:28:24.829 --> 00:28:27.939
But the solution might not be to make the text green.

00:28:27.940 --> 00:28:33.759
It might be to make the text bigger or
might be to change the size of the text.

00:28:33.759 --> 00:28:36.430
And you should let the engineer decide
what the appropriate solution is.

00:28:36.430 --> 00:28:39.810
But you should let them know why this is a problem for you.

00:28:39.809 --> 00:28:44.700
Next, it's important to differentiate
speculation from the facts.

00:28:44.700 --> 00:28:48.630
And remember the facts are what you saw
and what you did and what you heard.

00:28:48.630 --> 00:28:51.970
And speculation is what you think was
going on and what you think happened.

00:28:51.970 --> 00:28:57.569
And sometimes it's okay to speculate but you need to let
people know what's your opinion and what the facts are.

00:28:57.569 --> 00:29:02.039
And if you don't know the cause of the bug, it's
important not to guess at the cause of the bug

00:29:02.039 --> 00:29:06.649
because you don't wanna have engineers spending
a lot of time chasing down a false lead.

00:29:09.529 --> 00:29:15.210
So now, let's take a look at the second key part
of a bug's description, steps to reproduce the problem.

00:29:15.210 --> 00:29:19.400
Now the goal with steps to reproduce
is to think of what it would take

00:29:19.400 --> 00:29:22.320
if you had a new machine and you got it out of the box.

00:29:22.319 --> 00:29:25.399
What would you need to do to make this problem occur?

00:29:25.400 --> 00:29:30.310
When you're writing up steps to reproduce
you wanna put yourself in the engineer's shoes

00:29:30.309 --> 00:29:34.639
and think about what it is they're going to need to know.

00:29:34.640 --> 00:29:37.060
You want to add include lots of information.

00:29:37.059 --> 00:29:42.700
It's much better to have too much information
than to have not enough information.

00:29:42.700 --> 00:29:46.080
You wanna anticipate the types of
questions they're likely to ask you.

00:29:46.079 --> 00:29:51.740
You wanna minimize the amount of back and forth between
you and the engineer required to solve the problem.

00:29:51.740 --> 00:29:55.509
Every time an engineer stops and
asks you a question it means they put

00:29:55.509 --> 00:29:58.490
down your problem and work on someone else's problem.

00:29:58.490 --> 00:30:03.519
You can't make any assumptions about what
people will know about your situation

00:30:03.519 --> 00:30:05.329
or about your particular piece of software.

00:30:05.329 --> 00:30:07.359
It's important to be very specific.

00:30:07.359 --> 00:30:11.929
If you're writing about a particular
program, instead of using terminology

00:30:11.930 --> 00:30:17.039
from your application or your business
like debits or credits.

00:30:17.039 --> 00:30:22.230
You would want to describe what menu items
to choose and what controls to click.

00:30:22.230 --> 00:30:28.029
And when you're describing what you did it's
important to describe what you did in detail

00:30:28.029 --> 00:30:30.779
and not just the high level action you performed.

00:30:30.779 --> 00:30:34.940
For example, say that you wrote open this file.

00:30:34.940 --> 00:30:37.009
Well there are many ways to open a file.

00:30:37.009 --> 00:30:40.990
And when opening the file works you get the same end result.

00:30:40.990 --> 00:30:44.250
But, if something goes wrong this
could've gone through different code paths.

00:30:44.250 --> 00:30:47.069
So it's important to describe what it is you did.

00:30:47.069 --> 00:30:52.750
For example, if you could double click on a file
or you could click on a file and choose open,

00:30:52.750 --> 00:30:57.190
or you could run the open command in terminal
or you could file menu and choose open,

00:30:57.190 --> 00:30:59.759
so write down which of these actions you actually took.

00:30:59.759 --> 00:31:05.759
In this case we could say double click on a file.

00:31:05.759 --> 00:31:10.660
When you're writing up your steps to reproduce
it's important to describe what machine

00:31:10.660 --> 00:31:13.450
or system is necessary to reproduce the problem.

00:31:13.450 --> 00:31:19.380
Is this a problem that will only occur on a
PowerPC or only on a Intel machine or on both?

00:31:19.380 --> 00:31:27.900
Is this a problem that requires a 64 bit mode or is this
a problem that also occurs in 32 bit, on 32 bit machines.

00:31:27.900 --> 00:31:32.100
Now, Apple now makes software for
Windows as well as Mac OS X.

00:31:32.099 --> 00:31:37.089
And it's important to describe which operating
system you need to use to reproduce the problem.

00:31:37.089 --> 00:31:41.549
For example, if you're using Safari or iTunes is
this a problem that only occurs on Safari or iTtunes

00:31:41.549 --> 00:31:45.269
or Mac OS X or only for Windows, or both?

00:31:45.269 --> 00:31:50.869
If you have a PowerPC application is this a problem
that only occurs under Rosetta or does it occur

00:31:50.869 --> 00:31:53.529
when running on a PowerPC machine as well?

00:31:53.529 --> 00:31:57.259
And what about your home directory?

00:31:57.259 --> 00:32:01.579
Does this require specific type of home
directory for the problem to occur?

00:32:01.579 --> 00:32:03.710
Does this problem occur on a regular home directory?

00:32:03.710 --> 00:32:10.210
Is this a problem that only occurs when you're using
a removable home like on a fire wire drive or an iPod?

00:32:10.210 --> 00:32:14.620
Is this a problem that only occurs when
you're using a network home directory?

00:32:14.619 --> 00:32:15.679
What about you user type?

00:32:15.680 --> 00:32:19.799
Is this a problem that occurs with
standard users or admin users?

00:32:19.799 --> 00:32:24.240
Now on Leopard we have guest users and we have,
what about when you're using parental controls?

00:32:24.240 --> 00:32:27.930
Do you need to use parental controls
to reproduce this problem?

00:32:27.930 --> 00:32:32.450
Is this a problem that requires you to
use fast user switching to reproduce?

00:32:32.450 --> 00:32:38.779
I'm gonna tell you two stories
that will illustrate the importance

00:32:38.779 --> 00:32:42.779
of detailed steps to reproduce when writing a bug.

00:32:42.779 --> 00:32:45.839
First is, a problem I ran into when using the installer.

00:32:45.839 --> 00:32:50.939
One time I was installing some software
and I would always get to the same point

00:32:50.940 --> 00:32:53.420
in the installer and the installer would hang.

00:32:53.420 --> 00:32:55.990
I thought this was odd and so I wrote up a bug.

00:32:55.990 --> 00:33:00.289
I included in the bug a sample of what the
installer was doing when the hang occurred.

00:33:00.289 --> 00:33:05.480
And I attached the package I was
installing which reproduced the problem.

00:33:05.480 --> 00:33:10.110
And I've described exactly how
far through the installer I got.

00:33:10.109 --> 00:33:11.729
And I sent this bug over to the installer too.

00:33:11.730 --> 00:33:16.170
And the installer engineer looks at my problem and
he tried to reproduce the problem and he couldn't.

00:33:16.170 --> 00:33:18.769
And he called me up and he said
Paul can you help me out here?

00:33:18.769 --> 00:33:20.410
Can you come show this to me?

00:33:20.410 --> 00:33:21.110
So I said fine.

00:33:21.109 --> 00:33:22.369
He came over to my office.

00:33:22.369 --> 00:33:26.829
And the installer engineer sat and
he watched me reproduce the problem.

00:33:26.829 --> 00:33:31.549
And then I watched him not reproduce the problem.

00:33:31.549 --> 00:33:33.659
And we repeated this process for about 15 minutes.

00:33:33.660 --> 00:33:35.950
We couldn't figure out what was going on.

00:33:35.950 --> 00:33:41.590
And then I remembered that I was using full
keyboard access to navigate the installer.

00:33:41.589 --> 00:33:48.079
That is, I pressed tab to highlight a button and
spacebar to activate a button and he was using the mouse.

00:33:48.079 --> 00:33:51.519
So he was pointing and clicking.

00:33:51.519 --> 00:33:56.269
So when you're writing up your steps to reproduce, if
you're, if you're using any accessibility features,

00:33:56.269 --> 00:34:00.180
if you're using full keyboard access,
include that information in the bug.

00:34:00.180 --> 00:34:10.230
And now, the second story how many of you have friends
or family members who ask you for help with computers?

00:34:10.230 --> 00:34:13.219
Alright, so, my dad does this a lot.

00:34:13.219 --> 00:34:17.659
And I've tried to explain some of these ideas to him.

00:34:17.659 --> 00:34:21.000
And he's gotten to understand them pretty well.

00:34:21.000 --> 00:34:24.139
And so, he ran into a problem with Safari.

00:34:24.139 --> 00:34:28.269
And he sent me a screen shot of the
Safari window, which showed the problem.

00:34:28.269 --> 00:34:32.550
And he sent me the URL and I opened
up the URL on my machine.

00:34:32.550 --> 00:34:34.440
And I looked at the page and it looked fine.

00:34:34.440 --> 00:34:36.079
And it didn't match his screen shot.

00:34:36.079 --> 00:34:38.279
And I phoned up my dad and I checked with him.

00:34:38.280 --> 00:34:42.040
I said what version of Mac OS X do you
have and what version of Safari do you have?

00:34:42.039 --> 00:34:44.409
And I made sure we both had the same version.

00:34:44.409 --> 00:34:47.309
And we were talking about this for a while.

00:34:47.309 --> 00:34:48.880
And then I remembered something.

00:34:48.880 --> 00:34:50.420
My dad's old.

00:34:50.420 --> 00:34:52.599
And he wears glasses.

00:34:52.599 --> 00:34:54.309
And so what had he done?

00:34:54.309 --> 00:34:58.279
He had turned on the minimum font size preference in Safari.

00:34:58.280 --> 00:35:02.070
And, as soon as I turned that preference
on I too saw the problem.

00:35:02.070 --> 00:35:07.809
So, it's important when you're writing up your
steps to reproduce to include any preferences

00:35:07.809 --> 00:35:11.349
that you've changed from their default values.

00:35:11.349 --> 00:35:16.039
Now let's move onto the third part
of a bug's description regression.

00:35:16.039 --> 00:35:16.679
What does this mean?

00:35:16.679 --> 00:35:20.149
Well this is when does a problem
occur and when doesn't it occur.

00:35:20.150 --> 00:35:23.559
This is a problem that will occur
on particular builds of Mac OS X,

00:35:23.559 --> 00:35:28.070
for example a problem that occurs
on Leopard and not on Tiger.

00:35:28.070 --> 00:35:34.890
Do you have any fire wire or USB or any
bluetooth devices attached to your machine?

00:35:34.889 --> 00:35:38.960
If you remove these devices does the problem go away?

00:35:38.960 --> 00:35:43.550
If so, add them back one at a time until you can figure

00:35:43.550 --> 00:35:49.769
out which device caused the problem and
include that information in the bug.

00:35:49.769 --> 00:35:51.739
And what about this problem?

00:35:51.739 --> 00:35:57.049
Is this a problem that I can see
if I log out and I log back in?

00:35:57.050 --> 00:35:58.860
What if I restart the machine?

00:35:58.860 --> 00:36:00.849
Does this problem still occur?

00:36:00.849 --> 00:36:05.710
If I put the machine to sleep and
wake it up does that have any effect?

00:36:05.710 --> 00:36:10.099
What about if I turn the machine off and power it back on?

00:36:15.550 --> 00:36:23.310
Next it's important to describe what you expected to
see and how that differed from what you actually saw.

00:36:23.309 --> 00:36:27.750
Say you wrote up a bug and said I was using
this program and I saw a purple triangle.

00:36:27.750 --> 00:36:31.820
And the engineer reads the bug looks at it and says.

00:36:31.820 --> 00:36:34.930
Of course you saw a purple triangle
that's what he was supposed to see.

00:36:34.929 --> 00:36:38.739
This is great behaves correctly and sends it back to you.

00:36:38.739 --> 00:36:44.699
And maybe, instead of a purple triangle you expected
to see a green triangle or maybe a purple sphere.

00:36:44.699 --> 00:36:50.159
So instead, write in the bug what you expected to
see and how that differed from what you actually saw

00:36:50.159 --> 00:36:53.529
to make it clear to the engineer
why you thought that was a problem.

00:36:53.530 --> 00:36:58.870
In the final part of a bug's description is the workaround.

00:36:58.869 --> 00:37:02.710
If your problem has a work around it's
important to describe that in the bug.

00:37:02.710 --> 00:37:04.110
This does two things.

00:37:04.110 --> 00:37:08.840
First, it might help the engineer
understand the cause of the problem.

00:37:08.840 --> 00:37:14.870
And second, if a work around is present you can let the
engineers know that this problem may be less important

00:37:14.869 --> 00:37:20.269
to you than another problem for
which no work around yet exists.

00:37:20.269 --> 00:37:24.070
Once you've done writing up your bug
description it's important to read over the bug

00:37:24.070 --> 00:37:26.269
and make sure that it makes sense to you.

00:37:26.269 --> 00:37:27.420
Is it in the right order?

00:37:27.420 --> 00:37:30.289
Do you have all the necessary information
in the description?

00:37:30.289 --> 00:37:32.550
If there's someone else around have
them look at your bug and make sure

00:37:32.550 --> 00:37:37.560
that it makes sense to them if they were the engineer.

00:37:37.559 --> 00:37:47.219
Now let's take a look at the third part of
a good bug report, data about the problem.

00:37:47.219 --> 00:37:52.819
When you're writing up a bug report there's often a
lot of useful information you can attach to your bug.

00:37:52.820 --> 00:37:57.750
And depending on what type of problem it is
you'll wanna include some of this information.

00:37:57.750 --> 00:38:02.190
If you were to run into a crashing bug
you would wanna include the crash log.

00:38:02.190 --> 00:38:04.820
Remember that crash logs can appear in two places.

00:38:04.820 --> 00:38:10.760
If this is a per user application like mail or
finder or Safari then the crash log will appear

00:38:10.760 --> 00:38:13.610
in the library folder inside your home directory.

00:38:13.610 --> 00:38:19.730
If this is a system daemon like window
server or MDS then the crash log will appear

00:38:19.730 --> 00:38:24.199
in the library folder at the root level of your hard drive.

00:38:24.199 --> 00:38:30.509
Now, when it comes to crash logs you'll see on Tiger and
earlier inside your library folder there's a log folder

00:38:30.510 --> 00:38:35.730
and a crash reporting folder and the files
will named application name.crash.log.

00:38:35.730 --> 00:38:38.909
And the crash will be appended one after another.

00:38:38.909 --> 00:38:41.339
But this has changed in Leopard.

00:38:41.340 --> 00:38:45.990
Now we have individual .crash files for each crash.

00:38:45.989 --> 00:38:53.109
And in your crash reporter folder you'll see files named
application name_date-process ID_

00:38:53.110 --> 00:38:55.470
host name.crash.crash.

00:38:55.469 --> 00:38:59.319
This makes it much easier to find just the crash you want.

00:39:00.469 --> 00:39:04.639
Now if you want to take a look at the
console log to get additional information,

00:39:04.639 --> 00:39:09.299
for example if you run across a program that's thrown
into exception this information is usually written

00:39:09.300 --> 00:39:11.740
in the console, you'll want to look here.

00:39:11.739 --> 00:39:16.679
On Panther and Jaguar in your library
log console folder you'll see a folder

00:39:16.679 --> 00:39:20.199
with your user name and then a file called console.log.

00:39:20.199 --> 00:39:24.449
And then in Tiger instead of your
user name you'll see your user ID.

00:39:24.449 --> 00:39:27.210
But, once again, this has changed on Leopard.

00:39:27.210 --> 00:39:29.880
There is no longer a console log file.

00:39:29.880 --> 00:39:33.590
Instead, we use the apple system logger facility.

00:39:33.590 --> 00:39:37.670
And if you want to see what you receive from
the console log you use the syslog command.

00:39:37.670 --> 00:39:42.200
And you say syslog -k Facility
com.apple.console.

00:39:42.199 --> 00:39:49.899
There are a couple of other logs that are
very helpful depending on the type of problem.

00:39:49.900 --> 00:39:52.910
If you run into a kernel panic, of example, the information

00:39:52.909 --> 00:39:57.269
about the panic will be stored
in library logs panic.log.

00:39:57.269 --> 00:40:04.320
And the system log file in /var/log, contains a lot of
helpful information which, programs will often write

00:40:04.320 --> 00:40:07.120
out should the run into any error condition.

00:40:07.119 --> 00:40:13.940
If you run into a problem related to syncing
there are two log files that you want to attach.

00:40:13.940 --> 00:40:19.789
The first is in your home folder in the library
folder and in the log folder it's a sync folder.

00:40:19.789 --> 00:40:24.190
So second in library applications
report is a sync services folder.

00:40:24.190 --> 00:40:28.550
Attaching this information can be very
helpful when debugging sync problems.

00:40:28.550 --> 00:40:38.600
Now if you run into any performance problem, that is
something is slow or it's hanging or it's unresponsive,

00:40:38.599 --> 00:40:43.079
then it's really helpful to include
a Shark profile with your bug report.

00:40:43.079 --> 00:40:48.009
And with Shark you can profile just the
application or you can profile the entire system,

00:40:48.010 --> 00:40:50.820
if it's an interaction between multiple applications.

00:40:50.820 --> 00:40:55.130
If you don't have Shark installed you
can use the sample command line tool.

00:40:55.130 --> 00:41:00.610
But Shark profiles are much more useful, contain
a lot more information for engineers to analyze.

00:41:00.610 --> 00:41:03.800
And then new in Leopard is this tool called Xray.

00:41:03.800 --> 00:41:10.330
And while Shark is good for recording information about slow
downs or hangs, actually it's good for recording information

00:41:10.329 --> 00:41:15.219
about other types of system activity
like file system usage or memory usage.

00:41:15.219 --> 00:41:19.639
So if you wanted to track down what
leaks were occurring you could use Xray.

00:41:19.639 --> 00:41:23.849
And another really handy feature
of Xray is the UI recorder.

00:41:23.849 --> 00:41:28.130
So you can record what's going on, on
your screen when the problem occurs.

00:41:28.130 --> 00:41:34.579
And when you attach this Xray document to your bug
report the engineer can see exactly what you saw

00:41:34.579 --> 00:41:36.920
on his screen and what you saw on your screen.

00:41:36.920 --> 00:41:41.590
This will completely clear what the problem is.

00:41:41.590 --> 00:41:47.410
There are a couple of command line utilities, which
can be helpful depending on what type of bug you see.

00:41:47.409 --> 00:41:52.349
The fs_usage command lists all of the file system activity.

00:41:52.349 --> 00:41:57.210
And the lsof command lists all
the open files on your machine.

00:41:57.210 --> 00:42:03.789
This is very helpful if you run into a disk that
you can't eject or a volume you can't un mount.

00:42:03.789 --> 00:42:09.420
And if you have this older utility
here Sampler don't use it.

00:42:09.420 --> 00:42:14.650
Instead use the sample command line tool
if that's all you have or use Shark.

00:42:14.650 --> 00:42:17.619
In fact, if you have Leopard we
don't even ship Sampler any more.

00:42:17.619 --> 00:42:21.029
Sampler is now an Xray template.

00:42:21.030 --> 00:42:26.450
You know, people often say a picture
is worth a thousand words.

00:42:26.449 --> 00:42:29.159
And when it comes to bugs this can be true.

00:42:29.159 --> 00:42:30.920
What type of picture to you include in a bug?

00:42:30.920 --> 00:42:33.559
Well you include a screen shot

00:42:33.559 --> 00:42:35.869
Why do you wanna include a screen shot in a bug?

00:42:35.869 --> 00:42:36.989
Well there are a couple of reasons.

00:42:36.989 --> 00:42:40.509
First of all, if you have any sort
of rendering or redraw problem,

00:42:40.510 --> 00:42:43.930
these are often very hard to describe
or they can be very subtle.

00:42:43.929 --> 00:42:49.679
And it's much better to include a picture, which shows
what you saw rather than trying to describe what you saw.

00:42:49.679 --> 00:42:54.329
As I mentioned earlier you run into
something, you don't know what it's called,

00:42:54.329 --> 00:43:00.009
anything where the terminology is unfamiliar
including the screen shots is really helpful.

00:43:00.010 --> 00:43:02.350
So, how do you take a screen shot on Mac OS X?

00:43:02.349 --> 00:43:05.789
Well starting with Tiger you can
use the preview application.

00:43:05.789 --> 00:43:11.070
And if you go to the preview application and you
look under the file menu there's a grab sub menu.

00:43:11.070 --> 00:43:18.600
And there's three items there, which allow you to take a
picture of a selection of a screen, a particular window,

00:43:18.599 --> 00:43:20.809
or the entire screen after a time period.

00:43:20.809 --> 00:43:24.900
And this one's really helpful, if you run into a
problem that requires you to hold down other keys

00:43:24.900 --> 00:43:28.750
and part of the mouse and so you
couldn't pass a keyboard shortcut.

00:43:28.750 --> 00:43:32.909
And when it comes to keyboard short cut there's,
of course, the old standby of command shift three,

00:43:32.909 --> 00:43:35.039
which takes a picture of the entire screen.

00:43:35.039 --> 00:43:38.940
If you push command shift four you've
got a cross hair curser and you can drag

00:43:38.940 --> 00:43:42.340
that to select the part of the screen that you want.

00:43:42.340 --> 00:43:48.920
And if after pressing command shift four you hit the
space bar your curser will change to a camera icon.

00:43:48.920 --> 00:43:54.300
And you can click on the particular window or menu item
you wanted and you'll get a screen shot of just that.

00:43:54.300 --> 00:43:58.160
And there's some new screen shot features in Leopard too.

00:43:59.510 --> 00:44:05.160
Before we get to that I wanted to mention that if you push
the control key when you're taking the screen shot instead

00:44:05.159 --> 00:44:10.609
of being saved to a file on your desktop it'll
be copied to the clip board so you can paste it

00:44:10.610 --> 00:44:15.620
into an image editing program or into
a bug, into a bug report or so on.

00:44:15.619 --> 00:44:21.579
So the new Leopard features, well, one of them is after
you push command shift four and after you start dragging,

00:44:21.579 --> 00:44:24.819
if you push the space bar, they'll
allow you to reposition your selection.

00:44:24.820 --> 00:44:28.510
So, you don't have to start from scratch,
cancel your selection and redo it.

00:44:28.510 --> 00:44:32.860
You can just move it let go of the space
bar and then continue your drag again.

00:44:32.860 --> 00:44:42.050
And if you run into a situation where you don't have
access to the keyboard or you wanna take a picture

00:44:42.050 --> 00:44:48.250
of a remote machine or the problem's occurring say in
log in window where you're not even logged in as a user.

00:44:48.250 --> 00:44:52.250
If you SSH into your machine you can
use the screen capture command line tool

00:44:52.250 --> 00:44:58.030
and say screen capture myfile.png
and it'll save that wherever you'd like.

00:44:58.030 --> 00:45:02.950
Now sometimes a picture isn't enough
to illustrate your problem.

00:45:02.949 --> 00:45:05.279
And in this case a movie can be helpful.

00:45:05.280 --> 00:45:06.640
And there's two ways you can get a movie.

00:45:06.639 --> 00:45:12.679
The first is to use a third party utility like Snapz
Pro, which will record what's going on in your screen.

00:45:12.679 --> 00:45:17.190
The second is to go ahead and grab
your camcorder and film the screen.

00:45:17.190 --> 00:45:22.750
And then you can input that into iMovie and export
it as QuickTime and attach that to your bug.

00:45:22.750 --> 00:45:25.570
Now, sometimes you can't take a
screen shot for other reasons.

00:45:25.570 --> 00:45:28.990
For example, your machine is hung or frozen or unresponsive.

00:45:28.989 --> 00:45:34.169
Or maybe it's a problem with DVD player, which
prevents you from taking screen shot in the normal way.

00:45:34.170 --> 00:45:37.409
In this case, go ahead and grab your digital camera.

00:45:37.409 --> 00:45:42.329
Turn off the flash, point the camera at the
screen, take a picture and attach that to your bug.

00:45:42.329 --> 00:45:50.630
Now if you're taking a screen shot of any dialogue
or any Safari window with a URL or any error message,

00:45:50.630 --> 00:45:54.390
it's important to include the text from
that screenshot in your bug report.

00:45:54.389 --> 00:45:59.900
So there's two things, first it allows people
to search for that particular error in a bug.

00:45:59.900 --> 00:46:03.930
And the second is when you do this it
minimizes the chance of a misunderstanding

00:46:03.929 --> 00:46:07.299
or a transcription error if someone
else transcribes it for you.

00:46:07.300 --> 00:46:15.510
Let's take a look at an example of improving a screen shot.

00:46:15.510 --> 00:46:20.120
So here we have a screen shot and we see these
two buttons and they don't quite look the same.

00:46:20.119 --> 00:46:25.009
One of them is a brush metal button and
one of them is a regular aqua button.

00:46:25.010 --> 00:46:30.540
After you receive this bug you might be a little confused
to what's going on here unless you're really sharp eyed

00:46:30.539 --> 00:46:33.909
and you notice that, you remember that
this is actually from address book.

00:46:33.909 --> 00:46:38.539
So, a better screen shot here would be to
include a screen shot of the entire screen.

00:46:38.539 --> 00:46:41.710
And here we know that those two
buttons came from address book.

00:46:41.710 --> 00:46:46.579
And it's clear, but this is a lot of extra information.

00:46:46.579 --> 00:46:48.989
And we don't need the entire screen
to illustrate the problem.

00:46:48.989 --> 00:46:54.049
And there could be additional things going on in the
background, which are distracting or might be misleading.

00:46:54.050 --> 00:46:59.330
So, instead, it would be good to pick a screen
shot of just the window of address book.

00:46:59.329 --> 00:47:01.049
And we can do it like this.

00:47:01.050 --> 00:47:03.640
Using command shift four and then the space bar.

00:47:03.639 --> 00:47:05.349
And this is a really good screen shot.

00:47:05.349 --> 00:47:10.079
But if we wanted to improve this screen shot even
further we can take this open it up in image editor

00:47:10.079 --> 00:47:12.059
and circle the button, which is the problem.

00:47:12.059 --> 00:47:17.420
And then it is absolutely clear to the person
reading the bug what we thought the problem was.

00:47:17.420 --> 00:47:20.510
Now there are couple of things.

00:47:20.510 --> 00:47:25.070
Well I've just described a lot of information
you can include in your bug report.

00:47:25.070 --> 00:47:28.080
But there are a couple of things you
don't want to include in your bug report.

00:47:28.079 --> 00:47:34.029
The first is any sort of confidential information, if you
have trade secrets or if you have social security numbers,

00:47:34.030 --> 00:47:36.630
don't include that information in your bug report.

00:47:36.630 --> 00:47:40.090
The second is third party applications.

00:47:40.090 --> 00:47:44.829
So if you have an application you're using
that you didn't develop and it's necessary

00:47:44.829 --> 00:47:48.090
to reproduce the problem, don't
include that in your bug report.

00:47:48.090 --> 00:47:52.769
And certainly don't include your personal serial
number for that application in the bug report.

00:47:52.769 --> 00:47:58.769
And of course you don't have to include
all of this information in every bug.

00:47:58.769 --> 00:48:02.789
You want to include only relevant
parts to your particular bug.

00:48:02.789 --> 00:48:10.219
Now, let's move on to the fourth part of a
bug report that is configuration information.

00:48:10.219 --> 00:48:19.980
So, what, here once again is an example of the type of
configuration information you'd wanna include in a bug.

00:48:19.980 --> 00:48:26.820
Now if you would write this problem occurs on Mac OS X
Tiger someone could read this and they would look at it

00:48:26.820 --> 00:48:32.950
and they'd say hum, what's Mac
OS X Tiger mean to him or her?

00:48:32.949 --> 00:48:34.569
There are a lot of different versions of Tiger.

00:48:34.570 --> 00:48:37.090
We have 10.4 through 10.4.9.

00:48:37.090 --> 00:48:42.550
And often we have different builds, for example if we
release a new piece of hardware we'll have a new build

00:48:42.550 --> 00:48:44.740
on Mac OS X for that piece of hardware.

00:48:44.739 --> 00:48:49.239
So it would better to include more specific
version information about Mac OS X.

00:48:49.239 --> 00:48:55.809
So, we could write Mac OS X 10.4.9 8P2137.

00:48:55.809 --> 00:48:58.690
But the problem might involve more than
just the version of the operating system.

00:48:58.690 --> 00:49:03.000
It might be specific to certain types of
machines or certain pieces of hardware.

00:49:03.000 --> 00:49:04.400
So we could start writing more information.

00:49:04.400 --> 00:49:11.490
We could include what type of Mac book we have and what, how
much memory we have, and what type of optical drive we have.

00:49:11.489 --> 00:49:16.279
But this is a lot of work and we might
not get all the information we require.

00:49:16.280 --> 00:49:22.400
So the best way of providing configuration information
is to attach a system profile to your bug report.

00:49:22.400 --> 00:49:24.840
And there are a couple things to
remember about your system profile.

00:49:24.840 --> 00:49:31.780
The first is when you save it from system profiler
to save it in SPX format and not RTF or text.

00:49:31.780 --> 00:49:37.420
This makes sure you include all the information and
it'll also include excerpts from important log files.

00:49:37.420 --> 00:49:42.920
And the second thing to remember is that you
wanna include the system profile from the machine

00:49:42.920 --> 00:49:47.809
in which the problem occurred and not necessarily
the machine from which you're reporting the problem.

00:49:47.809 --> 00:49:55.239
Now, if you're running Windows there
is no system profiler application.

00:49:55.239 --> 00:50:00.750
But if you install QuickTime for Windows you
get this handy program called QTinfo.exe.

00:50:00.750 --> 00:50:04.530
And if you open up QT info there'll
be a screen that looks like this.

00:50:04.530 --> 00:50:10.640
And this has a lot of useful information about
the hardware and software in your system.

00:50:10.639 --> 00:50:14.259
So you can copy information out of there
and include that in your bug report.

00:50:14.260 --> 00:50:24.880
Now, if you have multiple displays it's important to
include information about your display set up in the bug.

00:50:24.880 --> 00:50:29.780
This is especially helpful if you
have any sort of a resolution

00:50:29.780 --> 00:50:34.690
or redraw problem or if you have sleep or wake issues.

00:50:34.690 --> 00:50:36.289
What information do you wanna include?

00:50:36.289 --> 00:50:41.690
Well first how many displays do you have?

00:50:41.690 --> 00:50:48.329
Second, are the additional displays in mirroring
mode or are they in extended desktop mode?

00:50:48.329 --> 00:50:56.009
If you have a PowerBook, iBook, or MacBook,
is the lid of this machine closed or opened?

00:50:56.010 --> 00:50:58.990
What is the physical layout of
these monitors on your desktop?

00:50:58.989 --> 00:51:05.599
And what is the logical layout of them that is how does
the display preference page think they're laid out?

00:51:05.599 --> 00:51:12.519
And finally, which of these displays is the menu bar on?

00:51:12.519 --> 00:51:19.940
Now if your bug involves a particular application, for
example one of the applications that you're developing,

00:51:19.940 --> 00:51:24.010
you'll want to include that application
with your bug report.

00:51:24.010 --> 00:51:30.210
If you're writing a problem about a
particular application it's important

00:51:30.210 --> 00:51:33.769
to include specific version information
about that application.

00:51:33.769 --> 00:51:37.710
It's not enough to say I'm using the current
version, or I'm using the latest version,

00:51:37.710 --> 00:51:40.670
or I'm using the version they shipped with my Mac.

00:51:40.670 --> 00:51:46.110
For example if you're into a problem involving Photoshop,
you can't just say I'm using Adobe Photoshop CS.

00:51:46.110 --> 00:51:52.780
You might need to say I'm using
Adobe Photoshop CS2 9.0.1.

00:51:52.780 --> 00:51:56.560
And if you're using an Apple application
introducing to the version number

00:51:56.559 --> 00:51:59.250
in the above box you can find the build number.

00:51:59.250 --> 00:52:07.780
So in the case of preview on your Leopard CD you can
see previous 3.5.0 build 451.4.

00:52:07.780 --> 00:52:13.140
Remember that versions of software not only change in
software updates but they can change in security updates.

00:52:13.139 --> 00:52:18.379
So it's important to include specific version
information above your application in the bug.

00:52:18.380 --> 00:52:28.099
Now, the third party software, if you're including your
third party software and you need to makes sure that,

00:52:28.099 --> 00:52:37.269
excuse me, if you're, if your problem involved third party
software like kernel extensions or plug ins or haxies

00:52:37.269 --> 00:52:42.610
or input managers what you wanna do is disable
these items and see if the problem still occurs.

00:52:42.610 --> 00:52:48.480
And if the problem goes away then you know the
problem was caused by a particular third party,

00:52:48.480 --> 00:52:54.490
a particular piece of third party
software, and you can attach that to the bug

00:52:54.489 --> 00:52:57.549
or include that information in the bug report.

00:53:01.440 --> 00:53:05.530
Alright, let's move on to reproducibility.

00:53:05.530 --> 00:53:07.170
This part's real easy.

00:53:07.170 --> 00:53:09.360
What is reproducibility mean?

00:53:09.360 --> 00:53:13.599
Well, this is a problem that occurs all the time,
every time I do this particular set of actions.

00:53:13.599 --> 00:53:15.219
This is a problem that's intermittent.

00:53:15.219 --> 00:53:17.609
Does it only occur some of the time?

00:53:17.610 --> 00:53:22.480
Or is this a problem that I saw once
and then I'm unable to reproduce.

00:53:22.480 --> 00:53:28.829
Let's sum up the best practices for writing a bug report.

00:53:28.829 --> 00:53:31.340
So, we start off with the bug's title.

00:53:31.340 --> 00:53:35.350
We then include a summary of the problem.

00:53:35.349 --> 00:53:39.519
We'll include detailed steps required
to reproduce the problem.

00:53:39.519 --> 00:53:45.090
We'll describe what we expected to see and
how that differs from what we actually saw.

00:53:45.090 --> 00:53:49.600
We'll include regression information about
where the problem does and doesn't occur.

00:53:49.599 --> 00:53:53.509
And configuration information about the
machine on which the problem occurred.

00:53:53.510 --> 00:54:01.530
And finally information about any work around that's
available and describe how reproducible the problem is.

00:54:01.530 --> 00:54:04.680
Because this is an Apple session,
I thought it would be helpful

00:54:04.679 --> 00:54:09.159
to include specific information about Apple applications.

00:54:09.159 --> 00:54:15.500
So, what do you do, for example, what do you
need to know about reporting bugs to Apple?

00:54:15.500 --> 00:54:21.929
Well if you're reporting a bug that you encounter
when using your own third party application,

00:54:21.929 --> 00:54:27.339
you have to assume that the people reading the bug
report have never seen your application before.

00:54:27.340 --> 00:54:33.720
And they don't necessarily know what it does and they
don't know your particular application's terminology.

00:54:33.719 --> 00:54:39.769
So as I mentioned earlier it's important to be specific
in your steps to reproduce and describe menu items

00:54:39.769 --> 00:54:45.400
and controls instead of high level terminology
specific to your application's domain.

00:54:49.329 --> 00:54:53.779
If this is a problem with your application,
for example you're Adobe or you're Microsoft,

00:54:53.780 --> 00:54:58.320
you need to make sure that we have access to
your application to reproduce the problem.

00:54:58.320 --> 00:55:06.769
And if your piece of software requires a dongle or
serial number or an activation key of any kind or some sort of user name

00:55:06.769 --> 00:55:10.969
or password, in your bug report
to Apple provide that information.

00:55:10.969 --> 00:55:16.699
And if you're providing a copy of your application
make sure that it's not a time limit or a trial version

00:55:16.699 --> 00:55:20.169
of your application which might expire
before the engineer gets a chance

00:55:20.170 --> 00:55:24.820
to finish investigating and solving the problem.

00:55:24.820 --> 00:55:28.400
So we have three Apple applications I'm going to cover.

00:55:28.400 --> 00:55:31.500
The first is Xcode.

00:55:31.500 --> 00:55:36.389
Now, you're all developers here, which means
you probably spend a lot of time in Xcode.

00:55:36.389 --> 00:55:40.650
So what information do you need to include
when you run into a bug with Xcode?

00:55:40.650 --> 00:55:44.019
Well the most helpful piece of
information is your project file, and,

00:55:44.019 --> 00:55:46.619
if you can attach that to the bug then that's great.

00:55:46.619 --> 00:55:49.159
But sometimes you can't attach your project file.

00:55:49.159 --> 00:55:53.779
It might be too big or it might have
confidential company information in it.

00:55:53.780 --> 00:55:59.070
In that case it's important to
include whatever project data you can.

00:55:59.070 --> 00:56:03.220
For example, if you can write a test
application, which demonstrates the problem,

00:56:03.219 --> 00:56:06.109
then go ahead and attach that to the bug.

00:56:06.110 --> 00:56:11.099
Next if you have a particular unit
test attach that to the bug.

00:56:11.099 --> 00:56:12.880
A failing unit test is really helpful.

00:56:12.880 --> 00:56:14.750
It's very specific.

00:56:14.750 --> 00:56:20.099
If you can write any sample code at all which
demonstrates the problem, even it say its only three lines.

00:56:20.099 --> 00:56:23.739
Then include this in the bug.

00:56:23.739 --> 00:56:32.959
And finally, if your problem occurs only with particular
sets of data then attach this data to the bug report

00:56:32.960 --> 00:56:38.780
and mention that it requires this data to
reproduce the problem and it doesn't always occur.

00:56:38.780 --> 00:56:45.980
When you're writing bugs against Xcode it's
important to include all kinds of evidence.

00:56:45.980 --> 00:56:52.130
You want to include circumstantial evidence especially
If you run into any sort of intermittent problem.

00:56:52.130 --> 00:56:57.510
Even if the engineer can't reproduce the problem they
might be able to use this circumstantial evidence

00:56:57.510 --> 00:57:00.400
to prevent the problem from occurring in the future.

00:57:00.400 --> 00:57:09.260
When, remember also that Xcode changes at
a different schedule that Mac OS X itself.

00:57:09.260 --> 00:57:14.390
So it's important to include information
about what version of Xcode you're using.

00:57:14.389 --> 00:57:16.940
You can go to the Xcode menu and choose a better Xcode.

00:57:16.940 --> 00:57:21.309
And you'll get information about the version
of Xcode and its underlying frame works.

00:57:21.309 --> 00:57:30.500
If you're using developer tools other than those provided
with your Xcode DVD for example from think or Darwin ports,

00:57:30.500 --> 00:57:35.739
or if you've compiled your own compiler it's important to
include specific version information about your version

00:57:35.739 --> 00:57:40.469
of GCC and your version of GDB and LD in your bug report.

00:57:40.469 --> 00:57:49.389
If you run into any sort of compilation or leaking
problem then including the build log from Xcode is key.

00:57:49.389 --> 00:57:54.789
Xcode will create two types of temporary files.

00:57:54.789 --> 00:58:00.659
The first is a caches file in your
library caches Xcode folder.

00:58:00.659 --> 00:58:02.629
Try moving the file aside.

00:58:02.630 --> 00:58:07.920
If the problem goes away then it's likely that a
corrupt cache file was the cause of your problem.

00:58:07.920 --> 00:58:10.530
And attach that to the bug if you can.

00:58:10.530 --> 00:58:16.600
The second thing is Xcode creates a build directory where
it puts intermediate representations like .o files.

00:58:16.599 --> 00:58:17.920
Try moving this aside.

00:58:17.920 --> 00:58:23.000
If the problem goes away, once again it was likely
caused by a problem with your intermediate file.

00:58:23.000 --> 00:58:26.260
And if you can attach that to your bug report that's great.

00:58:26.260 --> 00:58:34.320
If you're running on Tiger you could try disabling the 0
link feature of Xcode and see if the problem goes away.

00:58:34.320 --> 00:58:37.410
If it does, include that information in your bug report.

00:58:37.409 --> 00:58:43.449
Now, Xcode 3 on Leopard no longer has your
link so you don't need to worry about this.

00:58:43.449 --> 00:58:48.659
The second Apple application or Apple
technology I'm going to talk about is Java.

00:58:48.659 --> 00:58:53.129
What is it you need to know about reporting Java bugs?

00:58:53.130 --> 00:59:00.000
Well, if you run into a Java application that hangs, you,
getting a sample of Shark profile will tell you information

00:59:00.000 --> 00:59:05.360
about the Mac OS X threads but you're probably also
interested in information about the Java threads.

00:59:05.360 --> 00:59:10.880
If you go to the terminal and you
type kill -QUIT in the process ID

00:59:10.880 --> 00:59:14.880
of the Java process you'll get a
SATrace of the Java threads.

00:59:14.880 --> 00:59:18.130
This will appear in different places
depending on how your application was launched.

00:59:18.130 --> 00:59:19.410
It could appear in terminal.

00:59:19.409 --> 00:59:21.449
It could appear in the console log.

00:59:21.449 --> 00:59:25.539
If you're using Safari and you've enabled the bug menu,

00:59:25.539 --> 00:59:29.289
as we'll talk about in a minute you can
see stuff in the Safari Java console.

00:59:29.289 --> 00:59:32.929
If you're running this from Xcode this
information might appear in your Xcode run log.

00:59:32.929 --> 00:59:39.909
Now, when a Java application crashed on Tiger in addition

00:59:39.909 --> 00:59:45.909
to your regular crash log you would see a
Java native crash log in library logs Java.

00:59:45.909 --> 00:59:52.670
And you would see JavaNativeCrash_pid and
the process ID of the process that crashed that log.

00:59:52.670 --> 00:59:55.309
And so you would want to attach that
as well as the regular crash log.

00:59:55.309 --> 00:59:58.340
But now, on Leopard you don't need
to worry about that any more.

00:59:58.340 --> 01:00:06.309
In your regular crash log there'll be information about
the Java threads as well as the native Mac OS X threads.

01:00:06.309 --> 01:00:12.799
If you're using a preview version of Java, it's
important to include that information in your bug report.

01:00:12.800 --> 01:00:18.240
And you can prefix your bug title with the version
of the Java developer preview you're using.

01:00:18.239 --> 01:00:22.569
And when you're using a preview
it's important to regress this bug.

01:00:22.570 --> 01:00:27.610
Is this a problem that only occurs with a preview
or does it occur with the shipping version as well?

01:00:27.610 --> 01:00:32.120
When I say version of Java it's not
enough to say I'm using java 1.5.

01:00:32.119 --> 01:00:34.880
You wanna include the full version of Java you're using.

01:00:34.880 --> 01:00:40.140
In this case Java 1.5.0_11.

01:00:40.139 --> 01:00:44.859
But in fact this here is not the full
set of version information for Java.

01:00:44.860 --> 01:00:49.340
If you go into the terminal and you type java
-version, you'll get all this information.

01:00:49.340 --> 01:00:54.090
So, if you're writing a Java bug, it's best to do
this and paste this information into your bug report.

01:00:54.090 --> 01:00:59.809
That way the Java team knows exactly what version
of Java you were using when you saw your problem.

01:00:59.809 --> 01:01:08.719
Now, if you have a JUnit, unit test that reproduces the
problem then it's really handy to attach that to you bug.

01:01:08.719 --> 01:01:09.589
This says two things.

01:01:09.590 --> 01:01:14.940
First, it ensures that the Java team saw
exactly the same problem that you saw.

01:01:14.940 --> 01:01:20.630
And second, it's possible that they'll
include this unit test in their test suite,

01:01:20.630 --> 01:01:25.329
which means once they fix this problem
it won't reoccur in the future.

01:01:25.329 --> 01:01:31.309
And finally the last piece of Apple
specific information is about Safari.

01:01:31.309 --> 01:01:38.590
So, if you run into a Safari bug, one of the
things you might wanna do is look at the web page

01:01:38.590 --> 01:01:44.530
and other web browsers like Firefox or Opera,
or Camino and see if the problem goes away.

01:01:44.530 --> 01:01:51.720
If the problem goes away then perhaps what
the site is doing is using browser detection

01:01:51.719 --> 01:01:56.799
and preventing different content to different web browsers.

01:01:56.800 --> 01:02:04.539
So, you go into the terminal an type this command, defaults
write com.apple.Safari IncludeDebugMenu 1.

01:02:04.539 --> 01:02:07.340
And quit Safari and re launch it.

01:02:07.340 --> 01:02:11.809
And now at the end of your menu
bar you'll see this debug menu.

01:02:11.809 --> 01:02:19.650
And you can tell Safari to go and pretend that it's another
browser like Netscape, or Firefox, or Internet Explorer for Windows.

01:02:19.650 --> 01:02:25.099
So go back to the site and see what happens.

01:02:25.099 --> 01:02:28.159
Now, suppose that the problem goes away completely.

01:02:28.159 --> 01:02:30.889
In this case you know the site's using browser detection.

01:02:30.889 --> 01:02:33.099
And you can go ahead and write up a bug.

01:02:33.099 --> 01:02:37.610
The second thing you can do is what
happens if the problem changes?

01:02:37.610 --> 01:02:42.309
For example, they wouldn't let you into the site at all but
now they let you into the site and it doesn't work properly.

01:02:42.309 --> 01:02:47.029
Well this could indicate the site is
using browser specific JavaScript

01:02:47.030 --> 01:02:52.810
or HTML like the old document.all
dom method pre dom method.

01:02:54.590 --> 01:02:59.460
The Safari team works closely with
website developers to ensure

01:02:59.460 --> 01:03:04.559
that websites are written using web standards
therefore will work with all modern web browsers.

01:03:04.559 --> 01:03:09.449
So, if you run into either of these situations
go ahead and write up a bug even when it's

01:03:09.449 --> 01:03:12.839
a bug with the website itself and not with Safari.

01:03:12.840 --> 01:03:19.289
Now if you run into a problem with Safari and
you're using a particular plug in it's important

01:03:19.289 --> 01:03:24.170
to include specific version information about that plug in.

01:03:24.170 --> 01:03:29.710
Another handy thing you can include
in bug reports is a web archive.

01:03:29.710 --> 01:03:35.639
Web archive ensures that the Safari
engineers see the same web page that you saw.

01:03:35.639 --> 01:03:43.969
And this is particularly important for new, for
websites that change frequently like new sites or blogs.

01:03:43.969 --> 01:03:50.159
Another handy thing you can do is go to webkit.org
and download the nightly build a WebKit.

01:03:50.159 --> 01:03:52.279
And you can see how the sit looks in WebKit.

01:03:52.280 --> 01:03:56.900
And if the problem occurs in Safari but doesn't
occur in WebKit then there's a good chance

01:03:56.900 --> 01:03:59.090
that I'll be fixed in the next version of Safari.

01:03:59.090 --> 01:04:00.730
But what if the opposite happens?

01:04:00.730 --> 01:04:06.170
Say the site in question that you're developing
looks great in Safari but doesn't work in WebKit.

01:04:06.170 --> 01:04:09.380
Well, in this case you should definitely file a bug.

01:04:09.380 --> 01:04:14.250
It's important that sites that worked
in Safari continue to work in Safari.

01:04:14.250 --> 01:04:19.469
Safari team treats regressions
as one of their top priorities.

01:04:19.469 --> 01:04:25.219
When you're filing a bug about a particular site it's
important that you include the full URL to the page

01:04:25.219 --> 01:04:29.829
in question, which demonstrates the
problem and not just the name of the site.

01:04:29.829 --> 01:04:35.349
If the site requires a user name or a
password to access here's what you should do.

01:04:35.349 --> 01:04:40.929
If this is your own site that you manage then go
ahead and provide this information to the Safari team.

01:04:40.929 --> 01:04:44.349
But if this is someone else's site like if
it's your bank's site or your broker's site,

01:04:44.349 --> 01:04:46.819
don't include your information in the bug report.

01:04:46.820 --> 01:04:51.309
But, instead, provide contact information
for the financial institution

01:04:51.309 --> 01:04:56.269
so the Safari team can get a hold
of them and get a test account.

01:04:56.269 --> 01:04:58.420
What about fire walls or proxy servers?

01:04:58.420 --> 01:05:00.579
Well, if you're running a fire wall or proxy server

01:05:00.579 --> 01:05:04.940
and that's causing problems then you'll wanna
include specific information about the platform

01:05:04.940 --> 01:05:09.780
and version of the software in your bug report.

01:05:09.780 --> 01:05:15.410
And finally the gold standard of a Safari bug,
what's the gold standard of the Safari bug?

01:05:15.409 --> 01:05:16.670
Well, it's called a reduction.

01:05:16.670 --> 01:05:17.559
What's a reduction?

01:05:17.559 --> 01:05:24.049
A reduction is the smallest part of a web
page necessary to demonstrate the problem.

01:05:24.050 --> 01:05:24.810
How do you make one?

01:05:24.809 --> 01:05:28.029
Well you take a look at the source of the
web page and you start removing pieces.

01:05:28.030 --> 01:05:31.100
When the problem goes away you start adding pieces back.

01:05:31.099 --> 01:05:35.929
Now, it's certainly not necessary
to either test on a WebKit nightly

01:05:35.929 --> 01:05:38.569
or include a reduction with your Safari bug report.

01:05:38.570 --> 01:05:39.840
You can still file a bug.

01:05:39.840 --> 01:05:48.350
But if you do, do this then you're making the Safari
team very happy and we certainly appreciate it.

01:05:48.349 --> 01:05:51.699
Now, last month it was Memorial Day and some

01:05:51.699 --> 01:05:57.199
of you hopefully had the weekend off
and maybe got to enjoy a nice barbecue.

01:05:57.199 --> 01:06:03.719
And suppose being a Mac geek you wanted
to show off your Mac to your friends.

01:06:03.719 --> 01:06:08.189
And you said okay, you know, check this out
we have this new program it's called iChat

01:06:08.190 --> 01:06:11.360
and we can have these video conferences
and it's super easy and it's great.

01:06:11.360 --> 01:06:16.900
And you go and you say you wanna have a video
chat with your friend Maude who is in Montana.

01:06:16.900 --> 01:06:22.660
And you open up iChat and you try and chat
with Maude in Montana and the chat doesn't work.

01:06:22.659 --> 01:06:27.059
Oh no. And you feel really bad because your
friend thinks you don't know what you're doing.

01:06:27.059 --> 01:06:28.619
And you're like oh, okay.

01:06:28.619 --> 01:06:32.380
So, what we have now is a good story.

01:06:32.380 --> 01:06:38.410
How is it we can transform this story that
I'm telling you into a good bug report?

01:06:38.409 --> 01:06:44.029
Well let's take a look at what happened
how we can transform that into a bug.

01:06:44.030 --> 01:06:46.360
First thing we wanna think about is the bug's title.

01:06:46.360 --> 01:06:48.200
And notice the title of the bug I've written here.

01:06:48.199 --> 01:06:52.689
It says, iChat video chat failed with QLink XJ47 router.
G

01:06:52.690 --> 01:06:58.059
Because, this problem occurred at someone else's house and
not at my house, and what was different about their house?

01:06:58.059 --> 01:06:59.880
Well, they had a different type of router.

01:06:59.880 --> 01:07:06.200
And notice how I've prefixed the bug with
the version of Mac OS X I was using.

01:07:06.199 --> 01:07:12.189
Next, do include configuration information because this is
about a video chat, I'm including configuration information

01:07:12.190 --> 01:07:17.280
about two machines, my machine, the MacBook
and Maude's machine the iBook G4

01:07:17.280 --> 01:07:20.480
who happens to be using a fire wire iSight.

01:07:20.480 --> 01:07:26.139
And because this is a different type of router I'm including
the version information for the firm ware in the router.

01:07:26.139 --> 01:07:28.230
And I've done some regression on this bug.

01:07:28.230 --> 01:07:31.860
I know this works at home all the time
because I talk to Maude on a regular basis.

01:07:31.860 --> 01:07:34.230
And it works with my LinkSys router.

01:07:34.230 --> 01:07:37.240
And I know that it works with the DMZ both on and off.

01:07:37.239 --> 01:07:39.659
And I know it works if I use port forwarding.

01:07:39.659 --> 01:07:42.210
And I'm including all this information in the bug.

01:07:42.210 --> 01:07:46.990
And there's a couple of handy types of
files you could include in this bug report.

01:07:46.989 --> 01:07:53.159
For example if you're using Mac OS X 10.4.7
or later when a chat connection attempt fails

01:07:53.159 --> 01:07:57.599
in audio video chat you'll see a
report bug to Apple sheet come up.

01:07:57.599 --> 01:08:02.889
And you can disclose that sheet, copy the information
about the error and paste that into your bug report.

01:08:02.889 --> 01:08:05.920
And I wanna include information about
what type of accounts I was using,

01:08:05.920 --> 01:08:10.849
for example .mac accounts or
AIM accounts or Jabber accounts.

01:08:10.849 --> 01:08:13.690
So let's sum up what we've talked about today.

01:08:13.690 --> 01:08:17.199
Well, we've talked about what is a bug and why we file bugs.

01:08:17.199 --> 01:08:20.210
And we've talked about all the parts of a good bug report.

01:08:20.210 --> 01:08:30.810
And we've used a story, a real world example to illustrate
how we would apply this information to create a bug.

01:08:30.810 --> 01:08:35.740
So, while great bug reports will
help you make great software.

01:08:35.739 --> 01:08:39.359
And when you have great software you have happy customers.

01:08:39.359 --> 01:08:45.599
So, I encourage you to write a bug today or
either take this information that you've learned,

01:08:45.600 --> 01:08:48.500
find something that's bothering you because
there's gotta be something that's bothering you.

01:08:48.500 --> 01:08:50.770
You've got a beta version.

01:08:50.770 --> 01:08:53.060
And write a bug report today.

01:08:53.060 --> 01:08:55.770
And every but report you write you'll get better at it.

01:08:55.770 --> 01:08:57.020
Practice makes perfect.

01:08:57.020 --> 01:09:03.200
And if you apply these best practices it
helps improve your bug report writing skills.

01:09:03.199 --> 01:09:09.510
So, when you write a bug report you will get
the kind of action that you were hoping for.

01:09:09.510 --> 01:09:11.640
Thank you very much.

01:09:11.640 --> 01:09:16.660
Now, before we go I wanna include
a couple of handy resources

01:09:16.659 --> 01:09:19.159
that you might find helpful when writing bug reports.

01:09:19.159 --> 01:09:25.979
The first is of course our Bug Reporting Best Practices
document on the developer.apple.com web site.

01:09:25.979 --> 01:09:31.429
There's a tech note you might find handy, tech
note 2124 called Mac OS X Debugging Magic.

01:09:31.430 --> 01:09:34.880
If you're writing any sort of low level
bugs you'll find this very helpful.

01:09:34.880 --> 01:09:42.600
The Apple Publication Style Guide is a good list
of information about how we describe things.

01:09:42.600 --> 01:09:50.020
Of course, the Apple Human Interface Guidelines describes
the controls and other user interface elements you'll see.

01:09:50.020 --> 01:09:56.270
You'll wanna get the chat tools from
developer.apple.com/tools/download.

01:09:56.270 --> 01:10:03.490
You might find Amit Singh's Mac OS X internals book very
helpful in gaining understanding in how the system works.

01:10:03.489 --> 01:10:07.590
And when it comes to the writing part there's
a handy blog called Good Words Right Order,

01:10:07.590 --> 01:10:10.659
which takes a look at analyzing writing.

01:10:10.659 --> 01:10:16.739
And of course the Chicago Manual of Style if you're really
interested in more about how to write effectively,

01:10:16.739 --> 01:10:21.489
and now the one with the answers to
all of your questions Amy Louv.