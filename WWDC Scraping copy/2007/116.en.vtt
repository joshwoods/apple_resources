WEBVTT

00:00:14.609 --> 00:00:18.969
>> So I'd like to introduce without any
further delay Matt Neuburg, author, teacher,

00:00:18.969 --> 00:00:22.489
programmer and I can attest to
really an all around cool dude.

00:00:22.489 --> 00:00:23.709
( Applause )

00:00:23.710 --> 00:00:26.469
>> Thanks.

00:00:26.469 --> 00:00:33.159
So can we switch so the demo machine
and let's just jump right into it.

00:00:33.159 --> 00:00:40.129
So I'm the author of this book Apple Script: The Definitive
Guide published by O'Reilly, but I'm actually not going

00:00:40.130 --> 00:00:45.719
to -- thank you, I'll sign your copy later but
I'm actually not going to talk all that much

00:00:45.719 --> 00:00:51.159
about Apple Script per se during the course of this, I want
to talk about the technology that underlies Apple Script

00:00:51.159 --> 00:00:56.709
because that's what it is that makes Apple Script
work and what it is that makes Apple Script cool.

00:00:56.710 --> 00:00:59.590
When I got started in computers things were kind of crude.

00:00:59.590 --> 00:01:04.310
You couldn't actually run more than one
program on the computer at the same time.

00:01:04.310 --> 00:01:11.659
Basically whatever was running just took over and then there
was that thing that multiple finder thing that happened

00:01:11.659 --> 00:01:16.219
in System 7 where you could sort
of run two programs simultaneously.

00:01:16.219 --> 00:01:20.480
Then System 7 came along and you were
really running two programs simultaneously

00:01:20.480 --> 00:01:25.920
and along with that System 7 introduced the notion
that two programs running simultaneously would be able

00:01:25.920 --> 00:01:32.099
to send little messages to one another, one of them
would be able to tell the other what to do just like as

00:01:32.099 --> 00:01:36.979
if it was the user holding the mouse and the
keyboard except it was telling it what to do

00:01:36.980 --> 00:01:42.600
in some other way that's an Apple Event, the
little message that is send from one program --

00:01:42.599 --> 00:01:49.799
one running program to another and that's what I'm calling
a packet of power because what does that let you do?

00:01:49.799 --> 00:01:57.780
It let's you tie two programs together so that your program
could be one of these programs, and it could reach out

00:01:57.780 --> 00:02:03.349
and ask some other program for information
or make it do something or some other program

00:02:03.349 --> 00:02:08.400
or the user could use Apple Event to tell your
program what to do, putting things together in ways

00:02:08.400 --> 00:02:14.740
that you never expected that make your program seem
cooler and more powerful, so that's Apple Events.

00:02:14.740 --> 00:02:19.020
It'll help a little if I show you a picture.

00:02:22.909 --> 00:02:27.509
This is a diagram of an Apple Event in action.

00:02:27.509 --> 00:02:34.349
Now, we have two applications which I'm calling the
sender and over on the far right just off the screen

00:02:34.349 --> 00:02:37.829
because of slight resolution oddities
that we're having for some reason --

00:02:37.830 --> 00:02:44.850
no, it's just because that's where I positioned the window
-- we have another application which I call the target.

00:02:44.849 --> 00:02:51.259
So the sender is going to send an Apple Event to the
target and in order to do that it assembles the Apple Event

00:02:51.259 --> 00:02:56.489
and it assembles it out of two pieces which
you may think of like a letter in an envelope.

00:02:56.490 --> 00:03:02.030
So the letter, the contents of the letter, is
the Apple Event this is what I want you to do

00:03:02.030 --> 00:03:04.360
like a telegram: Come at once; I need you.

00:03:04.360 --> 00:03:14.640
Okay. And around that is an envelope saying what's to be
done with the Apple Event what is the target application

00:03:14.639 --> 00:03:20.529
and also it includes some other information like how
long the sender is willing to wait around for a reply

00:03:20.530 --> 00:03:23.699
to come back because every Apple Event has a reply.

00:03:23.699 --> 00:03:27.280
No, it's just -- I think it's just me.

00:03:27.280 --> 00:03:30.650
I just didn't move the window.

00:03:30.650 --> 00:03:40.900
So that is then handed to the system and the system acts
like a kind of postman and the postman must then go out

00:03:40.900 --> 00:03:46.770
and see if it can find the target and, if it can, it
hands the target the Apple Event which is shown up here.

00:03:46.770 --> 00:03:54.780
Now notice this line this -- this column of things that have
four letters and a backward slash and four more letters,

00:03:54.780 --> 00:03:57.390
what is that supposed to represent in the diagram?

00:03:57.389 --> 00:04:04.099
Well, every Apple Event is actually encoded as
two groups of these four letters which are --

00:04:04.099 --> 00:04:06.729
these four letters are called four letter codes.

00:04:06.729 --> 00:04:11.129
Apple Events are totally -- almost totally
composed of four letter codes like this,

00:04:11.129 --> 00:04:16.949
vast majority of Apple Events are these kinds
of four letter codes and what this is supposed

00:04:16.949 --> 00:04:21.039
to represent conceptually is the
notion that these are Apple Events

00:04:21.040 --> 00:04:25.730
to which the target application is prepared to respond.

00:04:25.730 --> 00:04:31.730
If you send an Apple Event to a target application
that isn't ready to deal with that particular set

00:04:31.730 --> 00:04:35.450
of four letter codes that particular Apple
Event who knows what's going to happen.

00:04:35.449 --> 00:04:38.420
So I put up a sort of picture here saying well this --

00:04:38.420 --> 00:04:45.949
this target application is in some way advertising these are
the Apple Events that you may send to me; so we send one.

00:04:45.949 --> 00:04:50.539
When the target -- now meanwhile
the sender is waiting around.

00:04:50.540 --> 00:04:52.879
He's waiting around for the results of this thing.

00:04:52.879 --> 00:04:58.629
Now meanwhile the target then does whatever
the Apple Event tells him to do and --

00:04:58.629 --> 00:05:01.969
or something might go wrong and he generates an error.

00:05:01.970 --> 00:05:08.330
One way or another he puts something back in the
envelope, same envelope that the system is holding on to,

00:05:08.329 --> 00:05:12.089
that's the reply and then he says
I put my reply in the envelope.

00:05:12.089 --> 00:05:17.149
I've let go thank you very much and the system then
turns right around hands that back to the sender.

00:05:17.149 --> 00:05:19.919
Why does the system have to be
involved in this story at all?

00:05:19.920 --> 00:05:22.930
Because these are two running applications.

00:05:22.930 --> 00:05:27.240
They're independent, there's many a slip twixt
the cup and the lip, anything could go wrong.

00:05:27.240 --> 00:05:28.079
All right.

00:05:28.079 --> 00:05:31.099
It may be that the target application is missing in action.

00:05:31.100 --> 00:05:35.660
It may be that the target application takes
two hours to perform whatever it was told to do

00:05:35.660 --> 00:05:39.010
and the sender is not willing to wait around
that long, all kinds of things could happen.

00:05:39.009 --> 00:05:44.709
Also, when I say system here, I could be talking about
a much more complicated postal system than the system

00:05:44.709 --> 00:05:48.649
on one machine, for example, Apple
Events can travel across the internet.

00:05:48.649 --> 00:05:51.889
They can travel across the local
network from one machine to another.

00:05:51.889 --> 00:05:57.269
So that system in the middle, the postman,
is supposed to be shorthand for all of that.

00:05:57.269 --> 00:06:03.899
So that's a diagram of an Apple Event.

00:06:03.899 --> 00:06:12.269
Now, we are now in an application that I commonly
use for sending Apple Events using Apple Script,

00:06:12.269 --> 00:06:16.479
namely Script Debugger which is written by Mark Albrecht
who is sitting right up front here

00:06:16.480 --> 00:06:19.900
and the man without whom I probably
wouldn't be saying any of this.

00:06:19.899 --> 00:06:24.919
And the reason I'm showing you this is
because I want to show you a dictionary --

00:06:24.920 --> 00:06:30.470
that's probably not the one I want to show you.

00:06:30.470 --> 00:06:33.110
Yeah, never mind that.

00:06:33.110 --> 00:06:35.500
Thanks a lot.

00:06:37.470 --> 00:06:52.880
This is a thing called a dictionary and an application which
is scriptable by Apple Events usually is Apple Scriptable.

00:06:52.879 --> 00:06:58.659
It's scriptable by Apple Script and the way that
it advertises to the world that is scriptable

00:06:58.660 --> 00:07:03.480
by Apple Script involves putting
up a dictionary and you will notice

00:07:03.480 --> 00:07:08.420
that this dictionary contains English
terms for English-like terms.

00:07:08.420 --> 00:07:13.759
So -- and those terms have to do with the kinds
of things that this application deals with.

00:07:13.759 --> 00:07:23.379
So, for example, iPhoto can deal with an album that makes
sense and an album is going to contain things like photos.

00:07:23.379 --> 00:07:27.610
So we run down here and we say, sure enough
there's -- there's an element of a --

00:07:27.610 --> 00:07:32.210
of an album called a photo and then
we can look at what phots consists of

00:07:32.209 --> 00:07:36.099
and sure enough photos have call kinds
of properties, a photo has a date.

00:07:36.100 --> 00:07:44.220
Now every one of these English-like terms is
actually one of those four-letter codes and, in fact,

00:07:44.220 --> 00:07:47.920
the reason I'm using Script Debugger to show you
this is that Script Debugger, being really cool,

00:07:47.920 --> 00:07:50.860
let's me simply show you the four-letter codes.

00:07:52.009 --> 00:08:02.029
So, when you talk about -- when you talk in
Apple Script about the dimensions of a photo,

00:08:02.029 --> 00:08:06.869
that's translated into the four-letter code PDIM.

00:08:06.870 --> 00:08:11.590
When you talk about the height of a photo,
that's translated into the four letters PHIT.

00:08:11.589 --> 00:08:15.699
When you talk about -- and so on and so forth
and the same thing is true for commands.

00:08:15.699 --> 00:08:23.019
You'll remember that earlier on I showed you those sets of
eight letters -- let's just pick a command, assign keyword.

00:08:23.019 --> 00:08:32.049
I just picked that one out of the blue that is
actually the eight letters IPHO followed by AKWD.

00:08:32.049 --> 00:08:39.079
So the job of the dictionary is two-fold,
one it is two advertise both to machines

00:08:39.080 --> 00:08:41.480
and to human beings this is how you talk to me.

00:08:41.480 --> 00:08:46.500
These are the kinds of Apple Events that I receive;
the other is to allow Apple Events to consist

00:08:46.500 --> 00:08:53.700
of four-letter codes but the human interface to Apple Events
to consist of English-like terms because you would not want

00:08:53.700 --> 00:08:58.740
to look at a raw Apple Event; it's
too horrible to deal with.

00:08:58.740 --> 00:09:02.129
Nevertheless, I'm now going to show you one.

00:09:02.129 --> 00:09:06.820
So, if you have -- if you have any
qualms about that, this is the time.

00:09:11.360 --> 00:09:15.720
What I'm going to do is I'm going to send an
Apple Event, and I'm going to capture it as I do,

00:09:15.720 --> 00:09:17.610
and I'm going to show you the Apple Event.

00:09:17.610 --> 00:09:21.539
Now the particular Apple Event that I'm going to
show you is going to be directed at Apple Mail

00:09:21.539 --> 00:09:25.149
and I've chosen this Apple Event
because I find it rather compelling.

00:09:25.149 --> 00:09:32.240
Here's what I'm going to say, I'm going to
say, tell application mail to get messages

00:09:32.240 --> 00:09:39.919
of inbox whose subject contains
FS5-beta and whose sender contains Mark.

00:09:39.919 --> 00:09:44.839
Now the reason I'm showing you
this is, that's pretty complicated.

00:09:44.840 --> 00:09:50.220
This is going to be a single Apple
Event that expresses that notion.

00:09:50.220 --> 00:09:54.790
Go into the inbox, look at the messages
in the inbox, not just any message

00:09:54.789 --> 00:09:59.689
but the ones whose subject contains the
string and not just those but the ones

00:09:59.690 --> 00:10:04.780
who sender also contains the letters M-A-R-K.

00:10:04.779 --> 00:10:11.949
Nevertheless a single Apple Events will
suffice to say this complicated thing.

00:10:11.950 --> 00:10:19.310
So let me actually run the script and there is over on
the right where the cursor is that is the actual result,

00:10:19.309 --> 00:10:25.029
that is the very one -- the very one message in
the list in question, but we didn't actually get

00:10:25.029 --> 00:10:30.569
to see the Apple Events so, now I'm going to do
it again with the Script Debugger log window open.

00:10:30.570 --> 00:10:36.640
And there lo and behold is the actual Apple Event.

00:10:36.639 --> 00:10:42.519
Now, if you look at it, you will see that it is
almost entirely composed of four-letter codes.

00:10:42.519 --> 00:10:50.039
First of all at the top there's that CORE/GETD
that we saw before in the diagram of Apple Events

00:10:50.039 --> 00:10:55.000
that I showed you that's -- that's how
you say in Apple Event language GET.

00:10:55.000 --> 00:10:57.200
Okay. Now, what is it that you want me to get.

00:10:57.200 --> 00:11:04.860
Well, I want you to get from the inbox that's INMB
on the line that I'm selecting now, the messages,

00:11:04.860 --> 00:11:08.519
that's MSSG on the line that I'm selecting here.

00:11:08.519 --> 00:11:14.809
And now I'm going to tell you what messages, in other words
I want you to give me not just any message but I want you

00:11:14.809 --> 00:11:17.979
to perform a test that's TEST which you see there that's

00:11:17.980 --> 00:11:21.909
that four-letter code and that
test is going to be composite.

00:11:21.909 --> 00:11:25.269
So, I'm telling you how to compose the test.

00:11:25.269 --> 00:11:29.189
It's going to involve two terms joined by AND now
that might look like a three-letter code to you,

00:11:29.190 --> 00:11:31.560
but it's not there is a blank and that
counts as part of the four letters.

00:11:31.559 --> 00:11:34.519
So it's AND blank.

00:11:34.519 --> 00:11:42.509
Okay. And what are the two tests that I have to perform,
well one of them is that the subject should contain

00:11:42.509 --> 00:11:46.529
that CONT this string FS5-beta and the other one is

00:11:46.529 --> 00:11:54.039
that the sender that's SNDR should contain
that's CONT the string MARK that's four letters

00:11:54.039 --> 00:11:56.299
but it's not a four-letter code
it's just an ordinary string.

00:11:56.299 --> 00:12:00.669
So almost this entire thing except for
the part that says FS5-beta and the part

00:12:00.669 --> 00:12:04.059
that says MARK this entire thing
is composed of four-letter codes.

00:12:04.059 --> 00:12:07.829
So you can -- you can obviously see that it was much
more pleasant looking at the Apple Script version

00:12:07.830 --> 00:12:10.730
of that then it is looking at this
and this is why nobody every dares

00:12:10.730 --> 00:12:13.590
to look upon a raw Apple Event;
they're simply too frightening.

00:12:13.590 --> 00:12:20.920
And then here's the reply coming back and the reply is also
an Apple Event, and it's also composed of four-letter codes.

00:12:20.919 --> 00:12:32.379
So -- I've -- I've got the message MSG whose ID ID
blank blank is 16 and, if you go back to the script,

00:12:32.379 --> 00:12:37.720
sure enough it says message ID16 of the inbox.

00:12:38.789 --> 00:12:45.240
So that's what's remain going on behind the scenes
every time Apple Events fly around the system.

00:12:45.240 --> 00:12:51.610
Now a cool thing is that you can do even more than
simply get information you can also give commands.

00:12:51.610 --> 00:12:53.750
So in this script I'm doing even more.

00:12:53.750 --> 00:13:01.860
I'm saying move every one of those messages that I talked
about in the previous example to a different mailbox and so,

00:13:01.860 --> 00:13:09.210
if I run that Apple Event there will actually be a
change in mail -- let's bring mail where we can see it.

00:13:09.210 --> 00:13:13.550
Okay. There it is, now you'll know notice
that there are four messages showing.

00:13:13.549 --> 00:13:15.099
Now I'm going to run this.

00:13:15.100 --> 00:13:26.500
Okay. Ready, one, two, three, go
and sure enough come back over here.

00:13:26.500 --> 00:13:31.169
We now only have three messages, what happened
to the other one, it went into important.

00:13:31.169 --> 00:13:33.679
It did what it was told to do.

00:13:33.679 --> 00:13:38.309
So that's even more power packed into a single Apple Event.

00:13:38.309 --> 00:13:44.149
So there's a grammar of these Apple Events and, in fact,
the reason I'm telling you this is to impress upon you

00:13:44.149 --> 00:13:50.929
that the grammar of the Apple Script language is, in
fact, merely a reflection of the grammar of Apple Events.

00:13:50.929 --> 00:13:56.389
Apple Script works the way it does
because every line -- well, okay.

00:13:56.389 --> 00:14:06.149
-- every expression is one Apple
Event that's a bit rough but it'll do.

00:14:13.509 --> 00:14:19.009
Now this is Microsoft Word and I'm
showing it to you because I would now

00:14:19.009 --> 00:14:24.069
like to show you some examples of why Apple Events are cool.

00:14:24.070 --> 00:14:28.260
Why is it good to be able to do
the kind of thing that I just did.

00:14:28.259 --> 00:14:39.039
Well, I think the answer is that computers are to program,
computers should not just be glorified typewriters,

00:14:39.039 --> 00:14:44.279
computers should do some of our thinking for us and in
particular they should do the kind of thinking and the kind

00:14:44.279 --> 00:14:51.470
of work at which we humans beings are not so good, and
I group those three kinds of things that you would want

00:14:51.470 --> 00:14:54.720
to do with Apple Events into three groups.

00:14:54.720 --> 00:15:02.430
The first groups is what I call repetition and
calculation and so I'm going to show you a little script

00:15:02.429 --> 00:15:04.689
that performs some repetition and calculation.

00:15:04.690 --> 00:15:07.640
This is a real-life example.

00:15:07.639 --> 00:15:10.919
This is a -- this is a book that I wrote about Tiger.

00:15:10.919 --> 00:15:16.929
It's been retitled Take Care of -- Take Control of
Customizing Leopard but, in fact, it isn't about Leopard

00:15:16.929 --> 00:15:22.599
yet it's still about Tiger because Leopard wasn't far
enough along for me to really say anything very useful

00:15:22.600 --> 00:15:28.700
and you'll notice that the figure is numbered
Figure XX that's because I didn't want

00:15:28.700 --> 00:15:35.960
to number the figures beforehand here's
another one that one is also Figure XX --

00:15:35.960 --> 00:15:43.580
here it comes, well, I can't find it but there
are others and they're all numbered figure XX.

00:15:43.580 --> 00:15:56.280
So, yeah there's -- that one that'll do.

00:15:56.279 --> 00:16:02.730
There's lots of other diagrams in there and they're
all numbered Figure XX and the point that I'm making is

00:16:02.730 --> 00:16:09.830
that I -- I haven't bothered to put in the numbers
because I might want to rearrange the figures and, yes,

00:16:09.830 --> 00:16:15.120
there is a kind of auto numbering feature in word,
but it doesn't work as well as I'd like it to.

00:16:15.120 --> 00:16:20.470
It would be better if I could just leave them all until
the last minute and then, when I'm ready to rock and roll

00:16:20.470 --> 00:16:25.070
and we're ready to publish the thing
as a PDF, then I'm going to run through

00:16:25.070 --> 00:16:28.900
and actually create the numbers,
and now I'm going to do that.

00:16:28.899 --> 00:16:32.259
Here's the script that does it, this is
the actual script that is actually used

00:16:32.259 --> 00:16:35.899
in actual real-life by TidBITS Take Control Publishing.

00:16:35.899 --> 00:16:38.949
We actually do this, this is how we write our books.

00:16:38.950 --> 00:16:41.400
We press this button.

00:16:41.399 --> 00:16:44.889
We're now running through and finding all of those
things, and you'll see, if you look down at the bottom,

00:16:44.889 --> 00:16:48.980
you'll see each figure being found
the XX is being changed, 14 that's it.

00:16:48.980 --> 00:16:50.139
So you just saw us go through.

00:16:50.139 --> 00:16:54.080
We found 14 of those Figure XXX things
and they were numbered successively,

00:16:54.080 --> 00:16:58.900
repetition and calculation sure a human
could have done that, find the next one,

00:16:58.899 --> 00:17:01.679
call it Figure 1, find the next one, call it Figure 2.

00:17:01.679 --> 00:17:04.839
Sure as shooting you're going to make some
mistake, or you're going to be completely bored,

00:17:04.839 --> 00:17:08.899
or you'll probably just jump off a cliff
because the job is just so terrible.

00:17:08.900 --> 00:17:11.220
Also, what if there were a hundred of
them, what if there were a thousand

00:17:11.220 --> 00:17:12.769
of them, makes no difference to the computer.

00:17:12.769 --> 00:17:16.289
Computers are good at repetition and calculation.

00:17:16.289 --> 00:17:23.879
So that's the first thing -- that's the first
kind of thing that I like to use Apple Events for.

00:17:23.880 --> 00:17:31.870
Second kind of thing, now I'm bringing up iTunes.

00:17:31.869 --> 00:17:44.899
I can use Apple Events to answer a question that the writers
of an application might not have thought I'd like to ask.

00:17:44.900 --> 00:17:55.420
Now iTunes as you know consists of tracks
and playlists -- where are you iTunes.

00:17:56.470 --> 00:18:07.589
So I've got these playlists down the side and I've got
all the tracks all the songs that are in my music library,

00:18:07.589 --> 00:18:17.509
and I personally do not like there to be any songs in
my music library that are not in some playlist or other.

00:18:17.509 --> 00:18:22.839
I called songs like that, songs that
are not in any playlist, orphans.

00:18:22.839 --> 00:18:28.829
Now it turns out in iTunes there just
doesn't happen to be any simple interface

00:18:28.829 --> 00:18:32.480
for asking the question, where are the orphans.

00:18:32.480 --> 00:18:38.769
There are ways around this and -- and you can find out
quite a lot of information, for example, I can take --

00:18:38.769 --> 00:18:45.230
I'll just take a typical song -- I can
find out what playlist he's part of --

00:18:45.230 --> 00:18:53.009
here's another one, I can find out what playlist he's part
of, but I wouldn't want to have to do that manually for all

00:18:53.009 --> 00:18:57.240
of them, that's a kind of an example of repetition again.

00:18:57.240 --> 00:19:01.710
There's lots and lots of these songs, so I've so
I've written a script that answers this question.

00:19:01.710 --> 00:19:11.289
I'll just run it, here we go, we're off to the races
and the answer comes up, went through all of them,

00:19:11.289 --> 00:19:17.319
found three of them, those are my orphans, and it just
lists their names and sure enough they really are orphans.

00:19:17.319 --> 00:19:23.759
Now the iTunes people could remedy this
situation they could have a feature of the GUI.

00:19:23.759 --> 00:19:28.960
They could have a button or menu item
that says 'find orphans' or 'list orphans'

00:19:28.960 --> 00:19:32.230
but it happens that they didn't think of that.

00:19:32.230 --> 00:19:39.370
Now some people might say that's
bad, my attitude is so what.

00:19:39.369 --> 00:19:45.029
They've made the application scriptable, so I can
find out that information by using Apple Events.

00:19:45.029 --> 00:19:51.619
So it doesn't bother me that they didn't include that
as part of the GUI, I can include it as part of the GUI

00:19:51.619 --> 00:19:57.919
and m I really can include it as part of the GUI
because a feature of iTunes is its got a scripts menu.

00:19:57.920 --> 00:20:04.710
So the script that I just showed you I can put it in
iTunes's script ment it's the last one there orphans

00:20:04.710 --> 00:20:07.549
and then, whenever I want to know the
answer to this question, I just run that.

00:20:07.549 --> 00:20:10.909
So I've actually inserted my own script into iTunes' GUI.

00:20:10.910 --> 00:20:14.920
Why is that possible, because the
people at iTunes were wise enough --

00:20:14.920 --> 00:20:20.490
the people who wrote iTunes were wise enough to realize, we
don't know everything that someone might want to do with us.

00:20:20.490 --> 00:20:23.420
We'll leave ourselves open to be scriptable.

00:20:23.420 --> 00:20:27.009
I'm telling you all of this because I'm
saying, when you write your application,

00:20:27.009 --> 00:20:30.920
you should be thinking about making
yourself scriptable for the very same reason.

00:20:30.920 --> 00:20:33.779
You don't know what people are going to want to do.

00:20:33.779 --> 00:20:39.389
You can't put in every piece of interface,
but you can open yourself to scriptability.

00:20:39.390 --> 00:20:52.450
Finally, the third thing that I like to use scripts
for is to take advantage of existing functionality

00:20:52.450 --> 00:20:56.860
in some applications, so that I don't
have to do any extra programming.

00:20:56.859 --> 00:21:02.289
As you know programers are lazy that's regarded
as a virtue among programers, to be lazy.

00:21:02.289 --> 00:21:05.649
Here is a large text document.

00:21:05.650 --> 00:21:12.060
It happens to be Benjamin Jowett's translation
of Plato's Crito and that happens that I would

00:21:12.059 --> 00:21:17.809
like to know what are the most common words used
in this document, longer than a certain length,

00:21:17.809 --> 00:21:20.119
let's not use words like "the" and "what".

00:21:20.119 --> 00:21:24.359
Now, it's very easy to find that out and, in
fact, I don't even need Apple Script for that,

00:21:24.359 --> 00:21:27.289
I can just use any ordinary scripting
language like Pearl and Ruby.

00:21:27.289 --> 00:21:31.690
It's a text document, we'll just run through make what's
called a histogram count the number of occurrences

00:21:31.690 --> 00:21:35.299
of each individual word, and we're done, but it just
so happens that the people who assigned me the task

00:21:35.299 --> 00:21:39.379
of answering the question would also like a graph.

00:21:39.380 --> 00:21:45.370
Now I do not want to program the making of
a graph, so instantly I start asking myself,

00:21:45.369 --> 00:21:50.959
what programs have I got on my
computer that can make a graph?

00:21:50.960 --> 00:21:56.799
Well, I couldn't think of anything
except for Microsoft Excel.

00:21:56.799 --> 00:22:03.839
Now this is surely not what the Excel people were thinking
they were going to get used for but Excel is scriptable,

00:22:03.839 --> 00:22:12.779
and it does make graphs and that means that I can just
go ahead and hand -- I can perform my histogram count,

00:22:12.779 --> 00:22:17.349
hand the data over to Excel and use Apple
Events to tell it to graph that thing.

00:22:17.349 --> 00:22:31.119
So I'm going to do that right now, so we're off to
the races, there's the data and there's the graph.

00:22:31.119 --> 00:22:32.679
Now isn't that nice.

00:22:32.680 --> 00:22:37.509
This is taking advantage of the
power of different applications.

00:22:37.509 --> 00:22:42.440
You have lots of applications sitting on your
computer that can do always kinds of things and,

00:22:42.440 --> 00:22:44.529
so you can take advantage of their functionality.

00:22:44.529 --> 00:22:48.319
You can take advantage of them as a scriptor or
you can take advantage of them as a programmer.

00:22:48.319 --> 00:22:53.710
You could -- you could write a program that does something
and you don't want to bother to write graph power into it,

00:22:53.710 --> 00:22:59.180
but you can say, well, if you've got Excel, then Excel will
draw the graph, and I'll send it the necessary Apple Event.

00:22:59.180 --> 00:23:03.840
Anyway that's my third example of the
things I like to do with Apple Events,

00:23:03.839 --> 00:23:07.490
taking advantage of existing functionality
so that I can be lazy.

00:23:07.490 --> 00:23:13.509
Often taking advantage of existing functionality in ways
that the guys that wrote the program probably didn't expect.

00:23:13.509 --> 00:23:22.180
( Silence )

00:23:22.180 --> 00:23:34.680
Now, I'm now going to talk about what it would take
for you, your application, to deal with Apple Events,

00:23:34.680 --> 00:23:36.360
and I'm going to look at it from both directions.

00:23:36.359 --> 00:23:38.349
You can be the sender or you can be the target.

00:23:38.349 --> 00:23:40.769
I'll talk about the sender first
and then I'll talk about the target.

00:23:40.769 --> 00:23:43.000
So how can you send Apple Events?

00:23:43.000 --> 00:23:52.559
Well, to send Apple Events, you have to make
Apple Events, and how are you going to do that?

00:23:52.559 --> 00:23:56.750
Well, one way to do it is to simply make raw Apple Events.

00:23:56.750 --> 00:24:00.880
It's a very unpleasant task, this is
a little application that I've written

00:24:00.880 --> 00:24:08.840
that actually creates a raw Apple Event and, if you look
down through this code most of which is Carbon because,

00:24:08.839 --> 00:24:14.159
although, I'm using Cocoa you have to use Carbon calls
in order to actually put the Apple Event together

00:24:14.160 --> 00:24:21.060
from its individual bits, you will see the little bits, the
little four-letter codes in here that typify an Apple Event.

00:24:21.059 --> 00:24:24.859
So you can actually see me putting the whole thing
together I'll scroll down a little this is sure --

00:24:24.859 --> 00:24:29.029
boy oh boy this is sure a lot of code and
let's see what it actually does when we run it.

00:24:29.029 --> 00:24:31.180
So I'll build the application.

00:24:31.180 --> 00:24:35.370
I'll run it -- as soon as it comes up, come on give
me some interface please, thank you very much --

00:24:35.369 --> 00:24:40.399
I'll press the little button and I just sent my Apple
Event and guess what it does, it goes out to BB Edit,

00:24:40.400 --> 00:24:44.680
and it says BB Edit make a new document and make
that new document contain the phrase, "Hello World."

00:24:44.680 --> 00:24:50.160
That's all it does, now that was a heck of a lot of
work in order to make BB Edit say, "Hello World."

00:24:50.160 --> 00:24:53.840
So this is obviously not the kind of
solution that you would like to use,

00:24:53.839 --> 00:24:57.429
making a raw Apple Event is really a lot of work.

00:24:57.430 --> 00:25:02.910
What you'd like is something that's more like
what I would call a language-based solution.

00:25:02.910 --> 00:25:07.970
You'd like to do this more like it
was English, remember the whole point

00:25:07.970 --> 00:25:10.720
about being Apple Scriptable is
that you put up that dictionary.

00:25:10.720 --> 00:25:12.940
I shouldn't have to deal with these four-letter codes.

00:25:12.940 --> 00:25:15.549
I should simply be able to deal with the English-like terms,

00:25:15.549 --> 00:25:17.509
pass through those English-like
terms through the dictionary.

00:25:17.509 --> 00:25:20.809
Get the whole thing automatically translated
into an Apple Event and send it that way.

00:25:20.809 --> 00:25:26.509
Now one way to do that obviously is to do it
in Apple Script, and we can actually do that.

00:25:26.509 --> 00:25:36.299
( Silence )

00:25:36.299 --> 00:25:50.789
So I could go back to Script Debugger, make a new
script, say tell Ap BB Edit activate, make new document,

00:25:50.789 --> 00:25:59.190
set text of document 1 to Hello World, and run it.

00:25:59.190 --> 00:26:10.200
There it is, so that was a little easier and yet the
Apple Event that I made is the very same Apple Event

00:26:10.200 --> 00:26:14.740
that you just saw me construct in
raw form using Cocoa and Carbon

00:26:14.740 --> 00:26:20.130
and there are other language-based
solutions for doing this kind of thing.

00:26:20.130 --> 00:26:28.630
It used to be that Apple Script was sort of the big cookie
on the block, and it sort of still is but, for example,

00:26:28.630 --> 00:26:30.320
now you can do this kind of thing in Ruby.

00:26:30.319 --> 00:26:38.859
In Leopard they'll be a -- they'll be the Ruby
scripting bridge Ruby OSA, this is preLeopard,

00:26:38.859 --> 00:26:42.750
I'm running on a Tiger machine so that doesn't
-- that doesn't exist on my machine yet,

00:26:42.750 --> 00:26:46.130
but I'm using a thing by a guy called Amos
Sanderson (presumed spelling) called Ap Script

00:26:46.130 --> 00:26:49.710
which does exactly the same kind of thing
and this is what I was running before

00:26:49.710 --> 00:26:52.200
when I did that thing with the histogram and Excel.

00:26:52.200 --> 00:26:58.779
Now this is Ruby, so this part is pure Ruby,
here I'm actually creating the histogram.

00:26:58.779 --> 00:26:59.700
I make a hash.

00:26:59.700 --> 00:27:02.410
I go through the words of the document one at a time.

00:27:02.410 --> 00:27:03.320
I hash them right in.

00:27:03.319 --> 00:27:07.759
I count that's it, very, very simple, very, very
fast, this is the kind of thing that Ruby is good at.

00:27:07.759 --> 00:27:13.379
But now look what happens, all of a sudden it looks
like I'm talking to Excel, and look I'm using terms

00:27:13.380 --> 00:27:16.600
that are English-like terms that look
like they came right out of Apple Script.

00:27:16.599 --> 00:27:18.939
I'm telling Excel to activate.

00:27:18.940 --> 00:27:24.070
I'm telling Excel to make a new workbook.

00:27:24.069 --> 00:27:31.710
I'm telling Excel to make a new chart sheet.

00:27:31.710 --> 00:27:36.329
So, I mean, these are -- all this language that
you see down in the bottom half of the window

00:27:36.329 --> 00:27:38.359
that all comes directly out of the dictionary.

00:27:38.359 --> 00:27:39.369
How is this possible?

00:27:39.369 --> 00:27:41.079
It's possible because Ruby is a wonderful language.

00:27:41.079 --> 00:27:48.439
What happens is as soon as I say Excel equals app Microsoft
Excel, app Script this thing by Amos Sanderson just goes out

00:27:48.440 --> 00:27:53.779
and reads the dictionary and because Ruby is so
wonderfully dynamic, it just takes those English-like terms

00:27:53.779 --> 00:27:58.019
and essentially makes them things that
you can say, while you're talking Ruby.

00:27:58.019 --> 00:28:00.359
So you're talking Ruby, but you're talking Apple Script.

00:28:00.359 --> 00:28:02.649
You're using Apple Script's English-like terms.

00:28:02.650 --> 00:28:05.170
So -- and there's other ways to do
this as well, in Leopard, of course,

00:28:05.170 --> 00:28:08.320
there's also going to be the Cocoa Scripting
bridge so you can do the same kind of thing

00:28:08.319 --> 00:28:10.929
in Cocoa, and it's going to look a lot like this.

00:28:10.930 --> 00:28:16.799
You can do the same kind of thing in Perl, these are all
technologies that Apple is going to be bringing to Leopard

00:28:16.799 --> 00:28:20.119
to make it easier to use the English-like
terms but distinguish --

00:28:20.119 --> 00:28:24.869
and you might say, oh, good I'm not going to have to
use Apple Script, well yes you are using Apple Script,

00:28:24.869 --> 00:28:30.569
distinguish between Apple Script, the
language, and Apple Script, the technology.

00:28:30.569 --> 00:28:37.379
This is Ruby the language not Apple Script the language,
but I'm still passing through Apple Script the technology

00:28:37.380 --> 00:28:43.380
because somebody is taking all these English-like terms
and turning them into four-letter codes and turning

00:28:43.380 --> 00:28:49.210
that into Apple Events and sending them and that's
the very same technology that backs Apple Script.

00:28:49.210 --> 00:28:53.390
So that's why I say it's the Apple
Events themselves that are the packets

00:28:53.390 --> 00:28:57.509
of pure power, scripting comes from Apple Events.

00:28:57.509 --> 00:29:10.119
( Humming )

00:29:10.119 --> 00:29:20.359
Now let's go the other way, what would
it take for you to receive Apple Events?

00:29:20.359 --> 00:29:29.609
Well, if all you want to do is receive four-letter
codes and you don't want to do anything very complicated

00:29:29.609 --> 00:29:34.500
or sophisticated, it's actually quite easy.

00:29:34.500 --> 00:29:41.920
Now here's a very short program and all it does is make
it possible for me to receive a single Apple Event.

00:29:41.920 --> 00:29:47.509
So in the first half of this thing what I
do is in Application Did Finish Launching,

00:29:47.509 --> 00:29:52.000
that is to say during the course of starting
up but late enough in the course of starting

00:29:52.000 --> 00:30:01.759
up that this will work properly, what I do I talk to the NS
Apple Event Manager and I ask him to set an Event Handler

00:30:01.759 --> 00:30:05.759
for a particular Apple Event whose
four-letter codes are MATT and COOL.

00:30:05.759 --> 00:30:10.480
I think that's a particular aptly
named Apple Event, I like that,

00:30:10.480 --> 00:30:14.870
and then what I do is down here here's
the handler for when that comes in.

00:30:14.869 --> 00:30:22.189
So the idea is that handle reply that
selector which is this, handle reply,

00:30:22.190 --> 00:30:24.640
is going to be called when that Apple Event comes in.

00:30:24.640 --> 00:30:25.500
So what do I do?

00:30:25.500 --> 00:30:28.339
Well, the first thing I do is make sure
that really is the right Apple Event

00:30:28.339 --> 00:30:35.919
because you never know there's many a slip twixt the cup
and the lip, and then I've got a text field in my interface

00:30:35.920 --> 00:30:39.200
and I simply set that to "thank you" and
that's going to be an indicator to us

00:30:39.200 --> 00:30:41.049
that I received the Apple Event in good order.

00:30:41.049 --> 00:30:43.430
Let's try it.

00:30:43.430 --> 00:30:56.470
So I'm building, still building and running and there's my
interface and so now I'm going to send the MATT COOL event.

00:30:56.470 --> 00:30:59.079
Now this is -- I'm doing it through Apple Script but --

00:30:59.079 --> 00:31:04.220
but this little phrase over here Event MATT
COOL is -- is -- it's not Apple Script.

00:31:04.220 --> 00:31:07.910
It's simply a raw Apple Event consisting
of those two four-letter codes.

00:31:07.910 --> 00:31:12.910
So, when I run this, I'm going to be talking to
that application which you see over on the left

00:31:12.910 --> 00:31:15.490
in the background and, if everything is working correctly,

00:31:15.490 --> 00:31:18.500
the phrase send me a MATT COOL event
please will change to thank you.

00:31:18.500 --> 00:31:18.970
Let's try it.

00:31:18.970 --> 00:31:22.579
Okay one, two, three, go and it worked.

00:31:22.579 --> 00:31:29.179
So, yes, my application was able to receive an Apple
Events, but it was a very, very simple Apple Event.

00:31:29.180 --> 00:31:38.880
It was not like get every message of the inbox whose subject
contains FS5-beta that would have been much more difficult

00:31:38.880 --> 00:31:48.370
to parse and so Apple has made is easier for you to
parse this kind of thing in a Cocoa Cocoa application

00:31:48.369 --> 00:31:56.159
through the Cocoa Scriptability layer and,
if you have an application and you want --

00:31:56.160 --> 00:32:02.990
if you have a Cocoa application and you want to make it
scriptable, you use the Cocoa Scriptability layer to do that

00:32:02.990 --> 00:32:05.440
and now you've got a scriptable application.

00:32:05.440 --> 00:32:13.490
Now the entire rest of this talk is going to be devoted
to answering the question, just how hard is this to do?

00:32:13.490 --> 00:32:23.380
And the answer is well, it's really not all that hard
and, in fact, it's not all that hard to do after the fact.

00:32:23.380 --> 00:32:29.850
So you might realize sort of late in the game
that you really ought to add scriptability

00:32:29.849 --> 00:32:32.709
to your existing application, you can do that.

00:32:32.710 --> 00:32:39.180
You don't actually have -- it helps if you've planned
the entire time to do that, but you don't actually have

00:32:39.180 --> 00:32:45.590
to have planned the entire time, and I'm going
to demonstrate this with an actual application

00:32:45.589 --> 00:32:50.309
that I added scriptability to it and to make the
story more interesting; it's not my application.

00:32:50.309 --> 00:32:53.659
The application came to me prewritten,
so before I do anything else I'm going

00:32:53.660 --> 00:32:55.630
to show you what the application does.

00:32:55.630 --> 00:32:59.070
This application is by Aaron Hillengass (presumed
spelling) the guy that wrote the Cocoa book,

00:32:59.069 --> 00:33:04.710
and he sent me this application -- he sent me the
code, and he said, can you make this scriptable?

00:33:04.710 --> 00:33:17.569
This is an application that he gives away for free over
the internet and let's just run it and see what it does.

00:33:17.569 --> 00:33:20.079
Compile. And run.

00:33:20.079 --> 00:33:21.609
There it is.

00:33:21.609 --> 00:33:27.449
Now his application puts up -- it's a documents -- it's
a document-based application and every document consists

00:33:27.450 --> 00:33:33.569
of a window divided into eight squares and the
object of the game is that you drag stuff into each

00:33:33.569 --> 00:33:39.730
of these eight squares, and you can drag it either from this
window over on the left which is called the catalog window,

00:33:39.730 --> 00:33:47.480
so I can take the very window that we're looking at
right now -- if I can get the mouse to work, there it is.

00:33:47.480 --> 00:33:51.650
Let me just drag that right in, there it is.

00:33:51.650 --> 00:33:55.980
It's -- it's been turned on its side for reasons that
I'll explain later, and I can scroll through the catalog.

00:33:55.980 --> 00:33:59.259
I can go to Page 45 of the catalog,
drag that into a different one,

00:33:59.259 --> 00:34:03.549
not very visible let's do a different one, there we go.

00:34:03.549 --> 00:34:08.889
I can also drag things from the Finder, so,
for example, right here I've got a jpeg,

00:34:08.889 --> 00:34:13.089
the one that I showed you earlier in the talk, I'll
drag that into number 2, there it is Apple Script:

00:34:13.090 --> 00:34:18.130
Definitive Guide that will -- that will serve as an example.

00:34:18.130 --> 00:34:22.130
Here's -- here's the PDF that I showed you earlier.

00:34:22.130 --> 00:34:26.309
Now why does Aaron think this is
a good thing to be able to do?

00:34:26.309 --> 00:34:32.029
Because it turns around -- turns out that among the people
who are doing -- getting things done kinds of things,

00:34:32.030 --> 00:34:36.690
they like to carry these little eight-page booklets around
with them that like remind them of the things they have

00:34:36.690 --> 00:34:42.380
to do during the day and there's a
way of taking this eight-page thing.

00:34:42.380 --> 00:34:50.309
You print it out and then you -- you snip along the snippy
line and you fold along all the foldy lines and guess what,

00:34:50.309 --> 00:34:54.009
it turns out that it's a little eight-page document
and all the pages that are like lying on their sides

00:34:54.010 --> 00:34:56.570
and upside down, they all come out
right side up and everything is great.

00:34:56.570 --> 00:35:01.710
Okay. So this is a little application that allows you to do
that, and Aaron said to me I've written this application,

00:35:01.710 --> 00:35:05.490
people are using it, but it doesn't have
scriptability, can you make it scriptable?

00:35:05.489 --> 00:35:11.529
So the object of the game was, I am to
make this application scriptable and,

00:35:11.530 --> 00:35:17.530
if at all possible I don't want to
touch Aaron's code, can I do it ?

00:35:17.530 --> 00:35:23.700
Yes. I gave it away, yes, you can do it.

00:35:23.699 --> 00:35:29.809
How, first you need a plan.

00:35:29.809 --> 00:35:31.940
Here's my plan.

00:35:31.940 --> 00:35:35.380
So I thought about what do we want to be able to say.

00:35:35.380 --> 00:35:39.190
We want to be able to do what you just
saw me do, dragging things from the Finder

00:35:39.190 --> 00:35:43.630
or from the catalog into a page of a document.

00:35:43.630 --> 00:35:45.990
Ooh, a page of a document.

00:35:45.989 --> 00:35:48.479
Okay. So what have I got?

00:35:48.480 --> 00:35:53.510
What are the -- what's the object model of my application.

00:35:53.510 --> 00:35:59.150
Well, I've got the application at the top level because all
applications have the application object at the top level

00:35:59.150 --> 00:36:01.720
and then an application can have multiple documents.

00:36:01.719 --> 00:36:07.269
This is a document-based application, happens there was only
one document open over here but you can actually have many,

00:36:07.269 --> 00:36:14.090
and then every document has -- has something that I'll call
pages and that's the things that you see these numbers on.

00:36:14.090 --> 00:36:15.329
They're numbered 1 through 8.

00:36:15.329 --> 00:36:18.599
So I'll just treat those as elements of a document.

00:36:18.599 --> 00:36:21.349
So every document has eight page elements.

00:36:21.349 --> 00:36:26.480
Now this is a funny kind of element because in
most scriptable applications you can make new ones,

00:36:26.480 --> 00:36:28.099
you can delete those elements.

00:36:28.099 --> 00:36:34.119
No, in this particular application I'm going to have a
rule that says every page has exactly eight elements.

00:36:34.119 --> 00:36:39.150
You can't alter that fact, and I need to build
that into the way I make the thing scriptable.

00:36:39.150 --> 00:36:40.579
Now let's talk about pages.

00:36:40.579 --> 00:36:48.049
Now, again I need a way to make the page have
in it either a particular page of the catalog

00:36:48.050 --> 00:36:50.950
or a particular file that's found in the Finder.

00:36:50.949 --> 00:36:56.159
Okay. So to do that I'm going to have two
settable properties that a scriptor can use,

00:36:56.159 --> 00:37:00.879
either the scriptor can take a
catalog source page and assign --

00:37:00.880 --> 00:37:05.720
assign that property of a page or the file
source -- those are just names that I made up.

00:37:05.719 --> 00:37:13.619
So what -- basically what I'm getting at is, in my mind
I'm planning that the ultimate user is going to be able

00:37:13.619 --> 00:37:20.319
to say things like this, tell application
page packer to tell document 1 to tell Page 3

00:37:20.320 --> 00:37:27.650
to set its catalog source page to 4 that's going to
mean that we should take the fourth page of the catalog

00:37:27.650 --> 00:37:33.410
and assign it into Page 3 of the first
document or -- or I can tell a different page,

00:37:33.409 --> 00:37:40.389
say Page 4 to set its file source to, and then I'll give
the alias for -- and -- and path for some file that's --

00:37:40.389 --> 00:37:47.619
that's in the Finder, from some file that's on
disc, that's the way I want to be able to talk.

00:37:47.619 --> 00:37:51.509
So now I have a plan good.

00:37:51.510 --> 00:38:00.750
( Silence )

00:38:00.750 --> 00:38:04.710
To carry out my plan I have to act in two parts.

00:38:04.710 --> 00:38:09.289
First I have to think about the dictionary,
remember that all important dictionary,

00:38:09.289 --> 00:38:12.289
remember I showed you the dictionary for iPhoto earlier?

00:38:12.289 --> 00:38:20.139
Well, now I'm going to write a dictionary, and I know what
has to go in that dictionary because what it is is it's got

00:38:20.139 --> 00:38:22.259
to be the stuff that I said according to my plan.

00:38:22.260 --> 00:38:28.620
I've got to say in the dictionary, there is an
application, the application has document elements,

00:38:28.619 --> 00:38:34.989
every document has page elements, and a page has a file
source property and a catalog source page property.

00:38:34.989 --> 00:38:38.309
I have to say that in the dictionary.

00:38:38.309 --> 00:38:46.480
Now in Tiger and later, that is to say also
in Leopard, a dictionary can be written in XML

00:38:46.480 --> 00:38:55.849
in what's called .sdef format .SDEF and the way to deal
with this is through the wonderful free program SDEF Editor.

00:38:55.849 --> 00:39:00.049
So we download SDEF Editor and you
create your dictionary and here's mine.

00:39:00.050 --> 00:39:12.740
So, there's the application and sure enough and
application has a document element, so far so good.

00:39:12.739 --> 00:39:20.959
Here's the document and sure enough, a document
has a page element and, finally, here is a page

00:39:20.960 --> 00:39:26.780
and sure enough a page has catalog
source page and file source properties.

00:39:26.780 --> 00:39:33.600
I'll make that a little larger
so it's a little easier to see.

00:39:36.690 --> 00:39:37.280
Maybe. Thank you.

00:39:37.280 --> 00:39:44.440
Now this is the really interesting
part, in the Cocoa Scripting --

00:39:44.440 --> 00:39:55.809
in the Cocoa Scriptability layer the dictionary
has a second job to do and that job is to translate

00:39:55.809 --> 00:40:06.920
between the incoming Apple Events and your Cocoa code, and
it does this through Keyvalue Coding and so every entry

00:40:06.920 --> 00:40:13.070
in the dictionary has what's called a Key
and you must be very careful about this.

00:40:13.070 --> 00:40:17.030
I'm so careful that, in fact, I write
it all down on a piece of paper.

00:40:17.030 --> 00:40:20.830
So let's go back to the page --
let's go back to the document first.

00:40:20.829 --> 00:40:25.980
You remember that the document has page
elements, you go down to the bottom here,

00:40:25.980 --> 00:40:29.240
and you'll see it says the Cocoa Key is pages array.

00:40:29.239 --> 00:40:37.189
Now I just made that up but whatever I make up, I
must remember what it is, capitalization EVERYTHING.

00:40:37.190 --> 00:40:43.269
This is tremendously important because, if I get this wrong,
it's not going to work and I'm not going to know why not.

00:40:43.269 --> 00:40:48.500
So I -- I pick some arbitrary key but I must stick to it.

00:40:48.500 --> 00:40:55.159
So this is the Cocoa Key the -- the -- the letters
pages array are going to appear in my Cocoa code

00:40:55.159 --> 00:41:02.199
and you will see that, so that is the key by
which the document is able to refer to its pages.

00:41:02.199 --> 00:41:02.539
All right.

00:41:02.539 --> 00:41:09.650
Fine. Now back to the page, now you'll
remember the page has properties, again,

00:41:09.650 --> 00:41:16.650
there's a property called catalog source page, the
Cocoa Key I've decided should be catalog source page,

00:41:16.650 --> 00:41:23.039
and it's got a file source, and I have decided
that the Cocoa Key should be file source,

00:41:23.039 --> 00:41:26.590
so having made those determinations and
having written them down on a piece of paper,

00:41:26.590 --> 00:41:30.510
I am now ready to write my Cocoa code and here we go.

00:41:30.510 --> 00:41:47.330
( Silence )

00:41:47.329 --> 00:41:50.460
Now the first thing you'll notice
about my code is, what is it?

00:41:50.460 --> 00:41:58.519
It is a, it is a bunch of categories
-- it is a bunch of categories.

00:41:58.519 --> 00:42:03.619
What I've done is I've made some new files
that were not in Aaron's original code.

00:42:03.619 --> 00:42:10.500
Actually I've made one -- I -- I've only made three
new files, oh, let me show you, here they are.

00:42:10.500 --> 00:42:19.650
This is the SDEF and these are the code files and
the one I'm showing you now is scriptability.M

00:42:19.650 --> 00:42:23.809
and it consists entirely of categories,
well almost entirely.

00:42:23.809 --> 00:42:30.449
So, for example, he had a document class.

00:42:30.449 --> 00:42:33.429
I've added a category on his document class,

00:42:33.429 --> 00:42:38.289
his document class was called "my document"
my category is called MN Scriptability,

00:42:38.289 --> 00:42:40.789
this is the scriptability part of that.

00:42:40.789 --> 00:42:46.739
So basically I have simply added some
functionality to a class that he had already created

00:42:46.739 --> 00:42:51.089
and the really important part of the
functionality that I've added is here.

00:42:51.090 --> 00:42:57.320
It's the stuff you're looking at on this page right
now, and you'll notice that these one, two, three, four,

00:42:57.320 --> 00:43:07.890
five methods all have that string, pages array, in them
and, in fact, in Tiger at least the way to get this

00:43:07.889 --> 00:43:12.059
to work properly is simply to implement all five
of these, well, there's other ways around that,

00:43:12.059 --> 00:43:15.449
but I've chosen the simplest path,
a kind of mechanical path.

00:43:15.449 --> 00:43:21.869
So, if I'm going to have pages in my document and
that's called "pages array" that's the Cocoa key,

00:43:21.869 --> 00:43:27.130
then I implement county of pages array, object
in pages -- what is count of pages array do?

00:43:27.130 --> 00:43:31.730
It -- any time I'm asked how many pages
there are I've got to give an answer.

00:43:31.730 --> 00:43:36.300
Well, that's easy, there's always going to
be eight pages, because you can't create any,

00:43:36.300 --> 00:43:39.769
you can't destroy any, this is a really simple application.

00:43:39.769 --> 00:43:47.400
So and then for the last three, the three on the bottom,
insert in pages array, insert object in pages array at index

00:43:47.400 --> 00:43:52.579
and remove object from pages array at index
all I do is return an error because hah, hah,

00:43:52.579 --> 00:43:54.819
those are things you can't do in this application.

00:43:54.820 --> 00:43:57.730
You can't add any pages, every document has eight pages.

00:43:57.730 --> 00:43:58.800
This is really easy.

00:43:58.800 --> 00:44:08.230
Okay. So the only thing I actually have to do is -- is
implement this one method, object in pages array at index,

00:44:08.230 --> 00:44:15.909
so that if someone asks for Page 3, I've actually got
to -- to return what's called a reference to Page 3.

00:44:15.909 --> 00:44:23.000
And by reference I mean an object specifier
but -- but, basically, so what do I do?

00:44:23.000 --> 00:44:30.480
Well, the first thing I do is I check to make sure that, you
didn't ask for a page whose number is too large like Page 10

00:44:30.480 --> 00:44:32.170
or something like that would be simply terrible.

00:44:32.170 --> 00:44:35.869
Now you'll notice that what I'm checking
is to see whether "I" is larger than 7.

00:44:35.869 --> 00:44:41.889
Now you'll remember that there are eight pages
but, of course, Apple Script arrays are 1 based

00:44:41.889 --> 00:44:47.480
but Objective-C arrays are zero based so
there's an off by one problem which I involve

00:44:47.480 --> 00:44:49.309
by checking to see if "I" is larger than 7.

00:44:49.309 --> 00:44:53.799
So, yes, the end user is allowed to
ask for Page 8 but that's translated

00:44:53.800 --> 00:44:57.130
into 7 that's going to work but, if it's greater than 7, no.

00:44:57.130 --> 00:45:02.059
So, if that happens I return an error, sorry
you asked for a page that doesn't exist.

00:45:02.059 --> 00:45:08.630
Otherwise I simply make an object that is a stand-in
for this page and I return it, end of story.

00:45:08.630 --> 00:45:15.369
So now we've got a page, onto the problem of the
properties in the page, so I've got another class down here

00:45:15.369 --> 00:45:25.329
and this class is not a category because in Aaron's --
and actually I think this is the really interesting part

00:45:25.329 --> 00:45:32.179
of the story -- in Aaron's original implementation
he didn't know what he had to do in order to provide

00:45:32.179 --> 00:45:41.259
for scriptability, so there are no page objects of any kind,
there's no class representing a page in his underlying model

00:45:41.260 --> 00:45:45.740
and I didn't want to write back to him
and say, well, you really didn't do it

00:45:45.739 --> 00:45:47.459
in a way that lends itself to scriptability.

00:45:47.460 --> 00:45:51.730
I just wanted to solve the problem, so I
created a class that exists only in this --

00:45:51.730 --> 00:45:59.440
in this file which is a stand-in for a page and what you see
me doing here is implementing the access to the properties.

00:45:59.440 --> 00:46:07.070
So you will remember -- let's just scroll down here --
you will remember that I have got let's say a file source,

00:46:07.070 --> 00:46:11.970
so you have to implement two methods corresponding to that.

00:46:11.969 --> 00:46:17.469
Remember this is KeyValue Coding,
so file source and set file source.

00:46:17.469 --> 00:46:23.579
Well, I'm afraid I don't actually do anything for
file source because this is a very strange property,

00:46:23.579 --> 00:46:27.980
it's settable but not gettable that's just the
weird way in which I did the scriptability here,

00:46:27.980 --> 00:46:30.869
so fine we'll just accept that just live with it.

00:46:30.869 --> 00:46:35.250
So I return an error in that case but,
if we set file source, then I turned --

00:46:35.250 --> 00:46:41.920
turn around and actually call whatever is
was in Aaron's code actually it's this thing

00:46:41.920 --> 00:46:49.510
that he uses the very same code that he uses when someone
drags a file into the document onto a particular page,

00:46:49.510 --> 00:46:54.000
I simply call that same line of code that he
was using and there I've set the file source.

00:46:54.000 --> 00:46:58.090
Same kind of thing for the catalog
source page, I -- I look in the cat --

00:46:58.090 --> 00:47:03.480
someone asks us to set the catalog source page, first I
make sure that there's a catalog page that corresponds

00:47:03.480 --> 00:47:09.380
to the page number that I'm asked to use and, assuming
that there is, then I go ahead and I call the very same --

00:47:09.380 --> 00:47:13.970
I do the -- these three lines are
ripped right out of his code.

00:47:13.969 --> 00:47:21.319
I simply copy what it is that he does when --
when the user drags from the catalog into a page,

00:47:21.320 --> 00:47:24.030
I simply copy those lines, stuck 'em right in here,

00:47:24.030 --> 00:47:27.019
now I'm doing exactly the same thing
that he does, that's basically it.

00:47:27.019 --> 00:47:33.860
Okay. Let's build it and run it, and let's see whether
it works, so you will remember that somewhere here,

00:47:33.860 --> 00:47:46.470
I've got a script and this script is supposed to tell
page packer to set Page 3 to some catalog source page

00:47:46.469 --> 00:47:48.589
and it also sets Page 4 to something that's on disc.

00:47:48.590 --> 00:47:52.930
So let's run it and see whether that really happens.

00:47:52.929 --> 00:47:55.919
Yep, sure does.

00:47:55.920 --> 00:47:59.680
So I would say that we're in pretty good shape so far.

00:48:01.139 --> 00:48:06.929
However, we're not done because we need to
test a little more thoroughly than that.

00:48:06.929 --> 00:48:13.159
You should always test to make sure that your error messages
are coming out coherently, so here I've got a whole bunch

00:48:13.159 --> 00:48:16.949
of things that the user should not be able to do.

00:48:16.949 --> 00:48:20.549
For example, the user should not be
able to make a new page, let's try it.

00:48:20.550 --> 00:48:24.950
So I'll run this script, I get a
run time error and it is coherent.

00:48:24.949 --> 00:48:31.099
A nice English straightforward ordinary run time
error, nope can't create additional document pages.

00:48:31.099 --> 00:48:33.279
Good. That's working very nice.

00:48:33.280 --> 00:48:35.170
Okay. Let's try it again.

00:48:35.170 --> 00:48:39.190
Another thing the user might say is
make new page at end, I'll try that.

00:48:39.190 --> 00:48:41.110
Nope, can't create additional document pages.

00:48:41.110 --> 00:48:43.900
Good that's a coherent run time error fine.

00:48:43.900 --> 00:48:46.369
Next I will try delete Page 3.

00:48:46.369 --> 00:48:48.489
Nope. Can't delete document pages.

00:48:48.489 --> 00:48:51.379
Good. Good answer that's what I want it to say.

00:48:51.380 --> 00:48:56.000
Now I'll say, tell Page 9 -- there
is no Page 9, what will happen?

00:48:56.000 --> 00:48:57.559
Nope, no such document page.

00:48:57.559 --> 00:49:02.400
Uh-ho I'm handling all the cases,
and finally I'll say get Page 3,

00:49:02.400 --> 00:49:06.910
Uh-oh I've gotten the dreaded NS Internal Script Error.

00:49:06.909 --> 00:49:08.500
Here's a case that I forgot to cover.

00:49:08.500 --> 00:49:13.389
I've made a mistake, now it happens that in
Leopard this kind of thing is going to go away.

00:49:13.389 --> 00:49:19.019
The Cocoa Scriptability layer is itself going to supply
a much better response than NS Internal Script Error

00:49:19.019 --> 00:49:24.750
but this is written to run on Tiger, so I've
got to supply something, how do I do that?

00:49:24.750 --> 00:49:37.050
And the answer is, I have to implement something
that I forgot to implement, namely -- thank you.

00:49:37.050 --> 00:49:45.940
I've got to implement this method object
specifier, so basically I commented it

00:49:45.940 --> 00:49:50.360
out by giving it the wrong name object
specifier not, but now it is object specifier

00:49:50.360 --> 00:49:56.460
so implement object specifier that's what's going
to be called when somebody says, get page something

00:49:56.460 --> 00:49:58.780
or get whatever the object is supposed to be.

00:49:58.780 --> 00:49:59.110
All right.

00:49:59.110 --> 00:49:59.900
Now let's see if that works.

00:49:59.900 --> 00:50:02.050
So, again, I'm going to build.

00:50:02.050 --> 00:50:03.130
I'm going to run.

00:50:03.130 --> 00:50:06.170
I'm going to go back to my Apple Script script.

00:50:06.170 --> 00:50:09.150
Okay. Again I'm going to try to get Page 3, kaboom!

00:50:09.150 --> 00:50:10.960
I've got a reference to Page 3.

00:50:10.960 --> 00:50:16.199
Perfect. So that's the kind of thing you
have to do, you have to test against --

00:50:16.199 --> 00:50:21.599
now the one last thing you should do
is look at your dictionary in some kind

00:50:21.599 --> 00:50:27.940
of nice dictionary display, so let's just take a look at it.

00:50:27.940 --> 00:50:35.950
There's a page packer suite, the page packer suite contains
the following classes, application document and page.

00:50:35.949 --> 00:50:44.669
Let's look at what is says about document,
looks all right, a document and look at this

00:50:44.670 --> 00:50:47.690
down here you can actually be right
quite informative in your dictionary.

00:50:47.690 --> 00:50:54.460
This is stuff I wrote in the dictionary, it says page,
pages of the document, a document has exactly eight pages.

00:50:54.460 --> 00:51:00.500
I'm trying to be informative to the user who's going to
be using this thing, and finally the all important page.

00:51:00.500 --> 00:51:04.199
Now here I've really gone to town
you can really be informative

00:51:04.199 --> 00:51:08.189
in the doc -- so catalog source page is property.

00:51:08.190 --> 00:51:14.059
I've actually given an entire example in code, so I say this
is the page number of the built in catalog that's to be used

00:51:14.059 --> 00:51:19.889
for this page, for example, you might say and then
I've included an actual piece of Apple Script code

00:51:19.889 --> 00:51:24.599
and I say what it is that -- that happens
when you run that Apple Script code.

00:51:24.599 --> 00:51:28.799
Same thing for file source, I show that that property exists

00:51:28.800 --> 00:51:34.830
and I've provided enough documentation there is a whole
long thing about it and then at the bottom just to make sure

00:51:34.829 --> 00:51:38.230
that everybody understands, I repeat the
fact that a document has eight pages,

00:51:38.230 --> 00:51:40.050
pages can neither be created nor deleted.

00:51:40.050 --> 00:51:46.490
So I'm using -- I'm using the dictionary as I
kind of little mini scripting instruction manual.

00:51:46.489 --> 00:51:49.899
Its not just a set of terms, SDEFs allows you to do this,

00:51:49.900 --> 00:51:53.970
you can put in a lot more information,
so now my scriptability is done.

00:51:53.969 --> 00:51:56.399
I have a user friendly dictionary.

00:51:56.400 --> 00:52:01.329
I've tested it against the various
kinds of errors that the user might make

00:52:01.329 --> 00:52:04.170
and I'm returning coherent error messages to all of them.

00:52:04.170 --> 00:52:09.680
I would say this is a pretty good piece of
scriptability, so what's the take home message here,

00:52:09.679 --> 00:52:16.059
take home message here is don't be afraid of the
notion of making your application scriptable,

00:52:16.059 --> 00:52:24.170
on the contrary this is your chance to do yourself and your
users a big favor, why is it a big favor for your users?

00:52:24.170 --> 00:52:29.720
It's a big favor for your users because
you put the power in their hands.

00:52:29.719 --> 00:52:35.619
They can use your application in all kinds of ways
in all kinds of workflows that you never imagined.

00:52:35.619 --> 00:52:41.599
Remember the iTunes example, getting the
orphans, there is no GUI for getting the orphans,

00:52:41.599 --> 00:52:46.079
but I was able to do it anyway
thanks to iTunes' scriptability.

00:52:46.079 --> 00:52:47.250
Why is it good for you?

00:52:47.250 --> 00:52:52.320
It's good for you because people are going
to regard this as a major feature and second

00:52:52.320 --> 00:52:55.840
of all you're now working together with your users.

00:52:55.840 --> 00:52:58.420
Your users are now helping you grow the application.

00:52:58.420 --> 00:53:00.110
They're going to write back to you
and they're going to say, well,

00:53:00.110 --> 00:53:02.079
I wrote this script that makes your application do this.

00:53:02.079 --> 00:53:04.159
And you're going wow, that's really cool.

00:53:04.159 --> 00:53:09.190
I never thought of making my application do that,
you know, you've opened up the possibilities instead

00:53:09.190 --> 00:53:14.019
of the GUI being some kind of limitation, behind
that there's a scripting API and you've put the power

00:53:14.019 --> 00:53:19.000
in the users hands that's what you want to
do because for every user whether it's me

00:53:19.000 --> 00:53:23.409
or my mother, a computer is to program.

00:53:23.409 --> 00:53:25.359
She may not know it but that's what it's for.