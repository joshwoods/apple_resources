WEBVTT

00:00:14.100 --> 00:00:16.500
Scripting for SystmAdmins.

00:00:16.500 --> 00:00:17.940
We had a good crowd last year.

00:00:17.940 --> 00:00:19.860
I think we got a very
good crowd this year.

00:00:19.860 --> 00:00:22.100
I think you're a better crowd this year.

00:00:22.100 --> 00:00:23.600
Very much so.

00:00:23.600 --> 00:00:26.340
Already feeling the love.

00:00:26.340 --> 00:00:30.290
So, a couple of things here.

00:00:30.810 --> 00:00:33.000
Big, big session.

00:00:33.040 --> 00:00:35.140
Huge session.

00:00:35.140 --> 00:00:39.560
Big, huge people that are up
here doing great things.

00:00:39.560 --> 00:00:41.130
All right?

00:00:41.170 --> 00:00:42.800
New scripting ideas.

00:00:42.800 --> 00:00:45.160
So new stuff that you can learn for this.

00:00:45.160 --> 00:00:46.950
New scripting methods.

00:00:46.950 --> 00:00:49.040
We got very, very current.

00:00:49.110 --> 00:00:51.470
We have Ruby on Rails.

00:00:51.900 --> 00:00:55.140
Here now, Ruby on Rails.

00:00:55.140 --> 00:00:56.780
Some stuff that can hopefully
help you out tomorrow,

00:00:56.780 --> 00:00:58.900
some stuff that can hopefully
help you out a month from now.

00:00:58.900 --> 00:01:01.900
A little mix of web,
a little mix of system administration,

00:01:01.900 --> 00:01:03.900
a little mix of comedy.

00:01:03.900 --> 00:01:06.900
So last year we got a lot of feedback.

00:01:06.900 --> 00:01:09.900
We had some cool stuff,
but all of these scripts

00:01:09.900 --> 00:01:11.900
weren't made available.

00:01:11.900 --> 00:01:17.110
So this year,
if you reach under your seat,

00:01:17.600 --> 00:01:20.660
You'll find a DVD.

00:01:20.660 --> 00:01:21.600
Nobody's doing it.

00:01:21.600 --> 00:01:24.140
This was the whole joke.

00:01:24.140 --> 00:01:26.800
You would reach under,
you wouldn't find it,

00:01:26.800 --> 00:01:28.570
I would yell at Steve.

00:01:28.570 --> 00:01:32.860
He would, Steve, he would say that he put
him in the wrong room.

00:01:32.860 --> 00:01:36.480
Because we're in Nob Hill,
but we really put him in Russian Hill.

00:01:36.480 --> 00:01:39.410
And then we'd all get
up and walk to Russian,

00:01:39.410 --> 00:01:39.990
yeah.

00:01:42.400 --> 00:01:44.700
So, but I'm serious about that.

00:01:44.700 --> 00:01:46.640
We will make all this code available.

00:01:46.640 --> 00:01:50.060
That's definitely what we're doing with
this through a couple of various sites.

00:01:50.060 --> 00:01:51.880
So we'll talk about
those as we go through.

00:01:51.880 --> 00:01:55.000
So you will have all the scripts and
all the samples that we use up here.

00:01:55.000 --> 00:01:57.750
So we definitely very much
wanted to give that to you.

00:02:00.000 --> 00:02:02.600
If the only thing I do is
tell you that and you clap,

00:02:02.600 --> 00:02:04.260
I'm happy.

00:02:04.260 --> 00:02:05.960
All right,
so three great people for you today.

00:02:05.960 --> 00:02:08.830
We got the ineffable Steve Hayman.

00:02:10.850 --> 00:02:13.400
talking about cool stuff
to do with scripts,

00:02:13.400 --> 00:02:15.440
little neat tips and tricks,
things like that.

00:02:15.440 --> 00:02:18.130
We then have presenting
for the first time ever,

00:02:18.130 --> 00:02:19.380
Jeff McCune.

00:02:19.380 --> 00:02:21.120
You may know him from
the Mac Enterprise Group.

00:02:21.120 --> 00:02:23.400
He's from Ohio State University.

00:02:26.000 --> 00:02:29.500
is going to show you how to
pull strings with Puppet.

00:02:29.500 --> 00:02:31.700
Ooh.

00:02:31.700 --> 00:02:33.000
Probably something you
might not have heard of.

00:02:33.000 --> 00:02:35.460
Great little Puppet fans in the back.

00:02:35.460 --> 00:02:38.070
And finally, we have the amazing Mr.

00:02:38.070 --> 00:02:40.640
Tim Perfit reprising
his role from last year.

00:02:40.640 --> 00:02:43.850
And this time, he's doing Ruby on Rails.

00:02:44.500 --> 00:02:45.500
Wonderful.

00:02:45.500 --> 00:02:48.600
All right, without further ado,
he's Canadian so this is

00:02:48.600 --> 00:02:51.940
scripting from A to Z.

00:02:51.940 --> 00:02:53.900
Steve Hayman.

00:02:58.600 --> 00:03:00.460
Big huge people, thanks a lot.

00:03:00.460 --> 00:03:03.320
Big huge people.

00:03:03.320 --> 00:03:05.190
How many Canadians are here?

00:03:05.900 --> 00:03:09.460
We're glad that for once WWDC is
not on a Canadian long weekend.

00:03:09.460 --> 00:03:10.140
Isn't that nice?

00:03:10.140 --> 00:03:12.000
Not civic holidays, not Victoria Day.

00:03:12.000 --> 00:03:13.710
Don't need to take off our shirts.

00:03:13.720 --> 00:03:16.670
I may not have time to get
all the way from A to Z.

00:03:16.670 --> 00:03:19.820
We only get A to K today,
so I'll do my best here.

00:03:22.100 --> 00:03:26.720
So people come up to me and say, Steve,
what is scripting?

00:03:26.920 --> 00:03:29.340
And I say, come on, Sal,
you're the product manager.

00:03:29.340 --> 00:03:30.400
You've been here for a long time.

00:03:30.400 --> 00:03:34.000
You should have this figured out by now.

00:03:34.300 --> 00:03:38.940
By the way, the new green Apple,
we are reusing old jokes from WWDC 2001.

00:03:38.940 --> 00:03:40.640
So that was an old WebObjects joke.

00:03:40.680 --> 00:03:44.530
I think scripting is telling
other programs what to do.

00:03:44.530 --> 00:03:46.780
Here's an example of telling
other programs what to do.

00:03:46.780 --> 00:03:48.740
This is a nice,
obvious piece of sample C code that

00:03:48.740 --> 00:03:50.500
tells the finder to go and do something.

00:03:50.500 --> 00:03:53.680
You could do that,
or you could do this in AppleScript.

00:03:53.680 --> 00:03:55.740
I think even if you
don't speak AppleScript,

00:03:55.800 --> 00:03:58.980
you might be able to look at that
and have a rough idea what it does.

00:03:58.980 --> 00:03:59.880
What does it do?

00:03:59.880 --> 00:04:03.060
It tells the application finder
to reveal the startup disk.

00:04:03.540 --> 00:04:06.750
New in Leopard, you can even use other
languages like Ruby,

00:04:06.750 --> 00:04:09.260
which will inspect the dictionary
of these scriptable applications

00:04:09.280 --> 00:04:12.720
and give you a different syntax
for talking to the same things.

00:04:12.720 --> 00:04:15.840
If you are one of those people
who think that AppleScript's way

00:04:15.900 --> 00:04:19.080
of handling files and strings
and so on is a little peculiar,

00:04:19.080 --> 00:04:23.460
you may prefer to do this
work in Ruby or Python.

00:04:23.460 --> 00:04:24.700
There's nice bindings for those.

00:04:24.700 --> 00:04:26.340
And why do we write these?

00:04:26.340 --> 00:04:30.720
I think we happen to write
scripts because we've got personal

00:04:30.720 --> 00:04:33.040
problems that need solving.

00:04:33.540 --> 00:04:36.620
Maybe our users are
bugging us for something,

00:04:36.620 --> 00:04:38.540
and if we have time,
maybe we would like to help the users

00:04:38.540 --> 00:04:39.500
rather than write our own scripts.

00:04:39.540 --> 00:04:40.040
I don't know.

00:04:40.040 --> 00:04:42.720
I'm pretty busy,
but sometimes I'm willing to do my job.

00:04:42.720 --> 00:04:46.130
And we can also quit waiting
for vendors to fix stuff.

00:04:46.180 --> 00:04:49.610
Just between you and me,
there are a couple of issues in

00:04:49.610 --> 00:04:52.740
Tiger that I have come across
over the years in helping

00:04:52.740 --> 00:04:55.820
out with large deployments,
and rather than waiting for Leopard,

00:04:55.890 --> 00:04:58.520
we can sometimes come
up with a workaround.

00:04:58.950 --> 00:05:00.380
Tons of languages out there.

00:05:00.420 --> 00:05:01.460
So many scripting languages.

00:05:01.460 --> 00:05:05.020
In fact, I bet that several have been
created since WWDC started.

00:05:05.020 --> 00:05:09.050
Just when you think you have a handle
on what a good scripting language is,

00:05:09.130 --> 00:05:14.680
along comes Perl, and then Python,
and then Ruby, and Lua, and Erlang.

00:05:14.680 --> 00:05:17.740
And I have a message to the script
language developing community.

00:05:17.740 --> 00:05:20.200
Would you slow down for crying
out loud so that we can get caught

00:05:20.200 --> 00:05:21.660
up and learn just one of these?

00:05:21.660 --> 00:05:23.070
Pick a language and get good at it.

00:05:23.070 --> 00:05:24.480
Pick a language and get good at it.

00:05:24.480 --> 00:05:26.360
And we've got lots of
choices in Mac OS X.

00:05:26.840 --> 00:05:28.460
Plenty of places you can put scripts,
too.

00:05:28.460 --> 00:05:30.160
The most obvious is
things you can click on.

00:05:30.160 --> 00:05:31.840
I think that's what we usually
think of for Apple scripts,

00:05:31.840 --> 00:05:32.220
anyway.

00:05:32.220 --> 00:05:33.870
Things you can click on
and they do something.

00:05:33.870 --> 00:05:36.260
But there's lots of other
places to hide scripts,

00:05:36.300 --> 00:05:36.720
too.

00:05:36.720 --> 00:05:38.520
The script menu that
I'll talk about a bit,

00:05:38.520 --> 00:05:41.780
a way to categorize scripts according
to what application is front most.

00:05:41.780 --> 00:05:43.470
Automator is a big scripting engine.

00:05:43.520 --> 00:05:45.890
Apple Remote Desktop has
some scripts that you can see

00:05:45.930 --> 00:05:47.320
in our session on Thursday.

00:05:47.320 --> 00:05:51.300
There's login hooks and launch the
agents and podcast producer workflows.

00:05:51.300 --> 00:05:53.120
Man, if you're a scripter,
podcast producer is something

00:05:53.120 --> 00:05:53.940
you're going to love.

00:05:54.840 --> 00:05:56.390
But I want to talk about a few
of these places we can actually

00:05:56.390 --> 00:05:57.280
put some of these scripts.

00:05:57.280 --> 00:05:59.210
And let me show you
one example right now.

00:05:59.300 --> 00:06:02.060
This is what I do all day.

00:06:02.080 --> 00:06:04.380
We're on the demo machine here.

00:06:04.490 --> 00:06:06.670
This is the kind of thing I do.

00:06:06.800 --> 00:06:09.370
All day, I look at the screen and I win.

00:06:09.420 --> 00:06:11.900
I like writing scripts and I like iChat.

00:06:11.900 --> 00:06:13.040
Who doesn't like iChat?

00:06:13.040 --> 00:06:14.460
Anybody not like the iChat?

00:06:14.460 --> 00:06:15.640
You always see iChat.

00:06:15.640 --> 00:06:19.560
So, Script Editor is your standard
AppleScript development environment.

00:06:19.560 --> 00:06:24.900
And you can certainly write ordinary
boring programs like this set.

00:06:25.440 --> 00:06:30.520
Let's see,
set the sign to 1 and set p to 0,

00:06:30.540 --> 00:06:33.590
and then repeat with--

00:06:33.890 --> 00:06:37.100
the i from 1 to 10,000,
where is he going with this?

00:06:37.100 --> 00:06:43.310
Set p to p plus sign times 1 over i,
what the heck, set sign to minus sign,

00:06:43.310 --> 00:06:48.550
this is doing some screwy math thing and
it's waiting for a second and it's done.

00:06:48.550 --> 00:06:53.760
That's a -- pardon me, set sign to 1,
pardon me, this is doing some kind of

00:06:53.760 --> 00:06:56.830
peculiar math and then waiting
for a second in a big loop.

00:06:56.830 --> 00:06:59.800
And you can write programs like
that with AppleScript but it gets

00:06:59.800 --> 00:07:02.860
a lot more interesting when you
start talking to other applications.

00:07:02.860 --> 00:07:08.440
I want to tell the application
iChat to set my status message.

00:07:10.100 --> 00:07:15.980
To this string,
pi is approximately equal to...

00:07:16.530 --> 00:07:18.100
P times 4.

00:07:18.100 --> 00:07:20.000
End.

00:07:20.030 --> 00:07:23.760
If we run this now,
all your buddies who have you on their

00:07:23.760 --> 00:07:31.980
script menu will be totally impressed
by your studly scripting prowess as

00:07:31.980 --> 00:07:31.980
your status message constantly gets in
closer and closer approximations to pi.

00:07:34.800 --> 00:07:41.200
You really shouldn't clap because
this is just about the worst series

00:07:41.200 --> 00:07:42.630
for approximating pi there is.

00:07:42.640 --> 00:07:46.600
There are much better tools that converge
a lot faster for approximating pi.

00:07:46.600 --> 00:07:48.410
In fact,
I bet you didn't even know there were

00:07:48.660 --> 00:07:52.000
tools out there that in hexadecimal
can give you a particular digit of

00:07:52.080 --> 00:07:54.800
pi without computing all the others.

00:07:54.830 --> 00:07:55.640
Isn't that neat?

00:07:55.690 --> 00:07:58.760
You could figure out the one
trillionth digit of pi in hex

00:07:58.980 --> 00:08:03.400
without having to compute the
first-- let's not do that one.

00:08:03.900 --> 00:08:04.900
Let's think of some others.

00:08:04.900 --> 00:08:08.040
So I happen to think that setting
your iChat message is an interesting

00:08:08.040 --> 00:08:11.200
way to just broadcast your scripting
coolness to all of your colleagues

00:08:11.200 --> 00:08:13.720
because they're going to see that your
status message is constantly updating.

00:08:13.720 --> 00:08:16.120
I collect things like this.

00:08:16.120 --> 00:08:17.750
Here, you know,
I was watching Forrest Gump the other

00:08:17.750 --> 00:08:21.000
day and got motivated to write a little
script here that just loops through all

00:08:21.040 --> 00:08:22.720
the different ways to prepare shrimp.

00:08:22.870 --> 00:08:27.190
This is very handy so you
can follow along with the...

00:08:27.300 --> 00:08:32.220
Shrimp kebab, shrimp creole, gumbo,
pan fried, deep fried.

00:08:32.220 --> 00:08:36.740
Now this is all the sort of
thing you can do today in Tiger.

00:08:36.740 --> 00:08:41.920
In Tiger, you can send scripts to iChat
to tell it to set the status.

00:08:41.920 --> 00:08:44.910
In Leopard,
Leopard has a great new iChat thing where

00:08:44.910 --> 00:08:49.000
you can have a script that hangs around
waiting for an incoming message in iChat.

00:08:49.000 --> 00:08:51.000
You can say,
wait until I receive a message,

00:08:51.000 --> 00:08:53.800
and your script is sent the string
of the message and the sender,

00:08:53.800 --> 00:08:55.060
and then you can do something.

00:08:55.060 --> 00:08:56.800
You can run a command,
you can look something up,

00:08:56.800 --> 00:08:58.340
you can send a reply.

00:08:58.340 --> 00:09:00.790
So I'm not gonna show you this,
but I have another

00:09:00.790 --> 00:09:03.390
Leopard machine over here.

00:09:04.300 --> 00:09:07.040
I want to talk to this other account.

00:09:07.040 --> 00:09:09.240
iChat demo-- this other
machine is running over here.

00:09:09.240 --> 00:09:11.620
And it's actually an
iChat Hangman server.

00:09:11.620 --> 00:09:12.980
So I can play Hangman in iChat.

00:09:12.980 --> 00:09:17.480
And you'll notice the status message,
an E, a T.

00:09:17.800 --> 00:09:19.070
Zed.

00:09:19.140 --> 00:09:19.540
No Zeds.

00:09:19.540 --> 00:09:21.150
Oh, see, look,
it's updating the little picture

00:09:21.160 --> 00:09:22.200
here with the hangman guy.

00:09:22.200 --> 00:09:26.280
It only took about three
radars to get that to work.

00:09:26.380 --> 00:09:26.890
Cue.

00:09:28.840 --> 00:09:30.630
D, give up.

00:09:30.650 --> 00:09:33.020
Screechbird?

00:09:33.020 --> 00:09:34.380
Screechbird?

00:09:34.380 --> 00:09:35.690
What kind of a word is screechbird?

00:09:35.710 --> 00:09:39.330
But I wanted to show you this
as an example of the kind of

00:09:39.330 --> 00:09:40.220
things you can do now in Leopard.

00:09:40.220 --> 00:09:42.470
You can build some little
information service using iChat.

00:09:42.480 --> 00:09:43.750
People can send commands to it.

00:09:43.820 --> 00:09:47.980
It can do something and give you
back some interesting results.

00:09:47.980 --> 00:09:52.110
So I think iChat's an interesting
way to mess around with scripts.

00:09:52.130 --> 00:09:54.720
I want to go back to Slice for a moment,
please.

00:09:54.720 --> 00:09:56.540
Not for a moment, for a while.

00:09:56.540 --> 00:09:57.120
Let's go back to Slice.

00:09:57.840 --> 00:09:58.980
So no, no, no, no.

00:09:58.980 --> 00:09:59.290
Come on.

00:09:59.300 --> 00:10:00.820
Slides, yeah.

00:10:00.820 --> 00:10:01.780
No more iChat demos.

00:10:01.780 --> 00:10:02.060
Great.

00:10:02.060 --> 00:10:02.860
Thanks, Tony.

00:10:02.860 --> 00:10:06.450
Everybody be sure to come to
Tony Graham's session and ask him hard

00:10:06.450 --> 00:10:07.620
questions and sit in the front row.

00:10:07.620 --> 00:10:11.160
Now, another way to do scripts is
to write these .command files.

00:10:11.160 --> 00:10:14.540
These are simply terminal commands
that you type and you put in a file,

00:10:14.540 --> 00:10:17.300
and if somebody clicks on it,
it opens up terminal and runs

00:10:17.300 --> 00:10:20.100
the command right there in the
middle of the terminal window.

00:10:20.100 --> 00:10:22.490
I've got to tell you,
this is a little bit unsatisfying.

00:10:22.500 --> 00:10:25.040
It's nice that you can
double-click on a script like this,

00:10:25.040 --> 00:10:27.620
but that UI is for determining
how full my boot disk is.

00:10:27.840 --> 00:10:29.660
It's not really going to win any prizes.

00:10:29.660 --> 00:10:32.530
Fortunately,
AppleScript has what must be my favorite

00:10:32.530 --> 00:10:35.860
operator in the entire AppleScript world,
DoShellScript.

00:10:35.860 --> 00:10:38.220
Now, there are people who think
that this is cheating,

00:10:38.220 --> 00:10:39.870
that this is not real AppleScript.

00:10:39.880 --> 00:10:42.640
Once you're running DoShellScript,
I do not care what they think.

00:10:42.680 --> 00:10:45.580
This is allowing me to get my
job done and run Unix commands

00:10:45.580 --> 00:10:47.280
in the AppleScript context.

00:10:47.280 --> 00:10:51.750
You give it a string, it runs the task,
and it hands the output back.

00:10:51.850 --> 00:10:53.810
Anything that you might
type in the command line,

00:10:53.810 --> 00:10:55.280
you can use with DoShellScript.

00:10:55.340 --> 00:10:57.800
That last one there is a
convenient line that will count.

00:10:57.840 --> 00:11:00.000
out the number of words in
the online dictionary file,

00:11:00.000 --> 00:11:01.720
for instance.

00:11:02.070 --> 00:11:03.350
We've also got,
and we're all admins here,

00:11:03.350 --> 00:11:05.380
we've also got do shell script
with administrator privileges.

00:11:05.380 --> 00:11:05.760
Woo-hoo.

00:11:05.760 --> 00:11:10.160
This is a way of telling
AppleScript to run the shell command

00:11:10.160 --> 00:11:11.200
as somebody other than yourself.

00:11:11.220 --> 00:11:16.540
Normally, if you did this,
the output would be your username.

00:11:16.540 --> 00:11:17.140
Who am I?

00:11:17.140 --> 00:11:19.440
Simple UNIX command that just
returns your short username.

00:11:19.440 --> 00:11:21.330
But if you say instead,
do shell script with

00:11:21.330 --> 00:11:23.970
administrator privileges,
when you run a script like that,

00:11:23.970 --> 00:11:25.950
an authentication dialog
like this pops up.

00:11:25.960 --> 00:11:28.540
Anybody can fill in a username
and password of an admin,

00:11:28.540 --> 00:11:31.790
and the script itself
will actually run as root.

00:11:31.900 --> 00:11:34.820
This is the key to writing
interesting AppleScripts as admins,

00:11:34.820 --> 00:11:38.610
packaging up things that require admin
authorization in a handy way like this.

00:11:38.620 --> 00:11:41.700
So I think you can build much
more sophisticated GUIs by

00:11:41.700 --> 00:11:43.760
combining some of these things.

00:11:43.760 --> 00:11:46.060
For instance,
there was my original terminal command

00:11:46.060 --> 00:11:47.440
to decide how full the disk is.

00:11:47.440 --> 00:11:49.760
Here's the AppleScript version.

00:11:49.760 --> 00:11:53.800
We run it, we get a window like that,
and next year I'm looking

00:11:53.800 --> 00:11:57.050
forward to being rewarded
for that particular script.

00:11:59.400 --> 00:12:01.190
Way better, way better.

00:12:01.250 --> 00:12:02.310
Note that it doesn't use terminal.

00:12:02.380 --> 00:12:03.620
People get these confused sometimes.

00:12:03.620 --> 00:12:06.200
Do shell script actually runs
the command in the background.

00:12:06.200 --> 00:12:08.230
You don't see it running,
you just get the output.

00:12:08.300 --> 00:12:09.660
Here's an alternative.

00:12:09.810 --> 00:12:11.680
You can tell terminal to do something.

00:12:11.680 --> 00:12:13.120
The syntax is a little bit different.

00:12:13.120 --> 00:12:16.480
It's do script rather
than do shell script.

00:12:16.580 --> 00:12:20.130
This will actually launch the
command in a new terminal window.

00:12:20.180 --> 00:12:22.900
You might want that if you had
a long running command like top

00:12:22.900 --> 00:12:24.740
that was never gonna complete.

00:12:24.800 --> 00:12:28.340
You might want that if you were launching
an interactive FTP session or something

00:12:28.340 --> 00:12:31.080
and you were expecting the user to type
the password or interact in the terminal.

00:12:31.080 --> 00:12:33.560
So keep in mind that there's two
different ways you can do this.

00:12:33.560 --> 00:12:35.430
I gotta tell you,
90% of the time I'm using the

00:12:35.430 --> 00:12:38.690
first one 'cause I want one of the
little tasks in the background.

00:12:39.140 --> 00:12:40.340
So that's what the second one looks like.

00:12:40.340 --> 00:12:42.640
If you say do shell script date,
it launches a new terminal

00:12:42.640 --> 00:12:44.830
window and runs the command right
in the middle of the window.

00:12:44.840 --> 00:12:45.740
Sometimes handy.

00:12:45.760 --> 00:12:49.650
It also waits until the command finishes.

00:12:49.660 --> 00:12:51.730
Sleep 3600, what does that do?

00:12:51.740 --> 00:12:53.240
UNIX command does nothing for an hour.

00:12:53.240 --> 00:12:54.870
In fact, that's what I do.

00:12:54.880 --> 00:12:57.910
I just need to put that
command on my monthly report.

00:12:57.910 --> 00:13:00.640
You know,
tested this command for an hour.

00:13:00.640 --> 00:13:03.350
Do shell script will wait
until the command finishes.

00:13:03.360 --> 00:13:05.280
So if you've got to get going,
you might want to put the

00:13:05.350 --> 00:13:06.550
command in the background.

00:13:06.880 --> 00:13:09.250
The traditional UNIX way is
to use an ampersand to run

00:13:09.250 --> 00:13:10.600
a task in the background.

00:13:10.600 --> 00:13:12.520
Doesn't quite work the way you think.

00:13:12.520 --> 00:13:15.760
You have to construct this peculiar
syntax that you see in the third example

00:13:15.760 --> 00:13:20.760
there of redirecting both standard output
and standard error to dev null and then

00:13:20.760 --> 00:13:21.640
putting the command in the background.

00:13:21.640 --> 00:13:25.120
And that is a way with do shell
script you can successfully launch

00:13:25.260 --> 00:13:26.880
something in the background.

00:13:27.100 --> 00:13:30.160
I think the major nuisance with all
of this is that much of AppleScript is

00:13:30.160 --> 00:13:31.740
dealing with these lovely colon paths.

00:13:31.740 --> 00:13:34.100
Who likes the paths
with the colons in them?

00:13:34.100 --> 00:13:36.090
Who's a UNIX person
that can't stand that?

00:13:36.090 --> 00:13:38.100
Yeah, alright.

00:13:38.100 --> 00:13:39.580
I, uh, Tony likes them.

00:13:39.580 --> 00:13:41.100
You can come and beat up on him here.

00:13:41.100 --> 00:13:45.100
Many things in AppleScript are going
to return one of these HFS style paths.

00:13:45.100 --> 00:13:48.100
Your friend, if you do not want an
error message like this,

00:13:48.100 --> 00:13:52.860
when you try to pass that path,
your friend is this operator,

00:13:52.860 --> 00:13:55.870
posix path of,
that will take one of these colon

00:13:55.870 --> 00:14:01.100
paths in AppleScript and turn it into
a normal path with slashes in it.

00:14:01.100 --> 00:14:02.000
Don't try to do it yourself.

00:14:02.000 --> 00:14:03.100
You'll never quite get it right.

00:14:03.100 --> 00:14:05.370
But this is a feature built
into the system that will let

00:14:05.370 --> 00:14:06.100
you move from one to the other.

00:14:06.100 --> 00:14:09.280
So anything you do in AppleScript that
comes with one of these colon paths,

00:14:09.280 --> 00:14:13.100
you probably want to use posix path
of before you pass it to shell script.

00:14:13.100 --> 00:14:15.990
But,

00:14:16.690 --> 00:14:20.570
Users love to create files with all kinds
of screwy characters in their names.

00:14:20.590 --> 00:14:21.940
Dollar signs, spaces.

00:14:21.940 --> 00:14:23.650
My God, files with spaces in their names.

00:14:23.660 --> 00:14:24.340
I used to hate that.

00:14:24.390 --> 00:14:25.760
Exclamation marks.

00:14:25.760 --> 00:14:28.180
File names that are going
to mess up the shell.

00:14:28.180 --> 00:14:30.980
The shell has a series of
characters that it cares about.

00:14:30.990 --> 00:14:34.090
The blank space, the dollar sign, braces,
the pipe symbol.

00:14:34.090 --> 00:14:36.050
Those are all special to the shell.

00:14:36.060 --> 00:14:39.220
And if you don't quote them properly,
if they're part of a file name,

00:14:39.220 --> 00:14:40.490
bad things will happen.

00:14:40.500 --> 00:14:44.000
So your other friend,
in addition to POSIXPATHOF,

00:14:44.040 --> 00:14:45.500
is quoted form of.

00:14:45.500 --> 00:14:49.590
Quoted form of will take a string,
will find all the special

00:14:49.650 --> 00:14:53.190
characters for the shell,
will put a backslash in front of them.

00:14:53.200 --> 00:14:54.920
The single quotes, the double quotes,
the dollar signs.

00:14:54.920 --> 00:14:56.810
People sometimes try to do this yourself.

00:14:56.820 --> 00:14:59.280
You'll never get it right if
you try to do it yourself.

00:14:59.280 --> 00:15:01.370
The shell interprets more
weird characters than you

00:15:01.370 --> 00:15:02.520
could possibly imagine.

00:15:02.520 --> 00:15:04.100
And that's exactly what this is for.

00:15:04.100 --> 00:15:07.360
So I would say any time you've
got input that came from the user,

00:15:07.410 --> 00:15:10.460
they chose a file or they
typed a string in a dialog box.

00:15:10.500 --> 00:15:15.500
Before you send it to a UNIX command,
I think you want to protect it

00:15:15.500 --> 00:15:17.780
with this quoted form of operator.

00:15:18.000 --> 00:15:20.400
If you think this is just the
most fascinating topic ever,

00:15:20.400 --> 00:15:23.220
have I got a tech note for you.

00:15:23.220 --> 00:15:26.700
This tech note goes into a huge
level of detail on a do-shell

00:15:26.710 --> 00:15:28.440
script and all of these subtleties.

00:15:28.440 --> 00:15:33.480
And believe it or not,
there are even more obscure

00:15:33.480 --> 00:15:33.480
subtleties we could talk about,
but we're not going to.

00:15:38.210 --> 00:15:41.580
Now, you can click on things or you can,
I happen to prefer locating

00:15:41.580 --> 00:15:42.710
them in the script menu.

00:15:42.720 --> 00:15:46.440
The script menu is a nice way to
organize scripts so that the ones

00:15:46.440 --> 00:15:49.770
that are relevant to the frontmost
application appear at the top.

00:15:49.780 --> 00:15:51.850
I have a bunch of scripts I've
written that work with Finder.

00:15:51.860 --> 00:15:53.470
I have some others that
work with Terminal.

00:15:53.480 --> 00:15:55.040
I have some others that work with Mail.

00:15:55.040 --> 00:15:58.370
And if you set up the script menu,
this is the AppleScript utility program.

00:15:58.380 --> 00:16:02.110
If you set up the
script menu in this way,

00:16:02.120 --> 00:16:05.860
you get a little S icon in the menu bar.

00:16:06.880 --> 00:16:09.000
And you'll notice that in
this particular screenshot,

00:16:09.000 --> 00:16:10.760
the Finder is the frontmost application.

00:16:10.760 --> 00:16:14.340
So the top four scripts are all
scripts that relate to the Finder.

00:16:14.340 --> 00:16:16.220
Then you have all your other
scripts down at the bottom.

00:16:16.220 --> 00:16:19.890
This is a great thing that I wonder why
more people don't use to organize your

00:16:19.940 --> 00:16:21.980
scripts in a context-sensitive way.

00:16:21.980 --> 00:16:23.870
Let me show you.

00:16:23.910 --> 00:16:25.310
If we go back to the demo machine,
let me show you a couple

00:16:25.310 --> 00:16:26.150
examples of that kind of thing.

00:16:27.970 --> 00:16:31.460
I'm tempted to play Hangman
again because it's so much fun.

00:16:31.460 --> 00:16:35.700
So this is my scripts menu
on this particular computer.

00:16:36.000 --> 00:16:38.040
And if you organize your
scripts menu in this way,

00:16:38.040 --> 00:16:42.180
if you have library, scripts,
applications, and then subfolders for the

00:16:42.180 --> 00:16:45.080
different application names,
you could have scripts

00:16:45.080 --> 00:16:48.850
for the finder over here,
and then the script menu

00:16:48.850 --> 00:16:50.100
will have those at the top.

00:16:50.120 --> 00:16:54.300
But if we switch to iChat,
the script menu has

00:16:54.300 --> 00:16:57.800
iChat-related scripts at the top.

00:16:57.800 --> 00:17:02.250
If you switch to Mail,
it has Mail-related scripts at the top.

00:17:03.780 --> 00:17:06.280
So you eventually build a fairly
large collection of these things,

00:17:06.280 --> 00:17:09.780
and this is a terrific way
to actually organize them.

00:17:09.780 --> 00:17:14.540
I'm a big script menu guy as a
way of working around missing

00:17:14.630 --> 00:17:16.280
functionality in certain programs.

00:17:16.280 --> 00:17:19.490
Have you ever noticed that iChat
tends to truncate your status message

00:17:19.490 --> 00:17:21.280
at something like 43 characters?

00:17:21.280 --> 00:17:23.780
If you're not careful,
you don't notice it, but your friends do.

00:17:23.780 --> 00:17:27.240
Your friends notice that you've
created some extremely clever status

00:17:27.240 --> 00:17:29.280
message that seems to be chopped
off in the middle of the word.

00:17:29.280 --> 00:17:33.280
Well, I have a little script here that
creates a non-truncated status message.

00:17:33.780 --> 00:17:34.870
Amen.

00:17:37.480 --> 00:17:45.510
Boy, I really like WDC this year because
it is so much fun to-- anyway,

00:17:45.540 --> 00:17:46.970
you try to set that to
your status message,

00:17:46.970 --> 00:17:48.450
this is going to tell
you that's too long.

00:17:48.530 --> 00:17:53.380
It'll get chopped off there and give
you a chance to write in a shorter one.

00:17:53.380 --> 00:17:56.630
I think this might be
actually fixed in Leopard.

00:17:56.630 --> 00:17:57.620
I'm not sure.

00:17:57.620 --> 00:18:01.140
But there's something about the iChat
protocol that truncates status messages.

00:18:01.140 --> 00:18:01.140
So little scripts like this
will keep you out of hot water.

00:18:01.200 --> 00:18:02.190
Yeah, that's a good one.

00:18:02.200 --> 00:18:03.690
I think maybe I'll go back to
the ways to prepare shrimp.

00:18:03.720 --> 00:18:04.500
That was much more exciting.

00:18:04.500 --> 00:18:06.470
But let me show you a couple others.

00:18:06.480 --> 00:18:09.780
For instance,
here is a great way to incur

00:18:09.780 --> 00:18:11.750
the wrath of the IT department.

00:18:11.760 --> 00:18:16.150
I'm sending a message
to everybody at Apple.

00:18:16.160 --> 00:18:18.360
Cute cat pictures.

00:18:26.000 --> 00:18:31.320
drag in some tremendously large files
like that to go to the entire company.

00:18:31.320 --> 00:18:33.670
The IT people,
your phone will ring very quickly after

00:18:33.670 --> 00:18:35.160
you try to do something like this.

00:18:35.160 --> 00:18:35.640
But how about this?

00:18:35.640 --> 00:18:37.030
How about a script?

00:18:37.050 --> 00:18:43.590
This is actually an Automator workflow,
but they can appear in

00:18:43.590 --> 00:18:43.590
the script menu as well.

00:18:43.590 --> 00:18:43.590
How about a script that
lets me choose a file

00:18:53.500 --> 00:18:55.770
I have an emergency backup joke ready.

00:18:56.020 --> 00:18:58.800
I may have to get out the
emergency backup joke.

00:18:58.870 --> 00:19:02.520
This Canadian guy and this Iranian guy
went to a German restaurant.

00:19:03.350 --> 00:19:05.700
and the Canadian guy says
the Iranian guy-- oh,

00:19:05.700 --> 00:19:06.060
sorry.

00:19:06.060 --> 00:19:06.560
Hang on.

00:19:06.560 --> 00:19:08.350
Here we are.

00:19:09.560 --> 00:19:11.640
I want to add those
files to this message,

00:19:11.640 --> 00:19:14.740
but what I wanted to do is to actually
copy them to my .mac public folder first,

00:19:14.760 --> 00:19:16.020
which this script is doing.

00:19:16.020 --> 00:19:18.160
It's copying those large files
to my .mac public folder.

00:19:19.450 --> 00:19:25.920
and figuring out the URL of those files
and adding the URL to the mail message.

00:19:26.510 --> 00:19:27.300
You can do a lot with this.

00:19:27.300 --> 00:19:30.740
You can have a hot folder that you
drop things in and it copied it to .Mac

00:19:30.740 --> 00:19:32.000
and put the URL in the mail message.

00:19:32.000 --> 00:19:36.040
This is not a bad way to send out
big files to a large group of people.

00:19:36.040 --> 00:19:37.980
I've often wished for a mail
application that figured out how to

00:19:38.020 --> 00:19:42.440
do this kind of thing automatically,
but until I have that, I got this.

00:19:42.460 --> 00:19:45.560
I'd like to go back to slides, please.

00:19:45.560 --> 00:19:47.750
If we have time,
we'll finish the joke about the

00:19:47.750 --> 00:19:50.650
Canadian guy and the Iranian guy
at the German restaurant.

00:19:53.000 --> 00:19:56.850
Now, we all have users that are running
in a managed environment where we

00:19:56.850 --> 00:19:58.290
restrict what programs they can run.

00:19:58.300 --> 00:19:59.520
You can run these, but not others.

00:19:59.520 --> 00:20:02.540
You've got work group management,
you've got parental controls,

00:20:02.540 --> 00:20:06.510
and they all key off of bundle
identifiers in Cocoa applications.

00:20:06.520 --> 00:20:09.410
If an application does not
have a bundle identifier,

00:20:09.530 --> 00:20:12.470
and scripts do not,
you cannot manage it in this way.

00:20:12.500 --> 00:20:14.080
Scripts are ordinarily flat files.

00:20:14.080 --> 00:20:16.790
However,
I want to suggest that if you save

00:20:16.790 --> 00:20:20.280
a script as an application instead,
which you can do in Script Editor,

00:20:20.280 --> 00:20:22.120
it now looks like this.

00:20:22.120 --> 00:20:24.140
It's got the contents and
the resources and everything.

00:20:24.140 --> 00:20:28.200
It's got an Info.plist in it,
and in that Info.plist,

00:20:28.210 --> 00:20:33.980
if you were to add a CFBundle identifier
with a unique string,

00:20:33.980 --> 00:20:36.300
you've turned your script into
something that can be managed.

00:20:36.300 --> 00:20:38.650
If you don't do this,
you can't deploy a script

00:20:38.690 --> 00:20:40.240
in a managed environment.

00:20:40.240 --> 00:20:43.420
It will not run, and you cannot add it to
the list of approved apps.

00:20:43.420 --> 00:20:45.650
If you do do this,
suddenly your script becomes

00:20:45.650 --> 00:20:47.280
something that can be managed.

00:20:47.280 --> 00:20:49.130
I'll go back to the
demo for a moment here.

00:20:49.820 --> 00:20:52.320
I've got a script here that

00:20:52.450 --> 00:20:54.000
can't be managed.

00:20:54.060 --> 00:20:55.520
One of my friends here
is in the front row,

00:20:55.520 --> 00:20:57.800
and he once sent his
iChat status message to,

00:20:57.830 --> 00:21:01.840
you can't spell very sexy without XServe.

00:21:01.840 --> 00:21:03.340
I thought, wow, that was pretty good.

00:21:03.340 --> 00:21:04.880
He must have spent a lot of
time thinking that one up.

00:21:04.880 --> 00:21:08.310
Surely we can have a program that
can do this kind of thing for us.

00:21:08.390 --> 00:21:09.760
So there's a little application.

00:21:09.760 --> 00:21:12.430
You can't spell Dave Lopata--

00:21:13.850 --> 00:21:35.490
and Dave Lopata.

00:21:36.120 --> 00:21:36.580
This is just a little example
application that I've written.

00:21:36.580 --> 00:21:36.580
I can set my iChat status appropriately.

00:21:36.580 --> 00:21:36.580
But if I were to try to make
this a manageable script,

00:21:36.580 --> 00:21:36.580
I can't do it.

00:21:36.580 --> 00:21:36.580
I go to system preferences here
and I have a managed account.

00:21:36.580 --> 00:21:36.580
If I try to add this
particular application,

00:21:37.730 --> 00:21:38.260
You can't spell.

00:21:38.360 --> 00:21:39.600
That's actually an application.

00:21:39.600 --> 00:21:42.100
Now, it does not work with the
limitations you have selected.

00:21:42.100 --> 00:21:44.100
It does not have a bundle identifier.

00:21:44.100 --> 00:21:47.100
That's easy to rectify
manually if you want,

00:21:47.330 --> 00:21:48.600
but I got a droplet.

00:21:48.600 --> 00:21:51.600
I can drag a script without a
bundle identifier on a droplet,

00:21:51.600 --> 00:21:53.340
and it will say, "Oh,
what do you want the

00:21:53.340 --> 00:21:54.100
bundle identifier to be?

00:21:54.330 --> 00:21:55.900
How about that?"

00:21:56.130 --> 00:22:00.100
Okay, this script now has a bundle
identifier and can now be managed.

00:22:00.110 --> 00:22:04.090
I could drill back into Terminal here,
or pardon me, to System Prefs.

00:22:07.300 --> 00:22:10.760
And I want to add this account
to my managed parental controls.

00:22:10.760 --> 00:22:13.290
This particular application, I mean,
located again.

00:22:13.460 --> 00:22:14.260
Isn't this fascinating?

00:22:14.260 --> 00:22:16.060
Where is he going with this?

00:22:21.400 --> 00:22:24.760
Let's try that again.

00:22:24.760 --> 00:22:26.580
So the Canadian guy
says to the Iranian guy,

00:22:26.580 --> 00:22:31.310
"What are you having?"
And the Iranian guy says,

00:22:32.480 --> 00:22:35.250
There,
it's now successfully been added to

00:22:35.250 --> 00:22:36.700
the list of manageable applications.

00:22:36.700 --> 00:22:38.840
If you don't do this,
the app can't be managed.

00:22:38.840 --> 00:22:41.360
There's plenty of simple things
you could do as manageable scripts

00:22:41.400 --> 00:22:42.380
that you want to add this way.

00:22:42.380 --> 00:22:43.340
Can I go back to slides, please?

00:22:43.340 --> 00:22:48.780
All right, I want to run one last
idea past you here.

00:22:51.900 --> 00:22:52.740
AppleScript and Root.

00:22:52.740 --> 00:22:56.830
We all have problems that could be
solved if only our users were able to

00:22:56.830 --> 00:22:58.820
run one particular command as root.

00:22:58.850 --> 00:23:01.520
They've got some runaway
process we'd like them to kill.

00:23:01.520 --> 00:23:03.520
We need them to be able
to create a folder.

00:23:03.520 --> 00:23:05.910
We need them to run some
peculiar command as root,

00:23:05.910 --> 00:23:09.260
and we do not wish to go over there
and run that command as root ourselves.

00:23:09.260 --> 00:23:13.250
We have a large deployment in the
Northeast of thousands of iBooks,

00:23:13.320 --> 00:23:16.020
and someone calculated once it would
cost over a million dollars to send

00:23:16.020 --> 00:23:18.600
a technician out to each machine
just to push the power button.

00:23:18.920 --> 00:23:21.510
So if you can think of a way
to have an admin task work,

00:23:21.540 --> 00:23:24.380
you can save a million dollars,
and you can share it with the

00:23:24.500 --> 00:23:25.740
guy who told you how to do it.

00:23:28.640 --> 00:23:30.570
One way you could do it is
to make every user an admin.

00:23:30.600 --> 00:23:32.040
I think it's a bad idea.

00:23:32.040 --> 00:23:33.060
You could do that.

00:23:33.060 --> 00:23:35.580
Then do shell script with administrator
privileges would work for everybody.

00:23:35.580 --> 00:23:38.840
Another way is to put the admin
password directly into the script.

00:23:38.840 --> 00:23:40.180
You can also do this.

00:23:40.220 --> 00:23:42.240
Supply a username and a password.

00:23:42.240 --> 00:23:44.080
This is an even worse idea.

00:23:44.300 --> 00:23:47.690
It works,
but people will eventually figure out

00:23:47.700 --> 00:23:51.590
what the password is no matter how
hard you try to obscure it in there.

00:23:51.800 --> 00:23:52.800
I got a better idea.

00:23:52.800 --> 00:23:55.080
You know the sudo command?

00:23:55.080 --> 00:23:58.620
sudo on the command line normally lets
people run commands as root provided

00:23:58.620 --> 00:24:02.090
that they are an admin and provided
they type their admin password.

00:24:02.090 --> 00:24:04.510
What sudo does is to collect
that password and then

00:24:04.510 --> 00:24:06.000
run the command as root.

00:24:06.140 --> 00:24:09.850
What if we messed around
with the sudo program?

00:24:09.850 --> 00:24:13.210
sudo has this little-known
config file called sudoers,

00:24:13.220 --> 00:24:16.400
which describes the rules by
which the sudo command plays.

00:24:16.400 --> 00:24:20.620
Normally, it says members of group admin
can execute any command they want,

00:24:20.620 --> 00:24:24.570
that's the second line, as root,
provided they type the password.

00:24:24.580 --> 00:24:29.580
However, you can actually add,
in a peculiar, bizarre language,

00:24:29.580 --> 00:24:32.460
you can add your own entries to this.

00:24:32.980 --> 00:24:37.460
You can specify certain very specific
commands and say users are allowed

00:24:37.460 --> 00:24:41.120
to run this exact command and this
one only as root with the sudo

00:24:41.120 --> 00:24:42.900
command without typing the password.

00:24:42.900 --> 00:24:46.220
That's what that no password
colon in that config file means.

00:24:46.220 --> 00:24:48.990
Think of all the problems that this
could solve if you distributed a

00:24:48.990 --> 00:24:52.270
file with your one special repair
command in that sudoers file.

00:24:52.280 --> 00:24:53.560
Be very careful with this file.

00:24:53.560 --> 00:24:59.980
Do not let them run the shell as
the command or the RM program.

00:25:00.830 --> 00:25:03.300
a couple clicks away,
but as an administrator tool,

00:25:03.300 --> 00:25:04.260
I think this could be pretty useful.

00:25:04.260 --> 00:25:05.660
So, here's an example.

00:25:05.840 --> 00:25:09.570
Despite our best efforts,
clocks get out of sync from time to time.

00:25:09.600 --> 00:25:11.850
I believe if you boot a machine
and it's not on the network,

00:25:11.930 --> 00:25:13.860
the network time daemon
does not start correctly.

00:25:13.950 --> 00:25:17.620
If the machine later joins the network,
it still does not start correctly,

00:25:17.620 --> 00:25:19.280
and the clock is now wrong.

00:25:19.420 --> 00:25:22.960
This can be fixed by
typing sudo ntpdate -u,

00:25:23.100 --> 00:25:24.600
but your users don't
know an admin password,

00:25:24.600 --> 00:25:25.810
so how's that gonna work?

00:25:25.860 --> 00:25:30.180
Well, what if you put that
line in the sudoers file?

00:25:30.180 --> 00:25:33.600
Now, any user would be able to type
that command to fix the clock,

00:25:33.700 --> 00:25:37.270
but if they don't have terminal access,
you could certainly write a little

00:25:37.270 --> 00:25:39.800
Apple script that simply said,
"Click here,

00:25:39.850 --> 00:25:42.610
"and I'll fix the stupid clock for
you," and then it ran that command.

00:25:42.620 --> 00:25:44.980
They don't need to be admins,
they don't need to be root.

00:25:44.980 --> 00:25:47.650
Because you've set up the sudoers file,
certain very specific

00:25:47.660 --> 00:25:48.700
commands will run as root.

00:25:48.700 --> 00:25:50.920
I think this is a handy technique,
and I wish I'd found this

00:25:50.970 --> 00:25:52.050
out several years ago.

00:25:52.060 --> 00:25:54.510
There are some very complicated
hacks I've come up with that could

00:25:54.510 --> 00:25:55.960
have been simplified by this.

00:25:55.960 --> 00:25:59.230
Now, just in closing, I wanna tell you,
I got a little carried away.

00:26:03.730 --> 00:26:06.180
Apologies to Phil Collins,
there's an app that's been

00:26:06.180 --> 00:26:12.140
on my mind all the time,
Sudo Studio.

00:26:12.600 --> 00:26:16.110
It's a little application that
lets you specify the command line,

00:26:16.120 --> 00:26:18.460
and it will both write the
necessary string to sudoers,

00:26:18.460 --> 00:26:20.730
and it will create the
trivial AppleScript for you

00:26:20.810 --> 00:26:22.180
and set it all up for you.

00:26:22.180 --> 00:26:25.600
I'm going to make all this
stuff available post-conference,

00:26:25.600 --> 00:26:27.640
and thank you for your interest.

00:26:27.640 --> 00:26:30.920
And I'd like to turn things over
now to a UNIX hacker from Ann,

00:26:30.930 --> 00:26:31.760
Ohio State.

00:26:31.760 --> 00:26:33.040
Is it Ann, Ohio State University?

00:26:33.060 --> 00:26:34.460
Oh, I'm sorry.

00:26:34.570 --> 00:26:39.440
The, excuse me,
the Ohio State University, Jeff McCune.

00:26:39.440 --> 00:26:42.300
Thanks, Steve.

00:26:42.600 --> 00:26:43.630
Right hand.

00:26:48.100 --> 00:26:51.920
So I'm Jeff McCune,
and I'd like to talk to you about Puppet,

00:26:51.920 --> 00:26:56.990
which is a new automation tool that
I've been using for the past year.

00:26:57.360 --> 00:26:59.210
So a little bit about myself first.

00:26:59.280 --> 00:27:01.730
I'm one of the network
administrators at the Maths

00:27:01.730 --> 00:27:05.140
Department at Ohio State University,
and I'm currently responsible for

00:27:05.140 --> 00:27:10.300
about 200 Mac OS X workstations,
about 12 UNIX servers,

00:27:10.400 --> 00:27:14.500
and I've got 250 faculty, staff,
and graduate students that I support.

00:27:14.500 --> 00:27:18.800
So this keeps me pretty
busy on a day-to-day basis.

00:27:19.220 --> 00:27:23.600
The problem that Puppet is trying
to address is the sneaker net.

00:27:23.600 --> 00:27:27.430
So the sneaker net is good for
moving a 120 terabyte database

00:27:27.440 --> 00:27:30.790
from one location to another,
but it's not really well suited if

00:27:30.790 --> 00:27:34.770
you're a network administrator and you
need to walk around to each of your

00:27:34.800 --> 00:27:38.150
machines and apply the Office 2004 patch.

00:27:38.230 --> 00:27:44.920
So Puppet helps by configuring
machines quickly and easily regardless

00:27:44.920 --> 00:27:44.920
of how many of them you have.

00:27:45.670 --> 00:27:49.940
I started off with Puppet at
Ohio State about a year ago last summer,

00:27:50.120 --> 00:27:54.380
and I needed to quickly install
software packages on all of my machines.

00:27:54.380 --> 00:27:58.620
So we were doing software updates
to Firefox and things like this,

00:27:58.620 --> 00:28:01.470
and the problem I was facing was
that I wasn't quite sure if the

00:28:01.470 --> 00:28:04.550
faculty and the grad students were
using the machine at the time,

00:28:04.550 --> 00:28:07.300
if it was a laptop,
if it was even in the department.

00:28:08.120 --> 00:28:12.640
So I needed a way to centrally
configure the packages and make

00:28:12.640 --> 00:28:17.190
sure that all of my machines would
download those and install them.

00:28:17.200 --> 00:28:20.500
So Puppet handled this great.

00:28:20.500 --> 00:28:23.390
I was able to update all
of my machines quickly,

00:28:23.390 --> 00:28:27.500
and I decided that as more problems
cropped up in the department,

00:28:27.500 --> 00:28:30.680
I would go ahead and try to solve
them with the help of Puppet.

00:28:30.680 --> 00:28:34.960
The end result was that after
about six months in December,

00:28:34.960 --> 00:28:38.020
I found out that everything
I was configuring on a

00:28:38.020 --> 00:28:38.020
Mac OS X was not working.

00:28:38.020 --> 00:28:39.990
So I had to go back to
the Mac workstation,

00:28:39.990 --> 00:28:41.410
was being done with Puppet.

00:28:41.410 --> 00:28:43.400
So I had achieved complete automation.

00:28:43.410 --> 00:28:46.930
I could net boot a machine,
and I didn't have to touch it after that.

00:28:46.940 --> 00:28:49.790
Puppet went ahead and
configured everything for me.

00:28:49.820 --> 00:28:52.020
So that ended up saving me a lot of time.

00:28:53.850 --> 00:28:56.450
Here's some information
about Puppet itself.

00:28:56.460 --> 00:28:59.940
The main website is
puppet.reductivelabs.com.

00:28:59.940 --> 00:29:03.050
It's written by Luke Caines,
who is a veteran system

00:29:03.050 --> 00:29:07.480
administrator who was frustrated
with existing tools at the time.

00:29:07.480 --> 00:29:09.830
So he started working on
Puppet a few years ago,

00:29:09.830 --> 00:29:14.480
and he founded Reductive Labs in
2003 in order to offer professional

00:29:14.480 --> 00:29:17.790
support and consulting services.

00:29:17.920 --> 00:29:19.900
Puppet is open source software.

00:29:19.900 --> 00:29:22.810
It's written in Ruby,
and it's got a fairly large community

00:29:22.810 --> 00:29:27.350
of users and developers who are
willing to exchange ideas and

00:29:27.350 --> 00:29:31.140
the scripts that they've written,
so that's a pretty good resource.

00:29:32.450 --> 00:29:36.400
There's a few existing tools out there
that also try to address the problem

00:29:36.400 --> 00:29:38.770
of managing a large number of machines.

00:29:38.780 --> 00:29:43.760
In particular, FileWave and Landesk
deploy software in patches.

00:29:43.760 --> 00:29:47.060
RadMind takes a slightly
different approach.

00:29:47.060 --> 00:29:50.080
It keeps machines in a known
good state by synchronizing all

00:29:50.080 --> 00:29:51.810
of the files on the hard drive.

00:29:51.820 --> 00:29:55.010
CFEngine is probably
most similar to Puppet.

00:29:55.020 --> 00:29:58.910
We were using that at the math
department prior to Puppet.

00:29:58.950 --> 00:30:03.000
And it's described as a multi-purpose
adaptive system configuration engine.

00:30:03.000 --> 00:30:05.980
I'm not quite sure what that means,
but that's from the CFEngine website.

00:30:05.980 --> 00:30:10.060
I would describe it more as a
framework for downloading shell

00:30:10.060 --> 00:30:13.050
scripts and making sure that they
get run on all of your machines.

00:30:13.060 --> 00:30:16.420
And then finally,
custom scripts do get the job done.

00:30:18.200 --> 00:30:21.540
So here's sort of a comparison
of the tools I just mentioned.

00:30:21.540 --> 00:30:25.140
Puppet is more of a jack-of-all-trades,
really.

00:30:25.140 --> 00:30:27.880
It tries to help you automate
anything that you might do

00:30:27.880 --> 00:30:30.940
as a system administrator to
a large number of machines.

00:30:30.940 --> 00:30:33.010
So I started out with
package installation,

00:30:33.010 --> 00:30:36.060
and it's pretty good at that and
keeping my machines up to date.

00:30:36.060 --> 00:30:39.610
It doesn't support Windows yet,
although it is written in Ruby,

00:30:39.610 --> 00:30:41.820
and Ruby works quite well in Windows.

00:30:41.820 --> 00:30:44.690
We don't really have
Puppet support in Windows,

00:30:44.690 --> 00:30:47.060
but that might be added in the future.

00:30:47.880 --> 00:30:51.470
Puppet also doesn't support any
inventory tracking or asset tracking yet,

00:30:51.490 --> 00:30:54.620
but it does have some features that
might lend itself to that in the future,

00:30:54.620 --> 00:30:56.500
and it is open-source software.

00:30:56.500 --> 00:31:00.840
CFEngine I have marked as poor for
package installation and software

00:31:00.840 --> 00:31:05.110
updates because it really leaves
you to do all of that yourself.

00:31:05.120 --> 00:31:08.010
So when I was using CFEngine
on our Mac workstations,

00:31:08.010 --> 00:31:12.300
I ended up writing shell scripts anyway
to do all the package installation.

00:31:12.300 --> 00:31:16.030
CFEngine doesn't support Windows,
and it doesn't have any asset tracking,

00:31:16.030 --> 00:31:17.650
although it is open source.

00:31:17.660 --> 00:31:19.660
So I'm going to show you how
to use open-source software.

00:31:19.660 --> 00:31:23.280
And then we have FileWave and Landesk,
which are commercial products,

00:31:23.280 --> 00:31:26.280
and they're particularly good at
software installation and updates.

00:31:26.280 --> 00:31:28.230
That's what they're designed to do,
actually.

00:31:28.280 --> 00:31:31.270
And they're also good if
you have a mixed platform.

00:31:31.280 --> 00:31:34.250
So if you support
Windows and Mac workstations,

00:31:34.250 --> 00:31:37.280
FileWave and Landesk
are pretty good at that.

00:31:37.280 --> 00:31:40.520
And they do also provide
inventory tracking if you

00:31:40.520 --> 00:31:42.700
need to track your purchases.

00:31:42.970 --> 00:31:46.340
Finally, Radmind takes a slightly
different approach.

00:31:46.340 --> 00:31:49.900
It's particularly good at managing
machines that are identical in nature.

00:31:49.900 --> 00:31:53.700
So if you have a lab
or something like that,

00:31:53.700 --> 00:31:57.340
it's good at installing
all of the files initially,

00:31:57.340 --> 00:32:00.030
but I found it was a little
bit cumbersome to do small

00:32:00.030 --> 00:32:02.050
updates on each machine.

00:32:02.120 --> 00:32:04.700
So I have it marked as
OK for software updates.

00:32:04.700 --> 00:32:10.090
And it does currently support Windows,
but it doesn't have any asset tracking.

00:32:11.520 --> 00:32:14.830
So here's the big picture
about how Puppet works.

00:32:14.880 --> 00:32:19.620
It's similar to a lot of other tools
in that it's got a client and a server.

00:32:20.870 --> 00:32:28.520
So in the math department,
I have one master server that all of the

00:32:28.560 --> 00:32:32.780
workstations connect to every 30 minutes,
and they pull down their configuration.

00:32:32.780 --> 00:32:37.360
So on each client,
I've got this agent installed,

00:32:37.360 --> 00:32:41.500
and it makes a connection over a
standard secure HTTP connection,

00:32:41.500 --> 00:32:44.550
and it uses the XMLRPC web
service to transfer all of the

00:32:44.560 --> 00:32:46.360
information back and forth.

00:32:47.480 --> 00:32:51.310
Puppet is particularly good if you
have a general standard operating

00:32:51.310 --> 00:32:54.940
environment that needs to be tweaked
slightly for different roles.

00:32:54.940 --> 00:32:57.370
So in the math department,
I've got a role for

00:32:57.450 --> 00:32:59.620
the graduate students,
a standard operating

00:32:59.620 --> 00:33:02.510
environment for them,
a role for the staff members,

00:33:02.510 --> 00:33:04.460
and a role for the faculty.

00:33:04.460 --> 00:33:07.130
So this allows me to install
different applications for

00:33:07.130 --> 00:33:08.840
different people quite easily.

00:33:10.790 --> 00:33:13.100
So here's a little bit more
detail about how Puppet is

00:33:13.100 --> 00:33:14.980
working on an individual machine.

00:33:14.980 --> 00:33:19.560
The first thing that happens is when
Puppet needs to configure that machine,

00:33:19.560 --> 00:33:23.400
it will collect a list of information
about the particular workstation.

00:33:23.400 --> 00:33:28.830
And Puppet uses a separate library called
Factor to get all of this information.

00:33:28.840 --> 00:33:33.700
And the information will contain things
like the IP address of the machine,

00:33:33.700 --> 00:33:35.800
the MAC address of the
Ethernet interface,

00:33:35.800 --> 00:33:40.480
the amount of memory in the machine,
if it's an Intel or a PowerPC machine,

00:33:40.480 --> 00:33:41.680
things like this.

00:33:41.680 --> 00:33:46.200
The Factor library is also very easy
to add additional information if

00:33:46.200 --> 00:33:47.800
you need to track different things.

00:33:47.800 --> 00:33:50.830
So something I've been hoping to
write but haven't gotten around

00:33:50.840 --> 00:33:53.360
to is something that tracks the
serial number on every machine.

00:33:53.360 --> 00:33:58.700
Once Puppet collects this list
of information about the machine,

00:33:58.700 --> 00:34:01.180
it will upload it to the
Puppet Master server.

00:34:01.180 --> 00:34:06.580
And the Puppet Master then takes over,
and the scripts that you and we as

00:34:06.650 --> 00:34:12.510
a system administrator write are
more general for the entire network.

00:34:12.520 --> 00:34:18.470
So I usually configure the Puppet
Master to install packages if it's

00:34:18.470 --> 00:34:20.800
an Intel or a PowerPC machine.

00:34:20.800 --> 00:34:25.520
So if it's an Intel,
I'll install the 1049 universal update.

00:34:25.520 --> 00:34:29.530
But if it's a PowerPC,
I'll have the 1049 TI update

00:34:29.540 --> 00:34:30.420
installed on that machine.

00:34:30.420 --> 00:34:34.830
So the manifest is more of a general
picture of your entire network.

00:34:34.860 --> 00:34:37.910
And the Puppet Master takes the
facts that are uploaded and puts

00:34:37.910 --> 00:34:38.200
them in the Puppet Master server.

00:34:38.210 --> 00:34:41.740
And generates a unique and dynamic
configuration for that machine,

00:34:41.740 --> 00:34:43.360
which it sends back.

00:34:43.360 --> 00:34:46.170
So the Puppet client,
once it has this actual

00:34:46.180 --> 00:34:49.940
configuration that contains things
specifically tailored to it,

00:34:50.000 --> 00:34:53.460
will actually go to the work of
configuring that machine for you.

00:34:53.460 --> 00:34:55.560
So this might involve
downloading packages,

00:34:55.560 --> 00:34:59.810
copying files from the Puppet Master,
or making sure that a local

00:34:59.810 --> 00:35:02.880
administrator user is created for you,
things like this.

00:35:05.300 --> 00:35:08.900
So this is how I sort of got started
with Puppet on the math department.

00:35:08.990 --> 00:35:11.290
First,
I just needed to do package installation,

00:35:11.290 --> 00:35:13.200
and I was able to quickly
do that with Puppet.

00:35:13.200 --> 00:35:17.220
And then I added managed
printers on all of our machines.

00:35:17.220 --> 00:35:21.560
So I needed a way to configure all
the public and private printers in a

00:35:21.560 --> 00:35:23.540
particular faculty member's office.

00:35:23.540 --> 00:35:26.500
And Puppet helped me out
with that quite a bit.

00:35:27.260 --> 00:35:31.360
So I also update our
login hooks quite a bit.

00:35:31.360 --> 00:35:35.140
And Puppet allows me to copy
down the updated shell script

00:35:35.170 --> 00:35:38.730
and configure the login window,
which we'll see a little bit later on.

00:35:38.740 --> 00:35:42.000
And then finally,
I set up the open firmware password

00:35:42.000 --> 00:35:46.700
to secure the machine and make sure
that it's bound to our LDAP directory.

00:35:46.700 --> 00:35:51.200
So in total, this only ended up being a
few thousand lines of Puppet.

00:35:53.390 --> 00:35:58.320
It really saved me a lot of time because
for the complete configuration for OS X,

00:35:58.330 --> 00:36:02.700
it didn't end up being that much work
to completely configure everything.

00:36:03.800 --> 00:36:07.800
So Puppet has a simple syntax.

00:36:07.800 --> 00:36:10.240
Here we're just going to manage
two different types of things.

00:36:10.240 --> 00:36:15.310
We're going to install a package and make
sure that a file is actually deleted.

00:36:16.350 --> 00:36:18.910
So each thing that you
manage will have a name.

00:36:18.920 --> 00:36:21.420
And in this example,
we've got the Firefox,

00:36:21.420 --> 00:36:24.250
which is the name of the
package we're installing,

00:36:24.250 --> 00:36:27.500
and the source file that
we're going to get that from.

00:36:27.500 --> 00:36:31.620
And this DMG will contain a standard
Apple installation package inside of it.

00:36:31.640 --> 00:36:34.770
And then we're just going to
make sure that it's installed.

00:36:34.770 --> 00:36:38.320
So when Puppet runs for the first time,
if Firefox is not installed,

00:36:38.320 --> 00:36:39.960
it'll go ahead and install it.

00:36:39.960 --> 00:36:42.660
And then on later runs,
it won't do anything because

00:36:42.660 --> 00:36:44.780
Firefox is already installed.

00:36:44.980 --> 00:36:47.250
And this also allows you to
update the package later on.

00:36:47.250 --> 00:36:49.690
You just need to change the
version number of Firefox,

00:36:49.690 --> 00:36:52.520
and you can easily install
that on all of your machines.

00:36:52.520 --> 00:36:55.470
With the Etsy no login file,
this is sort of different.

00:36:55.470 --> 00:36:59.110
We're telling Puppet here to make
sure that this file doesn't exist.

00:36:59.110 --> 00:37:01.400
So it's deleted on all of the machines.

00:37:01.400 --> 00:37:04.320
Something I would frequently
do is when I would log into

00:37:04.320 --> 00:37:07.300
a machine to do some work,
I'd touch this file in order to

00:37:07.300 --> 00:37:10.710
make sure that the user didn't log
in and start working while I was

00:37:10.710 --> 00:37:12.740
fixing their machine for them.

00:37:12.740 --> 00:37:13.660
So I'd forget to delete their machine.

00:37:13.660 --> 00:37:16.070
So I'd forget to delete their
-- delete this file that I'd

00:37:16.090 --> 00:37:18.690
touched when I was done working,
and the user would be

00:37:18.690 --> 00:37:21.830
locked out of their machine,
and I'd get a nasty phone call.

00:37:21.890 --> 00:37:25.430
So now I just make sure to run Puppet
when I'm done working on any of

00:37:25.440 --> 00:37:29.170
the workstations in the department,
and it goes through the trouble

00:37:29.290 --> 00:37:32.560
of deleting this file for me
and making sure that the machine

00:37:32.560 --> 00:37:35.080
is usable by the customer.

00:37:35.630 --> 00:37:38.100
So under the hood, Puppet is doing quite
a bit of work for you.

00:37:38.120 --> 00:37:42.660
With a package in only the four
lines that you saw earlier,

00:37:42.660 --> 00:37:46.940
Puppet downloads the DMG file
to the temp directory.

00:37:46.940 --> 00:37:51.760
It can download this from the master
server itself or from an HTTP server

00:37:51.760 --> 00:37:54.310
or copy it from an AFP volume,
things like that.

00:37:54.320 --> 00:37:57.920
Once it's downloaded it,
it mounts the DMG with

00:37:57.920 --> 00:38:00.700
the HDI util command,
and it does this in a way

00:38:00.700 --> 00:38:04.230
that's private to the finder,
so the user doesn't get any

00:38:04.240 --> 00:38:06.740
interruptions while they're working.

00:38:06.740 --> 00:38:09.010
If this is happening in the background,
they don't see the disk

00:38:09.010 --> 00:38:10.250
image pop up in the finder.

00:38:10.260 --> 00:38:14.540
And then Puppet looks inside the DMG,
checks for any packages,

00:38:14.540 --> 00:38:19.210
installs them with the
HDI command line installer,

00:38:19.220 --> 00:38:22.600
and when it's done with that,
it ejects the DMG and cleans

00:38:22.600 --> 00:38:23.420
up the temp directory.

00:38:23.420 --> 00:38:26.190
So quite a bit of work is done
for you automatically with just

00:38:26.190 --> 00:38:27.720
a few lines of Puppet script.

00:38:27.760 --> 00:38:31.380
With the file,
Puppet behaves a little bit more

00:38:31.380 --> 00:38:33.430
like RadMind or... or rsync.

00:38:33.440 --> 00:38:37.420
The configuration that it receives from
the Puppet master server will contain

00:38:37.420 --> 00:38:42.160
a timestamp and a checksum for each of
the files that Puppet needs to manage.

00:38:42.160 --> 00:38:45.780
So if the local
workstation is out of sync,

00:38:45.780 --> 00:38:47.940
the timestamp or the
checksum will be different,

00:38:47.940 --> 00:38:50.100
and Puppet will make
a backup copy for you,

00:38:50.100 --> 00:38:53.610
then synchronize the file from
the master server and enforce any

00:38:53.610 --> 00:38:55.370
permissions that you might specify.

00:38:55.380 --> 00:38:59.320
So if you need to make sure that the
file is owned by root and not readable

00:38:59.320 --> 00:39:01.560
or writable by any of the users,
Puppet will make sure

00:39:01.560 --> 00:39:02.560
that that happens for you.

00:39:02.600 --> 00:39:07.870
With the executable scripts,
Puppet's actually sort of nice

00:39:07.880 --> 00:39:11.140
because it allows you to mix and
match these with the other package

00:39:11.140 --> 00:39:12.880
resources and the file resources.

00:39:12.900 --> 00:39:16.420
So you can do order of operations,
and if you already have existing

00:39:16.430 --> 00:39:18.360
shell scripts that you've
written to do some of the work,

00:39:18.360 --> 00:39:21.260
Puppet can automatically
call these for you,

00:39:21.310 --> 00:39:24.270
and you don't need to sort of throw
away the work that you've already done.

00:39:24.280 --> 00:39:25.480
So that's the Puppet script.

00:39:25.930 --> 00:39:29.460
So here's an example of something
that I do frequently with Puppet.

00:39:29.470 --> 00:39:33.580
This is setting MCX settings
on the local machine.

00:39:33.580 --> 00:39:37.330
So we don't have an open
directory server set up currently,

00:39:37.340 --> 00:39:40.240
and what I'll need to do is
set a lot of default values.

00:39:40.240 --> 00:39:44.320
So if I need to enforce a
password on the screen saver,

00:39:44.320 --> 00:39:49.380
or if I need to configure the login
window to execute my login hooks,

00:39:49.380 --> 00:39:53.220
then I need to run the defaults
command to configure these things.

00:39:53.220 --> 00:39:57.240
So with Puppet here, we're telling it to
enforce these settings,

00:39:57.290 --> 00:40:01.040
and what it will do is first check the
current setting on each of the machines,

00:40:01.040 --> 00:40:04.040
and if it doesn't exactly match
the value that we want it to,

00:40:04.040 --> 00:40:07.570
we'll use the defaults write
command to set that for us.

00:40:07.630 --> 00:40:12.560
So this is sort of a quick and easy
way to get around the lack of an open

00:40:12.560 --> 00:40:15.680
directory server if you don't have one.

00:40:15.680 --> 00:40:19.140
And then we can reuse
this MCX setting later on.

00:40:19.140 --> 00:40:23.350
So with this example,
I'm actually managing the complete

00:40:23.350 --> 00:40:24.380
login hook in the math department.

00:40:24.380 --> 00:40:30.100
So on all of my machines,
I frequently will update my shell scripts

00:40:30.110 --> 00:40:34.250
that run when people log in in order
to fix small problems like a lock file

00:40:34.250 --> 00:40:37.540
with Thunderbird or something like that.

00:40:37.540 --> 00:40:38.860
And there's really three pieces to this.

00:40:38.860 --> 00:40:42.760
So first, we need to make sure that the
iHook package is installed,

00:40:42.760 --> 00:40:47.620
and this provides user feedback
to the user when they log in.

00:40:47.670 --> 00:40:51.010
And then we need to actually
synchronize the shell script that

00:40:51.010 --> 00:40:53.330
I've written to all the machines.

00:40:53.350 --> 00:40:54.340
So that's the file.

00:40:54.340 --> 00:40:59.840
resource here which will check the the
time stamp and the checksum on every

00:40:59.840 --> 00:41:04.750
single machine every 30 minutes and
then download that if it's changed.

00:41:04.750 --> 00:41:08.630
So we're going to put that in the
temp directory and then make sure

00:41:08.630 --> 00:41:12.740
that it's executable and that it's
owned by root and wheel so that

00:41:12.740 --> 00:41:15.240
the users can't see what's inside.

00:41:15.240 --> 00:41:19.990
And then once we've installed the
the ihook package and downloaded

00:41:19.990 --> 00:41:23.230
the shell script from our central
server we need to actually configure

00:41:23.230 --> 00:41:26.930
the login window to execute this
shell script when somebody logs in.

00:41:26.980 --> 00:41:31.590
So here we're going to use the
MCX setting that we previously defined

00:41:31.740 --> 00:41:36.770
and configure the actual login hook
parameter of the login window to point

00:41:36.770 --> 00:41:39.040
to the actual path of the shell script.

00:41:39.040 --> 00:41:43.000
We've also got these requirement
statements in each of these so

00:41:43.000 --> 00:41:46.970
that Puppet is smart enough to know
that if it couldn't install the

00:41:46.970 --> 00:41:50.500
ihook package then the shell script
probably won't work correctly.

00:41:50.500 --> 00:41:54.350
So we shouldn't bother to try and copy
the shell script or configure the login

00:41:54.350 --> 00:41:56.770
window if any of any of that didn't work.

00:41:56.830 --> 00:42:00.590
And likewise if the file didn't download
correctly we don't reconfigure the

00:42:00.590 --> 00:42:02.810
login window to actually execute it.

00:42:02.870 --> 00:42:06.280
So Puppet saves you a
lot of time with that.

00:42:06.880 --> 00:42:09.670
If you're interested in
getting started with Puppet,

00:42:09.670 --> 00:42:11.700
I have a few recommendations for you.

00:42:11.700 --> 00:42:14.370
You don't actually need to
set up a Puppet master server.

00:42:14.380 --> 00:42:17.540
Puppet works just fine
as a standalone client,

00:42:17.540 --> 00:42:20.490
so you can download that to
your laptop right now and

00:42:20.490 --> 00:42:21.900
start playing around with it.

00:42:21.920 --> 00:42:25.500
I'd also recommend that you start
small and pick something that you

00:42:25.560 --> 00:42:27.460
constantly do to a workstation.

00:42:27.460 --> 00:42:29.760
For me, it was just installing
and updating packages.

00:42:29.760 --> 00:42:33.120
And then if Puppet can help
you out with that quite well,

00:42:33.120 --> 00:42:36.760
you might be able to grow that and
automate other things later on.

00:42:36.780 --> 00:42:39.400
And then finally, Puppet,
like Mac OS X Server,

00:42:39.400 --> 00:42:42.050
does require some good DNS,
at least initially,

00:42:42.050 --> 00:42:44.160
for the certificate generation.

00:42:44.160 --> 00:42:46.750
But if you're in a
dynamic DNS environment,

00:42:46.750 --> 00:42:51.230
once you have the initial certificate,
you can change host names and Puppet

00:42:51.230 --> 00:42:53.280
will still work in a secure way.

00:42:53.280 --> 00:42:56.500
So it doesn't actually check
the fully qualified domain

00:42:56.500 --> 00:42:58.460
name if you're in dynamic DNS.

00:42:58.460 --> 00:43:01.860
So thank you very much for your time.

00:43:01.860 --> 00:43:06.320
I'd encourage you to email me or ask
some questions after the session.

00:43:06.470 --> 00:43:08.970
If you have any questions about Puppet.

00:43:08.980 --> 00:43:11.950
We're also working on a
Puppet recipe manager,

00:43:11.950 --> 00:43:15.000
which is sort of like a
CPAN interface for Perl,

00:43:15.000 --> 00:43:19.940
but to share and exchange recipes for
how we're configuring things with Puppet.

00:43:19.940 --> 00:43:22.070
So that might save you some time as well.

00:43:22.080 --> 00:43:26.470
So thank you,
and I'd like to introduce...

00:43:31.700 --> 00:43:34.070
I'd like to introduce Tim Perfitt,
who's doing some really cool

00:43:34.070 --> 00:43:36.460
stuff with Ruby on Rails.

00:43:36.610 --> 00:43:38.540
Thanks, Jeff.

00:43:40.500 --> 00:43:41.500
I'm Tim Perfitt.

00:43:41.500 --> 00:43:43.300
I'm a systems engineer
in Southern California.

00:43:43.300 --> 00:43:48.110
And how many people are excited
about Rails and Ruby on Rails?

00:43:48.300 --> 00:43:50.660
All right,
think about what Steve Jobs said

00:43:50.660 --> 00:43:53.060
yesterday that there's
no SDK for the iPhone.

00:43:53.060 --> 00:43:54.050
Well, I disagree.

00:43:54.070 --> 00:43:56.240
I think there is an SDK,
and I think it's Rails.

00:43:56.240 --> 00:43:59.460
And it comes installed on Leopard
Client and Leopard Server.

00:43:59.460 --> 00:44:05.300
So you can quickly develop these Web 2.0
apps and deploy them on your iPhone.

00:44:05.300 --> 00:44:06.880
So just imagine you're walking
around with your iPhone,

00:44:06.890 --> 00:44:09.200
and you say,
"I want to reboot every machine in my lab

00:44:09.200 --> 00:44:12.170
from the beach." And you press a button,
and all your machines reboot,

00:44:12.170 --> 00:44:14.910
and you get -- your phone
starts ringing because all

00:44:14.910 --> 00:44:16.580
the students are pissed off at

00:44:17.870 --> 00:44:18.240
All right.

00:44:18.240 --> 00:44:24.860
So whenever we think about
writing dynamic web pages,

00:44:24.860 --> 00:44:25.960
right, we think JavaScript.

00:44:25.960 --> 00:44:28.780
And if you notice in
Steve Hayman's presentation,

00:44:28.780 --> 00:44:34.670
JavaScript wasn't listed as one of
the languages that is up and coming or

00:44:34.670 --> 00:44:36.720
that you might want to learn because,
I mean,

00:44:36.720 --> 00:44:39.680
I don't want to learn JavaScript because
it's very specific to web browsers.

00:44:39.680 --> 00:44:42.380
And I hate web browsers
because they're all different,

00:44:42.380 --> 00:44:42.920
right?

00:44:42.920 --> 00:44:45.610
I don't like web programming
because you got to write one app

00:44:45.620 --> 00:44:48.220
and have all these if statements,
if it's Internet Explorer,

00:44:48.220 --> 00:44:50.020
if it's Netscape, if it's Safari.

00:44:50.020 --> 00:44:52.140
And so I've run away the other way.

00:44:52.140 --> 00:44:54.550
So we're not going to
write any JavaScript today.

00:44:57.470 --> 00:44:59.130
Actually,
we're going to write a lot of JavaScript,

00:44:59.130 --> 00:45:01.190
but we're not going to actually write it.

00:45:01.200 --> 00:45:03.920
It's going to be written
for us with Rails.

00:45:04.110 --> 00:45:07.490
So this originally the idea of this
came up from the session last year.

00:45:07.500 --> 00:45:15.590
We talked about how we could dynamically
image machines using a Web 2.0 Ajax app.

00:45:15.590 --> 00:45:17.770
And I had a customer
come up to me and say,

00:45:17.770 --> 00:45:20.760
I have a lab worth of machines
that are all sleeping.

00:45:20.760 --> 00:45:23.580
And I wake them up at maybe
8 o'clock at night and I send

00:45:23.580 --> 00:45:25.160
out some commands to them.

00:45:25.180 --> 00:45:27.610
The problem is you've got to be
on the same subnet to do that.

00:45:27.620 --> 00:45:30.380
So he bought a copy of ARD,
which makes me very happy because

00:45:30.380 --> 00:45:32.260
I like selling people copies of ARD.

00:45:32.260 --> 00:45:35.630
But all the ARD did is sit on the
instructor's machine and wake up.

00:45:35.630 --> 00:45:39.350
He'd ARD into the instructor's machine,
get on ARD there,

00:45:39.350 --> 00:45:40.820
and then wake up the lab.

00:45:40.820 --> 00:45:43.700
It didn't really seem a good use of $500.

00:45:43.700 --> 00:45:46.720
So there might be a
better way to do this.

00:45:46.720 --> 00:45:49.760
So one way you could do it is like, OK,
just from your office,

00:45:49.760 --> 00:45:51.760
SSH into the instructor's machine.

00:45:51.760 --> 00:45:53.940
Just type SSH, whatever user account.

00:45:53.940 --> 00:45:56.820
And then there's a great command
line tool called Wake on Land.

00:45:56.820 --> 00:45:59.920
And you just type in the MAC address
of each one of the machines,

00:45:59.920 --> 00:46:01.590
and then they all wake up.

00:46:01.690 --> 00:46:03.610
So the customer was very happy.

00:46:03.620 --> 00:46:05.060
He ran through the app.

00:46:05.060 --> 00:46:05.280
And he's like, OK, I'm going to do this.

00:46:05.280 --> 00:46:08.520
No, not really, because it's probably
the worst way to do it.

00:46:08.520 --> 00:46:10.880
But let's look at a better way to do it.

00:46:10.880 --> 00:46:14.940
So we can always do just a web
page that allows you to do this.

00:46:14.940 --> 00:46:19.180
But what you really want to do is deploy
a web app that looks like a desktop app.

00:46:19.180 --> 00:46:20.740
And Rails exceeds at this.

00:46:20.740 --> 00:46:24.520
It allows you to embed JavaScript and
AJAX asynchronous requests.

00:46:24.520 --> 00:46:28.740
And so you're dynamically
updating the elements of the page.

00:46:28.740 --> 00:46:32.780
And so I wrote this little app that
allows you to-- we can see there's

00:46:32.790 --> 00:46:36.040
status indicators that tell you if the
machine's available on the network.

00:46:36.040 --> 00:46:38.170
All it does is sends a
ping in the background.

00:46:38.180 --> 00:46:42.020
If it receives a reply back,
it will turn the indicator green.

00:46:42.020 --> 00:46:43.490
Otherwise, it's red.

00:46:43.510 --> 00:46:46.240
It will have some status indicators,
basically all the elements of a

00:46:46.240 --> 00:46:48.010
desktop app that you would expect.

00:46:48.100 --> 00:46:49.040
But I mean, that's great.

00:46:49.040 --> 00:46:52.860
You can have Steve Heyman write
you an AppleScript app to do that.

00:46:52.860 --> 00:46:54.480
And I'll give you his email address.

00:46:54.480 --> 00:46:55.740
It's shayman@apple.com.

00:46:55.740 --> 00:47:02.470
Or you could write it in
something that's cross-platform,

00:47:02.470 --> 00:47:04.020
a browser.

00:47:04.020 --> 00:47:05.250
I mean, who's going to have a browser?

00:47:05.260 --> 00:47:07.920
And you think about the iPhone,
if you're running Safari on it,

00:47:07.920 --> 00:47:09.060
you basically point it at it.

00:47:09.060 --> 00:47:13.830
And because it's just JavaScript and
these asynchronous AJAX requests,

00:47:13.920 --> 00:47:16.780
you can just run it from your iPhone.

00:47:16.780 --> 00:47:18.250
So I'll be doing this at the end.

00:47:18.270 --> 00:47:21.340
And so what I want to do is walk you
through kind of how to start off with

00:47:21.340 --> 00:47:25.280
Rails and creating a Rails application
and then demo this at the end.

00:47:25.280 --> 00:47:27.770
So you can run it on your iPhone as well.

00:47:28.160 --> 00:47:30.850
Okay, so before we get started,
I just want to do a quick brief of how

00:47:30.850 --> 00:47:33.000
the URL scheme kind of works with Rails.

00:47:33.000 --> 00:47:35.670
So if you have a webpage,
you enter a URL,

00:47:35.670 --> 00:47:38.500
example.com slash main slash index.

00:47:38.500 --> 00:47:40.720
That actually, it's called RESTful.

00:47:40.720 --> 00:47:42.180
The URL actually means something.

00:47:42.180 --> 00:47:46.340
Instead of having this kind of, you know,
ampersand percent, web objects, ID, oh,

00:47:46.340 --> 00:47:47.700
I'm sorry, did I say web objects?

00:47:47.700 --> 00:47:47.940
Okay.

00:47:47.940 --> 00:47:51.110
Just this kind of cryptic
hexadecimal thing.

00:47:51.120 --> 00:47:52.200
It actually makes sense.

00:47:52.200 --> 00:47:54.460
So you have slash main slash index.

00:47:54.460 --> 00:47:57.280
Main is the name of the controller,
basically your code.

00:47:57.640 --> 00:47:59.520
And then index is the name of
the method that you're going

00:47:59.520 --> 00:48:00.680
to run within the controller.

00:48:00.680 --> 00:48:02.420
So it sends it off to the controller.

00:48:02.420 --> 00:48:04.290
You have this really
simple shell command.

00:48:04.300 --> 00:48:05.910
We use the back text to actually run it.

00:48:05.920 --> 00:48:08.890
And then it takes the output,
the variables that are

00:48:08.890 --> 00:48:11.820
set inside the methods,
or actually go to the view.

00:48:11.820 --> 00:48:12.900
You have access to them.

00:48:12.900 --> 00:48:13.900
You can make them look pretty.

00:48:13.900 --> 00:48:16.080
And then ships it back to the browser.

00:48:16.080 --> 00:48:17.440
So that's what actually
we're going to look at.

00:48:19.100 --> 00:48:21.580
Okay,
so let's actually look about how we write

00:48:21.580 --> 00:48:26.740
this code and a little bit about erb,
which is the embedded Ruby language.

00:48:26.740 --> 00:48:28.860
This is most of the other languages,
Pearl, Python,

00:48:28.930 --> 00:48:33.120
those kind of things actually allow you
to be able to write code within HTML and

00:48:33.120 --> 00:48:35.480
have it rendered within the page.

00:48:35.480 --> 00:48:37.720
So that's in Ruby,
you'll see the less than percent,

00:48:37.740 --> 00:48:39.230
it means run this Ruby command.

00:48:39.240 --> 00:48:43.480
You see less than percent equals
means run this Ruby command and

00:48:43.480 --> 00:48:48.540
put the output of that command
in the output of the page.

00:48:48.540 --> 00:48:51.660
So this is where the magic all happens,
the form remote tag,

00:48:51.660 --> 00:48:56.580
what it makes it just a Ruby command
within HTML that allows you to create

00:48:56.580 --> 00:49:01.120
a form or starting of a form and
it'll run a JavaScript command in the

00:49:01.120 --> 00:49:03.390
background asynchronous off and do it.

00:49:03.420 --> 00:49:06.300
And you can see it's the
URL is actually an action,

00:49:06.300 --> 00:49:08.020
which is process request.

00:49:08.020 --> 00:49:09.780
Process request is just name of a method.

00:49:09.780 --> 00:49:11.760
So you write a method over there,
as soon as you click on,

00:49:11.760 --> 00:49:14.620
you submit this form,
it's going to run this method.

00:49:14.620 --> 00:49:16.700
Very simple,
but other things you can do within

00:49:16.700 --> 00:49:21.260
this is that you can have all these
other sections to this request

00:49:21.260 --> 00:49:24.800
that are other JavaScript requests.

00:49:24.800 --> 00:49:27.340
So before you run the command,
you can do something else.

00:49:27.340 --> 00:49:29.420
After you run it,
you can do something else.

00:49:29.420 --> 00:49:31.520
You can, if it fails,
you can do something.

00:49:31.560 --> 00:49:33.700
If it completes successfully,
you can do something.

00:49:33.700 --> 00:49:35.780
This is all embedded within your HTML.

00:49:35.780 --> 00:49:38.520
So that means that you can have all
these JavaScript requests go off,

00:49:38.520 --> 00:49:42.780
updating status indicators and, you know,
actually doing the work or, you know,

00:49:42.780 --> 00:49:47.420
maybe throwing up a dialogue box saying
that there was an error asynchronously.

00:49:47.420 --> 00:49:48.800
And you can have this loading page.

00:49:48.800 --> 00:49:51.980
You have little, you know,
widgets happening on the page.

00:49:51.980 --> 00:49:54.220
So in this example,
I do it before and we actually,

00:49:54.220 --> 00:49:56.230
I lied a little bit,
we're writing as much

00:49:56.230 --> 00:49:58.720
JavaScript as I know,
which is the alert message.

00:49:58.720 --> 00:50:01.520
So alert command unsuccessful.

00:50:01.520 --> 00:50:03.720
And that will probably pretty
much be the limit of it.

00:50:03.720 --> 00:50:05.840
And then when it's completed,
it will run another function

00:50:05.850 --> 00:50:07.040
called command completed.

00:50:07.050 --> 00:50:08.040
So we have two methods.

00:50:08.040 --> 00:50:09.390
One is called process request.

00:50:09.400 --> 00:50:11.440
One is called command completed.

00:50:11.440 --> 00:50:15.740
And then we actually have to have
an HTML element we operate on.

00:50:15.740 --> 00:50:16.710
And that's this.

00:50:16.760 --> 00:50:17.230
Okay.

00:50:17.260 --> 00:50:18.260
So we have a host.

00:50:18.260 --> 00:50:19.260
Oh, I don't actually have that.

00:50:19.260 --> 00:50:20.260
That will come later.

00:50:20.260 --> 00:50:21.260
Sorry.

00:50:21.260 --> 00:50:25.050
It will actually have the host name
that you type in the MAC address.

00:50:25.060 --> 00:50:27.480
It's a very simple example.

00:50:27.480 --> 00:50:30.610
But you can type in the MAC address
and then when you hit the submit tag,

00:50:30.610 --> 00:50:32.850
we'll be able to button that says do it.

00:50:32.860 --> 00:50:33.860
So very simple.

00:50:33.860 --> 00:50:36.490
You'll have a form and we'll
actually Mach this up really quickly.

00:50:39.410 --> 00:50:40.640
Okay, then the actual methods.

00:50:40.640 --> 00:50:44.110
This is the one that was in HTML or ERB,
the embedded Ruby.

00:50:44.250 --> 00:50:46.830
And this is the actual
method in our controller.

00:50:46.880 --> 00:50:50.640
So the process request,
it'll call the wake on LAN command

00:50:50.640 --> 00:50:53.860
with the host that the user typed in.

00:50:53.870 --> 00:50:57.670
And then this is where the
really dynamic part comes in.

00:50:57.700 --> 00:51:02.200
You get passed in your
code an object called page.

00:51:02.210 --> 00:51:04.660
And page,
you can operate on the HTML elements.

00:51:04.730 --> 00:51:06.840
So if you have a
paragraph tag with an ID,

00:51:06.850 --> 00:51:10.990
so you have less than, P, ID equals,
whatever, paragraph,

00:51:11.010 --> 00:51:12.680
you can operate on that dynamically.

00:51:12.680 --> 00:51:14.390
So you can replace the HTML.

00:51:14.450 --> 00:51:15.630
You can put an image there.

00:51:15.660 --> 00:51:16.760
You can move it around.

00:51:16.760 --> 00:51:18.100
You can make it swing around.

00:51:18.100 --> 00:51:19.010
You can make it disappear.

00:51:19.020 --> 00:51:20.110
You can make it poof.

00:51:20.140 --> 00:51:23.720
I don't know if you've seen
the demos of the Wiki site,

00:51:23.740 --> 00:51:27.290
but there's a lot of that dynamic
Web 2.0 stuff that's going on that you

00:51:27.290 --> 00:51:30.720
can do very easily if you're handed
an object that's the actual page.

00:51:30.760 --> 00:51:36.210
So now, you notice we're not doing like,
if Internet Explorer is version 6.2,

00:51:36.220 --> 00:51:36.830
then do this.

00:51:36.840 --> 00:51:39.390
This is much more, for me,
much more fun programming,

00:51:39.460 --> 00:51:42.260
because you can actually get in and
replace the element in the view.

00:51:42.260 --> 00:51:45.420
And you're acting on it
like it's a real view,

00:51:45.420 --> 00:51:48.580
not this web-based view.

00:51:49.230 --> 00:51:50.860
All right,
so we get this object called page,

00:51:50.860 --> 00:51:51.860
and we can do a couple of things on it.

00:51:51.880 --> 00:51:54.200
We have page, and then within brackets,
indicator.

00:51:54.200 --> 00:51:58.440
All indicator is is the ID of
that element on the page.

00:51:58.440 --> 00:51:59.520
It's called the DOM element.

00:51:59.520 --> 00:52:03.470
So if you have your paragraph tag,
less than P, ID equals indicator,

00:52:03.470 --> 00:52:07.130
now we can operate on that element
within the page and replace it,

00:52:07.180 --> 00:52:10.530
make it into a picture of your kid,
make it zoom up to the top,

00:52:10.570 --> 00:52:12.340
whatever you want to do.

00:52:12.340 --> 00:52:18.260
And Rails also has some ability
to do dynamic animations.

00:52:19.100 --> 00:52:22.460
So we can do visual effects like
fading and those kind of things.

00:52:22.460 --> 00:52:24.450
And then also within the view,
there's the element that

00:52:24.450 --> 00:52:25.480
I was mentioning before.

00:52:25.480 --> 00:52:28.520
This one's just the div tag,
and we give it an ID so we

00:52:28.520 --> 00:52:30.500
know how to reference it.

00:52:30.500 --> 00:52:33.030
All right, so let's actually do this.

00:52:33.040 --> 00:52:35.810
It's much more fun to
do it than to see it.

00:52:38.920 --> 00:52:41.040
Before I get started,
the code is going to be

00:52:41.040 --> 00:52:44.800
available so if people want to
follow along on some of this,

00:52:44.800 --> 00:52:45.790
it's going to be located.

00:52:45.800 --> 00:52:48.740
Oh, sorry.

00:52:48.880 --> 00:52:50.800
Can you actually see me?

00:52:50.800 --> 00:52:54.790
This actually goes much smoother
if you can't see what I'm doing.

00:52:56.000 --> 00:52:58.240
Ah, there we go.

00:52:58.240 --> 00:53:00.740
So the code is actually on my site.

00:53:00.740 --> 00:53:05.640
It's called 2canoes.com/wwdc.zip.

00:53:05.650 --> 00:53:07.440
And I take it-- Joel,
are we gonna make this

00:53:07.440 --> 00:53:09.820
available somewhere else?

00:53:10.350 --> 00:53:11.620
No, I'm trying to.

00:53:11.620 --> 00:53:13.870
I don't have this build.

00:53:13.870 --> 00:53:15.460
I'm holding control and scrolling.

00:53:15.460 --> 00:53:16.110
It doesn't work.

00:53:16.140 --> 00:53:18.360
Okay, Command-Shift-8-plus-plus-plus.

00:53:18.360 --> 00:53:19.970
No, I can't.

00:53:20.070 --> 00:53:21.950
2canoes.com-slash-WWDC.

00:53:21.950 --> 00:53:24.500
We'll get that to you
in some other place.

00:53:25.910 --> 00:53:27.980
All right, so let's get started.

00:53:28.000 --> 00:53:30.450
I do know how to make
the terminal bigger,

00:53:30.450 --> 00:53:31.140
though.

00:53:31.140 --> 00:53:31.140
There we go.

00:53:31.600 --> 00:53:33.100
So this is where the magic starts.

00:53:33.100 --> 00:53:36.280
So I'm on a Leopard,
the build you guys got and hopefully

00:53:36.280 --> 00:53:39.780
installed on your primary machine.

00:53:41.200 --> 00:54:00.200
( Transcript missing )

00:54:02.710 --> 00:54:05.890
What did he do?

00:54:05.910 --> 00:54:07.990
Oh, my-- oh,
I love that the num lock's on.

00:54:08.000 --> 00:54:09.200
Isn't that great?

00:54:09.200 --> 00:54:10.200
Okay, Rails.

00:54:10.200 --> 00:54:12.700
So you just type "Rails" in the name
of the app that you want to create.

00:54:12.700 --> 00:54:13.720
So this is on a standard Leopard build.

00:54:13.720 --> 00:54:15.000
I didn't install anything.

00:54:15.060 --> 00:54:17.810
There's a great app called Locomotive
that you can download for Tiger that

00:54:17.810 --> 00:54:19.350
would kind of set everything up for you.

00:54:19.400 --> 00:54:25.550
But on Leopard, you just type "Rails" and
we'll call it "Wake Me Up,

00:54:25.550 --> 00:54:27.080
Please."

00:54:27.550 --> 00:54:29.640
And it'll go ahead and
actually create all the files

00:54:29.640 --> 00:54:32.780
for you for this application.

00:54:32.780 --> 00:54:34.500
So now we have a wake
me up please directory.

00:54:34.500 --> 00:54:37.180
Let's go into it.

00:54:39.350 --> 00:54:43.300
Okay,
we'll open it up in the brand new finder

00:54:43.300 --> 00:54:46.140
and we'll do it in Cover Flow view.

00:54:46.700 --> 00:54:49.080
No, not so much.

00:54:49.080 --> 00:54:49.440
Okay.

00:54:53.750 --> 00:54:57.010
Yeah, Rails doesn't lend itself real
well to the CoverFlow view.

00:54:57.020 --> 00:54:58.480
Okay, so it did create a
couple of things for us.

00:54:58.480 --> 00:55:00.140
It created a whole bunch of things.

00:55:00.150 --> 00:55:02.760
But there's lots of
Rails books out there.

00:55:02.760 --> 00:55:05.780
I'm not gonna go into every
little nook and cranny of it.

00:55:05.800 --> 00:55:07.640
But for me, this is amazing.

00:55:07.640 --> 00:55:09.580
We're actually in the directory
and we'll give it the,

00:55:09.600 --> 00:55:10.680
there's a scripts directory.

00:55:10.700 --> 00:55:14.880
You can see here, scripts,
and then we'll give it a name.

00:55:15.970 --> 00:55:16.900
Here are scripts.

00:55:16.900 --> 00:55:19.040
And they give you a bunch of
scripts to generate code for

00:55:19.040 --> 00:55:20.330
you and to start a server up.

00:55:20.350 --> 00:55:23.230
And one of the other things they
said is that yesterday is not only

00:55:23.230 --> 00:55:25.750
do we have Rails but also Mongrel,
which is a web server

00:55:25.750 --> 00:55:27.780
that allows for quick,
rapid development.

00:55:27.780 --> 00:55:36.980
So if we do script-stats-server,
it'll start up a web server for us

00:55:36.980 --> 00:55:37.010
and it'll give us a nice URL to it.

00:55:37.010 --> 00:55:37.010
So we gave... Oops.

00:55:39.000 --> 00:56:08.000
( Transcript missing )

00:56:09.170 --> 00:56:10.700
Let me start writing some code.

00:56:10.700 --> 00:56:15.170
So the other thing I'm
going to use is TextMate.

00:56:15.780 --> 00:56:18.260
Oh wait, I want to, yeah.

00:56:18.260 --> 00:56:19.780
Use TextMate to actually do this project.

00:56:19.810 --> 00:56:23.630
TextMate is what the Rails community has
really embraced because it allows you to

00:56:23.630 --> 00:56:27.280
see your whole project on the right side
and it does some very cool text editing.

00:56:27.280 --> 00:56:30.880
So if you haven't used it, check it out.

00:56:30.880 --> 00:56:33.220
So let's go ahead and create our code.

00:56:33.220 --> 00:56:35.480
So we want to create a controller
and we want to create a method.

00:56:35.480 --> 00:56:39.260
And I want to call it index just
because that's kind of the default way

00:56:39.260 --> 00:56:40.610
to load if you don't type anything.

00:56:40.620 --> 00:56:44.760
So we'll give the command, again,
we go to the scripts directory.

00:56:44.760 --> 00:56:48.910
scripts, our script, generate.

00:56:49.980 --> 00:56:55.110
and we'll call our controller
main and we'll do a method index.

00:56:55.150 --> 00:56:58.920
Oh no, we got to generate a controller.

00:56:59.800 --> 00:57:02.260
Okay, so then it goes and it creates
it and you go back to text edit,

00:57:02.260 --> 00:57:07.660
you'll notice that we now have a
controller and we also have a layout.

00:57:07.700 --> 00:57:10.200
So this is really,
it's even getting even more exciting.

00:57:10.200 --> 00:57:13.420
So now we can go here and we got
to go to our controller main and

00:57:13.420 --> 00:57:14.700
it'll do the index stuff for us.

00:57:14.700 --> 00:57:16.700
Oh,
we actually got to start the web server.

00:57:16.700 --> 00:57:19.580
Yay.

00:57:21.280 --> 00:57:22.200
Hey, isn't that exciting?

00:57:22.200 --> 00:57:24.800
Now we have not quite the
dynamic page we're looking for.

00:57:24.800 --> 00:57:26.810
But you can see this iterative
element we're running.

00:57:26.820 --> 00:57:27.740
Now we have our own code.

00:57:27.740 --> 00:57:30.740
See, it says find me in apps,
view main indexed at our HTML,

00:57:30.740 --> 00:57:32.480
which is nice for it to tell us.

00:57:32.480 --> 00:57:33.720
So let's actually go in.

00:57:33.720 --> 00:57:40.900
We can actually see it says there,
find me in-- can you see that?

00:57:41.900 --> 00:57:44.800
Let's actually put in something
that's a little bit more interesting.

00:57:44.800 --> 00:57:47.780
We'll replace that and
we'll put in just some HTML.

00:57:47.780 --> 00:57:49.960
Whoa, you can't see that.

00:57:59.100 --> 00:58:13.100
and a few more.

00:58:13.100 --> 00:58:15.820
So basically your standard
HTML you have the document type,

00:58:15.820 --> 00:58:19.500
you've got a header and a body section.

00:58:19.500 --> 00:58:22.380
So the magic that comes in here is
we have a JavaScript include tag.

00:58:22.380 --> 00:58:26.480
That just means load up the
JavaScript library to use JavaScript.

00:58:26.480 --> 00:58:28.970
And then we're going to do that
same thing we did in example,

00:58:28.970 --> 00:58:32.660
the former tag action or
URL action process request.

00:58:32.660 --> 00:58:36.190
So now if we actually start this up,
oh it's still running, that's fine.

00:58:36.190 --> 00:58:40.190
So we can just reload it.

00:58:42.430 --> 00:58:43.400
Stop it.

00:58:43.400 --> 00:58:43.820
Reload it.

00:58:43.820 --> 00:58:49.160
Save, okay.

00:58:49.160 --> 00:58:51.920
Look at that.

00:58:51.920 --> 00:58:56.140
Luckily I've memorized my
Mac address on this machine.

00:58:56.140 --> 00:58:58.460
Zero, zero, zero, zero.

00:58:58.560 --> 00:59:01.180
And that didn't do anything because we
don't have any method associated with it.

00:59:01.180 --> 00:59:02.640
So let's go add a method.

00:59:02.640 --> 00:59:06.310
So in our main controller we have
an index method that was created

00:59:06.310 --> 00:59:08.140
for us that doesn't do anything.

00:59:08.140 --> 00:59:12.100
So let's add one called process request
'cause that's what our ERB calls.

00:59:12.100 --> 00:59:13.760
So this is very simple.

00:59:13.760 --> 00:59:17.400
You can see that it just has
one of these cool Ruby loops.

00:59:17.400 --> 00:59:19.260
If you haven't learned Ruby yet,
you're required to do

00:59:19.260 --> 00:59:20.220
that before next year.

00:59:20.220 --> 00:59:22.040
There will be a quiz.

00:59:22.040 --> 00:59:24.960
And it sleeps a little bit and
then it calls the wake on land.

00:59:24.960 --> 00:59:26.860
So now it actually does something.

00:59:26.860 --> 00:59:27.920
So let's actually run it.

00:59:27.920 --> 00:59:29.660
I did save it that time.

00:59:29.660 --> 00:59:31.080
And I say wake up.

00:59:31.080 --> 00:59:32.180
Okay, it actually worked.

00:59:32.180 --> 00:59:33.830
Yay!

00:59:33.860 --> 00:59:36.080
Okay, now let's give some feedback.

00:59:36.080 --> 00:59:39.160
Obviously we wanna do some
feedback to be a little bit better.

00:59:39.160 --> 00:59:41.800
So let's add a different body section.

00:59:41.800 --> 00:59:45.540
So we can do the more
dynamic pieces to it.

00:59:45.560 --> 00:59:49.920
Okay, so now instead of having just
go off and do this request,

00:59:49.970 --> 00:59:53.220
we now have a before section as
well as a when it's completed.

00:59:53.300 --> 00:59:55.550
So let's actually save that.

00:59:55.560 --> 00:59:58.680
Refresh just because
refreshing is always good.

00:59:58.690 --> 01:00:00.670
And put in a request.

01:00:01.400 --> 01:00:06.440
That's actually not enough hex digits,
but it should now go off and actually,

01:00:06.440 --> 01:00:08.060
oh, do we start the server?

01:00:08.060 --> 01:00:09.200
Let me see.

01:00:26.400 --> 01:00:27.700
It's not working there.

01:00:27.700 --> 01:00:29.780
There is,
I did find a bug in Safari where

01:00:29.780 --> 01:00:33.280
the before JavaScript does not
actually always render correctly.

01:00:33.280 --> 01:00:39.190
So let me quickly open up Firefox and
see if that helps us better.

01:00:45.300 --> 01:00:48.340
What was that joke about the
Canadian and the Iranian?

01:00:48.340 --> 01:00:51.110
Okay.

01:00:52.990 --> 01:00:55.310
All right, let me try saving and then
we'll quickly move on.

01:00:55.310 --> 01:00:57.490
Oh, I'm sorry,
I didn't put enough code in.

01:00:57.490 --> 01:01:00.220
Oh, Spotlight's indexing, thank you.

01:01:04.660 --> 01:01:07.030
And this is running on a FireWire drive,
so.

01:01:07.080 --> 01:01:08.190
Okay, so that's why it didn't work.

01:01:08.200 --> 01:01:11.710
You actually gotta have the methods that
make the nice things happen to do that.

01:01:11.740 --> 01:01:14.240
Okay, so not only do we process
the CREST request,

01:01:14.270 --> 01:01:16.080
but we actually replace
a couple of things.

01:01:16.130 --> 01:01:17.140
So we did these same ones.

01:01:17.140 --> 01:01:19.380
There's a status element
called replace HTML.

01:01:19.380 --> 01:01:22.260
We're gonna save some text,
sending magic packet,

01:01:22.260 --> 01:01:24.880
and after it's done,
we're gonna say it's sent.

01:01:24.880 --> 01:01:27.600
We're gonna fade it out
after a two-second delay.

01:01:27.600 --> 01:01:31.860
So let's, I'll hold my breath.

01:01:33.700 --> 01:01:35.240
are sending magic packet.

01:01:35.240 --> 01:01:38.810
It sends it and then it fades away.

01:01:38.820 --> 01:01:42.330
Okay, that's kind of nice.

01:01:44.900 --> 01:01:46.900
So now envision that on your iPhone.

01:01:46.900 --> 01:01:48.900
You just press a button
and you wake up a machine.

01:01:48.900 --> 01:01:52.900
And so let's actually go and, let me see,
I think I'm at the bottom.

01:01:52.930 --> 01:01:54.890
So let's actually look at
the one that's kind of,

01:01:54.890 --> 01:01:57.900
we'll put the pie in the oven
and then immediately take

01:01:57.900 --> 01:01:58.900
it out and it'll be cooked.

01:01:58.900 --> 01:02:00.890
And we'll see.

01:02:02.600 --> 01:02:12.190
Oh, I want to use the cool, uh, whoa,
boing, whoo, look at that.

01:02:13.540 --> 01:02:15.360
FlowView, yay.

01:02:15.360 --> 01:02:18.810
OK, oh, sorry.

01:02:20.240 --> 01:02:21.030
Am I actually projecting?

01:02:21.040 --> 01:02:21.540
Oh, I am.

01:02:21.540 --> 01:02:24.940
Okay, I should pay attention.

01:02:24.980 --> 01:02:28.860
Okay, so I just CD'd into that through
the magic of drag and drop,

01:02:28.860 --> 01:02:33.240
and I'll do server-- or sorry, script,
server, and start this up.

01:02:33.270 --> 01:02:34.640
So this is the sample code I gave you.

01:02:34.640 --> 01:02:36.560
If you just download it
and you run server script,

01:02:36.560 --> 01:02:38.920
it should start it up
and give you the URL.

01:02:39.010 --> 01:02:43.110
And we should refresh it, or...

01:02:44.370 --> 01:02:44.650
There it is.

01:02:44.660 --> 01:02:46.160
Do you see the little
swinging indicators?

01:02:46.160 --> 01:02:48.960
That's a JavaScript request
that's going out and doing it.

01:02:48.960 --> 01:02:50.690
I'll refresh again just
because I like watching that,

01:02:50.690 --> 01:02:52.620
and I'll do it one more time
because it's just that cool.

01:02:52.620 --> 01:02:53.090
Look at that.

01:02:53.100 --> 01:02:56.130
So this is how many people
are annoyed by animated GIFs

01:02:56.130 --> 01:02:59.360
of all types on the Internet,
or on the web at least.

01:02:59.380 --> 01:03:02.560
This is on AJAX and Rails.

01:03:02.560 --> 01:03:06.290
They're a wonderful thing because
I don't actually have to tell

01:03:06.290 --> 01:03:08.200
this image to start doing it.

01:03:08.200 --> 01:03:10.620
I just replace it with that image,
and then I hide it when I'm done

01:03:10.630 --> 01:03:12.200
and replace it with another image.

01:03:12.660 --> 01:03:14.660
So it very easily can do that.

01:03:14.660 --> 01:03:16.750
It's just sending a ping off,
and if it's correct,

01:03:16.750 --> 01:03:18.440
it'll come back and set
its status as green.

01:03:18.440 --> 01:03:21.690
And I was going to put this one to sleep.

01:03:21.700 --> 01:03:24.020
Sleep.

01:03:30.000 --> 01:03:31.860
Don't panic, don't panic.

01:03:31.860 --> 01:03:34.000
Oh, red, yay, okay.

01:03:34.000 --> 01:03:36.140
So now, yeah, thanks,
I got a red indicator.

01:03:36.140 --> 01:03:37.770
Let's wake it up and
then it'll be better,

01:03:37.770 --> 01:03:38.220
right?

01:03:38.220 --> 01:03:39.060
Okay, here we go.

01:03:39.060 --> 01:03:41.390
I have to stand back and do this.

01:03:42.400 --> 01:03:44.760
Hey,
I hear a hard drive swinging up there.

01:03:44.760 --> 01:03:45.600
And it should update.

01:03:45.600 --> 01:03:48.280
See this processing on the
bottom there completed?

01:03:48.280 --> 01:03:50.710
And it updated it and came back.

01:03:54.700 --> 01:03:56.160
So of course I couldn't let things go.

01:03:56.160 --> 01:03:57.640
I said, "Okay, I got this great thing.

01:03:57.640 --> 01:04:00.110
I can wake up computers." But one
of the things I can do now is I can

01:04:00.110 --> 01:04:01.500
run all sorts of other commands.

01:04:01.500 --> 01:04:06.440
I can use SSH in to go into the machine
and maybe grab a picture of the desktop.

01:04:06.480 --> 01:04:08.340
And maybe if they have an eye
setting or a picture of them,

01:04:08.340 --> 01:04:09.850
I can reboot the machine.

01:04:09.890 --> 01:04:12.960
So let's go actually go,
I'll do it on my machine itself.

01:04:12.990 --> 01:04:14.780
And you got to give, unfortunately,
you got to give a username and

01:04:14.820 --> 01:04:19.320
password due to these security things
they put on computers these days.

01:04:19.450 --> 01:04:22.800
And let's go ahead and take a screenshot
of what I'm currently working on.

01:04:22.860 --> 01:04:23.830
So you can see it done.

01:04:23.850 --> 01:04:27.500
SSH is in to the other machine,
takes a screenshot, brings it back,

01:04:27.500 --> 01:04:29.340
and actually puts it
in line in the table.

01:04:29.340 --> 01:04:32.450
So now you can see, oh, look at this.

01:04:32.450 --> 01:04:32.450
Yay.

01:04:33.300 --> 01:04:36.600
I couldn't do that, so you have like,
is that student over there using MySpace?

01:04:36.600 --> 01:04:37.480
And you do a screenshot.

01:04:37.480 --> 01:04:41.580
Like, we need something,
so we take them to the PTA or

01:04:41.580 --> 01:04:42.680
whatever to get them in trouble.

01:04:42.680 --> 01:04:45.840
So we'll take a picture of them,
and we'll use big honking techs, like,

01:04:45.840 --> 01:04:50.960
"Hi, hi." And then it replaces
it and it comes in place.

01:04:55.710 --> 01:04:59.040
That got me thinking that earlier,
a couple days ago,

01:04:59.040 --> 01:05:00.810
when Steve Hayman and myself
were practicing for this,

01:05:00.810 --> 01:05:02.800
I thought, Steve,
can you go ahead and give me an

01:05:02.800 --> 01:05:05.380
admin password to your machine
so I can do some testing?

01:05:05.380 --> 01:05:08.590
Because I was always curious what he
works on when people aren't watching,

01:05:08.590 --> 01:05:10.800
and he likes to show
these great Hangman games.

01:05:10.800 --> 01:05:12.070
But let's actually see.

01:05:12.080 --> 01:05:13.570
He's on his machine right now, I think.

01:05:13.580 --> 01:05:14.880
Let's look at what he's doing.

01:05:14.880 --> 01:05:17.490
Yeah,
that's the username and password I did.

01:05:17.530 --> 01:05:19.770
So let's actually do a,
let's make sure he's there,

01:05:19.770 --> 01:05:21.260
and we'll do a picture of him.

01:05:21.260 --> 01:05:21.720
Let's see.

01:05:21.720 --> 01:05:22.820
Oh, let's see.

01:05:22.820 --> 01:05:24.680
I'm reading some flashbacks.

01:05:25.700 --> 01:05:25.960
Okay.

01:05:25.960 --> 01:05:28.530
And he's been a little distracted,
so let's actually see what kind

01:05:28.580 --> 01:05:30.020
of scripts that he's working on.

01:05:30.020 --> 01:05:32.250
Okay, let me see.

01:05:32.260 --> 01:05:35.310
Okay.

01:05:48.300 --> 01:05:54.430
and the Automator workflows he's doing.

01:05:54.430 --> 01:05:58.850
That's why I keep getting those
messages with those Paris Hilton images.

01:05:58.850 --> 01:05:58.850
So anyways,
the code's going to be available

01:05:58.850 --> 01:05:58.850
to be able to look over.

01:05:58.850 --> 01:05:58.850
Thanks very much.

01:06:07.300 --> 01:06:11.380
Now I'd like to bring up
Joel Renick to talk to you more

01:06:11.380 --> 01:06:13.300
about question and answers.

01:06:13.320 --> 01:06:14.300
Wonderful.

01:06:14.300 --> 01:06:16.640
Thank you, Tim.

01:06:20.100 --> 01:06:23.560
Some resources here
that we have about Ruby.

01:06:23.560 --> 01:06:26.460
We're a little Ruby heavy this year,
but that's topical.

01:06:26.460 --> 01:06:26.960
It's cool.

01:06:26.960 --> 01:06:30.610
Next year we'll pick something else
that we can hit on a little bit.

01:06:30.700 --> 01:06:32.340
A couple of things.

01:06:32.410 --> 01:06:37.680
I'll post a link on AFP548.com
to the locations of all the

01:06:37.720 --> 01:06:40.190
code that we talked about.