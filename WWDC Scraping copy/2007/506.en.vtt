WEBVTT

00:00:13.269 --> 00:00:17.390
>> Welcome To Integrating Smart Cards in Leopard.

00:00:17.390 --> 00:00:21.300
I'm Shawn Geddis, Security Consulting Engineer
in the Enterprise division of Apple.

00:00:21.300 --> 00:00:22.750
So again, welcome.

00:00:22.750 --> 00:00:30.719
We want to take you through a little bit here somewhere.

00:00:30.719 --> 00:00:33.560
On introduction to smart cards here.

00:00:33.560 --> 00:00:40.570
It would be interesting to figure out how many of you are
already using smart cards, how many of you are deploying,

00:00:40.570 --> 00:00:44.909
how many of you are in the information gathering stage.

00:00:44.909 --> 00:00:47.969
Hopefully there's a little bit of all those.

00:00:47.969 --> 00:00:53.549
Maybe even some of the developers deploying
some new integration with their products.

00:00:53.549 --> 00:00:57.899
So in this session what we want to
do is introduce you to smart cards

00:00:57.899 --> 00:01:00.530
as a secure and reliable source of identification.

00:01:00.530 --> 00:01:03.730
We'll talk a little bit more about
that but, that's really been kind

00:01:03.729 --> 00:01:08.909
of a key drive of folks within the enterprise space.

00:01:08.909 --> 00:01:10.700
A key need, I should say.

00:01:10.700 --> 00:01:16.490
We want to talk you through some of the enhancements we
specifically did in Leopard for the smart card services.

00:01:16.489 --> 00:01:21.649
And most of all we want to spend a little
bit of time in one of the key new services,

00:01:21.650 --> 00:01:24.240
one of the key new features of integration with smart cards.

00:01:24.239 --> 00:01:30.519
And that is in the unlocking and giving
you access to File Vault encrypted storage.

00:01:30.519 --> 00:01:36.189
So hopefully out of this you're going to learn
how those services are tied in with Tiger.

00:01:36.189 --> 00:01:40.399
How we've been providing those
services throughout the 10.4 train.

00:01:40.400 --> 00:01:46.580
Again, some of the very specify enhancements that you
may be able to leverage once you get Leopard out there,

00:01:46.579 --> 00:01:51.140
you may be able to look into your
developer that you have today.

00:01:51.140 --> 00:01:56.870
And finally what steps that you need to take and
that you can take with integrating that right

00:01:56.870 --> 00:02:01.310
into unlocking File Vault and even
into unlocking of keychains.

00:02:02.349 --> 00:02:09.599
So first of all any time we have these kinds of discussions
let's first of all try to be sure that we are all

00:02:09.599 --> 00:02:11.479
in agreement on what it is we're trying to solve.

00:02:11.479 --> 00:02:14.919
A lot of us engineering, we come up with a solution

00:02:14.919 --> 00:02:17.309
and potentially we don't have a
problem that we're trying to solve.

00:02:17.310 --> 00:02:23.860
In this case, the problems, the IT organizations,
you yourself, many of you may actually be some

00:02:23.860 --> 00:02:28.580
of the customers I have dealt with in the
past -- are trying to solve several problems.

00:02:28.580 --> 00:02:33.180
One is, again, providing that secure
and reliable form of identification.

00:02:33.180 --> 00:02:34.590
Again, why do we say that?

00:02:34.590 --> 00:02:37.099
It's something that's a known entity.

00:02:37.099 --> 00:02:38.269
We're talking about the smart card.

00:02:38.270 --> 00:02:41.420
So there's protection on that for protecting that identity.

00:02:41.419 --> 00:02:51.459
Many of you are facing organization that may actually
be a sector that's mandating the use of these devices.

00:02:51.460 --> 00:02:57.550
And moving a little bit closer to giving
that user experience of a single sign on.

00:02:57.550 --> 00:03:03.939
Many of us have various credentials of getting access to
services on back-end servers on our local work stations,

00:03:03.939 --> 00:03:09.659
lap tops, and we're just inundated with various
authentication methods over and over and over again.

00:03:09.659 --> 00:03:12.719
So the second one there is the single sign on experience.

00:03:12.719 --> 00:03:16.139
Driving that with a strong form of
identification, that smart card,

00:03:16.139 --> 00:03:22.349
and maintaining that as our single form
of identification for a single sign on.

00:03:22.349 --> 00:03:28.210
To kind of round this out, this
also ties it into really kind

00:03:28.210 --> 00:03:31.500
of the data integrity, making sure
that things haven't changed.

00:03:31.500 --> 00:03:33.460
The confidentiality.

00:03:33.460 --> 00:03:38.270
Protecting your data, making sure that
only the right people see that information.

00:03:38.270 --> 00:03:43.730
Again, these are key problems that you
as IT, as IT staff are trying to address.

00:03:43.729 --> 00:03:49.049
And finally, why you have all these mechanisms
and solutions in place you can then ensure

00:03:49.050 --> 00:03:51.890
and prove -- what's referred to as non repudiation.

00:03:51.889 --> 00:03:56.679
Making sure that individual that did the
translation is indeed that individual,

00:03:56.680 --> 00:04:00.140
or the individual -- that proper credential smart card.

00:04:00.139 --> 00:04:05.869
So now that we know what we're trying to solve,
let's move forward with what Apple has been providing

00:04:05.870 --> 00:04:10.509
in 10.4 to help you address some of those needs.

00:04:10.509 --> 00:04:18.000
So in 10.4, if some of you were here last year at WWDC, we
started giving a little bit of insight into those services.

00:04:18.000 --> 00:04:27.000
And built into 10.4, smart cards are integrated into the
authentication mechanism for log in, system administration,

00:04:27.000 --> 00:04:30.639
unlocking of your screen saver obviously for the user.

00:04:30.639 --> 00:04:34.860
Secure web access for VP N or remote access.

00:04:34.860 --> 00:04:36.800
And then finally for S mime.

00:04:36.800 --> 00:04:40.170
So those are the services that we want to
kind of look through real quickly to kind

00:04:40.170 --> 00:04:46.699
of highlight what Apple's provided
in 10.4 and then move on from there.

00:04:46.699 --> 00:04:51.430
So as I mentioned here earlier in kind of my introduction,
one of the key things that we're also going to be pulling

00:04:51.430 --> 00:04:56.519
out is the new feature of tying
that smart card in to File Vault.

00:04:56.519 --> 00:05:02.099
Many of you may have been aware or trying to figure
out how in the world to use it with File Vault in 10.4.

00:05:02.100 --> 00:05:05.879
And that wasn't there until -- now with 10.5.

00:05:09.000 --> 00:05:15.189
The other thing to keep in mind here
when you're thinking of smart cards.

00:05:15.189 --> 00:05:19.189
When you're comparing OS X to other
platforms, one of the key differences here is

00:05:19.189 --> 00:05:26.839
that Apple has abstracted those cards, the smart cards
themselves into the whole keychain credential environment.

00:05:26.839 --> 00:05:33.109
Right? Other platforms, whether you're a developer
or you're doing some system administration.

00:05:33.110 --> 00:05:37.720
You had to deal directly with applications
interfacing directly with that card.

00:05:37.720 --> 00:05:43.440
In OS X, the smart cards themselves are abstracted
into the OS as just yet another keychain.

00:05:43.439 --> 00:05:48.639
There are some nuances about it, but they
are just another keychain within the OS.

00:05:48.639 --> 00:05:51.539
That's a thing to keep in mind as we go forward.

00:05:51.540 --> 00:05:53.310
Let's go down to the card.

00:05:53.310 --> 00:05:58.899
Let's be sure what they're all on the same page,
physically, what is on these cards and what you use.

00:05:58.899 --> 00:06:03.949
A typical -- and I say typical -- PKI based smart card.

00:06:03.949 --> 00:06:09.459
This is cards that are used for -- use
of, again, S/MIME.

00:06:09.459 --> 00:06:11.810
Secure web access. Those kinds of services.

00:06:11.810 --> 00:06:19.839
Is -- frequent profile so to speak is
the use of three unique identities here.

00:06:19.839 --> 00:06:23.319
An identity being the certificate of the private key.

00:06:23.319 --> 00:06:25.599
The first one being the user's identity.

00:06:25.600 --> 00:06:28.840
The second one being associated with e-mail signing.

00:06:28.839 --> 00:06:31.849
And a third being for encryption.

00:06:31.850 --> 00:06:34.760
Did I mention about kind of a typical card.

00:06:34.759 --> 00:06:39.120
The profiles or the objects that
are on these cards differ greatly.

00:06:39.120 --> 00:06:41.879
And there are smart card efforts around the world.

00:06:41.879 --> 00:06:47.310
If you look at each one of those they're significantly
different both in the objects themselves and the keys

00:06:47.310 --> 00:06:49.750
that are available in each one of those certificates.

00:06:49.750 --> 00:06:53.009
But keep in mind what a typical card is like.

00:06:53.009 --> 00:06:54.469
So I mentioned about the various services.

00:06:54.470 --> 00:07:00.890
So let's look at each one of the those and quickly kind
of grasp how the services are integrated in 10.4 again

00:07:00.889 --> 00:07:06.360
First of all we talked about secure, form of authentication.

00:07:06.360 --> 00:07:09.330
So now we're actually doing authentication at log in.

00:07:09.329 --> 00:07:11.339
So we're providing two factor authentication.

00:07:11.339 --> 00:07:15.419
For those of you who are unfamiliar, two-factor
is where you have something in your hand,

00:07:15.420 --> 00:07:17.560
something you have, and then something that you know.

00:07:17.560 --> 00:07:18.689
It's that pin on the card.

00:07:18.689 --> 00:07:26.709
So you're unlocking access to your account at log in.

00:07:26.709 --> 00:07:32.349
Associated with that, the key aspect of OS X that
you need to keep in mind when you're thinking

00:07:32.350 --> 00:07:36.110
of authentication is the corresponding authorization.

00:07:36.110 --> 00:07:42.509
Right. Because I may be an administrator, I am not
always authorized to do all activities on my machine,

00:07:42.509 --> 00:07:46.750
on an end user's machine, or maybe even a corporate server.

00:07:46.750 --> 00:07:51.810
So to keep us all on the same page here with
the authorization, let's run through this.

00:07:51.810 --> 00:07:56.740
We're talking about the acquisition of a
right in order to be able to perform a task.

00:07:56.740 --> 00:07:59.699
And the corresponding rules associated with that.

00:07:59.699 --> 00:08:04.420
Think here that the application up in the
upper left-hand corner in the log in window.

00:08:04.420 --> 00:08:10.220
That then would be one of those
services requesting authorization.

00:08:10.220 --> 00:08:15.850
That log in window is then requesting the right
for that user to log into the security server.

00:08:15.850 --> 00:08:21.660
The security server then parses some
information from the authorization database.

00:08:21.660 --> 00:08:26.860
And if you physically look on your machine in etc
authorization, it's an XML flat file.

00:08:26.860 --> 00:08:30.340
That defines the rights and the
rules that we're speaking about here.

00:08:30.339 --> 00:08:32.589
Interrogates that, gathers the information.

00:08:32.590 --> 00:08:41.680
And now learns has required by that user to authenticate
and prove who they are to acquire this authorization right.

00:08:41.679 --> 00:08:45.949
In this case, the request is being
handled by the security agent.

00:08:45.950 --> 00:08:49.160
So this is out of band in the application.

00:08:49.159 --> 00:08:54.360
This is where the applications don't really do
direct inaction with the validation of this user

00:08:54.360 --> 00:08:58.180
or with the associated rights all
handled within OS X itself.

00:08:58.179 --> 00:09:03.149
So the user may be requested to use a
smart card, may be biometric related.

00:09:03.149 --> 00:09:05.689
Maybe some other form much identification.

00:09:05.690 --> 00:09:11.930
Once that information has been acquired out of band,
comes back through, handled by security server,

00:09:11.929 --> 00:09:14.889
an then the appropriate right is
then granted to the security server.

00:09:14.889 --> 00:09:16.409
In this case, the log in window.

00:09:16.409 --> 00:09:18.679
So I would successfully log in with a smart card.

00:09:18.679 --> 00:09:23.370
Keep that in mind about how we
deal with the rights going forward.

00:09:23.370 --> 00:09:27.919
Let's look a little bit closer now at what
you probably have faced and what you may want

00:09:27.919 --> 00:09:33.199
to even change going forward associated with
the rights and the rules in etc authorization.

00:09:33.200 --> 00:09:40.330
I just mentioned about log in -- if you look in Nets
authorization, the right system dot log in dot console,

00:09:40.330 --> 00:09:45.300
is the right that is required for
any user to log into OS X. Okay.

00:09:45.299 --> 00:09:50.389
And this is kind of the beginning part
of that right, etc authorization.

00:09:50.389 --> 00:09:56.679
And you'll see that this is the
much longer contents of that right

00:09:56.679 --> 00:10:00.339
where you see the gold lettering and the red lettering.

00:10:00.340 --> 00:10:04.040
This is where many of you probably
have either manually or --

00:10:04.039 --> 00:10:09.589
leveraged some scripts or some diff
files that we've provided some folks off line.

00:10:09.590 --> 00:10:14.360
You removed the off internal and added the
two lines that were built in for smart card.

00:10:14.360 --> 00:10:21.930
So in 10.4 you had to manually modify the
authorization to allow log in, in OS X. It was --

00:10:21.929 --> 00:10:26.509
the services are there, but it wasn't out of
the box ready to go for smart card log in.

00:10:26.509 --> 00:10:30.740
You had to make these modifications
to enable that capability.

00:10:30.740 --> 00:10:33.799
Well, the nice thing is in 10.5 all of that's done for you.

00:10:33.799 --> 00:10:40.309
So all of the modifications you have to do on 10.4
systems are all handled for you already in 10.5.

00:10:40.309 --> 00:10:44.289
So let's look at the corresponding rule with logging in.

00:10:44.289 --> 00:10:47.539
And this one is for authenticate.

00:10:47.539 --> 00:10:55.279
Now again, the same additions and sub traditions of
line into that rule and you'll see within this mechanism

00:10:55.279 --> 00:11:01.819
with the removal of off internal and the addition
of the two built in references to smart card.

00:11:01.820 --> 00:11:03.770
These are references to off plug-ins.

00:11:03.769 --> 00:11:10.429
So if you're wanting to add some additional authentication
mechanisms you do this through the addition of off plug-ins.

00:11:10.429 --> 00:11:12.629
Okay, again.

00:11:12.629 --> 00:11:14.220
Same thing with the write.

00:11:14.220 --> 00:11:19.420
This rule is already handled directly
from -- within OS X 5, within Leopard.

00:11:19.419 --> 00:11:22.449
Okay. So we did a little bit of under the hood looking.

00:11:22.450 --> 00:11:28.050
The next big issue that you're facing is how do I
integrate these smart cards into my directory services.

00:11:28.049 --> 00:11:35.199
How do I make sure that my user authenticates to
Open Directory, or maybe to even Local Net Info,

00:11:35.200 --> 00:11:37.740
or LDAP or maybe Active Directory.

00:11:37.740 --> 00:11:43.860
What Apple provided was two methods to give you
the ability of leveraging your infrastructure

00:11:43.860 --> 00:11:46.500
for user authentication of the smart card.

00:11:46.500 --> 00:11:48.309
This two factor authentication.

00:11:48.309 --> 00:11:50.179
The two methods can be references.

00:11:50.179 --> 00:11:54.959
A cryptographic data exchange, it's really kind of
a reference to how things are handled with the keys.

00:11:54.960 --> 00:11:57.350
And then the attribute matching.

00:11:57.350 --> 00:12:00.899
Kind of a reference point of information
that comes from certificates

00:12:00.899 --> 00:12:04.470
in matching that value with your directory service.

00:12:04.470 --> 00:12:08.389
So let's look at each one of those real
quickly, give you an idea of how it fits

00:12:08.389 --> 00:12:10.449
and whether it does fit in your environment.

00:12:10.450 --> 00:12:14.470
Some folks will need to leverage
one method and wouldn't be able

00:12:14.470 --> 00:12:17.509
to leverage another depending on their service implemented.

00:12:17.509 --> 00:12:24.279
A typical approach here and a better approach is the
initial method I mentioned, the cryptographic data exchange.

00:12:24.279 --> 00:12:27.100
And this leverages the use of the Public Key Hash.

00:12:27.100 --> 00:12:29.330
So when you're thinking what on that card.

00:12:29.330 --> 00:12:33.980
We went back and saw the identity
being that certificate and key.

00:12:33.980 --> 00:12:39.340
Really what you see here at the third bullet
there, it talks about locating the Public Key Hash.

00:12:39.340 --> 00:12:45.820
Once you set up a card using the cryptographic data
exchange, if you look at the authentication attribute

00:12:45.820 --> 00:12:52.680
in your user account you actually see the addition
of Pub Key Hash and this really long text value.

00:12:52.679 --> 00:12:58.649
Right? This is the value -- this Public Key Hash
associated with which identity you're going to use

00:12:58.649 --> 00:13:02.069
on that card for the authentication of the user.

00:13:02.070 --> 00:13:06.490
In this method it also doesn't matter
which one you pick from your card.

00:13:06.490 --> 00:13:09.840
Right. There are several folks that
want to use certain identity, certain --

00:13:09.840 --> 00:13:14.600
remember you go back to that typical card where you
had an identity, e-mail signing in and encryption.

00:13:14.600 --> 00:13:20.649
It doesn't matter which one you use for this
with this method, crypt graphic data exchange.

00:13:20.649 --> 00:13:27.329
The other method which is probably more prevalent
to many of you, is the need to map between a --

00:13:27.330 --> 00:13:37.430
an attribute on the card and an attribute in
the user's record in your directory's service.

00:13:37.429 --> 00:13:41.319
And what's typical in many environments
that we've dealt with, with our customers,

00:13:41.320 --> 00:13:46.879
is they're drawing from an attribute called the NT
Principal Name in the e-mail signing insert on the card,

00:13:46.879 --> 00:13:50.490
and mapping that to the User Principal
Name in active directly

00:13:50.490 --> 00:13:55.279
Okay. That would be the typical mapping that a
lot of folks that we have dealt with have used.

00:13:55.279 --> 00:13:58.870
So that method would give you the
ability of back end management.

00:13:58.870 --> 00:14:05.659
Adding that value to the User Principal Name,
and allowing that user to go between machines

00:14:05.659 --> 00:14:07.350
and authenticate again to your directory service.

00:14:07.350 --> 00:14:08.820
In this case, maybe Active Directory.

00:14:08.820 --> 00:14:16.770
So let's move a little bit forward a little
bit faster through some of these services.

00:14:16.769 --> 00:14:21.960
To just better explain again how
the smart card services map in here.

00:14:21.960 --> 00:14:25.759
If you're doing system administration, we talked
about System Preferences when you're doing the unlock.

00:14:25.759 --> 00:14:30.350
Rather than the user name and the password
you now have the ability for the smart cards.

00:14:30.350 --> 00:14:35.879
One thing I haven't mentioned yet is that with
the smart card services it gives you the ability

00:14:35.879 --> 00:14:42.360
to use both your user name and password for the
use of a smart card if you've inserted your card.

00:14:42.360 --> 00:14:47.879
So if you look here and getting ready to modify the
System Preferences, so it's asking me for a password.

00:14:47.879 --> 00:14:52.370
If I insert the smart card, what ends up
happening is that password switches to a PIN,

00:14:52.370 --> 00:14:56.289
because now it's recognizing the
card is associated with my account.

00:14:56.289 --> 00:15:00.709
I am now asked for the PIN to unlock
access to the private key on that card.

00:15:00.710 --> 00:15:05.540
Again, there's some references to the
available rights and related preferences.

00:15:05.539 --> 00:15:07.649
So now let's move to another area.

00:15:07.649 --> 00:15:09.480
You're providing secure web access.

00:15:09.480 --> 00:15:13.320
We're talking about some of the new web
services that you all might be developing,

00:15:13.320 --> 00:15:15.770
might be deploying in your IT infrastructure.

00:15:15.769 --> 00:15:20.689
How do you get the smart card services
leverage in your environment?

00:15:20.690 --> 00:15:30.240
So when you're doing web access, what you're wanting to do
is provide user authentication to that back end service.

00:15:30.240 --> 00:15:34.850
And the one thing that I want to be sure that
many of you understand is that Apple's approach

00:15:34.850 --> 00:15:42.590
to providing user authentication and we'll talk a little bit
more this afternoon about PKI and certificate management,

00:15:42.590 --> 00:15:47.280
is to provide as much kind of zero
configuration approach as possible.

00:15:47.279 --> 00:15:53.000
So let's think about that thought as we move
forward with leveraging identities with these cards.

00:15:53.000 --> 00:15:56.820
So let's say I'm trying to access
my SSL VPN with my smart card.

00:15:56.820 --> 00:16:00.850
I am going to attempt to access the service.

00:16:00.850 --> 00:16:04.009
But what's happening under the hood here with my smart card.

00:16:04.009 --> 00:16:09.939
Well, first of all I get a little challenge going on
with the server, and it's requesting proof of who I am.

00:16:09.940 --> 00:16:11.670
So I have to present my identity.

00:16:11.669 --> 00:16:15.269
In this case, it's leveraging my identity for my card.

00:16:15.269 --> 00:16:19.699
So I have to enter my PIN, unlock access to the private key.

00:16:19.700 --> 00:16:21.200
I do my exchange with the server.

00:16:21.200 --> 00:16:25.509
If everything's okay with my -- and my validation
on my server side, everything's good to go.

00:16:25.509 --> 00:16:29.069
I'm trusted; I'm into my service.

00:16:29.070 --> 00:16:34.730
Now if I do that same thing with multiple identities,
now that becomes a little bit trickier if you're trying

00:16:34.730 --> 00:16:37.300
to drive a zero configuration environment.

00:16:37.299 --> 00:16:40.189
How does Apple handlef this?

00:16:40.190 --> 00:16:41.870
Okay. You kind of walk through the same steps.

00:16:41.870 --> 00:16:43.610
I'm challenged from the server.

00:16:43.610 --> 00:16:45.389
Try to do the standard exchange.

00:16:45.389 --> 00:16:48.110
I get challenged with my PIN from my card.

00:16:48.110 --> 00:16:49.970
I unlock access to that.

00:16:49.970 --> 00:16:55.389
And I'm really sending off the first
valid certificate out of there.

00:16:55.389 --> 00:17:00.639
Well, what ends up happening is its potential that
the back end service wanted a different identity,

00:17:00.639 --> 00:17:04.879
a different certificate, from my
card than what was initially sent.

00:17:04.880 --> 00:17:10.930
In this case, it would be rejected at the server and
now I would need to maintain some reference to the one

00:17:10.930 --> 00:17:14.080
that I selected, what should be used at this site,

00:17:14.079 --> 00:17:17.619
so next time I go there I don't have
to keep selecting that every time.

00:17:17.619 --> 00:17:20.639
Okay. So zero configuration as best is possible.

00:17:20.640 --> 00:17:25.280
And any time you have a variance in that environment
where you have multiple identities I should only have

00:17:25.279 --> 00:17:31.639
to select once and retain that point, that
reference that I have my personal preference.

00:17:31.640 --> 00:17:33.480
So let's kind of walk through this visually.

00:17:33.480 --> 00:17:39.130
I am going to this web site, and it
all -- proper exchange takes place.

00:17:39.130 --> 00:17:43.570
But my first certificate that was
sent to the server isn't accepted.

00:17:43.569 --> 00:17:49.589
What ends up happening is Safari displays all the
variable additional certificates that I can select

00:17:49.589 --> 00:17:52.099
from that could potentially be sent as well.

00:17:52.099 --> 00:17:58.279
Again, this is a case where I think I had, like, about half
a dozen identities, certificates, here that I could send.

00:17:58.279 --> 00:18:04.349
So Safari's going to display which ones
that I could use, have proper key usage.

00:18:04.349 --> 00:18:09.129
I would then select that, and the system
would retain that reference going forward.

00:18:09.130 --> 00:18:15.200
The thing to keep in mind here is that
the reason Safari displayed that list is

00:18:15.200 --> 00:18:19.529
that the remote service rejected
things at the protocol level.

00:18:19.529 --> 00:18:23.759
What I mean by that is that we've seen
several folks have some infrastructure

00:18:23.759 --> 00:18:30.629
where if the user does not successfully authenticate -- in
this case with certificates -- that what happens is a --

00:18:30.630 --> 00:18:34.390
in some cases a web page gets sent back to the user.

00:18:34.390 --> 00:18:35.790
So you have this catch 22.

00:18:35.789 --> 00:18:39.599
Right. Your services are sending back
a web page telling the user, well,

00:18:39.599 --> 00:18:42.549
you need to select a different identity; certificate.

00:18:42.549 --> 00:18:47.359
But the user can't select one because
you didn't actually fail the protocol.

00:18:47.359 --> 00:18:50.909
We've actually addressed this in some new features
in Leopard to help you with this situation.

00:18:50.910 --> 00:18:56.170
If the server doesn't handle this
as expected at the protocol level.

00:18:56.170 --> 00:18:59.800
I keep referring to this retention as identity preference.

00:18:59.799 --> 00:19:05.279
What actually happens now and has been happening
in 10.4 if this was in your environment.

00:19:05.279 --> 00:19:10.710
Once you select from that list, right,
of potential alternate certificates,

00:19:10.710 --> 00:19:13.960
is this identity preference is added to your keychain.

00:19:13.960 --> 00:19:20.230
It's that hint for that personal preference that is
there so that next time a service like Safari goes to hit

00:19:20.230 --> 00:19:26.289
that particular URL I no longer get
prompted for which one I should select.

00:19:26.289 --> 00:19:33.279
What happens now is the request for that URL Safari is
actually at lower levels of frameworks is actually looking

00:19:33.279 --> 00:19:36.160
for if there isn't a preference for that site.

00:19:36.160 --> 00:19:38.470
In this case, I already set it that one time.

00:19:38.470 --> 00:19:46.289
I will never have to set it again unless things
change with my identity or with the site.

00:19:46.289 --> 00:19:51.659
Some new stuff in Leopard here that we're going to go into
a little bit more is this actually gives you the ability now

00:19:51.660 --> 00:19:56.500
of selecting a different certificate
manually within keychain access,

00:19:56.500 --> 00:19:59.559
as well as even changing the URL
that you're wanting to go to.

00:19:59.559 --> 00:20:02.649
And we'll talk about giving the ability
of manually setting something in advance

00:20:02.650 --> 00:20:07.080
so that users don't even have to respond to that list.

00:20:07.079 --> 00:20:11.149
So if you look in Keychain Access in Leopard, and
this should be in the builds that you all have.

00:20:11.150 --> 00:20:16.590
If you select in the categories field -- and I want to
explain this a little bit because people are confused --

00:20:16.589 --> 00:20:21.359
if you select in that category list in Key
Chain Access where it says My Certificates,

00:20:21.359 --> 00:20:25.699
that My Certificates really refers to your identities.

00:20:25.700 --> 00:20:30.039
Right? The certificates that you
retain the associated private key.

00:20:30.039 --> 00:20:32.990
Okay. If you select the one that's
above it that just says Certificates,

00:20:32.990 --> 00:20:35.559
you're just going to see the certificates in that keychain.

00:20:35.559 --> 00:20:41.230
But if I select My Certificates, I'm seeing those
searched that I have the corresponding key for.

00:20:41.230 --> 00:20:44.579
And I think I have it in different set of slides here.

00:20:44.579 --> 00:20:50.179
But visually in Leopard as well, you see the
disclosure triangle right in front of it.

00:20:50.180 --> 00:20:55.450
You would actually see that association,
which wasn't there back in 10.4.

00:20:55.450 --> 00:21:00.230
So now there's this contextual menu ability
in Leopard where I can now bring up,

00:21:00.230 --> 00:21:03.059
and you can see the top option is New Identity Preference.

00:21:03.059 --> 00:21:05.460
Right? The ability to now manually select this.

00:21:05.460 --> 00:21:13.779
As I walk through I can now manually enter the URL
and also note there it talks about an e-mail address.

00:21:13.779 --> 00:21:15.639
Right? We're going to get into that in the e-mail side.

00:21:15.640 --> 00:21:22.270
This gives you the ability of manually setting an identity
preference for both the URL and for e-mail addresses.

00:21:22.269 --> 00:21:26.230
In this case, going to your SSL VPN.

00:21:26.230 --> 00:21:27.720
And again, same thing.

00:21:27.720 --> 00:21:34.539
Once you've set that it's put into your keychain,
access list here, into a particular keychain

00:21:34.539 --> 00:21:37.029
that I had in this case for that particular site.

00:21:37.029 --> 00:21:40.740
Let me move a little bit quicker
through some of these services.

00:21:40.740 --> 00:21:46.430
Hopefully you're aware of the fact that Internet Connect
has the capabilities of relying on certificates --

00:21:46.430 --> 00:21:55.090
smart card based or keychain based -- for the VPN Solutions
Layer 2, Point to Point, and also 802 dot 1 access control.

00:21:55.089 --> 00:22:00.089
Okay. So those are other remote services
that have full access to the smart cards.

00:22:00.089 --> 00:22:02.159
And I'll go through these quickly.

00:22:02.160 --> 00:22:07.630
Layer 2, if you select user Authentication For
Certificate what you'll see is that quick dialogue

00:22:07.630 --> 00:22:09.940
on the right side that says select certificate.

00:22:09.940 --> 00:22:14.019
You select what whichever server
is available for that key usage.

00:22:14.019 --> 00:22:21.789
Same thing with Point to Point in selecting
certificate for that user authentication.

00:22:21.789 --> 00:22:28.329
This is really where you're doing EAP-TLS. So you're doing
the -- the validation of that user with a certificate.

00:22:28.329 --> 00:22:33.919
And again, with 802 dot 1 A. Very simple interface for users

00:22:33.920 --> 00:22:38.539
to set these configurations up
if they want to do it manually.

00:22:38.539 --> 00:22:40.569
So let's quickly jump to mail.

00:22:40.569 --> 00:22:42.250
Secure e-mail with smart cards.

00:22:42.250 --> 00:22:43.410
So S/MIME.

00:22:43.410 --> 00:22:45.350
And again, remember, I talked about zero configuration.

00:22:45.349 --> 00:22:46.480
So how does this work.

00:22:46.480 --> 00:22:51.599
Several folks have talked to me in the
last couple years and kept saying how

00:22:51.599 --> 00:22:53.949
in the world do I con figure mail to work with a smart card.

00:22:53.950 --> 00:22:58.880
How do I configure it to use my identity
that I just acquired from some CA.

00:22:58.880 --> 00:23:04.250
Well, in this case, again, this is a
perfect example of that zero configuration.

00:23:04.250 --> 00:23:11.730
There's nothing that I do within the mail app to configure
it specifically for the use of smart cards except

00:23:11.730 --> 00:23:15.710
for a point I will bring out that's just
more of a careful entry of information.

00:23:15.710 --> 00:23:21.380
So you'll see I'm composing a new message, and
you'll see the little certificate reference,

00:23:21.380 --> 00:23:23.170
kind of a signing reference, a little check there.

00:23:23.170 --> 00:23:28.310
And then the lock reference to encryption
there on the right side of the Compose window.

00:23:28.309 --> 00:23:30.190
So where does that come from?

00:23:30.190 --> 00:23:34.840
Well, when I go to compose that message,
Mail is actually requesting from the OS,

00:23:34.839 --> 00:23:42.759
is there an appropriate e-mail signing certificate somewhere
in this user's credential store in one of the keychains

00:23:42.759 --> 00:23:45.910
that would be valid for the e-mail
address that I'm sending from.

00:23:45.910 --> 00:23:51.350
I point to the e-mail address because
many folks have gotten caught on this,

00:23:51.349 --> 00:23:56.039
and that's where I just want to
bring that to your attention.

00:23:56.039 --> 00:24:01.349
The -- when you're dealing with the RFCs here with
the S/MIME you have to be careful because everything

00:24:01.349 --> 00:24:05.569
to the left of the At symbol is case sensitive.

00:24:05.569 --> 00:24:12.329
Okay? So within Mail I had configured my account
to be capital G and lower case e-d-d-i-s --

00:24:12.329 --> 00:24:15.949
it would not have given me the option
of actually signing this message.

00:24:15.950 --> 00:24:22.140
So it's really not a special configuration on my account,
but just careful that the case sensitivity of my address

00:24:22.140 --> 00:24:27.650
in my mailer, my mail app, is identical
to what's in my certificate.

00:24:27.650 --> 00:24:33.880
So the same thing moving on with somebody I'm sending
to, I am going to encrypt a message to Joe user.

00:24:33.880 --> 00:24:40.260
As long as my system has the available
access to a public certificate I will be able

00:24:40.259 --> 00:24:42.170
to do the encryption directly to this user.

00:24:42.170 --> 00:24:48.050
And there's a session later on today
that we get into much more of this.

00:24:48.049 --> 00:24:55.039
So many of you have asked about adding your
own smart cards, adding a new card type.

00:24:55.039 --> 00:24:59.470
And wanting to know what Apple supports out of the box.

00:24:59.470 --> 00:25:06.200
What we've done is shipped an environment, we refer to
it as Token D, to support the actual card interface.

00:25:06.200 --> 00:25:07.580
This gets a little bit lower.

00:25:07.579 --> 00:25:10.759
So if you're the IT folks that don't care
about this, this is when you kind of zone

00:25:10.759 --> 00:25:12.119
out a little bit and catch up on your notes.

00:25:12.119 --> 00:25:14.789
But for the developers and the
low-level people, key into here,

00:25:14.789 --> 00:25:18.829
because this helps you understand what
cards are supported and what aren't.

00:25:18.829 --> 00:25:23.199
Out of the box shipped in OS X
we provide Token D interaction.

00:25:23.200 --> 00:25:28.279
Token D is here to support three major
smart card initiatives around the world.

00:25:28.279 --> 00:25:33.639
Jack being a reference to the Department of Defense within
the U.S. government, Belpic, Belgian,

00:25:33.640 --> 00:25:36.390
and JPKI is Japanese PKI cards.

00:25:36.390 --> 00:25:43.300
Well, new in 10.5 there's a new standard within
the U.S., again, given by the U.S. government --

00:25:43.299 --> 00:25:51.190
outside just of the original DOD CAC Specification
or PIV -- or Personal Identity Verification.

00:25:51.190 --> 00:25:55.150
That is actually coming -- that
support for PIV is coming in Leopard.

00:25:55.150 --> 00:25:59.720
So if you need support for a PIV
card within your application,

00:25:59.720 --> 00:26:03.089
once you have Leopard you now have access to that card.

00:26:03.089 --> 00:26:10.939
Okay. So here's -- we go just one level deeper for
those of you that need to know this information.

00:26:10.940 --> 00:26:12.210
Green is the applications.

00:26:12.210 --> 00:26:17.720
That's Mail, that's Safari, that's log in, it's
anything up here, if you need this information.

00:26:17.720 --> 00:26:22.240
Applications are requesting access
to the services, these objects,

00:26:22.240 --> 00:26:25.880
through the security APIs, which are all on top of CDSA.

00:26:25.880 --> 00:26:31.070
So what happens underneath the hood here
is when you attach a reader to your system,

00:26:31.069 --> 00:26:34.470
Security D actually now launches and manages PCSCD.

00:26:34.470 --> 00:26:38.789
So if you're a developer and you couldn't
figure out why in the world PCSCD wasn't running

00:26:38.789 --> 00:26:42.180
when your system was running, launched or booted up.

00:26:42.180 --> 00:26:46.519
The reason is we launch these services
only when they're really needed.

00:26:46.519 --> 00:26:49.349
Right? To keep kind of a low footprint on that.

00:26:49.349 --> 00:26:54.230
So if I attach a reader, system launches
PC S CD to do that communication.

00:26:54.230 --> 00:26:58.930
Once you stick in a card I will show
you a real quick demo in a little bit.

00:26:58.930 --> 00:27:01.480
The appropriate Token Ds, they're all launched,

00:27:01.480 --> 00:27:05.430
and it attempts to probe the cards
to determine what card type that is.

00:27:05.430 --> 00:27:06.450
And one of them wins.

00:27:06.450 --> 00:27:08.940
And we'll see that a little bit later.

00:27:08.940 --> 00:27:10.420
So that's kind of a low-level.

00:27:10.420 --> 00:27:12.269
Each one of these are Token Ds.

00:27:12.269 --> 00:27:14.500
Right? Each one of those card types that we mentioned here.

00:27:14.500 --> 00:27:23.930
And you'll see a module in System Library Security Token
D on your system for support of each one of those cards.

00:27:23.930 --> 00:27:25.039
I think I mentioned most of this.

00:27:25.039 --> 00:27:27.509
Again, it's one token for each card.

00:27:27.509 --> 00:27:31.950
And your smart cards really now appear
at the top of your keychain list.

00:27:31.950 --> 00:27:37.319
So when identities or certificates are searched
they're really the first ones that are searched.

00:27:37.319 --> 00:27:38.939
So we're talking about all the cards.

00:27:38.940 --> 00:27:44.500
But there really is the challenge of now that I have
a card, how do I get access to it on my machine.

00:27:44.500 --> 00:27:50.279
Okay? Of the most predominant and desk
approach is what's referred to as CCID.

00:27:50.279 --> 00:27:54.940
And Apple's provided a CCID class driver in the OS.

00:27:54.940 --> 00:28:01.190
So if you acquire any CCID-compliant
reader, it should just work.

00:28:01.190 --> 00:28:03.090
No additional drivers needed.

00:28:03.089 --> 00:28:04.309
It should just work.

00:28:04.309 --> 00:28:08.179
Microsoft has done some provision
on CCID on Windows's side as well.

00:28:08.180 --> 00:28:13.039
So many of you if you're buying
readers, now a days many of them are.

00:28:13.039 --> 00:28:14.159
There are some proprietary ones.

00:28:14.160 --> 00:28:20.880
But if you have a CCID class drive yes, sir, a
CCID-compliant reader, that's the best thing to go with.

00:28:20.880 --> 00:28:23.010
It's just going to work.

00:28:23.009 --> 00:28:29.690
What Apple did to extend that a little bit more is
include some key driver support for many of the readers

00:28:29.690 --> 00:28:34.070
that were used across some of those larger
smart card projects around the world.

00:28:34.069 --> 00:28:37.339
Again, from some of the major smart card reader vendors.

00:28:37.339 --> 00:28:41.519
And of course, if you're getting into some development
and you haven't done this before and you kind

00:28:41.519 --> 00:28:49.990
of need some open source stuff to draw from in
addition to ours, looking at the muscle site for some

00:28:49.990 --> 00:28:52.339
of the drivers is a great place to start.

00:28:52.339 --> 00:28:57.259
Again, the key is if you go with a CCID
compliant reader you're done; done deal.

00:28:57.259 --> 00:29:01.920
So now let's take a quick look -- I just
wanted to show you a little bit under the hood

00:29:01.920 --> 00:29:05.370
of what I've been mentioning about those services.

00:29:05.369 --> 00:29:08.219
So let's switch over to the demo B system.

00:29:08.220 --> 00:29:17.140
And what I wanted to do is again,
give you a couple quick methods.

00:29:17.140 --> 00:29:24.820
Maybe just some steps that you can use to identify if things
are working properly, or where you may have some problems

00:29:24.819 --> 00:29:29.279
within OS X. So I've got a smart
card reader attached to this system.

00:29:29.279 --> 00:29:31.559
What I have up here is Keychain Access.

00:29:31.559 --> 00:29:36.539
Again, that's the way that you're visually
seeing keychains, since we abstract smart cards

00:29:36.539 --> 00:29:39.180
as keychains now, this is where you're going to see them.

00:29:39.180 --> 00:29:42.170
What I also have up is Terminal.

00:29:42.170 --> 00:29:49.019
And the reason I have Terminal up is to give --
let me do a little bit of window management here --

00:29:49.019 --> 00:29:54.660
the reason I have Terminal up is to give you a
good idea of what's going on underneath the hood.

00:29:54.660 --> 00:30:00.529
And the easiest way to do this is just run the top
command here to show what's running on that machine.

00:30:00.529 --> 00:30:03.859
So what I want to do is insert one of those cards.

00:30:03.859 --> 00:30:07.089
This one being one of the common access cards.

00:30:07.089 --> 00:30:13.839
You'll see there within a Terminal window a whole bunch of
different processes starting due to timing and the refresh.

00:30:13.839 --> 00:30:15.589
You're not going to see all of them sometimes.

00:30:15.589 --> 00:30:19.309
But what you do see now is that the top process is CAC.

00:30:19.309 --> 00:30:23.119
Remember, I mentioned that's one of the
Token Ds that we have in the system.

00:30:23.119 --> 00:30:27.469
So I know have a unique process
running associated with that card.

00:30:27.470 --> 00:30:33.180
And if I go over here to Keychain Access,
I look right in the keychain list.

00:30:33.180 --> 00:30:42.000
Now I see a new dynamic keychain that's added to my
list that refers to the card that I just inserted.

00:30:42.000 --> 00:30:47.210
What's happening is it's doing some interrogation
on that card, determining the objects on there.

00:30:47.210 --> 00:30:53.759
And you now see a reference to that
card, the search and the private keys.

00:30:53.759 --> 00:30:57.400
Right? We all know that private keys, I
can't pull those private keys off the card.

00:30:57.400 --> 00:31:00.460
So this is really a reference to those objects on the card.

00:31:00.460 --> 00:31:04.309
An abstraction into the keychain environment.

00:31:04.309 --> 00:31:14.129
Now one of the unique things to 10.5 to Leopard is
that there is some built in UI within Keychain Access.

00:31:14.130 --> 00:31:21.190
So if I am physically looking at my keychain list, upper
left-hand corner, and I now double-click on that keychain,

00:31:21.190 --> 00:31:30.529
what will happen is its prompting me for the
PIN, essentially protected data on that card.

00:31:30.529 --> 00:31:41.210
Okay. What will now bring up is this new UI that we're
providing in Leopard to now see all the information that's

00:31:41.210 --> 00:31:44.250
in addition who that card that's not a standard kind of PKI.

00:31:44.250 --> 00:31:46.400
It's not a standard certificate on a private key.

00:31:46.400 --> 00:31:53.630
Just gives some flexibility in viewing PIN-protected
data on that card that I might not see in kind

00:31:53.630 --> 00:31:58.810
of a standard keychain list to the right
here, again, with the certificates and keys.

00:31:58.809 --> 00:32:00.779
So in this case, this is the common access card.

00:32:00.779 --> 00:32:06.899
Those of you familiar, this is the same information that
you saw using previously we provided this as CAC viewer.

00:32:06.900 --> 00:32:09.120
Common Access Card Viewer Utility.

00:32:09.119 --> 00:32:16.839
All of that functionality is now moved
into a plug-in into Keychain Access.

00:32:16.839 --> 00:32:25.189
Okay? One other as sect I want to bring out here, then
I need to turn things over to my -- my colleague here --

00:32:25.190 --> 00:32:32.120
is associated with Keychain Access, if you look at
the preferences there's some key points that you need

00:32:32.119 --> 00:32:35.279
to be aware of and that you need
to look into a little bit more.

00:32:35.279 --> 00:32:43.109
First of all identified mentioned about the
certificate and PKI management session later on today.

00:32:43.109 --> 00:32:45.399
That's a session where we're going
to take this much further.

00:32:45.400 --> 00:32:52.280
But many of you are needing to look for certificates for the
users you're sending, let's say, an encrypted message to.

00:32:52.279 --> 00:32:57.649
Without having those certificates locally
stored, you need to pull them from a server.

00:32:57.650 --> 00:32:58.980
LDAP accessible server.

00:32:58.980 --> 00:33:03.460
That's really where you're selecting in
the preferences the ability to do that,

00:33:03.460 --> 00:33:06.610
physically here for searching directories.

00:33:06.609 --> 00:33:12.439
The other thing relates to the handling
of the validation of that server.

00:33:12.440 --> 00:33:14.049
Right? The revocation.

00:33:14.049 --> 00:33:19.349
The two areas or the two methods of that are OCSP
and CRL. All those are built in services

00:33:19.349 --> 00:33:23.019
in OS X. By default they're both turned off.

00:33:23.019 --> 00:33:30.430
So again, if you're wanting to choose which method you're
using, if your card supports both, you could manually select

00:33:30.430 --> 00:33:36.190
or now with OS X, you're going to hear about newer
ways to set some of these from a command line as well.

00:33:36.190 --> 00:33:38.710
But I could set, in this case, the best attempt.

00:33:38.710 --> 00:33:42.960
My system would go out and do some
validation of those certificates

00:33:42.960 --> 00:33:45.309
and provide that functionality up to my application.

00:33:45.309 --> 00:33:49.389
Whether it's mail app, again, web
access, those kinds of things.

00:33:49.390 --> 00:33:55.940
So this is kind of a -- just a quick run through
of some of those tools and access to the cards.

00:33:55.940 --> 00:34:01.170
And you notice there, as soon as I yank my card, it now
no longer is a keychain that's available to my system.

00:34:01.170 --> 00:34:05.330
Okay. Some really quick understanding
of what's under the hood.

00:34:05.329 --> 00:34:12.489
So let me now make my way back and we'll go back to slides.

00:34:12.489 --> 00:34:17.539
So let me bring John Hurley up.

00:34:17.539 --> 00:34:21.929
Security policy architect at Apple who's
done some of the major work related

00:34:21.929 --> 00:34:29.369
to tying smart card authentication
into unlocking of File Vault itself.

00:34:29.369 --> 00:34:30.969
>> Thanks Shawn.

00:34:30.969 --> 00:34:35.089
Okay. So we'll go through a couple.

00:34:35.090 --> 00:34:41.250
New features that we've added into Leopard
that I think you'll be very happy to see.

00:34:41.250 --> 00:34:47.980
It's possible to do some of this stuff by kind of
monkeying around with disk images and whatever on 10.4.

00:34:47.980 --> 00:34:54.369
But now it's actually integrated in.

00:34:54.369 --> 00:35:01.769
So on 10.4, you know, on the Tiger
release, we did have File Vault.

00:35:01.769 --> 00:35:06.800
And this is an encrypted container
for a user's home directory.

00:35:06.800 --> 00:35:11.260
And it's really ideal for portable
computers, anybody travelling.

00:35:11.260 --> 00:35:18.090
It's a very, very easy way for user to key their
data safe without really having to think about it.

00:35:18.090 --> 00:35:22.600
They don't -- they enter their PIN, they
log in, and hey, all their stuff is there.

00:35:22.599 --> 00:35:25.279
And they don't really care that that's encrypted.

00:35:25.280 --> 00:35:30.180
But you guys do, because you're
responsible for protecting their data.

00:35:30.179 --> 00:35:38.589
So currently the way it works on 10.4 you are going
through the log in process, and as a side effect,

00:35:38.590 --> 00:35:44.090
the user's password is passed off to unlock this disk image.

00:35:44.090 --> 00:35:51.720
All these File Vault images are actually disc
image, file on disc that you could create manually

00:35:51.719 --> 00:36:02.409
with the Disk Utility even -- a key is generated
from the user's password using an algorithm called PBKDF-5.

00:36:02.409 --> 00:36:11.879
And it kind of mushing around the password, the user's
password, and turns that into a cryptographic key

00:36:11.880 --> 00:36:20.930
that it can then use to unwrap the data
that's on the -- that's in the File Vault.

00:36:20.929 --> 00:36:28.919
One thing to note about that is of course you
should have your users pick a strong password.

00:36:28.920 --> 00:36:35.159
Obviously, if you only pick, you know, a short password,
that's only going to have certain number of bits of entropy,

00:36:35.159 --> 00:36:39.009
and it won't act -- successfully protect your File Vault.

00:36:39.010 --> 00:36:44.920
But there are -- if you hunt around in here and Keychain
Access -- actually, anywhere you're creating a password,

00:36:44.920 --> 00:36:49.789
you can use the password assistant and come up with,
you know, some pretty easy to remember passwords.

00:36:49.789 --> 00:36:53.130
So that's just a side note.

00:36:53.130 --> 00:37:02.269
On 10.4, the -- the key that's protecting
the data is an AES 128-bit symmetric( key.

00:37:02.269 --> 00:37:06.030
And once again, that's wrapped with
this user key that's under arrived.

00:37:06.030 --> 00:37:13.780
The data that's, you know, written out to the disc
image and back in is just encrypted on the fly.

00:37:13.780 --> 00:37:20.290
And if you've used that, you've seen that there's
actually -- has very good performance characteristics.

00:37:20.289 --> 00:37:25.610
Even two releases ago when we measured it,
it was in within a few percent of disk speed.

00:37:25.610 --> 00:37:27.680
And now I don't even know what it is.

00:37:27.679 --> 00:37:32.179
But it's very, very fast.

00:37:32.179 --> 00:37:38.000
So one of the things that you are particularly
concerned with from an IT perspective is,

00:37:38.000 --> 00:37:41.050
well, your users have all this encrypted data.

00:37:41.050 --> 00:37:44.010
And that's good if some attacker gets it.

00:37:44.010 --> 00:37:45.980
But it's bad if they forget their password.

00:37:45.980 --> 00:37:48.780
Because guess what, you won't be able to get it either.

00:37:48.780 --> 00:37:56.740
So as we were thinking about implementing this feature
we thought, well, how can we protect the IT organization

00:37:56.739 --> 00:37:58.829
so that they can recover that user's data.

00:37:58.829 --> 00:38:02.170
It would be the same issue for a user at home.

00:38:02.170 --> 00:38:07.900
So there's a separate keychain that's
created -- it's a system-wide keychain.

00:38:07.900 --> 00:38:10.950
And it contains a public-private key pair.

00:38:10.949 --> 00:38:20.589
And that provides -- it's used to provide an alternate
wrapping for the key that are protecting the user's data.

00:38:20.590 --> 00:38:24.860
And there are a couple different -- I think we've --

00:38:24.860 --> 00:38:31.539
published a couple documents on different ways
to create this File Vault master keychain.

00:38:31.539 --> 00:38:35.730
The simplest way for a home user is
they go to the security control panel

00:38:35.730 --> 00:38:40.269
and just say create File Vault Master
and they'll type in a password.

00:38:40.269 --> 00:38:47.500
We've also documented methods that are more useful,
like, for example, the way we do it at Apple,

00:38:47.500 --> 00:38:55.969
we generate a five-vault master key
chain at a location in our IT department.

00:38:55.969 --> 00:39:03.009
They keep a copy of that one that has the private
key and they put it on a CD and stuff it in a safe.

00:39:03.010 --> 00:39:07.650
With the other copy, they remove the
private key, an then they push that out,

00:39:07.650 --> 00:39:12.099
that keychain out, to all the users in Apple.

00:39:12.099 --> 00:39:17.409
You don't need the private key to
create or to wrap the master key.

00:39:17.409 --> 00:39:19.690
You only need it to decrypt it.

00:39:19.690 --> 00:39:24.470
So that's a good way of distributing that
without having to put, you know, well,

00:39:24.469 --> 00:39:28.779
leak the password to this -- out to your organization.

00:39:28.780 --> 00:39:35.870
So here this slide mentions that,
you know, that identity could be --

00:39:35.869 --> 00:39:42.690
you could create your own File Vault master key
chain, or you could import a key into that keychain.

00:39:42.690 --> 00:39:46.789
It's just -- it just looks for it by name and
it takes the first identity that's in there.

00:39:46.789 --> 00:39:48.739
So there are a lot of different ways of creating that.

00:39:48.739 --> 00:39:55.009
It can be store -- you might have
your own archive system for that.

00:39:55.010 --> 00:40:00.230
Okay. So to get down a little bit deeper
into how this is actually working,

00:40:00.230 --> 00:40:04.219
let's look at the File Vault layout on 10.4.

00:40:04.219 --> 00:40:11.519
So this is kind of an exploded view of what
the data looks like inside a disk image.

00:40:11.519 --> 00:40:16.409
So you can see the diagram on the well --
well, actually let's look at the bottom part.

00:40:16.409 --> 00:40:18.449
The bottom part is the encrypted data.

00:40:18.449 --> 00:40:22.849
So that's just this mess of bits that is your data.

00:40:22.849 --> 00:40:31.900
And the next row above that is -- are the
different wrappings of the symmetric key.

00:40:31.900 --> 00:40:36.760
So not shown on this diagram, because we don't
want you to think that it's actually in the file,

00:40:36.760 --> 00:40:45.380
there is a random 128-bit AES key that
is actually protecting all that data.

00:40:45.380 --> 00:40:49.809
The small blocks above that are
different wrappings of that symmetric key.

00:40:49.809 --> 00:40:54.110
So you can see that on the far left are
the wrapping done with the user password.

00:40:54.110 --> 00:40:55.780
They type in the password.

00:40:55.780 --> 00:40:58.320
It runs through PBKF-5.

00:40:58.320 --> 00:41:01.420
And then that's used to unwrap it.

00:41:01.420 --> 00:41:04.750
The File Vault master keychain,
that's the second unwrapping.

00:41:04.750 --> 00:41:10.059
And there's actually space on 10
4 for I think another 98 keys.

00:41:10.059 --> 00:41:15.150
So the file format supports 98 more keys
that you could unwrap the data with.

00:41:15.150 --> 00:41:23.190
But there's actually no way to insert those in there.

00:41:23.190 --> 00:41:27.769
Okay. So what -- what did we change on 10.5?

00:41:27.769 --> 00:41:34.610
The major thing we changed there is that we now allow
smart card access to your encrypted home directory.

00:41:34.610 --> 00:41:37.289
Now it's sort of supported before.

00:41:37.289 --> 00:41:39.309
It's just that there wasn't an automatic tie in.

00:41:39.309 --> 00:41:44.969
And there were a lot of little loose ends
to tie in to make that all work smoothly.

00:41:44.969 --> 00:41:47.789
The log in process is very similar.

00:41:47.789 --> 00:41:51.329
And of course the password based File Vault doesn't go away.

00:41:51.329 --> 00:41:52.769
You can use that if you like.

00:41:52.769 --> 00:41:59.670
But if you have a smart card with an encryption key on
it, you can use that to create these File Vault images.

00:41:59.670 --> 00:42:03.829
The user will log in, they will enter
their PIN rather than a password.

00:42:03.829 --> 00:42:06.219
That will unlock the card.

00:42:06.219 --> 00:42:13.939
And it will, as part of the log in
process, it will also use that smart card

00:42:13.940 --> 00:42:20.559
to unwrap the keys that are protecting the File Vault.

00:42:20.559 --> 00:42:24.699
These images can be either AES 128, or 256.

00:42:24.699 --> 00:42:25.699
And it's the same thing.

00:42:25.699 --> 00:42:32.779
The data is written and read encrypted on the fly.

00:42:32.780 --> 00:42:39.920
The layout here, it's listed as a different diagram,
but it is really pretty much the same as 10.4.

00:42:39.920 --> 00:42:46.539
The data format changed a little
bit to improve some reliability.

00:42:46.539 --> 00:42:51.199
But the main thing is that in the first slot you now
have instead of a password you now have a smart card.

00:42:51.199 --> 00:42:56.469
And so that smart card, one of the -- the
encryption key on the smart card is being used

00:42:56.469 --> 00:43:04.099
to wrap the first slot there, that is wrapping the data.

00:43:04.099 --> 00:43:05.089
The encrypted data.

00:43:05.090 --> 00:43:09.809
You still have the second slot where
you have the File Vault master key.

00:43:09.809 --> 00:43:16.099
So that UK1 is actually a key that's on the
smart card which of course never leaves there.

00:43:16.099 --> 00:43:21.989
But it does cryptographic protocols to say, okay,
please, you know, I need to do an unwrap operation.

00:43:21.989 --> 00:43:22.949
So here you go.

00:43:22.949 --> 00:43:34.460
Now that -- the File Vault master key,
it's listed as optional in the sense --

00:43:34.460 --> 00:43:40.909
it's not optional in the sense that you still have
to create something using the security press pane.

00:43:40.909 --> 00:43:45.099
Because the system requires that you have something there.

00:43:45.099 --> 00:43:50.799
It is optional in the sense that in some
organizations you may already have a hierarchy

00:43:50.800 --> 00:43:54.740
for escrowing the user's encryption key.

00:43:54.739 --> 00:43:59.139
And that's all you need in order to be
able to recover their data if its lost.

00:43:59.139 --> 00:44:05.599
So it may be that you don't need to
actually have a single master keychain

00:44:05.599 --> 00:44:10.599
that could be used to recover all these File Vaults.

00:44:12.170 --> 00:44:19.789
Now of course you can -- you could
put in just as we do at Apple still.

00:44:19.789 --> 00:44:25.000
A corporate-wide master keychain.

00:44:25.000 --> 00:44:28.349
And -- or that could be created
through your own certificate authority.

00:44:28.349 --> 00:44:30.230
Or you could put in a junk certificate.

00:44:30.230 --> 00:44:36.599
In other words, you've confirmed, yep, we
have our user's keys escrowed somewhere else.

00:44:36.599 --> 00:44:38.889
And we don't have to worry about that particular thing.

00:44:38.889 --> 00:44:43.299
If we need to recover the data
we can just create another card.

00:44:43.300 --> 00:44:47.400
For example, that's how the DOD common access card works.

00:44:47.400 --> 00:44:55.519
When they create that card they generate the two sign in
keys on the card so those are there for non repudiation.

00:44:55.519 --> 00:44:59.610
But the encryption key they generate on their secure server.

00:44:59.610 --> 00:45:03.559
They escrow one copy, and they push one copy to the card.

00:45:03.559 --> 00:45:07.250
If the user loses the card they
have to get a new identity anyway.

00:45:07.250 --> 00:45:15.239
So they go back and it can retrieve
that encryption key and push it back.

00:45:15.239 --> 00:45:24.189
Okay. So to enable File Vault in Leopard,
File Vault with use with the smart card,

00:45:24.190 --> 00:45:33.429
you have to turn on the File Vault master password
or copy in a keychain that you're going to use.

00:45:33.429 --> 00:45:38.289
There is a new command line utility
called Token Admin.

00:45:38.289 --> 00:45:42.599
It's only purpose right now is to create a File Vault user.

00:45:42.599 --> 00:45:48.849
We may enhance that in the future with a
little bit more stuff to work with tokens.

00:45:48.849 --> 00:45:52.940
And that Token Admen command, or the create --

00:45:52.940 --> 00:46:01.470
that's the user command, takes the short user name
for the user and a long user name for the user.

00:46:01.469 --> 00:46:07.919
And then optionally a password for the user's keychain.

00:46:07.920 --> 00:46:14.130
You'll then display -- you'll insert the
user's card and you can display the hashes

00:46:14.130 --> 00:46:18.269
on the card uses F C Off Script with the hash parameter.

00:46:18.269 --> 00:46:24.090
And that will list those long 20-byte
hashes o f the smart cards.

00:46:24.090 --> 00:46:28.740
And then you'll use that hash to
bind the user to the account.

00:46:28.739 --> 00:46:34.909
So as Shawn explained earlier, it's
going to look that public hash key

00:46:34.909 --> 00:46:38.589
up in the directory and say, oh, okay, that's that user.

00:46:38.590 --> 00:46:44.160
And we will go load that up.

00:46:44.159 --> 00:46:53.289
Now the other thing that we added as part of this
feature was the ability to unlock the log in keychain

00:46:53.289 --> 00:46:59.009
with a smart card, or actually
any keychain with a smart card.

00:46:59.010 --> 00:47:06.700
This is -- it's something that you can decide
whether you want to enable that or not.

00:47:06.699 --> 00:47:11.649
In some cases it may be easier for the user to
have a keychain that actually has a password.

00:47:11.650 --> 00:47:15.070
In other cases you might want to have both.

00:47:15.070 --> 00:47:19.870
If you want to enable that, though, there
are a few more steps that you have to do.

00:47:19.869 --> 00:47:23.789
So you have to mount the File Vault image file.

00:47:23.789 --> 00:47:32.110
So we previously created that user
account using the Token Admen command.

00:47:32.110 --> 00:47:38.570
That creates a file which is user -- it's
in the user directory and it's the name

00:47:38.570 --> 00:47:41.200
of the user, and then user dot sparse bundle.

00:47:41.199 --> 00:47:46.579
We're going to mount that using HDIutil,
so it will actually show one as a drive.

00:47:46.579 --> 00:47:57.980
We can then use a new option to the system keychain command
to protect that -- that keychain -- with the smart card.

00:47:57.980 --> 00:48:00.860
So it will link those two together.

00:48:00.860 --> 00:48:04.370
And then as the last step, so you can
allow the user to actually log in.

00:48:04.369 --> 00:48:06.799
You need to unmount that image.

00:48:06.800 --> 00:48:11.810
Because the user won't be able to --
it won't be able to be mounted twice.

00:48:11.809 --> 00:48:17.639
So if you forget that step the user won't be able to log in.

00:48:17.639 --> 00:48:20.480
Okay now, a couple of things to keep in mind about this.

00:48:20.480 --> 00:48:24.429
This is kind of the first -- it was a
very, very big feature to implement.

00:48:24.429 --> 00:48:28.659
And it has -- it has a limited scope.

00:48:28.659 --> 00:48:35.089
We know people really wanted this feature,
so we worked on it and we it deployed it.

00:48:35.090 --> 00:48:45.370
It's particularly useful for people that are travelling
that have a portable, and they want to secure that.

00:48:45.369 --> 00:48:50.949
It -- we do not have any way right
now to migrate an existing account.

00:48:50.949 --> 00:48:57.239
So this command will only allow you to create
a completely new account on the machine.

00:48:57.239 --> 00:49:04.409
So you can imagine -- you -- you -- you
know, you get your new MacBook, take it out.

00:49:04.409 --> 00:49:09.519
You want to set up an Admin account,
which is not the main account.

00:49:09.519 --> 00:49:11.250
So that will be a separate account.

00:49:11.250 --> 00:49:15.969
Then you'll run through these steps and
you will create this File Vault user.

00:49:17.230 --> 00:49:22.800
And -- you really want to have the
second or primary Admin account.

00:49:22.800 --> 00:49:29.310
Because we still -- we do not have every single
authorization dialogue -- Shawn showed you some of them.

00:49:29.309 --> 00:49:31.710
And many of the dialogues are hooked up.

00:49:31.710 --> 00:49:36.820
We do not have 100 Admin access with -- via smart card yet.

00:49:36.820 --> 00:49:38.550
So Leopard does not have that.

00:49:38.550 --> 00:49:43.980
You will, unfortunately, will still
need a separate Admin account.

00:49:43.980 --> 00:49:49.400
If you have -- had data on that
machine that you're then copying

00:49:49.400 --> 00:49:52.730
into this new user, you may want to securely erase it.

00:49:52.730 --> 00:49:59.019
But probably a better way to deploy it is take this
completely fresh lap top that has no user data on it,

00:49:59.019 --> 00:50:04.489
configure it, then add the user's data
in from, say, an external FireWire drive.

00:50:04.489 --> 00:50:14.859
Okay. So unlocking smart cards, or
unlocking keychains with smart cards --

00:50:14.860 --> 00:50:19.099
as I mentioned earlier, this is something that
you might want to set up for the File Vault user,

00:50:19.099 --> 00:50:24.250
and through an addition to the system key
chain command you can associate a keychain

00:50:24.250 --> 00:50:29.590
with a token that you want to use to unlock it.

00:50:29.590 --> 00:50:33.250
If you do use the joint system keychain,
you will see system key change dash C,

00:50:33.250 --> 00:50:35.630
which creates your system root keychain.

00:50:35.630 --> 00:50:42.210
System keychain dash T will protect
a keychain with a token.

00:50:42.210 --> 00:50:50.199
So instead of using the -- instead of
using the user's password to derive a key,

00:50:50.199 --> 00:50:57.299
which is then used to unwrap the data in
the keychain, it uses the key on the card.

00:50:57.300 --> 00:51:02.940
It uses the currently inserted card, and it
picks the first encryption identity on there.

00:51:02.940 --> 00:51:07.369
So that's a limitation on that command.

00:51:07.369 --> 00:51:11.699
So now I'll give you a quick demo of this working.

00:51:11.699 --> 00:51:20.649
Okay. I'm going switch to Demo Machine B. Okay.

00:51:20.650 --> 00:51:31.470
And I have previously set up the
File Vault master keychain.

00:51:31.469 --> 00:51:33.489
Oops. Wrong one here.

00:51:33.489 --> 00:51:35.500
Security. File Vault.

00:51:35.500 --> 00:51:41.219
So you can see it says a master
password is set for this computer.

00:51:41.219 --> 00:51:43.089
So I just set that up earlier.

00:51:43.090 --> 00:51:47.769
That's a step that you have to do first.

00:51:47.769 --> 00:51:54.570
So the first thing we'll do is we'll -- actually very
first thing we'll do is insert our card so have a --

00:51:54.570 --> 00:52:02.410
this is a common access card that as Shawn said has an
identity cert, signing cert, and encryption cert on it.

00:52:02.409 --> 00:52:06.099
Of course, the encryption cert is
essential to make the File Vault work.

00:52:06.099 --> 00:52:10.699
Because it needs to be able to encrypt and decrypt the data.

00:52:10.699 --> 00:52:14.659
So we'll insert that card.

00:52:14.659 --> 00:52:17.190
You can see that it's there.

00:52:17.190 --> 00:52:20.750
Security list will show you a list of all the keychains.

00:52:20.750 --> 00:52:22.900
And it's the first keychain in the list.

00:52:22.900 --> 00:52:27.079
And of course Keychain Access
will show that to you as well.

00:52:27.079 --> 00:52:30.650
So you can see that's up there.

00:52:30.650 --> 00:52:38.570
So now we'll go ahead and we'll create our
File Vault user, using the Token Admin command.

00:52:38.570 --> 00:52:41.539
And I'll hit return on that.

00:52:41.539 --> 00:52:47.259
Now it -- it goes through and it validates
that the user exists and doesn't --

00:52:47.260 --> 00:52:50.760
or doesn't already exists, and is allowed to the created.

00:52:50.760 --> 00:52:54.890
And then it goes ahead and creates the home directory.

00:52:54.889 --> 00:52:58.889
Now it's going to ask me for the PIN.

00:52:58.889 --> 00:53:07.119
And this actually takes a little bit of
time as it sets up all the data structures.

00:53:07.119 --> 00:53:13.900
I think -- I think the initial
file is a couple of Megs anyway.

00:53:13.900 --> 00:53:15.900
So it's doing all the directory.

00:53:15.900 --> 00:53:31.340
Okay. So now if you looked at Slash Users, we'll see
there is -- there's a J.Coltrane user there.

00:53:31.340 --> 00:53:36.390
And if you look in that directory you will see
J. Coltrane dot sparse bundle.

00:53:36.389 --> 00:53:44.650
Okay. So now the next thing we want to do is we want
to associate that user with -- with that account.

00:53:44.650 --> 00:53:49.380
Or we want to associate this particular smart card

00:53:49.380 --> 00:53:55.800
and a particular identity cert on
that card with the user's account.

00:53:55.800 --> 00:53:58.810
So I am going use the identity private key here.

00:53:58.809 --> 00:54:01.179
That's this first one here.

00:54:01.179 --> 00:54:02.989
And that's assigning key.

00:54:02.989 --> 00:54:10.669
And I use the Cs Off Script with the Accept parameter.

00:54:10.670 --> 00:54:17.230
So it takes the short name of the user
and the dash H parameter is the hash.

00:54:18.420 --> 00:54:20.849
So at that point the user is all set.

00:54:20.849 --> 00:54:24.069
If you logged out now, the user could log in.

00:54:24.070 --> 00:54:25.390
But let's do one more thing.

00:54:25.389 --> 00:54:33.949
Let's protect their log in keychain with this token.

00:54:33.949 --> 00:54:36.469
So we've mounted the sparse bundle.

00:54:36.469 --> 00:54:42.439
And we associate using the system keychain.

00:54:42.440 --> 00:54:46.720
We associate this card with that keychain.

00:54:46.719 --> 00:54:52.500
And then as the final step we will unmount that volume.

00:54:52.500 --> 00:54:57.909
Okay. Now at this point we can go to log in window.

00:54:57.909 --> 00:55:02.920
And you'll see that the smart card sniffer's running there.

00:55:02.920 --> 00:55:05.610
It realizes that the card is inserted.

00:55:05.610 --> 00:55:10.490
The card is associated with this
user through the hash value.

00:55:10.489 --> 00:55:13.159
And it says, oh, okay, we know who that guy is.

00:55:13.159 --> 00:55:19.899
All we need now is his PIN.

00:55:19.900 --> 00:55:23.860
Now this one -- this dialogue you
will not see in the final release.

00:55:23.860 --> 00:55:31.450
This is a known bug where it asks for it twice.

00:55:31.449 --> 00:55:34.309
Normally the user would just type that PIN once.

00:55:34.309 --> 00:55:35.570
And there they go.

00:55:35.570 --> 00:55:41.650
Now they're into their File Vault at Home Directory.

00:55:41.650 --> 00:55:53.150
Now if we look at -- if we look at Keychain Access

00:55:53.150 --> 00:55:54.440
it will show you all keychains.

00:55:54.440 --> 00:55:59.300
So one thing you see the smart card keychain is in there.

00:55:59.300 --> 00:56:06.410
And then -- there's their log in keychain.

00:56:06.409 --> 00:56:12.019
And because we've already unlocked
the smart card using the PIN,

00:56:12.019 --> 00:56:15.070
we don't have to provide a password
to unlock that log in keychain.

00:56:15.070 --> 00:56:19.620
It's already protected with, you know, with the token.

00:56:19.619 --> 00:56:26.769
And we could add items to that and,
you know, just like a normal keychain.

00:56:28.199 --> 00:56:30.189
Very, very bad password.

00:56:30.190 --> 00:56:33.769
There you can see the password assistant.

00:56:33.769 --> 00:56:37.360
If you click on this link of course
it will bring up the full thing.

00:56:37.360 --> 00:56:44.329
And definitely encourage your users to use that
if they are still using a password based thing.

00:56:44.329 --> 00:56:50.289
Now one thing to realize about this log in
keychain -- these -- as you're adding --

00:56:50.289 --> 00:56:54.610
if you add passwords these are
not going out to the smart card.

00:56:54.610 --> 00:56:58.000
This is a file-based keychain
inside the user's home directory.

00:56:58.000 --> 00:57:02.860
But the encryption is provided through the card.

00:57:02.860 --> 00:57:05.960
So those things are wrapped with the card.

00:57:07.429 --> 00:57:09.960
Okay. So that's it for the demo.

00:57:09.960 --> 00:57:13.019
And I think we're back to the slides.

00:57:13.019 --> 00:57:23.840
And then I would like to invite
Shawn back up to -- take it away.

00:57:23.840 --> 00:57:25.370
>> Thanks John.

00:57:25.369 --> 00:57:31.969
So as kind of a final take-away, a lot of folks are, you
know, when they're looking into the use of smart cards

00:57:31.969 --> 00:57:35.909
and all -- but they said, you know,
maybe I don't use them all the time,

00:57:35.909 --> 00:57:39.409
or how can I really leverage this across the OS.

00:57:39.409 --> 00:57:43.839
How does it really benefit my user, my customer base.

00:57:43.840 --> 00:57:48.430
The key take-away from all this is the fact
that since we abstracted those smart cards right

00:57:48.429 --> 00:57:55.480
into the credential environment, into keychain, all of
your applications that are leveraging our security services

00:57:55.480 --> 00:58:00.349
for these -- for these -- for certificate
use and key use and all here --

00:58:00.349 --> 00:58:09.860
can be requesting those objects and relying on the fact
that they could potentially be a file-based keychain,

00:58:09.860 --> 00:58:12.860
or they could potentially be a smart card-based keychain.

00:58:12.860 --> 00:58:17.340
Right? As you saw each time we added a
card, it dynamically added a new keychain.

00:58:17.340 --> 00:58:24.220
The applications themselves should really not have to
deal with, is this a smart card I have to interface with?

00:58:24.219 --> 00:58:30.039
On other platforms they have to specifically
target and develop towards the card.

00:58:30.039 --> 00:58:35.500
Here we've taken the approach that with the proper
abstraction on those cards right into the OS,

00:58:35.500 --> 00:58:42.880
your applications that you're developing or the applications
that your users are leveraging should not really care,

00:58:42.880 --> 00:58:46.800
for the most part, whether it's coming from
a file-based or from a smart card-based.

00:58:46.800 --> 00:58:52.750
So hopefully this gives you a good overview and a
little bit in depth on certain aspects on the use

00:58:52.750 --> 00:58:57.000
of smart cards an how they can help in your environment.

00:58:57.000 --> 00:59:02.099
So again, to kind of summarize some of the things that
we have shared with you today is hopefully you're seeing

00:59:02.099 --> 00:59:07.860
about the use of two-factor authentication, smart cards
for something you have and something you know to provide

00:59:07.860 --> 00:59:09.970
that secure and reliable form of authentication.

00:59:09.969 --> 00:59:11.730
To help you meet some of those mandates.

00:59:11.730 --> 00:59:16.400
Help you meet some of the requirements
you have in your own IT environment.

00:59:16.400 --> 00:59:20.380
The extensive support that we have in
the OS, particularly with the addition

00:59:20.380 --> 00:59:23.660
of the unlock of File Vaults and with keychains.

00:59:23.659 --> 00:59:28.960
And the support that we have out of the box for -- in
Leopard coming with PIV, but already that was there

00:59:28.960 --> 00:59:32.260
in 10.4 was the CAC, the Belpic,
and JPKI.

00:59:32.260 --> 00:59:38.010
And there are several smart card vendors that we've
been working with over the last couple of years

00:59:38.010 --> 00:59:43.200
that are already providing access to their
proprietary cards through their own Token Ds.

00:59:43.199 --> 00:59:46.089
And many of them already have those available on the market.

00:59:46.090 --> 00:59:52.930
Some of them haven't really promoted that
capability probably as much as you and we would like.

00:59:52.929 --> 00:59:56.049
So you may want to do some inquiries.

00:59:56.050 --> 00:59:59.780
Either with -- directly with the
smart card vendors or even some of us,

00:59:59.780 --> 01:00:03.780
if you're looking for some of the other card availability

01:00:03.780 --> 01:00:09.200
. So for more information on this if you're on the
developer's side, of course your perfect resource

01:00:09.199 --> 01:00:13.079
on this is Craig Keithley directly for developers

01:00:13.079 --> 01:00:16.840
for the security technology evangelist that Craig is.

01:00:16.840 --> 01:00:22.680
If you are kind of on the IT enterprise customer-side,
I can be a very good resource for you on that.

01:00:22.679 --> 01:00:30.250
And so we kind of cover bother aspects of -- kind of
interfacing with all of you that might be here today.

01:00:30.250 --> 01:00:36.570
Two areas that are really kind of an extension and more of a
clarification in some of these areas that we covered today.

01:00:36.570 --> 01:00:41.610
Later on is Understanding PKI and Certificate
Management on OS X. That too has --

01:00:41.610 --> 01:00:45.220
has had some significant enhancements in 10.5 -- in Leopard.

01:00:45.219 --> 01:00:49.809
And then later on, on Friday, is
leveraging this all related specifically

01:00:49.809 --> 01:00:52.090
with remote access and some of your infrastructure there.