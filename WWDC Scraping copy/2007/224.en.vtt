WEBVTT

00:00:20.550 --> 00:00:26.350
>> I am Sal Soghoian; I'm the product
manager for the Automation Technologies at Apple.

00:00:26.350 --> 00:00:34.070
My title is something that is constantly morphing over
the last ten years of me being at the Mother Ship.

00:00:34.070 --> 00:00:37.560
It's always going to be product manager for Apple Script.

00:00:37.560 --> 00:00:40.440
Because that's what I started off in 1997.

00:00:40.439 --> 00:00:48.259
And I'm also Product Manager for Animator, and Product
Manager for Scripting Bridge, and product manager for --

00:00:48.259 --> 00:00:50.929
a couple other things that you'll know about eventually.

00:00:50.929 --> 00:00:54.750
And -- so -- they had to come up with something.

00:00:54.750 --> 00:00:55.969
And what does Phil call me?

00:00:55.969 --> 00:00:57.210
The Scripting Guy?

00:00:57.210 --> 00:00:58.899
The scripting guru.

00:00:58.899 --> 00:01:04.250
And Steve calls me "Saul, who y'all know."

00:01:04.250 --> 00:01:11.439
So the new title kind of takes it all in, into a nice little
compact thing of Product Manager, Automation Technologies.

00:01:11.439 --> 00:01:13.219
Sounds real familiar.

00:01:13.219 --> 00:01:18.510
So this session is about automation.

00:01:18.510 --> 00:01:25.219
And it's about our vision of automation on the
platform, how we've evolved, and where we're going,

00:01:25.219 --> 00:01:31.039
and where we think the tools that we want
to provide for you should go as well.

00:01:31.040 --> 00:01:32.880
And it's also about you.

00:01:32.879 --> 00:01:36.879
We really implemented this session --
it wasn't part of the original plan --

00:01:36.879 --> 00:01:44.310
but we got so much feedback that we added this session
for you, so that you could tell us what you need.

00:01:44.310 --> 00:01:48.269
You could tell us whether our plans
and insights are accurate.

00:01:48.269 --> 00:01:53.569
Are they going to serve your purposes
for what you have to do with automation.

00:01:53.569 --> 00:01:55.369
And if are we going in the right direction.

00:01:55.370 --> 00:02:02.480
So what you're going to see I'm going give an overview
basically about the automation technologies that we have.

00:02:02.480 --> 00:02:05.650
Well, how they work together, what's the big picture.

00:02:05.650 --> 00:02:09.719
And then I'm going have some gentlemen
come up on stage with me and we're going

00:02:09.719 --> 00:02:13.180
to answer your questions and listen to your feedback.

00:02:13.180 --> 00:02:15.659
Good, and blistering, both.

00:02:15.659 --> 00:02:19.469
With much relish and resolve.

00:02:19.469 --> 00:02:23.240
So any questions so far?

00:02:23.240 --> 00:02:26.100
Okay. Let's begin.

00:02:26.099 --> 00:02:28.370
Let's start with AppleScript.

00:02:28.370 --> 00:02:34.259
Now AppleScript is the premier scripting language
for Mac OS X. It is the native scripting language

00:02:34.259 --> 00:02:38.389
for Mac OS X. It's been around since 1992.

00:02:38.389 --> 00:02:41.899
I feel like I've lived every part of that.

00:02:41.900 --> 00:02:47.289
And it's a tremendous technology and lots
of companies use it to automate what we do.

00:02:47.289 --> 00:02:52.530
Lots of individuals, lots of professionals
use AppleScript and rely on it every day.

00:02:52.530 --> 00:02:56.009
And we love it at Apple, it's just
getting better and better.

00:02:56.009 --> 00:03:02.709
So let's look at some of the thing that's
we've done with AppleScript for Leopard.

00:03:02.710 --> 00:03:04.240
It's plumbing.

00:03:04.240 --> 00:03:12.689
Every so often you get those operating system releases where
you don't see the glorious frosting features or candles.

00:03:12.689 --> 00:03:17.829
We really just go in and, like, tear out
walls and fix plumbing and fix wiring.

00:03:17.830 --> 00:03:21.910
And this is one of those releases
where we really wanted to get in

00:03:21.909 --> 00:03:24.759
and lay the foundation for AppleScript to move forward.

00:03:24.759 --> 00:03:28.929
And there were a lot of things sitting
there that had to be done that weren't done.

00:03:28.930 --> 00:03:35.150
So we really focused on some issues that we
think are glamorous, but a lot of you might not.

00:03:35.150 --> 00:03:37.379
But you consider essential.

00:03:37.379 --> 00:03:40.990
First of all, 64-bit support fdor AppleScript.

00:03:40.990 --> 00:03:45.120
A necessity if we want to keep
living on the platform going forward.

00:03:45.120 --> 00:03:51.110
But you won't see any difference between what
you're doing today with AppleScript and with 64-bit.

00:03:51.110 --> 00:03:55.070
There's many languages and improvements
in the scripting frameworks.

00:03:55.069 --> 00:03:59.909
The Cocoa scripting frameworks
got a lot of revving this year.

00:03:59.909 --> 00:04:02.069
And in this operating system release.

00:04:02.069 --> 00:04:07.560
And that enabled us to accomplish some
pretty interesting and powerful things.

00:04:07.560 --> 00:04:11.469
And it solved a lot of bug issues for our customers as well.

00:04:11.469 --> 00:04:16.870
Mark Picciareli covered it in detail
in his session a couple days ago -- or was it yesterday.

00:04:16.870 --> 00:04:17.939
I can't remember any more.

00:04:17.939 --> 00:04:21.480
It's all one code-blur.

00:04:21.480 --> 00:04:23.860
That's good -- code-blur.

00:04:23.860 --> 00:04:28.530
And so scripting frameworks have been revved considerably.

00:04:28.529 --> 00:04:30.029
We'll look at that.

00:04:30.029 --> 00:04:32.569
And finally, Unicode support.

00:04:32.569 --> 00:04:39.629
With AppleScript, it's a long time of having to coerce
string types back and forth, and then getting caught

00:04:39.629 --> 00:04:43.990
in all kinds of little weird details
about working with text.

00:04:43.990 --> 00:04:49.050
And now we've introduced complete Unicode
support, so it makes it a lot easier.

00:04:49.050 --> 00:04:51.110
And I'll start with that.

00:04:51.110 --> 00:04:54.770
So Unicode support in AppleScript is complete.

00:04:54.769 --> 00:04:58.889
It -- all the text is considered Unicode.

00:04:58.889 --> 00:05:07.050
Any kind of operations you perform on text, like,
concatonating them together it -- in Unicode.

00:05:07.050 --> 00:05:13.520
And you can also use this architecture
to translate between certain characters.

00:05:13.519 --> 00:05:18.180
So if you want the smiley-face guy
character you can actually say,

00:05:18.180 --> 00:05:24.930
I want Unicode I.D., 9787, and you'll get this character.

00:05:24.930 --> 00:05:29.590
So this is a really important thing for
people that work with text and AppleScript.

00:05:29.589 --> 00:05:32.259
And we're very glad that its finally there.

00:05:32.259 --> 00:05:35.170
Let's see, Unicode was, what, four years ago or something?

00:05:35.170 --> 00:05:36.689
So, it's here.

00:05:36.689 --> 00:05:42.779
64-bit support enables us to move
AppleScript forward to where we want to go.

00:05:42.779 --> 00:05:46.719
And we want to move it forward every year and every release.

00:05:46.720 --> 00:05:53.240
But we had to put this in there so that we could be part
of the operating system and get done what we needed to.

00:05:53.240 --> 00:05:56.389
Most of AppleScript will remain
the same for the way you use it.

00:05:56.389 --> 00:06:01.240
There are a couple of APIs that are going
to be changing and they're listed there.

00:06:02.329 --> 00:06:08.789
And for the updated scripting frameworks, quite
a bit was done, especially around SDEFs.

00:06:08.790 --> 00:06:15.420
SDEFs is the way -- it's the mechanism
for defining what a scripting dictionary is.

00:06:15.420 --> 00:06:19.090
And it's been modernized and it's made dynamic now.

00:06:19.089 --> 00:06:27.929
It supports dynamic SDEFs, as well as some
hidden attributes, some synonym elements as well.

00:06:27.930 --> 00:06:30.639
And there's new APIs inside of it.

00:06:30.639 --> 00:06:36.620
So that you can -- it's almost like a little plug-in
architecture where you can introduce better descriptions,

00:06:36.620 --> 00:06:43.079
links to other data, code samples can all now
be part of your dictionary using the new S def.

00:06:43.079 --> 00:06:46.469
And it's really helped make things
so much better for the scripter.

00:06:46.470 --> 00:06:49.240
Because you want to find out the
information you want to find out.

00:06:49.240 --> 00:06:50.610
You're in the middle of writing a script.

00:06:50.610 --> 00:06:54.960
You want the dictionary to provide you
with as much data as it possibly can.

00:06:54.959 --> 00:06:58.549
And this really does modernize that procedure.

00:06:58.550 --> 00:07:07.460
And then we've had a little bit of a problem with
error sensing and error handling since we moved

00:07:07.459 --> 00:07:11.579
over to Mac OS X. Basically we haven't had any.

00:07:11.579 --> 00:07:15.829
And -- and it's been fixed now.

00:07:15.829 --> 00:07:16.959
In Leopard.

00:07:16.959 --> 00:07:22.669
You might notice it when you would get an error
and it would be something like NS receiver --

00:07:22.670 --> 00:07:26.199
blick-black blick-black blick-black -- for

00:07:26.199 --> 00:07:27.849
-- well that's all been fixed now.

00:07:27.850 --> 00:07:30.340
So we have this example here.

00:07:30.339 --> 00:07:33.979
Where I'm asking Xcode to get the name of the front document

00:07:33.980 --> 00:07:39.140
and if there's no front document,
this is what you used to get.

00:07:39.139 --> 00:07:41.050
See, isn't that lovely?

00:07:41.050 --> 00:07:45.900
Receiver evaluation, script error, and then four.

00:07:45.899 --> 00:07:47.479
Doesn't know what it means.

00:07:47.480 --> 00:07:50.520
But now in Leopard that's been fixed and corrected

00:07:50.519 --> 00:07:55.279
so that you actually get back something that's
telling you, hey, Document 1, it's an invalid index.

00:07:55.279 --> 00:07:59.129
There is no Document 1.

00:07:59.129 --> 00:08:00.469
( Applause )

00:08:00.470 --> 00:08:01.840
>> We go for cheap applause.

00:08:01.839 --> 00:08:02.709
We don't care.

00:08:02.709 --> 00:08:04.009
I am totally shameless.

00:08:04.009 --> 00:08:06.370
I have no morality whatsoever, right?

00:08:06.370 --> 00:08:07.389
I'm a Product Manager.

00:08:07.389 --> 00:08:08.289
( Laughter )

00:08:08.290 --> 00:08:10.660
>> Did I say that?

00:08:10.660 --> 00:08:14.430
Okay. I work for you though.

00:08:14.430 --> 00:08:16.319
Don't get me started.

00:08:16.319 --> 00:08:22.649
Okay. So that's a real available thing to have so that you
can actually figure out what's going wrong with your script.

00:08:22.649 --> 00:08:24.509
And we're sorry it took so long.

00:08:24.509 --> 00:08:28.360
But the main thing is we've never
given up on this technology.

00:08:28.360 --> 00:08:30.259
We've never given up advancing it.

00:08:30.259 --> 00:08:32.019
We love it, we believe in it.

00:08:32.019 --> 00:08:35.360
It's going to be with us for a long, long, long time.

00:08:35.360 --> 00:08:38.129
Now we have some new things.

00:08:38.129 --> 00:08:40.450
We didn't, you know, just do plumbing.

00:08:40.450 --> 00:08:43.670
We did add a couple new things that you've been asking for.

00:08:43.669 --> 00:08:46.610
And here's one in particular that I love.

00:08:46.610 --> 00:08:49.860
This is something I really enjoy.

00:08:49.860 --> 00:08:58.830
Coming from the background of being a scripter
for a dozen years or so -- 15, 16 years --

00:08:58.830 --> 00:09:05.600
I always would write scripts for different people and you
put the script on their machine, and they tell you, well,

00:09:05.600 --> 00:09:09.399
it's asking for where Quartz -- gik-gik gik-gik -- is.

00:09:09.399 --> 00:09:15.090
And if they had renamed the application they couldn't
find it, and there were all kinds of problems with trying

00:09:15.090 --> 00:09:18.730
to get scripts to run correctly in a generic way.

00:09:18.730 --> 00:09:24.370
Well, we have a new application object model
that goes a long way to solving this problem.

00:09:24.370 --> 00:09:31.120
So you can -- instead of just saying, tell
application aperture, or tell application mail --

00:09:31.120 --> 00:09:34.919
you can now use these other ways to address the application.

00:09:34.919 --> 00:09:38.979
For example, you can address if
you know where the application is,

00:09:38.980 --> 00:09:41.159
you can address it by a POSIX path.

00:09:41.159 --> 00:09:44.899
Tell application, slash, application slash mail dot app.

00:09:44.899 --> 00:09:52.459
And it will talk -- your script will compile, and the
script will execute based on where the application is.

00:09:52.460 --> 00:09:55.259
You can also now talk to an application.

00:09:55.259 --> 00:10:00.539
You can direct your commands to an application
by the application's bundle identifier.

00:10:00.539 --> 00:10:03.439
And by its four-character code.

00:10:03.440 --> 00:10:06.790
( Applause )

00:10:06.789 --> 00:10:10.079
>> Don't encourage me, I'm telling you.

00:10:10.080 --> 00:10:11.160
Which is really great.

00:10:11.159 --> 00:10:13.689
Because, you know, it's just so much better.

00:10:13.690 --> 00:10:18.120
This way you don't have to worry about
the language, you don't have to worry

00:10:18.120 --> 00:10:20.190
about how they named the file or anything.

00:10:20.190 --> 00:10:24.980
You just say, com dot Apple dot mail,
or the four character code of e-mail.

00:10:24.980 --> 00:10:26.769
Whatever one you want to use.

00:10:26.769 --> 00:10:28.649
And that's really great.

00:10:28.649 --> 00:10:34.370
So this kind of solves the problems that we've
had about making sure that your scripts compile.

00:10:34.370 --> 00:10:37.769
And that you can put them in your
applications with the knowledge

00:10:37.769 --> 00:10:41.370
that they're actually going to work under most situations.

00:10:41.370 --> 00:10:48.509
Now, in addition to this, we've added a couple more
intrinsic properties that work hand in hand with this

00:10:48.509 --> 00:10:52.289
to make it a little bit easier for
you to write scripts that work.

00:10:52.289 --> 00:10:57.329
And so you can get the version of an
application just by asking for the version.

00:10:57.330 --> 00:11:02.250
You can get the I.D. of an application or
its bundle identifier by asking for that.

00:11:02.250 --> 00:11:10.809
And you can also see if the application is running,
and if it's the front most application by just asking

00:11:10.809 --> 00:11:14.459
if application Mail is front most, then do this.

00:11:14.460 --> 00:11:16.290
Otherwise, launch Mail.

00:11:16.289 --> 00:11:19.750
Or if application mail is running,
do this, otherwise launch Mail.

00:11:19.750 --> 00:11:25.509
So no more sub-routines trying to figure out if
an application is running using system events,

00:11:25.509 --> 00:11:29.350
and parsing four-character I.D.s.
It's a simple statement now.

00:11:29.350 --> 00:11:31.610
Which is the way AppleScript works.

00:11:32.840 --> 00:11:34.800
You like that one?

00:11:34.799 --> 00:11:38.649
Please don't throw something.

00:11:38.649 --> 00:11:43.079
Okay now this is what the commands
would look like when you use them.

00:11:43.080 --> 00:11:46.170
You can see in the little purple area,
that's exactly what they look like.

00:11:46.169 --> 00:11:48.539
Very useful stuff.

00:11:48.539 --> 00:11:52.319
I guess if there's one word for this release, it's useful.

00:11:52.320 --> 00:11:59.710
Now something people have been asking for forever,
is the ability to read and write property lists.

00:11:59.710 --> 00:12:03.490
We added the ability to read --
are you going to do it again?

00:12:03.490 --> 00:12:05.769
( Applause )

00:12:05.769 --> 00:12:06.840
>> These guys did the work.

00:12:06.840 --> 00:12:08.710
I'm just taking the glory here.

00:12:08.710 --> 00:12:13.860
So we introduced in Tiger the ability
to read property lists.

00:12:13.860 --> 00:12:17.730
But if you actually wanted to write them
back you could to go to a do shell command

00:12:17.730 --> 00:12:21.060
and use the default framework to get that done.

00:12:21.059 --> 00:12:26.750
No more. We now have the ability to actually
generate property lists on the fly, go in,

00:12:26.750 --> 00:12:30.000
alternative their properties, create
new properties, that kind of stuff.

00:12:30.000 --> 00:12:32.710
So you won't have to use the do shell script any more.

00:12:32.710 --> 00:12:37.100
You can write files that work with your
scripts, you can put them in your own bundle,

00:12:37.100 --> 00:12:39.909
you can write them to user prefs, wherever you want to be.

00:12:39.909 --> 00:12:43.230
It's a great thing to have.

00:12:43.230 --> 00:12:47.670
And we -- this is very important
-- we have updated documentation.

00:12:47.669 --> 00:12:49.279
The documentation --

00:12:49.279 --> 00:12:53.829
( Applause )

00:12:53.830 --> 00:12:54.730
>> Thanks to Steve.

00:12:54.730 --> 00:12:56.110
We have

00:12:56.110 --> 00:13:00.159
current documentation that will be current
with Leopard, which is wonderful of the

00:13:00.159 --> 00:13:03.939
so you will finally be able to
have a reference point to go to.

00:13:03.940 --> 00:13:06.440
See, we're really trying to lay the foundation here.

00:13:06.440 --> 00:13:09.320
We're putting down the roadway,
we're laying down the asphalt,

00:13:09.320 --> 00:13:11.900
we're doing the concrete, the whole thing correctly.

00:13:11.899 --> 00:13:16.809
My hero is the guy who replaced that
span over there that burned down.

00:13:16.809 --> 00:13:20.319
So if we can be that good, it would be wonderful.

00:13:20.320 --> 00:13:21.270
So let's review.

00:13:21.269 --> 00:13:27.189
For AppleScript you have fully integrated unit
code support, 64-bit updated scripting frameworks,

00:13:27.190 --> 00:13:30.510
enhanced application object model, isn't that great?

00:13:30.509 --> 00:13:34.789
Read write Mac OS X property lists,
more reliable folder actions.

00:13:34.789 --> 00:13:36.039
I didn't have time to get into that.

00:13:36.039 --> 00:13:40.909
But yes, it has its own little process
now, and it's running from the file system

00:13:40.909 --> 00:13:42.850
so it should be much more reliable for you.

00:13:42.850 --> 00:13:44.659
Especially on modern volumes.

00:13:44.659 --> 00:13:48.819
Current documentation, and some
extras that I didn't get to mention.

00:13:48.820 --> 00:13:52.760
In the script editor we now have
a string compression command.

00:13:52.759 --> 00:13:53.860
It's in the preferences.

00:13:53.860 --> 00:14:00.769
And what that does is if you have a lot of text in
your scripts and they're taking up this much space

00:14:00.769 --> 00:14:05.899
and you want them to take up this much space, you set
that bit and it collapses all the tabs and returns

00:14:05.899 --> 00:14:12.299
down into slash R, slash T. So you get a nice
little block of text like this in your script.

00:14:12.299 --> 00:14:16.429
There's also -- Image Events now has a pad color property.

00:14:16.429 --> 00:14:20.689
We had the ability to pad, but we
couldn't do anything but black.

00:14:20.690 --> 00:14:22.780
And a lot of people said, duh.

00:14:22.779 --> 00:14:24.429
And we said, oh.

00:14:24.429 --> 00:14:25.620
Pad color property.

00:14:25.620 --> 00:14:26.980
It's in there.

00:14:26.980 --> 00:14:33.060
And there are lots of new scriptable items
within the operating system, including the dock,

00:14:33.059 --> 00:14:37.809
the network system preference pane, and accounts.

00:14:37.809 --> 00:14:44.239
And you'll see applications like iChat that are robustly
scriptable with your own event handlers now.

00:14:44.240 --> 00:14:47.230
So there's a lot going on for AppleScript in Leopard.

00:14:47.230 --> 00:14:48.480
We love the technology.

00:14:48.480 --> 00:14:49.970
It's really moving forward.

00:14:49.970 --> 00:14:51.070
That's AppleScript.

00:14:51.070 --> 00:14:52.550
( Applause )

00:14:52.549 --> 00:14:53.319
>> Great.

00:14:53.320 --> 00:14:56.160
( Applause )

00:14:56.159 --> 00:15:04.740
>> Now. So our vision of automation is we don't just
think about, you know, working with a couple of apps.

00:15:04.740 --> 00:15:11.980
We really want the whole operating system to become
this machine, this machine that you can tie into,

00:15:11.980 --> 00:15:15.639
that you can take the wire and connect it here
and here and here and here -- and let it go

00:15:15.639 --> 00:15:22.889
and run for you and let it give you back some of the
time that you're spending in front of the machine.

00:15:22.889 --> 00:15:28.370
I mean, we can all accumulate money, we can accumulate
-- wait -- we could accumulate all kinds of things.

00:15:28.370 --> 00:15:30.220
But we can't accumulate more time.

00:15:30.220 --> 00:15:32.750
And the only way you get time is automation.

00:15:32.750 --> 00:15:34.950
Automation gives you back some time.

00:15:34.950 --> 00:15:38.700
Whether you waste it watching the
automation run, that's up to you.

00:15:38.700 --> 00:15:43.890
But -- but automation is our vision.

00:15:43.889 --> 00:15:48.919
So we have to figure out a way
in order to spread that around.

00:15:48.919 --> 00:15:53.309
Because as good as AppleScript is, it is just one language.

00:15:53.309 --> 00:15:56.339
It's one set of individuals.

00:15:56.340 --> 00:15:58.060
It's one kind of scope.

00:15:58.059 --> 00:16:03.750
And we have so much more in the operating system
that could take advantage of Apple events.

00:16:03.750 --> 00:16:08.309
It could take advantage of really
nicely scriptable applications.

00:16:08.309 --> 00:16:10.179
And so we had to figure out a way to do this.

00:16:10.179 --> 00:16:17.929
And some very clever minds, nodding your way,
came up with the idea behind Scripting Bridge.

00:16:17.929 --> 00:16:22.959
So the current AppleEvent APIs, if
you wanted to write an Apple event

00:16:22.960 --> 00:16:29.730
in your code you could use some application
control with NS Apple event descriptor,

00:16:29.730 --> 00:16:32.550
you could run scripts with NS AppleScript.

00:16:32.549 --> 00:16:35.159
And you could edit scriptings by using the OSA kit.

00:16:35.159 --> 00:16:37.649
That was your current options.

00:16:37.649 --> 00:16:39.139
Let's take a look at them.

00:16:39.139 --> 00:16:43.059
So if you want to send an Apple event
between your app and somebody else's app

00:16:43.059 --> 00:16:46.379
you could write an NS Apple event descriptor.

00:16:47.490 --> 00:16:52.379
Yeah. It's fast and efficient,
but you know, it's complicated.

00:16:52.379 --> 00:16:58.669
You have to know the four character codes for your app and
for the other guy's app, and they're not published anywhere.

00:16:58.669 --> 00:17:00.620
And you have to figure those things out.

00:17:00.620 --> 00:17:02.279
But it is a very fast code.

00:17:02.279 --> 00:17:04.839
But it's difficult.

00:17:04.839 --> 00:17:07.709
You could use NS AppleScript, which is pretty simple.

00:17:07.710 --> 00:17:15.160
It's basically you take a string, an then you
run the string using the scripting architecture.

00:17:15.160 --> 00:17:16.259
I mean, that's it.

00:17:16.259 --> 00:17:18.910
But it's really hard to scale that.

00:17:18.910 --> 00:17:24.370
It takes longer to execute because it has
to load a bunch of resources into memory.

00:17:24.369 --> 00:17:26.909
And it doesn't scale well, like I said.

00:17:26.910 --> 00:17:30.009
So it works, but it's not always the best.

00:17:30.009 --> 00:17:34.629
Plus you have to know how to write
AppleScript anyway because that string

00:17:34.630 --> 00:17:37.110
that you're putting in there is AppleScript.

00:17:37.109 --> 00:17:39.939
Right? So that's your opportunity.

00:17:39.940 --> 00:17:44.309
Now in Leopard we introduce this new
thing called the Scripting Bridge.

00:17:44.309 --> 00:17:48.200
And it's fast, efficient, and simple.

00:17:48.200 --> 00:17:50.910
And the way you do it is, the first step is,

00:17:50.910 --> 00:17:54.430
you use a little command line utility
that generates some header files.

00:17:54.430 --> 00:18:00.630
And this is what basically the command line looks
like for generating this header file for iTunes.

00:18:00.630 --> 00:18:03.900
You add your header files to your
projects, link the Scripting Bridge

00:18:03.900 --> 00:18:07.890
to your framework and then you start using it.

00:18:07.890 --> 00:18:10.170
It's really -- there is no step three.

00:18:10.170 --> 00:18:12.150
That's basically it.

00:18:12.150 --> 00:18:18.290
And so with this, you can get an attribute, set
an attribute, get an element, create an element,

00:18:18.289 --> 00:18:23.259
call a command -- those kinds of
things -- right from within your code.

00:18:23.259 --> 00:18:28.299
Now let's take a look at the Scripting
Bridge code for multiple languages.

00:18:28.299 --> 00:18:32.109
It's not only for Objective-C,
but it's also for other languages

00:18:32.109 --> 00:18:35.289
in the operating system that are popular with developers.

00:18:35.289 --> 00:18:39.470
So what does it take to get the
name of the current iTunes track?

00:18:39.470 --> 00:18:40.490
What am I playing there?

00:18:40.490 --> 00:18:41.250
I didn't even look.

00:18:41.250 --> 00:18:42.670
Oh. Okay good.

00:18:42.670 --> 00:18:44.740
( Laughter )

00:18:44.740 --> 00:18:45.370
>> Talking Heads.

00:18:45.369 --> 00:18:47.009
That's all right.

00:18:47.009 --> 00:18:52.660
Always got to remember to check your slides
before you put them on the air, right?

00:18:52.660 --> 00:18:59.130
So this is what using Scripting Bridge -- it would look
like to get the name of the current track in Objective-C.

00:18:59.130 --> 00:19:02.710
And you can see you're basically doing some imports,

00:19:02.710 --> 00:19:05.870
you're importing your header file
in the Scripting Bridge framework.

00:19:05.869 --> 00:19:10.089
And then you have this call here and it
-- you're basically instantiating it,

00:19:10.089 --> 00:19:12.349
an then making a call for the current track.

00:19:12.349 --> 00:19:19.609
Not bad. If you want to use Python, you could
use -- the Scripting Bridge with Python,

00:19:19.609 --> 00:19:24.269
which isPyObjC, and do the same kind of thing.

00:19:24.269 --> 00:19:28.639
Send an Apple event over to iTunes
and get back the response.

00:19:28.640 --> 00:19:31.380
You can also do it using Ruby Cocoa.

00:19:31.380 --> 00:19:37.710
And you could also, you know, do it without
Scripting Bridge, which is the old NS AppleScript,

00:19:37.710 --> 00:19:41.259
or you could do the whole thing in AppleScript as well.

00:19:41.259 --> 00:19:42.839
So you could use any of those.

00:19:42.839 --> 00:19:49.389
Your coding options now are AppleScript,
Ruby, Python, Objective-C,

00:19:49.390 --> 00:19:53.470
all of those things you can use
because of the Scripting Bridge.

00:19:53.470 --> 00:20:01.230
So this really makes it easier for developers of normal,
native Mac OS X applications and Web applications

00:20:01.230 --> 00:20:04.599
to create Apple events and send them back and forth.

00:20:04.599 --> 00:20:06.000
And what does that give you?

00:20:06.000 --> 00:20:12.789
That gives you inner connectivity between different
applications and a wonderful user experience for customers

00:20:12.789 --> 00:20:14.099
That's what this is all about.

00:20:14.099 --> 00:20:17.429
It enables you to tie on to other applications.

00:20:17.430 --> 00:20:19.840
Go to other sources within the system.

00:20:19.839 --> 00:20:23.369
Because the system is built upon Apple events.

00:20:23.369 --> 00:20:27.639
And that will never go away in Mac OS X.
It's our messaging architecture.

00:20:27.640 --> 00:20:35.620
And now using Scripting Bridge all this is exposed
to you in a language that you're comfortable writing.

00:20:35.619 --> 00:20:37.989
And you can mix and match.

00:20:37.990 --> 00:20:42.700
So what does this mean for AppleScript and for developers?

00:20:42.700 --> 00:20:45.789
What does the Scripting Bridge mean?

00:20:45.789 --> 00:20:53.319
Well, once upon a time there was a group
of, like, tough play dough guys, right?

00:20:53.319 --> 00:21:01.879
And these guys dreamed about and talked about writing
AppleScript and having scriptable applications, you know?

00:21:01.880 --> 00:21:08.590
That's what's on their mind all the time.

00:21:08.589 --> 00:21:09.009
( Laughter )

00:21:09.009 --> 00:21:14.660
( Applause )

00:21:14.660 --> 00:21:18.690
>> So these guys you know, were trying
to evangelize and trying to evangelize,

00:21:18.690 --> 00:21:21.220
because they knew the power of automation.

00:21:21.220 --> 00:21:23.289
They saw it every day in their lives.

00:21:23.289 --> 00:21:25.180
They saw what it did for people.

00:21:25.180 --> 00:21:27.440
They saw what it did for their customers.

00:21:27.440 --> 00:21:30.519
It gave them speed, accuracy, consistency.

00:21:30.519 --> 00:21:31.819
It was scaleable.

00:21:31.819 --> 00:21:32.769
They loved it.

00:21:32.769 --> 00:21:35.900
And they were trying to get developers
to make their app scriptable,

00:21:35.900 --> 00:21:38.880
which is the number one problem facing automation.

00:21:38.880 --> 00:21:42.210
Get me good, scriptable applications.

00:21:42.210 --> 00:21:46.000
But the problem was these guys were all alone.

00:21:46.000 --> 00:21:52.329
So by creating the Scripting Bridge they were
joined by the guys who write Objective-C,

00:21:52.329 --> 00:21:58.169
and they were joined by of the guys that write Ruby,
and they were joined by the guys that write Python.

00:21:58.170 --> 00:22:05.250
And soon there was enough of them that developers
started paying attention to the idea of automation,

00:22:05.250 --> 00:22:11.039
and the idea of scriptability, and
making their apps Apple-event aware.

00:22:11.039 --> 00:22:17.450
So this is a good thing for non only
AppleScript, but for the entire OS.

00:22:17.450 --> 00:22:21.650
Greater access for all languages deliver some real benefits.

00:22:21.650 --> 00:22:29.250
More scriptable applications, better quality scripting
dictionaries, and more creative workflow solutions.

00:22:29.250 --> 00:22:34.920
Because all the languages can work
together around the magic of the S def,

00:22:34.920 --> 00:22:46.220
and the miracle -- the absolute miracle of Technote 21O6.

00:22:46.220 --> 00:22:46.610
( Applause )

00:22:46.609 --> 00:22:50.009
>> That's a shameless plug if I ever saw one.

00:22:50.009 --> 00:22:52.349
My wife likes the little rear ends on those guys.

00:22:52.349 --> 00:22:59.849
They look so cute and adorable.  The main --
the story here is that this is not taking away

00:22:59.849 --> 00:23:02.909
from any one technology, it's just adding together.

00:23:02.910 --> 00:23:09.090
That's the real power of Mac OS X is in the fact
of the integration that this operating system has.

00:23:09.089 --> 00:23:11.740
That's its strength, that's its power.

00:23:11.740 --> 00:23:16.269
You know, it's almost like a country where you have lots
of different people living in it and they're very creative

00:23:16.269 --> 00:23:19.029
and they're crazy, but lots of stuff gets done.

00:23:19.029 --> 00:23:20.319
Well, that's the way it is here.

00:23:20.319 --> 00:23:23.990
So this is good for everybody.

00:23:23.990 --> 00:23:29.150
Especially -- you're going see more scriptable
apps, like those from the Omni Group,

00:23:29.150 --> 00:23:32.910
like those more scriptable apps, yes, from Apple Computer.

00:23:32.910 --> 00:23:34.050
Especially in Xcode.

00:23:34.049 --> 00:23:38.970
Did you see the scriptable that they put
in Xcode 3 with that environment thing

00:23:38.970 --> 00:23:41.990
in there, you can drag scripts and work flows in?

00:23:41.990 --> 00:23:44.500
Ooh! That is powerful.

00:23:44.500 --> 00:23:45.970
And you can key assign.

00:23:45.970 --> 00:23:48.440
So you can sit there going tick
tick tick tick tick tick ah --

00:23:48.440 --> 00:23:49.580
then grab a donut, man.

00:23:49.579 --> 00:23:50.490
It's great.

00:23:50.490 --> 00:23:55.870
And Adobe has excellent scriptability
in their applications too.

00:23:55.869 --> 00:23:57.389
And so does Microsoft.

00:23:57.390 --> 00:24:01.190
Microsoft's really getting into scriptability.

00:24:01.190 --> 00:24:08.809
So the story because of Scripting Bridge and because of
what we're doing now in Leopard, the story of automation

00:24:08.809 --> 00:24:14.759
in developers and scriptability is really
going to take a giant step forward this year.

00:24:14.759 --> 00:24:18.720
So what's -- what's -- what's going
to happen with these guys?

00:24:18.720 --> 00:24:20.059
Nothing but good.

00:24:20.059 --> 00:24:27.599
And if I had to make a forecast, I'd say that
scriptability is going to go this way in 2008.

00:24:27.599 --> 00:24:30.299
Golf clap?

00:24:30.299 --> 00:24:30.589
Okay.

00:24:30.589 --> 00:24:31.909
( Applause )

00:24:31.910 --> 00:24:35.460
>> Speaking of Microsoft, here's a little side story.

00:24:35.460 --> 00:24:39.490
So you know Microsoft Office, the
new Office that's coming out?

00:24:39.490 --> 00:24:46.410
Well, for years Microsoft has used this language
as its means of controlling its suite of tools,

00:24:46.410 --> 00:24:53.800
Visual Basic. Well, they're dropping Visual Basic
and on the Mac they're going with AppleScript and Automator

00:24:53.799 --> 00:24:59.450
and will be shipping with AppleScript support and
Automator support built in for their products.

00:24:59.450 --> 00:25:09.900
And as a matter of fact, they sponsored a special issue
with Mac Tech that's about 150 page article detailing step

00:25:09.900 --> 00:25:13.700
by step how to convert VB to AppleScript
from Paul Berkowitz.

00:25:13.700 --> 00:25:15.590
I think you might find it interesting.

00:25:15.589 --> 00:25:19.379
Just a little side note and an idea
about the kinds of things that are going

00:25:19.380 --> 00:25:23.710
to be happening for automation on the
Mac platform this year.

00:25:23.710 --> 00:25:26.930
So that's Scripting Bridge.

00:25:26.930 --> 00:25:28.960
Now Automator.

00:25:28.960 --> 00:25:31.740
Automator is a one of a kind tool.

00:25:31.740 --> 00:25:38.509
And when we introduced it in Tiger it was
well received, a lot of people liked it.

00:25:38.509 --> 00:25:45.009
We won an Eddy for Best Productivity
Software, which was really great and we appreciate it.

00:25:45.009 --> 00:25:54.009
And the idea behind Automator was to create a tool that
normal people could put together steps like a recipe

00:25:54.009 --> 00:25:58.710
and have that recipe do something for them on the computer.

00:25:58.710 --> 00:26:05.289
You could take -- so our vision was
to take chunks of functional code

00:26:05.289 --> 00:26:08.599
and put them in these wrappers called actions.

00:26:08.599 --> 00:26:10.949
And the actions could have a little bit of UI

00:26:10.950 --> 00:26:16.569
where the customer could set the
parameters in the particular code source.

00:26:16.569 --> 00:26:23.460
And that you could drag these actions together into
this thing called a workflow and then execute that.

00:26:23.460 --> 00:26:26.660
And it's been very, very successful.

00:26:26.660 --> 00:26:31.060
But it's had some initial limitations
because, you know, it was a 1.0 product.

00:26:31.059 --> 00:26:35.139
We got it out there and it worked good,
but it needed some more advancing.

00:26:35.140 --> 00:26:39.080
And in Leopard we've really matured
the product considerably.

00:26:39.079 --> 00:26:44.879
You might notice this because Auto --
that's Otto -- we're on the Web site.

00:26:44.880 --> 00:26:47.850
We're on the Apple Leopard Web site.

00:26:47.849 --> 00:26:52.319
Yes, we are the feature numbered 17.

00:26:52.319 --> 00:26:54.279
We're the last feature on the page.

00:26:54.279 --> 00:26:57.649
But hey, we're on the page.

00:26:57.650 --> 00:27:02.450
That means that there's 283 other
features that aren't on the page.

00:27:02.450 --> 00:27:08.019
( Applause )

00:27:08.019 --> 00:27:10.089
>> Which means, hey, we're in the top
6 percent of features for Leopard.

00:27:10.089 --> 00:27:11.569
You see how marketing works,

00:27:11.569 --> 00:27:13.259
it's really tricky stuff.

00:27:13.259 --> 00:27:20.000
You've got to stay away from it. So let's take
a look at some of the features in the new Automator

00:27:20.000 --> 00:27:26.900
that are really going to advance this whole concept
of automation and provide you with a set of tools

00:27:26.900 --> 00:27:32.090
that are going to take you in some surprising
and interesting places over the next year.

00:27:32.089 --> 00:27:35.709
The first is that we have, like, Starting Points.

00:27:35.710 --> 00:27:37.509
It's kind of a workflow assistant.

00:27:37.509 --> 00:27:42.309
One of the problems that people often have is they
just don't know how to do that first workflow.

00:27:42.309 --> 00:27:45.099
They don't know how -- well, how do I get started with this?

00:27:45.099 --> 00:27:47.779
I heard this so many times over the last year.

00:27:47.779 --> 00:27:49.619
How do I get started with Automator.

00:27:49.619 --> 00:27:50.419
I tried it.

00:27:50.420 --> 00:27:51.750
It didn't work.

00:27:51.750 --> 00:27:53.980
So we created this thing called Starting Points.

00:27:53.980 --> 00:28:00.180
And it's really like a step by step little tool that guides
you through the process of getting started with a workflow.

00:28:00.180 --> 00:28:02.140
And it looks like this.

00:28:02.140 --> 00:28:10.940
When you open up a new Automator document the sheet drops
down and you have different categories of workflow area.

00:28:10.940 --> 00:28:13.630
Like you have a custom, which just
creates a blank work folder.

00:28:13.630 --> 00:28:18.240
But you have files, folder, music,
audio, photos, and images.

00:28:18.240 --> 00:28:21.329
So if you select one of those there's a couple pop ups.

00:28:21.329 --> 00:28:25.539
It tells you what it does and then it says
well, where's your content coming from?

00:28:25.539 --> 00:28:29.559
So you could choose -- well, I want
it to come from my computer's camera.

00:28:29.559 --> 00:28:31.730
Okay, then what do you want to do with this?

00:28:31.730 --> 00:28:34.620
Well, take my picture when the workflow runs.

00:28:34.619 --> 00:28:40.899
And then when you click choose, it inserts
the appropriate action already set up for you.

00:28:40.900 --> 00:28:45.570
So that's a really nice, handy device
to get you started in work flows.

00:28:45.569 --> 00:28:51.339
And you'll find that a lot of those things can just
be accomplished by answering some simple questions.

00:28:51.339 --> 00:28:55.769
And then when you get the hang of
it, it makes it easier to turn off.

00:28:55.769 --> 00:28:56.759
The thing.

00:28:56.759 --> 00:28:58.629
The feature.

00:28:58.630 --> 00:28:59.670
Yes, that's true.

00:28:59.670 --> 00:29:04.950
So you have categories, files, folder,
music, audio, photos, images, text.

00:29:04.950 --> 00:29:10.100
And you use custom to bypass, or you can disable
this once you're up and running with Automator.

00:29:10.099 --> 00:29:13.099
You can disable it from the application menu.

00:29:13.099 --> 00:29:14.819
That's the first feature.

00:29:14.819 --> 00:29:18.509
The next feature. We streamlined the interface considerably.

00:29:18.509 --> 00:29:24.700
You can get to the things that you want to access,
the bit of information that controls much quicker,

00:29:24.700 --> 00:29:29.590
much easier in this version of Automator 2 than prior.

00:29:29.589 --> 00:29:31.609
And let's take a look at some of the things.

00:29:31.609 --> 00:29:33.789
So here's your basic workflow window.

00:29:33.789 --> 00:29:40.460
One of the things you'll notice right away is that on
the left-hand side we no longer group by application.

00:29:40.460 --> 00:29:43.829
People don't know what application
is responsible for doing something.

00:29:43.829 --> 00:29:51.839
They want to do something with photos so you click on,
like, the photos category, and then all of the actions,

00:29:51.839 --> 00:29:54.970
regardless of application, are displayed there.

00:29:54.970 --> 00:30:02.420
Because it makes a lot more sense to go by categories like
this than it did by just working on a single application.

00:30:02.420 --> 00:30:08.590
But there are also smart folders there that you can
search by certain parameters and location by actions,

00:30:08.589 --> 00:30:11.699
like what is the most relevant,
what are the ones I just added.

00:30:11.700 --> 00:30:16.100
And you can create your own folders and put
your favorite set of actions in them as well

00:30:16.099 --> 00:30:21.579
so that they're always a click away to get to
the actions you need to create your workflow.

00:30:21.579 --> 00:30:27.379
And all of our little views now are pop
in, pop out, or slide in, slide out.

00:30:27.380 --> 00:30:32.660
So you can slide out the description field and slide
it back in by clicking a little button down here

00:30:32.660 --> 00:30:37.590
at the bottom left right there,
and that will send that in and out.

00:30:37.589 --> 00:30:39.079
The same applies for the log.

00:30:39.079 --> 00:30:43.359
The log now pops in from the bottom
by clicking the log button.

00:30:43.359 --> 00:30:47.059
Prior, it was like this thing that
hid down underneath the doc

00:30:47.059 --> 00:30:48.720
And you could never get to it.

00:30:48.720 --> 00:30:55.220
So now it makes it easy to see what's going on
with your workflow as the workflow is progressing.

00:30:55.220 --> 00:30:59.850
And there's also a new pop in field for the variables.

00:30:59.849 --> 00:31:04.459
And this is a table that contains the name of
the variable and then whatever value it has.

00:31:04.460 --> 00:31:08.370
Any variables used by the workflow will appear in this view.

00:31:08.369 --> 00:31:11.869
And I will talk about them in just a second.

00:31:11.869 --> 00:31:14.019
Also, we have a built in Media Picker.

00:31:14.019 --> 00:31:17.900
You can see that it's accessed
from the top left of the tool bar.

00:31:17.900 --> 00:31:21.150
And this allows you to use the
media that's on your computer.

00:31:21.150 --> 00:31:28.190
Whether it's aperture, iPhoto, iTunes, or
movies, if you need to get stuff and bring it

00:31:28.190 --> 00:31:33.240
into your workflow there's now a
built in Media picker, which is great.

00:31:33.240 --> 00:31:39.390
And if you want to hide the library completely, there's
a control in the top left for doing that as well.

00:31:39.390 --> 00:31:44.960
So window management now in Automator
is much better, much quicker, much easier,

00:31:44.960 --> 00:31:48.720
and much smoother to get at the information that you need.

00:31:48.720 --> 00:31:51.819
Well, we took this same idea that
we worked on with the window

00:31:51.819 --> 00:31:57.409
and we encapsulated that as well into the Automator actions.

00:31:57.410 --> 00:32:01.529
So here's an -- excuse me -- here's
an action called scale images.

00:32:01.529 --> 00:32:05.230
And what it does is it takes image files
that are passed to it and scales it

00:32:05.230 --> 00:32:09.529
in some kind of format that you've decided upon.

00:32:09.529 --> 00:32:15.470
Now once it's been used, if you want to see
the results of that action you used to have

00:32:15.470 --> 00:32:20.970
to drag another action called view results,
find it, and then drag it in after it.

00:32:20.970 --> 00:32:28.309
Now we've put a series of data accessors here at the
bottom, you see results, option, and description.

00:32:28.309 --> 00:32:34.889
So if you click the results, you can see the
results of that particular action's last run.

00:32:34.890 --> 00:32:41.880
In this case, it scaled a group of images, so there are
the images, the thumbnails of the images that it scaled.

00:32:41.880 --> 00:32:46.690
Now you can view that particular
results data in a variety of ways too.

00:32:46.690 --> 00:32:51.930
You can view it as a list or paths
to the files that were processed.

00:32:51.930 --> 00:33:00.039
And you can also view it as a list of AppleScript
alias references to the images that were processed.

00:33:00.039 --> 00:33:04.369
And all of this is right there under
that little command within the action.

00:33:04.369 --> 00:33:06.179
You don't have to add anything else.

00:33:06.180 --> 00:33:09.000
The information you need is right there.

00:33:09.000 --> 00:33:13.240
Next to it is another little gel called options.

00:33:13.240 --> 00:33:19.930
And one of the things that's really great about Automator
is you can make it a generic workflow by presenting some

00:33:19.930 --> 00:33:23.330
of the action UI during the workflow execution.

00:33:23.329 --> 00:33:29.289
And you do that by selecting the check box that
says show this action when the workflow runs.

00:33:29.289 --> 00:33:32.190
And to get at that, it's now just a simple click away.

00:33:32.190 --> 00:33:35.110
There's no disclosure triangles necessary.

00:33:35.109 --> 00:33:41.099
And finally, if you want some information about the
action, if you want a description about how to use it

00:33:41.099 --> 00:33:46.109
and what it is, you no longer have to select
it and go down to the bottom of the window.

00:33:46.109 --> 00:33:50.319
The description for the action is right in its own view.

00:33:50.319 --> 00:33:53.639
So all of this information is right there for you.

00:33:53.640 --> 00:33:57.300
It's quick, easy to get to all the times you need.

00:33:57.299 --> 00:34:01.629
It's a new streamlined interface for Automator

00:34:01.630 --> 00:34:03.750
Next, workflow variables.

00:34:03.750 --> 00:34:07.069
Now this is where we really start upping the power.

00:34:07.069 --> 00:34:10.289
You know, one of the nice things about
the Animator is its simple to use.

00:34:10.289 --> 00:34:14.539
You drag some images in, you select
a scale thing, you do this --

00:34:14.539 --> 00:34:19.050
you run, it's done, you can save it and
-- but you can never really customize it.

00:34:19.050 --> 00:34:24.240
For example, it was hard to try to
get the files named a certain way.

00:34:24.239 --> 00:34:27.409
Or I want the current date attached to a file name.

00:34:27.409 --> 00:34:31.569
Or I want it to use this folder instead
of the one that's on the pop up.

00:34:31.570 --> 00:34:35.660
But I'm not sure what that folder
would be on the other user's machine.

00:34:35.659 --> 00:34:40.739
So it was harder to generalize work flows
with the first generation of Automator.

00:34:40.739 --> 00:34:47.979
And now using workflow variables, it allows you to
create variables and use them throughout the workflow,

00:34:47.980 --> 00:34:51.760
and the information gets passed from action to action.

00:34:51.760 --> 00:34:53.190
Let's take a look.

00:34:53.190 --> 00:34:59.849
You reuse this information throughout the
workflow, and you can also use it to generate things

00:34:59.849 --> 00:35:03.730
like paths, user information, system information.

00:35:03.730 --> 00:35:06.829
So current IP address to the machine.

00:35:06.829 --> 00:35:14.049
Users dot Mac name, users last name, that kind of stuff
can be generated so that the work flows you create

00:35:14.050 --> 00:35:21.210
and use in your applications will work on multiple
machines regardless of how the user has them set up.

00:35:21.210 --> 00:35:25.730
Now workflow variables are scattered
throughout the entire interface.

00:35:25.730 --> 00:35:27.690
They're always just a simple drag away.

00:35:27.690 --> 00:35:29.700
So let's look at some of the places.

00:35:29.699 --> 00:35:35.230
There's a new gel here at the top
left that's right next to actions.

00:35:35.230 --> 00:35:38.909
Actions -- if you click the actions gel
you see all the actions in the application.

00:35:38.909 --> 00:35:45.149
If you click the variables gel, you see all the
variables that are installed in Automator as well.

00:35:45.150 --> 00:35:50.460
And on the left-hand side underneath that you
can see the different categories of variables.

00:35:50.460 --> 00:35:57.360
There's date and time, location, system tech data,
utilities, user information, that kind of thing.

00:35:57.360 --> 00:36:03.590
And when you select a particular category here
at locations, you can see that the variables

00:36:03.590 --> 00:36:07.570
for them appear in this column to the right.

00:36:07.570 --> 00:36:11.539
Some of the variables have the little
gear meaning they're smart variables.

00:36:11.539 --> 00:36:15.259
They generate data based upon a certain parameter.

00:36:15.260 --> 00:36:20.160
And some of them are customizable, and some of
them are empty and you could use them yourself,

00:36:20.159 --> 00:36:28.719
like the new path variable there with the blue V. You
could indicate your own path and use that in the workflow.

00:36:28.719 --> 00:36:38.329
Variables when used within actions can be used
on pop up menus, especially those for paths.

00:36:38.329 --> 00:36:43.840
They can also be used in text fields, as you can see
here where the name of the file will be the guest's name,

00:36:43.840 --> 00:36:46.480
and then today, slash, then today's date.

00:36:46.480 --> 00:36:52.150
And you can instantiate variables to grab the
contents of a variable by just dragging the variable

00:36:52.150 --> 00:36:56.700
into the workflow area, and you'll see
this action called set value of variable.

00:36:56.699 --> 00:36:58.939
That's mark number four there.

00:36:58.940 --> 00:37:03.840
So you can use variables right in the workflow.

00:37:03.840 --> 00:37:11.570
And as well, you can monitor and edit the variables that
are in your workflow that appear in the variable table

00:37:11.570 --> 00:37:16.830
that I told you about earlier, where you have the
various variables and their value is indicated.

00:37:16.829 --> 00:37:19.500
And you can access that through the little pop up control.

00:37:19.500 --> 00:37:24.360
And when you select a variable and
control-click it, you can pop up its edit window.

00:37:24.360 --> 00:37:27.410
This particular variable doesn't have much to edit.

00:37:27.409 --> 00:37:31.889
But any kind of properties that the variable have
will appear in one of these little pop up menus.

00:37:31.889 --> 00:37:39.730
So workflow variables can really change the way that you use
Automator and makes it so much easier to customize things.

00:37:39.730 --> 00:37:46.510
You can store data in them, you can generate
data, runtime, do runtime variables like paths,

00:37:46.510 --> 00:37:49.130
user information, and system information.

00:37:49.130 --> 00:37:51.470
So that's workflow variables.

00:37:51.469 --> 00:37:52.599
That's a lot, isn't it?

00:37:52.599 --> 00:37:53.849
It's coming on.

00:37:53.849 --> 00:37:56.569
Now here's the one that's very popular.

00:37:56.570 --> 00:37:58.430
It was much requested.

00:37:58.429 --> 00:38:04.690
What do you do if you're trying to automate an
application that doesn't have a scripting dictionary.

00:38:04.690 --> 00:38:09.659
What do you do if the application has a
dictionary but it's missing some things.

00:38:09.659 --> 00:38:15.679
What do you do if there's a dialogue that
comes up and you have to press a button.

00:38:15.679 --> 00:38:23.369
Well, we have a new feature in Automator 2, and
it's called -- an action called Watch Me Do.

00:38:23.369 --> 00:38:29.500
And it's basically UI recording and playback,
or it acts like a virtual user action.

00:38:29.500 --> 00:38:32.329
And the way it works is like this.

00:38:32.329 --> 00:38:36.989
It does interaction between dialogues
and windows, it will control actions

00:38:36.989 --> 00:38:41.259
that aren't scriptable, and it works like this.

00:38:41.260 --> 00:38:46.790
So when you press the record button, a
new action is included into the workflow.

00:38:46.789 --> 00:38:48.690
You get this little floating window.

00:38:48.690 --> 00:38:52.990
When you're done doing what you want, you
click the stop button on it and everything

00:38:52.989 --> 00:38:56.319
that you did is now represented in this new action.

00:38:56.320 --> 00:38:58.490
This action is self contained.

00:38:58.489 --> 00:39:03.409
You can save it, put it in your workflow,
drag it into another workflow if you want.

00:39:03.409 --> 00:39:05.849
In this particular case, this actually works.

00:39:05.849 --> 00:39:07.799
You can do this on your copy of Leopard.

00:39:07.800 --> 00:39:16.330
I recorded switching -- using the system preference
start up disc and I switched back to my Tiger partition.

00:39:16.329 --> 00:39:17.549
And I recorded the whole thing.

00:39:17.550 --> 00:39:20.950
So I made myself just a little
double-clickable tool to do that.

00:39:20.949 --> 00:39:31.319
And when this is run in Automator, you get it
playing back everything that you would do by hand.

00:39:31.320 --> 00:39:33.230
Just like that.

00:39:33.230 --> 00:39:34.539
Very cool.

00:39:34.539 --> 00:39:40.699
( Applause )

00:39:40.699 --> 00:39:41.559
>> Thank you.

00:39:41.559 --> 00:39:47.820
And now this technology relies upon the
accessible frameworks that are part of Mac OS X.

00:39:47.820 --> 00:39:51.300
So you know, you have to have that turned on.

00:39:51.300 --> 00:39:55.000
And that's in the accessible system preference.

00:39:55.000 --> 00:39:57.219
And -- or universal access system preference.

00:39:57.219 --> 00:40:00.189
You have to turn on support for assistive devices.

00:40:00.190 --> 00:40:05.460
Now be aware that not all applications
support accessibility equally.

00:40:05.460 --> 00:40:09.710
That's an ongoing process that's
getting better as time goes on.

00:40:09.710 --> 00:40:16.039
And so just if you do come across a glitch it might
not be recordable because of support for accessibility.

00:40:16.039 --> 00:40:20.130
In which case you can then convince
your developer that I really need this.

00:40:20.130 --> 00:40:23.050
If you're not going to give me this,
then give me scripting dictionary.

00:40:23.050 --> 00:40:26.289
Otherwise I will camp out on your
yard and I will never go away.

00:40:26.289 --> 00:40:28.619
All right.

00:40:28.619 --> 00:40:32.599
There's one more thing with Automator
that's really the knock out feature.

00:40:32.599 --> 00:40:36.230
I think it's the hidden feature of this release.

00:40:36.230 --> 00:40:38.969
And it's called the Automator frameworks.

00:40:38.969 --> 00:40:44.109
So Automator appeals to the users,
whether they're tech geeks,

00:40:44.110 --> 00:40:48.590
or whether they're normal people, or
whether they're your father-in-law.

00:40:48.590 --> 00:40:52.590
You can create workflows and run workflows
and do incredible things with them.

00:40:52.590 --> 00:40:53.900
We've seen that happen.

00:40:53.900 --> 00:41:00.630
You can build documents , you can download images,
you can process any kind of data that you want.

00:41:00.630 --> 00:41:06.240
But can you take advantage of the power
of Automator within your own application.

00:41:06.239 --> 00:41:12.939
You're building an application and you go, wow, I would
really like to have that ability in my application as well.

00:41:12.940 --> 00:41:16.659
But man, the amount of code I would
have to write for that is phenomenal.

00:41:16.659 --> 00:41:21.949
Or you might want to have the ability
of Quartz Composer in your application,

00:41:21.949 --> 00:41:25.889
put the amount of code you would
have to write is just too daunting.

00:41:25.889 --> 00:41:27.369
There's ways to do that now.

00:41:27.369 --> 00:41:30.549
We have an Automator framework that has three components.

00:41:30.550 --> 00:41:34.610
AM Workflow, and AM Workflow controller.

00:41:34.610 --> 00:41:40.240
These allow you to take an Automator workflow
and make it part of your application.

00:41:40.239 --> 00:41:46.279
So you can have a button in your UI that's
attached to an Automator workflow and executes.

00:41:46.280 --> 00:41:48.100
You do that with AM Workflow.

00:41:48.099 --> 00:41:55.730
If you want to pass data into that workflow or
change the status of a variable, or insert an action

00:41:55.730 --> 00:42:03.840
or reorder the actions, then AM Workflow controller will
allow you to do that with your installed workflows as well.

00:42:03.840 --> 00:42:09.559
And then a third component of the Automator
frameworks is this thing called AM Workflow view.

00:42:09.559 --> 00:42:12.559
And it allows you to take the Automator view --

00:42:12.559 --> 00:42:18.039
that workflow view that's in Automator --
and put it into your own application UI.

00:42:18.039 --> 00:42:20.150
So let's take a quick look at that.

00:42:20.150 --> 00:42:22.639
Here's run Automator workflow, here's my app.

00:42:22.639 --> 00:42:24.619
I put a button up in the top left.

00:42:24.619 --> 00:42:31.179
I want to be able to take a simple video snap shot
using the architecture and the operating system.

00:42:31.179 --> 00:42:36.710
Do I need to learn how to write that code for
that particular framework, the video framework?

00:42:36.710 --> 00:42:43.159
No. I can attach a workflow that
contains the take video snap shot action.

00:42:43.159 --> 00:42:50.029
And then my user clicks that button, the workflow
executes, it brings up the thing, takes the picture,

00:42:50.030 --> 00:42:55.090
an then gives me the path to the picture that was
taken, and then I can put it into my application.

00:42:55.090 --> 00:43:00.300
I didn't have to write any of the video code or any of
the video handlers, or access any of those frameworks.

00:43:00.300 --> 00:43:09.260
All I did to use AM Workflow to be
able to run an Automator action.

00:43:09.260 --> 00:43:11.750
( Applause )

00:43:11.750 --> 00:43:14.039
>> It's not so much the applause I was thinking about.

00:43:14.039 --> 00:43:17.429
It's just what that really is.

00:43:17.429 --> 00:43:22.899
That is if it's what I think it is, it's dangerous.

00:43:22.900 --> 00:43:30.730
So AM Workflow view takes this whole idea about
incorporating Automator in your app one more step.

00:43:30.730 --> 00:43:39.159
Can you imagine being able to take this
view here out of Automator and move it right

00:43:39.159 --> 00:43:44.480
into your own application so it becomes part of your UI.

00:43:44.480 --> 00:43:52.940
Your customers can create their own Automator workflows,
save them, open them, edit them, right from within your app.

00:43:52.940 --> 00:43:55.480
They don't have to leave your application.

00:43:55.480 --> 00:44:01.929
And you can choose whether you want your actions to
be there, or whether you want, you know, different --

00:44:01.929 --> 00:44:05.799
different company's actions, Finder
actions in there as well.

00:44:05.800 --> 00:44:08.250
It's up to you what you want to do with that.

00:44:08.250 --> 00:44:14.599
But combine all of this power together and now you
basically have an application plug-in architecture

00:44:14.599 --> 00:44:19.009
to the entire operating system with no code writing.

00:44:19.010 --> 00:44:22.480
In other words, that's it right there.

00:44:22.480 --> 00:44:28.449
In other words, if I want to add Quartz Composer into my
application, I don't have to write Quartz Composer code,

00:44:28.449 --> 00:44:33.849
all I have to do is use AM Workflow and AM
Workflow controller and I can incorporate an action

00:44:33.849 --> 00:44:36.779
that has Quartz Composer actions built into it.

00:44:36.780 --> 00:44:41.800
If I want to have a Media Picker in my application
I don't have to write Media Picker code.

00:44:41.800 --> 00:44:45.430
All I have to do is incorporate
AM Workflow to run a workflow

00:44:45.429 --> 00:44:49.259
that contains choose image or choose photo, or choose movie.

00:44:49.260 --> 00:44:52.940
And I get the Media Picker automatically,
because Automator handles it.

00:44:52.940 --> 00:44:58.679
As a matter of fact if I want some system services
like burning a disc, using Spotlight, using the Finder,

00:44:58.679 --> 00:45:01.409
and I want those in my app, I don't
have to write the code for them.

00:45:01.409 --> 00:45:03.809
All I have to do is enable running a workflow.

00:45:03.809 --> 00:45:07.070
As a matter of fact, I can take any third party app

00:45:07.070 --> 00:45:12.140
that supports Automator actions
and have them inside of my own app.

00:45:12.139 --> 00:45:16.199
Whether it comes from Apple or whether
it comes from some other company.

00:45:16.199 --> 00:45:21.219
I am -- I can take their knowledge and their
expertise and make it part of the experience

00:45:21.219 --> 00:45:25.000
that my customers have on my application.

00:45:25.000 --> 00:45:30.559
It's a plug-in framework that's extremely
powerful and it's all about automation.

00:45:30.559 --> 00:45:34.469
It's all about letting your customers about what they want.

00:45:34.469 --> 00:45:39.959
Because once they start using your application
this way, they're never going to leave you.

00:45:39.960 --> 00:45:45.670
They're going to stay with you through every
revision and everything you do unless you break it.

00:45:45.670 --> 00:45:48.269
In which case they'll start looking for somebody else.

00:45:48.269 --> 00:45:50.659
But people don't have enough time.

00:45:50.659 --> 00:45:54.399
They are going to stay with something that works for them.

00:45:54.400 --> 00:45:55.769
In America, we say it.

00:45:55.769 --> 00:45:57.929
If it ain't broke, don't fix it.

00:45:57.929 --> 00:46:00.489
Once you give them automation, they're yours.

00:46:00.489 --> 00:46:03.129
You have loyal customers forever.

00:46:03.130 --> 00:46:09.079
And this is a brand new and exciting way
to take automation to the next level.

00:46:09.079 --> 00:46:11.549
So Automator in Leopard.

00:46:11.550 --> 00:46:17.700
We have starting points, a new stream lined interface,
workflow variables, UI recording and playback,

00:46:17.699 --> 00:46:21.389
workflow looping, which I didn't
get a chance to get into, dozens,

00:46:21.389 --> 00:46:27.000
30 or so new actions, Automator
frameworks, that's Automator.

00:46:27.000 --> 00:46:34.289
So what's the future of automation on Mac OS X?

00:46:34.289 --> 00:46:36.829
Well, the future's here.

00:46:36.829 --> 00:46:37.860
It's in Leopard.

00:46:37.860 --> 00:46:43.370
All this work that we're doing, the ground work that we're
laying, the roads and the pipes that we're laying down

00:46:43.369 --> 00:46:48.940
and the enabling architectures that we're
putting in place with Automator and AppleScript

00:46:48.940 --> 00:46:54.220
and Scripting Bridge are going to set the
pathway for you to take off and start using this.

00:46:54.219 --> 00:46:59.279
And delivering it to your customers
and taking advantage of it yourself.

00:46:59.280 --> 00:47:04.040
So as far as I can see, it's going to be a great day.

00:47:04.039 --> 00:47:06.989
This is going to be a wonderful year.

00:47:06.989 --> 00:47:13.919
And to listen to what you think I'm going bring some
people up here with me to share this experience.

00:47:13.920 --> 00:47:14.389
Thank you.