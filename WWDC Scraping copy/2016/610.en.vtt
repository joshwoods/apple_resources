WEBVTT

00:00:07.516 --> 00:00:17.500
[ Music ]

00:00:30.516 --> 00:00:35.246
[ Applause ]

00:00:35.746 --> 00:00:36.366
>> Hello, everyone.

00:00:37.006 --> 00:00:38.326
And welcome to What's
New in SpriteKit.

00:00:39.036 --> 00:00:40.836
I'm Ross. I'm an engineer here

00:00:40.836 --> 00:00:42.386
in the Games Technology
Team at Apple.

00:00:42.386 --> 00:00:43.836
And I'm really excited
to be able

00:00:43.836 --> 00:00:50.066
to show you what we've been
working on for the past year.

00:00:50.696 --> 00:00:52.516
Before we jump into talking

00:00:52.516 --> 00:00:54.496
about the new features
we're introducing this year,

00:00:54.746 --> 00:00:57.016
I'd like to take a moment to
quickly recap what SpriteKit is

00:00:57.016 --> 00:00:59.736
for anyone who may not
be familiar with it.

00:01:01.086 --> 00:01:04.096
So, SpriteKit is our 2D
graphics framework for games.

00:01:04.786 --> 00:01:07.356
It's designed to be highly
flexible and super easy

00:01:07.356 --> 00:01:10.196
to use while still
offering great performance.

00:01:10.256 --> 00:01:12.636
So, there are as few barriers
as possible between you

00:01:12.636 --> 00:01:14.196
and the great games
that you want to make.

00:01:15.726 --> 00:01:19.586
It's supported across all of our
platforms including iOS, macOS,

00:01:19.956 --> 00:01:22.206
tvOS and this year
we're proud to say

00:01:22.206 --> 00:01:24.236
that is available
on watchOS as well.

00:01:25.876 --> 00:01:27.826
Any app, I know,
isn't that awesome?

00:01:29.201 --> 00:01:31.201
[ Applause ]

00:01:31.386 --> 00:01:33.726
Any App that uses SpriteKit
automatically gets access

00:01:33.726 --> 00:01:35.296
to the latest version of
the framework available

00:01:35.296 --> 00:01:37.456
without needing to be
rebuilt and redeployed,

00:01:37.456 --> 00:01:38.486
so you're always up-to-date.

00:01:38.716 --> 00:01:41.706
And it's naturally integrated
with Swift, so you can use it,

00:01:41.956 --> 00:01:44.106
all these great features,
from our newest language.

00:01:45.486 --> 00:01:48.636
But the framework is only
half of the SpriteKit picture.

00:01:49.396 --> 00:01:52.126
The other half is our Xcode
integrated live editor

00:01:52.246 --> 00:01:55.086
which lets you preview your
scenes directly from the editor

00:01:55.086 --> 00:01:56.686
and lay them out visually.

00:01:57.786 --> 00:02:00.176
It offers timeline-based
animation which allows you

00:02:00.176 --> 00:02:01.876
to bring life to
your games along

00:02:01.876 --> 00:02:03.316
with our robust particle editor.

00:02:04.636 --> 00:02:06.316
It's fully integrated
with the Asset Catalog,

00:02:06.316 --> 00:02:09.006
so you can leverage
features like app thinning

00:02:09.256 --> 00:02:10.735
and on-demand resources
without having

00:02:10.735 --> 00:02:11.686
to jump through any hoops.

00:02:12.056 --> 00:02:14.226
And this year we're
introducing tile ap editing

00:02:14.226 --> 00:02:16.276
and GameplayKit integration,
both of which we'll talk

00:02:16.276 --> 00:02:17.136
about a little later on.

00:02:17.846 --> 00:02:21.826
And finally, SpriteKit is fully
Metal-backed on all devices

00:02:21.826 --> 00:02:24.266
that support it,
so you get access

00:02:24.266 --> 00:02:26.346
to its great performance
benefits automatically

00:02:26.346 --> 00:02:27.496
without having to do anything.

00:02:28.106 --> 00:02:32.156
So, this year we're continuing
to introduce great new features

00:02:32.156 --> 00:02:33.336
that make it easier
than ever for you

00:02:33.336 --> 00:02:35.496
to make great games
for Apple platforms.

00:02:35.746 --> 00:02:39.686
So, without further ado,
let's jump into what's new.

00:02:40.066 --> 00:02:41.916
Now, normally with
sessions like this one,

00:02:41.916 --> 00:02:43.666
we'd put the tools
stuff at the end.

00:02:43.666 --> 00:02:45.506
But today we're going to turn
that on its head a little bit.

00:02:45.506 --> 00:02:48.486
And that's because the
editor is absolutely integral

00:02:48.486 --> 00:02:50.346
to getting the most
out of SpriteKit.

00:02:50.856 --> 00:02:52.786
And this year we've got some
really exciting additions.

00:02:52.786 --> 00:02:55.586
So, let's start with
the scene outline view.

00:02:57.216 --> 00:02:59.376
Knowing what's in your
scene and how objects relate

00:02:59.376 --> 00:03:01.146
to one another is
extremely important

00:03:01.146 --> 00:03:02.276
for effective scene management.

00:03:03.456 --> 00:03:04.926
In Xcode 7, this
was accomplished

00:03:04.926 --> 00:03:05.626
through the Jump Bar.

00:03:06.566 --> 00:03:09.146
The Jump Bar is designed to
make navigating between files

00:03:09.146 --> 00:03:11.506
in your workspace easier but
when you're in SpriteKit,

00:03:11.876 --> 00:03:14.206
it also has all the
nodes in your hierarchy.

00:03:14.616 --> 00:03:17.246
And this is great for
navigating through those nodes

00:03:17.306 --> 00:03:19.506
but it would be nice if we
could see the entire hierarchy

00:03:19.506 --> 00:03:20.486
at the same time.

00:03:21.796 --> 00:03:25.976
So, now in Xcode 8 you can,
with the new scene outline view.

00:03:26.876 --> 00:03:28.726
It's a new panel that allows
you to see all the nodes

00:03:28.726 --> 00:03:30.186
in your scene and
their parent-child

00:03:30.186 --> 00:03:32.106
relationship simultaneously.

00:03:32.796 --> 00:03:34.776
In addition to being
able to select nodes,

00:03:34.776 --> 00:03:38.156
you can also rename them and
remove them from the scene.

00:03:38.156 --> 00:03:41.776
You can also change their
parent-child relationship

00:03:41.776 --> 00:03:43.906
of the nodes by dragging
them around,

00:03:43.936 --> 00:03:47.406
much like you reorder
keynotes, slides in keynotes.

00:03:49.536 --> 00:03:52.276
Drag a child onto another
node to make it a child,

00:03:52.806 --> 00:03:54.986
drag a node onto another node
to make it a child of that node

00:03:55.546 --> 00:03:57.376
or drag a child out
from its parent

00:03:57.586 --> 00:03:58.546
to break that relationship.

00:03:59.006 --> 00:04:02.996
We also have the ability
to lock and hide nodes.

00:04:03.856 --> 00:04:07.036
Locked nodes can't be modified
or selected from the scene view.

00:04:07.036 --> 00:04:09.766
And that can make navigating
your scene much easier

00:04:09.766 --> 00:04:12.996
when you have a lot of notes and
it's getting kind of cluttered.

00:04:13.086 --> 00:04:14.616
And the same with hiding.

00:04:14.616 --> 00:04:17.495
It's great for when you
have really large objects

00:04:17.815 --> 00:04:20.356
and you want to access some
nodes that might be behind them.

00:04:21.466 --> 00:04:24.226
So, all these features make the
scene outline view really useful

00:04:24.226 --> 00:04:27.266
and it's making, makes managing
your scene much, much easier.

00:04:27.596 --> 00:04:31.366
So, next I'd like to talk a
little bit about how we've begun

00:04:31.366 --> 00:04:33.696
to integrate the GameplayKit
into the SpriteKit editor.

00:04:35.236 --> 00:04:36.676
So, last year we
introduced GameplayKit,

00:04:37.286 --> 00:04:39.746
a brand-new framework that
offers ready to use solutions

00:04:39.836 --> 00:04:42.176
for problems that are commonly
encountered when creating games.

00:04:43.286 --> 00:04:46.396
One of the features included
last year is entities

00:04:46.396 --> 00:04:48.666
and components, which is a
design pattern that's focused

00:04:48.666 --> 00:04:50.436
on modularity and reusability.

00:04:51.456 --> 00:04:55.956
Components encapsulate behavior
and you assign them to objects

00:04:55.956 --> 00:05:01.096
or entities to change
their behavior.

00:05:01.726 --> 00:05:04.926
And you do this without
having to write specific code

00:05:04.926 --> 00:05:06.366
for every object in your scene.

00:05:06.856 --> 00:05:09.246
Now, we're not going
to go into great detail

00:05:09.246 --> 00:05:12.906
about how these work but it's
useful to think of components

00:05:13.016 --> 00:05:16.256
as code building blocks that
you assemble in different ways

00:05:16.256 --> 00:05:18.296
to create objects that
behave in different ways.

00:05:18.536 --> 00:05:23.106
Typically, you might have a
component that represents health

00:05:23.106 --> 00:05:24.676
for objects that can be damaged.

00:05:25.476 --> 00:05:28.336
Or a component that has
physics data for objects

00:05:28.336 --> 00:05:29.416
that can collide
with one another.

00:05:30.016 --> 00:05:32.416
Or a component that
allows an object

00:05:32.416 --> 00:05:33.936
to be a player controlled
by player input.

00:05:33.936 --> 00:05:39.206
Components are really
powerful and allow you

00:05:39.206 --> 00:05:41.606
to control how your
objects behave.

00:05:42.356 --> 00:05:46.006
And now we're bringing
entities and components

00:05:46.116 --> 00:05:47.226
into the SpriteKit editor.

00:05:48.296 --> 00:05:51.536
You can assign components that
you create directly to the nodes

00:05:51.536 --> 00:05:53.776
from within your scene
from the new entities

00:05:53.776 --> 00:05:55.336
and components panel
of the inspector.

00:05:56.506 --> 00:05:58.356
Additionally, you can
choose to expose properties

00:05:58.356 --> 00:05:59.726
on the custom components
you create

00:06:00.406 --> 00:06:02.086
and those will then
appear in the editor

00:06:02.086 --> 00:06:03.506
and you can tweak
them for each node.

00:06:05.076 --> 00:06:06.206
The best part about all this is

00:06:06.206 --> 00:06:08.426
if you're already using
GameplayKits, entities

00:06:08.426 --> 00:06:10.596
and components, we're now
doing all the hard work for you

00:06:10.596 --> 00:06:12.756
and you can do all of your
object composition straight

00:06:12.756 --> 00:06:15.476
from the editor.

00:06:16.176 --> 00:06:16.726
Another great feature

00:06:16.726 --> 00:06:19.006
that GameplayKit
introduced was pathfinding.

00:06:19.656 --> 00:06:22.686
Pathfinding is all about finding
the best route from point A

00:06:22.686 --> 00:06:25.066
to point B and it does this

00:06:25.066 --> 00:06:27.186
by operating what's
called a navigation graph.

00:06:28.696 --> 00:06:30.376
Navigation graphs
are collections

00:06:30.376 --> 00:06:33.336
of nodes joined together
by connections.

00:06:33.726 --> 00:06:37.946
And they describe how an object
can move through your scene

00:06:38.286 --> 00:06:39.716
without colliding
with any obstacles.

00:06:39.936 --> 00:06:43.596
And now we've integrated
navigation graphs

00:06:43.676 --> 00:06:44.746
into the SpriteKit editor.

00:06:45.206 --> 00:06:47.796
So, you can create and edit
them directly in your scene.

00:06:48.596 --> 00:06:50.556
You can add and remove
navigation nodes

00:06:50.556 --> 00:06:52.276
and make connections
between them simply

00:06:52.276 --> 00:06:53.376
by clicking in the editor.

00:06:53.856 --> 00:06:56.626
And you can leverage the
graph you create in code.

00:06:57.776 --> 00:06:59.296
Creating the graph this
way allows you to quickly

00:06:59.296 --> 00:07:01.926
and easily define how entities
can navigate your scene,

00:07:01.926 --> 00:07:03.386
making pathfinding a breeze.

00:07:03.386 --> 00:07:07.426
So, now let's talk a little bit
about a feature that helps you,

00:07:07.466 --> 00:07:09.776
yeah I know, it's
pretty awesome, isn't it?

00:07:10.516 --> 00:07:12.766
[ Applause ]

00:07:13.266 --> 00:07:14.526
Now to talk a little
bit about a feature

00:07:14.526 --> 00:07:15.986
that helps you get the most
out of your performance

00:07:15.986 --> 00:07:19.616
of your game, the FPS
performance gauge.

00:07:19.896 --> 00:07:22.036
You may have used the
FPS report in Xcode 7.

00:07:22.916 --> 00:07:24.656
As you're running your App,
you're provided a number

00:07:24.656 --> 00:07:26.346
of real-time performance
statistics,

00:07:26.406 --> 00:07:31.236
including your frame
rate, GPU utilization,

00:07:33.136 --> 00:07:34.586
and CPU/GPU frame time.

00:07:35.116 --> 00:07:37.466
And this is really helpful
for analyzing performance

00:07:37.556 --> 00:07:43.726
but further granularity
would be great.

00:07:43.956 --> 00:07:47.236
Now in Xcode 8, you get,
also get a timeline history

00:07:47.316 --> 00:07:49.696
of your SpriteKit apps time,

00:07:49.766 --> 00:07:51.696
frame time for both
the CPU and the GPU.

00:07:52.616 --> 00:07:55.346
Additionally, it breaks down
the CPU time so you're able

00:07:55.346 --> 00:07:57.106
to see how much time is
being spent rendering,

00:07:57.546 --> 00:08:00.326
running the update loop,
evaluating the actions

00:08:00.326 --> 00:08:01.816
of physics and idle time.

00:08:02.306 --> 00:08:05.506
This information can be
immensely useful in determining

00:08:05.506 --> 00:08:07.836
where you need to focus your
efforts to improve performance.

00:08:08.876 --> 00:08:10.336
The FPS performance
gauge is designed

00:08:10.336 --> 00:08:13.936
to help you improve your
games on our mobile platforms.

00:08:14.146 --> 00:08:17.596
It's available for use with
iOS and watchOS applications.

00:08:20.036 --> 00:08:23.136
So, we've covered some great
additions to the editor

00:08:23.136 --> 00:08:25.456
and now I'd like to change
gears a little bit and talk

00:08:25.456 --> 00:08:27.516
about a new feature that's
found in both the editor

00:08:27.516 --> 00:08:30.036
and the framework, tile maps.

00:08:30.836 --> 00:08:32.785
So, for anyone who
may not be familiar

00:08:32.785 --> 00:08:35.285
with what tile maps are,
they're simply a grid

00:08:35.285 --> 00:08:36.746
of evenly spaced images.

00:08:37.816 --> 00:08:39.736
And they're great for piecing
together scenes from a set

00:08:39.736 --> 00:08:42.466
of small, repeating
images, called tiles.

00:08:44.206 --> 00:08:46.946
Think of tiles as, tile
maps is a jigsaw puzzle

00:08:47.356 --> 00:08:49.156
and tiles as the pieces.

00:08:49.946 --> 00:08:52.656
Individually they don't look
like much but put them together

00:08:52.656 --> 00:08:55.556
and you can easily create
large, detailed scenes.

00:08:57.036 --> 00:08:58.996
So, before we get into the
details of the feature,

00:08:58.996 --> 00:09:01.616
let's talk a little bit about
why I might want to use them.

00:09:02.846 --> 00:09:05.036
Building scenes from small
repeating images is pretty

00:09:05.036 --> 00:09:06.016
common when creating games.

00:09:06.326 --> 00:09:09.716
And without tile maps,
if you wanted to do this,

00:09:09.716 --> 00:09:13.676
you'd have to manually place
each individual image by hand.

00:09:15.956 --> 00:09:17.316
And this totally works.

00:09:18.276 --> 00:09:20.566
And using a set of
small images is great

00:09:20.566 --> 00:09:21.996
for keeping memory overhead low.

00:09:22.966 --> 00:09:24.666
They can also be rearranged
to make adjustments

00:09:24.666 --> 00:09:25.746
to how the scene looks.

00:09:26.446 --> 00:09:27.976
However, copy pasting

00:09:27.976 --> 00:09:31.266
and manually aligning each
individual image is really

00:09:31.336 --> 00:09:32.566
tedious and time-consuming.

00:09:33.436 --> 00:09:36.046
It can also cause your scene to
get cluttered with lots of nodes

00:09:36.136 --> 00:09:38.396
which quickly makes things
really difficult to manage.

00:09:39.856 --> 00:09:42.566
So instead you could use large,

00:09:42.626 --> 00:09:45.776
more detailed images
with lots of detail.

00:09:46.136 --> 00:09:47.486
A sample game released
last year,

00:09:47.646 --> 00:09:48.896
DemoBots, used this approach.

00:09:49.726 --> 00:09:50.936
So, let's say one large image

00:09:50.936 --> 00:09:52.456
in your scene is
practically instant

00:09:52.596 --> 00:09:56.306
and that definitely keeps
your scenes clutter free.

00:09:56.306 --> 00:09:58.216
But if you want to
change how things look,

00:09:58.396 --> 00:10:00.846
you need to make modifications
to your source assets.

00:10:01.956 --> 00:10:04.126
Plus, large images
require more memory

00:10:04.126 --> 00:10:06.406
and if you want more
variety in your game,

00:10:06.746 --> 00:10:08.826
you'll need additional
large assets

00:10:08.966 --> 00:10:11.446
which in turn further
increases your memory overhead.

00:10:12.896 --> 00:10:16.036
So, tile maps gives you the
best of both of those solutions.

00:10:16.726 --> 00:10:19.246
They're easy to manage, as each
tile map is just a single node

00:10:19.246 --> 00:10:19.896
in your scene.

00:10:20.526 --> 00:10:21.726
They can be quickly modified.

00:10:22.256 --> 00:10:23.126
Say for instance I want

00:10:23.126 --> 00:10:26.876
to change the sand
tiles here to water.

00:10:27.336 --> 00:10:28.616
All I have to do is
tell the tile map

00:10:28.616 --> 00:10:30.716
to change the type
and it's done.

00:10:31.976 --> 00:10:34.646
And by using a set of smaller
tile images, tile maps allow you

00:10:34.856 --> 00:10:38.306
to have large, detailed scenes
with minimal memory overhead.

00:10:39.046 --> 00:10:41.776
Tile maps are also
great for lots

00:10:41.776 --> 00:10:43.006
of different games
and art styles.

00:10:43.606 --> 00:10:46.406
You can use them
for top-down RPG's,

00:10:46.866 --> 00:10:50.326
side scrolling platformers,
isometric city builders,

00:10:51.606 --> 00:10:52.836
hex-based board games.

00:10:53.176 --> 00:10:55.096
Tile maps are incredibly
flexible.

00:10:56.926 --> 00:10:59.846
So, as you've seen, tile maps
are very visual and instead

00:10:59.846 --> 00:11:02.026
of just telling you that how
they work, we're going to jump

00:11:02.026 --> 00:11:03.246
into a demo so I can show you.

00:11:03.606 --> 00:11:05.296
So, here we are in
the SpriteKit editor

00:11:05.746 --> 00:11:08.066
and we've already got a
tile map in our scene.

00:11:08.466 --> 00:11:10.896
So, let's go ahead
and select that.

00:11:11.196 --> 00:11:14.486
And so the quickest way to start
editing a tile map is simply

00:11:14.486 --> 00:11:15.216
double-click on it.

00:11:15.536 --> 00:11:19.026
And that brings up our
new tile editing bar

00:11:19.026 --> 00:11:19.956
at the top of the screen here.

00:11:21.156 --> 00:11:25.066
And by default, we have
the brush tool selected

00:11:25.566 --> 00:11:27.496
which allows us to
paint into our tile map.

00:11:27.706 --> 00:11:30.866
And so the paint, all we
have to do is simply click

00:11:31.046 --> 00:11:35.166
and we start placing
tiles in our map.

00:11:36.316 --> 00:11:39.066
If you want to change what type
of tile we're placing in there,

00:11:39.726 --> 00:11:43.686
all we have to do is click on
our select tile button over here

00:11:43.686 --> 00:11:46.236
and that shows us all the
different tiles I have available

00:11:46.236 --> 00:11:46.876
for placement.

00:11:47.886 --> 00:11:53.566
So, here let's place edge
tiles and a corner tile here

00:11:53.636 --> 00:11:56.626
and a couple more edge tiles.

00:11:56.626 --> 00:11:58.886
And we can see how
can easily place,

00:11:59.046 --> 00:12:00.936
piece together your
scenes this way.

00:12:01.806 --> 00:12:04.306
But individually placing
all these images is still a

00:12:04.306 --> 00:12:05.456
bit tedious.

00:12:05.626 --> 00:12:08.366
So, I'm going to show you
better way of doing this.

00:12:09.396 --> 00:12:10.846
So, here we're just going

00:12:10.846 --> 00:12:14.146
to a place a new tile
map in our scene.

00:12:19.956 --> 00:12:23.286
And by default on our tile
maps, we have a feature

00:12:24.756 --> 00:12:27.816
in the inspector enabled
called enable automapping.

00:12:28.316 --> 00:12:33.916
And what this does is when I
start to edit my map and I go

00:12:33.916 --> 00:12:36.706
to select my tiles, you'll see
that instead of individual tiles

00:12:36.706 --> 00:12:40.416
for placement, we now have these
groups of tiles here organized

00:12:40.416 --> 00:12:43.046
into different types of terrain,
grass, dirt, stone and water.

00:12:43.226 --> 00:12:44.816
So, I'll go ahead
and select one.

00:12:45.156 --> 00:12:48.226
And now when we go to place
it in the tile map, we click

00:12:48.796 --> 00:12:50.806
and place the center
tile in addition

00:12:50.806 --> 00:12:52.466
to all the edge tiles
automatically.

00:12:52.756 --> 00:12:55.426
And this is really
great for quickly

00:12:55.426 --> 00:12:56.926
and easily creating your scenes.

00:12:57.056 --> 00:12:59.706
Now, instead of having to
place each individual edge tile

00:12:59.706 --> 00:13:02.696
and corner tile, we can just
paint and it automatically sets

00:13:02.696 --> 00:13:05.806
up each of the tiles that we
need here without having us

00:13:05.806 --> 00:13:08.846
to go through any extra
hoops which a lot of time.

00:13:08.846 --> 00:13:11.166
That makes painting
tiles extremely fast.

00:13:12.516 --> 00:13:17.356
[ Applause ]

00:13:17.856 --> 00:13:20.686
So, let's take a look at how
the tile sets are put together.

00:13:21.916 --> 00:13:24.296
So, the tile sets arrive
in their own SKS file.

00:13:24.366 --> 00:13:27.876
And as you see here, you can
see all of our different types

00:13:27.876 --> 00:13:29.816
that we have, like grass,
dirt, stone, and water.

00:13:30.466 --> 00:13:33.836
And you can see that
they're arranged

00:13:33.836 --> 00:13:35.636
so that you can see how they're
supposed to be put together.

00:13:35.636 --> 00:13:39.176
So, let's put a new
tile group in here.

00:13:41.876 --> 00:13:45.976
So, all we have to do to set
up a new tile group that works

00:13:45.976 --> 00:13:48.846
with our automapping is to
drag the tiles we want to use

00:13:48.846 --> 00:13:50.396
into their corresponding
slots here.

00:13:50.396 --> 00:13:52.276
You can see that we
have those silhouettes

00:13:52.276 --> 00:13:54.006
that vaguely what the tile's
supposed to look like.

00:13:54.786 --> 00:13:59.706
So, we'll just grab some tiles
from our active browser be here.

00:13:59.916 --> 00:14:04.736
And we just drag-and-drop
them in and it's super quick

00:14:04.736 --> 00:14:07.956
and super easy to set
up a new tile group.

00:14:17.426 --> 00:14:19.456
So there. Let's give it a name.

00:14:21.536 --> 00:14:22.896
We'll call this one garden.

00:14:24.636 --> 00:14:25.646
And that's it.

00:14:26.606 --> 00:14:27.966
So now we can go into a scene.

00:14:29.046 --> 00:14:30.216
We'll create a tile map here.

00:14:31.956 --> 00:14:33.706
We'll start editing it.

00:14:34.576 --> 00:14:37.956
And you'll see our garden
tile group is already in here.

00:14:38.346 --> 00:14:40.586
So, I just grab that
and start placing it.

00:14:40.586 --> 00:14:43.336
And you can see how easy it is
to just set up a new tile group

00:14:43.586 --> 00:14:45.246
that already works
with automapping.

00:14:45.536 --> 00:14:46.666
You don't have to
do anything extra.

00:14:46.776 --> 00:14:49.006
But there's a little
more that we can do

00:14:49.006 --> 00:14:50.126
with the tile groups as well.

00:14:50.126 --> 00:14:54.656
So, I'll go back to our tile,
we'll go to another tile set

00:14:54.656 --> 00:14:55.726
that I premade over here.

00:14:55.726 --> 00:14:58.186
And at first glance
it looks the same.

00:14:58.896 --> 00:15:02.436
But then when I start clicking
on these individual tiles here,

00:15:02.436 --> 00:15:04.186
you can see that we have a bunch

00:15:04.186 --> 00:15:05.706
of variants available
for each tile.

00:15:05.806 --> 00:15:11.146
And this is the same for each
one of our different slots here.

00:15:13.446 --> 00:15:15.676
So, when we paint this
tile group into a tile map,

00:15:16.276 --> 00:15:19.106
it will randomly select one of
these variants for each tile.

00:15:19.446 --> 00:15:21.526
So, you can have a lot more
variety to your tile maps.

00:15:21.776 --> 00:15:24.396
Additionally, you can
assign weights to each

00:15:24.396 --> 00:15:26.596
of the styles, these variants.

00:15:27.056 --> 00:15:28.986
See here, the red
flowers have a plate,

00:15:28.986 --> 00:15:31.456
have a placement weight of 3.

00:15:33.586 --> 00:15:36.026
White flowers have a
placement weight of 2.

00:15:36.476 --> 00:15:41.056
And the blue have a
placement weight of 1.

00:15:42.536 --> 00:15:44.036
So, the red flowers
are much more common

00:15:44.036 --> 00:15:47.046
than the white flowers and more
common than the blue flowers.

00:15:47.046 --> 00:15:48.996
So, now let's go
back to our scene.

00:15:49.556 --> 00:15:52.486
We'll create another tile map

00:15:54.716 --> 00:15:57.246
and we'll assign our
advanced tile set to it.

00:16:00.146 --> 00:16:02.886
Now, when we start
painting these tiles,

00:16:03.216 --> 00:16:06.066
you can see our variants
are now showing up.

00:16:07.556 --> 00:16:10.236
So, you can see the tiles sets
are very flexible and allow you

00:16:10.236 --> 00:16:13.326
to achieve a lot of different
looks without having to do a lot

00:16:13.326 --> 00:16:14.566
of work which is super useful.

00:16:15.966 --> 00:16:19.476
So, another thing we can do with
the tile maps is layer them.

00:16:20.236 --> 00:16:22.486
So, here in the tile
map on the left here,

00:16:22.486 --> 00:16:25.076
it appears as if there's
just a single tile map.

00:16:26.666 --> 00:16:28.926
But if I grab it here,

00:16:29.556 --> 00:16:32.446
you'll see that's actually 2
layered on top of each other.

00:16:32.576 --> 00:16:39.586
And so you see we can layer
them on top of one another

00:16:39.586 --> 00:16:40.376
to make it make it appear

00:16:40.376 --> 00:16:44.366
as if we have more
versatile tile assets

00:16:44.366 --> 00:16:45.126
than we actually have.

00:16:45.206 --> 00:16:48.316
So, it looks like these
assets are designed

00:16:48.366 --> 00:16:51.696
to transition to
the grass tiles.

00:16:51.696 --> 00:16:54.066
So, they actually have
[inaudible] along the edges.

00:16:54.416 --> 00:16:55.886
So, when we move
these guys over here,

00:16:57.086 --> 00:17:01.076
they just naturally
transition to the grass.

00:17:01.456 --> 00:17:03.486
And so we move it on
over onto the dirt

00:17:04.006 --> 00:17:04.986
to achieve the same effect.

00:17:05.226 --> 00:17:08.996
Now looks as if they're
transitioning onto the dirt.

00:17:09.766 --> 00:17:11.685
So, this allows you to
get a lot more mileage

00:17:11.685 --> 00:17:13.116
out of your art assets.

00:17:13.116 --> 00:17:15.796
If you just have them
transition to being transparent

00:17:15.796 --> 00:17:18.036
on the edges, you can
layer them together and,

00:17:18.776 --> 00:17:20.516
any way you can conceive
allowing you

00:17:20.516 --> 00:17:23.986
to get a lot more flexibility
out of the art that you have.

00:17:25.205 --> 00:17:26.435
So, another thing that we can do

00:17:26.435 --> 00:17:29.886
with our tile sets is
they can be animated.

00:17:30.856 --> 00:17:34.426
So, here we have a nice tile set
with some grass and some water.

00:17:34.686 --> 00:17:35.796
We'll press the animate button

00:17:36.546 --> 00:17:40.436
and if you look closely
you can see the shore line

00:17:40.436 --> 00:17:43.076
on the water tiles
here is undulating.

00:17:43.076 --> 00:17:48.806
So, now let's take a look at the
tile set for this set tile map.

00:17:50.366 --> 00:17:51.546
Set the water.

00:17:51.986 --> 00:17:53.736
You can see, preview
the animation straight

00:17:53.736 --> 00:17:55.076
from our tile set editor.

00:17:55.166 --> 00:17:59.196
And I can select
one of the variants

00:17:59.196 --> 00:18:02.716
and you can see we just have, so
we have a list of all the frames

00:18:02.716 --> 00:18:03.816
that are in our animation.

00:18:04.096 --> 00:18:06.576
Now, we give it a time per
frame to set up the animation.

00:18:06.576 --> 00:18:08.956
Now, this is basically
identical to how our animate

00:18:08.956 --> 00:18:10.306
with textures app should works.

00:18:10.846 --> 00:18:12.576
And it's just that easy
to set up animation.

00:18:13.026 --> 00:18:15.196
Which is a really great way of
bringing life to your scenes.

00:18:16.886 --> 00:18:21.716
But in additional to frame
animation on the tiles,

00:18:22.936 --> 00:18:24.936
we can also animate the
tile maps themselves.

00:18:25.636 --> 00:18:28.016
So, the tile maps
are just SK nodes.

00:18:28.016 --> 00:18:31.046
So, you can do everything
you can do with an SK node.

00:18:31.046 --> 00:18:33.426
So of course you can
drag them around.

00:18:33.536 --> 00:18:36.076
You can scale them.

00:18:36.786 --> 00:18:38.526
You can rotate them.

00:18:38.526 --> 00:18:42.186
I note that you can still
actually edit the tile maps

00:18:42.186 --> 00:18:44.106
while they're like this although
it gets a little awkward

00:18:44.106 --> 00:18:46.696
when you're at some weird angles
like this but, it still works.

00:18:48.076 --> 00:18:52.806
But because SK nodes, the
tile maps are just nodes,

00:18:53.076 --> 00:18:54.636
we can run actions on them.

00:18:55.036 --> 00:18:57.356
So, here you see I have a bunch
of actions that I've already set

00:18:57.356 --> 00:19:00.166
up on my tile map by moving
the scale and rotating it.

00:19:00.656 --> 00:19:02.096
So, we just animate this thing.

00:19:02.096 --> 00:19:05.276
We can see yeah, we
move, we scale, we rotate

00:19:05.406 --> 00:19:09.246
and then we put it back.

00:19:09.246 --> 00:19:10.536
And so you see that
we have multiple ways

00:19:10.536 --> 00:19:12.136
of bringing animation
to our tile maps

00:19:12.136 --> 00:19:13.126
which can be really useful.

00:19:13.756 --> 00:19:18.116
In fact, we can leverage this
layering and the animation

00:19:18.396 --> 00:19:19.796
to create some interesting
effects.

00:19:21.896 --> 00:19:24.736
So, in this scene, I've got
three different layers set

00:19:24.736 --> 00:19:26.346
up in our tile map here.

00:19:27.396 --> 00:19:28.526
Don't want to do that yet.

00:19:29.256 --> 00:19:33.446
And if I position the camera
over here and we hit animate,

00:19:34.316 --> 00:19:37.966
we're simply moving these tile
map layers at different rates

00:19:38.086 --> 00:19:41.126
and this achieves the
appearance of depth,

00:19:41.126 --> 00:19:43.426
an effect that we call
parallax scrolling.

00:19:43.596 --> 00:19:48.186
And all I'm doing here is simply
moving the foreground layer

00:19:48.186 --> 00:19:51.776
at one rate of speed, the middle
ground layer at half that speed

00:19:51.776 --> 00:19:54.056
and the background layer
at half that speed again.

00:19:54.056 --> 00:19:56.166
And that achieves the
effect that we want.

00:19:56.326 --> 00:19:57.776
And it's just incredibly easy.

00:19:59.056 --> 00:20:04.636
So, in addition to having simple
square tiles in our tile maps,

00:20:04.976 --> 00:20:06.946
we also have support
for hex tiles

00:20:07.136 --> 00:20:08.796
and isometric tiles as well.

00:20:09.206 --> 00:20:12.006
So, you have lots of flexibility
in terms of the appearance

00:20:12.006 --> 00:20:13.876
that you can achieve
for your game.

00:20:14.526 --> 00:20:19.496
So, speaking of which,
let's take a look

00:20:19.496 --> 00:20:20.496
at a game sample right now.

00:20:26.296 --> 00:20:28.456
So, here we've got a little
platform that I built.

00:20:29.406 --> 00:20:32.126
A little guy that
can run around.

00:20:32.216 --> 00:20:34.956
And you can see that I got
the parallax scrolling going

00:20:34.956 --> 00:20:35.916
on in the background.

00:20:35.956 --> 00:20:39.876
And you'll note that I'm
colliding with the tiles here.

00:20:40.946 --> 00:20:46.886
And I achieve this by
leveraging custom user data

00:20:46.886 --> 00:20:50.696
that we can put on
each of our tiles.

00:20:50.996 --> 00:20:52.896
Here, I'll show you
in our tile set.

00:20:52.896 --> 00:20:58.636
Select one of the variants here.

00:20:58.636 --> 00:21:00.946
And you can see that we have
some user data over here.

00:21:01.716 --> 00:21:04.176
And I just have a
value called edgeTile

00:21:04.276 --> 00:21:06.036
which is a Boolean,
and I set to 1.

00:21:06.786 --> 00:21:09.466
So, in code, I'm going
through the tile map

00:21:09.466 --> 00:21:12.046
in our platform demo
here, and I'm looking

00:21:12.046 --> 00:21:13.366
for all of these edge tiles.

00:21:13.366 --> 00:21:15.986
And whenever I find one,
I create some physics data

00:21:15.986 --> 00:21:19.486
to allow the player
to collide with it.

00:21:24.856 --> 00:21:29.986
And since it is just in our tile
map here, say I wanted to get

00:21:29.986 --> 00:21:32.316
over this large wall here.

00:21:32.926 --> 00:21:36.266
When I run the game, you'll see

00:21:36.266 --> 00:21:40.476
that my guy can't actually jump
high enough to get over it.

00:21:40.516 --> 00:21:42.456
And he really wants to
because that red button

00:21:42.456 --> 00:21:43.596
over there looks
really tempting.

00:21:43.596 --> 00:21:44.616
I really want to
push that thing.

00:21:45.966 --> 00:21:50.726
So, since we're just generating
our physics data from our tiles

00:21:50.726 --> 00:21:53.216
and our user data, all we
can do is just going here

00:21:53.316 --> 00:22:01.756
and erase these tiles and
build and run our game again.

00:22:02.296 --> 00:22:06.646
The tiles are now gone and we
can now move through there.

00:22:06.646 --> 00:22:08.636
And we didn't have to
change code or anything.

00:22:08.636 --> 00:22:11.076
We just used the
data that we pulled

00:22:11.076 --> 00:22:13.116
from the tile map
to set up our tile.

00:22:13.266 --> 00:22:14.156
It's that simple.

00:22:15.421 --> 00:22:17.421
[ Applause ]

00:22:17.826 --> 00:22:19.476
And now as a reward, I
get to jump on the button.

00:22:20.496 --> 00:22:21.446
Yay.

00:22:29.086 --> 00:22:32.666
So, that's how our tile
maps work in the editor.

00:22:36.406 --> 00:22:39.456
So, now that we've shown you
how they work in the editor,

00:22:39.456 --> 00:22:42.046
let's take a look at the
framework side of things.

00:22:43.106 --> 00:22:45.846
And if you're creating tile
maps from within the editor,

00:22:45.916 --> 00:22:48.296
you're not going to need to
bother with most of the stuff.

00:22:48.686 --> 00:22:50.336
But it's good to get an
overview of how it works.

00:22:51.166 --> 00:22:54.486
So, tile maps are implemented
in class SKTileMapNode,

00:22:54.766 --> 00:22:57.386
which as mentioned in the
demo is just an SKNode.

00:22:58.036 --> 00:22:59.286
It holds all the information

00:22:59.286 --> 00:23:00.606
about the tiles you've
placed in it.

00:23:01.636 --> 00:23:04.136
But to be able to place tiles,
it first needs a tile set.

00:23:04.316 --> 00:23:08.186
And the tile set is defined
in the class SKTileSet.

00:23:08.806 --> 00:23:10.636
It contains all the tile
groups they can use.

00:23:11.156 --> 00:23:13.916
Additionally, it also defines
the type of tiles it can contain

00:23:13.916 --> 00:23:16.726
and they can either be
regular square grid tiles,

00:23:16.726 --> 00:23:18.976
isometric tiles or
hexagonal tiles.

00:23:19.636 --> 00:23:24.126
The tile groups are defined
in class SKTileGroup.

00:23:24.826 --> 00:23:26.976
And as we saw on the demo,
a tile group is a set

00:23:26.976 --> 00:23:28.846
of related tiles,
typically things like type

00:23:28.966 --> 00:23:30.566
of terrain like grass or water.

00:23:31.556 --> 00:23:33.176
The tile group also
has the rules

00:23:33.176 --> 00:23:34.886
that define how the
individual tiles

00:23:34.886 --> 00:23:38.086
in the group should
be placed in the map.

00:23:38.156 --> 00:23:40.896
And those rules are defined
in the class SKTileGroupRule.

00:23:41.426 --> 00:23:44.196
That also holds all the
tile variants that work

00:23:44.196 --> 00:23:45.856
with the pattern it describes.

00:23:45.926 --> 00:23:49.736
And finally, each
tile is described

00:23:49.916 --> 00:23:51.326
through an SKTileDefinition

00:23:51.586 --> 00:23:53.296
which defines the
appearance of the tile.

00:23:54.006 --> 00:23:57.316
Each one has at least one image
and as you saw in the demo,

00:23:57.316 --> 00:23:59.086
they can be animated
with multiple images

00:23:59.086 --> 00:24:00.686
to help bring life
to your tile maps.

00:24:01.556 --> 00:24:04.406
Additionally, the tiles can
be flipped and/or rotated,

00:24:04.406 --> 00:24:07.336
allowing you to get more
out of your existing assets.

00:24:07.686 --> 00:24:11.046
Now, let's take a
quick look at some code

00:24:11.046 --> 00:24:12.636
so you can see how
you can create

00:24:12.636 --> 00:24:14.286
and modify a tile
map through the API.

00:24:15.476 --> 00:24:17.866
The first step is to get the
tile set you want to use.

00:24:18.236 --> 00:24:20.176
Now, you can create
these programmatically

00:24:20.406 --> 00:24:23.086
but it's a very involved
process and we highly recommend

00:24:23.086 --> 00:24:25.376
that you create them
using the tile set editor.

00:24:26.876 --> 00:24:28.576
Getting one you've
already created is easy.

00:24:29.266 --> 00:24:31.766
Just call this convenience
initializer with the name

00:24:31.766 --> 00:24:33.156
of the tile set that
you want to use.

00:24:35.506 --> 00:24:38.136
Then, to create a new tile
map, we just need to provide it

00:24:38.136 --> 00:24:41.406
with the tile set we want to
use and the number of columns

00:24:41.406 --> 00:24:44.366
and rows in the map along
with the size of each tile.

00:24:45.956 --> 00:24:47.996
If you want to start
placing tiles in the map,

00:24:48.086 --> 00:24:49.236
we're going to need
a tile group.

00:24:49.896 --> 00:24:52.176
So, here we're just grabbing
the first one that's defined

00:24:52.496 --> 00:24:55.166
in the tile set.

00:24:55.446 --> 00:24:58.576
Once we have a tile map and a
tile group we want to place,

00:24:58.976 --> 00:25:00.716
we can start setting
individual tiles.

00:25:01.416 --> 00:25:03.176
Here we're setting
our tile group

00:25:03.216 --> 00:25:05.556
on the tile at column 4, row 7.

00:25:06.176 --> 00:25:09.946
We can also operate on
the entire map at once.

00:25:10.336 --> 00:25:12.736
Here we are filling every tile
on the map with our tile group.

00:25:13.466 --> 00:25:17.566
So, if you're creating
and modifying tile maps

00:25:17.566 --> 00:25:20.256
through the SpriteKit editor,
you may not need to use any

00:25:20.256 --> 00:25:21.376
of the API we just covered.

00:25:22.176 --> 00:25:23.426
But unless you're
using tile maps

00:25:23.426 --> 00:25:26.706
for entirely static backgrounds,
you want to, probably want

00:25:26.706 --> 00:25:28.096
to be able to query them.

00:25:28.096 --> 00:25:29.616
There are a bunch of
useful things you can do.

00:25:30.576 --> 00:25:32.836
Say for instance you want to
detect when a player moves

00:25:32.836 --> 00:25:34.046
over a particular tile

00:25:34.436 --> 00:25:36.726
and inject some custom
user data you've set

00:25:36.726 --> 00:25:37.616
on the tile definition.

00:25:38.236 --> 00:25:43.256
You can do this by first
converting the player's position

00:25:43.446 --> 00:25:47.136
and a tile maps frame
of reference.

00:25:47.576 --> 00:25:49.616
Then, you'd use the
methods highlighted here

00:25:50.126 --> 00:25:51.816
to get the column
and row of the tile

00:25:51.896 --> 00:25:55.076
that contains that position.

00:25:55.186 --> 00:25:57.716
Next, you query the tile
definition that exists

00:25:57.806 --> 00:25:59.136
in that column and row.

00:25:59.136 --> 00:26:03.796
And finally, now that you've
got the tile definition,

00:26:04.256 --> 00:26:06.616
you can check the user
data for the custom value

00:26:06.616 --> 00:26:07.296
that you're interested in.

00:26:07.616 --> 00:26:10.196
And then act on that data
information however you want.

00:26:10.376 --> 00:26:13.596
And the demo we just showed,
we're doing thing very similar

00:26:13.596 --> 00:26:16.266
to this to detect
when the player jumps

00:26:16.266 --> 00:26:17.066
on the big red button.

00:26:18.106 --> 00:26:18.826
When they are over a tile

00:26:18.826 --> 00:26:21.026
with a button custom
user data property,

00:26:21.356 --> 00:26:22.446
we trigger the fireworks.

00:26:23.206 --> 00:26:26.536
It's all a lot to take in,

00:26:26.536 --> 00:26:29.526
so let's quickly recap the
features that tile maps offer.

00:26:31.286 --> 00:26:34.596
By creating scenes from a set
of small, repeating images,

00:26:34.766 --> 00:26:37.286
tile maps help you get more
out of your art budget.

00:26:38.256 --> 00:26:40.226
Overall, you'll need
fewer assets

00:26:40.226 --> 00:26:43.206
and it also brings the benefit
of reduced memory overhead.

00:26:44.166 --> 00:26:46.976
They support animation, both in
the form of animated tile images

00:26:47.436 --> 00:26:48.796
and actions at the node level.

00:26:50.856 --> 00:26:53.266
Tile maps are designed to be
layered on top of one another,

00:26:53.516 --> 00:26:55.996
which further increases the
versatility of your art assets

00:26:56.026 --> 00:26:58.256
and enables effects
like parallax scrolling.

00:26:59.546 --> 00:27:01.746
They're extremely
flexible and great for lots

00:27:01.746 --> 00:27:05.816
of different art styles
and types of games.

00:27:06.746 --> 00:27:08.986
Large tile maps are
automatically divided

00:27:09.246 --> 00:27:11.756
into smaller chunks
and only the parts

00:27:11.756 --> 00:27:13.306
that are currently
visible are drawn

00:27:14.006 --> 00:27:16.096
which provides a big
performance boost.

00:27:16.296 --> 00:27:20.146
Additionally, if all the tile
images used by the tile map are

00:27:20.146 --> 00:27:22.206
in the same Asset
Catalog, Sprite Atlas,

00:27:22.666 --> 00:27:25.966
each chunk will batch all the
tiles together and render them

00:27:25.966 --> 00:27:26.956
with a single draw call.

00:27:28.306 --> 00:27:30.046
Tile maps also come in
a variety of flavors,

00:27:30.456 --> 00:27:34.136
standard square grids, isometric
tiles and hexagonal tiles.

00:27:34.726 --> 00:27:39.926
On the tool side, editing
tile maps is simple and easy.

00:27:40.506 --> 00:27:42.556
Just point and click to
place tiles in your map.

00:27:43.236 --> 00:27:46.346
Automapping does all the hard
work for you so you don't need

00:27:46.346 --> 00:27:48.906
to individually place
every edge and corner tile.

00:27:49.086 --> 00:27:51.346
And you can of course
turn it off

00:27:51.346 --> 00:27:52.746
to do the detail work by hand.

00:27:53.846 --> 00:27:57.016
Finally, creating new tile
sets is extremely quick.

00:27:57.796 --> 00:28:00.116
Just drag-and-drop the
images you want to use

00:28:00.116 --> 00:28:02.556
into their corresponding
slots in the tile set editor

00:28:02.556 --> 00:28:03.666
and you're good to go.

00:28:03.666 --> 00:28:06.866
So, that covers tile sets.

00:28:07.646 --> 00:28:09.076
Now I'd like to invite
my colleague, Clement,

00:28:09.076 --> 00:28:10.166
up to talk to you about the rest

00:28:10.166 --> 00:28:11.746
of the awesome features
we have this year.

00:28:12.516 --> 00:28:17.500
[ Applause ]

00:28:20.766 --> 00:28:21.666
>> Thank you, Ross.

00:28:22.466 --> 00:28:24.856
All right, some cool
stuff, right?

00:28:27.116 --> 00:28:27.996
So, hello.

00:28:27.996 --> 00:28:28.796
My name is Clement.

00:28:29.286 --> 00:28:30.836
I'm a software engineer
here at Apple

00:28:30.836 --> 00:28:31.996
in the Game Technologies Team.

00:28:32.876 --> 00:28:34.246
And guess what?

00:28:34.246 --> 00:28:35.876
We actually have
more to talk about,

00:28:35.876 --> 00:28:37.386
so let's see what else
is new in SpriteKit.

00:28:38.106 --> 00:28:40.606
And the first up is
Warp Transformation.

00:28:42.876 --> 00:28:46.906
So, currently you have many ways
to do transforms on your Sprite.

00:28:47.426 --> 00:28:50.546
You can apply a scale to make
things bigger or smaller.

00:28:51.616 --> 00:28:55.806
You can apply a rotation to
make it spin around the axis.

00:28:55.906 --> 00:28:59.486
Or if you like to
get your hands dirty,

00:28:59.596 --> 00:29:01.216
you can also write
a custom shader

00:29:01.836 --> 00:29:05.246
such as this low
resolution shader

00:29:05.246 --> 00:29:10.066
that you can see right there.

00:29:10.246 --> 00:29:12.526
This year we're very happy
to announce a new kind

00:29:12.526 --> 00:29:14.446
of transformation called
Warp Transformation.

00:29:15.236 --> 00:29:16.456
Warp Transformation allows you

00:29:16.456 --> 00:29:19.416
to define a custom distortion
using degrees of points.

00:29:19.806 --> 00:29:23.906
So, for example if we
take a 2 by 2 grid,

00:29:24.086 --> 00:29:26.836
it's basically 8 points
and what you can see here

00:29:26.836 --> 00:29:29.866
in green is our source position,
also called reference position.

00:29:30.846 --> 00:29:32.526
Then I get a second grid here

00:29:32.656 --> 00:29:33.986
but it's going to
mean a distortion.

00:29:34.476 --> 00:29:36.516
So, what you see here is
my definition position

00:29:36.706 --> 00:29:38.206
and as you can see,
I move the points

00:29:38.206 --> 00:29:39.556
around to create a distortion.

00:29:39.736 --> 00:29:42.846
So now if I apply like
this to my spaceship

00:29:42.846 --> 00:29:48.116
of earlier, this is what I get.

00:29:48.346 --> 00:29:49.716
As you can see, we get a nice

00:29:49.716 --> 00:29:51.576
and smooth distortion
of a spaceship.

00:29:52.096 --> 00:29:54.486
And the distortion is going
to follow the displacement

00:29:54.486 --> 00:29:56.236
between the source and
disposition position.

00:29:56.446 --> 00:29:59.736
So, let me show you some
examples of what you can do

00:29:59.996 --> 00:30:00.936
with Warp Transformation.

00:30:01.496 --> 00:30:05.626
And my first example
is a squash affect.

00:30:05.806 --> 00:30:08.186
So, what I'm doing here is just
bring the points towards the

00:30:08.186 --> 00:30:10.416
center to create a
cool squash effect.

00:30:10.416 --> 00:30:13.706
Next, I had a stretch effect.

00:30:13.706 --> 00:30:15.666
I am pulling the
nose of the spaceship

00:30:15.666 --> 00:30:17.506
and making it wiggle
from right to left.

00:30:18.276 --> 00:30:19.436
It can look a bit funny.

00:30:20.216 --> 00:30:23.706
And the next big thing here
is keyframe-based animation.

00:30:24.826 --> 00:30:27.966
So, usually in 2D games
if an artist is going

00:30:27.966 --> 00:30:30.066
to make static frames
for animation.

00:30:30.716 --> 00:30:32.676
And it's a pretty long
process, especially if you need

00:30:32.676 --> 00:30:34.776
to iterate a new
design multiple times.

00:30:35.356 --> 00:30:38.476
And Warp Transformation,
making animation is as simple

00:30:38.476 --> 00:30:39.836
as just moving points around.

00:30:39.836 --> 00:30:42.126
And if you have any
complex scenarios

00:30:42.126 --> 00:30:43.576
such as a keyframe-based
animation,

00:30:43.946 --> 00:30:46.506
you can just provide multiple
grades and everything is going

00:30:46.506 --> 00:30:47.356
to be done at one time.

00:30:47.576 --> 00:30:49.016
You no longer need
static frames.

00:30:50.216 --> 00:30:53.916
So, now let me explain you
the basic concept behind

00:30:54.136 --> 00:30:54.916
Warp Transformation.

00:30:55.726 --> 00:30:59.756
So again, if we have a 2 by 2
grid here, we have an index set

00:30:59.756 --> 00:31:03.636
of points from 0 to
8 in the grid layout.

00:31:05.256 --> 00:31:08.216
This point, this point,
sorry, the grid, and the cells

00:31:08.216 --> 00:31:10.686
in this grid are quad
with multiple triangles.

00:31:11.056 --> 00:31:13.566
So, now from the computer
graphics standpoint,

00:31:13.746 --> 00:31:16.696
what we have here is a list
of vertices like change

00:31:17.206 --> 00:31:20.226
and texture coordinates are
actually going to be the same.

00:31:20.606 --> 00:31:24.526
And then you just set the GPU
to the interpolation for us.

00:31:25.416 --> 00:31:27.646
So, this is fine and we
could just to stop here,

00:31:27.646 --> 00:31:31.026
but initially what happens if I
use my 3D emoji, the cat emoji,

00:31:31.416 --> 00:31:33.776
and I limit it to one quad
which is basically a 1

00:31:33.776 --> 00:31:36.056
by 1 grid, so, come on.

00:31:36.056 --> 00:31:36.926
Show me some distortion.

00:31:37.146 --> 00:31:39.606
All right, go for it.

00:31:40.676 --> 00:31:42.776
Yeah, it doesn't
look quite right.

00:31:43.456 --> 00:31:46.526
And the reason why is because
we're only moving one point,

00:31:46.866 --> 00:31:48.606
so only one triangle
is being distorted.

00:31:48.946 --> 00:31:50.646
So, what can we do about this?

00:31:51.376 --> 00:31:53.216
Well, we could make
the grid more dense

00:31:53.256 --> 00:31:54.436
and upload more quads.

00:31:54.496 --> 00:31:56.596
But then it's kind
of tedious for you

00:31:56.596 --> 00:31:58.106
because you have more
points to manipulate.

00:31:58.676 --> 00:32:00.446
Especially because
Sprite is pretty big.

00:32:00.916 --> 00:32:02.306
It's almost as if
you had to, you know,

00:32:02.386 --> 00:32:03.626
move pixels around, right?

00:32:04.906 --> 00:32:08.086
So, no. As you have guessed,
we have a trick here.

00:32:08.516 --> 00:32:09.986
So, in SpriteKit,
this is what we do.

00:32:10.796 --> 00:32:12.076
Again, 2 by 2 grid.

00:32:13.206 --> 00:32:15.386
We, so you only have
to manipulate 8 points

00:32:15.866 --> 00:32:17.076
and as you do the distortion

00:32:17.076 --> 00:32:19.606
of the points moving
around, this is what happens.

00:32:24.436 --> 00:32:25.086
There we go.

00:32:26.346 --> 00:32:28.636
So, we do automatic quad
subdivision for you.

00:32:29.176 --> 00:32:32.006
And this is great because it
gives you a good trade-off

00:32:32.006 --> 00:32:33.786
between a high level of details

00:32:34.176 --> 00:32:36.636
and minimal quads
using the distortion.

00:32:37.356 --> 00:32:39.406
And again, you only
manipulate 8 points.

00:32:39.776 --> 00:32:42.076
So, here, as I move the
points in the top left,

00:32:42.586 --> 00:32:45.006
you can see that I'm going
a bit far so the level

00:32:45.006 --> 00:32:46.166
of distortion is a bit high.

00:32:46.576 --> 00:32:47.846
So we you do subdivision.

00:32:48.376 --> 00:32:50.686
But at the bottom right, it's
a bit more mild distortion

00:32:50.686 --> 00:32:52.446
so we only subdivide twice.

00:32:54.056 --> 00:32:56.776
And because we want to
provide you with more control,

00:32:56.776 --> 00:32:59.116
we actually allow you to
specify the maximum number

00:32:59.116 --> 00:32:59.826
of subdivision.

00:32:59.986 --> 00:33:02.246
So, if I take my
spaceship of earlier

00:33:02.486 --> 00:33:05.216
and I make it a bit distorted
a little bit like that,

00:33:05.216 --> 00:33:06.746
you might see some
distortion, sorry,

00:33:06.746 --> 00:33:09.446
some artifacts throwing up,
such as this bump at the bottom.

00:33:10.046 --> 00:33:12.236
So, if I go with
only one subdivision,

00:33:12.346 --> 00:33:13.206
you might see artifacts.

00:33:13.566 --> 00:33:15.186
But if you go up
to 4, for instance,

00:33:15.586 --> 00:33:17.386
we clearly lose all
the artifacts

00:33:17.386 --> 00:33:20.056
and have this nice smooth line
at the bottom of the spaceship.

00:33:21.026 --> 00:33:23.096
So again, this is perfect
for you if you want

00:33:23.096 --> 00:33:26.186
to tune your visuals
and/or your performance.

00:33:26.336 --> 00:33:28.006
Because of course, the
less quad you have,

00:33:28.166 --> 00:33:30.056
the best for performance.

00:33:30.996 --> 00:33:33.276
All right, this is cool but
how do we do this in Swift?

00:33:33.906 --> 00:33:35.226
Okay, so first thing.

00:33:35.376 --> 00:33:36.726
Remember, we have a grid layout.

00:33:37.006 --> 00:33:39.166
So, 8 points labeled
from 0 to 8.

00:33:39.866 --> 00:33:42.056
I'm going to provide a
list of source position,

00:33:42.356 --> 00:33:44.736
a list of definition position,
which are all float 2.

00:33:45.386 --> 00:33:47.956
I can just create my
warp geometry grid

00:33:48.006 --> 00:33:51.066
by providing the column, the
rows, the destination positions,

00:33:51.066 --> 00:33:53.856
source positions, and then
I just save it to my Sprite.

00:33:54.456 --> 00:33:55.856
And we have the distortion.

00:33:56.276 --> 00:33:59.146
And optionally you can
also set subdivision level

00:33:59.146 --> 00:34:01.416
to whatever you want
with the default being 2.

00:34:01.926 --> 00:34:05.886
And because it is SpriteKit,
we also, I did a bunch

00:34:05.886 --> 00:34:07.326
of new SK actions
for you to use.

00:34:07.776 --> 00:34:09.556
So, making a transformation
is as simple

00:34:09.556 --> 00:34:13.485
as just saying SKActionWarp
to and give a grid and a time.

00:34:14.356 --> 00:34:15.846
Or, if you have something
more complex

00:34:16.025 --> 00:34:18.246
such as a keyframe-based
animation,

00:34:18.246 --> 00:34:20.686
you can provide a list of
grids and a list of times.

00:34:21.246 --> 00:34:22.005
All right.

00:34:22.636 --> 00:34:25.306
So, okay, let's do
a quick demo here

00:34:25.306 --> 00:34:26.775
to show you Warp
Transformation in action.

00:34:35.835 --> 00:34:37.636
Alright. So, I'm actually going

00:34:37.636 --> 00:34:43.156
to be using the same demo is
Ross, but this time I'm going

00:34:43.156 --> 00:34:45.085
to go on the left
side because it's

00:34:45.085 --> 00:34:46.696
where all the cool stuff is.

00:34:47.456 --> 00:34:49.146
All right, so we
have this guy here,

00:34:49.295 --> 00:34:51.856
let's go explore for a bit.

00:34:51.856 --> 00:34:53.536
Oh, look at that.

00:34:53.536 --> 00:34:56.096
All right, so what we have
here is 2 sets of animation.

00:34:56.556 --> 00:34:58.916
We have one animation that
makes the tree we go from left

00:34:58.916 --> 00:35:02.266
to right and one that makes your
mushrooms squash from, you know,

00:35:02.346 --> 00:35:03.786
a bigger size to smaller size.

00:35:04.336 --> 00:35:05.636
And we also added
some randomness

00:35:05.636 --> 00:35:07.486
to make things rotate
at different times.

00:35:08.186 --> 00:35:10.866
It just makes your scene much
more alive and fun to look at.

00:35:11.666 --> 00:35:13.216
Okay, so let's keep
it exploring here.

00:35:13.786 --> 00:35:16.066
Okay, oh, look at this,
there's a guy here.

00:35:16.746 --> 00:35:18.746
Well, what's the best way
to say hi in a platformer?

00:35:18.886 --> 00:35:20.236
I think it's just to
jump on them, right?

00:35:21.616 --> 00:35:22.096
There ago.

00:35:22.916 --> 00:35:25.376
So, what I did here is just
as I jumped on this guy

00:35:25.376 --> 00:35:27.236
and then the collision
body with the physics body,

00:35:27.736 --> 00:35:30.266
I'm just running in SKAction
to make it, you know, squash.

00:35:31.076 --> 00:35:32.386
All right, so that's
pretty cool.

00:35:32.446 --> 00:35:34.866
Let's go back to the slides.

00:35:38.756 --> 00:35:40.856
So, Warp Transformations
are very powerful

00:35:41.006 --> 00:35:43.636
and enable a broad range of
possibilities for your game.

00:35:43.946 --> 00:35:45.986
So I really hope you're going to
use them and have fun with that.

00:35:45.986 --> 00:35:48.276
And next let's talk

00:35:48.276 --> 00:35:50.726
about per-node attributes
for custom shaders.

00:35:52.916 --> 00:35:54.266
Shaders are awesome.

00:35:54.536 --> 00:35:55.386
I really love shaders.

00:35:55.936 --> 00:35:57.726
And there is a best way for you

00:35:57.726 --> 00:36:00.636
to make exact digital
looks for your game.

00:36:01.096 --> 00:36:03.926
In SpriteKit, we support custom
shaders since the beginning

00:36:04.006 --> 00:36:07.216
with SKShader class which is
basically a frequent shader

00:36:07.356 --> 00:36:10.036
which you apply to your nodes.

00:36:10.486 --> 00:36:13.826
It comes with a few built-in
symbols such as the time,

00:36:13.826 --> 00:36:16.176
the texture, texture
coordinates and many more.

00:36:16.246 --> 00:36:18.486
And if you have any
specific needs,

00:36:18.486 --> 00:36:21.636
you can also specify
it's an in SKUniform

00:36:21.636 --> 00:36:24.186
for your special variables.

00:36:25.036 --> 00:36:27.846
All right, so what about we
build a game using a shader.

00:36:28.006 --> 00:36:29.676
Okay, so I really
love platformers.

00:36:29.676 --> 00:36:30.886
So, what about some platforms.

00:36:30.886 --> 00:36:32.256
Here we go, that's pretty good.

00:36:32.886 --> 00:36:37.466
Okay, I want something
cute, so what about a bunny.

00:36:37.466 --> 00:36:38.656
Oh yeah, that's awesome.

00:36:38.656 --> 00:36:39.956
I love this guy,
he's pretty cute.

00:36:39.956 --> 00:36:43.686
Right? You know what, I'm going
to name my game Dark Bunny.

00:36:43.746 --> 00:36:45.896
So let's put some
bad guys and spikes

00:36:45.896 --> 00:36:48.026
and danger, just like that.

00:36:48.296 --> 00:36:49.266
Right, that's better.

00:36:50.306 --> 00:36:52.546
Unfortunately our bunny's
going to be hit a few times

00:36:53.306 --> 00:36:55.386
and because I want I don't
want to make my game too hard,

00:36:55.386 --> 00:36:56.996
I'm going to have the
help system health system

00:36:56.996 --> 00:36:58.606
and the health bar,
just like this.

00:36:59.226 --> 00:37:00.326
And guess what?

00:37:00.526 --> 00:37:01.716
The health bar is
going to be shader.

00:37:03.226 --> 00:37:03.976
You see it coming, right?

00:37:04.256 --> 00:37:07.746
Okay. So, how would I go
about making a shader, sorry,

00:37:07.746 --> 00:37:09.736
making a health bar
here in SpriteKit?

00:37:10.136 --> 00:37:12.456
So I add a Sprite
for the health bar.

00:37:12.456 --> 00:37:14.496
I have a shader to
control the visuals

00:37:14.576 --> 00:37:16.656
such as the blinking
pattern, the caller

00:37:17.026 --> 00:37:17.966
and how filled in it is.

00:37:18.186 --> 00:37:20.566
So, here our bunny
has only half-life

00:37:20.686 --> 00:37:21.886
so it's only filled halfway.

00:37:21.886 --> 00:37:23.896
And to control these visuals,

00:37:24.006 --> 00:37:25.736
I have a uniform
that I call health.

00:37:26.026 --> 00:37:27.846
It's going to be a flood
value that there is

00:37:27.846 --> 00:37:30.636
from one being full-life
to zero being pretty close

00:37:30.636 --> 00:37:31.876
to not full-life.

00:37:31.986 --> 00:37:35.446
Okay. But because games
are usually more fun

00:37:35.446 --> 00:37:37.876
when you have multiple players,
let's put some guys here.

00:37:37.976 --> 00:37:39.306
We can have up to three players.

00:37:39.816 --> 00:37:42.276
To, that means at any time
it can have someone who's

00:37:42.276 --> 00:37:44.306
full-life, someone
who's half-life

00:37:44.306 --> 00:37:46.246
and someone who's pretty
close to being knocked out.

00:37:47.266 --> 00:37:49.836
Okay, so again, In
SpriteKit, fairly simple.

00:37:49.836 --> 00:37:52.456
I have my Sprite, my
shader, my uniform.

00:37:52.966 --> 00:37:54.846
But now how would I go
if I wanted to make it

00:37:54.996 --> 00:37:56.236
with multiple players?

00:37:56.816 --> 00:37:58.116
Well, I have to do this.

00:37:59.126 --> 00:38:00.766
Yeah, I have to duplicate
my shader

00:38:00.766 --> 00:38:02.416
but that just doesn't
make sense, right?

00:38:02.416 --> 00:38:03.446
Why do we have to do that?

00:38:03.446 --> 00:38:04.426
That's just bad.

00:38:04.426 --> 00:38:07.196
And it's bad because, while
it's the same shader, right?

00:38:07.496 --> 00:38:09.316
And it's going to break
the batching mechanism,

00:38:09.316 --> 00:38:10.446
meaning more draw calls.

00:38:10.446 --> 00:38:12.376
And it's just too
complicated, right?

00:38:12.376 --> 00:38:15.326
Well, if you wanted to
instead do something like this,

00:38:15.326 --> 00:38:19.366
I have only one shader and
it is shared between sprites.

00:38:19.856 --> 00:38:25.076
And, well, starting this
year, you can just do

00:38:25.216 --> 00:38:26.216
that using attributes.

00:38:27.106 --> 00:38:29.416
With custom attributes, you
can just create an attribute,

00:38:29.756 --> 00:38:32.756
attach it to your shader, and
then directly set the values

00:38:33.006 --> 00:38:34.086
on the nodes themself.

00:38:34.426 --> 00:38:36.896
So, here I have a custom
attributes name health

00:38:36.896 --> 00:38:39.786
and I just set the health
value on the Sprite itself.

00:38:39.976 --> 00:38:40.686
It's super simple.

00:38:40.686 --> 00:38:43.916
In Swift, this is
what it looks like.

00:38:44.106 --> 00:38:46.646
I'm creating my attribute
using the SK attribute class.

00:38:46.996 --> 00:38:49.566
I give it a name, so here,
health, the type, float.

00:38:50.306 --> 00:38:51.696
I attach it to my shader.

00:38:52.116 --> 00:38:54.406
Because my shader only
uses one attribute,

00:38:54.406 --> 00:38:55.776
I'm giving a list
of one attribute.

00:38:56.506 --> 00:38:59.126
Lastly I can directly set
the values of the Sprite.

00:38:59.546 --> 00:39:03.716
So, here play one has only
0.2 percent of life left,

00:39:03.716 --> 00:39:07.826
so I'm just doing set attribute
value for attribute name health.

00:39:08.476 --> 00:39:10.996
So, this is very convenient
and simple if you're dealing

00:39:10.996 --> 00:39:13.456
with per-node customization
and shaders.

00:39:14.656 --> 00:39:15.266
All right.

00:39:16.626 --> 00:39:19.686
So, now let's talk about a
few platform specific items.

00:39:19.686 --> 00:39:22.256
And the first one being focus
interaction on Apple TV.

00:39:23.686 --> 00:39:26.176
So, for those of you who've
already been making apps

00:39:26.176 --> 00:39:28.956
for Apple TV, you already know
what focus interaction is.

00:39:29.286 --> 00:39:30.256
But for those of you who do not,

00:39:30.386 --> 00:39:31.906
let me just recap what
happened last year.

00:39:33.046 --> 00:39:36.036
Last year we introduced
the new Apple TV,

00:39:36.616 --> 00:39:39.306
tvOS and its brand-new
user interface as well

00:39:39.306 --> 00:39:41.276
as the Siri remote
and its touchpad.

00:39:41.776 --> 00:39:44.846
So, now one of the major
differences between iPhone

00:39:44.846 --> 00:39:46.866
and Apple TV is interaction.

00:39:47.746 --> 00:39:49.986
So, on iPhone the user's
going to directly interact

00:39:49.986 --> 00:39:51.616
on the phone by touching
the screen.

00:39:52.266 --> 00:39:53.586
On Apple TV on the other hand,

00:39:54.206 --> 00:39:56.316
the user will always have
the controller in his hand

00:39:56.316 --> 00:39:58.276
between him and the interface.

00:39:58.276 --> 00:40:00.456
And we actually call
this interaction

00:40:00.456 --> 00:40:01.656
focus-based interaction.

00:40:01.816 --> 00:40:05.396
So, let me show you what happens
if I was to move my cursor

00:40:05.396 --> 00:40:08.846
in the main menu of the
Apple TV with focusing.

00:40:15.186 --> 00:40:19.086
So, as you can see, we only
have one element focus at a time

00:40:19.086 --> 00:40:21.406
and scrolling ware is
tuned to reader responsive

00:40:21.406 --> 00:40:23.816
and react your fingertip
very well.

00:40:25.066 --> 00:40:27.106
So, in fact, this
is very important.

00:40:27.156 --> 00:40:29.156
And it's so important
that we built our system

00:40:29.256 --> 00:40:31.836
and our frameworks using
focus interaction in mind.

00:40:32.336 --> 00:40:34.706
So it means that if you happen
to make an app using UIKit,

00:40:34.706 --> 00:40:38.156
you don't need to re-create
the focus system interaction.

00:40:38.616 --> 00:40:40.816
All you have to do is
just lay out your views,

00:40:41.216 --> 00:40:43.126
say which one are focusable,
and then you're done.

00:40:43.716 --> 00:40:45.906
It's very simple to use

00:40:45.906 --> 00:40:48.346
and provides a consistent user
experience, whether you are

00:40:48.536 --> 00:40:51.136
in the main menu of Apple
TV or in your application.

00:40:52.156 --> 00:40:54.856
And as a bonus, we support
of course the Siri remote,

00:40:55.166 --> 00:40:57.246
game controllers and many
Bluetooth controllers

00:40:57.246 --> 00:40:58.126
and many, many more.

00:40:58.906 --> 00:41:01.336
If you want to learn more about
focus interaction on Apple TV,

00:41:01.626 --> 00:41:02.566
there is a session this week

00:41:02.686 --> 00:41:04.516
and you can find many
more resources online.

00:41:04.516 --> 00:41:07.496
All right, so the
big news here is

00:41:07.496 --> 00:41:10.076
that we have SpriteKit
support for focus interaction.

00:41:10.816 --> 00:41:11.636
So, that's pretty great.

00:41:11.636 --> 00:41:11.936
Yeah, thank you.

00:41:12.516 --> 00:41:15.936
[ Applause ]

00:41:16.436 --> 00:41:18.196
So, this is actually
pretty great for any kind

00:41:18.196 --> 00:41:20.536
of user interface in your
game such as game menus

00:41:20.906 --> 00:41:23.276
or you could have subbuilder
in our game using focus

00:41:23.396 --> 00:41:26.696
such as a chess game
or a game or many more.

00:41:26.766 --> 00:41:31.796
And the cool thing here is
that it's just so much simpler.

00:41:32.506 --> 00:41:33.766
What you can see
here is DemoBot.

00:41:33.916 --> 00:41:36.686
It's a sample code app
from last year and it used

00:41:36.686 --> 00:41:38.156
to be for iOS and macOS.

00:41:38.156 --> 00:41:42.496
We did a port to tvOS and
it just felt so much better

00:41:42.786 --> 00:41:45.606
to remove all this code for the
interaction and the navigation.

00:41:45.986 --> 00:41:47.516
It was just so much
cleaner, so much simpler.

00:41:48.756 --> 00:41:50.896
Speaking of DemoBot,
let's see how we would go

00:41:50.896 --> 00:41:53.126
about creating this menu
right there using SpriteKit

00:41:53.336 --> 00:41:54.326
and focus interaction.

00:41:54.616 --> 00:41:57.576
The first thing you
need to know is

00:41:57.576 --> 00:42:00.626
that UIKit introduces new
protocol called UIFocusItem

00:42:00.986 --> 00:42:02.856
which conforms to the
UIFocusEnvironment.

00:42:03.296 --> 00:42:06.316
This extends the focus
system to nonview item.

00:42:07.086 --> 00:42:07.996
So, as you have guessed,

00:42:08.166 --> 00:42:10.906
now SKNode is actually
conforming to that as well.

00:42:12.176 --> 00:42:15.306
So, the first thing you need
to do is make a subclass.

00:42:15.606 --> 00:42:16.956
So, here for my menu element,

00:42:16.956 --> 00:42:18.386
I'm going to use
some rectangles.

00:42:18.386 --> 00:42:19.496
I'm going to use a SpriteNode.

00:42:19.976 --> 00:42:21.686
So first, make a subclass.

00:42:21.986 --> 00:42:25.556
Second, you need to override
that canBecomeFocused method

00:42:25.556 --> 00:42:27.226
to true so that your
node is focusable.

00:42:27.226 --> 00:42:32.456
Next you have to obtain your
node into the focus system

00:42:32.826 --> 00:42:34.226
and to do that, you just have

00:42:34.226 --> 00:42:35.896
to set the
isUserInteractionEnabled

00:42:35.896 --> 00:42:36.476
to true.

00:42:37.576 --> 00:42:38.436
And the last thing you need

00:42:38.436 --> 00:42:41.386
to do is override the data
did focus and context,

00:42:41.896 --> 00:42:44.016
which is going to give you
updates on your focus updates.

00:42:44.206 --> 00:42:46.786
So, you can override this
in your view, in your scene

00:42:46.876 --> 00:42:48.846
or any node that actually
makes sense for your app.

00:42:49.586 --> 00:42:52.786
So, here the context subject
gives me the next focused item,

00:42:52.786 --> 00:42:55.496
the previously focused item,
and in my case I'm going to look

00:42:55.496 --> 00:42:58.636
for a menu element and
if I'm hitting this,

00:42:58.636 --> 00:42:59.966
I can just run some SKAction.

00:42:59.966 --> 00:43:02.656
So, this is how it
looks like in action.

00:43:02.696 --> 00:43:05.376
As I finish the game, I am
being prompted with the menu

00:43:05.476 --> 00:43:08.276
and I can just use my Siri
remote to scroll through

00:43:08.276 --> 00:43:10.056
or game controller, it
will just work as well.

00:43:10.266 --> 00:43:12.076
And I have the same
feel as it would have

00:43:12.076 --> 00:43:13.766
in the main menu on Apple TV.

00:43:14.386 --> 00:43:16.406
Again, very simple,
very powerful.

00:43:16.446 --> 00:43:18.886
We recommend highly
for you to use it.

00:43:20.196 --> 00:43:22.276
All right, a pretty
big one here.

00:43:23.126 --> 00:43:24.166
SpriteKit on Apple Watch.

00:43:24.606 --> 00:43:26.926
So, as you have seen,
for watchOS 3.0,

00:43:27.086 --> 00:43:29.266
we brought some frameworks
to Apple Watch.

00:43:30.106 --> 00:43:31.736
And yeah, SpriteKit
is available.

00:43:31.786 --> 00:43:35.406
So, that means that now you can
do very interactive application

00:43:35.406 --> 00:43:38.006
using this high-performance
2D graphics platform.

00:43:38.256 --> 00:43:40.416
And of course we bring
all the stuff you love

00:43:40.416 --> 00:43:43.326
such as particles,
animation, physics, actions

00:43:43.836 --> 00:43:45.516
and all the editors
are compatible

00:43:45.516 --> 00:43:46.666
so you can use the scene editor.

00:43:46.666 --> 00:43:48.056
You can use the particle editor.

00:43:48.056 --> 00:43:51.336
We have all the editing tools
such as new performance gauge

00:43:51.336 --> 00:43:52.686
that Ross just told it out.

00:43:53.146 --> 00:43:54.196
All of this is just working.

00:43:55.516 --> 00:43:57.996
So, a typical SpriteKit
game looks like this.

00:43:58.566 --> 00:44:02.546
I have an SKView and then
it contains an SKScene

00:44:03.336 --> 00:44:05.066
which itself contains
multiple nodes.

00:44:06.286 --> 00:44:08.996
Such as the SpriteNode,
a ShapeNode, whatever.

00:44:10.086 --> 00:44:13.226
On Apple Watch, though,
there's no notion of view.

00:44:13.636 --> 00:44:15.506
Instead, you present
your content using

00:44:15.506 --> 00:44:16.506
WatchKit interface.

00:44:16.736 --> 00:44:18.886
And in fact it's going to be
the major difference here.

00:44:19.456 --> 00:44:20.946
So, instead of using an SKView,

00:44:21.156 --> 00:44:24.306
I will be using a
WKInterfaceSKScene.

00:44:24.306 --> 00:44:26.156
It looks pretty much it.

00:44:26.726 --> 00:44:29.636
All right, so let's see how we
would go from an existing game

00:44:29.636 --> 00:44:33.476
on iOS to make it a
support for watchOS.

00:44:33.856 --> 00:44:34.886
So, that's some code,

00:44:34.886 --> 00:44:36.976
that's some sample
code for a game on iOS.

00:44:37.376 --> 00:44:39.046
So, pretty typical,
I have my view.

00:44:39.046 --> 00:44:40.976
I'm doing some set up on
my scene and everything.

00:44:41.466 --> 00:44:41.856
All right.

00:44:41.856 --> 00:44:44.506
So, what I have to do now
is just click on file.

00:44:45.006 --> 00:44:48.856
new, target, select
the template I want.

00:44:48.856 --> 00:44:53.806
So here I'm going to use a game
app template for my target.

00:44:54.276 --> 00:44:54.926
Click next.

00:44:55.526 --> 00:44:56.776
Give it the best name
ever, so I'm going

00:44:56.776 --> 00:44:57.876
to call it Apple Watch Game.

00:44:58.376 --> 00:45:00.526
And then click next.

00:45:00.796 --> 00:45:01.656
And you're done.

00:45:01.986 --> 00:45:02.896
No, seriously, you're done.

00:45:03.606 --> 00:45:05.276
Xcode is going to create
all the files you need

00:45:05.276 --> 00:45:09.046
such as the storyboard and the
interface controller as well.

00:45:09.096 --> 00:45:12.026
And if you take a look at the
storyboard, we actually wired

00:45:12.026 --> 00:45:13.186
up everything for you already.

00:45:13.726 --> 00:45:17.546
So, this guy is actually
connected to my outlet

00:45:17.546 --> 00:45:18.686
as you can see at the top here.

00:45:18.846 --> 00:45:20.516
And you're just ready to go.

00:45:20.556 --> 00:45:22.866
You have your WKInterfaceScene

00:45:23.366 --> 00:45:25.766
and you have the same
stuff you had before.

00:45:25.806 --> 00:45:27.006
So, it's very simple.

00:45:27.246 --> 00:45:33.626
All right, so some compatibility
now on the Apple Watch.

00:45:34.176 --> 00:45:36.126
There's no SKAudioNode
on Apple Watch

00:45:36.126 --> 00:45:38.366
but of course you can
still play a sound using

00:45:38.366 --> 00:45:40.006
SKAction playSoundFileNamed.

00:45:41.006 --> 00:45:43.766
There's no SKVidioNode
but you can use the

00:45:43.766 --> 00:45:45.616
WKInterfaceMovie instead.

00:45:46.186 --> 00:45:49.636
And lastly if you're doing a
special effect using CI filters,

00:45:49.696 --> 00:45:52.346
you can still do them but
you have to use an SKShader.

00:45:53.576 --> 00:45:56.636
So, we're really excited
about what you can do

00:45:56.636 --> 00:45:58.096
with Apple Watch in SpriteKit.

00:45:58.406 --> 00:46:00.896
It's going to enable you to
make even more interactive

00:46:00.896 --> 00:46:02.446
and fun apps with the platform.

00:46:05.336 --> 00:46:05.956
All right.

00:46:07.236 --> 00:46:07.946
Thank you.

00:46:08.516 --> 00:46:12.116
[ Applause ]

00:46:12.616 --> 00:46:14.976
So, since we have more and more
platforms, let me just talk

00:46:14.976 --> 00:46:17.426
about a few best
practices for SpriteKit.

00:46:18.156 --> 00:46:20.066
The first one being
Asset Catalog.

00:46:20.626 --> 00:46:21.826
Use Asset Catalog.

00:46:22.306 --> 00:46:22.856
It's great.

00:46:23.026 --> 00:46:25.386
It works very well with
SpriteKit and it provides a lot

00:46:25.386 --> 00:46:26.736
of cool features for your game

00:46:26.736 --> 00:46:28.616
to make things simple
and faster.

00:46:29.246 --> 00:46:31.186
The first thing being
the Sprite Atlas.

00:46:31.826 --> 00:46:34.146
In Asset Catalog, you
can make a texture atlas

00:46:34.146 --> 00:46:37.346
which is a fundamental piece
of optimization for tile maps

00:46:37.426 --> 00:46:40.376
where you have multiple textures
combined into one big texture

00:46:40.816 --> 00:46:43.686
which reduces the number of
draw calls to a very low amount.

00:46:43.686 --> 00:46:47.606
Next we have support for
multiple asset sizes such as,

00:46:47.606 --> 00:46:50.836
you know, 1x, 2x, 3x, which is
great for multiple platforms

00:46:50.836 --> 00:46:52.726
such as the iPad,
iPhone, watchOS.

00:46:53.126 --> 00:46:56.346
And again, you don't need to
do any conditionals, like oh,

00:46:56.346 --> 00:46:57.676
is this that platform
or this one.

00:46:57.676 --> 00:47:00.306
No, you just call your
texture and you're done.

00:47:00.306 --> 00:47:01.156
We do rest for you.

00:47:02.306 --> 00:47:04.106
We have support for
on-demand resource

00:47:04.106 --> 00:47:05.786
which is fundamental for tvOS.

00:47:07.196 --> 00:47:08.966
And lastly we do app slicing,

00:47:08.966 --> 00:47:10.336
meaning that if you
have resource

00:47:10.336 --> 00:47:13.286
that are specific platform,
we'll be only using this

00:47:13.286 --> 00:47:15.066
for the bundle and
then compiling them

00:47:15.066 --> 00:47:17.506
into the runtime binaries
as small as possible

00:47:17.866 --> 00:47:19.526
which gives you a
very small bundle

00:47:19.526 --> 00:47:22.056
and a small download
on the App Store.

00:47:23.106 --> 00:47:26.706
So yeah, Asset Catalog
is great, go for it.

00:47:26.976 --> 00:47:29.246
Next, about performance
and battery life.

00:47:29.246 --> 00:47:32.286
So, a big change in
SpriteKit this year is

00:47:32.286 --> 00:47:34.126
that we do not render
all the time.

00:47:34.126 --> 00:47:36.946
Now, we only render when
your scene is dirty.

00:47:37.316 --> 00:47:39.726
So, if something change, we
will be issuing some draw calls

00:47:39.726 --> 00:47:42.286
but if nothing changed, we
will not be doing anything.

00:47:42.866 --> 00:47:45.586
So, if you're using
any debiting tools

00:47:45.586 --> 00:47:46.796
such as the performance gauge,

00:47:47.156 --> 00:47:48.596
you might see the
needle not moving.

00:47:48.826 --> 00:47:50.376
And it's actually a good
thing because it means

00:47:50.376 --> 00:47:52.236
that you are not
rendering anything new.

00:47:53.636 --> 00:47:55.176
If you need to control
the frame weight,

00:47:55.176 --> 00:47:57.416
you we also have a couple
ways for you to do that.

00:47:58.046 --> 00:48:00.266
The first one being
preferredFramesPerSecond

00:48:00.266 --> 00:48:00.866
on SKView.

00:48:01.546 --> 00:48:03.876
At any time, you can
just set the frame rate

00:48:03.876 --> 00:48:06.866
to whatever you want, which can
be convenient for, you know,

00:48:06.866 --> 00:48:10.216
if you have the menu and you
have a low frame rate need here.

00:48:10.586 --> 00:48:12.996
And when you come back to your
game, you can go back to 60

00:48:12.996 --> 00:48:15.166
or 30 FPS based on
your performance needs.

00:48:15.166 --> 00:48:18.516
The second one is a
bit more advanced.

00:48:19.026 --> 00:48:20.256
It's a delegate in SKView

00:48:20.636 --> 00:48:23.186
which is giving you
thisShouldRenderAtTime method

00:48:23.306 --> 00:48:25.416
with the absolute
time of the game.

00:48:25.836 --> 00:48:27.736
So, this method is going
to be called at each frame

00:48:27.736 --> 00:48:29.896
and you can decide based
on the time whether yes

00:48:29.896 --> 00:48:31.236
or no you want to
render the frame.

00:48:31.536 --> 00:48:33.616
So, this gives you a
very fine-grained control

00:48:33.616 --> 00:48:34.936
of the rendering for your game.

00:48:35.036 --> 00:48:35.186
All right.

00:48:35.386 --> 00:48:38.016
And that's it.

00:48:38.436 --> 00:48:40.316
So, what's new in SpriteKit?

00:48:40.316 --> 00:48:41.146
A lot this year.

00:48:41.706 --> 00:48:44.766
The first being the scene
outline view, which allows you

00:48:44.766 --> 00:48:46.526
to manipulate your
scene graph from Xcode.

00:48:47.746 --> 00:48:49.136
The GameplayKit integration.

00:48:49.406 --> 00:48:51.026
If you're already using
GameplayKit component,

00:48:51.026 --> 00:48:53.576
now you can just set them on
your nodes directly using Xcode.

00:48:53.916 --> 00:48:57.866
FPS high performance gauge which
gives you a real-time breakdown

00:48:57.866 --> 00:49:00.366
of your scene performance,
very, very useful.

00:49:01.486 --> 00:49:04.936
Tile maps for complex yet
high performance levels.

00:49:05.406 --> 00:49:08.516
Warp Transformation to
make you game have fun

00:49:08.576 --> 00:49:11.366
and complex animation using
just a grid of points.

00:49:12.836 --> 00:49:15.276
Per-node attributes
for custom shaders

00:49:15.276 --> 00:49:17.816
if you're using per-node
customization and building

00:49:17.816 --> 00:49:19.346
of shaders, very convenient.

00:49:20.566 --> 00:49:24.056
And of course focus interaction
on Apple TV and SpriteKit

00:49:24.056 --> 00:49:26.316
on Apple Watch, which is
the big one for this year.

00:49:26.586 --> 00:49:28.926
If you want to learn more,

00:49:29.186 --> 00:49:31.596
you can go to the
developer.apple.com website.

00:49:32.596 --> 00:49:35.286
We have a lot of sessions
for gaming this year but most

00:49:35.286 --> 00:49:36.136
of them are already done.

00:49:36.136 --> 00:49:37.906
But you can still see
them online by going

00:49:37.906 --> 00:49:39.256
on the website we I
just showed earlier.

00:49:40.066 --> 00:49:42.446
And tomorrow you can go to
What's New in Game Center

00:49:42.446 --> 00:49:44.956
as well as Game Technologies
for Apple Watch if you want

00:49:44.956 --> 00:49:47.416
to learn more about these
platforms and frameworks.

00:49:47.766 --> 00:49:48.976
All right.

00:49:49.516 --> 00:49:52.500
[ Applause ]