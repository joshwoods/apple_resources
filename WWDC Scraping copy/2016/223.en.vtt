WEBVTT

00:00:07.516 --> 00:00:18.500
[ Music ]

00:00:24.516 --> 00:00:28.576
[ Applause ]

00:00:29.076 --> 00:00:29.896
>> Hello everyone.

00:00:29.896 --> 00:00:32.216
Welcome. My name is
Vipul Ved Prakash.

00:00:32.216 --> 00:00:36.496
I work on the Siri and Search at
Apple, and today I'll be joined

00:00:36.496 --> 00:00:38.776
by my colleague John
Hornkvist, and we are going

00:00:38.776 --> 00:00:40.386
to show you what's
new in Search APIs

00:00:40.386 --> 00:00:42.116
and how you can make
the most of them.

00:00:42.806 --> 00:00:46.826
As you know, Spotlight has been
becoming a more powerful search

00:00:46.826 --> 00:00:50.396
tool in recent releases of iOS.

00:00:50.396 --> 00:00:52.836
In iOS 8 we introduced
ability to search

00:00:52.836 --> 00:00:56.296
through internet sources, like
App Store, Maps and Wikipedia.

00:00:56.406 --> 00:01:00.336
And then in iOS 9 we
significantly increased the

00:01:00.336 --> 00:01:03.326
scope and introduced
sources like music,

00:01:03.856 --> 00:01:06.206
currency conversions,
live sports scores,

00:01:06.206 --> 00:01:07.826
web, and much, much more.

00:01:07.826 --> 00:01:11.386
Perhaps most importantly,
we introduced simple

00:01:11.386 --> 00:01:14.936
and powerful ways in which we
could make your apps content

00:01:14.936 --> 00:01:16.166
searchable through Spotlight.

00:01:16.546 --> 00:01:20.436
So in iOS 10, today we
are announcing extensions

00:01:20.596 --> 00:01:24.086
of these Search APIs that will
provide even deeper search

00:01:24.086 --> 00:01:25.156
of your app's content.

00:01:25.806 --> 00:01:30.126
We've also made Spotlight easier
to use and easier to find.

00:01:30.126 --> 00:01:34.816
So let me start by showing
you some examples of things

00:01:34.816 --> 00:01:36.486
that we've done to Spotlight.

00:01:37.816 --> 00:01:40.606
Spotlight is now present
in Notification Center,

00:01:40.876 --> 00:01:44.396
which makes it a lot
faster to get to.

00:01:44.466 --> 00:01:45.876
Let's look at an example here.

00:01:45.876 --> 00:01:48.286
User receives a message
with a question in it.

00:01:48.286 --> 00:01:51.076
Very typical thing that happens.

00:01:51.456 --> 00:01:53.476
And they want to run
a search to answer it.

00:01:54.046 --> 00:01:57.856
Instead of having to quit
messages and go to Home screen,

00:01:57.986 --> 00:02:01.176
pull down Spotlight, they can
simply drag Spotlight on top

00:02:01.176 --> 00:02:06.796
of messages, run their
search and find the answer.

00:02:08.196 --> 00:02:09.536
It's super convenient.

00:02:11.456 --> 00:02:16.776
We've also introduced Spotlight
on Lock screen and added support

00:02:16.776 --> 00:02:18.976
to quickly preview
results with 3D Touch.

00:02:19.746 --> 00:02:21.566
That's see what this looks like.

00:02:22.916 --> 00:02:25.596
Suppose you're having an
argument with a friend

00:02:25.596 --> 00:02:27.176
on where Steph Curry was born.

00:02:27.176 --> 00:02:30.156
You can go to the Lock screen,

00:02:31.226 --> 00:02:35.976
run your search,

00:02:36.206 --> 00:02:39.136
see the result, and now you can
use 3D Touch to preview these --

00:02:44.646 --> 00:02:46.016
and find the one you
were looking for,

00:02:46.016 --> 00:02:47.626
which is Wikipedia in this case.

00:02:48.566 --> 00:02:49.746
Really, really convenient.

00:02:49.746 --> 00:02:52.196
And, of course, when you're in
Lock screen, the only results

00:02:52.196 --> 00:02:56.046
that you present are public
results from the internet.

00:02:58.576 --> 00:03:00.536
Now, another neat
feature that we've added

00:03:00.536 --> 00:03:03.856
to Spotlight is query
suggestions, which appear

00:03:03.856 --> 00:03:06.676
in the quick type
area above the keyword

00:03:06.676 --> 00:03:07.816
when you type in the query.

00:03:07.816 --> 00:03:09.096
Let's look at an example.

00:03:09.716 --> 00:03:11.886
Here the user searches
for banjo, and we know,

00:03:11.886 --> 00:03:15.416
based on past queries,
that two common completions

00:03:15.416 --> 00:03:18.296
for banjo are banjo
chords and banjo tuner.

00:03:18.516 --> 00:03:20.826
So if the result that they
are looking for is not already

00:03:20.826 --> 00:03:23.876
on the screen, they can pick one
of these and get to the answer.

00:03:23.876 --> 00:03:26.976
This will make a lot
of queries a lot faster

00:03:27.116 --> 00:03:28.166
to execute in Spotlight.

00:03:28.166 --> 00:03:30.276
Now, we've done many
more improvements.

00:03:30.276 --> 00:03:34.516
We've improved spell correction
for the app launch use case.

00:03:34.566 --> 00:03:37.056
We've improved support
for Japanese

00:03:37.056 --> 00:03:39.866
and Chinese scripts on device.

00:03:39.866 --> 00:03:42.546
And we've made relevant,
in general, much better.

00:03:42.546 --> 00:03:44.336
And all these changes,
of course,

00:03:44.336 --> 00:03:47.736
apply to content that's
inserted while Search APIs.

00:03:49.276 --> 00:03:52.316
So now let's turn our
attention to Search APIs.

00:03:53.416 --> 00:03:55.316
Now, as many of you
may remember,

00:03:55.316 --> 00:03:58.566
we introduced three
Search APIs in iOS 9.

00:03:59.096 --> 00:04:00.806
There's Core Spotlight,
which allows you

00:04:00.806 --> 00:04:04.746
to insert user specific or
user created content right

00:04:04.746 --> 00:04:06.616
on Spotlight's device index.

00:04:07.836 --> 00:04:09.866
We also introduced
NSUserActivity,

00:04:09.866 --> 00:04:13.136
a searchable version of this,
that provides an easy way

00:04:13.136 --> 00:04:17.236
to index everything that the
user has seen inside of your app

00:04:17.286 --> 00:04:20.255
so that they can search for
it and get back to it easily.

00:04:20.255 --> 00:04:24.496
And finally, we introduced
a Universal Links index,

00:04:24.786 --> 00:04:28.456
which is an index on the
server side consisting of links

00:04:28.656 --> 00:04:32.046
that we have discovered
by crawling app websites.

00:04:32.226 --> 00:04:34.226
And we designed these
APIs to work in concert,

00:04:34.226 --> 00:04:36.496
so whether the results
are coming from the device

00:04:36.676 --> 00:04:39.076
or the server, they
blend together

00:04:39.576 --> 00:04:43.466
to provide a seamless experience
of searching your app.

00:04:44.636 --> 00:04:48.806
I'm happy to announce
that over 50,000 apps

00:04:48.806 --> 00:04:50.626
in the App Store have
an app that Search APIs.

00:04:50.786 --> 00:04:51.976
It's really incredible.

00:04:52.516 --> 00:04:57.666
[ Applause ]

00:04:58.166 --> 00:05:01.446
I think something really
neat to see is how the users

00:05:01.446 --> 00:05:04.226
who Search APIs have improved
day to day interactions

00:05:04.226 --> 00:05:05.426
that our customers are having

00:05:05.646 --> 00:05:07.716
with your app and
iOS as a whole.

00:05:07.716 --> 00:05:09.646
I have some of my
favorite examples

00:05:09.646 --> 00:05:10.606
that I'd like to show you.

00:05:12.116 --> 00:05:14.306
This is actually
a recent example.

00:05:14.306 --> 00:05:17.396
I'm planning a trip to
Maui, Hawaii, this weekend,

00:05:17.396 --> 00:05:21.086
and I've been planning this trip
over the last month on and off.

00:05:21.716 --> 00:05:23.446
Now, various pieces
of information

00:05:23.446 --> 00:05:26.046
like hotel reservations and
tickets, they are somewhere

00:05:26.046 --> 00:05:29.506
on my device, and typically
the way I find them is I go

00:05:29.506 --> 00:05:31.566
to the app or the website,

00:05:31.566 --> 00:05:34.906
or dig through the
e-mail to find them.

00:05:34.906 --> 00:05:39.506
But with Search APIs, this is
what my experience looks like.

00:05:39.506 --> 00:05:43.386
The apps that I've used to
make these reservations,

00:05:43.386 --> 00:05:45.566
have added salient
pieces of information

00:05:45.726 --> 00:05:47.716
to Spotlight's index
using Core Spotlight.

00:05:48.136 --> 00:05:53.226
So I can see my flight ticket, I
can see the hotel that I booked

00:05:53.226 --> 00:05:54.086
through Hotel Tonight,

00:05:54.086 --> 00:05:56.946
and a couple dinner reservations
I made on Open Table.

00:05:56.946 --> 00:06:00.506
I can find more information
by tapping on these results,

00:06:00.506 --> 00:06:01.936
like what is my check-in time

00:06:04.366 --> 00:06:05.976
or address of one of
these restaurants.

00:06:11.056 --> 00:06:12.266
And you'll also notice

00:06:12.946 --> 00:06:15.536
that I have some results
here from Pinterest.

00:06:15.536 --> 00:06:16.936
I've been using the
Pinterest app

00:06:17.416 --> 00:06:20.136
to explore the things I
can do when I'm in Maui.

00:06:20.136 --> 00:06:22.776
Now, Pinterest uses
NSUserActivity

00:06:23.256 --> 00:06:26.246
to index everything that I have
looked at inside of the app,

00:06:26.246 --> 00:06:29.346
and I can tap on one
of these results.

00:06:29.346 --> 00:06:30.976
And continue my exploration.

00:06:36.246 --> 00:06:39.496
So this is a really
fantastic experience

00:06:39.496 --> 00:06:43.326
for doing travel search and
to find all the information

00:06:43.326 --> 00:06:44.496
that I know exists on my device.

00:06:44.496 --> 00:06:48.426
And what we've seen is, in
general, indexing content

00:06:48.426 --> 00:06:52.476
that your users want to get back
to works really, really well.

00:06:53.776 --> 00:06:56.726
Another example I want to
share is around contacts.

00:06:56.726 --> 00:07:00.406
Contacts is one of the most
popular search use cases

00:07:00.596 --> 00:07:01.316
in Spotlight.

00:07:01.666 --> 00:07:03.496
Here I'm searching
for buddy Allen.

00:07:03.496 --> 00:07:07.586
I see his contacts, which
is a native iPhone contact,

00:07:07.916 --> 00:07:12.196
but I also see his Skype profile
and a couple of conversations

00:07:12.196 --> 00:07:15.036
that I'm having with him
in Yahoo Mail and WhatsApp,

00:07:15.036 --> 00:07:17.946
and I can easily get back
to these conversations.

00:07:21.156 --> 00:07:25.176
And this is so powerful because
it allows me to get this sort

00:07:25.176 --> 00:07:29.386
of centralized view of people
that I know, and allows me

00:07:29.386 --> 00:07:31.976
to have conversations with them
in the channel of their choice.

00:07:38.056 --> 00:07:41.566
Now, what we have seen is
that users are naturally going

00:07:41.566 --> 00:07:43.526
to Spotlight for all the things

00:07:43.526 --> 00:07:45.256
that Spotlight supports
natively,

00:07:46.016 --> 00:07:49.616
and if you have content in these
categories, it's a great way

00:07:49.616 --> 00:07:51.506
to broaden that search
experience,

00:07:51.806 --> 00:07:54.746
as well as drive
engagements to your app.

00:07:57.496 --> 00:07:59.686
Now, finally, let's
look at an example

00:07:59.736 --> 00:08:01.176
of Universal Links index.

00:08:01.586 --> 00:08:06.386
wikiHow is a high quality how-to
resource that has hundreds

00:08:06.386 --> 00:08:08.976
of thousands of articles
on a variety of subjects.

00:08:09.476 --> 00:08:12.066
Here I'm searching for a
critical first aid question,

00:08:12.066 --> 00:08:14.806
how to perform CPR, and
Spotlight presents a bevy

00:08:14.806 --> 00:08:20.896
of results from web, YouTube, as
well as a section from wikiHow.

00:08:22.296 --> 00:08:24.336
Now, wikiHow uses
Universal Links

00:08:24.336 --> 00:08:25.966
and they have a popular app.

00:08:26.376 --> 00:08:29.236
So we have indexed their
articles on the server

00:08:29.436 --> 00:08:33.895
and we present them for
appropriate queries.

00:08:34.046 --> 00:08:36.576
It's pretty comprehensive
results that by clicking on one

00:08:36.576 --> 00:08:39.856
of these results, I go
to this very clearly

00:08:39.856 --> 00:08:40.885
illustrated article.

00:08:42.196 --> 00:08:48.226
The index of wikiHow has really
added a whole new capability

00:08:48.576 --> 00:08:52.036
to Spotlight, which is what
makes Search APIs so powerful.

00:08:53.066 --> 00:08:56.206
With that, let's start
looking at what's new

00:08:56.206 --> 00:08:58.826
in Search APIs in iOS 10.

00:08:59.616 --> 00:09:04.656
The first feature we are adding
is called Continue Search

00:09:04.656 --> 00:09:04.966
in App.

00:09:04.966 --> 00:09:08.796
And for a lot of queries
users want to look

00:09:08.796 --> 00:09:12.026
at a larger result set, or
you may not have been able

00:09:12.026 --> 00:09:15.226
to add the right result to
Spotlight for various reasons.

00:09:15.806 --> 00:09:21.876
So for now apps have an option
to present a search in App Punch

00:09:21.876 --> 00:09:26.066
Out on the top right corner

00:09:26.066 --> 00:09:29.116
of their section,
as you can see here.

00:09:29.116 --> 00:09:36.736
And tapping on this takes
the user into your app

00:09:37.136 --> 00:09:38.066
with the search query.

00:09:38.246 --> 00:09:41.606
So you can continue the search
query inside of the app.

00:09:41.606 --> 00:09:45.066
It's super cool.

00:09:46.476 --> 00:09:49.736
The second feature we are
introducing is Core Spotlight

00:09:49.736 --> 00:09:50.106
Search API.

00:09:50.136 --> 00:09:54.186
It's a slightly overloaded name,
but there what's happening is

00:09:54.186 --> 00:09:57.236
that you're adding
all these items

00:09:57.296 --> 00:10:00.756
to Spotlight's search
index by Core Spotlight API.

00:10:01.286 --> 00:10:03.706
Wouldn't it be awesome if
you could use this index

00:10:03.956 --> 00:10:05.466
to power search inside
your own app?

00:10:05.466 --> 00:10:07.056
I think it would be.

00:10:07.056 --> 00:10:09.966
And this is exactly what
Core Spotlight Search API allows

00:10:09.966 --> 00:10:13.056
you to do.

00:10:13.206 --> 00:10:14.986
The third feature we
are introducing is a way

00:10:14.986 --> 00:10:18.226
to estimate popularity of
deep links using differential

00:10:18.226 --> 00:10:20.796
privacy, the technology that
was mentioned in the keynote.

00:10:21.366 --> 00:10:24.646
We will discuss this more later
when we talk about ranking.

00:10:24.726 --> 00:10:29.636
And finally, by popular
request we've added a feature

00:10:29.636 --> 00:10:31.196
to our web markup preview tool

00:10:31.196 --> 00:10:36.236
that lets you visually inspect
your schematized results before

00:10:36.236 --> 00:10:38.136
you put them in a
Universal Links index.

00:10:38.706 --> 00:10:43.956
And in addition to these we
made many, many enhancements

00:10:43.956 --> 00:10:45.706
to Search APIs based
on your feedback.

00:10:45.706 --> 00:10:50.676
And now I will invite John to
do an introduction of these APIs

00:10:50.676 --> 00:10:51.976
and do deeper dives
into these new features.

00:10:52.516 --> 00:10:55.696
[ Applause ]

00:10:56.196 --> 00:10:59.526
>> Let's start talking about
how to leverage the Search APIs.

00:11:00.446 --> 00:11:03.876
In the next half hour I'm
going to cover some things

00:11:03.876 --> 00:11:06.736
that you have to do for your
application to work great

00:11:06.736 --> 00:11:09.416
with Spotlight, some
things you'd want to do

00:11:10.076 --> 00:11:12.886
to give users a great
experience, and some new APIs

00:11:12.886 --> 00:11:14.826
that we've added to
make it easier for you

00:11:14.826 --> 00:11:16.536
to accomplish what you need.

00:11:18.356 --> 00:11:21.266
So roughly in the order that
you need to implement this,

00:11:21.776 --> 00:11:24.036
I'm going to talk about
getting your content

00:11:24.656 --> 00:11:26.816
into the index available
to Spotlight

00:11:27.246 --> 00:11:28.476
and keeping it up to date.

00:11:29.916 --> 00:11:31.396
Presentation and
user experience,

00:11:32.906 --> 00:11:36.096
launching into your app,
whether for restoring content

00:11:36.716 --> 00:11:39.756
or for search continuation,
and then I'll talk

00:11:39.756 --> 00:11:43.706
about the new Search API
before Vipul comes back

00:11:44.626 --> 00:11:48.086
to give you an overview ranking.

00:11:48.446 --> 00:11:49.646
So we have three technologies

00:11:49.856 --> 00:11:51.466
that together cover
most use cases.

00:11:52.336 --> 00:11:54.846
Core Spotlight, for all that
you have on the device.

00:11:56.146 --> 00:11:58.546
NSUserActivity for app history.

00:11:59.666 --> 00:12:01.836
And Universal Links
with web markup

00:12:02.026 --> 00:12:03.726
for public online content.

00:12:04.446 --> 00:12:07.996
Of course, you can use
all these three together.

00:12:07.996 --> 00:12:12.036
As an example, consider
a recipe application.

00:12:13.226 --> 00:12:16.306
It provides an interface to
a vast collection of recipes.

00:12:16.856 --> 00:12:21.346
There are hosts on the website,
so deep links are a great fit.

00:12:22.356 --> 00:12:23.976
The app may also have
a favorites feature,

00:12:24.316 --> 00:12:25.986
and for that you would
use Core Spotlight.

00:12:27.786 --> 00:12:30.466
Your users will want
to get back to content

00:12:30.466 --> 00:12:31.066
that they've looked at,

00:12:31.706 --> 00:12:34.226
so for the best experience
you use app history

00:12:34.736 --> 00:12:36.856
through NSUserActivity as well.

00:12:39.006 --> 00:12:39.206
All right.

00:12:40.086 --> 00:12:41.806
For those of you who
haven't gone off to lunch,

00:12:42.466 --> 00:12:44.986
instead of conducting Search
APIs, let's dive in and talk

00:12:44.986 --> 00:12:47.976
about indexing content, and
we'll start with Core Spotlight.

00:12:49.836 --> 00:12:52.976
Core Spotlight is an API
for indexing on iOS.

00:12:53.396 --> 00:12:55.616
It's on device and
supports file protection.

00:12:55.616 --> 00:12:58.016
So you can index the
user's private content.

00:12:59.166 --> 00:13:01.546
Your app is in charge and
you decide what you want

00:13:01.546 --> 00:13:02.296
to add to the index.

00:13:03.336 --> 00:13:07.466
You can index all that your app
has to offer, be it favorites

00:13:07.466 --> 00:13:12.126
and bookmarks, messages and
e-mails, documents, images,

00:13:12.206 --> 00:13:15.286
music, videos, game
levels, jump-off points

00:13:15.286 --> 00:13:17.516
in your app, and much more.

00:13:17.866 --> 00:13:21.136
So there are two
basic operations.

00:13:22.606 --> 00:13:25.096
First you need to add
items to the index.

00:13:26.486 --> 00:13:29.696
To do this you create a
CSSearchableItemAttributeSet.

00:13:30.386 --> 00:13:36.996
This contains the metadata and
other content for your items.

00:13:37.886 --> 00:13:42.126
Then you set at least
one attribute.

00:13:42.126 --> 00:13:43.536
In this case we're
setting the display name.

00:13:46.476 --> 00:13:49.486
You create a searchable
item using the AttributeSet.

00:13:50.536 --> 00:13:54.596
You use the uniqueIdentifier,
which Spotlight will use

00:13:55.396 --> 00:13:58.276
to identify this item
for any future operations

00:13:58.506 --> 00:14:00.926
and which is also used when we
launch your application later.

00:14:02.186 --> 00:14:06.936
And the domainIdentifier,
which allows you to set

00:14:06.936 --> 00:14:09.236
and shared property
across many items

00:14:09.616 --> 00:14:10.946
which can later use
for deletion.

00:14:11.636 --> 00:14:15.546
And then you ask Core Spotlight
to add the item to the index.

00:14:16.616 --> 00:14:18.786
When your callback is called,

00:14:19.546 --> 00:14:21.536
the item is then safely
committed to storage

00:14:22.546 --> 00:14:25.606
or an error will be passed
back to the callback log.

00:14:27.886 --> 00:14:31.336
For deleting content
there are three APIs.

00:14:32.106 --> 00:14:34.896
You can delete a specific
item by its identifier.

00:14:35.146 --> 00:14:37.576
For example, if the
user deletes a document.

00:14:41.436 --> 00:14:45.306
You can also delete groups of
items by the domainIdentifier

00:14:45.306 --> 00:14:46.126
that I mentioned earlier.

00:14:46.706 --> 00:14:49.276
This is great if the user
signs out of an account,

00:14:49.666 --> 00:14:53.946
ends a subscription, or
something of that sort.

00:14:54.146 --> 00:14:57.886
Finally, you can delete all
content for your application.

00:14:58.326 --> 00:15:00.426
This is useful if
you have something

00:15:00.426 --> 00:15:02.956
like an incompatible
version change and you need

00:15:02.956 --> 00:15:04.906
to clear the index and
start from scratch.

00:15:05.856 --> 00:15:08.146
And this is also
called by the system

00:15:08.146 --> 00:15:09.476
if your app gets uninstalled.

00:15:13.816 --> 00:15:15.696
Now let's go over
some best practices

00:15:15.816 --> 00:15:17.336
and some more advanced
scenarios.

00:15:17.966 --> 00:15:20.086
We'll cover registering
as an index delegate,

00:15:20.696 --> 00:15:24.166
using Core Spotlight client state
to handle progressive indexing,

00:15:25.406 --> 00:15:26.726
some performance considerations

00:15:27.466 --> 00:15:29.606
and creating a Core Spotlight
extension.

00:15:32.706 --> 00:15:34.326
You want to register
as an index delegate

00:15:34.566 --> 00:15:36.626
because this lets
Spotlight initiate indexing

00:15:37.126 --> 00:15:39.326
when your app is first
launched on the system,

00:15:39.806 --> 00:15:41.056
perhaps after restoring
a backup,

00:15:41.956 --> 00:15:44.456
when the user installs
your app, and sometimes

00:15:44.456 --> 00:15:45.346
for disaster recovery.

00:15:46.686 --> 00:15:49.406
It also lets Spotlight
reach out and request

00:15:49.406 --> 00:15:50.966
that you reindex
a particular item.

00:15:51.666 --> 00:15:55.176
This is commonly because
you've set an expiration date

00:15:55.176 --> 00:15:58.296
and Spotlight wants to check
that the item has truly expired.

00:16:00.706 --> 00:16:02.816
So to be an index
delegate you need

00:16:02.816 --> 00:16:04.706
to implement the
CSSearchableIndexDelegate

00:16:04.706 --> 00:16:05.566
protocol.

00:16:06.286 --> 00:16:07.516
This has two required methods.

00:16:08.996 --> 00:16:12.236
ReindexAllSearchableItems,
which is called when you need

00:16:12.236 --> 00:16:14.806
to add everything to the index.

00:16:14.976 --> 00:16:17.366
If you track indexing
of individual items

00:16:17.366 --> 00:16:20.366
in your own database, you want
to clear the indexing state

00:16:21.296 --> 00:16:22.406
when this call is received,

00:16:22.996 --> 00:16:24.396
unless you're using
client state,

00:16:24.396 --> 00:16:25.446
as we'll discuss in a moment.

00:16:27.216 --> 00:16:30.856
The second call is reindex
items with identifiers.

00:16:31.416 --> 00:16:34.696
When this is called,
you should look up items

00:16:34.746 --> 00:16:38.486
that Spotlight is requesting
and add them to the index

00:16:38.486 --> 00:16:39.786
or delete them as appropriate.

00:16:40.606 --> 00:16:44.736
For both methods you call the
acknowledgmentHandler only

00:16:44.736 --> 00:16:47.606
when you're completely done
and receive the last callback

00:16:47.606 --> 00:16:49.206
for any work you
issued to Core Spotlight.

00:16:49.846 --> 00:16:54.446
This ensures that we know that
your content is fully indexed

00:16:54.636 --> 00:16:56.236
and that we don't have to
call you in the future.

00:16:57.226 --> 00:16:59.436
If you don't call this,
we might call you again,

00:16:59.766 --> 00:17:02.556
and if you call it early,

00:17:03.406 --> 00:17:05.056
you might not get a
chance to finish indexing.

00:17:06.746 --> 00:17:10.296
For some applications we found
that it's more convenient

00:17:10.296 --> 00:17:14.526
to use client state than to try
to manage the indexing callbacks

00:17:14.626 --> 00:17:15.945
with your own database
transactions.

00:17:18.896 --> 00:17:22.915
The client state provides
an asynchronous way

00:17:22.915 --> 00:17:25.776
of keeping your content
in Spotlight in sync.

00:17:27.136 --> 00:17:30.756
Because it's asynchronous you
essentially have an eventual

00:17:30.756 --> 00:17:35.896
consistency model, but you
can keep Spotlight up to date

00:17:35.896 --> 00:17:39.086
with your own database
without any redundant work.

00:17:39.776 --> 00:17:43.336
The client state is an
opaque token that is stored

00:17:43.336 --> 00:17:46.146
in the Spotlight index that
you update as you index

00:17:46.146 --> 00:17:48.246
and then fetch back when
your app is launched again.

00:17:49.636 --> 00:17:53.686
Typically, the easiest way to
do this is to put annotations

00:17:53.686 --> 00:17:56.646
in your own database, for
example, the sequence number

00:17:57.986 --> 00:18:00.616
that you then as a client
state with Spotlight.

00:18:01.386 --> 00:18:04.296
After relaunch you would
check this client state

00:18:04.876 --> 00:18:06.716
and if it doesn't match
with your expectations,

00:18:07.046 --> 00:18:08.756
you would index any
item in your database

00:18:09.456 --> 00:18:10.686
with a sequence number higher

00:18:10.686 --> 00:18:12.086
than the one you fetched
back to Spotlight.

00:18:13.586 --> 00:18:17.466
Another approach is to use
the sequence number as a way

00:18:18.296 --> 00:18:20.456
of knowing where to start
the journal playback.

00:18:21.086 --> 00:18:24.916
This can be really, really
good for keeping your content

00:18:24.916 --> 00:18:28.476
up to date, asynchronously,
and for making sure

00:18:28.606 --> 00:18:29.936
that you don't use
too much power.

00:18:33.376 --> 00:18:35.376
So to work with client
state you need

00:18:35.376 --> 00:18:36.976
to create a named
index instance.

00:18:37.676 --> 00:18:40.936
The name lets us know what
client state you want.

00:18:41.716 --> 00:18:43.836
You can only get the client
state for your own application,

00:18:43.946 --> 00:18:46.746
but you may have more than one
database that you're indexing

00:18:47.546 --> 00:18:49.106
and then you would
use a separate name

00:18:49.226 --> 00:18:50.436
for each of those databases.

00:18:51.606 --> 00:18:53.906
With the index you
begin an index batch.

00:18:54.976 --> 00:18:56.436
You'd add searchable
items as usual.

00:18:57.606 --> 00:19:00.826
The completionHandler is not
particularly important here

00:19:00.976 --> 00:19:04.036
because you'll get a completion
when you finish the batch.

00:19:04.916 --> 00:19:11.416
You compute your picked state
and you pass that to Spotlight

00:19:13.056 --> 00:19:14.716
when you finish the batch.

00:19:16.176 --> 00:19:19.086
And here you do need
to pay attention

00:19:19.706 --> 00:19:20.956
to the completionHandler.

00:19:23.356 --> 00:19:25.936
When your app next launches,
you fetch the client state,

00:19:26.356 --> 00:19:30.226
and you figure out what
operations you need to run

00:19:30.226 --> 00:19:32.826
to bring Spotlight in
sync with your state.

00:19:34.286 --> 00:19:36.106
Because the client state
is kept with the batch

00:19:36.206 --> 00:19:38.676
into the index, it
ensures integrity.

00:19:39.236 --> 00:19:41.336
You can replay exactly
operations that you need

00:19:42.096 --> 00:19:43.476
to bring them both into sync.

00:19:44.626 --> 00:19:45.776
So when your app next starts,

00:19:46.116 --> 00:19:48.026
you create an index
instance using the same name,

00:19:49.116 --> 00:19:50.156
you fetch the client state.

00:19:50.796 --> 00:19:52.186
And this is an asynchronous
call.

00:19:52.186 --> 00:19:55.776
So in the callback you
deal with any errors

00:19:57.146 --> 00:19:59.906
and check whether the state you
got back is what you desired.

00:20:00.656 --> 00:20:03.836
If not, you call the method
to bring them up to date.

00:20:04.536 --> 00:20:06.986
Now let's talk about some
performance considerations.

00:20:07.566 --> 00:20:11.316
Spotlight is really, really fast
so you want to minimize overhead

00:20:11.316 --> 00:20:15.316
on your side to make sure
your app can keep up.

00:20:16.256 --> 00:20:18.866
You want to optimize any
access to files or databases,

00:20:20.016 --> 00:20:23.296
and pay careful attention
to your memory use.

00:20:24.716 --> 00:20:26.996
Do notice that each call to
Core Spotlight has a cost,

00:20:27.996 --> 00:20:31.676
so pass batches of items instead
of single items when possible.

00:20:32.896 --> 00:20:35.266
And just making batches as small

00:20:35.266 --> 00:20:38.316
as ten items will still
reduce the IPC overhead

00:20:38.476 --> 00:20:39.346
by an order of magnitude.

00:20:41.676 --> 00:20:44.596
Since your app will be
performing indexing while the

00:20:44.666 --> 00:20:46.976
user is using it, make sure that
you don't block the main thread.

00:20:49.276 --> 00:20:51.846
And finally, to avoid
interfering with UI run

00:20:52.006 --> 00:20:53.826
on a background thread.

00:20:55.476 --> 00:20:55.996
All right.

00:20:55.996 --> 00:20:57.966
Let us talk about
Core Spotlight extensions.

00:20:58.776 --> 00:21:01.406
The extension can index
when your app isn't running.

00:21:03.156 --> 00:21:09.496
This lets you catch up after
a disaster recovers in backup,

00:21:09.946 --> 00:21:12.106
or when your icons expire.

00:21:12.286 --> 00:21:15.266
Spotlight can reach out to your
extension instead of reaching

00:21:15.266 --> 00:21:17.756
out to your application,
which is great

00:21:17.756 --> 00:21:19.366
because your application
might not be running.

00:21:21.016 --> 00:21:23.146
The interface to the
extension is the same

00:21:23.146 --> 00:21:24.246
as for the index delegate.

00:21:25.056 --> 00:21:26.206
So if you can factor your code

00:21:26.476 --> 00:21:31.466
so that the index delegate
is separate, it's really easy

00:21:31.916 --> 00:21:33.336
to implement the
extension as well.

00:21:35.376 --> 00:21:36.816
To make content available

00:21:36.816 --> 00:21:39.226
to your extension you
can use share.groups.

00:21:39.796 --> 00:21:41.346
To find out more about this,

00:21:41.586 --> 00:21:42.846
take a look at last
year's session

00:21:43.246 --> 00:21:44.816
on App Extension Best Practices.

00:21:45.946 --> 00:21:48.296
Next let's look at
keeping content up to date.

00:21:48.736 --> 00:21:50.916
As I mentioned, you can
use expiration dates

00:21:51.476 --> 00:21:54.856
to keep stale content from
accumulating in the index.

00:21:55.146 --> 00:21:59.346
Core Spotlight will call your
app around the expiration date

00:22:00.196 --> 00:22:01.886
and you can update
the expiration time

00:22:01.886 --> 00:22:03.966
or update the data for
the item if you need to.

00:22:05.436 --> 00:22:07.316
If you need to get new
content into Spotlight,

00:22:08.526 --> 00:22:09.816
you can use background fetch.

00:22:10.516 --> 00:22:12.956
This will allow your app to
launch in the background,

00:22:14.116 --> 00:22:17.706
letting you take care of adding
content and getting it indexed.

00:22:18.966 --> 00:22:24.006
Finally, if you have more of
a push model with irregular

00:22:24.266 --> 00:22:28.196
or infrequent updates, you can
use silent remote notifications

00:22:29.496 --> 00:22:32.536
to let your server tell you
that updating is necessary.

00:22:34.046 --> 00:22:35.746
To find out more about
using background fetch

00:22:35.746 --> 00:22:39.346
and silent remote notification
take a look at the What's New

00:22:39.346 --> 00:22:43.086
with Multitasking
session from WWDC 2013.

00:22:43.686 --> 00:22:46.726
That's it for indexing
with Core Spotlight.

00:22:47.596 --> 00:22:50.246
Next let's talk about app
history with NSUserActivity.

00:22:52.546 --> 00:22:55.936
NSUserActivity was introduced
for Handoff in iOS 8.

00:22:56.746 --> 00:22:58.506
It lets you create
a representation

00:22:58.506 --> 00:23:01.346
of your application's current
state that can be passed

00:23:01.346 --> 00:23:04.046
to another device,
and since iOS 9 stored

00:23:04.046 --> 00:23:05.706
in the Spotlight
index for app history.

00:23:06.056 --> 00:23:13.156
You submit the activities as
the user is browsing in your app

00:23:13.776 --> 00:23:15.866
for content that the
user may remember

00:23:15.866 --> 00:23:18.986
and want to get back to.

00:23:19.336 --> 00:23:20.956
So the question you
want to ask yourself

00:23:21.056 --> 00:23:25.346
about when the user activity
should be indexed is simply will

00:23:25.346 --> 00:23:26.756
the user want to
get back to this.

00:23:27.556 --> 00:23:29.906
If the same item might be
indexed with Core Spotlight,

00:23:30.646 --> 00:23:32.286
then the answer is
almost always yes.

00:23:33.906 --> 00:23:38.426
The 2014 session on Adopting
Handoff has great information

00:23:38.426 --> 00:23:40.516
on how to use NSUserActivity.

00:23:42.446 --> 00:23:45.476
To make NSUserActivity available
for search you need to mark it

00:23:45.476 --> 00:23:47.026
as searchable and add index

00:23:47.026 --> 00:23:49.676
of the metadata using
CSSearchableItemAttributeSet.

00:23:52.096 --> 00:23:53.426
You mark it as searchable

00:23:54.036 --> 00:23:56.216
by setting the eligibleForSearch
property to true.

00:23:56.876 --> 00:24:02.216
You can also mark NSUserActivity
as eligible for public indexing

00:24:02.316 --> 00:24:04.136
to make it a candidate
for the online index,

00:24:04.476 --> 00:24:06.036
as Vipul will get
into a bit later.

00:24:07.286 --> 00:24:09.906
This done, it will show up as
a result in Spotlight Search

00:24:10.056 --> 00:24:12.816
and your application can
revisit the user activity

00:24:13.336 --> 00:24:14.766
when the user selects
it in Spotlight.

00:24:22.326 --> 00:24:25.006
Your users just have to
remember a single keyword

00:24:26.776 --> 00:24:28.926
from what they saw to be
able to get right back

00:24:28.926 --> 00:24:30.256
to the content in
your application.

00:24:33.676 --> 00:24:34.246
All right.

00:24:35.286 --> 00:24:38.716
So, as I said, you can use
Core Spotlight and NSUserActivity

00:24:38.976 --> 00:24:40.196
for the very same content.

00:24:42.656 --> 00:24:43.576
The difference is

00:24:43.576 --> 00:24:46.806
that NSUserActivity reflects
what the user has done

00:24:46.806 --> 00:24:47.646
in your application.

00:24:48.296 --> 00:24:50.856
Core Spotlight is about
what your app has.

00:24:50.856 --> 00:24:55.196
So if you use both, you
can relate NSUserActivity

00:24:55.556 --> 00:24:59.066
to the CSSearchableItem for the
same content to help ranking

00:24:59.216 --> 00:25:00.936
and avoid duplication
of the results.

00:25:02.136 --> 00:25:05.096
This is done by setting the
relatedUniqueIdentifier property

00:25:05.096 --> 00:25:08.876
in the AttributeSet to
the uniqueIdentifier

00:25:08.876 --> 00:25:12.646
of the CSSearchableItem that
you want to relate it to.

00:25:12.926 --> 00:25:15.476
This also ties the lifetime
of the NSUserActivity

00:25:16.186 --> 00:25:18.526
to the CSSearchableItem,
protecting you

00:25:18.526 --> 00:25:20.526
against leaving data
on the device

00:25:20.916 --> 00:25:23.436
after the user has
deleted private content.

00:25:25.816 --> 00:25:30.616
However, not all data is
private and managed by the user.

00:25:31.726 --> 00:25:34.166
For example, for the recipe
application that we talked

00:25:34.166 --> 00:25:37.076
about earlier, you may want
to relate NSUserActivity

00:25:38.136 --> 00:25:43.456
to a possible CSSearchableItem,
an item that doesn't exist yet,

00:25:43.506 --> 00:25:45.816
something that the user might
make a favorite in the future.

00:25:46.736 --> 00:25:49.986
If you were to use the
relatedUniqueIdentifier,

00:25:49.986 --> 00:25:53.506
Core Spotlight would immediately
delete the NSUserActivity

00:25:53.866 --> 00:25:57.496
as you try to add it because the
related item doesn't exist yet.

00:25:58.356 --> 00:26:01.036
To solve this, we're
adding a new property,

00:26:01.436 --> 00:26:04.276
weakRelatedUniqueIdentifier
which lets you bind weakly

00:26:04.926 --> 00:26:05.906
to the CSSearchableItem.

00:26:06.996 --> 00:26:11.206
It can exist before the
CSSearchableItem and will remain

00:26:11.206 --> 00:26:12.746
when the CSSearchableItem
is deleted.

00:26:13.666 --> 00:26:16.296
As for the
relatedUniqueIdentifier,

00:26:16.666 --> 00:26:19.126
you simply have to set the
property in the AttributeSet

00:26:19.366 --> 00:26:20.416
for the NSUserActivity.

00:26:23.276 --> 00:26:28.316
Now, the downside is that when
the CSSearchableItem is deleted,

00:26:29.226 --> 00:26:31.026
the NSUserActivity remains.

00:26:31.856 --> 00:26:34.216
So if you have concerns
about the lifetime

00:26:34.216 --> 00:26:37.116
of the searchable item
or the NSUserActivity,

00:26:37.506 --> 00:26:41.376
you do need to delete
NSUserActivity yourself.

00:26:42.276 --> 00:26:46.166
Fortunately, in iOS 10
we're making this possible.

00:26:47.726 --> 00:26:50.196
We're adding domainIdentifiers
to NSUserActivities.

00:26:51.666 --> 00:26:54.196
It's part of the
CSSearchableItemAttributeSet

00:26:54.926 --> 00:26:58.106
and it allows you to
delete NSUserActivities

00:26:58.426 --> 00:26:59.676
by the domainIdentifier,

00:27:00.126 --> 00:27:02.626
just like you can
for CSSearchableItem.

00:27:03.376 --> 00:27:05.046
If you use both
CSSearchableItems

00:27:05.126 --> 00:27:07.276
and NSUserActivities,
it's a good idea

00:27:07.326 --> 00:27:09.316
to use the same
domainIdentifier.

00:27:10.136 --> 00:27:14.666
So that's indexing with
NSUserActivity in iOS 10.

00:27:15.356 --> 00:27:18.636
Next let's talk about
Universal Links and web markup.

00:27:19.746 --> 00:27:23.336
The content driving your
app may live on the web,

00:27:23.896 --> 00:27:26.206
not locally inside the app.

00:27:26.376 --> 00:27:28.696
If this content is public,
you can use web markup

00:27:28.786 --> 00:27:29.556
to make a searchable

00:27:29.556 --> 00:27:31.746
for Spotlight via the
Universal Link index.

00:27:32.706 --> 00:27:35.476
This is perfect for content
hosted on the website

00:27:35.476 --> 00:27:37.956
and available in your
app, and a great solution

00:27:37.956 --> 00:27:40.746
when your content is too
large to fit on the device.

00:27:41.806 --> 00:27:43.576
Because your content has
a presence on the web,

00:27:44.356 --> 00:27:49.916
results can be displayed to
users that don't have your app,

00:27:50.756 --> 00:27:53.626
which lets you reach new
users and drive app installs.

00:27:54.876 --> 00:27:58.316
Finally, these results can
be shown in both Spotlight

00:27:58.316 --> 00:28:00.586
and Safari, which makes
your content available

00:28:00.586 --> 00:28:04.456
to even more users.

00:28:04.566 --> 00:28:07.306
So to implement indexing

00:28:07.306 --> 00:28:09.936
with Universal Links you
need to allow indexing.

00:28:10.906 --> 00:28:13.016
Allow Applebot to call your
website [inaudible] text,

00:28:13.016 --> 00:28:16.706
and let Apple Note
into the site.

00:28:17.026 --> 00:28:18.726
Specify the call URL

00:28:18.796 --> 00:28:22.826
when submitting the
app to the App Store.

00:28:23.006 --> 00:28:25.896
For deep links we strongly
recommend Universal Links.

00:28:26.316 --> 00:28:28.676
For this you need to
implement dual authentication

00:28:28.736 --> 00:28:31.476
for the website and the app.

00:28:31.476 --> 00:28:33.326
Implement the
continueUserActivity method

00:28:33.326 --> 00:28:36.166
in your app delegate to ensure
that your app handles deep links

00:28:36.166 --> 00:28:38.476
when the user selects
the results.

00:28:39.636 --> 00:28:42.206
Markup your content with
schema.org or Open Graph

00:28:42.556 --> 00:28:44.866
to provide a rich display for
attributes in your content.

00:28:46.086 --> 00:28:48.396
And use the Search
API validation tool

00:28:49.676 --> 00:28:52.756
to test deep links, markup,
title, description, and more.

00:28:55.116 --> 00:28:58.516
Take a look at the Introducing
Search APIs Session from 2015

00:28:59.026 --> 00:29:04.476
and the Developer documentation
on Universal Links.

00:29:04.706 --> 00:29:07.866
So these are the schemas
that we support today,

00:29:07.926 --> 00:29:09.606
and we plan some
more in the future.

00:29:11.296 --> 00:29:13.516
Pay attention to interaction
count and aggregate rating.

00:29:13.956 --> 00:29:18.856
These are very useful for
ranking results for your app.

00:29:18.856 --> 00:29:24.076
Apple provides a test tool at
search.developer.apple.com,

00:29:24.496 --> 00:29:25.966
that you should consult

00:29:25.966 --> 00:29:28.986
if you implement the
deep links for your app.

00:29:29.946 --> 00:29:32.686
It now displays a visual
representation of your result,

00:29:32.986 --> 00:29:35.846
including supported
schema [inaudible] markup.

00:29:36.776 --> 00:29:39.576
The information from the
validation tool can help you

00:29:39.576 --> 00:29:40.976
visualize pieces of information

00:29:40.976 --> 00:29:43.486
that the Applebot web
crawler has indexed,

00:29:43.486 --> 00:29:45.956
including the title,
description, markup and URL.

00:29:45.956 --> 00:29:50.816
Now you've seen how to index
content using our three APIs,

00:29:50.816 --> 00:29:52.586
and there's a good
chance that you'll want

00:29:52.586 --> 00:29:56.736
to use them all together
even for the same content.

00:30:01.056 --> 00:30:02.726
So the most important
thing to remember

00:30:02.726 --> 00:30:04.346
when using multiple APIs is

00:30:04.376 --> 00:30:07.236
to link items representing
the same content together

00:30:07.236 --> 00:30:08.156
across the APIs.

00:30:09.166 --> 00:30:12.046
By setting NSUserActivity's
relatedUniqueIdentifier

00:30:12.266 --> 00:30:14.396
to Core Spotlight's
uniqueIdentifier,

00:30:15.056 --> 00:30:19.946
Core Spotlight's content URL, and
NSUserActivity's webpage URL,

00:30:21.056 --> 00:30:24.426
to the URL of the webpage, you
tell Spotlight that all records

00:30:24.476 --> 00:30:26.296
in the index represent
the same item,

00:30:27.516 --> 00:30:29.236
which allows search
to de-duplicate.

00:30:30.336 --> 00:30:35.446
It also provides strength
to the ranking of items.

00:30:35.626 --> 00:30:36.636
All right.

00:30:36.636 --> 00:30:39.016
Now we've covered three ways of
getting content into the index;

00:30:40.306 --> 00:30:45.246
Core Spotlight for content,
NSUserActivity for app history,

00:30:45.696 --> 00:30:47.776
and Universal Links
with web markup

00:30:48.166 --> 00:30:52.876
for public content
available through the web.

00:30:53.066 --> 00:30:54.606
Next let's talk about how

00:30:54.606 --> 00:30:56.336
to present this information
to the user.

00:30:59.596 --> 00:31:02.196
To get a great presentation
in Spotlight you want

00:31:02.196 --> 00:31:03.196
to set a good thumbnail.

00:31:03.946 --> 00:31:06.206
By default Spotlight
will use your app icon

00:31:07.246 --> 00:31:09.526
which makes it hard to
distinguish results at a glance.

00:31:10.696 --> 00:31:12.266
This doesn't matter much
if you're just going

00:31:12.266 --> 00:31:15.396
to get a single result,
but if you get multiple,

00:31:15.686 --> 00:31:16.606
it makes a big difference.

00:31:18.156 --> 00:31:19.626
Just as important
as the thumbnail,

00:31:19.696 --> 00:31:21.256
and perhaps more, is the title.

00:31:21.656 --> 00:31:23.776
A good title is not
just great visually,

00:31:24.036 --> 00:31:26.126
it's also what users most
frequently search on.

00:31:26.866 --> 00:31:31.276
After the thumbnail and
the title you'll want

00:31:31.276 --> 00:31:33.666
to set other fields that are
suitable for your content.

00:31:34.026 --> 00:31:37.356
A description is great when
available, as is rating,

00:31:37.476 --> 00:31:40.216
rating description, date
attributes for items

00:31:40.306 --> 00:31:43.666
that are time bound, such as
travel reservations, dates,

00:31:43.696 --> 00:31:47.716
reminders, events, and so forth.

00:31:48.866 --> 00:31:53.736
For documents, general
metadata, such as file size

00:31:53.736 --> 00:31:55.556
and page count, are
helpful as well.

00:31:57.156 --> 00:31:59.786
If you set the right content
type for your content,

00:32:00.076 --> 00:32:02.936
Spotlight can also do a
better job of displaying it.

00:32:03.316 --> 00:32:04.446
Let's look at some examples.

00:32:05.916 --> 00:32:10.866
The Hotel Tonight app makes
good use of the thumbnail,

00:32:11.196 --> 00:32:14.326
showing an easily identifiable
landmark, as well as a title

00:32:14.486 --> 00:32:15.656
and informative description.

00:32:20.076 --> 00:32:24.566
You can get the same with web
markup by setting the og:image,

00:32:24.736 --> 00:32:28.926
og:title and og:description.

00:32:29.336 --> 00:32:32.496
Open Table uses the title
description, the rating,

00:32:32.596 --> 00:32:33.926
with rating description
attributes,

00:32:34.216 --> 00:32:36.486
to let the user get
great information

00:32:36.936 --> 00:32:40.086
to choose the right result
before jumping into the app.

00:32:41.016 --> 00:32:43.326
In making the same attributes
available in web markup,

00:32:44.016 --> 00:32:47.166
you ensure that the user will
get a consistent experience

00:32:47.806 --> 00:32:49.766
whether they're getting the
results from the web crawler

00:32:49.976 --> 00:32:51.976
or from the local device index.

00:32:58.046 --> 00:33:01.106
A great user experience is not
just about the presentation,

00:33:01.366 --> 00:33:04.086
but also about what data you
make available for search.

00:33:05.126 --> 00:33:07.226
Setting attributes that
the user can understand

00:33:08.166 --> 00:33:11.126
and remember makes your
content quickly accessible.

00:33:12.816 --> 00:33:17.406
Conversely, setting misleading
attributes in metadata

00:33:17.406 --> 00:33:19.136
or stuffing content and keywords

00:33:19.206 --> 00:33:21.326
with dictionary words will
cause your results to show

00:33:21.326 --> 00:33:23.666
up frequently, but
rarely be selected,

00:33:23.876 --> 00:33:24.866
which will annoy the user

00:33:25.326 --> 00:33:27.516
and have a strong negative
affect on your ranking.

00:33:29.776 --> 00:33:33.996
Another aspect of a great user
experience is being able to get

00:33:34.076 --> 00:33:36.026
to the salient part
of the result

00:33:36.256 --> 00:33:37.646
in as few steps as possible.

00:33:38.496 --> 00:33:42.906
Enabling quick actions,
like directions and calling,

00:33:42.906 --> 00:33:45.456
has significant value
for your users.

00:33:46.466 --> 00:33:50.466
Finally, when a user
selects an item,

00:33:50.746 --> 00:33:54.086
you want to launch directly
to it as quickly as you can

00:33:54.236 --> 00:33:55.666
and without interstitials

00:33:56.206 --> 00:33:57.926
or multistep builds
that impede the user.

00:33:58.726 --> 00:33:59.976
Let's look at some examples.

00:34:02.396 --> 00:34:05.256
Redfin's app provides
attractive looking results,

00:34:05.606 --> 00:34:07.916
and by setting the latitude
and longitude attributes

00:34:08.016 --> 00:34:11.446
and enabling navigation, the app
lets the user punch out directly

00:34:11.446 --> 00:34:13.646
to Maps to go look
at a property.

00:34:13.896 --> 00:34:18.406
Similarly, here is a great
use of the call action result.

00:34:19.556 --> 00:34:22.545
You can get the same by setting
the phone number's property

00:34:22.735 --> 00:34:25.636
and support phone call
properties for Spotlight.

00:34:26.366 --> 00:34:29.876
On seeing the result, a user
that already is familiar

00:34:29.876 --> 00:34:31.556
with the location
can immediately call

00:34:31.716 --> 00:34:33.295
and reserve a table.

00:34:34.346 --> 00:34:37.226
For web markup you can
accomplish the same

00:34:37.926 --> 00:34:41.025
by using the postal address
and telephone schemas.

00:34:42.226 --> 00:34:45.036
Next let's talk about
launching your application.

00:34:49.045 --> 00:34:52.466
For both Core Spotlight and app
history we use NSUserActivity

00:34:52.466 --> 00:34:53.356
to restore the state.

00:34:54.726 --> 00:34:56.216
Your app delegate
will get called

00:34:56.216 --> 00:34:57.446
with continueUserActivity.

00:34:58.006 --> 00:35:00.126
You examine the NSUserActivity's
activity type

00:35:00.266 --> 00:35:02.486
and the user info
dictionary if necessary.

00:35:03.456 --> 00:35:05.376
If you're being launched
because the user selected the

00:35:05.376 --> 00:35:06.766
CSSearchableItem in Spotlight,

00:35:07.296 --> 00:35:10.136
the activity type will be
CSSearchableItemActionType,

00:35:10.676 --> 00:35:13.926
and you retrieve the identifier
from the user info dictionary

00:35:14.256 --> 00:35:16.516
by using CSSearchable
ItemActivityIdentifier.

00:35:17.326 --> 00:35:21.106
The 2014 session Introducing
Handoff goes into further detail

00:35:21.106 --> 00:35:22.996
on how to launch
NSUserActivity's review

00:35:22.996 --> 00:35:23.676
and activity type.

00:35:24.806 --> 00:35:28.426
For Universal Links, once
again, we use NSUserActivity.

00:35:29.216 --> 00:35:30.936
So your app delegate
will get called

00:35:31.026 --> 00:35:32.176
with continueUserActivity.

00:35:33.086 --> 00:35:36.416
As usual, you examine the
NSUserActivity's activity type,

00:35:36.916 --> 00:35:40.306
which will be
NSUserActivityTypeBrowsingWeb.

00:35:41.596 --> 00:35:44.106
You parse the URL
and take the user

00:35:44.446 --> 00:35:46.486
to the part indicated
by the URL.

00:35:47.486 --> 00:35:48.116
That's launching.

00:35:49.216 --> 00:35:50.996
Now let's look at a new feature.

00:35:53.876 --> 00:35:58.996
In iOS 10 we've added a
feature to allow the user

00:35:58.996 --> 00:36:03.426
to continue search
right in your app.

00:36:03.676 --> 00:36:05.576
Conduct human results
for Spotlight

00:36:06.466 --> 00:36:09.766
to display will show an
affordance, and you should opt

00:36:09.766 --> 00:36:11.626
for Spotlight Search
continuation

00:36:11.626 --> 00:36:14.216
so the user can go
directly to the app.

00:36:14.216 --> 00:36:16.636
If you already support
search, it's trivial to adopt.

00:36:18.376 --> 00:36:21.496
It lets you leverage your
customized search interface

00:36:22.126 --> 00:36:25.596
and has been widely adopted
by our internal apps.

00:36:26.176 --> 00:36:29.116
It's another great way of
getting increased engagement

00:36:29.376 --> 00:36:30.356
with your application.

00:36:30.616 --> 00:36:33.246
The user is taken
directly from Spotlight

00:36:33.746 --> 00:36:36.386
into the search experience
that you already have.

00:36:46.336 --> 00:36:46.626
Now

00:36:47.516 --> 00:36:51.946
[ Applause ]

00:36:52.446 --> 00:36:52.816
Thank you.

00:36:54.416 --> 00:36:57.496
To support this in your
own application you need

00:36:57.496 --> 00:37:01.846
to add a key to your
info.plist which declares

00:37:01.846 --> 00:37:02.756
that you support the feature.

00:37:06.796 --> 00:37:09.056
Your app delegate will get
called with a new activity type,

00:37:09.796 --> 00:37:11.706
CSQueryContinuationActionType,

00:37:12.346 --> 00:37:15.816
and the new query string will
be passed in the user info

00:37:15.886 --> 00:37:17.446
and a CSSearchQueryString key.

00:37:17.506 --> 00:37:20.716
At this point you can
invoke your own search UI

00:37:21.076 --> 00:37:22.226
with the same query string,

00:37:22.686 --> 00:37:24.386
letting the user continue
the search in your app.

00:37:25.416 --> 00:37:28.196
To avoid confusion, it's
usually a good idea to make sure

00:37:28.196 --> 00:37:30.426
that your search results
are somewhat consistent

00:37:30.426 --> 00:37:31.056
with Spotlight.

00:37:31.666 --> 00:37:34.716
Since Spotlight is based on
prefix search, we recommend

00:37:34.716 --> 00:37:35.946
that you use similar
search rules.

00:37:36.246 --> 00:37:40.066
And if you can't support prefix
search, consider taking the user

00:37:40.326 --> 00:37:44.736
to a completion interface.

00:37:44.736 --> 00:37:47.106
Another way of ensuring
consistent with Spotlight is

00:37:47.106 --> 00:37:48.696
to use Core Spotlight's
own Search API,

00:37:49.526 --> 00:37:55.496
which is the approach taken by
many of our own internal apps.

00:37:57.236 --> 00:38:00.146
Core Spotlight Search API
makes it easy for you

00:38:00.146 --> 00:38:03.776
to implement search
of your own data.

00:38:03.776 --> 00:38:06.496
It uses the data that you
already provided Core Spotlight

00:38:06.496 --> 00:38:07.316
for Spotlight Search.

00:38:09.116 --> 00:38:14.846
It writes consistency
with the rest of the US,

00:38:14.896 --> 00:38:17.026
and is already used by many
of our own applications,

00:38:17.026 --> 00:38:18.706
including Mail, Messages
and Notes.

00:38:19.506 --> 00:38:22.436
It avoids overhead
so you don't have

00:38:22.436 --> 00:38:24.176
to maintain an additional
search index,

00:38:24.876 --> 00:38:28.686
as it's the same index
used by Spotlight.

00:38:29.236 --> 00:38:32.026
The index provides full
metadata and content search.

00:38:33.556 --> 00:38:35.686
If all your content
is on the device,

00:38:35.746 --> 00:38:38.106
Core Spotlight can be a
complete solution for search.

00:38:38.906 --> 00:38:42.366
If you have a mixture of
on-device and online content,

00:38:42.736 --> 00:38:44.496
you can combine queries
and merger cells,

00:38:45.016 --> 00:38:47.406
getting responsiveness from
Core Spotlight on the device

00:38:47.406 --> 00:38:50.036
and completeness from
your online index.

00:38:50.896 --> 00:38:53.626
Mail uses Core Spotlight
not just for search,

00:38:54.396 --> 00:38:56.026
but also to create
search suggestions

00:38:56.246 --> 00:38:57.596
and to make complex queries.

00:38:58.366 --> 00:39:00.356
This is a great way to
take advantage of the power

00:39:00.356 --> 00:39:02.606
of Core Spotlight Search
while keeping the user

00:39:02.606 --> 00:39:03.276
interface simple.

00:39:05.576 --> 00:39:08.626
A Core Spotlight Search
API has created data

00:39:08.626 --> 00:39:11.646
that you've given Spotlight,
but your data is protected

00:39:12.036 --> 00:39:13.036
from other applications.

00:39:13.816 --> 00:39:15.526
The query engine is
fast and scalable

00:39:15.866 --> 00:39:18.346
so you get excellent
responsiveness in your app.

00:39:18.646 --> 00:39:21.096
The query syntax allows
complex, full inquiries,

00:39:21.506 --> 00:39:23.936
as well as range searches,
numerical and date searches,

00:39:24.076 --> 00:39:26.206
and a set of powerful
text message features.

00:39:26.686 --> 00:39:28.076
For those of you
that are familiar

00:39:28.076 --> 00:39:29.936
with the metadata
framework on Mac OS,

00:39:30.346 --> 00:39:31.856
this syntax will
feel very familiar.

00:39:33.786 --> 00:39:36.386
Here's an overview of the most
commonly used search operations.

00:39:36.386 --> 00:39:39.486
As you can see, Core Spotlight
supports a full range

00:39:39.486 --> 00:39:40.996
of search comparators, as well

00:39:40.996 --> 00:39:44.306
as the Boolean operators
AND, OR and NOT.

00:39:46.496 --> 00:39:50.336
In addition, Core Spotlight lets
you customize string matching

00:39:50.436 --> 00:39:51.176
to suit your needs.

00:39:51.866 --> 00:39:55.086
If you want case insensitive
search, you add the c flag.

00:39:56.056 --> 00:39:59.676
If you want to ignore
diacritics, such as umlauts,

00:40:00.426 --> 00:40:02.086
if they are not important

00:40:02.086 --> 00:40:04.156
in the current language,
you use the d flag.

00:40:04.886 --> 00:40:08.476
And if you want to match on
words within a field instead

00:40:08.476 --> 00:40:10.706
of anchoring your searches at
the beginning of the field,

00:40:10.906 --> 00:40:12.256
you specify the w flag.

00:40:13.106 --> 00:40:15.646
This, by the way, is
implied for text content.

00:40:16.146 --> 00:40:19.026
And if you want multiple words
to be dealt with individually,

00:40:20.606 --> 00:40:24.266
then you pass the t flag and the
query string will be tokenized.

00:40:25.336 --> 00:40:26.706
So let's look at an example.

00:40:27.946 --> 00:40:29.266
We're implementing
a search function

00:40:29.866 --> 00:40:31.436
that takes the user
query as input.

00:40:32.286 --> 00:40:34.356
We make sure to cancel any
currently running query

00:40:34.506 --> 00:40:37.416
so that we don't have multiple
queries running concurrently,

00:40:37.576 --> 00:40:38.986
as this will slow
down the new query.

00:40:40.536 --> 00:40:44.226
Because we're dealing with
user input, we make sure

00:40:44.226 --> 00:40:45.426
to escape the query string.

00:40:47.616 --> 00:40:50.806
We use the double star syntax to
create a query that will match

00:40:51.286 --> 00:40:52.676
on either content or metadata.

00:40:53.686 --> 00:40:55.626
The escape user input is
tasked as a search string,

00:40:56.456 --> 00:40:59.236
and we had the cdw
and t operators,

00:40:59.346 --> 00:41:01.986
which creates a case
insensitive, locale aware,

00:41:01.986 --> 00:41:05.466
diacritics insensitive, word
matching, tokenized search.

00:41:06.766 --> 00:41:08.836
With a query string we
create a query object.

00:41:09.716 --> 00:41:12.256
We request the display
name to be fetched,

00:41:13.176 --> 00:41:15.766
and this will be available
in the AttributeSet

00:41:15.766 --> 00:41:16.946
of the searchable
items returned.

00:41:17.536 --> 00:41:22.526
We set the foundItemsHandler,
which will receive batches

00:41:22.526 --> 00:41:25.456
of searchable items if there
are no results for your query.

00:41:25.836 --> 00:41:30.396
And a completionHandler
will get called once,

00:41:30.396 --> 00:41:33.306
either with an error or when the
query has finished successfully.

00:41:36.256 --> 00:41:38.516
In our completionHandler
we can opt it

00:41:38.516 --> 00:41:40.556
to display finish any
processing, and so forth.

00:41:42.306 --> 00:41:44.316
And all that remains
is to start the query.

00:41:44.966 --> 00:41:47.376
Core Spotlight will call
the handlers with results

00:41:47.556 --> 00:41:48.796
and then call the
completionHandler.

00:41:49.226 --> 00:41:52.226
So let's put this into practice.

00:41:53.046 --> 00:41:54.056
We've built an application.

00:41:55.136 --> 00:41:56.976
There is a simple
picture gathering.

00:42:04.046 --> 00:42:05.576
It already supports
indexing in Core Spotlight

00:42:05.816 --> 00:42:07.186
and it already supports Search.

00:42:08.806 --> 00:42:11.726
So the first thing we're
going to do is to add support

00:42:13.156 --> 00:42:14.306
for Continue Search in App.

00:42:15.156 --> 00:42:16.276
This is very simple.

00:42:17.476 --> 00:42:18.706
We go to the app's info.plist

00:42:19.476 --> 00:42:21.976
and we enable
Core SpotlightContinuation.

00:42:29.076 --> 00:42:31.286
That done, we go
to the app delegate

00:42:32.736 --> 00:42:40.306
and in our user activity
continuationHandler we add

00:42:40.566 --> 00:42:45.986
support for Continue
Search in App.

00:42:45.986 --> 00:42:50.296
As you can see, the
activity type is a

00:42:50.836 --> 00:42:54.766
CSQueryContinuationActionType
and we get the search query

00:42:56.396 --> 00:42:59.436
by inspecting the user info
for the CSSearchQueryString.

00:42:59.506 --> 00:43:02.666
We can then activate
our view controller

00:43:03.296 --> 00:43:06.106
with the search query.

00:43:06.206 --> 00:43:06.976
So let's see what
this looks like.

00:43:19.046 --> 00:43:19.326
All right.

00:43:19.516 --> 00:43:22.946
Here we have our picture
gathering, and we can pull

00:43:22.946 --> 00:43:31.276
down Spotlight and search for
the word "snow," which happens

00:43:31.276 --> 00:43:32.356
to be popular in this gallery.

00:43:34.386 --> 00:43:39.496
So we get two results and a
search in app continuation.

00:43:40.416 --> 00:43:43.216
So click search in app and
I'm taken into my application.

00:43:45.516 --> 00:43:51.206
[ Applause ]

00:43:51.706 --> 00:43:54.686
Now you might observe that I
had two results in Spotlight,

00:43:54.686 --> 00:43:56.396
but only one result in my app,

00:43:56.966 --> 00:44:02.896
and this is because I'm not
using Core Spotlight Search.

00:44:03.276 --> 00:44:05.176
The search is a simple
prefix search.

00:44:06.186 --> 00:44:06.936
So let's fix that.

00:44:14.046 --> 00:44:20.426
In our view controller
we have a search method.

00:44:23.446 --> 00:44:27.456
I'm going to remove the
simple search implementation

00:44:27.786 --> 00:44:33.236
that we already had and start
implementing Core Spotlight.

00:44:33.236 --> 00:44:35.856
First we want to add a variable.

00:44:43.046 --> 00:44:45.876
A query object that will keep
the current search query.

00:44:47.956 --> 00:44:51.596
We want to cancel the
currently running query,

00:44:53.426 --> 00:45:02.766
escape the query
string and create --

00:45:12.096 --> 00:45:18.126
create a query object and, of
course, create a query string.

00:45:18.846 --> 00:45:19.136
Oops.

00:45:22.716 --> 00:45:22.986
All right.

00:45:22.986 --> 00:45:26.626
So now we have a query string,
a query, and then we need

00:45:26.836 --> 00:45:27.946
to set the foundItemsHandler.

00:45:34.246 --> 00:45:42.366
The foundItemsHandler creates
displayables and appends those

00:45:42.456 --> 00:45:43.616
to our list of results.

00:45:44.326 --> 00:45:46.906
Now, since the query's
getting CSSearchableItems back,

00:45:47.666 --> 00:45:52.386
I need to implement an adapter
for taking my CSSearchableItems

00:45:52.386 --> 00:45:54.726
and creating something that
I can actually display.

00:45:55.846 --> 00:46:01.226
So let's look at what
that would look like.

00:46:01.486 --> 00:46:03.706
So I have what I call
a lazy picture object.

00:46:04.656 --> 00:46:07.546
What this does is
it gets the data

00:46:07.826 --> 00:46:11.506
that our query made
available to us and uses

00:46:11.506 --> 00:46:12.586
that whenever possible.

00:46:13.676 --> 00:46:17.326
When that's not enough,
it goes to our database

00:46:17.326 --> 00:46:21.946
and gets the picture
object for this identifier,

00:46:22.996 --> 00:46:25.806
stores that away for further
use, and then returns that,

00:46:25.876 --> 00:46:27.836
and that lets it return
all the other properties

00:46:28.066 --> 00:46:31.606
that are not available
from the database.

00:46:31.696 --> 00:46:34.966
By doing this lazily we ensure
that we can display our results

00:46:35.186 --> 00:46:36.936
without having to go
back to our database,

00:46:37.796 --> 00:46:39.356
which is great for performance.

00:46:39.836 --> 00:46:42.476
Let's implement our
completionHandler.

00:46:43.076 --> 00:46:46.876
In the completionHandler
we sort the results,

00:46:48.166 --> 00:46:54.666
jump over to the main queue to
make the results displayable,

00:46:54.716 --> 00:46:56.746
and then we call our
table view update.

00:46:58.276 --> 00:46:59.976
With that, all that remains
is to call the start.

00:47:06.046 --> 00:47:06.976
And let's see what
that looks like.

00:47:20.386 --> 00:47:20.756
All right.

00:47:23.746 --> 00:47:26.046
Now since this is using
Core Spotlight Search

00:47:26.106 --> 00:47:29.756
and I've made the query very
forgiving, I should be able

00:47:29.756 --> 00:47:32.826
to type any word that I see
here, for example, river,

00:47:34.436 --> 00:47:36.206
and I find anything
that has river either

00:47:36.206 --> 00:47:37.856
in the metadata or
in the content.

00:47:38.496 --> 00:47:39.516
All right.

00:47:39.726 --> 00:47:41.646
That is how easy it is

00:47:41.846 --> 00:47:43.236
to implement search
with Core Spotlight.

00:47:44.266 --> 00:47:47.046
And with that, I'd like
to invite Vipul back

00:47:47.106 --> 00:47:47.976
to talk about ranking.

00:47:48.516 --> 00:47:55.556
[ Applause ]

00:47:56.056 --> 00:47:56.556
>> Thanks, John.

00:47:56.556 --> 00:47:59.586
That was a fantastic
overview of Search APIs.

00:47:59.586 --> 00:48:02.816
As you are thinking about
implementing these APIs

00:48:02.816 --> 00:48:07.296
in your app, it helps to know
how Spotlight ranks result

00:48:07.296 --> 00:48:11.616
and how you can positively
influence ranking, so let's look

00:48:11.616 --> 00:48:13.186
at ranking in Spotlight.

00:48:13.186 --> 00:48:17.446
Now, Spotlight's goal's
prime directive is

00:48:17.446 --> 00:48:20.526
to present the best results
for your query in order,

00:48:20.526 --> 00:48:23.556
and this order is determined
with a set of factors.

00:48:24.026 --> 00:48:26.956
The two most important
factors are engagement ratio

00:48:27.226 --> 00:48:28.336
and content popularity.

00:48:28.676 --> 00:48:30.266
Let's talk about
engagement ratio first.

00:48:31.146 --> 00:48:35.056
Engagement ratio really is a
measure of how often results

00:48:35.056 --> 00:48:38.176
from your apps are being
selected by the user

00:48:38.206 --> 00:48:39.146
when they are presented,

00:48:39.716 --> 00:48:42.896
and Spotlight maintains
three flavors

00:48:43.166 --> 00:48:44.366
of these engagement ratios.

00:48:44.366 --> 00:48:47.136
One is maintained on the
device and two on the server.

00:48:48.036 --> 00:48:52.036
On the device the engagement
ratio measures essentially

00:48:52.266 --> 00:48:55.296
users' personalized
interactions with your app.

00:48:56.266 --> 00:48:59.816
The server will maintain an
engagement ratio per query,

00:48:59.816 --> 00:49:02.206
which is based on every query

00:49:02.436 --> 00:49:04.646
for which your results have
been shown in the past,

00:49:04.646 --> 00:49:08.986
and using this Spotlight can
uprank or downrank results

00:49:09.236 --> 00:49:10.876
for a particular query.

00:49:10.876 --> 00:49:13.496
And then finally there's a
global engagement ratio that's

00:49:13.496 --> 00:49:19.056
based on all interaction of all
users that have happened in past

00:49:19.056 --> 00:49:21.156
with your app, and this is used

00:49:21.446 --> 00:49:24.586
when there's no query level
engagement ratio available.

00:49:25.466 --> 00:49:27.206
A couple important
things to remember here.

00:49:27.206 --> 00:49:30.306
One, you don't get
penalized if the results

00:49:30.556 --> 00:49:34.326
for a particular query have
not been shown to the user

00:49:34.326 --> 00:49:37.096
and they're sort of under
the fold, under the keyboard.

00:49:37.886 --> 00:49:42.706
The best practice here really
is to use keywords, titles,

00:49:42.706 --> 00:49:47.296
descriptions that really
clearly describe the content

00:49:47.296 --> 00:49:49.776
that you're indexing
and will take the user

00:49:49.776 --> 00:49:50.856
to the same content.

00:49:54.136 --> 00:49:57.706
The second important thing
is content popularity.

00:49:57.706 --> 00:50:00.926
In general, items
that are more popular,

00:50:01.356 --> 00:50:02.336
tend to be ranked higher.

00:50:02.336 --> 00:50:05.586
And Spotlight can
understand the popularity

00:50:05.586 --> 00:50:07.076
of items in three ways.

00:50:07.596 --> 00:50:10.926
If you use Universal Links, they
will automatically go and look

00:50:10.926 --> 00:50:13.286
at the structure
of the web and pull

00:50:13.286 --> 00:50:14.966
out a reputation for your link.

00:50:15.236 --> 00:50:16.736
You don't have to
do anything there.

00:50:16.736 --> 00:50:19.406
All you have to do is
implement Universal Links.

00:50:19.976 --> 00:50:22.876
If an item has an
associated NSUserActivity,

00:50:23.286 --> 00:50:26.656
Spotlight can track how often
the user is viewing this item

00:50:26.656 --> 00:50:29.166
on the device and then
use that in ranking.

00:50:30.166 --> 00:50:32.196
Now, if you use both
Universal Links

00:50:32.536 --> 00:50:35.676
and public NSUserActivities,
which are eligible

00:50:35.676 --> 00:50:40.096
for public indexing, iOS 10
can now estimate how often the

00:50:40.096 --> 00:50:43.746
entire iOS population has
viewed a link in your app,

00:50:43.746 --> 00:50:45.366
and this is used in ranking.

00:50:45.646 --> 00:50:47.496
And this is done for
the new provision

00:50:47.496 --> 00:50:48.616
of differential privacy.

00:50:48.616 --> 00:50:50.566
Let me show you how that works.

00:50:50.566 --> 00:50:55.726
So in this example Yelp has
adopted NSUserActivities

00:50:55.726 --> 00:50:57.716
that are eligible
for public indexing,

00:50:57.716 --> 00:50:58.786
as well as Universal Links.

00:50:59.136 --> 00:51:01.376
When a user encounters
the deep link from Yelp,

00:51:01.376 --> 00:51:06.106
iOS computer hash adds some
noise to it and takes a fragment

00:51:06.106 --> 00:51:08.606
and then sends this
fragment to Apple servers.

00:51:09.016 --> 00:51:11.806
And by itself this
fragment is useless.

00:51:11.806 --> 00:51:13.536
It doesn't contain
any information.

00:51:14.136 --> 00:51:17.466
But once thousands of users
have reported lots of fragments,

00:51:17.656 --> 00:51:20.256
Apple servers are
able to recover hashes

00:51:20.746 --> 00:51:25.896
that have been viewed thousands
of times without knowing

00:51:26.216 --> 00:51:29.406
which users reported
which hash fragments.

00:51:29.976 --> 00:51:32.426
So this really provides a
way to determine something

00:51:32.426 --> 00:51:36.146
like aggregate behavior of
users without doing anything

00:51:36.146 --> 00:51:38.766
about individual
behavior of any user.

00:51:39.556 --> 00:51:41.996
Once popular deep links
are discovered in this way,

00:51:42.266 --> 00:51:44.666
they start getting ranked
higher in Spotlight.

00:51:45.236 --> 00:51:48.126
So this is very cool.

00:51:48.336 --> 00:51:51.756
So let's have a quick look at
best practices for ranking.

00:51:53.056 --> 00:51:55.476
John showed many best practices

00:51:55.476 --> 00:51:58.726
for indexing your app's
content well with Core Spotlight.

00:51:58.726 --> 00:52:01.586
You should follow these because
they will provide a consistent

00:52:01.586 --> 00:52:05.576
search experience for your app's
content, and then users will go

00:52:05.576 --> 00:52:08.196
to Spotlight to search
for stuff in your app,

00:52:08.546 --> 00:52:10.466
which will then impact
engagement ratios.

00:52:11.436 --> 00:52:15.646
If you have app content,
allow Apple to index them

00:52:15.646 --> 00:52:19.566
by using Universal Links and
this will expose your app

00:52:20.186 --> 00:52:21.676
to users that don't yet have it.

00:52:22.476 --> 00:52:25.266
So you know content
popularity is important,

00:52:25.266 --> 00:52:28.546
so link both Universal Links

00:52:28.546 --> 00:52:31.106
and Core Spotlight items
to NSUserActivities.

00:52:31.436 --> 00:52:35.916
We introduced
weakRelatedUniqueIdentifier this

00:52:35.916 --> 00:52:37.746
year to help you do
that more easily.

00:52:37.746 --> 00:52:42.776
And also, I'll repeat this
because absolutely important

00:52:42.776 --> 00:52:44.556
that the title, description
and keywords

00:52:44.556 --> 00:52:48.666
of items you're indexing
are related to the deep link

00:52:48.876 --> 00:52:50.416
that that item would go to.

00:52:51.076 --> 00:52:52.506
Pay attention to
your presentation.

00:52:52.506 --> 00:52:56.546
We know that well-presented
links have higher

00:52:56.546 --> 00:52:57.396
engagement rates.

00:52:57.746 --> 00:53:01.316
And finally, when appropriate,
implement Continue Search in App

00:53:01.316 --> 00:53:02.576
as it allows the user

00:53:02.576 --> 00:53:05.646
to complete a search
task inside of your app.

00:53:08.126 --> 00:53:10.156
So in conclusion, key takeaways,

00:53:10.646 --> 00:53:13.706
I think Spotlight is the new
universal search for iOS,

00:53:13.706 --> 00:53:16.826
and in iOS 10 we made it more
functional and more accessible.

00:53:17.276 --> 00:53:21.876
And users are increasingly
expecting well behaved apps

00:53:22.036 --> 00:53:23.756
to be searchable via Spotlight.

00:53:23.756 --> 00:53:28.326
So if you haven't adopted
these APIs, we would recommend

00:53:28.326 --> 00:53:32.586
that you consider doing so for
the general release of iOS 10.

00:53:32.586 --> 00:53:35.326
And if you've already
implemented Search APIs,

00:53:35.586 --> 00:53:38.606
then we would recommend
adopting new provisions

00:53:38.686 --> 00:53:42.816
that have been introduced today.

00:53:43.316 --> 00:53:45.206
Some related sessions,
an excellent session

00:53:45.206 --> 00:53:48.956
on Proactive Suggestions
tomorrow that a lot

00:53:48.956 --> 00:53:52.526
of you should go to
because what you're doing

00:53:52.526 --> 00:53:54.856
in search applies
pretty much directly

00:53:55.026 --> 00:53:56.206
to Proactive Suggestions.

00:53:56.576 --> 00:53:59.646
We also had a fantastic session
yesterday on SiriKit APIs.

00:53:59.646 --> 00:54:01.336
You can find this on
the conference website.

00:54:01.336 --> 00:54:04.596
And we recommend the session
on privacy from Wednesday

00:54:04.596 --> 00:54:06.696
that covers differential
privacy in more detail.

00:54:07.116 --> 00:54:09.666
And like all other talks,
this will be posted online

00:54:09.666 --> 00:54:12.826
at the first URL, and we
also post all Search API

00:54:12.826 --> 00:54:16.236
documentation on
search.developer.apple.com.

00:54:16.236 --> 00:54:17.436
And that's all I have.

00:54:18.086 --> 00:54:19.626
Enjoy the rest of the WWDC.

00:54:20.516 --> 00:54:30.130
[ Applause ]