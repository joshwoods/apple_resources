WEBVTT

00:00:07.516 --> 00:00:19.606
[ Music ]

00:00:20.106 --> 00:00:20.656
>> Hi everyone.

00:00:20.866 --> 00:00:22.246
I'm Conor Hughes, an engineer

00:00:22.246 --> 00:00:23.746
on the Accessibility
Team here at Apple.

00:00:24.126 --> 00:00:26.086
And welcome to What's
New in Accessibility.

00:00:26.786 --> 00:00:29.166
Today we're going to learn about
some cool new assistive features

00:00:29.166 --> 00:00:31.746
in our operating systems and
learn about what you need

00:00:31.746 --> 00:00:34.776
to know to make sure your
apps are usable by everyone.

00:00:35.266 --> 00:00:36.166
So let's get started.

00:00:37.196 --> 00:00:39.116
So accessibility is a big word

00:00:39.116 --> 00:00:40.316
and many are not
familiar with it.

00:00:40.646 --> 00:00:41.286
What does it mean?

00:00:41.546 --> 00:00:44.636
To us, accessibility means
making a system usable

00:00:44.636 --> 00:00:47.216
for everyone, with all
of their unique needs.

00:00:48.086 --> 00:00:50.316
This means both designing
in accommodations for people

00:00:50.316 --> 00:00:52.166
with different needs
and being careful

00:00:52.166 --> 00:00:54.056
about your basic
design to avoid issues.

00:00:54.806 --> 00:00:57.886
This being WWDC, we're going
to focus on accessibility

00:00:57.886 --> 00:00:59.856
on Apple platforms
where we're concerned

00:00:59.856 --> 00:01:02.436
with four major classes
of ability: Motor,

00:01:02.706 --> 00:01:04.775
vision, hearing and learning.

00:01:06.586 --> 00:01:08.666
Motor encompasses
things like Parkinson's

00:01:08.666 --> 00:01:11.446
and Multiple Sclerosis and
affects things like the ability

00:01:11.446 --> 00:01:14.646
to push with force on the screen
or accurately tap targets.

00:01:16.076 --> 00:01:18.316
Vision accommodations
encompass both blindness

00:01:18.316 --> 00:01:19.596
and partial vision loss.

00:01:21.416 --> 00:01:23.626
Hearing covers hearing
loss of various gradations.

00:01:24.946 --> 00:01:27.686
And learning, which includes
things like dyslexia and autism.

00:01:28.106 --> 00:01:31.266
Our operating systems can do a
lot to provide accommodations

00:01:31.266 --> 00:01:32.356
in all of these areas.

00:01:32.776 --> 00:01:35.466
But apps are a core part of
our platform experiences.

00:01:35.776 --> 00:01:38.236
So for our platforms to be
truly accessible environments,

00:01:38.496 --> 00:01:41.216
we need you to make sure your
apps are accessible as well,

00:01:41.536 --> 00:01:43.626
which is why we're so happy
that you're here to learn

00:01:43.626 --> 00:01:44.866
about how to do just that.

00:01:45.336 --> 00:01:47.016
So let's go over what we're
going to talk about today.

00:01:47.556 --> 00:01:49.926
First we'll go over some of
the new assistive features

00:01:49.926 --> 00:01:52.916
in Mac OS, iOS, watchOS and tvOS

00:01:52.916 --> 00:01:55.316
so you can see some
concrete examples

00:01:55.316 --> 00:01:57.566
of how software can
provide accommodations

00:01:57.566 --> 00:01:58.666
for people with different needs.

00:01:59.276 --> 00:02:01.906
Then we'll take an iOS app
as our example and audit it

00:02:01.906 --> 00:02:03.116
for accessibility issues.

00:02:04.476 --> 00:02:06.566
Then dig into the
APIs that you can use

00:02:06.566 --> 00:02:08.336
to make sure your
apps are accessible.

00:02:09.735 --> 00:02:11.376
And finally, we'll
use those APIs

00:02:11.376 --> 00:02:13.516
to fix the issues we
identified in our audit,

00:02:13.746 --> 00:02:16.626
including using some new API
we think you're going to love.

00:02:17.076 --> 00:02:19.046
So what new assistive features
do we have to show this year?

00:02:19.596 --> 00:02:22.386
Well, there are quite a few, so
let's go through and take a look

00:02:22.386 --> 00:02:24.736
at what's new in
each major area.

00:02:26.316 --> 00:02:27.436
First off, motor.

00:02:28.086 --> 00:02:32.476
So some people may only be able
to interact with their devise

00:02:32.476 --> 00:02:34.186
through pressing a
single physical button,

00:02:34.186 --> 00:02:36.896
for instance a switch on
a wheelchair headrest.

00:02:37.566 --> 00:02:40.096
They can interact with the
rich touch interface of iOS,

00:02:40.096 --> 00:02:42.946
for instance, through Switch
Control, which presents a cursor

00:02:42.946 --> 00:02:45.156
which moves through the
interface elements on screen.

00:02:46.026 --> 00:02:47.966
When someone wants to
interact with the element

00:02:47.966 --> 00:02:49.926
under the cursor, they
press their switch.

00:02:50.556 --> 00:02:53.326
Switch Control lets people with
motor disabilities do everything

00:02:53.326 --> 00:02:55.596
from simple taps to
complex gestures.

00:02:56.696 --> 00:02:59.646
iOS and OS X have had Switch
Control for several years.

00:02:59.646 --> 00:03:00.176
So what's new?

00:03:01.806 --> 00:03:02.946
Well, we're excited to announce

00:03:02.946 --> 00:03:05.066
that we're bringing
Switch Control to tvOS.

00:03:05.716 --> 00:03:07.646
Now, people who use
Switch Control can use it

00:03:07.646 --> 00:03:09.916
to directly interact
with the tvOS interface.

00:03:10.586 --> 00:03:12.886
The familiar Switch interface
is available with that cursor

00:03:12.886 --> 00:03:14.216
that highlights elements
onscreen.

00:03:15.036 --> 00:03:17.256
Or an alternative
interface is available

00:03:17.256 --> 00:03:18.306
with an onscreen remote.

00:03:19.066 --> 00:03:20.786
And what's more,
people can do this

00:03:20.786 --> 00:03:22.306
without repairing their switch.

00:03:23.166 --> 00:03:26.166
Someone using Switch
Control on their iOS device

00:03:26.166 --> 00:03:28.656
or their Mac can immediately
start controlling their TV

00:03:28.926 --> 00:03:31.496
totally autonomously
without any external help.

00:03:32.056 --> 00:03:33.456
We think this is a
huge improvement.

00:03:33.456 --> 00:03:36.966
And we can't wait for
people to try it out.

00:03:37.226 --> 00:03:38.426
Next up, Dwell Control.

00:03:39.166 --> 00:03:40.886
There are a number of
assistive technologies

00:03:40.886 --> 00:03:43.226
that track someone's focus when
they're using their computer.

00:03:43.586 --> 00:03:45.996
So they may take the form
of tracking a reflective dot

00:03:45.996 --> 00:03:48.696
on a headband, or actually
tracking eye movements.

00:03:49.516 --> 00:03:51.816
Dwell Control is a
new feature in Mac OS,

00:03:51.816 --> 00:03:53.586
which integrates
support for these devices

00:03:53.836 --> 00:03:55.256
by allowing them to
control the mouse.

00:03:55.916 --> 00:03:57.926
When the mouse dwells
on a certain location,

00:03:58.556 --> 00:03:59.956
Dwell Control presents
a timer [inaudible].

00:03:59.956 --> 00:04:02.826
And when a timer expires,
it invokes an action,

00:04:02.876 --> 00:04:03.886
for instance a mouse click.

00:04:04.696 --> 00:04:07.266
This allows someone to control
their Mac without having

00:04:07.266 --> 00:04:08.376
to manipulate the mouse.

00:04:08.626 --> 00:04:11.036
And of course, it's customizable
with custom actions,

00:04:11.266 --> 00:04:12.156
just like Switch Control.

00:04:12.656 --> 00:04:14.176
So next, let's look at vision.

00:04:15.296 --> 00:04:18.745
So, for many years Mac OS and
iOS have supported features

00:04:18.745 --> 00:04:20.315
like invert colors
and gray scale

00:04:21.046 --> 00:04:23.526
to help people increase
the contrast of the content

00:04:23.526 --> 00:04:25.926
on their device, deal
with light sensitivity

00:04:25.926 --> 00:04:27.186
or work around color issues.

00:04:27.836 --> 00:04:29.636
This year we're expanding
that support

00:04:29.636 --> 00:04:32.116
across Mac OS, iOS and tvOS.

00:04:32.666 --> 00:04:34.706
We've added color
adjustments to help people

00:04:34.706 --> 00:04:37.476
with color blindness, which
can help something that appears

00:04:37.766 --> 00:04:40.966
like this, appear
more like this.

00:04:41.766 --> 00:04:43.366
And we've also added the ability

00:04:43.366 --> 00:04:45.366
to tint the entire
display a certain color,

00:04:45.756 --> 00:04:48.546
which can significantly increase
reading ability in people

00:04:48.546 --> 00:04:52.776
who find reading black
on white text difficult.

00:04:53.536 --> 00:04:56.026
So in watchOS, someone using
VoiceOver can have the time

00:04:56.026 --> 00:04:58.196
spoken aloud to them
by raising their wrist

00:04:58.196 --> 00:04:59.336
or tapping on the watch face.

00:04:59.966 --> 00:05:02.356
But sometimes they may want
to discretely check the time

00:05:02.356 --> 00:05:04.116
without disturbing
those around them.

00:05:04.296 --> 00:05:06.546
So in watchOS 3 we're
introducing Taptic Time.

00:05:07.396 --> 00:05:10.006
Taptic Time is a VoiceOver
feature that uses a series

00:05:10.006 --> 00:05:11.956
of distinct taps from
the Taptic engine

00:05:11.956 --> 00:05:15.096
to help someone tell time
silently and discretely.

00:05:15.686 --> 00:05:20.276
So iOS has a lot of
features that help people

00:05:20.276 --> 00:05:22.596
with visual disabilities
discover and interact

00:05:22.596 --> 00:05:23.816
with the content
on their device.

00:05:23.856 --> 00:05:25.766
But what about their
physical environment?

00:05:26.796 --> 00:05:29.106
In iOS X we're introducing
a feature called Magnifier.

00:05:29.786 --> 00:05:31.986
Magnifier is available
from anywhere in iOS.

00:05:32.606 --> 00:05:34.356
And it lets someone use
their device's camera

00:05:34.456 --> 00:05:36.496
to magnify objects in
their physical environment.

00:05:37.206 --> 00:05:39.886
And I'd love to show
that to you now.

00:05:44.376 --> 00:05:46.716
Okay, so I'm going to
turn on Magnifier by going

00:05:46.716 --> 00:05:51.626
into Settings, General,
Accessibility, Magnifier

00:05:51.626 --> 00:05:52.596
and flipping the switch.

00:05:53.766 --> 00:05:55.346
Now I can turn on Magnifier

00:05:55.346 --> 00:05:56.726
by just triple clicking
the Home button.

00:05:57.366 --> 00:05:59.066
So here we are.

00:05:59.836 --> 00:06:02.916
So, if I want to read what's
on this bottle of medicine,

00:06:02.916 --> 00:06:06.846
for instance, I can
just zoom in quite far.

00:06:06.846 --> 00:06:09.146
I have access to things
like the camera torch

00:06:09.146 --> 00:06:10.896
for a low light environment.

00:06:11.636 --> 00:06:13.766
I can lock focus on a
certain focal length.

00:06:14.416 --> 00:06:17.586
And in case I have trouble
keeping the device steady,

00:06:17.976 --> 00:06:19.396
or I'm pointing at
something far away,

00:06:19.396 --> 00:06:23.416
I can take a freeze frame
here with the Center button.

00:06:23.416 --> 00:06:24.926
And we captured this image

00:06:24.926 --> 00:06:27.566
at the device's native camera
resolution, so we can zoom

00:06:27.566 --> 00:06:29.286
out and in, move around.

00:06:30.186 --> 00:06:33.336
And Magnifier also supports
various color filters

00:06:33.466 --> 00:06:35.166
to help someone increase
the contrast.

00:06:35.626 --> 00:06:38.976
So for instance, maybe
I find this grayscale,

00:06:39.396 --> 00:06:42.696
maybe inverted grayscale,
increase the contrast a bit.

00:06:42.906 --> 00:06:44.586
So that's pretty
easy for me to read.

00:06:45.486 --> 00:06:48.186
Okay, so that's an example
of Magnifier on iOS X.

00:06:49.046 --> 00:06:51.596
Okay, so what's new in hearing?

00:06:51.886 --> 00:06:54.696
iOS has supported hardware
TTY devices for some time.

00:06:55.396 --> 00:06:57.676
TTY technology allows
someone with hearing loss

00:06:57.676 --> 00:07:00.956
to hold text conversations
over standard telephone calls.

00:07:01.496 --> 00:07:03.556
Here is what an existing
TTY machine looks like.

00:07:04.386 --> 00:07:05.956
As you can see, it's
fairly large

00:07:06.016 --> 00:07:07.966
and probably difficult
to carry around.

00:07:08.476 --> 00:07:10.646
But it's incredibly important
for someone who's deaf,

00:07:10.906 --> 00:07:13.906
especially when you factor in
relay operators who translate

00:07:13.906 --> 00:07:17.146
from TTY to voice, allowing
someone using this machine

00:07:17.146 --> 00:07:20.116
to contact businesses,
services and family and friends

00:07:20.116 --> 00:07:20.936
who may not be using one.

00:07:21.736 --> 00:07:23.476
We thought it would be
great if the functionality

00:07:23.476 --> 00:07:25.216
of this device was
available to everyone

00:07:25.476 --> 00:07:26.656
without any additional hardware.

00:07:27.666 --> 00:07:31.386
So new in iOS X anyone can
play software TTY phone calls

00:07:31.696 --> 00:07:33.236
in a familiar interface
without having

00:07:33.236 --> 00:07:34.436
to use any additional hardware.

00:07:35.256 --> 00:07:39.156
These calls work with legacy
TTY technology and make it easy

00:07:39.156 --> 00:07:42.286
to dial a non-TTY number through
your carrier's relay service.

00:07:42.956 --> 00:07:43.896
Plus, it has built

00:07:43.896 --> 00:07:47.356
in TTY-specific quick type
predictions so it fits

00:07:47.356 --> 00:07:49.206
in with existing
TTY user culture.

00:07:49.756 --> 00:07:50.656
And finally, learning.

00:07:51.626 --> 00:07:54.766
Dyslexia is an incredibly common
learning disability affecting

00:07:54.766 --> 00:07:56.716
the ability to read
and write of millions

00:07:56.716 --> 00:07:57.576
of people around the world.

00:07:58.246 --> 00:08:00.276
In iOS X we're excited
to bring a number

00:08:00.276 --> 00:08:02.476
of enhancements designed to
help people with dyslexia.

00:08:03.496 --> 00:08:05.606
We've implemented
improvements to Speak Selection

00:08:06.106 --> 00:08:08.656
and Speak Screen to help people
better understand the text

00:08:08.656 --> 00:08:09.506
that's already been entered.

00:08:09.906 --> 00:08:12.216
And we've implemented new
audio feedback for typing

00:08:12.286 --> 00:08:13.936
to help people immediately
catch mistakes.

00:08:14.006 --> 00:08:16.136
And I'd love to show
that you now.

00:08:16.426 --> 00:08:19.716
Okay, so I've turned on typing
feedback features already

00:08:19.716 --> 00:08:21.016
in Accessibility
Speech Settings.

00:08:21.016 --> 00:08:22.366
So I'll just fire up Notes.

00:08:22.656 --> 00:08:24.296
And what I'm going to
do here is I'm going

00:08:24.296 --> 00:08:25.906
to type the word
Welcome and I'm going

00:08:25.946 --> 00:08:27.496
to pause after typing the O.

00:08:28.306 --> 00:08:29.896
And I've turned on
Character Feedback

00:08:30.316 --> 00:08:33.306
where iOS will read the last
character that I typed back

00:08:33.306 --> 00:08:35.236
to me after a pause
so I can be sure

00:08:35.236 --> 00:08:38.476
that I didn't enter a visually
similar character like an E.

00:08:41.426 --> 00:08:41.655
>> E.

00:08:42.366 --> 00:08:45.216
>> So, it may be difficult
to hear a little bit,

00:08:45.216 --> 00:08:47.666
but iOS just read
back an E to me.

00:08:47.936 --> 00:08:49.186
So that wasn't correct.

00:08:50.426 --> 00:08:50.986
>> O.

00:08:50.986 --> 00:08:55.016
>> Great. Now, I'm going
to keep typing, excuse me,

00:08:55.056 --> 00:08:58.006
and iOS is going to read
back each word to me,

00:08:58.006 --> 00:08:59.566
because I've turned
on Word Feedback.

00:08:59.566 --> 00:09:01.046
So I can get immediate feedback

00:09:01.046 --> 00:09:03.476
as to whether the word I've
entered is the one I wanted.

00:09:04.716 --> 00:09:10.096
>> Welcome to our session.

00:09:10.556 --> 00:09:12.316
>> Okay. So that's
a quick example

00:09:12.316 --> 00:09:16.976
of enhanced typing
feedback in iOS X.

00:09:19.406 --> 00:09:21.356
So, hopefully I've whetted
your appetite as to the kinds

00:09:21.356 --> 00:09:23.096
of accommodations
software can provide

00:09:23.416 --> 00:09:25.296
to make sure the entire
experience is accessible

00:09:25.296 --> 00:09:25.766
to everyone.

00:09:26.336 --> 00:09:27.516
So if you're new
to accessibility,

00:09:27.516 --> 00:09:30.166
you may be wondering about
how you can put similar

00:09:30.166 --> 00:09:31.476
accommodations into your apps.

00:09:31.966 --> 00:09:34.006
And if you've used the
accessibilities APIs before,

00:09:34.486 --> 00:09:36.316
maybe it's time for a quick
refresher before we jump

00:09:36.316 --> 00:09:37.146
onto some new API.

00:09:37.796 --> 00:09:40.246
So, how do we use the
accessibility APIs

00:09:40.246 --> 00:09:41.536
to make sure our
apps are accessible?

00:09:42.956 --> 00:09:45.376
Well, the first step is to
audit our app for accessibility.

00:09:46.246 --> 00:09:48.296
Traditionally, the best way
to do this was just to fire

00:09:48.296 --> 00:09:50.686
up an assistive app like
VoiceOver or Switch Control

00:09:50.686 --> 00:09:51.476
and see what happened.

00:09:52.326 --> 00:09:54.216
You'll want to check that
all your interface items

00:09:54.216 --> 00:09:54.856
are exposed.

00:09:56.026 --> 00:09:58.196
That everything that is
exposed has a good label

00:09:58.196 --> 00:10:00.506
so someone using
VoiceOver can identify it.

00:10:01.756 --> 00:10:03.406
You'll want to check that
someone using your app

00:10:03.406 --> 00:10:05.786
with VoiceOver can do everything
that any other use can do.

00:10:06.956 --> 00:10:09.706
And finally, you're designing
the accessible experience

00:10:09.706 --> 00:10:10.136
for your app.

00:10:10.136 --> 00:10:12.286
So you'll want to make sure
that someone using your app

00:10:12.286 --> 00:10:14.566
with VoiceOver, for
instance, has just as great

00:10:14.606 --> 00:10:16.496
and smooth an experience
as anyone else.

00:10:17.656 --> 00:10:19.596
So this year we're also excited

00:10:19.666 --> 00:10:22.266
that there's a brand new
accessibility inspector that's a

00:10:22.266 --> 00:10:24.736
lot of more powerful and
can help you immediately

00:10:24.736 --> 00:10:25.486
catch mistakes.

00:10:26.266 --> 00:10:29.406
If you want to learn more about
this inspector I encourage you

00:10:29.406 --> 00:10:32.096
to check out the
session Auditing your App

00:10:32.096 --> 00:10:34.706
for Accessibility on Wednesday
to learn more about it.

00:10:34.706 --> 00:10:38.356
For this session we're going to
focus on auditing with VoiceOver

00:10:38.356 --> 00:10:40.636
because it's still the best
way to get intimately familiar

00:10:40.966 --> 00:10:42.536
with accessibility
of your app's flows.

00:10:43.096 --> 00:10:45.846
Okay, so let's do it.

00:10:45.846 --> 00:10:47.216
Let's take a look at a live app

00:10:47.246 --> 00:10:48.656
and find its accessibility
issues.

00:10:49.146 --> 00:10:51.856
So, for this presentation
I'm going to be using iOS,

00:10:52.286 --> 00:10:55.636
but the same basic flow
applies to all of our platforms.

00:10:56.176 --> 00:11:01.806
Okay, so the first thing I'm
going to do is add VoiceOver

00:11:01.806 --> 00:11:04.476
to my accessibility
triple-click shortcut by going

00:11:04.476 --> 00:11:05.836
into Accessibility Settings.

00:11:06.256 --> 00:11:07.356
And all the way at the bottom,

00:11:07.356 --> 00:11:09.916
Accessibility Shortcut,
turn on VoiceOver.

00:11:10.826 --> 00:11:13.296
Okay, so let's fire up
our app now, DogRoutePro,

00:11:13.296 --> 00:11:16.166
a pro app for selecting
routes to walk your dog.

00:11:17.256 --> 00:11:18.016
And turn on VoiceOver

00:11:18.016 --> 00:11:19.736
by triple-clicking the Home
button and Select again.

00:11:20.286 --> 00:11:21.206
>> VoiceOver on.

00:11:21.626 --> 00:11:22.716
DogRoutePro.

00:11:22.946 --> 00:11:23.326
Routes.

00:11:23.666 --> 00:11:25.816
>> So, there are two, excuse
me, there are two ways

00:11:25.816 --> 00:11:27.736
to navigate your app
when VoiceOver's on.

00:11:28.156 --> 00:11:30.626
You can take one finger
and pan around on screen

00:11:30.626 --> 00:11:31.706
and VoiceOver will select

00:11:31.706 --> 00:11:32.926
and read what's underneath
your finger.

00:11:33.506 --> 00:11:36.296
Or you can swipe with one
finger, right or left,

00:11:36.296 --> 00:11:38.556
to move forward or back
through the list of elements.

00:11:38.856 --> 00:11:40.826
So let's see how accessible
these table cells are.

00:11:41.566 --> 00:11:42.516
>> Avenue Loop.

00:11:42.766 --> 00:11:44.126
0.8 miles.

00:11:44.126 --> 00:11:46.966
>> So, immediately I
noticed that I know

00:11:46.966 --> 00:11:49.776
that if you activate this cell,
we can go somewhere on our app.

00:11:50.486 --> 00:11:52.416
But nothing conveys that
to a VoiceOver user.

00:11:52.446 --> 00:11:55.956
Let's keep going.

00:11:56.146 --> 00:11:56.556
>> [Inaudible] button.

00:11:56.876 --> 00:12:00.046
>> So this button has a label
that's derived from the name

00:12:00.046 --> 00:12:03.046
of the image I used
to initialize it.

00:12:03.926 --> 00:12:05.136
That's the framework's
falling back

00:12:05.136 --> 00:12:06.576
on the only information
I gave it.

00:12:06.576 --> 00:12:08.026
So we'll have to give
it a better label.

00:12:08.916 --> 00:12:09.156
All right.

00:12:09.156 --> 00:12:10.216
So let's activate this cell.

00:12:10.546 --> 00:12:11.956
To activate an item
with VoiceOver,

00:12:12.086 --> 00:12:13.656
when the item is
selected you'll want

00:12:13.656 --> 00:12:15.336
to double-tap onscreen
with one finger.

00:12:16.186 --> 00:12:17.466
>> Avenue Loop.

00:12:17.466 --> 00:12:19.536
0 -- Avenue Loop.

00:12:19.536 --> 00:12:20.986
Routes. Back button.

00:12:20.986 --> 00:12:21.956
>> Okay, let's go
through this UI.

00:12:21.956 --> 00:12:23.886
>> Avenue Loop.

00:12:23.886 --> 00:12:25.176
Avenue Loop ratings.

00:12:25.456 --> 00:12:26.986
Heading. Distractions.

00:12:27.526 --> 00:12:29.126
Smells. Greenery.

00:12:29.246 --> 00:12:29.666
Friends.

00:12:30.196 --> 00:12:31.396
>> So for this ratings graph,

00:12:31.396 --> 00:12:33.506
the graph values are
totally inaccessible

00:12:33.506 --> 00:12:34.586
to someone using voiceover.

00:12:35.046 --> 00:12:36.526
Let's keep going.

00:12:36.526 --> 00:12:37.816
>> Avenue Loop route.

00:12:37.816 --> 00:12:39.926
Heading. Broadway and Ridgeway.

00:12:40.506 --> 00:12:42.906
Hazard. Boys' Choir on Ridgeway.

00:12:43.086 --> 00:12:44.616
41st and Broadway.

00:12:45.606 --> 00:12:49.046
>> So, because I gave these
annotations good titles,

00:12:49.256 --> 00:12:52.726
the frameworks were able to use
that as the accessibility label

00:12:52.726 --> 00:12:54.076
for the map annotations.

00:12:54.606 --> 00:12:55.126
So that's good.

00:12:55.126 --> 00:12:57.276
Let's move on to this Steps tab.

00:12:57.486 --> 00:12:59.186
>> Steps. Text selected.

00:12:59.186 --> 00:13:01.106
Step 41st.

00:13:03.136 --> 00:13:04.716
-- Broadway and Ridgeway.

00:13:04.926 --> 00:13:06.826
Turn right at Broadway
and Ridgeway.

00:13:07.216 --> 00:13:08.886
Boys' Choir on Ridgeway.

00:13:09.066 --> 00:13:12.086
Boys' Choir between Gilbert
and Montgomery on Ridgeway.

00:13:12.456 --> 00:13:13.996
Continue along Ridgeway.

00:13:14.486 --> 00:13:16.256
Be careful of cars and children.

00:13:16.476 --> 00:13:18.576
>> So, VoiceOver was
able to read all the text

00:13:18.576 --> 00:13:19.576
in these table view cells.

00:13:19.816 --> 00:13:22.206
But you'll notice that these
cells that represent hazards

00:13:22.206 --> 00:13:24.396
on the route are not
differentiated at all

00:13:24.796 --> 00:13:28.616
for someone using VoiceOver even
though a sighted user can see

00:13:28.616 --> 00:13:31.086
that there are hazards from the
red text and distinctive icon.

00:13:32.106 --> 00:13:33.886
Okay, let's jump
out to the slides

00:13:33.886 --> 00:13:35.366
and discuss how we
can fix these issues.

00:13:38.556 --> 00:13:40.286
So, what did we learn
about our app?

00:13:40.906 --> 00:13:42.296
First, those route list cells.

00:13:42.556 --> 00:13:45.346
The Favorite button has that
odd label that's derived

00:13:45.346 --> 00:13:46.576
from the name of the
image we're using.

00:13:47.116 --> 00:13:49.556
In addition, it isn't clear

00:13:49.556 --> 00:13:52.066
that the table cell itself can
be activated to go somewhere.

00:13:52.546 --> 00:13:55.666
Now, for the ratings graph,

00:13:55.666 --> 00:13:58.956
those graph values were totally
inaccessible to VoiceOver.

00:13:59.506 --> 00:14:04.696
And finally, in the route step
list the cells representing

00:14:04.696 --> 00:14:07.326
waypoints that were hazards
are not differentiated

00:14:07.326 --> 00:14:08.426
from the other steps
on the route.

00:14:09.526 --> 00:14:11.076
So how can we fix
these problems?

00:14:12.976 --> 00:14:14.526
Well, to understand how, we need

00:14:14.526 --> 00:14:17.136
to understand how VoiceOver
is able to access information

00:14:17.136 --> 00:14:18.296
from our interface and drive it.

00:14:19.046 --> 00:14:20.416
VoiceOver interacts with our app

00:14:20.536 --> 00:14:22.076
through the UIAccessibility
protocol.

00:14:23.016 --> 00:14:25.466
So let's take, as an
example, that Favorite button

00:14:25.466 --> 00:14:28.846
in the app we just saw.

00:14:28.846 --> 00:14:30.596
Assistive apps like
VoiceOver need

00:14:30.596 --> 00:14:33.356
to ask your app's user
interface items questions.

00:14:33.626 --> 00:14:36.156
So for instance, when Voiceover
is on and someone touches

00:14:36.156 --> 00:14:38.666
that button, VoiceOver
asks the button, "Hey,

00:14:38.666 --> 00:14:39.716
what kind of thing are you?"

00:14:39.716 --> 00:14:41.906
And the button says,
"Well, I'm a button."

00:14:43.006 --> 00:14:44.546
VoiceOver then asks,
"Who are you?

00:14:44.546 --> 00:14:45.186
What's your name?"

00:14:45.566 --> 00:14:49.006
That button should respond
with something like "Favorite."

00:14:49.976 --> 00:14:52.536
Finally VoiceOver asks,
"Where are you on screen?"

00:14:52.906 --> 00:14:55.036
And the button replies with
"Its screen space frame."

00:14:55.746 --> 00:14:57.886
This is the information
VoiceOver needs to announce,

00:14:58.156 --> 00:15:00.826
"Favorite, Button" and draw
a cursor around the element.

00:15:02.036 --> 00:15:04.326
So these messages from
assistive technologies

00:15:04.326 --> 00:15:06.596
to your app take the form
of method invocations.

00:15:06.996 --> 00:15:09.376
The methods are all part of
the UIAccessibility protocol.

00:15:09.956 --> 00:15:10.866
By implementing the methods

00:15:10.866 --> 00:15:12.846
of this protocol you
make your custom view

00:15:12.846 --> 00:15:13.896
hierarchies accessible.

00:15:14.376 --> 00:15:17.766
So standard UI controls
have accessibility baked in.

00:15:18.166 --> 00:15:20.106
But depending on how you
configure them, you may need

00:15:20.106 --> 00:15:21.836
to set or override
certain properties.

00:15:22.256 --> 00:15:23.076
So what properties?

00:15:23.346 --> 00:15:23.846
Let's take a look.

00:15:24.866 --> 00:15:27.966
Now, there are a lot of methods
on the UIAccessibility protocol

00:15:27.966 --> 00:15:29.916
that you can use for
fine-grained control

00:15:30.176 --> 00:15:32.226
over how your interface
items expose themselves

00:15:32.226 --> 00:15:32.916
to accessibility.

00:15:33.326 --> 00:15:34.346
But for most work you need

00:15:34.346 --> 00:15:35.906
to only concern yourself
with a few.

00:15:36.566 --> 00:15:38.826
Let's go through the basic
properties one by one.

00:15:39.166 --> 00:15:41.166
First, there's
isAccessibilityElement.

00:15:42.296 --> 00:15:45.006
This property determines if
an interface item is serviced

00:15:45.156 --> 00:15:46.456
by an assistive technology
at all.

00:15:47.066 --> 00:15:49.126
So for instance, if you have
an image view that's background

00:15:49.126 --> 00:15:51.746
decoration, you can
leave this as False.

00:15:52.316 --> 00:15:54.916
However, if it represents a
photo that someone uploaded

00:15:54.916 --> 00:15:57.356
to your service, you'll
want to set this to True

00:15:57.356 --> 00:15:59.446
so someone using VoiceOver
can discover the image,

00:15:59.686 --> 00:16:01.486
focus on it and learn about it.

00:16:03.166 --> 00:16:06.226
So now your interface element
is surfaced by VoiceOver.

00:16:06.226 --> 00:16:08.856
You'll want to give it a name
so that users can identify it.

00:16:09.016 --> 00:16:10.696
That's what the accessibility
label is for.

00:16:11.466 --> 00:16:13.616
The label is a concise
identifier of the element.

00:16:13.966 --> 00:16:16.326
For instance Send
Message or New Alarm.

00:16:16.966 --> 00:16:21.496
So how does someone know that
they can activate your element?

00:16:22.246 --> 00:16:25.306
New Alarm doesn't convey
that the item is a button

00:16:25.306 --> 00:16:27.326
in the same way that its
visual styling might.

00:16:27.976 --> 00:16:29.556
That's where the
accessibility traits come in.

00:16:30.396 --> 00:16:31.776
Accessibility traits declare

00:16:31.776 --> 00:16:34.386
to the assistive technology
what your element is

00:16:34.386 --> 00:16:35.516
and how to interact with it.

00:16:35.906 --> 00:16:37.656
So for instance, a button
should have the trait

00:16:37.656 --> 00:16:39.016
UIAccessibilityTraitButton.

00:16:40.016 --> 00:16:41.336
An adjustable control

00:16:41.336 --> 00:16:43.166
like a slider would
have the trait

00:16:43.166 --> 00:16:44.686
UIAccessibilityTraitAdjustable.

00:16:45.346 --> 00:16:46.506
The traits are a bit masked,

00:16:46.506 --> 00:16:47.946
so an element could
have more than one.

00:16:48.466 --> 00:16:50.276
For instance, a selected
button should have both

00:16:50.566 --> 00:16:54.156
UIAccessibilityTraitButton and
UIAccessibiltyTraitSelected.

00:16:54.566 --> 00:16:57.216
The Button trait is what
makes VoiceOver speak "Button"

00:16:57.636 --> 00:16:59.336
so someone knows they can
activate your element.

00:16:59.776 --> 00:17:03.386
Next there's the
accessibility frame.

00:17:04.056 --> 00:17:06.366
This determines where
your element is onscreen

00:17:06.366 --> 00:17:07.866
and is used both for hit testing

00:17:07.906 --> 00:17:09.756
and for drawing a cursor
around the element.

00:17:10.445 --> 00:17:13.886
Now, for UI views you usually do
not have to set this explicitly

00:17:14.106 --> 00:17:17.046
because it's computed for you
based on where the view is

00:17:17.046 --> 00:17:17.806
in the view hierarchy.

00:17:18.925 --> 00:17:20.455
But you can modify it if needed.

00:17:20.455 --> 00:17:22.695
Just remember that it is
in screen coordinates.

00:17:23.205 --> 00:17:26.496
And finally, there's
the accessibility value.

00:17:27.316 --> 00:17:29.036
This is useful for
elements that have some sort

00:17:29.036 --> 00:17:30.986
of conceptual value
associated with them.

00:17:31.576 --> 00:17:34.366
So for instance, a slider
returns its current value

00:17:34.366 --> 00:17:35.946
in percent through the
accessibility value.

00:17:36.606 --> 00:17:38.486
An on-off switch
returns on or off.

00:17:38.666 --> 00:17:40.336
And if you had some
sort of custom control

00:17:40.336 --> 00:17:41.966
that controlled the
magnification level

00:17:41.966 --> 00:17:45.886
of an instrument, you'd want to
convey that magnification level

00:17:45.886 --> 00:17:47.016
through the accessibility value.

00:17:47.596 --> 00:17:52.016
Okay, so what do you do
if you do custom drawing

00:17:52.616 --> 00:17:55.406
where each logical piece of your
interface doesn't map directly

00:17:55.406 --> 00:17:56.086
to a UI view?

00:17:57.256 --> 00:17:59.776
When you need to do that,
use UIAccessibilityElement.

00:18:00.496 --> 00:18:04.086
UIAccessibilityElement objects
represent logical accessible

00:18:04.086 --> 00:18:04.946
regions onscreen.

00:18:05.276 --> 00:18:08.006
And they interact with the
UIAccessibility protocol just

00:18:08.006 --> 00:18:09.106
like your views do.

00:18:09.546 --> 00:18:12.396
You can use them, for instance,
to expose each individual piece

00:18:12.396 --> 00:18:14.716
of a control that's built
as a single UI view.

00:18:15.496 --> 00:18:19.856
So to do so, make the element
whose pieces you want to expose

00:18:19.856 --> 00:18:21.246
into an accessibility container

00:18:21.726 --> 00:18:24.736
by setting its accessibility
elements property to an array

00:18:24.736 --> 00:18:26.496
of UIAccessibilityElement
objects

00:18:26.556 --> 00:18:29.226
that represent each
individual piece of the control.

00:18:30.976 --> 00:18:34.386
So, UIAccessibilityElement
is a natural choice to expose

00:18:34.386 --> 00:18:37.386
that graph we saw earlier where
I was doing some custom layers

00:18:37.766 --> 00:18:39.786
to present the graph bars.

00:18:40.306 --> 00:18:42.316
But if you're a very astute
listener you may have noticed a

00:18:42.316 --> 00:18:42.916
slight snag.

00:18:45.456 --> 00:18:47.916
UIAccessibilityElement
objects aren't views,

00:18:48.006 --> 00:18:49.986
so we need to set their
accessibility frame manually.

00:18:50.516 --> 00:18:53.876
However, those graph bars
were inside of a scroll view,

00:18:54.136 --> 00:18:56.316
so their frames and
screen coordinates change.

00:18:57.136 --> 00:18:59.386
Now, to rectify this
we could subclass,

00:18:59.386 --> 00:19:01.746
or we could set accessibility
frame after each scroll.

00:19:02.326 --> 00:19:05.806
Or, in iOS X we can
set accessibility frame

00:19:05.806 --> 00:19:06.806
in container space.

00:19:07.396 --> 00:19:10.676
When you set this property to
a container-relative frame,

00:19:11.576 --> 00:19:14.816
UIAccessibilityElement will
automatically follow its

00:19:14.816 --> 00:19:16.236
container's position onscreen.

00:19:16.806 --> 00:19:20.446
So those are the
most basic methods

00:19:20.446 --> 00:19:22.016
in the UIAccessibility
protocol along

00:19:22.016 --> 00:19:23.216
with UIAccessibilityElement.

00:19:23.216 --> 00:19:25.196
And you'll get most of the
way there with just those.

00:19:25.576 --> 00:19:26.536
So what are the takeaways?

00:19:27.096 --> 00:19:28.806
First, know that the methods

00:19:28.806 --> 00:19:31.646
in UIAccessibility protocol are
how you expose your interface

00:19:31.646 --> 00:19:32.606
items to accessibility.

00:19:33.156 --> 00:19:35.456
Through the methods of this
protocol your app answers

00:19:35.456 --> 00:19:37.796
questions about what
its interface items are

00:19:37.796 --> 00:19:40.096
and what they can do.

00:19:40.336 --> 00:19:42.226
Now, for many classes
support is baked in,

00:19:42.226 --> 00:19:44.146
so there's nothing
for you to do.

00:19:44.226 --> 00:19:46.436
But you may need to set
or override properties

00:19:46.436 --> 00:19:48.166
to get the behavior you need.

00:19:48.916 --> 00:19:50.856
Finally, if you have
pieces of your interface

00:19:50.856 --> 00:19:52.216
that don't map directly
to views,

00:19:52.486 --> 00:19:54.176
use UIAccessibilityElement.

00:19:54.836 --> 00:19:56.996
So, let's go in and use
what we just learned

00:19:56.996 --> 00:19:58.016
to make our app accessible.

00:19:58.726 --> 00:20:01.486
The first thing we're
going to do is we're going

00:20:01.486 --> 00:20:05.106
to fix the fact that that
table view cell didn't convey

00:20:05.106 --> 00:20:07.756
that it was able to be
activated through VoiceOver.

00:20:08.466 --> 00:20:11.386
So, the way we're going to do
that is, in its AwakeFromNib,

00:20:11.576 --> 00:20:13.236
all we're going to do is "Or"

00:20:13.236 --> 00:20:15.546
in the trait
UIAccessibilityTraitButton.

00:20:16.516 --> 00:20:19.656
Done. All right, now
let's fix the label

00:20:19.656 --> 00:20:20.676
for that Favorite button.

00:20:21.226 --> 00:20:25.616
What we're going to do here
is when we set the route

00:20:25.616 --> 00:20:28.426
for this cell we're going
to grab the Favorite button

00:20:28.426 --> 00:20:32.796
and set its accessibility
label property to say Favorite

00:20:32.796 --> 00:20:33.886
and then the name of the route.

00:20:34.266 --> 00:20:35.526
I'm putting the name
of the route in there

00:20:35.526 --> 00:20:38.466
so it's unambiguous which
route I'm going to Favorite

00:20:38.466 --> 00:20:39.516
if I activate that button.

00:20:40.486 --> 00:20:45.166
All right, let's move
on to that graph we saw.

00:20:45.406 --> 00:20:49.216
So, like I said, I'm doing
some drawing here with layers.

00:20:49.846 --> 00:20:51.516
So we're going to use
UIAccessibilityElement.

00:20:52.316 --> 00:20:54.906
Now, what I want to do
here is first I'm going

00:20:54.906 --> 00:20:56.466
to add some ivars to keep track

00:20:56.466 --> 00:20:58.236
of the UIAccessibilityElement
objects.

00:20:59.016 --> 00:21:01.636
So, just four ivars, one
for each bar of the graph

00:21:02.106 --> 00:21:03.556
that are
UAAccessibiliytElements.

00:21:04.926 --> 00:21:07.326
Next I'll add a short
little helper function

00:21:07.326 --> 00:21:09.226
to help me translate
from a numeric rating

00:21:09.226 --> 00:21:10.586
into a user-friendly string.

00:21:10.666 --> 00:21:12.706
So, rated X of 5.

00:21:13.896 --> 00:21:17.796
And then, for each of
these didSet callbacks

00:21:17.796 --> 00:21:20.116
for these rating
properties I'm going

00:21:20.116 --> 00:21:21.846
to set the accessibility value

00:21:21.846 --> 00:21:26.406
of the appropriate accessibility
element to a friendly string

00:21:26.406 --> 00:21:27.286
that describes the rating.

00:21:28.666 --> 00:21:30.806
So, for smells -- oops.

00:21:31.516 --> 00:21:33.246
Put distractions first.

00:21:34.396 --> 00:21:37.526
Smells. Greenery.

00:21:38.136 --> 00:21:40.076
And friends.

00:21:41.216 --> 00:21:43.076
So again, just grabbing
the correct element,

00:21:43.456 --> 00:21:44.776
setting its accessibility value

00:21:44.776 --> 00:21:46.916
to be the value string
for the rating.

00:21:48.076 --> 00:21:50.046
Okay, now we need to
actually set the ivars

00:21:50.046 --> 00:21:51.566
to be valid accessibility
elements.

00:21:52.816 --> 00:21:58.196
So in AwakeFromNib here, for
those four ivars I'm just going

00:21:58.336 --> 00:22:00.816
to set it equal to a
UIAccessibilityElement

00:22:01.426 --> 00:22:03.466
with our self as the
accessibility container.

00:22:03.516 --> 00:22:06.516
Now, we're going to set the
labels for these elements

00:22:06.516 --> 00:22:10.916
to just be the text from the
label that's already there,

00:22:10.916 --> 00:22:14.246
the UI label, I should
say, that's already there.

00:22:15.166 --> 00:22:17.466
And then finally, we'll set
the accessibility properties

00:22:17.466 --> 00:22:19.366
of our self, because we want to
be an accessibility container,

00:22:19.716 --> 00:22:21.166
to just be those four elements.

00:22:21.886 --> 00:22:25.036
So now we have valid
accessibility element objects

00:22:25.156 --> 00:22:27.476
with a valid label,
or a good label,

00:22:27.476 --> 00:22:29.076
and a good accessibility value.

00:22:29.636 --> 00:22:30.826
Now we just need
to set their frame.

00:22:31.916 --> 00:22:33.586
So what we're going to
do is when we're laying

00:22:33.586 --> 00:22:40.456
out the graph bars, we'll
just grab the appropriate

00:22:40.456 --> 00:22:43.176
accessibility element and
set its accessibility frame

00:22:43.176 --> 00:22:44.016
in container space.

00:22:45.146 --> 00:22:49.076
Okay. Then the last thing we
needed to fix is the label

00:22:49.076 --> 00:22:53.526
of the cells in the
Route List view.

00:22:53.716 --> 00:22:56.216
So, I'll go to the
Route Step cell.

00:22:57.516 --> 00:22:59.416
And when we set the
appropriate waypoint

00:22:59.596 --> 00:23:01.886
that that cell represents,
what we're going

00:23:01.886 --> 00:23:03.066
to do is add some code

00:23:03.406 --> 00:23:04.986
to manually set the
accessibility label

00:23:04.986 --> 00:23:07.846
to be the waypoint's name and
then the waypoint's description.

00:23:08.376 --> 00:23:10.366
And then if it's a
hazard we'll add "Hazard."

00:23:11.106 --> 00:23:13.056
And then the hazard description.

00:23:14.186 --> 00:23:16.826
Okay, so before we build
and run this, let's go back

00:23:16.826 --> 00:23:18.876
to the slides and think about
whether there's anything

00:23:19.086 --> 00:23:20.406
that a sighted user
can do easily

00:23:20.406 --> 00:23:22.166
that a VoiceOver user still
will have trouble with.

00:23:28.196 --> 00:23:28.826
All right.

00:23:28.826 --> 00:23:33.646
So again, first, that route map.

00:23:33.786 --> 00:23:36.806
VoiceOver users can discover
the steps on the map, however,

00:23:36.946 --> 00:23:40.246
the route order is lost because
VoiceOver is reading those

00:23:40.246 --> 00:23:43.266
elements in a spatial,
top-down, left to right order.

00:23:43.796 --> 00:23:46.916
In addition, someone who's
sighted can easily see the

00:23:46.916 --> 00:23:50.006
hazards on that graph by
the distinctive icons.

00:23:50.496 --> 00:23:53.456
But someone using VoiceOver will
have to navigate through all

00:23:53.456 --> 00:23:55.566
of the waypoints on the graph
to discover all the hazards.

00:23:57.616 --> 00:24:00.326
Now, for the route step list,
there's a similar problem

00:24:00.666 --> 00:24:03.206
in that it's easily
skimmable for a sighted user

00:24:03.206 --> 00:24:05.656
who can scroll through quickly
looking through their cells

00:24:05.656 --> 00:24:07.766
with the distinctive red
text and distinctive label.

00:24:08.346 --> 00:24:11.606
But for a VoiceOver user,
it's not as skimmable.

00:24:11.606 --> 00:24:13.616
They have to go through
each individual cell.

00:24:14.056 --> 00:24:15.486
So how can we fix these issues?

00:24:16.016 --> 00:24:18.646
We're going to use the rotor.

00:24:19.176 --> 00:24:21.836
The rotor is a VoiceOver feature
that lets someone navigate

00:24:21.906 --> 00:24:24.536
across an interface by searching
for elements of a given type.

00:24:24.836 --> 00:24:26.726
So one of the built-in
rotors, for instance,

00:24:26.726 --> 00:24:28.766
is the Headings rotor,
which allows someone

00:24:28.766 --> 00:24:31.746
to navigate an interface by
jumping between the headings.

00:24:32.106 --> 00:24:35.846
To use the rotor you take two
fingers and twist onscreen

00:24:35.906 --> 00:24:37.846
as though you're
manipulating a physical dial.

00:24:38.656 --> 00:24:41.436
Do that to select the rotor
setting to use, and then swipe

00:24:41.476 --> 00:24:44.466
up or down with one
finger to search previous

00:24:44.466 --> 00:24:45.506
or next with that rotor.

00:24:46.486 --> 00:24:49.636
So this year we're
introducing the ability for you

00:24:49.636 --> 00:24:51.276
to add your own custom
search rotors.

00:24:51.976 --> 00:24:53.206
We hope you'll take
advantage of this

00:24:53.206 --> 00:24:55.796
to add a totally new
navigational power to your apps

00:24:56.176 --> 00:24:57.576
when people are using
them with VoiceOver.

00:24:58.376 --> 00:25:00.656
On iOS, to add your
custom rotors,

00:25:00.656 --> 00:25:03.936
set the Accessibility Custom
Rotors property on a super view

00:25:03.936 --> 00:25:06.626
that contains the elements
through which you wish

00:25:06.626 --> 00:25:08.946
to search, or that super
view's view controller.

00:25:09.676 --> 00:25:11.756
You'll want to set
this to an array

00:25:11.756 --> 00:25:13.746
of view accessibility
custom rotor objects,

00:25:14.096 --> 00:25:15.526
which are initialized
with a name,

00:25:16.306 --> 00:25:19.536
and also an item search block
that's called each time someone

00:25:19.536 --> 00:25:22.066
swipes up or down to
search for the previous

00:25:22.066 --> 00:25:24.176
or next match to for that rotor.

00:25:27.586 --> 00:25:28.116
All right.

00:25:28.116 --> 00:25:29.456
Let's switch back over
to the demo machine

00:25:29.456 --> 00:25:30.706
and see this new API in action.

00:25:37.176 --> 00:25:40.806
Okay. So, let's first
add a Hazards rotor

00:25:40.806 --> 00:25:42.586
to the Route Step
View controller

00:25:42.806 --> 00:25:45.556
so someone can easily navigate
to the appropriate table cells

00:25:45.976 --> 00:25:47.016
that represent hazards.

00:25:47.046 --> 00:25:54.756
So, I'm going to open up the
Route Steps View controller.

00:25:54.756 --> 00:25:57.816
And I'm going to set this
property inside of AwakeFromNib.

00:25:59.116 --> 00:26:00.466
So basic skeleton here.

00:26:00.466 --> 00:26:03.406
I'm going to make a Hazards
rotor an accessibility custom

00:26:03.406 --> 00:26:05.756
rotor object with the name
Hazards and a callback.

00:26:05.756 --> 00:26:08.596
And I'm going to set the
accessibility custom rotor's

00:26:08.596 --> 00:26:10.286
property to be just that rotor.

00:26:11.376 --> 00:26:15.286
And inside of the callback here,
the search block, I'm just going

00:26:15.286 --> 00:26:17.306
to get our reference
to our data model here,

00:26:17.306 --> 00:26:18.236
an array of waypoints,

00:26:18.486 --> 00:26:20.586
and determine whether we're
going forwards or backwards

00:26:20.586 --> 00:26:23.656
by inspecting the
predicate that we're passed.

00:26:24.246 --> 00:26:26.326
Next, we're going to find where
we need to start our search.

00:26:27.046 --> 00:26:29.986
So, by default, if
there is no selection

00:26:29.986 --> 00:26:31.096
in the table view right now,

00:26:31.486 --> 00:26:33.786
we're going to start
either before the first item

00:26:33.816 --> 00:26:34.976
or after the last item,

00:26:35.196 --> 00:26:37.426
depending on whether we're
going forwards or backwards.

00:26:37.616 --> 00:26:40.086
So we go into the list of cells.

00:26:40.816 --> 00:26:42.916
Otherwise, if we
have a current item,

00:26:44.126 --> 00:26:45.706
we're going to get it as a cell.

00:26:45.706 --> 00:26:48.916
And then start at the
appropriate row that represents

00:26:48.956 --> 00:26:50.186
that item in our data model.

00:26:50.756 --> 00:26:53.116
Okay. Then we're going to search

00:26:53.116 --> 00:26:58.206
through our data model
with this loop here.

00:26:58.836 --> 00:27:02.106
And we're going to search
until we find a match.

00:27:02.836 --> 00:27:06.196
And a match is just a
waypoint that is a hazard.

00:27:06.836 --> 00:27:10.886
So if we find a result, we're
going to get an index path

00:27:10.886 --> 00:27:15.576
for that result, scroll to
that row in the table view,

00:27:16.096 --> 00:27:17.916
grab the cell that we
potentially just scrolled

00:27:17.916 --> 00:27:20.926
onscreen and return a
UIAccessibility custom rotor

00:27:20.926 --> 00:27:23.676
item result with the
target element the cell.

00:27:23.676 --> 00:27:27.066
Now, it also supports
a target range property

00:27:27.196 --> 00:27:28.406
in the initializer.

00:27:29.176 --> 00:27:32.696
If we conform to UI text input,
we could use this to rotor

00:27:32.696 --> 00:27:34.526
through different
pieces of text.

00:27:34.836 --> 00:27:36.036
However, we're not doing that,

00:27:36.036 --> 00:27:37.466
so we're just going
to leave this as nil.

00:27:39.196 --> 00:27:42.386
And if our While Loop terminates
without returning anything,

00:27:42.386 --> 00:27:44.866
we'll return nil to say we
weren't able to find a result.

00:27:45.326 --> 00:27:48.256
Let's do a similar thing
in the route map cell.

00:27:51.216 --> 00:27:54.076
Sorry, we have this
helper here, which already,

00:27:54.076 --> 00:27:56.476
which searches our
annotation views starting

00:27:56.476 --> 00:27:59.736
from one annotation view
going forwards or backwards

00:28:01.136 --> 00:28:03.736
with a given predicate
that corresponds

00:28:03.736 --> 00:28:07.256
to whether we should return
that annotation view based

00:28:07.256 --> 00:28:09.596
on what data model
item it represents.

00:28:09.596 --> 00:28:14.086
So we're going to use this
to do a similar thing.

00:28:14.426 --> 00:28:15.946
We're going to override
awakeFromNib.

00:28:16.456 --> 00:28:19.326
We're going to make a
short closure that's going

00:28:19.326 --> 00:28:21.306
to help us make multiple rotors,

00:28:21.306 --> 00:28:24.026
because we're basically
all we're changing

00:28:24.216 --> 00:28:26.106
for the various rotors
is what items we return.

00:28:26.106 --> 00:28:27.956
And then we're going to use this

00:28:27.956 --> 00:28:29.916
when setting our accessibility
custom rotors property.

00:28:30.566 --> 00:28:31.966
We're going to have
a Route Steps rotor

00:28:32.526 --> 00:28:34.286
that just returns
every waypoint.

00:28:34.936 --> 00:28:39.106
And a Hazards rotor that
returns just the hazards.

00:28:39.636 --> 00:28:42.116
Okay, so in this fact array,
what are we going to do?

00:28:42.116 --> 00:28:45.586
Well, we need to create a
UIAccessibility custom rotor

00:28:45.586 --> 00:28:48.006
object with the appropriate
name.

00:28:48.556 --> 00:28:52.006
We're going to use our Search
Annotation Views helper.

00:28:52.936 --> 00:28:55.306
Pass it the current element.

00:28:55.946 --> 00:28:57.676
Whether we're going
forward or backward.

00:28:57.676 --> 00:28:59.106
And what the predicate was.

00:28:59.636 --> 00:29:04.386
And again, if we were able to
find a result, we're just going

00:29:04.386 --> 00:29:07.186
to wrap it up in a customer
rotor item result and return it.

00:29:07.916 --> 00:29:09.976
Otherwise we'll return
nil, saying we weren't able

00:29:09.976 --> 00:29:12.756
to find a previous or
next match to the rotor.

00:29:13.766 --> 00:29:14.336
All right.

00:29:14.336 --> 00:29:16.556
Let's build and run this.

00:29:16.556 --> 00:29:17.156
>> Avenue --

00:29:17.156 --> 00:29:17.826
>> There we go.

00:29:18.016 --> 00:29:18.496
>> Heading.

00:29:18.916 --> 00:29:19.236
>> All right.

00:29:19.236 --> 00:29:22.056
So let's look at
whether our changes took.

00:29:22.096 --> 00:29:22.966
>> Avenue Loop.

00:29:23.216 --> 00:29:24.566
0.8 miles.

00:29:24.566 --> 00:29:25.486
Button.

00:29:25.746 --> 00:29:27.236
>> Okay. So VoiceOver
spoke "Button."

00:29:27.236 --> 00:29:27.736
That's great.

00:29:27.826 --> 00:29:29.756
Someone can know that they
can activate this item now.

00:29:29.756 --> 00:29:31.196
Let's take a look at
this Favorite button.

00:29:31.816 --> 00:29:33.166
>> Favorite, Avenue Loop.

00:29:33.376 --> 00:29:33.876
Button.

00:29:34.136 --> 00:29:34.636
>> Great.

00:29:35.236 --> 00:29:36.026
>> Selected.

00:29:36.526 --> 00:29:37.926
Favorite Avenue Loop.

00:29:38.326 --> 00:29:40.376
>> So the selected
trait was taken care

00:29:40.376 --> 00:29:41.636
of for us by the frameworks.

00:29:41.636 --> 00:29:43.146
So I'd like to activate
this cell.

00:29:43.146 --> 00:29:44.396
>> Avenue Loop.

00:29:45.216 --> 00:29:46.706
Avenue Loop.

00:29:46.706 --> 00:29:48.126
Avenue Loop distractions.

00:29:48.596 --> 00:29:50.156
Rated 3 of 5.

00:29:50.296 --> 00:29:52.516
Smells. Rated 2 of 5.

00:29:52.616 --> 00:29:54.996
Greenery. Rated 5 of 5.

00:29:55.126 --> 00:29:57.386
Friends. Rated 4 of 5.

00:29:57.386 --> 00:29:57.776
>> Excellent.

00:29:57.816 --> 00:29:59.476
So our graph bars
are now accessible.

00:30:00.006 --> 00:30:01.426
>> Avenue Loop route.

00:30:01.516 --> 00:30:02.946
Broadway and Ridgeway.

00:30:03.506 --> 00:30:05.316
>> Okay. Now let's try
and use our new rotors.

00:30:05.806 --> 00:30:06.286
>> Headings.

00:30:06.526 --> 00:30:07.476
Words. Characters.

00:30:07.476 --> 00:30:10.146
Hazards. Route steps.

00:30:10.146 --> 00:30:11.796
Hazard. Hazard.

00:30:11.796 --> 00:30:12.866
Ridgeway and Piedmont.

00:30:13.006 --> 00:30:14.366
Piedmont and 41st.

00:30:14.546 --> 00:30:15.886
41st and Broadway.

00:30:15.886 --> 00:30:17.496
>> Great. So our Route
Steps rotor works.

00:30:17.496 --> 00:30:19.126
>> Use the rotor to access --

00:30:19.126 --> 00:30:21.026
>> Excuse me.

00:30:21.256 --> 00:30:21.746
>> Hazards.

00:30:23.146 --> 00:30:25.386
Hazard. Ridgeway and Piedmont.

00:30:25.506 --> 00:30:27.566
Hazard. Boys' Choir on Ridgeway.

00:30:27.566 --> 00:30:30.876
>> And the Hazards rotor
lets us jump right to

00:30:30.876 --> 00:30:33.326
and through the list of
all the hazards there.

00:30:33.496 --> 00:30:36.196
So, let's check out
the Steps tab again.

00:30:36.196 --> 00:30:38.026
>> Steps. Selected.

00:30:38.306 --> 00:30:40.826
Steps. 41st and Broadway.

00:30:40.826 --> 00:30:41.516
Start at --

00:30:41.516 --> 00:30:42.766
>> That was me.

00:30:42.766 --> 00:30:43.526
>> Hazards.

00:30:44.356 --> 00:30:46.026
Boys' Choir on Ridgeway.

00:30:46.386 --> 00:30:50.016
Boys' Choir on Ridgeway.

00:30:50.276 --> 00:30:53.296
Boys' Choir between Gilbert
and Montgomery on Ridgeway.

00:30:53.656 --> 00:30:55.016
Continue along Ridgeway.

00:30:55.906 --> 00:30:57.536
Hazard. Be care --

00:30:57.536 --> 00:30:57.866
>> Oh, sorry.

00:30:57.966 --> 00:30:59.436
The switch was cut off there.

00:30:59.936 --> 00:31:01.786
So you heard, though,
that it said "Hazards."

00:31:01.786 --> 00:31:04.196
So our modification to the
accessibility label took.

00:31:04.436 --> 00:31:07.086
It's now conveyed that these
cells do represent hazards.

00:31:07.476 --> 00:31:09.276
And in addition, we were
able to jump directly

00:31:09.276 --> 00:31:10.786
to them using the Hazards rotor.

00:31:11.876 --> 00:31:12.246
All right.

00:31:12.246 --> 00:31:13.216
Let's jump back to the slides.

00:31:18.276 --> 00:31:19.716
So, a quick word on tvOS.

00:31:20.436 --> 00:31:23.636
tvOS apps are built with UIKit,
so everything we've been talking

00:31:23.636 --> 00:31:25.886
about earlier applies
directly to them as well.

00:31:26.416 --> 00:31:28.766
But there are a few
considerations you need to keep

00:31:28.766 --> 00:31:31.876
in mind when building your
accessible TV apps that stem

00:31:31.876 --> 00:31:34.796
from the fact that tvOS has
a focus-driven interface.

00:31:35.966 --> 00:31:40.096
So a common pattern on
tvOS is to use headers

00:31:40.636 --> 00:31:43.716
to group content onscreen
and to separate it visually

00:31:43.716 --> 00:31:44.656
from the other content.

00:31:45.626 --> 00:31:47.166
You can give a similar
experience

00:31:47.166 --> 00:31:49.806
to someone using your app
with VoiceOver through the use

00:31:49.806 --> 00:31:51.676
of the Accessibility
Header Elements API.

00:31:53.106 --> 00:31:56.126
Set this property on
your Accessible Views,

00:31:56.376 --> 00:31:58.866
their super views or on
applicable view controller

00:31:59.856 --> 00:32:02.876
to be the headers that are
associated with that content.

00:32:03.766 --> 00:32:06.176
Then when someone
navigates to your items,

00:32:06.556 --> 00:32:08.626
VoiceOver will read
the associated headers

00:32:08.706 --> 00:32:12.446
in a distinctive pitch to give
someone using your app a sense

00:32:12.446 --> 00:32:13.746
of place in your content.

00:32:14.366 --> 00:32:22.906
So I recorded a short video
here of a art gallery app.

00:32:22.906 --> 00:32:26.516
And when I play it,
I'm going to move focus

00:32:26.516 --> 00:32:29.246
down into the collection view of
available works at the bottom.

00:32:30.156 --> 00:32:32.696
You're going to hear
VoiceOver say "Available Works"

00:32:32.696 --> 00:32:33.896
in a distinctive pitch.

00:32:34.766 --> 00:32:37.626
And that's because
I set that label

00:32:37.626 --> 00:32:40.836
to be the Accessibility Header
element of the Collection view.

00:32:41.436 --> 00:32:42.736
Now, you'll also
hear something else.

00:32:43.166 --> 00:32:47.766
When I pause, VoiceOver will
start reading through all

00:32:47.766 --> 00:32:50.546
of the non-focusable
accessibility elements onscreen.

00:32:51.026 --> 00:32:53.186
So let's hear that now.

00:32:53.316 --> 00:32:54.386
>> Available works.

00:32:54.806 --> 00:32:56.076
Grain. Button.

00:32:57.346 --> 00:32:58.756
Title. Grain.

00:32:59.016 --> 00:33:01.086
Author. Vivian Li.

00:33:01.086 --> 00:33:01.776
Description.

00:33:02.176 --> 00:33:03.966
Close up of a strand of grain.

00:33:04.316 --> 00:33:06.216
It glistens with morning dew.

00:33:06.686 --> 00:33:07.646
>> So, the reason I showed you

00:33:07.646 --> 00:33:11.286
that secondary Read All behavior
is to hammer home that all

00:33:11.286 --> 00:33:14.546
of the information your app
provides needs to be exposed

00:33:14.546 --> 00:33:15.876
through an accessibility
element,

00:33:16.256 --> 00:33:18.346
even if it's not
natively focusable

00:33:18.526 --> 00:33:19.996
by the tvOS focus engine.

00:33:20.516 --> 00:33:25.026
When you do that, when you
pause navigating with VoiceOver,

00:33:25.326 --> 00:33:27.446
VoiceOver will then read all

00:33:27.446 --> 00:33:29.486
of the non-focusable
content onscreen

00:33:29.736 --> 00:33:31.036
so that information
will be conveyed

00:33:31.036 --> 00:33:32.976
to someone using the
app with VoiceOver.

00:33:33.416 --> 00:33:36.286
Okay. Let's wrap up.

00:33:36.816 --> 00:33:39.236
So, when you're out there
implementing your apps

00:33:39.496 --> 00:33:40.796
with an eye to accessibility,

00:33:40.796 --> 00:33:41.886
keep in mind what
you've learned here.

00:33:43.216 --> 00:33:45.136
First, accessibility
is about everyone.

00:33:45.736 --> 00:33:48.466
It's about making the great
experiences your app provides

00:33:48.466 --> 00:33:50.456
available to as many
people as possible.

00:33:50.716 --> 00:33:54.236
You'll want to design
with accessibility

00:33:54.236 --> 00:33:55.226
in mind from the start.

00:33:55.776 --> 00:33:58.346
Is anything difficult to use
in your interface for someone

00:33:58.346 --> 00:33:59.256
with a motor disability?

00:33:59.756 --> 00:34:01.366
Is anything too low contrast?

00:34:01.966 --> 00:34:04.186
Excuse me.

00:34:04.436 --> 00:34:07.476
UIKit helps your apps become
accessible through your adoption

00:34:07.476 --> 00:34:08.956
of the accessibility APIs.

00:34:10.076 --> 00:34:13.436
And finally, accessible apps are
what make our platforms great.

00:34:13.606 --> 00:34:14.906
So thanks so much for being here

00:34:14.906 --> 00:34:15.906
and learning about
how to do that.

00:34:17.106 --> 00:34:19.886
So for more information you can
check out this session online.

00:34:19.916 --> 00:34:21.235
It's Session Number 202.

00:34:21.606 --> 00:34:24.896
And there are some
related sessions this week

00:34:24.896 --> 00:34:25.806
that you should check out.

00:34:25.806 --> 00:34:29.005
At 10:00 a.m. in this very
room there's a session

00:34:29.005 --> 00:34:30.376
on Inclusive App Design.

00:34:30.376 --> 00:34:31.565
So make sure you stick around.

00:34:33.286 --> 00:34:35.795
And on Wednesday at 10:00 a.m.

00:34:35.795 --> 00:34:37.806
in Nob Hill there's the
session Auditing your Apps

00:34:37.806 --> 00:34:40.166
for Accessibility, which again
is where you can learn more

00:34:40.166 --> 00:34:42.396
about that new accessibility
inspector,

00:34:42.815 --> 00:34:44.306
which I definitely
recommend you check out.

00:34:44.656 --> 00:34:46.306
So that's all I have for today.

00:34:46.485 --> 00:34:48.025
Thanks so much and have
a great conference.

00:34:49.516 --> 00:34:59.170
[ Applause ]