WEBVTT

00:00:07.516 --> 00:00:17.500
[ Music ]

00:00:21.606 --> 00:00:25.336
>> Welcome to the
session 724 on What's New

00:00:25.486 --> 00:00:27.516
in Apple Push Notification
Service.

00:00:28.136 --> 00:00:29.886
My name is Mayur Mahajan.

00:00:30.426 --> 00:00:35.006
And I work on the Apple Push
Notification Service, or APNS.

00:00:35.426 --> 00:00:39.846
And I'm excited to share with
you what's coming to APNS.

00:00:40.366 --> 00:00:45.716
Let's get started with a review
of important enhancements

00:00:45.716 --> 00:00:47.036
that were released last year.

00:00:48.106 --> 00:00:52.416
First, we introduced a brand
new provider protocol based

00:00:52.646 --> 00:00:55.236
on HTTP/2 persistent Pushes.

00:00:56.076 --> 00:01:01.166
HTTP/2 is a binary protocol
that supports multiple streams

00:01:01.166 --> 00:01:04.836
over a single connection
and is extremely fast.

00:01:05.636 --> 00:01:08.506
The new protocol has
made it very easy

00:01:09.026 --> 00:01:11.436
to send Push notifications
to their devices.

00:01:11.976 --> 00:01:16.456
The new protocol supports
providing instant feedback

00:01:17.066 --> 00:01:20.576
to indicate which device
tokens are no longer active.

00:01:22.096 --> 00:01:25.466
It is also possible to
send larger payloads,

00:01:26.066 --> 00:01:29.226
up to four kilobytes, that
you can take advantage

00:01:29.226 --> 00:01:31.706
of for creating rich
applications.

00:01:32.216 --> 00:01:36.696
In addition, we'll simplify
the certificate handling

00:01:37.526 --> 00:01:41.996
so you will now have to maintain
fewer client certificates used

00:01:41.996 --> 00:01:43.786
to connect to APNS.

00:01:44.316 --> 00:01:48.026
We have received a lot
of positive feedback

00:01:48.026 --> 00:01:49.366
from the developer community.

00:01:50.676 --> 00:01:52.776
We deliver hundreds of thousands

00:01:52.776 --> 00:01:55.786
of notifications per second
using this new protocol.

00:01:56.756 --> 00:01:59.796
If you are not using this
already you should definitely

00:01:59.796 --> 00:02:00.766
try it.

00:02:03.446 --> 00:02:07.436
So let's recap the sequence
of steps that are involved

00:02:07.436 --> 00:02:09.076
in sending Push notifications.

00:02:09.756 --> 00:02:12.956
On the bottom right is
your client application.

00:02:13.386 --> 00:02:16.736
And on the top right
is the provider,

00:02:17.116 --> 00:02:20.836
which is the server component
that connects to APNS

00:02:21.356 --> 00:02:23.156
and sends Push notifications.

00:02:24.746 --> 00:02:27.166
Now, before you start
sending notifications,

00:02:27.866 --> 00:02:30.356
you should register
for Push notifications

00:02:30.506 --> 00:02:31.826
in the developer account.

00:02:32.296 --> 00:02:37.216
The application will register
with the operating system,

00:02:37.776 --> 00:02:39.916
running on the device
on the bottom left.

00:02:41.156 --> 00:02:44.836
The device will request
a token from APNS

00:02:45.126 --> 00:02:46.936
on behalf of the application.

00:02:47.726 --> 00:02:49.686
And then return it back
to your application.

00:02:50.236 --> 00:02:53.846
This device token will be unique

00:02:53.846 --> 00:02:56.606
for your application
running on this device.

00:02:57.126 --> 00:03:02.056
Your application should forward
this token to the provider.

00:03:03.216 --> 00:03:06.286
Now, the provider
service will connect

00:03:06.286 --> 00:03:09.566
to APNS using the
client certificate

00:03:09.886 --> 00:03:14.166
and then use standard
HTTP/2 post request

00:03:15.016 --> 00:03:17.076
to send a Push to
that device token.

00:03:20.196 --> 00:03:26.616
HTTP/2 provider API will provide
an immediate response indicating

00:03:26.616 --> 00:03:28.866
success if everything was okay.

00:03:29.766 --> 00:03:32.686
And APNS has received
and validated

00:03:32.826 --> 00:03:35.686
that the Push request
is [inaudible].

00:03:36.576 --> 00:03:42.296
Now, if there was an error, say
the device token is not valid,

00:03:42.296 --> 00:03:47.456
APNS will return an error
status 400, or "invalid request"

00:03:48.156 --> 00:03:50.856
with adjacent payload
indicating the reason.

00:03:51.676 --> 00:03:54.356
For example, a bad device token.

00:03:54.916 --> 00:04:00.486
The new provider protocol also
provides instant feedback.

00:04:01.056 --> 00:04:03.726
So if a device token
has been removed,

00:04:04.436 --> 00:04:10.276
you will get an HTTP/2 response
with status 410, or "removed."

00:04:10.896 --> 00:04:15.386
It will have a time stamp
in payload indicating

00:04:15.576 --> 00:04:20.396
when APNS last learned that the
device token has been removed.

00:04:24.116 --> 00:04:27.306
We also simplified
certificate handling as part

00:04:27.306 --> 00:04:29.006
of the new provider protocol.

00:04:30.246 --> 00:04:33.196
You can now provision
a single certificate

00:04:33.546 --> 00:04:38.536
for your application,
complication, and VoiP Pushes.

00:04:39.056 --> 00:04:44.176
The same certificate can
be used in both development

00:04:44.446 --> 00:04:46.016
and production environments.

00:04:47.246 --> 00:04:51.046
This has reduced the
headaches of managing, renewing

00:04:51.366 --> 00:04:54.046
and revocation of
multiple certificates

00:04:54.076 --> 00:04:55.386
for many developers.

00:04:55.926 --> 00:04:58.966
Now, we are listening
to feedback

00:04:58.996 --> 00:05:00.436
from developers like you.

00:05:01.076 --> 00:05:02.936
And we understand the importance

00:05:03.036 --> 00:05:05.966
of simplifying the work
flow that's involved

00:05:06.106 --> 00:05:07.786
in sending Push notifications.

00:05:09.046 --> 00:05:12.696
We understand that managing
certificates is too complex

00:05:12.846 --> 00:05:14.036
for some applications.

00:05:14.606 --> 00:05:20.246
So today we are thrilled
to announce a brand new

00:05:20.596 --> 00:05:24.726
and a simple way of
authenticating against APNS.

00:05:25.976 --> 00:05:28.706
Introducing token authentication

00:05:28.916 --> 00:05:31.566
for Apple Push notification
service.

00:05:32.006 --> 00:05:40.596
Token authentication is a way
of using provider tokens instead

00:05:40.596 --> 00:05:44.186
of client certificate when
sending notifications.

00:05:47.546 --> 00:05:50.466
The authentication
tokens are intended

00:05:50.466 --> 00:05:54.056
to simplify how services
connect to APNS.

00:05:55.176 --> 00:05:59.606
In addition, the tokens are easy
to generate programmatically,

00:06:00.446 --> 00:06:03.316
so there is no need
to worry about having

00:06:03.316 --> 00:06:05.596
to reissue expiring
certificates.

00:06:06.916 --> 00:06:11.086
This is enabled through
the use of JSON Web tokens

00:06:11.566 --> 00:06:15.396
as a mechanism to generate
authentication credentials.

00:06:15.396 --> 00:06:20.826
There are a number of libraries
widely available for use

00:06:20.986 --> 00:06:23.536
with the programming
language of your choice

00:06:23.736 --> 00:06:25.076
to generate these tokens.

00:06:25.626 --> 00:06:29.746
Now, before we get
into the details

00:06:30.336 --> 00:06:32.326
of how token authentication
works,

00:06:32.326 --> 00:06:36.436
let's first recap how
certificate authentication

00:06:36.436 --> 00:06:37.306
will work.

00:06:39.696 --> 00:06:40.546
You opt in.

00:06:41.036 --> 00:06:46.746
Provide a client certificate
from your developer account.

00:06:48.066 --> 00:06:52.056
When connecting to APNS
using mutual authentication,

00:06:53.026 --> 00:06:56.156
APNS will provide a
server certificate

00:06:56.646 --> 00:06:58.786
that you will trust
and validate.

00:06:59.256 --> 00:07:01.666
As part of the handshake,

00:07:02.276 --> 00:07:05.816
your provider will also
sign the client certificate,

00:07:06.316 --> 00:07:11.306
which APNS will validate and
use to establish credentials.

00:07:12.096 --> 00:07:16.216
At this point, there is a
trusted connection established

00:07:16.216 --> 00:07:19.066
between APNS and the provider.

00:07:20.576 --> 00:07:24.076
Any Pushes you send on this
connection are attached

00:07:24.266 --> 00:07:28.000
to the application identified
by the client certificate.

00:07:32.436 --> 00:07:35.716
When using token
authentication, you should opt

00:07:35.716 --> 00:07:38.606
in a token sign-in
key from the account.

00:07:40.246 --> 00:07:43.676
Your provider will then
establish a PLS connection

00:07:44.316 --> 00:07:45.816
without a client certificate.

00:07:46.806 --> 00:07:49.526
However, before sending
notifications

00:07:49.526 --> 00:07:54.176
on this connection, the provider
will construct an authentication

00:07:54.176 --> 00:07:57.286
token that includes
your team ID.

00:07:58.086 --> 00:08:02.066
And then sign it using
the key opt indicator.

00:08:06.686 --> 00:08:10.046
Now it's possible to
send notifications

00:08:10.046 --> 00:08:10.926
on this connection.

00:08:12.146 --> 00:08:16.996
Every notification message
that's signed must include the

00:08:16.996 --> 00:08:18.026
authentication token.

00:08:19.226 --> 00:08:23.766
Also, the application topic
should be part of this request.

00:08:24.146 --> 00:08:29.976
APNS will first authenticate
the provider using the token

00:08:30.566 --> 00:08:32.486
and then process the request.

00:08:33.076 --> 00:08:37.716
If this request is
processed successfully,

00:08:37.716 --> 00:08:43.566
APNS will send a response
back indicating success.

00:08:44.155 --> 00:08:47.896
If no token was provided
with the request

00:08:48.036 --> 00:08:50.236
or if the token was invalid,

00:08:51.266 --> 00:08:54.616
a response will be sent
back indicating the error.

00:08:55.166 --> 00:09:01.796
As a reminder, APNS will not
close the connection on error.

00:09:03.346 --> 00:09:06.926
So let's take a look at how
to generate a provider token.

00:09:08.606 --> 00:09:11.926
You should start with
provisioning a sign-in key

00:09:12.626 --> 00:09:15.616
from the certificates,
identities

00:09:15.886 --> 00:09:18.126
and profile section
in the account.

00:09:18.626 --> 00:09:23.716
A public-private
keypad is generated.

00:09:24.326 --> 00:09:27.456
And the private key
can then be used

00:09:27.766 --> 00:09:31.366
to cryptographically
sign the token data.

00:09:32.656 --> 00:09:35.196
Apple will use the
corresponding public key

00:09:35.966 --> 00:09:37.576
for validating the token.

00:09:38.036 --> 00:09:42.206
Next, let's look at how
you construct the token.

00:09:42.816 --> 00:09:51.336
At the top is an example of what
a JSON Web token that's part

00:09:51.336 --> 00:09:53.766
of the request might look like.

00:09:55.416 --> 00:09:58.566
Let's go over the structure
of this JSON Web token.

00:10:01.086 --> 00:10:02.786
You can see it has three parts.

00:10:03.386 --> 00:10:09.606
Each part is a URL friendly
base-64 encoded string that's

00:10:09.606 --> 00:10:11.906
delimited by a period.

00:10:13.106 --> 00:10:15.566
Below is the decoded
representation

00:10:15.566 --> 00:10:16.636
of this Web token.

00:10:17.166 --> 00:10:20.616
The first part is the header.

00:10:21.826 --> 00:10:23.856
And it includes attributes

00:10:24.016 --> 00:10:27.936
that specify the algorithm
used to sign the token.

00:10:28.746 --> 00:10:31.866
In our case, it's ES256.

00:10:32.636 --> 00:10:38.036
It will also include the
key identifier for the key

00:10:38.586 --> 00:10:40.116
that is used to sign the token.

00:10:40.696 --> 00:10:47.076
The claims section will
include an assurer tribute,

00:10:47.556 --> 00:10:50.596
which is your developer team ID

00:10:51.156 --> 00:10:53.226
that can be obtained
from the account.

00:10:53.696 --> 00:11:00.016
The next attribute in the claims
is initial time stamp that's

00:11:00.016 --> 00:11:03.066
expressed as seconds
since epoch.

00:11:04.536 --> 00:11:07.696
The last part of the token
is simply the signature

00:11:07.896 --> 00:11:11.726
in base 64 obtained by
applying the signing algorithm

00:11:12.286 --> 00:11:14.146
to the header and the claims.

00:11:15.436 --> 00:11:17.856
This prevents any
unauthorized tampering

00:11:18.366 --> 00:11:21.000
of the token once
it is generated.

00:11:25.326 --> 00:11:28.666
Here is what an HTTP/2 creates

00:11:28.776 --> 00:11:31.866
for a request using token
authentication will look like.

00:11:33.036 --> 00:11:37.036
As you can see, this
request contains a header

00:11:37.116 --> 00:11:38.036
and a data frame.

00:11:39.136 --> 00:11:40.586
The header frame consists

00:11:40.586 --> 00:11:44.306
of various header fields
including APNS topic.

00:11:45.566 --> 00:11:50.016
Now, you will notice that the
header frame now includes an

00:11:50.016 --> 00:11:54.896
authorization header with
the value "bearer" followed

00:11:54.896 --> 00:11:56.476
by the signed provider token.

00:11:57.036 --> 00:12:02.896
If the request including the
authentication token is valid,

00:12:03.816 --> 00:12:07.386
the response will be
status 200 or "OK."

00:12:11.426 --> 00:12:13.106
Here is what the
response will look

00:12:13.636 --> 00:12:16.316
if the provider token
was not valid.

00:12:17.576 --> 00:12:21.876
In this case, it is
status 403, or "Forbidden."

00:12:23.346 --> 00:12:28.186
Now, APNS will require
that new tokens be

00:12:28.186 --> 00:12:29.506
periodically generated.

00:12:30.096 --> 00:12:36.926
If the token is too old,
the response will, again,

00:12:37.056 --> 00:12:42.096
be a 403 "Forbidden" error
with reason indicating

00:12:42.366 --> 00:12:44.036
that the token has expired.

00:12:44.526 --> 00:12:51.406
APNS will require that the
token creation time must be

00:12:51.406 --> 00:12:53.396
within the last hour.

00:12:54.376 --> 00:12:59.196
However, a new token should not
be generated on every request.

00:13:00.126 --> 00:13:03.176
In fact, for performance
we recommend

00:13:03.516 --> 00:13:07.486
that the token be reused
as long as it is valid.

00:13:11.486 --> 00:13:15.226
So here are a few more details
regarding token authentication.

00:13:16.506 --> 00:13:20.676
As mentioned earlier,
the provider tokens need

00:13:20.676 --> 00:13:22.286
to be generated periodically.

00:13:23.346 --> 00:13:27.296
However, note that the
sign-in key does not expire.

00:13:28.656 --> 00:13:32.356
Now, if you suspect that the
sign-in key may have been

00:13:32.356 --> 00:13:36.556
compromised, you can revoke
the key from your account

00:13:36.976 --> 00:13:38.826
and provision a new key.

00:13:39.386 --> 00:13:44.166
As a reminder, APNS
will continue

00:13:44.486 --> 00:13:46.236
to support certificate
authentication.

00:13:46.826 --> 00:13:50.716
So that is token authentication.

00:13:51.806 --> 00:13:54.366
And it's coming later this year.

00:13:54.946 --> 00:14:01.196
For more information visit
the Website for this session

00:14:01.876 --> 00:14:10.246
at
developer.apple.com/wwdc16/724.

00:14:12.856 --> 00:14:15.586
Here are relevant
sessions on notifications

00:14:15.786 --> 00:14:19.116
that you might be
interested in: Introduction

00:14:19.116 --> 00:14:23.476
to Notifications will be in
Pacific Heights on Wednesday

00:14:23.846 --> 00:14:27.086
at 9:00 a.m. followed
by a session

00:14:27.256 --> 00:14:31.416
on Advanced Notifications in
Pacific Heights on Wednesday

00:14:31.696 --> 00:14:34.496
at 10:00 a.m. And we
hope to see you there.

00:14:35.126 --> 00:14:36.136
Thank you very much.