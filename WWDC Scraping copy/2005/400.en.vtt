WEBVTT

00:00:04.220 --> 00:00:09.280
Ladies and gentlemen, please welcome
Vice President Development Technologies,

00:00:09.320 --> 00:00:11.810
Ted Goldstein.

00:00:17.370 --> 00:00:18.230
Thank you very much.

00:00:18.320 --> 00:00:21.430
Good afternoon.

00:00:21.470 --> 00:00:22.940
Let me hear you a little louder.

00:00:23.020 --> 00:00:25.140
Good afternoon.

00:00:25.140 --> 00:00:25.650
Thank you.

00:00:25.740 --> 00:00:26.660
Good afternoon.

00:00:26.700 --> 00:00:27.500
Hello.

00:00:27.510 --> 00:00:30.360
This is the
Development Tools State of the Union,

00:00:30.390 --> 00:00:32.460
or as I like to think of it,

00:00:34.450 --> 00:00:35.740
The development--no.

00:00:35.810 --> 00:00:40.100
This is The Hitchhiker's
Guide to Xcode Tools.

00:00:40.740 --> 00:00:43.240
Why the Hitchhiker's
Guide to Xcode Tools?

00:00:43.300 --> 00:00:47.960
Well, it was a great movie,
and it's a lot of fun.

00:00:47.960 --> 00:00:50.650
I think we're going to have a lot
of fun with this presentation.

00:00:50.940 --> 00:00:54.670
But did anybody bring a towel?

00:00:55.400 --> 00:00:56.400
Thank you, thank you.

00:00:56.400 --> 00:00:57.830
Got to have a towel.

00:00:57.920 --> 00:01:00.470
Of course, you know,
the Hitchhiker's Guide is all about,

00:01:00.470 --> 00:01:03.300
you know,
essentially the end of the world

00:01:03.640 --> 00:01:09.280
and changing it to a new world,
which is what we're really

00:01:09.280 --> 00:01:09.280
all about doing here.

00:01:09.930 --> 00:01:13.920
So the first message, of course,
is don't panic.

00:01:13.990 --> 00:01:15.320
Don't panic, right?

00:01:15.620 --> 00:01:17.340
It's not so bad.

00:01:17.340 --> 00:01:21.380
You know, we're in pretty good shape,
in fact, because really,

00:01:21.540 --> 00:01:25.720
Apple really has the tools you
need to create the greatest

00:01:25.770 --> 00:01:28.220
application in the universe.

00:01:28.220 --> 00:01:30.230
Apple--we've been working on
this for a number of years,

00:01:30.290 --> 00:01:32.980
and we've been thinking about
the kinds of things you're

00:01:32.980 --> 00:01:38.060
likely to encounter should this
day of a major transition come.

00:01:38.060 --> 00:01:40.270
So first, though,
before we get into a lot

00:01:40.300 --> 00:01:43.830
of details about that,
I want to recap, essentially,

00:01:43.880 --> 00:01:48.380
what Xcode is about and some of
the other great tools in Tiger.

00:01:48.600 --> 00:01:53.170
Tiger, of course,
we shipped it on April 29th,

00:01:53.340 --> 00:01:58.940
and we also shipped Automator
on April 29th as part of Tiger,

00:01:58.940 --> 00:02:02.700
and that was also the day, in fact,
that the Hitchhiker's Guide to

00:02:02.700 --> 00:02:04.220
the Galaxy movie came out.

00:02:04.230 --> 00:02:06.660
Now, this is kind of a similarity here.

00:02:06.660 --> 00:02:12.190
In fact, we-- We tend to think of
this little man as Otto,

00:02:12.190 --> 00:02:14.460
and I think Otto can
kick that little man,

00:02:14.460 --> 00:02:16.970
Marvin's butt.

00:02:17.290 --> 00:02:19.070
It's, you know, a nice similarity.

00:02:19.260 --> 00:02:20.380
Marvin kind of depressed.

00:02:20.700 --> 00:02:23.010
Otto, you know,
he really wants to help you.

00:02:23.010 --> 00:02:24.700
Automator is a great application.

00:02:24.700 --> 00:02:30.190
It really is there to help expand
what your applications can do.

00:02:30.190 --> 00:02:32.860
It has very little
functionality of itself.

00:02:32.860 --> 00:02:35.750
In some sense,
it is a modern Unix shell-type thing

00:02:35.940 --> 00:02:37.830
with a graphical user interface.

00:02:37.830 --> 00:02:40.070
So, user interface.

00:02:40.300 --> 00:05:11.100
[Transcript missing]

00:05:12.380 --> 00:05:13.980
Now I want to talk about Xcode.

00:05:14.050 --> 00:05:17.480
And of course,
start talking about Xcode 2.0.

00:05:17.750 --> 00:05:22.480
Now, Xcode really is the fastest way
to create Mac OS X applications.

00:05:22.530 --> 00:05:26.650
There's a number of wonderful
features we put in it--CodeSense,

00:05:26.690 --> 00:05:29.660
predictive compilation,
distributed builds.

00:05:29.660 --> 00:05:33.920
These are things which speed
up compilation and the ability

00:05:34.090 --> 00:05:37.360
to get--to find and create
the program that you're doing.

00:05:37.360 --> 00:05:40.780
Zero link essentially incrementally
links your program as it's running.

00:05:40.780 --> 00:05:43.560
And fix and continue is a debugging
feature so that when you make a--you

00:05:43.750 --> 00:05:47.820
can make a modification on the fly
without quitting the program state,

00:05:47.860 --> 00:05:51.760
the compiler runs and dynamically
links in the--the changed code

00:05:51.760 --> 00:05:54.510
into the application and so
that you can continue along.

00:05:56.670 --> 00:05:59.930
Xcode 2.0 essentially is kind of a world,
right?

00:05:59.960 --> 00:06:02.540
It's a whole environment,
and this environment contains many

00:06:02.540 --> 00:06:07.990
important features that really
help you develop application.

00:06:09.310 --> 00:06:13.720
Each of these features we've
designed as part--and delivered

00:06:13.720 --> 00:06:19.020
with Xcode 2.0 as part of Tiger to
accelerate your development,

00:06:19.040 --> 00:06:24.240
to make it easier to develop,
to widen your capabilities.

00:06:24.240 --> 00:06:31.530
One of the big improvements in Tiger was
the transition from GCC 3.3 to 4.0.

00:06:31.760 --> 00:06:34.980
And we made improvements
there on every point.

00:06:35.080 --> 00:06:36.780
We made improvements
to make it both faster,

00:06:36.880 --> 00:06:37.910
better, and more powerful.

00:06:37.920 --> 00:06:40.360
We improved the front end,
the middle end, and the back end.

00:06:40.410 --> 00:06:42.680
The front end,
one of the most important things

00:06:42.850 --> 00:06:46.610
I'm sure you'll love is that
it's 20% to 30% faster compile

00:06:46.610 --> 00:06:48.840
times for C++ and Objective-C++.

00:06:48.950 --> 00:06:52.490
And we did this by writing a new
C++ parser that's part of the

00:06:52.490 --> 00:06:54.750
Free Software Foundations community.

00:06:54.820 --> 00:06:57.700
We've added in, of course,
Objective-C part of it

00:06:57.910 --> 00:06:59.560
to make it Objective-C++.

00:06:59.680 --> 00:07:01.550
And it's much better
standards conforming.

00:07:01.660 --> 00:07:05.690
It gives you improved better
errors and warning messages.

00:07:05.710 --> 00:07:07.790
To the middle end,
we made important changes

00:07:07.790 --> 00:07:09.110
in order vectorization.

00:07:09.230 --> 00:07:11.970
So if you don't want to write
the vector code yourself,

00:07:12.140 --> 00:07:12.930
you don't have to.

00:07:13.110 --> 00:07:17.610
And in fact, just with one switch,
it can actually, in many cases,

00:07:17.970 --> 00:07:22.560
take floating point loops and
generate the AltaVec instructions.

00:07:22.650 --> 00:07:25.090
We've improved the integration
of all the features.

00:07:25.170 --> 00:07:28.370
So between, for example,
C++ and Objective-C.

00:07:28.490 --> 00:07:29.520
So now, for example,
you can implement the C++ code.

00:07:29.520 --> 00:07:33.690
You can embed your Objective-C,
your C++ objects in your

00:07:33.690 --> 00:07:35.480
Objective-C objects.

00:07:35.720 --> 00:07:39.200
But an extremely important technology
that's a foundation there now

00:07:39.350 --> 00:07:44.280
that is going to continue paying
dividends for many years to come

00:07:44.640 --> 00:07:47.080
is a new technology called TreeSSA.

00:07:47.270 --> 00:07:51.160
TreeSSA is essentially the single
static assignment optimization

00:07:51.220 --> 00:07:57.620
technology that is the most powerful
optimization technology that every high

00:07:57.620 --> 00:07:59.370
performance optimizing compiler uses.

00:07:59.480 --> 00:08:04.140
Using that, we're able to now do
better loop optimization,

00:08:04.150 --> 00:08:06.380
loop unrolling,
being able to -- the order

00:08:06.470 --> 00:08:07.740
vectorizer is driven off of this.

00:08:07.740 --> 00:08:10.680
And we will be adding in additional
optimizations coming along.

00:08:10.680 --> 00:08:13.990
So if you have -- you can
actually help since GCC is,

00:08:13.990 --> 00:08:17.310
of course,
from the free software foundation.

00:08:17.540 --> 00:08:20.160
You, too,
can check out a copy of the source code,

00:08:20.220 --> 00:08:23.040
make modifications,
and improve the optimization

00:08:23.050 --> 00:08:24.980
capabilities of the compiler.

00:08:25.090 --> 00:08:27.790
In the back end, another important
feature is long doubles,

00:08:27.790 --> 00:08:29.220
giving you even more precision.

00:08:29.440 --> 00:08:33.800
And for the first time,
we are now standardizing on a C++ ABI.

00:08:33.900 --> 00:08:36.920
This means that you no longer have
to link in the lib standard C++

00:08:36.920 --> 00:08:38.660
library into your application.

00:08:38.720 --> 00:08:43.490
So Hello World is only a few K bytes in
size instead of several hundred K bytes.

00:08:43.500 --> 00:08:46.730
And, of course,
a great feature for G5 is 64-bit,

00:08:46.730 --> 00:08:50.700
being able to access greater than
4 gigabytes of virtual memory.

00:08:50.700 --> 00:08:54.130
Altogether,
GCC 4.0 is a fabulous new platform and

00:08:54.280 --> 00:08:58.990
part of the new universal compiler that
we'll be talking about in a few minutes.

00:09:00.570 --> 00:09:01.400
Auto vectorization.

00:09:01.400 --> 00:09:05.900
So this is a piece of code extracted
for doing image processing.

00:09:05.980 --> 00:09:10.410
And essentially, what we've seen in these
kinds of very tight loop code,

00:09:10.660 --> 00:09:13.340
we're seeing anywhere between
a 10% to 20% improvement,

00:09:13.540 --> 00:09:16.080
because essentially,
it's able to execute many of these

00:09:16.080 --> 00:09:20.330
instructions as a vector operation,
being able to perform the

00:09:20.330 --> 00:09:22.240
operations in parallel.

00:09:22.240 --> 00:09:26.280
Here too, again,
we'll be adding in more vectorization

00:09:26.280 --> 00:09:32.530
types as we move--as we develop the
application--Xcode in GCC4 further along.

00:09:33.760 --> 00:09:35.080
Next major feature to talk about,
of course,

00:09:35.110 --> 00:09:37.940
is the transition from 1.4 to 5.0.

00:09:37.960 --> 00:09:43.550
This technology adds in generics
and other features as part of it.

00:09:43.790 --> 00:09:49.640
Another part of Tiger is we've
upgraded Shark from 3.8 to 4.1.

00:09:49.790 --> 00:09:53.690
4.1 includes incredibly
good data mining facilities.

00:09:53.800 --> 00:09:56.820
What that means is that now
you can actually drill deep.

00:09:56.910 --> 00:10:00.290
You can actually have
a performance graph,

00:10:00.500 --> 00:10:05.900
have this massive data,
and isolate a segment of the graph

00:10:06.170 --> 00:10:09.980
and drill in to see what the stack
traces are so that more and more

00:10:09.980 --> 00:10:12.100
of the information is exposed.

00:10:12.150 --> 00:10:15.230
I think you'll find that the data
mining really improves the coping with

00:10:15.230 --> 00:10:19.140
the complexity of a large application.

00:10:20.200 --> 00:10:23.510
We, of course,
upgraded WebObjects for Tiger.

00:10:23.510 --> 00:10:26.330
And we introduced a major new
feature inspired by WebObjects

00:10:26.410 --> 00:10:27.690
called Xcode Design Tools.

00:10:27.840 --> 00:10:31.330
Essentially what this is,
is bringing in the entity relationship

00:10:31.330 --> 00:10:35.490
class modeling so that now any C++,
Java, Objective-C,

00:10:35.490 --> 00:10:42.140
Objective-C++ object model can be created
and manipulated by the class model.

00:10:42.510 --> 00:10:49.810
This is also a very important technology
because this is the gateway technology

00:10:49.810 --> 00:10:54.140
to--gateway technology to core data,
which is, of course, laid on top of both

00:10:54.220 --> 00:10:56.610
SQLite and XML data files.

00:10:57.050 --> 00:11:00.440
The interesting thing here
about the design tools is now

00:11:00.440 --> 00:11:04.440
you can actually--this provides
a fabulous interface to complex

00:11:04.500 --> 00:11:07.130
structures within your application.

00:11:09.950 --> 00:11:13.260
Another gateway technology
and tool is Quartz Composer.

00:11:13.310 --> 00:11:18.690
You saw that Quartz Composer essentially
is a way to manipulate image units.

00:11:18.880 --> 00:11:21.580
Image units are the basic
building block for filters.

00:11:21.810 --> 00:11:26.190
Much of the beautiful look we get out
of Mac OS X applications is because

00:11:26.310 --> 00:11:28.900
we have this great engine underneath.

00:11:28.940 --> 00:11:33.430
To be able to--Quartz Composer
gives you the ability to prototype

00:11:33.430 --> 00:11:37.900
and pull these different filters
together and get some idea of what

00:11:37.900 --> 00:11:40.900
kind of visual effect they have.

00:11:41.000 --> 00:11:44.660
They can then be--you then take
the data file which describes

00:11:44.700 --> 00:11:48.680
the filter layering and can then
embed it with your application to

00:11:48.800 --> 00:11:51.050
directly drive the image units.

00:11:52.650 --> 00:11:56.940
We also introduced in Tiger,
in Xcode 2.0, the ADC Reference Library.

00:11:57.160 --> 00:12:00.600
What this does is it downloads a copy
of the Reference Library off the web

00:12:00.810 --> 00:12:02.880
and keeps on monitoring for any updates.

00:12:03.040 --> 00:12:07.400
So you are always assured of
having the freshest and most latest

00:12:07.470 --> 00:12:10.040
documentation for your system.

00:12:10.080 --> 00:12:13.660
This, I think,
improves the whole usability

00:12:13.960 --> 00:12:19.990
and quality of the documentation
interacting experience as well.

00:12:22.250 --> 00:12:27.040
Of course, what you really are dying to
hear about is Intel and how it

00:12:27.040 --> 00:12:28.800
is that we're going to support.

00:12:28.880 --> 00:12:34.820
So it's time to broaden our
horizons above just our home world.

00:12:34.870 --> 00:12:36.790
Let's go on a little trip.

00:12:41.540 --> 00:12:44.200
Welcome to the universe.

00:12:44.300 --> 00:12:47.400
And the universe consists
of many processors.

00:12:47.490 --> 00:12:50.000
PowerPC and Intel, of course,
are the ones we're focused on today.

00:12:50.190 --> 00:12:56.840
And really, shipping an application that
supports both is--you know,

00:12:56.840 --> 00:12:59.390
we have not underestimated that
there is some challenge to this.

00:12:59.410 --> 00:13:04.400
We've really designed the tools in Xcode
to really support both environments.

00:13:04.490 --> 00:13:06.870
And with Xcode 2.1,
we're introducing this idea

00:13:06.880 --> 00:13:09.390
of a universal interactive
development environment,

00:13:09.390 --> 00:13:12.180
one that, of course,
that can target and make it very easy

00:13:12.220 --> 00:13:16.400
to develop code for multiple--multiple
processors simultaneously.

00:13:16.480 --> 00:13:19.730
And we think this is an extremely
important and helpful to you.

00:13:20.130 --> 00:13:27.170
In doing so, we've talked to you,
heard your feedback,

00:13:27.570 --> 00:13:29.760
learned what you like about
other programming environments,

00:13:29.820 --> 00:13:32.350
and what we've tried to do is
take the best from Eclipse,

00:13:32.510 --> 00:13:36.400
from Code Warrior, from Visual Studio,
and bring them into Xcode.

00:13:36.470 --> 00:13:41.200
So as part of Xcode 2.1, for example,
we've improved the compile chain.

00:13:41.230 --> 00:13:45.700
We've improved the way the build system
and project file management works.

00:13:45.760 --> 00:13:49.900
We've improved the way the debugging
and profiling infrastructure works.

00:13:49.950 --> 00:13:51.860
And we've improved other tools.

00:13:51.950 --> 00:13:55.730
So really,
there's improvements in every aspect

00:13:55.730 --> 00:14:00.420
of the system to really make Xcode
so much more an enabler for your

00:14:00.420 --> 00:14:02.220
environment and for your system.

00:14:02.340 --> 00:14:05.950
And I think that you're
going to like these changes.

00:14:07.010 --> 00:14:08.630
So first, of course, is universal.

00:14:08.940 --> 00:14:11.750
We use this word to mean
a variety of things,

00:14:11.760 --> 00:14:15.130
both at the binary level and
at the application level,

00:14:15.280 --> 00:14:20.910
to enable your application for
the different CPU architectures.

00:14:21.280 --> 00:14:23.000
So first, of course, is universal.

00:14:23.220 --> 00:14:26.050
We use this word to mean
a variety of things,

00:14:26.090 --> 00:14:29.440
both at the binary level and
at the application level,

00:14:29.440 --> 00:14:35.220
to enable your application for
the different CPU architectures.

00:14:48.600 --> 00:14:52.340
You'll find that in fact that we have
taken this approach of different kinds

00:14:52.340 --> 00:14:56.860
of components and resources that you
manage and extend your application with,

00:14:56.880 --> 00:15:00.840
and really to be able to make it so that
it's both easily internationalized to

00:15:00.840 --> 00:15:03.300
make it--to make itself very successful.

00:15:03.530 --> 00:15:10.510
Being able to generate, of course,
to multiple application

00:15:10.510 --> 00:15:10.510
processors is the--is key.

00:15:11.600 --> 00:15:16.610
As part of making it a universal IDE,
we have this idea of that you can do,

00:15:16.970 --> 00:15:20.000
of course,
host the target on the same machine,

00:15:20.120 --> 00:15:22.820
but of course,
being able to do cross-development

00:15:23.090 --> 00:15:25.060
is extremely important.

00:15:25.140 --> 00:15:29.670
And you can work on
either environment today.

00:15:30.090 --> 00:15:33.430
So, for example, here at the conference,
you'll be living on perhaps

00:15:33.440 --> 00:15:35.840
your PowerPC laptops,
but you will be trying out

00:15:35.840 --> 00:15:40.900
your application code on the
Intel systems in the labs.

00:15:41.000 --> 00:15:43.430
To enable this,
the technology under the hood is

00:15:43.530 --> 00:15:45.400
this idea of a universal binary.

00:15:45.500 --> 00:15:48.500
Universal binary puts
in one executable file,

00:15:48.500 --> 00:15:51.860
one A.out, essentially,
multiple segments.

00:15:52.110 --> 00:15:55.590
Each segment can have the Intel,
the PowerPC,

00:15:55.590 --> 00:15:58.980
the PowerPC 64 code for each section.

00:15:59.290 --> 00:16:02.620
And essentially what each section
contains within it-- the load

00:16:02.680 --> 00:16:07.140
commands and the text and data
sections-- that that processor needs.

00:16:07.170 --> 00:16:09.160
Now this, of course,
as you saw in Scott's talk,

00:16:09.220 --> 00:16:14.660
really simplifies how end users think
about what an executable looks like.

00:16:14.770 --> 00:16:17.210
And also I think you'll find
that it simplifies your job,

00:16:17.250 --> 00:16:19.770
that you don't have to do
this juggling back and forth.

00:16:19.990 --> 00:16:22.680
You can actually extract
out the individual sections.

00:16:22.790 --> 00:16:26.580
But the entire experience of you as
a developer really is focused around

00:16:26.790 --> 00:16:30.200
trying to do this and maintain a
single file that is the universal

00:16:30.200 --> 00:16:33.110
binary for all the different sections.

00:16:33.430 --> 00:16:36.400
As we said,
this is just one click makes it easy.

00:16:36.400 --> 00:16:39.400
We put this handy little checkbox in.

00:16:39.400 --> 00:16:41.960
And this is also, of course,
the place where you can enter by hand

00:16:42.280 --> 00:16:45.560
other architectures as they come along,
including support for

00:16:45.630 --> 00:16:47.650
things like PowerPC 64.

00:16:49.700 --> 00:16:52.640
Now, in saying that GCC 4.0 is
the universal compiler,

00:16:52.640 --> 00:16:54.330
Bertrand didn't overstate it.

00:16:54.500 --> 00:16:59.280
This compiler has been ported around
to well over 100 architectures.

00:16:59.280 --> 00:17:02.430
And what we've done is we've
updated it with the latest version

00:17:02.710 --> 00:17:04.640
from the Free Software Foundation.

00:17:04.690 --> 00:17:06.720
What's really nifty about
this compiler is that,

00:17:06.720 --> 00:17:09.150
of course,
it's widely used in the Linux community

00:17:09.300 --> 00:17:14.240
and other communities out there as well,
such as Solaris.

00:17:14.340 --> 00:17:19.350
So this compiler has already seen
billions and billions of lines of code

00:17:19.350 --> 00:17:22.020
before we're delivering it to you.

00:17:22.260 --> 00:17:25.150
It has already been--gone
through tremendous shakeout.

00:17:25.150 --> 00:17:28.730
So you're not dealing with something
that is going to be very buggy.

00:17:28.730 --> 00:17:31.550
In fact,
it's--we've had extremely good results.

00:17:31.700 --> 00:17:34.550
There are many tuning options to
support the Intel architecture.

00:17:34.550 --> 00:17:38.720
And, of course, we've added in auto
vectorization support for SSE.

00:17:38.720 --> 00:17:45.000
You can also write intrinsics to get
at the SSE MMX instructions natively.

00:17:47.820 --> 00:17:52.420
Now, one of the features that people have
commented to us that they've seen

00:17:52.420 --> 00:17:55.640
in other programming environments is
to actually control the optimization

00:17:55.640 --> 00:17:57.660
level on a per-function basis.

00:17:57.770 --> 00:18:00.300
You may want to make different
size space trade-offs.

00:18:00.300 --> 00:18:02.340
So, for example,
so what we've done is we now

00:18:02.340 --> 00:18:06.360
allow you to set the optimization
level inside the code on a

00:18:06.480 --> 00:18:09.320
per-function basis using a pragma.

00:18:09.450 --> 00:18:12.030
Doing a reset essentially
pops off the stack what the

00:18:12.090 --> 00:18:13.810
last optimization level was.

00:18:13.920 --> 00:18:17.050
So you can embed these
optimization levels to really

00:18:17.050 --> 00:18:19.040
give fine-grained control.

00:18:19.040 --> 00:18:20.680
Simon talked a little
bit about bit fields.

00:18:20.830 --> 00:18:24.530
We provided an additional mechanism,
which essentially is--allows you

00:18:24.530 --> 00:18:28.740
to reverse the order of the bit
fields so that if your bit fields

00:18:28.740 --> 00:18:32.320
are--if you have data stored in a
data file in one bit field order,

00:18:32.410 --> 00:18:34.210
but you, in fact,
are in the opposite architecture,

00:18:34.320 --> 00:18:37.930
you can then surround this with
if-defs to control that you're

00:18:37.970 --> 00:18:39.790
on the correct architecture.

00:18:40.740 --> 00:18:46.420
So these kinds of features really,
I think, help with making the system more

00:18:46.420 --> 00:18:49.520
conducive to being universal.

00:18:51.530 --> 00:18:53.610
Shared precompiled headers is
another great feature we've seen

00:18:53.610 --> 00:18:54.960
in other programming environments.

00:18:54.960 --> 00:18:57.970
And essentially what it does is
it allows you to take the PCH,

00:18:57.970 --> 00:19:00.840
the precompiled header file,
and share it across multiple dial-ups,

00:19:00.840 --> 00:19:05.620
multiple targets or
plug-ins in your project.

00:19:05.620 --> 00:19:09.760
This gives you the ability to
have direct control over the

00:19:09.760 --> 00:19:15.810
state of creating the PCH,
and it accelerates the compile time.

00:19:17.490 --> 00:19:19.540
Simon went over this pretty well.

00:19:19.730 --> 00:19:23.020
I'll just simply reinforce Intel,
of course, is a little Indian.

00:19:23.130 --> 00:19:30.410
It supports SSE vector processors
and vector instructions and has a

00:19:30.410 --> 00:19:33.780
divide by zeros handled differently.

00:19:35.060 --> 00:19:37.470
For the heat seekers,
because you're going

00:19:37.470 --> 00:19:41.660
to go after each one,
accelerate is the preferred way to do it.

00:19:41.710 --> 00:19:44.720
Because as we upgrade,
as new architectures come along,

00:19:44.820 --> 00:19:50.480
we will always be tuning for
the machine architecture.

00:19:50.610 --> 00:19:53.130
So it's best--of course,
we always know what's

00:19:53.260 --> 00:19:55.090
coming down the pipe.

00:19:55.130 --> 00:20:00.010
We put in the work to do the
most complicated and important

00:20:00.110 --> 00:20:02.900
algorithmic tuning that's
necessary for vector operations,

00:20:02.900 --> 00:20:04.840
math, graphics, DSP routines.

00:20:04.900 --> 00:20:07.620
And then we'll go into the process
of creating the most complex and

00:20:07.620 --> 00:20:09.300
complex model that the CPU requires.

00:20:09.300 --> 00:20:11.170
The auto vectorization routine is a help.

00:20:11.170 --> 00:20:14.700
And then as sort of a last resort,
handwrite the SSE intrinsics yourself.

00:20:17.000 --> 00:21:46.600
[Transcript missing]

00:21:47.030 --> 00:21:48.850
You need to install the SDK.

00:21:48.970 --> 00:21:50.350
In the past,
you probably have ignored it.

00:21:50.360 --> 00:21:51.600
You just noticed cross development.

00:21:51.620 --> 00:21:53.660
Didn't even bother with
the turn down triangle.

00:21:53.670 --> 00:21:59.870
But now we recommend that you open
it up and do click on--certainly

00:21:59.970 --> 00:22:02.680
for this week on your laptops.

00:22:03.000 --> 00:22:05.140
Please install the Universal SDK.

00:22:05.140 --> 00:22:10.510
You will need it for most of the
hands-on sessions that are going

00:22:10.510 --> 00:22:10.510
to be happening at the conference.

00:22:12.790 --> 00:22:15.650
Another important feature
is our build configurations.

00:22:15.910 --> 00:22:19.460
Now, build configurations
replace build styles.

00:22:19.460 --> 00:22:22.000
Gives you a much more
intuitive user interface.

00:22:22.070 --> 00:22:23.930
No more strike through text.

00:22:24.050 --> 00:22:26.990
The big idea behind build
configurations is essentially now

00:22:26.990 --> 00:22:32.050
you can manage and take parameters
and store them separately.

00:22:32.160 --> 00:22:35.790
Each configuration essentially
builds to a separate folder.

00:22:36.170 --> 00:22:41.110
In the past, in Xcode 2.0 and before,

00:22:41.300 --> 00:22:45.310
When we had build styles,
which essentially was a big switch.

00:22:45.320 --> 00:22:49.880
We were either in sort of debug
and development build style,

00:22:49.960 --> 00:22:51.730
or release build style.

00:22:51.760 --> 00:22:55.530
And you threw a big switch and that meant
you had to throw away all the binaries,

00:22:55.530 --> 00:22:58.000
do a build clean, and then rebuild.

00:22:58.070 --> 00:23:01.430
If you wanted to switch back,
you threw it away again.

00:23:01.560 --> 00:23:05.040
Of course,
if you were trying to both debug and

00:23:05.040 --> 00:23:09.000
use both configurations simultaneously,
it wasn't easily supported.

00:23:09.100 --> 00:23:13.010
Now with configurations, each project,
each configuration builds

00:23:13.010 --> 00:23:14.290
into a separate directory.

00:23:14.370 --> 00:23:17.480
And this means that you can
actually change and manage the

00:23:17.480 --> 00:23:21.020
parameters per build independently.

00:23:21.020 --> 00:23:24.140
You can actually even store
the settings in a file.

00:23:24.190 --> 00:23:28.580
I'd like to invite
Chris Espinosa up to give a demo.

00:23:28.580 --> 00:23:30.340
Chris?

00:23:30.340 --> 00:23:34.330
Thanks, Ted.

00:23:37.200 --> 00:25:07.000
[Transcript missing]

00:25:07.500 --> 00:25:11.690
Some of the settings would actually
be crossed out in the user interface,

00:25:11.780 --> 00:25:14.920
and there'd be no tooltip or explanation
as to why it would be crossed out.

00:25:15.000 --> 00:25:17.550
The biggest offender, of course,
would be Zero Link.

00:25:17.600 --> 00:25:20.180
How many people have seen
Zero Link crossed out in their target

00:25:20.180 --> 00:25:22.300
inspector and wondered what that meant?

00:25:22.480 --> 00:25:23.580
Most of you, that's right.

00:25:23.670 --> 00:25:26.250
Well,
what that meant was that that setting

00:25:26.260 --> 00:25:30.430
was set in the build style for debug,
and that that overrode what you're

00:25:30.430 --> 00:25:33.000
seeing in your target inspector,
which was functional,

00:25:33.070 --> 00:25:34.400
but it was confusing.

00:25:34.400 --> 00:25:35.340
It wasn't Mac.

00:25:35.450 --> 00:25:37.500
It wasn't what you see is what you get.

00:25:37.580 --> 00:25:42.380
So what we've done in Xcode 2.1 is
that we've replaced build styles with

00:25:42.400 --> 00:25:47.170
a concept called build configurations,
which is that the groups of settings

00:25:47.250 --> 00:25:51.700
for each kind of deliverable
are right there in your target.

00:25:51.700 --> 00:25:56.800
And we've actually changed the name
to be debug and release by default.

00:25:56.820 --> 00:25:59.040
We hope you can keep that clear.

00:26:01.800 --> 00:26:05.290
So when I look at my target inspector,
what I get is a pop-up

00:26:05.290 --> 00:26:09.660
menu for configuration,
and it has debug and release.

00:26:09.860 --> 00:26:13.860
And if I look at the debug settings,
zero link is checked.

00:26:13.900 --> 00:26:17.380
And if I go to the release setting,
zero link is not checked.

00:26:17.510 --> 00:26:21.280
So I get what you see is what you
get right there in the inspector.

00:26:22.200 --> 00:28:04.000
[Transcript missing]

00:28:13.700 --> 00:28:22.100
And I get a new file that's just a
text file with a certain suffix on it.

00:28:22.120 --> 00:28:27.400
Now what I'm going to do is I'm going
to go back to my release configuration,

00:28:27.530 --> 00:28:29.810
select those settings
that I had in release.

00:28:30.050 --> 00:28:32.570
I'm going to cut them
out of the inspector.

00:28:33.130 --> 00:28:37.090
and I'm going to paste
them into the text file.

00:28:37.120 --> 00:28:38.100
We save.

00:28:38.100 --> 00:28:39.750
And there are my settings.

00:28:40.980 --> 00:28:44.380
So now I'll go back to the inspector
and now I have a pop-up menu for

00:28:44.380 --> 00:28:46.900
what this configuration is based on.

00:28:46.900 --> 00:28:50.940
And I'm going to pick that file I just
created and saved external release.

00:28:50.940 --> 00:28:51.790
And there go my flags back.

00:28:51.900 --> 00:28:54.720
Now of course,
the whole point of this was I wanted

00:28:54.720 --> 00:28:56.900
test to share settings with release.

00:28:56.900 --> 00:29:00.860
So I go to test,
set it based on the same file,

00:29:00.910 --> 00:29:02.890
and it gets the same settings.

00:29:02.900 --> 00:29:08.900
So now when I go and change one of these
settings in the text file and save it,

00:29:08.900 --> 00:29:12.900
watch the checkbox on don't
dead strip in its terms.

00:29:12.900 --> 00:29:13.840
It turns off.

00:29:13.980 --> 00:29:17.830
I can take that text file,
commit it to my CVS repository,

00:29:17.930 --> 00:29:20.900
check it out, modify it,
share it among multiple targets,

00:29:21.080 --> 00:29:23.010
share it among multiple
projects and subprojects,

00:29:23.010 --> 00:29:26.250
so I can have one standard
set of settings that all of my

00:29:26.340 --> 00:29:27.900
configurations inherit from.

00:29:28.060 --> 00:29:29.880
Now, this is a pretty big change.

00:29:29.900 --> 00:29:32.830
This is the most important
change we've made in the

00:29:32.900 --> 00:29:33.900
Xcode build system in a while.

00:29:33.900 --> 00:29:36.900
Why did we put it in a dot release?

00:29:36.900 --> 00:29:37.860
The reason is that this is
really going to help you manage

00:29:37.860 --> 00:29:41.900
creating universal binaries.

00:29:42.110 --> 00:29:44.710
Because one of the things
you're really going to want to

00:29:44.710 --> 00:29:48.730
do is in your configurations,

00:29:49.270 --> 00:29:52.770
You want to pick your architecture,
and instead of building your

00:29:52.770 --> 00:29:56.200
release configurations for
the native architecture,

00:29:56.230 --> 00:30:00.000
you're going to want to build them
universal for PowerPC and Intel.

00:30:00.120 --> 00:30:08.200
And when you get that,
you're going to want to put them

00:30:08.200 --> 00:30:08.200
into your configuration file,
and then

00:30:08.700 --> 00:30:12.500
All of your release configurations
will be built universal.

00:30:12.730 --> 00:30:16.480
We think this is really going to help
you manage your universal binaries.

00:30:16.700 --> 00:30:19.670
Thanks very much, Ted.

00:30:23.300 --> 00:30:30.970
Why don't you work on that example
some while I talk a little bit.

00:30:31.800 --> 00:30:35.260
We've enhanced the project file format
in addition to the configurations.

00:30:35.260 --> 00:30:38.450
And of course, many people work in teams.

00:30:38.740 --> 00:30:40.060
Imagine that.

00:30:40.090 --> 00:30:41.880
We've made it so that
it's much more readable,

00:30:41.940 --> 00:30:43.460
it's diffable, and it's mergeable.

00:30:43.460 --> 00:30:50.060
You can actually make changes to the
project file and merge it together.

00:30:52.100 --> 00:30:54.770
It's also much more stable.

00:30:54.860 --> 00:30:59.000
But these two features come at some cost.

00:30:59.090 --> 00:31:01.560
So the new file format
has a new file extension,

00:31:01.560 --> 00:31:03.160
.xcodeproj.

00:31:03.210 --> 00:31:05.840
And this means that there's
a one-step migration from

00:31:05.840 --> 00:31:08.700
Xcode 2.0 to Xcode 2.1 format.

00:31:08.890 --> 00:31:11.920
This new format-- this migration
is an unfortunate consequence,

00:31:11.990 --> 00:31:15.230
but it means now that we
can actually have both merge

00:31:15.230 --> 00:31:20.450
capability and configurations
managed in this new structure.

00:31:23.100 --> 00:31:27.620
Moving on, yes, unit testing.

00:31:27.710 --> 00:31:29.750
It's not enough, of course,
to write the code.

00:31:29.770 --> 00:31:31.150
You've got to debug it.

00:31:31.270 --> 00:31:35.560
And you want to be able to make changes
to your code with confidence that you

00:31:35.560 --> 00:31:37.930
haven't broken any of the invariants.

00:31:38.030 --> 00:31:45.000
Unit testing is one of the
reasons why we ship Tiger on time.

00:31:45.110 --> 00:31:51.000
Sometimes we wonder if Redmond
has seen the book on this.

00:31:51.000 --> 00:31:55.730
It lowers the course because you're
actually able then to incorporate

00:31:55.850 --> 00:32:00.820
much of the model creation and
change as part of the build process.

00:32:00.820 --> 00:32:06.240
And we've adopted industry standards,
of course, of C unit and OC unit,

00:32:06.240 --> 00:32:08.950
J unit and such, into the project.

00:32:09.590 --> 00:32:12.410
The methodology that we're
espousing here is a test-first,

00:32:12.620 --> 00:32:14.570
test-as-you-develop approach.

00:32:14.570 --> 00:32:17.690
And it means that every time
you make changes to your code,

00:32:17.740 --> 00:32:21.870
just as a natural part
of building the project,

00:32:21.980 --> 00:32:25.110
you're able to have the test run.

00:32:26.670 --> 00:32:30.580
One of the great things here is that
you need to evolve the test case as

00:32:30.650 --> 00:32:34.280
you are evolving the code base itself.

00:32:34.300 --> 00:32:37.380
And so in doing so,
you'll have greater confidence

00:32:37.460 --> 00:32:42.120
that the changes are incorporated.

00:32:42.200 --> 00:32:44.780
We've included templates,
we've included the tools,

00:32:44.840 --> 00:32:49.130
and errors and warnings are reported
in the build window and in the smart

00:32:49.220 --> 00:32:51.390
groups just the way compiler errors are.

00:32:51.520 --> 00:32:55.390
So there's a very good chance
that programmers will notice this.

00:32:56.600 --> 00:34:22.500
[Transcript missing]

00:34:23.000 --> 00:36:37.300
[Transcript missing]

00:36:37.890 --> 00:36:42.290
I could add a condition
here in the condition box,

00:36:42.290 --> 00:36:43.980
and I can make it
continue or not continue.

00:36:43.980 --> 00:36:47.280
For now, I'm going to make it stop
when it hits that breakpoint.

00:36:47.360 --> 00:36:50.510
I can also add multiple actions,
and all of the actions will

00:36:50.510 --> 00:36:54.110
happen in the sequence that they
appear in the breakpoints window.

00:36:54.250 --> 00:36:56.670
So now that that's done,

00:36:56.800 --> 00:37:02.840
I can close that window and
I can debug the application.

00:37:03.270 --> 00:37:04.320
And it'll load up.

00:37:04.420 --> 00:37:05.820
Figuring out the answer.

00:37:05.820 --> 00:37:08.200
And I've hit my first breakpoint,
and I'm sitting there.

00:37:08.270 --> 00:37:09.630
Now, that's great.

00:37:09.740 --> 00:37:13.190
I can use speakable breakpoints
for long algorithms or things

00:37:13.220 --> 00:37:16.720
that are hit very infrequently,
or especially for points where

00:37:16.720 --> 00:37:20.240
I really don't want to stop,
but I just want to continue.

00:37:20.360 --> 00:37:22.430
But in this case,
that was just making sure

00:37:22.440 --> 00:37:23.440
that I got into main.

00:37:23.440 --> 00:37:26.490
What I really want to do is
I want to watch that program

00:37:26.570 --> 00:37:28.530
flow of my init methods.

00:37:28.660 --> 00:37:32.390
So I've set some other breakpoints
in my breakpoint window.

00:37:32.510 --> 00:37:35.870
And notice all of these init
line 8s in all of the classes.

00:37:35.960 --> 00:37:40.710
Those are visualization breakpoints
on the init method of every class.

00:37:40.860 --> 00:37:44.900
So if I continue from here,
I'm going to hit the first one.

00:37:45.010 --> 00:37:50.080
And what it's done is it's built a
dynamic class diagram of the class I'm

00:37:50.080 --> 00:37:53.920
in and its superclass in relation to
all the other classes in the diagram,

00:37:54.010 --> 00:37:56.100
and highlighted the method
that I happen to be in,

00:37:56.100 --> 00:37:57.970
which is the init method.

00:37:58.170 --> 00:38:01.880
I'm going to make this a little smaller,
because I'm going to be doing--

00:38:04.950 --> 00:38:07.190
I'm going to be
generating a lot of these,

00:38:07.190 --> 00:38:12.700
and I'm just going to change
this breakpoint to a--

00:38:13.370 --> 00:38:15.810
visualizing auto continue
after one second.

00:38:15.810 --> 00:38:18.690
That is really the only
interface that you need to it.

00:38:18.690 --> 00:38:20.980
You can customize it,
but just control click

00:38:21.100 --> 00:38:24.320
on your breakpoint,
pick the visualization and continue.

00:38:24.320 --> 00:38:25.720
And that's the way you do it.

00:38:26.000 --> 00:38:26.940
It's really cool.

00:38:26.940 --> 00:38:29.600
So now when I continue,
I'm going to hit all of those

00:38:29.600 --> 00:38:31.610
other visualization breakpoints.

00:38:31.610 --> 00:38:34.070
And as it hits every init
method in every class,

00:38:34.100 --> 00:38:37.100
it dynamically adds that
class to the diagram.

00:38:44.930 --> 00:38:49.800
And you can watch the bars move
down the initialization chain as all

00:38:49.800 --> 00:38:51.820
of the supers are getting called.

00:38:51.860 --> 00:38:54.740
Now, of course, when it gets to the end,
I put another breakpoint because

00:38:54.740 --> 00:38:58.390
I'm calculating the answer
while I'm doing all of this.

00:38:58.550 --> 00:39:01.060
And we're going to hope
this has actually worked.

00:39:01.300 --> 00:39:05.020
It didn't take 240
million years last time,

00:39:05.190 --> 00:39:07.090
but it was actually pretty quick.

00:39:07.210 --> 00:39:10.140
When I get to the last
class that's added,

00:39:10.300 --> 00:39:15.480
it's going to give me the final answer
to the ultimate-- The answer is 42.

00:39:15.530 --> 00:39:16.410
And that's correct.

00:39:16.540 --> 00:39:17.420
There we go.

00:39:17.480 --> 00:39:18.600
Thank you, Ted.

00:39:18.600 --> 00:39:22.590
Thank you, Chris.

00:39:26.140 --> 00:39:30.360
So that's Actions and
Visualization demo feature.

00:39:30.420 --> 00:39:33.200
Events are triggered to
perform many important things.

00:39:33.200 --> 00:39:36.960
You can use this to modify
the behavior of your program.

00:39:36.960 --> 00:39:43.010
You can change and capture the state,
run external commands, shell scripts,

00:39:43.080 --> 00:39:45.440
Apple scripts, and of course,
visualization.

00:39:45.520 --> 00:39:49.260
The visualization feature, I believe,
really is the first of a whole new

00:39:49.320 --> 00:39:53.020
class of great debugger features that
we're planning on to allow you to

00:39:53.020 --> 00:39:55.980
understand the large scale behavior
of the way your program works.

00:39:56.000 --> 00:40:00.620
And of course, the answer is 42.

00:40:01.840 --> 00:40:07.780
Speaking of 4.2, in CHUD,
we have a new developer preview.

00:40:07.780 --> 00:40:10.690
It's not on your DVDs,
but it will be available for

00:40:10.730 --> 00:40:12.120
download later this week.

00:40:12.120 --> 00:40:14.620
And it, of course,
supports Intel-based Macs,

00:40:14.870 --> 00:40:20.720
includes Monster, a new feature that is
directly integrated into CHUD,

00:40:20.720 --> 00:40:23.880
and includes all the wonderful
features you've had for PowerPC,

00:40:23.880 --> 00:40:28.430
such as time profiles,
disassembly for architecture,

00:40:28.460 --> 00:40:33.240
the ability to have Intel-specific
optimization tips and be able to

00:40:33.280 --> 00:40:38.240
visualize all the system traits that
are unique to the Intel processor.

00:40:38.240 --> 00:40:42.700
Java native code is also
supported in this release.

00:40:45.820 --> 00:40:49.630
And of course, thanks for all the fish.

00:40:49.750 --> 00:40:52.250
Speaking of Java and 42-- boy,
that number just keeps

00:40:52.260 --> 00:40:54.740
on coming back there,
doesn't it?

00:40:54.800 --> 00:40:57.390
Java 1.4.2 is on the system.

00:40:57.480 --> 00:40:59.990
And Java 5.0 preview is online,
I believe.

00:41:00.000 --> 00:41:01.100
Is that correct?

00:41:01.130 --> 00:41:02.280
Yes, it is available for download.

00:41:02.390 --> 00:41:06.050
So no waiting for Java 5.0.

00:41:06.110 --> 00:41:08.820
The preview is available
and includes auto boxing,

00:41:08.850 --> 00:41:09.420
generics.

00:41:09.530 --> 00:41:14.620
And one of the first for
Apple computer is we are releasing

00:41:14.670 --> 00:41:22.260
both the C1 interactive client
compiler and the C2 server compiler.

00:41:22.320 --> 00:41:24.460
If you're not into Java,
this isn't meaningful to you.

00:41:24.510 --> 00:41:27.240
But if you are, C2, of course,
is a much more high

00:41:27.310 --> 00:41:30.950
performance version of Java,
great for long-running server-based

00:41:31.010 --> 00:41:34.840
applications and scientific computing,
great optimization technologies.

00:41:35.010 --> 00:41:38.150
In Xcode, we have enhancements that
support breakpoint actions

00:41:38.150 --> 00:41:39.700
and code visualization.

00:41:39.740 --> 00:41:41.960
Actually, we have that as well
for AppleScript as well,

00:41:41.980 --> 00:41:43.180
supporting breakpoint actions.

00:41:43.260 --> 00:41:44.620
So no second class.

00:41:44.620 --> 00:41:46.400
languages here.

00:41:47.230 --> 00:41:49.920
WebObjects is now being bundled.

00:41:50.040 --> 00:41:53.560
The tools are now included in Xcode 2.1.

00:41:54.800 --> 00:41:58.330
and there's a development
license with every copy.

00:41:58.530 --> 00:42:02.440
We have a new emphasis on Mac OS X,
really trying to make it extremely fresh.

00:42:02.540 --> 00:42:06.200
One of the things that you'll see in this
release is EOF modeling support is now

00:42:06.200 --> 00:42:10.090
integrated into the Xcode design tools.

00:42:14.830 --> 00:42:18.400
and there's a development
license with every copy.

00:42:18.400 --> 00:42:22.410
We have a new emphasis on Mac OS X,
really trying to make it extremely fresh.

00:42:22.530 --> 00:42:26.150
One of the things that you'll see in this
release is EOF modeling support is now

00:42:26.190 --> 00:42:30.100
integrated into the Xcode design tools.

00:42:44.800 --> 00:42:46.340
Thank you, Ted.

00:42:50.650 --> 00:42:52.510
Good to see you.

00:42:52.690 --> 00:42:55.360
Yeah, at Intel,
we've been working on compilers

00:42:55.360 --> 00:42:58.240
for a number of years,
and I'm really excited to be

00:42:58.240 --> 00:43:02.830
able to know that Mac OS X is
finally going to be on Intel.

00:43:02.960 --> 00:43:05.310
So this is really an
exciting time for us.

00:43:05.450 --> 00:43:09.260
We're going to take our
C++ and Fortran compilers,

00:43:09.550 --> 00:43:14.290
and we're going to take those
products and put them on Mac OS X,

00:43:14.380 --> 00:43:18.690
on Intel, and we're going to have
that as soon as we can.

00:43:18.690 --> 00:43:18.690
How's that going?

00:43:18.750 --> 00:43:20.180
It's going pretty well.

00:43:20.310 --> 00:43:22.250
So far we have Hello World working.

00:43:22.350 --> 00:43:23.290
Excellent.

00:43:23.380 --> 00:43:24.270
First step.

00:43:24.420 --> 00:43:31.600
As you know, Hello World is sort of an
early milestone to see if the

00:43:31.600 --> 00:43:34.600
compiler is living and breathing.

00:43:34.600 --> 00:43:37.920
And as we were porting it across,
we started setting up this

00:43:37.920 --> 00:43:41.710
cross-development environment
where we'd be hosted on some other

00:43:41.850 --> 00:43:43.970
operating system and cross-target.

00:43:44.030 --> 00:43:46.440
And then we said, "Oh, what the heck.

00:43:46.480 --> 00:43:50.620
Let's take the code, use Xcode,
and self-host the compiler."

00:43:50.620 --> 00:43:52.470
And it really just,
you know,

00:43:52.470 --> 00:43:54.160
worked just about right out of the box.

00:43:54.270 --> 00:43:55.840
It was very little effort at all.

00:43:55.880 --> 00:44:02.460
There really is an easy way to
port to OS X and Intel using Xcode.

00:44:02.460 --> 00:44:03.460
It's really the way to go.

00:44:03.460 --> 00:44:04.250
I'm sold on it.

00:44:04.400 --> 00:44:05.280
Great.

00:44:05.280 --> 00:44:06.920
A couple other things.

00:44:07.010 --> 00:44:07.910
Okay.

00:44:07.960 --> 00:44:12.890
So, as you know,
Hello World is sort of an early

00:44:12.890 --> 00:44:15.460
milestone as you're--as you're
moving a compiler across.

00:44:15.600 --> 00:44:20.560
So we aren't quite ready to announce,
you know, when the product's available.

00:44:20.590 --> 00:44:24.270
We will be announcing that at Intel's
developer conference in August.

00:44:24.430 --> 00:44:27.930
We'll give you specific product details,
when the beta starts,

00:44:27.940 --> 00:44:31.270
when the product will be ready,
et cetera.

00:44:31.370 --> 00:44:34.850
We've been working on technology,
compiler technology for

00:44:34.930 --> 00:44:37.500
Intel processors for quite a while.

00:44:37.650 --> 00:44:39.440
We really have a
state-of-the-art compiler.

00:44:39.490 --> 00:44:40.560
It's all ready to go.

00:44:40.700 --> 00:44:43.890
And it really maximizes
performance on Intel architecture.

00:44:43.950 --> 00:44:47.880
It will be a little
bit before it's ready.

00:44:47.880 --> 00:44:50.560
In the meantime,
really get started on the port now.

00:44:50.940 --> 00:44:51.640
Use Xcode.

00:44:51.640 --> 00:44:52.850
Get over there.

00:44:53.010 --> 00:44:54.470
It's really easy to use.

00:44:54.470 --> 00:44:55.720
Everything works.

00:44:55.830 --> 00:45:00.290
And then later, the Intel compilers will
just kind of seamlessly slip

00:45:00.330 --> 00:45:03.600
into the build environment,
and you'll be able to use them also.

00:45:03.600 --> 00:45:04.600
Great.

00:45:04.600 --> 00:45:07.690
So we think Intel compilers
will be a great enhancement to

00:45:07.750 --> 00:45:12.710
the tools that Apple's already
providing in the Xcode environment.

00:45:12.880 --> 00:45:13.880
So... Great.

00:45:13.880 --> 00:45:15.420
Happy to have you on board Xcode.

00:45:18.300 --> 00:45:19.300
Thank you.

00:45:19.300 --> 00:45:23.530
This is really good.

00:45:23.560 --> 00:45:26.500
Well, welcome to Mac OS X.

00:45:26.600 --> 00:45:29.900
Just as, I guess,
we're welcome now to the Intel CPU.

00:45:30.030 --> 00:45:35.910
So it really is amazing,
because we are getting one of the great

00:45:35.990 --> 00:45:39.300
compilers in the world on the Mac OS X.

00:45:39.370 --> 00:45:43.740
And we think that it's
important that you have choices.

00:45:43.790 --> 00:45:47.340
Apple, though we believe that we
are the principal provider,

00:45:47.340 --> 00:45:52.260
we have the tools you need to create the
greatest applications in the universe.

00:45:52.440 --> 00:45:55.040
And really, of course,
what this is about is you.

00:45:55.250 --> 00:46:01.430
This is about you creating the
greatest universal applications.

00:46:01.530 --> 00:46:06.870
So I want to actually invite
Matt Formica up and tell us a little

00:46:06.870 --> 00:46:09.950
bit about the rest of the conference.

00:46:10.020 --> 00:46:11.800
Thank you, Ted.

00:46:17.280 --> 00:46:18.840
Thanks.

00:46:18.970 --> 00:46:23.210
So looking out at the audience here,
I actually recognize a lot of you.

00:46:23.210 --> 00:46:25.660
As the developer tools
evangelist for Apple,

00:46:25.720 --> 00:46:29.650
I've toured the country and even
parts of the world over the past year,

00:46:29.820 --> 00:46:34.360
telling you all about Xcode,
as well as getting your feedback.

00:46:34.570 --> 00:46:37.010
You guys are the pros,
and you have high requirements

00:46:37.010 --> 00:46:39.400
from your developer tools,
and you've given us a

00:46:39.400 --> 00:46:41.050
lot of good feedback.

00:46:41.050 --> 00:46:45.980
Features like build configurations,
the updated project file format,

00:46:45.980 --> 00:46:50.650
and per function optimization pragmas
really are there in part because

00:46:50.650 --> 00:46:52.480
of the feedback you've given us.

00:46:54.980 --> 00:46:57.400
So, for those of you who
are already using Xcode,

00:46:57.400 --> 00:47:00.400
you can really just step
in and enjoy Xcode 2.1.

00:47:00.420 --> 00:47:04.700
And I'm so proud of the engineering
team at Apple for the features that

00:47:04.710 --> 00:47:06.930
they've built into this version.

00:47:07.730 --> 00:47:12.440
For those of you not yet using Xcode,
really the time to move to Xcode is now.

00:47:12.520 --> 00:47:16.330
Xcode gives you the power to
keep up with the platform to

00:47:16.340 --> 00:47:18.160
build universal applications.

00:47:18.340 --> 00:47:22.570
It also includes these powerful new
productivity features that we've told

00:47:22.690 --> 00:47:26.990
you about today that allow you to go
even further with your development.

00:47:27.760 --> 00:47:29.600
So how do you get there?

00:47:29.700 --> 00:47:34.030
Well, the Xcode engineering team,
as well as developer relations,

00:47:34.040 --> 00:47:39.690
are really here to help you with this,
both this week and often to the future.

00:47:40.510 --> 00:47:43.950
Here at the conference,
we have a variety of labs where

00:47:43.950 --> 00:47:47.330
we will actually sit down with
you and help you on your code.

00:47:47.420 --> 00:47:49.940
We also have a variety of
informative sessions where we'll

00:47:49.950 --> 00:47:54.030
give you the information you
need and answer your questions.

00:47:54.550 --> 00:48:00.120
You can test your code on the developer
transition systems here at the show.

00:48:00.160 --> 00:48:03.450
Ask us questions,
and we'll try and help you.

00:48:05.250 --> 00:48:07.650
These are a few of the Xcode
support labs that are scheduled

00:48:07.650 --> 00:48:10.470
through the week on Tuesday,
Wednesday, and Thursday.

00:48:10.580 --> 00:48:13.030
I encourage you to stop by.

00:48:13.790 --> 00:48:17.130
In addition, there are some important
sessions you should go see.

00:48:17.250 --> 00:48:20.480
Perhaps the most important
session of the rest of the show

00:48:20.810 --> 00:48:22.770
is tomorrow morning at 9:00 AM.

00:48:22.940 --> 00:48:26.490
It's not in your show guide,
because Xcode 2.1 wasn't announced

00:48:26.730 --> 00:48:29.620
yet when the show guide was
handed to you and printed.

00:48:29.620 --> 00:48:33.820
But 9:00 AM tomorrow morning
is What's New in Xcode 2.1.

00:48:33.940 --> 00:48:36.330
Following that session is Adopting Xcode.

00:48:36.410 --> 00:48:40.420
That's a hands-on session,
especially for those of you new to Xcode.

00:48:40.420 --> 00:48:45.360
You'll want to make sure you've
got your Xcode 2.1 installed

00:48:45.420 --> 00:48:48.520
when you come to that session,
and download the associated sample code

00:48:48.940 --> 00:48:54.780
off of the WWDC website so that you
can follow along with that session.

00:48:55.030 --> 00:48:57.810
The WebObjects overview session
is also tomorrow morning,

00:48:57.810 --> 00:49:01.330
where you can find out more
about the details of how we've

00:49:01.330 --> 00:49:04.390
bundled those into Xcode.

00:49:04.490 --> 00:49:06.470
So that's what we're doing here at WWDC.

00:49:06.550 --> 00:49:09.230
What about beyond WWDC?

00:49:10.700 --> 00:49:12.890
After the conference,
there are a variety of resources

00:49:12.890 --> 00:49:13.950
you can take advantage of.

00:49:14.170 --> 00:49:18.090
The Xcode users' email mailing
list is a great resource.

00:49:18.100 --> 00:49:22.570
It's really a great community of
people that are eager to help answer

00:49:22.620 --> 00:49:25.530
your questions about using Xcode.

00:49:25.560 --> 00:49:28.320
If you get stuck on one particular point,
you can contact

00:49:28.390 --> 00:49:31.790
Developer Technical Support,
where they will bring in engineers

00:49:31.910 --> 00:49:35.840
from Apple's Xcode team to help
you work through any issues as

00:49:35.890 --> 00:49:38.500
you build universal applications.

00:49:39.710 --> 00:49:43.040
If you do happen to find any bugs,
and we think we've nailed most of them,

00:49:43.040 --> 00:49:45.700
you can file those at
bugreporter.apple.com.

00:49:45.760 --> 00:49:50.470
We take your bugs very seriously
and read each and every one.

00:49:51.680 --> 00:49:55.430
So those previous things
are available to you,

00:49:55.430 --> 00:49:58.600
whatever level of member you are
of the Apple developer connection.

00:49:58.760 --> 00:50:00.690
But if you're a selector
premier developer,

00:50:00.700 --> 00:50:01.840
there are even more benefits.

00:50:01.840 --> 00:50:04.440
And as has been talked
about earlier today,

00:50:04.440 --> 00:50:06.310
you can get the developer transition kit.

00:50:06.360 --> 00:50:11.560
You can actually get one of the
systems with Intel inside today,

00:50:11.560 --> 00:50:16.340
or actually within the next few weeks,
and start experiencing the future now.

00:50:16.460 --> 00:50:19.700
You can bring your code over
and actually test and debug

00:50:19.700 --> 00:50:21.600
your code on those systems.

00:50:22.600 --> 00:50:24.560
If you've got feedback
on the Xcode Tools,

00:50:24.590 --> 00:50:29.000
you can reach me at mformica@apple.com
or just flag me down in the halls.

00:50:29.000 --> 00:50:32.990
I'd love to get your input,
both on what you love about Xcode--and

00:50:33.000 --> 00:50:36.060
there's a lot to love there--or
what we could do to tweak things,

00:50:36.060 --> 00:50:37.330
make them even better.

00:50:37.450 --> 00:50:38.730
So thank you all very much.

00:50:38.740 --> 00:50:42.270
Enjoy Xcode 2.1 and enjoy WWDC.