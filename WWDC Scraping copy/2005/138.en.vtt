WEBVTT

00:00:00.220 --> 00:00:01.620
- Hello.

00:00:01.630 --> 00:00:04.120
I guess my mic is on and
I guess we're beginning.

00:00:04.120 --> 00:00:05.310
Okay.

00:00:05.880 --> 00:00:07.510
Thank you for the nice introduction.

00:00:07.520 --> 00:00:09.890
I'm...

00:00:10.740 --> 00:00:11.930
I'm being facetious.

00:00:11.940 --> 00:00:12.940
It's the end of the day.

00:00:12.940 --> 00:00:13.860
Everybody's tired.

00:00:13.860 --> 00:00:15.120
We all want to go to sleep, right?

00:00:15.120 --> 00:00:15.460
Yes.

00:00:15.460 --> 00:00:16.330
Let's go party.

00:00:16.340 --> 00:00:17.280
I'm Sal Soghoian.

00:00:17.280 --> 00:00:20.910
I'm the AppleScript Product Manager and
the Automated Product Manager for

00:00:20.910 --> 00:00:21.660
Apple Computer.

00:00:21.660 --> 00:00:25.420
Thank you for coming here today
and spending some time with me.

00:00:25.440 --> 00:00:29.770
When we originally were talking
about what sessions to design for

00:00:29.900 --> 00:00:34.720
the Developer Conference this year,
one of the ideas that kept coming

00:00:34.850 --> 00:00:39.550
up was the fact that there's a lot
of interest in using AppleScript,

00:00:39.700 --> 00:00:43.290
especially now that Automator
has expanded the scope of

00:00:43.350 --> 00:00:45.200
what the language can do.

00:00:45.200 --> 00:00:49.210
There's been a lot of interest from
programmers in using AppleScript,

00:00:49.260 --> 00:00:52.880
maybe not full-time,
maybe just an occasional script.

00:00:52.960 --> 00:00:56.210
And it's always been very
daunting and challenging for

00:00:56.210 --> 00:00:58.480
programmers to use this language.

00:00:58.480 --> 00:01:00.710
They're very frustrated by it.

00:01:00.800 --> 00:01:05.030
And I thought that maybe a session
on AppleScript for programmers,

00:01:05.100 --> 00:01:08.400
people that already know how to program,
people already know how to use code,

00:01:08.900 --> 00:01:11.910
people already know how to
make money doing what they do,

00:01:11.940 --> 00:01:15.130
but occasionally want to use
AppleScript and would like

00:01:15.130 --> 00:01:16.830
it demystified for them.

00:01:16.940 --> 00:01:19.050
That's what this session is about.

00:01:19.140 --> 00:01:22.330
Is that what you understood to be true?

00:01:22.480 --> 00:01:23.650
Okay.

00:01:26.600 --> 00:02:41.000
[Transcript missing]

00:02:42.250 --> 00:02:47.480
If you want this presentation,
there is a URL that you can

00:02:47.490 --> 00:02:50.150
go get the presentation.

00:02:50.150 --> 00:02:53.490
It's up on www.automator.us.

00:02:53.500 --> 00:02:59.820
You can download this presentation
in your leisure and peruse it again

00:03:00.330 --> 00:03:03.600
to become an educated scripter.

00:03:19.970 --> 00:03:23.400
That's not my real name,
it's just what Steve calls me.

00:03:23.590 --> 00:03:25.640
Saul, who you all know.

00:03:25.640 --> 00:03:28.940
My real email address is sal@apple.com.

00:03:29.000 --> 00:03:31.700
You're welcome to send me an email.

00:03:31.790 --> 00:03:35.070
Okay, this session, like I just stated,
is for people that are

00:03:35.300 --> 00:03:39.260
used to programming,
understand structures, understand,

00:03:39.260 --> 00:03:42.920
you know, constructs,
understand repetitive loops,

00:03:43.000 --> 00:03:46.440
understand all those kind of things,
but they're interested in learning

00:03:46.440 --> 00:03:50.450
about AppleScript and what
makes it so funky and so cool.

00:03:51.460 --> 00:03:56.460
So what you're going to learn today is,
first of all, what is AppleScript,

00:03:56.460 --> 00:04:00.140
what a basic overview of what
the language is and how it works,

00:04:00.140 --> 00:04:03.600
all the little funky things about it,
and how it can target

00:04:04.200 --> 00:04:07.960
scriptable applications,
how you can refer to scriptable

00:04:07.990 --> 00:04:12.220
items within the applications,
including disk items in the Finder or

00:04:12.400 --> 00:04:14.930
tracks in iTunes or other applications.

00:04:15.640 --> 00:04:19.360
You're going to learn how to find items,
use AppleScript to find things.

00:04:19.460 --> 00:04:20.440
AppleScript's wonderful.

00:04:21.090 --> 00:04:23.330
It's really,
really good at locating specific

00:04:23.580 --> 00:04:26.780
things within an application and
then returning those back to you so

00:04:26.930 --> 00:04:28.840
that you can do cool stuff with them.

00:04:29.480 --> 00:04:33.410
You're going to learn the basic things
about how AppleScript does a repeat loop,

00:04:33.410 --> 00:04:37.600
how AppleScript does a conditional,
how AppleScript does an error handler.

00:04:38.100 --> 00:04:40.280
It's a little bit different
than what you're used to.

00:04:40.720 --> 00:04:42.140
Some of the things might look similar.

00:04:42.750 --> 00:04:44.820
Some of them just won't
make any sense at all,

00:04:44.900 --> 00:04:47.500
and some of them you'll go,
what am I doing this for?

00:04:48.000 --> 00:04:49.760
I could be having lunch
downstairs instead.

00:04:51.350 --> 00:04:52.910
And then we'll look at some
of the AppleScript tools

00:04:52.970 --> 00:04:55.790
that are on the computer,
like the script editor

00:04:55.860 --> 00:04:57.150
and the script menu.

00:04:57.630 --> 00:04:58.220
So let's begin.

00:04:58.300 --> 00:04:59.780
What is AppleScript?

00:04:59.870 --> 00:05:06.310
Well, AppleScript is a very high-level
language that's used to control

00:05:06.950 --> 00:05:09.690
and query scriptable applications.

00:05:10.840 --> 00:05:14.520
Those include things
like Microsoft Office,

00:05:14.520 --> 00:05:20.700
all the Adobe Creative Suite, iPhoto,
iDVD, iTunes are some of the apps,

00:05:20.700 --> 00:05:21.870
the address book.

00:05:22.780 --> 00:05:27.430
There's a lot of scriptable applications,
and AppleScript is the language that's

00:05:27.430 --> 00:05:31.940
used to talk to these applications and
to get them to do what you want to do.

00:05:33.020 --> 00:05:36.200
It's designed to be
used by people who are,

00:05:36.200 --> 00:05:37.790
dare I say normal?

00:05:37.870 --> 00:05:38.740
No.

00:05:39.160 --> 00:05:39.690
Are we normal?

00:05:40.700 --> 00:05:41.700
No, we're not normal, are we?

00:05:41.700 --> 00:05:42.690
We're better than normal.

00:05:42.700 --> 00:05:43.700
Okay.

00:05:43.710 --> 00:05:45.670
So we're on this side of normal.

00:05:46.480 --> 00:05:49.260
AppleScript is designed to be used by,
you know,

00:05:49.260 --> 00:05:53.240
motivated Macintosh customers who want
to be able to control the computer

00:05:53.240 --> 00:05:55.160
to get it to do what they want to do.

00:05:56.040 --> 00:06:00.690
And AppleScript was originally
designed back in 1992 to be that way,

00:06:00.690 --> 00:06:04.190
that tool for them to be able
to control their computer.

00:06:04.980 --> 00:06:07.010
It's well integrated into Mac OS X.

00:06:07.850 --> 00:06:10.790
It's lots of scriptable applications
like I just talked about.

00:06:11.740 --> 00:06:14.790
It has scriptable access to
the different frameworks,

00:06:14.860 --> 00:06:19.960
to shell web services, data events,
image events, XML parsing, PList parsing.

00:06:20.580 --> 00:06:23.200
All of those things are
accessible from AppleScript.

00:06:23.930 --> 00:06:26.440
So the scope of the
language is rather broad.

00:06:26.970 --> 00:06:28.330
It can do a lot of different things.

00:06:29.460 --> 00:06:33.560
It's a duct tape role that
covers the entire computer.

00:06:33.760 --> 00:06:38.640
And now we have AppleScript Studio,
which allows you to build applications,

00:06:38.640 --> 00:06:41.780
native Mac OS X applications,
using AppleScript.

00:06:41.780 --> 00:06:44.250
So we're a peer development
language with the other languages

00:06:44.300 --> 00:06:45.500
in the operating system.

00:06:45.500 --> 00:06:49.610
And now with Automator and Tiger,
we've taken it to the next step

00:06:49.960 --> 00:06:53.130
where you can take discrete bits of
functionality and present them to the

00:06:53.230 --> 00:06:56.230
customer and allow them to put them in
the order that they want to accomplish

00:06:56.310 --> 00:06:58.010
the kind of things that they want to do.

00:06:58.180 --> 00:07:03.390
Now, 80% of Apple's top-tier
customers use AppleScript.

00:07:03.830 --> 00:07:07.130
For example,
this picture is of a rack of excerpts.

00:07:07.240 --> 00:07:12.250
Those racks of excerpts are handling
7,000 print publication jobs daily.

00:07:12.260 --> 00:07:15.420
I can't tell you where the company is,
but that's a rack of excerpts

00:07:15.460 --> 00:07:19.120
running different applications,
all controlled with AppleScript.

00:07:19.120 --> 00:07:21.650
This is a money situation.

00:07:21.660 --> 00:07:23.260
AppleScript's really a money technology.

00:07:23.260 --> 00:07:27.180
There are a lot of major corporations
that you know about that build

00:07:27.180 --> 00:07:29.480
their business using this language.

00:07:29.560 --> 00:07:33.100
So even though it's fun
and it's easy to write,

00:07:33.500 --> 00:07:36.850
it's a very powerful language
and it has money attached to it.

00:07:36.920 --> 00:07:38.620
How does it work?

00:07:38.740 --> 00:07:42.040
Well,
you compose these AppleScript scripts.

00:07:42.180 --> 00:07:43.490
Oh, it actually looks nicer up there.

00:07:43.500 --> 00:07:47.060
Are designed in an editing
application like Script Debugger,

00:07:47.060 --> 00:07:49.320
which is from late-night software.

00:07:49.320 --> 00:07:52.460
Wonderful script writing
tool and debugging tool.

00:07:52.460 --> 00:07:55.570
Or the Script Editor application,
which comes in your

00:07:55.570 --> 00:07:57.880
application's AppleScript folder.

00:07:57.880 --> 00:08:01.090
And this is what a script looks like.

00:08:01.230 --> 00:08:02.380
This is a script window.

00:08:03.440 --> 00:08:06.260
And you can see it's very
fancy interface to it.

00:08:06.320 --> 00:08:08.940
The scripts are written
from left to right,

00:08:08.940 --> 00:08:11.680
and they're read from the top down.

00:08:11.740 --> 00:08:13.500
Makes sense, right?

00:08:13.500 --> 00:08:20.130
When executed, a script, statements,
and commands are converted by the

00:08:20.130 --> 00:08:25.280
operating system into Apple events that
are sent to the targeted application.

00:08:25.280 --> 00:08:29.530
And then the application does whatever
it is you're telling it to do and

00:08:29.820 --> 00:08:32.060
returns the result back to the script.

00:08:33.190 --> 00:08:35.550
For example,
tell application finder to get the

00:08:35.550 --> 00:08:39.060
name of the front finder window,
returns the result here of whatever

00:08:39.060 --> 00:08:40.660
the front finder window is.

00:08:40.660 --> 00:08:44.600
So it's this communication circle
that AppleScript's really good at.

00:08:44.750 --> 00:08:48.100
It's not the Apple event architecture,
because that's part

00:08:48.120 --> 00:08:48.960
of the core of the OS.

00:08:49.010 --> 00:08:53.780
It's a high-level language that
controls and queries the Apple event

00:08:53.780 --> 00:08:55.300
architecture underneath it.

00:08:55.300 --> 00:08:58.500
And it's your best friend
for doing quick things,

00:08:58.500 --> 00:09:01.430
for doing powerful things,
for doing redundant tasks.

00:09:01.480 --> 00:09:02.670
AppleScript's really great.

00:09:02.740 --> 00:09:07.130
Now, you can save scripts once you've
written them as documents that get run

00:09:07.140 --> 00:09:11.670
from the system-wide script menu or an
application script menu like the script

00:09:11.670 --> 00:09:13.800
menu in iTunes or Soundtrack Pro.

00:09:13.860 --> 00:09:18.740
Or you can save them as self-running
applications that look like this,

00:09:18.740 --> 00:09:23.300
or as self-running applications
that accept items dragged onto them,

00:09:23.360 --> 00:09:26.480
hence the blue arrow,
meaning drag onto me.

00:09:26.580 --> 00:09:28.990
That's called a droplet.

00:09:29.380 --> 00:09:34.020
AppleScript has an English-like syntax,
and now here's where

00:09:34.020 --> 00:09:36.590
everything gets funky.

00:09:36.830 --> 00:09:40.130
It's not the normal kind of
language that you're used to.

00:09:40.260 --> 00:09:42.320
For example,
what do I mean by English-like syntax?

00:09:42.390 --> 00:09:42.730
Okay.

00:09:42.730 --> 00:09:45.550
Move the green car before the red car.

00:09:45.580 --> 00:09:47.450
That's something I would say.

00:09:47.460 --> 00:09:51.890
Get the name of every student whose
graduation comes after June 1st.

00:09:51.920 --> 00:09:54.340
That's something that we would say.

00:09:55.310 --> 00:09:59.170
If your first name begins with a B,
then stand in the line on the left.

00:09:59.300 --> 00:10:01.240
Otherwise,
stand in the line on the right.

00:10:01.480 --> 00:10:05.640
Now, these are kind of statements that
are typical to the English language.

00:10:05.770 --> 00:10:08.140
These are the kind of statements
that we use every day.

00:10:08.160 --> 00:10:13.040
Well, AppleScript was designed to
mimic this kind of a syntax.

00:10:13.040 --> 00:10:16.990
So the goal being that someone
could just think of what they

00:10:17.070 --> 00:10:20.380
want to do and the actual code
would be what they just thought.

00:10:20.550 --> 00:10:22.880
Of course,
it didn't count on TV dumbing down

00:10:22.880 --> 00:10:24.760
America so that we can't speak anymore.

00:10:25.210 --> 00:10:28.540
But that's the basic
principle of what's going on.

00:10:28.620 --> 00:10:31.260
I can't resist being political.

00:10:33.540 --> 00:10:35.260
So let's look at a syntax comparison.

00:10:35.260 --> 00:10:36.900
Now, can you see that?

00:10:36.900 --> 00:10:37.740
Yes, okay, good.

00:10:37.750 --> 00:10:42.200
This is a script from using Python.

00:10:42.230 --> 00:10:44.850
Are you familiar with Apps Script,
which is a -- it's a

00:10:44.850 --> 00:10:47.220
Python scriptable OSA thing?

00:10:47.360 --> 00:10:51.520
So let's take a look at the difference
between the two languages and how

00:10:51.520 --> 00:10:53.730
they are functionally different.

00:10:53.920 --> 00:10:55.470
Now, let's see, what does this do?

00:10:55.560 --> 00:11:00.300
Well, I know that it uses the finder,
and it gets something.

00:11:00.300 --> 00:11:01.580
Okay, what's it going to get?

00:11:01.660 --> 00:11:08.250
It's going to get the name of folders
-- get the name of every folder of home,

00:11:08.350 --> 00:11:10.560
of the home directory.

00:11:10.630 --> 00:11:14.700
So it's going to have -- tell the finder
to get the name of every folder of home.

00:11:14.720 --> 00:11:17.470
Well, that's what AppleScript is.

00:11:17.550 --> 00:11:22.230
So there's the same thing,
but in two different languages.

00:11:22.260 --> 00:11:27.780
You can see that there's totally
a 180-degree different approach in

00:11:27.780 --> 00:11:30.380
the way that the syntax is done.

00:11:30.730 --> 00:11:38.370
So let's take a look at another one.

00:11:39.070 --> 00:11:40.000
Okay, let's see.

00:11:40.000 --> 00:11:44.710
This is going to count the
words of documents one.

00:11:44.800 --> 00:11:45.400
Tell TextEdit.

00:11:45.400 --> 00:11:48.870
Okay,
this is going to have TextEdit count

00:11:48.870 --> 00:11:51.730
the words of the first document.

00:11:52.840 --> 00:11:53.240
Yes.

00:11:53.610 --> 00:11:56.270
Tell app.txtedit to count the
words of the first document.

00:11:56.300 --> 00:11:59.910
So that's the same thing in AppleScript.

00:12:02.150 --> 00:12:03.100
Let's take a look at this one.

00:12:03.100 --> 00:12:04.100
This one has something.

00:12:04.100 --> 00:12:05.350
Ooh, it's got a test.

00:12:05.450 --> 00:12:05.950
Let's see.

00:12:06.000 --> 00:12:08.340
It's going to delete test something.

00:12:08.340 --> 00:12:10.060
It's is equal to a return.

00:12:10.060 --> 00:12:14.760
Test paragraphs, document one.

00:12:14.760 --> 00:12:20.850
Tell application text edit to
delete every paragraph of the first

00:12:20.850 --> 00:12:23.940
document where it is a return.

00:12:23.940 --> 00:12:25.130
Okay.

00:12:25.910 --> 00:12:28.490
Tell TextEdit to delete
every paragraph of the front

00:12:28.490 --> 00:12:31.040
document where it is a return.

00:12:31.150 --> 00:12:36.540
So inherently 180-degree
shift in your thinking.

00:12:36.590 --> 00:12:39.660
This is a little bit of a challenge,
but we're going to spend some time

00:12:39.730 --> 00:12:45.380
looking at the syntax so that you can
understand why it's this way and how

00:12:45.380 --> 00:12:49.320
you can momentarily escape reality and
let your mind drift and write a line

00:12:49.320 --> 00:12:53.760
of AppleScript and then come back into
writing some structured code again.

00:12:56.270 --> 00:12:59.160
So here's a typical way
that AppleScript is written.

00:12:59.190 --> 00:13:03.520
One of the things that AppleScript is
commonly used for is to get

00:13:03.550 --> 00:13:08.140
and set the values of various
properties of scriptable objects,

00:13:08.140 --> 00:13:12.070
whether it's the color of
a box or whether it's the

00:13:12.170 --> 00:13:14.620
font of a word or something.

00:13:37.650 --> 00:13:37.790
So here's a typical syntax.

00:13:37.790 --> 00:13:37.790
Set the property of some
object to a certain value.

00:13:37.790 --> 00:13:37.790
An example of that would be set the
color of the current box to red.

00:13:37.790 --> 00:13:37.790
Set the name of the third track
of the first playlist to Fred.

00:13:38.290 --> 00:13:43.310
set the label index of
every folder of Home to 3.

00:13:43.440 --> 00:13:47.240
So this type of syntax is
very common to AppleScript.

00:13:47.250 --> 00:13:50.240
And once you're familiar with that,
once you understand that,

00:13:50.270 --> 00:13:55.110
then it'll become easier for you to learn
how to write these types of scripts.

00:13:55.600 --> 00:15:10.400
[Transcript missing]

00:15:11.210 --> 00:15:13.460
The syntax of AppleScript is
similar to English.

00:15:13.460 --> 00:15:16.780
It says what it does most of the time,
and that's why a lot

00:15:16.780 --> 00:15:17.740
of customers like it.

00:15:17.830 --> 00:15:21.440
It's because they can go back into their
scripts months later and actually read

00:15:21.440 --> 00:15:23.420
the script and figure out what it does.

00:15:41.680 --> 00:15:49.590
"Buy Maalox by the gallon"
because no matter what you do,

00:15:49.590 --> 00:15:49.590
it's going to drive you crazy.

00:15:50.010 --> 00:15:53.660
So let's look at how you use
AppleScript to talk to an application.

00:15:53.660 --> 00:15:56.400
You notice I'm using these
friendly terms like talking.

00:15:56.400 --> 00:15:59.390
It's all part of my plan.

00:15:59.400 --> 00:16:01.690
So a tell statement.

00:16:01.690 --> 00:16:06.070
Well, tell statement is the rudiment
functional statement of AppleScript.

00:16:06.180 --> 00:16:08.450
It's the workhorse of
the AppleScript world.

00:16:08.460 --> 00:16:11.700
It targets a scriptable application.

00:16:12.040 --> 00:16:14.780
It's a single line beginning
with the verb tell.

00:16:14.780 --> 00:16:17.500
It contains two elements.

00:16:17.500 --> 00:16:21.780
One, a reference to the object that
you're going to be scripting.

00:16:21.780 --> 00:16:25.080
And two,
the action that you want to be performed.

00:16:25.080 --> 00:16:28.180
This structure is the
heart of AppleScript.

00:16:28.180 --> 00:16:31.760
Most of what you do with
AppleScript follows this idea of

00:16:31.790 --> 00:16:36.440
using a tell statement to target an
application or a scriptable object.

00:16:36.440 --> 00:16:38.440
And they always contain a
reference to the object.

00:16:38.440 --> 00:16:41.030
So a tell statement is a reference
to the object that you're going to

00:16:41.030 --> 00:16:42.500
script and the action to be done.

00:16:42.530 --> 00:16:44.490
Makes sense, right?

00:16:44.910 --> 00:16:47.940
For example,
tell application QuickTimePlayer

00:16:47.940 --> 00:16:51.640
to tell the front movie to tell
the last track to get its duration.

00:16:51.640 --> 00:16:56.250
So this particular version of
syntax I wrote to mimic the kind of

00:16:56.360 --> 00:16:59.050
dot structure that we saw earlier.

00:16:59.080 --> 00:17:04.710
Now, the reference to the object in here
is the front movie and the last track.

00:17:04.780 --> 00:17:07.370
So you can see that the front
movie owns the last track and

00:17:07.450 --> 00:17:08.980
is telling it to do something.

00:17:08.980 --> 00:17:13.060
The action to perform in this
case is to get its duration.

00:17:13.980 --> 00:17:18.360
Now, this is not a typical syntax
that scripters would use.

00:17:18.480 --> 00:17:21.030
They would most often say
it's something like this.

00:17:21.060 --> 00:17:23.750
Tell application QuickTimePlayer
to get the duration of the

00:17:23.760 --> 00:17:25.280
last track of the front movie.

00:17:25.300 --> 00:17:28.360
This is a valid tell statement
because it contains the two

00:17:28.430 --> 00:17:30.330
things that we're looking for.

00:17:30.340 --> 00:17:34.420
One, a reference to the object
that's going to be scripted.

00:17:34.610 --> 00:17:36.780
In this case,
the last track of the front movie.

00:17:36.780 --> 00:17:39.280
And two, the action to be performed.

00:17:39.280 --> 00:17:41.510
In this case, get the duration.

00:17:41.520 --> 00:17:45.440
So, any way you want to put
these two things together,

00:17:45.440 --> 00:17:49.340
as long as you have a reference to the
object that's going to be controlled,

00:17:49.340 --> 00:17:53.290
and the action to be performed,
and the statement starts

00:17:53.290 --> 00:17:55.550
with the verb tell,
followed by the object

00:17:55.810 --> 00:17:59.500
that's the parent object,
which is usually the application,

00:17:59.500 --> 00:18:00.550
you're fine.

00:18:00.600 --> 00:18:03.760
Any way that you want to
write it is fine indeed.

00:18:03.760 --> 00:18:04.500
It will work.

00:18:04.640 --> 00:18:08.150
And if AppleScript works, it's right.

00:18:08.200 --> 00:18:10.530
There is no right way to do something.

00:18:10.540 --> 00:18:12.970
There's no right way to make money.

00:18:13.500 --> 00:18:15.800
Well, maybe there is, okay.

00:18:16.250 --> 00:18:20.540
So this is usually the way that
you'll see AppleScript done.

00:18:20.540 --> 00:18:23.340
Notice the little new
line character over there,

00:18:23.340 --> 00:18:25.920
which is option L or shift return.

00:18:25.920 --> 00:18:29.060
That just indicates that
I couldn't fit it all on one line,

00:18:29.060 --> 00:18:30.620
and that's all that is.

00:18:30.620 --> 00:18:32.710
So here's a tell statement.

00:18:32.720 --> 00:18:35.910
Let's look at some more examples of
what a tell statement looks like.

00:18:36.000 --> 00:18:37.980
Again, it begins with the verb tell,
right?

00:18:37.980 --> 00:18:44.410
And it always contains a reference
to the object to script and

00:18:44.550 --> 00:18:45.720
then the action to perform.

00:18:46.300 --> 00:18:49.990
Tell application iTunes to
delete every track of playlist

00:18:49.990 --> 00:18:52.790
My Party List whose artist is Bon Jovi.

00:18:52.840 --> 00:18:53.940
Okay?

00:18:53.940 --> 00:18:56.940
And this, I like them.

00:18:56.940 --> 00:18:57.620
I do.

00:18:57.620 --> 00:18:58.480
I listen to them.

00:18:58.480 --> 00:19:01.160
When nobody's around,
I'll be listening to them and

00:19:01.160 --> 00:19:03.160
all the old stuff from the 70s.

00:19:03.160 --> 00:19:04.210
I am that old.

00:19:04.220 --> 00:19:06.050
I'm a dinosaur looking for a tar pit.

00:19:08.920 --> 00:19:12.600
Okay, so what is the object to control?

00:19:12.600 --> 00:19:14.660
What is the scriptable
object we're looking for?

00:19:14.660 --> 00:19:17.750
In this case,
it's every track of Playlist

00:19:17.750 --> 00:19:20.760
My Party Mix whose artist is Bon Jovi.

00:19:20.760 --> 00:19:22.980
That's the first element
of the tell statement.

00:19:22.980 --> 00:19:24.330
What is the second?

00:19:24.330 --> 00:19:25.860
The action to perform.

00:19:25.860 --> 00:19:28.270
And in that case, it's the verb delete.

00:19:28.360 --> 00:19:31.940
So this tell statement contains
everything that we're looking

00:19:31.940 --> 00:19:35.360
for and will function and
execute in iTunes very easily.

00:19:35.360 --> 00:19:37.820
It cleans and waxes in one motion.

00:19:37.820 --> 00:19:39.350
It's very nice.

00:19:39.350 --> 00:19:42.470
It not only finds and it
does at the same time.

00:19:42.600 --> 00:19:43.530
Finds, does.

00:19:43.530 --> 00:19:44.520
Finds, does.

00:19:44.590 --> 00:19:46.460
The power of AppleScript.

00:19:47.560 --> 00:19:48.440
Let's take a look at another one.

00:19:49.080 --> 00:19:51.790
Tell Application Finder to
duplicate every document file of

00:19:51.790 --> 00:19:52.960
the entire contents of Fullscript.

00:19:53.500 --> 00:19:54.530
It's the object that's being targeted.

00:19:54.530 --> 00:19:56.160
It's every document file of the
entire contents of Folder Documents

00:19:56.230 --> 00:19:57.980
of Home whose name contains
Smith Project to the disk name backup.

00:19:57.980 --> 00:19:58.560
Woof.

00:19:58.680 --> 00:20:00.520
Okay, what does that do?

00:20:00.520 --> 00:20:06.290
Well, it goes into your Documents folder,
finds every documents file that contains

00:20:06.680 --> 00:20:10.960
the name Smith Project in its name,
then copies it over onto

00:20:10.960 --> 00:20:12.970
this disk name backup.

00:20:13.480 --> 00:20:15.870
All of that done with
one line of AppleScript.

00:20:15.940 --> 00:20:18.730
First of all,
it's the object that's being targeted.

00:20:18.730 --> 00:20:22.730
It's every document file of the entire
contents of Folder Documents of Home.

00:20:22.990 --> 00:20:23.470
It's the object that's being targeted.

00:20:23.470 --> 00:20:24.310
It's every document file of the
entire contents of Folder Documents

00:20:24.310 --> 00:20:25.240
of Home whose name contains
Smith Project to the disk name backup.

00:20:25.950 --> 00:20:30.230
And the action to perform is
duplicate to the disk name backup.

00:20:30.340 --> 00:20:32.960
Now, here's an interesting split, right?

00:20:32.960 --> 00:20:36.640
This is typical in the English language,
and it drives people crazy,

00:20:36.900 --> 00:20:39.020
especially Germans,
when they're trying to

00:20:39.020 --> 00:20:41.820
learn the English language,
is that you kind of split

00:20:41.820 --> 00:20:43.540
things a lot with English.

00:20:43.540 --> 00:20:44.700
But that's very typical.

00:20:44.700 --> 00:20:49.040
The action to perform is duplicate
those items to the disk name backup.

00:20:51.550 --> 00:20:55.040
Now, there'll be often times,
does any of this make sense?

00:20:55.040 --> 00:20:56.060
Does that kind of make sense?

00:20:56.060 --> 00:20:58.040
Groan if it does.

00:20:58.040 --> 00:20:59.800
Okay.

00:20:59.800 --> 00:21:03.250
You're going, yeah, it makes sense,
but I don't want to learn it.

00:21:03.340 --> 00:21:04.540
I don't want to.

00:21:04.540 --> 00:21:05.980
You can't make me learn it.

00:21:05.980 --> 00:21:06.760
Oh, no.

00:21:06.760 --> 00:21:07.400
Okay.

00:21:07.400 --> 00:21:11.720
Now, there's times when you want to
do more than just one thing with

00:21:11.720 --> 00:21:14.120
a group of a scriptable object,
right?

00:21:14.120 --> 00:21:16.720
You might want to perform a
series of actions with it.

00:21:17.140 --> 00:21:19.510
Well, instead of writing a
series of tell statements,

00:21:19.530 --> 00:21:23.160
there's this construct in
AppleScript called a tell block.

00:21:23.300 --> 00:21:28.910
And a tell block targets one or
more actions at a scriptable object.

00:21:29.030 --> 00:21:33.140
It opens with a,
it has an opening statement.

00:21:33.140 --> 00:21:35.700
Pardon me for a second.

00:21:35.700 --> 00:21:36.790
This has no gin in it.

00:21:36.860 --> 00:21:37.890
Okay.

00:21:39.500 --> 00:22:54.700
[Transcript missing]

00:22:55.540 --> 00:22:57.580
It gives you better visual organization.

00:22:57.720 --> 00:22:59.640
So here's our same script again.

00:22:59.690 --> 00:23:05.600
Now, you'll notice that the sections up
here all pertain to doing something

00:23:05.600 --> 00:23:07.250
with the finder preferences.

00:23:07.420 --> 00:23:10.930
Well, instead of writing each line,
"Set desktop shows removable media

00:23:10.930 --> 00:23:14.440
of the finder preferences to false,"
and then doing that over and over,

00:23:14.530 --> 00:23:18.220
we can put all of those statements
within their own tell block that talk

00:23:18.370 --> 00:23:20.760
to the finder preferences object.

00:23:20.900 --> 00:23:25.110
So to do that,
you do something like this.

00:23:25.100 --> 00:24:42.100
[Transcript missing]

00:24:42.590 --> 00:24:48.470
Now, the tell blocks only affect the
things that are within their scope.

00:24:48.470 --> 00:24:52.940
The statements that are in blue
right now still are controlled by

00:24:52.940 --> 00:24:56.260
the thing that's on the outside,
the outside tell block,

00:24:56.260 --> 00:24:57.390
which is the finder.

00:25:12.870 --> 00:25:13.000
So, we went from this to this.

00:25:13.000 --> 00:25:13.180
That's an example of nested tell blocks.

00:25:13.200 --> 00:25:13.450
Okay, so that's a basic
structure of AppleScript,

00:25:13.450 --> 00:25:13.980
the tell block, nested tell blocks,
and then you come across these.

00:25:14.770 --> 00:25:18.100
You'll see these quite a bit in
people that are learning the script,

00:25:18.280 --> 00:25:21.020
you know, for the first time,
is they kind of walk the

00:25:21.020 --> 00:25:25.150
object hierarchy using tells,
and it looks something like that.

00:25:25.300 --> 00:25:27.660
You know, tell application finder
to tell home to tell home.

00:25:28.120 --> 00:25:29.860
You know,
tell folder documents to tell folder

00:25:29.870 --> 00:25:32.640
Smith project to tell every item,
set the label index to three,

00:25:32.640 --> 00:25:36.960
set the comment to Smith project final,
and then you have all these closing enta,

00:25:36.960 --> 00:25:40.470
enta, enta, enta, enta, enta.

00:25:41.960 --> 00:25:44.640
Well, you know,
there's a more elegant way to do that,

00:25:44.640 --> 00:25:46.550
and you'll probably end
up doing it yourself.

00:25:46.620 --> 00:25:49.390
A much cleaner way to do
that is something like this,

00:25:49.400 --> 00:25:52.730
where you have an outer tell
block that is the application,

00:25:52.870 --> 00:25:56.920
and then an inner tell block
where you're opening part of that

00:25:56.920 --> 00:26:02.060
statement is a little bit longer
reference to a particular object.

00:26:02.120 --> 00:26:03.500
It doesn't have to be a single object.

00:26:03.560 --> 00:26:06.030
It can be part of an object
that's in an object hierarchy,

00:26:06.190 --> 00:26:09.480
in this case, folder documents of home.

00:26:09.510 --> 00:26:12.690
And it's a tell block just
like any other tell block,

00:26:12.690 --> 00:26:17.580
and the things that occur there
pertain to folder documents of the

00:26:17.590 --> 00:26:23.430
Smith project folder of the finder,
of the home folder.

00:26:23.660 --> 00:26:27.600
So that's an example of a...

00:26:27.600 --> 00:28:18.000
[Transcript missing]

00:28:18.730 --> 00:28:22.700
What does activate do?

00:28:22.740 --> 00:28:24.840
It's kind of like tan hut.

00:28:24.950 --> 00:28:26.600
It means come to the foreground.

00:28:26.600 --> 00:28:32.340
If you're not already launched,
activate means launch the application.

00:28:32.540 --> 00:28:36.320
The verb launch means open
but don't show any UI,

00:28:36.320 --> 00:28:38.820
open up in the background.

00:28:39.040 --> 00:28:41.630
Here's just a little other tip.

00:28:41.740 --> 00:28:44.360
That's basically the
idea behind tell blocks.

00:28:44.360 --> 00:28:49.220
Now you saw that I set a lot
of properties using the tell

00:28:49.640 --> 00:28:51.850
statements in that tell block.

00:28:52.150 --> 00:28:53.530
Here's just a shortcut for you.

00:28:53.840 --> 00:28:59.510
With some applications like the Finder,
you can set all the properties in one

00:28:59.510 --> 00:29:02.700
action by setting the property record.

00:29:02.880 --> 00:29:03.290
Here you go.

00:29:03.520 --> 00:29:05.900
Set the properties of the
Finder preferences to,

00:29:05.900 --> 00:29:07.960
and then you'll notice that
there's this thing here.

00:29:08.260 --> 00:29:10.840
There's a curly brace,
and it goes all the way

00:29:10.840 --> 00:29:14.140
down there with stuff in it,
and it ends in a curly brace

00:29:14.140 --> 00:29:16.900
over there where it says .668.

00:29:17.080 --> 00:29:20.070
This is a record, a property record.

00:29:20.070 --> 00:29:22.860
These are the key values
or the properties that

00:29:22.860 --> 00:29:26.200
you're going to be setting,
and then there's the values

00:29:26.200 --> 00:29:28.060
for those that match them.

00:29:28.060 --> 00:29:29.480
They're separated by a colon.

00:29:29.480 --> 00:29:33.260
So desktop shows hard
disk colon value false.

00:29:33.260 --> 00:29:35.230
Desktop shows removable
media colon false.

00:29:35.340 --> 00:29:37.300
Desktop shows connected service false.

00:29:37.300 --> 00:29:40.210
So by executing this
one line of AppleScript,

00:29:40.210 --> 00:29:44.530
you can set all of those properties
in one motion rather than having to

00:29:44.530 --> 00:29:46.920
execute a series of tell statements.

00:29:47.140 --> 00:29:51.300
That's just a little tip that
I'm giving you extra here.

00:29:51.300 --> 00:29:52.400
Okay.

00:29:52.420 --> 00:29:54.000
So that's tell blocks.

00:29:54.000 --> 00:29:57.740
That's the basic structure of how
to write a script using a tell

00:29:57.740 --> 00:30:01.910
statement where you're directing
an action at a specific scriptable

00:30:01.910 --> 00:30:04.350
application or scriptable object.

00:30:04.470 --> 00:30:06.500
A tell block, a tell statement only
uses a tell statement.

00:30:06.500 --> 00:30:10.570
A tell statement always contains
a reference to the object that

00:30:10.600 --> 00:30:14.800
you're going to control and the
action to do with that object.

00:30:14.820 --> 00:30:17.380
Does that help clear up a
little bit of the mystery about

00:30:17.400 --> 00:30:19.000
how tell statements are done?

00:30:19.000 --> 00:30:20.500
A little bit different, isn't it?

00:30:20.500 --> 00:30:22.090
Yeah, once you get used to it,
it's not so bad.

00:30:22.100 --> 00:30:25.640
Well, let's look at some of the
AppleScript data types.

00:30:25.640 --> 00:30:29.770
Like, what are the kind of things
that AppleScript can deal with?

00:30:29.840 --> 00:30:31.800
Well, it deals with integers.

00:30:31.800 --> 00:30:33.530
So there's some integers.

00:30:33.530 --> 00:30:35.130
It deals with reels.

00:30:35.140 --> 00:30:37.380
So there's some reels.

00:30:37.400 --> 00:30:39.480
It deals with strings.

00:30:39.520 --> 00:30:41.110
It deals with Booleans.

00:30:41.110 --> 00:30:43.290
But we don't call them zero and one.

00:30:43.440 --> 00:30:45.930
We call them true and false, right?

00:30:46.410 --> 00:30:47.710
and it deals with lists.

00:30:48.030 --> 00:30:50.160
This is a list.

00:30:50.300 --> 00:30:51.900
You might call them arrays.

00:30:52.030 --> 00:30:56.600
And they always begin with an open
curly brace and a closed curly brace,

00:30:56.920 --> 00:30:59.290
and they can contain anything.

00:30:59.400 --> 00:31:02.060
Any data type supported by
AppleScript can go inside the list,

00:31:02.130 --> 00:31:04.350
even other lists like down there.

00:31:04.400 --> 00:31:08.320
So you can have lists of lists of lists
of lists or lists of lists of lists

00:31:08.380 --> 00:31:10.870
of lists or numbers and text together.

00:31:10.870 --> 00:31:14.330
Lists are really, in AppleScript,
can contain whatever you like.

00:31:14.720 --> 00:31:17.020
This is the record
that we just looked at.

00:31:17.190 --> 00:31:20.490
It kind of looks like a list,
but it's really a set of key value,

00:31:20.490 --> 00:31:22.780
key value, key value kind of things.

00:31:24.480 --> 00:31:27.560
Those are the data types
that AppleScript supports.

00:31:27.600 --> 00:31:30.410
There's probably some more in there too,
but those are the basic

00:31:30.410 --> 00:31:31.750
ones that we need to know.

00:31:31.810 --> 00:31:33.650
Any questions about those?

00:31:33.680 --> 00:31:34.580
Okay.

00:31:34.610 --> 00:31:35.390
Operators.

00:31:35.530 --> 00:31:38.090
Well, let's look at these.

00:31:38.330 --> 00:31:42.270
In addition,
we use the plus sign as a plus sign.

00:31:42.500 --> 00:31:46.200
Think of AppleScript's operators
as the ones that you would

00:31:46.310 --> 00:31:48.400
learn in the fourth grade.

00:31:48.400 --> 00:31:51.260
We even have a rounding
control for AppleScript.

00:31:51.330 --> 00:31:56.310
There's a verb for rounding, and it says,
round as taught in school.

00:31:57.480 --> 00:32:01.230
and it takes from .5
up and stuff like that.

00:32:01.350 --> 00:32:03.640
So there's addition.

00:32:03.640 --> 00:32:06.870
Multiply, we use the asterisk.

00:32:07.000 --> 00:32:22.100
[Transcript missing]

00:32:22.520 --> 00:32:25.780
We also have an exponential,
which looks like this.

00:32:25.830 --> 00:32:27.850
So that's 2 to the fourth power 16.

00:32:28.130 --> 00:32:33.150
The square root of 4 would
be an exponential 0.5.

00:32:35.450 --> 00:32:38.100
And we have concatenation for text.

00:32:38.220 --> 00:32:41.160
So once upon a time and
in a village far away,

00:32:41.260 --> 00:32:45.940
we used the ampersand character,
a single ampersand character,

00:32:45.990 --> 00:32:49.220
as a way to concatenate
items in AppleScript.

00:32:49.310 --> 00:32:52.360
In this case,
if you concatenated those two,

00:32:52.520 --> 00:32:55.650
it would be once upon a
time in a village far away.

00:32:55.940 --> 00:32:57.370
There's no space in there.

00:32:57.480 --> 00:33:00.190
With AppleScript,
you can actually add a space by putting

00:33:00.190 --> 00:33:03.350
the word "space" in between the two.

00:33:03.360 --> 00:33:07.310
So once upon a time plus space in a
village far away would give you once

00:33:07.350 --> 00:33:09.370
upon a time in a village far away.

00:33:09.420 --> 00:33:11.610
As a matter of fact,
there's a couple special terms you

00:33:11.660 --> 00:33:15.760
can use the word "space," "tab,"
or "return" for paragraph return,

00:33:15.810 --> 00:33:18.290
anywhere in where you're
concatenating text together,

00:33:18.510 --> 00:33:21.130
and AppleScript understands that.

00:33:21.480 --> 00:33:24.540
You can can cat, can cat, can cat.

00:33:24.560 --> 00:33:27.640
You can can add lists together.

00:33:27.710 --> 00:33:29.900
You can join lists together.

00:33:30.400 --> 00:33:44.200
[Transcript missing]

00:33:44.360 --> 00:33:45.300
That's it.

00:33:45.300 --> 00:33:47.550
That's our basic characters.

00:33:47.590 --> 00:33:50.720
You see that we don't have cosine,
tangent, that kind of stuff.

00:33:50.850 --> 00:33:53.700
AppleScript is kind of
weak on those areas.

00:33:53.760 --> 00:33:56.880
There are subroutines you can do,
but it's often great just to

00:33:56.960 --> 00:33:59.990
drop into the shell for a second,
do shell command,

00:33:59.990 --> 00:34:03.760
and then cosine of blah,
and then take that and go out with it.

00:34:03.790 --> 00:34:07.910
Let's look at some basic
coercions that AppleScript uses.

00:34:08.210 --> 00:34:11.860
To coerce something,
you use the term as followed by the

00:34:11.860 --> 00:34:13.930
class that you want to coerce to.

00:34:14.180 --> 00:34:17.860
For example,
this text string of the character

00:34:17.860 --> 00:34:21.760
1 as integer would give you
the number 1 as integer.

00:34:21.760 --> 00:34:24.760
1 as a Boolean turns into true.

00:34:24.760 --> 00:34:27.740
Naturally,
0 as a Boolean would turn into false.

00:34:27.740 --> 00:34:32.740
1 as Unicode text turns
into 1 as Unicode text.

00:34:32.920 --> 00:34:37.990
And Fred as a list turns
into a list of 1 with Fred.

00:34:38.410 --> 00:34:41.970
These are some basic coercions that
you're going to use quite a bit when

00:34:41.970 --> 00:34:43.120
you're in the world of AppleScript.

00:34:43.120 --> 00:34:46.020
There's a couple more coercions we're
going to see as we go along here.

00:34:47.490 --> 00:34:51.840
uses text item delimiters when you
want to course lists to strings.

00:34:51.840 --> 00:34:55.060
Here is our list of people.

00:34:55.080 --> 00:34:56.800
Sal Soobob.

00:34:56.800 --> 00:35:00.930
When you course a list to a string,
you will get them all jumbled

00:35:00.940 --> 00:35:02.310
together to Sal Soobob.

00:35:02.400 --> 00:35:07.470
You will have this thing called
AppleScript's text item delimiters.

00:35:07.470 --> 00:35:11.680
You can set AppleScript's text item
delimiters to whatever you want.

00:35:11.680 --> 00:35:13.320
In this case, I'm using a dash.

00:35:13.620 --> 00:35:16.800
Then I'm going to say, "Okay,
now take that same thing as Unicode

00:35:16.800 --> 00:35:19.400
text." That would change it to this.

00:35:19.400 --> 00:35:23.630
Then remember always to set your
delimiters back to a null string,

00:35:23.630 --> 00:35:26.400
which is two straight quotes.

00:35:26.400 --> 00:35:29.450
You don't want to leave your delimiter
set for something weird in case you

00:35:29.450 --> 00:35:31.400
have another script that's using
delimiters and all of a sudden,

00:35:31.400 --> 00:35:31.400
you're going to have to change it.

00:35:31.400 --> 00:35:31.400
You don't want to leave your delimiter
set for something weird in case you

00:35:31.400 --> 00:35:31.400
have another script that's using
delimiters and all of a sudden,

00:35:31.400 --> 00:35:31.400
you're going to have to change it.

00:35:31.410 --> 00:35:34.130
delimiters and all of a sudden
your stuff starts changing

00:35:34.240 --> 00:35:35.850
because it's a global thing.

00:35:35.860 --> 00:35:38.930
Which brings us up to
the topic of variables.

00:35:38.930 --> 00:35:40.300
All right.

00:35:40.300 --> 00:35:46.280
So, this is so great for me that I don't
have to explain what a variable is.

00:35:46.280 --> 00:35:47.370
This is amazing.

00:35:47.440 --> 00:35:51.530
Do you realize how hard that is to
explain this concept to somebody that's,

00:35:51.530 --> 00:35:52.980
you know, not a programmer?

00:35:52.980 --> 00:35:55.920
You know,
it's a container like a Tupperware.

00:35:56.050 --> 00:35:59.000
You put stuff in, you take it out, right?

00:35:59.000 --> 00:35:59.480
Yes.

00:35:59.480 --> 00:36:01.820
So, I'm really, I am so thrilled.

00:36:03.810 --> 00:36:04.630
You can use that.

00:36:04.810 --> 00:36:05.800
You can use it.

00:36:05.840 --> 00:36:11.150
So I'm so thrilled to be talking to
an educated group like yourselves.

00:36:11.330 --> 00:36:12.800
Very handsome, I might add, too.

00:36:12.800 --> 00:36:18.070
Because what I'm about to
tell you will drive you mad.

00:36:19.330 --> 00:36:23.740
Okay, a variable to AppleScript,
it considers things variables

00:36:23.850 --> 00:36:28.330
that any word or contiguous bit
of text that is not part of the

00:36:28.580 --> 00:36:31.320
AppleScript language itself.

00:36:31.410 --> 00:36:34.980
So when you're in the script editor,
you'll see words that are bolded.

00:36:35.220 --> 00:36:39.630
Those are AppleScript's own words,
like every, tell, by, the,

00:36:39.630 --> 00:36:41.390
those kind of things.

00:36:41.410 --> 00:36:43.140
You can't use those as variables.

00:36:43.180 --> 00:36:48.010
Also, the terminologies of
any scripting additions.

00:36:48.180 --> 00:36:52.590
AppleScript has an extensible
architecture that uses these

00:36:52.590 --> 00:36:55.700
things called scripting additions
to enhance the language.

00:36:55.700 --> 00:36:58.840
They're global in scope,
so they work all the time,

00:36:58.840 --> 00:37:02.150
regardless of whether you're
in a tell block or not.

00:37:02.210 --> 00:37:04.440
So you have to be aware
of their terminologies,

00:37:04.440 --> 00:37:04.860
too.

00:37:04.860 --> 00:37:11.200
And finally, if you have a variable being
declared within a tell block,

00:37:11.260 --> 00:37:14.380
you have to make sure that the name
of the variable that you're using

00:37:14.380 --> 00:37:17.400
is not part of the application's
own scripting dictionary.

00:37:19.000 --> 00:37:21.830
Variables can contain any data
type supported by AppleScript,

00:37:21.830 --> 00:37:25.440
like numeric, textual, lists, references,
image data, booleans, enumerations,

00:37:25.440 --> 00:37:27.080
records, whatever you like.

00:37:27.200 --> 00:37:30.360
Variables do not need
to be declared or typed.

00:37:30.460 --> 00:37:31.340
Whoa.

00:37:31.340 --> 00:37:34.610
All variables are local
unless indicated otherwise.

00:37:34.620 --> 00:37:36.790
Okay, so let's look at this.

00:37:36.800 --> 00:37:40.540
Any word or contiguous text not part of
the AppleScript language or terminology.

00:37:40.580 --> 00:37:42.320
So let's say, so X.

00:37:42.320 --> 00:37:43.980
X is usually a good variable.

00:37:43.980 --> 00:37:46.100
Here's one, page 12.

00:37:47.380 --> 00:37:49.000
This underscore project.

00:37:49.000 --> 00:37:51.040
The last strawberry.

00:37:52.780 --> 00:37:56.800
You can even use words separated
by spaces as long as you put

00:37:56.860 --> 00:38:00.810
the vertical pipes around them,
then they will be considered

00:38:00.810 --> 00:38:01.990
a variable as well.

00:38:02.080 --> 00:38:06.160
So, it's pretty flexible as to what you
want to call or name your variables.

00:38:06.440 --> 00:38:10.880
Everybody has their own style of
variable naming and their own procedures

00:38:10.880 --> 00:38:12.690
for doing it that make sense to them.

00:38:12.750 --> 00:38:13.870
Use whatever you want.

00:38:14.090 --> 00:38:16.440
AppleScript doesn't care.

00:38:16.950 --> 00:38:21.880
For example, now in this instance,
you'll see that it says set folder

00:38:21.880 --> 00:38:23.640
to path of the startup disk.

00:38:23.640 --> 00:38:27.700
Well, it's trying to use folder,
the word folder, as a variable.

00:38:27.700 --> 00:38:31.080
It can't do that because the word
folder is part of AppleScript.

00:38:31.080 --> 00:38:33.140
You can't use that as a variable.

00:38:50.650 --> 00:38:50.690
So what you can do instead is you set
a folder to path to the startup disk,

00:38:50.690 --> 00:38:50.690
and then what happens is the path
to the startup disk is now placed

00:38:50.690 --> 00:38:50.690
into the container called a folder.

00:38:50.690 --> 00:38:50.690
The verb set is used to
instantiate that variable.

00:38:50.760 --> 00:38:52.300
Here's another example.

00:38:52.350 --> 00:38:55.470
Tell application iTunes,
"Set track to the first track "of

00:38:55.470 --> 00:39:00.540
the front library playlist." Well,
the first track there can't be used

00:39:00.540 --> 00:39:05.720
as a variable name because track
is part of the iTunes dictionary,

00:39:05.720 --> 00:39:08.400
and it goes, mm-mm, does not compute.

00:39:08.490 --> 00:39:10.960
So what you wanna do instead
is do something like this,

00:39:10.980 --> 00:39:13.740
"Set this track to the first
track "of the front library

00:39:13.850 --> 00:39:16.320
playlist." If you run it,
you get back some reference

00:39:16.320 --> 00:39:18.470
that looks like this.

00:39:19.000 --> 00:41:32.600
[Transcript missing]

00:41:33.940 --> 00:41:36.080
Okay,
that's the basic idea behind variables.

00:41:36.280 --> 00:41:40.140
Let's look at item references,
or how you refer to AppleScript objects.

00:41:40.200 --> 00:41:43.100
This is the one thing you must know.

00:41:43.160 --> 00:41:47.700
Scriptable objects are referred
to by their position in their

00:41:47.700 --> 00:41:50.590
object hierarchy or where they
are in their chain of command.

00:41:50.600 --> 00:41:55.350
In order to identify a
scriptable object to AppleScript,

00:41:55.430 --> 00:41:57.930
you have to say it in
one of those manners.

00:41:57.940 --> 00:42:02.690
You have to identify it as being
where it is in its chain of command.

00:42:03.060 --> 00:42:04.770
For example,

00:42:07.630 --> 00:42:08.540
Nested references.

00:42:08.570 --> 00:42:10.890
There are different kinds of references.

00:42:10.970 --> 00:42:13.600
There's nested references,
path references, alias references,

00:42:13.600 --> 00:42:20.100
Unix references, and file URLs that
we're going to look at.

00:42:20.140 --> 00:42:25.100
I'm going to focus a lot on the
finder and dealing with files,

00:42:25.100 --> 00:42:27.550
because that's a common thing
that programmers have a hard

00:42:27.550 --> 00:42:31.390
time dealing with AppleScript is,
"Okay, I've done everything I can to

00:42:31.400 --> 00:42:32.980
move this file from here to there.

00:42:33.190 --> 00:42:34.100
It won't do it.

00:42:34.100 --> 00:42:38.080
What am I doing wrong?" Although the
same principles that we're going

00:42:38.090 --> 00:42:41.250
to see here pertain to scriptable
objects within other applications like

00:42:41.250 --> 00:42:44.480
iPhone or iTunes or QuickTime Player,
we're going to focus a little bit

00:42:44.480 --> 00:42:49.100
on the finder so that you get some
hints about how to deal with files.

00:42:49.100 --> 00:42:51.080
So let's look at a nested reference.

00:42:51.170 --> 00:42:55.570
Nested references are described
in items positioned in its object

00:42:55.670 --> 00:43:00.030
hierarchy from the bottom of the
chain all the way up to the top,

00:43:00.100 --> 00:43:05.100
and they use the possessive term
"of" to identify containment

00:43:05.100 --> 00:43:05.100
within that hierarchy.

00:43:05.100 --> 00:43:07.130
in that hierarchy.

00:43:07.360 --> 00:43:10.910
Nested references are the default
reference format returned by scriptable

00:43:10.910 --> 00:43:14.360
applications such as the Finder,
System Events, or iTunes,

00:43:14.360 --> 00:43:15.900
or Soundtrack Pro.

00:43:15.900 --> 00:43:21.700
And they can also be used for other
applications besides files as well.

00:43:21.700 --> 00:43:25.470
For example, folder document,
a folder username,

00:43:25.550 --> 00:43:27.970
a folder users of startup disk.

00:43:28.920 --> 00:43:32.620
You'll notice that it uses the
possessive of to indicate that it

00:43:32.700 --> 00:43:36.780
belongs to folder username that
indicates the possessive of to indicate

00:43:36.780 --> 00:43:40.700
that it's part of folder users,
that it also belongs to the startup disk.

00:43:41.150 --> 00:43:43.480
Document file, cars,
PDF of folder documents,

00:43:43.560 --> 00:43:47.050
a folder username of the folder
users of the startup disk.

00:43:48.560 --> 00:43:51.600
Frame 13 of
Track Video Overlay of Movie 2.

00:43:51.750 --> 00:43:53.000
That's a nested reference.

00:43:53.000 --> 00:43:57.350
Text Box 4 of Page 2 of
Spread 13 of Document 1.

00:43:57.360 --> 00:43:59.620
It's kind of like a mailing address,
right?

00:43:59.620 --> 00:44:04.500
Sal Soghoian, 123 Elm Street, Anywhere,
USA.

00:44:04.500 --> 00:44:08.130
That's how you're
identified by your location,

00:44:08.150 --> 00:44:12.520
where you are in your object hierarchy,
where you are in your chain of command.

00:44:13.250 --> 00:44:17.200
Transition 3 of Video Track 2
of Program 1 of Project TV.

00:44:17.200 --> 00:44:21.320
So these kind of nested references
are the default format that

00:44:21.320 --> 00:44:25.760
AppleScript applications return
when you request something.

00:44:25.760 --> 00:44:29.250
When you're querying an application
to find a particular object,

00:44:29.250 --> 00:44:31.820
you always get back
these nested references.

00:44:31.860 --> 00:44:37.460
And they all use the possessive of
as a way to indicate containment.

00:44:39.670 --> 00:44:40.870
Let's look at path references.

00:44:40.920 --> 00:44:43.100
Now we're going to start
dealing with files.

00:44:43.190 --> 00:44:45.840
So those are nested references
that the Finder uses,

00:44:45.840 --> 00:44:49.150
that the System Events app uses,
and that other scriptable

00:44:49.150 --> 00:44:50.090
applications use.

00:44:50.210 --> 00:44:53.100
But let's look at some of the
other kind of file references.

00:44:53.100 --> 00:44:55.920
And this is some of the stuff
that really gets people that

00:44:55.920 --> 00:44:57.880
aren't familiar with AppleScript.

00:44:57.960 --> 00:45:00.600
And we're working toward changing
this to make it universal,

00:45:00.600 --> 00:45:04.430
but for right now,
this is your new nightmare.

00:45:05.830 --> 00:45:11.800
Path references are used to
pass references to a disk item

00:45:11.800 --> 00:45:13.260
to the finder system events.

00:45:13.280 --> 00:45:17.470
They are text strings read left
to right that contain the names of

00:45:17.470 --> 00:45:21.910
each item in the hierarchical chain,
and they're delineated by colons.

00:45:21.920 --> 00:45:24.770
They are preceded with
a class identifier,

00:45:24.770 --> 00:45:28.880
something like disk, folder, document,
file, or item.

00:45:28.880 --> 00:45:33.260
And path references to folders
and disks always end with a colon.

00:45:33.260 --> 00:45:35.090
Here are some examples.

00:45:35.820 --> 00:45:39.120
A disk Macintosh HD colon.

00:45:39.200 --> 00:45:44.700
So that's a path reference to a disk
that's mounted on your computer.

00:45:44.760 --> 00:45:50.590
Folder Macintosh HD colon users
colon username colon documents colon.

00:45:50.640 --> 00:45:55.380
So there's the path,
the HFS path to that particular folder,

00:45:55.550 --> 00:45:58.670
and it's preceded with the
class identifier folder.

00:45:58.700 --> 00:46:01.920
Item is a generic way
to talk about anything.

00:46:01.920 --> 00:46:06.460
It could be a file or a folder or a font,
a suitcase or anything.

00:46:06.460 --> 00:46:08.500
There again is a path.

00:46:08.960 --> 00:46:12.540
Document file Macintosh
HD user Sal document,

00:46:12.540 --> 00:46:13.660
same kind of idea.

00:46:13.660 --> 00:46:16.560
Item is another generic
way to get to something.

00:46:16.560 --> 00:46:18.340
So that's all within the finder.

00:46:18.380 --> 00:46:24.470
You can use the system events app, too,
to talk, to refer to objects using these

00:46:24.470 --> 00:46:26.660
kind of path things as well.

00:46:26.660 --> 00:46:30.070
The only difference is that
the system events app uses the

00:46:30.070 --> 00:46:33.990
class identifier file instead of
document file that the finder uses.

00:46:34.040 --> 00:46:35.260
Now, you can construct that.

00:46:35.260 --> 00:46:38.830
You can construct these things yourself
and then pass them to the app and place

00:46:38.870 --> 00:46:41.950
the proper class thing in front of it,
and the app will respond

00:46:41.960 --> 00:46:42.870
and work with it.

00:46:42.880 --> 00:46:44.870
That's a path reference.

00:46:44.880 --> 00:46:48.720
Alias references, they're universal.

00:46:48.940 --> 00:46:52.880
All applications use alias
references and will accept them.

00:46:52.980 --> 00:46:55.820
And they're very similar
to a path reference.

00:46:55.910 --> 00:46:59.880
Only difference is that they are
preceded with the term alias,

00:46:59.880 --> 00:47:02.880
and they're also referred to
items that are actually there.

00:47:02.880 --> 00:47:04.880
So if you have an alias
reference to a font,

00:47:04.880 --> 00:47:06.880
and you have an alias reference
to a file on your desktop,

00:47:06.880 --> 00:47:10.880
and it's in your script,
you close the script,

00:47:10.880 --> 00:47:11.880
move the thing on the desktop
to a different folder,

00:47:11.880 --> 00:47:16.150
open your script back up, it will now be,
the alias reference will

00:47:16.190 --> 00:47:17.880
now be in the new location.

00:47:17.880 --> 00:47:20.870
So when you use an alias reference,
it has to be to something

00:47:20.870 --> 00:47:23.880
that's not theoretical,
but actually on disk.

00:47:23.880 --> 00:47:28.050
If you're using something theoretical,
then you can use a path and pass

00:47:28.090 --> 00:47:29.280
that to the application instead.

00:47:29.760 --> 00:47:33.440
can be used within or
without tell blocks.

00:47:33.750 --> 00:47:36.630
Alias Macintosh HD.

00:47:36.760 --> 00:47:41.270
Here is another one to a file.

00:47:41.300 --> 00:47:43.600
POSIX references.

00:47:43.600 --> 00:47:46.800
They are based upon the
Unispace architecture.

00:47:46.800 --> 00:47:49.960
They are not usually supported
by scriptable applications.

00:47:49.960 --> 00:47:52.450
There are a couple of scriptable
applications that will accept

00:47:52.600 --> 00:47:56.690
them with the open command,
but generally you are better

00:47:56.690 --> 00:48:08.950
off not using those and instead
coercing them into alias.

00:48:10.110 --> 00:48:10.110
Let's look at some
examples of a POSIX path.

00:48:10.820 --> 00:48:12.420
See, that's a typical thing.

00:48:12.420 --> 00:48:14.240
And there's a quoted form, naturally,
on the end.

00:48:14.300 --> 00:48:18.870
Now, POSIX references,
when you want to convert them

00:48:18.870 --> 00:48:22.440
from a POSIX reference to an alias
that you can use with AppleScript,

00:48:22.440 --> 00:48:25.000
there's a couple ways that you
can do that with AppleScript.

00:48:25.000 --> 00:48:28.680
We do provide some light
out of the darkness.

00:48:28.700 --> 00:48:32.860
There's this thing called
POSIXPATH in POSIXFile,

00:48:32.860 --> 00:48:33.800
and it looks like this.

00:48:33.800 --> 00:48:37.520
So the POSIXPATH,
if you want to derive the

00:48:37.540 --> 00:48:40.730
POSIXPATH of an alias,
of an AppleScript alias reference,

00:48:40.740 --> 00:48:45.620
you just put POSIXPATH of in front of it,
and you'll notice that you returned

00:48:45.620 --> 00:48:50.750
the POSIXPATH to that particular
file or folder or whatever it is.

00:48:52.120 --> 00:48:54.700
If you want the quoted form,
instead of having to use

00:48:54.700 --> 00:48:58.160
concatenation with a bunch of strings,
just ask for the quoted

00:48:58.160 --> 00:49:02.470
form of the POSIX path of,
and it will derive the POSIX path

00:49:02.770 --> 00:49:04.890
for you and place it there.

00:49:05.060 --> 00:49:08.350
Coercing POSIX Paths If you
want to go the other way and

00:49:08.350 --> 00:49:12.220
change a POSIX path to a file,
then you use this as POSIX file,

00:49:12.220 --> 00:49:16.810
and now you'll see it says File Macintosh
HD User Sal Documents that now you

00:49:16.810 --> 00:49:19.680
can pass to a scriptable application.

00:49:19.680 --> 00:49:23.210
If you want to coerce that to an alias,
do a double coercion

00:49:23.490 --> 00:49:27.260
as POSIX file as alias,
and you've now gone from a POSIX path to

00:49:27.380 --> 00:49:30.530
an alias reference that AppleScript uses.

00:49:31.330 --> 00:49:32.400
Those are your lifesavers.

00:49:32.400 --> 00:49:34.620
You can build little
subroutines with those,

00:49:34.620 --> 00:49:37.350
and it becomes just an easy
thing to do back and forth.

00:49:37.360 --> 00:49:39.630
Eventually,
we hope to make it so that you won't

00:49:39.630 --> 00:49:42.500
have to worry about any of this stuff,
but for right now,

00:49:42.580 --> 00:49:45.430
I want to give you guys the
truth and the good stuff.

00:49:47.130 --> 00:49:50.870
File URLs are really interesting.

00:49:51.100 --> 00:49:53.840
I never thought that anybody did
with them until I discovered guys

00:49:53.840 --> 00:49:57.870
writing scripts that would generate
HTML and actually control their

00:49:57.870 --> 00:50:00.100
drives based upon file references.

00:50:00.100 --> 00:50:03.200
If you ask the Finder and
the System Events apps for

00:50:03.200 --> 00:50:06.100
a file URL on something,
it looks like this.

00:50:06.100 --> 00:50:10.020
Tell Application Finder to get the
URL of folder documents of home,

00:50:10.320 --> 00:50:14.070
you actually get the real URL,
and it's also encoded

00:50:14.220 --> 00:50:16.080
for you automatically,
too.

00:50:16.080 --> 00:50:20.030
So then you can then take that and put
it into any HTML that you're generating

00:50:20.030 --> 00:50:22.160
on the fly as well and use it that way.

00:50:22.160 --> 00:50:25.880
But they're not usually
used with applications.

00:50:26.180 --> 00:50:27.960
So when you want to
coerce reference types,

00:50:27.960 --> 00:50:29.880
you can coerce these
following ones together.

00:50:30.130 --> 00:50:33.970
You can coerce a nested reference to an
alias reference by just saying its alias,

00:50:34.170 --> 00:50:37.630
path reference to an alias reference,
POSIX path to POSIX file

00:50:37.820 --> 00:50:41.700
to an alias reference,
alias reference to a POSIX path.

00:50:41.710 --> 00:50:43.600
All of those are possible.

00:50:43.600 --> 00:50:45.600
Now here's an example.

00:50:45.760 --> 00:50:49.300
Folder applications of the startup
disk is a nested reference.

00:50:49.300 --> 00:50:52.930
I'm coercing it to an alias,
and now it becomes an alias.

00:50:53.180 --> 00:50:57.040
Folder Macintosh HD:applications:
is a path reference.

00:50:57.100 --> 00:51:01.810
I'm coercing it to an alias,
and now it becomes an alias reference.

00:51:02.400 --> 00:51:06.060
POSIX path of alias Macintosh HD.

00:51:06.080 --> 00:51:09.910
Now I get the POSIX path back and then

00:51:10.000 --> 00:54:23.800
[Transcript missing]

00:54:24.230 --> 00:54:27.060
You can get a range of
items by using index.

00:54:27.060 --> 00:54:29.760
You can say items 2 through 5.

00:54:30.150 --> 00:54:33.820
You can say get items 1 through minus 1,
which means the same

00:54:33.950 --> 00:54:37.790
thing as saying this,
get every item of the startup disk.

00:54:38.500 --> 00:54:56.510
And you can also,
since AppleScript is very verbose,

00:54:56.510 --> 00:54:56.510
you can use words like first, second,
third, fourth.

00:54:56.510 --> 00:54:56.510
You can even use first there,
get the first item of home.

00:54:56.510 --> 00:54:56.510
You can use these kind of things, first,
23rd, 16th, 32nd.

00:54:56.510 --> 00:54:56.510
The AppleScript language will
actually accept those as well.

00:54:57.290 --> 00:55:00.990
Items can be referenced by
their position relative to other

00:55:00.990 --> 00:55:02.960
items in that list of items.

00:55:02.960 --> 00:55:07.390
You can use terms like front, first,
back, last, middle.

00:55:07.490 --> 00:55:11.360
Get the last item of the startup disk,
the middle track of the front library.

00:55:11.480 --> 00:55:18.890
You can use the words after or before.

00:55:18.890 --> 00:55:18.890
The item before the last item,
the item after the middle item.

00:55:19.300 --> 00:55:23.620
You can even do things randomly by
using the word "some" and it will return

00:55:23.620 --> 00:55:26.330
some random item of the startup disk.

00:55:26.610 --> 00:55:29.400
The second way to find things,
and this is really powerful,

00:55:29.400 --> 00:55:32.900
this is where AppleScript cooks,
is by property.

00:55:32.930 --> 00:55:37.830
For example, I could say,
"Everybody in the middle section

00:55:37.830 --> 00:55:39.800
who's wearing a red shirt."

00:55:40.160 --> 00:55:43.860
I just located a certain subset
of people based upon a property,

00:55:43.940 --> 00:55:45.680
the color of their shirt.

00:55:45.840 --> 00:55:48.300
Well,
AppleScript does that very well too,

00:55:48.330 --> 00:55:51.510
because every scriptable item on
disk belonging to an application

00:55:51.510 --> 00:55:54.790
usually has something like a name,
a kind, a size,

00:55:54.790 --> 00:55:57.300
a creation modification date.

00:55:57.300 --> 00:56:00.470
And you can use those
properties to locate items.

00:56:00.480 --> 00:56:03.790
The first document file whose
name contains Smith Project.

00:56:03.840 --> 00:56:08.860
The first folder whose size
is greater than 500,000.

00:56:08.860 --> 00:56:11.810
Every document file
whose file type is JPEG.

00:56:11.940 --> 00:56:15.620
Every document file whose
name extension is PDF.

00:56:15.620 --> 00:56:20.290
So you can really use AppleScript to
locate the subset of things

00:56:20.410 --> 00:56:22.460
that you want to manipulate.

00:56:22.460 --> 00:56:24.730
And you construct queries,
and they're constructed

00:56:24.730 --> 00:56:25.700
by combining this.

00:56:25.700 --> 00:56:26.740
Oh, I'm going to love this.

00:56:26.740 --> 00:56:27.740
My favorite part.

00:56:27.740 --> 00:56:30.380
A positional indicator,
target object type, target container,

00:56:30.380 --> 00:56:33.200
object specifier, target property,
comparison operator.

00:56:33.360 --> 00:56:35.120
Yeah, target property, vague.

00:56:35.280 --> 00:56:36.120
Okay.

00:56:36.120 --> 00:56:39.220
I just wanted to say those things
because we never think about them,

00:56:39.220 --> 00:56:40.820
but that's what they are anyway.

00:56:40.820 --> 00:56:41.820
Here's a query.

00:56:41.820 --> 00:56:44.980
The first document file of
home whose name contains Smith.

00:56:45.100 --> 00:56:47.900
Well, the positional indicator is first.

00:56:47.900 --> 00:56:52.600
That could be last, the second,
the third, every, whatever you want.

00:56:52.600 --> 00:56:55.820
The target object type in
this case is a document file.

00:56:55.820 --> 00:56:57.240
You could say folder.

00:56:57.240 --> 00:57:00.450
You could say whatever
object you're looking for,

00:57:00.450 --> 00:57:02.700
track, you know, movie.

00:57:02.700 --> 00:57:05.660
This is your target container
that you're looking to search.

00:57:05.960 --> 00:57:07.500
That could be an application.

00:57:07.500 --> 00:57:09.180
That could be a directory.

00:57:09.200 --> 00:57:11.440
Object specifier, whose.

00:57:11.470 --> 00:57:13.590
You could also use where on occasion.

00:57:13.740 --> 00:57:14.780
Target property.

00:57:14.780 --> 00:57:19.120
You're looking for the name property and
the comparison you're using contains.

00:57:19.120 --> 00:57:23.700
You could say does not contain,
is not in, is part of, is not in,

00:57:23.760 --> 00:57:24.690
is part of.

00:57:24.770 --> 00:57:25.660
No, I don't know.

00:57:25.740 --> 00:57:27.230
You can't say part of.

00:57:27.280 --> 00:57:30.700
Does not contain, doesn't contain,
is greater than or equal to,

00:57:30.700 --> 00:57:31.440
is less than.

00:57:31.440 --> 00:57:34.600
All of the comparison
operators you can use.

00:57:34.600 --> 00:57:36.940
And then there you can look,
change the value.

00:57:36.940 --> 00:57:37.340
So if we wanted to do that, we could say,
well, I'm going to use this.

00:57:37.340 --> 00:57:37.570
I'm going to use this.

00:57:37.580 --> 00:57:37.800
I'm going to use this.

00:57:37.800 --> 00:57:38.140
And then I can change the value.

00:57:38.140 --> 00:57:42.940
And then, you can change the value.

00:57:42.940 --> 00:57:44.560
And then you can change the value.

00:57:44.560 --> 00:57:46.180
And then you can change the value.

00:57:46.180 --> 00:57:47.480
And then you can change the value.

00:57:47.480 --> 00:57:49.280
And then you can change
the value of the query.

00:57:49.280 --> 00:57:50.490
And then you can change
the value of the query.

00:57:50.490 --> 00:57:51.840
And then you can change
the value of the query.

00:57:51.850 --> 00:57:54.130
To have some other thing
like Smith project,

00:57:54.130 --> 00:57:55.540
AC stats, things like that.

00:57:55.540 --> 00:57:59.670
Now, if you want to search every folder
within a folder using the finder,

00:57:59.670 --> 00:58:03.230
you just say document file,
the entire contents of folder

00:58:03.310 --> 00:58:07.110
documents of home whose
name contains Smith project.

00:58:07.180 --> 00:58:11.810
And that does all of your
iterations and recursive routine

00:58:11.810 --> 00:58:14.320
for you all in one statement.

00:58:14.320 --> 00:58:17.680
So this is an example of how
Apple script can find things.

00:58:17.710 --> 00:58:18.600
Here's another one.

00:58:18.600 --> 00:58:22.180
You can combine your searches
by using the word and.

00:58:22.180 --> 00:58:25.190
Application finder to get the first
item in the startup disk whose name

00:58:25.190 --> 00:58:27.560
begins with S and name ends with folder.

00:58:27.560 --> 00:58:29.060
It returns something.

00:58:29.060 --> 00:58:30.570
Here's another case of and.

00:58:30.570 --> 00:58:33.540
Every document file's name
extension is in this list and

00:58:33.540 --> 00:58:37.020
name contains Smith project.

00:58:37.020 --> 00:58:39.450
And you can use both of them together.

00:58:39.540 --> 00:58:51.420
So you can say every document file of
folder pictures of home whose file type

00:58:51.420 --> 00:58:56.260
is JPEG or name extension is in this
list and name contains Smith project.

00:58:56.260 --> 00:59:00.370
So using these kind of
queries with Apple script,

00:59:00.430 --> 00:59:06.750
you can really locate things to work
with very easily in a single line.

00:59:06.860 --> 00:59:07.860
Instead of iterating,
you can really locate them all at once.

00:59:07.860 --> 00:59:10.510
You can do four repeat
loops and stuff like that.

00:59:10.510 --> 00:59:14.820
You just use one line of Apple script to
find the objects that you're looking for.

00:59:14.820 --> 00:59:16.380
Now we're going to
look at something else.

00:59:16.380 --> 00:59:17.740
Special folders.

00:59:17.800 --> 00:59:21.670
A common thing that programmers
often have a problem with is

00:59:21.920 --> 00:59:24.950
once they understand how to find
things and how to use these paths,

00:59:25.110 --> 00:59:27.260
they come up against the generic problem.

00:59:27.290 --> 00:59:31.200
You want to write a script that works
on someone else's machine and you want

00:59:31.200 --> 00:59:33.810
to get to one of the designated folders.

00:59:34.040 --> 00:59:37.620
But you don't know how to do it
because you're trying to construct

00:59:37.630 --> 00:59:41.980
paths by piecing things together,
getting the user name and inserting that.

00:59:41.980 --> 00:59:43.920
You don't need to.

00:59:44.050 --> 00:59:48.680
Designated folders on the computer
are part of Apple script's repertoire.

00:59:48.680 --> 00:59:51.650
Now the finder has four locations
that it knows about itself,

00:59:51.790 --> 00:59:55.380
the startup disk, home,
desktop and trash.

00:59:55.380 --> 00:59:58.640
So when you say desktop in a script,
it doesn't make any difference

00:59:58.690 --> 01:00:02.860
how the user has named their drive
or any of their other structures.

01:00:02.860 --> 01:00:05.720
It will find that folder for you
and return you the path that's

01:00:05.720 --> 01:00:06.540
appropriate to the machine.

01:00:06.540 --> 01:00:11.440
Therefore, your script is generic and you
can use it the way that you want.

01:00:11.440 --> 01:00:13.000
So here's an example.

01:00:13.000 --> 01:00:17.610
Every item in the desktop,
everything of home.

01:00:17.680 --> 01:00:19.980
And you can tell it to empty the trash.

01:00:20.010 --> 01:00:25.500
There's also a path to command and
it has four domains that you can use.

01:00:25.500 --> 01:00:28.740
So if I want to say path to the
library folder from the user

01:00:28.750 --> 01:00:32.590
domain will give me this reference,
this alias reference

01:00:32.590 --> 01:00:33.980
to the user's library.

01:00:33.980 --> 01:00:36.380
Here's the local library at top level.

01:00:36.380 --> 01:00:40.980
Here's the system library and
there's the network library.

01:00:40.980 --> 01:00:46.000
So the path to command has a lot of
the designated folders of the OS built

01:00:46.000 --> 01:00:48.640
into it and they're written in English.

01:00:48.640 --> 01:00:51.580
So they used to use these
codes here on the left.

01:00:51.580 --> 01:00:54.240
But now since Panther,
we now have implemented

01:00:54.240 --> 01:00:55.170
the words in there.

01:00:55.240 --> 01:00:56.900
Thank you, Cheryl, very much.

01:00:56.900 --> 01:01:01.440
So now it just becomes easy to
say path to any of these folders

01:01:01.440 --> 01:01:06.220
and it will get you to the path
to the local folder that you need.

01:01:06.220 --> 01:01:10.010
And then you can work your way down
to where you're trying to get to.

01:01:10.040 --> 01:01:11.610
And so how do you do that?

01:01:11.660 --> 01:01:12.260
Well, here's an example.

01:01:12.260 --> 01:01:16.410
You say set the parent folder to the path
to the document folder as Unicode text.

01:01:16.490 --> 01:01:18.840
You're breaking it down into a path.

01:01:18.840 --> 01:01:22.270
Then you say set the item
path to the parent folder

01:01:22.350 --> 01:01:25.080
plus this name of this file.

01:01:25.080 --> 01:01:26.980
And that joins them together.

01:01:26.980 --> 01:01:30.800
And then you say set this item
to the item path as alias.

01:01:30.800 --> 01:01:32.680
And then that turns it as an alias.

01:01:32.700 --> 01:01:36.060
But what you really want to do is do all
of that in one clean and waxed motion.

01:01:36.060 --> 01:01:37.990
And then you're going to see
that the item path is going

01:01:38.210 --> 01:01:40.840
to be in one motion like this,
using nice parens.

01:01:40.840 --> 01:01:41.920
Notice the parens.

01:01:41.920 --> 01:01:45.810
This item to the path to the document
folder as Unicode text gets done first.

01:01:45.820 --> 01:01:49.110
Then it gets concatenated and then
it gets coerced into an alias,

01:01:49.200 --> 01:01:50.130
all in one motion.

01:01:50.140 --> 01:01:53.630
So that's using special folders to
locate the particular things that

01:01:53.630 --> 01:01:56.930
you're looking for and then using
those to get to where you want.

01:01:56.930 --> 01:02:00.470
The system events app uses those
terms documents folders natively.

01:02:00.470 --> 01:02:03.480
So you can just use those within
a system event app as well.

01:02:03.480 --> 01:02:04.200
Info tools.

01:02:04.200 --> 01:02:07.320
Let's look at a couple of a
couple additional tools here.

01:02:07.340 --> 01:02:11.180
You also have some other tools,
the list disk, list folder,

01:02:11.180 --> 01:02:15.260
info for command and system info record
that give you information about files.

01:02:15.260 --> 01:02:17.230
You'll live and die on these commands.

01:02:17.230 --> 01:02:18.710
They're very useful for you.

01:02:18.710 --> 01:02:20.540
List disk is a very simple command.

01:02:20.540 --> 01:02:23.780
You point it, you say list disks,
and it gives you a list of the disks

01:02:23.780 --> 01:02:25.680
that are mounted on your computer.

01:02:25.680 --> 01:02:28.730
If you say list folder and you
point it to a particular folder,

01:02:28.980 --> 01:02:31.380
you say without invisibles,
it gives you a list of all the

01:02:31.650 --> 01:02:33.080
names of the items in the folder.

01:02:33.080 --> 01:02:38.630
If you want the invisibles,
then you get the dot names as well.

01:02:40.480 --> 01:02:46.080
The info for is a really powerful
command that descriptors use a lot.

01:02:46.430 --> 01:02:49.780
Info for, you give it the path to a
particular file or folder,

01:02:49.780 --> 01:02:52.480
and it returns a record
that looks like this.

01:02:52.810 --> 01:02:56.440
Again,
a record contains the key value pairs.

01:02:56.440 --> 01:03:00.580
So here are some of the keys that
pertain to that particular file.

01:03:00.580 --> 01:03:04.030
The record that you get back changes
depending upon what kind of item

01:03:04.030 --> 01:03:07.290
you're asking information for,
and then it matches the

01:03:07.370 --> 01:03:09.140
values that go with that.

01:03:09.180 --> 01:03:12.150
So you can get very important
things like the version,

01:03:12.150 --> 01:03:14.930
its busy status over here
to see if the file's open,

01:03:14.930 --> 01:03:19.290
its file type, its extension,
is it hidden, its icon position,

01:03:19.300 --> 01:03:21.900
the creation date,
those kind of information you can get

01:03:21.940 --> 01:03:23.880
very quickly with a single command.

01:03:23.880 --> 01:03:26.380
So you get all the information
about a file that you need

01:03:26.380 --> 01:03:29.220
to know to start working with
it with the info for command.

01:03:29.220 --> 01:03:32.580
And then there's a new one
in Tiger called System Info,

01:03:32.870 --> 01:03:36.540
and System Info gives you the
basic information about the OS,

01:03:36.540 --> 01:03:38.960
including the Ethernet address.

01:03:39.180 --> 01:03:44.860
And the system version,
the home directory, the computer name,

01:03:44.880 --> 01:03:48.420
and the IP4 version address as well.

01:03:48.440 --> 01:03:50.840
Those are things that you
often want to use in scripts,

01:03:50.840 --> 01:03:52.950
and now you have a single
place to go to use them.

01:03:53.080 --> 01:03:57.240
So clean and wax is basically
what we just talked about earlier,

01:03:57.240 --> 01:04:02.130
was finding something and then putting
a verb before it to do something.

01:04:02.140 --> 01:04:07.300
Like delete every file of the startup
disk whose name contains Smith Project.

01:04:07.300 --> 01:04:09.160
Or move every file of the startup.

01:04:09.160 --> 01:04:11.470
Or move every file of the startup disk
whose name contains Smith Project to

01:04:11.470 --> 01:04:12.420
the folder named backup.

01:04:12.420 --> 01:04:15.780
It's where you do a find and
then place a verb before it.

01:04:15.940 --> 01:04:19.160
But that just works with a single item.

01:04:19.380 --> 01:04:24.010
Now we need to learn the conditionals
and the repeat structures and the error

01:04:24.260 --> 01:04:26.890
handlers that allow us to go beyond that.

01:04:27.200 --> 01:04:29.260
So conditional statement.

01:04:29.280 --> 01:04:30.940
Okay, so we have a dialogue here.

01:04:30.940 --> 01:04:33.200
Display dialogue,
your prize is behind the door.

01:04:33.200 --> 01:04:36.580
This is a command to bring up a
user interface that looks like this

01:04:36.580 --> 01:04:38.290
where the user has three buttons.

01:04:38.390 --> 01:04:41.160
When they click a button,
the result of that is returned

01:04:41.160 --> 01:04:43.940
as a record with a key value
of button return and a value of

01:04:44.140 --> 01:04:45.760
whatever button they pressed.

01:04:45.870 --> 01:04:50.520
So we're going to use this command here
to demonstrate how conditionals work.

01:04:51.620 --> 01:04:52.720
Okay, display dialog.

01:04:52.720 --> 01:04:55.360
If the button returned
to the result is A,

01:04:55.360 --> 01:04:56.970
then say no prize here.

01:04:56.980 --> 01:05:00.340
So here's our command,
and then this is our conditional.

01:05:00.340 --> 01:05:01.990
This is a conditional statement.

01:05:01.990 --> 01:05:04.540
It's a single-line conditional.

01:05:04.540 --> 01:05:07.770
Just one condition on a single line.

01:05:07.770 --> 01:05:10.780
It begins with the if,
and then it has the thing

01:05:10.780 --> 01:05:14.680
that's comparing if the button
returned is the result A.

01:05:14.920 --> 01:05:18.680
Then it has the verb, I mean,
then it has the word then,

01:05:18.680 --> 01:05:21.560
and then the action
to do based upon that.

01:05:21.560 --> 01:05:24.480
So that's a single-line conditional.

01:05:25.950 --> 01:05:33.600
then it has the word "then" and then
the action to do based upon that.

01:05:33.600 --> 01:05:36.720
So that's a single line conditional.

01:05:55.940 --> 01:05:58.540
So in the first comparison,
if the button return

01:05:58.540 --> 01:06:02.400
to the result is not B,
then you're going to do what that says.

01:06:02.400 --> 01:06:04.400
Otherwise, you have an else.

01:06:04.400 --> 01:06:05.500
This is a catch-all.

01:06:05.500 --> 01:06:06.720
It's not a specific.

01:06:06.720 --> 01:06:11.520
It's just whatever else goes
to this particular action here.

01:06:11.520 --> 01:06:16.440
In this case, we have it set up so that
B is the winning door and

01:06:16.460 --> 01:06:18.950
A and C are the losing ones.

01:06:19.410 --> 01:06:22.960
Now, if you want to do three,
then you can do something like this,

01:06:22.960 --> 01:06:25.780
where you have your command,
and then you have a statement

01:06:25.790 --> 01:06:29.390
where you're copying the value
of the button pressed into a

01:06:29.390 --> 01:06:31.630
variable called button pressed.

01:06:31.700 --> 01:06:33.160
Then you're comparing it.

01:06:33.360 --> 01:06:35.740
If it's A, then you say you want a pizza.

01:06:35.740 --> 01:06:38.000
Now you have something called else if.

01:06:38.100 --> 01:06:43.450
For each other condition that's
not the generic catch-all of else,

01:06:43.630 --> 01:06:44.990
you use else if.

01:06:45.060 --> 01:06:50.270
Else if the button pressed is B,
then you do this.

01:06:50.500 --> 01:07:11.400
[Transcript missing]

01:07:11.660 --> 01:07:12.710
Repeat loops.

01:07:12.720 --> 01:07:13.860
Let's take a look at these.

01:07:13.860 --> 01:07:16.160
Here's some of your basic
repeats in AppleScript.

01:07:16.640 --> 01:07:20.380
Repeat, if you begin a repeat,
you end a repeat.

01:07:20.380 --> 01:07:22.050
So it's always this in AppleScript.

01:07:22.060 --> 01:07:23.740
If you begin a tell, you end a tell.

01:07:23.740 --> 01:07:25.640
If you begin a if, you end a if.

01:07:25.720 --> 01:07:27.860
If you begin a repeat, you end a repeat.

01:07:27.860 --> 01:07:31.350
This is your most fundamental repeat,
and you give it a number of times,

01:07:31.350 --> 01:07:33.660
and then it does
whatever's inside of there.

01:07:34.080 --> 01:07:37.020
Here's an example of repeat while.

01:07:37.090 --> 01:07:39.360
Repeat while some condition is being met.

01:07:39.520 --> 01:07:41.520
It has your basic repeat structure.

01:07:41.520 --> 01:07:46.320
There's your conditional
while this number mod 2 is 0,

01:07:46.320 --> 01:07:47.840
and then it executes.

01:07:47.840 --> 01:07:51.830
You have repeat until,
the same kind of structure, a repeat,

01:07:51.830 --> 01:07:55.660
and then there's the one
until this number mod 2 is 0.

01:07:57.100 --> 01:10:50.500
[Transcript missing]

01:10:51.100 --> 01:10:53.000
Here's another example.

01:10:53.000 --> 01:10:55.930
Here we go, and this time I'm going
to just use a repeat,

01:10:56.030 --> 01:10:59.130
same kind of thing,
and I'm going to copy one of the items

01:10:59.130 --> 01:11:01.000
from the list and display it in a dialog.

01:11:01.000 --> 01:11:06.610
So when I run this, it runs four times,
each time displaying a different

01:11:06.620 --> 01:11:11.000
dialog as it goes from the
left to the right of the list.

01:11:11.010 --> 01:11:15.000
Now, you can also, say,
change your starting number.

01:11:15.000 --> 01:11:17.970
In this case, I'm starting from three to
the count of the friends list.

01:11:18.000 --> 01:11:21.860
So in that case, I get two dialogs,
right, because I'm starting from

01:11:21.980 --> 01:11:22.880
the third item in the list.

01:11:23.000 --> 01:11:27.000
I can go change the,
where I want to end my repeat.

01:11:27.000 --> 01:11:29.000
So in this case,
I'm getting three dialogs

01:11:29.000 --> 01:11:30.980
from the first to the third.

01:11:31.000 --> 01:11:32.850
See how this works?

01:11:33.000 --> 01:11:37.000
Now, in this case, here we go again,
I'm going by two.

01:11:37.000 --> 01:11:38.870
Notice the by two.

01:11:39.000 --> 01:11:43.000
So in this case,
it skips every other one in the list,

01:11:43.030 --> 01:11:45.990
and you can iterate every other
object in the list by adding

01:11:45.990 --> 01:11:48.000
the by two to your repeat.

01:11:48.000 --> 01:11:51.000
Now, if you want to go
backwards down your list,

01:11:51.000 --> 01:11:56.000
you go I from the count of the
friends list to one by minus one.

01:11:56.000 --> 01:12:01.000
And now we get Scarlett, Carl, Sue,
and then the Sal.

01:12:01.220 --> 01:12:06.080
You can also do the skip every other
one in reverse and get Scarlett

01:12:06.080 --> 01:12:11.000
and Sue by adding by minus two,
and that's your basic repeat structures.

01:12:11.000 --> 01:12:13.940
So you have your conditionals,
your basic repeats.

01:12:14.330 --> 01:12:16.690
Here's your error handlers.

01:12:17.210 --> 01:12:18.220
Fred as integer.

01:12:18.240 --> 01:12:20.700
If we try doing Fred as integer,
you'll get this.

01:12:20.700 --> 01:12:24.320
You get an error because you can't
coerce the word Fred into an integer,

01:12:24.320 --> 01:12:24.820
right?

01:12:24.820 --> 01:12:27.860
Well, if we want to protect
ourselves from that,

01:12:27.960 --> 01:12:32.080
we can do this thing called the
try statement or error handler.

01:12:32.080 --> 01:12:36.260
If you begin a try, you end a try,
just like anything else in AppleScript.

01:12:36.260 --> 01:12:39.940
You start, you end it,
and anything in between,

01:12:39.940 --> 01:12:42.870
if there's an error,
it just doesn't post the error

01:12:42.870 --> 01:12:44.930
and the script continues.

01:12:45.150 --> 01:12:45.920
It doesn't stop.

01:12:46.010 --> 01:12:47.020
It just continues.

01:12:47.040 --> 01:12:50.570
Now, if we want to do something
with that error handler,

01:12:50.660 --> 01:12:52.740
then we try something like this.

01:12:52.800 --> 01:12:54.390
Fred as integer.

01:12:54.400 --> 01:12:59.020
Now, you'll notice that we have the
try opening and closing here,

01:12:59.020 --> 01:13:01.630
and now we have this new thing
in the middle called onError.

01:13:01.640 --> 01:13:05.940
So, any script statements before that,
if one of those cause an error,

01:13:05.940 --> 01:13:10.360
it jumps down to where it says onError
and then executes whatever you have in

01:13:10.360 --> 01:13:12.860
between the onError and the end try.

01:13:13.180 --> 01:13:15.280
In this case,
we have a dialogue that will

01:13:15.390 --> 01:13:17.140
display saying there was a problem.

01:13:17.220 --> 01:13:21.390
Not too useful, but at least it lets the
user know something happened.

01:13:21.650 --> 01:13:25.700
We control the error, not the OS,
and when the user clicks

01:13:25.700 --> 01:13:28.580
the cancel button,
the script will stop.

01:13:28.790 --> 01:13:32.680
If we want to do something that
has a little bit more meaning,

01:13:32.910 --> 01:13:37.390
we can get the error message that's
returned from the system by placing

01:13:37.390 --> 01:13:44.020
a variable after the onError,
and then use that variable down there in

01:13:44.020 --> 01:13:49.660
our script so that now we get the error
message that was created by the system.

01:13:49.660 --> 01:13:52.060
In this case,
can't make Fred into an integer.

01:13:54.360 --> 01:13:55.860
So here's another example.

01:13:55.910 --> 01:14:00.310
You'll notice in this one,
we're starting off the script.

01:14:00.510 --> 01:14:03.930
It's going to ask the user
for a file that's a JPEG.

01:14:03.940 --> 01:14:08.970
Then it's going to use the image events
application to flip it horizontally.

01:14:09.340 --> 01:14:14.190
Now, in that open dialogue where you're
asking the user to find a file,

01:14:14.190 --> 01:14:18.100
if they click the cancel button,
you'll get this, right?

01:14:18.540 --> 01:14:22.500
It'll drop down because it's
throwing a -128 cancel error,

01:14:22.500 --> 01:14:23.600
and it will display this.

01:14:23.820 --> 01:14:25.390
Well, the user knows that they canceled.

01:14:25.630 --> 01:14:27.220
They don't need to see that again.

01:14:27.390 --> 01:14:29.750
So how do we take care of that situation?

01:14:29.980 --> 01:14:33.180
Well, we do it by...

01:14:34.300 --> 01:14:51.800
[Transcript missing]

01:14:52.090 --> 01:14:54.820
Subroutines and Handlers I'll
give you a quick one on this one.

01:14:54.900 --> 01:14:58.040
Here's some routines where
I'm using the save verb to say

01:14:58.040 --> 01:14:59.770
something using different voices.

01:14:59.910 --> 01:15:01.100
It's a pain to write that.

01:15:01.100 --> 01:15:03.980
We can turn it into a nice
little subroutine like this.

01:15:04.010 --> 01:15:05.980
This is the subroutine.

01:15:05.990 --> 01:15:07.420
It's at the bottom of your script.

01:15:07.420 --> 01:15:08.820
You usually put them there.

01:15:08.850 --> 01:15:12.540
You notice that it has a name, speak,
and it has pass parameters here

01:15:12.540 --> 01:15:14.510
that you used inside the subroutine.

01:15:14.630 --> 01:15:17.040
To call it,
you just call it from within your

01:15:17.040 --> 01:15:21.370
script by using the name of it
and passing in some parameters.

01:15:21.460 --> 01:15:23.700
So that will be your subroutine.

01:15:23.700 --> 01:15:27.180
Now, if you have the subroutine and
it's within a tell block from

01:15:27.180 --> 01:15:31.480
another application like this,
then you'll have to put the word my

01:15:31.510 --> 01:15:38.150
before the subroutine so that the script
knows that that subroutine belongs to the

01:15:38.150 --> 01:15:42.140
script and the finder won't look for it
in its own dictionary and throw an error.

01:15:42.310 --> 01:15:44.540
And that's how you use subroutines.

01:15:44.670 --> 01:15:45.960
You can use the open handler.

01:15:45.960 --> 01:15:47.500
It looks like this.

01:15:47.530 --> 01:15:49.260
I open these items.

01:15:49.280 --> 01:15:50.070
You get this.

01:15:50.160 --> 01:15:54.320
You save your,
your script as an application,

01:15:54.320 --> 01:15:58.000
and it becomes a droplet just
by having an open handler in it.

01:15:58.000 --> 01:16:02.280
When you have an open handler,
anything that's dragged onto it

01:16:02.280 --> 01:16:04.000
will be put into these items.

01:16:04.000 --> 01:16:07.390
They will be references to the
files or folders or whatever

01:16:07.390 --> 01:16:08.560
it is you drag onto them.

01:16:08.560 --> 01:16:09.920
They look like this.

01:16:09.920 --> 01:16:13.430
You'll look at it in the slides when
you get home later tonight and go,

01:16:13.430 --> 01:16:14.420
oh, okay, cool.

01:16:14.420 --> 01:16:19.180
This automatically searches them and
then does a process for you over here.

01:16:19.180 --> 01:16:20.690
This one other handler
I wanted to show you,

01:16:20.830 --> 01:16:22.260
this is the idle handler.

01:16:22.260 --> 01:16:26.660
Here's one that speaks the time every 15,
every 10 minutes,

01:16:26.660 --> 01:16:29.380
and you'll notice that it has
an idle handler like this.

01:16:29.380 --> 01:16:32.000
It has on idle and end idle,
and it has this,

01:16:32.020 --> 01:16:35.450
there's the things that happen,
and at the end, you return the value

01:16:35.510 --> 01:16:36.760
that you want to wait.

01:16:36.920 --> 01:16:41.180
You save this as a self-running
application and make sure that you

01:16:41.180 --> 01:16:45.170
have the stay open thing saved,
and now you have a script that

01:16:45.650 --> 01:16:48.870
runs in the background and
will do whatever you want.

01:16:48.960 --> 01:16:49.570
So that's just a little bit about, well,
I don't know,

01:16:49.600 --> 01:16:50.510
I don't know if you've ever heard of it,
but it's a little bit about, well,

01:16:50.510 --> 01:16:50.600
I don't know if you've ever heard of it,
but it's a little bit about,

01:16:50.700 --> 01:16:51.500
what AppleScript is.

01:16:51.500 --> 01:16:53.620
I was amazed that we actually
got through all that.

01:16:53.620 --> 01:16:54.920
That's pretty good.

01:16:54.960 --> 01:16:58.370
And we don't have any time for questions,
but what I want you to do is

01:16:58.420 --> 01:17:01.940
instead come to the hands-on lab,
come visit the AppleScript team,

01:17:01.980 --> 01:17:04.790
go to the AppleScript website,
and also download this

01:17:04.790 --> 01:17:06.640
presentation and use it.

01:17:06.680 --> 01:17:07.690
Thank you so much.

01:17:07.780 --> 01:17:09.290
Appreciate it.