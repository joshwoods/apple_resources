WEBVTT

00:00:10.250 --> 00:00:13.020
Good afternoon and thank you
for coming to session 209,

00:00:13.060 --> 00:00:15.110
which is
Color Image Management Explained.

00:00:15.110 --> 00:00:18.350
As you might have guessed from the title,
we'll be talking about the

00:00:18.460 --> 00:00:22.020
convergence of two critical aspects
of a graphical operating system,

00:00:22.210 --> 00:00:24.900
color management and
handling image file formats.

00:00:24.900 --> 00:00:28.880
These are very critical in applications,
especially on Mac OS X.

00:00:31.040 --> 00:00:33.430
In this discussion today,
we'll be talking about several areas.

00:00:33.430 --> 00:00:36.360
One is we'll be talking about the
general architectural overview of how

00:00:36.360 --> 00:00:40.540
image handling and color management
fit into the overall Mac OS X system.

00:00:40.540 --> 00:00:42.890
Then we'll go on to talk
about opening images,

00:00:42.890 --> 00:00:45.640
displaying images,
filtering them with core image,

00:00:45.640 --> 00:00:48.060
printing images, and lastly, saving them.

00:00:48.120 --> 00:00:51.200
In all of these cases,
we'll be talking about the two themes,

00:00:51.200 --> 00:00:53.890
which is how to handle image
file formats correctly and how to

00:00:54.040 --> 00:00:55.760
handle color management correctly.

00:00:57.880 --> 00:01:00.760
So first off, architectural overview.

00:01:00.760 --> 00:01:04.960
For over a decade,
color management has been

00:01:05.060 --> 00:01:07.640
provided using ColorSync,
which has been an industry standard

00:01:07.640 --> 00:01:12.140
for providing great color management
at the operating system level.

00:01:12.160 --> 00:01:14.720
ColorSync is built on
three key technologies.

00:01:14.720 --> 00:01:18.150
First are ICC profiles,
which are data files that

00:01:18.280 --> 00:01:22.780
represent how devices and
image files characterize color.

00:01:23.420 --> 00:01:25.820
The other foundation
is device integration,

00:01:25.820 --> 00:01:29.730
which is a system by which devices,
as they are discovered on the system,

00:01:29.730 --> 00:01:33.070
can register their modes and
color profiles with ColorSync.

00:01:33.160 --> 00:01:36.390
And lastly are CMMs,
which are the computational engines that

00:01:36.390 --> 00:01:40.010
perform the mathematical calculations
to convert from one profile to

00:01:40.010 --> 00:01:41.960
another profile's color space.

00:01:43.730 --> 00:01:46.610
ColorSync is built on the system
at a low level on top of Darwin,

00:01:46.610 --> 00:01:50.100
and above that we have a variety of
graphics frameworks on our system,

00:01:50.390 --> 00:01:53.730
providing a diverse set of
functionality from image capture,

00:01:53.730 --> 00:01:56.040
Quartz, QuickTime, and printing.

00:01:56.620 --> 00:02:02.220
All of these technologies make use of
color management provided by ColorSync.

00:02:03.130 --> 00:02:04.940
One thing to keep aware is
actually Quartz is made up

00:02:04.940 --> 00:02:06.070
of several key components.

00:02:06.140 --> 00:02:08.660
And today we'll be talking
about two in particular.

00:02:08.670 --> 00:02:12.660
One is core graphics in particular and
something new in Tiger called Image.io.

00:02:12.660 --> 00:02:20.150
And these two technologies together
provide a great way of handling image

00:02:20.150 --> 00:02:20.150
file formats and color management.

00:02:21.000 --> 00:02:22.840
One thing to keep aware is
actually Quartz is made up

00:02:22.840 --> 00:02:23.990
of several key components.

00:02:24.050 --> 00:02:26.520
And today we'll be talking
about two in particular.

00:02:26.580 --> 00:02:30.490
One is core graphics in particular and
something new in Tiger called Image.io.

00:02:30.590 --> 00:02:34.210
And these two technologies together
provide a great way of handling image

00:02:34.210 --> 00:02:34.210
file formats and color management.

00:02:34.300 --> 00:02:36.380
One thing to keep aware is
actually Quartz is made up

00:02:36.380 --> 00:02:37.420
of several key components.

00:02:37.420 --> 00:02:39.960
And today we'll be talking
about two in particular.

00:02:39.960 --> 00:02:44.060
One is core graphics in particular and
something new in Tiger called Image I.O.

00:02:44.120 --> 00:02:48.500
And these two technologies together
provide a great way of handling image

00:02:48.500 --> 00:02:50.240
file formats and color management.

00:03:04.320 --> 00:03:05.590
One thing to keep aware is
actually Quartz is made up

00:03:05.590 --> 00:03:05.590
of several key components.

00:03:05.860 --> 00:03:07.710
One thing to keep aware is
actually Quartz is made up

00:03:07.730 --> 00:03:08.850
of several key components.

00:03:08.950 --> 00:03:11.440
And today we'll be talking
about two in particular.

00:03:11.460 --> 00:03:15.460
One is core graphics in particular and
something new in Tiger called Image.io.

00:03:15.460 --> 00:03:28.850
And these two technologies together
provide a great way of handling image

00:03:28.850 --> 00:03:34.980
file formats and color management.

00:03:35.460 --> 00:03:37.340
One thing to keep aware is
actually Quartz is made up

00:03:37.340 --> 00:03:38.540
of several key components.

00:03:38.540 --> 00:03:41.020
And today we'll be talking
about two in particular.

00:03:41.060 --> 00:03:45.060
One is core graphics in particular and
something new in Tiger called Image.io.

00:03:45.370 --> 00:03:48.710
And these two technologies together
provide a great way of handling image

00:03:48.710 --> 00:03:48.710
file formats and color management.

00:03:49.220 --> 00:03:56.770
Lower down, we have the Quartz API layer,
which has CG color space, CG image,

00:03:56.770 --> 00:03:56.770
and CG color.

00:03:57.200 --> 00:04:00.520
And lastly,
we have the very low-level ColorSync API,

00:04:00.550 --> 00:04:05.610
which provides CM Profile, CM Bitmap,
and CM Color.

00:04:05.930 --> 00:04:09.230
All of these data types can often
be converted between each other,

00:04:09.260 --> 00:04:14.040
so you as an application can choose which
API best suits your application needs.

00:04:14.040 --> 00:04:19.440
But what we recommend these days for
developers is to use the Quartz layer.

00:04:19.440 --> 00:04:28.210
This provides the best compromise
between having access to a diverse

00:04:28.210 --> 00:04:29.770
set of options and also being
able to be easy to program to.

00:04:30.510 --> 00:04:33.700
All of these data types can often
be converted between each other,

00:04:33.790 --> 00:04:38.890
so you as an application can choose which
API best suits your application needs.

00:04:38.900 --> 00:04:44.400
But where we recommend these days for
developers is to use the Quartz layer.

00:04:44.400 --> 00:04:48.820
This provides the best compromise
between having access to

00:04:48.820 --> 00:04:52.330
a diverse set of options,
and also being able to

00:04:52.330 --> 00:04:54.280
be easy to program to.

00:05:00.400 --> 00:05:03.800
Some applications just want
stuff to look good by default,

00:05:03.930 --> 00:05:07.020
other applications may want
to have explicit controls to

00:05:07.020 --> 00:05:10.160
handle the cases when an image
doesn't have embedded profiles.

00:05:10.240 --> 00:05:13.540
So again, this is the key area we'll
be talking about today,

00:05:13.580 --> 00:05:17.640
which is image management and how
it intersects with the Quartz API.

00:05:17.640 --> 00:05:20.730
In particular,
we'll be talking about CG image

00:05:20.730 --> 00:05:23.640
and its companion framework,
Image.io.

00:05:24.320 --> 00:05:26.910
So as I mentioned before,
ImageIO is a new framework in

00:05:26.910 --> 00:05:31.740
Tiger which provides image reading
and writing functionality for core

00:05:31.810 --> 00:05:34.100
graphics and the rest of Quartz.

00:05:34.230 --> 00:05:36.260
It is capable of reading
many file formats,

00:05:36.380 --> 00:05:39.800
writing to file formats,
reading and writing metadata,

00:05:39.860 --> 00:05:43.010
incremental loading of images,
floating point image support,

00:05:43.150 --> 00:05:45.040
and automatic color management.

00:05:45.060 --> 00:05:49.120
And it does this with best-in-class
performance and also providing

00:05:49.130 --> 00:05:53.160
a consistent API for you to use
across a wide variety of formats.

00:05:53.950 --> 00:05:56.770
That brings up the question that
people always ask me first about

00:05:56.770 --> 00:05:58.750
Image.io is what formats are supported.

00:05:58.920 --> 00:06:00.910
Of course,
all the web standard formats are there,

00:06:01.010 --> 00:06:04.550
and we've spent a considerable
amount of effort to get great

00:06:04.550 --> 00:06:06.470
performance out of these file formats.

00:06:06.590 --> 00:06:11.490
We support TIFF, JPEG, JPEG 2000, PNG,
and GIF.

00:06:11.880 --> 00:06:15.820
There's also an emerging area of
floating-point image file formats,

00:06:15.820 --> 00:06:18.010
which we support natively in Image.io.

00:06:18.340 --> 00:06:26.730
These are formats such as OpenEXR and
TIFF variants such as LogLUV,

00:06:26.730 --> 00:06:26.730
IEEE Float, and PixR TIFFs.

00:06:27.430 --> 00:06:30.930
Another growing area in image
formats are camera RAW formats.

00:06:31.050 --> 00:06:33.900
Increasingly,
this is becoming the file format of

00:06:34.030 --> 00:06:37.280
choice by users and professionals
alike to get the best color

00:06:37.330 --> 00:06:39.200
images out of their cameras.

00:06:39.220 --> 00:06:46.150
Image.io today supports
RAW formats from Canon,

00:06:46.150 --> 00:06:46.150
Nikon, Minolta, Olympus, and Sony.

00:06:47.060 --> 00:06:49.470
And of course,
no image library would be complete

00:06:49.470 --> 00:06:53.430
without support for the wide variety of
other file formats that are needed for

00:06:53.430 --> 00:06:55.790
legacy and to support other niche needs.

00:06:56.450 --> 00:06:59.570
Another key functionality of
Image.io is the metadata it supports.

00:06:59.740 --> 00:07:04.240
There are several flavors of metadata,
such as XSIF for digital camera images,

00:07:04.370 --> 00:07:08.760
IPTC for publishing markets, SIF,
GPS metadata,

00:07:08.930 --> 00:07:14.060
and some vendor-specific maker notes.

00:07:14.060 --> 00:07:14.060
We support all that in Image.io.

00:07:14.250 --> 00:07:16.340
And of course,
this is the first release of Image.io,

00:07:16.350 --> 00:07:20.400
and it will be growing extensively
in the months and years to come.

00:07:21.760 --> 00:07:24.510
Before I talk more in detail
about the Image.io API,

00:07:24.540 --> 00:07:28.180
I just want to start with a foundation
of what actually is an image file.

00:07:28.180 --> 00:07:32.140
An image, in order to be defined,
needs to define its geometry, its height,

00:07:32.210 --> 00:07:33.650
its width, its pixel depth.

00:07:33.720 --> 00:07:37.370
It also needs to define a
color space and its pixel data.

00:07:37.370 --> 00:07:40.530
And optionally, it may also provide a
thumbnail and metadata.

00:07:40.530 --> 00:07:44.560
This metadata is increasingly becoming
a critical aspect of image processing.

00:07:44.560 --> 00:07:48.030
People are finding it very,
very useful through Spotlight

00:07:48.080 --> 00:07:51.550
to be able to find and locate
their images using metadata.

00:07:53.560 --> 00:07:56.540
Image files also sometimes support
more than one image per file.

00:07:56.550 --> 00:07:57.830
This is important to be aware of.

00:07:57.880 --> 00:08:01.300
Formats such as GIF and
TIFF support this.

00:08:02.050 --> 00:08:04.330
And given that there's more
than one image per file,

00:08:04.330 --> 00:08:07.190
there may be some attributes that
apply to a file as a whole rather

00:08:07.190 --> 00:08:16.190
than to any one particular image,
such as the file type of the file or

00:08:16.190 --> 00:08:17.480
file properties in the case of GIF,
such as whether it animates or not.

00:08:18.540 --> 00:08:21.610
So here's just a brief example of
some typical data that would be

00:08:21.610 --> 00:08:23.500
found in a multi-page TIFF file.

00:08:23.500 --> 00:08:26.170
I won't go into detail,
but you can get the idea of the

00:08:26.170 --> 00:08:29.760
different types of images that
can be represented in this model.

00:08:31.000 --> 00:08:34.910
So given this model of an image file,
how do we represent this in

00:08:34.910 --> 00:08:37.600
our API using Core Graphics?

00:08:37.740 --> 00:08:41.440
Well, the geometry, color space,
and pixel data are nicely encompassed

00:08:41.440 --> 00:08:45.800
via the existing Core Graphics data type,
the CG Image Ref.

00:08:45.940 --> 00:08:49.510
Also, the thumbnail, which is optional,
may also be represented

00:08:49.510 --> 00:08:50.610
as a CG Image Ref.

00:08:50.730 --> 00:08:59.780
The metadata is represented
as a hierarchical dictionary

00:08:59.780 --> 00:08:59.780
of key value pairs,
as a CFDictionary,

00:08:59.780 --> 00:08:59.780
and so is the file properties.

00:09:01.140 --> 00:09:04.030
So now that we have this foundation,
the first thing you need to do

00:09:04.190 --> 00:09:07.780
with images is to be able to
open them up in your application.

00:09:07.800 --> 00:09:10.360
So here are the general steps that
are involved with reading an image.

00:09:10.360 --> 00:09:12.620
The file may start on
disk or over a network,

00:09:12.680 --> 00:09:16.750
and we need to be able to determine the
correct file format and parse that file.

00:09:16.950 --> 00:09:20.780
Once we have parsed that file,
we can decompress the pixel data,

00:09:20.800 --> 00:09:23.800
extract the color space
definition from the file,

00:09:23.800 --> 00:09:26.320
and extract the metadata from that file.

00:09:26.320 --> 00:09:29.890
Then this information is passed on to
the application for use as they see fit.

00:09:30.590 --> 00:09:34.220
Here's how this works
using the ImageIO API.

00:09:34.220 --> 00:09:37.210
There's a new data type,
which is CGImageSource.

00:09:37.270 --> 00:09:41.360
You can create an image source by
calling CGImageSource create with URL.

00:09:41.360 --> 00:09:46.260
You may also want to create an image
source with a CFData or CGData provider.

00:09:47.140 --> 00:09:50.460
Once you have a CGImageSource,
you can get properties for the file,

00:09:50.460 --> 00:09:54.160
such as the UTI or type
identifier for that file format

00:09:54.280 --> 00:09:56.890
by calling CGImageSource get type.

00:09:56.930 --> 00:09:59.980
You can get the count for the
number of images within that file

00:09:59.980 --> 00:10:01.710
using CGImageSource get count.

00:10:01.760 --> 00:10:04.590
Then for each image that's
contained within that file,

00:10:04.720 --> 00:10:08.740
you can get the actual image by calling
CGImageSource create image at index.

00:10:08.810 --> 00:10:13.740
You can get the metadata by calling
CGImageSource copy properties at index.

00:10:13.800 --> 00:10:17.120
And you can get the thumbnail by calling
CGImageSource create image at index.

00:10:17.120 --> 00:10:21.610
Those are basically all the API you
need to know to use ImageIO.

00:10:21.720 --> 00:10:23.140
It's very simple.

00:10:23.140 --> 00:10:25.730
Here's an example of how
to use it in practice.

00:10:25.730 --> 00:10:29.350
Here's a function that given a
URL returns a CGImageRef and returns

00:10:29.350 --> 00:10:33.040
three critical pieces of metadata,
the DPI and the orientation.

00:10:33.040 --> 00:10:36.620
We'll talk more about that later,
but this is very important when

00:10:36.620 --> 00:10:38.910
displaying your image correctly.

00:10:38.920 --> 00:10:43.900
We create a CGImageSourceRef by
calling CGImageSource create with URL.

00:10:43.900 --> 00:10:47.120
Then we get the metadata and
properties for the first image.

00:10:47.120 --> 00:10:49.680
We can get the image in that
file by calling CGImageSource

00:10:49.760 --> 00:10:51.140
copy properties at index.

00:10:51.140 --> 00:10:55.780
Once we have that property dictionary,
we can get keys out of that,

00:10:55.780 --> 00:10:59.950
key values out of that by calling
CFDictionary calls to get the

00:11:00.040 --> 00:11:05.340
CGImage property DPI width,
DPI height, and orientation of the image.

00:11:05.750 --> 00:11:07.950
Lastly, we call
CG Image Source Create Image at Index,

00:11:07.950 --> 00:11:09.850
and that returns the
actual CG image to you.

00:11:09.850 --> 00:11:10.860
That's all there is.

00:11:12.650 --> 00:11:15.360
One of the other areas that
Image.io excels in is returning

00:11:15.360 --> 00:11:16.630
thumbnails for images.

00:11:16.670 --> 00:11:21.380
This was an interesting area when
developing Image.io because there's a

00:11:21.520 --> 00:11:23.650
wide variety of thumbnails that are used.

00:11:23.650 --> 00:11:26.340
Some file formats support thumbnails,
some don't.

00:11:26.550 --> 00:11:28.500
Some thumbnails are very large,
some are small.

00:11:28.500 --> 00:11:32.130
On the other side,
applications may want to have thumbnails

00:11:32.280 --> 00:11:37.120
returned as quickly as possible or may
want to have thumbnails returned even if

00:11:37.120 --> 00:11:40.020
there isn't a thumbnail inside the image.

00:11:41.020 --> 00:11:43.980
So to provide this flexibility,

00:11:44.210 --> 00:11:48.820
We added an options dictionary
to the create thumbnail call.

00:11:48.830 --> 00:11:52.180
In this example,
we create an image source given a URL,

00:11:52.180 --> 00:11:55.590
and then we create an options dictionary
with two key value pairs in it.

00:11:55.680 --> 00:11:59.620
The first is create thumbnail
from image if absent.

00:11:59.620 --> 00:12:02.870
This tells image IO that you wish
to have a thumbnail returned even

00:12:02.920 --> 00:12:06.460
if the file format doesn't contain
an actual embedded thumbnail.

00:12:07.900 --> 00:12:17.540
The other property we specify
is the maximum pixel size.

00:12:17.540 --> 00:12:17.540
This tells image IO that even
if the thumbnail is bigger

00:12:17.540 --> 00:12:17.540
than this requested size,
it should be scaled down.

00:12:18.070 --> 00:12:21.130
We create that options
dictionary and we pass it into

00:12:21.220 --> 00:12:23.850
CG Image Source Create Thumbnail
at Index.

00:12:23.850 --> 00:12:27.210
In the session after this,
there will be a discussion on

00:12:27.210 --> 00:12:33.590
using image capture APIs and
there will be further examples

00:12:33.590 --> 00:12:37.580
of how you can use this thumbnail
API in a real-world application.

00:12:37.580 --> 00:12:37.580
That's session 210.

00:12:38.600 --> 00:12:40.630
So those are the basics,
all you need to know to get

00:12:40.710 --> 00:12:43.390
up and running using Image.io
to read all these file formats

00:12:43.390 --> 00:12:44.700
that we now support in Tiger.

00:12:44.700 --> 00:12:48.620
There are a few advanced areas
I'd like to talk about in a little

00:12:48.620 --> 00:12:51.140
detail just to get you more excited.

00:12:51.140 --> 00:12:53.550
First is loading images incrementally.

00:12:53.560 --> 00:12:56.600
One of our other design goals for
Image.io is to support loading

00:12:56.680 --> 00:12:59.740
images incrementally for clients
such as WebKit and Safari.

00:13:01.220 --> 00:13:04.450
We do this by creating a CG image
source that's incremental.

00:13:04.580 --> 00:13:06.980
CG image source create incremental.

00:13:07.050 --> 00:13:15.810
Then what we do is the application in
a loop of some sort will accumulate

00:13:15.810 --> 00:13:15.810
data into CFData and provide that by
calling CG image source update data.

00:13:16.140 --> 00:13:20.110
Once new data is provided to Image.io,
the client requests an image

00:13:20.110 --> 00:13:23.240
to be returned by calling
CGImageSource createImage at index.

00:13:23.240 --> 00:13:25.380
This will return one of three values.

00:13:25.520 --> 00:13:28.710
It will return nil in the case
when there has not been enough data

00:13:28.710 --> 00:13:30.660
accumulated to return any image.

00:13:30.660 --> 00:13:34.380
Or it will return a partial image,
either a lower fidelity or

00:13:34.380 --> 00:13:36.340
initial bands of the image.

00:13:36.340 --> 00:13:40.220
Lastly, when all the data is complete,
it will return the full image.

00:13:41.000 --> 00:13:45.780
You can determine what the
status is of this loop by calling

00:13:45.780 --> 00:13:48.670
CGImageSource getStatusAtIndex.

00:13:49.040 --> 00:13:51.740
Once you have the status in the image,
you can draw the image.

00:13:51.740 --> 00:13:53.300
One thing that's
important to keep in mind,

00:13:53.360 --> 00:13:56.060
however, is that you need to release the
image when you're done with it.

00:13:56.350 --> 00:13:58.320
This is because the
CG image ref is immutable,

00:13:58.320 --> 00:14:00.840
and in order for a new image
to be returned by ImageIO,

00:14:00.840 --> 00:14:04.380
we need to make sure that the client
has released the previous image.

00:14:07.300 --> 00:14:10.540
On the subject of floating point images,
you're all probably aware that many

00:14:10.550 --> 00:14:12.250
formats only support one pixel depth.

00:14:12.260 --> 00:14:15.860
For example,
JPEG only support 8 bits per sample.

00:14:15.900 --> 00:14:18.660
Other formats support
arbitrary pixel depth,

00:14:18.660 --> 00:14:19.600
such as tith.

00:14:19.630 --> 00:14:26.050
As a rule, when ImageIO returns an
image ref to the application,

00:14:26.050 --> 00:14:26.050
it will be the same depth as the file.

00:14:26.280 --> 00:14:28.860
However, for high dynamic range
or floating point images,

00:14:28.870 --> 00:14:30.630
the story is a little bit different.

00:14:30.970 --> 00:14:34.750
Typically with these file formats,
the data that's actually stored in the

00:14:34.750 --> 00:14:36.960
file is some specially packed bits.

00:14:36.960 --> 00:14:41.160
And the open source code for
decompressing this data often has

00:14:41.160 --> 00:14:44.080
several different modes of operation.

00:14:44.700 --> 00:14:49.660
These bits can either be unpacked as
floating point data or integer data,

00:14:49.660 --> 00:14:52.620
or often it can either be
unpacked as extended range data

00:14:52.620 --> 00:14:56.280
where values less than zero or
greater than one are allowed,

00:14:56.310 --> 00:15:00.880
or tone compressed into
the range zero to one.

00:15:01.090 --> 00:15:04.980
Given these intricacies,
we believe that applications will want

00:15:04.980 --> 00:15:08.000
to opt in to using floating point images.

00:15:08.000 --> 00:15:10.610
So by default,
when you ask for a CG image

00:15:10.920 --> 00:15:15.050
from using ImageIO,
if the file contains floating point data,

00:15:15.050 --> 00:15:18.400
it'll be tone compressed
into 16-bit integers.

00:15:18.500 --> 00:15:22.880
However, an application that is aware of
floating point data and wants to

00:15:22.900 --> 00:15:27.050
pass it on for further processing,
for example, using Core Image,

00:15:27.050 --> 00:15:28.390
you can request that ImageIO return
floating point values.

00:15:28.840 --> 00:15:31.080
Let me give a brief code
example for how this works.

00:15:31.080 --> 00:15:32.420
It's very simple.

00:15:32.420 --> 00:15:35.810
Again, we're making use of an options
dictionary to specify flags that

00:15:35.810 --> 00:15:37.400
will be passed into image IO.

00:15:37.400 --> 00:15:41.640
Here the options dictionary
contains a single key value pair,

00:15:41.640 --> 00:15:45.680
which is KCG image should allow
float with the value true.

00:15:45.680 --> 00:15:50.360
We pass that options dictionary
into copy properties at index.

00:15:51.020 --> 00:15:53.690
If the image actually
contains floating point data,

00:15:54.050 --> 00:15:59.950
that property dictionary
will contain a key value for

00:16:00.080 --> 00:16:02.870
KCG image property is float.

00:16:04.590 --> 00:16:14.040
If the image actually
contained floating point data,

00:16:14.040 --> 00:16:15.370
that options dictionary,
or that property dictionary,

00:16:15.370 --> 00:16:15.370
will contain a key value for
KCG image property is float.

00:16:17.430 --> 00:16:20.020
The last subject I want to talk
about on opening images is how to

00:16:20.020 --> 00:16:23.240
dynamically support all the file
formats that are supported by Image.io.

00:16:23.240 --> 00:16:26.760
Typically, applications,
either Cocoa or Carbon-based,

00:16:26.760 --> 00:16:29.950
pre-declare the file formats that
they can support by adding to

00:16:29.950 --> 00:16:31.930
the list in their info.p list.

00:16:31.970 --> 00:16:35.220
However, as I mentioned before,
Image.io is going to be

00:16:35.250 --> 00:16:38.360
evolving considerably in
the months and years ahead,

00:16:38.400 --> 00:16:42.160
and we will be adding more file formats,
especially in the area of raw cameras.

00:16:42.760 --> 00:16:46.390
So you may want to be able to write
your application today so that as new

00:16:46.390 --> 00:16:50.200
file formats are supported by Image.io,
your application will automatically

00:16:50.250 --> 00:16:51.200
get this functionality.

00:16:51.260 --> 00:16:54.720
The way you do this is you
make use of the Image.io

00:16:54.840 --> 00:16:57.760
API CG Image Source Copy Type Identifiers
.

00:16:58.100 --> 00:17:03.240
This returns an array of CFStrings where
each of these strings is a universal

00:17:03.240 --> 00:17:06.190
type identifier for the file format.

00:17:06.730 --> 00:17:08.660
Once you have that array
of type identifiers,

00:17:08.660 --> 00:17:14.350
you can use UT type copy declaration
to get the list of file name extensions

00:17:14.600 --> 00:17:18.280
that are used for that type identifier.

00:17:18.960 --> 00:17:22.900
So let me go and give a brief demo of
what we've talked about so far using

00:17:22.900 --> 00:17:27.170
a sample app that we've developed for
this presentation called Image App.

00:17:27.270 --> 00:17:30.480
This sample code,
we'll be making extensive references to

00:17:30.480 --> 00:17:32.600
it throughout the presentation today.

00:17:32.600 --> 00:17:35.670
It's available for download and
provides a great reference for how

00:17:35.670 --> 00:17:39.100
to handle image and color management
correctly in your application.

00:17:39.100 --> 00:17:41.720
So let me switch over
to the demo machine.

00:17:44.020 --> 00:17:46.140
And let me just bring up
the code real quickly.

00:17:46.140 --> 00:17:48.780
Again,
typically an application would specify

00:17:48.780 --> 00:17:51.280
in their plist the list of types.

00:17:51.280 --> 00:17:54.260
In this case, however,
in addition to doing that,

00:17:54.270 --> 00:17:57.980
we will also subclass NSDocument
to specify what the types that

00:17:57.990 --> 00:17:59.800
this document can control.

00:17:59.800 --> 00:18:02.190
And in this case,
the readable types is very

00:18:02.320 --> 00:18:06.450
simply the results of calling
CGImageSourceCopyTypeIdentifiers.

00:18:06.530 --> 00:18:10.130
As this array grows in the future,
this document class will

00:18:10.130 --> 00:18:12.690
automatically be able to support them.

00:18:14.400 --> 00:18:21.060
The other subclass that I make is a
subclass on NS Document Controller,

00:18:21.060 --> 00:18:24.060
which specifies what the file
extensions are for a type.

00:18:24.180 --> 00:18:27.430
And again,
since the type in this case is a UTI,

00:18:27.640 --> 00:18:32.790
we can use UT type copy declaration to
get a dictionary which contains the array

00:18:33.190 --> 00:18:36.540
of suffixes that each type provides.

00:18:36.680 --> 00:18:40.410
Let me just give an example
of how this application works.

00:18:40.830 --> 00:18:42.950
Which is over here.

00:18:43.580 --> 00:18:47.350
If we go to File, Open,
what you'll notice

00:18:47.760 --> 00:18:55.260
is all of these types here, JPEG, CRW,
NEF files, are all selectable.

00:18:55.380 --> 00:19:01.640
And that's because we've declared
that this type can support,

00:19:01.640 --> 00:19:06.770
this class can support all the types
that are supported by Image.io.

00:19:06.770 --> 00:19:06.770
So let me open up this one image here.

00:19:06.770 --> 00:19:06.770
And let me just open
up another image here.

00:19:08.490 --> 00:19:10.720
And again, this application will talk
more about displaying images.

00:19:10.720 --> 00:19:14.620
What I want to talk about right
now is to show an inspector window

00:19:14.630 --> 00:19:16.260
that we've implemented here.

00:19:16.260 --> 00:19:19.920
This inspector window is showing a
couple key pieces of information.

00:19:19.920 --> 00:19:22.950
It's showing the thumbnail for the image,
and it's also showing the property

00:19:22.950 --> 00:19:25.080
dictionary that's returned from Image.io.

00:19:25.080 --> 00:19:27.830
As you can see from this list,
the property dictionary is

00:19:27.830 --> 00:19:29.740
actually hierarchical in nature.

00:19:29.740 --> 00:19:32.590
There are several key values
at the root level that are

00:19:32.590 --> 00:19:36.050
common to all file formats,
such as the color model, the depth,

00:19:36.180 --> 00:19:37.730
the height, and the width.

00:19:38.300 --> 00:19:41.870
If the DPI is specified,
it's also present at this root level.

00:19:41.900 --> 00:19:44.900
However,
where the real interesting metadata

00:19:44.900 --> 00:19:46.970
exists is in these sub-dictionaries.

00:19:46.990 --> 00:19:48.920
There's a sub-dictionary
for TIFF properties,

00:19:48.920 --> 00:19:51.670
which shows all the
TIFF properties that are present,

00:19:51.830 --> 00:19:55.370
the XF properties,
and also some maker note information that

00:19:55.370 --> 00:19:57.580
we are able to extract from this image.

00:19:57.580 --> 00:20:00.410
And of course other attributes
such as the file UTI,

00:20:00.410 --> 00:20:04.050
the file size,
and the path are also displayed.

00:20:04.500 --> 00:20:07.160
Again, we have code that shows
you how to do all of this.

00:20:07.240 --> 00:20:10.960
The key function is in
our info panel code.

00:20:11.030 --> 00:20:18.260
We have a set URL call,
which calls CG image

00:20:18.340 --> 00:20:21.480
source create with URL,
calls CG image source

00:20:21.480 --> 00:20:21.480
copy properties at index,

00:20:22.080 --> 00:20:29.740
also calls ImageIO to create the
thumbnail and then starts filling

00:20:29.740 --> 00:20:29.740
in the UI based on the results
that are returned from this.

00:20:30.000 --> 00:20:31.500
So that's all I want
to show at this point.

00:20:31.500 --> 00:20:34.300
The next thing we'll be talking
about is displaying images.

00:20:34.300 --> 00:20:37.400
So I'm going to pass the
microphone over to Luke Wallis.

00:20:37.400 --> 00:20:41.510
We'll be talking about
that and even more.

00:20:48.660 --> 00:20:50.150
Thank you very much, David.

00:20:50.280 --> 00:20:53.740
Can I get back the slides, please?

00:20:59.360 --> 00:21:01.300
David, do you have the controller?

00:21:01.300 --> 00:21:02.290
Okay.

00:21:02.300 --> 00:21:03.300
Don't tell.

00:21:03.300 --> 00:21:04.480
Sorry about that.

00:21:10.400 --> 00:21:37.700
[Transcript missing]

00:21:38.240 --> 00:21:43.160
Let's start with some general
steps which have to be taken

00:21:43.160 --> 00:21:45.230
when we are displaying an image.

00:21:45.730 --> 00:21:50.580
Obviously, the first thing that has to
happen is color conversion.

00:21:50.650 --> 00:21:54.740
Image data has to be converted
from this original color space

00:21:54.750 --> 00:21:56.880
to the display color space.

00:21:57.430 --> 00:21:59.930
Next,
we need to handle the differences in bit

00:22:00.070 --> 00:22:02.580
depth between the image and our display.

00:22:02.580 --> 00:22:07.590
We need to take care of geometry
mapping and things like interpolation

00:22:07.590 --> 00:22:12.000
and so forth that the image
looks correctly on the display.

00:22:12.000 --> 00:22:15.610
And if our image contains
some transparency information,

00:22:15.640 --> 00:22:19.680
for example, like alpha channel,
we need to composite this image

00:22:19.680 --> 00:22:22.060
with transparency on the display.

00:22:23.320 --> 00:22:29.420
And when the user changes its, let's say,
viewing condition,

00:22:29.730 --> 00:22:34.240
And for example,
resizes the window or moves it

00:22:34.330 --> 00:22:37.800
from one display to another,
most of these steps would

00:22:37.870 --> 00:22:39.930
have to be repeated.

00:22:40.210 --> 00:22:44.240
But I have very good news for all
of you that all this functionality

00:22:44.790 --> 00:22:51.100
can be handled within one call
called CG Context Draw Image.

00:22:52.760 --> 00:22:58.810
The CG Context Draw Image belongs to
Quartz API and it takes three parameters.

00:22:59.010 --> 00:23:05.800
The first is the context,
which describes our drawing destination.

00:23:05.970 --> 00:23:09.840
The next one is a rectangle,
which defines the location and the

00:23:10.060 --> 00:23:12.540
size of the image in the user space.

00:23:12.540 --> 00:23:16.530
And the third parameter
is the image itself.

00:23:18.130 --> 00:23:23.180
Graphic context is a fundamental
concept in Quartz and represents

00:23:23.490 --> 00:23:25.590
a drawing destination.

00:23:25.590 --> 00:23:30.980
It contains all drawing parameters
and all device-specific information,

00:23:31.040 --> 00:23:36.300
for example, like an ICC profile
for our window context.

00:23:36.640 --> 00:23:42.000
Graphic context is a fundamental
concept in Quartz and represents

00:23:42.000 --> 00:23:44.200
a drawing destination.

00:23:44.200 --> 00:23:46.900
It contains all drawing parameters
and all device-specific information,

00:23:46.900 --> 00:23:46.900
for example, like an ICC profile
for our window context.

00:23:49.580 --> 00:23:56.530
Another fundamental concept for drawing
images in Quartz are Quartz coordinates.

00:23:56.940 --> 00:24:01.580
There are two separate
coordinate systems in Quartz.

00:24:01.640 --> 00:24:06.400
One is user space and
another is device space.

00:24:06.540 --> 00:24:12.300
The transformation from user space to
device space is done through so-called

00:24:12.400 --> 00:24:15.840
current transformation matrix,
which is also a part of

00:24:15.840 --> 00:24:17.740
our destination context.

00:24:17.900 --> 00:24:20.730
The CTM, as we call it in short,

00:24:21.230 --> 00:24:25.630
provides options for scaling, rotating,
and translating objects

00:24:25.670 --> 00:24:27.960
into destination context.

00:24:28.060 --> 00:24:31.780
But in our image app,
we are using it to properly

00:24:31.790 --> 00:24:34.730
fit the image into our window.

00:24:36.390 --> 00:24:41.260
Here is what we do to display
an image in our image app.

00:24:41.370 --> 00:24:46.240
First, we need to find the context
corresponding to our view.

00:24:46.250 --> 00:24:51.660
As you see that we can do it through
appropriate call to Cocoa API.

00:24:51.720 --> 00:24:54.790
Then we define the image geometry.

00:24:54.900 --> 00:24:59.510
The next step is we need to figure
out the transformation for placing

00:24:59.530 --> 00:25:02.000
the image correctly in our view.

00:25:02.000 --> 00:25:08.200
We concatenate this transformation with
the current transformation in the context

00:25:08.200 --> 00:25:10.920
and we execute CGContextDrawImage.

00:25:10.920 --> 00:25:12.990
And this is all.

00:25:13.060 --> 00:25:16.860
That's all what we have to do to
display correctly color-managed

00:25:16.860 --> 00:25:18.960
images created by Image.io.

00:25:18.960 --> 00:25:21.930
However,
there are two more details that I would

00:25:21.930 --> 00:25:24.100
like to bring your attention to.

00:25:24.950 --> 00:25:27.300
The first one is image orientation.

00:25:27.300 --> 00:25:33.080
Many image file formats support
image orientation through a

00:25:33.280 --> 00:25:35.160
special tag in the metadata.

00:25:35.300 --> 00:25:40.470
So, we need to check the metadata,
as David showed you in

00:25:40.470 --> 00:25:44.910
one of the code examples,
and make the proper adjustments.

00:25:46.190 --> 00:25:49.110
Another very similar problem
is with image resolution.

00:25:49.110 --> 00:25:54.190
Many image file formats support,
as we call it, asymmetric resolution,

00:25:54.220 --> 00:25:57.670
which means the vertical resolution
may be different than horizontal.

00:25:57.680 --> 00:26:01.360
And we also need to take it into
account so the image has the

00:26:01.360 --> 00:26:03.990
proper aspect ratio when displayed.

00:26:04.660 --> 00:26:11.220
And all that can be very easily done in
Quartz because of the transforms that

00:26:11.260 --> 00:26:18.020
we are using for translating the image
from the user space to the device space.

00:26:18.020 --> 00:26:23.770
Here is a sample code from our image app,
how we take the image resolution

00:26:23.790 --> 00:26:29.040
and orientation into account
when we calculate our transform.

00:26:32.440 --> 00:26:40.570
I'd like to talk now about some advanced,
let's call them advanced techniques,

00:26:40.570 --> 00:26:43.390
related to drawing images in Quartz.

00:26:43.730 --> 00:26:50.080
The first one is extracting the data
from the image in a requested format.

00:26:50.100 --> 00:26:57.550
This example shows you how to extract
alpha RGB data from any CG image.

00:26:57.710 --> 00:27:00.440
First, we need to find out what's
the size of the image.

00:27:00.440 --> 00:27:04.940
We have to pre-allocate a buffer
for the image data to be returned.

00:27:04.940 --> 00:27:08.540
We make a decision about the
color space we want to have

00:27:08.540 --> 00:27:10.760
our images to be converted to.

00:27:10.760 --> 00:27:15.310
And we create a CG bitmap context
using our pre-allocated data,

00:27:15.310 --> 00:27:19.750
our color space,
and specifying the proper alpha layout.

00:27:19.770 --> 00:27:23.630
The next thing we do,
we draw our image to that context,

00:27:23.630 --> 00:27:26.910
and we can return the
flattened image data.

00:27:30.410 --> 00:27:34.680
The next topic that I would like
to talk about is assigning default

00:27:34.780 --> 00:27:39.640
profiles to the images that
are using device color spaces.

00:27:40.100 --> 00:27:44.640
First thing we need to do is to
find out if indeed the image color

00:27:44.640 --> 00:27:46.320
space is one of the device types.

00:27:46.320 --> 00:27:53.050
And the way we can do it in Tiger is
we can use the core foundation call

00:27:53.050 --> 00:27:56.570
CFEqual to compare color spaces.

00:27:56.580 --> 00:27:59.620
We can do that because
CG color spaces are,

00:27:59.620 --> 00:28:03.340
as we call them,
runtime core foundation types.

00:28:03.540 --> 00:28:07.000
And as such,
they have to provide a method

00:28:07.080 --> 00:28:11.490
for internals of CFEqual,
which will compare the color spaces,

00:28:11.490 --> 00:28:13.600
not only if this is
exactly the same pointer,

00:28:13.600 --> 00:28:18.600
but it will compare depending on the
color space type all the details.

00:28:18.600 --> 00:28:21.300
And in the case of
ICC-based color spaces,

00:28:21.360 --> 00:28:25.140
we'll actually go all the way
to comparing unique profiles

00:28:25.140 --> 00:28:28.040
identifiers called MD5 signatures.

00:28:29.570 --> 00:28:35.100
And once I find out that my image
indeed has the device color space,

00:28:35.100 --> 00:28:43.890
I can select the proper default and call
CG API to create a copy with color space.

00:28:45.060 --> 00:28:49.500
We use this code in our image app,
as I mentioned before.

00:28:49.510 --> 00:28:54.790
Another subject is how to find a
ColorSync profile for NSWindow.

00:28:55.210 --> 00:28:59.100
Here is the sample code
which shows you how to do it.

00:28:59.100 --> 00:29:04.640
We start with finding the display
ID in the device description

00:29:05.120 --> 00:29:10.240
dictionary of the screen object
which is associated with our window.

00:29:10.260 --> 00:29:14.680
Once we have this number,
we call traditional color sync

00:29:14.680 --> 00:29:17.920
API CM Get Profile by AV ID,
and here we go,

00:29:18.090 --> 00:29:20.340
we have the display profile.

00:29:20.500 --> 00:29:24.700
Very often for drawing with quartz
we may actually need the color

00:29:24.700 --> 00:29:28.360
space instead of color sync profile,
very easy to do.

00:29:28.510 --> 00:29:33.750
Just call CG Color Space Creative with
Platform Space using our display profile.

00:29:35.550 --> 00:29:40.140
Another subject which I'd like
to talk about is color matching

00:29:40.160 --> 00:29:42.520
across multiple displays.

00:29:42.610 --> 00:29:45.320
In Tiger, this is all very easy.

00:29:45.320 --> 00:29:50.920
We added a new attribute to NSWindow,
which can be set by calling

00:29:50.920 --> 00:29:55.520
this API I'm showing here,
setDisplaysWhenScreenProfileChanges.

00:29:56.830 --> 00:30:02.110
Once this attribute is set and the window
is moved from one screen to another

00:30:02.200 --> 00:30:08.670
or the underlying profile changes,
the system will purge all the

00:30:08.930 --> 00:30:12.610
caches associated with the
window and it will replace the

00:30:12.710 --> 00:30:14.980
profile in underlying context.

00:30:14.980 --> 00:30:17.820
And after that,
the system will call application

00:30:17.920 --> 00:30:22.140
to draw the content one more time
and it obviously will be rematched

00:30:22.140 --> 00:30:24.160
to the new display profile.

00:30:25.220 --> 00:30:29.660
And if the application needs to
be notified about this event,

00:30:29.660 --> 00:30:33.960
it can register for
NSWindowDidChangeScreenProfileNot

00:30:33.960 --> 00:30:40.230
ification and then execute a proper
callback making necessary adjustments.

00:30:43.090 --> 00:30:48.860
Now,
let me go back to the demo machine and

00:30:48.980 --> 00:30:52.960
show you our image app one more time.

00:30:52.960 --> 00:30:58.130
David, do you want me to save all?

00:30:58.230 --> 00:30:58.230
All right.

00:31:01.900 --> 00:31:02.680
There's our image up.

00:31:02.740 --> 00:31:14.680
We have prepared a special file that
now I'm going to open with our image up.

00:31:14.750 --> 00:31:17.290
Well, all looks good.

00:31:17.370 --> 00:31:20.440
It's hard to say if there was
anything special about this image.

00:31:20.440 --> 00:31:25.020
And one way to do it would be
to go to the info panel that

00:31:25.030 --> 00:31:31.470
is constructed using metadata
provided by Image.io and look there.

00:31:31.900 --> 00:31:36.900
Well, we see there is an orientation tag
and there is also some profile.

00:31:36.900 --> 00:31:41.940
So we're assuming that these are
important for displaying the image.

00:31:41.940 --> 00:31:49.480
And in order to illustrate better the
need for handling these two things,

00:31:49.480 --> 00:31:55.920
we also wrote what we call bad image up,
which is using some old legacy

00:31:55.920 --> 00:32:01.880
components allowing you for
opening images and displaying them.

00:32:01.900 --> 00:32:06.830
So if I open exactly the same
file in the bad image up,

00:32:06.830 --> 00:32:11.920
you see that obviously the
image looks very wrong.

00:32:11.920 --> 00:32:15.880
It's first of all flipped around
and all the colors are wrong.

00:32:16.230 --> 00:32:22.080
So that's because the old style
components that were used for

00:32:22.080 --> 00:32:26.240
displaying images were not using
the information properly which

00:32:26.240 --> 00:32:29.730
were contained in the image file.

00:32:31.280 --> 00:32:36.980
Speaking of testing the
applications with different files,

00:32:36.980 --> 00:32:39.360
in addition to the image
app that you can download,

00:32:39.360 --> 00:32:42.560
there is also a directory
of different test files,

00:32:42.560 --> 00:32:45.380
and I would like to show you
an example of such a file.

00:32:45.380 --> 00:32:48.530
If I open this image,
the text says that the

00:32:48.530 --> 00:32:52.760
embedded test profile is used
and is not double matched,

00:32:52.760 --> 00:32:55.720
which is exactly what we want to do.

00:32:55.720 --> 00:33:01.270
If I open exactly the same
image with my bad image app,

00:33:02.380 --> 00:33:05.760
The text changes and says
the embedded test profile is

00:33:05.780 --> 00:33:08.250
not used and is not double,
obviously was not used,

00:33:08.250 --> 00:33:09.660
couldn't be double matched.

00:33:09.660 --> 00:33:13.560
In addition to those test files
that are dealing with the profiles,

00:33:13.560 --> 00:33:20.480
there are also files that are
good for testing orientation.

00:33:20.960 --> 00:33:25.440
If I open this particular
image with the bad image up,

00:33:25.680 --> 00:33:28.420
the image comes out all rotated.

00:33:28.420 --> 00:33:35.000
And if I go back to my image
up and I open the same file,

00:33:35.500 --> 00:33:40.030
If I open this particular
image with the bad image up,

00:33:40.030 --> 00:33:41.190
the image comes out all rotated.

00:33:41.190 --> 00:33:41.190
And if I go back to my image
up and I open the same file...

00:33:42.200 --> 00:34:07.200
[Transcript missing]

00:34:07.520 --> 00:34:10.680
I can change the image saturation.

00:34:10.710 --> 00:34:16.580
And I can also match my
image to a selected profile.

00:34:18.280 --> 00:34:21.800
And obviously there are different
ways that this can be handled.

00:34:21.800 --> 00:34:28.950
One way would be to extract the
image data from the original image,

00:34:28.950 --> 00:34:34.410
apply exposure, then apply saturation,
create the image, convert this data to

00:34:34.490 --> 00:34:37.180
the destination profile,
create a new image,

00:34:37.180 --> 00:34:40.940
and then go through the path
of correct displaying it.

00:34:40.960 --> 00:34:44.630
But in Tiger,
we can do it a completely different way.

00:34:44.630 --> 00:34:51.490
And this brings me to another
subject I would like to talk about.

00:34:56.580 --> 00:35:00.300
which is filtering
images with Core Image.

00:35:00.530 --> 00:35:03.020
Core Image as many of
you already may know,

00:35:03.020 --> 00:35:09.580
is a new and exciting image processing
package which was added in Tiger.

00:35:09.770 --> 00:35:13.640
One of the main features of
Core Image is that it tries to take

00:35:13.700 --> 00:35:17.380
advantage of the programable graphics
hardware whenever it's possible.

00:35:17.460 --> 00:35:22.060
And this way it provides all
near real time performance.

00:35:22.270 --> 00:35:24.780
In addition to that,
Core Image comes with

00:35:24.780 --> 00:35:31.310
many pre-built filters,
which are very easy to set up and apply.

00:35:32.610 --> 00:35:35.820
And if you want to create
your own custom filters,

00:35:35.900 --> 00:35:38.010
Core Image also provides
an API to do that.

00:35:38.080 --> 00:35:39.530
Excuse me, wrong way.

00:35:39.710 --> 00:35:46.000
Drawing images with Core Image is
essentially the same as with Quartz,

00:35:46.000 --> 00:35:49.610
except Core Image uses its
own types for representing

00:35:49.610 --> 00:35:51.840
things like image or context.

00:35:52.640 --> 00:35:57.120
In a typical scenario,
what we do is we create

00:35:57.120 --> 00:35:59.780
a CI image from CG image.

00:35:59.780 --> 00:36:03.500
We set up one or more filters
that like to apply to the image.

00:36:03.500 --> 00:36:05.670
We create a CI context
and draw the result.

00:36:05.790 --> 00:36:07.240
That's all what we need to do.

00:36:07.240 --> 00:36:12.170
And this is what we have
done in our image app to draw

00:36:12.410 --> 00:36:15.240
filter image to a window.

00:36:15.240 --> 00:36:19.800
In the first step,
we create a CI image from our CG image.

00:36:19.800 --> 00:36:22.320
We apply the exposure filter.

00:36:22.320 --> 00:36:25.830
Then we apply a saturation filter.

00:36:25.830 --> 00:36:31.750
And here is a nice part about
things we can do with Core Image.

00:36:32.160 --> 00:36:36.120
Instead of converting the image
into our destination profile,

00:36:36.120 --> 00:36:41.550
we created a so-called soft proof profile
using a standard color cube filter.

00:36:41.580 --> 00:36:32.130
We just populated this filter
with the sample transformation

00:36:32.130 --> 00:36:52.440
from the CI image working space
through our destination profile.

00:36:52.570 --> 00:36:55.110
We draw the image from the
CI image working space and

00:36:55.110 --> 00:36:56.390
we use that as a filter.

00:36:56.390 --> 00:36:59.900
And then we draw to the CI context
created from window context.

00:36:59.900 --> 00:37:03.670
And this is the sample code that
you can find in the image app

00:37:03.670 --> 00:37:05.810
doing exactly what I described.

00:37:06.000 --> 00:37:09.080
We create CI image from the CG image.

00:37:09.080 --> 00:37:12.080
Take care of geometry of the image.

00:37:12.080 --> 00:37:15.680
Apply exposure and saturation filters.

00:37:15.780 --> 00:37:19.480
Then apply our color cube
filter that we are building

00:37:19.480 --> 00:37:22.010
out of our destination profile.

00:37:22.740 --> 00:37:24.530
Then we define the destination.

00:37:24.570 --> 00:37:29.560
That's slight difference
between the CI image and Quartz.

00:37:29.560 --> 00:37:36.000
We define the destination rectangle
in our destination context.

00:37:36.000 --> 00:37:38.000
We create CI context
from our window context.

00:37:38.000 --> 00:37:40.750
And we draw the image.

00:37:42.630 --> 00:37:48.770
That path works very well when we display
what we wanted to show in terms of

00:37:48.770 --> 00:37:53.880
color conversions and applying filters,
but it wouldn't work exactly as

00:37:53.940 --> 00:37:58.140
we want if we were to create a
CG image for printing or for saving.

00:37:58.140 --> 00:38:02.490
For that reason,
we modify slightly our small

00:38:02.490 --> 00:38:05.290
image processing pipeline.

00:38:05.290 --> 00:38:09.430
We initially go through the same steps
of creating the CI image from CG image,

00:38:09.430 --> 00:38:14.260
and then we apply exposure filter,
saturation filter.

00:38:14.260 --> 00:38:16.840
But here,
instead of using the color cube,

00:38:16.840 --> 00:38:20.220
we create a bitmap context
with our selected profile.

00:38:20.220 --> 00:38:24.270
And then, from there,
we create a CI context from our

00:38:24.270 --> 00:38:26.870
CG bitmap context and draw to it.

00:38:27.010 --> 00:38:31.410
And after that,
we use this Quartz API to create a

00:38:31.410 --> 00:38:34.830
CG image out of our bitmap context.

00:38:34.930 --> 00:38:37.470
Here's how it looks in the real code.

00:38:37.640 --> 00:38:43.640
CI image created from CG image,
apply exposure saturation filter,

00:38:43.690 --> 00:38:47.580
create a bitmap context,
create a CI context from

00:38:47.580 --> 00:38:50.640
that bitmap context,
draw the image,

00:38:50.640 --> 00:38:55.960
and then CG bitmap context,
create image gives us our new image.

00:38:56.060 --> 00:38:57.150
Amen.

00:38:58.100 --> 00:39:01.730
And this brings me to the next
topic I would like to talk about,

00:39:01.770 --> 00:39:04.970
which is printing images.

00:39:05.490 --> 00:39:10.860
I would like to start with the
architectural overview of printing and

00:39:10.860 --> 00:39:16.920
specifically talk about printing as a
part of what we call color communication.

00:39:17.100 --> 00:39:20.290
Then I would like to touch on
the subject of application versus

00:39:20.420 --> 00:39:22.840
driver color management in printing.

00:39:22.930 --> 00:39:28.050
And I would like to conclude what
is needed in the application for

00:39:28.130 --> 00:39:32.150
drawing properly color managed images.

00:39:33.300 --> 00:39:38.840
In Mac OS X, as most of you know,
printing consists of two components.

00:39:38.840 --> 00:39:46.540
The first one is called
the printing front end,

00:39:46.540 --> 00:39:46.540
and this is a library that
application leaks against.

00:39:48.330 --> 00:39:52.730
Printing front-end is responsible
for creating a spool file,

00:39:52.730 --> 00:39:55.240
which will be passed to
the second component,

00:39:55.390 --> 00:39:57.050
which is the printing back-end.

00:39:57.060 --> 00:40:02.810
Printing back-end is a separate
process and is responsible for creating

00:40:02.810 --> 00:40:06.860
the proper data for the printer.

00:40:06.860 --> 00:40:12.270
In the case of the raster printer,
printing back-end will rasterize

00:40:12.270 --> 00:40:16.000
the spool file and in the case
of PostScript printer will

00:40:16.000 --> 00:40:17.860
generate a PostScript job.

00:40:18.300 --> 00:40:25.200
One of the things that printing back-end
is responsible for is color conversion.

00:40:25.350 --> 00:40:30.880
The printing back-end will convert all
the colors in the spool file into the

00:40:30.990 --> 00:40:39.050
profile that is maintained in the device
integration database of ColorSync.

00:40:39.390 --> 00:40:44.640
This is a very important point which
touches on the color communication.

00:40:44.640 --> 00:40:52.240
Profiles are not only used for,
printer profiles are not only used for

00:40:52.240 --> 00:40:55.900
color matching from printing back end.

00:40:55.900 --> 00:41:01.510
I'm talking about this because it
happened quite a few times that

00:41:02.010 --> 00:41:07.160
printer driver developers think
that at this moment they can once

00:41:07.340 --> 00:41:11.850
the printing back end provides the
data match to the printer profile

00:41:11.900 --> 00:41:15.900
they can basically take it over
and do whatever they want with it.

00:41:15.910 --> 00:41:19.900
No, that would break what we
call color communication.

00:41:20.000 --> 00:41:25.900
Remember, the end user has access to the
ColorSync device integration database

00:41:25.900 --> 00:41:30.890
through ColorSync utility where he
can see all the profiles registered

00:41:30.950 --> 00:41:35.640
and can use ColorSync utility
to evaluate the device without

00:41:35.640 --> 00:41:39.440
actually seeing or printing images
by looking at the ColorSync profile.

00:41:39.760 --> 00:41:45.500
This is the place where the user can
assign custom profiles to the devices

00:41:45.500 --> 00:41:49.500
and obviously the expectation is that
these profiles will be respected.

00:41:49.500 --> 00:41:53.710
Another example of color
communication based on ColorSync

00:41:53.800 --> 00:41:58.500
profile is what I hope you're very
familiar with is soft proofing.

00:41:58.500 --> 00:42:03.260
If I have a profile for my printer and
I know that this is going to be used

00:42:03.260 --> 00:42:09.040
during printing I can evaluate the
capabilities of my device in soft proof

00:42:12.410 --> 00:42:15.990
The color communication has
specific requirements to work.

00:42:16.300 --> 00:42:22.180
The first one is that application
is generating calibrated color data.

00:42:22.390 --> 00:42:26.850
The second is that we know the profile
for the current print mode and obviously

00:42:26.850 --> 00:42:31.490
we know that the driver is not going
to do any additional color adjustments.

00:42:32.260 --> 00:42:36.520
You saw already one of the
benefits is soft proofing,

00:42:36.630 --> 00:42:41.260
but this color communication
through ICC or ColorSync profiles

00:42:41.260 --> 00:42:45.520
allows savvy application to
produce output specific color.

00:42:45.540 --> 00:42:49.540
I would like to give you
here an example of PDFX.

00:42:49.540 --> 00:42:52.340
I don't know how many of
you are familiar with PDFX,

00:42:52.340 --> 00:42:56.650
but PDFX is an international
standard for data exchange

00:42:57.100 --> 00:42:59.750
used in publishing industry.

00:42:59.760 --> 00:43:02.160
One of the requirements of PDFX is
that it is a data exchange system.

00:43:02.160 --> 00:43:02.200
PDFX is a data exchange system that
is used in publishing industry.

00:43:02.220 --> 00:43:02.240
PDFX is a data exchange system that
is used in publishing industry.

00:43:02.280 --> 00:43:08.890
PDFX is embedding a profile for
intended output device that is stored

00:43:08.890 --> 00:43:12.660
in PDFX's so-called output intent.

00:43:16.500 --> 00:43:20.280
When it comes to the
printing architecture,

00:43:20.280 --> 00:43:25.360
we have, as we call them,
two separate modes that deal with

00:43:25.360 --> 00:43:29.320
color management in printing.

00:43:29.320 --> 00:43:29.320
The first one,

00:43:29.590 --> 00:43:31.540
We call it internally application.

00:43:31.540 --> 00:43:35.290
Many printer driver
developers call it ColorSync.

00:43:35.290 --> 00:43:38.340
It's the one that I was
just talking about.

00:43:38.340 --> 00:43:40.580
The application creates the color.

00:43:40.580 --> 00:43:48.420
The user expects that the matching will
happen to the selected printer profile.

00:43:51.220 --> 00:43:54.240
We are assuming that in this mode,
the driver is not going to

00:43:54.370 --> 00:43:55.930
make any color adjustments.

00:43:55.930 --> 00:44:02.890
But we have another mode of
controlling color in printing,

00:44:02.900 --> 00:44:04.080
which is called the driver mode.

00:44:04.100 --> 00:44:08.420
This is a legacy mode from the days
when there was no color management

00:44:08.430 --> 00:44:13.190
in printing and the only color space
that was available was device RGB.

00:44:13.250 --> 00:44:17.220
And obviously at this moment,
the driver had to make some decisions

00:44:17.220 --> 00:44:20.860
about how to put the ink on the
paper to represent the color.

00:44:21.220 --> 00:44:27.280
We keep this mode for legacy reasons.

00:44:27.280 --> 00:44:32.700
And the big difference between the first
one and the second is that in this case,

00:44:32.950 --> 00:44:35.660
printing is no longer part
of color communication.

00:44:35.670 --> 00:44:40.540
Simply because there is no way to
communicate back what is going to happen

00:44:40.660 --> 00:44:43.160
with this image that we are printing.

00:44:46.050 --> 00:44:51.070
I would like to give you examples
of what application has to do in

00:44:51.070 --> 00:44:56.760
order to make sure that the color is
spooled with the intended color spaces.

00:44:56.760 --> 00:44:59.560
What I understand by
intended color space,

00:44:59.650 --> 00:45:03.490
it could be either the color space
of the image that was created

00:45:03.610 --> 00:45:07.920
by Image.io when the application
didn't make any color adjustments,

00:45:07.920 --> 00:45:12.530
or that is the user-selected color
space that in your application the

00:45:12.570 --> 00:45:15.380
user was able to convert the images to.

00:45:16.020 --> 00:45:23.180
This simple code shows you the essence
of this code is to create your own view,

00:45:23.200 --> 00:45:27.590
which will be called to
spool the data for printing.

00:45:28.790 --> 00:45:35.050
And when this view is called to draw,
the only thing we need to do is to draw

00:45:35.050 --> 00:45:40.410
the image with our intended color space,
very much the same way as we are doing

00:45:40.410 --> 00:45:43.710
that for proper display of the images.

00:45:44.170 --> 00:45:46.380
And this is all what
I wanted to talk about today,

00:45:46.380 --> 00:45:48.900
so I'd like to thank you for
your attention and I return

00:45:48.900 --> 00:45:50.640
this stage back to David.

00:45:57.650 --> 00:45:58.320
Thank you, Luke.

00:45:58.380 --> 00:46:01.200
We've already done a lot of work today,
and as you know,

00:46:01.200 --> 00:46:03.830
it's always good when you've done a lot
of work to save it when you're done.

00:46:03.830 --> 00:46:05.940
So the last thing we're
going to be talking about is

00:46:05.940 --> 00:46:07.480
saving images using Image.io.

00:46:07.480 --> 00:46:09.980
So what's involved in saving an image?

00:46:09.980 --> 00:46:13.540
Well, the application that's going
to be saving an image needs to

00:46:13.540 --> 00:46:15.370
provide lots of information.

00:46:15.380 --> 00:46:19.390
For example, the image itself,
the metadata for the image,

00:46:19.390 --> 00:46:23.250
and also several options,
such as compression type that's

00:46:23.400 --> 00:46:25.660
to be used when saving the image.

00:46:26.060 --> 00:46:29.060
Some of those options might
be file format specific.

00:46:29.110 --> 00:46:32.400
Given all this information,
it's passed us some code

00:46:32.400 --> 00:46:34.960
that's responsible for
compressing the pixel data,

00:46:34.960 --> 00:46:38.290
embedding the appropriate
color space into the file,

00:46:38.390 --> 00:46:40.700
and also embedding the
metadata in the file.

00:46:40.700 --> 00:46:44.860
The end result of this is that
a data is produced either as

00:46:45.020 --> 00:46:47.490
file on disk or data in memory.

00:46:48.890 --> 00:46:50.840
So how is this done
with the Image.io API?

00:46:50.840 --> 00:46:51.800
Well, it's very simple.

00:46:51.800 --> 00:46:53.410
It's just a few calls
that you need to make.

00:46:53.420 --> 00:46:56.680
First is there's a new data type
called CG image destination.

00:46:56.680 --> 00:46:59.710
You can create an image
destination by calling CG image

00:46:59.710 --> 00:47:01.540
destination create with URL.

00:47:01.540 --> 00:47:06.890
You may also create one with
mutable CFData or CG data consumer.

00:47:06.900 --> 00:47:10.480
At the time you create the destination,
you also need to specify

00:47:10.550 --> 00:47:11.700
two other things.

00:47:11.700 --> 00:47:14.730
You need to specify the type
identifier to indicate what the

00:47:14.730 --> 00:47:16.490
file format of the file will be.

00:47:17.350 --> 00:47:20.660
You also need to declare what
the number of images that

00:47:20.660 --> 00:47:23.610
will be in the resulting file.

00:47:23.930 --> 00:47:26.730
Once you have an image destination,
then you can set the properties

00:47:26.760 --> 00:47:30.040
for the file as a whole by calling
CGImageDestinationSetProperties.

00:47:30.040 --> 00:47:32.940
This is only needed in
certain special cases.

00:47:32.950 --> 00:47:37.440
The key thing that you need to do is to
add the image and options and metadata

00:47:37.440 --> 00:47:40.300
by calling CGImageDestinationAddImage.

00:47:40.300 --> 00:47:43.600
Lastly,
you call CGImageDestinationFinalize.

00:47:44.500 --> 00:47:46.780
Here's an example of the code,
all the code you need

00:47:46.860 --> 00:47:48.000
to do to write a JPEG.

00:47:48.060 --> 00:47:53.040
We start with a function where we pass
in a URL that we'll be writing to,

00:47:53.040 --> 00:47:56.310
a CG image ref,
and one key piece of metadata,

00:47:56.320 --> 00:47:57.780
which is the DPI.

00:47:57.780 --> 00:48:02.990
We create the image destination by
calling CGImageDestinationCreateWithURL,

00:48:03.280 --> 00:48:07.610
and we specify the URL and that we
want to be creating a JPEG file.

00:48:07.610 --> 00:48:10.300
And we also specify that
there'll be one image.

00:48:10.300 --> 00:48:12.100
It's all that JPEG supports,
so that's good.

00:48:12.980 --> 00:48:14.920
Then we're going to be
creating a dictionary,

00:48:14.920 --> 00:48:17.420
and this dictionary serves
two purposes when writing.

00:48:17.420 --> 00:48:21.430
It's used to specify metadata,
and it's also used to specify options

00:48:21.430 --> 00:48:25.340
that are needed when writing the image,
such as compression type

00:48:25.340 --> 00:48:26.610
or compression quality.

00:48:26.660 --> 00:48:29.460
So here in this example, it's a JPEG,
so we want to be able to

00:48:29.460 --> 00:48:31.440
specify the compression quality.

00:48:31.440 --> 00:48:33.690
We do that by adding a
key to the dictionary,

00:48:33.690 --> 00:48:36.660
which is
KCGImageDestinationCompressionQuality.

00:48:36.660 --> 00:48:39.470
It's a bit of a mouthful,
but the value we put in there

00:48:39.580 --> 00:48:41.360
is a value between 0 and 1.

00:48:41.490 --> 00:48:42.510
So we're going to do that.

00:48:43.600 --> 00:48:47.720
We also specify in this short example
the metadata that we want to write,

00:48:47.920 --> 00:48:49.140
which is the DPI.

00:48:49.140 --> 00:48:54.150
And we specify that by adding the keys
CGImagePropertyDPIWidth and DPIHeight.

00:48:54.360 --> 00:48:56.690
Now we could have added a
lot of other options at the

00:48:56.720 --> 00:48:58.400
same time to the dictionary.

00:48:58.400 --> 00:49:02.810
We could have added XTIF tags, TIFF tags,
and all of these will be written as well.

00:49:03.120 --> 00:49:06.850
Once we have the image and now
this property in OptionsDictionary,

00:49:06.850 --> 00:49:09.950
we call CGImageDestinationAddImage,
and then we call

00:49:10.200 --> 00:49:12.360
CGImageDestinationFinalize.

00:49:12.830 --> 00:49:15.730
There's a lot of great stuff that
happens behind the scenes here.

00:49:15.900 --> 00:49:18.040
For example,
if you specify when you write

00:49:18.040 --> 00:49:19.820
that you want an orientation.

00:49:19.820 --> 00:49:23.540
Well, some formats support orientation,
other ones don't.

00:49:23.750 --> 00:49:26.130
ImageIO will automatically
take care of that for you.

00:49:26.270 --> 00:49:28.820
If the image file format
doesn't support orientation,

00:49:28.820 --> 00:49:29.930
it will pre-rotate the image.

00:49:30.060 --> 00:49:34.060
The other thing is not all file
formats support all color spaces.

00:49:34.190 --> 00:49:37.990
So if the image that's passed in
happened to be a floating point

00:49:37.990 --> 00:49:42.140
image and you're saving it as a JPEG,
that needs to be converted to 8-bit data.

00:49:42.140 --> 00:49:44.140
ImageIO will take care of that for you.

00:49:44.140 --> 00:49:49.140
A lot of this stuff is handled
automatically by ImageIO.

00:49:49.140 --> 00:49:52.290
This is a great, very easy to use API.

00:49:53.400 --> 00:49:55.340
That said,
there are a few advanced areas I'd

00:49:55.340 --> 00:49:57.390
like to talk about when saving images.

00:49:57.460 --> 00:49:59.700
One has to do with saving
floating point images,

00:49:59.820 --> 00:50:05.710
and the other is adding some UI to your
application to save images for the user.

00:50:05.880 --> 00:50:09.400
So with floating point images,
it's pretty easy to be honest.

00:50:09.460 --> 00:50:12.720
All you need to do is provide
the image destination object a

00:50:12.720 --> 00:50:15.390
CG image with floating point pixels.

00:50:15.740 --> 00:50:19.000
However, you should be aware that there's
currently only two formats

00:50:19.000 --> 00:50:22.200
supported by ImageIO that support
writing floating point data.

00:50:22.270 --> 00:50:26.500
These are IEEE float TIFFs and OpenEXR.

00:50:26.520 --> 00:50:28.670
If you are writing to
one of those formats,

00:50:28.690 --> 00:50:31.780
then your floating point data
will be passed as is to that file

00:50:31.780 --> 00:50:33.700
format and then written to disk.

00:50:33.740 --> 00:50:39.190
In the cases where the file format
doesn't support floating point data,

00:50:39.190 --> 00:50:42.890
ImageIO will take care of converting
that to 18 or 16-bit data if possible.

00:50:44.760 --> 00:50:47.320
The other area I want to talk
about when saving images is how

00:50:47.320 --> 00:50:51.220
you can add some helpful UI to your
user when they're saving an image.

00:50:51.220 --> 00:50:54.640
The general idea when you're saving
an image is often you want to

00:50:54.640 --> 00:50:58.510
make sure to preserve the original
image's metadata as much as possible.

00:50:58.520 --> 00:51:01.220
So one thing I recommend
is when you open the image,

00:51:01.220 --> 00:51:05.840
you get the image metadata from Image.io
and you keep track of that for later use.

00:51:05.840 --> 00:51:07.840
Then when it comes
time to save the image,

00:51:07.840 --> 00:51:10.640
you'll modify that slightly,
but for the most part you'll

00:51:10.640 --> 00:51:13.630
pass that metadata dictionary
in to the resulting file.

00:51:15.550 --> 00:51:17.560
What you then do is in
your user interface,

00:51:17.670 --> 00:51:21.720
you build a pop-up of formats by
using the CG image destination

00:51:21.780 --> 00:51:23.680
copy type identifiers.

00:51:23.750 --> 00:51:30.020
This API returns the list of all writable
file formats supported by Image.io.

00:51:30.300 --> 00:51:33.280
Then based on when the user
interacts with the save panel,

00:51:33.280 --> 00:51:37.050
when they change the file format,
when they change other attributes,

00:51:37.060 --> 00:51:40.590
you can modify the options in
metadata dictionary accordingly.

00:51:40.880 --> 00:51:43.590
And then when you're done,
you write the file to disk.

00:51:43.710 --> 00:51:46.970
So let me switch the demo machine
here and show you an example

00:51:46.970 --> 00:51:48.900
of how that works in practice.

00:51:48.900 --> 00:51:52.910
Can we switch to the demo, please?

00:51:52.910 --> 00:51:52.910
Thanks.

00:51:54.400 --> 00:51:56.000
So let me open up an image here.

00:51:56.000 --> 00:52:01.180
Again, I'm going to open up
this Canon RAW image.

00:52:01.410 --> 00:52:02.900
So let me open up an image here.

00:52:02.900 --> 00:52:10.000
Again, I'm going to open up
this Canon RAW image.

00:52:10.240 --> 00:52:14.300
And what we have is a format menu
that has a list of all the formats

00:52:14.300 --> 00:52:16.320
that Image.io supports writing.

00:52:16.540 --> 00:52:19.640
In this case,
we're going to save it as a JPEG and

00:52:19.640 --> 00:52:21.760
we'll have a quality slider.

00:52:21.870 --> 00:52:23.740
Now let me just show you,
before I finish,

00:52:23.740 --> 00:52:26.260
let me go back to the code
and show you how this works.

00:52:28.310 --> 00:52:31.030
project.

00:52:31.350 --> 00:52:34.920
First of all, in my nib,
I've got a view that I'm going

00:52:34.920 --> 00:52:36.540
to be adding to the save panel.

00:52:36.540 --> 00:52:40.380
And it has a format pop up that's
initially empty in the nib.

00:52:40.660 --> 00:52:43.430
But it also has this
other tab view below it.

00:52:43.620 --> 00:52:45.920
And that tab view has three panes in it.

00:52:45.950 --> 00:52:47.140
One is an empty pane.

00:52:47.150 --> 00:52:50.420
This is another pane that's
for specifying compression.

00:52:50.570 --> 00:52:54.160
And one thing you'll notice is this
has three different compression types.

00:52:54.160 --> 00:52:59.320
If I bring up the info window,
you'll notice that the LZW menu item

00:52:59.480 --> 00:53:01.710
has the value 5 associated with it.

00:53:01.930 --> 00:53:06.950
And the Pack Bits has the value 32773.

00:53:07.130 --> 00:53:09.710
These are the magic numbers
that TIFF needs in order

00:53:09.710 --> 00:53:13.080
to specify no compression,
LZW compression,

00:53:13.110 --> 00:53:15.440
or Pack Bits compression.

00:53:15.670 --> 00:53:22.410
The other pain in this
view is the quality pain,

00:53:22.410 --> 00:53:24.550
which is simply a slider
that goes from zero to one.

00:53:24.910 --> 00:53:28.930
So given this nib,
what we do is in our NSDocument class,

00:53:29.000 --> 00:53:32.510
there is a method saying
prepare save panel.

00:53:32.510 --> 00:53:37.740
This is a class that you can override if
you want to add a view to the save panel.

00:53:37.740 --> 00:53:39.830
This is how we do it right here.

00:53:41.080 --> 00:53:45.280
One of the things you'll see me
doing here is we're building a list

00:53:45.300 --> 00:53:48.450
of menu items for the format pop-up.

00:53:48.570 --> 00:53:52.600
I'm setting the format
to the appropriate type.

00:53:52.620 --> 00:53:57.040
One thing I'm being aware of is that the
file that I open may not be writable,

00:53:57.110 --> 00:54:00.170
so I want to handle the case
in that situation and set

00:54:00.170 --> 00:54:02.050
it to TIFF if appropriate.

00:54:02.710 --> 00:54:05.630
Then we set up some initial
defaults like a quality value

00:54:05.630 --> 00:54:07.460
of .85 and compression none.

00:54:07.750 --> 00:54:12.460
Then what happens is
as the user interacts,

00:54:12.460 --> 00:54:17.000
they'll do things like select
a different file format.

00:54:17.000 --> 00:54:23.250
In that case,
we'll tell the save panel what the new

00:54:23.250 --> 00:54:25.540
list of extensions that are appropriate
for the selected file format are.

00:54:25.900 --> 00:54:29.470
In addition, then,
when the compression pop-up is hit,

00:54:29.580 --> 00:54:32.750
we get the tag that's
associated with that menu,

00:54:32.750 --> 00:54:38.480
which has those magic numbers in it, 1,
5, and 3, 2, 7, 7, 3,

00:54:38.480 --> 00:54:45.420
and add that to the options and property
dictionary whenever the user selects it.

00:54:46.160 --> 00:54:49.600
The end result is when
it comes time to save,

00:54:49.880 --> 00:54:54.080
we'll write the image to disk,
and we'll specify those

00:54:54.080 --> 00:54:56.370
options and properties.

00:54:56.400 --> 00:54:59.620
So let me just go back to the demo,
and we're down here,

00:54:59.620 --> 00:55:02.490
we'll go and specify JPEG,
change the quality,

00:55:02.550 --> 00:55:05.310
make a little higher quality,
and hit save.

00:55:05.360 --> 00:55:08.460
Now before I hit save,
you'll see the info here is all the

00:55:08.460 --> 00:55:11.010
metadata for the original Canon RAW file.

00:55:11.020 --> 00:55:14.380
When I hit save, it'll write it to disk,
the window will update.

00:55:14.800 --> 00:55:18.160
And you'll see even this new
file now has preserved all the

00:55:18.160 --> 00:55:20.040
original EXIF and TIFF data.

00:55:20.040 --> 00:55:23.940
And also some of the new attributes,
such as the JPEG-specific attributes,

00:55:23.940 --> 00:55:24.770
are present.

00:55:24.780 --> 00:55:27.780
So I actually think this
is a great functionality.

00:55:27.780 --> 00:55:30.050
This is something before
that was dedicated only to

00:55:30.050 --> 00:55:31.700
special purpose applications.

00:55:31.700 --> 00:55:35.550
But now this humble piece of
sample code can support a wide

00:55:35.550 --> 00:55:40.340
variety of esoteric RAW camera file
formats and save them as JPEGs.

00:55:40.340 --> 00:55:49.480
So that's the last... Let me
go back to the main slides.

00:55:55.730 --> 00:55:58.760
So that's the conclusion
of our discussion today.

00:55:58.760 --> 00:56:02.180
I just want to make a reference to our
developer documentation that's available.

00:56:02.180 --> 00:56:05.620
We have some great documentation for
CG Image Source and CG Image Destination.

00:56:05.620 --> 00:56:09.160
I also want to make a plug for a
book that will be available soon,

00:56:09.160 --> 00:56:13.470
which talks about programming with
Quartz and also has several discussions

00:56:13.470 --> 00:56:17.390
of how to use ImageIO correctly
and color management correctly.

00:56:17.400 --> 00:56:19.640
And lastly,
there's several other presentations

00:56:19.660 --> 00:56:22.400
that if you haven't been to already,
you should check out.

00:56:23.140 --> 00:56:26.060
One in particular is the
presentation that follows this one,

00:56:26.060 --> 00:56:29.370
which is Session 210 for
Essential Ingredients to

00:56:29.370 --> 00:56:31.150
Mac OS X Imaging Solutions.

00:56:31.180 --> 00:56:32.690
It's also a great show.