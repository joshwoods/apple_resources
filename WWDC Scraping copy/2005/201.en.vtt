WEBVTT

00:00:11.470 --> 00:00:15.400
I'm Daniel Steinberg,
and welcome to the session on talking

00:00:15.400 --> 00:00:19.290
about audio capabilities of QuickTime 7.

00:00:19.340 --> 00:00:22.210
I should mention that we'll
be playing some surround sound

00:00:22.210 --> 00:00:26.250
content in these speakers:
center, left, right, left surround,

00:00:26.250 --> 00:00:27.250
right surround.

00:00:27.420 --> 00:00:32.050
So if you're sitting near those speakers,
it won't sound very balanced.

00:00:32.120 --> 00:00:35.840
You might want to try to move into the
center so you can hear things better.

00:00:39.590 --> 00:00:43.420
We'll be talking today about some of
the things that you can do to use the

00:00:43.420 --> 00:00:47.980
new features of QuickTime Audio most
effectively in your applications.

00:00:47.980 --> 00:00:51.860
And we'll show you some of the things
you can do to author multi-channel

00:00:51.920 --> 00:00:55.000
media in QuickTime Player and
QuickTime Player Pro.

00:00:55.000 --> 00:00:58.040
We'll have several sample
applications for you to look at,

00:00:58.040 --> 00:00:59.730
and we'll show you some code.

00:00:59.740 --> 00:01:02.910
These samples are not on the CD,
I'm afraid,

00:01:02.910 --> 00:01:06.040
and they're not on the website right now.

00:01:06.040 --> 00:01:10.770
They're going to be posted to developer
services on the web next week.

00:01:10.780 --> 00:01:15.110
But if you come to the Media Lab this
afternoon or during the week,

00:01:15.180 --> 00:01:18.110
we'll be able to give you a
copy onto your machine from

00:01:18.110 --> 00:01:19.730
a CD master that we've got.

00:01:19.780 --> 00:01:21.820
So you can get the sample
code if you're hot for it now,

00:01:21.820 --> 00:01:24.090
and just wait until next week,
it'll be up on the web.

00:01:24.100 --> 00:01:26.180
We won't be covering
all features in depth,

00:01:26.240 --> 00:01:29.150
we just don't have time,
but we'll try to give you some salient

00:01:29.150 --> 00:01:31.100
features and interesting things.

00:01:31.100 --> 00:01:34.960
We'll talk particularly
about multi-channel audio.

00:01:35.480 --> 00:01:39.400
Both playback and capture,
how to create content, label content,

00:01:39.400 --> 00:01:42.420
and how to support channel
layouts in your application.

00:01:42.460 --> 00:01:45.830
We'll also be giving a brief
overview of some of the audio

00:01:46.140 --> 00:01:48.280
APIs that are new in QuickTime 7.

00:01:48.380 --> 00:01:50.730
And some of the property-based APIs.

00:01:50.800 --> 00:01:54.160
And we'll be talking about
movie audio extraction,

00:01:54.160 --> 00:01:58.040
which is the new API for getting
audio out of a movie so that you

00:01:58.080 --> 00:02:02.010
don't have to go into the samples
and decode yourself and try to

00:02:02.010 --> 00:02:03.220
figure out how it's going to mix.

00:02:03.220 --> 00:02:04.870
And second guess,
you can do it using this API.

00:02:04.880 --> 00:02:09.930
And we'll have significant code
talking about audio capture with

00:02:09.930 --> 00:02:12.680
the new SGAudio channel component.

00:02:13.690 --> 00:02:16.030
So I'm going to very,
very briefly talk about what's new in

00:02:16.100 --> 00:02:19.220
QuickTime because there's quite a bit,
and we went over it last year.

00:02:19.220 --> 00:02:22.360
I hope many of you were here last year,
and now it's out there.

00:02:24.410 --> 00:02:28.480
The fundamental change is that we
are now playing soundtracks through

00:02:28.540 --> 00:02:30.180
Core Audio instead of Sound Manager.

00:02:30.180 --> 00:02:33.800
And this is through the facility
that we're calling an audio context.

00:02:33.800 --> 00:02:37.660
You can create an audio context
for a Core Audio device and

00:02:37.660 --> 00:02:40.710
then assign it to your movie,
and then all the soundtracks

00:02:40.710 --> 00:02:42.170
will play to that context.

00:02:42.180 --> 00:02:45.960
That context includes a mixer,
so it's mixing all tracks together,

00:02:45.960 --> 00:02:49.460
and then you can do things like
gain control on the mixed audio,

00:02:49.460 --> 00:02:50.680
which was not possible before.

00:02:50.680 --> 00:02:54.370
When you said set volume,
it would go to individual tracks.

00:02:54.550 --> 00:02:57.300
Now we actually have a physical...

00:02:59.000 --> 00:03:28.100
[Transcript missing]

00:03:28.880 --> 00:03:31.540
We have movie-level APIs for,
as I mentioned,

00:03:31.540 --> 00:03:34.490
setting the playback device
and also for certain controls.

00:03:34.500 --> 00:03:37.930
And one of the things that
we've gotten by the ability to

00:03:37.930 --> 00:03:41.680
be working with Core Audio is
a pitch-preserving vary speed,

00:03:41.680 --> 00:03:45.580
the AU time pitch unit in Core Audio,
which is an exciting feature for us.

00:03:45.580 --> 00:03:49.500
It's enabled by default
in QtKit and QtActiveX,

00:03:49.500 --> 00:03:52.760
and therefore the QuickTime player,
which is QtKit-based,

00:03:52.760 --> 00:03:54.120
gets that by default.

00:03:54.690 --> 00:03:57.460
Other apps,
you have to opt-in because the

00:03:57.460 --> 00:04:01.440
backward compatibility mode
is you open a movie that had,

00:04:01.530 --> 00:04:03.460
for instance, scaled edits,
and they change pitch.

00:04:03.460 --> 00:04:05.560
So if you opt-in using
new movie from properties,

00:04:05.570 --> 00:04:09.000
then you'll get this new property and
preserve the pitch on the scaled edits.

00:04:11.280 --> 00:04:14.240
We have high-resolution audio support
we've been talking about for some time,

00:04:14.240 --> 00:04:18.150
media sample rates up to 192 kHz,
sample depths to 24-bit,

00:04:18.210 --> 00:04:19.930
and 32-bit float.

00:04:20.280 --> 00:04:23.200
All the Core Audio internals
are 32-bit float,

00:04:23.200 --> 00:04:28.040
so you can store a movie in 64-bit float,
but it's all going to be converted

00:04:28.040 --> 00:04:30.200
to 32 when we're processing it.

00:04:30.540 --> 00:04:32.400
We support multichannels, as I mentioned.

00:04:32.540 --> 00:04:35.470
You can have single tracks,
which are multichannel tracks,

00:04:35.470 --> 00:04:39.890
or you can have individual tracks that
have individual contributing channels,

00:04:39.910 --> 00:04:43.710
and it all gets summed
into a multichannel layout.

00:04:43.720 --> 00:04:46.920
You can label channels with
their spatial location,

00:04:46.920 --> 00:04:49.540
like the speaker name
or speaker location,

00:04:49.540 --> 00:04:52.620
and it's all mixed and
routed under the covers.

00:04:53.270 --> 00:04:55.700
We support playback of up to 24 channels.

00:04:55.700 --> 00:05:00.320
There's really no soft
limit in what we support.

00:05:00.320 --> 00:05:03.930
We're just talking about what we
can guarantee and test right now.

00:05:05.390 --> 00:05:08.800
and Playback and Capture are supported
on most of the Pro Audio interfaces.

00:05:08.800 --> 00:05:12.110
If your favorite interface isn't covered,
please let us know and we'll make

00:05:12.110 --> 00:05:13.120
sure that we get it supported.

00:05:15.990 --> 00:05:18.880
Audio extraction is now the
one-stop shopping for getting

00:05:19.020 --> 00:05:20.460
audio out of your movie.

00:05:20.460 --> 00:05:26.680
Because it's using the playback engine
as opposed to a separate mechanism,

00:05:26.680 --> 00:05:28.220
what you hear is what you get.

00:05:28.310 --> 00:05:32.300
Finally, what you hear when you play the
movie is actually what is exported,

00:05:32.300 --> 00:05:35.660
which is a nice thing
from our point of view,

00:05:35.660 --> 00:05:36.850
and it should be from yours as well.

00:05:36.860 --> 00:05:40.670
Export of audio uses that same
audio extraction mechanism,

00:05:40.720 --> 00:05:42.420
so it's all integrated.

00:05:44.180 --> 00:05:46.750
Audio extraction works
on multiple threads,

00:05:46.750 --> 00:05:50.620
and the demo code that I'll be
showing you actually does export

00:05:50.620 --> 00:05:54.230
and playback on a separate thread,
so you can see how we can do that.

00:05:54.430 --> 00:05:56.720
There's a tech note on
the developer website,

00:05:56.730 --> 00:06:00.300
2125, that talks about
multithreading in QuickTime,

00:06:00.300 --> 00:06:03.290
and it's a very useful tech note
that you should look up if you want

00:06:03.300 --> 00:06:05.200
to do multithreaded applications.

00:06:07.740 --> 00:06:12.310
The compression configuration
that was Stood Sound is now

00:06:12.310 --> 00:06:16.130
superseded by Stood Audio,
and it provides access to

00:06:16.130 --> 00:06:18.840
all the different features,
all the codecs,

00:06:18.840 --> 00:06:24.650
all the multi-channel capabilities,
and you can either use its UI or

00:06:24.720 --> 00:06:28.770
you can configure it headless,
as it were,

00:06:29.130 --> 00:06:34.290
and put your own UI up and use
it to screen all your compression

00:06:34.600 --> 00:06:34.920
capabilities and whatnot.

00:06:36.140 --> 00:06:39.620
As in much of QuickTime 7,
we have a lot of properties now,

00:06:39.620 --> 00:06:42.020
and movie properties and track
properties are kind of the way

00:06:42.020 --> 00:06:43.240
that we're moving in the future.

00:06:43.240 --> 00:06:46.000
So we support that as well
with gain and mute properties,

00:06:46.000 --> 00:06:48.510
a balance property,
channel layout properties,

00:06:48.510 --> 00:06:49.800
and several others.

00:06:49.800 --> 00:06:53.980
There's some convenience functions for
the top-level movie and track control,

00:06:53.980 --> 00:06:58.070
like gain, mute, and balance,
and also level and frequency metering,

00:06:58.070 --> 00:07:01.980
which is now on the audio context
as opposed to individual tracks.

00:07:03.980 --> 00:07:08.320
And as I said,
QtKit and QtPlayer have been vetted

00:07:08.660 --> 00:07:10.420
and used properties extensively.

00:07:12.850 --> 00:07:16.060
On the capture side,
we have a lot of new things because

00:07:16.060 --> 00:07:19.020
we've got this new capture component,
SG Audio Channel.

00:07:19.020 --> 00:07:22.920
It allows you to have taps in your
audio chain as you're capturing.

00:07:22.920 --> 00:07:26.190
It's all integrated with Core Audio,
so you can get data out in formats

00:07:26.320 --> 00:07:28.020
that you can feed into audio units.

00:07:28.020 --> 00:07:31.560
We support multi-device
capture and preview.

00:07:31.560 --> 00:07:36.490
And there's quite a bit of sophisticated
routing and mixing of tracks and

00:07:36.490 --> 00:07:39.780
channels in SG Audio Channel,
and you can control that all.

00:07:39.780 --> 00:07:40.900
We'll show you how to do that.

00:07:42.720 --> 00:07:45.180
Of course,
it supports high-resolution audio.

00:07:45.180 --> 00:07:47.240
We can capture from most Pro decks.

00:07:47.240 --> 00:07:50.340
And on the fly,
you can do format conversion if you're

00:07:50.340 --> 00:07:56.640
doing bulk transfers and you don't want
to be storing unmixed 192 kHz data.

00:07:56.640 --> 00:07:59.140
You can downmix or compress on the fly.

00:08:02.900 --> 00:08:04.380
Can we go to the demo machine, please?

00:08:04.440 --> 00:08:08.680
And I'm going to show
you QuickTime Player.

00:08:09.180 --> 00:08:13.430
I'm going to take this movie that
I created from six individual

00:08:14.090 --> 00:08:16.290
unlabeled tracks of audio.

00:08:16.300 --> 00:08:19.140
It's a Thelonious Monk
song you might recognize.

00:08:19.140 --> 00:08:24.770
And bring it up, and I'll show you,
we can first of all...

00:08:25.000 --> 00:08:28.280
See, Movie Info says, well,
it's mono because all

00:08:28.280 --> 00:08:31.830
these tracks are unlabeled,
so they appear to be mono.

00:08:31.830 --> 00:08:38.320
But if we actually bring up
the Movie Properties panel,

00:08:38.320 --> 00:08:40.490
then you can see there's a
bunch of different tracks.

00:08:40.940 --> 00:08:43.600
So, for instance,
when I start playing it,

00:08:43.810 --> 00:08:46.300
you'll hear out of the
center speaker up there,

00:08:46.300 --> 00:08:49.820
this track, it's a mono track,
so it's going to the center speaker.

00:08:49.820 --> 00:08:57.340
But if I assign it to LFE,
where it belongs, then it'll be mono.

00:08:57.600 --> 00:09:00.050
Now in the LFE channel.

00:09:00.080 --> 00:09:04.600
And I can turn on this percussion track
and stick it over in the left channel.

00:09:04.600 --> 00:09:12.430
And add some drums and
put it in the back right.

00:09:15.920 --> 00:09:18.160
Maybe some piano,
put it in the front right.

00:09:18.240 --> 00:09:23.240
There it is.

00:09:23.240 --> 00:09:27.030
Finally, get some melody.

00:09:29.960 --> 00:09:31.900
And that'll be in center,
because it's the melody.

00:09:31.900 --> 00:09:39.170
And finally, some brass stabs we'll put
in the back corner there.

00:09:45.230 --> 00:09:49.530
And now you can see that we've,
the summary info shows all these labels,

00:09:49.530 --> 00:09:52.300
and now you can see what
the movie really is.

00:09:54.460 --> 00:09:57.060
Okay, and I'll save that.

00:09:57.070 --> 00:10:01.900
And, oh,
I can show you this while we're here.

00:10:01.910 --> 00:10:04.680
The AV Controls panel,
which you get even if you

00:10:04.680 --> 00:10:07.230
don't have the Pro key,
lets you play at other speeds

00:10:07.230 --> 00:10:08.960
without changing pitch.

00:10:08.960 --> 00:10:11.420
I'll just give you a
quick example of that.

00:10:16.200 --> 00:10:28.200
[Transcript missing]

00:10:35.950 --> 00:10:39.600
So we're going to talk about
some of the ways that you can

00:10:39.600 --> 00:10:41.030
do these in your applications.

00:10:41.030 --> 00:10:45.830
And we've taken the QtKit player
application that's in the SDK now and

00:10:46.150 --> 00:10:50.480
added a panel to it that's primarily
for demonstration purposes and to help

00:10:50.480 --> 00:10:52.440
you understand how audio is routed.

00:10:52.440 --> 00:10:53.770
And we'll show you that.

00:10:53.800 --> 00:11:08.740
Here's what it looks like.

00:11:09.810 --> 00:11:09.910
You'll see that on the left,
there's a display about the movie

00:11:09.910 --> 00:11:09.910
or about an individual track.

00:11:09.910 --> 00:11:09.910
And on the right,
there's a display about the

00:11:09.910 --> 00:11:09.910
device it's playing to or the
extraction that we're going to do.

00:11:11.620 --> 00:11:15.500
In the right,
I'll talk about the device first.

00:11:15.550 --> 00:11:19.280
We have a display of the
speaker setup of your device,

00:11:19.280 --> 00:11:22.060
and we have a button that
says Configure Speakers,

00:11:22.060 --> 00:11:25.080
and when you press that button,
it brings up Audio MIDI Setup,

00:11:25.160 --> 00:11:27.680
which is an application
in Application Utilities.

00:11:27.680 --> 00:11:29.380
You should all know
about Audio MIDI Setup,

00:11:29.380 --> 00:11:29.800
do you?

00:11:29.800 --> 00:11:32.570
If you plug in
multi-channel audio devices,

00:11:32.570 --> 00:11:35.830
you want to go there to be
able to configure the speakers

00:11:35.930 --> 00:11:37.980
and the formats and whatnot.

00:11:38.560 --> 00:11:40.970
I found out that a lot of
people didn't know that existed,

00:11:40.970 --> 00:11:43.360
so they were plugging in their
devices and didn't really

00:11:43.360 --> 00:11:44.560
know how to set them up.

00:11:44.560 --> 00:11:48.970
So I recommend that applications
actually have a Configure Speaker button

00:11:48.970 --> 00:11:51.060
or menu item that's very useful.

00:11:51.060 --> 00:11:54.560
And there's a gain slider on the bottom
that'll just track the movie gain,

00:11:54.560 --> 00:11:57.330
just so we can show how gain
is set and controlled and

00:11:57.330 --> 00:11:59.320
property listeners work for it.

00:11:59.480 --> 00:12:02.180
Let me talk for a second about gain.

00:12:02.610 --> 00:12:06.790
We've been moving from the notion
of volume to the notion of gain.

00:12:07.100 --> 00:12:11.840
Volume was a number between 0 and 255 and
was difficult to map to anything useful.

00:12:11.900 --> 00:12:15.680
Gain is a very explicit
mathematical function right now.

00:12:15.680 --> 00:12:19.600
So a gain of 1 means unity,
means it's the same thing

00:12:19.600 --> 00:12:21.130
the sound passes through.

00:12:21.130 --> 00:12:24.530
A gain of 2 multiplies the signal by 2,
which is effectively

00:12:24.530 --> 00:12:29.740
increasing it by 6 dB,
or a gain of 0.5 lowers it by 6 dB.

00:12:29.740 --> 00:12:33.030
So obviously a gain of 0 is silence.

00:12:33.160 --> 00:12:37.490
The Movie Audio Gain APIs and properties
replace the Movie Audio Volume APIs,

00:12:37.490 --> 00:12:40.060
which are now just kind
of implemented on them.

00:12:40.300 --> 00:12:44.170
And we have a mute API as well.

00:12:44.240 --> 00:12:46.020
Mute is independent from gain now.

00:12:46.040 --> 00:12:48.700
So in the old volume setting,
you had to say,

00:12:48.700 --> 00:12:53.170
set negative volume to get it to mute and
keep your notion of what the gain was.

00:12:53.180 --> 00:12:53.590
Well, now gain is constant.

00:12:53.650 --> 00:12:54.180
It's not going to be the same thing.

00:12:55.170 --> 00:12:57.440
We've been moving from volume to
volume and you can mute and unmute.

00:12:57.530 --> 00:12:58.640
And gain is not persistent.

00:12:58.640 --> 00:12:59.810
This is for playback.

00:12:59.840 --> 00:13:02.510
If you want persistent gain,
there's a property,

00:13:02.520 --> 00:13:05.920
which is the preferred-- movie
preferred volume or something.

00:13:05.920 --> 00:13:07.700
And that will save with the movie.

00:13:07.740 --> 00:13:11.080
We hope to add more persistence
features into our whole property

00:13:11.190 --> 00:13:14.720
functions into the APIs as well.

00:13:14.880 --> 00:13:17.120
And gain is listenable
from tracks and movies,

00:13:17.120 --> 00:13:22.240
so you can have your UI track changes
that are happening from other places.

00:13:23.400 --> 00:13:28.400
Actually, let me go to the slot,
to the demo machine.

00:13:28.450 --> 00:13:30.690
And I will show you

00:13:31.150 --> 00:13:37.510
This movie that I just saved on our
demo application comes up here as a

00:13:37.520 --> 00:13:38.790
little player and you can play it.

00:13:38.950 --> 00:13:42.100
This is the normal QtKit player.

00:13:42.100 --> 00:13:47.290
And if I go to Window Audio Extraction,
it will bring up that panel you saw.

00:13:49.520 --> 00:13:52.900
And here's the device layout.

00:13:52.900 --> 00:13:55.190
It's showing you that we
have a multi-channel layout.

00:13:55.190 --> 00:14:00.050
But in fact, after the 5.1 speakers here,
we have unknowns because it's

00:14:00.050 --> 00:14:02.400
a bigger device that has many
channels that are not labeled.

00:14:02.400 --> 00:14:03.960
So they just simply show up like that.

00:14:03.960 --> 00:14:11.600
If I press Configure Speakers,
you'll see Audio Mini Setup come up and

00:14:11.600 --> 00:14:11.600
show that we're playing to a mobile I.O.

00:14:11.800 --> 00:14:17.100
And if I can find it,
it's got 18 channels.

00:14:17.330 --> 00:14:21.700
And if I say configure speakers,
then I can press multi-channel and see

00:14:21.700 --> 00:14:24.430
the speakers I've actually enabled.

00:14:24.510 --> 00:14:26.940
And there's several
things I can select from.

00:14:27.000 --> 00:14:30.440
Once you set a
multi-channel layout in AMS,

00:14:30.530 --> 00:14:31.660
that's the preferred thing.

00:14:31.660 --> 00:14:33.940
That's the thing that
QuickTime will find.

00:14:34.010 --> 00:14:38.040
So if you need to go back to stereo,
you only have two speakers hooked up,

00:14:38.090 --> 00:14:40.480
you need to actually select
it as a stereo device.

00:14:40.590 --> 00:14:43.060
Now this is new in Tiger,
you may have a little

00:14:43.060 --> 00:14:44.540
difficulty with Panther.

00:14:44.660 --> 00:14:47.530
But I'm sure you're
all running Tiger now,

00:14:47.530 --> 00:14:48.600
aren't you?

00:14:48.740 --> 00:14:51.100
And then there's the
gain setting as well,

00:14:51.100 --> 00:14:53.610
and that will track...

00:14:56.600 --> 00:14:59.370
If I change volume here,
you'll see that changes down and listens.

00:14:59.380 --> 00:15:03.380
Okay.

00:15:07.390 --> 00:15:13.880
On the left-hand side-- well,
let me go back to the slides.

00:15:16.920 --> 00:15:19.900
The device layout,
if you plug in a multi-channel

00:15:19.900 --> 00:15:24.000
device and it's unconfigured,
the default will be stereo.

00:15:24.000 --> 00:15:28.420
Now, I hope you're all running 7.0.1,
the update that we just released,

00:15:28.420 --> 00:15:31.900
because there was a bug that if you
plugged in a device and it was not known,

00:15:31.900 --> 00:15:35.290
then it would assume it was
multi-channel and you'd find your mono

00:15:35.290 --> 00:15:38.800
tracks going to the third channel,
which is not what's supposed to

00:15:38.800 --> 00:15:40.950
happen in 7.0.1 that's fixed.

00:15:40.960 --> 00:15:42.920
Please stay up to date with our updates.

00:15:43.010 --> 00:15:44.060
We do this for you.

00:15:45.560 --> 00:15:50.730
Audio MIDI Setup is your friend,
and as I mentioned, the channel layouts,

00:15:50.730 --> 00:15:53.400
once you set multi-channel layouts,
that trumps the stereo pair.

00:15:53.400 --> 00:15:56.400
And remember,
mono tracks route to the center speaker,

00:15:56.400 --> 00:16:01.400
so once you have a center speaker,
you're routing mono to that,

00:16:01.400 --> 00:16:03.390
not to left and right anymore.

00:16:03.400 --> 00:16:09.140
Okay,
now I'll go on to the routing panel.

00:16:09.140 --> 00:16:09.140
We've got...

00:16:09.820 --> 00:16:14.960
The summary channel layout is a
description of all the channels

00:16:15.340 --> 00:16:17.640
in the movie summed together.

00:16:17.640 --> 00:16:21.040
So if you've got multiple tracks,
it sort of tells you what the summary is.

00:16:21.040 --> 00:16:23.640
If all the lefts would mix together,
all the rights would mix together,

00:16:23.640 --> 00:16:27.280
and the summary tells you what the
final mix is going to look like.

00:16:27.280 --> 00:16:31.340
So this shows the summary channel layout.

00:16:31.340 --> 00:16:34.590
If you select in the top
selector a specific track,

00:16:34.650 --> 00:16:37.470
then it'll show that track and
all the channels in that track,

00:16:37.640 --> 00:16:41.940
and this will let you pop up and
change the channels that are selected.

00:16:44.170 --> 00:16:47.410
And there's a gain slider for
the track as well that stays in

00:16:47.410 --> 00:16:48.520
sync with a property listener.

00:16:53.070 --> 00:16:59.390
I'll show you this and show you some
of the code for it on the demo machine.

00:17:02.360 --> 00:17:06.840
So here you've got that layout,
and we have selectors for all the tracks.

00:17:06.940 --> 00:17:10.120
And you can change the speakers
right there if you'd like.

00:17:10.180 --> 00:17:13.550
And that will all take effect
just as it did in player.

00:17:13.700 --> 00:17:15.860
Let me show you the code.

00:17:16.870 --> 00:17:20.890
I actually didn't show you
the code for the device stuff,

00:17:20.900 --> 00:17:22.750
so let me just show you that first.

00:17:23.010 --> 00:17:26.080
To get the gain for a movie,
you can actually either call

00:17:26.150 --> 00:17:33.340
getMovieAudioGain with a float argument,
or get the movie property for gain.

00:17:33.370 --> 00:17:35.420
Either one works.

00:17:36.030 --> 00:17:41.080
If you want to be listening
for changes in the device,

00:17:41.080 --> 00:17:41.080
then...

00:17:44.990 --> 00:17:49.600
You say, QT, add movie property listener,
and specify the property

00:17:49.610 --> 00:17:53.510
you're interested in,
and then the...

00:17:55.700 --> 00:18:15.800
[Transcript missing]

00:18:19.360 --> 00:18:23.700
Such a big font,
it's a little difficult to navigate.

00:18:23.740 --> 00:18:25.690
Is here.

00:18:26.050 --> 00:18:27.790
So here's the gain change callback.

00:18:27.870 --> 00:18:29.830
It gets the property class and ID.

00:18:29.930 --> 00:18:31.990
We just check to see if
it's the right movie.

00:18:32.080 --> 00:18:34.940
Otherwise, we only have one property
we're listening for now.

00:18:35.030 --> 00:18:38.800
So we'll say update what you're
displaying for that property.

00:18:38.800 --> 00:18:42.950
For the device channel layout...

00:18:43.870 --> 00:18:45.840
Once we have a movie open, we can say,
QT,

00:18:45.840 --> 00:18:49.570
get movie property info on that movie,
and say, we're interested in the

00:18:49.580 --> 00:18:50.670
device channel layout.

00:18:50.720 --> 00:18:52.910
Tell us what you've got,
and it'll tell you the

00:18:52.910 --> 00:18:54.110
size of that device.

00:18:54.120 --> 00:18:56.040
That's a variable size structure,
depending on how many

00:18:56.040 --> 00:18:57.080
channels are in the movie.

00:18:57.080 --> 00:19:01.490
So you always want to get the size first,
and then allocate something to hold it,

00:19:01.490 --> 00:19:04.790
and then you can do get movie
property and actually load the

00:19:04.800 --> 00:19:07.320
channel layout into your application.

00:19:09.990 --> 00:19:13.700
It's very easy to launch an
Audio MIDI setup from Cocoa,

00:19:13.700 --> 00:19:17.890
just launch applications.

00:19:17.890 --> 00:19:17.890
So,
very easy to add into your applications.

00:19:18.110 --> 00:19:20.280
Now on the left-hand side,
we had the movie summary layout.

00:19:20.280 --> 00:19:24.190
Again, that's just a property,
and it's the summary channel layout.

00:19:24.190 --> 00:19:26.140
And it's the same exact code.

00:19:26.140 --> 00:19:28.900
You say, get movie property of
summary channel layout,

00:19:28.900 --> 00:19:32.530
get property info, gets the size,
allocate, and then get the property,

00:19:32.530 --> 00:19:34.610
and you've got it loaded in memory.

00:19:35.080 --> 00:19:40.410
We actually have another facility in this
application called Expand Channel Layout,

00:19:40.430 --> 00:19:43.360
which will make sure that instead
of getting a tag that says,

00:19:43.360 --> 00:19:47.000
for instance, 5.1 or stereo,
you get all the channel names

00:19:47.000 --> 00:19:49.000
expanded into your structure.

00:19:49.000 --> 00:19:50.590
And that's useful for presenting UI.

00:19:50.720 --> 00:19:53.380
You want to get the individual
channel names and whatnot.

00:19:53.380 --> 00:19:55.740
You just need to expand it so
you can get them one by one.

00:19:55.740 --> 00:19:57.560
You'll see all that in the sample code.

00:19:59.690 --> 00:20:03.370
Once you select a track
on that left-hand side,

00:20:03.380 --> 00:20:07.130
we do another Get Property Info to
get the channel layout of that track,

00:20:07.220 --> 00:20:10.800
and then we allocate and
load that into memory.

00:20:10.800 --> 00:20:15.830
If you select a different channel layout,
well, all you do is call...

00:20:17.180 --> 00:20:20.020
Set property of the channel
layout that you have,

00:20:20.020 --> 00:20:21.600
and remember your size.

00:20:23.950 --> 00:20:26.710
And Track Audio Gain is just
the same as Movie Audio Gain,

00:20:26.740 --> 00:20:32.000
QT Set Track property or
use the Track Framework

00:20:32.000 --> 00:20:34.680
API for your gain property.

00:20:34.680 --> 00:20:38.640
Now I'll go back to slides, please.

00:20:43.450 --> 00:20:47.440
Let me talk a little bit
about audio channel labels.

00:20:47.480 --> 00:20:51.160
Every channel is either
unlabeled or it's labeled.

00:20:51.160 --> 00:20:53.480
And if it's labeled,
then it can have a spatial

00:20:53.480 --> 00:20:54.590
or a non-spatial label.

00:20:54.640 --> 00:20:57.340
The spatial labels are
defined in CoreAudioTypes.h

00:20:57.340 --> 00:20:59.920
and are things like left,
right, center, left surround,

00:20:59.920 --> 00:21:00.610
right surround, whatnot.

00:21:00.670 --> 00:21:02.980
There's a big list of them.

00:21:03.910 --> 00:21:08.740
Non-spatial labels are things like mono,
which just says this is mono data,

00:21:08.740 --> 00:21:11.200
and will route to center
speaker if there is one.

00:21:11.200 --> 00:21:12.630
Otherwise,
it will route to left and right.

00:21:12.640 --> 00:21:16.900
And we have these labels called discrete,
number discrete labels.

00:21:16.900 --> 00:21:19.920
So, for instance,
if you have a mixer associated with

00:21:19.920 --> 00:21:23.330
your device instead of actual speakers,
and you want to say, oh,

00:21:23.430 --> 00:21:26.780
I've got 16 mixer inputs,
and I want to route this

00:21:27.300 --> 00:21:29.710
track to mixer input 5...

00:21:30.130 --> 00:21:35.940
Numbering from zero, you can, say,
set this channel label to discrete 5,

00:21:35.940 --> 00:21:39.580
and then it'll play to the
sixth output of the device,

00:21:39.580 --> 00:21:41.510
and then everything will route that way.

00:21:41.550 --> 00:21:44.160
So this bypasses the mixer capabilities,
really.

00:21:46.300 --> 00:21:48.170
Unlabeled content if we see old movies.

00:21:48.200 --> 00:21:50.500
Without labels,
we assume that one channel is mono,

00:21:50.500 --> 00:21:51.580
two channels stereo.

00:21:51.580 --> 00:21:54.030
Anything bigger than
that and not labeled,

00:21:54.030 --> 00:21:56.080
we'll say, well,
we don't know what that is,

00:21:56.080 --> 00:21:58.140
so we'll call it all
mono so you'll hear it,

00:21:58.140 --> 00:22:01.120
and then you can set the labels
and route it the way you want.

00:22:04.160 --> 00:22:06.700
I'm going to show you a
little bit about this.

00:22:06.750 --> 00:22:09.850
If, for instance,
we have a 5.1 movie and we're

00:22:09.980 --> 00:22:12.730
playing to a 5.1 device,
the movie mixer is very straightforward.

00:22:12.760 --> 00:22:15.870
We just multiply straight through.

00:22:16.250 --> 00:22:18.720
Now, if we were playing this same
movie to a stereo device,

00:22:18.750 --> 00:22:19.700
it gets a little trickier.

00:22:19.700 --> 00:22:24.020
And what happens is the left and right
obviously go straight to left and right.

00:22:24.350 --> 00:22:27.690
Center now has to split and
go to both left and right.

00:22:27.720 --> 00:22:32.260
And as it's split,
each side is dropped down by 3 dB,

00:22:32.260 --> 00:22:35.250
and that's so that perceptually
you'll hear the same volume.

00:22:35.260 --> 00:22:41.140
The LFE, or the low-frequency speaker,
just goes away because normally you

00:22:41.140 --> 00:22:44.630
don't want to hear low-frequency
content played in normal speakers.

00:22:44.780 --> 00:22:46.540
It's not good for them,
and it's not good for you.

00:22:46.540 --> 00:22:52.460
But the left surround and right
surround are also dropped down 3 dB

00:22:52.460 --> 00:22:55.000
because they're presumably behind
you and a little less important,

00:22:55.000 --> 00:22:57.000
and then routed to
left and right as well.

00:22:57.000 --> 00:23:01.520
So let me show you how that
will work on the demo machine.

00:23:07.430 --> 00:23:11.300
If I bring up the extraction panel,
you can see that the default

00:23:11.300 --> 00:23:13.400
extraction is the summary layout.

00:23:13.420 --> 00:23:15.440
Bring this back to summary.

00:23:15.460 --> 00:23:19.980
And if I say preview, I'll hear that,
just as we heard before,

00:23:19.980 --> 00:23:21.790
in all the speakers.

00:23:25.300 --> 00:23:29.640
Now if I say play to stereo,
or extract to stereo,

00:23:29.640 --> 00:23:32.870
it'll do the mixing we just saw,
and you'll hear them only left and right.

00:23:32.900 --> 00:23:35.420
And you hear there's no bass.

00:23:39.680 --> 00:23:43.190
If we were extracting quad,
we'd have left-right, left-surround,

00:23:43.200 --> 00:23:45.710
right-surround, so the flute would
move to left and right,

00:23:45.810 --> 00:23:48.480
the back speakers would stay the same,
but again, there's no bass.

00:23:48.480 --> 00:23:55.530
So you hear the conga and
the brass in the back now.

00:24:00.090 --> 00:24:03.730
So this is not a,
this panel is not really designed

00:24:03.850 --> 00:24:06.480
for doing much useful work,
but it's really designed to

00:24:06.490 --> 00:24:10.760
help you visualize or audio-lize
what's going on with the movie,

00:24:10.760 --> 00:24:11.900
and it should be very helpful.

00:24:11.900 --> 00:24:15.900
And also, obviously,
all the sample code is very interesting.

00:24:16.190 --> 00:24:20.150
And I'm going to show
you some sample code.

00:24:22.200 --> 00:24:25.160
Where is it?

00:24:25.250 --> 00:24:28.910
I'm going to talk about the
movie audio extraction now.

00:24:29.500 --> 00:24:33.420
And basically what you do is
you start an extraction session,

00:24:33.420 --> 00:24:36.690
and let's movie audio extraction begin.

00:24:36.700 --> 00:24:40.060
And now you've got a handle,
and that is related to the

00:24:40.390 --> 00:24:41.940
movie you started with.

00:24:41.940 --> 00:24:46.530
And then you get properties,
set properties, fill buffer,

00:24:46.590 --> 00:24:50.090
which means get data from
the audio extraction,

00:24:50.190 --> 00:24:55.760
and then do whatever you want with it,
and then end the audio extraction.

00:24:55.760 --> 00:24:56.700
Pretty straightforward.

00:24:56.700 --> 00:24:58.890
So here's the begin.

00:24:58.900 --> 00:25:04.030
To get the stream layout, stream format,
you ask for the audio stream basic

00:25:04.270 --> 00:25:08.540
description from the extraction
session that you've opened.

00:25:08.540 --> 00:25:12.600
And to get the channel layout,
which is the default layout that started

00:25:12.600 --> 00:25:17.010
when you first opened the extraction,
which is the summary channel layout,

00:25:17.010 --> 00:25:21.520
you say get property on the extraction
of the channel layout property.

00:25:21.520 --> 00:25:22.720
This is before.

00:25:22.720 --> 00:25:26.680
You want to get a get info
as well to get the size.

00:25:26.700 --> 00:25:28.910
Let's up here.

00:25:30.490 --> 00:25:33.710
Then if you want to
set a different format,

00:25:33.710 --> 00:25:37.690
then you call set property on that.

00:25:38.000 --> 00:25:58.000
[Transcript missing]

00:25:58.630 --> 00:26:00.600
And that really bypasses
all of the mixing,

00:26:00.600 --> 00:26:05.600
and you get all those speakers,
all those channels out individually.

00:26:05.910 --> 00:26:09.940
There's also a current time,
which specifies where in the movie

00:26:09.940 --> 00:26:11.740
you're going to start the extraction,
so you don't always have

00:26:11.740 --> 00:26:12.640
to start at the beginning.

00:26:12.640 --> 00:26:15.790
So you set the property current time,
and then you start

00:26:15.790 --> 00:26:17.620
extraction from that point.

00:26:17.620 --> 00:26:20.460
You can always set current time
and start a new point if you like,

00:26:20.460 --> 00:26:21.990
so you can jump around that way.

00:26:24.380 --> 00:26:27.290
Once you want to get your data,
you use Movie Audio Extraction

00:26:27.290 --> 00:26:32.580
Fill Buffer with a buffer list,
which is a Core Audio buffer list,

00:26:32.630 --> 00:26:36.240
and just the number of frames you want,
and you're in business.

00:26:36.240 --> 00:26:37.440
Then you can do anything
you want with it.

00:26:37.500 --> 00:26:41.750
And when you're done, of course,
you say Movie Audio Extraction End.

00:26:41.760 --> 00:26:44.300
So I'll go back to Slides.

00:26:50.730 --> 00:26:53.750
So again,
there's that routing pane that you'll

00:26:53.750 --> 00:26:57.910
see in the example code with the
layout selector and lets you display

00:26:57.910 --> 00:27:02.130
and edit the channel labels of the
particular extraction you want to do.

00:27:02.140 --> 00:27:06.110
So you can come up with funny extractions
and see how that's all going to work.

00:27:06.180 --> 00:27:09.780
Start and end times, preview and export.

00:27:09.780 --> 00:27:14.890
The preview and export both work
on separate threads if they can.

00:27:14.890 --> 00:27:14.890
I'll talk about that in a minute.

00:27:16.140 --> 00:27:17.640
Quick summary of audio extraction.

00:27:17.640 --> 00:27:21.220
Begin, set properties, get properties,
fill buffer, and end.

00:27:21.240 --> 00:27:24.630
You'll only get data from
participating audio context tracks.

00:27:24.660 --> 00:27:28.300
That means soundtracks right now,
but there's more become implemented

00:27:28.300 --> 00:27:29.740
then you get them as well.

00:27:29.770 --> 00:27:33.250
The movie must be active when
you start because non-active

00:27:33.250 --> 00:27:36.100
movies don't have any audio,
essentially.

00:27:36.100 --> 00:27:39.720
And all the tracks that you want
to hear should be enabled as well.

00:27:40.340 --> 00:27:43.070
The first thing that happens
when you start pulling data

00:27:43.070 --> 00:27:46.480
through is you clone the movie,
which makes a copy of it.

00:27:46.480 --> 00:27:49.640
And that means that if you make
edits in the movie you started with,

00:27:49.640 --> 00:27:52.380
they're not going to be
reflected in your extraction.

00:27:52.380 --> 00:27:56.000
Now what happens is you configure
your extraction and then start.

00:27:56.000 --> 00:27:58.800
And the cloning starts
when you start fill buffer.

00:27:58.870 --> 00:28:01.440
So you can configure to
your heart's content.

00:28:01.510 --> 00:28:04.730
Once you say fill buffer,
your configuration is frozen and

00:28:04.730 --> 00:28:08.380
that extraction session is only
good for that configuration.

00:28:08.380 --> 00:28:10.310
Then if you want to change
what you're extracting,

00:28:10.320 --> 00:28:10.320
you can do that.

00:28:10.430 --> 00:28:12.320
Once you're done extracting,
you close it and open a new one.

00:28:12.460 --> 00:28:14.250
Otherwise,
we recommend that you keep it open

00:28:14.600 --> 00:28:17.390
because it's a little more expensive
to close and reopen every time you want

00:28:17.450 --> 00:28:19.120
to pull a little data out of the movie.

00:28:21.310 --> 00:28:23.390
The initial default, as I said,
is the summary channel

00:28:23.530 --> 00:28:26.500
layout of the movie,
and we look at all the tracks

00:28:26.570 --> 00:28:29.500
and find the highest sample rate,
and we'll give you that sample rate.

00:28:29.500 --> 00:28:31.080
If you want to lower it,
you're welcome to.

00:28:31.080 --> 00:28:34.030
We only support PCM data or
uncompressed data coming out

00:28:34.030 --> 00:28:35.620
of movie audio extraction.

00:28:35.620 --> 00:28:39.050
You'll have to do your own
compression if you want to do that.

00:28:41.210 --> 00:28:45.040
The all-channels discrete option,
as I said, circumvents the mixer.

00:28:45.040 --> 00:28:49.240
Once you set that,
you can get your stream layout again,

00:28:49.240 --> 00:28:51.230
and that'll tell you how many
channels you're going to get.

00:28:53.930 --> 00:28:56.330
Set current time to set the
start point of where you're

00:28:56.330 --> 00:28:57.480
going to begin extracting.

00:28:57.480 --> 00:29:03.600
If you have compressed audio data,
I'll mention that often decompressors

00:29:03.600 --> 00:29:07.040
have a little latency to get up
to speed to get the right thing.

00:29:07.040 --> 00:29:10.790
So if you try to seam together pieces
that should be next to each other but

00:29:10.840 --> 00:29:15.320
you haven't pulled all the way through,
or this way, I guess, to you,

00:29:15.320 --> 00:29:19.470
then you may get a little bit of an
audio glitch at the beginning because the

00:29:19.510 --> 00:29:22.250
decompressor hasn't been properly primed.

00:29:22.300 --> 00:29:25.540
We actually hope we can
actually fix this internally,

00:29:25.540 --> 00:29:28.850
but in the meantime,
you might want to start your extraction

00:29:28.850 --> 00:29:32.480
a little bit earlier and throw away
the initial quarter second or so

00:29:32.480 --> 00:29:36.060
to get the decompressor primed,
and then you'll get valid data out.

00:29:38.640 --> 00:29:40.390
Once you go past the end of the movie,
you'll get silence.

00:29:40.480 --> 00:29:41.740
At the end of the track,
you'll get silence.

00:29:41.740 --> 00:29:44.470
So just get the movie or track
durations to limit how much

00:29:44.480 --> 00:29:46.100
you're going to extract out.

00:29:48.420 --> 00:29:52.440
And as I said, we can migrate movies to
another thread so you can do

00:29:52.440 --> 00:29:53.820
extraction in the background.

00:29:53.820 --> 00:29:57.960
But remember, this only works if all the
codecs are thread-safe.

00:29:58.170 --> 00:30:00.440
Everything that the movie opens
has to be thread-safe or else

00:30:00.440 --> 00:30:01.420
you're not allowed to migrate.

00:30:01.420 --> 00:30:04.410
So if there's any audio
codec developers out there,

00:30:04.570 --> 00:30:07.080
please make sure that your
codecs are thread-safe.

00:30:07.140 --> 00:30:09.900
And then once they are,
mark them with the component

00:30:09.900 --> 00:30:13.740
thread-safe flag so that we'll
know that and applications will

00:30:13.740 --> 00:30:15.600
be able to access them that way.

00:30:18.290 --> 00:30:22.280
Let me go back to the
demo machine for a moment.

00:30:25.560 --> 00:30:28.690
And I'll just show you that
once you select a channel

00:30:28.690 --> 00:30:33.000
layout on the extraction,
we can actually make funny ones,

00:30:33.000 --> 00:30:36.100
but you don't want to
have duplicate channels.

00:30:36.100 --> 00:30:38.960
It actually kind of works as expected,
but you normally would not

00:30:38.970 --> 00:30:41.500
want to extract with two
left channels or something.

00:30:41.500 --> 00:30:42.360
That's kind of weird.

00:30:42.360 --> 00:30:46.770
But you can set start time and end time,
and preview and export will follow that.

00:30:49.540 --> 00:30:57.340
The code that I want to show you
is that code for multi-threading.

00:30:57.340 --> 00:31:02.720
So when we say start preview,
when you've hit the preview button,

00:31:03.030 --> 00:31:06.230
then we say we want to migrate
the movie that's the main

00:31:06.350 --> 00:31:08.940
thread movie to another thread.

00:31:08.940 --> 00:31:13.750
So we're going to put it into a handle
and make a new movie from that handle.

00:31:13.750 --> 00:31:16.340
Actually, this code needs to be changed.

00:31:16.340 --> 00:31:18.530
It's not going to preserve the pitch,
preserving various--we need

00:31:18.530 --> 00:31:20.980
to make a quick change to
this before we publish it.

00:31:21.040 --> 00:31:24.610
Then you detach the movie
from the current thread,

00:31:24.610 --> 00:31:26.170
saying let go of it.

00:31:26.170 --> 00:31:26.170
And

00:31:27.940 --> 00:31:32.060
You spawn a thread in your application
so your new thread can take over.

00:31:32.060 --> 00:31:34.910
That's Detach New Thread Selector,
and it gives you a

00:31:35.020 --> 00:31:36.380
function that you can call.

00:31:36.380 --> 00:31:41.110
And then once you get in that function,
you have to say Enter Movies on

00:31:41.110 --> 00:31:46.180
Thread to say this thread is going
to be using the QuickTime APIs,

00:31:46.180 --> 00:31:48.620
and then Attach Movie to Current Thread.

00:31:48.640 --> 00:31:51.300
It says bring this
movie into this thread,

00:31:51.300 --> 00:31:53.450
and once that succeeds,
you can then do your

00:31:53.450 --> 00:31:55.180
extraction on that thread.

00:31:57.800 --> 00:32:01.330
Back to slides.

00:32:07.860 --> 00:32:13.300
I'm going to bring up Brad Ford to talk
about Audio Capture and SG Audio Channel.

00:32:16.300 --> 00:32:19.070
Thanks.

00:32:19.320 --> 00:32:20.500
Hi, thanks for coming.

00:32:20.500 --> 00:32:22.300
I'm Brad Ford.

00:32:22.300 --> 00:32:25.290
Let's talk about audio capture,
and that means sequence grabber.

00:32:25.330 --> 00:32:29.370
If you've been here the last two years,
you know that this message is

00:32:29.400 --> 00:32:31.330
starting to sound repetitive
because we've been talking about

00:32:31.330 --> 00:32:33.300
the same things over and over,
but now we finally shipped it,

00:32:33.300 --> 00:32:36.890
and one might think, "Well,
what have you been doing

00:32:36.890 --> 00:32:39.300
in all that time?" Well,
we've been vetting it,

00:32:39.300 --> 00:32:42.240
and we had two very important
early adopters to this technology.

00:32:42.300 --> 00:32:44.300
I'd like to give you
a demo of one of them.

00:32:44.300 --> 00:32:47.530
Could we switch to demo two, please?

00:32:51.800 --> 00:32:55.700
Some of you may have heard of this
application called Final Cut Pro.

00:32:55.790 --> 00:32:57.840
Some of you might even use it.

00:32:59.690 --> 00:33:02.490
Uh, they had a tough problem.

00:33:02.720 --> 00:33:06.040
A lot of people were buying
these expensive decks like

00:33:06.040 --> 00:33:08.040
these DVC Pro HD decks.

00:33:08.070 --> 00:33:12.300
They're $25,000 decks that can
support eight channels of audio,

00:33:12.330 --> 00:33:18.280
and they can bring in
these huge 1080i 60 video

00:33:18.380 --> 00:33:25.270
Streams,
but only two channels of audio at a

00:33:25.270 --> 00:33:25.270
time because Sequence Grabber only
supported two channels of audio.

00:33:25.420 --> 00:33:28.910
Well,
they were very eager to see us adopt

00:33:29.180 --> 00:33:31.930
Core Audio on the capture side,
and we went ahead and did that.

00:33:31.980 --> 00:33:38.720
So I've got a DVC Pro HD deck up here,
and as you can see,

00:33:38.720 --> 00:33:40.880
it's got eight channels of audio.

00:33:40.880 --> 00:33:44.890
I'm only interested in four
of them because that's where

00:33:44.890 --> 00:33:47.040
I've got my audio playing.

00:33:47.040 --> 00:33:53.690
Now, their interface is really interested
in stereo pairs or dual monos.

00:33:53.820 --> 00:33:56.600
They're not really a surround app
so much as a multi-channel app.

00:33:56.700 --> 00:34:01.610
So they were interested
in being able to have...

00:34:02.660 --> 00:34:06.700
Audio brought in to separate tracks
in the QuickTime movie to preserve

00:34:06.700 --> 00:34:10.220
their idea of mononess versus
stereoness without needing to get

00:34:10.310 --> 00:34:11.940
n number of channels in the track.

00:34:12.060 --> 00:34:14.120
Well, SG Audio Channel supports that.

00:34:14.260 --> 00:34:17.190
If you click this button,
you're going to get two tracks of audio.

00:34:17.200 --> 00:34:20.230
They instantiate two SG Audio channels
to get these two tracks.

00:34:20.290 --> 00:34:23.210
So if I do this,
because I've turned off these guys,

00:34:23.210 --> 00:34:26.390
I'm only going to get four
channels of audio in the movie,

00:34:26.390 --> 00:34:28.700
and they will be in four audio tracks.

00:34:28.770 --> 00:34:31.730
If I click the gang buttons,
we'll get two tracks of

00:34:31.860 --> 00:34:33.180
audio each with stereo.

00:34:33.180 --> 00:34:36.740
So that's a pretty neat,
interesting use of the

00:34:36.740 --> 00:34:38.530
new API right there.

00:34:38.530 --> 00:34:42.020
And you can see we can
bring in 1080i material.

00:34:44.390 --> 00:34:49.850
Uh, and it's got, uh, as we would expect,
four channels of audio,

00:34:49.850 --> 00:34:51.800
and you can see the
waveforms right there.

00:34:51.970 --> 00:34:55.750
Uh, but they're not the only
interesting clients.

00:34:55.870 --> 00:35:00.840
Another interesting client is, uh,
not Safari.

00:35:00.900 --> 00:35:03.490
'Cause what would Safari want
to capture audio for?

00:35:03.680 --> 00:35:09.250
Uh... Set my deck over to...

00:35:11.240 --> 00:35:13.460
Play mode.

00:35:13.460 --> 00:35:16.600
QuickTime Player now supports
audio capture as well.

00:35:16.750 --> 00:35:20.700
So we can bring in the same audio
using the same SG Audio channel.

00:35:20.700 --> 00:35:23.440
It's doing metering.

00:35:23.440 --> 00:35:25.040
You can see that right here.

00:35:25.040 --> 00:35:32.730
♪ Or you can also do an audio recording,
audio only from the same source.

00:35:36.460 --> 00:35:40.480
Okay, so I just stopped my
recording and there it is.

00:35:40.530 --> 00:35:42.280
Pretty interesting.

00:35:46.230 --> 00:35:50.170
Uh, and along those lines, uh,
so you just saw I captured a little

00:35:50.320 --> 00:35:54.600
snippet of a DVC Pro HD movie.

00:35:54.640 --> 00:35:57.400
Well, you guys are all here presumably
because you like QuickTime,

00:35:57.400 --> 00:36:00.430
and QuickTime's all about movies,
so let's take a little break

00:36:00.430 --> 00:36:02.960
and watch a stupid movie,
shall we?

00:36:05.420 --> 00:36:08.860
This one I captured
from a DVC Pro HD deck.

00:36:09.330 --> 00:36:12.740
So it's 1080i 6D with
four channels of audio.

00:36:12.740 --> 00:36:14.900
It was brought in into
four separate tracks,

00:36:14.900 --> 00:36:16.960
as you can see here.

00:36:17.000 --> 00:36:19.140
And the only change I had to
do after bringing it in with

00:36:19.260 --> 00:36:23.200
Final Cut was to label them left,
right, left surround, right surround.

00:36:23.200 --> 00:36:33.580
Can we buck it up a little bit?

00:38:41.450 --> 00:38:44.200
Our computer is great.

00:38:44.340 --> 00:38:48.400
Let's go back to slides.

00:38:48.420 --> 00:38:50.400
So, using SG Audio Channel.

00:38:50.730 --> 00:38:52.390
You too can do that.

00:38:52.500 --> 00:38:55.400
Let's look at a block diagram
of the SG Audio Channel.

00:38:55.500 --> 00:38:57.400
So this is what it looks
like from the inside.

00:38:57.400 --> 00:38:59.400
We just saw from the outside.

00:38:59.410 --> 00:39:03.330
The deck bringing in audio,
and we saw it coming out the other end.

00:39:03.400 --> 00:39:06.480
The important thing to realize
with SG Audio Channel is

00:39:06.480 --> 00:39:09.400
that each instantiation of it
equals one track in the movie,

00:39:09.400 --> 00:39:11.400
as it shows right here.

00:39:11.400 --> 00:39:15.400
One SG Audio Channel equals
one track in the movie.

00:39:15.400 --> 00:39:20.370
Inside, it's got a matrix mixer,
an audio converter, a cue,

00:39:20.390 --> 00:39:22.390
and eventually gets written to file.

00:39:22.400 --> 00:39:24.510
One nice thing about it over
the old implementation is

00:39:24.540 --> 00:39:26.360
that we have good threading.

00:39:26.400 --> 00:39:31.150
So we bring in audio on the
Core Audio HAL I/O thread.

00:39:31.400 --> 00:39:35.400
We process it on a thread that's
owned by the SG Audio Channel,

00:39:35.400 --> 00:39:37.400
a high-priority worker thread
that does the conversion,

00:39:37.400 --> 00:39:43.420
the mixing, and then it's cued up there,
and then we write to disk on

00:39:43.570 --> 00:39:46.400
the main thread at SG idle time.

00:39:47.330 --> 00:39:48.300
Migration Story.

00:39:48.300 --> 00:39:52.440
If any of you use Sequence Grabber and
you use the current SG Sound Channel,

00:39:52.440 --> 00:39:55.070
change to the new one, please.

00:39:55.120 --> 00:39:57.500
This is a replacement
for the SG Sound Channel.

00:39:57.500 --> 00:39:59.560
Applications must opt in.

00:39:59.560 --> 00:40:02.630
We couldn't make it as automatic
as playback and extraction

00:40:02.750 --> 00:40:07.340
and export because the old
channel was too tightly wound.

00:40:07.340 --> 00:40:12.320
Well, it was too tightly coupled to
the sound input components.

00:40:12.340 --> 00:40:15.180
The SG Sound Channel is
in maintenance mode.

00:40:15.180 --> 00:40:17.830
A lot of you post to the
QuickTime API list about problems

00:40:17.860 --> 00:40:19.670
with Sequence Grabber and sound.

00:40:19.670 --> 00:40:23.420
Those will be addressed
in the SG Audio Channel.

00:40:24.520 --> 00:40:27.400
It has configuration through
component properties.

00:40:27.400 --> 00:40:28.470
We'll see more about that.

00:40:28.540 --> 00:40:34.480
Now, one caveat is that we did not ship
an SG Settings dialog in QuickTime 7

00:40:34.480 --> 00:40:37.190
for this new audio channel,
but I'm going to show you some

00:40:37.190 --> 00:40:39.710
sample code on how you can
write your own UI based on the

00:40:39.710 --> 00:40:41.120
properties that are supported.

00:40:41.120 --> 00:40:47.360
One caveat with our device support is
that we still do not have a DV25 or DV50

00:40:47.360 --> 00:40:51.080
Core Audio HAL plugin or kernel driver.

00:40:51.080 --> 00:40:53.170
It's still the sound manager one.

00:40:53.770 --> 00:40:58.320
Well, we don't force you to use the
old SG Sound Channel just for DV.

00:40:58.320 --> 00:41:01.170
We've shimmed that into
the SG Audio Channel so you

00:41:01.260 --> 00:41:02.850
can use it for DV as well.

00:41:02.860 --> 00:41:05.630
But the caveat is that you'll
be limited to two channels

00:41:05.640 --> 00:41:07.650
at a time for DV25 and DV50.

00:41:07.660 --> 00:41:10.870
First two, second two, or all four mixed.

00:41:12.480 --> 00:41:15.560
But the great story is that we support
capture from Core Audio devices.

00:41:15.560 --> 00:41:19.590
One input device per
SG Audio channel instance.

00:41:19.640 --> 00:41:23.400
But if you're on Tiger,
you can leverage the work that went

00:41:23.400 --> 00:41:25.400
into the HAL for aggregate devices.

00:41:25.400 --> 00:41:27.100
We've tested this, and it works.

00:41:27.160 --> 00:41:29.960
So if you have, say,
two Pro interfaces that each

00:41:30.030 --> 00:41:33.540
do 24 channels of audio,
and you gang them together so that

00:41:33.730 --> 00:41:36.640
they look like one big device,
one big aggregate device

00:41:36.640 --> 00:41:40.900
to audio MIDI setup,
then if you open up an application

00:41:40.900 --> 00:41:43.900
that uses SG Audio channels,
such as Final Cut or QuickTime Player,

00:41:43.980 --> 00:41:48.400
it will see that aggregate device
and capture from 48 channels.

00:41:48.400 --> 00:41:52.140
One caveat is that we only
support PCM input only.

00:41:52.140 --> 00:41:58.950
So if a device delivers MPEG-1
Layer 2 natively via a driver or

00:41:59.160 --> 00:42:02.660
some other non-mixable format,
we will not deal with it.

00:42:02.660 --> 00:42:06.280
We need to have PCM coming
from the audio device.

00:42:07.050 --> 00:42:09.630
We support real-time preview
to Core Audio devices,

00:42:09.630 --> 00:42:12.330
one output device per
SG Audio channel instance,

00:42:12.330 --> 00:42:14.740
just like one input device per instance.

00:42:14.900 --> 00:42:18.940
But multiple SG Audio channels may
be instantiated in a single grab,

00:42:19.030 --> 00:42:21.940
so you can capture from
multiple devices at a time.

00:42:21.990 --> 00:42:25.200
You can also preview to
multiple devices at a time.

00:42:25.240 --> 00:42:28.260
And there are component
properties for those things,

00:42:28.260 --> 00:42:28.690
too.

00:42:28.970 --> 00:42:29.810
All right.

00:42:30.200 --> 00:42:33.660
If any of you use Sequence Grabber,
you probably have looked at Hack TV.

00:42:33.660 --> 00:42:37.240
Has anyone-- raise your hand
if you've used Hack TV before.

00:42:37.380 --> 00:42:37.810
Yay.

00:42:38.310 --> 00:42:39.260
This is venerable.

00:42:39.500 --> 00:42:40.900
It's like 15 years old.

00:42:41.220 --> 00:42:43.880
Well, today we're giving you
something a little bit nicer.

00:42:44.050 --> 00:42:45.480
Wacked TV.

00:42:45.620 --> 00:42:51.170
Wacked TV is a replacement that we
wrote for Hack TV that's a Cocoa app

00:42:51.450 --> 00:42:53.100
that supports the SG Audio channel.

00:42:53.330 --> 00:42:54.880
Thank you.

00:42:55.270 --> 00:43:00.750
We also provide some wrapper
Objective-C classes for SG objects.

00:43:01.100 --> 00:43:04.140
We're providing sample
SG Audio Configuration Panel to

00:43:04.230 --> 00:43:06.100
show you how to make UI of your own.

00:43:06.100 --> 00:43:10.100
And as a benefit, a side benefit,
we're showing you how to do

00:43:10.100 --> 00:43:11.100
some improvements with video,
too.

00:43:11.100 --> 00:43:16.100
So it uses decompression
sessions to preview the video,

00:43:16.100 --> 00:43:19.000
and it writes them into OpenGL views.

00:43:19.100 --> 00:43:22.220
So let's take a look at that.

00:43:29.520 --> 00:43:30.400
Can we go to demo two?

00:43:30.400 --> 00:43:31.400
Sorry.

00:43:31.400 --> 00:43:36.730
This is WAC TV.

00:43:37.640 --> 00:43:39.640
It is a Cocoa app.

00:43:39.650 --> 00:43:41.750
It has classes.

00:43:44.640 --> 00:43:47.240
And you'll see here we've
got a couple classes.

00:43:47.240 --> 00:43:50.940
Now, the QuickTime-- the Qt kit that
we shipped does not have support

00:43:50.940 --> 00:43:55.340
for SequenceGrabber for capturing,
but we did a kind of reasonable little

00:43:55.490 --> 00:43:58.240
subset here that lets you do most things.

00:43:58.240 --> 00:44:02.240
So you can grab those if you haven't
made your own wrappers already,

00:44:02.240 --> 00:44:04.790
and you'll-- I think you'll be
pleasantly surprised that there's

00:44:04.790 --> 00:44:06.230
a lot of functionality in them.

00:44:06.300 --> 00:44:08.240
I tried to make them generic
enough that you can reuse

00:44:08.240 --> 00:44:10.240
them in your own Cocoa apps.

00:44:10.240 --> 00:44:14.240
And then we have some
specific stuff to our app.

00:44:14.440 --> 00:44:17.930
Now, the first thing let's
show you is-- and now,

00:44:17.930 --> 00:44:22.120
WACtv is on your CD that
came-- that you got yesterday,

00:44:22.120 --> 00:44:23.240
hopefully.

00:44:23.350 --> 00:44:27.610
But an updated version will
be available on the web and

00:44:27.720 --> 00:44:31.240
at the lab afterwards on CD.

00:44:31.240 --> 00:44:35.690
And you'll want to get the updated
version because it's much cooler.

00:44:41.100 --> 00:44:43.100
Okay.

00:44:43.100 --> 00:44:45.420
Will my bookmarks work?

00:44:45.510 --> 00:44:46.910
Yes, they will.

00:44:47.040 --> 00:44:48.740
QuickTimeComponents.h is your friend.

00:44:48.900 --> 00:44:51.240
That's where you'll find
everything related to the

00:44:51.360 --> 00:44:53.120
Sequence Grabber audio channel.

00:44:53.150 --> 00:44:56.080
Just do a search for
SG Audio and start reading.

00:44:56.080 --> 00:44:59.280
You'll see all of the
properties that we support,

00:44:59.320 --> 00:45:03.120
the classes that are associated
with those properties,

00:45:03.360 --> 00:45:07.320
and there's also notes about
which properties are holdovers

00:45:07.320 --> 00:45:11.510
from the old SG Sound channel,
which ones will work with the new one,

00:45:11.510 --> 00:45:15.000
and then a good description
of each property.

00:45:15.140 --> 00:45:17.940
We're trying to do a better
job of documenting our headers.

00:45:17.960 --> 00:45:19.440
I hope you appreciate that.

00:45:22.770 --> 00:45:25.840
Okay, now let's show you,
before we go any further,

00:45:25.850 --> 00:45:28.040
let me show you the UI for Wacked TV.

00:45:28.040 --> 00:45:31.180
It lets you make more
than one audio channel,

00:45:31.180 --> 00:45:33.780
more than one video channel,
which is a change, of course,

00:45:33.820 --> 00:45:35.940
from Hack TV.

00:45:35.940 --> 00:45:39.900
I'm going to add a video track first for
all our video brethren in the audience.

00:45:39.900 --> 00:45:42.060
Okay, here's me again.

00:45:42.060 --> 00:45:47.100
This is, again, DVC Pro HD,
but it's drawing into an NS OpenGL view,

00:45:47.100 --> 00:45:51.080
and so it has really good scaling,
for instance.

00:45:51.800 --> 00:45:55.540
I've given you some options to
show you how to lower the quality.

00:45:55.540 --> 00:45:58.540
You'll see it immediately
go fuzzy when I do that,

00:45:58.600 --> 00:46:02.020
and you can also throttle back the
preview rate and stuff like that.

00:46:02.080 --> 00:46:03.590
So please look at the sample code.

00:46:03.600 --> 00:46:07.220
I'm not going to let you look
at the sample code in here,

00:46:07.220 --> 00:46:09.420
because we're all about audio,
but you should look at the

00:46:09.480 --> 00:46:11.010
sample code yourself and see it.

00:46:11.110 --> 00:46:16.090
Now, for audio...

00:46:16.870 --> 00:46:20.240
Here is a sample settings panel.

00:46:20.410 --> 00:46:22.640
Like I said,
we didn't ship an SG Settings dialog,

00:46:22.690 --> 00:46:26.160
but I wrote this one
using just the properties.

00:46:26.270 --> 00:46:28.980
So you can do it too.

00:46:29.330 --> 00:46:32.660
And it shows you that you
can select recording devices,

00:46:32.820 --> 00:46:33.310
for instance.

00:46:33.450 --> 00:46:36.340
You can set their--

00:46:39.760 --> 00:46:48.490
and the team at QuickTime 7 are
here to share their insights

00:46:48.490 --> 00:46:48.490
into the new audio capabilities.

00:46:58.810 --> 00:46:59.880
Is it there?

00:46:59.880 --> 00:47:02.820
Oh, there it is.

00:47:03.450 --> 00:47:05.680
Sorry, the font's messing with me.

00:47:05.760 --> 00:47:11.030
Now when I init this SGAudio component,
what I do is I've wrapped

00:47:11.030 --> 00:47:15.400
the component property calls,
get, set, and getInfo.

00:47:15.480 --> 00:47:16.890
So I'm going to get
the property info list,

00:47:16.890 --> 00:47:19.160
which will tell me all of
the properties that this

00:47:19.160 --> 00:47:21.400
particular component responds to.

00:47:21.420 --> 00:47:24.030
And then I'm going to add
property listeners for each

00:47:24.050 --> 00:47:25.420
of those that I care about.

00:47:25.450 --> 00:47:27.660
Well, I'm going to add a property
listener for all of them.

00:47:27.660 --> 00:47:30.520
And because this is a Cocoa app,
I decided to forward

00:47:30.520 --> 00:47:34.790
those property listeners,
which are callbacks, as notifications.

00:47:34.990 --> 00:47:39.540
So you'll see here when I see that
such and such a property change,

00:47:39.590 --> 00:47:42.000
I forward it on as a notification.

00:47:42.010 --> 00:47:46.990
And in listener three,
we see our app respond to that.

00:47:47.560 --> 00:47:50.900
The SG Audio device lists
change notification,

00:47:50.900 --> 00:47:52.500
for instance.

00:47:52.500 --> 00:47:54.220
It responds to that.

00:47:54.310 --> 00:47:59.000
This WAC TV controller object pays
attention to that notification.

00:47:59.000 --> 00:48:02.060
When it sees it,
it does interesting things rather

00:48:02.060 --> 00:48:05.660
than blowing up and quitting,
which is always nice.

00:48:05.660 --> 00:48:09.480
So let's do something that we're
never supposed to do on stage.

00:48:09.480 --> 00:48:12.580
Let's pull the plug.

00:48:13.140 --> 00:48:17.040
I have an EMI right here,
and I'm going to pull the cable out.

00:48:17.050 --> 00:48:18.100
Oh my gosh.

00:48:18.100 --> 00:48:21.150
It says it disappeared,
but it didn't crash.

00:48:21.160 --> 00:48:22.860
That's always nice.

00:48:22.860 --> 00:48:26.220
And that's because it was
listening to that property change.

00:48:26.280 --> 00:48:33.500
And so I go and I select a new device,
and I'll plug that device back in.

00:48:33.500 --> 00:48:36.770
And after a while, he'll show up.

00:48:40.570 --> 00:48:42.490
After a while, he'll show up.

00:48:42.490 --> 00:48:44.440
There he is.

00:48:44.440 --> 00:48:46.510
Thank you.

00:48:48.870 --> 00:48:51.900
You know, dealing with devices on
stage is like herding cats.

00:48:51.900 --> 00:48:53.340
Okay.

00:48:53.340 --> 00:48:58.430
So now that's how we
listen to properties.

00:48:58.430 --> 00:48:59.240
Can we go back to slides?

00:49:04.280 --> 00:49:05.750
Device channel selection.

00:49:05.760 --> 00:49:07.930
Wouldn't be very interesting
if you had to always get all

00:49:07.930 --> 00:49:09.040
the channels on the device.

00:49:09.040 --> 00:49:12.600
If you only want, for instance,
four of them instead of eight or 24,

00:49:12.600 --> 00:49:13.650
you would be sunk.

00:49:13.820 --> 00:49:16.670
But we provide you with component
properties that let you do this.

00:49:16.670 --> 00:49:19.260
You can discover the device's
format as a flattened stream,

00:49:19.400 --> 00:49:21.400
not multiple streams
like the HAL does it.

00:49:21.580 --> 00:49:23.880
So if, for instance,
it's a complicated device

00:49:23.920 --> 00:49:27.010
that has 18 different streams,
you don't have to go try to

00:49:27.070 --> 00:49:28.960
query all the different streams.

00:49:29.080 --> 00:49:33.430
We'll present a flattened audio stream
basic description that represents

00:49:33.440 --> 00:49:35.490
all the channels on the device.

00:49:35.830 --> 00:49:40.310
We'll let you set the device format,
and we'll let you specify a subset of

00:49:40.310 --> 00:49:42.890
device channels using the channel map.

00:49:42.940 --> 00:49:45.700
And using multiple
SG Audio channel instances,

00:49:45.700 --> 00:49:49.750
of course, then you can split up these
channels across tracks in a movie,

00:49:49.760 --> 00:49:51.690
just as Final Cut did in the first demo.

00:49:51.700 --> 00:49:54.700
So back to the demo machine,
I'll show you how we do that.

00:49:54.700 --> 00:50:06.700
First in the app... Channel 1, Channel 2,
Channel 3... So I'll just turn

00:50:06.700 --> 00:50:08.590
off some of these channels.

00:50:14.520 --> 00:50:18.860
Okay, makes sense?

00:50:18.970 --> 00:50:22.620
Now let's go back here and find
out how we did that in code.

00:50:27.930 --> 00:50:28.410
Oh, there it is.

00:50:28.450 --> 00:50:31.960
So setting the channel map is a little
bit trickier than setting one property.

00:50:31.960 --> 00:50:35.200
You need to know both the device,
or excuse me, yeah,

00:50:35.200 --> 00:50:37.820
the record device channel
layout as well as the map,

00:50:37.880 --> 00:50:40.220
because the number of
channels needs to mesh.

00:50:40.220 --> 00:50:45.470
So you should stop the channel preview
before you set these properties.

00:50:45.480 --> 00:50:48.170
Go and find your new channel map.

00:50:48.250 --> 00:50:51.320
A channel map is a number of
channels that you want to enable.

00:50:51.320 --> 00:50:54.260
So for instance,
right there I turned off 4, 5, and 6,

00:50:54.380 --> 00:50:57.550
and I just have channels 0, 1,
and 2 if I'm zero-based.

00:50:58.040 --> 00:51:02.410
So I would pass it an
array of Sint32s with 0,

00:51:02.410 --> 00:51:03.660
1, 2.

00:51:03.660 --> 00:51:09.600
And then I would also pass it
a channel layout that had three

00:51:10.090 --> 00:51:11.650
channel descriptions in it.

00:51:13.360 --> 00:51:16.710
And then when I'm done setting
these properties on the

00:51:16.710 --> 00:51:20.230
SGAudio record device class,
I set the channel map and

00:51:20.230 --> 00:51:22.390
I set the layout right there.

00:51:22.390 --> 00:51:24.940
Then I go ahead and I start
the channel preview again.

00:51:24.940 --> 00:51:29.490
Okay, back to slides.

00:51:32.190 --> 00:51:34.600
Okay, let's look at the insides.

00:51:34.600 --> 00:51:39.310
A lot of people have been posting to
the list about using the SG Dataproc,

00:51:39.600 --> 00:51:43.970
and that's fine for some things,
but it's apparently being overused,

00:51:43.970 --> 00:51:48.700
and we would really like you to stop
doing that and use something better.

00:51:50.020 --> 00:51:52.700
The SG Audio channel has more
appropriate places for you to

00:51:52.700 --> 00:51:56.940
tap in and do interesting things
with the audio than the Dataproc.

00:51:56.980 --> 00:51:59.600
Now, the Dataproc, if you've used the
sequence grabber before,

00:51:59.600 --> 00:52:03.330
you know that capture
happens in several phases.

00:52:03.340 --> 00:52:06.770
It happens,
you get the data from the device,

00:52:06.940 --> 00:52:11.650
then it might be transformed somehow,
mixed or compressed,

00:52:11.650 --> 00:52:15.110
and then it's probably queued up,
chunked,

00:52:15.110 --> 00:52:18.010
and then finally written to disk.

00:52:18.420 --> 00:52:19.000
Now, the SG Dataproc is a
very interesting device.

00:52:19.000 --> 00:52:22.390
The SG Dataproc fires
right here at number five,

00:52:22.390 --> 00:52:26.890
which is right as the buffers are
about to be delivered to disk.

00:52:26.940 --> 00:52:29.650
So it's too late to do some operations.

00:52:29.660 --> 00:52:33.150
You don't really want to be
performing interesting things

00:52:33.150 --> 00:52:35.120
with your audio at that point.

00:52:35.140 --> 00:52:35.800
That's too late.

00:52:35.880 --> 00:52:38.900
The better place to do them is
one of these other four callbacks.

00:52:39.000 --> 00:52:42.280
So you can register a
callback to get the audio.

00:52:42.280 --> 00:52:44.750
We'll give it to you as
an audio buffer list,

00:52:44.750 --> 00:52:46.880
so you can use it with Core Audio.

00:52:49.030 --> 00:52:52.480
You can use it with Post Mix,
Pre-Conversion, or Post-Conversion,

00:52:52.480 --> 00:52:53.870
or you can continue to
use the SG Dataproc.

00:52:54.020 --> 00:52:58.200
The difference between number four and
number five is that the Post-Conversion

00:52:58.200 --> 00:53:00.220
phase is before it's been queued.

00:53:00.360 --> 00:53:04.940
So by default,
we chunk audio in half-second chunks.

00:53:05.100 --> 00:53:09.130
So if you register for number four,
you'll get audio much more

00:53:09.130 --> 00:53:12.800
frequently and in smaller,
more consumable byte sizes

00:53:13.010 --> 00:53:17.230
than if you sit on the
SG Dataproc to see samples then,

00:53:17.230 --> 00:53:18.960
when you'll get a half a second of audio.

00:53:18.960 --> 00:53:22.940
at a time,
which is kind of too much to process.

00:53:23.990 --> 00:53:29.850
SG Audio Callbacks: Pre and Post Mix and
Pre and Post Conversion.

00:53:29.860 --> 00:53:31.400
Five points for you to tap in.

00:53:31.400 --> 00:53:36.310
Let's look at interesting things
that we can do with that in WAC-TV.

00:53:40.900 --> 00:53:43.520
Thank you.

00:53:43.520 --> 00:53:43.980
All right.

00:53:44.040 --> 00:53:49.980
So I'm going to turn up the audio again.

00:53:52.290 --> 00:53:55.060
Now,
many of you may have seen this ominous

00:53:55.060 --> 00:53:59.210
button down in the corner that seems to
be mocking us and asking us to press it.

00:53:59.300 --> 00:54:04.910
Well, these AU effects are not
supported in SG Audio Channel.

00:54:04.920 --> 00:54:07.690
We didn't provide any effects built in.

00:54:07.720 --> 00:54:14.580
But I decided to use the pre-mix callback
to see the buffers as they come in,

00:54:14.580 --> 00:54:17.840
modify them in place by running
them through an audio unit chain,

00:54:17.840 --> 00:54:20.350
and then sending them
back into the stream.

00:54:20.370 --> 00:54:22.260
So we can do fun stuff like this.

00:54:22.380 --> 00:54:26.370
Select an AU effect.

00:54:26.370 --> 00:54:29.250
Let's select an obvious one.

00:54:37.000 --> 00:54:43.130
"The Twilight Zone" "Channel 5,
Channel 6" Or Band Pass, for instance,

00:54:43.130 --> 00:54:45.700
which makes it sound like
you're on a telephone.

00:54:50.070 --> 00:54:50.800
So that's cool.

00:54:50.800 --> 00:54:54.210
I mean, a lot of these effects you
probably would not want to put

00:54:54.380 --> 00:54:58.630
in audio as it's being recorded,
but I could very well see someone

00:54:58.630 --> 00:55:02.660
wanting to throw a compressor limiter
in there as a clip suppressor,

00:55:02.950 --> 00:55:04.190
for instance.

00:55:04.210 --> 00:55:07.590
So let's see in code how we did that.

00:55:10.970 --> 00:55:17.000
In my SG Audio class that
wraps the SG Audio channel,

00:55:17.000 --> 00:55:20.410
I accept an AUFX component description.

00:55:20.420 --> 00:55:23.980
I go and I open that component,
and then the most important

00:55:24.400 --> 00:55:25.960
piece of code is right here.

00:55:25.960 --> 00:55:29.870
I fill out one of these
SG Audio callback structs with the

00:55:29.920 --> 00:55:35.230
name of my callback and the refcon,
and then I call QT set component

00:55:35.230 --> 00:55:39.310
property with SG Audio premix callback.

00:55:39.610 --> 00:55:46.100
That means that my listener will fire
when audio arrives at the premix stage,

00:55:46.100 --> 00:55:49.820
and then I can start shoveling
it through my audio unit chain,

00:55:49.820 --> 00:55:53.450
which I create right here lazily.

00:55:59.400 --> 00:56:06.750
And so even though we officially
say that the SG Audio channel

00:56:07.280 --> 00:56:11.300
tap-in points are for read-only,
you can see here I've used them

00:56:11.300 --> 00:56:13.040
to write into the buffers as well.

00:56:13.060 --> 00:56:18.170
Okay, let's go on to the next slide.

00:56:21.710 --> 00:56:25.100
Okay, we have SG Audio Channel has
very flexible preview.

00:56:25.100 --> 00:56:27.980
Again, it's configurable using
component properties.

00:56:27.980 --> 00:56:32.920
You can either select a hardware
playthrough or a software preview.

00:56:32.920 --> 00:56:39.800
Hardware playthrough will only work
if the device in question supports it.

00:56:39.840 --> 00:56:43.700
And you can find that out by
getting the device attributes

00:56:43.730 --> 00:56:47.840
via component property and asking
whether it supports hard playthrough.

00:56:47.840 --> 00:56:51.430
Now, there are two properties
that come into play here.

00:56:51.430 --> 00:56:55.380
One is you need to set the record
device on the SG Audio Channel.

00:56:55.380 --> 00:56:57.580
You can also set a preview device.

00:56:57.580 --> 00:57:00.910
In order to have hardware or
zero latency playthrough work,

00:57:01.080 --> 00:57:05.080
both the record device and the preview
device have to be the same device,

00:57:05.080 --> 00:57:07.160
and it has to support playthrough.

00:57:07.160 --> 00:57:11.360
Otherwise,
we'll do software preview very flexibly.

00:57:11.360 --> 00:57:14.160
You can specify what you want to preview.

00:57:14.160 --> 00:57:16.000
Remember those tap
points that I showed you,

00:57:16.000 --> 00:57:17.500
one through four?

00:57:17.500 --> 00:57:23.650
Well, those you can specify as places
you want to preview as well.

00:57:23.680 --> 00:57:28.390
So you can preview what has just come
from the device or what was already mixed

00:57:29.080 --> 00:57:33.440
or what has already been converted to,
say, some compressed format.

00:57:34.310 --> 00:57:37.210
Software Preview will mix
to the destination device's

00:57:37.280 --> 00:57:40.140
layout automatically.

00:57:40.160 --> 00:57:41.940
Let's look at that.

00:58:04.550 --> 00:58:09.320
Okay,
here's my channel 1 through 6 again.

00:58:09.430 --> 00:58:13.340
Now let's go ahead and label these
so we get something more interesting

00:58:13.340 --> 00:58:16.210
than coming out left and right.

00:58:22.370 --> 00:58:24.820
Okay, now we're previewing this post-mix.

00:58:25.060 --> 00:58:27.540
What happens if I set
the output format to,

00:58:27.540 --> 00:58:30.540
say, mono?

00:58:30.600 --> 00:58:32.410
Or better yet...

00:58:33.110 --> 00:58:35.340
AMR Narrowband.

00:58:35.460 --> 00:58:38.100
Now what we're hearing is still
what's coming off the post-mix,

00:58:38.160 --> 00:58:40.330
but now it's mono.

00:58:40.610 --> 00:58:43.140
If I preview pre-mix--

00:58:44.490 --> 00:58:46.640
We hear it coming out the
different speakers again.

00:58:46.760 --> 00:58:53.620
Now if I do post-conversion,
you're hearing what it sounds

00:58:53.620 --> 00:58:56.340
like coming off of AMR.

00:58:56.350 --> 00:58:57.830
Kind of sounds like a cell phone,
doesn't it?

00:58:57.940 --> 00:59:00.200
But I guess that's the point.

00:59:01.900 --> 00:59:05.760
Okay,
so all of those options are available to

00:59:05.870 --> 00:59:09.230
you using the flexible preview features.

00:59:09.230 --> 00:59:12.130
Oh, and I should also show
you the code for that,

00:59:12.130 --> 00:59:15.140
since this WWDC is all about the code.

00:59:15.160 --> 00:59:19.840
You can see when I am told
to update the preview flags,

00:59:19.850 --> 00:59:25.720
I just go and I set preview flags
on the Sequence Grabber channel,

00:59:25.720 --> 00:59:30.160
and those flags are defined
in QuickTimeComponents.h.

00:59:31.560 --> 00:59:32.890
Look for Channel Play.

00:59:33.110 --> 00:59:37.250
You'll see four new flags that are paid
attention to by the SG Audio channel:

00:59:37.550 --> 00:59:40.620
Premix, Postmix, Preconversion,
or Postconversion.

00:59:40.620 --> 00:59:42.440
And that will tell it
what you want to preview.

00:59:42.670 --> 00:59:44.650
Can we go back to slides?

00:59:47.380 --> 00:59:50.050
ENCODES is the last topic we'll cover.

00:59:50.060 --> 00:59:54.210
You can do ENCODES on the fly,
as I just showed you going to AMR.

00:59:54.280 --> 00:59:58.320
By default, you'll get exactly the format
that's present on the device.

00:59:58.320 --> 01:00:02.050
It will go through Core Audio,
so it will be kind of blown up to

01:00:02.140 --> 01:00:05.950
canonical float 32 along the path,
but what we'll actually write to the

01:00:06.050 --> 01:00:07.860
file will be what was on the device.

01:00:07.860 --> 01:00:12.430
This ME, for instance,
is in 24-bit little endian integer mode,

01:00:12.430 --> 01:00:15.500
so that's what we'll get
in our file by default,

01:00:15.500 --> 01:00:18.260
unless we specify a different output.

01:00:18.260 --> 01:00:21.450
But via component properties,
you can specify any

01:00:21.630 --> 01:00:24.390
output format you want,
sample rate conversion,

01:00:24.390 --> 01:00:25.890
any flavor of PCM.

01:00:26.070 --> 01:00:31.500
You can also encode to VBR formats,
such as Apple lossless and AAC.

01:00:31.500 --> 01:00:35.370
You can specify a different output
channel layout than the device's,

01:00:35.420 --> 01:00:37.460
and we'll just do the right thing.

01:00:39.780 --> 01:00:44.400
If you are a control freak and
you don't want to specify the

01:00:44.400 --> 01:00:47.630
output layout and input layout
cross-point coefficients are,

01:00:47.630 --> 01:00:51.460
you can set that as a property too
and basically control the exact

01:00:51.460 --> 01:00:53.150
mix that we'll put in the movie.

01:00:53.160 --> 01:00:56.090
That's also available
as a component property.

01:00:56.100 --> 01:00:59.600
Let's look at that.

01:01:03.450 --> 01:01:04.600
Specifying output format.

01:01:04.610 --> 01:01:08.760
I already showed you the demo of it,
but here's the code that goes behind it.

01:01:08.850 --> 01:01:13.500
Now,
this little dialog that we used... Oh,

01:01:13.500 --> 01:01:16.000
it's a real app.

01:01:21.900 --> 01:01:31.340
This dialogue here,
you may have noticed in QuickTime Player,

01:01:31.340 --> 01:01:33.640
the Pro version, this is what we use as
our export dialogue,

01:01:33.640 --> 01:01:37.120
and this is what Daniel was talking
about as the stood audio component.

01:01:37.120 --> 01:01:39.800
This is the stock dialogue,
but I've also done some

01:01:39.800 --> 01:01:41.480
custom configuration on it.

01:01:41.520 --> 01:01:45.180
It doesn't show all of the output formats
that we normally do in QuickTime Player,

01:01:45.180 --> 01:01:48.710
and it shows a different list
of supported layouts than

01:01:48.750 --> 01:01:51.770
we do in QuickTime Player,
and I'll show you how I did that.

01:01:53.140 --> 01:01:57.750
I specify a list of limited
formats that I want it to show,

01:01:57.750 --> 01:02:01.610
and I specified some
arbitrary list of tags,

01:02:01.610 --> 01:02:03.820
tagged layouts that I want it to show.

01:02:03.820 --> 01:02:07.820
And then I find out what my
record device's input format

01:02:08.160 --> 01:02:10.000
and channel layout are.

01:02:10.000 --> 01:02:14.820
Then I open up a std audio
component of subtype audio,

01:02:15.270 --> 01:02:18.840
which is Audi,
and I set those properties on it.

01:02:18.990 --> 01:02:21.110
First I tell it,
your client-restricted compression

01:02:21.190 --> 01:02:25.690
format list should be the one that
I specified with just LPCM and ALAC.

01:02:27.650 --> 01:02:30.950
And then I set its restricted
channel layout tag list so it

01:02:30.960 --> 01:02:33.360
only shows the restricted list.

01:02:33.430 --> 01:02:37.700
And then I use my starting
and ending formats.

01:02:37.730 --> 01:02:40.740
And I let the dialog come up by calling

01:02:43.690 --> 01:02:45.180
SC Request Image Settings.

01:02:45.420 --> 01:02:48.660
Somewhat of a misnomer,
but it's because of its heritage as a

01:02:48.810 --> 01:02:53.060
standard video configuration component.

01:02:53.060 --> 01:02:56.840
So once it's done,
we have the new output format

01:02:56.840 --> 01:02:58.090
that the person has desired.

01:02:58.100 --> 01:03:02.080
I get that out as a sound description,
and I set that property as the output

01:03:02.080 --> 01:03:04.990
sound description of my SG Audio channel,
and now we get a

01:03:04.990 --> 01:03:06.490
compressed output format.

01:03:06.500 --> 01:03:08.920
Okay, that's it for me.

01:03:09.360 --> 01:03:10.630
Back to Daniel.

01:03:13.600 --> 01:03:14.600
Thank you.

01:03:22.900 --> 01:03:32.600
Shortly after Tiger was released,
there was a web review of

01:03:32.600 --> 01:03:35.340
Tiger on arstechnica.com.

01:03:35.340 --> 01:03:38.110
And it went into all the
Tiger features and whatnot.

01:03:38.200 --> 01:03:41.240
Of course, I was only interested
in the QuickTime part.

01:03:41.240 --> 01:03:48.110
And one of the things that it said was,
"We

01:03:48.480 --> 01:03:52.080
My favorite new feature is
the playback speed adjustment,

01:03:52.160 --> 01:03:54.190
how it can increase speed of
audio without changing pitch.

01:03:54.260 --> 01:03:58.190
That means I can watch WWDC sessions
at one and a half times speed

01:03:58.220 --> 01:04:03.110
without making every presenter
sound like one of the chipmunks.

01:04:04.950 --> 01:04:08.340
However, it said,
there is no filter for Bertrand's accent,

01:04:08.340 --> 01:04:10.210
unfortunately.

01:04:10.770 --> 01:04:16.380
Now, in the QuickTime audio team,
we take feedback very seriously.

01:04:16.430 --> 01:04:18.940
And we thought we would
try to address this.

01:04:18.940 --> 01:04:21.920
And we're going to give you a little
sneak preview of some of the technology

01:04:21.920 --> 01:04:24.260
we're working on to address this.

01:04:30.100 --> 01:04:36.390
So we've got a clip of
Bertrand from WWDC 2003.

01:04:45.160 --> 01:04:48.260
Well,
we wanted to clean that up a little bit,

01:04:48.260 --> 01:04:52.470
so we've got a new menu item
called Translation Services,

01:04:52.540 --> 01:04:53.740
which will perform translations.

01:04:53.740 --> 01:04:55.840
You can, for instance,
translate to English.

01:05:06.330 --> 01:05:08.200
Now I know what you're thinking.

01:05:08.200 --> 01:05:08.900
I know what you're thinking.

01:05:08.900 --> 01:05:11.200
It sounds a little wooden and Australian.

01:05:11.540 --> 01:05:16.530
But many of the engineers in
the audio team are Australian,

01:05:16.530 --> 01:05:19.070
and you can't really criticize
their accents at all,

01:05:19.070 --> 01:05:20.310
so we let them do that.

01:05:20.460 --> 01:05:22.740
Of course,
we didn't want to stop at English.

01:05:22.740 --> 01:05:25.980
We wanted to support other languages,
so we've got Spanish.

01:05:25.980 --> 01:05:28.070
We'll have the full feature set,
obviously,

01:05:28.130 --> 01:05:29.820
when we're ready to release this.

01:05:38.960 --> 01:05:41.440
And of course, in today's world,
you can't really do anything

01:05:41.440 --> 01:05:44.910
without having an Indian language,
so we have Hindi.

01:05:57.770 --> 01:05:59.700
My personal favorite is
the Yiddish translator.

01:05:59.700 --> 01:06:13.990
. Now, as you all know,
the test of any translation

01:06:13.990 --> 01:06:17.980
feature is to go back and forth
between the original language and,

01:06:17.980 --> 01:06:20.700
say, English, many times until it
reaches a steady state.

01:06:20.700 --> 01:06:23.700
And that will sort of
tell you how you're doing.

01:06:23.700 --> 01:06:26.700
And I think you'll see we still have
a little work to do in this area,

01:06:26.700 --> 01:06:29.560
but I thought I'd demo
what we've gotten so far.

01:06:29.700 --> 01:06:31.990
We've gone,
processed from French to English,

01:06:31.990 --> 01:06:33.700
English to French 50 times.

01:06:33.700 --> 01:06:35.650
It comes out like this.

01:06:45.180 --> 01:06:46.670
So we'll work on that
before we release it.

01:06:46.700 --> 01:06:55.400
Back to slides, please.

01:06:57.740 --> 01:07:01.040
So let me just remind you
of what we talked about.

01:07:01.100 --> 01:07:05.050
The player and the pro features in the
player help you with your multi-channel

01:07:05.140 --> 01:07:07.830
content creation and recording.

01:07:08.840 --> 01:07:13.740
The channel labels inform the movie
mixer about how to mix your audio,

01:07:13.740 --> 01:07:15.340
and you want to support
that in your applications.

01:07:15.340 --> 01:07:19.830
You can extract using movie
audio extraction and any

01:07:19.900 --> 01:07:23.660
channel layout you specify,
and the device itself has a

01:07:23.660 --> 01:07:26.460
channel layout associated with
it that all controls the mixer.

01:07:26.460 --> 01:07:30.140
Please use discretion
using the discrete labels.

01:07:30.140 --> 01:07:32.620
This is not intended
for publishing media.

01:07:32.620 --> 01:07:38.520
The discrete channels are really to
map from your movie to your device,

01:07:38.700 --> 01:07:40.890
and for your use in development.

01:07:40.900 --> 01:07:43.820
You don't want to see movies out
on the web with discrete layouts.

01:07:43.930 --> 01:07:45.900
They won't really work properly.

01:07:49.270 --> 01:07:53.310
You can use Movie Audio Extraction to
get the mixed audio out of the movie.

01:07:53.440 --> 01:07:56.190
You won't get anything
from protected content,

01:07:56.190 --> 01:07:57.000
of course.

01:07:57.510 --> 01:07:59.790
and Audio Capture has
many new capabilities,

01:07:59.810 --> 01:08:02.640
synchronized multi-channel
capture for multiple devices,

01:08:02.640 --> 01:08:06.740
very flexible architecture for mixing,
routing, and preview.

01:08:11.410 --> 01:08:16.470
The website, the developer website for
all the audio capabilities of

01:08:16.470 --> 01:08:20.050
QuickTime is very sadly out of date,
and I'm happy to say that we're

01:08:20.050 --> 01:08:22.950
in the process of revamping that,
and we'll have a whole lot more

01:08:23.080 --> 01:08:25.340
information and more modern
samples up there very soon.

01:08:25.340 --> 01:08:28.080
We'll be spending the next few
weeks and months working on that,

01:08:28.140 --> 01:08:30.960
so we can have much better
examples and documentation for you.

01:08:31.060 --> 01:08:34.650
The sample code you saw today,
you can come to the lab and get a

01:08:34.650 --> 01:08:38.750
copy onto your disk or wait a week
and it'll be published on the web,

01:08:38.750 --> 01:08:41.590
and also look on the web
to see what else there is.

01:08:41.620 --> 01:08:44.790
We'll be constantly updating,
so we'll get much more

01:08:44.790 --> 01:08:46.360
sample code out to you.

01:08:48.900 --> 01:08:52.530
This afternoon there's a
Core Audio session on using audio

01:08:52.540 --> 01:08:54.780
units in this room at 2 o'clock.

01:08:54.780 --> 01:08:58.640
And tomorrow morning is a
hands-on lab all morning with

01:08:58.650 --> 01:09:01.110
QuickTime Audio team members.

01:09:01.120 --> 01:09:03.680
And in the afternoon,
a lot of Core Audio people

01:09:03.680 --> 01:09:05.040
will be there as well.

01:09:05.040 --> 01:09:08.180
I can't be there tomorrow,
but I'll be in the lab this afternoon,

01:09:08.180 --> 01:09:10.040
particularly after the Core Audio talk.

01:09:10.100 --> 01:09:12.600
So come talk to me if you'd like
to ask any questions or come

01:09:12.600 --> 01:09:14.360
tomorrow during the hands-on lab.

01:09:14.500 --> 01:09:17.290
And of course, the QuickTime feedback
forum is Friday afternoon,

01:09:17.800 --> 01:09:19.760
and you can come and complain
about all the things you want

01:09:19.760 --> 01:09:22.700
differently and tell us how great we
are when we've done what you liked.