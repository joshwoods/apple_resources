WEBVTT

00:00:10.150 --> 00:00:14.430
And this is session 135,
Safari for Web Designers,

00:00:14.550 --> 00:00:16.360
building content for the new web.

00:00:16.370 --> 00:00:23.140
So, a lot of the sessions here at the
conference are really targeted towards

00:00:23.140 --> 00:00:26.910
developing one kind of application,
and that's a desktop application.

00:00:27.100 --> 00:00:31.930
The kind of thing that you would
either put up on your company's

00:00:31.930 --> 00:00:37.380
website or put up on version tracker
or maybe even package up in a box,

00:00:37.450 --> 00:00:41.840
and then your users would download
it or put in a disk to install it,

00:00:41.920 --> 00:00:46.270
and then everyone sort of has their
own personal copy of your software

00:00:46.270 --> 00:00:48.990
running on their own personal machine.

00:00:49.000 --> 00:00:52.190
Well, in this session,
we're going to talk about a very

00:00:52.190 --> 00:00:57.000
different kind of application,
and that is the kind that runs in Safari.

00:00:57.230 --> 00:00:57.790
The web browser.

00:00:57.800 --> 00:01:03.060
Now, when people talk about applications
that run in the web browser,

00:01:03.060 --> 00:01:07.110
there are a lot of complaints
about web technologies,

00:01:07.110 --> 00:01:09.250
and here's a few of them.

00:01:09.260 --> 00:01:12.820
I can't get the layout that
I want with HTML and CSS.

00:01:12.840 --> 00:01:16.170
I can't get the functionality
I want using JavaScript.

00:01:16.180 --> 00:01:18.580
JavaScript is too slow.

00:01:18.580 --> 00:01:21.590
Another complaint that's not
listed is I can't deal with

00:01:21.590 --> 00:01:23.520
cross-browser compatibility.

00:01:23.520 --> 00:01:24.830
It's just a huge headache.

00:01:24.900 --> 00:01:27.060
Well, I can't deal with
cross-browser compatibility.

00:01:27.080 --> 00:01:32.030
Well, these are all really sort of myths,
because if you look at a lot of

00:01:32.110 --> 00:01:36.980
new web applications out there and
new applications that are using web

00:01:36.980 --> 00:01:42.180
technologies like the dashboard,
you can see that it's really possible

00:01:42.180 --> 00:01:46.560
to develop an application that
runs in the web browser or uses web

00:01:46.630 --> 00:01:51.790
technologies that really has a lot of
the characteristics of some of the best

00:01:51.790 --> 00:01:54.860
and most common desktop applications.

00:01:57.800 --> 00:04:52.100
[Transcript missing]

00:04:52.550 --> 00:04:55.050
This talk is obviously
for web developers,

00:04:55.140 --> 00:04:58.190
but I just want to remind
you that since we're just

00:04:58.250 --> 00:05:02.240
talking about web technologies,
this is also for widget developers.

00:05:02.330 --> 00:05:05.570
All the concepts that we're going to
talk about today apply to web pages,

00:05:05.570 --> 00:05:07.210
and they also apply to widgets.

00:05:07.220 --> 00:05:11.800
So, let's get started with the
first part of our talk,

00:05:11.840 --> 00:05:16.110
which is best practices
for web compatibility.

00:05:16.400 --> 00:09:21.200
[Transcript missing]

00:09:21.510 --> 00:09:24.840
So if you think that you're sort
of getting around this whole doc

00:09:24.930 --> 00:09:28.260
type thing by leaving it off,
leaving the doc type off of

00:09:28.260 --> 00:09:31.300
your document altogether,
you're really not.

00:09:31.360 --> 00:09:34.390
Because if you have no doc
type or a malformed doc type,

00:09:34.490 --> 00:09:37.960
that will trigger compatibility
mode in the web browser.

00:09:38.700 --> 00:09:42.090
So I actually have a really
great example of compatibility

00:09:42.090 --> 00:09:44.250
mode versus standards mode.

00:09:44.250 --> 00:09:47.560
I have this snippet of HTML right here.

00:09:47.560 --> 00:09:49.790
And it's just a div.

00:09:49.790 --> 00:09:53.340
The font size is set to XX large.

00:09:53.340 --> 00:09:55.940
And inside, it says, hello, world.

00:09:55.940 --> 00:10:01.760
Now, with this snippet of HTML,
I've left off the doc type.

00:10:01.760 --> 00:10:05.380
So both of these browsers,
Safari and Mac IE,

00:10:05.380 --> 00:10:08.680
are rendering the same snippet of HTML.

00:10:08.700 --> 00:10:12.020
But in compatibility mode or quirks mode.

00:10:12.020 --> 00:10:16.160
So on the left, in Safari,
you can see that Safari renders

00:10:16.160 --> 00:10:20.050
it in a 32-point font,
whereas Mac IE is rendering

00:10:20.050 --> 00:10:22.330
this in 48-point font.

00:10:22.340 --> 00:10:26.530
Same HTML, same exact thing,
two different browsers,

00:10:26.780 --> 00:10:29.440
two totally different renderings.

00:10:29.440 --> 00:10:33.410
So the way to fix this is
really to add a doc type.

00:10:33.410 --> 00:10:38.170
I went ahead and added that
HTML 4.01 strict doc type that

00:10:38.200 --> 00:10:40.520
I've... talked about earlier.

00:10:40.880 --> 00:10:46.870
And now, this sort of makes...causes
each browser to render the

00:10:46.910 --> 00:10:48.490
code in exactly the same way.

00:10:49.000 --> 00:10:51.810
Basically,
adding a doc type that triggers

00:10:51.810 --> 00:10:56.740
standards mode in the browser really
brings you closer to a standard and to

00:10:56.740 --> 00:11:01.520
a more uniform rendering of your pages
in lots of different web browsers.

00:11:01.520 --> 00:11:03.450
And that's obviously what you want.

00:11:03.520 --> 00:11:05.520
So include a doc type.

00:11:05.740 --> 00:11:09.330
After you include a doc type,
code up your whole site,

00:11:09.330 --> 00:11:13.700
or maybe as you're starting to
code up and as you're going along,

00:11:13.700 --> 00:11:16.420
you're going to want
to validate your code.

00:11:16.420 --> 00:11:19.640
And basically,
what validation does is it checks

00:11:19.640 --> 00:11:23.940
your code against the syntax that
you've claimed for that page.

00:11:23.940 --> 00:11:29.000
I mentioned earlier,
after I add my HTML 4.01

00:11:29.000 --> 00:11:33.690
doc type to my document,
that is sort of saying to the browser,

00:11:33.690 --> 00:11:36.540
"This whole document, it's HTML 4.01.

00:11:36.570 --> 00:11:39.420
Render it as such."

00:11:39.660 --> 00:11:43.650
Validation checks your code against
the syntax for that particular language

00:11:43.650 --> 00:11:45.260
that's claimed in your dot type.

00:11:45.320 --> 00:11:48.060
And really it makes it so that the
browser doesn't sort of have to

00:11:48.060 --> 00:11:49.690
second guess what you're doing.

00:11:49.690 --> 00:11:54.590
If you leave off a unit identifier
like pixels or something like that,

00:11:54.910 --> 00:11:56.820
validation will catch that.

00:11:57.720 --> 00:12:02.100
So there are lots of validation errors,
and they can often be a little

00:12:02.190 --> 00:12:04.180
cryptic when you're validating.

00:12:04.180 --> 00:12:07.080
So I just wanted to
list a few of them here.

00:12:07.080 --> 00:12:12.290
Lowercase dot type, incorrect nesting,
uppercase tags,

00:12:12.290 --> 00:12:16.920
unquoted value attributes,
missing a closing slash on an empty

00:12:16.920 --> 00:12:19.600
element such as an image or a BR tag.

00:12:19.650 --> 00:12:22.540
These are really common
validation errors.

00:12:22.540 --> 00:12:27.700
It's best to sort of validate, you know,
as you go along so that you don't

00:12:27.700 --> 00:12:27.700
have to do a lot of validation.

00:12:27.700 --> 00:12:32.040
And then you can also use the W3C markup
validator to help you find those errors.

00:12:32.080 --> 00:12:35.020
Luckily,
there are some great tools out there

00:12:35.020 --> 00:12:39.400
like the W3C markup validator and
the W3C CSS validator to help you

00:12:39.400 --> 00:12:41.940
out and help you find those errors.

00:12:43.890 --> 00:12:45.930
So we've sort of covered compatibility.

00:12:46.000 --> 00:12:51.580
And the next thing that we're going
to talk about is extensions and RSS.

00:12:51.580 --> 00:12:57.930
So let's get into everyone's favorite
extension is the second one listed there,

00:12:57.930 --> 00:12:59.590
XML HTTP request.

00:12:59.590 --> 00:13:02.620
It's sort of used everywhere
all over right now.

00:13:02.620 --> 00:13:07.260
It's sort of the thing that
is making Ajax what it is,

00:13:07.260 --> 00:13:08.840
in my opinion.

00:13:09.960 --> 00:13:14.910
So we're going to be revising our wiki,
and we're going to use content-editable

00:13:15.110 --> 00:13:19.170
and XML HTTP request to sort of
eliminate that ugly flashing,

00:13:19.370 --> 00:13:22.510
you know,
in the wiki that sort of obviously says,

00:13:22.510 --> 00:13:25.880
you know,
this is running in a web browser.

00:13:25.880 --> 00:13:30.960
We're going to use these two attributes
to revise our wiki to make it much

00:13:30.960 --> 00:13:33.740
more of just an inline text editor.

00:13:33.740 --> 00:13:39.580
So content-editable is an attribute that
can be set on any block-level element.

00:13:39.900 --> 00:13:43.430
And basically,
this attribute just enables

00:13:43.430 --> 00:13:46.110
inline rich text HTML editing.

00:13:46.120 --> 00:13:50.280
You'll see a demo of it shortly,
so I won't get into it much more.

00:13:50.280 --> 00:13:53.670
XML HTTP request,
it was first implemented in WinIE,

00:13:53.710 --> 00:13:57.870
but it's so useful and so great,
it's really now a de facto standard

00:13:57.870 --> 00:14:00.140
that every browser implements.

00:14:00.140 --> 00:14:04.670
Basically, it just allows the client or
the web browser to submit and

00:14:04.670 --> 00:14:07.160
retrieve data in the background.

00:14:07.160 --> 00:14:09.880
So that's what basically is
eliminating page reloading.

00:14:09.900 --> 00:14:10.900
So let's have a demo.

00:14:10.900 --> 00:14:16.470
I'm going to grab a drink of water.

00:14:17.380 --> 00:14:20.540
And can we switch to demo machine one?

00:14:20.540 --> 00:14:22.540
Okay, great.

00:14:22.540 --> 00:14:25.870
Okay.

00:14:29.640 --> 00:14:34.450
So, to sort of illustrate my point
that Vicki really needs a makeover,

00:14:34.630 --> 00:14:40.340
we started our own Vicki to track our
interview schedule for the Safari team.

00:14:40.380 --> 00:14:43.630
So, you can see there are some
really illustrious people

00:14:43.760 --> 00:14:45.330
who want to work for us.

00:14:45.450 --> 00:14:48.970
So, let me just show you how
an old Vicki would work.

00:14:48.970 --> 00:14:50.970
I'd click "Edit."

00:14:53.000 --> 00:14:57.540
And this text area comes up,
and there's sort of all

00:14:57.540 --> 00:15:02.600
these keys at the bottom,
and I kind of want to add a link,

00:15:02.610 --> 00:15:05.000
but I'm not even sure how to do that.

00:15:05.000 --> 00:15:13.150
Let me just copy this one,
and we'll say this is on maybe the 24th,

00:15:13.150 --> 00:15:13.150
and...

00:15:15.090 --> 00:15:21.500
We'll say that it's Susan Care who
wants to interview with us,

00:15:21.620 --> 00:15:29.330
and she's going to come in at 2:00 PM.

00:15:30.150 --> 00:15:33.980
So now I click Update,
and this page reloads,

00:15:33.980 --> 00:15:37.970
and I guess my changes are right here.

00:15:38.020 --> 00:15:40.920
So that's basically how old wiki looks.

00:15:40.920 --> 00:15:45.670
Like, anyone who is very non-technical,
I think that would be

00:15:45.670 --> 00:15:46.880
very difficult for them.

00:15:47.040 --> 00:15:52.660
Sort of this crazy text field with
all these special symbols that

00:15:52.660 --> 00:15:56.170
you need to add to make things
look the way you want is really,

00:15:56.170 --> 00:15:58.130
really confusing.

00:15:58.540 --> 00:16:05.970
So now let's go to our brand new site,
which is going to illustrate some of the

00:16:05.970 --> 00:16:09.460
ideas that I just referenced in my slide.

00:16:09.460 --> 00:16:15.180
So this isn't the flashiest demo,
but that's part of why it's so awesome.

00:16:15.180 --> 00:16:18.080
Basically,
I'm going to click Edit Calendar.

00:16:18.080 --> 00:16:22.480
And now, this whole div is editable.

00:16:22.580 --> 00:16:27.950
You can see my carrot sort of cycling
through the days of the calendar there.

00:16:27.950 --> 00:16:38.010
And so I'm just going to pick one,
and I'm going to say Susan Care,

00:16:38.010 --> 00:16:38.010
3 o'clock.

00:16:38.770 --> 00:16:40.700
Click Done, and that's it.

00:16:40.700 --> 00:16:44.010
That's it.

00:16:44.320 --> 00:16:50.050
So I can open this in a new window.

00:16:50.270 --> 00:16:50.960
and there's a bug.

00:16:50.960 --> 00:16:55.220
But basically, I mean, that's it.

00:16:55.220 --> 00:16:59.520
It's sort of just like a text editor
as opposed to this ugly page reload,

00:16:59.520 --> 00:17:05.120
like I'm so obviously using a
web application sort of demo.

00:17:06.460 --> 00:17:08.580
So how did we do this?

00:17:08.580 --> 00:17:11.620
Let's take a look at the source.

00:17:11.620 --> 00:17:16.600
So this is my HTML file.

00:17:16.600 --> 00:17:20.770
And basically,
I've got this edit calendar button,

00:17:20.770 --> 00:17:26.280
which calls this set
content editable function.

00:17:26.280 --> 00:17:30.120
So it gets this element named wiki,
which is down here.

00:17:30.120 --> 00:17:33.960
I've added two markers to
indicate the editable area that

00:17:33.960 --> 00:17:35.960
I want to pay attention to.

00:17:37.710 --> 00:17:41.460
And then basically,
set content editable just toggles the

00:17:41.460 --> 00:17:46.610
content editable attribute on the wiki
div and toggles the value of the button,

00:17:46.610 --> 00:17:48.220
either edit or done.

00:17:48.220 --> 00:17:52.770
And if we're done,
we want to send the data

00:17:52.770 --> 00:17:55.660
using XML HTTP request.

00:17:55.660 --> 00:17:58.260
And this is incredibly simple.

00:17:58.570 --> 00:18:03.510
Basically, you just want to see if the
XML HTTP request function

00:18:03.510 --> 00:18:09.780
is supported on the window,
create a new XML HTTP request,

00:18:09.780 --> 00:18:13.940
call open on that object.

00:18:14.020 --> 00:18:15.340
You're going to do a post.

00:18:15.340 --> 00:18:19.360
You're going to post to this URL,
and true is the final argument.

00:18:19.360 --> 00:18:23.710
And then, basically,
all that I'm doing in terms of the

00:18:23.710 --> 00:18:27.960
new data that I'm going to send
is I'm getting the inner HTML.

00:18:28.500 --> 00:18:30.940
Of this wiki div.

00:18:30.960 --> 00:18:32.840
So basically, I'm sending.

00:18:34.670 --> 00:18:38.300
This content here in my post,
and then I have a CGI script that

00:18:38.300 --> 00:18:42.340
just really basically reads this
file until you get to this point,

00:18:42.470 --> 00:18:46.820
and then writes the post,
and then writes the few final tags here.

00:18:46.820 --> 00:18:51.440
So, it's really, really pretty simple.

00:18:51.440 --> 00:18:53.560
I mean,
I did this in a few lines of JavaScript,

00:18:53.580 --> 00:18:57.740
and I'm no Perl expert,
and I wrote the CGI script as well.

00:18:57.900 --> 00:19:02.740
So, that's sort of an illustration of
how you can use content-editable

00:19:02.740 --> 00:19:09.860
and XML HTTP request to create
a wiki or a sort of editor that

00:19:10.310 --> 00:19:14.850
behaves more like a text editor,
like TextEdit or something like that,

00:19:14.850 --> 00:19:16.680
as opposed to a web page.

00:19:16.680 --> 00:19:18.700
Okay, can we go back to the slides?

00:19:21.700 --> 00:19:27.030
So, the next thing on the agenda
is Safari-specific extensions.

00:19:27.030 --> 00:19:32.110
XML HTTP request is an extension
that isn't part of any formal spec,

00:19:32.170 --> 00:19:35.240
but it's so useful,
it's implemented in every browser.

00:19:35.240 --> 00:19:38.660
But these next few things
are Safari-specific,

00:19:38.790 --> 00:19:41.360
and you'll see them in the RSS view.

00:19:41.360 --> 00:19:46.740
The first one is the search field,
and it's really just an input type.

00:19:46.810 --> 00:19:48.120
Input type equals search.

00:19:48.660 --> 00:19:50.210
It has a few attributes.

00:19:50.210 --> 00:19:53.700
Placeholder is the default text,
which is grayed out,

00:19:53.740 --> 00:19:56.260
and then you click on the
field and that disappears.

00:19:56.260 --> 00:19:59.620
This is analogous to, you know,
the Google search field in

00:19:59.620 --> 00:20:02.730
the Safari Chrome that says
Google inside of it and then

00:20:02.730 --> 00:20:04.950
disappears when you click on it.

00:20:04.980 --> 00:20:08.710
Incremental is if you want
your search to be incremental,

00:20:08.710 --> 00:20:09.700
basically.

00:20:09.700 --> 00:20:15.340
The on-search handler is executed on
sort of the pause that follows typing.

00:20:16.500 --> 00:20:19.940
Results is the number of results
that you want to show in the list.

00:20:19.940 --> 00:20:22.180
Again, like,
the Google search field is sort

00:20:22.180 --> 00:20:23.920
of a good illustration of this.

00:20:25.830 --> 00:20:30.500
and auto-save is whether or not you
want those results that are in the

00:20:30.500 --> 00:20:34.300
results list to persist across sessions.

00:20:34.300 --> 00:20:40.960
The other Safari-specific
extension to discuss is the slider.

00:20:40.970 --> 00:20:45.700
And all that really is is an
input type that is a range.

00:20:45.760 --> 00:20:51.070
So the attributes on that are
just a minimum and maximum value,

00:20:51.180 --> 00:20:54.880
and precision can be
either float or integer.

00:20:55.250 --> 00:20:59.220
And the input event fires whenever
the value of the slider changes.

00:20:59.230 --> 00:21:03.520
So you can tie a JavaScript event
to that input event,

00:21:03.520 --> 00:21:07.620
and it'll fire basically
whenever the slider moves.

00:21:07.650 --> 00:21:09.570
Really simple stuff.

00:21:10.190 --> 00:21:13.780
Beyond the widget-y
extensions and extras,

00:21:13.850 --> 00:21:18.630
we're going to talk a little bit
about RSS and why it's a cool idea

00:21:18.630 --> 00:21:21.110
to add an RSS feed to your site.

00:21:21.120 --> 00:21:23.930
When you decide that you
want to add an RSS feed,

00:21:23.930 --> 00:21:27.260
there's really just a few
things that you have to do.

00:21:27.260 --> 00:21:30.090
You have to sort of think
about the content that you

00:21:30.090 --> 00:21:34.190
want to include in your feed,
sort of, you know,

00:21:34.260 --> 00:21:39.020
like maybe for my interview demo site,
I want to include, you know,

00:21:39.020 --> 00:21:43.380
an RSS feed that would track feedback
for each of these individual candidates.

00:21:43.380 --> 00:21:49.690
Next, you would just code up the XML file
that is going to serve for that feed,

00:21:49.690 --> 00:21:54.020
validate it, of course,
just like HTML files.

00:21:54.020 --> 00:21:57.240
Since it's XML,
you should be aware of that.

00:21:57.260 --> 00:22:02.300
You don't have any common XML syntax
pitfalls like symbols like the

00:22:02.300 --> 00:22:06.140
left arrow and ampersand should be
replaced with their HTML equivalents.

00:22:06.140 --> 00:22:09.200
And you can use online tools
like Feed Validator to do

00:22:09.220 --> 00:22:10.900
this type of validation.

00:22:10.900 --> 00:22:13.770
And then the last step is to publish it.

00:22:14.640 --> 00:22:17.190
So why add an RSS feed to your site?

00:22:17.330 --> 00:22:20.690
Well,
the first reason is really just that it

00:22:20.750 --> 00:22:22.710
delivers content in a different format.

00:22:22.810 --> 00:22:25.760
And for people who are really
interested in this sort of format,

00:22:25.910 --> 00:22:26.700
that's really important.

00:22:26.700 --> 00:22:30.580
There are a lot of people out there who
just want the headlines and the summary

00:22:30.640 --> 00:22:34.280
and want to be able to quickly see,
you know, the latest and greatest

00:22:34.280 --> 00:22:36.560
data without sort of,
you know,

00:22:36.560 --> 00:22:41.600
all this other stuff jumbling things up,
like graphics and whizzy

00:22:41.600 --> 00:22:43.810
menus and stuff like that.

00:22:43.870 --> 00:22:45.560
So that's one reason.

00:22:45.560 --> 00:22:49.040
The second is that updates
are easily recognized.

00:22:49.150 --> 00:22:54.970
If I were to add a page to my interview
site that sort of tracked feedback

00:22:54.970 --> 00:22:59.040
for each individual candidate,
if I had an RSS feed tracking that,

00:22:59.040 --> 00:23:02.720
I would be able to easily see
whenever a person added new

00:23:02.720 --> 00:23:05.000
feedback or that sort of thing.

00:23:05.500 --> 00:23:07.260
And really, the updates are everywhere.

00:23:07.260 --> 00:23:10.130
They're in the bookmarks
bar all over the place,

00:23:10.200 --> 00:23:13.760
and they're also in the RSS view
sort of all over the place.

00:23:15.420 --> 00:23:17.910
The next reason that you might
want to add an RSS feed is

00:23:17.990 --> 00:23:19.560
that it's easily searchable.

00:23:19.560 --> 00:23:22.730
This is actually a little video
right here that you might not be

00:23:22.730 --> 00:23:26.980
able to see unless you watch closely,
but I can sort of search all

00:23:26.980 --> 00:23:31.880
these articles on a string in a
way that I wouldn't be able to

00:23:31.880 --> 00:23:37.130
do using the find menu or even
a search field that's on a site.

00:23:37.140 --> 00:23:40.460
It's very valuable.

00:23:40.820 --> 00:23:45.220
So now, to show us how to add an
RSS feed to your site,

00:23:45.220 --> 00:23:50.160
Adele Peterson is going to come
on stage and sort of... Oh,

00:23:50.220 --> 00:23:51.050
and there she is.

00:23:51.140 --> 00:23:52.910
Sort of the gist of it.

00:23:56.600 --> 00:24:01.760
The kicker is that we're going to do it
automatically using XML HTTP request.

00:24:01.760 --> 00:24:03.360
Adele?

00:24:03.360 --> 00:24:04.460
Thanks, Vicki.

00:24:04.460 --> 00:24:05.020
Thanks a lot.

00:24:05.020 --> 00:24:06.880
Okay.

00:24:06.880 --> 00:24:11.770
So let's go back and take another look
at the demo that Vicki was showing you.

00:24:11.780 --> 00:24:15.700
So Vicki talked a little bit about
the advantages of adding an RSS feed.

00:24:15.700 --> 00:24:21.650
And we're going to add RSS feeds
for each of our candidates so that

00:24:21.650 --> 00:24:26.880
we can keep track of their feedback
as people want to add that data.

00:24:26.880 --> 00:24:31.290
And the advantage of that is,
as you can see in the bookmarks bar,

00:24:31.290 --> 00:24:35.840
as data is added,
someone can subscribe to the RSS feed

00:24:35.840 --> 00:24:40.010
and keep track of it by just seeing
when the feed has been updated.

00:24:40.020 --> 00:24:44.620
So if we go and look at one
of these feedback pages.

00:24:45.700 --> 00:24:48.690
You'll see that a bunch of people
have already added feedback

00:24:48.690 --> 00:24:50.580
for this particular candidate.

00:24:50.580 --> 00:24:53.370
One of the cool things is this
is using some of the technologies

00:24:53.370 --> 00:24:55.060
that we've already talked about.

00:24:55.080 --> 00:24:58.800
So we're going to use content
editable to make this form a

00:24:58.910 --> 00:25:00.840
little easier to deal with.

00:25:00.840 --> 00:25:02.760
So you click the edit button.

00:25:02.760 --> 00:25:04.140
And ta-da!

00:25:04.140 --> 00:25:06.410
You can edit right in line.

00:25:19.300 --> 00:25:22.750
Once we're done entering
this information,

00:25:23.010 --> 00:25:25.400
we want to add it to the RSS feed.

00:25:25.400 --> 00:25:28.410
As web designers,
I'm sure you know that when you

00:25:28.410 --> 00:25:31.760
have a lot of data that you want
to display in different ways,

00:25:31.760 --> 00:25:35.080
the best way is not always
to enter it manually.

00:25:35.080 --> 00:25:40.290
In this case, you'd have to end up adding
RSS feeds in -- you'd have to end

00:25:40.290 --> 00:25:44.400
up manually creating the XML files
for the feeds for each candidate.

00:25:44.460 --> 00:25:47.990
And it's a lot easier to build
something into your site where the

00:25:48.100 --> 00:25:51.930
person who initially enters in the
data in the form will then cause the

00:25:51.930 --> 00:25:57.440
data to automatically be updated in the
XML file and display in the RSS feeds.

00:25:57.500 --> 00:25:59.460
So that's what we're going to do.

00:25:59.460 --> 00:26:00.850
And I'll show you a little
bit of the code later.

00:26:00.860 --> 00:26:03.710
So click done.

00:26:03.960 --> 00:26:06.860
And... Everything executes.

00:26:06.920 --> 00:26:11.260
And we'll go to the RSS feed.

00:26:14.200 --> 00:26:15.780
and there's my feedback.

00:26:15.780 --> 00:26:16.660
Yay!

00:26:16.660 --> 00:26:18.200
Thumbs up, he was great.

00:26:18.200 --> 00:26:20.340
So now...

00:26:21.570 --> 00:26:25.850
So now we can kind of see how
some of the benefits that Vicki

00:26:25.850 --> 00:26:28.340
was talking about earlier about
using the RSS feed in this way,

00:26:28.340 --> 00:26:31.570
just that you can search and
see who else used the word great

00:26:31.660 --> 00:26:33.460
to describe this candidate.

00:26:33.460 --> 00:26:37.760
And you can just say, oh,
who's interviewed him so far?

00:26:39.750 --> 00:26:45.240
and I will be talking about
the new features of Safari RSS.

00:26:45.240 --> 00:26:51.720
You can manage the data in this way
and without having to go and create a

00:26:52.150 --> 00:26:58.540
whole other file to manage this data,
you're automatically updating it

00:26:58.540 --> 00:26:59.790
when you enter in the data initially.

00:26:59.790 --> 00:26:59.790
Okay.

00:26:59.790 --> 00:26:59.790
So let's go back and look at the
JavaScript and see how we did this.

00:27:06.460 --> 00:27:10.230
First, let's take a look at the HTML so
we can see some of the hooks we

00:27:10.330 --> 00:27:13.040
put in there to make everything a
little bit easier for ourselves.

00:27:13.060 --> 00:27:21.470
Let's scroll down here and look at
where we have the content-editable part.

00:27:21.540 --> 00:27:29.610
In these paragraph elements,
we added an ID that is equal to the tag

00:27:29.610 --> 00:27:35.740
name that we're going to need to use
when we create the XML file for RSS.

00:27:36.400 --> 00:27:41.820
So the XML file needs to have
-- when we add this entry for

00:27:41.920 --> 00:27:45.590
this particular bit of feedback,
it needs to have a title

00:27:45.590 --> 00:27:47.000
tag and a description tag.

00:27:47.000 --> 00:27:51.570
So we're going to stick this in the
ID so that in the JavaScript when

00:27:51.800 --> 00:27:56.200
we go to create the data that
we have something to reference.

00:27:56.480 --> 00:27:58.190
Okay.

00:27:58.210 --> 00:28:02.780
So now let's go and
look at the JavaScript.

00:28:07.160 --> 00:28:11.370
When we first clicked that edit button,
we had something very similar to

00:28:11.370 --> 00:28:14.420
the last demo where we went and
set the content editable attribute,

00:28:14.420 --> 00:28:15.240
etc., etc.

00:28:15.240 --> 00:28:16.750
No big deal.

00:28:16.750 --> 00:28:19.340
We're old pros at that.

00:28:20.120 --> 00:28:22.850
So the next time when you
go and click the done,

00:28:22.890 --> 00:28:26.740
we call this build post function,
which is going to build up the data

00:28:27.020 --> 00:28:29.320
that we want to send to the server.

00:28:29.320 --> 00:28:32.320
And then when we have that data,
we're going to send it to the

00:28:32.320 --> 00:28:35.820
server using XML HTTP requests so
everything's behind the scenes and

00:28:35.820 --> 00:28:37.800
we don't interrupt the workflow.

00:28:39.280 --> 00:28:43.120
Okay, so let's take a look at
the build post function.

00:28:43.120 --> 00:28:46.920
So basically all we're doing
with build post is we're looking

00:28:46.920 --> 00:28:52.180
at those paragraph elements and,
you know, using the IDs to identify them,

00:28:52.180 --> 00:28:57.470
and we're building up this string
with the inner HTML of those elements.

00:28:59.400 --> 00:29:02.260
So when we're ready to
go and send the data,

00:29:02.260 --> 00:29:07.070
all we have to do is create our
XML HTTP request and open the URL and

00:29:07.370 --> 00:29:10.200
send the data just like we did before.

00:29:10.200 --> 00:29:14.030
And the script on the
server is very basic.

00:29:14.120 --> 00:29:17.390
You know,
all it's doing is inserting that bit of

00:29:17.390 --> 00:29:22.780
XML into the XML file that already exists
that we've been using for the feed.

00:29:22.780 --> 00:29:29.120
So now I just want to show
you guys one more thing.

00:29:29.340 --> 00:29:34.490
One more benefit of doing
it this way is that,

00:29:34.490 --> 00:29:34.490
you know,

00:29:39.000 --> 00:30:43.000
[Transcript missing]

00:30:46.970 --> 00:30:48.940
Okay, can I have the slides again?

00:30:48.940 --> 00:30:52.480
So XML HTTP request, you gotta love it.

00:30:52.520 --> 00:30:54.100
It's so useful for so many things.

00:30:54.100 --> 00:30:58.150
So now we've covered compatibility,
we've covered extras

00:30:58.290 --> 00:31:01.860
like extensions and RSS,
and the last thing that we're

00:31:01.860 --> 00:31:04.370
going to talk about is plug-ins.

00:31:04.370 --> 00:31:06.980
And really, plug-ins, you know,
all I have to say about them

00:31:06.980 --> 00:31:08.540
is really they're for everyone.

00:31:09.760 --> 00:31:10.460
So, plug-ins are a great way to get
your users to use your plugins.

00:31:10.460 --> 00:31:11.160
And plug-ins are a great way to
get your users to use your plugins.

00:31:11.160 --> 00:31:11.860
And plug-ins are a great way to
get your users to use your plugins.

00:31:11.860 --> 00:31:12.760
And like I mentioned before,
even if you think you're not some

00:31:12.760 --> 00:31:18.210
hardcore programmer that would never,
ever write a plug-in,

00:31:18.210 --> 00:31:18.770
it's a technology that's worth
learning because you can really add

00:31:18.770 --> 00:31:22.360
a lot of native functionality to
your websites and to your widgets.

00:31:22.420 --> 00:31:26.300
Sort of the iTunes music player,
the address book widget,

00:31:26.320 --> 00:31:31.180
those things are using plug-ins
because they're running native code.

00:31:31.350 --> 00:31:35.260
So I'm going to keep my discussion of
plugins very short because there have

00:31:35.260 --> 00:31:39.760
been probably three or four talks that
go into a lot of detail about plugins.

00:31:39.760 --> 00:31:42.830
Basically,
I just want to mention that there are two

00:31:42.850 --> 00:31:45.540
kinds of plugins that you could write.

00:31:45.540 --> 00:31:47.780
You could write a Netscape-style plugin.

00:31:47.780 --> 00:31:51.690
The advantage there is that
it's compatible with Safari,

00:31:51.690 --> 00:31:53.570
Firefox, and OmniWeb.

00:31:53.580 --> 00:31:56.000
Or you could write a WebKit plugin.

00:31:56.000 --> 00:31:59.040
The benefit there that it's
extremely easy to implement,

00:31:59.550 --> 00:32:02.900
and it's also compatible with
any WebKit-based application.

00:32:02.900 --> 00:32:06.860
So I'm not going to get
into a lot of detail.

00:32:06.860 --> 00:32:11.660
Let's just go into a demo for
adding a plugin to your site

00:32:11.660 --> 00:32:14.280
with our wonderful intern,
Kevin Decker.

00:32:16.600 --> 00:32:17.040
Thanks, Vicky.

00:32:17.040 --> 00:32:20.070
So can we get demo machine number two,
please?

00:32:20.070 --> 00:32:21.910
That would be this one.

00:32:21.940 --> 00:32:22.940
Cool.

00:32:23.070 --> 00:32:26.070
So I've made a couple changes
to Vicky's awesome site.

00:32:26.070 --> 00:32:29.460
And what I want to do is,
I guess I first want to preface this,

00:32:29.460 --> 00:32:33.480
is that this is a really exciting
time to be developing on the web.

00:32:33.480 --> 00:32:35.880
Because before, you know,
you had this whole paralysis

00:32:35.920 --> 00:32:38.610
through analysis where,
you know, you know, if you wanted,

00:32:38.670 --> 00:32:41.050
let's say, for example,
download a resume, you know,

00:32:41.050 --> 00:32:43.720
you have to download the disk and
copy it and go on your desktop,

00:32:43.720 --> 00:32:45.110
you have to manage it.

00:32:45.180 --> 00:32:47.650
So one of the first things
I did was I thought,

00:32:47.650 --> 00:32:50.140
well, when I mouse over my name,
for example,

00:32:50.140 --> 00:32:54.200
I get this little pop-up thing,
kind of like a tool tip,

00:32:54.270 --> 00:32:55.720
fades away and out.

00:32:55.790 --> 00:32:59.120
And then I can click on this,
I can click on this

00:32:59.120 --> 00:33:02.110
person's dorky picture,
click on this,

00:33:02.110 --> 00:33:04.400
and I'll get this iframe here.

00:33:04.440 --> 00:33:08.440
And I can take this,
I don't need that scroll bar there,

00:33:08.440 --> 00:33:09.930
I can move it around.

00:33:10.060 --> 00:33:13.660
It's got, it's got a, you know,
a fake resume.

00:33:13.660 --> 00:33:16.560
So, and you can, this is all in the HTML.

00:33:16.560 --> 00:33:16.560
So if you want to download this disk,
you can.

00:33:16.560 --> 00:33:19.480
But if you just want to snap shot,
if you want to see it, it's right there.

00:33:19.490 --> 00:33:20.290
So that's that.

00:33:20.460 --> 00:33:22.560
And something else that we
thought would be beneficial,

00:33:22.560 --> 00:33:25.070
too, is, you know, gosh, you know,
we have this on the web,

00:33:25.180 --> 00:33:26.930
but what if I want to contact,
what if I want to put

00:33:26.930 --> 00:33:29.400
this person's information,
let's say, in my address book?

00:33:29.510 --> 00:33:31.000
Well, before,
I'd have to go in my address

00:33:31.000 --> 00:33:33.110
book and type all it in.

00:33:33.110 --> 00:33:35.240
And that's just really not necessary.

00:33:35.280 --> 00:33:37.650
So with a plug-in,
what we did was you click

00:33:37.650 --> 00:33:40.340
this button right here,
and when I click that,

00:33:40.340 --> 00:33:41.740
I go in my address book.

00:33:41.740 --> 00:33:42.640
There it is.

00:33:42.640 --> 00:33:46.060
So what I want to do is...

00:33:47.190 --> 00:33:49.100
It really works!

00:33:49.100 --> 00:33:54.080
So, when Vicki said it was really
easy to write a WebKit plug-in,

00:33:54.150 --> 00:33:54.740
she wasn't kidding.

00:33:54.740 --> 00:33:56.970
So, I'm going to open this up.

00:33:57.050 --> 00:33:59.360
There's two things I want to show.

00:33:59.360 --> 00:34:01.410
I don't want to go into a
whole bunch of detail about how

00:34:01.410 --> 00:34:03.180
these plug-ins work because,
as Vicki said,

00:34:03.180 --> 00:34:05.170
there were sessions already,
but I just want to give

00:34:05.180 --> 00:34:06.420
you the bird's eye view.

00:34:06.420 --> 00:34:09.070
But I think really that will give
you enough to get started right away.

00:34:09.340 --> 00:34:11.890
So, first let's look at what
it's like to use it.

00:34:11.950 --> 00:34:13.420
There's two parts to this.

00:34:13.420 --> 00:34:16.350
There's a JavaScript part,
and there's also the actual

00:34:16.350 --> 00:34:18.150
Objective-C plug-in part.

00:34:18.160 --> 00:34:20.530
And so,
first let's look at the JavaScript,

00:34:20.540 --> 00:34:21.580
what that does.

00:34:21.580 --> 00:34:23.790
So, I'm going to open this up in Xcode.

00:34:23.790 --> 00:34:28.420
And basically, the idea is,
when I moused over the address book icon,

00:34:28.420 --> 00:34:32.220
when I actually clicked it,
this happens right here.

00:34:32.220 --> 00:34:36.040
We get all this information,
and these two lines of code right here,

00:34:36.040 --> 00:34:37.300
we add the contact.

00:34:37.300 --> 00:34:39.320
So, we're going to open this up.

00:34:39.320 --> 00:34:42.040
We get the embed,
which is the plug-in that we have,

00:34:42.040 --> 00:34:43.640
and pass it this information.

00:34:43.710 --> 00:34:47.590
So, the real meat of what's interesting
is this plug-in.addContact.

00:34:47.600 --> 00:34:48.720
How does that work?

00:34:48.720 --> 00:34:51.550
Well,
that's what we're going to see right now.

00:34:51.620 --> 00:34:56.840
So, I think I can quit this now,
but that's just so cool.

00:34:56.840 --> 00:34:59.160
I'll go to my plug-in.

00:34:59.720 --> 00:35:03.690
There's a couple things you want
to do to make this actually happen,

00:35:03.690 --> 00:35:05.250
and I'll explain these one by one.

00:35:05.260 --> 00:35:07.900
So you want to start off right
here with returning an NSView.

00:35:07.900 --> 00:35:09.550
This is the plug-in view with arguments.

00:35:09.570 --> 00:35:11.550
This is basically where you
instantiate the plug-in.

00:35:11.550 --> 00:35:15.600
When Safari calls your plug-in,
this is what gets called,

00:35:15.600 --> 00:35:17.020
so you want to make
sure you instantiate it.

00:35:17.140 --> 00:35:19.550
This set arguments thing
is kind of important.

00:35:19.550 --> 00:35:23.420
It may be especially important if
you want to pass arguments to it.

00:35:23.510 --> 00:35:28.420
For example, the QuickTime plug-in passes
arguments like the size,

00:35:28.450 --> 00:35:30.520
how big you want to make it.

00:35:30.590 --> 00:35:34.140
Anything that you want to put inside of a
markup tag will go in here as arguments.

00:35:34.140 --> 00:35:37.300
So that's basically all this is.

00:35:37.520 --> 00:35:43.690
The web script for name selector,
what this does, when I have my,

00:35:43.690 --> 00:35:46.930
let me go back to this part here.

00:35:47.010 --> 00:35:50.490
Notice right here this method,
add contact.

00:35:50.570 --> 00:35:51.880
Well, you say, where did this come from?

00:35:51.990 --> 00:35:53.340
Well, the answer is,
it came from the web.

00:35:53.380 --> 00:35:54.690
It came from this.

00:35:54.890 --> 00:35:58.030
This is where we basically
bind an Objective-C function,

00:35:58.080 --> 00:36:00.740
a method I should say,
to this from JavaScript.

00:36:00.740 --> 00:36:03.840
So JavaScript thinks this
method is called add contact,

00:36:03.840 --> 00:36:07.830
and we basically say, you know,
if this method,

00:36:07.830 --> 00:36:09.910
use this method right here
and call it add contact.

00:36:10.080 --> 00:36:12.700
That's how we're going to
expose it to JavaScript.

00:36:12.880 --> 00:36:15.780
And so this is the only,
something else you want to do is,

00:36:15.830 --> 00:36:18.140
is selector excluded from web script?

00:36:18.140 --> 00:36:19.870
It's kind of important too, because,
you know,

00:36:19.870 --> 00:36:21.370
your implementation has many details.

00:36:21.440 --> 00:36:24.740
Not all of these details do you
want to expose from JavaScript.

00:36:24.750 --> 00:36:27.800
Only the ones that you want to expose,
you should put in this method.

00:36:27.880 --> 00:36:30.420
In this case,
we check if the selector is this

00:36:30.420 --> 00:36:37.130
add contact with first name,
if it's, then go ahead and return no.

00:36:37.150 --> 00:36:38.650
If it's not that.

00:36:38.740 --> 00:36:40.070
I said that backwards.

00:36:40.300 --> 00:36:42.630
If the selector is this,
then don't exclude it.

00:36:42.710 --> 00:36:44.030
Otherwise, return yes.

00:36:44.270 --> 00:36:48.480
So, now, here's actually,
this one function right here does

00:36:48.480 --> 00:36:51.130
the entire address book operation.

00:36:51.130 --> 00:36:54.700
This add contact with first name,
last name, address, city, blah, blah,

00:36:54.760 --> 00:36:55.240
blah.

00:36:55.240 --> 00:36:57.760
So, when I scroll down,
this is basically using the

00:36:57.760 --> 00:36:59.130
Mac OS X address book framework.

00:36:59.180 --> 00:37:00.440
It's really, really simple.

00:37:00.440 --> 00:37:02.750
This is a few lines of code
where we just create an,

00:37:02.750 --> 00:37:05.240
an, an, an AB address book and an, an,
an AB person.

00:37:05.240 --> 00:37:07.480
You, you can go on the
Apple website and look up,

00:37:07.570 --> 00:37:10.240
you know, AB person and figure
out how to do this in,

00:37:10.240 --> 00:37:11.660
in no more than 10 minutes.

00:37:11.750 --> 00:37:16.000
So, basically, we just, and,
and last but not least, we also, the,

00:37:16.010 --> 00:37:20.380
the, the picture in the address book,
this right here, in the address book,

00:37:20.380 --> 00:37:21.840
it lets you also store pictures.

00:37:21.840 --> 00:37:24.970
So, from JavaScript,
we get a URL and we put that URL in, in,

00:37:25.030 --> 00:37:26.040
in the picture.

00:37:26.040 --> 00:37:29.760
And then, last but not least,
we add the record to it and

00:37:29.890 --> 00:37:30.940
we tell it we want to save.

00:37:30.940 --> 00:37:33.170
And that's basically it.

00:37:33.370 --> 00:37:34.870
And, of course,
you want to be a first cloud,

00:37:34.870 --> 00:37:37.830
you want to be a, you know, clean and de,
de, deallocate the arguments.

00:37:38.070 --> 00:37:40.410
Anything that you've, that you've used.

00:37:40.430 --> 00:37:44.830
So, that's basically, in a nutshell,
just to recap, you want to, this method,

00:37:44.830 --> 00:37:49.550
you're going to want to pay attention to,
this method and right here,

00:37:49.740 --> 00:37:50.900
this plugin view with arguments.

00:37:50.940 --> 00:37:51.740
If you can implement those,
you're going to want to pay attention

00:37:51.740 --> 00:37:51.740
to this method and right here,
this plugin view with arguments.

00:37:51.760 --> 00:37:54.830
those three methods,
then you too can make a plug in.

00:37:54.850 --> 00:37:59.080
And if I can do it,
you guys can definitely do it.

00:37:59.080 --> 00:38:00.590
So, there you have it.

00:38:00.730 --> 00:38:01.900
Thanks a lot, Vicki.

00:38:01.900 --> 00:38:02.950
- Thank you.

00:38:07.200 --> 00:38:09.540
Hey, that was probably my favorite demo.

00:38:09.540 --> 00:38:10.220
Mine too.

00:38:10.220 --> 00:38:15.130
So now we've sort of covered
these three main areas,

00:38:15.140 --> 00:38:18.600
compatibility, extras, and plug-ins.

00:38:18.600 --> 00:38:22.710
And so now you've got the tools
you need to go out and develop

00:38:22.710 --> 00:38:23.980
some great web applications.

00:38:23.980 --> 00:38:30.200
I just wanted to recap the URLs that
I cited in my slides because I don't

00:38:30.200 --> 00:38:31.940
think they're posted on the web.

00:38:31.940 --> 00:38:34.280
So if you want to take
a quick look there.

00:38:36.080 --> 00:38:39.160
And who to contact is Mark Malone.

00:38:39.160 --> 00:38:40.520
He'll be on stage shortly.

00:38:40.520 --> 00:38:42.840
He's our Internet Partnership Manager.

00:38:42.840 --> 00:38:45.980
If you have any questions
about compatibility or anything

00:38:45.980 --> 00:38:49.490
that we've talked about today,
he'll pass those questions on to me.