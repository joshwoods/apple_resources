WEBVTT

00:00:00.960 --> 00:00:01.900
Good afternoon everybody.

00:00:01.900 --> 00:00:02.900
My name is Steven Tona.

00:00:02.900 --> 00:00:05.380
I work on the QuickTime product
marketing team and I deal mostly

00:00:05.420 --> 00:00:06.900
in the streaming side of things.

00:00:06.900 --> 00:00:10.900
And today's session is going
to be a really good session.

00:00:10.900 --> 00:00:12.900
It's going to be two case studies.

00:00:12.900 --> 00:00:17.900
One from the University of Wisconsin who
has set up an IPTV-based streaming

00:00:17.900 --> 00:00:19.900
solution for their entire campus network.

00:00:19.900 --> 00:00:22.300
And that gentleman's name is
Dave Schrader and he's going to walk

00:00:22.410 --> 00:00:26.560
us through exactly how they built that
and how they've actually incorporated

00:00:26.560 --> 00:00:29.470
a lot of the Mac OS X technologies
to provide a really TV-like

00:00:29.470 --> 00:00:30.900
experience on your computer.

00:00:30.900 --> 00:00:33.160
And then after Dave is going
to be Nate Caplin from the

00:00:33.310 --> 00:00:37.070
American Electric Power Company to
talk about how they're using and how

00:00:37.130 --> 00:00:39.710
they've built out QuickTime streaming
services for all of their

00:00:39.710 --> 00:00:41.900
internal corporate communications.

00:00:41.900 --> 00:00:44.550
So without further ado,
I'd like to invite Dave on

00:00:44.600 --> 00:00:45.900
stage to kick it off.

00:00:45.900 --> 00:00:48.250
Thanks Steven.

00:00:48.860 --> 00:00:56.980
Hello,
thanks everyone for coming out today.

00:00:56.980 --> 00:00:56.980
Ready for the campus bash tonight?

00:00:56.980 --> 00:00:56.980
Yeah.

00:00:57.150 --> 00:01:00.090
I'm Dave Schrader,
University of Wisconsin-Madison,

00:01:00.090 --> 00:01:03.490
and what I'm going to
be talking about today

00:01:03.750 --> 00:01:08.570
is a system that we built
to deliver cable TV to the

00:01:08.580 --> 00:01:12.490
University of Wisconsin campus
using an IP based system.

00:01:12.490 --> 00:01:18.300
So we wanted to replace an aging
actual coaxial cable TV network that

00:01:18.430 --> 00:01:24.010
the University had been operating
for pretty much the last 20 years,

00:01:24.020 --> 00:01:27.230
and we wanted to kind of piggyback
on a large network upgrade

00:01:27.300 --> 00:01:28.770
initiative that we had in progress.

00:01:28.770 --> 00:01:31.220
Now some of you may have
heard me speak last year.

00:01:31.220 --> 00:01:34.470
I talked last year about this as well,
but we have a lot of new stuff

00:01:34.590 --> 00:01:38.260
going on and that's some of what
I'm going to talk about today too.

00:01:38.260 --> 00:01:40.680
So for those of you who
were here last year,

00:01:40.680 --> 00:01:43.280
some of this stuff is
going to be a repeat.

00:01:43.280 --> 00:01:46.740
But we looked at a lot of
options from different vendors.

00:01:46.740 --> 00:01:52.970
Video Furnace, Microsoft, Reel,
some other MPEG based solutions,

00:01:52.970 --> 00:01:56.840
and we eventually decided
on QuickTime technologies.

00:01:56.840 --> 00:01:59.200
And once we decided on QuickTime,
then it turned out that Apple's

00:01:59.200 --> 00:01:59.600
server was not the best solution.

00:01:59.600 --> 00:02:00.050
So we decided to go with
the QuickTime solution.

00:02:00.080 --> 00:02:00.730
And we decided to go with the
QuickTime solution because we thought

00:02:00.850 --> 00:02:01.600
that the QuickTime solution was
the best solution for our customers.

00:02:01.600 --> 00:02:02.590
We thought that the QuickTime solution
was the best solution for our customers.

00:02:02.600 --> 00:02:03.600
We thought that the QuickTime solution
was the best solution for our customers.

00:02:03.600 --> 00:02:04.090
We thought that the QuickTime solution
was the best solution for our customers.

00:02:04.090 --> 00:02:04.950
We thought that the QuickTime solution
was the best solution for our customers.

00:02:04.950 --> 00:02:05.790
We thought that the QuickTime solution
was the best solution for our customers.

00:02:05.790 --> 00:02:06.600
We thought that the QuickTime solution
was the best solution for our customers.

00:02:06.600 --> 00:02:09.200
So we're going to talk about some of
the decisions we made in coming to

00:02:09.240 --> 00:02:16.340
the pilot that we deployed and how we
actually went about that deployment and

00:02:16.340 --> 00:02:18.700
the hardware and software that we used.

00:02:19.020 --> 00:02:21.580
So here's some of the background.

00:02:21.600 --> 00:02:27.250
We operated this coax network that we
call the Academic Television Network,

00:02:27.250 --> 00:02:28.850
or the ATN, for many years.

00:02:28.850 --> 00:02:31.820
And in addition to some
local university content,

00:02:31.820 --> 00:02:35.660
things like lecture halls,
our own production facilities,

00:02:35.660 --> 00:02:41.020
and things of that nature,
we also had some local cable TV channels.

00:02:41.580 --> 00:02:45.210
And we had an agreement with a local
cable operator that's been acquired

00:02:45.210 --> 00:02:48.620
and changed names so many times
and is now Charter Communications.

00:02:48.620 --> 00:02:53.720
And that agreement has stayed and
was the basis for actually carrying

00:02:53.720 --> 00:02:56.330
the channels on our new system.

00:02:56.340 --> 00:03:00.210
And the new system we call the
Digital Academic Television Network,

00:03:00.250 --> 00:03:05.230
or ATN, and our agreement with the cable
operator carried over for these channels.

00:03:05.240 --> 00:03:10.140
So our main motivation for
doing this was twofold.

00:03:10.140 --> 00:03:14.020
We wanted to... First of all,
the old network was becoming

00:03:14.020 --> 00:03:15.380
really expensive to maintain.

00:03:15.380 --> 00:03:17.040
It was hard to find equipment.

00:03:17.040 --> 00:03:19.920
It was hard to find skilled
cable television folks.

00:03:20.040 --> 00:03:23.000
It was hard to have people crawling
around in steam tunnels and

00:03:23.000 --> 00:03:24.820
repairing the equipment as it broke.

00:03:25.340 --> 00:03:28.350
And at this same time,
we were upgrading the network,

00:03:28.350 --> 00:03:30.970
and we thought that it would
be a good time to go to IP.

00:03:31.060 --> 00:03:33.900
But let's take a little bit of
a look at the history that we

00:03:33.900 --> 00:03:35.540
went through in getting here.

00:03:35.540 --> 00:03:38.540
So I'm going to blast
through some of these.

00:03:38.540 --> 00:03:44.500
Bottom line is, in 1980, the university,
we were operating a UNIVAC 1108 computer,

00:03:44.540 --> 00:03:47.120
and we were starting to get
requests from various entities on

00:03:47.120 --> 00:03:48.500
campus to connect to this thing.

00:03:48.500 --> 00:03:52.000
And we realized that
with twisted-pair copper,

00:03:52.000 --> 00:03:55.130
we would soon fill all the cable
conduits in the computer science

00:03:55.210 --> 00:03:56.850
building where this was located.

00:03:57.000 --> 00:04:00.000
So we turned to an
RF transmission system.

00:04:00.000 --> 00:04:03.950
That turns out was very similar
to a cable television system.

00:04:04.120 --> 00:04:06.880
And because it was,
several departments approached

00:04:06.880 --> 00:04:09.500
us and started asking if they
could put video on this network.

00:04:09.500 --> 00:04:11.460
And we allowed them to.

00:04:11.460 --> 00:04:13.460
And so that's when this all started.

00:04:13.460 --> 00:04:18.080
And then over the next several years,
we went through various stages

00:04:18.170 --> 00:04:19.460
of upgrading the network.

00:04:19.460 --> 00:04:23.460
And in 1994,
another important thing happened.

00:04:23.460 --> 00:04:28.460
And we actually operate a separate video
network for our dorms called the RTN,

00:04:28.520 --> 00:04:29.440
or the Residential Television Network.

00:04:29.540 --> 00:04:32.390
And that has the array of
all of the channels that our

00:04:32.620 --> 00:04:35.460
local cable operator provides,
all the analog channels,

00:04:35.460 --> 00:04:36.410
which is 77 channels.

00:04:36.460 --> 00:04:39.420
So most of our dorms are
actually wired for coax,

00:04:39.560 --> 00:04:41.300
and that's how they get teased.

00:04:41.420 --> 00:04:43.420
And so we're going to be
using that for our TV now.

00:04:43.420 --> 00:04:46.420
But the new buildings we're building,
we're not wiring with coax.

00:04:46.420 --> 00:04:48.420
Everything is going to be network-based.

00:04:48.420 --> 00:04:49.420
Everything is going to be IP-based.

00:04:49.420 --> 00:04:51.790
So we needed a solution
for that going forward.

00:04:52.000 --> 00:06:06.100
[Transcript missing]

00:06:07.040 --> 00:06:10.360
One of the main things that
we're doing is standardization.

00:06:10.500 --> 00:06:14.670
So we're going to standardize
on management practices,

00:06:14.860 --> 00:06:19.510
equipment, monitoring,
deployment-- everything that we

00:06:19.590 --> 00:06:21.400
can we're going to standardize on.

00:06:21.510 --> 00:06:23.370
We're going to converge everything to IP.

00:06:23.710 --> 00:06:26.260
This includes exploring things
like doing video over IP,

00:06:26.260 --> 00:06:29.940
doing voice over IP,
and retiring some of the legacy

00:06:30.060 --> 00:06:34.960
protocols that we operated like
AppleTalk and IPX from the network,

00:06:35.090 --> 00:06:36.660
and use automation.

00:06:36.660 --> 00:06:38.040
Wherever possible.

00:06:38.270 --> 00:06:41.160
The other critical change that we made,
which was a difficult one,

00:06:41.160 --> 00:06:45.160
was we changed the funding
model from bandwidth to people.

00:06:45.390 --> 00:06:51.660
So our new model is based on however
many people a department has,

00:06:51.750 --> 00:06:56.660
and this is an ongoing billing,
so it provides us with a revenue source

00:06:56.660 --> 00:06:59.440
to upgrade the network going forward.

00:06:59.680 --> 00:07:01.910
And one of the other things that
was critical that came with this new

00:07:01.910 --> 00:07:05.080
network and the consistency that we're
able to deploy it with is support

00:07:05.200 --> 00:07:07.030
for something called IP multicast.

00:07:07.060 --> 00:07:09.160
And we're going to talk about
that a little bit more later,

00:07:09.160 --> 00:07:13.630
but it's critical to deploying
something like a service like this,

00:07:13.760 --> 00:07:18.280
in my estimation,
because it allows you to deliver

00:07:18.550 --> 00:07:25.270
as many people can be listening
in on the content as you want,

00:07:25.340 --> 00:07:29.270
and the overall impact on the network
is still that of just one stream.

00:07:29.740 --> 00:07:35.100
You can think of it as kind of picking up
an extension in a house on a telephone,

00:07:35.240 --> 00:07:36.740
and other people are just listening in.

00:07:37.020 --> 00:07:39.490
There's not any more
bandwidth that's being used.

00:07:39.600 --> 00:07:44.960
And for more information, Internet2,
which is a consortium of

00:07:44.960 --> 00:07:48.200
educational institutions that
operate this own separate network,

00:07:48.230 --> 00:07:50.920
Internet2 is also an organization,
is one of the big

00:07:51.030 --> 00:07:53.830
proponents of multicast,
and you can go to that

00:07:53.830 --> 00:07:55.850
URL for more information.

00:07:56.000 --> 00:09:07.100
[Transcript missing]

00:09:07.590 --> 00:09:10.080
The Xserve solution that
we ended up deploying,

00:09:10.160 --> 00:09:13.040
which you'll see in a moment,
was a lot less expensive

00:09:13.040 --> 00:09:14.600
than dedicated products.

00:09:14.730 --> 00:09:19.050
So we had things like dedicated encoders
from companies like Tanberg and Nviveo,

00:09:19.050 --> 00:09:22.590
which are professional,
industrial-grade solutions.

00:09:22.590 --> 00:09:25.980
But they're about $30,000
to $50,000 per encoder.

00:09:25.980 --> 00:09:29.060
And that was really hard for us to
justify if we were looking at doing

00:09:29.060 --> 00:09:31.140
something like 80 or more channels.

00:09:31.600 --> 00:09:33.800
With the Xserve solution,
we can do each channel for

00:09:33.800 --> 00:09:37.290
around $3,000 to $5,000,
depending on the configuration.

00:09:37.330 --> 00:09:40.610
And some configurations,
we can even do two channels per encoder,

00:09:40.610 --> 00:09:42.150
so that cuts the cost in half.

00:09:42.200 --> 00:09:44.630
And of course, the other thing,
QuickTime Streaming Server,

00:09:44.750 --> 00:09:46.180
QuickTime Broadcaster, free.

00:09:46.180 --> 00:09:49.450
And another huge win for QuickTime,
the client is free for

00:09:49.600 --> 00:09:50.800
Mac OS and Windows.

00:09:50.800 --> 00:09:54.870
So we have a major vendor
commercial-supported player that's free,

00:09:54.870 --> 00:09:58.930
and we don't have to worry about
the encumbrances of royalties and

00:09:58.930 --> 00:10:01.580
per-seat client licensing that we do.

00:10:01.620 --> 00:10:04.130
did with some of the other solutions.

00:10:04.590 --> 00:10:07.890
And then a little bit-- some of the
other corollary reasons-- QuickTime has

00:10:07.890 --> 00:10:10.950
some interesting capabilities that
we can leverage in this solution.

00:10:10.960 --> 00:10:13.540
QuickTime Text Track allows us
to deliver closed captioning

00:10:13.540 --> 00:10:15.500
content separate from the video.

00:10:15.500 --> 00:10:17.360
We don't have to overlay it on the video.

00:10:17.360 --> 00:10:19.310
When we went to other vendors
and asked about how we're

00:10:19.310 --> 00:10:21.760
gonna do closed captioning,
we were really surprised when

00:10:21.760 --> 00:10:25.160
some people's suggestions were,
"Run two encoders for every channel,

00:10:25.160 --> 00:10:27.370
one with closed captioning and
one without." And that seemed

00:10:27.750 --> 00:10:30.640
like a really crazy idea,
so we knew there was a better way,

00:10:30.640 --> 00:10:33.600
and QuickTime Text Track lets us do that.

00:10:33.610 --> 00:10:35.740
QuickTime Skins we're
not using right now,

00:10:35.740 --> 00:10:38.100
but we have experimented
with this in the past,

00:10:38.220 --> 00:10:40.340
and I think we're gonna go
back to this in the future.

00:10:40.440 --> 00:10:43.060
Let's just deploy, you know,
essentially a client list.

00:10:43.060 --> 00:10:44.860
I mean,
the only client you have is QuickTime,

00:10:44.860 --> 00:10:46.500
but you don't have to
download anything else,

00:10:46.530 --> 00:10:49.860
and we can have a custom interface
presented to the end user.

00:10:49.900 --> 00:10:52.960
And because of the
granularity of this system,

00:10:52.960 --> 00:10:57.060
other uses of--it wasn't really
a closed turnkey solution like

00:10:57.060 --> 00:10:58.510
some of the competitive products.

00:10:58.660 --> 00:11:01.300
So we--last year,
I was telling you we were

00:11:01.300 --> 00:11:03.560
exploring some alternate uses,
like, you know,

00:11:03.560 --> 00:11:07.210
doing a closed captioning search
database for research purposes,

00:11:07.590 --> 00:11:11.320
video archival, and custom players,
and this year,

00:11:11.320 --> 00:11:14.890
I'm happy to tell you that I can
actually show you some of these things.

00:11:15.380 --> 00:11:18.170
So here's what we deployed
on in our pilot that's been

00:11:18.170 --> 00:11:21.530
up and running for over,
for about a year and a half,

00:11:21.710 --> 00:11:26.300
two years now, and in a production
capacity for the last year.

00:11:26.300 --> 00:11:31.710
We have an Xserve that is the head
node for this system that's the web

00:11:31.720 --> 00:11:36.390
front end and does some monitoring
and has some communication with

00:11:36.390 --> 00:11:38.270
the individual encoding nodes.

00:11:38.300 --> 00:11:42.620
And we threw a monitor and keyboard and
mouse on it for local administration.

00:11:42.730 --> 00:11:43.400
This is in our rack.

00:11:43.400 --> 00:11:44.580
We'll show you pictures later.

00:11:45.300 --> 00:11:48.300
And we have Xserve cluster nodes that
we use as all of our streaming nodes.

00:11:48.300 --> 00:11:51.490
And those do the closed
captioning capture and,

00:11:51.640 --> 00:11:54.300
most importantly, they do the encoding
of the video and audio.

00:11:54.300 --> 00:11:57.880
And we have some support equipment that
we use with each of these encoders,

00:11:57.880 --> 00:11:58.200
too.

00:11:58.400 --> 00:12:01.620
We use a rack-mount TV tuner
and have analog video going

00:12:01.620 --> 00:12:03.300
into a FireWire converter.

00:12:03.300 --> 00:12:07.300
And that's how the video and
audio gets into the machine.

00:12:07.300 --> 00:12:10.300
And then we have some closed captioning
decoders that connect via serial ports.

00:12:10.300 --> 00:12:14.300
And there's all the exact hardware
that we're actually using.

00:12:15.340 --> 00:12:18.990
And one of the big moves that we're going
to be making soon is switching from the

00:12:19.120 --> 00:12:25.300
dual 1 GHz G4 Xserves we have right now
to probably dual 2.3 GHz Xserve G5s.

00:12:25.300 --> 00:12:31.300
And the major reason we're making
that change is to support H.264.

00:12:31.300 --> 00:12:33.580
Now on this topic,
I might mention that even

00:12:33.580 --> 00:12:37.300
though H.264 requires a lot
more horsepower to encode live,

00:12:37.300 --> 00:12:41.300
we found that it requires about
twice the horsepower to live encode.

00:12:41.300 --> 00:12:44.300
But the great thing is it gives you
twice the quality at the same time.

00:12:45.300 --> 00:12:46.290
So you can get a lot of data right.

00:12:46.300 --> 00:12:49.230
And I know that's kind
of a qualitative thing,

00:12:49.440 --> 00:12:54.270
but when you see it,
it does really make a difference.

00:12:54.300 --> 00:12:57.030
And the software that we're using,
of course, Mac OS X Server,

00:12:57.060 --> 00:12:58.300
QuickTime Broadcaster.

00:12:58.300 --> 00:13:02.110
And QuickTime Broadcaster has the
ability to do multicast broadcast

00:13:02.110 --> 00:13:04.300
directly from Broadcaster itself.

00:13:04.300 --> 00:13:06.250
So we don't even need
any other applications.

00:13:06.310 --> 00:13:11.300
We just have Broadcaster configured on
each client or each encoding server,

00:13:11.300 --> 00:13:11.300
excuse me.

00:13:12.490 --> 00:13:16.260
And it doesn't even need a
streaming server to support it.

00:13:16.360 --> 00:13:19.270
Broadcaster encodes,
plants it directly on the

00:13:19.370 --> 00:13:23.300
network in a multicast format,
and we're done.

00:13:23.300 --> 00:13:27.300
Apple Remote Desktop, of course,
we use for monitoring, Server Monitor,

00:13:27.330 --> 00:13:30.220
and in our data center,
we also use HP OpenView as

00:13:30.260 --> 00:13:31.300
a monitoring solution.

00:13:31.300 --> 00:13:34.300
And on the client, of course,
we use QuickTime Player.

00:13:34.300 --> 00:13:38.490
But since we're using open standards,
we can actually support playback

00:13:38.650 --> 00:13:40.260
on many other platforms.

00:13:40.300 --> 00:13:45.300
We can use VLC on Linux, Solaris,
or Mac OS and Windows for that matter.

00:13:45.300 --> 00:13:49.660
And many of the MPEG-4 compliant
devices that are out there also

00:13:49.760 --> 00:13:52.300
are able to play back this content.

00:13:52.300 --> 00:13:58.300
When we were looking for set-top boxes,
after the Mac Mini came out, we realized,

00:13:58.300 --> 00:14:00.130
hey, here's a box that's got DVI.

00:14:00.330 --> 00:14:02.300
It's small.

00:14:02.300 --> 00:14:03.280
It's quiet.

00:14:03.300 --> 00:14:05.300
It's got a DVD drive.

00:14:05.300 --> 00:14:09.280
And it can play back this content,
so why don't we start using that?

00:14:09.410 --> 00:14:13.420
So we are actually deploying Mac Minis
in test deployments right now in

00:14:13.490 --> 00:14:16.240
essentially an appliance-like capacity.

00:14:16.300 --> 00:14:21.290
And we have one of these in operation
right now and another one in test.

00:14:21.300 --> 00:14:25.900
And we have some interaction with the
specialty player application that we

00:14:25.900 --> 00:14:28.250
wrote that we'll talk about later.

00:14:28.300 --> 00:14:29.840
So...

00:14:31.850 --> 00:14:36.230
The other thing that we do on each
encoding server is we want to set these

00:14:36.230 --> 00:14:38.170
essentially up like appliances as well.

00:14:38.280 --> 00:14:41.460
So here's kind of the
general practices we use.

00:14:41.520 --> 00:14:44.160
Xserve boots,
logs in as a broadcasting user.

00:14:44.160 --> 00:14:46.780
In our case, the user's called Dayton.

00:14:46.900 --> 00:14:48.660
Whenever anything goes
wrong with the server,

00:14:48.770 --> 00:14:52.670
if some service hangs or if the
server itself hangs and Watchdog or a

00:14:52.670 --> 00:14:56.690
hardware monitor is able to catch it,
it's pretty good about just

00:14:56.810 --> 00:14:58.080
rebooting and coming back up.

00:14:58.160 --> 00:15:01.240
Now even though that's a rare occurrence,
if something like that does happen,

00:15:01.310 --> 00:15:05.480
we want the server to obviously come
back up and be in the state of doing

00:15:05.480 --> 00:15:08.840
what it's supposed to be doing,
which is encoding and broadcasting.

00:15:08.940 --> 00:15:10.490
Same thing with QuickTime Broadcaster.

00:15:10.640 --> 00:15:13.600
If something happens to
QuickTime Broadcaster itself,

00:15:13.680 --> 00:15:17.080
we use a monitoring script that
I'll show you on the next slide.

00:15:17.270 --> 00:15:19.870
So QuickTime Broadcaster started
by a very simple Apple script

00:15:20.210 --> 00:15:23.030
with its configuration that it
has on that particular client,

00:15:23.040 --> 00:15:25.740
which is very simple,
and then it just starts broadcasting.

00:15:25.800 --> 00:15:29.240
Our closed captioning capture
script is spawned by Watchdog,

00:15:29.260 --> 00:15:33.200
and if it dies for any reason,
It just gets restarted.

00:15:33.480 --> 00:15:36.330
And we use a cron job
that runs every minute.

00:15:36.340 --> 00:15:40.110
That's a really short script that just
checks to see if Broadcaster is running,

00:15:40.110 --> 00:15:42.380
and if it's not, relaunches Broadcaster.

00:15:42.450 --> 00:15:48.870
And even though these anomalies are
a rarity and definitely not the norm,

00:15:48.870 --> 00:15:50.960
and we rarely see them,
we do log to see when

00:15:50.960 --> 00:15:52.400
these things happen.

00:15:52.520 --> 00:15:56.400
It's good to know that they're there,
because whenever anything does happen,

00:15:56.400 --> 00:15:59.760
we have confidence that the server
is just going to keep going.

00:16:01.140 --> 00:16:05.080
So,
that's kind of a brief on this system.

00:16:05.110 --> 00:16:07.710
So what's new,
especially for those of you

00:16:07.720 --> 00:16:09.100
who were here last year?

00:16:09.100 --> 00:16:11.600
And the huge thing that's
new is QuickTime 7.

00:16:11.660 --> 00:16:18.990
H.264 is probably one of the most
significant additions to QuickTime 7

00:16:18.990 --> 00:16:21.700
and it is an amazing codec.

00:16:21.700 --> 00:16:21.700
Now,

00:16:21.910 --> 00:16:25.340
When you do static encoding
for files that are just going

00:16:25.340 --> 00:16:30.040
to be on-demand type content,
you can take your sweet time,

00:16:30.040 --> 00:16:33.160
run it on any hardware,
and it's just a matter of how long

00:16:33.160 --> 00:16:37.920
you want to wait for how high of a
quality you want the file to be encoded.

00:16:37.920 --> 00:16:40.450
When you do live streaming,
you don't really have a choice

00:16:40.610 --> 00:16:43.520
but to live within the constraints
of your processing power.

00:16:44.180 --> 00:16:52.020
So H.264 is very processor-hungry,
but we've found that on

00:16:52.150 --> 00:16:57.440
dual G5 configurations,
we can do 640x480 or 720x480

00:16:57.440 --> 00:17:00.230
depending on our input,
30 frames per second,

00:17:00.230 --> 00:17:06.590
the best quality setting of H.264, and...

00:17:07.240 --> 00:17:09.200
I think that's about it
on that configuration.

00:17:09.200 --> 00:17:11.880
So it's, you know,
essentially what you'd expect to be a

00:17:11.880 --> 00:17:16.600
very good quality standard definition
broadcast in under 1.5 megabits a second.

00:17:16.620 --> 00:17:19.020
And that's actually really impressive.

00:17:19.080 --> 00:17:22.640
Now the other huge things
that QuickTime 7 brought,

00:17:22.770 --> 00:17:25.960
and along with Broadcaster 1.5,
and some of you in this room

00:17:25.960 --> 00:17:29.100
may know what I'm talking about
when I mention these things,

00:17:29.100 --> 00:17:34.360
but QuickTime Broadcaster historically,
probably because of processing power

00:17:34.360 --> 00:17:38.400
that would be required in the past,
threw out half of the vertical

00:17:38.400 --> 00:17:39.960
frames of the DV input.

00:17:39.960 --> 00:17:42.030
And this is probably because
back in the days of the,

00:17:42.040 --> 00:17:44.700
you know, blue and white G3,
you'd be nuts to try to

00:17:44.700 --> 00:17:46.370
do 640 by 480 encoding.

00:17:46.380 --> 00:17:49.030
But now it's actually possible
on the hardware that we have.

00:17:49.130 --> 00:17:53.040
So QuickTime Broadcaster has been
updated and allows full frame

00:17:53.040 --> 00:17:56.990
input from a lot of devices that
it didn't formerly allow it from,

00:17:57.000 --> 00:17:58.120
most notably DV.

00:18:00.670 --> 00:18:03.400
Another thing that's
new is Dayton Player,

00:18:03.400 --> 00:18:07.420
which is a Mac OS X native
Cocoa application that uses QtKit in

00:18:07.420 --> 00:18:12.300
QuickTime 7 and just uses the native
QuickTime frameworks that provides

00:18:12.450 --> 00:18:14.240
a TV-like interface to OS X.

00:18:14.240 --> 00:18:18.900
It gives a remote control and some
informational overlays on the screen,

00:18:18.900 --> 00:18:21.120
things you'd expect from
this type of an application.

00:18:21.220 --> 00:18:26.950
It makes people feel like they're using
a TV and also has hooks that allow some

00:18:27.090 --> 00:18:30.040
of our classroom AV control systems.

00:18:30.460 --> 00:18:33.670
On our campus we use NetLynx
AMX AV switch control systems

00:18:33.670 --> 00:18:35.630
at the front of the classroom.

00:18:35.640 --> 00:18:39.340
These devices can send out just a
Telnet command and the Mac Mini or

00:18:39.340 --> 00:18:43.330
whatever device is there can just
listen on a port and the user can

00:18:43.640 --> 00:18:48.790
go up to the front of the room and
press TV on our control system.

00:18:48.800 --> 00:18:50.800
That spawns the QuickTime player.

00:18:50.800 --> 00:18:52.840
They can touch CNN.

00:18:52.840 --> 00:18:54.040
Another command is sent.

00:18:54.080 --> 00:18:56.900
The player changes to CNN and
the user doesn't even know

00:18:56.900 --> 00:19:00.240
they're using a Mac Mini or that
it's anything other than TV.

00:19:00.420 --> 00:19:03.380
Except for the telltale cue
and the little buffering

00:19:03.380 --> 00:19:05.020
thing as the channel loads.

00:19:05.020 --> 00:19:11.980
And because we built our system in such a
way that it was pretty open and granular,

00:19:11.980 --> 00:19:15.900
my organization,
the Division of Information Technology,

00:19:15.900 --> 00:19:18.290
which is kind of the
central IT body at UW,

00:19:18.300 --> 00:19:19.570
didn't even do this.

00:19:19.620 --> 00:19:22.380
Brian Deeth,
who's an IT person in our School of

00:19:22.480 --> 00:19:27.450
Journalism and Mass Communication,
decided that he wanted to explore with

00:19:27.450 --> 00:19:33.010
his faculty some research applications
and we had a closed captioning

00:19:33.150 --> 00:19:35.620
search system that got developed,
which we'll talk about

00:19:35.620 --> 00:19:36.780
in a little bit here too.

00:19:36.970 --> 00:19:39.630
But Brian thought, "Hey,
wouldn't it be neat to have a

00:19:39.630 --> 00:19:43.910
native Mac OS X application to view
this?" So this was written and then

00:19:43.910 --> 00:19:46.260
provided to the campus community.

00:19:46.260 --> 00:19:48.920
And this is one of the great
examples of the type of

00:19:48.920 --> 00:19:50.980
flexibility that QuickTime offers.

00:19:50.980 --> 00:19:54.180
And this was what I was just
talking about a moment ago.

00:19:54.180 --> 00:19:57.450
We started doing text and
actually video archiving as well.

00:19:57.510 --> 00:20:00.340
So several months ago we started
capturing all the closed captions

00:20:00.340 --> 00:20:02.510
and all those captioning texts
from all of our channels.

00:20:02.810 --> 00:20:08.100
It's all indexed and inserted
into a MySQL database.

00:20:08.370 --> 00:20:13.330
We also capture thumbnails every
minute of the video and insert those

00:20:13.330 --> 00:20:15.580
into the database as binary objects.

00:20:15.600 --> 00:20:21.900
And a custom PHP web page
allows the--provides the user

00:20:21.900 --> 00:20:25.020
interface for this and allows
people to enter in search terms,

00:20:25.140 --> 00:20:28.580
search by times, search by pretty much
whatever parameters they want,

00:20:28.590 --> 00:20:30.290
and retrieve the content.

00:20:30.300 --> 00:20:34.260
And right now we're archiving
video on a test basis.

00:20:34.260 --> 00:20:39.620
The video is retrieved using
specially crafted smile URLs.

00:20:39.620 --> 00:20:43.210
And this demonstration really shows
the potential for being able to do a

00:20:43.350 --> 00:20:45.690
campus-wide DVR or TiVo-like system.

00:20:45.700 --> 00:20:50.260
Why have people record it individually on
their clients when we have 80,000 users,

00:20:50.260 --> 00:20:52.640
when we can just record
everything centrally and then

00:20:52.650 --> 00:20:53.860
provide it to the campus?

00:20:53.980 --> 00:20:59.020
And this was also developed in
cooperation with Brian Deeth

00:20:59.130 --> 00:21:00.260
at the School of Journalism.

00:21:00.260 --> 00:21:03.790
and this, we think,
is going to be a great research tool.

00:21:04.230 --> 00:21:06.100
So here's a typical Dayton node.

00:21:06.140 --> 00:21:10.050
We have our Xserve,
we have a FireWire converter,

00:21:10.140 --> 00:21:15.100
we've got our closed captioning decoder,
and we have a rack-mount TV tuner.

00:21:15.100 --> 00:21:20.100
In some of the boxes we also have
a Miglia Alchemy TV PCI card.

00:21:20.300 --> 00:21:22.100
That's just a TV tuner.

00:21:22.100 --> 00:21:26.070
And that can operate completely
independent of everything else.

00:21:26.120 --> 00:21:29.100
We could have nodes that only
had the TV tuners in them,

00:21:29.100 --> 00:21:33.280
but we have some nodes that have
all of the stuff that you see here.

00:21:34.250 --> 00:21:36.600
So what does Dayton look like?

00:21:36.720 --> 00:21:38.580
There is our pilot rack.

00:21:38.690 --> 00:21:42.700
Xserve's intermixed with
the rack-mount TV tuners,

00:21:42.700 --> 00:21:44.100
and they're not so deep.

00:21:44.200 --> 00:21:48.140
So what we found is that in the
back we had one U of open space,

00:21:48.140 --> 00:21:50.280
and that's where we stuff our
firewire converter and our

00:21:50.280 --> 00:21:51.100
closed captioning decoder.

00:21:51.100 --> 00:21:53.380
Now, you might not want to
have all this kind of,

00:21:53.500 --> 00:21:55.990
you know,
this much external support equipment

00:21:56.110 --> 00:21:58.860
for each of these channels,
and that's why as soon as we could we

00:21:58.890 --> 00:22:01.100
started exploring the Miglia solution.

00:22:01.100 --> 00:22:05.540
And for our next phase,
what we're most likely going

00:22:05.540 --> 00:22:09.100
to be doing is getting Miglia
cards for each of the servers,

00:22:09.140 --> 00:22:12.730
and then we're going to do away with
all the support equipment and just

00:22:12.730 --> 00:22:17.100
have a completely internal solution,
one U per channel.

00:22:17.100 --> 00:22:18.090
Here's our web page.

00:22:18.100 --> 00:22:21.900
This is what users see if
they hit the web interface.

00:22:22.690 --> 00:22:26.640
This is an example of one of the channels
just being played in QuickTime Player,

00:22:26.660 --> 00:22:29.950
an example of one of the
channels with closed captioning.

00:22:31.110 --> 00:22:32.560
And here is Dayton Player.

00:22:32.890 --> 00:22:35.050
So this is our new Player application.

00:22:35.330 --> 00:22:36.700
It's completely self-contained.

00:22:36.700 --> 00:22:38.590
It does not use QuickTime Player.

00:22:38.700 --> 00:22:41.640
It uses QuickTime and QTKit directly.

00:22:41.770 --> 00:22:47.410
And it, as you can see,
has all the buttons you'd expect

00:22:47.480 --> 00:22:50.520
to find on a remote control and
has the overlays you'd expect to

00:22:50.640 --> 00:22:54.290
find on a TV-type application.

00:22:56.000 --> 00:22:59.840
We also have a presets drawer that comes
out and we'll show you how that works.

00:22:59.920 --> 00:23:01.320
It's pretty nifty.

00:23:01.430 --> 00:23:04.060
One of the other things
that Dayton Player does is

00:23:04.060 --> 00:23:07.830
since we go directly to the
QuickTime frameworks and bypass Player,

00:23:07.970 --> 00:23:10.900
we can support full screen
without QuickTime Pro.

00:23:10.900 --> 00:23:14.960
Here's our search page.

00:23:15.410 --> 00:23:17.100
Here's an example of some of
the search results and I'm going

00:23:17.100 --> 00:23:20.040
to show you some of that now.

00:23:20.130 --> 00:23:23.170
Can we switch to demo one please?

00:23:37.410 --> 00:23:41.930
Now, normally, before I start here,
normally we deliver all this content

00:23:41.930 --> 00:23:46.270
exclusively via multicast on the
University of Wisconsin campus.

00:23:46.460 --> 00:23:48.120
That means that,
and we also use something

00:23:48.130 --> 00:23:49.800
called locally scoped multicast.

00:23:49.800 --> 00:23:52.300
So the public internet
doesn't support multicast.

00:23:52.300 --> 00:23:55.300
So not only does that mean that we
can't go over the public internet,

00:23:55.300 --> 00:24:00.060
the locally scoped addresses keep it
on campus even between other campuses

00:24:00.060 --> 00:24:02.290
that do support multicast over
internet too and that sort of thing.

00:24:02.300 --> 00:24:06.290
So I set up a special unicast
QuickTime streaming server.

00:24:06.300 --> 00:24:08.300
We're doing a multicast to unicast relay.

00:24:08.300 --> 00:24:13.170
And Brian's added some code to this,
a nice debug menu that lets

00:24:13.170 --> 00:24:15.070
us kick over to unicast.

00:24:15.400 --> 00:24:17.300
Let me just select that.

00:24:17.300 --> 00:24:21.710
And of course we don't want
just anyone to connect.

00:24:28.300 --> 00:24:30.600
And if the demo gods are on my side,
we'll have enough bandwidth

00:24:30.780 --> 00:24:32.100
for this to work properly.

00:24:32.200 --> 00:24:37.120
...after more than three weeks in
captivity... So this is how it works.

00:24:38.500 --> 00:24:41.720
You can see how some of these channel
overlays and things like that work,

00:24:41.740 --> 00:24:43.050
information.

00:24:43.050 --> 00:24:45.990
Presets drawer.

00:24:46.010 --> 00:24:47.500
We have a couple of
presets in here already.

00:24:47.500 --> 00:24:49.890
Let's switch to the weather channel.

00:24:57.000 --> 00:25:00.780
Let's kick it to full screen.

00:25:01.000 --> 00:25:10.740
And so you can see what we
have is a very watchable,

00:25:10.740 --> 00:25:17.280
standard definition quality TV broadcast
in just over a megabit a second.

00:25:20.030 --> 00:25:20.960
text is very readable.

00:25:20.960 --> 00:25:23.530
And our concentration was really
on getting text to be readable,

00:25:23.530 --> 00:25:26.460
getting text stickers to look right,
getting motion and sporting

00:25:26.460 --> 00:25:27.660
events to look right.

00:25:27.690 --> 00:25:30.700
So that when people actually wanted
to use this to really watch TV,

00:25:30.700 --> 00:25:34.620
they wouldn't feel like they
were being short-changed.

00:25:34.740 --> 00:25:39.170
And obviously,
when you do a delivery application

00:25:39.170 --> 00:25:44.270
where you're delivering to a computer,
you're kind of inherently limited

00:25:44.410 --> 00:25:47.420
in how users can watch the content.

00:25:47.590 --> 00:25:50.440
So right now,
this is kind of being deployed in

00:25:50.440 --> 00:25:53.480
what I would call a normal TV capacity
in just a couple of locations on

00:25:53.480 --> 00:25:57.840
campus where people are hooking up to
external projectors or conventional TVs.

00:25:57.930 --> 00:26:02.560
But ideally, we'd like to get to a point
where we can deploy some type of

00:26:02.560 --> 00:26:07.350
a standardized set-top box type
solution along with this as well.

00:26:07.450 --> 00:26:11.840
So the controller disappears when you
have the mouse idle for a little while.

00:26:11.840 --> 00:26:15.060
And just come in here and get
back out of full screen mode.

00:26:15.150 --> 00:26:17.150
Oh, and let's switch to-- and oh.

00:26:17.190 --> 00:26:19.780
Another thing I should say is all
these channels are dynamically

00:26:19.790 --> 00:26:21.840
loaded from a MySQL database.

00:26:21.900 --> 00:26:26.060
So as the content that's
available changes,

00:26:26.090 --> 00:26:28.940
the channel list here and the
channels that are available within

00:26:28.940 --> 00:26:30.360
the player itself will change.

00:26:30.420 --> 00:26:32.860
So I can use channel up, down, and here,
and that sort of thing,

00:26:32.860 --> 00:26:34.380
or enter the numbers manually.

00:26:34.390 --> 00:26:37.780
Or I can just come down and
select a channel individually.

00:26:41.090 --> 00:26:44.680
And it loads up, when we're on campus on
the multicast network,

00:26:44.680 --> 00:26:47.000
it's only a second or two for
the channel to load and it's

00:26:47.000 --> 00:26:49.000
just a little bit longer here.

00:26:49.060 --> 00:26:53.140
So this is the kind of,
this is what it looks like and I want to

00:26:53.140 --> 00:26:55.740
show you the closed captioning as well.

00:26:56.150 --> 00:26:59.490
Normally we do it right in the player,
but when we're off campus we

00:26:59.590 --> 00:27:01.000
can't do it in the same way.

00:27:01.000 --> 00:27:06.790
So at least I can bring up the closed
captioning that goes along with this.

00:27:08.510 --> 00:27:09.370
And there we go.

00:27:09.740 --> 00:27:13.830
So, thank you very much.

00:27:16.940 --> 00:27:20.540
Normally this appears right in the window
along with the video when you press

00:27:20.600 --> 00:27:22.750
this closed captioning button over here.

00:27:22.750 --> 00:27:25.600
But you know, this also demonstrates
another thing that--oh,

00:27:25.600 --> 00:27:26.800
and here's how the presets thing works.

00:27:26.800 --> 00:27:27.600
This is pretty cool.

00:27:27.660 --> 00:27:32.600
You just click and hold like
you do on a normal radio,

00:27:32.600 --> 00:27:32.600
and then it just gets added.

00:27:33.640 --> 00:27:37.090
And you can put it away and you can
also close these windows too and bring

00:27:37.090 --> 00:27:40.000
them back or from the window menu.

00:27:40.060 --> 00:27:43.510
And since this is all granular,
we can have just the closed

00:27:43.510 --> 00:27:45.690
captioning running by itself.

00:27:46.480 --> 00:27:49.630
Not that that's useful, but, you know.

00:27:49.740 --> 00:27:51.010
Okay.

00:27:51.150 --> 00:27:55.740
So the other thing that I want
to show is-- and by the way,

00:27:55.740 --> 00:27:59.440
any of you can go to this website,
dayton.wis.edu,

00:27:59.590 --> 00:28:03.290
and look at "About Information"
about this project.

00:28:03.700 --> 00:28:06.830
Not that that's useful, but, you know.

00:28:06.840 --> 00:28:08.210
Okay.

00:28:08.300 --> 00:28:12.890
So the other thing that I want
to show is-- and by the way,

00:28:12.930 --> 00:28:16.200
any of you can go to this website,
dayton.wis.edu,

00:28:18.050 --> 00:28:23.330
So here's our search page and, um... Oh,
oops.

00:28:23.460 --> 00:28:25.380
Didn't want to quit.

00:28:32.080 --> 00:28:35.910
Tied into our central
authentication service on campus.

00:28:35.910 --> 00:28:42.300
Let's pick a couple of channels here,
some news channels.

00:28:43.840 --> 00:28:49.200
"Start time 8 a.m., stop time now,
and maybe we use White House as

00:28:49.200 --> 00:28:51.090
the example here,
so."

00:28:52.800 --> 00:29:09.300
[Transcript missing]

00:29:11.530 --> 00:29:14.470
Now Brian Deeth and I put this together--
and another testament to QuickTime is

00:29:14.560 --> 00:29:18.570
that Brian Deeth and I put this together
in pretty much just our spare time.

00:29:18.630 --> 00:29:21.670
Now George Cook of Apple was also
instrumental in helping us work out

00:29:21.740 --> 00:29:23.960
some of the closed captioning capture.

00:29:23.960 --> 00:29:26.060
We have a script,
a Python script that does that,

00:29:26.060 --> 00:29:29.120
that was done quick and dirty
by George a couple of years ago.

00:29:29.120 --> 00:29:29.940
And it's still working.

00:29:29.940 --> 00:29:32.610
And that's actually what we use to
insert all of our closed captioning

00:29:32.750 --> 00:29:34.580
stuff into the database too.

00:29:34.640 --> 00:29:35.740
So here's our search results.

00:29:35.740 --> 00:29:40.220
And any of you who've seen
video.google.com might think

00:29:40.220 --> 00:29:41.460
this looks very familiar.

00:29:41.470 --> 00:29:43.140
And you know what it does,
but I would say that

00:29:43.160 --> 00:29:45.290
we thought of it first.

00:29:46.790 --> 00:29:49.770
So if I want to, and you know,
so this is great that we can

00:29:49.770 --> 00:29:51.170
get the text returned back.

00:29:51.250 --> 00:29:55.700
Well, what if I want to watch
this video segment here?

00:29:55.750 --> 00:29:56.950
I can click on the video.

00:29:57.190 --> 00:30:01.160
And there it is.

00:30:03.570 --> 00:30:08.000
And actually, it looks like our bandwidth
may not be on our side here.

00:30:08.040 --> 00:30:09.500
Let's just try it again.

00:30:10.040 --> 00:30:13.330
There we go.

00:30:13.410 --> 00:30:22.860
So if we go down here now
and look at what we selected,

00:30:22.860 --> 00:30:26.790
and unfortunately,
I wish that the video would...

00:30:30.810 --> 00:30:31.700
There we go.

00:30:31.700 --> 00:30:37.860
Okay,
so... So if you look in here in the text,

00:30:37.860 --> 00:30:45.490
you can see this is that video
segment that we just brought back.

00:30:45.580 --> 00:30:47.430
And this is only a one-minute chunk.

00:30:47.840 --> 00:30:53.410
Well, what if you want to do, let's say,
yesterday...

00:30:54.650 --> 00:30:57.440
3:00 p.m.

00:30:57.490 --> 00:31:00.340
Yesterday, 4:00 p.m.

00:31:00.390 --> 00:31:02.200
No search terms.

00:31:02.240 --> 00:31:04.770
And aggregation, one hour.

00:31:09.900 --> 00:31:11.850
So we're going to get
back that entire hour,

00:31:11.850 --> 00:31:13.950
and this brings up another
interesting opportunity.

00:31:14.080 --> 00:31:18.240
If you want to just read a
show and skim through the show,

00:31:18.300 --> 00:31:18.670
you can.

00:31:18.820 --> 00:31:20.130
There is the whole hour right there.

00:31:20.140 --> 00:31:24.580
But also,
here's the entire video for that hour.

00:31:25.070 --> 00:31:29.960
So this really brings up the possibility
of being able to do a campus-wide video

00:31:29.960 --> 00:31:33.900
archival system and we can build an
interface to this that makes sense,

00:31:33.910 --> 00:31:36.400
that people could even have
tied into a schedule and go say,

00:31:36.400 --> 00:31:44.000
"I want to watch Law & Order from last
Wednesday," and that sort of thing.

00:31:44.000 --> 00:31:46.900
So that is Dayton Search.

00:31:47.060 --> 00:31:50.300
And if we could switch
back to the slides,

00:31:50.300 --> 00:31:50.300
please.

00:31:53.500 --> 00:31:55.890
So going forward,
where are we going to go with this?

00:31:55.940 --> 00:31:59.560
We are going to move to the Xserve
G5s and we're going to go to

00:31:59.560 --> 00:32:01.700
H.264 as our encoding platform.

00:32:01.700 --> 00:32:04.510
We're going to move to
QuickTime 7 as a supported player,

00:32:04.770 --> 00:32:08.100
especially now that a QuickTime 7
public preview is out for Windows.

00:32:08.100 --> 00:32:11.120
Back home,
some people have already started testing

00:32:11.120 --> 00:32:13.810
that with our H.264 test channels.

00:32:13.820 --> 00:32:17.520
Continue to develop on our
text and video searching.

00:32:18.060 --> 00:32:21.200
We're in the middle of trying to
do the legal wrangling necessary to

00:32:21.260 --> 00:32:25.440
expand to 77 channels and we think
that we're in good shape there.

00:32:25.440 --> 00:32:28.740
And actually we just had some news
from our campus legal department.

00:32:28.740 --> 00:32:33.610
We were concerned about whether or
not we could really do this image

00:32:33.610 --> 00:32:36.580
and text and video archive on campus.

00:32:36.580 --> 00:32:40.980
And our legal staff at the
university has told us,

00:32:40.980 --> 00:32:46.940
basically just do it and tell the cable
operator that we think that it's legal.

00:32:48.610 --> 00:32:50.610
And...

00:32:53.880 --> 00:32:57.100
And along with some of
the fair use provisions,

00:32:57.300 --> 00:33:02.180
we feel pretty confident that the content
can be archived for 45 days before any

00:33:02.180 --> 00:33:04.790
copyright owner actually has to be asked.

00:33:04.800 --> 00:33:07.300
Now obviously this gets
a little bit dicey,

00:33:07.390 --> 00:33:10.620
but we're delivering this
content only on our own campus.

00:33:10.760 --> 00:33:15.640
So we're going to continue to
develop the Dayton Player and one

00:33:15.640 --> 00:33:19.390
other thing that we did pretty neat,
iChat.

00:33:19.390 --> 00:33:19.390
You can actually invite

00:33:19.500 --> 00:33:39.600
[Transcript missing]

00:33:39.700 --> 00:33:40.600
Who to contact?

00:33:40.600 --> 00:33:42.560
Dave Devereaux-Weber is the
project manager for Dayton.

00:33:42.560 --> 00:33:44.180
He was unable to make it here.

00:33:44.180 --> 00:33:45.560
He's one of our network engineers.

00:33:45.600 --> 00:33:49.600
Me, I'd be happy to field any
questions from people.

00:33:49.600 --> 00:33:50.600
There's my email address.

00:33:50.600 --> 00:33:53.680
And Brian Deeth,
who is in the front row over here

00:33:53.760 --> 00:33:57.600
and will be here afterwards to
answer any questions you might have.

00:33:57.600 --> 00:34:00.550
For more information,
you can visit that website.

00:34:00.600 --> 00:34:06.600
That concludes my portion of this
presentation and I'll pass it over to

00:34:06.600 --> 00:34:08.600
Nate Caplin of American Electric Power.

00:34:09.670 --> 00:34:13.190
Thanks.

00:34:16.670 --> 00:34:20.240
Hello everybody,
I'm Nate Caplin from AEP in Columbus,

00:34:20.240 --> 00:34:21.150
Ohio.

00:34:21.360 --> 00:34:25.020
Today I'm going to be talking about
QuickTime being used for an enterprise

00:34:25.020 --> 00:34:28.600
streaming application within a
large corporation on an intranet.

00:34:28.600 --> 00:34:32.600
I'll tell you about some
optional webcasting solutions.

00:34:32.600 --> 00:34:34.600
We'll be talking about multicast,
kind of like Dave did.

00:34:34.600 --> 00:34:38.280
I'll also be touching a little
bit on the new auto-bandwidth

00:34:38.280 --> 00:34:40.600
detection feature in QuickTime 7.

00:34:40.650 --> 00:34:44.750
And I'll end with some advocacy
for a few changes I'd like to see.

00:34:45.190 --> 00:34:49.190
Some of the things you'll learn are
how QuickTime 7 and Tiger can fit well

00:34:49.200 --> 00:34:53.300
within an enterprise IT architecture,
how to deploy QuickTime Player to

00:34:53.300 --> 00:34:55.000
a lot of Windows desktops.

00:34:55.000 --> 00:34:58.160
I'll show you our AEP TV video portal.

00:34:58.160 --> 00:35:03.260
We'll talk about how to webcast
live H.264 multiple streams with

00:35:03.260 --> 00:35:05.200
Wirecast from a single computer.

00:35:05.200 --> 00:35:09.700
And I'll actually try to demo
that if the demo gods help me out.

00:35:09.700 --> 00:35:12.660
And a little bit on using
auto-bandwidth detection.

00:35:13.280 --> 00:35:18.820
Technology framework for this is all
of the Apple products plus Wirecast.

00:35:19.070 --> 00:35:21.540
Dave touched on some of the
differences since last year.

00:35:21.660 --> 00:35:22.780
I might expand on that.

00:35:23.240 --> 00:35:27.190
Thank you, Apple,
for taking the pro-nag from QuickTime 7.

00:35:27.190 --> 00:35:29.110
That helps us a lot.

00:35:32.100 --> 00:35:34.690
Now if you can just do
full-screen playback without Pro,

00:35:34.690 --> 00:35:36.420
that would be the next great thing.

00:35:36.420 --> 00:35:40.360
QuickTime Server 5.5 and Tiger,
the auto-bandwidth detection is something

00:35:40.610 --> 00:35:44.340
that we're beginning to experiment with
and we think has a lot of potential.

00:35:44.340 --> 00:35:47.610
As Dave mentioned,
Broadcaster 1.5 now has

00:35:47.610 --> 00:35:49.300
full high-res DV capture.

00:35:49.430 --> 00:35:55.140
Wirecast 2 has come out since last year
and it allows multiple H.264 streams on

00:35:55.140 --> 00:35:58.020
the same computer from the same source.

00:35:58.860 --> 00:36:02.500
Some other developments, Compressor 2,
part of the new Final Cut 5 suite,

00:36:02.550 --> 00:36:03.660
has distributed encoding.

00:36:03.660 --> 00:36:09.420
And Tiger and Tiger Server have new
iChat AV features that will allow us

00:36:09.420 --> 00:36:14.690
to finally bring video conferencing
through iChat AV inside of our corporate

00:36:14.780 --> 00:36:18.540
firewall and perhaps offer that as a
solution to some of our executives.

00:36:20.410 --> 00:36:22.740
So a little bit about who AEP is.

00:36:22.770 --> 00:36:24.930
We are the largest power
generator in the U.S.

00:36:24.930 --> 00:36:30.390
with over 5 million customers in 11
states and over 20,000 employees in

00:36:30.390 --> 00:36:32.300
at least 400 different work locations.

00:36:32.300 --> 00:36:34.880
Needless to say,
that provides quite a challenge for us

00:36:34.880 --> 00:36:37.040
to communicate with all of our employees.

00:36:37.040 --> 00:36:41.390
A little bit about who we are within AEP.

00:36:41.530 --> 00:36:45.380
Interactive media is a function of our
corporate communications department,

00:36:45.380 --> 00:36:47.890
which is responsible for
our internet websites,

00:36:48.760 --> 00:36:54.160
our intranet website called AEP Now,
our video portal called AEP TV,

00:36:54.160 --> 00:36:58.700
which I'll talk about here shortly,
as well as 200 or more video

00:36:58.700 --> 00:37:03.840
projects per year and at least 25
live webcasts that we do per year,

00:37:04.020 --> 00:37:07.760
usually town hall style webcasts
of management talking to

00:37:07.760 --> 00:37:10.960
employees with interaction from
the employees to talk back.

00:37:10.960 --> 00:37:14.850
And our department is also
responsible for the annual report

00:37:14.850 --> 00:37:16.870
and other print collateral.

00:37:17.450 --> 00:37:21.540
Some of the reasons why we picked
QuickTime to use at AEP are first,

00:37:21.540 --> 00:37:25.350
obviously, like most video departments,
we use QuickTime and Max to

00:37:25.350 --> 00:37:27.510
produce most of our video projects.

00:37:27.520 --> 00:37:31.490
So using QuickTime as the delivery
method is just a lot more seamless

00:37:31.570 --> 00:37:33.480
of an integration with our workflow.

00:37:33.480 --> 00:37:37.660
But some of the more important
reasons are that QuickTime gives us

00:37:37.730 --> 00:37:42.010
a single player that we'll install
on all the versions of Windows that

00:37:42.030 --> 00:37:43.500
are deployed within our enterprise.

00:37:44.110 --> 00:37:47.120
With Windows Media Player,
which we still support and

00:37:47.120 --> 00:37:51.180
used to rely on primarily,
there are different versions required for

00:37:51.180 --> 00:37:54.890
different versions of Windows and patches
and bugs and it's been a real problem.

00:37:54.900 --> 00:38:00.280
We really appreciate the clean,
fast user interface of QuickTime Player.

00:38:00.280 --> 00:38:04.220
Some of its advanced features like
instant on and scrubbing get rid

00:38:04.230 --> 00:38:08.300
of the buffering delays that our
Windows Media users are used to.

00:38:08.480 --> 00:38:17.350
And our IT department even likes it
because our servers are immune from

00:38:17.350 --> 00:38:17.350
the viruses and security threats
that affect Windows media servers.

00:38:17.860 --> 00:38:22.480
Of course, open standards are always a
nice selling point and the new,

00:38:22.560 --> 00:38:26.800
excellent video quality with
H.264 is really promising.

00:38:26.800 --> 00:38:31.800
So, how to deploy QuickTime Player in a
corporate enterprise that's all PCs.

00:38:31.800 --> 00:38:33.440
Well,
first you have to get a QuickTime site

00:38:33.440 --> 00:38:36.800
license unless you want to send
everybody out to Apple.com.

00:38:37.070 --> 00:38:38.800
Fortunately, this is pretty easy to do.

00:38:38.800 --> 00:38:41.620
The site license is available
on Apple.com and it's free.

00:38:41.800 --> 00:38:45.710
You're going to need to test, obviously,
on all of your desktop configurations

00:38:45.810 --> 00:38:48.800
to make sure it doesn't break
anything that you need to use.

00:38:48.800 --> 00:38:51.800
But, while you're doing that,
it's a good idea to set the

00:38:51.800 --> 00:38:55.800
preferences the way that you'd like,
such as the Hot Pics movie,

00:38:55.800 --> 00:38:57.800
the auto-update, icons on the desktop.

00:38:57.810 --> 00:39:01.750
And then you can create a disk image for
new PCs so it just simply gets wrapped

00:39:01.750 --> 00:39:03.800
into any new PCs that are deployed.

00:39:03.800 --> 00:39:07.640
For existing PCs out there
already without QuickTime Player,

00:39:07.740 --> 00:39:13.140
we used a product called LandDesk,
which is a remote administration

00:39:13.150 --> 00:39:16.800
and network administration
utility that our company uses

00:39:16.800 --> 00:39:20.910
to create a custom installer,
basically a difference installer from

00:39:20.990 --> 00:39:24.800
a configuration without QuickTime to
a configuration with QuickTime.

00:39:24.800 --> 00:39:29.840
And that basically allows us
to forego using the standard

00:39:29.840 --> 00:39:35.470
QuickTime installer and prevent users
from being prompted several times

00:39:35.470 --> 00:39:39.710
for information and for registering,
that kind of thing.

00:39:39.850 --> 00:39:45.100
And our website, AEPTV, uses BrowserHawk,
which is a server-side utility that

00:39:45.100 --> 00:39:49.800
can detect any number of configuration
issues on the viewer's PCs,

00:39:49.800 --> 00:39:53.800
including whether QuickTime plugin
is installed and what version it is.

00:39:53.800 --> 00:39:59.800
If we detect that the user doesn't have
QuickTime at a version that is required,

00:39:59.800 --> 00:40:02.790
and if the media is only
available in QuickTime format,

00:40:02.790 --> 00:40:05.800
we prompt the user that
QuickTime is required to view this,

00:40:05.800 --> 00:40:08.790
and we link them to
the LandDesk installer,

00:40:08.800 --> 00:40:08.800
which is quick and easy.

00:40:08.870 --> 00:40:13.800
But that actually gets to the last point,
which is driving deployment with content.

00:40:13.800 --> 00:40:19.800
Our IT department wasn't very open
to the idea of broadcasting out

00:40:19.800 --> 00:40:21.800
or forcing everybody to install
QuickTime Player immediately,

00:40:21.890 --> 00:40:26.800
because it is a sizable download,
and we're talking about thousands of PCs.

00:40:26.800 --> 00:40:31.130
So what they did agree to was that
we could basically post some of our

00:40:31.130 --> 00:40:36.200
content in QuickTime format only,
as long as it wasn't mission-critical

00:40:36.200 --> 00:40:37.800
content to start with,
and that would basically drive

00:40:37.800 --> 00:40:37.800
the deployment of QuickTime.

00:40:37.800 --> 00:40:41.670
drive the deployment of
QuickTime Player gradually.

00:40:42.060 --> 00:40:48.580
So AEP TV, our enterprise video portal,
kind of like Dave's DATN player project,

00:40:48.660 --> 00:40:53.120
except that this is entirely web-based
and it's designed to float in a small

00:40:53.120 --> 00:40:55.280
pop-up window like you see here.

00:40:55.280 --> 00:40:58.600
It is the one place to come
for access to all of our videos

00:40:58.660 --> 00:41:02.800
on demand as well as our live
webcasts when those are scheduled.

00:41:02.800 --> 00:41:06.440
Videos are searchable
by subject and keyword.

00:41:06.440 --> 00:41:10.760
We use the homepage, which you see here,
to promote new content.

00:41:12.000 --> 00:41:15.860
But there's also menus, as you can see,
to access the video library.

00:41:15.860 --> 00:41:19.080
It's tied into our intranet website,
AEP Now,

00:41:19.080 --> 00:41:23.120
for related videos that link to stories.

00:41:23.140 --> 00:41:26.680
It does collect viewer statistics,
feedback.

00:41:26.680 --> 00:41:30.060
It allows viewers to email
videos to other coworkers.

00:41:30.060 --> 00:41:32.480
What they're actually
doing is emailing a link,

00:41:32.480 --> 00:41:36.600
of course, to download the video files to
their hard drive for local playback

00:41:36.600 --> 00:41:38.820
and to order DVD and tape copies.

00:41:38.840 --> 00:41:41.640
And, of course,
it's all driven by a database.

00:41:42.050 --> 00:41:44.070
backend.

00:41:45.170 --> 00:41:46.810
Let me go over and demo that right now.

00:41:46.980 --> 00:41:50.470
If we could please switch to demo three.

00:41:52.960 --> 00:41:53.820
Great.

00:41:53.950 --> 00:41:56.940
So this is my PowerBook,
and I'm going to have to demo

00:41:56.940 --> 00:42:01.330
this over our VPN because
this is an internal network.

00:42:01.450 --> 00:42:03.390
But what I'll do

00:42:03.900 --> 00:42:06.540
And please excuse that I'm
using Internet Explorer.

00:42:06.540 --> 00:42:11.170
It's because this was designed and
tested for Internet Explorer on the PC,

00:42:11.170 --> 00:42:15.700
and it does have a slight
incompatibility with Safari on the Mac.

00:42:20.830 --> 00:42:23.870
So this is AEP Now,
our employee intranet.

00:42:23.890 --> 00:42:28.220
It is the default home page for
all AEP employees when they launch

00:42:28.220 --> 00:42:29.700
Internet Explorer on their PCs.

00:42:29.700 --> 00:42:32.240
Basically,
it allows them to have access to

00:42:32.340 --> 00:42:35.990
tools and resources throughout AEP,
and the main section is

00:42:36.540 --> 00:42:37.800
constantly updated news.

00:42:37.880 --> 00:42:40.270
As you can see,
if there's a story that has a

00:42:40.270 --> 00:42:43.060
video linked to it or related,
it has a little icon

00:42:43.060 --> 00:42:44.560
next to the headline.

00:42:44.560 --> 00:42:51.880
If you go to the page for that story,
there's a sidebar here for AEP TV,

00:42:51.880 --> 00:42:55.350
and if you click on that,
it will launch up.

00:42:55.690 --> 00:43:00.150
The AEPTV interface, which, excuse me,
let me do that again because I was

00:43:00.180 --> 00:43:01.900
doing something in admin a moment ago.

00:43:01.900 --> 00:43:03.790
There we go.

00:43:04.380 --> 00:43:06.600
The APTV interface,
as you can probably tell,

00:43:06.600 --> 00:43:10.740
is driven by Flash,
so Flash 6 is required.

00:43:10.740 --> 00:43:14.460
We did that so that we could
basically support some of these

00:43:14.460 --> 00:43:17.010
nicer menus and better builds.

00:43:17.010 --> 00:43:19.740
But basically when somebody
clicks on a video link,

00:43:19.740 --> 00:43:23.560
it takes them directly to the page for
that video where they see the title,

00:43:23.700 --> 00:43:25.980
they see a caption,
they get some information

00:43:25.980 --> 00:43:29.540
about its duration,
and there's a button for large or small.

00:43:30.840 --> 00:43:35.370
Now this, having tested this in advance,
I know that this isn't going to play

00:43:35.520 --> 00:43:39.780
reliably because the connection over
the VPN from here is quite slow.

00:43:39.780 --> 00:43:42.550
But suffice it to say,
if you're on our network back home,

00:43:42.550 --> 00:43:45.640
the video pops up and starts
playing almost immediately.

00:43:45.640 --> 00:43:48.200
We do two sizes, a small and a large.

00:43:48.200 --> 00:43:53.580
The largest in a 16.9 situation,
the largest 640 by 360,

00:43:53.640 --> 00:43:56.080
and this is a 16.9 video.

00:43:57.380 --> 00:43:59.760
Let me surf you around the
interface a little bit more

00:43:59.760 --> 00:44:02.210
by starting at the home page.

00:44:02.770 --> 00:44:07.550
This is where we promote content,
including upcoming webcasts right here.

00:44:07.890 --> 00:44:13.700
The video library categorizes
everything by typical subject.

00:44:13.700 --> 00:44:16.540
So nuclear, for example,
here's a video about our

00:44:16.540 --> 00:44:18.540
Cook Nuclear plant in Michigan.

00:44:18.540 --> 00:44:23.200
If you go to the live webcast section,
you'll see any scheduled webcasts,

00:44:23.340 --> 00:44:26.560
and the next two that are coming
up are our earnings conference

00:44:26.560 --> 00:44:29.410
call for investors and our
employee earnings webcast,

00:44:29.500 --> 00:44:30.920
which we always do following that.

00:44:30.940 --> 00:44:36.440
If you go to More Info, for example,
this is our live webcasting interface.

00:44:36.440 --> 00:44:39.540
Looks very similar to On Demand,
except that the buttons are

00:44:39.540 --> 00:44:42.980
basically not available yet,
and it tells us what time and the

00:44:43.100 --> 00:44:44.570
date and time that this starts.

00:44:44.580 --> 00:44:47.920
One of the unique things that we
do on live webcasts is allow people

00:44:47.920 --> 00:44:51.280
to submit questions in advance
and during the live webcasts.

00:44:51.280 --> 00:44:55.160
So you could say, you know,
"What do you think

00:44:55.580 --> 00:44:58.570
about coal generation?"

00:45:01.100 --> 00:45:06.400
We do allow people to submit
things anonymously so that they

00:45:06.650 --> 00:45:13.820
can ask sensitive questions,
and people often do.

00:45:13.830 --> 00:45:13.830
That's what makes it pretty good.

00:45:14.430 --> 00:45:18.760
We allow people to provide feedback on
any video they've seen or any webcast.

00:45:18.860 --> 00:45:21.440
Let me real quick go back home.

00:45:24.260 --> 00:45:28.200
We do allow people to download videos,
so you can see this video is

00:45:28.200 --> 00:45:39.030
posted in several versions.

00:45:39.740 --> 00:45:39.860
And I could, oh,
of course it's made for a PC,

00:45:39.860 --> 00:45:39.860
so you have to right-click on it.

00:45:39.860 --> 00:45:39.870
Excuse me.

00:45:40.520 --> 00:45:44.200
And one of the other neat
things we do is the order tape.

00:45:44.510 --> 00:45:48.900
We take orders here for tapes or
DVDs and we fill those orders weekly.

00:45:48.990 --> 00:45:51.200
And we found this is
a lot more efficient,

00:45:51.200 --> 00:45:53.770
of course,
than sending out a bunch of tapes or

00:45:53.770 --> 00:45:57.610
DVDs to all these different locations
for people to see who don't have

00:45:57.610 --> 00:45:59.790
computers or taking them by hand.

00:46:00.230 --> 00:46:06.660
What I want to do now is real quick
take you to the back end of AAP TV,

00:46:06.660 --> 00:46:06.660
the admin interface.

00:46:08.080 --> 00:46:12.000
Which is of course password protected.

00:46:12.000 --> 00:46:14.910
Not nearly as pretty,
but it does the job.

00:46:15.010 --> 00:46:18.740
I'll go into the Live Events Manager and
the most recent live event is

00:46:18.740 --> 00:46:20.460
scheduled up here at the top.

00:46:20.710 --> 00:46:28.020
You'll recall that I submitted a question
for the employee earnings webcast,

00:46:28.020 --> 00:46:31.610
so we can go here and see what
questions have been submitted.

00:46:31.610 --> 00:46:31.610
And there we go.

00:46:31.610 --> 00:46:31.610
It's right in there.

00:46:32.660 --> 00:46:51.150
During a live webcast,
let me maybe take you back to the

00:46:51.150 --> 00:46:51.150
last employee earnings webcast.

00:46:51.150 --> 00:46:51.150
And you can get an idea for
the volume of questions that

00:46:51.150 --> 00:46:51.150
comes in and what this -- oh,
excuse me, this is the current one.

00:46:51.150 --> 00:46:51.150
I meant to go back to -- here we go.

00:46:55.460 --> 00:46:56.840
There we are.

00:46:56.890 --> 00:47:01.050
Now, during the live webcast,
the moderator on set

00:47:01.050 --> 00:47:04.900
actually views these on a PC,
and as he's going through,

00:47:04.900 --> 00:47:07.940
he can mark these as answered,
or he can delete them,

00:47:07.940 --> 00:47:12.500
or he can go in and edit them and even
reorder them so that he can have them,

00:47:12.500 --> 00:47:14.660
you know, set up to ask an order.

00:47:14.660 --> 00:47:18.000
It also gives us a nice way
to track all the questions,

00:47:18.250 --> 00:47:21.200
and our CEO personally
answers all the questions,

00:47:21.350 --> 00:47:24.390
even the ones that don't get
asked during the live events.

00:47:25.590 --> 00:47:32.020
Our clip manager is where all of
the on-demand clips are available.

00:47:32.970 --> 00:47:35.360
This takes a moment to load because
there are so many in there now.

00:47:35.360 --> 00:47:38.550
We have it set to come
up all on one page.

00:47:39.430 --> 00:47:44.030
But this may look familiar
to users of QTSS Publisher,

00:47:44.500 --> 00:47:45.430
actually.

00:47:45.670 --> 00:47:47.740
It's basically a library of content.

00:47:47.770 --> 00:47:50.970
It can be sorted by a
number of different,

00:47:50.970 --> 00:47:55.440
you know, by name or by order of
entry into the system.

00:47:55.440 --> 00:47:59.460
But one of the things that it does
that we like is tells us for every

00:47:59.460 --> 00:48:03.780
video what formats are posted and
gives us access to statistics.

00:48:04.590 --> 00:48:14.380
So for example, if I go back to the, oh,
a video called Tools, Texas, English,

00:48:14.380 --> 00:48:16.770
I can go to Stats.

00:48:16.920 --> 00:48:19.870
And see right away how many times
this video has been accessed.

00:48:19.930 --> 00:48:23.030
I'm going to guess this one
hasn't been accessed much because

00:48:23.030 --> 00:48:26.500
it's just a copy of a particular
commercial that we've posted.

00:48:26.540 --> 00:48:28.450
This, by the way,
would be a great feature for

00:48:28.800 --> 00:48:31.800
QuickTime streaming server to have.

00:48:31.830 --> 00:48:35.390
All right.

00:48:35.560 --> 00:48:37.950
If we can go back to the slides, please.

00:48:44.060 --> 00:48:45.600
So, doing live webcasts.

00:48:45.600 --> 00:48:49.930
First, let me give a little advice for
anybody thinking about doing this.

00:48:49.930 --> 00:48:52.940
As Dave would tell you as well,
setting up live webcasting

00:48:53.280 --> 00:48:55.500
can be very dicey,
so you should only do it

00:48:55.600 --> 00:48:59.000
for the right reasons,
not just because it's cool.

00:48:59.000 --> 00:49:03.220
The right reasons are to have audience
interaction during the live webcasts,

00:49:03.370 --> 00:49:07.090
two-way communications,
or if what you're announcing through the

00:49:07.090 --> 00:49:11.510
webcast is really big news that everybody
has to hear about at the same time.

00:49:11.540 --> 00:49:14.980
It's important to promote it,
or else people aren't going to tune in.

00:49:14.990 --> 00:49:17.760
By promote it,
I mean do that through other media,

00:49:17.860 --> 00:49:21.940
that is, email, bulletin board postings,
the company newspaper.

00:49:21.940 --> 00:49:22.950
Multicast.

00:49:22.950 --> 00:49:28.520
Multicast is really the only practical
way to reach hundreds or even thousands

00:49:28.530 --> 00:49:31.520
of simultaneous viewers on a network.

00:49:31.520 --> 00:49:34.980
Otherwise, the number of Unicast
streams simply overloaded.

00:49:35.160 --> 00:49:37.510
If you need to reach hundreds
or thousands of users

00:49:37.560 --> 00:49:40.770
on the public internet,
since it does not support multicast,

00:49:41.290 --> 00:49:45.050
you'll probably need to contract with
a content delivery network like Akamai.

00:49:45.060 --> 00:49:47.570
That's what Apple does, for example.

00:49:47.650 --> 00:49:50.840
It's important to post the archived
version of a live webcast quickly.

00:49:50.840 --> 00:49:55.520
People expect that,
and a lot of times people can't

00:49:55.520 --> 00:49:58.120
tune in immediately during an event,
but it's really handy

00:49:58.120 --> 00:50:01.610
if it's available 15,
20 minutes after it's over.

00:50:01.760 --> 00:50:05.700
Tracking viewers like we do with
AAPTV really helps you to gain

00:50:05.900 --> 00:50:10.870
some traction with upper management
about the usefulness of the webcast.

00:50:10.900 --> 00:50:15.540
What we found is that eventually,
live webcasts become a vital

00:50:15.680 --> 00:50:20.700
part of the communications link
between employees and executives.

00:50:21.730 --> 00:50:23.490
So having a webcasting studio.

00:50:23.500 --> 00:50:27.000
We have a traditional
video studio at AAP,

00:50:27.000 --> 00:50:28.340
which we call AAP Studios.

00:50:28.360 --> 00:50:31.250
You know,
obviously the most important thing when

00:50:31.250 --> 00:50:35.350
you're doing a live webcast is to produce
a compelling show in the first place.

00:50:35.360 --> 00:50:38.270
That means that ideally you should
script things and you should

00:50:38.270 --> 00:50:39.820
rehearse things with a crew.

00:50:39.820 --> 00:50:44.060
You need to have high-quality lighting,
audio cameras, and a video switcher.

00:50:44.060 --> 00:50:48.720
You can't just do this with a little
DV camera on a tripod in a closet.

00:50:48.730 --> 00:50:50.640
It's not going to be very compelling.

00:50:51.200 --> 00:50:53.080
Well, technically you could broadcast it.

00:50:53.080 --> 00:50:54.450
Nobody's going to want to watch that.

00:50:54.480 --> 00:50:59.620
The two-way interaction can be done
through webpages like you saw us do,

00:50:59.620 --> 00:51:01.840
but it can also be done by phone call-in.

00:51:01.840 --> 00:51:05.280
And we enable that too,
kind of like Larry King Live.

00:51:05.300 --> 00:51:08.040
To do the technical
side of the webcasting,

00:51:08.040 --> 00:51:12.170
you're going to need the fastest G5
Power Mac that you can get your hands on

00:51:12.200 --> 00:51:14.990
with QuickTime Broadcaster or Wirecast.

00:51:15.000 --> 00:51:18.970
And if you want the very highest quality
possible in your video and audio streams,

00:51:18.970 --> 00:51:22.090
you should probably consider using a
third-party video capture card like

00:51:22.460 --> 00:51:24.690
those offered by Aja or Decklink.

00:51:27.010 --> 00:51:30.340
Although thanks to
QuickTime Broadcaster 1.5,

00:51:30.340 --> 00:51:33.600
you can actually get quite
good quality nowadays from DV.

00:51:33.600 --> 00:51:36.400
The two solutions that
you might consider,

00:51:36.400 --> 00:51:39.280
Broadcaster or Wirecast,
Broadcaster's great.

00:51:39.280 --> 00:51:41.280
As you saw,
it works well for Dave's solution

00:51:41.280 --> 00:51:45.220
where basically he's just making
a single version of each channel.

00:51:45.220 --> 00:51:49.000
It's free, it's simple,
but it is limited.

00:51:49.000 --> 00:51:53.200
Wirecast, which is a commercial
program for about $450,

00:51:54.290 --> 00:51:59.880
kind of takes things up a notch by
offering multiple H.264 encoding from

00:52:00.120 --> 00:52:04.720
a single computer of the same source,
and as well live into the

00:52:04.720 --> 00:52:08.440
stream to kind of use it as a
virtual video studio switcher,

00:52:08.560 --> 00:52:09.230
if you like.

00:52:09.280 --> 00:52:13.480
We already talked a little bit
about Unicast and Multicast,

00:52:13.480 --> 00:52:17.450
but obviously Unicast isn't
practical once you get beyond

00:52:17.450 --> 00:52:18.550
a certain number of users.

00:52:18.560 --> 00:52:24.150
Some would say that you could use a lot
of relay servers to accomplish that.

00:52:24.220 --> 00:52:25.640
You could accomplish
Unicast to a lot of users.

00:52:25.840 --> 00:52:29.100
Well, yes, you can do that,
but it does cost a lot of money

00:52:29.100 --> 00:52:30.440
and is a real bear to set up.

00:52:30.580 --> 00:52:33.680
I think before you invest
your time and effort in that,

00:52:33.680 --> 00:52:36.130
you should probably invest your
time and effort in getting your

00:52:36.130 --> 00:52:38.950
network administrators to enable
Multicast on your network.

00:52:40.860 --> 00:52:43.550
Multicast looks a little
bit more like this.

00:52:43.790 --> 00:52:47.780
Certainly is the easiest route if you
can get it to work on your network,

00:52:47.790 --> 00:52:52.760
but it is going to require a little bit
of persuasion with your IT department.

00:52:52.760 --> 00:52:57.350
Now there are a number of ways, you know,
Dave talked about multicasting

00:52:57.430 --> 00:53:00.990
directly from the encoder and then
having a unicast relay to reach

00:53:00.990 --> 00:53:02.920
some users on the public internet.

00:53:04.200 --> 00:53:05.420
You can do that.

00:53:05.450 --> 00:53:09.000
One of the limitations there is that
the encoder has to be on a part of

00:53:09.000 --> 00:53:13.980
the network that is multicast enabled,
which can be a problem in our situation

00:53:13.980 --> 00:53:17.630
because sometimes we'll go to a
remote location to do a live webcast,

00:53:17.630 --> 00:53:19.820
for example,
for our annual shareholders meeting.

00:53:19.820 --> 00:53:24.990
So we set up unicast directly from
the encoder to the server and then

00:53:24.990 --> 00:53:28.040
we relay a multicast to the network.

00:53:28.090 --> 00:53:32.450
We also are effectively providing
unicast to the network from that server

00:53:32.450 --> 00:53:34.180
as well for anyone who can't reach it.

00:53:34.200 --> 00:53:36.470
receive multicast.

00:53:37.140 --> 00:53:39.240
So, setting up a multicast relay.

00:53:39.240 --> 00:53:41.180
I'm going to demo this in a minute,
so I'll kind of skip

00:53:41.250 --> 00:53:44.230
through these slides,
but this is basically what it looks like.

00:53:44.350 --> 00:53:47.240
You're going to need
to know the relay name,

00:53:47.260 --> 00:53:51.210
a destination type,
and a destination multicast IP address.

00:53:51.340 --> 00:53:53.640
You can check with your
network administrator to get

00:53:53.640 --> 00:53:56.770
a multicast IP address that
is legitimate on your network,

00:53:56.790 --> 00:54:00.230
but generally it's
anything in the range 239.

00:54:00.940 --> 00:54:03.480
You're going to have to set up,
you're going to have to edit the relay,

00:54:03.500 --> 00:54:09.340
give it a name, set it to pull the stream
from the server itself.

00:54:11.440 --> 00:54:17.370
Here's the window where you get
to actually set your multicast

00:54:17.370 --> 00:54:17.370
IP address and your base port number.

00:54:18.010 --> 00:54:20.060
The hardest thing right now
in setting up multicast with

00:54:20.130 --> 00:54:24.660
QuickTime Streaming Server is the
notion of creating a multicast SDP file.

00:54:24.800 --> 00:54:26.970
Unfortunately,
there's no straightforward way to do

00:54:26.970 --> 00:54:30.260
this from within the graphical user
interface of QuickTime Streaming Server,

00:54:30.260 --> 00:54:32.740
but fortunately it's
not that complicated,

00:54:32.880 --> 00:54:34.660
even though this looks scary.

00:54:34.850 --> 00:54:39.580
What you're seeing here is the
contents of a unicast SDP file,

00:54:39.740 --> 00:54:42.270
Session Description Protocol.

00:54:42.480 --> 00:54:47.000
This file is generated by your encoder,
either QuickTime Broadcaster or Wirecast.

00:54:47.000 --> 00:54:51.200
It contains some basic information
about the settings of your live webcast,

00:54:51.260 --> 00:54:54.840
including the IP address
and port numbers.

00:54:54.950 --> 00:54:58.160
To make a multicast file,
you simply open this up and

00:54:58.160 --> 00:55:00.400
you change a few key values.

00:55:00.440 --> 00:55:02.560
Let me go back there again.

00:55:02.640 --> 00:55:07.140
Those values are basically the
multicast IP address and the base port,

00:55:07.200 --> 00:55:11.210
and the port numbers for the
audio and the video streams.

00:55:13.570 --> 00:55:17.180
It can get confusing when you have
SDP files with different names,

00:55:17.220 --> 00:55:18.730
some multicast, some unicast.

00:55:18.730 --> 00:55:21.500
I suggest that you come up
with a naming convention.

00:55:21.500 --> 00:55:24.130
We use a naming convention
where the files,

00:55:24.140 --> 00:55:27.460
you know, we have a low and a
high and a 56 kilobit,

00:55:27.500 --> 00:55:31.110
and the unicast SDPs are
UC and the multicast are MC.

00:55:31.110 --> 00:55:31.940
Simple.

00:55:33.160 --> 00:55:36.830
One additional step some folks
might want to take is to open

00:55:36.830 --> 00:55:40.730
up a multicast SDP file in
QuickTime Player and to export a

00:55:40.900 --> 00:55:43.530
QuickTime reference movie for it.

00:55:43.680 --> 00:55:47.540
The advantage with this is that
that QuickTime movie file can then

00:55:47.540 --> 00:55:51.540
be easily emailed around to folks,
made available online,

00:55:51.810 --> 00:55:53.680
and it will always open
in QuickTime Player,

00:55:53.680 --> 00:55:58.330
whereas sometimes SDP files
can get hijacked by third-party

00:55:58.330 --> 00:56:00.600
players like RealPlayer.

00:56:01.900 --> 00:56:04.360
Before I go to the demo,
let me touch on Auto Bandwidth

00:56:04.360 --> 00:56:05.650
Detection in QuickTime 7.

00:56:05.710 --> 00:56:08.770
Those of you who have QuickTime 7
may have noticed a new automatic

00:56:08.770 --> 00:56:11.800
setting for the connection speed
in QuickTime's preferences.

00:56:11.800 --> 00:56:16.450
This is the default setting in
QuickTime 7 unless you change it.

00:56:17.120 --> 00:56:21.470
The way that this actually works is
by using the current refmovie method,

00:56:21.540 --> 00:56:24.860
so it is backwards compatible.

00:56:24.860 --> 00:56:28.960
Basically you make a reference
QuickTime movie with make refmovie X,

00:56:29.390 --> 00:56:33.510
which refers to two or more
QuickTime movies of different sizes,

00:56:33.510 --> 00:56:37.030
and you specify the
bandwidth that each requires.

00:56:37.150 --> 00:56:41.400
In the past, this would rely on the user
correctly choosing their connection

00:56:41.400 --> 00:56:44.640
speed and QuickTime preferences,
which they usually didn't do,

00:56:44.640 --> 00:56:46.990
and so it wasn't very practical.

00:56:47.220 --> 00:56:51.910
But as long as the user has
QuickTime 7 player and they're

00:56:51.910 --> 00:56:55.210
connecting to QuickTime streaming
server on a Tiger server,

00:56:55.210 --> 00:56:59.300
the player and the server do a little
bit of a handshake at the beginning

00:56:59.330 --> 00:57:03.650
where a small cache file is downloaded
to measure the speed of the connection

00:57:03.650 --> 00:57:05.470
and the best choice is chosen.

00:57:05.470 --> 00:57:08.270
This will even work on a
progressive download on

00:57:08.270 --> 00:57:11.800
demand file from a web server,
as long as the web server

00:57:11.820 --> 00:57:16.560
supports HTTP 1.1 byte range.

00:57:16.560 --> 00:57:18.760
While the system does
have some limitations,

00:57:18.760 --> 00:57:23.100
you know, it's not dynamic, for example,
and the settings aren't that

00:57:23.100 --> 00:57:26.210
granular for connection speeds,
it is a good start and it

00:57:26.210 --> 00:57:30.180
does work within the existing
framework that we all know.

00:57:31.000 --> 00:57:34.290
Here's what MakeRefMovieX looks like.

00:57:34.380 --> 00:57:39.100
It's a very simple application,
but basically you enter in the

00:57:39.100 --> 00:57:44.880
URLs for each version and you can set
the speed requirement for each one.

00:57:44.900 --> 00:57:47.150
Okay, let's go to a demo.

00:57:49.880 --> 00:57:54.070
Demo 1, please.

00:57:54.210 --> 00:57:54.800
Great.

00:57:54.800 --> 00:57:56.800
I'm going to bring up Wirecast here.

00:57:56.800 --> 00:58:01.190
What we're actually going to try to do
is demonstrate a live webcast setup with

00:58:01.190 --> 00:58:05.690
a relay on the server and then receiving
the webcast on the other machine.

00:58:05.700 --> 00:58:08.250
So what I have here,
and I can't lift this up high because

00:58:08.340 --> 00:58:11.880
my FireWire cable isn't very long,
simple Sony camcorder

00:58:11.880 --> 00:58:13.690
with a DV cam tape in it.

00:58:14.280 --> 00:58:18.220
The DV cam tape is our last
live webcast that we produced.

00:58:18.220 --> 00:58:20.830
I'm going to turn off this
headphones here so you don't hear it.

00:58:20.980 --> 00:58:23.600
But basically you can see this in here.

00:58:23.600 --> 00:58:24.840
I'm going to pause it for a moment.

00:58:28.280 --> 00:58:31.810
In Wirecast, under Broadcast Settings,
this is where the power

00:58:31.810 --> 00:58:34.710
really is in this program,
you can have more than one

00:58:34.710 --> 00:58:36.700
stream set up at the same time.

00:58:36.700 --> 00:58:39.200
I've already pre-configured
a few of them,

00:58:39.200 --> 00:58:41.940
but basically there
are three streams here,

00:58:41.940 --> 00:58:45.210
one we call LAN, one we call DSL,
and one we call modem.

00:58:45.220 --> 00:58:52.860
They are at 750, 250, approximately 250,
and 40 kilobits per second, respectively.

00:58:53.800 --> 00:58:58.720
If you go in and edit one of them,
for example, to 750k,

00:58:58.800 --> 00:59:02.700
You can see that we
are using H.264 codec.

00:59:02.830 --> 00:59:07.930
We are doing 640 by 360 because
this is a 16.9 aspect program.

00:59:07.930 --> 00:59:12.160
And we are doing that at
about 686 kilobits per second.

00:59:12.160 --> 00:59:16.890
The audio is at 64 kilobits per second,
MPEG-4 AAC audio.

00:59:16.890 --> 00:59:19.930
So the total bit rate
is about 750 kilobits.

00:59:22.150 --> 00:59:27.560
Your mileage may vary, as they say,
but I believe that at 750

00:59:27.660 --> 00:59:30.360
kilobits or lower you can
get very acceptable quality,

00:59:30.360 --> 00:59:32.970
broadcast quality,
as long as your content doesn't

00:59:32.970 --> 00:59:37.350
have very high motion or text
tickers like some of Dave's did.

00:59:37.590 --> 00:59:41.540
There is an option to set up direct
multicast from here if you want,

00:59:41.540 --> 00:59:43.500
but we've got a manual unicast going on.

00:59:43.770 --> 00:59:46.580
From each one of these,
we then saved an SDP file,

00:59:46.810 --> 00:59:49.910
that unicast SDP file,
to our QuickTime streaming

00:59:49.910 --> 00:59:51.360
server's media directory.

00:59:51.510 --> 00:59:54.500
I've already done this
in advance to save time,

00:59:54.500 --> 00:59:56.500
but as you can see,
there's one for the 40, one for the 250,

00:59:56.500 --> 00:59:58.490
and one for the 750.

00:59:58.500 --> 01:00:01.320
So I'm going to cancel out of
that right now and close this.

01:00:01.500 --> 01:00:06.490
I'm going to hit Broadcast
and hit Play on here.

01:00:09.970 --> 01:00:14.210
As you can see, the processor CPU monitor
is running pretty hot here,

01:00:14.400 --> 01:00:16.900
but it is certainly within safe limits.

01:00:16.900 --> 01:00:20.900
This is a dual 2.7 G5 machine
doing three simultaneous streams.

01:00:20.900 --> 01:00:25.890
So if we can go over please to Demo 3.

01:00:28.320 --> 01:00:34.000
I'm going to disconnect from my VPN so
that now I'm on the same network segment.

01:00:34.000 --> 01:00:38.100
I'm going to start up
QuickTime Player and open a URL to

01:00:38.100 --> 01:00:42.830
the Unicast version of this stream,
which is basically the address of

01:00:42.910 --> 01:00:47.540
our QuickTime streaming server slash
the name of the Unicast STP file.

01:00:47.540 --> 01:00:51.130
If all goes well,
there we have a live webcast

01:00:51.130 --> 01:00:56.840
being received in H.264 at
750 kilobits per second.

01:00:56.840 --> 01:01:02.590
Now, I know this is all very qualitative,
but I think that that looks pretty

01:01:02.590 --> 01:01:07.430
darn good for 750 kilobits per second.

01:01:07.480 --> 01:01:11.370
Can bring up one that's at 250.

01:01:12.580 --> 01:01:15.320
We'll have to warn you that I know
I don't think the quality on this

01:01:15.350 --> 01:01:19.240
one is quite where it should be yet,
but I'm talking with Wirecast about that.

01:01:21.550 --> 01:01:27.190
Let me bring up the 40 kilobit
one as well at the same time.

01:01:27.940 --> 01:01:30.780
One thing I have always liked about
QuickTime Player is that it lets you open

01:01:30.780 --> 01:01:32.660
up multiple windows at the same time.

01:01:32.660 --> 01:01:35.570
Windows Media Player still
doesn't let you do that.

01:01:36.450 --> 01:01:38.400
There we go.

01:01:38.730 --> 01:01:43.370
Okay, so we know that Unicast works.

01:01:43.370 --> 01:01:43.370
Let's go over to Demo 2, please.

01:01:47.970 --> 01:01:49.020
Okay, so here we are.

01:01:49.020 --> 01:01:52.680
Let me hide everything else for
the moment so we can concentrate.

01:01:52.780 --> 01:01:57.780
Here we are in server admin,
QuickTime streaming under settings,

01:01:57.820 --> 01:01:59.380
and I've clicked on relays.

01:01:59.460 --> 01:02:07.580
To set up a relay, a multicast relay,
let me go ahead and delete this one,

01:02:07.580 --> 01:02:09.740
and let's just make it from scratch.

01:02:09.740 --> 01:02:13.360
I'm going to make one for
the 250 kilobit stream.

01:02:13.360 --> 01:02:15.220
So you add a relay.

01:02:15.760 --> 01:02:20.260
I recommend calling it by the name of
the stream and then just the word relay.

01:02:20.260 --> 01:02:21.180
It makes it simple.

01:02:21.180 --> 01:02:25.050
What you're going to want to do if
you're unicasting to the server the way

01:02:25.050 --> 01:02:26.860
I am is to request the incoming stream.

01:02:26.860 --> 01:02:29.430
The source IP address is localhost.

01:02:29.440 --> 01:02:33.670
The path is just the name
of the unicast.sdp file as

01:02:33.670 --> 01:02:37.590
it appears on the server,
which is just qt250.sdp.

01:02:37.640 --> 01:02:38.860
There we go.

01:02:38.860 --> 01:02:41.380
You don't need a username
or password for this.

01:02:42.760 --> 01:02:44.460
So let's save that.

01:02:44.510 --> 01:02:50.040
Then we need to go over here and
add the destination IP address.

01:02:50.090 --> 01:02:54.070
Now this is any multicast IP address
that's valid on your network,

01:02:54.250 --> 01:02:57.370
generally anything 239.whatever.

01:02:57.580 --> 01:03:00.320
Pretty much any address is going to work,
but you might want to check with your

01:03:00.320 --> 01:03:04.140
network administrator to find out a list
of addresses they might be using at that

01:03:04.220 --> 01:03:06.520
time so you don't walk on top of them.

01:03:06.690 --> 01:03:10.510
I'm just going to pick out 231.1.1.10.

01:03:10.800 --> 01:03:15.040
You have to pick a base port number,
and that can be anything 9,000 or higher.

01:03:15.210 --> 01:03:18.450
So I'm going to pick, say, 9050.

01:03:18.690 --> 01:03:22.580
The TTL is time to live,
and this is the number of router

01:03:22.580 --> 01:03:26.110
and switch hops that your multicast
will survive out on the network.

01:03:26.320 --> 01:03:28.680
You want to make sure it's set up
to a number at least as high as the

01:03:28.680 --> 01:03:33.770
maximum number of routers or switches
between your server and an end user.

01:03:34.350 --> 01:03:35.630
I'm going to hit save.

01:03:35.930 --> 01:03:38.540
9050 and .10.

01:03:38.540 --> 01:03:40.540
Now you have to remember
this information.

01:03:40.560 --> 01:03:51.040
So QT250 was 239.1.1.50 and the
port was 90-- was I right on that?

01:03:51.300 --> 01:03:53.460
9010.

01:03:53.510 --> 01:03:55.410
Thank you.

01:03:56.400 --> 01:03:57.790
Oh, no, I'm sorry.

01:03:58.070 --> 01:03:59.980
Very important.

01:04:00.120 --> 01:04:01.800
90/50, right?

01:04:01.800 --> 01:04:03.850
Great.

01:04:04.150 --> 01:04:05.620
So now we've created our relay.

01:04:05.860 --> 01:04:09.480
Next we have to create
our multicast SDP file.

01:04:09.510 --> 01:04:13.240
If you go and you start
with your unicast SDP file,

01:04:13.240 --> 01:04:15.600
just drop that on text
edit and open it up.

01:04:15.600 --> 01:04:17.600
Now this may look a little
scary at the beginning,

01:04:17.600 --> 01:04:20.600
but the first thing to do is
go up to this first IP address

01:04:20.600 --> 01:04:23.060
and just set it to 0.0.0.0.

01:04:23.060 --> 01:04:27.020
That was the address of the encoder,
which is no longer applicable

01:04:27.020 --> 01:04:29.060
for a multicast SDP file.

01:04:29.060 --> 01:04:32.370
And then this is where the
destination IP needs to go,

01:04:32.370 --> 01:04:35.970
239.1.1.10.

01:04:37.020 --> 01:04:40.060
Right here and just a little
further down where it says video,

01:04:40.060 --> 01:04:41.540
those are the port numbers.

01:04:41.540 --> 01:04:44.080
This is where we need to use
that port number we picked.

01:04:44.110 --> 01:04:48.470
The audio is the first,
the base port number, 9050,

01:04:48.470 --> 01:04:52.480
and the video is the base
port number plus two.

01:04:52.900 --> 01:04:54.430
"50-52.

01:04:54.430 --> 01:04:55.900
90-52.

01:04:55.900 --> 01:04:56.900
There we go.

01:04:57.130 --> 01:05:00.320
And now you simply save
this as a new file.

01:05:00.400 --> 01:05:07.400
I recommend just tacking on .mc, sdp,
to the same folder.

01:05:07.840 --> 01:05:09.950
Now, to the same folder,
let me qualify that.

01:05:10.130 --> 01:05:14.230
The SDP file goes on your web server,
not necessarily the same thing as

01:05:14.330 --> 01:05:16.300
your QuickTime streaming server.

01:05:16.420 --> 01:05:20.000
In this case, for this demo,
I've set up this Mac OS X server

01:05:20.000 --> 01:05:24.410
to have web services turned on,
too, and its home directory is the same

01:05:24.410 --> 01:05:27.800
directory as the QuickTime streaming
server home directory.

01:05:27.880 --> 01:05:31.100
So an HTTP address will
go to the same place.

01:05:31.260 --> 01:05:32.960
All right, that file exists.

01:05:33.100 --> 01:05:35.810
So now,
if I come back over to demo three,

01:05:35.810 --> 01:05:36.590
please.

01:05:39.510 --> 01:05:45.350
If all goes well, I ought to be able to
access this multicast now.

01:05:45.830 --> 01:05:52.860
by accessing at http,
same address as the unicast,

01:05:52.860 --> 01:05:56.750
but add the mc.sdp to it.

01:05:56.850 --> 01:06:00.770
Connecting, buffering, there we go.

01:06:02.460 --> 01:06:04.390
Live multicast.

01:06:04.390 --> 01:06:07.990
I had already done this ahead of
time with the larger stream to

01:06:08.010 --> 01:06:10.390
show you what that looks like.

01:06:13.430 --> 01:06:17.530
And boom, live multicast of a
750k bit H.264 stream.

01:06:17.530 --> 01:06:22.140
In fact, we could, I believe,
QuickTime player lets you receive

01:06:22.140 --> 01:06:24.220
multiple multicasts at the same time.

01:06:24.220 --> 01:06:26.260
Let's see.

01:06:29.400 --> 01:06:41.400
[Transcript missing]

01:06:46.940 --> 01:06:48.960
Two multicasts and one unicast.

01:06:48.960 --> 01:06:50.400
Thank you very much.

01:06:50.580 --> 01:06:54.090
From a single encoder.

01:06:54.700 --> 01:06:55.700
Great.

01:06:55.700 --> 01:06:59.150
Okay, let me quit out of QuickTime player
and I'll just stop this

01:06:59.250 --> 01:07:01.080
over here on Wirecast.

01:07:01.080 --> 01:07:02.040
There we go.

01:07:02.510 --> 01:07:04.930
All right, back to the slides please.

01:07:08.090 --> 01:07:11.730
Okay, what I talked about advocacy,
there are always things that

01:07:11.730 --> 01:07:13.150
Apple can do to improve.

01:07:13.210 --> 01:07:14.340
They listen to us.

01:07:14.430 --> 01:07:17.690
It's very important that you give
them feedback so that they know where

01:07:17.720 --> 01:07:21.020
you're hurting and what they can
do to make their products better.

01:07:21.020 --> 01:07:22.960
I'm not going to go into
these in some detail,

01:07:22.970 --> 01:07:25.710
but I would encourage you to go
to the QuickTime feedback forum,

01:07:25.870 --> 01:07:26.860
which is tomorrow.

01:07:26.860 --> 01:07:28.700
Is it at 3.30, Stephen?

01:07:28.700 --> 01:07:30.240
Yeah, it's at 3.30 tomorrow.

01:07:30.400 --> 01:07:30.970
Please show up.

01:07:31.050 --> 01:07:32.850
Please let them know
what you'd like to see.

01:07:32.850 --> 01:07:34.060
Here are some of mine.

01:07:34.060 --> 01:07:37.960
They've done a great job since last year
of addressing a lot of my questions.

01:07:38.020 --> 01:07:42.840
I hope that you're able to use
QuickTime in your enterprise,

01:07:42.840 --> 01:07:43.460
too.

01:07:43.460 --> 01:07:44.020
Thanks.