WEBVTT

00:00:00.250 --> 00:00:04.200
Hello.

00:00:04.220 --> 00:00:06.170
Welcome to Introduction
to Web Kit Development,

00:00:06.170 --> 00:00:07.800
Session 128.

00:00:07.890 --> 00:00:09.000
My name is Chris Blumenberg.

00:00:09.000 --> 00:00:12.100
I'm a software engineer on
the Safari Web Kit team.

00:00:12.390 --> 00:00:14.580
So let's get right to what
you're going to learn here.

00:00:14.650 --> 00:00:16.900
First, I'm going to briefly
discuss what is Web Kit.

00:00:16.900 --> 00:00:19.090
I'm going to go into
the basics of Web Kit.

00:00:20.050 --> 00:00:23.300
Then I'm going to talk about
what can be done with Web Kit.

00:00:23.300 --> 00:00:26.210
Web Kit is not just about web
browsing and I'll show you that.

00:00:26.290 --> 00:00:31.060
Then I'm going to spend the majority
of my talk answering common questions.

00:00:31.060 --> 00:00:35.270
These are questions that are asked
by developers who are new to Web Kit.

00:00:35.890 --> 00:00:37.200
So what is Web Kit?

00:00:37.250 --> 00:00:40.800
Well, when people think of Web Kit,
they usually think of Safari.

00:00:40.800 --> 00:00:42.800
It's the engine inside of Safari.

00:00:42.800 --> 00:00:45.780
It makes Safari render web pages.

00:00:46.370 --> 00:00:47.760
It's a framework.

00:00:47.920 --> 00:00:52.860
It's available to Cocoa and
Carbon programs on Mac OS X.

00:00:52.990 --> 00:00:55.610
Its responsibility,
its main responsibility

00:00:55.610 --> 00:00:59.940
is to display HTML,
images, plugging contents such as Flash,

00:00:59.940 --> 00:01:03.360
QuickTime, et cetera.

00:01:03.500 --> 00:01:08.670
It's basically an API wrapper
around Web Core and JavaScript Core.

00:01:08.820 --> 00:01:11.860
Web Core is our open source
engine based on KHTML and

00:01:11.860 --> 00:01:17.140
JavaScript Core is our open source
JavaScript interpreter based on KJS.

00:01:17.140 --> 00:01:21.490
And as of this week,
Web Kit's open source too.

00:01:26.500 --> 00:01:28.200
So what can be done with Web Kit?

00:01:28.210 --> 00:01:30.750
Well, I'm going to answer that
question by telling you what

00:01:30.750 --> 00:01:32.730
has been done with Web Kit.

00:01:32.940 --> 00:01:34.900
So here are some really cool apps.

00:01:34.920 --> 00:01:38.040
I'm a little biased,
but they're pretty cool, I think.

00:01:38.070 --> 00:01:40.600
I'm going to focus on a few of them here.

00:01:40.710 --> 00:01:41.510
First one is Dashboard.

00:01:41.590 --> 00:01:43.600
I probably don't need to
tell you what Dashboard is,

00:01:43.860 --> 00:01:46.600
but what's cool about Dashboard
is its use of Web Kit.

00:01:46.820 --> 00:01:49.580
When I think of displaying
a web page in a program,

00:01:49.580 --> 00:01:52.440
I think of a white square
inside of a window.

00:01:52.440 --> 00:01:56.080
But in Dashboard,
a web page is the actual program

00:01:56.270 --> 00:01:58.510
or what they call widgets.

00:01:59.090 --> 00:02:00.720
Then there's Mail.

00:02:00.910 --> 00:02:04.880
Mail uses Web Kit for displaying
email messages and in Tiger,

00:02:05.100 --> 00:02:10.000
it uses Web Kit for editing
and composing email messages.

00:02:10.210 --> 00:02:15.760
It does that using our Web Kit editing
feature which we added in Tiger.

00:02:15.980 --> 00:02:18.150
And then lastly,
I'm going to focus on this program,

00:02:18.150 --> 00:02:23.290
Coliqui, which is an IRC client which
uses Web Kit to display IRC text.

00:02:23.390 --> 00:02:24.090
It's a really cool app.

00:02:24.160 --> 00:02:25.990
In fact,
I think it's become the IRC client

00:02:26.100 --> 00:02:28.370
of choice on the Web Kit team.

00:02:29.970 --> 00:02:34.420
So with the examples I've shown up here,
the ones that I focused on,

00:02:34.610 --> 00:02:37.970
I want to draw this point that it's
not just about browsers anymore.

00:02:38.050 --> 00:02:40.420
You can do things with Web Kit that's
not just about web browsing.

00:02:43.580 --> 00:02:45.650
So developers ask a lot of questions.

00:02:45.930 --> 00:02:49.700
Being on the Web Kit team,
we are bombarded with questions.

00:02:49.700 --> 00:02:50.130
But that's okay.

00:02:50.130 --> 00:02:51.650
We actually like that
because that reminds us that,

00:02:51.700 --> 00:02:53.930
you know,
people are using our technology.

00:02:54.170 --> 00:03:00.470
So what I've done today is I've compiled
a set of questions that come from

00:03:00.560 --> 00:03:04.460
developers who are new to Web Kit.

00:03:04.460 --> 00:03:07.880
So let's start off with how
can I create a web view?

00:03:09.240 --> 00:03:12.900
Well, before I go into that,
I'm going to discuss what a WebView is.

00:03:13.050 --> 00:03:15.700
WebView is Web Kit's main view class.

00:03:15.870 --> 00:03:21.000
In Safari, it's basically responsible for
displaying everything but the Chrome.

00:03:22.500 --> 00:03:24.630
So to create a web view,
there's several ways to do that.

00:03:24.640 --> 00:03:25.950
You can create it in Interface Builder.

00:03:26.080 --> 00:03:30.090
Basically, in Interface Builder,
it's just a drag and drop procedure.

00:03:30.170 --> 00:03:32.740
From code,
you can do it using Objective-C,

00:03:32.890 --> 00:03:33.770
our Cocoa API.

00:03:34.180 --> 00:03:36.920
Or you can do it using our C API.

00:03:37.800 --> 00:03:40.740
So here's a code example
of how to do it with Cocoa.

00:03:40.840 --> 00:03:45.000
Basically, you just call the standard
initWithFrame method on WebView.

00:03:45.060 --> 00:03:47.730
And then once you've done that,
you add the WebView to the view

00:03:47.730 --> 00:03:49.730
hierarchy using addSubview.

00:03:50.230 --> 00:03:52.470
And here's how you do it in Carbon.

00:03:52.820 --> 00:03:55.930
It takes a few more lines of code
to actually do that in Carbon.

00:03:56.120 --> 00:03:59.130
The main thing you have to
do is call hi-webview-create.

00:03:59.380 --> 00:04:01.030
That creates the WebView.

00:04:01.150 --> 00:04:02.930
You call hi-view-setframe.

00:04:03.060 --> 00:04:05.100
That sets the frame of the WebView.

00:04:05.100 --> 00:04:09.350
And then you call hi-view-add-subview
to add it to the hierarchy.

00:04:11.420 --> 00:04:14.000
So I discussed how to create a web view.

00:04:14.030 --> 00:04:16.060
Now let's go to loading
content in the web view.

00:04:16.110 --> 00:04:18.580
Now, loading a URL,
telling a web view to load a URL is

00:04:18.630 --> 00:04:20.100
a pretty straightforward thing.

00:04:20.150 --> 00:04:23.310
But developers tend to ask,
how can I load content from memory when

00:04:23.320 --> 00:04:26.210
I don't have a URL for that content?

00:04:26.880 --> 00:04:30.560
Well, before I go into that,
I need to discuss what a web frame is.

00:04:30.560 --> 00:04:33.600
See, every web view has one
or more web frames.

00:04:33.600 --> 00:04:38.800
The web frame's main responsibility
is to manage the load of content.

00:04:38.800 --> 00:04:43.790
It holds that content or that data
with the web data source class.

00:04:43.790 --> 00:04:47.390
It displays that content with
the web frame view class.

00:04:47.500 --> 00:04:49.550
So in this simple example
to the right here,

00:04:49.620 --> 00:04:50.980
we have a simple web page.

00:04:50.980 --> 00:04:58.030
We have actually one web frame,
which is what we consider the main frame.

00:04:58.590 --> 00:05:00.820
And in this example where
we have multiple frames,

00:05:00.820 --> 00:05:04.320
we have one frame for the mainframe,
one frame,

00:05:04.490 --> 00:05:07.780
one webframe for the child frame,
and another webframe for the

00:05:07.880 --> 00:05:10.140
frame to the right there,
which is another child

00:05:10.150 --> 00:05:11.120
frame of the mainframe.

00:05:13.180 --> 00:05:15.300
So loading in WebView.

00:05:15.300 --> 00:05:15.920
This is done.

00:05:15.920 --> 00:05:17.260
This is-- you instantiate this.

00:05:17.260 --> 00:05:19.490
You initiate this on a web frame.

00:05:19.920 --> 00:05:22.970
and there's several content types
that you can ask WebFrame to load.

00:05:23.130 --> 00:05:26.350
You can ask it to load an NSURL request,
which is basically a

00:05:26.400 --> 00:05:28.350
wrapper around an NSURL.

00:05:28.660 --> 00:05:32.430
You can ask it to load an NSString,
which is most likely going

00:05:32.550 --> 00:05:34.040
to be an HTML string.

00:05:34.130 --> 00:05:35.950
You can pass it NSData.

00:05:36.150 --> 00:05:40.990
You can ask it to load NSData,
which is basically your data in memory,

00:05:40.990 --> 00:05:42.840
regardless of the MIME type.

00:05:42.950 --> 00:05:44.840
Or you can pass it a Web Archive.

00:05:44.840 --> 00:05:48.050
And Web Archive is a new data type,
which we unveiled in Tiger and

00:05:48.160 --> 00:05:50.080
I'm going to discuss that later.

00:05:50.210 --> 00:05:53.160
And lastly, you can hook this all up in
Interface Builder so that

00:05:53.160 --> 00:05:56.380
you can have a text field,
which is basically a URL field.

00:05:56.490 --> 00:05:59.010
Once the user hits return,
it will automatically send that

00:05:59.010 --> 00:06:01.710
URL to the WebView and we're
going to show you that as well.

00:06:02.920 --> 00:06:07.460
So to get back to the question,
how do I load content from memory

00:06:07.460 --> 00:06:09.800
with NSData in my web view?

00:06:09.900 --> 00:06:11.990
The first thing you want
to do is make sure-- well,

00:06:12.070 --> 00:06:15.110
a good thing to do is make sure
that the web view can handle

00:06:15.120 --> 00:06:17.800
the MIME type for the content.

00:06:17.800 --> 00:06:20.780
And you do that using the
canShowMIMEType method.

00:06:21.170 --> 00:06:23.480
So once that passes,
you get the mainframe

00:06:23.480 --> 00:06:25.120
out of the web view.

00:06:25.120 --> 00:06:28.900
And then you call the load
data method on the mainframe.

00:06:30.380 --> 00:06:33.120
And just in case you're curious,
this is the way you do

00:06:33.120 --> 00:06:34.520
it with NSURL request.

00:06:34.860 --> 00:06:37.280
You basically get the
mainframe as we did before.

00:06:37.640 --> 00:06:41.190
Then you create a request
using request with URL.

00:06:41.580 --> 00:06:45.910
And then you ask
mainframe to load request.

00:06:46.580 --> 00:06:48.590
So let's go to a demo of
how you can do all this in

00:06:48.650 --> 00:06:50.470
IB without any code whatsoever.

00:06:50.470 --> 00:06:51.560
And then we're going to
bring on Kevin Decker.

00:06:51.970 --> 00:06:52.560
Thanks, Chris.

00:06:52.560 --> 00:06:52.560
So --

00:06:56.770 --> 00:06:58.380
As Chris mentioned,
there's a number of ways you

00:06:58.440 --> 00:06:59.530
can use this in your programs.

00:06:59.540 --> 00:07:01.900
You can use it from Carbon,
you can use it from Cocoa.

00:07:01.900 --> 00:07:03.130
In fact,
we're going to show you a way that

00:07:03.130 --> 00:07:04.660
requires hardly any lines of code.

00:07:04.730 --> 00:07:06.550
In fact, it requires no lines of code.

00:07:06.770 --> 00:07:10.660
And so, we decided to put a little
game for this at my expense,

00:07:10.800 --> 00:07:11.570
of course.

00:07:11.620 --> 00:07:15.700
And we're going to show you how
to do this in one minute or less.

00:07:15.700 --> 00:07:17.700
And I happen to have a stopwatch here.

00:07:17.700 --> 00:07:18.540
Everyone can see it?

00:07:18.700 --> 00:07:22.660
And I think this totally
calls for some music.

00:07:22.780 --> 00:07:24.700
So, I'm going to open up
my iTunes library here.

00:07:24.700 --> 00:07:26.700
And I think this will do quite nicely.

00:07:26.700 --> 00:07:29.700
So, I'm going to try to do
this in one minute or less.

00:07:29.700 --> 00:07:31.700
We'll see what happens.

00:07:31.700 --> 00:07:32.700
So, here goes.

00:07:32.700 --> 00:07:36.820
Oh, I don't want iTunes.

00:07:36.820 --> 00:07:36.820
Oh, off to a bad start.

00:07:38.300 --> 00:07:39.300
Whatever.

00:07:39.300 --> 00:07:42.660
Oh, ah, okay.

00:07:42.660 --> 00:07:43.300
The clock's a good thing to have.

00:07:43.300 --> 00:07:46.360
Okay, well I can have five seconds, guys.

00:07:46.420 --> 00:07:47.270
Come on.

00:07:47.300 --> 00:07:49.300
The first thing you want to do is
link into the Web Kit framework.

00:07:49.300 --> 00:07:50.180
It's very important.

00:07:50.180 --> 00:07:51.790
Otherwise, your app will not work.

00:07:51.820 --> 00:07:53.030
Kevin, I don't think you're going
to be able to do this.

00:07:53.120 --> 00:07:55.390
I think you're right.

00:07:55.390 --> 00:07:58.820
Library, frameworks, Web Kit.

00:08:00.750 --> 00:08:02.600
Let's just give up, man.

00:08:02.710 --> 00:08:04.700
Boom, put that in there.

00:08:04.700 --> 00:08:04.930
Resources.

00:08:04.960 --> 00:08:05.140
Build it.

00:08:05.140 --> 00:08:06.700
Now we want to design our interface.

00:08:06.700 --> 00:08:08.700
We have to design it in 35 seconds.

00:08:08.700 --> 00:08:10.690
So, we're going to drag a web view here.

00:08:10.700 --> 00:08:12.700
Well, I think it's actually 30 seconds.

00:08:12.700 --> 00:08:14.700
There we go.

00:08:14.700 --> 00:08:16.170
We probably want some buttons.

00:08:16.170 --> 00:08:17.700
How about like back, forward.

00:08:17.700 --> 00:08:20.700
We'll label them in 10 seconds remaining.

00:08:20.700 --> 00:08:22.690
Where's the butt?

00:08:22.900 --> 00:08:24.700
Actually,
I don't think you're going to do this.

00:08:24.700 --> 00:08:25.690
At this point, I'm convinced.

00:08:25.830 --> 00:08:33.010
So, let's say take your old string from,
forward, back.

00:08:34.400 --> 00:08:37.070
and back is going to be go back, forward.

00:08:37.070 --> 00:08:38.880
This is a really,
really ugly web browser,

00:08:38.910 --> 00:08:41.660
but I promise it works.

00:08:41.660 --> 00:08:47.030
Take your old string from, oh, okay,
well no, no, no, it's done, it's done,

00:08:47.030 --> 00:08:48.620
it really is.

00:08:48.620 --> 00:08:52.570
There we go.

00:08:57.180 --> 00:09:00.100
So my buttons really do work.

00:09:00.170 --> 00:09:00.820
There you go.

00:09:00.820 --> 00:09:03.780
So if I can do this in one minute,
imagine what you can do

00:09:03.780 --> 00:09:05.460
in one month of your time.

00:09:05.460 --> 00:09:06.800
So there you go.

00:09:06.910 --> 00:09:07.310
Thanks, Chris.

00:09:07.840 --> 00:09:08.260
Thank you.

00:09:15.120 --> 00:09:17.000
Okay, thanks, Kevin.

00:09:17.000 --> 00:09:20.040
So discuss how you can create a web view.

00:09:20.300 --> 00:09:23.000
We've shown you how you can
load content in web view.

00:09:23.000 --> 00:09:27.160
Important thing to do when you're loading
content in a web view is to display

00:09:27.160 --> 00:09:29.240
progress or have a progress bar working.

00:09:29.240 --> 00:09:30.160
This is what many developers ask.

00:09:30.330 --> 00:09:33.230
How can I make a progress
bar work with a web view?

00:09:34.090 --> 00:09:38.530
Well, tracking progress in WebView is
done using notifications.

00:09:38.620 --> 00:09:42.570
Once you observe these notifications,
you'll get a notification when

00:09:42.570 --> 00:09:45.000
WebView has started loading.

00:09:45.000 --> 00:09:48.700
You'll get several notifications
as progress has updated while

00:09:48.940 --> 00:09:49.940
it's loading a web page.

00:09:50.000 --> 00:09:52.640
And then you'll get a finished
notification which tells

00:09:52.640 --> 00:09:54.080
you that it's done loading.

00:09:54.130 --> 00:09:57.230
And within any of these
callbacks or at any time,

00:09:57.230 --> 00:10:01.460
you can call the estimated progress
method on WebView which will

00:10:01.460 --> 00:10:03.990
tell you the progress completed.

00:10:04.950 --> 00:10:07.440
So here's some code which
observes a notification.

00:10:07.440 --> 00:10:10.940
In this example, we're just observing the
progress started notification,

00:10:11.300 --> 00:10:15.200
but you should probably observe
the other notifications as well.

00:10:15.200 --> 00:10:15.200
It just doesn't fit.

00:10:15.750 --> 00:10:17.490
and then this is our callback.

00:10:17.660 --> 00:10:20.910
So in our callback we call the estimated
progress method on the web view and

00:10:20.910 --> 00:10:24.860
simply we set that as the value on the
progress bar and that's all you got

00:10:24.860 --> 00:10:26.300
to do to get a progress bar working.

00:10:26.340 --> 00:10:28.100
Now the--something I want
to mention is that,

00:10:28.100 --> 00:10:30.020
you know,
you don't have to have a progress bar.

00:10:30.020 --> 00:10:33.840
You can use the estimated progress method
to display any kind of progress with

00:10:33.840 --> 00:10:36.370
any kind of widget in your application.

00:10:37.650 --> 00:10:40.140
Okay,
so we got content loaded in our WebView.

00:10:40.140 --> 00:10:42.940
We're displaying progress.

00:10:42.940 --> 00:10:46.440
Related to progress is
making a URL field work.

00:10:46.440 --> 00:10:47.740
Now, that may seem like a simple thing.

00:10:47.740 --> 00:10:51.110
You know, you tell WebView to load a URL,
you know what the URL is.

00:10:51.110 --> 00:10:53.620
You can just tell your
URL field to update.

00:10:53.730 --> 00:10:54.880
But sometimes it's not that simple.

00:10:54.880 --> 00:10:58.900
For example, if a user clicks on a link,
you need to be notified or told that

00:10:58.990 --> 00:11:02.200
WebView is now visiting that link.

00:11:02.200 --> 00:11:04.250
So the question is,
how can I make a URL field

00:11:04.250 --> 00:11:06.930
update as I follow links?

00:11:07.670 --> 00:11:13.830
Well, this and many things that you'll
see today is done using delegates.

00:11:14.080 --> 00:11:18.240
WebView's behavior is controlled,
basically controlled by delegates.

00:11:18.240 --> 00:11:21.060
They respond to informal protocols,
which means that you can pick

00:11:21.060 --> 00:11:24.000
and choose which delegate
methods you want to respond to.

00:11:24.340 --> 00:11:30.190
And lastly,
these things are managed on the WebView.

00:11:30.190 --> 00:11:30.190
You set and you get them on the WebView.

00:11:30.930 --> 00:11:34.090
So before I go into
making a URL field work,

00:11:34.230 --> 00:11:37.800
I need to discuss a tricky topic,
which is provisional and committed.

00:11:37.800 --> 00:11:43.790
This is a concept that
is held on the web frame.

00:11:43.800 --> 00:11:47.800
So I'm going to go into this slowly
and give you a metaphor as well.

00:11:47.800 --> 00:11:52.190
So first of all, a web frame load,
when it started,

00:11:52.260 --> 00:11:54.790
it's considered provisional.

00:11:55.190 --> 00:12:00.720
Once data is received,
that load is considered committed.

00:12:00.860 --> 00:12:04.100
So what this means is
until data is received,

00:12:04.100 --> 00:12:08.100
the web frame will be displaying
the previous web page.

00:12:08.110 --> 00:12:12.620
And if that load,
the one which was provisional, succeeds,

00:12:12.620 --> 00:12:16.470
then that becomes the web
page which is displayed.

00:12:16.890 --> 00:12:21.260
So to manage this,
to manage that content and that data,

00:12:21.270 --> 00:12:23.560
the web frame has two
data sources actually.

00:12:23.770 --> 00:12:28.930
It has the provisional data source
for the load that we've started and

00:12:28.940 --> 00:12:30.550
we're waiting to receive data on.

00:12:30.550 --> 00:12:35.950
And it has the committed data source,
which is either the previous web page or

00:12:35.950 --> 00:12:39.090
the web page that has just begun loading.

00:12:39.710 --> 00:12:41.120
So here's a metaphor for you.

00:12:41.290 --> 00:12:44.550
Let's just say you ordered a new iMac.

00:12:44.720 --> 00:12:50.050
That iMac is considered provisional
because it takes several weeks,

00:12:50.370 --> 00:12:56.300
days, perhaps months to receive
that iMac in the mail.

00:12:56.300 --> 00:12:56.300
Meanwhile,

00:12:58.190 --> 00:13:00.540
You're using your,
you gotta keep using your old iMac.

00:13:00.540 --> 00:13:02.340
You don't want to throw it
out while you're waiting

00:13:02.340 --> 00:13:04.100
for the new iMac to arrive.

00:13:04.100 --> 00:13:07.210
But once that new iMac does
arrive and you have it set up,

00:13:07.400 --> 00:13:09.270
that becomes your committed iMac.

00:13:09.340 --> 00:13:11.090
And you can toss the old iMac away.

00:13:12.870 --> 00:13:16.020
So,
to get back to making a URL field work,

00:13:16.220 --> 00:13:19.090
this is done using the
Web Frame Load Delegate.

00:13:19.590 --> 00:13:22.240
The Web Frame Load Delegate,
which is something that

00:13:22.340 --> 00:13:25.240
is implemented by you,
is informed when a load has

00:13:25.450 --> 00:13:29.100
started in the Web Frame,
when it's become provisional,

00:13:29.190 --> 00:13:32.090
when that load has redirected, you know,
if there are server

00:13:32.500 --> 00:13:37.540
redirects or what have you,
when that load becomes committed,

00:13:37.590 --> 00:13:44.140
in other words, when the content for that
load is now displayed,

00:13:44.140 --> 00:13:45.350
and when the load has
finished or when it's failed.

00:13:46.090 --> 00:13:48.810
The Web Framework Delegate
is also informed when a page

00:13:48.810 --> 00:13:51.700
title or page icon is received,
because this is part

00:13:51.800 --> 00:13:53.250
of the loading process.

00:13:53.340 --> 00:13:56.000
It's informed when the page
is scrolled to an anchor.

00:13:56.170 --> 00:13:59.500
That usually happens after
the page is done loading,

00:13:59.500 --> 00:14:03.760
but you need to know this notification
because the URL has actually changed.

00:14:03.760 --> 00:14:06.000
You get the pound and
the anchor after it.

00:14:06.020 --> 00:14:10.190
And it's also informed
when JavaScript is ready.

00:14:10.190 --> 00:14:11.790
This is when you can start interacting
with the JavaScript engine.

00:14:12.970 --> 00:14:16.180
So this is a sequence of events here.

00:14:16.380 --> 00:14:19.040
These are the sequence of calls
to the Web Frame Load Delegate.

00:14:19.160 --> 00:14:22.440
First you'll get the start message,
which is the load is-- the

00:14:22.540 --> 00:14:24.600
provisional load has started.

00:14:24.690 --> 00:14:28.440
Then you'll get the committed message,
which means that load is committed.

00:14:28.560 --> 00:14:33.190
And then you'll get the done message,
which means the frame is done loading.

00:14:33.300 --> 00:14:35.000
And then lastly,
you can get the close message,

00:14:35.000 --> 00:14:39.200
which indicates that the frame
is no longer used whatsoever.

00:14:39.340 --> 00:14:42.300
So we can break this
down a little further.

00:14:42.680 --> 00:14:46.880
Before you get the committed message,
and after the load is started,

00:14:46.900 --> 00:14:49.700
you can get several
server redirect messages.

00:14:49.980 --> 00:14:52.690
Even further,
you get the page icon and page

00:14:53.080 --> 00:14:55.970
title messages after it's committed.

00:14:56.600 --> 00:14:59.330
And then after it's done,
you can get the anchor scroll message

00:14:59.630 --> 00:15:02.130
and the client redirect message.

00:15:03.250 --> 00:15:06.860
So here's an implementation of
the Web Frame Load Delegate.

00:15:07.190 --> 00:15:10.100
In this example, I've implemented
didStartProvisionLoadForFrame.

00:15:10.100 --> 00:15:12.440
This is the didStart method.

00:15:12.890 --> 00:15:15.630
And in this case,
what I'm doing is I'm checking that

00:15:16.060 --> 00:15:19.750
the frame in question is the mainframe,
because we only want to update the

00:15:19.750 --> 00:15:22.940
URL field when it's the mainframe.

00:15:23.120 --> 00:15:25.710
So in this case,
we want to show the provisional URL,

00:15:25.810 --> 00:15:28.680
the URL in question,
the URL that we've begun loading.

00:15:28.720 --> 00:15:31.420
That's what we want to
display in the URL field.

00:15:31.860 --> 00:15:34.530
We want to do the same exact thing
for did receive server redirect

00:15:34.530 --> 00:15:36.800
for provisional load for frame.

00:15:36.970 --> 00:15:41.590
You'll get several of those messages all
while that load is still provisional.

00:15:42.780 --> 00:15:45.720
Now, if that provisional load fails,
you know, if no data is received

00:15:45.720 --> 00:15:47.540
and there's a failure,
you want to go back to

00:15:47.650 --> 00:15:49.690
showing the committed URL.

00:15:49.800 --> 00:15:53.380
That's the pre--in other words,
the previous web page.

00:15:54.050 --> 00:15:58.960
Same thing if the load fails
after it's become committed.

00:15:59.110 --> 00:16:02.300
That's what the did fail load
with error message is about.

00:16:02.330 --> 00:16:04.580
You want to show the committed URL.

00:16:04.830 --> 00:16:08.180
And if it succeeds,
you get the did finish load for frame.

00:16:08.240 --> 00:16:10.810
You want to go back to
showing the committed URL.

00:16:10.810 --> 00:16:14.700
And if there's a redirect or rather
an anchor scroll in the page,

00:16:14.820 --> 00:16:17.800
you'll want to show the
committed URL which will

00:16:17.800 --> 00:16:19.990
reflect the anchor on the URL.

00:16:20.750 --> 00:16:24.360
And this is the implementation of
those methods that we were calling.

00:16:24.430 --> 00:16:28.820
So showProvisionalUrl
calls the provisional data

00:16:28.820 --> 00:16:31.010
source method on the frame.

00:16:31.010 --> 00:16:34.070
And that'll get us back
the provisional URL.

00:16:34.580 --> 00:16:37.800
and then show committed URL calls
the data source method on the frame,

00:16:37.800 --> 00:16:39.700
which is the data source.

00:16:39.700 --> 00:16:43.780
This is the committed data source.

00:16:43.780 --> 00:16:46.780
So let's do a demo of
making a URL field work.

00:16:48.400 --> 00:16:49.670
I didn't know I loved HTML.

00:16:49.800 --> 00:16:50.460
30 seconds.

00:16:50.480 --> 00:16:51.040
30 seconds?

00:16:51.040 --> 00:16:52.700
Yeah, there you go.

00:16:52.710 --> 00:16:56.460
OK, so I want to open up a demo here.

00:16:57.140 --> 00:16:59.800
and this demo, go ahead and run it.

00:16:59.850 --> 00:17:03.690
This is what you'll get with basically
our last example except I expanded

00:17:03.740 --> 00:17:05.230
the text field a little bit more.

00:17:05.350 --> 00:17:07.350
I had a minute and 30 seconds
instead of one minute.

00:17:07.400 --> 00:17:10.010
But in this case, you know,
when I go to let's say like the

00:17:10.180 --> 00:17:12.780
QuickTime site or if I go to,
you know,

00:17:12.780 --> 00:17:17.620
www.google.com and I click on news,
notice this doesn't change.

00:17:17.620 --> 00:17:19.180
So this is what we want to fix.

00:17:19.180 --> 00:17:20.600
How are we going to do it?

00:17:20.600 --> 00:17:22.560
We're going to do it
with these delegates.

00:17:22.560 --> 00:17:27.870
So as you saw from Chris' slides,
here's the exact same methods

00:17:27.870 --> 00:17:29.140
that he had in his slides.

00:17:29.210 --> 00:17:31.520
Show provisional URL and
show committed URL.

00:17:31.520 --> 00:17:34.930
So what we want to do is for--and
the delegate methods we have here,

00:17:34.930 --> 00:17:37.360
they're basically not implemented.

00:17:37.360 --> 00:17:39.310
The skeletons are there but
they're not implemented.

00:17:39.390 --> 00:17:40.650
And so we want to wire that up.

00:17:40.750 --> 00:17:42.350
And so it's really, really simple.

00:17:42.450 --> 00:17:45.820
And so what we want to do is
we want to say if--I'm sorry,

00:17:45.820 --> 00:17:50.010
if WebView main frame because
we're interested in the main frame,

00:17:50.010 --> 00:17:51.120
that's our point of interest.

00:17:51.120 --> 00:17:53.540
which is equals frame.

00:17:53.790 --> 00:17:58.810
and then we want to say
self show provisional URL.

00:17:59.750 --> 00:18:00.700
Okay.

00:18:00.700 --> 00:18:04.970
And I'm just going to copy this because
I don't want to keep on typing it.

00:18:04.980 --> 00:18:07.560
And now,
we're going to do show provisional

00:18:07.560 --> 00:18:10.580
URL for this one because we
want to get all the URLs.

00:18:10.580 --> 00:18:13.660
As you navigate to a link, you know,
in case things change, you know,

00:18:13.660 --> 00:18:15.680
from start to finish,
you want your address

00:18:15.680 --> 00:18:16.760
field to get all those.

00:18:16.760 --> 00:18:19.550
So that's what we're
going to do for this case.

00:18:19.700 --> 00:18:23.810
So if it was a provisional failure,
we want to show what that failure was.

00:18:23.820 --> 00:18:27.150
So we'll say show committed URL.

00:18:28.000 --> 00:18:29.660
And we have a couple more down here.

00:18:29.660 --> 00:18:33.420
When the frame finally did finish,
we want the committed URL.

00:18:33.420 --> 00:18:37.670
And lastly,
we want the-- if that actually failed,

00:18:37.670 --> 00:18:38.000
so.

00:18:38.000 --> 00:18:38.700
Colons.

00:18:38.750 --> 00:18:41.210
Oh, colons are good, yeah.

00:18:43.990 --> 00:18:44.840
There we go.

00:18:44.840 --> 00:18:45.790
Run it.

00:18:46.280 --> 00:18:46.630
Okay.

00:18:46.770 --> 00:18:49.300
So now if I go to QuickTime, we get that.

00:18:49.530 --> 00:18:53.640
And I'll also go back and
let's go to the Google example.

00:18:53.640 --> 00:18:55.160
And I can click on news.google.com.

00:18:55.160 --> 00:18:58.660
And you notice it
automatically switched to this.

00:18:58.660 --> 00:19:00.200
So that's really cool.

00:19:00.200 --> 00:19:02.540
I mean this is a feature
all browsers have.

00:19:02.550 --> 00:19:03.320
But let's do more.

00:19:03.470 --> 00:19:04.410
Let's do something cool.

00:19:04.410 --> 00:19:06.170
I mean after all, this is Mac OS X.

00:19:06.170 --> 00:19:10.640
Let's step beyond the, you know,
a traditional web browser for a minute.

00:19:10.710 --> 00:19:12.810
And you know,
I see these core image transitions,

00:19:12.820 --> 00:19:16.370
Chris, and I thought wouldn't it be just
really neat so that when I click a link,

00:19:16.370 --> 00:19:19.200
you know, I get one of these whiz-bang
core image effects.

00:19:19.390 --> 00:19:21.700
Well, our delegates are a point of
interest because that's the

00:19:21.700 --> 00:19:23.760
right time and the right place.

00:19:23.760 --> 00:19:25.190
So we know when to start the transition.

00:19:25.190 --> 00:19:26.880
We know when to prepare
for the transition.

00:19:26.970 --> 00:19:29.220
And so let's just do that right now.

00:19:29.380 --> 00:19:32.920
So in the case of when we
started a provisional load,

00:19:32.920 --> 00:19:39.890
I happen to have code that is all set
up that says self-setup transition.

00:19:39.890 --> 00:19:39.890
And I

00:19:41.920 --> 00:19:44.760
And then down here,
when we finish loading,

00:19:44.850 --> 00:19:48.220
we want to say-- this is-- when
the mainframe is done loading,

00:19:48.220 --> 00:19:49.900
we want to start the transition.

00:19:49.990 --> 00:19:52.320
So we just want to say
self start transition.

00:19:52.320 --> 00:19:53.700
And there's one more
thing I want to do here.

00:19:53.700 --> 00:19:58.980
I want to say self set
document has content yes.

00:19:59.350 --> 00:20:04.860
So this example will be online
so you can see how it works.

00:20:04.860 --> 00:20:06.700
So now I'll go to the QuickTime site.

00:20:07.440 --> 00:20:09.110
There you go.

00:20:09.830 --> 00:20:15.400
You know, so I'll go to, you know,
Hickstar.com.

00:20:15.400 --> 00:20:15.980
There you go.

00:20:16.000 --> 00:20:16.760
Just like that.

00:20:16.760 --> 00:20:17.960
That easy.

00:20:17.960 --> 00:20:19.260
So, thanks.

00:20:24.080 --> 00:20:27.760
Thanks, Kevin.

00:20:27.800 --> 00:20:31.240
Okay, so,
so far we've discussed basically

00:20:31.280 --> 00:20:35.000
how you can get a simple
Web Kit app up and running.

00:20:35.000 --> 00:20:36.610
Now, after you've done this,
you're going to want to

00:20:36.730 --> 00:20:39.000
start customizing Web Kit.

00:20:39.020 --> 00:20:43.640
And that's when many developers ask,
how can I change what happens

00:20:43.640 --> 00:20:43.640
when a link is clicked?

00:20:44.250 --> 00:20:45.750
Well,
this is done using yet another delegate.

00:20:45.820 --> 00:20:47.990
This is the Web Policy Delegate.

00:20:48.190 --> 00:20:52.590
Basically, the Web Policy Delegate is
consulted when WebView is about

00:20:52.590 --> 00:20:54.760
to make navigation changes.

00:20:54.820 --> 00:20:57.450
When it is consulted,
the Policy Delegate has three

00:20:57.450 --> 00:20:59.130
possible decisions to make.

00:20:59.190 --> 00:21:01.910
It can decide to use that navigation,
which means continue

00:21:01.910 --> 00:21:03.030
with that navigation.

00:21:03.100 --> 00:21:06.130
It can decide to ignore that navigation,
which means, you know,

00:21:06.200 --> 00:21:07.220
let's stop right here.

00:21:07.220 --> 00:21:09.600
Or it can decide to
download that navigation,

00:21:09.630 --> 00:21:13.120
which would basically cause the
URL to download at that point.

00:21:13.560 --> 00:21:18.770
Unlike other delegates in Web Kit,
this one is asynchronous,

00:21:18.770 --> 00:21:20.780
so you don't have to decide right away.

00:21:20.900 --> 00:21:24.470
If you want to display a sheet to ask
the user what he wants to do or she,

00:21:25.040 --> 00:21:33.720
you can decide later because we pass
you a listener object which you can

00:21:33.720 --> 00:21:33.720
retain and respond to at any time.

00:21:34.940 --> 00:21:37.770
So it's consulted in
three different times.

00:21:37.930 --> 00:21:40.970
Before the load starts, for example,
if the user clicks a link,

00:21:41.140 --> 00:21:43.690
right after the user clicks the
link before the load starts,

00:21:43.690 --> 00:21:45.580
it'll be consulted.

00:21:45.630 --> 00:21:51.520
If the load does start,
if you choose to process that click,

00:21:51.580 --> 00:21:55.940
after the server has responded
and the MIME type is received,

00:21:55.990 --> 00:21:58.120
it'll be consulted at that point.

00:21:58.160 --> 00:22:05.170
And unrelated to the first two,
it'll be consulted when your application

00:22:05.320 --> 00:22:07.620
has been asked to open a new window.

00:22:07.620 --> 00:22:10.200
A web page can ask you to do that,
and at that point you can decide

00:22:10.200 --> 00:22:11.980
whether you want to or not.

00:22:12.460 --> 00:22:16.360
So here's a sequence of events
when a user clicks on a link.

00:22:16.440 --> 00:22:20.650
So in Web Kit, we receive the link,
we receive the event for

00:22:20.650 --> 00:22:21.900
the link being clicked.

00:22:21.930 --> 00:22:24.710
We request the load from the delegate.

00:22:24.710 --> 00:22:27.420
In this case,
the delegate has decided to, yes,

00:22:27.420 --> 00:22:28.400
use the request.

00:22:28.400 --> 00:22:30.890
So then we start the load.

00:22:31.680 --> 00:22:36.330
Once the MIME type has been received,
we ask the delegate,

00:22:36.430 --> 00:22:38.900
can we use this content
based on the MIME type?

00:22:39.030 --> 00:22:42.600
And the delegate, in this case, says yes,
use it.

00:22:42.790 --> 00:22:44.980
So at that point,
the content is then loaded.

00:22:45.040 --> 00:22:47.630
So this is the kind of most
common sequence of events

00:22:47.650 --> 00:22:50.180
with the Web Policy Delegate.

00:22:51.520 --> 00:22:55.700
So here's an example of how you
can intercept clicked links.

00:22:55.710 --> 00:22:58.120
This is the decide policy
for navigation action method.

00:22:58.120 --> 00:23:02.980
This is the method that gets consulted
right after a link is clicked.

00:23:03.300 --> 00:23:09.040
So in this example,
if the action was a link clicked,

00:23:09.080 --> 00:23:14.960
the delegate here is deciding
to ignore the click link,

00:23:15.030 --> 00:23:16.910
which means stop doing anything.

00:23:17.160 --> 00:23:19.570
And then this is when you want to
start doing your specialized action.

00:23:19.660 --> 00:23:22.560
This is how you customize a click link.

00:23:22.620 --> 00:23:24.150
Now if the user clicked
on something else,

00:23:24.260 --> 00:23:27.780
such as a form control or something else,
we're deciding to use it, which means,

00:23:27.780 --> 00:23:29.560
yeah, allow that to process.

00:23:31.170 --> 00:23:34.150
And here's the decide
policy for MIME type method.

00:23:34.330 --> 00:23:35.840
Here's an implementation of that.

00:23:36.010 --> 00:23:40.510
And in this example,
we're downloading the content

00:23:41.120 --> 00:23:42.820
based on its MIME type.

00:23:42.930 --> 00:23:44.760
So what we're doing is
we're checking the web view.

00:23:44.870 --> 00:23:45.700
Can you show this MIME type?

00:23:45.840 --> 00:23:48.690
If not, if so, yes, display it.

00:23:48.690 --> 00:23:51.920
If not, download it to a file.

00:23:53.170 --> 00:23:57.080
And lastly, here's the decide policy
for new window action.

00:23:57.160 --> 00:24:00.320
This gets called every time a web
page asks you to open a new window.

00:24:00.540 --> 00:24:02.600
In this example,
we've implemented a very simple,

00:24:02.600 --> 00:24:06.000
if not overly simple,
version of pop-up blocking.

00:24:06.030 --> 00:24:10.180
In this case, we're saying, you know,
never allow any windows to open.

00:24:11.190 --> 00:24:13.860
which some of you might like.

00:24:13.990 --> 00:24:18.940
Okay, so let's keep going down this
customization route here.

00:24:19.110 --> 00:24:21.470
Many developers ask,
"How can I prevent WebView from

00:24:21.470 --> 00:24:23.510
loading certain URLs?"

00:24:23.690 --> 00:24:26.020
This is done with yet another delegate.

00:24:26.100 --> 00:24:28.440
This is the Web Resource Load Delegate.

00:24:28.570 --> 00:24:34.840
It's consulted and informed of the
load progress of sub-resources.

00:24:35.030 --> 00:24:39.870
Sub-resources are images,
JavaScript files, CSS files,

00:24:40.160 --> 00:24:42.350
plugin content, etc.

00:24:42.480 --> 00:24:48.860
The Web Resource Load Delegate can decide
which of these resources gets loaded,

00:24:48.860 --> 00:24:53.800
and it can actually decide which
URL these resources are loaded from.

00:24:54.620 --> 00:24:58.500
So here's a sequence of events for
the Web Resource Load Delegate.

00:24:58.570 --> 00:25:00.750
You'll get a message,
"We'll send request," which

00:25:00.750 --> 00:25:03.620
is telling you that it's going
to send out that request.

00:25:03.680 --> 00:25:06.890
You'll get the received response message,
which tells you that the server

00:25:07.160 --> 00:25:10.740
has responded and gives you
the response of the server.

00:25:10.900 --> 00:25:13.820
You'll get several
received data messages.

00:25:14.460 --> 00:25:19.310
And then you'll get the done message,
which tells you that the

00:25:19.310 --> 00:25:21.110
resource is downloading.

00:25:22.740 --> 00:25:25.760
So here's an example
of we'll send request.

00:25:25.760 --> 00:25:29.670
In this example, we're preventing all
non-file URLs to load.

00:25:29.980 --> 00:25:33.590
So this is an example of an application
that only wants to load local content.

00:25:33.630 --> 00:25:36.430
It doesn't want any
sort of remote content.

00:25:36.600 --> 00:25:40.560
So what we're doing is simply,
if the thing is not a file URL,

00:25:40.560 --> 00:25:45.310
we're returning nil,
which means don't send out that request.

00:25:45.380 --> 00:25:48.480
Uh, and if it's--if it is a file URL,
then we're saying, "Yes,

00:25:48.480 --> 00:25:50.670
handle that request by returning it."

00:25:53.180 --> 00:25:56.340
So let's continue to go down
this customization route.

00:25:56.340 --> 00:26:00.740
And what I'm going to go into now is
how can I add a context menu item,

00:26:00.740 --> 00:26:02.890
which is a common question.

00:26:03.210 --> 00:26:05.600
This is done using the Web UI delegate.

00:26:05.680 --> 00:26:08.600
The Web UI delegate has
several responsibilities.

00:26:08.600 --> 00:26:12.290
It manages window-related activities,
such as opening windows and

00:26:12.420 --> 00:26:14.100
setting the sizes of windows.

00:26:14.100 --> 00:26:17.100
It's responsible for displaying
JavaScript status text,

00:26:17.190 --> 00:26:21.100
if you have a status
bar in your application.

00:26:21.100 --> 00:26:24.600
It's responsible for
displaying JavaScript alerts,

00:26:24.600 --> 00:26:29.100
because JavaScript can ask
you to display an alert panel.

00:26:29.100 --> 00:26:32.600
It's responsible for
managing window Chrome,

00:26:32.600 --> 00:26:37.090
because a web page can decide which
toolbars and such are displayed.

00:26:37.100 --> 00:26:41.100
It allows you to customize context menus,
which is what I'm going to show you.

00:26:41.140 --> 00:26:45.080
And the Web UI delegate
has control over dragging.

00:26:45.190 --> 00:26:47.960
That is dragging to and from a Web view.

00:26:48.680 --> 00:26:51.260
So here's an example of how
you add a context menu item

00:26:51.260 --> 00:26:53.600
using your web UI delegate.

00:26:53.600 --> 00:26:56.980
This is the context menu
items for element method.

00:26:57.220 --> 00:27:01.100
So what it does is, first it checks,
did the user click on a link?

00:27:01.170 --> 00:27:04.220
Sorry, that's wrong,
but I should correct this and say,

00:27:04.630 --> 00:27:07.720
this message is called every
single time the user control clicks

00:27:07.840 --> 00:27:08.770
or right clicks on a web view.

00:27:08.780 --> 00:27:12.240
So the first thing it does is,
it checks if the user has

00:27:12.240 --> 00:27:14.340
control clicked on an image.

00:27:14.420 --> 00:27:18.450
If so, what we're doing is we're
taking the default menu items,

00:27:18.550 --> 00:27:20.470
these are the menu items that
Web Kit would display if we

00:27:20.470 --> 00:27:23.720
didn't implement this method,
and we're simply adding an open

00:27:23.720 --> 00:27:25.740
image and preview menu item.

00:27:25.740 --> 00:27:29.250
And we're adding that to the
list of default menu items.

00:27:29.340 --> 00:27:33.480
And so from now on,
whenever the user clicks on an image,

00:27:33.580 --> 00:27:37.040
they'll get the list of
Web Kit menu items plus the

00:27:37.050 --> 00:27:39.060
open and preview menu item.

00:27:39.340 --> 00:27:43.530
Now if the user didn't click on an image,
they'll just get back the

00:27:43.620 --> 00:27:45.800
standard Web Kit context menu.

00:27:46.990 --> 00:27:51.070
So let's do a demo of how to
add a cool context menu item.

00:27:51.080 --> 00:27:52.080
Okay.

00:27:52.080 --> 00:27:53.680
Thanks, Chris.

00:27:54.900 --> 00:27:57.040
So our last demo here, we started with,
you know,

00:27:57.040 --> 00:28:01.380
we have this really cool transition.

00:28:01.380 --> 00:28:04.810
And I don't know about you guys,
but the page scroll is kind of cool,

00:28:04.810 --> 00:28:07.420
but it's not my favorite transition.

00:28:07.420 --> 00:28:09.360
I want to be able to choose
from different transitions.

00:28:09.360 --> 00:28:10.970
And so wouldn't it be neat
to be able to right click?

00:28:11.050 --> 00:28:12.660
This would be a cool thing
for the context menu to be

00:28:12.660 --> 00:28:14.000
able to right click and,
you know,

00:28:14.040 --> 00:28:15.480
choose which transition you want.

00:28:15.480 --> 00:28:18.000
So let's go to the UI delegate
that Chris just mentioned.

00:28:18.080 --> 00:28:19.020
Let's open it up.

00:28:19.020 --> 00:28:20.810
And as you see,
this is what you'll start with.

00:28:20.920 --> 00:28:25.990
You'll start with an empty UI,
an empty context menu items for element.

00:28:25.990 --> 00:28:29.420
And this is where you can put
whatever you want in here.

00:28:29.420 --> 00:28:34.260
So in our case, I have a little--just
to save some typing,

00:28:34.260 --> 00:28:38.340
I have a little snippet of code
that puts the list of all the

00:28:38.340 --> 00:28:41.320
core image transitions available.

00:28:41.630 --> 00:28:42.990
for the context menu item.

00:28:43.010 --> 00:28:44.260
There it is.

00:28:44.340 --> 00:28:46.740
And so we make sure that we're
not clicking on an image or we're

00:28:46.740 --> 00:28:52.000
not clicking on a link and if so,
then display this show transitions thing.

00:28:52.190 --> 00:28:57.740
So I'll build this, run it and let's see,
use page transition.

00:28:57.740 --> 00:28:58.500
There it is.

00:28:58.500 --> 00:28:59.400
It was really that simple.

00:28:59.400 --> 00:29:00.800
So let's do a dissolve.

00:29:00.850 --> 00:29:05.250
Let's go to--let's go back
to the QuickTime thing.

00:29:05.380 --> 00:29:06.450
There it is.

00:29:06.450 --> 00:29:09.660
Let's do a--maybe a diagonal swipe.

00:29:09.660 --> 00:29:11.380
Let's go to Mac OS X.

00:29:12.240 --> 00:29:17.090
Let's go to,
the ripple is my favorite transition.

00:29:17.100 --> 00:29:19.880
So I'll go here because
there's a lot of color.

00:29:19.880 --> 00:29:21.660
And let's do ripple.

00:29:21.670 --> 00:29:25.600
And I'll click this.

00:29:26.410 --> 00:29:27.300
There it is.

00:29:27.350 --> 00:29:29.850
And yes,
we can even do it in slow motion.

00:29:29.890 --> 00:29:31.900
So... The shift key.

00:29:31.910 --> 00:29:32.900
The shift key.

00:29:32.900 --> 00:29:34.070
There you go.

00:29:34.270 --> 00:29:37.900
The demo would not be complete
without the slow motion thing.

00:29:37.900 --> 00:29:41.330
So... And it also wouldn't be complete
without this copy machine thing.

00:29:41.330 --> 00:29:45.200
We even searched the Internet to,
you know, for at least two minutes to

00:29:45.200 --> 00:29:47.000
find this copy machine sound.

00:29:47.000 --> 00:29:49.270
So when I click on theater...

00:29:50.610 --> 00:29:51.600
Yeah, there you go.

00:29:51.600 --> 00:29:53.530
So it was really simple.

00:29:53.530 --> 00:29:57.090
You can, you know,
you just take this method,

00:29:57.100 --> 00:29:59.590
put whatever you want in it and
that will show up on your contacts.

00:29:59.630 --> 00:30:00.720
So there you have it.

00:30:00.860 --> 00:30:01.190
Thanks, Kevin.

00:30:01.350 --> 00:30:01.600
Yep.

00:30:09.900 --> 00:30:12.090
So let's get back to the UIDeli again.

00:30:12.230 --> 00:30:14.840
And another thing it can do,
which I mentioned before,

00:30:14.880 --> 00:30:16.960
is customize dragging.

00:30:17.550 --> 00:30:22.240
Well,
the Web UI delegate is consulted when

00:30:22.240 --> 00:30:25.400
a user drags to and from a WebView.

00:30:25.550 --> 00:30:28.910
When dragging to a WebView,

00:30:29.070 --> 00:30:33.780
The Web UI delegate can decide
which of these actions can occur,

00:30:33.790 --> 00:30:37.000
whether loading can occur,
an editing-related action can occur,

00:30:37.000 --> 00:30:42.960
or whether we can leave it up to
DHTML to define which action occurs.

00:30:43.050 --> 00:30:46.970
Now when dragging from a WebView,
the Web UI delegate can decide

00:30:46.970 --> 00:30:50.920
which things can get dragged,
whether or not images, links,

00:30:50.920 --> 00:30:55.950
a selection can get dragged,
or we can leave it up to DHTML to

00:30:56.080 --> 00:30:57.990
define what gets dragged.

00:30:59.220 --> 00:31:02.360
So in the Web UI delegates--excuse
me-- in the Web UI delegate,

00:31:02.510 --> 00:31:05.000
the dragging APIs,
when they refer to destination,

00:31:05.300 --> 00:31:06.990
that means dragging to a WebView.

00:31:07.160 --> 00:31:11.100
When we refer to source,
that means dragging from a WebView.

00:31:11.310 --> 00:31:15.990
And this is all controlled via bit masks.

00:31:16.800 --> 00:31:18.810
So in this example,
we have drag destination

00:31:18.820 --> 00:31:21.600
action mask for dragging info.

00:31:21.670 --> 00:31:26.360
This gets called periodically as a
user drags something over a web view.

00:31:26.660 --> 00:31:29.660
So in this example,
we're saying only editing operations

00:31:30.300 --> 00:31:32.780
can happen in this web view.

00:31:32.820 --> 00:31:36.310
If you have an editor which uses Web Kit,
you probably don't want

00:31:36.360 --> 00:31:37.600
it to go and load URLs.

00:31:37.600 --> 00:31:40.200
So you know,
when a URL is dragged over the web view.

00:31:40.200 --> 00:31:43.040
So this is the action that you'll

00:31:43.890 --> 00:31:46.500
And this is how you can
customize dragging from.

00:31:46.540 --> 00:31:49.220
This is the drag source
action mask for point method.

00:31:49.380 --> 00:31:53.760
This gets called when the user begins
to drag something from a web view.

00:31:53.940 --> 00:31:58.800
In this example we're saying only images,
links, and selections can be dragged.

00:31:58.800 --> 00:32:03.630
Basically we're not going to allow
DHTML to define what gets dragged.

00:32:05.870 --> 00:32:09.420
So I mentioned editing before.

00:32:09.420 --> 00:32:12.320
Let's go into how you can
actually enable editing.

00:32:13.500 --> 00:32:15.970
Well, first of all,
a WebView can be made editable

00:32:16.120 --> 00:32:20.400
as of Tiger and I think
Panther possibly as well.

00:32:20.400 --> 00:32:21.400
Yes.

00:32:21.400 --> 00:32:24.400
And this editing is WYSIWYG.

00:32:24.400 --> 00:32:28.400
Basically, the user can modify the web
page just as it's editing text.

00:32:28.400 --> 00:32:31.890
And all while this is happening,
the underlying web page

00:32:31.890 --> 00:32:33.400
is getting modified.

00:32:33.400 --> 00:32:38.400
You can use WebView editing to
compose HTML documents from scratch.

00:32:38.400 --> 00:32:43.790
Or you can use it to modify existing
web pages if you want to do that.

00:32:44.190 --> 00:32:48.410
and the thing I want to mention
today is that WebView uses,

00:32:48.430 --> 00:32:51.210
excuse me,
Mail uses WebView editing in Tiger,

00:32:51.210 --> 00:32:53.050
so you're probably already using it.

00:32:54.310 --> 00:32:55.960
So this is how you enable editing.

00:32:56.040 --> 00:32:58.200
Yep, it's pretty much that easy.

00:32:58.250 --> 00:32:59.200
All you do is call setEditable.

00:32:59.200 --> 00:33:02.190
This can be done at any
time and after doing so,

00:33:02.310 --> 00:33:05.010
your web view will become editable.

00:33:06.420 --> 00:33:11.380
So related to editing somewhat
is preventing selection.

00:33:11.380 --> 00:33:14.060
This is a common question
that developers ask.

00:33:14.060 --> 00:33:16.790
And this is done using
the Web Editing delegate.

00:33:17.250 --> 00:33:21.460
The important thing to note about the web
editing delegate is that it can be called

00:33:21.480 --> 00:33:24.330
whether the web view is editable or not.

00:33:24.320 --> 00:33:27.540
Basically,
it's called when the user makes

00:33:27.540 --> 00:33:31.800
selection changes or when the user
modifies the document in some way.

00:33:31.830 --> 00:33:35.420
What I mean by modify,
I mean add content, remove content,

00:33:35.480 --> 00:33:36.130
or change style.

00:33:36.300 --> 00:33:39.550
Now, when the web editing
delegate is consulted,

00:33:39.630 --> 00:33:44.720
it can decide to prevent these operations
from occurring or it can modify how

00:33:44.810 --> 00:33:47.460
these editing operations are made.

00:33:48.370 --> 00:33:52.820
So to disable selection,
this is pretty simple as well.

00:33:52.830 --> 00:33:57.440
You just basically return no in the
should change selection DOM range,

00:33:57.580 --> 00:33:59.140
select the DOM range method.

00:33:59.180 --> 00:34:02.150
This gets called every time the user
is trying to change the selection.

00:34:02.240 --> 00:34:04.390
You just say no,
which means don't allow the

00:34:04.550 --> 00:34:05.420
selection to ever occur.

00:34:08.680 --> 00:34:10.760
So once you've got your
web page up and running,

00:34:10.760 --> 00:34:15.520
you've got it customized,
most apps that use Web Kit and

00:34:15.520 --> 00:34:18.250
WebView allow you to print that WebView.

00:34:18.390 --> 00:34:20.180
So let's go into that.

00:34:20.540 --> 00:34:21.900
It's a pretty straightforward thing.

00:34:21.950 --> 00:34:24.560
Basically, you use the NSPrintOperation
method-- excuse me,

00:34:24.610 --> 00:34:26.840
object in App Kit.

00:34:26.900 --> 00:34:29.390
The important thing to note about that,
though, is that you don't pass the

00:34:29.390 --> 00:34:31.300
WebView to NSPrintOperation.

00:34:31.370 --> 00:34:33.980
The WebView has scroll bars,
and it clips the content.

00:34:34.270 --> 00:34:36.440
So if you pass the
WebView to NSPrintOperation,

00:34:36.440 --> 00:34:40.200
you'll just get that
little visible snippet.

00:34:40.490 --> 00:34:43.060
What you want to do instead
is pass the document view.

00:34:43.070 --> 00:34:49.470
The document view is the view inside the
web view which is actually displaying

00:34:49.580 --> 00:34:54.220
the content and it's completely--and
it's maybe larger than the web view.

00:34:56.250 --> 00:34:57.850
So this is how you do it.

00:34:57.960 --> 00:35:02.110
You get the document view
out of the frame view.

00:35:03.210 --> 00:35:07.940
You pass that to NSPrintOperation,
and then you call runOperation

00:35:07.970 --> 00:35:09.600
on the operation to print it.

00:35:09.600 --> 00:35:11.600
It's that simple.

00:35:13.090 --> 00:35:17.950
So somewhat related to printing
content is saving web content.

00:35:18.310 --> 00:35:21.120
So how can I save web content to disk?

00:35:22.930 --> 00:35:25.150
Well, you do that using Web Data Source.

00:35:25.270 --> 00:35:27.930
Web Data Source, as I mentioned before,
is responsible for managing the

00:35:27.930 --> 00:35:30.700
data of a frame or a web view.

00:35:30.780 --> 00:35:32.400
It holds the main content data.

00:35:32.580 --> 00:35:34.600
When I refer to main content data,
I'm basically referring

00:35:34.600 --> 00:35:37.700
to the actual HTML page.

00:35:37.760 --> 00:35:40.200
But it also holds the sub-resources.

00:35:40.240 --> 00:35:42.430
These are the things that
I mentioned before as well.

00:35:42.880 --> 00:35:45.960
These are the images, the JavaScript,
these are things that the

00:35:46.090 --> 00:35:47.460
main content has requested.

00:35:48.020 --> 00:35:50.200
So there's two ways to
save data in Web Kit.

00:35:50.250 --> 00:35:52.150
You can save just the main content data.

00:35:52.280 --> 00:35:55.360
This is equivalent to
saving the page source.

00:35:55.360 --> 00:36:00.060
Or you can save the main content
data plus all the sub resources.

00:36:00.060 --> 00:36:02.820
So you basically,
you have an all in one solution there.

00:36:02.960 --> 00:36:03.880
And so how do you do that?

00:36:03.880 --> 00:36:06.310
How do you save the main content
and all the sub resources?

00:36:06.310 --> 00:36:10.220
Oh, I meant to slide that in.

00:36:10.220 --> 00:36:11.170
Oops.

00:36:11.220 --> 00:36:13.300
That's done using Web Archive.

00:36:14.140 --> 00:36:15.600
A web archive is a new data type.

00:36:15.670 --> 00:36:18.780
It's as of Tiger.

00:36:18.930 --> 00:36:23.260
It holds the main content data plus
all the associated sub resources.

00:36:23.310 --> 00:36:27.860
Basically, it allows you to view web
content completely offline,

00:36:28.130 --> 00:36:30.100
all in one, all together.

00:36:30.250 --> 00:36:35.920
So it can be used to save
all data as one single file.

00:36:35.920 --> 00:36:37.590
And it's also used as
a page board format.

00:36:37.660 --> 00:36:41.820
In fact,
our editing APIs and mail and everything

00:36:42.290 --> 00:36:47.690
else that uses WebView editing is
using web archives for copy and paste.

00:36:48.870 --> 00:36:52.140
So here's an example of how
you save just the main content.

00:36:52.140 --> 00:36:55.300
You do this by calling the
data method on the data source.

00:36:55.340 --> 00:36:58.520
Once you've got the data,
you can just write it out to the file.

00:36:59.400 --> 00:37:00.420
And here's how you save everything.

00:37:00.420 --> 00:37:02.260
This is how you save a web archive.

00:37:02.330 --> 00:37:03.760
And it's pretty similar.

00:37:03.760 --> 00:37:06.880
You just call the web archive
method on the data source.

00:37:07.000 --> 00:37:08.640
And then you call the data
method on the archive,

00:37:08.640 --> 00:37:11.180
which returns you the data,
the encoded data of that archive.

00:37:11.180 --> 00:37:14.210
And then you write that out to disk.

00:37:15.300 --> 00:37:19.800
So let's do our last demo of how
to edit and save a web archive.

00:37:19.900 --> 00:37:21.960
Thanks, Chris.

00:37:21.960 --> 00:37:24.320
So we have this application
here called Blot I want to use.

00:37:24.320 --> 00:37:26.100
And I want to use Blot to do two things.

00:37:26.100 --> 00:37:28.770
I want to first show off the web archive.

00:37:28.770 --> 00:37:33.580
And second, we're also going to use
Blot to edit a web page.

00:37:33.650 --> 00:37:35.700
And so I thought to myself, you know,
self,

00:37:35.700 --> 00:37:37.700
what would be a good web page to edit?

00:37:37.710 --> 00:37:41.600
I'm in the mood to face
somebody's blog maybe.

00:37:41.600 --> 00:37:44.740
And a certain coworker
of ours runs a blog.

00:37:44.740 --> 00:37:46.360
So let me just open up this blog.

00:37:46.430 --> 00:37:47.730
And this is--here we go.

00:37:47.850 --> 00:37:48.730
So we're in Blot.

00:37:48.810 --> 00:37:50.830
This is basically what
you would get in mail,

00:37:50.830 --> 00:37:52.280
an editable web view.

00:37:52.510 --> 00:37:56.410
And so I'm going to click right here,
the improved web view or Web Kit.

00:37:56.410 --> 00:38:00.310
I'm going to say like,
"You have been owned."

00:38:02.020 --> 00:38:04.000
And we'll just edit this out here.

00:38:04.000 --> 00:38:05.390
We don't need that.

00:38:05.420 --> 00:38:09.150
Let's also go over here
and this is Leet speak,

00:38:09.310 --> 00:38:10.650
by the way.

00:38:10.800 --> 00:38:15.300
And so I think Dave has a picture
of the ACID2 graphic that he fixed.

00:38:15.450 --> 00:38:17.960
It's down here somewhere.

00:38:18.110 --> 00:38:21.160
So, ah yes,
this will be a good area right here.

00:38:21.270 --> 00:38:24.640
So we'll just take this, cut this off.

00:38:24.720 --> 00:38:29.460
And we'll get rid of this stuff.

00:38:29.550 --> 00:38:31.780
Hopefully I won't break this.

00:38:32.480 --> 00:38:35.400
Okay, okay.

00:38:35.420 --> 00:38:36.910
Yeah, we can leave that.

00:38:37.120 --> 00:38:40.690
And we'll say this site -- oh,
I don't want a link though.

00:38:40.700 --> 00:38:45.400
This site has been
defaced by Super Kevin.

00:38:45.400 --> 00:38:49.380
And then, oh yeah,
we probably want the copyright sign,

00:38:49.390 --> 00:38:51.160
so we'll take that, put that there.

00:38:51.210 --> 00:38:53.590
Now we'll save this site,
the new -- we'll save

00:38:53.590 --> 00:38:54.750
it as a web archive.

00:38:54.830 --> 00:38:57.560
And what this means is, you know,
he's got style sheets here,

00:38:57.560 --> 00:38:58.640
he's got images.

00:38:58.780 --> 00:39:02.990
If I just save just the source and try
to open up this and I'm not online,

00:39:02.990 --> 00:39:04.720
I'm not going to get anything.

00:39:04.720 --> 00:39:07.820
So web archive,
think of it as like thin versus,

00:39:07.920 --> 00:39:08.900
you know, fat.

00:39:08.980 --> 00:39:10.000
You have everything.

00:39:10.000 --> 00:39:11.720
So everything you need.

00:39:11.720 --> 00:39:15.080
So let's call this Dave_owned.

00:39:15.610 --> 00:39:16.620
So we'll save that.

00:39:16.650 --> 00:39:17.910
I really didn't mean to
put that in my documents,

00:39:17.970 --> 00:39:18.900
but that's okay.

00:39:19.060 --> 00:39:21.550
So I can open this up in Safari,
but just to demonstrate,

00:39:21.550 --> 00:39:23.250
there's no smoke and mirrors here.

00:39:23.350 --> 00:39:26.000
Let me disable the
network on this computer.

00:39:26.130 --> 00:39:31.460
So we'll, maybe we can just do built-in
Ethernet and let's put in off.

00:39:31.490 --> 00:39:33.080
Apply now.

00:39:33.080 --> 00:39:35.010
Open up this.

00:39:35.010 --> 00:39:35.010
And then we'll see that it's working.

00:39:35.010 --> 00:39:35.010
So we're

00:39:35.210 --> 00:39:36.930
and... Oh!

00:39:36.930 --> 00:39:38.660
It didn't work.

00:39:39.070 --> 00:39:41.640
Well, it was supposed to work.

00:39:41.740 --> 00:39:43.480
It worked well enough.

00:39:43.600 --> 00:39:47.630
It worked well in practice,
but I'm not sure why this is.

00:39:49.030 --> 00:39:50.650
Your blog is resistant to hacking.

00:39:50.690 --> 00:39:51.000
Okay.

00:39:51.000 --> 00:39:53.100
That's what it is.

00:39:53.100 --> 00:39:54.000
So, okay.

00:39:54.000 --> 00:39:57.540
Well, that's basically the idea is
that you get all the resources,

00:39:57.630 --> 00:40:00.090
they're saved in this file and
you have everything you need.

00:40:00.090 --> 00:40:01.280
So, there you go.

00:40:01.460 --> 00:40:02.390
Thank you, Kevin.

00:40:08.150 --> 00:40:10.430
Okay, so I think we've answered,
hopefully I've answered all the

00:40:10.520 --> 00:40:11.730
questions that I have up here today.

00:40:11.730 --> 00:40:14.880
So if you have any questions,
you can ask them right

00:40:15.060 --> 00:40:15.820
now during our Q&A.

00:40:15.820 --> 00:40:20.760
Or you can join the
Web Kit SDK dev mailing list.

00:40:20.760 --> 00:40:24.440
That's at lists.apple.com.

00:40:26.210 --> 00:40:28.680
So I also want to stress that
Web Kit can do much more.

00:40:28.680 --> 00:40:31.770
This is just the introduction
in Web Kit which allows you

00:40:31.910 --> 00:40:35.480
to access the actual bits and
structure of the web page.

00:40:35.480 --> 00:40:39.890
You can add JavaScript classes so that
you can have JavaScript classes which

00:40:39.980 --> 00:40:43.790
run native code in your application.

00:40:43.790 --> 00:40:50.690
You can have Web Kit and Netscape plugins
that work in Web Kit and much more.

00:40:51.000 --> 00:40:53.340
And to learn about that,
you'll want to go to the

00:40:53.340 --> 00:40:56.810
advanced Web Kit session
which is just right over here,

00:40:56.810 --> 00:40:59.380
Presidio, in about 30 minutes.

00:41:01.700 --> 00:41:03.980
So here are all the apps again
that I showed you before.

00:41:04.020 --> 00:41:09.800
I think you may have learned enough today
to do one of these or something similar.

00:41:09.800 --> 00:41:11.320
So now you can do it.

00:41:11.390 --> 00:41:14.900
Forgive me for the cheesy
slide but I think it's true.

00:41:15.600 --> 00:41:17.840
So for more information,
you can go to this site.

00:41:17.840 --> 00:41:23.430
I'm sure you've seen it before,
developer.apple.com/wwdc2005.

00:41:24.140 --> 00:41:26.440
And here are the sessions again.

00:41:26.470 --> 00:41:28.160
I already mentioned
Advanced Web Kit Development,

00:41:28.160 --> 00:41:30.000
which is going to start
right after this one.

00:41:30.000 --> 00:41:32.080
And there's also
Safari for Web Designers,

00:41:32.080 --> 00:41:35.970
for those who want to know how
to develop web pages for Safari.

00:41:36.030 --> 00:41:38.390
I think that one's at 2 o'clock.

00:41:39.320 --> 00:41:41.960
So if you have any questions and you
don't want to send it to a mailing list,

00:41:41.960 --> 00:41:43.300
you'll probably want
to email Mark Malone.