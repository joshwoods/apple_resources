WEBVTT

00:00:00.720 --> 00:00:04.680
Good morning and welcome today to
the administering MySQL database.

00:00:04.720 --> 00:00:07.080
My name is Chris Spalazzo and
I'm in developer relations and

00:00:07.080 --> 00:00:10.860
I work very closely with our good
friends at MySQL and Live World.

00:00:10.860 --> 00:00:13.370
Today we're going to have
two speakers talk to you.

00:00:13.370 --> 00:00:16.660
One is going to be JD Duncan who's
a consulting engineer from MySQL who

00:00:16.660 --> 00:00:19.740
will be showing you a number
of different tools on how to do

00:00:19.930 --> 00:00:22.700
administration with your MySQL database.

00:00:22.700 --> 00:00:26.660
The other is going to be Bruce Dembecki
who will be showing you a real-world

00:00:26.660 --> 00:00:30.240
deployment of how Live World uses
MySQL running on XSERVs to make

00:00:30.260 --> 00:00:32.220
all their products available.

00:00:32.220 --> 00:00:35.850
So without any further ado,
let me introduce to you

00:00:35.850 --> 00:00:37.620
JD Duncan from MySQL.

00:00:37.620 --> 00:00:38.700
JD, come on up.

00:00:45.500 --> 00:00:46.800
Hi, I'm John David Duncan.

00:00:46.840 --> 00:00:48.260
People know me as JD.

00:00:48.260 --> 00:00:51.320
I'm a consulting engineer for MySQL.

00:00:51.320 --> 00:00:53.280
I'm based here in San Francisco.

00:00:53.290 --> 00:00:59.190
I'm really only going to talk
to you for a few minutes.

00:00:59.190 --> 00:00:59.190
I'm going to talk about

00:00:59.810 --> 00:01:04.700
in administering MySQL land
about tools that are available

00:01:04.700 --> 00:01:09.020
really in two groups of tools.

00:01:09.390 --> 00:01:14.480
The first is administration in the
sense of looking at your data structure,

00:01:14.910 --> 00:01:21.020
creating users and grants,
kind of basic essential DBA tasks.

00:01:21.020 --> 00:01:26.090
The second set of tools
are monitoring tools.

00:01:26.100 --> 00:01:31.630
Things you use after a database server
is in production to keep an eye on it.

00:01:31.660 --> 00:01:35.670
After that,
after just a few minutes of that,

00:01:35.730 --> 00:01:39.760
I will turn it over to
Bruce from Live World,

00:01:39.760 --> 00:01:43.880
who can talk about real-world
experiences doing this.

00:01:44.930 --> 00:01:53.440
So the administration world in
MySQL begins with the command line tools.

00:01:53.440 --> 00:01:55.720
These are shipped as part
of the database server.

00:01:55.720 --> 00:01:58.940
Everybody who has MySQL running has them.

00:01:58.940 --> 00:02:01.600
And if you've ever done
anything with the database,

00:02:01.600 --> 00:02:03.810
they're really the first thing you use.

00:02:03.820 --> 00:02:09.790
There are a good two dozen of these
that you download with the package.

00:02:09.850 --> 00:02:14.800
The most important, MySQL,
is the MySQL command line tool.

00:02:14.800 --> 00:02:19.160
You simply use it for
interactive queries of any sort.

00:02:19.160 --> 00:02:22.450
And then the rest of them
are more specialized.

00:02:22.450 --> 00:02:27.900
A couple of the more significant ones,
MySQL Admin provides a kind of scriptable

00:02:27.900 --> 00:02:30.490
interface for command line tasks.

00:02:30.500 --> 00:02:33.520
Things like stopping the server.

00:02:33.820 --> 00:02:37.080
giving grants.

00:02:37.340 --> 00:02:43.740
MySQL dump you use to export your
database and can be used to make backups.

00:02:43.740 --> 00:02:47.280
And then there's one called MySQL binlog
that's an important utility for

00:02:47.280 --> 00:02:52.300
managing your replication slaves
and can also be used to take a backup

00:02:52.300 --> 00:02:54.260
and do point in time recovery for it.

00:02:54.260 --> 00:02:56.700
And then there are a
bunch more after that.

00:02:58.760 --> 00:03:08.400
MySQL internally has a small team of
developers who create graphical tools.

00:03:09.000 --> 00:03:13.790
And these are also available
for free there at MySQL.com.

00:03:14.810 --> 00:03:21.100
The more advanced one is
called MySQL Administrator.

00:03:21.130 --> 00:03:24.700
It runs on Windows and
on Linux and on Macs.

00:03:24.700 --> 00:03:28.860
It's a very, very nice looking kind
of baseline graphical

00:03:28.860 --> 00:03:30.470
administration tool for databases.

00:03:30.480 --> 00:03:32.810
I'll show it to you
in just a minute here.

00:03:32.810 --> 00:03:37.250
And I'll also show you
MySQL Query Browser,

00:03:37.740 --> 00:03:45.230
which is more a tool along the lines
of 4D or Access for for actually

00:03:45.940 --> 00:03:51.100
generating ad hoc queries and looking
at your data and manipulating your data.

00:03:51.100 --> 00:03:56.600
The team that creates these
has a few more things going on.

00:03:56.600 --> 00:03:59.250
They've got a nice
MySQL migration toolkit.

00:03:59.350 --> 00:04:00.790
It doesn't run on Mac.

00:04:00.890 --> 00:04:02.250
I can't show it to you right now.

00:04:02.650 --> 00:04:07.750
And they've got a whole
schedule of future projects.

00:04:08.120 --> 00:04:12.860
So from there, let's go to the demo.

00:04:12.860 --> 00:04:14.340
We're here in my laptop.

00:04:14.410 --> 00:04:19.520
This terminal window right here
should probably be familiar to just

00:04:19.520 --> 00:04:21.900
about everyone who's ever used MySQL.

00:04:21.900 --> 00:04:26.630
Here on my laptop,
I'm kind of cutting edge.

00:04:26.630 --> 00:04:30.590
I've got a MySQL 5 server running.

00:04:30.600 --> 00:04:39.330
One of the newer things in this
tool that came along with MySQL 4.1,

00:04:40.540 --> 00:04:47.180
which a lot of people don't know about
and probably will be happy to see,

00:04:47.350 --> 00:04:48.990
is interactive help.

00:04:48.990 --> 00:04:48.990
So I

00:04:49.840 --> 00:04:55.180
Now you've always been able to
type help and get client-side

00:04:55.240 --> 00:04:57.800
help just in the tool.

00:04:57.850 --> 00:05:04.580
But now you can type help contents,
and you actually get server-side help.

00:05:06.400 --> 00:05:09.960
And if we're interested
in administration,

00:05:09.960 --> 00:05:13.840
you can type help administration
and get a list of topics.

00:05:13.840 --> 00:05:17.920
And we're actually going
to go help create user.

00:05:17.920 --> 00:05:19.800
And we get the syntax
for create user command.

00:05:19.800 --> 00:05:24.790
And I'm actually going to create one.

00:05:40.980 --> 00:05:48.820
So there's the MySQL command line
tool with its new help feature.

00:05:48.830 --> 00:05:52.380
Now let's actually get
into the graphical tools,

00:05:52.430 --> 00:05:59.020
go into MySQL Administrator,
and look at this user we've just created.

00:05:59.040 --> 00:06:02.720
This is the main screen
of MySQL Administrator.

00:06:04.260 --> 00:06:11.520
tells me that I'm connected to a
MySQL 503 alpha server via local host.

00:06:11.750 --> 00:06:16.400
That tells me the version
of my client library.

00:06:16.400 --> 00:06:21.270
My operating systems on the client
end says that the server is running.

00:06:21.500 --> 00:06:23.160
Just a sort of basic overview screen.

00:06:23.160 --> 00:06:27.110
And I'm going to go
over here to accounts.

00:06:35.430 --> 00:06:41.680
And I see a number of these
users that I've been creating.

00:06:41.680 --> 00:06:43.490
Let's delete one or two of them.

00:06:43.580 --> 00:06:51.070
I'll just click on the minus
down here to delete a user.

00:06:53.580 --> 00:06:57.060
Here's the one I had just created,
I think, the WWDC1.

00:06:57.060 --> 00:07:00.730
I'll actually create
another user in here.

00:07:02.150 --> 00:07:06.430
Now a user in MySQL always has a host,
so I have to go to these

00:07:06.560 --> 00:07:08.240
little tabs down here.

00:07:08.410 --> 00:07:12.080
Say that I'm creating a user at any host.

00:07:17.000 --> 00:07:23.000
[Transcript missing]

00:07:24.940 --> 00:07:25.800
And here we are.

00:07:25.840 --> 00:07:30.870
I think that user administration
is probably the most important

00:07:30.870 --> 00:07:33.040
feature of these graphical tools.

00:07:33.040 --> 00:07:37.610
And that even as a person with a
Unix background and a really command

00:07:37.800 --> 00:07:44.240
line oriented way of doing things,
I know that grant syntax is awkward.

00:07:44.240 --> 00:07:48.400
And that important
production database systems,

00:07:48.400 --> 00:07:52.910
you really want a more powerful
tool along the lines of this

00:07:53.310 --> 00:07:55.480
for your administration.

00:07:55.480 --> 00:08:00.480
And this even in our intent is a
baseline sort of administration tool.

00:08:00.570 --> 00:08:07.020
We rely on MySQL as a company
relies on third party vendors to

00:08:07.130 --> 00:08:09.910
create more powerful tools for you.

00:08:11.570 --> 00:08:18.500
I'll go into another capability
of MySQL administrator here.

00:08:18.500 --> 00:08:26.410
I've gone to backup and I'll show a
little bit about database backups.

00:08:28.340 --> 00:08:32.590
Here I have a backup project.

00:08:32.800 --> 00:08:38.120
The project is called System Tables,
and my System Tables backup project is

00:08:38.120 --> 00:08:42.140
a way of backing up the MySQL database,
the system database,

00:08:42.290 --> 00:08:44.040
with all the tables in it.

00:08:44.160 --> 00:08:50.050
So I'm just going to go
down here to start backup.

00:08:51.820 --> 00:08:56.820
It generates a file name for me
with a date and time stamp in it.

00:08:56.860 --> 00:08:58.770
Builds me a backup.

00:08:58.890 --> 00:09:02.560
This runs MySQL dump,
if you're familiar with it.

00:09:02.580 --> 00:09:05.710
I go into the next pane to restore.

00:09:07.770 --> 00:09:12.560
I'm going to choose a
file to restore from.

00:09:12.600 --> 00:09:17.420
I think here's the backup I just made,
system tables 2005, '06, '09.

00:09:17.460 --> 00:09:19.340
I'm going to open it.

00:09:20.430 --> 00:09:28.930
And I've got a dump of
the whole database there,

00:09:28.930 --> 00:09:28.930
but say all I really want

00:09:29.530 --> 00:09:35.520
This is the big MySQL 5 system tables
with stored procedures in them.

00:09:35.520 --> 00:09:39.270
All I really want are my user
tables and my host tables,

00:09:39.460 --> 00:09:41.940
so I select them.

00:09:45.100 --> 00:09:48.280
I've restored the backup.

00:09:48.280 --> 00:09:51.170
One more thing I'll show
you in administrator.

00:09:53.130 --> 00:09:56.340
is the catalog's view.

00:09:56.340 --> 00:09:59.200
Just gives me a

00:09:59.570 --> 00:10:03.340
A view of all the databases I have,
the tables in the databases.

00:10:03.340 --> 00:10:05.880
So here, this one's called US Geo.

00:10:05.960 --> 00:10:09.640
It's got some
United States geographical data.

00:10:09.640 --> 00:10:12.360
In this tool in Administrator,
I can see my data structure,

00:10:12.510 --> 00:10:14.180
but I can't do anything with it.

00:10:14.180 --> 00:10:22.090
To actually use that data,
I'll go over here into Query Browser,

00:10:22.090 --> 00:10:22.090
the lightning bolt.

00:10:27.600 --> 00:10:29.760
Here's my US Geo table.

00:10:29.770 --> 00:10:36.560
Again, I'm running MySQL 5,
so I have a table called County that's

00:10:36.560 --> 00:10:40.470
got all the counties in the country,
and then I have a view built on that

00:10:40.590 --> 00:10:44.700
table called SC County that only
contains counties in South Carolina.

00:10:44.720 --> 00:10:47.370
I double-click on this.

00:10:48.490 --> 00:10:52.520
And up here in the query box
at the top of the screen,

00:10:52.520 --> 00:10:56.200
the tool has generated a query for me.

00:10:57.620 --> 00:11:01.030
I click on execute and I get my data.

00:11:01.070 --> 00:11:04.610
Now, MySQL Query Browser,
the Mac version of it was

00:11:04.780 --> 00:11:06.300
just released this week.

00:11:06.310 --> 00:11:07.310
It's in alpha.

00:11:07.630 --> 00:11:15.580
It's actually missing the most powerful
tool bar on here that would allow you to

00:11:15.580 --> 00:11:18.910
create more complex queries and joins.

00:11:19.010 --> 00:11:28.000
So as the future versions are released
over the next weeks and months,

00:11:28.020 --> 00:11:29.960
we'll get the full
functionality in this tool.

00:11:29.960 --> 00:11:33.560
This is our early release
of MySQL Query Browser.

00:11:33.560 --> 00:11:35.620
So those are the three
tools I wanted to show you,

00:11:35.620 --> 00:11:37.990
and let's go back to the presentation,
please.

00:11:42.890 --> 00:11:46.840
Those are our tools
provided here at MySQL.

00:11:46.840 --> 00:11:50.320
We really rely on other
companies to create more

00:11:50.320 --> 00:11:54.630
powerful administration tools,
either as commercial products.

00:11:54.750 --> 00:11:56.750
And this one I wanted to point out,
Navicat.

00:11:56.770 --> 00:11:59.520
It's from Navicat.com.

00:11:59.940 --> 00:12:05.260
It's a really nice looking tool
on OS X and pretty powerful.

00:12:07.300 --> 00:12:11.300
And then as an open source project
and a web-based administration tool,

00:12:11.300 --> 00:12:18.490
phpMyAdmin is very commonly used and
certainly has a lot of functionality.

00:12:19.340 --> 00:12:22.870
So that's the look at
administration type tools,

00:12:22.880 --> 00:12:27.640
managing users,
looking at your data structure.

00:12:28.060 --> 00:12:31.550
And from there we go on to the
tools you use when a database

00:12:31.720 --> 00:12:37.400
environment is running in production,
really for two functions.

00:12:38.170 --> 00:12:43.850
One is monitoring, monitoring performance
and health of the system.

00:12:43.850 --> 00:12:49.570
And most of the best general purpose
network monitoring software in the

00:12:49.570 --> 00:12:52.200
open source world is based on RRD.

00:12:52.260 --> 00:12:53.940
It's all from rrdtool.org.

00:12:54.000 --> 00:13:01.930
Here's a sample strip chart
of some monitoring you can get

00:13:01.930 --> 00:13:01.930
out of a MySQL database server.

00:13:02.910 --> 00:13:06.210
Other open source projects,
if you want to be alerted,

00:13:06.210 --> 00:13:10.870
say if your database server goes down or
if your slave has stopped replicating,

00:13:10.870 --> 00:13:15.860
Nagios from Nagios.org is a
multi-function general purpose

00:13:15.920 --> 00:13:20.760
network monitoring system that
MySQL plugs into very well.

00:13:20.760 --> 00:13:26.160
Also, a very young tool created by
the internal staff at Google is

00:13:26.160 --> 00:13:31.140
the Google MySQL Monitoring
and Investigation Module.

00:13:32.930 --> 00:13:36.120
It's what they use internally
for their MySQL servers and it's

00:13:36.160 --> 00:13:42.990
available from code.google.com.

00:13:44.980 --> 00:13:49.710
I'll talk a little bit about
where to go for more information.

00:13:49.790 --> 00:13:55.020
The MySQL Developer Zone, dev.mysql.com.

00:13:55.020 --> 00:14:00.040
There are a large number of
forums on real specific topics.

00:14:00.130 --> 00:14:04.820
I recommend them highly because
you can usually find just the

00:14:04.970 --> 00:14:08.210
right audience for something
particular you're interested in.

00:14:08.220 --> 00:14:09.540
These are pretty new.

00:14:10.500 --> 00:14:13.830
Mailing lists,
we've had for a much longer time.

00:14:13.840 --> 00:14:16.090
Really,
the general MySQL mailing list goes

00:14:16.170 --> 00:14:18.140
back 10 years and it's on everything.

00:14:18.140 --> 00:14:23.090
But the fact is the volume of it
is so high it's kind of unreadable.

00:14:23.090 --> 00:14:25.180
I find it unreadable.

00:14:25.180 --> 00:14:29.560
But there's still a lot of traffic going
on there for questions and answers.

00:14:29.560 --> 00:14:33.190
There's a bugs database
at bugs.mysql.com.

00:14:33.190 --> 00:14:37.180
And there's the online manual,
which is always the most

00:14:37.180 --> 00:14:40.020
up-to-date MySQL documentation.

00:14:40.500 --> 00:14:45.950
So MySQL is a company.

00:14:47.020 --> 00:14:52.560
has a professional services staff
and has a subscription services model

00:14:52.570 --> 00:14:55.460
that you can buy per server per year.

00:14:55.460 --> 00:14:57.440
We call it MySQL Network.

00:14:57.520 --> 00:15:02.590
It gives you access to our support
team to support levels up to 24

00:15:02.720 --> 00:15:07.350
by 7 and to a set of tools that
we hope are valuable before you

00:15:07.350 --> 00:15:11.710
have a support kind of incident,
like a knowledge base,

00:15:11.710 --> 00:15:16.100
things that you can use
before you can get in trouble.

00:15:17.000 --> 00:15:20.520
We also have a consulting staff.

00:15:20.920 --> 00:15:22.700
I'm sometimes part of it.

00:15:22.700 --> 00:15:24.520
We do things like
architecture and design,

00:15:24.520 --> 00:15:26.140
performance tuning engagements.

00:15:29.130 --> 00:15:33.260
With that, I want to turn it over to
Bruce Dembecki from Live World,

00:15:33.260 --> 00:15:38.690
who does this stuff every day,
runs a whole lot of websites,

00:15:38.950 --> 00:15:42.720
and can talk about a
real mission-critical,

00:15:42.760 --> 00:15:46.220
complex, multi-server,
master-slave MySQL situation.

00:15:46.400 --> 00:15:48.360
Thanks, JD.

00:15:52.000 --> 00:15:52.900
Well, good morning.

00:15:52.900 --> 00:15:54.340
My name's Bruce.

00:15:54.340 --> 00:15:55.240
I'm from LiveWorld.

00:15:55.240 --> 00:15:58.430
There's a lot of stuff that
we'll be talking about,

00:15:58.430 --> 00:16:02.660
and if you want any of the information
that I've got or some help with some

00:16:02.660 --> 00:16:06.970
of the tools that I show you later,
feel free to email me afterwards,

00:16:06.970 --> 00:16:08.730
bruce at liveworld.com.

00:16:10.530 --> 00:16:11.490
Well, good morning.

00:16:11.490 --> 00:16:12.940
My name's Bruce.

00:16:12.940 --> 00:16:13.830
I'm from LiveWorld.

00:16:13.840 --> 00:16:17.030
There's a lot of stuff that
we'll be talking about,

00:16:17.030 --> 00:16:19.070
and if you want any of the information
that I've got or some help with some

00:16:19.070 --> 00:16:19.070
of the tools that I show you later,
feel free to email me afterwards,

00:16:19.070 --> 00:16:19.070
bruce at liveworld.com.

00:16:19.480 --> 00:16:21.250
The first thing we're going
to cover very briefly is,

00:16:21.330 --> 00:16:22.330
you know, why Live World?

00:16:22.340 --> 00:16:24.550
What is it that I'm doing on this stage?

00:16:24.790 --> 00:16:28.550
Why am I here and not the
folks at MySQL or Apple?

00:16:29.030 --> 00:16:32.930
Then we're going to take a little
look at our database servers.

00:16:33.030 --> 00:16:36.670
Different versions of MySQL,
and I'm not talking now about whether

00:16:36.670 --> 00:16:41.580
it should be 4.0 or 4.1 or 5.0,
but rather, whose binary should you use?

00:16:41.580 --> 00:16:43.540
Should it be Apple's binary,
MySQL's binary?

00:16:43.570 --> 00:16:45.380
Should you build your own?

00:16:46.410 --> 00:16:50.780
and then we'll spend quite a bit of
time on deploying MySQL and the various

00:16:50.780 --> 00:16:52.860
issues that get involved in that.

00:16:52.990 --> 00:16:54.950
So, for starters, why LiveWorld?

00:16:55.070 --> 00:16:56.740
What are we doing here?

00:16:56.740 --> 00:16:57.690
Who are we?

00:16:58.050 --> 00:16:59.760
I'm going to read the slide for a minute.

00:16:59.760 --> 00:17:02.080
This is about the only time
I'm going to do that today.

00:17:02.080 --> 00:17:05.310
We are a leading provider
of collaborative community

00:17:05.330 --> 00:17:07.940
solutions since 1996.

00:17:07.960 --> 00:17:12.260
That pretty much means we do discussion
boards and chat rooms and a variety of

00:17:12.260 --> 00:17:14.760
other community tools for our clients.

00:17:15.420 --> 00:17:17.650
Before 1996,
everybody on our executive team

00:17:17.670 --> 00:17:21.790
and most of our senior engineers
worked at Apple actually,

00:17:21.790 --> 00:17:24.680
in the online group at Apple,
and they were responsible for

00:17:24.680 --> 00:17:28.810
bringing you things like Apple Link,
eWorld, and before that the

00:17:28.810 --> 00:17:33.360
Apple Link Personal Edition,
which went on to become a different

00:17:33.360 --> 00:17:35.550
product called America Online.

00:17:36.440 --> 00:17:40.280
So we know a lot about online
community and online stuff.

00:17:40.280 --> 00:17:43.010
We are a public and profitable company.

00:17:43.110 --> 00:17:44.530
We work closely with MySQL regularly.

00:17:44.530 --> 00:17:47.980
When we discover problems and issues,
we share them with MySQL.

00:17:48.030 --> 00:17:50.690
And to date,
we've had half a dozen major bugs,

00:17:50.720 --> 00:17:56.040
and every single one has had a fix in the
code within 24 hours of us reporting it.

00:17:56.040 --> 00:17:57.670
So we're very impressed with MySQL.

00:17:57.670 --> 00:17:59.860
We love working with them.

00:17:59.940 --> 00:18:03.400
They fix problems quickly and very well.

00:18:04.050 --> 00:18:07.310
We actually have a very high
volume series of sites and we have

00:18:07.460 --> 00:18:09.680
a high redundancy configuration.

00:18:09.680 --> 00:18:13.780
We're a little bit old fashioned in that
we deploy everything in at least pairs so

00:18:13.780 --> 00:18:18.200
that if something breaks there's another
one sitting there right away ready to go.

00:18:18.710 --> 00:18:22.780
And just by the pure nature of who
we do our discussion boards for,

00:18:22.780 --> 00:18:26.440
we have a very high profile
and high volume client base.

00:18:26.440 --> 00:18:28.750
To give you some ideas,
these are some of the

00:18:28.750 --> 00:18:31.370
companies that we've worked
with over the last few years.

00:18:31.440 --> 00:18:35.460
If you were to go to eBay.com and go to
visit any of the community tools such

00:18:35.460 --> 00:18:40.500
as the discussion boards or the clubs,
that would be actually running on

00:18:40.500 --> 00:18:42.100
our servers out of our data center.

00:18:42.180 --> 00:18:46.790
Same with HBO, BEA, and so on.

00:18:47.060 --> 00:18:51.110
Some examples: BEA's newsgroups,
the developer-to-developer support area.

00:18:51.530 --> 00:18:56.390
In a previous life,
it was just a newsgroup.

00:18:56.400 --> 00:18:59.370
BEA wanted to do something more,
so we actually turned it into

00:18:59.370 --> 00:19:02.890
a discussion board and linked
it back into an NTP server.

00:19:02.930 --> 00:19:05.900
It's still available as a
newsfeed if you want it,

00:19:05.910 --> 00:19:10.130
but now it's also an interactive
web discussion board and it

00:19:10.130 --> 00:19:14.900
has an RSS feed if we want to
step another generation ahead.

00:19:14.900 --> 00:19:17.890
eBay has a clubs tool that they
deploy in several different countries.

00:19:17.910 --> 00:19:20.900
This one is eBay Germany's clubs tool.

00:19:21.110 --> 00:19:23.760
eBay discussion boards,
in this case in China.

00:19:24.380 --> 00:19:29.010
eBay US, QVC, A&E.

00:19:30.990 --> 00:19:32.040
and a variety of other things.

00:19:32.200 --> 00:19:35.560
Dove, the soap company,
they have an interesting program

00:19:35.560 --> 00:19:38.680
that they launched quite a few
months back and they're rolling

00:19:38.780 --> 00:19:41.680
it out into different countries.

00:19:41.700 --> 00:19:45.140
So far we're at 27 different countries
and I believe there's another 14

00:19:45.140 --> 00:19:47.370
to go live in the next few months.

00:19:47.630 --> 00:19:51.420
And the basic concept is that they're
talking about beauty products.

00:19:51.420 --> 00:19:52.670
You know what?

00:19:52.680 --> 00:19:57.010
When it comes to beauty products,
it's all Greek to me.

00:19:57.640 --> 00:19:58.090
and Expedia.

00:19:58.110 --> 00:20:01.100
I guess some of you have used Expedia
and you might have looked at a hotel.

00:20:01.100 --> 00:20:03.240
You've noticed over the last
few months when you're looking

00:20:03.270 --> 00:20:05.660
for a hotel on Expedia,
they're now giving you user

00:20:05.660 --> 00:20:08.260
feedback on that particular hotel.

00:20:08.260 --> 00:20:11.400
So that's actually coming out
of our servers and it's built on

00:20:11.400 --> 00:20:14.900
database discussion about technology.

00:20:15.460 --> 00:20:19.280
While we have other products that
work with chats and online events,

00:20:19.370 --> 00:20:22.140
the focus of our discussion this morning
is going to be on our discussion boards

00:20:22.140 --> 00:20:25.800
because that's where we're looking
at our MySQL statistics and where

00:20:25.980 --> 00:20:28.240
we're using the database most heavily.

00:20:28.240 --> 00:20:32.460
Some facts from last month's numbers.

00:20:32.460 --> 00:20:38.540
We have 18 active discussion board
clients and 91 live discussion boards.

00:20:38.540 --> 00:20:42.180
They service 30 countries
and 20 different languages.

00:20:43.660 --> 00:20:48.480
So we've had a lot of fun and
games with character sets.

00:20:49.140 --> 00:20:54.100
Last month we did 84
million dynamic page views.

00:20:54.100 --> 00:20:56.380
It's very important to consider this.

00:20:56.380 --> 00:21:00.620
When you're doing a discussion board and
you're creating each page on the fly,

00:21:00.810 --> 00:21:04.100
customize to each user saying, "Welcome,
Bruce.

00:21:04.100 --> 00:21:07.100
You are logged in." Every time
you do one of those pages,

00:21:07.150 --> 00:21:09.660
it's quite a lot of work
to put together the page.

00:21:09.660 --> 00:21:14.180
Not just 84 million pages,
84 million dynamic pages.

00:21:14.440 --> 00:21:19.070
In Database Land we did that with
four and a bit MySQL servers.

00:21:19.070 --> 00:21:22.350
That's 1400 queries per second in May,
which is,

00:21:22.350 --> 00:21:25.300
I don't know how many billion queries,
but it was a lot.

00:21:25.520 --> 00:21:29.650
With our 91 discussion boards we
have 91 databases and a whole bunch

00:21:29.650 --> 00:21:33.800
of backups every day and server
snapshots that we do in our database.

00:21:33.800 --> 00:21:36.310
We'll talk some more about that.

00:21:37.080 --> 00:21:42.450
There's a growing trend in the
development community to develop on

00:21:42.520 --> 00:21:45.440
Macintosh and deploy on another platform.

00:21:45.440 --> 00:21:49.440
It's quite common when we were
at the MySQL conference in April,

00:21:49.470 --> 00:21:53.230
just about 60% of the laptops were Macs.

00:21:53.330 --> 00:21:58.630
I'm sure that number is a little
different at this conference.

00:21:58.680 --> 00:22:01.520
Despite the high number of
Mac laptops at the MySQL conference,

00:22:01.680 --> 00:22:04.580
there are very few people
deploying on Macintosh servers.

00:22:04.580 --> 00:22:08.820
We actually do,
and we believe that we have got the

00:22:08.820 --> 00:22:14.560
largest discussion boards deployed
on Mac servers in the world.

00:22:14.810 --> 00:22:21.450
So our servers are by and
by 8 gigabyte G5 XSERVs.

00:22:21.820 --> 00:22:24.210
I want to talk for a minute
about error correcting memory

00:22:24.210 --> 00:22:25.790
that comes in the XSERVs.

00:22:25.840 --> 00:22:28.100
It makes an incredible difference.

00:22:28.100 --> 00:22:31.250
When we first switched to
Mac servers for our databases,

00:22:31.340 --> 00:22:34.980
we went with G5 towers because
it was a couple of months before

00:22:34.980 --> 00:22:39.200
the XSERVs were going to be
available and we couldn't wait.

00:22:39.400 --> 00:22:43.220
So after about a year,
they started to become a little

00:22:43.740 --> 00:22:46.330
bit unstable and they would crash

00:22:46.600 --> 00:23:08.800
[Transcript missing]

00:23:09.170 --> 00:23:13.560
Our hard drive setup is a little bit
different than what you would expect.

00:23:13.560 --> 00:23:16.940
We bought these machines with
RAID cards and three drives with the

00:23:16.940 --> 00:23:23.580
expectation that we would deploy a
RAID 5 redundant setup on our drives.

00:23:23.580 --> 00:23:26.930
When it comes down to it,
RAID 5 is very good.

00:23:26.940 --> 00:23:32.180
It's typically fast and it's got some
overhead associated with the fact that

00:23:32.240 --> 00:23:35.680
you're providing the redundant features.

00:23:36.510 --> 00:23:39.040
On three drives that you
would have in an XSERV,

00:23:39.040 --> 00:23:40.680
it becomes a little slow.

00:23:40.680 --> 00:23:44.760
It's twice as slow as the regular hard
drive because of the RAID 5 overhead.

00:23:46.480 --> 00:23:48.630
That was slower than we could live with.

00:23:48.700 --> 00:23:52.800
It's not the same problem if you have
a larger RAID with six or seven drives,

00:23:52.800 --> 00:23:56.350
say in an XSERV RAID,
but on three drives you don't have enough

00:23:56.350 --> 00:23:58.810
spindles to make up for that overhead.

00:23:59.070 --> 00:24:02.610
So we chopped and changed with different
variations to see what would work best.

00:24:02.610 --> 00:24:04.060
We eventually settled on this.

00:24:04.060 --> 00:24:07.000
We took the middle drive and we
connected it back into the system

00:24:07.000 --> 00:24:10.520
bus and it runs the operating system.

00:24:10.520 --> 00:24:14.600
It's where all our logs live and
MySQL isn't really using that as

00:24:14.600 --> 00:24:17.400
heavily as it's using the data drives.

00:24:17.540 --> 00:24:20.310
The other two drives are mirrored
on the hardware RAID card,

00:24:20.310 --> 00:24:22.480
which gives us the
redundancy that we want.

00:24:22.490 --> 00:24:25.480
And because it's the hardware
RAID card that's doing the mirroring,

00:24:25.480 --> 00:24:30.270
we have no overhead on the
operating system in making sure

00:24:30.270 --> 00:24:32.540
that mirroring is happening.

00:24:32.540 --> 00:24:33.650
So this works very well.

00:24:33.650 --> 00:24:36.160
It's the equivalent in terms
of speed of a single drive.

00:24:38.990 --> 00:24:43.220
and it certainly is performing well
enough to handle our loads at the moment.

00:24:43.390 --> 00:24:48.490
Our loads right now are very low on CPU.

00:24:49.140 --> 00:24:54.880
Over time, as our sites grow,
that tends to increase.

00:24:54.880 --> 00:24:58.530
We know that in the future,
I/O will become a problem again.

00:24:59.370 --> 00:25:03.200
Also, in the future,
we're going to be taking advantage

00:25:03.200 --> 00:25:06.300
of 16 gigabytes of RAM that's
available now for the XServe.

00:25:06.300 --> 00:25:09.180
Apple, in April,
some of you might have heard they

00:25:09.190 --> 00:25:11.190
released a new operating system.

00:25:11.300 --> 00:25:14.380
It's got 64-bit support,
which we think is

00:25:14.380 --> 00:25:16.300
wonderful in database land.

00:25:16.300 --> 00:25:20.060
And at the same time,
most people didn't hear that

00:25:20.370 --> 00:25:24.060
they actually certified 2
gigabyte RAMs for the XServe.

00:25:24.310 --> 00:25:28.290
So we actually ordered our first...

00:25:28.400 --> 00:25:37.800
[Transcript missing]

00:25:38.020 --> 00:25:40.330
The other thing in the future,
towards the end of the year,

00:25:40.460 --> 00:25:42.440
we'll start deploying XServe RAIDs here.

00:25:42.440 --> 00:25:45.940
We know that as our load increases,
the I.O.

00:25:45.940 --> 00:25:47.560
will become a problem.

00:25:47.560 --> 00:25:49.990
At that point,
we already have some XServe RAIDs in

00:25:49.990 --> 00:25:51.920
the data center doing other stuff.

00:25:51.980 --> 00:25:55.390
We know that the RAID 5 solution
there will be three to four times

00:25:55.390 --> 00:25:57.400
faster than what we're doing now.

00:25:57.400 --> 00:25:59.420
So we're not worried about I.O.

00:25:59.420 --> 00:26:02.780
The message here that I was
trying to deliver is...

00:26:05.000 --> 00:26:23.400
[Transcript missing]

00:26:24.210 --> 00:26:27.580
So if I talk about our database
architecture for a few minutes,

00:26:27.760 --> 00:26:28.990
we deploy everything in pairs.

00:26:29.140 --> 00:26:30.300
Two things that are important here.

00:26:30.300 --> 00:26:33.120
One is the two servers are
replicating backwards and

00:26:33.120 --> 00:26:34.300
forwards between each other.

00:26:34.370 --> 00:26:39.710
Any change to the data on one
is replicated on the other.

00:26:39.960 --> 00:26:58.260
and vice versa.

00:26:58.260 --> 00:26:58.260
So any change that happens
here is replicated on the other

00:26:58.260 --> 00:26:58.260
machine very quickly using
the MySQL replication system.

00:26:58.260 --> 00:26:58.260
And we're very pleased with that.

00:26:58.260 --> 00:26:58.260
It works well.

00:26:58.260 --> 00:26:58.260
It's reliable and it's a little fast,
which can be a problem sometimes.

00:26:58.800 --> 00:27:00.710
We also,
right now on most of our systems,

00:27:00.730 --> 00:27:05.660
have multiple instances using
MySQL D multi that comes from MySQL.

00:27:05.660 --> 00:27:11.060
We use two or three instances on
our 8 gigabyte machines because

00:27:11.060 --> 00:27:16.380
we're still waiting for 64-bit
binaries from MySQL and Apple.

00:27:16.380 --> 00:27:21.820
And we have some tests that we've done,
but we'll go into that a little later.

00:27:22.940 --> 00:27:24.970
So for now,
we might have two or three instances

00:27:24.970 --> 00:27:28.140
on our 8 gigabyte machines to take
advantage of the fact that machines can

00:27:28.220 --> 00:27:30.300
handle the load and they have the memory.

00:27:34.380 --> 00:27:36.740
In front of our database servers,
between our application servers

00:27:36.750 --> 00:27:40.400
and our database servers,
we actually use hardware load balancers.

00:27:40.550 --> 00:27:44.420
That's a very unusual statement,
and it comes as a result of

00:27:44.420 --> 00:27:48.100
the troubles we were having
last year with our G5 towers.

00:27:48.190 --> 00:27:52.500
Out of frustration with nothing else that
we could think of to fix the problem,

00:27:52.560 --> 00:27:55.680
we had just upgraded our load balancers,
so we took our old ones,

00:27:55.690 --> 00:27:58.490
we threw them in front
of the database servers.

00:27:58.860 --> 00:28:02.930
The upshot was when one
of our towers crashed,

00:28:03.080 --> 00:28:05.860
the load balancer would decide that
the traffic should go somewhere

00:28:06.260 --> 00:28:07.790
else and failover automatically.

00:28:07.800 --> 00:28:10.510
We stopped having stability
problems and issues as far as our

00:28:10.510 --> 00:28:12.410
application servers were concerned.

00:28:12.420 --> 00:28:15.760
We were very excited by that.

00:28:15.810 --> 00:28:18.010
We still wanted to fix
the crashing servers,

00:28:18.070 --> 00:28:20.310
but at least we'd mitigated the problem.

00:28:20.320 --> 00:28:21.730
MySQL Database

00:28:22.490 --> 00:28:25.530
Now that we have mitigated the
problem completely by using XSERVs

00:28:25.530 --> 00:28:29.330
and the error correcting memory,
we've decided to leave the

00:28:29.330 --> 00:28:30.540
hardware load balancers in place.

00:28:30.540 --> 00:28:34.050
They offer a good service to us
and it's a lot easier for me when

00:28:34.050 --> 00:28:36.910
I'm working on these things if
I can take a server offline in the

00:28:36.910 --> 00:28:39.830
middle of the day than having to
do it in the middle of the night.

00:28:39.830 --> 00:28:45.430
Don't get to do it very often,
but in theory I could.

00:28:45.710 --> 00:28:49.200
Behind all of this,
we also have MySQL Admin.

00:28:49.320 --> 00:28:53.600
MySQL Admin does one-way replication
from our active server pair.

00:28:53.800 --> 00:28:57.930
And we use that for doing
things like reports,

00:28:57.940 --> 00:29:00.520
backups, and our email watches.

00:29:00.600 --> 00:29:03.890
People often subscribe to threads
on the discussion board saying,

00:29:03.890 --> 00:29:06.540
"Send me an email every day
with a summary of all the things

00:29:06.540 --> 00:29:08.510
that happened on this thread."

00:29:08.920 --> 00:29:12.800
Those things can happen
off the production systems.

00:29:16.260 --> 00:29:19.500
So, there's some questions about
whose binary should I use.

00:29:19.500 --> 00:29:22.080
Apple has a binary that's
included with OS X Server.

00:29:22.080 --> 00:29:26.960
MySQL makes a binary which
is very easy to use also.

00:29:26.960 --> 00:29:29.630
And, of course,
being an open source product,

00:29:29.630 --> 00:29:33.390
you can download the source from
MySQL and build your own binary.

00:29:35.260 --> 00:29:38.440
So I just want to talk briefly about
the three binaries that are out there,

00:29:38.440 --> 00:29:41.400
or the three options that are
easily available to people.

00:29:41.430 --> 00:29:43.360
First of all, the Apple build.

00:29:43.360 --> 00:29:43.900
It's right there.

00:29:43.900 --> 00:29:46.100
It's out of the box with OS X Server.

00:29:46.140 --> 00:29:50.130
And go with the theme of the week,
it just works.

00:29:50.320 --> 00:29:51.150
It's there.

00:29:51.330 --> 00:29:52.220
You turn it on.

00:29:52.430 --> 00:29:53.450
It's great.

00:29:53.670 --> 00:29:58.690
There has, during the years with 10.3,
been a tendency for the Apple version

00:29:58.700 --> 00:30:04.120
to be a couple of builds behind
where MySQL's release version is.

00:30:04.660 --> 00:30:08.700
Depending on your opinion,
that can be a good thing or a bad thing.

00:30:08.830 --> 00:30:11.160
In Tata-based land,
you want to have a rock-solid

00:30:11.220 --> 00:30:14.110
server and you don't want to be
upgrading it every time there's a

00:30:14.110 --> 00:30:16.580
new version from the manufacturer.

00:30:16.580 --> 00:30:18.860
If it's working and working well,
don't mess with it.

00:30:21.190 --> 00:30:23.990
There's also the occasion where
there might be a new bug introduced

00:30:23.990 --> 00:30:25.560
that you just have to avoid.

00:30:25.560 --> 00:30:28.010
And the only way to get
around that is to upgrade it,

00:30:28.080 --> 00:30:31.340
which means you might have to move
away from Apple's binary until

00:30:31.340 --> 00:30:33.480
Apple catches up with a newer version.

00:30:33.480 --> 00:30:38.800
So depending on that, could be good,
could be bad.

00:30:40.990 --> 00:30:42.900
MySQL also makes a binary.

00:30:42.900 --> 00:30:45.410
It's easy to download from mysql.com.

00:30:45.440 --> 00:30:48.440
You can always get the latest
release version from MySQL.

00:30:48.580 --> 00:30:49.400
It's easy to install.

00:30:49.400 --> 00:30:50.640
It's just a package installer.

00:30:50.640 --> 00:30:53.120
Double click on it,
you get a typical install window.

00:30:53.120 --> 00:30:56.560
You can also install an admin
switch to turn it on or off

00:30:56.570 --> 00:30:58.730
from the system preferences.

00:31:00.900 --> 00:31:05.040
The problem that commonly arises when
you're using a MySQL binary is that

00:31:05.040 --> 00:31:08.020
Apple's binary is still in OSX Server.

00:31:08.130 --> 00:31:09.100
It's in a different place.

00:31:09.100 --> 00:31:11.280
Apple installs their
binaries in User Bin.

00:31:11.520 --> 00:31:16.350
MySQL installs their
binaries in User Local.

00:31:16.530 --> 00:31:18.310
All of your systems,
if you're using a terminal,

00:31:18.310 --> 00:31:21.400
will have user bin very
early in the path statement.

00:31:21.400 --> 00:31:24.380
So when you type MySQL at
the command line,

00:31:24.380 --> 00:31:27.970
even if you've added MySQL to your path,
chances are user bin is

00:31:27.970 --> 00:31:30.740
in the path before then,
and you'll be using Apple's binary.

00:31:32.670 --> 00:31:34.590
It's not so much a problem when
you're launching a server that's

00:31:34.640 --> 00:31:38.520
done with a script which usually
knows exactly where it's looking,

00:31:38.520 --> 00:31:40.700
but when you're using
the command line tools,

00:31:40.700 --> 00:31:43.080
you can find that you're using a
different version than your server,

00:31:43.080 --> 00:31:47.360
which is rarely a problem,
but it is something to consider.

00:31:47.360 --> 00:31:51.000
We avoid this problem by deleting
the MySQL binaries from user

00:31:51.020 --> 00:31:58.510
bin and setting up symlinks from
there to the MySQL binaries.

00:31:59.480 --> 00:32:02.390
Finally,
there's the option of do it yourself.

00:32:02.410 --> 00:32:09.400
You can download the source code from
MySQL and compile your own binaries.

00:32:09.400 --> 00:32:13.440
It requires a knowledge
of compiling and building,

00:32:13.490 --> 00:32:16.680
and it's not something that under normal
circumstances we would consider doing.

00:32:16.680 --> 00:32:20.080
It would be difficult for me to
explain to eBay that their sites

00:32:20.080 --> 00:32:23.760
went offline because Bruce built this
copy of MySQL with his own compiler.

00:32:48.120 --> 00:32:50.720
MySQL gave us a fix in
the source code overnight.

00:32:50.720 --> 00:32:55.300
The only way we could deploy it
was to actually download the source

00:32:55.300 --> 00:32:57.840
and build it ourselves because
it was still a few weeks away

00:32:57.840 --> 00:32:59.490
from MySQL releasing a new binary.

00:33:01.700 --> 00:33:03.540
So that's an example of a special need.

00:33:03.910 --> 00:33:10.410
Another example might be if you
had a server with 8 or 16 gigabytes

00:33:10.410 --> 00:33:16.160
of memory and you wanted to take
advantage of Tiger 64-bit capabilities,

00:33:16.160 --> 00:33:18.700
you might want to download
and build a 64-bit binary.

00:33:18.700 --> 00:33:19.960
I know that we have.

00:33:20.040 --> 00:33:24.300
We had some help from the guys at
Apple that build Apple's binary.

00:33:24.300 --> 00:33:26.960
We had some help from the guys at
MySQL that build MySQL's binary.

00:33:26.960 --> 00:33:29.260
And we sort of put the
information together and we

00:33:29.260 --> 00:33:31.020
built our own 64-bit binary.

00:33:31.600 --> 00:33:32.510
And it's great.

00:33:32.510 --> 00:33:33.180
It works.

00:33:33.180 --> 00:33:36.690
We have it deployed in a very small
scale on our smallest data set on

00:33:36.760 --> 00:33:39.420
one of the servers in the pair.

00:33:40.720 --> 00:33:46.230
So we have some first-hand experience
running 64-bit MySQL on Tiger.

00:33:46.970 --> 00:33:52.180
We're not going to deploy it on a
large scale until MySQL's binary or

00:33:52.180 --> 00:33:56.030
Apple's binary becomes available for
all the reasons that we talked about.

00:33:58.430 --> 00:34:02.550
So we're here talking about databases,
and I feel obliged, like any good person

00:34:02.550 --> 00:34:05.580
presenting a database speech,
just to mention,

00:34:05.580 --> 00:34:07.440
don't forget to tune your
database when you set it up.

00:34:07.520 --> 00:34:10.520
Typical things that you will
do is look at memory settings,

00:34:10.520 --> 00:34:13.560
make sure you're allocating the
right amount of memory for your

00:34:13.960 --> 00:34:16.940
needs based on what you need and
what your server is capable of and

00:34:16.940 --> 00:34:18.650
what else your server is doing.

00:34:18.660 --> 00:34:21.330
In our case,
we have dedicated MySQL servers,

00:34:21.330 --> 00:34:24.030
so we're allocating
lots and lots of memory.

00:34:25.140 --> 00:34:28.750
But some people have a server
that will be running Apache,

00:34:28.750 --> 00:34:32.360
PHP, MySQL, Mail Server, DNS,
a few other things.

00:34:32.360 --> 00:34:35.860
So you can't always allocate all
the memory in the machine to MySQL.

00:34:35.860 --> 00:34:39.560
What I'm suggesting is that you
think about what does MySQL need,

00:34:39.740 --> 00:34:43.120
what does the rest of the machine need,
what's available,

00:34:43.120 --> 00:34:45.870
and make some decisions based on that.

00:34:45.950 --> 00:34:51.020
Once you have the total memory set,
set the individual caches.

00:34:51.020 --> 00:34:54.620
In MySQL, there's a query cache,
there's the MyISM key buffer.

00:34:54.890 --> 00:34:57.630
There's a whole bunch of different
caches that will affect what's

00:34:57.710 --> 00:35:01.110
happening and how much memory you
allocate to each will be important.

00:35:03.950 --> 00:35:06.330
Also, choose your database engine.

00:35:06.430 --> 00:35:08.890
MySQL has a model where you
can have different database

00:35:08.910 --> 00:35:11.780
engines that do different things.

00:35:11.780 --> 00:35:15.350
The default engine in
MySQL is called MyISM,

00:35:15.500 --> 00:35:19.730
and most people just forge
right ahead with that.

00:35:19.960 --> 00:35:24.030
There's also an engine included with
any download of MySQL called InnoDB,

00:35:24.030 --> 00:35:27.260
which is a transaction-capable
database engine.

00:35:27.260 --> 00:35:30.040
It also has some other
performance improvements,

00:35:30.040 --> 00:35:33.100
and generally speaking,
unless there are special

00:35:33.100 --> 00:35:38.020
needs which dictate otherwise,
InnoDB usually outperforms MyISM and

00:35:38.020 --> 00:35:41.160
the other tables for most needs.

00:35:41.160 --> 00:35:44.680
So unless you have a special need
for one of the other table types,

00:35:44.680 --> 00:35:50.380
one of the other engine types,
InnoDB is the best choice in most cases.

00:35:52.460 --> 00:35:55.500
Finally,
don't forget to index your database.

00:35:55.500 --> 00:35:58.930
MySQL has something
called the slow query log,

00:35:58.930 --> 00:35:59.660
which is very useful.

00:35:59.660 --> 00:36:02.770
You should enable it and you
should review the output of that.

00:36:02.830 --> 00:36:08.130
It will essentially tell you
the exact query of any query

00:36:08.130 --> 00:36:11.490
that took longer than n seconds.

00:36:11.700 --> 00:36:13.000
By default, n is 10.

00:36:13.000 --> 00:36:15.720
And if you've got queries
that are running 10 seconds,

00:36:15.720 --> 00:36:19.410
you really need to look at why that
is and what they're doing and perhaps

00:36:19.410 --> 00:36:24.070
find ways to improve your indexes,
find ways to improve your query.

00:36:24.080 --> 00:36:27.370
The other thing that can help
when you're looking at indexes is

00:36:27.370 --> 00:36:29.910
MySQL's built-in explain command.

00:36:29.920 --> 00:36:34.160
You can take any query,
throw explain at the front of it,

00:36:34.160 --> 00:36:38.760
and the MySQL optimizer will
tell you what it would do if

00:36:38.870 --> 00:36:40.140
it was really doing the query.

00:36:40.140 --> 00:36:41.880
It will tell you what
indexes were available,

00:36:41.880 --> 00:36:45.250
what indexes it would choose,
how many rows of data it would

00:36:45.320 --> 00:36:48.070
look at to answer your query.

00:36:48.080 --> 00:36:52.010
So that can be helpful in
managing your indexes and coming

00:36:52.010 --> 00:36:52.750
up with the best solution.

00:36:57.330 --> 00:36:58.710
So now I want to talk a little bit more.

00:36:58.720 --> 00:37:00.100
We mentioned our MySQL admin machine.

00:37:00.100 --> 00:37:02.660
I'd like to talk about production
and administration tasks.

00:37:02.730 --> 00:37:06.380
In our case,
production machines have to be fast.

00:37:06.380 --> 00:37:07.770
It's very important.

00:37:07.780 --> 00:37:11.980
We have a lot of load on those machines,
and they need to be fast,

00:37:12.080 --> 00:37:13.120
they need to be quick.

00:37:13.120 --> 00:37:15.220
That's important to us.

00:37:15.220 --> 00:37:18.800
Administration tasks have
a tendency to be slow.

00:37:18.800 --> 00:37:22.560
They usually involve a lot of number
crunching and going through things.

00:37:23.470 --> 00:37:27.190
The mix of the two can
be quite unpleasant.

00:37:27.190 --> 00:37:30.940
It will often, in our case,
cause problems for our users,

00:37:30.940 --> 00:37:33.250
which in turn cause
problems for our clients,

00:37:33.250 --> 00:37:36.120
which in turn cause
problems for our sysadmins.

00:37:40.430 --> 00:37:43.730
MySQL Admin is our solution
because we separated the

00:37:43.730 --> 00:37:46.050
production and the admin tasks.

00:37:46.760 --> 00:37:49.400
MySQL Admin runs many instances of MySQL.

00:37:49.400 --> 00:37:54.360
It copies from each database pair that
is running every instance of MySQL.

00:37:54.360 --> 00:37:58.720
It does this delayed
replication from that server.

00:38:00.430 --> 00:38:04.170
MySQL Admin is the machine
that we use to run reports,

00:38:04.380 --> 00:38:07.840
to run backups,
to figure out how many users posted

00:38:07.860 --> 00:38:11.800
message yesterday so that when
our clients ask this information,

00:38:11.800 --> 00:38:16.150
they expect to see it and they can get it
in a timely manner but without impacting

00:38:16.150 --> 00:38:18.700
the users on the production systems.

00:38:18.700 --> 00:38:23.720
There's another difference here in
that MySQL Admin has the full logs.

00:38:25.800 --> 00:38:27.710
The production servers have less logs.

00:38:27.730 --> 00:38:29.560
The production servers don't
actually need the logs,

00:38:29.560 --> 00:38:31.600
they're just entering the
information as they happen.

00:38:31.600 --> 00:38:34.930
But they don't process it,
so the information isn't there.

00:38:34.940 --> 00:38:36.580
We keep it elsewhere.

00:38:38.350 --> 00:38:40.450
I'm going to give you an
example of a script that we use.

00:38:40.720 --> 00:38:42.190
There's an interesting challenge here.

00:38:42.310 --> 00:38:45.090
Logs and stats are space consuming.

00:38:45.350 --> 00:38:49.870
Their performance is inhibiting
because of their size.

00:38:49.980 --> 00:38:54.020
Over months and years,
with the sort of access and

00:38:54.020 --> 00:38:56.900
hits that we're getting,
they add up to a lot of space.

00:38:56.900 --> 00:39:01.330
And just adding a new record to
a big table like that means it

00:39:01.510 --> 00:39:06.070
has to make some changes to the
index and can be quite slow.

00:39:06.270 --> 00:39:09.240
So our challenge is to reduce the
size of the logs on the production

00:39:09.460 --> 00:39:14.140
servers and at the same time keep the
full set of logs on the admin server.

00:39:14.330 --> 00:39:17.130
With our replication
model that MySQL has,

00:39:17.160 --> 00:39:21.200
every time you make a change to
the data on the production server,

00:39:21.200 --> 00:39:25.360
it ultimately gets replicated
through to the admin server.

00:39:25.360 --> 00:39:29.360
So we have to be careful
that we don't lose that data.

00:39:29.950 --> 00:39:31.860
I've written a quick script here.

00:39:31.890 --> 00:39:36.950
I'm not a programmer, so I tend to write
things in shell script.

00:39:37.070 --> 00:39:38.500
And for the more serious
developers out there,

00:39:38.550 --> 00:39:40.960
I apologize that we're not
doing something smarter.

00:39:40.960 --> 00:39:43.940
But the reality is,
for administering the databases,

00:39:43.940 --> 00:39:45.180
this is all you need.

00:39:45.280 --> 00:39:48.320
The MySQL client has all
the smarts to do with MySQL,

00:39:48.330 --> 00:39:51.500
and you can activate that
from a shell script and say,

00:39:51.590 --> 00:39:54.410
"Give me this piece of
information that I need."

00:39:54.690 --> 00:39:57.000
And then you can manipulate it.

00:39:57.190 --> 00:39:59.300
So it doesn't need heavy-hitting
programming skills to

00:39:59.420 --> 00:40:01.600
create these sort of tools.

00:40:01.690 --> 00:40:06.770
In this case, our script says,
"Tell me the time now in seconds."

00:40:06.880 --> 00:40:09.390
We then munze that a little
bit and we sort of take off

00:40:09.430 --> 00:40:11.030
seven days worth of seconds.

00:40:11.140 --> 00:40:14.900
We multiply it by a thousand because
our timestamps are in milliseconds.

00:40:15.020 --> 00:40:18.500
So now I have a number which
is the time a week ago,

00:40:18.500 --> 00:40:22.180
as it would be represented in
a timestamp on our database.

00:40:22.910 --> 00:40:26.750
We then ask the server to give
me a list of database names

00:40:26.790 --> 00:40:28.890
that are discussion boards.

00:40:28.970 --> 00:40:30.950
And we go through that
list one at a time,

00:40:31.120 --> 00:40:34.450
deleting all of the logs.

00:40:34.600 --> 00:40:38.310
The most important thing here in
this lower query that's in yellow

00:40:38.550 --> 00:40:43.660
is the start of the query which
says set SQL log bin equals zero.

00:40:43.820 --> 00:40:48.100
That command will tell the MySQL server,
for anything associated with this

00:40:48.100 --> 00:40:52.490
connection and this connection only,
don't write my changes to the binary log.

00:40:52.540 --> 00:40:58.370
The binary log is where changes in
data are replicated to the slave.

00:40:58.380 --> 00:41:03.400
So if this connection doesn't write
its changes to the binary log,

00:41:03.570 --> 00:41:08.740
this following command will only
happen on the production machine.

00:41:08.740 --> 00:41:11.150
It won't happen on the admin machine.

00:41:11.880 --> 00:41:14.110
It also won't happen on the
other production machine

00:41:14.110 --> 00:41:15.140
that is a partner here.

00:41:15.140 --> 00:41:17.540
So you have to remember to run
the script on both servers.

00:41:19.450 --> 00:41:21.480
By doing this,
we can keep the log files down to

00:41:21.560 --> 00:41:25.090
a reasonable size in our production
servers and still give us all the data

00:41:25.090 --> 00:41:30.590
that we need in the admin servers.

00:41:31.590 --> 00:41:33.500
So let's talk about replication.

00:41:33.500 --> 00:41:35.950
MySQL has a wonderful replication model.

00:41:36.050 --> 00:41:40.450
It's fast, it's reliable,
and it synchronizes the data.

00:41:40.580 --> 00:41:44.020
It works by not sending
data between the machines,

00:41:44.020 --> 00:41:47.300
but sharing any query
that changes the data.

00:41:47.430 --> 00:41:51.720
So if the two machines start off with
the same data and any query changes the

00:41:51.770 --> 00:41:56.090
data here will be executed here too,
data should be the same.

00:41:58.190 --> 00:42:02.530
The problem we have occasionally
is that it's a little bit too fast.

00:42:02.560 --> 00:42:06.310
It's rare that this replication
process gets more than a

00:42:06.310 --> 00:42:11.220
second behind in our servers,
and that's plenty good enough for us.

00:42:12.800 --> 00:42:34.500
[Transcript missing]

00:42:35.200 --> 00:42:37.800
The thing with replication is before
I can get to the other production

00:42:37.800 --> 00:42:41.340
machine and stop that from happening,
they're already gone.

00:42:44.100 --> 00:42:56.890
: MySQL database is a very
complex and complex database.

00:42:56.890 --> 00:42:56.890
The answer is to go to backup,
but that can be time consuming.

00:42:56.890 --> 00:42:56.890
In our case, on our smallest data set,
it takes four hours to go from last

00:42:56.890 --> 00:42:56.890
night's backup to being live again.

00:42:57.540 --> 00:43:01.480
That was a big problem for us and
we weren't happy with four hours

00:43:01.480 --> 00:43:06.610
of downtime and all the data lost
between last night and this afternoon.

00:43:06.910 --> 00:43:09.840
We came up with a system which
we call delayed replication.

00:43:09.840 --> 00:43:13.690
It's a modification of
MySQL's replication based on

00:43:13.690 --> 00:43:18.880
the fact that MySQL uses two
threads to run replication.

00:43:18.880 --> 00:43:22.740
The first change is made,
it downloads it and it writes

00:43:22.740 --> 00:43:24.590
it to the slave machine.

00:43:25.100 --> 00:43:28.470
The second thread executes those queries.

00:43:28.530 --> 00:43:32.170
Both of them are always listening
to the log files coming from

00:43:32.170 --> 00:43:37.270
the master and coming from the
I/O thread so that they happen very,

00:43:37.320 --> 00:43:38.390
very quickly.

00:43:38.400 --> 00:43:42.190
But because that nature of
how replication is built,

00:43:42.390 --> 00:43:47.350
we have an ability to manage
those two threads and as a result,

00:43:47.350 --> 00:43:50.700
we can do something that
looks kind of like this.

00:43:51.470 --> 00:43:54.530
Over a period of time,
if we start at 4 o'clock,

00:43:54.580 --> 00:44:00.060
we're going to tell the slave
to stop executing SQL queries

00:44:00.060 --> 00:44:01.190
coming from the master.

00:44:03.370 --> 00:44:06.970
And then at 4.01,
we're going to tell the slave to

00:44:06.970 --> 00:44:09.850
start copying changes from the master.

00:44:11.620 --> 00:44:12.970
That'll go on for a few minutes.

00:44:13.220 --> 00:44:16.640
This is a small amount of data because
you're not moving the data itself,

00:44:16.640 --> 00:44:18.340
you're moving the queries
to change the data.

00:44:18.340 --> 00:44:23.050
So over a high-speed network,
I can copy all of the data that

00:44:23.090 --> 00:44:28.580
might have changed data in two or
three days in a matter of seconds.

00:44:28.600 --> 00:44:32.720
So only running this for four
minutes is no problem at all.

00:44:32.720 --> 00:44:36.520
And then at 4.05,
we stop the input-output thread.

00:44:36.520 --> 00:44:38.460
We stop reading changes
that happen on the master.

00:44:39.100 --> 00:44:41.610
We then do nothing for five minutes,
just so I've got a buffer of

00:44:41.610 --> 00:44:44.150
time that I can really get to
the other machine and stop it.

00:44:44.220 --> 00:44:48.370
And finally, at 10 past 4,
we will turn on the SQL thread and

00:44:48.700 --> 00:44:51.190
start processing those changes again.

00:44:53.080 --> 00:44:57.580
The impact here is that
between 4.01 and 4.05,

00:44:57.580 --> 00:45:01.570
we're reading all the changes that were
made on the server between 2--on the

00:45:01.570 --> 00:45:05.710
master server between 2.05 and 4.05.

00:45:05.850 --> 00:45:07.220
Then we do nothing for five minutes.

00:45:07.270 --> 00:45:11.640
Nothing changes anywhere on our
slave with the delayed replication.

00:45:11.700 --> 00:45:15.980
And at 10 past 4,
we start executing those queries.

00:45:16.140 --> 00:45:20.390
This cycle repeats every two hours,
and the upshot is

00:45:21.010 --> 00:45:25.400
I have a series of two-hour snapshots
because I can go back in our binary

00:45:25.400 --> 00:45:31.110
logs to the specific points where
these start and stop things occurred.

00:45:31.620 --> 00:45:35.490
And at any time I can say, stop,
don't do anything.

00:45:35.500 --> 00:45:40.000
I just made a really stupid mistake
over here on the production servers.

00:45:40.000 --> 00:45:42.080
Or some other thing happens.

00:45:42.270 --> 00:45:44.580
Databases corrupt sometimes
without user error.

00:45:44.580 --> 00:45:48.390
It doesn't happen often,
but it can happen.

00:45:49.180 --> 00:45:52.540
When these things happen,
it's nice to be able to go to a

00:45:52.540 --> 00:45:57.400
recent backup without having lost
lots of data since all of last night,

00:45:57.430 --> 00:46:01.430
without having to go through the whole
process of recovering from a backup,

00:46:01.430 --> 00:46:03.180
packing, unpacking, etc.

00:46:05.220 --> 00:46:10.300
So we found when this happens,
instead of a four-hour switch

00:46:10.300 --> 00:46:15.200
from last night's backup and
losing data for the last 13 hours,

00:46:15.200 --> 00:46:21.720
we have a half-hour switch to go to
the last snapshot on MySQL admin,

00:46:21.720 --> 00:46:26.750
and we've only lost no more
than two hours' worth of data.

00:46:26.760 --> 00:46:28.130
Okay.

00:46:31.990 --> 00:46:37.100
So we found when this happens,
instead of a four-hour switch

00:46:37.100 --> 00:46:42.020
from last night's backup and
losing data for the last 13 hours,

00:46:42.220 --> 00:46:47.000
we have a half-hour switch to go to
the last snapshot on MySQL admin,

00:46:47.000 --> 00:46:47.000
and we've only lost no more
than two hours' worth of data.

00:46:49.300 --> 00:46:55.110
The method we use is unusual and
is not common in terms of what

00:46:55.110 --> 00:46:57.710
people put between their application
servers and their database servers.

00:46:57.720 --> 00:47:00.000
We had an extra set of load balances.

00:47:00.000 --> 00:47:02.760
We solved a problem with
our G5 towers last year,

00:47:02.760 --> 00:47:05.160
and we liked it so much we kept it.

00:47:05.240 --> 00:47:06.870
It's very effective.

00:47:06.870 --> 00:47:08.120
It works great.

00:47:08.150 --> 00:47:10.480
It's probably not something most
people are going to consider,

00:47:10.480 --> 00:47:13.940
but we'd highly recommend it if you
happen to have the hardware available.

00:47:16.300 --> 00:47:22.200
The method we use is unusual and
is not common in terms of what

00:47:22.310 --> 00:47:24.820
people put between their application
servers and their database servers.

00:47:24.820 --> 00:47:27.100
We had an extra set of load balances.

00:47:27.100 --> 00:47:28.390
We solved a problem with
our G5 towers last year,

00:47:28.390 --> 00:47:28.390
and we liked it so much we kept it.

00:47:28.700 --> 00:48:29.500
[Transcript missing]

00:48:30.150 --> 00:48:34.800
Another way of using
failover is now with drivers.

00:48:34.800 --> 00:48:40.360
The JDBC driver from MySQL has a
number of features that allow you to

00:48:40.430 --> 00:48:42.630
failover in the event of something
happening to the database server

00:48:42.630 --> 00:48:43.860
you think you should be talking to.

00:48:43.880 --> 00:48:47.460
That includes the ability to set
an auto-reconnect flag so that if

00:48:47.460 --> 00:48:51.060
your database connection goes away,
you should reconnect.

00:48:51.920 --> 00:48:53.910
The other way of using failover
is to set a load balancer.

00:48:53.920 --> 00:48:59.280
That's actually important for us
with our hardware load balancer

00:48:59.280 --> 00:49:04.560
because when MySQL 1 crashes,
the connection is lost,

00:49:04.600 --> 00:49:05.390
and even though the load balancer
sends the traffic request to MySQL 2,

00:49:05.390 --> 00:49:05.390
you need to reconnect in order to do it.

00:49:06.060 --> 00:49:09.450
, and I'm going to talk
about the MySQL 2.0.

00:49:09.450 --> 00:49:12.190
That's actually important for us
with our hardware load balancer

00:49:12.190 --> 00:49:16.440
because when MySQL 1 crashes,
the connection is lost,

00:49:16.440 --> 00:49:19.950
and even though the load balancer
sends the traffic request to MySQL 2,

00:49:19.950 --> 00:49:19.950
you need to reconnect in order to do it.

00:49:20.200 --> 00:49:28.500
[Transcript missing]

00:49:29.320 --> 00:49:32.950
They also have an option
where you can have the primary

00:49:32.950 --> 00:49:37.300
server plus a secondary server,
which is accessed in a read-only mode.

00:49:37.360 --> 00:49:42.800
If, for example,
you have our situation with MySQL Admin,

00:49:42.830 --> 00:49:47.680
which is copying data from
the production servers,

00:49:47.680 --> 00:49:50.450
but it's never actually
sending any changes here back

00:49:50.450 --> 00:49:54.190
to the production servers,
we would never want one of our

00:49:54.190 --> 00:49:59.250
application servers to change the data
on MySQL Admin because it wouldn't

00:49:59.340 --> 00:50:01.000
get reflected in production land.

00:50:01.000 --> 00:50:08.620
So by setting the JDBC driver to
access via read-only mode means that

00:50:08.630 --> 00:50:12.410
you can still keep your discussion
board up to some extent because

00:50:12.410 --> 00:50:17.000
you can read what's in there,
you just can't write the changes.

00:50:17.960 --> 00:50:20.340
Fault tolerance is an
interesting question.

00:50:20.450 --> 00:50:29.090
A lot of people have different views
of what's important in fault tolerance.

00:50:29.090 --> 00:50:29.090
And I'll try and...

00:50:30.200 --> 00:50:31.480
I'll try and give you an example.

00:50:31.480 --> 00:50:34.260
A bank has a certain opinion of fault
tolerance that would be different

00:50:34.280 --> 00:50:36.220
than we do doing a discussion board.

00:50:36.220 --> 00:50:38.600
With a bank,
if you're dealing with people's money,

00:50:38.600 --> 00:50:42.530
you have a certain responsibility,
and your main focus is

00:50:42.530 --> 00:50:44.590
going to be data integrity.

00:50:45.100 --> 00:50:48.260
We obviously are concerned
about data integrity,

00:50:48.310 --> 00:50:52.410
but the reality is if the guys on
HBO are talking about what's on Sex and

00:50:52.410 --> 00:50:57.770
the City tomorrow and we lost the post,
it's not the end of the world.

00:50:58.210 --> 00:51:00.950
I'm not suggesting we
don't take it seriously.

00:51:00.960 --> 00:51:02.850
I'm just thinking that
from our point of view,

00:51:02.950 --> 00:51:07.480
fault tolerance is more important
that we have consistent uptime than

00:51:07.480 --> 00:51:08.950
it is that we have consistent data.

00:51:11.000 --> 00:51:15.290
Turns out that all the methods of dealing
with fault tolerance apply to both camps.

00:51:15.500 --> 00:51:19.940
Wherever you fall in this line,
whether it be data consistency or uptime,

00:51:19.940 --> 00:51:23.680
fault tolerance,
all of these areas are going to

00:51:23.680 --> 00:51:27.090
be important to you in either way.

00:51:27.860 --> 00:51:32.360
So in SQL land,
everyone who's familiar with SQL will

00:51:32.360 --> 00:51:37.210
know that transactional queries are
a critical part of fault tolerance,

00:51:37.580 --> 00:51:41.950
more so for the banks than for us,
but still for us as well.

00:51:41.960 --> 00:51:45.700
MySQL includes a
transactional-based engine,

00:51:45.950 --> 00:51:49.360
which is in ODB,
which we mentioned earlier,

00:51:49.360 --> 00:51:54.320
and is a very robust
solution to this area.

00:51:56.740 --> 00:52:00.790
We also have replication as part
of any fault tolerance program,

00:52:00.790 --> 00:52:04.380
keeping more than one set of
data critically important.

00:52:04.380 --> 00:52:08.790
Not just last night's backup,
but actually having two

00:52:08.790 --> 00:52:10.970
live copies of the data.

00:52:12.070 --> 00:52:14.230
Failover,
if you have more than one copy of data,

00:52:14.230 --> 00:52:17.910
will be an important part of
the fault tolerance program.

00:52:18.700 --> 00:52:21.840
As will backups.

00:52:21.840 --> 00:52:25.700
And if you do a backup and if your
interest is in data integrity,

00:52:25.710 --> 00:52:28.670
if I have to roll to last night's backup,
I want to make sure that we're logging

00:52:28.670 --> 00:52:31.510
everything so that I can recover
all the changes since last night.

00:52:33.670 --> 00:52:36.730
As will backups.

00:52:36.840 --> 00:52:40.570
And if you do a backup and if your
interest is in data integrity,

00:52:40.640 --> 00:52:42.110
if I have to roll to last night's backup,
I want to make sure that we're logging

00:52:42.110 --> 00:52:42.110
everything so that I can recover
all the changes since last night.

00:52:44.100 --> 00:52:48.020
A very important part of
managing your MySQL servers,

00:52:48.020 --> 00:52:53.180
administering your MySQL servers,
or any servers in your database,

00:52:53.180 --> 00:52:56.730
in your data center, involves monitoring.

00:52:56.730 --> 00:53:01.050
You need to know everything that's
going on in your servers all the time.

00:53:02.400 --> 00:53:05.400
You need to have a monitoring
and alerting system.

00:53:05.400 --> 00:53:06.800
You need to know what's happening.

00:53:06.800 --> 00:53:09.310
You need to be told if there's a problem.

00:53:10.420 --> 00:53:15.610
There's a number of different tests that
you will need to do on a database server.

00:53:16.550 --> 00:53:20.800
We have ultimately
built all our own tests.

00:53:20.800 --> 00:53:22.740
We recommend this.

00:53:22.740 --> 00:53:26.690
It's a good practice because you can
customize those tests to what's important

00:53:26.690 --> 00:53:28.360
to your deployment and your setup.

00:53:28.380 --> 00:53:32.550
Again, as with the hardware,
I showed you what our hardware was like.

00:53:32.580 --> 00:53:35.080
I wasn't suggesting you all
need to use that hardware.

00:53:35.080 --> 00:53:38.860
I was trying to help illustrate
the thought process you need to go

00:53:38.860 --> 00:53:41.320
through when assessing your own needs.

00:53:42.280 --> 00:53:45.390
By building your own tests
to monitor the database,

00:53:45.390 --> 00:53:49.080
you can come up with tests that
tell you if the server is up or not.

00:53:49.160 --> 00:53:52.940
In the case of MySQL,
it runs typically on port 3306,

00:53:52.940 --> 00:53:57.600
so a ping of port 3306 might be a good
test to tell you if MySQL is running.

00:53:57.620 --> 00:54:04.380
It's not really a great test,
but for some people it's enough.

00:54:06.650 --> 00:54:09.340
Active thread count is
a great test for us.

00:54:09.520 --> 00:54:12.410
I'll talk more about
that in just a minute.

00:54:12.510 --> 00:54:18.260
It tells us how many threads are actually
processing requests at the moment.

00:54:18.260 --> 00:54:19.510
Replication status.

00:54:19.510 --> 00:54:21.750
Is replication running or not running?

00:54:22.490 --> 00:54:27.880
Another test you might want to do is
the database actually retrieving data.

00:54:27.880 --> 00:54:30.850
It's one thing to do a ping on port 3306.

00:54:31.060 --> 00:54:34.000
That tells you something's listening
to the TCP stack on that port.

00:54:34.000 --> 00:54:38.910
It's another thing to actually say, "Yo,
MySQL, are you there, dude?"

00:54:39.070 --> 00:54:44.790
We do that by actually pulling
a piece of data out of an

00:54:44.910 --> 00:54:49.520
InnoDB table that we have on the
server specifically for monitoring.

00:54:49.520 --> 00:54:52.300
It's on all of our servers.

00:54:52.300 --> 00:54:55.590
We put it in the MySQL database,
which JD will probably cringe at.

00:54:55.640 --> 00:55:02.150
The MySQL database should be reserved
for MySQL administration tasks,

00:55:02.150 --> 00:55:04.080
but we think of this as
an administration task,

00:55:04.080 --> 00:55:04.080
so that's where we put it.

00:55:04.450 --> 00:55:09.260
It has a single table called status,
which has one row in it.

00:55:09.260 --> 00:55:13.290
That row says, "Okay, I'm

00:55:13.860 --> 00:55:16.650
And we asked the database,
give us all the information

00:55:16.680 --> 00:55:17.940
in the status table.

00:55:17.940 --> 00:55:20.840
If it tells us okay,
we know that it's there.

00:55:20.840 --> 00:55:24.910
We can text, we can match the string okay
in our monitoring system,

00:55:24.920 --> 00:55:27.170
and as long as we see that, we're happy.

00:55:27.350 --> 00:55:30.030
and it tells us the database
is both up and it's able to

00:55:30.030 --> 00:55:33.940
retrieve information from InnoDB.

00:55:33.980 --> 00:55:36.480
That can be important.

00:55:36.590 --> 00:55:39.070
We've had cases in the past
where InnoDB has crashed

00:55:39.160 --> 00:55:40.940
but MySQL is still running.

00:55:40.960 --> 00:55:43.270
So if you're doing a test
of whether the server is up,

00:55:43.270 --> 00:55:44.200
it's still there.

00:55:44.220 --> 00:55:48.200
It can tell you about its
stats but it can't actually

00:55:48.200 --> 00:55:49.900
pull any data out of InnoDB.

00:55:49.920 --> 00:55:52.440
So it's not really running
well enough to be happy.

00:55:52.600 --> 00:55:56.160
So those are the sort of tests
that you might want to look at.

00:55:56.840 --> 00:55:58.430
I mentioned that we
look at thread counts.

00:55:58.590 --> 00:56:00.960
That's important to us.

00:56:00.960 --> 00:56:04.440
And it's a good measure of
what's happening in your system.

00:56:04.440 --> 00:56:07.840
We have typically 200 to 300
connections to our database

00:56:07.840 --> 00:56:09.790
server at any given moment.

00:56:09.930 --> 00:56:13.180
And as you've probably worked
out by our numbers before,

00:56:13.180 --> 00:56:17.590
we're doing about 300 queries
per second on any given instance.

00:56:18.800 --> 00:56:21.310
We run a test to see how many
threads are active or how many

00:56:21.330 --> 00:56:23.220
threads are actually running.

00:56:23.220 --> 00:56:27.650
And that typically will come
back to be two or three threads.

00:56:28.250 --> 00:56:30.060
That's all that's active
in any given snapshot.

00:56:30.210 --> 00:56:32.480
We're still doing 300 queries per second.

00:56:32.510 --> 00:56:34.140
They're just not running for very long.

00:56:34.140 --> 00:56:36.850
And that's the way you want it to be.

00:56:36.950 --> 00:56:41.510
You might find that if the
server is not performing well,

00:56:41.750 --> 00:56:45.290
Those 300 threads that are
connected to the database are

00:56:45.350 --> 00:56:48.350
going to start asking queries
that aren't getting rapid answers.

00:56:48.360 --> 00:56:52.260
The active thread count
is going to start to grow.

00:56:52.260 --> 00:56:56.660
It might grow to 7 or 8,
which would be okay in our case.

00:56:56.660 --> 00:56:59.370
It might grow to 60 or 70,
which would be a sure

00:56:59.530 --> 00:57:00.860
indication of a problem.

00:57:00.860 --> 00:57:03.410
It might even grow to 300 or 400,
which is absolutely

00:57:03.410 --> 00:57:04.630
certain there's a problem.

00:57:04.640 --> 00:57:06.810
We developed a test.

00:57:06.830 --> 00:57:09.310
Once we had a test, we tied it to TCP.

00:57:10.750 --> 00:57:15.760
We used XINETD, and we associated this
script with this port number.

00:57:15.760 --> 00:57:19.150
So anyone who hits port number...

00:57:20.790 --> 00:57:26.040
10,000 on the server will
cause that script to run and

00:57:26.440 --> 00:57:28.820
get the output of the script.

00:57:29.350 --> 00:57:31.860
You can do this with
any number of scripts,

00:57:31.860 --> 00:57:32.920
with any number of things.

00:57:32.920 --> 00:57:40.420
XINETD is a wonderful tool for
executing scripts on your servers.

00:57:42.760 --> 00:57:44.580
So now that we're doing that,
let's just look quickly

00:57:44.690 --> 00:57:45.520
at the script again.

00:57:45.520 --> 00:57:49.700
It's a shell script because I don't
know any of the other languages.

00:57:50.470 --> 00:57:53.130
Be generous to call this a language.

00:57:53.130 --> 00:57:59.460
Our script uses MySQL to show
the status where the number

00:57:59.460 --> 00:58:01.850
of threads that are active.

00:58:02.280 --> 00:58:04.520
Status like threads running.

00:58:05.090 --> 00:58:08.580
We then munged that through a little
bit and we take all the output from

00:58:08.580 --> 00:58:11.590
MySQL and we just collect the number.

00:58:11.890 --> 00:58:14.740
So, an important piece of information
in that output from that script,

00:58:14.890 --> 00:58:17.480
from that command to MySQL,
is the number of threads

00:58:17.590 --> 00:58:18.160
that are running.

00:58:18.180 --> 00:58:20.340
We turn that into an integer.

00:58:20.340 --> 00:58:25.760
We create a string variable,
which will consist of the phrase,

00:58:25.760 --> 00:58:30.290
good thread usage, then the number,
and...

00:58:31.390 --> 00:58:35.940
Then we actually look at that and say,
okay, if the number is greater than 20,

00:58:35.940 --> 00:58:37.180
we don't want to say good thread usage.

00:58:37.180 --> 00:58:40.380
We'll change our string
to say high thread usage,

00:58:40.380 --> 00:58:43.190
then the number, and we'll output that.

00:58:43.240 --> 00:58:47.210
So the output of our script
is either good thread usage,

00:58:47.210 --> 00:58:53.480
seven threads, or high thread usage,
28 threads, or 303 threads.

00:58:55.340 --> 00:59:00.480
Any basic monitoring package we use in
the mapper is going to have a problem

00:59:00.480 --> 00:59:04.870
determining from the number alone
whether it should be having a problem.

00:59:04.900 --> 00:59:11.200
But we can easily match good as something
to say we're okay and not to worry.

00:59:11.200 --> 00:59:14.300
And if we can match the text string high,
say if we get that word

00:59:14.320 --> 00:59:17.410
high in our response,
the monitoring system should

00:59:17.910 --> 00:59:20.340
go off and react accordingly.

00:59:20.360 --> 00:59:21.790
Okay.

00:59:24.960 --> 00:59:28.170
So, monitoring.

00:59:28.220 --> 00:59:31.680
It's important that you use the
information that you collect.

00:59:35.200 --> 01:00:08.300
[Transcript missing]

01:00:09.590 --> 01:00:11.600
Once you get an alert,
there's another important step.

01:00:11.620 --> 01:00:13.000
You have to take some action.

01:00:13.000 --> 01:00:15.980
The action has to be appropriate.

01:00:15.980 --> 01:00:19.400
It might be as simple
as restarting a server,

01:00:19.400 --> 01:00:25.040
and it might be running a script that
might fix the problem all on its own.

01:00:25.120 --> 01:00:27.360
It may even be you don't
have to do anything,

01:00:27.440 --> 01:00:29.460
depending on the nature of the alert.

01:00:29.510 --> 01:00:31.830
It's just a disk percentage full warning.

01:00:31.830 --> 01:00:35.150
It may be at this point where you
don't have to do anything yet.

01:00:35.150 --> 01:00:37.490
It's just good information to know.

01:00:38.200 --> 01:00:40.800
It's important to set up a monitoring
system that will look at all the aspects

01:00:40.830 --> 01:00:44.080
of what's going on in your data center,
and depending on each of

01:00:44.080 --> 01:00:48.220
those different aspects,
react accordingly with different

01:00:48.220 --> 01:00:51.880
types of alerts that should generate
from you and your operations

01:00:51.980 --> 01:00:53.980
people different types of actions.

01:00:57.030 --> 01:01:01.220
So to summarize where we are,
just to talk about things that

01:01:01.220 --> 01:01:04.700
make a difference to us when
running MySQL in our data center,

01:01:04.700 --> 01:01:08.290
make hardware choices that
make sense for your need.

01:01:08.360 --> 01:01:11.510
I showed you the process we went through
when we looked at our disk needs for

01:01:11.510 --> 01:01:14.960
our XSERVs and whether we should have
it all on RAID or do different things.

01:01:14.960 --> 01:01:17.720
That's good for us.

01:01:17.720 --> 01:01:19.480
What's good for us may
not be good for you.

01:01:19.480 --> 01:01:20.330
We recognize that.

01:01:20.370 --> 01:01:21.920
Hopefully you recognize that too.

01:01:21.920 --> 01:01:25.300
Our needs are what our needs are and
your needs are going to be different.

01:01:25.800 --> 01:01:26.820
So think about your needs.

01:01:26.970 --> 01:01:30.770
Don't just buy this if
that's all you need.

01:01:34.650 --> 01:01:36.260
Tune the database.

01:01:36.260 --> 01:01:37.400
I'm not going to spend any time on it.

01:01:37.490 --> 01:01:38.650
It's just basic.

01:01:38.870 --> 01:01:41.180
Every time you hear someone
speak about databases,

01:01:41.180 --> 01:01:44.640
they should be telling you to
set the memory and the indexes.

01:01:46.930 --> 01:01:49.180
Separate the admin and
the production tasks.

01:01:49.180 --> 01:01:51.410
If you're a high volume site,
you'll need to think

01:01:51.410 --> 01:01:52.920
seriously about doing this.

01:01:52.970 --> 01:01:54.920
Not everybody needs to.

01:01:55.080 --> 01:01:57.170
Made a huge difference to us.

01:01:57.430 --> 01:02:00.500
Depending on your size,
you might want to do this.

01:02:01.570 --> 01:02:03.460
And then go through that
process of monitoring.

01:02:03.500 --> 01:02:07.190
Test, alert, respond.

01:02:07.350 --> 01:02:10.620
You need to know what's happening
and if something that you don't

01:02:10.710 --> 01:02:12.920
want to be happening is happening,
you need to know about it and you

01:02:12.920 --> 01:02:14.000
need to do something about it.

01:02:14.060 --> 01:02:19.720
And the last bullet point here,
we didn't talk about a lot directly,

01:02:19.720 --> 01:02:21.910
but we did implicitly.

01:02:21.940 --> 01:02:24.040
And that is to automate things.

01:02:24.980 --> 01:02:27.710
We showed you how we automated
the script that deletes the logs

01:02:27.960 --> 01:02:29.510
from the production servers.

01:02:29.570 --> 01:02:31.780
That's a huge time saver.

01:02:31.780 --> 01:02:32.620
It runs every day.

01:02:32.620 --> 01:02:34.060
We never have to worry about it.

01:02:34.140 --> 01:02:35.500
And it just happens.

01:02:35.600 --> 01:02:38.960
I don't have to worry about the
disk running out of space on

01:02:38.960 --> 01:02:42.920
our production servers because
there's lots and lots of space.

01:02:42.920 --> 01:02:45.630
MySQL Admin has all the logs,
but it also has a great big

01:02:45.680 --> 01:02:47.200
XServe rate attached to it.

01:02:47.200 --> 01:02:50.280
And we have to watch that
because the logs are very,

01:02:50.280 --> 01:02:51.040
very big.

01:02:52.900 --> 01:02:56.120
We can also automate our responses
to some of the monitoring issues.

01:02:56.120 --> 01:02:57.560
In fact, we do.

01:02:57.560 --> 01:03:01.930
We have a monitoring test that looks
to see if replication is on or off.

01:03:01.930 --> 01:03:05.460
If it's off, the first thing it does is
activate a script which tells

01:03:05.580 --> 01:03:08.920
that particular MySQL server,
turn on your replication.

01:03:10.700 --> 01:03:14.350
and it repeats that three or four
times over a two-minute period.

01:03:14.350 --> 01:03:17.320
If after two minutes
replication is still off,

01:03:17.320 --> 01:03:20.940
then they'll trigger an alert which
will tell one of us because clearly

01:03:20.940 --> 01:03:24.120
it's something that's beyond just
replication stopped and it started

01:03:24.120 --> 01:03:25.400
again by the automatic system.

01:03:25.430 --> 01:03:30.500
So find different ways
to automate what you can.

01:03:31.150 --> 01:03:34.080
For more information, you can contact me,
Bruce.

01:03:34.080 --> 01:03:35.080
Bruce is my name.

01:03:35.080 --> 01:03:36.300
Liveworld is my company.

01:03:36.300 --> 01:03:39.700
My email address falls from that,
bruce at liveworld.com.

01:03:39.710 --> 01:03:42.370
Chris is going to come up
and talk a little bit more.

01:03:42.380 --> 01:03:47.440
Thank you very much.

01:03:47.440 --> 01:03:48.590
Thank you.

01:03:53.500 --> 01:03:54.490
Thank you very much.

01:03:54.490 --> 01:03:58.140
There's a lot of other resources that you
can find information on for all of this,

01:03:58.140 --> 01:04:00.920
including the WWDC 2005.