WEBVTT

00:00:00.440 --> 00:00:04.200
Welcome to Designing a Scripting
Interface for Mac OS X.

00:00:04.250 --> 00:00:09.150
I'd like to introduce Christopher Nebel,
Senior AppleScript Engineer.

00:00:09.400 --> 00:00:15.780
Thank you, Chris, for coming to talk to
you about this subject.

00:00:19.200 --> 00:00:23.320
All righty.

00:00:23.360 --> 00:00:27.430
Like John said, I'm Christopher Nebel,
AppleScript in Automator Engineering.

00:00:27.440 --> 00:00:30.680
Welcome to session 103,
Designing a Scripting Interface.

00:00:30.740 --> 00:00:32.100
If this is not the session
you plan to attend,

00:00:32.100 --> 00:00:33.520
now would be an excellent time to leave.

00:00:35.650 --> 00:00:39.700
Matt Dash for the Exit is finished.

00:00:39.700 --> 00:00:42.290
I should point out that this
session is actually one of a series.

00:00:42.410 --> 00:00:45.200
Today is designing a scripting interface.

00:00:45.290 --> 00:00:48.340
Tomorrow -- so when you're
done here go home and think

00:00:48.340 --> 00:00:49.960
about what you want to design.

00:00:49.970 --> 00:00:52.650
Come back tomorrow morning and
there's a session on implementing

00:00:52.650 --> 00:00:53.580
your scripting interface.

00:00:53.580 --> 00:00:56.810
You can make it do something aside
from just sit there and look pretty.

00:00:56.920 --> 00:00:59.900
And then if you still have
questions there's a lab later

00:00:59.900 --> 00:01:02.940
that same afternoon so we can
answer all your questions there.

00:01:02.940 --> 00:01:05.400
Now I'm going to have to apologize.

00:01:05.400 --> 00:01:07.710
I'm going to pull a bit of
a bait and switch on you.

00:01:07.720 --> 00:01:12.920
This is supposed to be a hands-on
session but because of some snafus which

00:01:12.960 --> 00:01:18.120
were at least partly my fault we don't
actually have the sample code here.

00:01:18.120 --> 00:01:19.620
So it's going to be
more of a guided tour.

00:01:19.620 --> 00:01:21.290
You get to kind of follow along.

00:01:21.380 --> 00:01:25.410
You might have a few extra questions
at the lab but there you go.

00:01:26.640 --> 00:01:29.200
"So, designing a scripting interface.

00:01:29.240 --> 00:01:32.520
What you'll learn, you know,
what the heck is a scripting interface,

00:01:32.560 --> 00:01:37.310
what should it look like,
and the hands-on, virtually speaking,

00:01:37.450 --> 00:01:41.770
how to actually write one,
how to write it down in sdef,

00:01:41.770 --> 00:01:43.550
which is the modern, you know,

00:01:43.830 --> 00:01:47.560
The file format for specifying
a scripting interface.

00:01:47.610 --> 00:01:49.860
That screenshot you can barely
read right there is what it

00:01:49.950 --> 00:01:51.300
actually looks like to a user.

00:01:51.300 --> 00:01:55.700
This is a screenshot of the
dictionary viewer in Tiger.

00:01:57.060 --> 00:02:00.700
So keep talking scripting interface,
scripting interface, scripting interface.

00:02:00.720 --> 00:02:01.600
Great.

00:02:01.600 --> 00:02:03.630
What's a scripting interface?

00:02:03.680 --> 00:02:06.140
So presumably everyone knows what
a graphical user interface is.

00:02:06.140 --> 00:02:09.940
It's all the windows and menus and
buttons and whatnot that a user

00:02:09.940 --> 00:02:13.550
with a mouse and a keyboard can push
to make your application do stuff.

00:02:13.770 --> 00:02:17.270
So a scripting interface is simply
the bits of your application that

00:02:17.270 --> 00:02:21.220
are exposed so a program can control
your application to make it do stuff.

00:02:21.350 --> 00:02:25.350
It's an API for your application.

00:02:25.570 --> 00:02:27.500
looked at it in a slightly different way.

00:02:27.500 --> 00:02:30.880
It's the objects and commands
that your application exposes

00:02:30.880 --> 00:02:33.580
to the rest of the world,
exposes to other programs

00:02:33.610 --> 00:02:35.090
so they can control you.

00:02:35.410 --> 00:02:38.770
If you look at it in
Model-View-Controller terms,

00:02:38.820 --> 00:02:41.300
Model-View-Controller is a
common Cocoa design pattern,

00:02:41.300 --> 00:02:43.300
originally came from
the small talk world.

00:02:43.300 --> 00:02:47.130
It's a way of segmenting your application
into the model layer which is sort of the

00:02:47.220 --> 00:02:50.300
things your application considers real,
the view which is presentation,

00:02:50.300 --> 00:02:52.300
and controller mediates between the two.

00:02:52.300 --> 00:02:54.280
It's simply another view
onto your model objects.

00:02:54.300 --> 00:02:58.580
Now, the interesting thing about a
scripting interface is that while

00:02:58.600 --> 00:03:03.290
the graphical view involves a lot of
abstraction and presentation logic,

00:03:03.290 --> 00:03:07.280
a scripting interface's view will
map very directly onto your model.

00:03:07.300 --> 00:03:10.300
It's a very, very thin translation layer.

00:03:11.280 --> 00:03:13.050
If you think of it in
implementation terms,

00:03:13.090 --> 00:03:16.500
a scripting interface is simply an sdef,
or something you derive from one.

00:03:16.520 --> 00:03:20.720
There are a couple older
scripting interface formats that

00:03:20.770 --> 00:03:22.950
you can derive from an sdef.

00:03:22.960 --> 00:03:27.180
Now you will notice that so far
I have not mentioned AppleScript.

00:03:27.180 --> 00:03:30.950
That is because scripting interfaces
are not merely useful for AppleScript.

00:03:30.960 --> 00:03:32.700
They can be used by other
scripting languages,

00:03:32.700 --> 00:03:35.960
they can be used by other applications,
they can be used by Automator actions.

00:03:35.960 --> 00:03:41.000
So if you are not real
keen on AppleScript,

00:03:41.000 --> 00:03:43.000
we don't care.

00:03:43.000 --> 00:03:43.000
It has lots of other purposes besides.

00:03:43.230 --> 00:03:46.800
Speaking of which, why would you want one
of these things anyway?

00:03:46.990 --> 00:03:49.100
Well, we've built up a number
of reasons over the years.

00:03:49.100 --> 00:03:52.900
Obviously, the first and foremost is so
people can build automated

00:03:52.930 --> 00:03:55.670
workflows using your application.

00:03:55.710 --> 00:03:58.500
Put together a long task,
they can push one button and

00:03:58.500 --> 00:04:00.100
get a whole bunch of stuff done.

00:04:00.100 --> 00:04:02.760
You can use it yourself, in-house.

00:04:02.840 --> 00:04:07.220
You can use your scripting
interface to test your model harder,

00:04:07.300 --> 00:04:11.320
faster, and more repeatedly than you ever
could using graphical interface.

00:04:11.440 --> 00:04:14.490
You can use it to interoperate
with other applications.

00:04:14.570 --> 00:04:17.300
I mentioned that other applications
can use your Scripting Interface.

00:04:17.370 --> 00:04:20.400
Mail and iPhoto have this
kind of relationship.

00:04:20.640 --> 00:04:24.750
That iPhoto can take photos out of
mail messages and put them into iPhoto

00:04:24.780 --> 00:04:27.400
using iPhoto's Scripting Interface.

00:04:27.400 --> 00:04:32.900
And iPhoto uses Mail's Scripting
Interface to send photos to people.

00:04:33.890 --> 00:04:36.850
You can use it to save
yourself some work,

00:04:36.850 --> 00:04:37.800
frankly.

00:04:37.800 --> 00:04:39.040
Not add so many features.

00:04:39.040 --> 00:04:43.390
Everybody's got one raving, lunatic user,
actually usually more than one,

00:04:43.580 --> 00:04:46.090
who just has to have this
one feature that's like,

00:04:46.090 --> 00:04:48.670
well,
but you're the only person who cares.

00:04:48.680 --> 00:04:51.200
So, well,
if you have a scripting interface,

00:04:51.200 --> 00:04:54.190
you can quite often write this
guy a script or get someone

00:04:54.190 --> 00:04:57.050
else to write it for him,
or he can do it himself.

00:04:57.050 --> 00:04:58.180
And now he's got his feature.

00:04:58.220 --> 00:04:58.790
He's happy.

00:04:58.790 --> 00:05:01.080
And you didn't have to
write a new feature for him.

00:05:02.680 --> 00:05:03.860
Now,
if suddenly you find a whole bunch of

00:05:03.880 --> 00:05:06.030
users all raving for the same thing,
well, congratulations.

00:05:06.070 --> 00:05:08.590
You've just identified a
new feature for yourself.

00:05:08.590 --> 00:05:11.720
And you've got your
users to do it for you.

00:05:13.810 --> 00:05:16.030
And finally,
you can make your application quite

00:05:16.130 --> 00:05:18.330
literally indispensable to your users.

00:05:18.400 --> 00:05:19.680
Remember those automated workflows?

00:05:19.790 --> 00:05:22.700
Once somebody has one,
and the larger the better,

00:05:22.800 --> 00:05:24.380
and they've got it working,
they don't want to give it up.

00:05:24.400 --> 00:05:32.000
Your application is now an
integral part of their job,

00:05:32.000 --> 00:05:32.000
and they're going to really,
really resist switching away from it.

00:05:32.940 --> 00:05:35.300
And finally, in Tiger,
we've got one more reason,

00:05:35.300 --> 00:05:38.580
which is that a Scripting Interface
is really the best way to tie

00:05:38.640 --> 00:05:41.090
your application into Automator.

00:05:41.400 --> 00:05:46.260
Writing a scripting interface for
your application is a lot easier

00:05:46.260 --> 00:05:53.300
in almost all cases than writing a
linkable C API to your application.

00:05:55.440 --> 00:05:59.020
So now you know why,
let's talk a little bit about how.

00:05:59.210 --> 00:06:01.440
There are,
despite the fact that this is API,

00:06:01.440 --> 00:06:04.040
you know, it's code, people think, oh,
you know, it's code, whatever,

00:06:04.040 --> 00:06:05.280
there are no standards for that.

00:06:05.320 --> 00:06:06.850
Well, think again.

00:06:06.870 --> 00:06:10.270
There really are design
standards for these things.

00:06:11.770 --> 00:06:13.330
Let's talk about some of them now.

00:06:13.400 --> 00:06:16.040
The first one, the biggest one,
is know your model.

00:06:16.040 --> 00:06:18.310
That's model in model
view controller terms.

00:06:18.310 --> 00:06:21.580
Scriptability is really all defined
in terms of model scripting,

00:06:21.580 --> 00:06:22.670
not view scripting.

00:06:22.670 --> 00:06:24.590
People make this mistake sometimes.

00:06:24.590 --> 00:06:27.060
They think, oh,
obviously you just click menus,

00:06:27.060 --> 00:06:27.920
you do buttons.

00:06:27.920 --> 00:06:31.920
You imitate the things that you do
in the graphical user interface.

00:06:33.020 --> 00:06:34.910
And they say, well, why wouldn't you?

00:06:34.960 --> 00:06:37.020
Because then I don't have to do anything.

00:06:37.020 --> 00:06:39.780
Well, that's true, but the end result
doesn't work very well.

00:06:39.910 --> 00:06:42.670
View scripts are rather
difficult to write,

00:06:42.680 --> 00:06:43.690
and they're very difficult to read.

00:06:43.690 --> 00:06:45.440
They're also just kind of brittle.

00:06:45.440 --> 00:06:47.660
People rearrange their
views all the time,

00:06:47.660 --> 00:06:49.140
move menu commands around and whatnot.

00:06:49.140 --> 00:06:51.700
And as soon as you do that,
all your view scripts break.

00:06:51.700 --> 00:06:53.980
The model tends to be a bit more stable.

00:06:53.980 --> 00:06:57.110
What your application does
is relatively constant.

00:06:57.110 --> 00:06:59.850
So model scripts will
stay working longer.

00:06:59.860 --> 00:07:03.000
And the other thing is that Automator
and AppleScript are both very,

00:07:03.000 --> 00:07:03.000
very different.

00:07:03.020 --> 00:07:06.060
They're both based
around model scripting.

00:07:06.080 --> 00:07:07.520
There are a number of features
in AppleScript that really

00:07:07.520 --> 00:07:09.720
don't work very well if you
don't have objects to talk to.

00:07:09.910 --> 00:07:13.260
And Automator itself is based on the
notion of application objects flowing

00:07:13.300 --> 00:07:15.080
from action to action to action.

00:07:15.270 --> 00:07:18.130
Well, you can't really do that
if you don't have any.

00:07:18.450 --> 00:07:21.600
So, a little example here.

00:07:21.680 --> 00:07:23.870
So at the top we have--these
are two scripts that

00:07:23.870 --> 00:07:25.760
essentially do the same thing.

00:07:25.760 --> 00:07:27.800
The top one uses view scripting.

00:07:28.200 --> 00:07:30.600
So, quick, what does a script do?

00:07:30.600 --> 00:07:32.870
Well,
you really don't have much of an idea.

00:07:32.900 --> 00:07:36.780
It's like, okay, select something,
type something, select a menu item,

00:07:36.780 --> 00:07:37.500
and okay.

00:07:37.500 --> 00:07:40.490
And obviously if this menu
item moves somewhere else,

00:07:40.490 --> 00:07:42.300
then okay, we're in trouble.

00:07:42.300 --> 00:07:46.110
The bottom one is the
model scripting version.

00:07:46.140 --> 00:07:50.180
It's set the myCard property
and address book to me,

00:07:50.180 --> 00:07:51.900
person Chris Nebel.

00:07:51.960 --> 00:07:53.500
That's myCard.

00:07:55.100 --> 00:07:57.200
So it's a lot more,
obviously a lot simpler

00:07:57.210 --> 00:07:59.580
to read and write.

00:08:00.240 --> 00:08:01.610
Next up, know your users.

00:08:01.650 --> 00:08:03.700
This has two different aspects to it.

00:08:03.750 --> 00:08:07.150
The first is that your scripting
interface is -- you should think

00:08:07.190 --> 00:08:09.890
of it in terms of talking to users,
not your fellow

00:08:09.890 --> 00:08:11.680
implementers down the hall.

00:08:11.680 --> 00:08:15.520
So any object or command that shows
up in your scripting interface,

00:08:15.520 --> 00:08:18.350
its purpose should be
immediately apparent to any

00:08:18.370 --> 00:08:20.400
normal user of your application.

00:08:20.400 --> 00:08:22.080
They should know what it is.

00:08:22.080 --> 00:08:25.250
Ideally, you know,
the terms in your documentation in

00:08:25.250 --> 00:08:26.560
your graphical user interface and your
scripting interface should all match.

00:08:27.120 --> 00:08:30.760
So avoid any internal only
implementation objects.

00:08:30.760 --> 00:08:33.680
To the extent that your implementation
objects are your model objects,

00:08:33.700 --> 00:08:34.600
then that's fine.

00:08:34.600 --> 00:08:36.000
Go ahead and use them.

00:08:36.000 --> 00:08:41.320
But if you have a model concept
that's actually represented by

00:08:41.320 --> 00:08:46.550
two or three different classes,
then don't reveal those two

00:08:46.550 --> 00:08:48.430
or three different classes.

00:08:48.430 --> 00:08:48.430
Make a facade that just shows
the one model object that

00:08:48.430 --> 00:08:48.430
users will actually recognize.

00:08:48.720 --> 00:08:52.490
The other aspect to know your users
is simply know what they care about.

00:08:52.620 --> 00:08:55.390
Some applications are very large.

00:08:55.390 --> 00:08:57.890
You've got a humongous
application you look at and say,

00:08:57.890 --> 00:09:01.600
"Oh my God, making this thing completely
scriptable would just take forever.

00:09:01.600 --> 00:09:04.440
We're not going to do any of it."
Right identification of the problem,

00:09:04.440 --> 00:09:05.200
wrong solution.

00:09:05.200 --> 00:09:09.050
What you do is you know your users,
you find out what's

00:09:09.050 --> 00:09:13.600
most important to them,
make those things scriptable first,

00:09:13.600 --> 00:09:15.790
stage the rest, some things you might be
able to put off forever.

00:09:20.470 --> 00:09:24.640
So this is an example
of the first aspect.

00:09:24.640 --> 00:09:27.990
So at the top we have a bit
of the iTunes dictionary.

00:09:28.000 --> 00:09:32.880
This is the top-level application object,
which contains everything, eventually,

00:09:32.880 --> 00:09:34.470
that iTunes knows about.

00:09:35.690 --> 00:09:36.960
And looking through the
various sub-elements,

00:09:36.960 --> 00:09:38.700
I can see that I recognize
most of these things.

00:09:38.700 --> 00:09:40.940
There are various kinds of windows,
encoders.

00:09:40.940 --> 00:09:43.060
The fact that there's
apparently an arbitrary number

00:09:43.140 --> 00:09:45.180
of EQ windows is a little odd,
because I happen to know

00:09:45.180 --> 00:09:46.410
there's only one of them.

00:09:46.420 --> 00:09:48.780
But there's this one called Sources.

00:09:48.780 --> 00:09:52.290
And this one's kind of weird,
because the word Source appears

00:09:52.290 --> 00:09:54.970
in exactly one place in
the iTunes interface.

00:09:54.990 --> 00:09:57.900
It's at the top of that left-hand column.

00:09:57.900 --> 00:10:01.130
And the things that the scripting
interface tells me are sources do not

00:10:01.250 --> 00:10:03.030
really match what's in that column.

00:10:03.050 --> 00:10:04.510
This is just kind of funky.

00:10:06.750 --> 00:10:09.450
A more sensible version is down below.

00:10:09.460 --> 00:10:14.440
This is iPhoto, which very sensibly says,
"I contain albums, keywords, photos,

00:10:14.510 --> 00:10:15.300
windows.

00:10:15.300 --> 00:10:17.520
I know what all these things
are if I'm a normal iPhoto user.

00:10:17.570 --> 00:10:21.580
No problems." And they all have the
obvious relationships to each other,

00:10:21.580 --> 00:10:21.990
too.

00:10:24.200 --> 00:10:25.800
Third thing, be object-oriented.

00:10:25.800 --> 00:10:27.770
This might seem a little
obvious now in 2005,

00:10:27.770 --> 00:10:29.490
but people still make this mistake.

00:10:29.670 --> 00:10:32.830
Your scripting interface should
really be organized around -- well,

00:10:32.870 --> 00:10:35.320
first off, you should have some objects
to organize things around.

00:10:35.320 --> 00:10:40.560
And, second, the objects are the focus,
not the commands in most cases.

00:10:40.610 --> 00:10:41.940
This has a number of interesting effects.

00:10:41.940 --> 00:10:46.070
One, it's generally easier to understand
because most applications are

00:10:46.070 --> 00:10:48.380
really organized around the
objects in the first place.

00:10:48.410 --> 00:10:49.680
Those are the things that
are really important.

00:10:49.680 --> 00:10:52.660
You have objects, you operate on them.

00:10:52.660 --> 00:10:55.020
The other thing is that it gives
you a smaller and simpler interface

00:10:55.030 --> 00:10:57.950
that's still just as powerful because
you get this multiplicative effect.

00:10:58.020 --> 00:11:02.780
You have objects times verbs where
to do it with just verbs you need

00:11:02.780 --> 00:11:06.050
to list all 300 of them separately.

00:11:06.500 --> 00:11:08.600
And the last thing is that
you can exploit features of

00:11:08.600 --> 00:11:10.800
certain scripting languages,
notably AppleScript.

00:11:10.800 --> 00:11:13.170
Like I said earlier,
they don't work real well

00:11:13.220 --> 00:11:14.820
without objects to talk to.

00:11:14.820 --> 00:11:17.480
Things like tell blocks
and whose clauses.

00:11:17.480 --> 00:11:20.200
These are very,
very powerful features of AppleScript.

00:11:20.200 --> 00:11:22.480
But again,
they don't work without objects.

00:11:24.760 --> 00:11:37.690
And the corollary to this is
you should only define new

00:11:37.690 --> 00:11:37.690
commands when you need to.

00:11:37.690 --> 00:11:37.690
There's a standard set of commands
to cover basic object operations:

00:11:37.690 --> 00:11:37.690
get, set, make, delete, add, remove.

00:11:38.280 --> 00:11:39.950
So use those where they make sense.

00:11:39.960 --> 00:11:41.750
If you have something that
genuinely doesn't fit in,

00:11:41.800 --> 00:11:44.570
for instance,
mail has a send command that has

00:11:44.580 --> 00:11:45.850
no relation to the standard set.

00:11:45.910 --> 00:11:48.000
So that one's fine.

00:11:48.000 --> 00:11:49.080
But use the standard set where you can.

00:11:49.080 --> 00:11:51.610
Some applications,
and in fact the one we'll be

00:11:51.610 --> 00:11:55.180
looking at is kind of like this,
really that's all they need.

00:11:55.220 --> 00:12:02.810
Their entire application is just based
around manipulating object properties,

00:12:02.810 --> 00:12:03.990
making and deleting them.

00:12:03.990 --> 00:12:03.990
That's really all they do.

00:12:05.330 --> 00:12:10.230
So an example here,
this top one comes from the old Mosaic

00:12:10.610 --> 00:12:14.800
browser suite years and years ago,
so I suppose they can be forgiven now.

00:12:14.820 --> 00:12:17.920
They defined a closeAllWindows command.

00:12:17.920 --> 00:12:19.650
It's perfectly obvious
what this thing does.

00:12:19.650 --> 00:12:20.660
It closes all the windows.

00:12:20.660 --> 00:12:25.060
But they didn't really need to do this,
because there's already a window object

00:12:25.060 --> 00:12:27.240
which responds to close messages.

00:12:27.240 --> 00:12:29.250
And what do you need
with closeAllWindows?

00:12:29.260 --> 00:12:32.360
The fact that you can close
all windows just falls out of

00:12:32.360 --> 00:12:34.610
normal object addressing syntax.

00:12:39.660 --> 00:12:45.680
"Thing 4: Don't re-invent stuff." Again,
this means reusing the standard stuff.

00:12:45.680 --> 00:12:47.100
You can steal stuff from yourself, too.

00:12:47.100 --> 00:12:49.260
If you've got two objects that
are mostly like each other,

00:12:49.330 --> 00:12:50.560
hey, you can use inheritance.

00:12:50.570 --> 00:12:51.550
Everybody knows what inheritance is.

00:12:51.590 --> 00:12:55.560
Feel free to go ahead and
define abstract base classes.

00:12:55.710 --> 00:13:01.800
That's a case where things that the user
doesn't see directly is actually okay.

00:13:02.310 --> 00:13:04.540
The other part is, you know,
steal stuff from others.

00:13:04.670 --> 00:13:06.510
Imitate similar applications.

00:13:06.670 --> 00:13:09.690
Take a look at other applications
that do roughly what you do and

00:13:09.810 --> 00:13:13.200
look at borrowing their model
terms and how they organize things.

00:13:13.200 --> 00:13:15.150
So, you know,
you're doing text processing,

00:13:15.150 --> 00:13:17.120
take a look at text edit,
you're doing personal

00:13:17.120 --> 00:13:18.390
information management.

00:13:18.910 --> 00:13:23.980
Look at address book.

00:13:23.980 --> 00:13:23.980
And so on.

00:13:28.230 --> 00:13:30.800
Okay,
so to sum this all up into a checklist,

00:13:30.800 --> 00:13:33.030
I've been talking a bunch about
different design principles.

00:13:33.090 --> 00:13:37.500
These are all written down along with
a lot of other more detailed stuff.

00:13:37.510 --> 00:13:40.880
In Tech Note 2106,
Scripting Interface Guidelines,

00:13:40.880 --> 00:13:42.340
write that number down.

00:13:43.810 --> 00:14:01.240
The next thing you're going to need to do
is actually think about your application.

00:14:01.240 --> 00:14:06.250
You need to identify what
are your model objects,

00:14:06.250 --> 00:14:06.350
what are their attributes,
how do they relate to each other.

00:14:06.560 --> 00:14:08.500
Who contains what?

00:14:08.500 --> 00:14:11.710
You identify your unique operations,
the ones that don't fit

00:14:11.840 --> 00:14:16.080
into the standard suite,
and then go ahead and design

00:14:16.120 --> 00:14:19.140
your entire scripting interface.

00:14:19.200 --> 00:14:20.030
I mean all of it.

00:14:20.180 --> 00:14:22.080
Ideally you should do this
before you even write any code.

00:14:22.080 --> 00:14:24.800
It actually helps in writing the code.

00:14:25.120 --> 00:14:29.820
If you need to, phase the implementation.

00:14:30.030 --> 00:14:33.000
If you've got a large enough application,
you don't have to do it all at once.

00:14:33.000 --> 00:14:36.930
It's perfectly okay to do less
than your graphical user interface.

00:14:37.030 --> 00:14:39.350
A funny thing here is that
it's also okay to do more than

00:14:39.350 --> 00:14:40.980
your graphical user interface.

00:14:41.080 --> 00:14:45.420
Scripting is actually a really good
way to expose functionality that for

00:14:45.420 --> 00:14:49.000
some reason you don't want to put in
your graphical user interface yet.

00:14:49.000 --> 00:14:53.000
You don't have the time,
you're trying to keep things simple.

00:14:53.000 --> 00:14:54.990
The scripting interface can be
a bit of a backdoor to this.

00:14:54.990 --> 00:14:58.210
For instance,
Address Book added scripting

00:14:58.210 --> 00:15:01.980
interface fields for,
what was it, nickname and prefix,

00:15:02.010 --> 00:15:04.720
I believe it was,
one release before they added any

00:15:04.780 --> 00:15:06.980
graphical user interface for them.

00:15:07.880 --> 00:15:10.800
Last step, write it all down in sdef.

00:15:10.800 --> 00:15:14.000
That's what the guided tour is all about.

00:15:14.520 --> 00:15:18.270
And follow the guidelines.

00:15:18.360 --> 00:15:20.330
Consistency is power.

00:15:20.390 --> 00:15:23.870
A big part of the Macintosh graphical
interface and why it was so powerful,

00:15:23.870 --> 00:15:26.590
or why it is so powerful,
isn't just that it's graphical,

00:15:26.590 --> 00:15:29.120
isn't just that people can, you know,
it's C and point instead

00:15:29.120 --> 00:15:30.130
of remember and type.

00:15:30.260 --> 00:15:32.000
It's that it's consistent.

00:15:32.140 --> 00:15:34.640
Things that you learn in one
application work in another.

00:15:34.640 --> 00:15:35.840
Things that look the same work the same.

00:15:35.840 --> 00:15:38.100
Things that work the same look the same.

00:15:38.210 --> 00:15:40.820
The same consistency is equally powerful,
if not more so,

00:15:40.820 --> 00:15:45.660
in scripting tasks because
the whole point is to be tying

00:15:45.660 --> 00:15:46.960
different applications together.

00:15:46.960 --> 00:15:50.170
You'd like them to behave
as consistently as possible.

00:15:50.560 --> 00:15:52.840
In fact,
probably the primary complaint of

00:15:52.840 --> 00:15:56.320
just about any scripting user about
any scriptable application these

00:15:56.320 --> 00:15:59.140
days is that it doesn't work like
any other scriptable application,

00:15:59.140 --> 00:16:01.380
or at least has some oddities to it.

00:16:01.400 --> 00:16:03.600
So please, follow the guidelines.

00:16:03.600 --> 00:16:06.560
If there are parts of the
guidelines you find incomplete,

00:16:06.590 --> 00:16:07.120
ask us.

00:16:11.070 --> 00:16:14.240
Okay,
so now we'll move on to the guided tour.

00:16:14.240 --> 00:16:16.720
Obviously, I didn't fix my slides.

00:16:16.720 --> 00:16:19.600
So we'll see, you know,
adding a basic sdef to the application.

00:16:19.600 --> 00:16:21.000
We've got a skeleton one we start from.

00:16:21.000 --> 00:16:22.290
We can include all the standard stuff.

00:16:22.290 --> 00:16:25.770
We're going to define a couple
of application-specific classes,

00:16:25.770 --> 00:16:29.610
show an inheritance relationship,
adding a property, hook up an element

00:16:29.640 --> 00:16:31.520
relationship between the two.

00:16:33.100 --> 00:16:36.520
We're going to add a couple of commands,
and finally we'll look at a

00:16:36.520 --> 00:16:39.440
little shortcut if you've actually
done some of this work already,

00:16:39.440 --> 00:16:40.940
but not necessarily in an sdef.

00:16:40.940 --> 00:16:46.940
And tomorrow morning we will be
implementing most of the same stuff.

00:16:46.940 --> 00:16:50.930
Right now we're just going
to do the interface part.

00:16:52.610 --> 00:16:56.090
If I could switch over to demo one,
please.

00:16:56.120 --> 00:16:57.680
Thank you.

00:17:00.000 --> 00:17:03.790
So for this example,
we are going to be using Sketch,

00:17:03.850 --> 00:17:07.130
a venerable Cocoa sample.

00:17:07.270 --> 00:17:10.320
If you need to get it yourself,
it's in the standard developer examples.

00:17:10.390 --> 00:17:13.870
Developer, examples, app kit, sketch.

00:17:14.250 --> 00:17:15.600
For those of you who
haven't seen it before,

00:17:15.620 --> 00:17:18.390
it's a simple drawing program.

00:17:21.100 --> 00:17:28.000
[Transcript missing]

00:17:30.000 --> 00:17:32.830
"I'm going to slap various
colors on things." You know,

00:17:33.490 --> 00:17:34.310
standard stuff.

00:17:34.340 --> 00:17:39.760
It's really there more to be a sample
of Cocoa Document application than

00:17:39.760 --> 00:17:42.470
to really be a great artist tool.

00:17:44.360 --> 00:17:46.070
So we're going to add,
we're going to make

00:17:46.080 --> 00:17:47.300
this thing scriptable.

00:17:47.300 --> 00:17:53.510
So I'm going to have the
Sketch project open here already.

00:18:05.780 --> 00:18:08.660
So the first thing we're
going to do is add the,

00:18:08.700 --> 00:18:10.120
kind of a skeleton sdef.

00:18:10.200 --> 00:18:12.840
This contains all the standard stuff,
and this is the thing that I was

00:18:12.840 --> 00:18:17.090
supposed to have on the server for you,
but don't.

00:18:17.130 --> 00:18:20.360
This should be available on
the attendee website by the

00:18:20.360 --> 00:18:22.270
time the conference is over.

00:18:22.340 --> 00:18:25.000
Failing that,
we'll have copies at the lab tomorrow,

00:18:25.000 --> 00:18:27.460
so come grab one then if you want.

00:18:28.750 --> 00:18:34.550
And the main thing is just
sticking in the Resources group.

00:18:37.300 --> 00:18:41.690
"And that's that.

00:18:41.770 --> 00:18:43.820
So let's have a look at this."

00:18:52.320 --> 00:18:55.490
So an sdef is simply an XML document.

00:18:55.500 --> 00:18:57.200
It is not a plist, mind you.

00:18:57.200 --> 00:18:59.430
It has its own structure.

00:18:59.880 --> 00:19:06.070
"Your plist editing tools
will not work on this."

00:19:07.650 --> 00:19:11.200
We're actually going to be doing
all of this hardcore by hand.

00:19:11.200 --> 00:19:14.510
There are third-party applications
out there to edit these things

00:19:14.600 --> 00:19:15.980
in a more graphical form.

00:19:16.950 --> 00:19:21.040
The other thing we're going to need
to do first is tell the runtime

00:19:21.040 --> 00:19:24.150
that this thing actually exists.

00:19:24.480 --> 00:19:30.030
We're going to do that by adding
an extra key to our plist.

00:19:34.470 --> 00:19:46.040
OSAScriptingDefinition
= a string sketch.sdef.

00:19:46.040 --> 00:19:46.040
So this is simply-- oh, I forgot.

00:19:46.040 --> 00:19:46.040
Didn't I?

00:19:46.040 --> 00:19:46.040
I need to rename this bad boy.

00:19:51.190 --> 00:19:53.600
Okay, there we go.

00:19:53.600 --> 00:19:54.970
So now the InfoP list is hooked up.

00:19:55.030 --> 00:19:57.090
This actually triggers the
runtime machinery to read the

00:19:57.100 --> 00:19:59.990
thing and make it actually work.

00:20:06.190 --> 00:20:08.290
So now that we've got the standard suite,
like I said,

00:20:08.300 --> 00:20:10.900
this defines all the standard verbs.

00:20:10.900 --> 00:20:15.500
But not everything in here will
actually apply to all applications.

00:20:15.680 --> 00:20:19.050
For instance, if your application,
you know, you've got some tiny little

00:20:19.050 --> 00:20:21.100
control panel-ish thing,
doesn't really print anything,

00:20:21.100 --> 00:20:22.590
you should remove the print verb.

00:20:22.640 --> 00:20:25.890
Everything that shows up in here
will be reflected in your dictionary,

00:20:25.890 --> 00:20:28.600
so remove all the bits that
don't actually apply to you.

00:20:28.600 --> 00:20:33.830
In this case, there's really only one
that we need to get rid of,

00:20:33.830 --> 00:20:39.250
the as parameter for save,
because Sketch only has one file format

00:20:39.430 --> 00:20:43.820
that it can ever save anything in,
so the as would be fairly pointless.

00:20:45.160 --> 00:20:47.500
So that's zapped.

00:20:47.530 --> 00:20:50.980
The other thing we'll
need to change in here

00:20:52.280 --> 00:20:55.700
One of the things about an sdef
is that it contains not merely

00:20:55.700 --> 00:21:00.100
the interface information,
it also contains some implementation

00:21:00.100 --> 00:21:04.090
information about how these
interface classes hook to your

00:21:04.090 --> 00:21:06.530
actual implementation classes.

00:21:09.300 --> 00:21:11.710
So one of those things is, well,
what's the actual backing

00:21:11.710 --> 00:21:15.820
implementation class for,
say, a document?

00:21:15.820 --> 00:21:19.600
We actually do define
our own document class.

00:21:19.800 --> 00:21:22.800
So change that NS to SKT.

00:21:22.800 --> 00:21:26.900
Draw a document.

00:21:30.770 --> 00:21:32.700
Okay, so that's all the standard stuff.

00:21:32.700 --> 00:21:40.730
So the next thing we're going to
do is add what's called a suite

00:21:41.090 --> 00:21:44.340
for all of our sketch stuff,
the application-specific stuff.

00:21:44.340 --> 00:21:47.140
Now, you might well ask,
"What's a suite?" Suites are just

00:21:47.470 --> 00:21:51.330
organizational blocks to hold
related classes and commands.

00:21:51.340 --> 00:21:54.340
There's no particular
technical reason to have them.

00:21:54.340 --> 00:21:57.340
They're really just for the user's
benefit to help them find things.

00:21:57.460 --> 00:21:59.860
So there's no technical limit,
upper or lower,

00:21:59.860 --> 00:22:02.570
on how many things you can
have in a single suite.

00:22:03.110 --> 00:22:04.740
It's simply a matter of taste.

00:22:04.740 --> 00:22:08.820
Order things in a way
you think makes sense.

00:22:12.100 --> 00:22:18.460
So it's traditional to have at least
one suite for your application.

00:22:18.460 --> 00:22:19.360
So we can add that now.

00:22:19.520 --> 00:22:22.830
And it's fairly straightforward,
a suite element.

00:22:22.870 --> 00:22:24.950
You give it a name, Sketch Suite.

00:22:25.010 --> 00:22:27.840
Everything in a Scripting
Interface will have a four,

00:22:27.840 --> 00:22:31.330
or in some cases,
eight character code associated with it.

00:22:31.510 --> 00:22:34.130
This has mostly to do with
how AppleScript works,

00:22:34.200 --> 00:22:37.080
and it's kind of a historical
architecture thing.

00:22:37.080 --> 00:22:40.020
And you can add a simple
description along with it.

00:22:40.020 --> 00:22:42.100
The description is optional.

00:22:45.880 --> 00:22:48.790
Okay, so we have a perfectly
reasonable skeleton here.

00:22:48.810 --> 00:22:49.800
Save that.

00:22:49.800 --> 00:22:52.480
And, well,
what are we going to do with this now?

00:22:52.490 --> 00:22:53.130
What are we going to add?

00:22:53.140 --> 00:22:55.980
Now, ideally,
you should be designing your scripting

00:22:56.010 --> 00:22:57.810
even before you write any code.

00:22:57.820 --> 00:23:00.950
It actually helps a lot to design
your model and make sure it

00:23:00.950 --> 00:23:03.810
actually makes sense and generally
plot out your implementation

00:23:03.810 --> 00:23:05.170
before you do these things.

00:23:05.180 --> 00:23:06.800
Now, that's ideally, of course.

00:23:07.040 --> 00:23:09.110
Practically speaking,
you're probably working on

00:23:09.110 --> 00:23:10.370
an existing application.

00:23:10.370 --> 00:23:12.340
You're retrofitting scripting into it.

00:23:14.180 --> 00:23:18.310
So you have to actually analyze
your existing model classes.

00:23:18.660 --> 00:23:21.650
Now, a well-designed implementation
will actually align quite nicely

00:23:21.650 --> 00:23:23.100
with your scripting interface.

00:23:23.100 --> 00:23:24.280
There'll be a one-to-one match.

00:23:24.300 --> 00:23:26.790
This, you know, doesn't always happen,
but...

00:23:29.130 --> 00:23:32.190
So we're going to pretend
that I'm the new guy who's

00:23:32.190 --> 00:23:33.470
just been assigned this task.

00:23:33.470 --> 00:23:37.310
I have to figure out the bloody
thing in the first place.

00:23:37.570 --> 00:23:39.640
So we're going to take a
bit of a shortcut here.

00:23:39.640 --> 00:23:45.870
We're going to use the
xDesign modeling tools.

00:23:45.950 --> 00:23:46.710
Get us a little model.

00:23:46.890 --> 00:23:51.760
Helpfully, they've already separated the
model classes into their own group.

00:23:51.760 --> 00:23:53.880
So click Model.

00:23:57.500 --> 00:24:05.300
[Transcript missing]

00:24:05.420 --> 00:24:07.300
Okay, this is probably kind
of hard for you to read,

00:24:07.300 --> 00:24:09.220
but there are three big
clusters here that you can see.

00:24:09.330 --> 00:24:12.960
There's this one, which is NSView and
an SKT rendering view.

00:24:12.960 --> 00:24:16.780
This is internal implementation.

00:24:16.810 --> 00:24:21.840
A user will not know what this is,
so we don't care about this.

00:24:22.340 --> 00:24:28.320
Over here, we have NSDocument
descends SKTDrawDocument,

00:24:28.320 --> 00:24:30.280
and then there's a
category sticking on here.

00:24:30.370 --> 00:24:39.020
And we'll notice that SKTDrawDocument
contains--it has a graphics attribute.

00:24:40.120 --> 00:24:41.150
Over here is the big cluster.

00:24:41.160 --> 00:24:43.750
This is the really interesting one.

00:24:43.850 --> 00:24:46.480
An SKT graphic,
which is sort of the generic shape,

00:24:46.480 --> 00:24:49.100
and then there are all these
specific ones hanging off it:

00:24:49.110 --> 00:24:51.600
image, text area, line, circle,
rectangle.

00:24:51.740 --> 00:24:57.590
A graphic defines pretty
much all the properties of

00:24:57.810 --> 00:25:09.700
There are also some implementation
properties that we won't reveal,

00:25:09.700 --> 00:25:12.570
things like a back
pointer to the document,

00:25:12.570 --> 00:25:17.280
G flags, a ridge bounds,
which I presume has

00:25:17.280 --> 00:25:22.250
something to do with undo.

00:25:22.280 --> 00:25:25.210
This cluster here is obviously
a good place to start.

00:25:26.900 --> 00:25:32.300
[Transcript missing]

00:25:32.630 --> 00:25:36.990
So our first thing will be
to add the Graphic class,

00:25:36.990 --> 00:25:41.710
because that's the common
ancestor for all the shapes.

00:25:46.240 --> 00:25:49.530
So again, it follows a reasonably
familiar structure:

00:25:49.570 --> 00:25:51.510
class, name equals graphic.

00:25:51.620 --> 00:25:54.610
The name is always the name
that the user is going to see.

00:25:54.750 --> 00:25:58.510
Again, the optional description
and the four-character code.

00:26:01.510 --> 00:26:06.590
Inside that, we have this line,
a Cocoa element,

00:26:06.600 --> 00:26:10.990
which specifies the implementation
class that represents a graphic.

00:26:11.180 --> 00:26:13.840
And then a variety of properties.

00:26:13.880 --> 00:26:17.850
Now notice that these do not map exactly
to the implementation properties.

00:26:17.880 --> 00:26:21.590
For instance, in the original there was
simply a bounds field,

00:26:21.600 --> 00:26:23.590
which was a rectangle.

00:26:23.670 --> 00:26:26.710
Here it's been split out into
four different properties:

00:26:26.710 --> 00:26:29.590
an x position, y position, width,
and height.

00:26:30.300 --> 00:27:08.500
[Transcript missing]

00:27:13.330 --> 00:27:15.200
So now we've got a Graphic class.

00:27:15.340 --> 00:27:19.180
We need to actually hook
it into our document.

00:27:19.180 --> 00:27:23.180
So we saw earlier that
documents contain graphics.

00:27:26.240 --> 00:27:30.920
So to do that,
we should just add an element element.

00:27:31.190 --> 00:27:35.220
So in the document class,
it says element type equals graphic.

00:27:37.110 --> 00:27:38.770
And again,
there's some key value coding magic

00:27:38.770 --> 00:27:40.140
going on behind the scenes here.

00:27:40.140 --> 00:27:43.520
It knows to call the graphics accessor.

00:27:46.530 --> 00:27:49.440
So now we've got our common base class.

00:27:49.440 --> 00:27:52.500
Let's add one of the specific ones.

00:27:52.500 --> 00:27:55.580
I'm going to go for the boxes.

00:27:57.990 --> 00:28:01.620
So this one is extremely simple
because it turns out that boxes don't

00:28:01.620 --> 00:28:04.010
define any of their own attributes.

00:28:04.110 --> 00:28:09.140
Everything they need they
inherit from the graphic class.

00:28:09.240 --> 00:28:13.140
So we simply have name equals box.

00:28:13.220 --> 00:28:15.700
You can define a plural
name if it doesn't match

00:28:15.700 --> 00:28:17.400
just tack an s onto the end.

00:28:17.400 --> 00:28:20.340
In this case, box is code.

00:28:20.480 --> 00:28:22.790
This is how you specify
inheritance in an sdef.

00:28:22.800 --> 00:28:26.520
You just say inherits equals and
then the name of another class

00:28:26.520 --> 00:28:27.900
somewhere else in your sdef.

00:28:28.000 --> 00:28:29.740
Order is incidentally irrelevant.

00:28:29.740 --> 00:28:31.800
There's no declare before use rule.

00:28:31.800 --> 00:28:35.460
It looks at the whole thing and
figures out all the linkages.

00:28:36.680 --> 00:28:37.480
and the Cocoa class.

00:28:37.640 --> 00:28:41.550
And like I said, this,
according to the existing sketch,

00:28:41.550 --> 00:28:42.410
is done.

00:28:42.570 --> 00:28:45.100
This is all we have for the Box class.

00:28:48.140 --> 00:28:49.930
Well, let's go into a little more detail.

00:28:50.140 --> 00:28:55.120
We decide that something might be
interesting to have via scripting

00:28:55.120 --> 00:28:56.380
is an orientation property.

00:28:56.380 --> 00:29:01.920
Is the box landscape size,
or is it portrait size, or is it square?

00:29:03.130 --> 00:29:07.230
So we can add that easily
enough with a property,

00:29:07.280 --> 00:29:11.100
again, name, code,
and now we have a type.

00:29:11.360 --> 00:29:14.680
And just, hmm, type, orientation,
that's new.

00:29:14.680 --> 00:29:16.470
Well,
that's because I haven't added it yet.

00:29:16.530 --> 00:29:19.950
Orientation is going to
be one of our own types.

00:29:22.230 --> 00:29:23.530
It's an enumerated type.

00:29:23.620 --> 00:29:27.550
This is one of the detailed
design rules I didn't mention.

00:29:27.550 --> 00:29:30.710
It's considered bad taste to
have a property which is simply

00:29:30.710 --> 00:29:34.100
a list of numbers where each
of the numbers means something.

00:29:34.100 --> 00:29:42.830
You should actually use an enumerator,
and then your different options can

00:29:42.830 --> 00:29:42.830
have real descriptive names so people
don't have to remember the numbers.

00:29:43.910 --> 00:29:47.470
So in this case,
our possible orientations are portrait,

00:29:47.470 --> 00:29:50.190
landscape, or square.

00:29:55.400 --> 00:29:57.130
And since this is merely
designing the interface,

00:29:57.140 --> 00:30:00.300
that's all we're going to do.

00:30:00.530 --> 00:30:03.300
Oh, I forgot one thing.

00:30:03.420 --> 00:30:07.010
Because we'd also like to
be able to ask about...

00:30:07.360 --> 00:30:10.800
"Not merely graphics of a document,
but also boxes of a document.

00:30:10.800 --> 00:30:16.770
We need to add that element
of relationship too."

00:30:19.200 --> 00:30:22.100
So again, here's the key value coding
override I was talking about.

00:30:22.100 --> 00:30:25.410
In the implementation,
boxes are actually called rectangles,

00:30:25.410 --> 00:30:28.090
so that's what the accessor
wound up being named.

00:30:28.090 --> 00:30:33.100
So we have to override that with, again,
one of these Cocoa elements.

00:30:33.100 --> 00:30:38.490
So that's it for our objects,
at least as far as

00:30:38.510 --> 00:30:41.490
we're going to do here.

00:30:44.790 --> 00:30:48.640
So now let's try for a command.

00:30:48.640 --> 00:30:52.450
Now, just about any graphics program
will have a rotate command.

00:30:52.500 --> 00:30:55.060
So let's try for that one.

00:31:03.670 --> 00:31:06.690
So again, the familiar name, code,
description.

00:31:06.720 --> 00:31:09.800
The code for verbs, again this is kind of
for historical reasons,

00:31:09.800 --> 00:31:11.320
is eight characters, not four.

00:31:11.490 --> 00:31:13.710
But aside from that,
it's the same pattern.

00:31:16.340 --> 00:31:18.880
The things for a command
are a little different,

00:31:18.910 --> 00:31:19.660
naturally.

00:31:19.660 --> 00:31:22.920
A command has what's
called a direct parameter.

00:31:22.920 --> 00:31:27.050
Yes, this is the same thing as a direct
object in a sentence that you are

00:31:27.050 --> 00:31:31.140
possibly having bad flashbacks to
your grammar school days about.

00:31:32.090 --> 00:31:34.360
So in this case,
rotate takes a direct parameter

00:31:34.360 --> 00:31:35.800
which is of type graphic.

00:31:35.800 --> 00:31:38.660
You can rotate any of
the graphic objects.

00:31:38.820 --> 00:31:42.430
And you need a specific
parameter which has,

00:31:42.430 --> 00:31:49.680
again, a name, code, in this case, type,
which is the number of

00:31:49.680 --> 00:31:51.390
degrees to rotate it.

00:31:52.240 --> 00:31:56.150
If you're implementing this in Cocoa,
your parameters will come

00:31:56.150 --> 00:31:59.420
to you as an NSDictionary,
so you need to tell it the key

00:31:59.720 --> 00:32:02.530
name to use for that dictionary.

00:32:02.530 --> 00:32:06.490
In this case,
we're going to call it "by degrees."

00:32:09.080 --> 00:32:11.550
Now, skipping ahead slightly
to implementation,

00:32:11.550 --> 00:32:15.750
there are kind of two different
ways you can do commands.

00:32:15.770 --> 00:32:19.000
There's object-first dispatch
and there's verb-first dispatch.

00:32:19.000 --> 00:32:21.640
And they're useful for
different kinds of operations.

00:32:21.640 --> 00:32:25.180
In some cases,
it doesn't really matter how many

00:32:25.180 --> 00:32:29.800
objects you send the message to,
because they'll all do it themselves.

00:32:29.940 --> 00:32:32.340
Rotate is basically like this,
that each object should rotate

00:32:32.340 --> 00:32:34.140
itself by 45 degrees or whatever.

00:32:36.040 --> 00:32:38.540
So, in that case,
Cocoa can do object-first,

00:32:38.610 --> 00:32:42.200
that it sorts out all the objects and
then sends each of them a rotate message.

00:32:42.200 --> 00:32:44.070
Now, sometimes this doesn't work.

00:32:44.190 --> 00:32:48.080
Sometimes you need to operate on
the whole collection collectively,

00:32:48.080 --> 00:32:49.480
for lack of a better word.

00:32:49.570 --> 00:32:51.500
So, in that case,
you do verb-first dispatch,

00:32:51.500 --> 00:32:54.110
and we'll see an example
of that in a little bit.

00:32:54.390 --> 00:32:59.780
In this case, for object-first dispatch,
now that we've got the command,

00:32:59.780 --> 00:33:03.320
we have to specify what
objects respond to it.

00:33:05.120 --> 00:33:11.600
So we can do that by adding a
"RespondsTo" to the Graphic class.

00:33:11.600 --> 00:33:15.460
So we say "RespondsTo"
the rotate command,

00:33:15.460 --> 00:33:20.480
and the Cocoa method to call
when you see this is "Rotate:".

00:33:24.170 --> 00:33:29.980
So now let's have a look
at an example of VerbFirst.

00:33:30.790 --> 00:33:34.030
There's an align command in Sketch.

00:33:34.120 --> 00:33:36.660
And this is a perfect example of
something that doesn't make sense

00:33:36.660 --> 00:33:38.180
to send to each object individually.

00:33:38.210 --> 00:33:40.410
Because the whole point of
align is that you're aligning

00:33:40.410 --> 00:33:41.620
a set of objects to each other.

00:33:41.640 --> 00:33:44.020
It wouldn't make any sense if you
just sent a line to a single object.

00:33:44.080 --> 00:33:45.980
It would have to-- it either
wouldn't know what to do,

00:33:45.980 --> 00:33:47.840
or it would have to go out and
find all the other objects,

00:33:47.840 --> 00:33:50.370
which would be kind of
a waste of its time.

00:33:50.410 --> 00:33:53.760
Much simpler to make Cocoa do it for you.

00:33:53.820 --> 00:33:57.520
So in this case,
you can see the name of the command,

00:33:57.520 --> 00:33:59.820
description, direct parameter.

00:33:59.820 --> 00:34:02.360
In this case, align,
we're being specific that it's always

00:34:02.440 --> 00:34:06.520
going to take a list of objects,
because aligning a single object

00:34:06.520 --> 00:34:08.820
would be sort of pointless.

00:34:08.860 --> 00:34:12.040
So the way you specify a list
is with a type sub-element.

00:34:12.040 --> 00:34:15.800
You can say type equals graphic,
list equals yes.

00:34:15.800 --> 00:34:20.360
So this will show up in the
dictionary as a list of graphics.

00:34:23.180 --> 00:34:28.040
Oh, and again, we're using a parameter
with an edge type.

00:34:28.110 --> 00:34:33.500
We need an edge to align these things to,
another enumeration of ours,

00:34:33.580 --> 00:34:36.210
which we should add here.

00:34:37.010 --> 00:34:45.180
We have the left, right, bottom,
and top edges, and also the horizontal

00:34:45.180 --> 00:34:49.380
and vertical center edge,
as it were.

00:34:49.380 --> 00:34:53.690
Now, for verb-first dispatch,
what Cocoa is going to do is it is

00:34:53.690 --> 00:34:58.150
simply going to look at the verb,
and you define a class

00:34:58.260 --> 00:35:00.950
to handle that command.

00:35:01.550 --> 00:35:04.520
By default,
everything just goes to NSScriptCommand,

00:35:04.520 --> 00:35:07.420
and that knows how to do
the object-first dispatch.

00:35:07.420 --> 00:35:10.360
If you need to do verb-first dispatch,
you define your own

00:35:10.360 --> 00:35:12.020
descendant of NSScriptCommand.

00:35:12.020 --> 00:35:14.860
In this case,
we're calling it skt-alignCommand,

00:35:14.860 --> 00:35:18.490
and that has a method that it overrides,
which will get all the objects,

00:35:18.540 --> 00:35:19.810
and then it can do the operation.

00:35:22.550 --> 00:35:25.390
So to do that, to specify that override,
again, you use a Cocoa element.

00:35:25.470 --> 00:35:29.150
Say Cocoa class equals SKT align command.

00:35:36.380 --> 00:35:38.300
Okay, so now we've got all this.

00:35:38.300 --> 00:35:46.720
I should be able to build Go.

00:35:47.200 --> 00:35:50.180
Yeah, I don't really care about that,
but let's save it anyway.

00:35:52.440 --> 00:35:54.900
Yeah, yeah, sure.

00:35:55.140 --> 00:35:55.900
Yeesh.

00:35:55.900 --> 00:36:00.500
Should have said no.

00:36:00.750 --> 00:36:01.700
Okay.

00:36:01.700 --> 00:36:04.010
So we've got Sketch running.

00:36:07.760 --> 00:36:14.700
And, oh silly me,
I actually have to work for this one.

00:36:14.700 --> 00:36:16.970
Fire up Script Editor here.

00:36:18.630 --> 00:36:20.530
"Proversely enough,
this is the one thing that I didn't

00:36:20.530 --> 00:36:26.910
have in Demo Monkey." Okay,
tell application sketch

00:36:28.040 --> 00:36:31.900
This is an example of using
the Objects and Tel Blocks.

00:36:31.900 --> 00:36:37.430
This lets me abbreviate
object specifiers.

00:36:48.200 --> 00:36:55.100
[Transcript missing]

00:37:01.660 --> 00:37:05.010
So this is simple script to
just slap in some random colors.

00:37:05.050 --> 00:37:08.820
And you'll notice that-- remember
that close all windows example?

00:37:08.820 --> 00:37:11.470
And I said that, well,
you don't need a close

00:37:11.480 --> 00:37:12.380
all windows command.

00:37:12.380 --> 00:37:14.790
The fact that you can address all
windows just kind of drops out of

00:37:14.790 --> 00:37:17.350
normal object addressing syntax.

00:37:17.560 --> 00:37:18.100
Same deal here.

00:37:18.100 --> 00:37:20.780
I could change the sum to every.

00:37:21.010 --> 00:37:22.650
Or I can use a random one.

00:37:22.660 --> 00:37:24.860
I could name a specific one.

00:37:24.910 --> 00:37:28.060
And the scripting language
actually takes care of this for me.

00:37:28.110 --> 00:37:30.920
All I have to worry about
is defining a graphic class.

00:37:30.970 --> 00:37:33.720
and the language will actually
take care of the rest.

00:37:40.700 --> 00:37:43.360
A little overenthusiastic
there with the copy and paste.

00:37:43.360 --> 00:37:46.500
There we go.

00:37:46.500 --> 00:37:48.500
Whee.

00:37:48.510 --> 00:37:50.490
Look at the colors.

00:37:54.500 --> 00:37:58.040
Okay, now those of you who have actually
worked with Sketch before might have

00:37:58.050 --> 00:38:00.880
noticed something a little funny,
which is that, you know,

00:38:00.880 --> 00:38:02.500
Sketch is already scriptable.

00:38:02.500 --> 00:38:11.450
It had its scripting defined in the
older Cocoa Suite definition files,

00:38:11.450 --> 00:38:11.450
ScriptSuite and ScriptTerminology pairs.

00:38:13.590 --> 00:38:17.070
So you might well ask yourself, "Geez,
why do we have to write

00:38:17.070 --> 00:38:21.710
in sdef by hand?" Well,
there's a very pleasant answer to that,

00:38:21.710 --> 00:38:23.540
which is, you don't have to.

00:38:24.180 --> 00:38:25.330
There's a tool on the system.

00:38:25.330 --> 00:38:26.340
It's new in Tiger.

00:38:26.340 --> 00:38:28.600
It didn't exist before.

00:38:28.660 --> 00:38:33.690
It's actually a command
line tool called dsdp.

00:38:36.280 --> 00:38:40.320
There's an older SDP tool which
takes sdefs and turns them

00:38:40.460 --> 00:38:42.700
into some of the older formats.

00:38:42.700 --> 00:38:45.200
So this does the reverse, hence the DSDP.

00:38:45.200 --> 00:38:49.570
So you can simply point it at a
built copy of the application.

00:38:54.100 --> 00:39:01.600
[Transcript missing]

00:39:02.050 --> 00:39:06.700
Here's everything that it derived
from our old scripting format.

00:39:06.700 --> 00:39:09.530
It works on AET applications
just as well.

00:39:09.610 --> 00:39:12.110
That's the old Carbon format.

00:39:13.140 --> 00:39:17.220
So you take all this and
base your scripting on it.

00:39:17.360 --> 00:39:21.150
Now, the thing about DSDP is that
the result that it produces,

00:39:21.150 --> 00:39:22.600
it's going to need some editing.

00:39:22.600 --> 00:39:24.090
It's not a complete solution.

00:39:24.100 --> 00:39:28.350
The main reason for that is simply
that sdef is more expressive than

00:39:28.350 --> 00:39:30.500
either of the old two formats.

00:39:31.150 --> 00:39:35.250
So, for instance,
the Cocoa Script Suite script

00:39:35.300 --> 00:39:40.240
terminology files can't actually specify
the order that things come out in.

00:39:40.360 --> 00:39:41.500
Sdef can.

00:39:41.620 --> 00:39:46.350
You can have more elaborate comments
than you could in either of them,

00:39:46.430 --> 00:39:47.830
things like that.

00:39:48.400 --> 00:39:56.900
But especially for a larger application,
it gives you a great starting

00:39:56.900 --> 00:40:01.150
point and saves you a lot of work.

00:40:07.600 --> 00:40:11.600
I forgot about all of these.

00:40:11.600 --> 00:40:12.600
I should have been skimming through.

00:40:12.600 --> 00:40:16.940
Sorry, these were my notes to myself,
which I was watching on a...

00:40:17.100 --> 00:40:26.920
: So theoretically, at this point,
you've learned what a

00:40:26.920 --> 00:40:29.080
scripting interface is,
why you would want one,

00:40:29.170 --> 00:40:33.100
some of the design guidelines
and where to find rest,

00:40:33.220 --> 00:40:36.100
and some of the basics
about how to write an sdef.

00:40:36.100 --> 00:40:39.620
There's more complete
documentation on the format.

00:40:39.620 --> 00:40:42.230
Some of it's in the Cocoa documentation.

00:40:42.370 --> 00:40:45.640
There's also a man page
for the sdef format itself,

00:40:45.640 --> 00:40:45.770
just say man sdef.

00:40:46.710 --> 00:40:49.190
And if you've done some
of the work already,

00:40:49.190 --> 00:40:53.950
you've already got a Scripting Interface,
how to leverage some of that.

00:40:56.840 --> 00:40:59.300
So, some more information pointers.

00:40:59.300 --> 00:41:02.780
Man, I was really flying on this one.

00:41:02.780 --> 00:41:05.520
So, related sessions,
I mentioned these at the beginning.

00:41:05.520 --> 00:41:08.520
Obviously, tomorrow morning,
bright and early, 9:00,

00:41:08.570 --> 00:41:10.290
implementing a Scripting Interface.

00:41:10.290 --> 00:41:13.080
I'll show you how to actually
hook some of this stuff up

00:41:13.080 --> 00:41:15.240
and make it do something.

00:41:15.270 --> 00:41:18.180
And then later that afternoon,
if you've got any questions left,

00:41:18.180 --> 00:41:18.980
come to the lab.

00:41:19.090 --> 00:41:21.320
Like I said,
I'll have copies of the skeleton sdef

00:41:21.360 --> 00:41:24.530
there for you if you want to take
that home and start playing with it.

00:41:26.200 --> 00:41:32.300
People to contact:
Our esteemed Marketing Manager,

00:41:32.300 --> 00:41:33.770
Sal Segoian.

00:41:33.770 --> 00:41:33.770
I'm sure he's around here somewhere.

00:41:34.290 --> 00:41:37.500
And Todd Fernandez is the
Engineering Manager for the

00:41:37.500 --> 00:41:39.830
AppleScript and Automator group.