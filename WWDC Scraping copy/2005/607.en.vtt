WEBVTT

00:00:06.860 --> 00:00:07.720
Good afternoon.

00:00:07.720 --> 00:00:09.010
I'm Chris Pavicich.

00:00:09.100 --> 00:00:13.940
Welcome to session 607, WebObjects Tools.

00:00:14.080 --> 00:00:15.410
Just a quick question before we start.

00:00:15.540 --> 00:00:18.110
How many of you have ever
used WebObjects before?

00:00:18.160 --> 00:00:18.680
How many of you?

00:00:18.830 --> 00:00:19.110
Okay.

00:00:19.340 --> 00:00:20.610
Wow.

00:00:20.810 --> 00:00:24.260
How many of you have used the product
for more than five years and remember

00:00:24.260 --> 00:00:26.340
when it was implemented in Objective-C?

00:00:26.340 --> 00:00:26.680
Wow.

00:00:26.680 --> 00:00:27.050
Okay.

00:00:27.100 --> 00:00:29.860
How many of you are
completely new to the product?

00:00:30.170 --> 00:00:32.180
All right, good mix.

00:00:32.390 --> 00:00:35.660
Okay, today I'm going to be talking
about our development tool chain.

00:00:35.660 --> 00:00:38.620
So let's get a roadmap of
where we're going here.

00:00:38.730 --> 00:00:42.240
I'm going to start out giving
you a brief overview of the

00:00:42.340 --> 00:00:44.220
WebObjects framework stack.

00:00:44.320 --> 00:00:47.850
We're going to talk a little
bit about how a WebObjects app

00:00:47.850 --> 00:00:49.760
does the work that it does.

00:00:49.760 --> 00:00:52.040
And then we're going to
start talking about tools.

00:00:52.040 --> 00:00:54.860
We're going to be talking
about data modeling,

00:00:54.930 --> 00:00:57.980
our rapid prototyping tools,
using Xcode to write

00:00:58.030 --> 00:00:59.660
custom business logic.

00:01:00.100 --> 00:01:03.290
Customizing your UI using
WebObjects Builder.

00:01:03.650 --> 00:01:04.750
And then we're going to do some QA.

00:01:06.650 --> 00:01:08.280
So let's dive right in.

00:01:08.520 --> 00:01:12.780
WebObjects is a highly scalable,
enterprise-level application

00:01:12.780 --> 00:01:19.720
server built around the
model-view-controller paradigm.

00:01:19.930 --> 00:01:26.690
We've got three sort of framework layers.

00:01:26.690 --> 00:01:26.690
Our data access layer.

00:01:27.060 --> 00:01:29.700
Business Logic Layer is where
you're going to write all of your

00:01:30.220 --> 00:01:34.900
application-specific business
logic and presentation layer.

00:01:34.900 --> 00:01:39.900
There's a clean separation between
each of these levels of the frameworks.

00:01:40.000 --> 00:01:43.430
And we're going to talk about each of
them in turn today and the tools you'll

00:01:43.540 --> 00:01:47.900
use with each level of the architecture.

00:01:47.900 --> 00:01:51.920
So the WebObjects Framework
Stack at its very base

00:01:53.180 --> 00:01:54.990
It's built on the
Java Foundation classes.

00:01:55.060 --> 00:01:58.240
If you're familiar
with Cocoa Development,

00:01:58.270 --> 00:02:03.240
Java Foundation looks a lot like
the regular Foundation classes.

00:02:03.480 --> 00:02:06.400
It's sort of a Java port.

00:02:06.400 --> 00:02:12.400
That's the base upon which
everything else is built.

00:02:13.030 --> 00:02:16.820
The next layer up is our
Enterprise Objects Framework Stack.

00:02:16.860 --> 00:02:23.780
EOF is used for relational
database to object graph mapping.

00:02:23.850 --> 00:02:26.160
It's built up of three
actually different frameworks.

00:02:26.160 --> 00:02:31.040
EO Access is used to handle all of the

00:02:31.490 --> 00:02:41.400
The EO Control Layer is where we
do all the object graph management

00:02:41.400 --> 00:02:47.440
once we've turned your database
objects into Java business objects.

00:02:47.440 --> 00:02:51.430
And the EO Interface Layer is
mainly used for Java Client.

00:02:52.000 --> 00:02:55.590
On top of that,
we have our App Server layer

00:02:55.750 --> 00:03:01.600
and our rapid prototyping tools,
direct-to-web, direct-to-web services,

00:03:01.650 --> 00:03:05.860
and direct-to-Java client are built
on top of our App Server framework.

00:03:08.520 --> 00:03:13.520
Okay, so let's talk about how a
WebObjects app does what it does.

00:03:13.720 --> 00:03:18.890
The main, the heart of a WebObjects app
is the request-response loop.

00:03:19.320 --> 00:03:22.580
So clearly a web app
starts with the browser.

00:03:22.590 --> 00:03:26.780
Browser sends a request
to the web server.

00:03:26.990 --> 00:03:31.650
The web server parses
the request it gets,

00:03:31.930 --> 00:03:37.230
forwards on to the WoW adapter
that plugs into your web server,

00:03:37.230 --> 00:03:41.740
and the adapter then forwards that
request on to the appropriate app

00:03:41.750 --> 00:03:44.300
instance that you have running.

00:03:47.310 --> 00:03:53.140
The app instance then
parses the request it gets,

00:03:53.180 --> 00:03:56.300
sends it off to an
appropriate request handler,

00:03:56.300 --> 00:03:59.900
and then each of the classes
within your application

00:04:00.240 --> 00:04:03.240
pulls information from
the request it gets.

00:04:03.410 --> 00:04:07.140
The application gets its
chance at handling the request,

00:04:07.310 --> 00:04:11.140
as does the session,
as do your nested WoE components.

00:04:11.350 --> 00:04:14.970
Once the action you're
calling has finished its work,

00:04:14.970 --> 00:04:18.910
each of those in turn gets a
chance to append to response.

00:04:19.800 --> 00:04:26.260
and your request goes back out or your
response goes back out to the browser.

00:04:27.470 --> 00:04:32.640
So I want to start off today talking
about the different tools in each layer.

00:04:32.930 --> 00:04:35.020
The data access layer,
the primary tool you're going

00:04:35.020 --> 00:04:37.000
to be working with is EOModeler.

00:04:37.230 --> 00:04:40.400
The business logic layer,
the primary tool you'll be working

00:04:40.400 --> 00:04:44.140
with is Xcode and your Java classes.

00:04:44.270 --> 00:04:47.210
And on the presentation layer,
if you're writing a web app,

00:04:47.210 --> 00:04:49.660
you'll be working with
WebObjects Builder.

00:04:50.030 --> 00:04:52.400
If you're writing a web
services application,

00:04:52.400 --> 00:04:55.560
you'll be working with our
web services assistant.

00:04:56.460 --> 00:04:59.600
And if you're writing a
three-tiered Java application,

00:04:59.600 --> 00:05:01.010
you'll be working with Interface Builder.

00:05:03.220 --> 00:05:09.880
Okay, so I liken building a web
app to building a sports car.

00:05:09.880 --> 00:05:13.410
You've got to start someplace,
you've got to start

00:05:13.510 --> 00:05:16.790
with the nuts and bolts,
that's your data.

00:05:16.790 --> 00:05:16.790
So...

00:05:17.500 --> 00:05:20.900
As I said earlier,
EOModeler is the main tool you'll be

00:05:20.900 --> 00:05:23.860
working with on the data access layer.

00:05:24.170 --> 00:05:25.580
So what is EOModeler?

00:05:25.700 --> 00:05:29.220
EOModeler is the face
of the EOF frameworks.

00:05:29.220 --> 00:05:31.600
What does EOF do?

00:05:31.870 --> 00:05:35.620
In a nutshell,
EOF does object graph management.

00:05:35.620 --> 00:05:40.000
It takes a relational data store,
turns those rows in that database

00:05:40.000 --> 00:05:44.620
into Java business objects,
and manages the object graph for you.

00:05:44.890 --> 00:05:48.970
So tables in your database
map to entities in EOModeler.

00:05:49.360 --> 00:05:52.020
The columns in those
tables map to attributes,

00:05:52.090 --> 00:05:55.390
and the joins between those
tables map to relationships

00:05:55.390 --> 00:05:57.470
between the objects in your graph.

00:06:00.240 --> 00:06:02.590
Use EO Modeler for building
all of your data models.

00:06:02.710 --> 00:06:08.450
If you've got a large existing
relational database installation

00:06:08.630 --> 00:06:11.350
that you want to expose to the web,
you'll be using Modeler to

00:06:11.350 --> 00:06:14.550
reverse engineer your database,
publish it to the web,

00:06:14.690 --> 00:06:17.600
turn it into a web service,
turn it into a Java app.

00:06:19.880 --> 00:06:25.700
Use WebObjects Builder for
modeling your entities.

00:06:25.700 --> 00:06:27.050
If you're starting from scratch
and you're building a new database,

00:06:27.050 --> 00:06:28.120
you can use WebObjects Builder
to model your entities,

00:06:28.170 --> 00:06:29.320
and then it'll do SQL generation for you,
and you can create your

00:06:29.360 --> 00:06:30.280
database directly from Modeler.

00:06:33.490 --> 00:06:38.270
Once you've got your entities modeled,
EOModeler does source code generation.

00:06:38.390 --> 00:06:40.700
It's just a simple matter
of opening your model,

00:06:40.740 --> 00:06:42.780
selecting an entity,
and hitting "Create a

00:06:42.850 --> 00:06:45.300
Java Class for this entity."

00:06:45.590 --> 00:06:48.040
There's data browsing
capability within EOModeler,

00:06:48.070 --> 00:06:51.580
so if you want to see that, hey,
is my connection dictionary right?

00:06:51.580 --> 00:06:53.080
Am I talking to the database?

00:06:53.080 --> 00:06:57.100
Load up your model, pick an entity,
hit browse,

00:06:57.100 --> 00:06:58.950
and it'll automatically fetch for you.

00:06:59.060 --> 00:07:04.110
New in this release of WebObjects today,
new in 5.3, there's an Xcode plugin

00:07:04.240 --> 00:07:06.120
for doing EOModeling.

00:07:06.120 --> 00:07:08.490
Based on some of the
core data modeling tools,

00:07:08.490 --> 00:07:11.110
I think you saw it in the
presentation earlier if you

00:07:11.110 --> 00:07:12.880
were at the overview session.

00:07:15.040 --> 00:07:16.360
So that's new today.

00:07:19.300 --> 00:07:27.640
So the great value we think that
WebObjects brings to development is

00:07:27.710 --> 00:07:33.540
how quickly you can go from database
to model to working prototype to

00:07:33.540 --> 00:07:38.300
refining that prototype to having
a great world-class application.

00:07:38.320 --> 00:07:44.190
So we've built some prototyping
tools on top of the WebObjects stack.

00:07:44.670 --> 00:07:47.920
The idea here is we want to get you
going in sort of less than five minutes,

00:07:48.060 --> 00:07:52.200
writing no code, so that you start off,
model your data, boom,

00:07:52.200 --> 00:07:55.500
here's something to show the boss,
here's something to show the client,

00:07:55.500 --> 00:07:59.580
here's something to validate
that my idea is a good one,

00:07:59.580 --> 00:08:01.170
and go from there.

00:08:03.300 --> 00:08:05.640
tools are great for
building proof of concepts.

00:08:05.640 --> 00:08:08.870
They make wonderful internal tools.

00:08:08.980 --> 00:08:14.120
If someone else manages the
content in your database,

00:08:14.170 --> 00:08:14.170
here let me model the

00:08:14.920 --> 00:08:15.790
The database for you.

00:08:15.790 --> 00:08:19.080
Let me build a direct-to-web tool,
and now let me hand it off to you,

00:08:19.080 --> 00:08:21.640
and you manage the database.

00:08:21.640 --> 00:08:22.720
Here's your tool.

00:08:22.720 --> 00:08:23.840
It just works.

00:08:23.920 --> 00:08:24.820
You just go.

00:08:24.850 --> 00:08:28.040
Makes a great database
administration application.

00:08:29.040 --> 00:08:32.040
So there are three
direct-to technologies.

00:08:32.210 --> 00:08:36.280
Direct-to-web takes your model,
turns it into a web app.

00:08:36.500 --> 00:08:42.000
Direct-to-web services takes your model,
publishes it as SOAP APIs.

00:08:42.030 --> 00:08:47.680
And direct-to-Java client will take your
model and turn it into a swing-based,

00:08:47.680 --> 00:08:51.150
double-clickable Java client application.

00:08:53.230 --> 00:08:56.980
So we can switch to the demo machine.

00:08:57.060 --> 00:08:58.800
I want to show you
EOModeler this morning,

00:08:58.980 --> 00:09:03.950
reverse engineering,
an existing data store.

00:09:04.520 --> 00:09:07.550
Just a show of hands,
how many people managed to download the

00:09:07.550 --> 00:09:10.880
sample code and will be following along?

00:09:11.020 --> 00:09:15.270
Okay, a couple of you.

00:09:15.270 --> 00:09:15.270
I'll try not to move too fast.

00:09:20.720 --> 00:09:26.710
So you open the trading card demo,
open the EO Modeler,

00:09:27.200 --> 00:09:29.580
The first thing I'm going to
do here is build an OpenBase

00:09:29.860 --> 00:09:31.100
database on this application.

00:09:31.100 --> 00:09:34.750
OpenBase ships with WebObjects.

00:09:35.100 --> 00:09:37.690
So I'm going to open
the OpenBase manager.

00:09:38.400 --> 00:09:39.720
Let's come up.

00:09:39.770 --> 00:09:45.500
On the left-hand side,
I'm going to select local.

00:09:45.500 --> 00:09:49.160
Under this action menu,
I'm going to select new database.

00:09:49.160 --> 00:09:50.880
And we're building a trading cards app.

00:09:51.050 --> 00:09:55.800
Did you all see the Meet the Engineering?

00:09:56.480 --> 00:10:00.940
Meet the Tiger Engineers, WWDC promo.

00:10:00.950 --> 00:10:02.200
Yeah, familiar with that?

00:10:02.410 --> 00:10:05.460
So we, our group,
are really cottoned to that,

00:10:05.460 --> 00:10:07.660
so we've based our demos around it.

00:10:07.660 --> 00:10:10.670
So we're gonna call this
database Trading Cards.

00:10:10.840 --> 00:10:13.930
Hit Create.

00:10:14.790 --> 00:10:17.870
And I'm going to hit Start Database
at boot just in case my machine

00:10:17.930 --> 00:10:21.700
crashes while I'm running here.

00:10:21.750 --> 00:10:24.290
And I want to save changes.

00:10:28.100 --> 00:10:30.610
Select the Trading Cards
database I created.

00:10:30.610 --> 00:10:31.890
Hit Start.

00:10:31.920 --> 00:10:34.240
It's going to start up and...

00:10:35.560 --> 00:10:38.500
In the one pre-demo folder
in the trading cards demo,

00:10:38.500 --> 00:10:40.610
there should be

00:10:41.400 --> 00:10:50.800
A file called Trading Cards_ASCII Backup.

00:10:50.800 --> 00:10:50.800
So what I've done is I've pre-built this
database and then dumped it as ASCII.

00:10:52.210 --> 00:10:57.620
So under the Action menu,
I am going to restore

00:10:57.620 --> 00:10:59.380
that database from ASCII.

00:10:59.380 --> 00:11:01.730
Yes, I want to restore it.

00:11:14.130 --> 00:11:15.400
That's a surprise for Chris.

00:11:15.480 --> 00:11:19.790
This didn't have a
password when I saved it.

00:11:24.200 --> 00:11:30.900
[Transcript missing]

00:11:34.960 --> 00:11:38.020
I'm going to start up one of the
other pre-existing databases on

00:11:38.110 --> 00:11:39.790
this box and demo using that.

00:11:39.810 --> 00:11:46.410
So I've started up the WoMovies database
and I'm going to start up EOModeler.

00:11:56.600 --> 00:12:00.350
Okay, we're creating a new model,
so UL modeler is running.

00:12:00.460 --> 00:12:02.030
Select new.

00:12:02.800 --> 00:12:06.680
Now the EO Modeler is going to
bring open a wizard and ask me

00:12:06.680 --> 00:12:09.570
some questions about what type of
data source I'd like to talk to.

00:12:09.570 --> 00:12:14.840
EOF natively will plug into
JDBC and JNDI data sources.

00:12:14.840 --> 00:12:18.500
So most relational
databases have JDBC drivers.

00:12:18.590 --> 00:12:22.760
Most LDAP servers provide
some sort of JNDI interface.

00:12:22.760 --> 00:12:26.100
You can actually write your own
custom adapter if you're so inclined.

00:12:26.100 --> 00:12:31.590
We're going to go with JDBC.

00:12:48.700 --> 00:13:04.200
[Transcript missing]

00:13:20.820 --> 00:13:23.040
Okay, back to the original demo.

00:13:23.040 --> 00:13:28.270
So I'm going to restore...

00:13:33.100 --> 00:13:42.800
[Transcript missing]

00:13:45.800 --> 00:13:54.600
[Transcript missing]

00:13:54.950 --> 00:13:58.300
When I restored that from ASCII,
you see a terminal window came open,

00:13:58.320 --> 00:14:03.440
some SQL ran, and some rows were loaded
into that database.

00:14:03.460 --> 00:14:04.930
So have you all caught up?

00:14:04.940 --> 00:14:08.590
I'm sorry for the
confusion this afternoon.

00:14:11.040 --> 00:14:13.560
So we're going to switch
back to EOModeler.

00:14:13.590 --> 00:14:16.500
And in that folder that
you found the ASCII backup,

00:14:16.530 --> 00:14:20.480
there's a set of instructions with
screenshots walking you through this.

00:14:20.490 --> 00:14:24.940
I'm just going to grab the
URL connection string for this database,

00:14:24.940 --> 00:14:26.100
copy it.

00:14:29.100 --> 00:14:45.300
[Transcript missing]

00:14:46.650 --> 00:14:51.520
Now, the modeler is going to ask me
what I want to do with this model.

00:14:51.540 --> 00:14:55.290
What am I interested in getting from
the database and including in my model?

00:14:55.290 --> 00:15:00.440
I want to use EOF to assign primary keys,
so I'm going to leave that selected.

00:15:00.440 --> 00:15:04.380
I'm interested to see if there are
any joins set up in the database,

00:15:04.380 --> 00:15:08.200
so I'm going to leave asking
about relationships selected.

00:15:08.200 --> 00:15:12.660
But I'm not interested in stored
procedures or custom enterprise objects,

00:15:12.660 --> 00:15:15.980
so I'm going to uncheck the
two of those and click Next.

00:15:16.600 --> 00:15:20.220
So now what happened here is
modeler connected to the database,

00:15:20.220 --> 00:15:24.390
got a list of all the tables associated
with that connection dictionary,

00:15:24.390 --> 00:15:26.980
and it's populated this table view here.

00:15:26.980 --> 00:15:31.510
I'm interested in all of these tables,
so I'm going to hit Select All,

00:15:31.510 --> 00:15:32.980
then select Next.

00:15:32.980 --> 00:15:34.870
Now the wizard's done.

00:15:34.870 --> 00:15:38.340
It's collected all the
information it needs,

00:15:38.380 --> 00:15:40.740
and it's built a model for me.

00:15:41.270 --> 00:15:45.930
So if you've never used EOModeler before,
what you have on the left is a

00:15:45.930 --> 00:15:50.470
list of the model name and all of
the entities associated with it.

00:15:50.610 --> 00:15:55.030
And by selecting an entity,
what I see on the right here

00:15:55.040 --> 00:15:56.870
in the top of the split view

00:15:57.060 --> 00:16:04.740
is the web-based assistant.

00:16:04.740 --> 00:16:04.740
He will be talking about the web-based

00:16:05.100 --> 00:16:11.490
So I need to set up two relationships
here for my application to run.

00:16:11.510 --> 00:16:16.230
Each of my trading cards,
every person that's represented by

00:16:16.230 --> 00:16:20.730
a trading card has several powers
and we have a picture of them,

00:16:20.730 --> 00:16:22.140
we have an image.

00:16:23.310 --> 00:16:27.810
Under Properties, I'm going to add a
relationship to trading cards.

00:16:28.140 --> 00:16:30.440
Select that.

00:16:30.440 --> 00:16:38.780
Open the inspector and
we'll do the image first.

00:16:38.780 --> 00:16:38.780
So I'm going to give the

00:16:40.000 --> 00:16:41.640
Relationship the name of image.

00:16:41.640 --> 00:16:45.630
It's 2-1, and we're connecting...

00:16:46.690 --> 00:16:50.280
The trading card entity
to the image entity,

00:16:51.410 --> 00:16:53.890
and we're using

00:16:54.170 --> 00:16:57.260
Image ID is a foreign key,
row ID is the primary key,

00:16:57.260 --> 00:16:58.110
and then I'm going to hit connect.

00:16:58.240 --> 00:17:00.560
So, give you a second.

00:17:00.670 --> 00:17:03.050
Your screen looks like this.

00:17:06.050 --> 00:17:11.430
Now, on the trading card entity,
we now have a new special kind of

00:17:11.520 --> 00:17:17.000
property called the relationship
that will traverse those two tables.

00:17:18.050 --> 00:17:20.200
I'm going to select Trading Card again.

00:17:20.340 --> 00:17:23.630
Under Property,
I'm going to add another relationship.

00:17:24.000 --> 00:17:42.500
[Transcript missing]

00:17:45.100 --> 00:17:50.660
: Thank you, Chris.

00:17:50.660 --> 00:17:50.660
Thanks, Chris.

00:17:54.170 --> 00:17:55.950
Okay, so I went to save my model there.

00:17:56.050 --> 00:17:58.230
I hit Command-S.

00:17:58.400 --> 00:18:01.590
And EOF and the EO Modeler went
through a consistency check.

00:18:01.670 --> 00:18:06.070
So what it did was basically
parse through all the model,

00:18:06.070 --> 00:18:08.430
looking for problems.

00:18:09.100 --> 00:18:12.880
We see here attribute row ID and entity
image begins with a capital letter,

00:18:12.880 --> 00:18:14.430
which is not recommended.

00:18:14.430 --> 00:18:18.620
It's not fatal, but the EOF stack is
basically just telling us,

00:18:18.720 --> 00:18:20.120
hey, this might be a problem later.

00:18:20.120 --> 00:18:23.730
If it were fatal, it would stop us from
saving the model and say,

00:18:23.810 --> 00:18:26.660
no, before you proceed,
you have to fix this.

00:18:26.660 --> 00:18:29.460
These are just warnings,
so I'm going to click through them.

00:18:29.460 --> 00:18:38.050
And we will call this training cards.

00:18:38.150 --> 00:18:39.070
And I'm going to save
it as training cards.

00:18:39.110 --> 00:18:41.480
on my desktop, oops.

00:19:03.720 --> 00:19:03.720
I'll replace the one I had there.

00:19:03.720 --> 00:19:03.720
And one of the features I mentioned
earlier was data browsing.

00:19:03.720 --> 00:19:03.720
So I'm going to select
the trading card entity.

00:19:03.720 --> 00:19:03.720
And this icon here in the top
toolbar looks like a magnifying

00:19:03.720 --> 00:19:03.720
glass connected to a cylinder.

00:19:03.720 --> 00:19:03.720
It's the browse data.

00:19:06.000 --> 00:19:13.800
[Transcript missing]

00:19:14.610 --> 00:19:17.590
So you can see, yeah,
my connection dictionary does work.

00:19:17.810 --> 00:19:21.280
EOF is really fetching
data from the database.

00:19:21.420 --> 00:19:23.350
We're good to go.

00:19:23.380 --> 00:19:29.360
So we're going to hide
EO Modeler for a second.

00:19:29.370 --> 00:19:36.230
And back to the sample code.

00:19:39.600 --> 00:19:44.430
I've pre-built most of these projects
in the demo code folders today,

00:19:44.450 --> 00:19:47.690
so if you've gotten behind,
to quickly catch you up,

00:19:47.810 --> 00:19:50.780
where we're at is to post-demo.

00:19:50.960 --> 00:19:54.510
So now that we've built our model,
what I want to do is build an

00:19:54.510 --> 00:19:56.800
application prototype out of it.

00:19:56.950 --> 00:19:58.860
I want to see that...

00:20:00.610 --> 00:20:05.820
My proof of concept is sound,
that my model is good.

00:20:05.840 --> 00:20:07.420
I want to see what it's going
to look like on the web.

00:20:07.510 --> 00:20:09.500
I want to show my boss, maybe.

00:20:09.610 --> 00:20:12.530
So we're going to build a
direct-to-web application.

00:20:15.730 --> 00:20:21.560
So I'm going to open the
trading cards_d2w application

00:20:21.560 --> 00:20:24.270
and find the Xcode project.

00:20:29.700 --> 00:20:35.110
I have an older version of Xcode here,
so if any of you have the older

00:20:35.410 --> 00:20:39.710
version of Xcode installed today,
and you're opening an existing project,

00:20:39.760 --> 00:20:41.780
it's going to ask you to upgrade a copy.

00:20:41.780 --> 00:20:50.760
You should hit upgrade, it's okay,
and give your project a new name,

00:20:50.760 --> 00:20:52.350
hit save.

00:20:57.200 --> 00:20:59.200
I brought my project up.

00:20:59.200 --> 00:21:03.340
I'm going to build and run.

00:21:08.700 --> 00:21:12.340
Building a direct-to-web application
and you're starting from scratch.

00:21:12.340 --> 00:21:14.160
We couldn't for the sake of time today.

00:21:14.160 --> 00:21:16.100
Launch Xcode.

00:21:16.100 --> 00:21:18.080
Tell it you want to build a new project.

00:21:18.080 --> 00:21:22.550
There'll be a project assistant that
comes up and will walk you through

00:21:22.550 --> 00:21:25.300
building a direct-to-web application.

00:21:25.300 --> 00:21:28.600
It'll ask you which frameworks
you'd like to include,

00:21:28.660 --> 00:21:32.170
what models you'd like to include,
and go from there.

00:21:32.620 --> 00:21:34.650
So our project is done building.

00:21:34.650 --> 00:21:35.810
It's now running.

00:21:35.840 --> 00:21:37.810
We build a login page by default.

00:21:37.950 --> 00:21:42.440
Whatever values you passed in here,
if you needed a connection dictionary,

00:21:42.440 --> 00:21:46.400
username and password, and EOModeler,
you'd provide them here.

00:21:46.570 --> 00:21:49.260
We don't, so I'm just going to hit login.

00:21:54.900 --> 00:21:58.780
And the default page in
DirectWeb is the Find page.

00:21:58.800 --> 00:22:03.000
See a list of all the entities
that we had built in the model.

00:22:03.020 --> 00:22:04.690
I'm going to hit

00:22:06.200 --> 00:22:08.540
I'll leave the Find button
next to Trading Card.

00:22:08.540 --> 00:22:09.620
And there we go.

00:22:09.930 --> 00:22:13.040
No code, very little effort.

00:22:13.040 --> 00:22:18.230
I've got a simple,
pleasant-looking web app

00:22:18.280 --> 00:22:21.330
talking to my database.

00:22:22.070 --> 00:22:25.060
I can create new instances
of any of my entities.

00:22:25.150 --> 00:22:27.430
I can search on any of them.

00:22:27.550 --> 00:22:34.460
So, as you can see, DirectWeb is a great,
rapid application prototyping tool.

00:22:34.610 --> 00:22:36.910
If we could go back to the slides.

00:22:41.510 --> 00:22:43.970
So what have we seen so far?

00:22:44.230 --> 00:22:48.630
We've seen taking EOModeler and reverse
engineering an existing database.

00:22:48.900 --> 00:22:52.250
Then we took that model that
we built and built a very quick

00:22:52.350 --> 00:22:54.390
direct-to-web app out of it.

00:22:58.620 --> 00:23:02.360
The next thing we're going to talk
about is writing custom logic.

00:23:02.360 --> 00:23:10.200
EOF and the WebObjects frameworks
do a lot of heavy lifting for you.

00:23:10.200 --> 00:23:12.990
We've worked hard, so you don't have to.

00:23:13.380 --> 00:23:16.060
We've thought a lot
of the issues through,

00:23:16.120 --> 00:23:17.580
so you don't have to.

00:23:17.650 --> 00:23:19.980
So what do you have to do?

00:23:20.140 --> 00:23:25.580
You have to bring your domain
expertise to the problem.

00:23:25.850 --> 00:23:30.480
Most likely, the rows you have sitting
raw in your database,

00:23:30.480 --> 00:23:32.900
translated into objects.

00:23:33.990 --> 00:23:36.020
They might be of great
value to someone that way,

00:23:36.020 --> 00:23:41.890
but they're probably of
greater value once you add

00:23:42.200 --> 00:23:47.700
[Transcript missing]

00:23:48.040 --> 00:23:50.030
We can build a workable application.

00:23:50.160 --> 00:23:54.610
You're going to build
a great application.

00:23:55.610 --> 00:23:55.610
And part of that

00:23:55.730 --> 00:23:57.160
is building your logic.

00:23:57.250 --> 00:23:59.940
I call this fine-tuning
a well-oiled machine.

00:24:00.110 --> 00:24:02.500
WebObjects works great out of the box.

00:24:02.580 --> 00:24:03.600
You just saw it.

00:24:03.740 --> 00:24:04.950
We built a model, boom.

00:24:05.190 --> 00:24:08.800
We built a direct-to-web app, boom.

00:24:09.000 --> 00:24:13.260
But it's not yours.

00:24:13.260 --> 00:24:13.260
You need to make it yours.

00:24:14.130 --> 00:24:19.070
So we're now into talking about
the controller layer of MVC.

00:24:19.100 --> 00:24:20.280
We're talking about business logic.

00:24:20.280 --> 00:24:24.540
So we're going to be spending quite a bit
of time talking about custom-generated

00:24:24.540 --> 00:24:26.360
Java code from your model.

00:24:26.360 --> 00:24:29.000
And you're going to be
modifying that Java code,

00:24:29.000 --> 00:24:31.470
and you're going to be
doing it using Xcode.

00:24:33.500 --> 00:24:39.950
Xcode is the preferred IDE for
WebObjects development on Mac OS X.

00:24:40.500 --> 00:24:45.000
does all the typical
wonderful IDE things,

00:24:45.000 --> 00:24:47.820
compiler, debugger, version control.

00:24:47.820 --> 00:24:52.060
We're supporting subversion, Perforce,
CVS now.

00:24:52.060 --> 00:24:55.890
All the documentation you need while
you're building your WebObjects app

00:24:56.010 --> 00:24:58.140
is accessible from within Xcode.

00:24:58.140 --> 00:25:02.140
And it comes with a bunch of project
assistants to help you get started.

00:25:02.190 --> 00:25:07.090
We don't want you simply sitting in front
of the blank canvas that is an empty

00:25:07.090 --> 00:25:09.930
Xcode project and wondering what to do.

00:25:09.940 --> 00:25:11.810
So if you're creating
a direct-to-web app,

00:25:11.810 --> 00:25:13.790
there's a direct-to-web
project assistant.

00:25:13.980 --> 00:25:17.920
If you're creating a standalone web app,
there's a template to

00:25:17.920 --> 00:25:19.590
get you started there.

00:25:21.370 --> 00:25:27.340
So now I'm going to take the--
go back to the demo machine.

00:25:27.360 --> 00:25:31.670
I'm going to show you a quick
demo we've come up with.

00:25:31.900 --> 00:25:37.630
I've taken that model
that we created earlier

00:25:40.360 --> 00:25:44.170
created some Java classes
for it and actually created a

00:25:44.170 --> 00:25:45.550
WebObjects project out of it.

00:25:45.670 --> 00:25:50.270
If you're following along on
your laptops in the audience,

00:25:50.360 --> 00:25:55.380
we're on the 2_Xcode folder and
within there you should find

00:25:55.390 --> 00:25:57.700
a folder called Trading Cards.

00:25:57.820 --> 00:25:59.690
If you want to open that up.

00:26:01.590 --> 00:26:05.700
And open up tradingcards.xcode.

00:26:05.730 --> 00:26:07.420
Again, this is an older version.

00:26:07.420 --> 00:26:10.500
This project was saved with
an older version of Xcode,

00:26:10.500 --> 00:26:13.160
so it's going to ask
me to upgrade a copy.

00:26:13.270 --> 00:26:15.000
I'm going to do that.

00:26:37.350 --> 00:26:37.580
For those of you who
aren't familiar with Xcode,

00:26:37.580 --> 00:26:37.580
I'll give you a really,
really quick tour.

00:26:37.580 --> 00:26:37.580
I highly suggest if
you haven't used Xcode,

00:26:37.580 --> 00:26:37.590
check out some of the
other sessions today.

00:26:37.590 --> 00:26:37.590
It's really out of the question.

00:26:38.640 --> 00:26:43.780
Out of the scope of this talk for me to
go into all of the ins and outs of Xcode,

00:26:44.080 --> 00:26:50.540
but all Wo projects are basically
organized the same way within Xcode.

00:26:50.590 --> 00:26:53.890
Your classes are in the classes.

00:26:54.970 --> 00:27:09.470
: Thank you, Chris.

00:27:09.470 --> 00:27:10.320
Thank you, Chris.

00:27:10.320 --> 00:27:10.320
I'm going to go ahead and get started.

00:27:10.320 --> 00:27:10.320
So,
we've got the Web Components container,

00:27:10.320 --> 00:27:10.320
your WoE components,
the building blocks of your UI are

00:27:10.320 --> 00:27:10.320
in the Web Components container.

00:27:10.320 --> 00:27:10.320
Any resources, images,
the model that we added to this project,

00:27:10.320 --> 00:27:10.320
any properties associated
with it are in there.

00:27:10.840 --> 00:27:17.290
So as I said,
I pre-built this demo from within.

00:27:17.370 --> 00:27:21.700
EOModeler,
I generated this trading card class.

00:27:21.730 --> 00:27:23.820
I'm going to open the editor here.

00:27:23.920 --> 00:27:28.160
And this is the code that
Eel Modeler generated for me.

00:27:28.310 --> 00:27:32.110
Every entity and

00:27:32.470 --> 00:27:36.180
I'm sorry,
every relationship and attribute on

00:27:37.020 --> 00:27:41.800
this entity have accessors and mutators.

00:27:43.520 --> 00:28:01.540
One thing my object model was missing,
one thing this entity was

00:28:01.540 --> 00:28:01.540
missing was a full name field.

00:28:01.540 --> 00:28:01.540
There was fields for the engineer's
first name and last name,

00:28:01.540 --> 00:28:01.540
but nothing for full name.

00:28:01.540 --> 00:28:01.540
So I've written

00:28:01.850 --> 00:28:03.640
That bit of custom logic here.

00:28:03.670 --> 00:28:08.240
So method returns a string,
and all I'm doing is calling the

00:28:08.980 --> 00:28:13.270
surname and first name accessors,
concatenating them,

00:28:13.270 --> 00:28:16.270
comma delimiting them,
and returning them.

00:28:16.340 --> 00:28:27.190
So now I'm going to go actually
use that in a working app.

00:28:31.800 --> 00:28:36.670
So I'm going to hit build and run.

00:28:47.870 --> 00:28:49.720
So here are my trading cards.

00:28:49.990 --> 00:28:53.230
They're not pretty, but if you look,

00:28:53.770 --> 00:28:59.440
Using WebObjects Builder earlier,
I managed to write a custom accessor,

00:28:59.610 --> 00:29:05.140
some custom logic on my trading
card class and bind it to the UI,

00:29:05.310 --> 00:29:06.940
and it works.

00:29:08.140 --> 00:29:12.450
Obviously, this is a very trivial,
very simple demonstration for

00:29:12.450 --> 00:29:13.620
the constraints of time today.

00:29:13.620 --> 00:29:15.550
There's a lot more that you can do.

00:29:15.550 --> 00:29:18.150
If we could go back to the slides.

00:29:31.900 --> 00:29:35.960
Back to our sports car
analogy from earlier.

00:29:36.050 --> 00:29:37.260
You assembled your nuts and bolts.

00:29:37.260 --> 00:29:38.780
You built your model.

00:29:38.880 --> 00:29:40.540
You generated some Java classes.

00:29:40.660 --> 00:29:42.900
You wrote a bunch of
custom business logic.

00:29:43.120 --> 00:29:46.260
Things are looking good.

00:29:46.550 --> 00:29:48.290
runs like a dream.

00:29:48.360 --> 00:29:49.840
So far it doesn't look like much though.

00:29:50.100 --> 00:29:53.850
My direct web example was cool.

00:29:54.270 --> 00:29:57.440
And it looked okay,
but it's nothing you'd

00:29:57.440 --> 00:29:59.310
sell to a customer.

00:29:59.500 --> 00:30:01.810
It lacks a certain...

00:30:02.000 --> 00:30:03.110
Customization.

00:30:03.240 --> 00:30:06.310
So it's all about the chrome
and the racing stripes.

00:30:08.870 --> 00:30:11.590
We're going to show you how to do
that today using WebObjects Builder.

00:30:11.660 --> 00:30:18.140
So we're going to go ahead now and talk
about the last part of our MVC paradigm

00:30:18.140 --> 00:30:21.470
and talk about the presentation layer,
view layer.

00:30:21.720 --> 00:30:25.320
Today I'm going to talk
about WebObjects Builder.

00:30:25.320 --> 00:30:29.920
WebObjects Builder is our
visual content creation tool.

00:30:29.920 --> 00:30:34.510
Use it to build WoW components
out of the base dynamic elements

00:30:34.510 --> 00:30:36.820
that ship with WebObjects.

00:30:38.440 --> 00:30:42.450
WebObjects Builder ships with a rich
collection of reusable components.

00:30:42.680 --> 00:30:46.680
You drag them together,
plug them together.

00:30:46.800 --> 00:31:01.300
[Transcript missing]

00:31:01.920 --> 00:31:05.740
So the point of WebObjects
Builder is you've got this data,

00:31:05.740 --> 00:31:10.610
you've got this business logic,
we need to tie it to the UI.

00:31:10.790 --> 00:31:12.600
We need to bring it all together.

00:31:12.690 --> 00:31:18.090
So that's what you spend most of your
time doing in WoBuilder is saying.

00:31:18.370 --> 00:31:19.540
Got this.

00:31:19.640 --> 00:31:21.930
How do I display it?

00:31:22.150 --> 00:31:26.810
One of the cool features
of WebObjects Builder,

00:31:27.080 --> 00:31:32.580
pushing the idea of rapid application
development is our rapid turnaround mode.

00:31:32.630 --> 00:31:38.340
Once you get your projects built,
your custom classes written and all that,

00:31:38.400 --> 00:31:39.900
you want to sit down and tweak the UI.

00:31:40.030 --> 00:31:41.970
You want to make it great.

00:31:42.160 --> 00:31:44.810
A rapid turnaround mode
helps you with that.

00:31:45.650 --> 00:31:49.770
The idea is why should you have to

00:31:50.480 --> 00:31:54.450
Recompile your app every
time you make a UI change.

00:31:54.640 --> 00:31:58.600
So open your app in Xcode,
get it built and running,

00:31:58.670 --> 00:32:01.850
open the component you're
working with in Xcode,

00:32:01.890 --> 00:32:03.000
Your project's running.

00:32:03.020 --> 00:32:04.880
Open it in your browser.

00:32:05.090 --> 00:32:07.720
Tweak your component as you see fit.

00:32:08.090 --> 00:32:13.750
Reload your page in Xcode,
or reload your page in Safari.

00:32:14.110 --> 00:32:15.540
Repeat the cycle.

00:32:15.580 --> 00:32:18.750
No stopping your app, no rebuilding.

00:32:22.110 --> 00:32:26.380
A bunch of new features today in the
new release of WebObjects Builder.

00:32:26.380 --> 00:32:30.290
We're really trying to push our
standards compliance forward.

00:32:30.290 --> 00:32:33.860
It's one thing we've gotten a lot
of developer feedback from that,

00:32:33.860 --> 00:32:38.740
hey, you guys are supporting HTML 3
point something that's a thousand

00:32:38.740 --> 00:32:41.030
years old and we don't like that.

00:32:41.290 --> 00:32:47.000
So today we're supporting
HTML 4.0.1 transitional.

00:32:47.140 --> 00:32:53.790
We've improved the HTML generation
in the frameworks for people

00:32:53.790 --> 00:32:55.690
who are doing work with XHTML.

00:32:55.920 --> 00:32:58.240
XHTML isn't supported in
WebObjects Builder yet.

00:32:58.240 --> 00:33:01.760
I don't want to give that misimpression,
but we're working towards it.

00:33:01.760 --> 00:33:05.830
And we improved our CSS support.

00:33:06.820 --> 00:33:11.600
The newest, biggest, greatest feature,
I hope you guys love it today,

00:33:11.600 --> 00:33:14.450
is our WebKit-based preview mode.

00:33:14.770 --> 00:33:20.770
The preview mode in the previous
WebObjects Builder was lacking.

00:33:22.170 --> 00:33:30.290
is the founder of WebKit,
and he's going to talk about

00:33:30.290 --> 00:33:30.290
some of the features that we've

00:33:30.380 --> 00:33:34.000
An extended version of WebKit that
will support rendering all the

00:33:34.000 --> 00:33:36.750
WebObjects tags that you throw at it.

00:33:36.750 --> 00:33:40.160
And what we wanted to really give
you out of the box was what you see

00:33:40.540 --> 00:33:43.750
is what you get in the preview mode.

00:33:43.900 --> 00:33:49.740
So hopefully it will look in preview
mode as much as possible as it will

00:33:49.740 --> 00:33:54.100
look like in Safari as the same
rendering engine is being used.

00:34:03.140 --> 00:34:07.660
We haven't talked about what you build
with WebObjects Builder yet much.

00:34:07.660 --> 00:34:10.100
We've talked about the
parts of the data model.

00:34:10.100 --> 00:34:13.100
We've talked about Xcode
tweaking your Java classes.

00:34:13.100 --> 00:34:15.100
We haven't talked about WoE components.

00:34:15.100 --> 00:34:20.770
WoE components are the building blocks
of your UI when you're building a

00:34:20.810 --> 00:34:23.760
web application with WebObjects.

00:34:26.030 --> 00:34:28.580
I'm sure you've all
seen the store before.

00:34:28.610 --> 00:34:32.350
The store is a WebObjects application,
and there are lots of Wo components

00:34:32.410 --> 00:34:34.060
on that page right there.

00:34:36.050 --> 00:34:39.170
So, all WoW components start
out with an HTML template.

00:34:39.410 --> 00:34:42.450
They define the look of the template.

00:34:43.190 --> 00:34:50.770
Looks a lot like standard HTML,
except for these WebObjects tags.

00:34:53.030 --> 00:34:56.620
The other part of the
component is the WAD file.

00:34:56.650 --> 00:35:00.310
The WAD file is the glue between
your template and your app logic.

00:35:00.310 --> 00:35:05.530
It's how you say, I want this object
represented in this way.

00:35:08.510 --> 00:35:11.390
And when we do the
WebObjects Builder demo,

00:35:11.390 --> 00:35:14.280
you'll see how the
WAD file comes into play.

00:35:15.090 --> 00:35:22.550
And the last part is the Java class that
defines the logic of your component.

00:35:23.460 --> 00:35:25.500
How does it respond to this action?

00:35:25.530 --> 00:35:27.920
How does it respond to
that button being clicked,

00:35:27.950 --> 00:35:31.620
this link being clicked,
etc., etc.? All that gets

00:35:31.780 --> 00:35:34.440
defined on a per-component base.

00:35:34.440 --> 00:35:38.680
Every component has its own
Java class holding its implementation.

00:35:40.500 --> 00:35:42.600
So what are these going to
look like in your project?

00:35:42.720 --> 00:35:49.360
You're going to see mycomponent.html,
mycomponent.wad, and mycomponent.java.

00:35:53.900 --> 00:35:58.480
The top two items,
the HTML and the WAD file,

00:35:58.480 --> 00:36:01.260
get wrapped up into a .woe.

00:36:01.260 --> 00:36:02.500
It's a bundle.

00:36:02.500 --> 00:36:04.780
It's what WebObjects Builder opens.

00:36:04.900 --> 00:36:06.230
It's what you'll see in Xcode.

00:36:06.260 --> 00:36:09.570
Generally in Xcode it shows up
with a disclosure triangle next

00:36:09.570 --> 00:36:12.300
to it so you can see all of the
three individual components,

00:36:12.300 --> 00:36:15.160
but .woe.

00:36:15.160 --> 00:36:19.490
So now if we could go
back to the demo machine.

00:36:27.580 --> 00:36:31.160
So I'm going to launch the
new WebObjects Builder.

00:36:31.200 --> 00:36:37.920
If any of you installed the new
Xcode 2.1 DVD that came out today,

00:36:37.940 --> 00:36:42.120
and you installed the Xcode tools,
there were some postings to

00:36:42.370 --> 00:36:44.010
the mailing list last night.

00:36:45.090 --> 00:36:48.410
The new WebObjects Builder
appears to be broken.

00:36:48.670 --> 00:36:51.200
There was a defect we found
that the old WebObjects Builder

00:36:51.200 --> 00:36:53.230
was not being uninstalled.

00:36:53.340 --> 00:36:56.770
So just to be sure you're running
it from the correct place.

00:36:57.490 --> 00:37:02.220
The new WebObjects Builder
is installed in Developer,

00:37:02.220 --> 00:37:06.240
Applications, WebObjects,
WebObjects Builder.

00:37:06.240 --> 00:37:09.230
It's safe to delete the old one.

00:37:11.270 --> 00:37:14.450
So I talked about the
WebKit preview mode.

00:37:14.560 --> 00:37:18.990
I'd like to do a quick demo of that.

00:37:19.370 --> 00:37:21.500
Take the Apple homepage.

00:37:25.320 --> 00:37:26.740
The source.

00:37:26.740 --> 00:37:28.420
Copy all this.

00:37:28.450 --> 00:37:32.740
I'm going to paste it
into the source view,

00:37:32.740 --> 00:37:36.460
and I'm going to switch to preview.

00:37:36.460 --> 00:37:37.710
Oh, look.

00:37:47.580 --> 00:37:53.260
I don't see any... You notice
it loaded the images?

00:37:53.260 --> 00:37:59.770
And I don't see any
JavaScript on this page,

00:37:59.870 --> 00:38:00.930
but had it been there,
it would be running right now.

00:38:01.960 --> 00:38:07.000
So the WebKit preview mode is
really just about as close to

00:38:07.000 --> 00:38:08.590
Safari as you could possibly get.

00:38:08.660 --> 00:38:11.670
Okay, so...

00:38:15.020 --> 00:38:34.410
: So, for those of you that are
new to WebObjects Builder,

00:38:34.410 --> 00:38:34.410
let's talk about what it is,
how it works.

00:38:34.410 --> 00:38:34.410
You saw the preview mode, that's cool.

00:38:34.410 --> 00:38:34.410
In the layout mode,
actually let me open a component.

00:38:37.400 --> 00:38:40.410
For those of you that
are following along,

00:38:40.510 --> 00:38:47.400
I'm going to open the
three_wob trading cards demo,

00:38:47.400 --> 00:38:50.000
and I'm going to open the main.wo.

00:38:52.330 --> 00:38:54.200
So this is our layout mode.

00:38:54.250 --> 00:39:01.960
The idea is build your
WoW components visually.

00:39:02.580 --> 00:39:10.180
Drag in either HTML elements,
WebObjects elements, form elements,

00:39:10.210 --> 00:39:13.000
down into this layout mode.

00:39:13.000 --> 00:39:17.600
And let me open this project in Xcode
so you see the full integration.

00:39:28.900 --> 00:39:31.680
Again,
it's an older version of a project.

00:39:31.830 --> 00:39:33.160
It's going to ask you to upgrade a copy.

00:39:33.160 --> 00:39:34.650
That's perfectly safe.

00:39:34.720 --> 00:39:37.150
Just give it a new name.

00:39:54.800 --> 00:39:57.960
I'm going to reopen that component.

00:39:57.980 --> 00:40:02.760
So the layout mode is really
split into two separate views.

00:40:02.760 --> 00:40:06.000
The top, there's the content view.

00:40:06.310 --> 00:40:08.110
You're looking at

00:40:08.760 --> 00:40:11.830
A visual representation of your page,
the elements on it.

00:40:12.160 --> 00:40:17.700
And at the bottom you see all the
classes contained in your Xcode project.

00:40:17.780 --> 00:40:23.590
The application class, session class,
and I generated Java classes for

00:40:23.590 --> 00:40:28.530
the three entities in my model,
card, power, and

00:40:29.600 --> 00:40:41.400
[Transcript missing]

00:40:42.430 --> 00:40:48.670
I'm going to blow some of this content
away and we'll wire it back up.

00:41:00.020 --> 00:41:06.000
So I want to display
the name of each person,

00:41:06.000 --> 00:41:08.930
each card in this component.

00:41:09.020 --> 00:41:10.980
So I'm going to add two WoW strings.

00:41:10.980 --> 00:41:17.980
And I would like to display the cards.

00:41:21.710 --> 00:41:29.690
First name and we'll insert
a space and their surname.

00:41:29.840 --> 00:41:36.670
And all I did here to connect that,
I'll show you again, is click, drag,

00:41:36.700 --> 00:41:39.200
and as you get to the component
you want to bind it to,

00:41:39.200 --> 00:41:41.260
it highlights.

00:41:41.280 --> 00:41:43.490
And just lift the mouse up.

00:41:45.150 --> 00:41:47.500
You switch to the source view.

00:41:47.520 --> 00:41:50.320
Again, two split views.

00:41:50.400 --> 00:41:57.020
At the top you see the source,
the raw HTML and CSS of this document.

00:41:57.210 --> 00:42:02.890
And at the bottom is the
WAD file in its textual form.

00:42:02.890 --> 00:42:02.890
So the...

00:42:03.620 --> 00:42:06.900
We won't dive too deeply
into how the WAD file works,

00:42:06.960 --> 00:42:08.650
but it's basically--

00:42:10.230 --> 00:42:14.800
Element Name, Element Type,
and then this is a string.

00:42:14.930 --> 00:42:19.280
String most commonly has
its value attribute bound.

00:42:19.340 --> 00:42:23.380
This string will display
the card's first name.

00:42:25.060 --> 00:42:26.300
So, it's great.

00:42:26.400 --> 00:42:29.000
We have it all wired up.

00:42:29.090 --> 00:42:31.710
Switch back to Xcode.

00:42:33.940 --> 00:42:35.850
build and run the app.

00:42:35.850 --> 00:42:38.280
Take a minute to compile.

00:42:38.360 --> 00:42:40.230
It's up and running.

00:42:49.700 --> 00:42:55.300
There's our display group
displaying each of our cards.

00:42:55.300 --> 00:43:00.320
Navigate through,
change how many I'd like displayed.

00:43:01.100 --> 00:43:05.300
If you notice,
look through the source code.

00:43:05.330 --> 00:43:12.770
I didn't write any code to fetch these
objects from the database at all.

00:43:13.040 --> 00:43:14.690
Zero lines.

00:43:14.720 --> 00:43:16.470
The Display Group handled it all for me.

00:43:16.660 --> 00:43:19.420
EOF did all the heavy lifting.

00:43:19.450 --> 00:43:24.000
All I did was create a new project,
bring a model into it.

00:43:24.030 --> 00:43:27.880
From that model,
I generated some custom Java classes.

00:43:29.650 --> 00:43:38.110
and then in WebObjects Builder,
build a WoE component, tied the

00:43:38.960 --> 00:43:43.410
Data I wanted out of my
entities from my model to my UI,

00:43:43.670 --> 00:43:45.290
and there we go.

00:43:46.900 --> 00:43:49.970
One of the things to notice here,
if I could switch back to

00:43:51.040 --> 00:43:54.410
WebObjects Builder for a second,
is

00:43:57.900 --> 00:44:06.900
[Transcript missing]

00:44:09.330 --> 00:44:10.180
using CSS.

00:44:10.320 --> 00:44:12.360
There's the raw HTML.

00:44:12.450 --> 00:44:15.570
So we talked about the rapid
turnaround mode earlier.

00:44:16.360 --> 00:44:19.300
I threw some CSS into this to
make it look a little nicer,

00:44:19.300 --> 00:44:21.740
to make it look a bit more professional.

00:44:21.740 --> 00:44:24.290
So I'm going to go back.

00:44:25.800 --> 00:44:44.000
[Transcript missing]

00:44:54.500 --> 00:44:55.590
We saw WebObjects Builder.

00:44:55.660 --> 00:44:59.160
It's not really hard to build
great-looking components,

00:44:59.300 --> 00:45:02.490
to build great-looking apps.

00:45:02.670 --> 00:45:06.590
The separation between the

00:45:07.320 --> 00:45:21.310
: Thank you, Chris.

00:45:21.310 --> 00:45:21.310
I'm going to go ahead and get started.

00:45:21.310 --> 00:45:21.310
So, the WAD binding your actual classes
to your UI and the presentation

00:45:21.310 --> 00:45:21.310
layer being stored in HTML is a
good one because you can hand off

00:45:21.310 --> 00:45:21.310
those HTML files to someone who's

00:45:21.550 --> 00:45:30.990
is, frankly, probably better at
UI design than you are,

00:45:30.990 --> 00:45:30.990
a graphic designer,
someone who does that for a living.

00:45:30.990 --> 00:45:30.990
And as long as they don't
strip the WebObjects tags out,

00:45:31.230 --> 00:45:46.770
: Let them do their thing.

00:45:46.770 --> 00:45:46.770
Hand the HTML back to you.

00:45:46.770 --> 00:45:46.770
You've got a top-notch looking site.

00:45:46.770 --> 00:45:46.770
So, what have we covered today?

00:45:46.770 --> 00:45:46.770
We talked about the
WebObjects architecture.

00:45:49.700 --> 00:45:53.940
We talked about developer workflow,
using EOModeler to create new

00:45:54.090 --> 00:46:00.190
database schemas and new databases,
reverse engineering existing data stores,

00:46:00.230 --> 00:46:03.460
rapid prototyping with our
direct-to-star technologies,

00:46:03.460 --> 00:46:07.500
direct-to-web, direct-to-Java client,
direct-to-web services.

00:46:08.060 --> 00:46:11.830
We talked about writing custom
business logic in Xcode,

00:46:12.470 --> 00:46:15.930
working with the different
WebObjects projects in Xcode,

00:46:15.930 --> 00:46:19.690
and we talked about WebObjects
Builder and using that to

00:46:19.690 --> 00:46:21.730
write a top-notch web UI.

00:46:25.740 --> 00:46:30.710
If you have any questions,
need any documentation,

00:46:30.800 --> 00:46:36.900
More sample code, other resources,
developer.apple.com/webobjects has

00:46:36.900 --> 00:46:40.230
just about everything you need.

00:46:40.900 --> 00:46:44.440
There are some related sessions
I encourage all of you to check out,

00:46:44.580 --> 00:46:48.220
whether you're new to WebObjects or
whether you're a long-time veteran.

00:46:48.220 --> 00:46:54.660
The next session in this very room at
5 is WebObjects and J2E deployment.

00:46:56.610 --> 00:46:58.840
I'm going to be talking about
once you've built your app,

00:46:58.870 --> 00:47:02.000
how do you get it running
in a production setting?

00:47:02.210 --> 00:47:06.230
That's session 610 today,
this room at 5:00.

00:47:07.770 --> 00:47:10.400
There's an Administering
MySQL Databases session,

00:47:10.440 --> 00:47:14.290
session 648, Thursday at 9:00.

00:47:15.210 --> 00:47:18.200
Configuring and deploying
Oracle on OS X Server.

00:47:18.200 --> 00:47:21.340
We just got certified with
Oracle 10G and WebObjects,

00:47:21.380 --> 00:47:27.130
so Oracle's like one of the most popular
relational database systems in the world.

00:47:27.160 --> 00:47:30.500
If you're using Oracle,
check out the Configuring and

00:47:30.500 --> 00:47:32.670
Deploying on OS X Server session.

00:47:32.670 --> 00:47:34.220
That's Friday at 9.

00:47:35.900 --> 00:47:39.750
This is probably going to
be the most fascinating

00:47:40.150 --> 00:47:43.600
WebObjects session of the week,
bar none.

00:47:43.600 --> 00:47:48.520
The performance optimization session,
6.37, Friday at 2 p.m.

00:47:48.520 --> 00:47:52.130
We invited a bunch of guys from
the iTunes Music Store to come

00:47:52.320 --> 00:47:54.720
out and tell their horror stories.

00:48:10.680 --> 00:48:11.860
If you don't know,
the iTunes Music Store is the

00:48:11.860 --> 00:48:11.860
largest installed WebObjects
application in the world.

00:48:11.860 --> 00:48:11.860
It's a beast,
and these guys have seen everything.

00:48:11.860 --> 00:48:11.860
If you've done a deployment
and had a problem,

00:48:12.120 --> 00:48:14.590
They probably have a
story that can top you,

00:48:14.710 --> 00:48:18.560
and they're the right guys
to ask the questions to.

00:48:19.040 --> 00:48:20.250
They're brilliant.

00:48:20.510 --> 00:48:22.130
It's a fascinating session.

00:48:22.130 --> 00:48:26.540
That's again Friday at 2, session 637.

00:48:28.300 --> 00:48:33.240
And we're going to be around in
the Enterprise IT Lab all week.

00:48:33.280 --> 00:48:35.770
We have dedicated time
Wednesday at 9 a.m.

00:48:37.520 --> 00:48:40.170
If you have any questions
about development,

00:48:40.340 --> 00:48:44.870
deployment, you're new to the tools,
you're old to the tools, come and see us,

00:48:44.980 --> 00:48:45.600
come and hang out.

00:48:45.780 --> 00:48:48.740
Enterprise IT Lab, Wednesday at 9.

00:48:51.220 --> 00:48:53.920
and our Java and
WebObjects Feedback Forum,

00:48:53.920 --> 00:48:57.240
session 641, Friday at 3:30 PM.

00:48:57.460 --> 00:48:59.860
Please come and let us
know how we're doing.

00:48:59.910 --> 00:49:04.090
Let us know what you'd like to see,
what you hate, what you love.

00:49:06.870 --> 00:49:08.720
Who to contact for further information?

00:49:08.980 --> 00:49:12.670
Send email to webobjects@apple.com.

00:49:12.670 --> 00:49:14.160
We are listening.

00:49:14.160 --> 00:49:16.590
We love to hear what you have to say.

00:49:16.800 --> 00:49:20.350
If you find bugs, bugreport.apple.com.

00:49:20.350 --> 00:49:22.660
Please, please file radars.

00:49:22.670 --> 00:49:25.220
We love hearing your feedback.

00:49:25.220 --> 00:49:26.180
We want to fix it.

00:49:26.180 --> 00:49:27.890
We want to make it a great product.

00:49:27.890 --> 00:49:29.310
File bugs.