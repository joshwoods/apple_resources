WEBVTT

00:00:00.170 --> 00:00:02.410
Good afternoon and
welcome to session 211.

00:00:02.510 --> 00:00:08.430
This is Application Programming
with QTKit.

00:00:15.790 --> 00:00:19.460
My name is Tim Monroe and I've had the
pleasure of serving as the tech lead for

00:00:19.460 --> 00:00:22.840
QTKit for about the past year and a half.

00:00:22.930 --> 00:00:27.530
I'm sure you're all aware that QTKit is
a Cocoa framework for QuickTime.

00:00:27.700 --> 00:00:30.700
The Cocoa side of the ledger
is fairly straightforward.

00:00:30.700 --> 00:00:36.690
To say QTKit is a Cocoa framework means
that it is a set of Objective-C classes.

00:00:36.700 --> 00:00:41.120
The interfaces to the methods
in these classes use standard

00:00:41.120 --> 00:00:45.620
Cocoa data types like NSArrays,
NSDictionary's,

00:00:46.080 --> 00:00:52.170
file names are passed as NSStrings,
URLs as NSURLs.

00:00:52.570 --> 00:00:59.220
Changes in objects in the kit can be
announced to other objects in your

00:00:59.220 --> 00:01:04.400
application by means of notifications,
the standard Cocoa mechanism.

00:01:04.640 --> 00:01:10.460
And some of the objects in the QTKit have
delegate methods so that other objects in

00:01:10.540 --> 00:01:16.910
your application can actually take part
and modify the behavior of QTKit objects.

00:01:17.670 --> 00:01:20.380
So the QuickTime part
is a little tougher.

00:01:20.690 --> 00:01:24.240
QuickTime is a huge technology,
and it's simply not true

00:01:24.240 --> 00:01:28.100
to say that QTKit wraps the
entire QuickTime technology.

00:01:28.330 --> 00:01:32.470
Probably the fairest thing to say
is that QTKit is a Cocoa framework

00:01:32.470 --> 00:01:37.600
that allows you to open,
display, and manipulate QuickTime movies.

00:01:37.620 --> 00:01:41.590
So there's huge chunks of functionality
that we don't yet handle in QTKit that

00:01:41.590 --> 00:01:45.730
we ultimately would like to,
such as audio and video capture,

00:01:45.850 --> 00:01:48.920
broadcasting,
working with specific media types.

00:01:49.100 --> 00:01:51.590
Those are things that
we'd like your input on,

00:01:51.700 --> 00:01:54.720
where you'd like to see the QTKit go,
so that we can grow the

00:01:54.780 --> 00:01:56.760
QTKit to meet your needs.

00:01:58.790 --> 00:02:01.060
Now, Kit already has some
very important clients,

00:02:01.060 --> 00:02:03.340
and I've listed just three of them here.

00:02:03.340 --> 00:02:07.420
It turns out that all through Tiger,
people are turning to QTKit in

00:02:07.420 --> 00:02:09.700
order to display QuickTime movies.

00:02:09.910 --> 00:02:13.550
These three get special mention because
they are what I call key clients.

00:02:13.550 --> 00:02:17.170
They have not only used the Kit,
but they've also given

00:02:17.170 --> 00:02:19.630
us important feedback,
and more importantly,

00:02:19.740 --> 00:02:20.700
made demands on the Kit.

00:02:20.700 --> 00:02:26.700
So there are methods in the Kit that
can be traced to each one of these guys.

00:02:26.720 --> 00:02:30.230
Spotlight, for instance,
uses QTKit to display the thumbnail

00:02:30.230 --> 00:02:34.700
images of any movies that might turn
up in a search that you have executed.

00:02:34.700 --> 00:02:37.660
QuickTime Player,
as I'm sure you're aware,

00:02:37.860 --> 00:02:39.700
is built heavily on QTKit.

00:02:39.700 --> 00:02:43.610
Our goal was to put as much of the
functionality for opening and playing

00:02:43.740 --> 00:02:48.700
QuickTime movies into the framework
so that QuickTime Player could be

00:02:48.700 --> 00:02:49.700
a fairly thin layer on top of that.

00:02:49.700 --> 00:02:54.140
The benefit to you as developers,
of course, is that you get all that

00:02:54.140 --> 00:02:56.700
functionality basically for free.

00:02:56.700 --> 00:02:59.700
And also, you may have seen the
earlier keynote this week.

00:02:59.700 --> 00:03:04.820
Pixar has based a number of their
in-house movie production tools on QTKit,

00:03:04.820 --> 00:03:07.690
and we'll see a little bit of that later.

00:03:09.000 --> 00:03:10.360
So what are we going to do today?

00:03:10.410 --> 00:03:12.270
I'm going to give a
brief overview of QTKit.

00:03:12.340 --> 00:03:14.990
It's not going to be in tremendous
depth because you've got some really

00:03:15.060 --> 00:03:16.900
good documentation to work from.

00:03:16.900 --> 00:03:19.870
Then we will jump right
into hands on coding.

00:03:19.890 --> 00:03:23.630
I'll start off by building a couple
of command line tools to give you

00:03:23.680 --> 00:03:27.900
an idea of just how easy it is
to get up and running with QTKit.

00:03:27.900 --> 00:03:31.590
Then we will build from scratch
a graphical application,

00:03:31.650 --> 00:03:34.890
which is what most of you
are likely to want to do.

00:03:34.970 --> 00:03:39.900
That is to display QuickTime movies
in an application on the screen.

00:03:39.900 --> 00:03:44.390
And finally, we'll end with some fairly
advanced considerations,

00:03:44.500 --> 00:03:48.620
in particular how to use QTKit in
a multi-threaded environment.

00:03:48.900 --> 00:03:52.840
Now I'm skeptical that we're actually
going to have time for summary or Q&A,

00:03:52.920 --> 00:03:54.900
but that's not all bad.

00:03:55.120 --> 00:03:58.720
Because later this evening,
we have a... a three hour

00:03:58.850 --> 00:04:02.900
session over in the Tiger Lab,
which will be devoted entirely to QTKit.

00:04:02.980 --> 00:04:04.810
So come on in, bring your questions.

00:04:04.860 --> 00:04:06.900
We can look at your code.

00:04:06.900 --> 00:04:10.900
If you have existing code that
uses the Cocoa QuickTime classes,

00:04:10.900 --> 00:04:13.720
NSMovie or NSMovieView,
maybe we can help you port them over.

00:04:13.900 --> 00:04:17.400
And then if that's not enough,
we'll be back here tomorrow

00:04:17.400 --> 00:04:23.330
morning in the Graphics and Imaging
Lab to continue that discussion.

00:04:23.930 --> 00:04:27.290
So let me give a quick
overview of what's in QTKit.

00:04:27.360 --> 00:04:32.600
QTKit currently consists of five public
classes that are listed there in white,

00:04:32.600 --> 00:04:34.760
and two data structures
that you'll be working with,

00:04:34.870 --> 00:04:36.760
which are listed in blue.

00:04:36.820 --> 00:04:39.040
QTMovieView is just what you'd expect.

00:04:39.040 --> 00:04:42.840
It's a view object where you will
display QuickTime content and

00:04:42.930 --> 00:04:46.260
allow the user to interact with it.

00:04:46.330 --> 00:04:51.100
The next four public classes
are object-oriented wrappers

00:04:51.100 --> 00:04:56.560
around QuickTime data types,
in particular movies, tracks, media,

00:04:56.560 --> 00:04:58.300
and data references.

00:04:58.370 --> 00:05:03.710
And finally, we have the two structures,
which are our ways of indicating

00:05:03.710 --> 00:05:06.220
times or time ranges in a movie.

00:05:06.750 --> 00:05:08.600
So let's look at QTTime.

00:05:08.660 --> 00:05:11.320
As you can see,
there are three fields here.

00:05:11.320 --> 00:05:16.440
The first one is a duration
or time value for a movie.

00:05:16.590 --> 00:05:21.240
Now that value is always interpreted
relative to the time scale field,

00:05:21.400 --> 00:05:25.190
which is the number of units
per second in the time value.

00:05:25.280 --> 00:05:28.980
Finally, we have a flags field,
which allows us to indicate

00:05:28.980 --> 00:05:31.280
various things about the QT time.

00:05:31.280 --> 00:05:34.830
For instance,
if you were to pass into us a QT time

00:05:34.830 --> 00:05:38.850
that had a time scale of zero,
which is invalid,

00:05:39.200 --> 00:05:42.530
then we would pass you back a
QT time that had the QT time

00:05:42.610 --> 00:05:46.320
is indefinite bit set,
essentially indicating to you that

00:05:46.330 --> 00:05:48.390
you should ignore the other fields.

00:05:48.720 --> 00:05:51.860
There are a large number of utility
functions that you can use to

00:05:52.190 --> 00:05:57.540
fill out a QT time structure or
to operate on QT time structures.

00:05:57.690 --> 00:06:00.920
So you can see the QT make time,
you give us the time

00:06:00.920 --> 00:06:04.960
value and the time scale,
and we'll pass you back an appropriately

00:06:04.960 --> 00:06:06.600
filled out QT time structure.

00:06:06.600 --> 00:06:12.340
Or if you have two QT time structures and
you'd like to add them to one another,

00:06:12.440 --> 00:06:15.600
you can use the QT time
increment function.

00:06:18.070 --> 00:06:22.140
Finally, as an example,
if you have a QT time structure

00:06:22.140 --> 00:06:25.620
and you'd like it represented in
another time scale for some reason,

00:06:25.620 --> 00:06:30.600
you can use the QT make
time scaled function.

00:06:31.470 --> 00:06:34.500
QTTimeRange is again a
very simple structure.

00:06:34.550 --> 00:06:39.270
It indicates a range within a movie
and it is just what you'd expect.

00:06:39.420 --> 00:06:43.120
It's a QTTime structure that
indicates the start time and another

00:06:43.140 --> 00:06:44.800
one that indicates the duration.

00:06:45.010 --> 00:06:49.780
And once again there's a large number
of utility functions you can use to

00:06:49.780 --> 00:06:55.070
fill out QTTimeRange structures or to
perform various operations on them.

00:06:56.160 --> 00:06:58.830
QTMovie is the first
class I'll talk about.

00:06:58.850 --> 00:07:02.220
It is by far the richest class in QTKit.

00:07:02.220 --> 00:07:05.980
There's a large number of functions or
methods that you'll want to use here.

00:07:06.100 --> 00:07:14.190
There's a fairly broad number,
spectrum of methods that you can

00:07:14.190 --> 00:07:18.120
use to create a QTMovie object.

00:07:18.320 --> 00:07:20.100
And I've listed just some of them here.

00:07:20.150 --> 00:07:24.520
For instance, if you give us a file name,
we will read the movie from that

00:07:24.690 --> 00:07:27.100
file and give you a QTMovie object.

00:07:27.100 --> 00:07:30.070
You can also pass us a URL,
a data reference.

00:07:30.070 --> 00:07:33.100
You may have your movie
data in an NSData block.

00:07:33.100 --> 00:07:36.350
Or finally,
you could put a movie into the Nib

00:07:36.350 --> 00:07:40.960
file and read it out of the Nib
file with the movie named method.

00:07:41.100 --> 00:07:47.100
You'll notice that most of these
methods have an error parameter.

00:07:47.310 --> 00:07:51.590
So that if you, if we encounter an error,
when trying to open the movie

00:07:51.600 --> 00:07:56.180
that you've indicated to us,
we can pass you back an NSError object,

00:07:56.180 --> 00:07:58.100
which will indicate to
you what error occurred,

00:07:58.100 --> 00:08:01.180
and in fact will give you
a localized string that you

00:08:01.180 --> 00:08:02.970
could display to the user.

00:08:04.660 --> 00:08:08.580
QTMovie, as I said, is a very rich class,
and this is just a small summary of

00:08:08.730 --> 00:08:10.420
some of the methods that are in it.

00:08:10.450 --> 00:08:13.520
There are methods for going to the
beginning and the end of the movie.

00:08:13.550 --> 00:08:15.740
There's a method for
getting the current time,

00:08:15.770 --> 00:08:19.600
and notice that it gives you
back a QT time structure.

00:08:19.640 --> 00:08:23.360
If you want,
you can get a dictionary that contains

00:08:23.360 --> 00:08:28.600
key value pairs for all the publicly
defined attributes in a movie.

00:08:28.600 --> 00:08:32.600
There are a number of editing methods,
for instance, delete segment,

00:08:32.600 --> 00:08:34.600
which we'll work with in a minute.

00:08:34.620 --> 00:08:37.160
If you want to get an array
of all the tracks in a movie,

00:08:37.160 --> 00:08:38.400
we have a tracks method.

00:08:38.400 --> 00:08:41.490
And the last two methods here
are particularly important.

00:08:41.490 --> 00:08:45.650
I mentioned that QuickTime is
a very broad technology,

00:08:45.800 --> 00:08:48.600
and that QTKit currently
wraps only a part of it.

00:08:48.600 --> 00:08:52.180
So it's fairly likely that if
you're doing intricate stuff,

00:08:52.180 --> 00:08:54.590
you'll want to use those Carbon APIs.

00:08:54.730 --> 00:08:57.350
To do that,
you're going to need either the movie

00:08:57.350 --> 00:09:00.630
or the movie controller identifier,
and you can get those with

00:09:00.710 --> 00:09:03.460
the QuickTime movie or the
QuickTime movie controller method.

00:09:05.680 --> 00:09:08.970
QTTrack, as you know,
a QuickTime movie consists

00:09:09.200 --> 00:09:10.830
of a number of tracks.

00:09:10.930 --> 00:09:16.150
So we have the QTTrack object to
correspond to a QuickTime track.

00:09:16.260 --> 00:09:20.160
Currently there's only one way
to create a QT track object,

00:09:20.170 --> 00:09:23.240
which is to already have a
QuickTime track and then to use

00:09:23.240 --> 00:09:26.000
the initWithQuickTimeTrack method.

00:09:26.020 --> 00:09:28.740
Once again,
looking at the final method there,

00:09:28.760 --> 00:09:32.610
if you need to use
Carbon APIs that operate on tracks,

00:09:32.660 --> 00:09:37.890
you can get the track identifier
associated with the QT track object.

00:09:38.770 --> 00:09:42.980
Now a class that you're likely to
use quite extensively is QTMovieView.

00:09:42.990 --> 00:09:48.700
This is a subclass of NSView that is
associated with the QTMovie object.

00:09:48.830 --> 00:09:51.920
You make that association
with the SetMovie method,

00:09:52.190 --> 00:09:54.700
which is the first one I've listed there.

00:09:54.710 --> 00:09:58.640
There are a number of attributes that
you can get and set on the MovieView.

00:09:58.700 --> 00:10:01.560
For instance,
you can determine whether the controller

00:10:01.560 --> 00:10:05.700
bar that's drawn at the bottom of
a movie is visible or invisible.

00:10:05.740 --> 00:10:09.750
You can set whether resizing
the view preserves the aspect

00:10:09.750 --> 00:10:11.430
ratio of the movie or not.

00:10:11.700 --> 00:10:16.270
If you have that attribute set,
then parts of the MovieView that

00:10:16.540 --> 00:10:19.690
are not drawn with the movie data
will be painted with a fill color,

00:10:19.820 --> 00:10:21.700
which is specifiable by you.

00:10:21.700 --> 00:10:26.570
And also you can set the editable
state of the movie in the MovieView.

00:10:28.180 --> 00:10:29.300
So much for theory.

00:10:29.300 --> 00:10:32.820
Let's actually do some
work with QTKit here.

00:10:32.820 --> 00:10:35.840
And let's move over to demo one, please.

00:10:39.100 --> 00:12:58.000
[Transcript missing]

00:12:58.390 --> 00:13:00.800
Okay, so we've opened the movie,
we've made it editable,

00:13:00.870 --> 00:13:01.660
now let's edit it.

00:13:01.890 --> 00:13:06.980
We do that with the delete segment
method in the next line of code,

00:13:06.990 --> 00:13:09.300
and that chops out the specified segment.

00:13:09.300 --> 00:13:11.900
Then we can call the
updateMovieFile method,

00:13:11.900 --> 00:13:16.290
and that will update the movie file
associated with this QTMovie object.

00:13:16.300 --> 00:13:19.210
So let's actually run this.

00:13:19.250 --> 00:13:24.120
First thing I want to do is
I've got a movie called abc.move

00:13:24.120 --> 00:13:26.300
in the current directory.

00:13:26.300 --> 00:13:32.300
Let's copy that into the
specified location in /tmp.

00:13:32.300 --> 00:13:37.910
Now let's build our tool.

00:13:44.250 --> 00:13:47.870
You can see I'm using C compiler,
telling it what my output file is,

00:13:47.970 --> 00:13:49.760
what my input file is.

00:13:49.760 --> 00:13:52.230
And notice that I'm linking
against the QTKit framework

00:13:52.710 --> 00:13:54.190
and the foundation framework.

00:13:54.340 --> 00:13:57.100
So let's build that tool.

00:13:57.160 --> 00:13:58.370
That took no time at all.

00:13:58.470 --> 00:14:00.580
And now let's run it.

00:14:01.740 --> 00:14:06.910
Okay, so let's open the original file
and we'll see that it's a six

00:14:07.020 --> 00:14:11.930
second movie that has three frames,
each frame is two seconds long.

00:14:12.030 --> 00:14:13.600
Nothing exciting there.

00:14:13.600 --> 00:14:18.040
Now let's open the edited movie.

00:14:21.440 --> 00:14:25.890
And it should be just the same,
except that it should have

00:14:25.950 --> 00:14:28.750
the final two seconds cut out.

00:14:29.080 --> 00:14:32.710
And indeed when we play it we see
that it is now four seconds long,

00:14:32.710 --> 00:14:34.620
missing the last frame.

00:14:34.630 --> 00:14:39.680
So there was a very simple command line
tool that did actual interesting work.

00:14:40.150 --> 00:14:45.500
So let's quit that and
let's do one more example.

00:14:46.970 --> 00:14:52.780
I'm moving to another directory
where I have this move to 3GP.m file,

00:14:52.870 --> 00:14:55.090
and let's take a look at that.

00:14:55.390 --> 00:14:57.920
This is actually simpler than
the one we just considered.

00:14:58.230 --> 00:15:02.390
What this does is it will open
that same movie file and then it

00:15:02.390 --> 00:15:05.180
will export it into a 3GPP file.

00:15:05.180 --> 00:15:09.080
That is to say a file that is
suitable for streaming to a 3GPP

00:15:09.180 --> 00:15:11.300
handset such as a cell phone.

00:15:11.300 --> 00:15:17.450
So again we include the QTKit headers,
we create our auto-release pool,

00:15:17.630 --> 00:15:23.420
later release it, we open the movie with
exactly the same line of code,

00:15:23.420 --> 00:15:26.300
and what we want to use now
is the write-to-file method.

00:15:26.300 --> 00:15:29.750
Write-to-file is a general method
for taking an existing movie

00:15:29.750 --> 00:15:33.260
and putting it into a different
file in some different form.

00:15:33.450 --> 00:15:37.300
That could mean flattening the movie,
it could mean exporting the movie,

00:15:37.300 --> 00:15:40.160
in this case we want to export the movie.

00:15:40.300 --> 00:15:41.300
How do we do that?

00:15:41.300 --> 00:15:45.480
Well, the key is this "with
attributes" dictionary.

00:15:45.580 --> 00:15:48.170
And if you look here,
when we create the dictionary,

00:15:48.230 --> 00:15:52.810
we add in a key value pair that
says "I want you to export the

00:15:52.880 --> 00:16:00.380
movie" and I want the type of the
exported file to be a 3GPP file.

00:16:01.630 --> 00:16:04.790
Notice that we did not, in this case,
need to make the movie editable,

00:16:04.820 --> 00:16:06.200
because we're not editing the movie.

00:16:06.200 --> 00:16:09.040
We're opening it and then writing
it out as some other form.

00:16:09.200 --> 00:16:11.000
So now let's run this guy.

00:16:11.000 --> 00:16:13.080
First we better build it.

00:16:17.870 --> 00:16:21.560
Copy that command line there.

00:16:21.600 --> 00:16:23.550
Build the tool.

00:16:25.510 --> 00:16:26.640
Run it.

00:16:26.660 --> 00:16:36.910
And now let's open that
file at /temp/sample.3gp.

00:16:37.470 --> 00:16:40.800
And notice that this is smaller
than the original movie.

00:16:40.920 --> 00:16:44.870
That's because the 3GPP spec
says these are smaller movies.

00:16:44.940 --> 00:16:48.400
This is 176 by 144 pixels.

00:16:48.400 --> 00:16:51.080
Now, if the original movie
had had a soundtrack,

00:16:51.170 --> 00:16:55.370
this export operation would also
have transcoded the soundtrack

00:16:55.510 --> 00:16:58.400
into a 3GPP compatible form.

00:16:58.400 --> 00:17:00.400
So that's all I want to do for you here.

00:17:00.400 --> 00:17:06.580
What I'd like to do now is bring up
the tech lead for the QuickTime player.

00:17:06.580 --> 00:17:08.350
Could I go back to slides please?

00:17:08.400 --> 00:17:08.400
Thank you.

00:17:08.440 --> 00:17:12.840
For the QuickTime player application
to give us a few thoughts on

00:17:12.840 --> 00:17:15.370
QuickTime player's use of QTKit.

00:17:15.400 --> 00:17:17.400
Gary Flint.

00:17:17.510 --> 00:17:19.400
Thanks.

00:17:19.400 --> 00:17:21.360
Thank you.

00:17:22.930 --> 00:17:23.740
Are we on?

00:17:23.770 --> 00:17:25.120
OK.

00:17:26.210 --> 00:17:30.040
One of the challenges for the QTKit team,
of course,

00:17:30.040 --> 00:17:36.560
was to build a framework that would not
only encompass some subset of QuickTime,

00:17:36.570 --> 00:17:39.760
but also create an interface that
looked familiar to Cocoa programmers.

00:17:39.910 --> 00:17:44.950
Because those of you familiar
with the QuickTime APIs know

00:17:44.950 --> 00:17:48.070
they're very different indeed.

00:17:48.210 --> 00:17:51.270
So I'd like to show some examples
of integrating QTKit with

00:17:51.270 --> 00:17:55.870
an AppKit-based application,
of which the QuickTime player

00:17:56.110 --> 00:17:59.170
in QuickTime 7.0 is.

00:17:59.310 --> 00:18:02.390
The first feature I'm going to
show is the code it required for

00:18:02.390 --> 00:18:04.820
us to implement a multiple undo.

00:18:04.820 --> 00:18:08.510
The old QuickTime APIs supported
single-level undo.

00:18:08.860 --> 00:18:12.290
And when we were working
on the Cocoa-based player,

00:18:12.460 --> 00:18:14.160
we certainly wanted to
support multiple undo,

00:18:14.190 --> 00:18:16.440
because most Cocoa applications do.

00:18:16.600 --> 00:18:18.080
The decision was, is that a play-based?

00:18:18.080 --> 00:18:19.820
Is it a clear feature or a kit feature?

00:18:19.950 --> 00:18:24.950
Fortunately for you, and for us,
the feature was pushed down into the kit.

00:18:25.030 --> 00:18:27.340
So the kit gives us
multiple undo support.

00:18:27.470 --> 00:18:33.480
And here's what it takes to access that
functionality in your own application.

00:18:33.480 --> 00:18:36.330
This may look a little oversimplified,
but this is actually it.

00:18:36.340 --> 00:18:38.560
As Tim mentioned earlier,
you have to turn on

00:18:38.610 --> 00:18:40.790
editability of a movie.

00:18:40.800 --> 00:18:45.420
Once you've built your user interface
using Interface Builder and connected

00:18:45.420 --> 00:18:50.450
up your edit menu items appropriately,
it all just works if you're

00:18:50.710 --> 00:18:52.580
using a Qt movie view.

00:18:52.740 --> 00:18:55.480
And this Qt kit,
besides providing support

00:18:55.740 --> 00:18:57.620
for multiple undo,
of course,

00:18:57.620 --> 00:19:04.390
is implementing most of the high-level
editing features of the edit menu,

00:19:04.400 --> 00:19:07.160
cut, copy, paste, et cetera.

00:19:07.210 --> 00:19:13.070
The next example demonstrates
the code we had to write in the

00:19:13.070 --> 00:19:18.080
Cocoa player to support drag and drop.

00:19:18.080 --> 00:19:20.520
It may look like we didn't
finish the slide here,

00:19:20.520 --> 00:19:23.440
but this is actually it.

00:19:23.440 --> 00:19:25.760
The Qt kit completely implements
drag and drop support.

00:19:25.760 --> 00:19:30.000
If you turn on editability,
it's just there.

00:19:30.000 --> 00:19:32.660
If you're familiar with
the old Carbon APIs,

00:19:32.660 --> 00:19:36.520
it did take one line of code in the
old Carbon APIs to enable the movie

00:19:36.520 --> 00:19:38.460
controller to support drag and drop.

00:19:38.460 --> 00:19:41.740
But we're actually not even using
that functionality in Qt kit.

00:19:41.860 --> 00:19:45.010
Drag and drop has been re-implemented
so that it supports all the

00:19:45.020 --> 00:19:48.080
drag and drop features you would
expect in a Cocoa application.

00:19:48.080 --> 00:19:56.140
I think the Qt kit team had a motto,
which should be less code, more features.

00:19:56.730 --> 00:20:00.020
The next example here
is saving a document.

00:20:00.380 --> 00:20:03.480
Tim showed earlier how to update
a movie file as well as how

00:20:03.490 --> 00:20:05.600
to write to a new movie file.

00:20:05.700 --> 00:20:08.460
In QTKit,
basically we have to make one choice when

00:20:08.500 --> 00:20:12.900
the user requests to save a document,
and that's can this movie

00:20:13.150 --> 00:20:15.600
be saved on top of itself?

00:20:15.600 --> 00:20:19.600
Some movie files, some formats cannot,
such as .mp4.

00:20:19.600 --> 00:20:21.440
They have to be saved
into a separate file.

00:20:21.650 --> 00:20:24.170
So this is the extent of the
logic in QuickTime Player to

00:20:24.170 --> 00:20:25.570
make that determination.

00:20:25.600 --> 00:20:28.600
If it can't be saved on itself,
we save it as a separate file.

00:20:28.600 --> 00:20:32.600
Otherwise, we save the file in place.

00:20:32.830 --> 00:20:37.230
And here's the implementation
of the method to actually update

00:20:37.230 --> 00:20:39.600
the movie file in the player.

00:20:39.600 --> 00:20:44.600
If it's a save operation,
we simply call updateMovieFile.

00:20:44.600 --> 00:20:48.630
So even in the player,
saving an edited movie is as simple

00:20:48.810 --> 00:20:51.360
as the sample that Tim gave earlier.

00:20:52.110 --> 00:20:53.750
The next example

00:20:55.280 --> 00:20:58.040
QTKit is listening for notifications.

00:20:58.130 --> 00:21:02.070
If you use the Carbon APIs and you've
had to deal with an action filter,

00:21:02.070 --> 00:21:06.000
you know that there are a
lot of different actions.

00:21:06.000 --> 00:21:07.440
You have to decide what
you're going to listen to,

00:21:07.440 --> 00:21:09.040
what you're not interested
in listening to,

00:21:09.040 --> 00:21:14.460
and they have different parameters,
different, and sometimes slightly

00:21:14.710 --> 00:21:16.730
different behaviors.

00:21:19.100 --> 00:21:24.140
QTKit has basically encapsulated these
mechanisms as well as a few additional

00:21:24.210 --> 00:21:27.020
mechanisms behind Cocoa notifications.

00:21:27.020 --> 00:21:30.970
So you can basically register to
listen to notifications that your

00:21:30.970 --> 00:21:33.020
application is interested in.

00:21:33.020 --> 00:21:36.890
In this case, this shows listening to a
movie edited notification.

00:21:36.900 --> 00:21:44.010
The next slide shows a few additional
notifications that the kit supports,

00:21:44.170 --> 00:21:46.830
listening to movie size
change notifications,

00:21:46.900 --> 00:21:47.920
did end, etc.

00:21:48.350 --> 00:21:52.640
Why are there of wired movie support
for enter and exit full screen.

00:21:52.650 --> 00:21:57.800
One that I'd like to point out here
is the load state change notification,

00:21:57.800 --> 00:22:00.740
because that was not an
action in the Carbon API.

00:22:00.740 --> 00:22:02.940
It was actually a toolbox call.

00:22:02.950 --> 00:22:07.330
The old player, the Carbon player,
actually had probably over 150 lines

00:22:07.330 --> 00:22:11.640
of code dedicated to monitoring
the movie load state and knowing

00:22:11.960 --> 00:22:15.100
when the load state had changed
so it could do the right thing.

00:22:15.140 --> 00:22:17.600
But all that functionality is
now implemented in the kit.

00:22:17.650 --> 00:22:20.180
So all you have to do is listen
for a load state notification,

00:22:20.180 --> 00:22:28.100
and your application will receive it
when QtKit sends the notification.

00:22:28.100 --> 00:22:31.520
So if you're wondering how
much of QtKit we've actually

00:22:31.520 --> 00:22:37.970
used in QuickTime Player,
we're using the vast majority of

00:22:38.070 --> 00:22:40.880
the calls and features of QtKit.

00:22:40.940 --> 00:22:45.830
Since QtKit covers the basic
functionality for playback and file

00:22:45.830 --> 00:22:47.540
handling functionality that you'd want.

00:22:47.540 --> 00:22:51.050
And in QuickTime application,
it allows us to focus on the unique

00:22:51.200 --> 00:22:53.360
features of QuickTime Player.

00:22:53.370 --> 00:22:56.660
And I'd say that's the same
reason for anyone to adopt QtKit.

00:22:56.660 --> 00:22:59.460
It handles all the basic
functionality for you,

00:22:59.460 --> 00:23:02.700
and you can focus on whatever
makes your application unique.

00:23:02.700 --> 00:23:04.090
Thanks.

00:23:10.070 --> 00:23:13.340
Thank you, Gary.

00:23:13.350 --> 00:23:16.230
So I don't think you came here
to build command line tools,

00:23:16.450 --> 00:23:19.000
so I think you want to
build some GUI tools.

00:23:19.050 --> 00:23:22.840
And to lead us through that process,
I'd like to bring up the person who is

00:23:22.950 --> 00:23:28.490
in charge of the documentation for QTKit,
and that is Tom Maremaa.

00:23:33.100 --> 00:23:35.910
Thanks, Tim.

00:23:36.100 --> 00:23:39.300
QTKit, awesome or what?

00:23:39.300 --> 00:23:41.220
Good afternoon.

00:23:41.300 --> 00:23:44.740
Quickly, I'd like to get a show of hands.

00:23:44.870 --> 00:23:47.460
How many of you guys out
there are Cocoa developers?

00:23:47.670 --> 00:23:48.550
Do I see any?

00:23:48.700 --> 00:23:50.300
Wow, awesome.

00:23:50.300 --> 00:23:54.220
How many of you guys are
QuickTime developers?

00:23:54.570 --> 00:23:55.320
Not bad.

00:23:55.770 --> 00:23:58.730
How many of you guys like to cook?

00:23:58.850 --> 00:23:59.790
Let's see some show of hands.

00:23:59.920 --> 00:24:00.490
All right.

00:24:00.790 --> 00:24:03.420
Good things happen in the kitchen.

00:24:03.520 --> 00:24:06.580
Good recipes come out of the kitchen.

00:24:06.580 --> 00:24:12.170
The recipe for the QTKit player
app came out of this eco-friendly

00:24:12.170 --> 00:24:19.780
brown paper napkin from the
Cafe Mac cafeteria on the Apple campus.

00:24:19.780 --> 00:24:23.060
So from this,
rather than pass this around to you guys,

00:24:23.060 --> 00:24:28.350
I thought, Hey,
why don't we blow it up full screen?

00:24:29.190 --> 00:24:32.970
I'd like to do three things
here with my QTKit Player app.

00:24:33.120 --> 00:24:37.370
Number one, I want to import,
and I want to import everything,

00:24:37.470 --> 00:24:40.090
all the media types,
variety of media types

00:24:40.090 --> 00:24:44.100
that QuickTime supports,
and that's 200 and counting.

00:24:44.690 --> 00:24:46.630
Number two,

00:24:46.780 --> 00:24:50.620
I'd like to do three things
here with my QtKit player app.

00:24:50.620 --> 00:24:54.870
Number one, I want to import,
and I want to import everything,

00:24:55.170 --> 00:24:57.670
all the media types,
a variety of media types

00:24:57.810 --> 00:24:59.000
that QuickTime supports.

00:24:59.000 --> 00:25:02.100
And that's 200 and counting.

00:25:03.110 --> 00:25:18.080
Number two,
I can really do take advantage

00:25:18.080 --> 00:25:19.700
of the editing capabilities.

00:25:19.780 --> 00:25:22.700
So with that,
let's move forward to demo one,

00:25:22.700 --> 00:25:25.480
and let's get cooking.

00:25:44.600 --> 00:25:46.240
Welcome to my kitchen.

00:25:46.240 --> 00:25:50.610
As you can see, I've got an appetizer,
which I'm going to build from scratch.

00:25:50.640 --> 00:25:52.600
I've got something in the oven.

00:25:52.610 --> 00:25:55.680
If you guys downloaded the sample code,
you've got it as well.

00:25:55.720 --> 00:26:00.470
I also have the cookbooks,
the QTKit reference, programming guide,

00:26:00.500 --> 00:26:03.500
and the update to QuickTime 7.

00:26:03.910 --> 00:26:05.470
And I have something in the freezer.

00:26:05.620 --> 00:26:09.100
And finally,
I have a lot of media goodies.

00:26:09.170 --> 00:26:16.010
And I want my QTKit player to, as I say,
do things with my media goodies.

00:26:16.200 --> 00:26:19.970
So with that in mind, let's get started.

00:26:20.790 --> 00:26:24.980
With Xcode, let's launch Xcode and
let's build it from scratch.

00:26:25.020 --> 00:26:28.640
Maybe you guys want to
follow this along with me,

00:26:28.640 --> 00:26:31.510
at least take it up to a certain point.

00:26:33.150 --> 00:26:36.640
Obviously, start my new project,
and what am I looking at?

00:26:36.670 --> 00:26:39.600
I'm looking at a
Cocoa document-based project.

00:26:39.710 --> 00:26:40.550
What do we want to call it?

00:26:40.720 --> 00:26:45.100
QTKit, how about just Simple Guy Player?

00:26:45.330 --> 00:26:47.680
Let's be imaginative, right?

00:26:48.400 --> 00:26:51.540
There's my Simple Guy player.

00:26:51.590 --> 00:27:00.130
And if I open it up,
I can see what I have.

00:27:01.490 --> 00:27:06.260
First thing that I need to do,
I need to add to my project

00:27:06.400 --> 00:27:08.070
the QTKit framework.

00:27:08.240 --> 00:27:10.180
Well, where does that live?

00:27:10.230 --> 00:27:13.300
That lives in the system folder.

00:27:14.760 --> 00:27:20.050
Library, where else would it be?

00:27:20.150 --> 00:27:25.190
Frameworks, and with a little bit of
scrolling if I can get there.

00:27:26.170 --> 00:27:27.280
Hello?

00:27:27.320 --> 00:27:27.790
Down.

00:27:27.890 --> 00:27:29.220
There it is.

00:27:29.270 --> 00:27:31.600
That's what I need to add.

00:27:32.700 --> 00:27:36.900
Add it to my target, and I'm cooking,
okay?

00:27:36.950 --> 00:27:43.090
Next thing that I want to do is
I'd like to take a look at my

00:27:45.000 --> 00:27:56.900
[Transcript missing]

00:28:07.090 --> 00:28:17.490
In my Info.plist, QuickTime file,
I think this is correct.

00:28:19.600 --> 00:28:23.940
Maybe Tim can help me out on this one,
huh?

00:28:23.940 --> 00:28:28.100
My file extensions for QuickTime are mov,
right?

00:28:28.260 --> 00:28:35.040
And my OS types are the
QuickTime file types,

00:28:35.810 --> 00:28:37.980
which are mov.

00:28:38.080 --> 00:28:43.850
So I'm going to save
that in my info.p list.

00:28:43.850 --> 00:28:43.850
Next,

00:28:45.300 --> 00:28:49.230
Let's go and launch Interface Builder.

00:28:49.760 --> 00:28:53.290
Hey, where is our QTKit palette?

00:28:56.510 --> 00:28:58.070
Let's find it.

00:28:58.070 --> 00:29:00.850
The QTKit palette resides

00:29:03.230 --> 00:29:10.240
Of all places, let's open up our QTKit.

00:29:10.270 --> 00:29:15.830
Don't ask me to explain why,
but it does live in the extras.

00:29:22.200 --> 00:29:25.080
is that not able to open it up?

00:29:25.140 --> 00:29:26.680
Just add.

00:29:26.700 --> 00:29:28.400
There we go.

00:29:33.200 --> 00:29:34.660
You won't let me open up extras?

00:29:34.660 --> 00:29:35.140
There it is.

00:29:35.140 --> 00:29:38.200
There's some palettes,
and there's my QTKit palette.

00:29:38.200 --> 00:29:39.960
Okay.

00:29:39.960 --> 00:29:48.550
Why don't I close my
preferences very quickly,

00:29:48.550 --> 00:29:48.550
and let's just do some

00:29:50.100 --> 00:29:51.520
You won't let me open up extras?

00:29:51.620 --> 00:29:52.040
There it is.

00:29:52.040 --> 00:29:55.100
There's some palettes,
and there's my QTKit palette.

00:29:55.100 --> 00:29:56.860
Okay.

00:29:56.860 --> 00:30:03.790
Why don't I close my
preferences very quickly,

00:30:03.790 --> 00:30:03.790
and let's just do some

00:30:09.410 --> 00:30:10.760
You won't let me open up extras?

00:30:10.760 --> 00:30:11.240
There it is.

00:30:11.430 --> 00:30:14.300
There's some palettes,
and there's my QTKit palette.

00:30:14.300 --> 00:30:16.020
Okay.

00:30:16.050 --> 00:30:20.370
Why don't I close my
preferences very quickly,

00:30:20.370 --> 00:30:20.370
and let's just do some

00:30:21.020 --> 00:30:21.830
Close enough.

00:30:21.990 --> 00:30:28.260
Next thing that I want to do is I want
to go into my My Document class and

00:30:28.360 --> 00:30:32.100
simply add an outlet to my document.

00:30:32.140 --> 00:30:34.210
Let's call it

00:30:34.710 --> 00:30:39.750
MmovieView, we've added that.

00:30:44.400 --> 00:30:48.300
Little mouse movement here, hello.

00:30:48.320 --> 00:30:49.480
Got to wire it up.

00:30:49.580 --> 00:30:52.040
Press the control key, and there we are.

00:30:52.240 --> 00:30:56.810
We've wired it up, and let's connect it.

00:30:57.280 --> 00:30:58.360
Connection made.

00:30:58.400 --> 00:31:00.260
All right.

00:31:00.310 --> 00:31:01.900
We're cooking.

00:31:01.950 --> 00:31:06.220
Now, if I do an inspection,
I can take a look and see what

00:31:06.220 --> 00:31:09.690
attributes are available to me.

00:31:10.130 --> 00:31:11.510
I can set the fill color.

00:31:11.780 --> 00:31:15.440
I have a checkbox for show controller,
etc.

00:31:15.440 --> 00:31:16.040
All right.

00:31:16.190 --> 00:31:23.210
One more thing to do, and of course,
size does matter.

00:31:23.210 --> 00:31:24.390
I've got to set some springs.

00:31:25.640 --> 00:31:28.840
And I am done here.

00:31:28.880 --> 00:31:35.000
I can close down my nib file,
save the changes that I've made.

00:31:38.210 --> 00:31:41.600
and go back into my QTKit simple guide.

00:31:41.610 --> 00:31:46.480
I need to add a few lines of code
to make this thing all happen.

00:31:46.480 --> 00:31:51.760
Number one,
let's go into my declaration file.

00:32:03.420 --> 00:32:04.800
This is what I have to do.

00:32:05.020 --> 00:32:06.520
Two things have to happen here.

00:32:06.520 --> 00:32:08.960
I can just whack this.

00:32:17.400 --> 00:32:19.400
Who is this?

00:32:19.400 --> 00:32:24.040
Let's take this.

00:32:24.050 --> 00:32:28.640
Two things,
my import statement and my variable

00:32:29.010 --> 00:32:32.280
that points to the QT movie view.

00:32:32.280 --> 00:32:34.230
I'm done there.

00:32:34.730 --> 00:32:37.760
Next, let's go into the implementation.

00:32:38.110 --> 00:32:41.010
Couple of lines of code that we
want to add here that are important

00:32:41.050 --> 00:32:43.020
that we've already talked about.

00:32:43.080 --> 00:32:48.880
In my window control did load nib, hey,
I need to add some code here

00:32:48.940 --> 00:32:52.890
that executes when my window
controller loads a movie,

00:32:52.980 --> 00:32:54.700
a documents window.

00:32:54.700 --> 00:33:01.450
And I'll explain those
once I can move over here.

00:33:06.820 --> 00:33:11.100
As you can see, here's what I have,
my initWithFile method.

00:33:11.510 --> 00:33:15.780
This initializes my QTMovie object.

00:33:16.160 --> 00:33:20.820
With the data from a file,
with the data in the file

00:33:20.890 --> 00:33:24.900
specified by the file,
by the name file name, as you can see.

00:33:24.920 --> 00:33:28.760
Second line of code,
and this is what you've seen already,

00:33:28.760 --> 00:33:38.370
is the set attribute,
my set attribute for key method,

00:33:38.370 --> 00:33:38.370
which I invoke.

00:33:38.370 --> 00:33:38.370
Now I have a whole list of

00:33:38.900 --> 00:33:43.470
QTMovie attributes,
and this is the one that I need that

00:33:43.480 --> 00:33:49.620
will enable me to handle the editing
menu items that I need and to support

00:33:49.800 --> 00:33:53.320
movie editing in my QTKit player.

00:33:53.800 --> 00:33:58.700
Last line of code,
one of the most commonly used,

00:33:58.730 --> 00:34:00.010
is the setMovie method.

00:34:00.280 --> 00:34:06.640
And in this case,
what I'm doing is I'm setting my QTMovie

00:34:06.720 --> 00:34:11.420
object in a QTMovie view to movie.

00:34:11.600 --> 00:34:13.920
OK, we're almost there.

00:34:14.860 --> 00:34:16.340
Final lines.

00:34:16.380 --> 00:34:21.300
Hey, we want to be able to
edit our saved movie.

00:34:21.340 --> 00:34:26.540
And in order to do that,
we need an override.

00:34:26.560 --> 00:34:30.500
And I think I can get it from here.

00:34:31.220 --> 00:34:42.930
and I are going to show you how to
use the QTKit to launch a new project.

00:34:42.930 --> 00:34:42.930
Let's go ahead and

00:34:46.800 --> 00:34:50.420
There is my simple guy player.

00:34:50.430 --> 00:34:54.200
Wow, not really, hello.

00:34:54.330 --> 00:35:00.390
And guess what I can do?

00:35:00.390 --> 00:35:00.390
I can go into

00:35:02.580 --> 00:35:07.910
My Media Goodies, and as you can see,
I will be able to open

00:35:08.040 --> 00:35:09.440
up lots of media goodies.

00:35:09.540 --> 00:35:12.300
A QuickTime VR, for example.

00:35:12.390 --> 00:35:15.160
This is the Apple campus.

00:35:15.340 --> 00:35:17.280
You guys have been there.

00:35:17.950 --> 00:35:20.420
And I'll just take you
real quick-- whoops,

00:35:20.420 --> 00:35:21.260
hello?

00:35:21.270 --> 00:35:22.950
VR.

00:35:24.650 --> 00:35:27.030
This is where the cafe,
this is the beginning of the napkin

00:35:27.040 --> 00:35:30.040
that I was showing you at the Cafe Max,
so.

00:35:30.080 --> 00:35:33.660
There is historical continuity here.

00:35:33.690 --> 00:35:36.630
And in fact I can open up

00:35:40.600 --> 00:35:46.840
QuickTime content, play it.

00:35:47.090 --> 00:35:52.240
In addition, I have a contextual menu
that lets me play my movie,

00:35:52.240 --> 00:35:55.760
stop it, cut, copy, paste, etc.

00:35:55.890 --> 00:35:58.670
Alright, so,

00:35:59.660 --> 00:36:00.700
Let's close this out.

00:36:00.700 --> 00:36:03.990
As you can see with just
a few lines of code,

00:36:04.010 --> 00:36:08.430
I have a working QTKit media player app.

00:36:13.160 --> 00:36:18.100
Aha, as they say on the cooking shows,
let's turn it up another notch.

00:36:18.100 --> 00:36:20.100
Let's go back into the kitchen.

00:36:20.100 --> 00:36:23.720
Why don't we close our
simple guy player down.

00:36:25.210 --> 00:36:29.790
Go back into our kitchen and
let's see what was in the oven.

00:36:29.850 --> 00:36:31.240
Okay.

00:36:31.350 --> 00:36:35.380
Hey, it's the QTKit player import.

00:36:35.500 --> 00:36:38.600
Why don't we launch the player import.

00:36:39.600 --> 00:36:42.660
Let me just close this down.

00:36:42.660 --> 00:36:44.160
And this is where it is.

00:36:44.160 --> 00:36:45.520
All right.

00:36:45.520 --> 00:36:49.800
Let's check what we've done and evaluate.

00:36:49.800 --> 00:36:51.310
Open up.

00:36:52.130 --> 00:36:57.300
As you can see,
I've added an app delegate class.

00:36:57.350 --> 00:36:58.910
And there's a reason for that.

00:36:58.940 --> 00:36:59.800
I won't get into it.

00:36:59.800 --> 00:37:03.600
It has to do with displaying the
default movie and also opening

00:37:03.600 --> 00:37:07.370
up other QuickTime movies.

00:37:07.500 --> 00:37:10.450
Now,
a couple of things have happened here.

00:37:10.560 --> 00:37:16.700
In my Info.plist, if I look closely here,

00:37:20.480 --> 00:37:26.150
I have added another document type,
movie document data.

00:37:26.290 --> 00:37:27.610
And guess what I'm doing?

00:37:27.780 --> 00:37:31.940
I'm saying, "Hey, open up the floodgates.

00:37:32.170 --> 00:37:36.760
Let me open and display the
broad range of QuickTime content,

00:37:36.890 --> 00:37:44.160
still image formats, JPEGs, GIFs,
etc., VR, skin movies, wired movies,

00:37:44.280 --> 00:37:50.730
anything that QuickTime can open and
display and that I can play with." Now,

00:37:51.110 --> 00:37:54.780
interestingly enough, as you've seen,
I've renamed.

00:37:54.780 --> 00:38:00.910
And I think good things
happen when things are baked.

00:38:00.910 --> 00:38:00.910
As we have merged,

00:38:01.040 --> 00:38:03.920
I don't know how to describe it
exactly from a writer's perspective,

00:38:03.940 --> 00:38:07.700
a document-based architecture
with QuickTime movies.

00:38:07.960 --> 00:38:11.560
So we end up with movie documents.

00:38:11.560 --> 00:38:13.940
And that's what I've named everything.

00:38:14.050 --> 00:38:18.990
If we look at our nib file here,
our movie document nib file, no changes.

00:38:19.050 --> 00:38:24.000
We've built it using the
QTKit palette and it's unchanged.

00:38:24.140 --> 00:38:26.980
We don't have to do any
modifications to that.

00:38:27.350 --> 00:38:32.900
However, our main nib, that's where,
let me clear up a little

00:38:32.900 --> 00:38:34.900
bit of real estate here.

00:38:35.000 --> 00:38:41.310
As you can see here,
this is where we have added

00:38:41.890 --> 00:38:47.040
Additional capabilities and done
a lot of different connections.

00:38:47.470 --> 00:38:54.180
If you can see, open document,
movie obviously, add scale.

00:38:54.450 --> 00:38:56.480
Replace, Trim, etc.

00:38:56.750 --> 00:38:58.400
And movie playback.

00:38:58.400 --> 00:39:02.200
All the way start, stop, go to frame,
poster frame,

00:39:02.200 --> 00:39:03.760
which is really the first frame.

00:39:03.900 --> 00:39:05.280
Set fill color, etc.

00:39:05.280 --> 00:39:17.430
So we've done some work there,
not too complicated, and it's done.

00:39:24.450 --> 00:39:28.000
Let's take a look briefly,
we won't have time to get

00:39:28.000 --> 00:39:33.420
into this at great length,
but I want to show you

00:39:34.080 --> 00:39:39.230
One of the things that I've done here
as far as an NS document override,

00:39:39.410 --> 00:39:40.710
the read from file.

00:39:41.090 --> 00:39:43.280
This is important and I'll show
it to you later when we get

00:39:43.380 --> 00:39:44.440
to the implementation of it.

00:39:44.700 --> 00:39:47.380
This is our declarations are
really quite straightforward.

00:39:47.440 --> 00:39:51.530
These are the actions that
I've added as you can see.

00:39:51.930 --> 00:39:57.320
Now, if we go quickly into
our implementation file,

00:39:57.450 --> 00:40:02.270
you'll see that we have
specified a constant default

00:40:02.770 --> 00:40:04.640
width for non-visual movies.

00:40:05.430 --> 00:40:09.790
Remember in our original drawing,
we wanted to open up JPEGs.

00:40:09.790 --> 00:40:11.800
We wanted to open up VR.

00:40:11.800 --> 00:40:17.800
But we also want to open up audio files,
MP3 files, AIFF files, etc.

00:40:17.800 --> 00:40:19.790
And this enables us to do that.

00:40:19.790 --> 00:40:20.800
It's a pound defined.

00:40:20.800 --> 00:40:23.780
We've specified the width that it opens.

00:40:23.870 --> 00:40:25.700
And that's that.

00:40:25.800 --> 00:40:30.800
So then let's go quickly
down to Read from File.

00:40:30.800 --> 00:40:35.800
And this is where you can
see what we have done.

00:40:35.800 --> 00:40:39.800
Looks kind of familiar, doesn't it?

00:40:39.820 --> 00:40:43.990
The heavy lifting is done
with the movie with--whoa,

00:40:43.990 --> 00:40:44.530
sorry.

00:40:46.430 --> 00:40:48.420
with MovieWithData.

00:40:48.440 --> 00:40:51.880
And this returns NSData and
it opens up the floodgates,

00:40:51.990 --> 00:40:53.250
as you can see.

00:40:53.340 --> 00:40:58.330
In addition here, the CanInitWithFile,
this is something that

00:40:58.330 --> 00:40:59.800
Tim will talk about.

00:41:00.100 --> 00:41:03.460
and explain a little bit more detailed.

00:41:03.460 --> 00:41:06.970
Also in my panel,
you'll see that I've used the

00:41:06.970 --> 00:41:09.070
can init with file as well.

00:41:09.130 --> 00:41:12.700
And this takes care of
a lot of goodies for us.

00:41:12.700 --> 00:41:21.500
OK, so I'm going to close this off,
build, compile, run.

00:41:21.500 --> 00:41:22.750
Hello, hello, hello, hello, hello.

00:41:22.750 --> 00:41:22.750
There we are.

00:41:26.970 --> 00:41:27.900
Guess what?

00:41:27.900 --> 00:41:29.190
Let's import.

00:41:29.280 --> 00:41:31.730
And as you can see,
when we look in our Media Goodies

00:41:31.740 --> 00:41:36.870
and Contents folder,
we can open up a lot of stuff.

00:41:37.080 --> 00:41:41.140
So let's open up very
quickly an audio file.

00:41:41.140 --> 00:41:45.700
I like that.

00:41:46.610 --> 00:41:46.610
Remember those days?

00:41:49.300 --> 00:42:07.200
[Transcript missing]

00:42:14.000 --> 00:42:17.960
Now we have beauty,
gone to the end of it,

00:42:17.960 --> 00:42:20.390
gone to the beginning.

00:42:20.400 --> 00:42:23.910
We could even clone it, and it is big.

00:42:24.590 --> 00:42:27.000
and we have editing.

00:42:27.180 --> 00:42:28.540
So there you are.

00:42:28.560 --> 00:42:29.210
Happy cooking.

00:42:41.840 --> 00:42:46.470
So what I want to do now is sort of
pick up where Tom left off on a few

00:42:46.470 --> 00:42:49.580
issues and clean up a few loose ends.

00:42:49.580 --> 00:42:52.570
So let's go back to demo one.

00:42:55.370 --> 00:42:59.930
And I want to open up a project
which is essentially identical to

00:43:00.600 --> 00:43:03.860
the first project that Tom built.

00:43:03.900 --> 00:43:05.800
And that is here.

00:43:05.850 --> 00:43:12.400
In the downloadable code,
it's called QT Advanced Document.

00:43:12.430 --> 00:43:13.540
I don't know who gave it that name.

00:43:13.540 --> 00:43:15.750
I called it QT Player Extras.

00:43:15.850 --> 00:43:18.450
And that's what I'll play with here.

00:43:18.650 --> 00:43:25.380
So again, this is essentially the same as
the first project that Tom built.

00:43:26.550 --> 00:43:28.860
files will be useful.

00:43:28.900 --> 00:43:32.380
Let me just run this out of the box.

00:43:34.000 --> 00:43:38.160
Build it, run it,
and now we will open a file.

00:43:38.160 --> 00:43:42.100
And I want to go back to my own.

00:43:42.420 --> 00:43:47.230
Here's our set of media files and here's
our good old abc.move and it's just that

00:43:47.230 --> 00:43:49.520
six second movie that we know and love.

00:43:49.520 --> 00:43:52.270
Now there's something wrong with this.

00:43:52.270 --> 00:43:55.920
What I've got is a QuickTime movie
that completely fills the

00:43:55.930 --> 00:43:58.350
content region of the NS window.

00:43:58.550 --> 00:44:00.530
Well, the movie display is fine.

00:44:00.730 --> 00:44:03.400
The start and stop button works fine.

00:44:03.550 --> 00:44:05.200
The thumb works fine.

00:44:05.680 --> 00:44:09.260
The frame backward
button works just fine.

00:44:09.270 --> 00:44:11.500
But the frame forward
button does not work.

00:44:11.500 --> 00:44:13.770
I can click it all day and
it's not going to work.

00:44:13.840 --> 00:44:17.550
What we have here is two
objects that are claiming that

00:44:17.550 --> 00:44:19.830
little square of real estate.

00:44:19.830 --> 00:44:24.110
The QT movie thinks it owns this
little square of real estate down here,

00:44:24.220 --> 00:44:27.370
and it wants to put its
frame forward button there.

00:44:27.380 --> 00:44:31.330
But also the NSWindow thinks it
owns that piece of real estate.

00:44:31.370 --> 00:44:32.650
And guess who wins?

00:44:32.790 --> 00:44:33.940
Well, the NSWindow wins.

00:44:34.010 --> 00:44:37.210
Its resize box is what's operative there.

00:44:37.380 --> 00:44:41.690
So if you want to have an application
like this where you fill the window,

00:44:41.860 --> 00:44:45.300
it would be nice to work
around that particular issue.

00:44:45.300 --> 00:44:46.990
And it's actually quite easy to do that.

00:44:47.140 --> 00:44:52.580
Let's go into our
windowDidLoad nib and... Oh no,

00:44:52.580 --> 00:44:55.010
this again.

00:44:57.270 --> 00:45:00.500
Don't you love formatting?

00:45:00.830 --> 00:45:04.790
The workaround for this is to
tell the NSWindow object not

00:45:04.790 --> 00:45:08.350
to draw its resize indicator,
and we can do that by

00:45:08.350 --> 00:45:12.330
uncommenting this line,
which says, Dear NSWindow that's

00:45:12.330 --> 00:45:16.040
attached to the movie view,
please don't show your resize indicator.

00:45:16.040 --> 00:45:19.660
And there is a similar
method in QTMovieView,

00:45:19.660 --> 00:45:24.020
which says,
why don't you show your resize indicator.

00:45:24.220 --> 00:45:30.020
Now when we build with
these two lines uncommented,

00:45:30.160 --> 00:45:32.040
we should see a little
bit better behavior.

00:45:32.040 --> 00:45:35.670
And now we see that the movie
controller has drawn its

00:45:35.670 --> 00:45:40.150
standard resize button here,
and we can now use the frame forward

00:45:40.480 --> 00:45:45.040
button just the way we thought we could,
and the movie continues to resize

00:45:45.040 --> 00:45:46.040
just the way we wanted it to.

00:45:46.040 --> 00:45:52.300
So there's a nice little refinement
to get things to work really nice.

00:45:52.460 --> 00:45:57.950
One other thing I want to touch on
is Gary showed us how fundamentally

00:45:58.070 --> 00:46:00.590
the QTPlayer is built on QTKit.

00:46:01.040 --> 00:46:02.780
So let's just have a pop quiz.

00:46:02.860 --> 00:46:07.880
Who thinks they know what method
QTPlayer uses to open a file,

00:46:07.890 --> 00:46:09.400
to open a movie file?

00:46:09.400 --> 00:46:13.580
How many votes do I get
for init with file?

00:46:14.360 --> 00:46:14.640
No?

00:46:15.370 --> 00:46:17.540
Movie with file?

00:46:17.670 --> 00:46:19.700
Oh, you guys are hard.

00:46:19.920 --> 00:46:20.850
We got one vote here.

00:46:20.980 --> 00:46:23.610
Okay,
in fact it does not call initWithFile.

00:46:23.690 --> 00:46:26.920
It uses a different initializer
that I haven't mentioned,

00:46:26.930 --> 00:46:29.800
and this is where this
formatting is going to kill us.

00:46:30.290 --> 00:46:35.800
QuickTime Player uses a method
called initWithAttributes.

00:46:35.820 --> 00:46:37.970
Now the reason we have init with
attributes is to override some of

00:46:37.970 --> 00:46:39.800
the default behaviors of QTMovie.

00:46:39.800 --> 00:46:43.780
Now we haven't talked a whole lot
about what those default behaviors are,

00:46:44.000 --> 00:46:47.800
but one of them worth noting
is that when we open a movie,

00:46:47.800 --> 00:46:49.740
we open it asynchronously.

00:46:49.800 --> 00:46:54.710
That means when you call initWithURL,
we will immediately return

00:46:54.710 --> 00:46:56.510
to you a QTMovie object.

00:46:56.800 --> 00:46:59.970
Now it's possible that you
can't do much with that object,

00:46:59.970 --> 00:47:02.910
because the data might still
be out there on the internet

00:47:03.120 --> 00:47:04.600
ready to come over the wire.

00:47:04.910 --> 00:47:08.220
We may have none of that data available,
but we'll still give you

00:47:08.220 --> 00:47:09.800
back a QTMovie object.

00:47:09.800 --> 00:47:14.770
Well, for some purposes that
might not be ideal for you.

00:47:14.900 --> 00:47:15.200
Okay?

00:47:15.200 --> 00:47:18.360
So you might want to tell QTMovie, "No,
I don't want you to open

00:47:18.360 --> 00:47:19.770
movies asynchronously.

00:47:19.870 --> 00:47:25.230
I don't want you to give me a QTMovie
object until you've got the data." Well,

00:47:25.250 --> 00:47:28.750
there's no way to do that
with the initWithURL function.

00:47:28.800 --> 00:47:33.860
Another reason that you might want
to use initWithAttributes is to

00:47:33.860 --> 00:47:36.700
set a delegate on the movie object.

00:47:36.800 --> 00:47:39.800
It turns out that you can call
initWithURL or initWithFile.

00:47:39.800 --> 00:47:42.650
And then call the setDelegate method.

00:47:43.120 --> 00:47:46.500
But in some instances
it might be too late.

00:47:47.080 --> 00:47:53.800
Stuff might have happened that calls
a delegate method before we return.

00:47:53.800 --> 00:47:57.270
So in those two cases,
to override default behaviors

00:47:57.270 --> 00:48:00.800
and to set a delegate,
you'll want to use initWithAttributes.

00:48:00.800 --> 00:48:02.800
initWithAttributes is very simple.

00:48:02.800 --> 00:48:04.800
It takes a dictionary of attributes.

00:48:04.800 --> 00:48:07.800
And I apologize for this formatting here.

00:48:07.950 --> 00:48:09.800
But you can see that I'm
building a dictionary.

00:48:09.800 --> 00:48:13.800
Here I'm saying one of the
attributes I want you to work with

00:48:13.800 --> 00:48:16.800
is the movie file name attribute.

00:48:16.870 --> 00:48:20.260
And I'm passing in the attribute
attached to the -- or the file

00:48:20.260 --> 00:48:21.800
name attached to the document.

00:48:21.800 --> 00:48:25.550
Boy, this is really ugly.

00:48:26.030 --> 00:48:30.200
Another thing I can do is in this
dictionary set the movie editable

00:48:30.200 --> 00:48:34.870
attribute to yes so that I don't need
to make that separate call after I've

00:48:34.910 --> 00:48:36.440
opened the movie to make it editable.

00:48:36.440 --> 00:48:41.290
Another thing I might want to do
is open the movie muted so I could

00:48:41.380 --> 00:48:44.140
set the volume attribute to zero.

00:48:44.140 --> 00:48:50.170
Or if I want I can set the movie
open async OK attribute to no.

00:48:50.180 --> 00:48:54.560
It's not OK to open it asynchronously,
I want you to open it synchronously.

00:48:55.250 --> 00:48:59.080
So let's enable that code by
turning this one to a zero.

00:48:59.080 --> 00:49:03.720
And in fact we'll see no differences
at all in the operation of the

00:49:04.400 --> 00:49:09.080
application because nothing
important will have changed.

00:49:09.080 --> 00:49:13.370
So for those two instances you want
to override some default behaviors

00:49:13.370 --> 00:49:17.080
of QTMovie or you need to assign a
delegate early on in the process,

00:49:17.200 --> 00:49:19.910
you'll want to look at this
initWithAttributes call.

00:49:20.080 --> 00:49:24.160
So I will leave it at that and
can we go back to slides please?

00:49:24.160 --> 00:49:26.150
Back to slides, please.

00:49:29.710 --> 00:49:31.520
I know I had a clicker
around here somewhere.

00:49:31.580 --> 00:49:38.540
In the graphics and imaging keynote,
you saw Michael Johnson from

00:49:38.690 --> 00:49:41.420
Pixar show some of the work
that he's done with QTKit.

00:49:41.440 --> 00:49:45.240
And we are very fortunate to have him
here in this session to talk to us a

00:49:45.370 --> 00:49:48.250
little bit more about his use of QTKit.

00:49:48.550 --> 00:49:51.520
So please help me
welcome him to the stage.

00:49:56.120 --> 00:49:57.000
Hi everybody.

00:49:57.000 --> 00:49:59.990
Can I get demo three, I guess?

00:49:59.990 --> 00:50:02.990
Goodness, I did nothing.

00:50:02.990 --> 00:50:03.000
Okay.

00:50:03.000 --> 00:50:04.900
So, let's see how much time we got.

00:50:04.900 --> 00:50:08.080
Okay, we got a fair amount of time.

00:50:08.080 --> 00:50:13.000
So, I have a bunch of different things
that I thought would be interesting

00:50:13.000 --> 00:50:16.170
to people and I'm sort of up here,
I guess,

00:50:16.180 --> 00:50:21.100
as the token outside person who's
done something real with the

00:50:21.180 --> 00:50:23.180
kit so they're not lying person.

00:50:24.400 --> 00:50:29.570
So, I have a couple of things that
I wanted to talk about that I think

00:50:29.640 --> 00:50:31.570
will be very useful for people.

00:50:31.590 --> 00:50:35.030
One of them is threads.

00:50:35.100 --> 00:50:39.020
Threads are tricky in QuickTime,
especially if you're a Cocoa person

00:50:39.020 --> 00:50:45.670
because it's usually very clear
Cocoa-wise what's thread safe,

00:50:45.670 --> 00:50:48.070
what's not,
what should be done in a main thread,

00:50:48.070 --> 00:50:50.840
what you can do in a background thread.

00:50:50.840 --> 00:50:54.720
And in QuickTime,
thread is very complicated because

00:50:54.900 --> 00:50:58.300
depending on what you're doing,
some things are thread safe or not.

00:50:58.300 --> 00:51:01.340
And a lot of times you don't
know what you're doing until

00:51:01.340 --> 00:51:02.980
you're in the middle of doing it.

00:51:02.980 --> 00:51:05.810
And what I mean by that is you
could be opening up some arbitrary

00:51:05.820 --> 00:51:10.810
movie that has some codec that
was written in 1992 by Avid,

00:51:10.810 --> 00:51:14.220
let's say,
and you might find out that in the

00:51:14.320 --> 00:51:21.020
middle of opening up that movie
that it's not actually thread safe.

00:51:21.030 --> 00:51:24.650
So, you need to kind of think about
what you're doing with that

00:51:24.830 --> 00:51:29.620
stuff and you need to put stuff
in place for exception handling.

00:51:29.620 --> 00:51:33.440
And we've gone through this over the last
year and a half with the QT folks and

00:51:33.640 --> 00:51:38.540
they've done a really good job of sort
of making this stuff possible and I'm

00:51:38.680 --> 00:51:41.640
going to show a little example of that.

00:51:41.710 --> 00:51:45.480
Which because I think one of the obvious
things that Cocoa people will want

00:51:45.480 --> 00:51:48.110
to do when they walk out of here or
they've already tried to do it and it

00:51:48.120 --> 00:51:50.470
didn't work so well or you're smarter
than me and you already got it to work.

00:51:50.630 --> 00:51:56.550
Is take a bunch of still images,
read them into a movie in a

00:51:57.310 --> 00:52:00.640
background thread with a progress
bar with a little image that's

00:52:00.640 --> 00:52:05.150
thumbnail that's showing sort of the
images as you're loading them up.

00:52:05.600 --> 00:52:08.540
Because that's sort of an obvious
thing if you saw the little thing

00:52:08.540 --> 00:52:12.320
I showed in Tim Schaaf's talk,
you know, that's kind of obvious for me.

00:52:12.320 --> 00:52:15.150
I've got a bunch of storyboards,
I need to bring them in,

00:52:15.160 --> 00:52:18.620
I need to assign some timing to them
and I don't want to do that in my

00:52:18.620 --> 00:52:19.940
main thread because I might have,
I don't know,

00:52:19.940 --> 00:52:22.280
I might have a bunch of 3,000 images.

00:52:22.280 --> 00:52:26.730
And I also want to have those in a sort
of a tight auto-release pool because the

00:52:26.740 --> 00:52:30.720
images that I'm loading are undoubtedly
film res and they're really big and

00:52:30.720 --> 00:52:33.030
if you're in a tight loop on that,
it's a bad thing.

00:52:33.330 --> 00:52:36.420
So let me show that example.

00:52:36.420 --> 00:52:42.210
And I'm not quite sure what the right
way to get this code to people is but

00:52:42.320 --> 00:52:45.830
I think what I'll probably do is I'll
leave it in the lab over there so if

00:52:45.830 --> 00:52:48.020
people want it they can get it there.

00:52:48.020 --> 00:52:49.380
But so--.

00:52:49.540 --> 00:52:52.380
Let's see,
do I have this running actually?

00:52:52.380 --> 00:52:54.320
Yeah, there we go.

00:52:54.320 --> 00:52:56.020
So this is a very simple app.

00:52:56.020 --> 00:52:59.070
I'll show you it working first to prove
I haven't broken anything and then

00:52:59.070 --> 00:53:03.980
we'll go and look at what I'm doing.

00:53:03.980 --> 00:53:08.780
So I'm just going to swipe out a
whole bunch of images here and the

00:53:08.780 --> 00:53:13.800
stuff that's on the bottom here is
just a--it's just an accessory panel

00:53:13.800 --> 00:53:17.240
that I put on there so that I could
change what the frame rate was of

00:53:17.240 --> 00:53:19.380
the movie and how long to hold them.

00:53:19.380 --> 00:53:22.460
So I'm essentially holding everything
for half a second here and I also

00:53:22.460 --> 00:53:26.940
put this handy thing in there to
tell me how many things I selected.

00:53:26.940 --> 00:53:30.810
So we'll say open and we'll put up
a progress bar and since I'm running

00:53:31.060 --> 00:53:34.600
just on my little power book here,
it kind of took a to start but now it's

00:53:34.770 --> 00:53:38.590
going off and it's doing that and it's
building them there in the background

00:53:38.590 --> 00:53:42.540
thread and I'm just sort of monitoring
to tell you sort of how long I think

00:53:42.650 --> 00:53:47.380
it's going to be and then here we have
the--we have the movie and it's in there,

00:53:47.380 --> 00:53:48.380
it's all fine.

00:53:48.380 --> 00:53:53.620
Now one thing that sort of again in
kind of the context of I get to be

00:53:53.620 --> 00:53:57.710
the full disclosure guy is one sort of
thread through I think a bunch of the

00:53:57.790 --> 00:54:02.970
information that was being presented to
you that may or may not be completely

00:54:03.030 --> 00:54:07.860
obvious is that the QT kit is as Tim,
you know, said, this is sort of,

00:54:07.860 --> 00:54:11.810
you know, a really great--or at least
I think it's really great,

00:54:11.810 --> 00:54:12.450
1.0.

00:54:12.450 --> 00:54:15.420
It's, you know, this is not covering
the whole of QuickTime.

00:54:15.450 --> 00:54:16.380
This is a very targeted subset.

00:54:16.380 --> 00:54:16.380
So I'm going to go ahead and
show you a little bit of this.

00:54:16.380 --> 00:54:17.990
So, you know,
the QT kit is a very targeted subset

00:54:17.990 --> 00:54:19.260
to sort of get this thing out the door.

00:54:19.390 --> 00:54:22.260
I think get it in people's hands,
get feedback and, you know,

00:54:22.260 --> 00:54:23.640
get some momentum on this.

00:54:23.640 --> 00:54:27.870
So one thing that the QT kit
is not sort of front and center

00:54:27.870 --> 00:54:30.300
right now is making new movies.

00:54:30.300 --> 00:54:33.970
And so what I did right there
was actually made a new movie.

00:54:33.970 --> 00:54:36.830
And so--because all the other
things that they're talking about

00:54:36.830 --> 00:54:39.220
are like you're reading--you know,
you're getting a movie here,

00:54:39.350 --> 00:54:42.180
you're cutting the movie,
you're taking parts of a movie,

00:54:42.180 --> 00:54:46.120
you're taking three movies and making
a movie out of those three movies.

00:54:46.170 --> 00:54:47.280
You're translating--you're
taking--you're transcoding them.

00:54:47.390 --> 00:54:50.420
But you're not sort of saying,
"Tabula rasa, I got nothing.

00:54:50.450 --> 00:54:52.540
I want a movie and I want to start
adding it to it." Because the

00:54:52.550 --> 00:54:55.880
obvious thing that you would think,
which is that you would say QT movie,

00:54:55.880 --> 00:55:00.900
movie, and then you would start doing add
image for time is not going to work.

00:55:00.900 --> 00:55:05.180
And the reason is very defensible.

00:55:05.180 --> 00:55:08.220
It's not completely clear
when you think about it,

00:55:08.220 --> 00:55:12.020
but it is very defensible,
which is where is that data going, okay?

00:55:12.020 --> 00:55:14.400
As you're adding those images,
where are they going?

00:55:14.490 --> 00:55:17.980
And you could say, "Oh, well,
they could be in memory." And that's

00:55:18.170 --> 00:55:22.800
sort of not what you want to have happen,
you know, right?

00:55:22.850 --> 00:55:27.140
You actually want to sort of say, "Oh,
those should be on disk somewhere."

00:55:27.140 --> 00:55:34.860
And so what I did for my little app
here was I put a category on QT movie.

00:55:35.390 --> 00:55:40.870
And so this is something that's actually
I think very necessary right now,

00:55:40.960 --> 00:55:44.330
but I want to sort of show you a
particular way of doing it that

00:55:44.460 --> 00:55:46.120
I think is actually important.

00:55:46.260 --> 00:55:51.420
So I had a QT kit, let's see,
additions down here.

00:55:51.420 --> 00:55:54.870
So I have, I added a little method
called init to file.

00:55:54.970 --> 00:55:58.060
So not init with file, but init to file.

00:55:58.060 --> 00:56:00.690
And then I implemented this with some,
you know,

00:56:01.160 --> 00:56:06.050
carbony stuff to like make a movie and
then hand that QuickTime movie into

00:56:06.160 --> 00:56:09.890
the init with QuickTime movie thing.

00:56:09.960 --> 00:56:12.070
But the important thing here,
and this is really,

00:56:12.070 --> 00:56:15.650
really important because as
opposed to say the app kit,

00:56:15.650 --> 00:56:17.600
which is, you know,
the one I started using in '89,

00:56:17.600 --> 00:56:19.210
it's probably much older than that.

00:56:19.360 --> 00:56:22.210
So it's a very old API, okay?

00:56:22.280 --> 00:56:23.030
This is a pretty new one.

00:56:23.030 --> 00:56:23.980
It's going to start growing.

00:56:23.980 --> 00:56:26.730
And so if you start adding,
you start going category crazy,

00:56:26.730 --> 00:56:28.580
which is what I refer to
certain people who go,

00:56:28.620 --> 00:56:29.990
"Categories, you're cool.

00:56:30.090 --> 00:56:31.950
I don't have to subclass at all.

00:56:31.950 --> 00:56:36.800
This is awesome." You are dangerous,
my friend, because I was you.

00:56:36.900 --> 00:56:41.930
And because what you'll do is you'll say,
"Hey, boy, you know, these guys,

00:56:42.000 --> 00:56:45.290
they showed this, you know,
set movie attribute colon, you know,

00:56:45.290 --> 00:56:47.530
and then you're going, you know,
on the editable thing.

00:56:47.530 --> 00:56:49.140
You know,
I'm just going to like make a shortcut.

00:56:49.140 --> 00:56:52.650
I'm going to put a category in it which
is like set editable with a Boolean,

00:56:52.780 --> 00:56:56.740
okay?" Yeah,
but what if like in the 1.1 release,

00:56:56.740 --> 00:56:58.720
they like make that be a method?

00:56:58.720 --> 00:57:01.630
You'll never know because
you're always overriding it,

00:57:01.630 --> 00:57:02.180
right?

00:57:02.200 --> 00:57:04.150
How many people understood that?

00:57:04.150 --> 00:57:06.180
Oh, excellent.

00:57:06.180 --> 00:57:10.170
See, and I bet you were going
to do exactly that.

00:57:10.510 --> 00:57:11.360
Not wrong, am I?

00:57:11.700 --> 00:57:17.010
So what I tend to do is I tend
to name things in obnoxious ways.

00:57:17.110 --> 00:57:18.940
I actually have a different
naming convention than the

00:57:19.050 --> 00:57:24.530
self-centered one for this demo,
but I would highly recommend that you

00:57:24.530 --> 00:57:28.660
do that because what you're going to
do as soon as you start trying to do

00:57:28.660 --> 00:57:32.590
something with the QTKit is you're going
to see all the things that aren't there.

00:57:33.290 --> 00:57:35.820
Okay, and then you'll say, oh,
actually I see they are there,

00:57:35.820 --> 00:57:37.530
but they're actually an attribute,
and so I'm going to put

00:57:37.530 --> 00:57:38.500
this shortcut on there.

00:57:38.500 --> 00:57:43.000
Or, oh, you know, let me go, you know,
and, you know, and we all know how to,

00:57:43.000 --> 00:57:45.870
do we all know how to like
actually go and find all the

00:57:45.870 --> 00:57:48.040
methods that are in a framework?

00:57:50.600 --> 00:57:54.470
You have so much to learn, young ones.

00:57:54.500 --> 00:57:57.120
And so, I mean, you know,
that's a good example of something

00:57:57.120 --> 00:58:00.360
to go do and then realize why you
shouldn't go and just name them exactly

00:58:00.400 --> 00:58:02.320
the same way that they would be named.

00:58:02.320 --> 00:58:06.490
So, because they might already be there.

00:58:06.650 --> 00:58:08.230
And so, that's a very important thing.

00:58:08.330 --> 00:58:11.940
So let me just talk a little bit
about what I'm doing here in this

00:58:11.940 --> 00:58:14.230
and see how we're doing on time.

00:58:14.260 --> 00:58:14.620
Okay.

00:58:14.660 --> 00:58:16.500
So I'm not going to spend too
much more time on this because,

00:58:16.500 --> 00:58:20.250
again, like I said,
I'll put the code out there.

00:58:20.500 --> 00:58:23.300
But some of the important
things about this are,

00:58:23.300 --> 00:58:28.040
you know, sort of the basic way this
works is that in the nib,

00:58:28.040 --> 00:58:32.680
I actually go and instantiate
a controller which is an

00:58:32.700 --> 00:58:34.310
import images controller.

00:58:34.480 --> 00:58:38.580
And then that's wired up to the
document as an import images controller.

00:58:38.580 --> 00:58:42.640
And this is really just sort of
a nicety that I tend to do in

00:58:42.640 --> 00:58:45.580
things of where I've got a bunch
of different controllers to do it.

00:58:45.590 --> 00:58:47.300
I instantiate them inside my document.

00:58:47.300 --> 00:58:55.200
Nib because it lets me actually wire
them back up to the document so that

00:58:55.310 --> 00:58:59.330
the--so that they know about the document
and they know about the document window

00:58:59.330 --> 00:59:02.840
because the document window is the thing
that they're going to hang the sheet off.

00:59:02.840 --> 00:59:05.110
I could actually just go ask the
document and get the window from

00:59:05.110 --> 00:59:10.060
that but I'm sort of trying to
be clear on what I'm doing here.

00:59:10.060 --> 00:59:12.880
The--so the other sort of subtly
about this for those of you who

00:59:12.880 --> 00:59:16.760
are somewhat newish to Cocoa and
certainly the document architecture,

00:59:16.760 --> 00:59:23.130
is that this object which is instantiated
in a nib and is wired up to a couple

00:59:23.220 --> 00:59:29.300
things has itself a nib that it
then opens up once it starts up.

00:59:29.300 --> 00:59:31.940
And that's actually what has that
accessory view for the open panel

00:59:32.290 --> 00:59:35.280
and what also has the progress
bar that has the little image

00:59:35.280 --> 00:59:36.900
view and stuff like that on there.

00:59:37.040 --> 00:59:40.610
And so this is--that object,
that import controller is

00:59:40.610 --> 00:59:43.160
the owner of this nib file.

00:59:43.160 --> 00:59:45.480
So--and then he's all wired up.

00:59:45.610 --> 00:59:52.110
Now notice the--the--the one thing here
that isn't--that isn't wired up in this

00:59:52.440 --> 00:59:54.910
is the document window for example.

00:59:55.030 --> 01:00:00.480
And also notice that since interface
builder parses headers and not actually

01:00:00.480 --> 01:00:05.280
reading the file that actually that
under our document isn't in there.

01:00:05.500 --> 01:00:08.400
So, that's about all I want to
talk about on this thing here.

01:00:08.400 --> 01:00:11.640
It's basically, well,
one more thing on this.

01:00:11.820 --> 01:00:15.500
So, once we actually start up,
when we start up the,

01:00:15.500 --> 01:00:18.480
so we do import images here, oh,
this sucks.

01:00:18.480 --> 01:00:20.620
Yeah, you should just get the code.

01:00:20.620 --> 01:00:24.010
I can't make this big enough
for this to be useful right now.

01:00:24.330 --> 01:00:28.380
But basically what I'm doing is
I'm just getting that information,

01:00:28.380 --> 01:00:30.080
getting the URLs of the
movies you selected,

01:00:30.360 --> 01:00:31.420
starting up a background thread.

01:00:31.430 --> 01:00:36.040
And then the key is when you need
to do things like updating that UI,

01:00:36.040 --> 01:00:39.400
you loft that into the main
thread by basically saying

01:00:39.400 --> 01:00:41.210
perform selector on main thread.

01:00:41.290 --> 01:00:45.470
And you tell yourself to, hey,
with this image, go update that little

01:00:45.470 --> 01:00:46.790
thumbnail view in there.

01:00:47.020 --> 01:00:48.610
And so there's a whole
category of things that,

01:00:48.610 --> 01:00:50.700
again, as a Cocoa programmer,
you know that you don't

01:00:50.840 --> 01:00:53.980
touch the GUI from anything
other than the main thread.

01:00:54.220 --> 01:00:57.460
But you can be being told to do
that synchronously or asynchronously

01:00:57.460 --> 01:01:00.100
from a worker thread which has
just gotten that image and is

01:01:00.150 --> 01:01:01.810
just adding it to the main thread.

01:01:01.820 --> 01:01:03.600
But adding it to the movie.

01:01:03.600 --> 01:01:06.630
So that one I'll sort of
make that code available.

01:01:06.800 --> 01:01:09.730
But, so I want to get through and
get some other things here.

01:01:09.730 --> 01:01:11.310
So two other things which are, you know,

01:01:11.520 --> 01:01:16.120
were not true in the kit when this
first started and are now very true,

01:01:16.120 --> 01:01:20.080
which is movie editing
is faster than you think.

01:01:20.080 --> 01:01:23.640
And moving editing is
slicker than you think.

01:01:23.640 --> 01:01:26.560
And so for that,
I want to sort of go into IB here

01:01:26.560 --> 01:01:29.240
and show a little example.

01:01:29.240 --> 01:01:36.990
So this is just using our Film Online kit
that has a couple of objects in it here.

01:01:36.990 --> 01:01:36.990
And so

01:01:38.030 --> 01:01:42.170
So I just have a simple
movie that's in here.

01:01:42.180 --> 01:01:47.270
It's just the movie that I was using
to show off to in Tim's talk there.

01:01:47.310 --> 01:01:49.700
So this is,

01:01:53.150 --> 01:01:56.050
You know, this is the last 22 minutes
of The Incredibles or so.

01:01:56.260 --> 01:01:59.420
But so, so here I am,
and now I'm actually going to go

01:01:59.490 --> 01:02:02.050
and start chopping that movie up.

01:02:03.000 --> 01:02:07.420
Okay, and this is just completely random,
I'm just going in here and doing this.

01:02:07.420 --> 01:02:12.600
And so,
if you think about what's going on there,

01:02:12.720 --> 01:02:14.730
that's, you know,
where I can actually go and, you know,

01:02:14.830 --> 01:02:20.000
pick one of these guys up and,
let's see if we go and put him in there,

01:02:20.000 --> 01:02:20.900
whatever.

01:02:21.010 --> 01:02:22.240
That's actually like really expensive.

01:02:22.240 --> 01:02:25.240
I've got like, you know,
a lot of movie there now.

01:02:25.240 --> 01:02:28.320
And, and I've cut those
things together and I'm,

01:02:28.320 --> 01:02:31.320
and I can be jumping around in there.

01:02:33.000 --> 01:02:38.000
I can go full screen in our
way of doing full screen.

01:02:38.000 --> 01:02:42.230
So there's all those things on there.

01:02:48.350 --> 01:02:52.110
And it's just, you know, it just works,
which is mind boggling to me.

01:02:52.350 --> 01:02:55.590
But you can go pick these things up,
move them around, and you can do them,

01:02:55.700 --> 01:03:02.630
which is the amazing part to me,
you know, while it's playing.

01:03:04.100 --> 01:07:10.200
[Transcript missing]

01:07:11.020 --> 01:07:13.640
The right way,
at least the way I think of this,

01:07:13.670 --> 01:07:17.900
is I think of it as if I was opening up
each one of these things in QTPlayer.

01:07:17.900 --> 01:07:21.530
And if you've ever kind of opened
up a folder of things and sort

01:07:21.590 --> 01:07:23.900
of swiped it out and opened up,
you know,

01:07:23.900 --> 01:07:26.900
20 movies or something in QTPlayer,
it's fine.

01:07:26.950 --> 01:07:31.050
But then if you actually swiped
out something that had 100 movies,

01:07:31.200 --> 01:07:32.710
think about what it has to do.

01:07:32.900 --> 01:07:35.890
It's got to show at
least the first frame,

01:07:35.890 --> 01:07:39.900
so it's got to actually get a full res
image of that movie in memory somewhere.

01:07:39.910 --> 01:07:43.900
Then if it's smart,
and this stuff tends to be pretty smart,

01:07:43.900 --> 01:07:45.080
it's probably going to
kind of pre-roll that,

01:07:45.080 --> 01:07:48.900
so it might actually have like a
couple of images of that movie around,

01:07:48.900 --> 01:07:50.870
because it assumes you're going
to do a bunch of stuff with this.

01:07:50.900 --> 01:07:54.900
So the tens one will work fine.

01:07:54.900 --> 01:07:58.890
The hundreds of ones, it could work,
but you're going to have a lot more,

01:07:58.900 --> 01:08:01.900
you're going to have a much bigger
memory footprint than you might think.

01:08:01.900 --> 01:08:07.230
And so the secret is actually very easy,
and it's something that I stumbled

01:08:07.290 --> 01:08:11.960
on when I was actually working on,
a thing for the Incredibles where we were

01:08:12.370 --> 01:08:16.900
trying to get out all the nominations for
all the animators for the Annie Awards.

01:08:16.900 --> 01:08:18.550
And I had been doing
some stuff with this,

01:08:18.550 --> 01:08:20.900
some of the in-house stuff there,
and I'd been opening up tens

01:08:20.900 --> 01:08:23.900
of shots and maybe hundreds of
shots and these things there,

01:08:23.900 --> 01:08:26.180
but suddenly I had to
open up the whole movie,

01:08:26.180 --> 01:08:29.860
which is 2,249 shots,
and there was no way I could do it.

01:08:29.960 --> 01:08:32.760
So, but then I realized if
I opened up the movie once,

01:08:32.970 --> 01:08:36.330
and then each one of my elements
was just indexing into that

01:08:36.330 --> 01:08:38.270
movie in a different place,
using a different time range to snip

01:08:38.270 --> 01:08:41.410
the media that it wanted out of it,
and actually then insert

01:08:41.410 --> 01:08:43.900
it into this other thing,
it would work just fine.

01:08:43.900 --> 01:08:46.340
And so when I do things
like the demo I showed,

01:08:46.350 --> 01:08:48.890
and I'll talk some more
about this on Friday,

01:08:49.020 --> 01:08:54.760
but when I would do these things where
I basically have one QuickTime movie,

01:08:55.010 --> 01:08:57.130
and then I have this cut list of it,
and the reason I can open up

01:08:57.130 --> 01:08:59.900
that so fast is because I'm
opening up one QuickTime movie,

01:08:59.900 --> 01:09:04.710
and then basically just using time
ranges to kind of cut in there and take

01:09:04.710 --> 01:09:07.900
those segments out of the movie and cut
them into this other movie that I made,

01:09:07.900 --> 01:09:10.900
and all that stuff happens really,
really fast.

01:09:10.980 --> 01:09:13.500
And if you're on a dual G5,
that stuff tends to

01:09:13.500 --> 01:09:14.900
happen in under a second.

01:09:14.990 --> 01:09:18.530
And, you know, for hundreds or even,
in some cases, thousands of elements

01:09:18.530 --> 01:09:19.890
cutting those things in.

01:09:19.900 --> 01:09:26.440
So the big take home from me, I guess,
on this is when you're

01:09:26.640 --> 01:09:29.900
starting off with this stuff,
as soon as you start to scale up a bit,

01:09:29.900 --> 01:09:33.850
use Shark and use the memory
allocation stuff in Sampler to

01:09:33.870 --> 01:09:37.320
be kind of watching yourself,
if you're going to do stuff

01:09:37.360 --> 01:09:39.930
in background threads,
if you can control the

01:09:39.930 --> 01:09:42.310
kind of codec chain,
so in that case there,

01:09:42.310 --> 01:09:46.160
as those images come in, I use,
like in Tiger, you know,

01:09:46.260 --> 01:09:48.650
Pixlet is thread safe, or JPEG,
which has sort of been thread safe,

01:09:48.650 --> 01:09:49.900
I think, since it started.

01:09:49.900 --> 01:09:53.900
You know, if you know what the codec is,
and you know that it's thread safe,

01:09:53.900 --> 01:09:53.900
you can do it.

01:09:53.900 --> 01:09:56.850
Otherwise, make sure that you're very
carefully wrapping exception

01:09:56.850 --> 01:09:59.910
handlers around things,
and going back to the main

01:09:59.910 --> 01:10:04.760
thread to do the stuff in there
if you can't do it otherwise.

01:10:04.900 --> 01:10:07.900
That's probably all I have.

01:10:07.900 --> 01:10:11.300
Just to do the plug for,
I'm going to give what I hope will

01:10:11.300 --> 01:10:14.900
be a fun talk on Friday about some
of the in-house tools that we've done

01:10:14.900 --> 01:10:18.300
and some sort of coding practices
that have helped us be able to make

01:10:18.360 --> 01:10:21.780
some interesting apps at Pixar,
a lot of them using this stuff.

01:10:21.900 --> 01:10:25.900
So I hope you guys use it,
and I hope you understand that it's a,

01:10:25.900 --> 01:10:30.420
you know, it's a really good 1.0,
and also, as you add categories,

01:10:30.420 --> 01:10:33.900
because you will,
make sure you name them funny,

01:10:33.900 --> 01:10:36.890
so that when these fine
folks put out new code,

01:10:36.920 --> 01:10:40.000
you actually get the new code,
and you don't just sort of

01:10:40.010 --> 01:10:42.900
re-tromp over the stuff with your
old code that was probably fine,

01:10:42.900 --> 01:10:44.900
but theirs is probably better.

01:10:44.900 --> 01:10:46.900
So, enjoy the show.

01:10:55.320 --> 01:10:56.750
Okay, I think we're pretty much done.

01:10:56.970 --> 01:11:00.540
Let me remind you of the
two labs that we have.

01:11:00.540 --> 01:11:03.570
One tonight,
we'll be here until 9 or later

01:11:03.570 --> 01:11:05.540
if you want to be that late.

01:11:05.540 --> 01:11:09.060
And then we'll be back here in
the morning at 9 in the morning,

01:11:09.060 --> 01:11:12.120
I guess, to spend more time with you all.

01:11:12.120 --> 01:11:15.580
So thanks for coming and enjoy QTKit.