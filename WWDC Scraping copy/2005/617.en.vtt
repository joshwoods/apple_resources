WEBVTT

00:00:03.100 --> 00:00:04.340
My name is Rusty Tucker.

00:00:04.340 --> 00:00:09.040
I'm here to present you Leveraging
the Power of ACLs today.

00:00:09.040 --> 00:00:12.380
I manage the File and
Print Services group in Mac OS X Server.

00:00:12.380 --> 00:00:19.780
And this session is really aimed at
the systems administrators of VEXSERV.

00:00:19.800 --> 00:00:23.380
So we've got a few system
admins out there and developers.

00:00:23.380 --> 00:00:23.830
Terrific.

00:00:23.880 --> 00:00:25.330
Thank you.

00:00:25.460 --> 00:00:28.200
Come to the right place.

00:00:28.200 --> 00:00:30.900
So here's what we're gonna cover today.

00:00:32.940 --> 00:00:34.580
First of all,
we're going to try and provide a

00:00:34.580 --> 00:00:39.180
lot of in-depth information that
you can take home and use about the

00:00:39.180 --> 00:00:42.470
ACLs and different access control
that's available in Tiger Server.

00:00:42.480 --> 00:00:48.030
We're going to provide just an overview
of the options that are available to you,

00:00:48.490 --> 00:00:53.660
as well as go into pretty good depth on
the file system ACL internals to really

00:00:53.660 --> 00:00:57.850
give a good solid understanding of
how they are actually implemented that

00:00:57.850 --> 00:01:00.260
will help you with your deployments.

00:01:02.000 --> 00:01:06.100
Then we'll take a look at Tiger ACLs
from a developer's point of view,

00:01:06.540 --> 00:01:12.240
and then go over some best practices
for using and deploying ACLs in

00:01:12.240 --> 00:01:13.920
your and managing your networks.

00:01:13.920 --> 00:01:18.630
And then we'll follow up,
close that with Q&A.

00:01:21.140 --> 00:01:22.970
So let's go ahead and get started here.

00:01:23.220 --> 00:01:27.080
Go ahead and we've got three
main different types of access

00:01:27.160 --> 00:01:28.740
control in Tiger Server.

00:01:28.950 --> 00:01:31.330
The first, of course,
are the POSIX permissions that

00:01:31.340 --> 00:01:34.140
were still there for control
of access to the file system.

00:01:34.140 --> 00:01:37.830
Building on that are the
file system access controls.

00:01:37.870 --> 00:01:42.510
Now they don't replace POSIX permissions,
but really augment it and enhance the

00:01:42.510 --> 00:01:44.980
capabilities that are already present.

00:01:46.110 --> 00:01:49.980
And then the third type are
the service access controls.

00:01:50.310 --> 00:01:55.900
They're not directly related,
but they're very complementary

00:01:55.900 --> 00:01:57.610
to file system access controls.

00:01:57.620 --> 00:02:02.480
So let's take a look at those first,
and then the rest of the time will be

00:02:02.480 --> 00:02:05.700
spent on the file system access controls.

00:02:07.490 --> 00:02:10.100
So Service Access Control List,
well what do they do?

00:02:10.110 --> 00:02:14.100
The main purpose is to control
access or login to a service.

00:02:14.100 --> 00:02:17.440
So it's really like the
file system access controls,

00:02:17.480 --> 00:02:20.020
but there's really only
one bit of control.

00:02:20.110 --> 00:02:21.870
Can the person login or not?

00:02:21.900 --> 00:02:25.480
And this Service Access Control or
SACL support,

00:02:25.480 --> 00:02:28.370
as it's often called,
it's really prevalent

00:02:28.860 --> 00:02:30.900
throughout Tiger Server.

00:02:30.900 --> 00:02:34.140
We've updated a number of services
to take advantage of this.

00:02:34.840 --> 00:02:39.900
Everything from Apple File Server through
XGrid is controllable through

00:02:39.940 --> 00:02:42.270
the Service Access Controls.

00:02:43.200 --> 00:02:47.070
And so the UI looks like this,
and we'll go ahead and take a look at

00:02:47.080 --> 00:02:50.260
demo one and show you how that's used.

00:02:53.900 --> 00:03:01.890
So the Service Access Controls... Let me
go ahead and hide that out of the way.

00:03:02.740 --> 00:03:04.140
UI looks like this.

00:03:04.200 --> 00:03:09.570
You have a control of services on the
left-hand side that can be controlled,

00:03:09.570 --> 00:03:14.830
and the default option is to allow all
services access to anyone that has a

00:03:15.220 --> 00:03:18.500
name and account in the directory system.

00:03:18.500 --> 00:03:23.500
This is the default behavior that
we've shipped in Panther and so on.

00:03:23.500 --> 00:03:27.500
But with the service access controls,
you can control,

00:03:27.500 --> 00:03:32.710
say we have a group of users,
and we can lock down all the

00:03:32.710 --> 00:03:36.040
services to only those people that
are in the Daily Planet group.

00:03:36.040 --> 00:03:41.540
If we wanted just to apply
all services uniquely.

00:03:41.540 --> 00:03:45.350
We can also define a separate
service control list for each

00:03:45.380 --> 00:03:47.840
of the services that's present.

00:03:47.840 --> 00:03:52.170
So SSH, for example,
we might want to control that

00:03:52.170 --> 00:03:57.530
to the local admins only to get
SSH access into this machine.

00:03:57.540 --> 00:04:03.300
And so that would be just drag and
drop your groups from the list into the

00:04:03.600 --> 00:04:06.990
access control list for that service.

00:04:07.000 --> 00:04:10.140
Now AFP we can control separately.

00:04:10.140 --> 00:04:14.250
We could have not only the local admins,
but all of the members of the

00:04:14.250 --> 00:04:17.010
Daily Planet staff could have
access into that service.

00:04:17.180 --> 00:04:22.370
So we can control that.

00:04:22.370 --> 00:04:22.370
So we can control the service itself.

00:04:26.510 --> 00:04:31.750
Now the way that we've implemented
Access Control Lists really

00:04:31.750 --> 00:04:37.500
leverages the membership daemon,
which is a new process and part of

00:04:37.500 --> 00:04:40.720
the base Tiger operating system.

00:04:40.740 --> 00:04:45.850
It's the same daemon that the
kernel uses and other processes

00:04:45.850 --> 00:04:48.860
use for membership resolution.

00:04:48.860 --> 00:04:53.070
And you can implement in your
own services access control

00:04:53.080 --> 00:04:55.770
through a very simple mechanism.

00:04:55.840 --> 00:04:59.250
And we'll just walk through
some quick sample code that

00:04:59.250 --> 00:05:01.110
shows how you would do that.

00:05:01.200 --> 00:05:07.380
The idea being you would have a
well-known group in the local directory,

00:05:07.540 --> 00:05:13.160
and the access to your service
would be limited to the people

00:05:13.160 --> 00:05:14.370
that are the members of that group.

00:05:14.430 --> 00:05:17.620
So in this little routine,
can access service,

00:05:17.620 --> 00:05:21.960
we show the members of that
group by the well-known GID.

00:05:21.960 --> 00:05:25.460
And we've authenticated a user
that's identified by the user ID.

00:05:25.460 --> 00:05:31.290
And we'll pass those two to
the can access service routine.

00:05:32.390 --> 00:05:35.620
First thing we need to do is
the membership daemon deals

00:05:35.640 --> 00:05:40.560
directly with unique user IDs,
because it needs to have very

00:05:40.560 --> 00:05:45.430
precise notion of both users
and groups and from which of the

00:05:45.430 --> 00:05:47.020
directory hierarchies they come from.

00:05:47.020 --> 00:05:51.820
So the first step to do is take the
user ID you got from the login process

00:05:51.820 --> 00:05:57.580
and pass that to the member UID to
UID routine to convert that to a user ID.

00:05:57.600 --> 00:05:59.880
Since you've just
authenticated this user,

00:05:59.880 --> 00:06:02.140
it would be very unusual
for that to fail.

00:06:02.300 --> 00:06:04.760
So the error handling would
just be too absurd on that.

00:06:04.800 --> 00:06:11.720
The next step is to take your well
known account group and convert that

00:06:11.720 --> 00:06:15.620
through the member GID to UUID function.

00:06:15.620 --> 00:06:18.890
And that'll give you the group UUID.

00:06:21.460 --> 00:06:24.680
If there's no error there,
because in this case,

00:06:24.680 --> 00:06:27.470
since that's a configuration item,
it might not be present

00:06:27.470 --> 00:06:29.280
in the directory system.

00:06:29.370 --> 00:06:32.920
Then you call the member
check membership function,

00:06:32.940 --> 00:06:38.160
passing it the UUID of the user
and the UUID of that group.

00:06:38.170 --> 00:06:42.890
Now that group can break through
both the 16 group membership

00:06:42.890 --> 00:06:44.940
limits and provide nested groups.

00:06:44.990 --> 00:06:49.130
So there could be groups and other
users within a member of that,

00:06:49.260 --> 00:06:50.710
within that group.

00:06:51.630 --> 00:06:54.240
If that all succeeds,
then you return no error.

00:06:54.240 --> 00:06:56.370
If it fails,
then you return E-Auth error,

00:06:56.880 --> 00:07:02.980
and that will be the way to provide
the membership checking access.

00:07:07.890 --> 00:07:12.300
So that's all that we're going to
have on the service access controls.

00:07:12.300 --> 00:07:17.290
The next, obviously,
POSIX permissions are still present,

00:07:17.380 --> 00:07:21.800
recommended still for many uses,
including the BSD sections,

00:07:21.800 --> 00:07:25.990
system/system parts of the hierarchy.

00:07:26.170 --> 00:07:32.490
Typical, as everybody is probably aware,
you've got the owner group and everyone,

00:07:32.580 --> 00:07:34.670
and really three basic permission
bits for controlling access.

00:07:35.120 --> 00:07:41.040
File System Access Controls build on that
as an extension to the POSIX control,

00:07:41.140 --> 00:07:44.870
but it really isn't a
direct replacement for it.

00:07:44.960 --> 00:07:50.990
And in this way you can have volumes
of your SharePoints and volumes

00:07:50.990 --> 00:07:56.380
that have both Access Control Lists
and POSIX permissions on

00:07:56.720 --> 00:08:01.580
different items there,
even mixing within folders that you have.

00:08:02.160 --> 00:08:05.820
The Access Control Lists provide
you with much greater flexibility,

00:08:05.820 --> 00:08:09.660
including the capability for allow
and deny inheritance so that you

00:08:09.730 --> 00:08:13.220
can pass some of the permissions
from a folder onto items that

00:08:13.380 --> 00:08:15.060
are created in that folder.

00:08:15.070 --> 00:08:20.370
Obviously the capability of supporting
multiple users and groups within the

00:08:20.370 --> 00:08:25.810
Access Control List and finer granularity
in the permissions themselves.

00:08:26.910 --> 00:08:29.680
And so if you were here last year,
this is the kind of stack

00:08:29.810 --> 00:08:34.320
of where we made changes in
Tiger to support access controls,

00:08:34.320 --> 00:08:36.600
starting from the kernel
on up through POSIX,

00:08:36.600 --> 00:08:40.370
Carbon, the Samba file server,
Apple file server,

00:08:40.370 --> 00:08:44.260
and in the graphic utilities
and finder and server tools.

00:08:44.560 --> 00:08:48.920
But mainly we're positioning
it as a server-only feature.

00:08:48.920 --> 00:08:53.170
We have no features in the Tiger desktop
that are really leveraging that,

00:08:53.250 --> 00:08:56.560
but that foundation still exists.

00:08:56.560 --> 00:09:02.060
The kernel, utilities,
command line tools are all shared between

00:09:02.060 --> 00:09:05.700
the client and server operating systems.

00:09:05.700 --> 00:09:08.430
And again,
positioning it for use by server

00:09:08.550 --> 00:09:12.770
admins to increase your security,
flexibility, and workflow,

00:09:12.780 --> 00:09:14.530
and interoperability.

00:09:14.590 --> 00:09:17.230
within a mixed environment.

00:09:19.330 --> 00:09:24.690
In the tooling support for ACLs,
in the GUI you've got Workgroup Manager,

00:09:24.720 --> 00:09:28.790
and that allows you to enable
access controls on volumes and

00:09:28.790 --> 00:09:31.800
create and edit groups and users.

00:09:31.800 --> 00:09:35.000
In Finder,
there's support for viewing what

00:09:35.000 --> 00:09:39.900
those ACLs are through its Get Info
window and support in copying.

00:09:39.920 --> 00:09:42.060
On the command line side,
there's a number of tools,

00:09:42.060 --> 00:09:45.160
and these are present both in
the server operating system and

00:09:45.160 --> 00:09:47.000
in client operating systems.

00:09:47.050 --> 00:09:50.820
For those of you that are doing
development and want to enable

00:09:50.820 --> 00:09:54.370
your client systems to do so,
there's CFS ACL control,

00:09:54.370 --> 00:09:59.160
which allows you to enable support on,
enable ACL support on volumes,

00:09:59.180 --> 00:10:02.600
D-Aesthetic Group for
manipulating group membership,

00:10:02.600 --> 00:10:07.700
LS for displaying the options,
displaying the access control lists,

00:10:07.700 --> 00:10:11.930
Chmod for editing access, ACLs,
and a number of the copy engines

00:10:12.330 --> 00:10:16.200
have also been updated to support
not only access control lists,

00:10:16.220 --> 00:10:20.730
but extended attributes and
even back to the resource forks.

00:10:24.430 --> 00:10:29.030
So, to present the file system
internals and give you a really

00:10:29.060 --> 00:10:31.460
good understanding of that,
I'd like to welcome

00:10:31.460 --> 00:10:33.190
Mike Smith from CoreOS.

00:10:37.000 --> 00:10:38.800
Thanks, Rusty.

00:10:38.800 --> 00:10:40.540
So obviously I'm Mike Smith.

00:10:40.540 --> 00:10:45.420
I work in the kernel team in
Mac OS X CoreOS Development Group.

00:10:45.440 --> 00:10:49.650
I was responsible for the
design and implementation of the

00:10:49.650 --> 00:10:53.010
kauth authorization subsystem,
as well as the file system access

00:10:53.040 --> 00:10:56.260
control list support within the kernel.

00:10:57.930 --> 00:11:02.850
Rusty suggested that we'd be going
into an in-depth discussion of the

00:11:02.890 --> 00:11:12.220
Access Control List implementation,
and unfortunately I think most of

00:11:12.220 --> 00:11:14.980
you want to go home this evening.

00:11:14.980 --> 00:11:14.980
So rather than being exhaustive,
I'm going to touch on some

00:11:14.980 --> 00:11:14.980
significant points about

00:11:15.310 --> 00:11:18.640
The implementation that are
particularly relevant to the use of

00:11:18.640 --> 00:11:23.110
Access Control Lists for you as system
administrators or as software developers.

00:11:23.220 --> 00:11:26.570
I'm going to talk about how the
Access Control Lists compose,

00:11:26.570 --> 00:11:28.970
what it contains,
what you can say with it,

00:11:29.000 --> 00:11:32.370
a little bit about how privilege
is computed when an operation

00:11:32.370 --> 00:11:35.300
is actually being authorized,
and I'll talk a little

00:11:35.300 --> 00:11:38.650
bit about inheritance,
since it's particularly important

00:11:38.650 --> 00:11:42.500
when you actually start considering
the use of Access Control Lists to

00:11:42.500 --> 00:11:45.120
implement file system security policy.

00:11:46.390 --> 00:11:48.640
First I'm going to start with
a little bit of terminology,

00:11:48.650 --> 00:11:50.290
just to make sure we're
all on the same page here.

00:11:50.300 --> 00:11:54.740
An ACE is not a playing card,
it's an Access Control Entry.

00:11:54.740 --> 00:11:59.860
It's basically a statement about
permission associated with an identity.

00:11:59.860 --> 00:12:03.830
An ACL is then a list of these ACEs.

00:12:04.500 --> 00:12:07.010
The UID and GID you'll be familiar with.

00:12:07.150 --> 00:12:10.370
They're legacy identifiers
for users and groups.

00:12:10.380 --> 00:12:14.300
In our implementation and in most others,
they're integers.

00:12:14.300 --> 00:12:18.300
One of the problems that we have
with UIDs and GIDs is that you

00:12:18.300 --> 00:12:23.310
need to know specifically whether a
number represents a user or a group.

00:12:23.320 --> 00:12:26.360
And so,
as with many other objects in the system,

00:12:26.360 --> 00:12:30.110
we've begun to use UUIDs,
which are universally unique IDs,

00:12:30.140 --> 00:12:34.940
not user IDs,
to identify both users and groups.

00:12:34.970 --> 00:12:38.630
Because these identifiers are unique,
we can carry them around without

00:12:38.650 --> 00:12:42.100
needing to worry about whether
they identify a user or a group.

00:12:42.280 --> 00:12:46.030
It's also worth touching on
Microsoft's security identifier,

00:12:46.030 --> 00:12:47.930
which is actually a
structured identifier,

00:12:47.930 --> 00:12:56.030
which also carries information
related to the directory service,

00:12:56.030 --> 00:12:57.360
in which the number is actually,
or the identifier is actually relevant.

00:12:57.800 --> 00:13:00.940
The model that we selected was
selected for a number of reasons,

00:13:00.940 --> 00:13:03.490
including strong interoperability
with other platforms,

00:13:03.490 --> 00:13:04.760
particularly Microsoft's.

00:13:04.800 --> 00:13:09.670
And so translation between these SIDs
and our UUIDs is a very important

00:13:09.670 --> 00:13:14.980
part of using Mac OS X ACL support
in a mixed environment.

00:13:19.350 --> 00:13:24.660
Access Control Lists, as Rusty suggested,
don't really operate in a vacuum.

00:13:24.670 --> 00:13:27.470
There's a whole bunch of security
information that we associate

00:13:27.470 --> 00:13:28.850
with file system objects.

00:13:28.910 --> 00:13:32.160
The traditional POSIX mode bits,
the Access Control List if

00:13:32.230 --> 00:13:35.170
one happens to be present,
and objects still carry

00:13:35.180 --> 00:13:37.090
owner and group information.

00:13:38.640 --> 00:13:42.000
The combination of all of this allows
us to provide functionality that's a

00:13:42.040 --> 00:13:48.240
complete superset of both the traditional
behavior and the Microsoft ACL model.

00:13:48.240 --> 00:13:50.470
This gives you basically
the best of both worlds.

00:13:50.540 --> 00:13:53.360
You can implement policy that
comes from Microsoft world.

00:13:53.380 --> 00:13:55.840
You can perpetuate policy
that you have already,

00:13:55.850 --> 00:13:58.630
or you can bring in a mixture of the two.

00:13:59.280 --> 00:14:02.840
We've tried to keep the interfaces
that you as developers would use

00:14:02.850 --> 00:14:05.060
for manipulating this information
as comfortable as possible.

00:14:05.060 --> 00:14:08.280
You're familiar with,
those of you who have been doing this

00:14:08.280 --> 00:14:11.560
already will be familiar with the STAT,
which mod system calls,

00:14:11.560 --> 00:14:12.600
they've simply been extended.

00:14:12.600 --> 00:14:14.520
If you were at Chris Amira's
session yesterday,

00:14:14.520 --> 00:14:16.660
you would have seen some
examples of those in use.

00:14:16.660 --> 00:14:22.160
We also modified the POSIX ACL functions.

00:14:22.160 --> 00:14:24.440
The POSIX ACL model itself
is not terribly useful,

00:14:24.440 --> 00:14:27.330
but there's plenty of familiarity
out there with the use of these

00:14:27.350 --> 00:14:28.990
functions to manipulate ACLs.

00:14:29.020 --> 00:14:31.660
And so while the list semantics
themselves are different,

00:14:31.660 --> 00:14:35.430
the functionality of those functions has
been slightly extended and brought over,

00:14:35.430 --> 00:14:38.050
again, just to improve the
programming experience.

00:14:40.950 --> 00:14:45.890
Talking about composition of ACLs,
we need to start with ACEs.

00:14:45.930 --> 00:14:48.670
As I said before,
an ACE is a statement about permission

00:14:48.670 --> 00:14:51.310
associated with an identity,
either a user or a group.

00:14:51.320 --> 00:14:52.930
We have some permissions.

00:14:52.930 --> 00:14:55.860
What sort of access are
we actually controlling?

00:14:55.860 --> 00:14:58.900
Are we allowing these permissions?

00:14:58.900 --> 00:14:59.840
Are we denying them?

00:14:59.860 --> 00:15:03.580
We need to associate them with someone,
maybe a user, maybe a group.

00:15:03.600 --> 00:15:04.870
It may be a group of groups.

00:15:04.880 --> 00:15:07.370
As Rusty pointed out,
we support the arbitrary

00:15:07.380 --> 00:15:10.430
nesting of groups,
which is actually a very

00:15:10.510 --> 00:15:13.470
powerful technique for

00:15:14.200 --> 00:15:17.300
Structuring your information control,
and Rusty will touch on that later.

00:15:17.300 --> 00:15:22.140
And we also allow you to
control on an ace by ace basis

00:15:22.140 --> 00:15:25.060
the inheritance behavior.

00:15:25.060 --> 00:15:31.790
Obviously, inheritance is only
relevant to directories,

00:15:31.790 --> 00:15:34.870
and it controls how the entries
are propagated to child objects.

00:15:34.870 --> 00:15:34.870
I'll talk a little more
about that in a bit.

00:15:38.030 --> 00:15:44.680
Once we have a list of these access
control entries on an object,

00:15:45.190 --> 00:15:49.030
We're in a position to start using
them to control access to the object.

00:15:49.220 --> 00:15:54.140
So the first thing that happens when
we're considering an operation on an

00:15:54.140 --> 00:15:58.690
object is we work out which permissions
are actually required in order to

00:15:58.810 --> 00:16:03.490
perform the operation being requested.

00:16:03.560 --> 00:16:07.420
And so once we're on with that list,
we'll take a look at the

00:16:07.420 --> 00:16:08.760
attributes on the object.

00:16:08.790 --> 00:16:11.850
And if it has an access control list,
we start with that.

00:16:12.390 --> 00:16:13.400
This is fairly important.

00:16:13.400 --> 00:16:16.740
It means that the
Access Control List overrides

00:16:16.850 --> 00:16:21.060
or can be used to override the
POSIX permissions on an object.

00:16:24.400 --> 00:16:27.240
Entries within the
Access Control List are processed

00:16:27.240 --> 00:16:29.710
in the order that they're found.

00:16:32.200 --> 00:16:35.800
This is, again,
a relatively powerful technique,

00:16:35.800 --> 00:16:39.740
although it's also possible to
introduce a great deal of confusion.

00:16:39.740 --> 00:16:45.460
And so most of the tools from Chmod
on upwards will tend to enforce what

00:16:45.460 --> 00:16:47.980
we describe as canonical ordering,
which is all deny

00:16:48.110 --> 00:16:51.880
entries are placed first,
followed by all allow entries,

00:16:51.880 --> 00:16:55.760
and then all inherited deny entries
and inherited allow entries.

00:16:55.780 --> 00:16:59.070
This allows explicit entries
to override inherited entries,

00:16:59.210 --> 00:17:03.040
but it avoids the confusion
that can arise if you have allow

00:17:03.040 --> 00:17:04.920
entries and deny entries mixed in.

00:17:04.920 --> 00:17:08.620
And this is relevant because as the
Access Control List is processed,

00:17:08.640 --> 00:17:12.920
processing stops when all of the
required permissions have been found,

00:17:12.920 --> 00:17:16.360
or when any of the required
permissions are denied.

00:17:16.400 --> 00:17:19.020
It's worth sort of working this
one through a little bit in

00:17:19.020 --> 00:17:22.320
your head just to make sure that
you're comfortable with it.

00:17:22.320 --> 00:17:25.370
When you hit the end of
the Access Control List in

00:17:25.370 --> 00:17:27.750
the Microsoft model,
access is automatically denied.

00:17:28.400 --> 00:17:31.630
That doesn't provide for a very
good integration experience if

00:17:31.660 --> 00:17:34.100
you already have an existing file
system with POSIX permissions.

00:17:34.120 --> 00:17:36.640
And so when we hit the end
of the Access Control List,

00:17:36.650 --> 00:17:39.160
permissions that haven't
been granted yet are compared

00:17:39.210 --> 00:17:41.190
against the POSIX permissions.

00:17:43.070 --> 00:17:46.350
This runs us into an
interesting situation because

00:17:46.350 --> 00:17:48.750
in the traditional model,
there are a number of

00:17:48.760 --> 00:17:50.100
permissions that are implicit.

00:17:50.100 --> 00:17:52.600
If you can look up an object,
typically you can obtain its attributes.

00:17:52.600 --> 00:17:56.660
You can get its size, its permissions,
that sort of thing.

00:17:56.910 --> 00:17:59.900
We don't want to force you
to grant those permissions

00:17:59.900 --> 00:18:01.360
explicitly on all of those objects.

00:18:01.360 --> 00:18:06.270
And so whilst there are
ACL permissions that reflect the

00:18:06.300 --> 00:18:09.340
ability to obtain those attributes,
they're granted implicitly.

00:18:09.380 --> 00:18:11.860
They can, however, still be denied.

00:18:13.850 --> 00:18:17.320
This is Bigtable comparing the
POSIX permission model with ACLs

00:18:17.320 --> 00:18:19.330
that we stole from another group.

00:18:19.350 --> 00:18:21.640
I'm not actually going to
force you to read all of it,

00:18:21.640 --> 00:18:23.960
I just stole it for a
couple of examples in here.

00:18:24.000 --> 00:18:28.440
The ACL model allows us to implement
completely new permissions.

00:18:28.440 --> 00:18:33.500
The ability to take ownership on
an object is something that's just

00:18:33.540 --> 00:18:37.070
simply not possible in the POSIX model
unless you grant the user root access,

00:18:37.070 --> 00:18:38.420
at which point they own your system.

00:18:38.420 --> 00:18:39.800
The ACL model allows us to
take ownership of the file,

00:18:39.800 --> 00:18:41.720
which is clearly not desirable,
particularly in our workflow

00:18:41.720 --> 00:18:44.320
environment where all you really
want to do is hand off responsibility

00:18:44.320 --> 00:18:47.390
for a file from one UID to another.

00:18:48.620 --> 00:18:51.810
And it also allows us to
separate permissions that were

00:18:51.840 --> 00:18:53.640
traditionally grouped together.

00:18:53.820 --> 00:18:56.550
Write permission on a directory
in the POSIX model allows you

00:18:56.610 --> 00:18:58.500
to both add and remove entries.

00:18:58.500 --> 00:19:01.640
And it allows you to add any entry
to the directory and allows you to

00:19:01.640 --> 00:19:03.710
remove any entry from the directory.

00:19:03.880 --> 00:19:07.690
With an Access Control List, however,
you can grant delete permission to a

00:19:07.690 --> 00:19:14.030
specific file or specific set of files
and thus again separate permission.

00:19:14.820 --> 00:19:17.460
Finally, I'm going to talk a little
bit about inheritance.

00:19:17.480 --> 00:19:20.230
Access Control Lists applied
explicitly to files are great.

00:19:20.440 --> 00:19:22.040
You have a bunch of files,
you can add some

00:19:22.040 --> 00:19:23.390
Access Control Lists to them.

00:19:23.480 --> 00:19:29.490
But if your file system is active,
if you actually have files coming

00:19:29.860 --> 00:19:34.980
and going and moving around,
you need a way to set policy for all

00:19:34.980 --> 00:19:34.980
of the files within a particular area.

00:19:34.980 --> 00:19:34.980
This is something where the
POSIX model is very weak.

00:19:35.250 --> 00:19:39.090
default permissions for files are largely
set by the application and by the user.

00:19:39.100 --> 00:19:43.210
There's really little or nothing
that the administrator can do

00:19:43.280 --> 00:19:48.060
about default data permissions
without application modifications.

00:19:50.330 --> 00:19:53.500
So,
inheritance of an ACL basically allows

00:19:53.500 --> 00:19:59.510
you to set aces on a directory object,
which will be subsequently

00:19:59.510 --> 00:20:02.740
propagated to objects contained
underneath that directory.

00:20:02.760 --> 00:20:07.000
Multiple subdirectories,
files as they appear, that sort of thing.

00:20:08.880 --> 00:20:14.090
The kernel itself handles the
inheritance of access control

00:20:14.090 --> 00:20:15.990
entries when an object is created.

00:20:16.070 --> 00:20:19.420
That's a relatively straightforward
and explicit operation.

00:20:23.800 --> 00:20:29.070
However,
when you're moving and copying files,

00:20:29.070 --> 00:20:29.070
the situation is much less clear.

00:20:29.260 --> 00:20:32.340
To the kernel, a copy operation is simply
the creation of a new file.

00:20:32.360 --> 00:20:36.870
It has no higher level semantic
knowledge of exactly what's going on.

00:20:36.900 --> 00:20:42.250
And so for inheritance to work correctly,
it needs to be implemented at

00:20:42.250 --> 00:20:43.980
a number of different levels.

00:20:44.310 --> 00:20:46.550
The copy engines such as
the Finder copy engine,

00:20:46.580 --> 00:20:51.120
CP, and others have more semantic
information about the nature

00:20:51.120 --> 00:20:52.850
of a copy than the kernel does.

00:20:52.850 --> 00:20:56.650
You can copy with or without permissions
depending on whether you're replicating

00:20:56.650 --> 00:21:00.330
an entire directory hierarchy with
its policy or whether you're moving

00:21:00.330 --> 00:21:02.420
contents from one policy to another.

00:21:04.000 --> 00:21:10.790
We implement copy policy relating
to inheritance in CP and the Finder.

00:21:10.930 --> 00:21:14.370
Other tools that move files around need
to consider very carefully whether what

00:21:14.390 --> 00:21:16.810
they're doing is transferring from a
domain to another domain or whether

00:21:16.830 --> 00:21:18.170
they're attempting to maintain fidelity.

00:21:23.460 --> 00:21:25.840
So I'm going to leave it at that
point and give you back to Rusty.

00:21:25.840 --> 00:21:26.840
Thanks, Mike.

00:21:26.840 --> 00:21:27.840
Thank you.

00:21:27.840 --> 00:21:28.840
Thank you, Mike.

00:21:36.150 --> 00:21:38.500
So that really covers all the background.

00:21:38.500 --> 00:21:42.240
I think that we need to move on
with the rest of the presentation.

00:21:42.260 --> 00:21:46.230
So the real trick here is how is this
all going to work in a mixed network?

00:21:46.300 --> 00:21:50.000
I think it's hopefully fairly
clear how it's going to work

00:21:50.000 --> 00:21:52.500
interoperate from Tiger to Tiger.

00:21:52.550 --> 00:21:56.260
Both sides share that same
ACL model and same permission model.

00:21:56.260 --> 00:22:00.020
But how is this going to work
with your Panther clients,

00:22:00.040 --> 00:22:02.010
with Windows, and so on?

00:22:02.250 --> 00:22:06.020
So there's a few different
flavors of fitting in.

00:22:06.020 --> 00:22:09.500
One with the Windows clients,
which we've really worked

00:22:09.740 --> 00:22:12.190
strongly to make that work very,
very well.

00:22:12.200 --> 00:22:15.400
Panther AFP clients,
another good example.

00:22:15.400 --> 00:22:21.090
With the Panther AFP clients,
they obviously have no notion of ACLs.

00:22:21.300 --> 00:22:23.680
But unfortunately,
they do have a notion of

00:22:23.680 --> 00:22:25.280
a user effective access.

00:22:25.280 --> 00:22:31.080
And even when a Panther client
is talking to a Tiger AFP server,

00:22:31.080 --> 00:22:34.900
it still knows what its effective
access is in any given directory.

00:22:34.900 --> 00:22:38.070
This is very important for
the higher level functions,

00:22:38.070 --> 00:22:42.110
higher level applications like Finder,
that want to be able to show you

00:22:42.110 --> 00:22:46.300
what your capabilities are visually,
and will make decisions on

00:22:46.300 --> 00:22:50.660
whether you can copy files and
so on based on that information.

00:22:51.240 --> 00:22:54.130
So that actually works out very well.

00:22:54.140 --> 00:22:57.810
And then of course we have
the Tiger AFP clients,

00:22:57.950 --> 00:23:02.710
which do have the full capability
of editing ACLs and displaying

00:23:02.710 --> 00:23:05.560
those ACLs to the layers above it.

00:23:05.560 --> 00:23:10.600
And then we have a Tiger SMB client
in a Windows network.

00:23:10.600 --> 00:23:16.900
It supports the ACL model and is able
to translate from the Tiger ACL model

00:23:17.170 --> 00:23:20.410
to the Windows model very easily.

00:23:22.800 --> 00:23:25.080
So with Windows clients
and Tiger servers,

00:23:25.180 --> 00:23:28.410
our key goal is interoperability,
and we've been working on this

00:23:28.420 --> 00:23:31.570
for the past few releases,
beginning with our primary

00:23:31.580 --> 00:23:34.980
domain controller capabilities,
print and file sharing,

00:23:34.980 --> 00:23:36.920
building along with that.

00:23:36.960 --> 00:23:42.960
And our Mac OS X Tiger client fully
respects the Windows file permissions.

00:23:42.960 --> 00:23:47.780
And Tiger ACLs,
plus the changes we've made in Samba,

00:23:47.780 --> 00:23:51.350
allow a Windows client to also
participate fully as just as if

00:23:51.470 --> 00:23:53.960
we are a Windows 2003 server.

00:23:53.990 --> 00:23:58.010
Because we support the same
ACL sharing bits and inheritance

00:23:58.010 --> 00:23:59.870
that they were expecting.

00:24:00.700 --> 00:24:04.550
So I'd like to bring Stephan Jones on
stage to provide a demo of

00:24:04.610 --> 00:24:06.780
the Windows interoperability.

00:24:06.780 --> 00:24:10.770
And that's him.

00:24:26.210 --> 00:24:31.390
Okay, we have a simple workflow
scenario here so you can get an

00:24:31.390 --> 00:24:33.200
idea of how ACLs actually work.

00:24:33.490 --> 00:24:37.610
This is Workgroup Manager.

00:24:37.760 --> 00:24:42.660
It's our primary server tool for
administering access privileges.

00:24:42.800 --> 00:24:45.840
So we have a daily plan
at SharePoint here.

00:24:45.890 --> 00:24:50.280
As you can see, the owner, Apple,
and we have a group daily

00:24:50.280 --> 00:24:51.990
plan that we've defined.

00:24:52.120 --> 00:24:57.520
Two folders we have here for different
workflow situations are we have,

00:24:57.550 --> 00:25:03.860
think of a simple publishing environment
where you have an incoming folder where

00:25:03.860 --> 00:25:05.930
your writers would drop stories off.

00:25:05.960 --> 00:25:10.940
In this case we have privileges where you
want the writers to have full control.

00:25:10.940 --> 00:25:14.670
So we've added an ace here
that allows them to do that

00:25:14.670 --> 00:25:16.850
and drop their stories off.

00:25:18.660 --> 00:25:22.020
Here's a story here that
was dropped by Clark.

00:25:22.020 --> 00:25:29.340
As you can see,
when this file was created, the editors,

00:25:29.340 --> 00:25:29.340
oh yeah, different scenario, yeah.

00:25:32.900 --> 00:25:35.460
And in this scenario,
I want to be able to allow editors to be

00:25:35.460 --> 00:25:38.280
able to pick stories up from this folder.

00:25:38.290 --> 00:25:42.620
So I can add an additional ACE here.

00:25:48.000 --> 00:25:49.440
I just want them to be able to read.

00:25:49.600 --> 00:25:52.440
I just want them to be able to
retrieve these stories that the

00:25:52.440 --> 00:25:55.250
writers have created so they don't
make any modifications in that folder.

00:25:57.170 --> 00:26:01.040
And this folder we have
set aside for them to,

00:26:01.040 --> 00:26:04.020
after they do their modifications,
they can drop those stories back.

00:26:04.050 --> 00:26:06.820
As you can see,
they have full control here.

00:26:06.930 --> 00:26:15.190
Just to note that these privileges are
enforced over AFP in Tiger environment

00:26:15.890 --> 00:26:17.720
as well as for Windows.

00:26:17.720 --> 00:26:20.540
This server here is running a
primary domain controller and we

00:26:20.790 --> 00:26:26.160
have a PC here and hopefully it
doesn't have any viruses by now.

00:26:26.160 --> 00:26:28.920
Can we bring up the laptop?

00:26:28.920 --> 00:26:32.960
Okay,
so this guy is a domain member of this

00:26:32.960 --> 00:26:37.800
primary domain controller and he has
a mount of that Daily Planet share.

00:26:37.860 --> 00:26:46.670
So we have those two folders
so we can look at the incoming.

00:26:49.500 --> 00:26:52.480
Okay, you can see what happened when
we opened the security panel.

00:26:52.570 --> 00:26:56.810
We've added, as Rusty mentioned,
a Samba VFS plugin that

00:26:56.810 --> 00:27:01.010
translates between the Apple's
implementation of ACLs and NT.

00:27:01.240 --> 00:27:05.470
Because there's pretty much a
one-for-one permissions model,

00:27:05.480 --> 00:27:07.240
it's pretty seamless.

00:27:07.240 --> 00:27:12.240
If you look here,
let's go to the advanced view.

00:27:12.240 --> 00:27:16.640
If you remember the
settings from the server,

00:27:16.640 --> 00:27:20.800
you have your writers still have
full control in the incoming box.

00:27:20.800 --> 00:27:24.760
Remember I added the editors ACE.

00:27:25.170 --> 00:27:27.960
and they have read control
as you can see here.

00:27:28.010 --> 00:27:31.110
And also, another thing to note is

00:27:31.200 --> 00:27:35.960
Well, in the NT model,
all they have a concept of, over SMB,

00:27:35.960 --> 00:27:38.560
you're emulating an NTFS volume,
and they just have

00:27:38.660 --> 00:27:40.220
concept of ACLs period.

00:27:40.220 --> 00:27:42.610
So we had the issue of,
what do you do with

00:27:42.610 --> 00:27:44.260
the POSIX permissions?

00:27:44.260 --> 00:27:47.920
Because in our environment,
we still enforce both.

00:27:47.950 --> 00:27:51.470
And in this case, and it still matters,
they're still enforced whether

00:27:51.540 --> 00:27:54.650
they're displayed or not.

00:27:54.740 --> 00:27:57.200
Since the ACLs are
actually processed first,

00:27:57.230 --> 00:28:00.860
and the POSIX permissions,
which these two ACE entries

00:28:00.860 --> 00:28:05.600
at the end represent,
because remember that the

00:28:05.620 --> 00:28:09.990
initial folder had the owner,
administrator Apple,

00:28:09.990 --> 00:28:12.500
and then the group administrators.

00:28:12.570 --> 00:28:15.920
And those privileges are here
as inherited ACEs from the,

00:28:15.950 --> 00:28:18.760
and they show up as parent
because they're actually created.

00:28:18.760 --> 00:28:23.310
Whenever you create new files or folders,
the UMass of that process

00:28:23.330 --> 00:28:25.280
actually is inherited.

00:28:25.280 --> 00:28:29.220
And so those entries are very important.

00:28:29.250 --> 00:28:31.440
So they're actually appended on the end.

00:28:31.450 --> 00:28:34.170
So when you're processing,
as Mike mentioned,

00:28:34.170 --> 00:28:36.660
it processes the ACL all the way through.

00:28:36.660 --> 00:28:39.940
And if you don't get permissions
from the ACL entries,

00:28:39.940 --> 00:28:43.750
which are writers or editors,
it would actually fall back down and say,

00:28:43.750 --> 00:28:45.680
okay, what are the POSIX permissions?

00:28:45.680 --> 00:28:49.880
In this case,
if we look at Apple and administrators.

00:28:52.360 --> 00:28:56.960
So let's look at... So this
is an incoming folder here,

00:28:57.000 --> 00:28:58.760
and remember,

00:28:59.300 --> 00:29:05.850
I'm logged in as Perry, who's an editor.

00:29:07.160 --> 00:29:08.910
attempts to write to the incoming folder.

00:29:08.990 --> 00:29:11.900
He cannot because of the ACL privileges.

00:29:11.970 --> 00:29:15.000
So, in a workflow environment,
I wouldn't want to.

00:29:15.010 --> 00:29:16.660
I can read that story,
but I can't actually

00:29:16.660 --> 00:29:19.000
write into that folder.

00:29:23.420 --> 00:29:29.080
I'm going to copy this locally,
close incoming.

00:29:29.080 --> 00:29:32.160
I want to edit the story locally here.

00:29:48.210 --> 00:29:53.700
So you save that file locally,
and now I want to drop that file back.

00:29:53.880 --> 00:29:57.710
As an edited story,
now I have access to the edit folder.

00:29:57.790 --> 00:30:00.390
Now let's look at the privileges there.

00:30:01.470 --> 00:30:05.830
And if you look at edited,
you see the simple view, okay,

00:30:05.830 --> 00:30:09.810
let's look here at the more advanced
view where you can see the full

00:30:09.860 --> 00:30:12.000
control editors on that folder.

00:30:12.000 --> 00:30:20.220
Remember the ACL had editors having
full control and then you also

00:30:20.380 --> 00:30:24.500
have the two POSIX ACE entries.

00:30:28.860 --> 00:30:36.700
And if you look at the actual
file itself that's created,

00:30:36.710 --> 00:30:43.190
you'll see that this file has inherited,
you know, editors, full control.

00:30:45.200 --> 00:30:48.590
and the POSIX permissions, Perry,
because he's the actual

00:30:48.590 --> 00:30:51.850
owner of that file,
and administrators was the group.

00:30:57.900 --> 00:31:01.610
The thing we can show here
is that it goes both ways,

00:31:01.690 --> 00:31:04.530
where I can actually say,
"This is incoming." I say, "Well,

00:31:04.600 --> 00:31:08.520
I changed the story,
but I still want my writers to

00:31:08.530 --> 00:31:16.900
still kind of overview the edits
I made." So I want to come in,

00:31:16.900 --> 00:31:16.900
so I just want to add

00:31:17.170 --> 00:31:23.620
So I just want to show that
you have a complete list of...

00:31:24.070 --> 00:31:29.910
The same set of groups that you
have on Mac OS X are available here.

00:31:38.700 --> 00:31:42.160
A little more difficult than a mouse.

00:31:42.170 --> 00:31:47.270
So let's select writers.

00:31:48.210 --> 00:31:50.700
I actually want it by default like we do.

00:31:50.710 --> 00:31:55.200
It'll add writers as an
ACE entry with read privileges.

00:31:55.200 --> 00:32:01.790
Let me see if I select...you see how
editors have full control and now

00:32:01.790 --> 00:32:05.860
writers have read access to this folder.

00:32:05.860 --> 00:32:10.720
Close it, open it again so you see.

00:32:12.550 --> 00:32:14.940
You can see writers are still there.

00:32:14.940 --> 00:32:18.510
Could we switch back to Demo 1?

00:32:23.400 --> 00:32:25.160
Let's see here.

00:32:25.160 --> 00:32:34.990
That writers now have re-control and it's
interpreted by the sharing control panel,

00:32:34.990 --> 00:32:36.120
or server admin.

00:32:36.170 --> 00:32:38.690
So, that's about it.

00:32:48.670 --> 00:32:49.600
Thanks, Stefan.

00:32:49.600 --> 00:32:54.440
If we could go back to slides, please.

00:32:54.500 --> 00:32:57.400
So that's really,
that's something that you can really

00:32:57.400 --> 00:33:01.080
almost do on no other platform,
is have that same intermixing of both

00:33:01.080 --> 00:33:05.460
the POSIX permissions and support
for Unix clients like Mac OS X,

00:33:05.520 --> 00:33:07.990
and complete support
for the Windows clients.

00:33:08.200 --> 00:33:10.450
On systems like NetApp Filers,
you have got to decide up

00:33:10.550 --> 00:33:14.290
front to format your volume in
one specific way or another,

00:33:14.370 --> 00:33:18.590
depending on how you want to
support different sets of clients.

00:33:18.700 --> 00:33:21.390
So just to kind of recap,
we've got a high level of compatibility,

00:33:21.520 --> 00:33:25.900
really seamless integration between
the Mac and the Windows clients.

00:33:25.900 --> 00:33:31.720
And that's really driven by the same
set of permissions on both sides.

00:33:31.860 --> 00:33:37.150
Matching permissions and inheritance,
and you've seen how we've folded that

00:33:37.490 --> 00:33:42.450
POSIX permissions and presented it to
the Windows clients in a way that they

00:33:42.790 --> 00:33:45.790
can digest and use that efficiently.

00:33:47.170 --> 00:33:52.400
So next I'd like to invite Kevin Hoyt
up to the stage and he'll present

00:33:52.400 --> 00:33:59.230
ACLs from a developer's point of view,
kind of one of our early adopters

00:33:59.330 --> 00:34:02.220
of the APIs and capabilities.

00:34:02.660 --> 00:34:04.500
Thank you, Rusty.

00:34:08.760 --> 00:34:12.220
So I thought I'd start off with
a little bit about what I do.

00:34:12.220 --> 00:34:14.770
And I actually am the lead
developer for our Mac client

00:34:14.880 --> 00:34:17.400
for IBM Tivoli Storage Manager.

00:34:19.420 --> 00:34:20.530
Hey!

00:34:20.610 --> 00:34:23.740
I'll get to you in a minute.

00:34:23.770 --> 00:34:27.720
So, because I do work for IBM,
we do have some lawyers to take care of.

00:34:27.720 --> 00:34:30.440
But while everybody's
reading the fine print here,

00:34:30.440 --> 00:34:32.000
everybody's heard of IBM.

00:34:32.000 --> 00:34:37.060
How many people have heard of
IBM Tivoli Storage Manager?

00:34:38.200 --> 00:34:46.800
[Transcript missing]

00:34:47.190 --> 00:34:50.090
So the brief overview for those
people that don't know what

00:34:50.090 --> 00:34:52.510
Tivoli Storage Manager is,
is that we are a

00:34:52.590 --> 00:34:56.740
client-server backup solution,
which means that we have a client that

00:34:56.740 --> 00:35:01.360
runs on a variety of operating systems,
and our server that also runs

00:35:01.360 --> 00:35:03.610
on a set of operating systems.

00:35:04.100 --> 00:35:08.130
Our claim to fame is that we have
what we call a policy-based storage,

00:35:08.250 --> 00:35:11.410
meaning that every file or object
that gets backed up to our server

00:35:11.420 --> 00:35:15.980
is associated with a policy class
that determines how many versions of

00:35:16.040 --> 00:35:18.170
the file are kept and for how long.

00:35:19.130 --> 00:35:23.480
But the real point is
we protect your data.

00:35:23.540 --> 00:35:26.800
We're able to manage continuing
the backup if something happens

00:35:26.800 --> 00:35:29.610
with the network or something
goes wrong on the client side,

00:35:29.610 --> 00:35:30.400
we'll retry.

00:35:30.420 --> 00:35:34.160
Same kind of thing
happens on the restore.

00:35:36.800 --> 00:35:41.890
We have clients for most of the
operating systems out there,

00:35:42.310 --> 00:35:47.100
including Apple, AIX, Linux, Windows,
and ZOS.

00:35:47.280 --> 00:35:49.950
Our server also runs on
a variety of systems,

00:35:50.180 --> 00:35:56.600
including AIX, Windows, ZOS,
and a few other Linux systems.

00:35:57.580 --> 00:36:00.420
But really a little bit
more about the client,

00:36:00.420 --> 00:36:02.980
just to let you know that the
Tivoli Storage Manager has actually

00:36:02.980 --> 00:36:04.260
been around for quite a while.

00:36:04.260 --> 00:36:08.400
We actually have 12 years
of support for the Mac OS,

00:36:08.400 --> 00:36:12.040
starting with System 6 before
Mac OS was even around.

00:36:12.040 --> 00:36:15.210
But we've got 10 years
here of full support,

00:36:15.210 --> 00:36:19.820
and over the last couple of years
we've added the command line client

00:36:19.820 --> 00:36:23.040
and the ability to backup systems
without people being logged in.

00:36:23.800 --> 00:36:28.440
And this year we're looking at
Tiger and adding support for

00:36:28.440 --> 00:36:30.900
ACLs and extended attributes.

00:36:31.920 --> 00:36:35.620
So from the point of view
of the system administrator,

00:36:35.820 --> 00:36:41.660
ACLs are important way of controlling
access to the data on your systems.

00:36:41.660 --> 00:36:45.560
As a backup provider,
they're also important to

00:36:45.570 --> 00:36:49.690
us as one attribute of the
data that's important to you.

00:36:51.940 --> 00:36:55.770
The good news is that IBM actually
has some experience on other

00:36:55.940 --> 00:37:00.330
Unix systems managing ACLs,
so we have a model to follow.

00:37:00.480 --> 00:37:01.790
They just happen to be new on Tiger.

00:37:03.940 --> 00:37:06.200
And I'll spend the rest of my
presentation talking about what

00:37:06.200 --> 00:37:11.210
I've learned as I implemented
ACL support in Tivoli Storage Manager.

00:37:13.230 --> 00:37:14.700
First of all,
I wanted to talk a little bit

00:37:14.700 --> 00:37:16.280
about the tools that are available.

00:37:16.280 --> 00:37:19.250
We've talked about some of these before.

00:37:19.330 --> 00:37:22.100
The GUI-based tools are
the Workgroup Manager.

00:37:22.260 --> 00:37:25.700
There's also the command
line tool for the FS ACL.

00:37:25.810 --> 00:37:29.450
One thing that is not noted
in the documentation is that

00:37:29.450 --> 00:37:33.510
if you turn on or turn off
ACL support at a file system level,

00:37:33.520 --> 00:37:37.810
that file system does need to
be unmounted and remounted.

00:37:37.870 --> 00:37:41.000
Otherwise,
things are not going to work right.

00:37:42.400 --> 00:37:45.450
There's also command line
tools to set them on the,

00:37:45.480 --> 00:37:47.930
so we've got the file system
level and the folder level,

00:37:47.930 --> 00:37:49.640
which we've also already talked about.

00:37:49.650 --> 00:37:53.300
They also can be set on
files with the shmod command.

00:37:53.300 --> 00:37:57.850
The other thing that Rusty did
mention is that ACLs are supported

00:37:57.850 --> 00:38:01.680
on Mac OS Server and the client,
the work group manager, of course,

00:38:01.680 --> 00:38:03.380
is not available on the server.

00:38:06.290 --> 00:38:11.590
So because we have a POSIX implementation
that was introduced last year,

00:38:11.630 --> 00:38:15.440
we have a set of
POSIX functions that are normal.

00:38:15.440 --> 00:38:19.530
Anyone who's seen ACLs before will
recognize this set of functions

00:38:19.660 --> 00:38:23.370
and realize that they're able
to manage everything that we

00:38:23.370 --> 00:38:25.520
need to be able to do with ACLs.

00:38:27.150 --> 00:38:32.240
There's a couple things
that are not documented yet.

00:38:34.600 --> 00:38:37.470
And if all you really
need is ACL support,

00:38:37.480 --> 00:38:40.340
this set of functions is
sufficient to do that for you.

00:38:40.340 --> 00:38:47.680
However, ACLs are really only one aspect
of file security on Tiger.

00:38:48.020 --> 00:38:51.770
What we really have is a
new file security model that

00:38:51.780 --> 00:38:56.240
we've been talking about,
but it was really in the context of ACLs.

00:38:56.250 --> 00:39:00.030
Most of these items we recognize
as being available through stat.

00:39:00.130 --> 00:39:03.860
We've been doing user
IDs and group IDs for years.

00:39:03.860 --> 00:39:09.660
The bit that's new is the
owner UUID and the group UUIDs.

00:39:09.660 --> 00:39:13.160
And we really have to take those into
account when you talk about being

00:39:13.160 --> 00:39:15.800
able to manage the ACL information.

00:39:17.000 --> 00:39:21.640
And because we have a new model,
we have some new functions to

00:39:21.640 --> 00:39:24.790
manage what is really a structure.

00:39:24.820 --> 00:39:31.460
And these allow you to get and set
these attributes in this data structure.

00:39:32.260 --> 00:39:35.700
There's also some new functions
in STAT that are really

00:39:35.700 --> 00:39:40.070
extended versions of the,
of the, what are really well-known

00:39:40.070 --> 00:39:41.920
functions on the system.

00:39:42.070 --> 00:39:44.740
And just for the curious,
the X means that they're extended,

00:39:44.740 --> 00:39:48.230
and the NP indicates that they're
not portable to any other systems.

00:39:48.270 --> 00:39:52.490
So they're extensions and can't
really go anywhere besides Mac.

00:39:52.830 --> 00:39:58.110
Unfortunately, none of these functions
are documented yet.

00:40:02.770 --> 00:40:05.400
Also that the,
so those were really the C library

00:40:05.400 --> 00:40:07.140
functions that were added.

00:40:07.160 --> 00:40:10.020
There's also support that's
been added to Carbon,

00:40:10.020 --> 00:40:14.430
so you can get file security information
through the normal Carbon calls when

00:40:14.430 --> 00:40:16.580
you get information about files.

00:40:17.490 --> 00:40:20.860
One note here is that when you get
a file security ref from Carbon,

00:40:20.860 --> 00:40:22.400
you do need to make
sure you release that,

00:40:22.400 --> 00:40:23.940
otherwise you'll be leaking memory.

00:40:23.940 --> 00:40:26.630
And that's actually
noted in the header file.

00:40:28.410 --> 00:40:31.640
And because we now have UUIDs
we need to keep track of,

00:40:31.740 --> 00:40:35.510
there's a header file and some
functions in Core Foundation to

00:40:35.510 --> 00:40:39.880
help format and view those strings,
that information.

00:40:41.060 --> 00:40:46.030
So let's take a quick look at how
to retrieve the information in

00:40:46.140 --> 00:40:48.980
the file security structure so
we can get this information and

00:40:48.980 --> 00:40:50.940
do something interesting with it.

00:40:51.010 --> 00:40:54.750
First of all, we need to have, obviously,
local variables to hold this information,

00:40:54.750 --> 00:40:59.650
and then do a stat call or
the FSGit info call to load up

00:40:59.660 --> 00:41:01.660
the file security structure.

00:41:01.700 --> 00:41:05.770
And then make a set of calls with
the Git property so that we can load

00:41:05.770 --> 00:41:10.370
it into our local variables and do
something interesting with them.

00:41:10.620 --> 00:41:13.130
And then the other side of
this is how do you set those,

00:41:13.140 --> 00:41:16.640
and again, you measure the information
that you want to put,

00:41:16.650 --> 00:41:22.500
make the set calls to set the properties,
and then SMOD the file

00:41:22.500 --> 00:41:24.670
to actually set them.

00:41:26.500 --> 00:41:27.740
Sort of.

00:41:27.740 --> 00:41:31.380
A note here is that Schmod
is not actually capable of

00:41:31.380 --> 00:41:34.690
setting the UUIDs at this point.

00:41:36.210 --> 00:41:37.360
You need to actually be able to do that.

00:41:37.360 --> 00:41:42.640
You can write a utility that
uses get adder list and set adder

00:41:42.910 --> 00:41:45.280
list and do it at a lower level.

00:41:45.700 --> 00:41:48.110
The good news is that there
really aren't any UUIDs in the

00:41:48.110 --> 00:41:52.400
system that you can get to yet,
so the fact that this doesn't

00:41:52.400 --> 00:41:54.590
work doesn't impact much.

00:41:55.200 --> 00:41:58.800
So some lessons that I've learned
over the last few weeks as

00:41:58.800 --> 00:42:03.410
I implemented this was that things
aren't documented very well.

00:42:05.490 --> 00:42:08.580
However, once you get past that,
you do realize that the file

00:42:08.660 --> 00:42:13.580
security model is actually better
than trying to do ACLs and the

00:42:13.580 --> 00:42:16.920
UUID information separately,
because they do group it all

00:42:16.920 --> 00:42:20.260
together into one structure,
one common set of files,

00:42:20.260 --> 00:42:22.160
and sets them all at once.

00:42:24.250 --> 00:42:27.130
And actually this is really a
much better solution than we

00:42:27.170 --> 00:42:29.020
have on other Unix platforms.

00:42:29.020 --> 00:42:33.100
Because they are managed all at once,
there's less opportunity for

00:42:33.100 --> 00:42:34.870
things to get out of sync.

00:42:34.940 --> 00:42:38.100
For example, on some other systems,
if you change the owner of a

00:42:38.100 --> 00:42:42.190
file after you set the ACLs,
the ACLs no longer work.

00:42:42.270 --> 00:42:46.590
So this is all encapsulated nicely,
so it works nice.

00:42:47.500 --> 00:42:51.410
In summary, I do want to thank the
Apple engineers that were able to

00:42:51.410 --> 00:42:54.800
provide me with the documentation
so I could actually implement this.

00:42:54.940 --> 00:42:56.900
So, thank you.

00:42:57.740 --> 00:43:00.600
And also that knowing the
Table Storage Manager is able to

00:43:00.600 --> 00:43:04.140
manage this information I think
is going to be great for IBM and

00:43:04.440 --> 00:43:07.130
Apple customers as time goes on.

00:43:07.340 --> 00:43:11.660
And for those people that are TSM users,
we'll be starting a beta next month

00:43:11.710 --> 00:43:13.580
to test our support for Tiger.

00:43:13.610 --> 00:43:17.300
If you're interested,
please get with me after the session.

00:43:17.300 --> 00:43:20.800
Okay.

00:43:20.800 --> 00:43:20.800
Back to you Rusty.

00:43:26.800 --> 00:43:28.900
Thanks, Kevin.

00:43:28.940 --> 00:43:31.740
So yeah,
so it's a good experience for us.

00:43:31.740 --> 00:43:34.080
We learn both ways,
find out where the holes

00:43:34.080 --> 00:43:36.680
are in our implementation,
working with Kevin.

00:43:36.680 --> 00:43:41.050
And we've got a little bit of work
to finish up some of the rough

00:43:41.050 --> 00:43:45.360
edges and really get that ready for
client and a wider release and make

00:43:45.360 --> 00:43:47.460
it easier for developers to use.

00:43:48.640 --> 00:43:52.840
But let's take a little
look at ACL best practices.

00:43:52.880 --> 00:43:56.460
This by no means will be
any sort of definitive list,

00:43:56.460 --> 00:44:01.670
but it's a good place to get
started in thinking about ACLs

00:44:01.740 --> 00:44:04.960
and how they're going to impact
the deployment on your networks.

00:44:04.960 --> 00:44:10.860
Because we're making a big switch here
from very limited ability to control

00:44:10.860 --> 00:44:16.020
access on our file servers to very,
very flexible and potentially

00:44:16.360 --> 00:44:18.330
confusing and complex ways.

00:44:18.360 --> 00:44:19.960
if we're not careful.

00:44:22.580 --> 00:44:26.830
So the first thing that I would
recommend in deploying this on your

00:44:26.830 --> 00:44:30.580
networks is to start with setting
your everyone access to none.

00:44:30.600 --> 00:44:37.160
You can increase the security
of your servers that way,

00:44:37.160 --> 00:44:41.700
and you can control then access
into the servers using the SACL.

00:44:41.700 --> 00:44:45.590
So no longer do you need to allow
everyone access into a server

00:44:45.590 --> 00:44:49.000
just because you're plugged into
the Active Directory network

00:44:49.000 --> 00:44:52.320
and you've got 10,000 users
coming out of Active Directory.

00:44:52.320 --> 00:44:56.300
You can limit that to a group or set
of groups of people or individuals

00:44:56.370 --> 00:45:00.510
that really need access to the
server that you're trying to run.

00:45:02.860 --> 00:45:06.930
Another good idea is to manage
permissions at the group level.

00:45:06.940 --> 00:45:11.460
Rather than setting permissions,
I would say kind of the old way

00:45:11.460 --> 00:45:17.380
where you had set user permissions,
try and break it down into smaller groups

00:45:17.380 --> 00:45:23.690
of users and use those as the building
blocks for the ACLs in your ACES.

00:45:24.070 --> 00:45:27.830
So what do we mean by factoring
those groups and breaking them down?

00:45:27.830 --> 00:45:35.290
We can take hypothetical software
organization where they had just one

00:45:35.290 --> 00:45:39.450
software group to manage all access
permissions on their file servers.

00:45:39.460 --> 00:45:44.320
And in this group we had the
typical scenario of engineers,

00:45:44.320 --> 00:45:47.360
QA, and management up the chain.

00:45:47.360 --> 00:45:51.760
The first thing that folks wanted
to do was break it out to that,

00:45:51.760 --> 00:45:56.360
"I want only this set of managers
to have access to personnel

00:45:56.360 --> 00:46:00.600
documents and future plans kind of
information on a file server." So we

00:46:00.600 --> 00:46:03.000
can break that down and to say,
"Okay,

00:46:03.000 --> 00:46:07.630
let's take those managers and create
just the management group out of those

00:46:07.630 --> 00:46:15.100
users." And then we've got two other
independent component development groups.

00:46:15.100 --> 00:46:16.500
One for applications.

00:46:16.500 --> 00:46:19.850
And they want their own server
with their private access.

00:46:19.880 --> 00:46:24.000
Or maybe they just want a SharePoint on a
server that other people have access to.

00:46:24.140 --> 00:46:26.900
So we'll create a separate
group just for them.

00:46:26.950 --> 00:46:30.810
And likewise for the systems group.

00:46:31.030 --> 00:46:34.490
The work that's kind of
interesting is within QA,

00:46:34.610 --> 00:46:37.680
they want, they're going to collaborate
between these two teams,

00:46:37.680 --> 00:46:39.440
so they want shared access.

00:46:39.440 --> 00:46:42.800
And there's a number of test
tools and test documents that

00:46:42.810 --> 00:46:46.900
they all need to share access to,
so we'll create a group for them.

00:46:46.900 --> 00:46:51.330
But once we put it back all together,
no longer do we compose that

00:46:51.330 --> 00:46:56.540
larger group out of individuals,
but it's composed of nested groups.

00:46:56.760 --> 00:46:59.630
And so we just take those
groups and put them together,

00:46:59.630 --> 00:47:03.190
and that then becomes the larger
software organization group.

00:47:03.200 --> 00:47:07.430
The benefit that you get from this
type of factoring of your group

00:47:07.540 --> 00:47:12.610
policies is that as people change
roles and move within the organization,

00:47:12.620 --> 00:47:15.310
you just change the
groups that they're in,

00:47:15.310 --> 00:47:19.310
and they automatically get the
right set of access permissions

00:47:19.310 --> 00:47:22.740
from the servers or to the services
that they're trying to access.

00:47:22.740 --> 00:47:26.440
So if we move someone out
of the QA organization,

00:47:26.620 --> 00:47:30.110
and make them one of the managers
of the applications group,

00:47:30.210 --> 00:47:36.220
for example, just change their group
from QA to the managers,

00:47:36.220 --> 00:47:39.150
and they'll have all the
right access they need.

00:47:41.060 --> 00:47:47.230
Another good thing to do is to use
inheritance to control access onto files.

00:47:47.230 --> 00:47:50.000
You've seen that already
in Workgroup Manager.

00:47:50.000 --> 00:47:54.940
It really is a best practice that we've
encoded right into the GUI for sharing

00:47:54.940 --> 00:47:58.350
and controlling access on your servers.

00:47:59.260 --> 00:48:01.860
From the command line, of course,
you can do whatever you want,

00:48:01.870 --> 00:48:06.180
but from the graphical interface,
we've made it easy to control

00:48:06.180 --> 00:48:08.650
access through inheritance.

00:48:08.680 --> 00:48:12.490
And you can see this is our
default set of inheritance,

00:48:12.510 --> 00:48:17.660
which is applied to this folder,
applied to child folders, child files,

00:48:17.660 --> 00:48:19.660
and to the descendants.

00:48:19.660 --> 00:48:24.060
And the graphic kind of gives you a
pictorial example of how that works.

00:48:24.060 --> 00:48:28.660
So new files created no matter how
deeply nested into that hierarchy.

00:48:29.260 --> 00:48:31.460
We'll be applied that access control.

00:48:40.100 --> 00:48:44.070
There are of course many different
options and combinations of bits.

00:48:44.080 --> 00:48:49.010
You can see up in the top left corner,
you can just turn inheritance off

00:48:49.010 --> 00:48:53.340
altogether and have that ACE apply
only to the folder and it won't

00:48:53.340 --> 00:48:57.460
be passed on to any new files and
folders that are created within it.

00:48:57.710 --> 00:49:03.800
There's a lot of different
options here and I would just say,

00:49:03.800 --> 00:49:03.800
you know, use them wisely.

00:49:07.570 --> 00:49:11.340
Using propagate permissions,
there you really have

00:49:11.340 --> 00:49:13.720
to decide when to do it,
and the best time to do

00:49:13.810 --> 00:49:16.460
it is the propagation,
what it does.

00:49:16.460 --> 00:49:18.140
Let me back up a second there.

00:49:18.140 --> 00:49:23.130
Propagation through Workgroup Manager is
that it takes the inheritance rules

00:49:23.210 --> 00:49:28.220
and forces them through one of the
folder hierarchies in your share points.

00:49:29.560 --> 00:49:34.470
It doesn't have an undo,
but the way to undo it is to remove

00:49:34.470 --> 00:49:38.740
the ACEs that you've applied at the
higher levels and then repropagate down.

00:49:38.760 --> 00:49:45.140
If you remember from the Workgroup
Manager sharing in prior versions,

00:49:45.170 --> 00:49:47.340
we had the copy of POSIX permissions.

00:49:47.340 --> 00:49:51.810
And that's still available,
although it's no longer the default.

00:49:51.880 --> 00:49:56.290
And inheritance is accumulative
within a hierarchy.

00:49:56.320 --> 00:49:58.960
If we can go back to demo one.

00:50:00.170 --> 00:50:01.700
Um...

00:50:02.580 --> 00:50:08.500
We can see here where Stefan made
a change to the incoming stories,

00:50:08.500 --> 00:50:12.570
but this was after a file had
already been deposited there.

00:50:12.780 --> 00:50:19.330
So now writers have, editors have, no,
I'm sorry, on the edited,

00:50:19.450 --> 00:50:23.040
the writers now have read access.

00:50:23.460 --> 00:50:29.870
But since the applenews.txt was uploaded
before that ACL change was made,

00:50:29.880 --> 00:50:34.500
we can go through and after
we've changed the permissions,

00:50:34.550 --> 00:50:37.200
use the propagate command.

00:50:37.210 --> 00:50:40.090
So here we'll go back and select
the root of the SharePoint,

00:50:40.210 --> 00:50:43.070
because we want to make sure,
normalize everything that's

00:50:43.070 --> 00:50:47.520
within this SharePoint to the new
permissions model that we've set up.

00:50:47.530 --> 00:50:51.000
So I select Daily Planet,
which is the root SharePoint,

00:50:51.080 --> 00:50:53.690
propagate permissions,
and a sheet comes down

00:50:53.700 --> 00:50:56.800
prompting us to say,
okay, what do you want to propagate?

00:50:56.800 --> 00:50:59.200
In this case,
all we're interested in doing is

00:50:59.200 --> 00:51:01.700
propagating the ACL information.

00:51:01.700 --> 00:51:05.880
If we were to choose the owner name,
group, or the POSIX permissions,

00:51:05.900 --> 00:51:09.030
there's no propagation rules
for them in the same way that

00:51:09.040 --> 00:51:12.800
we have these inheritance bits
to control the ACE entries.

00:51:12.800 --> 00:51:17.110
They would just be applied uniformly
to everything within that hierarchy.

00:51:17.120 --> 00:51:20.290
In this case,
we're okay with the POSIX permissions

00:51:20.310 --> 00:51:23.470
and the owners that exist,
so we'll just propagate

00:51:23.470 --> 00:51:25.120
the access control list.

00:51:25.380 --> 00:51:30.310
And as that propagates,
it follows that entire hierarchy,

00:51:30.320 --> 00:51:34.160
and we can go back and
find the edited news.txt,

00:51:34.160 --> 00:51:37.720
and we can see that it's got its
permissions that have been fixed

00:51:37.720 --> 00:51:42.100
up to match exactly what we want,
which is to give the editors full

00:51:42.100 --> 00:51:45.320
control and the writers read access.

00:51:45.320 --> 00:51:48.320
Back to slides, please.

00:51:53.760 --> 00:51:59.250
Using the deny ACE is very powerful,
but you should really think about if

00:51:59.320 --> 00:52:03.480
I have to deny a certain individual
or group access to something

00:52:03.500 --> 00:52:07.400
that they are being granted,
maybe it's that I haven't factored the

00:52:07.460 --> 00:52:09.950
groups in a way that's very useful.

00:52:10.680 --> 00:52:14.350
Denies can really limit your use,
the flexibility,

00:52:14.360 --> 00:52:19.630
because that really short circuits the
processing of the access control list.

00:52:19.700 --> 00:52:24.330
Once you hit a deny for any of the
operations that are being requested,

00:52:24.740 --> 00:52:28.990
the whole operation will fail,
even if it's granted later on.

00:52:29.020 --> 00:52:33.300
So that's just something to keep
in mind when you're setting up

00:52:33.310 --> 00:52:36.000
permissions on your SharePoints.

00:52:36.350 --> 00:52:42.170
The Effective Permissions Inspector is
really a very useful tool.

00:52:42.260 --> 00:52:45.170
It quickly computes a user's
effective access rights,

00:52:45.190 --> 00:52:50.020
so you can see exactly which bits apply
to given users anywhere in the hierarchy.

00:52:50.020 --> 00:52:54.830
And it's very good to use any time after
you've changed the access control list

00:52:55.090 --> 00:53:00.160
and you want to see the net effect for
given users as to how it applies to them.

00:53:00.160 --> 00:53:02.600
So let's go back here.

00:53:02.600 --> 00:53:06.150
We're taking a look at
a sample where Rusty,

00:53:06.250 --> 00:53:11.470
admin, and the sample readers group
all have some form of access

00:53:11.550 --> 00:53:12.710
within the sample folder.

00:53:12.720 --> 00:53:17.700
In the case for Rusty,
I've been denied any read access.

00:53:17.700 --> 00:53:22.710
So we can take a look at the
Effective Permissions Inspector,

00:53:22.710 --> 00:53:27.120
and that brings up the
effective access for Rusty.

00:53:27.120 --> 00:53:30.140
Just from the users' perspective,
it's a very useful tool.

00:53:30.140 --> 00:53:35.050
groups window,
we would drag the name into that window.

00:53:35.950 --> 00:53:39.060
And you can see I've got
administrative control,

00:53:39.210 --> 00:53:43.720
but no read access and full write access,
which is probably fairly

00:53:43.720 --> 00:53:46.130
unexpected since I've been denied.

00:53:46.330 --> 00:53:49.600
But as it turns out,
I'm part of the admin group,

00:53:49.670 --> 00:53:53.400
so it's really only blocking
out just the read access.

00:53:53.400 --> 00:53:57.350
For another user, Joe Smith,
is a member of the sample readers,

00:53:57.440 --> 00:54:00.000
and if we drag his name
into the inspector,

00:54:00.000 --> 00:54:03.830
we find that he has the read
access just as we would expect.

00:54:06.180 --> 00:54:10.650
Keeping it simple is always a good idea,
especially when it comes to the

00:54:10.750 --> 00:54:14.100
Access Control Lists and where
you're going to apply them.

00:54:14.150 --> 00:54:18.850
Use them in your SharePoints,
but really keep the system areas,

00:54:18.850 --> 00:54:22.090
keep using the POSIX permissions there.

00:54:23.810 --> 00:54:28.750
And then finally, to wrap it all up,
just think about what you're doing.

00:54:30.190 --> 00:54:33.320
So that really wraps it up for today.

00:54:33.350 --> 00:54:38.030
We'll bring everyone back up to
the stage here and Skip Levins

00:54:38.030 --> 00:54:39.880
will lead us in some Q&A.

00:54:40.090 --> 00:54:41.740
Thanks.

00:54:51.180 --> 00:54:54.520
Yeah, I should mention that there's,
especially for developers,

00:54:54.640 --> 00:54:57.860
there's a lab coming up
this afternoon writing file

00:54:57.860 --> 00:55:01.010
systems using supported KPIs,
and that'll include

00:55:01.100 --> 00:55:02.460
information about ACLs.

00:55:02.480 --> 00:55:05.840
The other two sessions
have already taken place,

00:55:05.840 --> 00:55:09.330
but they'll be on the DVDs
that you'll get later on.