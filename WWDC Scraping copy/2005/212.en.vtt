WEBVTT

00:00:02.220 --> 00:00:03.540
Good morning.

00:00:03.590 --> 00:00:05.980
Welcome to the 2005 printing session.

00:00:05.980 --> 00:00:06.740
I'm Richard Blanchard.

00:00:06.740 --> 00:00:09.580
I am the engineering
manager for printing.

00:00:12.100 --> 00:00:14.880
So I like to start these sessions
always with a thank you because so

00:00:14.880 --> 00:00:17.320
much of printing depends upon two
different groups of developers.

00:00:17.320 --> 00:00:19.560
It depends upon the application
developers on the one hand

00:00:20.140 --> 00:00:22.830
and the printer driver
developers on the other hand.

00:00:22.860 --> 00:00:26.020
We're lucky enough to have thousands
and thousands of applications that

00:00:26.020 --> 00:00:29.210
generate really beautiful output on
Mac OS X through the printing system,

00:00:29.280 --> 00:00:31.540
so thank you to all the
application drivers.

00:00:31.540 --> 00:00:33.540
And on the other hand,
we also support thousands

00:00:33.680 --> 00:00:36.100
of printer models,
so thank you to all the printer vendors

00:00:36.320 --> 00:00:38.210
and the people writing printer drivers.

00:00:38.960 --> 00:00:42.420
It's actually quite a luxury to have
gigabytes of drivers and actually have to

00:00:42.520 --> 00:00:44.860
worry about how we're going to get them
all on a disk and get them to our users.

00:00:44.860 --> 00:00:47.670
So it's a problem, but it's kind of the
problem you'd want to have.

00:00:50.470 --> 00:00:51.560
So what does the print system do?

00:00:51.560 --> 00:00:54.630
We sit here in the middle of
these two mountains of code

00:00:54.630 --> 00:00:58.980
written by the application writers
and the printer driver writers.

00:00:58.980 --> 00:00:59.430
And we mediate.

00:00:59.430 --> 00:01:00.810
That's really what the print system does.

00:01:00.880 --> 00:01:03.030
The applications know what code
or what they want to render.

00:01:03.040 --> 00:01:04.640
They give that to us in the print system.

00:01:04.640 --> 00:01:07.880
We do some handling of it,
eventually hand it to the printer driver,

00:01:07.880 --> 00:01:09.440
which gets it to the printer.

00:01:09.440 --> 00:01:10.890
And so we do this mediation.

00:01:10.980 --> 00:01:13.390
And as we go forward,
more and more of this mediation

00:01:13.490 --> 00:01:16.460
has turned out to be on our end,
hey, my application, you know,

00:01:16.510 --> 00:01:20.380
application 2406,
doesn't print with printer driver 7.0.

00:01:20.400 --> 00:01:23.160
And we end up having
to go figure out why.

00:01:23.160 --> 00:01:25.620
And then once you start
throwing in all the different

00:01:25.620 --> 00:01:29.000
communications protocols we support,
that combinations,

00:01:29.150 --> 00:01:30.480
those combinations grow very quickly.

00:01:30.480 --> 00:01:33.770
And we have to come up with some way
to try and handle those problems.

00:01:33.770 --> 00:01:37.310
So the goal today is to

00:01:39.630 --> 00:01:41.700
was to talk about ways we
can handle those problems.

00:01:41.740 --> 00:01:45.610
And I think the basis for the problem
is the fact that the application

00:01:45.710 --> 00:01:49.160
writers live in a completely different
world than the printer driver writers.

00:01:49.160 --> 00:01:51.450
The application writers
actually have it pretty good.

00:01:51.550 --> 00:01:52.620
You're in user space.

00:01:52.720 --> 00:01:53.740
You're in a login context.

00:01:53.740 --> 00:01:55.660
You get to access all
of the user's files.

00:01:55.660 --> 00:01:56.680
You have all the right permissions.

00:01:56.680 --> 00:01:59.420
You have all of Cocoa to
make your life easy.

00:01:59.420 --> 00:02:00.710
It's pretty good over there.

00:02:00.720 --> 00:02:03.110
On the other side,
you have the printer driver writers,

00:02:03.160 --> 00:02:04.120
and they're in a different world.

00:02:04.140 --> 00:02:07.040
They live and run inside
of a boot context.

00:02:07.040 --> 00:02:08.940
They never get to run as the user.

00:02:09.170 --> 00:02:11.840
They run as the LP user,
or if they need special resources,

00:02:11.940 --> 00:02:13.340
as the root user.

00:02:13.340 --> 00:02:16.540
So they're separated, really,
from the user and have to run

00:02:16.640 --> 00:02:17.750
in this special environment.

00:02:17.760 --> 00:02:21.880
And they don't necessarily always
understand the travails that the

00:02:21.880 --> 00:02:25.140
application writers have to go through
in order to generate proper output.

00:02:25.140 --> 00:02:27.160
And conversely,
the application writers don't

00:02:27.160 --> 00:02:29.780
always think about what the
printer driver problems might be.

00:02:29.780 --> 00:02:33.620
So the goal today was to give a
tour of the printing system to

00:02:33.620 --> 00:02:36.270
try and bring those two worlds a
little closer together to increase

00:02:36.650 --> 00:02:39.780
the understanding and hopefully,
get applications that work

00:02:39.780 --> 00:02:41.860
with more printer drivers,
have fewer problems,

00:02:42.050 --> 00:02:44.860
and printer drivers that
understand the kind of output the

00:02:44.860 --> 00:02:46.140
applications might be generating.

00:02:46.140 --> 00:02:48.620
So along the way of that tour,
and we haven't done that

00:02:48.760 --> 00:02:51.490
tour for a couple years now,
really since we switched over to CUPS,

00:02:51.570 --> 00:02:54.950
which was pre-Jaguar, along the way,
I want to stop out and point

00:02:54.950 --> 00:02:57.780
out developer opportunities
and some new Tiger features.

00:02:57.800 --> 00:03:02.570
One of the big pluses today, last year,
I was able to announce that

00:03:02.740 --> 00:03:05.600
we had changed 70% of the
print system in the print UI.

00:03:05.600 --> 00:03:08.320
The year before that,
we had changed 70% of this print system,

00:03:08.590 --> 00:03:11.020
in the print server,
and while the mathematics was

00:03:11.130 --> 00:03:14.120
probably a little questionable,
it was pretty scary, but this year,

00:03:14.190 --> 00:03:16.610
since we switched processors,
we didn't have to really change

00:03:16.890 --> 00:03:20.090
big changes in the print system,
so that was a plus.

00:03:20.380 --> 00:03:23.400
So for this tour, we're going to start on
the printer driver side.

00:03:23.430 --> 00:03:26.100
And that really is CUPS,
Common Unix Print System.

00:03:26.100 --> 00:03:28.670
That's an open-source piece of
software we get from the great

00:03:28.670 --> 00:03:30.270
folks at Easy Software Products.

00:03:30.390 --> 00:03:32.100
Michael Sweet, if you know him,
I'm sure he's here today.

00:03:32.100 --> 00:03:34.040
We work with them very closely.

00:03:34.040 --> 00:03:35.280
That is our print system.

00:03:35.310 --> 00:03:37.440
It's that open-source piece of software.

00:03:37.950 --> 00:03:40.680
Richard Blazchard In Tiger,
we're using 1.1.23.

00:03:40.680 --> 00:03:42.490
So we get that from
Easy Software Products.

00:03:42.580 --> 00:03:43.930
We add a couple things into it.

00:03:43.930 --> 00:03:45.520
We try and feed those changes back.

00:03:45.590 --> 00:03:48.830
Some of them are pretty Apple-specific,
so not all of them go back.

00:03:48.900 --> 00:03:51.210
Richard Blazchard For Tiger,
some of the things we

00:03:51.210 --> 00:03:52.730
added was Bonjour support.

00:03:52.730 --> 00:03:55.550
A lot of people thought or have
thought that inside of CUPS,

00:03:55.550 --> 00:03:58.670
we do printer sharing via Bonjour,
and we haven't in the past.

00:03:58.790 --> 00:04:02.370
It was just sort of a little sleight
of hand people thought we did.

00:04:02.590 --> 00:04:05.230
Richard Blazchard So now in Tiger,
the CUPS daemon will actually

00:04:05.230 --> 00:04:07.300
publish shared printers via Bonjour.

00:04:07.360 --> 00:04:09.490
Richard Blazchard Richard Blazchard So if
you have a Bonjour client out there,

00:04:09.490 --> 00:04:11.800
maybe Bonjour for
Windows or a Linux client,

00:04:11.800 --> 00:04:16.920
they can actually do Bonjour lookups and
find the cues that are shared from Tiger.

00:04:16.920 --> 00:04:20.390
Richard Blazchard We also added
something called Lazy CUPS instantiation

00:04:20.390 --> 00:04:21.620
or Lazy CUPS launching.

00:04:21.620 --> 00:04:24.860
The reason behind this was,
and this somewhat pains me to say it,

00:04:24.990 --> 00:04:26.970
is not all our users actually print.

00:04:27.250 --> 00:04:29.360
Richard Blazchard And so the
idea that there was this print

00:04:29.460 --> 00:04:32.250
daemon sort of always there and
waiting for the user to print,

00:04:32.250 --> 00:04:34.350
and maybe they never did,
was problematic,

00:04:34.350 --> 00:04:37.530
and especially if you're running
something like a web server.

00:04:37.580 --> 00:04:39.270
Richard Blazchard You really
never needed the print server.

00:04:39.280 --> 00:04:41.760
Richard Blazchard So what we did,
now when CUPS starts up,

00:04:41.760 --> 00:04:44.580
that daemon starts up at boot time,
it takes a look to see if there

00:04:44.580 --> 00:04:46.180
are any jobs ready to print.

00:04:46.200 --> 00:04:48.920
Richard Blazchard And if there are, well,
then it continues on

00:04:48.970 --> 00:04:50.920
with its initialization,
and it stays running.

00:04:50.940 --> 00:04:52.940
Richard Blazchard If there
aren't any jobs to print,

00:04:52.940 --> 00:04:55.050
then it looks to see if it's
supposed to be sharing printers,

00:04:55.050 --> 00:04:57.420
and if it is, it continues launching
and it shares printers.

00:04:57.420 --> 00:04:59.680
Richard Blazchard But if it
doesn't have any jobs to print,

00:04:59.820 --> 00:05:01.850
and it's not sharing any printers,
it registers with the

00:05:01.850 --> 00:05:03.340
Mach bootstrap server and it quits.

00:05:03.460 --> 00:05:05.990
Richard Blazchard And that daemon's
gone until the user actually does

00:05:05.990 --> 00:05:07.430
something with the print system.

00:05:07.640 --> 00:05:09.340
Richard Blazchard So they drop
a print dialog or they go to the

00:05:09.470 --> 00:05:11.480
command line and do an LP command
line or something like that.

00:05:11.540 --> 00:05:14.520
Richard Blazchard I guess one quick note,
for people who are used to

00:05:14.520 --> 00:05:17.460
going to the CUPS web interface,
that's not enough to

00:05:17.460 --> 00:05:18.760
actually start up the daemon.

00:05:18.760 --> 00:05:20.160
Richard Blazchard So you
have to do something else,

00:05:20.250 --> 00:05:21.520
like go to the command line
and give an LP command,

00:05:21.530 --> 00:05:22.820
and then the web interface will come up.

00:05:22.890 --> 00:05:25.740
Richard Blazchard So anyway,
those are a couple of the changes we

00:05:25.740 --> 00:05:28.160
made on top of CUPS 1.1.23 and Tiger.

00:05:28.160 --> 00:05:30.440
Richard Blazchard Again,
this is all open source.

00:05:30.550 --> 00:05:31.940
We keep it on our Darwin repository.

00:05:32.060 --> 00:05:33.760
Richard Blazchard
We push that every night,

00:05:33.760 --> 00:05:35.400
so you can always see what we're doing.

00:05:35.400 --> 00:05:36.690
Richard Blazchard If you
go to CVS and check it out,

00:05:36.690 --> 00:05:37.480
you'll see what we're doing.

00:05:37.480 --> 00:05:38.320
Richard Blazchard That's
what we did the other day.

00:05:38.320 --> 00:05:40.410
Richard Blazchard If anybody
was paying attention,

00:05:40.420 --> 00:05:42.740
they might have seen some
interesting Endian issues being

00:05:42.740 --> 00:05:44.160
checked in over the last few weeks.

00:05:46.270 --> 00:05:51.100
So we have this thing CUPS,
and what is CUPS?

00:05:51.100 --> 00:05:51.980
Well, it's a print server.

00:05:51.980 --> 00:05:54.100
In particular, it's an internet
printing protocol server.

00:05:54.100 --> 00:05:57.020
It's responsible for
publishing shared printers,

00:05:57.370 --> 00:05:58.220
finding shared printers.

00:05:58.220 --> 00:06:00.410
It's got the web
interface we talked about.

00:06:00.610 --> 00:06:02.210
Queues jobs, and it starts print jobs.

00:06:02.280 --> 00:06:04.070
So we're going to look
at that a little bit.

00:06:04.330 --> 00:06:05.900
How does it share printers?

00:06:05.900 --> 00:06:07.660
Well,
it's got a bunch of different methods,

00:06:07.700 --> 00:06:08.560
especially in Tiger.

00:06:08.940 --> 00:06:11.480
CUPS has always shared printers via UDP.

00:06:11.590 --> 00:06:15.520
It sends out these UDP broadcasts
on the subnet so that other

00:06:15.620 --> 00:06:16.750
CUPS daemons can see it.

00:06:16.840 --> 00:06:19.290
And so that still exists in Tiger,
and it's the same as it was

00:06:19.420 --> 00:06:21.360
in 10.3 and 10.2 before it.

00:06:21.460 --> 00:06:23.150
We've added Bonjour we talked about.

00:06:23.160 --> 00:06:24.860
We also integrate with Samba.

00:06:24.860 --> 00:06:27.530
So if the user turns on
Windows printer sharing,

00:06:27.760 --> 00:06:30.640
we use Samba to publish
our print queues via SMB.

00:06:30.640 --> 00:06:32.610
So that's how we share them.

00:06:32.650 --> 00:06:33.960
How do we take jobs in?

00:06:33.960 --> 00:06:36.800
Well, pretty much via IPP,
the internet printing protocol.

00:06:36.940 --> 00:06:40.160
That's the type of queues that get
published via the UDP broadcast.

00:06:40.160 --> 00:06:42.780
That's the type of queues that
get published via Bonjour.

00:06:42.780 --> 00:06:46.760
For SMB, obviously it's SMB that the
jobs are going to come in.

00:06:46.990 --> 00:06:48.340
And we also take LPD jobs.

00:06:48.450 --> 00:06:50.370
And while we don't have
any publishing of them,

00:06:50.380 --> 00:06:52.530
if you know the host name or
the IP address of a Mac and

00:06:52.530 --> 00:06:55.460
you know the queue name,
you can actually print to it via LPD.

00:06:55.460 --> 00:06:58.960
So we have a pretty broad way
of publishing and actually

00:06:58.960 --> 00:07:00.860
accessing printers on Tiger.

00:07:02.640 --> 00:07:04.630
The way we find shared printers,
the daemon's listening

00:07:04.630 --> 00:07:06.940
for these UDP broadcasts,
and as they come in from

00:07:07.090 --> 00:07:09.920
another CUPS server,
we take that information

00:07:09.920 --> 00:07:10.690
and we build a queue.

00:07:10.910 --> 00:07:13.330
So the UDPs work just
as they always have,

00:07:13.340 --> 00:07:14.760
and it's automatic.

00:07:14.790 --> 00:07:16.700
In Tiger,
we have lots of different ways in the

00:07:16.810 --> 00:07:20.810
user interface that users can also
add these shared printers via Bonjour,

00:07:20.840 --> 00:07:24.670
SMB, or LPD, and even other words,
and that's extensible.

00:07:25.800 --> 00:07:28.140
So again,
basic print server functionality.

00:07:28.170 --> 00:07:29.880
You can queue jobs with CUPS.

00:07:29.940 --> 00:07:32.520
CUPS will support
prioritization and scheduling.

00:07:32.570 --> 00:07:33.380
And it has printer pools.

00:07:33.420 --> 00:07:35.930
And I always like talking about printer
pools because I think they're very cool.

00:07:35.940 --> 00:07:38.420
And I never find enough
people who actually use them.

00:07:38.480 --> 00:07:41.510
The idea with the printer pool is
if you have multiple print queues,

00:07:41.690 --> 00:07:44.640
you can, from our user interface,
wrap them up into one queue

00:07:44.750 --> 00:07:45.980
that gets presented to the user.

00:07:46.070 --> 00:07:49.220
And the example I always use is
the photographer who's got his

00:07:49.220 --> 00:07:51.680
six Raster printers and he's
in a hurry to get his job done,

00:07:52.070 --> 00:07:53.980
needs to print out 20, 30 slides.

00:07:54.030 --> 00:07:57.820
You can make one of these pools--
CUPS calls them classes-- print to it.

00:07:57.970 --> 00:08:00.480
And then the jobs will be dispatched
to the printers as they're available.

00:08:00.480 --> 00:08:01.630
And that's all just part of CUPS.

00:08:01.640 --> 00:08:04.540
And we put a little UI on top of that.

00:08:05.400 --> 00:08:07.440
All right, so now we'll start getting
to the more interesting part.

00:08:07.560 --> 00:08:08.500
How does CUPS actually work?

00:08:08.610 --> 00:08:11.100
Because it's a print server,
at some point we actually have to print.

00:08:11.110 --> 00:08:14.820
And CUPS creates a chain of
processes when it needs to print,

00:08:14.830 --> 00:08:17.840
and these are broken down into filters,
drivers, and backends.

00:08:17.850 --> 00:08:20.330
And this chain of processes
is linked together so that

00:08:20.330 --> 00:08:22.390
at the head of the chain,
there's a file input

00:08:22.390 --> 00:08:24.610
to the first process,
and then the output from that

00:08:24.730 --> 00:08:27.410
first process is piped into
the standard end and the next,

00:08:27.410 --> 00:08:30.020
his standard out to standard end,
eventually all the way

00:08:30.020 --> 00:08:31.680
until it gets to a printer.

00:08:32.000 --> 00:08:36.490
And so we're going to look at that and
see some developer opportunities for you,

00:08:36.490 --> 00:08:37.140
maybe.

00:08:38.990 --> 00:08:40.960
All right, so here's a picture of
the print processes.

00:08:40.960 --> 00:08:43.180
What do the filter processes do?

00:08:43.180 --> 00:08:44.730
Well, they're MIME converters.

00:08:44.790 --> 00:08:46.970
They convert from one file
type to another file type.

00:08:47.050 --> 00:08:47.590
That's all they do.

00:08:47.590 --> 00:08:50.150
They're very specialized,
and they're very specific,

00:08:50.230 --> 00:08:51.670
and they're running there.

00:08:52.260 --> 00:08:57.010
By definition, the very last filter in
the chain is the driver,

00:08:57.060 --> 00:08:59.260
and his job is to make
printer-ready output.

00:08:59.260 --> 00:09:01.440
So he takes the last
conversion of filters,

00:09:01.440 --> 00:09:05.380
usually wraps that up in
some printer commands,

00:09:05.380 --> 00:09:08.920
and then will send that along
again to his standard output,

00:09:08.920 --> 00:09:11.530
which is the standard
output to a back end.

00:09:11.600 --> 00:10:56.500
[Transcript missing]

00:10:56.920 --> 00:10:59.860
So there's this complicated--
complicated is the wrong word.

00:10:59.860 --> 00:11:02.100
Never want to say complicated
in front of developers.

00:11:02.170 --> 00:11:05.180
There is this chain of
processes that go on.

00:11:05.250 --> 00:11:09.000
And because of the chain and
sort of the shared assignment,

00:11:09.110 --> 00:11:10.940
some of these pieces
are written by Apple,

00:11:10.940 --> 00:11:12.820
some are by the printer vendors.

00:11:12.820 --> 00:11:13.800
Sometimes things go wrong.

00:11:13.920 --> 00:11:17.000
We'll say that things only go wrong,
really, when you're in development,

00:11:17.010 --> 00:11:18.820
and we'll ignore the rest.

00:11:18.820 --> 00:11:21.210
But when you're in development and
you're writing your application and

00:11:21.210 --> 00:11:24.290
you're having problems printing,
or if you're writing your printer

00:11:24.290 --> 00:11:26.700
driver and things aren't going right,
I wanted to give you a

00:11:26.700 --> 00:11:27.780
pointer to where to go.

00:11:28.000 --> 00:11:29.060
And this is really very simple.

00:11:29.060 --> 00:11:31.500
You go look in var log CUPS error log.

00:11:31.550 --> 00:11:34.160
And the standard error
from all those processes,

00:11:34.210 --> 00:11:36.360
when they're linked together,
all get piped together.

00:11:36.360 --> 00:11:37.720
It goes into CUPS.

00:11:37.810 --> 00:11:43.600
CUPS looks at its CUPSd.com file to
see what the error log level should be,

00:11:43.600 --> 00:11:46.960
and it writes out corresponding
information into this log file.

00:11:47.160 --> 00:11:48.500
So you can go look at it.

00:11:48.560 --> 00:11:50.220
You look at it normally
without making any changes,

00:11:50.220 --> 00:11:52.220
you'll see lots of informational pieces.

00:11:52.300 --> 00:11:53.700
But if you go into it
and you edit and you say,

00:11:53.740 --> 00:11:54.900
hey, log level is an info.

00:11:54.900 --> 00:11:57.260
It's log level debug,
because I'm a developer.

00:11:57.330 --> 00:12:00.860
You'll now get lots of interesting
pieces of information in there.

00:12:00.940 --> 00:12:02.510
And what's more,
if you're writing a driver and

00:12:02.510 --> 00:12:05.860
you put some fprintfs to standard
error to kind of let yourself

00:12:05.940 --> 00:12:08.800
know what your driver's doing,
those will all show up in the log and

00:12:08.800 --> 00:12:10.470
things will be a lot less mysterious.

00:12:10.560 --> 00:12:12.560
So that's where to go
when things go wrong.

00:12:12.560 --> 00:12:14.440
After you make those changes,
make sure you restart CUPS.

00:12:14.580 --> 00:12:15.100
It's a server.

00:12:15.100 --> 00:12:17.820
It needs to be told to HUP itself.

00:12:18.880 --> 00:12:20.570
And of course,
this is really the best place.

00:12:20.640 --> 00:12:22.580
I've got stacks of these
still in my office.

00:12:22.600 --> 00:12:25.580
If anybody comes into my office ever,
and this has been about three years,

00:12:25.650 --> 00:12:28.150
and asks me a question about cups,
I give them the nickel answer and

00:12:28.150 --> 00:12:30.450
I toss them the book and I say,
come back when you know.

00:12:30.450 --> 00:12:32.190
So Michael Sweet's book, it's terrific.

00:12:32.190 --> 00:12:32.980
I always plug it.

00:12:34.250 --> 00:12:36.120
Richard Blaencharnd So what are you
going to see in the log when you go look?

00:12:36.390 --> 00:12:39.170
This is some informational pieces,
and I use this as an example

00:12:39.170 --> 00:12:42.440
because it really hammers home the
idea of this chain of processes.

00:12:42.440 --> 00:12:43.380
Here's a job.

00:12:43.380 --> 00:12:46.840
It happens to be PDF going to
a PostScript printer over LPD.

00:12:46.840 --> 00:12:48.970
And if you look in the log,
it'll tell you, hey,

00:12:48.970 --> 00:12:51.800
for this job number 18,
I had to start three processes.

00:12:51.800 --> 00:12:55.450
One, CG, PDF to PostScript,
the Apple-supplied converter

00:12:55.450 --> 00:12:57.060
from PDF to PostScript.

00:12:57.260 --> 00:12:59.880
The second filter,
which is because it's the last filter

00:12:59.930 --> 00:13:03.200
in the chain we call the driver,
is the PostScript to PostScript.

00:13:03.480 --> 00:13:22.150
Richard Blaencharnd Richard Blaencharnd

00:13:25.410 --> 00:13:27.690
So, where are the developer
opportunities here?

00:13:27.690 --> 00:13:29.310
Well, they're the MIME filters.

00:13:29.590 --> 00:13:30.980
Those are independent of the driver.

00:13:30.980 --> 00:13:33.410
You can write a MIME filter for
your particular file type without

00:13:33.510 --> 00:13:35.930
ever writing a printer driver
without being a printer vendor.

00:13:36.050 --> 00:13:37.830
So, there's some opportunity there.

00:13:37.860 --> 00:13:41.320
For the driver, that last filter,
that's pretty much you're going

00:13:41.320 --> 00:13:42.750
to be a printer developer.

00:13:42.850 --> 00:13:44.020
You're going to be an OEM.

00:13:44.180 --> 00:13:46.430
But there are alternate
drivers out there,

00:13:46.430 --> 00:13:48.370
alternative drivers out there.

00:13:49.400 --> 00:13:50.320
GIMP prints one.

00:13:50.320 --> 00:13:50.960
We ship that.

00:13:51.220 --> 00:13:52.070
There's OmniPrint.

00:13:52.070 --> 00:13:53.710
There's just tons of them.

00:13:53.710 --> 00:13:55.120
And so,
if you are interested in one of those

00:13:55.220 --> 00:13:58.170
projects and want to bring them over,
there's some good opportunity there.

00:13:58.180 --> 00:13:59.360
And lastly, the back ends.

00:13:59.360 --> 00:14:01.670
The black ends are, again,
independent of the driver.

00:14:01.670 --> 00:14:03.210
All they do is do communications.

00:14:03.270 --> 00:14:05.230
And so,
maybe you decided you actually want

00:14:05.350 --> 00:14:08.270
to generate PostScript from an output,
but you want to FTP it somewhere

00:14:08.270 --> 00:14:10.560
because that's important to
the workflow for your customer.

00:14:10.560 --> 00:14:13.140
You write this very simple
tool to do FTP on the back end.

00:14:13.460 --> 00:14:14.590
And it can be written in C.

00:14:14.590 --> 00:14:16.020
It can be written in Python.

00:14:16.020 --> 00:14:17.590
You can do this in a Bash script.

00:14:17.600 --> 00:14:19.290
It's just very simple to do.

00:14:19.400 --> 00:14:22.830
And again, it's independent of all
the drivers in front of it.

00:14:25.550 --> 00:14:26.140
So filters.

00:14:26.370 --> 00:14:27.650
We talked about filters a little bit.

00:14:27.880 --> 00:14:29.640
They convert from one
MIME type to another.

00:14:29.640 --> 00:14:33.600
If you create a filter on our
system and install it correctly,

00:14:33.600 --> 00:14:35.920
some magical things start to happen.

00:14:35.920 --> 00:14:39.800
All of a sudden, that file type,
that MIME type, can be dragged on to,

00:14:39.800 --> 00:14:41.660
we call them printer proxies.

00:14:41.660 --> 00:14:43.040
They're desktop printers,
but they don't always

00:14:43.040 --> 00:14:43.740
live on the desktop.

00:14:43.740 --> 00:14:45.680
So anyway,
printer proxy is the funny name for them.

00:14:45.820 --> 00:14:48.030
But you can drag on to the
little icon of your printer,

00:14:48.080 --> 00:14:50.850
and we will directly submit that
into the print system without

00:14:50.860 --> 00:14:52.710
having to launch the application.

00:14:52.710 --> 00:14:55.380
So that's drag-and-drop printing,
direct support if you do that.

00:14:56.400 --> 00:14:56.860
So filters.

00:14:56.860 --> 00:15:00.820
We also have a direct printing API that
allows applications to directly submit

00:15:00.970 --> 00:15:04.360
files into the print system without
going through a rendering stage,

00:15:04.360 --> 00:15:05.320
say, in Quartz.

00:15:05.390 --> 00:15:07.920
So if you do a filter,
the direct printing API will all

00:15:07.920 --> 00:15:09.710
of a sudden support that file type.

00:15:11.390 --> 00:15:13.360
So what does it take to write a filter?

00:15:13.360 --> 00:15:14.140
It's incredibly easy.

00:15:14.140 --> 00:15:15.960
It's just a Unix command line tool.

00:15:16.290 --> 00:15:17.580
It takes six or seven arguments.

00:15:17.640 --> 00:15:20.740
Again, if you're the head of that chain,
you're going to be taking in a file,

00:15:20.740 --> 00:15:21.950
so you get seven arguments.

00:15:21.960 --> 00:15:23.500
The last argument is the
file you should read.

00:15:23.610 --> 00:15:25.380
If you're somewhere in
the middle of the chain,

00:15:25.380 --> 00:15:27.110
you get six,
and you read from standard in,

00:15:27.110 --> 00:15:27.850
standard out.

00:15:28.050 --> 00:15:31.240
You write, again, all your debugging
information is standard error,

00:15:31.340 --> 00:15:34.270
so you can go back in that log and
figure out what's going on when

00:15:34.490 --> 00:15:36.000
perhaps things don't go right.

00:15:37.230 --> 00:15:40.340
Richard Blaanchard So now you've
written this command line filter,

00:15:40.340 --> 00:15:41.670
and again, it doesn't have to be in C.

00:15:41.800 --> 00:15:43.340
You can write them in
lots of different ways.

00:15:43.340 --> 00:15:44.970
How do you get it in the system?

00:15:44.970 --> 00:15:48.790
The best way is to go into Etcetera CUPS,
and you add two files.

00:15:48.790 --> 00:15:51.370
If you go look in there,
you'll see we have some Apple.type

00:15:51.370 --> 00:15:52.960
and Apple.conversions file.

00:15:52.960 --> 00:15:55.260
You can add your own with your
own company name on there.

00:15:55.260 --> 00:15:57.950
Those two files do two different things.

00:15:58.020 --> 00:16:01.930
The types file is how CUPS can
identify the content of a file

00:16:02.090 --> 00:16:06.380
if it has to do auto-typing,
whereas the conversions file says, okay,

00:16:06.380 --> 00:16:06.380
now that you've got
the content of a file,

00:16:06.380 --> 00:16:06.400
you can do auto-typing.

00:16:06.400 --> 00:17:36.010
Richard Blaanchard Richard Blaanchard
Richard Blaanchard Richard Blaanchard

00:17:37.010 --> 00:17:39.290
There's a particular cost-- zero is
usually going to be for your driver

00:17:39.300 --> 00:17:41.840
because it's necessary to print.

00:17:41.840 --> 00:17:44.140
And here's where my tool lives.

00:17:44.140 --> 00:17:45.140
So you add that line.

00:17:45.140 --> 00:17:47.150
If that line doesn't exist,
we assume it's a PostScript printer

00:17:47.150 --> 00:17:49.450
because there are all these
PostScript PPDs and we run

00:17:49.450 --> 00:17:50.990
the PostScript driver for it.

00:17:51.160 --> 00:17:53.580
But if you have a PPD,
which we try to wave our hands

00:17:53.580 --> 00:17:56.450
for the fact that whatever
that first P stands for,

00:17:56.450 --> 00:17:59.330
PostScript maybe,
if you have a PPD for something

00:17:59.330 --> 00:18:01.800
that's not PostScript,
you add a line.

00:18:01.880 --> 00:18:03.650
That's Star Cup's filter.

00:18:04.620 --> 00:18:06.210
Alright,
so when you're writing one of these,

00:18:06.290 --> 00:18:09.130
you probably have some different
image formats that are handy for

00:18:09.220 --> 00:18:11.180
your printer that are going to be
convenient to get to your printer.

00:18:11.180 --> 00:18:14.950
It turns out this Venn Cups Raster format
supports lots of different bit depths

00:18:14.950 --> 00:18:16.870
and lots of different byte formats.

00:18:16.940 --> 00:18:18.620
So you'll probably find
what you want in there,

00:18:18.620 --> 00:18:21.140
and hopefully you'll find that we're
actually generating it correctly

00:18:21.250 --> 00:18:22.550
from our filters in front of you.

00:18:22.580 --> 00:18:25.360
For Tiger,
we added something that was interesting.

00:18:25.360 --> 00:18:28.060
We're always trying to get
better and better output,

00:18:28.060 --> 00:18:31.640
so we have 16-bit per color
component raster support in Tiger.

00:18:31.640 --> 00:18:35.050
so we can generate...

00:18:35.490 --> 00:18:37.960
48-bit RGB, 64-bit CMYK if you want.

00:18:37.960 --> 00:18:41.400
And we actually use some of Quartz
functionality if you went on the

00:18:41.470 --> 00:18:45.000
Quartz sessions where they can
generate floating point data,

00:18:45.030 --> 00:18:45.840
floating point raster data.

00:18:45.840 --> 00:18:48.290
So we generate floating point
raster data and then repackage

00:18:48.430 --> 00:18:49.940
it up as 16-bit per component.

00:18:49.940 --> 00:18:57.340
So it's pretty interesting if you
really have a high-end device,

00:18:57.340 --> 00:18:57.790
try that format out and see if you
get any better output for yourself.

00:18:58.070 --> 00:18:58.840
Those are the drivers.

00:18:58.840 --> 00:19:01.430
Now you go to the back end again,
the communications piece.

00:19:02.040 --> 00:19:02.960
Probably no coincidence.

00:19:02.960 --> 00:19:06.590
It takes very similar arguments
to the back end-- I'm sorry,

00:19:06.590 --> 00:19:10.000
to the drivers and the filters.

00:19:10.050 --> 00:19:12.070
It is driven by the device URI.

00:19:12.080 --> 00:19:15.100
So every time you build a print queue,
there's a device URI.

00:19:15.160 --> 00:19:20.000
The scheme on that device URI will
specify what back end should be run.

00:19:20.110 --> 00:19:22.630
So here's a graphical
explanation of that.

00:19:23.080 --> 00:19:25.480
Inside of the print queue,
every print queue has

00:19:25.600 --> 00:19:26.960
a PPD and a device URI.

00:19:26.960 --> 00:19:30.130
The PPD has that star
CUPS filter line we looked at,

00:19:30.240 --> 00:19:32.000
and that points to the driver.

00:19:32.000 --> 00:19:34.350
The device URI,
if you look at the beginning of that,

00:19:34.350 --> 00:19:35.730
the scheme, names the back end.

00:19:36.090 --> 00:19:37.980
And so now when you're
building up these processes,

00:19:38.060 --> 00:19:39.000
you have the back end,
you know what that is,

00:19:39.000 --> 00:19:41.440
you know what the driver is,
you know what the MIME type is

00:19:41.440 --> 00:19:44.960
on the print file because you've
auto-typed it from the types files,

00:19:44.960 --> 00:19:48.580
and you then put together-- CUPS puts
together a set of filters to get you

00:19:48.680 --> 00:19:50.000
from that print file to the driver.

00:19:50.000 --> 00:19:52.650
driver and then to the back end.

00:19:52.900 --> 00:19:55.460
So again, there are lots of opportunities
here in this back end,

00:19:55.460 --> 00:19:57.930
in this printer driver
world for print vendors,

00:19:57.930 --> 00:20:01.300
writing drivers, but really for anybody
for filters and back ends.

00:20:01.450 --> 00:20:06.810
And it's probably worth,
if you're an application vendor,

00:20:06.820 --> 00:20:12.550
try writing a filter just to get
a little appreciation of what the

00:20:12.550 --> 00:20:13.080
printer driver guys have to live
with over in that different world.

00:20:13.080 --> 00:20:13.080
So you should probably
take a look at that.

00:20:13.340 --> 00:20:16.380
So the printer driver guys live
over in that different world.

00:20:16.440 --> 00:20:20.400
One of the parts of that different world
that cups context is they have no UI.

00:20:20.750 --> 00:20:22.070
They can't present UI over there.

00:20:22.320 --> 00:20:25.310
There's maybe not even a user logged in.

00:20:25.520 --> 00:20:28.450
There's definitely a need, however,
for a printer driver to

00:20:28.630 --> 00:20:30.050
put up a user interface.

00:20:30.100 --> 00:20:32.000
They really want to be in a print dialog.

00:20:32.050 --> 00:20:36.080
And that's a problem because the print
dialog is definitely happening at a

00:20:36.080 --> 00:20:37.910
completely different time than printing.

00:20:37.960 --> 00:20:40.240
It may be off by only a couple seconds.

00:20:40.310 --> 00:20:42.750
But it could be off by more because
you can schedule jobs so the user,

00:20:42.760 --> 00:20:45.700
when they printed one, said, hey,
print that tomorrow.

00:20:45.720 --> 00:20:47.620
And by the time it ends
up going to the driver,

00:20:47.790 --> 00:20:51.190
it's a completely different day from when
the UI and the actual printer driver ran.

00:20:51.240 --> 00:20:52.940
So they're separated in time.

00:20:53.000 --> 00:20:55.880
They're separated in users,
as we talked about.

00:20:55.900 --> 00:20:58.180
When that UI runs,
you're logged in as the user.

00:20:58.220 --> 00:21:01.240
There's actually a person there,
and you have that permission for the UI.

00:21:01.260 --> 00:21:02.940
But by the time the
printer driver gets it,

00:21:03.020 --> 00:21:04.000
it's a completely different user.

00:21:04.000 --> 00:21:04.740
It's this LP user.

00:21:04.830 --> 00:21:06.320
So they can't access files.

00:21:06.580 --> 00:21:10.720
We get some of our first time
printer driver writers trying to,

00:21:10.720 --> 00:21:12.900
in their UI,
write preferences that they then

00:21:12.900 --> 00:21:15.000
read back from their printer driver.

00:21:15.090 --> 00:21:18.020
And you can't do it because the
file permissions prevent that.

00:21:18.040 --> 00:21:20.180
And then to really make
things complicated,

00:21:20.180 --> 00:21:22.680
the UI and the driver might be
on completely different machines.

00:21:22.750 --> 00:21:25.870
If you're printing to a shared printer,
the UI is taking place

00:21:25.870 --> 00:21:26.750
over here on machine A.

00:21:26.890 --> 00:21:28.850
Machine B is actually where
the driver's going to run.

00:21:28.900 --> 00:21:31.240
So forget the permissions problem.

00:21:31.400 --> 00:21:32.680
You're not even on the same drive.

00:21:32.680 --> 00:21:36.160
You're not going to get any information
across there unless you do it correctly.

00:21:36.230 --> 00:21:37.490
How do these people do this correctly?

00:21:37.500 --> 00:21:39.800
How do you get a printer
driver to get UI up?

00:21:39.830 --> 00:21:41.200
We have these things
called print drivers.

00:21:41.300 --> 00:21:43.560
print dialog extensions.

00:21:43.940 --> 00:21:47.000
If you have a PPD-- and you must
have a PPD in order to write

00:21:47.000 --> 00:21:49.050
a driver-- you can do nothing.

00:21:49.210 --> 00:21:51.510
And we will go into the
PPD and look for the open UI,

00:21:51.510 --> 00:21:53.510
close UI keywords,
and we will build a user

00:21:53.510 --> 00:21:55.080
interface for your driver.

00:21:55.110 --> 00:21:56.580
We'll just do that straight up.

00:21:56.670 --> 00:21:59.000
And it comes under the
printer features panel.

00:21:59.160 --> 00:22:01.890
It's about what you'd expect, I hope,
from a dynamic UI.

00:22:01.890 --> 00:22:04.870
It's not going to knock anybody
over with its beautifulness,

00:22:04.870 --> 00:22:06.020
but it is functional.

00:22:06.020 --> 00:22:08.220
So we'll do that,
and that's no work for you.

00:22:08.220 --> 00:22:10.290
And again,
it solves all those problems we

00:22:10.290 --> 00:22:11.310
just talked about-- different
users and different times.

00:22:11.370 --> 00:22:13.800
But people really want to write UI.

00:22:13.800 --> 00:22:14.800
They want to write their own UI.

00:22:14.800 --> 00:22:16.260
I mean, that's the fun part,
especially if you're a

00:22:16.380 --> 00:22:17.090
printer driver writer,
right?

00:22:17.180 --> 00:22:18.860
That's the only chance you
get to interact with the user.

00:22:18.890 --> 00:22:20.640
So you can take advantage of it.

00:22:20.780 --> 00:22:23.280
So if you write one of these
print dialog extensions,

00:22:23.340 --> 00:22:25.700
there's a couple things you
really need to keep in mind.

00:22:25.760 --> 00:22:28.260
One, hey, all of a sudden you are now
running with the user's ID,

00:22:28.260 --> 00:22:31.120
so permissions are different from
what your driver's going to be.

00:22:31.120 --> 00:22:32.560
We talked about that.

00:22:32.600 --> 00:22:34.020
You can crash the app.

00:22:34.060 --> 00:22:37.470
If you crash your printer driver,
CUPS handles that and the

00:22:37.470 --> 00:22:38.680
user will get an error.

00:22:38.740 --> 00:22:40.340
But nothing bad really happens.

00:22:40.400 --> 00:22:43.400
If your driver extension,
your print dialog extension crashes,

00:22:43.460 --> 00:22:45.220
the user's going to see that
app crash from under them and

00:22:45.220 --> 00:22:46.720
they're not going to be happy.

00:22:46.720 --> 00:22:48.580
Generally, they're not happy with Apple.

00:22:48.580 --> 00:22:50.160
And it's only when we go
look at the logs and go,

00:22:50.160 --> 00:22:52.170
well, wait a minute,
this little print driver

00:22:52.170 --> 00:22:53.220
extension was crashing.

00:22:53.220 --> 00:22:53.690
It wasn't us.

00:22:53.930 --> 00:22:55.150
But that's going to happen.

00:22:55.260 --> 00:22:57.860
And then the other one,
going again back to Monday,

00:22:57.860 --> 00:22:59.840
is if you're running as
a print dialog extension,

00:22:59.840 --> 00:23:02.460
you have to be the same
architecture as the application.

00:23:02.600 --> 00:23:05.820
There's no translation
happening within an application.

00:23:05.820 --> 00:23:08.370
So if that application's
running PowerPC code,

00:23:08.490 --> 00:23:09.380
you need PowerPC print dialog extension.

00:23:09.380 --> 00:23:16.780
If they're running x86 code,
you need x86 print dialog extension.

00:23:16.780 --> 00:23:19.900
So whereas for the print drivers,
we can make lots of magic happen and

00:23:19.900 --> 00:23:23.740
there's all this intermixing of code,
we can't do that with inside

00:23:23.740 --> 00:23:25.240
of an application and we don't.

00:23:25.300 --> 00:23:28.750
So you need to get busy and compile
your print dialog extensions

00:23:28.850 --> 00:23:31.140
with these universal binaries.

00:23:31.140 --> 00:23:31.580
I've said that.

00:23:31.580 --> 00:23:32.880
That was a requirement from Steve Jobs.

00:23:32.880 --> 00:23:34.420
I had to say that every session.

00:23:34.420 --> 00:23:35.890
Universal.

00:23:35.960 --> 00:23:37.020
So how do you point to this?

00:23:37.120 --> 00:23:39.220
You go into your PPD and you
add this Apple Dialog extension.

00:23:39.220 --> 00:23:41.660
Say, hey, here's where my bundle is.

00:23:41.680 --> 00:23:45.960
This is the bundle for the
printer supported by this PPD.

00:23:45.970 --> 00:23:47.810
This is where it is.

00:23:48.680 --> 00:23:50.570
And for Tiger,
we added the ability to write these

00:23:50.720 --> 00:23:52.080
print dialog extensions in Cocoa.

00:23:52.090 --> 00:23:54.840
So it's a lot easier to do
now than it has been before.

00:23:54.840 --> 00:23:57.570
We took care of a lot of the
problems that were in the old API,

00:23:57.570 --> 00:23:59.500
and it's pretty clean right now.

00:23:59.500 --> 00:24:02.840
The idea is your main class
inside of that bundle implements

00:24:02.840 --> 00:24:04.390
this PDE panels is for type.

00:24:04.650 --> 00:24:06.750
And we will come along and
instantiate your bundle for

00:24:06.750 --> 00:24:08.200
the right printer and say,
hey,

00:24:08.230 --> 00:24:10.290
we're bringing up the page setup dialog,
or we're bringing up the print

00:24:10.380 --> 00:24:11.620
dialog-- that's the type.

00:24:11.710 --> 00:24:13.610
Please give us all the
panels you want us to show.

00:24:13.810 --> 00:24:15.760
And so you return this array of panels.

00:24:15.830 --> 00:24:17.080
And if you've seen some
of the printer drivers,

00:24:17.140 --> 00:24:18.300
it can be a pretty big array.

00:24:18.500 --> 00:24:20.980
Sometimes they add a lot of stuff.

00:24:21.070 --> 00:24:24.140
That instance of PDE panels,
they implement this informal protocol,

00:24:24.240 --> 00:24:26.110
and we will make calls into it.

00:24:26.210 --> 00:24:27.940
And in particular,
we'll ask for the view.

00:24:28.010 --> 00:24:30.590
We'll get the view from this
Cocoa print dialog extension,

00:24:30.670 --> 00:24:33.390
and we will embed it
inside of the print dialog.

00:24:33.630 --> 00:24:35.730
And it will look like
it's supposed to be there.

00:24:35.920 --> 00:24:37.130
And it is.

00:24:37.310 --> 00:24:38.980
We'll also give you
lots of notifications.

00:24:39.070 --> 00:24:41.440
Hey, we're going to show you,
or we're going to hide you.

00:24:41.440 --> 00:24:42.600
Is that OK?

00:24:42.680 --> 00:24:45.620
And then the two most important pieces,
we'll tell you when we need you to take

00:24:45.620 --> 00:24:47.920
the values from your UI and store them.

00:24:48.310 --> 00:24:53.230
And when we want you to take the stored
values and present them up in your UI.

00:24:54.780 --> 00:24:57.110
You're not going to get very
far unless you have some context

00:24:57.360 --> 00:24:57.890
when you're writing this.

00:24:58.010 --> 00:25:00.710
So we have a callback into the
print system that you can make from

00:25:01.000 --> 00:25:03.000
your Cocoa print dialog extensions.

00:25:03.060 --> 00:25:05.980
And you can ask the print system
for the print session that tells

00:25:05.980 --> 00:25:07.620
you how the user's job's going.

00:25:07.660 --> 00:25:08.760
You can get the print settings.

00:25:08.940 --> 00:25:10.040
It's how it's going to print.

00:25:10.170 --> 00:25:13.430
Get the page format, how it's formatted.

00:25:13.500 --> 00:25:17.690
The current printer that's
targeted in the PPD file.

00:25:17.690 --> 00:25:19.720
And there's some other callbacks,
but that set will let you

00:25:19.720 --> 00:25:19.720
present your UI properly.

00:25:20.980 --> 00:25:22.870
So what I didn't mention
that you can get,

00:25:22.870 --> 00:25:24.580
and you can, is actually a job ticket.

00:25:24.580 --> 00:25:28.100
And this is kind of a
quick blast to the past.

00:25:28.100 --> 00:25:30.120
In the old Tioga architecture
for printer drivers,

00:25:30.220 --> 00:25:33.630
we had the split of the
way settings were grabbed.

00:25:33.700 --> 00:25:35.590
If you were an application,
you used PM print settings.

00:25:35.640 --> 00:25:36.220
That was there.

00:25:36.350 --> 00:25:38.740
If you were a driver,
you used job tickets.

00:25:38.780 --> 00:25:40.810
And the problem was we ended
up with these two sets of APIs,

00:25:40.810 --> 00:25:42.750
and they didn't really
cover each other very well.

00:25:42.890 --> 00:25:46.180
So we've been making steady progress
towards phasing out access really to

00:25:46.180 --> 00:25:49.600
the job tickets and asking everybody
to go through the print settings.

00:25:49.940 --> 00:25:52.910
So if you're writing one of these
new Cocoa print dialog extensions,

00:25:52.910 --> 00:25:55.130
you can get either,
and they represent the same data.

00:25:55.130 --> 00:25:58.050
We're going to ask that you get the print
settings because that's what we want.

00:25:58.120 --> 00:26:02.280
We want applications and printer
drivers to share the same API,

00:26:02.280 --> 00:26:03.860
but you can get both.

00:26:03.980 --> 00:26:05.570
So if you're used to one or
you're porting over code,

00:26:05.570 --> 00:26:06.640
it shouldn't be a problem.

00:26:06.640 --> 00:26:10.280
We're going to be making this
sample available through DTS.

00:26:10.280 --> 00:26:13.980
This is a very simple print
dialog extension written in Cocoa,

00:26:14.060 --> 00:26:16.590
and all it does is when
it's told to show its UI,

00:26:16.720 --> 00:26:20.860
it gets all the settings from
all the PDEs and shows them.

00:26:20.900 --> 00:26:22.020
Kind of a helpful debugging thing.

00:26:22.020 --> 00:26:25.170
So if you're writing your PDE and
the user's hitting a button and

00:26:25.170 --> 00:26:27.420
it's not being set properly,
you can look here to see if

00:26:27.500 --> 00:26:29.650
you're actually getting it
into the print settings itself.

00:26:29.750 --> 00:26:32.060
So that'll be coming probably
in the next couple weeks.

00:26:39.240 --> 00:26:44.770
All right, so the PPD points to your
print dialog extensions,

00:26:44.850 --> 00:26:46.640
but it can point to lots of
other stuff if you're making one.

00:26:46.640 --> 00:26:48.540
You can add a pointer to an icon,
and that's how you get the

00:26:48.620 --> 00:26:51.780
icons on the desktop printers,
a printer utility, and new in Tiger,

00:26:51.790 --> 00:26:55.320
you can add a pointer to a low-ink tool,
so we can actually find out the

00:26:55.320 --> 00:26:57.100
ink levels for your printer.

00:26:57.100 --> 00:26:59.180
And so I want to talk
briefly about how that works.

00:27:01.490 --> 00:27:03.810
None of the printer drivers actually
have low-ink tools right now,

00:27:03.820 --> 00:27:07.780
so what we have in Tiger is an
SNMP query for network printers.

00:27:07.780 --> 00:27:10.200
So if you just have a network
printer that supports SNMP,

00:27:10.200 --> 00:27:12.200
we will, when we need to,
query the printer,

00:27:12.200 --> 00:27:14.630
figure out its ink levels,
and we have a new panel that'll

00:27:14.650 --> 00:27:17.560
show the ink supplies so you
can go see what your levels are.

00:27:17.580 --> 00:27:19.230
You can try that out.

00:27:19.410 --> 00:27:20.810
The ink tools are just
command line tools,

00:27:20.910 --> 00:27:21.860
much like the filters.

00:27:21.860 --> 00:27:24.890
If you want to see how ours works,
here's the path to it.

00:27:24.960 --> 00:27:28.040
You give it the printer ID,
and it'll go make the query,

00:27:28.130 --> 00:27:30.860
dump a bunch of
XML representation back to you,

00:27:30.860 --> 00:27:31.280
and you can look at it.

00:27:31.320 --> 00:27:34.120
And you can use that to judge how,
if you're writing your own,

00:27:34.130 --> 00:27:35.960
maybe the data should be formatted.

00:27:35.960 --> 00:27:38.690
If you do write your own,
and it's not working properly,

00:27:38.700 --> 00:27:41.680
we have this default that you can
set that will cause us to write

00:27:41.740 --> 00:27:45.050
lots of information out to console
that'll explain what we thought was

00:27:45.370 --> 00:27:47.160
wrong with the XML you generated.

00:27:48.940 --> 00:27:52.690
So we use it to check for load
supplies and to show supply levels.

00:27:52.700 --> 00:27:57.070
We have an SNMP ink tool,
and you can override it.

00:27:57.220 --> 00:28:00.000
If ours isn't working the way you want,
even for your network SNMP printer,

00:28:00.000 --> 00:28:00.860
you can override it.

00:28:01.000 --> 00:28:03.280
If you have a USB device,
you can put yours also in.

00:28:04.860 --> 00:28:05.840
It generates this XML.

00:28:05.840 --> 00:28:09.600
It's a top-level dictionary
with a supplies table.

00:28:09.600 --> 00:28:12.680
Inside that supplies table is
an array of supply dictionaries.

00:28:12.680 --> 00:28:16.580
Each one describes a
supply on the printer.

00:28:16.580 --> 00:28:20.070
There are required keys that need
to be in that to describe each one.

00:28:20.200 --> 00:28:21.050
It's the class.

00:28:21.110 --> 00:28:24.000
Is this a consumable or
something that's being filled?

00:28:24.000 --> 00:28:27.200
So is it a waste bucket or is it
maybe a piece of toner or ink?

00:28:27.280 --> 00:28:29.150
A description that we
can show to the user,

00:28:29.330 --> 00:28:31.430
the max capacity,
and the supply level capacity so

00:28:31.460 --> 00:28:33.120
we can draw our little bar charts.

00:28:33.840 --> 00:28:35.220
There are optionals.

00:28:35.330 --> 00:28:36.380
You can tell us the type.

00:28:36.500 --> 00:28:36.940
Is it ink?

00:28:36.940 --> 00:28:37.540
Is it toner?

00:28:37.540 --> 00:28:38.100
Is it fuser?

00:28:38.360 --> 00:28:41.110
You can tell us the unit that
your measurements are in.

00:28:41.120 --> 00:28:42.910
They're in milliliters.

00:28:42.910 --> 00:28:44.900
You can give us a color
to draw the charts in,

00:28:44.900 --> 00:28:46.490
and you can give us a part number.

00:28:48.590 --> 00:28:50.790
All right,
so we use SNMP again for our ink tool,

00:28:50.820 --> 00:28:53.320
but we added some more
SNMP support inside of Tiger.

00:28:53.320 --> 00:28:56.190
In particular, we wanted,
when the user set up a network

00:28:56.200 --> 00:28:59.190
printer that wasn't using AppleTalk,
we wanted to try and get closer

00:28:59.290 --> 00:29:01.260
to the AppleTalk experience
of doing the auto setup.

00:29:01.260 --> 00:29:04.820
So we have an SNMP set of
SNMP queries that are in there.

00:29:05.000 --> 00:29:08.270
It'll go get the products,
some other standard stuff,

00:29:08.270 --> 00:29:11.680
but the PPDs can be augmented
with information that link

00:29:11.870 --> 00:29:15.560
back the SNMP queries back to
the typical PPD information.

00:29:16.760 --> 00:29:19.750
So in particular,
these question OID strings say, hey,

00:29:19.750 --> 00:29:23.140
if you want to know what the level
of or what the state of tray three,

00:29:23.140 --> 00:29:26.360
that installable option is,
here's the SNMP object number.

00:29:26.360 --> 00:29:27.510
You should go query.

00:29:27.650 --> 00:29:28.880
They're always very long.

00:29:28.960 --> 00:29:32.490
And if it comes back and says installed,
well, then you should treat

00:29:32.490 --> 00:29:34.660
it as if that is true,
that is installed.

00:29:34.660 --> 00:29:37.020
And so you can add these
OID queries into a PPD,

00:29:37.160 --> 00:29:41.150
and all of a sudden we get much more like
AppleTalk auto setup of network printer,

00:29:41.150 --> 00:29:44.370
even if they're LPD or IPP,
which traditionally don't work.

00:29:52.120 --> 00:29:54.060
All right,
so that's the printer driver world.

00:29:54.120 --> 00:29:56.120
We're now going to move over
onto the application world

00:29:56.260 --> 00:29:57.490
and see how we can do there.

00:30:02.740 --> 00:30:05.000
So there's the Cocoa printing API.

00:30:05.010 --> 00:30:08.900
Not going to say a lot about
the Cocoa printing API.

00:30:08.900 --> 00:30:10.790
I hate to say it, but it just works.

00:30:10.850 --> 00:30:13.500
Generally, all you need to do is
make an NSPrint operation.

00:30:13.520 --> 00:30:16.220
You give it the view that's
going to be drawing the document,

00:30:16.220 --> 00:30:17.550
and then you invoke it.

00:30:17.560 --> 00:30:20.420
And you invoke it on a window so the
sheet drops on the window and say,

00:30:20.420 --> 00:30:22.210
hey, tell me when it's done.

00:30:22.320 --> 00:30:25.420
And that's Cocoa printing
at the top level.

00:30:25.420 --> 00:30:28.980
We get a lot of requests for people
who then want to add an accessory view.

00:30:28.980 --> 00:30:32.220
This is the Cocoa equivalent
to our print dialog extensions.

00:30:32.260 --> 00:30:32.980
And they want to add that.

00:30:33.050 --> 00:30:33.980
And again, that's very simple.

00:30:33.980 --> 00:30:35.000
You get this print operation.

00:30:35.000 --> 00:30:36.640
You say set accessory view.

00:30:36.660 --> 00:30:38.140
You give it a view,
and that'll then end up in the

00:30:38.250 --> 00:30:41.920
print dialog again with all of the
different pieces from the print

00:30:41.920 --> 00:30:44.180
system and the printer driver,
all these different panels

00:30:44.190 --> 00:30:45.900
all looped together.

00:30:45.900 --> 00:30:47.740
There are a couple limitations
on the accessory panels,

00:30:47.750 --> 00:30:49.560
and people have complained
about this over time.

00:30:49.560 --> 00:30:52.890
And I expect the Cocoa team
will address them,

00:30:52.890 --> 00:30:55.280
although I'm in no
hurry for them to do so.

00:30:55.280 --> 00:30:57.760
There's only one print panel
or one accessory view that

00:30:57.830 --> 00:30:59.460
can be really added at a time.

00:30:59.490 --> 00:31:01.740
And there's no access to
the underlying Carbon data.

00:31:01.740 --> 00:31:03.850
That latter one is something
I do want them to fix.

00:31:03.960 --> 00:31:07.080
The first one we're going to
talk about here in a little bit.

00:31:07.510 --> 00:31:10.490
So I'm going to make the
statement that ideally,

00:31:10.490 --> 00:31:14.640
your Carbon application will never add
an accessory view to the print dialog.

00:31:14.690 --> 00:31:17.240
My stance is always that
you have an application,

00:31:17.240 --> 00:31:19.860
you have menus, you have dialogs,
you've got lots of

00:31:19.860 --> 00:31:20.960
user interface widgets.

00:31:21.040 --> 00:31:26.150
Why would you want to hide something
up inside this modal print dialog?

00:31:27.080 --> 00:31:29.390
And that brings me to sort
of my Don Quixote moment.

00:31:29.390 --> 00:31:33.280
This is, I've been failing inside of
Apple at this for a while,

00:31:33.280 --> 00:31:34.840
and so now I'm going to
fail in front of all of you.

00:31:34.840 --> 00:31:38.940
This is,
there was this thing 10 years ago, 15,

00:31:38.940 --> 00:31:40.970
20 years ago, called WYSIWYG.

00:31:41.080 --> 00:31:43.670
And the idea was, hey,
the user would actually see on screen,

00:31:43.670 --> 00:31:46.540
in their view, what it was going to look
like when they printed.

00:31:46.540 --> 00:31:48.830
And the first challenge is,
if you have PowerBooks,

00:31:48.830 --> 00:31:51.190
go find an application that
actually does this today.

00:31:51.270 --> 00:31:51.990
There are some.

00:31:51.990 --> 00:31:52.820
That's good.

00:31:52.820 --> 00:31:56.180
But people, it's not even lazy.

00:31:56.180 --> 00:31:59.330
There's just sort of this new
model where they're showing the

00:31:59.330 --> 00:32:03.310
data in more interesting ways,
but then they never give the user a

00:32:03.320 --> 00:32:06.960
way inside of that view to see what
the printed data is going to look like.

00:32:07.070 --> 00:32:09.510
And of course, this hurts me deeply as
somebody who prints a lot,

00:32:09.510 --> 00:32:11.530
even if it's just test pages.

00:32:11.700 --> 00:32:14.710
So the idea is,
if you have things you're trying

00:32:14.710 --> 00:32:17.610
to put in this accessory view,
think about not doing it there.

00:32:17.700 --> 00:32:23.060
Let the user reformat the page and
edit the data live in that print view.

00:32:23.200 --> 00:32:25.360
Again, this is a printer guy's
view of the world,

00:32:25.400 --> 00:32:28.380
but if it's a good format to print,
it's probably a good format to

00:32:28.380 --> 00:32:31.730
show on screen to let the user see
the data that's going to come out.

00:32:31.940 --> 00:32:32.350
FileMaker.

00:32:32.350 --> 00:32:36.640
Well, they were around before this
great shift away from WYSIWYG,

00:32:36.650 --> 00:32:38.000
and I really like the way they do this.

00:32:38.090 --> 00:32:39.820
I always have, and I use FileMaker a lot.

00:32:40.060 --> 00:32:42.580
They have a little widget,
which I've tried to circle here,

00:32:42.630 --> 00:32:44.970
and you click on it,
and it shows you what it's going

00:32:45.040 --> 00:32:46.480
to look like when it prints.

00:32:46.500 --> 00:32:48.690
And while they don't let
you edit that data live,

00:32:48.690 --> 00:32:50.790
you hit the other widget
to get a different view,

00:32:50.790 --> 00:32:52.590
and now you can edit it
or change the layout,

00:32:52.590 --> 00:32:54.180
and you never have to print.

00:32:54.190 --> 00:32:56.750
And so if you're just building
a FileMaker database to give

00:32:56.750 --> 00:32:59.870
to somebody who they may print,
you know what the output's going to look

00:32:59.990 --> 00:33:01.780
like as the creator of this template.

00:33:01.800 --> 00:33:02.830
Richard Blaanchard FileMaker.

00:33:02.840 --> 00:33:03.920
Well, they're going to print the template
without having to waste paper or,

00:33:03.920 --> 00:33:05.600
you know, just fool around with it.

00:33:05.600 --> 00:33:08.360
It gives you a very good sense as
a user of what you're creating,

00:33:08.400 --> 00:33:10.480
which is printed output in most cases.

00:33:10.480 --> 00:33:12.660
So happily,
there are some other good examples.

00:33:12.660 --> 00:33:14.280
The Pages folks were terrific at this.

00:33:14.370 --> 00:33:16.070
I don't know if there
are any of them here,

00:33:16.070 --> 00:33:17.800
but they were just a
great group to work on,

00:33:17.880 --> 00:33:19.700
and they really got
this right off the bat.

00:33:19.700 --> 00:33:21.810
So there was one windmill
that I was able to take.

00:33:21.880 --> 00:33:23.100
Richard Blaanchard FileMaker.

00:33:23.100 --> 00:33:23.540
TextEdit.

00:33:23.540 --> 00:33:26.020
If you put that in wrap-to-page mode,
which first you have to go find,

00:33:26.040 --> 00:33:28.260
but once you get it there,
they actually do a decent job.

00:33:28.530 --> 00:33:29.260
Richard Blaanchard FileMaker.

00:33:29.320 --> 00:33:31.330
This is one of my favorite
applications just because they took

00:33:31.500 --> 00:33:34.940
a function that a dress book has,
Soho labels and envelopes,

00:33:34.960 --> 00:33:36.460
and they made it WYSIWYG.

00:33:36.480 --> 00:33:37.430
You're printing envelopes.

00:33:37.550 --> 00:33:38.630
Well,
they're going to show you what those

00:33:38.630 --> 00:33:40.070
envelopes look like before you print it.

00:33:40.280 --> 00:33:40.640
Pretty novel.

00:33:40.640 --> 00:33:43.070
And, oh, by the way,
they let you actually edit the data on

00:33:43.070 --> 00:33:45.960
the envelope because you just noticed
at that point the zip code was wrong.

00:33:45.960 --> 00:33:48.150
So it's just a great feel,
and it's the way I think

00:33:48.150 --> 00:33:49.180
things should work.

00:33:49.470 --> 00:33:53.110
And then iPhoto, not when they print,
but in their book view when

00:33:53.110 --> 00:33:56.540
you're buying a book because
you can't print the book out,

00:33:56.540 --> 00:33:57.030
right?

00:33:57.110 --> 00:33:59.550
You're buying it from some third party.

00:33:59.640 --> 00:34:01.760
So they let you actually see what
it looks like and move the pictures

00:34:01.760 --> 00:34:01.760
around and show you where it lands up.

00:34:01.760 --> 00:34:03.990
So that's one of the things
that's really cool about this.

00:34:03.990 --> 00:34:06.690
You can actually see what's on the
page all inside of the user interface,

00:34:06.690 --> 00:34:07.990
and it's a great user interface.

00:34:08.000 --> 00:34:10.570
And I've actually hacked underneath
the iPhoto folks their book view

00:34:10.570 --> 00:34:13.410
into their standard print view so you
could actually do this the right way.

00:34:13.410 --> 00:34:15.230
And I'm still trying to
talk them into using it.

00:34:15.230 --> 00:34:17.060
So bad examples, again,
this is where life gets

00:34:17.060 --> 00:34:17.890
a little depressing.

00:34:18.110 --> 00:34:19.720
There's tons of them,
and we could spend the next

00:34:19.920 --> 00:34:20.790
hour going through them.

00:34:20.790 --> 00:34:22.480
And they're becoming
more and more common.

00:34:22.480 --> 00:34:24.660
And part of that, I think,
is just because Carbon makes it

00:34:24.660 --> 00:34:26.740
so easy to write an application,
and printing is always

00:34:26.760 --> 00:34:27.770
the last thing you write.

00:34:27.840 --> 00:34:30.100
If you write an application,
people don't get to that step.

00:34:30.280 --> 00:34:31.740
They're just having to do it.

00:34:31.740 --> 00:34:49.850
And they're not happy with
the view that they have with

00:34:51.130 --> 00:35:01.720
their columns and the tables.

00:35:01.720 --> 00:35:01.720
So if you're doing an application
and you really care about this,

00:35:01.720 --> 00:35:01.720
and I would hope you do,
there are a couple things

00:35:01.720 --> 00:35:01.720
you should look out for.

00:35:01.720 --> 00:35:01.720
This is the big warning sign,
and I get so many requests

00:35:01.720 --> 00:35:01.720
from this to people at Apple.

00:35:01.720 --> 00:35:01.720
If you're trying to put a print
view inside of the print dialog,

00:35:01.720 --> 00:35:01.720
you might be going the wrong way.

00:35:01.720 --> 00:35:01.720
The user, I would claim, at that point,
once the modal print dialog is dropped,

00:35:01.720 --> 00:35:01.720
they see a print view and it's wrong.

00:35:01.720 --> 00:35:01.720
They now have to cancel, switch back,
edit the data the way they want it,

00:35:01.720 --> 00:35:03.460
print again, drop the sheet again, go,
is that right?

00:35:03.460 --> 00:35:04.770
It's just a crazy way to work.

00:35:04.860 --> 00:35:06.860
They should be seeing what they're
going to print in their view,

00:35:06.860 --> 00:35:09.380
hit the print dialog,
it should say print, you print,

00:35:09.380 --> 00:35:11.790
and you get what you expect
because you've already seen it.

00:35:12.010 --> 00:35:13.710
So if you're trying to
stuff a preview in there,

00:35:13.710 --> 00:35:14.630
stop.

00:35:14.640 --> 00:35:18.420
If you're doing it for cosmetic reasons,
iPhoto sort of falls in this category,

00:35:18.500 --> 00:35:19.520
that's different.

00:35:19.520 --> 00:35:23.650
But please stop and
weigh your options here.

00:35:24.410 --> 00:35:31.700
If you're trying to add formatting
options that can't be viewed inside of

00:35:31.700 --> 00:35:31.700
your application into the print dialog,
that's probably a problem.

00:35:31.700 --> 00:35:33.150
One of the favorite ones
seems to be print footers.

00:35:33.150 --> 00:35:36.360
You might ask,
what's going to be in the footers?

00:35:36.470 --> 00:35:38.560
Well, the only way to find out is
to go into the print dialog,

00:35:38.560 --> 00:35:40.760
go to the accessory view, say, yes,
print footers and print,

00:35:40.980 --> 00:35:43.630
and go look and see what that application
decided to put on the footers.

00:35:43.640 --> 00:35:45.940
It should be nice if you could
see that inside the view.

00:35:47.660 --> 00:35:51.510
So this is my request, and again,
I'm used to disappointment,

00:35:51.530 --> 00:35:53.540
so it's OK if you don't do it.

00:35:54.060 --> 00:35:57.800
Try not to put print formatting
options into the print dialog.

00:35:57.800 --> 00:35:59.690
If it's going to change the layout
of what you're going to print,

00:35:59.710 --> 00:36:02.210
show the user before you
get to the print dialog.

00:36:02.350 --> 00:36:05.380
The other variant-- and some people think
this sort of appeases me and it doesn't--

00:36:05.400 --> 00:36:09.180
is to put up an application print
dialog before the system print dialog.

00:36:09.240 --> 00:36:11.060
So you say print,
and then they drop a modal dialog

00:36:11.130 --> 00:36:12.880
that gives you all those options,
and then you say print.

00:36:12.880 --> 00:36:15.310
That's really no better,
but somehow people think

00:36:15.400 --> 00:36:17.440
this is an improvement.

00:36:17.470 --> 00:36:19.820
And then just use the power
of your user interface.

00:36:19.910 --> 00:36:22.200
Let them format there.

00:36:22.280 --> 00:36:23.200
So that's my little battle.

00:36:23.200 --> 00:36:25.160
We'll go away from that.

00:36:25.570 --> 00:36:28.940
Uh, below the Carbon-- the
Cocoa Printing API,

00:36:29.190 --> 00:36:31.820
which, again,
is very simple and has a great

00:36:31.820 --> 00:36:33.560
fit to Cocoa applications.

00:36:33.560 --> 00:36:36.020
You can really get your
application printing well with

00:36:36.060 --> 00:36:38.390
the Cocoa APIs very quickly.

00:36:38.540 --> 00:36:40.340
And if you just spend some
time designing that view,

00:36:40.340 --> 00:36:42.560
then you can actually
have a great application.

00:36:42.560 --> 00:36:44.700
Um, but some people can't use it.

00:36:44.840 --> 00:36:46.640
If you're a Carbon application,
you obviously can't use

00:36:46.640 --> 00:36:48.200
the Cocoa Printing APIs.

00:36:48.310 --> 00:36:50.810
And there are Cocoa applications
that need to access the full

00:36:50.810 --> 00:36:53.650
set of the printing APIs,
and so they need to drop down below the

00:36:53.650 --> 00:36:56.090
Cocoa level to the Pure Printing APIs.

00:36:56.250 --> 00:37:00.020
And what I wanted to do a little
bit was talk about how that works.

00:37:00.600 --> 00:39:07.700
[Transcript missing]

00:39:07.810 --> 00:39:10.820
If you have a PM page format,
you can get the underlined PM paper.

00:39:10.820 --> 00:39:13.790
You can also take the page format
and flatten it in the CFData and

00:39:13.790 --> 00:39:15.370
same with the print settings.

00:39:17.900 --> 00:39:20.040
So we're going to spend a little
time just looking at the three

00:39:20.040 --> 00:39:21.630
important pieces of using this API.

00:39:21.770 --> 00:39:23.780
So when you're printing,
you need to know where

00:39:23.780 --> 00:39:25.920
you're going to print it,
you're going to know how

00:39:25.920 --> 00:39:27.860
you're going to print it,
and you need to know

00:39:27.870 --> 00:39:28.770
how it fits on paper.

00:39:28.870 --> 00:39:31.650
So PM Printer, PM Print Settings,
and PM Page Format.

00:39:31.760 --> 00:39:33.730
So PM Printer.

00:39:36.790 --> 00:39:38.670
So again, first thing you want
to do if you want to,

00:39:38.700 --> 00:39:41.170
if you're one of these powerful
applications that's trying to

00:39:41.170 --> 00:39:43.830
do something beyond the standard
drop the print dialog and print,

00:39:43.830 --> 00:39:45.430
you want to get all the printers.

00:39:45.430 --> 00:39:47.870
And PM Server create printer
list will return this array

00:39:47.870 --> 00:39:49.050
of PM printer instances.

00:39:49.050 --> 00:39:51.150
Now, ideally,
you could actually get this from

00:39:51.150 --> 00:39:52.640
any print server on the network.

00:39:52.640 --> 00:39:55.130
Right now in Tiger,
you can only get it for the local one.

00:39:55.130 --> 00:39:57.590
So you use this constant
KPM server local as the server.

00:39:57.590 --> 00:40:00.600
And we'll give you all the
printers on your local machine.

00:40:01.650 --> 00:40:03.260
Richard Blazcarz Those printers
come back and they have a

00:40:03.270 --> 00:40:04.290
lot of different attributes.

00:40:04.470 --> 00:40:06.700
The one that you need to
understand or the two you need to

00:40:06.700 --> 00:40:10.560
understand first are the PM printer
ID and the PM printer name.

00:40:10.560 --> 00:40:12.630
And this is important if,
even if you're just

00:40:12.630 --> 00:40:15.030
using the command line,
but particularly if you're trying to

00:40:15.030 --> 00:40:18.090
present a user interface that models
any part of the Apple user interface.

00:40:18.110 --> 00:40:21.680
The ID is a unique name for
that queue on that machine.

00:40:21.680 --> 00:40:23.810
If you have the ID,
there won't be another queue

00:40:23.930 --> 00:40:25.340
on your Mac with that same ID.

00:40:25.340 --> 00:40:27.220
And once you get that,
you can get the ID and

00:40:27.400 --> 00:40:28.440
you can hand that to CUPS.

00:40:28.440 --> 00:40:30.740
You have to turn it into a
C string from the CFString,

00:40:30.740 --> 00:40:31.060
but you can do that.

00:40:31.060 --> 00:40:31.060
Richard Blazcarz So you can get the
ID and you can hand that to CUPS.

00:40:31.060 --> 00:40:31.060
You have to turn it into a
C string from the CFString,

00:40:31.060 --> 00:40:31.060
but you can do that.

00:40:31.320 --> 00:40:33.720
Richard Blazcarz You can then talk to
the CUPS APIs and get anything you want.

00:40:34.180 --> 00:40:38.990
The name,
and this is a Mac OS X subversion

00:40:39.050 --> 00:40:41.560
of some CUPS piece.

00:40:41.560 --> 00:40:42.710
In CUPS it's called the description.

00:40:42.810 --> 00:40:44.080
We take it and we use it as the name.

00:40:44.080 --> 00:40:46.490
It's what we show to the
user in the user interface.

00:40:46.540 --> 00:40:48.870
Richard Blazcarz And the
difference is the ID has a very

00:40:48.870 --> 00:40:50.570
restricted name or character space.

00:40:50.570 --> 00:40:52.970
So if you go look in it,
you'll see lots of underscores and

00:40:53.120 --> 00:40:54.950
lots of really not very pretty things.

00:40:54.950 --> 00:40:57.580
If you look at the name,
we support UTF-8 and

00:40:57.580 --> 00:41:00.930
the user can name it,
the queue, anything they want.

00:41:01.060 --> 00:41:03.680
Richard Blazcarz The ID is what
you use on the command line.

00:41:03.910 --> 00:41:06.760
So you can't go look,
rename your printer, my space printer,

00:41:06.890 --> 00:41:09.290
and go to the command line
and print to my printer.

00:41:09.290 --> 00:41:11.700
You have to actually go back
and get probably my_printer.

00:41:11.720 --> 00:41:14.630
Richard Blazcarz You can see
this in printer setup utility,

00:41:14.820 --> 00:41:15.660
this distinction.

00:41:15.980 --> 00:41:17.780
There's a text edit field for the name.

00:41:17.920 --> 00:41:19.960
So again,
user can change it anytime they want.

00:41:19.960 --> 00:41:22.160
But what we call the queue
name is literally what we

00:41:22.160 --> 00:41:25.060
call the ID and the API,
and that's going to be constant.

00:41:25.060 --> 00:41:25.810
You can't change that.

00:41:25.820 --> 00:41:29.210
And here it's the underscore
with the IP address.

00:41:30.350 --> 00:41:33.220
So the PM printer has
lots of other attributes.

00:41:33.480 --> 00:41:35.280
One of them,
probably the most interesting,

00:41:35.330 --> 00:41:36.720
is whether it's remote.

00:41:36.790 --> 00:41:38.680
Is this print queue hosted
on your local machine,

00:41:38.710 --> 00:41:42.210
or is it a queue that was found
through this discovery mechanism

00:41:42.210 --> 00:41:44.760
we talked about at the beginning,
probably UDP broadcast,

00:41:44.770 --> 00:41:46.900
and has come in and has been
created for you underneath you?

00:41:46.900 --> 00:41:48.320
So PM printer's remote will tell you,
hey,

00:41:48.320 --> 00:41:51.140
it's a local queue added by the user,
or it's a remote queue that's

00:41:51.140 --> 00:41:53.500
just come in over the network.

00:41:53.560 --> 00:41:55.060
You can get the PPD.

00:41:55.120 --> 00:41:57.300
You can get the device URI.

00:41:57.410 --> 00:42:00.350
You can find out some of the
capabilities of the printer.

00:42:00.380 --> 00:42:02.680
In particular, you can find out if it's
the user's default printer.

00:42:02.740 --> 00:42:05.100
You can find out if it's
their favorite printer.

00:42:05.350 --> 00:42:06.920
Favorites is interesting.

00:42:06.940 --> 00:42:09.640
If you're on a large
network with lots of Macs,

00:42:09.670 --> 00:42:13.890
and you actually go in and do LPstat-T,
you'll see all the queues

00:42:14.120 --> 00:42:16.040
that your system knows about.

00:42:16.070 --> 00:42:17.290
And it'll be very large.

00:42:17.330 --> 00:42:19.770
When we're at Apple,
it's easily hundreds of shared

00:42:19.900 --> 00:42:23.280
queues are on a given machine that
have been found over the network.

00:42:23.320 --> 00:42:24.470
But we don't present that to the user.

00:42:24.480 --> 00:42:26.320
We don't want the user,
every time they go to the print dialogue,

00:42:26.320 --> 00:42:28.260
to see hundreds of-- of printers.

00:42:28.420 --> 00:42:31.250
So we have this concept
of per user favorites.

00:42:31.340 --> 00:42:33.300
And that is, once the user goes and
selects a shared printer,

00:42:33.300 --> 00:42:34.780
it gets marked as a favorite.

00:42:34.820 --> 00:42:37.070
And that goes into the user's
working set of printers.

00:42:37.160 --> 00:42:40.610
Those are the printers that the user
will see at the top level of the UI.

00:42:40.820 --> 00:42:43.320
So PMPrinterIsFavorite is a way
for you to find out if it's one

00:42:43.320 --> 00:42:45.060
of that user's preferred printers.

00:42:45.200 --> 00:42:49.480
And we have people who are trying to put
up UI for the user to select a printer.

00:42:49.550 --> 00:42:51.040
They don't know about this.

00:42:51.120 --> 00:42:53.430
They're all of a sudden surprised
when they get user reports that

00:42:53.560 --> 00:42:56.180
on some large installation,
they've got these giant pop-ups,

00:42:56.180 --> 00:42:56.840
and the user's not very happy.

00:42:56.840 --> 00:42:57.210
OK.

00:42:57.360 --> 00:42:58.860
So we have a couple of
different ways to do this.

00:42:58.860 --> 00:43:00.360
Get the make model.

00:43:00.400 --> 00:43:01.120
Get the location.

00:43:01.120 --> 00:43:03.750
That's the textual string that
the user has entered to give some

00:43:03.850 --> 00:43:05.260
helpful use for shared printers.

00:43:05.280 --> 00:43:05.980
And then capabilities.

00:43:06.100 --> 00:43:06.830
Can you do duplex?

00:43:06.910 --> 00:43:08.600
Can you do shared printers?

00:43:08.660 --> 00:43:10.660
So that's PMPrinter.

00:43:10.680 --> 00:43:12.480
That's where you're going to print to.

00:43:12.520 --> 00:43:14.480
PMPrintSettings is how
you're going to print it.

00:43:14.480 --> 00:43:16.590
So you need to have a PMPrintSettings.

00:43:16.600 --> 00:43:19.360
I strongly encourage anybody who ever
needs to create a PMPrintSettings

00:43:19.460 --> 00:43:22.200
to use the print dialogue.

00:43:22.220 --> 00:43:26.120
The print dialogue, again,
is this amazing mixture of system UI,

00:43:26.120 --> 00:43:27.240
driver UI.

00:43:27.240 --> 00:43:31.010
and application UI that is
incredibly hard not only to create,

00:43:31.120 --> 00:43:33.680
but definitely to recreate
if you're outside Apple.

00:43:33.730 --> 00:43:37.910
So if you need to print settings,
drop that print dialogue.

00:43:37.920 --> 00:43:42.820
We're doing some API probably going
forward that will allow you to drop

00:43:42.820 --> 00:43:45.360
the print dialogue to get print
settings without actually printing.

00:43:45.360 --> 00:43:48.340
So it'll be more for
report-based applications that

00:43:48.340 --> 00:43:51.020
want to have the user say,
OK, this is the way I want to print

00:43:51.060 --> 00:43:52.520
this report whenever I print it.

00:43:52.520 --> 00:43:54.880
So it's more for scripting
and that type of thing.

00:43:54.910 --> 00:43:56.160
Future printing.

00:43:56.210 --> 00:43:57.120
So please don't try.

00:43:57.120 --> 00:44:00.730
Duplicate the print dialogues
and use the print dialogues to

00:44:00.730 --> 00:44:02.900
get the PMPrintSettings created.

00:44:02.950 --> 00:44:05.190
Once they're created,
you usually just use them

00:44:05.250 --> 00:44:06.460
for the life of a PM session.

00:44:06.610 --> 00:44:07.090
You're printing.

00:44:07.160 --> 00:44:08.610
You get the print settings
from the dialogue.

00:44:08.620 --> 00:44:09.440
You print.

00:44:09.470 --> 00:44:10.320
And you get rid of them.

00:44:10.400 --> 00:44:14.100
The print dialogue takes care of the
fact that there are presets and quick

00:44:14.100 --> 00:44:18.260
ways for the user to switch between
different sets of PMPrintSettings.

00:44:18.540 --> 00:44:20.170
Most applications don't need to do that.

00:44:20.410 --> 00:44:23.840
So PMPrintSettings usually
die at the end of a print job.

00:44:23.840 --> 00:44:25.880
But there are applications
that need to keep them.

00:44:25.890 --> 00:44:27.570
And again,
that's these report-based applications.

00:44:27.710 --> 00:44:30.500
So you can flatten the
PMPrintSettings to,

00:44:30.500 --> 00:44:34.170
in Tiger, CFData or to a URL to a file.

00:44:34.270 --> 00:44:35.430
And there are unflattened equivalents.

00:44:35.470 --> 00:44:37.970
So you have access to both of those.

00:44:39.770 --> 00:44:42.510
Inside the print settings,
there's lots of attributes.

00:44:42.610 --> 00:44:45.700
Obviously, again, copies and duplex.

00:44:45.780 --> 00:44:46.680
Can you do duplexes?

00:44:46.740 --> 00:44:47.830
Some of the obvious ones.

00:44:47.830 --> 00:44:49.750
We got tired of enumerating these.

00:44:49.750 --> 00:44:53.630
And again, this is part of replacing the
old job ticket code that we had.

00:44:53.800 --> 00:44:57.930
We now have general ways of just
querying on a print settings for a key.

00:44:57.930 --> 00:45:02.280
So we've got this key value getting sets,
which incredibly obvious.

00:45:02.460 --> 00:45:03.940
Should have been in the
API for a long time.

00:45:03.940 --> 00:45:06.590
But because we were using the
job ticket mechanism as a crutch,

00:45:06.590 --> 00:45:07.520
we never had this.

00:45:07.520 --> 00:45:09.270
So take the crutch away,
and we learned to walk.

00:45:09.700 --> 00:45:11.320
and it's much better.

00:45:15.070 --> 00:45:17.750
If you want to, again,
then drop below our print

00:45:17.750 --> 00:45:20.380
API and get down to CUPS,
you have to take our PM print settings

00:45:20.380 --> 00:45:22.920
and turn them into a string of options,
which is what CUPS wants.

00:45:22.950 --> 00:45:24.170
And so there's API to do that.

00:45:24.270 --> 00:45:26.850
And again,
we're trying to facilitate for these

00:45:26.850 --> 00:45:30.580
people who have really high-end print
needs to get from maybe our print dialog

00:45:30.660 --> 00:45:34.500
all the way down to using the CUPS API in
the specific manner they want to.

00:45:34.500 --> 00:45:37.280
We want you to be able
to span that gamut.

00:45:37.380 --> 00:45:41.080
And again,
that gamut's really broader than that.

00:45:41.080 --> 00:45:41.230
It's all the way from the
CUPS API up to the Cocoa API.

00:45:42.200 --> 00:45:43.640
So that's how are you going to print.

00:45:43.810 --> 00:45:47.660
PMPageFormat is how you're going
to then map onto a piece of paper.

00:45:48.400 --> 00:45:52.800
I'm a little less pendentic about
page format than I am print settings.

00:45:53.080 --> 00:45:54.640
Print settings,
I really want you in the print dialog.

00:45:54.720 --> 00:45:56.130
It's just hard not to do that.

00:45:56.550 --> 00:45:59.900
Page format,
use the page format dialog if you can.

00:45:59.900 --> 00:46:00.890
It's what users expect.

00:46:00.890 --> 00:46:01.700
It's a good thing.

00:46:01.700 --> 00:46:05.600
Its task is much less daunting
than the print dialog.

00:46:05.600 --> 00:46:08.360
So if you decide to bring some
of these formatting options into,

00:46:08.360 --> 00:46:10.390
say,
your printing view because you're taking

00:46:10.390 --> 00:46:13.440
this WYSIWYG idea very seriously and
you maybe want the user to select the

00:46:13.530 --> 00:46:16.100
paper size live from inside your view,
that's great.

00:46:16.110 --> 00:46:17.550
I actually don't have
a problem with that.

00:46:17.690 --> 00:46:19.990
But page format's easy to drop.

00:46:20.290 --> 00:46:23.560
It'll get you a description of your

00:46:23.910 --> 00:46:28.310
in the page format, a PM paper,
an orientation, and the scaling.

00:46:28.320 --> 00:46:30.020
And I say scaling for now.

00:46:30.020 --> 00:46:32.660
Scaling is one of these
funny things that dates way,

00:46:32.660 --> 00:46:35.930
way back, pre-OS 9, just, I mean,
really way back.

00:46:36.110 --> 00:46:38.280
And the idea with the scaling
was that the user would,

00:46:38.280 --> 00:46:41.490
in page setup, go and select a page,
maybe 10 inches by 10 inches,

00:46:41.500 --> 00:46:44.550
and then say,
I want it 200%. And then the print system

00:46:44.590 --> 00:46:47.100
would lie to the application and say,
hey, you know what,

00:46:47.100 --> 00:46:49.440
it's really only 5 by 5, not 10 by 10.

00:46:49.460 --> 00:46:52.540
And MacDraw, because this was really
created for MacDraw,

00:46:52.540 --> 00:46:55.250
just to show you how old it is,
would then go, oh, it's only 5 by 5,

00:46:55.260 --> 00:46:56.620
so I'm just going to
draw half of my content.

00:46:56.620 --> 00:46:58.820
And the print system would go, oh,
I tricked you, and it would blow it

00:46:58.900 --> 00:46:59.880
back up to the 10 by 10.

00:46:59.880 --> 00:47:03.570
So it's this crazy lying to
the application to get the

00:47:03.700 --> 00:47:06.000
application to do something
applications really can do today,

00:47:06.000 --> 00:47:07.020
which is scale their output.

00:47:07.020 --> 00:47:09.380
So I think over time we're
going to get rid of that.

00:47:09.480 --> 00:47:10.730
There are better ways of handling it.

00:47:10.780 --> 00:47:12.440
You can see them in
the Tiger print dialog,

00:47:12.440 --> 00:47:15.600
where we have scaling onto different
paper sizes and some other features.

00:47:15.600 --> 00:47:18.320
So scaling for now,
but hopefully it'll go away.

00:47:19.820 --> 00:47:23.570
If you do want to not use the page setup
dialog or you want to be smarter about

00:47:23.570 --> 00:47:30.410
finding paper sizes for your application,
you can get a list of PM papers and

00:47:30.490 --> 00:47:33.430
find the paper you want and then
create a page format from that.

00:47:33.680 --> 00:47:35.180
So we're going to look at that.

00:47:35.230 --> 00:47:37.680
PM Printer Get Paper List.

00:47:38.410 --> 00:47:42.150
Give me all the papers
for a particular printer.

00:47:42.250 --> 00:47:45.480
Each paper has in it a
height and width and margins.

00:47:45.480 --> 00:47:45.980
And that's it.

00:47:46.000 --> 00:47:47.700
There's no orientation on a PM paper.

00:47:47.860 --> 00:47:50.300
That's the distinction between
a PM paper and page format.

00:47:50.330 --> 00:47:52.800
PM paper is actually a
physical piece of paper.

00:47:52.810 --> 00:47:54.870
What you're going to see,
page format is that physical

00:47:55.090 --> 00:47:57.610
piece of paper mapped,
usually via orientation,

00:47:57.610 --> 00:47:59.800
but also today via scaling.

00:47:59.850 --> 00:48:01.980
So you can get this paper
list for your application,

00:48:02.020 --> 00:48:05.400
walk it, find the one you want.

00:48:05.410 --> 00:48:08.360
You're looking for 3 by 5, for instance.

00:48:08.360 --> 00:48:10.160
And then you can create
a page format from it,

00:48:10.180 --> 00:48:12.390
because a page format's what the
rest of the printing API is going

00:48:12.390 --> 00:48:13.970
to want when it comes time to print.

00:48:14.050 --> 00:48:18.020
So you can create a page format from that
PM paper and then set the orientation.

00:48:18.040 --> 00:48:20.340
By default, you'll get portrait,
but you can set landscape

00:48:20.340 --> 00:48:22.140
or alternate landscape.

00:48:22.170 --> 00:48:24.860
And so that's the way you
can pick a paper size without

00:48:24.860 --> 00:48:26.440
going through the print dialog.

00:48:26.480 --> 00:48:28.880
You may also actually just
know the paper size you want.

00:48:28.980 --> 00:48:31.320
You may know that you want
this 10 by 10 piece of paper,

00:48:31.320 --> 00:48:33.640
and you don't care if
the printer supports it.

00:48:33.770 --> 00:48:35.890
So there's PM Paper Create,
and you can create any

00:48:35.980 --> 00:48:39.200
paper with any margins,
any size you want, and use that.

00:48:39.260 --> 00:48:41.130
And from that, again,
create a page format and use

00:48:41.190 --> 00:48:44.080
the whole printing API with
that custom piece of paper.

00:48:44.080 --> 00:48:46.700
I can't promise you what's going
to happen when you print that.

00:48:46.710 --> 00:48:49.180
I wish I could,
but it depends on the driver.

00:48:49.220 --> 00:48:51.720
Can the driver support
custom paper sizes?

00:48:51.730 --> 00:48:52.910
If they do, one thing happens.

00:48:52.980 --> 00:48:55.440
If they don't,
there's going to be cropping.

00:48:55.510 --> 00:48:56.870
So you can get this.

00:48:57.040 --> 00:48:57.590
You can print.

00:48:57.600 --> 00:48:58.600
You can format to it.

00:48:58.640 --> 00:49:00.900
But there's some question
about what's going to happen.

00:49:00.900 --> 00:49:03.760
And again,
one of the PM printer attributes we

00:49:03.760 --> 00:49:04.860
looked at was hasCustomPaperSize.

00:49:04.910 --> 00:49:07.860
If it has custom paper sizes,
then you have a much better

00:49:07.860 --> 00:49:11.410
chance of your custom paper size
actually printing correctly.

00:49:11.780 --> 00:49:13.700
So again,
going back to the idea of taking

00:49:13.700 --> 00:49:17.100
page format and maybe bringing
some of that into your application,

00:49:17.330 --> 00:49:20.200
get a request a lot for how
do we do the paper menu.

00:49:20.240 --> 00:49:23.580
And the paper menu in the page setup
dialogue is this hierarchical menu

00:49:23.600 --> 00:49:26.840
where we try and group paper sizes
that have the same physical paper

00:49:26.880 --> 00:49:30.380
size together into the same submenu
where only the margins are different.

00:49:30.380 --> 00:49:34.190
So in this example, US letter,
there's US letter and going back

00:49:34.320 --> 00:49:37.450
to the original laser writer days,
US letter small,

00:49:37.640 --> 00:49:39.540
which has different margins.

00:49:39.650 --> 00:49:41.680
So we group those together
for the US letter.

00:49:42.700 --> 00:49:43.660
Well, people want to reproduce this.

00:49:43.730 --> 00:49:46.010
So in Tiger, we have this call,
PM printer create paper

00:49:46.140 --> 00:49:47.170
info list for menu.

00:49:47.170 --> 00:49:50.420
It's probably our longest call, I think,
in the printing API.

00:49:50.420 --> 00:49:54.810
But the idea is, hey,
give me back an array of PM papers.

00:49:54.830 --> 00:49:57.190
But if I need to do
the hierarchical menu,

00:49:57.190 --> 00:49:59.640
instead of a PM paper,
give me a subarray and

00:49:59.640 --> 00:50:01.360
inside of that have paper.

00:50:01.440 --> 00:50:03.170
So all you have to do
is look in this array,

00:50:03.390 --> 00:50:03.640
walk it.

00:50:03.660 --> 00:50:06.450
If you find a subarray,
then you're into the hierarchical menu.

00:50:06.450 --> 00:50:08.950
If you find a PM paper,
then that's just what you're going to

00:50:08.950 --> 00:50:10.850
want to put in your page setup pop-up.

00:50:12.260 --> 00:50:13.470
So again,
we're trying to make this easy for

00:50:13.470 --> 00:50:18.200
you guys to emulate pieces of the
print system where it is appropriate.

00:50:18.280 --> 00:50:20.470
Page setup, it probably might be
appropriate depending on how

00:50:20.470 --> 00:50:21.380
much WYSIWYG you're doing.

00:50:21.380 --> 00:50:23.130
Print dialog, it's definitely not.

00:50:25.030 --> 00:50:28.970
So that's PM Printer,
PM Print Settings and PM Page Setup,

00:50:29.100 --> 00:50:30.870
PM Page Format.

00:50:31.420 --> 00:50:34.200
Those are the three most important
pieces of the printing API.

00:50:34.480 --> 00:50:36.830
Once you understand that,
you can do some more advanced things,

00:50:37.010 --> 00:50:40.140
and one of the advanced things you
can do is our new Direct-- well,

00:50:40.140 --> 00:50:42.940
not new, but the Direct Printing API.

00:50:42.940 --> 00:50:44.710
It's new in that we have
better support for all the

00:50:44.720 --> 00:50:46.030
MIME filters that we had before.

00:50:46.040 --> 00:50:48.880
So this actually works pretty well now.

00:50:48.950 --> 00:50:52.440
The idea with the Direct Printing API,
this is especially for Unix ports.

00:50:52.480 --> 00:50:54.920
A lot of Unix applications come
over and they already know in their

00:50:54.920 --> 00:50:58.690
code how to create PostScript output
or how to create PDF output.

00:50:58.730 --> 00:51:00.790
And they don't want to draw
through Quartz because it's

00:51:00.860 --> 00:51:02.600
going to be too much of a port,
or maybe they're just going to

00:51:02.600 --> 00:51:03.860
do that in the second version.

00:51:03.980 --> 00:51:06.720
So they've got a PostScript file
that they want to print,

00:51:06.770 --> 00:51:08.280
and they want to give
it to the print system.

00:51:08.350 --> 00:51:11.020
And so the Direct Printing
API lets them do exactly that.

00:51:11.080 --> 00:51:13.710
And Preview is actually a great example,
not of a Unix port,

00:51:13.710 --> 00:51:15.980
but a great example of
somebody who uses this.

00:51:16.050 --> 00:51:19.040
The idea is if you're in
Safari and you hit Print and

00:51:19.040 --> 00:51:22.080
then you hit the Preview button,
Safari draws with Quartz,

00:51:22.080 --> 00:51:23.700
that Quartz gets captured.

00:51:23.700 --> 00:51:25.400
It gets entered into a PDF spool file.

00:51:25.400 --> 00:51:27.040
That PDF spool file
gets handed to Preview.

00:51:27.170 --> 00:51:32.100
Preview opens it up,
draws that PDF spool file with Quartz,

00:51:32.160 --> 00:51:33.160
and you look at it.

00:51:33.190 --> 00:51:35.410
And there's a little Print button
on the bottom of that Preview.

00:51:35.670 --> 00:51:36.880
So the idea is the user
looks at it and says,

00:51:36.960 --> 00:51:38.140
yeah, that's what I wanted.

00:51:38.160 --> 00:51:40.160
And you hit the Print button.

00:51:40.310 --> 00:51:44.690
What Preview used to do at that point
was draw the PDF through Quartz,

00:51:44.690 --> 00:51:47.340
so all the PDF was converted
back into Quartz calls,

00:51:47.350 --> 00:51:50.410
which were spooled into the print system,
which were then spooled

00:51:50.410 --> 00:51:52.590
back out into PDF,
spooled into the print system,

00:51:52.590 --> 00:51:55.020
and then the print system later
on would use Quartz to do it.

00:51:55.110 --> 00:51:56.710
So anyway,
there'd be this whole extra step

00:51:56.710 --> 00:51:58.000
of going back from PDF to Quartz.

00:51:58.040 --> 00:51:59.110
Forget that.

00:51:59.200 --> 00:52:01.160
In Tiger, they just go, look,
here's the PDF file.

00:52:01.160 --> 00:52:03.460
They use the printing API,
the direct printing API,

00:52:03.660 --> 00:52:06.350
and it gets submitted directly
into the print system.

00:52:06.820 --> 00:52:08.740
So if you have a Unix application
that you're porting over and

00:52:08.740 --> 00:52:10.670
you've got a PostScript file
and you just want to print it,

00:52:10.910 --> 00:52:13.360
the equivalent of LP,
you can use the direct printing API.

00:52:13.360 --> 00:52:15.960
If you have a PDF file,
you can do it as well.

00:52:15.960 --> 00:52:17.070
In fact...

00:52:18.800 --> 00:52:21.420
You can do it with any of the
MIME types supported by those filters

00:52:21.420 --> 00:52:23.280
we talked about oh so long ago.

00:52:23.410 --> 00:52:26.980
PMPrinter.getMIMEtypes will let
you take a PMPrinter and say,

00:52:26.980 --> 00:52:30.040
"Hey, what file types,
what MIME types will this print queue

00:52:30.040 --> 00:52:33.880
accept directly?" And by directly,
that means what file types,

00:52:34.100 --> 00:52:38.290
what MIME types can I hand it that
it has filters to convert back to

00:52:38.290 --> 00:52:42.280
the format desired by the driver,
and it builds up that chain of filters.

00:52:42.340 --> 00:52:44.990
So you can get this list back,
and if you find the type you want,

00:52:44.990 --> 00:52:47.170
and PDF and PostScript are
always going to be there,

00:52:47.170 --> 00:52:51.340
you can then use the Direct Printing API,
PMPrinter.printWithFile.

00:52:51.370 --> 00:52:52.340
Here's the printer I want to print to.

00:52:52.340 --> 00:52:53.340
Here's the print settings.

00:52:53.340 --> 00:52:54.340
This is how I want to print.

00:52:54.340 --> 00:52:55.230
Here's the page format.

00:52:55.360 --> 00:52:59.340
It may or may not be applicable depending
on the MIME type you're printing.

00:52:59.340 --> 00:53:01.150
Here's the MIME type.

00:53:01.320 --> 00:53:03.070
So if you want to give
the system a hint and say,

00:53:03.070 --> 00:53:05.490
"Hey, look, this thing's PostScript,
so we don't have to do any

00:53:05.590 --> 00:53:07.210
auto-typing," you can do that.

00:53:07.340 --> 00:53:09.390
You can also leave that null,
and we'll try and figure

00:53:09.470 --> 00:53:10.270
it out as best we can.

00:53:10.360 --> 00:53:12.120
And finally, here's the file.

00:53:12.400 --> 00:53:15.340
So this will let you do
what the print system does.

00:53:15.340 --> 00:53:17.480
Once we spool a PDF file,
we use the equivalent of the

00:53:17.480 --> 00:53:21.320
Direct Printing API to submit that
PDF file into the print system.

00:53:21.350 --> 00:53:23.310
This will let you do it yourself.

00:53:23.360 --> 00:53:27.240
And we actually have--there's at
least one other shipping application

00:53:27.240 --> 00:53:29.290
that uses this to great effect.

00:53:29.620 --> 00:53:31.880
So take a look at that if
you're one of those applications

00:53:31.880 --> 00:53:33.500
that might be useful for.

00:53:33.570 --> 00:53:37.960
The flip side of the direct printing API,
which is, hey,

00:53:37.960 --> 00:53:40.960
I've got a well-formed file and
I want to push it to a printer,

00:53:41.010 --> 00:53:43.110
is this printing without a printer.

00:53:43.190 --> 00:53:45.050
And it sounds funny,
and the guys who were proofing

00:53:45.050 --> 00:53:46.740
my slides kept correcting this.

00:53:46.760 --> 00:53:47.780
I really meant this.

00:53:48.000 --> 00:53:49.670
Here,
the idea is you have an application,

00:53:49.670 --> 00:53:52.280
and maybe your users want you
to have an export to PostScript,

00:53:52.400 --> 00:53:54.240
for example, feature.

00:53:54.280 --> 00:53:57.300
And you don't really want to figure out
how to convert Quartz to PostScript.

00:53:57.440 --> 00:54:00.600
So you can use the printing
without a printer concept in

00:54:00.600 --> 00:54:04.000
our printing APIs to implement a
PostScript export or a PDF export,

00:54:04.240 --> 00:54:05.660
some different things.

00:54:05.760 --> 00:54:09.320
So in order to understand how that works,
you have to understand destinations.

00:54:09.320 --> 00:54:13.030
Every PM session has a destination,
and the destination's

00:54:13.030 --> 00:54:13.920
broken into three parts.

00:54:14.020 --> 00:54:16.050
There's a destination type,
a destination format,

00:54:16.050 --> 00:54:18.350
and a destination location.

00:54:18.410 --> 00:54:20.700
And there are APIs for getting all these.

00:54:20.780 --> 00:54:22.900
When you get the destination type,
it's going to tell you, hey,

00:54:23.310 --> 00:54:26.800
this user is printing to a printer,
or he's saving the file.

00:54:26.860 --> 00:54:29.000
Or he's doing a preview,
or he's going through

00:54:29.160 --> 00:54:31.140
the new workflow menu.

00:54:31.190 --> 00:54:32.460
It'll tell you one of those things.

00:54:32.600 --> 00:54:36.080
So if you're an application, for example,
that really doesn't want anybody

00:54:36.140 --> 00:54:39.040
saving the file your content-- you're
an e-book application or something

00:54:39.100 --> 00:54:42.060
like that-- you can find out after
the print dialog comes back up,

00:54:42.070 --> 00:54:44.220
but before you print,
what the user has asked

00:54:44.320 --> 00:54:45.400
the print system to do.

00:54:45.460 --> 00:54:46.730
And destination type will tell that.

00:54:46.740 --> 00:54:48.040
And maybe at that point, you go, hey,
I'm sorry.

00:54:48.040 --> 00:54:50.590
It's going to cost you another
nickel to actually print this.

00:54:50.600 --> 00:54:53.670
You can capture it and stop
the process at that point.

00:54:53.790 --> 00:54:55.960
So that's the destination type.

00:54:56.460 --> 00:54:57.130
Destination format.

00:54:57.130 --> 00:55:02.350
Okay, so maybe the user hit the
save as PostScript selection.

00:55:02.370 --> 00:55:05.060
The two files are going to be the type.

00:55:05.120 --> 00:55:06.750
The format is going to be PostScript.

00:55:06.800 --> 00:55:08.750
And in our print dialog today,
it's going to be PDF or

00:55:08.750 --> 00:55:09.580
PostScript always.

00:55:09.650 --> 00:55:11.100
It's going to be one of those two things.

00:55:11.190 --> 00:55:14.140
We're always generating out of the
print dialog either PDF or PostScript.

00:55:14.140 --> 00:55:16.220
So that's the destination format today.

00:55:16.660 --> 00:55:17.490
And the location.

00:55:17.570 --> 00:55:18.780
The location is just a URL.

00:55:18.890 --> 00:55:21.240
And the location is pretty
obvious if you're doing,

00:55:21.390 --> 00:55:23.590
the user is doing something
that's a save to file.

00:55:23.590 --> 00:55:25.990
The URL is going to be where
we're going to save it.

00:55:26.050 --> 00:55:27.640
You might want to override that.

00:55:27.640 --> 00:55:30.560
You might want to check and make
sure it's on the proper volume.

00:55:30.570 --> 00:55:32.770
You can do anything you
want after you get it.

00:55:33.010 --> 00:55:34.740
It could also be the workflow menu.

00:55:34.770 --> 00:55:36.650
Our new workflow menu,
which we call Process PDF,

00:55:36.790 --> 00:55:39.040
that button on the left
that's really a pop-up menu,

00:55:39.070 --> 00:55:39.720
that was the UI team.

00:55:39.720 --> 00:55:40.830
That had nothing to do with me.

00:55:40.980 --> 00:55:42.020
You can get that.

00:55:42.040 --> 00:55:46.280
And you can find out that the user
is running PDF workflow on something,

00:55:46.280 --> 00:55:48.770
and you can change the way that works.

00:55:49.200 --> 00:55:51.170
But the important part is,
if you're trying to implement

00:55:51.290 --> 00:55:54.270
something like export to PostScript,
you can set all those things.

00:55:54.380 --> 00:55:57.310
So PM session,
set destination will let you set

00:55:57.380 --> 00:56:02.440
the type and the format and the URL,
the location.

00:56:02.440 --> 00:56:04.630
So you can say, hey,
I want to save to PostScript.

00:56:04.630 --> 00:56:06.000
I want the output to be here.

00:56:06.000 --> 00:56:08.720
You set this on the session,
and then you run your print loop,

00:56:08.820 --> 00:56:11.050
and it will generate a
PostScript file for you.

00:56:11.250 --> 00:56:14.050
User never has to see the print dialog,
and they never need to know that

00:56:14.050 --> 00:56:15.770
the print system was even involved.

00:56:17.050 --> 00:56:18.410
So that's printing without a printer.

00:56:18.540 --> 00:56:20.710
That's the way you can do export.

00:56:24.450 --> 00:56:26.620
PDF Workflow.

00:56:26.620 --> 00:56:29.590
Again, we already talked about
the pop-up button.

00:56:29.770 --> 00:56:33.460
This is public now in Tiger.

00:56:33.480 --> 00:56:37.940
It's been hidden away for quite a while,
really since 10.2, I believe.

00:56:37.960 --> 00:56:40.220
And there's a lot to be
said around here about this,

00:56:40.220 --> 00:56:41.850
so I'm going to be saying
it in the next talk,

00:56:42.010 --> 00:56:44.380
which is harnessing PDF.

00:56:44.380 --> 00:56:45.750
So that'll be the talk following this.

00:56:45.750 --> 00:56:48.440
We're going to talk about PDF Workflow
and the way you can get items in there.

00:56:48.440 --> 00:56:51.140
So next talk, not this talk.

00:56:51.630 --> 00:56:55.620
So in summary,
there are lots of places in the print

00:56:55.650 --> 00:56:59.810
system for application writers and
printer driver developers to hook in.

00:56:59.900 --> 00:57:01.980
There's filters, drivers, and back ends.

00:57:02.020 --> 00:57:03.520
And there's just a lot of
functionality that can be

00:57:03.520 --> 00:57:05.780
implemented there really very easily.

00:57:05.780 --> 00:57:08.880
Writing these filters and
back ends is next to trivial,

00:57:08.920 --> 00:57:10.300
but it adds a lot of power in the system.

00:57:10.300 --> 00:57:13.500
And even if you're an application vendor,
you might want to look and see what

00:57:13.500 --> 00:57:18.280
the benefits are of adding a filter
in for some of your file types.

00:57:18.340 --> 00:57:20.500
And if you wanted to give them
to us or open source them,

00:57:20.530 --> 00:57:22.390
that might make your file
type even more popular.

00:57:22.470 --> 00:57:24.740
So there's ways that you
can think about there.

00:57:24.850 --> 00:57:27.180
Print dialog extensions,
ways to get some of your

00:57:27.180 --> 00:57:28.440
options out to the user.

00:57:28.440 --> 00:57:30.840
If you're a printer driver developer,
that's good.

00:57:30.840 --> 00:57:34.070
If you're an application developer,
you might want to stop and

00:57:34.070 --> 00:57:35.990
think about those a little bit.

00:57:36.100 --> 00:57:37.840
If you're just a Cocoa app
and you're trying to print,

00:57:37.840 --> 00:57:39.120
use the Cocoa printing APIs.

00:57:39.120 --> 00:57:40.720
You'll be very happy with those.

00:57:40.850 --> 00:57:43.380
If you need to go beyond that,
we have this rich printing API.

00:57:43.390 --> 00:57:44.400
It's worth looking at.

00:57:44.420 --> 00:57:47.580
The header files are a little daunting,
but there's a lot of power there.

00:57:47.580 --> 00:57:49.240
And I think with some of
these basic slides we talked,

00:57:49.330 --> 00:57:53.120
I think you can get an idea of
exactly the way to attack it.

00:57:53.160 --> 00:57:55.780
And then again,
we've gone to pretty good lengths,

00:57:55.780 --> 00:57:58.780
actually, in Tiger to let you get to
the underlying CUPS API.

00:57:58.820 --> 00:58:00.190
And once you're there,
that's open source,

00:58:00.190 --> 00:58:01.860
so you can know exactly how that works.

00:58:01.860 --> 00:58:04.760
And honestly, if I have my way,
more and more stuff will push

00:58:04.830 --> 00:58:07.020
there so you guys can just go
look and see how things work.

00:58:07.140 --> 00:58:10.770
There's not a lot of secrets in printing,
at least from our point of view.

00:58:10.800 --> 00:58:12.740
So the more we can make
that visible to you,

00:58:12.880 --> 00:58:15.010
the happier we're going to be.

00:58:16.200 --> 00:58:18.380
There is a printing lab tomorrow.

00:58:18.490 --> 00:58:18.820
Come on by.

00:58:18.820 --> 00:58:20.980
We'll have pretty much the whole
printing team is going to be there.

00:58:20.980 --> 00:58:23.380
So if you have questions,
it's a great place to come.

00:58:23.380 --> 00:58:25.510
I'm not saying we'll have answers,
but if you have questions,

00:58:25.510 --> 00:58:26.750
you should definitely go there.