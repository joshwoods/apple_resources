WEBVTT

00:00:10.660 --> 00:00:15.210
Hi everyone, welcome to Mac OS X and
Scientific Computing.

00:00:15.210 --> 00:00:19.360
I'm Bud Tribble, Vice President of
Software Technology for Apple.

00:00:19.400 --> 00:00:23.090
And I've got a lot of great
stuff to go over today.

00:00:23.210 --> 00:00:25.110
I'm going to be talking
about Mac OS X and

00:00:25.120 --> 00:00:28.760
Scientific Computing in general,
but we've also got sort of

00:00:28.760 --> 00:00:33.840
the meat of this presentation,
which are some great demos from some

00:00:33.840 --> 00:00:37.060
third parties that I'm sure you'll enjoy.

00:00:37.130 --> 00:00:41.130
To get started,
it's been a year since I was

00:00:41.350 --> 00:00:46.180
up here last talking about
Mac OS X and Scientific Computing

00:00:46.420 --> 00:00:50.000
and pointing out some of the
momentum that we were starting to

00:00:50.000 --> 00:00:53.260
see in the science market with Mac.

00:00:53.560 --> 00:00:58.530
And I'm pleased to report that that
momentum has not only continued,

00:00:58.530 --> 00:01:01.340
but it's on an accelerating course.

00:01:01.450 --> 00:01:06.580
And I'd just like to take a few
moments to highlight a few things here.

00:01:07.030 --> 00:01:13.340
First thing, in August of 2004,
we introduced our iMac,

00:01:13.340 --> 00:01:16.600
17-inch and 20-inch.

00:01:16.630 --> 00:01:18.840
Now, why is this interesting for science?

00:01:18.940 --> 00:01:24.190
Well, any of you who have done any bench
science know that you like to

00:01:24.190 --> 00:01:29.660
have your computer on the bench,
but bench space is sort of at a premium.

00:01:29.680 --> 00:01:34.000
And so it's been pointed out
many times to me as I've wandered

00:01:34.000 --> 00:01:36.860
around and talked to various labs.

00:01:36.860 --> 00:01:40.990
And I've been told that this is a great
machine for bench science because it sort

00:01:40.990 --> 00:01:44.110
of sits up there on its aluminum stand.

00:01:44.320 --> 00:01:46.680
You can shove the keyboard under it.

00:01:46.780 --> 00:01:50.220
Someone pointed out to me
that it was sort of impervious

00:01:50.220 --> 00:01:51.900
to spills on the bench.

00:01:51.900 --> 00:01:55.190
And I mentioned, well,
that sort of depends on exactly

00:01:55.190 --> 00:01:57.100
what is spilling on the bench.

00:01:57.110 --> 00:02:02.590
But this is a great
machine for the scientists.

00:02:03.560 --> 00:02:06.140
XServe, RAID,
I'll come back to this subject.

00:02:06.160 --> 00:02:10.170
More and more science
is about big storage.

00:02:10.180 --> 00:02:14.960
And Apple originally got
into the storage business.

00:02:14.960 --> 00:02:20.120
Part of our market is the
high-end media market.

00:02:20.120 --> 00:02:23.700
Those guys eat terabytes for breakfast.

00:02:23.710 --> 00:02:27.810
But this is more and more
the story of science.

00:02:27.810 --> 00:02:33.770
The ability to either collect data,
store it, data that is generated

00:02:33.770 --> 00:02:37.430
during simulations,
data that has to be analyzed.

00:02:37.430 --> 00:02:41.860
Almost any lab you walk into these days,
there's a need for big storage.

00:02:41.860 --> 00:02:44.110
And if you look around
the market and say,

00:02:44.110 --> 00:02:47.870
well, what's the most
cost-effective way to do that?

00:02:47.870 --> 00:02:50.460
It turns out XServe RAID is there.

00:02:50.460 --> 00:02:56.280
It's a bit between $2 and $3 per gigabyte
of fully rated storage with XServe.

00:02:56.600 --> 00:03:01.460
Fiber optic connectivity
in a nice 3U mount system,

00:03:01.460 --> 00:03:03.540
you can get 5.6 terabytes.

00:03:03.600 --> 00:03:07.570
So it's the kind of thing
that no lab should be without.

00:03:07.580 --> 00:03:10.400
If you're not generating
terabytes of data,

00:03:10.400 --> 00:03:14.090
you're probably not doing
real science these days.

00:03:14.260 --> 00:03:19.510
Just a couple other things to point out.

00:03:19.600 --> 00:07:05.000
[Transcript missing]

00:07:06.230 --> 00:07:07.380
Portability.

00:07:07.380 --> 00:07:13.230
So, Apple obviously has always had a
great lineup of portable computers.

00:07:13.230 --> 00:07:18.800
I can't tell you the number of scientists
that have come up to me and said,

00:07:18.800 --> 00:07:24.080
you know, it's just so great that I can
have Xsers in my lab or clusters

00:07:24.080 --> 00:07:29.170
or grids in my lab running my
simulations or running my analysis.

00:07:29.170 --> 00:07:32.990
But, you know,
if I'm on a plane to a conference,

00:07:32.990 --> 00:07:36.080
I just take my PowerBook with me.

00:07:36.240 --> 00:07:38.760
And it's exactly the same environment.

00:07:38.790 --> 00:07:42.980
That is such a productivity boost
for anyone involved in research.

00:07:43.070 --> 00:07:48.270
And with the PowerBook G4
introduced in 2005,

00:07:48.280 --> 00:07:50.360
you've got 1.67 gigahertz.

00:07:50.490 --> 00:07:55.870
It gets slightly warm, but that's okay.

00:07:58.600 --> 00:08:03.330
and then a key product launch
happened in February 2005,

00:08:03.330 --> 00:08:04.760
BioTrue.

00:08:04.760 --> 00:08:09.370
BioTrue is a collaborative
system for sharing data,

00:08:09.440 --> 00:08:12.380
very useful in the biosciences.

00:08:12.990 --> 00:08:17.280
Continuing on, BioIT World,
we got the cover of BioIT World.

00:08:17.280 --> 00:08:24.380
And as you probably know,
BioIT or Biotech is one of the first

00:08:24.560 --> 00:08:29.880
places where Apple really got a strong
foothold starting a couple years ago.

00:08:30.010 --> 00:08:34.900
And we got our foot in the door, that is,
the door is now wide open.

00:08:34.900 --> 00:08:40.600
And I don't know if
you'd call us dominant,

00:08:40.650 --> 00:08:43.930
but certainly it's hard to
go into a bio information lab

00:08:43.930 --> 00:08:49.780
without seeing Macs around,
without seeing Macs used for analysis,

00:08:49.780 --> 00:08:56.290
for genetic analysis,
biochemical modeling, etc.

00:08:57.330 --> 00:09:02.710
Continuing in that vein,
what we're starting to see this year,

00:09:02.850 --> 00:09:07.330
March 2005,
we were at the American Chemical Society.

00:09:07.440 --> 00:09:11.380
What this represents is
Apple moving into other parts of

00:09:11.380 --> 00:09:14.290
the pipeline for drug development.

00:09:14.400 --> 00:09:19.610
So we sort of started in the
genetics part of that pipeline,

00:09:19.650 --> 00:09:25.450
genetic modeling and some
of the biochemical modeling.

00:09:25.640 --> 00:09:29.680
American Chemical Society represents
a different part of that pipeline and

00:09:29.680 --> 00:09:35.300
we're coming on extremely strong in that
area and I expect that trend to continue.

00:09:35.300 --> 00:09:40.480
Again,
more products launched in April 2005,

00:09:40.530 --> 00:09:43.300
molecular imaging from Kodak.

00:09:43.360 --> 00:09:44.240
Just a little bit more
information about that.

00:09:44.340 --> 00:09:45.140
We're starting to see a
lot of new applications,

00:09:45.150 --> 00:09:46.300
I'd like to mention a few of them, SAS,
drug development.

00:09:46.300 --> 00:09:49.300
So what we're seeing here
is building momentum.

00:09:49.300 --> 00:09:53.620
Last time I was here,
I spent a lot of time talking about

00:09:53.750 --> 00:09:59.290
all the open source applications
that were available for Mac OS X.

00:09:59.380 --> 00:10:04.090
That continues to be the case,
but the big news over this last

00:10:04.210 --> 00:10:08.960
year is that we have penetrated
this market enough to the point

00:10:08.960 --> 00:10:13.300
where the commercial applications
are moving over in large numbers.

00:10:13.360 --> 00:10:18.190
So that's just really exciting for us.

00:10:18.400 --> 00:10:24.250
On April of 2005, of course,
the Power Mac G5, 2.7 GHz,

00:10:24.410 --> 00:10:30.240
for any real number crunching,
this is a must.

00:10:30.720 --> 00:10:35.300
With the AlteVec and the
acceleration libraries,

00:10:35.400 --> 00:10:40.730
any sort of simulation or analysis
that involves floating point or

00:10:40.730 --> 00:10:45.570
double precision floating point,
this is probably the top

00:10:45.570 --> 00:10:47.030
system that you can get today.

00:10:47.300 --> 00:13:29.300
[Transcript missing]

00:13:29.720 --> 00:13:32.810
This one I won't spend too much
time on because this is one of

00:13:32.810 --> 00:13:37.270
the examples we're going to see,
but June 2005 we saw Wolfram

00:13:37.270 --> 00:13:40.600
Mathematica launch with 64-bit.

00:13:40.600 --> 00:13:46.300
You're going to see that here
today and in some great detail.

00:13:46.540 --> 00:13:50.620
And the last thing I want to
mention is macresearch.org.

00:13:50.750 --> 00:13:54.840
So this is a great website if you're
using Macs at all in science and want

00:13:54.840 --> 00:13:58.720
to get hooked in with the community and
find out what other people are doing

00:13:58.720 --> 00:14:03.310
and find out hints on how to make things
work or what applications are available.

00:14:03.720 --> 00:14:08.990
Macresearch.org is a
great resource for that.

00:14:11.130 --> 00:14:17.370
Just a quote that I think is really
reflective of the current situation

00:14:17.440 --> 00:14:19.660
with respect to Mac OS X and science.

00:14:19.770 --> 00:14:23.840
This is from Mario Rotorer
of Stanford University.

00:14:24.000 --> 00:14:28.440
"In research life sciences,
probably 50 to 70 percent of

00:14:28.510 --> 00:14:30.960
research laboratories use Macs.

00:14:30.960 --> 00:14:36.300
It's by far the most common
analysis platform." This is amazing.

00:14:36.360 --> 00:14:40.500
I mean, five years ago,
if you had said this to someone,

00:14:40.500 --> 00:14:41.970
they would have thought you were crazy.

00:14:41.980 --> 00:14:45.000
This is absolutely the case now.

00:14:45.000 --> 00:14:50.780
Mac OS X is the platform that
scientists love to use in computing.

00:14:51.020 --> 00:14:55.150
We're showing up first in life sciences,
but I expect this trend to

00:14:55.150 --> 00:15:00.530
continue throughout chemistry,
physics, etc.

00:15:01.250 --> 00:15:08.610
Now to the fun part,
I'd like to start out by introducing Dr.

00:15:08.610 --> 00:15:10.260
Osman Rattib.

00:15:10.430 --> 00:15:10.780
Dr.

00:15:10.780 --> 00:15:14.440
Rattib is professor of medicine and
vice chair of information systems

00:15:14.440 --> 00:15:16.490
at the Department of Radiology UCLA.

00:15:16.590 --> 00:15:21.290
He's a board-certified cardiologist and
radiologist who obtained his medical

00:15:21.290 --> 00:15:24.390
degrees at the University of Geneva,
degrees in biophysics,

00:15:24.470 --> 00:15:28.510
and a PhD in medical imaging from
the University of California,

00:15:28.510 --> 00:15:30.200
Los Angeles.

00:15:30.200 --> 00:15:33.800
He's responsible for coordinating
the development of enterprise-wide

00:15:33.800 --> 00:15:37.720
strategy and infrastructure for
image management and communication.

00:15:37.720 --> 00:15:40.350
His clinical activities
include cardiovascular,

00:15:40.390 --> 00:15:44.160
MR, and CT imaging procedures,
combined PET/CT imaging,

00:15:44.500 --> 00:15:47.100
and advanced cardiovascular imaging.

00:15:47.100 --> 00:15:49.620
And I'm going to ask him to
come up and show you some of the

00:15:49.620 --> 00:15:51.240
very exciting stuff he's doing.

00:15:51.240 --> 00:15:52.330
So, Dr.

00:15:52.330 --> 00:15:54.570
Rattib, welcome.

00:15:58.640 --> 00:15:59.490
Thank you very much, Bud.

00:15:59.490 --> 00:16:00.300
Good afternoon.

00:16:00.300 --> 00:16:02.760
Yeah, my name is Asmar Lateef,
and as you heard,

00:16:02.760 --> 00:16:06.200
I have a lot of responsibility at UCLA,
and we are very excited to be here.

00:16:06.200 --> 00:16:09.890
I would like to first thank Apple for
giving us the opportunity to share

00:16:09.890 --> 00:16:13.120
with you a very exciting project
that we had for about a year,

00:16:13.120 --> 00:16:15.890
a year and a half now,
in developing what we think is

00:16:15.890 --> 00:16:19.780
a killer application in open
source and medical imaging.

00:16:19.780 --> 00:16:23.650
And thanks to OS X and Tiger now,
we were able to make that application,

00:16:23.880 --> 00:16:25.940
really, a very high level, very exciting.

00:16:25.950 --> 00:16:28.270
And thanks to all the features that
we were able to put in our software,

00:16:28.350 --> 00:16:29.640
it became really very popular.

00:16:29.640 --> 00:16:36.020
So let's start with a big, small,
or just an introduction of our software.

00:16:36.020 --> 00:16:40.930
In a few words,
it's just a 3D viewer of medical imaging.

00:16:40.930 --> 00:16:44.590
We call it a 3D, 4D,
and 5D because now medical imaging

00:16:44.590 --> 00:16:48.340
comes into very large data sets that
are acquired in three dimensions

00:16:48.340 --> 00:16:49.820
and can be acquired over time.

00:16:49.850 --> 00:16:51.570
That makes you a fourth dimension.

00:16:51.570 --> 00:16:53.850
And you heard about now
things like molecular imaging,

00:16:53.850 --> 00:16:55.470
functional imaging,
which add more and more

00:16:55.470 --> 00:16:55.920
data to the data set.

00:16:55.920 --> 00:16:55.920
And we're going to talk
about that in a little bit.

00:16:55.920 --> 00:16:55.920
So let's get started.

00:16:55.920 --> 00:17:00.900
So the software is a software that
is designed to provide the tools

00:17:01.110 --> 00:17:06.260
that are necessary to visualize,
manipulate, and interpret those images.

00:17:06.260 --> 00:17:08.550
We intended to make it open
source so we can benefit from

00:17:08.550 --> 00:17:11.900
a large community of academic
people that will contribute to it.

00:17:11.900 --> 00:17:14.150
And it became very popular,
as I will explain to

00:17:14.180 --> 00:17:16.940
you in a few minutes,
where people have now joined our

00:17:16.960 --> 00:17:21.380
group and developed other part of the
software and are contributing to it.

00:17:21.400 --> 00:17:23.020
It is developed by physicians.

00:17:23.020 --> 00:17:25.800
I'm a cardiologist and a
radiologist by background.

00:17:25.800 --> 00:17:27.630
And I'm here with Antoine Rosset,
who is here with me.

00:17:27.630 --> 00:17:29.890
He's a radiologist,
a board-certified radiologist

00:17:29.890 --> 00:17:31.480
from the University of Geneva.

00:17:31.580 --> 00:17:34.480
And he spent one year with me
at UCLA as a research fellow.

00:17:34.480 --> 00:17:37.940
And again, his clinical background helped
him develop that platform

00:17:37.940 --> 00:17:40.220
designed for clinicians.

00:17:40.220 --> 00:17:43.770
And I must say about five or six
other physicians have now joined

00:17:43.920 --> 00:17:47.310
from different universities,
have joined our group in open source,

00:17:47.310 --> 00:17:51.110
and have contributed with very
clinical-oriented application

00:17:51.110 --> 00:17:53.200
or extension of the software.

00:17:53.200 --> 00:17:55.870
It is already used by thousands of users.

00:17:55.870 --> 00:17:55.880
And it's a very good software.

00:17:55.880 --> 00:17:55.880
And it's a very good software.

00:17:55.880 --> 00:17:55.880
And it's a very good software.

00:17:55.880 --> 00:17:55.880
And it's a very good software.

00:17:55.880 --> 00:17:55.880
And it's a very good software.

00:17:55.880 --> 00:17:55.900
And it's a very good software.

00:17:55.900 --> 00:17:55.900
And it's a very good software.

00:17:55.900 --> 00:17:55.900
And it's a very good software.

00:17:55.900 --> 00:17:55.940
And it's a very good software.

00:17:55.940 --> 00:17:57.860
We've done a survey
in December last year,

00:17:57.920 --> 00:18:01.020
which brought back about
2,000 responses of people that

00:18:01.020 --> 00:18:02.540
are actually actively using.

00:18:02.560 --> 00:18:06.670
We have 10,000s of downloads,
but I would say probably now we estimate

00:18:06.670 --> 00:18:11.250
about 6,000 active centers in the world
that are using that software for either

00:18:11.250 --> 00:18:13.870
clinical or research applications.

00:18:13.990 --> 00:18:18.500
It is really intended to meet very
high-end demand and performance,

00:18:18.600 --> 00:18:21.460
because it is for the new
generation of medical imaging

00:18:21.460 --> 00:18:24.680
coming from scanner like CT scanner,
MRI scanner, ultrasound scanner.

00:18:24.680 --> 00:18:26.010
And it is really intended to meet
very high-end demand and performance,

00:18:26.010 --> 00:18:26.520
because it is for the new
generation of medical imaging

00:18:26.520 --> 00:18:29.860
coming from scanner like CT scanner,
MRI scanner, and so on.

00:18:29.860 --> 00:18:30.170
These machines nowadays generate
huge amount of data that are

00:18:30.170 --> 00:18:32.500
very hard to handle if you don't
have access to very high-end,

00:18:32.500 --> 00:18:34.270
very expensive workstations.

00:18:34.340 --> 00:18:37.880
And we wanted to fill the gap to provide
a tool that will provide other users

00:18:37.880 --> 00:18:41.680
that don't have access to these high-end
machines with something that they can

00:18:41.680 --> 00:18:45.540
use on their laptop or on their own
computer to visualize those images.

00:18:45.560 --> 00:18:48.160
And it is intended really
as a collaboration tool.

00:18:48.220 --> 00:18:49.440
It's very important in medicine.

00:18:49.440 --> 00:18:52.530
We know that one of the difficulty
we have is to convey information

00:18:52.530 --> 00:18:54.190
from one physician to another.

00:18:54.250 --> 00:18:55.820
And we think that will help us.

00:18:55.840 --> 00:18:55.840
That software will help us.

00:18:55.840 --> 00:18:55.840
And we have a lot of data
that we can use to do that.

00:18:55.840 --> 00:18:55.840
And we have a lot of data
that we can use to do that.

00:18:55.840 --> 00:18:55.840
And we have a lot of data
that we can use to do that.

00:18:55.860 --> 00:18:57.420
And we have a lot of data
that we can use to do that.

00:18:57.420 --> 00:18:58.860
And the software will help us to do that.

00:18:58.890 --> 00:19:00.550
The The challenges are
multiple in medicine,

00:19:00.590 --> 00:19:04.130
especially in medical imaging,
because we are now faced with huge

00:19:04.130 --> 00:19:06.570
amount of information that we have
to deal with for every patient.

00:19:06.570 --> 00:19:09.490
Every patient gets a lot of images,
a lot of studies.

00:19:09.560 --> 00:19:12.870
And we are, as physicians,
we have to go through a lot of

00:19:12.870 --> 00:19:17.910
effort in trying to interpret,
review, analyze those data.

00:19:17.970 --> 00:19:21.590
We also have a problem, as I mentioned,
communicating with other physicians,

00:19:21.640 --> 00:19:24.030
because we're dealing with a lot of data,
a lot of complex data

00:19:24.110 --> 00:19:25.820
that we have to share.

00:19:25.820 --> 00:19:28.790
And it's sometimes not very easy
in the usual environment that we

00:19:28.790 --> 00:19:31.750
currently have in our institution.

00:19:31.850 --> 00:19:33.490
Performance is very important.

00:19:33.490 --> 00:19:35.880
And advanced processing tools are
required to process those data.

00:19:35.880 --> 00:19:37.870
You will see that in the demo.

00:19:37.950 --> 00:19:41.340
And it's very critical to have the
performance and the speed to create

00:19:41.340 --> 00:19:45.440
things like dynamic 3D visualization,
rendering, sculpting,

00:19:45.440 --> 00:19:47.840
and we'll show you that in a minute.

00:19:47.840 --> 00:19:49.090
But most importantly,
I think we are under heavy

00:19:49.090 --> 00:19:52.310
pressure in healthcare today
to have very high performance,

00:19:52.310 --> 00:19:55.800
very high throughput.

00:19:55.800 --> 00:19:57.610
So we want to make it
easy for the users to do.

00:19:57.710 --> 00:20:00.800
We don't want users to be IT specialists
to be able to use the workstation.

00:20:00.800 --> 00:20:02.610
So that's where the Mac comes in.

00:20:02.710 --> 00:20:04.780
That's where the OS X user interface.

00:20:04.780 --> 00:20:08.930
That's where all the consumer market
tools that we integrate in our software

00:20:08.990 --> 00:20:13.210
makes life very easy for physicians,
that they can be very high performance,

00:20:13.230 --> 00:20:16.380
focus on what they do best,
which is diagnostic clinical

00:20:16.380 --> 00:20:19.880
diagnosis and clinical decisions
and don't have to learn all the

00:20:19.880 --> 00:20:22.090
complexity of the software behind it.

00:20:22.090 --> 00:20:24.830
So based on that,
we actually incorporated in our

00:20:24.830 --> 00:20:29.800
software as much as we can from the
existing tools that are provided

00:20:29.800 --> 00:20:32.190
in Tiger and OS X in general.

00:20:32.190 --> 00:20:34.780
For performance, of course,
we use things like Altevec

00:20:34.780 --> 00:20:39.430
and Quartz and other tools.

00:20:39.430 --> 00:20:42.760
OpenGL was very useful to do
very rapid image manipulations.

00:20:43.010 --> 00:20:47.220
Things like QuickTime 3D allows
us to generate 3D VR object

00:20:47.220 --> 00:20:55.760
that can be exported and
sent to referring physicians.

00:20:55.760 --> 00:20:55.760
Communication was a key here.

00:20:55.760 --> 00:20:55.760
So we integrated things like email.

00:20:55.760 --> 00:20:57.930
We integrated things like
exporting things to a iDisc so

00:20:57.930 --> 00:21:01.820
that physicians can use it as a
storage media to store their data.

00:21:01.820 --> 00:21:04.820
I know physicians that are using
it for being on call at home.

00:21:04.820 --> 00:21:07.740
They have their technologists
upload the images to their iDisc

00:21:07.740 --> 00:21:10.690
and they can download it and
just review it using OSIRIS.

00:21:10.690 --> 00:21:20.250
We incorporated iChat.

00:21:20.350 --> 00:21:25.740
We'll demo that in a minute.

00:21:25.740 --> 00:21:25.740
We incorporated things like
being able to export to your iPod

00:21:25.740 --> 00:21:25.740
and carry your data with you.

00:21:25.740 --> 00:21:25.740
40 gigabytes in your pocket is pretty
good for carrying several studies

00:21:25.740 --> 00:21:25.740
that you can't put on a CD or a DVD.

00:21:25.740 --> 00:21:25.740
And of course,
we integrated things like XGrid

00:21:25.740 --> 00:21:30.550
because performance is key here
to be able to expand and be able

00:21:30.550 --> 00:21:33.590
to process and analyze very,
very large sets of data.

00:21:33.590 --> 00:21:36.940
So I think the best is to move
on to the demo that Antoine

00:21:36.940 --> 00:21:38.430
is going to be giving here.

00:21:38.780 --> 00:21:42.680
And we'll show you some of the
features that this software does.

00:21:42.680 --> 00:21:44.610
Of course,
these are some of the components,

00:21:44.620 --> 00:21:46.360
open source component we have.

00:21:46.650 --> 00:21:48.990
Starting in the software,
we'll give you a database browser

00:21:49.030 --> 00:21:52.860
of the patient list and data list
that we have on the disc right now.

00:21:52.860 --> 00:21:55.240
Every patient can have multiple study.

00:21:55.240 --> 00:21:55.720
Every study can have multiple images.

00:21:55.720 --> 00:21:58.820
And these are hundreds and thousands
of images for each patient.

00:21:58.820 --> 00:22:00.960
In order to show these
series or sets of images,

00:22:00.960 --> 00:22:03.800
we have thumbnails that actually
dynamically browse very rapidly

00:22:03.800 --> 00:22:07.090
through those images so you can rapidly
see which set you want to look at.

00:22:07.090 --> 00:22:09.200
And you have a preview on
the lower corner that shows

00:22:09.200 --> 00:22:10.580
you a larger view of that.

00:22:10.580 --> 00:22:15.590
So the icons and the lower corner
allows the user to browse through a

00:22:15.590 --> 00:22:16.880
very large set of data very quickly.

00:22:16.880 --> 00:22:18.980
Then the next step is
to open those images.

00:22:18.980 --> 00:22:21.900
And you can open multiple sets
together at the same time.

00:22:21.930 --> 00:22:23.960
So here,
Antoine is going to show you two sets

00:22:23.990 --> 00:22:27.480
of data from different modalities that
were acquired in the same patient.

00:22:27.480 --> 00:22:28.920
The one in color is actually a PET.

00:22:28.920 --> 00:22:30.980
It's a functional metabolic image.

00:22:31.110 --> 00:22:33.420
And the one in black
and white is a CAT scan,

00:22:33.470 --> 00:22:34.480
a CT scan.

00:22:34.480 --> 00:22:37.380
These two sets are acquired
in the same orientation,

00:22:37.380 --> 00:22:39.430
so they can be fused together.

00:22:39.440 --> 00:22:41.260
And that's what we do more
and more now in medicine.

00:22:41.260 --> 00:22:43.600
We combine information
from different studies.

00:22:43.600 --> 00:22:46.900
To make it simple, we just drag and drop
one set over the other.

00:22:47.000 --> 00:22:49.590
It can be anything over anything,
and the physician will decide

00:22:49.590 --> 00:22:50.840
what he wants to overlay.

00:22:50.840 --> 00:22:53.560
And now we have both sets put
together and overlaid together.

00:22:53.630 --> 00:22:56.650
So now we can see that the hot
spot on the left is the tumor.

00:22:56.870 --> 00:23:00.420
And that's where the activity
of the tracer has been.

00:23:00.480 --> 00:23:03.560
But you can also see the anatomy
behind it and see what part of the

00:23:03.560 --> 00:23:05.700
bone are being involved and so forth.

00:23:05.700 --> 00:23:08.110
And most importantly,
one thing we wanted to have is that

00:23:08.110 --> 00:23:11.800
everything we do on that software can be
easily communicated to other physicians.

00:23:11.850 --> 00:23:16.380
You can export that by email,
but you can also start an iChat session.

00:23:16.410 --> 00:23:18.280
If you don't have the tool,
this is just to show you that

00:23:18.300 --> 00:23:19.480
the software can be customized.

00:23:19.480 --> 00:23:21.920
So there's a lot of tools that
don't have necessarily to be there.

00:23:22.000 --> 00:23:24.350
You can just drag and drop
them when you need it.

00:23:24.360 --> 00:23:27.520
So every user can have his
own customized environment.

00:23:27.520 --> 00:23:30.730
Starting an iChat session here,
Antoine is going to start a session.

00:23:30.730 --> 00:23:32.370
He's going to call me on a laptop.

00:23:32.370 --> 00:23:35.580
So pretend I'm here thousands
of miles away from Antoine,

00:23:35.580 --> 00:23:36.860
who's just here.

00:23:36.860 --> 00:23:40.120
And he's going to call me
to try to show me an image.

00:23:40.130 --> 00:23:42.220
And that's the beauty
of integrating iChat,

00:23:42.220 --> 00:23:44.140
because it's a very simple tool to use.

00:23:44.140 --> 00:23:46.810
He has me on his body list,
and he's calling me.

00:23:46.840 --> 00:23:49.610
And then all I have to do is
just accept or don't accept.

00:23:49.610 --> 00:23:51.300
If I'm busy, I just say no.

00:23:51.300 --> 00:23:55.640
And now I'm here accepting the session.

00:23:55.640 --> 00:23:56.640
And then I can see the results.

00:23:56.640 --> 00:23:59.880
And as soon as we get that,
we'll be both together.

00:23:59.930 --> 00:24:02.020
So he's going to be able
to show me the image.

00:24:02.020 --> 00:24:05.700
Now I have on my screen what
he has in small on his screen.

00:24:05.700 --> 00:24:06.700
And he can see me.

00:24:06.700 --> 00:24:10.610
And we can, with the new iChat,
we can have three or four physicians

00:24:10.670 --> 00:24:12.240
together conferencing over a case.

00:24:12.240 --> 00:24:12.940
This is great.

00:24:12.940 --> 00:24:16.680
I've been trying to do this for years,
where it was very specialized, dedicated,

00:24:16.680 --> 00:24:19.080
proprietary tools that
were very expensive.

00:24:19.080 --> 00:24:22.240
Now with iChat,
we have this performance and

00:24:22.240 --> 00:24:24.640
this facility practically free.

00:24:24.640 --> 00:24:27.220
You can use high-speed
internet and use iChat.

00:24:27.220 --> 00:24:27.970
And here you are.

00:24:28.060 --> 00:24:31.420
You can do medical consultation remotely,
what we call teleradiology

00:24:31.420 --> 00:24:32.350
or telemedicine.

00:24:32.430 --> 00:24:35.630
And that, again,
this is using consumer market tools to

00:24:35.880 --> 00:24:39.250
meet the demand of practice in medicine.

00:24:39.370 --> 00:24:42.570
Well, the software was basically
designed for doing 3D and 4D.

00:24:42.580 --> 00:24:45.840
So I'm going to show you
some of those features.

00:24:45.840 --> 00:24:47.710
And again,
we use a lot of open source component.

00:24:47.750 --> 00:24:49.000
That's the beauty of open source.

00:24:49.060 --> 00:24:52.220
There's a lot of open source
software out there to do 3D and

00:24:52.220 --> 00:24:54.560
3D rendering visualization tool.

00:24:54.560 --> 00:24:56.600
So we use that.

00:24:56.600 --> 00:24:57.850
And we integrated that into our software.

00:24:57.960 --> 00:24:58.770
Images come in slices.

00:24:58.770 --> 00:25:01.080
So basically,
that's what the raw data looks like.

00:25:01.080 --> 00:25:05.500
These are just cross-sectional slices
over a part of the body from a CAT scan.

00:25:05.500 --> 00:25:07.980
Now, the 3D rendering tool,
we have multiple of them.

00:25:07.980 --> 00:25:09.600
We're going to show you
one or two of those.

00:25:09.650 --> 00:25:12.220
We'll now allow to have a
different vision of that,

00:25:12.220 --> 00:25:14.940
which is much more useful,
especially if you try to visualize

00:25:14.950 --> 00:25:16.360
topology and orientation.

00:25:16.360 --> 00:25:17.680
Of course, this is a heart.

00:25:17.760 --> 00:25:20.480
Being a cardiologist,
I chose to start with a heart.

00:25:20.480 --> 00:25:23.980
Here you can see the whole chest
pretty much rendered in 3D.

00:25:24.020 --> 00:25:25.580
And these are rendered real-time.

00:25:25.580 --> 00:25:27.130
This is nothing pre-calculated.

00:25:27.130 --> 00:25:28.380
This is rendered on the fly.

00:25:28.430 --> 00:25:30.880
Antoine is basically
moving it up and down.

00:25:30.880 --> 00:25:33.860
And you see now we have the chest
and ribs in front of the heart.

00:25:33.860 --> 00:25:35.580
So what he's going to do is he's
going to just sculpt this out.

00:25:35.580 --> 00:25:36.570
He's going to do a little surgery.

00:25:36.770 --> 00:25:37.190
Don't worry.

00:25:37.190 --> 00:25:38.210
There's not going to be any bloods.

00:25:38.210 --> 00:25:39.120
It's not going to be bloody.

00:25:39.120 --> 00:25:41.490
It's just, you know,
like you do in Photoshop.

00:25:41.570 --> 00:25:44.680
Just take a region of interest,
cut through the 3D volume,

00:25:44.680 --> 00:25:48.320
and let the computer just recalculate
the rendering with that piece taken out.

00:25:48.320 --> 00:25:52.730
So this is how easy it is for
physicians to go and process the data.

00:25:52.730 --> 00:25:55.560
We want it to be very, very simple.

00:25:55.560 --> 00:25:57.480
Now we took the ribs
and the chest wall off,

00:25:57.570 --> 00:25:58.690
and we can see the heart.

00:25:58.710 --> 00:26:00.880
We can see the coronary arteries.

00:26:00.880 --> 00:26:01.690
We can zoom in and out.

00:26:01.690 --> 00:26:02.700
We can change the contrast.

00:26:02.780 --> 00:26:07.040
All these tools can be done in real time,
and it's very high performance.

00:26:12.500 --> 00:26:14.880
If you're not in the heart and
you don't understand the heart,

00:26:15.000 --> 00:26:16.540
well, we'll show you something
that you may understand.

00:26:16.540 --> 00:26:18.650
Again,
here are the cross-sectional images.

00:26:18.740 --> 00:26:21.150
Well, I'm not sure anybody will
really be able to pick up where

00:26:21.150 --> 00:26:22.380
exactly we are in the body.

00:26:22.380 --> 00:26:25.490
This looks like a piece
of head with eyes in it.

00:26:25.640 --> 00:26:30.290
Well,
we go for the 3D rendered image and...

00:26:31.300 --> 00:26:49.500
[Transcript missing]

00:26:52.320 --> 00:26:56.780
And last but not least, it's open source,
free, so please join the group.

00:26:56.790 --> 00:26:59.740
Anybody out there that has great
ideas about developing 3D or

00:26:59.740 --> 00:27:03.360
developing any image processing tools,
please go on the website,

00:27:03.380 --> 00:27:04.740
join the development team.

00:27:04.860 --> 00:27:06.640
This is going to be a great
platform for developing new

00:27:06.640 --> 00:27:08.200
applications for the future.

00:27:08.230 --> 00:27:12.430
And we also provided a way to do
plug-ins for those who want to

00:27:12.560 --> 00:27:14.340
keep their intellectual property.

00:27:14.340 --> 00:27:16.470
They can also have binary plug-ins.

00:27:16.600 --> 00:27:21.000
If you have the greatest segmentation or
rendering tool you want to put in there,

00:27:21.000 --> 00:27:24.140
you can still protect it or even
sell it as a separate plugin.

00:27:24.140 --> 00:27:25.960
Thank you very much.

00:27:38.500 --> 00:27:40.230
I really want to thank Dr.

00:27:40.230 --> 00:27:40.810
Ratib.

00:27:40.890 --> 00:27:47.200
You're witnessing an incredible
revolution in medical imaging here.

00:27:47.200 --> 00:27:48.900
I think it's great that it's open source.

00:27:48.900 --> 00:27:53.400
I think it's great that it takes
advantage of all the things in Tiger.

00:27:53.500 --> 00:27:56.750
I personally, and I'm sure Dr.

00:27:56.750 --> 00:28:03.500
Ratib remembers, when I did my,
I'm originally a medical doctor,

00:28:03.500 --> 00:28:08.500
when I did my training, you know,
just the medical images

00:28:08.500 --> 00:28:12.450
associated with one patient,
which were at that time physical,

00:28:12.500 --> 00:28:16.500
you know, chest X-rays and so forth,
just to carry them around.

00:28:16.500 --> 00:28:17.500
These things were heavy.

00:28:17.500 --> 00:28:20.890
These were big acetate things
with silver halide and there was,

00:28:20.890 --> 00:28:23.500
you know, it was the intern's job
to carry them around.

00:28:23.580 --> 00:28:27.200
Now they come through iChat and the
medical images associated with a

00:28:27.200 --> 00:28:31.450
single patient would literally fill
this stage if they had to be physical.

00:28:31.550 --> 00:28:35.360
So I think, I think this is an area,
again,

00:28:35.360 --> 00:28:41.210
I'll come back to storage and storage
of images like these and manipulation

00:28:41.210 --> 00:28:45.480
of them with high powered computing is
going to be the story of the future.

00:28:45.510 --> 00:28:48.860
Next.

00:28:49.140 --> 00:28:54.240
I'd like to introduce Rob Raga-Scofield.

00:28:54.280 --> 00:29:03.140
He is the guy behind Mathematica
from Wolfram Research on the Mac.

00:29:03.140 --> 00:29:07.870
He was hired out of college
to port Mathematica to,

00:29:08.140 --> 00:29:11.800
at that time,
what was going to be the newly

00:29:11.800 --> 00:29:14.870
introduced Mac OS X after Mac OS 9.

00:29:15.220 --> 00:29:20.100
And he has been associated with that
project ever since at Wolfram Research.

00:29:20.100 --> 00:29:30.050
So I'd like to ask Rob to come up here
and show us what's latest in Mathematica.

00:29:30.050 --> 00:29:30.050
Thanks.

00:29:40.170 --> 00:29:44.200
Can we have the slides, please?

00:29:44.330 --> 00:29:45.300
Hi.

00:29:45.430 --> 00:29:49.100
Thanks, Bud, and thanks, Apple,
for asking me here.

00:29:49.100 --> 00:29:52.950
My name is Rob Breguet-Scofield,
and I'm the primary Mac OS X developer at

00:29:52.950 --> 00:29:56.740
Wolfram Research working on Mathematica.

00:29:56.740 --> 00:30:03.280
Today I'm going to talk a little bit
about some of the Mac OS X features

00:30:03.760 --> 00:30:04.480
we utilize in Mathematica to
add value for our customers.

00:30:04.880 --> 00:30:07.930
So first of all,
I'll just give a brief overview

00:30:08.020 --> 00:30:11.800
of what Mathematica is,
in case you're not familiar with it.

00:30:11.800 --> 00:30:15.960
At the most basic level,
it is a calculator.

00:30:15.960 --> 00:30:19.260
It has symbolic, numeric,
and graphic visualization functions

00:30:19.560 --> 00:30:21.800
completely integrated into one package.

00:30:22.140 --> 00:30:25.580
Next, Mathematica is also a
programming language.

00:30:25.970 --> 00:30:31.660
It allows for functional programming,
object-oriented, and more traditional

00:30:31.660 --> 00:30:33.800
procedural styles of coding.

00:30:33.810 --> 00:30:37.600
And then,
with the Mathematica user interface,

00:30:37.630 --> 00:30:43.350
it has very extensive support for text,
graphics, and typeset formulas to

00:30:43.530 --> 00:30:48.000
be completely integrated,
which makes it a very capable

00:30:48.350 --> 00:30:50.620
technical word processor.

00:30:51.000 --> 00:30:54.710
So, Mathematica began its life
on the Macintosh in 1988.

00:30:54.960 --> 00:30:57.730
It had a great UI which
talked to a computation engine

00:30:57.730 --> 00:30:59.350
that ran in the background.

00:30:59.400 --> 00:31:05.130
This computation engine also ran
standalone on several UNIX platforms for

00:31:05.130 --> 00:31:08.960
a number of years with no user interface.

00:31:08.960 --> 00:31:12.080
Because of the more advanced
multitasking and memory management,

00:31:12.140 --> 00:31:15.900
Mathematica generally ran better
on these UNIX platforms than

00:31:15.900 --> 00:31:18.020
what it did on the Macintosh.

00:31:18.020 --> 00:31:23.140
For a number of years this was the case,
until Mac OS X came along.

00:31:23.270 --> 00:31:27.080
With the merger of the superior
Mac user interface with the

00:31:27.120 --> 00:31:31.140
more advanced UNIX Core OS,
it really created the ideal

00:31:31.150 --> 00:31:33.230
platform for Mathematica.

00:31:36.200 --> 00:31:41.160
So some of the things that our customers
are trying to accomplish and some of

00:31:41.170 --> 00:31:44.300
the challenges they face in doing so.

00:31:44.300 --> 00:31:46.980
First of all,
Mathematica allows you to run

00:31:46.980 --> 00:31:49.100
computations interactively.

00:31:49.100 --> 00:31:52.560
So you can examine the results
at each step along the way.

00:31:52.560 --> 00:31:56.410
This is very helpful, for example,
so you don't have to run a very

00:31:56.410 --> 00:32:00.120
lengthy computation only to find
out at the end that there was an

00:32:00.120 --> 00:32:02.080
error somewhere along the way.

00:32:02.080 --> 00:32:05.330
The interactive environment
helps a lot with that.

00:32:06.100 --> 00:32:10.580
Users want to utilize sophisticated
algorithms without having to

00:32:10.580 --> 00:32:14.500
rewrite everything themselves,
reinventing the wheel.

00:32:14.500 --> 00:32:21.110
So Mathematica includes what is the
most extensive set of algorithms of any

00:32:21.110 --> 00:32:24.800
software package in existence today.

00:32:24.800 --> 00:32:30.340
Users also want extreme performance,
and so if they have parallelizable tasks,

00:32:30.340 --> 00:32:35.780
they would like for those tasks to be
distributed across a grid of computers.

00:32:36.100 --> 00:32:37.880
So they complete much more quickly.

00:32:37.880 --> 00:32:41.660
And our product, Grid Mathematica,
allows certain types of operations

00:32:41.760 --> 00:32:43.740
to automatically be distributed.

00:32:46.100 --> 00:32:48.340
So users want to explore their data.

00:32:48.340 --> 00:32:51.770
They want to dig into it and they want
to transform it into something useful.

00:32:51.970 --> 00:32:55.390
And so Mathematica has a really
good intuitive environment for that.

00:32:55.460 --> 00:33:00.240
The interaction, interactivity is great
for that sort of thing.

00:33:00.400 --> 00:33:04.460
And the advanced pattern matching
in the mathematical language is

00:33:04.460 --> 00:33:06.880
very suitable for this type of task.

00:33:07.090 --> 00:33:10.210
Users want to work with very
large sets of data and they want

00:33:10.210 --> 00:33:13.260
to work with lots of different
sets of data at the same time.

00:33:13.260 --> 00:33:19.000
So the 64-bit optimizations that
are included with Mathematica 5.2,

00:33:19.010 --> 00:33:21.240
which is going to be
shipping in a few weeks,

00:33:21.360 --> 00:33:27.920
allow users to break the 4-gigabyte
barrier and work with massive datasets.

00:33:28.590 --> 00:33:30.860
And finally,
users want to visualize their data

00:33:31.000 --> 00:33:34.630
so they're not just looking at the
screen full of raw numbers and text.

00:33:34.790 --> 00:33:39.640
So Mathmatica includes extensive
2D and 3D plotting functions.

00:33:39.760 --> 00:33:42.230
And then finally,
users want to publish their

00:33:42.230 --> 00:33:44.230
results and make them look good.

00:33:44.240 --> 00:33:48.800
So Mathematica's top notch
mathematical typesetting and numerous

00:33:48.800 --> 00:33:54.600
export formats make it a breeze
to publish your results to the web,

00:33:54.600 --> 00:33:58.000
to print, or to anything else.

00:33:59.050 --> 00:34:04.500
So some of the technologies we take
advantage of in Mac OS X are shown here,

00:34:04.500 --> 00:34:07.180
and I'm going to give demos
of some of these things.

00:34:07.610 --> 00:34:14.580
As far as the--so we take advantage
of Apple's highly optimized linear

00:34:14.610 --> 00:34:19.500
algebra libraries that are part of
VecLib to make sure that numerical

00:34:19.570 --> 00:34:22.560
linear algebra is as fast as it can be.

00:34:22.690 --> 00:34:26.270
We have a great native
Acqua user interface.

00:34:26.470 --> 00:34:29.140
And I think the rest of the
things we're going to show,

00:34:29.140 --> 00:34:31.760
so I'll just get to that.

00:34:31.950 --> 00:34:34.340
And the first thing I want to
talk about is the 64-bit support

00:34:34.340 --> 00:34:36.940
that's in Mathematica 5.2.

00:34:36.940 --> 00:34:40.250
There are a couple areas
where 64-bit support provides

00:34:40.250 --> 00:34:45.750
advantages over 32-bit computers,
and one example is arbitrary

00:34:45.750 --> 00:34:48.380
precision mathematics.

00:34:48.500 --> 00:34:50.410
This is--

00:34:51.640 --> 00:34:56.390
Here we're calculating the digits of pi,
the first one million digits of pi,

00:34:56.390 --> 00:35:00.280
and doing so on the 64-bit version
of Mathematica is nearly twice

00:35:00.360 --> 00:35:04.550
as fast as what it is on the
32-bit version of Mathematica.

00:35:04.750 --> 00:35:08.310
And I'm going to show that right now,
so can we cut to demo one,

00:35:08.470 --> 00:35:10.820
demo machine one please?

00:35:16.750 --> 00:35:21.140
Great, so this is Mathematica 5.1
running in 32-bit mode.

00:35:21.140 --> 00:35:23.590
It's calculating the first
million digits of pi right now,

00:35:23.590 --> 00:35:25.460
and we're just going to
see how long that takes.

00:35:25.500 --> 00:35:29.200
And it's a little over nine seconds.

00:35:29.240 --> 00:35:32.980
And we're going to run the exact
same computation on Mathematica

00:35:32.980 --> 00:35:36.830
5.2 running in 64-bit mode,
and the result is going to

00:35:36.830 --> 00:35:40.690
come back much more quickly,
just a little over five seconds.

00:35:40.740 --> 00:35:44.650
So there's a tremendous performance
increase for the 64-bit version for

00:35:44.650 --> 00:35:46.700
this particular type of operation.

00:35:48.160 --> 00:35:55.910
The other advantage of 64-bit support is
being able to work with massive datasets

00:35:56.290 --> 00:35:58.700
or other memory-intensive computations.

00:35:58.780 --> 00:36:01.230
And this is something that I can't
do in real time because it takes

00:36:01.230 --> 00:36:02.180
a couple hours to complete.

00:36:02.270 --> 00:36:07.010
But this is a simulation of a
tsunami that is going to start

00:36:07.110 --> 00:36:09.100
in the middle of the screen here.

00:36:09.170 --> 00:36:15.170
And the unique property of tsunamis
is that the energy they carry,

00:36:15.660 --> 00:36:18.360
moves along all the way down
to the bottom of the sea floor,

00:36:18.360 --> 00:36:21.440
that means that variations
in the sea floor,

00:36:21.440 --> 00:36:24.670
like these mountains in this example,
can cause disturbances all the

00:36:24.760 --> 00:36:26.300
way back up to the surface.

00:36:26.300 --> 00:36:28.020
And that is what this
simulation is modeling.

00:36:28.020 --> 00:36:34.670
So when we run this on a 32-bit computer,
we had to actually back the resolution

00:36:34.760 --> 00:36:38.780
off a little bit so that the simulation
could complete in the 4-gigabyte

00:36:38.790 --> 00:36:40.750
address space of the application.

00:36:40.780 --> 00:36:43.340
And as you can see,
there are some artifacts

00:36:43.340 --> 00:36:44.380
that show up here.

00:36:45.210 --> 00:36:47.430
And this isn't because
the calculation's wrong.

00:36:47.440 --> 00:36:49.810
It's just because it's
run at a lower resolution,

00:36:49.820 --> 00:36:55.560
which causes slight variations to
be kind of exaggerated at times.

00:36:55.560 --> 00:36:59.210
So it obviously doesn't look correct.

00:36:59.320 --> 00:37:03.200
So we can do better on a 64-bit system.

00:37:05.100 --> 00:37:09.930
We increased the resolution and
we rerun the same simulation

00:37:10.470 --> 00:37:13.180
using about 6 gigabytes of memory.

00:37:13.180 --> 00:37:15.840
And as you can see,
all the artifacts disappear.

00:37:15.890 --> 00:37:19.330
And we get pretty much
what we would expect.

00:37:21.100 --> 00:37:27.370
So that is another advantage of
64-bit systems over 32-bit systems.

00:37:28.150 --> 00:37:33.430
As you saw in the keynote the other day,
one of the features we're taking

00:37:33.430 --> 00:37:38.760
advantage of in a future version
of Mathematica is OpenGL for

00:37:38.760 --> 00:37:41.280
interactive 3D graphics.

00:37:41.860 --> 00:37:45.240
You know, this is pretty neat,
but lots of applications

00:37:45.240 --> 00:37:47.040
can do things like that.

00:37:47.080 --> 00:37:51.590
But because Mathmatica is a
completely general system,

00:37:51.590 --> 00:37:51.590
we handle

00:37:51.780 --> 00:37:54.940
Very complicated things as well,
and lots of times more specialized

00:37:55.300 --> 00:38:02.690
packages fail when they get more
complicated inputs such as this here.

00:38:02.860 --> 00:38:05.900
So that is OpenGL.

00:38:07.960 --> 00:38:12.070
Next is Java.

00:38:12.080 --> 00:38:15.720
We have a Java connection technology
built into Mathematica called JLINK,

00:38:15.850 --> 00:38:18.340
and on top of that we have
a package called GUI Kit,

00:38:18.390 --> 00:38:23.550
which enables you to build
Java interfaces that basically utilize

00:38:23.620 --> 00:38:25.760
Mathematica functionality from within it.

00:38:26.050 --> 00:38:29.720
And what this is, is a

00:38:32.290 --> 00:38:37.060
An interface that allows you
to plot different starting

00:38:37.060 --> 00:38:40.650
points and adjust parameters,
and then it will solve numerically

00:38:40.650 --> 00:38:45.280
differential equations based
on the parameters that you set.

00:38:45.430 --> 00:38:49.790
And this is all written in Mathematica,
utilizing the Java environment.

00:38:54.150 --> 00:38:57.280
And just a couple other quick things.

00:38:57.330 --> 00:39:02.280
Mathematica includes with it a library
called MathLink and an API that

00:39:02.930 --> 00:39:08.980
allows you to call into Mathematica
from external applications or call

00:39:08.980 --> 00:39:12.050
external applications from Mathematica.

00:39:12.340 --> 00:39:15.190
And so what we have here is
an external application that

00:39:15.190 --> 00:39:16.350
is calling into Mathematica.

00:39:16.360 --> 00:39:21.550
It's a simple automator plug-in
that will do one of two things.

00:39:21.560 --> 00:39:26.860
It will either just evaluate some
text as part of an automator action.

00:39:28.470 --> 00:39:35.860
The result of the action will be the
actual evaluated version of that text.

00:39:35.860 --> 00:39:38.730
Or you can use it to basically
process the input text,

00:39:38.810 --> 00:39:41.190
calling mathematical functions on it.

00:39:41.330 --> 00:39:45.290
And so I'll run another example here.

00:39:49.170 --> 00:39:54.320
And what this code here I have is going
to do is it basically capitalizes the

00:39:54.320 --> 00:39:59.520
first letter of each of the words.

00:39:59.600 --> 00:40:02.220
So that is calling into Mathematica.

00:40:02.290 --> 00:40:05.380
And one more example of that,
just because it's interesting,

00:40:05.380 --> 00:40:09.020
is that there's also a service
that we have that you can download

00:40:09.020 --> 00:40:13.020
from our website that you can use
from any services-aware application

00:40:13.020 --> 00:40:17.100
that allows you to basically
evaluate the text right in place.

00:40:17.140 --> 00:40:19.130
And there's even a
keyboard shortcut for it.

00:40:19.330 --> 00:40:24.300
So you can immediately
evaluate Mathematica commands

00:40:24.300 --> 00:40:29.410
from any application to text,
or there's a version that will

00:40:29.650 --> 00:40:31.400
create a graphic as a result.

00:40:37.160 --> 00:40:40.660
And the one last thing I'll mention
here is we have a Spotlight plugin

00:40:40.660 --> 00:40:42.900
that knows how to read our documents.

00:40:42.900 --> 00:40:50.210
So you can quickly find text inside
of your Mathematica notebook files.

00:40:52.170 --> 00:40:55.980
The spotlight will catch up with me.

00:40:55.980 --> 00:41:02.340
So here are some of the Mathematica
files that include the pot3d command.

00:41:02.340 --> 00:41:09.180
But it also, because we include different
types of metadata in our files,

00:41:09.240 --> 00:41:12.680
you can actually do advanced searches
on different types of metadata.

00:41:12.910 --> 00:41:15.910
So if you were working with a certain
file and you don't remember where

00:41:15.910 --> 00:41:20.350
it is or what exactly it was doing,
but you just remember it

00:41:20.350 --> 00:41:22.050
had a lot of graphics in it,

00:41:22.310 --> 00:41:26.210
You can actually search for all
the notebook files that have,

00:41:26.240 --> 00:41:29.230
for example,
more than 50 graphics in them.

00:41:29.780 --> 00:41:33.150
So you can quickly find
what you're looking for.

00:41:33.270 --> 00:41:37.110
And with that,
I will give it back to Bud.

00:41:44.080 --> 00:41:45.000
Thanks, Rob.

00:41:45.000 --> 00:41:49.230
Well,
I think that's a really great example,

00:41:49.350 --> 00:41:53.360
as are these other examples,
of what you can do when you

00:41:53.360 --> 00:41:57.680
take advantage of the unique
capabilities of Mac OS X,

00:41:57.680 --> 00:42:00.000
and especially Mac OS X Tiger.

00:42:00.170 --> 00:42:04.870
And I just want to stress one of them,
which is the Tsunami demo.

00:42:05.290 --> 00:42:08.750
That is the perfect example
of how to take advantage of

00:42:08.830 --> 00:42:13.000
the 64-bit address space,
because, as you probably know,

00:42:13.000 --> 00:42:18.180
the front end of the application
is still running in 32 bits,

00:42:18.280 --> 00:42:20.970
the Cocoa or the Carbon front end.

00:42:21.010 --> 00:42:23.100
But the back end,
the computational back end,

00:42:23.100 --> 00:42:29.170
where you're using the full 6 gigabytes,
so that you don't have those artifacts,

00:42:29.170 --> 00:42:34.570
that runs on top of all of our
new 64-bit APIs that take 64-bit

00:42:34.570 --> 00:42:36.790
pointers in Mac OS X Tiger.

00:42:36.790 --> 00:42:42.000
So that's the canonical example
of the best way to take advantage

00:42:42.000 --> 00:42:43.000
of that full address space.

00:42:43.000 --> 00:42:47.360
And you see the advantage in
terms of those artifacts are gone,

00:42:47.360 --> 00:42:53.000
because you can finally do that tsunami
simulation at high enough resolution.

00:42:55.530 --> 00:42:59.160
Next, it's my pleasure to introduce Dr.

00:42:59.340 --> 00:43:02.580
Dean Doudger of Doudger Research.

00:43:02.580 --> 00:43:03.200
And Dr.

00:43:03.200 --> 00:43:05.030
Doudger has a Ph.D.

00:43:05.030 --> 00:43:09.760
in physics from UCLA,
where he created the very

00:43:09.760 --> 00:43:13.400
first Mac cluster in 1998.

00:43:13.540 --> 00:43:17.120
He's also the award-winning
author of Adam in a Box and

00:43:17.120 --> 00:43:19.490
Fresnel Diffraction Explorer.

00:43:19.630 --> 00:43:22.200
And this I didn't know,
he co-authored the original

00:43:22.200 --> 00:43:25.400
award-winning Kai's Power Tools,
so that's pretty cool.

00:43:25.400 --> 00:43:28.830
And today his pursuits
include computational physics,

00:43:28.830 --> 00:43:33.190
particularly dynamics of complex
quantum systems and high-performance

00:43:33.300 --> 00:43:35.380
computing and visualization.

00:43:35.380 --> 00:43:41.340
So welcome and hand it over to you.

00:43:43.410 --> 00:43:45.310
Thank you very much.

00:43:47.630 --> 00:43:52.100
Well, thank you very much,
and thank you all for coming.

00:43:52.100 --> 00:43:56.960
I'm very glad to see you all here today,
and thanks to the kind people at Apple to

00:43:56.960 --> 00:44:05.410
be able to speak to you today about
Pooch and how you can use it to build

00:44:05.410 --> 00:44:05.410
plug-and-play clusters on Mac OS X.

00:44:05.880 --> 00:44:11.200
So like first to be able to jump into
this by describing what is Pooch is

00:44:11.200 --> 00:44:15.100
that basically Pooch is a piece of
software that manages clusters and

00:44:15.100 --> 00:44:19.100
constructs them out of Macintoshes that
are connected together over a network,

00:44:19.230 --> 00:44:21.460
over any kind of TCP/IP network.

00:44:21.490 --> 00:44:24.300
But one of the things that
it supports is essentially

00:44:24.310 --> 00:44:26.700
supercomputer compatible calculations.

00:44:26.790 --> 00:44:29.060
And so that you can take your
codes that you ran on your,

00:44:29.060 --> 00:44:32.050
say you were intending to run or
you did run on your supercomputer,

00:44:32.050 --> 00:44:35.460
say at the major supercomputing
centers across the country,

00:44:35.530 --> 00:44:39.550
and instead run them on the Macintosh
or optimize or debug them there

00:44:39.550 --> 00:44:41.510
and develop them there as well.

00:44:41.790 --> 00:44:45.650
But one of the key features to
be able to enable that kind of

00:44:45.660 --> 00:44:50.770
capability is that it supports MPI,
also called message passing interface.

00:44:50.890 --> 00:44:54.880
This is,
Pooch was the first software to be able

00:44:55.160 --> 00:45:01.840
to support MPI on Mac OS X back in 2001,
and it supports actually five

00:45:01.840 --> 00:45:05.200
different MPI implementations now,
but also supports this kind of

00:45:05.210 --> 00:45:08.700
supercomputing behavior such as queuing,
launching these kinds of parallel jobs,

00:45:08.710 --> 00:45:11.510
keeping track of them,
keeping track of their CPU time,

00:45:11.590 --> 00:45:16.100
and makes them accessible to
users so that you can make

00:45:16.120 --> 00:45:19.140
the clusters plug and play,
and you can go ahead

00:45:19.140 --> 00:45:21.850
and use your software,
use your application,

00:45:21.850 --> 00:45:25.120
and go ahead and accomplish
your work as you need to.

00:45:25.120 --> 00:45:29.380
The kinds of users that we
have are from all disciplines

00:45:29.380 --> 00:45:34.780
such as physics and chemistry,
as well as mathematics, biology,

00:45:34.780 --> 00:45:34.780
and across the board.

00:45:34.780 --> 00:45:37.890
And we have a lot of customers
across all the different kinds of

00:45:37.930 --> 00:45:41.470
customers such as in academia and
government and industry as well.

00:45:42.340 --> 00:45:45.220
So, to give you an idea of
what we did to essentially

00:45:45.340 --> 00:45:48.850
reinvent the cluster computer,
this is how we support

00:45:48.850 --> 00:45:53.050
five different MPIs,
open source as well as commercial MPIs,

00:45:53.260 --> 00:45:56.880
but we also dynamically manage the
cluster and we also use Bonjour as well

00:45:56.880 --> 00:46:02.110
as Service Location Protocol to be able
to discover the nodes out on the cluster,

00:46:02.120 --> 00:46:05.500
discover the computational resources
and make use of them on the fly.

00:46:05.500 --> 00:46:09.880
It also supports a number of diagnostics
for development optimization so

00:46:09.880 --> 00:46:12.540
you can make it run really well
on the Mac cluster or run that

00:46:12.690 --> 00:46:16.100
much better on some other hardware,
so you can mix and match and actually

00:46:16.100 --> 00:46:18.870
have the Mac cluster complement
some of the Big Iron if you don't

00:46:18.940 --> 00:46:20.650
have a large system yourself.

00:46:20.740 --> 00:46:25.150
So, the idea of this build is to be able
to bring high performance computing

00:46:25.150 --> 00:46:29.270
to the mainstream user and do it in
a way that's completely independent

00:46:29.280 --> 00:46:34.540
of any kind of shared storage or
remote command line login or mucking

00:46:34.540 --> 00:46:35.400
around with any parts of the system.

00:46:35.400 --> 00:46:37.770
So,
you can focus on getting your work done

00:46:37.770 --> 00:46:42.040
and so that's really the point of this
is that it's the lowest barrier to answer

00:46:42.110 --> 00:46:46.260
that we're familiar with to be able to
accomplish this kind of work and so it's

00:46:46.270 --> 00:46:50.320
a result in the savings of time and money
for users like myself as well as for

00:46:50.350 --> 00:46:53.110
everyone else that I know who uses Pooch.

00:46:53.120 --> 00:46:57.260
So, and so, which is the whole point of
cluster computing in the first

00:46:57.260 --> 00:47:01.370
place is to be able to provide
computational resources for users.

00:47:01.380 --> 00:47:05.140
So, some of the challenges of high
performance computing clusters.

00:47:05.300 --> 00:47:06.190
So,
one of the challenges of high performance

00:47:06.190 --> 00:47:07.440
computing clusters is really is
meant for problems that are simply

00:47:07.490 --> 00:47:08.330
too large to solve in one machine.

00:47:08.370 --> 00:47:11.000
Either it simply takes too
long or you simply can't fit it

00:47:11.000 --> 00:47:12.600
within the RAM in one machine.

00:47:12.750 --> 00:47:15.320
But other cluster types,
previous cluster types are very fragile

00:47:15.380 --> 00:47:19.980
and very hard to use because they
rely on being able to configure things

00:47:19.980 --> 00:47:23.620
low level in the operating system
to being able and so requires a lot

00:47:23.620 --> 00:47:26.370
of technical expertise to be able
to understand what to do and what

00:47:26.370 --> 00:47:31.320
not to do when configuring and setting
up these kinds of low level features.

00:47:31.320 --> 00:47:34.350
And so,
because the nature of the design of the

00:47:34.350 --> 00:47:35.200
way these things are built is so complex,
it's really hard to get the right

00:47:35.200 --> 00:47:35.200
kind of software that's able to do it.

00:47:35.200 --> 00:47:37.970
things are put together to the
previous cluster types that the

00:47:37.970 --> 00:47:42.150
users become responsible for solving
any kinds of incompatibilities

00:47:42.150 --> 00:47:44.600
or any other bugs in the problem.

00:47:44.600 --> 00:47:47.150
So one of the ways we try to solve
that is to be able to take advantage

00:47:47.150 --> 00:47:52.660
of a lot of the things that are
in desktop computing to be able to

00:47:52.970 --> 00:47:57.650
bridge the cluster to you as the user,
let's say.

00:47:57.650 --> 00:48:01.420
So for example, we support MPI,
so we support the supercomputer,

00:48:01.440 --> 00:48:04.560
the same calculations that you
would run on a supercomputer,

00:48:04.560 --> 00:48:08.300
as well as we use Bonjour to be able
to discover dynamically the health and

00:48:08.310 --> 00:48:12.020
status of the nodes out there on the
cluster so we can dynamically respond

00:48:12.020 --> 00:48:14.920
to any problems that might occur,
as well as we provide, say,

00:48:14.930 --> 00:48:18.140
AppleScript and Automator support to
be able to make it an easier way to

00:48:18.140 --> 00:48:21.100
be able to launch jobs on the cluster,
as well as different kinds

00:48:21.120 --> 00:48:24.130
of windows into the cluster,
such as Spotlight and Dashboard,

00:48:24.130 --> 00:48:26.430
and other ways to be able
to access the cluster and

00:48:26.490 --> 00:48:28.260
combine these things together.

00:48:28.330 --> 00:48:32.170
So if you wanted to do it yourself,
you know, you know of various books to

00:48:32.240 --> 00:48:34.720
be able to build clusters,
really our book would be called

00:48:34.740 --> 00:48:39.950
"The Mac Cluster Recipe." You take
a bunch of Macs or XSERVs,

00:48:40.020 --> 00:48:44.180
G4s or G5s,
get an Ethernet switch and some cables,

00:48:44.230 --> 00:48:48.010
and the directions are simply to
connect the hardware together,

00:48:48.010 --> 00:48:50.400
download Pooch,
and go ahead and install it.

00:48:50.400 --> 00:48:53.080
And it literally takes
seconds per machine to be

00:48:53.080 --> 00:48:54.960
able to install the software.

00:48:54.960 --> 00:48:59.090
So what I'd like to be able to provide
for you today is a demonstration,

00:48:59.090 --> 00:49:01.470
a quick demonstration, we hope.

00:49:01.470 --> 00:49:04.450
So I'll switch to demo number three.

00:49:04.480 --> 00:49:11.390
Let's see.

00:49:11.410 --> 00:49:11.410
Let me just get that going.

00:49:15.710 --> 00:49:18.700
Okay, so the first thing I'd like
to be able to give you,

00:49:18.700 --> 00:49:21.710
to be able to show you,
to give you an idea of, say,

00:49:21.710 --> 00:49:24.780
a numerically intensive application
that takes a little while and sort

00:49:24.940 --> 00:49:28.360
of stresses out the processor,
but this is a Z to the

00:49:28.440 --> 00:49:31.860
Z fourth iteration fractal,
a little different than

00:49:31.960 --> 00:49:35.180
the Mandelbrot fractal,
that produces a nice, you know,

00:49:35.280 --> 00:49:38.350
graphical result,
and it achieves about five

00:49:38.500 --> 00:49:43.460
gigaflops on my one power book here,
1.5 gigahertz G4 in this case,

00:49:43.460 --> 00:49:44.960
and so that's all well and good.

00:49:45.140 --> 00:49:47.980
And if I wanted to make it go faster,
well, if I had a second processor,

00:49:47.980 --> 00:49:50.140
it can make use of multitasking,
but what if I want to get

00:49:50.140 --> 00:49:51.060
beyond a factor of two?

00:49:51.060 --> 00:49:52.670
That's where you need
to get outside the box,

00:49:52.670 --> 00:49:54.420
and that's where parallel
computing comes in.

00:49:54.420 --> 00:49:55.390
That's where Pooch comes in.

00:49:55.400 --> 00:49:59.120
So to be able to install Pooch,
this is how long it takes.

00:50:02.510 --> 00:50:04.000
And there it is.

00:50:04.020 --> 00:50:05.500
So that's how long it
takes to install Pooch,

00:50:05.500 --> 00:50:08.560
and you do that on each
node that's available.

00:50:08.600 --> 00:50:11.220
And so the way actually,
let's go into it this way.

00:50:11.290 --> 00:50:15.980
I can use Spotlight actually to,
if I know that I queued up

00:50:15.980 --> 00:50:19.200
some jobs a little while ago,
and I can have it,

00:50:19.200 --> 00:50:23.030
we have a Spotlight plugin
that exposes the queuing system

00:50:23.030 --> 00:50:26.370
inside Pooch to Spotlight,
so you can go ahead and search

00:50:26.490 --> 00:50:28.200
for other jobs that are out there.

00:50:28.200 --> 00:50:32.280
So I can pull up the,
what the nodes of the job that's there,

00:50:32.280 --> 00:50:35.280
but let's edit this to be able to
do this particular application.

00:50:35.280 --> 00:50:39.100
So I can remove that,
go ahead and drag in the fractal program,

00:50:39.100 --> 00:50:42.210
and let's remove these
and select some nodes.

00:50:42.220 --> 00:50:44.260
I can open up,
I can select some nodes and I can see,

00:50:44.340 --> 00:50:46.770
oh, I've discovered a couple
of other machines here.

00:50:46.840 --> 00:50:49.300
There's a couple more G5s
right behind the scenes here,

00:50:49.490 --> 00:50:52.460
but I can see that they're
actually reporting up as busy here.

00:50:52.560 --> 00:50:56.860
Oh, actually, let's have a look at what
kinds of processors they are.

00:50:56.860 --> 00:51:00.330
I can see that dual processor G5s,
they have a, you know, 2.7 G5.

00:51:00.440 --> 00:51:03.100
2.7 gigahertz.

00:51:03.100 --> 00:51:05.320
And also,
they actually use this information to

00:51:05.400 --> 00:51:07.100
be able to rate each one of these units.

00:51:07.240 --> 00:51:10.820
But of course, the running is busy,
so I can actually see, gee, you know,

00:51:10.820 --> 00:51:11.820
what is it running?

00:51:11.820 --> 00:51:13.340
I can see, okay,
there's a running job there,

00:51:13.340 --> 00:51:16.930
so I want to go ahead and like
say kill that job that was there,

00:51:16.930 --> 00:51:20.170
and it goes ahead and so
as soon as I do a refresh,

00:51:20.170 --> 00:51:24.110
I can go ahead and see the,
what's there to be able

00:51:24.130 --> 00:51:26.400
to make use of the nodes.

00:51:26.400 --> 00:51:26.720
So let me go ahead and, oh, yeah.

00:51:26.720 --> 00:51:27.140
So it just takes a little
while to be able to,

00:51:27.140 --> 00:51:28.380
you know, get the nodes.

00:51:28.380 --> 00:51:28.380
So I can go ahead and, oh, yeah.

00:51:28.380 --> 00:51:28.510
So it just takes a little
while to be able to,

00:51:28.510 --> 00:51:29.380
you know, get the nodes.

00:51:29.380 --> 00:51:29.380
So I can go ahead and, oh, yeah.

00:51:29.380 --> 00:51:29.510
So it just takes a little
while to be able to,

00:51:29.510 --> 00:51:29.810
you know, get the nodes.

00:51:29.810 --> 00:51:33.380
So it just takes a little while to be
able to submit the data that's there.

00:51:33.390 --> 00:51:33.680
Okay.

00:51:33.870 --> 00:51:36.880
So I can see that it rates
each one of these nodes,

00:51:36.920 --> 00:51:38.700
and I see that it gives the
G5s a pretty high rating,

00:51:38.700 --> 00:51:41.760
so let me go ahead and select
some of those and bring those in.

00:51:41.810 --> 00:51:44.000
Some of the other
features that you can add,

00:51:44.000 --> 00:51:46.300
you can delay the launch
until some later time of day,

00:51:46.300 --> 00:51:49.590
so, or say at a later time,
so you can use a colleague's machine

00:51:49.590 --> 00:51:51.990
after she's gone home from work.

00:51:52.010 --> 00:51:55.120
You can,
it supports five different MPIs as

00:51:55.120 --> 00:51:58.340
well as grid type applications,
compute jobs and so forth.

00:51:58.340 --> 00:52:01.760
But to be able to launch the job,
I just click on launch job.

00:52:01.760 --> 00:52:04.100
So this copies the executable
out to the other machines.

00:52:04.100 --> 00:52:08.420
You might have heard that that was
pooch barking to be able to tell

00:52:08.420 --> 00:52:10.780
you that it launched correctly.

00:52:10.790 --> 00:52:12.670
And so when it passes
control to the executable,

00:52:12.670 --> 00:52:14.420
you can see that it
went quite a bit faster,

00:52:14.420 --> 00:52:16.520
something like 26 giga-flops or so.

00:52:16.520 --> 00:52:18.550
So, you know,
all this is all well and good,

00:52:18.650 --> 00:52:19.940
but what if that wasn't enough?

00:52:19.980 --> 00:52:27.640
So I can go ahead and pull in some more
nodes by essentially extending Bonjour.

00:52:27.640 --> 00:52:30.880
What I can do is, you know,
I can go ahead and Say select,

00:52:30.880 --> 00:52:32.570
let me see.

00:52:32.910 --> 00:52:36.200
That's right,
select some machines over at UCLA.

00:52:36.200 --> 00:52:38.610
So this is something like
300 or 400 miles away or so.

00:52:38.760 --> 00:52:41.340
I can go ahead and pull in
some of the machines that are

00:52:41.340 --> 00:52:43.560
there and make use of those.

00:52:43.560 --> 00:52:45.040
So let's see what we can do.

00:52:45.090 --> 00:52:48.560
I can see that we have
some G5s over there.

00:52:48.740 --> 00:52:51.820
And to be able to get
through the firewall,

00:52:51.820 --> 00:52:55.000
I need to use a particular port number.

00:52:55.000 --> 00:52:55.000
Yeah, there we go.

00:52:57.520 --> 00:52:59.640
And let's see.

00:52:59.640 --> 00:53:01.400
So it's now actually
copying that executable.

00:53:01.400 --> 00:53:02.900
Whoops.

00:53:03.040 --> 00:53:08.790
It should be copying that
executable over to UCLA.

00:53:08.790 --> 00:53:08.790
And...

00:53:12.140 --> 00:53:14.060
One of the other things that
I can do here is actually sort

00:53:14.060 --> 00:53:17.810
of an iTunes interface that I can
select the local network from

00:53:17.810 --> 00:53:21.830
essentially our node playlist on
the left side of the interface.

00:53:22.080 --> 00:53:25.020
And if I make use of that.

00:53:25.910 --> 00:53:26.340
There we go.

00:53:26.340 --> 00:53:30.560
It's now combining the nodes
that are here with the ones

00:53:30.560 --> 00:53:34.120
at UCLA and asking the,
and so it's combining,

00:53:34.120 --> 00:53:37.600
this is a 15-processor cluster
here that's distributed

00:53:37.600 --> 00:53:39.570
over about 400 miles or so,
and I get something

00:53:39.640 --> 00:53:40.870
like 88 gigaflops or so.

00:53:40.880 --> 00:53:43.360
So this is substantially
more improvements.

00:53:43.360 --> 00:53:46.080
And so my distance record right
now is like about from Munich,

00:53:46.080 --> 00:53:48.690
Germany,
about 6,000 miles away back to UCLA,

00:53:48.700 --> 00:53:50.660
combining these kinds of nodes together.

00:53:52.000 --> 00:53:56.640
So just to be able to show you that this
not only works not just for fractals,

00:53:56.640 --> 00:53:59.260
what I'll do is pull in a physics code.

00:54:00.710 --> 00:54:02.760
Let's see,
actually let me give you an idea

00:54:02.760 --> 00:54:06.350
of what this looks like when
we run just a single processor.

00:54:09.000 --> 00:54:11.000
There you go.

00:54:11.000 --> 00:54:14.800
So this is actually a million particles,
a million charged particles all

00:54:14.800 --> 00:54:17.590
interacting electrostatically
and showing the electric

00:54:17.600 --> 00:54:19.500
potential as a function of time.

00:54:19.500 --> 00:54:23.000
And so it's from one frame to the
next frame to the next frame or so.

00:54:23.200 --> 00:54:27.400
So this is roughly two-ish seconds
or so to be able to run this.

00:54:27.430 --> 00:54:32.940
And we can see that it's running a
little bit slower than we'd like.

00:54:32.940 --> 00:54:36.710
So let me go ahead and quit out of this.

00:54:41.600 --> 00:54:48.660
So if I drag and drop that
into Pooch and go ahead and

00:54:48.660 --> 00:54:52.410
select my little cluster here.

00:55:04.800 --> 00:55:05.070
There we go.

00:55:05.100 --> 00:55:05.620
Okay.

00:55:05.620 --> 00:55:10.760
So actually the computations
are now being done on the

00:55:10.860 --> 00:55:12.780
four processors that are here.

00:55:12.780 --> 00:55:14.520
And so one, two, three, four.

00:55:14.520 --> 00:55:17.720
So it's actually going, you know,
you can sort of roughly

00:55:17.720 --> 00:55:19.330
about four times as fast.

00:55:19.340 --> 00:55:22.680
And we can see that actually the
live message passing pattern is on

00:55:22.680 --> 00:55:24.670
the lower right of the screen here.

00:55:24.680 --> 00:55:27.920
It's showing the live message passing
pattern as it goes as a function of time,

00:55:27.920 --> 00:55:30.120
as well as a histogram of
the number of messages being

00:55:30.120 --> 00:55:31.500
sent and received as it goes.

00:55:32.440 --> 00:55:35.510
So while that's running,
what I can also show you is one last

00:55:35.510 --> 00:55:37.880
thing is the features in the automator.

00:55:40.490 --> 00:55:42.980
Let's see,
so definitely a computationally intensive

00:55:42.980 --> 00:55:46.160
thing to be able to take up what's here.

00:55:46.210 --> 00:55:54.560
I can actually say use Automator to be
able to have the finder select some items

00:55:54.940 --> 00:55:58.720
and then combine that with a number of
different pooch actions that are here.

00:55:58.720 --> 00:56:01.490
So I can have it say
launch an executable,

00:56:01.490 --> 00:56:07.880
like choose an executable let's say,
and say launch the executable on a four

00:56:07.880 --> 00:56:12.520
node cluster as well as say on a single
task or get nodes of a pooch cluster.

00:56:12.520 --> 00:56:16.520
In this case I'll choose distribute
single tasks onto a pooch cluster.

00:56:16.520 --> 00:56:20.000
And if I run this,
I can go ahead and say select

00:56:20.000 --> 00:56:23.250
a particular executable,
something simple,

00:56:23.250 --> 00:56:27.490
and this is like Automator is
actually going ahead and submitting an

00:56:27.500 --> 00:56:32.020
executable as single node tasks into
the pooch queuing system that pooch

00:56:32.140 --> 00:56:37.510
will later launch on the local nodes
that are here after the other job runs.

00:56:37.520 --> 00:56:38.890
hands.

00:56:40.930 --> 00:56:46.580
So that completed the
queuing of the system.

00:56:46.580 --> 00:56:49.480
Oh, and one other thing that's
also in here is that we also

00:56:49.780 --> 00:56:51.610
feature a dashboard widget.

00:56:51.730 --> 00:56:55.480
So we're actually able to have the
dashboard be a window into the cluster.

00:56:55.480 --> 00:57:00.520
We can see that it shows the history
of the job activity as a function of

00:57:00.820 --> 00:57:02.900
time over the last couple of days.

00:57:02.980 --> 00:57:05.020
And it also shows the cluster capacity.

00:57:05.020 --> 00:57:07.500
So actually,
it estimates that I'm using pretty

00:57:07.500 --> 00:57:10.980
much all of the cluster capacity of
the local nodes that it finds here,

00:57:11.000 --> 00:57:14.640
and also lists how many nodes
there are and some of the

00:57:14.640 --> 00:57:16.370
current status of the cluster.

00:57:16.640 --> 00:57:20.150
So with that,
that's the conclusion of the demo.

00:57:20.160 --> 00:57:22.500
I wanted to thank you very
much for coming here today.

00:57:22.500 --> 00:57:26.780
And thanks for your attention.

00:57:35.810 --> 00:57:37.850
Thanks, Dean.

00:57:37.960 --> 00:57:42.800
Well, I think one of the messages
there is that before Pooch

00:57:42.880 --> 00:57:48.370
and before Pooch on Mac OS X,

00:57:48.520 --> 00:57:54.730
Doing something like that in a lab would
probably require a programming staff,

00:57:54.920 --> 00:57:58.950
a lot of time,
a lot of effort before you even began

00:57:58.950 --> 00:58:01.380
to get to the science part of it.

00:58:01.400 --> 00:58:06.130
And the beauty of something like Pooch on
Tiger is that that is all done for you.

00:58:06.260 --> 00:58:08.560
You saw the Automator demo there.

00:58:08.590 --> 00:58:11.740
Basically, you know,
grid computing with drag and drop.

00:58:11.850 --> 00:58:17.070
It's an incredible boon
to scientists everywhere,

00:58:17.070 --> 00:58:18.190
I think.

00:58:18.420 --> 00:58:25.870
So, next I'd like to sort of
present to you a challenge.

00:58:25.870 --> 00:58:33.060
And what I believe is that the
Mac platform really is a platform

00:58:33.060 --> 00:58:35.340
that allows you to push the limits.

00:58:35.460 --> 00:58:39.520
And I want to talk about what
those limits are and where you

00:58:39.520 --> 00:58:44.850
should be pushing over really the
next 10 years on this platform.

00:58:47.270 --> 00:58:50.010
The first is really big computing.

00:58:50.080 --> 00:58:52.280
And we saw examples here.

00:58:52.660 --> 00:58:58.440
It's computing that is
tackling very large problems,

00:58:58.850 --> 00:59:02.930
problems that could not even
be thought about 10 years ago.

00:59:03.080 --> 00:59:08.540
And it's taking advantage
of 64-bit computing,

00:59:08.540 --> 00:59:16.180
not just in terms of the length of
integers and doubles and floating points,

00:59:16.180 --> 00:59:18.980
but taking advantage of the fact that
with Tiger you can break through the

00:59:19.180 --> 00:59:25.620
64-bit or break through the 4-gigabyte
barrier and have 64-bit pointers.

00:59:25.660 --> 00:59:30.040
And with the Tsunami demo you saw
a perfect example of the kind of

00:59:30.040 --> 00:59:32.840
breakthroughs you can get with that.

00:59:32.990 --> 00:59:36.220
Really big computing also
means cluster computing.

00:59:36.280 --> 00:59:38.640
It also means grid computing.

00:59:38.640 --> 00:59:45.120
Both Mathematica and Pooch
are great examples of that.

00:59:45.180 --> 00:59:52.460
And we put together in a few seconds
a grid that extended beyond the

00:59:52.460 --> 00:59:59.360
walls of this room and could easily
extend around the globe with that

00:59:59.360 --> 01:00:01.560
same simple drag and drop metaphor.

01:00:01.730 --> 01:00:06.940
So there are problems that can be
tackled with really big computing that

01:00:07.190 --> 01:00:09.890
are ideal in terms of the Mac platform.

01:00:10.180 --> 01:00:14.060
Cluster computing, grid computing,
high-end numerical computing.

01:00:14.060 --> 01:00:18.860
We put a lot of work in our
engineering group into making

01:00:18.900 --> 01:00:23.570
sure that the libraries,
whether it's the Accelerate

01:00:23.570 --> 01:00:28.060
libraries or the AlteVec libraries,
are available with simple

01:00:28.060 --> 01:00:32.060
APIs so that you can write apps
that take advantage of that.

01:00:32.060 --> 01:00:35.570
And our numerical team makes sure
it gets the right answer and we're

01:00:35.570 --> 01:00:38.050
watching every single instruction cycle.

01:00:38.120 --> 01:00:43.030
We're making sure that the cache
load lines are completely optimized.

01:00:43.060 --> 01:00:44.990
So please take advantage of that.

01:00:45.090 --> 01:00:49.950
There's lots of sessions here that
will go into a lot of detail on that.

01:00:49.960 --> 01:00:55.530
So for any numerical intensive
scientific applications,

01:00:55.650 --> 01:00:58.420
Mac has a lot to offer there.

01:00:59.640 --> 01:01:02.490
Second big area,
and this really applies to any

01:01:02.570 --> 01:01:05.910
area of scientific computing,
but we saw a perfect

01:01:06.000 --> 01:01:08.320
example of it here with Dr.

01:01:08.320 --> 01:01:10.500
Ratib and medical imaging.

01:01:10.540 --> 01:01:15.480
And you know that in the early part of
this century we heard a lot about the

01:01:15.480 --> 01:01:20.560
human genome and the genome project
and the online databases that have

01:01:20.560 --> 01:01:23.500
genomes of human and other organisms.

01:01:23.500 --> 01:01:28.250
Well, it turns out that medical imaging
and functional medical imaging,

01:01:28.250 --> 01:01:33.500
the databases there completely dwarf
what the genetics guys are dealing with.

01:01:33.500 --> 01:01:39.500
I mean these guys just have four
characters per codon to deal with,

01:01:39.500 --> 01:01:44.500
and what we're talking about with
medical imaging are huge databases.

01:01:44.500 --> 01:01:48.960
And as you get into simulation and
keeping the results of simulations

01:01:48.960 --> 01:01:52.080
around and being able to compare
them and be able to share them

01:01:52.130 --> 01:01:56.910
around the scientific community,
and visualize them, these are going to be

01:01:57.000 --> 01:01:59.490
very important problems.

01:01:59.500 --> 01:02:03.500
Now Apple is known for
our ability to visualize.

01:02:03.500 --> 01:02:07.500
We have nice 30 inch displays that
I'm sure all of you have back at home.

01:02:07.500 --> 01:02:13.840
This area is one where Apple spends
a lot of time making sure that things

01:02:13.840 --> 01:02:17.430
are rendered properly on the screen.

01:02:17.510 --> 01:02:23.500
We support OpenGL to the hilt
and will continue to do that.

01:02:23.500 --> 01:02:30.500
We have Quartz Extreme for dealing
with image processing in real time.

01:02:30.500 --> 01:02:34.870
So this is an area where Mac is
uniquely situated to really provide

01:02:34.950 --> 01:02:37.500
a great contribution to science.

01:02:37.500 --> 01:02:43.410
Humans are just not good at looking
at terabytes of numerical values.

01:02:43.500 --> 01:02:47.500
You have to turn it into a visualization
if you're going to have it interpreted,

01:02:47.500 --> 01:02:50.790
have it published,
have it actually contribute

01:02:50.790 --> 01:02:53.500
to scientific breakthroughs.

01:02:54.600 --> 01:06:13.100
[Transcript missing]

01:06:13.710 --> 01:06:17.630
We have a lot of things going
on at the Developer Conference.

01:06:17.690 --> 01:06:19.590
I want to point out a few of them.

01:06:19.840 --> 01:06:27.360
First of all,
we've got the Science Connection

01:06:27.360 --> 01:06:30.360
Room and a lot going on there.

01:06:30.360 --> 01:06:33.600
That's room 3014.

01:06:33.690 --> 01:06:38.160
And I believe, if I'm not mistaken,
there's going to be some discussion

01:06:38.270 --> 01:06:40.600
there after the HPC presentation.

01:06:41.010 --> 01:06:48.600
Science discussion is going on around,
well, HPC and Science is Wednesday,

01:06:48.600 --> 01:06:48.600
Thursday.

01:06:48.690 --> 01:06:50.920
Scientific and
Medical Imaging on Mac OS X.

01:06:51.020 --> 01:06:54.070
We saw a little bit of that here today,
but there's going to

01:06:54.070 --> 01:06:55.430
be a lot more in-depth.

01:06:55.590 --> 01:06:59.530
On Friday, a Science Feedback Roundtable.

01:06:59.600 --> 01:07:02.600
It's important to hear from
all of you and get feedback.

01:07:02.600 --> 01:07:07.540
Apple Design Awards,
the Best Scientific Computing Solution.

01:07:07.580 --> 01:07:09.140
There's going to be an award for that.

01:07:09.250 --> 01:07:10.600
That should be interesting.

01:07:10.600 --> 01:07:13.710
A BioCoCo Group Meeting, Wednesday,
6:30 p.m.

01:07:13.710 --> 01:07:15.600
in the Science Connection Room.

01:07:15.600 --> 01:07:22.780
Many sessions, many labs relevant to
creating great science apps.

01:07:23.160 --> 01:07:26.080
And then you've all got your booklets.

01:07:26.080 --> 01:07:29.490
There are a number of sessions
that I encourage you to attend

01:07:29.490 --> 01:07:32.180
specifically for science.

01:07:32.220 --> 01:07:36.030
Those of you who have been coming to
this developer conference for a while

01:07:36.280 --> 01:07:41.760
have probably noticed the sort of
exponential growth curve we've been on.

01:07:41.760 --> 01:07:45.460
That continues,
and it really is because Mac,

01:07:45.460 --> 01:07:50.120
in my opinion,
is the best machine ever that's been

01:07:50.220 --> 01:07:53.060
created for scientific productivity.

01:07:53.070 --> 01:07:57.900
Everything from doing the analysis
and getting the results to publishing

01:07:57.900 --> 01:07:59.360
your data and getting your grants.

01:07:59.360 --> 01:08:03.700
So we're just really pleased
to see this market bloom,

01:08:03.720 --> 01:08:08.250
and I encourage all of you to go
out and create great applications

01:08:08.250 --> 01:08:10.890
so we continue to bloom.

01:08:11.200 --> 01:08:16.350
Couple of contacts,
people you can get in touch with.

01:08:16.360 --> 01:08:19.020
The people who presented
today will be probably milling

01:08:19.020 --> 01:08:20.260
around here for a little bit.

01:08:20.260 --> 01:08:21.170
I think there's a presentation.

01:08:21.200 --> 01:08:23.060
We'll have a presentation
right after this,

01:08:23.060 --> 01:08:26.820
but we probably have a few minutes
that you can come up and get in

01:08:26.820 --> 01:08:29.480
touch and exchange cards with people.

01:08:29.500 --> 01:08:32.060
So with that,
I want to thank you very much,

01:08:32.200 --> 01:08:34.230
and see you again next year.