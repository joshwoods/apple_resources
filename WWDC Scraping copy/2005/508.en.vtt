WEBVTT

00:00:00.640 --> 00:00:01.850
Good afternoon.

00:00:01.930 --> 00:00:03.130
My name is Garth Cummings.

00:00:03.130 --> 00:00:05.700
I'm with Apple's
Developer Tech Support Group.

00:00:05.750 --> 00:00:12.040
I'd like to welcome you to session 508,
Customizing Mac OS X with Open Source.

00:00:12.070 --> 00:00:17.900
And here to kick off the festivities is
open source engineer Kevin Van Vechten.

00:00:26.880 --> 00:00:30.470
So today I'm going to be talking
about how to customize Mac OS X using

00:00:30.470 --> 00:00:33.470
the open source software that
Apple provides on its website.

00:00:33.480 --> 00:00:37.480
And this source is part of Darwin,
which I'll describe a

00:00:37.500 --> 00:00:38.960
little bit in a minute.

00:00:38.960 --> 00:00:43.760
And the emphasis of this talk is really
going to be how to make these sources

00:00:43.760 --> 00:00:47.580
useful to you to solve problems that
you might be interested in solving.

00:00:51.840 --> 00:00:54.440
So, as an overview,
we're going to talk about

00:00:54.440 --> 00:00:57.670
what open source is,
in case any of you aren't familiar

00:00:57.670 --> 00:01:01.410
with the concept of open source,
and we'll move quickly to talking

00:01:01.600 --> 00:01:04.500
a little bit about what Darwin is,
and Darwin is Apple's

00:01:04.590 --> 00:01:05.590
open source project.

00:01:05.660 --> 00:01:10.030
Then we'll go over briefly how
to add some common open source

00:01:10.030 --> 00:01:14.430
projects to your Mac OS X system,
but the heart of the talk will be

00:01:14.430 --> 00:01:18.570
how to customize Mac OS X using the
open source that Apple provides.

00:01:19.620 --> 00:01:23.360
And the second half of the
session will be hands-on,

00:01:23.360 --> 00:01:25.980
which means if you've downloaded
the sample code for the session

00:01:25.980 --> 00:01:28.610
and have it on your PowerBooks,
you can follow along.

00:01:28.620 --> 00:01:32.430
And what I'll be doing is using
some tools that Apple provides

00:01:32.430 --> 00:01:36.820
in order to build the sources
and install them on your systems.

00:01:39.460 --> 00:01:40.970
So first, what is open source?

00:01:41.150 --> 00:01:45.700
Well, open source is a very loose term,
but basically what it means is

00:01:45.740 --> 00:01:50.100
there are programs whose source
code is available on the internet

00:01:50.290 --> 00:01:55.040
that is free for you to download,
inspect, modify, and deploy.

00:01:55.480 --> 00:02:00.090
And then in the spirit of open source is
to take your modifications and contribute

00:02:00.170 --> 00:02:04.490
them back to whatever group published
the sources in the first place so that

00:02:04.630 --> 00:02:07.840
they can benefit from the enhancements
and so can all the other users.

00:02:07.840 --> 00:02:10.680
And by working collaboratively
in this fashion,

00:02:10.800 --> 00:02:13.380
the products really start to take flight.

00:02:13.380 --> 00:02:18.510
Much of Mac OS X is open source,
specifically everything

00:02:18.580 --> 00:02:20.500
at the Unix layer.

00:02:20.500 --> 00:02:25.330
And more information about open source in
general can be found at the OpenSource.

00:02:25.480 --> 00:02:29.710
OpenSource Initiative's website,
and that's this URL that you see here,

00:02:29.710 --> 00:02:31.510
www.opensource.org.

00:02:33.520 --> 00:02:35.760
Now,
Darwin is Apple's open source initiative.

00:02:35.760 --> 00:02:38.220
It is the open source
portion of Mac OS X.

00:02:38.220 --> 00:02:42.150
It includes the kernel,
the I/O Kit drivers and families,

00:02:42.210 --> 00:02:44.400
and the BSD commands and libraries.

00:02:44.440 --> 00:02:48.100
You can see on this diagram that
Darwin provides the base of Mac OS X,

00:02:48.130 --> 00:02:52.670
upon which Carbon and Cocoa and Aqua sit,
but those technologies

00:02:52.770 --> 00:02:54.400
are proprietary to Apple.

00:02:54.400 --> 00:02:58.290
It's only the Darwin technology
that's open source.

00:02:59.640 --> 00:03:01.790
So, how does open source help you?

00:03:01.840 --> 00:03:08.030
Well, one of the biggest examples of it
helping you developers is as reference.

00:03:08.110 --> 00:03:12.290
If you're curious how the file system
is implemented or how certain libraries

00:03:12.290 --> 00:03:15.590
on the system are implemented,
you can actually download a lot of

00:03:15.590 --> 00:03:17.410
these sources and read through them.

00:03:17.420 --> 00:03:20.360
And, you know,
as I'm sure you're all familiar,

00:03:20.360 --> 00:03:22.980
documentation sometimes doesn't
give you the whole picture.

00:03:22.980 --> 00:03:26.060
And in certain cases,
documentation is best done by

00:03:26.070 --> 00:03:29.550
reading the source and seeing
what's actually going on.

00:03:29.560 --> 00:03:31.430
It also helps with debugging.

00:03:31.540 --> 00:03:35.740
It's possible to take a lot of these
sources and build a fully symboled

00:03:35.750 --> 00:03:41.080
version of a library so that when you're
doing your step-by-step debugging in GDB,

00:03:41.080 --> 00:03:44.800
you can actually step into the functions
that you're calling and inspect what

00:03:44.800 --> 00:03:46.810
the variables are inside the library.

00:03:47.120 --> 00:03:48.300
Um...

00:03:49.040 --> 00:03:51.570
It's also useful for customization,
which is going to be the

00:03:51.570 --> 00:03:52.720
emphasis of this talk.

00:03:52.720 --> 00:03:56.410
If there's a particular default
flag that's very annoying

00:03:56.420 --> 00:04:00.360
in your enterprise setup,
or if there's a security fix that you

00:04:00.360 --> 00:04:04.550
need immediately and Apple doesn't
have a software update for it yet,

00:04:04.550 --> 00:04:08.100
perhaps you could download
the sources from Apple's site,

00:04:08.100 --> 00:04:12.040
apply that patch yourself, reinstall,
and be ready to go.

00:04:13.720 --> 00:04:15.790
Also, it's useful for research.

00:04:15.840 --> 00:04:17.180
There's a lot of work going on.

00:04:17.180 --> 00:04:21.730
For example, trusted BSD work is being
ported over to Darwin.

00:04:21.730 --> 00:04:24.720
It includes things like
mandatory access controls.

00:04:24.740 --> 00:04:29.670
And there are other high-performance
computing research applications that can

00:04:29.670 --> 00:04:32.280
use the open source that Apple provides.

00:04:34.710 --> 00:04:38.700
So for our hands-on portion of this talk,
what we'll be doing as an example

00:04:38.710 --> 00:04:42.060
is adding Bonjour support to
the BSD Unix talk utility.

00:04:42.060 --> 00:04:46.040
So basically we'll be making
an iChat of the 1970s.

00:04:46.040 --> 00:04:49.410
And to do this,
we'll use the Darwin build scripts,

00:04:49.410 --> 00:04:53.300
which basically set up a lot of
the environment that's necessary

00:04:53.300 --> 00:04:55.180
for building a Darwin project.

00:04:55.180 --> 00:04:57.750
For the remainder of the talk,
I'm going to be talking about

00:04:57.750 --> 00:05:00.110
what that environment is,
why it's so important,

00:05:00.400 --> 00:05:02.540
and then when we actually
do the hands-on portion,

00:05:02.540 --> 00:05:05.760
we'll use the scripts that take care
of all the nitty-gritty details for us.

00:05:05.760 --> 00:05:11.160
So adding new software
to Mac OS X in general.

00:05:13.230 --> 00:05:17.270
There's kind of a basic
open source lifecycle,

00:05:17.270 --> 00:05:21.940
which is pretty common to almost
any project that you're going to

00:05:21.940 --> 00:05:24.550
download and install on Mac OS X.

00:05:25.390 --> 00:05:28.290
So you can see here that
there are five overall steps,

00:05:28.390 --> 00:05:30.550
the first of which is pretty obvious.

00:05:30.600 --> 00:05:32.660
You need to download the source.

00:05:32.730 --> 00:05:36.140
So in this example,
it's using the cURL command line utility

00:05:36.220 --> 00:05:38.020
to download the source code to Lua.

00:05:38.200 --> 00:05:41.040
Lua is a very lightweight
scripting language,

00:05:41.070 --> 00:05:43.190
which many of you probably
have never heard of.

00:05:43.340 --> 00:05:46.210
It happens to be the scripting
language used by World of Warcraft,

00:05:46.210 --> 00:05:47.810
so you might wanna check that out.

00:05:47.820 --> 00:05:52.300
But we can download it.

00:05:52.490 --> 00:05:54.020
And the next step is to extract it.

00:05:54.130 --> 00:05:59.340
Usually it's a archive,
a single tar.gz or tar.bz format.

00:05:59.340 --> 00:06:02.400
And once you've extracted it,
you have a whole tree of all

00:06:02.400 --> 00:06:03.820
the sources on your system.

00:06:03.820 --> 00:06:07.140
The next step is actually
a pretty magical step,

00:06:07.240 --> 00:06:08.620
and that's to configure the sources.

00:06:08.620 --> 00:06:11.760
And what you usually do is
just change into the directory

00:06:11.760 --> 00:06:15.220
and run the configure script,
and it goes and figures out a lot

00:06:15.390 --> 00:06:18.960
of the properties of your system,
which libraries you have installed,

00:06:18.960 --> 00:06:22.300
which header files are available,
whether it's a big endian

00:06:22.300 --> 00:06:23.620
or little endian system.

00:06:23.620 --> 00:06:28.780
As you know,
there's Darwin on both PowerPC and Intel,

00:06:28.780 --> 00:06:30.460
so we'll be talking a
little bit about that.

00:06:31.940 --> 00:06:35.680
And once everything's configured,
you can go ahead and compile.

00:06:35.680 --> 00:06:39.000
Usually there's a top level make
file where you would do make all,

00:06:39.000 --> 00:06:42.310
and it would go through and compile
all of the portions of the project.

00:06:42.380 --> 00:06:44.830
And once that's done,
you could say make install,

00:06:44.830 --> 00:06:46.870
and it would install it on your system.

00:06:46.880 --> 00:06:48.960
Well,
there are a few things in this basic

00:06:49.360 --> 00:06:53.050
lifecycle that you actually probably
want to do a little bit differently

00:06:53.090 --> 00:06:55.530
when installing on Mac OS X,
so I'm going to talk

00:06:55.540 --> 00:06:56.690
about that in detail now.

00:06:58.490 --> 00:07:03.040
Sometimes in order to get things
to work properly on Mac OS X,

00:07:03.040 --> 00:07:04.840
you need to patch the software.

00:07:04.840 --> 00:07:08.770
So Linux's driver model, for example,
is quite a bit different than I/O Kit.

00:07:08.780 --> 00:07:13.140
That's some major areas of the
software needing to be changed.

00:07:13.140 --> 00:07:17.690
One of the systems that actually has a
large collection of patches and makes

00:07:17.690 --> 00:07:20.340
it easy to grab software is Fink.

00:07:20.380 --> 00:07:22.860
Fink is hosted at SourceForge.

00:07:22.860 --> 00:07:26.880
It's based on the Debian packages system,
which is used in Debian Linux.

00:07:27.440 --> 00:07:31.620
And they have over 5,000 programs
which are ready to go on Mac OS X.

00:07:31.620 --> 00:07:35.920
And one of the major advantages of
Fink is it offers pre-built software.

00:07:35.920 --> 00:07:38.980
So you can download a package
that's already been built,

00:07:39.060 --> 00:07:41.760
install the binary,
and run all of your common

00:07:41.960 --> 00:07:43.610
open source programs.

00:07:46.180 --> 00:07:50.720
Another popular system is Darwin Ports,
which is hosted at opendarwin.org.

00:07:50.720 --> 00:07:54.040
Darwin Ports is similar in
nature to FreeBSD Ports.

00:07:54.040 --> 00:07:55.810
It's a completely
different implementation,

00:07:55.810 --> 00:07:58.160
but the spirit is largely the same.

00:07:58.160 --> 00:08:02.120
They have over 2,500 programs,
which you can install.

00:08:02.120 --> 00:08:04.950
Unlike Fink,
Darwin Ports really emphasizes

00:08:04.950 --> 00:08:09.080
building these sources from scratch,
which is useful sometimes if

00:08:09.080 --> 00:08:11.430
you're looking to customize them.

00:08:14.350 --> 00:08:17.550
But one of the things that both of
these products do is make these open

00:08:17.630 --> 00:08:20.060
source projects work well with Mac OS X.

00:08:20.060 --> 00:08:24.310
And one of the keys to working well
with Mac OS X is to avoid installing

00:08:24.310 --> 00:08:25.880
things into the system directories.

00:08:25.880 --> 00:08:29.300
And the main reason for this
is Apple uses Software Update.

00:08:29.300 --> 00:08:32.960
And Software Update doesn't care
what you've installed on your system.

00:08:32.960 --> 00:08:35.400
It wants to install what
it wants to install.

00:08:35.400 --> 00:08:38.380
And it'll happily overwrite any
files which you've modified.

00:08:39.670 --> 00:08:42.810
So staying out of the slash system
directory and out of the slash

00:08:42.810 --> 00:08:46.200
user directory is a good way to
stay out of Software Update's way.

00:08:46.200 --> 00:08:49.770
Traditionally,
user local has been available

00:08:49.880 --> 00:08:51.760
to you to install into.

00:08:51.760 --> 00:08:53.030
That's perfectly fine.

00:08:53.040 --> 00:08:55.730
Apple will never install
into there on one of its

00:08:55.750 --> 00:08:57.730
CD updates or software updates.

00:08:57.800 --> 00:09:00.580
But if you're building the
Darwin sources themselves,

00:09:00.580 --> 00:09:03.280
if you're building actual
components of the Mac OS X system,

00:09:03.280 --> 00:09:06.660
there are intermediate files
that get placed into user local.

00:09:06.660 --> 00:09:09.260
So it's really best to stay
out of user local as well.

00:09:09.480 --> 00:09:11.760
If you want to be completely
out of Apple's way.

00:09:11.800 --> 00:09:15.720
And for this reason,
Darwin Ports has chosen opt local.

00:09:15.720 --> 00:09:20.080
And Fink has chosen SW as
directories that are completely

00:09:20.080 --> 00:09:21.720
independent of the base system.

00:09:21.730 --> 00:09:23.730
And that's where they install
all of their libraries

00:09:23.750 --> 00:09:24.890
and all of their programs.

00:09:27.040 --> 00:09:31.380
So if you're wondering how you can
move software to something other

00:09:31.380 --> 00:09:35.620
than slash user or slash user local,
usually this is done in the

00:09:35.620 --> 00:09:39.550
configure phase of the open
source software lifecycle.

00:09:39.620 --> 00:09:44.680
And quite often a configure script
will have a dash dash prefix argument,

00:09:44.680 --> 00:09:49.840
where in this example we're setting
the prefix to slash my stuff.

00:09:50.260 --> 00:09:54.900
And instead of going into user local bin,
this project would probably

00:09:54.900 --> 00:09:57.600
install into slash my stuff bin.

00:09:59.350 --> 00:10:04.000
Another good practice is to actually
install into an intermediate location

00:10:04.000 --> 00:10:06.680
before copying it onto the base system.

00:10:06.680 --> 00:10:10.020
Because when you just do a make
install without any other arguments,

00:10:10.020 --> 00:10:13.360
it'll just install onto your system
and you have no idea which libraries

00:10:13.360 --> 00:10:16.450
and which binaries were installed.

00:10:16.460 --> 00:10:20.300
However, if you a lot of times
specify a destr argument,

00:10:20.300 --> 00:10:23.720
in this case we're setting
it to temp new project,

00:10:24.810 --> 00:10:28.600
what we can do here is install
into this intermediate location,

00:10:28.600 --> 00:10:32.580
look in the intermediate location to
see what will end up being installed,

00:10:32.580 --> 00:10:34.740
see if there's any conflicts
that we're worried about,

00:10:34.740 --> 00:10:37.940
and once everything's okay
and we're sure of that,

00:10:38.080 --> 00:10:40.320
we can then copy that
into the base system.

00:10:40.320 --> 00:10:45.100
And it also gives us a chance to keep a
record of how we've modified our system.

00:10:45.100 --> 00:10:48.450
So I think this is a very
important thing to keep in mind,

00:10:48.490 --> 00:10:52.700
is to inspect the results of anything
you build before installing it on

00:10:52.700 --> 00:10:54.540
your system so you have a good idea.

00:10:54.670 --> 00:10:57.790
of exactly how your
system's being modified.

00:10:59.350 --> 00:11:02.920
But as I said earlier,
the bulk of this talk is about

00:11:03.070 --> 00:11:07.540
customizing the things that are
in Mac OS X themselves using

00:11:07.540 --> 00:11:09.170
the open source Apple provides.

00:11:09.180 --> 00:11:12.280
And there is some risk doing this, right?

00:11:12.280 --> 00:11:17.650
If you modify the kernel, for example,
there's a chance that the

00:11:17.650 --> 00:11:21.320
system won't boot if there's
a bug in your modification.

00:11:21.320 --> 00:11:23.480
So that's a fairly high risk change.

00:11:24.200 --> 00:11:29.660
You can make lesser risky changes by
changing libraries and frameworks,

00:11:29.660 --> 00:11:33.890
although the exposure of any change to
a library framework is fairly large.

00:11:34.000 --> 00:11:38.170
Any incompatibility introduced
there will affect a wide variety of

00:11:38.230 --> 00:11:40.730
applications or command line tools.

00:11:42.340 --> 00:11:45.570
Plugins are a little bit less
risky because it will only

00:11:45.570 --> 00:11:49.100
affect the application that
happens to use that plugin,

00:11:49.100 --> 00:11:51.200
not a wide variety on the system.

00:11:51.200 --> 00:11:54.650
And then individual command line
tools are generally pretty safe

00:11:54.770 --> 00:11:59.120
to update because they're at
the edge of the dependency tree.

00:11:59.120 --> 00:12:02.750
They're only used by themselves,
and it's fairly isolated from

00:12:02.750 --> 00:12:06.160
impacting the rest of the system,
though there are exceptions to that.

00:12:06.160 --> 00:12:10.010
If Perl doesn't work on your system,
you might find a lot of the various

00:12:10.010 --> 00:12:15.290
scripts in an unhappy state,
so it's best to be judicious

00:12:15.320 --> 00:12:17.160
about what tools you're modifying.

00:12:17.160 --> 00:12:21.190
And always make backups because if
something doesn't go how you planned,

00:12:21.190 --> 00:12:25.000
you're going to want to restore from
a backup of that tool in order to get

00:12:25.000 --> 00:12:27.350
your system back into a working state.

00:12:32.050 --> 00:12:35.790
So, as I mentioned earlier,
software update may overwrite

00:12:35.800 --> 00:12:39.180
things that you've modified,
and there are a few best practices

00:12:39.430 --> 00:12:41.470
we can do to mitigate this risk.

00:12:42.830 --> 00:12:46.130
Libraries and frameworks
may be incompatible,

00:12:46.130 --> 00:12:46.770
right?

00:12:46.770 --> 00:12:49.880
So your modifications
could work fine today,

00:12:50.060 --> 00:12:54.510
but when software update comes
out and updates a new application

00:12:54.510 --> 00:12:57.670
that has a different expectation
of how that framework should work,

00:12:57.710 --> 00:13:00.350
that might be when you
notice the incompatibility.

00:13:00.360 --> 00:13:02.980
So it's a good idea to keep your
backup copies of the modified

00:13:02.980 --> 00:13:05.740
sources around for a long time,
because it might work today,

00:13:05.740 --> 00:13:08.020
but that doesn't mean
it'll work tomorrow.

00:13:08.020 --> 00:13:12.110
And you'll want to restore from backup
to see if that was indeed the problem.

00:13:14.230 --> 00:13:17.520
One of the practices that I do
personally is to download the

00:13:17.540 --> 00:13:23.870
software update packages from Apple's
website at www.apple.com/support and

00:13:23.980 --> 00:13:27.440
install them manually and not rely
on software update to install them.

00:13:27.500 --> 00:13:30.700
And the reason for this is you
can inspect which files the

00:13:30.700 --> 00:13:35.570
software update's going to install
when you're installing manually.

00:13:36.020 --> 00:13:40.700
So, using the installer application,
you can choose the show files

00:13:40.700 --> 00:13:44.080
item from the file menu once
you're installing the package.

00:13:44.130 --> 00:13:47.240
And you can see here that we
have a long list of files,

00:13:47.280 --> 00:13:51.640
and the list of files in this instance
is all the files in the user directory

00:13:52.170 --> 00:13:55.800
of the Mac OS X 10.4.1 update.

00:13:56.000 --> 00:13:58.790
In our example,
you'll recall we're modifying

00:13:58.790 --> 00:14:01.470
the Unix talk command,
and the talk command

00:14:01.470 --> 00:14:03.030
lives in user bin talk.

00:14:03.100 --> 00:14:05.600
As you can see,
it's not present in this list,

00:14:05.650 --> 00:14:09.180
so this update's probably going
to coexist peacefully with our

00:14:09.380 --> 00:14:11.520
modification that we're going to do.

00:14:12.080 --> 00:14:15.770
There's also a command line
method for listing all the files

00:14:15.780 --> 00:14:18.560
in a software update package,
and that's that command at

00:14:18.560 --> 00:14:23.010
the bottom of the slide,
the ls bomb, and then the path to the

00:14:23.010 --> 00:14:26.960
archive.bomb file inside the package.

00:14:27.000 --> 00:14:29.200
Bomb stands for bill of materials.

00:14:29.200 --> 00:14:32.720
It's a list of all the files
that are included in the package,

00:14:32.720 --> 00:14:36.080
and it also includes information
about what their default

00:14:36.240 --> 00:14:38.570
permissions should be and ownership.

00:14:41.840 --> 00:14:45.350
So to minimize the risk of
your modifications interfering

00:14:45.450 --> 00:14:48.620
with software update,
you should also download

00:14:48.620 --> 00:14:52.120
the sources from Apple,
because those are the actual

00:14:52.120 --> 00:14:54.520
sources that went into Mac OS X.

00:14:54.520 --> 00:14:57.470
If you were to grab a
version of Perl from,

00:14:57.470 --> 00:15:01.810
say, SourceForge or some other site,
there's really no guarantee

00:15:01.910 --> 00:15:05.480
that those sources are anything
like what went into Mac OS X.

00:15:05.480 --> 00:15:07.740
There could have been a lot
of modifications that were

00:15:07.740 --> 00:15:08.960
done by some third party.

00:15:09.860 --> 00:15:15.950
But if you start from Apple's site,
which is at this www.opensource.apple.com

00:15:15.960 --> 00:15:18.900
slash DarwinSource,
or there's a mirror of

00:15:18.950 --> 00:15:23.230
it at opendarwin.org,
which is a community-run site that

00:15:23.230 --> 00:15:25.310
does a lot of Darwin development,
and that's at

00:15:25.310 --> 00:15:27.180
darwinsource.opendarwin.org.

00:15:27.450 --> 00:15:30.170
These sources are the actual
sources that go into Mac OS X,

00:15:30.180 --> 00:15:32.460
so they're a good starting
point for your modifications.

00:15:32.460 --> 00:15:35.100
And then once you have those sources,
you should really change

00:15:35.180 --> 00:15:36.240
as little as possible.

00:15:36.300 --> 00:15:38.980
You should add the specific
feature that you're interested in,

00:15:38.980 --> 00:15:41.650
or the specific bug,
and then you can fix and reinstall,

00:15:41.650 --> 00:15:45.490
because the smaller the changes you make,
the more likely it will be

00:15:45.490 --> 00:15:49.400
compatible for a long time
with Apple's software updates.

00:15:52.660 --> 00:15:55.950
When building the software,
there's a lot of different details

00:15:56.080 --> 00:15:58.240
which you need to keep in mind,
some of which are

00:15:58.360 --> 00:16:00.020
completely unique to Apple.

00:16:00.020 --> 00:16:03.120
You've never seen anything like it
in any other open source project,

00:16:03.210 --> 00:16:08.510
except for talks like this and
some hints on the mailing list.

00:16:08.520 --> 00:16:10.500
You'd probably never know
that it needs to be done.

00:16:10.500 --> 00:16:13.330
There are some obvious things
that should be checked,

00:16:13.330 --> 00:16:13.940
though.

00:16:13.940 --> 00:16:16.320
For example,
which system version and kernel

00:16:16.350 --> 00:16:18.000
version you're building on.

00:16:18.500 --> 00:16:22.850
This will affect the outcome of
the build because the tools that

00:16:22.850 --> 00:16:26.280
are available on each system
of Mac OS X are going to vary.

00:16:26.280 --> 00:16:32.020
The system calls that are available
from the kernel are going to vary.

00:16:32.020 --> 00:16:35.990
And if something like a configure
script is doing auto detection of

00:16:35.990 --> 00:16:39.680
what features are on your system,
if you're building on, say,

00:16:39.680 --> 00:16:42.940
a Panther system, but you want to install
on a Tiger system,

00:16:42.940 --> 00:16:46.190
there's a good chance that it's not going
to work because that configure script is

00:16:46.270 --> 00:16:47.800
going to pick up all the wrong features.

00:16:47.960 --> 00:16:50.400
It's going to be configuring
itself for a Panther system,

00:16:50.470 --> 00:16:51.820
and that's not what you want.

00:16:51.910 --> 00:16:56.760
So one of the good things to do is
to stay on the same general system

00:16:57.190 --> 00:17:00.580
version as what you want to install on.

00:17:02.170 --> 00:17:05.380
The developer tools version
is equally important.

00:17:05.420 --> 00:17:07.580
There are also a lot of
environment variables,

00:17:07.630 --> 00:17:10.870
which I'll go over, that need to be set,
and they will dramatically

00:17:10.870 --> 00:17:12.550
affect the outcome of the build.

00:17:12.560 --> 00:17:18.110
And there are also headers and libraries,
which you probably won't be able

00:17:18.240 --> 00:17:21.920
to find by default on your system,
and I'll tell you a little

00:17:21.930 --> 00:17:23.120
bit about how to get those.

00:17:25.050 --> 00:17:30.000
So the system in kernel version can be
inspected by using the SW_version tool.

00:17:30.000 --> 00:17:36.320
That'll print out the
product version of Mac OS X,

00:17:36.320 --> 00:17:41.320
which in this case is
10.4 or 10.4.1 or 10.3.9.

00:17:41.530 --> 00:17:45.280
There's also a build version.

00:17:45.280 --> 00:17:47.270
In this case, it's 8A428.

00:17:47.350 --> 00:17:51.650
That is the build of Mac OS X that
is on the Tiger DVDs.

00:17:51.790 --> 00:17:55.610
This build version is really the
most precise number that you can

00:17:55.610 --> 00:17:59.620
find to identify which system
software is running on your system.

00:17:59.660 --> 00:18:02.280
And the build number will change
with every software update,

00:18:02.280 --> 00:18:06.350
with every major CD release.

00:18:06.360 --> 00:18:11.970
And it's really the most exact
number that's available to you.

00:18:12.390 --> 00:18:16.540
The uName tool,
in this example I'm using uName-A,

00:18:16.540 --> 00:18:19.090
will print version information about
the kernel that you're running.

00:18:19.100 --> 00:18:26.690
For Tiger, the kernel is 8.0.0,
and this is a good way to figure out

00:18:26.760 --> 00:18:30.550
which kernel is on the system in case
you might have modified the kernel and it

00:18:30.550 --> 00:18:34.220
doesn't match the overall system version.

00:18:36.570 --> 00:18:38.410
As you know,
Apple has shipped many different

00:18:38.470 --> 00:18:39.960
versions of the developer tools.

00:18:40.070 --> 00:18:44.420
There's GCC 295.2,
which I believe was the original

00:18:44.480 --> 00:18:46.390
GCC version for Mac OS X.

00:18:46.400 --> 00:18:52.020
And as time has gone on,
they've introduced GCC 3.1, GCC 3.3,

00:18:52.020 --> 00:18:55.760
GCC 3.5,
which is an internal build that was

00:18:55.760 --> 00:19:02.520
used for certain parts of Tiger,
specifically anything to do with 64-bit.

00:19:03.520 --> 00:19:04.410
You don't need that.

00:19:04.440 --> 00:19:07.420
It actually has been rolled into GCC 4.0.

00:19:07.420 --> 00:19:10.860
But one of the things to keep
in mind is different parts of

00:19:10.860 --> 00:19:14.060
the system happen to be built
with different compiler versions.

00:19:14.060 --> 00:19:20.230
So GCC 4.0 won't build much of the
open source that's available for Tiger.

00:19:20.240 --> 00:19:24.640
In fact, you need to go back to GCC 3.3
in order to build a lot of the

00:19:24.650 --> 00:19:27.060
Tiger sources that are available.

00:19:28.360 --> 00:19:30.790
You can look and see which
version of GCC you're using

00:19:30.800 --> 00:19:33.660
by default by typing gcc-v.

00:19:33.660 --> 00:19:37.090
And in this example,
you see it is using GCC4 by default,

00:19:37.090 --> 00:19:40.520
which is consistent with Tiger.

00:19:41.500 --> 00:19:44.270
If you want to change which
version is used by default,

00:19:44.290 --> 00:19:46.050
there's the GCC Select tool.

00:19:46.090 --> 00:19:50.100
And GCC Select will
change the global default.

00:19:50.100 --> 00:19:54.080
In this example, we're using sudo to
make this global change,

00:19:54.110 --> 00:19:57.700
and we're selecting GCC version 3.3.

00:19:57.730 --> 00:20:03.410
And 3.3 is what is needed to build
most of the Tiger open source.

00:20:06.590 --> 00:20:12.160
The environment variables are used by
the Makefiles and Xcode projects that

00:20:12.270 --> 00:20:14.580
compile most of Apple's open source.

00:20:14.580 --> 00:20:18.830
And there are four very fundamental
environment variables that

00:20:18.830 --> 00:20:21.410
almost always need to be set.

00:20:21.600 --> 00:20:22.710
The first one is source root.

00:20:22.810 --> 00:20:26.740
Source root should be set to the path
of the sources which you are compiling.

00:20:26.740 --> 00:20:30.600
So if you've downloaded a tar archive
and extracted it onto your disk,

00:20:31.100 --> 00:20:34.560
whatever directory that
extracted tar archive created,

00:20:34.560 --> 00:20:37.710
the full path to that should be
specified in the source root variable.

00:20:37.720 --> 00:20:42.030
This lets the make file access files
relative to the variable to find the

00:20:42.030 --> 00:20:44.520
sources that are supposed to be built.

00:20:46.530 --> 00:20:49.830
Another directory that needs to
be specified is the object root.

00:20:49.830 --> 00:20:52.140
And the object root is a
purely temporary directory.

00:20:52.140 --> 00:20:55.450
It should be empty before
you begin your build.

00:20:55.450 --> 00:20:59.520
And the object root is where all of
the .o files and other intermediate

00:20:59.670 --> 00:21:03.420
files are going to be placed
while this project is being built.

00:21:04.940 --> 00:21:08.760
The following two environment variables,
the symroot and the destroot,

00:21:08.760 --> 00:21:12.440
are where the actual products of
your build are going to be placed.

00:21:12.440 --> 00:21:14.900
Both of them, again,
should be a full path to an

00:21:14.900 --> 00:21:16.350
empty directory to start with.

00:21:16.440 --> 00:21:21.780
And the symroot is where all of the
fully debugging-enabled versions will go,

00:21:21.780 --> 00:21:24.710
and that has all the symbols that
are needed to do source-level

00:21:24.710 --> 00:21:28.460
debugging for the project using GDB.

00:21:28.460 --> 00:21:32.810
So you can actually do line-by-line
debugging using whatever libraries and

00:21:32.810 --> 00:21:34.780
tools are installed into the symroot.

00:21:34.780 --> 00:21:37.960
And then the destroot is where
the finished product goes,

00:21:37.960 --> 00:21:42.900
and that is basically what you'll
end up installing on your production

00:21:42.900 --> 00:21:45.560
system once you have made the change.

00:21:48.010 --> 00:21:53.850
There are some other very important
environment variables as well,

00:21:53.850 --> 00:21:53.850
such as the Mac OS X deployment target.

00:21:53.960 --> 00:21:59.060
This variable interacts with the
availability macros header file.

00:21:59.060 --> 00:22:03.670
And basically the purpose of it
is to determine which APIs are

00:22:03.780 --> 00:22:08.500
safe to use on the version of
Mac OS X which you're targeting.

00:22:08.780 --> 00:22:12.840
So if you're targeting version 10.4,
which we will be today,

00:22:12.840 --> 00:22:16.700
then it will give you warnings
if you're using any APIs that

00:22:16.800 --> 00:22:18.560
have been deprecated in Tiger.

00:22:18.560 --> 00:22:21.450
Perhaps they were perfectly
fine to use in Panther,

00:22:21.450 --> 00:22:26.100
but they're no longer fully supported or
won't be supported in future releases.

00:22:26.100 --> 00:22:28.240
So you'll get a warning for that.

00:22:28.260 --> 00:22:31.860
It also conditionally defines
a lot of symbols so that,

00:22:31.860 --> 00:22:34.680
for example,
if you're on a Tiger machine,

00:22:34.680 --> 00:22:38.760
but compiling for Panther and
something new is introduced in Tiger,

00:22:38.760 --> 00:22:38.760
you can use it to define
a new version of Mac OS X.

00:22:44.190 --> 00:22:48.890
And you'll get a warning because you're
using something that won't exist back

00:22:48.960 --> 00:22:51.580
on that system that you're targeting.

00:22:52.300 --> 00:22:55.440
No matter which version of
Tiger you're installing for,

00:22:55.440 --> 00:23:00.460
so whether it's 10.4 or 10.4.1
or any future software update,

00:23:00.460 --> 00:23:03.820
this deployment target
should just be set to 10.4.

00:23:03.820 --> 00:23:06.550
It really only corresponds
to the major release number.

00:23:06.560 --> 00:23:08.420
So for Panther, it should be 10.3.

00:23:08.420 --> 00:23:10.200
For Tiger, it should be 10.4.

00:23:10.200 --> 00:23:13.990
It doesn't need to be set for
any of the software updates.

00:23:14.020 --> 00:23:15.700
It's really just a major number here.

00:23:15.700 --> 00:23:19.120
The same goes for the
RC release variable.

00:23:19.600 --> 00:23:23.430
This is something that's used by
various make files in open source

00:23:23.560 --> 00:23:26.580
projects to see if they should configure
themselves slightly differently,

00:23:26.590 --> 00:23:28.720
whether they're building
for Panther or for Tiger.

00:23:28.720 --> 00:23:31.140
So you should set them
to Panther or Tiger,

00:23:31.140 --> 00:23:34.540
depending on what you're
interested in installing on.

00:23:34.560 --> 00:23:37.170
I guess in the future,
we'll be setting that to

00:23:37.170 --> 00:23:38.700
Leopard at some point.

00:23:40.380 --> 00:23:44.700
The uname release variable, again,
is a major version number.

00:23:44.700 --> 00:23:48.730
So for Darwin, that was 7.0,
and that was the kernel

00:23:48.730 --> 00:23:50.440
version in Panther.

00:23:50.440 --> 00:23:54.730
For Tiger, it will be 8.0,
since that's the major

00:23:54.760 --> 00:23:56.900
kernel version in Tiger.

00:23:56.900 --> 00:24:00.750
And this is actually a very
important variable to set.

00:24:00.840 --> 00:24:04.760
What it does is it affects the
output of that uname-a tool.

00:24:04.760 --> 00:24:08.910
And the reason you'd want to do this,
especially if you're cross-compiling from

00:24:08.910 --> 00:24:13.240
Panther to Tiger or Tiger to Panther,
is a lot of scripts will create

00:24:13.300 --> 00:24:18.430
directories that have the name
Darwin 7 embedded in them,

00:24:18.430 --> 00:24:19.980
or Darwin 8 embedded in them.

00:24:19.980 --> 00:24:22.860
GCC is an example of a
project that does this.

00:24:22.860 --> 00:24:25.200
And so by setting this
environment variable,

00:24:25.200 --> 00:24:29.080
you're basically overriding the default
value on the system and telling it

00:24:29.080 --> 00:24:33.560
instead it should always return this
8.0 for the duration of the build,

00:24:33.560 --> 00:24:37.280
and that way you'll get the
directories created that you expect.

00:24:39.080 --> 00:24:42.500
There's also the RC_ARCHES variable.

00:24:42.500 --> 00:24:45.910
This is the architectures
which you are compiling for.

00:24:46.170 --> 00:24:48.840
As you probably know,
Darwin has been available

00:24:48.840 --> 00:24:50.920
on x86 for some time.

00:24:51.000 --> 00:24:54.910
Now Mac OS X will be using the
Intel architecture as well.

00:24:54.960 --> 00:25:00.260
You're going to want to specify both
PowerPC and i386 in this variable.

00:25:00.280 --> 00:25:04.790
And by virtue of doing this,
the open source projects will

00:25:04.890 --> 00:25:08.660
build universal binaries and
universal libraries that will run

00:25:08.660 --> 00:25:11.310
on either of these architectures.

00:25:12.130 --> 00:25:14.730
And the last of these really
important environment variables

00:25:14.780 --> 00:25:16.260
is the RC project name.

00:25:16.260 --> 00:25:19.010
And this is the name of the
project that you're building.

00:25:19.020 --> 00:25:21.980
So, for example,
if you're downloading GCC sources,

00:25:21.980 --> 00:25:24.840
then you should set this variable to GCC.

00:25:24.840 --> 00:25:28.950
Or if you're downloading CCTools sources,
you should set the environment

00:25:28.980 --> 00:25:30.390
variable to CCTools.

00:25:30.400 --> 00:25:33.470
For some projects,
they will produce a completely

00:25:33.540 --> 00:25:38.610
different output depending on what
this environment variable is set to.

00:25:38.620 --> 00:25:40.980
And that's known as a build alias.

00:25:41.620 --> 00:25:44.310
So build aliases are really
where there's one tar archive,

00:25:44.340 --> 00:25:46.330
it's the same sources,
but there are completely

00:25:46.330 --> 00:25:47.320
different build results.

00:25:47.320 --> 00:25:50.390
And that, again,
is based on the value of this

00:25:50.390 --> 00:25:53.240
RC project name environment variable.

00:25:53.240 --> 00:25:56.500
Here are some of the more
popular examples of this.

00:25:56.500 --> 00:25:59.320
There's the Directory Services Password
Server plugin.

00:25:59.320 --> 00:26:02.160
That's a source code project
that you can download.

00:26:02.160 --> 00:26:04.510
But it has an alternate identity.

00:26:04.600 --> 00:26:07.700
It has the DS Password Server framework.

00:26:07.700 --> 00:26:12.020
Now, the same tar.gz archive will
produce... So both of these things.

00:26:12.020 --> 00:26:15.700
If the environment variable is
set to Password Server plugin,

00:26:16.050 --> 00:26:18.630
then it's going to create a plugin.

00:26:18.660 --> 00:26:22.460
If it's set to the framework,
it'll create a framework.

00:26:22.460 --> 00:26:24.120
And both of them operate together.

00:26:24.150 --> 00:26:27.400
And the reason they're in the same
set of sources is really because

00:26:27.420 --> 00:26:29.330
there's an interdependency there.

00:26:29.340 --> 00:26:31.060
The revision lock, right?

00:26:31.140 --> 00:26:34.050
They have a private protocol that
the plugins talk to the framework.

00:26:34.060 --> 00:26:37.480
So the same set of sources
produce both of the results.

00:26:37.500 --> 00:26:41.620
But if you failed to set this environment
variable... There'd really be no

00:26:41.620 --> 00:26:43.780
way for you to build the framework.

00:26:43.800 --> 00:26:45.920
I mean, it's absolutely essential.

00:26:45.920 --> 00:26:52.410
Another example is cctools and
cctools-o-files or libc and libc-debug.

00:26:52.430 --> 00:26:57.620
Setting the environment variable
to libc-debug is the only way

00:26:57.620 --> 00:27:00.380
that you can get the debug
version of libc to be built.

00:27:00.440 --> 00:27:02.720
If you were to just build
the libc sources without this

00:27:02.720 --> 00:27:04.880
environment variable set,
it wouldn't build the

00:27:04.900 --> 00:27:05.870
debug version at all.

00:27:05.880 --> 00:27:06.970
Thank you.

00:27:08.910 --> 00:27:11.480
So this includes a lot of the
variables I was talking about,

00:27:11.630 --> 00:27:14.040
as well as some others that
are a little more archaic,

00:27:14.180 --> 00:27:15.450
and the list goes on and on.

00:27:15.460 --> 00:27:19.820
And really, it's too tedious to
specify them all yourself,

00:27:19.820 --> 00:27:22.290
and what I really recommend is
using the Darwin build scripts,

00:27:22.350 --> 00:27:24.870
which I'll describe in a few minutes,
to take care of all of

00:27:24.870 --> 00:27:26.340
this hard work for you.

00:27:26.340 --> 00:27:29.660
It'll also keep things up to date.

00:27:29.740 --> 00:27:32.960
We'll be modifying which variables
are set by these scripts as time goes

00:27:32.960 --> 00:27:36.420
on to make sure they're in sync with
what these projects are expecting.

00:27:38.800 --> 00:27:41.860
And the last point I had about
building is headers and libraries,

00:27:41.920 --> 00:27:45.250
which might not be available
on your Tiger TBDs.

00:27:45.310 --> 00:27:47.650
There are a lot of intermediate,

00:27:48.160 --> 00:27:50.600
files that aren't
available on the Tiger DVD,

00:27:50.600 --> 00:27:52.410
which you do need to build.

00:27:52.440 --> 00:27:55.460
And the reason they're not
on the DVD is because they're

00:27:55.460 --> 00:27:58.240
simply not needed at runtime,
and there's no reason to install

00:27:58.240 --> 00:28:00.200
them on every user's system.

00:28:00.200 --> 00:28:04.600
Some examples of this are the
kernel linker static library.

00:28:04.600 --> 00:28:08.830
This is something that's needed
by I/O Kit in the user space,

00:28:08.840 --> 00:28:11.620
and so it's also something
that's needed by the kernel.

00:28:11.620 --> 00:28:15.890
It's produced by the
cctools-ofiles project,

00:28:16.530 --> 00:28:18.830
and again,
the only way to actually get this would

00:28:18.830 --> 00:28:21.680
be if you were to build cctools-ofiles,
pay attention to the fact

00:28:21.790 --> 00:28:25.340
that there's a build alias,
and set the environment variable,

00:28:25.340 --> 00:28:27.280
and you'll get this file.

00:28:28.970 --> 00:28:32.460
But while you were building that,
you'd probably first get a warning that

00:28:32.470 --> 00:28:35.510
there wasn't a streams.h header file,
because again,

00:28:35.510 --> 00:28:39.140
this is a header file that's never
needed in the end user systems.

00:28:39.140 --> 00:28:42.700
It's only needed while you're
compiling portions of Mac OS X itself.

00:28:42.820 --> 00:28:46.680
The streams.h header file comes
from the libstreams project,

00:28:46.680 --> 00:28:50.360
and so basically you can see how
there's a lot of dependencies

00:28:50.420 --> 00:28:52.260
which you'll need to chase.

00:28:52.620 --> 00:28:56.580
You'll need to get all of the headers
that are needed to build these

00:28:56.580 --> 00:29:00.130
Darwin projects and all the libraries,
and it really boils down to

00:29:00.140 --> 00:29:03.660
starting somewhere at the beginning,
installing a few of the headers,

00:29:03.660 --> 00:29:06.240
installing a few of the libraries,
going to the next level.

00:29:06.240 --> 00:29:09.140
But the Darwin build scripts take
care of a lot of this for you,

00:29:09.210 --> 00:29:12.300
which is another good reason to
use the Darwin build scripts.

00:29:13.810 --> 00:29:15.080
So, Darwin Build.

00:29:15.130 --> 00:29:20.070
Darwin Build is hosted at
darwinsource.opendarwin.org/darwinbuild.

00:29:20.080 --> 00:29:24.280
It's a specialized tool for
building the Darwin source code.

00:29:24.330 --> 00:29:26.640
It emulates Apple's
internal build environment,

00:29:26.640 --> 00:29:30.840
so it sets all the environment variables,
the source root, the obj root,

00:29:30.840 --> 00:29:35.490
the sim root, the dest root,
the deployment target, the uname release,

00:29:35.490 --> 00:29:36.500
all of them.

00:29:36.550 --> 00:29:42.350
And it cleanly handles private headers
and libraries by installing them into

00:29:42.410 --> 00:29:44.470
a directory called the build root.

00:29:44.510 --> 00:29:46.700
It'll grab all the pieces
it needs to build something,

00:29:46.880 --> 00:29:50.960
put them in there, produce the build,
and then copy out the sim root and

00:29:50.970 --> 00:29:54.820
the dest root into a well-known
location so you can inspect them and

00:29:54.820 --> 00:29:57.210
then install them on your system.

00:29:57.710 --> 00:30:01.360
The architecture of the star and
build script has three main parts.

00:30:01.440 --> 00:30:05.260
There's the property lists,
which are a normal XMLP list format.

00:30:05.260 --> 00:30:08.830
You can edit them using the
property list editor application.

00:30:08.840 --> 00:30:11.460
And it contains all the
project information.

00:30:11.460 --> 00:30:15.340
It contains the names of all the projects
in a particular release of Mac OS X.

00:30:15.340 --> 00:30:18.470
It contains all the versions of them,
the URLs where they

00:30:18.600 --> 00:30:22.730
can be downloaded from,
which projects, which header files,

00:30:22.730 --> 00:30:25.230
which libraries are needed
before you can successfully

00:30:25.230 --> 00:30:26.630
build each of these projects.

00:30:27.300 --> 00:30:29.360
the environment variables
that need to be set,

00:30:29.360 --> 00:30:31.000
everything.

00:30:31.320 --> 00:30:34.320
There's the Darwin XRef tool,
which will load in this property

00:30:34.390 --> 00:30:37.520
list and has the ability to
search it quickly to figure out

00:30:37.680 --> 00:30:39.800
exactly what environment's needed.

00:30:39.800 --> 00:30:42.040
And then there's the
Darwin build script itself,

00:30:42.100 --> 00:30:46.490
which uses all the information
available from Darwin XRef to actually

00:30:46.540 --> 00:30:50.720
carry out the action to build the
software and give you the end result.

00:30:52.350 --> 00:30:54.930
So here's a little flow
chart of what happens.

00:30:54.960 --> 00:30:57.560
The first step is you download
all the tools and you take

00:30:57.670 --> 00:30:59.080
a property list for a build.

00:30:59.190 --> 00:31:04.780
So since we're talking about Tiger here,
we'll be talking about build 8A428,

00:31:04.790 --> 00:31:07.720
and we load that into
the Darwin XRef tool.

00:31:07.720 --> 00:31:11.560
And I'll go over all the details in
the hands-on portion of the talk.

00:31:11.900 --> 00:31:14.540
Once that's done,
we can use Darwin Build to

00:31:15.070 --> 00:31:19.030
extract all the information and
actually issue the commands.

00:31:19.530 --> 00:31:23.580
What happens at this point is
the sources are copied from the

00:31:23.640 --> 00:31:26.080
source root into the build root.

00:31:26.210 --> 00:31:29.740
So in our example,
we were building the talk sources.

00:31:29.740 --> 00:31:32.820
It'll grab those sources,
copy them into the build root,

00:31:32.840 --> 00:31:36.500
along with any other intermediate
files that may be needed to build.

00:31:36.500 --> 00:31:41.450
And all the temporary build
results will go into the obj root.

00:31:41.950 --> 00:31:46.150
Once that's done,
it's going to produce all of the

00:31:46.310 --> 00:31:51.210
symboled versions in the symroot and
the final versions in the dustroot.

00:31:51.220 --> 00:31:54.800
And when the build is over with,
both the dustroot and the symroot will

00:31:54.800 --> 00:31:59.000
be copied out to a well-known location
where they're ready for you to use.

00:32:00.520 --> 00:32:03.840
So let's move to the
hands-on portion of the talk.

00:32:03.880 --> 00:32:06.670
And that's going to be the demo.

00:32:12.560 --> 00:32:15.730
So hopefully you've had
a chance to download the

00:32:15.730 --> 00:32:18.280
sample code from the website.

00:32:18.280 --> 00:32:20.650
If not,
it should still be useful to follow

00:32:20.650 --> 00:32:22.690
along as I type the commands.

00:32:22.740 --> 00:32:28.090
I'm not sure what the tar archive
was named when you downloaded it.

00:32:28.270 --> 00:32:33.100
In this example,
I have WWDC508 sample code.

00:32:33.100 --> 00:32:35.880
Maybe it's the same name, maybe it's not.

00:32:36.080 --> 00:32:39.100
And what we're gonna do is
change into the temp directory.

00:32:39.100 --> 00:32:41.140
It really doesn't matter
where you extract this.

00:32:41.190 --> 00:32:44.820
If you wanna use the temp directory,
you can follow along exactly

00:32:44.860 --> 00:32:48.410
with the commands I'll be typing,
but anywhere will work.

00:32:49.230 --> 00:32:55.340
And what I'm going to do is
extract using the tar command.

00:33:04.700 --> 00:33:06.700
And it's going to extract a lot of files.

00:33:06.700 --> 00:33:13.160
I'm going to clear the screen
here and change into that

00:33:13.270 --> 00:33:17.940
WWDC 508 sample code directory.

00:33:19.370 --> 00:33:22.490
Now when I list the directory,
this is the overall organization

00:33:22.520 --> 00:33:24.160
of the Darwin build scripts.

00:33:24.160 --> 00:33:27.680
There's the Darwin build route,
which is where all the

00:33:27.780 --> 00:33:29.560
building actually takes place.

00:33:29.650 --> 00:33:35.150
And what happens is a mini copy of
Mac OS X gets put into the build route,

00:33:35.170 --> 00:33:39.460
including the GCC compiler,
the lib system library,

00:33:39.460 --> 00:33:41.060
any of the other tools that are needed.

00:33:41.060 --> 00:33:43.940
And that's where all of
those intermediate libraries

00:33:43.940 --> 00:33:45.210
and headers are put.

00:33:45.360 --> 00:33:47.770
So when you're using Darwin build,
you don't have to worry about it

00:33:47.960 --> 00:33:50.980
polluting your system with header files
that wouldn't ordinarily be there.

00:33:50.980 --> 00:33:54.560
Everything it downloads and installs
will go into the build route directory.

00:33:54.560 --> 00:33:57.460
So it's really sandboxed
away from your system.

00:33:57.460 --> 00:33:59.200
It's not going to mess it up.

00:34:01.910 --> 00:34:06.630
The logs directory contains a
log of each build that you do.

00:34:06.760 --> 00:34:10.370
So all the output from the make
file and all of the environment

00:34:10.370 --> 00:34:13.660
variables that were set,
everything is logged and put in

00:34:13.770 --> 00:34:15.750
a log file in this directory.

00:34:17.300 --> 00:34:21.970
The sources directory is where
all of the sources are cached.

00:34:21.980 --> 00:34:25.220
So whenever you build a project,
it'll go download the sources from

00:34:25.220 --> 00:34:29.440
Open Darwin or from Apple's site,
and it'll store them in this directory.

00:34:29.440 --> 00:34:31.530
If you want to make a
modification to the sources,

00:34:31.530 --> 00:34:32.720
you can change into here.

00:34:32.720 --> 00:34:35.720
You can start editing the source files,
and that's what will be

00:34:35.720 --> 00:34:37.020
used when you do a build.

00:34:38.530 --> 00:34:42.490
The bin directory contains the
actual scripts that will be running,

00:34:42.530 --> 00:34:46.330
including the Darwin build
script and the Darwin XRef tool.

00:34:47.780 --> 00:34:51.440
The headers directory contains the
finished product of the header files

00:34:51.520 --> 00:34:53.580
of each project that you build.

00:34:53.640 --> 00:34:57.660
The roots directory contains the
finished product that's the dest

00:34:57.660 --> 00:35:00.880
root of each product that you build.

00:35:01.600 --> 00:35:05.160
Symbols directory will contain
the symboled output of each

00:35:05.160 --> 00:35:06.920
project that you build.

00:35:06.970 --> 00:35:11.220
That's what you can do the line
by line debugging with in GDB.

00:35:11.400 --> 00:35:15.210
And the plists directory contains
the property lists of each

00:35:15.220 --> 00:35:16.420
project that we're building.

00:35:21.700 --> 00:35:28.430
So, the first step is to load in
some of our property lists

00:35:28.430 --> 00:35:30.820
using the Darwin XRef tool.

00:35:30.820 --> 00:35:34.360
And we can use this,
or we can do this by using

00:35:34.360 --> 00:35:36.610
the load index command.

00:35:37.660 --> 00:35:42.870
And inside the plists directory,
there's an 8A428 plist,

00:35:42.870 --> 00:35:47.510
and that describes all of the open
source projects that are in Tiger.

00:35:51.700 --> 00:35:57.500
[Transcript missing]

00:36:08.510 --> 00:36:11.200
I think I had already used
this demo machine before,

00:36:11.200 --> 00:36:11.660
so.

00:36:11.660 --> 00:36:14.340
I'll skip ahead a step.

00:36:14.750 --> 00:36:17.520
Usually when doing a
lot of Darwin building,

00:36:17.520 --> 00:36:20.680
you're actually gonna need
to be doing this as root.

00:36:20.680 --> 00:36:24.980
The reason for that is most projects,
when they're being built,

00:36:24.980 --> 00:36:29.660
will change the ownerships and
groups of the files in the destroot.

00:36:29.670 --> 00:36:33.030
And on Unix, as you know,
the only way that you can change a

00:36:33.030 --> 00:36:37.140
file to a user other than yourself
is if you are the super user.

00:36:37.230 --> 00:36:41.610
So usually fairly early on,
you will need to use sudo to

00:36:41.610 --> 00:36:45.110
give yourself root access,
and that needs to be done before

00:36:45.110 --> 00:36:46.820
you use the Darwin build script.

00:36:51.800 --> 00:36:54.400
I'm gonna set my prompt back down
so it doesn't get in the way.

00:36:54.400 --> 00:37:03.900
Okay, so revisiting the command
that we just attempted,

00:37:03.980 --> 00:37:12.010
we'll use the Darwin XRef
tool to load the index,

00:37:12.010 --> 00:37:12.080
and the index we're
loading is the 8a428 plist.

00:37:20.100 --> 00:37:21.100
Oh, it's missing an S.

00:37:21.100 --> 00:37:26.930
Okay, finally success.

00:37:26.960 --> 00:37:32.830
So we can see there are 377 projects
that are open source in Tiger.

00:37:33.010 --> 00:37:36.220
All of them were loaded into our index.

00:37:37.580 --> 00:37:41.380
There's another feature that
the Darwin XRef tool has,

00:37:41.430 --> 00:37:46.000
and that is to query the
files that are in there.

00:37:46.040 --> 00:37:52.370
So for build 8A428,
if we're interested in knowing which

00:37:52.370 --> 00:37:57.100
version of the kernel was in that build,
we can ask for the version of XNU.

00:37:57.100 --> 00:37:59.440
That's the project name
that produces the kernel.

00:37:59.440 --> 00:38:02.660
You can see here that it was XNU-792.

00:38:02.660 --> 00:38:04.240
That's what's in Tiger.

00:38:04.240 --> 00:38:06.920
So this is a good tool that
you can use interactively to

00:38:07.290 --> 00:38:11.420
figure out which projects belong
to which release of Mac OS X.

00:38:14.830 --> 00:38:18.920
Another function is the ability to
look up which files are produced

00:38:18.920 --> 00:38:20.780
by each of these projects.

00:38:20.780 --> 00:38:25.780
And we can load the
database from a text file.

00:38:25.890 --> 00:38:30.230
So we'll use the load files command,
and that's also stored

00:38:30.250 --> 00:38:31.360
in the plist directories.

00:38:31.430 --> 00:38:32.970
There's a...

00:38:33.600 --> 00:38:37.430
Files-8a428 Text File.

00:38:39.250 --> 00:38:41.740
And what it's doing here is
it's actually loading in all

00:38:41.750 --> 00:38:46.610
the contents of the text file,
and that has project names and

00:38:46.610 --> 00:38:48.790
all the files that they produce.

00:38:50.940 --> 00:38:52.530
And when it's done with that,
we can actually do

00:38:52.530 --> 00:38:54.680
lookups and we can ask,
you know,

00:38:54.780 --> 00:38:56.100
here's a file that's on the disk.

00:38:56.110 --> 00:38:58.140
Which source project did it come from?

00:38:58.140 --> 00:39:03.500
So if we use the Darwin XRef tool,

00:39:04.140 --> 00:39:06.590
You can say find file,
and in this example,

00:39:06.590 --> 00:39:09.010
since we're going to be adding
Bonjour support to talk,

00:39:09.010 --> 00:39:13.400
we're probably interested
which project talk comes from.

00:39:14.230 --> 00:39:17.350
So we can see here that there's talk,
it was found several

00:39:17.350 --> 00:39:22.760
places on build 8a428,
but the one we're interested

00:39:22.760 --> 00:39:26.110
in is user bin talk,
and that comes from the network

00:39:26.110 --> 00:39:27.910
commands dash 245 project.

00:39:31.440 --> 00:39:36.750
Since internet connectivity may or may
not be working for some of you here,

00:39:36.750 --> 00:39:39.820
I've gone ahead and included
these sources already with

00:39:39.820 --> 00:39:41.780
the sample code download.

00:39:41.780 --> 00:39:44.980
But if you didn't have the
network commands 245 sources,

00:39:44.980 --> 00:39:47.280
DarwinBuild is actually
smart enough to go out to the

00:39:47.280 --> 00:39:48.780
network and find them for you.

00:39:52.540 --> 00:39:55.350
So if we change into
the sources directory,

00:39:55.350 --> 00:39:59.510
you can see here that we do
indeed have network commands 245.

00:39:59.510 --> 00:40:05.960
We can go ahead and
extract these sources.

00:40:11.320 --> 00:40:16.380
And all of the Darwin sources have a tar
archive containing a top level directory

00:40:16.380 --> 00:40:18.680
and only one top level directory.

00:40:18.690 --> 00:40:21.300
And that directory has the
same name as the tar archive,

00:40:21.300 --> 00:40:23.300
just without the .targz suffix.

00:40:23.300 --> 00:40:30.370
So network commands-245.tar.gz
will produce network commands-245.

00:40:30.550 --> 00:40:33.070
And that's the full sources of
this Network Commands project,

00:40:33.070 --> 00:40:35.250
which as you can see,
has a lot of other things in

00:40:35.250 --> 00:40:36.840
addition to the talk utility.

00:40:40.460 --> 00:40:43.260
We can go ahead and
inspect this diff file.

00:40:43.260 --> 00:40:47.030
The diff is a standard patch file,
which I've included,

00:40:47.140 --> 00:40:52.520
and this is what will actually add in
the Bonjour support to network commands.

00:40:54.390 --> 00:40:56.700
So you can see here,
I've actually gone through and

00:40:56.700 --> 00:40:59.840
disabled a lot of these other
commands from being built in the

00:40:59.930 --> 00:41:02.120
interest of keeping this demo short.

00:41:02.120 --> 00:41:07.610
And what we've added in are,

00:41:10.010 --> 00:41:18.120
A few things like a new browse.c file.

00:41:18.120 --> 00:41:18.120
This is what contains the Bunger
browsing for the talk command.

00:41:18.610 --> 00:41:24.640
We can see it actually
adds in a few new flags,

00:41:24.770 --> 00:41:28.370
like yes,
we are using the DNS service discovery,

00:41:28.370 --> 00:41:31.610
which is the technical term for Bonjour.

00:41:32.320 --> 00:41:36.120
And scrolling down,
there's a lot of Bonjour-specific

00:41:36.200 --> 00:41:41.190
code that's being added in to
the network commands project.

00:41:43.590 --> 00:41:47.480
So to apply this patch to
our network command sources,

00:41:47.480 --> 00:41:49.850
we can use the patch command.

00:41:49.850 --> 00:41:55.140
And based on the style of the patch,
we're going to use patch level zero

00:41:55.240 --> 00:41:58.660
and pipe in the network commands diff.

00:42:02.250 --> 00:42:05.070
And that'll actually go through
and change all of those source

00:42:05.070 --> 00:42:10.020
files in the network commands
project to do all the modifications.

00:42:10.020 --> 00:42:11.710
You can see here,
it actually patched a lot of

00:42:11.710 --> 00:42:15.790
files and created some new ones,
including the new browse.c

00:42:15.790 --> 00:42:18.720
file for the talk command.

00:42:18.740 --> 00:42:23.760
Another part of our, another part of our,
our, our, our, our,

00:42:24.010 --> 00:42:26.540
Demo will be adding in a PAM plugin.

00:42:26.630 --> 00:42:29.580
PAM is the Plugable
Authentication Modules interface.

00:42:29.580 --> 00:42:31.870
And what this is going
to do is it's actually,

00:42:31.870 --> 00:42:34.040
every time you log in,
it'll register with

00:42:34.040 --> 00:42:35.850
Bonjour that you are logged in.

00:42:35.850 --> 00:42:38.270
And that's the heart of the demo is talk.

00:42:38.390 --> 00:42:40.800
We'll be able to browse
all of those registrations,

00:42:40.800 --> 00:42:43.910
see who's logged in on your machine,
and you'll be able to pick and

00:42:43.910 --> 00:42:45.570
choose the logins from a list.

00:42:50.460 --> 00:42:52.580
So if we change back to
the directory we were in,

00:42:52.630 --> 00:42:55.020
and again,
this is that top level directory that has

00:42:55.020 --> 00:42:57.240
the general organization of DarwinBuild.

00:42:57.240 --> 00:42:59.540
There's one more thing we
need to do for this demo.

00:42:59.540 --> 00:43:03.100
It's only done for the
sake of expediency here,

00:43:03.100 --> 00:43:10.430
and that is we'll load in a
WWDC property list that has some

00:43:10.430 --> 00:43:14.340
special values for this demo,
just so you don't have

00:43:14.340 --> 00:43:17.380
to go out to the network,
and you can build these

00:43:17.380 --> 00:43:19.600
projects a little bit quicker.

00:43:26.870 --> 00:43:29.760
So basically this is a
copy of that 8a428p list,

00:43:29.760 --> 00:43:33.770
the Tiger property list,
but it has a few changes.

00:43:34.580 --> 00:43:39.600
So, what we can do now is we can
actually go ahead and build

00:43:39.600 --> 00:43:42.300
the network commands project.

00:43:42.970 --> 00:43:46.680
And we can do this using
the Darwin build tool.

00:43:46.830 --> 00:43:50.700
And Darwin build takes a build argument,

00:43:50.840 --> 00:43:54.770
So if you're gonna be
building for say 8A428,

00:43:54.770 --> 00:43:58.120
or in this case, we're gonna be building
for the WWDC build,

00:43:58.120 --> 00:44:00.560
which is just a little
hack for efficiency,

00:44:00.560 --> 00:44:01.920
you can specify it here.

00:44:02.180 --> 00:44:06.830
If you want Darwin build to
download all of those intermediate

00:44:06.890 --> 00:44:11.700
libraries and header files for you,
you can give it the chroot option,

00:44:11.720 --> 00:44:14.900
and that tells it to do everything
entirely within the build root and

00:44:14.900 --> 00:44:17.380
make that a self-contained environment.

00:44:17.620 --> 00:44:20.820
And then all you need to do
is give it the name of the

00:44:20.870 --> 00:44:22.540
project that you want to build.

00:44:22.550 --> 00:44:24.000
In this case, network commands.

00:44:27.100 --> 00:44:30.640
What it's doing now is it's actually
copying things from the build root

00:44:30.640 --> 00:44:34.840
and the various sources directory,
I'm sorry, from the various sources

00:44:34.840 --> 00:44:37.040
directories into the build root.

00:44:37.550 --> 00:44:40.030
- And once it's done that,
it goes through and it actually

00:44:40.030 --> 00:44:42.900
did a whole build right
there of the talk command,

00:44:42.930 --> 00:44:46.940
and you can see these are all the
files that were produced by the build.

00:44:46.980 --> 00:44:53.620
Everything scrolled by rather fast,
but it keeps a log for us

00:44:53.620 --> 00:44:53.620
in that logs directory.

00:44:54.310 --> 00:44:56.300
So let me list the logs directory.

00:44:56.300 --> 00:44:59.530
So inside the logs directory,
there's a subdirectory for

00:44:59.590 --> 00:45:01.460
each different project name.

00:45:02.850 --> 00:45:07.180
You can see here you have network
commands dash 245 dot log tilde one,

00:45:07.180 --> 00:45:10.640
and network commands dash
245 dot log tilde two.

00:45:10.640 --> 00:45:14.890
What the number after the tilde
means is the attempt of each build,

00:45:14.890 --> 00:45:17.590
and that'll just be incremented
by one with each attempt.

00:45:17.600 --> 00:45:20.120
So every time you task it to
build network commands 245,

00:45:20.120 --> 00:45:21.800
it's going to add one to that number.

00:45:21.800 --> 00:45:25.280
And this basically lets you
compare the log from the last

00:45:25.420 --> 00:45:28.420
build to the current build,
see what might have changed,

00:45:28.420 --> 00:45:30.580
see if you fixed the bug
that you were hoping to fix.

00:45:31.140 --> 00:45:35.070
The reason why there's a tilde one in
there is that was already there when

00:45:35.420 --> 00:45:38.830
the sample code was provided to you,
and the build that we did

00:45:38.830 --> 00:45:40.760
just now produced tilde two.

00:45:40.760 --> 00:45:47.430
So if we actually look at
the contents of that file...

00:45:53.620 --> 00:45:56.620
Then we can see what happened
when we asked for the

00:45:56.620 --> 00:45:58.870
network commands to be built.

00:45:59.750 --> 00:46:04.910
You can see here a little header that
kind of describes what's going on.

00:46:04.910 --> 00:46:12.390
So it's building network commands 245,
attempt number two on the current date.

00:46:13.790 --> 00:46:21.400
has a list of some important information,
including which version of

00:46:21.400 --> 00:46:26.100
the compiler tools is used.

00:46:26.290 --> 00:46:27.260
So inside our build route,
it knows that we need to use GCC 3.3,

00:46:27.260 --> 00:46:27.260
and it set it up appropriately.

00:46:28.530 --> 00:46:34.600
It also indicates which version
of ccTools was used that

00:46:34.600 --> 00:46:34.600
contains the GNU assembler.

00:46:35.500 --> 00:46:40.610
It'll go on and list out all of the
environment variables that were set.

00:46:42.740 --> 00:46:45.520
You can see that the
environment variables,

00:46:45.520 --> 00:46:48.650
which appear to be in alphabetical order,
contain things like

00:46:48.840 --> 00:46:52.910
Full path for the dest root,
a full path for the object root,

00:46:52.910 --> 00:46:57.010
the right deployment target,
and all the other variables

00:46:57.010 --> 00:46:59.720
which I had talked about earlier.

00:47:01.400 --> 00:47:05.770
After setting up the environment,
it'll actually issue the command to make.

00:47:05.810 --> 00:47:09.120
You can see the right way to do
this would be to say make install,

00:47:09.120 --> 00:47:11.590
and then take a lot of those
same environment variables and

00:47:11.590 --> 00:47:13.170
actually pass them as arguments.

00:47:13.180 --> 00:47:16.020
Some of the make files will
use the environment variables,

00:47:16.020 --> 00:47:18.770
some of the make files actually
expect it to be arguments,

00:47:18.800 --> 00:47:20.600
so to be safe, it's best to do both.

00:47:20.700 --> 00:47:23.160
To both set the environment
variable and pass it as an

00:47:23.160 --> 00:47:24.740
argument to the make command.

00:47:27.000 --> 00:47:30.680
And this is where the actual
build log takes place.

00:47:30.750 --> 00:47:34.620
All of the following commands
are things that were output

00:47:34.620 --> 00:47:37.810
after the make had started.

00:47:39.710 --> 00:47:43.540
So,
now we can look in the roots directory.

00:47:43.540 --> 00:47:48.550
And in the roots directory,
we also have a,

00:47:48.730 --> 00:47:51.620
- This is the sub directory,
that's network commands.

00:47:51.620 --> 00:47:57.630
And you can see that there's a network
commands dash 245 dot root tilde two.

00:47:57.700 --> 00:48:03.260
And that is the finished product of what
was built at the same time we captured

00:48:03.260 --> 00:48:06.210
that log that we were just looking at.

00:48:06.210 --> 00:48:10.520
And inside here,
there's the user directory.

00:48:11.130 --> 00:48:12.510
Change this to a find command.

00:48:12.520 --> 00:48:14.610
We can actually list everything
that's in that directory.

00:48:14.720 --> 00:48:16.950
And you can see there's user bin talk.

00:48:16.950 --> 00:48:20.950
There's our PAM module,
which we'll be installing to

00:48:21.130 --> 00:48:22.840
register our logins with Funger.

00:48:22.840 --> 00:48:26.770
And then there's a man
page for each of them.

00:48:29.990 --> 00:48:32.360
In order to give you an example
of how you can use this open

00:48:32.360 --> 00:48:36.950
source for line-by-line debugging,
what I'm going to do now

00:48:37.510 --> 00:48:39.170
is do a build for the

00:48:39.320 --> 00:48:44.200
- So, we're going to do build
wwdc in the chroot,

00:48:44.200 --> 00:48:48.280
and we're going to be building ncurses.

00:48:49.340 --> 00:48:52.230
This is going to copy files
in to the build route and

00:48:52.230 --> 00:48:53.340
start building end curses.

00:48:53.340 --> 00:48:56.460
End curses will actually
take a little while to build,

00:48:56.460 --> 00:49:00.240
so I'm going to cancel out of this
and use the pre-built version that

00:49:00.240 --> 00:49:01.760
was supplied in the sample code.

00:49:01.760 --> 00:49:04.930
If you want, you can let this finish,
or you can just cancel it

00:49:04.930 --> 00:49:07.960
at the same time and we can
use the pre-built version.

00:49:10.200 --> 00:49:12.120
So I'm canceling it.

00:49:12.180 --> 00:49:16.160
So assuming that build succeeded,
it would put the finished

00:49:16.200 --> 00:49:17.690
product into roots.

00:49:17.700 --> 00:49:19.790
There's end curses.

00:49:20.100 --> 00:49:25.110
anchors 15.root tilde one
is the finished product.

00:49:25.480 --> 00:49:28.600
But in this case,
we want to use the symboled versions,

00:49:28.640 --> 00:49:28.880
right?

00:49:28.990 --> 00:49:32.900
We want to actually do some
line-by-line debugging using GDB.

00:49:32.900 --> 00:49:37.690
Now,
one of the things that Apple sets up when

00:49:37.740 --> 00:49:42.920
it builds all of its Mac OS X sources
is to set the source cache directory,

00:49:42.950 --> 00:49:44.850
and that's where all these sources go.

00:49:45.030 --> 00:49:48.560
So what we'll do is
we'll make a SIM link,

00:49:48.580 --> 00:49:52.400
and we're gonna link into our build root,

00:49:53.840 --> 00:49:58.600
So we have temp, WWDC, underbar 508,
underbar sample code.

00:49:58.660 --> 00:50:02.270
That was that sample code
directory that we extracted.

00:50:02.780 --> 00:50:08.580
In the build route,
there is a source cache directory.

00:50:09.800 --> 00:50:13.400
And we're gonna make a link at
the root level source cache.

00:50:13.400 --> 00:50:17.540
So when we're done, we'll see that.

00:50:18.660 --> 00:50:22.670
Source cache points to the
one that's in our build root.

00:50:22.670 --> 00:50:29.790
What we can do at this
point is actually use GDB.

00:50:30.000 --> 00:50:34.570
And if we look in the symbols directory,
there's a network commands subdirectory,

00:50:34.570 --> 00:50:36.520
as you might expect.

00:50:37.070 --> 00:50:42.820
There's a network commands
dash 245 dot sim tilde two,

00:50:42.820 --> 00:50:46.040
or if you haven't built it,
you can do tilde one,

00:50:46.040 --> 00:50:47.900
which was the pre-installed version.

00:50:49.710 --> 00:50:52.800
And then there's the talk command.

00:50:52.800 --> 00:50:55.430
That's a fully symboled
version of talk right here.

00:50:55.440 --> 00:51:00.600
So we've started talk in GDB.

00:51:00.970 --> 00:51:04.870
There's an environment variable which
you can use that overrides the default

00:51:04.970 --> 00:51:07.630
search path for libraries on the system.

00:51:07.690 --> 00:51:11.580
And what we can do is we can
point the library path to the

00:51:11.580 --> 00:51:13.380
symboled version of end curses.

00:51:13.380 --> 00:51:17.280
So if we set our environment,

00:51:18.200 --> 00:51:23.400
[Transcript missing]

00:51:25.100 --> 00:51:35.970
We can actually set that to
temp-wwc-508-sample-code:

00:51:35.970 --> 00:51:35.970
symbols-wwc-508-sample-code:

00:51:37.810 --> 00:51:42.850
Ncurses 15.SIM.TILDA1

00:51:45.830 --> 00:51:49.200
Sorry, there's a top level directory
that has just the directory name.

00:51:49.200 --> 00:51:53.550
So, ncursors/ncursors-15.sim-1.

00:51:57.250 --> 00:52:00.200
And then in this directory,
if we were to have

00:52:00.200 --> 00:52:03.570
browsed around beforehand,
you would see that there's a lib

00:52:03.570 --> 00:52:07.010
directory followed by another
lib directory followed by,

00:52:07.010 --> 00:52:09.780
or actually we don't need to
specify the library itself,

00:52:09.780 --> 00:52:11.530
we just need to give it the path.

00:52:11.600 --> 00:52:15.050
So it'll find the
NCRISIS library in here.

00:52:17.190 --> 00:52:22.260
Now we can set a breakpoint at main,
which will be the main function of talk,

00:52:22.260 --> 00:52:24.800
and you can see that's in talk.c.

00:52:24.800 --> 00:52:28.320
And we can also set a
breakpoint at init screen,

00:52:28.320 --> 00:52:33.920
which is the initialized function
for the endcurses library,

00:52:33.920 --> 00:52:36.320
which does all the screen
drawing in the terminal.

00:52:43.790 --> 00:52:47.910
Now I can run and we'll
do the --list argument.

00:52:48.000 --> 00:52:52.190
So what we're gonna say is we wanna list
out all of the Bonjour registrations

00:52:52.250 --> 00:52:54.510
that are available to talk with.

00:52:56.800 --> 00:53:00.160
You can see here we've stopped
at line one of the main program,

00:53:00.160 --> 00:53:02.770
or of the main function
in the talk program.

00:53:04.790 --> 00:53:07.430
We can use next to step line by line.

00:53:07.430 --> 00:53:10.960
When we continue,
we should break at the init screen

00:53:10.960 --> 00:53:13.800
function inside the ncursors library.

00:53:15.300 --> 00:53:19.030
And sure enough,
we have a break at init screen,

00:53:19.030 --> 00:53:22.390
although I don't see the source there.

00:53:22.400 --> 00:53:31.710
I might have given you
the wrong directory here.

00:53:43.710 --> 00:53:45.360
- Can you put out a GDB for a second?

00:53:45.360 --> 00:53:48.420
Uh-huh.

00:53:48.420 --> 00:53:55.980
So we had a mistake in our path.

00:53:59.880 --> 00:54:05.520
Okay, so starting from the top quickly,
if you're still on GDB,

00:54:05.520 --> 00:54:07.180
we'll catch up with you there.

00:54:10.780 --> 00:54:18.180
So we're gonna do a GDB of symbols,
network commands, networkcommands.sim,

00:54:18.180 --> 00:54:18.180
tilde two,

00:54:22.700 --> 00:54:29.500
[Transcript missing]

00:54:31.100 --> 00:54:33.480
To the same thing we did before,
what we were missing

00:54:33.480 --> 00:54:37.110
was this directory here,
the /user.

00:54:39.440 --> 00:54:43.830
And when we set that environment,
now we should be able to set

00:54:43.830 --> 00:54:50.980
a breakpoint at main and set
a breakpoint at init screen.

00:54:56.400 --> 00:54:59.320
We can run again with
the --list argument.

00:54:59.320 --> 00:55:06.190
We have our breakpoint at main,
and if we continue,

00:55:06.560 --> 00:55:08.450
We have our breakpoint out in its screen.

00:55:08.510 --> 00:55:11.800
So this is actually source code
that's in that NCurses library,

00:55:11.800 --> 00:55:14.720
which is the library that's used by Talk.

00:55:14.840 --> 00:55:17.500
It's a standard system library,
so you can use this approach when

00:55:17.500 --> 00:55:19.740
you're debugging your own applications.

00:55:19.740 --> 00:55:24.620
And you can see that we can actually
step inside the dynamic library.

00:55:24.620 --> 00:55:27.080
We can do line-by-line debugging in here.

00:55:27.120 --> 00:55:32.020
We can print the values of the variables.

00:55:32.080 --> 00:55:35.290
So this is actually pretty useful stuff.

00:55:37.340 --> 00:55:40.320
Now that we've demoed the debugging,
let's see the whole thing in action

00:55:40.320 --> 00:55:44.590
and see how we can actually install
this modified version of Talk onto our

00:55:44.590 --> 00:55:46.860
Mac OS X system and see what it does.

00:55:51.350 --> 00:55:56.300
So, like I was saying earlier,
it's really important to make backups.

00:55:56.300 --> 00:56:01.300
So we're gonna be copying the
userbin talk utility out of the

00:56:01.300 --> 00:56:04.300
dest root and into the base system.

00:56:04.340 --> 00:56:08.220
Before we do that,
we want to set a copy aside so we

00:56:08.220 --> 00:56:11.650
can restore from it once we're done.

00:56:12.210 --> 00:56:18.880
So let's copy userbin-talk
to userbin-talk.original.

00:56:21.030 --> 00:56:27.870
Now we can copy from our roots directory,
which has the finished

00:56:27.870 --> 00:56:27.870
product of network commands,

00:56:28.370 --> 00:56:34.950
Network commands -245.root tilde
two is our finished product.

00:56:35.390 --> 00:56:43.100
And user bin talk can be copied
into the real user bin talk.

00:56:45.230 --> 00:56:48.400
We also have our PAM module,
which we want to install.

00:56:48.400 --> 00:56:53.370
There wasn't anything there originally,
so there's no backup copy to make.

00:56:53.440 --> 00:56:56.100
We're just installing something new.

00:57:03.730 --> 00:57:06.130
And that is stored in user share.

00:57:06.140 --> 00:57:13.200
No, it's not user share.

00:57:15.560 --> 00:57:23.690
These are lib, pam, pammdnsregister.so,

00:57:27.090 --> 00:57:33.910
So we're gonna copy that into
the real user libpam directory.

00:57:35.640 --> 00:57:39.870
Now, there's two configuration
files that we'll need to edit

00:57:39.870 --> 00:57:41.960
in order to activate this.

00:57:41.960 --> 00:57:41.960
Kevin Van Vechten

00:57:42.370 --> 00:57:47.800
One is the /etc/pam.d
directory login file.

00:57:47.800 --> 00:57:53.190
So this is the list of all
the PAM modules that should be

00:57:53.190 --> 00:57:55.080
activated when you do a login.

00:57:55.130 --> 00:57:59.450
And we're gonna copy that
aside so we have a backup copy.

00:57:59.460 --> 00:58:02.880
We're gonna copy that to login.original.

00:58:02.880 --> 00:58:06.820
And then we're going to edit it.

00:58:06.820 --> 00:58:11.990
Actually, we can use VI to edit it.

00:58:20.000 --> 00:58:25.880
You can open a new line
by typing lowercase o.

00:58:26.060 --> 00:58:29.040
This is going to be a session plugin.

00:58:29.040 --> 00:58:30.020
It's just optional.

00:58:30.160 --> 00:58:33.280
It's not required for
logging in successfully.

00:58:33.320 --> 00:58:37.520
And the plugin is pammdnsregister.so.

00:58:37.520 --> 00:58:42.950
You can hit the escape key
to get out of edit mode.

00:58:43.150 --> 00:58:45.540
The colon key to do a command.

00:58:45.540 --> 00:58:47.340
We're gonna write this file.

00:58:47.340 --> 00:58:51.800
You can do that with write,
or some way with W exclamation.

00:58:52.010 --> 00:58:54.650
So we've written the
file back out to disk,

00:58:54.650 --> 00:58:58.010
and then colon Q will quit VI.

00:58:58.760 --> 00:59:03.040
The second thing we need to do is
start the talk server on our system.

00:59:03.040 --> 00:59:05.380
And in Tiger,
there's a new facility for doing this.

00:59:05.380 --> 00:59:06.770
It's called LaunchD.

00:59:06.780 --> 00:59:11.880
There's the launch control program.

00:59:13.290 --> 00:59:17.220
We'll want to actually load
in a new daemon on the system,

00:59:17.220 --> 00:59:19.340
which is the talk daemon.

00:59:19.970 --> 00:59:25.080
And basically how that's done is you load
and unload property lists into LaunchD,

00:59:25.080 --> 00:59:28.640
which will then activate
the write system service.

00:59:28.700 --> 00:59:31.020
And that property list is
already on your system.

00:59:31.020 --> 00:59:33.460
It's in system library.

00:59:34.010 --> 00:59:36.240
Launch demons.

00:59:36.240 --> 00:59:41.030
And the one we're loading is ntalk.plist.

00:59:42.950 --> 00:59:48.130
So now we're running talk on our system,
and we also have a PAM module

00:59:48.160 --> 00:59:50.980
which will register us with
Bonjour every time we log in.

00:59:52.640 --> 00:59:55.890
So let's try a new login.

00:59:55.910 --> 00:59:59.380
I just did that by creating
a new terminal window.

01:00:01.900 --> 01:00:04.300
will make the font size big
enough for everyone to see.

01:00:04.300 --> 01:00:09.960
There's a DNS SD command,
which if we give it the -b argument,

01:00:09.960 --> 01:00:14.950
that means we want to
browse Bunger registrations.

01:00:14.960 --> 01:00:18.920
We're looking for ntalk, oops.

01:00:19.900 --> 01:00:28.700
[Transcript missing]

01:00:30.700 --> 01:00:32.200
I'm sorry, it's an uppercase B.

01:00:32.200 --> 01:00:37.370
And you can see here that there is
actually one registration that was

01:00:37.370 --> 01:00:39.860
listed out on the local domain.

01:00:39.880 --> 01:00:42.840
That's ntalk.tcp.

01:00:42.850 --> 01:00:46.600
And the text is Apple,
that's my username right now,

01:00:46.630 --> 01:00:54.120
at the local host, and I am in TTY,
P2 is my terminal name.

01:00:54.550 --> 01:00:59.580
So if we go back to where
our talk command is,

01:00:59.580 --> 01:01:06.100
if we actually run talk with --list,
there you see a list.

01:01:06.180 --> 01:01:07.410
Here's my registration.

01:01:07.410 --> 01:01:12.840
Hopefully if you guys are on the network,
you can see each other appearing here.

01:01:12.840 --> 01:01:17.270
If I create more login sessions,
more people will be added to the list.

01:01:23.600 --> 01:01:35.520
When using the arrow keys,
you can select one from the list.

01:01:36.070 --> 01:01:36.070
We'll send a talk request to that person.

01:01:36.070 --> 01:01:36.070
I don't know why it just quit.

01:01:36.960 --> 01:01:39.850
Anyway,
that's basically how you would go about

01:01:39.990 --> 01:01:46.560
using the Darwin build scripts to modify
some built-in component of Mac OS X.

01:01:53.500 --> 01:01:58.500
Real quick, I'll go through the steps
of restoring your system.

01:01:58.500 --> 01:02:02.970
Is the demo screen back on?

01:02:03.600 --> 01:02:09.590
Okay,
if we simply move this /etc/pam.d/login

01:02:09.590 --> 01:02:16.780
original file back to /etc/pam.d/login,

01:02:19.400 --> 01:02:22.070
I'll restore your original PAM settings.

01:02:22.080 --> 01:02:29.950
We can move userbin_talk.original
back to userbin_talk.

01:02:31.100 --> 01:02:45.810
You can remove user lib
pam_mdnsregister.so,

01:02:45.810 --> 01:02:45.810
and we can unload the talk launch daemon.

01:02:47.800 --> 01:02:53.500
[Transcript missing]

01:02:55.610 --> 01:02:57.660
and talk.plist.

01:02:57.690 --> 01:03:01.100
And your system should be
back to its original state.

01:03:02.580 --> 01:03:08.240
Now, I think we can move ahead to
the question and answer period.

01:03:12.880 --> 01:03:16.640
Anyone have any questions in general
about using Apple's open source,

01:03:16.640 --> 01:03:18.400
building projects for Darwin?

01:03:18.400 --> 01:03:23.530
Please step up to a microphone
if you have a question.