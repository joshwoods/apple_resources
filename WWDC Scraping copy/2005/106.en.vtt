WEBVTT

00:00:07.370 --> 00:00:09.860
Welcome to session 106.

00:00:09.960 --> 00:00:13.970
The goal of this session is to
show you how to build an installer

00:00:14.580 --> 00:00:16.960
package for Mac OS X Tiger.

00:00:18.900 --> 00:00:20.200
My name is Jean-Pierre Ciudaad.

00:00:20.200 --> 00:00:23.400
I work on installation and
setup at Apple Computer.

00:00:23.530 --> 00:00:25.380
First of all, this is a hands-on session.

00:00:25.570 --> 00:00:29.140
This means that with the
WWDC CD that you have,

00:00:29.140 --> 00:00:32.190
you have a set of examples that
are the same as the ones that

00:00:32.190 --> 00:00:33.700
we're going to show you here today.

00:00:33.830 --> 00:00:37.870
So you can either watch us go through it,
or you can also go through it

00:00:38.130 --> 00:00:40.110
yourself on your own machine.

00:00:40.660 --> 00:00:45.600
What we're going to show you today
is how to build a simple package.

00:00:45.670 --> 00:00:48.540
Then in addition to that,
we will show you how to use a new

00:00:48.540 --> 00:00:53.040
feature in the Tiger Installer
called Distribution Scripts.

00:00:53.120 --> 00:00:57.260
This feature allows you to take
control of the UI and also to

00:00:57.260 --> 00:00:59.530
express requirement checks.

00:00:59.660 --> 00:01:03.150
Requirement checks are the conditions
that need to be met in order to allow

00:01:03.160 --> 00:01:07.300
the installation of your package
on a specific machine or on the

00:01:07.300 --> 00:01:09.910
specific volume on that machine.

00:01:10.170 --> 00:01:13.480
In addition to that,
it also allows you to control

00:01:13.820 --> 00:01:17.320
exactly what gets installed
on the user's machine,

00:01:17.320 --> 00:01:18.800
on the user's disk.

00:01:19.210 --> 00:01:21.600
We've also provided you
with a set of homeworks.

00:01:21.650 --> 00:01:24.380
So don't worry,
this is not work that you need to do.

00:01:24.420 --> 00:01:29.940
This is just a set of sample code
that highlight new features in

00:01:29.940 --> 00:01:35.400
Tiger using distribution scripts,
things like multiple CD installation

00:01:35.420 --> 00:01:38.040
and also relocatable installs.

00:01:39.280 --> 00:01:41.540
So what's an installer package?

00:01:41.570 --> 00:01:45.030
An installer package is the document
that is actually used by the installer

00:01:45.480 --> 00:01:47.280
to put files on your hard disk.

00:01:47.300 --> 00:01:52.040
Installer packages contain your software,
obviously.

00:01:52.080 --> 00:01:55.460
It also contains a set of scripts
that will be run before and after

00:01:55.460 --> 00:01:57.540
your software gets installed.

00:01:57.570 --> 00:02:00.300
It contains requirement checks
that I mentioned earlier,

00:02:00.320 --> 00:02:04.030
and it contains also
a set of UI resources.

00:02:05.590 --> 00:02:08.260
So how do you create a package?

00:02:08.400 --> 00:02:12.390
Well, the first thing you want to
do is to divide your product

00:02:12.390 --> 00:02:15.140
into a collection of packages.

00:02:15.210 --> 00:02:16.820
Now, this is not mandatory.

00:02:16.890 --> 00:02:21.120
You can very well package all
your files into one package.

00:02:21.190 --> 00:02:24.750
But sometimes it's easier
if you actually divide your

00:02:24.850 --> 00:02:26.880
product into several packages.

00:02:27.120 --> 00:02:27.510
Why?

00:02:28.070 --> 00:02:30.500
For example,
some of the files that you are

00:02:30.500 --> 00:02:33.180
installing may be relocatable.

00:02:33.320 --> 00:02:37.570
You may want to allow the user to move
some files to a different destination

00:02:37.670 --> 00:02:40.120
other than the one you picked for them.

00:02:40.530 --> 00:02:44.050
Some of the files you've
installed may require a

00:02:44.050 --> 00:02:46.820
different level of authorization.

00:02:47.140 --> 00:02:50.680
Some files require root authorization,
others may require admin,

00:02:50.710 --> 00:02:53.060
others may not require
any authorization at all.

00:02:53.260 --> 00:02:56.240
This is the case, for example,
for files that you want to copy

00:02:56.250 --> 00:02:59.150
into the user's home directory.

00:02:59.690 --> 00:03:04.500
So the best way to look at it is that
you may want to divide your product into

00:03:04.680 --> 00:03:09.300
as many packages as you can according
to the criteria I just mentioned.

00:03:09.370 --> 00:03:12.510
Small granularity allows
for more flexibility.

00:03:12.660 --> 00:03:18.610
One of the new features in Tiger is that
we allow you to match one line in custom

00:03:18.610 --> 00:03:21.060
install with more than one package.

00:03:21.140 --> 00:03:25.390
So it will be up to you to reorganize
the packages the way you want.

00:03:28.150 --> 00:03:30.290
A couple more things that
are really important.

00:03:30.290 --> 00:03:32.810
It's bundle identifiers
for your packages.

00:03:32.830 --> 00:03:37.100
Bundle identifiers are very
important and they need to be unique.

00:03:37.140 --> 00:03:39.920
If you divided your
product into 12 packages,

00:03:40.080 --> 00:03:43.340
you need to make sure that those 12
packages have a different bundle ID.

00:03:43.340 --> 00:03:48.470
The reason for that is because bundle
IDs are used by the installer when you

00:03:48.470 --> 00:03:52.230
try to upgrade from an older version
of your software to a newer version.

00:03:52.230 --> 00:03:56.580
The way it works,
if you're installing version 2.0

00:03:56.580 --> 00:04:01.080
of your app that's in the package,
the installer is going to look at the

00:04:01.080 --> 00:04:05.590
library receipts directory and try to
find a receipt that has the same bundle

00:04:05.590 --> 00:04:07.900
ID for a software that's version 1.0.

00:04:07.920 --> 00:04:10.950
And it will upgrade
automatically 1.0 to 2.0.

00:04:10.960 --> 00:04:13.320
You want to make sure that the installer
always has the same bundle ID for

00:04:13.320 --> 00:04:13.320
the software that's version 1.0.

00:04:13.320 --> 00:04:15.470
You want to make sure that the installer
always upgrades the right thing.

00:04:15.540 --> 00:04:16.760
Otherwise, you're in trouble.

00:04:16.760 --> 00:04:18.940
The installer may delete files
that you don't want it to delete.

00:04:19.000 --> 00:04:22.040
So remember,
bundle IDs are very important

00:04:22.040 --> 00:04:23.010
and they need to be unique.

00:04:27.330 --> 00:04:29.980
One of the things you need to do before
you actually create your package,

00:04:30.010 --> 00:04:34.500
you need to decide for each package what
is going to be the default location.

00:04:34.580 --> 00:04:37.640
If you're installing an application,
the default location will

00:04:37.700 --> 00:04:39.560
be obviously /applications.

00:04:39.590 --> 00:04:41.760
A font, it will be library font.

00:04:41.840 --> 00:04:46.140
A kernel extension,
it will be system library extension.

00:04:47.900 --> 00:04:51.950
The reason why it's important to pick a
default location is because this default

00:04:52.030 --> 00:04:55.790
location will be used to install your
software if the user clicks continue,

00:04:55.790 --> 00:04:57.470
continue, continue.

00:04:57.530 --> 00:04:59.840
So the user doesn't want
to customize anything,

00:04:59.840 --> 00:05:03.520
so you need to tell the installer
where to put the files by default.

00:05:03.580 --> 00:05:06.830
In addition to that,
the default location is used when

00:05:06.830 --> 00:05:09.460
the user wants to relocate a package.

00:05:09.460 --> 00:05:11.920
That will be the starting point.

00:05:14.190 --> 00:05:17.760
So, to create the package,
you're going to use a tool

00:05:17.770 --> 00:05:19.660
that we provided you with.

00:05:19.690 --> 00:05:22.660
It's located in
Developer Application Utilities.

00:05:22.660 --> 00:05:23.640
It's called PackageMaker.

00:05:23.640 --> 00:05:26.400
It allows you to create simple packages.

00:05:26.400 --> 00:05:30.000
And as a matter of fact,
for the purpose of this session,

00:05:30.000 --> 00:05:33.960
we will be using four packages that
have been created with PackageMaker.

00:05:33.960 --> 00:05:37.080
And we'll actually go through
the creation of one using

00:05:37.130 --> 00:05:39.140
PackageMaker in a few minutes.

00:05:40.460 --> 00:05:44.410
PackageMaker is a graphical application,
but we also provide you with

00:05:44.410 --> 00:05:47.750
a command line tool so you can
integrate the building of your

00:05:47.750 --> 00:05:49.160
package within your build scripts.

00:05:49.160 --> 00:05:52.880
So, let's look at the first hands-on.

00:05:55.580 --> 00:05:57.600
So what we're gonna do,
we're just gonna create one

00:05:57.600 --> 00:06:00.330
of the packages that you will
be using during this session.

00:06:00.340 --> 00:06:05.800
If you go to the hands-on folder,
hands-on one, Package Maker,

00:06:07.740 --> 00:06:10.220
You have two folders, Finished and Start.

00:06:10.220 --> 00:06:13.300
In the Finished folder,
we put there the four packages

00:06:13.300 --> 00:06:16.420
that you will be using so you
don't actually have to build it

00:06:16.490 --> 00:06:18.410
now if you don't feel like it.

00:06:18.790 --> 00:06:21.730
But if you go to the start folder,
you'll see that we

00:06:21.840 --> 00:06:26.070
placed there four routes,
approot, doc, font, and help.

00:06:26.380 --> 00:06:29.380
So we'll just create a
package for this one.

00:06:29.940 --> 00:06:32.700
The first thing you want to do,
you want to make sure that the files

00:06:32.700 --> 00:06:35.640
that you're going to place in your
package have the right permission.

00:06:35.650 --> 00:06:37.300
This is very important.

00:06:37.410 --> 00:06:45.380
For example, in this case,
if I do get info,

00:06:45.380 --> 00:06:45.380
and if I look at the permissions,

00:06:46.150 --> 00:06:51.620
You can see that the file has for
owner Apple and for group Apple,

00:06:51.620 --> 00:06:53.800
which means probably the
user on this machine.

00:06:54.530 --> 00:06:57.960
If you create a package of
that application and then your

00:06:57.960 --> 00:07:01.750
users are going to install it,
this application is going to

00:07:01.750 --> 00:07:05.620
have the permission of that
user ID and that group ID.

00:07:05.620 --> 00:07:07.770
You might not want to see that.

00:07:07.830 --> 00:07:11.440
What you want is actually have the
application created on the user's machine

00:07:11.440 --> 00:07:14.080
with the owner of root and group admin.

00:07:14.080 --> 00:07:17.160
So one thing that you want to do is
make sure the permissions are correct.

00:07:17.240 --> 00:07:20.800
I'm just going to use
terminal very quickly.

00:07:20.800 --> 00:07:24.150
Let me just...

00:07:25.360 --> 00:07:26.090
- Can you see?

00:07:26.140 --> 00:07:27.060
Can you see that?

00:07:27.060 --> 00:07:28.310
Okay.

00:07:28.330 --> 00:07:30.120
I'm just gonna change the permission.

00:07:30.120 --> 00:07:35.090
Root, admin, root, admin.

00:07:43.150 --> 00:07:46.590
Okay, so now I set the correct
permission on that application.

00:07:46.800 --> 00:07:50.370
What I'm gonna do,
I'm gonna use PackageMaker to

00:07:50.370 --> 00:07:51.860
actually create the package.

00:07:51.860 --> 00:07:56.660
PackageMaker allows you to
create a simple package,

00:07:56.660 --> 00:07:58.150
which is what we're gonna use now.

00:07:58.310 --> 00:08:00.700
It also allows you to
create a meta package,

00:08:00.750 --> 00:08:03.540
which allows you to
group packages together.

00:08:03.590 --> 00:08:06.100
It also allows you to create
a distribution script,

00:08:06.110 --> 00:08:08.250
which is something we'll see later.

00:08:08.350 --> 00:08:12.410
For the purpose of this hand-on,
we'll stick to the single package.

00:08:14.510 --> 00:08:17.090
So, the title is right here.

00:08:17.220 --> 00:08:19.440
The description, we're not gonna set one.

00:08:19.530 --> 00:08:24.360
The contents, well,
I want to use this root as

00:08:24.360 --> 00:08:25.900
the content of my package.

00:08:25.950 --> 00:08:28.410
I want it to be compressed.

00:08:28.970 --> 00:08:35.100
The default location,
this is an application,

00:08:35.100 --> 00:08:35.100
so the default location is
going to be /applications.

00:08:35.530 --> 00:08:38.740
I know that applications
require admin privileges,

00:08:38.740 --> 00:08:41.260
so I want to require admin privileges.

00:08:41.270 --> 00:08:45.330
Note that here it tells you that you
have to set the correct ownership,

00:08:45.330 --> 00:08:47.360
which is what we've done before.

00:08:47.380 --> 00:08:49.460
And this package is relocatable.

00:08:49.480 --> 00:08:51.260
And look,
PackageMaker is ahead of its time.

00:08:51.260 --> 00:08:53.520
It even has installed FAT binaries.

00:08:53.540 --> 00:08:57.190
We're not gonna set any script.

00:08:57.760 --> 00:09:02.990
And we're going to create an identifier,
which of course has to be unique.

00:09:03.110 --> 00:09:09.630
com.apple.wwdc_handson.myapp

00:09:10.090 --> 00:09:12.810
And then I'm gonna put
the version number.

00:09:13.040 --> 00:09:15.220
The version number is
important because remember,

00:09:15.220 --> 00:09:17.480
that's what will be used on upgrade.

00:09:17.510 --> 00:09:20.480
So you have to set the right version.

00:09:20.490 --> 00:09:24.150
The combination of the bundle
identifier and the version number

00:09:24.540 --> 00:09:28.620
will be used to make sure that the
installer is upgrading the right thing.

00:09:28.930 --> 00:09:30.600
Okay, that's it.

00:09:30.650 --> 00:09:33.550
The only thing I need to do now
is to just build the package.

00:09:33.560 --> 00:09:35.290
Here we go.

00:09:35.400 --> 00:09:39.800
I'm going to call it my app and I'm
going to place it on the desktop.

00:09:45.490 --> 00:09:47.420
Here we go, so my package is right here.

00:09:47.480 --> 00:09:51.640
I can double click it.

00:09:51.640 --> 00:09:55.890
Welcome screen, you can see...

00:09:56.710 --> 00:10:00.850
Here in the target selection panel that
the package is actually relocatable,

00:10:00.850 --> 00:10:03.920
I can choose a different
location than /applications.

00:10:03.960 --> 00:10:07.900
I'm not gonna install it, but trust me,
it works.

00:10:08.070 --> 00:10:12.500
The package that we just created
will work correctly on Jaguar,

00:10:12.520 --> 00:10:20.100
will work correctly on Panther,
and will work correctly on Tiger as well.

00:10:20.100 --> 00:10:23.650
But it doesn't take advantage
of any of the new features that

00:10:23.650 --> 00:10:24.830
we currently have in Tiger.

00:10:25.050 --> 00:10:30.660
So this package will work on many OSes,
or many versions of the same OS,

00:10:30.680 --> 00:10:31.920
I should say.

00:10:33.760 --> 00:10:35.140
Here we go.

00:10:35.140 --> 00:10:38.600
So that was the first hands-on.

00:10:38.890 --> 00:10:42.620
Let's go back to the presentation.

00:10:44.710 --> 00:10:48.360
So now that I've shown you how
to create a single package,

00:10:48.360 --> 00:10:51.310
I'm going to talk to you about
a new feature in Tiger called

00:10:51.310 --> 00:10:53.430
distribution scripts.

00:10:54.560 --> 00:10:59.620
Distribution scripts allow you to
take several packages and combine

00:10:59.630 --> 00:11:02.000
them together into one file.

00:11:02.090 --> 00:11:05.940
That file controls all the
UI that the viewer is going to

00:11:05.940 --> 00:11:07.910
see when he installs the package.

00:11:08.190 --> 00:11:10.540
It also defines the requirement checks.

00:11:10.620 --> 00:11:14.240
Remember that the requirement checks
are the conditions that need to

00:11:14.310 --> 00:11:16.190
be met to install your software.

00:11:16.320 --> 00:11:22.250
It also allows you to take control
of the custom install panel.

00:11:22.950 --> 00:11:26.620
And of course, distribution scripts also
contain references to the

00:11:26.620 --> 00:11:28.770
packages that you've created.

00:11:28.900 --> 00:11:32.380
So in this example,
I mentioned that we have four packages,

00:11:32.380 --> 00:11:37.960
an app, some help files, some documents,
and a font.

00:11:37.970 --> 00:11:40.330
So we have four packages.

00:11:41.720 --> 00:11:43.880
So let's talk about the UI resources.

00:11:43.900 --> 00:11:47.320
The UI resources are made of documents.

00:11:47.350 --> 00:11:52.660
Those documents are the Welcome Panel,
the Read Me Panel, the License Agreement,

00:11:52.660 --> 00:11:54.560
and the Conclusion Panel.

00:11:55.580 --> 00:11:59.170
Another UI resource is the background
image that will be shown in the

00:11:59.220 --> 00:12:03.630
installer window and of course all
the localizations for the people

00:12:03.630 --> 00:12:05.730
who do not install in English.

00:12:06.110 --> 00:12:10.140
So the document resources,
how do you express document resources?

00:12:10.230 --> 00:12:15.080
The distribution script
is an XML document.

00:12:16.130 --> 00:12:19.870
The document resources are
expressed using XML elements:

00:12:19.930 --> 00:12:24.340
the Welcome element, the Read Me element,
the License element,

00:12:24.380 --> 00:12:26.130
and the Conclusion element.

00:12:26.240 --> 00:12:30.610
Each of these elements has a file
attribute that you use to reference

00:12:30.610 --> 00:12:33.530
the actual file in the package bundle.

00:12:34.720 --> 00:12:38.620
In addition to that,
you have a background XML element,

00:12:38.620 --> 00:12:41.380
which also has a file attribute.

00:12:41.750 --> 00:12:46.130
But also a scaling attribute and an
alignment attribute so that you can place

00:12:46.130 --> 00:12:48.950
your picture correctly in the window.

00:12:50.050 --> 00:12:55.010
The localizations, they are, remember,
a package is a bundle,

00:12:55.010 --> 00:12:58.480
so all the localizations are
placed in a French.lproj,

00:12:58.480 --> 00:13:04.210
German.lproj, Japanese.lproj,
and all those lproj folders go into the

00:13:04.210 --> 00:13:07.660
resources folder of the meta package.

00:13:08.230 --> 00:13:11.740
So to illustrate this and to show
you the structure of a meta package,

00:13:11.740 --> 00:13:14.790
I'm going to go to the second hands-on.

00:13:15.490 --> 00:13:21.900
The goal of this hands-on is to show you
what the structure of a meta package is.

00:13:21.970 --> 00:13:24.790
Remember, you can use PackageMaker
to create a meta package.

00:13:24.920 --> 00:13:29.600
You can create it with your build script,
but you can also create it

00:13:29.600 --> 00:13:33.060
manually using the finder,
like I'm going to do here.

00:13:35.330 --> 00:13:39.430
So if you go to Hands-On 2
and go to the Start folder,

00:13:40.510 --> 00:13:43.290
what we have here is
a distribution script

00:13:44.180 --> 00:13:48.760
A folder containing the packages
that we talked about earlier.

00:13:48.760 --> 00:13:52.770
And the resources folder that
contains a localizable.strings

00:13:52.770 --> 00:13:54.820
file and the welcome.rtf.

00:13:54.870 --> 00:13:58.240
The welcome.rtf just
contains the welcome text.

00:13:58.300 --> 00:14:01.620
Let's look briefly at the
localizable.strings files.

00:14:01.660 --> 00:14:07.070
It's a key value pair with
a title and a description.

00:14:13.000 --> 00:14:19.270
And the distribution script
here is an XML document.

00:14:20.730 --> 00:14:23.930
And if we look past
the license agreement,

00:14:23.930 --> 00:14:30.940
you will find an installer script
element that specifies the version,

00:14:30.940 --> 00:14:31.700
a title,

00:14:32.190 --> 00:14:37.350
A welcome XML element that
specifies the welcome.rtf file.

00:14:37.350 --> 00:14:42.510
And then additional XML elements
that handle the custom install panel,

00:14:42.510 --> 00:14:45.020
and we'll go through that later.

00:14:48.090 --> 00:14:51.280
So in order to build the meta package,
I'm just going to create

00:14:51.280 --> 00:14:54.650
a new folder here.

00:14:54.920 --> 00:14:56.040
Let's open it.

00:14:56.040 --> 00:14:59.040
Let me look at the,
let me use the outline view.

00:14:59.040 --> 00:15:07.270
And in there I'm going to create a
contents folder and a resources folder.

00:15:10.100 --> 00:15:11.760
Here we go.

00:15:11.760 --> 00:15:16.300
And in here,
I'm going to create an English.lproj.

00:15:19.900 --> 00:15:28.200
[Transcript missing]

00:15:28.700 --> 00:15:31.160
Hands on two, start.

00:15:31.230 --> 00:15:37.190
The distribution script goes
into the contents folder.

00:15:37.190 --> 00:15:42.290
The packages go also
into the contents folder.

00:15:44.780 --> 00:15:49.810
and the localized resources
go into the english.lproj.

00:15:53.110 --> 00:15:58.100
What we have here is essentially
a regular meta package in which

00:15:58.100 --> 00:16:00.220
we added a distribution script.

00:16:00.250 --> 00:16:03.900
On Tiger, the installer will use
the distribution script.

00:16:03.920 --> 00:16:07.680
On previous versions of DOS,
the installer will just look

00:16:07.680 --> 00:16:12.480
at the meta package to get all
this data like it did before.

00:16:12.500 --> 00:16:14.880
So there is nothing new for that.

00:16:15.380 --> 00:16:18.190
So now that I have
created my meta package,

00:16:18.190 --> 00:16:22.080
I'm just going to call it
actually a meta package.

00:16:23.500 --> 00:16:34.700
[Transcript missing]

00:16:37.870 --> 00:16:38.960
So let's double click it.

00:16:38.960 --> 00:16:46.080
So what we have here is
the welcome.rtf text,

00:16:46.330 --> 00:16:52.510
the title that uses the title of that we
had set in the localizable.shrinks file.

00:16:53.940 --> 00:16:56.140
The Target Selection Panel.

00:16:56.140 --> 00:17:01.670
Now you will notice that on this panel
we do not have the ability to relocate

00:17:01.670 --> 00:17:04.970
the myapp.pkg like we saw earlier.

00:17:05.100 --> 00:17:11.180
The reason for that is because the
distribution script allows you to control

00:17:11.180 --> 00:17:13.290
all the UI that the user will see.

00:17:13.290 --> 00:17:15.910
And nowhere in the distribution
script did we specify that

00:17:15.910 --> 00:17:17.410
the package was relocatable.

00:17:17.460 --> 00:17:24.730
So if we wanted to see a button here
to allow you to relocate the package,

00:17:25.020 --> 00:17:28.970
we would have to specify that
into the distribution script.

00:17:30.500 --> 00:17:32.500
- Select an element.

00:17:32.570 --> 00:17:36.400
If we go to Customize,
you have the choice that we saw earlier

00:17:37.040 --> 00:17:43.550
and we have the description that we
saw in the localizable.strings file.

00:17:44.210 --> 00:17:45.480
So that's it.

00:17:45.480 --> 00:17:48.990
The goal of this hands-on was
to show you how easy it is to

00:17:49.040 --> 00:17:54.010
create a distribution script and
place it into the meta package.

00:17:57.060 --> 00:17:59.680
Could you please get
back to the presentation?

00:17:59.740 --> 00:18:00.520
Thank you.

00:18:01.200 --> 00:18:07.550
So, we have shown you how
to create the packages.

00:18:07.900 --> 00:18:13.890
We saw how to place the UI resources
in the bundle and how to refer to

00:18:13.890 --> 00:18:19.140
those UI resources using XML elements
in the distribution script.

00:18:19.200 --> 00:18:31.920
Now to talk about requirement checks,
I'm going to call Chris Ryan.

00:18:36.910 --> 00:18:39.520
So my name is Christopher Ryan,
and today I'm going to show you how

00:18:39.520 --> 00:18:42.910
you can restrict where your software
is installed by using requirement

00:18:42.910 --> 00:18:44.790
checks in distribution scripts.

00:18:45.440 --> 00:18:47.740
I'm going to go over the
concepts of requirement checks,

00:18:47.740 --> 00:18:49.900
what they are, and how to use them.

00:18:49.930 --> 00:18:51.820
I'm going to go over how to
implement them in distribution

00:18:51.880 --> 00:18:55.400
scripts and how that's different
than packages you've seen before.

00:18:55.410 --> 00:18:56.880
And finally,
I'm going to go over some demos

00:18:56.880 --> 00:19:00.880
and hands-on to show you exactly
how to implement them and use them.

00:19:03.720 --> 00:19:06.640
So to start,
requirement checks allow your

00:19:06.640 --> 00:19:10.410
distribution script to ensure
that your software can only be

00:19:10.500 --> 00:19:13.600
installed on a system that you
expect it to be installed on.

00:19:13.680 --> 00:19:15.600
There are two types
of requirement checks:

00:19:15.630 --> 00:19:17.660
an installation check,
which allows you to check

00:19:17.660 --> 00:19:18.600
the system requirements.

00:19:18.600 --> 00:19:20.390
Does it have the right processor type?

00:19:20.590 --> 00:19:23.370
Or does it have the
right amount of memory?

00:19:23.820 --> 00:19:25.600
Or the right speed?

00:19:25.600 --> 00:19:28.920
As well as the volume check,
which allows you to check

00:19:28.920 --> 00:19:32.600
information about the particular
volume these may install on.

00:19:32.670 --> 00:19:34.600
Does it have the right
version of Mac OS X?

00:19:34.600 --> 00:19:37.600
Or the right software that
your software may require?

00:19:37.720 --> 00:19:41.450
And a volume check, when fails,
disallows the user from selecting

00:19:41.450 --> 00:19:43.530
another volume in the installer.

00:19:44.520 --> 00:19:50.290
So, requirement checks in the past used
a number of executables located in

00:19:50.290 --> 00:19:54.650
each of the packages in your software
distribution to specify whether the

00:19:54.730 --> 00:19:56.900
software could be installed or not.

00:19:56.900 --> 00:20:00.020
But in distributions, all that logic is
located in one location,

00:20:00.220 --> 00:20:04.550
and it's written in JavaScript inside
of your distribution script XML.

00:20:04.900 --> 00:20:19.300
[Transcript missing]

00:20:19.890 --> 00:20:22.800
Let's show you a quick example of
how to specify an installation check.

00:20:22.860 --> 00:20:25.380
To do so,
you create an installation check

00:20:25.380 --> 00:20:27.800
element in your distribution script.

00:20:27.800 --> 00:20:31.030
You specify in the script attribute
of the installation check element the

00:20:31.060 --> 00:20:35.800
JavaScript function or snippet you want
to run to check the system requirements.

00:20:35.990 --> 00:20:38.610
And finally,
you put your actual JavaScript function

00:20:38.940 --> 00:20:42.190
inside of a script element
in your distribution script.

00:20:43.110 --> 00:20:46.340
That's really useful,
but you have to actually check

00:20:46.340 --> 00:20:47.150
information about your system.

00:20:47.150 --> 00:20:48.340
So how do you do that?

00:20:48.480 --> 00:20:52.040
To do that, we have a system object,
which is global in all the JavaScripts

00:20:52.070 --> 00:20:54.600
inside your distribution script,
which allows access to

00:20:54.600 --> 00:20:56.290
information about the system.

00:20:56.430 --> 00:20:59.000
We have access to
I/O registry and sys control,

00:20:59.130 --> 00:21:00.900
and we also have a special function,
system log,

00:21:00.900 --> 00:21:04.140
which allows your script to log
information to the installer's log.

00:21:04.270 --> 00:21:07.440
And here's a quick example
of a "Hello World" script.

00:21:08.920 --> 00:21:11.830
So now that you've checked
the system for requirements,

00:21:11.830 --> 00:21:16.680
how do you tell the installer that
you do not want to allow installation

00:21:16.690 --> 00:21:18.400
of the software on their system?

00:21:18.400 --> 00:21:21.440
To do so,
we have a special object called MyResult.

00:21:21.440 --> 00:21:25.110
I'm going to go over some
examples of how to use that.

00:21:25.200 --> 00:21:27.250
So here we have our
installation check script.

00:21:27.360 --> 00:21:31.890
Our installation check element
specifies the check RAM script.

00:21:31.960 --> 00:21:35.300
The check RAM script uses system
sys control to check for the

00:21:35.300 --> 00:21:37.510
physical memory in the user system.

00:21:38.420 --> 00:21:42.910
If the system does not have at
least 256 megabytes of memory,

00:21:42.970 --> 00:21:44.790
it then fills out the MyResult object.

00:21:44.980 --> 00:21:48.910
The MyResult object is a special object
that tells the installer exactly how

00:21:48.910 --> 00:21:51.800
to fail and how to tell the user why
the software cannot be installed.

00:21:51.800 --> 00:21:55.390
And to do so,
it fills in the type attribute,

00:21:55.390 --> 00:21:56.800
and here it's setting it to fatal.

00:21:56.800 --> 00:21:59.630
In installation checks,
you can also warn the user

00:21:59.700 --> 00:22:01.940
that the software may not
run in the perfect situation,

00:22:01.940 --> 00:22:03.800
and you can set that to warn.

00:22:03.800 --> 00:22:07.910
And then it sets the
title and the message,

00:22:07.910 --> 00:22:10.510
which gives more information
to the user on exactly why your

00:22:10.510 --> 00:22:11.790
software cannot be installed.

00:22:11.800 --> 00:22:15.060
And finally,
it needs to set the return value

00:22:15.190 --> 00:22:17.610
to false to tell the installer to
look in the MyResult object for

00:22:17.700 --> 00:22:18.800
information about the failure.

00:22:18.800 --> 00:22:22.980
And if you're not going to fail,
you want to return true to

00:22:22.990 --> 00:22:25.790
allow installation on a system.

00:22:25.940 --> 00:22:28.800
And remember, if you don't need to check
information about the system,

00:22:28.800 --> 00:22:31.800
you don't need to actually
include an installation check,

00:22:31.800 --> 00:22:33.530
and it will always pass.

00:22:34.950 --> 00:22:36.180
The next thing is a volume check.

00:22:36.360 --> 00:22:38.130
The volume check allows you
to check requirements about

00:22:38.140 --> 00:22:39.640
a given volume on the system.

00:22:39.770 --> 00:22:41.520
Some of your users may
only have one volume,

00:22:41.580 --> 00:22:43.640
but some may have multiple volumes.

00:22:43.710 --> 00:22:45.650
So with this,
you can check the version of the

00:22:45.650 --> 00:22:48.400
system or if the proper software
you need for your software to

00:22:48.400 --> 00:22:50.340
run is actually on the system.

00:22:50.450 --> 00:22:53.650
Your script will run on
each volume on the system,

00:22:53.650 --> 00:22:56.590
and it has access to information
about the volume as well.

00:22:56.710 --> 00:23:01.290
And unlike Installation Check,
it has no warnings, only failures.

00:23:02.360 --> 00:23:06.200
To actually access information
about the target that your volume

00:23:06.270 --> 00:23:09.300
check script is running against,
there's a myTarget object.

00:23:09.410 --> 00:23:13.420
The myTarget object is different every
time your volume check script runs,

00:23:13.600 --> 00:23:18.170
and it represents the actual volume
you're checking with that function.

00:23:18.390 --> 00:23:21.100
MyTarget has access to information
about the mount points,

00:23:21.190 --> 00:23:23.800
the available kilobytes,
as well as system versions of

00:23:23.800 --> 00:23:28.050
the OS installed on that volume,
if there is any, and a special receipt

00:23:28.050 --> 00:23:30.970
for identifier function,
which gives information about

00:23:30.970 --> 00:23:33.940
receipts of packages that
were installed on that disk.

00:23:34.050 --> 00:23:37.050
It's very important that you actually
use the receipt for identifier

00:23:37.050 --> 00:23:40.460
function rather than check the
contents of library receipts,

00:23:40.580 --> 00:23:43.770
because that's an implementation
detail that may change in the future.

00:23:44.020 --> 00:23:46.380
and additionally,
the volume check scripts have access

00:23:46.390 --> 00:23:49.630
to another JavaScript object called
choices which gives it access to

00:23:49.700 --> 00:23:52.690
information about the given choices
within a distribution script.

00:23:52.760 --> 00:23:55.670
And we're going to go more
over that a little bit later.

00:23:56.350 --> 00:23:58.990
So here's a volume check script.

00:23:59.080 --> 00:24:02.600
Again, like the installation check,
you use a volume check element to specify

00:24:02.600 --> 00:24:06.600
which script or JavaScript function
you want to run for your volume check.

00:24:06.710 --> 00:24:10.150
And here we're checking the available
kilobytes attribute of the my

00:24:10.280 --> 00:24:13.790
target object to make sure it
has at least 100 gigabytes of memory.

00:24:13.890 --> 00:24:15.300
Now why would you want to do this?

00:24:15.360 --> 00:24:18.860
Well, let's say your software only takes
up 30 megabytes of space on disk,

00:24:18.930 --> 00:24:21.600
and the installer automatically
handles making sure that the disk

00:24:21.600 --> 00:24:23.600
has enough space for your software.

00:24:23.710 --> 00:24:26.500
But let's say your software
requires more space to actually run.

00:24:26.610 --> 00:24:28.650
So in this example,
we want to make sure we have

00:24:28.650 --> 00:24:30.500
100 gigabytes of free space.

00:24:30.770 --> 00:24:31.740
So we've seen enough examples.

00:24:31.740 --> 00:24:34.320
Let's actually show you
some of these running.

00:24:34.340 --> 00:24:36.010
Want to do the demo?

00:24:38.100 --> 00:24:43.230
So, go to the Hands-On 3 section.

00:24:43.250 --> 00:24:47.900
And we're going to start by
creating a volume check script.

00:24:47.980 --> 00:24:51.550
And true to fashion,
we're going to create

00:24:51.890 --> 00:24:54.480
our Hello World script.

00:24:54.480 --> 00:24:54.480
So,

00:24:55.180 --> 00:24:56.810
Let's specify which
script we want to run.

00:24:56.960 --> 00:25:02.290
We haven't written the script yet,
but we're going to say volume check.

00:25:02.340 --> 00:25:06.650
Set the script attribute to
the script we want to run,

00:25:06.650 --> 00:25:09.300
or the JavaScript function, that is.

00:25:11.410 --> 00:25:16.600
So here we've written our
volume check XML element.

00:25:16.640 --> 00:25:21.340
Now let's write our XML script element.

00:25:22.570 --> 00:25:27.140
So all JavaScript functions are
included inside the XML script element.

00:25:27.140 --> 00:25:35.240
And we're going to write "Hello World."
And we're going to use that system

00:25:35.240 --> 00:25:37.530
log function I talked about earlier.

00:25:41.510 --> 00:25:43.470
And to make it a little more interesting,
I'm actually going to print out

00:25:43.470 --> 00:25:47.450
information about the given volume being
checked in this volume check script.

00:25:54.130 --> 00:25:59.140
So we are accessing the mount
point attribute of my target.

00:25:59.160 --> 00:26:01.710
And finally, we want to return true.

00:26:03.540 --> 00:26:05.890
and Paul D'Amico will help
you with the installation.

00:26:05.900 --> 00:26:08.810
So, we're going to save that.

00:26:08.910 --> 00:26:12.590
Before we do this, the installer log is
pretty small on the screen,

00:26:12.590 --> 00:26:17.240
so we're going to make a terminal
window and tail the installer log,

00:26:17.270 --> 00:26:19.360
which is located in var log install.log.

00:26:19.360 --> 00:26:24.390
And all of our logs written out
using system.log have the prefix js,

00:26:24.570 --> 00:26:26.970
so we're going to grep for js.

00:26:29.700 --> 00:26:34.300
So let's now run our volume check script.

00:26:34.300 --> 00:26:35.660
Just double click on distribution.

00:26:35.660 --> 00:26:37.570
It opens in the installer.

00:26:37.800 --> 00:26:41.360
And notice that all our volumes
are available to install,

00:26:41.360 --> 00:26:45.850
and our installation log says
"Hello World" from Slash and all

00:26:45.860 --> 00:26:47.680
the other volumes on the system.

00:26:48.250 --> 00:26:51.200
So as you see, it's very easy to create
a volume check script,

00:26:51.200 --> 00:26:54.500
but that's not very useful to actually
check information about the system.

00:26:54.550 --> 00:26:56.860
So let me show you a
quick example of that.

00:26:56.900 --> 00:27:00.350
So go to the installation check example.

00:27:01.930 --> 00:27:05.900
Again, open in your favorite text editor.

00:27:05.900 --> 00:27:09.040
OK, so here we have a script very
similar to what we saw before.

00:27:09.040 --> 00:27:11.370
We have our volume check script.

00:27:11.410 --> 00:27:13.300
Of course, this one has a different name.

00:27:13.300 --> 00:27:15.970
Specified with the
volume checked element.

00:27:16.300 --> 00:27:20.780
We also have a new installation
check function specified with

00:27:20.870 --> 00:27:23.270
the installation check element.

00:27:24.470 --> 00:27:26.960
And this function is
a little more useful.

00:27:26.990 --> 00:27:31.110
This function actually will check your
system to make sure it has an eyesight.

00:27:31.290 --> 00:27:33.420
Let me walk you through how that works.

00:27:33.520 --> 00:27:36.490
To start,
it checks the system I/O registry

00:27:37.040 --> 00:27:39.600
objects and looks for all
classes in the I/O registry

00:27:39.600 --> 00:27:41.990
matching I/O Firewire device.

00:27:42.030 --> 00:27:45.210
If it finds any objects that match,
it then loops through all the

00:27:45.210 --> 00:27:49.040
objects in the array that's returned,
and notice the less than sign is escaped,

00:27:49.050 --> 00:27:52.630
and that's because our
JavaScript is inside of XML.

00:27:53.340 --> 00:27:58.060
and it looks for the FireWire
product name equaling iSight,

00:27:58.080 --> 00:27:59.030
and it finds one.

00:27:59.070 --> 00:28:00.700
It sets a variable.

00:28:00.790 --> 00:28:04.060
And at the bottom,
if we haven't found an iSight,

00:28:04.190 --> 00:28:07.890
we're actually gonna return the-- we're
gonna set myResultType to fatal to

00:28:07.890 --> 00:28:12.160
tell the installer we want to fail and
disallow installation on this system,

00:28:12.270 --> 00:28:14.640
and then set an appropriate
title and message,

00:28:14.770 --> 00:28:16.960
and importantly, return false.

00:28:17.060 --> 00:28:19.360
So we don't have an iSight
attached to this computer,

00:28:19.360 --> 00:28:21.760
and I'm sure you guys don't have
iSights attached to your laptops,

00:28:21.760 --> 00:28:25.300
so if you launch this installation check,
you'll see it gives a warning or an

00:28:25.300 --> 00:28:27.940
error and doesn't allow installation,
and when you press close,

00:28:27.970 --> 00:28:29.610
the installer goes away.

00:28:29.960 --> 00:28:33.950
So that's a quick example
of an installation check.

00:28:34.110 --> 00:28:36.790
But what if our software now--what
if we want our software to be

00:28:36.830 --> 00:28:39.630
installed on more computers and we
want the users to be able to play

00:28:39.690 --> 00:28:41.330
with them before they get an iSight?

00:28:41.400 --> 00:28:44.280
So let's change this so that we
can warn the user that an iSight

00:28:44.360 --> 00:28:46.430
is recommended but not required.

00:28:46.510 --> 00:28:50.900
To do that,
we're going to want to set myResultType

00:28:50.900 --> 00:28:54.980
to "warn" and we'll change the title
to be a little more appropriate.

00:29:00.100 --> 00:29:10.400
[Transcript missing]

00:29:11.300 --> 00:29:13.300
and double click on it in the Finder.

00:29:13.300 --> 00:29:15.440
And again we get our message
telling the user that they

00:29:15.440 --> 00:29:16.900
should go out and buy an iSight.

00:29:16.900 --> 00:29:19.000
It's recommended to run the software.

00:29:19.020 --> 00:29:21.280
But of course I can actually install.

00:29:22.080 --> 00:29:25.460
So a couple of notes about this script.

00:29:25.490 --> 00:29:29.800
Notice that Jean-Pierre talked about
localization using key value pairs.

00:29:29.860 --> 00:29:34.600
And that localization is all about the
static elements of a distribution script.

00:29:34.690 --> 00:29:40.600
For example, the title, which is static,
as well as the English.lproj

00:29:40.740 --> 00:29:43.900
for the welcome RTF,
which is also static.

00:29:43.910 --> 00:29:48.600
But to localize dynamic elements
in a distribution JavaScript,

00:29:48.620 --> 00:29:53.720
you actually have to
use a function built in,

00:29:53.720 --> 00:29:57.450
system.localizeString,

00:29:58.890 --> 00:30:13.990
and Paul Kruijswijk, and Paul Kruijswijk,
who is the founder of the company,

00:30:13.990 --> 00:30:19.150
will talk about the new features that
we're going to be using in the future.

00:30:24.400 --> 00:30:29.900
So, we've talked about distributions,
and we've talked about the UI resources,

00:30:29.900 --> 00:30:32.280
which are the static elements
of your distribution and

00:30:32.280 --> 00:30:35.630
display information to the user,
like README and WELCOME and

00:30:35.630 --> 00:30:37.260
license information.

00:30:37.320 --> 00:30:41.890
I've talked about the requirement checks,
which allow you to check the...

00:30:42.220 --> 00:30:49.130
is going to come up and talk
about custom install logic,

00:30:49.790 --> 00:30:55.690
which allows you to connect
all this stuff to the actual

00:30:55.690 --> 00:30:58.290
packages that get installed.

00:30:58.290 --> 00:30:58.290
Peter?

00:31:05.470 --> 00:31:06.000
Hey, Chris.

00:31:06.000 --> 00:31:07.000
Good afternoon, everyone.

00:31:07.000 --> 00:31:07.600
I'm Peter Bierman.

00:31:07.600 --> 00:31:11.010
I also work on the Mac OS X Installer,
and I'm going to be talking this

00:31:11.010 --> 00:31:14.880
afternoon about controlling what gets
installed using the Installer and their

00:31:14.880 --> 00:31:17.000
new distribution script technology.

00:31:17.020 --> 00:31:19.580
First, I'm going to talk about
package references,

00:31:19.750 --> 00:31:22.000
how you specify them in
distribution scripts,

00:31:22.130 --> 00:31:25.000
and then I'm going to talk about choices,
the easy and custom install panel,

00:31:25.000 --> 00:31:29.560
how you can control it,
how the user can use the custom install

00:31:29.560 --> 00:31:33.000
panel to control what gets installed,
and how to limit that customization

00:31:33.000 --> 00:31:35.000
using something we call choices.

00:31:35.810 --> 00:31:38.300
So first, package references.

00:31:38.350 --> 00:31:41.640
Each package has a package ref element
inside the distribution script.

00:31:41.880 --> 00:31:48.300
The package ref element merely ties
a concrete .pkg package to the XML.

00:31:48.410 --> 00:31:51.260
PackageRef elements should
contain an identifier.

00:31:51.300 --> 00:31:54.850
This is an ID attribute of
the XML PackageRef element.

00:31:54.850 --> 00:31:57.840
And unlike all the other identifiers
used in distribution scripts,

00:31:58.010 --> 00:32:01.840
this one should specifically be
the CFBundle identifier from the

00:32:01.840 --> 00:32:03.880
.pkg that the PackageRef refers to.

00:32:04.260 --> 00:32:08.050
They should also contain a size,
this install Kbytes flag.

00:32:08.050 --> 00:32:11.090
This specifies the size of your
package once it's been installed,

00:32:11.130 --> 00:32:13.280
not the compressed
version of the package.

00:32:13.280 --> 00:32:16.340
And finally,
a file URL that's used as the element

00:32:16.650 --> 00:32:21.890
content for the PackageRef element that
specifies where the package is found.

00:32:22.620 --> 00:32:24.300
Next we have Choice Elements.

00:32:24.360 --> 00:32:27.600
Choice Elements refer to the line
items in the Custom Install Panel.

00:32:27.760 --> 00:32:31.830
They're called choices because those are
the individual choices that users will

00:32:31.830 --> 00:32:33.990
be making in the Custom Install Panel.

00:32:34.220 --> 00:32:36.890
Choice elements also
contain an ID attribute,

00:32:36.960 --> 00:32:40.100
this can be any string,
a user visible title attribute,

00:32:40.140 --> 00:32:43.440
this is what the user will actually
see in the custom install panel,

00:32:43.440 --> 00:32:45.960
and zero more references
to package ref elements.

00:32:46.070 --> 00:32:49.270
JP mentioned earlier and showed you
actually in one of his hands-on,

00:32:49.400 --> 00:32:52.320
you can actually have as many
packages as you'd like and tie them

00:32:52.320 --> 00:32:55.920
all together under a single choice
in the custom install panel now.

00:32:56.800 --> 00:32:59.240
Finally,
we have a Choices Outline element.

00:32:59.300 --> 00:33:02.160
This controls the layout of the
choices in the Custom Install panel.

00:33:02.300 --> 00:33:03.700
You can lay them out in any order.

00:33:03.700 --> 00:33:06.300
They're not in particular order
in your distribution script.

00:33:06.390 --> 00:33:10.930
And you can also nest the line
elements so that you can create groups,

00:33:11.040 --> 00:33:14.100
arbitrary collections of software, etc.

00:33:14.800 --> 00:33:16.700
So what is the Easy and
Custom Install Panel?

00:33:16.700 --> 00:33:18.110
Well, it's a fairly simple question.

00:33:18.290 --> 00:33:21.700
Easy Install is the default selections
from the Custom Install Panel.

00:33:21.880 --> 00:33:23.950
Most users want to click
straight through your installer.

00:33:24.060 --> 00:33:25.950
They're not interested in
reading your license agreement,

00:33:26.020 --> 00:33:27.700
your welcome text, etc.

00:33:27.700 --> 00:33:31.190
But if you want to lock them into
looking at either the Easy Install or

00:33:31.300 --> 00:33:34.660
the Custom Install Panel,
you can use another element in the XML,

00:33:34.760 --> 00:33:35.670
an options element.

00:33:35.730 --> 00:33:38.700
You can set the customize
attribute to always or never.

00:33:38.700 --> 00:33:41.890
The default is allow.

00:33:41.890 --> 00:33:41.890
I haven't shown it here on the slide.

00:33:42.310 --> 00:33:43.540
So choices.

00:33:43.620 --> 00:33:45.830
Choices, like I said,
they group packages using the

00:33:45.830 --> 00:33:47.500
package ref and choice elements.

00:33:47.630 --> 00:33:49.800
Selected choices are the
ones that are installed,

00:33:49.810 --> 00:33:52.560
the ones that the user has clicked
on in the custom install panel

00:33:52.700 --> 00:33:55.640
or the choices that you have
defined to be selected initially.

00:33:55.750 --> 00:33:57.380
Choices can also be invisible.

00:33:57.460 --> 00:33:59.730
This lets you group packages
together under a choice.

00:33:59.970 --> 00:34:02.420
Choices, as you'll see in a moment,
are where you attach your

00:34:02.730 --> 00:34:05.370
dynamic JavaScript behavior,
and so this gives you even more

00:34:05.470 --> 00:34:09.520
flexibility in controlling what gets
installed on a given user's machine.

00:34:10.420 --> 00:34:12.720
Choices have many user
interface attributes,

00:34:12.720 --> 00:34:15.200
such as title, description, and tooltip.

00:34:15.270 --> 00:34:16.480
These are initially localized.

00:34:16.700 --> 00:34:18.740
As soon as the distribution
script is open,

00:34:18.840 --> 00:34:25.850
these will be looked up as keys
in your localizable strings file,

00:34:25.850 --> 00:34:25.850
and they'll be localized automatically.

00:34:25.960 --> 00:34:28.500
Other attributes for
choices are scripted.

00:34:28.510 --> 00:34:31.460
This includes the selected, enabled,
and visible attributes.

00:34:31.480 --> 00:34:33.940
These scripts can be affected by
either the machine state using the

00:34:33.940 --> 00:34:36.800
JavaScript bridge that Chris showed
you using the requirement checks,

00:34:36.870 --> 00:34:42.920
or user input, as in the other choices
that the users have made,

00:34:42.920 --> 00:34:42.920
which other choices are selected, etc.

00:34:43.640 --> 00:34:47.270
Here's an example of the fourth
choice up on the screen here.

00:34:47.490 --> 00:34:51.480
I'm going to go over the four
choices shown in the screenshot here.

00:34:51.550 --> 00:34:55.100
There's a selected, optional, required,
and prohibited choice.

00:34:55.150 --> 00:34:57.600
The selected choice is
enabled and selected.

00:34:57.600 --> 00:35:00.980
The optional choice is
enabled and not selected.

00:35:00.980 --> 00:35:03.640
The required choice is
disabled and selected.

00:35:03.640 --> 00:35:06.360
And the prohibited choice is
disabled and not selected.

00:35:06.360 --> 00:35:08.660
And you can see, or maybe you can't,
way in the back there,

00:35:08.660 --> 00:35:11.120
there's a tooltip attached to the
prohibited choice that says it

00:35:11.220 --> 00:35:12.670
may only be installed on a Friday.

00:35:14.970 --> 00:35:18.500
On the left, we see some sample code that
actually implements this behavior.

00:35:18.530 --> 00:35:20.980
The fourth choice has an ID, D.

00:35:21.150 --> 00:35:22.260
Its title is prohibited.

00:35:22.360 --> 00:35:23.780
Its selected state is set to false.

00:35:23.930 --> 00:35:24.760
That's actually JavaScript.

00:35:24.760 --> 00:35:27.840
Its enabled state is a
JavaScript function called isFriday.

00:35:27.840 --> 00:35:30.760
And we see in the script element,
the function isFriday is

00:35:30.760 --> 00:35:32.440
defined using plain JavaScript.

00:35:32.440 --> 00:35:35.520
It actually outputs to the installer
log what day of the week it is and

00:35:35.710 --> 00:35:38.730
checks to see if that's equal to five.

00:35:38.740 --> 00:35:39.320
That's Friday.

00:35:39.320 --> 00:35:42.300
And since today isn't Friday,
I guess fortunately for you,

00:35:42.300 --> 00:35:46.250
unfortunately for me, it's prohibited.

00:35:47.600 --> 00:35:49.900
So these attributes are
re-evaluated very often.

00:35:49.920 --> 00:35:52.740
Every time the user clicks on a
choice in the Custom Install Panel,

00:35:52.830 --> 00:35:55.220
all of the other attributes
attached to all of the other

00:35:55.310 --> 00:35:56.700
choices will be evaluated.

00:35:56.750 --> 00:35:59.550
We also have some
attributes start_selected,

00:35:59.650 --> 00:36:02.660
enabled, and visible,
and these are used the first time the

00:36:02.660 --> 00:36:06.130
user enters the Custom Install Panel,
or if the user makes any changes and

00:36:06.130 --> 00:36:09.560
then returns to the Easy Install Panel,
these will be evaluated again to

00:36:09.560 --> 00:36:11.880
set up the default conditions.

00:36:12.730 --> 00:36:14.360
The attributes can affect each other.

00:36:14.360 --> 00:36:17.070
Because each of these attributes
is allowed to look at the state

00:36:17.070 --> 00:36:20.260
of all of the other choices
that are currently available,

00:36:20.450 --> 00:36:26.840
they're attached to each other and they
can be based on what's been changed.

00:36:26.850 --> 00:36:29.150
For example,
you might have a plugin that you

00:36:29.190 --> 00:36:32.560
only want to be installed if the
user is also installing your app.

00:36:32.760 --> 00:36:36.050
You might then only set the
enabled state of that plugin to

00:36:36.160 --> 00:36:38.130
be true if the app is selected.

00:36:39.160 --> 00:36:42.660
Evaluating all of the other choice
attributes prevents loops because

00:36:42.660 --> 00:36:45.910
they can depend on the attributes
of each other and themselves,

00:36:45.910 --> 00:36:46.420
actually.

00:36:46.730 --> 00:36:49.920
We don't want to evaluate the choice
attributes attached to the choice

00:36:50.050 --> 00:36:51.510
that the user just clicked on.

00:36:51.680 --> 00:36:55.660
This allows you to connect the
elements in pretty advanced ways.

00:36:55.880 --> 00:36:59.600
So I'm actually going to
go to our hands-on now.

00:36:59.600 --> 00:37:03.310
I'm going to stop for
a quick sip of water.

00:37:10.190 --> 00:37:12.740
and I will close some windows.

00:37:12.750 --> 00:37:16.740
And if you're following along,
go to the hands-on folder

00:37:16.740 --> 00:37:19.280
and hands-on for choices.

00:37:19.290 --> 00:37:22.670
And the first thing you'll see here is
a text clipping that unfortunately in

00:37:22.720 --> 00:37:24.550
the source distribution here is broken.

00:37:24.620 --> 00:37:25.420
It's empty.

00:37:25.660 --> 00:37:28.080
And if you go to the
installer release note,

00:37:28.100 --> 00:37:29.780
you'll find what was
in this text clipping.

00:37:29.780 --> 00:37:33.930
It's a little snippet that tells you how
to set a hidden default for the installer

00:37:33.930 --> 00:37:38.190
that turns on some additional debugging
information in the installer log.

00:37:38.330 --> 00:37:42.700
But for now, I'm gonna open up the
Interaction Start Distribution.

00:37:42.700 --> 00:37:46.770
I'm gonna use TextAngler,
which is the free version of BBEdit.

00:37:47.080 --> 00:37:49.580
provides some nice
XML syntax highlighting.

00:37:49.580 --> 00:37:53.050
First thing you'll see here is
we've specified using the options

00:37:53.050 --> 00:37:56.440
element that the customized
panel should always appear.

00:37:56.480 --> 00:38:02.410
Then we've used the choices outline
element to set up four different

00:38:02.540 --> 00:38:04.020
line items for our four choices,
our app, our font, our docs,

00:38:04.020 --> 00:38:04.020
and our help.

00:38:04.540 --> 00:38:06.370
Our first choice here,
we have the app choice.

00:38:06.460 --> 00:38:07.170
It has a title.

00:38:07.400 --> 00:38:11.180
It also has a package ref
element that refers to the

00:38:11.940 --> 00:38:28.730
PackageRef, which we see down here at
the bottom of the file.

00:38:28.730 --> 00:38:28.730
We see our PackageRef
element for the app.

00:38:28.730 --> 00:38:28.730
It's got its CFBundle ID.

00:38:28.730 --> 00:38:28.730
It has its install size.

00:38:28.730 --> 00:38:28.730
It has its auth flags,
its version number,

00:38:28.730 --> 00:38:28.730
and it also has a file URL.

00:38:29.520 --> 00:38:33.380
This is relative to the M package
that contains the distribution

00:38:33.380 --> 00:38:35.470
script and the other packages.

00:38:36.900 --> 00:38:39.420
To take a quick look here,
so we're gonna actually launch

00:38:39.420 --> 00:38:42.040
this in the Finder before
I make any changes to it.

00:38:42.040 --> 00:38:45.000
Look at it in the installer,
we're gonna just pick a volume here and

00:38:45.000 --> 00:38:47.390
navigate to the custom install panel.

00:38:47.560 --> 00:38:49.440
And now, we've set up some defaults.

00:38:49.440 --> 00:38:53.390
We've set the app up so that it is
the initially selected item and all of

00:38:53.390 --> 00:38:56.200
the other items default to unselected.

00:38:56.250 --> 00:38:59.040
We can click on each of them
in any order and they don't

00:38:59.160 --> 00:39:01.250
affect each other at the moment.

00:39:01.920 --> 00:39:06.590
So we'll quit the installer,
go back to Text Wrangler.

00:39:06.590 --> 00:39:10.410
And what we'd like to do is we'd like it
to be set up so that the font can only be

00:39:10.410 --> 00:39:12.820
installed if the app is being installed.

00:39:12.820 --> 00:39:17.320
So we want the font to be disabled
if the app is not selected.

00:39:17.640 --> 00:39:21.890
So we're going to create an enabled

00:39:23.140 --> 00:39:26.680
- Attribute here for our font.

00:39:26.680 --> 00:39:28.100
And we're going to set it to be
the selected state of the app.

00:39:28.100 --> 00:39:35.190
And we're gonna use a
global variable here.

00:39:36.210 --> 00:39:38.580
Global JavaScript Variable,
this is provided by the installer's

00:39:38.690 --> 00:39:42.150
JavaScript runtime called Choices that
refers to all the choices and this is

00:39:42.180 --> 00:39:45.240
an associative array and the indices
into the array are the IDs of the

00:39:45.240 --> 00:39:47.260
various choices that you've defined.

00:39:47.260 --> 00:39:51.270
So we have Choices MyApp and
now we can get its selected

00:39:51.270 --> 00:39:53.280
attribute just like that.

00:39:54.240 --> 00:39:58.200
We'll go back to the Finder,
launch the installer again,

00:39:58.300 --> 00:40:00.970
click through,
and we see the same thing we saw before,

00:40:01.100 --> 00:40:02.650
same defaults,
these are the defaults we want,

00:40:02.660 --> 00:40:05.400
and if we deselect the app,
the font is now disabled.

00:40:05.400 --> 00:40:08.370
We can reselect the app and
the font becomes enabled.

00:40:08.370 --> 00:40:09.070
That's great.

00:40:09.320 --> 00:40:12.760
Now we can select the font
and I'll deselect the app.

00:40:13.090 --> 00:40:16.080
Well, the font is disabled,
but it's still selected.

00:40:16.100 --> 00:40:18.970
And we don't want that,
we want the font to become unselected

00:40:18.970 --> 00:40:20.730
when the app becomes unselected.

00:40:20.780 --> 00:40:23.670
So, well, we need to fix that.

00:40:24.200 --> 00:40:26.300
So we go back to our distribution script.

00:40:26.300 --> 00:40:30.400
We know we want to change the
selected state of our font,

00:40:30.400 --> 00:40:35.410
and we want it to be tied to
the selected state of our app.

00:40:35.720 --> 00:40:40.420
So right off the bat,
we're just going to grab that same line,

00:40:40.420 --> 00:40:43.680
Choices My App Selected,
and attach it to the

00:40:43.780 --> 00:40:45.960
selected state of our font.

00:40:46.090 --> 00:40:53.390
Save that, go back to the finder,
launch it again through the installer.

00:40:53.390 --> 00:40:53.390
Well,

00:40:54.070 --> 00:40:57.060
Now our default state is wrong,
but the app and the

00:40:57.060 --> 00:40:58.700
font are both selected.

00:40:58.700 --> 00:41:02.480
If I disable the app or deselect the app,
the font becomes deselected.

00:41:02.480 --> 00:41:05.900
If I reselect the app,
the font becomes enabled and selected.

00:41:05.900 --> 00:41:10.460
I'd prefer that the font not become
selected when the app becomes selected.

00:41:10.460 --> 00:41:12.400
I don't want them tied
that close together.

00:41:12.400 --> 00:41:13.800
But there's another problem here.

00:41:13.920 --> 00:41:16.980
If the user deselects the
font and then clicks on either

00:41:17.480 --> 00:41:21.300
of these other two choices,
every time they do that,

00:41:21.480 --> 00:41:23.800
the font insists on
becoming selected again.

00:41:23.800 --> 00:41:26.550
And that's because the font's
selected attribute is attached

00:41:26.660 --> 00:41:28.290
to the app's selected attribute.

00:41:28.300 --> 00:41:32.430
Now, I mentioned earlier that choices
attributes aren't evaluated

00:41:32.540 --> 00:41:34.270
when they're clicked on.

00:41:34.340 --> 00:41:36.800
They're evaluated when
something else is clicked on.

00:41:36.800 --> 00:41:41.290
And this allows the choice attributes
to actually depend on themselves.

00:41:41.570 --> 00:41:45.020
So we'll quit the installer and
I'll explain what I mean here.

00:41:45.070 --> 00:41:50.740
We'd like to go to the selected attribute
of our font choice and we're going to

00:41:50.790 --> 00:41:52.610
make this a little Boolean algebra.

00:41:52.620 --> 00:41:56.740
It's going to depend not only on
the selected attribute of the app,

00:41:56.740 --> 00:42:01.530
but it's going to depend on the
selected attribute of itself.

00:42:04.160 --> 00:42:07.600
In this case, we're using, again,
the magic global variable my.

00:42:07.630 --> 00:42:11.420
My refers to the context that the
installer is evaluating at that moment.

00:42:11.700 --> 00:42:14.700
In this case,
the context that it's referring to is the

00:42:14.700 --> 00:42:17.100
selected attribute of the font choice.

00:42:17.250 --> 00:42:23.920
So my here is this whole function,
and my choice is my font in this case.

00:42:24.070 --> 00:42:27.840
And my choice selected is the
selected state of the font.

00:42:28.520 --> 00:42:31.900
Now that we have that,
we'll try that one.

00:42:31.900 --> 00:42:34.400
Oh, I've made a mistake.

00:42:34.400 --> 00:42:39.020
So I'm going to open Terminal so that
you can read what mistake I've made.

00:42:40.200 --> 00:42:44.800
I'm going to tail the installer log here.

00:42:44.810 --> 00:42:48.040
And if you've got a bug,
the installer will run your

00:42:48.040 --> 00:42:51.820
XML through XML lint for you,
and it says that we have a

00:42:51.930 --> 00:42:53.540
problem with these ampersands.

00:42:53.540 --> 00:42:57.250
And the problem is that because they
are embedded in an XML document,

00:42:57.270 --> 00:43:01.160
they have to be escaped as HTML entities.

00:43:01.160 --> 00:43:06.360
And this, for an ampersand,
is ampersand amp semicolon.

00:43:06.360 --> 00:43:09.860
Once I've done that,
I can launch this again.

00:43:09.860 --> 00:43:11.940
The installer works.

00:43:12.220 --> 00:43:13.700
Navigate through it.

00:43:13.770 --> 00:43:16.440
Well,
now our default selection is correct.

00:43:16.470 --> 00:43:19.530
If I deselect the app,
the font becomes disabled.

00:43:19.550 --> 00:43:22.120
If I select the app,
the font becomes enabled.

00:43:22.150 --> 00:43:24.200
The user is allowed to click on the font.

00:43:24.370 --> 00:43:28.190
They can unselect the font,
and they can select the other choices,

00:43:28.190 --> 00:43:30.940
and the font maintains
its existing state.

00:43:30.980 --> 00:43:36.960
So can I go back to the slides?

00:43:44.810 --> 00:43:47.150
So that was our fourth hands-on.

00:43:47.150 --> 00:43:50.200
Now I'd like to sort of put together
everything you've just seen.

00:43:51.010 --> 00:43:54.040
Packages are the basic building
block of the installer.

00:43:54.250 --> 00:43:56.620
They're where your archives end up,
they're where your files end up,

00:43:56.800 --> 00:43:58.820
they're where you can put your
pre- and post-install scripts.

00:43:58.900 --> 00:44:03.400
Distribution scripts now let us take
all the flags out of the packages

00:44:03.400 --> 00:44:05.900
that referred to user interface.

00:44:05.900 --> 00:44:08.780
In particular,
there was a whole collection of flags

00:44:08.900 --> 00:44:12.230
that interacted with mPackages that made
it very difficult to create the custom

00:44:12.310 --> 00:44:13.900
install panel in the way you wanted.

00:44:13.900 --> 00:44:14.810
That's all gone.

00:44:14.810 --> 00:44:17.680
Distribution scripts give you
one file to control all that.

00:44:17.870 --> 00:44:20.630
You've seen requirement checks now
implemented using JavaScript in

00:44:20.680 --> 00:44:21.870
the distribution scripts.

00:44:21.910 --> 00:44:25.620
These let you replace your executable
or script requirement checks,

00:44:25.620 --> 00:44:28.080
your install check and
volume check scripts,

00:44:28.310 --> 00:44:31.900
with JavaScript that's somewhat
safer to the users running your code.

00:44:32.240 --> 00:44:34.240
Because the JavaScript bridge
is read-only,

00:44:34.240 --> 00:44:37.430
we know that your installation
check and volume check scripts,

00:44:37.500 --> 00:44:39.850
they can only look at
stuff about the system.

00:44:39.900 --> 00:44:42.150
They can't send anything out
about the system and they can't

00:44:42.150 --> 00:44:42.890
change anything about the system.

00:44:42.900 --> 00:44:43.900
So, that's the first thing
we're going to talk about.

00:44:43.900 --> 00:44:45.900
We've also shown you choices.

00:44:45.900 --> 00:44:49.740
Choices are a sort of abstraction in the
installer now that allow you to attach

00:44:49.860 --> 00:44:53.300
dynamic JavaScript attributes to them,
control what the user

00:44:53.300 --> 00:44:56.260
can and can't install,
what the user's defaults will

00:44:56.260 --> 00:44:57.890
see in the custom install panel.

00:44:57.900 --> 00:45:00.590
So, what's next?

00:45:00.960 --> 00:45:04.550
Well, you can play with the hands-on
samples that we just showed you.

00:45:04.560 --> 00:45:07.520
You can play with the homework
samples that we provided in the

00:45:07.520 --> 00:45:09.790
example code that was for the session.

00:45:09.880 --> 00:45:10.880
JP mentioned these earlier.

00:45:10.880 --> 00:45:15.190
There'll be a quiz, actually,
in the Installer Lab coming

00:45:15.190 --> 00:45:15.190
up after this session.

00:45:16.320 --> 00:45:20.010
Now, one of the example code pieces that
we provided with the homework refers

00:45:20.130 --> 00:45:21.600
to upgrade and downgrade logic.

00:45:21.640 --> 00:45:22.680
And this is fairly important.

00:45:22.700 --> 00:45:24.630
This is a big change with
distribution scripts.

00:45:24.720 --> 00:45:27.510
Prior to distribution scripts,
the installer would look at the

00:45:27.510 --> 00:45:30.300
versions of your packages and
it would prevent downgrades.

00:45:30.300 --> 00:45:33.400
It would tell the user that there's a
newer version already installed that

00:45:33.400 --> 00:45:35.180
they shouldn't be allowed to install.

00:45:35.180 --> 00:45:37.850
And you had to specify some flags
in the installer that may or may

00:45:37.880 --> 00:45:40.960
not have worked reliably that
allowed to override this behavior.

00:45:40.960 --> 00:45:43.930
What we've decided to do with
distribution scripts is we've

00:45:44.210 --> 00:45:47.070
taken all of the back rev
checking out of the installer.

00:45:47.070 --> 00:45:51.160
The installer only cares about your
bundle ID and the version number.

00:45:51.160 --> 00:45:53.860
And it doesn't care whether the version
number is going forward or backwards.

00:45:53.860 --> 00:45:56.570
All it's interested in doing is
finding out what files are on the disk,

00:45:56.630 --> 00:45:59.380
what files you want to put on the disk,
what operations are necessary

00:45:59.380 --> 00:46:01.960
to make the change between
what's there and what you want.

00:46:02.090 --> 00:46:04.310
If you don't want the user
to be able to downgrade,

00:46:04.310 --> 00:46:06.750
if you don't want them to
go back in version numbers,

00:46:06.750 --> 00:46:09.260
then there's some sample
code that we provided.

00:46:09.260 --> 00:46:10.710
It's a very simple JavaScript.

00:46:11.040 --> 00:46:13.650
We've provided some glue in the
JavaScript bridge that lets you

00:46:13.760 --> 00:46:14.930
find out if it's a downgrade.

00:46:14.950 --> 00:46:16.430
You can attach it to your choices.

00:46:16.510 --> 00:46:17.540
You can tell your choice.

00:46:17.610 --> 00:46:20.170
Don't allow it to be selected
if this is a downgrade.

00:46:22.570 --> 00:46:25.460
We've provided some sample code on
how to implement custom locations.

00:46:25.530 --> 00:46:28.780
JP talked about at the beginning of his
session how you can create a package

00:46:28.790 --> 00:46:32.200
that has relocatable files in it,
relocatable apps for example.

00:46:32.270 --> 00:46:39.900
We've provided the sample code
showing you how to implement that

00:46:39.900 --> 00:46:39.900
functionality in distribution scripts,
specify the default

00:46:39.900 --> 00:46:39.900
location for your packages,
etc.

00:46:40.660 --> 00:46:42.260
We show you how to do multi-CD installs.

00:46:42.470 --> 00:46:44.590
This has been a popular feature
request for a couple years.

00:46:44.600 --> 00:46:47.770
Now it's as simple as specifying
something in the file URL of your package

00:46:47.850 --> 00:46:50.260
ref elements in the distribution script.

00:46:50.900 --> 00:46:54.800
We've also provided a JavaScript bridge
function called system.run.

00:46:54.800 --> 00:46:58.800
This lets you execute arbitrary,
external, executable or script content.

00:46:58.820 --> 00:47:01.720
And if you use this function,
the installer is going to put up a

00:47:01.720 --> 00:47:05.590
somewhat onerous sheet at the beginning
of your install saying this installer

00:47:05.750 --> 00:47:07.670
wants to run some executable content.

00:47:07.670 --> 00:47:10.660
Are you as the user sure that
you want to allow it to do so?

00:47:10.930 --> 00:47:13.540
Because of this,
we strongly discourage you from

00:47:13.540 --> 00:47:15.630
using the system.run method.

00:47:17.250 --> 00:47:20.740
PackageMaker has been revised for Tiger.

00:47:20.890 --> 00:47:24.360
It includes support for creating
distribution script-based installers.

00:47:24.360 --> 00:47:26.110
We're continuing to work on PackageMaker.

00:47:26.200 --> 00:47:28.750
PackageMaker is going to
include even more support for

00:47:28.790 --> 00:47:30.760
distribution scripts in the future.

00:47:31.180 --> 00:47:33.750
We want you to start moving your
packages over to distribution scripts.

00:47:33.780 --> 00:47:36.840
We think this will make it much easier
for you to support the Apple installer.

00:47:37.020 --> 00:47:40.090
Distribution scripts are Tiger only,
so if you have a Tiger only product,

00:47:40.090 --> 00:47:43.310
it's very easy to create a
distribution script only installer.

00:47:43.410 --> 00:47:46.200
If you're working on something
that installs on earlier

00:47:46.200 --> 00:47:48.760
versions of Mac OS also,
then you can use Packagemaker

00:47:48.760 --> 00:47:52.410
to create more hybrid packages
that work in both cases.

00:47:52.890 --> 00:47:54.860
We want you to write it
once and test it everywhere.

00:47:54.860 --> 00:47:58.070
Because of the dynamic nature
of distribution scripts,

00:47:58.190 --> 00:48:00.770
in particular, the functionality of
the JavaScript bridge,

00:48:00.820 --> 00:48:04.270
it's important that you actually
try out your requirement checks and

00:48:04.270 --> 00:48:07.880
your custom install dynamic behavior
on different machines that you

00:48:07.880 --> 00:48:09.150
expect to return different results.

00:48:09.810 --> 00:48:12.990
JavaScript, in particular,
makes it very easy to sort of

00:48:13.000 --> 00:48:16.230
connect the dots and to go into
long hierarchies of objects.

00:48:16.320 --> 00:48:18.680
Unfortunately,
if one of those objects is missing,

00:48:18.680 --> 00:48:19.970
JavaScript will throw an exception.

00:48:20.090 --> 00:48:22.760
All you have to do is wrap your
function in an exception handler.

00:48:22.760 --> 00:48:24.780
Couldn't be simpler,
but if you forget it,

00:48:24.860 --> 00:48:28.520
the installer script will crash
and the installer will act weird.

00:48:30.610 --> 00:48:31.860
and we want you to explore.

00:48:31.860 --> 00:48:34.160
We've created a whole bunch
of new functionality in Tiger,

00:48:34.160 --> 00:48:36.000
a lot of it revolving
around distribution scripts.

00:48:36.000 --> 00:48:38.840
There's a lot of documentation about it.

00:48:38.850 --> 00:48:40.610
Speaking of which.

00:48:41.150 --> 00:48:44.030
Documentation, sample code,
and other resources are all available at

00:48:44.030 --> 00:48:45.840
the uber URL that they've posted here.

00:48:45.840 --> 00:48:48.270
We have an installer release note.

00:48:48.480 --> 00:48:49.800
This was installed as part of Tiger.

00:48:49.800 --> 00:48:51.450
It describes distribution scripts.

00:48:51.610 --> 00:48:54.820
It describes how to turn on the debug
version of the attribute engine.

00:48:54.820 --> 00:48:59.850
It describes all of the
JavaScript bridge methods.

00:48:59.890 --> 00:49:01.870
It describes all of the XML elements.

00:49:01.940 --> 00:49:05.390
And it even gives you some design
philosophy behind distribution scripts.

00:49:05.760 --> 00:49:07.610
We also have a public mailing list.

00:49:07.610 --> 00:49:10.100
If you go to, on the web,
lists.apple.com,

00:49:10.190 --> 00:49:13.440
you can join the installer-dev
mailing list where there are several

00:49:13.860 --> 00:49:16.920
third-party developers such as
yourself helping each other out,

00:49:16.990 --> 00:49:20.340
writing their installers,
working around bugs in the installer,

00:49:20.340 --> 00:49:23.280
finding new cool things you
can do with the installer.

00:49:25.570 --> 00:49:28.460
And finally, directly after this session,
in the Tiger Lab,

00:49:28.510 --> 00:49:31.670
we're going to have a lab for helping
you create your installer packages.

00:49:31.670 --> 00:49:33.340
So I want you to all join us there.

00:49:33.530 --> 00:49:35.430
It's actually a pretty
big lab you might all fit.