WEBVTT

00:00:01.230 --> 00:00:02.140
Hello.

00:00:02.260 --> 00:00:05.730
Welcome to session 146,
Cocoa Advanced View Techniques.

00:00:05.740 --> 00:00:07.770
This will be our final
Cocoa session of the week,

00:00:07.870 --> 00:00:09.100
so thank you very much for coming.

00:00:09.100 --> 00:00:11.100
My name is Troy Stephens.

00:00:11.100 --> 00:00:13.100
I'm an application
frameworks engineer at Apple,

00:00:13.100 --> 00:00:15.570
where I work specifically on AppKit,
and I'm here today to talk

00:00:15.690 --> 00:00:17.100
to you about Cocoa Views.

00:00:17.100 --> 00:00:19.810
And in particular,
what I want to do is show you some of the

00:00:19.810 --> 00:00:24.100
neat kinds of things that you can do with
Views in your applications by leveraging

00:00:24.100 --> 00:00:28.090
some of the fantastic new technologies
and APIs that we have on Tiger.

00:00:28.240 --> 00:00:31.170
But in addition to focusing on Tiger,
I'm going to point out along the

00:00:31.170 --> 00:00:35.100
course of the talk a couple of things
that are long-standing facilities

00:00:35.100 --> 00:00:38.620
that we have in Cocoa in AppKit and
in Interface Builder that are

00:00:38.620 --> 00:00:41.090
maybe underutilized by developers.

00:00:41.100 --> 00:00:44.040
So first we'll dive in and just
do a quick review of Views,

00:00:44.040 --> 00:00:47.100
what Views are,
and then we'll dive into our content.

00:00:47.100 --> 00:00:49.920
So Views, as you know,
are the basic building blocks of

00:00:49.920 --> 00:00:52.100
window content in a Cocoa application.

00:00:52.110 --> 00:00:54.990
They are your application's
primary interface to its users.

00:00:55.270 --> 00:00:58.090
They are the application's means of
presenting its underlying data modeling.

00:00:58.100 --> 00:01:01.240
So you can see that the view
is a view that is visually,

00:01:01.250 --> 00:01:03.650
in some form, visually,
and giving the users a chance to

00:01:03.650 --> 00:01:06.100
interact with and edit that data model
or whatever data you have to provide.

00:01:06.160 --> 00:01:10.060
You can think of Views productively
as rectangles of responsibility.

00:01:10.120 --> 00:01:14.100
A view is responsible for
drawing in its own content area.

00:01:14.100 --> 00:01:15.950
So when the window is asked to draw,
the view has to draw its own content.

00:01:16.140 --> 00:01:18.390
Views are responsible
for handling user input,

00:01:18.500 --> 00:01:21.100
namely, specifically,
keyboard and mouse events.

00:01:21.100 --> 00:01:23.990
Views can be nested in
a tree or hierarchy.

00:01:24.250 --> 00:01:27.100
They support arbitrary, nearly arbitrary,
affine coordinate transforms.

00:01:27.100 --> 00:01:29.090
You can do translations, scaling,
rotations.

00:01:29.100 --> 00:01:31.100
So if you have some
particular kind of data,

00:01:31.100 --> 00:01:33.420
like a graph you want to draw,
and you have a particular convenient

00:01:33.420 --> 00:01:36.700
coordinate system you want to draw in,
you can set up that coordinate system

00:01:36.750 --> 00:01:40.100
so you can work in it natively and
handle user events in it natively.

00:01:40.100 --> 00:01:43.100
Views, remember,
View is a kind of responder.

00:01:43.100 --> 00:01:45.080
So Views participate
in the responder chain,

00:01:45.150 --> 00:01:49.090
which is a very important, flexible,
dynamic mechanism that AppKit provides

00:01:49.090 --> 00:01:53.070
for passing messages around and
handling action messages specifically,

00:01:53.450 --> 00:01:56.100
especially from, say, menu items.

00:01:56.100 --> 00:02:00.100
Views are an integral part of
the drag and drop architecture.

00:02:00.100 --> 00:02:02.290
You're always dragging
from a view or to a view,

00:02:02.290 --> 00:02:04.100
usually, in a Cocoa application.

00:02:04.100 --> 00:02:09.200
And they are part of the unified drawing
and printing architecture whereby,

00:02:09.200 --> 00:02:12.100
you know, if you've set up your view
to draw itself on the screen,

00:02:12.190 --> 00:02:15.560
then you pretty much have everything
or almost everything you need to go

00:02:15.560 --> 00:02:19.100
ahead and print that same content
out to a printing output device.

00:02:19.120 --> 00:02:22.100
And there's a whole lot more
functionality in NSView.

00:02:22.100 --> 00:02:24.510
You have support for tool tips,
cursor management, tracking racks,

00:02:24.510 --> 00:02:25.100
and so forth.

00:02:25.100 --> 00:02:29.100
So it's a very complex,
integral part of the AppKit.

00:02:29.100 --> 00:02:31.100
And remember that controls are Views,
too.

00:02:31.100 --> 00:02:33.100
A control is just a
special subclass of View,

00:02:33.100 --> 00:02:37.350
a kind of View that typically
delegates a lot of its drawing and

00:02:37.670 --> 00:02:42.910
event handling responsibility to an
associated cell or cell instances.

00:02:43.100 --> 00:02:45.490
And incidentally,
controls can also have an integer

00:02:45.490 --> 00:02:47.630
tag value that Views don't have,
which gives you sort of an

00:02:47.680 --> 00:02:52.150
old-fashioned but sometimes useful
way to distinguish between different

00:02:52.150 --> 00:02:54.100
Views in a window and find Views.

00:02:54.100 --> 00:02:58.260
So, NSView is a very complex,
integral part of the AppKit that

00:02:58.450 --> 00:03:02.100
gives us a lot of topics we could
potentially talk about today.

00:03:02.100 --> 00:03:05.390
To focus our talk down,
what I'm going to do is we're

00:03:05.390 --> 00:03:08.100
going to take a look at a
concrete example application.

00:03:08.100 --> 00:03:10.790
And we're going to look at the
ways that some of these sort of

00:03:10.850 --> 00:03:14.120
View-related challenges that come
up in the course of implementing

00:03:14.120 --> 00:03:16.100
that application can be addressed.

00:03:16.100 --> 00:03:18.530
And so,
I was thinking about what might make

00:03:18.530 --> 00:03:23.100
kind of a fun or interesting and maybe
even useful example app for today's talk.

00:03:23.100 --> 00:03:25.580
And I was thinking about one thing
that I have a ton of nowadays,

00:03:25.600 --> 00:03:28.060
and we all have a lot of,
is digital image files, right?

00:03:28.100 --> 00:03:30.380
I've got a digital camera that
just keeps cranking them out,

00:03:30.380 --> 00:03:31.800
and I don't know what
to do with them all.

00:03:32.190 --> 00:03:35.130
And I get these images,
and it's not so much the organizational

00:03:35.130 --> 00:03:38.480
problem that I want to address today,
but typically, you know,

00:03:38.480 --> 00:03:40.600
the thing I most often want to
do is I want to scale them down,

00:03:40.600 --> 00:03:41.080
right?

00:03:41.100 --> 00:03:45.100
I've got these, you know, say,
2 megapixel images.

00:03:45.100 --> 00:03:47.100
I've got kind of an old camera here.

00:03:47.100 --> 00:03:48.100
It's showing its age.

00:03:48.100 --> 00:03:52.100
But I've got these high-resolution
images that I want to take,

00:03:52.100 --> 00:03:52.100
and maybe I want to reference them.

00:03:52.100 --> 00:03:55.100
I want to reference them from a web
page or attach them to an email,

00:03:55.100 --> 00:03:57.100
and I want to scale them down.

00:03:57.100 --> 00:03:59.820
So I thought, well,
AppKit and Quartz contain ample

00:03:59.820 --> 00:04:02.790
functionality for doing this kind
of thing and implementing a real

00:04:02.790 --> 00:04:04.100
lightweight tool for this kind of thing.

00:04:04.100 --> 00:04:08.700
We have the ability to read and write
standard image file formats like JPEG,

00:04:08.700 --> 00:04:12.100
TIFF, PNG, and so on,
and also the ability to do compositing

00:04:12.100 --> 00:04:13.100
with different kinds of transforms.

00:04:13.100 --> 00:04:17.030
So we could actually do the scaling
using AppKit and Quartz alone,

00:04:17.210 --> 00:04:21.100
but now on Tiger, we have Core Image,
which is this fantastic

00:04:21.100 --> 00:04:21.100
library of images.

00:04:21.100 --> 00:04:23.470
It's a fantastic library
of incredibly powerful,

00:04:23.770 --> 00:04:26.100
incredibly fast image
manipulation capabilities.

00:04:26.100 --> 00:04:29.220
And so with all these
capabilities combined,

00:04:29.220 --> 00:04:33.100
I launched off to make an
application and produce this.

00:04:33.100 --> 00:04:34.090
This is Reducer.

00:04:34.200 --> 00:04:37.100
This will be the example application
that we'll look at today.

00:04:37.100 --> 00:04:40.100
And the source code for this is online.

00:04:40.100 --> 00:04:41.870
It somehow didn't manage to
make it into the composite

00:04:41.930 --> 00:04:43.080
disk image for the conference.

00:04:43.140 --> 00:04:46.970
But if you go to
developer.apple.com/sourcecode

00:04:47.050 --> 00:04:50.100
and search for Reducer,
you'll find it's been online all week.

00:04:50.100 --> 00:04:51.090
And I've got the full
source code for this,

00:04:51.090 --> 00:04:55.100
so everything I'm going to talk about
today you can study in detail later.

00:04:55.570 --> 00:04:58.820
So what are the basic
features of this app?

00:04:58.860 --> 00:05:00.840
First of all,
first thing we wanted to do, of course,

00:05:00.840 --> 00:05:04.820
is to downsample images,
both to produce a smaller physical image,

00:05:04.820 --> 00:05:07.740
smaller number of pixels,
and also to produce a smaller

00:05:07.740 --> 00:05:10.460
file for attaching to an
email or pulling over the web.

00:05:10.470 --> 00:05:12.000
So that's the first thing we want to do.

00:05:12.020 --> 00:05:14.030
Now oftentimes,
when you downsample an image,

00:05:14.040 --> 00:05:15.620
that kind of tends to
blur it a little bit.

00:05:15.620 --> 00:05:16.790
It gets a little fuzzed out.

00:05:17.020 --> 00:05:19.400
So it would be kind of
nice to sharpen that image.

00:05:19.430 --> 00:05:21.550
Once upon a time,
this would have been like,

00:05:21.580 --> 00:05:23.640
what am I going to do to find
a library that does this?

00:05:23.640 --> 00:05:26.250
And now all this stuff is
built in in Core Image.

00:05:26.260 --> 00:05:28.910
And Tiger, hopefully,
had a chance to attend the

00:05:28.910 --> 00:05:32.160
Core Image talks earlier this week,
or will have a chance later to

00:05:32.160 --> 00:05:34.600
review the recordings from those.

00:05:34.780 --> 00:05:38.170
So now you can just take an image
and hand it to Core Image and say,

00:05:38.170 --> 00:05:39.140
hey, you, sharpen this.

00:05:39.140 --> 00:05:40.000
And you get it back.

00:05:40.000 --> 00:05:40.840
You're a sharpened image.

00:05:40.840 --> 00:05:42.750
And there are all kinds of
other things that you can do.

00:05:42.830 --> 00:05:44.290
So we're just going to
keep it simple right now.

00:05:44.300 --> 00:05:47.940
But once you're hooked into Core Image,
there are all kinds of things

00:05:47.960 --> 00:05:49.200
you can do with images.

00:05:49.200 --> 00:05:51.270
So maybe next,
we want to add some decorations,

00:05:51.270 --> 00:05:53.240
maybe add a border to our images.

00:05:53.260 --> 00:05:54.560
Add a drop shadow.

00:05:54.590 --> 00:05:56.720
And then we want to save the
result out in one of these

00:05:56.720 --> 00:05:59.650
standard image file formats,
like JPEG.

00:05:59.760 --> 00:06:01.870
And then maybe we're going
to put it on a web page.

00:06:02.010 --> 00:06:05.380
So we might as well have this
tool generate an HTML image tag,

00:06:05.380 --> 00:06:06.910
real simple,
a string that we can copy to the

00:06:06.990 --> 00:06:12.170
pasteboard and paste into our web page.

00:06:12.700 --> 00:06:14.950
So in the course of looking
at this reducer example,

00:06:14.950 --> 00:06:17.090
we're going to cover a
variety of techniques,

00:06:17.090 --> 00:06:19.160
including some new APIs on Tiger.

00:06:19.160 --> 00:06:23.210
We'll look at using NSAnimation,
the new NSAnimation and NSViewAnimation

00:06:23.310 --> 00:06:27.240
classes that we've added to AppKit and
Tiger to help you sort of liven up

00:06:27.320 --> 00:06:33.160
and animate your state changes in
your views and bring your UI to life.

00:06:33.160 --> 00:06:35.540
We'll also look at using
CoreImage in general together

00:06:35.540 --> 00:06:37.030
with the Cocoa applications.

00:06:37.160 --> 00:06:38.820
Very easy to do this.

00:06:38.820 --> 00:06:39.940
Very straightforward.

00:06:40.110 --> 00:06:42.760
And we'll look at some new drawing,
what we call the drawing

00:06:42.760 --> 00:06:44.440
redirection methods in NSView.

00:06:44.440 --> 00:06:47.990
It's a set of three new methods
in NSView and a method in

00:06:47.990 --> 00:06:52.510
NSGraphicsContext that enable
you to take a subtree of views,

00:06:52.560 --> 00:06:55.100
essentially,
and ask it to draw somewhere other

00:06:55.100 --> 00:06:56.630
than in the window where it resides.

00:06:56.700 --> 00:06:59.120
Or you can have a view subtree
that doesn't even reside

00:06:59.120 --> 00:07:00.980
in the window currently,
and you can have it render

00:07:01.030 --> 00:07:03.280
out to a bitmap or something,
just that subtree,

00:07:03.280 --> 00:07:05.920
so that you can then use
that bitmap for something.

00:07:06.180 --> 00:07:08.620
So in the course of looking
at all these new things,

00:07:08.700 --> 00:07:12.290
we're also going to look at some
stuff that's maybe not quite so new,

00:07:12.290 --> 00:07:14.010
but still very shiny.

00:07:14.290 --> 00:07:18.940
We'll look at using an NSOpenGL context
with an arbitrary NSView.

00:07:18.990 --> 00:07:22.610
And we'll also look at what's involved
in creating custom views in general

00:07:22.700 --> 00:07:25.640
and creating palettes for those views
so that you can really make them first

00:07:25.760 --> 00:07:28.010
class citizens in the Cocoa world.

00:07:28.060 --> 00:07:30.180
And then lastly,
we'll also look at making

00:07:30.180 --> 00:07:31.220
the views when you do that.

00:07:31.290 --> 00:07:35.600
How do you make a custom views
attributes bindable in Interface Builder?

00:07:35.820 --> 00:07:38.500
So let's go over to demo one and
first take a quick look at our

00:07:38.640 --> 00:07:41.960
completed example application
just to get an idea what it does.

00:07:42.180 --> 00:07:42.980
So here it is.

00:07:43.060 --> 00:07:46.240
This is the reducer
application version 1.0.

00:07:46.320 --> 00:07:49.010
And we've got our main parameters
window here on the left,

00:07:49.150 --> 00:07:50.220
the vertical window.

00:07:50.370 --> 00:07:52.890
And it's got sort of an image well
where we can drag in an image.

00:07:52.900 --> 00:07:55.510
Let's see,
we've got some example images here.

00:07:55.610 --> 00:07:57.030
And I can drag something in.

00:07:57.120 --> 00:08:01.900
And this is the result window
here where we display a preview of

00:08:01.900 --> 00:08:04.710
what's going to be output to the
file when we go ahead and save.

00:08:04.840 --> 00:08:06.300
So we've got our reduced image.

00:08:06.300 --> 00:08:08.010
I've got a 1600 by 1200 image.

00:08:08.020 --> 00:08:09.910
I've reduced it down.

00:08:10.190 --> 00:08:11.790
You know,
we can drag in a different image.

00:08:11.860 --> 00:08:13.860
We can work with this one here.

00:08:13.860 --> 00:08:15.990
And I'll maybe make it a little bigger.

00:08:16.040 --> 00:08:17.680
I would actually want
to reduce it smaller,

00:08:17.700 --> 00:08:20.520
but so you can see a little
more what's going on.

00:08:20.520 --> 00:08:22.900
So I've reduced it to about a
quarter of the number of pixels,

00:08:22.900 --> 00:08:24.790
half the size in each dimension.

00:08:25.090 --> 00:08:27.890
And, you know, it's a little fuzzy,
so I might like to sharpen

00:08:28.050 --> 00:08:29.220
it and clean it up a bit.

00:08:29.510 --> 00:08:33.000
And that adds some nice sharpness,
really brings that face out.

00:08:33.040 --> 00:08:34.040
We can slide.

00:08:34.060 --> 00:08:37.970
We have an intensity parameter
for the -- this is just a CI,

00:08:38.090 --> 00:08:40.340
unsharp mask filter.

00:08:40.390 --> 00:08:43.660
And we can slide that along,
get less sharpness, more sharpness,

00:08:43.690 --> 00:08:45.020
really somewhere in the middle.

00:08:45.080 --> 00:08:47.620
Moderation is a good thing,
so right in the middle there.

00:08:47.670 --> 00:08:49.990
And there's a radius parameter
that we can adjust to.

00:08:50.140 --> 00:08:52.150
We might want to add
a border to the image,

00:08:52.150 --> 00:08:54.030
you know, give it some thickness.

00:08:54.100 --> 00:08:57.810
This is stuff that I'm doing after
the fact with regular quartz drawings,

00:08:57.830 --> 00:08:59.090
Bezier path.

00:08:59.350 --> 00:09:03.360
And we can even round
the corners a little bit.

00:09:03.360 --> 00:09:07.410
And change the color, you know,
that Bezier path, real simple,

00:09:07.410 --> 00:09:09.200
straightforward stuff.

00:09:10.130 --> 00:09:10.600
I like white.

00:09:10.600 --> 00:09:12.100
Let's stick with white there.

00:09:12.170 --> 00:09:13.250
Neutral frame.

00:09:13.270 --> 00:09:15.060
And we can add a drop
shadow underneath it.

00:09:15.100 --> 00:09:20.100
So let's say then we really want sort
of more of a 400 pixel wide image.

00:09:20.100 --> 00:09:23.710
Or at least the image itself
when scaled down will be that.

00:09:23.710 --> 00:09:25.100
We add a little more for the shadow.

00:09:25.140 --> 00:09:28.100
And then we're going to go ahead
and click the saving tab here.

00:09:28.110 --> 00:09:33.100
And we have a variety of formats
we can choose to save in.

00:09:33.100 --> 00:09:36.100
Maybe we'll save in PNG because here
we have some transparency information.

00:09:36.100 --> 00:09:39.100
We have a shadow that we want to be
able to drop onto any color background.

00:09:39.100 --> 00:09:41.070
So let's just save it as a PNG.

00:09:41.070 --> 00:09:44.270
And we'll give it a name.

00:09:46.500 --> 00:09:47.240
Save it out.

00:09:47.240 --> 00:09:50.070
And there's our PNG file in the desktop.

00:09:50.100 --> 00:09:53.450
And I can open that up in
preview and just look at it.

00:09:53.540 --> 00:09:57.370
And we can see that if I change
the background color here,

00:09:58.490 --> 00:10:00.840
It's a little hard to see the shadow,
and probably especially hard

00:10:00.840 --> 00:10:01.900
on that projection screen.

00:10:01.900 --> 00:10:04.360
No, you can't see it at all, sorry.

00:10:04.450 --> 00:10:07.400
But it's there,
and it obviously doesn't have

00:10:07.400 --> 00:10:11.400
fixed white behind it or whatever,
so minor detail here.

00:10:11.400 --> 00:10:14.570
So let's say I've got this image,
you know, and maybe I've got my

00:10:14.690 --> 00:10:16.400
photo album from my trip.

00:10:16.400 --> 00:10:18.270
I'll open this up in Safari.

00:10:18.420 --> 00:10:20.350
I've got some various pictures in here.

00:10:20.400 --> 00:10:27.130
So let's go ahead and open
that HTML file in TextEdit.

00:10:30.300 --> 00:10:32.100
It's just a real simple HTML file.

00:10:32.100 --> 00:10:33.540
Let's say I want to put
that image at the top.

00:10:33.540 --> 00:10:36.540
I go over to Reducer,
and this is real simple stuff,

00:10:36.570 --> 00:10:38.180
copying a string, composing a string.

00:10:38.180 --> 00:10:40.830
Since we happen to know the width
and height of the image in pixels,

00:10:40.890 --> 00:10:43.720
we can go ahead and stick that in
and not have to type it by hand.

00:10:43.730 --> 00:10:47.650
And we paste it in and save,
and then go back and

00:10:47.670 --> 00:10:48.700
reload our photo album.

00:10:48.700 --> 00:10:49.900
And there's our picture there.

00:10:49.900 --> 00:10:53.060
And so back here.

00:10:53.060 --> 00:10:55.770
And we just keep doing this.

00:10:58.600 --> 00:10:59.600
And so there you go.

00:10:59.640 --> 00:11:02.080
Oh, we got a couple copies
of that in there now.

00:11:02.080 --> 00:11:05.010
So anyhow,
so that's the reducer application.

00:11:05.110 --> 00:11:06.440
That's basically what it does.

00:11:06.440 --> 00:11:08.400
Something interesting to
note about the UI here,

00:11:08.490 --> 00:11:11.760
you've noticed we have these
collapsible boxes here that contain

00:11:11.870 --> 00:11:14.540
the different parameters in them.

00:11:14.540 --> 00:11:17.240
And so if, you know,
I don't want to border, let's say,

00:11:17.310 --> 00:11:20.390
on the image, well then I have a bunch of
parameters that are irrelevant.

00:11:20.410 --> 00:11:22.220
So there are different
things you can do in that.

00:11:22.220 --> 00:11:26.010
In that kind of case in your UI,
you can just disable the controls and

00:11:26.110 --> 00:11:29.320
leave them visible but maybe you want
to reclaim some real estate here,

00:11:29.320 --> 00:11:30.980
you know,
so you can have that box collapse

00:11:31.150 --> 00:11:33.960
down and the one underneath
it slides up and so forth.

00:11:34.120 --> 00:11:37.130
And this is all stuff that's done
with NSAnimation and we'll see in a

00:11:37.130 --> 00:11:39.500
little bit how that is accomplished.

00:11:39.500 --> 00:11:43.090
So I think that's it for this demo and
if we could go back to the slides please.

00:11:48.010 --> 00:11:50.000
So that's the reducer application.

00:11:50.140 --> 00:11:53.580
I'm going to talk a little bit later
about the image processing pipeline.

00:11:53.580 --> 00:11:55.640
It's mostly pretty straightforward.

00:11:55.640 --> 00:11:59.120
There's an image reducer object that's
responsible for doing all sort of the

00:11:59.120 --> 00:12:01.660
heavy image lifting in the application.

00:12:01.660 --> 00:12:03.780
I won't go into the code in detail,
but it's there for you to study.

00:12:03.850 --> 00:12:04.640
It's quite straightforward.

00:12:04.640 --> 00:12:06.500
And I'll just talk about the
overall architecture later.

00:12:06.590 --> 00:12:08.360
But this is, after all, a ViewTalk.

00:12:08.500 --> 00:12:11.450
So I'm going to focus primarily
on some of the custom views that

00:12:11.450 --> 00:12:14.950
I've used in this application,
the collapsible box

00:12:14.950 --> 00:12:16.360
that I just mentioned.

00:12:16.400 --> 00:12:19.430
And we've also got what you might
think would be an ordinary image

00:12:19.430 --> 00:12:21.130
view here in the result window.

00:12:21.470 --> 00:12:23.360
But it turns out that
for performance reasons,

00:12:23.360 --> 00:12:26.310
I've decided to implement what
I call a hybrid image view.

00:12:26.320 --> 00:12:27.820
It's not actually an image view subclass.

00:12:27.820 --> 00:12:29.180
It's an ordinary NS view.

00:12:29.410 --> 00:12:33.550
And what it can do is switch back and
forth on the fly invisibly between doing

00:12:33.550 --> 00:12:35.680
quartz drawing and doing open GL drawing.

00:12:35.680 --> 00:12:37.620
And we'll look at how that
can be done a little later.

00:12:37.650 --> 00:12:41.410
But we'll start simple with collapsible
box and work our way to more advanced

00:12:41.470 --> 00:12:44.020
stuff through the course of the talk.

00:12:44.290 --> 00:12:45.820
So how do we make this collapsible box?

00:12:45.820 --> 00:12:47.430
Well,
it's pretty simple and straightforward,

00:12:47.460 --> 00:12:49.730
but it gives us a good context for this.

00:12:49.900 --> 00:12:52.360
First, why would you want to
create a custom view at all?

00:12:52.370 --> 00:12:54.810
There are two basic reasons
why you might want to do this,

00:12:54.930 --> 00:12:55.930
to my mind.

00:12:56.050 --> 00:12:59.090
First,
you might have an existing control whose

00:12:59.160 --> 00:13:00.590
appearance you might want to customize.

00:13:00.600 --> 00:13:02.220
An existing AppKit control,
you want to change the

00:13:02.220 --> 00:13:03.060
appearance a little bit.

00:13:03.080 --> 00:13:05.320
Or maybe, as in this case,
you want to change the behavior.

00:13:05.320 --> 00:13:08.760
You want to make something that knows
how to expand and collapse itself.

00:13:08.970 --> 00:13:10.880
So that's one case.

00:13:10.910 --> 00:13:14.420
Or you might have some general
user-defined data that you

00:13:14.420 --> 00:13:15.610
need to present to the user.

00:13:15.620 --> 00:13:16.440
And it could be anything.

00:13:16.440 --> 00:13:17.650
You want to start with a blank slate.

00:13:17.760 --> 00:13:21.610
So you want to just subclass NSView and
go ahead and do all your own drawing

00:13:21.620 --> 00:13:23.390
and all your own event handling.

00:13:23.480 --> 00:13:24.690
So you could do that, too.

00:13:24.700 --> 00:13:26.260
We're going to look at
examples of both today,

00:13:26.260 --> 00:13:28.170
but we're going to start
with collapsible box,

00:13:28.340 --> 00:13:30.450
which is an example of the former.

00:13:30.470 --> 00:13:32.650
And this is real simple,
so I'll go through it pretty quickly

00:13:32.650 --> 00:13:34.420
so we can get to the advanced stuff.

00:13:34.420 --> 00:13:36.980
We start by subclassing NSBox,
because I decided

00:13:36.980 --> 00:13:38.000
I like the way it looks.

00:13:38.000 --> 00:13:40.400
It's got this nice inset
when it's in a metal window,

00:13:40.400 --> 00:13:42.150
and It's got the rounded
corners and everything.

00:13:42.320 --> 00:13:43.200
The appearance is fine.

00:13:43.200 --> 00:13:45.510
I just want to add some behavior.

00:13:45.810 --> 00:13:49.920
So we're going to add a Boolean
attribute to it that NSBox didn't

00:13:49.920 --> 00:13:53.030
have that just keeps track of
whether the box is expanded.

00:13:53.070 --> 00:13:56.200
We'll also internally keep
track of the other frame value,

00:13:56.200 --> 00:14:01.180
the other rectangle that the view should
have when it's in its other state.

00:14:01.700 --> 00:14:04.410
So we're going to add the
expanded Boolean attribute,

00:14:04.410 --> 00:14:07.580
and then we're going to implement
key-value coding compliant accessors

00:14:07.600 --> 00:14:09.600
for the expanded attribute.

00:14:09.600 --> 00:14:13.600
You know, naturally you want to implement
accessors for any attribute.

00:14:13.600 --> 00:14:15.590
It's good to make them
key-value coding compliant,

00:14:15.670 --> 00:14:17.960
and in fact it's necessary if
you want to make that attribute

00:14:17.960 --> 00:14:18.600
bindable in the future.

00:14:18.600 --> 00:14:22.580
So key-value coding compliance mainly,
if you're not familiar with it,

00:14:22.650 --> 00:14:24.600
just has to do with the naming
conventions for the methods,

00:14:24.640 --> 00:14:28.650
so that we can programmatically say,
you know, we've got a string expanded,

00:14:28.650 --> 00:14:30.600
and we want to know what the possible
getter and setter methods are.

00:14:30.600 --> 00:14:32.600
So isExpanded qualifies in this case.

00:14:32.600 --> 00:14:34.390
It's a Boolean attribute.

00:14:34.700 --> 00:14:37.960
So we're going to have an
isExpandedGetter method that reports

00:14:37.960 --> 00:14:41.710
the current state of the view,
and then we'll add a setExpanded

00:14:41.710 --> 00:14:44.600
method that sets the view,
toggles it to the other state,

00:14:44.600 --> 00:14:48.600
assuming that the state you're asking
for is different from the current one.

00:14:48.600 --> 00:14:50.460
And when that gets invoked,
it's going to remember the

00:14:50.460 --> 00:14:52.960
current frame size of the view,
and then toggle to the other

00:14:53.070 --> 00:14:54.600
frame size that it's cached.

00:14:54.730 --> 00:14:57.770
And to make things more interesting,
we're going to animate that

00:14:58.240 --> 00:15:00.410
transition to the new frame size,
and in effect,

00:15:00.410 --> 00:15:03.670
we'll also look at animating
groups of these boxes together and

00:15:03.700 --> 00:15:04.590
what it takes to coordinate that.

00:15:04.600 --> 00:15:07.990
To facilitate this kind of animation,
I mean, you could kind of do this

00:15:07.990 --> 00:15:11.250
kind of stuff yourself before,
but now we've got a built-in facility in

00:15:11.250 --> 00:15:15.470
AppKit that's the beginning of probably
a growing facility that we'll have for

00:15:15.490 --> 00:15:17.550
supporting all kinds of animation stuff.

00:15:17.640 --> 00:15:21.600
If you look in NSAnimation.h,
we've got two new animation classes.

00:15:21.710 --> 00:15:25.820
NSAnimation is the base class,
and it handles all the basic

00:15:25.830 --> 00:15:28.600
functionality that you might expect.

00:15:28.600 --> 00:15:31.600
So you can do some timing, you know,
keeping track of the current time value

00:15:31.600 --> 00:15:34.800
and advancing it as the clock ticks,
the real-time clock ticks by,

00:15:34.900 --> 00:15:36.600
starting and stopping animations.

00:15:36.600 --> 00:15:40.600
You can do more sophisticated things with
chaining multiple animations together.

00:15:40.600 --> 00:15:42.540
So say you have animation
B and you want it to start,

00:15:42.630 --> 00:15:44.600
you know,
three-quarters of the way through

00:15:44.600 --> 00:15:48.600
animation A or when animation A finishes,
so you can do that with NSAnimation,

00:15:48.600 --> 00:15:50.520
the functionalities in the API.

00:15:50.720 --> 00:15:53.600
We also have some built-in animation
progress curves to give you sort

00:15:53.600 --> 00:15:55.600
of -- so you don't have to have,
like, just a linear motion.

00:15:55.600 --> 00:15:57.540
You can have some
acceleration and deceleration.

00:15:57.620 --> 00:16:00.600
We define a few standard curves for you.

00:16:00.600 --> 00:16:03.110
And there's a delegate mechanism
in there so that you can do

00:16:03.110 --> 00:16:06.480
certain kinds of customization
of NSAnimation's behavior without

00:16:06.480 --> 00:16:08.590
having to subclass it necessarily.

00:16:08.600 --> 00:16:10.570
But for most everyday
stuff that you want to do,

00:16:10.620 --> 00:16:14.100
you might want to just, you know,
move a view across your window or resize

00:16:14.100 --> 00:16:16.600
it a bit or fade some things in or out.

00:16:16.600 --> 00:16:20.710
And for that, we provide NSViewAnimation,
which you can use just out of the box to

00:16:20.710 --> 00:16:24.570
do some real basic kinds of animations,
moving views, changing their origins,

00:16:24.640 --> 00:16:26.600
changing their frame sizes.

00:16:26.600 --> 00:16:29.600
We stretch and shrink the
content as we do that.

00:16:29.600 --> 00:16:33.590
And you can even do some fading in
and out kind of effects with that.

00:16:34.800 --> 00:16:36.850
Here again,
we have four standard animation

00:16:36.940 --> 00:16:38.860
curves built into NSAnimation.

00:16:38.950 --> 00:16:43.400
NSAnimation Ease In/Out might be just
the one you want to use by default.

00:16:43.550 --> 00:16:47.880
It is the curve that we use.

00:16:55.500 --> 00:16:55.760
For sheets and drawers in the
Aqua UI to give them sort of this

00:16:55.820 --> 00:16:56.180
accelerate slowly and start moving
and then decelerate slowly at the end.

00:16:56.190 --> 00:16:58.420
So if you want to have consistency,
you can use that curve.

00:16:58.500 --> 00:17:01.500
We've also got the ease in
curve and ease out curve.

00:17:01.500 --> 00:17:04.680
And if you just want a linear function
of position as a function of time,

00:17:04.690 --> 00:17:05.500
you can have that.

00:17:05.500 --> 00:17:07.850
And if you want to add
additional user-defined

00:17:07.940 --> 00:17:10.890
curves of your own imagining,
you can certainly do that

00:17:10.890 --> 00:17:13.500
by subclassing NSAnimation,
for example.

00:17:13.500 --> 00:17:17.500
So let's say you want to take this and
use it to animate one or more views.

00:17:17.500 --> 00:17:18.470
What do you do?

00:17:18.530 --> 00:17:20.790
I'll go through this fairly quickly
because this was also discussed

00:17:20.790 --> 00:17:22.830
in the Cocoa Makeover talk,
so I assume maybe you've

00:17:22.890 --> 00:17:23.460
had a chance to see it.

00:17:23.520 --> 00:17:25.500
In any case, it's fairly straightforward.

00:17:25.870 --> 00:17:29.600
First, we build an animation description,
which is an array of

00:17:29.600 --> 00:17:31.500
NSDictionary instances.

00:17:31.500 --> 00:17:35.920
And then we're going to pass that
animation description in when we create

00:17:35.920 --> 00:17:38.480
an NS view animation instance from it.

00:17:38.600 --> 00:17:40.910
So basically,
a single NS view animation can

00:17:40.910 --> 00:17:43.500
coordinate many simultaneous animations.

00:17:43.500 --> 00:17:47.930
And so you just create a dictionary
for each thing that you want to animate

00:17:47.930 --> 00:17:50.500
describing how you want to animate it.

00:17:51.720 --> 00:17:53.600
Once we have the
NSView animation instance,

00:17:53.680 --> 00:17:55.500
we set the duration of the animation.

00:17:55.500 --> 00:17:59.380
We want it to be one second,
half a second, 10 seconds.

00:17:59.420 --> 00:18:00.260
We can set that.

00:18:00.460 --> 00:18:01.750
We can set the blocking mode.

00:18:01.760 --> 00:18:05.100
Animations can run both
synchronously or asynchronously.

00:18:05.100 --> 00:18:08.240
So if it's synchronous, it's blocking,
in other words.

00:18:08.330 --> 00:18:10.260
Then when you tell the
animation to start,

00:18:10.270 --> 00:18:13.120
you're not going to return from
that start animation message.

00:18:13.270 --> 00:18:17.010
It will return to you after
the animation has finished.

00:18:17.110 --> 00:18:19.210
So if you're doing your
animation blocking,

00:18:19.210 --> 00:18:23.540
then as soon as you do start animation,
you can come back and go ahead and

00:18:23.550 --> 00:18:25.930
release the animation instance.

00:18:25.940 --> 00:18:28.390
You're all done, and you can clean up.

00:18:29.050 --> 00:18:31.680
So what this looks like in code is this.

00:18:31.680 --> 00:18:35.600
This is the first step where you
set up the array of dictionaries.

00:18:35.690 --> 00:18:37.200
And each dictionary is fairly simple.

00:18:37.200 --> 00:18:40.360
We have a target key that
specifies either a view or a

00:18:40.360 --> 00:18:41.780
window that is to be animated.

00:18:41.780 --> 00:18:43.240
That is required.

00:18:43.240 --> 00:18:45.620
And then you have optional
start and end frames.

00:18:45.620 --> 00:18:48.540
Usually the start frame,
you just let it be implicitly set

00:18:48.540 --> 00:18:49.380
as the current frame of the view.

00:18:49.380 --> 00:18:51.820
You're going to start where you are,
define a new end frame,

00:18:52.010 --> 00:18:54.260
and then you optionally
can specify an effect,

00:18:54.290 --> 00:18:57.600
which right now is either fading
the view in or fading the view out.

00:18:57.600 --> 00:18:59.960
Most of the time, if you're just going to
move a view or resize it,

00:18:59.960 --> 00:19:02.500
you'll have a target and end frame,
and that's all you need in there.

00:19:02.500 --> 00:19:04.560
And then you have additional
dictionary instances for each

00:19:04.660 --> 00:19:06.840
thing that you want to animate.

00:19:06.840 --> 00:19:10.120
Now we create our NSView animation,
just like I said, pretty straightforward.

00:19:10.120 --> 00:19:15.370
Pass it the array of dictionaries,
set the blocking mode that we want,

00:19:15.370 --> 00:19:17.380
duration, start it,
and then we're doing it

00:19:17.390 --> 00:19:19.680
synchronous so we can release it.

00:19:19.750 --> 00:19:22.880
So let's look at this back on demo one.

00:19:25.440 --> 00:19:29.210
And I will open up--we've
got two projects,

00:19:29.600 --> 00:19:30.340
project files here.

00:19:30.340 --> 00:19:34.830
I'm going to go to the top level project,
which is Reducer, the application itself.

00:19:37.720 --> 00:19:39.640
And here's our collapsible box class.

00:19:39.640 --> 00:19:44.170
And as you can see,
it's mostly boilerplate legal disclaimer.

00:19:44.470 --> 00:19:46.660
It's a simple subclass of NSBox.

00:19:46.850 --> 00:19:49.750
Here's our expanded attribute here.

00:19:50.090 --> 00:19:53.910
The public attribute that
we have accessors to set.

00:19:54.080 --> 00:19:56.160
Here's where we cache
the other frame size.

00:19:56.170 --> 00:19:59.230
We also have a facility for a
delegate that can be used to help

00:19:59.230 --> 00:20:01.000
customize the animation behavior.

00:20:01.000 --> 00:20:02.990
I'll talk about that in a minute.

00:20:03.030 --> 00:20:07.990
That's used to coordinate animation
of multiple sibling collapsible boxes.

00:20:08.000 --> 00:20:11.970
We've got another form of the
SetExpanded accessor that is actually

00:20:12.010 --> 00:20:16.000
the final point for SetExpanded with an
animate parameter so we can tell it to

00:20:16.000 --> 00:20:18.960
expand or collapse without animating.

00:20:19.070 --> 00:20:22.880
For example, we'll want this later
in Interface Builder.

00:20:22.990 --> 00:20:23.000
We'll look at that.

00:20:23.000 --> 00:20:26.260
So if we do have a delegate,
it's going to implement this method

00:20:26.260 --> 00:20:27.810
that we'll go ahead and send.

00:20:28.140 --> 00:20:32.200
We'll say, "Okay, if we have a delegate,
should this collapsible box

00:20:32.200 --> 00:20:35.590
animate to this new frame?"
And you can tell me yes or no,

00:20:35.590 --> 00:20:38.430
if I should do it or not,
and we pass in whether we're

00:20:38.430 --> 00:20:39.960
expanding or collapsing.

00:20:40.020 --> 00:20:43.000
So let's look at the
implementation real quick.

00:20:43.000 --> 00:20:44.960
It's pretty straightforward,
as you would expect.

00:20:45.070 --> 00:20:47.980
SetExpanded by default calls SetPanded.

00:20:48.010 --> 00:20:52.830
By default, it calls SetExpandedAnimate
with a parameter of yes.

00:20:53.000 --> 00:20:54.000
So we go in here.

00:20:54.000 --> 00:20:55.930
This is sort of our main funnel point.

00:20:56.010 --> 00:20:58.900
If we're going into a different
state than the current state,

00:20:59.180 --> 00:21:03.000
remember the new state and get
the other frame that we've cached

00:21:03.000 --> 00:21:06.000
and animate to the new frame
size using this method here,

00:21:06.000 --> 00:21:10.500
SetFrameSizeAnimate,
which when we go to that--

00:21:13.910 --> 00:21:16.610
is going to check, you know, first,
do we want to animate this or

00:21:16.610 --> 00:21:17.900
do we want to do it right away?

00:21:17.900 --> 00:21:19.900
Let's assume we're going to animate it.

00:21:19.960 --> 00:21:23.890
We calculate the new frame,
and this is only non-trivial because

00:21:23.900 --> 00:21:27.300
remember that the default coordinate
system for most views is not flipped.

00:21:27.400 --> 00:21:29.400
So the y-axis is pointing up.

00:21:29.430 --> 00:21:33.400
So in this case, we have these boxes,
and when a box resizes smaller,

00:21:33.450 --> 00:21:36.500
we want the top edge of the box
to stay pinned and the bottom

00:21:36.500 --> 00:21:37.770
edge to kind of slide up there.

00:21:37.900 --> 00:21:39.860
And what actually,
what this means when you're

00:21:39.870 --> 00:21:42.400
in a non-flipped coordinate
system is that the frame,

00:21:42.400 --> 00:21:44.910
you're actually changing the origin too,
right, because the origin is down

00:21:44.910 --> 00:21:45.620
on the bottom of the box.

00:21:45.900 --> 00:21:49.490
So we've got to both shrink the size
of the box and also shift it up by

00:21:49.490 --> 00:21:50.900
the same amount at the same time.

00:21:50.900 --> 00:21:54.140
So all this is is a little utility
method here that will figure out whether

00:21:54.240 --> 00:21:58.460
the parent view is flipped and do the
math and get the new frame for the new

00:21:58.460 --> 00:22:00.900
size so that we stay pinned to the top.

00:22:00.900 --> 00:22:02.890
Now here's our chance
for animation delegate,

00:22:02.900 --> 00:22:06.400
if we have one,
to handle the animation itself.

00:22:06.420 --> 00:22:08.870
And if it reports that it doesn't
want us to do the animation,

00:22:08.900 --> 00:22:09.830
we go ahead and return out.

00:22:09.900 --> 00:22:11.900
We'll look at that in a bit.

00:22:11.900 --> 00:22:13.470
But ordinarily,
let's say we just have this box

00:22:13.530 --> 00:22:15.900
that's standing alone and we just
want to expand or collapse it,

00:22:15.900 --> 00:22:18.380
then this is the simplest
case of the animation.

00:22:18.430 --> 00:22:19.900
We're creating the animation array.

00:22:19.900 --> 00:22:22.400
This is all exactly like
I had it on the slides.

00:22:22.460 --> 00:22:24.770
Here's the single dictionary
we're passing in because we're

00:22:24.770 --> 00:22:29.090
only animating this one box,
so the target is self.

00:22:29.660 --> 00:22:34.500
And the end frame is the new frame that
we calculated wrapped up in an NS value

00:22:34.500 --> 00:22:36.340
so we can stick it in a dictionary.

00:22:36.470 --> 00:22:39.140
And we go ahead and set the parameter,
create the animation, set the parameters,

00:22:39.140 --> 00:22:40.340
start it, and release.

00:22:40.340 --> 00:22:44.790
And then if we're not animating, well,
we'll go ahead and just do a very quick,

00:22:44.880 --> 00:22:47.410
immediate set frame size.

00:22:47.940 --> 00:22:50.200
So we have the option of not animating.

00:22:50.210 --> 00:22:54.020
Now what are we going to do, though,
when we have-- if we look at Reducer,

00:22:54.020 --> 00:22:55.360
we have these boxes.

00:22:55.360 --> 00:22:57.980
And normally, I expand and collapse this.

00:22:57.980 --> 00:22:59.780
It doesn't just expand
and collapse in place.

00:22:59.780 --> 00:23:04.480
We have these other views beneath it,
the border and shadow views

00:23:04.480 --> 00:23:06.550
that slide up and down.

00:23:06.650 --> 00:23:12.040
How do we coordinate all of this?

00:23:12.040 --> 00:23:15.000
These are all sibling views here,
so we need some sort of higher

00:23:15.000 --> 00:23:19.940
level object that's ideally
outside of the collapsible box

00:23:20.000 --> 00:23:23.600
itself that will coordinate it
and its siblings in animating.

00:23:23.690 --> 00:23:25.600
So that's what this
delegate mechanism is for.

00:23:25.600 --> 00:23:28.050
So we check here where
we checked at the top,

00:23:28.050 --> 00:23:31.150
as I pointed out earlier,
if we have a delegate and the delegate

00:23:31.220 --> 00:23:34.600
responds to this selector that we've
defined in our sort of informal protocol,

00:23:34.600 --> 00:23:37.580
we'll ask the delegate, you know,
should we go ahead and animate this?

00:23:37.680 --> 00:23:39.770
And if it says no,
then we go ahead and return and

00:23:39.770 --> 00:23:42.560
we assume that it's going to
handle the animation itself.

00:23:42.600 --> 00:23:46.430
So in the case of the reducer app,
the main controller is the

00:23:46.440 --> 00:23:48.600
delegate for this animation.

00:23:48.600 --> 00:23:52.930
It's just sort of the central
controller object of the application.

00:23:53.290 --> 00:23:56.340
And here's our delegate method
that's going to get called by

00:23:56.340 --> 00:23:58.940
whichever box happens to be
getting expanded or collapsed.

00:23:58.960 --> 00:24:02.040
This message is going to get
sent to the main controller.

00:24:02.100 --> 00:24:07.070
And it's just going to go ahead and
send a message to its own class.

00:24:07.270 --> 00:24:09.840
I've just abstracted this
out into a class method.

00:24:09.840 --> 00:24:10.990
That's the way the code's structured.

00:24:11.000 --> 00:24:13.900
And we'll return no and say, you know,
we've taken care of this because

00:24:13.900 --> 00:24:17.900
I want to coordinate these
animations and do them myself.

00:24:18.300 --> 00:24:20.200
So here we've got this
method that I've defined,

00:24:20.200 --> 00:24:22.200
animate view and siblings target frame.

00:24:22.200 --> 00:24:26.200
I just arbitrarily designed that was
going to be my method signature there.

00:24:26.200 --> 00:24:30.190
And so what we need to do is
first compare the new target frame

00:24:30.190 --> 00:24:35.200
to the current frame of the box
that's being collapsed or expanded.

00:24:35.400 --> 00:24:37.200
And from that I get this y offset.

00:24:37.200 --> 00:24:40.800
I calculate the value that tells
me how much I need to shift

00:24:40.800 --> 00:24:42.770
the boxes below it up or down.

00:24:43.610 --> 00:24:45.340
And we go ahead in here.

00:24:45.360 --> 00:24:48.590
We're going to, again,
create a mutable array that will

00:24:48.610 --> 00:24:51.260
be our animation description list.

00:24:51.280 --> 00:24:55.890
And then we know we want to animate the
target view that's been passed into us.

00:24:55.940 --> 00:24:58.960
That's the box that the user
has expanded or collapsed.

00:24:58.990 --> 00:24:59.420
So great.

00:24:59.420 --> 00:25:01.640
We're going to add that one.

00:25:01.670 --> 00:25:04.860
Now we're going to go ahead and
get a list that includes all it

00:25:05.000 --> 00:25:06.240
and all of its sibling views.

00:25:06.240 --> 00:25:08.380
So we'll get the target view super view.

00:25:08.390 --> 00:25:09.900
We'll ask it for all of its sub views.

00:25:09.900 --> 00:25:13.760
And then we'll iterate through them,
real simple iteration by index.

00:25:13.780 --> 00:25:16.360
And for each of those siblings,
as long as it's not the target view,

00:25:16.360 --> 00:25:19.920
which we already took care of,
we'll get the old siblings frame.

00:25:19.930 --> 00:25:24.140
And basically, we do a comparison here,
a coordinate comparison, to see, hey,

00:25:24.200 --> 00:25:27.300
is that below the view that
I'm expanding or collapsing?

00:25:27.300 --> 00:25:28.820
In other words, do I need to animate it?

00:25:28.830 --> 00:25:33.140
And if so, we go ahead and apply the same
y offset there to its frame.

00:25:33.150 --> 00:25:33.640
Add that.

00:25:33.660 --> 00:25:37.550
So we're building dynamically,
in this case, the animation list.

00:25:37.760 --> 00:25:39.520
And then once we have
that description list,

00:25:39.520 --> 00:25:42.210
we go ahead and instantiate
the NSVU animation,

00:25:42.270 --> 00:25:43.760
all straightforward stuff.

00:25:43.760 --> 00:25:44.880
And we're going to do it blocking.

00:25:44.880 --> 00:25:47.000
And we're going to shoot for
about a quarter of a second.

00:25:47.000 --> 00:25:48.390
And it will just go.

00:25:48.420 --> 00:25:50.640
And then we release
our animation resource.

00:25:50.640 --> 00:25:53.000
And we're done.

00:25:53.830 --> 00:25:56.880
You know, one further step that
you might take this is,

00:25:56.940 --> 00:25:59.940
you know, okay,
we're reclaiming this window space,

00:25:59.960 --> 00:26:04.730
you know, maybe we want to actually,
you know, shrink the window or something,

00:26:04.810 --> 00:26:06.360
unless we're going to use
it for something else.

00:26:06.430 --> 00:26:08.330
Maybe if we had our
image view down there,

00:26:08.330 --> 00:26:11.480
we might want to have the image
view expand or something like that.

00:26:11.570 --> 00:26:14.050
But in this case,
we might want to animate the window too.

00:26:14.300 --> 00:26:16.640
So how might you do that?

00:26:16.840 --> 00:26:18.340
I'll leave that as an exercise to you.

00:26:18.340 --> 00:26:21.930
I'll probably add it at some point in
the reducer example in a future version.

00:26:21.940 --> 00:26:25.390
But if we can go back to slides,
I'll tell you briefly

00:26:25.390 --> 00:26:26.910
how you would do that.

00:26:27.340 --> 00:26:30.300
Naively, you might think,
and I would do this too,

00:26:30.300 --> 00:26:35.200
you might think that you could
just build an animation description

00:26:35.200 --> 00:26:39.200
that includes not just these boxes,
but say the tab view that surrounds them,

00:26:39.200 --> 00:26:42.050
and also the window itself,
and just go ahead and

00:26:42.050 --> 00:26:43.190
execute that animation.

00:26:43.200 --> 00:26:45.660
Well, due to the way that we kind
of have to cache things,

00:26:45.660 --> 00:26:49.200
we try to make things efficient,
we tend to cache images of views,

00:26:49.200 --> 00:26:50.190
that might not just work.

00:26:50.200 --> 00:26:53.200
In fact, it won't just work right
out of the box that way.

00:26:53.200 --> 00:26:55.960
But the good news is,
is that we have this existing

00:26:56.150 --> 00:26:59.170
facility for view auto-sizing,
the springs and struts model

00:26:59.170 --> 00:27:02.200
that you're familiar with,
setting an interface builder,

00:27:02.250 --> 00:27:05.480
setting your springs and
your views so that they,

00:27:05.580 --> 00:27:07.200
the layout of your window updates.

00:27:07.220 --> 00:27:09.900
If your window is resizable,
the user can drag it any which way,

00:27:09.900 --> 00:27:12.200
and your window will
automatically resize itself.

00:27:12.200 --> 00:27:15.410
So if you leverage this facility in
conjunction with NSViewAnimation,

00:27:15.410 --> 00:27:17.460
then all you really need
to do is use a single view

00:27:17.570 --> 00:27:21.620
animation with a single target,
animate the window, and let the springs

00:27:21.620 --> 00:27:22.200
and struts do the rest.

00:27:22.210 --> 00:27:23.200
And this is what we're going to do.

00:27:23.200 --> 00:27:25.480
This gives you,
this is a way that you can combine

00:27:25.480 --> 00:27:28.420
an existing Cocoa facility with
a new NSViewAnimation stuff to

00:27:28.420 --> 00:27:30.200
do something more complicated.

00:27:32.700 --> 00:30:06.500
[Transcript missing]

00:30:07.070 --> 00:30:09.240
And this will create a
project with two targets,

00:30:09.310 --> 00:30:12.410
one that is a framework that
contains just your views,

00:30:12.410 --> 00:30:13.570
and one that is a palette.

00:30:13.600 --> 00:30:15.860
And what a palette is
is a loadable bundle.

00:30:15.860 --> 00:30:17.940
It's sort of a plug-in that
Interface Builder knows how

00:30:17.940 --> 00:30:22.480
to load that follows certain
semantics for being an IB plug-in.

00:30:22.900 --> 00:31:21.900
[Transcript missing]

00:31:22.930 --> 00:31:25.790
So there are a few further steps
required to put a view in a palette,

00:31:25.800 --> 00:31:26.720
and I'll be daunted by this list.

00:31:26.810 --> 00:31:28.830
Only the stuff on the
top is really required,

00:31:28.850 --> 00:31:29.800
and it's really pretty straightforward.

00:31:29.820 --> 00:31:33.730
But the main gotcha to watch
out for is when you instantiate

00:31:33.870 --> 00:31:36.800
most palettes in Xcode,
most templates, sorry,

00:31:36.800 --> 00:31:39.720
when you instantiate a typical Xcode
template like new Cocoa application,

00:31:39.800 --> 00:31:41.770
new document-based application,
you can usually just go

00:31:41.770 --> 00:31:44.070
ahead and build that,
and right away you get a

00:31:44.070 --> 00:31:45.800
functioning application.

00:31:45.800 --> 00:31:49.160
But because of the way the limitations
in the template instantiation

00:31:49.160 --> 00:31:51.550
mechanism that's currently there,
there are going to be a

00:31:51.550 --> 00:31:53.800
couple things that aren't set
that are going to break this.

00:31:53.800 --> 00:31:55.800
So what you need to do is
go into your two nib files,

00:31:55.800 --> 00:31:59.800
your palette nib and your inspector
nib that are created with the template,

00:31:59.850 --> 00:32:03.800
open those up in Interface Builder,
go to the files owner object,

00:32:03.800 --> 00:32:05.800
and you'll find that
its class is not set.

00:32:05.800 --> 00:32:09.830
If you go to the fifth panel in the
inspector and to the custom class,

00:32:09.910 --> 00:32:11.800
you'll see that it's not set.

00:32:11.800 --> 00:32:15.890
So all you need to do is set it to the
name of your existing inspector class,

00:32:15.890 --> 00:32:18.800
and then you can build,
and things will start to work.

00:32:18.800 --> 00:32:20.840
After that,
what you need to do for each of

00:32:20.840 --> 00:32:23.800
your custom views is just have them
implement the basic archiving methods,

00:32:23.800 --> 00:32:27.960
init with coder and encode with coder,
so that your view knows how,

00:32:27.960 --> 00:32:31.800
not only how to archive itself out to a
nib when Interface Builder saves the nib,

00:32:31.800 --> 00:32:36.440
but also remember archiving is the
mechanism used for drag and drop

00:32:36.520 --> 00:32:37.800
and copying stuff on the pasteboard.

00:32:37.800 --> 00:32:40.280
So, you know,
when you go in and you've got your

00:32:40.280 --> 00:32:44.800
custom view on your palette and you
start dragging it out into a window,

00:32:44.810 --> 00:32:46.800
we're actually going to
archive that instance.

00:32:46.800 --> 00:32:47.790
It's a live object.

00:32:47.800 --> 00:32:49.800
It's going to get archived,
put on the pasteboard,

00:32:49.800 --> 00:32:50.940
and when you drop it,
it's going to get unarchived,

00:32:50.940 --> 00:32:53.700
and you've got a live
object in your window.

00:32:53.820 --> 00:32:55.720
So this is a requirement,
but it's something you

00:32:55.720 --> 00:32:56.800
might be doing anyway.

00:32:56.800 --> 00:33:01.100
And then you want to implement all
your--make sure that all your setter

00:33:01.220 --> 00:33:04.800
accessors for the view for various
state that affects how the view looks.

00:33:04.870 --> 00:33:05.800
We'll do a set needs display.

00:33:05.800 --> 00:33:07.800
We'll tell AppKit, "Oh,
my state has changed.

00:33:07.800 --> 00:33:11.800
This part of myself or the whole view
needs to be redisplayed at some point.

00:33:11.800 --> 00:33:13.800
You're probably going to
need to do this anyway,

00:33:13.800 --> 00:33:16.450
but I just point it out because
it's important for interaction in

00:33:16.450 --> 00:33:20.100
IB." And then you're going to want
to factor out some of your code for

00:33:20.200 --> 00:33:27.800
initializing the attributes that your
custom view class does not inherit,

00:33:27.800 --> 00:33:30.710
all the ones that it
adds to its superclass.

00:33:30.900 --> 00:33:32.790
And we'll look at why that's
helpful in a little bit.

00:33:32.800 --> 00:33:34.710
Then you can add some
optional polish from there.

00:33:34.800 --> 00:33:36.800
You can build an inspector
for your view's properties.

00:33:36.800 --> 00:33:39.070
That, I would say,
is some very good polish

00:33:39.210 --> 00:33:40.790
to add that completes it.

00:33:40.800 --> 00:33:44.160
You can add, you know,
a little icon for your palette that will

00:33:44.160 --> 00:33:45.800
show up in this sort of toolbar-like
strip that's at the top of the palette.

00:33:45.800 --> 00:33:48.800
You can expose interesting
attributes of your views as bindable.

00:33:48.800 --> 00:33:50.800
We'll look at that.

00:33:50.800 --> 00:33:52.800
And you can do other--there are
some other neat tricks you can do.

00:33:52.970 --> 00:33:55.860
Like, for example,
if you want to display sort of a

00:33:55.900 --> 00:33:58.800
preview stub of your view down in
the palette that looks different than

00:33:58.800 --> 00:34:01.780
your view or is maybe shrunk down
because your view is way too big,

00:34:01.830 --> 00:34:04.800
you can just put something like an
image view in there with a stock image.

00:34:04.880 --> 00:34:07.800
And we provide a place where
you can do some sleight of hand.

00:34:07.940 --> 00:34:11.140
And as it's being dragged out,
you can swap in your own

00:34:11.370 --> 00:34:14.800
actual object instance,
your own image instance,

00:34:14.800 --> 00:34:17.970
your instance of your custom
view in place of the image,

00:34:17.970 --> 00:34:18.800
let's say.

00:34:18.800 --> 00:34:20.790
So there's some tricks
like that you can do.

00:34:20.840 --> 00:34:22.800
But the basics are pretty simple, right?

00:34:22.800 --> 00:34:25.800
Just instantiate the template,
the IB palette template.

00:34:25.800 --> 00:34:28.800
Set the file's owners
in the two nib files.

00:34:28.800 --> 00:34:30.800
Make sure you implement archiving.

00:34:30.800 --> 00:34:33.800
And you're pretty much ready to go there,
at least for the basics.

00:34:33.800 --> 00:34:36.800
So I mentioned exposing bindable
attributes for your custom views.

00:34:36.800 --> 00:34:38.800
How exactly do you do that?

00:34:38.820 --> 00:34:40.490
First step, as I said,
is to provide key-value

00:34:40.490 --> 00:34:41.800
coding-compliant accessors.

00:34:41.800 --> 00:34:43.740
We already looked at this.

00:34:43.950 --> 00:34:47.800
You follow the naming convention that's
specified in the KVC documentation,

00:34:47.800 --> 00:34:49.800
and you will be golden.

00:34:49.810 --> 00:34:53.780
And this is really all you need in
order for this particular attribute

00:34:53.830 --> 00:34:55.800
to be bindable programmatically.

00:34:55.870 --> 00:34:58.450
But let's say, you know,
we've got this bindings

00:34:58.450 --> 00:35:00.990
inspector in Interface Builder,
and you want to be able to

00:35:01.060 --> 00:35:03.560
bind to that visually in IB.

00:35:04.020 --> 00:35:09.390
So what you want to do is use the
expose binding message that can

00:35:09.390 --> 00:35:11.800
be sent to your object's class.

00:35:11.800 --> 00:35:12.800
So a good convenient place.

00:35:12.800 --> 00:35:15.800
You do this once for each
attribute you want to expose,

00:35:15.800 --> 00:35:19.800
and you do it once for the class for
each attribute you want to expose.

00:35:19.840 --> 00:35:23.790
So a good convenient place to do this
is in your class's initialize method.

00:35:23.800 --> 00:35:25.800
Here we have collapsible box.

00:35:25.920 --> 00:35:28.690
It has an initialize method
that we've given it as a class.

00:35:28.800 --> 00:35:31.800
And we go ahead and we want to
expose the expanded binding.

00:35:31.800 --> 00:35:34.760
All you do is specify the
string value of the attribute.

00:35:34.820 --> 00:35:36.800
The name of the attribute is expanded.

00:35:36.800 --> 00:35:40.190
And with key-value coding,
bindings will know that it

00:35:40.190 --> 00:35:43.790
should use set expanded and is
expanded to access that attribute.

00:35:43.800 --> 00:35:46.800
So you go ahead and do this once for each
of the attributes you want to expose,

00:35:46.800 --> 00:35:47.800
and that's pretty much it.

00:35:47.800 --> 00:35:50.780
And then you end up with,
here on the right-hand side,

00:35:50.800 --> 00:35:53.800
you can see our attribute is
right there in Interface Builder.

00:35:53.800 --> 00:35:56.860
And you can go wild with this,
keep adding attributes

00:35:56.860 --> 00:35:59.100
that you want to bind,
and key-value binding does

00:35:59.100 --> 00:36:00.800
the rest pretty automatically.

00:36:02.470 --> 00:36:05.760
Now you want to create an
inspector for your view,

00:36:05.760 --> 00:36:06.400
let's say.

00:36:06.400 --> 00:36:09.400
This is pretty
straightforward and simple.

00:36:09.460 --> 00:36:11.350
You just need to create outlets.

00:36:11.490 --> 00:36:14.390
You're going to presumably have
some controls that you want to add.

00:36:14.400 --> 00:36:17.040
In this really trivial
example of collapsible box,

00:36:17.040 --> 00:36:19.870
you've just got an expanded
checkbox that you want to put

00:36:19.870 --> 00:36:22.850
there in the inspector in IB,
and that's going to enable you to

00:36:22.850 --> 00:36:25.390
toggle the expanded state of the
box while you're inspecting it.

00:36:25.400 --> 00:36:28.100
So you're going to create,
we'll create an outlet

00:36:28.100 --> 00:36:31.150
from the inspector object,
which is sort of a controller

00:36:31.270 --> 00:36:35.990
for that inspector panel,
remember, and we'll, so we can connect to

00:36:35.990 --> 00:36:38.310
that box and talk to it.

00:36:38.400 --> 00:36:43.300
Then we will wire the action, the action,
target action message of that checkbox

00:36:43.420 --> 00:36:48.050
and of any other controls that we decide
to add to the inspector so that they

00:36:48.050 --> 00:36:50.390
send the okay message to the inspector.

00:36:50.400 --> 00:36:52.980
You'll find in the template
when you instantiate it,

00:36:52.980 --> 00:36:55.400
there are stubs for
okay and revert message.

00:36:55.400 --> 00:36:59.530
Okay is for committing changes
from the inspector controls

00:36:59.530 --> 00:37:03.210
into your view instance,
and then revert is for doing sort

00:37:03.210 --> 00:37:07.390
of an undo operation where we take
all the state from the view itself

00:37:07.390 --> 00:37:10.400
and push it into the controls.

00:37:10.400 --> 00:37:13.630
So this is all sort of done, you know,
pretty simply the old fashioned

00:37:13.630 --> 00:37:16.350
way right now using the sort
of target action approach.

00:37:16.410 --> 00:37:18.980
We realized it would be
desirable to be able to build

00:37:18.990 --> 00:37:22.040
inspectors with bindings one day,
and we're looking at ways

00:37:22.040 --> 00:37:23.400
that you could do that.

00:37:23.400 --> 00:37:25.400
We don't have a recommended
approach just yet.

00:37:25.400 --> 00:37:28.790
but that may be coming so

00:37:31.100 --> 00:37:35.490
So last thing I mentioned,
it's handy for reasons that we'll

00:37:35.620 --> 00:37:40.390
see in the demo shortly to take
the initialization of default

00:37:40.400 --> 00:37:43.320
values for whatever attributes
you add to your view and factor

00:37:43.320 --> 00:37:46.310
that out into a separate method,
because you're going to want to be able

00:37:46.400 --> 00:37:48.700
to call that from two different places.

00:37:48.760 --> 00:37:53.480
The palette object has a finish
instantiate method that you can

00:37:53.560 --> 00:37:57.160
think of as pretty much-- this
is a wake from nib for a palette,

00:37:57.250 --> 00:37:58.000
more or less.

00:37:58.240 --> 00:38:01.000
This is the message that IB sends
the palette after it's loaded up,

00:38:01.000 --> 00:38:04.360
and now you get a chance to do whatever
other initialization you need to do

00:38:04.380 --> 00:38:08.100
to get your palette ready to go and
to get the object instances on it,

00:38:08.200 --> 00:38:10.600
in this case, fully initialized.

00:38:10.680 --> 00:38:12.240
So let's go back to demo one, please.

00:38:12.340 --> 00:38:17.370
And we'll take a quick
look at the palette.

00:38:17.420 --> 00:38:19.700
It's fairly straightforward.

00:38:21.920 --> 00:38:22.400
So let's see.

00:38:22.400 --> 00:38:24.570
Once you have the sample code,
you'll see there's a

00:38:24.630 --> 00:38:26.320
collapsible box subfolder.

00:38:26.340 --> 00:38:28.410
And this here is my IB palette.

00:38:28.420 --> 00:38:33.140
I built this exactly like I told you,
from an IB palette template in Xcode.

00:38:33.140 --> 00:38:36.470
And I've since added a
couple of custom views to it.

00:38:36.730 --> 00:38:41.630
So we've got our collapsible box here,
referencing the same source files

00:38:41.640 --> 00:38:43.140
that's built into the framework.

00:38:43.150 --> 00:38:45.020
Here's our palette target.

00:38:45.190 --> 00:38:49.670
And among its resources,
it's got a single palette nib.

00:38:50.680 --> 00:38:52.800
And if we open that up,
we can take a quick look.

00:38:52.800 --> 00:38:55.580
It's got our collapsible box
here and a couple of other custom

00:38:55.580 --> 00:38:57.890
views that I'll get to later.

00:38:58.380 --> 00:39:01.430
Then we've got an inspector
for the collapsible box,

00:39:01.430 --> 00:39:04.300
which is really just
boring and dead simple.

00:39:04.300 --> 00:39:06.930
There's our expanded check box.

00:39:07.820 --> 00:39:11.280
And then here's our palette object.

00:39:11.350 --> 00:39:12.240
Pretty straightforward.

00:39:12.240 --> 00:39:16.670
We've given it an outlet to each
of the prototype instances on the

00:39:16.670 --> 00:39:19.240
palette so that we can identify,
okay, here's our collapsible box

00:39:19.350 --> 00:39:21.700
prototype that people can drag out.

00:39:21.700 --> 00:39:24.540
Also,
and you'll find this is automatically

00:39:24.540 --> 00:39:29.620
done for you below the template,
Interface Builder requires every view

00:39:29.790 --> 00:39:33.260
that you put on a palette and want
to have an inspector for to implement

00:39:33.260 --> 00:39:34.700
this method inspector class name.

00:39:34.700 --> 00:39:38.320
That all it does is return as a string
the name of the inspector class,

00:39:38.320 --> 00:39:42.700
which usually is pretty simply composed
or derived from the name of the class.

00:39:42.700 --> 00:39:45.420
So here we have a collapsible
box inspector that corresponds

00:39:45.420 --> 00:39:46.690
to our collapsible box.

00:39:46.760 --> 00:39:51.610
And here in the palette,
we have our finish instantiate method,

00:39:51.700 --> 00:39:54.290
and we're going to tell each of
our prototype views to finish

00:39:54.290 --> 00:39:55.690
doing its initialization.

00:39:55.700 --> 00:39:58.830
And for collapsible box,
what we have here,

00:39:58.830 --> 00:40:01.660
we just have this expanded attribute.

00:40:01.700 --> 00:40:03.700
We want to make it yes by default,
let's say.

00:40:03.700 --> 00:40:09.330
And we want to assume some default
other frame size for when we toggle.

00:40:09.560 --> 00:40:13.400
So we're sending this init added
properties message from init with

00:40:13.400 --> 00:40:17.300
frame so that we're invoking a
common code from there that we would

00:40:17.300 --> 00:40:19.500
otherwise maybe put inline right there.

00:40:19.500 --> 00:40:22.260
And then we're also using
it from the palette object,

00:40:22.260 --> 00:40:23.500
as I showed you here.

00:40:23.500 --> 00:40:25.430
The inspector is pretty straightforward.

00:40:25.530 --> 00:40:26.450
I won't spend a lot of time on it.

00:40:26.510 --> 00:40:29.370
Most of this is boilerplate code,
but the interesting stuff is

00:40:29.430 --> 00:40:30.460
the stuff I've inserted here.

00:40:30.500 --> 00:40:35.800
Here we're setting the expanded attribute
of the object from the checkbox state

00:40:35.800 --> 00:40:38.500
and vice versa for the revert method.

00:40:38.500 --> 00:40:42.500
And so if we go into interface builder,
you know--oops.

00:40:42.500 --> 00:40:48.500
Oh, that's not--oh, we seem to be missing
our templates again.

00:40:48.500 --> 00:40:49.500
Okay.

00:40:49.500 --> 00:40:52.920
Well,
let's say I have an existing nib file,

00:40:52.920 --> 00:40:55.320
which I do here, hopefully.

00:41:08.270 --> 00:41:13.130
Okay, let's just take this here
and kind of mess with it.

00:41:13.130 --> 00:41:13.130
So I can go here and
here in my palette view,

00:41:16.420 --> 00:41:20.640
This here is our collapsible box palette,
and it's just loaded right up there.

00:41:20.640 --> 00:41:23.870
So it's a peer along with all the
other-- here we have our controllers

00:41:23.890 --> 00:41:25.440
for key value binding and so forth.

00:41:25.520 --> 00:41:27.660
And it's a first class
citizen right there.

00:41:27.660 --> 00:41:30.700
And I can take my collapsible
box and drag it off.

00:41:30.710 --> 00:41:34.360
And I've got-- this is the box itself,
and I've got a few controls in it.

00:41:34.530 --> 00:41:36.910
I've got a default disclosure button.

00:41:36.970 --> 00:41:40.740
Let's say that I want to bind the
value of that button to something.

00:41:42.520 --> 00:41:51.970
The focus of this presentation is on
the new capabilities of Cocoa Graphics.

00:41:51.970 --> 00:41:51.970
The emphasis will be on the
new capabilities in Tiger,

00:41:51.970 --> 00:41:51.970
such as drawing redirection, NSAnimation,
live resizing, view binding, and more.

00:41:51.970 --> 00:41:51.970
Troy Stephens

00:41:52.290 --> 00:41:54.440
You can see it in the inspector.

00:41:54.470 --> 00:41:56.430
And this is our attribute
that we exposed,

00:41:56.430 --> 00:41:58.470
and it's bindable now.

00:41:58.900 --> 00:42:03.300
Whoa, I'm getting in a little
trouble with that.

00:42:03.300 --> 00:42:05.720
Let's bind the expanded
attribute to the same value.

00:42:05.720 --> 00:42:07.440
And so when we go into
test interface mode,

00:42:07.470 --> 00:42:09.780
it doesn't quite sync up
till after the first time.

00:42:09.780 --> 00:42:12.970
But now, you know,
this works right in test interface mode.

00:42:13.060 --> 00:42:16.440
And yet, we also want the box
to toggle immediately.

00:42:16.440 --> 00:42:19.820
When we toggle the attribute here,
we don't want to bother animating it.

00:42:19.890 --> 00:42:23.900
So we've got some special
behavior in there.

00:42:23.900 --> 00:42:27.890
And that's just one more bit of code
I want to call your attention to here.

00:42:42.300 --> 00:42:47.340
I should call my own
attention to it first.

00:42:47.420 --> 00:42:49.540
There's a check you can
make to see whether you are

00:42:49.540 --> 00:42:52.210
running in Interface Builder.

00:43:10.730 --> 00:43:14.750
I'm sure I will find this code
later when I am looking for

00:43:14.800 --> 00:43:16.380
something entirely different.

00:43:16.420 --> 00:43:18.870
So let's go ahead and go back to
slides because I want to move along.

00:43:18.880 --> 00:43:21.700
We've got some more stuff
to talk about today.

00:43:23.400 --> 00:43:25.860
So next thing I want to look
at is implementing this hybrid

00:43:25.860 --> 00:43:27.390
image view that I talked about.

00:43:27.400 --> 00:43:29.380
And we're just going to
look at this really briefly.

00:43:29.430 --> 00:43:30.380
I'll give you an overview.

00:43:30.450 --> 00:43:32.400
I won't go through the code step by step.

00:43:32.400 --> 00:43:36.400
And to understand why we might want this,
we need to understand a little bit

00:43:36.400 --> 00:43:38.400
about how the image reducer works.

00:43:38.400 --> 00:43:42.400
The image reducer, again,
is the image reduction engine in the app.

00:43:42.400 --> 00:43:46.400
And it's just sort of a black box,
or I guess a red box here in this slide.

00:43:46.400 --> 00:43:47.380
We give it an image in.

00:43:47.400 --> 00:43:49.400
We give it some parameters.

00:43:49.400 --> 00:43:51.750
We get an image out,
and we can save it to a file

00:43:51.750 --> 00:43:53.140
or display it on the screen.

00:43:53.400 --> 00:43:56.400
We're going to use Core Image to
do some of this work.

00:43:56.400 --> 00:44:01.480
And when Core Image was added
to the picture in Tiger,

00:44:01.540 --> 00:44:04.690
we added some bridge work to
AppKit to help make it easy for you

00:44:04.690 --> 00:44:07.970
to convert between the two worlds,
because we really do have two

00:44:07.970 --> 00:44:11.390
worlds with sort of similar but
differently implemented concepts.

00:44:11.400 --> 00:44:13.400
In AppKit, we have support for images,
of course,

00:44:13.400 --> 00:44:16.400
and different image representations,
including bitmaps.

00:44:16.400 --> 00:44:18.400
We have our concept of
color and graphics context,

00:44:18.400 --> 00:44:19.390
and Core Image is the same.

00:44:19.400 --> 00:44:23.350
Core Image has a CI image,
which is really sort of more a recipe

00:44:23.450 --> 00:44:27.400
for drawing an image on demand when you
ask for it to be composited somewhere.

00:44:27.400 --> 00:44:29.630
And they also have a
CI color representation and

00:44:29.630 --> 00:44:31.220
a CI context for drawing.

00:44:31.560 --> 00:44:35.030
So we added some bridge work that
you will find declared mostly

00:44:35.030 --> 00:44:38.400
in NSColor.h and NSCIImageRep.h.

00:44:38.490 --> 00:44:40.580
So we've created a new image
representation class that

00:44:40.580 --> 00:44:41.400
you can add to an image.

00:44:41.400 --> 00:44:43.280
So you can now have a--if
you have a CI image that

00:44:43.280 --> 00:44:46.540
you've taken out of a filter,
you can add that by wrapping

00:44:46.640 --> 00:44:48.400
it in an NSCIImageRep.

00:44:48.400 --> 00:44:51.400
Just add it,
and then you can add that to an image.

00:44:51.400 --> 00:44:54.400
And anywhere you can
use an NSImage in Cocoa,

00:44:54.400 --> 00:44:58.320
you can have an image that is defined
by a chain of Core Image filters

00:44:58.400 --> 00:45:01.390
that does some processing when
it actually composites the image.

00:45:01.400 --> 00:45:04.390
So that sort of makes it more
invisible that you're using a CI image.

00:45:04.400 --> 00:45:06.770
And likewise,
we also have the ability to convert

00:45:06.770 --> 00:45:08.400
a bitmap image rep to a CI image.

00:45:08.400 --> 00:45:12.310
Vice versa, we can convert between an
NSColor and a CI color.

00:45:12.400 --> 00:45:15.400
And if you have an NSGraphics
context that you're drawing into,

00:45:15.400 --> 00:45:17.400
you can get a CI context from it so that
you can then ask the CI to do the same.

00:45:17.420 --> 00:45:21.670
You can then ask the CI context, "Hey,
draw this CI image effectively into

00:45:21.670 --> 00:45:25.030
this NSGraphics context." So using that,
how do we implement

00:45:25.030 --> 00:45:26.390
the ImageReducer class?

00:45:26.400 --> 00:45:28.400
We'll zoom in a little bit.

00:45:28.400 --> 00:45:31.350
Again, we've got our black box here.

00:45:31.580 --> 00:45:32.390
Put an image in.

00:45:32.390 --> 00:45:33.400
We've got a bitmap image rep out.

00:45:33.400 --> 00:45:37.150
And how that image processing
pipeline works is...

00:45:37.750 --> 00:45:42.940
We start, remember an NS image in
Cocoa can be any kind of image.

00:45:42.940 --> 00:45:45.300
It might be a PDF image,
it might be something vector

00:45:45.300 --> 00:45:46.700
maybe the user has dragged in.

00:45:46.700 --> 00:45:49.630
It's not necessarily a bitmap,
or if it is a bitmap,

00:45:49.810 --> 00:45:52.820
it might be what we call a cached
image rep that is the result of

00:45:52.820 --> 00:45:55.700
some processing that we've kept
in an off-screen window somewhere.

00:45:55.700 --> 00:45:57.490
So it's a bitmap,
but it's not in main memory,

00:45:57.500 --> 00:45:59.700
so you can't access the
pixel data quite the same.

00:45:59.700 --> 00:46:01.760
So, but what you can do,
you get an NS image,

00:46:01.760 --> 00:46:06.630
you can walk its list of representations
and see if it has a bitmap image rep.

00:46:06.740 --> 00:46:10.690
If not, we can create one, a new one,
and composite the image into it.

00:46:10.700 --> 00:46:13.720
So we've got our bitmap image rep,
and now we want to convert

00:46:13.720 --> 00:46:16.130
that to a CI image,
because you can only make

00:46:16.190 --> 00:46:17.570
a CI image from a bitmap.

00:46:18.310 --> 00:46:22.700
And then we bring Core Image in,
and we want to take that CI image,

00:46:22.700 --> 00:46:26.200
and we'll make it the input image
of a scale transform filter.

00:46:26.200 --> 00:46:29.290
The Lanso Scale Transform that's
in there is kind of a nice

00:46:29.290 --> 00:46:33.200
scaling filter that will reduce
the amount of blurring you get,

00:46:33.200 --> 00:46:35.060
but maybe we still want
to sharpen the image,

00:46:35.200 --> 00:46:39.200
so we'll take the output of that filter,
hook it into an unsharp mask filter,

00:46:39.200 --> 00:46:41.130
make it the input image to that.

00:46:41.200 --> 00:46:43.720
Now the next stuff we want to
do is add the border and shadow,

00:46:43.720 --> 00:46:44.200
right?

00:46:44.200 --> 00:46:46.180
So we want to do those.

00:46:46.200 --> 00:46:48.720
You can maybe, with some tweaking,
you can figure out how to do this kind

00:46:48.730 --> 00:46:51.130
of stuff right in Core Image itself,
but let's say we need

00:46:51.140 --> 00:46:53.670
to do this in Quartz,
so we're going to take that

00:46:53.670 --> 00:46:56.200
CI image that's the output image
of the unsharp mask filter,

00:46:56.200 --> 00:46:59.160
go ahead and create a
bitmap image rep from it.

00:46:59.210 --> 00:47:01.780
So we're basically, at this point,
we're forcing the CI image to

00:47:02.080 --> 00:47:04.200
render and give us some pixels
that we can access in main memory.

00:47:04.200 --> 00:47:06.620
Once we've got that,
it's easy to go ahead and add

00:47:06.700 --> 00:47:10.170
the border and the shadow,
and that's pretty much it.

00:47:10.230 --> 00:47:13.030
And now that we've got this architecture,
it would actually be trivially

00:47:13.030 --> 00:47:15.200
easy to add additional layers,
additional effects,

00:47:15.200 --> 00:47:18.190
let's say after or before the unsharp,
let's say, you know,

00:47:18.190 --> 00:47:21.200
we want to apply a bloom filter,
some kind of artistic effect,

00:47:21.320 --> 00:47:23.200
you can go ahead and do that,
and it's dead easy once you've got this.

00:47:23.200 --> 00:47:26.200
You can go ahead and insert
new filters in the chain,

00:47:26.220 --> 00:47:29.200
and it's really building up the
groundwork that takes the time.

00:47:29.200 --> 00:47:32.200
It's trivially easy to extend,
so you can do that as an exercise too.

00:47:32.200 --> 00:47:35.310
But there's sort of an interesting
performance issue here,

00:47:35.310 --> 00:47:38.650
because as I said,
when we go to grab the CI image

00:47:38.650 --> 00:47:42.710
out and get a bitmap from it,
obviously we have to do that if

00:47:42.710 --> 00:47:48.180
we want to save it as a JSON,
peg say, but let's say that we want to

00:47:48.710 --> 00:47:50.360
Let's say that we're just
displaying it on the screen.

00:47:50.360 --> 00:47:51.720
We don't necessarily have to do that.

00:47:51.720 --> 00:47:54.780
And when we force the CI image to
render into a bitmap image rep,

00:47:54.780 --> 00:47:55.920
we're pulling pixel.

00:47:55.920 --> 00:47:58.380
We're not only rendering the pixel data,
which is probably happening

00:47:58.380 --> 00:48:00.310
on the graphics card,
but then we're pulling the pixel

00:48:00.310 --> 00:48:04.300
data across to main memory,
which is sort of the fast path.

00:48:04.300 --> 00:48:05.440
That's not the reverse commute.

00:48:05.480 --> 00:48:07.300
That's not the way you want to go.

00:48:07.390 --> 00:48:09.420
So that's potentially costly to do.

00:48:09.660 --> 00:48:12.640
So let's say maybe we're not
adding a border and a shadow.

00:48:12.640 --> 00:48:15.680
We want to be able to take a shortcut and
keep all the data on the graphics card,

00:48:15.680 --> 00:48:18.290
which is where Core Image usually
processes stuff.

00:48:18.430 --> 00:48:21.560
Let's say we want to just get the
CI image out in that special case.

00:48:21.560 --> 00:48:25.800
And what that enables us to do is then
render the CI image more efficiently.

00:48:25.810 --> 00:48:31.090
And the most efficient way to render
a CI image is directly using OpenGL.

00:48:31.170 --> 00:48:34.060
So what we'd like to do is
draw using Quartz sometimes or

00:48:34.110 --> 00:48:36.280
draw using OpenGL other times.

00:48:36.520 --> 00:48:39.300
So you may be familiar
with the NSOpenGL classes.

00:48:39.300 --> 00:48:43.200
We have three in AppKit that provide
basic bridge work so that you can use

00:48:43.200 --> 00:48:44.980
OpenGL in your Cocoa applications.

00:48:44.980 --> 00:48:47.910
We have NSOpenGL context,
which is a context to which

00:48:48.170 --> 00:48:51.420
you issue rendering commands,
pixel format that's just

00:48:51.420 --> 00:48:52.520
used to create the context.

00:48:52.520 --> 00:48:55.080
And then usually, customarily,
you use the context

00:48:55.080 --> 00:48:57.440
with an NSOpenGL view.

00:48:57.440 --> 00:49:00.490
And that OpenGL view you can
create in a palette or whatever.

00:49:00.500 --> 00:49:03.990
But a thing to note about
NSOpenGL context that people don't always

00:49:04.400 --> 00:49:07.960
notice is that when you look at the
accessors for associating it with a view,

00:49:07.960 --> 00:49:10.080
they just specify an NS view.

00:49:10.080 --> 00:49:12.360
They don't specify an NSOpenGL view.

00:49:12.360 --> 00:49:14.960
And in fact,
NSOpenGL view is kind of really

00:49:14.960 --> 00:49:18.000
a lightweight convenience.

00:49:18.000 --> 00:49:22.120
You can really just take any ordinary
NS view and point an NSOpenGL context

00:49:22.120 --> 00:49:24.460
at it and do some GL rendering into it.

00:49:24.470 --> 00:49:26.250
And so that's what
we're going to do here.

00:49:26.360 --> 00:49:29.000
So I'm just going to talk
briefly about how you do that.

00:49:29.000 --> 00:49:31.920
Once you know that you can do this,
it's very straightforward how you do it.

00:49:31.920 --> 00:49:33.060
You create an instance.

00:49:33.060 --> 00:49:35.320
Let's say we want to
switch to OpenGL drawing.

00:49:35.320 --> 00:49:38.000
We create an instance
of NSOpenGL context.

00:49:38.000 --> 00:49:40.420
We connect it to the view by
sending it a set view message.

00:49:40.420 --> 00:49:43.000
OK, here's your view that
you're going to draw into.

00:49:43.000 --> 00:49:46.500
We'll make the context current by sending
it a make current context message,

00:49:46.510 --> 00:49:50.760
and so therefore, all subs are subsequent
OpenGL API calls will go to that

00:49:50.760 --> 00:49:52.520
context in our current thread.

00:49:52.520 --> 00:49:55.250
We go ahead and perform
whatever OpenGL initialization

00:49:55.260 --> 00:49:57.980
we might need to do,
setting up coordinate systems and

00:49:57.980 --> 00:49:59.680
drawing parameters and so forth.

00:49:59.680 --> 00:50:03.560
And then we'll go ahead and draw
the views content using GL calls.

00:50:03.560 --> 00:50:07.090
One thing that can happen here if
we implement this naively is that we

00:50:07.090 --> 00:50:10.820
might get sort of a brief flash on
the screen as the user switches into

00:50:10.820 --> 00:50:12.770
OpenGL mode or out of OpenGL mode.

00:50:12.780 --> 00:50:15.360
And what's going on
here is under the hood,

00:50:15.360 --> 00:50:17.600
when you associate an
OpenGL context with a view,

00:50:17.600 --> 00:50:19.930
you're going to see that the interface
is actually creating a hardware surface,

00:50:19.930 --> 00:50:23.930
which is sort of a little backing
store that floats over the window and

00:50:23.930 --> 00:50:27.640
Quartz compositor composites it in.

00:50:27.640 --> 00:50:29.600
So it just kind of looks
like it's just in the view,

00:50:29.600 --> 00:50:31.130
but it's really floating there.

00:50:31.160 --> 00:50:34.920
And so that surface comes in,
and the compositor in Quartz might

00:50:35.090 --> 00:50:37.880
go ahead and flush everything
out and composite it to the

00:50:38.070 --> 00:50:41.560
display before you have the chance
to render your first GL frame.

00:50:41.560 --> 00:50:46.450
So what we've added in Tiger is a
minor new feature in NSWindow to

00:50:46.470 --> 00:50:47.400
help with this kind of situation.

00:50:47.400 --> 00:50:50.530
And it's called the "disable screen
updates" and it's a really simple method.

00:50:50.560 --> 00:50:51.840
It's a little bit more complicated
than the other methods that

00:50:51.840 --> 00:50:52.560
people sometimes encounter.

00:50:52.560 --> 00:50:53.560
We have this method,
disable screen updates until flush.

00:50:53.560 --> 00:50:54.940
You send this message to a window,
and all it does is it immediately

00:50:54.970 --> 00:51:00.440
tells the window-- it go ahead and
uses the public NS disable screen

00:51:00.440 --> 00:51:04.390
updates call to suspend screen updates,
and then the window makes a note, OK,

00:51:04.390 --> 00:51:06.880
next time I'm flush to the screen,
next time I do some drawing,

00:51:06.880 --> 00:51:10.680
I'll go ahead and re-enable updates
afterwards so everything can flush out.

00:51:10.680 --> 00:51:13.200
So this is a feature that
you can use to avoid that.

00:51:13.200 --> 00:51:15.110
You might find it interesting when
you get your hands on the sample

00:51:15.210 --> 00:51:17.910
code to comment out these lines,
and just so you can see what

00:51:17.910 --> 00:51:19.920
happens when you don't do this.

00:51:20.040 --> 00:51:21.660
So now we're in open jail mode.

00:51:21.660 --> 00:51:22.850
Maybe we want to switch back to Quartz.

00:51:22.960 --> 00:51:24.360
We need to do Quartz drawing.

00:51:24.380 --> 00:51:25.240
Well, that's even simpler.

00:51:25.240 --> 00:51:26.980
We dismiss the context surface.

00:51:26.980 --> 00:51:29.350
We send the context a
clear drawable message,

00:51:29.610 --> 00:51:31.490
and so the surface will
at this point disappear.

00:51:31.540 --> 00:51:35.470
So we might also want to do a disable
screen updates until flush before that.

00:51:35.790 --> 00:51:37.260
And then we're done with the context.

00:51:37.260 --> 00:51:38.680
We just release it,
and now we can go back

00:51:38.830 --> 00:51:41.020
to doing normal drawing.

00:51:41.020 --> 00:51:42.760
In this case,
you might want to disable screen

00:51:42.760 --> 00:51:45.220
updates because the window backing
store is now going to be exposed,

00:51:45.320 --> 00:51:47.410
and maybe it's out of date,
and you haven't had a

00:51:47.450 --> 00:51:48.210
chance to draw it yet.

00:51:48.280 --> 00:51:53.720
So you want the surface disappearance
to not show up until after you've

00:51:53.720 --> 00:51:54.940
had a chance to update the window.

00:51:54.940 --> 00:51:56.850
When you do this, it's pretty seamless.

00:51:56.930 --> 00:51:59.190
And we can see this in our demo.

00:51:59.280 --> 00:52:01.840
If we go back to demo one, please.

00:52:12.920 --> 00:52:14.200
I've got Reducer running here.

00:52:14.310 --> 00:52:17.750
And this here, this is it.

00:52:17.870 --> 00:52:21.000
This is, OK,
right now we're rendering using OpenGL.

00:52:21.000 --> 00:52:24.120
I know that because we're not
adding a border or a shadow.

00:52:24.150 --> 00:52:27.930
If I add one of those attributes, OK,
now we're rendering using Quartz.

00:52:28.100 --> 00:52:33.020
And if I'm putting you to
sleep right now with this demo,

00:52:33.020 --> 00:52:35.770
I can completely understand,
because there's nothing to see here.

00:52:35.870 --> 00:52:37.320
From a user's perspective,
it's the same thing,

00:52:37.320 --> 00:52:38.560
and that's kind of the whole point.

00:52:38.600 --> 00:52:40.090
You're just doing something
different under the hood.

00:52:40.100 --> 00:52:43.470
But if you study the example code,
you can see how this has happened.

00:52:43.580 --> 00:52:46.400
So to try to sort of wake
you up for the next session,

00:52:46.400 --> 00:52:49.050
I'll try and show you something a
little more interesting than that.

00:52:49.280 --> 00:52:53.530
There's one more custom view that
we haven't talked about yet here.

00:52:53.860 --> 00:52:57.890
I decided, why have an ordinary tab view,
boring tab view here,

00:52:58.000 --> 00:52:59.600
when we could really spice it up?

00:52:59.690 --> 00:53:01.310
And we've got all this
stuff in Core Image,

00:53:01.370 --> 00:53:03.230
and in fact,
we have some transition filters.

00:53:03.300 --> 00:53:06.230
So why not have it so when
the user clicks the tab,

00:53:06.230 --> 00:53:09.360
we do a little ripple animation, right?

00:53:09.430 --> 00:53:12.920
And we'll do this again in slow motion,
because you have to

00:53:12.920 --> 00:53:16.380
see that and thank you

00:53:16.500 --> 00:53:19.460
And all the credit for this really
goes to the Core Image guys.

00:53:19.460 --> 00:53:21.200
I mean,
they've done amazing work on this stuff.

00:53:21.200 --> 00:53:23.800
And this is just stuff you can
take and use out of the box.

00:53:23.800 --> 00:53:26.680
And especially now with some
of the new API facilities and

00:53:26.810 --> 00:53:30.400
AppKit that I'll talk about briefly,
you've got a combination.

00:53:30.400 --> 00:53:33.040
You can do stuff that, I mean,
we haven't even anticipated yet,

00:53:33.040 --> 00:53:34.860
I'm sure,
and I can't wait to see some of it.

00:53:35.070 --> 00:53:37.680
So this is the kind of thing--

00:53:38.480 --> 00:53:42.260
A few things that I want
you to notice about this.

00:53:42.260 --> 00:53:44.280
Let's see, can I magnify this?

00:53:46.000 --> 00:53:53.230
When we do the tab switch,
notice that the tabs at the top

00:53:53.710 --> 00:53:55.290
and their labels are not animating.

00:53:55.300 --> 00:53:57.120
And we've got the border
that's still drawing as normal.

00:53:57.120 --> 00:54:01.210
And in fact,
the metal window background behind

00:54:01.280 --> 00:54:04.750
this is staying static as we animate.

00:54:05.080 --> 00:54:07.040
So we're really just--
we've got the content there,

00:54:07.040 --> 00:54:09.740
and we've got it in some sort of
transparent representation where we

00:54:09.740 --> 00:54:14.660
can just blip the content on and put
it through the transition filter.

00:54:15.890 --> 00:54:22.380
And in fact, here I've got just a
little IB test window.

00:54:22.380 --> 00:54:27.060
And if I go to Interface Test Mode here
in Interface Builder-- or actually,

00:54:27.060 --> 00:54:29.810
if we look at these
first with the inspector,

00:54:30.610 --> 00:54:33.230
We'll see that each of these,
and I've got an inspector for this,

00:54:33.250 --> 00:54:34.150
I've put some radio buttons.

00:54:34.190 --> 00:54:38.900
We've got eight standard transitions that
Core Image supports out of the box and

00:54:38.910 --> 00:54:40.840
the potential for people to add more.

00:54:40.840 --> 00:54:43.760
But I've got, so I've got one, you know,
tab view here with some

00:54:43.940 --> 00:54:44.740
random stuff in it.

00:54:45.090 --> 00:54:48.360
Using the copy machine transition,
the disintegrate with mask transition,

00:54:48.360 --> 00:54:54.230
dissolve, flash, modulate, page curl,
ripple, and swipe.

00:54:54.300 --> 00:54:57.350
And I've got these all bound
together to the same value,

00:54:57.350 --> 00:55:00.320
so if I just start them going,
they'll all show you it.

00:55:00.590 --> 00:55:04.720
You know, once I had this working with
one of these transition filters,

00:55:04.770 --> 00:55:08.530
it was really nominally easy,
it was trivial to get it working

00:55:08.540 --> 00:55:09.540
with each of the other ones.

00:55:09.540 --> 00:55:11.720
And again,
thank you to the Core Image team

00:55:11.730 --> 00:55:14.630
for doing all this stuff and
making me look good here.

00:55:14.690 --> 00:55:19.700
So, what I really want to talk
about in the time that we have

00:55:19.920 --> 00:55:21.960
left is how do we do this?

00:55:22.280 --> 00:55:24.190
Because, really, you need this.

00:55:24.300 --> 00:55:25.300
You need to have this
in your applications,

00:55:25.330 --> 00:55:25.510
right?

00:55:25.560 --> 00:55:27.460
This kind of stuff.

00:55:27.530 --> 00:55:28.550
This is mission critical.

00:55:28.710 --> 00:55:31.610
So, if we could go back to slides.

00:55:35.700 --> 00:55:36.440
So I kind of lied.

00:55:36.440 --> 00:55:39.820
We got one more custom view in the
example that I didn't mention before.

00:55:39.900 --> 00:55:44.200
We've got the animating tab view,
which is a subclass of NSTabView that

00:55:44.260 --> 00:55:46.690
does this fancy transition.

00:55:46.810 --> 00:55:49.240
So we'll first look
conceptually at how we do this,

00:55:49.240 --> 00:55:51.780
and then I'll walk you through the code.

00:55:51.780 --> 00:55:54.160
It's pretty straightforward once
you figure out how to do it.

00:55:54.290 --> 00:55:58.680
So we're combining three powerful
capabilities here to do this,

00:55:58.760 --> 00:55:59.560
to pull this off.

00:55:59.780 --> 00:56:02.600
We're combining, obviously,
core image transition filters,

00:56:02.600 --> 00:56:04.210
which are doing most
of the heavy lifting.

00:56:04.410 --> 00:56:08.960
And then we've also got an NSAnimation
that is just driving the time value

00:56:08.960 --> 00:56:12.050
of the transition filter forward,
because you set up a transition

00:56:12.050 --> 00:56:15.530
filter and you iterate your
time from 0 to 1 to advance the

00:56:15.530 --> 00:56:17.700
animation until it's completed.

00:56:17.700 --> 00:56:20.290
And then, as I said,
we kind of want to be able to

00:56:20.290 --> 00:56:24.320
grab these sort of transparent
snapshots of view subtrees so

00:56:24.320 --> 00:56:27.620
we can know what we're animating
from and to as bit mapped images.

00:56:27.720 --> 00:56:31.410
So we're using new view drawing
redirection methods that are

00:56:31.410 --> 00:56:34.300
available in AppKit in Tiger in
order to facilitate this.

00:56:34.320 --> 00:56:37.130
So here we've got our--
this is our basic model.

00:56:37.140 --> 00:56:41.430
We get a snapshot of the content
that we've currently got right

00:56:41.680 --> 00:56:44.660
before we make the transition,
and then we grab a snapshot of the

00:56:44.760 --> 00:56:46.430
content that we want to transition to.

00:56:46.520 --> 00:56:48.060
So we've got two bitmaps.

00:56:48.090 --> 00:56:51.340
We use those,
wire those up as the input images of a

00:56:51.490 --> 00:56:56.810
CI ripple transition filter in this case,
or any of the other transition filters.

00:56:57.210 --> 00:57:00.600
We use an NSAnimation to drive
the time value again from 0 to 1

00:57:00.600 --> 00:57:02.860
over the course of the animation.

00:57:02.950 --> 00:57:06.600
And then at various points,
at intervals along the

00:57:06.600 --> 00:57:09.270
course of the animation,
we're going to sample the output image.

00:57:09.280 --> 00:57:12.070
We ask the ripple transition
filter for its output image.

00:57:12.080 --> 00:57:14.150
It says, OK, gives us a CI image.

00:57:14.160 --> 00:57:17.420
And then when we composite
that in to the window,

00:57:17.420 --> 00:57:21.350
we'll get the state of the
animation for that frame,

00:57:21.400 --> 00:57:23.590
for that instant in time.

00:57:23.700 --> 00:59:57.800
[Transcript missing]

00:59:57.980 --> 00:59:58.850
And you end up with this.

00:59:58.960 --> 01:00:01.950
You end up with something that
includes transparency in the

01:00:01.960 --> 01:00:06.150
background if your view subtree doesn't
completely draw opaque over everything.

01:00:06.340 --> 01:00:10.140
And so you can put it on top of
any kind of background you want,

01:00:10.140 --> 01:00:15.750
and you can see that it only draws
where those controls actually draw.

01:00:16.210 --> 01:00:18.780
So this is the complete set of
methods that I'm referring to as

01:00:18.840 --> 01:00:22.070
the drawing redirection methods
that we've added in Tiger.

01:00:22.080 --> 01:00:25.090
The one for getting the bitmap,
one for caching display in REC.

01:00:25.390 --> 01:00:29.440
There's sort of a lower level funnel
point method that actually implements

01:00:29.440 --> 01:00:35.180
most of the machinery of getting that
subtree to display into that bitmap.

01:00:35.180 --> 01:00:37.060
Or actually, in this case,
it lets you display into

01:00:37.060 --> 01:00:38.060
an arbitrary context.

01:00:38.060 --> 01:00:42.090
Usually this is a graphics context
that you create with a bitmap.

01:00:42.100 --> 01:00:44.140
This complements the
existing display methods.

01:00:44.140 --> 01:00:46.800
We have several methods,
I think nine or ten or so,

01:00:46.800 --> 01:00:49.300
on NSView that start
with the word display.

01:00:49.300 --> 01:00:51.460
And they all kind of do different
flavors of the same thing.

01:00:51.460 --> 01:00:55.460
This is a new one,
Display Rect Ignoring Opacity in Context.

01:00:55.480 --> 01:00:59.880
All that ignoring opacity means is that
for the view display methods that don't

01:00:59.880 --> 01:01:04.090
include ignoring opacity in the name,
they'll actually say, oh, well,

01:01:04.090 --> 01:01:05.620
I'm not an opaque view.

01:01:05.620 --> 01:01:08.410
Maybe I need to walk up the view
tree and ask some ancestors to start

01:01:08.410 --> 01:01:11.530
displaying because I need their
background behind me so that I can draw,

01:01:11.530 --> 01:01:13.540
because I think I'm drawing in a window.

01:01:13.540 --> 01:01:16.110
But for drawing-- you just want to
ignore that opacity and just start

01:01:16.120 --> 01:01:19.160
with the view that the developer
has asked you to start with,

01:01:19.160 --> 01:01:22.110
and go ahead and recurse
down and draw the subviews.

01:01:22.120 --> 01:01:25.100
So all that CacheDisplay
in Rec does really for you,

01:01:25.290 --> 01:01:30.080
it creates an NSGraphicsContext for
drawing into the bitmap image rep.

01:01:30.160 --> 01:01:32.950
This is a thing that you can use
separately from ViewCaching 2,

01:01:33.040 --> 01:01:34.120
the new facility here.

01:01:34.120 --> 01:01:37.870
You see NSGraphicsContext has
this new method for allocating

01:01:37.920 --> 01:01:41.120
a graphics context that you can
use to draw into a memory bitmap.

01:01:41.120 --> 01:01:44.990
So the CacheDisplay in
Rec method does that for you,

01:01:45.240 --> 01:01:48.680
creates the graphics context,
and then it will also

01:01:48.680 --> 01:01:50.120
set up a translation.

01:01:50.120 --> 01:01:55.450
So if the rect that you're sampling
is sort of a subrect of the view,

01:01:55.450 --> 01:01:58.120
then you can--usually
you want to just cache,

01:01:58.140 --> 01:02:00.450
you don't want to allocate a big
huge image just to cache this

01:02:00.450 --> 01:02:03.120
part of the view just because its
origin happens to be over here.

01:02:03.120 --> 01:02:05.640
So we set up a translation to
translate that portion to the

01:02:05.640 --> 01:02:07.100
origin of the bitmap for you.

01:02:07.250 --> 01:02:10.120
But if you want to do some
other kinds of transformations,

01:02:10.130 --> 01:02:11.120
before you do that, you can do that.

01:02:11.120 --> 01:02:13.020
Before we do the drawing
of the view subtree,

01:02:13.110 --> 01:02:15.040
you know, knock yourselves out,
you can use the

01:02:15.040 --> 01:02:19.320
DisplayRecIgnoringOpacityInContext
method as your funnel point to do

01:02:19.320 --> 01:02:22.100
that kind of stuff and just sort of
set up the graphics context yourself.

01:02:22.120 --> 01:02:24.120
It's pretty straightforward to do.

01:02:24.240 --> 01:02:29.390
So let's go back one more time and
look at the example code for this.

01:02:35.060 --> 01:02:37.300
and we're running a little short on time,
so I'm not going to spend

01:02:37.300 --> 01:02:39.350
too much time on this,
but once you've got the concept

01:02:39.430 --> 01:02:42.760
of what we're doing here,
the rest is just mechanics and

01:02:42.930 --> 01:02:46.130
it's pretty straightforward.

01:02:46.630 --> 01:02:49.040
So here's our animating tab view.

01:02:49.120 --> 01:02:51.880
And we've actually got a
declaration in the header.

01:02:51.960 --> 01:02:56.170
These just map our constants that map
to the different transition filters

01:02:56.250 --> 01:02:59.100
that Core Image currently provides us.

01:02:59.320 --> 01:03:01.890
So the attributes of-- the
main inspectable attribute,

01:03:01.960 --> 01:03:04.200
the only inspectable attribute
of the animating tab view

01:03:04.200 --> 01:03:05.700
is its transition style.

01:03:05.700 --> 01:03:08.480
And then also we have some
state that we maintain during

01:03:08.480 --> 01:03:09.700
the course of the animation.

01:03:09.700 --> 01:03:12.400
Here's the transition filter,
a pointer to the transition

01:03:12.400 --> 01:03:13.640
filter we're going to use.

01:03:13.750 --> 01:03:18.040
A shading image that some of the filters
require an auxiliary image that's

01:03:18.040 --> 01:03:19.700
used to help composite the effect.

01:03:19.700 --> 01:03:23.650
An input mask is something
that other filters use.

01:03:23.770 --> 01:03:27.510
Then a rectangle in which we're going
to composite the image when we're done.

01:03:27.910 --> 01:03:32.700
An NSAnimation to drive the time
value of the transition filter.

01:03:32.780 --> 01:03:37.850
And then a little flag in here that
lets me do that spiffy slow motion demo.

01:03:41.350 --> 01:03:42.540
I love it when it does that.

01:03:42.540 --> 01:03:45.540
OK.

01:03:45.640 --> 01:03:51.460
So interesting stuff here is it turns
out that Select Tab View Item is

01:03:51.460 --> 01:03:55.400
pretty much the funnel point for
anything that can possibly change

01:03:55.400 --> 01:03:57.270
the current selection in NSTabView.

01:03:57.280 --> 01:03:58.380
And so that's very convenient.

01:03:58.380 --> 01:04:02.500
That's what I'm going to override
as our means of doing the animation.

01:04:02.500 --> 01:04:04.480
And oh, here's the thing that
I wanted to show you.

01:04:04.480 --> 01:04:07.630
I told you it would turn up
when I was least looking for it.

01:04:07.680 --> 01:04:11.260
So for example,
when we're inspecting one of these in IB,

01:04:11.260 --> 01:04:15.820
if I change the tab item,
I don't want to sit through

01:04:15.820 --> 01:04:17.740
the animation there,
especially if I set to a

01:04:17.740 --> 01:04:19.020
long duration or something.

01:04:19.020 --> 01:04:21.380
I just want to do the immediate
switch when I'm editing the interface,

01:04:21.380 --> 01:04:22.890
have everything be really quick in IB.

01:04:23.260 --> 01:04:26.800
So here's a way that you can
test whether your class is

01:04:26.800 --> 01:04:30.200
running under Interface Builder.

01:04:30.200 --> 01:04:33.110
Interface Builder's application
instance-- remember,

01:04:33.110 --> 01:04:35.160
there's a global NSApp variable.

01:04:35.160 --> 01:04:36.910
That's one of our few
global variables in Cocoa.

01:04:37.030 --> 01:04:39.140
It points to your global
application instance.

01:04:39.240 --> 01:04:41.940
If it responds to the
IsTestingInterface selector,

01:04:41.940 --> 01:04:44.890
you pretty much can assume
that this is Interface Builder

01:04:44.900 --> 01:04:46.260
that you are running under.

01:04:46.280 --> 01:04:48.910
And then if you know that you're
running under Interface Builder,

01:04:48.910 --> 01:04:51.920
there's a further query that you
can do called IsTestingInterface.

01:04:51.920 --> 01:04:53.380
So you can say, OK,
I'm in Interface Builder,

01:04:53.380 --> 01:04:58.380
but am I in Interface Test Mode,
or am I just in normal editing mode?

01:04:58.410 --> 01:05:01.020
So here I'm saying, OK,
if I'm just in normal editing mode,

01:05:01.020 --> 01:05:04.480
not Interface Testing Mode,
then I'm going to go ahead

01:05:04.480 --> 01:05:07.620
and just do the quick,
immediate-- call supers implementation--

01:05:07.620 --> 01:05:10.320
immediately select the new tab view item.

01:05:11.240 --> 01:05:14.200
But let's say we're going to animate,
because that's the interesting part.

01:05:14.440 --> 01:05:18.310
All we've got to do is ask the new
tab view item for its content view,

01:05:18.310 --> 01:05:20.200
and we've got our current content view.

01:05:20.200 --> 01:05:24.200
So we know the view we're going from
that contains all of the content,

01:05:24.200 --> 01:05:27.080
all of the sub-controls,
and the view we're going to.

01:05:27.200 --> 01:05:31.200
We'll compute a union rectangle
that surrounds both of them.

01:05:31.200 --> 01:05:33.200
It turns out in practice they're
going to be the same size.

01:05:33.200 --> 01:05:35.200
Tab view maintains them that way.

01:05:35.200 --> 01:05:37.200
We'll calculate an image rectangle.

01:05:37.200 --> 01:05:40.200
This is where we're going to composite
the image in as we're animating.

01:05:40.200 --> 01:05:44.950
And then we're going to go ahead and
capture the content for the initial

01:05:44.950 --> 01:05:47.100
view that we're switching from.

01:05:47.200 --> 01:05:49.020
And as I said,
if we're doing a page curl,

01:05:49.020 --> 01:05:51.190
it looks better if we're
capturing it opaque,

01:05:51.200 --> 01:05:53.200
so let's use the old-fashioned
way of doing that.

01:05:53.200 --> 01:05:57.470
Here we're using locking focus on
the view using init with focused

01:05:57.470 --> 01:05:59.130
view rect to capture the content.

01:05:59.200 --> 01:06:02.310
But for most cases,
we want it to be transparent,

01:06:02.310 --> 01:06:05.090
so let's use that fancy
new functionality.

01:06:05.270 --> 01:06:08.920
Bitmap image rep for caching
display in rect to get the bitmap.

01:06:09.500 --> 01:06:11.200
Here's clearing the bitmap.

01:06:11.210 --> 01:06:14.200
I've just got a simple function that
you can refer to for doing that.

01:06:14.200 --> 01:06:16.200
I'm just going to B0 out the data.

01:06:16.200 --> 01:06:19.820
And now we'll cache the data,
cache the image in there using this

01:06:19.820 --> 01:06:22.070
new view drawing redirection method.

01:06:22.260 --> 01:06:26.620
Now we switch to the new tab view item,
which is going to go ahead and mark

01:06:26.620 --> 01:06:28.200
the tab view as needing display.

01:06:28.200 --> 01:06:29.340
But fortunately for us,
it's not going to go ahead

01:06:29.340 --> 01:06:30.190
and do an immediate display.

01:06:30.200 --> 01:06:35.190
So we got our chance to wedge in here
and do the animation before that happens.

01:06:35.200 --> 01:06:38.200
We do the same thing with
our final content view.

01:06:38.200 --> 01:06:40.740
We'll render its content,
and this time we'll just

01:06:40.740 --> 01:06:43.270
do it transparent no matter
what filter we're using,

01:06:43.550 --> 01:06:45.200
into a separate bitmap.

01:06:45.200 --> 01:06:48.200
So we've got our two
bitmap image reps now.

01:06:48.200 --> 01:06:51.200
We'll create CI images from them both.

01:06:51.200 --> 01:06:54.380
And now I've got this method of my
own that I've declared above that

01:06:54.380 --> 01:06:57.200
we'll look at briefly that's basically
just a big switch statement that says,

01:06:57.200 --> 01:07:00.040
"Okay, what kind of filter do we need to
create?" And pretty much it's very

01:07:00.040 --> 01:07:01.110
similar code for most of them.

01:07:01.220 --> 01:07:04.120
They all take an input
time and two input images,

01:07:04.200 --> 01:07:07.200
but some of them have--this
requires a mask bitmap.

01:07:07.230 --> 01:07:09.280
So we'll use a mask bitmap
or an environment map or

01:07:09.350 --> 01:07:11.180
something to composite in.

01:07:11.240 --> 01:07:14.090
So we handle each one a little specially,
but for the most part,

01:07:14.090 --> 01:07:15.190
it's the same procedure.

01:07:15.200 --> 01:07:17.200
So now we've got the transition filter.

01:07:17.200 --> 01:07:19.200
We're going to go ahead
and set up an animation.

01:07:19.200 --> 01:07:21.350
What I've done is I've
subclassed NS animation here,

01:07:21.350 --> 01:07:25.200
done a real simple subclass so
that I can get a callback from it.

01:07:25.200 --> 01:07:27.190
So I've got a tab view animation.

01:07:27.230 --> 01:07:30.610
This is a subclass of NS animation,
the sort of more abstract of

01:07:30.610 --> 01:07:32.200
the two animation classes.

01:07:32.200 --> 01:07:36.200
And we give it a duration,
an animation curve.

01:07:36.200 --> 01:07:39.280
And then we'll delegate to self
because I want it to call me back,

01:07:39.290 --> 01:07:42.200
the animating tab view,
every time its timer fires,

01:07:42.200 --> 01:07:44.200
every time it advances in time.

01:07:44.200 --> 01:07:47.660
And then we're going to go ahead and
we're going to hide the final target

01:07:47.660 --> 01:07:51.200
content view because as we're animating,
we don't want it to display yet.

01:07:51.200 --> 01:07:55.410
So we're using this set hidden method
that's a real convenience that was added,

01:07:55.410 --> 01:07:57.200
I think, in Panther.

01:07:57.200 --> 01:07:59.200
And we'll start the animation.

01:07:59.200 --> 01:08:01.120
And we've set it up to be synchronous
so as soon as we return from that,

01:08:01.380 --> 01:08:04.250
we can go ahead and clean up,
tell the view to display

01:08:04.250 --> 01:08:05.200
itself one more time so we're
sure it's in its final state.

01:08:05.200 --> 01:08:07.200
And that's that.

01:08:07.320 --> 01:08:11.940
So down here is the tab view animation,
the NS animation subclass, real simple.

01:08:12.350 --> 01:08:15.200
It overrides the set
current progress method,

01:08:15.200 --> 01:08:17.820
calls supers implementation,
and then sends its delegate,

01:08:18.260 --> 01:08:21.200
which is the animating tab view,
a display message.

01:08:21.200 --> 01:08:24.200
And the last bit of code I'm going
to show you here is real simple.

01:08:24.200 --> 01:08:27.500
We've overridden the drawRect
method that's responsible

01:08:27.500 --> 01:08:29.070
for drawing the tab view.

01:08:29.290 --> 01:08:31.200
And what we're going to do
is call supers drawRect.

01:08:31.200 --> 01:08:33.220
So we're going to give NS tab
view a chance to draw those

01:08:33.220 --> 01:08:34.200
tabs and draw the border.

01:08:34.370 --> 01:08:37.260
And because the final
content view is hidden,

01:08:37.310 --> 01:08:39.200
and so is the initial
one that's pulled out,

01:08:39.200 --> 01:08:41.200
that's all we're going to get it to draw.

01:08:41.200 --> 01:08:44.970
And now if we're animating,
then we go ahead and we've

01:08:44.970 --> 01:08:47.200
got this transition filter.

01:08:47.390 --> 01:08:52.860
We're going to get the current value
from the animation object and wrap

01:08:52.860 --> 01:08:57.200
it in an NSNumber and set it as the
input time of the transition filter.

01:08:57.220 --> 01:08:59.190
And then we're going to
ask the transition filter

01:08:59.320 --> 01:09:00.200
for its output CI image.

01:09:00.200 --> 01:09:03.200
So it's going to allocate a new CI image
that's a recipe for producing the

01:09:03.200 --> 01:09:06.190
image we want at that point in time.

01:09:06.200 --> 01:09:11.200
And then now we're going to just
composite that CI image straight in.

01:09:11.200 --> 01:09:14.190
And we've got--this is part of the
bridge work that we provide in AppKit.

01:09:14.200 --> 01:09:16.200
You don't need to
really get a CI context.

01:09:16.200 --> 01:09:18.200
You can go ahead and
tell the output CI image,

01:09:18.200 --> 01:09:21.160
draw itself in a rectangle,
and there we go.

01:09:21.200 --> 01:09:23.250
And we've got the--so for
every instant in time,

01:09:23.430 --> 01:09:27.180
we're going to redraw the whole view and
just update that part that's animating.

01:09:27.200 --> 01:09:29.200
And there we go.

01:09:29.200 --> 01:09:32.200
That's all we needed to
do to make this happen.

01:09:32.200 --> 01:09:34.460
And as you can see,
this is the kind of thing that

01:09:34.460 --> 01:09:38.190
you probably want to use with
some degree of discretion.

01:09:38.200 --> 01:09:41.200
I would encourage you, by all means,
discretion is good.

01:09:41.200 --> 01:09:43.200
But, you know,
this is really just an example.

01:09:43.200 --> 01:09:45.200
I just figured, you know,
I'd wire up these different things

01:09:45.200 --> 01:09:47.690
that connect nicely together,
but I'm sure you will find other ways

01:09:47.700 --> 01:09:50.980
that they connect nicely together,
maybe even more so,

01:09:51.260 --> 01:09:54.190
to use these kinds of capabilities
to do things we haven't thought of.

01:09:54.200 --> 01:09:57.180
I mean, once you've got a snapshot as
a bitmap of a view subtree,

01:09:57.200 --> 01:09:59.470
you know,
you can take that bitmap and map it

01:09:59.470 --> 01:10:02.200
onto some 3D geometry or something
like that in an OpenGL view.

01:10:02.200 --> 01:10:04.200
The possibilities are pretty limitless.

01:10:04.200 --> 01:10:07.070
So if we could go back to slides,
we'll wrap up now.

01:10:08.850 --> 01:10:09.300
Slides, please.

01:10:09.300 --> 01:10:10.960
Thank you.

01:10:11.040 --> 01:10:13.460
So in conclusion,
we've looked at some powerful

01:10:13.460 --> 01:10:16.380
new capabilities in Tiger,
NSAnimation for bringing

01:10:16.380 --> 01:10:18.730
your views to life,
ways that you can use

01:10:18.730 --> 01:10:21.140
Core Image in a Cocoa application.

01:10:21.140 --> 01:10:22.930
And again, all the details are
there in the source code.

01:10:23.010 --> 01:10:23.950
It's pretty straightforward.

01:10:23.960 --> 01:10:26.880
And I urge you to review
the Core Image sessions.

01:10:26.880 --> 01:10:29.320
And there's great
documentation online for this.

01:10:29.320 --> 01:10:33.080
We've looked at some new ways that you
can capture snapshots of view subtrees.

01:10:33.100 --> 01:10:36.320
And we've looked at some stuff that you
can do on older versions of the system,

01:10:36.320 --> 01:10:39.050
even, like using an OpenGL context
with an ordinary view,

01:10:39.230 --> 01:10:41.380
creating custom views,
and putting that final bit

01:10:41.380 --> 01:10:42.420
of nice polish on your view.

01:10:42.420 --> 01:10:43.120
More information.

01:10:43.120 --> 01:10:46.320
We have lots of great documentation,
sample code, and resources online.

01:10:46.320 --> 01:10:49.870
Again, if you want to get the sample
code for today's session,

01:10:49.870 --> 01:10:52.680
go to developer.apple.com/samplecode.

01:10:52.680 --> 01:10:54.900
Search for Reducer,
and it's online there.

01:10:54.900 --> 01:10:57.500
You can just download
the whole disk image.

01:10:57.690 --> 01:11:01.260
Matthew Formica is our Cocoa and
Development Tools evangelist.

01:11:01.260 --> 01:11:04.150
He can be reached at mformica@apple.com,
and he can point you in the

01:11:04.150 --> 01:11:06.170
right direction if you're
looking for some resources.

01:11:06.350 --> 01:11:08.340
And at this point,
I'd like to invite Ali Ozer,

01:11:08.340 --> 01:11:10.360
the manager of the
Cocoa Frameworks Group,

01:11:10.410 --> 01:11:13.580
and some of my other colleagues
from the AtKit team up to

01:11:13.760 --> 01:11:15.540
try to answer your questions.

01:11:15.590 --> 01:11:17.360
So thank you very much.