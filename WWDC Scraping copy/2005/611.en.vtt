WEBVTT

00:00:00.870 --> 00:00:03.800
Ladies and gentlemen,
I'd like to introduce Scott Morris.

00:00:06.560 --> 00:00:12.950
Welcome to session 611.

00:00:13.120 --> 00:00:15.900
The Learning Enterprise Is Now Open.

00:00:17.740 --> 00:00:21.080
We have members of the
Open Knowledge Initiative from MIT,

00:00:21.230 --> 00:00:24.260
Jeff Merriman, Chuck Shubert,
and Geoff Hulette,

00:00:24.260 --> 00:00:26.550
and the chief architect of Sakai Project.

00:00:26.600 --> 00:00:30.370
And I think these two projects are
representative of a sea change that's

00:00:30.370 --> 00:00:32.600
happening in higher education today.

00:00:32.600 --> 00:00:36.950
Institutions are working cooperatively
to build open systems that support

00:00:37.510 --> 00:00:41.650
open specifications and open standards,
to build new digital learning

00:00:41.650 --> 00:00:45.600
environments that are going to change
new ways or create new ways of teaching,

00:00:45.600 --> 00:00:48.600
learning, scholarship, and research.

00:00:48.600 --> 00:00:53.600
So I'd like to start by bringing
Charles Severance on to talk about Sakai.

00:00:53.600 --> 00:00:54.590
Charles?

00:00:54.650 --> 00:00:58.040
Charles Severance: Thanks, Scott.

00:01:01.000 --> 00:01:05.060
So I'd like to start and ask,
how many people have heard

00:01:05.110 --> 00:01:06.910
the word Sakai before?

00:01:07.710 --> 00:01:08.780
Okay, that's about half.

00:01:08.880 --> 00:01:10.360
It depends on the audience.

00:01:10.360 --> 00:01:13.700
If you're in a higher education,
you've been to a couple of meetings,

00:01:13.810 --> 00:01:16.160
it's pretty hard not to
have heard the word Sakai,

00:01:16.160 --> 00:01:18.760
especially in the context of
learning management systems.

00:01:18.780 --> 00:01:21.350
This is about 50-50,
probably because the other half

00:01:21.450 --> 00:01:24.110
are real developers that sort of
do developer work for a living as

00:01:24.250 --> 00:01:26.090
compared to people in higher education.

00:01:26.120 --> 00:01:30.130
Sakai, I give Sakai as the project
that has the most hype award

00:01:30.130 --> 00:01:32.980
in 2004 in higher education.

00:01:33.730 --> 00:01:36.840
Because in higher education,
it seemed no matter where you went,

00:01:36.840 --> 00:01:38.140
you heard about Sakai.

00:01:38.140 --> 00:01:40.440
And I'll talk a little bit
about how that happened.

00:01:40.480 --> 00:01:44.700
So I'd like to start and talk a
little bit about what Sakai is.

00:01:44.700 --> 00:01:47.940
The elevator speech,
which is sort of incorrect,

00:01:47.940 --> 00:01:51.870
is that we are the open source
learning management system.

00:01:51.880 --> 00:01:55.620
And while that's true,
it really is much more than that.

00:01:55.680 --> 00:01:58.300
We are a project,
we're a grant-funded project.

00:01:58.300 --> 00:02:01.790
We also are producing a framework,
which is a way to assemble a vast

00:02:01.790 --> 00:02:03.440
collection of tools together.

00:02:03.820 --> 00:02:05.660
That are all collaborative in nature.

00:02:05.660 --> 00:02:09.100
And then we have a release that's a
product that can be used both in a

00:02:09.100 --> 00:02:12.500
collaboration and research environment,
as well as a teaching

00:02:12.500 --> 00:02:13.790
and learning environment.

00:02:13.900 --> 00:02:15.690
So why does Sakai matter?

00:02:15.980 --> 00:02:17.850
Why would Sakai have to be on your radar?

00:02:17.920 --> 00:02:18.840
Why should you care?

00:02:19.010 --> 00:02:21.040
Well,
if you're a higher education institution,

00:02:21.040 --> 00:02:23.910
maybe you should look
very closely at Sakai.

00:02:23.980 --> 00:02:27.590
Sakai might be your next
learning management system.

00:02:28.060 --> 00:02:30.300
Open source does not
necessarily mean cheap.

00:02:30.360 --> 00:02:31.640
People think, oh, this is free.

00:02:31.640 --> 00:02:34.370
Well, it turns out you have lots of
developers that you have to

00:02:34.370 --> 00:02:35.760
still hire and do whatever.

00:02:35.760 --> 00:02:39.480
For higher education,
really the value proposition comes

00:02:39.640 --> 00:02:43.740
down to control of your own destiny
much more than free or cheap.

00:02:44.180 --> 00:02:48.730
If you're a developer, Sakai,
once we get the installation base up,

00:02:48.820 --> 00:02:52.790
will be a customer base with a
piece of software that needs a lot

00:02:52.880 --> 00:02:57.690
of configuration and value add like
directory services being plugged in,

00:02:57.710 --> 00:02:59.160
etc., etc.

00:02:59.160 --> 00:03:02.550
And so understanding how to work
with Sakai is a potential way

00:03:02.680 --> 00:03:05.520
to either sell your particular
learning widget or potential

00:03:05.980 --> 00:03:08.080
just sell services around Sakai.

00:03:08.100 --> 00:03:14.020
Content providers like publishers or
other high value content providers.

00:03:14.180 --> 00:03:17.840
Can look to Sakai to begin to
produce highly standardized ways

00:03:17.930 --> 00:03:21.770
to plug in not only to Sakai,
but to WebCT, Blackboard,

00:03:21.770 --> 00:03:24.540
and other learning management
systems in a consistent way.

00:03:24.560 --> 00:03:29.090
So if we look at the Sakai project,
we start out, yeah,

00:03:29.090 --> 00:03:31.450
that's why we were named.

00:03:31.720 --> 00:03:33.940
That's Hirooku Sakai from Iron Chef.

00:03:34.040 --> 00:03:37.070
And the project we had
at Michigan before this,

00:03:37.070 --> 00:03:39.260
we called it the Chef Project.

00:03:39.260 --> 00:03:41.580
So we needed to come up with
a name that wasn't Chef.

00:03:41.660 --> 00:03:43.740
But we didn't want to
call it like Chef 2.

00:03:43.870 --> 00:03:47.290
Because then everyone would kind of say,
well, that's just Michigan's code again.

00:03:47.300 --> 00:03:48.840
Turns out it was Michigan's code again.

00:03:48.840 --> 00:03:52.320
But by calling it Sakai was a way
for people to wait about six months

00:03:52.390 --> 00:03:54.090
to figure out that it was Chef.

00:03:54.200 --> 00:03:56.240
So Sakai is the Iron Chef.

00:03:56.320 --> 00:04:00.910
So the idea is that we take
these four institutions,

00:04:00.930 --> 00:04:05.040
Indiana, Michigan, MIT, and Stanford.

00:04:05.040 --> 00:04:10.340
And effectively chain ourselves
together and jump off the cliff.

00:04:10.440 --> 00:04:13.070
Fall together for two years.

00:04:13.500 --> 00:04:17.570
And then hit the bottom and have one
open source learning management system

00:04:17.850 --> 00:04:19.520
that was satisfactory to all of us.

00:04:19.540 --> 00:04:21.760
Now we took some very
unique approaches in this.

00:04:21.970 --> 00:04:24.720
We insisted on a BSD style license.

00:04:24.760 --> 00:04:28.090
And we took developers from
each of the institutions.

00:04:28.160 --> 00:04:30.300
The grant turns out to be
a small part of the money.

00:04:30.360 --> 00:04:33.400
We took developers from --
five developers from each

00:04:33.410 --> 00:04:34.460
of the core institutions.

00:04:34.460 --> 00:04:36.100
And they report to me.

00:04:36.300 --> 00:04:38.730
I spend a lot of time in the air.

00:04:38.820 --> 00:04:42.640
Because I have developers all over the
country that are working on this project.

00:04:42.770 --> 00:04:43.160
Because we have to build this.

00:04:43.240 --> 00:04:44.290
We have to build it for all of us.

00:04:44.340 --> 00:04:45.360
Not just one of us.

00:04:45.380 --> 00:04:47.650
We're not building this
for one and handing it out.

00:04:47.760 --> 00:04:49.310
It's being built by everyone.

00:04:49.320 --> 00:04:52.970
So overall we're about $6 million.

00:04:53.160 --> 00:04:54.940
We're 20 FTEs.

00:04:55.000 --> 00:04:57.160
And we have a number of
partners that are investing.

00:04:57.180 --> 00:05:00.730
Now one of the things that happens
when you're funded through the Mellon

00:05:00.730 --> 00:05:02.640
Foundation is it's kind of like a mark.

00:05:02.760 --> 00:05:03.580
It's a brand.

00:05:03.620 --> 00:05:06.130
It starts creating buzz
the moment you're funded.

00:05:06.160 --> 00:05:09.690
So this is dated January 22, 2004.

00:05:09.720 --> 00:05:12.070
This is less than 30
days after we're funded.

00:05:12.120 --> 00:05:12.820
We're in the chronicling phase.

00:05:12.830 --> 00:05:14.230
We're in the chronicle
of higher education.

00:05:14.590 --> 00:05:18.460
And all of a sudden the CIOs and
CTOs of all these universities start

00:05:18.470 --> 00:05:20.310
saying what's this Sakai thing?

00:05:20.320 --> 00:05:23.070
Well there were literally hundreds
and hundreds of open source

00:05:23.130 --> 00:05:24.320
learning management systems.

00:05:24.320 --> 00:05:27.720
But now Sakai has kind
of risen above this.

00:05:27.780 --> 00:05:31.030
And so we think this is a very
important thing that we can do.

00:05:31.220 --> 00:05:35.480
And if you look at the commercial sector,
go back in the mid '90s,

00:05:35.780 --> 00:05:38.430
lots of small commercial
learning management systems.

00:05:38.480 --> 00:05:40.520
Then there was an industry shakeout.

00:05:40.710 --> 00:05:42.480
And two large commercial systems.

00:05:42.480 --> 00:05:44.120
And two large commercial
systems came out of that.

00:05:44.230 --> 00:05:45.280
WebCT and Blackport.

00:05:45.300 --> 00:05:48.280
There are some small ones,
Angel and Desire2Learn.

00:05:48.280 --> 00:05:53.050
They're kind of in there in the edges
selling lower cost applications.

00:05:53.100 --> 00:05:55.710
But at the end of the day the
industry sort of has settled

00:05:55.710 --> 00:05:59.370
on two large powerful products.

00:05:59.620 --> 00:06:00.660
So the first one is the WebCT.

00:06:00.870 --> 00:06:05.040
In the open source environment,
we really have had no consolidation.

00:06:05.040 --> 00:06:08.500
Everybody who has five or six
programmers writes their own.

00:06:08.570 --> 00:06:10.250
Literally,
there are hundreds of different open

00:06:10.330 --> 00:06:11.780
source learning management systems.

00:06:11.800 --> 00:06:15.660
So in early 2004,
when Mellon Foundation bet

00:06:15.700 --> 00:06:19.790
on us to make one that could
kind of bring order to it all,

00:06:19.810 --> 00:06:23.800
let's build at least one that's got at
least four institutions that buy into it,

00:06:23.800 --> 00:06:26.750
and then potentially there will be more.

00:06:27.050 --> 00:06:30.800
Now one thing about this
project is it's only two years.

00:06:30.800 --> 00:06:31.800
We are not going to
fund the project again.

00:06:31.800 --> 00:06:35.630
We've not asked for any renewal
funding because it's ended.

00:06:35.890 --> 00:06:38.430
The project was to align
the four institutions,

00:06:38.510 --> 00:06:41.800
not to keep writing software
forever and ever and ever.

00:06:41.800 --> 00:06:45.800
We're going to turn this software over
to an open source community at the end.

00:06:45.810 --> 00:06:50.060
December 2005 is the end of the
Sakai project and the beginning

00:06:50.060 --> 00:06:51.800
of the Sakai Foundation.

00:06:51.800 --> 00:06:55.900
So you think of this kind of
crazy two-year process where

00:06:56.020 --> 00:06:56.800
we've developed this software.

00:06:56.800 --> 00:07:01.030
At just a feverish pace,
it's really almost like a blip

00:07:01.030 --> 00:07:05.640
in the open source world of
learning management systems.

00:07:05.980 --> 00:07:08.660
Hopefully going forward,
this will just be an open source product.

00:07:09.250 --> 00:07:12.800
Michigan and others will provide
developers and will work with it.

00:07:12.800 --> 00:07:13.980
We're going to be
running it in production,

00:07:13.980 --> 00:07:19.770
but it really is going to become the
property of the open source community.

00:07:20.130 --> 00:07:22.450
So for the first two
years of this project,

00:07:22.450 --> 00:07:23.540
really?

00:07:23.540 --> 00:07:24.140
Yeah.

00:07:24.140 --> 00:07:26.770
We're forming the
corporation in about a week,

00:07:26.910 --> 00:07:29.400
the Sakai Foundation Corporation,
and we're going to transfer it all

00:07:29.440 --> 00:07:31.120
to the Sakai Foundation Corporation.

00:07:31.120 --> 00:07:34.720
So for two years,
we had this little foot race,

00:07:34.720 --> 00:07:38.120
and we are running it
like a small startup.

00:07:38.120 --> 00:07:40.140
We have a very hierarchical organization.

00:07:40.140 --> 00:07:41.340
I'm the chief architect.

00:07:41.510 --> 00:07:42.700
Everybody reports to me.

00:07:42.700 --> 00:07:44.600
If a decision has to be made,
I make the decision.

00:07:44.600 --> 00:07:45.560
People get mad sometimes.

00:07:45.690 --> 00:07:47.480
They fight in our board
meetings sometimes.

00:07:47.520 --> 00:07:48.980
It's just like a company.

00:07:49.430 --> 00:07:51.340
That's only how we work
for the first two years.

00:07:51.340 --> 00:07:54.230
It turns out we're
rewriting so much software,

00:07:54.350 --> 00:07:57.020
and it's so painful for people to
throw their learning management

00:07:57.080 --> 00:08:00.300
systems away that we have to be very,
very agile and very,

00:08:00.360 --> 00:08:01.820
very quick during these two years.

00:08:01.890 --> 00:08:04.940
We hope the software we produce at
the end of the two years does not

00:08:04.960 --> 00:08:06.720
require that kind of investment.

00:08:08.000 --> 00:08:10.610
The future looks more like our
Educational Partners Program.

00:08:10.720 --> 00:08:15.350
We have 80 schools who've
committed to spending $10,000 per

00:08:15.350 --> 00:08:17.430
year to fund us to keep going.

00:08:17.500 --> 00:08:20.440
Now what they're going to fund is
not necessarily the development,

00:08:20.500 --> 00:08:23.800
but more the coordination of the
development of the entire community.

00:08:23.800 --> 00:08:25.840
So we're meeting with them this week.

00:08:25.950 --> 00:08:29.220
I get on a plane as soon as I leave
here to go to our Sakai meeting with

00:08:29.590 --> 00:08:33.790
400 people to talk about the current
and present and future of Sakai.

00:08:34.680 --> 00:08:36.670
We also have commercial affiliates.

00:08:36.670 --> 00:08:39.660
We all lived through the late 90s
where everyone who had a domain name

00:08:39.660 --> 00:08:41.570
got a million dollars and a Ferrari,
right?

00:08:41.680 --> 00:08:44.680
Well, we don't want Sakai to be
viewed in that same way.

00:08:44.680 --> 00:08:48.690
We carefully want to make sure that
Sakai stays an open source play,

00:08:49.050 --> 00:08:53.760
that the University of Michigan,
Indiana University, MIT and Stanford,

00:08:53.760 --> 00:08:54.680
we're not in this for a buck.

00:08:54.830 --> 00:08:58.540
We all had to agree that we would
give this software away at the

00:08:58.650 --> 00:09:00.580
end to be part of the project.

00:09:00.680 --> 00:09:02.680
So what we do is we have
commercial affiliates.

00:09:02.680 --> 00:09:03.280
Generally these commercial affiliates
are the ones who are going to be

00:09:03.280 --> 00:09:03.630
the most successful in the future.

00:09:03.680 --> 00:09:03.680
So what we do is we have
commercial affiliates.

00:09:03.770 --> 00:09:04.280
Generally these commercial affiliates
are the ones who are going to be

00:09:04.310 --> 00:09:04.670
the most successful in the future.

00:09:04.780 --> 00:09:09.500
affiliates are interested in adding
value around services on selling Sakai.

00:09:09.500 --> 00:09:12.210
For a long time we only had three
of them in their little companies.

00:09:12.220 --> 00:09:14.540
Well recently we got a big one, IBM.

00:09:14.540 --> 00:09:17.820
Everyone looks at IBM and says, "Whoa,
it's gonna change Sakai." Well,

00:09:17.980 --> 00:09:20.890
let me tell you the people
at IBM that we're dealing

00:09:20.890 --> 00:09:22.830
with are IBM global services.

00:09:22.890 --> 00:09:25.840
They're not so interested
in changing Sakai,

00:09:26.040 --> 00:09:31.070
they just wanna make a whole lot of money
selling you all Sakai on IBM hardware.

00:09:31.430 --> 00:09:35.440
And so it's again the commercial
affiliates are more oriented towards

00:09:35.440 --> 00:09:40.690
services around Sakai than they
are buying favor within Sakai.

00:09:41.110 --> 00:09:42.310
We have Sakai meetings.

00:09:42.330 --> 00:09:44.870
Our third one is happening this week.

00:09:44.930 --> 00:09:46.830
This is the first one
that's open to the public.

00:09:46.830 --> 00:09:48.600
The first two were sort of members only.

00:09:48.600 --> 00:09:52.410
One of our patterns is to have things
members only and then open them up as

00:09:52.550 --> 00:09:56.610
a transition to make it so that we are
truly open by the end of the project.

00:09:56.940 --> 00:10:00.440
In the future, as I mentioned,
the grant ends 2005.

00:10:00.440 --> 00:10:05.360
We expect a $1 to $2 million revenue
stream starting 2005 already to the

00:10:05.750 --> 00:10:07.830
foundation to stay in the open source.

00:10:07.830 --> 00:10:12.070
We expect that the core team is going to
be on the order of 10 programmers and not

00:10:12.070 --> 00:10:14.180
a large set of people to do all the work.

00:10:14.280 --> 00:10:17.450
But instead, a small set of people to
coordinate it makes sense,

00:10:17.450 --> 00:10:19.990
coordinate QA and get releases
out on time as compared

00:10:20.040 --> 00:10:23.620
to doing the actual work,
where today we're doing the actual work.

00:10:23.700 --> 00:10:25.400
There's contributions
from outside the core,

00:10:25.400 --> 00:10:26.920
but most of the work is done by the core.

00:10:26.920 --> 00:10:30.180
In the future,
the core will be doing the release

00:10:30.350 --> 00:10:32.610
and the QA and the consulting.

00:10:33.400 --> 00:13:42.200
[Transcript missing]

00:13:44.640 --> 00:13:46.700
Could I switch to demo one, please?

00:13:46.860 --> 00:13:51.700
So what I have here is I have
what we call our quick demo.

00:13:51.750 --> 00:13:53.530
And in our distribution,
there are two basic

00:13:53.540 --> 00:13:55.060
pieces of distribution.

00:13:55.100 --> 00:13:59.130
One is this demo that you simply unzip
and put on your desk and run one command,

00:13:59.140 --> 00:14:00.800
and you've got Sakai up and running.

00:14:00.830 --> 00:14:03.900
I carry it around on a thumb drive,
the full installation on a thumb drive.

00:14:04.120 --> 00:14:06.790
I just made an install package
in the previous session over

00:14:06.790 --> 00:14:09.300
there so that I could have a
Mac install package out of it.

00:14:09.330 --> 00:14:10.660
It's really simple.

00:14:10.700 --> 00:14:13.740
We call this the show your boss version.

00:14:13.770 --> 00:14:15.280
Your boss says,
I've been to a conference.

00:14:15.280 --> 00:14:16.220
I heard about Sakai.

00:14:16.240 --> 00:14:18.540
Why don't you get it up and
running so I can take a look at it?

00:14:18.630 --> 00:14:21.920
Five minutes later,
you go to localhost:8080, and bada boom,

00:14:21.920 --> 00:14:23.160
you've got it.

00:14:23.210 --> 00:14:26.380
So I want to show you a use case
scenario that kind of gives a sense

00:14:26.380 --> 00:14:27.980
of the collaborative activity of it.

00:14:27.980 --> 00:14:29.810
I'll log in here.

00:14:31.920 --> 00:14:36.220
And so, I have a series of workspaces,
and these are like SharePoint sites

00:14:36.350 --> 00:14:40.700
or it's just a context around
where information is organized.

00:14:40.700 --> 00:14:43.140
And depending on the site I'm in,
I have a set of tools

00:14:43.140 --> 00:14:44.390
that run down the side.

00:14:44.480 --> 00:14:46.300
I'm going to make a site.

00:14:46.360 --> 00:14:48.190
I'm going to create a new site.

00:14:48.250 --> 00:14:50.200
I could create a course
site or a project site.

00:14:50.200 --> 00:14:53.690
I'll create a project site.

00:14:53.800 --> 00:14:56.690
I'll call this one WWDC.

00:15:01.780 --> 00:15:04.960
And I get a set of tools,
and again this is that same set

00:15:05.150 --> 00:15:09.410
of some collaboration tools,
some tools that are not,

00:15:09.560 --> 00:15:12.400
that are sort of general collaboration,
others that are teaching and learning.

00:15:12.400 --> 00:15:16.350
You can import content from other
sites if you'd created them.

00:15:20.300 --> 00:15:21.490
I'm about to publish the site.

00:15:21.500 --> 00:15:23.780
I'm going to make this
publicly joinable by anybody,

00:15:23.780 --> 00:15:25.520
and I'm going to give
them an access role.

00:15:25.570 --> 00:15:27.960
Here's where you start to see
where it's not necessarily just

00:15:28.060 --> 00:15:29.090
about teachers and learners.

00:15:29.150 --> 00:15:31.580
We have a lot of terminology
in there that's neutral.

00:15:31.600 --> 00:15:34.280
Maintaining access makes sense
if you're a teacher or a learner,

00:15:34.320 --> 00:15:36.930
but it also makes sense if you are

00:15:37.080 --> 00:15:40.090
The Chief Graduate Students and
the Subgraduate Students,

00:15:40.090 --> 00:15:43.300
or you're the PIs on the grant and the
graduate students working on the grant.

00:15:43.350 --> 00:15:45.850
Maintain is the ability
to mess with the files,

00:15:45.850 --> 00:15:47.800
and access means the
ability to write the files.

00:15:47.940 --> 00:15:51.460
So there's this membership button
that now anyone who comes to

00:15:51.710 --> 00:15:54.220
this site can naturally join it.

00:15:54.400 --> 00:15:56.710
So I'm going to create the site.

00:15:57.520 --> 00:16:00.090
And now it popped up in my site
list because I'm the maintainer

00:16:00.200 --> 00:16:01.730
of it because I just created it.

00:16:01.740 --> 00:16:04.960
So now we see a series of buttons,
the home button that tells you

00:16:04.970 --> 00:16:07.330
like the chat that's going on
or the recent announcements.

00:16:07.360 --> 00:16:09.920
I should have put the schedule on,
I forgot about that.

00:16:09.920 --> 00:16:14.490
Announcements is a way to make
announcements and resources is a way to,

00:16:14.500 --> 00:16:18.510
oh shoot,
I forgot I need to upload a file here.

00:16:34.130 --> 00:16:35.950
So there's a sort of upload place.

00:16:36.050 --> 00:16:38.240
There's a chat room
that you can work with.

00:16:38.270 --> 00:16:41.890
There's this presentation tool that's
something I wrote that flips slides.

00:16:41.960 --> 00:16:44.300
If you know my history,
I have this urge to

00:16:44.300 --> 00:16:46.180
distribute presentations.

00:16:46.200 --> 00:16:47.220
It's the thing I want to do.

00:16:47.380 --> 00:16:51.300
But we also have WebDAV that
works nicely in Apple.

00:16:51.300 --> 00:16:56.780
And unfortunately, we shipped before...

00:16:56.940 --> 00:17:01.790
We shipped before 10/4,
and so our instructions have Goliath in

00:17:01.790 --> 00:17:04.600
them because of the HTTPS Apple thing.

00:17:04.670 --> 00:17:06.410
But now we're going to
update the instructions.

00:17:06.590 --> 00:17:11.700
So I'm going to pop here
and just bring up WebDAV.

00:17:11.730 --> 00:17:15.970
And I got the URL from this little site.

00:17:18.910 --> 00:17:24.220
And so there's the file that I just
uploaded through the web interface,

00:17:24.220 --> 00:17:26.480
and I'll just drag
another file into there.

00:17:26.590 --> 00:17:28.870
Let's get that on.

00:17:29.000 --> 00:17:30.950
And I'll go back.

00:17:32.500 --> 00:17:35.040
And there is the file
that I just dragged in.

00:17:35.040 --> 00:17:38.040
And so the resources tool
has got a web dev capability.

00:17:38.070 --> 00:17:40.150
And so now I want to create a class.

00:17:40.200 --> 00:17:44.110
So I'll go back to my workspace,
worksite setup,

00:17:47.760 --> 00:17:49.120
I want to create a new one.

00:17:49.140 --> 00:17:51.080
This time I want to create a class.

00:17:51.100 --> 00:17:53.110
This is some information that
I'll talk about in a bit about

00:17:53.390 --> 00:17:56.560
pre-published information about
who's what teaching what class.

00:17:56.570 --> 00:17:58.740
And it knows who's teaching what class.

00:17:58.740 --> 00:18:02.410
Then it goes through
the same set of steps.

00:18:02.690 --> 00:18:05.680
Pick a different set of tools,
the assignment tool, chat room,

00:18:05.800 --> 00:18:11.430
the drop box, the grade book, resources.

00:18:19.400 --> 00:18:30.600
So people can act, anybody can get in,
and create the site.

00:18:30.610 --> 00:18:32.580
So there's my course site.

00:18:35.660 --> 00:18:38.870
Now, I was in the testing room,
and I don't know how many of you got a

00:18:38.920 --> 00:18:44.070
chance to play with that Intel-based Mac,
but it runs this application about 70%

00:18:44.070 --> 00:18:47.330
faster than a 2.5 gigahertz power PC.

00:18:47.360 --> 00:18:50.160
So I'll just let you know that I'm
ordering one as soon as I get back,

00:18:50.200 --> 00:18:51.940
because we're all Java developers.

00:18:51.940 --> 00:18:54.380
This whole thing's written in Java,
and running Eclipse, I'm sure,

00:18:54.380 --> 00:18:56.320
is going to be about twice as
fast as one of those things,

00:18:56.320 --> 00:18:57.710
and they're an awful lot cheaper.

00:18:57.720 --> 00:19:00.200
So I'm just very impressed
with that hardware.

00:19:00.200 --> 00:19:01.960
We ran on it just fine.

00:19:01.960 --> 00:19:04.290
As Steve said, Java just works.

00:19:05.100 --> 00:19:07.880
So let's go back to the slides now.

00:19:07.880 --> 00:19:11.490
So one of the things that faculty
really find enjoyable about this

00:19:11.600 --> 00:19:15.660
software is that notion that they
can create a group of students with

00:19:15.810 --> 00:19:18.660
four or five students just like
that with a couple of button clicks.

00:19:18.660 --> 00:19:21.630
And that's because part of
our fundamental goal is not

00:19:21.740 --> 00:19:24.940
just to think about this as
precisely about the courses,

00:19:24.940 --> 00:19:28.500
but instead ad hoc teaching and
learning and ad hoc communication.

00:19:28.500 --> 00:19:30.640
We have four sites
that are in production.

00:19:30.640 --> 00:19:34.480
I define production as there's enough
people using it that when it goes down,

00:19:34.480 --> 00:19:36.480
phones ring instantaneously.

00:19:36.520 --> 00:19:40.400
University of Michigan,
Indiana University, Yale University,

00:19:40.640 --> 00:19:42.050
and Foothill Community College.

00:19:42.130 --> 00:19:45.340
Foothill has 35 community colleges that
are going to be using this as well.

00:19:45.560 --> 00:19:49.240
There's a whole series of other
organizations that have published the

00:19:49.250 --> 00:19:51.400
adoption plans for their use of Sakai.

00:19:51.400 --> 00:19:55.560
You can go to Google and type "Sakai
adoption plans." My personal favorite

00:19:55.560 --> 00:19:59.550
is University of California Merced,
which is, I think, right over that away.

00:19:59.960 --> 00:20:03.330
They are a new campus,
and their learning management

00:20:03.390 --> 00:20:03.760
system is going to be Sakai.

00:20:03.920 --> 00:20:05.920
They're going to be Sakai
from the very beginning.

00:20:05.920 --> 00:20:07.770
So unlike the rest of us,
they don't have to come up

00:20:07.870 --> 00:20:08.920
with any conversion scripts.

00:20:09.120 --> 00:20:11.120
They're just going to start
with Sakai from the very,

00:20:11.120 --> 00:20:11.920
very first moment.

00:20:11.940 --> 00:20:15.920
And so we think that's kind
of really a very cool adopter.

00:20:16.140 --> 00:20:19.920
Now, technically within Sakai,
we're going to have a bunch of tools

00:20:19.990 --> 00:20:20.920
written by a whole bunch of people.

00:20:20.920 --> 00:20:24.950
And so we've had to build a very
robust and rich framework to

00:20:25.440 --> 00:20:28.920
make it so that dropping one tool
in does not break another tool.

00:20:28.920 --> 00:20:33.480
We chose technologies in Sakai that
we hoped would be comfortable in

00:20:33.490 --> 00:20:37.360
a typical enterprise organization
that's not using Microsoft,

00:20:37.730 --> 00:20:43.290
meaning the typical Java stuff: Java,
Tomcat, Java Server Faces.

00:20:43.430 --> 00:20:45.350
We didn't make up too much stuff.

00:20:45.360 --> 00:20:50.820
And it turns out it fits beautifully
inside Mac OS X Server because

00:20:50.930 --> 00:20:54.360
there are so many pieces of
Mac OS X Server that are already there.

00:20:54.360 --> 00:20:57.360
And we just drop in the pieces
that we need in addition,

00:20:57.440 --> 00:21:01.350
hook up the JK connector the right way,
install the certificates, and off you go.

00:21:01.360 --> 00:21:02.800
We support MySQL.

00:21:02.800 --> 00:21:04.800
Out of the box.

00:21:04.800 --> 00:21:09.960
And Oracle, which is also available on
Mac OS X Server as well.

00:21:10.520 --> 00:21:15.520
The basic architecture of the software
is what I call a two-layer architecture.

00:21:15.590 --> 00:21:18.600
If you remember, long, long ago,
there was this concept of

00:21:18.710 --> 00:21:21.470
the three-layer architecture,
which seemed really good when

00:21:21.470 --> 00:21:22.390
you first heard about it.

00:21:22.500 --> 00:21:24.880
But the three-layer architecture
has all kinds of problems.

00:21:24.910 --> 00:21:28.270
I could spend a lot of time talking about
why three-layer architectures don't work.

00:21:28.500 --> 00:21:29.820
We use a two-layer architecture.

00:21:29.970 --> 00:21:32.180
It's also called the
service-oriented architecture.

00:21:32.180 --> 00:21:37.450
And the idea is you break at least
one place and create a very hard,

00:21:37.450 --> 00:21:42.840
impenetrable API at that place
that you document the heck out of.

00:21:42.980 --> 00:21:46.380
So you split between your
presentation and your persistence.

00:21:46.380 --> 00:21:50.080
Then you publish a Java doc,
and you don't change it every day.

00:21:50.080 --> 00:21:53.200
This isn't like I'm the programmer
writing the whole thing.

00:21:53.200 --> 00:21:55.780
It's like one programmer
can write above the line,

00:21:55.780 --> 00:21:58.400
and another programmer
can write below the line.

00:21:58.480 --> 00:22:00.160
And they can communicate
through Java doc.

00:22:00.220 --> 00:22:04.370
And we find that this solves lots
of problems with keeping persistence

00:22:04.380 --> 00:22:07.130
out of the presentation code,
unit testing,

00:22:07.130 --> 00:22:11.090
etc., independent development,
and very importantly for us,

00:22:11.220 --> 00:22:12.300
reuse of code.

00:22:12.300 --> 00:22:14.860
So our announcement tools
can post a schedule.

00:22:14.860 --> 00:22:17.630
Our chat tool can post an announcement.

00:22:17.720 --> 00:22:19.350
So you have all these
tools that you think,

00:22:19.350 --> 00:22:20.650
well, there's just a chat tool.

00:22:20.650 --> 00:22:21.710
That's just one thing.

00:22:21.720 --> 00:22:22.020
No.

00:22:22.020 --> 00:22:24.560
It has capabilities that
touch everything else,

00:22:24.560 --> 00:22:27.860
and it just calls the services
for those other capabilities.

00:22:28.460 --> 00:22:31.850
Our Sakai application framework,
I don't really have time to describe it,

00:22:31.920 --> 00:22:36.720
but we really refactored our code in
such a way to isolate the non-portable

00:22:36.720 --> 00:22:40.480
aspects from one web app container
to another web app container.

00:22:40.480 --> 00:22:43.530
We're almost at the point
where with our kernel,

00:22:43.530 --> 00:22:47.060
I can move between a servlet
container such as Tomcat and a

00:22:47.180 --> 00:22:52.290
JSR168 container such as Pluto or
the JSR168 without changing my tool

00:22:52.290 --> 00:22:54.900
code by just changing my kernel code.

00:22:54.920 --> 00:22:57.980
And so we have a series of things
that we provide from the kernel.

00:22:58.470 --> 00:23:00.100
These common services,
which are like file

00:23:00.220 --> 00:23:01.480
systems and a presentation.

00:23:01.480 --> 00:23:02.520
I'll talk about each of these.

00:23:02.600 --> 00:23:05.270
And then the app developers
write some tool layout code,

00:23:05.330 --> 00:23:08.410
some tool code,
and then their own application services.

00:23:08.480 --> 00:23:11.330
Chat is a good example of
an application service.

00:23:11.400 --> 00:23:15.890
This is just a simple
show of the Sakai layout.

00:23:15.950 --> 00:23:17.540
We chose Java Server Faces.

00:23:17.650 --> 00:23:19.730
A lot of people give me
a lot of crap about that.

00:23:20.190 --> 00:23:23.600
Everyone says Java Server Faces
is a little young.

00:23:23.760 --> 00:23:27.220
What we were looking for is
a really solid presentation

00:23:27.310 --> 00:23:28.420
layer that is supported.

00:23:28.420 --> 00:23:30.760
And we wanted to make it symmetrical.

00:23:30.760 --> 00:23:32.760
And yeah, Java Server Faces is young.

00:23:32.760 --> 00:23:34.760
This is layout.

00:23:34.760 --> 00:23:36.980
It's almost like Zool
or XForms or whatever,

00:23:37.070 --> 00:23:38.750
but it's even more pure layout.

00:23:38.760 --> 00:23:40.760
And the key thing is you've
got to build widgets.

00:23:40.760 --> 00:23:43.990
If you don't want to build widgets,
Java Server Faces becomes really,

00:23:43.990 --> 00:23:46.740
really frustrating because
it's not like JSP with tags.

00:23:46.840 --> 00:23:48.800
This is really a layout language.

00:23:49.050 --> 00:23:50.760
It's not a bunch of macros.

00:23:50.760 --> 00:23:52.760
And so these are very
intelligent little buggers.

00:23:52.760 --> 00:23:56.490
And you can't just take your
average web designer and say,

00:23:56.490 --> 00:24:00.310
"Go off and make a new one."
You can't make a bunch of JSF tags.

00:24:00.400 --> 00:24:02.400
So we have senior
developers making the tags.

00:24:02.410 --> 00:24:06.400
But the nice thing about it is
there's no localization issues here,

00:24:06.400 --> 00:24:09.390
no internationalization,
no accessibility issues.

00:24:09.530 --> 00:24:14.140
We tend to write tool code that
ignores that and delegates that.

00:24:14.890 --> 00:24:17.030
All up to the presentation services.

00:24:17.140 --> 00:24:21.510
And so we felt that this was a way for
us to write tools that could have a very,

00:24:21.700 --> 00:24:25.290
very solid layer presentation,
that the layout is very clean,

00:24:25.400 --> 00:24:28.470
and we could delegate to the
presentation services and the tag

00:24:28.470 --> 00:24:30.990
implementations extremely complex things.

00:24:31.170 --> 00:24:33.730
Now a lot of classic web developers
find this frustrating because

00:24:34.050 --> 00:24:35.840
they're just used to hacking stuff.

00:24:35.860 --> 00:24:39.880
And this is not for the faint of heart,
but we're trying to build a tool

00:24:39.880 --> 00:24:44.550
set with literally hundreds of
tools that look and feel identical.

00:24:45.400 --> 00:24:47.260
On the bottom end,
we provide data in through

00:24:47.260 --> 00:24:48.340
the service providers.

00:24:48.530 --> 00:24:50.630
That's how that course
information comes in.

00:24:50.890 --> 00:24:53.640
We provide the role information,
the course information,

00:24:53.640 --> 00:24:54.690
and the user information.

00:24:54.690 --> 00:25:00.770
We have a number of user directory
capabilities in our 2.0 release.

00:25:01.030 --> 00:25:03.090
LDAP, JLDAP, Kerberos.

00:25:03.480 --> 00:25:05.020
on an IMS enterprise.

00:25:05.030 --> 00:25:08.800
And so we plug in all kinds of
information from below because

00:25:08.920 --> 00:25:12.200
we basically demand that no
one mess with our tables.

00:25:12.210 --> 00:25:14.200
These tables are supposed
to be impenetrable.

00:25:14.200 --> 00:25:17.390
So if you want to plug in information,
we've got an API.

00:25:17.390 --> 00:25:21.330
You feed the information is,
then I can change this and do performance

00:25:21.330 --> 00:25:25.250
tuning to the extent I need to here,
whereas I don't have the local code

00:25:25.250 --> 00:25:27.710
that's in the loop for lots of queries.

00:25:27.740 --> 00:25:29.880
So the plugins don't
replace the persistence.

00:25:29.900 --> 00:25:32.560
They actually populate the
information as necessary.

00:25:33.430 --> 00:25:36.360
OKI is a founding partner
of the Sakai project.

00:25:36.400 --> 00:25:38.870
And OKI in many ways has
been the inspiration for much

00:25:38.870 --> 00:25:42.130
of the Sakai architecture,
the service-oriented architecture,

00:25:42.130 --> 00:25:44.770
the naming of the APIs,
the naming of the objects.

00:25:44.830 --> 00:25:48.690
But it's important to people to
understand that Sakai is in the

00:25:48.690 --> 00:25:52.760
business of writing a piece of
software that just works in Java and

00:25:52.760 --> 00:25:55.190
runs fast and is convenient to use.

00:25:55.190 --> 00:25:58.330
OKI is in the process of writing
standards that work in lots and

00:25:58.330 --> 00:26:00.260
lots and lots and lots of languages.

00:26:00.260 --> 00:26:02.270
And Geoff will talk more about that.

00:26:02.320 --> 00:26:03.370
So Sakai, we're working on.

00:26:03.380 --> 00:26:06.020
We're writing software that's
heavily influenced and makes

00:26:06.020 --> 00:26:09.160
use of OKI where appropriate,
whereas OKI is building something

00:26:09.160 --> 00:26:11.220
way beyond what Sakai is building.

00:26:11.250 --> 00:26:18.270
And that is interoperability APIs that
work well beyond the Java environment.

00:26:19.190 --> 00:26:22.370
One of the things that we've done is,
in a way, we sort of have scared

00:26:22.370 --> 00:26:25.620
Blackboard and WebCT,
and they wanted to work with us.

00:26:25.740 --> 00:26:27.390
And we said,
are you going to take our software

00:26:27.410 --> 00:26:28.610
and sell services around it?

00:26:28.820 --> 00:26:30.140
And they go, no.

00:26:30.140 --> 00:26:33.440
And so they said,
we'd like to work with you.

00:26:33.440 --> 00:26:34.830
And we go, OK, how can we work with you?

00:26:34.940 --> 00:26:38.140
So we made up this IMS group,
and it turns out to be really cool.

00:26:38.140 --> 00:26:42.880
And so what the IMS group ultimately
has turned into is working on a

00:26:42.890 --> 00:26:48.320
standard that is effectively a light
version of Chalkbox or PowerLynx.

00:26:48.420 --> 00:26:50.260
So if you're familiar
with WebCT or Blackboard,

00:26:50.260 --> 00:26:53.630
this is a really elegant,
elegant approach to bringing a

00:26:53.630 --> 00:26:57.780
tool in that's not physically
present on the same system.

00:26:57.810 --> 00:27:02.720
And so the idea is you have an externally
hosted application that might be content,

00:27:02.720 --> 00:27:05.260
or it might be a testing
engine or whatever.

00:27:05.270 --> 00:27:08.490
You have a learning management system,
and then you have sort

00:27:08.540 --> 00:27:09.880
of the end user browser.

00:27:09.890 --> 00:27:12.820
And the idea is inside this learning
management or collaborative environment,

00:27:12.830 --> 00:27:16.570
you have a button,
and when you push the button,

00:27:16.770 --> 00:27:19.580
There's a web service request from
the learning management system to the

00:27:19.650 --> 00:27:24.660
external application that gives session
and context and ID and password and role

00:27:24.660 --> 00:27:27.280
information to this external application.

00:27:27.280 --> 00:27:32.900
The external application returns
back some URL with magic stuff on it,

00:27:32.960 --> 00:27:35.540
and then that URL is
put into the browser,

00:27:35.540 --> 00:27:37.980
and then the user interacts with
the application for a while.

00:27:37.980 --> 00:27:40.660
And then from time to time,
based on the session information,

00:27:40.740 --> 00:27:42.750
it might do something like store a grade.

00:27:43.650 --> 00:27:46.540
And so this is pretty clever,
because it's basically using all web

00:27:46.660 --> 00:27:49.200
services here in just simple HTML,
and it's pretty easy

00:27:49.200 --> 00:27:50.270
to write these things.

00:27:50.360 --> 00:27:53.580
You can write them in PHP or
Perl or Python or anything.

00:27:53.580 --> 00:27:56.420
All kinds of tools can come
in through this mechanism.

00:27:56.420 --> 00:28:00.320
And usually you think of a
standards process has taken a very,

00:28:00.320 --> 00:28:01.500
very long time.

00:28:01.520 --> 00:28:04.040
IMS took a different approach to this.

00:28:04.040 --> 00:28:05.480
They said,
let's just write the code first

00:28:05.480 --> 00:28:06.590
and write the standard later.

00:28:06.600 --> 00:28:10.060
So I'm getting on a plane in about
two weeks to go to Sheffield,

00:28:10.150 --> 00:28:13.600
England, in Altilab,
where we'll demonstrate two tools.

00:28:13.620 --> 00:28:16.180
Working in four learning
management systems.

00:28:16.180 --> 00:28:20.320
WebCT, Blackboard, Sakai,
and Moodle will all be able to launch

00:28:20.450 --> 00:28:23.670
SAMigo and a thing called Concept Tutor
from University of Wisconsin.

00:28:23.680 --> 00:28:26.920
So this is kind of impressive,
meaning it's going to work,

00:28:27.110 --> 00:28:29.590
and then we're going to sit down
and do all the kind of fluffy stuff

00:28:29.680 --> 00:28:31.950
about writing the standard and
getting votes and stuff like that.

00:28:34.280 --> 00:28:37.020
So, in summary, I'm almost done.

00:28:37.120 --> 00:28:40.820
In summary,
if you're an educational institution,

00:28:40.900 --> 00:28:42.410
if you're a crazy one,
you should join us.

00:28:42.490 --> 00:28:43.620
You come be part of our party.

00:28:43.660 --> 00:28:48.430
But if you just aren't so crazy,
just keep us on radar, watch us.

00:28:48.430 --> 00:28:52.260
When we got 50 or 100 installations,
maybe we'll be more interesting to you.

00:28:53.640 --> 00:28:57.960
Commercial providers, companies,
if you have a widget to deploy or if you

00:28:58.030 --> 00:29:01.380
want to just simply provide services,
Sakai could create a market

00:29:01.380 --> 00:29:04.410
for you that makes plenty of
money off of our customers.

00:29:04.530 --> 00:29:08.090
And content providers,
we hope this IMS effort is going to

00:29:08.190 --> 00:29:11.510
allow us to build things that are not
particularly in learning management

00:29:11.550 --> 00:29:13.660
systems but highly value-added content.

00:29:13.740 --> 00:29:16.250
One of the people we're working
with is O'Reilly and Safari,

00:29:16.430 --> 00:29:19.990
trying to build this so we
build Safari into Blackboard,

00:29:20.180 --> 00:29:23.000
WebCT, and Sakai all at the same time.

00:29:23.390 --> 00:29:25.760
We've been working very closely
with Apple for quite some time.

00:29:25.790 --> 00:29:27.600
We all carry around laptops.

00:29:27.730 --> 00:29:31.240
I've been sort of thinking about a
commercial based on those laptops,

00:29:31.240 --> 00:29:35.680
and actually it was an early meeting
between MIT folks and Michigan folks.

00:29:35.680 --> 00:29:39.430
We're doing this Polycom,
and you look around the room and you say,

00:29:39.430 --> 00:29:43.040
all these gray-haired geeks all
have laptops that are Apples.

00:29:43.080 --> 00:29:47.050
And you say, why is it that everyone
in this room has an Apple?

00:29:47.050 --> 00:29:49.830
And that is because we all had a choice.

00:29:52.050 --> 00:29:54.780
So...

00:29:57.200 --> 00:30:00.700
So basically the development of
Sakai is effectively done on Apple's.

00:30:00.790 --> 00:30:04.420
A faster Java on the Intel hardware
would be kind of nice.

00:30:04.420 --> 00:30:07.370
We basically run our internal
collaboration server,

00:30:07.480 --> 00:30:11.170
collab.sakaiproject.org on
Apple hardware donated by Apple,

00:30:11.170 --> 00:30:12.460
powered by XServe.

00:30:13.500 --> 00:30:17.700
And basically we see potential for a
nice synergy between XServe and Sakai for

00:30:17.700 --> 00:30:22.480
small to medium sized organizations where
they don't want to build a Linux expert.

00:30:22.480 --> 00:30:25.900
They want to hit software update every
couple of weeks and they get all the

00:30:25.900 --> 00:30:29.200
patches and they get the Java and
then Sakai just keeps on running.

00:30:29.200 --> 00:30:33.050
And the fact that MySQL is there means
that almost out of the box with little

00:30:33.050 --> 00:30:36.770
or no effort you've got a Sakai server
that stays in production without a

00:30:36.770 --> 00:30:38.920
lot of effort and talent on your end.

00:30:38.960 --> 00:30:43.020
So you can go to the website
www.sakaiproject.org.

00:30:43.800 --> 00:30:47.460
There's a collab site where you can join
any of our groups and see what's going on

00:30:47.460 --> 00:30:49.940
inside Sakai at collab.sakaiproject.org.

00:30:50.000 --> 00:30:52.000
We have a couple of mailing
lists that you join there.

00:30:52.000 --> 00:30:56.210
And we're announcing
maclearningenvironments.org which is

00:30:56.290 --> 00:31:01.100
not up yet but basically it's a way for
us in this community to work together.

00:31:01.100 --> 00:31:04.200
We're waiting until our 2.0 release
comes out and then going to put a

00:31:04.200 --> 00:31:05.460
nice skin on it and bring it up.

00:31:05.650 --> 00:31:10.140
So our 2.0 release is going to come
out June 15th and so the site's up.

00:31:10.300 --> 00:31:13.500
If it's there we're probably
testing it up to the 2.0 release.

00:31:13.500 --> 00:31:16.870
You can take a look at it and
instructions will be there on how to join

00:31:16.870 --> 00:31:20.360
the groups and what groups are there etc.

00:31:20.390 --> 00:31:20.500
etc.

00:31:20.500 --> 00:31:20.500
etc.

00:31:20.500 --> 00:31:26.500
So with that I'm going to
turn it over to Jeff Merriman.

00:31:26.500 --> 00:31:27.950
We'll do questions at the very end.

00:31:35.330 --> 00:31:37.380
Thank you very much, Chuck,
and thank you for leaving.

00:31:37.380 --> 00:31:39.630
Plenty of time.

00:31:40.190 --> 00:31:41.500
Chuck's already done a very good job,
I think,

00:31:41.500 --> 00:31:47.100
of introducing you to OKI and how it's
different from a project like Sakai.

00:31:47.280 --> 00:31:50.500
Sakai is really about, as you know now,
if you didn't already,

00:31:50.500 --> 00:31:54.180
open source software,
open source CLE for higher

00:31:54.220 --> 00:31:58.700
education and other domains,
and about the community.

00:31:58.940 --> 00:32:02.650
OKI really is about open standards,
open specifications,

00:32:02.670 --> 00:32:04.830
and our concern is open systems.

00:32:04.960 --> 00:32:07.830
Sakai was, I mean,
OKI was one of the founding,

00:32:08.000 --> 00:32:11.440
was really a foundational project
from which Sakai and a number

00:32:11.440 --> 00:32:16.880
of other projects have evolved,
Sakai being one of the most important.

00:32:16.920 --> 00:32:20.190
But we are, we are,
have a different agenda,

00:32:20.290 --> 00:32:22.670
which we're going to talk about.

00:32:22.900 --> 00:32:29.840
Sakai started, really, I mean,
OKI started, really, in early 2000,

00:32:29.840 --> 00:32:34.500
when a number of institutions started
talking about how to solve some

00:32:34.580 --> 00:32:39.700
very fundamental issues about the
way that software integrates into

00:32:39.790 --> 00:32:41.500
a complex educational environment.

00:32:41.500 --> 00:32:46.530
It really started with conversations
amongst those of us at MIT and Stanford.

00:32:46.580 --> 00:32:47.500
I was at Stanford at the time,
and I'm at MIT now.

00:32:47.500 --> 00:32:52.550
Who were creating enterprise
environments and trying to sort

00:32:52.550 --> 00:32:56.500
through all the various kinds of
educational software that we wanted

00:32:56.500 --> 00:32:58.500
to run in those environments.

00:32:58.680 --> 00:33:00.500
And finding it was kind of difficult.

00:33:00.500 --> 00:33:04.100
And finding that the specifications
or interoperability standards,

00:33:04.100 --> 00:33:04.100
you know, were not as good as they
were supposed to be.

00:33:04.100 --> 00:33:08.100
And finding that the standards necessary
to do it well really didn't exist.

00:33:08.100 --> 00:33:11.340
Even the IMS Global Learning Consortium,
who, for those of you who are

00:33:11.480 --> 00:33:15.090
familiar with that organization,
Chuck's already mentioned it,

00:33:15.290 --> 00:33:22.100
IMS at the time was building and
promoting data exchange specifications.

00:33:22.100 --> 00:33:25.100
What we needed were
integration specifications.

00:33:25.100 --> 00:33:28.100
And that's what,
that's what OKI set out to do.

00:33:28.100 --> 00:33:30.640
Initially funded through
a grant from the Andrew W.

00:33:30.640 --> 00:33:33.700
Mellon Foundation,
they became interested very early on.

00:33:33.700 --> 00:33:37.700
It was an organization
that has funded Sakai.

00:33:37.700 --> 00:33:41.700
And immediately we gained a number
of educational collaborators.

00:33:41.700 --> 00:33:44.620
You can see the list on the screen.

00:33:44.870 --> 00:33:47.700
Folks who have the same vision,
the same concern.

00:33:47.700 --> 00:33:50.470
How do we take all kinds
of educational software,

00:33:50.470 --> 00:33:53.700
whether it's desktop, you know,
client-side software

00:33:53.700 --> 00:33:56.700
to web-based systems,
and get them to integrate together

00:33:56.700 --> 00:33:58.700
seamlessly in an enterprise environment.

00:33:58.850 --> 00:34:01.420
You'll see, of course,
that four of the founding partners are

00:34:01.420 --> 00:34:03.290
also the four founding institutions.

00:34:03.300 --> 00:34:07.300
The institutional partners of Sakai.

00:34:07.310 --> 00:34:10.300
And very early on we partnered with
the IMS Global Learning Consortium.

00:34:10.300 --> 00:34:12.670
We wanted to make sure the
work we were doing would be

00:34:12.670 --> 00:34:16.300
dovetailed with the work of IMS,
would help to lead that

00:34:16.380 --> 00:34:19.220
community and be informed by it.

00:34:19.310 --> 00:34:23.300
And eventually the idea is to give
the OKI specs over to the community,

00:34:23.300 --> 00:34:28.090
which we're actually starting to do now
with the IMS Global Learning Consortium.

00:34:29.200 --> 00:34:34.460
So OKI has really one
primary deliverable.

00:34:34.470 --> 00:34:37.890
The product of OKI are a set
of specifications that we call

00:34:37.890 --> 00:34:41.720
Open Service Interface Definitions,
which Chuck has already referred to,

00:34:41.720 --> 00:34:42.150
OSIDs.

00:34:43.110 --> 00:34:50.800
They really are specifications that
define how enterprise services in

00:34:50.800 --> 00:34:54.200
a service-oriented architecture
sort of paradigm can be plugged

00:34:54.200 --> 00:35:01.430
into applications for various
kinds of interoperability goals.

00:35:01.480 --> 00:35:04.480
They are interface specifications.

00:35:04.700 --> 00:35:06.980
For Java, they're bound as Java APIs.

00:35:06.980 --> 00:35:12.300
You're going to learn about what we're
doing for Objective-C in a little bit.

00:35:12.450 --> 00:35:14.840
But we are defining these abstractly.

00:35:14.840 --> 00:35:17.740
We're coming to agreements
with the community at a

00:35:17.740 --> 00:35:20.620
service-oriented architecture,
very abstract level about, you know,

00:35:20.620 --> 00:35:23.730
here's the kinds of services
that educational software needs,

00:35:23.890 --> 00:35:25.890
here's how we factor them,
and now here's how we do

00:35:25.890 --> 00:35:27.480
this in various technologies.

00:35:27.480 --> 00:35:31.500
The goals of this,
motherhood and apple pie, right?

00:35:31.500 --> 00:35:32.440
We're trying to reduce costs.

00:35:32.440 --> 00:35:37.090
We're trying to set ourselves up for the
future where we know at places like MIT,

00:35:37.090 --> 00:35:39.330
certainly, technology changes.

00:35:39.340 --> 00:35:41.940
And how do we change technology
in an education system?

00:35:41.940 --> 00:35:46.030
We're trying to create an educational
environment so that we can mitigate

00:35:46.090 --> 00:35:48.330
the change across the board,
right?

00:35:48.390 --> 00:35:52.660
How do we change out an entire
authorization infrastructure without

00:35:52.670 --> 00:35:54.440
having to touch all the apps?

00:35:54.700 --> 00:35:56.580
And that's really what
we're setting out to do,

00:35:56.580 --> 00:35:58.790
this whole plug-in notion,
which we'll talk about.

00:35:58.880 --> 00:36:01.770
We're trying to increase
opportunities for collaboration.

00:36:01.880 --> 00:36:04.820
Sakai is obviously doing
a lot in that area.

00:36:04.970 --> 00:36:08.980
But beyond Sakai,
with the commercial sector,

00:36:08.980 --> 00:36:11.540
with the open source sector,
how can we get these things to work?

00:36:11.610 --> 00:36:14.350
How can we get these things
to work well together?

00:36:14.720 --> 00:36:16.540
And really, we talk about this a lot.

00:36:16.540 --> 00:36:19.670
What we want to see for educational
software is a marketplace of software,

00:36:19.670 --> 00:36:23.420
where in the end, as an end user,
you should be able to

00:36:23.420 --> 00:36:25.350
go and choose products,
whether they're open

00:36:25.350 --> 00:36:27.540
source or off-the-shelf,
shrink-wrapped products,

00:36:27.540 --> 00:36:30.990
and know that they can run in an
environment that they really weren't

00:36:31.080 --> 00:36:33.540
necessarily initially designed for.

00:36:33.760 --> 00:36:37.390
Initially,
we released the Java API versions of

00:36:37.390 --> 00:36:41.140
the spec back in the spring of 2003.

00:36:41.140 --> 00:36:46.140
Those began to enjoy
some limited adoption.

00:36:46.150 --> 00:36:48.020
We got more adoption as
we moved to version 2,

00:36:48.140 --> 00:36:52.140
fixed a lot of things that
were wrong with version 1.

00:36:52.140 --> 00:36:54.750
And in fact,
now we're planning the version 3 release,

00:36:54.830 --> 00:36:57.140
which will probably come
out later this year.

00:36:57.140 --> 00:37:00.820
But one thing that we did announce
just today is the release of our

00:37:00.890 --> 00:37:05.140
new Objective-C bindings of the
Open Service Interface definitions,

00:37:05.660 --> 00:37:10.140
primarily, obviously,
for the Mac OS X developer community,

00:37:10.140 --> 00:37:10.740
primarily in the open source community.

00:37:10.740 --> 00:37:13.560
And we're going to be doing
that in concert with the

00:37:13.560 --> 00:37:17.740
Mac Learning Enterprise community
that's now beginning to form.

00:37:17.740 --> 00:37:20.740
And we think this is an
important thing for OKI.

00:37:20.740 --> 00:37:25.730
I'm going to turn over to Chuck Schubert,
who's going to talk more about OSIDs.

00:37:25.750 --> 00:37:27.740
Thank you very much, Jeff.

00:37:27.740 --> 00:37:29.740
I'll be back.

00:37:30.060 --> 00:37:31.740
Jeff will be back.

00:37:31.780 --> 00:37:33.670
So what's an OSID?

00:37:33.740 --> 00:37:34.740
Think API.

00:37:34.810 --> 00:37:37.550
If you think API, you're pretty close.

00:37:39.070 --> 00:37:41.820
What we're going to do in the
next few minutes is take a look

00:37:41.820 --> 00:37:46.130
at a couple of examples of the
kinds of ways you use OSIDs.

00:37:46.240 --> 00:37:50.900
And the way you use OSIDs will
be instructive on what they are.

00:37:51.000 --> 00:37:57.220
One of the first things that we're
going to look at here is the case

00:37:57.390 --> 00:38:07.990
of having clusters of compute nodes
that are available for being able to

00:38:08.330 --> 00:38:13.200
Be used by people,
students in the MIT environment.

00:38:13.610 --> 00:38:20.020
We have, at last count,
about 150 clusters at MIT.

00:38:20.140 --> 00:38:20.760
Some are small.

00:38:20.780 --> 00:38:23.040
Some are fairly large.

00:38:25.170 --> 00:38:28.330
We decided that we wanted to
attack this particular situation

00:38:28.370 --> 00:38:31.170
because there are no current...

00:38:31.480 --> 00:38:35.790
mechanisms for us to be able to make
these facilities available to students

00:38:35.860 --> 00:38:40.220
and others that are in the MIT community.

00:38:40.550 --> 00:38:45.780
So we want to be able to have a
situation where we have a client

00:38:46.600 --> 00:38:50.560
sitting with a laptop being able to
access a bunch of computers that are

00:38:50.560 --> 00:38:53.240
sitting behind some sort of wall.

00:38:53.320 --> 00:38:59.510
In this particular case,
we have a couple of things that we

00:38:59.510 --> 00:39:02.690
really wanted to try on the initial

00:39:03.260 --> 00:39:05.040
program that we put together.

00:39:05.070 --> 00:39:10.610
One of the things was that we wanted to
look at finding out who people were and

00:39:10.610 --> 00:39:15.200
look at an authentication situation,
and we wanted to find out what they could

00:39:15.200 --> 00:39:17.000
do or look at an authorization situation.

00:39:17.000 --> 00:39:20.980
We had a set of cluster
services that we wanted to put

00:39:21.150 --> 00:39:23.740
together and make available.

00:39:23.740 --> 00:39:31.480
We didn't want to bind those to
any particular back-end cluster.

00:39:31.480 --> 00:39:41.100
We have lots of Linux clusters that
run Rocks and other scheduling systems,

00:39:41.100 --> 00:39:42.170
and we have

00:39:43.340 --> 00:39:46.400
The Apple clusters that run Xgrid.

00:39:46.430 --> 00:39:48.930
And so we're really interested
in having something that's a

00:39:48.980 --> 00:39:50.560
little more general purpose.

00:39:50.780 --> 00:39:55.450
We could have chosen to write these
as a single monolithic application.

00:39:56.350 --> 00:40:01.370
What we did instead was choose OSIDs
as the way we wanted to deal with that.

00:40:01.390 --> 00:40:03.610
So we wanted to create a set of APIs.

00:40:03.660 --> 00:40:09.720
An OSID has the ability to serve as
a plug-in from the standpoint of the

00:40:09.720 --> 00:40:14.100
particular implementations of the
technologies that are underneath,

00:40:14.150 --> 00:40:17.350
and it also has the ability
to serve as an API for the

00:40:17.350 --> 00:40:19.550
applications that are using it.

00:40:19.600 --> 00:40:24.250
So it's really an abstract definition
of how these things should fit together.

00:40:24.300 --> 00:40:30.540
We chose for our particular initial
test of this an Apple cluster.

00:40:30.540 --> 00:40:36.680
We chose X509 certificates
for authentication,

00:40:36.780 --> 00:40:37.690
finding out who you are.

00:40:37.740 --> 00:40:41.170
We decided to build a small
little authorization system,

00:40:41.210 --> 00:40:46.270
and we had a scheduler that we
put behind our cluster services.

00:40:46.300 --> 00:40:50.510
We wanted to make these so that
later on we could kick in to

00:40:50.510 --> 00:40:53.340
Kerberos or some other kind of thing.

00:40:53.340 --> 00:40:57.430
For the authentication,
we wanted to be able to use our local

00:40:57.430 --> 00:41:03.900
roles database for the authorization
for what students could do,

00:41:03.900 --> 00:41:08.230
and we wanted to be able to
make things generally useful,

00:41:08.230 --> 00:41:11.300
cluster services generally useful.

00:41:11.720 --> 00:41:14.000
In that vein, we've done a demonstration.

00:41:14.000 --> 00:41:20.360
I'd like to turn over the situation
to the presentation to Geoff Hulette,

00:41:20.470 --> 00:41:24.960
who works with me at MIT,
to talk about one of our

00:41:24.960 --> 00:41:27.400
implementations of this.

00:41:28.030 --> 00:41:29.820
Hi, I'm Geoff Hulette.

00:41:29.910 --> 00:41:35.440
I'm going to show you a really quick
demo of an application that we wrote

00:41:35.770 --> 00:41:40.720
internally at MIT that uses two OSIDs,
the authentication and

00:41:40.720 --> 00:41:41.960
the authorization OSIDs.

00:41:42.000 --> 00:41:44.900
And this is just basically
just like Chuck was saying.

00:41:44.900 --> 00:41:49.300
What we were looking for here was
authentication and authorization,

00:41:49.300 --> 00:41:53.490
so who you are and what you
can do in this application.

00:41:53.500 --> 00:42:00.720
And so we basically wrote a web
application that's going to let you

00:42:00.720 --> 00:42:07.300
allocate nodes on a cluster and then
construct a Mathematica script that

00:42:07.300 --> 00:42:12.100
you then download and use to connect
Mathematica running on your desktop

00:42:12.100 --> 00:42:14.090
to the cluster on the back end.

00:42:14.100 --> 00:42:18.030
And actually, so this demo is,
at this point in the demo,

00:42:18.030 --> 00:42:22.940
we've actually already used the OSID,
so it's pretty transparent.

00:42:22.940 --> 00:42:27.030
You can see up in the corner,
this web application knows who I am.

00:42:27.030 --> 00:42:32.200
That's hitting the authentication,
the who you are part OSID.

00:42:32.340 --> 00:42:35.340
And that's using X.509.

00:42:35.340 --> 00:42:39.540
And you can see there's the table
of Mathematica nodes up there.

00:42:39.540 --> 00:42:41.770
And that's going to look
at my authorization,

00:42:41.770 --> 00:42:45.300
which is going to tell this application
how many nodes I can allocate.

00:42:45.340 --> 00:42:48.990
Now, the OSID story here is
that if we wanted to swap,

00:42:48.990 --> 00:42:52.380
we're using X.509 for authentication.

00:42:52.380 --> 00:42:56.110
And our own kind of
SQL tables for authorization.

00:42:56.180 --> 00:43:01.700
If we wanted to,
we could very easily swap out the X.509,

00:43:01.700 --> 00:43:04.930
say, for a Kerberos implementation.

00:43:05.180 --> 00:43:09.460
If you already had that implementation,
all you would have to do is just drop

00:43:09.500 --> 00:43:15.700
in that bundle into this application and
change like a line in the config file,

00:43:15.880 --> 00:43:19.180
and you would be running on
Kerberos instead of X.509.

00:43:19.180 --> 00:43:22.220
So that's a big benefit
from our perspective.

00:43:22.380 --> 00:43:26.180
So I'm just going to run
through this really quickly.

00:43:26.180 --> 00:43:30.150
At this point,
I'm going to go ahead and allocate two

00:43:30.320 --> 00:43:34.810
nodes on our cluster back in Cambridge,
Massachusetts.

00:43:38.800 --> 00:43:41.660
So you can see it's constructing
the script as we're doing this.

00:43:41.660 --> 00:43:43.180
So this is going through
the authorization.

00:43:43.180 --> 00:43:47.420
Every time I do this, it's asking,
you know, am I at my maximum, you know,

00:43:47.420 --> 00:43:51.650
we could ask questions like
where could I allocate the nodes.

00:43:51.700 --> 00:43:53.640
It's not built in because we
only have one cluster we're

00:43:53.680 --> 00:43:54.800
really dealing with here.

00:43:54.800 --> 00:43:59.610
So I have two nodes allocated now.

00:43:59.610 --> 00:44:03.970
And I'll go ahead and
download the script,

00:44:03.970 --> 00:44:03.970
Mathematica script.

00:44:10.940 --> 00:44:14.750
So I execute this.

00:44:15.300 --> 00:44:18.680
This is actually a
better Mathematica demo.

00:44:18.920 --> 00:44:22.060
This goes ahead and uses the
Mathematica parallel toolkit to connect.

00:44:22.160 --> 00:44:25.460
This is connected to our XServe cluster.

00:44:25.720 --> 00:44:28.160
And so now you're actually
running Mathematica here.

00:44:28.170 --> 00:44:30.460
We're connected to a
cluster on the back end.

00:44:30.470 --> 00:44:32.970
And I'm just going to
run a really quick demo.

00:44:33.140 --> 00:44:39.590
This is just going to factor a range
of integers in parallel on the cluster.

00:44:39.600 --> 00:44:40.770
So ta-da.

00:44:41.780 --> 00:44:47.800
And that's it.

00:44:47.800 --> 00:44:50.360
Turn it back over to Chuck.

00:44:50.630 --> 00:44:54.720
Thank you, Geoff.

00:44:55.360 --> 00:44:57.580
If we could go back to the slides,
please.

00:45:02.100 --> 00:45:07.820
So the OSID technology is, in fact,
something that is--

00:45:08.500 --> 00:45:10.630
An abstraction layer that
allows you to do the kinds of

00:45:10.660 --> 00:45:11.950
things that we've just seen.

00:45:11.950 --> 00:45:18.300
We could go beyond what we've
shown with authentication and

00:45:18.300 --> 00:45:22.390
authorization to another set,
a more complete set of

00:45:22.480 --> 00:45:24.750
APIs that we've defined.

00:45:24.760 --> 00:45:29.420
So these are the OSIDs that are
currently shipping in version 2.

00:45:29.450 --> 00:45:31.530
There are kind of two types of OSIDs.

00:45:31.670 --> 00:45:38.200
One are the common services that are
independent of an educational system.

00:45:38.200 --> 00:45:46.390
The other is the educational services.

00:45:46.410 --> 00:45:46.410
And we'll see now a

00:45:48.980 --> 00:45:53.710
As soon as I get through
describing this last thing,

00:45:53.710 --> 00:45:55.320
a demonstration of the

00:45:56.210 --> 00:45:59.520
repository API.

00:45:59.540 --> 00:46:01.640
We've moved this into
a very abstract level.

00:46:01.640 --> 00:46:09.510
We initially started out with our
definitions of the OSIDs being in Java.

00:46:10.110 --> 00:46:15.950
We had as a design goal going
through the development of the

00:46:15.950 --> 00:46:20.750
OSIDs that we would be language
independent as possible with Java.

00:46:21.760 --> 00:46:26.780
We had in mind being able to
do bindings in other languages.

00:46:26.910 --> 00:46:32.230
So in the last six to 12 months,
we have gone from having

00:46:32.620 --> 00:46:36.020
Java only to being able to
have other language bindings.

00:46:36.080 --> 00:46:42.200
We've done this by casting the OSIDs,
the abstract definitions, in XML.

00:46:42.290 --> 00:46:45.760
The XML we're calling OSIDs, there's a

00:46:46.370 --> 00:46:50.480
An XML schema to define
what an OSID looks like.

00:46:50.530 --> 00:46:56.570
And we've abstracted the language
dependent part and put that into an

00:46:56.570 --> 00:46:59.260
XSLT translation for individual things.

00:46:59.340 --> 00:47:03.430
We have translations, of course,
into Java so we can see that we can

00:47:03.430 --> 00:47:07.480
make the round trip from starting
in Java and getting back there.

00:47:07.690 --> 00:47:16.280
We've also got, in the last few days,
we've released an initial version

00:47:16.280 --> 00:47:20.040
of the Objective C language binding.

00:47:20.100 --> 00:47:22.970
We've got other language bindings
that we've been working on,

00:47:22.980 --> 00:47:26.700
and they've been very
instructive in making the exoSIDs

00:47:26.760 --> 00:47:29.480
much more general purpose.

00:47:31.670 --> 00:47:38.640
The exo-sids in Objective-C have
two kinds of things.

00:47:38.640 --> 00:47:43.770
One is the definition of the o-sids
themselves that are in a framework,

00:47:43.770 --> 00:47:47.540
an Objective-C framework
rather than a Sakai framework.

00:47:47.570 --> 00:47:52.240
And the other is that we have
individual implementations that

00:47:52.240 --> 00:47:54.380
are put in other frameworks.

00:47:54.750 --> 00:48:03.500
The major loading aspect of being
able to put a dynamic bind between

00:48:03.500 --> 00:48:09.090
the OSID and some implementation,
whether in authentication it might

00:48:09.230 --> 00:48:13.870
be X509 or Kerberos or what have you,
is through a loader.

00:48:13.940 --> 00:48:17.970
And the loader checks to make
sure that the managers of the

00:48:17.970 --> 00:48:23.530
implementation meet the definitional
managers in the XOSID definitions.

00:48:25.390 --> 00:48:30.650
We have another example of the kinds
of things that we're doing here,

00:48:30.650 --> 00:48:34.720
and that is I'm going to turn over to
Geoff to be able to talk about that.

00:48:34.800 --> 00:48:37.390
Geoff Huette: Thanks, Chuck.

00:48:39.320 --> 00:48:46.540
So you saw with the HPC demonstration,
the point there is we're trying

00:48:46.540 --> 00:48:50.100
to build the software so that
these kinds of underlying services

00:48:50.220 --> 00:48:51.790
can be plugged in and replaced.

00:48:51.880 --> 00:48:55.180
The benefit, of course,
being that as we change technologies,

00:48:55.240 --> 00:48:57.240
we can change those fairly easily.

00:48:57.240 --> 00:48:59.790
Another benefit being as we want
to share these applications across

00:48:59.890 --> 00:49:02.560
institutions that might have
different sorts of infrastructures,

00:49:02.560 --> 00:49:04.250
that should become easier as well.

00:49:04.940 --> 00:49:07.520
So really, again,
this marketplace of applications,

00:49:07.520 --> 00:49:10.830
of plug-ins,
is something we're trying to build.

00:49:10.840 --> 00:49:14.680
Chuck showed you the list of the OSIDs.

00:49:14.800 --> 00:49:18.540
One of the OSIDs that's really
getting a lot of traction right now

00:49:18.540 --> 00:49:22.880
in the industry and the open source
community is our repository OSID.

00:49:22.880 --> 00:49:26.540
And I'm going to show you a couple
demos that use that and show off some

00:49:26.540 --> 00:49:28.770
of the other features of the approach.

00:49:28.860 --> 00:49:33.980
First of all, the world of repositories,
certainly in higher education,

00:49:33.990 --> 00:49:34.710
is a very complex one.

00:49:34.830 --> 00:49:38.070
These days,
faculty and students alike want to

00:49:38.160 --> 00:49:43.050
access lots of content from lots
of different kinds of applications.

00:49:43.100 --> 00:49:47.590
So typically what we see today are
applications that are sort of bound

00:49:47.590 --> 00:49:50.400
to a particular repository of content.

00:49:50.400 --> 00:49:53.300
And with the OSID approach,
we're trying to break that.

00:49:53.320 --> 00:49:57.240
The problem with breaking that
is that it's a complex world.

00:49:57.280 --> 00:50:01.140
Imagine this poor laptop here
sitting in an environment like

00:50:01.140 --> 00:50:04.820
MIT's or Michigan's or wherever,
running a computer.

00:50:04.820 --> 00:50:10.080
And you're running an app that wants to
access content in various repositories.

00:50:10.080 --> 00:50:12.880
Well, you have repositories
that are institutional.

00:50:12.880 --> 00:50:15.330
You have digital library
systems that are institutions.

00:50:15.440 --> 00:50:18.350
We have published material that you
might be subscribed to that might be

00:50:18.350 --> 00:50:19.920
out there on the internet someplace.

00:50:20.080 --> 00:50:21.520
All kinds of things.

00:50:21.520 --> 00:50:25.290
You might even have local content,
content that you slip a DVD disc

00:50:25.300 --> 00:50:28.940
into your machine and you want
to access that from the same app.

00:50:29.630 --> 00:50:30.340
Complex world.

00:50:30.480 --> 00:50:34.140
What makes it more complex is that
there are lots of standards out there.

00:50:34.140 --> 00:50:35.510
In the repository space.

00:50:35.710 --> 00:50:36.910
There's a lot of protocol standards.

00:50:37.760 --> 00:50:40.740
Things like SRW,
the Search and Retrieve Web Service,

00:50:40.760 --> 00:50:42.880
that's being promoted by
the library community.

00:50:43.290 --> 00:50:48.600
Things like DRI, the Digital Repository
Interoperability Spec,

00:50:48.600 --> 00:50:50.640
built by IMS Global Learning Consortium.

00:50:50.640 --> 00:50:54.500
You have folks doing things with SOAP,
with other kinds of web services,

00:50:54.500 --> 00:50:57.000
some proprietary, some other.

00:50:57.140 --> 00:51:01.140
And of course there's lots of
content standards out there.

00:51:01.140 --> 00:51:03.440
Things like IMS Content Packaging,
Dublin Core, Score, and so on.

00:51:03.450 --> 00:51:06.440
SCORM, we can go on.

00:51:06.480 --> 00:51:08.290
Very complex.

00:51:08.790 --> 00:51:12.600
What we're trying to do with the OSes
is help make that world a little more

00:51:12.600 --> 00:51:17.430
palatable for the poor application
that wants to take advantage of it.

00:51:17.530 --> 00:51:19.550
I'm going to show an
app called Search Party.

00:51:19.560 --> 00:51:22.970
Search Party,
this is sort of an initial build of it.

00:51:23.020 --> 00:51:28.690
It's something being developed by the
Mac Learning Environments Project.

00:51:28.760 --> 00:51:33.300
Brian Bias, one of the developers who's
really taken the lead on this,

00:51:33.500 --> 00:51:34.720
is working with that.

00:51:34.760 --> 00:51:38.890
And Search Party is one of the
first Cocoa apps out there that

00:51:38.890 --> 00:51:40.760
actually takes advantage of the OSes.

00:51:40.790 --> 00:51:43.650
Now it's taking advantage of Java,
the Java versions yet.

00:51:43.790 --> 00:51:48.760
We haven't quite gotten to the point
where we can use the Objective C.

00:51:48.960 --> 00:51:51.120
But this diagram,
similar to the ones that

00:51:51.120 --> 00:51:53.760
Chuck was showing earlier,
sort of gives an idea of what's going on.

00:51:53.760 --> 00:51:57.760
Here are, here's Search Party running
on the machine.

00:51:57.770 --> 00:52:00.190
And here are a whole bunch
of repositories that it

00:52:00.300 --> 00:52:01.760
might want to get access to.

00:52:01.760 --> 00:52:04.760
Search Party allows you to do federated
search across multiple resources.

00:52:04.760 --> 00:52:07.350
And it's a great way to get access to
multiple repositories and bring back the

00:52:07.370 --> 00:52:08.760
content into your Mac OS X environment.

00:52:08.760 --> 00:52:11.760
Well, gosh, there's lots of those things.

00:52:11.760 --> 00:52:15.760
Through the plug-in model and the
ability through the OSes to actually

00:52:15.760 --> 00:52:20.760
load multiple implementations
into a single app at any one time,

00:52:20.820 --> 00:52:23.760
we've helped make this
easier for Search Party.

00:52:23.760 --> 00:52:26.760
So in this diagram you see
there's a plug-in I call SRW.

00:52:26.760 --> 00:52:29.760
That's actually using the Search and
Retrieve Web Service standard,

00:52:29.760 --> 00:52:32.360
which allows us actually to plug
into a number of repositories

00:52:32.360 --> 00:52:33.760
that support that standard.

00:52:33.760 --> 00:52:35.720
And we can do that all do.

00:52:35.820 --> 00:52:39.660
There's a product called
Harvest Road Hive.

00:52:39.920 --> 00:52:42.740
Harvest Road, you saw,
was one of the Sakai partners.

00:52:42.820 --> 00:52:45.750
The Hive is a repository product.

00:52:45.780 --> 00:52:47.760
Harvest Road's a company in Perth,
Australia.

00:52:47.760 --> 00:52:48.760
It's a real nice product.

00:52:48.760 --> 00:52:50.760
And we wanted to plug that in.

00:52:50.760 --> 00:52:54.760
In fact, Mac education,
the Mac learning environment folks

00:52:54.760 --> 00:52:57.760
were starting to talk to Harvest
Road as they did Search Party.

00:52:58.040 --> 00:52:59.760
And there's others.

00:52:59.970 --> 00:53:02.760
There's the Fedora
Digital Repository System,

00:53:02.760 --> 00:53:02.760
which is a library system.

00:53:02.760 --> 00:53:04.760
Open source that's been created.

00:53:04.760 --> 00:53:08.500
There's a company in Italy called
Junty Interactive Labs that has another

00:53:08.790 --> 00:53:10.760
learning object repository product.

00:53:10.910 --> 00:53:13.690
And the idea was, you know,
if we could start building

00:53:13.800 --> 00:53:16.190
plug-ins for these things,
we could make the life of an app

00:53:16.280 --> 00:53:17.760
like Search Party much easier.

00:53:17.760 --> 00:53:21.760
And really put the hands of
integration into the end user.

00:53:21.760 --> 00:53:22.680
I just want to be able
to get the plug-in,

00:53:22.790 --> 00:53:24.910
install it like I'd
install a printer driver,

00:53:25.220 --> 00:53:27.060
and just have it work.

00:53:27.370 --> 00:53:31.370
The story gets more interesting
as you bring more apps into play.

00:53:31.390 --> 00:53:35.140
There's a tool that will not
be shipping with Sakai 2.0,

00:53:35.140 --> 00:53:41.430
but we hope to ship with something like
Sakai 2.1 or a fairly immediate release.

00:53:41.520 --> 00:53:43.510
A tool currently codenamed Twin Peaks.

00:53:43.510 --> 00:53:45.930
I don't know if it will
be called that in the end.

00:53:45.930 --> 00:53:48.420
But Twin Peaks is really
the same kind of thing,

00:53:48.520 --> 00:53:49.400
but for Sakai.

00:53:49.400 --> 00:53:52.400
It's a tool that allows you to
search across various repositories

00:53:52.400 --> 00:53:55.140
of content and bring those
into your Sakai environment.

00:53:55.640 --> 00:53:58.780
What we can do with the O-sids is

00:53:59.260 --> 00:54:02.050
As a system administrator,
you can grab the same plug-in,

00:54:02.100 --> 00:54:06.360
the same basic jar,
and bring it into the Sakai

00:54:06.360 --> 00:54:09.260
environment to drive Twin Peaks,
the same one that you'd use to

00:54:09.260 --> 00:54:11.820
bring into a Mac OS X environment
to drive Search Party.

00:54:11.820 --> 00:54:15.030
So we're really trying to, with the OSIS,
to have a model where we can

00:54:15.030 --> 00:54:17.780
have that kind of choice and
that kind of flexibility.

00:54:17.780 --> 00:54:22.760
If we go back to Demo 3...

00:54:28.640 --> 00:54:29.750
Demo 3.

00:54:29.800 --> 00:54:30.990
Thank you very much.

00:54:31.160 --> 00:54:36.680
First thing I'm going
to show is Search Party.

00:54:36.720 --> 00:54:38.210
This is it.

00:54:38.290 --> 00:54:40.810
Like I say,
it's sort of an early release.

00:54:40.940 --> 00:54:43.980
It's pretty nice as it is,
but there's a lot of ideas we

00:54:43.980 --> 00:54:46.240
have to make it even better.

00:54:46.240 --> 00:54:53.510
It's a slick little Cocoa app that
allows you to load in repositories.

00:54:53.680 --> 00:54:55.750
There's sort of four loaded in here.

00:54:56.390 --> 00:55:00.740
And to basically search
across them to find content.

00:55:00.740 --> 00:55:03.680
The four we have,
two actually exist at MIT,

00:55:03.680 --> 00:55:08.970
part of the Visualizing Cultures project,
which is really a growing collection

00:55:08.970 --> 00:55:16.440
of art images from mid-1800s and
late-1800s Japan for teaching history.

00:55:16.440 --> 00:55:21.180
The other two are plug-ins that we
got from Harvest Road themselves,

00:55:21.180 --> 00:55:24.270
hitting against two demo
sites actually in Perth,

00:55:24.270 --> 00:55:28.630
Australia,
that we hope are running right now.

00:55:28.850 --> 00:55:30.210
So we can do the demo.

00:55:30.410 --> 00:55:33.920
The thing about the Harvest
Road sites is they kind of gave us

00:55:33.920 --> 00:55:36.360
two sites with identical content.

00:55:36.360 --> 00:55:39.040
One nice thing I can do
here is I can disable one.

00:55:39.060 --> 00:55:42.110
Otherwise, we'll do the search,
and we'll get multiple

00:55:42.260 --> 00:55:43.760
versions of the stuff.

00:55:43.810 --> 00:55:47.180
So I'm just going to
search across these three,

00:55:47.220 --> 00:55:51.030
and we'll try something.

00:55:51.400 --> 00:59:32.100
[Transcript missing]

00:59:33.200 --> 00:59:35.400
I don't think it did yet, but we'll see.

00:59:35.400 --> 00:59:39.360
I guess I downloaded a lot of
these Maverick images already.

00:59:39.360 --> 00:59:41.500
Oh well, maybe it did show up,
I just didn't notice.

00:59:41.540 --> 00:59:44.650
But I can click on one here,
I can show it in the

00:59:44.650 --> 00:59:45.700
finder at this point.

00:59:45.740 --> 00:59:50.990
You can imagine this app being able to
send these things off to the various

00:59:51.260 --> 00:59:56.730
iLife and iWork type apps that might
want to have access to this content.

00:59:56.780 --> 00:59:59.650
There's a little helicopter image.

00:59:59.650 --> 01:00:01.480
Let's see if this is, I thought I had...

01:00:01.840 --> 01:00:03.510
Huh,
I thought I had three in there already.

01:00:03.580 --> 01:00:04.460
But anyway, you get the idea.

01:00:04.460 --> 01:00:05.620
So SearchPro is a nice little app.

01:00:06.240 --> 01:00:11.930
Scott can probably talk a little
more about the Mac learning

01:00:11.930 --> 01:00:16.200
environments plans for this app,
but they want to certainly

01:00:16.200 --> 01:00:18.450
move it forward under an open
source community through the

01:00:18.540 --> 01:00:20.000
Mac learning environment community.

01:00:20.890 --> 01:00:25.710
I'm going to show one more demonstration
that ties this session together,

01:00:25.710 --> 01:00:26.400
I hope.

01:00:26.450 --> 01:00:28.300
You should recognize this.

01:00:28.380 --> 01:00:32.960
It's actually,
I'm running Sakai version 1.5.1 here.

01:00:32.960 --> 01:00:35.310
I didn't have access to the cool new one.

01:00:35.320 --> 01:00:39.640
There's a project that I mentioned
earlier called Twin Peaks.

01:00:39.640 --> 01:00:42.600
It was developed at Indiana University.

01:00:42.600 --> 01:00:47.330
And it's a little UI widget that
allows you to go in and populate

01:00:47.330 --> 01:00:50.800
various things in Sakai with
content from an external source.

01:00:50.800 --> 01:00:52.200
And I have it running.

01:00:52.200 --> 01:00:56.400
I've created a little Sakai site here,
a little OKI 101 worksite

01:00:56.400 --> 01:00:58.060
with an announcements tool.

01:00:58.060 --> 01:01:00.120
I could have added more tools.

01:01:00.120 --> 01:01:02.540
I just added an announcements tool to it.

01:01:03.060 --> 01:01:06.900
And I can, I have one announcement
in here called test.

01:01:06.980 --> 01:01:10.820
I can add a new announcement
called another test.

01:01:10.820 --> 01:01:16.820
And I can write some
things like this is a test.

01:01:16.820 --> 01:01:19.490
And let's say I wanted this
announcement to include content

01:01:19.490 --> 01:01:20.820
from an external source.

01:01:20.820 --> 01:01:21.100
And I can write some
things like this is a test.

01:01:21.100 --> 01:01:21.480
And let's say I wanted this
announcement to include content

01:01:21.480 --> 01:01:21.820
from an external source.

01:01:21.820 --> 01:01:22.480
And I can write some
things like this is a test.

01:01:22.480 --> 01:01:23.320
And let's say I wanted this
announcement to include content

01:01:23.320 --> 01:01:23.820
from an external source.

01:01:23.820 --> 01:01:26.600
Well, what Indiana did with Twin Peaks is
they created a little widget here,

01:01:26.600 --> 01:01:27.810
a little icon I can click on.

01:01:27.880 --> 01:01:31.340
Well, what Indiana did with Twin Peaks is
they created a little widget here,

01:01:31.370 --> 01:01:32.740
a little icon I can click on.

01:01:32.820 --> 01:01:35.080
But basically it brings up,
and we need to pretty

01:01:35.160 --> 01:01:37.810
this up a little bit,
but it brings up a search window.

01:01:37.820 --> 01:01:40.180
And it allows me to choose
from a number of sources,

01:01:40.180 --> 01:01:42.200
which you may not be
able to read in the back,

01:01:42.200 --> 01:01:45.170
but they include some of the ones
we've already been looking at,

01:01:45.170 --> 01:01:46.700
like the Harvest Road Hive.

01:01:47.820 --> 01:01:49.620
So I can use that, and I can do a search.

01:01:49.620 --> 01:01:52.760
Let's see,
what did I do the search for earlier?

01:01:52.820 --> 01:01:54.230
WAVE.

01:01:56.380 --> 01:01:58.730
and let this go.

01:01:58.740 --> 01:02:03.370
And again, the point here,
this is the exact same plug-in that

01:02:04.050 --> 01:02:11.180
resulted in that Harvest Road repository
choice showing up in that menu item.

01:02:11.180 --> 01:02:18.100
And that this Twin Peaks tool is now
going and somewhat slowly doing a search,

01:02:18.200 --> 01:02:20.720
again, to the same Harvest
Road repository in Perth,

01:02:20.720 --> 01:02:21.460
Australia.

01:02:21.460 --> 01:02:25.860
And if we're lucky,
it'll come up pretty soon.

01:02:25.940 --> 01:02:28.000
The network's been a
little slow around here,

01:02:28.000 --> 01:02:30.850
and who knows what's
happening in Australia.

01:02:31.220 --> 01:02:34.120
And this brings up a nice little,
what we call,

01:02:34.120 --> 01:02:37.330
lightbox view that allows you
to sort of choose from thumbnail

01:02:37.330 --> 01:02:40.010
images of these various things.

01:02:40.020 --> 01:02:42.200
And I think this might have
been the one I got earlier.

01:02:42.200 --> 01:02:53.490
I can add this content now,
and I can go and I can post.

01:02:55.320 --> 01:03:00.180
This announcement, and when I look at it,
it brings it up and it says,

01:03:00.200 --> 01:03:01.180
here's the message, this is a test.

01:03:01.180 --> 01:03:04.470
You can click here to get
to the Mavericks image,

01:03:04.470 --> 01:03:05.840
and it just works.

01:03:05.950 --> 01:03:07.790
That's the exact same
mechanism going on the back,

01:03:07.830 --> 01:03:09.870
using OSI interface,
talking to the repository.

01:03:09.900 --> 01:03:12.560
So the plug-in model we
think is really powerful,

01:03:12.560 --> 01:03:15.420
and what we're showing here
is that it's working in two

01:03:15.420 --> 01:03:17.210
very different kinds of apps.

01:03:17.380 --> 01:03:20.700
One's a Cocoa app,
happens to be talking to Java VM,

01:03:20.700 --> 01:03:22.630
but it's a Cocoa app running on a client.

01:03:22.710 --> 01:03:26.110
One is a web app running
off a web server.

01:03:26.120 --> 01:03:27.760
So there you go.

01:03:27.820 --> 01:03:33.840
Let's go back to the slides,
and we'll finish up.

01:03:38.210 --> 01:03:41.230
So, let's quickly talk about
some of the adoption issues.

01:03:41.250 --> 01:03:44.420
First of all, we think the OSIDs,
as you can imagine,

01:03:44.420 --> 01:03:48.720
have a lot of value for developers,
both commercial and non-commercial.

01:03:48.720 --> 01:03:53.550
They really begin to define some critical
pieces of service-oriented architecture

01:03:53.550 --> 01:03:58.670
specifications that allow for these kinds
of interoperability that you're seeing.

01:03:58.680 --> 01:04:01.570
We're trying to help
developers factor products.

01:04:01.690 --> 01:04:05.460
I mean, Sakai is a really good example of
a system that's factoring itself

01:04:05.570 --> 01:04:07.220
pretty much along the OKI model.

01:04:08.100 --> 01:04:10.810
To prepare itself for this
kind of enterprise integration,

01:04:10.810 --> 01:04:12.940
integration with other kinds of services.

01:04:12.940 --> 01:04:16.720
It's important, we think,
especially for the vendor community,

01:04:16.720 --> 01:04:20.940
and even for the open source community,
to begin to think about how

01:04:21.040 --> 01:04:25.740
the products are going to fit
into existing infrastructure,

01:04:25.870 --> 01:04:29.240
existing services that
customers might have.

01:04:29.930 --> 01:04:34.240
Obviously,
a lot about integration going on here.

01:04:34.240 --> 01:04:37.740
We're trying to encourage an environment.

01:04:37.880 --> 01:04:39.360
Through this marketplace
we're talking about,

01:04:39.360 --> 01:04:40.820
to reduce the coupling
between components.

01:04:40.880 --> 01:04:44.000
So, again, if you can go out and buy a
product off the shelf and bring it

01:04:44.000 --> 01:04:46.380
into your enterprise environment,
just have it work, right?

01:04:46.480 --> 01:04:48.260
That's what we want.

01:04:48.300 --> 01:04:50.540
And, of course, code reuse.

01:04:50.760 --> 01:04:51.490
Chuck talked about it.

01:04:51.620 --> 01:04:54.160
It's really important to us,
especially with small development teams,

01:04:54.270 --> 01:04:56.160
that we can reuse as much
of this stuff as possible.

01:04:56.160 --> 01:04:59.460
And these specs help
us to do some of that.

01:04:59.640 --> 01:05:01.680
For institutions,
if you're from an institution here,

01:05:01.680 --> 01:05:03.730
you know,
a lot of people are thinking about

01:05:03.730 --> 01:05:05.120
what is the e-learning infrastructure.

01:05:05.120 --> 01:05:07.030
Typically,
you start out with a set of apps

01:05:07.030 --> 01:05:08.780
that tend to be your infrastructure.

01:05:08.900 --> 01:05:11.190
At places like Michigan and
MIT and Stanford,

01:05:11.270 --> 01:05:13.800
we've been building
infrastructure for years.

01:05:13.800 --> 01:05:16.570
Not four years, but for many years.

01:05:16.570 --> 01:05:20.400
And, you know, we've learned a lot.

01:05:20.580 --> 01:05:24.030
And the OSITs help us to define
a service-oriented approach

01:05:24.030 --> 01:05:25.770
to these kinds of things.

01:05:27.270 --> 01:05:30.430
We're finding it's really easy with
this model to begin to scope projects.

01:05:30.490 --> 01:05:32.210
Who are you going to
put on various tasks?

01:05:32.210 --> 01:05:33.580
Chuck mentioned this as well.

01:05:33.580 --> 01:05:35.880
You need to write an implementation
against enterprise infrastructure.

01:05:35.960 --> 01:05:39.660
You need to write a tool, right?

01:05:39.660 --> 01:05:41.700
What are the pieces of those things?

01:05:41.700 --> 01:05:44.360
What can the tool developer just
not have to worry about because it's

01:05:44.600 --> 01:05:46.050
being taken care of by infrastructure?

01:05:46.130 --> 01:05:47.680
Call the OSIT and it just works.

01:05:47.760 --> 01:05:52.110
We've already seen some people
generating RFPs based on this.

01:05:52.420 --> 01:05:56.340
You know, you can really become much
more particular with vendors.

01:05:56.820 --> 01:05:59.200
You know,
what is it your product needs to support?

01:05:59.200 --> 01:06:02.080
Why don't you support this OSIT if you're
going to integrate in our environment?

01:06:02.090 --> 01:06:03.300
That kind of thing.

01:06:03.300 --> 01:06:06.520
And, obviously,
one of the original things, you know,

01:06:06.520 --> 01:06:09.450
how do you open a path for multiple
products in the environment?

01:06:09.460 --> 01:06:14.960
LMSs and collaborative learning
environments are great,

01:06:15.000 --> 01:06:17.480
but they're one piece
of a larger picture.

01:06:17.480 --> 01:06:20.100
We want to bring all kinds of apps
into our educational environments

01:06:20.200 --> 01:06:23.950
that just work together and to
serve various kinds of purposes.

01:06:24.200 --> 01:08:20.200
[Transcript missing]