WEBVTT

00:00:11.050 --> 00:00:13.620
Good afternoon and
welcome to session 134,

00:00:13.730 --> 00:00:15.240
Advanced Dashboard Widgets.

00:00:15.290 --> 00:00:16.990
I have one favor to ask
of you before we start.

00:00:17.130 --> 00:00:20.210
If you have seats in between
you and you're in the middle,

00:00:20.350 --> 00:00:23.420
try to move in and leave aisle seats
open so people who are coming in,

00:00:23.420 --> 00:00:25.290
there's already people
sitting out along the side,

00:00:25.290 --> 00:00:26.530
so we can get everybody a seat.

00:00:26.540 --> 00:00:29.490
It's just a nice thing to do.

00:00:30.200 --> 00:00:31.340
My name is Christian Wagner.

00:00:31.420 --> 00:00:33.790
I'm a technical writer
with TechPubs at Apple.

00:00:33.830 --> 00:00:36.240
I've been involved with the Dashboard
project for a couple of months now.

00:00:36.240 --> 00:00:38.030
I've been writing some
of the documentation.

00:00:38.170 --> 00:00:41.150
We're here to tell you today about
some of the advanced technologies that

00:00:41.150 --> 00:00:44.200
you can integrate into your Widget
to help take it into the next level,

00:00:44.200 --> 00:00:47.560
to help really make it more interactive,
and to leverage all the different

00:00:47.640 --> 00:00:51.370
technologies that you might
ever want to put into a Widget.

00:00:51.800 --> 00:00:54.540
Really quick,
at our sessions yesterday we covered

00:00:54.540 --> 00:00:58.600
how to make the basic Widget,
so just info, plist, keys,

00:00:58.600 --> 00:01:02.030
and what's required in a file, images,
and things to that effect.

00:01:02.100 --> 00:01:05.870
We also talked about some design tips,
how to localize your Widget,

00:01:05.880 --> 00:01:08.500
working with Widget
backs and preferences,

00:01:08.500 --> 00:01:11.440
and finally some of the Widget
events that you might want to

00:01:11.450 --> 00:01:13.240
take advantage of in your Widget.

00:01:13.290 --> 00:01:15.920
Beyond that, or actually today,
we're going to assemble a Widget

00:01:15.920 --> 00:01:18.600
from scratch right in the beginning
just in case you weren't there,

00:01:18.630 --> 00:01:20.430
so we'll try to bring you up to speed.

00:01:21.650 --> 00:01:25.400
And today we're going to focus on
a few more higher level functions:

00:01:25.520 --> 00:01:30.060
command line utilities and integrating
them in scripts into your Widget,

00:01:30.160 --> 00:01:33.120
HTTP requests, network access,
pulling data from the Internet.

00:01:33.120 --> 00:01:37.320
After that we'll be going into
Widget plugins and WebKit plugins,

00:01:37.320 --> 00:01:39.510
and finally we'll round it out
with some useful little bits,

00:01:39.510 --> 00:01:42.370
tidbits that you might want to be aware
of when you're making your Widget.

00:01:42.520 --> 00:01:46.560
Just little niceties and other
things you might want to use.

00:01:46.660 --> 00:01:50.870
So, one thing which I want to dive into
before we talk about anything else,

00:01:50.890 --> 00:01:52.920
and it's this idea of access keys.

00:01:52.920 --> 00:01:57.220
There are these info-plist keys that
you need to set if you're going to

00:01:57.220 --> 00:02:01.760
do accessing networking resources,
if you're going to use a system utility,

00:02:01.800 --> 00:02:03.180
if you're going to
wind up using a plugin.

00:02:03.180 --> 00:02:05.340
And you need to set these,
because a lot of the things

00:02:05.340 --> 00:02:08.080
that are in this presentation
don't work unless you use these.

00:02:08.080 --> 00:02:10.400
And I'll point out, when we go to demo,
where you can find this

00:02:10.400 --> 00:02:11.480
in the documentation.

00:02:11.480 --> 00:02:13.700
So, on to our first topic.

00:02:13.740 --> 00:02:15.320
We're going to talk about
command line access.

00:02:16.280 --> 00:02:18.380
And the first thing you should
be aware of is that you need to

00:02:18.380 --> 00:02:22.340
set a key in your info-plist,
and that's the allow system key.

00:02:22.340 --> 00:02:24.080
And it should be a Boolean value.

00:02:24.080 --> 00:02:26.100
You should set it to true, or to yes.

00:02:26.100 --> 00:02:29.740
You use widget.system,
and that lets you run

00:02:29.740 --> 00:02:31.860
a command line utility.

00:02:31.860 --> 00:02:34.080
There's two parameters at play here.

00:02:34.080 --> 00:02:35.760
The first one is the command.

00:02:35.760 --> 00:02:39.240
So, whatever command you're going to run,
whether it be a script or a

00:02:39.400 --> 00:02:41.100
full Unix command line utility.

00:02:41.100 --> 00:02:44.050
And you should definitely
specify the entire path to that.

00:02:44.100 --> 00:02:46.320
Not just the command name itself,
but you should specify

00:02:46.320 --> 00:02:47.170
if it's in user bin.

00:02:47.300 --> 00:02:49.280
A lot of times it won't
work unless you do that.

00:02:49.280 --> 00:02:53.410
And then the second thing,
which you might or might not specify,

00:02:53.410 --> 00:02:54.280
is a handler.

00:02:54.280 --> 00:02:57.550
And this is what toggles the two
modes that widget.system runs in.

00:02:57.560 --> 00:03:00.680
It runs in either synchronous
or asynchronous mode.

00:03:00.680 --> 00:03:03.010
So synchronous means that it's
going to block your widget,

00:03:03.180 --> 00:03:04.600
and that's the first thing
we're going to talk about today.

00:03:04.720 --> 00:03:08.560
And you use this mode by passing
the handler a value of no.

00:03:08.560 --> 00:03:12.140
So your entire widget will block
while the command executes,

00:03:12.140 --> 00:03:14.180
and will only continue once it's done.

00:03:14.180 --> 00:03:15.640
And there's three properties
that you can use to do this.

00:03:15.750 --> 00:03:16.640
There's three properties available here.

00:03:16.640 --> 00:03:18.640
So I should backtrack really quick.

00:03:18.640 --> 00:03:23.060
When you call widget.system,
you can either just append one of

00:03:23.070 --> 00:03:26.560
these properties to the call itself,
and then you'll get the output string,

00:03:26.560 --> 00:03:28.120
which is what's written
to standard output,

00:03:28.120 --> 00:03:30.760
the error string, which is what's written
to standard error,

00:03:30.760 --> 00:03:33.100
or you'll get the status,
which is the status code

00:03:33.100 --> 00:03:34.180
the command ends with.

00:03:34.280 --> 00:03:38.720
And you use this by either, like I said,
just appending that property

00:03:38.780 --> 00:03:42.390
to the end of the call itself,
or you call the command and

00:03:42.400 --> 00:03:45.320
assign it to a variable,
and then on that variable,

00:03:45.410 --> 00:03:48.720
you ask for the output string,
or you ask for the error string,

00:03:48.720 --> 00:03:49.860
the status, anything like that.

00:03:50.010 --> 00:03:51.320
So we're going to go to demo here.

00:03:51.320 --> 00:03:52.280
If I could have demo one, please.

00:03:56.040 --> 00:03:59.170
and what do you know,
there's a documentation update available.

00:03:59.300 --> 00:04:02.080
So I'm not going to do it now,
but you should always have

00:04:02.080 --> 00:04:03.480
the latest documentation.

00:04:05.210 --> 00:04:06.280
So we're going to make a Widget.

00:04:06.280 --> 00:04:09.800
It's very simple and it's a slightly
modified of Widget versus the one

00:04:09.800 --> 00:04:11.290
we saw in the overview yesterday.

00:04:11.380 --> 00:04:14.200
It's called Uptime and all it does
is it calls the Uptime command.

00:04:14.200 --> 00:04:16.180
It's pretty straightforward,
pretty simple.

00:04:16.190 --> 00:04:19.400
We're going to show you how to make it
and we're going to make it from scratch.

00:04:22.760 --> 00:04:24.860
We're literally just going to make
a new folder here on the desktop

00:04:24.860 --> 00:04:28.380
and we're going to call it "uptime".
And the first things I'm just going

00:04:28.410 --> 00:04:32.700
to drop in here right away are
the images required by a Widget.

00:04:32.700 --> 00:04:35.810
For review, there's two images
required in every Widget.

00:04:35.810 --> 00:04:38.810
There's "default.ping" which is
the background pattern used by

00:04:38.900 --> 00:04:40.700
the Widget while it's loading.

00:04:40.700 --> 00:04:43.690
And then we're also going to use it as
the background pattern for our Widget.

00:04:43.690 --> 00:04:45.690
You don't have to do this, but we do it.

00:04:45.700 --> 00:04:49.510
And then there's also just an icon,
it's generic in this case,

00:04:49.510 --> 00:04:50.700
just a simple icon.

00:04:50.700 --> 00:04:53.050
And that's used in the Widget
bar to represent your Widget,

00:04:53.050 --> 00:04:53.690
by the way.

00:04:53.700 --> 00:04:59.380
Sorry, I didn't quite hear that.

00:05:04.400 --> 00:05:06.130
Well, let's turn on Zoom then.

00:05:06.140 --> 00:05:09.270
So I can show you those.

00:05:09.830 --> 00:05:12.800
Nope, not VoiceOver, Zoom, Command,
Option.

00:05:12.950 --> 00:05:14.920
Okay, so let's do that.

00:05:16.100 --> 00:05:18.250
Here's the first one.

00:05:18.250 --> 00:05:19.100
Zoom in on that.

00:05:19.100 --> 00:05:21.100
And again, this is a PNG.

00:05:21.100 --> 00:05:22.150
It has to be a PNG.

00:05:22.270 --> 00:05:25.100
It's the only file format that
Dashboard uses for these things.

00:05:25.100 --> 00:05:28.540
And the nice thing about using PNG is
you get a nice modern graphic that is

00:05:28.630 --> 00:05:32.100
16-bit support and it supports alpha,
transparency.

00:05:32.100 --> 00:05:33.980
It's just a great format to work with.

00:05:34.110 --> 00:05:36.890
And then our icon.png

00:05:38.930 --> 00:05:40.790
Nothing too special
going on there either.

00:05:40.850 --> 00:05:44.200
It's just a 75 by 75 pixel image.

00:05:44.290 --> 00:05:46.830
And again, these must be named,
let's zoom out again,

00:05:46.830 --> 00:05:50.030
must be named default and
icon.png respectively in order

00:05:50.030 --> 00:05:51.910
for Dashboard to find them.

00:05:52.080 --> 00:05:53.600
So now that we have the
basics in place here,

00:05:53.650 --> 00:05:56.470
let's go into the actual
code that we need to write.

00:05:56.590 --> 00:05:57.360
There's not much.

00:05:57.490 --> 00:05:59.660
So just so you know,
the whole time I'm going to be using

00:05:59.660 --> 00:06:02.230
this program called Demo Monkey,
and this lets me write code

00:06:02.300 --> 00:06:04.030
without having to write code.

00:06:04.110 --> 00:06:07.070
I'm just going to be dragging and
dropping all the code that I need here,

00:06:07.080 --> 00:06:09.140
because watching me
type is pretty boring.

00:06:09.390 --> 00:06:12.830
But what I'm going to do here
is I'm going to go into Xcode,

00:06:12.830 --> 00:06:15.170
and I'm going to make an HTML file.

00:06:15.170 --> 00:06:20.300
And all it's going to have in
it is just the usual HTML tags,

00:06:20.300 --> 00:06:23.320
opening and closing HTML tags.

00:06:23.320 --> 00:06:25.520
It's going to have a body,
and in the body we're going

00:06:25.520 --> 00:06:26.800
to have a background image.

00:06:26.800 --> 00:06:29.220
In this case,
we're just going to use the default.png.

00:06:29.220 --> 00:06:32.420
And then we're going to have some text,
some placeholder text that

00:06:32.420 --> 00:06:35.880
lets our users know that,
hey, we're going to retrieve the uptime.

00:06:35.910 --> 00:06:40.070
But this is a placeholder that's first
showed while the... Retrieval happens.

00:06:42.740 --> 00:06:43.720
So we're going to save this.

00:06:43.740 --> 00:06:44.460
Actually, hold on.

00:06:44.460 --> 00:06:46.130
I'll do it with Command-S.

00:06:46.370 --> 00:06:48.570
And I'm going to save it on
my desktop inside the Widget.

00:06:48.740 --> 00:06:52.740
And I'm just going to
call this one uptime.html.

00:06:53.020 --> 00:06:54.950
And that's pretty much it for now.

00:06:54.950 --> 00:06:56.760
We're also going to
use a CSS file in here.

00:06:56.760 --> 00:07:00.150
And what goes on in here
isn't too terribly important.

00:07:00.270 --> 00:07:01.550
We're just doing some placement.

00:07:01.660 --> 00:07:03.900
So we're placing the text,
we're giving it a font style,

00:07:03.900 --> 00:07:06.080
we're setting it to bold,
we're making it white,

00:07:06.080 --> 00:07:09.030
and we're just positioning it
absolutely within the Widget.

00:07:09.230 --> 00:07:11.220
This is standard CSS,
nothing crazy going on here.

00:07:11.220 --> 00:07:13.760
And the body,
we're setting its margins to zero.

00:07:13.760 --> 00:07:16.530
And the reason you do that
is because you don't want to,

00:07:16.720 --> 00:07:18.600
these are web apps,
you don't want to have

00:07:18.740 --> 00:07:19.720
to rely on margins.

00:07:19.720 --> 00:07:21.860
Web apps usually don't have margins.

00:07:23.100 --> 00:07:24.400
So we're going to save this one.

00:07:24.400 --> 00:07:28.600
And we're going to just
call this uptime.css.

00:07:31.370 --> 00:07:33.910
Okay,
this has all been pretty fun and nice,

00:07:33.980 --> 00:07:34.890
but let's get into the JavaScript.

00:07:34.990 --> 00:07:36.300
Let's get into the good stuff.

00:07:36.300 --> 00:07:37.560
So the first thing we're going
to do is we're going to sign

00:07:37.560 --> 00:07:38.390
up for two notifications.

00:07:38.390 --> 00:07:41.410
And we covered these yesterday,
but as a quick recap,

00:07:41.410 --> 00:07:44.300
you can be notified when the
Dashboard is shown and hidden.

00:07:44.300 --> 00:07:48.300
And you do this using handlers,
WidgetOnShow and WidgetOnHide.

00:07:48.390 --> 00:07:51.290
And you just assign functions that are
called whenever these events happen.

00:07:51.300 --> 00:07:53.340
So I have two, both of these used here.

00:07:53.340 --> 00:07:56.300
I use WidgetOnShow and I set
it to the function Uptime.

00:07:56.300 --> 00:07:59.280
So let me pull the
Uptime function in here.

00:07:59.350 --> 00:08:01.430
And I'm going to set it to
a little bit convoluted,

00:08:01.430 --> 00:08:02.290
but not too bad.

00:08:02.450 --> 00:08:05.600
So what I do here is...

00:08:06.200 --> 00:08:13.200
The first thing I do is grab the
widget text that I have inside the DOM.

00:08:13.200 --> 00:08:15.200
This lets me work with it later on.

00:08:15.200 --> 00:08:17.200
Then I get to the good stuff.

00:08:17.200 --> 00:08:17.200
I call the command.

00:08:17.200 --> 00:08:19.200
Here I'm using widget.system.

00:08:19.200 --> 00:08:22.200
The first parameter I'm
passing in is userbinuptime.

00:08:22.200 --> 00:08:24.200
The second thing I'm passing in is no.

00:08:24.200 --> 00:08:26.200
This will run it synchronously.

00:08:26.200 --> 00:08:28.200
The widget will stall on the
execution of this command.

00:08:28.200 --> 00:08:30.200
But that's okay.

00:08:30.200 --> 00:08:30.200
It's a very quick command.

00:08:30.200 --> 00:08:32.200
It puts back one string.

00:08:32.200 --> 00:08:33.200
We'll get away with it this time.

00:08:33.200 --> 00:08:36.910
And then I'm going to place the
inner text inside the HTML of the

00:08:36.910 --> 00:08:40.200
element that's going to hold our
output to the result of the command.

00:08:40.230 --> 00:08:42.160
I'm going to do its output string.

00:08:42.400 --> 00:08:43.310
So that means...

00:08:43.410 --> 00:08:47.550
We're going to pass it the output string.

00:08:47.560 --> 00:08:50.430
So this is whatever is put to
standard output is going to be then

00:08:50.520 --> 00:08:52.400
put back into the Widget itself.

00:08:52.520 --> 00:08:54.400
And then, you'll notice I signed
up for another handler.

00:08:54.400 --> 00:08:56.720
This is Widget on Hide,
and I set it to this

00:08:56.720 --> 00:08:58.380
function I called reset.

00:08:58.400 --> 00:09:00.400
So let's bring that in.

00:09:00.400 --> 00:09:03.510
Reset just takes the uptime that's
in the Widget and wipes it out,

00:09:03.510 --> 00:09:05.400
puts a placeholder thing on there.

00:09:05.400 --> 00:09:07.980
The reason being is when a
Widget shows up on the Dashboard,

00:09:07.990 --> 00:09:10.400
it might take it a minute to run,
or not a minute,

00:09:10.400 --> 00:09:13.400
but a few seconds to run the uptime
command and actually put it in there.

00:09:13.430 --> 00:09:15.290
We don't want them to see the
previous uptime because that

00:09:15.320 --> 00:09:16.390
might be really misleading.

00:09:16.410 --> 00:09:19.530
So we're just going to put some
placeholder text whenever it's hidden,

00:09:19.530 --> 00:09:21.400
in this case, this retrieving text.

00:09:21.400 --> 00:09:24.400
And then we're going to save
this and put it in our Widget.

00:09:24.400 --> 00:09:28.390
We're going to call this uptime.js.

00:09:29.070 --> 00:09:31.040
So we have a lot of the
nuts and bolts in place.

00:09:31.110 --> 00:09:34.180
The last thing which we need to do
though is go back into our HTML and

00:09:34.180 --> 00:09:37.760
we need to reference the CSS and the
JavaScript file that we just made.

00:09:37.880 --> 00:09:40.240
So I'm going to just
grab that right here.

00:09:40.290 --> 00:09:41.600
It's pretty straightforward.

00:09:41.770 --> 00:09:47.680
In our head, I need to add an opening
head statement here.

00:09:49.100 --> 00:09:55.530
and I will introduce the style and import
the uptime.css that I created a minute

00:09:55.530 --> 00:10:01.700
ago and I also then import the string,
the JavaScript that I wrote

00:10:01.700 --> 00:10:05.410
that has the Widget.System call.

00:10:05.410 --> 00:10:05.410
And that is basically it.

00:10:05.870 --> 00:10:08.120
Now, I've done all of the Widget work.

00:10:08.200 --> 00:10:11.750
I still need to do one last thing,
and that is I need to make an Info.plist.

00:10:11.880 --> 00:10:16.540
This is the file that Mac OS X and
Dashboard and the Finder use

00:10:16.800 --> 00:10:17.990
to supply work with the Widget.

00:10:18.130 --> 00:10:21.350
It sets up all the things that the
system needs to know about this Widget.

00:10:21.430 --> 00:10:25.510
So I'm going to go in Xcode here
and really quick assemble that.

00:10:26.560 --> 00:10:29.680
Every Info.plist file starts off
with just some XML descriptions

00:10:29.700 --> 00:10:32.240
and some doc types,
DTD setup, and things to that effect.

00:10:32.330 --> 00:10:33.070
So that goes first.

00:10:33.180 --> 00:10:35.480
Then we bring in the OS required keys.

00:10:35.480 --> 00:10:37.700
We have things like a
CFBundle Display Name.

00:10:37.700 --> 00:10:39.770
This is the name of the Widget
that's used in the Widget Bar.

00:10:39.780 --> 00:10:41.920
We have the CFBundle Identifier.

00:10:42.110 --> 00:10:45.830
This is a unique string across
all Widgets that identifies this

00:10:45.830 --> 00:10:48.100
Widget to Dashboard and Mac OS X.

00:10:48.100 --> 00:10:49.000
We have the Bundle Name.

00:10:49.140 --> 00:10:51.510
This is different than the
Display Name because this is what

00:10:51.510 --> 00:10:54.080
a lot of monitoring utilities
like Activity Monitor uses.

00:10:54.580 --> 00:10:57.080
And then finally we
have a CFBundle Version.

00:10:57.080 --> 00:10:59.350
This is used for version conflicts.

00:10:59.410 --> 00:11:01.850
So if you release multiple
versions of your Widget,

00:11:01.860 --> 00:11:04.780
you want to increment this by some
value so that Dashboard always

00:11:04.780 --> 00:11:06.820
knows which is the most recent,
which one to use.

00:11:06.820 --> 00:11:09.220
So those are the ones required by OS X.

00:11:09.220 --> 00:11:11.780
And now there's the
Dashboard specific ones.

00:11:11.780 --> 00:11:13.390
First one is the main HTML.

00:11:13.390 --> 00:11:15.820
And here I just specify uptime.html.

00:11:15.820 --> 00:11:19.040
This is the file that contains pretty
much my implementation of my Widget.

00:11:19.040 --> 00:11:22.270
We're going to change
where the close box is.

00:11:22.690 --> 00:11:25.520
By the default,
a Widget's close box is over the top

00:11:25.520 --> 00:11:27.700
left corner of its underlying window.

00:11:27.720 --> 00:11:30.730
But if you use a Widget that has
some type of alpha around it,

00:11:30.730 --> 00:11:33.330
some type of transparency,
you should really move that close

00:11:33.400 --> 00:11:36.480
box in so that's over the top
left corner of the actual graphic.

00:11:36.520 --> 00:11:39.680
And the final thing which we're
going to use here is Allow System.

00:11:39.770 --> 00:11:42.240
So this is the Info.plist key
I told you about before.

00:11:42.250 --> 00:11:44.640
And this will turn on command
line access for my Widget.

00:11:44.790 --> 00:11:49.440
And you'll notice that it has a
Boolean value and I set it to true.

00:11:49.910 --> 00:11:52.700
So we're going to close that off.

00:11:52.710 --> 00:11:53.760
And that is that.

00:11:54.000 --> 00:11:55.000
So we're going to save it.

00:11:55.020 --> 00:11:56.700
We're going to name it Info.plist.

00:11:56.710 --> 00:11:59.580
And again, that's a required name,
required spelling.

00:11:59.740 --> 00:12:01.350
And that is our Widget.

00:12:01.360 --> 00:12:04.320
So fingers crossed.

00:12:04.450 --> 00:12:11.040
We're going to throw in
a .wdgt extension here.

00:12:11.150 --> 00:12:13.200
And then it asks,
do you want to make this a Widget?

00:12:13.200 --> 00:12:15.060
Yes, we do.

00:12:15.060 --> 00:12:17.220
And sure enough, there we go.

00:12:17.250 --> 00:12:19.880
Handy dandy little Widget.

00:12:19.880 --> 00:12:22.660
Okay, can I go back to slides please?

00:12:25.210 --> 00:12:27.860
So now that we've shown you how to
use Widget.Systems synchronously,

00:12:27.960 --> 00:12:30.150
we're going to show you how
to use it asynchronously.

00:12:30.150 --> 00:12:32.200
And this is usually what
we recommend that you do.

00:12:32.200 --> 00:12:35.800
Asynchronous operation means
that the Widget executes

00:12:35.800 --> 00:12:37.780
concurrently to your Widget.

00:12:37.850 --> 00:12:40.770
So the Widget won't get held up in case
you're running a longer command or you're

00:12:40.770 --> 00:12:44.200
running a script that has continuous
output or something to that effect.

00:12:44.200 --> 00:12:46.560
And you use it,
you toggle on this asynchronous

00:12:46.610 --> 00:12:48.160
mode by supplying a handler.

00:12:48.190 --> 00:12:51.020
So in this example,
we're supplying a function

00:12:51.020 --> 00:12:52.200
called endHandler.

00:12:52.200 --> 00:12:55.200
And that function needs
to accept one argument.

00:12:55.410 --> 00:12:59.180
That argument will be an object that
you can then call either outputString,

00:12:59.380 --> 00:13:02.060
errorString, or statusOn to get the final
information about the Widget

00:13:02.220 --> 00:13:03.200
after it's done executing.

00:13:03.200 --> 00:13:06.140
In addition, we have a couple of handlers
you should be aware of.

00:13:06.240 --> 00:13:09.200
There's onReadOutput and onReadError.

00:13:09.200 --> 00:13:13.020
And so these are called whenever the
command actually writes something to

00:13:13.030 --> 00:13:15.190
standard output and standard error.

00:13:15.330 --> 00:13:17.940
And whatever handlers you provide
here need to accept one argument,

00:13:17.940 --> 00:13:21.190
and that's going to be the string that
was written to the appropriate output.

00:13:21.200 --> 00:13:23.930
So in this example,
we call just some script,

00:13:23.930 --> 00:13:25.140
some Perl script.

00:13:25.210 --> 00:13:29.670
And then in the endHandler,
we just take whatever the output was

00:13:29.670 --> 00:13:32.040
and just dump it into our Widget.

00:13:32.200 --> 00:13:35.370
In addition to the properties,
there's also some methods in case you

00:13:35.370 --> 00:13:37.080
need to interact with your command.

00:13:37.200 --> 00:13:38.910
So for instance,
if you're taking a Perl script and

00:13:38.910 --> 00:13:41.190
you keep feeding it information
or pulling information out of it,

00:13:41.190 --> 00:13:45.110
there's cancel,
which just quits it straight out.

00:13:45.260 --> 00:13:48.080
There's writeString,
which just writes to standard input.

00:13:48.220 --> 00:13:49.730
And then there's close,
which sends standard input in EOF,

00:13:49.730 --> 00:13:50.200
an end of five.

00:13:50.200 --> 00:13:53.390
So it's for gracefully quitting
your command versus cancel,

00:13:53.390 --> 00:13:55.000
which just kills it on the spot.

00:13:55.200 --> 00:13:57.200
And again, it works like this.

00:13:57.200 --> 00:13:59.200
You just call whatever
command you're using.

00:13:59.200 --> 00:14:01.160
And we're just writing some string.

00:14:01.290 --> 00:14:03.190
And then when we're done with it,
we send it closed.

00:14:03.200 --> 00:14:04.200
So it's pretty straightforward.

00:14:04.200 --> 00:14:05.200
And let's go to demo here.

00:14:13.400 --> 00:14:17.240
So if you downloaded the source
code ahead of time for this session,

00:14:17.260 --> 00:14:19.800
I suggest you pull up the Voices example.

00:14:19.810 --> 00:14:26.000
And let me pull out the...
There's two versions... Hi.

00:14:26.000 --> 00:14:29.310
So there's two versions of
this Widget in this project.

00:14:29.410 --> 00:14:31.060
There's a synchronous
and asynchronous version,

00:14:31.070 --> 00:14:32.800
and we're going to start
with the synchronous one.

00:14:32.800 --> 00:14:34.340
And all this Widget does,
as you already heard,

00:14:34.440 --> 00:14:37.800
it uses Macintok to take
whatever string I type in here,

00:14:37.800 --> 00:14:40.520
I can select a voice,
and then I can spit that string back out.

00:14:40.610 --> 00:14:42.770
So I'm just going to say hi to my mom.

00:14:42.940 --> 00:14:45.900
She's very proud of me today,
so I think she owes that.

00:14:46.020 --> 00:14:47.900
And sure enough, it just says that.

00:14:47.910 --> 00:14:49.900
It says "Hi," I can choose a voice here.

00:14:50.050 --> 00:14:52.900
But there's a... Howdy.

00:14:52.920 --> 00:14:55.900
So, this can get really annoying though.

00:14:55.900 --> 00:14:57.900
Let's say I paste "Hi Mom"
in here a couple of times.

00:14:57.900 --> 00:15:01.900
All of a sudden,
there's no way for me to stop it.

00:15:01.900 --> 00:15:03.900
Short of muting it.

00:15:03.900 --> 00:15:05.900
So, this is not a solution.

00:15:05.900 --> 00:15:06.900
This is not how you should
be doing your Widget.

00:15:06.900 --> 00:15:10.900
So we're going to take this Widget and
we're going to make it asynchronous.

00:15:11.020 --> 00:15:12.810
And I think we can safely
turn the sound back on.

00:15:14.350 --> 00:15:17.630
I'm going to take the synchronous
version and bring it on my desktop.

00:15:17.710 --> 00:15:20.800
In case you didn't know,
you can take any Widget and pop it open.

00:15:20.800 --> 00:15:28.640
If you command-click on it and choose
"show package contents" that opens

00:15:28.790 --> 00:15:31.240
up the Widget bundle in the Finder.

00:15:31.240 --> 00:15:36.120
I'm going to be using Demo
Monkey to provide my code for me.

00:15:37.480 --> 00:15:39.930
All we're going to be doing this
time is we're just going to be

00:15:40.000 --> 00:15:41.580
modifying the JavaScript code.

00:15:41.640 --> 00:15:43.400
Feel free to try to follow along here.

00:15:43.440 --> 00:15:46.680
One thing which I would recommend
you do is in the project which

00:15:46.680 --> 00:15:49.900
I submitted for you guys to have,
just take the two JavaScript files

00:15:49.900 --> 00:15:51.400
and use our file merge utility.

00:15:51.400 --> 00:15:54.260
Put the one on the left and
the other on the right and just

00:15:54.270 --> 00:15:56.150
follow along as I change things.

00:15:58.270 --> 00:16:01.960
So basically the JavaScript in
here is pretty simple.

00:16:02.010 --> 00:16:02.990
It has some comments.

00:16:03.140 --> 00:16:04.570
Not enough, but enough.

00:16:04.600 --> 00:16:08.600
And the one we're going to
look at here is called Speak.

00:16:08.600 --> 00:16:10.840
This is what's actually called when
you click on that Speak button.

00:16:10.840 --> 00:16:13.220
And it does a whole bunch of
regular expressions to make sure

00:16:13.220 --> 00:16:16.040
we have the right characters in the
string and all that other stuff.

00:16:16.040 --> 00:16:18.040
But what's really the
good stuff is right here.

00:16:18.040 --> 00:16:19.530
We have if window.widget.

00:16:19.640 --> 00:16:23.640
Again, we wrap our widget.system calls
inside of this window.widget call.

00:16:23.650 --> 00:16:27.590
And the reason for that is because
if you were to run this widget

00:16:27.590 --> 00:16:30.840
in Safari for debug purposes,
you wouldn't want this called because

00:16:30.840 --> 00:16:33.840
execution would just halt on the
spot and it wouldn't be pretty.

00:16:33.960 --> 00:16:38.280
And I have this global variable
called currentlyBeingSpoken.

00:16:38.280 --> 00:16:41.480
So whatever the current
widget.system command executing is,

00:16:41.480 --> 00:16:43.250
I just put it inside of this variable.

00:16:43.320 --> 00:16:45.410
And I'm going to be using that later on.

00:16:45.440 --> 00:16:47.150
That's why I pointed it out now.

00:16:47.370 --> 00:16:50.250
So right now we're just
calling widget.system and

00:16:50.320 --> 00:16:53.100
we're using osascript to say,
to pass a say command.

00:16:53.160 --> 00:16:54.290
You can also use the say one.

00:16:54.360 --> 00:16:56.760
I just used osascript
because that's how I felt.

00:16:56.860 --> 00:17:01.840
And right now we're using null here,
but I'm going to replace this

00:17:02.110 --> 00:17:05.160
with a version that has a handler.

00:17:05.210 --> 00:17:08.150
So I'm going to comment this out.

00:17:11.880 --> 00:17:17.290
You'll notice that this one has "done"
on it as a handler instead of "no".

00:17:17.300 --> 00:17:19.470
So I have to supply a "done" button.

00:17:19.610 --> 00:17:20.800
We'll get there in a second.

00:17:20.800 --> 00:17:27.990
I'm also going to add in here the
capability of having a "stop" button.

00:17:27.990 --> 00:17:31.890
Because if I want to be able to
have this Widget stop talking,

00:17:31.910 --> 00:17:33.800
I'm going to want to
have a "done" button.

00:17:33.800 --> 00:17:36.790
So inside of the HTML there's
the "speak" button text.

00:17:36.790 --> 00:17:40.790
And in the case that we're speaking,
I'm having it set its text to "stop".

00:17:40.800 --> 00:17:44.800
And then I also have the button itself,
I use the DOM to change its handler.

00:17:44.800 --> 00:17:46.850
Because right now if someone
clicks on that button,

00:17:46.850 --> 00:17:47.800
they're going to get the "speak" one.

00:17:47.800 --> 00:17:50.770
I'm going to provide a "cancel"
function which is going to get called.

00:17:50.860 --> 00:17:53.160
And that's going to be able
to cancel this straight out if

00:17:53.320 --> 00:17:54.800
someone hits the "stop" button.

00:17:57.100 --> 00:18:00.350
So the first one of those,
the cancel function,

00:18:00.420 --> 00:18:02.730
just does this right here.

00:18:02.730 --> 00:18:04.510
If it makes sure we're
running within a Widget again,

00:18:04.630 --> 00:18:06.980
if window.widget,
it takes currently being spoken,

00:18:06.980 --> 00:18:09.360
whatever's being spoken right now,
and cancels it.

00:18:09.360 --> 00:18:12.380
And then it does some clean-up
work with regards to the UI.

00:18:12.530 --> 00:18:18.090
But then it calls the done function,
and that's also what gets called when our

00:18:18.090 --> 00:18:23.530
command is just run on its own naturally,
and it's run its course.

00:18:23.760 --> 00:18:25.590
It just does some cleanup.

00:18:25.650 --> 00:18:26.760
That's basically all it does.

00:18:26.760 --> 00:18:29.610
It just cleans up the UI and changes
the button text back to speak.

00:18:29.690 --> 00:18:31.570
It doesn't actually do anything
with the Widget.SystemCall at all.

00:18:31.730 --> 00:18:34.820
It just sets it to null
for bookkeeping purposes.

00:18:34.840 --> 00:18:38.830
So let's go ahead and save this.

00:18:39.200 --> 00:18:46.600
[Transcript missing]

00:18:49.480 --> 00:18:57.400
Hi Mum, Hi.

00:18:57.470 --> 00:18:58.400
And enough of that.

00:18:58.400 --> 00:19:04.500
So if I have it speak again though,
you'll notice that when I close it,

00:19:04.540 --> 00:19:06.400
it's still talking and that's
not a good behavior either.

00:19:06.500 --> 00:19:09.290
So we're going to mute that in the
meantime and we're going to go back

00:19:09.290 --> 00:19:12.400
to our JavaScript file and we're
going to add a remove handler.

00:19:12.400 --> 00:19:14.940
This is another one of the
events we talked about yesterday

00:19:15.090 --> 00:19:16.400
that you can sign up for.

00:19:16.400 --> 00:19:19.400
You can be notified for
when a Widget is removed.

00:19:19.400 --> 00:19:23.170
So we just have this function that
I'm going to have called whenever

00:19:23.170 --> 00:19:25.400
the Widget is removed called removed.

00:19:25.400 --> 00:19:29.400
And that function contains I think
a whopping three lines of text.

00:19:29.400 --> 00:19:33.190
It has, it just checks if something
is being spoken and if so,

00:19:33.430 --> 00:19:34.400
it cancels it.

00:19:34.620 --> 00:19:36.400
So we'll save that.

00:19:36.750 --> 00:19:38.740
Load the Widget again.

00:19:45.700 --> 00:19:47.270
or you know what, we'll go all out.

00:19:47.360 --> 00:19:56.380
I'm amazed that I can type right now,
all right.

00:19:57.100 --> 00:20:01.100
I sure like being inside
this fancy computer.

00:20:01.100 --> 00:20:03.540
I hope you all know where that's from,
but if not,

00:20:03.540 --> 00:20:05.100
I'll tell you after the session.

00:20:05.100 --> 00:20:09.100
So if I have it speaking again,
and I get rid of it, it stops talking.

00:20:09.100 --> 00:20:13.100
So this is kind of how Widgets
should behave in this case.

00:20:13.100 --> 00:20:17.100
So that's it for demos.

00:20:17.100 --> 00:20:19.100
Can we go back to slides, please?

00:20:21.400 --> 00:20:24.960
So, I've talked to you about using
Widget.Systems synchronously

00:20:24.960 --> 00:20:25.800
and asynchronously.

00:20:25.800 --> 00:20:28.110
I'm now going to bring up Matt Drance,
one of our DTS engineers,

00:20:28.210 --> 00:20:30.440
and he's going to talk to
you about network resource

00:20:30.440 --> 00:20:32.600
access inside of your Widget.

00:20:32.860 --> 00:20:36.560
Thanks.

00:20:41.530 --> 00:20:42.830
Good, much better.

00:20:42.990 --> 00:20:45.640
Okay, so,
as Christian already introduced me,

00:20:45.640 --> 00:20:50.580
I'm Matt Drance,
and I am the Dashboard Rep in DTS.

00:20:50.580 --> 00:20:53.800
So, should you guys run into any problems
with your Widget development,

00:20:53.800 --> 00:20:55.600
or questions, or concerns,
I'm one of the guys

00:20:55.600 --> 00:20:56.450
you'd want to talk to.

00:20:56.480 --> 00:20:59.760
Of course, the goal of this session is
for you to not have to do that.

00:20:59.830 --> 00:21:00.940
We'll see how well it goes.

00:21:01.800 --> 00:21:04.900
So, I'm going to be talking to
you about network access,

00:21:05.050 --> 00:21:08.700
specifically web-based content like XML,
HTML, other feeds that you

00:21:08.780 --> 00:21:10.200
might have access to.

00:21:10.590 --> 00:21:14.520
Along Christian's theme of using keys,
the first thing you want to do when

00:21:14.520 --> 00:21:17.870
you're starting to access the outside
network is set the allow network

00:21:17.870 --> 00:21:19.710
access key in your Info.plist.

00:21:19.720 --> 00:21:23.240
Then there's this magical
JavaScript object called

00:21:23.240 --> 00:21:24.860
the XMLHTTP request.

00:21:24.860 --> 00:21:26.950
A lot of you probably
know about this already.

00:21:26.950 --> 00:21:30.670
If you've been fishing around in our
own Widgets that come with the system,

00:21:30.680 --> 00:21:31.670
you see this in Proxmox.

00:21:31.770 --> 00:21:34.080
It's a pretty extensive
use all over the place.

00:21:34.080 --> 00:21:37.300
And what it does is it basically
is like a headless web connection,

00:21:37.300 --> 00:21:40.180
and it goes ahead and does a
fetch just like a browser would,

00:21:40.180 --> 00:21:42.760
but gives you access to all
of that content rather than

00:21:42.760 --> 00:21:44.740
just rendering it on screen.

00:21:44.760 --> 00:21:47.730
So,
using an XMLHTTP request is as simple as

00:21:47.730 --> 00:21:52.640
instantiating the object in JavaScript,
setting handlers for when the

00:21:52.640 --> 00:21:57.820
request is finished or in progress,
and we'll show you that in a second.

00:21:57.820 --> 00:22:01.440
You open the HTTP connection
with a destination URL.

00:22:01.920 --> 00:22:03.690
You send the request,
and then in the handler

00:22:03.690 --> 00:22:06.460
function that you said earlier,
you go ahead and get the content

00:22:06.460 --> 00:22:09.190
and work with it in whatever
fashion that you want it to.

00:22:09.200 --> 00:22:11.900
So, the first half,
setting up the request.

00:22:11.900 --> 00:22:14.780
Like I just said before,
you set a handler function.

00:22:14.850 --> 00:22:18.110
It could be one of two handlers
that we make available to you.

00:22:18.120 --> 00:22:21.620
One of them is onReadyStateChange,
and this is an incremental handler.

00:22:21.850 --> 00:22:25.250
During the process of the request,
it goes through a number of values

00:22:25.250 --> 00:22:28.920
starting with zero and going
through to four when it's complete.

00:22:29.290 --> 00:22:30.600
Alternatively,
if you don't really care about

00:22:30.600 --> 00:22:31.230
the incremental function,
you can set up a function

00:22:31.320 --> 00:22:31.760
called the "Handler" function.

00:22:31.760 --> 00:22:34.000
So, if you want to make
progress of the request,

00:22:34.000 --> 00:22:37.040
you can just set an onLoadHandler,
which will be called at the very

00:22:37.080 --> 00:22:38.960
end when everything's done loading.

00:22:38.990 --> 00:22:43.090
You go ahead and set your request type,
like a GET or a POST,

00:22:43.090 --> 00:22:46.160
and specify a URL using the open method.

00:22:46.250 --> 00:22:48.890
And we usually recommend,
much like the system command,

00:22:48.930 --> 00:22:51.000
that you pass "true"
for asynchronous mode,

00:22:51.040 --> 00:22:53.580
especially if you're in the
case of a bogged down server

00:22:53.580 --> 00:22:56.550
or a slow network connection,
you'll be blocking your widget's

00:22:56.680 --> 00:22:59.700
execution for the whole time
that that request is waiting.

00:22:59.700 --> 00:23:01.680
So,
it's best to do it in synchronous mode.

00:23:01.700 --> 00:23:03.500
So, you can set up a request header,
and you can set up a request

00:23:03.500 --> 00:23:05.300
header in the same way that you
would in an asynchronous mode,

00:23:05.300 --> 00:23:07.900
and put up some kind of progress bar,
loading indicator, something like that.

00:23:07.900 --> 00:23:09.800
And you can optionally
set request headers,

00:23:09.930 --> 00:23:11.880
if you know what kind of
request you need to send,

00:23:11.890 --> 00:23:15.100
if there's any additional data that
needs to come in with the request.

00:23:15.100 --> 00:23:17.300
And then finally, you send it.

00:23:17.300 --> 00:23:19.490
So, here's an example of that code.

00:23:19.500 --> 00:23:21.690
This is really as simple as it gets.

00:23:21.760 --> 00:23:23.900
Create the XML HTTP request.

00:23:23.900 --> 00:23:26.440
Set your, in this case we're doing
onReadyStateChange,

00:23:26.470 --> 00:23:29.270
and process rec change is a
function that's declared somewhere

00:23:29.270 --> 00:23:30.740
else in the JavaScript file.

00:23:31.060 --> 00:23:34.520
And that will be called as
the request state changes.

00:23:34.560 --> 00:23:37.080
And we call,
in this case we're doing a get to a

00:23:37.080 --> 00:23:39.550
URL that's been specified somewhere else.

00:23:39.860 --> 00:23:44.500
We pass in true for asynchronous mode,
and then we finally send the request.

00:23:44.790 --> 00:23:47.340
So when the request is done loading
and you get your response back,

00:23:47.340 --> 00:23:48.460
you need to handle it somehow.

00:23:48.590 --> 00:23:53.070
Well, that handler that we set earlier is
going to be called and at that point,

00:23:53.170 --> 00:23:56.870
depending on whether you're using
onLoad or onReadyStateChange,

00:23:56.920 --> 00:24:00.250
in the case of onReadyStateChange,
you want to check for the right state.

00:24:00.300 --> 00:24:03.790
In other words, a state of four indicates
that the request is complete.

00:24:03.850 --> 00:24:05.640
At that point,
you can go ahead and try to

00:24:05.640 --> 00:24:07.200
inspect the server response.

00:24:07.200 --> 00:24:08.960
You can do things like get a header.

00:24:08.960 --> 00:24:11.780
You can get all of the headers
and work with them later.

00:24:12.220 --> 00:24:15.450
And then the real thing you want
to work with is the request text

00:24:15.570 --> 00:24:17.410
or the request XML properties.

00:24:17.660 --> 00:24:21.490
And we'll go into the difference
of those in just a second.

00:24:23.360 --> 00:24:26.810
So here's some code that handles a
response and again this is that process

00:24:26.810 --> 00:24:30.520
rec change function that we assigned
as the handler a couple slides ago.

00:24:30.820 --> 00:24:34.670
We check for a ready state of 4
and a status of 200 which is a

00:24:34.710 --> 00:24:36.900
complete OK status from the server.

00:24:37.010 --> 00:24:41.090
If the XML exists,
we go ahead and we process the response

00:24:41.090 --> 00:24:45.620
XML in a dynamic HTML sort of fashion.

00:24:45.620 --> 00:24:51.130
Otherwise, we go ahead and send out
some kind of error message.

00:24:51.890 --> 00:24:53.790
So what are these two properties?

00:24:53.870 --> 00:24:56.930
Response XML versus Response Text?

00:24:56.930 --> 00:24:59.500
Well,
the Response XML property is the one

00:24:59.500 --> 00:25:00.960
that you really want to use if you can.

00:25:00.960 --> 00:25:02.300
It's really, really useful.

00:25:02.300 --> 00:25:06.270
It's a fully functional
DOM tree object in JavaScript.

00:25:06.350 --> 00:25:09.240
It allows you to do all of the
kind of functions that you're used

00:25:09.240 --> 00:25:13.600
to doing in a normal DOM tree,
like get element by tag name,

00:25:13.600 --> 00:25:16.300
get element by ID, so on and so forth.

00:25:16.300 --> 00:25:18.260
It's a lot easier to work with.

00:25:18.310 --> 00:25:21.160
The alternative would
be the Response Text.

00:25:21.290 --> 00:25:23.300
Is that Response HTML?

00:25:23.300 --> 00:25:24.300
No.

00:25:24.320 --> 00:25:25.300
That's my fault.

00:25:25.440 --> 00:25:29.060
That's supposed to say Response Text,
and the text is basically just

00:25:29.060 --> 00:25:32.300
a huge string representing
the source of the document.

00:25:32.300 --> 00:25:36.290
And of course, the disadvantage of this,
you can work with it as much as you want,

00:25:36.390 --> 00:25:38.300
but now you're going to have
to do manual string parsing,

00:25:38.300 --> 00:25:41.300
regular expression stuff,
all that kind of thing.

00:25:41.300 --> 00:25:45.280
So if you have the possibility
and the opportunity,

00:25:45.300 --> 00:25:45.300
you really want to work with it.

00:25:45.300 --> 00:25:45.870
So if you have the possibility
and the opportunity,

00:25:45.870 --> 00:25:46.300
you really want to work with it.

00:25:46.300 --> 00:25:48.750
with the response XML.

00:25:49.190 --> 00:25:51.160
The Response XML property.

00:25:51.160 --> 00:25:55.490
Now in order to use Response XML,
you need to have a MIME type of text

00:25:55.580 --> 00:25:58.090
XML coming back from the server.

00:25:58.200 --> 00:26:00.440
If you don't,
or if you don't know if you will,

00:26:00.540 --> 00:26:03.630
you can always make the
override MIME type call on the

00:26:03.640 --> 00:26:05.800
request before sending it out.

00:26:05.810 --> 00:26:08.950
And then that will at least
get that hurdle out of the way,

00:26:08.950 --> 00:26:11.650
and assuming the XML you
get back is well formed,

00:26:11.650 --> 00:26:13.800
you will get a proper DOM tree back.

00:26:14.550 --> 00:26:17.400
Okay, and now we're going to show you
what I've just been talking about.

00:26:17.440 --> 00:26:20.770
Can we go to demo two, please?

00:26:22.330 --> 00:26:23.040
Wonderful.

00:26:23.040 --> 00:26:27.020
So how many of you took a
look at the sample RSS example

00:26:27.060 --> 00:26:31.700
that came down with this,
that was associated with this talk?

00:26:31.830 --> 00:26:34.420
How many of you got it to work?

00:26:35.540 --> 00:26:36.690
I didn't think so.

00:26:36.770 --> 00:26:40.260
Okay, so,
and this actually goes back to one

00:26:40.260 --> 00:26:43.560
of the questions that was asked
at one of the earlier sessions.

00:26:43.560 --> 00:26:45.930
Let's go ahead and open this guy.

00:26:46.760 --> 00:26:50.730
And what this is supposed to
do is show a bunch of downloads

00:26:50.980 --> 00:26:53.230
from the Apple Dashboard site.

00:26:53.230 --> 00:26:54.530
Unfortunately, it's not there.

00:26:54.660 --> 00:26:58.370
And going back to the question
that was asked in the initial talk,

00:26:58.470 --> 00:27:02.780
the problem here is we finished
this sample two or three weeks ago.

00:27:02.880 --> 00:27:07.620
Unfortunately, on Monday,
we changed the URL to the download feed.

00:27:08.090 --> 00:27:10.660
So those of you wondering about
legal issues and whatnot when

00:27:10.710 --> 00:27:13.260
using somebody else's feed,
there's that, but there's also the fact

00:27:13.360 --> 00:27:15.860
that you don't control it,
and they can change it out from

00:27:15.880 --> 00:27:17.210
under you whenever you want.

00:27:17.320 --> 00:27:19.000
Whenever they want, not when you want.

00:27:19.050 --> 00:27:22.390
If it was what I want,
it wouldn't have changed.

00:27:22.740 --> 00:27:24.270
Let's see what we can do about this.

00:27:24.430 --> 00:27:26.270
For those of you who
have the project open,

00:27:26.270 --> 00:27:28.620
I have the answer,
and it's wonderfully simple.

00:27:28.750 --> 00:27:33.450
We're just going to open up
the sample RSS JavaScript file.

00:27:36.080 --> 00:27:40.760
Down at the beginning of this file,
this is the URL that

00:27:40.760 --> 00:27:42.200
we're going to be using.

00:27:42.260 --> 00:27:50.690
And what we need to do is just take
out the Mac OS X and put in a home.

00:27:50.750 --> 00:27:53.400
Let's not do it in caps.

00:27:54.180 --> 00:27:56.840
Okay, so while we're in here,
let's just have a look

00:27:56.860 --> 00:27:57.430
at what's happening.

00:27:57.440 --> 00:28:00.260
Well, let me show you how it works
so you don't fall asleep.

00:28:01.750 --> 00:28:04.130
All right, and there it is, finally.

00:28:04.430 --> 00:28:11.100
So what this is is just a chronological
list of the Widgets that are available

00:28:11.100 --> 00:28:14.110
on the Mac OS X download page.

00:28:14.560 --> 00:28:18.770
As opposed to the Safari site
with the same URL,

00:28:18.940 --> 00:28:21.620
which I would love to show you right now.

00:28:21.620 --> 00:28:23.580
Let's not do that one.

00:28:25.460 --> 00:28:27.980
So here's the HTML version.

00:28:28.040 --> 00:28:31.620
And as you can see,
if we were going to be working with this,

00:28:31.620 --> 00:28:34.530
it would probably be a lot of work
to go ahead and parse all this

00:28:34.530 --> 00:28:36.020
HTML and get out what we wanted.

00:28:36.070 --> 00:28:38.030
So instead,
we're going to go get the RSS feed.

00:28:38.070 --> 00:28:40.100
And I just showed you that a second ago.

00:28:40.100 --> 00:28:43.440
And let's take a quick look at that.

00:28:44.790 --> 00:28:46.700
This is a little overwhelming at first.

00:28:46.710 --> 00:28:51.310
This is really just some raw XML that
gets brought down with the feed.

00:28:51.310 --> 00:28:54.820
You can start to see these things
like Oregon Coastal Webcam Widget.

00:28:54.820 --> 00:28:58.770
I saved this earlier.

00:28:58.770 --> 00:28:58.770
This may not be the
newest Widget anymore.

00:28:58.970 --> 00:29:02.240
But we basically have a bunch of
items here defined with an item tag,

00:29:02.480 --> 00:29:06.500
and we have a title, and a link,
and description, which I don't think

00:29:06.500 --> 00:29:09.930
we're going to be using,
and a publish date.

00:29:10.150 --> 00:29:14.140
You can see that in this case
we're just displaying the

00:29:14.200 --> 00:29:15.440
title and the publish date.

00:29:15.450 --> 00:29:18.470
When we click on one of these we
use the widget.openurl command to

00:29:18.740 --> 00:29:21.320
go ahead and open it in Safari.

00:29:21.660 --> 00:29:25.560
So as you can see,
or as I'll show you in a second,

00:29:25.560 --> 00:29:29.340
let's go on down to the...

00:29:30.000 --> 00:29:32.440
XML loaded function.

00:29:32.440 --> 00:29:36.700
And this is going to be,
this is what we're setting here using

00:29:36.700 --> 00:29:39.970
the onLoad handler and the slides
we're using on ready state change.

00:29:40.090 --> 00:29:41.330
Here we're using onLoad.

00:29:41.330 --> 00:29:43.860
And this is going to get called
when the feed is finally loaded.

00:29:43.860 --> 00:29:46.300
Then we go ahead and we
start working with the XML.

00:29:46.300 --> 00:29:50.240
If the response XML property exists,
which in this case it does,

00:29:50.240 --> 00:29:52.600
we go ahead and we get the contents.

00:29:52.600 --> 00:29:54.680
We get the RSS block.

00:29:54.740 --> 00:29:59.660
And then we start to
actually walk down the tree.

00:30:00.120 --> 00:30:03.120
For all of the items down here.

00:30:03.270 --> 00:30:05.630
And this find child function
is actually really simple

00:30:05.630 --> 00:30:06.910
and I want to show it to you.

00:30:06.990 --> 00:30:10.730
We basically just walk through the
DOM tree from that XML that we got.

00:30:10.730 --> 00:30:15.070
And we basically look for matches
with the name that we requested.

00:30:15.130 --> 00:30:18.590
And it's basically a much
simpler implementation of doing

00:30:18.920 --> 00:30:22.230
something like get element by
ID or get elements by tag name,

00:30:22.270 --> 00:30:27.020
which is going to give you everything
by just brute forcing the entire thing.

00:30:27.180 --> 00:30:30.470
So by walking down the tree,
we can get this done a lot

00:30:30.470 --> 00:30:31.980
cleaner and a lot quicker.

00:30:31.980 --> 00:30:33.950
And I hope you can see
the difference here.

00:30:34.020 --> 00:30:36.370
If we didn't have this
response XML element,

00:30:36.370 --> 00:30:39.390
we'd basically be scraping
through this whole thing,

00:30:39.390 --> 00:30:43.040
either using a bunch of, you know,
index of and substring calls or

00:30:43.040 --> 00:30:44.890
a big fat regular expression.

00:30:44.940 --> 00:30:46.550
So this is a lot cleaner.

00:30:46.550 --> 00:30:49.530
And, you know,
we go ahead and we get the title

00:30:49.530 --> 00:30:54.120
and the link and the publish date,
like I pointed out to you in the RSS.

00:30:54.120 --> 00:30:55.780
And we see our widget.

00:30:55.840 --> 00:30:59.490
So I think that's about it.

00:31:00.080 --> 00:31:01.200
Can we go back to slides, please?

00:31:05.700 --> 00:31:14.220
Now let's talk a little
bit about plugins.

00:31:14.320 --> 00:31:16.300
What is a plugin?

00:31:16.300 --> 00:31:17.960
There are a couple of plugins
you can use in Dashboard.

00:31:17.960 --> 00:31:19.560
The first one is a Widget plugin.

00:31:19.750 --> 00:31:24.020
A Widget plugin is something that
will give you JavaScript access

00:31:24.070 --> 00:31:27.700
to non-visual native services,
data kind of stuff,

00:31:27.700 --> 00:31:30.200
APIs that are available to
the system but not necessarily

00:31:30.280 --> 00:31:31.650
available to web applications.

00:31:31.830 --> 00:31:34.360
An example of this is
the Address Book widget.

00:31:34.430 --> 00:31:37.910
That widget does all of its
display using standard web stuff,

00:31:37.910 --> 00:31:40.910
HTML, JavaScript, CSS,
but it actually needs system

00:31:41.090 --> 00:31:43.700
resources to go get those
names out of the Address Book.

00:31:43.720 --> 00:31:46.700
It uses a Widget plugin to
do that behind the scenes.

00:31:46.700 --> 00:31:50.630
Now the difference between
this and an Internet plugin,

00:31:50.710 --> 00:31:53.290
an Internet plugin is the more
traditional plugin that most

00:31:53.350 --> 00:31:54.670
of you are probably used to.

00:31:54.800 --> 00:31:57.990
It's a view-based graphical
addition to the actual layout,

00:31:58.050 --> 00:31:59.700
to the actual web content.

00:31:59.700 --> 00:32:01.700
You use it and you embed
it using the Internet.

00:32:01.700 --> 00:32:05.700
You can use the embed tag just like you
always would with old school plugins.

00:32:05.700 --> 00:32:10.600
You could use our new WebKit API or
you could use the old Netscape API.

00:32:10.700 --> 00:32:13.440
An example of this is the
Phone Book widget which actually

00:32:13.440 --> 00:32:16.700
implants a special drop-down to
do that searching that it does.

00:32:16.700 --> 00:32:18.700
That's not a normal web control.

00:32:18.700 --> 00:32:22.170
It's something that we
wrote as an Internet plugin.

00:32:22.670 --> 00:32:26.710
Widget Plugins are non-graphical.

00:32:26.990 --> 00:32:32.300
To use them in a Widget,
you set the plugin Info.plist key.

00:32:32.380 --> 00:32:36.470
The value of that key is going to be
the full name of the Widget plugin

00:32:36.480 --> 00:32:38.890
with a .widgetplugin extension.

00:32:39.090 --> 00:32:43.730
You start as a foundation bundle
as opposed to an app kit bundle

00:32:43.740 --> 00:32:46.470
because it's non-graphical.

00:32:46.470 --> 00:32:50.680
You need to implement a few methods.

00:32:50.810 --> 00:32:53.210
The most important is initWithWebView,
which is a standard

00:32:53.210 --> 00:32:55.800
Objective-C initialization method.

00:32:55.910 --> 00:32:57.960
This is required for Widget plugins.

00:32:57.960 --> 00:33:01.250
This method is going to be
called when the plugin loads,

00:33:01.250 --> 00:33:04.940
and that's actually before any
of your web content is loaded.

00:33:05.030 --> 00:33:08.750
The plugin is loaded very early in
the whole Widget loading process.

00:33:08.880 --> 00:33:13.490
So if you fail to implement this method,
if you throw an exception or crash in it,

00:33:13.670 --> 00:33:16.480
you're not going to see
anything in your Widget.

00:33:16.960 --> 00:33:20.020
There are some other methods that you
need to implement that are part of

00:33:20.020 --> 00:33:21.670
the informal web scripting protocol.

00:33:21.870 --> 00:33:25.870
Windows Script Object Available is
selector excluded from web script,

00:33:25.880 --> 00:33:26.800
is key excluded from web script.

00:33:26.800 --> 00:33:29.750
I'll explain to you specifically
what those do in a second.

00:33:29.810 --> 00:33:31.950
In it with WebView.

00:33:31.950 --> 00:33:33.800
Like I said,
it's required for all plugins

00:33:33.800 --> 00:33:34.800
and it's a simple initialization.

00:33:34.800 --> 00:33:36.790
Whatever you need to do to
get your plugin started.

00:33:36.800 --> 00:33:38.870
If you need to go talk
to some native service,

00:33:38.870 --> 00:33:41.620
you might want to hook into it
at that point so you don't have

00:33:41.720 --> 00:33:44.800
to bog yourself down later when
you get your first real request.

00:33:44.800 --> 00:33:47.890
The other thing is
Windows Script Object Available.

00:33:47.970 --> 00:33:49.800
This is called shortly
after the initialization.

00:33:49.800 --> 00:33:53.800
You're passed a web script object.

00:33:53.800 --> 00:33:56.800
I think you can see up here
what the example of this is.

00:33:56.800 --> 00:34:00.970
The highlighted part there
is where we set ourselves,

00:34:00.970 --> 00:34:04.800
in this case the plugin object instance,
for a key.

00:34:04.800 --> 00:34:06.790
Where is this key going?

00:34:06.840 --> 00:34:10.580
This web script object that you're
getting passed here is a Cocoa wrapper

00:34:10.860 --> 00:34:12.800
to the JavaScript window object.

00:34:12.830 --> 00:34:16.800
All those calls you made to window.widget
and onShow and things like that.

00:34:16.800 --> 00:34:18.800
That is the window object.

00:34:18.800 --> 00:34:22.180
By doing this set value for key,
we're going to allow your

00:34:22.180 --> 00:34:26.070
plugin to be referenced
implicitly in JavaScript using,

00:34:26.140 --> 00:34:27.800
in this case, my plugin.

00:34:27.800 --> 00:34:30.800
It's now part of the window
object on the JavaScript side.

00:34:31.860 --> 00:34:33.610
The other optional
method implementations.

00:34:33.670 --> 00:34:35.950
We say optional because your
plugin is not going to break

00:34:35.950 --> 00:34:37.140
if you don't implement them.

00:34:37.150 --> 00:34:39.800
However, it's going to be fairly useless.

00:34:39.810 --> 00:34:43.490
They're optional,
but if you want to get anything done,

00:34:43.490 --> 00:34:45.800
you should probably write them.

00:34:45.960 --> 00:34:49.190
The most important one is "webscript
name for selector". This is

00:34:49.190 --> 00:34:52.790
how you expose specific methods
in your plugin to JavaScript.

00:34:52.800 --> 00:34:56.720
You receive a selector, in this case,
basically the method that is

00:34:56.820 --> 00:34:58.800
going to be called at some point.

00:34:58.800 --> 00:35:02.700
You return an NSString that is then
translated into the JavaScript equivalent

00:35:02.760 --> 00:35:04.700
of the function that you want to call.

00:35:05.000 --> 00:35:08.930
You don't need to implement this method,
but we really recommend you do because

00:35:09.110 --> 00:35:12.800
Objective-C methods have colons
in them for parameter definition.

00:35:12.800 --> 00:35:16.860
Those names tend to get mangled
when they go across the bridge,

00:35:16.860 --> 00:35:19.800
for lack of a better word, to JavaScript.

00:35:19.810 --> 00:35:24.800
Override all of your selector names
with a more JavaScript-friendly name,

00:35:24.800 --> 00:35:27.800
the kind of syntax you would
expect to use in JavaScript.

00:35:28.020 --> 00:35:30.800
Then there's
"isSelectorExcludedFromWebScript".

00:35:30.800 --> 00:35:34.710
This either says
yes or no as far as barring access

00:35:34.710 --> 00:35:36.750
to the method in the first place.

00:35:36.820 --> 00:35:39.800
It's kind of a double negative thing.

00:35:39.800 --> 00:35:48.660
If you don't want the method excluded,
you return no.

00:35:48.800 --> 00:35:56.800
If you do want it excluded,
or you don't want it exposed...

00:35:56.800 --> 00:36:00.800
You return no if you want to see it,
and you return yes if you don't.

00:36:00.800 --> 00:36:05.730
The default behavior is to
return yes for everything.

00:36:07.020 --> 00:36:10.670
and likewise there is "is_key"
excluded from Web Script and this is

00:36:10.830 --> 00:36:15.680
literal direct key access to member
variables inside the plugin object.

00:36:15.780 --> 00:36:20.300
We usually recommend you just
return "yes" in any case for this

00:36:20.300 --> 00:36:23.010
and if you have something that
you want JavaScript to access,

00:36:23.040 --> 00:36:28.010
go ahead and write an access or function
in good Cocoa programming style.

00:36:29.000 --> 00:36:31.620
Okay,
now I'm going to show you Widget Plugins.

00:36:31.620 --> 00:36:34.500
Can we go back to demo two please?

00:36:37.700 --> 00:36:40.450
Okay, so again,
one of the things you should have

00:36:40.530 --> 00:36:45.290
found in your accompanying DMG for
this session is the Fortune Widget,

00:36:45.290 --> 00:36:48.750
which I believe is also up on our
website and part of the SDK in

00:36:48.750 --> 00:36:50.160
Developer Examples Dashboard.

00:36:50.160 --> 00:36:54.100
So you can roll a die and find
out where you want to get it from.

00:36:54.100 --> 00:36:58.400
So this is a very simple Widget that
demonstrates the use of a plugin.

00:36:58.400 --> 00:37:02.980
This particular plugin just returns a
random set of strings to JavaScript to be

00:37:03.170 --> 00:37:05.600
displayed in this little Fortune cookie.

00:37:06.950 --> 00:37:10.850
And I,
that's not the one I was looking for,

00:37:10.850 --> 00:37:10.850
but...

00:37:11.140 --> 00:37:13.070
Things are going so well right now.

00:37:13.070 --> 00:37:13.240
I don't know.

00:37:13.240 --> 00:37:15.100
At least that one's a little better.

00:37:15.180 --> 00:37:19.940
So what this is doing is every
time I click on the fortune cookie,

00:37:19.960 --> 00:37:22.220
we go ahead and we ask the
Widget plugin for a new fortune.

00:37:22.240 --> 00:37:24.540
The Widget plugin returns
it as an NSString,

00:37:24.540 --> 00:37:27.710
which is then translated into a
JavaScript string that we can then

00:37:27.710 --> 00:37:29.700
just insert right into the DOM.

00:37:29.790 --> 00:37:31.700
So how do we do this?

00:37:31.800 --> 00:37:37.400
Well, let's go ahead and open up
the Widget for starters.

00:37:40.110 --> 00:37:42.460
And again, this is a Widget plugin.

00:37:42.460 --> 00:37:45.560
It's not a web plugin.

00:37:46.790 --> 00:37:51.570
Once Xcode comes up for us,
I can show you what I mean.

00:37:51.720 --> 00:37:53.540
Let's have a look at the HTML real quick.

00:37:53.550 --> 00:37:55.790
The HTML is wonderfully simple.

00:37:56.060 --> 00:37:59.860
Basically, we just have our fortune
cookie as the background,

00:37:59.860 --> 00:38:02.130
and then we have a quote,
which is just going to be a text

00:38:02.130 --> 00:38:06.090
string that we throw up based on
what we get back from the plugin.

00:38:06.790 --> 00:38:12.030
So, the first thing I want to show
you is this if fortune plugin.

00:38:12.150 --> 00:38:16.290
And fortune plugin is the name of
the Widget plugin in this case.

00:38:16.350 --> 00:38:20.170
And this name is set using that
Windows Script object available

00:38:20.620 --> 00:38:21.980
method when the plugin is loaded.

00:38:22.040 --> 00:38:23.050
I'll show you that in a second.

00:38:23.080 --> 00:38:26.600
But we're going to go ahead and
reference it using the same string

00:38:26.680 --> 00:38:28.820
that the plugin says you should use.

00:38:28.820 --> 00:38:32.460
And then we just start making
calls directly to it as if it were

00:38:32.460 --> 00:38:34.620
a regular JavaScript function.

00:38:34.620 --> 00:38:37.220
And,

00:38:37.720 --> 00:38:43.020
In this case we have one function
called logMessage and we just go

00:38:43.050 --> 00:38:46.980
ahead and we say log this for me
and then we go ahead and we get

00:38:46.980 --> 00:38:49.120
our fortune back from the plugin.

00:38:49.140 --> 00:38:52.410
And that's just going to return to
us as a normal JavaScript var and

00:38:52.470 --> 00:38:57.960
we go ahead and we set the quotes
in our HTML to that return value.

00:38:58.080 --> 00:39:00.320
So, pretty simple.

00:39:00.420 --> 00:39:05.110
So let's go ahead and take a look
at the actual plugin project.

00:39:06.240 --> 00:39:07.790
So here's our plugin.

00:39:07.790 --> 00:39:10.230
And like I said,
the most important thing here

00:39:10.230 --> 00:39:11.820
is the init with web view.

00:39:11.900 --> 00:39:13.710
And we're going to go
ahead and randomize,

00:39:13.790 --> 00:39:17.530
we're going to set up a random
number generator in our initializer,

00:39:17.530 --> 00:39:19.800
which is going to go ahead and
work through all of our quotes.

00:39:19.930 --> 00:39:23.860
Our quotes here is just set
up as a normal string array.

00:39:24.780 --> 00:39:28.360
And we have our
Windows Script object available.

00:39:28.380 --> 00:39:32.690
So this is just like in the slides,
set value self for key Fortune Plugin.

00:39:32.730 --> 00:39:36.420
And again, Fortune Plugin is how we were
referencing it in JavaScript.

00:39:36.500 --> 00:39:40.300
So this is setting Fortune Plugin
as a property of the

00:39:40.300 --> 00:39:42.680
Window object in the Widget.

00:39:43.250 --> 00:39:46.860
Because this is a simple
plugin with just two methods,

00:39:47.030 --> 00:39:50.130
here's our web script
name for selector method.

00:39:50.500 --> 00:39:54.730
If we're requesting Get Fortune,
this is how JavaScript should call it.

00:39:54.940 --> 00:39:57.400
For Log Message,
this is how Log Message should call it.

00:39:57.400 --> 00:39:58.400
So here's the difference.

00:39:58.400 --> 00:40:01.530
So you notice that Log Message in
the Cocoa world is going to have

00:40:01.610 --> 00:40:04.400
a colon because that represents
the parameter that gets sent in.

00:40:04.400 --> 00:40:08.490
We're going to return this back
to JavaScript as just Log Message,

00:40:08.500 --> 00:40:12.400
and then JavaScript will call that using
the open and close paren like it does.

00:40:12.400 --> 00:40:14.810
So there's a little
syntactic difference here,

00:40:14.810 --> 00:40:18.400
and you want to just basically close
those gaps by using this method.

00:40:18.400 --> 00:40:21.280
And then isSelector
excluded from Web Script?

00:40:21.320 --> 00:40:23.540
If it's the two methods
we want to expose,

00:40:23.540 --> 00:40:28.400
which in this case is all of them,
we return no, otherwise return yes.

00:40:28.400 --> 00:40:32.830
And as I said in the slides,
we always want to bar key access.

00:40:33.430 --> 00:40:39.720
So, now granted this is admittedly
something of a contrived example,

00:40:39.730 --> 00:40:41.290
you know,
there's no reason we couldn't just

00:40:41.290 --> 00:40:45.510
randomize the strings in JavaScript and
call alert instead of log message.

00:40:45.770 --> 00:40:47.700
But I think this
demonstrates real simply,

00:40:47.780 --> 00:40:50.670
you know, what it takes to get a
Widget plugin up and running.

00:40:50.940 --> 00:40:54.140
You know, Address Book, for example,
uses a plugin that goes ahead

00:40:54.140 --> 00:40:57.710
and calls the Address Book API,
gets people's names and addresses,

00:40:57.710 --> 00:41:02.350
and it basically has the
same skeleton around it.

00:41:03.090 --> 00:41:08.420
and Get Fortune goes ahead and gets a
random number and gives us an index from

00:41:08.540 --> 00:41:11.000
the Fortune array and returns that over.

00:41:11.000 --> 00:41:14.810
Now you notice there's no special
conversion or preparation required.

00:41:14.880 --> 00:41:20.190
You just return an NSString and the web
scripting protocol implementation goes

00:41:20.190 --> 00:41:22.540
ahead and transfers it as needed for you.

00:41:22.660 --> 00:41:25.690
So that's about it for Widget Plugins.

00:41:25.690 --> 00:41:27.950
Go back to the slides please.

00:41:30.960 --> 00:41:33.340
So now let's talk about WebKit plugins.

00:41:33.340 --> 00:41:39.010
Well, unlike the Widget plugins
which used a plugin key,

00:41:39.010 --> 00:41:42.820
and that's talking about Widget plugins,
the WebKit plugins require a key

00:41:42.820 --> 00:41:44.540
called Allow Internet Plugins.

00:41:44.540 --> 00:41:47.630
In other words,
anything that would be maybe in library

00:41:47.680 --> 00:41:52.500
Internet plugins off the home directory
or something specifically in the widget.

00:41:53.700 --> 00:41:57.710
And instead of using,
instead of explicitly calling

00:41:57.710 --> 00:42:02.000
out the plugin like we did
with the Widget plugin,

00:42:02.000 --> 00:42:04.730
we were just calling it
using Fortune plugin,

00:42:04.760 --> 00:42:07.460
we need to use an embed
tag to display it.

00:42:07.460 --> 00:42:10.560
And then when we're talking
to it later in JavaScript,

00:42:10.560 --> 00:42:13.840
we have to get it either by the
element ID that we assign it or

00:42:13.840 --> 00:42:18.660
we use the document embeds array
that's part of normal JavaScript.

00:42:18.660 --> 00:42:22.600
And we're going to create
this one as a Cocoa bundle.

00:42:22.600 --> 00:42:23.700
As opposed to the foundation bundle.

00:42:23.700 --> 00:42:24.200
And then we're going to create
this one as a Cocoa bundle.

00:42:24.220 --> 00:42:24.700
As opposed to the foundation bundle.

00:42:24.700 --> 00:42:26.300
Because our goal is for
this thing to be graphical.

00:42:26.300 --> 00:42:28.110
Otherwise,
we'd just be writing a Widget plugin.

00:42:28.140 --> 00:42:34.030
So, and then there are the typical web
scripting APIs that we saw earlier.

00:42:34.040 --> 00:42:36.930
You need to implement those
just like in the Widget plugin

00:42:37.010 --> 00:42:38.470
to get scripting access.

00:42:38.550 --> 00:42:41.790
But there's also web plugin methods
that you're going to need to implement.

00:42:41.860 --> 00:42:44.260
The most important one is
plugin view with arguments.

00:42:44.280 --> 00:42:48.710
And this is your initializer function
just like in it with web view.

00:42:48.740 --> 00:42:52.280
And then you go ahead and
do object for web script,

00:42:52.320 --> 00:42:53.560
which is basically, usually,
you're going to have a function

00:42:53.560 --> 00:42:53.660
called object for web script.

00:42:53.660 --> 00:42:53.660
And then you go ahead and
do object for web script,

00:42:53.660 --> 00:42:53.660
which is basically, usually,
you're going to have a function

00:42:53.660 --> 00:42:53.660
called object for web script.

00:42:53.660 --> 00:42:56.000
And then you usually just return self.

00:42:56.000 --> 00:42:58.040
And your web plugin
initialize and destroy,

00:42:58.090 --> 00:43:00.000
which is going to be when
the plugin first gets loaded,

00:43:00.020 --> 00:43:02.480
and then closed,
usually in the case of a browser

00:43:02.480 --> 00:43:04.000
when the window is closed.

00:43:04.000 --> 00:43:06.420
And we have web plugin start and stop.

00:43:06.420 --> 00:43:09.480
And web plugin set is selected
for if you want to do something

00:43:09.480 --> 00:43:11.520
in case the user actually selects.

00:43:11.520 --> 00:43:14.920
It's really more useful in
Safari than in Dashboard.

00:43:14.930 --> 00:43:17.450
So the plugin view with arguments method.

00:43:17.530 --> 00:43:20.300
This is required by the
web plugin protocol.

00:43:20.300 --> 00:43:21.670
You initialize the view.

00:43:21.700 --> 00:43:23.550
And you receive an arguments dictionary.

00:43:23.860 --> 00:43:25.160
Which contains a lot of things.

00:43:25.250 --> 00:43:28.900
But what might be useful to you
is this is how you would get into

00:43:29.170 --> 00:43:32.760
the attributes that you might
want to set in your embed tag.

00:43:32.790 --> 00:43:36.420
Things like source or whatever else
you want to do to customize the

00:43:36.420 --> 00:43:38.950
behavior of the plugin from the start.

00:43:38.970 --> 00:43:40.520
And you go ahead and you grab that.

00:43:40.580 --> 00:43:42.720
It's not the dictionary
that you're passed.

00:43:42.750 --> 00:43:45.350
But it's a member of that
dictionary that's identified by

00:43:45.370 --> 00:43:47.010
the web plugin attributes key.

00:43:47.020 --> 00:43:50.610
And this is going to be all your
attributes from the embed tag.

00:43:52.200 --> 00:43:55.360
So,
when you're working with WebKit plugins,

00:43:55.470 --> 00:43:58.340
it's a little different
from working in Safari.

00:43:58.340 --> 00:44:00.960
Something that's very important is
you're going to want to implement the

00:44:01.000 --> 00:44:03.400
WebPluginStart and WebPluginStop methods.

00:44:03.400 --> 00:44:07.390
And then you can, by exposing those to
JavaScript using the same stuff

00:44:07.390 --> 00:44:10.680
that we did with Widget plugins,
you want to tie those into

00:44:10.680 --> 00:44:12.740
the onShow and onHide events.

00:44:12.740 --> 00:44:14.920
And the reason you want
to do this is because,

00:44:15.210 --> 00:44:18.290
presumably, you have a visual plugin,
and it's probably doing

00:44:18.360 --> 00:44:20.800
some kind of work,
some kind of animation.

00:44:20.960 --> 00:44:25.490
And you don't want that plugin to consume
cycles while the dashboard is hidden.

00:44:25.540 --> 00:44:30.540
So you can, by hooking into
WebPluginStop using onHide,

00:44:30.640 --> 00:44:34.280
we can go ahead and shut the thing
off for now and then restart it

00:44:34.600 --> 00:44:36.700
when the dashboard is shown again.

00:44:36.700 --> 00:44:38.860
So I'm going to show you
a quick demo of this.

00:44:39.120 --> 00:44:44.100
Can we go back to demo two?

00:44:44.120 --> 00:44:46.910
Okay.

00:44:50.350 --> 00:44:52.590
So I'm going to open up
this Picture Frame Widget,

00:44:52.620 --> 00:44:56.840
which I believe they may have
demoed this morning at the advanced

00:44:56.840 --> 00:44:59.260
WebKit development session.

00:44:59.320 --> 00:45:03.730
And this Widget basically hooks
into Core Image and does a couple of

00:45:03.730 --> 00:45:05.940
transitions through a series of pictures.

00:45:05.980 --> 00:45:09.360
And I think the theme
here is Matisse paintings,

00:45:09.360 --> 00:45:13.360
and it basically randomizes
the transforms that are

00:45:13.360 --> 00:45:15.830
done and the transitions and

00:45:16.950 --> 00:45:22.640
This rollover control here
is actually an HTML element,

00:45:22.640 --> 00:45:25.660
not part of the plugin,
something that we just bring on when

00:45:25.660 --> 00:45:27.330
the user mouses into the Widget.

00:45:27.650 --> 00:45:32.410
And then by pressing start and stop
we have on-click handlers here.

00:45:32.770 --> 00:45:37.000
and then communicate through to the
plugin using the web scripting protocol,

00:45:37.000 --> 00:45:39.500
same way we did with the Widget plugin.

00:45:39.520 --> 00:45:42.680
So, how is this implemented?

00:45:45.120 --> 00:45:50.250
Well, let's go ahead and start by
looking at the familiar stuff.

00:45:50.320 --> 00:45:53.010
And this is our web scripting
implementation here where we have a

00:45:53.020 --> 00:45:56.160
selector excluded from web script,
web script named for selector.

00:45:56.160 --> 00:45:58.830
This is the stuff that we
already did in the Widget plugin.

00:45:58.840 --> 00:46:00.790
We have a few more
selectors in this case,

00:46:01.000 --> 00:46:03.920
but the implementation
is more or less the same.

00:46:03.930 --> 00:46:07.910
Now, I also want to have a look at the

00:46:08.390 --> 00:46:28.900
Webkit plugin implementation.

00:46:28.900 --> 00:46:28.900
So here's our plugin view with
arguments call and this is where we

00:46:28.900 --> 00:46:28.900
set everything up with the plugin.

00:46:28.900 --> 00:46:28.900
All the core image things that we need
to set up and we go ahead and we get the

00:46:28.900 --> 00:46:28.900
width and height things in our HTML file.

00:46:28.900 --> 00:46:28.900
Let me show you.

00:46:30.180 --> 00:46:34.000
In the case of the Widget plugin,
we didn't have to do anything in

00:46:34.000 --> 00:46:38.030
the HTML layout because this was
just a data service that was going

00:46:38.030 --> 00:46:40.100
to be available in JavaScript.

00:46:40.100 --> 00:46:44.090
But because this WebKit plugin is
doing some displayable content,

00:46:44.100 --> 00:46:48.100
we actually show it here in
the HTML using the embed tag.

00:46:48.100 --> 00:46:49.100
We set an ID here.

00:46:49.100 --> 00:46:51.470
Here is our width and height.

00:46:51.690 --> 00:46:56.120
And that width and height is what we're
grabbing over here when we go ahead and

00:46:56.130 --> 00:46:58.100
we get the WebKit plugin attributes.

00:46:58.160 --> 00:47:01.730
And that allows us to set the
height and width of the control,

00:47:01.730 --> 00:47:04.780
as well as the source attribute,
which tells us which

00:47:04.780 --> 00:47:06.250
picture to start with.

00:47:07.840 --> 00:47:10.710
and our initialized method,
we really did everything we needed

00:47:10.710 --> 00:47:13.500
to in plugin view with arguments
so that we leave that empty.

00:47:13.610 --> 00:47:17.420
And here's Web Plugin
Start and Web Plugin Stop.

00:47:17.590 --> 00:47:20.190
This is basically very simple.

00:47:20.200 --> 00:47:26.140
We go ahead and we start the
transition timer and stop it on stop.

00:47:26.290 --> 00:47:33.360
Let's show you the importance
of these functions right now.

00:47:33.360 --> 00:47:38.230
I'm going to actually
bring up Activity Monitor.

00:47:38.580 --> 00:47:42.500
You can see here,
there's our picture frame client.

00:47:42.540 --> 00:47:44.880
And, um, well it's not playing.

00:47:44.930 --> 00:47:46.500
So let's play it.

00:47:46.500 --> 00:47:50.500
And you can see it's taking
up a decent amount of the CPU,

00:47:50.500 --> 00:47:52.040
you know,
periodically when it actually has

00:47:52.050 --> 00:47:54.940
to perform one of the transitions.

00:47:54.940 --> 00:47:54.940
So, let's get rid of the, uh...

00:47:55.290 --> 00:47:58.200
I'm going to hide this.

00:47:58.200 --> 00:48:02.170
In a perfect world,
this would go down quite a bit.

00:48:02.210 --> 00:48:06.200
Unfortunately, it isn't.

00:48:06.200 --> 00:48:06.200
What we need to do

00:48:06.490 --> 00:48:12.350
is be a much better
dashboard citizen and...

00:48:14.840 --> 00:48:20.770
hook our on-hide and on-show handlers in
to go ahead and stop and start the plugin

00:48:21.080 --> 00:48:23.530
when Dashboard is shown and hidden.

00:48:25.150 --> 00:48:29.130
We have an onHide method,
but I have simply commented

00:48:29.130 --> 00:48:32.140
out the code that assigns it.

00:48:32.140 --> 00:48:36.170
So, simple as that.

00:48:37.810 --> 00:48:41.100
and our onHide method.

00:48:41.120 --> 00:48:46.720
Notice that it goes and gets the, oh,
I'm sorry, we call stopPlayingImages,

00:48:46.780 --> 00:48:49.470
which is going to be,

00:48:49.700 --> 00:48:55.940
and we basically just clear
the timeout that goes ahead and

00:48:56.030 --> 00:48:58.400
does the stop and start there.

00:49:00.190 --> 00:49:08.350
By assigning that handler, kill this one,
bring activity monitor back to the front,

00:49:11.600 --> 00:49:17.360
Now we can see it's doing some work.

00:49:17.360 --> 00:49:20.660
And now if I did these things right,
it should go ahead and

00:49:20.660 --> 00:49:22.530
bring itself back down.

00:49:22.600 --> 00:49:24.200
And now we're down to zero.

00:49:24.300 --> 00:49:26.310
And it should stay there.

00:49:28.030 --> 00:49:30.250
I'm really taking a big
risk by waiting this long.

00:49:30.310 --> 00:49:32.760
I should quit while I'm ahead.

00:49:32.800 --> 00:49:36.250
Alright,
so now that's a good Dashboard Citizen.

00:49:36.720 --> 00:49:41.580
and I'm pretty sure that's
all I got to show you.

00:49:41.620 --> 00:49:42.600
Can we go back to slides?

00:49:42.600 --> 00:49:47.990
I think it's time for
Christian to come back.

00:49:53.400 --> 00:49:57.850
So, now that we've told you about some
great things you can do with plugins

00:49:57.850 --> 00:50:00.870
and command line and network access,
we're going to just touch on

00:50:00.930 --> 00:50:03.330
a couple of other useful bits,
and I'm going to go through

00:50:03.330 --> 00:50:04.400
a mea culpa as well.

00:50:04.400 --> 00:50:06.690
So, first and foremost,
there's some great new

00:50:06.780 --> 00:50:09.510
WebKit technologies you might
want to take advantage of,

00:50:09.560 --> 00:50:11.780
and you'll find documentation on these.

00:50:11.780 --> 00:50:14.260
There's the Canvas,
which lets you do arbitrary

00:50:14.300 --> 00:50:15.700
drawing in a 2D space.

00:50:15.700 --> 00:50:18.180
There was a demo of this
during our overview yesterday.

00:50:18.620 --> 00:50:21.620
So, if you ever have to do any drawing,
instead of using a WebKit plugin

00:50:21.620 --> 00:50:24.380
like Matt just showed you,
try to use the JavaScript Canvas.

00:50:24.380 --> 00:50:26.260
It's just a lot cleaner,
a lot more lightweight.

00:50:26.260 --> 00:50:28.420
It's really easy to use.

00:50:28.420 --> 00:50:30.400
It uses core graphics like calls.

00:50:30.400 --> 00:50:31.820
I strongly recommend you look at it.

00:50:31.880 --> 00:50:33.720
Our Widgets use it,
so if you ever look at the

00:50:33.740 --> 00:50:36.340
Flight Tracker Widget or a Stocks Widget,
they both use it to do

00:50:36.430 --> 00:50:37.590
a lot of their drawing.

00:50:37.760 --> 00:50:40.810
The Graph in Stocks uses this,
and the Airplane Arc in the

00:50:40.810 --> 00:50:42.710
Flight Tracker does as well.

00:50:42.720 --> 00:50:45.850
Next thing you should look
at using is the Search field.

00:50:45.850 --> 00:50:47.750
If you ever need to do any
searching inside of your Widget,

00:50:48.120 --> 00:50:50.660
you look at the Dictionary Widget
or the Address Book Widget.

00:50:50.660 --> 00:50:52.560
They both have that
little round search field,

00:50:52.590 --> 00:50:54.100
which you see in so many
of our applications.

00:50:54.150 --> 00:50:56.940
So, that's a new input type
that is supported in Tiger.

00:50:56.940 --> 00:51:00.220
It's called InputType=Search.

00:51:00.260 --> 00:51:01.900
So,
you might want to consider using that,

00:51:01.900 --> 00:51:02.220
too.

00:51:02.220 --> 00:51:04.250
There's Drag and Drop.

00:51:04.250 --> 00:51:06.180
You probably don't know this,
but if you were at the

00:51:06.180 --> 00:51:08.070
Apple Design Awards,
you do know this.

00:51:08.100 --> 00:51:12.260
The best Tiger program
was Transmit by Panic,

00:51:12.320 --> 00:51:14.740
and they have a widget that
accompanies their application

00:51:14.820 --> 00:51:17.460
that does Drag and Drop.

00:51:17.460 --> 00:51:20.860
If you ever need to FTP a file,
you can put their widget

00:51:20.860 --> 00:51:24.460
on your dashboard,
hook it up to one of your FTP servers,

00:51:24.460 --> 00:51:26.360
and whenever you need
to send a file there,

00:51:26.450 --> 00:51:28.430
you can just begin a drag,
show dashboard,

00:51:28.510 --> 00:51:30.800
and drop it on this widget,
and it'll just automatically

00:51:30.800 --> 00:51:31.450
send it to that.

00:51:31.500 --> 00:51:33.890
So, that's a great use of Drag and Drop,
and it's one of the little

00:51:33.890 --> 00:51:36.460
hidden gems of Dashboard,
the fact that you can do that.

00:51:36.460 --> 00:51:38.320
The Tile Game Widget
also lets you do this.

00:51:38.460 --> 00:51:40.270
The final thing which you
might want to take advantage

00:51:40.270 --> 00:51:41.460
of is Pasteboard Operations.

00:51:41.460 --> 00:51:43.460
So, copy, cut, and paste.

00:51:43.460 --> 00:51:46.880
If you look at our Calculator Widget,
it uses this, and the reason for that is

00:51:46.880 --> 00:51:49.870
because there's no clear
text field on the calculator,

00:51:49.870 --> 00:51:49.880
right?

00:51:49.980 --> 00:51:51.880
But people would probably expect to
be able to copy a value out of it,

00:51:51.880 --> 00:51:53.880
or paste one in there.

00:51:53.880 --> 00:51:57.620
So, there's some handlers in the body
tag there which lets you handle that.

00:51:57.890 --> 00:52:01.460
There are also DHTML effects
that you should be aware of.

00:52:01.460 --> 00:52:04.040
These aren't Widget-specific, really.

00:52:04.040 --> 00:52:07.610
They're just DHTML tricks that work with
timers and resizing and things like that.

00:52:07.720 --> 00:52:09.360
There are scroll bars and scrollers.

00:52:09.360 --> 00:52:12.640
There's a great bit of sample code which
Matt wrote called "scroller" and it

00:52:12.740 --> 00:52:16.860
shows you how to very easily integrate
a scrollable region inside of there.

00:52:16.890 --> 00:52:22.040
In 10.4.1,
there are also new handlers that

00:52:22.040 --> 00:52:24.000
let you do scroll wheel support.

00:52:24.010 --> 00:52:26.010
We hope to have some
documentation out on that,

00:52:26.090 --> 00:52:26.260
too.

00:52:26.270 --> 00:52:29.290
You can also do scroll wheel
support inside of a Widget.

00:52:29.340 --> 00:52:30.380
There's stretching.

00:52:30.400 --> 00:52:31.910
That's what our Weather Widget does.

00:52:32.020 --> 00:52:34.100
You'll notice when you click on it,
it stretches down.

00:52:34.120 --> 00:52:36.810
It's basically for
toggling between two sizes.

00:52:36.860 --> 00:52:39.500
Matt wrote a great bit of sample
code that's called "stretcher"

00:52:39.500 --> 00:52:42.660
which teaches you how to do
that nice and clean and easy.

00:52:42.930 --> 00:52:43.860
There's live resizing.

00:52:43.860 --> 00:52:46.860
There's a sample code called "grid"
which lets you do live resizing.

00:52:46.880 --> 00:52:49.330
You shouldn't use that all the time,
but sometimes it's necessary for

00:52:49.360 --> 00:52:51.850
things like the dictionary if you
have a ton of information to show and

00:52:51.850 --> 00:52:53.850
people want to view it all in one shot.

00:52:54.030 --> 00:52:55.290
And then finally, there's fading.

00:52:55.440 --> 00:52:56.160
So, if you're using a lot
of different things,

00:52:56.160 --> 00:52:58.060
if you ever need to fade text in and out,
for instance,

00:52:58.060 --> 00:53:00.480
you saw that the Fortune Widget,
you know, fades those fortunes in

00:53:00.480 --> 00:53:02.660
and out instead of just,
you know, abruptly changing them.

00:53:02.660 --> 00:53:03.860
It's a nice effect.

00:53:03.860 --> 00:53:06.860
Matt's Fader Widget does all that, too.

00:53:06.860 --> 00:53:10.660
So, if I could switch to
demo one really quick.

00:53:10.660 --> 00:53:14.330
One of the things that people called
me on yesterday in the lab was the

00:53:14.480 --> 00:53:18.250
fact that I told you to use the glass
done button which we provide for you

00:53:18.320 --> 00:53:20.060
in System Library Widget Resources.

00:53:20.060 --> 00:53:22.560
And I didn't give you
much more than that.

00:53:22.560 --> 00:53:26.060
So, I'm going to fix that now
since I have a few minutes.

00:53:26.060 --> 00:53:28.820
So, what I'm going to do is I'm going to
start back or I'm going to finish off

00:53:28.820 --> 00:53:31.910
today and the whole WWDC for dashboard
with the same place we started and

00:53:31.990 --> 00:53:33.560
that's with the Hello World Widget.

00:53:33.560 --> 00:53:36.360
And what we're going to do is we're
going to add this done button to it.

00:53:36.360 --> 00:53:38.060
So,
I'm going to show you how we did that.

00:53:38.080 --> 00:53:39.860
It's a little bit tricky
but it's not too hard.

00:53:39.860 --> 00:53:42.560
So, here's the widget running, you know,
without the done button,

00:53:42.610 --> 00:53:44.160
just the Hello World Widget.

00:53:44.160 --> 00:53:48.260
And what we're going to do is
I'm going to pop this open here.

00:53:48.260 --> 00:53:50.640
And of course,
I do have a script ready for this guy.

00:53:50.750 --> 00:53:52.610
Let's bring him up.

00:53:54.440 --> 00:53:56.650
You just got to do a couple
of things that aren't too hard

00:53:56.790 --> 00:53:59.410
and that will let you use the
standard glass buttons for free.

00:53:59.410 --> 00:54:00.670
It will size them automatically.

00:54:00.760 --> 00:54:01.300
You will get all the behaviors.

00:54:01.300 --> 00:54:02.800
It's really simple.

00:54:02.800 --> 00:54:05.490
That way if we ever change the
artwork or anything like that,

00:54:05.490 --> 00:54:06.800
you will get it for free.

00:54:06.800 --> 00:54:08.800
So I'm going to take this and
I'm going to open it up here.

00:54:08.800 --> 00:54:10.800
We've got all of our
beautiful disclaimers.

00:54:10.800 --> 00:54:13.020
Okay,
so the first bit we are going to do is we

00:54:13.020 --> 00:54:14.800
are going to add a new div to our body.

00:54:14.800 --> 00:54:16.800
And the div is actually
going to be empty.

00:54:16.800 --> 00:54:17.680
It's just going to be done.

00:54:17.790 --> 00:54:19.300
It's going to be called done.

00:54:19.340 --> 00:54:22.300
And we give it an ID because we are
going to reference this in JavaScript.

00:54:22.300 --> 00:54:26.300
The command that we use in JavaScript,
by the way, will provide all the artwork.

00:54:26.300 --> 00:54:28.300
That's why I'm not referencing it here.

00:54:28.300 --> 00:54:30.300
So in CSS, then,
I'm also going to position it.

00:54:30.300 --> 00:54:32.300
This is just some general
purpose cleanup work here.

00:54:32.300 --> 00:54:34.960
Again, we are just going to position
it absolutely and then put

00:54:34.960 --> 00:54:38.300
it roughly in the middle,
a little bit down on our Widget.

00:54:38.300 --> 00:54:39.300
That's not too important.

00:54:39.300 --> 00:54:42.300
Where it gets good is
inside of our JavaScript,

00:54:42.300 --> 00:54:45.300
inside of the JavaScript portion of
the head portion of the HTML file,

00:54:45.300 --> 00:54:47.990
we are going to include
as our source system,

00:54:47.990 --> 00:54:53.100
library, Widget resources, button,
generic button, dot, generic button, dot,

00:54:53.100 --> 00:54:53.300
js.

00:54:53.300 --> 00:54:56.300
So there are some functions in here
that auto-generate the buttons for you.

00:54:56.300 --> 00:54:57.300
We are going to use one of them.

00:54:57.410 --> 00:54:59.470
So just remember, look in system,
library,

00:54:59.470 --> 00:55:01.300
Widget resources if you want this stuff.

00:55:01.370 --> 00:55:03.300
The file is right there
in the button folder.

00:55:03.300 --> 00:55:05.290
So we just have to include it here.

00:55:05.310 --> 00:55:10.300
And then once we do,
we are going to use an onLoad handler.

00:55:10.400 --> 00:55:50.700
[Transcript missing]

00:55:51.730 --> 00:56:01.120
DoneClicked obtains the
DOM text and changes its text

00:56:01.280 --> 00:56:07.550
to "Goodbye" In our body,
I need to put an onLoad handler

00:56:07.600 --> 00:56:11.600
that calls the loaded function
I put in here a minute ago.

00:56:11.600 --> 00:56:15.600
I'm going to save this, close it,
and open it.

00:56:15.600 --> 00:56:19.600
And sure enough, I've got this glassy
nice little done button.

00:56:19.600 --> 00:56:20.600
Click on it and it says goodbye.

00:56:20.600 --> 00:56:23.760
And that is my last demo.

00:56:23.760 --> 00:56:24.600
Slides please.

00:56:28.030 --> 00:56:31.530
So, today we have covered a couple
of really important things.

00:56:31.660 --> 00:56:34.140
Technologies that probably,
that you are going to want to

00:56:34.140 --> 00:56:36.490
leverage if you want to take
your Widget to the next level.

00:56:36.500 --> 00:56:41.140
These are great technologies
which open up a whole world

00:56:41.140 --> 00:56:42.700
of usage for your Widget.

00:56:42.730 --> 00:56:45.090
You can use command line
utilities and any type of,

00:56:45.090 --> 00:56:47.560
anything that you can do
with Unix you can do here.

00:56:47.830 --> 00:56:51.950
Scripts or command lines,
things like uptime and stuff like that.

00:56:52.660 --> 00:56:56.500
We have given you access to HTTP requests
and XML feeds so that you can do

00:56:56.520 --> 00:56:58.640
anything with network resources.

00:56:58.640 --> 00:57:00.240
Pull images off, anything like that.

00:57:00.240 --> 00:57:03.720
We have given you Widget plugins that
let you access native APIs so you

00:57:03.720 --> 00:57:07.840
can integrate with your own classes,
our frameworks, anything in Objective C.

00:57:07.840 --> 00:57:10.300
And finally,
we have given you some great WebKit,

00:57:10.300 --> 00:57:13.800
the capability to do WebKit plugins
and that lets you do custom drawing,

00:57:13.800 --> 00:57:17.100
OpenGL, menus, anything like that from
within your Widget.

00:57:17.120 --> 00:57:20.160
So, at this point I would like to
point you to the documentation.

00:57:20.160 --> 00:57:22.140
There are two bits there.

00:57:22.220 --> 00:57:24.880
There is the dashboard programming
guide and the dashboard reference which

00:57:24.960 --> 00:57:28.220
both cover everything that we have
talked about today and more in depth.

00:57:28.220 --> 00:57:31.010
There are also some great
JavaScript documents about

00:57:31.010 --> 00:57:33.550
Safari and JavaScript so you might
want to look at those as well.

00:57:33.700 --> 00:57:36.250
There is also the sample
code I mentioned before.

00:57:36.290 --> 00:57:37.030
That is there as well.

00:57:37.130 --> 00:57:40.320
If you have any questions,
feel free to contact Alan Samuel.

00:57:40.500 --> 00:57:41.660
He is our evangelist.

00:57:41.660 --> 00:57:45.020
You can get a hold of
him at Bluger1@apple.com.

00:57:45.090 --> 00:57:46.820
And feel free to join our mailing list.

00:57:46.910 --> 00:57:50.140
We have a dashboard developer
community at lists.apple.com.

00:57:50.140 --> 00:57:51.800
You can browse the archives there and
see what has been discussed already.

00:57:51.800 --> 00:57:53.730
And then feel free to join and
ask questions about your Widgets.

00:57:53.830 --> 00:57:57.800
That is dashboarddev@lists.apple.com.