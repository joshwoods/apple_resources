WEBVTT

00:00:00.520 --> 00:00:02.190
Good afternoon, everyone.

00:00:02.460 --> 00:00:07.720
Welcome to session 108, VoiceOver and
Making Your Carbon Application Accessible

00:00:07.740 --> 00:00:08.030
.

00:00:08.140 --> 00:00:11.320
My name is Patti Yeh,
and I'm a software engineer

00:00:11.320 --> 00:00:13.240
with the VoiceOver team.

00:00:13.400 --> 00:00:17.080
Let me go ahead and give you a sense
what we're going to be talking about.

00:00:17.190 --> 00:00:21.160
If I could find where my clicker is.

00:00:21.160 --> 00:00:22.990
Here we go.

00:00:29.160 --> 00:00:33.090
I think I'm missing a slide.

00:00:33.240 --> 00:00:34.100
Oh, well.

00:00:34.100 --> 00:00:36.480
Let me just go ahead and
tell you what we're going to

00:00:36.480 --> 00:00:38.100
cover in the session today.

00:00:38.200 --> 00:00:41.210
In the session today,
in the first 15 minutes or so,

00:00:41.210 --> 00:00:44.100
I'll tell you about VoiceOver.

00:00:44.100 --> 00:00:47.870
I'll tell you why you should
make your application accessible.

00:00:48.180 --> 00:00:50.530
Later on,
I'll give you a demonstration of some

00:00:50.590 --> 00:00:53.100
of the basic features of VoiceOver.

00:00:53.270 --> 00:00:54.790
After that,
we'll have Guy Fullerton up on

00:00:54.790 --> 00:00:58.920
stage to show you how to make
your application accessible.

00:01:00.020 --> 00:01:03.080
So, for those of you who don't
know what VoiceOver is,

00:01:03.080 --> 00:01:05.420
it's Apple Screen Reader technology.

00:01:05.630 --> 00:01:10.960
Some of you may have heard it at
yesterday's State of Union presentation.

00:01:11.160 --> 00:01:15.500
But if you haven't, VoiceOver,
what it does is it speaks all the

00:01:15.500 --> 00:01:18.070
activities on the screen for you.

00:01:18.220 --> 00:01:23.000
And for the Tiger release,
we're supporting English.

00:01:23.970 --> 00:01:28.790
ScreenReader is also an alternative
interface for users to interact with

00:01:28.920 --> 00:01:35.090
the computer without ever having to
use the mouse or the screen display.

00:01:36.530 --> 00:01:41.400
There's the session overview if
you didn't catch that earlier.

00:01:41.620 --> 00:01:45.190
VoiceOver is fully integrated
into the operating system.

00:01:45.310 --> 00:01:46.200
It is built in.

00:01:46.200 --> 00:01:47.520
What does that mean?

00:01:47.640 --> 00:01:51.440
It means it is part of
the installation process.

00:01:51.600 --> 00:01:53.780
And if you're ready to
set up your computer,

00:01:53.890 --> 00:01:56.820
it is there to help you,
to guide you through it.

00:01:56.960 --> 00:01:59.820
If you wait for the
MacBuddy music to stop,

00:01:59.980 --> 00:02:02.190
this is what you'll hear.

00:02:08.090 --> 00:02:10.000
The volume, volume please.

00:02:10.000 --> 00:02:18.110
All right, well it looks like we
don't have the audio here.

00:02:18.960 --> 00:02:24.400
But if you go and install your DVD,
I encourage you to try it out

00:02:24.400 --> 00:02:26.730
and see what you hear from it.

00:02:28.000 --> 00:02:34.740
So, VoiceOver is available for
you during login time too.

00:02:34.740 --> 00:02:34.740
And,

00:02:34.890 --> 00:02:39.180
By saying that it is built-in
means that it's part of the Finder,

00:02:39.180 --> 00:02:43.110
Desktop, Menu Bar, Dock, etc.

00:02:43.600 --> 00:02:48.190
Also, many of the applications
shipped with Tiger are already

00:02:48.190 --> 00:02:52.920
accessorized to work with VoiceOver,
and we sincerely hope that your

00:02:52.920 --> 00:02:56.070
application will be accessible soon,
too.

00:02:57.150 --> 00:03:01.140
Like I said earlier,
VoiceOver is fully integrated

00:03:01.220 --> 00:03:02.740
into the operating system.

00:03:02.780 --> 00:03:09.420
What's more than just that is installed
by default onto every Tiger system.

00:03:09.840 --> 00:03:14.720
That means a user can now walk
up to any computer running Tiger.

00:03:14.760 --> 00:03:19.720
Could be the computer lab, Apple Store,
library, you name it.

00:03:19.810 --> 00:03:26.170
Press Command F5 to turn VoiceOver on,
and bang, the computer is now accessible.

00:03:28.110 --> 00:03:31.000
So who will benefit from using VoiceOver?

00:03:31.040 --> 00:03:34.740
Well, obviously those who
are visually impaired,

00:03:34.920 --> 00:03:37.310
blind, or learning disabled.

00:03:37.560 --> 00:03:39.260
It's more than just that.

00:03:39.260 --> 00:03:42.800
It's everyone who collaborates with them.

00:03:42.930 --> 00:03:46.500
That could be the parent, the teacher,
the co-worker,

00:03:46.700 --> 00:03:50.950
sighted folks like you and I who
are working together with a screen

00:03:51.310 --> 00:03:53.740
reader user on that same computer.

00:03:53.900 --> 00:03:57.260
Later in my demonstration,
I'll show you some of those visual cues

00:03:57.440 --> 00:04:01.610
that help those who are collaborating
to work together with the screen

00:04:01.610 --> 00:04:05.910
reader user so they can follow along
when they're using the computer.

00:04:06.310 --> 00:04:09.440
So who else will benefit
from using VoiceOver?

00:04:09.480 --> 00:04:11.960
Well, I for one will.

00:04:12.020 --> 00:04:14.580
See, computer is very important to me.

00:04:14.650 --> 00:04:16.920
On a daily basis,
I probably use it for email,

00:04:16.920 --> 00:04:19.960
surfing the web, doing work,
all these things, right?

00:04:19.960 --> 00:04:22.630
And also,
I store a lot of stuff on my computer,

00:04:22.630 --> 00:04:27.180
like digital photos, MP3 songs,
my financial documents, et cetera.

00:04:27.180 --> 00:04:31.940
So I don't know what I would do
now if I can't use my computer.

00:04:33.240 --> 00:04:38.730
See, the other thing is, as I get older,
I might lose my vision.

00:04:38.970 --> 00:04:42.370
I might have a harder
time to use the mouse.

00:04:42.430 --> 00:04:47.440
So when you combine those together,
it may be harder to use the computer,

00:04:47.440 --> 00:04:51.390
and it could be at one point where
I won't be able to access my computer.

00:04:51.450 --> 00:04:55.870
The good news is Apple has already
done a lot of things to make sure that

00:04:55.870 --> 00:05:00.200
there's an alternative interface for
users to use that computer via VoiceOver.

00:05:00.230 --> 00:05:08.330
So all of us can potentially
benefit from this.

00:05:08.810 --> 00:05:11.400
So as a developer that's
representing your company,

00:05:11.400 --> 00:05:14.630
you may be wondering,
what is the business benefit of

00:05:14.630 --> 00:05:17.030
making your application accessible?

00:05:17.240 --> 00:05:20.930
The short answer is Section 508.

00:05:21.040 --> 00:05:25.240
Section 508 is a US law that
states all government agencies must

00:05:25.360 --> 00:05:29.820
provide access to member of the
public and the disabled employees.

00:05:29.860 --> 00:05:33.720
And similar laws and trends are
happening around the world too.

00:05:33.800 --> 00:05:38.520
So by simply making your
application accessible,

00:05:38.700 --> 00:05:43.670
You have a much higher chance
to increase your market share.

00:05:43.670 --> 00:05:47.450
And as an example,
the education system now could begin to

00:05:47.450 --> 00:05:52.530
evaluate your product when they're making
that next round of software purchases.

00:05:52.670 --> 00:05:55.430
So, of course,
what's good for you is good for Apple.

00:05:55.790 --> 00:05:59.320
Apple's market share will increase,
which will then come back and

00:05:59.540 --> 00:06:01.800
boost your market even further.

00:06:01.940 --> 00:06:04.130
It's good for all of us.

00:06:04.360 --> 00:06:09.200
So at this time,
I would like to go ahead and go

00:06:09.200 --> 00:06:14.470
to the demo to show you some of
the basic features of VoiceOver.

00:06:14.850 --> 00:06:18.710
So, first thing we have to
do is turn VoiceOver on.

00:06:19.030 --> 00:06:22.510
For those of you who might have
attended yesterday's session

00:06:22.510 --> 00:06:27.110
or heard me earlier today,
remember what the key is to turn it on.

00:06:28.090 --> 00:06:30.300
Command F5.

00:06:30.440 --> 00:06:34.270
VoiceOver on Finder 108.

00:06:34.270 --> 00:06:36.900
Demo selected folder.

00:06:37.060 --> 00:06:41.040
Okay, so the task I'm going to show
you today is we're just going

00:06:41.040 --> 00:06:43.040
to go and check our email.

00:06:43.170 --> 00:06:46.340
So to do that,
I'll go ahead and go to the

00:06:46.340 --> 00:06:49.370
doc and launch Mail.app.

00:06:50.000 --> 00:07:01.710
Doc Finder Runny System Preferences
Mail Runny Mail Inbox 26

00:07:01.710 --> 00:07:01.710
Messages Window Delete Button

00:07:02.400 --> 00:07:05.960
Remember earlier I promised you I'll
show you some of those visual cues?

00:07:05.960 --> 00:07:09.280
Well,
here on the screen you see two of those.

00:07:09.300 --> 00:07:14.400
One is the caption panel toward
the bottom of the window.

00:07:14.530 --> 00:07:19.550
Everything you hear, we provide a textual
representation of that,

00:07:19.550 --> 00:07:20.200
too.

00:07:20.200 --> 00:07:23.780
The other one is the
black box surrounding the

00:07:23.780 --> 00:07:26.700
Delete button in the Mail.app.

00:07:26.740 --> 00:07:30.200
And that is what we call
the VoiceOver cursor.

00:07:30.290 --> 00:07:35.000
So as I navigate around, you,
the audience, which is, you know,

00:07:35.000 --> 00:07:37.850
as the collaborator,
can follow along while

00:07:37.850 --> 00:07:39.200
I'm using this computer.

00:07:39.200 --> 00:07:42.040
So let's go ahead and move around.

00:07:42.450 --> 00:07:44.180
Change button.

00:07:44.200 --> 00:07:45.540
Reply button.

00:07:45.540 --> 00:07:47.200
Reply all button.

00:07:47.200 --> 00:07:50.190
And of course, if you have low vision,
here's something that will help you.

00:07:50.200 --> 00:07:51.340
Thank you.

00:07:55.270 --> 00:07:58.980
VoiceOver cursor size 3, 4.

00:07:59.040 --> 00:08:01.400
All right, and we can still move around.

00:08:01.480 --> 00:08:05.640
Reply button, check button,
delete button.

00:08:05.740 --> 00:08:07.780
Let's go ahead and turn Zoom off for now.

00:08:07.880 --> 00:08:09.600
VoiceOver 2, 1.

00:08:09.730 --> 00:08:13.100
All right,
we're ready to go and check what is

00:08:13.100 --> 00:08:16.380
the selected message in my inbox.

00:08:16.450 --> 00:08:18.000
Messages table.

00:08:18.360 --> 00:08:24.700
Interact with messages table
on Star Wars Mary Beth James.

00:08:24.960 --> 00:08:29.400
Okay, well let's see what Mary Beth has
to say about Star Wars.

00:08:29.430 --> 00:08:34.000
Clicked item text: "Patti,
have you seen Star Wars yet?

00:08:34.000 --> 00:08:37.580
I saw it in San Francisco and
it was great.

00:08:37.580 --> 00:08:39.300
Have a great weekend.

00:08:39.300 --> 00:08:44.090
Mary Beth." Well,
how many of you have seen Star Wars?

00:08:44.260 --> 00:08:45.200
Hello, most of you.

00:08:45.200 --> 00:08:47.040
Well, how many of you like it?

00:08:47.050 --> 00:08:48.000
Well, I love it.

00:08:48.000 --> 00:08:50.200
I mean, it's great.

00:08:50.220 --> 00:08:53.200
So I'm going to go ahead
and tell Mary Beth that.

00:08:53.200 --> 00:08:55.170
There's a couple ways I can
reply to this message.

00:08:55.300 --> 00:09:00.200
One is I could go up to the reply
button by the toolbar and press that.

00:09:00.290 --> 00:09:02.300
Or if I know the keyboard shortcut,
I could do that.

00:09:02.380 --> 00:09:05.040
But since I can't remember
what the shortcut is,

00:09:05.040 --> 00:09:06.790
I'm going to go up to the menu.

00:09:06.800 --> 00:09:09.230
Menu bar on Apple.

00:09:09.800 --> 00:09:11.200
Mail message.

00:09:11.630 --> 00:09:12.640
Message menu.

00:09:13.070 --> 00:09:13.910
Send again.

00:09:14.250 --> 00:09:14.790
Reply.

00:09:15.210 --> 00:09:15.850
Command R.

00:09:16.560 --> 00:09:18.800
Okay, we found what we're looking for.

00:09:19.060 --> 00:09:19.580
Reply.

00:09:19.580 --> 00:09:21.670
Read Star Wars window.

00:09:21.670 --> 00:09:23.020
18 items.

00:09:23.060 --> 00:09:24.360
Send button.

00:09:24.690 --> 00:09:30.400
And if I forgot to mention,
all this time I'm not using the mouse.

00:09:30.400 --> 00:09:30.400
Okay?

00:09:30.560 --> 00:09:33.940
So what we want to do is we want to
go ahead and reply to this message.

00:09:33.940 --> 00:09:36.500
So I'm going to go down to
where that blinking cursor is.

00:09:36.740 --> 00:09:39.500
Menu HTM interacting.

00:09:39.500 --> 00:09:41.480
And notice I canceled some of the speech.

00:09:41.550 --> 00:09:45.280
So anytime when you,
for example right now I'm talking to

00:09:45.280 --> 00:09:49.600
you or if you want to do something else
and you don't want to hear something,

00:09:49.600 --> 00:09:52.450
you could at any time
cancel or pause the speech.

00:09:52.500 --> 00:10:03.770
So what I am going to do right now
is reply to her and say I spell

00:10:03.770 --> 00:10:03.770
these A I E S O O exclamation mark.

00:10:05.000 --> 00:10:09.290
Um, first what you just heard is
it's echoing every character

00:10:09.290 --> 00:10:11.770
back to you as I'm typing this.

00:10:11.770 --> 00:10:18.580
So I want to verify that this is what,
you know, I want to reply back to her.

00:10:18.710 --> 00:10:22.490
So let's go ahead and read this again.

00:10:22.910 --> 00:10:25.300
I love it too.

00:10:25.640 --> 00:10:27.440
So this is just reading word by word.

00:10:27.440 --> 00:10:31.940
We have many other text commands and
many other things you can play with.

00:10:32.030 --> 00:10:34.970
And since VoiceOver is
on every Tiger system,

00:10:34.970 --> 00:10:36.940
I encourage you to give it a try.

00:10:37.050 --> 00:10:38.780
Later on,
we'll show you where to get some

00:10:38.780 --> 00:10:41.480
of those VoiceOver commands.

00:10:41.570 --> 00:10:43.500
So at this point, though,
I want to go ahead and

00:10:43.500 --> 00:10:45.080
send this message off.

00:10:45.170 --> 00:10:48.230
So for most of us who are sighted,
what we usually do is we

00:10:48.230 --> 00:10:50.620
just glance up and see,
oh, there's a send button.

00:10:50.620 --> 00:10:52.950
Let's go ahead and take
a mouse and click on it,

00:10:52.950 --> 00:10:53.500
right?

00:10:53.610 --> 00:10:55.920
Well,
for people who are visually impaired,

00:10:56.020 --> 00:10:58.500
it's a little bit harder because
they have to go and navigate

00:10:58.500 --> 00:11:02.500
through the entire window and
find where the send button is.

00:11:02.570 --> 00:11:07.090
So what we have is this thing
called ItemChooser to help them out.

00:11:07.200 --> 00:11:10.840
Build ItemChooser menu, 25 items.

00:11:10.920 --> 00:11:15.370
Okay, it's telling me there's 25
items on this window alone.

00:11:15.570 --> 00:11:16.920
That's still going to
take a little bit of time.

00:11:17.050 --> 00:11:20.620
So I'm going to do a little
shortcut called the type.

00:11:20.620 --> 00:11:23.320
Type ahead and type S-E-N-D.

00:11:23.350 --> 00:11:25.700
One item, send button.

00:11:25.700 --> 00:11:27.320
So it found what I'm looking for.

00:11:27.320 --> 00:11:28.700
Send button.

00:11:28.700 --> 00:11:32.240
And notice that the VoiceOver cursor
is now on the send button.

00:11:32.240 --> 00:11:35.300
So let's go ahead and press that,
assuming we have network here.

00:11:35.300 --> 00:11:36.500
Prep text.

00:11:36.500 --> 00:11:38.440
Patty, have you seen-- Good.

00:11:38.440 --> 00:11:39.640
Okay, we just sent it off.

00:11:39.640 --> 00:11:43.600
So let's go ahead and turn VoiceOver off.

00:11:43.600 --> 00:11:45.080
VoiceOver off.

00:11:45.090 --> 00:11:48.740
So what I just shown you is
something we do on a daily basis.

00:11:48.740 --> 00:11:50.620
You know, it's kind of like waking
up in the morning.

00:11:50.620 --> 00:11:52.610
Brushing your teeth, checking your email.

00:11:52.920 --> 00:11:56.000
Something we do and we take for granted.

00:11:56.000 --> 00:11:58.800
But keep in mind,
there's people out there who haven't

00:11:58.800 --> 00:12:02.360
been able to use Mac OS X because
they couldn't even do something

00:12:02.360 --> 00:12:04.760
as simple as checking their email.

00:12:05.080 --> 00:12:07.780
Now they could with VoiceOver.

00:12:07.780 --> 00:12:11.240
The VoiceOver team has done a lot
of work in TigerTime Friend to

00:12:11.240 --> 00:12:15.490
provide this alternative interface
for users to use the computer.

00:12:15.640 --> 00:12:20.140
Plus, the accessibility team has worked
really hard in the last couple of

00:12:20.250 --> 00:12:25.010
years to build up this great foundation
of accessibility APIs so that your

00:12:25.010 --> 00:12:29.610
application could work together
and communicate with the computer.

00:12:29.760 --> 00:12:30.050
So...

00:12:31.300 --> 00:12:35.680
In a nutshell, most of the work has
already been done for you.

00:12:35.700 --> 00:12:39.440
But you still need to do a
little bit of work to complete

00:12:39.560 --> 00:12:42.060
that accessibility solution.

00:12:42.060 --> 00:12:44.800
And that's why you're here today.

00:12:44.870 --> 00:12:49.980
So, would you mind putting back
the presentation slide?

00:12:54.340 --> 00:12:56.380
Presentation slide, please.

00:12:56.380 --> 00:13:00.120
Thank you.

00:13:02.450 --> 00:13:07.440
So what do you need to do to
make your application accessible?

00:13:07.530 --> 00:13:11.600
Well, first of all,
support the Accessibility APIs.

00:13:11.780 --> 00:13:16.690
And Guy Fullerton will come up to
show you how to do that shortly.

00:13:16.850 --> 00:13:22.000
Secondly,
support full keyboard navigation.

00:13:22.050 --> 00:13:26.830
By that, I mean you should be able to
take using the keyboard only.

00:13:27.080 --> 00:13:30.790
Try to navigate around every
widget in your application.

00:13:30.800 --> 00:13:33.790
If you could do that,
that is full keyboard navigation.

00:13:33.870 --> 00:13:37.730
And of course, if you have any operation
that's done by the mouse,

00:13:37.980 --> 00:13:40.730
please provide keyboard
alternative for that.

00:13:40.800 --> 00:13:43.930
As an example,
you know how in Finder you could take

00:13:43.930 --> 00:13:46.620
the mouse and drag and drop files?

00:13:46.800 --> 00:13:52.950
Well, what Finder has done is provide a
keyboard alternative to do that exact

00:13:52.950 --> 00:13:55.700
same thing using copy and paste.

00:13:55.780 --> 00:13:58.800
So,
as you continue to develop your software,

00:13:58.800 --> 00:14:01.770
I want you to keep these
three points in mind.

00:14:01.800 --> 00:14:05.850
If you leave the session not
remembering anything else,

00:14:05.850 --> 00:14:08.800
at least remember these three points.

00:14:08.800 --> 00:14:09.790
Okay?

00:14:09.800 --> 00:14:12.800
So, of course,
we have some tools to help you out.

00:14:12.800 --> 00:14:16.080
In the developer package,
you're going to find

00:14:16.150 --> 00:14:19.730
these following tools:
accessibility verifier and

00:14:19.740 --> 00:14:21.800
accessibility inspector.

00:14:21.800 --> 00:14:26.110
Later on in the presentation,
we'll show you how to use the inspector.

00:14:26.300 --> 00:14:31.200
But most importantly,
please test with VoiceOver.

00:14:31.320 --> 00:14:32.700
Okay?

00:14:32.700 --> 00:14:36.480
The key diagram you see up above,
it contains some of

00:14:36.480 --> 00:14:38.540
the VoiceOver commands.

00:14:38.660 --> 00:14:42.640
You can download that on
the website listed below.

00:14:42.720 --> 00:14:45.600
So download this PDF file.

00:14:45.690 --> 00:14:46.590
Take about 15 minutes.

00:14:46.710 --> 00:14:47.840
Learn some of the commands.

00:14:48.130 --> 00:14:51.810
And at the end of the day,
I want you to unplug your mouse,

00:14:51.810 --> 00:14:54.100
turn off your screen display.

00:14:54.100 --> 00:14:57.200
And of course, if you have a laptop,
you might not be able to do that.

00:14:57.200 --> 00:15:03.900
So we have a VoiceOver command to allow
you to temporarily disable your screen.

00:15:03.950 --> 00:15:11.180
So find out what that
command is from the file.

00:15:11.480 --> 00:15:16.200
I want you to use the VoiceOver commands
you learned and without the

00:15:16.210 --> 00:15:20.660
mouse or the computer display,
if you could get to every spot in

00:15:20.660 --> 00:15:25.240
your application and you could use
your application without any problem,

00:15:25.360 --> 00:15:27.220
then you know you've
done the right thing.

00:15:27.290 --> 00:15:27.880
Okay?

00:15:27.880 --> 00:15:31.870
So with that, I would like to go ahead
and turn to Guy Fullerton.

00:15:43.540 --> 00:15:44.460
No?

00:15:44.510 --> 00:15:44.800
Oh, there we go.

00:15:44.800 --> 00:15:45.130
That's much better.

00:15:45.240 --> 00:15:46.030
All right.

00:15:46.100 --> 00:15:48.670
So I'm going to explain everything
you need to know to make your

00:15:48.670 --> 00:15:50.140
Carbon application accessible.

00:15:50.190 --> 00:15:52.080
And I'm going to start with
a quick overview of the

00:15:52.150 --> 00:15:53.820
Accessibility architecture.

00:15:54.010 --> 00:15:56.040
Now, if you've been to these kind
of sessions in the past,

00:15:56.040 --> 00:15:59.090
you've probably seen a diagram
that looks a lot like this.

00:15:59.160 --> 00:16:01.960
This represents the fact that
the Accessibility architecture

00:16:02.050 --> 00:16:04.800
allows an assistive app,
which is that app over on the left,

00:16:04.830 --> 00:16:08.150
to communicate with a wide variety
of other apps running on Mac OS X,

00:16:08.150 --> 00:16:11.190
regardless of what framework was
used to implement those applications.

00:16:11.260 --> 00:16:12.800
So assistive apps can
talk to Carbon apps,

00:16:12.860 --> 00:16:15.390
and they can talk to Cocoa apps,
and they can talk to Java apps,

00:16:15.570 --> 00:16:19.880
even though those three flavors of
applications use fairly different

00:16:19.880 --> 00:16:23.750
APIs to generate their windows
and views and menus and so forth.

00:16:25.080 --> 00:16:28.210
So let's take a look at how the
Accessibility architecture allows

00:16:28.210 --> 00:16:31.870
an assistive app like VoiceOver to
communicate with your Carbon app.

00:16:31.960 --> 00:16:34.460
So VoiceOver might need to
query your app about something.

00:16:34.670 --> 00:16:39.150
It might need to know what user interface
element is at a particular point.

00:16:39.210 --> 00:16:41.240
So it's going to send a
message across process,

00:16:41.240 --> 00:16:42.700
which is going to be
caught by the green box,

00:16:42.700 --> 00:16:45.240
which is sort of the
Carbon Accessibility implementation.

00:16:45.330 --> 00:16:47.360
And we're going to translate
that into a Carbon event,

00:16:47.490 --> 00:16:49.390
this getChildAtPoint Carbon event.

00:16:49.440 --> 00:16:52.140
And we're going to route it to
the right place in your app.

00:16:52.210 --> 00:16:54.970
Now, part of your app is going
to catch that Carbon event,

00:16:54.970 --> 00:16:58.900
and it may decide that that mouse
point is over a push button.

00:16:58.960 --> 00:17:02.710
So that code will build a UI element,
which is a framework-agnostic way of

00:17:02.710 --> 00:17:05.250
representing a piece of your interface.

00:17:05.270 --> 00:17:07.760
It's going to build that UI element,
which represents the button,

00:17:07.830 --> 00:17:11.020
and will put it in that
Carbon event as an output parameter.

00:17:11.080 --> 00:17:15.150
That UI element then is shuttled
back across process to VoiceOver.

00:17:15.190 --> 00:17:19.340
And VoiceOver might think about it a
little bit and decide that it wants

00:17:19.340 --> 00:17:21.020
to know more about that element.

00:17:21.080 --> 00:17:22.150
So it sends another message.

00:17:22.160 --> 00:17:23.490
message.

00:17:23.850 --> 00:17:27.180
The Carbon Accessibility
implementation catches that message

00:17:27.240 --> 00:17:28.890
and translates it into a Carbon event.

00:17:29.090 --> 00:17:31.350
In this case,
the assistive app VoiceOver wanted

00:17:31.350 --> 00:17:33.560
to know what the role of
a given UI element is,

00:17:33.560 --> 00:17:35.000
or in other words, what its purpose is.

00:17:35.000 --> 00:17:38.690
So we translate that into a get
named attribute Carbon event.

00:17:38.690 --> 00:17:41.520
And that Carbon event gets
sent to the UI element.

00:17:41.610 --> 00:17:43.200
You'll see how that's
possible in a little bit.

00:17:43.240 --> 00:17:45.750
The Carbon event comes with
two pieces of information.

00:17:45.770 --> 00:17:48.330
It comes with the attribute
that VoiceOver was interested

00:17:48.330 --> 00:17:50.380
in finding out about,
in this case the role,

00:17:50.470 --> 00:17:52.240
and it comes with the UI element.

00:17:52.240 --> 00:17:55.240
You're going to need to extract
some information about it.

00:17:55.370 --> 00:17:57.730
So it's a button that
you were asked about.

00:17:57.740 --> 00:17:58.720
You knew it was a button.

00:17:58.760 --> 00:18:00.870
So you put that role,
a standard system role,

00:18:00.870 --> 00:18:03.140
which is K-A-X button role,
into the Carbon event

00:18:03.140 --> 00:18:05.540
as an output parameter,
which then gets shuttled

00:18:05.540 --> 00:18:06.740
back over to VoiceOver.

00:18:06.740 --> 00:18:09.090
VoiceOver might present some
information to the user,

00:18:09.090 --> 00:18:11.740
and the user might decide that
they want to press the button.

00:18:11.740 --> 00:18:15.720
So VoiceOver issues another
command to press that UI element,

00:18:15.760 --> 00:18:18.140
which again gets translated
into yet another Carbon event,

00:18:18.250 --> 00:18:19.730
which goes to the UI element.

00:18:19.740 --> 00:18:21.780
And that Carbon event
comes with the UI element,

00:18:21.860 --> 00:18:23.950
as well as the action that
the user wanted to invoke,

00:18:24.040 --> 00:18:24.840
in this case press.

00:18:24.980 --> 00:18:27.980
And then it's up to your application
to carry out the appropriate response.

00:18:27.980 --> 00:18:30.970
You might do something like
call HIVU simulate click,

00:18:30.980 --> 00:18:33.360
which causes the button to flash
and send out the appropriate

00:18:33.360 --> 00:18:37.970
Carbon events for control hit and
commands and things like that.

00:18:38.160 --> 00:18:43.750
This all works because we have
a framework-agnostic way to

00:18:43.750 --> 00:18:46.200
describe a piece of the interface.

00:18:46.200 --> 00:18:47.100
What does that mean?

00:18:47.130 --> 00:18:50.150
That means you can make a
UI element to represent virtually

00:18:50.150 --> 00:18:51.590
any part of this window.

00:18:51.590 --> 00:18:54.950
You can make a UI element that
represents that segmented view there.

00:18:55.240 --> 00:18:58.120
You can make a UI element that represents
just a part of that segmented view,

00:18:58.140 --> 00:19:00.140
that second segment
in the segmented view.

00:19:00.140 --> 00:19:02.940
You can make one that
represents some static text.

00:19:02.940 --> 00:19:06.620
You can make one that represents a
custom view or even a window or even

00:19:06.620 --> 00:19:10.130
a menu or even the HI application
object supported by Carbon.

00:19:10.140 --> 00:19:12.090
So how is this possible?

00:19:12.120 --> 00:19:16.140
Well, on Carbon, a UI element is composed
of two separate pieces.

00:19:16.140 --> 00:19:20.140
The first is a reference
to any arbitrary HI object.

00:19:20.140 --> 00:19:25.050
Now, views, the Carbon views,
HIV ref or control refs, are HI objects.

00:19:25.320 --> 00:19:26.140
Window refs are HI objects.

00:19:26.140 --> 00:19:28.140
Menu refs are HI objects.

00:19:28.140 --> 00:19:30.140
And our application object
is also an HI object.

00:19:30.140 --> 00:19:33.140
So this reference can be to any
one of those types of constructs.

00:19:33.140 --> 00:19:38.890
This reference can also be to a custom
HI object subclass that you create.

00:19:39.600 --> 00:20:49.200
[Transcript missing]

00:20:50.200 --> 00:20:52.100
Let me show you a quick example of that.

00:20:52.100 --> 00:20:54.920
So I was talking before that
you can have an element that

00:20:54.980 --> 00:20:57.700
represents the entire segmented view.

00:20:57.740 --> 00:21:00.320
So in this case,
the HI object in the element will

00:21:00.320 --> 00:21:04.070
be the segmented view's HI view ref,
and the identifier will be zero.

00:21:04.080 --> 00:21:08.120
Now, zero has a very special meaning
in terms of the identifier space.

00:21:08.120 --> 00:21:10.590
It always means the entire HI object ref.

00:21:10.590 --> 00:21:12.290
In this case,
because we're trying to create

00:21:12.400 --> 00:21:14.640
an element that represents
the entire segmented view,

00:21:14.790 --> 00:21:15.860
the identifier is zero.

00:21:16.790 --> 00:21:19.770
Now, in contrast,
if we want to represent segment

00:21:19.770 --> 00:21:22.310
two of the segmented view,
the HI object ref is

00:21:22.310 --> 00:21:23.260
going to be the same.

00:21:23.400 --> 00:21:24.990
It's still going to
be the segmented view.

00:21:25.100 --> 00:21:26.680
But the identifier is going to be two.

00:21:26.680 --> 00:21:29.140
Now, how do you know what
the right identifier is?

00:21:29.140 --> 00:21:31.880
Well, the answer is it depends on
your view implementation.

00:21:31.880 --> 00:21:35.040
Like I said on the earlier slide,
the identifier space is completely

00:21:35.040 --> 00:21:36.920
private to the view implementation.

00:21:36.920 --> 00:21:42.300
But in a few cases for the system views,
we publicize the identifier space.

00:21:42.300 --> 00:21:44.940
We know, for example,
that your application may

00:21:44.940 --> 00:21:46.680
want to generate an element.

00:21:46.700 --> 00:21:50.560
So we tell you that identifier
one means the first segment,

00:21:50.560 --> 00:21:54.170
identifier two means the second segment,
and so on.

00:21:54.170 --> 00:21:57.420
Most views, however,
keep the identifier space private.

00:21:57.420 --> 00:22:00.120
The only other one I can think
of where we publicize the

00:22:00.120 --> 00:22:02.010
identifier space is the tabs view.

00:22:02.140 --> 00:22:04.360
Because again,
there are times when you might

00:22:04.360 --> 00:22:07.210
need to provide a description
for tab two in a tab view.

00:22:10.320 --> 00:22:13.000
Obviously,
managing elements is very important

00:22:13.000 --> 00:22:15.000
in your accessibility implementation.

00:22:15.000 --> 00:22:19.800
You create them with the AXUI element
create with HI object and identifier API.

00:22:19.800 --> 00:22:21.190
It's a very straightforward API.

00:22:21.200 --> 00:22:23.940
It takes the HI object ref
and an identifier and it

00:22:23.940 --> 00:22:25.660
gives you back the element.

00:22:25.700 --> 00:22:29.080
The element is a CF type ref,
so you can put it in dictionaries

00:22:29.080 --> 00:22:30.700
and arrays if you need to.

00:22:30.700 --> 00:22:32.700
So, of course, to release it,
you call CF release.

00:22:32.700 --> 00:22:35.840
Now, once you have an element,
and you're going to get elements in most

00:22:35.840 --> 00:22:38.700
of your accessibility Carbon events,
once you have one,

00:22:38.700 --> 00:22:40.440
you often need to decompose
it to look and see what the

00:22:40.440 --> 00:22:42.700
HI object and the identifier are.

00:22:42.700 --> 00:22:47.700
So, we have the two APIs listed there to
extract those two pieces of information.

00:22:49.750 --> 00:22:53.610
Okay, so let's take a look at the
effort required to accessorize

00:22:53.610 --> 00:22:54.960
a Carbon application.

00:22:54.960 --> 00:22:58.750
So you can think of the effort,
the total effort involved,

00:22:58.860 --> 00:23:00.790
as a big pyramid of effort.

00:23:00.790 --> 00:23:00.790
Now, thankfully,

00:23:01.540 --> 00:23:04.370
The system has already built
most of that pyramid for you.

00:23:04.470 --> 00:23:06.950
We already provide accessibility
information for all the

00:23:06.950 --> 00:23:10.900
standard system controls,
windows, menus, and so on.

00:23:10.910 --> 00:23:15.280
So your application is only left
with a much smaller amount of effort.

00:23:15.550 --> 00:23:18.910
Let's go ahead and zoom in on that
tip of the pyramid and talk about

00:23:18.910 --> 00:23:21.320
each of the steps you'll need to take.

00:23:21.780 --> 00:23:25.370
The first step to becoming accessible is
doing a bunch of basic work that isn't

00:23:25.370 --> 00:23:28.040
even necessarily accessibility work.

00:23:28.130 --> 00:23:32.740
The second step is to provide context
about certain system controls when

00:23:32.740 --> 00:23:37.310
the system isn't able to give all
of the information to the user.

00:23:37.430 --> 00:23:41.130
The third step is to remove
extraneous UI elements from

00:23:41.130 --> 00:23:43.540
your accessibility hierarchy.

00:23:43.610 --> 00:23:48.300
Next, you need to provide accessibility
information for your custom views.

00:23:48.370 --> 00:23:50.010
And finally,
some of you may need to provide

00:23:50.010 --> 00:23:52.160
accessibility information
for the completely custom

00:23:52.160 --> 00:23:53.300
parts of your interface.

00:23:53.300 --> 00:23:57.300
These are things that aren't even
necessarily implemented within HIView.

00:23:57.300 --> 00:23:59.240
So let's go ahead and look
in detail at the basics.

00:23:59.300 --> 00:24:01.890
So like I said,
these are things that aren't

00:24:02.010 --> 00:24:06.140
necessarily accessibility features,
but they're features that accessibility

00:24:06.140 --> 00:24:10.300
can leverage and give a better overall
experience because you implemented.

00:24:10.300 --> 00:24:15.290
A great example of that, like Patti said,
is implementing full keyboard navigation.

00:24:15.390 --> 00:24:18.600
That's going to make you a better
overall application in terms of a user

00:24:18.600 --> 00:24:21.320
that doesn't want to use the mouse,
but it's not strictly an

00:24:21.320 --> 00:24:22.300
accessibility feature.

00:24:22.310 --> 00:24:24.190
And a lot of other users,
particularly Matt right there,

00:24:24.260 --> 00:24:26.300
really wants your application
to be keyboard navigable.

00:24:26.300 --> 00:24:30.290
So you're going to make a wider user base
happy when they use your application.

00:24:30.300 --> 00:24:34.280
Another great example is using
window proxies for your windows.

00:24:34.300 --> 00:24:38.250
If you're a document-based application,
generally you want to have the

00:24:38.390 --> 00:24:41.930
little proxy icon in your window
title bar so that the user can

00:24:42.020 --> 00:24:43.300
click and drag a document away.

00:24:43.300 --> 00:24:46.900
It'll also support a path pop-up,
so you can find the path to your

00:24:46.900 --> 00:24:49.300
document and reveal it in the finder.

00:24:49.300 --> 00:24:53.290
And that's very cool functionality,
but it also happens to allow the window

00:24:53.340 --> 00:24:55.300
manager to add an AX document as well.

00:24:55.300 --> 00:24:59.300
So you can add a document to
that window list for free.

00:24:59.300 --> 00:25:03.290
Similarly, support help tags and the
accessibility subsystem can

00:25:03.290 --> 00:25:07.300
provide all of that information
through the AX help attributes.

00:25:08.690 --> 00:25:11.080
So once you've done that,
you've taken the first step of

00:25:11.080 --> 00:25:13.830
building your accessibility pyramid,
and it's time to move on to the second,

00:25:13.920 --> 00:25:16.100
which is providing context.

00:25:16.190 --> 00:25:18.630
Now, what do I mean by providing context?

00:25:18.740 --> 00:25:21.400
Well, let's take a look at an
example interface here.

00:25:21.400 --> 00:25:25.640
This is a snapshot of the
toolbar up at the top left-hand

00:25:25.760 --> 00:25:27.090
part of the Finder window.

00:25:27.180 --> 00:25:28.780
And you can see a number of buttons here.

00:25:28.930 --> 00:25:31.570
And as a sighted user,
I know what the purpose of

00:25:31.570 --> 00:25:32.460
all those buttons are for.

00:25:32.460 --> 00:25:34.430
I know that the leftmost
one is a back button,

00:25:34.430 --> 00:25:36.300
and there's a right button,
and there's a view switcher,

00:25:36.300 --> 00:25:39.520
and one takes me to column view
and icon view and so forth.

00:25:39.650 --> 00:25:43.420
But to a non-sighted user,
those buttons are just anonymous.

00:25:43.490 --> 00:25:46.850
There's no kind of textual
description that VoiceOver can speak.

00:25:46.910 --> 00:25:50.910
So it's up to your application to provide
something called an AX description that

00:25:51.000 --> 00:25:54.030
represents those buttons' purposes.

00:25:54.800 --> 00:26:00.700
Another type of context you need to
provide is for something like this.

00:26:00.700 --> 00:26:05.620
What you're looking at here is a
screenshot from an application that

00:26:05.650 --> 00:26:07.000
takes shipping information from somebody.

00:26:07.000 --> 00:26:10.510
Maybe it's a web-based form
for a shipping program.

00:26:10.760 --> 00:26:14.980
I have a static text off to the left
which says "Shipping Address," and I have

00:26:14.980 --> 00:26:19.700
four edit text fields to the right that
allow the user to type in their address.

00:26:19.700 --> 00:26:23.700
Each of those text fields by themselves
is kind of this anonymous entity.

00:26:23.700 --> 00:26:25.800
A non-cited user doesn't know
what the purpose of each of

00:26:25.800 --> 00:26:29.450
those text fields are unless your
application gives us some clue.

00:26:29.700 --> 00:26:33.410
It just so happens that your app already
gave a cited user a clue by virtue of

00:26:33.520 --> 00:26:35.700
putting that static text piece on there.

00:26:35.700 --> 00:26:42.400
What your application needs to do is
link those two sets of views together.

00:26:42.700 --> 00:26:46.620
Each of those text fields needs to
have an attribute added to it called

00:26:46.620 --> 00:26:49.330
the AXTitleUIElement attribute.

00:26:49.720 --> 00:26:52.180
The value of that attribute
will be a UI element that

00:26:52.180 --> 00:26:53.700
refers to the static text.

00:26:53.700 --> 00:26:56.690
In a way, you're saying that this
edit text right here,

00:26:56.880 --> 00:26:59.700
its title can be found
over in this other element.

00:26:59.700 --> 00:27:02.700
The reverse relationship
also needs to be established.

00:27:02.700 --> 00:27:05.700
As you can see from the screenshot,
it's actually a one-to-many relationship.

00:27:05.700 --> 00:27:09.050
You need to set up an
axServesAsTitleForUIElements

00:27:09.050 --> 00:27:11.650
attribute on the static text field.

00:27:12.040 --> 00:27:15.830
Build an array of UI elements,
one representing each one

00:27:15.830 --> 00:27:17.700
of those edit text fields.

00:27:17.700 --> 00:27:19.700
Use that array as the
value of the text field.

00:27:19.700 --> 00:27:23.340
So what you're saying is this
static text field serves as the

00:27:23.340 --> 00:27:25.700
title for several other elements.

00:27:26.550 --> 00:27:28.890
So in general,
you're going to want to take a look at

00:27:28.890 --> 00:27:32.530
your interface and find places where
you either have views that don't have

00:27:32.530 --> 00:27:36.670
titles or you have views that have titles
represented by some other view and link

00:27:36.670 --> 00:27:39.230
those together or provide descriptions.

00:27:39.300 --> 00:27:42.870
And I generally refer to these
as auxiliary attributes because

00:27:42.870 --> 00:27:44.570
that's what the API is named.

00:27:44.670 --> 00:27:48.500
So I'd like to bring up David McCloud,
who is a card-carrying member

00:27:48.500 --> 00:27:51.680
of the Accessibility Task Force,
as you can see by his T-shirt.

00:27:51.720 --> 00:27:56.270
And he's going to drive the
machine as we add some auxiliary

00:27:56.270 --> 00:28:02.020
attributes to an interface.

00:28:02.020 --> 00:28:03.630
Okay.

00:28:03.690 --> 00:28:07.580
So the first thing we want
to do is run our sample app.

00:28:18.440 --> 00:28:21.740
Building, building, building.

00:28:21.760 --> 00:28:23.170
No errors, please.

00:28:23.240 --> 00:28:24.600
There we go.

00:28:24.700 --> 00:28:26.780
All right.

00:28:27.630 --> 00:28:29.700
I think I showed the screenshot
earlier in the presentation.

00:28:29.720 --> 00:28:33.350
What we have here is
a food pyramid window.

00:28:33.530 --> 00:28:34.990
Go ahead and click on one of
the buttons real quick so we

00:28:35.010 --> 00:28:36.360
get that other static text.

00:28:36.370 --> 00:28:41.200
So this window is primarily that custom
view that's drawing the food pyramid,

00:28:41.200 --> 00:28:43.900
and that's implemented as an
Image Map view where we're reading in an

00:28:43.900 --> 00:28:47.500
Image Map XML file and determining where
each of those button parts are and so on.

00:28:47.540 --> 00:28:51.070
Now beneath it,
there is some text that tells

00:28:51.110 --> 00:28:52.500
the button you clicked on.

00:28:52.550 --> 00:28:55.700
And beneath that,
there's a separator line and a segmented

00:28:55.700 --> 00:28:57.630
view and a static text beneath it.

00:28:57.730 --> 00:29:00.380
So as we examine this interface,
we can see several kinds of

00:29:00.380 --> 00:29:03.180
problems that we need to solve,
several places where we

00:29:03.180 --> 00:29:04.660
need to provide context.

00:29:04.730 --> 00:29:07.090
The most obvious is probably
that big Image Map view.

00:29:07.290 --> 00:29:09.420
There's no text in the Image Map view.

00:29:09.510 --> 00:29:11.810
The user, an unsighted user,
isn't going to know at all

00:29:11.810 --> 00:29:13.130
what the purpose of that is.

00:29:13.250 --> 00:29:15.190
So we need to provide
some kind of description.

00:29:15.320 --> 00:29:17.340
In our case, it's a food pyramid group.

00:29:17.360 --> 00:29:18.630
It's a group around a bunch of buttons.

00:29:18.700 --> 00:29:22.510
So we will need to provide a description
that calls it a food pyramid.

00:29:22.930 --> 00:29:26.310
Similarly,
each of the buttons inside that

00:29:26.450 --> 00:29:28.970
food pyramid has a text icon,
or sorry,

00:29:29.200 --> 00:29:31.040
an icon representing its purpose.

00:29:31.040 --> 00:29:34.140
And again, a non-sighted user isn't
going to know what that means.

00:29:34.140 --> 00:29:38.440
So we need to give descriptions
to each of those button parts.

00:29:39.300 --> 00:29:42.800
Then if we look at the segmented view,
it suffers from the same problem.

00:29:42.800 --> 00:29:46.740
There's a bunch of pictures as the
title for each of those button parts,

00:29:46.740 --> 00:29:50.360
but a picture isn't good at communicating
information to a non-sighted user.

00:29:50.360 --> 00:29:53.050
So we need to give descriptions
to each of those buttons.

00:29:53.050 --> 00:29:56.290
And similarly,
the segmented view as a whole doesn't

00:29:56.340 --> 00:30:00.250
have a real title as part of the view,
but the static text beneath

00:30:00.300 --> 00:30:03.310
it does provide some
indication as to its purpose.

00:30:03.330 --> 00:30:06.610
So we need to link up the segmented
view with the static text beneath it.

00:30:06.610 --> 00:30:07.900
So that's what we're going to tackle.

00:30:07.900 --> 00:30:11.430
We're going to tackle most of that
in the first batch of source code.

00:30:25.930 --> 00:30:27.740
All right.

00:30:27.790 --> 00:30:31.720
So David's going to add some code here,
and I'll talk about what each bit does.

00:30:31.910 --> 00:30:36.490
So the first thing we're going to do is
give a description to the image map view,

00:30:36.530 --> 00:30:39.480
which is the outer food pyramid concept.

00:30:39.580 --> 00:30:44.070
What we do is we call hiObject
setAuxiliaryAccessibilityAttribute,

00:30:44.070 --> 00:30:48.420
and we pass in the image map view,
which is the hiObject that we're

00:30:48.420 --> 00:30:50.590
interested in providing a description to.

00:30:50.690 --> 00:30:56.140
The next parameter is the identifier,
which is zero, because we want to provide

00:30:56.140 --> 00:30:59.110
information about the whole image map.

00:30:59.580 --> 00:31:01.800
The next parameter is the
description attribute,

00:31:01.810 --> 00:31:06.200
which is a standard
system attribute name.

00:31:06.200 --> 00:31:08.900
We pass that in because we're going
to be providing a description.

00:31:08.950 --> 00:31:13.400
And the last parameter is the value
that we want to give that attribute.

00:31:13.430 --> 00:31:16.670
In this case,
we need to give it the name Food Pyramid.

00:31:16.780 --> 00:31:19.700
Now, it just so happens that our
Image Map View already has ways of

00:31:19.700 --> 00:31:23.490
querying the XML and pulling any text
out of that XML that might be present.

00:31:23.580 --> 00:31:26.290
So we're calling one of our
utility APIs to do that.

00:31:26.350 --> 00:31:29.680
So once we've made that API call,
the Image Map View for the

00:31:29.740 --> 00:31:31.880
Food Pyramid has a description.

00:31:32.860 --> 00:31:37.670
So the second thing we're going to
do is we are going to associate the

00:31:37.730 --> 00:31:41.630
static text beneath the segmented
view with the segmented view.

00:31:42.130 --> 00:31:44.970
First, we're going to look up
the static text itself.

00:31:45.100 --> 00:31:46.660
We're going to call find control by ID.

00:31:46.700 --> 00:31:50.640
We happen to give it an ID in the nib
so we can look up that static text.

00:31:50.720 --> 00:31:56.010
Next, we're going to build an element
out of the segmented view.

00:31:56.490 --> 00:31:59.850
So to build an element, we pass -- oh,
I'm sorry, no, we're not building it out

00:31:59.850 --> 00:32:00.490
of the segmented view.

00:32:00.530 --> 00:32:02.930
Here we're building it
out of the static text.

00:32:03.090 --> 00:32:06.300
We pass the static text view in,
and we pass the identifier zero.

00:32:06.460 --> 00:32:09.040
So now we have a UI element
that represents the static

00:32:09.070 --> 00:32:10.430
text view as a whole.

00:32:10.520 --> 00:32:15.800
Now what we want to do is we want
to say that the segmented view's

00:32:16.110 --> 00:32:19.940
title UI element is this static
text element we just created.

00:32:20.020 --> 00:32:23.240
So again, we call hiObject,
setAuxiliaryAttribute,

00:32:23.270 --> 00:32:26.630
pass in the segmented view,
pass in the identifier zero.

00:32:26.640 --> 00:32:31.400
So we're saying associate this
attribute with the whole segmented view.

00:32:31.400 --> 00:32:33.020
We pass in the attribute
we want to give it,

00:32:33.130 --> 00:32:35.880
which is the title UI element,
and we pass in the value we

00:32:35.880 --> 00:32:38.160
want to give that attribute,
which is the element of

00:32:38.160 --> 00:32:39.500
the static text view.

00:32:39.610 --> 00:32:42.980
So now let's go ahead and
implement the inverse relationship.

00:32:43.050 --> 00:32:44.690
Looks very similar.

00:32:44.920 --> 00:32:48.620
The only trick here is, like I said,
the --

00:32:48.840 --> 00:32:53.920
An element can only have a single
title UI element attribute,

00:32:53.920 --> 00:32:59.890
but an element might have a services
title for multiple other elements.

00:33:00.350 --> 00:33:06.940
So what we do here is we are going to
create an array of all of the things that

00:33:06.950 --> 00:33:09.260
the static text serves as a title for.

00:33:09.580 --> 00:33:11.410
In this case,
there's only one thing in our array.

00:33:11.550 --> 00:33:13.350
It's the segmented view.

00:33:14.090 --> 00:33:16.530
So we create an element
representing the segmented view.

00:33:16.680 --> 00:33:17.870
We build an array.

00:33:17.940 --> 00:33:20.270
We add the element to the array.

00:33:20.270 --> 00:33:24.970
And then we call
HIObjectSetAuxiliaryAccessibilityAttrib

00:33:24.970 --> 00:33:27.080
ute to link the two up.

00:33:27.080 --> 00:33:30.700
And we pass in the services
title for UIElementAttribute.

00:33:32.250 --> 00:33:34.600
Now we're going to give
descriptions to each of the

00:33:34.600 --> 00:33:36.900
segments of the segmented view.

00:33:36.940 --> 00:33:41.240
This is going to quickly reinforce the
notion of identifiers other than zero.

00:33:41.310 --> 00:33:43.900
So we call hiObjectSetAuxiliaryAttribute.

00:33:43.950 --> 00:33:46.700
We pass in the hiviewref
of the segmented view.

00:33:46.750 --> 00:33:49.860
And now instead of passing zero in to
represent the whole segmented view,

00:33:49.860 --> 00:33:53.040
we pass either one, two,
or three in to represent one of the

00:33:53.040 --> 00:33:55.240
three parts of the segmented view.

00:33:55.240 --> 00:33:56.950
Then we pass in the
description attribute,

00:33:57.010 --> 00:33:59.740
which is the attribute we want to give,
and then an appropriate

00:33:59.750 --> 00:34:01.570
value for those attributes.

00:34:04.100 --> 00:34:10.100
Okay, so let's go ahead and rebuild and
rerun and take a look at that with the

00:34:10.100 --> 00:34:13.050
Accessibility Inspector application.

00:34:19.420 --> 00:34:22.600
Make the font really, really big.

00:34:22.620 --> 00:34:23.220
Ah, yes.

00:34:23.300 --> 00:34:24.640
Good.

00:34:25.630 --> 00:34:31.420
Okay, so now if we hover over
the food pyramid view,

00:34:32.220 --> 00:34:36.560
You can see that we've given it a
description called Food Pyramid.

00:34:36.580 --> 00:34:37.940
Now there's some other problems with it.

00:34:37.940 --> 00:34:39.870
You see that it's an AX unknown,
and we're gonna solve

00:34:39.870 --> 00:34:40.660
those problems later.

00:34:40.710 --> 00:34:43.050
But for now,
you can see that we've actually given

00:34:43.060 --> 00:34:44.900
a description called AX Food Pyramid.

00:34:44.900 --> 00:34:50.950
We can look at the individual
parts of the segmented view.

00:34:59.850 --> 00:35:03.000
Oh, look at one of the,
like the second segment.

00:35:03.000 --> 00:35:04.340
Yeah.

00:35:04.340 --> 00:35:08.300
So you can see those also
have appropriate descriptions.

00:35:09.040 --> 00:35:13.080
In this case, Rollover hotspots for
one of the segments.

00:35:13.110 --> 00:35:17.890
And now if we point to the static
text beneath the segmented view,

00:35:19.770 --> 00:35:22.100
We're going to go ahead and log on.

00:35:22.100 --> 00:35:26.980
You can see that it has a top -- sorry,
it serves as title for UI elements,

00:35:26.980 --> 00:35:29.060
which is an array of size one.

00:35:29.060 --> 00:35:32.340
And if we lock on to that,
we can use this little go

00:35:32.340 --> 00:35:34.260
to pop up to navigate to it.

00:35:34.260 --> 00:35:37.220
See that it serves as a
title for an AX group,

00:35:37.220 --> 00:35:40.660
and if we go to that AX group,
we will see that that is

00:35:40.660 --> 00:35:43.370
the segmented view group,
and we can see that it also

00:35:43.370 --> 00:35:43.370
has the inverse relationship,
which is the title UI element attribute.

00:35:48.050 --> 00:35:48.800
Thank you, David.

00:35:48.800 --> 00:35:51.800
And let's go back to
slides for a few minutes.

00:35:51.800 --> 00:35:56.720
Yeah, slides please.

00:35:56.890 --> 00:35:58.680
Thank you.

00:35:58.680 --> 00:35:58.680
All right.

00:35:59.550 --> 00:36:02.600
So that is the second
step of the pyramid.

00:36:02.630 --> 00:36:05.540
The next step is to remove
unnecessary elements from

00:36:05.540 --> 00:36:07.200
your accessibility hierarchy.

00:36:07.200 --> 00:36:10.180
Ooh, that's not right.

00:36:10.560 --> 00:36:13.970
Hey, they cut out a whole
part of my presentation.

00:36:14.000 --> 00:36:14.770
That's not good.

00:36:14.780 --> 00:36:16.900
All right, so we lose the screenshots
I had in the slide.

00:36:16.900 --> 00:36:19.260
Well, let's just go to a demo real quick.

00:36:20.280 --> 00:36:21.900
I can show it off.

00:36:22.000 --> 00:36:23.630
Yeah, they did.

00:36:23.710 --> 00:36:25.030
All right, so what we're going to do,
we're going to go ahead

00:36:25.160 --> 00:36:26.800
and rerun this application.

00:36:26.870 --> 00:36:30.630
And as he's bringing it up,
let me talk a little bit about

00:36:31.450 --> 00:36:32.860
Why we need to do what we need to do.

00:36:32.920 --> 00:36:35.740
So a lot of you, when you implement your
Carbon applications,

00:36:35.790 --> 00:36:38.700
you might use a user pane
to group multiple elements,

00:36:38.720 --> 00:36:40.280
or sorry, multiple other views.

00:36:40.410 --> 00:36:43.000
You might do this just for
convenience because you want to hide

00:36:43.000 --> 00:36:46.630
and show multiple views together.

00:36:47.140 --> 00:36:48.840
Generally, that's why you do it.

00:36:48.840 --> 00:36:52.200
It's just for convenience or
some kind of logical grouping.

00:36:52.310 --> 00:36:55.020
Now, unfortunately,
the Carbon Accessibility

00:36:55.020 --> 00:36:58.680
implementation that's built in
doesn't know what the purpose of

00:36:58.680 --> 00:37:00.600
any of these arbitrary views are.

00:37:00.620 --> 00:37:03.350
So we have to represent them
in the Accessibility hierarchy.

00:37:03.440 --> 00:37:05.720
We can't make an assumption that
there's no functionality there

00:37:05.720 --> 00:37:06.900
because we just don't know.

00:37:06.900 --> 00:37:08.710
You might have installed
Carbon Event Handlers on it that

00:37:08.710 --> 00:37:09.880
either do something or do nothing.

00:37:09.880 --> 00:37:11.240
We can't make the right decision.

00:37:12.320 --> 00:37:14.850
So we put those out
there in the interface.

00:37:15.170 --> 00:37:17.140
Sorry, in the Accessibility interface.

00:37:17.190 --> 00:37:19.980
Now, unfortunately,
that adds a lot of noise, literally,

00:37:19.980 --> 00:37:20.680
to VoiceOver.

00:37:20.760 --> 00:37:23.440
A user of VoiceOver that hits
one of these user panes is going

00:37:23.540 --> 00:37:25.500
to find an unknown element,
and they're going to

00:37:25.500 --> 00:37:27.550
have to navigate into it,
and that's just a big pain.

00:37:27.630 --> 00:37:28.800
And so you can see that here.

00:37:28.880 --> 00:37:33.530
If we focus on the dairy item,
if you look at the

00:37:33.780 --> 00:37:37.030
very top of the window,
this shows the hierarchy that

00:37:37.030 --> 00:37:38.770
that static text item lives in.

00:37:38.840 --> 00:37:42.240
You can see that above the static
text is an AXUnknown element.

00:37:42.510 --> 00:37:45.830
That's a user pane that happens to
group both the static text and the

00:37:45.950 --> 00:37:47.990
Image Map view of the food pyramid.

00:37:48.020 --> 00:37:50.500
So what we want to do is get
rid of that unknown element.

00:37:50.500 --> 00:37:54.580
And we can do that by calling
a very straightforward API.

00:37:54.580 --> 00:37:57.200
So let's jump into the code.

00:38:02.750 --> 00:38:06.080
So the first thing we do
is we find that user pane.

00:38:06.080 --> 00:38:10.330
We happen to give it an ID in our nib
so we can look it up by control ID.

00:38:10.380 --> 00:38:15.550
Then we call hiObject
setAccessibilityIgnored and pass true.

00:38:15.550 --> 00:38:18.330
And this marks that
individual view as ignored.

00:38:18.400 --> 00:38:21.630
Now the cool thing that the
Carbon Accessibility implementation does

00:38:21.700 --> 00:38:26.230
is it automatically promotes children
of an ignored element to be children

00:38:26.230 --> 00:38:28.930
of that ignored element's parent.

00:38:29.000 --> 00:38:33.290
So the best way I can explain this
is by re-running the application.

00:38:35.150 --> 00:38:36.440
and showing you what changed.

00:38:36.440 --> 00:38:41.560
So if we look at the static text again,
you'll see that that

00:38:41.560 --> 00:38:44.130
unknown element was removed.

00:38:44.160 --> 00:38:46.280
The static text is now
a child of the window.

00:38:46.300 --> 00:38:51.800
And we can show this again by looking
at the Go To pop up on the lock window.

00:38:51.830 --> 00:38:56.640
And if we go up to its parent,
we'll see that we're at the window.

00:38:56.700 --> 00:38:58.260
So we do all this
promotion automatically,

00:38:58.260 --> 00:38:59.660
which is kind of convenient.

00:38:59.660 --> 00:39:04.980
Okay, now I'd like to go back to slides.

00:39:10.110 --> 00:39:11.100
Slides, please.

00:39:11.100 --> 00:39:14.480
Thank you.

00:39:14.640 --> 00:39:15.120
Okay.

00:39:15.160 --> 00:39:17.840
So we've now done three pieces
of the pyramid and with far less

00:39:17.840 --> 00:39:19.300
slides than it took originally.

00:39:19.500 --> 00:39:24.120
So now we're gonna go ahead and
we're gonna do the fourth piece,

00:39:24.120 --> 00:39:28.590
which is accessorizing any custom
views or custom CDEFs you might have.

00:39:29.190 --> 00:39:32.800
The good news is that the
HIV subsystem already provides

00:39:32.800 --> 00:39:35.480
a bunch of free information,
a bunch of free accessibility

00:39:35.560 --> 00:39:37.600
information about your custom views.

00:39:37.720 --> 00:39:41.150
We already know that a view has a
parent and that a view lives in a window

00:39:41.180 --> 00:39:42.940
and that a view might have subviews.

00:39:42.990 --> 00:39:45.780
So we can already do things like
provide their parent attribute,

00:39:45.860 --> 00:39:47.100
their window.

00:39:47.100 --> 00:39:50.900
We know their size and position so we
can provide those through accessibility.

00:39:50.960 --> 00:39:53.650
But for a custom control,
we don't know what your

00:39:53.650 --> 00:39:54.960
control's purpose is.

00:39:55.030 --> 00:39:57.630
So it's up to you to provide a
certain amount of other information.

00:39:57.680 --> 00:39:59.810
You need to tell us,
or you need to provide

00:39:59.810 --> 00:40:01.690
the role for that view.

00:40:01.990 --> 00:40:04.970
You need to provide a value if
your view shows some kind of value.

00:40:05.050 --> 00:40:08.080
You might need to supply a minimum
or a maximum or various other things

00:40:08.080 --> 00:40:10.950
depending on exactly what your view does.

00:40:11.410 --> 00:40:14.300
If your view is clickable or pressable,
you probably also want to

00:40:14.300 --> 00:40:15.800
support Accessibility Actions.

00:40:15.810 --> 00:40:16.940
Probably is the wrong word.

00:40:16.940 --> 00:40:20.860
You must support Accessibility Actions
to allow a user of VoiceOver to

00:40:20.860 --> 00:40:22.640
trigger that functionality.

00:40:22.830 --> 00:40:26.200
Some views, a small subset of views,
need to also provide notifications,

00:40:26.200 --> 00:40:29.270
which I don't go into detail on here,
but we've got documentation

00:40:29.270 --> 00:40:30.880
that explains how to do that.

00:40:31.850 --> 00:40:34.800
So let's go ahead and go back to
the demo machine and I can show you

00:40:34.800 --> 00:40:37.490
how to accessorize a custom view.

00:40:37.950 --> 00:40:41.940
So if we run the sample app again,
actually on one of the earlier

00:40:41.940 --> 00:40:45.240
runs we already saw this too,
if we look at the image map view

00:40:45.240 --> 00:40:48.530
that draws the food pyramid,
we can see that it's unknown.

00:40:48.540 --> 00:40:53.040
It has some information provided for
it automatically by the HIV subsystem.

00:40:53.040 --> 00:40:55.240
It has a role and it
has a role description,

00:40:55.240 --> 00:40:57.640
but it's a completely meaningless
role and role description.

00:40:57.640 --> 00:40:58.240
It's unknown.

00:40:58.240 --> 00:41:00.240
It has a parent.

00:41:00.240 --> 00:41:02.980
That's because we know
what its parent view is.

00:41:02.980 --> 00:41:05.940
It has a top level UI element,
which is also the window.

00:41:05.940 --> 00:41:09.600
It's just an interesting way to refer
to sheets and certain other things.

00:41:09.710 --> 00:41:12.800
And we know its size
and position and so on.

00:41:13.000 --> 00:41:18.620
We want this outer food pyramid to
be a group around other elements.

00:41:18.620 --> 00:41:22.040
We need that guy's role to be AX group.

00:41:22.040 --> 00:41:25.660
And we need its role description
to be something like group as well.

00:41:25.760 --> 00:41:29.350
And finally, we need that pyramid to have
a set of child elements,

00:41:29.350 --> 00:41:32.380
one each representing each of
those buttons inside of it.

00:41:32.380 --> 00:41:35.740
So we're going to go into
the code and do all that.

00:41:45.710 --> 00:41:49.820
Okay, so this custom view was
implemented with HIFramework.

00:41:49.820 --> 00:41:51.700
So this is a little bit
of a quick plug here.

00:41:51.700 --> 00:41:57.310
HIFramework deals with some of the
grunt work having to do with HI objects

00:41:57.370 --> 00:41:59.730
subclassing and creating custom HIVs.

00:41:59.870 --> 00:42:03.780
We automatically take the Carbon events,
we handle them, we call method calls on

00:42:03.780 --> 00:42:05.020
your objects instead.

00:42:05.060 --> 00:42:07.850
So you can easily do,
if you're a C++ user,

00:42:07.970 --> 00:42:11.720
you can do a C++ subclass
of our TView class,

00:42:11.720 --> 00:42:13.500
just override the methods
that you're interested in,

00:42:13.500 --> 00:42:15.620
and we're going to do the
rest of the registering grunt

00:42:15.620 --> 00:42:16.930
work and things like that.

00:42:17.000 --> 00:42:21.070
So just for illustrative purposes,
I want to take you into HIFramework

00:42:21.200 --> 00:42:23.660
and show you how some of the
details on how the Accessibility

00:42:23.660 --> 00:42:24.940
Carbon events are handled.

00:42:25.050 --> 00:42:27.740
So this is the event
handler in HIFramework that

00:42:27.740 --> 00:42:29.690
handles those Carbon events.

00:42:29.700 --> 00:42:31.700
It's a Carbon event
handler like any other.

00:42:31.760 --> 00:42:33.940
The first thing it does
is it looks at the event,

00:42:34.080 --> 00:42:36.140
the incoming event class.

00:42:36.250 --> 00:42:38.760
If it sees that it's
an Accessibility event,

00:42:38.810 --> 00:42:41.120
I'm actually going to walk over
here because I can see David's

00:42:41.120 --> 00:42:42.950
monitor better than that one.

00:42:42.990 --> 00:42:46.110
If it's an Accessibility event,
the first thing we're going to

00:42:46.110 --> 00:42:48.620
do is we're going to extract the
UI element out of that event.

00:42:48.620 --> 00:42:50.460
Now, don't be scared by this code.

00:42:50.460 --> 00:42:52.020
It's just a templatized function.

00:42:52.020 --> 00:42:54.360
HIFramework's just doing
some magic behind the scenes.

00:42:54.410 --> 00:42:57.240
Really, this is just a call to
get event parameter.

00:42:57.380 --> 00:43:00.420
Once we have the UI element,
we extract its identifier

00:43:00.530 --> 00:43:01.620
as a convenience.

00:43:01.620 --> 00:43:05.230
You'll see that we end up passing this
identifier to the various C++ methods

00:43:05.230 --> 00:43:07.220
in our custom view implementation.

00:43:07.270 --> 00:43:10.000
Then we look at the kind of
the event that's coming in.

00:43:10.020 --> 00:43:12.420
If, for example, if it's an Accessibility
get child at point two,

00:43:12.420 --> 00:43:14.020
we extract the parameter from the event.

00:43:14.020 --> 00:43:16.920
This time we're extracting the
global mouse location that's coming

00:43:16.920 --> 00:43:19.810
in in the event that the assistive
app was interested in using.

00:43:19.830 --> 00:43:23.580
And finally, we're going to call a
method on your object,

00:43:23.580 --> 00:43:26.520
your custom view object,
called copyAccessibleChildAtPoint.

00:43:26.520 --> 00:43:30.820
Now, if your custom object had a
child object at that point,

00:43:30.820 --> 00:43:33.120
we're going to go ahead and
stick that back into the

00:43:33.120 --> 00:43:34.420
event as a return parameter.

00:43:34.420 --> 00:43:36.910
So you can see that if you
just derive from HIFramework,

00:43:36.920 --> 00:43:41.880
we're going to do a lot of the parameter
shuffling convenience things for you.

00:43:41.880 --> 00:43:45.850
And you can just sit back and be a
C++ client and have an easy life.

00:43:45.880 --> 00:43:48.240
The rest of the code is very,
very similar.

00:43:48.240 --> 00:43:50.180
We're basically pulling
some parameters out,

00:43:50.180 --> 00:43:53.380
maybe massaging them a little bit,
calling a method, and then stuffing the

00:43:53.380 --> 00:43:54.910
response back in the event.

00:43:55.460 --> 00:44:01.880
So now, what we need to do is we need
to change the values that our

00:44:01.880 --> 00:44:04.780
custom view is returning-- sorry,
change the default values that are

00:44:04.780 --> 00:44:09.250
getting returned for us for our custom
view's role and role description.

00:44:09.330 --> 00:44:14.320
And we also need to provide the
value of its child attribute.

00:44:14.410 --> 00:44:16.150
Now, to do that,
we're going to need to override

00:44:16.180 --> 00:44:18.010
certain accessibility Carbon events.

00:44:18.080 --> 00:44:21.020
Now, HIFramework, by default,
does not install the Carbon event

00:44:21.090 --> 00:44:23.440
handlers on views for efficiency's sake.

00:44:23.500 --> 00:44:26.680
So the first thing we're going
to do is call activate interface,

00:44:26.680 --> 00:44:28.910
which is just a shorthand around
installing the accessibility

00:44:28.910 --> 00:44:30.890
event handlers on our view object.

00:44:30.960 --> 00:44:35.110
Now, once we've done that,
we can put some prototypes in for

00:44:35.110 --> 00:44:37.400
the methods we're interested in.

00:44:37.460 --> 00:44:40.590
The first one is the
getAccessibleAttributeNames method.

00:44:40.670 --> 00:44:44.820
This method is going to be called when
an assistive app causes a Carbon event

00:44:44.820 --> 00:44:49.670
to be sent that's requesting all of the
attributes that a given view supports.

00:44:50.700 --> 00:44:54.160
The next method we're going to do
is getAccessibleNamedAttribute.

00:44:54.200 --> 00:44:57.240
This method is called when it
needs your view to supply a value

00:44:57.240 --> 00:44:59.500
for a particular named attribute.

00:44:59.500 --> 00:45:02.690
All right, so let's go to the
implementations of those.

00:45:08.070 --> 00:45:10.460
So here's the first one,
get accessible attribute names.

00:45:10.500 --> 00:45:12.240
So this method receives a
couple different things.

00:45:12.240 --> 00:45:15.490
It receives the Carbon event call
ref and the actual event itself.

00:45:15.540 --> 00:45:18.690
It also receives the UI element
to which the event pertains,

00:45:18.690 --> 00:45:22.750
and it receives the 64-bit identifier
that's been pulled out of the event,

00:45:22.870 --> 00:45:24.290
just as a convenience.

00:45:24.300 --> 00:45:28.500
Now, it's also receiving a
CF mutable array ref.

00:45:28.500 --> 00:45:29.740
This is the array.

00:45:29.740 --> 00:45:32.560
It's a mutable array that you're
supposed to fill out with all of the

00:45:32.560 --> 00:45:34.400
attributes that your view supports.

00:45:35.020 --> 00:45:37.440
So what we're going to do is
we're going to look at the

00:45:37.520 --> 00:45:39.440
incoming identifier for this call.

00:45:39.440 --> 00:45:42.460
And if it's zero,
that means it's a request for all

00:45:42.460 --> 00:45:45.990
of the accessibility attributes
for the view as a whole,

00:45:46.030 --> 00:45:47.530
meaning that food pyramid group.

00:45:47.580 --> 00:45:49.530
So this is exactly the
case we want to handle.

00:45:51.050 --> 00:45:52.900
Then we call next event handler.

00:45:52.900 --> 00:45:57.140
This allows the default
HIV implementation to pre-populate

00:45:57.140 --> 00:46:00.000
that array with all of the
attribute names it supports.

00:46:00.160 --> 00:46:02.880
In this case, size, position,
and so forth.

00:46:02.970 --> 00:46:05.890
Then we add the single
attribute that we are providing,

00:46:05.890 --> 00:46:07.900
which is the children attribute.

00:46:07.990 --> 00:46:10.610
And then we return no
error and we're done.

00:46:15.970 --> 00:46:18.580
So just a note as he's
pasting this other code in,

00:46:18.580 --> 00:46:24.920
the HIV base class already added the,

00:46:25.120 --> 00:46:27.840
The role and role description
attribute strings to that array.

00:46:27.840 --> 00:46:29.500
So that's why we didn't have them there.

00:46:29.550 --> 00:46:34.730
When we called callNextEventHandler,
those attributes were added to the array.

00:46:34.760 --> 00:46:37.880
Okay, so this is the
getAccessibleNamedAttribute method.

00:46:37.910 --> 00:46:41.280
This is called when we need to generate
a value for a particular attribute.

00:46:41.310 --> 00:46:44.880
Again, we get the call ref, the event,
the element, and the identifier,

00:46:44.900 --> 00:46:48.280
but the new thing we get here
is the attribute name that we

00:46:48.290 --> 00:46:50.100
need to supply a value for.

00:46:50.190 --> 00:46:52.360
Again, we look for identifier zero
'cause we're supplying the

00:46:52.360 --> 00:46:54.200
information for the whole view.

00:46:54.210 --> 00:46:56.850
Then we look at the incoming
attribute name and compare it to the

00:46:56.850 --> 00:46:58.590
ones we're gonna supply values for.

00:46:58.640 --> 00:47:01.620
In this case, if we get the children
attribute coming in,

00:47:01.660 --> 00:47:04.660
we know we need to supply the
array of children that we have.

00:47:04.870 --> 00:47:07.950
Now, like I said before,
our custom view is an ImageMap view

00:47:07.960 --> 00:47:09.500
that has a number of buttons in it.

00:47:09.530 --> 00:47:13.370
We need, our children are all of
those button elements.

00:47:13.420 --> 00:47:15.690
So what we're gonna do is
we're going to iterate,

00:47:15.740 --> 00:47:18.000
sorry, first thing we're gonna do is
we're gonna create an array.

00:47:18.050 --> 00:47:20.860
Then we're gonna iterate over all
the button parts in the ImageMap,

00:47:20.940 --> 00:47:23.300
and we're gonna build up an element to
represent one of those button parts,

00:47:23.300 --> 00:47:25.980
add it to the array,
move on to the next button part,

00:47:26.080 --> 00:47:28.060
create an element, add it to the array,
and so forth.

00:47:28.060 --> 00:47:30.710
And then finally,
we're going to call setEventParameter

00:47:31.020 --> 00:47:34.200
to stick that array into the event
as an output parameter so that

00:47:34.200 --> 00:47:37.560
it can get sent across the wire
to the assistive application.

00:47:37.570 --> 00:47:41.530
Actually, go back to the create
with HI object identifier.

00:47:41.690 --> 00:47:43.580
I wanna talk about that very,
very briefly.

00:47:43.640 --> 00:47:49.020
So we're passing our own HI object ref,
which is our own HIV ref of

00:47:49.020 --> 00:47:53.160
the ImageMap view in here,
and we're passing non-zero identifiers.

00:47:53.300 --> 00:47:55.060
So we've just set ourselves up.

00:47:55.080 --> 00:47:58.980
We've just defined our own
64-bit identifier space.

00:47:58.980 --> 00:48:01.800
We're saying that identifier
zero represents the whole view,

00:48:01.800 --> 00:48:03.960
identifier one represents
the first button part,

00:48:03.960 --> 00:48:06.470
two is the second button part, and so on.

00:48:07.920 --> 00:48:11.400
Okay, so the next attribute we're going
to supply a value for is the role.

00:48:11.610 --> 00:48:15.440
Now by default we got the unknown role,
but we wanted to have the group role.

00:48:15.440 --> 00:48:19.540
And in fact we want to use the
system standard group role.

00:48:19.540 --> 00:48:23.250
So what we do is we go and look up
in one of the AHA services headers,

00:48:23.280 --> 00:48:27.500
axroles.h, and we find the group role.

00:48:27.500 --> 00:48:31.400
And we add that to the event as an output
parameter using set event parameter.

00:48:31.400 --> 00:48:33.320
And that's all we have to do.

00:48:33.520 --> 00:48:35.920
Now whenever we provide a role,
whenever your view

00:48:35.920 --> 00:48:39.200
implementation provides a role,
it is your responsibility to

00:48:39.200 --> 00:48:40.580
provide a role description.

00:48:40.580 --> 00:48:44.190
And a role description is a human
readable or a speakable string

00:48:44.190 --> 00:48:46.550
describing that element's purpose.

00:48:46.580 --> 00:48:49.190
Now anytime you use a
standard system role,

00:48:49.190 --> 00:48:53.430
you can access the standard system
role description by using the HICopy

00:48:53.450 --> 00:48:55.840
Accessibility Role Description API.

00:48:55.840 --> 00:48:57.720
So here we're just
generating the standard role

00:48:57.870 --> 00:49:00.860
description string for group,
stuffing it in the event as an output

00:49:00.860 --> 00:49:02.540
parameter and returning no error.

00:49:07.810 --> 00:49:08.300
Yeah, so that's it.

00:49:08.300 --> 00:49:13.840
So let's go ahead and recompile
and show what we added.

00:49:20.340 --> 00:49:23.470
Okay, so now if we hover over
the food pyramid view,

00:49:23.470 --> 00:49:27.340
we can see that its role
and role description have

00:49:27.340 --> 00:49:30.000
changed to something suitable,
in this case group.

00:49:30.020 --> 00:49:33.030
We can also see that it
has an array of children.

00:49:33.310 --> 00:49:36.070
- "Six children,
one for each of those button

00:49:36.070 --> 00:49:40.760
parts." And if we go to that pop-up,
we can see that they're all unknown.

00:49:40.760 --> 00:49:44.160
So this is something we're
going to have to fix later.

00:49:44.160 --> 00:49:46.640
So with that,
let's go ahead and go back to

00:49:46.750 --> 00:49:51.340
slides and I can talk a little bit
about the next step of the pyramid.

00:49:52.860 --> 00:49:54.420
So we've built the fourth step.

00:49:54.420 --> 00:49:56.860
The fifth step is accessorizing
your completely custom

00:49:56.940 --> 00:49:59.240
interface in your application.

00:49:59.240 --> 00:50:02.420
Now, what does completely
custom interface means?

00:50:02.420 --> 00:50:05.210
Well, the honest answer is that the
line between the fifth step in

00:50:05.310 --> 00:50:09.740
the pyramid and the fourth step
of the pyramid blurs a little bit.

00:50:09.740 --> 00:50:14.210
What we just showed,
we accessorized the outer part of a view,

00:50:14.210 --> 00:50:16.760
but we didn't accessorize
the inner part of a view.

00:50:16.760 --> 00:50:20.720
Now, the inner parts of that view,
the actual part codes,

00:50:20.720 --> 00:50:24.180
count as completely custom
interface because the HIV subsystem

00:50:24.360 --> 00:50:25.920
can't do a whole lot with parts.

00:50:25.920 --> 00:50:29.360
We don't know what rectangle
corresponds to a certain part,

00:50:29.360 --> 00:50:31.740
what its functionality is,
and things like that.

00:50:31.740 --> 00:50:34.300
So if you're accessorizing
certain parts of a custom HIV,

00:50:34.300 --> 00:50:36.770
that counts as completely
custom interface.

00:50:36.790 --> 00:50:40.110
Another example of completely custom
interface is when your application is

00:50:40.110 --> 00:50:43.920
using your in-house view system or a
third-party view system like Power Plant.

00:50:43.930 --> 00:50:45.940
The toolbox doesn't know
anything about Power Plant.

00:50:45.940 --> 00:50:47.960
We can't make assumptions
about Power Plant classes,

00:50:47.960 --> 00:50:50.940
and we certainly can't provide
accessibility information for it.

00:50:50.940 --> 00:50:53.760
So it's up to your application
to provide the accessibility

00:50:53.760 --> 00:50:55.900
information for those custom views.

00:50:56.000 --> 00:50:58.710
Now, finally, the most--

00:50:58.950 --> 00:51:02.100
Probably the hardest thing to
accessorize is a completely custom

00:51:02.100 --> 00:51:04.440
interface that's procedurally driven.

00:51:04.440 --> 00:51:07.570
Maybe you've got old school
wait next event code.

00:51:07.580 --> 00:51:09.600
You're watching events
come off the queue.

00:51:09.600 --> 00:51:12.310
When you see a click come in,
you do some special stuff to

00:51:12.310 --> 00:51:14.020
handle clicking and so forth.

00:51:14.230 --> 00:51:17.900
But you don't really have an object
model that defines your interface.

00:51:17.900 --> 00:51:21.290
So that's also a completely
custom interface.

00:51:22.100 --> 00:52:30.400
[Transcript missing]

00:52:31.930 --> 00:52:34.850
The next thing you need to do is make
sure it's inserted into the accessibility

00:52:34.850 --> 00:52:36.800
containment hierarchy properly.

00:52:36.930 --> 00:52:40.760
By default, the toolbox will build an
accessibility hierarchy that looks

00:52:40.850 --> 00:52:43.560
just like the Windows view hierarchy,
essentially.

00:52:43.560 --> 00:52:47.560
A window has child views,
those views have children, and so forth.

00:52:47.690 --> 00:52:50.750
You need to make sure that your
HI objects and the elements you build

00:52:50.750 --> 00:52:53.730
from those HI objects are inserted
into that containment hierarchy

00:52:53.830 --> 00:52:58.550
properly so that they can be found
during hit testing and so forth.

00:52:59.310 --> 00:53:01.500
So in particular,
we have events that get sent

00:53:01.500 --> 00:53:03.540
out to find a child at point.

00:53:03.700 --> 00:53:07.100
You're probably going to need
to install Event Handler on your

00:53:07.180 --> 00:53:10.390
parent so that you can intercept
its Get Child at Point functionality

00:53:10.720 --> 00:53:13.980
and then provide your child,
or provide the element you're

00:53:13.980 --> 00:53:15.770
interested in serving up.

00:53:15.800 --> 00:53:20.800
Of course, your element must have that
parent as an attribute.

00:53:20.800 --> 00:53:27.950
And we also have an event that is
sent out to follow the focus chain,

00:53:28.030 --> 00:53:29.940
so you want to hook into that as well.

00:53:30.060 --> 00:53:33.920
And finally, your view might also need
to support notifications.

00:53:34.410 --> 00:53:38.100
So let's go into the code and
let's accessorize the completely

00:53:38.100 --> 00:53:40.820
custom part of our sample app.

00:53:40.860 --> 00:53:44.210
So we can switch monitors
over to the demo.

00:53:45.280 --> 00:53:47.200
Okay, so let's go ahead and rerun.

00:53:47.200 --> 00:53:49.150
Oh, prototypes first.

00:53:49.220 --> 00:53:52.180
All right,
so David is just going to paste in a

00:53:52.190 --> 00:53:56.470
few prototypes to do what we want to do,
and I'm going to discuss these when

00:53:56.470 --> 00:53:58.890
we actually get to the implementation.

00:54:02.880 --> 00:54:05.500
Oh, we're going to do,
I want to go do a run first.

00:54:05.500 --> 00:54:06.800
So actually take out the prototypes.

00:54:06.800 --> 00:54:11.500
Or just do a run without building.

00:54:21.250 --> 00:54:25.190
Okay,
so now if we look at the Food Pyramid

00:54:25.250 --> 00:54:31.590
group and lock on and then
tunnel into one of its children.

00:54:34.390 --> 00:54:35.360
This is what you get.

00:54:35.450 --> 00:54:36.220
This is not good.

00:54:36.300 --> 00:54:38.300
A couple problems here.

00:54:38.510 --> 00:54:41.350
First of all, it's got a role and a role
description of unknown,

00:54:41.380 --> 00:54:42.300
and it's got a parent of null.

00:54:42.300 --> 00:54:46.300
But even worse,
its hierarchy is empty except for itself.

00:54:46.300 --> 00:54:49.300
Now, all this is just not good,
so we need to fix all this.

00:54:49.510 --> 00:54:53.300
Each of these button parts is
basically just like a push button.

00:54:53.300 --> 00:54:56.300
You can click it, and when it's clicked,
some functionality happens.

00:54:56.300 --> 00:54:59.240
So we need it to support
the press action for one.

00:54:59.310 --> 00:55:02.290
Of course, it's visible,
so it's got to have a size and position.

00:55:02.350 --> 00:55:05.180
It's in a window,
so we need to provide that.

00:55:05.300 --> 00:55:07.300
We need it to have an appropriate parent.

00:55:07.300 --> 00:55:10.410
And then finally,
we need to make sure that the parent,

00:55:10.450 --> 00:55:12.550
the Image Map View,
has each of those button

00:55:12.550 --> 00:55:13.290
parts as children.

00:55:13.300 --> 00:55:16.690
And we already did part of that,
but there's a little bit more

00:55:16.700 --> 00:55:18.300
we're going to do in the code.

00:55:18.300 --> 00:55:21.530
So let's jump over to the source.

00:55:34.550 --> 00:55:37.070
So this is the Get Accessible
Attribute Names method that we

00:55:37.150 --> 00:55:41.060
already implemented to provide
the attribute names for the group.

00:55:41.130 --> 00:55:43.690
Now what we're going to do is
we're going to provide attributes

00:55:43.880 --> 00:55:45.240
for each of those button parts.

00:55:45.370 --> 00:55:48.130
Now here's where the
identifier gets cool.

00:55:49.410 --> 00:55:52.310
We already kind of defined
implicitly that while identifier

00:55:52.310 --> 00:55:55.530
0 means the whole group,
identifier 1 means the first button part.

00:55:55.540 --> 00:55:59.370
So we look at the incoming identifier,
and if it's in the range of 1 to

00:55:59.370 --> 00:56:01.690
the number of button parts we have,
we're going to take action.

00:56:01.700 --> 00:56:04.100
We're going to call
the next event handler.

00:56:04.100 --> 00:56:07.490
That's going to allow the
HI object mechanism to add

00:56:07.760 --> 00:56:10.390
three attributes to the array.

00:56:10.400 --> 00:56:12.420
It's going to add the role,
the role description,

00:56:12.420 --> 00:56:14.180
and the parent attributes to the array.

00:56:14.180 --> 00:56:15.840
So we're just going to leverage
that free functionality.

00:56:16.280 --> 00:56:19.760
And then we are going to add a bunch of
other attributes to the array manually.

00:56:19.760 --> 00:56:21.160
We're going to give it a description.

00:56:21.160 --> 00:56:24.180
Now, here I want to reverse to
something we talked about earlier.

00:56:24.180 --> 00:56:27.260
Earlier on when we looked at the
interface and found places where

00:56:27.260 --> 00:56:30.170
we needed to provide context,
we determined that we could

00:56:30.370 --> 00:56:33.260
provide context sort of as
a client in the application.

00:56:33.260 --> 00:56:36.780
We had a static text that we knew
we put next to a segmented view,

00:56:36.780 --> 00:56:38.300
so we associated them.

00:56:38.320 --> 00:56:41.920
And you'll find that in a lot
of your applications interface,

00:56:41.920 --> 00:56:45.710
you're going to link things together
and give things context as a client.

00:56:46.120 --> 00:56:49.080
Now, in this case, we're going to give it
context as an implementation.

00:56:49.220 --> 00:56:54.150
We know because we're an XML based
image map view that there's text

00:56:54.220 --> 00:56:57.660
in our image map XML that describes
what each of those buttons do.

00:56:57.660 --> 00:57:00.410
So our implementation here is
going to be able to provide

00:57:00.410 --> 00:57:01.360
the description attribute.

00:57:01.360 --> 00:57:04.660
Then we're going to give things like size
and position in the window and so forth.

00:57:04.660 --> 00:57:11.600
So now let's go ahead and provide
some values for those attributes.

00:57:15.420 --> 00:57:17.400
Paste in a little bit of code.

00:57:17.400 --> 00:57:24.840
Yeah, so from the peanut gallery,
it looks like a lot of code.

00:57:24.840 --> 00:57:25.740
No, this is a good point.

00:57:25.740 --> 00:57:28.090
It looks like a lot of code,
but it's really not a whole lot of code.

00:57:28.130 --> 00:57:29.780
It's basically a big switch statement.

00:57:29.820 --> 00:57:32.410
Put a lot of comments and a lot of
white space in the sample code so

00:57:32.410 --> 00:57:33.900
you can understand what we're doing.

00:57:33.900 --> 00:57:36.170
But really,
each of these is just comparing

00:57:36.210 --> 00:57:38.580
a string and then stuffing an
event parameter in an event.

00:57:38.580 --> 00:57:40.040
So it's really simple stuff.

00:57:40.040 --> 00:57:44.300
So again,
we're providing attribute values for

00:57:44.300 --> 00:57:47.140
button parts of our view as a whole.

00:57:47.140 --> 00:57:48.750
So we look for an appropriate identifier.

00:57:48.970 --> 00:57:51.540
Next,
we look at the incoming attribute string.

00:57:51.700 --> 00:57:53.480
So in this case,
we've got the description string.

00:57:53.480 --> 00:57:55.750
We're gonna give them an
appropriate description.

00:57:55.810 --> 00:57:58.880
Again,
we have a utility routine inside our

00:57:58.880 --> 00:58:01.580
Image Map view that can look up the
appropriate description from the XML.

00:58:01.670 --> 00:58:04.470
So we generate that, stick into the event
as an output parameter,

00:58:04.470 --> 00:58:05.760
and we're done.

00:58:06.430 --> 00:58:08.880
Another example is the parent attribute.

00:58:08.990 --> 00:58:10.240
Here's something a
little bit interesting.

00:58:10.240 --> 00:58:12.580
We know the parent of each
of those button parts is the

00:58:12.580 --> 00:58:13.900
Image Map View as a whole.

00:58:13.940 --> 00:58:16.760
So we create an element representing
the Image Map View as a whole.

00:58:16.920 --> 00:58:19.240
We pass in the view and
we use identifier zero,

00:58:19.240 --> 00:58:23.510
and the resulting element is stuffed
into the event as an output parameter.

00:58:24.010 --> 00:58:27.940
Now we know each of our button
parts is basically a push button,

00:58:27.940 --> 00:58:31.320
so we need to give it the
standard system button role.

00:58:32.630 --> 00:58:37.390
We look in the
AX Services header in ax-roles.h,

00:58:37.410 --> 00:58:39.400
find the standard button role,
add that to the event

00:58:39.410 --> 00:58:40.980
as an output parameter,
and we're done.

00:58:40.980 --> 00:58:44.310
And we're going to give it a
role description using the HICopy

00:58:44.310 --> 00:58:47.870
Accessibility Role Description
API to look up the standard

00:58:47.870 --> 00:58:49.190
system role description and so on.

00:58:49.200 --> 00:58:53.430
The only other one I want to talk
about is the ax-position attribute.

00:58:53.440 --> 00:58:56.920
Now, when you provide a value for
the ax-position attribute,

00:58:56.920 --> 00:59:00.080
it must be the global screen
location of your element.

00:59:01.200 --> 00:59:03.490
Because we're running
in a compositing window,

00:59:03.490 --> 00:59:05.460
and because we've written this
view to be a compositing view,

00:59:05.460 --> 00:59:08.740
we can very easily generate the
bounds of one of these button

00:59:08.790 --> 00:59:10.580
parts in view local coordinates.

00:59:10.640 --> 00:59:13.080
So we do that,
but now we need to translate

00:59:13.080 --> 00:59:15.680
those view local coordinates
into global coordinates.

00:59:15.680 --> 00:59:18.980
We've added a convenience API in
Tiger called HIPointConvert,

00:59:18.980 --> 00:59:20.200
which can do exactly that.

00:59:20.200 --> 00:59:23.270
So once we've translated that point,
we add it to the event as an output

00:59:23.270 --> 00:59:26.700
parameter and return no error.

00:59:29.800 --> 00:59:32.630
Okay,
so now this code that David selected

00:59:32.710 --> 00:59:35.300
here actually has a bug in it
in the version you can download.

00:59:35.300 --> 00:59:36.800
This is the correct code.

00:59:36.800 --> 00:59:39.230
The version you can download
today I think always says that

00:59:39.270 --> 00:59:40.800
a button part is not focused.

00:59:40.800 --> 00:59:42.140
This code is the right code.

00:59:42.200 --> 00:59:45.080
We actually provide,
we tell you a correct indication of

00:59:45.080 --> 00:59:46.800
whether a button is focused or not.

00:59:46.800 --> 00:59:49.780
We're going to try to get our
new code out there on the web as

00:59:49.780 --> 00:59:51.490
soon as we can after the show.

00:59:54.670 --> 01:00:01.120
Yeah, so now let's start doing some other
interesting methods to support

01:00:01.670 --> 01:00:02.670
Various other functionality.

01:00:02.760 --> 01:00:03.240
All right.

01:00:03.340 --> 01:00:05.820
So this is the
isAccessibleNamedAttributeSettable

01:00:05.820 --> 01:00:06.390
method.

01:00:06.520 --> 01:00:11.270
This method is called when your
view receives a Carbon event when an

01:00:11.330 --> 01:00:14.330
assistive app wants to know whether
a given attribute is settable.

01:00:14.360 --> 01:00:17.480
Now,
whenever you have a focusable element,

01:00:17.480 --> 01:00:19.690
focus is implicitly settable.

01:00:19.790 --> 01:00:22.360
You should be able to
set its focus to true,

01:00:22.360 --> 01:00:24.800
but you should not be able
to set its focus to false.

01:00:24.800 --> 01:00:26.600
You can only focus something.

01:00:26.600 --> 01:00:29.040
You can't unfocus it via
the Accessibility API.

01:00:29.040 --> 01:00:34.490
So we need to announce the fact that
our AXFocused attribute is settable,

01:00:34.500 --> 01:00:35.840
and we do that with this method.

01:00:35.840 --> 01:00:38.040
So again,
we look at the identifier space.

01:00:38.040 --> 01:00:40.400
We make sure we're getting
an identifier that represents

01:00:40.400 --> 01:00:41.640
one of these button parts.

01:00:41.640 --> 01:00:44.550
If so, if we're being asked about
the focused attribute,

01:00:44.580 --> 01:00:47.830
we return a settable value of true,
and HIFrameworks is going to stuff that

01:00:47.830 --> 01:00:49.750
into the event as an output parameter.

01:00:49.750 --> 01:00:53.020
There was one other note
I want to mention about this.

01:00:53.040 --> 01:00:55.230
Um...

01:00:55.760 --> 01:00:59.540
Right, so we only handle one
attribute in this function,

01:00:59.620 --> 01:01:05.220
and that's because HIToolbox, by default,
assumes all attributes are unsettable

01:01:05.350 --> 01:01:08.230
unless you explicitly override
that via the Carbon event or the

01:01:08.410 --> 01:01:09.780
method if you're using HIFramework.

01:01:09.780 --> 01:01:13.800
So you only need to handle
this method or implement this

01:01:13.950 --> 01:01:16.490
method for settable attributes.

01:01:17.420 --> 01:01:21.300
Okay, so we know focus is settable,
so let's go ahead and make it settable.

01:01:21.300 --> 01:01:25.300
So we implement the
setAccessibleNamedAttribute method.

01:01:25.340 --> 01:01:29.300
This corresponds to a Carbon event
that comes in from an assistive

01:01:29.300 --> 01:01:31.340
app when an assistive app says,
"Please set this

01:01:31.340 --> 01:01:33.230
attribute's value to foo."

01:01:33.760 --> 01:01:35.250
So we look for the
appropriate identifier.

01:01:35.340 --> 01:01:37.260
We look for the appropriate attribute.

01:01:37.300 --> 01:01:40.290
We extract the value
out of the Carbon event.

01:01:40.340 --> 01:01:42.810
Now, the incoming value could
be potentially anything.

01:01:42.910 --> 01:01:44.650
You never know what an assistive
app is going to send you.

01:01:44.750 --> 01:01:47.350
VoiceOver is really good,
but who knows what other app might

01:01:47.380 --> 01:01:49.270
be trying to stuff values in with.

01:01:49.820 --> 01:01:53.110
You can call getEventParameter and
just ask for the type you like.

01:01:53.180 --> 01:01:55.880
getEventParameter will automatically
coerce the data if it can.

01:01:55.900 --> 01:01:57.560
Otherwise, it'll return an error.

01:01:57.560 --> 01:02:00.000
So if we get the
appropriate Boolean value,

01:02:00.000 --> 01:02:03.930
and if it's true, we go ahead and call
setKeyboardFocus on ourselves,

01:02:03.930 --> 01:02:06.760
passing in the view and
passing in the identifier,

01:02:06.760 --> 01:02:08.640
which is a control part code.

01:02:08.640 --> 01:02:10.720
And that just happens to be
how our view is implemented.

01:02:10.720 --> 01:02:12.280
We know how to focus control part codes.

01:02:12.280 --> 01:02:14.970
But if focused is false,
we return a special error,

01:02:14.970 --> 01:02:17.350
which is K-A-X, error illegal argument.

01:02:17.360 --> 01:02:20.960
You return this error any
time you get a set request

01:02:20.960 --> 01:02:23.930
with a value you can't handle.

01:02:28.770 --> 01:02:33.950
Okay, before,
we already gave the Image Map View an

01:02:33.950 --> 01:02:37.000
array of children elements,
but that's not the only way.

01:02:37.000 --> 01:02:40.600
We need to do more to completely
splice it into the hierarchy.

01:02:40.720 --> 01:02:44.420
We need to make sure that that
Image Map View can report a

01:02:44.540 --> 01:02:46.890
child at a given point of itself.

01:02:46.900 --> 01:02:50.880
So here we're going to implement the
Copy Accessible Child at Point API,

01:02:50.980 --> 01:02:54.750
which corresponds to the Get Child at
Point Carbon event that I showed

01:02:54.750 --> 01:02:56.670
in earlier some of the slides.

01:02:57.540 --> 01:03:00.560
The important parameter here
is the In Where parameter.

01:03:00.560 --> 01:03:05.340
That is a global screen
location that is being queried.

01:03:05.340 --> 01:03:10.850
So it's your views or your element's
responsibility to return the first order

01:03:10.980 --> 01:03:13.640
child of itself at the given point.

01:03:13.640 --> 01:03:15.500
Don't tunnel down into grandparents.

01:03:15.500 --> 01:03:17.800
Just return the first
order child of yourself.

01:03:17.800 --> 01:03:21.360
Now, in this case,
because we are the Image Map View here,

01:03:21.360 --> 01:03:24.570
we're going to need to
return child of ourselves.

01:03:24.580 --> 01:03:26.860
So we're looking at
identifier zero coming in.

01:03:29.100 --> 01:03:32.700
We first take that global
screen location that came in,

01:03:32.700 --> 01:03:35.590
we translate it to view local
coordinates because we just so happen

01:03:35.590 --> 01:03:38.600
to have our own internal hit test
function that can generate a child

01:03:38.600 --> 01:03:40.540
part and a view local coordinate.

01:03:40.560 --> 01:03:43.940
We generate the child part,
and if it is indeed in one

01:03:43.940 --> 01:03:47.010
of our child button parts,
we build an element out of that

01:03:47.240 --> 01:03:49.120
by calling the long API there.

01:03:49.120 --> 01:03:52.650
We pass in our HIV ref and we pass
in the appropriate identifier,

01:03:52.650 --> 01:03:55.830
and that child gets returned in
an output parameter and stuffed

01:03:55.830 --> 01:03:57.570
in the event by HIV framework.

01:04:00.150 --> 01:04:03.000
Hold questions to the end,
unless you found a bug.

01:04:03.000 --> 01:04:05.000
I have a question about that.

01:04:05.000 --> 01:04:06.000
We'll come back.

01:04:06.000 --> 01:04:08.000
We can show this during Q&A.

01:04:08.000 --> 01:04:10.970
So the next method is get
accessible action names.

01:04:11.000 --> 01:04:13.000
Now,
each of our button parts is a button.

01:04:13.000 --> 01:04:15.000
It needs to be pressable.

01:04:15.100 --> 01:04:18.000
And you do this by supporting actions.

01:04:18.000 --> 01:04:22.360
Now, just like supporting attributes,
your element needs to be able to provide

01:04:22.370 --> 01:04:24.000
all of the actions that it supports.

01:04:24.000 --> 01:04:27.000
In this case, there's only one action
we need to support.

01:04:27.000 --> 01:04:29.000
So we look for an appropriate
identifier coming in,

01:04:29.000 --> 01:04:33.000
and then we add the press
action to the output array.

01:04:33.000 --> 01:04:36.730
And it just says, "We support the press
action," and we're done there.

01:04:37.640 --> 01:04:41.110
Anytime you support an action,
you need to be able to provide a

01:04:41.210 --> 01:04:45.090
human-readable or speakable description
of what that action's purpose is.

01:04:45.100 --> 01:04:48.250
So there's this Copy Accessible
Named Action Description API,

01:04:48.360 --> 01:04:51.400
which corresponds to a Carbon event
that HIFrameworks is handling for us.

01:04:51.490 --> 01:04:53.660
So we look for the
appropriate identifier.

01:04:53.760 --> 01:04:56.340
And since we support the Press action,
and the Press is a

01:04:56.340 --> 01:04:59.220
standard system action,
you can generate the standard system

01:04:59.330 --> 01:05:04.440
action description with the HICopy
Accessibility Action Description API.

01:05:04.610 --> 01:05:08.500
Now when the press actually happens,
when VoiceOver actually issues the press,

01:05:08.500 --> 01:05:10.870
"Please press this button, Command,
to you," we send out

01:05:10.870 --> 01:05:13.500
another Carbon event,
the Perform Named Action Carbon event.

01:05:13.620 --> 01:05:17.290
HI Framework in turn calls
this method on your view.

01:05:19.210 --> 01:05:20.100
Oh, that's right.

01:05:20.100 --> 01:05:21.100
So this is another example.

01:05:21.100 --> 01:05:23.280
The sample code that you
can download today-- Oh,

01:05:23.280 --> 01:05:24.100
it is the focus one.

01:05:24.100 --> 01:05:25.000
All right.

01:05:25.180 --> 01:05:26.100
Ignore that.

01:05:26.100 --> 01:05:29.100
So what we do is we look for
the appropriate identifier,

01:05:29.100 --> 01:05:32.060
and we know we only support one action,
so we don't even bother looking

01:05:32.060 --> 01:05:33.100
at the incoming action name.

01:05:33.100 --> 01:05:37.100
And then we call HIViewSimulateClick,
which will cause the part to flash,

01:05:37.100 --> 01:05:40.310
causes all the Carbon events
like KEVENT_CONTROL_HIT and

01:05:40.350 --> 01:05:43.090
KEVENT_COMMAND_PROCESS to get sent out.

01:05:51.340 --> 01:05:52.380
- Maybe talk about that.

01:05:52.380 --> 01:05:57.910
Well, okay,
so since we're rebuilding here, most,

01:05:57.960 --> 01:06:01.460
maybe about half of the focused code in
the sample app you can download is wrong.

01:06:01.460 --> 01:06:04.920
I already talked about some of it,
but specifically the code in

01:06:04.920 --> 01:06:10.750
SetAccessibleNamedAttribute,
if I remember correctly, it...

01:06:10.970 --> 01:06:14.430
either didn't exist or
it allowed unfocusing.

01:06:14.440 --> 01:06:15.220
I forget which.

01:06:15.320 --> 01:06:16.360
Anyway, we're going to correct that.

01:06:16.520 --> 01:06:18.800
You'll be able to download new code soon.

01:06:18.920 --> 01:06:23.050
All right, so if we launch UILM or
Accessibility Browser,

01:06:24.120 --> 01:06:26.990
and hover over one of the button parts.

01:06:27.040 --> 01:06:29.400
We can now see that it
makes a lot more sense.

01:06:29.680 --> 01:06:31.220
Its role is AX button.

01:06:31.540 --> 01:06:35.220
It's in the AX group,
which represents the food pyramid itself.

01:06:35.220 --> 01:06:37.080
It's got the appropriate parent.

01:06:37.080 --> 01:06:41.720
It's got an appropriate description,
size and position and so forth.

01:06:42.740 --> 01:06:43.540
So that was about it.

01:06:43.540 --> 01:06:45.880
That is how you accessorize
the completely custom

01:06:46.190 --> 01:06:47.750
parts of your application.

01:06:47.760 --> 01:06:51.850
So let's go ahead and go back to slides.

01:06:55.910 --> 01:06:58.540
So now that you've implemented
the final tier of the pyramid,

01:06:58.540 --> 01:07:00.700
you've achieved full accessibility power.

01:07:00.710 --> 01:07:03.510
Not only is this going to allow
you to work with VoiceOver,

01:07:03.510 --> 01:07:05.890
but it's going to allow a whole
suite of other assistive applications

01:07:05.920 --> 01:07:07.660
to work with your application.

01:07:07.660 --> 01:07:12.800
It can offer improved scriptability,
and if you saw the State of the Union,

01:07:12.800 --> 01:07:15.060
you saw some of the other
types of applications that can

01:07:15.060 --> 01:07:17.400
leverage accessibility features.

01:07:19.560 --> 01:07:22.940
Now, you've got all the tools you need
to accessorize your application,

01:07:22.950 --> 01:07:25.200
but it's time to make a decision.

01:07:25.250 --> 01:07:28.740
If you have a lot of completely
custom stuff in your app,

01:07:28.800 --> 01:07:32.600
it's quite a bit of work to do
all the accessibility gunk for it.

01:07:32.600 --> 01:07:34.950
I mean, I have to be honest here,
older code takes quite

01:07:34.950 --> 01:07:36.080
a while to accessorize.

01:07:37.730 --> 01:07:40.970
However,
we can offer you free accessibility

01:07:41.040 --> 01:07:43.030
support through HIView.

01:07:43.090 --> 01:07:45.850
Now, it's going to take some effort
to adopt HIView as well,

01:07:45.930 --> 01:07:47.840
but if you're already planning
on spending a certain amount of

01:07:47.850 --> 01:07:50.640
time implementing accessibility,
why don't you spend some of

01:07:50.640 --> 01:07:52.890
that time implementing HIView,
get a bunch of

01:07:52.890 --> 01:07:55.800
accessibility work for free,
and then also set the groundwork

01:07:55.890 --> 01:07:58.320
for doing things like compositing
mode and generally making your

01:07:58.360 --> 01:07:59.780
application a lot more modern.

01:07:59.820 --> 01:08:02.460
So,
think about those tradeoffs a little bit,

01:08:02.460 --> 01:08:05.270
and if it makes sense,
adopt HIView as part of your

01:08:05.270 --> 01:08:07.050
accessorization process.

01:08:07.540 --> 01:08:11.480
Finally, we've got HIFramework,
which is our C++ wrapper

01:08:11.480 --> 01:08:16.400
around HI object instantiation,
HIV subclassing, and so forth.

01:08:16.450 --> 01:08:19.210
It's what the sample code uses,
and it makes accessibility

01:08:19.220 --> 01:08:20.400
a heck of a lot easier.

01:08:20.400 --> 01:08:23.010
So you might consider using that as well.

01:08:24.670 --> 01:08:26.060
So we have just a few minutes left.

01:08:26.160 --> 01:08:30.060
I'd like to bring Pattie back up,
and she can run VoiceOver with our

01:08:30.060 --> 01:08:34.900
finished Image Map view and show
that everything is working well.

01:08:42.980 --> 01:08:46.660
Russell, go ahead and-- yeah,
there we go.

01:08:46.780 --> 01:08:48.090
Which app?

01:08:48.110 --> 01:08:49.690
This one?

01:08:49.690 --> 01:08:50.490
No.

01:08:50.550 --> 01:08:55.370
So go into here.

01:09:07.350 --> 01:09:08.490
So that's the inaccessible one.

01:09:08.620 --> 01:09:12.540
Alright, so I'm going to launch the
two of them side by side.

01:09:12.660 --> 01:09:16.540
First, I'm going to run VoiceOver on
the accessorized version.

01:09:16.570 --> 01:09:18.540
Of course, we have to press Command + F5.

01:09:18.540 --> 01:09:22.300
VoiceOver on Finder
Accessible Window Back Button.

01:09:22.370 --> 01:09:27.300
Image Map View Food Pyramid
Window Window Fasten Sweeps Button.

01:09:27.310 --> 01:09:30.410
Okay, that's the accessorized version,
which I'll show you shortly.

01:09:30.580 --> 01:09:34.540
Image Map View Food Pyramid
Window Window Unknown.

01:09:34.580 --> 01:09:37.650
Okay,
so we're on the application on the left,

01:09:37.650 --> 01:09:40.540
which right here,
which is the unaccessorized version.

01:09:40.590 --> 01:09:44.540
And I'm taking my VoiceOver on
the application right now.

01:09:44.540 --> 01:09:49.540
And let's listen again to hear
what the VoiceOver cursor is on.

01:09:49.540 --> 01:09:52.540
Unknown is in the VoiceOver cursor.

01:09:52.610 --> 01:09:54.530
That's not very useful, is it?

01:09:54.540 --> 01:09:57.530
Well, let's keep going and see what else
we find out about this application.

01:09:57.690 --> 01:09:59.540
Select Radio Button.

01:09:59.980 --> 01:10:01.150
Radio Button.

01:10:01.800 --> 01:10:03.540
Radio Button.

01:10:03.540 --> 01:10:06.790
All right, so far,
I know -- the only thing I know about

01:10:06.790 --> 01:10:10.540
this application is there's an unknown
and there's some radio buttons.

01:10:10.540 --> 01:10:13.540
I don't even know anything
else about this application.

01:10:13.540 --> 01:10:16.540
So for me right now,
this application is not very useful.

01:10:16.540 --> 01:10:20.540
So let's go ahead and see the
version that has been accessorized,

01:10:20.540 --> 01:10:22.540
and let's see the difference.

01:10:22.540 --> 01:10:27.540
Image Map View Food Pyramid
Window Window Fasten Sweeps Button.

01:10:27.540 --> 01:10:30.540
Okay, so again, if you listen again.

01:10:30.540 --> 01:10:32.540
Fasten Sweeps Button is
in the VoiceOver cursor.

01:10:32.540 --> 01:10:35.320
All right,
so at least right now I have a sense

01:10:35.370 --> 01:10:36.540
of where my VoiceOver cursor is.

01:10:36.540 --> 01:10:38.540
So let's go ahead and navigate around.

01:10:38.540 --> 01:10:39.540
Dairy Button.

01:10:39.540 --> 01:10:41.480
Meat and Eggs Button.

01:10:41.570 --> 01:10:44.080
Good,
so now I have a better sense that there

01:10:44.080 --> 01:10:49.540
are lots of buttons in this food pyramid,
and each of them belongs to a food group.

01:10:49.540 --> 01:10:51.450
So let's go ahead and interact with that.

01:10:51.560 --> 01:10:53.290
Press Meat and Eggs Button.

01:10:53.640 --> 01:10:56.540
Good,
now we can interact with the buttons.

01:10:56.540 --> 01:10:58.540
Let's go ahead and see what
else is in this application.

01:10:58.540 --> 01:11:01.540
Vegetables But Fruits But Grains Button.

01:11:01.540 --> 01:11:03.540
Meat and Eggs.

01:11:03.640 --> 01:11:05.290
Invisible Hot Spots.

01:11:05.600 --> 01:11:07.520
Select Radio Button.

01:11:07.560 --> 01:11:09.540
Invisible Hot Spots Radio Button.

01:11:09.540 --> 01:11:12.540
Oh,
so those radio buttons we heard earlier,

01:11:12.560 --> 01:11:14.540
now I have a better sense what they are.

01:11:14.540 --> 01:11:16.820
For example,
the one we're on right now is the

01:11:16.820 --> 01:11:18.530
Visible Hot Spot Radio Button.

01:11:18.620 --> 01:11:20.510
And of course, I can also press it.

01:11:20.560 --> 01:11:23.540
Press Visible Hot Spots Radio Button.

01:11:23.540 --> 01:11:27.540
So suddenly this application is much,
much more useful.

01:11:27.690 --> 01:11:30.540
So just by making the
application accessible,

01:11:30.540 --> 01:11:32.520
now VoiceOver can run with it.

01:11:32.540 --> 01:11:33.540
VoiceOver off.

01:11:33.540 --> 01:11:35.540
Go ahead and have Guy back up.

01:11:35.540 --> 01:11:36.540
Thank you, Patty.

01:11:36.540 --> 01:11:38.540
All right, now if we can go back
to slides real quickly.

01:11:38.540 --> 01:11:40.520
Try to get to the last few.

01:11:43.310 --> 01:11:45.900
Okay, so some other views, or some other,
I said view far too

01:11:45.900 --> 01:11:48.040
many times this session,
some other sessions that

01:11:48.100 --> 01:11:49.200
might be of interest.

01:11:49.410 --> 01:11:52.320
Tomorrow we talk about how to build
a custom HIV from the ground up.

01:11:52.440 --> 01:11:54.640
So if you're one of those
applications that has old code

01:11:54.640 --> 01:11:57.260
that's thinking of modernizing,
in part to get accessibility support,

01:11:57.260 --> 01:11:59.100
I highly recommend you
attend this session.

01:11:59.100 --> 01:12:01.840
We're covering a few topics
that we haven't talked about in

01:12:01.840 --> 01:12:03.350
the past in our HIV sessions.

01:12:03.350 --> 01:12:06.570
We have an accessibility
feedback forum Thursday morning,

01:12:06.590 --> 01:12:09.200
and we're running out of time here,
so I think you're going to have

01:12:09.200 --> 01:12:11.490
to save your questions for then
or catch us after the show,

01:12:11.490 --> 01:12:13.620
or sorry, catch us after the session.

01:12:13.620 --> 01:12:16.100
And finally, on Friday,
starting at 2 p.m., we

01:12:16.100 --> 01:12:17.540
have an accessibility lab.

01:12:17.540 --> 01:12:19.840
So if you're having troubles
accessorizing your app,

01:12:19.840 --> 01:12:21.790
or if you want a little
bit of help or pointers,

01:12:21.860 --> 01:12:22.960
feel free to drop by then.

01:12:22.960 --> 01:12:24.860
We're going to have
VoiceOver engineers here,

01:12:24.860 --> 01:12:27.660
some engineers from my team here
to help out with the HIV aspects.

01:12:27.660 --> 01:12:29.060
So please drop by.

01:12:29.160 --> 01:12:31.200
by and bring your questions,
bring any problems you've found.

01:12:33.580 --> 01:12:35.900
If you have further questions,
you can contact Mary Beth Janes,

01:12:35.900 --> 01:12:37.200
who's our Senior Segment Manager.

01:12:37.280 --> 01:12:41.330
And we also have an
Accessibility Dev mailing list,

01:12:41.400 --> 01:12:44.260
which is monitored by several
of the accessibility engineers

01:12:44.260 --> 01:12:45.840
and the VoiceOver engineers.

01:12:45.840 --> 01:12:49.650
If you have questions after the show,
feel free to post onto this mailing list,

01:12:49.650 --> 01:12:51.670
and we'll do our best to help you there.

01:12:52.280 --> 01:12:55.970
Right now on the developer website,
we have documentation,

01:12:56.100 --> 01:12:59.620
conceptual documentation and
API level documentation for

01:12:59.620 --> 01:13:02.190
accessorizing Carbon applications.

01:13:02.230 --> 01:13:04.200
So I urge you to check that stuff out.

01:13:04.310 --> 01:13:07.810
The sample code that we
showed today is also up there.