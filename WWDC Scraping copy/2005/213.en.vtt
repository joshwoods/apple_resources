WEBVTT

00:00:09.880 --> 00:00:11.830
Good morning and welcome
to the PDF session.

00:00:12.510 --> 00:00:17.970
Paul Danbold, one of Apple's evangelists.

00:00:17.970 --> 00:00:22.180
I'm going to start this session
with a little bit of an overview

00:00:22.310 --> 00:00:24.580
of all the PDF services in the OS.

00:00:25.790 --> 00:00:28.900
The goal here is to make
sure you get the big picture.

00:00:28.900 --> 00:00:31.860
You know,
what we've done in the OS to support PDF,

00:00:32.020 --> 00:00:34.760
why we designed the
APIs the way we did that,

00:00:34.760 --> 00:00:38.460
the various tools and things
we built upon those APIs.

00:00:38.460 --> 00:00:43.120
And you can see what we've done
manifested in many of our applications

00:00:43.120 --> 00:00:46.080
like Preview and other PDF-savvy apps.

00:00:46.200 --> 00:00:48.990
Most important, of course,
is we want you to get the message

00:00:48.990 --> 00:00:53.000
that you should support PDF in your
applications and software products and

00:00:53.000 --> 00:00:57.360
try to make sure you understand where
you can tap into the OS at what level

00:00:57.360 --> 00:00:59.060
in order to provide PDF functionality.

00:01:01.680 --> 00:01:04.800
Does anybody in the room
not know what PDF is?

00:01:05.010 --> 00:01:07.610
Stand up and wave your
hands if you don't.

00:01:07.900 --> 00:01:10.540
Uh, I was, uh,
"We'll take care of you later." Okay,

00:01:10.640 --> 00:01:13.910
so we're not gonna talk about the
details of the PDF specification,

00:01:14.070 --> 00:01:19.300
but, uh, we'll take just one slide,
basically to remind you why PDF exists.

00:01:19.300 --> 00:01:22.040
Uh, I'll let you read this
quote from John Warnock,

00:01:22.090 --> 00:01:24.640
uh,
and then just make the simple point that

00:01:25.320 --> 00:01:31.260
when we designed our APIs to support PDF,
uh, the model we had in mind was true

00:01:31.260 --> 00:01:33.290
to the original spirit of PDF.

00:01:33.530 --> 00:01:39.760
Uh, basically as a container for,
you know, text, graphics, images, uh,

00:01:39.760 --> 00:01:44.260
that's sufficient, uh, high fidelity,
device independent, et cetera.

00:01:44.390 --> 00:01:46.760
Um, and so when you look
and evaluate our APIs,

00:01:46.760 --> 00:01:49.590
that's what you should bear in mind.

00:01:51.080 --> 00:01:54.920
So I'm not here talking about
T-Raw or some other file format.

00:01:55.010 --> 00:01:56.200
We're talking about PDF today.

00:01:56.200 --> 00:01:59.110
And we picked PDF because
it met our requirements.

00:01:59.120 --> 00:02:02.690
And I've just got a couple of
things to say about the ways in

00:02:02.690 --> 00:02:07.880
which PDF meets our requirements,
and I think it hopefully meets yours.

00:02:07.880 --> 00:02:13.460
One thing that almost goes without saying
is that PDF is a proven technology.

00:02:14.460 --> 00:02:18.030
If anybody here is from the Acrobat team,
thank you very much.

00:02:18.060 --> 00:02:20.960
Your product is coming
up for 12 years old.

00:02:21.020 --> 00:02:23.660
I think actually sometime next week.

00:02:23.700 --> 00:02:27.110
And the PDF spec itself is
a little older than that.

00:02:27.170 --> 00:02:29.740
It's been around for about 13 years.

00:02:29.740 --> 00:02:31.670
So it's well established.

00:02:31.680 --> 00:02:35.220
Pretty much anybody on the planet
knows that if you want to create

00:02:35.290 --> 00:02:38.900
a document that may be viewed
on other computers and printed,

00:02:38.900 --> 00:02:43.270
etc., and appearance matters,
then PDF is the choice.

00:02:43.320 --> 00:02:44.440
It's definitely the best choice.

00:02:44.460 --> 00:02:45.710
So,

00:02:45.760 --> 00:02:49.210
Another thing we like about
PDF is that the spec is public.

00:02:49.280 --> 00:02:52.960
Go to adobe.com any day and
download the specification.

00:02:52.960 --> 00:02:57.280
You don't have to sign a license
agreement or do any NDA stuff.

00:02:57.320 --> 00:03:02.500
You can read about PDF in detail
and go write products that use PDF.

00:03:02.500 --> 00:03:06.720
Not quite sure the same is true of Metro,
but we'll see.

00:03:06.720 --> 00:03:10.410
And talking about that,
or sort of tying into that,

00:03:10.500 --> 00:03:13.630
another thing we really like
is that PDF is cross-platform.

00:03:14.590 --> 00:03:17.640
You know, you can create a PDF on
any computer system,

00:03:17.640 --> 00:03:21.980
and that PDF might be viewed
on any other computer,

00:03:21.980 --> 00:03:25.520
and it might end up on paper,
and modulo the capabilities

00:03:25.580 --> 00:03:26.960
of the target device.

00:03:27.040 --> 00:03:28.180
It's going to look the same.

00:03:29.690 --> 00:03:32.810
Another thing we like about PDF,
because there's lots of

00:03:32.900 --> 00:03:35.660
PDF documents in the world,
is that it's a compact

00:03:35.660 --> 00:03:37.510
and efficient file format.

00:03:37.560 --> 00:03:41.400
You know, if you have an image appearing
multiple places in a document,

00:03:41.400 --> 00:03:45.130
only one instance of that image
can be stored in the file.

00:03:45.140 --> 00:03:48.560
And the same goes for other things
that tend to take up a lot of space,

00:03:48.600 --> 00:03:50.940
like, you know, fonts and color spaces.

00:03:50.940 --> 00:03:52.920
So it's an efficient file format.

00:03:52.920 --> 00:03:58.160
And then if you're security conscious,
a nice thing about PDF is that you can

00:03:58.160 --> 00:04:01.130
encrypt and password protect PDF files.

00:04:02.580 --> 00:04:05.620
So all those things are good
for us and good for you,

00:04:05.770 --> 00:04:08.860
good for customers.

00:04:08.880 --> 00:04:11.590
That quote that I had a couple
of slides back from John Warnock

00:04:11.700 --> 00:04:12.960
had the word "paper" in it.

00:04:12.960 --> 00:04:17.050
And we like to think of
PDF as digital paper.

00:04:17.280 --> 00:04:21.280
And there's some
interesting aspects to that.

00:04:21.280 --> 00:04:25.470
Unlike, say, HTML,
when you create a PDF file,

00:04:25.650 --> 00:04:28.540
you as a creator control what that
PDF file is going to look like.

00:04:28.540 --> 00:04:30.350
It's formatting.

00:04:30.520 --> 00:04:35.860
So regardless where that PDF is viewed,
on somebody else's screen, on paper,

00:04:36.000 --> 00:04:39.180
the format should be preserved.

00:04:39.180 --> 00:04:42.240
All that information is stored
inside the PDF file itself.

00:04:42.240 --> 00:04:45.210
And then when it's drawn
on screen or goes to paper,

00:04:45.250 --> 00:04:48.670
then it can be drawn with the highest
fidelity and the best color accuracy

00:04:48.670 --> 00:04:51.250
possible for that target device.

00:04:51.570 --> 00:04:56.080
And it is page-oriented,
which means you as the

00:04:56.080 --> 00:04:58.400
creator of the PDF file,
you have some say in

00:04:58.500 --> 00:05:01.780
where the page breaks are,
and for every page size,

00:05:01.780 --> 00:05:04.940
you control the margins, et cetera.

00:05:05.140 --> 00:05:07.960
And it's random access.

00:05:07.960 --> 00:05:14.710
So kind of unlike PostScript,
the viewer of a PDF file can go to

00:05:14.720 --> 00:05:18.630
any page in any order and display it,
print it, et cetera.

00:05:18.810 --> 00:05:24.000
As spotlight shows, and as you can do in
applications like Preview,

00:05:24.000 --> 00:05:25.900
et cetera, you can search PDF files.

00:05:25.920 --> 00:05:29.100
That's pretty easy.

00:05:29.460 --> 00:05:31.910
I mentioned last slide, it's encryptable.

00:05:31.920 --> 00:05:35.560
So you can password protect a PDF file.

00:05:35.560 --> 00:05:38.180
If you open it up with
the owner password,

00:05:38.180 --> 00:05:43.200
you've got unlimited privileges to go as
far as changing the content of the PDF.

00:05:43.200 --> 00:05:47.660
If you open it up with a user password,
you have limited privileges.

00:05:47.660 --> 00:05:50.970
And so you can usually view it,
but you may not be able to

00:05:50.980 --> 00:05:52.370
copy the file or print it.

00:05:55.290 --> 00:05:59.630
Last, PDF was never designed
for inline editing,

00:05:59.710 --> 00:06:02.350
like you can edit an RTF file, etc.

00:06:02.410 --> 00:06:07.190
But if you want to circulate
a PDF document for review,

00:06:07.520 --> 00:06:10.950
those other people can circle
things they don't like,

00:06:11.040 --> 00:06:12.570
add little text stickers, etc.

00:06:12.570 --> 00:06:13.220
to the document.

00:06:13.220 --> 00:06:17.230
They can't fix your spelling mistakes,
but it's an excellent format for

00:06:17.250 --> 00:06:19.210
groupware and things like that.

00:06:19.220 --> 00:06:22.020
So put all that stuff together.

00:06:22.020 --> 00:06:24.910
Basically,
PDF is great for a lot of purposes.

00:06:24.970 --> 00:06:25.930
It's a lot of purposes
that are important to us.

00:06:26.040 --> 00:06:30.180
That's why, you know, for printing,
it's our default spool file format.

00:06:30.240 --> 00:06:33.580
That's why it's a native file
format for our graphics stack.

00:06:33.660 --> 00:06:37.680
And it's why we make it so easy
to create PDF on the platform.

00:06:37.680 --> 00:06:40.530
You can do it from the print
dialog for any application.

00:06:43.410 --> 00:06:45.900
So here's where you
come into the picture.

00:06:45.900 --> 00:06:47.900
What can you do with PDF?

00:06:47.940 --> 00:06:51.100
And I guess the answer
ranges from nothing,

00:06:51.100 --> 00:06:52.980
in which case,
I don't know why you're in this session,

00:06:52.980 --> 00:06:58.450
but to everything that you can do
in apps like the ones we provide,

00:06:58.450 --> 00:06:59.600
like Preview.

00:06:59.600 --> 00:07:03.010
Safari is a good PDF client as well.

00:07:03.290 --> 00:07:05.200
Generally speaking,
the more your application

00:07:05.200 --> 00:07:11.020
deals with text,
vector graphics, images, et cetera,

00:07:11.020 --> 00:07:13.140
the more PDF functionality you
should build into your application.

00:07:14.190 --> 00:07:16.460
I'll let you read this list.

00:07:16.580 --> 00:07:17.770
I just want to make a couple of points.

00:07:17.770 --> 00:07:22.500
The first one is,
if you provide the functionality

00:07:22.560 --> 00:07:26.240
to open up a PDF from the file
system or somewhere on the network,

00:07:26.240 --> 00:07:29.650
we really think you should be able
to open up PDF from the PaceBoard.

00:07:29.650 --> 00:07:37.000
So, that's a great sort of solution for
getting PDF from one app to another.

00:07:37.000 --> 00:07:39.840
Another thing is,
although we provide PDF generation

00:07:39.840 --> 00:07:43.630
from the print dialog,
something you should think about is

00:07:43.630 --> 00:07:48.910
whether your users are going to think
to go there if they want to create PDF.

00:07:49.120 --> 00:07:53.730
So, you should think maybe about
adding a save as or an export

00:07:54.220 --> 00:07:56.310
item under the file menu.

00:07:56.460 --> 00:07:59.670
If your application is, you know,
let's say a music application or

00:07:59.670 --> 00:08:03.960
deals with a lot of numbers or video,
for example, then maybe export makes

00:08:03.960 --> 00:08:05.400
more sense than save as.

00:08:05.620 --> 00:08:07.920
Anyway, something to think about.

00:08:08.220 --> 00:08:14.060
I mentioned the fact that
PDF isn't designed for editing,

00:08:14.060 --> 00:08:17.210
interactive editing,
but there's nothing to stop you writing

00:08:17.210 --> 00:08:24.220
a software product that can modify
PDF files for very useful purposes.

00:08:24.220 --> 00:08:28.490
For example,
a printed position program is going to

00:08:28.570 --> 00:08:34.820
relay out the pages in a PDF document
for maybe printing a booklet.

00:08:36.120 --> 00:08:38.680
So we'll get into all the
other things mentioned on this

00:08:38.790 --> 00:08:39.920
slide later on in the session.

00:08:42.460 --> 00:08:47.740
I've got a diagram here, PDF services,
just to give you the big picture

00:08:47.740 --> 00:08:50.000
for what you can do with PDF.

00:08:50.260 --> 00:08:55.060
And the gist of this diagram is
that Quartz 2D is the mothership.

00:08:55.130 --> 00:08:59.040
If you want to go down for the finest
brain control over PDF processing,

00:08:59.040 --> 00:09:01.250
the Quartz APIs provide that for you.

00:09:03.160 --> 00:09:08.370
You may well want to go down there to
implement the functionality you want,

00:09:08.400 --> 00:09:11.160
but something we're going to focus
on in this session are the things

00:09:11.160 --> 00:09:12.720
that are on the second layer.

00:09:12.720 --> 00:09:16.750
I'll get into those a little bit later,
and then we'll really go into

00:09:16.750 --> 00:09:18.560
depth on things like PDF Kit.

00:09:18.720 --> 00:09:21.920
The important thing for you coming
out of this session is to know that

00:09:21.920 --> 00:09:26.720
if you want to add PDF functionality,
yes, Quartz may be the place to go,

00:09:26.720 --> 00:09:30.710
but then there are the higher level
services that may make your life easier.

00:09:32.150 --> 00:09:36.450
So we'll start with Quartz, Quartz 2D.

00:09:36.460 --> 00:09:40.800
It contains basically a comprehensive
set of APIs for working with PDF.

00:09:40.800 --> 00:09:43.920
PDF creation, opening up, drawing PDF,
etc.

00:09:43.920 --> 00:09:46.980
The good thing is that we've
done the heavy lifting for you.

00:09:46.980 --> 00:09:50.580
All the APIs, easy to use,
very well documented,

00:09:50.580 --> 00:09:52.270
lots of sample code.

00:09:52.270 --> 00:09:56.570
So if you want to add PDF functionality,
you're very welcome to read

00:09:56.620 --> 00:09:58.420
the PDF specifications.

00:09:58.480 --> 00:10:00.080
It's about 1,200 pages long.

00:10:00.080 --> 00:10:02.080
But you don't really need to do that.

00:10:02.100 --> 00:10:05.000
You know, look at our documentation,
start using our APIs,

00:10:05.000 --> 00:10:07.020
and you'll be off to the
races pretty quickly.

00:10:09.210 --> 00:10:12.730
Definitely not in this session
going to give you the full set

00:10:12.820 --> 00:10:15.960
of PDF APIs out of Quartz 2D.

00:10:15.960 --> 00:10:20.930
I've just got two slides here with
a small sampling of the PDF APIs.

00:10:21.640 --> 00:10:28.490
Just want to make a couple of points.

00:10:28.490 --> 00:10:28.490
I'll repeat the point
about the pasteboard.

00:10:28.830 --> 00:10:31.530
Down on that third bullet item,
I want to make the important point.

00:10:31.540 --> 00:10:35.030
You know, we enable you to open
up protected PDF files,

00:10:35.120 --> 00:10:36.700
but it's an honor system.

00:10:36.700 --> 00:10:39.930
So if you open up a
password-protected PDF file,

00:10:39.940 --> 00:10:43.600
it's your duty to honor the
privileges that are in that PDF file.

00:10:43.600 --> 00:10:46.530
So you should call the
APIs that we provide,

00:10:46.540 --> 00:10:49.830
and I haven't listed them here, but,
you know,

00:10:49.840 --> 00:10:52.900
we provide a function to check if
it's okay to print the PDF file.

00:10:52.900 --> 00:10:57.020
And in fact, even if the password
string is blank in the PDF,

00:10:57.200 --> 00:10:59.940
you should always check the
privileges before you enable

00:10:59.940 --> 00:11:03.810
any type of functionality on the
PDF document that's being opened up.

00:11:05.540 --> 00:11:08.560
And I'm going pretty
quickly through this slide,

00:11:08.690 --> 00:11:11.640
but just looking down at
the bottom bullet item,

00:11:11.640 --> 00:11:14.500
we have, especially in Tiger,
we've provided full

00:11:14.500 --> 00:11:15.600
functionality for PDF.

00:11:15.600 --> 00:11:16.890
You can get at everything.

00:11:17.060 --> 00:11:20.130
And there are lots of APIs for
getting information out of a

00:11:20.210 --> 00:11:21.840
PDF document once you've opened it up.

00:11:22.200 --> 00:11:25.250
There's document-oriented APIs,
page-oriented APIs.

00:11:25.250 --> 00:11:28.950
So we're really giving you
full access to the PDF.

00:11:30.860 --> 00:11:34.800
When it comes to creating PDF,
that's also extremely easy.

00:11:34.800 --> 00:11:38.370
If you already know how
to use our drawing APIs to

00:11:38.420 --> 00:11:42.040
draw into a window context,
you can use that same code and draw

00:11:42.140 --> 00:11:45.740
the same content into a PDF context,
and you've got a PDF file.

00:11:45.740 --> 00:11:47.360
So it's really easy.

00:11:47.360 --> 00:11:51.680
You should also enable
writing PDF to the pasteboard,

00:11:51.760 --> 00:11:53.860
like I keep mentioning.

00:11:54.840 --> 00:11:57.730
In Tiger,
we've added a couple more things

00:11:57.840 --> 00:12:01.600
just to sort of keep up with
the latest capabilities of PDF.

00:12:01.600 --> 00:12:05.610
You can create links from
the document you're creating.

00:12:05.850 --> 00:12:10.240
I haven't shown the API to do this,
but you can create a link to a web page.

00:12:10.250 --> 00:12:12.860
The two functions I've listed
here enable you to create a link

00:12:12.980 --> 00:12:16.910
between one rectangular area
on a page to somewhere else,

00:12:16.970 --> 00:12:19.620
to a point somewhere
else in the document.

00:12:20.200 --> 00:12:23.050
The last thing we did in,
the last thing mentioned on

00:12:23.050 --> 00:12:26.740
this slide that we put into
Tiger was really to give you 100%

00:12:26.740 --> 00:12:28.460
access to the content of the PDF.

00:12:28.700 --> 00:12:30.840
So you can now get into
the page content stream.

00:12:30.840 --> 00:12:33.160
This is the point,
if you need to do this,

00:12:33.200 --> 00:12:37.100
where you really do need to start
reading the PDF specification.

00:12:37.100 --> 00:12:41.520
Once you know about PDF operators
and the whole imaging model,

00:12:41.520 --> 00:12:44.160
if you need to,
and again this is only for

00:12:44.160 --> 00:12:48.060
very specialized purposes,
you can get down into the

00:12:48.060 --> 00:12:48.380
contents of every page.

00:12:50.930 --> 00:12:54.510
We can never talk about PDF without
somebody getting up and saying,

00:12:54.510 --> 00:12:57.570
where are we with respect
to the latest specification?

00:12:57.640 --> 00:13:00.170
And the simple answer is,
we're up to date.

00:13:00.780 --> 00:13:03.370
Generally speaking,
any PDF document you find should

00:13:03.370 --> 00:13:05.780
be rendered correctly by Quartz 2D.

00:13:05.780 --> 00:13:09.170
It should look good in preview and
any other application that uses it.

00:13:09.240 --> 00:13:13.330
If you run into a document
that doesn't render correctly,

00:13:13.330 --> 00:13:14.560
send it to us.

00:13:14.870 --> 00:13:15.580
File a bug report.

00:13:16.260 --> 00:13:21.830
We've got a couple of known exceptions,
knockout groups and some oddball shaders.

00:13:21.840 --> 00:13:25.520
So there's a few things that
we may fill in in the future,

00:13:25.520 --> 00:13:27.430
but basically we're up to
date with the latest spec.

00:13:27.500 --> 00:13:32.290
When it comes to writing out PDF,
you don't want to assume

00:13:32.290 --> 00:13:35.980
that everybody who reads your
PDF supports the latest spec.

00:13:36.050 --> 00:13:38.560
So compatibility is the important thing.

00:13:38.560 --> 00:13:43.160
We start off with 1.3, the 1.3 spec.

00:13:43.300 --> 00:13:43.900
That's our baseline.

00:13:43.900 --> 00:13:46.240
And then only when we need
it do we start using it.

00:13:46.240 --> 00:13:48.410
We're not using things out of 1.4 or 1.5.

00:13:48.560 --> 00:13:51.680
So we use some 1.4
stuff for transparency,

00:13:51.680 --> 00:13:52.180
etc.

00:13:54.720 --> 00:13:58.610
Okay, just want to make one more point
before I move off from Quartz,

00:13:58.770 --> 00:14:01.290
and that is to say, you know,
to remind you,

00:14:01.290 --> 00:14:07.520
all the features are there, easy to use,
well designed, well documented.

00:14:07.580 --> 00:14:10.310
The other thing you shouldn't
forget is it's free.

00:14:10.320 --> 00:14:13.100
You know,
you've got the Quartz framework,

00:14:13.100 --> 00:14:15.780
or rather the Core Graphics framework.

00:14:15.780 --> 00:14:17.260
All those APIs are there for you.

00:14:19.190 --> 00:14:20.780
Now it's these other things
that we're going to cover in

00:14:20.780 --> 00:14:23.350
more detail in this session,
so I'm not going to steal the

00:14:23.350 --> 00:14:25.900
thunder from the folks who are
going to take over after me.

00:14:26.070 --> 00:14:28.040
Just to take you through
the layers quickly.

00:14:28.040 --> 00:14:33.280
PDF Kit, if you've got a Cocoa app
running on Tiger or later,

00:14:33.450 --> 00:14:35.210
PDF Kit is probably your answer.

00:14:35.210 --> 00:14:39.470
Very easy to use and just look
at what you can do in Preview,

00:14:39.470 --> 00:14:42.740
Mail, even Xcode, definitely Safari.

00:14:42.740 --> 00:14:46.780
If that kind of functionality
for PDF meets your needs,

00:14:47.150 --> 00:14:49.100
then PDF Kit is your answer.

00:14:50.800 --> 00:14:54.060
You know,
we've got all the APIs to generate PDF,

00:14:54.060 --> 00:14:57.040
but sometimes you want to repurpose PDF.

00:14:57.040 --> 00:15:01.650
You might want to generate
PDFX3 for sort of print,

00:15:01.830 --> 00:15:05.950
for sort of pre-press print applications.

00:15:05.960 --> 00:15:10.740
PDFX3 is a subset of PDF where you want
to control the type of PDF generated,

00:15:10.740 --> 00:15:12.630
you know,
just to make sure you don't have nasty

00:15:12.700 --> 00:15:14.380
surprises when the PDF goes to the press.

00:15:15.110 --> 00:15:16.930
And you can do that with a Quartz filter.

00:15:16.930 --> 00:15:20.870
You can also do things like repurpose
PDF for viewing on the web where you

00:15:20.920 --> 00:15:22.600
don't want very high resolution images.

00:15:22.600 --> 00:15:27.390
So the place to go to create those
Quartz filters is the ColorSync utility.

00:15:27.450 --> 00:15:31.520
You can go there, create Quartz filters,
look at the ones that Apple provides,

00:15:31.590 --> 00:15:35.940
you know, pre-canned for you,
test them out and apply them.

00:15:35.940 --> 00:15:39.290
So you can repurpose your
PDF files with Quartz filters.

00:15:39.290 --> 00:15:41.800
And they're accessible from
Preview and the Print dialog.

00:15:45.050 --> 00:15:48.500
To state the obvious,
the printing system knows all about PDF.

00:15:48.500 --> 00:15:51.350
We have code that will
turn PDF into PostScript,

00:15:51.350 --> 00:15:52.800
PDF into Raster data.

00:15:52.860 --> 00:15:55.800
We have code to turn PostScript into PDF.

00:15:55.860 --> 00:15:59.850
And what we'll get into,
and what Richard Blanchard touched

00:15:59.940 --> 00:16:03.640
on in the previous session,
was we allow you to hijack the

00:16:03.640 --> 00:16:07.700
PDF coming out of the print
dialog and send it to your code,

00:16:07.870 --> 00:16:12.620
your application's tools or scripts,
whatever, and use this mechanism

00:16:12.750 --> 00:16:14.110
to create PDF workflows.

00:16:15.670 --> 00:16:17.950
Something else we'll cover
later on in this session,

00:16:18.130 --> 00:16:20.720
Automator,
which I assume you all know about,

00:16:20.720 --> 00:16:24.240
it has a set of PDF actions,
and we'll be showing you how to create

00:16:24.330 --> 00:16:29.160
your own PDF actions to extend what you
can do with PDF in automotive workflows.

00:16:31.690 --> 00:16:37.110
And since Panther,
there's been Quartz bindings for Python,

00:16:37.210 --> 00:16:41.140
so you can now generate, modify,
and do other things with

00:16:41.140 --> 00:16:42.390
PDF in Python scripts.

00:16:44.870 --> 00:16:48.110
I just got one last thing before
I hand over to talk about,

00:16:48.110 --> 00:16:51.180
and that is that PDF is a great
solution for legacy formats.

00:16:51.230 --> 00:16:56.010
So if your software is used in places
where people insist on continuing to

00:16:56.010 --> 00:17:00.470
use EPS graphics and things like that,
then PDF is a great solution.

00:17:00.470 --> 00:17:04.110
Of course, PDF shares the same imaging
model with PostScript.

00:17:04.160 --> 00:17:09.420
So when you're handling EPS, for example,
using our PDF APIs,

00:17:09.520 --> 00:17:14.560
you don't lose any of the
information in the graphic text.

00:17:14.560 --> 00:17:18.510
The text stays as text,
lines stay as lines, et cetera.

00:17:18.620 --> 00:17:21.060
If you use the APIs,
some of them listed here,

00:17:21.060 --> 00:17:26.020
then what you can do is you can
render the EPS with full fidelity onto

00:17:26.070 --> 00:17:28.560
the window and print it correctly.

00:17:28.710 --> 00:17:32.450
You don't have to see the, you know,
the jaggy preview images

00:17:32.450 --> 00:17:34.020
either on screen or print.

00:17:34.040 --> 00:17:37.170
So for Carbon, Cocoa,
and even down at the BSD layer,

00:17:37.230 --> 00:17:41.620
we let you handle, you know,
PostScript-based, what I call legacy

00:17:41.620 --> 00:17:43.440
file formats using PDF.

00:17:44.480 --> 00:17:46.620
And the same thing really
applies for Quickdraw,

00:17:46.620 --> 00:17:48.300
which also is deprecated.

00:17:48.470 --> 00:17:53.420
So if you want to bring in, you know,
Quickdraw data, picked files, et cetera,

00:17:53.540 --> 00:17:57.240
you know, to screen or out to print,
you can do that as well,

00:17:57.470 --> 00:17:59.070
both from Cocoa or Carbon.

00:17:59.080 --> 00:18:00.310
Okay.

00:18:01.180 --> 00:18:05.370
So that's the whistle-stop tour of
everything we've done with PDF in the OS.

00:18:05.750 --> 00:18:08.480
Just a quick summary,
and then I'm going to hand over.

00:18:08.570 --> 00:18:12.860
So if you're in any doubt,
think about the PDF functionality

00:18:12.860 --> 00:18:15.710
you need to put into your
application or software product.

00:18:15.870 --> 00:18:19.280
If you need the fine-grained control,
Quartz 2D is your answer.

00:18:19.390 --> 00:18:22.420
All the APIs are well-designed,
documented, et cetera.

00:18:22.430 --> 00:18:24.790
Lots of good sample code.

00:18:25.170 --> 00:18:29.570
But if you want to use PDF and you're
running Tiger or Later and you're Cocoa,

00:18:29.570 --> 00:18:32.120
then pay attention to the
next part of this session,

00:18:32.540 --> 00:18:35.060
because PDF Kit is just great.

00:18:35.170 --> 00:18:38.560
Gives you almost all the
PDF functionality you're likely to want.

00:18:38.560 --> 00:18:41.600
And for the last part of this session,
we're going to get into

00:18:41.600 --> 00:18:42.680
PDF in the workflow.

00:18:42.680 --> 00:18:47.560
There's a lot of things you can leverage
that's sitting on top of Quartz 2D

00:18:47.560 --> 00:18:50.620
that will make your life a lot easier.

00:18:50.620 --> 00:18:53.890
So with that,
I'm going to hand over to John Calhoun.

00:18:54.700 --> 00:18:56.600
Let's talk about PDF Kit.

00:18:56.600 --> 00:18:57.710
Take it away, John.

00:18:57.880 --> 00:19:00.550
Thanks.

00:19:00.550 --> 00:19:00.550
Hi.

00:19:04.370 --> 00:19:08.960
Okay,
so PDF Kit is a new framework in Tiger.

00:19:08.960 --> 00:19:12.790
There's actually a new framework
called Quartz Framework in

00:19:12.860 --> 00:19:16.240
System Library Frameworks,
and that's kind of an umbrella framework.

00:19:16.260 --> 00:19:18.780
PDF Kit's one of the
frameworks inside Quartz.

00:19:18.830 --> 00:19:23.620
And I mention that because if you want
to write a Cocoa application today,

00:19:23.620 --> 00:19:28.020
you're going to have to manually add
the Quartz Framework to your application

00:19:28.020 --> 00:19:29.940
to get the PDF Kit framework support.

00:19:29.940 --> 00:19:34.320
And also while I mention it,
if you're using Interface Builder,

00:19:34.330 --> 00:19:37.740
one of the things you might want
to use from PDF Kit is PDF View,

00:19:37.740 --> 00:19:45.130
and that's inside a PDF Kit palette,
which is under Developer Extras Palette.

00:19:45.220 --> 00:19:47.820
So you'll have to add
that to Interface Builder,

00:19:47.820 --> 00:19:50.450
and then that'll give you
the PDF View that you can

00:19:50.450 --> 00:19:52.050
add to your application.

00:19:53.500 --> 00:24:26.800
[Transcript missing]

00:24:30.660 --> 00:24:33.970
Okay, so here's the first sort of
little architectural slide.

00:24:33.970 --> 00:24:41.300
PDF Kit is essentially a suite of
these PDF class-- NS object or App Kit,

00:24:41.300 --> 00:24:43.430
Cocoa classes.

00:24:43.440 --> 00:24:45.840
You can see that the one in yellow,
the PDF view,

00:24:45.840 --> 00:24:47.960
is going to be the more complicated one.

00:24:48.030 --> 00:24:50.570
It's subclassed off NS view,
so all the sort of things

00:24:50.630 --> 00:24:56.440
that NS view has and inherits,
like a view, hit testing, events,

00:24:56.440 --> 00:24:59.030
a draw method, PDF view has as well.

00:24:59.170 --> 00:25:03.530
And most of the talk that I give
will sort of focus around PDF view,

00:25:03.540 --> 00:25:06.090
but I don't want you to
think that you have to have a

00:25:06.170 --> 00:25:08.600
view-based app to use PDF Kit.

00:25:08.990 --> 00:25:12.120
The other classes that you
see in blue are-- I call

00:25:12.120 --> 00:25:15.940
them kind of utility classes,
PDF border, destination.

00:25:16.010 --> 00:25:19.840
They don't require a view,
and you could just use these if you

00:25:19.840 --> 00:25:24.390
wanted to search for text in a PDF or get
the position of each character on a page,

00:25:24.480 --> 00:25:25.760
that sort of thing.

00:25:25.820 --> 00:25:28.660
I'll talk more about these classes later.

00:25:28.740 --> 00:25:29.890
And then I'll talk about the
other classes that are more

00:25:29.890 --> 00:25:30.660
complicated as they come up.

00:25:30.660 --> 00:25:32.650
The only thing I wanted to point out,
though,

00:25:32.770 --> 00:25:36.090
was the other sort of utility classes
are all just subclasses of NS object,

00:25:36.100 --> 00:25:38.460
so they're more-- they're simpler,
I guess.

00:25:38.460 --> 00:25:44.060
And then the one class at the bottom,
PDF annotation, is a virtual class.

00:25:44.060 --> 00:25:49.710
So all the real work, for the most part,
it happens with those subclasses.

00:25:49.720 --> 00:25:53.600
So a PDF annotation could be a
circle or free text or a link,

00:25:53.770 --> 00:25:58.220
and so that's where some of that
functionality is going to come in.

00:25:59.280 --> 00:26:02.090
So I already explained this,
that there's the high level view

00:26:02.100 --> 00:26:05.450
and then the utility classes.

00:26:05.450 --> 00:26:10.590
So let me just show you
then a little app I wrote.

00:26:10.750 --> 00:26:13.310
and back on demo machine one.

00:26:13.360 --> 00:26:17.480
I guess I didn't get that turned off.

00:26:19.200 --> 00:26:25.400
[Transcript missing]

00:26:25.910 --> 00:26:27.400
Let's see if it turns off this time.

00:26:27.400 --> 00:26:30.500
It's supposed to be command+F5.

00:26:30.500 --> 00:26:34.670
So this is PDF Linker,
and this is available-- all the

00:26:34.670 --> 00:26:37.200
sources for this are available.

00:26:37.230 --> 00:26:39.400
You'll see the URL at the end.

00:26:39.400 --> 00:26:43.300
It's available from DTS,
should be up on the website now.

00:26:43.300 --> 00:26:48.140
But I'm just gonna first
thing just open up a PDF,

00:26:48.140 --> 00:26:51.740
and you'll notice that we
borrowed a lot from Preview here.

00:26:51.740 --> 00:26:53.550
There's a toolbar at the top.

00:26:53.560 --> 00:26:56.890
There's--at the bottom,
I don't know how well you can read that,

00:26:56.900 --> 00:26:58.890
especially in the back,
but there's some UI.

00:26:58.900 --> 00:27:01.600
There's some radio buttons
that are grayed out.

00:27:01.860 --> 00:27:04.610
A drawer has opened on the right side.

00:27:04.740 --> 00:27:07.700
But the main part of the
window is the PDF view,

00:27:07.700 --> 00:27:10.370
so you see the PDF content here.

00:27:10.870 --> 00:27:17.260
So I'll switch back to
the slides and show you.

00:27:18.100 --> 00:27:20.530
How you first get the
document to come up.

00:27:20.530 --> 00:27:24.380
And this is only, this is like I said,
this is the two or three lines of code

00:27:24.380 --> 00:27:28.720
that Safari really had to do in order
to get a PDF to display in the PDF view.

00:27:28.720 --> 00:27:32.120
This is where the first
utility class comes in.

00:27:32.120 --> 00:27:35.870
A PDF view needs to have a
PDF document associated with it.

00:27:36.030 --> 00:27:41.150
So what the code does in PDF Linker is
it allocates a PDF document and then

00:27:41.160 --> 00:27:44.220
there's a method called init with URL.

00:27:44.720 --> 00:27:48.690
So usually your application
has a URL like if you're

00:27:48.790 --> 00:27:52.120
in a document-based app,
you can ask the document for its file

00:27:52.130 --> 00:27:53.600
name and that will give you a path.

00:27:53.630 --> 00:27:56.160
Or if the user has just
brought up an open panel,

00:27:56.240 --> 00:27:57.660
you can ask for the URL.

00:27:57.690 --> 00:28:03.040
But there's another method in PDF Kit for
creating a document from data itself.

00:28:03.080 --> 00:28:05.380
So once you have this
PDF document object,

00:28:05.380 --> 00:28:07.820
you tell the PDF view set document.

00:28:07.820 --> 00:28:09.780
And then once you do that,
the view is going to retain

00:28:09.780 --> 00:28:13.740
the document so the last line
of code just releases it.

00:28:14.520 --> 00:28:19.960
So that's all there is to associate
in a document with a view.

00:28:20.160 --> 00:28:24.500
So I'll show you just a few of the
attributes then of the PDF document.

00:28:24.560 --> 00:28:26.950
You can ask the document
for the number of pages.

00:28:27.230 --> 00:28:30.400
Oh, I should point out,
once you call set document

00:28:30.400 --> 00:28:33.090
on the view and release it,
you can always ask the

00:28:33.090 --> 00:28:34.750
view for its document back.

00:28:34.860 --> 00:28:39.920
So the reason you might want to do
this is for some of these attributes.

00:28:40.030 --> 00:28:42.280
You may want to query the
document and find out how many

00:28:42.280 --> 00:28:44.230
pages are in the document.

00:28:44.340 --> 00:28:47.890
The way that you get back the
pages is to ask the document for

00:28:47.890 --> 00:28:49.580
one of these PDF page objects.

00:28:49.600 --> 00:28:52.520
And I'll talk more about that later.

00:28:52.700 --> 00:28:56.480
Certain document information,
like the author of the document,

00:28:56.480 --> 00:29:01.450
the title, subject, keywords,
those sorts of things you'll get

00:29:01.530 --> 00:29:03.400
from the PDF document object.

00:29:03.700 --> 00:29:06.730
Searching actually happens
within the document itself.

00:29:06.850 --> 00:29:10.910
That allows the document to
kind of search across pages.

00:29:10.930 --> 00:29:14.530
If the PDF document has an
outline associated with it,

00:29:14.600 --> 00:29:17.200
it's from the PDF document that
you'll ask for that outline.

00:29:17.220 --> 00:29:19.260
And I'll show you that in a minute.

00:29:19.300 --> 00:29:23.060
And then finally,
if you want to save the document,

00:29:23.100 --> 00:29:28.630
save the PDF, the PDF document class has
the save methods in it.

00:29:28.640 --> 00:29:30.840
Okay, so back to the demo.

00:29:30.920 --> 00:29:33.540
So how about navigation?

00:29:33.690 --> 00:29:36.780
So within the PDF view,
I've got a toolbar at the top

00:29:37.020 --> 00:29:39.100
and you see the next button.

00:29:39.100 --> 00:29:41.360
There's a previous
button that's disabled.

00:29:41.650 --> 00:29:45.720
If I click on the next button,
it obviously tells the PDF view go

00:29:45.720 --> 00:29:49.940
to the next page and you see now
that the previous button is enabled.

00:29:50.070 --> 00:29:54.960
I can click next, next, previous,
previous.

00:29:54.960 --> 00:29:57.200
Let me turn something off here.

00:29:57.200 --> 00:29:57.200
And

00:29:57.650 --> 00:30:02.100
And you also see that within the PDF,
when there are links,

00:30:02.100 --> 00:30:05.860
like if I click on this link here,
it takes me to page 24.

00:30:05.860 --> 00:30:07.300
That happens for free.

00:30:07.300 --> 00:30:08.840
The PDF view is handling that.

00:30:08.910 --> 00:30:12.960
But the PDF view is also
maintaining a history.

00:30:12.960 --> 00:30:16.080
So as the user navigates
and goes to the next page,

00:30:16.110 --> 00:30:20.080
previous page, or traverses links,
the PDF view is maintaining a history

00:30:20.080 --> 00:30:27.080
so that I'm able to very trivially put a
back and forward button in the toolbar.

00:30:27.530 --> 00:30:30.360
And have the PDF view
navigate through the history.

00:30:30.390 --> 00:30:34.550
Also, another way to navigate is to
type in an explicit page number,

00:30:34.660 --> 00:30:39.340
like I typed in page 20,
and then the PDF view will go to page 20.

00:30:39.340 --> 00:30:41.680
Something I'll just show
you is you may not have,

00:30:41.680 --> 00:30:45.700
or you may have noticed that as I've been
kind of moving through this document,

00:30:45.700 --> 00:30:48.000
this page number field
here has been updating.

00:30:48.000 --> 00:30:51.520
So what I'll do is show you
in code how that's done,

00:30:51.620 --> 00:30:54.940
and show you frankly
how easy that is to do.

00:30:54.940 --> 00:30:56.940
Back to the slides.

00:30:59.320 --> 00:31:04.000
So, in order to go to the next page,
you just tell PDFU go to next page.

00:31:04.000 --> 00:31:05.080
Go to previous page.

00:31:05.120 --> 00:31:07.500
I told you that the PDFU is
maintaining a history,

00:31:07.500 --> 00:31:09.600
so you can just say go back, go forward.

00:31:09.600 --> 00:31:13.690
And then there are sort of helper
methods like can go back and can

00:31:13.690 --> 00:31:17.600
go forward that return boolings
so that you're able to enable or

00:31:17.600 --> 00:31:19.800
disable UI elements in your app.

00:31:19.870 --> 00:31:23.850
Then the last method of navigating
where I typed in a page number,

00:31:23.850 --> 00:31:26.670
there's a method on the
PDFU called go to page,

00:31:26.670 --> 00:31:28.610
and it takes a page object.

00:31:29.020 --> 00:31:32.430
And remember I said that you get back
page objects from a PDF document.

00:31:32.440 --> 00:31:38.140
So, you would ask the PDF document for
the page that corresponds to an index.

00:31:38.240 --> 00:31:43.790
And since we're zero-based internally,
if the user typed in page 20,

00:31:43.810 --> 00:31:49.120
you'd ask for the index for the
page corresponding to index 19.

00:31:49.120 --> 00:31:51.650
So, I subtract one,
I ask the document to give

00:31:51.740 --> 00:31:54.230
me back that page object,
and then the view has

00:31:54.230 --> 00:31:55.510
a method go to page.

00:31:55.520 --> 00:31:58.600
I pass it that page object,
and the right thing just happens.

00:31:58.850 --> 00:32:03.830
The view updates, goes to page 20,
and that's added to the history.

00:32:04.060 --> 00:32:08.540
And then as far as how your
application can show what

00:32:08.560 --> 00:32:12.440
current page the user is on,
there's a notification in the PDF view.

00:32:12.440 --> 00:32:16.700
So every time the view changes page,
either as a result of you calling,

00:32:16.700 --> 00:32:19.830
go to next page, go back, go forward,
or the user actually clicking on

00:32:19.920 --> 00:32:23.860
a link internally within the view,
a page change notification comes up.

00:32:24.020 --> 00:32:26.420
There's other notifications
at the document level.

00:32:26.420 --> 00:32:28.890
PDF view has other notifications as well.

00:32:28.900 --> 00:32:33.600
So I'm just kind of going over the
surface of it in my little session.

00:32:33.700 --> 00:32:37.560
You can always check the
documentation and find out a lot

00:32:37.560 --> 00:32:39.090
more than I'm going over here.

00:32:39.100 --> 00:32:44.570
So back to the demo app.

00:32:44.930 --> 00:32:49.010
So I'm going to be brief here because
Preview does a much better job of this,

00:32:49.050 --> 00:32:51.220
but there are a number
of display options,

00:32:51.220 --> 00:32:53.670
and I already showed you a
number of those in Safari,

00:32:53.680 --> 00:32:55.630
that you always have
this contextual menu.

00:32:55.640 --> 00:32:59.040
And one of the things I added
to this PDF Linker app is I put

00:32:59.150 --> 00:33:02.990
in a little toolbar item that
allows a user to select between,

00:33:03.020 --> 00:33:05.950
I just picked three
various display modes.

00:33:06.120 --> 00:33:08.980
So here we're in, you know,
sort of the single page

00:33:09.520 --> 00:33:12.710
continuous mode where I can
scroll through the entire PDF,

00:33:12.860 --> 00:33:15.840
or I can switch on,
by clicking this toolbar item,

00:33:15.840 --> 00:33:20.550
I can switch to the one single page
mode here without the scroll bar,

00:33:20.550 --> 00:33:22.610
and the user has to navigate this way.

00:33:22.730 --> 00:33:27.530
Or the two up,
facing pages mode like that.

00:33:27.580 --> 00:33:33.240
And if you look at,
I'll switch back to my slides.

00:33:33.540 --> 00:33:37.780
In order to control that,
to control how the view displays the PDF,

00:33:37.780 --> 00:33:42.530
there's just a real simple call,
PDF view set display mode,

00:33:42.530 --> 00:33:44.640
and we have a number
of defines for one up,

00:33:44.640 --> 00:33:47.960
one up continuous, facing pages,
facing pages continuous.

00:33:47.960 --> 00:33:52.690
So it's real trivial for me in the
toolbar item to just call one of those,

00:33:52.770 --> 00:33:56.140
set one of those display
modes in the PDF view.

00:33:56.360 --> 00:33:58.990
But like I said, I'm not going to go over
all the other display modes.

00:33:58.990 --> 00:34:01.550
You can play with preview to get
kind of a sense of what some of them

00:34:01.550 --> 00:34:03.420
are or look at the documentation.

00:34:03.420 --> 00:34:07.600
But you can specify what box
to use for the PDF to display,

00:34:07.600 --> 00:34:11.000
whether to use its crop
box or its media box.

00:34:11.080 --> 00:34:12.810
You can turn on and off page breaks.

00:34:12.840 --> 00:34:16.630
You saw that you can change the
scale that the PDF is displayed at.

00:34:16.920 --> 00:34:20.920
For more esoteric things,
you can set the text greeking threshold,

00:34:20.920 --> 00:34:24.380
turn on and off anti-aliasing,
that sort of thing.

00:34:26.020 --> 00:34:29.940
So back to the demo again.

00:34:29.940 --> 00:34:31.720
Outlines.

00:34:32.440 --> 00:34:35.490
So this document I happened
to open up has an outline.

00:34:35.650 --> 00:34:38.140
Not all PDF documents have them,
but you know it has an outline

00:34:38.140 --> 00:34:43.360
because the PDF Linker application
checked that there was one and

00:34:43.360 --> 00:34:45.140
opened up the drawer automatically.

00:34:45.140 --> 00:34:49.300
And inside the drawer here,
you see that there are four items.

00:34:49.300 --> 00:34:53.620
There's contents, three other items,
and one of them, the third one here,

00:34:53.800 --> 00:34:57.000
Quartz 2D Reference,
has a disclosure triangle.

00:34:57.000 --> 00:35:01.540
If I twist that down,
I see that that item has four sub-items.

00:35:01.560 --> 00:35:04.600
And then some of those have sub-items,
etc.

00:35:04.600 --> 00:35:11.720
And clicking on any of these items,
the PDF view is updating.

00:35:12.130 --> 00:35:15.310
The view itself that's in the
drawer is just an NS outline view,

00:35:15.390 --> 00:35:18.630
so there's nothing PDF Kit specific here.

00:35:18.820 --> 00:35:22.000
But I'll show you then how
that's all accomplished.

00:35:22.000 --> 00:35:24.760
And this does take a
little bit more code.

00:35:24.760 --> 00:35:26.900
So back to the slides.

00:35:28.030 --> 00:35:34.920
So the PDF outline is one of
these new utility classes.

00:35:34.920 --> 00:35:36.970
And like I said,
not all documents have it,

00:35:36.970 --> 00:35:40.510
but if the PDF document has an outline,
you just ask the PDF document,

00:35:40.590 --> 00:35:44.140
"Give me the outline root."
And if it returns an object,

00:35:44.250 --> 00:35:46.400
then your PDF has an outline.

00:35:46.610 --> 00:35:50.680
And that root object is
a PDF outline object.

00:35:50.900 --> 00:35:55.310
So I'll show you then
the next utility class,

00:35:55.520 --> 00:35:56.250
PDF Outline.

00:35:58.080 --> 00:35:59.740
Here are some of the attributes.

00:35:59.740 --> 00:36:03.390
The outline item can have children,
and as you saw,

00:36:03.470 --> 00:36:07.990
the root item is the one-- we actually
never display the PDF outline root,

00:36:08.220 --> 00:36:12.130
but that root for that PDF that
I showed you had four children.

00:36:12.240 --> 00:36:14.500
So when I ask that outline root
for the number of children,

00:36:14.500 --> 00:36:15.840
it returns four.

00:36:15.840 --> 00:36:20.430
Then for--I can index over each of
those and ask and get the array of--

00:36:20.560 --> 00:36:24.030
I can get back the PDF outline children,
and then each of those children,

00:36:24.090 --> 00:36:26.120
as you saw, could have children as well.

00:36:26.290 --> 00:36:30.400
So an NS outline view just kind of
allows you to kind of traverse that tree,

00:36:30.400 --> 00:36:33.580
and it'll automatically take care
of the disclosure triangles for you.

00:36:33.640 --> 00:36:35.520
So that, like I say,
is not part of PDFKit.

00:36:35.640 --> 00:36:39.880
What PDFKit gives you are
the PDF outline objects to,

00:36:39.880 --> 00:36:43.000
you know, populate that outline view.

00:36:43.000 --> 00:36:45.640
An outline object that has
a label associated with it,

00:36:45.640 --> 00:36:48.020
that's what's displayed
in the outline view.

00:36:48.070 --> 00:36:53.210
So contents, for example,
was the label for the first child.

00:36:53.790 --> 00:36:57.240
And a PDF outline object has a decimal,
and it has a destination

00:36:57.460 --> 00:36:58.540
associated with it.

00:36:58.540 --> 00:37:01.030
So when the user actually clicks
in the outline view and picks

00:37:01.030 --> 00:37:04.040
one of these destinations,
there's a method--and again,

00:37:04.040 --> 00:37:07.030
I didn't show you every method--
but there's a PDF view method

00:37:07.040 --> 00:37:10.490
called goToDestination where
you pass it this destination,

00:37:10.620 --> 00:37:13.370
and the view just goes to
that destination and again

00:37:13.370 --> 00:37:17.290
maintains it in its history,
its navigation history.

00:37:18.100 --> 00:37:20.700
There we go.

00:37:20.890 --> 00:37:21.600
Okay, searching.

00:37:21.600 --> 00:37:24.530
So as kind of we go on here,
back to the demo machine,

00:37:24.530 --> 00:37:27.320
kind of as we go in,
what's happening is the amount

00:37:27.350 --> 00:37:30.860
of code that would be required
to write is increasing.

00:37:30.860 --> 00:37:32.630
We started out with
one line of code here,

00:37:32.630 --> 00:37:33.760
one line of code there.

00:37:33.760 --> 00:37:35.420
Searching is a little more complicated.

00:37:35.420 --> 00:37:38.800
So what I can do is, for example,
Safari actually,

00:37:38.870 --> 00:37:42.870
they did have to write quite a
bit of code to get this working,

00:37:42.870 --> 00:37:45.180
or I shouldn't say quite a bit.

00:37:45.190 --> 00:37:47.800
They had to write more than two or
three lines of code to get this working.

00:37:48.000 --> 00:37:50.810
But let's say I bring up a find panel.

00:37:50.820 --> 00:37:52.970
Now I had to provide my,
my application had to

00:37:53.100 --> 00:37:54.260
provide that find panel.

00:37:54.260 --> 00:37:57.990
And the user types in a word,
like Quartz, say.

00:37:57.990 --> 00:38:00.310
And I've got a checkbox
here I can turn on and off,

00:38:00.310 --> 00:38:02.040
whether or not to ignore case.

00:38:02.040 --> 00:38:08.710
When I click on the next button,
the view that you provide has, tells the,

00:38:08.710 --> 00:38:12.240
tells the PDF view to find this word.

00:38:12.240 --> 00:38:15.390
And I can click next, next, next, next.

00:38:15.400 --> 00:38:17.980
And you see that the
PDF view finds the next in.

00:38:18.000 --> 00:38:21.600
So I can click on the next instance,
next instance, previous, previous.

00:38:21.680 --> 00:38:25.100
So this is kind of the
standard find method,

00:38:25.100 --> 00:38:25.430
I guess.

00:38:25.440 --> 00:38:31.000
This, I call it the Safari style because
they implemented it with PDF kit.

00:38:31.040 --> 00:38:32.560
But there's another way to do a search.

00:38:32.560 --> 00:38:35.300
And this is more like, I guess,
the preview style or,

00:38:35.590 --> 00:38:37.080
or maybe the Google style.

00:38:37.110 --> 00:38:41.190
That I type in a search term.

00:38:41.640 --> 00:38:45.400
And now it goes out,
and you see that the window,

00:38:45.400 --> 00:38:48.300
I've kind of -- it's
turned into a split view.

00:38:48.490 --> 00:38:53.160
And the top half of the split view is
dropped down to show an NS table view.

00:38:53.240 --> 00:38:55.640
And in this table view,
you see all the instances

00:38:55.640 --> 00:38:58.330
of the word "quartz" that
were found in this document.

00:38:58.340 --> 00:39:00.360
I've got the page number over here.

00:39:00.360 --> 00:39:03.330
I've got the section
that it corresponds to,

00:39:03.450 --> 00:39:05.550
and that would be the outline
item over in the drawer.

00:39:05.920 --> 00:39:10.110
And then I have a little bit of,
I want to call it sample text,

00:39:10.340 --> 00:39:13.180
that surrounds where that
instance of the word was found

00:39:13.790 --> 00:39:16.960
in the third column of the table.

00:39:17.220 --> 00:39:20.660
So go back to the slides.

00:39:20.700 --> 00:43:57.900
[Transcript missing]

00:43:58.500 --> 00:44:00.140
I'm having problems with this clicker.

00:44:00.140 --> 00:44:02.260
OK, so now it gets more complicated.

00:44:02.260 --> 00:44:04.000
Back to the--

00:44:04.420 --> 00:44:05.840
demo machine here.

00:44:05.910 --> 00:44:09.630
So this is probably,
you saw that even the searching was

00:44:09.630 --> 00:44:12.160
maybe a handful of lines of code to do.

00:44:12.160 --> 00:44:14.260
This is a little more complicated.

00:44:14.320 --> 00:44:18.000
For this application, PDF linker,
I wanted to show you how you

00:44:18.000 --> 00:44:21.120
could do something sort of
beyond just viewing a PDF.

00:44:21.220 --> 00:44:24.540
So I've got this item up in
the toolbar you may have seen

00:44:24.540 --> 00:44:26.840
called test links and edit links.

00:44:26.840 --> 00:44:30.500
Now, if I switch to edit links,
you'll see that, okay, here we are.

00:44:30.500 --> 00:44:33.180
I don't know how well
this shows in the back.

00:44:33.180 --> 00:44:37.360
All these link selections,
and I'll just toggle it on and off,

00:44:37.500 --> 00:44:40.800
all these link selections,
when I'm in edit mode,

00:44:40.810 --> 00:44:45.990
I can draw a little gray border
around these annotations.

00:44:46.180 --> 00:44:50.330
And the way I did this was
by subclassing the PDF view.

00:44:50.330 --> 00:44:53.370
And I'll show you how
that's done in code.

00:44:53.610 --> 00:44:55.570
Back to the slides.

00:44:56.990 --> 00:45:00.430
So I subclassed the PDF view
and there's a method on the

00:45:00.430 --> 00:45:02.000
PDF view called draw page.

00:45:02.550 --> 00:45:05.210
Now you don't usually call draw
page or you shouldn't call draw

00:45:05.210 --> 00:45:07.670
page from your application,
but it's called internally so

00:45:07.700 --> 00:45:11.260
that every time a new page is
displayed and needs to be drawn,

00:45:11.260 --> 00:45:14.580
this method inside PDF view
gets called per page.

00:45:14.580 --> 00:45:18.450
So if you subclass a PDF view,
you can override this draw page

00:45:18.600 --> 00:45:20.710
method and do your own drawing.

00:45:20.710 --> 00:45:25.350
It's, if you're lazy like I was in this
app and you want the PDF view

00:45:25.350 --> 00:45:26.880
to handle most of the PDF view,
you can do that.

00:45:26.900 --> 00:45:29.450
You can do that by just calling super.

00:45:29.450 --> 00:45:32.380
So I call super,
PDF view draws the PDF page,

00:45:32.380 --> 00:45:35.390
any current selection,
that sort of thing.

00:45:35.450 --> 00:45:40.050
But then I can now come in after it's
finished and I can do post drawing.

00:45:40.150 --> 00:45:42.900
In this case,
I want to draw gray rectangles

00:45:42.900 --> 00:45:45.240
around all the link annotations.

00:45:45.240 --> 00:45:47.130
So how do I do that?

00:45:48.710 --> 00:45:52.850
Well, I should take a break and point out
some of the attributes of a PDF page.

00:45:52.900 --> 00:45:54.940
I've talked about it a few times already.

00:45:55.080 --> 00:45:58.440
So a PDF page is what's passed
into this draw page method.

00:45:58.710 --> 00:46:02.390
Some of the attributes you can get at
the PDF page level are you can find

00:46:02.390 --> 00:46:05.460
out the document that owns the page,
you can find out the bounds of the

00:46:05.460 --> 00:46:09.350
page-- and this is going to depend
on whether you want to know--

00:46:09.430 --> 00:46:12.520
you can ask for the media box,
the crop box, that sort of thing.

00:46:12.630 --> 00:46:16.950
You can also find out if the page
is rotated and what its rotation is.

00:46:16.980 --> 00:46:19.530
And you can also get back,
if the page has annotations,

00:46:19.780 --> 00:46:22.670
you can get back an array
of these annotations.

00:46:22.680 --> 00:46:25.720
And I'll be calling this method,
of course.

00:46:25.720 --> 00:46:27.570
You can also get back
the text for the page.

00:46:27.850 --> 00:46:30.260
And the page has a draw method,
and that's what the PDF view is

00:46:30.260 --> 00:46:35.260
actually calling in order to display
the page in its own draw page method.

00:46:35.370 --> 00:46:37.250
So I was interested in the annotations.

00:46:37.420 --> 00:46:40.320
So when draw page gets called,
I call super,

00:46:40.320 --> 00:46:42.540
let the view do the drawing,
but then I want to come in

00:46:42.620 --> 00:46:45.820
afterwards and see if there are
any annotations on the page.

00:46:45.930 --> 00:46:47.960
So the page was passed to my method.

00:46:47.960 --> 00:46:51.700
All I need to do is say,
ask that page for its annotations.

00:46:51.700 --> 00:46:56.700
And if it has any annotations,
it'll return me an array of these.

00:46:56.880 --> 00:47:00.930
So then I can, in my app,
walk through each of these PDF annotation

00:47:00.930 --> 00:47:03.920
objects and see if any of them are links.

00:47:04.090 --> 00:47:06.100
So what are some of the
attributes of a PDF annotation?

00:47:06.100 --> 00:47:09.790
PDF annotation has a
type associated with it.

00:47:09.870 --> 00:47:12.800
So since I'm only interested
in link annotations,

00:47:12.800 --> 00:47:17.870
I can ask for the annotation type
and see if it matches type link.

00:47:17.930 --> 00:47:22.360
But you can also find out for any
given arbitrary PDF annotation object,

00:47:22.450 --> 00:47:24.660
the page that it's associated with.

00:47:24.750 --> 00:47:28.300
You can find out its bounds in
that page's coordinate system.

00:47:28.900 --> 00:47:30.470
It has a draw method as well.

00:47:30.640 --> 00:47:33.580
So when a page is being
drawn by PDF view,

00:47:33.660 --> 00:47:37.080
the page also draws its
annotations associated with it.

00:47:37.280 --> 00:47:41.350
And then the various subtypes,
the subclasses of the PDF annotation

00:47:41.350 --> 00:47:43.240
have their own attributes.

00:47:43.300 --> 00:47:46.950
Like a PDF annotation link
obviously is going to have a

00:47:46.950 --> 00:47:49.500
destination associated with it.

00:47:50.050 --> 00:47:55.090
So what my code does then is walks
through each of those annotations that's

00:47:55.120 --> 00:48:00.400
in that array and calls type and finds
out if the type is equal to string link.

00:48:00.510 --> 00:48:03.850
So I'm only interested
in the link annotations.

00:48:04.500 --> 00:53:27.800
[Transcript missing]

00:53:28.590 --> 00:53:32.040
That's how, I guess, the point of that,
I guess,

00:53:32.040 --> 00:53:36.280
when I was doing the hit testing,
I needed to convert from the

00:53:36.280 --> 00:53:40.000
view space and determine if you
were actually over an annotation.

00:53:40.000 --> 00:53:42.390
So I had to convert that
into the pages space and then

00:53:42.390 --> 00:53:45.080
walk through the annotations,
ask for their bounds,

00:53:45.080 --> 00:53:47.730
and see if the point corresponded
to any of those bounds.

00:53:47.740 --> 00:53:52.550
So the next step in my demo is
after I created the link annotation

00:53:52.550 --> 00:53:58.080
is I needed to make it a proper
annotation by giving it a destination.

00:53:58.500 --> 00:54:02.390
So to create a PDF destination,
and this is another one

00:54:02.390 --> 00:54:05.750
of those utility classes,
I needed to use some of that,

00:54:05.750 --> 00:54:10.660
use some of the transformation methods in
the PDF view in order to figure out where

00:54:10.660 --> 00:54:12.230
the top left corner of the view was.

00:54:12.300 --> 00:54:15.950
So I can get the top left corner of
the view in view space just by asking

00:54:16.070 --> 00:54:20.450
for its frame and creating a point that
corresponds to the top left corner.

00:54:20.460 --> 00:54:25.740
But to figure out what page that's on,
I ask the view, page for point,

00:54:25.740 --> 00:54:28.340
I pass in the point,
and it'll return me a PDF page.

00:54:28.500 --> 00:54:30.960
So I can get the page
object that corresponds to,

00:54:30.960 --> 00:54:34.320
if you pass true for nearest,
it'll return the page that most

00:54:34.320 --> 00:54:36.480
closely is nearest to that point.

00:54:36.640 --> 00:54:41.200
So now I know what page corresponds,
or I know rather what the

00:54:41.200 --> 00:54:44.290
top left corner of the view,
I know what page the top left

00:54:44.380 --> 00:54:45.500
corner of the view corresponds to.

00:54:45.500 --> 00:54:49.510
But now I want it in page space,
so I call convert point

00:54:49.690 --> 00:54:53.050
to page on the PDF view,
I pass in that page and

00:54:53.080 --> 00:54:55.830
I pass in that point,
and now I get back in that

00:54:55.960 --> 00:54:58.490
page's coordinate system and
actually get back into the page.

00:54:58.540 --> 00:55:01.490
So I can get the actual
coordinate in page space.

00:55:01.500 --> 00:55:07.500
So the destination utility class has
a method called initWithPageAtPoint.

00:55:07.500 --> 00:55:09.340
So I know the page,
I've got the point now

00:55:09.340 --> 00:55:12.590
in page coordinates,
so I can create this destination object,

00:55:12.740 --> 00:55:17.500
and then the last line just
says to the PDF annotation link,

00:55:17.500 --> 00:55:21.500
and I mentioned that I have a notion kind
of of what the current selected link is.

00:55:21.500 --> 00:55:26.500
I call setDestination on that,
and I pass it that PDF destination.

00:55:27.180 --> 00:55:29.440
I guess we're done.

00:55:29.500 --> 00:55:33.520
So there's a lot more
documentation online.

00:55:33.800 --> 00:55:37.000
There's the sample code and there's
stuff in here that I didn't cover.

00:55:37.000 --> 00:55:38.480
You can play with preview.

00:55:38.480 --> 00:55:45.610
So and then I guess from about
noon on today I'll be in the lab.

00:55:45.610 --> 00:55:47.260
So thanks.

00:55:47.260 --> 00:55:48.680
I'll pass it to Rich.

00:55:54.130 --> 00:55:56.240
Thank you, John.

00:55:56.290 --> 00:55:59.690
John's PDF Kit is incredibly exciting and

00:55:59.760 --> 00:56:02.040
You really shouldn't lose sight of that.

00:56:02.090 --> 00:56:05.160
Every day I use Preview and people
give rave reviews to Preview

00:56:05.260 --> 00:56:06.390
for its speed and its power.

00:56:06.450 --> 00:56:10.360
And what PDF Kit lets you do is
take all of that capability and

00:56:10.430 --> 00:56:12.200
put it in your applications.

00:56:12.250 --> 00:56:13.600
And that's just amazing.

00:56:13.600 --> 00:56:16.690
It lets you make--and if you'll
excuse me for the baseball analogy

00:56:16.690 --> 00:56:19.270
that I always use or one of them
I always use--it lets you make a

00:56:19.280 --> 00:56:20.540
home run out of your application.

00:56:20.730 --> 00:56:24.820
It makes your applications into these
great PDF handling applications.

00:56:24.910 --> 00:56:28.450
And below PDF Kit you can use Quartz
or Cocoa to do the exact same thing.

00:56:28.500 --> 00:56:30.820
So there's all these frameworks
in the system to really help

00:56:30.900 --> 00:56:32.680
you make great applications.

00:56:32.760 --> 00:56:35.040
So of course that's not what
I'm going to talk about at all.

00:56:35.040 --> 00:56:38.190
So the ideas, my ideas,
you don't always need

00:56:38.190 --> 00:56:39.910
to write an application.

00:56:39.910 --> 00:56:45.130
You can handle PDF in ways that are
maybe more suited to your smaller tasks.

00:56:45.130 --> 00:56:48.410
Command line tools,
writing Automator plugins.

00:56:48.410 --> 00:56:50.770
And again going back to
the baseball analogy,

00:56:50.770 --> 00:56:54.500
these are the bunts and
the sacrifices of PDF.

00:56:54.500 --> 00:56:55.570
So we're not going to
do the PDF home runs.

00:56:55.580 --> 00:56:57.280
We're going to do little things,
little things.

00:56:57.280 --> 00:56:59.800
We're going to do little base hits.

00:56:59.800 --> 00:57:03.180
So to start with,
for a couple of releases now,

00:57:03.200 --> 00:57:06.000
Mac OS X has had
Python bindings for Quartz.

00:57:06.000 --> 00:57:09.020
So you can write
Python scripts to create PDF,

00:57:09.020 --> 00:57:10.540
which is very powerful.

00:57:11.220 --> 00:57:14.070
Starting with Tiger,
you can now write Automator actions

00:57:14.360 --> 00:57:18.890
built on these scripts or written in
Cocoa to analyze and also to create PDF.

00:57:19.240 --> 00:57:21.700
Print dialog supports PDF workflow,
so now you have a place once

00:57:21.700 --> 00:57:24.850
you've written these actions and
these tools to host them where

00:57:24.850 --> 00:57:27.060
the user can get at them easily.

00:57:27.060 --> 00:57:29.050
And then you have PDF workflow API,
so your applications,

00:57:29.060 --> 00:57:31.800
if you insist on writing these home runs,
can actually execute some

00:57:31.800 --> 00:57:33.100
of these smaller pieces.

00:57:33.100 --> 00:57:35.060
So that's what we're
going to look at here.

00:57:35.060 --> 00:57:38.180
Ways you can create PDF,
ways you can analyze PDF and do

00:57:38.270 --> 00:57:40.600
it simply and not really outside
of an application or to be

00:57:40.600 --> 00:57:42.060
pulled into an application later.

00:57:42.060 --> 00:57:46.100
So again,
the bindings have been there for a

00:57:46.100 --> 00:57:50.500
while so that you can use Python--use
Quartz directly from Python.

00:57:50.520 --> 00:57:51.770
They're pretty much direct mappings.

00:57:51.930 --> 00:57:54.660
If you want to learn Quartz,
one of the great ways to do it is to

00:57:54.660 --> 00:57:56.200
start to use the Python wrappings.

00:57:56.270 --> 00:57:58.750
You can do it interactively,
you can make direct calls,

00:57:58.900 --> 00:58:02.080
and the calls are pretty much the same,
so that's terrific.

00:58:02.080 --> 00:58:04.630
The Python bindings also wrap up
some higher level functionality,

00:58:04.630 --> 00:58:05.640
which is exciting.

00:58:05.700 --> 00:58:08.670
They let you render HTML into
a Quartz context directly.

00:58:08.670 --> 00:58:12.260
That's not something Quartz does,
it's one of the higher frameworks.

00:58:12.330 --> 00:58:13.160
Same with RTF.

00:58:13.170 --> 00:58:15.140
And you can also handle a
variety of image formats

00:58:15.140 --> 00:58:16.450
through these Python bindings.

00:58:16.450 --> 00:58:20.200
So there's a lot of power there
through the Python scripts.

00:58:20.200 --> 00:58:21.600
So what do you want to
use these scripts for?

00:58:21.600 --> 00:58:22.840
Experimenting is great.

00:58:22.860 --> 00:58:24.140
Writing tools are terrific.

00:58:24.140 --> 00:58:26.190
You can write great command
line tools to do it.

00:58:26.340 --> 00:58:27.660
And then Once you've
written these scripts,

00:58:27.710 --> 00:58:31.570
you can wrap them up inside of Automator
and make them generally useful to people.

00:58:33.610 --> 00:58:36.220
If you want to know where the
API is for the Python bindings,

00:58:36.270 --> 00:58:36.670
it's hidden.

00:58:36.810 --> 00:58:38.840
It's in developer examples, Quartz,
Python.

00:58:38.840 --> 00:58:40.060
I never remember where that is.

00:58:40.200 --> 00:58:44.140
And it's in a file called API summary,
all uppercase for some reason.

00:58:44.140 --> 00:58:45.200
But that's where you can find it.

00:58:45.240 --> 00:58:48.120
You can go in there and you can see
actually what the calls are in Python.

00:58:48.230 --> 00:58:50.530
And you can sit down,
open up a Python interactive session,

00:58:50.530 --> 00:58:52.010
and just start typing them.

00:58:53.690 --> 00:58:58.570
This is my sample that I always show
when I talk about Quartz bindings.

00:58:58.570 --> 00:59:01.140
And I like it because it's
small and it's very powerful.

00:59:01.270 --> 00:59:03.600
And it's a
PostScript interpreter in Python.

00:59:03.650 --> 00:59:05.900
The idea here in this
sample is two slides.

00:59:05.960 --> 00:59:08.590
This script's going to
take in a PostScript file.

00:59:08.700 --> 00:59:10.030
It's going to convert it to PDF.

00:59:10.220 --> 00:59:12.370
And from PDF,
it's then going to render each

00:59:12.480 --> 00:59:15.870
page of the PDF into a raster
bitmap and save that out as TIFF.

00:59:16.080 --> 00:59:19.510
So the first step-- that's what
this slide is-- is being able to

00:59:19.610 --> 00:59:21.460
take that PostScript and create PDF.

00:59:21.540 --> 00:59:26.030
And all you have to do is create
an image provider from the file

00:59:26.040 --> 00:59:28.280
that comes in on the command line.

00:59:28.460 --> 00:59:30.360
Create a consumer, someplace to write it.

00:59:30.360 --> 00:59:33.470
And for this PDF, we're actually going to
use this tiff file base,

00:59:33.540 --> 00:59:35.180
or tiff base name.

00:59:35.240 --> 00:59:37.900
And then you create a
converter and you call convert.

00:59:37.900 --> 00:59:39.960
You've just written something
that converts PostScript to

00:59:40.030 --> 00:59:41.940
PDF in a few lines of code.

00:59:41.980 --> 00:59:42.860
That's not what our goal is.

00:59:42.860 --> 00:59:45.820
Our goal is to go to the next
step and actually go to raster.

00:59:45.830 --> 00:59:48.680
And so what you end up with is the
kind of loop that most of your scripts

00:59:48.730 --> 00:59:52.140
will have if you're writing using
these Python bindings on top of Quartz,

00:59:52.140 --> 00:59:56.320
which is a loop that counts over the
number of pages in the PDF document.

00:59:56.330 --> 00:59:58.350
And in this particular case,
for each page,

00:59:58.430 --> 01:00:02.940
we create a raster context,
an RGB raster context in this case.

01:00:02.960 --> 01:00:05.000
We render into it.

01:00:05.300 --> 01:00:07.540
Once it's rendered, we then say, okay,
now I want you to write

01:00:07.540 --> 01:00:08.350
out those bits as TIFF.

01:00:08.420 --> 01:00:12.580
And now you get one TIFF file for every
page that was in the original postscript.

01:00:12.640 --> 01:00:14.920
It's very short,
and this is the kind of powerful things

01:00:14.920 --> 01:00:16.700
you can write with these Python bindings.

01:00:18.790 --> 01:00:19.870
But it gets more exciting than that.

01:00:19.980 --> 01:00:22.180
Because of these Python bindings,
you can actually go look out

01:00:22.180 --> 01:00:24.340
there and find libraries,
Python libraries,

01:00:24.340 --> 01:00:25.250
other people have written.

01:00:25.320 --> 01:00:28.970
And you can then integrate them
into Mac OS X and in with Quartz.

01:00:29.060 --> 01:00:31.200
I usually go to Vaults or Parnassus.

01:00:31.200 --> 01:00:33.330
This is a great place for finding
Python libraries and applications

01:00:33.410 --> 01:00:34.320
that have been written.

01:00:34.320 --> 01:00:36.520
And I browse around and
I find something interesting.

01:00:36.520 --> 01:00:39.280
And I ask myself, well,
how can I integrate that now in

01:00:39.300 --> 01:00:40.960
with Quartz and with Mac OS X?

01:00:40.960 --> 01:00:43.360
And there are a bunch of different
things that are interesting.

01:00:43.700 --> 01:00:46.120
One is website creation,
content creation,

01:00:46.120 --> 01:00:49.440
with something like Zope or Plone,
which are Python servers.

01:00:49.440 --> 01:00:52.730
And maybe you want to use Quartz
to create a PDF document that

01:00:52.730 --> 01:00:55.840
you then stream down to the user,
which, oh, by the way,

01:00:55.840 --> 01:00:58.110
Safari will handle in line,
thanks to PDF Kit.

01:00:58.280 --> 01:01:01.380
Or maybe you find a
useful graphics library.

01:01:01.380 --> 01:01:04.140
And the example I'm going
to use today is PyChart,

01:01:04.190 --> 01:01:06.200
which is a GPL charting program.

01:01:06.200 --> 01:01:07.060
It's written in Python.

01:01:07.060 --> 01:01:09.880
And what it knows how to do
is take data or take some

01:01:10.010 --> 01:01:13.510
Python code and generate charts,
and PyCharts and scatter charts.

01:01:13.660 --> 01:01:15.050
And all the fancy scientific charts.

01:01:15.160 --> 01:01:20.160
And what it can do is write these into
a PDF file or even a PostScript file.

01:01:20.290 --> 01:01:22.000
But that's not exactly what I wanted.

01:01:22.000 --> 01:01:24.240
I wanted it to take this
library and for it to be able

01:01:24.240 --> 01:01:27.860
to render into a Quartz context,
so I could mix into that same Quartz

01:01:28.060 --> 01:01:30.380
context other rendering done with Quartz.

01:01:30.390 --> 01:01:33.180
So I can generate a page that
has not only a chart on it,

01:01:33.180 --> 01:01:36.520
but maybe some HTML,
in the case we're going to show,

01:01:36.610 --> 01:01:38.050
or maybe some RTF.

01:01:39.180 --> 01:01:41.570
So PyChart's great because
it renders vector drawings.

01:01:41.680 --> 01:01:43.210
Well, that's what we want with Python.

01:01:43.380 --> 01:01:45.400
I didn't want to be generating
GIF charts or any of that.

01:01:45.400 --> 01:01:49.970
I wanted something that was
high quality vector art.

01:01:50.420 --> 01:01:52.180
So we're going to extend PyChart.

01:01:52.230 --> 01:01:52.840
We're going to extend it.

01:01:52.840 --> 01:01:55.050
They have a concept of a canvas,
and they have different

01:01:55.050 --> 01:01:56.460
canvases inside of PyChart.

01:01:56.490 --> 01:01:59.490
And one of them is a PDF canvas,
one's a PostScript canvas.

01:01:59.500 --> 01:02:02.650
And the interesting thing about that
is both PDF and PostScript share

01:02:02.750 --> 01:02:04.630
the same imaging model,
which, oh, by the way,

01:02:04.630 --> 01:02:05.630
is shared by Quartz.

01:02:05.750 --> 01:02:07.650
So conceptually,
this is going to be very trivial

01:02:07.650 --> 01:02:08.960
to move over on top of Quartz.

01:02:10.200 --> 01:02:13.920
First thing we had to do was
create this Quartz canvas.

01:02:13.940 --> 01:02:16.760
And again, PyChart's all built
around writing to a file.

01:02:16.760 --> 01:02:18.020
We needed to change that.

01:02:18.170 --> 01:02:21.500
So we take the normal init that's
part of the canvas inside of PyChart,

01:02:21.500 --> 01:02:23.700
and we say, OK, hey,
we might actually pass you,

01:02:23.700 --> 01:02:27.140
instead of a file name, a CG context,
a Quartz context.

01:02:27.200 --> 01:02:28.240
And we're going to render into that.

01:02:28.480 --> 01:02:31.260
And all this code does is
remember that Quartz context.

01:02:31.260 --> 01:02:34.330
Then we go implement all the
methods inside of PyChart's canvas.

01:02:34.330 --> 01:02:36.550
And again,
this was all written before Quartz,

01:02:36.610 --> 01:02:39.050
and just it's something
completely different.

01:02:39.500 --> 01:02:41.840
But because of the shared imaging model,
you'll see the mapping's

01:02:41.840 --> 01:02:42.930
pretty much one-to-one.

01:02:43.020 --> 01:02:45.190
Move to becomes move to point.

01:02:45.530 --> 01:02:47.140
Line to, add line to point.

01:02:47.430 --> 01:02:49.640
Strokes, it's just that imaging model.

01:02:49.640 --> 01:02:52.230
So boom, all of a sudden,
you've got this powerful

01:02:52.350 --> 01:02:55.830
graphics library ported over,
drawing into a Quartz context.

01:02:55.940 --> 01:02:58.310
So now can we mix Quartz and PyChart?

01:02:58.310 --> 01:03:00.940
So can we render both of them together?

01:03:00.940 --> 01:03:03.740
And the idea was I wanted this output.

01:03:03.740 --> 01:03:08.920
Can I generate a PDF file with
Quartz that had a PyChart output?

01:03:09.520 --> 01:03:14.000
vector output on top, and on the bottom,
an HTML table.

01:03:14.200 --> 01:03:15.140
And the answer, of course, is yes.

01:03:15.140 --> 01:03:19.640
I signed up for the session
before I knew the answer was yes,

01:03:19.770 --> 01:03:20.460
but luckily it's yes.

01:03:20.480 --> 01:03:22.440
And the main driver looks
something like this.

01:03:22.560 --> 01:03:24.060
There's some standard initialization.

01:03:24.060 --> 01:03:27.600
There's a call to one method
that's going to draw the bar chart.

01:03:27.730 --> 01:03:29.520
And then there's another one
that's going to draw the table.

01:03:29.640 --> 01:03:30.860
And we're just going to
look at that briefly.

01:03:30.860 --> 01:03:33.060
The Python isn't
particularly interesting,

01:03:33.060 --> 01:03:36.100
but the bottom yellow lines are,
which is after you set up the

01:03:36.100 --> 01:03:37.910
chart and you set up PyChart,
hey,

01:03:37.910 --> 01:03:39.490
these are the kind of bar graphs I want.

01:03:39.650 --> 01:03:43.400
At the end, all you have to do is say,
hey, draw it into this context.

01:03:43.630 --> 01:03:45.880
brought into this court's contest.

01:03:46.010 --> 01:03:48.530
Similarly, on the other side of it,

01:03:48.660 --> 01:03:49.980
I want to draw the table.

01:03:50.010 --> 01:03:53.600
We're going to generate the HTML for
a table based on some comma-separated

01:03:53.640 --> 01:03:55.920
values that were coming into the script.

01:03:55.970 --> 01:03:59.580
And then at the end, we're going to say,
hey, render this HTML.

01:03:59.620 --> 01:04:01.870
And the result is that
combination I showed you.

01:04:01.980 --> 01:04:05.300
It's everything put
together under one context.

01:04:05.630 --> 01:04:08.490
So you can go look for
other Python libraries and

01:04:08.490 --> 01:04:09.660
integrate them the same way.

01:04:09.840 --> 01:04:12.430
The common imaging model is
going to make it very easy to

01:04:12.430 --> 01:04:15.530
bring some very interesting
things onto Quartz and Mac OS X.

01:04:15.540 --> 01:04:17.430
So that's just a script.

01:04:17.550 --> 01:04:20.960
It's creating a script in Python,
maybe moving over a library on top

01:04:20.970 --> 01:04:22.690
of Quartz and make it useful to you.

01:04:22.840 --> 01:04:24.730
So it seems like we're
going to step away from it,

01:04:24.830 --> 01:04:26.470
but we're not really going that far.

01:04:26.480 --> 01:04:29.520
In Tiger now we have automator actions,
right?

01:04:29.520 --> 01:04:32.280
And we ship a bunch of
useful PDF automator actions,

01:04:32.280 --> 01:04:33.670
but you can create your own.

01:04:34.320 --> 01:04:37.340
If you haven't used automator much,
this is an example of something

01:04:37.340 --> 01:04:40.130
a user can do just using the
existing automator actions.

01:04:40.140 --> 01:04:46.090
So this particular workflow lets
the user take an album out of iPhoto

01:04:46.090 --> 01:04:48.980
and then renders all the pages,
right?

01:04:48.980 --> 01:04:52.860
And then generates a contact
sheet and opens up the PDF.

01:04:52.860 --> 01:04:54.400
So it's very simple
for a user to do this,

01:04:54.400 --> 01:04:56.600
but it would be nice if
there were some more actions.

01:04:56.600 --> 01:04:59.760
So what you can do is take a
Python script you've written,

01:04:59.760 --> 01:05:02.360
for example,
the one I was showing earlier,

01:05:02.360 --> 01:05:03.740
the one based on PyChart,
which takes these comma-scripts

01:05:03.740 --> 01:05:04.250
and writes them into a PDF format.

01:05:04.260 --> 01:05:04.260
And then it takes a Python script,
puts the comma-scripts in,

01:05:04.260 --> 01:05:04.340
and then takes the comma-scripts
and writes them into a PDF format.

01:05:04.380 --> 01:05:04.380
And then it takes a Python script,
puts the comma-scripts in,

01:05:04.380 --> 01:05:04.460
and then takes the comma-scripts in,
and then takes the comma-scripts in,

01:05:04.460 --> 01:05:04.460
and then takes the comma-scripts in,
and then takes the comma-scripts in,

01:05:04.460 --> 01:05:04.460
and then takes the comma-scripts in,
and then takes the comma-scripts in,

01:05:04.460 --> 01:05:04.460
and then takes the comma-scripts in,
and then takes the comma-scripts in,

01:05:04.460 --> 01:05:04.500
and then takes the comma-scripts in,
and then takes the comma-scripts in.

01:05:04.500 --> 01:05:04.620
So this is a very simple way to do it.

01:05:04.620 --> 01:05:04.690
So this is a very simple way to do it.

01:05:25.920 --> 01:05:28.140
Go in,
put your script into that template,

01:05:28.140 --> 01:05:30.710
change the description so it
properly describes what you have,

01:05:30.910 --> 01:05:33.380
tweak the nib, in this case actually
remove a lot of stuff.

01:05:33.500 --> 01:05:35.400
I'm not a UI designer, so sorry.

01:05:35.400 --> 01:05:36.660
It's not very exciting.

01:05:36.660 --> 01:05:39.180
But now, boom,
you've got an action that anybody

01:05:39.180 --> 01:05:42.420
can use to take comma-separated
values like you might export out

01:05:42.420 --> 01:05:44.340
of Excel and generate PDF output.

01:05:47.670 --> 01:05:50.110
But you can be a little
more ambitious if you want.

01:05:50.220 --> 01:05:52.440
These actions can also
be written in Cocoa.

01:05:52.470 --> 01:05:55.840
And again, if you go use them in Cocoa,
then you're going to use Quartz directly.

01:05:55.840 --> 01:05:58.100
And it's very simple if you
want to write them in Cocoa.

01:05:58.100 --> 01:06:00.900
You implement this one method,
run with input from action error.

01:06:00.900 --> 01:06:03.340
You'll get your input file,
which generally is going

01:06:03.340 --> 01:06:04.510
to be whatever you want.

01:06:04.540 --> 01:06:06.770
Maybe it's going to be
comma separated values.

01:06:06.770 --> 01:06:08.290
Maybe it'll be something else.

01:06:08.290 --> 01:06:11.330
In the example we're going to look at,
it's going to be a PDF file.

01:06:11.330 --> 01:06:13.720
And then you use Quartz to
manipulate the PDF file.

01:06:13.720 --> 01:06:16.580
And now you have an action
that can do specific things.

01:06:17.220 --> 01:06:20.580
In our case,
it's going to mean scanning a

01:06:20.960 --> 01:06:24.260
PDF and trying to come up with some
analysis of what's inside of it.

01:06:24.330 --> 01:06:25.200
So that's what I wanted to do.

01:06:25.200 --> 01:06:28.980
It turns out Tiger has this
new scanning API inside of it.

01:06:29.020 --> 01:06:30.840
And just to give you an idea
how that scanning API works

01:06:30.960 --> 01:06:33.150
that we're going to use,
you start with a PDF document.

01:06:33.160 --> 01:06:35.180
You create the PDF document
from a file you get.

01:06:35.200 --> 01:06:39.130
Once you have the PDF document,
you have that loop that we looked at that

01:06:39.140 --> 01:06:41.310
loops over each page in the document.

01:06:41.310 --> 01:06:44.230
You get the PDF page
representation for each page.

01:06:44.230 --> 01:06:46.560
You get the content stream for each page.

01:06:46.580 --> 01:06:52.120
Then what you need to do is tell
the scanning API what operators,

01:06:52.200 --> 01:06:53.980
what PDF operators you're interested in.

01:06:53.980 --> 01:06:56.260
And you do that by creating
this operator table.

01:06:56.450 --> 01:06:58.600
You create the operator table and
you start putting things in it.

01:06:58.670 --> 01:07:00.560
In this case, we're looking for images.

01:07:01.420 --> 01:07:05.010
To find images, we need to implement,
or bottleneck, if you will,

01:07:05.010 --> 01:07:07.240
the DO operator inside of PDF.

01:07:07.240 --> 01:07:09.440
So we put that into this operator table.

01:07:09.560 --> 01:07:10.590
We create a scanner.

01:07:10.590 --> 01:07:11.670
And then we say scan.

01:07:11.670 --> 01:07:14.870
And what Quartz is then going to do
is it plays back your PDF whenever

01:07:14.870 --> 01:07:16.040
it sees one of these DO operators.

01:07:16.050 --> 01:07:19.000
It's going to call back into your code.

01:07:19.010 --> 01:07:21.660
And the code I have just says, oh, OK,
you found an image.

01:07:21.690 --> 01:07:22.590
What page was I on?

01:07:22.850 --> 01:07:23.920
And it keeps a tally.

01:07:24.040 --> 01:07:27.900
It keeps a tally of that inside of it.

01:07:28.140 --> 01:07:30.120
And kind of coincidentally,
once it has the tally,

01:07:30.210 --> 01:07:33.720
it generates comma separated
values of those tallies.

01:07:33.820 --> 01:07:36.580
So now here we have an action
that will do exactly that.

01:07:36.580 --> 01:07:39.400
It generates comma separated values.

01:07:39.710 --> 01:07:42.140
with how many images
there are on each page.

01:07:42.160 --> 01:07:44.850
So can we put all these pieces together?

01:07:44.860 --> 01:07:46.050
And the answer, of course, is yes.

01:07:46.120 --> 01:07:48.120
So we're going to do... I'm
going to show you a quick demo,

01:07:48.120 --> 01:07:51.280
but the idea here is we're going
to take the Automator action that

01:07:51.280 --> 01:07:56.140
we have that scans the PDF file,
generates the comma-separated values,

01:07:56.200 --> 01:07:57.880
and spits them out of an action.

01:07:57.880 --> 01:08:00.280
We're going to hook into that
another action which reads

01:08:00.310 --> 01:08:03.720
the comma-separated values,
creates that PDF file, okay?

01:08:03.720 --> 01:08:04.940
We're going to do that in Automator.

01:08:04.940 --> 01:08:08.190
We're then going to use Automator's
ability to create a print workflow item

01:08:08.220 --> 01:08:12.630
which gets saved directly into the proper
place that the print dialog can find it.

01:08:12.680 --> 01:08:14.940
We're then going to open
up something in Safari.

01:08:14.940 --> 01:08:18.040
We're going to go to the print dialog,
and we're going to invoke this action.

01:08:18.040 --> 01:08:20.120
Again, this is something that you can
write these little actions,

01:08:20.120 --> 01:08:21.310
and then the user can put them together.

01:08:23.140 --> 01:08:24.520
So we're going to try this demo.

01:08:24.520 --> 01:08:25.640
Let's see how this works.

01:08:25.640 --> 01:08:26.400
This will be demo two.

01:08:27.070 --> 01:08:30.800
Wow.

01:08:30.800 --> 01:08:33.590
It's a good thing I explained
how this really works.

01:08:37.630 --> 01:08:39.260
Well, see, that was good because it
happened before my demo.

01:08:39.260 --> 01:08:42.240
We're going to go back to the slides.

01:08:42.310 --> 01:08:42.780
That's actually good.

01:08:42.780 --> 01:08:44.850
It gives us more time for Q&A,
which is what you really wanted.

01:08:44.990 --> 01:08:50.080
But so anyway, the demo,
the important part of the demo was

01:08:50.390 --> 01:08:53.680
how to properly handle a kernel panic.

01:08:57.130 --> 01:09:01.650
The important part of the demo was
take these automator actions that you,

01:09:01.650 --> 01:09:02.700
the developers, can make.

01:09:02.920 --> 01:09:05.880
A user then strings them
together in some useful way.

01:09:06.010 --> 01:09:08.660
The user then can easily save them where
the print dialogue can pick them up.

01:09:08.850 --> 01:09:11.860
And then whatever application
can drop a print dialogue,

01:09:11.860 --> 01:09:17.250
be it Safari, or TextEdit, or Pages,
that workflow can then be run,

01:09:17.250 --> 01:09:19.850
the workflow the user created,
can then be run to analyze or

01:09:19.850 --> 01:09:21.400
to create content based on that.

01:09:21.400 --> 01:09:23.820
So it's a very powerful way of
taking these little bunts and

01:09:23.820 --> 01:09:26.310
singles that we talked about,
letting the user hook them them together

01:09:26.380 --> 01:09:30.270
and then putting them right into the
user's hand inside of the print dialog.

01:09:30.990 --> 01:09:33.450
So that would have been the PDF Workflow
is what I was going to show,

01:09:33.460 --> 01:09:35.040
the way that print dialog works.

01:09:35.120 --> 01:09:37.890
And then the next obvious point is, well,
how can my application invoke

01:09:38.470 --> 01:09:40.130
those PDF Workflow items directly?

01:09:40.130 --> 01:09:43.120
And it turns out there's an API for it,
luckily.

01:09:43.180 --> 01:09:47.360
If you want to actually invoke
these workflows directly rather

01:09:47.440 --> 01:09:51.680
than from the print dialog,
first you want to enumerate them.

01:09:51.680 --> 01:09:54.590
That's just called
PM Workflow Copy Items.

01:09:54.590 --> 01:09:55.790
That'll give you an array of
URLs where each URL represents

01:09:55.790 --> 01:09:55.790
one of these workflow items.

01:09:56.760 --> 01:10:00.760
And then when you want to execute it,
PM Workflow submit PDF with options.

01:10:00.840 --> 01:10:03.250
So you'll submit the workflow
you want to execute along with

01:10:03.290 --> 01:10:05.320
the PDF and maybe a title,
and it will execute.

01:10:05.320 --> 01:10:08.370
And the important thing about a workflow,
PDF Workflow,

01:10:08.370 --> 01:10:10.910
is it takes PDF in and it does
something with it on the outside.

01:10:10.920 --> 01:10:12.520
And you have no idea what happens to it.

01:10:12.520 --> 01:10:14.460
It might email it,
it might turn it into TIFFs,

01:10:14.530 --> 01:10:17.260
it might turn it into
comma-separated values.

01:10:17.260 --> 01:10:17.760
You don't know.

01:10:17.760 --> 01:10:19.040
So that's what happens with Workflow.

01:10:20.790 --> 01:10:22.740
There's lots of different
workflow items that are actually

01:10:22.740 --> 01:10:23.900
supported in the system.

01:10:23.960 --> 01:10:26.740
We support folders inside
of your PDF services folder,

01:10:26.740 --> 01:10:28.860
which is where these things live,
if you want to organize

01:10:28.930 --> 01:10:30.000
them hierarchically.

01:10:30.100 --> 01:10:31.340
We support folder aliases.

01:10:31.340 --> 01:10:34.970
If there's a folder alias workflow item,
we just move the PDF right into there.

01:10:35.090 --> 01:10:37.470
Unix tools, Apple scripts,
Automator Workflow was

01:10:37.480 --> 01:10:38.680
the big one for Tiger.

01:10:38.870 --> 01:10:42.140
You can put an application
right in there,

01:10:42.140 --> 01:10:46.680
and the application will get an
open event on the PDF document.

01:10:46.680 --> 01:10:46.680
And we support Quartz filters as well.

01:10:47.000 --> 01:10:50.760
So what I really wanted was an
application that would demo this.

01:10:50.800 --> 01:10:53.010
And I wasn't going to
demo it apparently now.

01:10:53.260 --> 01:10:55.430
Luckily, I have the screenshot.

01:10:55.570 --> 01:10:58.320
So this is FlyMeet Software.

01:10:58.380 --> 01:10:59.560
These are the makers of VoodooPad.

01:10:59.560 --> 01:11:00.670
I'm a big fan of VoodooPad.

01:11:00.680 --> 01:11:02.250
And they have this
thing called FlySketch,

01:11:02.460 --> 01:11:04.020
which is a screen capture utility.

01:11:04.020 --> 01:11:06.740
It will let you draw the window
over a portion of the screen.

01:11:06.760 --> 01:11:09.430
You can capture it,
and then you can annotate the result.

01:11:09.610 --> 01:11:11.350
And what you have then
is really a bitmap,

01:11:11.480 --> 01:11:13.340
but it's in a PDF form.

01:11:13.360 --> 01:11:16.480
And FlySketch had the ability
to then do something with it,

01:11:16.480 --> 01:11:17.860
mail it or whatever.

01:11:17.930 --> 01:11:19.760
So I sent an email to Gus, and I said,
hey, you know, it'd be kind of cool.

01:11:19.760 --> 01:11:21.720
We have these APIs that are workflows.

01:11:21.750 --> 01:11:24.920
And if you could then use that
workflow API to add anything

01:11:24.920 --> 01:11:26.740
that the print dialog can do,
your application can

01:11:26.740 --> 01:11:29.320
now do with your PDF,
that would be really great.

01:11:29.320 --> 01:11:31.470
I sent that mail and some other
mail and answered some mail,

01:11:31.470 --> 01:11:33.800
and all of a sudden,
it came back to me like this.

01:11:33.930 --> 01:11:34.980
And he had done it.

01:11:34.990 --> 01:11:36.920
I don't know what it took him, an hour,
30 minutes.

01:11:36.920 --> 01:11:37.500
It was great.

01:11:37.640 --> 01:11:38.810
So thank you, Gus, if you're out there.

01:11:38.820 --> 01:11:39.620
It was terrific.

01:11:39.620 --> 01:11:42.710
And it's a great example of how
you can bring all this power

01:11:42.710 --> 01:11:44.940
right into your application.

01:11:46.260 --> 01:11:50.020
So high level PDF, this is the takeaway.

01:11:50.080 --> 01:11:53.700
You can use Quartz directly
to write Automator actions.

01:11:53.750 --> 01:11:57.220
But you can also use Python to
write them even faster.

01:11:57.300 --> 01:12:00.660
And whether you write them in
Cocoa or write them in Python,

01:12:00.660 --> 01:12:03.400
you can then wrap them in
Automator to give to your users,

01:12:03.400 --> 01:12:05.510
to do useful little
nuggets of information.

01:12:05.830 --> 01:12:08.370
The user can then wrap them
into more useful workflows,

01:12:08.430 --> 01:12:10.960
and they can then invoke
them from the print dialog.

01:12:11.020 --> 01:12:14.190
Or if you're a great developer like Gus,
you can invoke them directly

01:12:14.190 --> 01:12:15.410
from your application.

01:12:17.960 --> 01:12:19.580
Alright, so this is actually,
I've got a couple minutes,

01:12:19.580 --> 01:12:21.580
this is actually the highlight
for me of the conference.

01:12:21.580 --> 01:12:23.040
We have a new Quartz book coming out.

01:12:23.040 --> 01:12:24.480
It's coming from Morgan Kaufman.

01:12:24.480 --> 01:12:25.590
This is a terrific book.

01:12:25.660 --> 01:12:28.340
The author is somebody I've
worked with for 16 years.

01:12:28.340 --> 01:12:29.240
He's a good friend of mine.

01:12:29.410 --> 01:12:33.180
He's known for his attention to
detail and this book shows it.

01:12:33.240 --> 01:12:35.820
If you need to learn Quartz,
this is the book you're

01:12:36.040 --> 01:12:37.080
going to want to get.

01:12:37.080 --> 01:12:41.540
Now, Apple's publications group has
done a great job of revving all the

01:12:41.660 --> 01:12:43.360
Quartz documentations for Tiger.

01:12:43.360 --> 01:12:44.990
So you can go out and see all
this great reference material

01:12:44.990 --> 01:12:45.790
and it really is terrific.

01:12:46.560 --> 01:12:48.030
But if you're the kind of guy
like me who wants to sit down

01:12:48.030 --> 01:12:50.170
with a book that just says,
hey look, here's how you do this

01:12:50.180 --> 01:12:52.680
and has great examples,
this is going to be really terrific.

01:12:52.760 --> 01:12:55.400
So it's coming from Morgan Kaufman
and if you don't believe me about

01:12:55.400 --> 01:12:58.520
the level of detail in this,
there's a sample chapter that you can

01:12:58.520 --> 01:13:01.990
go get and go read that's available and
I think you'll be incredibly impressed.

01:13:02.000 --> 01:13:03.700
And it actually came to
my attention this week,

01:13:03.920 --> 01:13:07.290
there's another very respected,
impressive Macintosh developer

01:13:07.360 --> 01:13:08.600
who's also working on a Quartz book.

01:13:08.660 --> 01:13:10.750
So I think those two books are
going to mean very good things

01:13:10.860 --> 01:13:12.300
for Quartz here as we go forward.

01:13:14.750 --> 01:13:19.070
So for more information,
here's where the sample code is.

01:13:19.250 --> 01:13:20.550
Related sessions coming up.

01:13:20.740 --> 01:13:22.200
These are the Friday sessions.

01:13:22.260 --> 01:13:24.220
Moving from Quick Draw to Quartz.

01:13:24.300 --> 01:13:27.160
Definitely go to this if you have a lot
of Quick Draw codes still sitting around.

01:13:27.160 --> 01:13:29.640
We want to get Quick Draw gone.

01:13:29.750 --> 01:13:32.180
Optimal 2D application graphics.

01:13:32.290 --> 01:13:34.580
Obviously, if you're going to use Quartz,
you get a lot of power and

01:13:34.580 --> 01:13:37.070
a lot of speed for free,
but you can still go down the

01:13:37.070 --> 01:13:38.200
wrong path if you're not careful.

01:13:38.200 --> 01:13:39.480
This will tell you how to do that.

01:13:39.520 --> 01:13:40.970
And then the graphics
and media feedback form,

01:13:40.970 --> 01:13:42.040
which is always pretty exciting.

01:13:42.040 --> 01:13:46.160
You should make sure you make that
and find all the hard questions.

01:13:46.700 --> 01:13:48.420
Contact Travis Brown if
you have any questions.