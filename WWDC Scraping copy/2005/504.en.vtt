WEBVTT

00:00:01.750 --> 00:00:02.660
I'm Eric Anderson.

00:00:02.660 --> 00:00:05.320
This is session 504, FireWire.

00:00:05.430 --> 00:00:07.330
Thank you all for coming.

00:00:12.820 --> 00:00:16.730
We have no fewer than six demos today,
so we have a lot of stuff to go through.

00:00:16.730 --> 00:00:18.770
I hope you'll enjoy it.

00:00:20.600 --> 00:00:22.500
Okay.

00:00:22.500 --> 00:00:28.230
In past years we've used this session
to talk about how FireWire works

00:00:28.310 --> 00:00:31.050
in Mac OS X or even in Mac OS 9.

00:00:31.140 --> 00:00:33.750
This year, Tiger's recently shipped,
as Steve explained,

00:00:33.750 --> 00:00:35.600
lots of people are quickly adopting it.

00:00:35.630 --> 00:00:38.120
We already told you last year
about FireWire and Tiger.

00:00:39.400 --> 00:00:43.000
So this year we will have a quick recap,
but we're going to spend most of the time

00:00:43.010 --> 00:00:45.480
in this session talking about technique.

00:00:45.480 --> 00:00:49.660
If you are developing
for FireWire drivers,

00:00:49.660 --> 00:00:53.080
devices, applications,
we have a lot of tools and ideas that

00:00:53.150 --> 00:00:55.350
you can use to speed up your work.

00:00:55.380 --> 00:00:57.780
In fact,
we even have some technique that you

00:00:57.900 --> 00:01:00.170
can use FireWire to debug other things.

00:01:00.170 --> 00:01:03.660
Even if you don't have any FireWire
at all in what you're doing,

00:01:03.660 --> 00:01:06.060
you can use FireWire to help you debug.

00:01:08.080 --> 00:01:10.570
And having gone through a bunch
of demos of how that all works,

00:01:10.570 --> 00:01:12.640
then we'll wind up with a
quick look at resources and

00:01:12.640 --> 00:01:14.120
where you can get this stuff.

00:01:14.120 --> 00:01:16.320
And we'll leave plenty
of time for questions.

00:01:18.420 --> 00:01:20.860
If you'd like to follow
along in the session today,

00:01:20.940 --> 00:01:23.460
in some of the six demos,
these are things you can run

00:01:23.460 --> 00:01:25.000
on your PowerBooks or iBooks.

00:01:25.000 --> 00:01:28.560
Our SDK 20 just went live
on the web yesterday.

00:01:28.560 --> 00:01:30.190
You can download it.

00:01:30.220 --> 00:01:32.100
There's no access required.

00:01:32.100 --> 00:01:35.080
As long as you can get on the internet,
you can go to Apple and download the SDK.

00:01:35.190 --> 00:01:38.360
So you'll have plenty of time to do
that as I go through the overview

00:01:38.360 --> 00:01:40.560
and get ready for the sessions later.

00:01:41.020 --> 00:01:44.220
When you install SDK 20,
it does not modify

00:01:44.220 --> 00:01:45.910
your system in any way.

00:01:45.910 --> 00:01:49.340
It puts everything in /developer/sdk20.

00:01:49.340 --> 00:01:51.860
It will put some things
there that if you run them,

00:01:51.860 --> 00:01:55.160
they may modify your system,
but the SDK itself is harmless.

00:01:55.160 --> 00:01:57.010
So go ahead and install that,
and then you can use it

00:01:57.010 --> 00:01:58.070
during these sessions.

00:01:58.080 --> 00:02:01.500
If you have a FireWire device with you,
an iSight camera, an iPod,

00:02:01.500 --> 00:02:04.920
or your own device that you brought,
that may be useful to you during

00:02:04.920 --> 00:02:08.100
the session if you want to follow
along in some of the demos.

00:02:08.100 --> 00:02:09.480
So you could pull that
out and get it ready.

00:02:09.480 --> 00:02:11.000
You could even plug two Macs in.

00:02:11.000 --> 00:02:13.840
You could plug two Macs together
with the IP over FireWire if

00:02:13.840 --> 00:02:15.180
you don't have any device.

00:02:15.230 --> 00:02:18.000
But two of the tools are useful
even with no device at all.

00:02:18.010 --> 00:02:20.110
So even if you don't
have something in hand,

00:02:20.110 --> 00:02:22.360
you may still want to get the SDK ready.

00:02:22.620 --> 00:02:26.900
Some of the tools in the
SDK are not completely safe.

00:02:26.900 --> 00:02:30.460
So if you've just done an hour
worth of brilliant code writing,

00:02:30.460 --> 00:02:33.030
please save your work
before you run the tool.

00:02:33.330 --> 00:02:34.390
But I'm going to run them all live.

00:02:34.400 --> 00:02:36.500
I'm going to do all six demos,
and I don't think they're going to crash.

00:02:36.500 --> 00:02:37.490
So they're pretty good.

00:02:40.210 --> 00:02:43.280
Okay,
so while you're downloading the SDK,

00:02:43.280 --> 00:02:46.080
let's do a quick review of the basics.

00:02:46.290 --> 00:02:49.440
FireWire products have been
shipping to consumers for 10 years.

00:02:49.440 --> 00:02:52.280
It's a mainstream technology.

00:02:52.280 --> 00:02:54.220
Sometimes people forget
what's cool about it.

00:02:54.260 --> 00:02:55.870
How can anything be cool after 10 years?

00:02:55.880 --> 00:02:58.240
So let's just quickly
look at the strengths.

00:02:58.240 --> 00:03:01.860
If you compare the FireWire port
to any other port on your Mac,

00:03:01.940 --> 00:03:05.990
or most any other kind of digital device,
FireWire often comes out on top.

00:03:06.000 --> 00:03:08.760
In at least one category,
usually most of these categories,

00:03:08.760 --> 00:03:10.000
sometimes all of them.

00:03:10.000 --> 00:03:11.550
Power.

00:03:12.250 --> 00:03:16.210
The Mac provides at least 6 watts,
up to 15 watts of power

00:03:16.340 --> 00:03:17.440
on the FireWire cable.

00:03:17.460 --> 00:03:21.220
So you can run a high performance
device like an iSight or an iPod.

00:03:21.230 --> 00:03:22.780
You can power a hard drive.

00:03:22.830 --> 00:03:26.350
You can power several hubs, repeaters,
so you can go long distance.

00:03:26.360 --> 00:03:27.600
Power is useful.

00:03:27.600 --> 00:03:31.700
No other connector provides
anywhere near that much power.

00:03:32.300 --> 00:03:33.500
Speed.

00:03:33.570 --> 00:03:35.590
FireWire can move 800
megabits per second,

00:03:35.600 --> 00:03:37.990
and it does so very efficiently.

00:03:38.010 --> 00:03:43.370
Most other IOs can't go that fast,
and the ones that do have very

00:03:43.370 --> 00:03:43.370
different characteristics than FireWire.

00:03:44.020 --> 00:03:45.360
Distance.

00:03:45.360 --> 00:03:49.430
You can go 100 meters on simple category
5 cable or on optical cable like

00:03:49.440 --> 00:03:52.090
we've shown several years with 1394B.

00:03:52.090 --> 00:03:55.820
And it's interoperable with 1394A
and devices we've sold before.

00:03:55.820 --> 00:03:59.080
So customers can hook your
product up over long distances.

00:03:59.080 --> 00:04:03.650
You can wire stuff up around the home,
wire up a lab or a classroom,

00:04:03.680 --> 00:04:07.070
use it for a music studio,
a television studio,

00:04:07.070 --> 00:04:11.520
or even a medical or scientific
or industrial application.

00:04:11.520 --> 00:04:14.910
Or maybe for safety reasons you need
to put some distance between yourself

00:04:14.930 --> 00:04:17.200
and whatever's at the end of that wire.

00:04:17.350 --> 00:04:21.030
Distance, power, speed,
these open up tremendous opportunities

00:04:21.030 --> 00:04:23.030
for really innovative devices.

00:04:23.260 --> 00:04:24.190
Lots of them.

00:04:24.280 --> 00:04:26.130
Like USB,
FireWire can hook up more devices than

00:04:26.130 --> 00:04:28.200
your customer's ever going to have.

00:04:28.240 --> 00:04:31.640
So that's a lot of utility
you get out of that one port.

00:04:31.710 --> 00:04:33.960
Plus,
on FireWire we have a lot of powerful

00:04:33.960 --> 00:04:37.140
tools to really help you understand
what you're doing and move forward,

00:04:37.190 --> 00:04:41.880
and a lot of helpful source
code and documentation too,

00:04:41.880 --> 00:04:46.800
and that's what we'll spend
the bulk of the time on today.

00:04:46.800 --> 00:04:48.600
So here's like all of last year's
presentation crammed into one slide.

00:04:50.070 --> 00:04:53.760
Customer using a Mac might
have several FireWire devices.

00:04:53.760 --> 00:04:58.420
Here we've pictured an iPod,
a Mini actually, a DV camera,

00:04:58.420 --> 00:05:01.210
an EyeSight camera, and a Mac Mini.

00:05:01.220 --> 00:05:02.470
We'll come back to that one.

00:05:02.480 --> 00:05:04.280
They're all plugged into the Mac.

00:05:04.280 --> 00:05:08.420
The Mac has only one FireWire controller,
so you see all those apps up there.

00:05:08.420 --> 00:05:11.580
All those devices and apps have
to share that one controller.

00:05:11.580 --> 00:05:12.760
They're going to have to play nice.

00:05:13.280 --> 00:05:14.040
They don't want to.

00:05:14.060 --> 00:05:15.590
They just want to do their own thing.

00:05:15.590 --> 00:05:20.480
IO FireWire family is a service in
the kernel that makes everyone share.

00:05:20.480 --> 00:05:21.920
It lets them each do their own thing.

00:05:21.920 --> 00:05:22.880
It routes packets.

00:05:22.880 --> 00:05:25.870
It loads drivers, so they don't have to
know about each other.

00:05:26.280 --> 00:05:29.990
Everyone can cooperatively
use that single interface.

00:05:30.430 --> 00:05:33.660
Sometimes an application talks
directly to IO FireWire family,

00:05:33.660 --> 00:05:34.900
as shown on the left.

00:05:34.900 --> 00:05:38.100
Some of the tools that we'll
show later today do just that.

00:05:38.530 --> 00:05:42.190
We also provide with the
family a series of protocols,

00:05:42.190 --> 00:05:45.010
services,
and drivers for common classes of

00:05:45.010 --> 00:05:48.530
device to help them talk to FireWire so
you don't have to reinvent the wheel.

00:05:48.600 --> 00:05:51.540
So moving left to right,
first we see SBP2,

00:05:51.570 --> 00:05:53.360
the Serial Bus Protocol.

00:05:53.360 --> 00:05:57.790
This is a protocol used by hard drives,
printers, scanners, cameras,

00:05:58.240 --> 00:06:01.190
anything that is a storage
or storage-like kind of

00:06:01.230 --> 00:06:02.560
device is likely to use this.

00:06:02.600 --> 00:06:06.560
So here iTunes is loaded using
the SBP2 layer in order to talk

00:06:06.560 --> 00:06:10.590
to the iPod that was plugged
in and synchronize your music.

00:06:11.220 --> 00:06:12.600
Next over is AVC.

00:06:12.710 --> 00:06:15.580
This is a totally different
protocol for audio/video devices,

00:06:15.580 --> 00:06:19.500
either consumer devices
or professional devices.

00:06:19.500 --> 00:06:21.090
So here iMovie has loaded.

00:06:21.090 --> 00:06:24.410
It's using AVC to talk to that DV camera.

00:06:24.850 --> 00:06:27.700
The next one over is
a driver called IIDC,

00:06:27.700 --> 00:06:31.260
the Industrial and
Instrumentation Digital Camera.

00:06:31.320 --> 00:06:34.320
It's a spec from the 1394
Trade Association for a raw

00:06:34.320 --> 00:06:37.740
video camera like the EyeSight,
where there's no compression.

00:06:37.740 --> 00:06:40.540
That has a fairly different need
than a consumer electronics device,

00:06:40.540 --> 00:06:42.070
so there's a different
kind of driver for it,

00:06:42.070 --> 00:06:43.740
and we provide that built in.

00:06:43.760 --> 00:06:49.260
So that's talking to the EyeSight
so that iChat can show live video.

00:06:49.310 --> 00:06:52.530
Finally, on the right,
the Internet Protocol.

00:06:53.170 --> 00:06:56.020
FireWire is a first-class
network interface on Mac OS X,

00:06:56.020 --> 00:06:58.290
and in Tiger it's turned on by default.

00:06:58.290 --> 00:07:02.920
You can get IPv4, IPv6,
any internet protocol that's

00:07:02.920 --> 00:07:06.790
been invented over the past two,
three decades can run over FireWire.

00:07:06.790 --> 00:07:08.800
And that's what the
Mac Mini is doing there.

00:07:08.800 --> 00:07:11.890
I'm not quite sure what it's serving up,
but we're getting to it

00:07:11.980 --> 00:07:13.270
from Safari at the top.

00:07:13.500 --> 00:07:16.410
And whatever it's doing,
it's using Bonjour for

00:07:16.550 --> 00:07:19.060
configuration and service discovery.

00:07:19.060 --> 00:07:20.950
Again,
FireWire is a first-class interface,

00:07:20.950 --> 00:07:23.380
so all the Bonjour services
are naturally available.

00:07:23.380 --> 00:07:27.210
You can just plug two Macs together
and set up Apple Share or any other

00:07:27.220 --> 00:07:29.800
internet-based service that you want.

00:07:30.960 --> 00:07:36.470
Notably, the Mac Mini has 100 megabit
ethernet and 400 megabit FireWire.

00:07:36.470 --> 00:07:39.520
So if you want to run an internet
protocol and you're in a hurry,

00:07:39.520 --> 00:07:42.120
FireWire is the fastest way to
get in or out of the Mini or

00:07:42.120 --> 00:07:43.850
the iBook or other products.

00:07:43.850 --> 00:07:47.410
So there's a lot of potential
there to leverage decades' worth of

00:07:47.410 --> 00:07:49.820
internet-based protocols on FireWire.

00:07:54.650 --> 00:07:56.990
There's a couple things that
wouldn't fit in that slide,

00:07:56.990 --> 00:07:58.840
and which are fairly new.

00:07:58.880 --> 00:08:01.190
In our SDK 20,

00:08:01.340 --> 00:08:04.810
We have something called
the AVC Video Services,

00:08:04.810 --> 00:08:05.540
or AVS.

00:08:05.570 --> 00:08:09.400
This is a rich framework of
services for writing applications

00:08:09.400 --> 00:08:12.920
that are going to talk to,
discover, control,

00:08:12.970 --> 00:08:16.540
stream to or from AV devices.

00:08:16.570 --> 00:08:21.060
This is usable for writing applications.

00:08:21.120 --> 00:08:25.360
It supports both MPEG-2 and DV,
both in and out,

00:08:25.450 --> 00:08:30.800
and also the higher end formats
like DVC Pro HD and HDV.

00:08:31.470 --> 00:08:35.480
It discovers,
controls devices in a uniform way,

00:08:35.550 --> 00:08:38.080
and also it maintains
connections to devices.

00:08:38.080 --> 00:08:41.200
So when you've started streaming
in or out of various devices,

00:08:41.250 --> 00:08:43.720
even if the bus is reconfigured
or other changes happen,

00:08:43.720 --> 00:08:45.760
AVS will keep track of that
and make sure your device keeps

00:08:45.760 --> 00:08:47.280
streaming the way it's supposed to.

00:08:47.280 --> 00:08:49.060
That's done with standard protocols.

00:08:49.060 --> 00:08:51.840
There's no reason you should have
to reinvent that in your app,

00:08:51.850 --> 00:08:52.940
so we do that in AVS.

00:08:53.680 --> 00:08:56.240
It also provides support
for virtual devices.

00:08:56.240 --> 00:08:58.060
We've got another slide on
that that's pretty exciting.

00:08:58.060 --> 00:09:02.040
AVS is used by our own apps, Final Cut,
iMovie, iDVD,

00:09:02.040 --> 00:09:04.750
as a way of moving stuff in and out.

00:09:04.760 --> 00:09:06.880
So it's very robust,
it's production ready.

00:09:06.880 --> 00:09:10.450
Take a look at it if you are
considering this kind of app.

00:09:10.460 --> 00:09:12.730
Now, you should also consider QuickTime.

00:09:12.740 --> 00:09:15.020
Especially if you're
moving video in or out,

00:09:15.020 --> 00:09:16.780
that's what QuickTime's good at.

00:09:16.780 --> 00:09:17.840
It's your choice.

00:09:17.840 --> 00:09:20.480
If you choose QuickTime,
it's a bit higher level.

00:09:20.480 --> 00:09:22.090
You won't be tied to FireWire.

00:09:22.090 --> 00:09:23.120
That may be good.

00:09:23.740 --> 00:09:25.760
If you choose AVS,
you may have more precise control

00:09:25.760 --> 00:09:27.400
over what you're doing on FireWire.

00:09:27.400 --> 00:09:29.370
So take a look at both,
consider your needs,

00:09:29.370 --> 00:09:31.140
and pick the one that's best for you.

00:09:31.140 --> 00:09:35.500
AVS is available in
SDK 20 as sample code.

00:09:39.290 --> 00:09:43.100
AVS enables virtual devices.

00:09:43.170 --> 00:09:46.160
This is an idea like target disk mode.

00:09:46.180 --> 00:09:47.780
When you put your
Mac in target disk mode,

00:09:47.800 --> 00:09:49.940
it is pretending to be
a FireWire hard drive.

00:09:49.960 --> 00:09:54.250
It's using software and its own FireWire
interface to pose as something else,

00:09:54.250 --> 00:09:56.900
and that's useful,
because you connect a second

00:09:56.900 --> 00:09:59.090
Mac and access it like a hard drive.

00:09:59.970 --> 00:10:03.460
Well, you can do that with things
other than hard drives.

00:10:03.460 --> 00:10:05.490
If you go out today
and buy a high-def TV,

00:10:05.510 --> 00:10:08.120
there's a good chance
you'll find a FireWire port.

00:10:08.140 --> 00:10:10.720
It may be marked iLink
or DTVLink or 1394,

00:10:10.720 --> 00:10:12.310
but they're all the same.

00:10:13.930 --> 00:10:18.360
These TVs want to discover
and control FireWire devices,

00:10:18.360 --> 00:10:21.470
at least the devices that
a TV expects to find,

00:10:21.520 --> 00:10:25.520
such as a digital VHS deck
or an AV hard drive.

00:10:25.520 --> 00:10:28.960
So the TVs provide user
interfaces for doing this.

00:10:28.960 --> 00:10:35.100
The TV will also control a Mac if the
Mac is posing as one of these things.

00:10:35.100 --> 00:10:37.370
And that opens up a lot of possibility.

00:10:37.530 --> 00:10:39.970
So let's walk through
how that would work.

00:10:43.210 --> 00:10:46.100
Here's your shiny new HDTV.

00:10:46.160 --> 00:10:48.640
And here's your shiny new Mac.

00:10:48.740 --> 00:10:51.900
So on the Mac, you run an application.

00:10:51.950 --> 00:10:54.440
You don't need to reboot
like with target disk mode.

00:10:54.530 --> 00:10:57.370
In target disk mode,
only one thing can talk to the disk,

00:10:57.370 --> 00:11:01.100
so we have to get the OS out of the
way so the TDM can use the disk.

00:11:01.230 --> 00:11:04.600
Here, there's no need for that,
so you can just run an app in the finder.

00:11:04.900 --> 00:11:08.400
The app will pose as something,
and we will provide the

00:11:08.400 --> 00:11:09.780
app with some content.

00:11:09.780 --> 00:11:14.320
In this case it's going to be
a virtual digital VHS deck.

00:11:14.320 --> 00:11:19.490
So we'll give the app a folder full of
movies representing what's on the tape.

00:11:20.820 --> 00:11:22.700
Plug the two together by FireWire.

00:11:22.760 --> 00:11:23.960
What happens?

00:11:24.060 --> 00:11:27.830
You can go to the TV now and
press the input select button.

00:11:27.900 --> 00:11:31.700
The TV has discovered the Mac over
FireWire and asked it a few questions,

00:11:31.700 --> 00:11:36.020
and for all the TV knows, it's a DVHS,
so it's listed there in

00:11:36.020 --> 00:11:38.020
the input select menu.

00:11:38.090 --> 00:11:39.640
Pick that.

00:11:39.800 --> 00:11:43.300
Now the TV is all ready
to play a virtual DVHS.

00:11:43.300 --> 00:11:44.580
It doesn't know it's virtual.

00:11:44.580 --> 00:11:48.530
It's all ready to control
and play a digital VHS.

00:11:49.070 --> 00:11:54.300
Take the remote for the TV,
point it at the TV, press play.

00:11:54.380 --> 00:11:55.520
What happens?

00:11:55.570 --> 00:11:58.620
The TV knows it's controlling a VHS,
so it sends that command

00:11:58.740 --> 00:12:00.320
over FireWire into the Mac.

00:12:00.380 --> 00:12:03.280
The application on the
Mac understands what play means,

00:12:03.430 --> 00:12:06.750
takes the movie,
and starts streaming it back to the TV.

00:12:06.810 --> 00:12:11.190
Now you're watching content
from the Mac on the TV.

00:12:11.250 --> 00:12:15.360
Hopefully you've recorded some iTunes
or iPod commercials on your tape.

00:12:16.440 --> 00:12:19.760
Notably,
you didn't have to touch the Mac.

00:12:19.760 --> 00:12:24.610
You can run this thing once,
and then you can drive from the TV.

00:12:25.040 --> 00:12:27.000
You could drive a lot
of things from the TV.

00:12:27.010 --> 00:12:30.490
There's all sorts of creative things
you can do through a TV or through

00:12:30.490 --> 00:12:34.140
another device by implementing
virtual devices in the Mac.

00:12:34.200 --> 00:12:36.840
You can prototype something
that doesn't exist,

00:12:36.930 --> 00:12:39.700
you can experiment to
learn what the TV can do,

00:12:39.880 --> 00:12:41.010
all kinds of stuff.

00:12:41.220 --> 00:12:44.640
This is in our SDK, so try it out.

00:12:44.640 --> 00:12:49.170
You wanted to buy a new HDTV anyway,
right?

00:12:49.170 --> 00:12:50.400
Try this out,
I think you'll have a lot of fun with it.

00:12:51.630 --> 00:12:54.320
In AVS there is a generic
virtual tape subunit,

00:12:54.410 --> 00:12:56.610
it's format independent.

00:12:56.790 --> 00:12:58.400
What does it do?

00:12:58.400 --> 00:12:59.980
It runs as an app.

00:13:00.040 --> 00:13:03.500
It asks,
well you can call it from an app,

00:13:03.610 --> 00:13:07.260
it asks the Mac to publish an AVC config
ROM so that tells anyone who's looking,

00:13:07.260 --> 00:13:10.700
like the TV, hey,
I speak the AVC protocol.

00:13:10.920 --> 00:13:16.320
Furthermore, it tells the Mac to respond
to subunit info that says,

00:13:16.320 --> 00:13:21.590
why, yes, I have a DVHS subunit,
or a tape recorder subunit,

00:13:21.590 --> 00:13:21.590
whatever the format is.

00:13:22.260 --> 00:13:30.130
As commands come in from outside,
FireWire routes those

00:13:30.130 --> 00:13:31.280
back up to your app,
and the app can interpret play, stop,

00:13:31.280 --> 00:13:31.280
record, rewind, whatever.

00:13:31.920 --> 00:13:36.140
The virtual tape subunit is generic,
but there's also a virtual MPEG tape

00:13:36.180 --> 00:13:41.010
player that wraps that up with AVS's
capability to stream MPEG in and out,

00:13:41.040 --> 00:13:44.910
and that works a lot like what
you saw on the last slide.

00:13:45.490 --> 00:13:48.990
For example,
when you press fast forward from the TV,

00:13:49.010 --> 00:13:53.660
the app skips ahead 30 seconds in
the stream and finds a frame boundary

00:13:53.660 --> 00:13:55.660
and starts streaming from that point.

00:13:55.890 --> 00:13:58.910
So it acts like a very
responsive VHS deck,

00:13:58.920 --> 00:14:00.950
or maybe more like a TiVo.

00:14:02.500 --> 00:14:05.860
Also in AVS is a virtual music subunit.

00:14:05.870 --> 00:14:08.260
A music subunit is not
actually a sound device,

00:14:08.260 --> 00:14:10.200
it's a sound processing device.

00:14:10.200 --> 00:14:14.000
So it's a way for a device like
a mixing console or a synthesizer

00:14:14.080 --> 00:14:17.670
to express over FireWire all
of its internal capabilities.

00:14:17.690 --> 00:14:21.940
It has a filter, a chorus, a reverb,
a mixer, whatever.

00:14:21.940 --> 00:14:26.090
You can route those and plug
them together and discover them

00:14:26.170 --> 00:14:28.530
through the AVC music subunit.

00:14:29.160 --> 00:14:31.880
With a virtual one,
the Mac can do all these things.

00:14:31.880 --> 00:14:35.260
And so here too, you can implement a lot
of creative things without

00:14:35.260 --> 00:14:38.700
actually making any hardware,
just by coding them up on the Mac.

00:14:38.800 --> 00:14:41.110
You've got a multi-gigahertz
G5 to work with.

00:14:41.110 --> 00:14:43.040
You can do a lot of things with audio.

00:14:43.040 --> 00:14:46.750
And this plays together with Apple's
FireWire audio driver to actually

00:14:46.760 --> 00:14:48.540
move audio in or out of the box.

00:14:54.340 --> 00:14:59.740
Okay, that's a recap of where we are,
what FireWire basically does in Mac OS X,

00:14:59.770 --> 00:15:02.280
and some highlights of
recent new stuff in AVS.

00:15:02.280 --> 00:15:06.920
Now we're going to totally change
gears and look at a bunch of techniques

00:15:06.920 --> 00:15:11.130
and demo for using FireWire and
working with FireWire devices.

00:15:11.370 --> 00:15:18.290
First, we'll start with real
FireWire devices and drivers,

00:15:18.290 --> 00:15:18.290
and then we'll move
on to everything else.

00:15:18.940 --> 00:15:20.320
The first is FireBug.

00:15:20.320 --> 00:15:22.040
Many of you have used this.

00:15:22.040 --> 00:15:25.370
If you have a Unix background,
you may know EtherPeak,

00:15:25.470 --> 00:15:29.160
which is a decades-old command
that takes Ethernet packets and

00:15:29.160 --> 00:15:33.800
prints them out in the terminal in
a sort of engineer-readable format.

00:15:33.800 --> 00:15:34.870
FireBug is similar.

00:15:34.960 --> 00:15:37.330
It runs in a minimal GUI,
but it takes every FireWire

00:15:37.330 --> 00:15:40.440
packet and prints it out in a
format that should be readable.

00:15:41.110 --> 00:15:43.920
This is very helpful when you're
trying to debug a device or find

00:15:43.980 --> 00:15:47.590
out what's happening on the bus,
because you can see all the traffic in

00:15:47.590 --> 00:15:49.750
order with timestamps all explained.

00:15:49.760 --> 00:15:53.840
It has various capabilities to
filter and display selective packets.

00:15:53.840 --> 00:15:55.500
It has triggers.

00:15:55.500 --> 00:16:00.480
It has a general capability
to decode common protocols.

00:16:00.520 --> 00:16:05.240
So if you plug in an iPod, for example,
FireBug will decode the SPP2 commands,

00:16:05.240 --> 00:16:10.040
the logins, the orbs, the page tables,
and show you what each packet means.

00:16:10.120 --> 00:16:12.360
So you're not just confronted
with pages and pages of hex.

00:16:12.360 --> 00:16:15.040
You have pages and
pages of hex with notes.

00:16:17.060 --> 00:16:20.600
FireBUG can decode the internet protocol,
at least to some extent,

00:16:20.600 --> 00:16:24.190
and AVC commands, like subunit inquiry,
and those various

00:16:24.190 --> 00:16:27.110
different subunit types,
and a lot of the tape player commands.

00:16:28.320 --> 00:16:30.800
FireBug can display the bus topology,
can poke around in the PHY,

00:16:30.930 --> 00:16:32.100
we'll cover that more later.

00:16:32.100 --> 00:16:36.820
And it has some basic ability
to try some hands-on debugging,

00:16:36.910 --> 00:16:38.290
to send simple packets.

00:16:38.380 --> 00:16:40.400
Finally, it runs in real time.

00:16:40.400 --> 00:16:43.150
Most analyzers are sort of capture-based.

00:16:43.150 --> 00:16:46.450
Something happens, you capture it,
then you go back later and look at it.

00:16:46.480 --> 00:16:49.440
FireBug has a long history buffer,
so you can do that,

00:16:49.440 --> 00:16:52.200
but it runs in real time,
so you can get a human-time

00:16:52.200 --> 00:16:55.720
feeling for what's happening,
in what order, and how fast.

00:16:56.440 --> 00:16:58.950
So I'd like to demonstrate some of
the things you can do with Firebug.

00:17:00.680 --> 00:17:03.000
So let's go to demo one.

00:17:03.150 --> 00:17:06.430
FireBUG requires a
special PCI controller.

00:17:06.510 --> 00:17:10.620
Unless you have a blue and white G3 Mac,
you'll need to find a PCI card or Cardbus

00:17:10.760 --> 00:17:12.820
card with the right hardware on it.

00:17:12.930 --> 00:17:16.720
And there's information in the SDK about
what kind of hardware is suitable.

00:17:19.940 --> 00:17:23.500
So FireBUG runs in this
sort of minimal GUI window.

00:17:23.710 --> 00:17:26.580
What's on top is a bunch of
counters showing the kinds

00:17:26.630 --> 00:17:28.650
of packets and their number.

00:17:28.770 --> 00:17:31.660
The center area decodes
the packets as they go by,

00:17:31.660 --> 00:17:34.640
and the bottom area is
for typing in commands.

00:17:34.640 --> 00:17:38.880
The first thing I'm going to do is
ask FireBUG to color the packets it

00:17:38.880 --> 00:17:42.500
sees according to the packet type,
whether it's a read or write,

00:17:42.550 --> 00:17:44.600
quad lit or block or whatever.

00:17:44.600 --> 00:17:49.590
I'm going to type TCODE, sorry, color.

00:17:51.040 --> 00:18:01.360
T-code.

00:18:01.360 --> 00:18:01.360
You can't do this on your
PowerBooks unless you happen

00:18:01.360 --> 00:18:01.360
to bring a FireBug card,
which if you're lucky, good for you.

00:18:01.360 --> 00:18:01.360
The next demo you'll be
able to follow along.

00:18:03.200 --> 00:18:09.490
Now nothing's happening yet,
so I'm going to take the

00:18:09.700 --> 00:18:11.410
FireWire cable from the

00:18:12.840 --> 00:18:16.800
The Mac's normal FireWire interface,
and plug that in, and then you'll see

00:18:16.800 --> 00:18:18.430
some things happening.

00:18:24.500 --> 00:18:26.740
know if you can read that
but the highlights are,

00:18:26.740 --> 00:18:29.740
there were a couple of bus
resets as the bus reconfigured.

00:18:29.740 --> 00:18:33.400
Firebug drew a simple ASCII picture
of the bus topology so we can know

00:18:33.400 --> 00:18:37.950
who's on there and then it showed the
packets that were being sent on the bus.

00:18:38.130 --> 00:18:41.600
And just from the color you can see
they were all pretty much the same.

00:18:41.600 --> 00:18:44.810
What happened is on this
bus there's one Mac,

00:18:44.810 --> 00:18:46.780
one hub, and Firebug.

00:18:46.780 --> 00:18:51.860
The hub and Firebug are both passive but
the Mac is active and the Mac is sending

00:18:51.860 --> 00:18:55.000
out packets to the other two saying,
"Who Who are you?

00:18:55.000 --> 00:18:55.740
What do you do?

00:18:55.740 --> 00:18:58.090
Are you a HDTV?

00:18:58.570 --> 00:19:01.210
Neither FireBUG nor the hub is answering,
so all we see are these pale

00:19:01.210 --> 00:19:06.230
yellow packets that indicate
the MAC center request,

00:19:06.230 --> 00:19:09.370
and there was no response.

00:19:10.610 --> 00:19:13.560
I'm going to plug in this camera
and it will respond so you'll see

00:19:13.560 --> 00:19:16.160
things play out a little differently.

00:19:18.520 --> 00:19:21.020
Okay, now there's two colors
of packets going by.

00:19:21.050 --> 00:19:25.230
The Mac is sending out requests,
and the camera is responding to them.

00:19:25.340 --> 00:19:27.110
Not all of the requests
went to the camera,

00:19:27.110 --> 00:19:28.950
though, so it's not perfectly matched.

00:19:29.050 --> 00:19:31.840
And toward the end,
you see a third color has appeared.

00:19:31.960 --> 00:19:33.860
These are write packets.

00:19:33.880 --> 00:19:37.620
The Mac has discovered the camera
and has loaded our iIDC driver.

00:19:37.620 --> 00:19:40.940
And now that driver's
configuring the camera by poking

00:19:40.980 --> 00:19:44.230
values into its registers,
telling it to get ready in

00:19:44.250 --> 00:19:47.170
case we want to use iSight,
which is, in fact, already running.

00:19:47.820 --> 00:19:50.020
So by coloring the packets,
you can very easily get the

00:19:50.210 --> 00:19:53.110
gist of what's happening,
and that can help you focus in on

00:19:53.110 --> 00:19:55.670
what specifically you want to look at.

00:19:56.900 --> 00:20:00.200
So I'm going to ask EyeSight now
to show the video from the camera,

00:20:00.200 --> 00:20:03.640
and there were some more commands
to tell the camera to fire up.

00:20:04.600 --> 00:20:05.480
And it's now doing that.

00:20:05.590 --> 00:20:07.430
And like every year,
you're all sitting in the dark,

00:20:07.430 --> 00:20:09.370
so you can't really see yourselves.

00:20:09.380 --> 00:20:11.210
I'll just point the camera
down there at the Mac,

00:20:11.210 --> 00:20:13.450
so you can see what's going on.

00:20:14.990 --> 00:20:18.380
Now, by default, FireBUG does not show
the isochronous packets,

00:20:18.380 --> 00:20:20.050
the real-time video
packets from the camera,

00:20:20.050 --> 00:20:21.340
because there's a lot of them.

00:20:21.340 --> 00:20:23.340
We can turn that on.

00:20:23.740 --> 00:20:29.290
This says to add that T code to the
list of ones that are being displayed,

00:20:29.370 --> 00:20:30.980
T code on A.

00:20:31.080 --> 00:20:33.850
And now the display is flooded
with these isochronous packets.

00:20:34.110 --> 00:20:37.420
FireBuG can snoop 8,000 packets per
second and it's trying to display them,

00:20:37.450 --> 00:20:42.540
but it's a bit much to look at,
so that's off by default,

00:20:42.540 --> 00:20:42.540
so we'll turn it back off.

00:20:48.580 --> 00:20:51.540
Okay, so we used FireBUG to see
the camera get discovered and

00:20:51.540 --> 00:20:55.600
to see its basic operation,
but we can do considerably more.

00:20:56.890 --> 00:21:00.670
I've done some homework
on this particular camera,

00:21:00.670 --> 00:21:02.560
and I know what its
internal registers are like.

00:21:02.560 --> 00:21:05.560
It has a lot of registers
for doing various things.

00:21:05.590 --> 00:21:08.950
I'm going to ask FireBug to show
me a recap of the bus topology,

00:21:08.950 --> 00:21:12.600
and from this I can see that
the camera is node zero.

00:21:12.680 --> 00:21:18.620
I happen to know that there's a register
in the camera at a specific address,

00:21:18.620 --> 00:21:22.420
so I'm going to use FireBug
to read that register by

00:21:22.430 --> 00:21:24.890
typing qread for quadlet read,
and then the address,

00:21:26.400 --> 00:21:33.100
[Transcript missing]

00:21:33.160 --> 00:21:38.290
So it says that the value in
that register is 82000040.

00:21:38.380 --> 00:21:40.580
And that means something to me.

00:21:40.800 --> 00:21:42.460
This is the one I'm looking for.

00:21:42.460 --> 00:21:44.950
Having confirmed that it's
there and I can access it,

00:21:45.170 --> 00:21:47.860
now I can stuff a new value in there.

00:21:51.930 --> 00:21:54.250
This register is the zoom
register in the camera.

00:21:54.270 --> 00:21:56.340
The camera actually has a motorized zoom.

00:21:56.350 --> 00:22:00.030
So as soon as I send this packet,
hopefully, you'll see the camera zoom

00:22:00.040 --> 00:22:02.800
in tightly on the display,
which should go totally out of focus.

00:22:02.800 --> 00:22:04.790
There we go.

00:22:05.500 --> 00:22:07.800
Now,
normally you'd write a driver to do that.

00:22:07.800 --> 00:22:10.420
You'd put a slider in iChat or something.

00:22:10.420 --> 00:22:13.940
But before you go to all that effort,
you'd like to know that it works.

00:22:14.060 --> 00:22:16.400
Maybe you think it doesn't.

00:22:16.630 --> 00:22:18.720
FireBug lets you go
straight to the device,

00:22:18.760 --> 00:22:21.890
talk to it on your own terms without
any layers of stuff in the way,

00:22:22.000 --> 00:22:22.890
and poke around.

00:22:23.060 --> 00:22:30.450
So you can try stuff like this out
really easily and conveniently.

00:22:30.450 --> 00:22:33.710
And this should put it back.

00:22:33.710 --> 00:22:34.960
There we go.

00:22:40.100 --> 00:22:41.640
Okay, so that's the basics.

00:22:41.640 --> 00:22:45.100
You can do a lot of stuff like this.

00:22:45.120 --> 00:22:48.090
It's worth tracking down the
hardware so that you can do this.

00:22:48.110 --> 00:22:50.200
All of our key developers are using this.

00:22:50.200 --> 00:22:55.200
Okay, let's go back to the slides.

00:23:01.180 --> 00:23:01.940
So that was Firebug.

00:23:01.940 --> 00:23:06.860
The next topic is Firewire Busy Bus.

00:23:06.940 --> 00:23:10.850
There's a saying,
it is better to give than to receive.

00:23:11.050 --> 00:23:12.310
Firebug receives.

00:23:12.310 --> 00:23:13.690
Busy Bus gives.

00:23:13.690 --> 00:23:16.640
Busy Bus generates packets on the bus.

00:23:16.750 --> 00:23:18.730
By default, it generates random packets.

00:23:18.730 --> 00:23:20.280
That may sound kind of useless.

00:23:20.280 --> 00:23:23.280
Your device probably isn't
going to respond to them.

00:23:23.280 --> 00:23:24.120
That's okay.

00:23:24.120 --> 00:23:26.440
What it does is it simulates activity.

00:23:26.480 --> 00:23:30.120
If your device has been plugged in with
other devices that you never thought of,

00:23:30.120 --> 00:23:32.450
they might cause packets like this.

00:23:32.510 --> 00:23:34.590
If your device, your driver,
your app works properly

00:23:34.590 --> 00:23:36.520
with all this extra traffic,
that's good.

00:23:36.520 --> 00:23:38.830
That's customer calls
you probably won't get.

00:23:40.670 --> 00:23:42.120
But it's not always random.

00:23:42.300 --> 00:23:43.890
You can adjust it in a variety of ways.

00:23:43.890 --> 00:23:46.230
You can make it very specific.

00:23:46.580 --> 00:23:50.490
Also notably, Busy Bus can run on any
Mac that we sell today.

00:23:50.500 --> 00:23:52.910
It uses the ordinary OHCI interface.

00:23:53.180 --> 00:23:54.740
This is a tool that you can run here.

00:23:54.740 --> 00:23:57.600
You're not likely to see
anything interesting happen,

00:23:57.600 --> 00:23:59.590
but you can try out the controls.

00:23:59.670 --> 00:24:01.850
This tool, however, could be unsafe.

00:24:01.910 --> 00:24:04.060
It touches the hardware directly.

00:24:04.090 --> 00:24:08.770
You'll see it should work here,
but please do save your work

00:24:08.770 --> 00:24:08.770
if you're going to run it.

00:24:09.960 --> 00:24:13.740
So let's go to a demo of Busy Bus and
see the kind of things that it can do.

00:24:13.740 --> 00:24:16.230
And that demo is on number two.

00:24:24.130 --> 00:24:26.000
Okay, there's Busy Bus.

00:24:26.160 --> 00:24:28.560
You can see on the left is a
quick summary of the FireWire

00:24:28.560 --> 00:24:31.200
connection on the Mac,
which interface is being used,

00:24:31.200 --> 00:24:33.680
some information about the PHY,
we'll talk more about that later,

00:24:33.680 --> 00:24:36.800
and the connection status
for each of the ports.

00:24:37.030 --> 00:24:40.950
Here we can see that we have an
800-capable Mac with three ports.

00:24:40.950 --> 00:24:40.950
Eric Anderson

00:24:41.200 --> 00:24:45.270
On the right are controls for the kind
of traffic that's going to be generated,

00:24:45.580 --> 00:24:50.690
and selections for address ranges,
and speeds, and packet types, and so on.

00:25:02.120 --> 00:25:06.400
Okay,
so I'm going to press the run button.

00:25:06.400 --> 00:25:09.840
And Busy Bus gives a small synopsis down
there in the bottom of what it's doing.

00:25:09.840 --> 00:25:12.720
It's sending various
different kinds of packets.

00:25:12.720 --> 00:25:17.030
To really see what's going on, though,
we should connect FireBook.

00:25:18.790 --> 00:25:21.570
So let's switch over to
demo one on the display,

00:25:21.620 --> 00:25:23.880
and FireBuG's still running there.

00:25:26.300 --> 00:25:28.460
Here you can see what Busy
Bus is really doing on the bus.

00:25:28.460 --> 00:25:30.500
I left the color on deliberately.

00:25:30.500 --> 00:25:33.100
You can see it's sending
quite a variety of packets.

00:25:33.120 --> 00:25:36.870
In fact, it's doing so with ever
increasing intensity.

00:25:37.120 --> 00:25:42.680
Busy Bus ramps up and down over
time to try to create the most

00:25:42.680 --> 00:25:42.680
interesting mixed traffic on the bus.

00:25:43.130 --> 00:25:45.530
Now while you're watching in FireBUG,
I'm going to turn off some

00:25:45.530 --> 00:25:49.220
of Busy Bus's options,
and you'll see that the

00:25:49.220 --> 00:25:51.190
colors start to decrease.

00:25:52.550 --> 00:25:56.230
Okay, I've turned off everything
except quadlet read requests.

00:25:56.360 --> 00:26:00.570
So now the display is all these pale
yellow packets for quadlet reads heading

00:26:00.570 --> 00:26:02.800
out to random addresses on the bus.

00:26:03.140 --> 00:26:06.720
But you can see there's a few
bright yellow packets in there.

00:26:06.750 --> 00:26:09.190
This demonstrates how the color
feature can be really useful.

00:26:09.200 --> 00:26:12.880
Those might be quite hard to
see without being colorized.

00:26:13.000 --> 00:26:14.260
So what's going on?

00:26:14.340 --> 00:26:17.690
Let's actually stop the
test and take a look.

00:26:19.430 --> 00:26:22.200
Okay, there's one.

00:26:22.210 --> 00:26:24.640
I left the camera connected.

00:26:24.650 --> 00:26:27.610
Busy Bus sends requests
to random addresses,

00:26:27.730 --> 00:26:30.790
and from time to time it
manages to hit the camera as

00:26:30.790 --> 00:26:33.090
its destination with this read.

00:26:33.300 --> 00:26:36.180
The read goes into a
48-bit address space,

00:26:36.270 --> 00:26:38.340
which is also randomly chosen.

00:26:38.340 --> 00:26:40.530
The camera has a lot of registers,
but it doesn't have 2

00:26:40.540 --> 00:26:41.730
to the 48 registers.

00:26:41.760 --> 00:26:44.590
So most packets won't make
any sense to the camera.

00:26:44.590 --> 00:26:47.830
And in FireBUG,
you probably can't read it, it says,

00:26:48.200 --> 00:26:49.520
response address error.

00:26:49.520 --> 00:26:52.830
The camera responded to a packet,
and the response means,

00:26:52.830 --> 00:26:56.490
I understand you're talking to me,
I have no idea what you want.

00:26:56.530 --> 00:26:58.320
FireBUG shows that.

00:26:58.520 --> 00:27:03.020
If that happened when running iChat,
that might be a good clue that

00:27:03.020 --> 00:27:04.500
something's wrong with this camera.

00:27:04.500 --> 00:27:07.360
Here, in the case of BusyBus,
we sent it a random request.

00:27:07.390 --> 00:27:09.770
It's not surprising
it couldn't handle it.

00:27:14.950 --> 00:27:18.670
Maybe we want to stress the
camera and see how well it

00:27:18.670 --> 00:27:20.400
can deal with these things.

00:27:20.400 --> 00:27:26.190
Let's switch back to demo two
and I'll show you how to do that.

00:27:28.020 --> 00:27:33.380
I'm going to tell Busy Bus to send
packets only at the 200 megabit rate,

00:27:33.380 --> 00:27:37.020
and I'm going to narrow down
the range in which it's sending.

00:27:37.100 --> 00:27:40.500
The camera happens to
be node 3 at the moment,

00:27:40.600 --> 00:27:44.380
so we'll tell it to send all packets
from a range of low of 3 to high of 3,

00:27:44.380 --> 00:27:45.700
meaning only 3.

00:27:45.700 --> 00:27:50.960
And we'll narrow down the destination
address from an almost 48-bit

00:27:50.960 --> 00:27:53.800
range down to a single address.

00:27:57.100 --> 00:28:02.950
This address is the high 32 bits
of the serial number in the camera.

00:28:07.300 --> 00:28:09.100
Okay,
so let's switch back to demo one and

00:28:09.100 --> 00:28:12.240
we'll see what's happening in FireBUG.

00:28:12.240 --> 00:28:14.940
Now you can see every packet's
going to the camera and the camera

00:28:14.950 --> 00:28:18.440
is responding to every packet,
because I've narrowed the range down.

00:28:18.440 --> 00:28:20.820
You can also see that
every response is the same,

00:28:20.820 --> 00:28:26.750
001124FF, which is the high 32 bits of
the camera's serial number.

00:28:28.700 --> 00:28:34.580
As this test runs,
as Busy Bus steps up the

00:28:34.580 --> 00:28:34.580
intensity of the test,

00:28:35.420 --> 00:28:36.650
Well, the camera's doing great today.

00:28:36.660 --> 00:28:39.610
Usually the camera falls behind
and starts responding to only some

00:28:39.780 --> 00:28:41.840
of the requests that you send it.

00:28:41.840 --> 00:28:44.290
Today it's having a good day.

00:28:44.810 --> 00:28:48.200
This is a technique that you
can use to stress your device.

00:28:48.210 --> 00:28:50.810
Maybe your customers aren't normally
going to hammer your device with

00:28:50.810 --> 00:28:53.570
this many incessant requests,
but you can adjust Busy Bus until

00:28:53.580 --> 00:28:56.280
you find the point where your
device starts to struggle.

00:28:56.280 --> 00:28:59.870
And then when you know what that is,
you can compare it to your expected user

00:28:59.870 --> 00:29:02.020
scenario and find out how close you are.

00:29:02.020 --> 00:29:03.880
Are you really running at
the edge of your limits,

00:29:03.890 --> 00:29:05.440
or do you have lots of margin to spare?

00:29:06.580 --> 00:29:09.890
So it's a good tool for exploring
what your device does in both

00:29:10.170 --> 00:29:13.610
normal and stressful situations,
and finding where the

00:29:13.900 --> 00:29:15.640
boundary between those is.

00:29:17.950 --> 00:29:19.150
Okay, so that's Busy Bus.

00:29:19.250 --> 00:29:22.240
Let's go back to the podium machine.

00:29:32.290 --> 00:29:33.960
Next up is FireCracker.

00:29:33.970 --> 00:29:36.360
If you've got the SDK ready
and you've found FireCracker,

00:29:36.360 --> 00:29:37.570
this one's completely safe.

00:29:37.620 --> 00:29:41.790
It cannot crash your machine,
so go ahead and open it up.

00:29:41.790 --> 00:29:41.790
I promise.

00:29:42.030 --> 00:29:44.920
FireCracker is a
configuration ROM viewer.

00:29:44.950 --> 00:29:46.130
It's like the P-list viewer.

00:29:46.190 --> 00:29:49.900
It's a specialized viewer for
specialized kind of information.

00:29:49.900 --> 00:29:54.670
Every FireWire device has a configuration
ROM that says what that device does.

00:29:54.810 --> 00:29:59.880
It says what protocols it speaks,
like it speaks SPP2 or AVC.

00:30:00.190 --> 00:30:03.310
When you plug in a new FireWire device,
the first thing we do is look

00:30:03.310 --> 00:30:05.550
at the configuration ROM to
try to figure out what driver

00:30:05.550 --> 00:30:07.040
should we load for your device.

00:30:07.040 --> 00:30:09.040
And when you're on day
one with a new device,

00:30:09.040 --> 00:30:11.430
that's often the first
problem people run into is,

00:30:11.450 --> 00:30:13.800
the Mac doesn't seem
to recognize my device.

00:30:13.800 --> 00:30:17.520
Well, use FireCracker to take a look at
your configuration ROM and find

00:30:17.670 --> 00:30:19.660
out what we think your device is.

00:30:19.660 --> 00:30:22.390
This is a good starting point to see if
your ROM makes any sense and to see if

00:30:22.410 --> 00:30:24.260
it's something we're going to understand.

00:30:25.900 --> 00:30:29.810
FireCracker uses normal user space APIs.

00:30:29.850 --> 00:30:31.650
It does not touch the
FireWire hardware directly.

00:30:31.650 --> 00:30:32.970
It's completely safe.

00:30:33.000 --> 00:30:35.890
Even if your device isn't
having any problems,

00:30:35.890 --> 00:30:39.300
please try it out with FireCracker
to see if FireCracker has comments

00:30:39.300 --> 00:30:41.960
about your ROM that might represent
problems you'll run into in the future.

00:30:41.960 --> 00:30:44.170
So let's look at a demo of FireCracker.

00:30:44.180 --> 00:30:49.820
And that's going to be on demo one.

00:30:53.630 --> 00:30:56.880
So I'll open up FireCracker.

00:30:56.880 --> 00:30:59.250
And I left several things on the bus,
and the first one it found

00:30:59.370 --> 00:31:01.870
is a hub that didn't respond,
so it says timeout.

00:31:01.900 --> 00:31:04.790
I will switch that
over to something else.

00:31:05.380 --> 00:31:08.840
Okay, now FireCracker is
looking at the Mac itself.

00:31:08.920 --> 00:31:11.580
This is the configuration ROM that
the Mac is publishing to any

00:31:11.580 --> 00:31:13.280
other device that wants to look.

00:31:13.280 --> 00:31:16.810
And so you can see,
if your eyes are good,

00:31:16.940 --> 00:31:20.060
that the config ROM says
it's a Macintosh,

00:31:20.060 --> 00:31:24.690
it's made by Apple Computer,
it's got various subunits.

00:31:25.520 --> 00:31:26.730
Here's the bus information block.

00:31:26.740 --> 00:31:27.630
Every device has this.

00:31:27.660 --> 00:31:29.570
That's where the serial number is.

00:31:29.650 --> 00:31:30.640
Here's the root directory.

00:31:30.640 --> 00:31:31.500
This says it's a Mac.

00:31:31.600 --> 00:31:33.120
It's made by Apple.

00:31:33.200 --> 00:31:34.940
And below that are unit directories.

00:31:34.940 --> 00:31:38.880
For example, on this Mac there's two,
because it's running Tiger.

00:31:38.920 --> 00:31:42.880
These two unit directories indicate that
the Mac supports the internet protocol,

00:31:42.980 --> 00:31:44.120
IPv4 and IPv6.

00:31:44.120 --> 00:31:49.450
And FireCracker knows what they are,
so in the lower right you can see

00:31:49.570 --> 00:31:51.570
it's decoded that and even called it
out in bold to get your attention.

00:31:56.300 --> 00:32:00.120
FireCracker has three ways
of looking at config ROMs.

00:32:00.120 --> 00:32:03.340
The first way, what we're doing here,
is we're sending quadlet reads to a

00:32:03.340 --> 00:32:04.990
device just like the family would.

00:32:05.000 --> 00:32:09.130
And we read the ROM a quadlet at a time,
hierarchically, and parse it out.

00:32:09.130 --> 00:32:11.160
That should work for any device.

00:32:11.160 --> 00:32:13.600
But the family already does that,
and it puts all that

00:32:13.740 --> 00:32:14.980
information in the I.O.

00:32:14.990 --> 00:32:15.700
registry.

00:32:16.340 --> 00:32:19.490
So another thing we can do is
view config ROMs from the I.O.

00:32:19.490 --> 00:32:20.220
registry.

00:32:20.220 --> 00:32:22.410
This should give you the same answer.

00:32:22.450 --> 00:32:25.990
If they don't, it's a good sign that
either you or we have a bug.

00:32:27.360 --> 00:32:29.980
So now we're looking at the
Mac through the I/O registry.

00:32:29.980 --> 00:32:32.180
This generates no traffic
at all on the FireWire bus.

00:32:32.180 --> 00:32:35.720
We're just looking over the shoulder of
the FireWire family to see what it sees.

00:32:35.880 --> 00:32:40.080
And here, fortunately,
we saw the same thing we were expecting.

00:32:40.110 --> 00:32:42.970
The third choice is to decode a file.

00:32:44.550 --> 00:32:47.450
If you're making a new FireWire device,
you probably have the config

00:32:47.450 --> 00:32:50.380
ROM in a .c file somewhere and
you flash it into the device.

00:32:50.600 --> 00:32:53.380
Well, if you're doing a trial and error
process trying to get something

00:32:53.380 --> 00:32:55.830
that the Mac can understand,
this may be time consuming.

00:32:55.950 --> 00:32:58.580
Flashing a device may involve
plugging and unplugging lots

00:32:58.650 --> 00:32:59.980
of special debug cables.

00:33:00.050 --> 00:33:04.210
Just take your file and put
it in FireCracker and see

00:33:04.210 --> 00:33:04.210
if we can make sense of it.

00:33:04.400 --> 00:33:07.900
So for example,
I have a simple config ROM here

00:33:07.900 --> 00:33:11.920
just expressed as a static and
C as a bunch of hex quadlets.

00:33:11.920 --> 00:33:14.660
I'll take that file and
drag it onto FireCracker.

00:33:14.720 --> 00:33:18.990
FireCracker will pick out the quadlets,
decode those as a config ROM.

00:33:22.810 --> 00:33:25.890
Here we can see FireCracker actually
found something to comment on.

00:33:26.250 --> 00:33:29.350
It says that the checksum is
not correct in this config ROM.

00:33:29.460 --> 00:33:31.990
Mac would actually let that slide,
but this might cause an

00:33:31.990 --> 00:33:34.890
interoperability problem in the future,
so this might be something

00:33:34.890 --> 00:33:36.200
you want to know about.

00:33:36.280 --> 00:33:39.500
Otherwise, we can see the config ROM has
a normal bus info block,

00:33:39.500 --> 00:33:41.820
a root directory,
and a single unit directory

00:33:41.850 --> 00:33:43.500
that says it's an AVC device.

00:33:43.620 --> 00:33:47.300
This is the TA standard AVC config
ROM as a starting point,

00:33:47.300 --> 00:33:50.380
so that's why I had it
lying around in a file.

00:33:52.910 --> 00:33:57.320
You can decode other kinds of
information as files in FireCracker.

00:33:57.320 --> 00:34:00.900
For example, when we get a trouble report
from someone who's not nearby,

00:34:00.900 --> 00:34:08.070
we often ask them to do this, to say,
"IoReg -lx w0" and send us this file,

00:34:08.150 --> 00:34:09.980
which can be fairly large.

00:34:10.040 --> 00:34:13.760
There's a lot of info in here,
but there's also a config ROM in here.

00:34:15.160 --> 00:34:19.980
I'll ask Terminal to find it by
knowing that it has device ROM in it.

00:34:20.210 --> 00:34:24.630
There it is.

00:34:24.630 --> 00:34:24.630
So we can just pick this.

00:34:24.630 --> 00:34:24.630
Oops.

00:34:28.750 --> 00:34:31.460
We can just take that config
ROM and drag that into FireCracker,

00:34:31.460 --> 00:34:35.160
and it will decode that.

00:34:36.600 --> 00:34:39.320
- This is actually the Mac's own
config ROM that was found in IRWedge,

00:34:39.320 --> 00:34:41.600
so it's the same one that you saw before.

00:34:41.640 --> 00:34:43.840
So we've tried to make this really easy,
convenient to use.

00:34:43.840 --> 00:34:47.300
You can plug devices in, decode them,
or just take it from text files.

00:34:47.340 --> 00:34:49.970
There's also some built-in config ROMs.

00:34:50.020 --> 00:34:53.580
So if you have it running on
your machine in front of you,

00:34:53.700 --> 00:35:18.600
[Transcript missing]

00:35:19.510 --> 00:35:22.270
Okay, that is FireCracker.

00:35:22.290 --> 00:35:26.200
So we'll go back to the podium.

00:35:35.340 --> 00:35:39.820
Next is FireWire Plug-O-Matic.

00:35:39.820 --> 00:35:43.370
One of the most challenging
things in a device is correctly

00:35:43.370 --> 00:35:46.940
hot plugging and unplugging,
and not crashing, or leaking memory,

00:35:46.940 --> 00:35:49.980
or failing to load,
or having a race condition.

00:35:50.060 --> 00:35:52.880
But sitting there and plugging
and unplugging a device

00:35:52.880 --> 00:35:56.300
can be kind of tedious,
and it also wears out your device.

00:35:56.300 --> 00:36:01.340
We have an application
that's a skeleton key tool,

00:36:01.340 --> 00:36:01.340
so this one could crash if you run it.

00:36:01.550 --> 00:36:04.360
It touches the hardware directly,
and it turns the PHY ports on

00:36:04.360 --> 00:36:07.770
and off to simulate plugging
and unplugging a device.

00:36:08.210 --> 00:36:10.060
It does not turn off the cable power.

00:36:10.060 --> 00:36:11.340
There's no way to do that in software.

00:36:11.340 --> 00:36:13.860
So it's not exactly the same
as plugging and unplugging,

00:36:14.020 --> 00:36:16.310
but from the Mac's point of view,
it's very close.

00:36:16.370 --> 00:36:18.010
The Mac sees the device come and go.

00:36:18.010 --> 00:36:22.050
The device, if it remains powered,
may not have quite the same experience.

00:36:22.090 --> 00:36:25.900
So let's do a quick demo of that
and see what you can do with that.

00:36:25.900 --> 00:36:29.980
And that's on demo two.

00:36:34.800 --> 00:36:37.400
Despite the fact that I'm
getting demo one ready over here.

00:36:37.400 --> 00:36:42.920
Okay, I'm going to run Plug-O-Matic.

00:36:44.970 --> 00:36:47.790
Like the other tools,
Plugomatic gives a summary of which

00:36:47.790 --> 00:36:49.200
FireWire interface you're using.

00:36:49.200 --> 00:36:51.430
So if you've added a
PCI card or a CardBus card,

00:36:51.440 --> 00:36:53.800
you can pick to use that one here.

00:36:53.950 --> 00:36:56.510
And a summary of the port status.

00:36:57.560 --> 00:37:00.650
Now I'm going to have to plug a few
things together to make this work.

00:37:00.690 --> 00:37:11.730
I'm going to use the EyeSight camera
and have it be plugged and unplugged

00:37:11.730 --> 00:37:11.730
from the other Mac so that we can see

00:37:11.900 --> 00:37:18.190
I chat reacting to the camera's
appearance and disappearance.

00:37:26.500 --> 00:37:28.130
I believe I've got it.

00:37:28.130 --> 00:37:29.060
Okay.

00:37:29.060 --> 00:37:33.600
Plug-o-matic says it's not ready to
run yet because it sees multiple things

00:37:33.600 --> 00:37:38.500
plugged in and it's not sure which port
it should be plugging and unplugging.

00:37:38.500 --> 00:37:40.570
So we'll just configure that.

00:37:41.500 --> 00:37:43.760
- We'll turn on expert mode.

00:37:43.760 --> 00:37:47.720
And we'll tell that it should
plug and unplug port one,

00:37:47.720 --> 00:37:51.220
'cause we can see on the left,
the port one has a connection at S400,

00:37:51.220 --> 00:37:53.130
so that's one of the active ports.

00:37:53.180 --> 00:37:57.300
Turn off a few checks here so
that it doesn't complain too much.

00:37:58.180 --> 00:38:16.590
: I'm going to click run,
and it immediately disabled port one,

00:38:16.590 --> 00:38:16.590
which had the effect of unplugging
this camera from the other Mac.

00:38:16.590 --> 00:38:16.590
After a period of time
it will re-enable it.

00:38:16.590 --> 00:38:16.590
Let's switch over to demo one
and we'll see what's going on.

00:38:17.570 --> 00:38:19.330
Here on demo one,
we're running iChat and it's

00:38:19.360 --> 00:38:21.080
getting live video from the camera.

00:38:21.260 --> 00:38:22.900
There, it stopped.

00:38:23.130 --> 00:38:25.240
The Windows says no camera.

00:38:25.240 --> 00:38:27.560
As far as the Mac is concerned,
the camera was unplugged.

00:38:27.680 --> 00:38:28.840
Now it's back again.

00:38:29.040 --> 00:38:30.840
Plug-o-matic can do this all day long.

00:38:30.840 --> 00:38:34.210
So you can see iChat's
doing just fine with this.

00:38:34.460 --> 00:38:37.430
But we might be leaking
memory after a few hours.

00:38:37.430 --> 00:38:39.080
Maybe it will crash for some reason.

00:38:39.130 --> 00:38:39.650
I hope not.

00:38:39.670 --> 00:38:41.720
But you should try
this with your devices.

00:38:41.720 --> 00:38:45.560
What could be more painless than to just
leave this running and go get lunch?

00:38:47.000 --> 00:38:51.100
So, it's another tool that allows you to
experiment with your FireWire devices,

00:38:51.350 --> 00:38:53.980
stress them out in ways you
might not have tried before,

00:38:54.030 --> 00:38:55.750
and see if they're really robust.

00:38:55.900 --> 00:39:00.210
Okay, let's go back to the podium.

00:39:10.100 --> 00:39:11.100
That's plug-o-matic.

00:39:11.100 --> 00:39:14.900
We're doing pretty well now for
these tools that I said might crash,

00:39:15.300 --> 00:39:15.840
right?

00:39:15.840 --> 00:39:17.100
What a segue.

00:39:17.100 --> 00:39:20.140
These tools, except for Firecracker,
are based on something

00:39:20.140 --> 00:39:21.740
called the skeleton key.

00:39:21.740 --> 00:39:25.100
It's an ability that allows an
application to push aside the

00:39:25.100 --> 00:39:28.430
FireWire services and touch
the FireWire hardware directly.

00:39:28.430 --> 00:39:29.980
Normally this is really bad.

00:39:29.980 --> 00:39:32.170
Remember what I said
about all the drivers,

00:39:32.210 --> 00:39:34.590
apps, and devices having to
play nice and share?

00:39:34.620 --> 00:39:36.460
This is the opposite of that.

00:39:36.520 --> 00:39:39.010
It pushes them all aside and takes over.

00:39:39.010 --> 00:39:39.720
Why?

00:39:39.720 --> 00:39:41.780
The family doesn't do
these kinds of things.

00:39:41.780 --> 00:39:43.380
The family doesn't turn off ports.

00:39:43.440 --> 00:39:45.780
The family doesn't send junk on the bus.

00:39:45.780 --> 00:39:48.120
The family doesn't snoop the bus.

00:39:48.120 --> 00:39:50.570
These things can be done most
easily if an app can just get

00:39:50.680 --> 00:39:52.180
control and do what it wants.

00:39:52.240 --> 00:39:57.180
That's enabled us to spin out lots and
lots of these useful tools quickly.

00:39:57.180 --> 00:39:59.220
This is powerful, but it's dangerous.

00:39:59.220 --> 00:40:01.640
It's like dropping a
running kernel into GDB,

00:40:01.640 --> 00:40:02.120
right?

00:40:02.120 --> 00:40:05.550
That's not something you'd do if
you hadn't saved two hours of work,

00:40:05.550 --> 00:40:10.200
but it's an incredibly useful technique
for debugging certain kernel problems.

00:40:10.200 --> 00:40:11.600
They have their strengths.

00:40:11.600 --> 00:40:12.860
This is not suitable for customers.

00:40:13.010 --> 00:40:16.420
Please don't direct customers
to do anything like this.

00:40:16.420 --> 00:40:17.680
This is for you as developers.

00:40:17.680 --> 00:40:21.180
As you can see, there's a lot of powerful
things you can do based on this.

00:40:23.440 --> 00:40:26.280
Generally speaking,
the tool wants to put the family

00:40:26.310 --> 00:40:29.320
aside because the tool just
can't coexist with the family.

00:40:29.370 --> 00:40:33.700
The family may be trying to scan the bus,
optimize the bus, load drivers.

00:40:33.830 --> 00:40:36.720
In many of these cases I had
a tool running on one Mac and

00:40:36.840 --> 00:40:40.260
FireWire running normally,
like iChat, on another Mac.

00:40:40.890 --> 00:40:42.640
If both Macs were trying
to talk to the camera,

00:40:42.640 --> 00:40:44.310
that's different from what
you're trying to test.

00:40:44.310 --> 00:40:47.130
So the tool puts it all aside,
the tool becomes very passive.

00:40:47.200 --> 00:40:51.640
So you probably want a dedicated
Mac or a dedicated PCI card

00:40:51.640 --> 00:40:53.910
in the Mac to run this tool.

00:40:55.040 --> 00:40:58.840
Another one, FireStarter,
uses the same decoding display as

00:40:58.840 --> 00:41:02.880
FireBug to show the bus topology,
but it can run on any Mac we sell today,

00:41:02.880 --> 00:41:04.360
so you don't need to
get special hardware.

00:41:04.360 --> 00:41:05.600
That's in the SDK.

00:41:05.600 --> 00:41:07.790
I'm not going to demo it here,
but you can come Thursday to

00:41:07.790 --> 00:41:09.100
our PlugFest and see it there.

00:41:09.100 --> 00:41:12.020
Hopefully you'll see lots of
well-behaved FireWire devices

00:41:12.020 --> 00:41:15.500
all coexisting on one bus,
and a big full display in FireStarter.

00:41:17.690 --> 00:41:21.360
First of all,
I mentioned the PHY earlier.

00:41:21.360 --> 00:41:28.590
What exactly is the PHY?

00:41:28.590 --> 00:41:28.600
I talk about this every year,
I've never managed to get this slide in,

00:41:28.600 --> 00:41:28.600
finally it's here so I can explain this.

00:41:28.850 --> 00:41:31.930
A FireWire device like the
Mac has its FireWire separated

00:41:32.060 --> 00:41:34.680
into two parts in the interface.

00:41:34.680 --> 00:41:36.400
On the left we have the link.

00:41:36.520 --> 00:41:38.140
The link is the bigger of the two.

00:41:38.180 --> 00:41:39.000
It's more complicated.

00:41:39.000 --> 00:41:41.670
The link is what sends
and receives packets.

00:41:41.740 --> 00:41:44.580
The link knows what a packet means.

00:41:44.600 --> 00:41:47.440
It has the host bus interface,
the PCI controller,

00:41:47.470 --> 00:41:50.320
it's got DMA and FIFOs for
moving packets around.

00:41:50.320 --> 00:41:52.140
The link understands addresses.

00:41:52.140 --> 00:41:54.880
When you send a packet,
a request to a config ROM, the link says,

00:41:54.890 --> 00:41:57.040
oh, I know what that is,
I know how to respond.

00:41:57.040 --> 00:41:59.470
The link does packet checksums.

00:41:59.520 --> 00:42:02.470
The link acknowledges packets,
like response address

00:42:02.640 --> 00:42:04.010
error that we saw earlier.

00:42:04.010 --> 00:42:06.760
It said,
I don't know what you're talking about,

00:42:06.870 --> 00:42:08.590
even though I know it's for me.

00:42:08.590 --> 00:42:08.600
That was the link.

00:42:08.870 --> 00:42:10.790
The link is where the
notion of isochronous is.

00:42:10.830 --> 00:42:12.820
The link has a timer,
the link keeps track of time,

00:42:12.820 --> 00:42:15.340
it says now is the time to
send a real-time packet,

00:42:15.340 --> 00:42:16.370
so iSight, send your packet.

00:42:18.060 --> 00:42:20.100
The link is primarily software driven.

00:42:20.160 --> 00:42:22.000
It's not going to do much
until software comes along,

00:42:22.000 --> 00:42:25.700
turns it on, configures it,
gives it some programs to execute.

00:42:25.770 --> 00:42:28.450
That being done,
the link is somewhat autonomous,

00:42:28.450 --> 00:42:30.670
but software still has to get it going.

00:42:30.800 --> 00:42:33.130
In comparison,
on the right you have the PHY.

00:42:33.200 --> 00:42:35.180
It's the smaller of the two.

00:42:35.260 --> 00:42:39.640
The PHY is where you
actually have serial bus.

00:42:39.700 --> 00:42:44.140
The PHY has the clock,
say 400 megahertz on FireWire 400.

00:42:44.230 --> 00:42:46.590
The PHY serializes and
deserializes packets.

00:42:46.610 --> 00:42:50.200
It has a little private interface to
the link called the PHY link interface.

00:42:50.350 --> 00:42:51.460
That's a parallel interface.

00:42:51.460 --> 00:42:56.810
As packets come down from the link,
the PHY streams it out bit by bit,

00:42:56.810 --> 00:42:58.600
or as they come back in,
the PHY reverses that.

00:42:59.080 --> 00:43:01.800
The PHY is where the low voltage
differential signaling is.

00:43:01.800 --> 00:43:06.420
The PHY actually wiggles the wires up and
down to say this is a 1 and this is a 0.

00:43:07.590 --> 00:43:10.560
The PHY performs arbitration.

00:43:10.630 --> 00:43:12.990
When the link wants to
send a packet on the bus,

00:43:12.990 --> 00:43:15.340
it taps the PHY and says,
"Could I please send a packet?"

00:43:15.460 --> 00:43:19.260
The PHYs all talk amongst themselves
and decide who gets to send the packet.

00:43:19.260 --> 00:43:21.910
When it's finally our turn,
the PHY tells the link, "Okay, go ahead,

00:43:21.920 --> 00:43:22.740
send your packet.

00:43:22.740 --> 00:43:25.480
Everyone's listening.

00:43:25.480 --> 00:43:25.480
Now's a good time."

00:43:25.930 --> 00:43:27.660
And the PHY acts as a repeater.

00:43:27.720 --> 00:43:30.940
A packet comes in on port 1,
the PHY will repeat that packet out

00:43:30.940 --> 00:43:34.040
port 2 and port 3 in most cases,
and all the way to the address

00:43:34.040 --> 00:43:35.480
and decide if it cares.

00:43:35.560 --> 00:43:36.610
The PHY just repeats.

00:43:36.660 --> 00:43:41.060
There's no routing, no switching,
no buffering,

00:43:41.060 --> 00:43:41.060
things just flow right through the PHY.

00:43:42.070 --> 00:43:44.780
These two can be integrated
into one piece of silicon,

00:43:44.780 --> 00:43:48.910
like is done in the EyeSight camera,
but they're still separate functions.

00:43:49.480 --> 00:43:51.800
By the way, in a hub,
you'd have only the PHY.

00:43:51.840 --> 00:43:54.030
So any device will have
a link except a hub.

00:43:54.070 --> 00:43:55.420
The hub just has the PHY,
because all it has to

00:43:55.430 --> 00:43:56.260
do is repeat packets.

00:43:56.310 --> 00:43:58.350
There's no one there to talk to.

00:43:59.000 --> 00:44:02.040
The PHY is almost completely autonomous
because what it's doing is basic.

00:44:02.130 --> 00:44:04.180
It just repeats stuff and arbitrates.

00:44:04.380 --> 00:44:07.510
Still, it has a few registers,
it can be configured,

00:44:07.540 --> 00:44:10.340
and the registers also give
some clue of what it's doing.

00:44:10.480 --> 00:44:13.360
So, for debugging and bring up,
you may want to see

00:44:13.360 --> 00:44:14.900
what's inside the PHY.

00:44:14.900 --> 00:44:16.850
So we have a tool for that, PHYTool.

00:44:16.920 --> 00:44:22.710
Just like FireCracker is a
specialized browser for config ROMs,

00:44:22.760 --> 00:44:25.330
PHYTool is a specialized browser
and editor for PHY registers.

00:44:25.750 --> 00:44:28.640
This is most useful for
debugging port connections.

00:44:28.640 --> 00:44:32.140
If you plug in a device,
and not only do we not load your driver,

00:44:32.140 --> 00:44:34.820
but FireCracker says,
I don't even see the device,

00:44:34.820 --> 00:44:38.030
you may want to go to PHYTool to
try to figure out what's going on.

00:44:38.100 --> 00:44:41.350
And it has a built-in copy
of the 1394 specification for

00:44:41.350 --> 00:44:44.290
these PHY register fields,
which can be pretty cryptic to

00:44:44.370 --> 00:44:47.880
help you figure out what you're
doing and what you're clicking on.

00:44:47.880 --> 00:44:49.980
So, let's take a look at that.

00:44:49.980 --> 00:44:54.190
And that's going to be on demo two.

00:45:05.130 --> 00:45:08.050
When I run PHYTool, you can see it looks
similar to the others.

00:45:08.060 --> 00:45:10.860
On the left,
there's a summary of what controller,

00:45:10.860 --> 00:45:13.100
PHY, and ports we're looking at.

00:45:13.120 --> 00:45:15.620
And on the right,
there's a matrix of registers that

00:45:15.620 --> 00:45:18.800
looks just like what's in the spec,
including these binary numbers.

00:45:18.970 --> 00:45:21.050
If you don't like those,
just click on them,

00:45:21.050 --> 00:45:22.660
they'll change into decimal.

00:45:22.680 --> 00:45:25.260
Each register in the PHY is 8 bits wide.

00:45:25.480 --> 00:45:27.450
Some of them are read-only,
like our node ID,

00:45:27.460 --> 00:45:30.340
which is called physical ID in the spec.

00:45:30.370 --> 00:45:32.550
We're node 0 right now.

00:45:32.890 --> 00:45:33.800
We're not the root.

00:45:33.800 --> 00:45:34.800
The root bit is zero.

00:45:34.920 --> 00:45:36.480
But PS is one.

00:45:36.530 --> 00:45:39.440
I don't remember what PS is,
but I'll move the mouse over it.

00:45:39.510 --> 00:45:42.710
And then at the bottom in the panel
we see it says cable power active.

00:45:42.710 --> 00:45:45.460
So the PHY is telling us that
as far as it's concerned,

00:45:45.490 --> 00:45:48.080
the cable power is okay
on FireWire right now.

00:45:49.700 --> 00:45:51.600
Some fields are writable.

00:45:51.600 --> 00:45:54.420
For example, the IBR causes a bus reset.

00:45:54.420 --> 00:45:58.080
Oh, this is a good demo.

00:45:58.080 --> 00:46:00.900
This PHYTool is still connected to
this Mac where the family is running.

00:46:00.900 --> 00:46:05.650
You can see the second field in
register one here is gap count.

00:46:05.670 --> 00:46:07.380
That's a tuning parameter for the bus.

00:46:07.380 --> 00:46:10.730
Every time there's a bus reset,
that goes back to 63 as a safety

00:46:11.050 --> 00:46:13.230
net in case new devices were added.

00:46:13.230 --> 00:46:16.200
And then the Mac will notice
that it needs to be tuned,

00:46:16.200 --> 00:46:17.740
and the Mac will tune it.

00:46:17.800 --> 00:46:19.680
So I can click on IBR to
cause a bus reset.

00:46:19.700 --> 00:46:21.690
You see it changes to 63.

00:46:21.690 --> 00:46:25.900
Within a moment it changes
back to 7 as the Mac tidies up.

00:46:25.900 --> 00:46:27.840
We could do that all day long,
and the Mac's going to

00:46:27.840 --> 00:46:29.080
keep tuning it back to 7.

00:46:31.890 --> 00:46:34.620
So you can see it's very hands-on.

00:46:34.620 --> 00:46:36.210
This is a good way to
learn about the PHY.

00:46:36.260 --> 00:46:38.050
Just open this up,
move the mouse over each one,

00:46:38.050 --> 00:46:39.400
find out what these things do.

00:46:39.400 --> 00:46:41.290
It's also a good way to debug.

00:46:41.430 --> 00:46:44.940
There's nothing you can do in here
that's going to damage anything.

00:46:44.940 --> 00:46:47.860
You might get your device disconnected,
but you cannot harm the

00:46:47.910 --> 00:46:50.620
PHY by poking around,
so feel free, give it a try.

00:46:50.620 --> 00:46:52.540
This is a skeleton key tool.

00:46:52.540 --> 00:46:55.260
You can run it on your
iBook or PowerBook.

00:46:55.290 --> 00:46:57.980
If there's a remote chance it'll crash.

00:46:57.980 --> 00:46:59.630
Again, I think we're five for five now.

00:46:59.630 --> 00:46:59.630
Doing well.

00:47:00.120 --> 00:47:05.470
So let's do an example of what you might
use this for to debug a real problem.

00:47:07.550 --> 00:47:12.250
So I've been having some trouble
with my FireWire disk drive.

00:47:12.260 --> 00:47:14.980
I plug it in and it
doesn't seem to show up.

00:47:16.130 --> 00:47:17.190
Let's see if we can figure that out.

00:47:17.290 --> 00:47:17.920
Here it is.

00:47:18.010 --> 00:47:20.910
This is a fake demo,
so no slight to the folks who

00:47:20.960 --> 00:47:22.870
make this drive if they're here.

00:47:23.730 --> 00:47:27.590
PHYTool's showing on the left,
no ports are connected.

00:47:27.680 --> 00:47:31.590
If we look under port summary over here,
port zero, one, and two,

00:47:31.600 --> 00:47:33.830
they all say child,
but that's just a default.

00:47:33.940 --> 00:47:36.660
They don't say connect,
so nothing's plugged in.

00:47:36.930 --> 00:47:39.660
When I plug the cable
into the hard drive,

00:47:41.750 --> 00:47:46.460
We see port zero now says child, connect,
S400, DS, and fault.

00:47:46.670 --> 00:47:48.670
I hope you can read this.

00:47:49.390 --> 00:47:52.010
That fault there is a good
indication of what's gone wrong.

00:47:52.010 --> 00:47:55.220
A PHY to PHY communication
problem has happened.

00:47:55.230 --> 00:47:58.940
This has nothing to do with configrom,
or drivers, or Mac OS X, or anything.

00:47:58.940 --> 00:48:01.310
The PHYs just are not
talking to each other.

00:48:01.320 --> 00:48:04.350
So I get out my oscilloscope,
I poke around, I look at the spec,

00:48:04.350 --> 00:48:07.580
I figure out why they're not talking,
I eventually find out that the

00:48:07.580 --> 00:48:09.450
problem is the drive is turned off.

00:48:09.530 --> 00:48:12.790
So we'll turn the drive on,
and problem solved.

00:48:12.880 --> 00:48:14.050
That's the first trick in the book.

00:48:14.890 --> 00:48:19.870
Fault has gone away, PHYTOOL says child,
connect, receive OK, S400, DS.

00:48:20.010 --> 00:48:22.650
We have a data strobe, FireWire 400,
connection to the drive,

00:48:22.650 --> 00:48:23.890
and it's perfectly stable.

00:48:23.900 --> 00:48:27.470
So, slightly contrived example,
but very accessible,

00:48:27.600 --> 00:48:31.980
PHYTOOL is your first line of
inquiry into PHY connection problems.

00:48:32.170 --> 00:48:34.450
Now we can do a little more with PHYTool.

00:48:34.560 --> 00:48:36.940
PHYTool here is showing you
the PHY inside this Mac,

00:48:37.050 --> 00:48:38.510
which is a G5 tower.

00:48:38.660 --> 00:48:40.050
And so it has a three port PHY.

00:48:40.060 --> 00:48:45.020
We can see here it says it's bilingual,
three ports up to S800.

00:48:45.900 --> 00:48:51.380
We can also view the
PHY registers in a remote device,

00:48:51.380 --> 00:48:52.930
like the hard drive.

00:48:52.980 --> 00:48:57.850
The PHYs can exchange a very
primitive packet to access registers.

00:48:57.880 --> 00:49:02.020
So from this menu,
I can see there's two PHYs on the bus.

00:49:02.020 --> 00:49:06.660
This is node 0,
which is a TI-A 2-port PHY, and node 1,

00:49:06.690 --> 00:49:08.620
which is a TI-B 3-port PHY.

00:49:08.640 --> 00:49:09.880
That must be the MAC.

00:49:09.940 --> 00:49:12.900
It's also noted over here,
the MAC's node ID is 1.

00:49:12.900 --> 00:49:15.280
So the drive must be node 0.

00:49:15.340 --> 00:49:16.020
So let's pick that.

00:49:16.040 --> 00:49:18.360
Now we're looking inside the drive.

00:49:18.480 --> 00:49:20.830
And a variety of things changed.

00:49:20.840 --> 00:49:23.920
The drive has two ports
rather than three.

00:49:25.490 --> 00:49:29.270
The drive is 1394A,
so its PHY is missing quite a number of

00:49:29.270 --> 00:49:31.140
registers down here that were in the Mac.

00:49:31.200 --> 00:49:32.390
Let's go back to the Mac.

00:49:32.390 --> 00:49:36.790
See a bunch of additional registers
appeared for FireWire 800.

00:49:37.430 --> 00:49:39.640
Looking in the drive, they're not there.

00:49:39.640 --> 00:49:42.280
We can see that the PHY in the
drive was made by Texas Instruments.

00:49:42.280 --> 00:49:44.860
We can see that it
claims to be two ports,

00:49:44.860 --> 00:49:46.000
which is good.

00:49:46.000 --> 00:49:48.830
And we can actually see that
we're plugged into port one.

00:49:48.850 --> 00:49:52.930
Most of the time you wouldn't care,
but these aren't numbered.

00:49:52.930 --> 00:49:55.350
I didn't know which one was port one,
now I do.

00:49:55.350 --> 00:49:56.620
That may be helpful.

00:49:58.390 --> 00:50:00.410
So you can see PHYTool gives
you some very low level,

00:50:00.450 --> 00:50:05.260
but very easy, access to some stuff that
otherwise is quite mysterious.

00:50:05.360 --> 00:50:08.620
So give PHYTool a try,
plug in your device, see if you can find

00:50:08.620 --> 00:50:10.280
out whose PHY is in it.

00:50:10.390 --> 00:50:13.770
Some really old devices like
camcorters don't do this protocol,

00:50:13.800 --> 00:50:18.300
so they may not answer,
but many modern devices will.

00:50:18.300 --> 00:50:22.360
Okay, that's PHYTool,
so let's go back to the podium.

00:50:29.290 --> 00:50:32.860
Okay, lots of things that you can do
with FireWire to debug FireWire

00:50:33.030 --> 00:50:35.660
to try to get your device working.

00:50:36.360 --> 00:50:40.240
Here's some things you can do even
if you don't care about FireWire.

00:50:40.500 --> 00:50:43.700
If you're writing an audio driver,
if you're writing a USB driver,

00:50:43.700 --> 00:50:47.780
if you're writing anything in the kernel,
you can use FireWire to help debug it.

00:50:49.800 --> 00:50:52.440
The simplest is FireWire K printf.

00:50:52.470 --> 00:50:54.990
If you've ever debugged in the kernel,
this is the oldest debugging

00:50:54.990 --> 00:50:58.240
technique in the book,
you use printf to say what you're doing.

00:50:58.240 --> 00:51:02.080
You keep doing it until it breaks,
and then you look and see what happened.

00:51:03.060 --> 00:51:08.000
Traditionally, printf in the kernel,
kprintf, goes to the console.

00:51:08.000 --> 00:51:11.300
That could be a terminal window,
that could be the screen itself,

00:51:11.330 --> 00:51:14.650
it could be a serial port,
or it could be a FireWire port.

00:51:14.650 --> 00:51:18.480
Good luck finding a serial
port on one of our Macs today.

00:51:19.060 --> 00:51:24.380
FireWire kprintf, you install a KEXT,
and you set a boot arg,

00:51:24.470 --> 00:51:27.080
and all kprintfs go to
FireWire automatically.

00:51:27.080 --> 00:51:29.170
You don't have to recode anything.

00:51:29.330 --> 00:51:34.670
FireWire kprintf, you install a KEXT,
and you set a boot arg,

00:51:34.670 --> 00:51:37.280
and all kprintfs go to
FireWire automatically.

00:51:37.280 --> 00:51:39.380
You don't have to recode anything.

00:51:52.790 --> 00:51:55.690
So it's not going to cause real big
timing differences in your driver.

00:51:55.820 --> 00:51:59.090
Hopefully it won't mess things
up and make your problem go away.

00:51:59.720 --> 00:52:02.510
For the first time now,
this is available in SDK 20.

00:52:02.640 --> 00:52:05.490
The instructions are a little cryptic,
but if you're in the kernel,

00:52:05.560 --> 00:52:07.790
you should be able to figure them out.

00:52:09.880 --> 00:52:11.800
Next is FireLog.

00:52:11.800 --> 00:52:13.780
Sort of a big brother to kprintf.

00:52:13.780 --> 00:52:16.280
It's actually quite different though.

00:52:16.910 --> 00:52:18.330
It also works like a serial port.

00:52:18.330 --> 00:52:23.930
You can print messages and they will come
out and you'll view them on another Mac.

00:52:23.930 --> 00:52:23.930
But,

00:52:24.500 --> 00:52:28.580
It doesn't push the messages out,
they get pulled out by the other Mac.

00:52:28.670 --> 00:52:31.390
So in fact, it coexists with FireWire.

00:52:31.480 --> 00:52:34.550
If you use FireWire kprintf,
you can use that to debug any

00:52:34.550 --> 00:52:38.610
kernel driver except FireWire,
because we get rid of FireWire to use it.

00:52:38.930 --> 00:52:41.430
FireLog can work with FireWire,
and we use it all the time,

00:52:41.430 --> 00:52:43.340
and it can work with anything else too.

00:52:43.340 --> 00:52:47.270
Let's walk through how that works.

00:52:47.280 --> 00:52:50.250
Suppose your driver's running
in the kernel on this G5 tower.

00:52:50.510 --> 00:52:54.760
FireLog provides a buffer where
you can print messages to.

00:52:54.850 --> 00:52:59.160
You run a viewer on another Mac and
connect the two by FireWire.

00:52:59.730 --> 00:53:02.720
As your driver runs and prints
messages into the buffer,

00:53:02.720 --> 00:53:07.040
this is even more lightweight
than FireWire kprintf.

00:53:07.180 --> 00:53:08.960
This is just a memory copy.

00:53:08.960 --> 00:53:12.280
You just copy a few bytes
into a buffer and continue.

00:53:12.280 --> 00:53:15.310
You didn't take a context switch,
you didn't program any hardware,

00:53:15.310 --> 00:53:17.870
you didn't take any interrupts,
you didn't push anything

00:53:17.870 --> 00:53:18.840
out of the cache.

00:53:18.840 --> 00:53:22.540
This is ultra-lightweight as far as
impacting what your driver is doing.

00:53:23.220 --> 00:53:26.030
The other Mac will come in on
a polling basis and use the

00:53:26.030 --> 00:53:31.080
physical DMA to pull your message
out and show it in the viewer.

00:53:32.120 --> 00:53:34.860
There's the messages in the viewer,
and here's the physical

00:53:34.870 --> 00:53:36.600
DMA pulling them out.

00:53:36.600 --> 00:53:39.440
The link,
the open HCI link that we use in the Mac,

00:53:39.690 --> 00:53:42.480
supports this remote memory
access with no software.

00:53:42.510 --> 00:53:49.210
So there's no interrupts,
nothing's happening that the G5 knows

00:53:49.210 --> 00:53:49.210
about as the messages are pulled out.

00:53:49.380 --> 00:53:53.440
This means your driver could
run out of control and panic.

00:53:53.520 --> 00:53:55.500
I know you'd never do this.

00:53:56.380 --> 00:53:57.800
And maybe if you were
using a serial port,

00:53:57.800 --> 00:54:01.670
it would panic and kill the thing
before the messages all dribbled out.

00:54:02.100 --> 00:54:04.560
The physical DMA still
works after a panic.

00:54:04.560 --> 00:54:05.360
It's autonomous.

00:54:05.360 --> 00:54:06.810
There's no software to drive it.

00:54:06.810 --> 00:54:08.900
So that viewer,
even if you've logged megabytes

00:54:08.910 --> 00:54:11.560
and megabytes of stuff,
the viewer can patiently pull it

00:54:11.560 --> 00:54:14.690
all out and show you every last line
that you logged up to the last one,

00:54:14.720 --> 00:54:16.930
which maybe has a clue
for why you panicked.

00:54:17.220 --> 00:54:19.590
So that's why it's called panic proof.

00:54:20.780 --> 00:54:23.220
So this is also available in our SDK.

00:54:23.220 --> 00:54:26.260
If you install one of the
FireWire packages in there,

00:54:26.260 --> 00:54:28.370
it'll have FireLog supported.

00:54:31.130 --> 00:54:35.280
Another tool now available in
SDK is called FireWire MemoryView.

00:54:35.340 --> 00:54:38.900
It's very primitive,
but it's like the innards of FireLog.

00:54:39.250 --> 00:54:42.720
All you do is type in a
node number and a pointer,

00:54:42.720 --> 00:54:44.510
and it reaches into
that node over FireWire,

00:54:44.770 --> 00:54:48.660
pulls out the memory, and shows it in hex
with continuous refresh.

00:54:49.140 --> 00:54:50.540
It's completely passive.

00:54:50.540 --> 00:54:53.100
The node that you're doing this to is not
going to know that anything's happening.

00:54:53.100 --> 00:54:55.950
So if you know where to look,
it seems awfully simple,

00:54:55.950 --> 00:54:59.710
but we've used this already to debug
several problems where this turned

00:54:59.710 --> 00:55:01.920
out to be exactly the tool we needed.

00:55:01.920 --> 00:55:05.290
Once we could see in real time right in
front of us what the values were doing,

00:55:05.340 --> 00:55:07.170
the aha went off and problem solved.

00:55:08.390 --> 00:55:12.860
Memview is perfectly safe for
the host on which you run it.

00:55:12.980 --> 00:55:16.120
It uses the normal
FireWire user client API,

00:55:16.120 --> 00:55:18.310
so it's not skeleton key based.

00:55:18.420 --> 00:55:19.650
Nothing's going to go bad on the host.

00:55:19.690 --> 00:55:25.890
On the victim, you're reading from memory
addresses of your choice.

00:55:27.050 --> 00:55:29.530
- Normally that's safe,
but you can read from

00:55:29.570 --> 00:55:30.340
things that aren't memory.

00:55:30.340 --> 00:55:32.310
You can read from PCI registers.

00:55:32.340 --> 00:55:38.990
In the example here,
we're actually reading the FireWire

00:55:38.990 --> 00:55:38.990
controller registers from the other node,
because that's interesting to us.

00:55:39.320 --> 00:55:41.400
Some hardware devices have
registers where if you read

00:55:41.400 --> 00:55:42.720
them they have side effects.

00:55:42.720 --> 00:55:44.910
So you can trigger those
side effects with MemView,

00:55:44.920 --> 00:55:46.290
so you may need to be careful.

00:55:47.920 --> 00:55:51.920
And on a G5 that has the
Dart architecture to support 64 bits,

00:55:51.940 --> 00:55:55.240
some addresses don't exist.

00:55:55.240 --> 00:55:58.840
So if you try to read an address from
a G5 machine and it's not in the Dart,

00:55:58.980 --> 00:55:59.390
that's bad.

00:55:59.390 --> 00:56:03.500
So make sure you know what you're doing
if you use this tool either on a G5 or

00:56:03.500 --> 00:56:05.400
on something that's not really memory.

00:56:05.400 --> 00:56:09.680
It's in the SDK, give it a try.

00:56:11.310 --> 00:56:14.000
Okay, one last tool to go,
one last demo to go.

00:56:14.000 --> 00:56:16.680
This is called FireWire Panic View,
and this one pretty

00:56:16.680 --> 00:56:18.080
much speaks for itself.

00:56:18.080 --> 00:56:23.230
So let's go to demo one
and see what's going on.

00:56:28.450 --> 00:56:31.680
Okay, so I'm developing kernel drivers.

00:56:31.750 --> 00:56:34.920
I'm new at this,
I'm going to make a few mistakes.

00:56:35.830 --> 00:56:41.550
I've loaded my new experimental
driver onto this system.

00:56:45.020 --> 00:56:47.240
Okay, 17 inch PowerBook.

00:56:47.240 --> 00:56:51.730
And I'm going to try loading my driver,
and no prize for guessing

00:56:51.730 --> 00:56:53.500
what's going to happen.

00:56:53.500 --> 00:56:54.660
Oops.

00:56:55.030 --> 00:56:57.550
I guess my driver still
needs a little work.

00:56:57.800 --> 00:57:01.240
Now, normally this is real convenient
because I was expecting something,

00:57:01.240 --> 00:57:03.640
but this panic's different
from all the ones I got before,

00:57:03.650 --> 00:57:06.970
so actually I'd really like to
copy this down and decode it.

00:57:06.970 --> 00:57:11.910
But it's all here on the screen,
and I think the battery's

00:57:12.030 --> 00:57:15.990
going to die in a few seconds,
so what do I do?

00:57:16.020 --> 00:57:18.670
I'm going to run FireWire PanicView.

00:57:24.890 --> 00:57:35.630
And take a FireWire cable from this
Mac and plug it into the FireWire

00:57:35.760 --> 00:57:38.230
port on this one that's panicked.

00:57:49.420 --> 00:57:51.830
That was pretty easy.

00:57:51.850 --> 00:57:56.400
Now I can print this out,
I can put it in a trouble report,

00:57:56.460 --> 00:57:58.400
I can post it on the FireWire
mailing list and say,

00:57:58.400 --> 00:58:01.810
"Now what have you guys done?" No, no,
don't do that.

00:58:02.510 --> 00:58:03.400
This is not a new idea.

00:58:03.400 --> 00:58:05.280
This was actually shown a
few years ago at MacHack,

00:58:05.280 --> 00:58:06.950
so we're not going to
take credit for this,

00:58:07.160 --> 00:58:08.040
but it's useful.

00:58:08.040 --> 00:58:11.920
This didn't quite make it into SDK 20,
needs a little fine-tuning,

00:58:11.920 --> 00:58:15.110
but we thought you'd like it,
and we'll make it available

00:58:15.110 --> 00:58:18.160
in an SDK coming up soon,
and please give it a try.

00:58:19.980 --> 00:58:21.630
Okay, that's the end of the demos.

00:58:21.630 --> 00:58:24.780
All six, none of the, well, one panicked,
but that's good.

00:58:26.170 --> 00:58:28.060
So if you haven't tried the tools yet,
hopefully you'll believe

00:58:28.060 --> 00:58:30.920
now they're pretty safe.

00:58:30.920 --> 00:58:33.200
And let's go back to the podium.

00:58:36.900 --> 00:58:37.620
Okay, that's it.

00:58:37.640 --> 00:58:40.610
A quick recap of more information
on where you can get this stuff.

00:58:40.620 --> 00:58:45.210
This is the main URL for WWDC.

00:58:45.240 --> 00:58:46.220
This is not for FireWire.

00:58:46.220 --> 00:58:47.400
This is for any session at all.

00:58:49.610 --> 00:58:57.190
If you go here and pick
FireWire Session 504,

00:58:57.190 --> 00:59:04.120
you will find links to developing
user client drivers for FireWire,

00:59:04.120 --> 00:59:04.120
kernel drivers,
the iSight programming guide

00:59:04.120 --> 00:59:04.120
explaining all those registers.

00:59:04.650 --> 00:59:08.770
If you get SDK 20,
which is also available today on the web,

00:59:08.770 --> 00:59:12.950
you will find sample code, source code,
more documentation,

00:59:12.950 --> 00:59:16.050
every tool that you just
saw except Panic View,

00:59:16.050 --> 00:59:17.160
I believe.

00:59:17.180 --> 00:59:20.640
This was just posted live yesterday,
so my memory's fresh on this.

00:59:20.640 --> 00:59:22.590
There's a lot there.

00:59:22.600 --> 00:59:28.280
Also in the SDK we have public
mailing lists for FireWire

00:59:28.690 --> 00:59:31.650
and the reference platform.

00:59:31.650 --> 00:59:35.700
You are welcome to post questions there.

00:59:35.700 --> 00:59:35.700
No panics, please.

00:59:35.700 --> 00:59:35.700
No screenshots.

00:59:35.700 --> 00:59:35.700
Panics are okay.

00:59:36.250 --> 00:59:37.860
Developers answer each
other's questions on there,

00:59:37.860 --> 00:59:41.570
which is great, but we also try to answer
everything that needs an answer.

00:59:42.830 --> 00:59:47.960
We have a whole second
implementation of FireWire called

00:59:48.200 --> 00:59:48.200
the FireWire Reference Platform.

00:59:48.530 --> 00:59:50.940
This is maybe not suitable
for running on Mac OS X,

00:59:50.940 --> 00:59:53.350
but it's suitable for
almost anything else.

00:59:53.350 --> 00:59:55.930
If you're building a TV,
or a multifunction printer,

00:59:55.990 --> 00:59:59.360
or any kind of FireWire device,
especially an AVC device,

00:59:59.480 --> 01:00:02.850
the reference platform has lots
and lots of source code designed

01:00:02.850 --> 01:00:04.960
for sort of embedded OS situations.

01:00:05.010 --> 01:00:08.560
Please take a look and give it a try.

01:00:08.560 --> 01:00:12.710
There's also a mailing
list for discussing that.

01:00:12.710 --> 01:00:12.710
So lots of good stuff
available on the web.

01:00:13.000 --> 01:00:15.600
There's two sessions you may want to
think about here this week at WWDC,

01:00:15.600 --> 01:00:17.260
both on Thursday.

01:00:17.480 --> 01:00:19.960
There is a kernel lab,
not just for FireWire,

01:00:19.960 --> 01:00:21.900
but for all kernel developers.

01:00:21.950 --> 01:00:24.540
And that is right next door,
it's actually in the room behind you,

01:00:24.540 --> 01:00:26.410
starting at 2 o'clock,
and we'll have some of

01:00:26.410 --> 01:00:27.600
our engineers there.

01:00:27.600 --> 01:00:30.690
You can see the tools or
get your code debugged.

01:00:30.850 --> 01:00:33.690
Then later on Thursday at Apple,
during the big party,

01:00:33.850 --> 01:00:35.020
we will have a plugfest.

01:00:35.020 --> 01:00:38.500
That's together with USB and
Bluetooth and maybe one or two others.

01:00:38.500 --> 01:00:40.500
Bring your devices by.

01:00:40.500 --> 01:00:43.180
It's in the cafeteria
on the second floor.

01:00:43.180 --> 01:00:45.300
I think everyone comes
into the cafeteria anyway.

01:00:45.300 --> 01:00:47.710
So go on into the middle, get some beer,
get some food,

01:00:47.710 --> 01:00:50.400
then bring your device back
upstairs and we'll plug it in.

01:00:50.400 --> 01:00:54.480
You can see Busy Bus, we'll have, sorry,
FireStarter.

01:00:54.480 --> 01:00:58.680
We'll have a demonstration of that
virtual DVHS running with a real TV.

01:00:59.820 --> 01:01:01.600
and try out your devices there.

01:01:01.600 --> 01:01:04.420
We'll also help debug
anything that goes wrong.

01:01:06.000 --> 01:01:08.600
We'll take questions in a moment,
but if you want to talk to us later,

01:01:08.600 --> 01:01:10.420
we're happy to hear from you.

01:01:10.430 --> 01:01:14.240
Most people can contact Craig Keithley,
who will be up here in a moment.

01:01:14.280 --> 01:01:21.800
If you are based in Japan or in Asia,
you're welcome to contact

01:01:21.800 --> 01:01:21.800
Steven Chick at Apple Japan.

01:01:21.800 --> 01:01:21.800
You can email him in English or Japanese.