WEBVTT

00:00:11.340 --> 00:00:12.200
Good morning.

00:00:12.200 --> 00:00:13.330
Welcome to session 130.

00:00:13.330 --> 00:00:15.520
I'm Todd Fernandez,
the AppleScript Automator

00:00:15.520 --> 00:00:16.700
Engineering Manager.

00:00:16.730 --> 00:00:19.200
I'm very pleased to be here with you
this morning to tell you everything

00:00:19.200 --> 00:00:22.400
you need to know about how to create
great Automator Actions for your

00:00:22.400 --> 00:00:25.910
scriptable apps using AppleScript.

00:00:27.090 --> 00:00:28.700
We have a very simple
agenda this morning.

00:00:28.700 --> 00:00:29.910
This is a hands-on session.

00:00:30.030 --> 00:00:32.700
I'm going to take about 10 minutes
to go through a brief introduction

00:00:32.700 --> 00:00:36.500
and cover some important background
topics that you'll need to understand.

00:00:36.540 --> 00:00:38.300
And then dive right into
our example project.

00:00:38.400 --> 00:00:41.100
We're going to, together I hope,
if you've got your PowerBooks and

00:00:41.100 --> 00:00:44.000
have downloaded the sample code,
build an Automator Action using

00:00:44.000 --> 00:00:46.000
AppleScript together.

00:00:46.150 --> 00:00:49.720
And I'll conclude with some pointers
to some additional information that

00:00:49.720 --> 00:00:53.630
will help you learn about building
Automator Actions with AppleScript and

00:00:53.850 --> 00:00:55.600
then answer all your questions.

00:00:56.290 --> 00:00:59.480
So the first thing I'd like to do
is kind of take a brief survey.

00:00:59.520 --> 00:01:02.340
How many of you have used Automator?

00:01:03.370 --> 00:01:08.170
How many of you have used
runAppleScript action in a workflow?

00:01:08.220 --> 00:01:09.120
All right.

00:01:09.170 --> 00:01:11.740
How many of you have built an action?

00:01:12.690 --> 00:01:16.260
How many of you have shipped
an action to customers?

00:01:16.290 --> 00:01:17.120
Okay, a couple hands.

00:01:17.180 --> 00:01:20.980
Well, I hope next year when I ask that
question there will be a lot more hands.

00:01:21.720 --> 00:01:25.500
So we released Automator along with
Tiger about six weeks ago and the

00:01:25.500 --> 00:01:27.000
reviews have been very flattering.

00:01:27.010 --> 00:01:30.780
I just wanted to highlight
one from Andy Anotko.

00:01:30.790 --> 00:01:34.460
Now, that second sentence I could
spin a really complicated

00:01:34.460 --> 00:01:37.150
rationale as to why it's up there,
but it's really so I have the

00:01:37.210 --> 00:01:41.280
word "ginchiness" on my slide and
so I can say it to all of you.

00:01:41.310 --> 00:01:45.540
The second thing I'll point out is
that if you take away the geeky jargon,

00:01:45.610 --> 00:01:49.280
which would probably leave you with
about this left out of the review,

00:01:49.280 --> 00:01:51.480
this could have been
written by my mother.

00:01:51.530 --> 00:01:55.000
So you're welcome, Andy,
and we love you too.

00:01:55.610 --> 00:01:59.420
So turning that around a bit,
I really wanted to express my thanks

00:01:59.470 --> 00:02:03.570
to those developers who've created
those over 550 Automator Actions

00:02:03.600 --> 00:02:06.000
that have already been released.

00:02:06.030 --> 00:02:09.490
Last year I challenged the
developers of the conference to

00:02:09.490 --> 00:02:12.560
catch the wave and really adopt
this great new technology for Tiger,

00:02:12.570 --> 00:02:14.100
and you really rose to the challenge.

00:02:14.120 --> 00:02:17.130
And I and the team really
appreciate your support.

00:02:21.640 --> 00:02:24.640
For those of you who have
not come on board yet,

00:02:24.640 --> 00:02:28.100
but have a scriptable application,
you must realize that you have some

00:02:28.100 --> 00:02:31.810
powerful functionality there that's
often hidden beneath the surface,

00:02:31.850 --> 00:02:35.130
accessible only to that small
percentage of users that are

00:02:35.170 --> 00:02:37.430
comfortable with writing scripts.

00:02:37.700 --> 00:02:40.470
The advent of Automator gives
you a great opportunity to take

00:02:40.510 --> 00:02:44.500
advantage of that hidden power and
expose it to a much wider audience,

00:02:44.560 --> 00:02:47.600
thereby attracting new
customers for your application.

00:02:47.600 --> 00:02:50.610
And once a customer adopts
your application and builds it

00:02:50.630 --> 00:02:55.030
into their automated workflows,
well, you've got a loyal customer because

00:02:55.030 --> 00:02:58.590
they are not going to want to
go back to doing things by hand.

00:03:00.980 --> 00:03:02.560
So with that as a little
bit of motivation,

00:03:02.560 --> 00:03:04.900
let's start talking about
Automator and what you need to

00:03:04.900 --> 00:03:07.420
know to create actions for it.

00:03:09.400 --> 00:03:10.560
So what is Automator?

00:03:10.580 --> 00:03:12.860
Well, for those of you who
raised your hands before,

00:03:12.860 --> 00:03:15.430
you know, but for the rest of you,
it's what we call a personal

00:03:15.430 --> 00:03:16.910
automation assistant.

00:03:16.910 --> 00:03:19.300
And it consists of four main pieces.

00:03:19.300 --> 00:03:22.230
The Automator application itself,
which is what you use

00:03:22.230 --> 00:03:24.620
to create workflows,
a large set of actions,

00:03:24.620 --> 00:03:29.320
over 200 that Apple shipped with Tiger,
and again, over 550 that you and your

00:03:29.320 --> 00:03:32.500
colleagues have already created,
tools to create actions,

00:03:32.500 --> 00:03:36.100
and a set of example action projects
as well as workflows to give users an

00:03:36.200 --> 00:03:38.680
idea of what they can do with Automator.

00:03:40.690 --> 00:03:42.520
So I've been talking about
actions and workflows,

00:03:42.520 --> 00:03:45.320
and again, this will be review for those
of you familiar with Automator,

00:03:45.640 --> 00:03:48.600
but an action is what
you all need to create.

00:03:48.780 --> 00:03:52.600
And it's a simple piece of functionality
that does one specific task.

00:03:52.600 --> 00:03:56.790
For example, copying Finder items from
one location to another.

00:03:57.610 --> 00:03:58.770
So where do users get these?

00:03:58.980 --> 00:04:02.660
Well, as I've already mentioned,
we have over 200 that came

00:04:02.660 --> 00:04:04.490
with Tiger that Apple created.

00:04:04.510 --> 00:04:08.710
Third-party software developers are
creating them for their applications.

00:04:08.710 --> 00:04:12.500
And some users who have the
necessary programming or scripting

00:04:12.500 --> 00:04:14.650
expertise can create their own.

00:04:16.100 --> 00:04:16.920
So what is a workflow?

00:04:17.120 --> 00:04:19.500
Well,
this is what Automator users create.

00:04:19.530 --> 00:04:23.730
And it's simply the combination of
a series of actions in a linear data

00:04:23.860 --> 00:04:28.640
flow with the output of one action
becoming the input into the next action.

00:04:28.830 --> 00:04:33.500
And this is a simple example of
a workflow to find some photos

00:04:33.840 --> 00:04:37.300
with a particular keyword,
do some processing on them,

00:04:37.300 --> 00:04:39.670
package them up,
and then email them out to a

00:04:39.670 --> 00:04:41.720
particular address book group.

00:04:42.130 --> 00:04:45.390
Now you'll note that our friend
Copy Finder Items that I used as an

00:04:45.390 --> 00:04:47.460
example of an action is in there.

00:04:47.460 --> 00:04:52.750
And in fact this is simply a workflow
consisting of six separate actions.

00:04:54.470 --> 00:04:55.440
So that's a little background.

00:04:55.540 --> 00:04:56.990
So what are we going to learn today?

00:04:57.130 --> 00:05:00.000
Well, you're going to learn how to
build an action using AppleScript.

00:05:00.070 --> 00:05:04.700
And these are some of the tasks and tools
that we're going to use to do that today.

00:05:04.760 --> 00:05:07.010
You're going to learn how to
manage the user interface of your

00:05:07.070 --> 00:05:12.100
action and as the user changes
the interface elements in it,

00:05:12.210 --> 00:05:17.120
how you read those values in your
scripts in two different ways using both

00:05:17.120 --> 00:05:19.990
Cocoa Bindings and AppleScript Studio.

00:05:22.490 --> 00:05:24.640
Again, this is a hands-on session.

00:05:24.640 --> 00:05:27.250
I hope that all of you have had a
chance to download the sample code.

00:05:27.250 --> 00:05:31.550
We've provided you with pre-built
projects for each step from 1

00:05:31.550 --> 00:05:34.700
to 6 as well as a final version
that has everything in that

00:05:34.700 --> 00:05:36.390
I'm going to show you today.

00:05:36.580 --> 00:05:38.290
They do require Xcode 2.1.

00:05:38.290 --> 00:05:41.750
They're in the new project format,
but those of you who have Xcode

00:05:41.750 --> 00:05:45.310
2.0 installed can still build
along with me if you like.

00:05:45.410 --> 00:05:48.110
We're going to start from scratch,
so you don't need to use the

00:05:48.200 --> 00:05:50.340
pre-built projects to do this.

00:05:50.460 --> 00:05:53.400
I'm going to point out that
if you're in that situation,

00:05:53.450 --> 00:05:58.130
there is a detailed outline that lists
every step we're going to follow and also

00:05:58.130 --> 00:06:05.210
all of the code and other materials that
you'll need to build the action today.

00:06:05.720 --> 00:06:09.160
Just another note on that topic,
the milestones are the

00:06:09.250 --> 00:06:10.770
end point of each step.

00:06:10.770 --> 00:06:13.570
So the step one milestone is
where we will end step one,

00:06:13.570 --> 00:06:16.380
so it would be the beginning of step two.

00:06:16.880 --> 00:06:18.040
And you have a couple of options.

00:06:18.040 --> 00:06:19.900
This is intended to
be a hands-on session,

00:06:19.900 --> 00:06:23.000
so I certainly encourage you if
you've got the sample code or you've

00:06:23.000 --> 00:06:26.200
got your PowerBook open to go ahead
and build the action along with me.

00:06:26.310 --> 00:06:29.060
But you can also just open up
the different milestones of the

00:06:29.060 --> 00:06:32.940
completed project and look at the
changes that I'm making as I do them,

00:06:32.940 --> 00:06:36.260
or simply just watch and then
experiment with the sample

00:06:36.260 --> 00:06:38.110
code later at your leisure.

00:06:40.200 --> 00:06:42.360
So let's get started
on creating an action.

00:06:42.500 --> 00:06:44.650
So just kind of review again.

00:06:44.980 --> 00:06:46.900
We're going to be talking
about AppleScript Actions,

00:06:46.910 --> 00:06:49.500
and that's one of the types of
actions that you can create.

00:06:49.540 --> 00:06:52.930
You can also create actions using Cocoa,
and there's another session

00:06:52.930 --> 00:06:58.180
this afternoon in this exact
auditorium that you can learn about

00:06:58.180 --> 00:07:00.000
how to create a Cocoa Actions.

00:07:00.060 --> 00:07:03.000
And you can also now,
with Xcode Tools 2.1,

00:07:03.070 --> 00:07:04.600
create them using other
scripting languages,

00:07:04.600 --> 00:07:08.000
and there's a session tomorrow
afternoon about how to do that.

00:07:08.320 --> 00:07:11.230
And each of these types has a
different requirement for creating

00:07:11.290 --> 00:07:13.600
an action using that technology.

00:07:13.700 --> 00:07:15.530
If you want to create
an AppleScript action,

00:07:15.540 --> 00:07:19.000
well, the application you want to target
needs to have a scripting interface.

00:07:19.000 --> 00:07:20.500
It needs to be scriptable.

00:07:20.620 --> 00:07:24.720
If you want to create a Cocoa action,
the application or technology you

00:07:24.720 --> 00:07:28.100
want to access needs to provide you
with a set of APIs and a framework

00:07:28.100 --> 00:07:29.960
that you can link into your action.

00:07:30.070 --> 00:07:32.680
And if you want to create an action
using another scripting language,

00:07:32.760 --> 00:07:35.480
you'll need to have some kind
of command line tool that you

00:07:35.480 --> 00:07:37.700
can access from that language.

00:07:37.910 --> 00:07:40.310
One other point is that you don't
necessarily need to target an

00:07:40.310 --> 00:07:41.710
application with your action.

00:07:41.710 --> 00:07:45.460
You are perfectly able to create
an action simply using the

00:07:45.460 --> 00:07:50.100
features of AppleScript language
itself or Objective-C or C++,

00:07:50.100 --> 00:07:53.670
any of the other programming languages
that are possible with actions.

00:07:55.270 --> 00:07:57.020
So the technologies and tools
we're going to use today in

00:07:57.090 --> 00:08:01.330
this session are AppleScript,
of course, AppleScript Studio,

00:08:01.330 --> 00:08:04.000
and there's another hands-on
session tomorrow morning

00:08:04.000 --> 00:08:05.980
about AppleScript Studio if
you're interested in that.

00:08:06.000 --> 00:08:08.310
And we're also going
to use Cocoa Bindings,

00:08:08.310 --> 00:08:11.800
and there's another session on
Cocoa Bindings this afternoon if

00:08:11.800 --> 00:08:14.950
you're interested in that technology,
which is very useful for

00:08:14.950 --> 00:08:16.660
building actions of all types.

00:08:17.060 --> 00:08:19.260
And, of course,
we use Interface Builder to build

00:08:19.260 --> 00:08:22.030
our interface for our action
and Xcode to manage the project,

00:08:22.140 --> 00:08:26.300
including a new feature in Xcode 2.1
that makes it much easier to configure

00:08:26.300 --> 00:08:30.220
your action's Info.plist settings,
a new action target inspector.

00:08:33.320 --> 00:08:37.100
So with that,
I'd like to switch to Demo 2 and

00:08:37.150 --> 00:08:40.430
give you a glimpse of what we're
actually going to build together.

00:08:40.430 --> 00:08:42.200
So you see the end point.

00:08:42.200 --> 00:08:46.200
So this is Automator in a simple
workflow consisting of three actions.

00:08:46.200 --> 00:08:49.130
We've got Ask for Finder Items,
which is one of the actions

00:08:49.240 --> 00:08:51.880
that comes with Tiger,
just to give some input into our

00:08:51.990 --> 00:08:53.930
action Duplicate Finder Items.

00:08:53.930 --> 00:08:58.060
And you can see that we have a checkbox
that controls whether or not the

00:08:58.060 --> 00:09:02.630
output of this action is going to be
references to the duplicated items or

00:09:02.630 --> 00:09:06.100
the original items if it's unchecked.

00:09:06.150 --> 00:09:11.180
We have a destination pop-up that
allows us to choose standard locations

00:09:11.830 --> 00:09:14.960
or choose any location on our disk.

00:09:15.110 --> 00:09:17.730
And down at the bottom
you can see the example.

00:09:17.740 --> 00:09:19.380
This isn't the most exciting example.

00:09:19.380 --> 00:09:22.880
There are much better examples in
actions such as Rename Finder Items.

00:09:23.130 --> 00:09:26.380
But this will show us how to
add some more advanced user

00:09:26.380 --> 00:09:28.940
interface behavior to our action.

00:09:29.420 --> 00:09:33.300
And just to give you an idea of
what this looks like when we run,

00:09:33.300 --> 00:09:40.430
to show this is a working action,
we'll just select a couple of images.

00:09:40.560 --> 00:09:42.860
Can I make it larger?

00:09:59.750 --> 00:10:03.680
Command Shift, Command Option.

00:10:04.370 --> 00:10:05.970
How's that?

00:10:09.140 --> 00:10:11.300
Improvisation.

00:10:11.380 --> 00:10:13.510
So in fact,
that's all I really wanted to show you.

00:10:13.560 --> 00:10:16.960
But actually,
we can show you in Finder that, in fact,

00:10:17.030 --> 00:10:20.080
that copied those-- that
duplicate-- where did I put them?

00:10:20.080 --> 00:10:21.960
In documents.

00:10:24.020 --> 00:10:33.490
So here are our duplicated images.

00:10:33.490 --> 00:10:33.490
And how do I turn that off
because that's going to...

00:10:37.700 --> 00:10:40.650
will give you a real
close-up view of that.

00:10:40.700 --> 00:10:42.700
That's what we're going to build.

00:10:42.700 --> 00:10:45.690
So back to slides please.

00:10:48.490 --> 00:10:50.980
So our step one,
we're going to start from scratch.

00:10:50.980 --> 00:10:53.850
We're going to create a new
Action Project in Xcode and build a very

00:10:53.990 --> 00:10:58.060
simple initial version just with one line
of AppleScript to implement a simpler

00:10:58.060 --> 00:11:00.170
version of what I just showed you.

00:11:00.500 --> 00:11:02.440
So in order to do that
we're going to create a new

00:11:02.440 --> 00:11:04.950
AppleScript Automator Action project.

00:11:04.980 --> 00:11:07.090
We're going to write a very
simple one-line script to

00:11:07.090 --> 00:11:09.200
implement the action's behavior.

00:11:09.250 --> 00:11:12.230
I'm going to show you how to build
and test the action and then give

00:11:12.230 --> 00:11:16.490
you a tour of what you get out of the
box with the minimal changes that I'm

00:11:16.500 --> 00:11:19.020
going to make to the action template.

00:11:19.330 --> 00:11:22.740
So with that, oh, I'm sorry,
I'll have these layout diagrams

00:11:22.810 --> 00:11:25.410
throughout the hands-on
session to let you know which

00:11:25.660 --> 00:11:26.520
file we're going to change.

00:11:26.540 --> 00:11:30.600
In this case we're only going to
change the main.AppleScript file.

00:11:30.680 --> 00:11:33.270
So back to demo two, please.

00:11:44.600 --> 00:11:47.720
Okay, so the first step is to
create a new project,

00:11:47.760 --> 00:11:50.840
so we're going to bring up
Xcode's Project Assistant.

00:11:50.840 --> 00:11:53.240
As you can see,
we have three different types of actions.

00:11:53.490 --> 00:11:56.120
Cocoa Actions you can
learn about this afternoon,

00:11:56.330 --> 00:11:58.600
ShellScript Actions tomorrow afternoon.

00:11:58.710 --> 00:12:00.630
But we're going to create an
AppleScript Automator Action.

00:12:00.630 --> 00:12:08.660
And we'll even spell it correctly.

00:12:14.610 --> 00:12:21.600
I will create our project and hopefully
you can see this a little bit better.

00:12:21.600 --> 00:12:24.640
And if I can grab the splitter.

00:12:25.210 --> 00:12:28.100
So just to give you a little
tour of what we've got in here,

00:12:28.100 --> 00:12:31.940
we've got our main.AppleScript
in the scripts group.

00:12:32.010 --> 00:12:34.940
We've got a number of resources
including a strings file and our

00:12:34.940 --> 00:12:38.780
main.nib which we'll edit later to
build our Actions user interface.

00:12:38.800 --> 00:12:41.030
A number of frameworks
that are linked in.

00:12:41.090 --> 00:12:42.840
The product that we're
going to be building,

00:12:42.840 --> 00:12:43.860
a .action bundle.

00:12:43.930 --> 00:12:48.260
And the Info.plist.

00:12:49.330 --> 00:12:52.770
All we really need to do in this step
is to come into our main.AppleScript

00:12:52.780 --> 00:12:56.300
and think about what behavior
we want to add to this action.

00:12:56.330 --> 00:12:59.550
So we want to make a
duplicate finder items action.

00:12:59.550 --> 00:13:03.690
And what we might want to do
is look up finder's dictionary.

00:13:05.110 --> 00:13:12.450
which we can do right in Xcode to see
what the duplicate command can do.

00:13:14.000 --> 00:13:33.900
[Transcript missing]

00:13:38.500 --> 00:14:06.200
[Transcript missing]

00:14:06.690 --> 00:14:09.570
But we don't have any of those yet
because our action at this point

00:14:09.600 --> 00:14:12.440
doesn't have a user interface.

00:14:12.440 --> 00:14:14.470
So all we need to do

00:14:17.940 --> 00:14:22.700
is a telfinder to duplicate
the input to our action.

00:14:22.750 --> 00:14:24.520
So we'll save that.

00:14:24.520 --> 00:14:26.780
The next step then is to
build and test this action.

00:14:26.790 --> 00:14:30.870
And what we have set up in the template
is a custom executable for Automator to

00:14:30.870 --> 00:14:34.970
make the process of building and testing
your action very similar to building

00:14:34.970 --> 00:14:37.030
and testing any other application.

00:14:37.310 --> 00:14:40.240
And if we open the inspector on that,
you'll see it's just pointing

00:14:40.400 --> 00:14:42.960
to Automator.app/applications.

00:14:43.040 --> 00:14:47.070
And we have a -action argument which is
added automatically based on the project

00:14:47.230 --> 00:14:51.960
name to pass the built product for your
action to Automator on the command line.

00:14:52.020 --> 00:14:54.290
So it will be loaded in and
you can immediately use it

00:14:54.320 --> 00:14:55.860
and test it in your workflows.

00:14:55.990 --> 00:14:58.060
So we'll go ahead and build and go.

00:14:58.680 --> 00:15:02.960
will build the action and then
launch Automator passing the newly

00:15:02.960 --> 00:15:05.380
built action on the command line.

00:15:05.540 --> 00:15:08.940
And we're probably going to
need to zoom in there again.

00:15:08.990 --> 00:15:11.900
So you can see we've got this
funny looking application group

00:15:11.900 --> 00:15:13.800
up here which holds our action.

00:15:13.820 --> 00:15:17.290
That's because we haven't yet configured
our action to tell Automator which

00:15:17.360 --> 00:15:19.700
application group it should appear in.

00:15:19.750 --> 00:15:22.310
Another issue is we don't
have the finder icon here.

00:15:22.350 --> 00:15:25.940
That's another setting that we need
to tell Automator about our action.

00:15:25.960 --> 00:15:29.840
And if we select the action and
look down here in the try not

00:15:29.840 --> 00:15:32.310
to give you all motion sickness.

00:15:33.260 --> 00:15:37.380
In the description area,
we haven't filled out the description to

00:15:37.380 --> 00:15:42.470
tell the user who might be interested in
using this action what in fact it does.

00:15:46.530 --> 00:15:50.600
And if we add the action to the workflow,
you'll see it has no user interface

00:15:50.760 --> 00:15:55.900
and the types that it takes as input
and output are not configured either.

00:15:56.080 --> 00:15:59.240
So we've got an action
and in fact we can,

00:15:59.340 --> 00:16:07.770
let me zoom out so I can see here,
we can in fact use this as it is.

00:16:20.730 --> 00:16:23.900
and again choose an item and it's
already working it duplicates the item

00:16:23.900 --> 00:16:27.020
and passes the original back because
we haven't done anything differently

00:16:27.020 --> 00:16:32.260
than that and we'll look in pictures
because it's going to duplicate in

00:16:32.260 --> 00:16:34.700
the same folder and there's our copy.

00:16:34.750 --> 00:16:37.780
So just with that one line we've already
got a working action but of course

00:16:38.200 --> 00:16:40.660
it's fairly limited at this point.

00:16:41.000 --> 00:16:45.450
and we've got a lot of things that we
need to clean up in the configuration.

00:16:45.450 --> 00:16:49.090
So let's go back to slides please.

00:16:51.550 --> 00:16:52.260
So that was step one.

00:16:52.260 --> 00:16:55.740
We've already learned how to create a
project and implement a simple version

00:16:55.740 --> 00:16:59.480
of it by modifying its main.AppleScript
and how to build and test it.

00:16:59.650 --> 00:17:02.990
So what we want to do next
is add some more options.

00:17:03.010 --> 00:17:03.480
I'm sorry.

00:17:03.500 --> 00:17:06.130
We're going to next configure
the Info.plist to correct

00:17:06.130 --> 00:17:09.480
those little hiccups in there
where the application group is,

00:17:09.530 --> 00:17:12.290
its icon, its description, etc.

00:17:13.780 --> 00:17:15.600
So there's a bit more
background information here.

00:17:15.600 --> 00:17:20.110
Automator has a number of keys in
its info P list that each action

00:17:20.140 --> 00:17:24.460
specifies to tell Automator how
to handle this particular action.

00:17:24.500 --> 00:17:27.070
The ones that I've mentioned so far

00:17:27.530 --> 00:17:31.690
AM Application is what controls
which group your action will

00:17:31.820 --> 00:17:34.630
appear in in Automator's library.

00:17:35.110 --> 00:17:37.190
The category is not shown
in the user interface,

00:17:37.190 --> 00:17:39.730
but it is useful for doing searches
in Automator search fields.

00:17:39.830 --> 00:17:42.290
So I encourage you to choose a category.

00:17:42.290 --> 00:17:46.070
You can find the categories for
our actions in their Info.plist,

00:17:46.070 --> 00:17:50.160
or you can create your own
for your own sets of actions.

00:17:50.440 --> 00:17:53.420
The "AM Icon Name" controls the
icon that appears to the left of the

00:17:53.420 --> 00:17:56.310
action's name in the action column.

00:17:56.980 --> 00:18:01.890
And amname controls the name of the
action that appears in the action column.

00:18:01.890 --> 00:18:06.160
Now, in Xcode 2.1 the project template
has been updated so that it

00:18:06.160 --> 00:18:09.740
automatically names your action based
on the project name you selected,

00:18:09.740 --> 00:18:12.140
sensibly enough,
but you can of course change that

00:18:12.140 --> 00:18:15.010
again later if you so choose.

00:18:16.810 --> 00:18:19.180
So some other important
settings are the types,

00:18:19.180 --> 00:18:24.370
the valid types of input and output
that your action accepts and provides.

00:18:24.370 --> 00:18:28.990
And for those we have a pair of keys,
am accepts, which again specifies

00:18:29.050 --> 00:18:31.930
what input is accepted,
and you can see it highlighted there,

00:18:31.990 --> 00:18:35.130
the English description that
appears in the user interface.

00:18:35.440 --> 00:18:38.580
includes a types array which allows
you to specify one or more types that

00:18:38.580 --> 00:18:43.270
are valid for your action that it can
handle and do something interesting with.

00:18:43.380 --> 00:18:46.870
AMXEPS dictionary also includes an
optional Boolean so you can tell

00:18:46.870 --> 00:18:51.700
Automator whether or not your action
requires input to work properly.

00:18:51.800 --> 00:18:55.390
Many actions don't
actually require any input.

00:18:58.390 --> 00:19:02.680
So similarly, there's an am provides key,
and this is identical to am accepts,

00:19:02.680 --> 00:19:05.300
except it doesn't require
an optional boolean.

00:19:05.430 --> 00:19:08.970
And this specifies what the
output your action provides to

00:19:09.050 --> 00:19:11.210
the next action in the workflow.

00:19:11.210 --> 00:19:15.000
And again, it can be an array if it
returns more than one type.

00:19:16.230 --> 00:19:17.530
So some guidelines on choosing these.

00:19:17.620 --> 00:19:21.790
We have documented a number of these
types that we use for our own actions

00:19:21.790 --> 00:19:24.760
in the Automator Programming Guide.

00:19:24.790 --> 00:19:27.840
And you should certainly adopt those
as often as you can so that your

00:19:27.980 --> 00:19:32.440
action is the most interoperable with
as many other actions as possible.

00:19:32.470 --> 00:19:35.140
However,
it is possible to create your own types

00:19:35.240 --> 00:19:37.950
and that's one of the things that we're
going to cover in more detail in the

00:19:37.950 --> 00:19:40.640
Cocoa Action Session this afternoon.

00:19:40.660 --> 00:19:43.440
Again, you can specify multiple types.

00:19:43.440 --> 00:19:48.320
For example, if your action accepts both
address book groups and people.

00:19:48.950 --> 00:19:51.190
Another special case,
the View Results Action that

00:19:51.190 --> 00:19:54.620
I've been using to test
duplicate finder items today,

00:19:54.620 --> 00:19:58.460
doesn't require any input,
but we don't want it to block the

00:19:58.500 --> 00:19:59.850
data flow through the workflow.

00:19:59.850 --> 00:20:03.250
So if your action doesn't need any input
and doesn't do anything with its input,

00:20:03.300 --> 00:20:06.020
it should just pass through
the input it receives.

00:20:06.020 --> 00:20:07.910
And you just leave the types
as general as possible.

00:20:07.910 --> 00:20:11.250
The idea here is you want to give
Automator the most detailed and

00:20:11.250 --> 00:20:14.720
accurate information you can so
it can best handle your action and

00:20:14.720 --> 00:20:18.480
give the user the most support in
using it properly in workflows.

00:20:23.210 --> 00:20:26.390
So I've already mentioned that
you can create your own types.

00:20:26.390 --> 00:20:30.370
If you need to do that for your actions,
if your application specifies some types

00:20:30.400 --> 00:20:34.450
that are different from the standard
ones that we've already identified,

00:20:34.450 --> 00:20:39.180
what you should also do is create a set
of conversion actions to convert your

00:20:39.180 --> 00:20:42.230
new type to one of the existing types.

00:20:43.640 --> 00:20:47.700
Conversion Actions are a great
Automator feature that allows types

00:20:47.700 --> 00:20:51.420
that don't appear to match in the
user interface to in fact look

00:20:51.620 --> 00:20:54.840
like they match to the user because
Automator invisibly and automatically

00:20:54.840 --> 00:21:00.340
adds in whatever needed actions that
it has access to to map from say,

00:21:00.570 --> 00:21:03.320
iPhoto photos to files folders.

00:21:03.740 --> 00:21:07.170
There are automatic conversions
to get between those types so that

00:21:07.170 --> 00:21:11.210
when you add those actions to the
workflow it will appear to be a match.

00:21:11.940 --> 00:21:14.560
These actions are just like
any other action except for

00:21:14.690 --> 00:21:15.960
three minor differences.

00:21:16.380 --> 00:21:20.640
You build them with the same project,
but the product needs to be a .c

00:21:20.640 --> 00:21:22.260
action for conversion action bundle.

00:21:22.260 --> 00:21:26.920
They don't have any UI because they
are never seen by the user unless,

00:21:26.920 --> 00:21:29.780
of course, you show Automator's log.

00:21:29.840 --> 00:21:32.840
So you can see when these are
actually executing in your workflow.

00:21:32.840 --> 00:21:34.960
But to the user just
looking at the workflow,

00:21:34.960 --> 00:21:36.030
they're invisible.

00:21:36.030 --> 00:21:37.950
Automator handles it automatically.

00:21:37.950 --> 00:21:40.390
And for those of you
familiar with AppleScript,

00:21:40.780 --> 00:21:44.500
this is a very similar or
concept to AppleScript coercions.

00:21:46.250 --> 00:21:48.720
And again,
we're going to actually talk quite a bit

00:21:48.720 --> 00:21:52.290
about this in the Cocoa Action session
this afternoon and even show you

00:21:52.370 --> 00:21:55.470
how to create a conversion action.

00:21:56.310 --> 00:21:58.080
So what we're going to do in step two,
again,

00:21:58.080 --> 00:22:01.000
is configure our InfoP-List and fill
in some of those missing settings

00:22:01.000 --> 00:22:04.700
that made our action not look quite
right in Automator's user interface.

00:22:04.850 --> 00:22:07.400
And we're going to do that in two ways,
well actually three.

00:22:07.530 --> 00:22:09.700
For those of you who haven't
upgraded yet to Xcode 2.1,

00:22:09.700 --> 00:22:14.700
well you should, but if you haven't yet,
I'm going to show you how you can edit

00:22:14.700 --> 00:22:16.700
your InfoP-List in two different ways.

00:22:16.700 --> 00:22:20.980
And then I'm going to show you the
improvements we've made in Xcode 2.1

00:22:20.980 --> 00:22:24.990
and made this much easier to do with
the new Action Target Inspector.

00:22:25.180 --> 00:22:28.780
So in this step we're going
to only modify the Info.plist.

00:22:28.780 --> 00:22:32.450
And with that, please back to demo two.

00:22:34.420 --> 00:22:39.600
So let's come back to
Xcode and stop that.

00:22:39.680 --> 00:22:44.310
So one way to edit your Info.plist is
simply to edit it as a text file here

00:22:44.310 --> 00:22:47.200
in Xcode and you can certainly do that.

00:22:47.260 --> 00:22:52.810
For example, we want our action to
accept alias objects,

00:22:52.810 --> 00:22:54.710
not just any object.

00:22:55.360 --> 00:22:59.640
However, a safer way to do this is
to use Property List Editor,

00:22:59.640 --> 00:23:03.070
and you can do that easily
from within Xcode by opening

00:23:03.070 --> 00:23:05.660
the InfoP list with Finder.

00:23:06.450 --> 00:23:09.460
and we can see all the different keys,
some of which I've talked about

00:23:09.460 --> 00:23:11.230
already and some of which I haven't.

00:23:11.230 --> 00:23:13.210
But this is the AM accepts dictionary.

00:23:13.250 --> 00:23:15.670
And let's zoom in.

00:23:17.660 --> 00:23:20.540
So we can see we've got our types
array with one element and I've

00:23:20.540 --> 00:23:23.940
already edited that to be alias object,
the optional boolean.

00:23:23.940 --> 00:23:26.990
In this case we certainly want that
to be no because this action doesn't

00:23:26.990 --> 00:23:28.910
make any sense without any input.

00:23:28.910 --> 00:23:33.590
And we also need to update
our am-provides dictionary.

00:23:38.980 --> 00:23:40.890
To make a similar change
because our action is going

00:23:40.930 --> 00:23:44.910
to also provide alias objects.

00:23:47.600 --> 00:23:50.440
Let's save those changes.

00:23:50.440 --> 00:23:51.940
Come back to Xcode.

00:23:51.960 --> 00:23:58.400
So that's the Xcode 2.0 way
to edit your InfoP list.

00:23:58.450 --> 00:24:04.950
In Xcode 2.1, if you disclose the target
and bring up the inspector and

00:24:04.950 --> 00:24:07.370
switch to the properties pane,

00:24:09.090 --> 00:24:11.730
You can see that up here at the
top are the standard settings,

00:24:11.790 --> 00:24:14.640
the CFBundle executable,
the CFBundle identifier that you're

00:24:14.750 --> 00:24:17.130
familiar with from any Xcode project.

00:24:17.390 --> 00:24:20.830
Automator uses those too,
but down here at the bottom we've added

00:24:21.010 --> 00:24:25.560
a lot more information for the different
collections of Automator settings.

00:24:25.630 --> 00:24:27.240
And we'll start with the general.

00:24:27.320 --> 00:24:29.380
Again,
the action name is set automatically

00:24:29.380 --> 00:24:31.360
for you by the template.

00:24:31.440 --> 00:24:34.360
But we need to set the application,
and again these map fairly closely

00:24:34.370 --> 00:24:36.100
to the AM keys in your Info.plist.

00:24:36.100 --> 00:24:37.460
This is AM application.

00:24:37.510 --> 00:24:39.080
And we want that to be Finder.

00:24:39.080 --> 00:24:42.530
Finder is the application that
our action uses to do its work.

00:24:42.780 --> 00:24:45.840
We use that for the category as
well and for the icon which you

00:24:45.850 --> 00:24:50.060
see then appears in the well
as soon as you add it in there.

00:24:50.090 --> 00:24:53.690
These check boxes down here at the
bottom control the show action when

00:24:53.700 --> 00:24:57.650
run option within the workflow which
allows a workflow creator to specify

00:24:57.750 --> 00:25:01.420
that a particular actions user
interface should be shown at run

00:25:01.420 --> 00:25:06.500
time so it can be dynamically set
by whoever is running the workflow.

00:25:06.580 --> 00:25:09.380
We'll talk a little bit
more about that later.

00:25:09.920 --> 00:25:11.850
Then we can go through some
of the other collections.

00:25:11.850 --> 00:25:14.190
Input is again, am accepts,
which we've already set.

00:25:14.270 --> 00:25:18.800
We've got the optional Boolean
and the change we've already made.

00:25:19.060 --> 00:25:22.530
Same with output,
but it doesn't have the optional Boolean.

00:25:22.890 --> 00:25:28.100
The parameters collection allows you to
specify parameters to hold the settings

00:25:28.100 --> 00:25:32.610
for user interface elements that are
monitored using or maintained and managed

00:25:32.740 --> 00:25:36.680
via Cocoa Bindings and I'm going to show
you how to do that in the next step.

00:25:37.510 --> 00:25:40.840
Required Resources is another entry
that allows you to tell Automator

00:25:40.840 --> 00:25:45.000
that there's a particular application
or file or any kind of reference,

00:25:45.120 --> 00:25:48.600
or resource rather,
that your action needs on the

00:25:48.670 --> 00:25:50.900
system for it to work properly.

00:25:52.690 --> 00:25:55.870
The warning setting allows you
to tell Automator whether your

00:25:55.870 --> 00:26:01.240
action makes changes to the data
that's input to it that are either

00:26:01.240 --> 00:26:04.280
it doesn't change it at all,
which is the safe level,

00:26:04.280 --> 00:26:06.620
and duplicate finder items
is a good example of that.

00:26:06.620 --> 00:26:08.960
It doesn't do anything
to the original files,

00:26:09.010 --> 00:26:10.580
it merely duplicates them.

00:26:10.830 --> 00:26:14.580
Or whether your action makes
a change in a reversible way,

00:26:14.710 --> 00:26:18.000
for example, flip image since you
can always flip it back.

00:26:18.130 --> 00:26:20.640
Or in an irreversible way,
say cropping an image

00:26:20.640 --> 00:26:22.690
which actually loses data.

00:26:22.850 --> 00:26:26.860
So by setting this pop-up you can
tell Automator whether your action

00:26:26.860 --> 00:26:31.540
is safe and then it can present
appropriate warnings to the user when

00:26:31.540 --> 00:26:34.180
your action is added to the workflow.

00:26:34.570 --> 00:26:36.970
And if we needed to change this
to one of the other settings,

00:26:36.970 --> 00:26:40.190
we'd need to fill out these
other values down here.

00:26:43.050 --> 00:26:45.160
Absolutely.

00:26:45.160 --> 00:26:48.270
So what you need to do is show
your target and select it in

00:26:48.270 --> 00:26:51.060
the Groups and Files column.

00:26:51.090 --> 00:26:52.170
Let me zoom in there a bit.

00:26:52.330 --> 00:26:57.200
So again, that's in Groups and Files,
the target for your action.

00:26:57.230 --> 00:27:01.500
And then open the Inspector by
clicking the Info button.

00:27:01.640 --> 00:27:05.710
And within the Inspector,
it's the Properties pane.

00:27:07.120 --> 00:27:15.890
Absolutely.

00:27:15.890 --> 00:27:15.890
So let me zoom out a bit
so it's not -- where was I?

00:27:15.890 --> 00:27:15.890
So keywords.

00:27:16.330 --> 00:27:19.340
Keywords are another way to make
it easy for users to find your

00:27:19.340 --> 00:27:23.100
action in Automator's library
by doing searches for them.

00:27:23.300 --> 00:27:31.300
So we'll add a few keywords that have
to do with our particular action.

00:27:35.820 --> 00:27:38.270
The next collection is the description
which we've talked about already and

00:27:38.270 --> 00:27:41.230
we see that we haven't configured this.

00:27:41.880 --> 00:27:45.560
So there are a number of different
items that you can add specific to your

00:27:45.560 --> 00:27:48.940
action that are highlighted differently
in Automator's description area.

00:27:48.980 --> 00:27:53.510
In our particular case,
we're just going to add a summary.

00:27:59.800 --> 00:28:02.250
I'm going to copy this out
from my little assistant,

00:28:02.250 --> 00:28:08.690
but you can copy and paste this from
the outline if you have that open.

00:28:10.420 --> 00:28:12.790
Moving on, we also have an entry
for related actions.

00:28:12.810 --> 00:28:15.340
If your action is related to
a number of other actions,

00:28:15.340 --> 00:28:18.650
you can specify one or more here
and those actions will be listed

00:28:18.660 --> 00:28:22.060
in your actions description,
making it very easy for users to

00:28:22.060 --> 00:28:26.930
figure out what actions your action
will be useful in conjunction with.

00:28:27.160 --> 00:28:29.160
And finally,
we also make it easy to manage

00:28:29.200 --> 00:28:32.220
localizations for your action,
and I'm going to be talking about

00:28:32.270 --> 00:28:35.440
localizability in step five.

00:28:36.670 --> 00:28:41.600
So with that we've configured our action
and let's go ahead and build and go

00:28:41.600 --> 00:28:46.520
to see what improvements we've made
and how it appears within Automator.

00:28:46.640 --> 00:28:49.010
So as we can see, we've

00:28:49.750 --> 00:28:53.400
We no longer have that funny
application group at the top.

00:28:53.440 --> 00:28:57.860
If we click on the finder group,
we see our action appears here

00:28:57.910 --> 00:29:00.340
and it has the finder icon.

00:29:00.380 --> 00:29:03.760
Now you'll notice the description
still isn't filled out yet.

00:29:03.830 --> 00:29:05.340
Why is that?

00:29:05.420 --> 00:29:06.300
Well, you're going to have to wait a bit.

00:29:06.300 --> 00:29:08.760
I will explain why in a bit.

00:29:10.150 --> 00:29:13.170
Let's add it to the workflow and
we see that we also now have our

00:29:13.240 --> 00:29:16.000
typeset accurately in the workflow.

00:29:16.070 --> 00:29:19.670
So we've corrected quite a few of
the issues that we identified in

00:29:19.670 --> 00:29:22.280
our initial tour after step one.

00:29:24.920 --> 00:29:26.660
So with that, please back to slides.

00:29:26.660 --> 00:29:32.680
So again, with step two,
we just learned how to configure

00:29:32.680 --> 00:29:35.850
the actions Info.plist file
to specify especially the

00:29:35.900 --> 00:29:38.020
general settings and the types.

00:29:38.030 --> 00:29:40.490
And I pointed out a few of the
other settings that may be of

00:29:40.530 --> 00:29:44.220
interest depending on your particular
action that you're creating.

00:29:45.970 --> 00:29:48.260
So in our next step we're going to
actually add some user interface

00:29:48.280 --> 00:29:52.840
elements to our Actions user interface
and these elements we're going to

00:29:52.840 --> 00:29:56.010
manage by using Cocoa Bindings.

00:29:57.270 --> 00:29:59.860
So before we add anything
to our user interface,

00:29:59.860 --> 00:30:03.920
I wanted to highlight a few important
design guidelines and also point out

00:30:03.920 --> 00:30:08.300
that similarly to the human interface
guidelines for applications on

00:30:08.300 --> 00:30:11.760
Mac OS X and the scripting interface
guidelines for your scriptable

00:30:11.760 --> 00:30:14.950
interface for your application,
we also have identified some

00:30:15.240 --> 00:30:18.580
guidelines specific to Action user
interfaces and they are documented

00:30:18.580 --> 00:30:20.860
in the Automator Programming Guide.

00:30:20.860 --> 00:30:24.360
The idea here is, again,
like the human interface guidelines

00:30:24.360 --> 00:30:27.490
and the scripting interface guidelines
to help you achieve a consistent look

00:30:27.490 --> 00:30:30.870
and feel for your actions so that they
work just like other actions and are

00:30:30.920 --> 00:30:33.190
much easier for users to adopt and use.

00:30:33.190 --> 00:30:38.600
We obviously have over 200 examples of
our own that you can use to get an idea

00:30:38.600 --> 00:30:43.150
of what are good ideas and what are
bad ways to build your user interfaces.

00:30:43.500 --> 00:30:46.860
As far as overall philosophy,
the idea is to keep

00:30:47.000 --> 00:30:48.230
separate actions separate.

00:30:48.390 --> 00:30:52.820
Don't try to make these giant actions
that do several different things.

00:30:52.900 --> 00:30:55.550
It makes it much harder for them to
be used in conjunction with other

00:30:55.600 --> 00:30:58.590
actions and also makes them harder
to understand what they do and

00:30:58.590 --> 00:31:00.400
what are the right settings to use.

00:31:00.400 --> 00:31:03.490
Really try to keep it simple.

00:31:05.450 --> 00:31:08.380
I pointed out the parameters
collection in the target inspector

00:31:08.690 --> 00:31:12.840
and this maps to the AM default
parameters key in your info P list.

00:31:13.000 --> 00:31:16.720
These again are the default values
for keys managed by Cocoa Bindings,

00:31:16.800 --> 00:31:20.010
the mapping of the setting from
the user interface element to

00:31:20.060 --> 00:31:24.790
your script or your code if you're
working with a Cocoa Action.

00:31:25.060 --> 00:31:31.000
The types for these parameters map very
clearly to different user interface

00:31:31.000 --> 00:31:32.990
elements as outlined on the slide.

00:31:33.000 --> 00:31:34.330
I won't bore you with the details.

00:31:34.440 --> 00:31:37.150
You're going to see a
few examples in a moment.

00:31:37.620 --> 00:31:42.820
We're going to use an Automator-specific
pop-up menu that we've established

00:31:42.910 --> 00:31:47.260
to make it very easy to add file,
folder, and application choosing to

00:31:47.330 --> 00:31:48.960
your Actions user interface.

00:31:49.000 --> 00:31:52.890
I'm going to point out a few
relevant design guidelines as we go.

00:31:52.900 --> 00:31:57.690
We'll then connect those elements
to our script using Cocoa Bindings,

00:31:57.990 --> 00:32:00.140
add the necessary entries
to our parameters,

00:32:00.510 --> 00:32:04.090
and then add the code necessary to
read those settings and make use of

00:32:04.170 --> 00:32:06.360
them within our Actions behavior.

00:32:06.810 --> 00:32:08.780
So in this step we're
going to be modifying,

00:32:08.780 --> 00:32:10.730
sorry about that, modify three files.

00:32:10.810 --> 00:32:13.200
We're going to start
by modifying the nib,

00:32:13.330 --> 00:32:16.920
then add the entries to the info.p list,
and finally add the code

00:32:16.920 --> 00:32:19.130
to your main.AppleScript.

00:32:19.210 --> 00:32:22.180
So please over to demo two.

00:32:25.000 --> 00:32:28.440
Oops.

00:32:28.460 --> 00:32:31.260
All right, so let's open our nib file.

00:32:31.260 --> 00:32:32.960
And this is what you get out of the box.

00:32:33.100 --> 00:32:35.420
As you saw in Automator,
we've got this little

00:32:35.560 --> 00:32:37.270
placeholder element here.

00:32:37.300 --> 00:32:40.290
So we'll just take advantage of that.

00:32:42.900 --> 00:32:51.000
[Transcript missing]

00:32:52.940 --> 00:32:55.290
I'm going to build this interface a
little bit differently than what I've

00:32:55.300 --> 00:32:58.100
been showing because it occurred to
me yesterday that it makes much more

00:32:58.100 --> 00:33:01.920
sense with this checkbox on the bottom.

00:33:05.500 --> 00:33:09.600
I'm not sure how well it's
going to work zoomed in.

00:33:09.700 --> 00:33:13.540
So one of the things we need to do,
this is one of the design guidelines,

00:33:13.550 --> 00:33:15.840
is that actions should
use small controls.

00:33:15.930 --> 00:33:19.240
And by default we get a
regular size checkbox.

00:33:19.320 --> 00:33:24.740
So in the inspector, which you can get by
command 1 or from the tools,

00:33:24.800 --> 00:33:26.680
show inspector,

00:33:27.930 --> 00:33:32.240
We want to change the size to small,
and as we see that changes

00:33:32.240 --> 00:33:34.100
the size of the checkbox.

00:33:34.240 --> 00:33:40.270
Then we want to add the
directory pop-up chooser,

00:33:40.270 --> 00:33:45.460
and that again is the Automator specific
version of it that we've added in Tiger.

00:33:45.570 --> 00:33:47.480
And to do that we need to
add the Automator palette.

00:33:47.620 --> 00:33:52.950
So we need to go to Tools, Palettes,
Palette Preferences.

00:33:53.810 --> 00:33:56.460
and click the Add button.

00:33:56.650 --> 00:33:59.760
Forced me to navigate
back up to Developer,

00:33:59.780 --> 00:34:05.020
Extras, Palettes,
and choose ampalette.palette.

00:34:05.660 --> 00:34:11.670
As you see that immediately gives
us auto up here in the IB palette.

00:34:12.080 --> 00:34:13.300
Absolutely.

00:34:13.390 --> 00:34:16.600
So Tools,
this is again within Interface Builder.

00:34:16.730 --> 00:34:22.230
The Tools menu, select the Palettes item,
and then the Palette Preferences

00:34:22.230 --> 00:34:24.090
item within that submenu.

00:34:24.300 --> 00:34:26.840
That will bring up Interface
Builder's preferences with

00:34:26.840 --> 00:34:29.380
the palettes pane selected.

00:34:29.880 --> 00:34:34.130
Then you need to click the
Add button and in that open

00:34:34.130 --> 00:34:38.000
panel navigate up to Developer,
Extras,

00:34:38.480 --> 00:34:42.020
Palettes and select ampalette.palette.

00:34:49.690 --> 00:34:53.100
So what we want to do here is allow
the user to specify the directory into

00:34:53.100 --> 00:34:55.140
which the items will be duplicated.

00:34:55.140 --> 00:34:57.690
So we're going to choose
the middle one here,

00:34:57.690 --> 00:35:00.550
drag it out to our interface,
make sure we get it

00:35:00.650 --> 00:35:02.330
lined up with our label.

00:35:03.180 --> 00:35:07.200
And then use the IB guidelines
to line it up with our checkbox.

00:35:07.280 --> 00:35:10.700
And in the attributes for our pop-up
we're going to make a few changes.

00:35:10.760 --> 00:35:13.400
For example, we can allow

00:35:14.430 --> 00:35:16.930
The user to choose new paths.

00:35:16.930 --> 00:35:20.060
And something more interesting
for this particular action,

00:35:20.060 --> 00:35:23.220
we can allow a placeholder.

00:35:23.310 --> 00:35:23.320
This will...

00:35:23.620 --> 00:35:26.750
will allow the user to specify, "Well,
I don't want to duplicate these

00:35:26.750 --> 00:35:27.990
items to a different location.

00:35:28.000 --> 00:35:32.240
I just want to duplicate them in
place." And we'll rename that to "Same

00:35:32.330 --> 00:35:35.210
Folder" for this particular action.

00:35:40.010 --> 00:35:42.690
So one other design
guideline we need to do,

00:35:42.700 --> 00:35:47.540
if you select all the items in the
interface and hold down the option key,

00:35:47.540 --> 00:35:50.610
you'll see that IB gives
you a pixel guide.

00:35:50.610 --> 00:35:55.630
And one of the UI guidelines is to have
a 10 pixel border around the elements

00:35:55.670 --> 00:35:58.360
within your Actions user interface.

00:35:59.010 --> 00:36:01.700
This is important because you
don't have control over exactly

00:36:01.700 --> 00:36:03.030
how your action is laid out.

00:36:03.030 --> 00:36:06.660
You only have control over what your,
the view that you're building here.

00:36:06.820 --> 00:36:08.850
Automator will load this view.

00:36:08.850 --> 00:36:13.900
Wow, this is really hard to do zoomed in.

00:36:13.960 --> 00:36:15.410
There we go.

00:36:19.560 --> 00:36:21.950
by holding down the Option key.

00:36:21.980 --> 00:36:25.190
So let me zoom back out again,
I think that was...

00:36:27.930 --> 00:36:30.860
Okay, there we go.

00:36:30.910 --> 00:36:34.000
And again, you can select all with
Command-A and then hold down

00:36:34.000 --> 00:36:35.710
Option to see the pixel boundaries.

00:36:35.810 --> 00:36:37.560
Well, that sent us out again.

00:36:37.630 --> 00:36:38.740
You all will get them to 10.

00:36:38.740 --> 00:36:41.780
We'll leave that as good enough for now.

00:36:42.780 --> 00:36:46.410
The importance is that Automator
is going to load your view within

00:36:46.410 --> 00:36:49.600
the action view which includes
the title bar and the status bar.

00:36:49.680 --> 00:36:53.050
So for your action to look like other
actions and not have obvious gaps,

00:36:53.060 --> 00:36:56.410
you need to have that standard
10 pixel gap margin around the

00:36:56.410 --> 00:36:59.590
outside of your interface elements.

00:37:00.920 --> 00:37:04.130
So now that we've built the interface,
we need to connect it to some

00:37:04.220 --> 00:37:07.900
variables that we can read from
our script using Cocoa Bindings.

00:37:07.900 --> 00:37:10.900
And to do that,
we're going to again use the inspector

00:37:10.900 --> 00:37:14.900
and bring up the Bindings pane,
which you can do with Command-4.

00:37:14.900 --> 00:37:17.210
And I will zoom in again.

00:37:17.980 --> 00:37:22.080
For the checkbox we're going
to use the value binding.

00:37:22.090 --> 00:37:25.190
Whoa, that was pretty cool.

00:37:26.850 --> 00:37:29.660
And what we want to do is
name the model keypath,

00:37:29.660 --> 00:37:31.760
the value that we can
then read in our script.

00:37:31.850 --> 00:37:35.970
So let's just name this
return duplicate items.

00:37:36.180 --> 00:37:38.630
This will become important later
because we're going to have to use this

00:37:38.630 --> 00:37:41.430
exact same name within our Info.plist.

00:37:41.430 --> 00:37:43.490
They need to match,
otherwise this won't work,

00:37:43.490 --> 00:37:45.870
and I will again remind
you of that later.

00:37:46.010 --> 00:37:50.560
So we've made the binding for the
checkbox and named the variable that

00:37:50.560 --> 00:37:52.790
we'll be able to read from our script.

00:37:52.900 --> 00:37:56.820
So now we need to do the same
thing for the pop-up menu so we

00:37:56.820 --> 00:37:59.330
can read its value from our script.

00:38:01.100 --> 00:38:05.440
And for this one we want
to use the path binding.

00:38:05.440 --> 00:38:08.760
And for that one let's
call it the to location.

00:38:08.760 --> 00:38:11.270
And again we'll make that binding.

00:38:11.800 --> 00:38:13.700
Save our Nib file.

00:38:13.700 --> 00:38:14.880
We've got our interface built.

00:38:15.040 --> 00:38:18.060
We've made the connections
using bindings.

00:38:18.060 --> 00:38:20.750
And now we're going to return to Xcode.

00:38:23.970 --> 00:38:27.930
And again, we can do this with--
if you have Xcode 2.0,

00:38:27.930 --> 00:38:32.090
you can do this by opening the
plist in Property List Editor.

00:38:32.790 --> 00:38:38.190
opening--excuse me,
disclosing the AM default parameters key,

00:38:38.190 --> 00:38:40.120
adding a new child,

00:38:42.410 --> 00:38:46.100
And let's add the to location this way.

00:38:46.230 --> 00:38:47.060
And that is a string.

00:38:47.060 --> 00:38:51.700
Again, this is going to receive a
POSIX path from that pop-up menu.

00:38:51.790 --> 00:38:54.940
And by default let's just leave it be
the placeholder which means an empty

00:38:54.940 --> 00:38:57.200
string so we're in fact done here.

00:38:57.210 --> 00:38:59.240
Let's save that change.

00:38:59.290 --> 00:39:01.740
And we'll add the other

00:39:03.280 --> 00:39:07.970
So, you get to the necessary parameter
for the checkbox using the inspector.

00:39:07.970 --> 00:39:11.750
Again, you get to the inspector from
by selecting the target and

00:39:11.750 --> 00:39:13.690
then opening the inspector.

00:39:14.750 --> 00:39:16.450
The info panel.

00:39:16.500 --> 00:39:19.600
Selecting the properties pane,
and we need to select the

00:39:19.600 --> 00:39:21.990
parameters collection.

00:39:23.870 --> 00:39:34.700
and add a new entry.

00:39:34.700 --> 00:39:34.700
So again,
this is where it's critical that

00:39:34.700 --> 00:39:34.700
this exactly match what you've
used in your nib so that the values

00:39:34.730 --> 00:39:36.520
will be transferred accurately.

00:39:36.560 --> 00:39:41.480
For this one we'll make it a Boolean
and we'll want the default the

00:39:41.580 --> 00:39:44.290
checkbox to default to checked.

00:39:46.710 --> 00:39:51.770
All right, so now we have built our
user interface in the Nib,

00:39:51.780 --> 00:39:54.510
we've made the bindings,
we've added entries to hold the

00:39:54.510 --> 00:39:56.700
binding values in our Info.plist.

00:39:56.700 --> 00:40:00.780
The last step is to update our
main.AppleScript to actually go

00:40:00.780 --> 00:40:03.960
ahead and use those settings and
do something different depending

00:40:03.960 --> 00:40:05.700
on what the user has selected.

00:40:06.210 --> 00:40:09.750
So here I'm going to
use my assistant again,

00:40:09.810 --> 00:40:13.140
but the code that I'm about to paste
in here is also in the outline that you

00:40:13.140 --> 00:40:15.730
have as part of the session materials.

00:40:17.300 --> 00:40:20.330
And we'll bring over a new version
of main.AppleScript and compile

00:40:20.330 --> 00:40:22.200
it so we get the formatting.

00:40:22.240 --> 00:40:24.090
And I will walk you through this.

00:40:24.210 --> 00:40:26.180
So again it's the run handler.

00:40:26.180 --> 00:40:29.010
We get the input and
the parameters block,

00:40:29.010 --> 00:40:30.280
passed from Automator.

00:40:30.390 --> 00:40:32.620
The first thing we're going to do

00:40:33.350 --> 00:40:36.850
is read the two values that the
user has set in the user interface

00:40:36.850 --> 00:40:39.000
from the parameters block.

00:40:39.060 --> 00:40:41.430
And that is as simple,
again these are the same names that we've

00:40:41.430 --> 00:40:45.700
added in our Nib and in our InfoP list.

00:40:45.740 --> 00:40:48.000
Absolutely.

00:40:48.050 --> 00:40:49.490
How's that?

00:40:51.670 --> 00:40:53.690
So that's the first thing we
need to do is read those values.

00:40:53.690 --> 00:40:56.880
We assign them to variables so
we can use them in our script.

00:40:56.980 --> 00:41:00.430
Now as I mentioned,
the to location coming from that pop-up

00:41:00.690 --> 00:41:03.500
is actually a POSIX path as a string.

00:41:03.540 --> 00:41:07.280
So what we need to do is first
make sure that we expand any

00:41:07.280 --> 00:41:12.950
tildes if this path that the user
selected is documents or desktops,

00:41:12.950 --> 00:41:14.900
something based on their home directory.

00:41:14.930 --> 00:41:19.490
And in order to do that we're going
to use a Cocoa call called string

00:41:19.550 --> 00:41:24.900
by expanding tilde in path using
AppleScript Studio's call method command.

00:41:25.080 --> 00:41:29.560
This is an idiom that's going to be very
common for writing AppleScript actions

00:41:29.640 --> 00:41:32.220
using the ampath pop-up button.

00:41:32.220 --> 00:41:35.950
That's that nice Automator path chooser.

00:41:36.170 --> 00:41:39.960
And the good news is you have this code
because it's part of the sample code and

00:41:39.960 --> 00:41:42.090
you can use this in your own actions.

00:41:42.540 --> 00:41:45.400
So we're going to expand
the path and then convert it

00:41:45.400 --> 00:41:46.670
into an AppleScript alias.

00:41:46.720 --> 00:41:51.610
That's what this block of code does.

00:41:59.230 --> 00:42:05.020
We can talk about that in Q&A if
people are interested in that.

00:42:06.070 --> 00:42:08.100
The next thing we want to do is
actually go ahead and use the

00:42:08.100 --> 00:42:09.880
values that the user has set.

00:42:09.940 --> 00:42:12.320
The to location,
if the to location is an empty string

00:42:12.320 --> 00:42:15.280
that means the user has selected
the placeholder and we just want

00:42:15.280 --> 00:42:18.920
to duplicate the items in place,
which means we can actually use the

00:42:18.930 --> 00:42:23.210
exact same line of code that we used in
our initial implementation in step one.

00:42:23.960 --> 00:42:26.870
Otherwise,
we want to actually pass to Finder

00:42:26.960 --> 00:42:29.800
the target folder that the user
selected in this second line.

00:42:29.800 --> 00:42:33.590
Finally, we want to

00:42:33.820 --> 00:42:37.140
And then we want to save the result
that Finder sends back so we know

00:42:37.140 --> 00:42:40.460
what the duplicate items are in
case the user wants to return those

00:42:40.600 --> 00:42:42.700
as the output from the action.

00:42:42.700 --> 00:42:45.520
And in that case,
what Finder returns are actually

00:42:45.520 --> 00:42:49.860
Finder-style references to the items,
and our action is supposed

00:42:49.860 --> 00:42:51.700
to return alias objects.

00:42:51.770 --> 00:42:55.360
So what we need to do is iterate
through that list that's returned

00:42:55.360 --> 00:43:00.700
by Finder to convert them to
aliases and then return them.

00:43:00.700 --> 00:43:03.700
So if the user hasn't asked for
the duplicate items to be returned,

00:43:03.790 --> 00:43:07.100
then we just want to go ahead and
return input again just like the simple

00:43:07.100 --> 00:43:10.300
version that we implemented in step one.

00:43:13.370 --> 00:43:15.230
So we've got our source changed.

00:43:15.240 --> 00:43:19.950
Let's go ahead and build and go.

00:43:21.000 --> 00:43:32.500
[Transcript missing]

00:43:33.700 --> 00:43:39.520
So we've got our checkbox and
we've got our pop-up menu.

00:43:39.520 --> 00:43:40.840
And you've seen this
running several times,

00:43:40.840 --> 00:43:42.480
you'll see it running again,
so I'm not going to take

00:43:42.600 --> 00:43:44.720
the time to run it now,
but I can assure you it works.

00:43:44.890 --> 00:43:48.600
Hopefully those of you following along
with me are finding that that's the case.

00:43:48.600 --> 00:43:51.960
And with that, let's go back to slides.

00:43:54.020 --> 00:43:59.820
So we've got our checkbox and
we've got our pop-up menu.

00:43:59.820 --> 00:44:01.140
And you've seen this
running several times,

00:44:01.170 --> 00:44:02.820
you'll see it running again,
so I'm not going to take

00:44:02.910 --> 00:44:05.140
the time to run it now,
but I can assure you it works.

00:44:05.180 --> 00:44:08.900
Hopefully those of you following along
with me are finding that that's the case.

00:44:08.900 --> 00:44:12.260
And with that, let's go back to slides.

00:44:12.970 --> 00:44:15.940
and how to connect those
elements that you add to your

00:44:15.940 --> 00:44:18.430
script using Cocoa Bindings.

00:44:18.690 --> 00:44:23.050
So the next step is to add that example,
if you remember from what

00:44:23.050 --> 00:44:26.460
I showed you originally,
some more advanced behavior that

00:44:26.580 --> 00:44:29.680
occurs in the Actions user interface
as the user is changing values,

00:44:29.720 --> 00:44:31.580
not just at workflow runtime.

00:44:31.900 --> 00:44:34.790
And we're going to use
AppleScript Studio to do that.

00:44:35.490 --> 00:44:37.460
So what we're going to do in
this step is we're going to,

00:44:37.460 --> 00:44:40.460
again, add that behavior to our
actions user interface.

00:44:40.510 --> 00:44:43.400
I will outline a few of the
important AppleScript Studio handlers

00:44:43.400 --> 00:44:46.400
that you need to implement in
order to add that behavior.

00:44:46.400 --> 00:44:48.930
And then test the action with
show action when run option,

00:44:48.930 --> 00:44:51.390
which I mentioned earlier
but haven't shown you yet,

00:44:51.390 --> 00:44:56.450
and show you how to make sure that
that works properly with your action.

00:44:57.190 --> 00:45:01.470
So in this step we're going to edit the
main.nib again and then add a new file,

00:45:01.470 --> 00:45:05.220
a new script file to hold the
studio handlers to implement

00:45:05.260 --> 00:45:07.710
the behavior we're going to add.

00:45:07.930 --> 00:45:09.860
So please back to demo two.

00:45:09.860 --> 00:45:17.380
So let's return to our nib.

00:45:22.900 --> 00:45:24.900
Let's just, hello.

00:45:24.950 --> 00:45:28.590
Let's reorganize these just for fun.

00:45:28.620 --> 00:45:33.200
And what we want to do is add that

00:45:34.710 --> 00:45:39.410
I'm just going to duplicate those
text objects with Command D.

00:45:39.420 --> 00:45:42.690
It's easier to edit them that
way and get the right size.

00:45:42.700 --> 00:45:45.140
I'm just going to make the example label.

00:45:45.140 --> 00:45:51.700
And you can use Command equals to
resize the text to fit the entered text.

00:45:51.700 --> 00:45:55.490
And just add a placeholder
that we can add next to it.

00:45:57.390 --> 00:46:00.640
You can use again the
IB guidelines to line those up.

00:46:00.640 --> 00:46:03.820
And let's line up our
interface elements again.

00:46:12.300 --> 00:46:18.800
Again, you hold down the Option key
to see these pixel guides.

00:46:18.800 --> 00:46:20.780
One other thing we'll do,
we'll stretch this out because the

00:46:20.780 --> 00:46:23.070
text is unlikely to be that short.

00:46:23.070 --> 00:46:26.220
And whereas the text we're going to
show here is really going to only

00:46:26.220 --> 00:46:30.910
have one of two values in an action
that is doing something a little

00:46:31.100 --> 00:46:35.260
bit more interesting with this,
that the size of that

00:46:35.340 --> 00:46:37.370
text is going to scale.

00:46:37.370 --> 00:46:38.470
So what we want to do is look
at the size inspector pane.

00:46:38.700 --> 00:46:41.940
and--oops, not vertical springs-- but
add horizontal springs.

00:46:42.030 --> 00:46:45.100
What this will do is if the text
is larger than that default size

00:46:45.100 --> 00:46:48.920
we've established in the nib is it
will dynamically scale depending on

00:46:48.970 --> 00:46:51.590
what text is actually added there.

00:46:52.260 --> 00:46:54.700
All right, so that's what we need to
do to lay out the elements.

00:46:54.700 --> 00:46:57.380
Now what we need to do is
start connecting them via

00:46:57.380 --> 00:47:00.870
AppleScript Studio to our scripts.

00:47:00.980 --> 00:47:05.570
So what we need to do is
switch to the AppleScript pane.

00:47:06.650 --> 00:47:10.680
For the text field that we're going
to use to actually dynamically set the

00:47:10.680 --> 00:47:15.490
text based on the checkbox setting,
and we'll just call that example.

00:47:17.470 --> 00:47:19.830
And what we want to do is have
this behavior happen whenever

00:47:19.840 --> 00:47:22.990
the user checks that checkbox,
we want to update the example.

00:47:23.150 --> 00:47:28.240
To do that we're going to add a
clicked handler to that object.

00:47:28.310 --> 00:47:33.060
And we also want to name it
to return duplicate items.

00:47:33.130 --> 00:47:37.300
So that we can access that
object from our script by name.

00:47:37.710 --> 00:47:40.460
Now in order to actually
implement that handler,

00:47:40.480 --> 00:47:43.000
we need to add a new script.

00:47:43.040 --> 00:47:47.000
So within the inspector we
can click the new button.

00:47:47.360 --> 00:47:51.110
and we'll call it ui.applescript and
we'll make it an AppleScript text

00:47:51.110 --> 00:47:53.400
file as far as format.

00:47:54.030 --> 00:47:56.100
And click Save to create the file.

00:47:56.140 --> 00:47:58.110
Sorry, that's so jumpy.

00:47:58.110 --> 00:47:59.960
But hopefully you can see
there we've added the clicked

00:48:00.140 --> 00:48:05.000
handler and it's attached to
the UI.AppleScript script file.

00:48:05.290 --> 00:48:09.500
Now, one other handler we need
to add is to the view.

00:48:09.500 --> 00:48:12.470
That's the view that contains
all of the elements we've

00:48:12.470 --> 00:48:14.000
added to our user interface.

00:48:14.000 --> 00:48:16.970
And we need to add the
AwakeFromNibHandler,

00:48:17.350 --> 00:48:21.190
which is called when your action is
loaded by Automator in preparation

00:48:21.240 --> 00:48:23.050
for adding it to the workflow.

00:48:24.590 --> 00:48:29.810
and the Open Handler,
which is called right before Automator

00:48:30.530 --> 00:48:33.000
actually opens it up in the workflow.

00:48:33.100 --> 00:48:37.040
And we're going to also attach
those to our UI.AppleScript.

00:48:37.310 --> 00:48:40.490
These other handlers can also
be used for different purposes.

00:48:40.540 --> 00:48:45.730
The activated handler is called
when the workflow containing your

00:48:45.730 --> 00:48:47.500
action becomes frontmost again.

00:48:47.500 --> 00:48:49.700
So if there's something that
you need to update each time

00:48:49.700 --> 00:48:52.800
the workflow is frontmost,
you can implement that handler.

00:48:52.950 --> 00:48:56.490
The parameters updated and
update parameters handlers I'll

00:48:56.880 --> 00:48:58.760
talk about a little bit later.

00:48:59.990 --> 00:49:01.150
So let's click edit.

00:49:01.350 --> 00:49:04.280
Well, we'll save our nib.

00:49:04.300 --> 00:49:07.000
I won't do that when I'm zoomed in.

00:49:07.680 --> 00:49:11.540
Click Edit to open up our
new script that we created.

00:49:11.550 --> 00:49:16.360
And again, I'm going to get rid of
the default and copy in

00:49:17.750 --> 00:49:20.400
The right code and again this
is in your outline so that

00:49:20.400 --> 00:49:22.880
you can also copy and paste.

00:49:24.940 --> 00:49:27.400
Compile that and let me
step you through this.

00:49:27.440 --> 00:49:30.060
So this first line is just to
set up a property to hold a

00:49:30.060 --> 00:49:33.350
reference to that content view
of your action that holds all the

00:49:33.360 --> 00:49:35.240
individual user interface elements.

00:49:35.390 --> 00:49:38.910
And since we attach the
AwakeFromNibHandler to that object,

00:49:39.290 --> 00:49:42.980
we can simply set that property to
the object that's passed into that

00:49:43.190 --> 00:49:47.510
handler because that's the only object
that is attached to that handler.

00:49:53.890 --> 00:49:56.800
Now I showed you attaching the
opened and clicked handlers.

00:49:56.800 --> 00:50:00.200
Again, the clicked handler is called
when the user checks the checkbox.

00:50:00.280 --> 00:50:04.500
The open handler is called when the
action is opened within the workflow,

00:50:04.500 --> 00:50:06.440
when the user adds it to the workflow.

00:50:06.580 --> 00:50:10.520
And all we need to do in that case
is update the example to show the

00:50:10.520 --> 00:50:13.060
current setting of the checkbox.

00:50:13.360 --> 00:50:17.540
I've separated that out into a
separate handler called update_example,

00:50:17.540 --> 00:50:20.790
and all it needs to do is
it uses the AppleScript tell

00:50:20.790 --> 00:50:23.790
block to tell the content view

00:50:24.750 --> 00:50:27.440
to check the state of the button.

00:50:27.440 --> 00:50:30.420
And one other thing
that I'll show you here,

00:50:30.480 --> 00:50:32.880
that checkbox is actually a button.

00:50:33.100 --> 00:50:38.330
If you don't know what class you need to
use or what property you need to check,

00:50:38.990 --> 00:50:41.820
In each action template we've
provided a reference to the

00:50:41.820 --> 00:50:47.340
AppleScript Studio dictionary and
you can search for the button class.

00:50:50.100 --> 00:50:53.610
and look at all its properties.

00:50:53.610 --> 00:50:53.890
Sorry, I'll zoom in again.

00:50:53.890 --> 00:50:59.000
So we can see that state is in fact what
we need to read to access what state,

00:50:59.020 --> 00:51:01.390
whether it's checked or not.

00:51:07.100 --> 00:51:12.500
[Transcript missing]

00:51:15.030 --> 00:51:17.820
So that's what we're going to do
is we're going to read the value.

00:51:17.820 --> 00:51:20.820
If the state of the button is checked,

00:51:21.080 --> 00:51:24.850
and we're reading it by name,
the name we established in our Nib file.

00:51:24.850 --> 00:51:27.870
We're going to set a variable
to return duplicate items,

00:51:27.960 --> 00:51:29.200
just that string.

00:51:29.250 --> 00:51:31.590
If it's not set, return original items.

00:51:31.820 --> 00:51:34.330
And then set the content
of the text field example,

00:51:34.340 --> 00:51:37.910
again we labeled that text field
in the AppleScript pane in the Nib,

00:51:37.910 --> 00:51:39.100
to that string.

00:51:39.180 --> 00:51:42.760
And again you could look up text field
in the Studio dictionary to find out

00:51:42.760 --> 00:51:46.270
that content is the property that
you need to set in order to do that.

00:51:49.600 --> 00:51:51.690
So with that, let's build and go again.

00:51:51.770 --> 00:51:54.710
Save changes we made to our nib.

00:51:58.040 --> 00:52:03.410
Drag out our action and we see that was
the open handler getting called to update

00:52:03.510 --> 00:52:08.010
the example and if we check the checkbox,
well you probably can't see it

00:52:08.040 --> 00:52:10.090
but I'll zoom in so you can.

00:52:10.090 --> 00:52:13.800
As we check the checkbox
the example updates.

00:52:21.000 --> 00:52:21.090
So this is not particularly enlightening,
or this is not the most

00:52:21.090 --> 00:52:21.140
compelling example.

00:52:21.140 --> 00:52:21.960
However,
you can imagine that there are many

00:52:21.960 --> 00:52:26.200
interesting things that you can do
based on this in your own actions.

00:52:26.260 --> 00:52:29.630
I will highlight,
really rename finder items,

00:52:29.630 --> 00:52:36.750
which shows another use of this
technique to show an example of what

00:52:36.860 --> 00:52:38.240
the renamed items will look like.

00:52:38.400 --> 00:52:41.620
And again, it dynamically updates based
on the choices the user

00:52:41.620 --> 00:52:43.180
makes in the user interface.

00:52:43.480 --> 00:52:45.990
This is a very powerful technique.

00:52:46.630 --> 00:52:50.790
However,
what we'd like to do is try this with

00:52:50.790 --> 00:52:54.210
the show action when run option to
make sure that it all works properly.

00:52:54.230 --> 00:52:57.640
And again, what this is,
is what this tells Automator to

00:52:57.640 --> 00:53:00.290
do is when I run this workflow,

00:53:01.220 --> 00:53:05.060
It will actually dynamically show
that user interface at workflow

00:53:05.060 --> 00:53:09.410
runtime so that if I want to
make this workflow more general,

00:53:09.930 --> 00:53:12.200
Every time the workflow runs,
I'll have the opportunity to

00:53:12.240 --> 00:53:14.370
configure this Actions user interface.

00:53:14.370 --> 00:53:18.300
So again, I can do all the things I can
at workflow creation time.

00:53:18.420 --> 00:53:22.790
And the dynamic behavior
I added here works correctly.

00:53:22.890 --> 00:53:26.630
But let's make sure it works
correctly after I run this.

00:53:26.630 --> 00:53:26.630
So

00:53:26.800 --> 00:53:28.950
What you can see is I've
checked return duplicate items.

00:53:29.040 --> 00:53:33.800
When I initially ran this workflow it's
not checked behind it as you see here.

00:53:33.950 --> 00:53:35.970
So we click continue.

00:53:36.700 --> 00:53:39.830
We see that the pop-up menu
has been updated based on what

00:53:39.890 --> 00:53:42.670
I chose in the show and run panel.

00:53:44.370 --> 00:53:45.600
But the example hasn't.

00:53:45.640 --> 00:53:48.690
You can see now the checkbox
and the example don't match.

00:53:48.690 --> 00:53:51.240
And it will get back in sync
if I check it some more.

00:53:51.360 --> 00:53:54.490
But something's not getting,
it's not getting updated when,

00:53:54.490 --> 00:53:57.620
based on what the user
did when shown when run.

00:53:57.770 --> 00:53:59.780
So we need to fix that.

00:54:00.470 --> 00:54:04.280
And to do that we're going
to add an additional handler.

00:54:04.310 --> 00:54:07.100
So let's go back to our Nib file.

00:54:07.100 --> 00:54:11.080
And we've implemented the opened handler.

00:54:11.620 --> 00:54:16.580
What we need to do is also implement
the parameters updated handler.

00:54:16.580 --> 00:54:21.390
And this handler is called whenever
the parameters controlled by bindings

00:54:21.550 --> 00:54:25.670
that are in the parameters block
that we're reading are updated.

00:54:26.000 --> 00:54:28.470
And this gives us an opportunity
to update our user interface,

00:54:28.510 --> 00:54:30.330
which is in fact what we need to do.

00:54:30.420 --> 00:54:35.740
So this gives us a hook into when we need
to update our interface because behind

00:54:35.740 --> 00:54:39.000
the scenes the parameters have changed.

00:54:39.180 --> 00:54:42.980
So we'll edit our script file again.

00:54:44.300 --> 00:54:47.100
Remove the comments.

00:54:47.100 --> 00:54:52.140
And again, this code is in your outline.

00:54:52.140 --> 00:54:53.570
I missed.

00:54:59.900 --> 00:55:03.370
And what you can see here is what we're
doing is we're reading the parameter.

00:55:03.370 --> 00:55:05.180
Again,
we know that that was changed because

00:55:05.210 --> 00:55:07.690
that's why this handler was called
and we're making sure that our user

00:55:07.690 --> 00:55:10.400
interface is updated by setting
the state of the button to match

00:55:10.990 --> 00:55:12.560
the parameter from the binding.

00:55:12.680 --> 00:55:14.960
And then updating the example.

00:55:16.600 --> 00:55:19.140
And it's really as simple as that.

00:55:19.140 --> 00:55:25.040
Let's build again and verify
that it's working as we expect.

00:55:34.930 --> 00:55:38.220
So now if we change that
to return original items,

00:55:38.220 --> 00:55:41.840
again the example updates
correctly here in the panel,

00:55:41.920 --> 00:55:45.700
and as we continue we see that
in fact the change was made

00:55:45.700 --> 00:55:47.450
is reflected in the workflow.

00:55:47.450 --> 00:55:53.900
So we've now completed the circle so that
all the changes are accurately reflected.

00:55:58.550 --> 00:56:03.810
please back to slides.

00:56:03.810 --> 00:56:07.260
So in step three you learned
about how to connect interface

00:56:07.260 --> 00:56:08.800
elements via Cocoa Bindings.

00:56:09.000 --> 00:56:11.600
Step four we just learned how to do
that using AppleScript Studio which

00:56:11.740 --> 00:56:14.660
gives you more power to do more
interesting things in your Actions

00:56:14.660 --> 00:56:18.560
user interface to dynamically reflect
right within the Actions interface

00:56:18.610 --> 00:56:20.890
the settings that the user has chosen.

00:56:21.010 --> 00:56:24.200
And we've shown the show and run
feature and how to make sure that it

00:56:24.200 --> 00:56:28.400
works correctly with behavior that
you've added using AppleScript Studio.

00:56:29.490 --> 00:56:31.400
So the next step,
I alluded to this earlier,

00:56:31.400 --> 00:56:33.910
I'm going to show you how to
make your action localizable,

00:56:33.960 --> 00:56:35.940
which we certainly
encourage all of you to do.

00:56:36.070 --> 00:56:39.480
All of the actions provided by
Apple have been localized into many

00:56:39.480 --> 00:56:43.090
different languages and we certainly
would like to continue that with

00:56:43.150 --> 00:56:45.010
as many other actions as possible.

00:56:45.270 --> 00:56:48.480
So what we're going to do in this
step is the Info.plist entries to

00:56:48.480 --> 00:56:53.000
control what application group,
keywords, the description, et cetera,

00:56:53.010 --> 00:56:54.600
make those localizable.

00:56:54.650 --> 00:56:58.340
And then I'm also going to show you
how to read localized strings from your

00:56:58.340 --> 00:57:03.750
scripts so that the scripts that appear
in that example can be localized as well.

00:57:04.220 --> 00:57:08.930
In this case we're going to update
our UI.AppleScript file to read those

00:57:09.000 --> 00:57:12.010
localized strings and we're going
to update our Info.plist.strings

00:57:12.130 --> 00:57:17.200
file which is the localized
version of the Info.plist keys.

00:57:17.200 --> 00:57:21.200
And we will add a new file,
localizable.strings.

00:57:21.330 --> 00:57:23.650
Back to demo two please.

00:57:29.100 --> 00:57:32.950
So the first thing we want to
do is see what we get by default

00:57:32.950 --> 00:57:35.780
in our Info.plist.strings.

00:57:35.780 --> 00:57:38.510
And automatically Automator
sets up in the template,

00:57:38.620 --> 00:57:42.920
using the template, the name so it's
localizable out of the box.

00:57:42.920 --> 00:57:46.470
But as you see, we're not able to do that
for these other settings,

00:57:46.470 --> 00:57:51.120
for the application, the category,
if there are any default parameters

00:57:51.120 --> 00:57:54.370
that need to be localizable,
the description,

00:57:54.900 --> 00:57:57.930
Keywords and the warning
strings if needed.

00:57:58.030 --> 00:58:02.790
So again I'm going to copy
in the final version of this.

00:58:02.910 --> 00:58:05.120
And this is in your outline.

00:58:05.180 --> 00:58:06.900
Save that and walk you through it.

00:58:06.950 --> 00:58:10.400
So the top hasn't really changed,
but here we know finder is

00:58:10.470 --> 00:58:13.200
the string that we're using
for application and category.

00:58:13.280 --> 00:58:15.440
We only need one entry
in the strings file,

00:58:15.440 --> 00:58:19.790
so it's there,
and again it's key equals value.

00:58:20.310 --> 00:58:24.030
The only default parameter that's a
string is set to the empty string,

00:58:24.030 --> 00:58:26.040
but if we were setting it to
something that was a string

00:58:26.040 --> 00:58:29.900
that could be localized,
you could add that entry here as well,

00:58:29.930 --> 00:58:33.120
to location equals and then the value.

00:58:33.280 --> 00:58:39.160
We've made our summary string
localizable and our keywords localizable.

00:58:39.170 --> 00:58:44.360
And we haven't used the warning
settings so we won't change that.

00:58:44.360 --> 00:58:48.450
So that's really all it takes
is adding these entries to

00:58:48.720 --> 00:58:53.930
your Info.plist.strings file,
which is created for you by default

00:58:53.930 --> 00:58:53.930
and has placeholders in place to
make it easy for you to add these.

00:58:53.930 --> 00:58:53.930
And then of course you
would need to create

00:58:54.370 --> 00:58:57.460
French.elpraj to Spanish.elpraj
based on the languages that

00:58:57.470 --> 00:58:59.890
you want to localize this into.

00:59:00.180 --> 00:59:05.850
So the other side of the coin is within
our scripts where we use strings.

00:59:05.850 --> 00:59:09.700
And in our particular case,
the display example is the best example.

00:59:09.750 --> 00:59:13.190
We're actually hard-coding these
strings right here within our script.

00:59:13.190 --> 00:59:15.660
And to make this action
fully localizable,

00:59:15.720 --> 00:59:19.500
we need to be reading those from
a file that can be localized.

00:59:19.630 --> 00:59:22.240
So again, this code is in your outline.

00:59:23.680 --> 00:59:27.240
And the only change really is that we're,
instead of just setting

00:59:27.400 --> 00:59:31.900
the string by itself,
we're passing that as a key into a

00:59:31.900 --> 00:59:34.580
handler called mylocalizedstring.

00:59:34.610 --> 00:59:36.580
You might wonder what that is.

00:59:36.580 --> 00:59:38.570
Well, we haven't added it yet.

00:59:39.580 --> 00:59:42.020
So let's go ahead and do that.

00:59:42.020 --> 00:59:43.700
And this is just simply a convenience.

00:59:43.700 --> 00:59:46.650
I could have added this
localized string command right

00:59:46.760 --> 00:59:50.040
within the script code twice,
but this just makes things

00:59:50.040 --> 00:59:51.110
a little bit cleaner.

00:59:51.300 --> 00:59:58.890
And this is the CFBundle identifier that
is set in your Actions target inspector.

00:59:59.010 --> 01:00:02.750
It's set automatically for you based
on the project name at creation time,

01:00:02.750 --> 01:00:04.900
but if you change it for any reason,
you'll need to make sure

01:00:04.900 --> 01:00:05.840
that you update it here.

01:00:05.900 --> 01:00:16.860
And this setting needs to match
this setting in the inspector panel.

01:00:17.030 --> 01:00:17.130
Let me zoom in for you.

01:00:24.920 --> 01:00:27.980
in order to look up the
file to find those strings.

01:00:27.980 --> 01:00:30.900
So of course the next step is
we actually need to add a file

01:00:31.120 --> 01:00:33.640
that contains those strings.

01:00:33.770 --> 01:00:36.570
So we'll add that to
our resources folder.

01:00:37.260 --> 01:00:42.790
Create a new file in Xcode and we're just
going to select empty file in project.

01:00:44.340 --> 01:00:45.620
And this is an important point.

01:00:45.720 --> 01:00:49.890
This file must be named
localizable.strings.

01:00:49.960 --> 01:00:53.190
Spelled correctly, strings.

01:00:57.320 --> 01:01:00.400
and this will look very similar
to the Info.plist.strings,

01:01:00.400 --> 01:01:03.210
it's just key equals value again.

01:01:04.440 --> 01:01:08.170
For the strings that we
want to make localizable.

01:01:08.240 --> 01:01:10.740
And to test this,
I know you might not believe

01:01:10.740 --> 01:01:14.000
me that they're localizable,
so let's actually change the values

01:01:14.000 --> 01:01:18.570
to make sure that our action actually
really is looking these up out

01:01:18.570 --> 01:01:21.140
of the localizable.strings file,
which again would make it

01:01:21.260 --> 01:01:25.500
possible for you to duplicate
this to another languages.lproj.

01:01:25.500 --> 01:01:30.240
And one thing that I overlooked here is
we need to make this file localizable.

01:01:30.240 --> 01:01:34.910
So by selecting the file in
the groups and files column,

01:01:35.090 --> 01:01:37.570
we again bring up the inspector.

01:01:38.040 --> 01:01:42.610
and click the
Make File Localizable button.

01:01:42.610 --> 01:01:44.030
That's all it takes.

01:01:44.030 --> 01:01:47.790
And that will move it into the
right place in our project.

01:01:48.890 --> 01:01:50.520
And we're of course seeing
the English version,

01:01:50.520 --> 01:01:54.200
but again you can duplicate this and
then change the values to translate

01:01:54.200 --> 01:01:57.890
return duplicate items into whichever
language you're working with.

01:01:58.090 --> 01:02:00.510
So let's build and test that.

01:02:04.860 --> 01:02:06.960
bring out our action again.

01:02:06.960 --> 01:02:11.830
And as you can see, or maybe not,
now you can see, we have

01:02:12.260 --> 01:02:14.190
bring out our action again.

01:02:14.380 --> 01:02:19.110
And as you can see, or maybe not,
now you can see, we have

01:02:22.600 --> 01:02:52.100
[Transcript missing]

01:02:54.070 --> 01:02:56.310
And our final step today is I'd
like to show you a little bit about

01:02:56.330 --> 01:02:59.110
how to test and debug your actions.

01:02:59.710 --> 01:03:01.920
So you've seen a little
bit of this already.

01:03:01.940 --> 01:03:06.640
I showed you the Automator
Custom Executable,

01:03:06.850 --> 01:03:11.170
which has a dash action argument
configured to pass your action to

01:03:11.170 --> 01:03:14.190
Automator when you hit build and go.

01:03:14.550 --> 01:03:17.240
I'm going to talk a little bit more
about AMLint on the next slide,

01:03:17.240 --> 01:03:19.780
but that's a new tool that
we've added in Xcode 2.1,

01:03:19.780 --> 01:03:22.860
and that's run before launching
Automator and after your Action is

01:03:22.890 --> 01:03:24.640
built to do some verification.

01:03:24.750 --> 01:03:27.450
You can also build and debug,
which again I'll do in a moment,

01:03:27.610 --> 01:03:32.740
to use the AppleScript debugger to step
through your script code and view the

01:03:32.740 --> 01:03:35.740
variables as you're stepping through it.

01:03:36.030 --> 01:03:38.200
When you're testing your
action within a workflow,

01:03:38.230 --> 01:03:41.900
you may want to be able to pause and
step through each action to verify

01:03:41.900 --> 01:03:44.420
that the output that's going in--
or the input that's going into your

01:03:44.490 --> 01:03:49.480
action is what you want and even cancel
if things are going badly for you.

01:03:49.700 --> 01:03:52.600
And in order to do that,
you can add pairs of view results actions

01:03:52.600 --> 01:03:57.140
to see the output of the previous action
and therefore the next action's input

01:03:57.310 --> 01:04:02.500
and ask for confirmation actions to
pause and then cancel if you like or

01:04:02.500 --> 01:04:05.460
continue the execution of the workflow.

01:04:05.740 --> 01:04:06.980
So AMLint.

01:04:06.980 --> 01:04:11.290
AMLint is an action verification tool,
as you might gather from the name.

01:04:11.330 --> 01:04:14.360
This is new in Xcode 2.1,
and we've integrated it right

01:04:14.360 --> 01:04:15.660
into the Action Project Templates.

01:04:15.660 --> 01:04:16.990
You get this out of the box.

01:04:16.990 --> 01:04:18.240
It's another build phase.

01:04:18.240 --> 01:04:21.270
It's run automatically
after your action is built,

01:04:21.310 --> 01:04:25.220
but before it launches Automator
and passes your action to it.

01:04:25.230 --> 01:04:28.580
You can also run it on
existing .action bundles.

01:04:28.580 --> 01:04:30.440
It's in userbin.amlint.

01:04:30.440 --> 01:04:34.260
And what it does is it checks
for various violations of the

01:04:34.260 --> 01:04:37.250
design guidelines in the Nib,
in the InfoP list,

01:04:37.250 --> 01:04:40.640
and we will continue to
expand its checks over time.

01:04:40.670 --> 01:04:44.670
But it can really help you to
avoid some common problems.

01:04:45.060 --> 01:04:47.960
So what we're going to do in this
step is I'm going to show you some

01:04:48.080 --> 01:04:51.770
common errors in the nib that AMLint
will flag and how to fix them,

01:04:51.770 --> 01:04:54.760
and then debug the action using
some AppleScript log statements

01:04:54.850 --> 01:04:56.520
as well as the debugger.

01:04:56.550 --> 01:05:04.120
So I'll try--and we're running long here,
so I will keep this a bit short.

01:05:04.130 --> 01:05:07.590
Let's go into our main.AppleScript.

01:05:10.380 --> 01:05:13.060
What we're going to do for this one is,
in contrast to all the other milestones,

01:05:13.060 --> 01:05:18.610
is the Step 6 milestone is actually
the beginning milestone for this

01:05:19.500 --> 01:05:25.960
If you are following along with me,
please open up the Step 6 project.

01:05:31.570 --> 01:05:35.880
So here's our main.AppleScript.

01:05:35.880 --> 01:05:39.110
And, well, we don't need to do that yet.

01:05:39.920 --> 01:05:43.650
What we want to do is add some
logging in our handlers just

01:05:43.690 --> 01:05:46.790
to make sure that they're being
executed when we think they are.

01:05:46.810 --> 01:05:50.930
And one trick,
it's not actually necessary here,

01:05:51.160 --> 01:05:53.800
but it's a good habit to get into,
is to use "tell me to log"

01:05:53.800 --> 01:05:57.800
instead of just "log". If you're
within another tell block,

01:05:57.800 --> 01:06:01.010
a plain log statement will not
give you the desired results,

01:06:01.010 --> 01:06:06.800
but "tell me to log" will always
give you what you're expecting.

01:06:06.800 --> 01:06:10.190
let's do the same thing
within our update example.

01:06:18.400 --> 01:06:20.940
We'll save that.

01:06:20.950 --> 01:06:23.510
And then let's build and debug.

01:06:26.270 --> 01:06:28.610
All right, well you might not be
able to see that there,

01:06:28.650 --> 01:06:30.420
but our build actually failed.

01:06:30.420 --> 01:06:32.520
Our errors and warnings is red
and we see down here in the

01:06:32.520 --> 01:06:34.770
status bar that the build failed.

01:06:34.910 --> 01:06:38.160
So let's look up at our
errors and warnings.

01:06:40.600 --> 01:06:44.690
Okay, so we see that AMLint has
flagged two errors in our nib,

01:06:44.800 --> 01:06:47.730
that text fields are
using the wrong font.

01:06:47.870 --> 01:06:50.660
So let's open up our nib again.

01:06:50.660 --> 01:06:53.800
And we can see that yes, in fact,
in this version of the nib,

01:06:53.800 --> 01:06:59.780
in this milestone, the example label and
placeholder are the wrong font.

01:06:59.850 --> 01:07:02.290
They're much bigger than
the other fonts here.

01:07:02.300 --> 01:07:04.050
And if we look at the
attributes we'll see that yes,

01:07:04.070 --> 01:07:05.300
in fact, the size is regular.

01:07:05.300 --> 01:07:08.520
So that's the error,
the violation of the design

01:07:08.520 --> 01:07:10.150
guidelines that AMLint is flagging.

01:07:10.150 --> 01:07:13.330
And if we fix those...

01:07:15.600 --> 01:07:19.970
and we save our nib and we'll
take the time to realign those.

01:07:19.970 --> 01:07:21.870
Now if we build and debug,

01:07:22.670 --> 01:07:25.800
Our build should complete and
Automator should launch within

01:07:25.800 --> 01:07:27.910
the AppleScript debugger.

01:07:30.500 --> 01:07:36.890
Let's build a workflow
and actually test this.

01:07:36.890 --> 01:07:39.480
So when I showed you
running this earlier,

01:07:39.480 --> 01:07:43.500
I showed it to you running,
selecting multiple items.

01:07:43.500 --> 01:07:46.760
So let's just select,
actually I did show it selecting one.

01:07:46.760 --> 01:07:49.760
Let's just select one single item.

01:07:51.070 --> 01:07:54.300
And what we see is in View Results
that we get an empty list.

01:07:54.340 --> 01:07:55.700
Well,
that's not what we should have gotten.

01:07:55.700 --> 01:07:58.000
We should have gotten
a list with one item,

01:07:58.000 --> 01:08:02.030
the duplicated item for the

01:08:02.280 --> 01:08:06.380
: Well, so that's not good,
but let's see if that is specific

01:08:06.510 --> 01:08:08.970
to returning the duplicate items.

01:08:08.990 --> 01:08:11.410
Let's run the workflow again.

01:08:15.900 --> 01:08:17.640
Okay,
in that case we did get what we expected.

01:08:17.640 --> 01:08:20.800
We got a reference to the input file.

01:08:20.990 --> 01:08:25.630
So this bug seems to be specific
to returning duplicate items,

01:08:25.630 --> 01:08:32.950
and we can further test this
by selecting multiple items.

01:08:34.280 --> 01:08:38.180
In that case, you can see, I hope,
that we are in fact getting

01:08:38.180 --> 01:08:40.470
references to the duplicated items.

01:08:40.470 --> 01:08:44.210
So this seems to be specific to
returning duplicate items when

01:08:44.210 --> 01:08:46.610
only one item has been added.

01:08:47.340 --> 01:08:49.910
So we've got this already
running under the debugger,

01:08:49.910 --> 01:08:53.300
main.AppleScript, and put in a breakpoint
so we can step through.

01:08:53.300 --> 01:08:55.760
And we know that the
problem is within this case,

01:08:55.780 --> 01:08:57.140
so let's break there.

01:08:57.170 --> 01:08:59.600
And in Xcode,
for those of you not familiar,

01:08:59.600 --> 01:09:02.450
you just click in the
margin to add a breakpoint.

01:09:02.570 --> 01:09:07.740
And in fact, in Xcode 2.1,
we can add breakpoint actions,

01:09:07.770 --> 01:09:10.970
including AppleScript commands.

01:09:15.950 --> 01:09:17.590
Not a second-class citizen.

01:09:17.590 --> 01:09:19.930
So let's see,
we want to just display dialog,

01:09:20.170 --> 01:09:23.990
returning duplicate items.

01:09:24.900 --> 01:09:27.600
and we can add in one of these
placeholders which you probably

01:09:27.600 --> 01:09:31.130
can't see because it's too
small but there are various

01:09:31.340 --> 01:09:36.610
Placeholder,
so we want to add in the breakpoint name.

01:09:38.430 --> 01:09:41.360
Okay, so that's our break point and
we're still within the debugger,

01:09:41.360 --> 01:09:44.950
so let's go back and
run that workflow again.

01:09:46.510 --> 01:09:49.850
and we know that the failure case
is when we only pass in one item,

01:09:49.850 --> 01:09:51.740
so let's do that.

01:09:52.400 --> 01:09:56.330
And here's our display dialog
with our breakpoint action.

01:09:56.330 --> 01:09:59.050
And here we are stopped in the debugger.

01:09:59.080 --> 01:10:02.980
So let's make that a little
bit bigger and zoom in.

01:10:04.850 --> 01:10:07.190
So let's go ahead and step through this.

01:10:07.190 --> 01:10:09.840
Another thing to point out
is we've got all of our,

01:10:09.850 --> 01:10:12.600
we've got our variables
displayed up here.

01:10:12.790 --> 01:10:13.750
Duplicate Finder Items.

01:10:13.830 --> 01:10:18.030
That's the result that we got
returned from the command of Finder.

01:10:18.140 --> 01:10:21.400
And let's see,
we've got our two locations.

01:10:21.470 --> 01:10:25.110
So let's step through and
find out what happened here.

01:10:27.580 --> 01:10:30.090
So here's where we're going
to loop through our list of

01:10:31.050 --> 01:10:33.380
items returned from Finder.

01:10:34.740 --> 01:10:38.240
and we see we skipped
right past the loop.

01:10:38.240 --> 01:10:41.420
Well, that would certainly explain,
since duplicate item aliases

01:10:41.420 --> 01:10:43.870
is still an empty list,
why we're getting an empty

01:10:43.950 --> 01:10:46.460
list as our return value.

01:10:46.460 --> 01:10:48.560
So we've tracked down
where the problem is,

01:10:48.580 --> 01:10:51.270
then we need to figure out why,
and in fact we can see that

01:10:51.270 --> 01:10:54.140
duplicate finder items isn't a list.

01:10:54.140 --> 01:10:56.430
So finder is not returning us
a list as we were expecting,

01:10:56.460 --> 01:10:58.940
so we're going to have to be a
little bit smarter about that,

01:10:58.980 --> 01:11:01.660
and I will leave it as an
exercise to all of you,

01:11:01.740 --> 01:11:07.140
or you can just open up the final
step which has this bug corrected.

01:11:07.410 --> 01:11:11.570
And finally, let me just show you the
console log to show you that,

01:11:11.570 --> 01:11:15.480
in fact, our log statements when
Awake from Nib was called,

01:11:15.530 --> 01:11:18.820
which happens once, and I clicked the
checkbox a couple times,

01:11:18.820 --> 01:11:21.800
so each time I did that,
as well as on opening,

01:11:21.820 --> 01:11:26.370
we got our updating example
log message to the console log.

01:11:28.430 --> 01:11:32.640
So with that,
let's back to slides please.

01:11:32.640 --> 01:11:36.930
So just one final point about
installing your actions.

01:11:36.930 --> 01:11:39.530
Apple's actions go in
System Library Automator,

01:11:39.690 --> 01:11:42.030
but for your actions,
if you have an installer,

01:11:42.030 --> 01:11:45.780
you can install them in the user's
home directory Library Automator

01:11:46.180 --> 01:11:48.880
or for everyone on the
system in /library/automator.

01:11:48.990 --> 01:11:53.060
You can also put them in the
network domain of the library.

01:11:53.170 --> 01:11:56.980
Or what is very useful for those of you
who have applications that just have drag

01:11:56.980 --> 01:11:59.780
installs and you don't have an installer,
you don't need to add one

01:11:59.780 --> 01:12:01.210
just for Automator Actions.

01:12:01.210 --> 01:12:04.790
You can install your Automator Actions
inside your application bundle,

01:12:04.790 --> 01:12:08.030
inside contents library Automator,
and Automator will automatically

01:12:08.140 --> 01:12:12.360
find them as soon as your application
is dragged onto the user system.

01:12:14.310 --> 01:12:16.860
So, just to sum up,
what have we learned today?

01:12:16.860 --> 01:12:22.400
We've learned how to build, test, debug,
and install an action using AppleScript,

01:12:22.530 --> 01:12:24.760
AppleScript Studio,
and Cocoa Bindings to manage the

01:12:24.760 --> 01:12:28.700
relationship between your actions user
interface elements and your scripts.

01:12:28.790 --> 01:12:33.010
And we've used interface builder and
Xcode to build and manage our project.

01:12:33.880 --> 01:12:35.460
So what next?

01:12:35.470 --> 01:12:38.810
Well, I hope-- I know that some of
you are following along and

01:12:38.810 --> 01:12:42.040
continue to experiment with
this particular sample project.

01:12:42.040 --> 01:12:44.380
There's quite a bit of documentation.

01:12:44.380 --> 01:12:48.420
There's a brand new AppleScript action
tutorial that has just been released,

01:12:48.440 --> 01:12:50.270
along with Xcode 2.1.

01:12:50.290 --> 01:12:53.510
And explore the other example projects
that are part of the developer tools

01:12:53.510 --> 01:12:55.180
in Developer Examples Automator.

01:12:55.180 --> 01:12:58.060
There are a number of examples,
not just for AppleScript Actions,

01:12:58.180 --> 01:13:00.200
but for the other action types as well.

01:13:00.220 --> 01:13:04.020
And finally,
go back to work and write and ship lots

01:13:04.090 --> 01:13:05.810
of great actions for your applications.

01:13:05.890 --> 01:13:08.100
We're really looking forward to that.

01:13:08.990 --> 01:13:12.080
So just a pointer to the general URL.

01:13:12.200 --> 01:13:15.550
This has pointers to the
documentation that I've referred

01:13:15.610 --> 01:13:21.200
to as well as the sample code and
other resources for this topic.

01:13:21.250 --> 01:13:25.510
There are a great number of related
sessions going on this afternoon and

01:13:25.510 --> 01:13:29.370
all day tomorrow on Cocoa Bindings,
Cocoa Automator Actions,

01:13:29.510 --> 01:13:32.000
AppleScript Studio, two labs tomorrow.

01:13:32.000 --> 01:13:34.050
If you would like some help
or get stuck with writing

01:13:34.160 --> 01:13:37.160
actions for your application,
please come to the lab tomorrow morning

01:13:37.170 --> 01:13:39.100
and we'll be more than happy to help you.

01:13:39.280 --> 01:13:43.380
And then finally tomorrow afternoon,
I hope you'll stick around.

01:13:43.400 --> 01:13:47.100
I know that's going to be a great
session on Automator Actions using

01:13:47.100 --> 01:13:52.430
the new shell scripting action type
tomorrow afternoon in building Automator

01:13:52.430 --> 01:13:54.720
Actions for System Administrators.

01:13:55.870 --> 01:13:58.970
Some contact information,
I'd like to highlight the developer

01:13:59.050 --> 01:14:04.370
mailing list which I'm sure a
number of you are participating in.

01:14:04.740 --> 01:14:07.560
and I encourage you to subscribe
and we're starting to build

01:14:07.720 --> 01:14:09.700
a great community there.

01:14:09.700 --> 01:14:13.210
The Apple engineers try to help out
as well but there's been a lot of

01:14:13.260 --> 01:14:15.980
outside developers that have been
helping each other and that's great.

01:14:15.980 --> 01:14:16.880
We're building a community.