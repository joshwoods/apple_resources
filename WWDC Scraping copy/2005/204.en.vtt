WEBVTT

00:00:05.400 --> 00:00:08.840
Good afternoon everyone,
welcome to the Quartz

00:00:08.840 --> 00:00:10.930
Composer hands-on session.

00:00:11.210 --> 00:00:12.480
Let's get started immediately.

00:00:12.630 --> 00:00:15.320
We've got a lot of content to see today.

00:00:15.400 --> 00:00:17.100
So first of all, what is Quartz Composer?

00:00:17.100 --> 00:00:20.850
I assume that most of you are
actually familiarized by now about

00:00:20.850 --> 00:00:25.220
this motion graphics technology,
especially since the demos yesterday

00:00:25.280 --> 00:00:27.700
during the graphics and media keynote.

00:00:27.700 --> 00:00:31.580
But let's just go over this
quick overview once again.

00:00:31.810 --> 00:00:36.040
So Quartz Composer is an operating
system-level motion graphics technology,

00:00:36.040 --> 00:00:38.040
and operating system
level is very important.

00:00:38.090 --> 00:00:40.890
It's not like a side technology
or something like that.

00:00:40.900 --> 00:00:42.340
It's sort of integrated into Tiger.

00:00:42.340 --> 00:00:44.940
It was built around two key things.

00:00:45.350 --> 00:00:49.400
OpenGL to get high performance
and real-time graphics.

00:00:49.400 --> 00:00:52.750
And at the same time it was built
about this idea of integrating

00:00:52.750 --> 00:00:56.380
all of our graphics technologies
through a common technology.

00:00:57.040 --> 00:01:01.720
What you do with Quartz Composer is
create what we call Compositions.

00:01:01.720 --> 00:01:04.270
Compositions basically
render visuals on screen.

00:01:04.330 --> 00:01:07.070
Now, those Compositions are not
necessarily black boxes.

00:01:07.170 --> 00:01:11.910
They actually can be interactive
with external user devices,

00:01:11.920 --> 00:01:14.480
the basic ones being the
mouse or the keyboard.

00:01:14.480 --> 00:01:17.100
But also some,
they can also communicate with

00:01:17.100 --> 00:01:21.360
the host application because those
Compositions can have what we call input

00:01:21.400 --> 00:01:25.850
parameters or produce output results
which are not necessarily visuals.

00:01:26.380 --> 00:01:30.160
The way you create Compositions
in Tiger is by using our full

00:01:30.230 --> 00:01:35.120
features graphical editor,
part of the developer tool.

00:01:35.220 --> 00:01:38.560
We also try to make sure that
Composition would be easily supported

00:01:38.580 --> 00:01:40.580
by various applications in Tiger.

00:01:40.580 --> 00:01:43.090
And for that,
we have QuickTime compatibility

00:01:43.100 --> 00:01:45.970
that is Tiger only,
and we'll look at that in details

00:01:46.440 --> 00:01:48.290
later during this presentation.

00:01:48.440 --> 00:01:52.770
And we also have a very easy to use
API so that you can integrate Quartz

00:01:52.800 --> 00:01:54.770
Composer into your applications.

00:01:55.460 --> 00:01:57.580
Pierre-OliviÃ© Latour:
So as I said earlier,

00:01:57.590 --> 00:02:00.400
Quartz Composer is really
integrating several technologies.

00:02:00.400 --> 00:02:03.850
If you look at this simple graph here,
we have most of our graphics

00:02:03.930 --> 00:02:07.320
technology from OpenGL and the
new one we introduced in Tiger,

00:02:07.320 --> 00:02:09.400
Core Image, Core Video and such.

00:02:09.470 --> 00:02:13.320
And also some technologies that
are not necessarily graphics

00:02:13.320 --> 00:02:17.200
like simply JavaScript or
some basic spotlight queries.

00:02:17.260 --> 00:02:21.400
And all those technologies are kind
of bridged through Quartz Composer.

00:02:21.400 --> 00:02:25.400
And then the Quartz Composer system
is used by a variety of hosts.

00:02:25.400 --> 00:02:30.240
Right now we have three hosts
and we look at those in detail

00:02:30.240 --> 00:02:32.400
during the presentation.

00:02:32.600 --> 00:02:35.320
There's going to be the
screen saver engine.

00:02:35.600 --> 00:02:38.330
There's going to be QuickTime and
finally your applications.

00:02:38.400 --> 00:02:42.030
So what's interesting here is that
from a developer point of view,

00:02:42.090 --> 00:02:46.390
instead of having to learn all the
various APIs for all those technologies,

00:02:46.390 --> 00:02:51.400
you can simply learn the Quartz
Composer graphical editing system.

00:02:51.400 --> 00:02:55.970
And learn the little -- the easy to
use playback API and leverage all those

00:02:55.970 --> 00:03:00.790
APIs and don't have to take care about
how they need to interact together,

00:03:00.790 --> 00:03:06.750
how you connect them together and just
use that very easily in your application.

00:03:07.020 --> 00:03:11.240
But I did actually found on the
internet a pretty nice description

00:03:11.240 --> 00:03:13.810
of what Quartz Composer could be.

00:03:17.900 --> 00:03:20.500
Now that said,
what are we going to learn today?

00:03:20.600 --> 00:03:25.280
This hands-on session is
divided into four tutorials.

00:03:25.610 --> 00:03:28.250
The first one will be creating
a parameterized Composition

00:03:28.390 --> 00:03:29.290
using Quartz Composer.

00:03:29.320 --> 00:03:32.190
So it's a little more than
your basic Composition.

00:03:32.230 --> 00:03:34.500
It's one that has
actually input parameters.

00:03:34.770 --> 00:03:38.570
Then we're going to look at where
and how we can use this Composition

00:03:38.570 --> 00:03:40.790
straight out of the box in Tiger.

00:03:41.420 --> 00:03:45.710
We're also going to look at using
the Playback API so that you can have

00:03:46.030 --> 00:03:48.800
even better integration of Quartz
Composer inside your applications.

00:03:48.950 --> 00:03:52.210
And we'll finish by building what
I called a kind of a complete Quartz

00:03:52.210 --> 00:03:55.800
Composer application from scratch that
really takes advantage of the technology.

00:03:55.800 --> 00:04:00.810
And hopefully after these four
tutorials you'll be able to add Quartz

00:04:00.810 --> 00:04:04.010
Composer support to your applications
and create new applications with

00:04:04.010 --> 00:04:05.780
compelling motion graphics visual.

00:04:05.800 --> 00:04:09.560
It's kind of important
because some people outside,

00:04:09.560 --> 00:04:14.700
some users are really waiting for you
to come up with those applications.

00:04:19.370 --> 00:04:21.950
Okay.

00:04:22.030 --> 00:04:25.330
Let's start with tutorial number one,
which is, as I said,

00:04:25.420 --> 00:04:28.000
creating a parameterized Composition.

00:04:29.920 --> 00:04:34.140
So the first thing we're going to do
is obviously launch Quartz Composer.

00:04:34.140 --> 00:04:37.270
And for that you simply go
to the Developer folder and

00:04:37.270 --> 00:04:40.700
then the Applications folder,
Graphics Tools folder,

00:04:40.700 --> 00:04:44.070
and you will find the editing
application right there.

00:04:44.470 --> 00:04:46.800
Double-click to launch.

00:04:46.800 --> 00:04:48.700
You can click cancel
on the Assistant panel.

00:04:48.700 --> 00:04:52.660
We're actually not going to use
the Assistant for this tutorial.

00:04:52.660 --> 00:04:56.450
And let's close that window as well.

00:04:56.450 --> 00:04:56.450
Okay.

00:04:57.370 --> 00:05:00.640
Now in Quartz Composer you can
create a blank document simply

00:05:00.640 --> 00:05:03.500
by doing New in the File menu.

00:05:04.360 --> 00:05:09.100
So here we have the typical Quartz
Composer environment with the viewer

00:05:09.100 --> 00:05:12.640
window over there that actually shows
what the Composition is rendering,

00:05:12.720 --> 00:05:14.500
its output visuals in a way.

00:05:14.530 --> 00:05:19.510
And here we have the editing window,
which is where you assemble the

00:05:19.510 --> 00:05:22.720
various Quartz Composer components
that we actually call patches and

00:05:22.770 --> 00:05:27.450
you connect them together and which
are gonna build a workflow that's

00:05:27.450 --> 00:05:30.090
eventually gonna create visuals.

00:05:30.280 --> 00:05:32.200
So let's get started
and create some visuals.

00:05:32.290 --> 00:05:36.470
The first thing we're going to do
is simply paint the background,

00:05:36.590 --> 00:05:39.600
I mean, with a gradient,
because right now there is absolutely

00:05:39.600 --> 00:05:41.090
nothing rendered by the Composition.

00:05:41.200 --> 00:05:47.600
As you can see,
it's indicated by the fact there is

00:05:47.600 --> 00:05:47.600
a simple gray and white checkerboard.

00:05:47.850 --> 00:05:53.760
If you need to find a given patch
to do some visual operations,

00:05:53.760 --> 00:05:57.660
the easiest way is actually to use
that search field in the editor window.

00:05:57.750 --> 00:06:00.100
So if I want to paint the
background with a gradient,

00:06:00.100 --> 00:06:03.500
I can simply type the keyword gradient,
and then it's going to restrict

00:06:03.500 --> 00:06:07.400
the list of patches to those
who are related to gradients.

00:06:07.550 --> 00:06:12.560
The one we're going to use
is the renderer gradient.

00:06:13.800 --> 00:06:44.000
[Transcript missing]

00:06:45.490 --> 00:06:50.240
So let's pick up some kind of light blue.

00:06:50.320 --> 00:06:52.740
And obviously,
to edit the middle and end color,

00:06:52.740 --> 00:06:55.890
we could do as well and double
click on each of those circles.

00:06:56.030 --> 00:06:59.730
But there is an easier way when you
want to edit multiple parameters.

00:07:00.010 --> 00:07:03.600
You actually select the gradient patch,
and then you click on

00:07:03.600 --> 00:07:04.980
the Expector button.

00:07:07.370 --> 00:07:10.150
Now in the Inspector button,
you can obviously inspect the

00:07:10.150 --> 00:07:12.900
various aspects of the patch
that is currently selected.

00:07:12.910 --> 00:07:16.500
And you want to look at
the input parameters pane.

00:07:16.580 --> 00:07:20.740
Here you can see all the
parameters of the patch at once.

00:07:20.800 --> 00:07:23.000
So we're just going to
take the current color,

00:07:23.000 --> 00:07:25.600
the current start color,
and drag and drop it on the

00:07:25.600 --> 00:07:27.970
middle color and end color.

00:07:28.370 --> 00:07:32.180
Now when I click on the middle color,
I can see the usual color picker

00:07:32.180 --> 00:07:36.020
and I only have to change one
parameter which would be the

00:07:36.020 --> 00:07:37.760
kind of luminosity of the color.

00:07:37.810 --> 00:07:43.560
And this way I can create my gradient,
my blue gradient of three colors.

00:07:43.650 --> 00:07:45.820
So we have our first step,
simply painting the background

00:07:45.820 --> 00:07:46.660
with a blue gradient.

00:07:46.770 --> 00:07:48.480
Now we're going to add
some animation to it.

00:07:48.600 --> 00:07:52.450
An easy way to add animation
is to use a particle system.

00:07:52.540 --> 00:07:56.040
So let's look in the list of
patches for particle system

00:07:56.160 --> 00:07:58.810
and create an instance of it,
like for the gradient,

00:07:58.820 --> 00:08:02.280
simply by drag and dropping
it in the workspace.

00:08:03.160 --> 00:08:05.980
So a particle system is,
as the name implies,

00:08:05.980 --> 00:08:10.020
a system of particles that evolve in time
according to very simple physics law,

00:08:10.020 --> 00:08:14.290
depending on the speed of the particles,
their acceleration,

00:08:14.300 --> 00:08:17.810
the gravity of the environment, and such.

00:08:18.170 --> 00:08:22.500
Right now there are absolutely no images
that are displayed on the particles,

00:08:22.520 --> 00:08:25.100
so you just see a bunch of white squares.

00:08:25.230 --> 00:08:27.500
So we're going to load an image.

00:08:28.100 --> 00:08:47.800
[Transcript missing]

00:08:48.700 --> 00:08:52.750
And we can simply drag and drop
that image file into the workspace.

00:08:52.860 --> 00:08:57.300
What it does is it actually creates on
the fly an image patch that contains,

00:08:57.460 --> 00:09:01.160
that embeds the data
of that particle image.

00:09:01.270 --> 00:09:04.280
Now what we want to do is to have
the image parameter of the particle

00:09:04.340 --> 00:09:06.360
system be that image we just loaded.

00:09:06.360 --> 00:09:10.400
So we just create a connection
by clicking on the output here

00:09:10.520 --> 00:09:12.980
and connecting it to image.

00:09:13.640 --> 00:09:17.130
Let's get the viewer in foreground.

00:09:17.230 --> 00:09:20.180
Now we can set the parameters
of the viewer itself.

00:09:20.270 --> 00:09:24.540
So just click on the particle system,
make sure it's selected.

00:09:24.960 --> 00:09:27.340
And then display the
input parameters pane,

00:09:27.340 --> 00:09:29.950
and there we can change the,
at the bottom of it,

00:09:29.970 --> 00:09:32.660
we can change the blending
operation to set it to add,

00:09:32.660 --> 00:09:36.180
which creates a nice saturation effect
because all the images are actually

00:09:36.180 --> 00:09:38.010
being added on top of each other.

00:09:38.050 --> 00:09:40.180
So you get this white saturation effect.

00:09:40.360 --> 00:09:43.620
We're also gonna change one parameter,
which is the attraction

00:09:43.620 --> 00:09:46.730
at the very bottom,
which is currently set to 0.5,

00:09:46.730 --> 00:09:48.770
and we're gonna set it to zero.

00:09:50.690 --> 00:09:54.520
So now we have a nice
kind of star field effect.

00:09:54.580 --> 00:09:58.420
Next step is going to be to
add a simple logo to hide the

00:09:58.420 --> 00:10:01.350
origin point of that star field.

00:10:02.330 --> 00:10:03.640
So, same step.

00:10:03.640 --> 00:10:07.260
You use the Apple logo.png
file that is in the materials

00:10:07.260 --> 00:10:09.720
folder for this tutorial.

00:10:10.400 --> 00:10:15.280
And we have that image in the workspace
and we want to display it in the viewer.

00:10:15.360 --> 00:10:19.220
The simplest way to just display
an image into the viewing

00:10:19.220 --> 00:10:21.490
area is to use a billboard.

00:10:21.760 --> 00:10:24.600
So let's create an instance
of that billboard patch.

00:10:24.600 --> 00:10:28.180
And the billboard is simply a 2D
quad that is always facing the

00:10:28.190 --> 00:10:31.040
viewer that has an image on it.

00:10:31.340 --> 00:10:35.820
So we configured the billboard
to use the image we just loaded.

00:10:35.820 --> 00:10:41.340
And we need to set the blending
parameter of the billboard to over so

00:10:41.440 --> 00:10:43.620
that we actually have some transparency.

00:10:43.620 --> 00:10:45.780
And at the same time,
we can change the width

00:10:45.860 --> 00:10:47.910
to be something like 0.5.

00:10:48.070 --> 00:10:49.850
Sorry, that's better.

00:10:52.330 --> 00:10:55.120
So we're slowly getting there
and our next step will be to

00:10:55.120 --> 00:10:56.840
actually add some text there.

00:10:56.840 --> 00:11:00.070
So how do you create, how do you display,
how do you create and display

00:11:00.070 --> 00:11:01.410
text in Quartz Composer?

00:11:01.550 --> 00:11:05.990
The way it actually works is by
creating an image that contains

00:11:06.060 --> 00:11:08.300
the text you want to display.

00:11:08.400 --> 00:11:11.020
For that we have this
image with string patch.

00:11:11.220 --> 00:11:14.240
As the name implies,
you pass in some text as a string

00:11:14.240 --> 00:11:18.150
and then it creates an image
that you can display afterwards.

00:11:18.680 --> 00:11:22.190
I'm going to show you a second
method to display an image.

00:11:22.240 --> 00:11:24.140
We've seen the billboard,
which is the simplest one,

00:11:24.140 --> 00:11:28.960
always facing the viewer for
very basic 2D image display.

00:11:29.200 --> 00:11:32.770
Another way to display an image
on screen is to use the Sprite.

00:11:32.890 --> 00:11:35.440
So Sprite is like an advanced
version of the billboard,

00:11:35.490 --> 00:11:36.300
except it's 3D.

00:11:36.550 --> 00:11:41.380
You can position it in a 3D space
and send for the orientation.

00:11:41.630 --> 00:11:46.040
So it has as well an image input that
I'm going to set to display that image.

00:11:46.040 --> 00:11:49.230
And then I'm going to set the
blending to be over as well

00:11:49.230 --> 00:11:51.330
so that we get transparency.

00:11:51.420 --> 00:11:54.740
Now you will notice that the
image does not appear right.

00:11:54.740 --> 00:11:56.660
I mean the quality is poor
and it appears distorted.

00:11:56.660 --> 00:11:57.740
What's the reason?

00:11:57.850 --> 00:12:03.230
Well, imagery string just creates an
image of a given dimensions.

00:12:03.260 --> 00:12:05.390
Here, 152 pixels by 31 pixels.

00:12:05.460 --> 00:12:11.200
And Sprite has two input parameters
called width and height that actually

00:12:11.200 --> 00:12:15.080
display determines the area in which
the image is going to be displayed.

00:12:15.150 --> 00:12:18.580
So if you want to have high quality,
you need to somehow interconnect

00:12:18.580 --> 00:12:25.780
those two things so that the
display area of Sprite matches the

00:12:26.030 --> 00:12:29.490
optimal display size of the image
we just created from the text.

00:12:29.640 --> 00:12:33.400
Hopefully there are those two parameters
called display width and display height.

00:12:33.490 --> 00:12:38.520
And we can just connect them to
the width and height of the sprite,

00:12:38.670 --> 00:12:44.640
And now, we really have the text that is
displayed at its optimal size.

00:12:44.640 --> 00:12:46.040
We need to make it bigger, though.

00:12:46.040 --> 00:12:48.500
So if you look,
if you select the imagery string patch

00:12:48.500 --> 00:12:53.140
and look in the input parameters pane,
you can set here the glyph size.

00:12:53.140 --> 00:12:57.640
All the units in Quartz Composer,
I expressed all the dimensions in

00:12:57.650 --> 00:13:03.240
Quartz Composer I expressed using
what we call Quartz Composer units.

00:13:03.240 --> 00:13:06.040
And the Quartz Composer
coordinate system is with the

00:13:06.070 --> 00:13:08.160
00 at the center of the viewer.

00:13:08.160 --> 00:13:11.540
Then we have minus 1 on the left,
plus 1 on the right,

00:13:11.540 --> 00:13:14.020
so that's the X axis which is horizontal.

00:13:14.020 --> 00:13:16.860
And then we got the
Y axis which is vertical.

00:13:16.860 --> 00:13:20.660
And the range of the Y axis actually
depends on your aspect ratio.

00:13:20.660 --> 00:13:24.500
Here we have something
like a 4 by 3 aspect ratio.

00:13:24.500 --> 00:13:28.950
So the maximum dimension on
the Y axis is going to be like

00:13:28.950 --> 00:13:32.660
075 and the minimum minus 075.

00:13:32.660 --> 00:13:35.720
And eventually we have the Z axis
that is coming towards the viewer.

00:13:35.720 --> 00:13:37.720
It's kind of an
OpenGL referential system.

00:13:38.800 --> 00:13:42.250
So anyway,
that means that the size of the

00:13:42.250 --> 00:13:45.700
font we're using to generate
that text is expressed in units.

00:13:45.870 --> 00:13:50.340
Here instead of 01,
I'm going to set it to 02.

00:13:50.470 --> 00:13:53.740
Some parameters of the
patches are not animatable.

00:13:53.820 --> 00:13:57.370
When you need to edit those,
you actually use the inspector

00:13:57.370 --> 00:13:59.240
and the settings pane.

00:13:59.360 --> 00:14:03.950
For the image-restoring patch,
we actually set up the font

00:14:03.980 --> 00:14:06.460
to use in the settings pane.

00:14:06.560 --> 00:14:11.650
So here we're going to change it to,
let's see,

00:14:12.140 --> 00:14:14.440
Ariel Bold would be nice.

00:14:14.440 --> 00:14:18.940
Obviously here we need to kind of clean
up the viewing area so that we don't have

00:14:18.940 --> 00:14:20.880
the text on top of the logo and such.

00:14:20.880 --> 00:14:22.860
It's fairly easy to do.

00:14:22.860 --> 00:14:27.280
We just select the sprite patch
and change the Y parameter to,

00:14:27.280 --> 00:14:29.500
let's see, minus zero two.

00:14:29.500 --> 00:14:30.690
That should be enough.

00:14:30.840 --> 00:14:35.230
And then we can set up the
Apple logo to be a little higher,

00:14:35.240 --> 00:14:36.430
0.2.

00:14:36.530 --> 00:14:41.030
Remember it's expressed in
units and the Y position as

00:14:41.030 --> 00:14:43.080
well of the particle system,
0.2.

00:14:43.240 --> 00:14:47.170
So let's save what we have for now.

00:14:50.610 --> 00:14:51.600
Okay.

00:14:51.700 --> 00:14:55.960
Now we're going to add some kind of
halo effect on the text itself and use

00:14:55.960 --> 00:14:58.590
some core image filters to achieve that.

00:14:59.410 --> 00:15:02.980
So you see the workspace here
is not really crowded yet,

00:15:03.250 --> 00:15:06.580
but when we add patch going
along through the demo,

00:15:06.580 --> 00:15:08.530
it's gonna become more and
more kind of complex to figure

00:15:08.530 --> 00:15:09.800
out what exactly is happening.

00:15:09.800 --> 00:15:12.520
So a good habit is to
create what we call macros.

00:15:13.250 --> 00:15:18.030
Therefore you can partition your
workspace into sub functions in a way.

00:15:18.220 --> 00:15:20.280
So we're gonna put the text into a macro.

00:15:20.430 --> 00:15:23.620
So what you do is simply
select the two patches.

00:15:23.620 --> 00:15:27.750
Then in the edit menu, you can cut them.

00:15:28.720 --> 00:15:32.140
You can create, using the Create Macro
button in the toolbar,

00:15:32.310 --> 00:15:34.240
a blank macro patch.

00:15:34.360 --> 00:15:38.960
And the way we actually edit a macro
patch is simply by double-clicking on it.

00:15:39.630 --> 00:15:43.380
What we see now in the workspace
is the inside of the Macropatch.

00:15:43.380 --> 00:15:46.300
To know where you are in the workspace
when you navigate in the Composition,

00:15:46.300 --> 00:15:49.100
we have this hierarchy browser here.

00:15:49.100 --> 00:15:53.260
And you can see root Macropatch,
Macropatch.

00:15:53.260 --> 00:15:57.220
And now what I can do is simply paste the

00:15:57.630 --> 00:15:59.350
Oops, there we go.

00:15:59.410 --> 00:16:01.350
Make sure the focus is
on the editor itself,

00:16:01.460 --> 00:16:02.530
the editing area.

00:16:02.600 --> 00:16:06.200
And here I can pass the two
patches that I just cut.

00:16:06.200 --> 00:16:08.420
They're not visible in the
workspace because they got actually

00:16:08.510 --> 00:16:13.790
pasted at their original position,
which was a little lower in the area.

00:16:15.080 --> 00:16:18.170
So we said we want to create some
kind of hello effect on the text.

00:16:18.280 --> 00:16:20.500
Simple way to do that is
simply to blur the text.

00:16:20.630 --> 00:16:24.950
So let's look for what kind
of core image filters we have

00:16:24.950 --> 00:16:27.810
to do blurring operations.

00:16:27.860 --> 00:16:30.350
The basic one is the Gaussian Blur.

00:16:32.760 --> 00:16:36.140
So let's take our image and send
it through the Gaussian Blur

00:16:36.140 --> 00:16:39.090
and display the result.

00:16:39.240 --> 00:16:41.540
So I'm just going to make a copy
of that sprite because it already

00:16:41.540 --> 00:16:43.610
has all the parameters I want.

00:16:43.630 --> 00:16:47.240
So you press the Option key
and you can drag and drop the

00:16:47.240 --> 00:16:49.280
sprite and create a copy of it.

00:16:49.310 --> 00:16:52.790
And we want it to display that image.

00:16:53.140 --> 00:16:56.220
Same problem as earlier,
the width and height are

00:16:56.220 --> 00:16:58.080
not necessarily correct.

00:16:58.080 --> 00:17:00.560
The text doesn't really match correctly.

00:17:00.560 --> 00:17:03.440
So we could just connect the
display width and display height to

00:17:03.440 --> 00:17:05.700
the width and height input there.

00:17:05.700 --> 00:17:07.140
But it's not going to work perfectly.

00:17:07.140 --> 00:17:08.140
Why is that?

00:17:08.140 --> 00:17:11.520
It's because if you look
at the original image,

00:17:11.590 --> 00:17:15.540
here it has dimensions
of 300 pixels by 58,

00:17:15.540 --> 00:17:16.640
approximately.

00:17:16.640 --> 00:17:20.130
But after the blurring operation,
because the blur expands the image,

00:17:20.130 --> 00:17:22.010
it's now a little bigger.

00:17:22.020 --> 00:17:25.030
by around 100 pixels.

00:17:26.590 --> 00:17:29.440
So the display width and height are
not going to be exactly accurate.

00:17:29.440 --> 00:17:31.170
So how do you get those accurate values?

00:17:31.190 --> 00:17:35.770
There's hopefully a tool for
that called Image Dimensions.

00:17:39.800 --> 00:17:41.550
Let me organize the workspace.

00:17:41.570 --> 00:17:42.560
Here we go.

00:17:42.560 --> 00:17:46.750
So the image dimensions simply takes
an image and returns various dimensions

00:17:46.750 --> 00:17:50.620
of that image expressed in Quartz
Composer units and its pixel as well,

00:17:50.620 --> 00:17:52.500
in case you really need those.

00:17:52.500 --> 00:17:56.460
And we can simply take the width
and height and connect those.

00:17:56.460 --> 00:18:00.060
And now we have the blurred version
of the text that is displayed at

00:18:00.070 --> 00:18:03.900
the appropriate size and that really
matches the text that is underneath.

00:18:03.900 --> 00:18:09.190
The last step to create the real halo
effect is to change one setting in the

00:18:09.190 --> 00:18:14.400
sprite parameter to have -- so that
the blending is add instead of over.

00:18:14.400 --> 00:18:18.120
And now you have the saturation effect
as the blurred version of the text is

00:18:18.120 --> 00:18:20.370
added on top of the non-blurred version.

00:18:21.980 --> 00:18:26.820
Last step is going to be to
animate this hello effect.

00:18:26.880 --> 00:18:31.300
What we would like to have is
the hello to kind of pulse.

00:18:31.920 --> 00:18:34.690
And let's see,
how can we achieve a pulse effect?

00:18:34.700 --> 00:18:36.500
Well, simply with the color.

00:18:36.510 --> 00:18:41.730
The color on the sprite is a color
that actually multiplies the image.

00:18:41.790 --> 00:18:46.220
If I click on the color here,
I can see that by changing its opacity,

00:18:46.220 --> 00:18:49.810
I can create my pulse
effect that I'm looking for.

00:18:50.670 --> 00:18:54.860
So how can I create that kind
of on the fly in the workspace?

00:18:54.920 --> 00:18:59.100
What you need here is a
little patch called RGB Color,

00:18:59.100 --> 00:19:02.550
which simply takes four
values for the RGB and alpha

00:19:02.610 --> 00:19:05.700
components and outputs a color.

00:19:06.990 --> 00:19:14.400
And now I can look at the alpha
component and create my blinking effect.

00:19:14.400 --> 00:19:16.640
So what we need to do,
it's obvious by now,

00:19:16.640 --> 00:19:19.140
is simply animate that alpha value.

00:19:19.220 --> 00:19:23.120
You have plenty of ways to create
animations in Quartz Composer.

00:19:23.120 --> 00:19:25.140
The one we're going to
use here is the LFO,

00:19:25.140 --> 00:19:27.340
which stands for
low-frequency oscillator.

00:19:27.340 --> 00:19:31.330
It simply generates a wave that
oscillates around a given value.

00:19:31.400 --> 00:19:35.900
By default it's going to oscillate with
an amplitude of 0.5 around the 0.5 point.

00:19:35.900 --> 00:19:38.200
Therefore it's going to
oscillate between 0 and 1,

00:19:38.200 --> 00:19:40.540
which is what we want because
the alpha value here actually

00:19:40.540 --> 00:19:43.310
expects something between 0 and 1.

00:19:43.910 --> 00:19:46.820
So now I have my pulsing effect,
and I'm just going to slow it down

00:19:46.820 --> 00:19:49.750
a little by setting the period to 2.

00:19:50.670 --> 00:19:53.240
And we can save the results.

00:19:53.290 --> 00:19:56.210
To go back to the root macro patch,
you just press the

00:19:56.210 --> 00:19:59.190
Edit Parent button here,
or you can use the hierarchy browser

00:19:59.350 --> 00:20:02.240
on the top of the editor to navigate.

00:20:02.910 --> 00:20:05.610
So we have our Composition,
so basic Composition,

00:20:05.610 --> 00:20:09.750
and we now want to turn it into
a parameterized Composition.

00:20:09.810 --> 00:20:13.750
So that you've seen here,
we have probably about 10 patches,

00:20:13.770 --> 00:20:15.890
each of those can have like
10 parameters or something,

00:20:15.890 --> 00:20:17.400
so it's already 100 parameters.

00:20:17.530 --> 00:20:19.950
But they're all about
those 100 parameters,

00:20:20.000 --> 00:20:22.940
not all of them matters,
only a few of them are important.

00:20:22.940 --> 00:20:27.500
So let's extract them and make them
input parameters of the Composition.

00:20:28.330 --> 00:20:29.170
How do we do that?

00:20:29.180 --> 00:20:34.200
Well,
let's start with the simplest one to do.

00:20:34.200 --> 00:20:37.470
We have, typically in that Composition,
three parameters.

00:20:37.530 --> 00:20:41.660
It's the Apple logo, the text,
and the overall color of the background.

00:20:41.660 --> 00:20:47.180
The simplest one to turn into a parameter
of the Composition is the Apple logo.

00:20:47.180 --> 00:20:52.820
So you actually control click on the
billboard to display the contextual menu,

00:20:52.830 --> 00:20:55.770
and here you have what we
call the publishing system

00:20:55.770 --> 00:20:57.490
for the inputs and outputs.

00:20:57.580 --> 00:21:02.110
What we're going to do is take that
image input of the billboard and publish

00:21:02.110 --> 00:21:04.820
it as a parameter of the upper level.

00:21:04.860 --> 00:21:06.770
So I just do that,
I'm prompted for a name,

00:21:06.810 --> 00:21:11.490
and I just keep the one there, image.

00:21:11.930 --> 00:21:16.400
The connection is broken,
the input is now a dark circle

00:21:16.690 --> 00:21:20.200
to indicate that it's published,
and the input becomes an

00:21:20.200 --> 00:21:21.800
input of the upper level.

00:21:21.800 --> 00:21:24.030
The upper level here is the Composition.

00:21:24.040 --> 00:21:29.230
So if you go in the Viewer window
and expand the toolbar and then

00:21:29.260 --> 00:21:32.870
click on the Parameters button,
you can see and edit, actually,

00:21:32.870 --> 00:21:35.230
the parameters of the Composition itself.

00:21:35.300 --> 00:21:38.910
And it now has a parameter called
Image that expects an image.

00:21:39.020 --> 00:21:43.190
And I can just take an image,
drag and drop it there,

00:21:43.270 --> 00:21:46.100
and retrieve my original result,
visual result.

00:21:46.240 --> 00:21:50.640
Let's get rid of the one that is
embedded into the Composition.

00:21:50.780 --> 00:21:51.810
Let's do the next one now.

00:21:52.030 --> 00:21:53.190
It's going to be the text.

00:21:53.240 --> 00:21:56.200
So we double click on the macro patch.

00:21:57.470 --> 00:22:00.190
And the text we are
displaying is actually here.

00:22:00.230 --> 00:22:02.000
It's the string input of ImageWithString.

00:22:02.000 --> 00:22:05.910
So same operation,
Control-click on ImageWithString.

00:22:06.090 --> 00:22:09.500
We're going to change the
name of that input to text.

00:22:09.520 --> 00:22:12.220
Now we can go back to the parent level,
clicking on the

00:22:12.220 --> 00:22:14.410
Edit Parent button in the toolbar.

00:22:14.470 --> 00:22:20.140
And you will notice that the macro
patch now has a new input called text.

00:22:20.960 --> 00:22:30.160
And we, it is not yet a parameter of the
Composition because we only publish

00:22:30.160 --> 00:22:33.670
to the immediate upper level.

00:22:33.750 --> 00:22:36.190
So to make it a parameter
of the Composition,

00:22:36.190 --> 00:22:36.190
we need to publish it once again,
same operation, control click,

00:22:36.190 --> 00:22:36.190
published inputs, and then text.

00:22:36.520 --> 00:22:38.200
And now it has become a parameter here.

00:22:38.200 --> 00:22:41.250
We can change it, as you can see.

00:22:41.330 --> 00:22:44.000
A real parameter is a
parameter of the composition.

00:22:44.060 --> 00:22:48.990
Our last parameter is going to
be the colors of the background.

00:22:49.120 --> 00:22:52.560
Here we have something interesting
because this gradient is defined

00:22:52.560 --> 00:22:56.800
by three colors and obviously
it wouldn't be practical to

00:22:56.990 --> 00:22:58.800
publish those three parameters.

00:22:58.850 --> 00:23:04.570
While what really matters is a single
color and then is from which we build

00:23:04.570 --> 00:23:07.690
two other colors to use for the gradient.

00:23:08.890 --> 00:23:11.380
We have a convenience tool
for that called a Splitter.

00:23:11.530 --> 00:23:17.700
It's basically a one-in-one-out patch
that you can use to unify several inputs.

00:23:17.780 --> 00:23:20.810
So we create one of those and
then in the settings panel,

00:23:20.810 --> 00:23:24.120
because we know we're going to
transmit colors through that splitter,

00:23:24.120 --> 00:23:27.360
we can force its type to be color,
which is going to be

00:23:27.360 --> 00:23:29.530
more practical for later.

00:23:30.120 --> 00:23:34.170
And now I can just connect
my color to my input,

00:23:34.170 --> 00:23:36.910
to my start color of the gradient patch.

00:23:38.040 --> 00:23:42.090
We need to build the middle
and the end color as variations

00:23:42.820 --> 00:23:44.680
from that single color.

00:23:44.680 --> 00:23:48.660
We have for that a modifier
called Color Transformation,

00:23:48.660 --> 00:23:51.550
which allows you to take a
color and modify its hue,

00:23:51.550 --> 00:23:53.510
saturation, and luminosity.

00:23:54.370 --> 00:24:00.200
So we can just take the original color,
send it through the color transformation,

00:24:00.200 --> 00:24:01.570
and create the middle color.

00:24:01.680 --> 00:24:06.370
Now we'll create a copy of it with
the Option key and do a similar

00:24:06.370 --> 00:24:08.310
operation for the end color.

00:24:08.590 --> 00:24:11.460
We can go back to the
very original color,

00:24:11.460 --> 00:24:14.860
set it to approximately the
same kind of blue we had,

00:24:14.960 --> 00:24:16.930
something like this.

00:24:17.020 --> 00:24:21.660
And then we can change the
middle color to be the same color

00:24:21.660 --> 00:24:25.400
but with a luminosity of 0.85,
something like that.

00:24:25.490 --> 00:24:29.700
And the end color to
have a luminosity of 0.5.

00:24:29.760 --> 00:24:32.430
And now we're back to our gradient.

00:24:32.550 --> 00:24:36.900
Last operation,
make that single color a parameters

00:24:36.900 --> 00:24:40.480
of the composition and for that,
published input and rename it color.

00:24:40.500 --> 00:24:43.740
So here we go,
we have our final composition with the

00:24:43.740 --> 00:24:46.080
three parameters that actually matters.

00:24:46.130 --> 00:24:47.200
We're gonna save that.

00:24:47.200 --> 00:24:52.400
And let's go back to slides, please.

00:24:58.080 --> 00:24:59.160
Things to remember.

00:24:59.300 --> 00:25:00.800
What have we learned so far?

00:25:01.020 --> 00:25:03.570
Well, Quartz Composer,
and that's very important,

00:25:03.580 --> 00:25:05.330
uses units and not pixels.

00:25:05.330 --> 00:25:07.900
When you position elements on screen.

00:25:07.900 --> 00:25:09.740
There is one exception.

00:25:09.740 --> 00:25:11.710
It's when you use core image filters.

00:25:11.730 --> 00:25:16.310
The reason is that core image filters
actually process pixels inside the image.

00:25:16.320 --> 00:25:19.130
So, here,
when you want to apply a given effect

00:25:19.130 --> 00:25:22.200
at a given position inside the image,
you specify those

00:25:22.200 --> 00:25:23.700
coordinates using pixels.

00:25:23.700 --> 00:25:25.580
But everywhere else, it's units.

00:25:25.580 --> 00:25:27.720
You can use the macros.

00:25:27.720 --> 00:25:30.220
You've seen it's fairly simple
to organize the workspace and

00:25:30.220 --> 00:25:34.070
make it less cluttered and easier
to understand when you give your

00:25:34.070 --> 00:25:35.780
composition to someone else.

00:25:36.000 --> 00:25:39.990
Publishing inputs and outputs allows you
to really build kind of sub-functions

00:25:40.010 --> 00:25:42.210
inside a Composition using macros.

00:25:42.310 --> 00:25:45.460
There is the splitter patch when you
need to control several inputs at once,

00:25:45.460 --> 00:25:47.660
which is a very convenient tool.

00:25:47.730 --> 00:25:51.620
And eventually we've seen how we can
create parameters of the Composition.

00:25:51.640 --> 00:25:52.800
It's for the Composition.

00:25:52.800 --> 00:25:58.340
It's all about publishing the
parameters at the root patch level,

00:25:58.340 --> 00:26:00.810
parameters of the patch,
and they become parameters

00:26:00.810 --> 00:26:02.580
of the Composition itself.

00:26:03.580 --> 00:26:06.340
Now we can go to the second
step of our tutorial,

00:26:06.340 --> 00:26:08.590
which is we created that Composition.

00:26:08.600 --> 00:26:13.140
What can we do straight out of the
box in Tiger with this Composition?

00:26:13.230 --> 00:26:15.960
Back to Demo Station, please.

00:26:15.960 --> 00:26:18.090
I'm just going to close.

00:26:18.290 --> 00:26:19.920
the composition windows.

00:26:19.930 --> 00:26:20.430
Okay.

00:26:20.450 --> 00:26:25.530
So the first thing we can do is simply
use that composition as a screen saver.

00:26:25.540 --> 00:26:30.900
So if you go into the library folder
of your home directory and then to

00:26:30.900 --> 00:26:35.890
the screen savers folder which is not
created by default so we have to create

00:26:35.920 --> 00:26:42.230
it screen savers and I can just drag
and drop my QDZ file inside and now

00:26:42.230 --> 00:26:47.460
when I go to the system preferences
in the screen saver pane I can see

00:26:47.460 --> 00:26:49.920
my new screen saver called demo.

00:26:49.920 --> 00:26:50.850
It works fine.

00:26:50.870 --> 00:26:52.620
It's just a composition I just created.

00:26:54.410 --> 00:26:58.030
What's interesting is that the
parameters of the Composition become

00:26:58.060 --> 00:27:01.500
actually options of the screen saver.

00:27:01.600 --> 00:27:04.470
So here we have our settings.

00:27:05.100 --> 00:27:08.630
Okay, and I can change the image,
the color, everything I want.

00:27:08.630 --> 00:27:13.350
And those values are actually
saved as preferences inside

00:27:14.110 --> 00:27:18.120
- Inside the preference file
for the screen server system.

00:27:18.120 --> 00:27:20.520
It's not changing the
Composition in any way.

00:27:20.520 --> 00:27:22.850
The Composition is completely preserved.

00:27:22.880 --> 00:27:25.710
Just the input parameters are changed.

00:27:26.530 --> 00:27:29.410
The second thing I can do is
take that Composition file and

00:27:29.410 --> 00:27:30.780
actually open it with QuickTime.

00:27:30.780 --> 00:27:34.010
You can simply drag and drop
it on the QuickTime player.

00:27:37.120 --> 00:27:39.160
So here we have our Composition playing.

00:27:39.160 --> 00:27:43.520
And it's interesting to notice that
when I rescale the Composition here,

00:27:43.570 --> 00:27:47.190
I mean, I should say the movie,
it's not the Composition that is

00:27:47.190 --> 00:27:50.270
being rendered and then the result
is actually scaled by QuickTime.

00:27:50.430 --> 00:27:54.180
The Composition is really
rendered at the final resolution.

00:27:54.700 --> 00:27:57.800
So when I go full screen here,
I still have perfect quality text,

00:27:57.830 --> 00:28:01.350
very sharp and accurate resolution.

00:28:02.550 --> 00:28:05.450
If you can use it in QuickTime then,
I mean in a QuickTime player,

00:28:05.520 --> 00:28:08.540
then you can use it abutely in
QuickTime-aware applications.

00:28:08.660 --> 00:28:10.750
For example, iMovie.

00:28:11.130 --> 00:28:17.000
So here I have a basic iMovie project,
iMovie HD project, 720p resolution,

00:28:17.000 --> 00:28:20.700
and I can just take my Composition
file and drag and drop it

00:28:20.790 --> 00:28:24.790
into this pen area of iMovie.

00:28:26.730 --> 00:28:31.720
Now we have a specificity here to iMovie,
which is iMovie needs to convert

00:28:31.720 --> 00:28:35.480
whatever assets you import that
are in a DV file into DV files.

00:28:35.480 --> 00:28:38.180
So it's actually using QuickTime to
rasterize the Composition

00:28:38.180 --> 00:28:40.270
on the fly as a DV file.

00:28:40.320 --> 00:28:46.150
And here we go, you got an HD resolution
of the Composition.

00:28:48.870 --> 00:29:15.290
Pierre-Olivier Latour is a great
example of how you can integrate

00:29:15.290 --> 00:29:15.290
into your iMovie projects.

00:29:15.290 --> 00:29:15.290
What I actually want to show you
is that iMovie file we have here,

00:29:15.290 --> 00:29:15.290
if we look at the inside,
you will find in the media folder the

00:29:15.290 --> 00:29:15.290
rasterized version of the Composition.

00:29:15.290 --> 00:29:15.290
If we look at its size,
it's actually 30 megabytes approximately.

00:29:15.290 --> 00:29:15.290
Now if we look at the
original Composition file,

00:29:15.290 --> 00:29:15.290
it's 16 kilobytes.

00:29:15.290 --> 00:29:15.290
Actually, it's even 14 kilobytes.

00:29:15.370 --> 00:29:18.060
So that is one of the key
things about Quartz Composer,

00:29:18.060 --> 00:29:21.680
is the fact you create Composition
that purely describes the visuals.

00:29:21.740 --> 00:29:25.140
They're not rasterized versions,
and therefore they're very small,

00:29:25.160 --> 00:29:27.850
and they can render
at various resolution.

00:29:27.920 --> 00:29:29.980
Back to slides, please.

00:29:33.360 --> 00:29:36.190
I would like to look a little
more at the QuickTime support for

00:29:36.270 --> 00:29:39.140
Quartz Composer in MacÂ OSÂ X Tiger.

00:29:39.140 --> 00:29:40.920
First of all, it's MacÂ OSÂ X Tiger.

00:29:41.000 --> 00:29:45.520
That means no Windows, no Panther,
Jaguar, whatever.

00:29:45.730 --> 00:29:48.040
We have a few limitations there so far.

00:29:48.140 --> 00:29:49.200
No user events.

00:29:49.200 --> 00:29:53.310
That means if you create a Composition
that uses the keyboard or the mouse,

00:29:53.390 --> 00:29:56.080
those events are not going to be
transmitted to the Composition when

00:29:56.080 --> 00:29:57.800
running in a QuickTime environment.

00:29:57.800 --> 00:30:01.500
We also have a restriction
on Internet downloads.

00:30:01.500 --> 00:30:04.540
If you have a Composition
that downloads an RSS feed,

00:30:04.540 --> 00:30:06.960
for example,
it's not going to work inside

00:30:06.960 --> 00:30:09.210
QuickTime for security reasons.

00:30:09.770 --> 00:30:13.000
And eventually the
Composition -- the parameters,

00:30:13.000 --> 00:30:15.690
sorry,
of the Composition are not editable

00:30:15.950 --> 00:30:19.550
inside the QuickTime environment
in their user interface.

00:30:19.750 --> 00:30:22.640
Technically, how does that work,
the whole thing of Quartz

00:30:22.660 --> 00:30:24.320
Composer inside QuickTime?

00:30:24.330 --> 00:30:27.920
The way it works is you take a Quartz
Composer file and you drag and drop it

00:30:27.920 --> 00:30:32.240
on QuickTime and then it creates a movie
that wraps that Composition and stores

00:30:32.280 --> 00:30:37.280
it into a Quartz Composer movie track,
which has the type QDZ.

00:30:37.280 --> 00:30:41.640
It's a track that's going to render using
progressive frames and square pixels.

00:30:41.640 --> 00:30:45.240
And important,
the alpha channel is completely valid,

00:30:45.240 --> 00:30:48.340
which means if you create a Composition
that uses the alpha channel,

00:30:48.360 --> 00:30:51.830
you can then composite the
results safely in QuickTime.

00:30:52.120 --> 00:30:56.410
Because QuickTime,
when it uses Quartz Composer contents,

00:30:56.470 --> 00:31:00.770
is kind of using OpenGL,
performance can be affected depending

00:31:00.860 --> 00:31:03.660
on which API you use inside QuickTime.

00:31:03.720 --> 00:31:07.560
So it's very important that
if you intend to have Quartz

00:31:07.620 --> 00:31:12.320
Composer contents inside QuickTime,
you use the new QuickTime 7 APIs for the

00:31:12.320 --> 00:31:15.000
visual context and the core video APIs.

00:31:15.040 --> 00:31:17.780
If you are kind of a
higher level developer,

00:31:17.800 --> 00:31:20.810
you simply have to use the Qt
Kit for Cocoa applications or the

00:31:20.810 --> 00:31:23.160
HMI MovieView for Carbon applications.

00:31:23.210 --> 00:31:27.700
And this will ensure optimal performance
of Quartz Composer contents rendering

00:31:27.700 --> 00:31:29.680
inside a QuickTime environment.

00:31:29.680 --> 00:31:32.080
But you can go even
further because we've seen,

00:31:32.080 --> 00:31:35.820
let me explain that,
we've seen when you take a

00:31:35.890 --> 00:31:39.480
Composition file and you actually
drag and drop in on QuickTime,

00:31:39.500 --> 00:31:43.940
it has a default size and duration
as it opens in the viewer with

00:31:44.010 --> 00:31:48.060
like 640 and 30 seconds duration,
which are the default.

00:31:48.070 --> 00:31:52.000
This is necessary because QuickTime does
not really have a concept of infinite

00:31:52.000 --> 00:31:53.880
size and no frame rate contents.

00:31:53.920 --> 00:31:55.770
So we need to set up some defaults there.

00:31:55.780 --> 00:32:00.660
If you need to change those defaults,
you can do that through the terminal,

00:32:00.680 --> 00:32:05.340
but the easiest way is actually to do
it on a per Composition file basis.

00:32:05.360 --> 00:32:08.660
When you are in Quartz Composer,
you can select the export

00:32:08.700 --> 00:32:10.780
as QuickTime movie command
from the file menu,

00:32:10.780 --> 00:32:16.240
and there you will be prompted to
enter a specific size and duration

00:32:16.310 --> 00:32:19.660
for the QuickTime movie that will wrap
the Quartz Composer Composition file.

00:32:21.920 --> 00:32:25.810
This is essential when you are actually
a QuickTime developer and you want

00:32:25.810 --> 00:32:29.550
your users to be able to take the
Composition files and drag and drop

00:32:29.550 --> 00:32:34.050
them on your application icon and use
the contents inside your application.

00:32:34.250 --> 00:32:37.300
Problem is,
you might not be satisfied with 640, 480,

00:32:37.300 --> 00:32:38.110
and 30 seconds.

00:32:38.180 --> 00:32:42.910
You might want to have 1024 by
768 for five seconds or something.

00:32:42.920 --> 00:32:46.960
The best way to do that is
actually to override the defaults

00:32:46.960 --> 00:32:47.860
at your application level.

00:32:47.860 --> 00:32:50.750
It's the same operation as if
you would do it on the terminal,

00:32:50.750 --> 00:32:52.700
except you don't need to
go through the terminal.

00:32:52.700 --> 00:32:55.200
It's just two lines of code
if you're Cocoa applications,

00:32:55.200 --> 00:32:58.020
and it's also very simple if
you're a Carbon application.

00:32:58.090 --> 00:33:01.080
For that, you use the NSUserDefaults or
the CFPreferences.

00:33:02.240 --> 00:33:05.780
You can do part of that using
the QuickTime API as well.

00:33:05.790 --> 00:33:09.230
That would be changing the
dimension of the movie using

00:33:09.230 --> 00:33:11.040
setMovieMatrix or setMovieBox.

00:33:11.070 --> 00:33:14.830
Once the movie has been created and it
contains that Quartz Composer contents.

00:33:14.870 --> 00:33:17.800
Unfortunately,
there is no easy way to set

00:33:17.800 --> 00:33:20.410
up the duration this way,
so that's why I recommend using the

00:33:20.410 --> 00:33:22.720
NSUserDefaults or CFPreferences approach.

00:33:27.370 --> 00:33:33.440
Now that we can import Quartz
Composer contents into QuickTime,

00:33:33.440 --> 00:33:35.870
that opens kind of new doors.

00:33:36.170 --> 00:33:38.890
For example,
here I have a Quartz Composer

00:33:39.220 --> 00:33:42.730
Composition that does some live
video that is simply running as

00:33:42.730 --> 00:33:44.380
a QuickTime movie inside Keynote.

00:33:44.380 --> 00:33:48.960
And we have a bunch of core image
filters that are applied in real time to

00:33:48.990 --> 00:33:52.940
create that effect and create the halo,
this kind of interlaced

00:33:52.940 --> 00:33:54.780
green overall thing.

00:33:54.780 --> 00:33:57.980
You can see the audio input and
the spectrum that is displayed

00:33:58.030 --> 00:33:59.780
at the very top of that movie.

00:33:59.780 --> 00:34:05.300
And that's a movie that is
ridiculously small as well.

00:34:05.300 --> 00:34:07.640
That's kind of a far
stretch for the technology,

00:34:07.640 --> 00:34:10.600
but it just shows that it opens
brand new door going through

00:34:10.700 --> 00:34:12.680
QuickTime and Quartz Composer.

00:34:12.700 --> 00:34:14.880
And that excites some people.

00:34:27.410 --> 00:34:29.760
What did we learn through that tutorial?

00:34:29.860 --> 00:34:32.070
Quartz Composer,
obvious use of the Composition

00:34:32.170 --> 00:34:33.540
files immediate use.

00:34:33.570 --> 00:34:37.280
Just run and drop that in the
screen server folder and off you go.

00:34:37.630 --> 00:34:43.220
We also have native QuickTime support for
Quartz Composer Composition inside Tiger.

00:34:43.380 --> 00:34:45.650
It's the best way,
the simplest way to add motion graphics

00:34:45.720 --> 00:34:48.180
to existing QuickTime application,
because once again,

00:34:48.200 --> 00:34:50.660
the Composition files are
gonna be resolution-independent

00:34:50.660 --> 00:34:52.070
and frame-rate-independent.

00:34:52.250 --> 00:34:56.380
No more HD, SD, PAL, NTSC,
all those things for the same assets.

00:34:56.380 --> 00:34:58.340
If you can create the asset
using Quartz Composer,

00:34:58.340 --> 00:35:01.800
you will have a small file that you
can just put in your application

00:35:01.800 --> 00:35:03.540
resources folder and that's it.

00:35:03.600 --> 00:35:07.700
So if you're a QuickTime developer,
make sure you allow your users to

00:35:07.700 --> 00:35:14.020
select .qdz files and make sure you use
the QuickTime 7 APIs whenever possible

00:35:14.070 --> 00:35:15.940
to ensure best possible performances.

00:35:15.940 --> 00:35:21.370
We're now gonna start
tutorial number three.

00:35:22.510 --> 00:35:25.690
And we're going to see how we
can use the Quartz Composer

00:35:25.740 --> 00:35:28.570
Compositions inside our applications.

00:35:30.900 --> 00:35:34.150
As a simple application,
typical application,

00:35:34.150 --> 00:35:36.460
I decided to use TextEdit.

00:35:36.670 --> 00:35:42.040
whose source code is available inside
the developer folder on your hard drive

00:35:42.040 --> 00:35:44.660
and then it's examples and app kit.

00:35:44.660 --> 00:35:45.980
It's there.

00:35:46.070 --> 00:35:48.690
So let's just open the
project in its code.

00:35:49.940 --> 00:35:52.610
What we would like to do with
Text-Setit is add some Quartz

00:35:52.610 --> 00:35:53.960
Composer contents to it.

00:35:53.960 --> 00:35:58.420
I'm gonna do something fairly simple
that really demonstrate what you can

00:35:58.420 --> 00:36:02.320
do is replace the current About box
in Quartz Composer by a new one that

00:36:02.690 --> 00:36:06.560
displays some motion graphics instead of
the simple boring one with the copyright,

00:36:06.570 --> 00:36:08.200
and that's it.

00:36:08.790 --> 00:36:12.280
First thing we need to do is edit,
obviously,

00:36:12.280 --> 00:36:15.690
the interface file of TextEdit.

00:36:15.710 --> 00:36:19.640
The one that we're
interested in is edit.neb.

00:36:20.870 --> 00:36:23.020
So now we can look at
it in Interface Builder.

00:36:23.020 --> 00:36:26.130
And before we start working with Quartz
Composer inside Interface Builder,

00:36:26.130 --> 00:36:28.030
there is something you need
to do once and for all.

00:36:28.160 --> 00:36:31.870
It's to go into the Preferences
of Interface Builder,

00:36:31.870 --> 00:36:39.510
then go to the Palettes tab,
then click Add, and go to Developer,

00:36:39.580 --> 00:36:43.540
Extras, Palettes, and Quartz Composer.

00:36:43.590 --> 00:36:48.310
This will load the Quartz Composer
palette inside Interface Builder

00:36:48.320 --> 00:36:51.780
so that you can use the QC view
and the QC patch controller,

00:36:51.810 --> 00:36:54.840
which are the two Quartz
Composer elements.

00:36:57.760 --> 00:37:00.100
So let's create that new About box.

00:37:00.140 --> 00:37:03.010
For that we just need a window.

00:37:03.740 --> 00:37:04.440
That's it.

00:37:04.570 --> 00:37:07.130
In that window,
we're going to put from the

00:37:07.130 --> 00:37:10.220
Quartz Composer palette a QC view.

00:37:10.330 --> 00:37:13.290
QC view is the basic way when you
need to render some Quartz Composer

00:37:13.300 --> 00:37:14.870
contents into a Cocoa application.

00:37:14.950 --> 00:37:18.160
It's a subclass of NSView that
takes care of everything.

00:37:18.740 --> 00:37:24.000
So we just resize it appropriately,
then we can set up its parameter.

00:37:24.000 --> 00:37:26.700
And for that,
we need the Interface Builder

00:37:26.700 --> 00:37:28.670
Inspector from the Tools menu.

00:37:28.680 --> 00:37:31.580
And here in the
attributes of the QC view,

00:37:31.580 --> 00:37:34.910
we can specify which
Composition should be rendered.

00:37:34.960 --> 00:37:39.300
So we just click on the Load button
and select the one we created.

00:37:40.960 --> 00:37:45.550
Now the last step regarding the
modification of the Nib file is

00:37:45.920 --> 00:37:46.720
to make sure that when you click

00:37:46.780 --> 00:37:48.700
If you want to create a new
window for the About Texted It,

00:37:48.700 --> 00:37:53.700
it displays that new window instead
of the standard About Panel.

00:37:53.700 --> 00:37:57.830
You select About Texted
It in the menu bar,

00:37:57.830 --> 00:38:00.770
and then in the Connections
panel of the Inspector,

00:38:00.820 --> 00:38:03.600
Target Action Subpanel,
we can see that it's currently connected

00:38:03.720 --> 00:38:06.700
to Order Front Standard About Panel.

00:38:06.700 --> 00:38:10.700
To break that connection,
create a new one.

00:38:10.700 --> 00:38:13.980
For that,
you Control-click on About Texted It and

00:38:13.990 --> 00:38:19.700
drag a new connection to the panel
and select Make Key and Order Front.

00:38:19.700 --> 00:38:24.870
What we just did is modify the Nib file
so that when you select About Texted It,

00:38:24.870 --> 00:38:29.000
it sends the message Make Key and
Order Front to that panel.

00:38:29.670 --> 00:38:35.420
So we can save the modified .need
file and just run text to it.

00:38:36.370 --> 00:38:38.540
So here we're getting an error.

00:38:38.590 --> 00:38:41.930
It basically says that it's not
able to find the QC view class

00:38:41.930 --> 00:38:43.640
when unarchiving the Nib file.

00:38:43.880 --> 00:38:45.890
It's a common error.

00:38:45.960 --> 00:38:49.700
The reason is it's missing the framework,
the Quartz Composer framework.

00:38:49.790 --> 00:38:52.300
We need to add it to the project when
you use Quartz Composer contents.

00:38:52.300 --> 00:38:58.930
For that, we're going to go to the
external frameworks folder

00:38:58.930 --> 00:39:02.200
here and then select project,
add to project.

00:39:02.290 --> 00:39:05.560
And the Quartz Composer framework
is actually part of an umbrella

00:39:05.560 --> 00:39:07.190
framework called Quartz Framework.

00:39:07.200 --> 00:39:12.140
And it has all the framework
in system library frameworks

00:39:12.140 --> 00:39:14.760
and then Quartz Framework.

00:39:14.760 --> 00:39:18.900
And we add it.

00:39:18.900 --> 00:39:21.530
I think I need to do a clean build.

00:39:32.340 --> 00:39:35.440
Okay, and I should be able to
run the build application.

00:39:35.650 --> 00:39:39.000
Now I went and select About Text Edit.

00:39:39.010 --> 00:39:44.200
I do have my brand new
Motion Graphics fantastic About Panel.

00:39:51.250 --> 00:39:52.340
We can do more.

00:39:52.340 --> 00:39:55.490
Remember that Composition,
the one we created,

00:39:55.560 --> 00:39:56.880
is a parameterized Composition.

00:39:56.920 --> 00:39:59.730
It has three parameters: the color,
the text, and the image.

00:39:59.840 --> 00:40:03.130
So let's set those parameters
from the application.

00:40:03.660 --> 00:40:08.320
We're simply going to modify two files,
controller.h and controller.m,

00:40:08.320 --> 00:40:12.300
which defines, as the name implies,
the controller for that application.

00:40:13.000 --> 00:40:15.850
And we're going to communicate with the
QC view from inside the application.

00:40:15.870 --> 00:40:22.900
So first thing is to add an
outlet member to that interface,

00:40:22.900 --> 00:40:27.910
to the interface of the controller class
that actually points to the QC view.

00:40:27.920 --> 00:40:30.180
Oops.

00:40:30.180 --> 00:40:34.400
And don't forget to include
the Quartz framework as well.

00:40:36.400 --> 00:40:39.170
Okay, we can save the results.

00:40:39.210 --> 00:40:44.600
Go back in IAB and take that controller,
that modified controller, that edge file,

00:40:44.600 --> 00:40:48.920
and drag and drop it in
the area of the Nib file.

00:40:48.930 --> 00:40:50.580
And then we click on Merge.

00:40:50.620 --> 00:40:54.960
That basically updates the definition of
the controller class inside the Nib file.

00:40:55.140 --> 00:41:00.460
And that means I can now control click
on the controller and create a connection

00:41:00.600 --> 00:41:03.530
to the QC view inside my panel.

00:41:04.050 --> 00:41:05.160
- And save the result.

00:41:05.160 --> 00:41:09.720
Now back in my hosting application,
I have this QC view member of my

00:41:09.720 --> 00:41:13.590
controller class that points to the
QC view inside the about window.

00:41:15.790 --> 00:41:19.410
And a good place to talk
to the QC view is the,

00:41:19.410 --> 00:41:21.900
let's see,
application did finish launching.

00:41:21.900 --> 00:41:24.580
It's perfect, just as a setup time.

00:41:24.650 --> 00:41:27.530
So here I can take my QC view.

00:41:28.480 --> 00:41:31.690
and set the parameters
of the Composition.

00:41:31.760 --> 00:41:33.700
The methods are fairly simple.

00:41:33.700 --> 00:41:39.150
Let's see, set value for input key
is the one you want.

00:41:39.850 --> 00:41:45.360
Let's see, the first one we're going
to set is the text input,

00:41:45.360 --> 00:41:47.980
the text input parameter
of the Composition,

00:41:48.120 --> 00:41:51.400
and we're going to give it the
value of the current username,

00:41:51.400 --> 00:41:52.300
let's say.

00:41:52.930 --> 00:41:56.200
should be full username, here we go.

00:41:56.200 --> 00:42:01.470
Then we're also gonna set the
background color to something different.

00:42:01.840 --> 00:42:06.790
So let's see, any color,
red color would be fine,

00:42:06.820 --> 00:42:08.900
some kind of red.

00:42:11.000 --> 00:42:16.800
And we'll finish by changing the image
displayed by the about box to use,

00:42:16.800 --> 00:42:20.340
well the best here is to use
the icon of the application.

00:42:20.340 --> 00:42:24.780
And there is a method to retrieve
it called application something.

00:42:24.840 --> 00:42:29.300
Here we go, application icon image.

00:42:29.300 --> 00:42:31.200
Okay.

00:42:31.200 --> 00:42:38.500
And now we can build and run.

00:42:38.530 --> 00:42:40.080
Here we go.

00:42:48.300 --> 00:42:51.760
So that was fairly simple.

00:42:51.930 --> 00:42:54.080
Back to the slides, please.

00:42:56.150 --> 00:43:01.130
Let's have a deeper look at
the QCview API for a minute.

00:43:01.260 --> 00:43:03.030
We've seen that if you
want to set parameters,

00:43:03.030 --> 00:43:06.750
input parameters of the Composition,
it's simply a matter of calling

00:43:06.750 --> 00:43:10.630
setValueForInputKey where you
pass the key that identifies

00:43:10.690 --> 00:43:13.090
uniquely that input parameter.

00:43:13.110 --> 00:43:16.990
If the Composition were to produce
some results that wouldn't be

00:43:16.990 --> 00:43:21.110
visuals and output some values,
you would retrieve those simply

00:43:21.110 --> 00:43:23.100
by calling valueForOutputKey.

00:43:23.100 --> 00:43:25.500
And eventually,
I actually forget to mention that

00:43:25.660 --> 00:43:29.560
is when you go into Interface
Builder and you set up the QCview

00:43:29.600 --> 00:43:33.320
to render a given Composition file,
the Composition file is actually

00:43:33.320 --> 00:43:34.590
saved inside the Nib file.

00:43:34.800 --> 00:43:37.720
You don't need to move
the .qdz file around.

00:43:37.750 --> 00:43:42.170
Now, in some cases, you want to load that
Composition file dynamically.

00:43:42.210 --> 00:43:43.300
It's also quite easy to do.

00:43:43.300 --> 00:43:44.450
It's two lines of code.

00:43:44.480 --> 00:43:49.470
Just calling the method
loadCompositionFromFile on the QCview.

00:43:50.640 --> 00:43:56.040
When you call set value for input
key or value for output key,

00:43:56.060 --> 00:43:59.940
what is the correspondence between
the type of values that are

00:43:59.940 --> 00:44:04.170
actually moved around in Quartz
Composer and the app kit values?

00:44:04.270 --> 00:44:06.680
Well, here you have the table and
it's fairly straightforward.

00:44:06.740 --> 00:44:09.200
You've seen for color
input in Quartz Composer,

00:44:09.200 --> 00:44:10.550
you can pass an NSColor.

00:44:10.790 --> 00:44:14.660
For a string input in Quartz Composer,
you just pass anything pretty much,

00:44:14.660 --> 00:44:16.080
an NSString or anything.

00:44:16.330 --> 00:44:20.850
For an image, you can pass an NSImage,
a Core Graphics Image,

00:44:20.910 --> 00:44:24.460
a Core Image Image as well,
or even Core Video Image buffers.

00:44:24.460 --> 00:44:25.560
It's really flexible.

00:44:27.620 --> 00:44:30.760
- Things to remember, that's pretty sad.

00:44:30.760 --> 00:44:34.540
Now things to really remember,
we have Quartz Composer,

00:44:34.540 --> 00:44:37.020
which runs only on Quartz
Extreme configurations.

00:44:37.020 --> 00:44:41.240
Tiger does support a few,
there aren't that many,

00:44:41.240 --> 00:44:44.290
but a few machines that are
not Quartz Extreme compatible.

00:44:44.360 --> 00:44:48.360
So if you intend to
run Quartz Composer on,

00:44:48.370 --> 00:44:50.920
add some Quartz Composer contents
to your application and have your

00:44:50.920 --> 00:44:53.740
application run on those machines,
you need to check for the

00:44:53.740 --> 00:44:54.920
support of Quartz Extreme.

00:44:55.080 --> 00:44:58.890
This is an easy way to do it,
just one method, part of Core Graphics,

00:44:58.910 --> 00:45:03.690
which is written true if basically Quartz
Extreme is available on that machine.

00:45:04.020 --> 00:45:07.830
We've also seen how simple it was
to communicate data from the hosting

00:45:07.830 --> 00:45:09.340
application to the Composition.

00:45:09.340 --> 00:45:12.620
So that means that when you create a
Composition and you're stuck because

00:45:12.620 --> 00:45:15.130
you don't know Quartz Composer
enough yet and you're not sure

00:45:15.130 --> 00:45:18.140
how to create the data the way you
want or process it the way you want,

00:45:18.140 --> 00:45:20.570
try to simply take that out
of the Composition and put it

00:45:20.570 --> 00:45:22.160
in the hosting application.

00:45:22.220 --> 00:45:26.890
You do that processing
using C code or Objective-C,

00:45:26.890 --> 00:45:29.880
whatever you prefer,
and then simply pass the

00:45:29.880 --> 00:45:29.880
result to Quartz Composer.

00:45:30.120 --> 00:45:33.670
Something quite important as well,
it's the fact that when you call

00:45:33.670 --> 00:45:37.590
setValueForInputKey or valueForOutputKey,
as the name of those methods imply,

00:45:37.600 --> 00:45:40.600
you're actually identifying the
inputs and outputs by the keys,

00:45:40.610 --> 00:45:42.330
which is not necessarily the name.

00:45:42.700 --> 00:45:44.460
The name can be localized.

00:45:44.460 --> 00:45:48.840
So an input, if for example,
you create -- you publish an input in

00:45:48.860 --> 00:45:53.050
Quartz Composer and you give it the name,
My, and space color,

00:45:53.170 --> 00:45:55.960
this is not going to be the actual key.

00:45:55.960 --> 00:45:58.930
Because there are some restrictions
of the kind of characters that

00:45:58.930 --> 00:46:00.340
can be used and everything.

00:46:00.340 --> 00:46:05.260
So the real name is likely
going to be My_color.

00:46:05.540 --> 00:46:08.750
To know what is actually
the key for an input port or

00:46:08.890 --> 00:46:11.660
output port and not its name,
you can use the tooltips

00:46:11.720 --> 00:46:13.140
for that in the editor.

00:46:13.140 --> 00:46:17.490
You just hover the mouse and you
will see in a tooltip the real key.

00:46:17.830 --> 00:46:19.850
And the common pitfalls here
when you're using Quartz

00:46:19.920 --> 00:46:23.250
Composer in your applications,
don't forget to add the Quartz

00:46:23.250 --> 00:46:27.390
framework in your Xcode project
and include the header as well.

00:46:28.340 --> 00:46:31.590
We can now move on to the
last tutorial of this session.

00:46:31.700 --> 00:46:37.280
You're not expected to follow that
tutorial and doing it as I'm gonna do

00:46:37.280 --> 00:46:39.220
it because it's a fairly big thing.

00:46:39.220 --> 00:46:42.180
And we're actually gonna
look at the overview.

00:46:42.180 --> 00:46:47.690
The idea is to build an application
from scratch that really leverages

00:46:47.690 --> 00:46:49.800
the Quartz Composer power.

00:46:49.980 --> 00:46:56.140
And a nice example with that would be to
build our own kind of TV channel system.

00:46:56.230 --> 00:46:58.210
So let's look at that.

00:47:03.350 --> 00:47:06.600
In Quartz Composer Editor,
we're obviously going to start

00:47:06.600 --> 00:47:08.270
with a blank composition.

00:47:08.310 --> 00:47:10.780
Now, you know those TV channels,
news channels,

00:47:10.780 --> 00:47:14.890
they all have something that immediately
would make ours look professional.

00:47:14.910 --> 00:47:17.350
It's that crawler at the bottom
that just goes very fast and

00:47:17.350 --> 00:47:20.290
displays tons of information that
nobody can really read anyway.

00:47:20.290 --> 00:47:22.960
So let's exactly reproduce that
so that we can have something

00:47:22.960 --> 00:47:24.290
that looks professional.

00:47:24.300 --> 00:47:28.300
We need some data first,
some data to display.

00:47:28.310 --> 00:47:32.230
In Quartz Composer you have RSS support,
which means you can give the

00:47:32.230 --> 00:47:34.600
URL of an RSS feed and it's
going to download it for you,

00:47:34.790 --> 00:47:38.200
process it, parse it,
and give you some data you can display.

00:47:38.200 --> 00:47:44.190
Okay, let me organize my windows.

00:47:50.070 --> 00:47:52.990
This is the patch that downloads
the given RSS feed and processes it.

00:47:53.070 --> 00:47:55.740
We need to extract the
information we want to display

00:47:55.740 --> 00:47:57.000
and then display it on screen.

00:47:57.000 --> 00:48:05.990
So I'm going to do those few steps and
then explain to you exactly how it goes.

00:48:06.870 --> 00:48:08.880
- There we go.

00:48:08.880 --> 00:48:10.820
Then we're gonna have some
text we need to display.

00:48:10.820 --> 00:48:16.100
So as usual, we use image with string
in combination with,

00:48:16.100 --> 00:48:17.150
let's say, a billboard.

00:48:17.300 --> 00:48:19.080
That would be fine.

00:48:43.320 --> 00:48:48.240
So how does that little pipeline work?

00:48:48.240 --> 00:48:51.340
At the start of the pipe,
we have the RSS feed patch.

00:48:51.340 --> 00:48:54.440
It downloads the RSS and parses it,
as I said.

00:48:54.440 --> 00:48:58.460
It outputs on its article list
output a structure actually

00:48:58.770 --> 00:49:00.920
describing the feed contents.

00:49:01.020 --> 00:49:07.320
This structure is itself
made of substructure.

00:49:07.320 --> 00:49:07.320
We have one substructure per article.

00:49:07.900 --> 00:49:12.480
The way you manipulate structures
in Quartz Composer is by using a few

00:49:12.480 --> 00:49:16.700
patches like StructureIndexMember
and StructureKeyMember.

00:49:16.700 --> 00:49:20.650
They allow you to simply retrieve
an element in a structure using its

00:49:20.650 --> 00:49:23.280
index or using its identifying key.

00:49:23.570 --> 00:49:56.530
Pierre-OliviÃ© Latour Pierre-OliviÃ© Latour
Then we can create an image that contains

00:49:56.590 --> 00:49:59.990
that title and eventually display that
image on screen using the billboard.

00:49:59.990 --> 00:50:03.300
It's a fairly straightforward process,
as you've seen.

00:50:03.300 --> 00:50:05.830
We're just going to fix the,
well actually no,

00:50:05.830 --> 00:50:07.780
let's not fix the transparency.

00:50:08.230 --> 00:50:09.640
Displaying one news is one scene.

00:50:09.640 --> 00:50:13.440
What we want to do here is display
all the news and have them scroll.

00:50:14.480 --> 00:50:17.600
We obviously need to have
that index change with time.

00:50:17.680 --> 00:50:18.930
There are plenty of ways to do that.

00:50:18.940 --> 00:50:24.610
I'm going to do it using actually the
current time in the system that you can

00:50:24.610 --> 00:50:30.510
retrieve this patch time and then doing
a few mathematical operations on it.

00:50:30.610 --> 00:50:34.300
The idea is I take the current time,

00:50:34.980 --> 00:50:37.580
Then I can divide that value,
for example,

00:50:37.580 --> 00:50:41.810
by five so that it goes -- the
current time goes way slower.

00:50:42.960 --> 00:50:44.380
- And use that as the index.

00:50:44.400 --> 00:50:50.180
Now that may not be enough because the
index here has to be in a given range.

00:50:50.260 --> 00:50:53.520
If you try to,
here the current value is like 45,

00:50:53.580 --> 00:50:55.690
but there are no items at index 45.

00:50:55.880 --> 00:51:01.390
So we need to know the number
of items in a structure.

00:51:08.120 --> 00:51:09.680
You're right, thanks.

00:51:09.680 --> 00:51:13.940
Here we go.

00:51:13.940 --> 00:51:18.200
And then our last operation here
is to actually take that value

00:51:18.270 --> 00:51:23.090
and make sure it doesn't go above
the number of elements in the,

00:51:23.100 --> 00:51:24.040
the number of articles.

00:51:24.040 --> 00:51:26.270
So let's just do a modulo.

00:51:28.560 --> 00:51:34.430
So now we have our display system that
displays an item from the RSS feed

00:51:34.510 --> 00:51:37.200
that changes every five seconds.

00:51:38.580 --> 00:51:40.180
There is one last thing to do here.

00:51:40.260 --> 00:51:45.250
It's when you convert a floating
point value to an integral

00:51:45.250 --> 00:51:48.250
value in Quartz Composer,
it runs to the closest value.

00:51:48.380 --> 00:51:52.720
So when you have, for example, here 7.2,
it's gonna run to seven,

00:51:52.720 --> 00:51:55.480
and when you have 7.6,
it's gonna run to eight.

00:51:55.540 --> 00:51:59.760
In our case, so that we know exactly
when the item changes,

00:51:59.800 --> 00:52:03.420
we just wanna make sure we always round,
we do the rounding ourself and

00:52:03.420 --> 00:52:05.570
always take the floor value.

00:52:08.150 --> 00:52:13.280
Okay, last step is to make that
text scroll on the window.

00:52:13.980 --> 00:52:15.200
It's fairly simple to do.

00:52:15.200 --> 00:52:18.290
We're going to need to change
the Y position with the time.

00:52:18.290 --> 00:52:21.190
The X position, sorry.

00:52:22.170 --> 00:52:25.800
When we need to have a value go
from a given value to another value,

00:52:25.950 --> 00:52:28.330
there is interpolation patch.

00:52:29.790 --> 00:52:33.690
We just specified a start value here,
let's say 2,

00:52:33.690 --> 00:52:37.960
so that we start on the far right
of the viewer and we end on -2,

00:52:38.360 --> 00:52:40.870
which is the far left,
and a duration which has to

00:52:40.870 --> 00:52:43.980
match the one we defined earlier,
which is 5 seconds.

00:52:44.060 --> 00:52:46.590
And we want it to loop, that's fine.

00:52:49.840 --> 00:52:53.860
So now I have my kind of
RSS scrolling crawler.

00:52:53.860 --> 00:53:02.390
After a few more steps of iterations,
we will end up with

00:53:02.660 --> 00:53:06.100
the final RSS crawler,
which kind of looks like this.

00:53:06.100 --> 00:53:08.510
Whoops, let me...

00:53:09.460 --> 00:53:11.620
Constraint-Aspect Ratio.

00:53:11.640 --> 00:53:12.600
Here we go.

00:53:12.600 --> 00:53:14.000
Which will look like this.

00:53:14.020 --> 00:53:17.010
With a nice shadow, a background,
and everything.

00:53:17.860 --> 00:53:21.110
So we're going to start
directly from this one and go

00:53:21.110 --> 00:53:23.620
on with building our prototype.

00:53:23.830 --> 00:53:28.900
So I create a blank document
and I just load my RSS patch

00:53:28.910 --> 00:53:31.280
that I created previously.

00:53:31.280 --> 00:53:35.910
And it actually has an image
input so that I can specify a logo

00:53:35.980 --> 00:53:42.610
to put between the news titles.

00:53:44.680 --> 00:53:45.760
That's one part of the contents.

00:53:45.810 --> 00:53:49.140
Now we need to really build the rest,
like the background, the weatherman,

00:53:49.150 --> 00:53:50.290
and everything.

00:53:52.940 --> 00:53:56.760
I like gradients, so we're going to use a
gradient for our background.

00:53:56.790 --> 00:54:00.960
Some kind of usual blue gradient.

00:54:08.750 --> 00:54:32.120
Pierre-OliviÃ© Latour: Okay.

00:54:32.120 --> 00:54:32.120
Here we have something interesting.

00:54:32.120 --> 00:54:32.120
We don't see the crawler anymore.

00:54:32.120 --> 00:54:32.120
It's simply due to the fact the gradient
is rendered after the crawler was drawn.

00:54:32.120 --> 00:54:32.120
How do you change the rendering
order of items in Quartz Composer?

00:54:32.120 --> 00:54:32.120
Well, you use the contextual menu on
a patch and then you will have a

00:54:32.120 --> 00:54:32.120
rendering layer submenu where you
can select the rendering layer.

00:54:32.120 --> 00:54:32.120
So here we changed it to be one.

00:54:37.210 --> 00:54:41.380
Let's create a title bar at
the top of our TV system.

00:54:41.470 --> 00:54:45.480
If you need to draw some
kind of colored shape,

00:54:45.530 --> 00:54:48.810
which is a square shape,
Sprite is perfect for that.

00:54:48.900 --> 00:54:52.200
We can use it to display
some kind of orange shape.

00:54:52.200 --> 00:54:54.790
We need to change the width to
be two so that it's full width,

00:54:54.880 --> 00:54:58.110
and the height could be zero,
one should be enough.

00:54:58.190 --> 00:55:01.990
Then we can simply position it like this.

00:55:02.050 --> 00:55:06.210
We need to add, obviously,
the logo for our TV channel.

00:55:07.620 --> 00:55:08.780
Here we go.

00:55:09.020 --> 00:55:11.270
Display it using the billboard
as we've seen earlier.

00:55:11.460 --> 00:55:15.470
Simplest way to display a 2D image.

00:55:16.160 --> 00:55:19.060
And then we need some blending.

00:55:19.060 --> 00:55:23.260
Change the size to, let's see, whoops,
that's a little small.

00:55:23.330 --> 00:55:25.200
Something like that.

00:55:25.270 --> 00:55:29.660
And then position it
at the correct place.

00:55:30.710 --> 00:55:35.700
Okay, we need the name of our TV,
so let's create an image

00:55:35.700 --> 00:55:39.140
that contains some text and
display it using a billboard.

00:55:43.120 --> 00:55:45.200
So, same step as we've seen earlier.

00:55:45.260 --> 00:55:52.820
Combination of billboard
and image with string.

00:55:53.530 --> 00:55:55.620
Except we want it to be a
little more on the right,

00:55:55.650 --> 00:55:57.240
like this.

00:55:57.320 --> 00:55:59.730
Okay, it's looking pretty good.

00:55:59.760 --> 00:56:05.450
I'm just going to move things on the
workspace so that it's easier to follow.

00:56:05.740 --> 00:56:08.430
Now it's time to add our weatherman.

00:56:08.470 --> 00:56:10.180
Okay.

00:56:10.190 --> 00:56:12.970
So I got an image here I'm
going to use and display it

00:56:12.970 --> 00:56:14.970
using the billboard as well.

00:56:20.300 --> 00:56:24.220
Make that a little smaller,
add the transparency as usual,

00:56:24.220 --> 00:56:25.990
and position it.

00:56:28.760 --> 00:56:32.370
We need to fix the rendering layer
so that it's just on top of the

00:56:32.370 --> 00:56:34.780
background below the RSS feed.

00:56:34.780 --> 00:56:37.730
Okay,
this is starting to look like something,

00:56:37.740 --> 00:56:41.110
but we obviously need some
realistic environment.

00:56:42.830 --> 00:56:47.300
We'll start with our fabulous weatherman.

00:56:47.340 --> 00:56:51.800
Set the width to 2 so
that it's full size.

00:56:52.040 --> 00:56:58.170
Then we can set it on the background.

00:56:58.600 --> 00:57:02.440
Almost realistic, except usually when you
film someone like this,

00:57:02.480 --> 00:57:05.740
the background is blurred because
the focus is on the weatherman.

00:57:05.740 --> 00:57:09.670
So let's use a Core Image Filter,
the same one we've used earlier,

00:57:09.670 --> 00:57:11.130
which is the blur.

00:57:11.230 --> 00:57:13.340
Kind of blur that image.

00:57:17.700 --> 00:57:21.140
And what you see is
actually where Blur Extend,

00:57:21.140 --> 00:57:25.620
it's kind of gonna sample outside
and it's black by default.

00:57:25.620 --> 00:57:29.530
So these are the things you
actually fix when you have

00:57:29.530 --> 00:57:31.520
the concept pretty much ready.

00:57:31.530 --> 00:57:32.730
But for now it's enough.

00:57:32.780 --> 00:57:36.460
So you continue, same as earlier,
when we built the RSS Scroller,

00:57:36.480 --> 00:57:39.170
you continue iterating a few steps,
getting your ideas right

00:57:39.170 --> 00:57:43.180
inside Quartz Composer,
and eventually you end up with the,

00:57:43.180 --> 00:57:45.650
shall we call that kind of final result?

00:57:47.480 --> 00:57:51.040
Okay, something very realistic.

00:57:53.210 --> 00:57:55.700
So here we have our final
Composition that is live,

00:57:55.700 --> 00:57:56.200
obviously.

00:57:56.200 --> 00:57:58.630
You can see it's the current time here.

00:57:59.450 --> 00:58:01.060
And it's nicely organized.

00:58:01.160 --> 00:58:05.570
It has been divided into several macros.

00:58:05.640 --> 00:58:08.780
Each of the macro is performing one
operation like drawing the title,

00:58:08.780 --> 00:58:12.990
drawing the info box here,
the yellow info box, the RSS feed,

00:58:13.050 --> 00:58:16.500
the caption here, and everything.

00:58:17.280 --> 00:58:20.730
So at that point,
we started with the idea of let's

00:58:20.730 --> 00:58:23.710
kind of build a TV channel thing,
and we experimented with Quartz Composer,

00:58:23.710 --> 00:58:26.290
getting a prototype of how the
final result could look like.

00:58:26.330 --> 00:58:29.800
And it's now time to build
the application around it.

00:58:29.800 --> 00:58:32.800
Can we go back to slides, please?

00:58:33.840 --> 00:58:35.320
So we start from that point.

00:58:35.360 --> 00:58:38.280
We got our Composition,
kind of a monolithic object

00:58:38.300 --> 00:58:40.190
that does everything.

00:58:40.370 --> 00:58:41.980
Is that really practical to manipulate?

00:58:42.070 --> 00:58:44.300
Well, actually not,
because if you want to

00:58:44.300 --> 00:58:45.890
have a graphic artist,
for example,

00:58:45.890 --> 00:58:50.350
modify just the background or the
scrolling thing at the bottom,

00:58:50.430 --> 00:58:52.300
it's easier to work on separate pieces.

00:58:52.370 --> 00:58:57.540
So what we're going to do is divide this
Composition into five sub-Compositions,

00:58:57.630 --> 00:59:02.580
one for each visual part,
like the background, the title and such.

00:59:02.650 --> 00:59:06.540
In our hosting application,
we will need to recompose

00:59:06.540 --> 00:59:08.810
those various Compositions.

00:59:09.080 --> 00:59:13.600
The way to do that is you use the,
you've seen so far the QC view,

00:59:13.620 --> 00:59:16.570
which is one API for Quartz Composer,
and there is another

00:59:16.620 --> 00:59:19.200
API called the QC renderer,
which is lower level.

00:59:19.220 --> 00:59:23.670
It allows you more control over how the
rendering is done and when it is done.

00:59:23.720 --> 00:59:26.530
So here we're going to use
one QC renderer for each of

00:59:26.690 --> 00:59:29.190
those sub-Composition files.

00:59:29.430 --> 00:59:32.210
The QC renderer is going to
render into an OpenGL context,

00:59:32.210 --> 00:59:34.350
so this is fully accelerated.

00:59:34.760 --> 00:59:38.370
Then because we're going to call
those five QC renderers in order,

00:59:38.370 --> 00:59:42.920
we're actually going to end up inside the
OpenGL context with the same image pretty

00:59:42.920 --> 00:59:45.350
much as the one we had at the beginning.

00:59:45.400 --> 00:59:49.000
So if we connect that OpenGL context
to an on-screen display,

00:59:49.010 --> 00:59:53.700
well, you're pretty much done because
you see on screen the final result.

00:59:53.730 --> 00:59:58.320
If your video output of your computer
is connected to some kind of TV system,

00:59:58.460 --> 01:00:01.920
then the result is,
you can use the result immediately.

01:00:02.080 --> 01:00:03.400
But we can do more than that.

01:00:04.370 --> 01:00:07.430
We can actually take the frames
that are inside the OpenGL context

01:00:07.770 --> 01:00:10.140
and process them through QuickTime.

01:00:10.220 --> 01:00:11.530
Let's have a look at that.

01:00:11.620 --> 01:00:14.480
So as I said earlier,
we have on one side the OpenGL context

01:00:14.520 --> 01:00:16.500
where the rendering happens,
and this is optimized,

01:00:16.500 --> 01:00:19.230
hardware accelerated,
and it runs on the GPU.

01:00:19.410 --> 01:00:22.740
When we want to do frame processing,
like compress them and

01:00:22.740 --> 01:00:25.500
using QuickTime and such,
this happens on the CPU.

01:00:25.500 --> 01:00:30.040
So the first step is to bring back
the frames from the GPU to the CPU.

01:00:30.140 --> 01:00:32.210
For that,
we're going to use a component that

01:00:32.280 --> 01:00:33.980
I call the OpenGL Frame Reader.

01:00:34.090 --> 01:00:38.180
This component takes the OpenGL context,
read the frames inside,

01:00:38.180 --> 01:00:40.280
and produces CV pixel buffer.

01:00:40.390 --> 01:00:43.710
CV pixel buffers are core video
pixel buffers that are like

01:00:43.710 --> 01:00:47.210
simple memory wrappers around
a block of pixels in memory.

01:00:47.520 --> 01:00:50.320
It's your usual base
address row bytes thing.

01:00:50.410 --> 01:00:53.740
Then we can take those CV pixel
buffers and pass them to the new

01:00:53.740 --> 01:00:56.370
QuickTime 7 compression session APIs.

01:00:56.460 --> 01:01:01.070
They're going to take the contents of
those buffers and compress them using

01:01:01.070 --> 01:01:03.580
whatever codec and quality you want.

01:01:03.630 --> 01:01:05.910
So we have a quick time movie.

01:01:05.920 --> 01:01:08.460
We can also, if the compression is DV,
actually send those frames

01:01:08.720 --> 01:01:09.920
directly on the FireWire DV port.

01:01:09.920 --> 01:01:19.070
And then if you have any kind of
DV hardware that has a video input,

01:01:19.070 --> 01:01:26.210
I mean that has a DV input,
then the frames are ready

01:01:26.210 --> 01:01:30.530
to be used on that hardware.

01:01:32.590 --> 01:01:38.190
Let me go back to the demo station,
please.

01:01:40.470 --> 01:01:43.260
I'm going to show you now
that we have the idea,

01:01:43.260 --> 01:01:47.530
we build a prototype in Quartz Composer,
we have a clear idea how to build the

01:01:47.550 --> 01:01:52.160
architecture of the hosting application,
we can look at the final project,

01:01:52.170 --> 01:01:56.140
which is right here.

01:01:58.600 --> 01:01:59.440
Okay.

01:01:59.440 --> 01:02:05.650
So as we said earlier,
we have obviously the part of the

01:02:05.650 --> 01:02:10.940
application that's going to take care of
creating the QC renderers and rendering

01:02:10.940 --> 01:02:13.530
them in the correct order and such.

01:02:13.650 --> 01:02:16.100
So that part is in your
usual app controller class

01:02:16.100 --> 01:02:17.650
of the Cocoa application.

01:02:18.120 --> 01:02:20.560
Then we have the frame processing part.

01:02:20.560 --> 01:02:22.580
There are a few classes here.

01:02:22.580 --> 01:02:25.240
The first one is the one we
talked about that takes the

01:02:25.270 --> 01:02:28.410
contents inside the OpenGL context,
downloads it,

01:02:28.420 --> 01:02:29.740
and outputs core video frames.

01:02:29.740 --> 01:02:31.840
It's the frame reader class.

01:02:31.840 --> 01:02:34.570
Then we have another class that
is going to take those frames

01:02:34.570 --> 01:02:37.670
and compress them using the
QuickTime Compression Session APIs.

01:02:37.670 --> 01:02:39.660
So that's the frame compressor class.

01:02:39.660 --> 01:02:43.940
This is actually an abstract class in
the way this application is designed.

01:02:43.950 --> 01:02:47.300
So what I did is subclassed
it and create two subclasses.

01:02:47.300 --> 01:02:51.440
One that takes the resulting
compressed frames and sends

01:02:51.440 --> 01:02:54.500
them on the FireWire DV port,
and the other one that simply

01:02:54.500 --> 01:02:56.220
appends them to a movie file.

01:02:57.860 --> 01:03:04.070
And the last thing we need is two classes
to allow us to build UI dynamically

01:03:04.070 --> 01:03:08.750
on the fly given a Composition so
that you can edit the Composition

01:03:08.800 --> 01:03:10.760
parameters inside the application.

01:03:10.880 --> 01:03:14.370
Let's look at the final result.

01:03:15.410 --> 01:03:19.660
So this is our final application,
Quartz Composer TV.

01:03:19.660 --> 01:03:22.680
You can see here, let me just get,
we're not really in a nice

01:03:22.680 --> 01:03:27.320
environment to do keying,
so what I'm going to do

01:03:27.320 --> 01:03:31.420
is use actually a movie.

01:03:31.420 --> 01:03:31.420
Okay, left here.

01:03:32.240 --> 01:03:38.750
And I configured the Composition that
takes care of the contents to actually

01:03:38.750 --> 01:03:41.670
have an input where you can say,
take the live video input or

01:03:41.740 --> 01:03:45.010
take just a movie to operate
on for demonstration purposes.

01:03:45.110 --> 01:03:48.190
And we can do also some basic keying.

01:03:49.100 --> 01:03:51.720
- Get rid of the green and here we go.

01:03:51.760 --> 01:03:55.820
And whoops, sorry about that.

01:03:55.860 --> 01:04:03.090
And we obviously need to fix kind of the
position and scale and everything so that

01:04:03.140 --> 01:04:05.160
your weatherman is perfectly positioned.

01:04:05.210 --> 01:04:07.740
And all the parameters here
of the various compositions

01:04:07.780 --> 01:04:12.180
are available through that UI,
which was built on the fly using the

01:04:12.180 --> 01:04:14.890
classes I described to you earlier.

01:04:15.500 --> 01:04:19.590
With that result,
we can output it to a live FireWire

01:04:19.590 --> 01:04:21.550
TV stream or to a QuickTime movie.

01:04:21.620 --> 01:04:27.470
So I'm going to take the second case as
an example and just render in 320 to 240.

01:04:27.650 --> 01:04:29.600
That would be enough.

01:04:30.660 --> 01:04:32.360
And then select QuickTime Movie.

01:04:32.500 --> 01:04:34.630
Set it on the desktop.

01:04:34.640 --> 01:04:39.240
Okay, so we can select H.264 compression,
15 frames per second,

01:04:39.240 --> 01:04:41.150
that's enough for demonstration.

01:04:41.180 --> 01:04:46.480
And now the rendering that happens inside
Quartz Composer TV is visible on screen.

01:04:46.480 --> 01:04:50.320
The frames are grabbed,
downloaded from the video card,

01:04:50.360 --> 01:04:52.720
processed through QuickTime,
compressed as H.264,

01:04:52.720 --> 01:04:56.070
and eventually written
to disk inside a movie.

01:04:56.620 --> 01:04:59.260
So H.264 is a pretty
expensive compression,

01:04:59.260 --> 01:05:03.000
so in real time you won't get like 60
frames per second or something like that.

01:05:03.160 --> 01:05:05.300
But it's a good
technological demonstration.

01:05:05.480 --> 01:05:08.910
Now I can stop the export
and look at the result.

01:05:10.120 --> 01:05:13.740
So here I have my movie that
was generated in real time.

01:05:13.740 --> 01:05:16.520
I have 15 frames per second, about.

01:05:25.960 --> 01:05:28.640
So what we've seen so far,
it's a pretty big example of what

01:05:28.640 --> 01:05:30.160
you can do with Quartz Composer.

01:05:30.160 --> 01:05:33.610
I tried to design it so that you
really can reuse everything from it.

01:05:33.620 --> 01:05:36.950
The sample code is unfortunately
not available in your CDs right now,

01:05:37.010 --> 01:05:40.840
but it's going to be available in the
next few days on the usual developer

01:05:40.900 --> 01:05:42.900
website and the sample code area.

01:05:42.900 --> 01:05:46.050
Can we go back to slides, please?

01:05:53.380 --> 01:05:54.530
Things to remember.

01:05:54.680 --> 01:05:56.760
It's fairly easy to
prototype in Quartz Composer.

01:05:56.760 --> 01:05:59.740
Experiment with ideas,
have some graphical display with it,

01:05:59.780 --> 01:06:03.160
get an idea of what you want,
what's the final result you would like.

01:06:03.190 --> 01:06:05.870
But at some point, you're gonna have to
switch to implementation,

01:06:05.980 --> 01:06:08.660
and you're gonna have to
consider some design choices.

01:06:08.680 --> 01:06:12.180
Do you wanna have a very big
composition that you manipulate,

01:06:12.280 --> 01:06:14.980
or do you want to explode it like
I did in several subcompositions?

01:06:14.990 --> 01:06:16.090
Might be easier.

01:06:16.240 --> 01:06:19.880
You also need to figure out where you
put the line between the features done

01:06:19.880 --> 01:06:23.700
inside Quartz Composer and the features
done inside your host application.

01:06:23.700 --> 01:06:25.670
That's fairly important.

01:06:25.970 --> 01:06:29.120
For those of you who
are OpenGL developers,

01:06:29.120 --> 01:06:32.300
you might be interested in knowing
that the QC renderer actually

01:06:32.300 --> 01:06:34.730
renders in the current viewport.

01:06:34.780 --> 01:06:37.460
So that allows you to somehow
render the Composition in a sub

01:06:37.460 --> 01:06:40.490
area of your OpenGL context in
case you're interested in that.

01:06:40.500 --> 01:06:45.140
And in case you want to do your
own OpenGL drawing on top or

01:06:45.140 --> 01:06:48.380
below the QC renderer drawing,
you can definitely do that.

01:06:48.380 --> 01:06:53.410
And the QC renderer is saving,
restoring all the OpenGL stacks, stats,

01:06:53.410 --> 01:06:56.060
except the very simple ones,
the current ones.

01:06:56.060 --> 01:06:59.880
I provide as part of
this sample application,

01:06:59.880 --> 01:07:03.170
a class that allows you to build
UI on the fly so that you can

01:07:03.210 --> 01:07:05.130
edit the parameters and save them.

01:07:05.170 --> 01:07:09.400
So that's pretty useful and you can reuse
that easily into your own applications.

01:07:09.460 --> 01:07:13.010
One thing we did not cover today,
but that is definitely worth having a

01:07:13.010 --> 01:07:16.180
look at is the Cocoa binding features.

01:07:16.230 --> 01:07:18.780
Quartz Composer is completely
compatible with Cocoa bindings.

01:07:18.780 --> 01:07:20.840
The way it works is through
a QC view and a QC patch

01:07:20.840 --> 01:07:22.490
controller in Interface Builder.

01:07:22.700 --> 01:07:25.080
You will find into the Quartz
Composer programming guide,

01:07:25.080 --> 01:07:27.480
a tutorial on how to use Cocoa bindings.

01:07:27.500 --> 01:07:30.920
And in simple cases that
wouldn't have worked in a kind

01:07:30.920 --> 01:07:33.360
of very complex application,
like, I mean, very complex,

01:07:33.460 --> 01:07:38.180
fairly complex application like this,
but in a simple case, you can do,

01:07:38.510 --> 01:07:43.580
you can build UI even faster directly in
Interface Builder and have the UI control

01:07:43.580 --> 01:07:47.170
directly the composition parameters.

01:07:48.750 --> 01:07:52.080
More information about Quartz
Composer you will find on the usual

01:07:52.120 --> 01:07:55.160
developer.apple.com/wwdc site.

01:07:55.190 --> 01:07:58.990
All the pointers to the documentations,
new sample code that

01:07:59.090 --> 01:08:02.240
was released these days,
and other resources.

01:08:02.320 --> 01:08:05.690
We have a few sessions that
are related to Quartz Composer.

01:08:05.740 --> 01:08:08.220
The first one being the
Quartz Composer Lab,

01:08:08.220 --> 01:08:11.100
when you can come and ask questions
about Quartz Composer to developers.

01:08:11.100 --> 01:08:12.700
It's actually following this session.

01:08:12.700 --> 01:08:15.880
It's today at 3:30.

01:08:15.960 --> 01:08:18.240
And then we have other labs
where you will be able to ask

01:08:18.250 --> 01:08:21.480
Quartz Composer content as well,
like the OpenGL and Quartz

01:08:21.480 --> 01:08:23.700
Composer Lab on Friday morning.

01:08:25.230 --> 01:08:28.300
Who to contact when it comes to
questions about Quartz Composer?

01:08:28.300 --> 01:08:31.130
The best contact is Travis,
who is our graphics

01:08:31.130 --> 01:08:32.860
and imaging evangelist.

01:08:32.860 --> 01:08:40.500
You can also contact me directly,
but there is actually a mailing list,

01:08:40.500 --> 01:08:45.100
which is a much better way to ask
questions about Quartz Composer.

01:08:45.100 --> 01:08:47.100
Contact me directly or contact Travis.

01:08:47.240 --> 01:08:51.570
You will find this mailing
list on list.apple.com.

01:08:51.570 --> 01:08:52.740
It's called the Quartz Composer Dev List.