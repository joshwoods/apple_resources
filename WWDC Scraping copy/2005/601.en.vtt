WEBVTT

00:00:08.640 --> 00:00:10.000
Good morning.

00:00:10.040 --> 00:00:11.190
Welcome to the Java Overview.

00:00:11.240 --> 00:00:12.240
I'm Scott Adler.

00:00:12.240 --> 00:00:16.240
I'm the Java Frameworks Technical Lead,

00:00:16.610 --> 00:00:18.900
Today we're going to tell
you our secret plan for Java.

00:00:18.900 --> 00:00:21.860
Actually, most of you heard our
secret plan yesterday.

00:00:21.890 --> 00:00:26.730
But we're going to talk about
what you're going to learn today.

00:00:27.280 --> 00:00:30.100
One of the big questions we have
is who's out there in the audience.

00:00:30.170 --> 00:00:35.700
Now, how many of you out there have never
done Java development on Mac OS X?

00:00:35.750 --> 00:00:36.230
Never done it.

00:00:36.370 --> 00:00:36.830
Okay.

00:00:37.020 --> 00:00:41.220
So we kind of think of you as
the newbies to Java on Mac OS X.

00:00:41.390 --> 00:00:43.400
Now,
how many of you have been to like three

00:00:43.400 --> 00:00:45.890
or four developers conferences before?

00:00:46.000 --> 00:00:46.250
Okay.

00:00:46.460 --> 00:00:50.370
So here are seasoned
Mac OS X Java developers.

00:00:50.470 --> 00:00:52.800
Well, we kind of have different
things for each of you.

00:00:52.930 --> 00:00:55.550
So we're going to talk
a little bit about that.

00:00:55.660 --> 00:00:58.300
So for all the people who
are new to Mac OS X and Java,

00:00:58.330 --> 00:00:59.880
what are you going to learn?

00:00:59.920 --> 00:01:03.560
The first and most important
thing is where do you start?

00:01:03.620 --> 00:01:06.230
Because you walk up to the
computer and what are you going

00:01:06.230 --> 00:01:08.040
to do when you start using Java?

00:01:08.040 --> 00:01:10.490
The next is what's available on Mac OS X?

00:01:10.600 --> 00:01:14.400
Lots of different platforms have
different services available,

00:01:14.400 --> 00:01:18.080
so we're going to show you
what's available on our platform.

00:01:18.900 --> 00:01:22.750
And then most importantly
is when can you try it out?

00:01:22.750 --> 00:01:25.430
And that means throughout
this whole week,

00:01:25.430 --> 00:01:28.590
there's going to be lots of sessions
where you can actually get your hands

00:01:28.590 --> 00:01:33.170
on this stuff and be led through by
other Apple engineers to actually

00:01:33.410 --> 00:01:35.650
try out all the details of Java.

00:01:37.820 --> 00:01:40.740
Now the other thing,
hopefully one of the reasons

00:01:40.740 --> 00:01:43.940
you're here is that you're either
learning Java or you're already a

00:01:43.940 --> 00:01:47.780
Java developer and you're bringing
your cross-platform app to Mac OS X.

00:01:47.800 --> 00:01:50.720
Now everyone knows
Java promises write once,

00:01:50.750 --> 00:01:54.240
run anywhere,
but we know that that's a little more

00:01:54.250 --> 00:01:56.000
of a promise than an actual reality.

00:01:56.000 --> 00:01:59.990
So you'll be able to learn things like
what are the cross-platform issues.

00:01:59.990 --> 00:02:05.030
You're also going to learn
how to manage up better.

00:02:05.040 --> 00:02:07.970
And what I mean by this is that
you're going to learn what the

00:02:07.990 --> 00:02:11.600
cross-platform development issues are
and you're going to become the expert

00:02:11.600 --> 00:02:17.360
at your company on how to take your
cross-platform Java stuff and learn

00:02:17.360 --> 00:02:19.200
how to tailor it for each platform.

00:02:19.200 --> 00:02:21.800
Because you know that if you
just take a cross-platform jar,

00:02:21.890 --> 00:02:24.120
it's not going to look
exactly right on Windows.

00:02:24.120 --> 00:02:25.900
You have to do some tweaks
to make it look right.

00:02:25.900 --> 00:02:27.920
And it's not going to look
exactly right on Mac OS X.

00:02:27.920 --> 00:02:32.700
So you're going to learn how to take your
six months of development time and say

00:02:32.780 --> 00:02:34.890
we need two weeks at the end to develop.

00:02:35.050 --> 00:02:37.840
We need two weeks at the end
to do Mac OS X specific things

00:02:37.840 --> 00:02:40.970
or we need a week at the end to
do Linux things and all that.

00:02:41.040 --> 00:02:43.380
So you're going to be able
to manage up those kinds of

00:02:43.380 --> 00:02:45.040
things and plan your resources.

00:02:45.040 --> 00:02:47.530
And hopefully after
you've learned all this,

00:02:47.530 --> 00:02:51.210
you'll no longer be this young, new,
fresh-faced person and you're

00:02:51.210 --> 00:02:54.140
going to become a little
bit more of a Java expert.

00:02:55.260 --> 00:02:58.780
Now, if you're one of these seasoned
Mac OS X Java developers,

00:02:58.860 --> 00:03:01.950
sometimes we like to call the
seasoned Mac OS X developers also

00:03:02.030 --> 00:03:03.740
the jaded Mac OS X developers.

00:03:03.740 --> 00:03:08.660
And if you're one of these people,
you're here to find out what's new.

00:03:08.660 --> 00:03:12.800
You're also here to find out how to
get the most out of Mac OS X and Java.

00:03:12.800 --> 00:03:16.350
And then, really importantly,
is cool things that you

00:03:16.420 --> 00:03:18.010
don't even know about.

00:03:18.040 --> 00:03:20.980
Now, most of you didn't know about
some of the stuff yesterday,

00:03:20.980 --> 00:03:22.840
and we'll talk some more about that.

00:03:22.920 --> 00:03:26.300
But there's also things in
Mac OS X that if you're just using Java,

00:03:26.300 --> 00:03:28.650
you don't know about and
you can take advantage of.

00:03:28.700 --> 00:03:31.900
So we're asking you to
try out a new technology.

00:03:31.980 --> 00:03:34.480
Try something that you haven't
tried before with Java.

00:03:34.480 --> 00:03:37.920
And also make your app more Mac-savvy.

00:03:37.940 --> 00:03:42.180
And this is a lot of the things,
if you went to Scott's talk yesterday,

00:03:42.180 --> 00:03:44.860
he talked about all the things
to do to make your app Mac-savvy.

00:03:44.860 --> 00:03:47.330
We're hoping you can do
the same thing in Java.

00:03:47.340 --> 00:03:52.600
And hopefully, after doing all this,
you'll again no longer be jaded.

00:03:52.760 --> 00:03:57.020
and you'll be excited to
work on Java and Mac OS X.

00:03:57.510 --> 00:04:01.080
So now for everybody,
what things are you going to learn?

00:04:01.110 --> 00:04:02.790
Obviously,
you're going to learn technologies

00:04:02.790 --> 00:04:04.030
to make your applications better.

00:04:04.250 --> 00:04:05.060
That's the key.

00:04:05.100 --> 00:04:07.380
That's what we're here for.

00:04:07.980 --> 00:04:11.700
The other is how to get your questions
answered by the Java engineering team.

00:04:11.880 --> 00:04:14.880
Now, there are lots of
Java engineers from Apple here.

00:04:14.880 --> 00:04:17.650
So hopefully you can
figure out where to go,

00:04:17.850 --> 00:04:22.310
how to get your questions answered,
specifically Java questions, Java, JNI,

00:04:22.310 --> 00:04:24.210
all those kinds of things.

00:04:24.610 --> 00:04:26.640
And then of course,
we have all these hands-on

00:04:26.640 --> 00:04:27.760
sessions this year.

00:04:27.910 --> 00:04:30.710
So we want to teach you how
to get the best experience out

00:04:30.830 --> 00:04:32.330
of those hands-on sessions.

00:04:32.360 --> 00:04:37.780
How to go and be prepared for
your hands-on sessions so that

00:04:37.780 --> 00:04:40.180
you actually can follow along
instead of just watching.

00:04:40.180 --> 00:04:42.650
Because in the past,
our demos were always watch,

00:04:42.650 --> 00:04:45.320
here's what I do,
and then you go home and you're like,

00:04:45.390 --> 00:04:47.680
someone clicked on something
and did something and I don't

00:04:47.680 --> 00:04:48.810
remember where that is.

00:04:48.860 --> 00:04:50.750
But if you're following
along on your PowerBook,

00:04:50.750 --> 00:04:52.700
you'll be able to get a
great experience and say,

00:04:52.700 --> 00:04:56.090
you know,
I made my app do this as opposed

00:04:56.150 --> 00:04:58.540
to I saw someone else do it.

00:04:59.440 --> 00:05:03.480
So let's take a step back now,
and what we want to do is we want to do

00:05:03.480 --> 00:05:06.110
what we call slaying our old dragons.

00:05:06.210 --> 00:05:10.440
Now, Java has a lot of history and
a lot of reputation behind it,

00:05:10.540 --> 00:05:13.300
and we want to address some of
that history and reputation.

00:05:13.300 --> 00:05:15.180
So what are our old dragons?

00:05:15.380 --> 00:05:20.480
Well, our big old dragons are the
questions you see up here.

00:05:20.850 --> 00:05:21.940
Is it compatible?

00:05:22.120 --> 00:05:25.650
You're mostly writing in
Java because you want to write

00:05:25.740 --> 00:05:27.700
for a cross-platform environment.

00:05:27.700 --> 00:05:30.140
And actually,
I liked one of the things I saw

00:05:30.150 --> 00:05:33.120
before where it's actually
cross OS because you could have

00:05:33.120 --> 00:05:35.130
multiple OSs on the same platform.

00:05:35.140 --> 00:05:38.810
So you're trying to write cross OS.

00:05:39.100 --> 00:05:43.500
and is your cross OS application
going to run on the different OSs

00:05:43.500 --> 00:05:45.500
and is Mac OS X Java compatible?

00:05:45.500 --> 00:05:47.200
Well, we'll address that.

00:05:47.250 --> 00:05:49.460
The other question is, is it fast enough?

00:05:49.540 --> 00:05:50.840
And then of course,
the question we've been

00:05:50.840 --> 00:05:54.360
hearing a lot about is,
where's the latest JDK?

00:05:54.520 --> 00:05:57.330
And finally,
is Apple actively supporting Java?

00:05:57.560 --> 00:06:01.240
Now, I'm going to address these first
three questions and I think you'll

00:06:01.240 --> 00:06:04.530
be able to figure out for yourself
the answer to the last one.

00:06:05.670 --> 00:06:07.960
So first, compatibility.

00:06:08.040 --> 00:06:11.000
So the biggest thing with
compatibility is will your

00:06:11.120 --> 00:06:13.790
cross-platform application work?

00:06:14.650 --> 00:06:20.470
Now, one of the things we do is you file
bugs with us and we fix those bugs.

00:06:20.500 --> 00:06:24.140
So, for compatibility reasons,
we went back and just looked at all

00:06:24.140 --> 00:06:25.640
the bugs we fixed since Panther.

00:06:25.640 --> 00:06:29.710
And the Java team alone has
fixed over 2,000 bugs in

00:06:29.720 --> 00:06:32.100
Java components since Panther.

00:06:32.100 --> 00:06:35.410
So, if you think about that,
that's since our last OS release,

00:06:35.470 --> 00:06:37.800
over 2,000 bugs that we fixed.

00:06:37.800 --> 00:06:39.810
A lot of them are your
bugs that you filed on your

00:06:39.810 --> 00:06:41.420
applications for cross-platform.

00:06:41.420 --> 00:06:44.580
So, that's a lot of bugs that we've
dealt with in compatibility.

00:06:44.600 --> 00:06:47.050
But don't just take our word for it.

00:06:47.070 --> 00:06:48.850
We released Mac OS X Panther.

00:06:48.900 --> 00:06:52.620
We've had a lot of good feedback and
I wanted to share a little bit of it.

00:06:52.620 --> 00:06:57.170
On this one website, seagal.org,
he keeps track of his own personal bugs

00:06:57.250 --> 00:06:59.710
all in a nice table so you can track it.

00:06:59.740 --> 00:07:04.110
And his quote here was,
many and possibly all these bugs appear

00:07:04.110 --> 00:07:06.430
to be fixed in Java 1.4 on Tiger.

00:07:06.430 --> 00:07:08.620
That's the kind of
feedback we love to hear.

00:07:08.620 --> 00:07:12.180
Some of them we addressed
directly through his bug report.

00:07:12.180 --> 00:07:13.470
Some were through other bug reports.

00:07:13.640 --> 00:07:15.870
but he just ran through and
tested a bunch of them and

00:07:15.880 --> 00:07:17.950
found that they were all fixed.

00:07:19.100 --> 00:07:24.000
Another seasoned Mac OS X developer
wrote in to us and said one

00:07:24.000 --> 00:07:26.990
of his clients installed One5,
installed one of their really

00:07:26.990 --> 00:07:30.470
graphics-intensive apps,
and exactly what he expected happened.

00:07:30.470 --> 00:07:32.260
It worked great, happiness all around.

00:07:32.260 --> 00:07:35.000
So this is the kind of
feedback we really like to see.

00:07:35.000 --> 00:07:38.640
It means we're doing our
job on getting versions,

00:07:38.800 --> 00:07:41.590
compatible versions out for people.

00:07:42.520 --> 00:07:45.970
So when we talk about compatibility,
there are some subtleties that

00:07:46.080 --> 00:07:48.390
are really important to us.

00:07:48.430 --> 00:07:51.400
We pass what is called the
Java compatibility kit.

00:07:51.400 --> 00:07:55.610
And this is a test suite from
Sun that you have to pass in order

00:07:55.610 --> 00:07:59.760
to ship and call yourself Java,
call yourself J2SE.

00:08:00.500 --> 00:08:04.320
So we pass this Java compatibility kit,
but we know that this is

00:08:04.330 --> 00:08:06.290
not enough to be compatible.

00:08:06.300 --> 00:08:11.860
So what we take care of and we look at
are what are called the unwritten specs.

00:08:11.860 --> 00:08:16.030
And what these are are things that
have existed in Java for so long

00:08:16.030 --> 00:08:20.530
that if you don't support these,
applications just won't work.

00:08:20.540 --> 00:08:22.670
And the problem is they're unwritten.

00:08:22.670 --> 00:08:28.070
So a lot of times there's applications
that have been out there for five years,

00:08:28.070 --> 00:08:30.170
websites that use applets.

00:08:30.580 --> 00:08:32.630
So we have a lot of tests that
depend on certain functionality

00:08:32.680 --> 00:08:33.970
of Java that we have to support.

00:08:34.130 --> 00:08:36.460
So we call these the unwritten specs.

00:08:36.490 --> 00:08:39.970
And what we do is we build
regression tests for these,

00:08:39.970 --> 00:08:44.490
what we like to call unwritten specs,
so that we're constantly testing them.

00:08:44.500 --> 00:08:46.780
We use a tool called JUnit.

00:08:46.820 --> 00:08:49.260
And how many out there
have heard of JUnit before?

00:08:49.260 --> 00:08:50.780
Okay, that's great.

00:08:50.780 --> 00:08:55.000
So we use JUnit and we have automated
tests that run on every single internal

00:08:55.000 --> 00:08:57.490
build and external build of Java.

00:08:57.500 --> 00:09:01.790
Now the one reason I want to mention
this is that if you build JUnit tests

00:09:01.790 --> 00:09:05.630
and you file them with your bugs,
there's a strong possibility that

00:09:05.630 --> 00:09:08.570
we'll take those JUnit tests because,
as you know,

00:09:08.570 --> 00:09:13.190
many JUnit tests can run automatically
and have pass or fail right at the end.

00:09:13.300 --> 00:09:18.270
So those are the kind of tests we love
because there's not a description saying

00:09:18.270 --> 00:09:21.550
if the button turns the correct color,
it works.

00:09:21.550 --> 00:09:25.390
You know, we know that your test
will either pass or fail.

00:09:25.500 --> 00:09:29.040
Then those tests can go
right into our nightly tests.

00:09:29.550 --> 00:09:32.700
And then your bug hopefully
will never show up again,

00:09:32.700 --> 00:09:34.920
or if it does,
we'll catch it and an email will go

00:09:34.920 --> 00:09:38.800
out to the Java team and we'll file a
regression bug without you having to wait

00:09:38.850 --> 00:09:40.510
for a developer preview and send it back.

00:09:40.710 --> 00:09:45.770
So I strongly encourage you
to file JUnit tests with your

00:09:45.790 --> 00:09:47.090
bug reports as you do them.

00:09:47.100 --> 00:09:52.290
It'll help us with compatibility and
it'll benefit you because your bugs

00:09:52.300 --> 00:09:54.700
will be automatically tested by us.

00:09:56.700 --> 00:09:59.380
So compatibility beyond the desktop.

00:09:59.420 --> 00:10:00.180
What does that mean to us?

00:10:00.260 --> 00:10:02.540
Well, the two obvious things.

00:10:02.600 --> 00:10:07.800
There's Java Enterprise Edition,
so you can use Mac OS X for development

00:10:07.800 --> 00:10:11.860
and deployment of your J2EE apps,
and I strongly encourage you to go to the

00:10:11.860 --> 00:10:14.740
WebObjects and J2EE deployment workshop.

00:10:14.740 --> 00:10:18.740
And then Java 2 Micro Edition.

00:10:18.740 --> 00:10:20.670
Now,
this is the fastest growing area of Java,

00:10:20.670 --> 00:10:25.350
and doing mobile development,
developing your J2EE apps

00:10:25.480 --> 00:10:27.970
on -- you basically don't
develop them on your phone,

00:10:27.970 --> 00:10:31.570
so you develop them on a platform,
and Mac OS X has tools to do that,

00:10:31.570 --> 00:10:33.780
and then deploy them to your phone.

00:10:33.800 --> 00:10:37.080
So we have a whole session,
a hands-on session,

00:10:37.140 --> 00:10:40.960
for mobile development with
Xcode and J2EE devices.

00:10:40.970 --> 00:10:43.730
So if you're interested in that,
I really strongly

00:10:43.810 --> 00:10:44.640
recommend you go to that.

00:10:44.640 --> 00:10:44.810
So we have a whole session,
a hands-on session,

00:10:44.810 --> 00:10:45.140
for mobile development with
Xcode and J2EE devices.

00:10:45.140 --> 00:10:45.140
So if you're interested in that,
I really strongly

00:10:45.140 --> 00:10:45.140
recommend you go to that.

00:10:45.690 --> 00:10:48.580
But to give you a little
brief teaser for that session,

00:10:48.580 --> 00:10:53.410
I'd like to bring up Michael Powers from
Empower Player to demo a

00:10:53.410 --> 00:10:55.920
little bit about MID-P2O.

00:11:03.250 --> 00:11:05.090
Hi.

00:11:05.280 --> 00:11:07.670
Let me ask you,
how many of you are working

00:11:07.970 --> 00:11:09.450
with J2ME on the Mac?

00:11:09.470 --> 00:11:10.660
Anyone?

00:11:10.660 --> 00:11:11.900
Great.

00:11:11.920 --> 00:11:14.420
For the rest of you,
I want to change that.

00:11:14.420 --> 00:11:19.640
I want to kind of evangelize you on the
benefits of doing micro-Java development.

00:11:20.300 --> 00:11:22.850
Let me talk a little bit about me.

00:11:22.990 --> 00:11:24.070
I'm Michael Powers.

00:11:24.070 --> 00:11:26.040
I'm a CTO of Empower Player.

00:11:26.040 --> 00:11:28.990
My company makes solutions
for consumers to try,

00:11:28.990 --> 00:11:30.810
find, and buy mobile applications.

00:11:30.810 --> 00:11:34.510
But more importantly,
we have a developer kit that

00:11:34.510 --> 00:11:38.920
will allow you on the Mac to
develop J2ME applications.

00:11:38.920 --> 00:11:42.600
So in our workshop,
we're going to talk about a few things,

00:11:42.600 --> 00:11:47.490
one of which is what it's all about,
J2ME, mid-P, kind of give you a primer on

00:11:47.520 --> 00:11:49.790
what the landscape looks like.

00:11:50.250 --> 00:11:51.690
And then secondly, why do you care?

00:11:51.850 --> 00:11:52.730
Why should you be here?

00:11:52.730 --> 00:11:53.840
And the answer is really simple.

00:11:53.840 --> 00:11:54.990
You can make a lot of money doing it.

00:11:55.040 --> 00:11:57.940
And thirdly,
we'll show you how to develop, debug,

00:11:57.950 --> 00:12:01.850
and deploy your applications from
the desktop to your mobile phone.

00:12:01.880 --> 00:12:05.540
So let me show you a little bit
about what you can do with J2ME.

00:12:05.540 --> 00:12:09.730
I'm going to show you my
company's web-startable showcase

00:12:09.780 --> 00:12:11.880
for mobile applications.

00:12:11.880 --> 00:12:17.010
And you can see that you can make
pretty compelling content with the

00:12:17.010 --> 00:12:19.800
tools that are available to you.

00:12:19.800 --> 00:12:20.220
So let's go ahead and start.

00:12:20.220 --> 00:12:23.930
with J2ME and doing it on Mac OS X.

00:12:24.930 --> 00:12:27.000
This is a game written
completely in Java,

00:12:27.000 --> 00:12:29.300
completely for mobile,
and it's a quality title.

00:12:29.300 --> 00:12:29.990
It's from Gameloft.

00:12:30.040 --> 00:12:33.770
It's Tom Clancy's Splinter
Cell Chaos Theory.

00:12:33.790 --> 00:12:36.380
That's a mouthful.

00:12:38.580 --> 00:12:45.000
and anyone in this room can
write a game of this complexity.

00:12:45.110 --> 00:12:47.010
And the neat thing,

00:12:47.450 --> 00:12:51.340
The great thing about Java is that this
kind of game is completely portable.

00:12:51.340 --> 00:12:58.020
It runs not only on here on the Mac,
but also runs on, you know, Motorola,

00:12:58.060 --> 00:13:00.550
Nokia, Sony Ericsson,
all these platforms,

00:13:00.620 --> 00:13:02.390
all through the power of Java.

00:13:02.400 --> 00:13:06.400
And here you see it running on the Mac.

00:13:06.750 --> 00:13:16.130
And here is the same game running...
Pull this up just a minute.

00:13:27.030 --> 00:13:28.000
That's me.

00:13:28.000 --> 00:13:33.640
And this is the game.

00:13:33.640 --> 00:13:34.760
You just saw loading.

00:13:34.760 --> 00:13:36.240
It's the same bytecode.

00:13:36.270 --> 00:13:39.390
We just transferred it over
Bluetooth to the phone.

00:13:39.420 --> 00:13:41.270
And there it is.

00:13:41.500 --> 00:13:43.760
You guys can do this,
and I want to show you how.

00:13:43.760 --> 00:13:47.870
So come to our session and
we'll tell you all about it.

00:13:47.870 --> 00:13:49.320
Thanks.

00:13:58.680 --> 00:13:59.390
Great.

00:13:59.680 --> 00:14:01.450
So as you can see,
there's actually really rich things

00:14:01.450 --> 00:14:03.530
you can do on phones these days.

00:14:03.740 --> 00:14:06.230
Michael will tell you all
about some of the details of

00:14:06.230 --> 00:14:09.600
MIDP2O and also Ted Jusovic,
one of our DTS engineers.

00:14:09.600 --> 00:14:10.890
So there's a lot more functionality.

00:14:10.890 --> 00:14:14.550
One of the things we heard last
year was we showed a MIDP1O demo,

00:14:14.550 --> 00:14:18.830
and the thing there was there's a lot
of these functionalities of MIDP2O,

00:14:18.830 --> 00:14:21.570
and we want to be able to
take advantage of them.

00:14:21.570 --> 00:14:25.970
So this MIDP2O specification lets you
do a lot more things with networking,

00:14:25.970 --> 00:14:27.070
with sound, and some other details.

00:14:28.340 --> 00:14:30.400
So let's go back to compatibility.

00:14:30.400 --> 00:14:32.400
We talked about different
editions of Java,

00:14:32.400 --> 00:14:35.840
but with the Java standard edition,
there's a lot of extensions

00:14:36.150 --> 00:14:37.300
that people like to use.

00:14:37.300 --> 00:14:41.180
And so one of the things we do is we
bundle the extensions for compatibility.

00:14:41.380 --> 00:14:45.690
So we bundled Java Advanced Imaging
and Java 3D right into Mac OS X Tiger,

00:14:45.730 --> 00:14:48.290
so you don't have to
get an extra download,

00:14:48.300 --> 00:14:51.170
you don't have to do anything
other than just use the extensions.

00:14:51.290 --> 00:14:53.190
They're there for you.

00:14:53.470 --> 00:14:56.900
We also have had Web Start since
the beginning of Mac OS X.

00:14:56.940 --> 00:14:59.740
Web Start, if you don't know about it,
how many people have

00:14:59.740 --> 00:15:01.200
written a Web Start app?

00:15:01.230 --> 00:15:02.430
Okay, so many of you know about it.

00:15:02.440 --> 00:15:05.800
If you don't know about it,
it's a great way to deliver desktop-style

00:15:05.800 --> 00:15:07.800
applications through the web.

00:15:07.820 --> 00:15:11.270
And so you can do things like
auto-updating of your application and

00:15:11.620 --> 00:15:14.800
lots of things that people would do
hosting an application on a server,

00:15:14.800 --> 00:15:18.310
but you actually can download it
right through your web browser,

00:15:18.310 --> 00:15:22.390
and then you have the experience
of a double-clickable application.

00:15:23.200 --> 00:15:26.760
Of course, applet support,
that's one of the biggest uses of

00:15:26.760 --> 00:15:28.600
Java on Mac OS X for consumers.

00:15:28.660 --> 00:15:33.720
And then we've had Live Connect for a
while now with all of our WebKit and

00:15:33.720 --> 00:15:36.120
using our Java Cocoa plugin.

00:15:39.170 --> 00:15:41.160
So let's move on to performance.

00:15:41.180 --> 00:15:42.880
Now, the question is, is it fast enough?

00:15:43.140 --> 00:15:47.590
Well, if you saw Bertrand's talk,
obviously nothing is fast enough.

00:15:47.710 --> 00:15:48.900
We always want to get faster.

00:15:48.900 --> 00:15:52.330
But with Mac OS X Tiger,
this is the fastest

00:15:52.890 --> 00:15:55.710
Java version we've ever shipped.

00:15:57.160 --> 00:16:00.530
We have a quote from the
Australian Department of Defense,

00:16:00.530 --> 00:16:03.650
and we really like this quote
because they were talking

00:16:03.650 --> 00:16:07.330
about their cluster of XSERVs,
and they just took this cluster of

00:16:07.330 --> 00:16:09.570
XSERVs and installed Tiger on it.

00:16:09.640 --> 00:16:12.220
And just from doing that,
and they have this big

00:16:12.220 --> 00:16:16.180
Java clustering application,
they got, they said they're expected to

00:16:16.180 --> 00:16:18.460
deliver performance improvements.

00:16:18.460 --> 00:16:21.760
The reason they bought Tiger was
for the Java improvements.

00:16:21.760 --> 00:16:24.520
So we really like the fact
that they're buying it for our

00:16:24.520 --> 00:16:26.140
faster Java that's in Tiger.

00:16:27.610 --> 00:16:29.260
So let me show you a couple numbers.

00:16:29.260 --> 00:16:33.500
What we have up here is
a couple of benchmarks.

00:16:33.500 --> 00:16:35.950
Swingmark you might know,
line drawing is an

00:16:35.950 --> 00:16:38.980
internal benchmark we use,
image and graphics are things

00:16:38.980 --> 00:16:41.990
pulled out of CaffeineMark that
we pay close attention to,

00:16:42.100 --> 00:16:45.930
and then Unicode Text is another
benchmark that we use internally.

00:16:46.390 --> 00:16:49.060
Now, Panther numbers,
what you'll see here in purple,

00:16:49.060 --> 00:16:53.120
we just normalized them all to 100%, just
so you can see improvement over time.

00:16:53.120 --> 00:16:55.360
Otherwise, these numbers wouldn't
show up well on this graph.

00:16:55.420 --> 00:16:59.420
So you can see with 1.4.2 on Tiger,
we made some significant

00:16:59.420 --> 00:17:01.490
improvements in all these areas.

00:17:01.500 --> 00:17:05.840
And with J2SE 5.0,
we made some improvements,

00:17:05.840 --> 00:17:08.600
all improvements over Panther.

00:17:08.600 --> 00:17:10.160
Some were better,
some were a little worse.

00:17:10.220 --> 00:17:13.690
J2SE 5.0 has a little different
performance characteristics,

00:17:13.690 --> 00:17:15.570
and so we're doing pretty well here.

00:17:16.120 --> 00:17:19.340
And the one over here,
we don't have any numbers for,

00:17:19.340 --> 00:17:21.550
and that's because they
actually don't fit on the chart.

00:17:21.560 --> 00:17:25.500
We made some significant improvements
in Unicode text performance,

00:17:25.500 --> 00:17:28.130
so if you have a Japanese application
or Hebrew application,

00:17:28.130 --> 00:17:30.720
they'll be a lot faster
with what we have in Tiger.

00:17:34.170 --> 00:17:35.740
So now up to date.

00:17:35.760 --> 00:17:37.400
This is the question we've
been hearing for a long time.

00:17:37.400 --> 00:17:39.680
Where is the latest JDK?

00:17:39.680 --> 00:17:43.900
Well, obviously,
you all know about Mac OS X Tiger,

00:17:43.900 --> 00:17:47.390
and hopefully every single
person in this room knows that

00:17:47.390 --> 00:17:49.330
we shipped J2SE 5.0 for Mac OS X.

00:17:49.330 --> 00:17:53.180
Now, a year ago, I was up here at the
Java State of the Union,

00:17:53.190 --> 00:17:58.120
and I told you that we were going
to be shipping J2SE 5.0 on Tiger.

00:17:58.120 --> 00:18:00.110
And...

00:18:01.600 --> 00:18:05.480
We didn't make any commitment
to ship it on the CD or when

00:18:05.480 --> 00:18:07.570
on Tiger or anything like that.

00:18:07.570 --> 00:18:10.770
We made a commitment that it
would ship on Tiger at some point.

00:18:10.770 --> 00:18:12.840
We're very careful in what
we say at these conferences

00:18:12.840 --> 00:18:14.250
because we like to keep our word.

00:18:14.300 --> 00:18:16.470
Well, we kept our word,
and we kept our word the

00:18:16.470 --> 00:18:18.690
best we possibly could,
is that we shipped them

00:18:18.700 --> 00:18:19.960
on the exact same day.

00:18:19.960 --> 00:18:23.880
So you can get the download of
J2SU 5.0 on the exact same day when

00:18:23.940 --> 00:18:27.760
you got those CDs in your hand,
5.0 is available for you.

00:18:28.260 --> 00:18:30.200
So that was a big deal for
us to make sure that you

00:18:30.200 --> 00:18:31.950
didn't have to wait for 5.0.

00:18:31.950 --> 00:18:35.440
We put a lot of effort
into Mac OS X Tiger 1.4.

00:18:35.440 --> 00:18:38.660
We didn't just take what we
had and let it sit there.

00:18:38.660 --> 00:18:42.660
And we wanted to make sure that all
of those applets and applications that

00:18:42.690 --> 00:18:47.370
depend on 1.4 were as fast as possible,
and we fixed those compatibility bugs

00:18:47.370 --> 00:18:49.450
that we knew we needed to address.

00:18:49.540 --> 00:18:51.610
So we didn't just let 1.4 sit there.

00:18:51.610 --> 00:18:53.670
We worked hard on it,
and we also worked hard

00:18:53.670 --> 00:18:55.440
on getting J2SU 5.0 out.

00:18:55.600 --> 00:18:57.900
So this was a big priority for us.

00:18:57.940 --> 00:19:00.120
and we're really happy that we
could fulfill our commitment

00:19:00.180 --> 00:19:01.070
that we made last year.

00:19:03.360 --> 00:19:06.060
So what's in Tiger?

00:19:06.390 --> 00:19:08.260
Java 1.3.1 is there,
and we'll talk a little

00:19:08.260 --> 00:19:09.550
bit more about that.

00:19:09.770 --> 00:19:14.700
Java 1.4, and the point here is that 1.4
is still the default VM on Tiger.

00:19:14.700 --> 00:19:16.410
It's what ships on the DVD.

00:19:16.620 --> 00:19:18.810
It's what most users are going to use.

00:19:18.810 --> 00:19:21.490
It's what most of your applications
have probably been qualified with.

00:19:22.960 --> 00:19:25.890
J2SE 5.0 is a download
right now for Tiger,

00:19:25.890 --> 00:19:29.540
and it's not the default yet,
and that yet is pretty important.

00:19:29.680 --> 00:19:32.880
So let's talk a little
bit about J2SE 5.0.

00:19:33.100 --> 00:22:21.300
[Transcript missing]

00:22:23.330 --> 00:22:24.920
So the future.

00:22:25.200 --> 00:22:28.720
A lot of this conference has been
about what you have in Tiger and what

00:22:28.720 --> 00:22:30.250
you have in the Apple development kit.

00:22:30.320 --> 00:22:34.140
We're going to talk a little bit
about the future on what things

00:22:34.240 --> 00:22:36.290
to keep an eye out for in Java.

00:22:36.620 --> 00:22:39.800
The things in 1.4.2 Tiger Update,
the things we really want to do

00:22:39.880 --> 00:22:43.810
with 1.4.2 is we want to keep
up with the 1.4.2 underbar bug

00:22:43.810 --> 00:22:47.750
fix updates and any security
bulletins that come out for 1.4.2.

00:22:47.760 --> 00:22:51.340
Security is important to us,
so we want to make sure we don't have

00:22:51.340 --> 00:22:53.810
any security holes that are found by Sun.

00:22:56.170 --> 00:23:00.190
With J2SE5,
we want to make J2SE5 available as

00:23:00.200 --> 00:23:03.350
a software update so that your end
users will be able to get it through

00:23:03.350 --> 00:23:04.530
software update automatically.

00:23:04.620 --> 00:23:07.340
And we want to make it the default VM.

00:23:07.500 --> 00:23:11.100
Now these two we really
consider fairly intertwined.

00:23:11.100 --> 00:23:14.440
We want to make it the default VM,
but we need your feedback

00:23:14.550 --> 00:23:15.840
on your applications.

00:23:16.030 --> 00:23:19.350
Some of your applications have
been developed using a version

00:23:19.410 --> 00:23:23.540
string that says I can run with any
version of Java that's out there,

00:23:23.540 --> 00:23:25.330
the highest one in the system.

00:23:25.430 --> 00:23:29.020
And we found a couple issues where
people have not paid attention

00:23:29.060 --> 00:23:30.590
to what might be in J2SE5.

00:23:30.700 --> 00:23:33.080
Either it's because you
haven't downloaded it,

00:23:33.080 --> 00:23:34.710
you didn't have access to it at the time.

00:23:34.710 --> 00:23:38.030
So we want to make sure that your
applications will work correctly with

00:23:38.030 --> 00:23:40.560
J2SE5 before we make it the default VM.

00:23:40.560 --> 00:23:44.200
And so we need your feedback because
we don't have everybody's application.

00:23:44.200 --> 00:23:46.940
We need to know what issues
you might have with J2SE5.

00:23:46.940 --> 00:23:49.020
And we need to know
even if it's successful,

00:23:49.100 --> 00:23:50.830
we'd like to hear that feedback.

00:23:50.880 --> 00:23:52.820
What kinds of things
you've seen in the past?

00:23:52.820 --> 00:23:52.820
What kinds of things
you've seen in the past?

00:23:52.840 --> 00:23:55.240
What kind of things you've seen
when deploying any other issues?

00:23:55.240 --> 00:23:57.940
Because we want to make the
switch so that when we install

00:23:57.940 --> 00:24:01.070
this onto a user system,
J2SE5 now becomes the default.

00:24:01.080 --> 00:24:04.370
And of course,
keeping up to date with the underbar

00:24:04.370 --> 00:24:09.060
releases is a priority of ours and
security bulletins also with J2SE5.

00:24:11.640 --> 00:24:16.290
So another thing to keep an
eye out for is J2SE 6 Mustang.

00:24:16.300 --> 00:24:18.270
We're in discussions with Sun right now.

00:24:18.400 --> 00:24:20.340
We're looking at all the
features that are in there.

00:24:20.340 --> 00:24:23.750
We have,
obviously we've been working on some

00:24:23.750 --> 00:24:29.120
other things related to the Intel box,
but we're looking at what we need

00:24:29.120 --> 00:24:32.790
to do to get J2SE 6 out there
as soon as possible for you.

00:24:35.390 --> 00:24:37.940
So I said I was going
to talk about Java 1.3.

00:24:37.960 --> 00:24:41.370
How many of you were at the
State of the Union last year?

00:24:41.750 --> 00:24:46.160
Okay, so last year I got up here and
said Java 1.3 will be going away,

00:24:46.160 --> 00:24:48.380
not in Tiger, but it will be going away.

00:24:48.380 --> 00:24:51.260
Well, I'm saying the same thing again.

00:24:51.270 --> 00:24:52.540
It will be going away.

00:24:52.540 --> 00:24:56.950
This time I can tell you that it
will be going away in the next

00:24:56.950 --> 00:24:59.240
major OS release of Mac OS X.

00:24:59.240 --> 00:25:02.520
There's also another caveat to that,
but we'll get that later.

00:25:02.520 --> 00:25:05.690
But move to 1.4 and above now.

00:25:05.690 --> 00:25:09.070
If you have a blocking issue
that's keeping you from

00:25:09.070 --> 00:25:13.420
moving from 1.3 to 1.4 or 1.5,
we need to know about this.

00:25:13.420 --> 00:25:17.050
We highlight these bugs,
we pay attention to them

00:25:17.050 --> 00:25:21.370
because when J2SE6 comes out,
we're going to have four

00:25:21.370 --> 00:25:24.910
versions of Java on Mac OS X,
and you'll see how much is

00:25:24.920 --> 00:25:28.400
involved in supporting all that,
and we're moving forward.

00:25:32.520 --> 00:25:33.950
It's going to go away.

00:25:33.950 --> 00:25:37.240
So I just wanted to say
you've been warned again.

00:25:37.240 --> 00:25:39.340
So if you have issues,
please make sure you file

00:25:39.340 --> 00:25:40.520
these issues with us.

00:25:42.060 --> 00:25:43.330
So we've talked about
some of those questions.

00:25:43.340 --> 00:25:47.500
Let's talk about some of the
advantages of Java on Mac OS X.

00:25:47.820 --> 00:25:51.550
So the first thing that we like to talk
about is that it's bundled with the OS.

00:25:51.860 --> 00:25:55.310
We have a huge advantage in this
in that Java has been on every

00:25:55.510 --> 00:25:59.180
single version of Mac OS X that
we've shipped since its inception.

00:25:59.180 --> 00:26:03.790
So there's no extra downloads to get the
basic functionality of Java in there.

00:26:03.790 --> 00:26:06.120
Applets just work.

00:26:07.280 --> 00:26:09.820
And then we also
consistently update our Java.

00:26:09.910 --> 00:26:12.560
So we're shipping new versions,
new updates.

00:26:12.560 --> 00:26:14.300
If you've paid attention to
what we've done in the past,

00:26:14.460 --> 00:26:17.610
we've shipped updates out
of cycle from the main OS.

00:26:17.720 --> 00:26:23.460
So we had Panther had 1.4.1,
and then we shipped 1.4.2 as an update.

00:26:23.460 --> 00:26:25.620
We even shipped a performance
update on top of that.

00:26:25.640 --> 00:26:28.210
So we're constantly
trying to improve Java,

00:26:28.210 --> 00:26:31.460
fix the issues that you've
seen before with compatibility

00:26:31.560 --> 00:26:33.710
and performance and stability.

00:26:34.430 --> 00:26:36.790
The other big thing is
that we include tools.

00:26:36.800 --> 00:26:39.290
All of the SDK is included with Mac OS X.

00:26:39.290 --> 00:26:43.140
So there's no separate JRE,
JDK deployment thing.

00:26:43.140 --> 00:26:45.700
You get the development
tools with Mac OS X,

00:26:45.700 --> 00:26:47.290
and then when you install
the DevTools packages,

00:26:47.300 --> 00:26:49.290
you get all the extra documentation.

00:26:49.290 --> 00:26:52.890
That's another thing we have is
we have really good documentation

00:26:52.890 --> 00:26:54.710
available on Mac OS X for Java.

00:26:54.990 --> 00:27:01.140
So another big advantage of Mac OS X is
that we run on the G5 processor.

00:27:01.280 --> 00:27:04.070
Now, we'll talk more about the
other architectures we run on,

00:27:04.210 --> 00:27:07.210
but G5 has been an
important thing for us.

00:27:07.350 --> 00:27:10.840
And partly it's because
you're writing bytecodes,

00:27:10.880 --> 00:27:14.830
and your bytecodes can automatically
be taken advantage of -- we can

00:27:14.830 --> 00:27:20.240
automatically take advantage of the
processor underneath without having

00:27:20.240 --> 00:27:20.240
to change any of your bytecodes.

00:27:20.410 --> 00:27:24.220
So if we look at things like,
this is a SIMAR composite

00:27:24.280 --> 00:27:27.040
index we did a while ago,
and we just took a

00:27:27.040 --> 00:27:31.480
dual 1.25 gigahertz G4,
and we measured it, and it was,

00:27:31.480 --> 00:27:34.720
the numbers here is about 98,
and we just simulated

00:27:34.910 --> 00:27:37.600
it up to 2.5 gigahertz,
said what if the whole

00:27:37.660 --> 00:27:40.330
machine was twice as fast,
everything, and this means like

00:27:40.330 --> 00:27:42.940
memory is twice as fast,
everything is twice as fast.

00:27:42.940 --> 00:27:44.830
We get a number of 196.

00:27:46.020 --> 00:27:49.700
Well,
then we compared it to a G5 dual 2.5,

00:27:49.700 --> 00:27:52.230
and we got almost 300.

00:27:52.230 --> 00:27:56.500
I mean, this is like 43% improvement,
and this is more than twice as

00:27:56.520 --> 00:27:58.500
fast of a half-speed machine.

00:27:58.500 --> 00:28:00.260
And what's the reason for this?

00:28:00.260 --> 00:28:04.140
Well, the reason for it is that
we're using 64-bit registers,

00:28:04.140 --> 00:28:07.420
we're using 64-bit
instructions wherever we can.

00:28:07.420 --> 00:28:09.690
That means we do this free for you.

00:28:09.700 --> 00:28:15.120
So, if you look here,
we've got a long edition.

00:28:15.460 --> 00:28:16.470
So this is a pretty simple operation.

00:28:16.480 --> 00:28:18.060
I wanted to stick with
something pretty simple.

00:28:18.060 --> 00:28:19.910
You've got two longs
you're adding together.

00:28:19.920 --> 00:28:21.780
Longs are 64 bits in Java.

00:28:21.780 --> 00:28:22.570
You know, it's fixed.

00:28:22.590 --> 00:28:24.420
It's not like any other thing.

00:28:24.420 --> 00:28:26.070
So, G4 instructions.

00:28:27.590 --> 00:28:29.250
These would be your G4 instructions.

00:28:29.360 --> 00:28:32.620
The first two,
it's loading one long into two registers.

00:28:32.700 --> 00:28:34.450
Second two, doing the same thing.

00:28:34.570 --> 00:28:38.560
Then it's adding the high and the low,
and then you're done.

00:28:39.950 --> 00:28:42.950
Well, on a G5, it's four instructions.

00:28:42.990 --> 00:28:45.770
It's pretty obvious that four
instructions versus seven instructions,

00:28:45.770 --> 00:28:47.180
the four is going to be a lot faster.

00:28:47.180 --> 00:28:51.180
So with things like CIMARC,
things like any compute-intensive,

00:28:51.310 --> 00:28:55.070
things that use double and longs,
you're going to have a huge advantage

00:28:55.070 --> 00:28:57.230
on G5 without any recompilation.

00:28:57.230 --> 00:28:59.970
No if-defs,
obviously Java doesn't have that.

00:28:59.970 --> 00:29:01.740
So you just get that for free.

00:29:05.120 --> 00:29:07.990
So the other big advantage we
have is that we're built on top

00:29:08.020 --> 00:29:09.650
of all the Mac OS X frameworks.

00:29:09.680 --> 00:29:12.910
I wanted to go through each of
these a little bit because there's

00:29:13.050 --> 00:29:14.580
huge advantages to each of them.

00:29:14.580 --> 00:29:17.050
So the first one is AWT.

00:29:17.050 --> 00:29:19.620
Now, AWT, as you all know,
is the windowing toolkit.

00:29:19.620 --> 00:29:21.510
It's built on top of Cocoa.

00:29:21.510 --> 00:29:25.360
And the one thing that we get,
one of the many things we get,

00:29:25.360 --> 00:29:29.200
is services available right
inside of things like text fields.

00:29:29.200 --> 00:29:35.100
So this animation is showing you that
right inside of a little text editor,

00:29:35.100 --> 00:29:39.000
you can do things like spelling
and dictionary without having

00:29:39.330 --> 00:29:41.550
to do any lines of code.

00:29:41.560 --> 00:29:46.220
So you just, you know,
you have an AWT text field,

00:29:46.220 --> 00:29:50.340
your user control clicks on something,
and they get that pop-up that's

00:29:50.340 --> 00:29:52.650
in every Cocoa text component.

00:29:52.660 --> 00:29:55.600
You also get all the
other things of Cocoa.

00:29:55.600 --> 00:29:57.700
You get the, you know,
the Aqua look and feel for free.

00:29:57.700 --> 00:30:01.500
You get all the windowing
appearances and things like

00:30:01.500 --> 00:30:03.860
that in all of our AWT widgets.

00:30:06.480 --> 00:30:09.010
With Java 2D,
we build this on top of Quartz,

00:30:09.010 --> 00:30:11.150
Quartz which is our
whole 2D rendering layer.

00:30:11.150 --> 00:30:16.050
So all of your Java 2D,
which is a really nice object-oriented

00:30:16.100 --> 00:30:20.270
development for doing graphics,
you can do your lines,

00:30:20.270 --> 00:30:22.950
your transformations,
all of your compositing,

00:30:22.960 --> 00:30:24.720
it all works directly with Quartz.

00:30:24.740 --> 00:30:27.740
So not only do you get
these great compositions,

00:30:27.740 --> 00:30:31.850
you also get our really good
text system under the covers.

00:30:31.860 --> 00:30:36.680
And this is how we got some of that
advanced speed using double byte text

00:30:36.730 --> 00:30:41.280
is that we were using the text system
underneath us and used it in a way

00:30:41.280 --> 00:30:43.240
that gave us a lot more performance.

00:30:43.240 --> 00:30:47.310
But you get this great text,
you can take advantage of all the

00:30:47.320 --> 00:30:53.240
multi-directional or bi-directional text
that's in there that Quartz supports.

00:30:54.500 --> 00:30:57.880
With accessibility,
when you use the Java accessibility APIs,

00:30:58.020 --> 00:31:01.690
we wire these directly into the
Mac OS X accessibility APIs.

00:31:01.760 --> 00:31:07.400
So things like VoiceOver should work just
right with your Java accessibility APIs.

00:31:07.400 --> 00:31:10.600
You don't have to write
anything custom for Mac OS X.

00:31:10.600 --> 00:31:14.000
So if you're supporting accessibility,
and if you saw in the talk earlier,

00:31:14.030 --> 00:31:17.390
you know, there's some places that won't
actually buy your applications

00:31:17.440 --> 00:31:19.000
unless accessibility works.

00:31:19.020 --> 00:31:22.060
If you just support the
Java accessibility APIs,

00:31:22.060 --> 00:31:24.150
we'll pick them up automatically.

00:31:26.300 --> 00:31:29.580
And then with printing,
with things like Java AWT printing

00:31:29.580 --> 00:31:32.260
and also Java X printing,
we build this right on

00:31:32.260 --> 00:31:33.400
top of our print services.

00:31:33.400 --> 00:31:37.130
So with Java AWT printing,
you get all of the native print services

00:31:37.180 --> 00:31:40.960
including our native print dialogues,
being able to print right to a PDF,

00:31:40.960 --> 00:31:43.080
and all the things that users expect.

00:31:43.080 --> 00:31:46.990
And then in J2SU 5.0,
we support Java X print,

00:31:46.990 --> 00:31:49.220
and that's built right
on top of CUPS printing,

00:31:49.220 --> 00:31:54.960
and you can get to all the details of the
printers inside of using Java X print.

00:31:54.960 --> 00:31:57.920
And so we wanted to show a
little quick demo of this.

00:31:57.920 --> 00:32:01.680
I want to bring up Mike Swingler
from the Java classes team,

00:32:01.720 --> 00:32:03.830
show you a demo of Java X print.

00:32:07.300 --> 00:34:30.500
[Transcript missing]

00:34:37.060 --> 00:34:37.850
So thanks, Mike.

00:34:37.940 --> 00:34:42.110
So one of the things that I hope
you get out of Mike's demo program

00:34:42.120 --> 00:34:45.080
he wrote was that it's really easy
to get to all this information.

00:34:45.080 --> 00:34:48.700
The reason Java X print exists is so
that you can get to some of the details.

00:34:48.740 --> 00:34:50.900
And we've implemented
it right on top of CUPS.

00:34:50.950 --> 00:34:55.230
So if you're doing any complex
printing application-- Mike wrote

00:34:55.250 --> 00:34:57.000
this in just a couple days.

00:34:57.000 --> 00:35:00.250
Between all the stuff we were
doing with developing Java stuff

00:35:00.390 --> 00:35:03.080
for the Intel platform,
we asked him to write

00:35:03.080 --> 00:35:04.540
a demo on Java X print.

00:35:04.580 --> 00:35:06.480
And he just jumped in and
did it in a couple days.

00:35:06.480 --> 00:35:09.950
And it's not that hard to
get all this information out.

00:35:11.060 --> 00:35:14.120
So let's continue on.

00:35:14.120 --> 00:35:17.440
So all of the utility
frameworks in Java are built

00:35:17.440 --> 00:35:18.960
on top of our core frameworks.

00:35:19.010 --> 00:35:22.420
So things ranging from networking,
which is built right on top of

00:35:22.440 --> 00:35:26.030
our core networking services,
which gives us all the IPv6

00:35:26.300 --> 00:35:30.000
support just right out of the box,
our keychain integration and

00:35:30.040 --> 00:35:32.690
security are all built right on
top of these core frameworks.

00:35:32.800 --> 00:35:36.100
And I wanted to talk a little
more in-depth about this,

00:35:36.140 --> 00:35:38.560
because security is
very important for us.

00:35:38.810 --> 00:35:43.890
So I wanted to talk a little bit
about some of our security features.

00:35:44.420 --> 00:35:46.210
The first one is keychain integration.

00:35:46.320 --> 00:35:48.800
And what does keychain
integration really mean to you?

00:35:48.800 --> 00:35:51.390
Well,
it means that as a Java application,

00:35:51.390 --> 00:35:54.140
if you're using certificates,
there's just going to be one place to

00:35:54.200 --> 00:35:57.690
store your certificates that's the same
as all the other native applications.

00:35:57.700 --> 00:36:01.430
And what this means is you're
not this special Java thing that

00:36:01.430 --> 00:36:05.670
has certificates over in the
Java LAN and it's totally separate.

00:36:05.680 --> 00:36:09.510
It means your certificates are stored
with everyone else in the keychain.

00:36:09.510 --> 00:36:13.800
And you get to go, your users can use the
same keychain application.

00:36:14.370 --> 00:36:16.280
So, you can manage your certificates
by using the keychain.

00:36:16.280 --> 00:36:18.320
And what's really important is
you can manage your certificates

00:36:18.320 --> 00:36:19.090
by using the keychain.

00:36:19.090 --> 00:36:21.390
And so, if you're using a keychain,
you can use the keychain application

00:36:21.390 --> 00:36:22.410
to manage your certificates.

00:36:22.410 --> 00:36:24.530
This is really important because
our keychain application is used

00:36:24.530 --> 00:36:25.620
by anyone who's security aware.

00:36:25.770 --> 00:36:26.890
They know how to use this application.

00:36:26.890 --> 00:36:28.770
They know how to get to these
certificates and manage them.

00:36:28.870 --> 00:36:30.280
So, there's not a special
management for Java.

00:36:30.370 --> 00:36:32.000
All of our applets and
Web Start certificates are all

00:36:32.110 --> 00:36:33.890
stored in there automatically.

00:36:35.110 --> 00:36:38.610
So the other thing is we've implemented
the Apple Security Provider.

00:36:38.610 --> 00:36:43.480
And this is an implementation on
top of the Java Security Provider.

00:36:43.480 --> 00:36:47.180
And what we've done is we've
implemented this on top of our own

00:36:47.180 --> 00:36:49.900
native cryptography and security APIs.

00:36:49.900 --> 00:36:55.010
So it gives things like random
number generation and a couple

00:36:55.050 --> 00:37:01.320
cryptographic functions built right
in and exposed directly to Java.

00:37:01.320 --> 00:37:04.390
So you have our native cryptography
available right to Java.

00:37:05.240 --> 00:37:09.080
And the point of this is that we
have this basic version of this

00:37:09.080 --> 00:37:14.020
done that is useful and usable for
basic cryptography functionality.

00:37:14.020 --> 00:37:16.840
But there's still a lot more
we want to do in this area.

00:37:16.840 --> 00:37:17.820
We want to expose more.

00:37:17.820 --> 00:37:21.460
We have a large security team that
works on these specific kinds of issues.

00:37:21.480 --> 00:37:23.650
And we want to leverage
what they're doing.

00:37:23.730 --> 00:37:25.770
We don't want to reinvent this in Java.

00:37:25.780 --> 00:37:28.880
So we've done all the work
to expose this up to Java.

00:37:28.880 --> 00:37:30.820
But we know there might
be more that you want.

00:37:30.880 --> 00:37:33.020
So we really need your feedback.

00:37:33.020 --> 00:37:36.290
If you're working on any applications
that need this kind of security,

00:37:36.410 --> 00:37:41.620
that need a security provider,
and you have certain functionality that

00:37:41.620 --> 00:37:45.420
is maybe not yet available or you need,
please tell us about it.

00:37:45.530 --> 00:37:47.300
Come to our feedback forum.

00:37:47.300 --> 00:37:48.840
Send us emails.

00:37:48.840 --> 00:37:51.160
Let us know because we're
still working in this area and

00:37:51.160 --> 00:37:52.520
we want to make this better.

00:37:55.350 --> 00:37:59.180
And with JGSS,
this is the Java implementation of,

00:37:59.290 --> 00:38:02.220
it's a full Kerberos
implementation on Mac OS X.

00:38:02.220 --> 00:38:08.280
Now, the big thing here is that we access
all the credentials in memory,

00:38:08.280 --> 00:38:10.580
so all your tickets are
available in memory,

00:38:10.580 --> 00:38:15.570
and we're actually the first J2SE to
fully support the MIT Kerberos.

00:38:15.700 --> 00:38:18.830
This is even before Sun has
fully supported this in their

00:38:18.840 --> 00:38:20.730
J2SEs on other platforms.

00:38:20.740 --> 00:38:24.140
So, someone who knows about Kerberos,
that's great.

00:38:24.200 --> 00:38:24.600
Thanks.

00:38:25.200 --> 00:38:29.030
So, this is really important to us
because we want to support all

00:38:29.030 --> 00:38:32.980
these open source efforts and
security is very important to us.

00:38:33.000 --> 00:38:38.530
So, if you want to learn more about this,
we have some documentation on this,

00:38:38.530 --> 00:38:40.370
and then you can come
talk to us in the labs,

00:38:40.380 --> 00:38:42.690
too, and talk to some of
our security engineers.

00:38:45.270 --> 00:38:48.380
So we talked some about
security and networking.

00:38:48.390 --> 00:38:51.720
And finally,
there's a bunch of 3D extensions.

00:38:51.760 --> 00:38:54.000
Joggle is an open source 3D extension.

00:38:54.040 --> 00:38:55.270
Java 3D we talked about.

00:38:55.310 --> 00:38:57.980
All these are built on top
of our OpenGL implementation,

00:38:57.980 --> 00:38:59.230
which is rock solid.

00:38:59.230 --> 00:39:01.750
It's used for games and
lots of things internally,

00:39:01.750 --> 00:39:01.970
too.

00:39:02.040 --> 00:39:04.180
So you know that there's going
to be a solid foundation for

00:39:04.260 --> 00:39:06.880
all of your 3D applications.

00:39:06.880 --> 00:39:08.480
So here's the whole thing.

00:39:08.660 --> 00:39:11.050
We're built on top of
all these frameworks.

00:39:11.120 --> 00:39:14.980
Our big job is to make sure that
your Java applications take advantage

00:39:14.980 --> 00:39:18.130
of all the work that everyone
else here at Apple is doing.

00:39:18.150 --> 00:39:21.380
As much as you're working on
a cross-platform application,

00:39:21.380 --> 00:39:23.700
when you come to Mac OS X,
we want you to have the

00:39:23.730 --> 00:39:25.080
best experience possible.

00:39:25.120 --> 00:39:27.120
So we want to leverage all
the work that they've done.

00:39:30.100 --> 00:39:35.720
So the other reason we've heard people
really like Java on Mac OS X is Aqua.

00:39:35.750 --> 00:39:40.200
Now, one of the big things here is
that we have Aqua everywhere.

00:39:40.200 --> 00:39:43.150
Your AWT programs we
already talked about.

00:39:43.220 --> 00:39:47.580
AWT is built right on top of Cocoa,
so it all will look with a native look.

00:39:47.670 --> 00:39:49.570
It'll be Aqua,
everything you ever wanted.

00:39:49.960 --> 00:39:53.870
With Swing, we invested a lot into the
Swing Aqua look and feel.

00:39:53.880 --> 00:39:56.520
And this is a full,
lightweight renderer that

00:39:56.840 --> 00:40:00.510
under the covers uses native
rendering for the look and feel.

00:40:00.520 --> 00:40:04.310
So this is something that
pretty much only Apple could do,

00:40:04.320 --> 00:40:07.630
and we made all of your
Swing components look almost

00:40:08.080 --> 00:40:10.180
identical to native components.

00:40:10.200 --> 00:40:13.200
When you're running a Swing app,
you just bring it over.

00:40:13.350 --> 00:40:16.340
Usually you bring it up and it
fits in pretty well with the rest

00:40:16.340 --> 00:40:18.450
of the applications on the system.

00:40:18.460 --> 00:40:19.730
And this is really important.

00:40:19.860 --> 00:40:22.100
We've heard of some
third-party developers who

00:40:22.100 --> 00:40:25.070
have come into us and said,
we prototype on Java all

00:40:25.070 --> 00:40:28.790
the time on Mac OS X because
it's so fast for us to take.

00:40:28.850 --> 00:40:30.180
We have all these Java developers.

00:40:30.180 --> 00:40:33.480
They can write up things,
and we'd rather show our clients on

00:40:33.550 --> 00:40:37.530
Mac OS X than on a Windows box because
it just looks so slick on Mac OS X.

00:40:37.540 --> 00:40:40.460
And we've heard that developers
have gotten contracts this way

00:40:40.460 --> 00:40:43.460
because customers have said,
really, that's a Java app running

00:40:43.480 --> 00:40:46.460
there because they're only
used to it running on Windows.

00:40:46.460 --> 00:40:49.720
And the key here is that
it mostly just works.

00:40:49.760 --> 00:40:52.450
You bring your app over,
it runs with the default look and feel,

00:40:52.550 --> 00:40:55.380
which is the Aqua look and feel,
and you've got Aqua everywhere.

00:40:58.320 --> 00:41:02.460
So another thing we provide
on Mac OS X is this thing

00:41:02.460 --> 00:41:03.650
called extended AWT.

00:41:03.650 --> 00:41:07.760
And the reason we're providing this
is because there are some things

00:41:07.820 --> 00:41:11.430
missing from AWT that you have to
have to make your application a

00:41:11.560 --> 00:41:13.620
first-class Mac OS X application.

00:41:14.380 --> 00:41:17.050
Now, we're not trying to lock
you into our platform.

00:41:17.050 --> 00:41:21.670
We're trying to provide these so that
you can actually make applications

00:41:21.670 --> 00:41:25.810
for your users that are applications
that look and act the way people

00:41:25.960 --> 00:41:28.480
expect Mac OS X applications to act.

00:41:29.000 --> 00:41:32.260
Without this,
you would have to have your own exit

00:41:32.580 --> 00:41:35.060
menu in your file menu somewhere.

00:41:35.060 --> 00:41:38.340
You would have all of your
menus inside of your windows,

00:41:38.380 --> 00:41:41.800
all these weird things that
Mac OS X users are not used to.

00:41:41.800 --> 00:41:44.140
So we provide functionality to let you.

00:41:44.390 --> 00:41:48.620
Activate and have access to all
the items in the application menu.

00:41:48.620 --> 00:41:50.780
So things like preferences
about and quit.

00:41:50.780 --> 00:41:54.680
We also allow access to things in the
dock like the open document event that

00:41:54.680 --> 00:41:58.140
happens when people drag a document
to the dock or double click on a

00:41:58.140 --> 00:42:00.560
document that you've registered for.

00:42:00.560 --> 00:42:03.590
We also have other extensions
inside of there for quit

00:42:03.590 --> 00:42:05.580
handling and some other things.

00:42:05.600 --> 00:42:10.680
So I strongly suggest you look
at the extended AWT we call EAWT.

00:42:10.680 --> 00:42:14.360
And you can, there's tips and tricks
on how to install.

00:42:14.360 --> 00:42:17.800
This so that you don't have to be
dependent on the package being there.

00:42:17.800 --> 00:42:21.440
So again, using things like reflection,
you can have your build system.

00:42:21.490 --> 00:42:25.070
There's there were some stub libraries
released a while ago so that you can

00:42:25.070 --> 00:42:28.270
build this into your application,
but still be cross platform and

00:42:28.310 --> 00:42:30.350
that's very important to us.

00:42:32.360 --> 00:42:36.870
So in Bertrand's talk yesterday,
he talked about Java for a while,

00:42:36.870 --> 00:42:38.170
which is great.

00:42:38.170 --> 00:42:42.580
And he talked about how Java is a
really good object-oriented language.

00:42:42.580 --> 00:42:46.520
It's a good way to bring
applications up and design things.

00:42:46.520 --> 00:42:49.660
But he said, when you want to become a
first-class application,

00:42:49.680 --> 00:42:51.520
you really want to turn to Cocoa.

00:42:51.790 --> 00:42:55.380
Well, we have a different view on that
in that we want to give you as

00:42:55.380 --> 00:42:58.100
much as possible to get you to
that first-class application.

00:42:58.100 --> 00:43:01.290
Obviously, there are many things
you can do in Cocoa,

00:43:01.300 --> 00:43:03.960
but we think there are a lot
of things you can do in Java.

00:43:03.960 --> 00:43:07.830
And some of the things that
I've talked about already,

00:43:07.830 --> 00:43:12.010
about using extended AOT,
using the screen menu bar property

00:43:12.390 --> 00:43:17.240
that's built into the Aqua look and feel,
is really important to us.

00:43:17.450 --> 00:43:21.050
And we want your feedback on more things
we can do so that your applications

00:43:21.090 --> 00:43:21.520
can become a first-class application.

00:43:21.550 --> 00:43:34.070
So we want to expose these as
first-class Java applications,

00:43:34.070 --> 00:43:47.910
so these APIs, so you can actually be a
first-class application.

00:43:47.920 --> 00:43:52.390
So there's a whole session on developing,
debugging,

00:43:52.560 --> 00:43:54.950
and deploying Java applications.

00:43:55.040 --> 00:43:56.280
The session number's right up here.

00:43:56.380 --> 00:43:58.510
You can see that on Thursday morning.

00:43:58.600 --> 00:44:02.210
And they're going to talk a
little bit more about this.

00:44:02.780 --> 00:44:03.490
Oh, it says p.m.

00:44:03.500 --> 00:44:04.150
That's wrong.

00:44:04.320 --> 00:44:05.510
It's Thursday at 9 a.m.

00:44:05.510 --> 00:44:08.840
So I think we're closed at 9 p.m.

00:44:08.900 --> 00:44:10.530
So, yeah, 9 a.m.

00:44:10.530 --> 00:44:14.530
And then the one thing I wanted
to talk a little bit about

00:44:14.530 --> 00:44:16.790
was bundled applications.

00:44:16.790 --> 00:44:19.710
So bundling applications.

00:44:19.720 --> 00:44:22.500
The reason I talk about this in
the Java Overview is many people

00:44:22.570 --> 00:44:24.280
are coming from other platforms.

00:44:24.280 --> 00:44:28.910
And a lot of other platforms don't
have concepts of application bundles.

00:44:28.910 --> 00:44:32.130
It's something that's very
important to us to end users,

00:44:32.750 --> 00:44:34.490
applications are just a thing.

00:44:34.590 --> 00:44:35.870
It's the same as a file.

00:44:35.870 --> 00:44:38.920
We know, you know,
because we're all Unix heads and stuff,

00:44:38.920 --> 00:44:41.120
we know that inside of there
you can do a CD inside of the

00:44:41.210 --> 00:44:42.680
application and see what's in there.

00:44:42.710 --> 00:44:44.310
It's actually a file system.

00:44:44.310 --> 00:44:46.100
But it's an application bundle.

00:44:46.140 --> 00:44:48.630
So we want you to use
the application bundle.

00:44:48.630 --> 00:44:49.880
We don't want this.

00:44:49.990 --> 00:44:54.700
We don't want a folder full of stuff with
shell scripts and other stuff and all of

00:44:54.840 --> 00:44:57.260
your jar files spewed about and all that.

00:44:57.680 --> 00:45:01.400
That's extremely messy,
extremely fragile for end users.

00:45:01.400 --> 00:45:03.680
We do want something like this.

00:45:03.680 --> 00:45:07.320
All we want is you to install
an application and to end users,

00:45:07.320 --> 00:45:08.320
that's all they see.

00:45:08.320 --> 00:45:10.120
If you need a data folder, that's okay.

00:45:10.120 --> 00:45:11.340
You can do stuff like that.

00:45:11.350 --> 00:45:15.100
But really stay away from the shell
scripts outside of the bundle.

00:45:15.150 --> 00:45:18.880
You want to deliver full-fledged
first-class Mac OS X applications.

00:45:18.880 --> 00:45:21.020
And there's a lot of
tools to let you do this.

00:45:23.470 --> 00:45:25.260
So I'm going to move on a little
bit from that and I want to talk a

00:45:25.260 --> 00:45:26.580
little bit about Cocoa Component.

00:45:26.580 --> 00:45:31.080
Now, this is an area where we're getting
into Mac OS X specific things.

00:45:31.080 --> 00:45:35.200
And what Cocoa Component is,
is it's something we've made so

00:45:35.270 --> 00:45:38.760
you can embed any Cocoa NSView,
so any Cocoa View,

00:45:38.760 --> 00:45:41.460
right inside of a Mac OS X application.

00:45:41.460 --> 00:45:45.620
And you can interact with that using JNI,
but you don't have to.

00:45:45.620 --> 00:45:48.600
If it's a Cocoa View that
knows how to deal with itself,

00:45:48.600 --> 00:45:51.380
you just put it in your
application and just go.

00:45:52.350 --> 00:45:55.630
So the good thing about this is there's
lots of little things in Cocoa that

00:45:55.630 --> 00:45:58.850
you might want to use and you can just
drop them right into your application.

00:45:58.860 --> 00:46:01.830
So I wanted to show you
a quick demo of this.

00:46:01.830 --> 00:46:05.250
So we can go to demo one.

00:46:08.540 --> 00:46:11.800
So what I did is I took an
application that was written

00:46:11.800 --> 00:46:15.080
by one of our DTS engineers,
Matt Drance,

00:46:15.130 --> 00:46:21.000
that has a very simple Cocoa component,
and I just modified it a little bit.

00:46:21.020 --> 00:46:24.070
So if I launch this application...

00:46:24.850 --> 00:46:31.420
What you can see here is this is
a Java frame and it's got some

00:46:31.420 --> 00:46:36.060
controls on the top and it's got
this custom list I made over here and

00:46:36.270 --> 00:46:39.700
this black area is a Cocoa component.

00:46:39.700 --> 00:46:45.700
And what this black area is,
is it's a Quartz Composer view.

00:46:45.700 --> 00:46:48.790
So I can load any Quartz
Composer thing I've built before.

00:46:48.790 --> 00:46:50.590
So if you've seen Quartz Composer,
we have some demos.

00:46:50.700 --> 00:46:54.780
So here's a little demo here and when
I click on these and I load them,

00:46:54.780 --> 00:46:58.700
I also load some sound files and
play them through Java Sound.

00:46:58.700 --> 00:47:01.690
So that's not done natively,
that's done through the Java APIs.

00:47:01.710 --> 00:47:03.690
So this is just a Quartz Composer.

00:47:03.740 --> 00:47:05.700
So I have a couple other things.

00:47:05.700 --> 00:47:06.700
I just load different sounds.

00:47:06.700 --> 00:47:09.970
And what we're doing here
is we're using Java events,

00:47:09.970 --> 00:47:12.760
the whole regular
Java programming system,

00:47:12.760 --> 00:47:13.700
and I just wrote one JNI function.

00:47:13.750 --> 00:47:15.700
Actually Matt wrote it.

00:47:15.700 --> 00:47:18.990
And it's one JNI function that just
passes the name of which Quartz

00:47:19.030 --> 00:47:20.650
Composer thing I want to load.

00:47:20.780 --> 00:47:22.700
That's all the JNI I had to do.

00:47:22.700 --> 00:47:24.670
The rest was just a Cocoa component.

00:47:24.750 --> 00:47:26.670
And so I downloaded a bunch of things.

00:47:26.700 --> 00:47:27.700
Well these were demos.

00:47:27.700 --> 00:47:32.530
And then I downloaded this
off the web which is... Oops,

00:47:32.540 --> 00:47:39.190
let me quit out of this guy
here and relaunch my sample.

00:47:40.020 --> 00:47:42.900
And so this is a sample I loaded
off of someone's website.

00:47:42.900 --> 00:47:46.860
I can't remember who,
but just takes the input from the

00:47:46.890 --> 00:47:50.040
camera and runs some effects on it.

00:47:50.190 --> 00:47:53.530
So we like to call this
the "aha video" and stuff.

00:47:53.740 --> 00:47:58.910
And then this one just has
the particle effects with

00:47:58.920 --> 00:48:00.970
the camera input right in it.

00:48:01.060 --> 00:48:05.080
So the idea here is that whatever
you want to do with Cocoa,

00:48:05.300 --> 00:48:07.570
you can do right in your
Java application if you want.

00:48:07.570 --> 00:48:10.360
This is all standard
Java code running here.

00:48:10.390 --> 00:48:12.140
So that's our demo.

00:48:12.140 --> 00:48:17.340
So we can go back to slides.

00:48:17.340 --> 00:48:17.340
Great.

00:48:20.680 --> 00:48:24.760
So there's a lot of things you can do
with JNI and Java native integration.

00:48:24.800 --> 00:48:29.740
So what we want you to do is we
want you to learn how to do this

00:48:29.850 --> 00:48:31.280
easily if you want to do it.

00:48:31.320 --> 00:48:35.310
Because there's many things people
have asked us for and there aren't

00:48:35.320 --> 00:48:37.470
good Java APIs for it necessarily.

00:48:37.650 --> 00:48:40.180
So if you want to do it yourself,
you can always jump

00:48:40.180 --> 00:48:41.440
down into native code.

00:48:41.440 --> 00:48:44.580
And this can be really useful for
extending your application for

00:48:44.610 --> 00:48:48.300
those little edge cases that we
haven't taken care of for you.

00:48:48.300 --> 00:48:51.660
So you might want to mix your
Java code with native code.

00:48:51.660 --> 00:48:54.010
There are other reasons why
you may want native code.

00:48:54.200 --> 00:48:58.590
Sometimes you have a big C library that
your Java code is just a front end for.

00:48:58.590 --> 00:49:02.470
So you want to build your Java code
just to do this nice interface and

00:49:02.470 --> 00:49:05.980
then you have the C library that does
a bunch of computation or something

00:49:05.980 --> 00:49:09.520
or some legacy Fortran library
that you've compiled or something.

00:49:09.590 --> 00:49:11.260
So you want to learn how to do this.

00:49:11.360 --> 00:49:13.600
Well,
we have an entire hands-on session that

00:49:13.600 --> 00:49:15.640
will show you how to do native code.

00:49:15.640 --> 00:49:16.540
So JNI is a very good example of that.

00:49:16.540 --> 00:49:18.220
So you can go to the JNI website and you
can see how to do things like Java H,

00:49:18.220 --> 00:49:21.010
how to set up your native code,
how to set up Xcode

00:49:21.090 --> 00:49:22.320
to do the development.

00:49:22.320 --> 00:49:24.400
It's kind of daunting
the first time you do it.

00:49:24.400 --> 00:49:27.280
Once you have it set up and going,
it's pretty easy.

00:49:27.280 --> 00:49:31.060
So this will take you through all
the steps of starting with just a

00:49:31.140 --> 00:49:35.270
really simple project that just does
one thing with native code all the

00:49:35.310 --> 00:49:37.900
way through a really complex thing,
even including things

00:49:37.980 --> 00:49:39.020
like Cocoa component.

00:49:39.020 --> 00:49:42.360
So I would strongly suggest
you go to this one and this

00:49:42.360 --> 00:49:46.290
is 3:30 p.m., not 3:30 a.m.

00:49:47.880 --> 00:49:50.620
So we've talked about this before,
but I want to mention it again.

00:49:50.620 --> 00:49:54.280
Bonjour for Java is a functionality
that we've bundled into Tiger.

00:49:54.280 --> 00:49:57.800
And what this is,
is this is so you don't have to do the

00:49:57.800 --> 00:50:00.660
JNI calls to do all the Bonjour support.

00:50:00.660 --> 00:50:04.020
So Bonjour is used for
lots of different things.

00:50:04.020 --> 00:50:06.900
It's usually people talk about
it in terms of discovering

00:50:06.900 --> 00:50:08.580
printers and things like that.

00:50:08.580 --> 00:50:10.030
It's way beyond that now.

00:50:10.040 --> 00:50:11.390
People are using it for games.

00:50:11.390 --> 00:50:12.960
They're using it for chat programs.

00:50:13.090 --> 00:50:15.120
They're using it for
collaborative computing.

00:50:15.120 --> 00:50:19.050
This program, Sabetha Edit,
we've even used internally where

00:50:19.050 --> 00:50:21.440
you can have multiple people
editing the same document together

00:50:21.440 --> 00:50:24.760
and you just can discover people
right in your local network.

00:50:24.960 --> 00:50:29.360
So the point of this is that we've
made Bonjour available to Java.

00:50:29.360 --> 00:50:33.240
We've done all the work of
exposing the APIs up to Java.

00:50:33.240 --> 00:50:35.140
And we also have made it
available for Windows.

00:50:35.150 --> 00:50:39.380
So if you have this cross-platform
application and you want to use Bonjour,

00:50:39.500 --> 00:50:40.680
you have these APIs available.

00:50:40.680 --> 00:50:42.460
It's bundled right into Tiger.

00:50:42.460 --> 00:50:45.840
You can bundle it into your
deployment on Windows because that's

00:50:46.020 --> 00:50:47.400
the way people do things on Windows.

00:50:47.400 --> 00:50:50.570
You deploy an entire JRE,
so you'll have to bundle it yourself.

00:50:50.610 --> 00:50:51.930
But we have it on Tiger.

00:50:51.930 --> 00:50:54.150
It was a download available for Panther,
too.

00:50:54.150 --> 00:50:58.100
So if you want to check this out,
there's documentation online.

00:50:58.100 --> 00:51:03.010
The package name is comapple-dnsd,
so you can do all of your dynamic lookup.

00:51:05.600 --> 00:52:48.300
[Transcript missing]

00:52:48.470 --> 00:52:50.160
and there are other features of Xcode.

00:52:50.160 --> 00:52:52.310
You can learn all about them
from the Xcode sessions.

00:52:52.310 --> 00:52:55.280
There's custom executables, smart groups,
lots of search functionality

00:52:55.280 --> 00:52:56.350
built right in there.

00:52:58.970 --> 00:53:01.270
So other Mac OS X tools.

00:53:01.280 --> 00:53:02.790
We have building and deploying tools.

00:53:02.840 --> 00:53:05.280
So Jar Bundler is a tool we ship.

00:53:05.340 --> 00:53:08.460
So if you don't do your build using
Xcode and you just have a jar file,

00:53:08.460 --> 00:53:10.840
you can bundle it into this
great application bundle

00:53:10.850 --> 00:53:12.120
just using Jar Bundler.

00:53:12.120 --> 00:53:15.000
It takes jar files,
it takes all of your resource

00:53:15.000 --> 00:53:18.620
files and pushes them right
into one application bundle.

00:53:18.620 --> 00:53:23.060
Also Ant we ship on Tiger,
so you have Ant available for you.

00:53:23.560 --> 00:53:26.400
For profiling,
we have all these tools like Shark and

00:53:26.490 --> 00:53:28.800
all the rest of the performance tools.

00:53:28.960 --> 00:53:31.800
And we also have graphics
tools for like Quartz debug.

00:53:31.800 --> 00:53:36.870
We have other tools like Thread Viewer,
Spin Control that will let you see what's

00:53:36.870 --> 00:53:40.990
going on natively under the covers in
case you're writing native code or if

00:53:41.050 --> 00:53:45.870
you just want to see what's going on with
the JVM underneath your Java bytecode.

00:53:46.600 --> 00:53:48.580
And then everyone's favorite,
we have the terminal.

00:53:48.700 --> 00:53:53.000
So this means you have Java C,
you have Java H, you have Emacs, VI,

00:53:53.000 --> 00:53:54.190
and everything you ever wanted.

00:53:54.190 --> 00:53:56.630
If you really love the terminal,
you can get to it.

00:53:56.700 --> 00:53:59.540
So you don't have to open
an ID if you don't want to.

00:53:59.540 --> 00:54:03.770
This is something that's important
to us that's easily available.

00:54:05.520 --> 00:54:07.900
So we also have a lot
of enterprise tools.

00:54:07.900 --> 00:54:11.750
We ship on Tiger Server,
we ship Apache Tomcat,

00:54:11.790 --> 00:54:13.960
we ship WebObjects, we include JBoss.

00:54:14.150 --> 00:54:17.000
So you should have all the
tools you need to get started

00:54:17.000 --> 00:54:19.150
with J2ED kinds of deployments.

00:54:20.480 --> 00:54:23.540
And of course you saw
the demo about J2ME.

00:54:23.540 --> 00:54:28.540
There's the third-party emulator
that Michael showed you earlier.

00:54:28.540 --> 00:54:32.040
And then the big deal here is
that you can use this emulator as

00:54:32.040 --> 00:54:35.990
your debugging environment and to
run it and test everything out,

00:54:35.990 --> 00:54:38.890
but you still use all
of our tools to develop.

00:54:38.890 --> 00:54:40.540
So you can use Xcode.

00:54:40.540 --> 00:54:43.570
You can use Shark for
Java to try out your,

00:54:43.570 --> 00:54:46.590
to profile your J2ME application.

00:54:46.590 --> 00:54:49.240
So you can, if you have a performance
problem in J2ME,

00:54:49.300 --> 00:54:50.380
you can try it out.

00:54:50.400 --> 00:54:54.570
In that emulator, using our Java tool,
since his emulator is a full

00:54:54.570 --> 00:54:57.900
application written in Java,
you can see what's going

00:54:57.960 --> 00:54:59.450
on inside of there.

00:54:59.450 --> 00:55:02.800
You can use our Bluetooth support
that's all built into Tiger.

00:55:02.800 --> 00:55:05.810
We have great Bluetooth support,
so if you want to deploy using Bluetooth,

00:55:05.810 --> 00:55:06.730
you can do it there.

00:55:08.770 --> 00:55:10.690
and of course third-party tools.

00:55:10.700 --> 00:55:14.780
We have a full host of third-party
tools including Eclipse,

00:55:14.860 --> 00:55:18.650
JDeveloper, NetBeans,
you can read the list on here.

00:55:18.690 --> 00:55:22.700
And Eclipse and JDeveloper are having
sessions here at the conference.

00:55:22.700 --> 00:55:27.300
So if you're interested in Eclipse,
Friday evening there's

00:55:27.300 --> 00:55:29.100
a session on Eclipse.

00:55:29.100 --> 00:55:33.420
Oracle is having a session
I think right after this one.

00:55:33.420 --> 00:55:33.720
So if you're interested in JDeveloper,
you can check those out.

00:55:35.480 --> 00:55:38.300
So transitions.

00:55:38.340 --> 00:55:43.060
Steve talked a lot about this in
his keynote and we've been working

00:55:43.060 --> 00:55:47.810
really hard on the transitions
that you've heard all about.

00:55:48.800 --> 00:55:51.730
So,
what do Intel-based Macs mean for Java?

00:55:52.070 --> 00:55:57.240
Now, Java was lumped together with
everything else in our overviews,

00:55:57.320 --> 00:55:58.920
Java, JavaScript, and all that stuff.

00:55:59.100 --> 00:56:02.460
So, basically,
we're going to tell you what works,

00:56:02.500 --> 00:56:04.880
what doesn't work, and what's new.

00:56:04.920 --> 00:56:09.510
Well, what works?

00:56:09.730 --> 00:56:13.720
You're told that everything just works.

00:56:14.600 --> 00:56:17.930
So all of your Java 1.4.2,
all your J2SE 5.0 applications

00:56:17.960 --> 00:56:19.560
work on both PowerPC and Intel.

00:56:19.560 --> 00:56:22.990
It's the same support on both of them.

00:56:23.000 --> 00:56:26.800
And that means there's separate
compilers behind the scenes

00:56:26.800 --> 00:56:29.280
generating different kind of code.

00:56:29.280 --> 00:56:31.560
There's a lot of stuff
we've done in the VM.

00:56:31.560 --> 00:56:32.840
Our VM team has done.

00:56:32.840 --> 00:56:34.970
And they've done an excellent
job of making sure that we have

00:56:34.970 --> 00:56:36.950
parity between 1.4.2 and 5.0.

00:56:36.960 --> 00:56:42.920
So the way that we could get up there and
say Java just works is because of this.

00:56:43.420 --> 00:56:44.550
Java works.

00:56:44.560 --> 00:56:47.010
Your byte codes don't have to change.

00:56:47.510 --> 00:56:49.700
But there's that asterisk I put up there.

00:56:49.870 --> 00:56:50.560
And what is that?

00:56:50.760 --> 00:56:53.990
Well, the first thing is that
1.3.1 is not supported.

00:56:54.210 --> 00:56:57.280
The second is that if
you have JNI libraries,

00:56:57.280 --> 00:56:59.940
then you're really not
a straight Java app.

00:57:00.040 --> 00:57:03.100
You're actually a Java app
that also runs native code,

00:57:03.100 --> 00:57:06.320
so you have all the restrictions
that other JNI libraries have,

00:57:06.370 --> 00:57:08.710
I mean that other native
applications have.

00:57:09.120 --> 00:57:12.600
And then the other thing is that
Rosetta applications cannot have

00:57:12.600 --> 00:57:14.410
embedded JVMs inside of them.

00:57:14.410 --> 00:57:16.920
So there are a couple things there.

00:57:16.920 --> 00:57:19.960
What that means is if your
application depends on Rosetta,

00:57:20.100 --> 00:57:21.270
you can't launch a VM.

00:57:21.280 --> 00:57:25.150
You have to make a universal application
to launch a JVM because it has to be

00:57:25.150 --> 00:57:27.400
running on processor-specific code.

00:57:27.400 --> 00:57:30.470
With your JNI libraries,
you've already heard how to turn

00:57:30.470 --> 00:57:32.480
those into universal libraries.

00:57:32.480 --> 00:57:35.290
When Java is running,
it will be running processor-specific,

00:57:35.290 --> 00:57:37.260
so this is important for you to remember.

00:57:37.870 --> 00:57:40.020
And there's a session
that's not on your list.

00:57:40.020 --> 00:57:43.330
It's a new session that is the
Java Virtual Machine Exposed,

00:57:43.360 --> 00:57:47.530
which will go into detail on some more
of the things we're talking about.

00:57:47.580 --> 00:57:51.380
That's Friday at 10.30,
so if you're interested in more

00:57:51.380 --> 00:57:54.750
details about what's inside of
our VM for Intel-based Macs,

00:57:54.770 --> 00:57:56.590
you can go to that session.

00:57:58.840 --> 00:58:01.990
So I wanted to just show a
little bit about what just works.

00:58:02.070 --> 00:58:04.960
This is the list of all
the things that just work.

00:58:04.960 --> 00:58:10.530
And this should be, you know,
95% of all the applications out there.

00:58:10.940 --> 00:58:13.040
And then what we talked
about was what doesn't work.

00:58:13.100 --> 00:58:17.580
So a PowerPC-based app that calls
JNI CreateJavaVM is not going to work.

00:58:17.580 --> 00:58:20.720
And any Java app with
a PowerPC JNI library,

00:58:20.720 --> 00:58:22.570
just not going to work.

00:58:22.570 --> 00:58:25.010
So please pay attention to this.

00:58:25.010 --> 00:58:26.040
Look at the tools.

00:58:26.040 --> 00:58:29.460
Figure out how to bundle these things
together so that you can create

00:58:29.460 --> 00:58:32.940
universal libraries or if you're
dependent on doing CreateJavaVM,

00:58:32.940 --> 00:58:36.520
figuring out how to make a universal
version of your application.

00:58:39.080 --> 00:58:42.340
But mostly, everything just works.

00:58:45.440 --> 00:58:53.740
So I just wanted to run through a
couple things here on Demo Machine 2.

00:58:54.640 --> 00:58:58.600
So we've got one of the
Apple development systems here,

00:58:58.600 --> 00:59:03.280
and I just wanted to pop open
Safari and run a couple applets

00:59:03.370 --> 00:59:09.600
because applets obviously are
on external sites and they...

00:59:10.590 --> 00:59:12.990
We haven't touched him at all,
and so here's one that we like

00:59:12.990 --> 00:59:14.570
that's the baby-namer applet.

00:59:14.580 --> 00:59:17.570
I don't know if you've ever seen this,
but this shows all the baby

00:59:17.570 --> 00:59:20.900
names over the history,
so I can put in my name here,

00:59:20.900 --> 00:59:24.190
and I can see that, you know,
back in the 60s and 70s when

00:59:24.190 --> 00:59:27.260
they landed on the moon,
Scott was a really popular name.

00:59:27.260 --> 00:59:28.740
Not so much anymore.

00:59:28.740 --> 00:59:32.820
And then we can look up other names like,
you can see Paris has

00:59:32.820 --> 00:59:34.730
become really popular now.

00:59:34.740 --> 00:59:38.740
And Paris for guys is not as popular.

00:59:38.740 --> 00:59:40.740
And things like that.

00:59:40.740 --> 00:59:42.730
So we can just look up other names.

00:59:42.860 --> 00:59:44.740
But the important thing
here is that we're,

00:59:44.820 --> 00:59:45.740
you know, we didn't do anything to this.

00:59:45.740 --> 00:59:51.740
This is just running using our JVM for,
I think it's using the 1.4 VM.

00:59:51.740 --> 00:59:53.740
I didn't even check to see
what was installed on here.

00:59:53.740 --> 00:59:57.970
So it works that well that I just
walked up to this machine and,

00:59:57.970 --> 00:59:58.740
you know, put this in here.

00:59:58.740 --> 01:00:02.740
I didn't really have to install
anything special to get this to work.

01:00:02.740 --> 01:00:04.740
So this is a really cool thing.

01:00:04.740 --> 01:00:07.740
If any of you are pregnant or your
significant others are pregnant,

01:00:07.740 --> 01:00:09.740
check out the names and stuff.

01:00:09.740 --> 01:00:11.740
So let's look at another one here.

01:00:11.740 --> 01:00:13.710
This is another applet
that I really like.

01:00:13.820 --> 01:00:15.730
It's a thinking chess machine.

01:00:15.940 --> 01:00:21.270
And it was, the big thing about this is
that they use all these particle

01:00:21.270 --> 01:00:23.790
systems and other stuff for chess,
which you're thinking,

01:00:23.790 --> 01:00:24.670
why do they do that?

01:00:24.930 --> 01:00:27.740
Well, they're showing areas of
influence with these kind of,

01:00:27.740 --> 01:00:29.730
ripples going out.

01:00:29.740 --> 01:00:31.740
So if you're black and
you're more influenced,

01:00:31.740 --> 01:00:32.740
the squares will be darker.

01:00:32.740 --> 01:00:34.740
And that's just kind of a cute thing.

01:00:34.740 --> 01:00:38.080
But when you move,
so I'm going to move this move because

01:00:38.080 --> 01:00:39.740
I'm told that's a great starting move.

01:00:39.740 --> 01:00:42.740
Now the computer is showing me
what it's thinking against me.

01:00:42.740 --> 01:00:44.740
And it's highlighting
its moves and my moves.

01:00:44.740 --> 01:00:46.740
And it's showing every
time it thinks of a move,

01:00:46.740 --> 01:00:48.740
it's making it darker
and darker and darker.

01:00:48.740 --> 01:00:51.740
So I can see it thinks I'm probably
going to move my bishop out here.

01:00:51.740 --> 01:00:54.740
And so I can do a move here.

01:00:54.740 --> 01:00:58.740
And this is just an example of an
applet that's kind of a cool applet.

01:00:58.740 --> 01:01:01.740
And we didn't have to do
anything special to support them.

01:01:01.740 --> 01:01:04.740
It just works right out of the box.

01:01:04.860 --> 01:01:07.730
And let's run through one more here.

01:01:07.740 --> 01:01:11.740
So if you're really interested in chess,
this is kind of a cool one to check out.

01:01:11.740 --> 01:01:14.740
So this is another applet.

01:01:14.740 --> 01:01:16.740
They also have an application.

01:01:16.740 --> 01:01:18.740
This is called Grokker.

01:01:18.890 --> 01:01:22.740
And what Grokker does is
I just enter something here,

01:01:22.740 --> 01:01:23.740
a search thing.

01:01:23.740 --> 01:01:28.670
Let's say, Apple Intel.

01:01:30.060 --> 01:01:34.740
And it'll use, I think,
Yahoo to search the web and

01:01:34.740 --> 01:01:37.480
then it presents all these,
you

01:01:37.600 --> 01:02:08.400
[Transcript missing]

01:02:08.800 --> 01:02:14.360
The proof we're running right
here on the Intel machine.

01:02:14.600 --> 01:02:17.500
So this is just a simple run-through
of a couple things that I found.

01:02:17.500 --> 01:02:21.000
I just looked these up this morning.

01:02:21.000 --> 01:02:24.990
Let's go back to slides.

01:02:32.720 --> 01:02:37.350
So let's talk a little bit about
the hotspot compilers on Mac OS X.

01:02:37.360 --> 01:02:43.060
On Tiger, obviously on PowerPC,
we shipped J2SE 5.0, 1.4, and 1.3.

01:02:43.060 --> 01:02:45.440
Now the C1 at the end,
in case you don't know that,

01:02:45.600 --> 01:02:48.280
the compiler we ship is
what's called the C1 compiler.

01:02:48.280 --> 01:02:52.390
And that's a compiler that's
optimized for end users.

01:02:52.390 --> 01:02:55.210
It's optimized for double-clickable
applications and applets.

01:02:55.210 --> 01:02:57.950
It's made so that startup time is fast.

01:02:57.980 --> 01:03:00.870
It's what hotspot is really all about,
is that you can interpret all the

01:03:00.870 --> 01:03:02.580
stuff just to get you up and running.

01:03:02.600 --> 01:03:06.270
And then as time permits,
you can compile what you need to.

01:03:06.430 --> 01:03:09.820
But it's got certain advantages to it,
but it's really defined for

01:03:09.820 --> 01:03:11.620
footprint and for startup time.

01:03:13.330 --> 01:03:18.580
On Intel, we took all these over and we
actually do not have 1.3.1.

01:03:18.690 --> 01:03:21.990
So 1.3.1 doesn't exist,
but we still have J2SE 5.0 and 1.4,

01:03:21.990 --> 01:03:23.060
the C1 compilers.

01:03:23.080 --> 01:03:26.590
But, you know, we took away 1.3.1,
but we're going to give you something,

01:03:26.590 --> 01:03:30.650
and that something is the
C2 compiler for J2SE 5.0.

01:03:30.660 --> 01:03:33.990
So what is the C2E compiler?

01:03:35.770 --> 01:03:40.990
So the C2 compiler is another
thing that plugs into the VM.

01:03:40.990 --> 01:03:45.080
You activate it just by passing
the dash server option to the VM.

01:03:45.080 --> 01:03:51.080
And it's a much more
advanced compiler than C1.

01:03:51.080 --> 01:03:55.030
But it compiles a lot more and
spends a lot more time doing it.

01:03:55.160 --> 01:03:59.680
So the reason here that you'd want to use
it is that if you have a long-running,

01:03:59.710 --> 01:04:02.350
compute-intensive app,
if you don't care so much

01:04:02.350 --> 01:04:06.970
about startup time and you
just want it to compile a lot,

01:04:06.980 --> 01:04:09.890
it may take up to 10 times as
long to compile some things,

01:04:09.930 --> 01:04:11.930
but the end result code
will be a lot faster.

01:04:11.940 --> 01:04:14.840
And if that's important to you,
if you're going to run that end result

01:04:14.840 --> 01:04:17.590
code thousands and thousands of times,
then that 10 times up

01:04:17.590 --> 01:04:18.750
front doesn't matter.

01:04:21.430 --> 01:04:24.920
So let's look a little bit
at comparing C1 versus C2.

01:04:24.920 --> 01:04:28.730
This is using SCIMARC2,
using composite score.

01:04:29.010 --> 01:04:35.400
And when we look at C1 versus
C2 on our Mac OS X Intel,

01:04:35.400 --> 01:04:38.610
we're getting almost,
we're getting 2.3 times

01:04:38.610 --> 01:04:40.770
faster just on SCIMARC score.

01:04:40.880 --> 01:04:42.180
And that's just from the compiler.

01:04:42.180 --> 01:04:47.170
And this is our first
implementation of the C2 compiler.

01:04:47.300 --> 01:04:49.990
So we've only just begun on this.

01:04:50.120 --> 01:04:53.130
Our VM team worked really hard
on getting these compilers out.

01:04:53.190 --> 01:04:57.080
They're available for download
on the Apple development systems.

01:04:57.080 --> 01:05:01.160
So you can download,
when you download the J2SE 5.0

01:05:01.160 --> 01:05:05.260
download for those systems,
it'll include C1 and C2, right,

01:05:05.310 --> 01:05:06.270
bundled in it.

01:05:06.410 --> 01:05:09.050
All you have to do is pass
the dash server option.

01:05:09.060 --> 01:05:12.040
So the C2 compiler is available.

01:05:12.250 --> 01:05:15.360
You can try it out with your
apps on the development system.

01:05:15.450 --> 01:05:19.930
And to learn more about what's in C2,
please go to the Java VM session,

01:05:19.950 --> 01:05:23.920
the one that's not in your guides.

01:05:24.220 --> 01:05:27.090
So that's, again, on Friday at 10:30.

01:05:28.190 --> 01:05:33.700
So speaking of what's on Intel boxes,
I'd like to bring up Scott Kovatch,

01:05:33.700 --> 01:05:36.060
who's one of our engineers
on the Java classes team,

01:05:36.060 --> 01:05:41.090
to talk a little bit about Eclipse.

01:05:42.690 --> 01:05:45.540
All right, let's go to demo two, please.

01:05:45.880 --> 01:05:48.370
So how many of you here
have heard of Eclipse?

01:05:48.600 --> 01:05:50.090
Good.

01:05:50.160 --> 01:05:51.930
Makes that easy.

01:05:52.810 --> 01:05:56.560
So you've probably seen it,
you've probably played with 3.1,

01:05:56.560 --> 01:06:00.250
and this is the 3.1 M7 release,
which was recently brought

01:06:00.280 --> 01:06:01.880
out by the Eclipse Foundation.

01:06:01.880 --> 01:06:06.780
Sort of an offshoot of IBM and OTI,
but it's a great project

01:06:06.780 --> 01:06:10.980
that has a number of plugins,
and we're going to focus on its

01:06:11.010 --> 01:06:13.100
Java development capabilities.

01:06:14.390 --> 01:06:18.050
But one of the things, you know,
we can collapse whole classes

01:06:18.050 --> 01:06:21.680
just to make things easier to
navigate through your code.

01:06:21.680 --> 01:06:25.770
We have a nice outline view over here
where you can jump from method to method

01:06:25.770 --> 01:06:28.210
and look at all of your member variables.

01:06:28.220 --> 01:06:37.000
And one of the interesting things in this
M7 build is what they call smart fixes.

01:06:37.000 --> 01:06:41.430
And they've added a
number of new smart fixes.

01:06:41.440 --> 01:06:42.920
This is one of the more interesting ones.

01:06:42.920 --> 01:06:44.320
I saw.

01:06:44.340 --> 01:06:48.010
if you do an instance of

01:06:49.900 --> 01:06:52.000
Now you go back over here to string.

01:06:52.000 --> 01:06:58.890
Now that red underline is... Let's see,
what are we seeing here?

01:06:58.890 --> 01:07:05.020
Ah, okay.

01:07:10.460 --> 01:07:17.420
So now I have a conditional here
that will let me... I'm trying

01:07:17.420 --> 01:07:20.340
to do a downcast of my class
variable into something else.

01:07:20.360 --> 01:07:25.820
One of the smart fixes
is that it will say...

01:07:28.170 --> 01:07:29.700
Do you want to make a
local variable out of this?

01:07:29.700 --> 01:07:33.210
And what it will do is...

01:07:34.690 --> 01:07:37.260
Focus on that red squiggle line.

01:07:37.260 --> 01:07:39.000
Ah, okay.

01:07:40.680 --> 01:07:42.940
All right,
so this is going to be stubborn.

01:07:43.000 --> 01:07:45.160
But anyway,
what I'm trying to show you here is

01:07:45.160 --> 01:07:48.860
that there's a lot of productivity
features in Eclipse that you can take

01:07:49.110 --> 01:07:50.940
advantage of for your Java development.

01:07:50.940 --> 01:07:58.160
And another feature of Eclipse is that
it comes with something called the SWT,

01:07:58.160 --> 01:08:05.500
which is a different user interface
toolkit that's built on Carbon.

01:08:07.000 --> 01:08:27.700
[Transcript missing]

01:08:28.130 --> 01:08:29.600
This is all interesting.

01:08:29.600 --> 01:08:31.440
There's a lot to learn about SWT.

01:08:31.440 --> 01:08:35.080
The reason we're showing this to you
in this demonstration here is that

01:08:35.080 --> 01:08:41.490
I want to show you here in the finder
that this is a universal application.

01:08:43.150 --> 01:08:47.300
And what we were able to do,
because Eclipse is an

01:08:47.300 --> 01:08:51.060
open source project,
is we were able to get the sources

01:08:51.400 --> 01:08:54.700
and make the modifications needed
to build Eclipse Universal.

01:08:54.800 --> 01:08:58.620
So Eclipse is ready to go
for an Intel-based machine.

01:08:58.620 --> 01:09:00.380
Let's jump back to the slides real quick.

01:09:10.970 --> 01:09:12.920
So as I mentioned,
Eclipse is an open source environment.

01:09:12.920 --> 01:09:15.200
Tons of plugins.

01:09:15.200 --> 01:09:18.240
Java is just the one part
of what Eclipse can do.

01:09:18.240 --> 01:09:19.660
There's a lot of work going on.

01:09:19.660 --> 01:09:23.920
Just about anything you can
think of can be done in Eclipse.

01:09:23.920 --> 01:09:25.560
I'm not even going to
attempt to cover it here.

01:09:26.240 --> 01:09:29.900
Go to www.eclipse.org and you
can find out about the project,

01:09:29.900 --> 01:09:34.120
what's going on, latest builds,
all sorts of good information there.

01:09:34.120 --> 01:09:38.330
Eclipse is pretty much
a pure Java application,

01:09:38.420 --> 01:09:44.700
but it's got this SWT layer underneath
that's entirely C-based with a very

01:09:44.700 --> 01:09:47.880
thin layer over the Carbon APIs.

01:09:47.880 --> 01:09:54.140
That's where this gets interesting as
far as building a universal application.

01:09:54.140 --> 01:09:56.210
I had to make no changes
to the Carbon APIs.

01:09:56.270 --> 01:09:57.370
I had to use Xcode to get this to happen.

01:09:57.380 --> 01:10:02.730
It's mostly Java,
so of course there's nothing to do there.

01:10:03.020 --> 01:10:07.630
But all I had to do to build the
SWT library is make a few make file

01:10:07.630 --> 01:10:14.370
changes where you pass dash arch I386,
and that's all you need to do

01:10:14.370 --> 01:10:16.630
to get a universal JNI library.

01:10:16.640 --> 01:10:20.860
Now, Eclipse doesn't use Xcode,
of course, because it builds everywhere.

01:10:20.860 --> 01:10:26.180
But it has standard make files,
and it's very trivial to modify.

01:10:26.240 --> 01:10:28.930
So you can't modify those to
get a universal application.

01:10:28.940 --> 01:10:34.230
And it's our hope that we'll be able
to just push these back to the Eclipse

01:10:34.320 --> 01:10:38.960
project so that you'll all be able to
use these when you get your hands on

01:10:38.960 --> 01:10:41.230
an Apple development machine for Intel.

01:10:43.840 --> 01:10:46.800
and we've got a session on Friday.

01:10:46.800 --> 01:10:50.290
Scott mentioned it again,
but I'll bring it up very quickly.

01:10:50.360 --> 01:10:52.740
If you want to learn more about
Eclipse and some more advanced things

01:10:52.740 --> 01:10:56.430
that you can do with it on Mac OS X,
come to our session Friday at 5:00

01:10:56.440 --> 01:10:58.970
and you'll learn all about Eclipse.

01:10:59.010 --> 01:11:00.940
Take it back to Scott.

01:11:00.940 --> 01:11:03.060
Great, thanks.

01:11:06.020 --> 01:11:08.140
So that's really cool
that we got Eclipse.

01:11:08.210 --> 01:11:12.850
Scott just spent a couple hours with it,
and I just want to repeat,

01:11:12.850 --> 01:11:14.880
he didn't change any lines of code.

01:11:14.880 --> 01:11:17.260
All he did was mess with
one line in their make file.

01:11:17.260 --> 01:11:21.210
So that's really good news for any of
you who have these kinds of builds.

01:11:21.240 --> 01:11:26.350
Again, SWT is a full Carbon application
and was just using a make file,

01:11:26.440 --> 01:11:28.390
so they were good to go.

01:11:28.420 --> 01:11:29.570
Okay.

01:11:31.090 --> 01:11:34.970
So just to summarize,
everything just works with that asterisk,

01:11:35.000 --> 01:11:37.580
so remember if you fit in that area.

01:11:37.800 --> 01:11:41.650
One thing we didn't mention is that
the application launcher that has been

01:11:41.720 --> 01:11:45.660
bundled by default in your applications
using things like Xcode and Jarbundler

01:11:45.660 --> 01:11:49.140
is a PowerPC-only application launcher.

01:11:49.140 --> 01:11:53.760
Now, we did a little trick where when
we notice we're launching the

01:11:53.760 --> 01:11:58.590
application launcher in PowerPC,
we kind of stop everything,

01:11:58.680 --> 01:12:02.580
relaunch it with our
new universal launcher.

01:12:03.080 --> 01:12:06.580
Now, that's a trick we can do because we
know we can recognize the launcher

01:12:06.620 --> 01:12:08.310
and when it's being launched.

01:12:08.320 --> 01:12:10.740
But we also will have,
we have a new universal launcher

01:12:10.740 --> 01:12:13.770
that's installed with the 2.1,
Xcode 2.1 tools.

01:12:13.780 --> 01:12:17.300
And so we ask you that if you're
bundling your applications from now on,

01:12:17.380 --> 01:12:20.280
re-bundle them using those
new tools because you'll have

01:12:20.280 --> 01:12:21.950
a real universal launcher.

01:12:21.970 --> 01:12:24.920
And your startup time might
be a little bit faster.

01:12:24.920 --> 01:12:28.030
It won't have to go through this,
you know, starting in Rosetta,

01:12:28.030 --> 01:12:30.770
noticing that we're in a
Java application and then zipping

01:12:30.770 --> 01:12:33.050
back into Intel-specific instructions.

01:12:33.080 --> 01:12:34.720
instructions.

01:12:35.990 --> 01:12:38.860
Obviously, build universal JNI libraries.

01:12:38.860 --> 01:12:40.060
That's the biggest thing.

01:12:40.070 --> 01:12:42.700
If you're doing JNI,
that's what you have to worry about.

01:12:42.730 --> 01:12:43.660
Build universal.

01:12:43.660 --> 01:12:45.620
You can learn all about that.

01:12:46.410 --> 01:12:49.110
So the other thing,
Java here at Apple and

01:12:49.110 --> 01:12:51.050
elsewhere is still growing.

01:12:51.050 --> 01:12:54.940
That's one of the big things about
it is that we have more support for

01:12:54.940 --> 01:12:57.600
Java in Mac OS X Tiger than ever before.

01:12:57.600 --> 01:13:00.500
We've got six different
compilers that we're supporting

01:13:00.500 --> 01:13:02.000
at the same time on Tiger.

01:13:02.000 --> 01:13:04.210
I mean, this is unprecedented for us.

01:13:04.340 --> 01:13:06.590
We have all the C1 compilers on PowerPC.

01:13:06.590 --> 01:13:10.690
We have the two C1 compilers on
Intel and the C2 compiler on Intel.

01:13:10.700 --> 01:13:13.800
So we're putting a lot
of support behind Java,

01:13:13.850 --> 01:13:15.420
and we hope it shows.

01:13:17.530 --> 01:13:18.540
The community is growing.

01:13:18.540 --> 01:13:21.440
There's a Java dev mailing list.

01:13:21.460 --> 01:13:23.990
We really encourage you
to sign up for this list.

01:13:24.000 --> 01:13:27.790
There's a lot of good discussion,
occasionally debate, on this list.

01:13:27.860 --> 01:13:32.470
So please, your questions usually can get
answered within hours on this list,

01:13:32.740 --> 01:13:36.380
usually by your other developer,
the developer community,

01:13:36.380 --> 01:13:39.540
and Apple engineers watch this list
and will chime in when necessary.

01:13:39.540 --> 01:13:42.420
But it's usually developers
helping developers.

01:13:42.420 --> 01:13:45.850
And also,
there's an archive of this mailing list.

01:13:46.060 --> 01:13:48.820
So I recommend, if you have a question,
check the archive,

01:13:48.840 --> 01:13:51.530
because most likely someone
else has had a similar question.

01:13:52.930 --> 01:13:55.700
Also, we recommend you look at ADC.

01:13:55.700 --> 01:13:59.380
You all are ADC members, obviously,
but that's where we're going to put

01:13:59.430 --> 01:14:01.060
future downloads and developer previews.

01:14:01.060 --> 01:14:03.930
So if you've been paying
attention to Java in the past,

01:14:03.930 --> 01:14:07.360
we're pretty aggressive about
putting out developer previews,

01:14:07.360 --> 01:14:11.600
and we want to get your feedback on
how well your applications work with

01:14:11.600 --> 01:14:15.200
these things and file bug reports,
tell us your experiences.

01:14:16.300 --> 01:14:19.120
And we're going to be posting
developer previews for all of our

01:14:19.120 --> 01:14:25.300
new products when they come out,
hopefully, when they'll be up on ADC.

01:14:25.300 --> 01:14:27.700
In the past with Tiger,
they've been seeded with Tiger,

01:14:27.700 --> 01:14:29.600
but now that Tiger's out,
we should be able to

01:14:29.600 --> 01:14:30.620
seed it to everybody.

01:14:33.120 --> 01:14:37.640
So for more information,
obviously there's the WWC 2005 site.

01:14:37.640 --> 01:14:41.190
It'll have all the links to the
documentation that you need.

01:14:41.540 --> 01:14:42.430
The hands-on labs.

01:14:42.430 --> 01:14:46.070
I can't stress this enough,
but the hands-on sessions that you can

01:14:46.070 --> 01:14:50.340
go to are going to be different than
anything you've ever been at WWDC before.

01:14:50.340 --> 01:14:52.970
We've worked a lot on making
sure that the content is

01:14:52.970 --> 01:14:56.040
something you can follow along,
you can build on your machine.

01:14:56.040 --> 01:14:58.820
Like I said earlier,
it's not just something where you'll

01:14:58.830 --> 01:15:00.690
sit there and watch us do things.

01:15:00.730 --> 01:15:02.090
You'll be able to follow right along.

01:15:02.100 --> 01:15:04.070
So what can you do?

01:15:04.100 --> 01:15:07.600
Get J2SC 5.0 because we use
it for some of the sessions.

01:15:07.600 --> 01:15:10.080
Try out Shark for Java.

01:15:10.380 --> 01:15:13.500
Download our sample code and
check out our documentation.

01:15:13.500 --> 01:15:15.550
There's a whole bunch of sessions.

01:15:15.600 --> 01:15:17.190
I don't think you'll be
able to copy these down,

01:15:17.190 --> 01:15:18.500
but we're almost out of time.

01:15:18.500 --> 01:15:20.980
There's one on JNI development.

01:15:21.030 --> 01:15:25.040
There's a performance
session Friday at 9.

01:15:25.410 --> 01:15:26.710
There's sessions on Shark.

01:15:26.720 --> 01:15:28.300
These are some related to Java things.

01:15:28.300 --> 01:15:32.010
There's Oracle we've talked
about and WebObjects.

01:15:32.680 --> 01:15:34.620
And of course,
after each of our sessions on

01:15:34.620 --> 01:15:37.950
Thursday and Friday morning,
there will be labs that most of the

01:15:37.960 --> 01:15:39.510
Java engineering team will be at.

01:15:39.510 --> 01:15:42.550
So please, after those sessions,
follow us over to the lab.

01:15:42.670 --> 01:15:45.020
Almost the entire Java engineering
team will be there.

01:15:45.020 --> 01:15:48.580
So if you have specific questions,
that's a great place to meet us,

01:15:48.580 --> 01:15:51.600
to ask us questions,
to show us your applications.

01:15:52.480 --> 01:15:53.600
and we want your feedback.

01:15:53.700 --> 01:15:55.930
So the feedback forum is also on Friday.

01:15:56.020 --> 01:15:57.900
It's a WebObjects and
Java feedback forum,

01:15:57.900 --> 01:15:59.910
so please come there.

01:16:00.010 --> 01:16:02.900
Send us emails, come to the labs.

01:16:02.930 --> 01:16:05.100
This is a two-way process.

01:16:05.250 --> 01:16:07.000
I've been talking a lot here today.

01:16:07.000 --> 01:16:08.400
We want to hear back from you.

01:16:08.400 --> 01:16:10.040
So we want to hear what
things we're doing right,

01:16:10.040 --> 01:16:11.400
what things we're not doing right.

01:16:11.400 --> 01:16:13.710
It's very important to us.

01:16:14.080 --> 01:16:15.900
and who to contact?

01:16:16.180 --> 01:16:17.020
Anyone but me.

01:16:17.140 --> 01:16:17.330
No.

01:16:17.520 --> 01:16:19.860
Alan Samuel and Francois Jouaux.

01:16:19.940 --> 01:16:21.730
Francois is the manager of the Java team.

01:16:21.930 --> 01:16:25.280
Alan Samuel is our evangelist,
so please send them your emails,

01:16:25.280 --> 01:16:26.570
talk to them.

01:16:26.620 --> 01:16:28.440
That's fantastic.

01:16:28.440 --> 01:16:29.610
And of course, thank you all for coming.