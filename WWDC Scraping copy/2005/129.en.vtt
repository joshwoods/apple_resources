WEBVTT

00:00:00.820 --> 00:00:02.540
Hi, welcome to session 129.

00:00:02.780 --> 00:00:08.690
My name is Richard Williamson and
I'm a Safari Web Kit engineer.

00:00:08.690 --> 00:00:08.690
This is advanced Web Kit development.

00:00:12.570 --> 00:00:15.160
So I'm going to talk a little bit
about how you can use Web Kit,

00:00:15.160 --> 00:00:18.050
which is, as you all know,
the technology behind Safari,

00:00:18.050 --> 00:00:21.770
and now a lot of other
applications that ship with OS X.

00:00:41.890 --> 00:00:41.890
And really what I want
to talk about is Web Kit,

00:00:41.890 --> 00:00:41.890
but not just as it's used in browsing.

00:00:41.890 --> 00:00:41.890
Web Kit's not just about browsing.

00:00:41.890 --> 00:00:41.890
So to set the stage for this,
I'd like to talk about a couple

00:00:41.890 --> 00:00:41.890
of examples of browser-hosted
applications and then see how they

00:00:41.890 --> 00:00:41.890
compare to desktop applications.

00:00:42.780 --> 00:00:48.340
So one common technique used for writing
a browser hosted application is to have

00:00:48.510 --> 00:00:53.940
server generated content that changes
via form interaction with web pages.

00:00:54.040 --> 00:00:56.290
Pretty primitive,
but a lot of pages actually quite

00:00:56.340 --> 00:00:58.200
successful with this technique.

00:00:58.240 --> 00:01:01.570
A lot of banking sites, for example,
use this kind of approach.

00:01:03.760 --> 00:01:06.540
More recently,
applications have started to put

00:01:06.630 --> 00:01:11.600
more interactivity into the client
using JavaScript and XMLHttpRequest,

00:01:11.990 --> 00:01:14.600
and really only interacting with the
server for the application logic.

00:01:14.600 --> 00:01:18.600
And this is a much better approach to
building browser-hosted applications.

00:01:18.600 --> 00:01:21.540
A great example of this
is maps.google.com.

00:01:21.600 --> 00:01:25.350
On this site,
you can actually interact with the map

00:01:25.810 --> 00:01:28.590
without having to load a new web page.

00:01:28.730 --> 00:01:31.600
And the interaction happens
using XMLHttpRequest.

00:01:31.600 --> 00:01:34.620
And this is now being called Ajax.

00:01:34.820 --> 00:01:38.730
Go figure why it's being called Ajax,
but it is.

00:01:46.210 --> 00:01:46.210
So these are two different approaches
that are being used for browser hosted

00:01:46.210 --> 00:01:46.210
applications and there's many others.

00:01:46.210 --> 00:01:46.210
These are just a couple of examples.

00:01:55.980 --> 00:01:55.980
And the point I want to make is that
the same technologies that are used

00:01:55.980 --> 00:01:55.980
for browser-hosted applications can
be used in desktop applications.

00:01:55.980 --> 00:01:55.980
And let me give you a couple of examples.

00:01:57.280 --> 00:02:02.120
So an application can embed Web Kit and
the client code can generate content.

00:02:02.310 --> 00:02:05.640
A great example of this is
dictionary.app that ships with OS X.

00:02:05.640 --> 00:02:11.250
The content area here is rendered
with Web Kit and the form area

00:02:11.280 --> 00:02:16.820
above the content area is Cocoa,
which is the GUI toolkit Cocoa.

00:02:16.880 --> 00:02:21.580
And as the user enters data in the form,
the content area updates.

00:02:23.920 --> 00:02:27.680
Another example that's analogous to
the browser hosted application is a

00:02:27.680 --> 00:02:33.240
user interface that is using Web Kit to
render content using JavaScript to do

00:02:33.240 --> 00:02:38.600
dynamic HTML and XML HTTP requests to
interact with server application logic.

00:02:38.840 --> 00:02:41.800
A couple of the widgets
that we ship do this.

00:02:41.800 --> 00:02:44.400
The stocks widget and the weather widget.

00:02:45.810 --> 00:02:49.040
What I'm advocating here is
a new approach to building

00:02:49.040 --> 00:02:50.290
your desktop applications.

00:02:50.300 --> 00:02:55.400
That approach is to use Web Kit for
the layout of your user interfaces.

00:02:55.440 --> 00:02:56.090
Why do this?

00:02:56.270 --> 00:02:59.200
Well,
it's easy to iterate on the interface.

00:02:59.200 --> 00:03:07.620
It's very easy to
leverage rich media types.

00:03:07.620 --> 00:03:07.620
And HTML and modern CSS provide you
with very powerful layout capabilities.

00:03:08.240 --> 00:03:10.700
and very importantly,
a lot of designers out there, H.I.

00:03:10.700 --> 00:03:15.780
designers, have existing skill sets in
designing HTML and CSS content.

00:03:15.820 --> 00:03:19.790
So that can be leveraged now
in your desktop applications.

00:03:19.840 --> 00:03:23.620
And lastly,
it's very easy to style the interfaces.

00:03:25.600 --> 00:03:28.910
So you might be saying, but why, really?

00:03:28.920 --> 00:03:31.260
There's a lot of existing
techniques that I have for

00:03:31.480 --> 00:03:34.370
building application interfaces,
lots of GUI toolkits.

00:03:34.420 --> 00:03:35.160
Cocoa is great.

00:03:35.320 --> 00:03:37.590
Why should I do this?

00:03:38.270 --> 00:03:41.290
You might also say,
"InnoHTML really isn't capable enough.

00:03:41.360 --> 00:03:44.900
It doesn't have the kind of techniques
that I need to use in my application.

00:03:44.900 --> 00:03:47.280
It just doesn't cut it."

00:03:47.410 --> 00:03:49.160
I can't access native code.

00:03:49.190 --> 00:03:54.560
I really want to access my existing
code base that has my application logic.

00:03:56.490 --> 00:04:00.400
If I really do want to extend HTML,
writing a plug-in is really difficult.

00:04:00.400 --> 00:04:04.200
The API is just too hard to access.

00:04:04.430 --> 00:04:05.380
and JavaScript.

00:04:05.380 --> 00:04:07.760
JavaScript isn't like C or Objective C.

00:04:07.820 --> 00:04:08.500
It's too slow.

00:04:08.520 --> 00:04:10.320
It doesn't cut it.

00:04:10.320 --> 00:04:12.250
That's not true.

00:04:12.250 --> 00:04:15.300
And I'm going to show
you why it's not true.

00:04:16.960 --> 00:04:18.500
How do you do this?

00:04:18.500 --> 00:04:20.020
You use Web Kit.

00:04:20.020 --> 00:04:24.410
In those areas where Web Kit isn't
appropriate or isn't capable out of

00:04:24.410 --> 00:04:28.040
the box for fulfilling your needs,
you can extend and enhance it

00:04:28.120 --> 00:04:31.980
by writing custom plug-ins,
by using the powerful DOM API,

00:04:32.070 --> 00:04:35.310
by extending JavaScript,
and by accessing native

00:04:35.310 --> 00:04:36.730
code if necessary.

00:04:38.160 --> 00:04:40.900
So what I'm going to talk about
specifically in this session is

00:04:40.900 --> 00:04:42.720
three technologies in Web Kit.

00:04:42.950 --> 00:04:47.210
The Web Kit plugin API, scripting using
Objective-C and JavaScript,

00:04:47.350 --> 00:04:53.840
and the Objective-C DOM bindings
to the actual DOM document model.

00:04:53.870 --> 00:04:56.970
And because this is an advanced session,
I'm not going to spend a lot of

00:04:57.280 --> 00:04:58.840
time showing you code on slides.

00:04:58.990 --> 00:05:01.440
We're actually going to go
through an example of building

00:05:01.440 --> 00:05:03.710
an application from scratch.

00:05:03.740 --> 00:05:07.850
And I'll touch on each of
these areas in that example.

00:05:11.300 --> 00:05:14.700
Before we actually get to coding,
I'm going to show you just a few

00:05:14.700 --> 00:05:17.600
slides to give you an overview of
the technologies that we're going to

00:05:17.600 --> 00:05:19.630
use and the APIs we're going to use.

00:05:20.050 --> 00:05:21.130
First, Web Kit plugins.

00:05:21.240 --> 00:05:23.990
You may have already heard about
Web Kit plugins in other sessions,

00:05:23.990 --> 00:05:25.890
both this year and last year.

00:05:26.000 --> 00:05:27.340
They're very easy to implement.

00:05:27.530 --> 00:05:29.310
They're a standard Cocoa bundle.

00:05:29.600 --> 00:05:33.420
And the key object in a
Web Kit plugin is an NSView.

00:05:33.610 --> 00:05:35.860
It's just like any other NSView.

00:05:35.920 --> 00:05:38.970
And it's very easy to
script these plugins.

00:05:40.020 --> 00:05:41.890
The API really couldn't be more simple.

00:05:41.900 --> 00:05:44.050
To implement a plugin,
it's really one method on the

00:05:44.140 --> 00:05:47.260
principal class of your plugin.

00:05:47.490 --> 00:05:49.400
And that's plugin view with arguments.

00:05:49.630 --> 00:05:53.130
And the arguments that are passed to
this method are the attributes that

00:05:53.280 --> 00:05:58.400
are specified on the embed tag that
specifies the plugin on your web page.

00:05:58.680 --> 00:06:01.510
Here's an example of some
of the attributes that are

00:06:01.510 --> 00:06:03.320
passed or could be passed.

00:06:04.340 --> 00:06:06.800
In addition to that one method
which you have to implement,

00:06:06.860 --> 00:06:10.540
there are some additional methods
that you can optionally implement.

00:06:10.660 --> 00:06:12.540
There are lifecycle methods.

00:06:12.570 --> 00:06:15.240
Plugin initialize, start, stop,
and destroy.

00:06:15.260 --> 00:06:18.120
And initialize is called when
the plugin is first created.

00:06:18.210 --> 00:06:21.660
Start and stop may be called
multiple times as the plugin

00:06:22.220 --> 00:06:23.760
is suspended or resumed.

00:06:23.780 --> 00:06:26.410
And destroy is called when the
plugin is actually destroyed,

00:06:26.420 --> 00:06:28.550
when the page goes away.

00:06:29.780 --> 00:06:31.580
So in addition to those
lifecycle methods,

00:06:31.620 --> 00:06:33.620
there's one additional
method here for scripting,

00:06:33.620 --> 00:06:35.200
object for web script.

00:06:35.210 --> 00:06:38.740
And that one little innocuous
method is actually really powerful.

00:06:38.750 --> 00:06:44.290
And I'll go into some depth about how we
can use that method to script a plug-in.

00:06:44.630 --> 00:06:46.200
And then finally,
there's a method that will let

00:06:46.420 --> 00:06:49.600
you alter the appearance of your
plugin content based upon whether

00:06:49.600 --> 00:06:53.970
or not the plugin is selected.

00:06:56.360 --> 00:07:00.220
And also in this upcoming demo,
we're going to touch on this area.

00:07:00.220 --> 00:07:01.600
And I assume you all
know how to use Xcode.

00:07:01.730 --> 00:07:04.000
So I'm not actually going to
show you the entire interface

00:07:04.000 --> 00:07:05.520
for these two different areas.

00:07:05.610 --> 00:07:08.100
You can look it up in
the Xcode documentation.

00:07:08.100 --> 00:07:08.860
It's quite comprehensive.

00:07:08.940 --> 00:07:10.790
There's really two areas.

00:07:10.790 --> 00:07:15.180
There's accessing
JavaScript objects from Objective C.

00:07:15.220 --> 00:07:18.700
And JavaScript objects in Objective
C are represented by what's

00:07:18.710 --> 00:07:20.640
called a Web Script object.

00:07:20.640 --> 00:07:24.000
And this is really a proxy
for the JavaScript object,

00:07:24.040 --> 00:07:25.720
but as it exists in Objective C.

00:07:25.740 --> 00:07:30.800
And then the other side of this is if
you have an existing Objective C object

00:07:30.890 --> 00:07:36.010
and you want to expose it to JavaScript,
and to do that, all you have to do is

00:07:36.020 --> 00:07:38.660
implement an informal protocol.

00:07:38.940 --> 00:07:40.610
And then you have the
Web Scripting protocol on your

00:07:40.670 --> 00:07:41.740
existing Objective C class.

00:07:41.740 --> 00:07:44.380
And this can be any Objective C class.

00:07:44.380 --> 00:07:49.880
So again, the complete documentation for
this is in Web Script object.h.

00:07:50.220 --> 00:07:52.580
Okay.

00:07:53.830 --> 00:07:53.830
So let's move to some code.

00:08:00.620 --> 00:08:04.170
So what I'd like to do is write
a little application that is

00:08:04.210 --> 00:08:06.510
a picture frame application.

00:08:18.250 --> 00:08:18.250
And I'd like to show several
images in a picture frame.

00:08:18.250 --> 00:08:18.250
I'm just going to use
these nine pictures here.

00:08:18.250 --> 00:08:18.250
And

00:08:19.610 --> 00:08:21.730
What I'd like to do is
inside the Web content,

00:08:21.730 --> 00:08:25.500
use Core Image to make
transitions between these images.

00:08:25.610 --> 00:08:28.180
So this will be completely
inside the Web page,

00:08:28.180 --> 00:08:30.180
leveraging Core Image.

00:08:31.630 --> 00:08:37.620
So the first thing I need to do is create
the HTML that's going to represent the

00:08:37.620 --> 00:08:40.070
user interface for this application.

00:08:40.230 --> 00:08:44.120
So what I have here is a little
template that's relatively simple,

00:08:44.120 --> 00:08:49.220
and all it's doing right now
is loading one of those images.

00:08:49.220 --> 00:08:51.070
Pretty straightforward.

00:08:52.650 --> 00:08:59.040
The first thing I'd like to do
is use CSS to style this page.

00:08:59.150 --> 00:09:00.550
So let's add a little bit of CSS.

00:09:00.620 --> 00:09:06.890
And I have two external style
sheets that I'm going to use.

00:09:12.400 --> 00:09:14.280
Let me just show you those style sheets.

00:09:14.280 --> 00:09:19.950
All this style sheet is doing is --

00:09:20.910 --> 00:09:27.770
specifying a gray background color for
the border cells that surround the image.

00:09:28.470 --> 00:09:33.070
Let's go ahead and load that in
Safari again and see what it looks like.

00:09:33.350 --> 00:09:37.280
A little bit more interesting,
but still not that exciting.

00:09:37.390 --> 00:09:41.350
So what I'd really like to do is use a
series of images to create something that

00:09:41.530 --> 00:09:44.020
looks more like a real picture frame.

00:09:44.020 --> 00:09:46.190
So let's go ahead and do that.

00:09:55.700 --> 00:09:55.700
And to do that,
all I have to do is change the style.

00:09:55.700 --> 00:09:55.700
And what I have here is a
series of images that represent

00:09:57.400 --> 00:10:04.900
[Transcript missing]

00:10:05.030 --> 00:10:07.340
is going to show you the image
that we actually want to show.

00:10:07.390 --> 00:10:09.590
So to make that change,
all I'm going to do is point

00:10:09.590 --> 00:10:11.460
to a different style sheet.

00:10:14.600 --> 00:10:15.880
will save that.

00:10:15.930 --> 00:10:18.680
And that style sheet looks pretty much
identical to the previous style sheet,

00:10:18.680 --> 00:10:20.660
except instead of using
a background color,

00:10:20.660 --> 00:10:23.070
we're now using a background image.

00:10:25.560 --> 00:10:27.340
Let's go ahead and load that.

00:10:27.340 --> 00:10:29.280
Now we have something that
looks a little better.

00:10:29.350 --> 00:10:31.840
It looks like a real picture frame.

00:10:31.920 --> 00:10:32.720
Okay.

00:10:33.160 --> 00:10:38.210
So now what I'd like to do, though,
is provide a control that will let

00:10:38.210 --> 00:10:43.800
me transition between the different
images that I'd like to show.

00:10:43.800 --> 00:10:51.190
So let's do that with
a bit more JavaScript.

00:10:51.190 --> 00:10:51.190
In fact, I'm going to show you
a little bit more of

00:10:54.530 --> 00:11:04.250
What we're going to do is just
add a reference to an existing

00:11:04.250 --> 00:11:04.250
piece of JavaScript that will

00:11:07.380 --> 00:11:14.260
is going to show you how to use
a div effectively as a button.

00:11:14.360 --> 00:11:15.300
Let's go ahead and do that
and see what it looks like.

00:11:15.340 --> 00:11:19.850
What I've done here is add a
div with a mouse down handler,

00:11:19.870 --> 00:11:21.900
and that mouse down handler
is just going to change the

00:11:21.930 --> 00:11:23.080
source of the image element.

00:11:23.220 --> 00:11:30.080
Up to now,
this is all just basic HTML stuff.

00:11:30.080 --> 00:11:30.080
We haven't really accessed
the power of Web Kit,

00:11:30.080 --> 00:11:30.080
but that's coming up.

00:11:50.890 --> 00:11:50.890
So the other thing I wanted to
do is I only want this control to

00:11:50.890 --> 00:11:50.890
show up as I move over the page.

00:11:50.890 --> 00:11:50.890
So this is done using mouse
over and mouse out handlers.

00:11:50.890 --> 00:11:50.890
And now as I click,
it's going to -- on a timer,

00:11:50.890 --> 00:11:50.890
it's going to update the images.

00:11:51.940 --> 00:11:54.420
So standard HTML, CSS, and JavaScript.

00:11:54.420 --> 00:11:56.910
I haven't done anything
special with Web Kit.

00:12:13.760 --> 00:12:13.760
So in looking at Core Image,
what I wanted to do is try and

00:12:13.760 --> 00:12:13.760
leverage some of these sophisticated
transitions that are available.

00:12:13.760 --> 00:12:13.760
And I actually just went out and
looked at some of the sample code

00:12:13.760 --> 00:12:13.760
that is available for Core Image,
and I've leveraged that in this demo.

00:12:15.960 --> 00:12:19.450
So the first thing we need to do
is because I know HTML doesn't

00:12:19.510 --> 00:12:21.400
support this directly,
I'm going to use a plug-in.

00:12:21.420 --> 00:12:25.160
And where we now specify
an image element,

00:12:25.190 --> 00:12:27.860
that's going to change to be--

00:12:29.300 --> 00:12:36.700
[Transcript missing]

00:12:37.440 --> 00:12:41.410
One interesting thing here is the
type attribute which specifies the

00:12:41.410 --> 00:12:44.110
MIME type for my custom plug-in.

00:13:06.030 --> 00:13:06.030
So if we try and load this right now,
it's not going to work.

00:13:06.030 --> 00:13:06.030
Let's go ahead and try and load it.

00:13:06.030 --> 00:13:06.030
Actually, let me make sure I didn't
install the plug-in.

00:13:06.030 --> 00:13:06.030
Actually, okay.

00:13:06.030 --> 00:13:06.030
I didn't paste it into the file.

00:13:13.490 --> 00:13:14.390
said it can't find the plugin.

00:13:14.440 --> 00:13:19.730
Let's go ahead and write the plugin.

00:13:29.790 --> 00:13:41.860
This is Xcode 2.1, so I have to upgrade.

00:13:41.860 --> 00:13:42.020
Okay.

00:13:42.020 --> 00:13:44.670
So what I've done,
let me just first of all

00:13:44.670 --> 00:13:46.400
talk about the view class.

00:13:46.460 --> 00:13:48.890
This is a standard Cocoa view class.

00:13:49.600 --> 00:13:55.900
[Transcript missing]

00:13:56.920 --> 00:13:58.700
is the heart of the custom code.

00:13:58.700 --> 00:14:00.980
This is no different than any other NSVU.

00:14:00.980 --> 00:14:06.600
In fact, I pretty much took this verbatim
from the Core Image demo that

00:14:06.620 --> 00:14:08.700
does a similar kind of thing.

00:14:09.510 --> 00:14:12.400
And there were a few additional
methods on the view to

00:14:12.400 --> 00:14:15.030
start and stop a transition.

00:14:15.710 --> 00:14:19.440
But the plug-in code is the
interesting code that we care

00:14:19.440 --> 00:14:21.360
about for this particular demo.

00:14:21.380 --> 00:14:26.100
And you'll see here,
plug-in view with arguments is the method

00:14:26.160 --> 00:14:27.580
that I have to implement on my plug-in.

00:14:27.680 --> 00:14:31.230
And all it does is create
a transition image view.

00:14:31.370 --> 00:14:34.600
That's the class that is going to do
the transition between the images.

00:14:34.600 --> 00:14:36.000
It does a couple of additional things.

00:14:36.000 --> 00:14:40.110
It gets the width and the
height of the plug-in.

00:14:41.020 --> 00:14:44.870
and it gets the source attribute,
which lets you specify an initial

00:14:44.870 --> 00:14:47.420
image to show in the plugin.

00:14:47.420 --> 00:14:52.770
And then it does a little bit of
logic to deal with relative URLs.

00:14:55.730 --> 00:14:58.480
and then there's a couple of the
lifecycle methods that we've implemented,

00:14:58.550 --> 00:15:01.390
plugin start and plugin stop.

00:15:01.600 --> 00:15:07.800
[Transcript missing]

00:15:11.460 --> 00:15:15.780
And there's a pause and resume method
which just call Web Plugin Stop and Stop,

00:15:15.780 --> 00:15:19.010
just a nicer name for those same methods.

00:15:22.500 --> 00:15:22.960
Okay.

00:15:22.960 --> 00:15:26.760
So that's the core of the plug-in.

00:15:26.780 --> 00:15:29.240
We've implemented the
API that we have to implement.

00:15:29.360 --> 00:15:31.720
But now what I'd like to
do is from JavaScript,

00:15:31.760 --> 00:15:36.100
I'd like to control the actions
of the plug-in via script code.

00:15:36.100 --> 00:15:39.200
So to do that, I have to export methods.

00:15:39.200 --> 00:15:47.250
And by default, the object that you
export from the plug-in,

00:15:47.680 --> 00:15:49.230
which we do -- I'm sorry,

00:15:50.850 --> 00:16:11.590
: This little innocuous method
that I mentioned earlier,

00:16:11.590 --> 00:16:11.590
object for WebScript,
you're just going to export self.

00:16:11.590 --> 00:16:11.590
And by default,
none of the methods or properties

00:16:11.590 --> 00:16:11.590
of your object are exported.

00:16:11.590 --> 00:16:11.590
This is because methods like Dialog
don't make a lot of sense to export,

00:16:11.590 --> 00:16:11.590
and it also could be a potential
security risk to export methods which

00:16:11.700 --> 00:16:21.700
[Transcript missing]

00:16:24.150 --> 00:16:26.540
A method to set the source image,
that's the beginning

00:16:26.540 --> 00:16:28.100
image for the transition.

00:16:28.110 --> 00:16:31.100
A method to set the target
image for the transition.

00:16:31.200 --> 00:16:34.110
A method to set the
particular transition number.

00:16:34.110 --> 00:16:35.980
And a method to perform the transition.

00:16:35.980 --> 00:16:39.970
And then two other methods to
stop and start the transition.

00:16:41.730 --> 00:16:45.200
Additionally,
we'd like the names of these methods

00:16:45.350 --> 00:16:47.820
in JavaScript to be reasonable.

00:16:47.820 --> 00:16:49.510
We want the API to look good.

00:16:49.920 --> 00:16:52.900
And in Objective C,
we have these funny colons

00:16:53.070 --> 00:16:55.210
that are used in names,
and those don't make a lot

00:16:55.250 --> 00:16:56.110
of sense in JavaScript.

00:16:56.240 --> 00:17:06.780
So what this method does is replace
those Objective C names with names

00:17:06.780 --> 00:17:13.570
which are more palatable for JavaScript.

00:17:13.570 --> 00:17:13.570
And in particular,
you can see things like set

00:17:13.570 --> 00:17:13.570
transition has a colon in Objective C.

00:17:13.570 --> 00:17:13.570
In JavaScript, it's just going to be
called set transition.

00:17:24.340 --> 00:17:24.340
And we have no properties
that we're going to export.

00:17:24.340 --> 00:17:24.340
So we're going to exclude all of
the properties from this object

00:17:24.340 --> 00:17:24.340
from visibility in Objective C.

00:17:26.700 --> 00:17:42.700
[Transcript missing]

00:17:43.450 --> 00:17:46.170
is the developer of the core
image functionality to set up the

00:17:46.480 --> 00:17:49.940
transitions and actually generate an
image for a particular transition.

00:17:49.940 --> 00:17:52.440
Like I said,
this is pretty much verbatim from the

00:17:52.920 --> 00:17:56.250
developer examples for core image.

00:17:56.580 --> 00:17:59.120
So that's pretty much it.

00:17:59.120 --> 00:18:00.800
We've implemented

00:18:02.250 --> 00:18:07.170
We've implemented the essential
plug-in functionality,

00:18:07.170 --> 00:18:09.100
and we've implemented the
scripting functionality.

00:18:09.150 --> 00:18:11.310
Let's go ahead and build this.

00:18:12.920 --> 00:18:13.660
and install it.

00:18:13.660 --> 00:18:15.690
Now, to install a plugin,
they just go in any of the

00:18:15.690 --> 00:18:20.230
internet plugins directories and
slash library internet plugins or

00:18:20.360 --> 00:18:22.420
tilde library internet plugins.

00:18:22.420 --> 00:18:24.610
And it built successfully.

00:18:27.210 --> 00:18:34.520
I'm going to copy this from
my build directory into Tilda

00:18:34.520 --> 00:18:34.520
Library Internet Plugins.

00:18:39.210 --> 00:18:44.340
And now if I reload this page,
I have to actually restart Safari.

00:18:46.830 --> 00:18:51.240
Let's go to the history
item to bring up that page.

00:18:51.240 --> 00:18:56.460
Now instead of the missing plug-in icon,
we actually have the first image.

00:18:56.460 --> 00:19:00.110
And now when I start the transitions,
I can

00:19:03.910 --> 00:19:07.400
Oh, actually, nothing happened.

00:19:07.700 --> 00:19:09.780
Why did nothing happen?

00:19:09.780 --> 00:19:09.780
Well,

00:19:10.130 --> 00:19:12.890
I haven't actually changed
the JavaScript to perform the

00:19:12.890 --> 00:19:16.970
transition and to set the current
transition that we want to use.

00:19:17.030 --> 00:19:21.320
Let's go ahead and go back to
our HTML and take a look at

00:19:21.360 --> 00:19:24.170
what we'll need to do that.

00:19:26.920 --> 00:19:31.190
So I have a different JavaScript file
that I'm going to be using here that's

00:19:31.240 --> 00:19:38.570
going to be imported into the HTML file,
frame transition.JavaScript.

00:19:38.570 --> 00:19:38.570
Let's take a look at what that does.

00:19:42.640 --> 00:19:49.300
So on my button mouse down handler,
remember, this is the mouse down handler

00:19:49.870 --> 00:19:51.770
of the div from our Web page.

00:19:51.920 --> 00:19:54.010
Let's take a look back at that.

00:19:54.430 --> 00:19:58.380
is the unmoused . This is the piece
of JavaScript that will be called

00:19:58.380 --> 00:20:01.330
when we select that play button.

00:20:01.390 --> 00:20:06.860
is doing is standard JavaScript stuff
to get the button image.

00:20:07.300 --> 00:20:17.800
[Transcript missing]

00:20:24.660 --> 00:20:27.760
And here we have some code
that's going to leverage our

00:20:27.840 --> 00:20:29.830
custom scripting on the plugin.

00:20:29.860 --> 00:20:32.910
It's going to find the plugin element.

00:20:33.790 --> 00:20:37.640
And then it's going to do some
manipulations to change the current

00:20:37.640 --> 00:20:38.940
image that's being displayed.

00:20:38.940 --> 00:20:42.210
We're just going to implement
a counter into an OA.

00:20:43.010 --> 00:20:46.800
And then it's going to do some
manipulations to change the current

00:20:46.850 --> 00:20:48.140
image that's being displayed.

00:20:48.260 --> 00:20:51.420
We're just going to implement
a counter into an OA.

00:20:51.840 --> 00:20:57.300
will show you how to
use the new DOM binding.

00:21:08.130 --> 00:21:08.130
And then we're going to
set a transition number.

00:21:08.130 --> 00:21:08.130
And we're just going to increment
that transition number so that

00:21:08.130 --> 00:21:08.130
each time we display a new image,
we'll use a different transition.

00:21:08.130 --> 00:21:08.130
And then we'll perform the transition.

00:21:08.720 --> 00:21:12.140
is going to show you how
to use the DOM binding.

00:21:12.140 --> 00:21:13.470
That's pretty much all there is to it.

00:21:13.780 --> 00:21:16.800
And then we'll repeat this
on a three-second timer.

00:21:16.800 --> 00:21:19.260
So every three seconds,
we're going to update the image.

00:21:19.260 --> 00:21:33.430
Now let's take a look
at what that looks like.

00:21:33.430 --> 00:21:33.430
Oops.

00:21:40.820 --> 00:21:42.120
Let me leave that running.

00:21:42.200 --> 00:21:46.560
So actually, this is great,
but it's still inside a browser.

00:21:46.560 --> 00:21:51.670
I talked about using custom
applications and not using the

00:21:51.670 --> 00:21:54.800
browser to host my application.

00:21:54.800 --> 00:21:58.210
So what will it take to transform
this into an application?

00:21:58.470 --> 00:22:00.440
Let's do that next.

00:22:01.710 --> 00:22:04.160
Because one of the things I'd like
to do is use the Open Panel to

00:22:04.200 --> 00:22:07.740
select a set of images that are
shown in that picture frame.

00:22:20.040 --> 00:22:24.210
So these are the six lines of
code it takes to transform that

00:22:24.920 --> 00:22:26.780
web page into an application.

00:22:26.850 --> 00:22:27.740
That's it.

00:22:27.950 --> 00:22:31.410
What we're doing is
getting the HTML document,

00:22:32.010 --> 00:22:34.520
getting the web frame,
which I'll show you in a minute,

00:22:34.520 --> 00:22:37.260
in the nib file,
and loading the request into the web

00:22:37.380 --> 00:22:41.010
frame to load the particular HTML page.

00:22:41.130 --> 00:22:43.860
This nib file really
couldn't be more simple.

00:22:45.400 --> 00:22:47.600
at Gatekeeper asking me if
I want to open Interface Builder.

00:22:47.600 --> 00:22:50.640
Yes, I do.

00:22:50.650 --> 00:22:54.230
So this is just a simple window
with a single web view in it.

00:22:54.320 --> 00:22:59.670
Let's go ahead and build and run this.

00:23:11.260 --> 00:23:14.110
Now we have the same web
page in an application.

00:23:14.120 --> 00:23:16.260
And you'll notice the same
kinds of effects that we

00:23:16.320 --> 00:23:17.390
expect to work still work.

00:23:17.530 --> 00:23:22.780
So when I mouse over and mouse out,
the control appears and disappears.

00:23:23.080 --> 00:23:25.920
Now we have the same web
page in an application.

00:23:25.920 --> 00:23:28.060
And you'll notice the same
kinds of effects that we

00:23:28.060 --> 00:23:29.280
expect to work still work.

00:23:33.200 --> 00:23:36.840
What I'd like to do next is leverage
some of the capabilities of Cocoa,

00:23:36.840 --> 00:23:39.710
like the Open Panel,
something very straightforward.

00:23:39.850 --> 00:23:42.630
So how do we do that?

00:23:42.630 --> 00:23:42.630
Well,

00:23:42.830 --> 00:23:46.700
Back in Interface Builder,
I'm simply-- I think if you were to

00:23:46.700 --> 00:23:49.620
do an application more completely,
you'd want to use the

00:23:49.620 --> 00:23:50.660
NS Document architecture.

00:23:50.660 --> 00:23:52.990
But for now,
I'm just going to have a single window.

00:23:53.120 --> 00:23:59.720
And I'm going to connect the
File Open menu item to my app controller.

00:24:06.700 --> 00:24:14.000
[Transcript missing]

00:24:25.200 --> 00:24:28.110
You can see that there is an
existing connection between the open

00:24:28.110 --> 00:24:31.200
menu item and the app controller,
and it's just going to send

00:24:31.200 --> 00:24:33.280
open to the app controller.

00:24:33.380 --> 00:24:37.290
For some reason, Interface Builder isn't
letting me draw this line.

00:24:37.310 --> 00:24:39.330
That looks like a bug.

00:24:41.860 --> 00:24:47.450
So anyway,
there's another source code file

00:24:47.560 --> 00:24:50.920
for the app controller here that
actually implements the open method.

00:24:50.920 --> 00:24:52.870
And this is the method that
will be sent from that open

00:24:52.870 --> 00:24:54.760
menu item to my app controller.

00:24:54.760 --> 00:24:56.190
And this is standard Cocoa code.

00:24:56.410 --> 00:24:59.540
It's going to open up an open panel.

00:24:59.540 --> 00:25:01.930
It's going to run it,
and then it's going to pull out a set

00:25:01.930 --> 00:25:04.190
of URLs that represent my selection.

00:25:06.760 --> 00:25:10.420
So that's all pretty standard except
for this line of code down here.

00:25:10.430 --> 00:25:14.530
JS window call web script method,
set images with arguments and

00:25:14.540 --> 00:25:19.500
an array of strings that we've
received from the open panel.

00:25:19.500 --> 00:25:23.150
And what this is doing is actually
sending a JavaScript method,

00:25:23.250 --> 00:25:25.670
set images to the window object.

00:25:25.810 --> 00:25:30.120
And we stored that window object
using this delegate method,

00:25:30.130 --> 00:25:32.370
window script object available.

00:25:32.460 --> 00:25:36.840
And this is one of the frame load
delegate methods that you can implement

00:25:37.000 --> 00:25:41.380
on your frame load delegate object,
which is in this case the app controller.

00:25:43.060 --> 00:25:46.010
So let's go ahead and take a
look at the HTML now and the

00:25:46.070 --> 00:25:48.560
corresponding set images method.

00:25:52.300 --> 00:26:08.470
is going to show you how
to use the DOM binding.

00:26:09.570 --> 00:26:09.570
This is an object that we created
in Objective-C and we're passing

00:26:09.570 --> 00:26:09.570
to JavaScript and it's going to
represent the array of URL strings

00:26:09.570 --> 00:26:09.570
that were selected in the open panel.

00:26:09.570 --> 00:26:09.570
And all we do is we update the

00:26:10.560 --> 00:26:12.500
this hard coded list of images.

00:26:12.530 --> 00:26:14.490
Pretty straightforward.

00:26:14.490 --> 00:26:19.450
Let's go ahead and run this
again and see how this works.

00:26:23.950 --> 00:26:25.620
I'm going to bring up the open panel.

00:26:25.650 --> 00:26:28.280
I happen to have a set of
images here from my daughter's

00:26:28.350 --> 00:26:32.280
recent second birthday.

00:26:32.280 --> 00:26:32.280
Let's take a look at those.

00:26:47.320 --> 00:26:51.260
So what we've seen is how to create
a user interface using Safari really

00:26:51.260 --> 00:26:54.370
as a development tool to iterate
on the design of my user interface,

00:26:54.560 --> 00:26:57.150
how to turn that into an application,
and then how to leverage

00:26:57.210 --> 00:26:58.100
Cocoa functionality.

00:26:58.100 --> 00:27:02.300
And how it really is possible to
use Objective-C and JavaScript in

00:27:02.300 --> 00:27:04.030
very interactive ways.

00:27:04.120 --> 00:27:07.980
You can really leverage the
capabilities of Objective-C,

00:27:07.980 --> 00:27:11.150
but still have the
flexibility of JavaScript.

00:27:12.540 --> 00:27:14.220
There's one additional
thing I want to show you,

00:27:14.330 --> 00:27:17.370
which is an alternate
deployment option you now have.

00:27:17.490 --> 00:27:22.300
You've got a piece of code and some
HTML that can be deployed as a widget.

00:27:22.300 --> 00:27:24.560
So what does it take to
turn this into a widget?

00:27:24.560 --> 00:27:25.940
Well, pretty much nothing.

00:27:25.940 --> 00:27:28.510
Let's go ahead and look at
the widget version of this.

00:27:31.610 --> 00:27:48.250
is going to show you how
to use the DOM binding.

00:27:48.250 --> 00:27:49.260
This is pretty much exactly
the same HTML code in

00:27:49.260 --> 00:27:49.260
JavaScript as the application,
except I shrank it a little bit

00:27:49.260 --> 00:27:49.260
just to be more like a widget,
not take up so much screen real estate.

00:27:49.260 --> 00:27:49.260
I'm actually going to
move this onto my desktop.

00:27:50.030 --> 00:27:58.630
and you guys know about
that special hack?

00:27:58.630 --> 00:27:58.630
Yeah, it's pretty great.

00:28:01.100 --> 00:28:01.400
Okay.

00:28:01.600 --> 00:28:06.080
There's a default you can write
called com.apple.dashboard.devmode.

00:28:06.080 --> 00:28:08.510
And it allows you -- you set that to yes,
and it allows you to run

00:28:08.510 --> 00:28:12.850
your widgets on the desktop
outside of the dashboard layer.

00:28:15.470 --> 00:28:17.520
So that's great,
but one of the things I'd like to do

00:28:17.520 --> 00:28:23.000
in this widget is change the images,
and there's no open dialogue that's

00:28:23.000 --> 00:28:25.570
accessible to me from the widget.

00:28:25.780 --> 00:28:41.310
: So how can I do that?

00:28:41.310 --> 00:28:41.310
Well, I'm not going to show you a lot of
detail because the session following

00:28:41.310 --> 00:28:41.310
this is actually going to use the same
widget and talk about how you can use

00:28:41.310 --> 00:28:41.310
some of the dashboard capabilities to
implement what I'm going to show you.

00:28:41.310 --> 00:28:41.310
But let's just pull up

00:28:41.700 --> 00:28:53.700
[Transcript missing]

00:28:57.220 --> 00:28:58.200
Okay.

00:28:58.270 --> 00:29:00.030
Back to slides.

00:29:00.180 --> 00:29:04.700
So what we've seen is really how
it is possible to leverage these

00:29:04.700 --> 00:29:09.620
technologies in ways that use the
Web Kit for your presentation,

00:29:09.740 --> 00:29:14.030
but still access native
code and the power of Cocoa.

00:29:16.210 --> 00:29:17.100
Okay.

00:29:17.100 --> 00:29:19.000
Back to slides.

00:29:19.000 --> 00:29:23.600
So what we've seen is really how
it is possible to leverage these

00:29:23.630 --> 00:29:24.480
technologies in ways that use the
Web Kit for your presentation,

00:29:24.480 --> 00:29:24.480
but still access native
code and the power of Cocoa.

00:29:24.920 --> 00:29:27.160
This is an advanced session,
so I'm sure you all know

00:29:27.160 --> 00:29:29.340
about the JavaScript DOM API.

00:29:29.730 --> 00:29:36.630
This is the same API,
but available to you from Objective-C.

00:29:36.940 --> 00:29:39.400
The API is a W3 standard.

00:29:39.400 --> 00:29:42.560
You can go to the W3
site and look at the API.

00:29:42.560 --> 00:29:49.610
And I've given you an example here of the
IDL definition of one of the W3C methods.

00:29:49.610 --> 00:29:52.580
And it's binding to C and
it's binding to Objective C.

00:29:52.580 --> 00:29:55.390
And there's one thing I want to note,
and that is Objective

00:29:55.390 --> 00:29:57.170
C has a funny syntax,
as we all know.

00:29:57.170 --> 00:29:57.990
It's got the colons.

00:29:58.040 --> 00:30:02.570
And just as we had an issue mapping
Objective C names to JavaScript,

00:30:02.570 --> 00:30:06.400
there's an issue mapping
IDL names to Objective C.

00:30:06.900 --> 00:30:13.390
So what we chose to do is use the base
name of the IDL method as the first

00:30:13.500 --> 00:30:15.590
component of the Objective C name.

00:30:15.600 --> 00:30:19.870
So in this case, get named item NS,
which stands for namespace,

00:30:19.890 --> 00:30:20.960
is the IDL definition.

00:30:20.980 --> 00:30:23.710
And the Objective C method
for this is get named item NS.

00:30:23.750 --> 00:30:28.600
And then for each of the parameters that
are associated with the IDL definition,

00:30:28.600 --> 00:30:29.780
we have a colon.

00:30:29.780 --> 00:30:32.770
So in this case, there are...

00:30:33.100 --> 00:30:40.700
[Transcript missing]

00:30:41.520 --> 00:30:45.700
So why would you use this
API versus the JavaScript DOM API?

00:30:45.760 --> 00:30:50.200
Well, excuse me,
it's really a matter of convenience.

00:30:50.200 --> 00:30:53.390
And another possible
reason is performance.

00:30:53.530 --> 00:30:57.340
JavaScript is plenty
fast for doing DHTML,

00:30:57.430 --> 00:31:00.240
but if you want to do something
like iterate over every

00:31:00.240 --> 00:31:03.900
node in a complex document,
it might be more appropriate

00:31:03.950 --> 00:31:05.390
to use Objective C.

00:31:05.990 --> 00:31:07.650
In fact,
what I'm going to do now is show you

00:31:07.710 --> 00:31:12.270
a demo of doing exactly the same thing
in JavaScript versus Objective-C,

00:31:12.270 --> 00:31:15.110
and we'll time it and see
what the difference is.

00:31:25.690 --> 00:31:30.910
So what I decided to do is go out on
the web and look for a large document.

00:31:32.010 --> 00:31:35.470
In fact, I decided to go and
find a Shakespeare play.

00:31:35.580 --> 00:31:40.530
In this case,
I'm going to use the Comedy of Errors.

00:31:41.460 --> 00:31:47.380
And this page is the entire
play in one large HTML file.

00:31:47.380 --> 00:31:48.570
So far, it's pretty zippy loading it.

00:31:48.680 --> 00:31:50.670
It's a huge file.

00:31:51.480 --> 00:32:05.990
: This is somewhat of
a contrived example,

00:32:05.990 --> 00:32:05.990
but what I like to do in JavaScript is
iterate over every node in the DOM,

00:32:05.990 --> 00:32:05.990
a computer hash of the
text nodes in the document.

00:32:05.990 --> 00:32:05.990
And do it from JavaScript.

00:32:06.160 --> 00:32:07.180
and the hash is really stupid.

00:32:07.180 --> 00:32:10.190
It's just going to add up the value
of each of the character codes.

00:32:10.280 --> 00:32:13.970
Not a very good hash,
but it illustrates the point.

00:32:15.770 --> 00:32:16.920
Let me pull up what it is.

00:32:17.000 --> 00:32:23.890
I saved that HTML file and I added
a little bit of JavaScript to it.

00:32:23.890 --> 00:32:23.890
So let me pull that up.

00:32:27.430 --> 00:32:33.120
So you can see what I did is
I added a reference to hash text.js

00:32:33.350 --> 00:32:37.960
to the top of the HTML file.

00:32:38.030 --> 00:32:40.260
Let's take a look at what that does.

00:32:43.370 --> 00:32:47.580
So there's an unload
handler that gets called.

00:32:47.610 --> 00:32:51.740
And that unload handler
iterates or traverses over all

00:32:51.740 --> 00:32:53.160
of the nodes in the document.

00:32:53.180 --> 00:32:57.010
And it calls this hash function,
which I implemented in

00:32:57.050 --> 00:33:00.770
JavaScript to very simply,
as I said, just

00:33:01.920 --> 00:33:05.970
add up all of the character
codes in the document.

00:33:06.230 --> 00:33:08.140
And there are other ways you
could possibly implement this

00:33:08.180 --> 00:33:13.140
using the Tree Walker or the
Node Iterator JavaScript objects.

00:33:13.140 --> 00:33:17.000
This is just one example of how
you can iterate over a document.

00:33:17.610 --> 00:33:20.880
And the other thing I've done
is I've recorded the start

00:33:21.170 --> 00:33:24.120
and end times to compute the
total time it takes to do this.

00:33:24.310 --> 00:33:26.460
And I've added up the number
of text nodes that we add,

00:33:26.460 --> 00:33:35.600
and I'm going to report the
cumulative hash value in an alert.

00:33:36.690 --> 00:33:36.690
Let's load this in JavaScript -- I mean,
in Safari and see --

00:33:37.200 --> 00:33:43.800
[Transcript missing]

00:33:46.500 --> 00:33:52.370
: So that took two seconds to
iterate over the entire document

00:33:53.100 --> 00:33:54.760
and compute a cumulative hash.

00:33:54.760 --> 00:33:55.440
Not bad.

00:33:55.650 --> 00:33:59.740
There were almost 6,000
nodes in the document.

00:33:59.740 --> 00:34:03.520
But we can probably do better if
we use native code to do that.

00:34:03.520 --> 00:34:05.520
In fact, we can do better.

00:34:05.800 --> 00:34:10.910
Let's take a look now at

00:34:14.040 --> 00:34:15.260
is going to load that page.

00:34:15.260 --> 00:34:24.230
And this is very familiar to you
now from the previous example.

00:34:25.090 --> 00:34:35.110
: We have a single WebView and we're
just going to load that Comedy of

00:34:35.110 --> 00:34:35.110
Errors HTML page into our application.

00:34:35.110 --> 00:34:35.110
And now

00:34:37.220 --> 00:34:41.140
In our didFinishLoad method,
we have essentially exactly the same

00:34:41.140 --> 00:34:44.010
algorithm that we had in JavaScript.

00:34:44.120 --> 00:34:46.360
But instead of being
implemented in JavaScript,

00:34:46.360 --> 00:34:48.590
it's implemented in Objective-C.

00:34:48.600 --> 00:34:50.370
Let's take a look at the
Traverse Next Node method.

00:34:50.380 --> 00:34:56.910
And let's compare that
to the JavaScript method.

00:34:57.140 --> 00:35:04.820
There might not be enough
screen real estate to do this.

00:35:14.090 --> 00:35:17.400
You can see side by side,
the code is almost identical.

00:35:17.400 --> 00:35:20.200
The only thing that's
different is the syntax.

00:35:22.910 --> 00:35:30.630
And similarly, the hash function is
essentially identical,

00:35:30.640 --> 00:35:33.100
except for the syntax differences.

00:35:38.600 --> 00:35:44.600
Okay, so now what I want to do is report
the results from this application

00:35:44.600 --> 00:35:46.780
using a Cocoa Alert panel.

00:35:46.780 --> 00:35:50.500
And do you think there will be
a difference in performance?

00:35:50.500 --> 00:35:50.500
Let's see.

00:35:59.040 --> 00:36:02.420
2 seconds to .04 seconds.

00:36:02.420 --> 00:36:05.780
The same number of text nodes
in the same cumulative hash.

00:36:05.940 --> 00:36:10.180
So if there are any concerns about
JavaScript speed being not sufficient,

00:36:10.180 --> 00:36:13.050
and you shouldn't really have concerns,
because for the most part,

00:36:13.050 --> 00:36:16.010
it's more than capable and more
than fast enough to do most of

00:36:16.070 --> 00:36:20.060
the kinds of things you want to
do for an interactive interface.

00:36:20.060 --> 00:36:24.110
But if you choose to implement
computationally intensive algorithms

00:36:24.110 --> 00:36:28.000
like this in JavaScript and are too slow,
you now have an alternative.

00:36:28.000 --> 00:36:30.920
You can do the same thing in Objective
C and bind that into JavaScript.

00:36:30.920 --> 00:36:35.650
So in fact, what I wanted to do is -- I'm

00:36:37.440 --> 00:36:45.040
will show you how you can take
this same Objective-C code

00:36:45.300 --> 00:36:49.250
and reference it from your
JavaScript code by exporting the

00:36:49.260 --> 00:36:53.200
Objective-C functionality in much the
same way that we exported functionality

00:36:53.200 --> 00:36:55.290
from the plug-in to JavaScript.

00:36:55.320 --> 00:36:59.270
We're now just going to export a piece
of Objective-C code to JavaScript.

00:37:03.730 --> 00:37:10.720
So the way we do this is, again,
to leverage a delegate method,

00:37:10.740 --> 00:37:13.130
Windows Script object available,

00:37:14.000 --> 00:37:20.500
And this will let us
set additional -- well,

00:37:20.500 --> 00:37:24.090
let us access the window object
from JavaScript from Objective C.

00:37:24.090 --> 00:37:27.580
And in this case,
all we're doing is we're adding self

00:37:28.250 --> 00:37:32.100
as a new property of the window object,
and we're going to call it hash.

00:37:32.150 --> 00:37:37.020
So now this object will appear in
JavaScript under the name hash,

00:37:37.160 --> 00:37:39.270
and it's going to implement

00:37:40.490 --> 00:37:44.790
is going to show you how
to use the new DOM binding.

00:37:44.870 --> 00:37:49.700
We're going to export in exactly
the same way that we exported

00:37:50.250 --> 00:37:52.720
methods from the plug-in.

00:37:52.760 --> 00:37:57.360
Now from this class,
you can see we're exporting the

00:37:57.360 --> 00:37:59.790
selector hash and we're going
to rename it for visibility in

00:37:59.790 --> 00:37:59.790
JavaScript as hash without the colon.

00:37:59.790 --> 00:37:59.790
And then let's go ahead
and take a look at the

00:38:01.220 --> 00:38:12.740
I'm going to show you the
HTML now that we're going to use,

00:38:12.740 --> 00:38:12.740
because what I need to do
is report from JavaScript

00:38:13.750 --> 00:38:17.690
is going to show you how
to use the hash value.

00:38:17.700 --> 00:38:23.170
We actually want to have JavaScript to
generate this hash and report it.

00:38:23.170 --> 00:38:23.170
So let's take a look at that code.

00:38:23.870 --> 00:38:31.350
is going to do is instead of
all of that other code that we

00:38:31.350 --> 00:38:31.350
had previously in JavaScript,
it's just going to call hash.

00:38:31.960 --> 00:38:37.110
is a developer at Microsoft who
has been working on a new

00:38:39.470 --> 00:38:41.070
This is what we would do by default.

00:38:41.140 --> 00:38:42.100
Hash.hash.

00:38:42.220 --> 00:38:48.360
Because we're exporting a hash object,
and that hash object has a hash method.

00:38:48.500 --> 00:38:51.560
So it's a little bit awkward,
but let's just live with that

00:38:51.560 --> 00:38:55.710
for one second and run this
and see what the value is.

00:38:57.720 --> 00:39:09.040
: One other thing I want to
mention before we run it,

00:39:09.040 --> 00:39:09.050
though, is this is calling alert
to report the results.

00:39:09.050 --> 00:39:09.050
And in Safari,
the Web UI delegate by default will put

00:39:09.250 --> 00:39:15.190
is going to show you how to
implement the UI delegate.

00:39:15.190 --> 00:39:19.810
I haven't implemented the UI delegate,
so the message isn't going

00:39:19.810 --> 00:39:22.380
to get shown anywhere.

00:39:22.380 --> 00:39:22.380
We're going to implement one

00:39:23.390 --> 00:39:25.540
is the UI delegate method.

00:39:25.540 --> 00:39:27.760
Run JavaScript alert panel with message.

00:39:27.760 --> 00:39:30.300
We're going to log it to the console.

00:39:30.400 --> 00:39:37.500
This means when I run
the application in Xcode,

00:39:37.500 --> 00:39:37.500
which we'll do now, the console

00:39:38.880 --> 00:39:39.910
will report the results.

00:39:39.970 --> 00:39:43.840
So the results showed up in this alert
because that was the alert that we

00:39:43.840 --> 00:39:47.520
generated from the Objective-C code.

00:39:48.080 --> 00:39:48.590
But you'll also see in the console

00:39:48.960 --> 00:40:00.480
is reporting the same numbers.

00:40:00.480 --> 00:40:00.630
So this is JavaScript code calling
into Objective C to compute the

00:40:00.630 --> 00:40:00.630
hash and then reporting via the
Web UI delegate the results.

00:40:02.250 --> 00:40:08.460
So let's just do one final thing here,
and that is clean up this messy API.

00:40:08.530 --> 00:40:12.390
I really don't want to have
to call hash.hash to compute

00:40:12.470 --> 00:40:14.940
the hash of a particular node.

00:40:14.940 --> 00:40:16.800
I just want to call hash.

00:40:16.860 --> 00:40:18.930
So how do we do that?

00:40:21.450 --> 00:40:27.680
We do that by implementing one
of the web scripting methods

00:40:27.920 --> 00:40:28.900
that I mentioned earlier.

00:40:28.900 --> 00:40:31.920
These are documented
in web script object.h.

00:40:32.060 --> 00:40:34.680
And that's invoke default
method with arguments.

00:40:34.820 --> 00:40:40.420
So if you export an Objective-C object
to JavaScript and you try and

00:40:40.420 --> 00:40:45.200
operate on it as a function,
which is what you're essentially doing.

00:40:45.530 --> 00:41:06.230
: So, in this JavaScript code,
we consider that to be a default method,

00:41:06.230 --> 00:41:06.230
and this method will be
called in JavaScript.

00:41:06.230 --> 00:41:06.230
So what we're doing here in the
default method is the same thing

00:41:06.230 --> 00:41:06.230
that we do in the hash method,
which is to call hash.

00:41:06.230 --> 00:41:06.230
So let's go ahead and run that,
and you'll see exactly the same

00:41:06.230 --> 00:41:06.230
results that we saw before.

00:41:11.900 --> 00:41:17.000
[Transcript missing]

00:41:23.300 --> 00:41:28.520
So what you've learned today is
how to write a Web Kit plugin to

00:41:28.520 --> 00:41:30.600
leverage really powerful capabilities.

00:41:30.660 --> 00:41:34.410
Core image really gives you a lot
of powerful rendering capabilities,

00:41:34.410 --> 00:41:37.130
and it is as easy as what I've
shown you to leverage that.

00:41:39.090 --> 00:41:42.240
You've seen scripting between
Objective-C and JavaScript and

00:41:42.240 --> 00:41:45.650
how it really is easy to mix and
match code between JavaScript and

00:41:45.650 --> 00:41:47.060
Objective-C as necessary.

00:41:47.260 --> 00:41:51.220
And you've seen the powerful
capabilities that we've exposed

00:41:51.220 --> 00:41:53.140
via the DOM Objective-C bindings.

00:41:54.260 --> 00:41:57.080
So that's pretty much all
I have to show you today.

00:41:57.080 --> 00:41:57.960
For more information,

00:42:00.820 --> 00:42:03.190
You can go to the WWDC site.

00:42:03.340 --> 00:42:05.890
You're familiar with that.

00:42:05.970 --> 00:42:08.400
There's a couple of sessions I want
to mention that are of interest.

00:42:08.400 --> 00:42:12.810
The upcoming Safari for Web designer
session will talk more about the

00:42:12.990 --> 00:42:16.880
HTML and JavaScript that you can
leverage inside of Safari that

00:42:17.160 --> 00:42:20.250
will let you create great websites.

00:42:20.260 --> 00:42:23.420
And then there's another really
good session for a lot of folks,

00:42:23.530 --> 00:42:26.210
and that's the hands-on
advanced dashboard widgets.

00:42:26.210 --> 00:42:29.740
So if you're interested in how we
made this application into a widget

00:42:29.740 --> 00:42:33.660
and some of the details of that,
I would recommend going to that session.

00:42:36.210 --> 00:42:39.170
And if you have any particular
questions after the conference,

00:42:39.260 --> 00:42:40.270
you can contact Mark Malone.