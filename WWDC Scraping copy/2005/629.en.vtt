WEBVTT

00:00:00.810 --> 00:00:01.190
Good morning.

00:00:01.190 --> 00:00:03.140
My name is Michael Lopp.

00:00:03.260 --> 00:00:06.360
I'm responsible for desktop
management technologies at Apple.

00:00:06.360 --> 00:00:10.070
We're going to talk to you about
a lot of different stuff today,

00:00:10.140 --> 00:00:14.480
focused around monitoring of systems
using Apple remote desktop as well as

00:00:14.480 --> 00:00:16.790
a bunch of open source tools as well.

00:00:17.450 --> 00:00:19.720
To kick it off,
an interesting thing happened

00:00:19.720 --> 00:00:21.890
yesterday at the server feedback forum.

00:00:21.910 --> 00:00:24.930
We had one gentleman over here saying,
I'm a command line guy.

00:00:24.930 --> 00:00:26.950
Make sure I can do everything
from the command line.

00:00:26.950 --> 00:00:28.460
Make sure the man pages are there.

00:00:28.460 --> 00:00:29.450
And we're like, yes, absolutely.

00:00:29.450 --> 00:00:30.020
We want to do that.

00:00:30.070 --> 00:00:33.060
And then someone from K-12
stood up over here and said,

00:00:33.060 --> 00:00:35.620
we want ARD to be really
simple to use and do all this.

00:00:35.760 --> 00:00:38.140
So there's clearly a
need for both of those.

00:00:38.140 --> 00:00:41.350
And I'm here to tell you,
you can have it both ways.

00:00:41.360 --> 00:00:44.160
And that's what we're going to do during
this session right now is show you,

00:00:44.160 --> 00:00:46.560
starting with ARD,
we're going to give you some good demos.

00:00:46.560 --> 00:00:47.340
And then we're going to start.

00:00:47.360 --> 00:00:50.440
We're going deeper and deeper
into the foundations of Mac OS X.

00:00:50.440 --> 00:00:52.580
So to kick it off and
give us some context,

00:00:52.580 --> 00:00:53.860
I'm going to bring Nader Nafisi up.

00:00:53.880 --> 00:00:57.640
He's the product manager for
server and storage software.

00:01:04.850 --> 00:01:04.940
Great.

00:01:04.940 --> 00:01:05.560
Thank you, Michael.

00:01:05.560 --> 00:01:06.740
Good afternoon, everybody.

00:01:06.740 --> 00:01:12.660
So I'm going to give you a quick overview
about what monitoring is all about.

00:01:12.840 --> 00:01:15.090
Hopefully you all know
why it's important,

00:01:15.100 --> 00:01:19.260
but just kind of review it very quickly,
and then we'll let Michael and team

00:01:19.260 --> 00:01:21.260
take it away with more demo and content.

00:01:21.260 --> 00:01:26.380
So basically, monitoring, you know,
why is it good, why is it interesting,

00:01:26.380 --> 00:01:31.240
it's really there to help you figure
out what state your systems are in.

00:01:31.260 --> 00:01:35.450
You know, if they're up, if they're down,
maybe somebody's abusing it,

00:01:35.680 --> 00:01:36.580
that kind of thing.

00:01:36.580 --> 00:01:38.880
So you really need to have really
great tools and capabilities

00:01:39.030 --> 00:01:40.110
to be able to detect that.

00:01:40.160 --> 00:01:43.630
And the really cool news is
that Mac OS X has a lot of

00:01:43.650 --> 00:01:47.780
capabilities built into it,
either the command line level or at

00:01:47.780 --> 00:01:51.420
the GUI level to let you do that,
and Mac OS X server even gives you more.

00:01:51.420 --> 00:01:55.710
And what's even better is that
there's a lot of open source tools,

00:01:55.710 --> 00:01:57.900
just because we're a
Unix-based operating system,

00:01:57.900 --> 00:02:01.990
a lot of the existing open source
tools have been ported over very

00:02:02.000 --> 00:02:03.710
easily over to Mac OS X as well.

00:02:04.280 --> 00:02:07.880
And so what we're gonna do
today is talk about how you can

00:02:07.880 --> 00:02:12.060
extend App Remote Desktop to
better monitor your systems.

00:02:12.060 --> 00:02:15.380
And this is more out
of the box type thing,

00:02:15.380 --> 00:02:17.510
you know,
it's not exactly within the GUI,

00:02:17.560 --> 00:02:20.320
some of these capabilities
are a little more hidden.

00:02:20.390 --> 00:02:25.060
And we're also gonna talk about
how you can use Server Monitor to

00:02:25.060 --> 00:02:27.000
extend that as well.

00:02:27.000 --> 00:02:30.360
Again, as Michael said, there's a GUI,
which most of you guys have used,

00:02:30.360 --> 00:02:32.500
there's also a command
line version of that,

00:02:32.500 --> 00:02:35.800
which some of you may not have used,
and we're gonna talk about how

00:02:35.800 --> 00:02:38.000
you can extend that using Python.

00:02:38.370 --> 00:02:40.080
And last but not least,
we're gonna also give you an example,

00:02:40.080 --> 00:02:41.900
again,
there's a lot of open source projects

00:02:41.900 --> 00:02:44.500
out there you can use for monitoring,
but we've picked one of

00:02:44.500 --> 00:02:46.760
the more popular ones,
and we're gonna talk

00:02:46.760 --> 00:02:48.440
about that a little bit.

00:02:48.600 --> 00:02:52.310
So monitoring, if we look at it,
there's four main categories of

00:02:52.320 --> 00:02:53.720
ways you can monitor your systems.

00:02:53.720 --> 00:02:56.030
And probably the top
of the list is assets,

00:02:56.040 --> 00:03:00.050
monitoring your assets,
and essentially monitoring your hardware,

00:03:00.190 --> 00:03:03.940
you know, things like has memory
been removed from systems.

00:03:03.940 --> 00:03:08.970
I was at a presentation on Sunday where
Stephen Doyle from Edith Cowan was

00:03:08.970 --> 00:03:12.270
talking about actually somebody
had added memory to their systems.

00:03:12.280 --> 00:03:13.960
So you might see that as well.

00:03:13.960 --> 00:03:16.590
So you might want to let
those kind of things go by.

00:03:16.980 --> 00:03:20.110
But other things as
far as monitoring goes,

00:03:20.210 --> 00:03:21.240
security.

00:03:21.240 --> 00:03:24.250
Again, that's kind of a very
important thing these days.

00:03:24.260 --> 00:03:26.340
So making sure that
nobody's abusing systems,

00:03:26.370 --> 00:03:29.000
you know, as far as intrusion,
those kind of things.

00:03:29.000 --> 00:03:34.470
Something that's very common when it
comes to servers is monitoring the

00:03:34.510 --> 00:03:36.500
services that that server is providing.

00:03:36.500 --> 00:03:39.400
So, you know,
monitoring the health of a web service,

00:03:39.430 --> 00:03:44.020
making sure that it's chugging
along fine publishing web pages.

00:03:44.020 --> 00:03:45.640
And last but not least is hardware.

00:03:46.190 --> 00:03:48.850
We've got a rack of XSERVs here,
and again, monitoring them,

00:03:48.880 --> 00:03:53.110
making sure they're all nice and
cool and happy is also important.

00:03:53.140 --> 00:03:58.350
And so if we look at the desktop side,
there's a couple of technologies

00:03:58.390 --> 00:04:00.400
and tools available there
for you to let you do that.

00:04:00.520 --> 00:04:03.650
Close and dear to my heart
is App Promote Desktop too,

00:04:03.660 --> 00:04:08.250
but there's also a lot of other GUI tools
out there as well as command line tools.

00:04:08.260 --> 00:04:11.870
And if we look at server, again,
you can -- some of the -- a lot

00:04:11.870 --> 00:04:14.040
of the tools in the desktop are
also relevant to the server,

00:04:14.040 --> 00:04:16.040
but there's also some
server-specific tools out there.

00:04:16.060 --> 00:04:19.890
like RAID Admin and
Server Monitor you can use as well.

00:04:20.540 --> 00:04:25.900
And as I said, there's a whole bigger
universe out there as well,

00:04:25.900 --> 00:04:29.900
and that's the open
source monitoring tools.

00:04:29.900 --> 00:04:34.400
And here again,
we've got a couple of examples here,

00:04:34.400 --> 00:04:39.090
and later on we're going to be
talking about Nagios and how

00:04:39.240 --> 00:04:41.710
you can use that on Mac OS X and
Mac OS X Server to monitor your systems.

00:04:41.710 --> 00:04:41.710
So with that, I'll hand the keynote
thing back to Michael.

00:04:43.450 --> 00:04:45.270
Thank you, Nader.

00:04:45.460 --> 00:04:50.660
OK, so back to ARD,
a product near to my heart as well.

00:04:51.050 --> 00:04:53.700
So as Nader said,
I'm going to give you guys some demos

00:04:53.750 --> 00:04:55.400
here about how to extend ARD a bit.

00:04:55.670 --> 00:04:59.260
But I do want to talk about what
other things it does as well.

00:04:59.320 --> 00:05:00.740
You hear me say this all the time.

00:05:00.740 --> 00:05:01.900
It's a Swiss Army knife to me.

00:05:01.900 --> 00:05:04.960
It has all these little doodads on it,
all these different things that you can

00:05:05.180 --> 00:05:08.530
actually do not only for monitoring,
but for software distribution,

00:05:08.530 --> 00:05:10.710
for blasting bits out
to all your machines,

00:05:10.840 --> 00:05:13.010
for asset managing,
doing a lot of reporting against

00:05:13.010 --> 00:05:15.240
all of your infrastructure,
remote assistant.

00:05:15.240 --> 00:05:17.860
The reason that we have that
binoculars on there is being able

00:05:17.860 --> 00:05:20.790
to obviously see your machines,
as we'll be seeing here in a second,

00:05:20.790 --> 00:05:22.680
and then remote administration as well.

00:05:22.810 --> 00:05:25.700
So ARD has it all.

00:05:26.340 --> 00:05:28.860
But there's other things
that you want to do.

00:05:28.900 --> 00:05:31.990
You have problems,
like my mobility-- I have

00:05:32.040 --> 00:05:33.890
mobile computers and they're
wandering all over the place.

00:05:33.900 --> 00:05:35.020
How do I manage these machines?

00:05:35.020 --> 00:05:37.440
How do I monitor these machines
when they're not there,

00:05:37.450 --> 00:05:38.420
and that's a problem.

00:05:38.490 --> 00:05:42.000
You've got, I want this specific
piece of information,

00:05:42.000 --> 00:05:46.360
it doesn't happen to be in one of the
many reports that ARD currently has.

00:05:46.440 --> 00:05:47.440
I'm missing a task.

00:05:47.440 --> 00:05:49.870
You've got all these different
tasks that you can do in ARD,

00:05:49.940 --> 00:05:52.430
but you've got something
else that you want to do.

00:05:52.510 --> 00:05:55.700
And then lastly, I want to see,
as Nader was talking about,

00:05:55.700 --> 00:05:57.920
I want to see changes
in my lab over time.

00:05:58.190 --> 00:06:01.540
The current reports are a snapshot
of what's on my machines right now.

00:06:01.590 --> 00:06:04.860
So let's go take apart each one
of those and give you some demos,

00:06:04.860 --> 00:06:07.280
as well as maybe inform you
about one feature that you may

00:06:07.280 --> 00:06:10.300
not know about in ARD right now,
which is offline collecting.

00:06:10.400 --> 00:06:14.180
So here we are, a very basic diagram of
ARD in the enterprise.

00:06:14.270 --> 00:06:17.380
You have the admin and you have
your machines there on wireless.

00:06:17.420 --> 00:06:21.730
How do I do a report against these
when these machines aren't here?

00:06:21.790 --> 00:06:24.130
It's great when everything's live and
everyone's sitting on the machine,

00:06:24.150 --> 00:06:25.180
but when it's gone, it's no longer there.

00:06:25.180 --> 00:06:26.900
longer there.

00:06:27.130 --> 00:06:30.460
What we have in ARD 2,
and this is offline collecting,

00:06:30.460 --> 00:06:33.090
what it allows you to do is it
allows you to find a reporting

00:06:33.090 --> 00:06:34.440
policy and send it down.

00:06:34.440 --> 00:06:35.580
This is a task in ARD.

00:06:35.580 --> 00:06:37.580
You actually send that
down to all your clients.

00:06:37.580 --> 00:06:39.960
It says to these clients,
kind of like a cron job,

00:06:40.050 --> 00:06:41.260
every night at 4 a.m.

00:06:41.260 --> 00:06:43.320
send up the system
overview to my machine,

00:06:43.330 --> 00:06:44.280
to my admin.

00:06:44.280 --> 00:06:46.400
That's great if your admin's online.

00:06:46.400 --> 00:06:47.580
Your admin's not already there.

00:06:47.580 --> 00:06:49.400
So what we have is the offline collector.

00:06:49.400 --> 00:06:52.280
It's basically a server
process that's up all the time.

00:06:52.280 --> 00:06:54.330
This is the agent in our
Postgres database that's

00:06:54.560 --> 00:06:55.700
sitting there all the time.

00:06:56.060 --> 00:06:59.410
So when these machines aren't there,
or when the machines aren't there,

00:06:59.410 --> 00:07:00.540
let's do that again.

00:07:00.540 --> 00:07:05.540
When the machines aren't there,
obviously they don't report in.

00:07:05.540 --> 00:07:08.040
When they get to the next
time that they're on the

00:07:08.040 --> 00:07:10.590
network and they can report in,
they actually send that

00:07:10.590 --> 00:07:11.800
information up to that database.

00:07:11.800 --> 00:07:14.130
So the admin doesn't need
to be online to do that,

00:07:14.130 --> 00:07:17.140
and the clients don't need to
be online to do that as well.

00:07:17.140 --> 00:07:20.440
So what happens when you run this
report from your admin and you've got

00:07:20.440 --> 00:07:22.440
this cache is the machine's not there.

00:07:22.440 --> 00:07:24.670
You'll actually see the most
recent set of data for it.

00:07:24.720 --> 00:07:26.000
So it's a really handy way to do a lot.

00:07:26.000 --> 00:07:28.910
You're reporting against deployments
that have a lot of portables.

00:07:28.920 --> 00:07:31.390
So let's keep moving.

00:07:31.400 --> 00:07:35.190
So the other problem is I've got
all of this under information

00:07:35.190 --> 00:07:38.410
that I want to get to,
and I can't actually do it.

00:07:38.470 --> 00:07:40.780
Or maybe you've got a specific set
of information you want to get at.

00:07:40.800 --> 00:07:43.220
Here's the good news about ARD.

00:07:43.220 --> 00:07:45.630
We've got two things that we're built on.

00:07:45.640 --> 00:07:50.000
First off, as I've already alluded to,
Postgres is built right into ARD.

00:07:50.000 --> 00:07:51.350
It's a SQL database.

00:07:51.400 --> 00:07:53.350
That's where we put all of
our reporting information.

00:07:53.360 --> 00:07:55.280
As you'll see here in a second,
you can get in there.

00:07:55.280 --> 00:07:55.960
You can get access.

00:07:55.960 --> 00:07:57.390
You can get access to that
information to develop lots

00:07:57.390 --> 00:07:58.350
of different tools against it.

00:07:58.380 --> 00:08:00.020
And, of course, we're Unix.

00:08:00.020 --> 00:08:02.420
We have millions of
command line utilities.

00:08:02.420 --> 00:08:04.680
So let's actually go to demo three here.

00:08:04.680 --> 00:08:07.830
I'm going to give you guys a couple
examples of doing some monitoring

00:08:07.890 --> 00:08:09.810
here against some more machines here.

00:08:09.840 --> 00:08:10.940
Demo three.

00:08:12.300 --> 00:09:03.300
[Transcript missing]

00:09:03.570 --> 00:09:05.340
Click on Send Unix.

00:09:05.340 --> 00:09:10.720
And what I'm going to do is I want to
find all the PDFs on these machines.

00:09:10.770 --> 00:09:11.840
Why do I want to do that?

00:09:11.840 --> 00:09:13.260
Well,
I know there's PDFs on these machines.

00:09:13.360 --> 00:09:16.180
But what I want to do is
I actually want to use Spotlight.

00:09:16.240 --> 00:09:18.030
Now right now,
Spotlight's sitting up here on the right,

00:09:18.060 --> 00:09:19.250
so the question is,
how am I going to actually use

00:09:19.280 --> 00:09:21.420
Spotlight on these machines?

00:09:21.530 --> 00:09:24.040
There's a command line utility,
which is called mdefind,

00:09:24.120 --> 00:09:26.590
which goes and makes a call
straight into the Spotlight cache.

00:09:26.700 --> 00:09:29.390
So what I'm doing here is mdefind.

00:09:29.400 --> 00:09:32.590
I'm going to look for PDF,
and then I'm I'm going to go ahead

00:09:32.590 --> 00:09:34.850
and send this command to my XSERVs.

00:09:35.920 --> 00:09:38.640
It's running,
and here's all the information.

00:09:38.640 --> 00:09:40.980
I just ran a remote
spotlight search using ARD2.

00:09:40.980 --> 00:09:43.690
So, there's a million other
command line utilities there,

00:09:43.760 --> 00:09:46.550
but what you can see here is that
it would be as a send unix command,

00:09:46.600 --> 00:09:48.560
you can actually extend a lot of it.

00:09:48.560 --> 00:09:53.710
So, you can see all the PDFs
that are associated,

00:09:53.710 --> 00:09:57.430
and you also saw how fast it was
because the spotlight's really fast.

00:09:57.430 --> 00:09:57.430
So, that's one thing.

00:09:57.430 --> 00:09:57.430
Excuse me?

00:09:57.700 --> 00:09:58.780
Oh, you want to zoom in?

00:09:58.870 --> 00:10:00.210
I'm actually not set up to do that.

00:10:00.350 --> 00:10:02.440
It's a long list of PDFs.

00:10:02.440 --> 00:10:04.500
Sorry.

00:10:06.100 --> 00:10:06.980
Excuse me?

00:10:06.980 --> 00:10:08.240
Command, option, plus.

00:10:08.250 --> 00:10:08.700
DAVID J.

00:10:08.700 --> 00:10:09.960
Command, option, plus.

00:10:09.960 --> 00:10:10.500
Zoom.

00:10:10.500 --> 00:10:11.610
No, it's not set up.

00:10:11.700 --> 00:10:12.920
I told you.

00:10:12.920 --> 00:10:14.560
OK, afterwards, come by.

00:10:14.560 --> 00:10:16.120
I'll show it to you right in person.

00:10:16.140 --> 00:10:19.000
So the other one I want to show
right now is actually-- Renata

00:10:19.100 --> 00:10:20.300
was talking about security.

00:10:20.320 --> 00:10:23.800
So we don't have a security report,
per se, in ARD.

00:10:23.880 --> 00:10:25.740
But what we do is, again,
we have all these command

00:10:25.740 --> 00:10:26.820
line utilities available.

00:10:26.820 --> 00:10:29.860
So what I want to do is I want to
see who's logging into my machines.

00:10:29.910 --> 00:10:35.780
So again, using the send Unix command,
we go ahead and do use last.

00:10:35.780 --> 00:10:38.530
What last is, it says,
show me everybody who's

00:10:38.530 --> 00:10:42.140
logging into my machines,
whether via SSH or via login window.

00:10:42.140 --> 00:10:45.890
Again, huge amount of information
coming in that you're not going

00:10:45.890 --> 00:10:47.120
to be able to see in the back.

00:10:47.120 --> 00:10:48.120
I apologize.

00:10:48.140 --> 00:10:49.460
But again, here you are.

00:10:49.460 --> 00:10:52.140
I can see that people have been logging.

00:10:52.140 --> 00:10:54.060
Apple's been logging in via the console.

00:10:54.060 --> 00:10:56.100
They've been logging in via SSH.

00:10:56.100 --> 00:10:58.700
Again, the point is simple.

00:10:59.360 --> 00:11:02.470
Send Unix allows you to multicast
commands out to all your machines,

00:11:02.470 --> 00:11:05.900
and there's a huge amount of
command line utilities out there.

00:11:05.960 --> 00:11:08.570
So to keep on going,
let's go back to slides.

00:11:10.190 --> 00:11:12.600
Slides.

00:11:12.600 --> 00:11:14.750
I'm actually going to
bring up Tony Graham.

00:11:14.790 --> 00:11:18.750
Tony's actually written a solution in
Real Basic to actually do the asset

00:11:18.790 --> 00:11:21.120
tracking and system trend reporting.

00:11:21.230 --> 00:11:24.560
Tony's one of our system engineers.

00:11:24.560 --> 00:11:24.560
Come on up, Tony.

00:11:29.200 --> 00:11:35.500
Can I get demo 2 up, please?

00:11:35.640 --> 00:11:38.760
So Michael said the
Apple Remote Desktop tool collects

00:11:38.960 --> 00:11:41.120
system information reports,
and it stores them in

00:11:41.120 --> 00:11:43.200
a Postgres database,
but you only get that last

00:11:43.300 --> 00:11:45.900
bit of information you
collected from each client.

00:11:46.050 --> 00:11:50.370
How many of you in the room would like
to be able to track this stuff over time?

00:11:50.470 --> 00:11:50.740
Many.

00:11:50.740 --> 00:11:51.040
Okay.

00:11:51.040 --> 00:11:52.600
So it's actually pretty easy.

00:11:52.660 --> 00:11:54.990
I chose Real Basic.

00:11:55.340 --> 00:12:00.380
As a developer tool because it's
got a very shallow learning curve.

00:12:00.480 --> 00:12:03.570
It's well suited for system
administrators who don't

00:12:03.630 --> 00:12:05.200
want to learn C or Java.

00:12:05.230 --> 00:12:09.700
Very graphically oriented and has
built-in plugins to talk to databases.

00:12:09.700 --> 00:12:13.320
So I can go to my file
menu in Real Basic,

00:12:13.320 --> 00:12:15.180
add a data source.

00:12:15.270 --> 00:12:17.850
I'm going to specify Postgres.

00:12:19.610 --> 00:12:23.080
The database name would be ARD,
username would be ARD.

00:12:23.140 --> 00:12:24.900
Any guesses as to the password?

00:12:24.900 --> 00:12:27.020
ARD.

00:12:28.560 --> 00:12:30.600
And I can now double click
on this database here and

00:12:30.650 --> 00:12:31.710
see all the tables in it.

00:12:31.900 --> 00:12:35.430
Any experienced database administrators,
people who use SQL and

00:12:35.430 --> 00:12:36.440
that sort of thing?

00:12:36.700 --> 00:12:36.820
Yeah?

00:12:37.030 --> 00:12:38.630
Alright, great.

00:12:38.820 --> 00:12:42.090
The system information table has just
about everything you're interested in.

00:12:42.100 --> 00:12:44.230
It's all the stuff the report has pulled.

00:12:44.280 --> 00:12:47.340
So you can hit a basic query there.

00:12:47.480 --> 00:12:51.700
You can also do a more advanced one.

00:12:51.830 --> 00:12:53.800
Here's one.

00:12:53.930 --> 00:12:58.490
That's going to get the distinct list
of property names from the database.

00:12:58.530 --> 00:13:01.060
These are the things you can track.

00:13:01.200 --> 00:13:02.770
"How's that?

00:13:03.130 --> 00:13:09.080
Things like Ethernet address,
your computer name, IP addresses,

00:13:09.140 --> 00:13:11.310
all that good stuff is in there."

00:13:13.110 --> 00:13:16.820
I should back up and say that the
database is not available to you until

00:13:16.830 --> 00:13:20.980
you unlock or roll back some of the
security mechanisms that are in place.

00:13:21.010 --> 00:13:24.810
There are two configuration files
that you can edit to do that,

00:13:24.880 --> 00:13:28.750
or you can download a tool written
by Mike Bombic called Atom.

00:13:28.770 --> 00:13:32.550
Click a button, put in a password,
and it will unlock that database for you.

00:13:33.840 --> 00:13:35.840
So let's build something
very simple here.

00:13:35.860 --> 00:13:39.940
I'm going to take a pop-up menu,
drag it onto my standard window,

00:13:40.020 --> 00:13:45.300
stretch it a little bit wider,
and a database query control.

00:13:45.340 --> 00:13:49.100
And the database query control
over here on the right,

00:13:49.100 --> 00:13:52.680
I can say that is the ARD database.

00:13:52.680 --> 00:13:56.240
And I can say select distinct
property name from system information.

00:13:56.240 --> 00:13:59.080
This is standard SQL.

00:13:59.450 --> 00:14:04.240
The Postgres book by O'Reilly is an
excellent source for some of this stuff.

00:14:04.240 --> 00:14:07.670
And I can do a binding to that
pop-up menu and say I want that

00:14:07.710 --> 00:14:12.120
pop-up menu to show everything that
my database query has returned.

00:14:12.240 --> 00:14:16.610
Now we'll drag a list
box onto the window.

00:14:18.100 --> 00:14:22.640
A two column list box,
I want that to grow with the window,

00:14:22.760 --> 00:14:26.540
and I want in fact the
window to be able to grow.

00:14:28.250 --> 00:14:31.990
And I need a new database query
control for that list box.

00:14:32.150 --> 00:14:35.860
The pop-up menu that's going
to give me the unique list of

00:14:35.860 --> 00:14:40.480
all items is going to feed the
selected item into the second query.

00:14:40.590 --> 00:14:43.740
So the database,
the second database query will

00:14:43.760 --> 00:14:45.800
take that and do something with it.

00:14:45.840 --> 00:14:51.300
What it's going to do
is use the ARD database,

00:14:53.620 --> 00:14:59.300
This one's going to get the computer ID,
which is the MAC address,

00:14:59.310 --> 00:15:03.740
and that's kind of the unique flag that
you're tracking all of your fields with,

00:15:03.780 --> 00:15:10.390
and the value from the system
information table where the property name

00:15:10.920 --> 00:15:13.910
is equal to,
and then this is a real basic thing,

00:15:13.910 --> 00:15:20.070
percent one will be passed to your
database query by that last pop-up menu.

00:15:21.430 --> 00:15:24.680
Finally,
I want to bind the list box and say any

00:15:24.680 --> 00:15:29.800
results that come from that database
query are going to go in there.

00:15:29.800 --> 00:15:32.240
So let me just double check and
make sure all that stuff is there.

00:15:32.410 --> 00:15:33.290
We run it.

00:15:33.650 --> 00:15:36.600
Should have a unique list of all
of the things that ARD tracks.

00:15:37.050 --> 00:15:41.580
Kernel version.

00:15:41.580 --> 00:15:41.580
There we go.

00:15:44.120 --> 00:15:47.790
So you've got tremendous
power under the hood,

00:15:47.850 --> 00:15:51.760
but you can expose this now to end users.

00:15:51.760 --> 00:15:55.640
This application will compile
and run on multiple platforms.

00:15:55.700 --> 00:17:12.900
[Transcript missing]

00:17:13.150 --> 00:17:17.500
An XML text file in RSS format,
and so you can generate your

00:17:17.580 --> 00:17:19.700
own reports very easily.

00:17:19.700 --> 00:17:23.430
This is just Safari RSS loading a
file that's on the local hard drive,

00:17:23.550 --> 00:17:26.300
which you'd be able to sort by date,
by time.

00:17:26.350 --> 00:17:30.570
The article length slider here will allow
you just to show the most recent value.

00:17:30.820 --> 00:17:33.470
And again,
this is something you can use to

00:17:33.530 --> 00:17:37.810
publish this data to other folks
in your organization that perhaps

00:17:37.810 --> 00:17:41.960
aren't running Apple Remote Desktop or
maybe even not using Macs.

00:17:41.960 --> 00:17:41.960
Thanks.

00:17:50.620 --> 00:17:51.700
Good use of Zoom there, Tony.

00:17:51.700 --> 00:17:52.120
Looked good.

00:17:52.120 --> 00:17:56.680
All right, so real quick,
what did we learn?

00:17:56.680 --> 00:17:59.660
So the point is that ARD is extensible.

00:17:59.660 --> 00:18:00.740
You can actually sit down.

00:18:00.740 --> 00:18:03.620
If we don't do that task for you
right now via the user interface,

00:18:03.620 --> 00:18:05.700
there's probably a way that you're going
to figure out to actually go do it.

00:18:05.750 --> 00:18:09.600
We're designing ARD and future versions
of ARD with portability in mind.

00:18:09.600 --> 00:18:12.080
We know that there's a huge amount
of mobile computers out there.

00:18:12.080 --> 00:18:13.010
We'll continue to support that.

00:18:13.060 --> 00:18:15.720
And our open database infrastructure,
it's great.

00:18:15.720 --> 00:18:16.220
It's SQL.

00:18:16.220 --> 00:18:17.110
You can go and use it.

00:18:17.120 --> 00:18:18.840
You can do the applications
Tony demonstrated.

00:18:19.310 --> 00:18:20.490
You can pick whatever tool you want.

00:18:20.500 --> 00:18:21.890
But let's keep going.

00:18:21.900 --> 00:18:23.400
I'm going to bring Todd Daly up here.

00:18:23.400 --> 00:18:25.520
We're actually going to go under
the hood a little bit deeper.

00:18:25.520 --> 00:18:26.640
Todd?

00:18:26.640 --> 00:18:28.780
Todd's one of our system engineers.

00:18:28.780 --> 00:18:30.110
Todd?

00:18:37.160 --> 00:18:40.560
Okay, so we've looked through a couple of
things with Apple Remote Desktop now,

00:18:40.560 --> 00:18:44.530
and now we're going to go a little bit
deeper into more details on how we can

00:18:44.600 --> 00:18:46.480
operate things from the command line.

00:18:46.480 --> 00:18:49.990
So I'm hoping to speak to two groups
of people here that I think are

00:18:49.990 --> 00:18:51.270
going to be interested in this.

00:18:51.280 --> 00:18:54.520
First of all, if you're interested in the
Apple Remote Desktop part of the

00:18:54.520 --> 00:18:57.310
presentation and you're thinking about,
you know,

00:18:57.320 --> 00:18:58.940
how could I do a little more here?

00:18:58.940 --> 00:19:00.840
How could I learn a little
more about what I can do

00:19:00.840 --> 00:19:02.020
with that send Unix command?

00:19:02.020 --> 00:19:05.180
Then hopefully this will get
you started with scripting.

00:19:05.940 --> 00:19:07.860
If you're already an
experienced scripter,

00:19:07.860 --> 00:19:10.080
then hopefully we'll show you a
couple ideas here about how you

00:19:10.180 --> 00:19:13.220
can use some of the tools that are
included with OS X Server that are

00:19:13.480 --> 00:19:17.150
unique to OS X and OS X Server to
do what you're already doing.

00:19:19.510 --> 00:19:23.940
So we're going to go through the
process of writing some scripts.

00:19:23.940 --> 00:19:27.180
When to use a script is actually
a pretty simple decision process.

00:19:27.180 --> 00:19:31.040
So the main thing that scripts do
is they automate repetitive tasks.

00:19:31.040 --> 00:19:33.740
The script is going to run
the same way every time,

00:19:33.740 --> 00:19:34.660
all the time.

00:19:34.660 --> 00:19:36.700
No matter what you do,
it's going to run the same way.

00:19:36.910 --> 00:19:39.920
Maybe something changes on the back
end but that's probably what we

00:19:39.920 --> 00:19:42.000
want to monitor with the script.

00:19:42.010 --> 00:19:45.350
The second thing a script does
is it outputs data consistently.

00:19:45.460 --> 00:19:48.480
So if you're going to
build an Excel spreadsheet,

00:19:48.530 --> 00:19:52.140
if you're going to feed
this into a SQL database,

00:19:52.170 --> 00:19:55.210
you want a common comma
separated value format,

00:19:55.210 --> 00:19:58.480
a common text format,
a common XML format that this can spit

00:19:58.480 --> 00:20:03.280
out so that you can then import that
as Tony was showing into Safari RSS so

00:20:03.280 --> 00:20:05.440
that you can do things like that.

00:20:05.440 --> 00:20:08.380
And the third thing that a script does
that's probably most important to those

00:20:08.380 --> 00:20:12.270
of you that are system administrators is
that a script runs when you aren't there.

00:20:12.440 --> 00:20:15.310
So when the system dies
at 2:00 in the morning,

00:20:15.310 --> 00:20:16.820
a script can run and send you a message.

00:20:16.820 --> 00:20:19.070
So you can see the
information about that.

00:20:19.160 --> 00:20:23.020
When a RAID, as we'll show you, degrades,
when part of a mirror degrades and

00:20:23.020 --> 00:20:26.350
you've got half of the system broken,
a script can run and show you that

00:20:26.640 --> 00:20:29.800
that system's broken rather than
having the CIO call you and go,

00:20:29.800 --> 00:20:31.050
why is the system down?

00:20:31.060 --> 00:20:34.240
You knew long ago that part of the
mirror was broken and maybe you

00:20:34.240 --> 00:20:36.400
made that decision at 2:00 a.m.

00:20:36.420 --> 00:20:38.200
to drive in and replace the drive.

00:20:38.200 --> 00:20:40.240
Maybe you didn't but it's your choice.

00:20:40.240 --> 00:20:44.710
You're empowered now by the information
that we're gathering and collecting.

00:20:45.710 --> 00:20:49.420
So scripting is great in OS X Server.

00:20:49.420 --> 00:20:52.160
You've got a really
wide range of choices,

00:20:52.160 --> 00:20:53.760
and if you're familiar
with the Windows world,

00:20:53.760 --> 00:20:56.180
or if you're familiar
with the Linux world,

00:20:56.180 --> 00:20:59.660
we've really got a great set of
tools for you in OS X Server because

00:20:59.750 --> 00:21:01.560
of everything that's built in.

00:21:01.560 --> 00:21:05.620
You've got a guaranteed baseline
in OS X Server that includes things

00:21:05.900 --> 00:21:09.120
like Python and things like Perl,
a whole wide variety of scripts,

00:21:09.120 --> 00:21:12.820
and even some newer languages
like Ruby are all built in,

00:21:12.920 --> 00:21:16.620
and what that means is that when you're
deploying something onto a Tiger server,

00:21:16.620 --> 00:21:19.480
you can count on a minimum
version being there,

00:21:19.480 --> 00:21:21.420
and it gives you a lot of power.

00:21:21.430 --> 00:21:25.080
When you're deploying a Linux system,
when you're deploying a Windows system,

00:21:25.080 --> 00:21:27.990
you don't have the same guarantee
of a consistent base system

00:21:28.100 --> 00:21:31.540
being there because of all
the different Linux distros,

00:21:31.570 --> 00:21:34.040
because on the Windows side,
you have to install

00:21:34.040 --> 00:21:36.190
something like SIGWIN,
or you have to install

00:21:36.380 --> 00:21:38.430
Perl from ActiveState,
you have to install

00:21:38.430 --> 00:21:40.120
Windows Scripting Host.

00:21:40.120 --> 00:21:42.880
You don't have the same
consistent environment.

00:21:42.920 --> 00:21:44.260
So there's a lot of
choices that you have,

00:21:44.260 --> 00:21:46.660
including Apple Script,
including Automator.

00:21:46.670 --> 00:21:49.480
I think the best choice is
actually pretty obvious.

00:21:49.510 --> 00:21:52.250
The best choice is
whatever you already know.

00:21:52.420 --> 00:21:55.020
If you already know Perl,
if you already know Shell Scripting,

00:21:55.020 --> 00:21:57.560
if you already know Python,
if you already know anything,

00:21:57.560 --> 00:22:00.310
it's probably best to
stick with what you know.

00:22:00.350 --> 00:22:03.650
If you're new to this and
you're just trying to learn,

00:22:03.660 --> 00:22:07.680
get into writing your own scripts,
doing your own tools, I think Python is a

00:22:07.680 --> 00:22:09.460
fantastic starter language.

00:22:09.540 --> 00:22:13.540
O'Reilly over in their booth has
some great books to get you started.

00:22:13.540 --> 00:22:18.260
The nice thing about Python that you'll
come to hate later about it is that

00:22:18.260 --> 00:22:20.260
it enforces a consistent structure.

00:22:20.330 --> 00:22:21.530
It's white space sensitive.

00:22:21.540 --> 00:22:22.670
You have to indent things.

00:22:22.800 --> 00:22:25.200
It's self-documenting,
easy to read later,

00:22:25.200 --> 00:22:27.600
which can't be said of tools like Perl.

00:22:27.600 --> 00:22:32.780
So Python is a great tool to start with
because it enforces good habits on you.

00:22:32.780 --> 00:22:35.340
As you get better and you
want to use bad habits,

00:22:35.340 --> 00:22:38.770
you'll come to hate it and
you'll learn something else.

00:22:41.260 --> 00:22:49.590
Okay, so we're going to start out
with a very small shell script.

00:22:49.700 --> 00:22:53.340
And so this is great because what
the very small shell script is

00:22:53.460 --> 00:22:57.210
going to replace is someone being
there at 2 in the morning when

00:22:57.290 --> 00:23:01.200
one half of the RAID fails and
you've got to change something.

00:23:01.210 --> 00:23:07.680
So the problem is that software RAID 1
is commonly used on XSERVs and it is

00:23:07.680 --> 00:23:10.200
enabled for it to be monitored on XSERVs.

00:23:10.200 --> 00:23:13.360
So when half of a RAID fails,
you may be able to notice,

00:23:13.420 --> 00:23:18.260
those of you on this side over here,
the actual broken RAID,

00:23:18.260 --> 00:23:21.200
which you can tell is broken because we
actually physically popped the drive out.

00:23:21.200 --> 00:23:24.020
You can see we've got an alert
light blinking over here.

00:23:24.420 --> 00:23:28.520
And if we were running Server Monitor,
we'd actually see the

00:23:28.520 --> 00:23:30.880
identifier light on there.

00:23:31.360 --> 00:23:34.000
And we'd actually see that there
was an amber light and we'd

00:23:34.130 --> 00:23:37.200
actually get notified that there
was a problem on the server.

00:23:37.200 --> 00:23:40.340
What we want to enhance on that
is that within Server Monitor,

00:23:40.360 --> 00:23:42.180
you can send out generic alerts.

00:23:42.200 --> 00:23:47.170
So you can send out an alert that says,
"There's a problem on Server 4."

00:23:47.250 --> 00:23:50.310
What we can't do within Server Monitor,
although it's a great tool and

00:23:50.530 --> 00:23:53.310
there's great monitoring built in,
is that we can't send a

00:23:53.310 --> 00:23:56.420
specific alert that says,
"There's a problem on Server 4 and

00:23:56.420 --> 00:24:01.100
the problem is that one side of
the RAID mirror is broken." So,

00:24:01.190 --> 00:24:01.200
we've got to do that.

00:24:01.200 --> 00:24:04.150
So, what we're going to do is add a
little bit more detail so that

00:24:04.150 --> 00:24:07.200
when you get that page in the
middle of the night to your phone,

00:24:07.200 --> 00:24:09.190
you emailed your phone
through Server Monitor,

00:24:09.200 --> 00:24:13.200
instead we're going to email it through
this shell script and it's going to say,

00:24:13.250 --> 00:24:16.700
"Hey, one half of this mirror is down."
So that way you don't have to get up,

00:24:16.700 --> 00:24:18.900
you don't have to VPN in,
you don't have to look at the

00:24:18.900 --> 00:24:20.200
server to what's going on.

00:24:20.200 --> 00:24:22.350
You can take a bleary look
at your cell phone and go,

00:24:22.350 --> 00:24:25.190
"Well, half the RAID is down,
the system's still up and going.

00:24:25.410 --> 00:24:27.500
I'm okay."

00:24:29.400 --> 00:24:32.280
So, what we're going to do,
and I'll show you this

00:24:32.280 --> 00:24:34.650
in the demo as well,
is we're going to wrap around

00:24:34.750 --> 00:24:36.300
some command line output.

00:24:36.300 --> 00:24:40.140
So there's a tool with an OS X server,
DiskUtil Check RAID,

00:24:40.180 --> 00:24:44.170
that puts out some text here that
tells us what's going on on the RAID.

00:24:44.300 --> 00:24:47.890
So, this is actually a ripe area
for writing a script to,

00:24:47.890 --> 00:24:52.300
and the reason for that is that
the text output here is consistent.

00:24:52.300 --> 00:24:55.300
So, when we look at this through
the eyes of the scripter,

00:24:55.300 --> 00:25:02.490
what we're looking for is the places
in which we can grab some text and

00:25:02.490 --> 00:25:04.300
look at it and see what's wrong.

00:25:04.390 --> 00:25:07.080
So, as you can see on here,
we can see on the script that

00:25:07.180 --> 00:25:10.110
there's two areas here where
it says the system is okay.

00:25:10.300 --> 00:25:14.170
So, if we were going to write a script
to see if anything was wrong,

00:25:14.170 --> 00:25:17.280
we'd probably want to look at those
two fields and see if they've changed.

00:25:17.300 --> 00:25:21.330
And so, that's exactly what we're
going to do with our script.

00:25:22.110 --> 00:25:24.620
So the script,
while this looks intimidating,

00:25:24.810 --> 00:25:26.760
is actually very simple.

00:25:26.840 --> 00:25:29.620
All we're going to do is we're
going to look at those OK fields,

00:25:29.620 --> 00:25:34.050
so we're going to strip all of the text
out except for those fields that say OK.

00:25:34.230 --> 00:25:38.000
We're going to take a look at them and
see if they say anything other than OK.

00:25:38.340 --> 00:25:42.500
And if they say anything other than OK,
we're going to kick off an email to

00:25:42.500 --> 00:25:46.980
the system administrator's cell phone,
and you're going to get it,

00:25:46.980 --> 00:25:50.990
and you're going to see
that something is wrong.

00:25:51.080 --> 00:25:55.270
Okay, so let's go through that in a
demo here on Demo Station 1.

00:25:58.740 --> 00:26:04.770
Okay, so let me go ahead and
show you the script again.

00:26:06.700 --> 00:26:34.600
[Transcript missing]

00:26:37.130 --> 00:26:40.790
Okay, so let me build this up for you.

00:26:40.790 --> 00:26:44.010
So here's Disk Util Check Raid.

00:26:44.900 --> 00:26:47.440
And what we're going to do now
is we're going to send this

00:26:47.730 --> 00:26:50.060
through a tool called grep.

00:26:50.140 --> 00:26:54.630
What this grep line does is it grabs
any lines that begin with 0 or 1.

00:26:54.640 --> 00:27:02.200
Assuming that we have a mirror,
online drives within the mirror are

00:27:02.200 --> 00:27:02.200
going to start with the 0 or the 1,
drive 0 or drive 1.

00:27:03.890 --> 00:27:07.430
And so what you see here is that unlike
the output that there was before,

00:27:07.430 --> 00:27:10.400
we've now grabbed just the
line here that starts with one.

00:27:10.480 --> 00:27:14.120
So that's the only output
that we're grabbing with this.

00:27:14.230 --> 00:27:18.130
And then the final step I'm going
to show you for the demo here,

00:27:19.080 --> 00:27:24.360
is that we pipe this through awk,
which grabs the third text

00:27:24.360 --> 00:27:27.140
field and just outputs that.

00:27:27.180 --> 00:27:33.790
So now we've done all the hard work
that we need to do to write this script.

00:27:33.790 --> 00:27:38.770
We've taken the output of the
Disk Util Check Raid tool,

00:27:38.810 --> 00:27:39.990
and we've taken that down to just the
line that says-- that we want to compare

00:27:39.990 --> 00:27:39.990
to and see if that is okay or not.

00:27:40.370 --> 00:27:42.530
And so when we go back
to the script here,

00:27:42.580 --> 00:27:44.990
you can hopefully follow the logic here.

00:27:45.000 --> 00:27:48.190
If that third text field
says anything other than OK,

00:27:48.190 --> 00:27:51.290
then we're going to email
that information out.

00:27:51.390 --> 00:27:58.930
So let's just run that real quick.

00:27:58.930 --> 00:28:00.070
Somewhere here.

00:28:00.070 --> 00:28:00.070
Could have typed it by now.

00:28:07.200 --> 00:28:09.100
And you see the output here.

00:28:09.100 --> 00:28:13.270
We're now just outputting that the
RAID has the status of missing damage.

00:28:13.270 --> 00:28:16.500
And again, we get emailed in
production here on this.

00:28:16.640 --> 00:28:17.450
And so that's it.

00:28:17.510 --> 00:28:20.000
That's the very small shell
script that runs this.

00:28:20.190 --> 00:28:22.900
Normally you'd run this as a
cron job every two hours or so,

00:28:22.900 --> 00:28:26.340
and so if anything ever did go wrong,
you'd get emailed with a direct alert.

00:28:26.620 --> 00:28:30.070
So that's a very small,
very simple example for demonstration

00:28:30.080 --> 00:28:33.620
purposes of how you can go beyond
what Server Monitor reports

00:28:33.670 --> 00:28:36.620
and start customizing your
environment to your needs.

00:28:36.900 --> 00:28:39.410
So let's go back to the slides.

00:28:42.220 --> 00:28:45.560
So let's look through a little
more sophisticated problem now.

00:28:45.560 --> 00:28:50.230
And so the problem that we're going to go
to solve now is that Server Monitor gives

00:28:50.230 --> 00:28:52.340
us a ton of information.

00:28:52.340 --> 00:28:54.100
It's a really great tool.

00:28:54.100 --> 00:28:56.360
It's great that it's
free with OS X Server.

00:28:56.360 --> 00:28:59.830
It's great that you can go to any
X Serve and you can pull a ton of

00:28:59.930 --> 00:29:03.640
data off of it from what kind of
RAM chips you have in there and what

00:29:03.640 --> 00:29:08.110
slots they're in to what the voltage
levels are over time on the system to

00:29:08.110 --> 00:29:12.840
the example that we're showing here,
which is what are the CPU temperatures.

00:29:12.840 --> 00:29:17.150
The X Serve G4 has two,
and the X Serve G5 has 11 temperature

00:29:17.170 --> 00:29:20.040
systems built within the system
that you can actually go in through

00:29:20.040 --> 00:29:21.420
Server Monitor and you can see.

00:29:21.420 --> 00:29:27.160
The issue here is that there's no
way to take that data and trend it

00:29:27.160 --> 00:29:30.840
over time other than the graphing
that's within Server Monitor itself.

00:29:30.840 --> 00:29:34.460
So if you have a large cluster,
if you have a whole bunch of systems,

00:29:34.460 --> 00:29:37.340
if maybe you're having some overheating
problems in your department,

00:29:37.340 --> 00:29:41.580
you might want to graph the
temperature of these systems over time.

00:29:41.580 --> 00:29:44.790
And so what we're going to write is we're
going to write a small Python script that

00:29:44.790 --> 00:29:48.580
will wrap around the Server Admin tool,
which is another command line tool

00:29:48.580 --> 00:29:50.500
that you have within OS X Server.

00:29:50.580 --> 00:29:52.580
And we're going to take that data,
we're going to parse it out,

00:29:52.580 --> 00:29:56.690
we're going to display it on the screen,
and we're going to also write it to

00:29:56.690 --> 00:30:00.580
a comma-separated text file so that
then you can load that into Excel,

00:30:00.580 --> 00:30:03.580
you could load it into
a real basic script,

00:30:03.580 --> 00:30:06.570
you can load it into Nagios that
we're going to show you next.

00:30:06.580 --> 00:30:09.520
You can do a lot with that data
because we've now got a lot of data

00:30:09.520 --> 00:30:10.520
that we can show you right now.

00:30:10.520 --> 00:30:13.510
Rather than show it on the screen,
we're going to actually

00:30:13.540 --> 00:30:15.600
write it out to a text file.

00:30:17.520 --> 00:30:19.500
So how do we get data with server admin?

00:30:19.730 --> 00:30:24.620
So server admin is a command line
tool that lets you see everything

00:30:24.620 --> 00:30:26.870
that's going on with the system.

00:30:26.970 --> 00:30:30.210
And I'll show you a demonstration of
this command line in just a second.

00:30:30.410 --> 00:30:33.820
But it spits out about 500 lines of
text that's all the data that you

00:30:33.870 --> 00:30:36.300
see in Server Monitor in text form.

00:30:36.300 --> 00:30:38.470
One thing we added in Tiger,
which is great too,

00:30:38.470 --> 00:30:42.430
is that we added a dash X switch,
which outputs in XML.

00:30:42.530 --> 00:30:45.520
So as Tony was showing you,
there's a lot of stuff like

00:30:45.630 --> 00:30:50.280
Safari RSS and a lot of scripting tools,
a lot of programming tools

00:30:50.280 --> 00:30:51.770
that understand XML natively.

00:30:51.870 --> 00:30:54.530
A little bit easier to work with
than just parsing the raw text

00:30:54.610 --> 00:30:56.250
like what we're going to do today.

00:30:56.340 --> 00:31:02.130
And so let's go ahead
and go into that script.

00:31:04.630 --> 00:31:06.330
Thank you.

00:31:07.030 --> 00:31:07.600
Okay.

00:31:08.110 --> 00:31:13.550
So let me show you the script first,
and then we'll step through and

00:31:13.550 --> 00:31:13.550
show you exactly what goes on here.

00:31:15.140 --> 00:31:17.570
So what we've got here
is a Python script.

00:31:17.790 --> 00:31:21.540
As you can see, Python is a very
well-structured language.

00:31:21.540 --> 00:31:23.420
It's very easy to follow what's going on.

00:31:23.420 --> 00:31:27.740
If you've done any programming at all,
basically we've got a somewhat

00:31:27.740 --> 00:31:31.140
more sophisticated script than
what we were showing you before.

00:31:31.140 --> 00:31:34.350
But the core of what it's doing
is actually pretty simple.

00:31:34.420 --> 00:31:38.480
The core line that we're
concerned about here is this one,

00:31:38.480 --> 00:31:42.240
in which we're running this
command and capturing the output.

00:31:42.460 --> 00:31:44.080
And then we're processing
that in the script.

00:31:44.200 --> 00:31:46.760
That's basically all
this script is doing.

00:31:46.790 --> 00:31:49.300
So let's go ahead and
take a look at that.

00:31:55.770 --> 00:31:58.410
So here, we're going to actually run
that command that I just showed

00:31:58.410 --> 00:31:59.860
you that the script is running.

00:31:59.860 --> 00:32:08.080
And what you can see here is this is just
a whole bunch of text about your system.

00:32:08.130 --> 00:32:11.800
And this exactly corresponds to the
data that you see in Server Monitor.

00:32:12.020 --> 00:32:14.670
Just Server Monitor has
it pretty with graphs,

00:32:14.700 --> 00:32:16.660
with lights, with green lights,
with red lights.

00:32:16.680 --> 00:32:18.780
But it's actually the exact same data.

00:32:18.870 --> 00:32:21.700
You can sit and compare this with
the data in Server Monitor and

00:32:21.700 --> 00:32:23.580
you'll see it's exactly the same.

00:32:23.620 --> 00:32:26.910
So what you'll see
here is some data here.

00:32:26.920 --> 00:32:33.040
Just for example,
we've got the fan RPM on the system.

00:32:33.100 --> 00:32:35.030
We've got information about the RAID.

00:32:35.040 --> 00:32:38.370
We've got information about the
actual drives and what kind they are.

00:32:38.600 --> 00:32:40.140
Ton of information that's in here.

00:32:40.350 --> 00:32:43.280
So what we're going to do
is extract some data out.

00:32:43.300 --> 00:32:47.560
And before I do that,
let me show you too the XML output,

00:32:47.620 --> 00:32:49.390
just so you know.

00:32:49.770 --> 00:32:51.590
And so, same data done in XML.

00:32:51.590 --> 00:32:55.340
Again, if you know XML,
if you have a tool that understands it,

00:32:55.370 --> 00:32:57.500
you can go in through this as well.

00:32:59.580 --> 00:33:06.020
Okay, so let's go back to the script.

00:33:06.020 --> 00:33:06.020
So this is the data we're collecting.

00:33:07.200 --> 00:33:11.360
And so we're going to basically
load all of this data into an array,

00:33:11.470 --> 00:33:13.690
which is what we're doing here.

00:33:15.240 --> 00:33:18.630
And for each value,
we're going to assign it.

00:33:18.740 --> 00:33:24.140
So these are the 11 temperature
sensors that are on a XServe G5.

00:33:24.270 --> 00:33:27.060
We're going to assign
all these to a variable.

00:33:28.780 --> 00:33:33.940
We're going to display those
variables that we assigned.

00:33:35.660 --> 00:33:39.030
And then the last section here,
we're going to log those values

00:33:39.030 --> 00:33:43.240
to a comma-separated value
file var log xservtemp.log.

00:33:43.290 --> 00:33:45.840
And so that's what we're
doing within the script.

00:33:46.040 --> 00:33:53.980
Again, we're just grabbing data that's
provided by the command line tool,

00:33:53.980 --> 00:33:55.180
and we're just going to write that
out into a comma-separated value

00:33:55.180 --> 00:33:55.180
file and give you a way to view that.

00:34:04.480 --> 00:34:07.540
And so we just ran the script,
and as you can see, there's the output.

00:34:07.540 --> 00:34:11.450
So that's the actual temperature of
the system as it's running right now.

00:34:11.550 --> 00:34:15.900
And we also at the same time
wrote a log entry for that.

00:34:15.990 --> 00:34:20.060
Normally you'd set this up as a time job,
a cron job, run it every hour,

00:34:20.060 --> 00:34:23.100
every 15 minutes, every 10 minutes,
whatever you wanted to do.

00:34:23.320 --> 00:34:26.230
And then you could go back and check
that comma separated value file

00:34:26.230 --> 00:34:29.550
at any time and find out exactly
what was going on in the system.

00:34:29.810 --> 00:34:31.660
And again,
any of the data that's in there,

00:34:31.660 --> 00:34:34.920
not just the temperature data,
but there's data about the memory,

00:34:34.990 --> 00:34:38.120
there's data about the
status of the system,

00:34:38.120 --> 00:34:42.490
you can go in and check that at any time
and be able to monitor basically anything

00:34:42.510 --> 00:34:47.310
that server admins reports with this
general framework of this Python script.

00:34:47.400 --> 00:34:52.590
So let's go back to the slides.

00:34:54.920 --> 00:34:56.800
So what did we learn in this section?

00:34:56.890 --> 00:34:59.730
What we learned is that scripts
are a really powerful extension.

00:34:59.740 --> 00:35:02.140
You can do a Send UNIX script,
which does some of the

00:35:02.160 --> 00:35:04.090
tricks that we do here.

00:35:04.170 --> 00:35:07.440
But you can write your own scripts, too,
that can collect information off the

00:35:07.440 --> 00:35:09.520
system and put them wherever you want.

00:35:09.640 --> 00:35:11.500
You can put those into a MySQL database.

00:35:11.600 --> 00:35:14.280
You can put those into
the ARD Postgres database.

00:35:14.450 --> 00:35:16.620
The sky's the limit onto
what you want to do.

00:35:16.640 --> 00:35:20.100
And so if you manage a bunch of servers,
or even if you only manage a few,

00:35:20.100 --> 00:35:24.960
and you need to run reports,
you need to get data off of the system.

00:35:25.020 --> 00:35:28.200
Using a script is a great way to
save you from having a 10 page

00:35:28.350 --> 00:35:31.770
process that you have to run through
every quarter to get a quarterly

00:35:31.770 --> 00:35:33.960
report together for your manager.

00:35:33.990 --> 00:35:36.050
There's many tools available.

00:35:36.170 --> 00:35:39.070
New to Airport is an Airport command
line tool that collects

00:35:39.230 --> 00:35:40.320
data off the client side.

00:35:40.420 --> 00:35:43.040
So you can see what, for example,
your students are connecting

00:35:43.040 --> 00:35:45.620
to in terms of access points,
things like that.

00:35:45.760 --> 00:35:47.370
Server Admin, we showed you.

00:35:47.460 --> 00:35:50.680
System Profiler is a great
tool on the client as well.

00:35:50.760 --> 00:35:53.880
It shows you all of the information
about the client and how it's configured,

00:35:53.920 --> 00:35:57.380
what the hardware is,
what the software is, everything.

00:35:57.730 --> 00:36:03.360
And you can write scripts that can make
your life easier by automating tasks.

00:36:03.580 --> 00:36:06.430
So that's it on the scripting session.

00:36:06.520 --> 00:36:08.490
Now we're going to get a little geekier.

00:36:08.520 --> 00:36:10.820
In fact,
Nader wanted me to have a beard and

00:36:10.820 --> 00:36:16.360
wig that I could put on right now
and show myself as a true Unix geek.

00:36:16.440 --> 00:36:19.560
But what we're going to do now is
we're going to take that same concept,

00:36:19.670 --> 00:36:23.580
and we're going to integrate
Mac OS X into an open source

00:36:23.580 --> 00:36:25.440
network management system.

00:36:25.440 --> 00:36:29.000
And we're going to do that using an open
source management system called Nagios,

00:36:29.000 --> 00:36:33.610
which is really easy to set up compared
to any other network management system.

00:36:33.700 --> 00:36:37.480
And so we're going to integrate into that
and show you how we can do the exact same

00:36:37.480 --> 00:36:43.190
thing we just showed you with the small
shell script inside of Nagios itself.

00:36:43.270 --> 00:36:45.600
So that same RAID monitoring
that we were doing,

00:36:45.600 --> 00:36:49.540
we're going to do now within the
context of a network management system.

00:36:53.580 --> 00:36:56.400
Okay,
so there's a lot of monitoring solutions

00:36:56.400 --> 00:36:58.200
that you potentially have out there.

00:36:58.200 --> 00:37:01.340
There's open source systems,
and there's commercial systems.

00:37:01.390 --> 00:37:04.330
On the open source side,
a lot of people use very

00:37:04.380 --> 00:37:07.720
simple tools like MRTG,
which is a simple graphing tool

00:37:07.720 --> 00:37:09.780
that generates pretty pictures.

00:37:09.780 --> 00:37:11.720
A lot of people use Nagios.

00:37:11.720 --> 00:37:13.820
A lot of people use HP OpenView.

00:37:13.820 --> 00:37:16.930
A lot of people use Tivoli, CA Unicenter.

00:37:16.940 --> 00:37:20.540
Microsoft Mom is out there as well.

00:37:20.880 --> 00:37:23.840
There's a lot of tools that are out there
that people use to monitor their system.

00:37:23.840 --> 00:37:26.680
So you have a lot of choices,
and you have a lot of client

00:37:26.680 --> 00:37:30.120
options on many platforms,
including OS X.

00:37:30.120 --> 00:37:34.450
And you have open source standards-based
solution like SNMP that can

00:37:34.640 --> 00:37:38.040
report back into something like
HP OpenView or something like Tivoli.

00:37:38.040 --> 00:37:41.010
On the servers,
you have many choices as well on

00:37:41.100 --> 00:37:45.140
platforms to run the server management,
including OS X,

00:37:45.190 --> 00:37:48.440
like we're going to show you today
with Nagios running on OS X server.

00:37:48.440 --> 00:37:50.680
But Nagios is what we're showing.

00:37:50.810 --> 00:37:52.880
But you have a lot of options.

00:37:53.200 --> 00:37:56.520
There's a lot of ways in
which you can do this.

00:37:56.670 --> 00:38:00.690
We're going to show you one
way to do it that works for us.

00:38:02.110 --> 00:38:03.600
So, what is Nagios?

00:38:03.600 --> 00:38:06.810
So, Nagios is an open source
management framework.

00:38:07.030 --> 00:38:09.000
It's free.

00:38:09.000 --> 00:38:11.810
It's widely deployed within education,
within business,

00:38:11.810 --> 00:38:14.940
within corporate enterprises,
within very large deployments.

00:38:15.000 --> 00:38:17.660
It's got a fully
web-based infrastructure,

00:38:17.660 --> 00:38:21.090
so you don't have a separate
sort of application that's the

00:38:21.210 --> 00:38:22.980
network management console.

00:38:23.000 --> 00:38:25.000
The network management
console is the web browser,

00:38:25.000 --> 00:38:27.000
and you pull everything up through there.

00:38:27.000 --> 00:38:31.820
It's got a great plugin architecture,
both for monitoring and for notification,

00:38:32.020 --> 00:38:35.920
meaning that it's very easy to take
any device that you have and plug

00:38:35.920 --> 00:38:38.000
it in to be monitored by Nagios.

00:38:38.000 --> 00:38:41.980
And also, if you have something new
that you want to be notified,

00:38:42.120 --> 00:38:47.000
if you want to notify your Palm handheld
or whatever new gadget is on the market,

00:38:47.000 --> 00:38:50.000
your Sidekick, your LifeDrive,
your whatever,

00:38:50.150 --> 00:38:52.950
there's a way to do that within
the notification plugin framework.

00:38:53.040 --> 00:38:54.920
One very important aspect of Nagios
that you get for free is that you

00:38:54.920 --> 00:38:56.000
can get a free version of the app.

00:38:56.000 --> 00:38:58.590
One of the things that you get
for free that you pay a lot for

00:38:58.590 --> 00:39:01.950
for something like Ativoli is that
it's got hierarchical monitoring.

00:39:02.000 --> 00:39:04.810
And so,
what that means is that you can set

00:39:04.810 --> 00:39:09.850
up the alarms in such a way that the
system knows that if the router is down,

00:39:09.970 --> 00:39:14.000
that the servers behind it are also down,
and it doesn't need to tell you that.

00:39:14.000 --> 00:39:16.850
And so, if you have a lot of servers,
this is very important,

00:39:16.850 --> 00:39:20.000
because if you have 500 servers
that are behind a router,

00:39:20.000 --> 00:39:22.880
and a router is down,
and you don't have some way to do

00:39:22.880 --> 00:39:27.000
the monitoring and a hierarchy,
you're going to get 501 pages,

00:39:27.220 --> 00:39:29.000
which is bad.

00:39:29.000 --> 00:39:31.050
So,
what you really want to do is you want

00:39:31.050 --> 00:39:33.990
the system to be smart enough to go,
"Well, if the router goes down,

00:39:33.990 --> 00:39:37.100
all the servers are behind that,
so just tell me the router's down,

00:39:37.100 --> 00:39:39.860
and I'm going to know that
something really bad is going on,

00:39:40.000 --> 00:39:42.390
and I'm going to go check
out the router." And so,

00:39:42.390 --> 00:39:44.000
you can do that with the Nagios.

00:39:44.000 --> 00:39:47.300
Again, that's something that you can do
for free with Nagios that usually

00:39:47.300 --> 00:39:48.940
you have to pay a lot of money for.

00:39:49.050 --> 00:39:51.090
That's really what Ativoli
made their name on,

00:39:51.090 --> 00:39:53.000
was the ability to do things like that.

00:39:53.000 --> 00:39:54.000
And other tools like Unicenter as well.

00:39:54.000 --> 00:39:58.160
And within the contact and
the notification system,

00:39:58.160 --> 00:40:01.000
you can do a lot within that, too.

00:40:01.000 --> 00:40:02.000
You can notify via email.

00:40:02.000 --> 00:40:04.000
You can notify via pager.

00:40:04.000 --> 00:40:08.320
You can notify via any way
that you want to set up,

00:40:08.380 --> 00:40:11.000
any gadget that you have.

00:40:14.200 --> 00:42:33.800
[Transcript missing]

00:42:35.670 --> 00:42:37.990
So let's show you how that works.

00:42:37.990 --> 00:42:40.780
So let's flip back to the demo system.

00:42:41.200 --> 00:42:48.470
So, what we've got here is a movie that's
going to show you exactly how it works.

00:42:48.480 --> 00:42:53.080
The demo system that we configured
and ran is back in Cupertino,

00:42:53.080 --> 00:42:56.490
so it was easier rather
than cart all that here,

00:42:56.490 --> 00:43:01.000
just to show you a quick movie
of how this would actually work.

00:43:01.020 --> 00:43:05.200
But before I go into that,
I'm going to show you the command

00:43:05.200 --> 00:43:06.500
script that we ran to do the monitoring,
and just show you how that lays out.

00:43:07.010 --> 00:43:11.250
So what you're gonna see here,
so here's the original RAID script,

00:43:11.310 --> 00:43:14.200
check script that I wrote,
and you can see here, again,

00:43:14.200 --> 00:43:17.780
there's some core logic here that
goes out and checks the system.

00:43:17.830 --> 00:43:22.520
And let's go into this script,
which is the Nagios monitoring script.

00:43:22.550 --> 00:43:24.880
This is a little bit bigger,
but actually all this stuff is

00:43:24.880 --> 00:43:28.960
just Nagios stuff that's the same
on every script that you run.

00:43:29.280 --> 00:43:33.910
What you can see here is that we're
actually almost exactly the same.

00:43:34.000 --> 00:43:38.400
This is the only stuff that we
added to enable the software

00:43:38.400 --> 00:43:40.250
RAID check for Nagios.

00:43:40.260 --> 00:43:42.750
So you can see this looks
almost exactly the same.

00:43:42.780 --> 00:43:46.500
We changed a couple lines to
change how it reports back.

00:43:46.500 --> 00:43:52.250
A Nagios thing here with exit status
saying that this is a critical problem.

00:43:52.310 --> 00:43:55.950
The output here saying that we're gonna
log this to Nagios instead of sending

00:43:56.000 --> 00:43:58.020
it to the pager like we did before.

00:43:58.040 --> 00:44:00.010
And that's really all
the changes that we made.

00:44:00.070 --> 00:44:02.290
And so we changed the script,
we set up the system

00:44:02.290 --> 00:44:04.940
to be monitored by it,
and I'll go ahead and

00:44:05.150 --> 00:44:06.620
show you how that looks.

00:44:06.620 --> 00:44:07.880
Thank you.

00:44:15.200 --> 00:44:18.680
So to start out with here,
we're at the Nagios main screen.

00:44:18.680 --> 00:44:21.430
This is the main network
management console that you'd

00:44:21.490 --> 00:44:23.240
see when you're running Nagios.

00:44:23.370 --> 00:44:26.840
And you can see here on the left side,
there's various options that you have.

00:44:26.840 --> 00:44:29.390
There's various reports and
screens that are pre-set up.

00:44:29.530 --> 00:44:30.520
This all comes with it.

00:44:30.630 --> 00:44:32.070
None of that needs to be set up.

00:44:32.070 --> 00:44:33.560
It's automatically built.

00:44:33.680 --> 00:44:38.900
And what you can see here is that we've
actually got an unhandled problem here.

00:44:40.970 --> 00:44:51.070
And so, we'll click through to
the unhandled problem,

00:44:51.070 --> 00:44:51.070
and what you see here is
that we've had an error.

00:44:51.070 --> 00:44:51.070
This is not really pausing.

00:44:54.640 --> 00:44:57.490
What you can see here is that
we've had an error when we were

00:44:57.490 --> 00:44:59.000
checking the software RAID.

00:44:59.100 --> 00:45:00.960
So the check software RAID failed.

00:45:00.960 --> 00:45:02.670
We've got a critical problem.

00:45:02.850 --> 00:45:10.150
You can see we've got the information
here that the Xlab XS04 server

00:45:10.150 --> 00:45:10.150
has a disk with status failed.

00:45:11.730 --> 00:45:14.570
And so we'll click through to that.

00:45:14.570 --> 00:45:18.200
And you can see here's a lot more
information about this specific alert.

00:45:18.400 --> 00:45:21.860
And Nagios also tracks a lot of
information about the specific

00:45:22.030 --> 00:45:23.520
host that we have as well.

00:45:23.740 --> 00:45:26.240
And so we're going to go ahead
and click through to that.

00:45:26.440 --> 00:45:32.910
And we can see the state of the host,
and we can see how things are running.

00:45:33.030 --> 00:45:36.430
And we'll go ahead and look at the
status of all the services that

00:45:36.430 --> 00:45:36.430
are running on the host as well.

00:45:36.590 --> 00:45:37.880
And so this is pretty cool, too.

00:45:37.880 --> 00:45:42.360
What we can see here is everything
that Nagios is currently monitoring.

00:45:42.360 --> 00:45:45.080
These are all the different agents
that are collecting data here.

00:45:45.080 --> 00:45:47.950
You can see there's data
here about the software RAID.

00:45:47.960 --> 00:45:51.150
There's also data about the load average,
so it's tracking statistics,

00:45:51.260 --> 00:45:53.580
whether NFS is running,
whether there's any errors,

00:45:53.600 --> 00:45:56.260
how much disk is in
use on the root volume.

00:45:56.260 --> 00:45:58.930
Some of these are off the shelf.

00:45:59.040 --> 00:46:00.820
Some of these are things
that we customize.

00:46:00.820 --> 00:46:03.200
But there's a lot of data you can
see here that we're collecting.

00:46:03.200 --> 00:46:05.820
And, again, this is a free network
management framework.

00:46:06.320 --> 00:46:07.420
This doesn't cost you anything.

00:46:07.420 --> 00:46:09.150
It's pretty easy to set up.

00:46:09.280 --> 00:46:15.730
There's a really good Mac OS X how-to
guide that we listed on the WWDC site.

00:46:15.740 --> 00:46:19.920
But if you just Google for
Nagios how-to Mac OS X,

00:46:19.920 --> 00:46:21.540
you'll find it on the Internet.

00:46:21.540 --> 00:46:23.920
It's on guysmac.com page.

00:46:26.460 --> 00:46:32.790
And so, let's go on here and show you,
go back to the main status page.

00:46:37.690 --> 00:46:40.150
And so you can see here we've
only got two systems in here,

00:46:40.230 --> 00:46:46.480
but Nagios does build you a standard
status map that you can see here.

00:46:46.530 --> 00:46:49.570
And we can very quickly go in if
we had a bunch of servers and see

00:46:49.610 --> 00:46:51.020
the status of all the servers.

00:46:51.270 --> 00:46:54.540
So there's a ton of data
that we collect in here,

00:46:54.540 --> 00:46:55.990
a ton of good information.

00:46:56.090 --> 00:46:58.830
And so to end up back on
the overview screen here,

00:46:59.040 --> 00:47:03.770
as you can see,
Nagios is great because it

00:47:03.830 --> 00:47:07.740
really does a good job of giving
you the pulse of your network,

00:47:07.740 --> 00:47:09.280
lets you see everything that's running.

00:47:09.280 --> 00:47:12.730
I love this tactical overview
screen because it gives you just

00:47:12.900 --> 00:47:16.280
a quick view of how your system's
running and how things are going.

00:47:16.280 --> 00:47:19.680
Again,
this is running actually on OS X Server,

00:47:19.700 --> 00:47:21.910
and it's monitoring OS X Server.

00:47:22.000 --> 00:47:24.120
You don't have to run
Nagios on OS X Server,

00:47:24.120 --> 00:47:25.610
although it runs very well there.

00:47:25.690 --> 00:47:28.400
And then from a client perspective,
you don't have to just

00:47:28.810 --> 00:47:30.970
monitor OS X Server clients,
XSERVs.

00:47:30.980 --> 00:47:32.770
You can monitor XSERV RAIDs.

00:47:32.780 --> 00:47:34.470
You can monitor Windows machines.

00:47:34.500 --> 00:47:35.900
You can monitor other Unixes.

00:47:35.950 --> 00:47:37.480
You can monitor other devices.

00:47:37.480 --> 00:47:41.630
It's actually very easy
to move things into it.

00:47:41.640 --> 00:47:44.670
So let's flip back to the slides.

00:47:49.210 --> 00:47:53.020
Other resources are on the WWDC site.

00:47:53.430 --> 00:47:58.100
With the sample scripts
that we showed you today,

00:47:58.100 --> 00:48:05.400
we didn't have time to get those
through the official submittal system,

00:48:05.490 --> 00:48:07.010
but Jason Anthony Guy,
who owns this track,

00:48:07.010 --> 00:48:07.010
guaranteed me that we'd get these up
on the developer side in some way,

00:48:07.010 --> 00:48:07.010
shape, or form.

00:48:07.930 --> 00:48:11.790
Because we're towards the end of WWDC,
we don't have a lot of related

00:48:11.790 --> 00:48:14.800
sessions to tell you about,
but there's one that if

00:48:14.800 --> 00:48:18.220
you're still here on Friday,
you really shouldn't miss,

00:48:18.230 --> 00:48:21.660
and that's Steve Heyman's
Building Automator Actions for

00:48:21.660 --> 00:48:23.660
System Administrator session.

00:48:23.660 --> 00:48:24.680
Steve rocks.

00:48:24.790 --> 00:48:27.430
He's a really entertaining presenter.

00:48:27.430 --> 00:48:31.680
Don't ask him to list the digits of pi,
but Steve is just a great guy,

00:48:31.680 --> 00:48:34.290
and it's a really interesting session.

00:48:34.320 --> 00:48:37.430
I think you'll learn a lot
of great stuff in there.