WEBVTT

00:00:00.750 --> 00:00:02.100
Good afternoon everybody.

00:00:02.100 --> 00:00:07.690
Would you please welcome Kerry Hazelgren,
Senior Apple Script Automator Engineer,

00:00:07.830 --> 00:00:10.390
who will be giving your talk today.

00:00:12.110 --> 00:00:13.730
Good afternoon.

00:00:13.830 --> 00:00:16.300
Welcome to the last session
before the beer bash.

00:00:16.300 --> 00:00:19.530
I hope we can get through this quickly,
right?

00:00:19.780 --> 00:00:23.100
Today we're going to talk about
writing Cocoa Automator Actions.

00:00:23.100 --> 00:00:25.740
As you see, my name's Kerry Hazelgren,
as mentioned.

00:00:25.740 --> 00:00:27.270
Let's have a quick show of hands.

00:00:27.270 --> 00:00:34.050
How many people have attempted to or
successfully written an Automator Action?

00:00:34.530 --> 00:00:36.600
All right, pretty good.

00:00:36.620 --> 00:00:40.570
And how many people knew that
the robot's name was Otto?

00:00:40.860 --> 00:00:41.800
Okay.

00:00:41.800 --> 00:00:44.450
It's Otto, O-T-T-O, not A-U-T-O.

00:00:44.470 --> 00:00:48.980
We're going to start to review
what we're going to learn today.

00:00:48.980 --> 00:00:52.040
We'll go over the steps
in the hands-on session.

00:00:52.040 --> 00:00:54.790
This is supposed to
be a hands-on session,

00:00:54.790 --> 00:00:56.600
but I have to apologize.

00:00:56.600 --> 00:01:01.550
It's going to be more like a guided
tour due to a glitch in the sample code.

00:01:01.550 --> 00:01:04.460
You'll be able to follow along with me,
but won't be able to

00:01:04.560 --> 00:01:06.020
build any of the projects.

00:01:06.020 --> 00:01:07.530
I apologize about that.

00:01:07.800 --> 00:01:10.280
That should be fixed shortly
after the conference.

00:01:10.280 --> 00:01:13.520
You'll be able to download
the corrected source code.

00:01:13.520 --> 00:01:18.820
Then we'll talk about a little background
information on what Automator is and

00:01:18.820 --> 00:01:24.700
what it does and its pieces and parts,
and why you should

00:01:24.700 --> 00:01:28.090
create Automator Actions,
what's in it for you.

00:01:28.100 --> 00:01:31.340
So what we're going to learn,
we're going to talk about

00:01:31.870 --> 00:01:35.690
how to design actions,
some of the guidelines to be followed

00:01:35.770 --> 00:01:40.170
when designing Automator Actions,
how to create them,

00:01:40.170 --> 00:01:46.070
meaning physically or in Xcode,
how to create a project,

00:01:46.220 --> 00:01:50.860
How to add your source code,
how to design the UI, how to build it,

00:01:50.860 --> 00:01:52.340
install it, etc.

00:01:52.420 --> 00:01:53.860
How to create conversion actions.

00:01:53.930 --> 00:01:56.500
We'll have to talk about those
and explain what those are,

00:01:56.500 --> 00:01:59.600
but we will go through and we'll
actually create conversion action.

00:01:59.600 --> 00:02:03.520
And for those of you who
put bugs in your code,

00:02:03.550 --> 00:02:07.790
we'll talk about how to
debug actions as well.

00:02:08.120 --> 00:02:09.760
So what is Automator?

00:02:09.800 --> 00:02:12.210
This is a quote from Matt Newberg.

00:02:12.240 --> 00:02:15.380
End users, I suspect,
will quickly discover that Automator

00:02:15.380 --> 00:02:17.070
is the fulfillment of a dream.

00:02:17.080 --> 00:02:20.580
At long last, anyone can program the Mac.

00:02:20.580 --> 00:02:21.930
And that's really true.

00:02:21.930 --> 00:02:23.050
This is for everyone.

00:02:23.050 --> 00:02:29.460
Automator, as best as I can describe it,
is workflow automation for the masses.

00:02:29.460 --> 00:02:31.020
It's for anyone to use.

00:02:31.020 --> 00:02:31.860
It's very simple.

00:02:31.860 --> 00:02:34.340
Just through a drag and drop interface.

00:02:34.340 --> 00:02:37.980
And it's flexible so that it
can be tailored to your needs.

00:02:38.000 --> 00:02:41.640
It's also extensible.

00:02:41.640 --> 00:02:46.030
As Steve mentioned in his keynote,
there's something like 550

00:02:46.170 --> 00:02:49.830
actions which are shipped so far,
plus the 200 that were

00:02:49.830 --> 00:02:51.240
shipped with Tiger.

00:02:51.240 --> 00:02:54.440
And that's just in the
first six weeks or so.

00:02:54.440 --> 00:02:58.830
And we're hoping that this conference
will give it another boost.

00:02:58.910 --> 00:03:00.720
And there will be many more to come.

00:03:00.800 --> 00:03:02.080
You're great actions.

00:03:02.080 --> 00:03:06.620
So workflows are what we
create with Automator.

00:03:06.620 --> 00:03:07.980
Workflows are what we
create with Automator.

00:03:07.980 --> 00:03:10.160
Workflows can be saved as
individual applications.

00:03:10.160 --> 00:03:14.360
You don't need to have Automator
running in order to run these workflows.

00:03:14.360 --> 00:03:18.040
They can be saved as
plugins to the Finder,

00:03:18.040 --> 00:03:24.230
to the script menu, to the print panel,
to other things as well.

00:03:24.230 --> 00:03:27.740
It can really tie in to Tiger.

00:03:29.560 --> 00:03:31.400
So what is an Action?

00:03:31.480 --> 00:03:34.400
Focused functionality in a small package.

00:03:34.400 --> 00:03:38.900
It can have a large code base behind it,
but the UI is small,

00:03:38.920 --> 00:03:42.900
and it presents a very focused,

00:03:44.090 --> 00:03:45.940
Very focused purpose.

00:03:45.940 --> 00:03:51.580
We can talk to -- Actions
can talk to frameworks.

00:03:51.590 --> 00:03:54.000
Generally,
Cocoa Actions will talk to frameworks.

00:03:54.000 --> 00:03:56.010
Or they can talk to applications.

00:03:56.110 --> 00:03:59.250
Generally,
that would be AppleScript Actions

00:03:59.260 --> 00:04:05.750
talking to applications to
get at their data models,

00:04:05.750 --> 00:04:05.750
object models, and get data out of them.

00:04:05.890 --> 00:04:12.610
We support technologies such as Cocoa,
AppleScript, and new in Xcode 2.1 is

00:04:12.610 --> 00:04:15.400
the Shell Scripting Action.

00:04:15.500 --> 00:04:18.400
So you can write with your
favorite scripting language,

00:04:18.400 --> 00:04:21.590
whatever it be, or command line tool.

00:04:22.820 --> 00:04:24.290
Why should you create Automator Actions?

00:04:24.300 --> 00:04:27.980
Well, it can be very easy
since these are small.

00:04:27.980 --> 00:04:32.400
They don't take a lot of
effort into designing them.

00:04:32.400 --> 00:04:37.310
The tools you use are familiar, Xcode,
Interface Builder.

00:04:37.310 --> 00:04:42.530
It can be fast because
you can reuse your code.

00:04:42.540 --> 00:04:46.080
You can take the code that you've
already worked on over the years,

00:04:46.080 --> 00:04:49.820
tested, debugged,
etc., put it right into an action,

00:04:49.820 --> 00:04:52.680
and put a new UI on it.

00:04:52.700 --> 00:04:59.980
Give users a new way to use
your technology or your product,

00:04:59.980 --> 00:05:04.260
and then you've found a new market.

00:05:04.260 --> 00:05:10.230
You become part of their daily workflow,
and you'll be cool.

00:05:10.270 --> 00:05:13.240
In the Mac OS X State of
the Union speech,

00:05:13.280 --> 00:05:17.230
Scott Forstall went over
his 10 best practices,

00:05:17.230 --> 00:05:21.010
and one of them was
adopting new technologies.

00:05:21.060 --> 00:05:22.680
Automator is a new technology.

00:05:22.700 --> 00:05:24.750
And users like that.

00:05:24.790 --> 00:05:29.200
So you can generate attention
for your product as well.

00:05:29.200 --> 00:05:34.670
To mention BBEdit,
which released an update the day

00:05:34.670 --> 00:05:38.560
before Tiger was released and came
out with 19 Automator Actions.

00:05:38.560 --> 00:05:40.110
They got a lot of press for that.

00:05:40.150 --> 00:05:43.530
They're finding new users,
people who don't normally

00:05:43.530 --> 00:05:46.220
use BBEdit possibly,
but would use a BBEdit

00:05:46.220 --> 00:05:50.090
action in a workflow,
and suddenly they have new markets.

00:05:52.390 --> 00:05:58.960
So when we go to design an action,
the first question we ask is,

00:05:58.960 --> 00:06:00.280
what type of action do we want?

00:06:00.340 --> 00:06:03.320
Well,
that kind of depends what our target is.

00:06:03.380 --> 00:06:06.580
Is our target a scriptable application?

00:06:06.580 --> 00:06:10.480
If so, then that would lead to
an AppleScript action.

00:06:10.480 --> 00:06:14.130
Is our target a framework
or a technology,

00:06:14.130 --> 00:06:16.340
a library, et cetera?

00:06:16.340 --> 00:06:18.830
Then a Cocoa action would be best.

00:06:18.880 --> 00:06:22.260
Or are we targeting a command line tool?

00:06:22.300 --> 00:06:23.520
Something like that.

00:06:23.620 --> 00:06:27.500
Then a shell script action
would fit your purpose best.

00:06:28.980 --> 00:06:30.780
Also, we want to keep it small.

00:06:31.040 --> 00:06:36.900
We don't want any Swiss Army actions,
something that does everything and more.

00:06:37.160 --> 00:06:42.050
We want these to be modular
pieces that users can put together

00:06:42.410 --> 00:06:47.320
in the order that they want,
and that allows them to really

00:06:47.320 --> 00:06:50.910
focus in on what they want to do.

00:06:51.340 --> 00:06:53.400
Also, we want to keep it small.

00:06:53.400 --> 00:06:57.820
We don't want any Swiss Army actions,
something that does everything and more.

00:06:57.820 --> 00:06:57.820
We want these to be modular
pieces that users can put together

00:06:57.820 --> 00:06:57.820
in the order that they want,
and that allows them to really

00:06:57.820 --> 00:06:57.820
focus in on what they want to do.

00:06:58.250 --> 00:07:00.200
Also, we want to keep it small.

00:07:00.200 --> 00:07:06.100
We don't want any Swiss Army actions,
something that does everything and more.

00:07:06.100 --> 00:07:11.580
We want these to be modular
pieces that users can put together

00:07:11.580 --> 00:07:16.520
in the order that they want,
and that allows them to really

00:07:16.520 --> 00:07:20.120
focus in on what they want to do.

00:07:22.840 --> 00:07:25.020
Also, choose meaningful data types.

00:07:25.180 --> 00:07:27.730
When you design an action,
you have to specify which

00:07:27.790 --> 00:07:32.010
type of data comes in,
which type of data goes out.

00:07:32.310 --> 00:07:35.920
I will talk more about
this in a little bit,

00:07:35.960 --> 00:07:40.190
but there are several
predefined data types for you.

00:07:40.350 --> 00:07:46.050
If you can't use one of those,
you can define one for yourself.

00:07:46.520 --> 00:07:51.140
So I'm going to go and show you what
we're going to be building today,

00:07:51.200 --> 00:07:53.400
two actions plus a conversion action.

00:07:53.400 --> 00:07:57.340
I'm going to show you the finished
product first since as we go through

00:07:57.470 --> 00:08:02.400
we can't really run the full thing
until all the pieces are in place.

00:08:02.400 --> 00:08:05.400
Could I get demo two, please?

00:08:08.000 --> 00:08:20.500
[Transcript missing]

00:08:23.300 --> 00:08:25.960
Try and zoom in for you,
but it doesn't look like

00:08:26.060 --> 00:08:27.840
that's turned on in here.

00:08:28.120 --> 00:08:29.910
Let's go.

00:08:34.440 --> 00:08:36.560
So here's our workflow that
we're going to be building.

00:08:36.600 --> 00:08:40.740
Get specified finder items is
an existing shipping action.

00:08:40.740 --> 00:08:43.290
So is copy finder items,
which we've put in there because

00:08:43.290 --> 00:08:46.040
we're going to be modifying
the files that we work on.

00:08:46.070 --> 00:08:49.860
We're going to be building this
Unsharp Mask Action and the

00:08:49.860 --> 00:08:53.270
later Save Image to File Action.

00:08:53.440 --> 00:08:55.360
A couple things about these two actions.

00:08:55.470 --> 00:09:01.900
You'll notice that we have defined a
custom data type for them called images.

00:09:01.970 --> 00:09:06.240
That's not image files,
it's actually image data in memory.

00:09:06.450 --> 00:09:11.930
So we're going to have a conversion
action between Copy Finder Items

00:09:11.930 --> 00:09:16.380
and Unsharp Mask to take the
image files that are passed in,

00:09:16.380 --> 00:09:21.210
get the image data out of them,
and then pass them to Unsharp Mask.

00:09:21.240 --> 00:09:27.580
Unsharp Mask is an action which
uses the Core Image Framework.

00:09:27.630 --> 00:09:32.530
Core Image acts kind of like
Automator does in that it

00:09:32.530 --> 00:09:38.230
allows you to apply successive
actions or filters on an image,

00:09:38.280 --> 00:09:42.960
and the resulting image isn't
actually computed until it's rendered.

00:09:42.960 --> 00:09:44.940
So that's why we have it set up this way.

00:09:44.940 --> 00:09:48.300
We have an Unsharp Mask,
and you could easily create

00:09:48.300 --> 00:09:50.940
additional Core Image type actions.

00:09:51.240 --> 00:09:54.790
And chain them together,
and then the final one would

00:09:54.790 --> 00:09:58.230
be a Save Image to File,
where it takes that image,

00:09:58.230 --> 00:10:01.650
processes all the filters
that have been acted upon it,

00:10:01.950 --> 00:10:05.780
and then saves the
resulting data to disk.

00:10:07.660 --> 00:10:09.600
Okay.

00:10:09.710 --> 00:10:13.000
Back to the slides, please.

00:10:13.080 --> 00:10:14.580
So that's what we're
going to be building.

00:10:14.770 --> 00:10:17.900
We're going to start with
the unshark mask action,

00:10:17.940 --> 00:10:20.600
and we're going to build
the user interface.

00:10:20.730 --> 00:10:24.240
So a couple things to keep in
mind when you build the user

00:10:24.240 --> 00:10:26.300
interface for your action.

00:10:26.340 --> 00:10:27.520
One, keep it simple.

00:10:27.710 --> 00:10:30.700
We've already talked about that.

00:10:31.030 --> 00:10:33.230
Follow the published guidelines.

00:10:33.230 --> 00:10:36.240
There are Aqua Human Interface
Guidelines,

00:10:36.240 --> 00:10:40.290
but there are also Automator
Action Human Interface Guidelines.

00:10:40.300 --> 00:10:41.580
I don't think they're called that.

00:10:41.580 --> 00:10:42.350
It's a long title.

00:10:42.350 --> 00:10:46.230
They basically say things like,
use small fonts,

00:10:46.350 --> 00:10:49.920
small controls in your action,
spaces that are premium,

00:10:49.920 --> 00:10:55.540
so minimize your vertical space so that
you don't end up having really long,

00:10:55.730 --> 00:10:58.370
you don't have to scroll too much.

00:10:59.480 --> 00:11:01.520
Use Cocoa Bindings when possible.

00:11:01.520 --> 00:11:05.170
It's not required,
but it makes things a lot easier,

00:11:05.300 --> 00:11:07.800
and it's all about being easy to do.

00:11:07.800 --> 00:11:11.750
And you can use shipping
actions as examples.

00:11:11.950 --> 00:11:14.160
There are a lot out there.

00:11:14.160 --> 00:11:16.690
If you look at the
screenshot of that action,

00:11:16.690 --> 00:11:18.170
it uses small controls.

00:11:18.220 --> 00:11:22.820
There's a text 10-pixel
border around the edges,

00:11:22.820 --> 00:11:28.490
which we'll show, and that's an example
of an action interface.

00:11:29.640 --> 00:11:33.720
Now, so let's go build the
Unchart Mask user interface.

00:11:33.740 --> 00:11:37.810
Demo 2.

00:11:45.450 --> 00:11:48.700
Now I'm just going to start
by opening a new project.

00:11:48.740 --> 00:11:54.230
And in Xcode,
if you select-- can you read that?

00:11:54.930 --> 00:11:56.700
Okay.

00:11:56.700 --> 00:12:02.150
In Xcode, if you open a new project and
select Cocoa Automator Action,

00:12:02.150 --> 00:12:05.770
we'll call it Unsharp Mask.

00:12:17.190 --> 00:12:19.940
Okay, a quick look at our project.

00:12:19.960 --> 00:12:25.900
The template gives us code classes
based on the name of the project.

00:12:25.930 --> 00:12:35.270
It gives us a main.nib file, Info.plist,
and a target and an executable.

00:12:35.500 --> 00:12:38.100
I hope I'm not making
you dizzy with that.

00:12:38.140 --> 00:12:39.800
Target and an executable.

00:12:39.810 --> 00:12:43.180
And we're just going to
open up the main.nib file.

00:12:43.180 --> 00:12:47.740
And we're going to build that user
interface that we saw just a minute ago.

00:12:47.800 --> 00:12:52.400
So I'm going to grab a label here.

00:12:52.400 --> 00:12:54.390
And I'll zoom in when I'm
done so you can see it,

00:12:54.430 --> 00:12:58.280
but that's hard to do when
I'm trying to build this.

00:12:58.330 --> 00:13:01.480
Call the first one intensity.

00:13:03.170 --> 00:13:07.770
Oops, grab a slider.

00:13:07.800 --> 00:13:11.730
Open up the inspector because
we need this to be small.

00:13:18.090 --> 00:13:20.420
Text field.

00:13:20.420 --> 00:13:23.000
Make it small.

00:13:23.020 --> 00:13:25.420
Make it even smaller.

00:13:25.910 --> 00:13:27.020
and line it up.

00:13:27.130 --> 00:13:29.900
Oh,
and I wanted that to continuously update.

00:13:29.900 --> 00:13:30.840
Okay.

00:13:31.120 --> 00:13:41.890
Then I'm just going to copy and paste
and change the second label to radius.

00:13:49.010 --> 00:13:50.140
and line it up.

00:13:50.140 --> 00:13:52.890
Oh,
and I wanted that to continuously update.

00:13:53.000 --> 00:13:53.960
Okay.

00:13:53.960 --> 00:13:54.370
Then I'm just going to copy

00:13:54.790 --> 00:14:01.090
We can arrange it so that we have
a 10 pixel border around the edges.

00:14:01.480 --> 00:14:05.100
I can just resize the
window while I do this.

00:14:05.260 --> 00:14:07.410
It can be kind of tricky.

00:14:09.300 --> 00:14:11.880
I actually tried doing this on
my PowerBook on a moving train.

00:14:11.880 --> 00:14:14.240
It was a lot trickier.

00:14:14.240 --> 00:14:15.760
OK.

00:14:16.240 --> 00:14:18.540
So we've got all the elements in place.

00:14:18.540 --> 00:14:23.180
Now what we need to do is
bind it using Cocoa Bindings.

00:14:23.180 --> 00:14:28.200
And every nib file created for an action
with the template comes with an object

00:14:28.260 --> 00:14:33.360
controller named Parameters already
on the back end hooked up to our data,

00:14:33.360 --> 00:14:36.160
our actions data,
the Parameters dictionary.

00:14:36.190 --> 00:14:41.260
So what we need to do is just hook it
up on the front end to our objects.

00:14:41.260 --> 00:14:44.960
So we can select the
Parameters object controller.

00:14:44.960 --> 00:14:50.030
Then in the inspector,
I add a couple keys, one called Intensity

00:14:54.050 --> 00:14:55.010
That's how I do it.

00:14:55.290 --> 00:15:01.610
One called intensity and
the other called radius.

00:15:02.560 --> 00:15:04.320
You can add these here,
or you can also add them

00:15:04.520 --> 00:15:07.260
in the Bindings Inspector.

00:15:07.280 --> 00:15:11.220
But I thought I'd show
you one of two ways.

00:15:11.220 --> 00:15:14.820
OK, so if I select the slider,
the top one,

00:15:14.830 --> 00:15:17.360
then I'm going to select the value.

00:15:17.360 --> 00:15:20.610
Hopefully you can see this.

00:15:25.100 --> 00:15:26.760
Problem with that.

00:15:26.760 --> 00:15:29.370
Okay, so we're going to select
the Model Key Path,

00:15:29.390 --> 00:15:35.210
Intensity, bind that to the Intensity,
and the same for the Text field.

00:15:35.530 --> 00:15:39.760
Now, something that is useful when you're
binding text fields is to select

00:15:39.900 --> 00:15:42.160
the Continuously Updates value.

00:15:42.180 --> 00:15:45.380
That's so that if you don't actually
return or tab out of the text field,

00:15:45.380 --> 00:15:50.110
it still will get the value that
you or the user has entered.

00:15:53.100 --> 00:15:56.290
Okay, then we'll just do the same
thing with the radius key for

00:15:57.140 --> 00:15:59.710
the lower text field and slider.

00:16:05.000 --> 00:16:08.040
and we're done with our user interface.

00:16:08.040 --> 00:16:12.470
We can go back to Xcode,
build and run it,

00:16:12.470 --> 00:16:14.590
and see what it looks like.

00:16:24.100 --> 00:16:29.400
It might take a minute.

00:16:29.430 --> 00:16:33.820
And it should launch Automator,
load our action,

00:16:33.960 --> 00:16:37.440
But since we haven't configured
any of the other properties,

00:16:37.440 --> 00:16:42.700
it'll just come up in this strange
primary application default key.

00:16:42.700 --> 00:16:44.850
But there's our action, Unchart Mask.

00:16:44.900 --> 00:16:50.100
If we add it to the workflow, we can see,
well, we don't have any default data

00:16:50.100 --> 00:16:52.270
because we didn't set any up yet.

00:16:52.280 --> 00:16:55.370
But we can see that the bindings
are working because the slider and

00:16:55.380 --> 00:16:57.260
the text field are corresponding.

00:16:57.260 --> 00:17:02.460
Not much use, but we can see that we
can do a little bit yet,

00:17:02.460 --> 00:17:03.620
or so far.

00:17:06.500 --> 00:17:09.880
Okay, so the next step,
if we can go back to the slides,

00:17:09.890 --> 00:17:13.270
once that's done,
is to configure the basic

00:17:13.270 --> 00:17:15.580
properties of the action.

00:17:15.700 --> 00:17:20.940
The name, the category it goes in,
the input and output types, you know,

00:17:20.940 --> 00:17:23.500
any description information.

00:17:23.520 --> 00:17:27.450
And we can use the
Action Target Inspector to do this.

00:17:27.530 --> 00:17:29.410
This is new in Xcode.

00:17:29.620 --> 00:17:32.870
It's built into Xcode 2.1.

00:17:33.210 --> 00:17:35.350
The way that we get to that,
and I'll show you this,

00:17:35.430 --> 00:17:40.220
is you can select your target,
get the info on it, open the inspector,

00:17:40.220 --> 00:17:42.430
and then select the properties tab.

00:17:42.460 --> 00:17:43.640
Tab.

00:17:43.650 --> 00:17:44.610
Tab view.

00:17:44.610 --> 00:17:46.060
Tab in the tab view.

00:17:46.100 --> 00:17:50.030
There's a pop-up,
a collection pop-up that will allow

00:17:50.030 --> 00:17:53.990
us to set the desired properties
that we want and configure

00:17:53.990 --> 00:17:55.910
them to our heart's content.

00:17:55.960 --> 00:18:02.050
If we don't have Xcode 2.0,
we can edit the Info.plist directly

00:18:02.060 --> 00:18:03.460
because that's all this is doing.

00:18:03.460 --> 00:18:08.290
It's editing the Info.plist for
you because that's not very fun.

00:18:09.830 --> 00:18:12.040
Now what I said about data types.

00:18:12.040 --> 00:18:15.000
I mentioned data types earlier.

00:18:15.020 --> 00:18:19.240
Automator uses UTIs to define data types.

00:18:19.280 --> 00:18:23.040
That stands for Uniform Type Identifier.

00:18:23.040 --> 00:18:25.800
And they're very common
on Mac OS X Tiger.

00:18:25.800 --> 00:18:32.800
They can describe a type of a file or
they can describe objects in memory.

00:18:32.800 --> 00:18:36.800
They can describe really
anything you want.

00:18:36.800 --> 00:18:39.800
Automator has a lot of
predefined data types for you.

00:18:39.860 --> 00:18:42.830
For Cocoa types such as Cocoa.String.

00:18:42.830 --> 00:18:46.800
For AppleScript types,
AppleScript Object is one.

00:18:46.800 --> 00:18:49.800
And they're all documented
in the documentation.

00:18:49.800 --> 00:18:53.800
So you can go there,
pick one that's best for your

00:18:53.800 --> 00:18:54.800
data type or your action.

00:18:54.800 --> 00:18:56.770
or your action.

00:18:57.520 --> 00:18:58.260
and use it.

00:18:58.420 --> 00:18:59.700
Use it if you can.

00:18:59.700 --> 00:19:01.700
Use one of those if possible.

00:19:01.760 --> 00:19:08.360
But if not, you can declare a data
type for your own object.

00:19:08.500 --> 00:19:14.610
And the way you would do that is there's
something called a .definition file.

00:19:14.730 --> 00:19:21.020
In your sample code is an example of a
.definition file called Image Definition.

00:19:21.020 --> 00:19:23.550
And it's,
there's nothing to compile in it.

00:19:23.550 --> 00:19:26.800
It's basically an
Info.plist with a declaration.

00:19:26.810 --> 00:19:32.110
And you declare the UTI using
reverse namespace format,

00:19:32.190 --> 00:19:40.520
such as com.yourcompany.yourframework
or yourapp.yourobject.

00:19:40.520 --> 00:19:44.880
And you also can provide a human
readable name so that users don't

00:19:44.880 --> 00:19:47.250
actually ever see the UTI type.

00:19:47.250 --> 00:19:50.090
They see the name that you've given it.

00:19:51.060 --> 00:19:54.670
Um, .definition files can be
installed anywhere in the

00:19:54.670 --> 00:19:58.130
/library/automator domains.

00:19:58.240 --> 00:20:01.080
or in your project's bundle.

00:20:01.140 --> 00:20:04.100
If it's in there,
along with some Automator Actions,

00:20:04.230 --> 00:20:09.100
you can just drag and drop "Install
an application," and it'll see it,

00:20:09.100 --> 00:20:11.090
and Automator will be able to use it.

00:20:11.100 --> 00:20:14.100
So let's go ahead and do that.

00:20:14.260 --> 00:20:16.210
Back to Demo 2.

00:20:20.260 --> 00:20:23.310
Okay, as I said about using
the Target Inspector,

00:20:23.380 --> 00:20:28.220
our target here is called Unsharp Mask,
the same as our project by default.

00:20:28.420 --> 00:20:32.090
So we can select that,
and then click Get Info

00:20:32.200 --> 00:20:33.830
to open the Inspector.

00:20:35.260 --> 00:20:38.800
Select the Properties tab.

00:20:38.820 --> 00:20:42.560
Now the top portion you probably
don't even need to modify.

00:20:42.570 --> 00:20:44.500
Most of that's filled out for you.

00:20:44.740 --> 00:20:48.220
The bottom portion is the
real Action Inspector here.

00:20:48.230 --> 00:20:52.460
There's a collection pop-up with a
lot of different types of collections.

00:20:52.530 --> 00:20:58.220
So you can change things like we can
tell it that the application is going

00:20:58.220 --> 00:21:01.260
to be in the preview application group.

00:21:01.300 --> 00:21:05.340
Should use the preview icon.

00:21:08.400 --> 00:21:11.400
and input types are selected here.

00:21:11.400 --> 00:21:14.690
Now as I said,
lists or single items are supported.

00:21:14.770 --> 00:21:16.320
You can select either of those.

00:21:16.320 --> 00:21:20.030
You can make the input
type optional if you want.

00:21:20.060 --> 00:21:23.650
I'm going to change the
UTI type to be the UTI type that

00:21:23.650 --> 00:21:27.800
I defined in -- for this action,
for the image type,

00:21:27.800 --> 00:21:31.500
which is -- and again,
users never see this.

00:21:32.450 --> 00:21:36.390
Quartz Core,
because that's the framework,

00:21:36.390 --> 00:21:38.160
and Core Image.

00:21:38.160 --> 00:21:40.520
That's the image type I'm using.

00:21:41.270 --> 00:21:46.150
Instead of filling those all out,
I'm going to redo the

00:21:46.160 --> 00:21:50.140
InfoP list all at once,
and then I'll go back and show you the

00:21:50.140 --> 00:21:52.590
rest of the changes that I've made.

00:21:55.420 --> 00:22:01.900
So if I save that,
the Target Inspector should be updated.

00:22:01.900 --> 00:22:03.140
It is.

00:22:03.170 --> 00:22:03.570
Good.

00:22:03.780 --> 00:22:06.240
So some of the things-- I'll just
show you the things we changed.

00:22:06.240 --> 00:22:12.860
I haven't modified a lot of the settings,
but I have set the name, Unchart Mask,

00:22:12.880 --> 00:22:16.820
the application, the category,
and the icon name.

00:22:16.840 --> 00:22:19.770
We've changed the input type.

00:22:20.220 --> 00:22:22.500
and the output type to be the same thing.

00:22:22.500 --> 00:22:25.310
They're both passing in-- or
it's accepting and providing

00:22:25.400 --> 00:22:27.380
this core image type.

00:22:27.380 --> 00:22:29.340
And we've added two parameters.

00:22:29.340 --> 00:22:33.840
And these parameters match what we added
to the object controller in our nib.

00:22:33.840 --> 00:22:38.220
We have an intensity value,
which is a real or a float.

00:22:38.220 --> 00:22:41.890
And we can supply a default value for it.

00:22:42.070 --> 00:22:47.180
We also have a radius
parameter to go along with it.

00:22:48.380 --> 00:22:52.700
Now I've added,
I've changed the default warning level.

00:22:52.710 --> 00:22:54.660
That should be irreversible rather.

00:22:54.690 --> 00:22:59.200
You can specify an action as being safe,
means it doesn't modify any of the data.

00:22:59.220 --> 00:23:03.860
It modifies it in a reversible
fashion or an irreversible fashion.

00:23:03.860 --> 00:23:06.170
And in this case, that's what we have.

00:23:06.310 --> 00:23:10.260
So we've specified
that it's irreversible.

00:23:10.320 --> 00:23:14.980
And when you add that to your workflow,

00:23:15.340 --> 00:23:19.150
Automator will prompt the user to add,
this is the bundle identifier

00:23:19.260 --> 00:23:23.180
for the copy finder items action,
it will prompt the user to

00:23:23.180 --> 00:23:25.500
add that before your action.

00:23:25.980 --> 00:23:31.060
So we added that and we also
changed the description,

00:23:31.100 --> 00:23:35.080
provided a summary,
and provided some information

00:23:35.080 --> 00:23:36.620
on the options for this action.

00:23:43.300 --> 00:23:48.080
And that's all we've
done to the InfoP list.

00:23:48.080 --> 00:23:53.100
We also need to-- since there
is a strings file provided,

00:23:53.100 --> 00:23:56.860
it would pick up this information
if we don't modify it.

00:23:57.270 --> 00:24:01.760
So this is using the Info.plist strings,
you can put localized keys in

00:24:01.760 --> 00:24:03.600
here to localize your action.

00:24:03.600 --> 00:24:06.640
It'll actually,
if the user relaunches in French,

00:24:06.640 --> 00:24:12.140
your action UI will also be in
French if you have localized keys.

00:24:12.140 --> 00:24:15.340
So you can provide things
like the action name,

00:24:15.340 --> 00:24:21.790
a localized action name,
names for your default parameters,

00:24:21.790 --> 00:24:25.380
your descriptions, et cetera.

00:24:26.260 --> 00:24:27.220
Put that in.

00:24:27.370 --> 00:24:33.200
And so we've just supplied
localized names for the action.

00:24:34.090 --> 00:24:40.650
The application, the category,
options and summary, etc.

00:24:41.330 --> 00:24:46.500
and the Warning Level Description.

00:24:46.500 --> 00:24:46.510
This comes up in a dialogue
when you add your action.

00:24:48.300 --> 00:24:53.100
So now, now we should be able
to build and run it,

00:24:53.100 --> 00:24:58.790
and it should look correct and
behave like any other action,

00:24:58.790 --> 00:24:58.790
only

00:24:59.670 --> 00:25:04.040
"It won't do anything because we
haven't added any code to do anything.

00:25:04.040 --> 00:25:08.750
The default behavior is just to pass
through your input to your output."

00:25:13.500 --> 00:25:15.280
Okay, so it should be on preview.

00:25:15.340 --> 00:25:19.790
Unsharp mask.

00:25:19.900 --> 00:25:22.080
And there's our warning.

00:25:22.120 --> 00:25:26.170
I'm gonna say no for now.

00:25:27.700 --> 00:25:29.980
But there's our action.

00:25:29.980 --> 00:25:33.740
It has our default values in there.

00:25:34.800 --> 00:25:41.710
and our UTI type, our image type,
with the human readable name.

00:25:41.920 --> 00:25:43.900
So, looks pretty good.

00:25:43.900 --> 00:25:49.990
Okay, let's go back to the slides.

00:25:49.990 --> 00:25:49.990
Need this.

00:25:52.150 --> 00:25:55.640
So our next step is to actually add code.

00:25:55.670 --> 00:25:59.300
And the first thing we do
is add our existing code,

00:25:59.300 --> 00:26:02.120
or our frameworks, to the action,
just like you normally

00:26:02.120 --> 00:26:05.430
would in an Xcode project.

00:26:05.570 --> 00:26:10.100
The method that we
override is runWithInput,

00:26:10.320 --> 00:26:13.000
fromAction, error.

00:26:13.000 --> 00:26:16.970
And I'll show you the class that
belongs in the AM bundle action class.

00:26:17.000 --> 00:26:19.260
I'll show you that in a second.

00:26:19.310 --> 00:26:23.460
But that method is what gets
called when your action is run.

00:26:23.630 --> 00:26:25.720
It's where everything happens.

00:26:26.750 --> 00:26:32.550
Tiger Ships with Automator
Framework on the system,

00:26:32.550 --> 00:26:37.860
and it defines these classes
for using in Automator Actions.

00:26:37.930 --> 00:26:40.400
AM Action is the base class.

00:26:40.590 --> 00:26:43.900
It's just an abstract base
class which you won't use.

00:26:43.960 --> 00:26:48.250
AM Bundle Action is the
one that Cocoa Actions use.

00:26:48.460 --> 00:26:53.380
It supports loading of
nibs and copying and coding

00:26:54.300 --> 00:27:08.200
[Transcript missing]

00:27:09.720 --> 00:27:14.140
Okay, some tips on coding your Action.

00:27:14.180 --> 00:27:17.660
Do not present custom error dialogs.

00:27:17.740 --> 00:27:22.110
If an error occurs in your Action,
don't put up a warning

00:27:22.110 --> 00:27:23.700
or display a sheet.

00:27:23.730 --> 00:27:28.890
Leave that to Automator so the Automator
knows it needs to stop the workflow.

00:27:29.040 --> 00:27:32.530
So in the run with
input from Action error,

00:27:32.530 --> 00:27:36.030
there's that error parameter
that gives you a dictionary,

00:27:36.030 --> 00:27:39.230
and you can fill out the
keys and just return that,

00:27:39.230 --> 00:27:43.800
return from your Action,
and Automator will see that an error

00:27:43.800 --> 00:27:46.490
occurred and treat that properly.

00:27:48.070 --> 00:27:55.740
Access your Actions Bundle,
if you need to, by calling self-bundle,

00:27:55.750 --> 00:27:58.860
or it's a method on am-bundle-action.

00:27:58.860 --> 00:28:01.820
If you try and call
ns-bundle main-bundle,

00:28:01.820 --> 00:28:04.970
you'll get Automator's Bundle,
because Automator is

00:28:04.970 --> 00:28:06.100
the one executing this.

00:28:06.100 --> 00:28:08.510
So that's something to keep in mind.

00:28:08.520 --> 00:28:11.380
Actions run in a secondary thread.

00:28:11.420 --> 00:28:15.910
So if you need to do any special UI,
like put up a window,

00:28:15.910 --> 00:28:20.150
update a text field, something like that,
you'll need to call

00:28:20.150 --> 00:28:21.550
into the primary thread.

00:28:21.560 --> 00:28:26.210
And you can do that with this method,
perform selector on

00:28:26.210 --> 00:28:29.660
main thread with object,
wait until done.

00:28:29.660 --> 00:28:31.400
That'll get you the right behavior.

00:28:33.280 --> 00:28:37.200
Some commonly overridden
methods in Automator Actions.

00:28:37.200 --> 00:28:39.200
There's the opened method.

00:28:39.200 --> 00:28:41.190
This is called

00:28:41.500 --> 00:28:46.000
When your Action is added to a workflow,
but just before it's made visible.

00:28:46.140 --> 00:28:50.020
And you'll want to do
this to update or to,

00:28:50.120 --> 00:28:55.030
rather, to initialize the user
interface of your Action.

00:28:55.500 --> 00:29:01.670
activated is called whenever the
workflow window is made frontmost.

00:29:01.690 --> 00:29:03.860
So if the user goes
away and does something,

00:29:03.860 --> 00:29:05.620
comes back, this is called.

00:29:05.620 --> 00:29:11.590
This is really handy if you need to
keep your Actions UI in sync with other

00:29:11.590 --> 00:29:15.780
stuff that's going on in the system.

00:29:16.920 --> 00:29:22.690
Parameters Updated is called when the
Parameters Dictionary is changed behind

00:29:22.690 --> 00:29:29.530
the scenes and you need to update
your user interface if necessary.

00:29:30.190 --> 00:29:35.210
And then you can call update
parameters to tell Automator that

00:29:35.700 --> 00:29:39.310
your parameters have changed.

00:29:39.610 --> 00:29:41.940
For example,
if you're not using Cocoa Bindings,

00:29:41.940 --> 00:29:46.750
then you need to update that
Parameters Dictionary in memory.

00:29:48.820 --> 00:29:51.510
And remember to call super
on all these methods,

00:29:51.520 --> 00:29:54.700
because the super classes do
things which need to be done.

00:29:54.860 --> 00:29:58.500
And so you need to call super on those.

00:29:58.630 --> 00:30:01.370
Now when it comes time
to build an action,

00:30:02.420 --> 00:30:06.200
One thing you need to do
is configure the target.

00:30:06.220 --> 00:30:09.180
The product name and extension
are generally filled out

00:30:09.350 --> 00:30:12.170
for you and are correct,
but for conversion actions,

00:30:12.170 --> 00:30:16.310
which I'll show you,
you should need to change the extension.

00:30:17.090 --> 00:30:22.340
AMLint is a tool that is added
by the template as a build phase,

00:30:22.410 --> 00:30:25.550
so it gets run whenever
you build your action,

00:30:25.550 --> 00:30:29.240
and it will look for common
errors and mistakes in the

00:30:29.240 --> 00:30:31.500
process of creating an action.

00:30:31.570 --> 00:30:36.590
And you'll see those errors and
warnings in the standard build pane.

00:30:36.750 --> 00:30:38.170
You can run PLUtil.

00:30:38.440 --> 00:30:42.420
If you've edited your InfoP list
by hand and want to make sure that

00:30:42.420 --> 00:30:44.390
you haven't made any mistakes,

00:30:44.600 --> 00:30:46.500
It will check the format
of your InfoP list.

00:30:46.500 --> 00:30:50.920
That's real handy because sometimes if
you've made a mistake in your InfoP list,

00:30:51.010 --> 00:30:55.690
it can be really tricky to find that
that's where the mistake was made.

00:30:56.280 --> 00:31:00.410
And again, installing your Action,
you can install it anywhere in

00:31:00.410 --> 00:31:05.200
the /library/automator domains
or your applications bundle.

00:31:05.500 --> 00:31:10.200
And it is not necessary to
install it before you debug it.

00:31:10.240 --> 00:31:14.290
It just--you can,
but it takes a lot of extra time,

00:31:14.460 --> 00:31:16.200
and it's a pain doing it that way.

00:31:16.340 --> 00:31:20.450
So let's add some code to
our Unsharp Mask Action.

00:31:29.590 --> 00:31:32.060
Here we are.

00:31:32.070 --> 00:31:35.370
Okay,
so looking at our source code files,

00:31:35.370 --> 00:31:37.880
we have a header file
called Unchart Mask,

00:31:37.880 --> 00:31:41.800
and it is a subclass of AMBundleAction.

00:31:41.800 --> 00:31:48.440
And we have the runWithInput
from action error method here.

00:31:48.510 --> 00:31:51.760
It's declared by the superclass.

00:31:51.760 --> 00:31:54.770
The template gives it to us,
so we'll just leave it.

00:31:55.630 --> 00:31:59.100
And as I said,
the default behavior is just to

00:31:59.100 --> 00:32:02.620
return your input to your output.

00:32:02.620 --> 00:32:04.280
And so we're going to modify that.

00:32:04.280 --> 00:32:07.290
I'm going to remove this.

00:32:07.360 --> 00:32:11.430
Drag in the new.

00:32:21.500 --> 00:32:25.080
As I said,
we're using the Core Image Framework.

00:32:25.120 --> 00:32:30.000
We're also using this extended
Core Image Framework that is

00:32:30.000 --> 00:32:31.320
included in your sample code.

00:32:31.340 --> 00:32:36.250
Now, the reason for that is so
that when an image comes in,

00:32:36.250 --> 00:32:42.500
or an image file comes into our workflow,
we convert it to an image object,

00:32:42.500 --> 00:32:44.560
then later on we want to
save it back to the file,

00:32:44.560 --> 00:32:46.410
but we've got to preserve the file name.

00:32:46.620 --> 00:32:49.390
So we use this extended
Core Image Framework,

00:32:49.390 --> 00:32:54.240
which adds a category on Core Image,
so that we can save the original path

00:32:54.240 --> 00:32:58.550
to that image in the image object,
and then we'll have it later on.

00:32:58.580 --> 00:32:59.920
That's what that's there for.

00:33:01.880 --> 00:33:06.300
So in our runWithInput method,
let's look at the code.

00:33:06.380 --> 00:33:10.520
The first thing we do is create
a mutable array called output.

00:33:10.520 --> 00:33:12.270
And we're just going to use this.

00:33:12.280 --> 00:33:15.260
Every time we get a piece of output,
we're going to stick it in there.

00:33:15.260 --> 00:33:19.060
We're going to return it
at the end of our method,

00:33:19.060 --> 00:33:21.580
and that's going to be
the output for our action.

00:33:21.920 --> 00:33:24.130
So what we're going to do--

00:33:24.110 --> 00:33:31.260
is get a Core Image Filter Object,
initialize it with defaults,

00:33:31.380 --> 00:33:35.800
And then the way that we get
the parameters that the user has

00:33:35.800 --> 00:33:42.560
customized is to call self parameters,
object for key, and then the key that

00:33:42.560 --> 00:33:44.090
we're interested in.

00:33:44.270 --> 00:33:46.400
And that's how we access
our parameters dictionary.

00:33:46.400 --> 00:33:49.500
Our default parameters are the
ones that the user has customized,

00:33:49.500 --> 00:33:52.820
and we're just going to take those,
and we're going to pass

00:33:52.820 --> 00:33:54.750
them to that filter object.

00:33:57.920 --> 00:34:04.080
Then, what we're going to do is we're
going to iterate over the input.

00:34:04.120 --> 00:34:07.520
So these should be image objects.

00:34:07.520 --> 00:34:12.030
And for each image object,
we're going to pass the

00:34:12.130 --> 00:34:14.500
filter the image object.

00:34:14.790 --> 00:34:17.790
Then get the resulting output image.

00:34:17.790 --> 00:34:22.210
And as I said, we're trying to save
the original file URL,

00:34:22.440 --> 00:34:26.420
so the new image is different
from the previous one,

00:34:26.420 --> 00:34:28.640
so we just pass that along.

00:34:28.640 --> 00:34:32.670
And then we add the
resulting CI image object.

00:34:32.800 --> 00:35:09.700
[Transcript missing]

00:35:12.800 --> 00:35:38.700
[Transcript missing]

00:35:39.780 --> 00:35:43.430
and we have no nib in here.

00:35:43.430 --> 00:35:44.370
It has no UI.

00:35:44.400 --> 00:35:47.820
And if you present,
if you have no nib in your action,

00:35:47.820 --> 00:35:50.270
you'll still get in
the Automator workflow,

00:35:50.270 --> 00:35:52.210
you'll still get the title
bar and the status bar,

00:35:52.210 --> 00:35:53.360
but just nothing in between.

00:35:53.360 --> 00:35:54.960
It'll just be an empty action.

00:35:54.960 --> 00:35:56.310
There's a lot of actions like that.

00:35:56.360 --> 00:35:59.910
So all we have here is code.

00:36:06.490 --> 00:36:13.050
And here,
let me replace what we need to replace.

00:36:18.280 --> 00:36:19.190
Tada!

00:36:19.210 --> 00:36:23.760
Okay.

00:36:23.760 --> 00:36:27.600
And here we have our runWithInput method.

00:36:28.150 --> 00:36:32.130
And it does a lot of core image
stuff that we don't need to go into,

00:36:32.130 --> 00:36:34.600
but we'll go over it somewhat.

00:36:34.620 --> 00:36:36.100
We get a graphics context.

00:36:36.100 --> 00:36:39.180
Remember I said in this step
we have to actually render our

00:36:39.300 --> 00:36:41.010
core image object to a graphic.

00:36:41.100 --> 00:36:44.100
We have to render it,
which we do into a graphics context.

00:36:44.100 --> 00:36:50.560
So we get a graphics context,
and then we iterate over the input.

00:36:51.450 --> 00:36:56.980
Again, we create a mutable
array to hold our output.

00:36:57.020 --> 00:36:59.780
We iterate over the input.

00:37:01.660 --> 00:37:05.140
So for each image that
comes into this action,

00:37:05.160 --> 00:37:08.800
we're going to get the data for image,
and that calls into a function

00:37:08.800 --> 00:37:10.100
which I have below here.

00:37:10.100 --> 00:37:12.090
We're going to get the
data for that image,

00:37:12.380 --> 00:37:17.400
then we're going to get the path that
that image was originally stored into,

00:37:17.400 --> 00:37:17.400
and

00:37:17.640 --> 00:37:20.460
and we're going to write
the data to the file.

00:37:20.650 --> 00:37:23.450
Now, if an error happens there,

00:37:23.790 --> 00:37:26.640
This is where we return an error.

00:37:26.700 --> 00:37:32.320
We create an error string saying, sorry,
we couldn't do that.

00:37:32.370 --> 00:37:35.090
And then in the error info dictionary,

00:37:35.280 --> 00:37:43.340
We set that error string for this
NSAppleScript error message key.

00:37:43.390 --> 00:37:45.270
AppleScript seems a
little out of place here,

00:37:45.360 --> 00:37:49.940
but Cocoa methods,
it's all AppleScript thing, right?

00:37:49.970 --> 00:37:51.290
Or at least it was originally, yeah.

00:37:51.300 --> 00:37:54.730
It's Cocoa AppleScript, shell scripting,
it's everything.

00:37:54.910 --> 00:37:57.590
So that's how we report errors.

00:37:58.020 --> 00:38:02.400
and there's the data for image method
you can look at on your source code.

00:38:02.400 --> 00:38:09.900
It's nothing particular to Automator,
it's just all core image stuff.

00:38:11.370 --> 00:38:13.900
Back to the slides, please.

00:38:13.980 --> 00:38:18.100
Okay, we went through Save Image to File.

00:38:18.240 --> 00:38:22.700
And now we need to create
the Conversion Action.

00:38:22.910 --> 00:38:25.370
Now, what is a Conversion Action?

00:38:25.970 --> 00:38:29.550
Conversion Actions are really
an essential part of Automator.

00:38:29.700 --> 00:38:32.790
They're completely invisible,
but Automator really wouldn't work

00:38:32.790 --> 00:38:34.900
very well without Conversion Actions.

00:38:35.000 --> 00:38:38.900
They handle the flow of
data between the actions.

00:38:39.140 --> 00:38:44.880
So they can convert data from
completely different types,

00:38:44.880 --> 00:38:50.530
or they can sort of act as filter,
filtering out unwanted types of data.

00:38:50.730 --> 00:38:52.580
They have no UI.

00:38:52.590 --> 00:38:56.840
In fact, you don't supply a nib,
and you shouldn't try and put

00:38:56.840 --> 00:38:59.080
any UI up in a conversion action.

00:39:00.370 --> 00:39:03.470
And they're executed
automatically by Automator.

00:39:03.520 --> 00:39:09.030
Automator will look at, well,
for example, in this example,

00:39:09.030 --> 00:39:12.850
getCurrentSong returns iTunes Songs.

00:39:13.110 --> 00:39:16.310
That's not the files,
but that's actually the iTunes,

00:39:16.450 --> 00:39:22.050
that's a specifier to the
object type in iTunes memory.

00:39:22.280 --> 00:39:25.680
Then it passes that to an action
which takes files and folders.

00:39:25.700 --> 00:39:29.400
Well, there's a conversion action
in there that's actually

00:39:29.400 --> 00:39:31.980
performing that translation.

00:39:32.000 --> 00:39:36.060
It's using AppleScript to
get the iTunes song object,

00:39:36.120 --> 00:39:39.270
getting the location
property out of that object,

00:39:39.340 --> 00:39:44.600
and then creating a list of these
paths and returning that or passing

00:39:44.610 --> 00:39:46.600
that along to the next action.

00:39:46.600 --> 00:39:50.760
And so Automator will determine
when this needs to be done.

00:39:50.760 --> 00:39:53.920
It'll find the correct conversion action.

00:39:53.920 --> 00:39:57.410
It'll even string together a series
of conversion actions if necessary

00:39:57.420 --> 00:40:00.150
to perform the required conversion.

00:40:01.560 --> 00:40:05.400
So how do you create a Conversion Action?

00:40:05.430 --> 00:40:08.760
It's almost exactly identical
to creating a regular Action,

00:40:08.760 --> 00:40:16.470
but you need to change the product
extension to .cAction instead of .action.

00:40:16.730 --> 00:40:20.050
and you delete the main nib file.

00:40:20.050 --> 00:40:21.600
That's probably even optional.

00:40:21.600 --> 00:40:23.850
I think Automator wouldn't
even load it if you had one.

00:40:23.970 --> 00:40:29.620
So you just need to follow those
steps and we'll do that right now.

00:40:29.620 --> 00:40:32.080
If we can go to the demo machine.

00:40:36.300 --> 00:40:40.200
So I'm going to open up step one.

00:40:40.220 --> 00:40:43.500
The completed portion of
this part is in step two,

00:40:43.500 --> 00:40:44.660
if you want to see that.

00:40:44.730 --> 00:40:49.700
But I'm going to open up step one
and make the changes from there.

00:40:55.480 --> 00:41:02.450
Okay, so if we select our target
and open up the inspector,

00:41:02.450 --> 00:41:08.220
what we want to do is click
on the Build tab and scroll

00:41:08.220 --> 00:41:09.470
down until we find...

00:41:10.450 --> 00:41:13.890
The wrapper extension.

00:41:13.980 --> 00:41:14.220
Boop.

00:41:14.220 --> 00:41:15.000
Right there.

00:41:15.010 --> 00:41:17.600
So it says -action by default.

00:41:17.600 --> 00:41:21.340
We want to change that to C action.

00:41:23.460 --> 00:41:26.240
Pretty easy, and we don't have a nib.

00:41:26.250 --> 00:41:29.020
I've already pre-configured the rest.

00:41:29.300 --> 00:41:33.150
Let's look at this to show
you the input and output type.

00:41:33.230 --> 00:41:36.260
So the input type is a Cocoa path,
so we're going to be

00:41:36.270 --> 00:41:43.110
getting paths to files,
and we're going to output our data type,

00:41:43.110 --> 00:41:46.560
Quartz Core, Core Images.

00:41:46.890 --> 00:41:54.600
Now to write the code for that,
wrong button.

00:41:54.620 --> 00:41:57.890
Again we have a runWithInput method.

00:42:11.170 --> 00:42:12.800
So again,
the first thing we do is create a

00:42:12.810 --> 00:42:14.940
mutable array to hold the output.

00:42:15.040 --> 00:42:17.340
Starting to see a pattern here.

00:42:18.140 --> 00:42:20.600
Then we iterate over the input.

00:42:20.950 --> 00:42:23.000
Again, the same thing.

00:42:23.120 --> 00:42:27.040
And we get the file path,
the current file path,

00:42:27.040 --> 00:42:30.840
and we're going to create a
URL in it so that we can put that

00:42:30.840 --> 00:42:32.380
into our image that we create.

00:42:32.380 --> 00:42:40.460
And we're going to create an image,
a CI image object from the URL.

00:42:40.700 --> 00:42:43.350
and put that object in our output.

00:42:43.410 --> 00:42:44.360
It's that simple.

00:42:44.380 --> 00:42:46.480
Most conversion actions
are really simple.

00:42:46.650 --> 00:42:50.240
It's just a way of, like,
of getting an object and then just

00:42:50.340 --> 00:42:54.640
getting a property out of it to convert
the type or something like that.

00:42:54.640 --> 00:42:58.620
So...

00:43:03.130 --> 00:43:05.400
So that's what there is to
creating a conversion action.

00:43:05.400 --> 00:43:08.560
And in a moment,
we should be able to build

00:43:08.560 --> 00:43:09.940
and run the entire workflow.

00:43:10.000 --> 00:43:11.990
Can I go back to the slides?

00:43:14.040 --> 00:43:19.240
Okay, and I'll show you that as
part of debugging an action.

00:43:19.410 --> 00:43:22.380
So, to debug an action,

00:43:22.830 --> 00:43:29.540
There is an executable that the
template will create this executable

00:43:29.700 --> 00:43:40.000
[Transcript missing]

00:43:40.140 --> 00:43:58.330
is the name of the Action,
and it will load that

00:43:58.330 --> 00:43:58.330
Action as Automator launches.

00:43:58.330 --> 00:43:58.330
So that's a way that you can
build and run and debug your

00:43:58.330 --> 00:43:58.330
Action without having to install it.

00:43:58.330 --> 00:43:58.330
And we will show you that.

00:43:58.330 --> 00:43:58.330
And then you can debug as usual.

00:43:58.770 --> 00:44:02.080
Also in the workflow,
if you want to modify or monitor

00:44:02.080 --> 00:44:06.460
and inspect what your action is,
what's coming into it,

00:44:06.530 --> 00:44:09.720
what's going out of it,
the View Results Action is

00:44:09.720 --> 00:44:10.840
very handy for that.

00:44:11.060 --> 00:44:14.630
It'll show you all the information.

00:44:14.970 --> 00:44:18.790
And then there's also a workflow
log which will show you actions

00:44:18.850 --> 00:44:23.530
that are being run at what time,
what conversions are happening.

00:44:23.730 --> 00:44:25.160
et cetera.

00:44:25.280 --> 00:44:27.260
So let's debug an action.

00:44:27.260 --> 00:44:28.800
Whoops.

00:44:28.800 --> 00:44:31.950
We can go back to demo machine.

00:44:33.680 --> 00:44:39.600
Alright, so I'm going to go back to
the action that we created,

00:44:39.600 --> 00:44:42.480
which was this one.

00:44:42.480 --> 00:44:46.720
And I need to do two things.

00:44:46.720 --> 00:44:51.000
I just need to import
our custom framework.

00:44:55.250 --> 00:44:58.250
Library Frameworks.

00:44:58.250 --> 00:45:00.380
That's not it.

00:45:00.380 --> 00:45:03.260
Sorry, wrong disk.

00:45:03.750 --> 00:45:11.750
Okay, Library Frameworks,
and there's our custom framework.

00:45:11.800 --> 00:45:12.680
Yes.

00:45:12.780 --> 00:45:16.120
And import the Quartz.

00:45:17.760 --> 00:45:23.630
Core Image Framework in
System Library Frameworks.

00:45:23.660 --> 00:45:25.370
Quartz Core.

00:45:27.360 --> 00:45:33.950
Okay, I'm going to set a breakpoint
on the runWithInput method.

00:45:34.730 --> 00:45:37.480
and let me just make
sure of one property.

00:45:37.750 --> 00:45:40.010
Okay.

00:45:40.100 --> 00:45:48.100
[Transcript missing]

00:45:55.340 --> 00:45:59.800
should launch... Oh, sorry, one mistake.

00:45:59.800 --> 00:46:02.070
Automator was already running.

00:46:02.340 --> 00:46:04.340
I don't want to run a second copy.

00:46:04.340 --> 00:46:08.180
Here we go.

00:46:08.930 --> 00:46:10.810
Launching Automator.

00:46:15.700 --> 00:46:21.930
Okay, and I have a preset workflow here
that we're going to test out.

00:46:21.980 --> 00:46:28.370
Now what this does is we're
gonna get an image file.

00:46:29.780 --> 00:46:32.940
We're going to copy it to the desktop.

00:46:33.020 --> 00:46:35.700
We're going to run the
Unsharp Mask filter on it,

00:46:35.730 --> 00:46:38.890
and I've got the settings turned
way up so that we can see-- because

00:46:39.000 --> 00:46:43.180
it's kind of a subtle action-- so
that we can see the effects of it.

00:46:43.340 --> 00:46:46.780
Then it's going to save that to file.

00:46:47.850 --> 00:46:50.500
And I've got this other step so that
we can see the before and after.

00:46:50.500 --> 00:46:53.260
We're going to get the
original image again,

00:46:53.260 --> 00:46:54.050
and it's going to add it.

00:46:54.110 --> 00:46:56.000
So we've got the modified
and the original one,

00:46:56.000 --> 00:46:58.600
and then we're going to
open them both in preview.

00:46:58.620 --> 00:47:03.300
But it should break on Unsharp
Mask in the run with action.

00:47:03.420 --> 00:47:05.010
There we are.

00:47:07.300 --> 00:47:15.290
and we can step through it if we want.

00:47:15.290 --> 00:47:15.290
There aren't any bugs
here that I know about,

00:47:15.290 --> 00:47:15.290
but we can step through it.

00:47:15.940 --> 00:47:18.940
and look and see.

00:47:18.960 --> 00:47:20.640
There we've created an image.

00:47:20.810 --> 00:47:22.260
We have a resulting image.

00:47:22.490 --> 00:47:24.360
We're gonna add it to the output.

00:47:24.610 --> 00:47:26.710
Return the output.

00:47:27.490 --> 00:47:33.720
and should launch preview and
there we can see it really

00:47:33.870 --> 00:47:34.990
sharpened the heck out of it.

00:47:34.990 --> 00:47:37.830
There we go.

00:47:41.510 --> 00:47:45.260
Okay, back to the slides.

00:47:45.300 --> 00:47:46.690
Okay, so what did we learn?

00:47:46.780 --> 00:47:50.800
We learned guidelines
and designing actions,

00:47:50.860 --> 00:47:54.230
how to create actions
and conversion actions,

00:47:54.550 --> 00:47:56.400
How to debug them.

00:47:56.410 --> 00:47:59.940
It's all really very similar
to what you're used to doing

00:47:59.940 --> 00:48:03.500
in regular Objective C apps.

00:48:03.500 --> 00:48:05.240
And just how easy it is.

00:48:05.300 --> 00:48:08.450
Each of these pieces is just small,
and you can quickly create

00:48:08.680 --> 00:48:09.870
a whole slew of them.

00:48:09.930 --> 00:48:14.650
That's probably why there's 550
Automator Actions out there already.

00:48:16.110 --> 00:48:17.130
So, more information.

00:48:17.270 --> 00:48:20.390
We've got the standard
ADC website for documentation,

00:48:20.440 --> 00:48:22.200
sample code.

00:48:22.620 --> 00:48:23.860
and related sessions.

00:48:23.940 --> 00:48:29.000
Tomorrow morning is a lab for
Automator Action development.

00:48:29.020 --> 00:48:31.430
Please come by and
give us your questions.

00:48:31.430 --> 00:48:33.200
We'd love to help you out.

00:48:33.210 --> 00:48:36.480
Also, tomorrow afternoon is the
Building Automator Actions for

00:48:36.480 --> 00:48:38.340
System Administrators session.

00:48:38.640 --> 00:48:41.360
I believe most of that will
be the shell script action,

00:48:41.360 --> 00:48:43.020
but it should be very interesting.

00:48:43.020 --> 00:48:45.490
Who to contact?

00:48:45.490 --> 00:48:48.990
Sal, who you all know.

00:48:50.240 --> 00:48:52.120
Inside Joke, sorry.

00:48:52.220 --> 00:48:55.390
And Todd Fernandez,
the Engineering Manager.

00:48:55.670 --> 00:48:58.920
Also,
there's the Automator Dev mailing list.

00:48:59.400 --> 00:49:01.100
Get on that.

00:49:01.100 --> 00:49:02.820
It's very interesting reading.

00:49:02.900 --> 00:49:07.380
And with that,
we'll invite John Montbreon for the Q&A.