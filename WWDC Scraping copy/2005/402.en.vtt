WEBVTT

00:00:00.140 --> 00:00:02.000
Good morning and welcome.

00:00:02.000 --> 00:00:05.300
This is the Adopting Xcode:
A Hands-on Tour.

00:00:05.300 --> 00:00:08.680
How many of you were here for
the 9:00 session this morning,

00:00:08.820 --> 00:00:11.000
the introduction to Xcode 2.1?

00:00:11.000 --> 00:00:11.990
Same seats and everything.

00:00:12.030 --> 00:00:12.490
Good.

00:00:12.770 --> 00:00:17.210
How many of you have not used
Xcode before or have only

00:00:17.210 --> 00:00:20.540
used Xcode 1.5 or earlier?

00:00:21.110 --> 00:00:21.420
Good.

00:00:21.690 --> 00:00:23.560
You're the right audience for this.

00:00:23.680 --> 00:00:24.890
This is going to be a little adventurous.

00:00:24.970 --> 00:00:28.180
This is the first hands-on
session that we've done.

00:00:28.230 --> 00:00:30.760
This is not going to be
me talking slides at you.

00:00:30.930 --> 00:00:33.100
This is not even going to be a demo.

00:00:33.340 --> 00:00:35.430
This will be a follow-me session.

00:00:35.620 --> 00:00:37.240
I see a lot of PowerBooks open.

00:00:37.400 --> 00:00:37.890
That's great.

00:00:38.000 --> 00:00:40.760
I hope you have fully charged
batteries for this one.

00:00:40.760 --> 00:00:46.770
And we want you to have Xcode 2.1
installed and the appearance sample

00:00:46.870 --> 00:00:50.230
upgrade project downloaded from ADC.

00:00:50.240 --> 00:00:54.080
How many of you are in that situation?

00:00:54.340 --> 00:00:55.120
Awesome!

00:00:55.170 --> 00:00:57.810
Okay, the rest of you, if you don't,
you can either watch what

00:00:57.900 --> 00:01:00.200
we're doing on the screen or
watch your neighbor's screen.

00:01:00.300 --> 00:01:04.840
We're going to try to take it milestone
by milestone so that you can follow

00:01:04.840 --> 00:01:06.430
us and look at what we're doing.

00:01:06.670 --> 00:01:10.460
I'm Chris Espinosa,
the manager of DT Productivity.

00:01:10.510 --> 00:01:13.660
We're going to be introducing the
Xcode development environment for

00:01:13.730 --> 00:01:15.280
you who haven't used it before.

00:01:15.410 --> 00:01:17.520
It's a full function
development environment that

00:01:17.520 --> 00:01:21.500
integrates project management,
a code editor, a build system,

00:01:21.530 --> 00:01:22.250
and a debugger.

00:01:22.360 --> 00:01:27.760
If you've used other IDEs like
Code Warrior and Visual Studio,

00:01:27.760 --> 00:01:29.200
it's like that.

00:01:29.410 --> 00:01:32.230
The good news is that
whatever you have used before,

00:01:32.440 --> 00:01:36.500
Xcode probably has something
that does what you want.

00:01:36.560 --> 00:01:39.210
The bad news is that
whatever you've used before,

00:01:39.210 --> 00:01:41.950
Xcode probably does it
a little bit different.

00:01:42.050 --> 00:01:45.080
So we're going to be doing a lot
of orienteering in this session,

00:01:45.180 --> 00:01:49.410
helping you map what you
understand from your current

00:01:49.420 --> 00:01:51.260
environment to what Xcode does.

00:01:51.460 --> 00:01:51.460
You're going to learn
the basics of Xcode,

00:01:51.460 --> 00:01:51.460
and we're going to be talking about how
to use it in a little bit different way.

00:01:51.460 --> 00:01:51.620
We're going to be talking about how to
use it in a little bit different way.

00:01:51.620 --> 00:01:51.620
You're going to learn
the basics of Xcode,

00:01:51.620 --> 00:01:51.700
and we're going to be talking about how
to use it in a little bit different way.

00:01:52.050 --> 00:01:54.450
You're going to learn the
basics of working with Xcode,

00:01:54.460 --> 00:01:57.480
the similarities and differences
between Xcode and the other

00:01:57.480 --> 00:02:01.050
IDEs that you may be familiar with,
and do this mental mapping from

00:02:01.260 --> 00:02:07.000
Code Warrior or Visual Studio,
or even make file concepts to Xcode.

00:02:07.100 --> 00:03:34.500
[Transcript missing]

00:03:36.900 --> 00:03:41.480
Bringing your project into Xcode,
if you are coming from Code Warrior,

00:03:41.570 --> 00:03:44.290
the best thing to do is make
sure that you've got a great

00:03:44.400 --> 00:03:48.700
Code Warrior Tiger application
before you bring it into Xcode 2.1.

00:03:49.060 --> 00:03:53.200
The more work you do in an
environment you are familiar with,

00:03:53.300 --> 00:03:56.510
the easier it will be to transition
to the unfamiliar environment.

00:03:57.170 --> 00:03:59.830
The biggest failures I've seen
are people who have been using

00:03:59.960 --> 00:04:05.120
Code Warrior 8.3 or something like that,
have never built for Tiger,

00:04:05.140 --> 00:04:08.440
have a CFM application
that isn't up on Mako,

00:04:08.830 --> 00:04:11.930
they're not using Carbon Events,
and they try to import

00:04:11.930 --> 00:04:13.120
their project into Xcode.

00:04:14.020 --> 00:04:17.270
And then they have to face the
entire transition all at once

00:04:17.270 --> 00:04:19.210
in an unfamiliar environment.

00:04:19.340 --> 00:04:21.210
Try not to do that.

00:04:21.660 --> 00:04:25.430
Needless to say,
Xcode is an environment for

00:04:25.560 --> 00:04:27.700
Cocoa and Carbon applications.

00:04:27.740 --> 00:04:30.910
It won't build -- if you're
starting with something that

00:04:30.910 --> 00:04:34.580
has not even been carbonized,
you need to start somewhere else.

00:04:34.770 --> 00:04:36.210
Make the migration to MacO.

00:04:36.410 --> 00:04:38.400
CFM is not supported on Intel.

00:04:38.400 --> 00:04:42.040
It's not supported for PPC64.

00:04:42.120 --> 00:04:46.020
MacO is the native executable
format on Mac OS X,

00:04:46.120 --> 00:04:50.140
and you need to have your code
building for MacO in order

00:04:50.140 --> 00:04:51.490
to use Xcode successfully.

00:04:51.500 --> 00:04:54.500
And prepare your code for GCC 4.0.

00:04:54.500 --> 00:04:58.250
GCC 4.0 is the compiler
for universal binaries.

00:04:58.280 --> 00:05:03.300
There's a session later on this
week about differences in GCC 4.0.

00:05:03.300 --> 00:05:08.600
It's a lot stricter on C++ compliance
than earlier versions of GCC,

00:05:08.600 --> 00:05:12.100
and there are some things you need
to know about its idiosyncrasies.

00:05:12.100 --> 00:05:20.090
So a lot of your coding work is going
to be in just compiler-specific changes.

00:05:20.440 --> 00:05:23.060
So we're going to start at milestone one.

00:05:23.250 --> 00:05:26.790
If you have opened up the
appearance sample updated project,

00:05:26.790 --> 00:05:30.600
loaded milestone one,
loaded that .Xcode project,

00:05:30.700 --> 00:05:33.750
we're going to talk
about groups and files.

00:05:33.860 --> 00:05:37.680
If you're familiar with the
Code Warrior project window,

00:05:37.690 --> 00:05:41.580
then Xcode has a project window
that is remarkably similar to it.

00:05:41.780 --> 00:05:46.300
It lists the files in your
applications organized into groups,

00:05:46.300 --> 00:05:48.630
and you use it to navigate your project.

00:05:48.790 --> 00:05:53.560
If you're familiar with Visual Studio,
you could set up the all-in-one

00:05:53.740 --> 00:05:59.160
layout in Xcode preferences,
and you see your groups in your files,

00:05:59.300 --> 00:06:02.370
and your embedded editor window.

00:06:02.650 --> 00:06:05.650
Xcode has a mode that
works like that as well.

00:06:05.770 --> 00:06:08.800
So if you're familiar
with these environments,

00:06:08.800 --> 00:06:11.950
you can find your way
around the groups and files.

00:06:12.140 --> 00:06:17.120
And to take you through exercise one,
milestone one, here's Scott Tooker.

00:06:17.240 --> 00:06:18.320
Scott Tooker: Hi.

00:06:18.370 --> 00:06:21.900
Scott Tooker: So just to give another
quick overview here,

00:06:21.930 --> 00:06:24.640
there's actually going to be
-- there are going to be at

00:06:24.780 --> 00:06:26.510
least five milestones today,
and we're starting out

00:06:26.520 --> 00:06:27.580
with appearance sample one.

00:06:27.760 --> 00:06:30.160
And in this one,
we're going to talk about the build.

00:06:30.250 --> 00:06:31.320
I'm just going to give a quick tour.

00:06:31.320 --> 00:06:32.380
This is going to be kind of simple.

00:06:32.380 --> 00:06:35.180
If you've used Xcode 1.5 before,
some of this may be review,

00:06:35.180 --> 00:06:36.860
but it's good review.

00:06:36.950 --> 00:06:40.620
So the first thing I've done here is
I've opened up appearance sample one.

00:06:40.660 --> 00:06:44.060
And so you should have on your screen
-- I'm using the default layout.

00:06:44.340 --> 00:06:47.880
So if you use the default layout,
this is what it's going to look like.

00:06:47.880 --> 00:06:49.630
It's going to be a
little different layout,

00:06:49.630 --> 00:06:50.990
but all the pieces are still there.

00:06:51.090 --> 00:06:53.550
So the first thing I'm going to
do is just build this project.

00:06:53.550 --> 00:06:56.170
And if you've never been to Xcode before,
it can be kind of daunting

00:06:56.180 --> 00:06:58.290
because it's like,
well, you know, I click build,

00:06:58.290 --> 00:07:00.080
but where's the build information?

00:07:00.280 --> 00:07:06.190
So if we go ahead here, let's go ahead,
and I'm just going to do a clean.

00:07:09.710 --> 00:07:13.080
Now I can click build here,
but let me bring up the build

00:07:13.080 --> 00:07:16.570
results window because this is
actually going to show all the

00:07:16.580 --> 00:07:17.700
information that goes on during build.

00:07:17.700 --> 00:07:18.860
Let's make that a little bit bigger.

00:07:18.940 --> 00:07:21.510
And then go ahead and click build.

00:07:21.620 --> 00:07:24.270
So what you'll notice here is we're
going through and we're going through

00:07:24.270 --> 00:07:26.450
the various steps of building.

00:07:26.870 --> 00:07:29.160
Now there's a lot of different
levels of disclosure here.

00:07:29.160 --> 00:07:31.540
Right now we're just looking at the
warnings that are coming through,

00:07:31.540 --> 00:07:33.260
but there's a lot more to see.

00:07:33.390 --> 00:07:36.500
For example,
if you click on the check mark here,

00:07:36.500 --> 00:07:38.880
you'll actually see every step.

00:07:40.700 --> 00:07:42.940
And you can just toggle that to
either show all the steps or just,

00:07:42.940 --> 00:07:44.920
in this case, if we have any warnings.

00:07:45.000 --> 00:07:46.940
You can also say,
I don't want to see any warnings,

00:07:46.940 --> 00:07:48.090
I just want to see errors.

00:07:48.100 --> 00:07:51.200
And you do that by
toggling this checkbox.

00:07:52.220 --> 00:07:58.420
And then finally, we also have the actual
build transcript here.

00:07:58.530 --> 00:08:00.970
And one of the nice things about
the build transcript is that it's

00:08:00.970 --> 00:08:02.960
linked with the information above.

00:08:03.020 --> 00:08:04.510
So, for example,
if I look at all the steps

00:08:04.560 --> 00:08:06.540
and click on one of these,
click on one of the steps,

00:08:06.680 --> 00:08:09.460
you'll notice that I automatically
go in the build transcript

00:08:09.620 --> 00:08:11.810
to that part of the log.

00:08:11.910 --> 00:08:16.490
This becomes very useful when you want
to see exactly how something's being done

00:08:16.650 --> 00:08:19.000
or when you want to go look for an error.

00:08:19.000 --> 00:08:22.830
Or you want to see an exact error
warning and see when it happened.

00:08:23.500 --> 00:08:27.400
So, okay, if -- also I'd like to
mention at this point,

00:08:27.400 --> 00:08:32.110
I'm purposely doing this on a
PowerBook G4 because it seemed

00:08:32.110 --> 00:08:34.890
that doing it on a G5 was unfair.

00:08:34.980 --> 00:08:37.650
So I'm trying to pace this
so people can keep up.

00:08:37.780 --> 00:08:43.430
This is a 1 GHz G4,
so hopefully I won't get too far ahead.

00:08:44.080 --> 00:08:45.560
So anyway, we've gone here, we've built.

00:08:45.580 --> 00:08:47.970
You'll notice that it succeeded.

00:08:48.040 --> 00:08:52.370
So if you go ahead and if you
close the Build Results window,

00:08:52.370 --> 00:08:55.320
where does the product end up?

00:08:55.430 --> 00:08:58.010
Well by default,
Xcode puts products in a group

00:08:58.010 --> 00:08:59.360
called Products down here.

00:08:59.360 --> 00:09:00.480
You can disclose it.

00:09:00.480 --> 00:09:02.720
And we actually have what's
called a product reference.

00:09:02.720 --> 00:09:04.240
This is a reference to your product.

00:09:04.340 --> 00:09:07.840
And you can actually, in 2.1,
you can go through and you can

00:09:07.840 --> 00:09:10.610
actually disclose the contents
and see exactly what's in there.

00:09:10.640 --> 00:09:13.640
So for example,
if I double click on this Info.plist,

00:09:13.720 --> 00:09:14.800
you can double click on it.

00:09:14.800 --> 00:09:16.890
You'll see exactly what was produced.

00:09:16.940 --> 00:09:19.600
This is really nice sometimes when
you have a complex setup and you have

00:09:19.760 --> 00:09:20.880
a bunch of files you're putting in.

00:09:20.880 --> 00:09:24.410
This gives you a quick way to look
through and see exactly what was put

00:09:24.410 --> 00:09:27.070
into the product that Xcode built.

00:09:27.940 --> 00:09:32.960
So speaking of the products group,
we're just going to go through

00:09:33.090 --> 00:09:37.050
a quick kind of mini tutorial on
how our files and groups work.

00:09:37.090 --> 00:09:40.780
Anyone who's coming from Code Warrior,
this is going to be very similar.

00:09:41.000 --> 00:09:45.720
A lot of our files and groups
layout was inspired by Code Warrior.

00:09:45.840 --> 00:09:47.440
So for example,
one of the things I want to

00:09:47.440 --> 00:09:49.690
do with Appearance Sample
is I'd like to clean it up.

00:09:49.800 --> 00:09:51.700
Appearance Sample is a very old project.

00:09:51.800 --> 00:09:53.580
It started out as a Code Warrior project.

00:09:53.660 --> 00:09:58.030
It's moved into Project Builder,
then Xcode, Xcode 2, Xcode 2.1.

00:09:58.090 --> 00:09:59.640
And so there's a little bit of cruft.

00:09:59.860 --> 00:10:02.360
One thing that's unfortunate
is they have a sources folder,

00:10:02.360 --> 00:10:04.380
and I think, well,
that's where all my sources are.

00:10:04.430 --> 00:10:05.380
But not really.

00:10:05.440 --> 00:10:08.090
You'll notice if you
disclose the mega-dialog,

00:10:08.090 --> 00:10:11.710
there are sources there,
and there are sources under C/Dev.

00:10:11.820 --> 00:10:14.290
So just as a quick tutorial,
we're going to clean

00:10:14.290 --> 00:10:15.390
this up a little bit.

00:10:15.490 --> 00:10:18.470
So the first thing I want
to do is my sources folder

00:10:18.490 --> 00:10:20.280
is just kind of a mismatch.

00:10:20.400 --> 00:10:22.930
If you actually open it up and look,
you'll see there's a mismatch

00:10:22.960 --> 00:10:25.480
of different -- mishmash
of different classes.

00:10:25.480 --> 00:10:30.040
And what I'd like to do is have
some directories inside of here to

00:10:30.140 --> 00:10:32.070
provide a little bit more structure.

00:10:32.170 --> 00:10:34.460
So what I'm going to do
is I'm going to go ahead,

00:10:34.460 --> 00:10:39.280
and I'm going to create a new group,
and you can do this by going to File,

00:10:39.360 --> 00:10:40.470
New Group.

00:10:43.100 --> 00:10:45.600
And I'm going to call this one Dialogues.

00:10:45.690 --> 00:10:48.440
Okay, well now what I want to do is
pull everything out of sources

00:10:48.440 --> 00:10:50.100
that had to do with Dialogues.

00:10:50.230 --> 00:10:52.840
Well, one of the nice things I can do
here is you'll notice I've select

00:10:52.950 --> 00:10:56.600
-- if you select the sources group
that we show in the detail view

00:10:56.600 --> 00:11:00.550
all the files underneath sources,
and then I can use the search field,

00:11:00.550 --> 00:11:02.640
if you click in the search field and type

00:11:20.270 --> 00:11:20.280
So I'm going to go ahead and
if you select all those and

00:11:20.280 --> 00:11:20.280
drag them underneath dialogs,
now they're located underneath dialogs.

00:11:20.280 --> 00:11:20.280
And I can do the same thing.

00:11:21.130 --> 00:11:24.000
Go ahead now, and you can also,
we also have contextual menus,

00:11:24.070 --> 00:11:27.440
so I want to add another group,
so I'm just going to go to the

00:11:27.440 --> 00:11:29.480
contextual menu and say new group.

00:11:31.320 --> 00:11:34.140
Go ahead now, and you can also,
we also have contextual menus,

00:11:34.140 --> 00:11:37.490
so I want to add another group,
so I'm just going to go to the

00:11:37.540 --> 00:11:39.520
contextual menu and say new group.

00:11:44.390 --> 00:11:48.100
And the same kind of thing,
just drag them over underneath Windows.

00:11:48.230 --> 00:11:50.090
And you can obviously have
groups and other groups.

00:11:50.100 --> 00:11:51.900
So for example,
what I'm going to do is I'm

00:11:51.900 --> 00:11:56.010
going to take the MegaDialog
and drag it underneath Dialog.

00:11:56.350 --> 00:11:59.400
And then finally,
we obviously support multiple selection,

00:11:59.400 --> 00:12:03.270
so I'm just going to take all
of these source directories and

00:12:03.270 --> 00:12:06.000
drag them underneath sources.

00:12:06.120 --> 00:12:07.910
And there they all are.

00:12:09.540 --> 00:12:11.760
Now, if you want to rename something,
for example,

00:12:11.760 --> 00:12:14.520
this external framework's in-- wow,
I have to extend it all the

00:12:14.520 --> 00:12:15.740
way out to here to read it.

00:12:15.990 --> 00:12:18.180
But all that's really in here,
if we open it up,

00:12:18.180 --> 00:12:19.620
is the Carbon Framework.

00:12:19.810 --> 00:12:21.650
So I want to change this name.

00:12:21.740 --> 00:12:26.680
Renaming folder references
and groups is very simple.

00:12:26.680 --> 00:12:30.860
You simply just-- you
can either option click,

00:12:30.860 --> 00:12:34.600
or you can just select Rename and rename.

00:12:34.610 --> 00:12:35.830
It's very similar to
Code Warrior in this respect.

00:12:36.710 --> 00:12:38.410
And then finally,
we have this supporting files group.

00:12:38.460 --> 00:12:39.190
Well, it has this readme.

00:12:39.270 --> 00:12:41.150
Well, it would be great if the readme
was up top so when people

00:12:41.280 --> 00:12:44.560
first opened up this project,
they could see exactly where it was.

00:12:44.660 --> 00:12:48.430
So what I'm going to go ahead and do
is I'm just going to ungroup this.

00:12:48.550 --> 00:12:51.720
And you can go ahead and do
this by just using the context

00:12:51.760 --> 00:12:53.390
menu and selecting ungroup.

00:12:53.550 --> 00:12:58.720
Or you can just go to the file menu.

00:12:59.180 --> 00:13:00.680
Oh, sorry, sorry.

00:13:00.830 --> 00:13:03.100
Getting ahead of myself.

00:13:03.150 --> 00:13:05.020
Currently, this is only available
in the context menu.

00:13:05.180 --> 00:13:07.080
So go to the context
menu and say ungroup.

00:13:07.080 --> 00:13:09.080
And then we'll just drag this up top.

00:13:09.890 --> 00:13:12.640
So now we've just done
a few simple things,

00:13:12.760 --> 00:13:14.780
and none of this has affected
any of our build process.

00:13:15.020 --> 00:13:17.110
This is all just managing
your files and groups.

00:13:17.150 --> 00:13:19.200
It's completely divorced from
what we've actually built,

00:13:19.200 --> 00:13:20.240
what the build products are.

00:13:20.300 --> 00:13:22.090
And in fact,
what I can do is I can just go

00:13:22.090 --> 00:13:23.490
ahead and click Build again.

00:13:23.710 --> 00:13:26.800
And you'll notice nothing needed to
be redone because it's all the same.

00:13:26.800 --> 00:13:33.030
And with that,
I'll hand it back to Chris.

00:13:33.030 --> 00:13:33.030
Great.

00:13:33.030 --> 00:13:33.030
How many people kept up?

00:13:34.040 --> 00:13:34.840
That's awesome.

00:13:35.070 --> 00:13:35.900
That's great.

00:13:35.900 --> 00:13:37.080
If you have -- pardon?

00:13:37.260 --> 00:13:37.960
I got a crash.

00:13:38.220 --> 00:13:38.490
Great!

00:13:38.530 --> 00:13:42.620
Click "Report to Apple."

00:13:49.590 --> 00:13:52.410
If you have not kept up,
or if you've just gotten up to

00:13:52.590 --> 00:13:56.980
speed with Xcode 2.0 installed,
you may now move to Milestone 2.

00:13:56.980 --> 00:14:01.060
Milestone 2 is the same project,
but it's in the configuration

00:14:01.080 --> 00:14:02.290
that Scott ended at.

00:14:02.630 --> 00:14:04.500
And that's true for every
milestone in this session.

00:14:04.500 --> 00:14:07.730
If you can't keep up,
you can just close that milestone,

00:14:07.730 --> 00:14:10.930
open up the next milestone
for the next segment.

00:14:11.000 --> 00:16:01.900
[Transcript missing]

00:16:03.600 --> 00:16:05.690
Clicker.

00:16:05.720 --> 00:16:08.090
Now in Code Warrior,
if you're used to targets

00:16:08.590 --> 00:16:12.660
being in a target pane,
we move targets out into the

00:16:12.660 --> 00:16:15.970
regular groups and files tree so
you can look at targets at the

00:16:16.080 --> 00:16:19.320
same time you're looking at files,
and it makes it easier to drag and

00:16:19.410 --> 00:16:22.950
drop between the two because you're
dragging and dropping in the same tree.

00:16:23.080 --> 00:16:25.620
But the organizational
concept is still the same.

00:16:25.620 --> 00:16:31.080
A target is a bucket into which you pour
source files that you set settings on.

00:16:31.110 --> 00:16:33.320
You choose a target you're building now.

00:16:33.320 --> 00:16:36.190
When you build that target,
it comes out with the build project,

00:16:36.320 --> 00:16:37.130
build product.

00:16:37.240 --> 00:16:41.360
The concept is the same in
Xcode as it is in Code Warrior.

00:16:41.490 --> 00:16:45.460
If you're coming from Visual Studio,
they use slightly different terminology.

00:16:45.610 --> 00:16:51.350
What we call a target is
what they call a project,

00:16:51.430 --> 00:16:54.610
and what we call a project
is what they call a solution.

00:16:54.840 --> 00:16:57.830
So think of them as just
being one time zone over.

00:16:57.840 --> 00:17:01.380
Just push it over a little bit,
and the terminology maps.

00:17:01.380 --> 00:17:08.840
So if you're coming from Visual Studio,
when I say project,

00:17:08.840 --> 00:17:11.380
I don't mean project in your sense.

00:17:11.380 --> 00:17:12.480
I mean solution.

00:17:12.480 --> 00:17:15.920
And when I say target, I mean project.

00:17:15.920 --> 00:17:17.260
You can do that mapping.

00:17:17.260 --> 00:17:19.720
You use Windows, you're accustomed to it.

00:17:19.720 --> 00:17:22.500
If you're coming from
the make file world,

00:17:22.500 --> 00:17:26.220
well, make files are a little different
in that everything is a target.

00:17:26.220 --> 00:17:31.580
It's just a smooth transition of
granularity from I build one.cp

00:17:31.580 --> 00:17:36.980
file and get one.o file to I have
a make file that builds this entire

00:17:36.990 --> 00:17:39.420
executable with all of my steps.

00:17:39.600 --> 00:17:45.790
And every dependency where a source
creates something is called a target.

00:17:45.800 --> 00:17:48.330
We work on a much coarser granularity.

00:17:48.440 --> 00:17:53.080
A target is a set of settings and
a collection of sources that build

00:17:53.080 --> 00:17:57.340
a build product that's usually
something that you debug or deploy.

00:17:57.520 --> 00:18:01.670
So targets on a granular make file level,
or can be really tiny

00:18:01.670 --> 00:18:04.670
things or really big things,
we're only talking about

00:18:04.670 --> 00:18:06.140
the really big things here.

00:18:06.140 --> 00:18:08.820
So now to guide you through
what's in the target,

00:18:08.840 --> 00:18:12.970
how to edit targets, how to use targets,
we're going to do the milestone two,

00:18:12.970 --> 00:18:15.360
targets and files hands on.

00:18:15.360 --> 00:18:16.020
Hi.

00:18:16.020 --> 00:18:19.750
So you'll notice that I've gone ahead,
I've closed-- I've opened

00:18:19.750 --> 00:18:20.780
up the second milestone.

00:18:20.780 --> 00:18:23.320
This milestone, as Chris said,
is going to be about targets.

00:18:23.320 --> 00:18:26.130
And what we're going to do in this
case is a fairly simple operation.

00:18:26.210 --> 00:18:28.780
We're going to add a new
target to this project.

00:18:28.780 --> 00:18:30.280
So appearance sample.

00:18:30.280 --> 00:18:33.200
It's not a big project,
but for the purposes,

00:18:33.200 --> 00:18:34.620
let's assume it's a huge project.

00:18:34.670 --> 00:18:38.350
And we want to actually factor out
some of the code into a static library.

00:18:38.450 --> 00:18:41.740
So what I'm going to do now is
I'm going to go to the targets.

00:18:41.790 --> 00:18:45.240
I'm going to go to project,
go ahead to project new target,

00:18:45.260 --> 00:18:47.050
select that.

00:18:47.690 --> 00:18:53.720
And you want to select
the Carbon static library.

00:18:53.720 --> 00:18:55.460
You can call this whatever you want.

00:18:55.460 --> 00:18:58.600
I'm going to call it MegaDialog since
what I'm going to do is pull in the

00:18:58.640 --> 00:19:00.390
MegaDialog code into this target.

00:19:01.800 --> 00:19:05.780
And so you notice what we do is we
immediately bring up a target inspector

00:19:05.780 --> 00:19:07.670
or a get info window for the target.

00:19:07.720 --> 00:19:10.140
I'm going to go ahead and
close that for right now,

00:19:10.140 --> 00:19:11.740
but we'll be coming back to it.

00:19:12.350 --> 00:19:16.390
Now, what I want to do is if
we go look in sources,

00:19:16.500 --> 00:19:19.170
if you disclose sources
and disclose dialogues,

00:19:19.170 --> 00:19:21.140
select the mega dialogue group.

00:19:21.140 --> 00:19:23.020
You'll notice, okay,
here is selection of files.

00:19:23.020 --> 00:19:25.220
I want to add all these to the target.

00:19:25.670 --> 00:19:27.450
Well, in 2.1, this is really simple.

00:19:27.680 --> 00:19:32.350
All I need to do is let me
get information on that group,

00:19:32.400 --> 00:19:35.000
switch to the Targets tab,

00:19:36.090 --> 00:19:38.650
And then what you're going to do is
just change the target membership.

00:19:38.850 --> 00:19:42.650
Just click on MegaDialog,
unclick on Appearance Sample.

00:19:49.310 --> 00:19:55.140
And so for example, and just to show you,
if you go and disclose the target,

00:19:55.140 --> 00:19:59.950
now when we compile the sources,
you can see all these sources are here.

00:20:02.000 --> 00:20:04.100
Now, there are a few other
things I need to do here.

00:20:04.380 --> 00:20:08.140
Because I want Appearance Sample
to use the MegaDialog product,

00:20:08.140 --> 00:20:10.900
I need to go ahead and
also add the product.

00:20:11.020 --> 00:20:13.850
So you'll notice here
I have this libMegaDialog.a.

00:20:13.960 --> 00:20:16.530
It's red because we show files
in red when they don't exist.

00:20:16.710 --> 00:20:19.490
These products haven't been built yet.

00:20:19.860 --> 00:20:22.980
So for example, I'm going to go ahead and
bring up that same info window,

00:20:22.980 --> 00:20:25.540
this time for the library product.

00:20:25.570 --> 00:20:27.660
And I can use the same targets panel.

00:20:27.660 --> 00:20:30.820
I can just say, you know what,
I want this to be included in

00:20:30.820 --> 00:20:32.660
my appearance sample target.

00:20:32.920 --> 00:20:34.860
Okay.

00:20:34.860 --> 00:20:36.140
Now there's one final thing.

00:20:36.250 --> 00:20:40.060
We need to make sure that the MegaDialog
gets built -- library gets built

00:20:40.060 --> 00:20:41.900
before we build AppearanceSample.

00:20:41.990 --> 00:20:49.850
And so all I need to do here is just
take the MegaDialog target and drag

00:20:49.850 --> 00:20:49.850
it under the AppearanceSample target,
and I've created a target dependency.

00:20:51.200 --> 00:20:57.300
So now, after doing these steps,
if you go ahead and click build,

00:20:58.690 --> 00:21:00.400
and go to build and bring
up the build results window.

00:21:00.400 --> 00:21:02.610
You notice that we're building the,
even though the active

00:21:02.610 --> 00:21:05.180
target is appearance sample,
you should be building the

00:21:05.180 --> 00:21:07.680
mega dialog target first.

00:21:09.600 --> 00:21:13.030
is going to be talking about
the Xcode 2.1 and then building

00:21:13.030 --> 00:21:14.790
the appearance sample target.

00:21:14.860 --> 00:21:18.000
And it's really that simple
for factoring out your code.

00:21:18.000 --> 00:21:21.400
If you want to take commonly used
code and put it into a library,

00:21:21.470 --> 00:21:25.170
it's really easy in Xcode 2.1
to move pieces of source around,

00:21:25.170 --> 00:21:29.440
create the target dependencies,
make sure the proper things get included.

00:21:29.440 --> 00:21:32.540
The target pane,
as Chris has said in earlier sessions,

00:21:32.540 --> 00:21:36.420
is something we added to 2.1 to
make this just drop dead simple.

00:21:36.420 --> 00:21:37.720
And so with that,
I hand it back over to Chris.

00:21:38.910 --> 00:21:39.180
Great.

00:21:39.260 --> 00:21:39.940
Build succeeded.

00:21:40.090 --> 00:21:40.400
OK.

00:21:40.400 --> 00:21:43.490
How many of you got Build succeeded?

00:21:43.670 --> 00:21:44.330
A few.

00:21:44.580 --> 00:21:45.240
That's good.

00:21:45.460 --> 00:21:47.620
OK.

00:21:47.890 --> 00:21:50.510
More and more will drop off, we expect,
by the end.

00:21:50.520 --> 00:21:52.500
Like I said,
this is the first year for this format.

00:21:52.600 --> 00:21:55.340
We're still learning it.

00:21:55.440 --> 00:21:57.420
You can now,
if you haven't gotten all the

00:21:57.420 --> 00:22:00.710
way through milestone two,
you can either finish

00:22:00.710 --> 00:22:04.320
up while I'm talking,
or you can proceed to milestone three,

00:22:04.320 --> 00:22:05.990
where we'll pick up

00:22:07.350 --> 00:22:10.060
So what's different
about Targets and Files?

00:22:10.070 --> 00:22:12.820
Well, you set dependencies by
dragging and dropping them,

00:22:12.820 --> 00:22:16.050
like you do in Code Warrior,
except you drag and drop into the

00:22:16.050 --> 00:22:19.580
build phases under the targets
rather than organizing them in

00:22:19.580 --> 00:22:20.910
the tree in the targets pane.

00:22:21.000 --> 00:22:26.340
It's still a drag and drop operation,
and you still drag one thing to another,

00:22:26.380 --> 00:22:30.010
but you drag them in the Groups and
Files tree right there in your front

00:22:30.020 --> 00:22:34.400
window rather than having to go to
a separate target management pane.

00:22:34.670 --> 00:22:38.420
If you want to set the link order--
and several people have asked us about

00:22:38.420 --> 00:22:42.620
this-- Code Warrior has a separate link
order tab where you set link order.

00:22:42.620 --> 00:22:46.700
Well, in Xcode, if you want to change
the link order of files,

00:22:46.700 --> 00:22:50.240
you rearrange them in the
build phase under the target.

00:22:50.330 --> 00:22:51.160
That's the link order.

00:22:51.160 --> 00:22:54.360
You just drag them up and down,
your libraries and your source files,

00:22:54.360 --> 00:22:56.820
and that changes the link order.

00:22:56.850 --> 00:23:01.250
So same kind of operation,
but you do it in a different place.

00:23:01.410 --> 00:23:03.590
Well, now let's talk about
build configurations.

00:23:03.600 --> 00:23:07.600
There really isn't a peer for this
in the Code Warrior environment,

00:23:07.730 --> 00:23:10.090
but there is in Visual Studio.

00:23:10.120 --> 00:23:14.700
If you are familiar with project
configurations in Visual Studio,

00:23:14.740 --> 00:23:19.600
target configurations in Xcode are
going to be very familiar to you.

00:23:19.910 --> 00:23:24.690
Configurations are used instead of
creating multiple parallel targets.

00:23:24.820 --> 00:23:28.920
If you are accustomed to the working
style in Code Warrior of create a target,

00:23:29.140 --> 00:23:33.320
add your files, set the settings,
build it, and then clone it to do

00:23:33.320 --> 00:23:36.530
a different flavor of it,
that is something that you can

00:23:36.530 --> 00:23:38.390
stop doing when you're in Xcode.

00:23:38.480 --> 00:23:41.850
If you have two targets that are
named the same or similar and

00:23:41.850 --> 00:23:45.920
create the same or similar things
and only differ by settings,

00:23:46.110 --> 00:23:50.370
delete one, take the other one,
add a configuration to it,

00:23:50.640 --> 00:23:52.010
and make the changes in that.

00:23:52.100 --> 00:23:52.940
It's that simple.

00:23:52.940 --> 00:23:56.830
You will have fewer targets to manage,
you will have fewer things to

00:23:56.830 --> 00:23:59.790
build if you move from targets
to build configurations.

00:23:59.800 --> 00:24:02.580
It will make management a lot easier.

00:24:02.710 --> 00:24:06.140
Target build settings are set
on a per configuration basis,

00:24:06.240 --> 00:24:09.790
so you can have your debug version
and your release version of your

00:24:09.890 --> 00:24:13.760
application differ only by what
the configuration setting is,

00:24:13.760 --> 00:24:18.230
not by what the source code,
what the membership is.

00:24:18.390 --> 00:24:22.270
And there's powerful searching and
filtering inside the Target Inspector to

00:24:22.360 --> 00:24:23.890
help you find the settings.

00:24:23.980 --> 00:24:27.310
Instead of having to click through
page after page after page of

00:24:27.330 --> 00:24:31.210
check boxes that are not described,
even in tool tips,

00:24:31.210 --> 00:24:34.940
to figure out what they are,
we have a lot of searching, filtering,

00:24:34.940 --> 00:24:39.820
and documentation built right into
the Target Settings Inspector to

00:24:39.820 --> 00:24:41.590
show you what's what.

00:24:41.740 --> 00:24:45.920
So if you're familiar with the target
inspector in Code Warrior or the

00:24:45.920 --> 00:24:50.920
project inspector in Visual Studio,
you should be able to find your way

00:24:51.170 --> 00:24:53.530
around the target inspector in Xcode.

00:24:53.650 --> 00:24:57.120
So let's do some configuration
hands-on on milestone three.

00:24:58.250 --> 00:24:58.430
Okay.

00:24:58.430 --> 00:24:59.920
So you'll notice I brought
up milestone three.

00:24:59.920 --> 00:25:01.520
We're going to pick up
the pace a little bit now.

00:25:01.520 --> 00:25:05.460
The first two milestones were just
trying to get people kind of into

00:25:06.090 --> 00:25:08.500
how the general -- how Xcode works.

00:25:08.500 --> 00:25:11.250
Now we're going to work a little bit
with configurations and also just

00:25:11.290 --> 00:25:15.650
clean up the target settings in this,
to be honest, crusty project.

00:25:15.750 --> 00:25:18.040
It has a lot of settings that
probably don't apply anymore.

00:25:18.040 --> 00:25:21.610
They could be set at different
levels to be more effective.

00:25:21.900 --> 00:25:27.080
But before we get to the actual targets,
we want to set something at the project,

00:25:27.140 --> 00:25:28.240
something that's very important.

00:25:28.330 --> 00:25:30.030
So, you know, everyone's been asking,
"Well,

00:25:30.030 --> 00:25:33.040
how do I build universal binaries?" Well,
the first thing you need

00:25:33.190 --> 00:25:34.480
to do is go to the project.

00:25:34.570 --> 00:25:36.550
Select -- you know,
click on the info button to

00:25:36.550 --> 00:25:38.140
bring up the project inspector.

00:25:38.260 --> 00:25:39.480
And let's set that SDK.

00:25:39.580 --> 00:25:43.240
We really encourage people, you know,
if you want to do universal development,

00:25:43.250 --> 00:25:47.640
you're going to need to remember
to set this SDK for your projects.

00:25:47.710 --> 00:25:49.750
So go ahead and set that.

00:25:50.890 --> 00:25:53.370
Then we're going to be
dealing with configurations.

00:25:53.590 --> 00:25:56.870
And so one thing to make sure is--

00:25:57.430 --> 00:26:01.600
If you go ahead and you go to -- sorry,
if you go to the View Customized Toolbar,

00:26:01.750 --> 00:26:05.660
or you can Option-Command-click on
the little toolbar widget to bring

00:26:05.660 --> 00:26:09.430
up the toolbar customization sheet,
you're going to want to drag in

00:26:09.470 --> 00:26:11.100
the active build configuration.

00:26:11.150 --> 00:26:16.950
It's going to make some of
this a little bit easier.

00:26:16.950 --> 00:26:18.410
So this allows me to see directly
in this window exactly which

00:26:18.410 --> 00:26:18.410
configuration we're using.

00:26:19.200 --> 00:26:23.360
So let's just do a quick recap.

00:26:23.430 --> 00:26:28.570
If I go ahead and look at, for example,
the appearance sample target,

00:26:29.310 --> 00:26:35.660
And if you go to the Build tab,
a little bit bigger to

00:26:35.660 --> 00:26:35.660
make it easier to see.

00:26:36.100 --> 00:27:25.500
[Transcript missing]

00:27:25.650 --> 00:27:28.720
And so what I really want to do here
is take most of my debug settings

00:27:28.780 --> 00:27:30.270
and use them in a testing context.

00:27:30.320 --> 00:27:33.070
Maybe I want to turn off zero
link and fix and continue so

00:27:33.070 --> 00:27:34.770
I can hand it off to my testers.

00:27:34.810 --> 00:27:36.590
But pretty much it's going
to look similar to debug.

00:27:36.610 --> 00:27:40.260
So let's just go ahead and you
can click on the duplicate button

00:27:40.260 --> 00:27:42.490
and just type in the name testing.

00:27:44.460 --> 00:27:46.260
Now, why did I do this?

00:27:46.300 --> 00:27:47.760
I want to really impress on people.

00:27:47.760 --> 00:27:51.270
There's nothing special about
the names we assign these things.

00:27:51.380 --> 00:27:53.860
It used to be we had development
deployment that caused confusion

00:27:53.860 --> 00:27:55.760
because people thought they
were special in some way.

00:27:56.010 --> 00:27:56.790
They aren't.

00:27:56.990 --> 00:27:58.650
They are just the names
we decided to go with.

00:27:58.750 --> 00:28:02.220
In fact, we improved the names, we feel,
this time around, to debug and release.

00:28:02.320 --> 00:28:04.440
But you can call them whatever you want.

00:28:04.510 --> 00:28:07.300
And you can have however many you want.

00:28:07.350 --> 00:28:09.480
One thing to note is
that with configurations,

00:28:09.520 --> 00:28:10.940
they are the same across a project.

00:28:11.090 --> 00:28:13.270
But if you're going to be
using multiple projects,

00:28:13.330 --> 00:28:17.930
it's up to you, the developer,
to manage the configuration namespace

00:28:17.930 --> 00:28:20.680
across projects in Xcode 2.1.

00:28:22.400 --> 00:28:27.730
So let's go ahead and close,
let's go ahead actually and

00:28:27.730 --> 00:28:28.800
switch this over to build.

00:28:28.800 --> 00:28:31.470
So now we can look at the project
and we can look at the target.

00:28:31.480 --> 00:28:35.620
And what I'm going to do is if you go to
collection and select customize settings,

00:28:35.620 --> 00:28:38.340
you can see the settings that
are actually set in this target.

00:28:38.340 --> 00:28:40.720
And wow,
there's a lot of settings in the target.

00:28:40.720 --> 00:28:45.190
But there are a number of them here that
are going to be the same across both

00:28:45.190 --> 00:28:47.040
appearance sample and mega dialogue.

00:28:47.040 --> 00:28:49.120
And it seems like a pain
if I have to manage them,

00:28:49.120 --> 00:28:50.480
you know, individually.

00:28:51.570 --> 00:28:54.560
So what I'm going to do now is I'm going
to move a number of these settings.

00:28:54.560 --> 00:28:55.820
I'm going to cut them out of the target.

00:28:55.820 --> 00:28:57.480
We're going to cut them out of
the target and we're going to

00:28:57.480 --> 00:28:58.560
move them over to the project.

00:29:00.010 --> 00:29:04.690
So, for example,
the ones we're going to want to cut,

00:29:04.690 --> 00:29:07.150
let's take pre-binding.

00:29:07.170 --> 00:29:10.250
And you can just do discontinuous
selection with command in this case.

00:29:10.350 --> 00:29:14.380
Let's say pre-binding,
stripping debug symbols,

00:29:14.460 --> 00:29:21.690
precompiling prefix header,
generating debug symbols,

00:29:21.690 --> 00:29:21.690
optimization level,
generate position dependence.

00:29:44.900 --> 00:29:44.900
Fix and continue.

00:29:44.900 --> 00:29:44.900
And also the warnings.

00:29:44.900 --> 00:29:44.900
Turns out that warnings tend to
not be target specific and most

00:29:44.900 --> 00:29:44.900
warnings you set are pretty much
not just across your project,

00:29:44.900 --> 00:29:44.900
but they're policies you set up
across projects with your team.

00:29:44.900 --> 00:29:44.900
So they really don't need
to be just in the target.

00:29:44.900 --> 00:29:44.900
They can be at a higher level.

00:29:44.900 --> 00:29:44.900
So go ahead and you can cut these.

00:29:46.960 --> 00:29:49.740
And let's go over the project.

00:29:49.750 --> 00:29:52.810
And now let's go ahead and
let's paste them in here.

00:29:52.850 --> 00:29:55.740
And let's go over the project.

00:29:55.740 --> 00:29:58.820
And now let's go ahead and
let's paste them in here.

00:30:08.930 --> 00:30:14.590
In this case, a better word to use is
"debug." You'll notice that it's

00:30:14.590 --> 00:30:14.590
automatically being inherited.

00:30:17.380 --> 00:30:20.520
So at this point,
now I'm going to leave a little of this

00:30:20.540 --> 00:30:23.350
up to the reader because the next part,
you'll notice I've done

00:30:23.420 --> 00:30:24.660
this for one configuration.

00:30:24.700 --> 00:30:27.300
We can now go through and we can do
this for each of the configurations.

00:30:27.370 --> 00:30:32.650
For example,
I did it for the active configuration,

00:30:32.650 --> 00:30:32.650
but now I can, for example,
go to my testing configuration.

00:30:46.190 --> 00:30:46.190
And look at all my
customized settings there.

00:30:46.190 --> 00:30:46.190
And you'll notice I have a few of them,
but there's still a couple that

00:30:46.190 --> 00:30:46.190
I should probably move over,
like the stripping the debug symbols.

00:30:46.190 --> 00:30:46.190
Let's say all of those.

00:30:55.970 --> 00:30:55.970
And so, for example, over here,
I'll need to move these over also.

00:30:55.970 --> 00:30:55.970
So we can just go ahead,
pick the same set of settings.

00:31:08.700 --> 00:31:18.100
[Transcript missing]

00:31:30.500 --> 00:32:14.800
[Transcript missing]

00:32:19.430 --> 00:32:22.350
So as you can see here,
the project level in this case

00:32:22.470 --> 00:32:25.650
provides us a nice way to kind of
isolate a bunch of settings that we're

00:32:25.650 --> 00:32:27.100
probably only ever going to set once.

00:32:27.100 --> 00:32:29.300
And we're probably going to
set it the same way for all

00:32:29.300 --> 00:32:30.640
the targets in this project.

00:32:30.660 --> 00:32:31.860
Now I've got them in one place.

00:32:32.070 --> 00:32:34.270
If I ever have to edit them
across all the targets,

00:32:34.270 --> 00:32:37.160
you can just go to the project
inspector and set them there.

00:32:37.180 --> 00:32:39.900
While you still have things
like the product name,

00:32:40.000 --> 00:32:44.620
the Info.plist file that's being used,
a prefix header that are target-specific

00:32:44.670 --> 00:32:46.520
are placed in your target file.

00:32:46.520 --> 00:32:49.280
And so with that,
I will hand it back to Chris.

00:32:52.830 --> 00:32:56.280
Okay,
so we have veered out of the familiar

00:32:56.540 --> 00:32:59.190
into some of the power of Xcode.

00:32:59.320 --> 00:33:03.090
If you've been using
Code Warrior for years,

00:33:03.240 --> 00:33:07.880
copying and pasting settings
from one target to another,

00:33:07.890 --> 00:33:09.640
not easy to do.

00:33:09.640 --> 00:33:10.770
You can do it in Xcode.

00:33:10.780 --> 00:33:13.550
Sorting your settings,
searching your settings,

00:33:13.560 --> 00:33:14.840
finding out what's what.

00:33:14.930 --> 00:33:18.480
A lot of power is in the
Xcode target inspector.

00:33:18.480 --> 00:33:19.640
It is different.

00:33:19.700 --> 00:33:22.780
It's unfamiliar.

00:33:22.800 --> 00:33:25.930
It's organized in a different way.

00:33:25.940 --> 00:33:29.560
And the settings themselves,
even if you're using the same

00:33:29.560 --> 00:33:33.370
linker or similar compiler,
the settings have different names.

00:33:33.380 --> 00:33:38.300
But you can use the power of the
inspector to find what you're looking for

00:33:38.450 --> 00:33:41.320
and to set it in a very versatile way.

00:33:41.800 --> 00:33:43.790
Pretty much everything is different.

00:33:43.820 --> 00:33:48.520
You don't need to worry about
keeping targets in sync with Xcode.

00:33:48.520 --> 00:33:52.030
We strongly recommend that
you use configurations to

00:33:52.440 --> 00:33:52.780
make different settings.

00:33:54.280 --> 00:33:59.190
You can easily see what's
unique and different from

00:33:59.190 --> 00:34:03.400
one setting to another one,
one configuration to another,

00:34:03.400 --> 00:34:07.940
by choosing the customized
settings pop-up in the inspector.

00:34:07.940 --> 00:34:11.470
It shows you only what's different
between that target and the

00:34:11.650 --> 00:34:13.640
default or the project level.

00:34:13.640 --> 00:34:18.140
Anything in boldface is a
target-specific override of your

00:34:18.140 --> 00:34:20.980
project setting or of the default.

00:34:20.980 --> 00:34:22.760
And multiple targets can
be set to the same level.

00:34:23.850 --> 00:34:28.350
So if you've got some
policies or some standards,

00:34:28.470 --> 00:34:33.650
set them once, inherit them across all of
your targets automatically.

00:34:33.660 --> 00:34:37.430
That really will save you
in settings management.

00:34:38.200 --> 00:34:40.780
We're going to be talking a little
bit more about build settings.

00:34:40.850 --> 00:34:41.950
What are these settings?

00:34:41.970 --> 00:34:44.240
Scott probably ran you
through a ton of settings,

00:34:44.240 --> 00:34:46.040
some of which were unfamiliar to you.

00:34:46.140 --> 00:34:49.390
Zero link is one that he's
mentioned that is new to you

00:34:49.390 --> 00:34:51.500
if you have just come to Xcode.

00:34:51.500 --> 00:34:56.860
Zero link is a way to speed up
your compile link debug cycle by

00:34:56.860 --> 00:34:58.670
eliminating the link part of it.

00:34:59.700 --> 00:35:04.040
When you change one source file in your
build and recompile that one source file,

00:35:04.180 --> 00:35:08.060
you can relaunch your application
and it will dynamically bring in

00:35:08.350 --> 00:35:13.020
just the object from that source
file rather than having to relink

00:35:13.020 --> 00:35:14.700
your entire application or tool.

00:35:15.480 --> 00:35:19.400
If you're working on an extremely large
project where your link times are long,

00:35:19.670 --> 00:35:22.940
that's very helpful,
but it's only good at debug time.

00:35:24.410 --> 00:35:28.060
It is not useful for a distribution
of your product because your build

00:35:28.060 --> 00:35:28.200
is going to be a lot more complex.

00:35:28.600 --> 00:35:30.660
It's not useful for a distribution of
your product because your product doesn't

00:35:30.750 --> 00:35:31.690
have any of its object code in it.

00:35:32.440 --> 00:35:34.530
Some of those settings
are unique to Xcode.

00:35:34.780 --> 00:35:36.700
You need to find your way around.

00:35:37.530 --> 00:35:39.700
We do our settings in a different way.

00:35:39.700 --> 00:35:41.700
Rather than having just panel
after panel of checkbox,

00:35:41.700 --> 00:35:47.540
we have a list of strings, booleans,
numbers, checkbox values,

00:35:47.870 --> 00:35:48.700
things like that.

00:35:49.400 --> 00:35:51.570
You can sort the list,
you can search the list,

00:35:51.570 --> 00:35:53.700
you can filter the
list in different ways.

00:35:55.190 --> 00:35:57.700
What these are is they set values
that look kind of like a list.

00:35:58.280 --> 00:36:01.160
They're kind of like environment
variables that are expanded at build time

00:36:01.190 --> 00:36:04.200
and are passed to the individual tools.

00:36:05.110 --> 00:36:08.200
So for each build setting
that's in this inspector,

00:36:08.230 --> 00:36:11.440
there is a symbol that's usually
in all caps and with underscores

00:36:11.440 --> 00:36:16.390
in it that exists inside Xcode,
Chris Espinosa and that's expanded

00:36:16.390 --> 00:36:20.200
to its value when it's passed
to the underlying build tool.

00:36:21.160 --> 00:36:24.530
This looks a lot more like what's
going on in a make file than

00:36:24.610 --> 00:36:27.200
it does like what's going on in
Code Warrior where all of those

00:36:27.200 --> 00:36:28.630
settings are completely internal.

00:36:29.670 --> 00:36:33.700
So really you can think of the
target editor as just a GUI editor

00:36:33.700 --> 00:36:36.200
for the settings in a make file.

00:36:36.770 --> 00:36:38.700
That really at the base
level is what it's doing.

00:36:39.400 --> 00:36:43.230
And you can use that concept in a
very powerful way because you can set

00:36:43.240 --> 00:36:47.700
the value of one setting to be based
on the value of a different setting.

00:36:48.490 --> 00:36:51.690
And you can propagate things
through your inheritance chain.

00:36:52.740 --> 00:36:55.700
It's harder to describe
than it is to show,

00:36:55.700 --> 00:36:56.700
so move on to milestone.

00:36:56.700 --> 00:36:58.560
to milestone four,
and we'll show you some of

00:36:58.560 --> 00:37:01.110
the power of build settings.

00:37:01.940 --> 00:37:02.840
Thanks, Chris.

00:37:02.990 --> 00:37:06.060
So one of the interesting things is if,
you know,

00:37:06.060 --> 00:37:08.520
we've set up these build configurations,
they're built differently.

00:37:08.710 --> 00:37:12.910
Okay, so if I quickly go to
give my test or something,

00:37:13.130 --> 00:37:16.960
how do I know what I've
given him is the right build,

00:37:16.960 --> 00:37:21.980
that it doesn't have zero-length enabled,
that it does have --

00:37:21.980 --> 00:37:24.740
it has no optimization,
et cetera?

00:37:24.740 --> 00:37:24.740
Well, unfortunately, at least right now,
if we go ahead and look at the products,

00:37:26.380 --> 00:37:27.720
It just says AppearanceSample.app.

00:37:27.720 --> 00:37:30.060
And actually if you change the
active build configuration,

00:37:30.060 --> 00:37:32.600
we will change to show what's building.

00:37:32.600 --> 00:37:34.220
You'll notice they all
have the same name.

00:37:34.440 --> 00:37:37.270
That's not that useful for me.

00:37:37.570 --> 00:37:40.190
So one thing I might want to
do is I might want to have

00:37:40.310 --> 00:37:43.360
it so that each configuration
builds with a different name.

00:37:43.360 --> 00:37:46.620
So let's go ahead and select
the target Appearance Sample.

00:37:46.620 --> 00:37:50.160
And you can either double click on it,
or you can just click the Info button.

00:37:50.160 --> 00:37:51.700
This will bring up the get info window.

00:37:51.720 --> 00:37:53.380
And so we have this product name here.

00:37:53.390 --> 00:37:55.370
And so for example,
you'll notice if you go

00:37:55.370 --> 00:37:58.670
to all configurations,
it's set the same.

00:37:58.870 --> 00:38:01.060
So let's change that.

00:38:01.200 --> 00:38:03.800
Let's go to the debug configuration.

00:38:04.820 --> 00:38:11.290
Double-click on the value,
and then let's just add debug.

00:38:13.490 --> 00:38:15.470
You'll notice automatically
we notice that,

00:38:15.470 --> 00:38:18.400
and so now it's going to be
called debug when we build it.

00:38:18.410 --> 00:38:27.270
And for testing, oh,
let's just call it test.

00:38:34.680 --> 00:38:40.760
So here now we have the test
version of Appearance Sample.

00:38:40.760 --> 00:38:42.840
So for example, if I change here to the
active configuration,

00:38:42.880 --> 00:38:43.650
it changes to test.

00:38:43.720 --> 00:38:47.540
And for debug, we have the debug version
of Appearance Sample.

00:38:47.540 --> 00:38:50.240
And we'll leave release alone
because this is what we're

00:38:50.240 --> 00:38:51.550
shipping to our customers.

00:38:51.550 --> 00:38:52.770
The name is enough.

00:38:52.840 --> 00:38:55.570
Well,
this isn't quite all you'll have to do,

00:38:55.570 --> 00:38:56.960
but we're almost done.

00:38:57.120 --> 00:39:00.390
The one final thing you'll need to
do is because this is an application,

00:39:00.390 --> 00:39:02.810
we need to change the
Info.plist to automatically

00:39:02.810 --> 00:39:04.600
pick up the proper product name.

00:39:05.090 --> 00:39:08.080
So go ahead and click on
the properties tab here,

00:39:08.130 --> 00:39:13.640
and you'll see you get our simple -- you
get our custom UI for editing Info.plist,

00:39:13.710 --> 00:39:16.400
but for this hands-on,
go ahead and click the

00:39:16.400 --> 00:39:18.660
open Info.plist as file,
because we're going to do some

00:39:18.700 --> 00:39:19.840
direct editing of the file.

00:39:20.060 --> 00:39:21.780
So what this will do
is open the Info.plist,

00:39:21.800 --> 00:39:24.380
close the get info window,
and you'll notice here that

00:39:24.440 --> 00:39:27.000
there are a couple places where
we have appearance sample,

00:39:27.000 --> 00:39:28.940
and some of these are valid.

00:39:29.000 --> 00:39:32.960
So we'll go ahead and click
on the get info window,

00:39:32.960 --> 00:39:35.710
and you'll notice here that
there are a couple places where

00:39:35.710 --> 00:39:35.710
we have appearance sample,
and some of these are valid.

00:39:35.920 --> 00:39:45.390
If we go a little bit further down,
there's what's called the bundle name.

00:39:45.390 --> 00:39:45.390
Okay, well,
it turns out the executable name,

00:39:45.390 --> 00:39:45.390
we actually should be using

00:39:47.500 --> 00:39:53.740
So,
if you go ahead and just type in $_name,

00:39:53.740 --> 00:39:57.840
this will actually substitute in
that build setting at build time.

00:39:57.870 --> 00:40:00.740
We've actually supported
this since Xcode 2.0.

00:40:00.740 --> 00:40:03.510
You can put in any build setting,
custom ones you define,

00:40:03.510 --> 00:40:06.080
anything that's listed in the
build settings can be used

00:40:06.340 --> 00:40:07.810
and expanded in an Info.plist.

00:40:08.090 --> 00:40:09.160
It's actually quite powerful.

00:40:09.160 --> 00:40:12.990
And then for the actual bundle name,

00:40:17.330 --> 00:40:20.410
Now, you may ask the question, well,
why did I use a different

00:40:20.460 --> 00:40:22.440
product name and executable name?

00:40:22.440 --> 00:40:25.140
It turns out that Xcode
can make a distinction.

00:40:25.140 --> 00:40:27.990
By default, the executable name is just
equal to the product name.

00:40:28.190 --> 00:40:33.780
But in some more complex projects,
and especially in the future,

00:40:33.780 --> 00:40:39.010
it may be desirable to have your
executable be different from

00:40:39.010 --> 00:40:41.510
the actual name the user sees.

00:40:41.510 --> 00:40:41.510
So what I'm going to do is I'm
going to go ahead and save that.

00:40:47.190 --> 00:40:49.920
So let's go ahead and switch to
the testing configuration and

00:40:49.920 --> 00:40:56.690
let's go ahead and bring up the
build results window in build.

00:41:33.810 --> 00:41:33.810
So as I said before, the InfoP list,
it can take any build

00:41:33.810 --> 00:41:33.810
setting and put it in there.

00:41:33.810 --> 00:41:33.810
And also, I'm not showing this
here in this milestone,

00:41:33.810 --> 00:41:33.810
but the next milestone will
actually show you how to refer

00:41:33.810 --> 00:41:33.810
to one build setting and another.

00:41:33.810 --> 00:41:33.810
And it's very, very powerful.

00:41:33.810 --> 00:41:33.810
It provides you a lot of flexibility
and kind of allows you to expand on

00:41:33.810 --> 00:41:33.810
the base build system we give you to
kind of customize it to your needs.

00:41:45.930 --> 00:41:48.570
So for example, now if I go and run this,
you'll notice that now it shows

00:41:48.570 --> 00:41:53.080
a parent sample in the menu bar
and when we have the various

00:41:53.080 --> 00:41:55.960
dynamically created menu items.

00:41:55.990 --> 00:42:00.680
And then if you go back to
the project window and--

00:42:02.720 --> 00:42:05.520
is actually right here,
up here in sample test.

00:42:05.520 --> 00:42:07.940
So with that, back to Chris.

00:42:11.860 --> 00:42:17.720
So this is something that is
different in Xcode 2.1 from Xcode 2.0.

00:42:17.720 --> 00:42:22.030
And if you're coming from Code Warrior,
this is going to be a lot more familiar.

00:42:22.040 --> 00:42:27.530
In Xcode 2.0 and earlier when we built
different build styles of a product,

00:42:27.650 --> 00:42:29.240
they overwrote each other.

00:42:29.240 --> 00:42:32.950
And you couldn't have your debug
version or your deployment version

00:42:32.950 --> 00:42:37.220
or your development version
side by side in the file system.

00:42:37.220 --> 00:42:39.440
In Code Warrior,
you're very used to having your

00:42:39.770 --> 00:42:43.600
debug and release version built
independently and live separate lives.

00:42:43.600 --> 00:42:45.460
Well,
that's because they're separate targets,

00:42:45.460 --> 00:42:45.760
right?

00:42:45.760 --> 00:42:48.220
And separate targets are
all built independently.

00:42:48.230 --> 00:42:51.360
In Xcode now,
you have the best of both worlds.

00:42:51.420 --> 00:42:54.680
You can have one target so
you don't have to manage the

00:42:54.680 --> 00:42:57.420
dependencies between two clones.

00:42:57.740 --> 00:43:00.810
But they can build in separate
locations with separate names so

00:43:00.810 --> 00:43:06.520
you can have your release version
and your debug version be separate.

00:43:06.800 --> 00:43:10.080
You can see all the settings in one pane.

00:43:10.080 --> 00:43:11.040
You can use searching and filtering.

00:43:11.100 --> 00:43:12.800
I've talked about this before.

00:43:12.800 --> 00:43:16.160
You can base a build setting on the value
of another setting with setting name.

00:43:16.260 --> 00:43:18.420
Scott's going to be doing
that in the next milestone,

00:43:18.420 --> 00:43:19.200
actually.

00:43:19.230 --> 00:43:21.650
And you can even define
custom settings of your own

00:43:21.680 --> 00:43:23.200
to pass to any tool or script.

00:43:23.340 --> 00:43:26.060
We'll be doing that one in the next one,
too.

00:43:26.180 --> 00:43:29.350
And defining hierarchies of settings,
rather than hard coding

00:43:29.350 --> 00:43:33.950
everything per project,
is really useful.

00:43:34.540 --> 00:43:37.140
That gets us into customization.

00:43:37.170 --> 00:43:40.280
Milestone number five,
you can customize your

00:43:40.290 --> 00:43:40.660
code per configuration.

00:43:40.660 --> 00:43:46.470
Your code, your resources, your P lists,
and even your shell script build

00:43:46.570 --> 00:43:51.160
phases can all be based off
of your build configurations,

00:43:51.160 --> 00:43:53.650
the settings in your
build configurations.

00:43:53.660 --> 00:43:58.140
This gives you a flexibility to
configure large projects that you

00:43:58.140 --> 00:43:59.980
really don't have in other environments.

00:43:59.980 --> 00:44:03.650
And so now we're moving
on to milestone five,

00:44:03.650 --> 00:44:05.270
customization.

00:44:10.380 --> 00:44:13.770
So all the milestones have
kind of led up to this.

00:44:13.790 --> 00:44:16.200
So what we wanted to do in this
milestone was do something kind

00:44:16.200 --> 00:44:18.580
of cool with build settings,
something that wasn't just

00:44:18.580 --> 00:44:21.360
really simple like changing
the name of your application.

00:44:21.360 --> 00:44:24.550
What we're actually going to do
here is we're going to conditionally

00:44:24.550 --> 00:44:28.510
load in different NIBs based on
which configuration we build.

00:44:28.650 --> 00:44:32.610
So what I've done is I've gone
ahead and made a copy of the

00:44:32.610 --> 00:44:36.650
main appearance sample NIB and
called it Appearance Sample Debug.

00:44:36.800 --> 00:44:43.640
So if you select Resources,
then go to Project, Add to Project,

00:44:45.620 --> 00:44:48.960
Now, since you're all using 2.1,
that means you're on Tiger.

00:44:49.180 --> 00:44:51.090
So that means we get to
use-- and for example,

00:44:51.120 --> 00:44:53.790
this is an appearance sample 5,
so I'll select this.

00:44:53.830 --> 00:44:56.440
And then I can just search for debug.

00:44:59.770 --> 00:45:00.540
There it is.

00:45:00.580 --> 00:45:02.990
So let's just go ahead and add it.

00:45:03.080 --> 00:45:06.540
So this is -- and we're going to add
this to the appearance sample target.

00:45:08.270 --> 00:45:09.040
There it is.

00:45:09.040 --> 00:45:11.500
So let's just go ahead and add it.

00:45:11.500 --> 00:45:15.040
So this is -- and we're going to add
this to the appearance sample target.

00:45:38.340 --> 00:45:39.200
Okay, well, this is great.

00:45:39.200 --> 00:45:39.950
I've added this debug name.

00:45:39.960 --> 00:45:42.640
But now I need to actually look at
the code and see how it's actually

00:45:42.770 --> 00:45:44.250
calling this appearance sample.

00:45:44.390 --> 00:45:46.600
So what I'm going to do
is go to the Find menu.

00:45:46.600 --> 00:45:49.220
If you select Find in Project,

00:45:49.650 --> 00:45:52.900
And let's just go ahead and search
on the phrase "appearance sample,"

00:45:52.970 --> 00:45:57.740
because I know that in this case it
calls and loads it in programmatically.

00:45:57.970 --> 00:46:00.920
And so we want to make sure
to look for it in the project,

00:46:00.920 --> 00:46:02.160
and we'll just do a find.

00:46:07.300 --> 00:46:10.200
Okay, so we get some definitions.

00:46:10.200 --> 00:46:12.860
Well, you'll notice here that we get
some cases where it's like this.

00:46:12.980 --> 00:46:15.200
Okay, so this looks like the right thing.

00:46:15.200 --> 00:46:17.540
We're actually -- it's a T window call.

00:46:17.540 --> 00:46:20.920
Okay, well, that's great.

00:46:20.920 --> 00:46:24.410
But then as we go down a little bit,
if you'll scroll down,

00:46:32.410 --> 00:46:34.090
What you find out is they're passing
around this appearance sample name to

00:46:34.180 --> 00:46:36.040
actually give the nib name in T window.

00:46:36.040 --> 00:46:37.400
It's used during the construction.

00:46:37.400 --> 00:46:39.400
So this is what
I actually want to change.

00:46:39.400 --> 00:46:42.740
I want to find every place,
but they don't define it in one place,

00:46:42.840 --> 00:46:43.890
which is a little bit unfortunate.

00:46:43.920 --> 00:46:46.490
Now, I could do a bunch of if-def-ing
around all these places,

00:46:46.560 --> 00:46:48.390
or we could just do a little
bit of work to actually have

00:46:48.390 --> 00:46:49.540
this defined in one place.

00:46:49.540 --> 00:46:54.360
So let's actually take this CFStir,
and you may wonder, well,

00:46:54.380 --> 00:46:57.580
if you haven't done
core foundation before,

00:46:57.580 --> 00:46:59.460
well, what's CFStir?

00:46:59.460 --> 00:47:04.800
Just take a quick detour here and
show you our documentation support.

00:47:05.290 --> 00:47:07.300
There are two things we can do here.

00:47:07.300 --> 00:47:09.970
One is that you can always
control-click -- you can

00:47:10.410 --> 00:47:14.600
command-double-click on a symbol,
and we'll take you to

00:47:14.670 --> 00:47:16.900
where that's defined.

00:47:17.630 --> 00:47:24.020
And then also if you have documentation,
you can option double-click something,

00:47:24.180 --> 00:47:27.700
and this will bring up the documentation
window and actually do an API search

00:47:27.830 --> 00:47:29.440
to provide you documentation.

00:47:29.520 --> 00:47:31.500
And this is -- it's really nice.

00:47:31.500 --> 00:47:32.500
I use this all the time.

00:47:32.500 --> 00:47:34.480
And then once you're in
this documentation window,

00:47:34.630 --> 00:47:38.500
it's, you know, just like you expect,
you can click on a link and say, oh,

00:47:38.500 --> 00:47:39.500
a CFStringRef.

00:47:39.500 --> 00:47:40.350
What's a CFStringRef?

00:47:40.350 --> 00:47:42.500
You can go and you can read it.

00:47:42.500 --> 00:47:47.500
So that's just a little aside about how
to use some of our navigation features.

00:47:47.550 --> 00:47:50.180
But what we're going to do now
is we're going to go ahead and

00:47:50.180 --> 00:47:54.490
select this whole section of text,
the CFStir appearance sample.

00:47:54.500 --> 00:47:59.440
Let's use this selection for the find.

00:47:59.540 --> 00:48:02.500
Mac OS X has a concept
of a find pasteboard,

00:48:02.500 --> 00:48:05.660
and so we can actually paste
it into the find pasteboard by

00:48:05.930 --> 00:48:07.500
using use selection for find.

00:48:07.500 --> 00:48:09.500
And so let's go ahead
and let's find these.

00:48:09.500 --> 00:48:12.390
Okay,
so now I have a much more manageable set.

00:48:31.550 --> 00:48:31.550
And you'll notice here, for example,
what I was looking for earlier,

00:48:31.550 --> 00:48:31.550
now that I'm looking more specifically,
I can see, oh, okay,

00:48:31.550 --> 00:48:31.550
here's where it creates
the nib reference.

00:48:31.550 --> 00:48:31.550
So looks like we've
picked the right thing.

00:48:31.550 --> 00:48:31.550
So let's go ahead and let's
just give this a name.

00:48:31.550 --> 00:48:31.550
So instead of putting all this in,
we're just going to give

00:48:31.550 --> 00:48:31.550
it some sort of variable,
like let's say app nib name.

00:48:32.020 --> 00:48:36.760
And then I'll go down here and I'll
select everything and click replace.

00:48:36.890 --> 00:48:39.960
And just say, yes,
you want to replace 12 out of 12.

00:48:40.520 --> 00:48:42.700
And so now when we look
at all these sites again,

00:48:42.700 --> 00:48:44.740
you can see they've all been changed.

00:48:44.830 --> 00:48:46.700
OK, so now we need to go
define this somewhere.

00:48:46.700 --> 00:48:48.640
Well, where's a good place to define it?

00:48:48.770 --> 00:48:51.920
Well, T window,
it seems to be always being called there.

00:48:51.920 --> 00:48:54.880
So maybe I want to go to T window.

00:48:55.300 --> 00:48:58.880
Well, another navigation aid
we have is Open Quickly.

00:48:58.900 --> 00:49:02.980
And those of you coming
from Code Warrior,

00:49:03.010 --> 00:49:08.010
we got a lot of requests for this
before we added it early in Xcode.

00:49:08.070 --> 00:49:10.300
And we made some improvements
over the revisions.

00:49:10.300 --> 00:49:13.700
So what I'm going to do here is
I'm just going to select T window.

00:49:13.730 --> 00:49:17.120
And then you can use
Command Shift D to open Quickly.

00:49:17.120 --> 00:49:19.560
But you can also go under the File menu.

00:49:19.820 --> 00:49:22.480
It automatically parses that,
and if it just gets a class name,

00:49:22.480 --> 00:49:24.370
it will actually look for the header.

00:49:24.700 --> 00:49:27.760
But you can also,
if I didn't select anything, for example,

00:49:27.760 --> 00:49:31.330
if you just have an insertion point,
it will also do the same thing.

00:49:31.490 --> 00:49:34.860
So for example, here I'm hitting Shift,
I'm using the key equivalent.

00:49:35.260 --> 00:49:39.330
For example, if it doesn't have anything
that it can actually parse,

00:49:39.330 --> 00:49:43.190
it just provides a little text
dialogue that you can type into.

00:49:43.220 --> 00:49:45.190
So let's type twindow.h.

00:49:45.190 --> 00:49:47.580
Okay, so that's great.

00:49:47.600 --> 00:49:50.300
So we're in twindow.h.

00:49:50.300 --> 00:49:54.200
So it looks like right before the class,
let's just go ahead.

00:50:10.690 --> 00:50:10.690
And put a definition in here.

00:50:10.690 --> 00:50:10.690
Now, this is the hardest typing
you're going to have to do,

00:50:10.690 --> 00:50:10.690
whole hands-on.

00:50:10.690 --> 00:50:10.690
What we're going to do is we're
going to do a simple if-else clause.

00:50:10.690 --> 00:50:10.690
So we're going to say if use debug nib.

00:50:11.800 --> 00:50:13.700
Oops.

00:50:13.700 --> 00:50:14.700
We're not going to make typos.

00:50:14.710 --> 00:50:15.560
You're not going to make typos.

00:50:15.560 --> 00:50:18.420
I will, but you won't.

00:50:19.040 --> 00:50:23.090
And then what I want to
do is I want to declare --

00:50:24.360 --> 00:50:30.120
: What was that again?

00:50:30.120 --> 00:50:30.120
Let's see.

00:50:30.120 --> 00:50:30.120
CFStringRef.

00:50:30.390 --> 00:50:33.140
So you notice here I've hit escape
to bring up the code completion so

00:50:33.140 --> 00:50:38.830
that I can actually have it remind
me what I was actually going to do.

00:50:39.070 --> 00:50:43.290
Nibname equals CFster.

00:50:44.130 --> 00:50:45.670
And so, for example,
if we're using the debug nib,

00:50:45.680 --> 00:50:51.390
we want to say appearance sample debug.

00:50:53.040 --> 00:50:58.380
Otherwise, let's do the end if.

00:50:58.390 --> 00:51:03.080
You can just go ahead
and you can copy this.

00:51:03.080 --> 00:51:07.270
And we'll just get rid of the debug.

00:51:11.300 --> 00:51:17.800
[Transcript missing]

00:51:23.860 --> 00:51:36.910
is we want to actually declare this.

00:51:36.910 --> 00:51:36.910
Because we're doing this in the header,
sorry.

00:51:36.910 --> 00:51:36.910
I jumped ahead.

00:51:36.910 --> 00:51:36.910
So now what we've done is we've
just defined this external constant

00:51:36.910 --> 00:51:36.910
CFStringRef called app-nibname.

00:51:37.460 --> 00:51:39.460
So let's go ahead and save that.

00:51:39.520 --> 00:51:42.020
Now to quickly get to
the implementation file,

00:51:42.070 --> 00:51:43.680
if you go up here,
there's this navigation

00:51:43.700 --> 00:51:46.210
bar where we show,
you know, the number of files that may

00:51:46.210 --> 00:51:48.710
have been opened in this editor.

00:51:48.710 --> 00:51:50.510
We show you the actual file.

00:51:52.540 --> 00:51:59.410
So, I want to give you a little bit of a
quick overview of what we're doing here.

00:51:59.410 --> 00:52:06.170
So, I want to give you a little bit of a
quick overview of what's going on here.

00:52:06.170 --> 00:52:09.860
So, we're going to start with the Xcode.

00:52:09.860 --> 00:52:13.250
We're going to start with this Xcode.

00:52:13.250 --> 00:52:15.410
So, we're going to start with the Xcode.

00:52:15.410 --> 00:52:15.410
So, we're going to start with the Xcode.

00:52:18.970 --> 00:52:19.900
This part.

00:52:19.900 --> 00:52:22.840
So here what we're saying is
if we're using the debug nib,

00:52:23.000 --> 00:52:25.400
then we're going to set
this to CFStringRef.

00:52:25.400 --> 00:52:29.970
Otherwise, we're going to set it
to AppearanceSample.

00:52:35.350 --> 00:52:37.790
So now,
we should have everything in place.

00:52:37.870 --> 00:52:39.620
We've actually added the nib file.

00:52:39.730 --> 00:52:46.900
We have changed the code so it's going
to use this constcf string ref variable.

00:52:46.960 --> 00:52:48.400
And we even have a little ifdef in here.

00:52:48.400 --> 00:52:50.100
Wait.

00:52:50.120 --> 00:52:51.790
But there's -- and we have
almost everything now.

00:52:51.810 --> 00:52:55.210
The last thing we need to do is
actually set up the build settings.

00:52:55.480 --> 00:53:00.890
So you'll remember that I created --
if we go back to the project window,

00:53:01.040 --> 00:53:04.620
And then for appearance sample,
one thing you can do is if you always

00:53:04.620 --> 00:53:07.830
have one target you're editing a lot,
we also have a shortcut,

00:53:07.960 --> 00:53:09.590
which is under the project menu.

00:53:09.770 --> 00:53:12.300
It's called Edit Active Target,
and I'll give you the name of the target.

00:53:12.320 --> 00:53:15.200
It's Command-Option-E.

00:53:15.240 --> 00:53:18.420
So for example, in here,
I want to add some settings so

00:53:18.420 --> 00:53:20.350
that this will work properly.

00:53:20.420 --> 00:53:23.730
So what I want to do is
across all configurations,

00:53:23.750 --> 00:53:27.240
I actually wanted to find
a custom build setting,

00:53:27.240 --> 00:53:32.870
which we're going to
call Use Special Nib.

00:53:36.570 --> 00:53:38.490
And in most cases,
I actually want to show this debug nib,

00:53:38.500 --> 00:53:40.600
so let's set it to one.

00:53:40.710 --> 00:53:43.290
And it turns out the one
case where I don't release,

00:53:43.410 --> 00:53:46.000
I can just go in and change that to zero.

00:53:46.000 --> 00:53:46.750
Now, that's great.

00:53:46.790 --> 00:53:48.090
So now I've got this
custom build setting.

00:53:48.250 --> 00:53:51.530
How do I get that pushed
down into my code?

00:53:52.020 --> 00:53:57.350
Well, we use our preprocessor macros
build setting and the ability to

00:53:57.350 --> 00:54:00.200
put one build setting in another.

00:54:00.200 --> 00:54:05.500
So in this case, just switch over to all
settings and type in macros.

00:54:07.670 --> 00:54:11.670
So let's just choose
the preprocessor macros.

00:54:11.670 --> 00:54:13.890
And this can actually be the
same for all the configurations.

00:54:14.020 --> 00:54:16.260
So we're going to switch
to all configurations,

00:54:16.370 --> 00:54:19.630
and we're just going to set in here

00:54:20.120 --> 00:54:26.230
Use debug nib equals,
and this is the same,

00:54:26.230 --> 00:54:31.770
and then we're going to use the same
syntax we used in the Info.plist.

00:54:31.770 --> 00:54:31.770
We're just going to say use

00:54:32.020 --> 00:54:35.980
So what this says is that --
and let me make this a little --

00:54:36.120 --> 00:54:38.940
and you might want to make it a
little wider so you can see it.

00:54:38.940 --> 00:54:41.880
What it says here now,
and if we -- it's a little bit clearer

00:54:41.880 --> 00:54:46.350
if you now jump to customize settings
and clear out the search field,

00:54:46.350 --> 00:54:50.430
you'll see now we say, okay,
we have some preprocessor

00:54:50.450 --> 00:54:51.680
macros we're going to pass down.

00:54:51.680 --> 00:54:54.350
Use debug nib is going to
be equal to whatever my use

00:54:54.400 --> 00:54:56.260
special nib build setting was.

00:54:56.260 --> 00:54:59.200
This allows me across all the
configurations to just have

00:54:59.200 --> 00:55:00.800
one setting that's generic.

00:55:00.970 --> 00:55:04.710
And then I can use special
build settings to differentiate

00:55:05.000 --> 00:55:07.090
it across each configuration.

00:55:07.690 --> 00:55:10.390
So at this point,
I should have everything I need.

00:55:10.430 --> 00:55:15.920
So we're going to go ahead and
try to build the test sample.

00:55:15.930 --> 00:55:16.800
Let's save all the files.

00:55:16.800 --> 00:55:24.680
If you want, we can go ahead and we can
bring up the build results.

00:55:33.630 --> 00:55:36.420
Now you notice in this case,
we're only rebuilding appearance sample

00:55:36.480 --> 00:55:40.200
because it turns out that there was
nothing we changed in MegaDialog at all.

00:55:40.200 --> 00:55:43.350
This is all just specific
to appearance sample.

00:55:51.620 --> 00:55:53.130
So you'll notice now I have
this little debug menu.

00:55:53.180 --> 00:55:54.590
If you've ever played with this,
you'll know that they don't

00:55:54.600 --> 00:55:55.290
really have a debug menu.

00:55:55.300 --> 00:55:57.100
This doesn't do anything,
but I kind of ran out of time.

00:55:57.100 --> 00:55:59.260
And then also in about--
change this to say debug.

00:55:59.310 --> 00:56:02.100
But I mean, that's just the beginning.

00:56:02.100 --> 00:56:04.170
You can do whatever you want.

00:56:04.180 --> 00:56:09.220
This just shows you this is a really
easy way to provide different resources

00:56:09.220 --> 00:56:14.330
and conditionally with configurations,
make it a very simple structure so

00:56:14.330 --> 00:56:15.340
you can control via configurations
which one you're using.

00:56:15.340 --> 00:56:15.340
And with that,
I'll hand it over to Chris.

00:56:17.980 --> 00:56:19.510
Okay,
I was doing a little wandering around

00:56:19.510 --> 00:56:23.520
the audience and I saw a lot more
closed PowerBooks and a lot more people

00:56:23.600 --> 00:56:25.890
reading their mail and things like that.

00:56:25.890 --> 00:56:30.970
This was probably the toughest section
to get through and follow through.

00:56:31.250 --> 00:56:33.900
How many people actually
tried to follow along?

00:56:34.270 --> 00:56:35.140
That's awesome.

00:56:35.470 --> 00:56:36.340
Oh, I'm really impressed.

00:56:36.380 --> 00:56:39.190
Okay, well, the best part is coming up.

00:56:39.280 --> 00:56:40.750
Let's finish up with this.

00:56:40.750 --> 00:56:44.980
You saw some real versatile
use of Xcode in that.

00:56:44.980 --> 00:56:48.220
You saw Scott using find and replace,
saw him navigating

00:56:48.220 --> 00:56:51.100
around in documentation,
navigating into source code,

00:56:51.100 --> 00:56:55.980
navigating into framework headers,
saw him making changes and rebuilding,

00:56:55.980 --> 00:57:00.810
adding new files, setting up those files,
and conditionally including a file

00:57:00.810 --> 00:57:04.800
based on a build configuration
setting that was passed to the source

00:57:04.800 --> 00:57:06.360
code in a pre-processing session.

00:57:28.160 --> 00:57:28.290
Okay, well, the best part is coming up.

00:57:28.290 --> 00:57:28.290
Let's finish up with this.

00:57:28.290 --> 00:57:28.290
You saw Scott using find and replace,
saw him navigating

00:57:28.290 --> 00:57:28.290
around in documentation,
navigating into source code,

00:57:28.290 --> 00:57:28.290
navigating into framework headers,
setting up those files,

00:57:28.290 --> 00:57:28.290
and conditionally including a file
based on a build configuration

00:57:28.290 --> 00:57:28.290
setting that was passed to the source
code in a pre-processing session.

00:57:28.650 --> 00:57:31.340
There really isn't an equivalent
for this in Code Warrior.

00:57:31.340 --> 00:57:35.060
It's more like a GUI to make files,
the ability to define a build

00:57:35.060 --> 00:57:38.500
setting in one place and pass
it down into your sources.

00:57:38.500 --> 00:57:41.500
But now we get to the
real interesting part.

00:57:41.500 --> 00:57:42.400
This is what you came for.

00:57:42.490 --> 00:57:46.370
If you haven't been following along,
open that PowerBook back up,

00:57:46.820 --> 00:57:48.500
load Milestone 6.

00:57:48.530 --> 00:57:51.610
We're going to build
Intel binaries right here,

00:57:51.610 --> 00:57:52.500
right now.

00:57:52.500 --> 00:57:55.690
To build a universal
binary of your application,

00:57:55.690 --> 00:57:57.430
it just takes two things.

00:57:57.430 --> 00:58:01.500
One is you need to build
it against the SDK,

00:58:01.500 --> 00:58:03.500
and we set that up earlier.

00:58:03.500 --> 00:58:06.230
And second is you need
to set the architecture,

00:58:06.310 --> 00:58:08.500
and you do that by a double-click.

00:58:08.530 --> 00:58:10.790
This is going to be the shortest part,
but it's going to be the most

00:58:10.790 --> 00:58:12.470
valuable for you in the long run.

00:58:12.500 --> 00:58:14.130
Here's Scott.

00:58:14.890 --> 00:58:17.160
So first off, there is no milestone six.

00:58:17.210 --> 00:58:19.080
There's milestone final.

00:58:19.080 --> 00:58:21.460
As you can imagine,
given the secret nature

00:58:21.460 --> 00:58:24.010
of this until Monday,
we really couldn't post

00:58:24.010 --> 00:58:25.750
up a milestone that said,
look,

00:58:25.750 --> 00:58:28.160
here's how to build universal binaries.

00:58:28.250 --> 00:58:30.640
But luckily,
this is probably the shortest

00:58:30.640 --> 00:58:32.020
of all the milestones.

00:58:32.160 --> 00:58:36.410
So as Chris said,
the two things you need-- and

00:58:36.410 --> 00:58:39.750
let's go to the general pane
here-- is you need to set an SDK.

00:58:39.750 --> 00:58:39.750
We've already done that.

00:58:41.520 --> 00:58:46.460
It turns out that we want to do this
across the project because both,

00:58:46.610 --> 00:58:49.210
you know, we're going to need both the
parent sample and its static

00:58:49.210 --> 00:58:51.100
library to be built in Universal.

00:58:51.280 --> 00:58:53.460
So let's just go to the architectures.

00:58:53.790 --> 00:58:54.300
And there we go.

00:58:54.300 --> 00:58:56.980
Okay, so by default,
we build for the native architecture.

00:58:57.010 --> 00:58:59.090
So that means if you're on a PowerPC box,
PowerPC.

00:58:59.090 --> 00:59:01.590
If you're on an Intel box, Intel.

00:59:02.690 --> 00:59:05.320
Now you can select this and either
you can click on the edit button or

00:59:05.320 --> 00:59:07.100
you can double click the setting.

00:59:07.100 --> 00:59:08.900
I'll click the edit button.

00:59:08.960 --> 00:59:12.600
And you'll notice here, okay, I'm on,
yes, we don't have Intel laptops yet,

00:59:12.600 --> 00:59:14.500
so I'm on PowerPC.

00:59:14.630 --> 00:59:18.600
But I can go ahead and I can click Intel.

00:59:18.600 --> 00:59:22.500
And then I can go ahead and build.

00:59:26.920 --> 00:59:29.900
I'm sorry if I went
through that too fast.

00:59:29.930 --> 00:59:33.520
But if you should,
most of the time in this particular

00:59:33.520 --> 00:59:36.390
milestone is actually spent building.

00:59:54.390 --> 00:59:54.390
And so what we've done here is
-- and this is actually code that

00:59:54.390 --> 00:59:54.390
has actually been through a lot.

00:59:54.390 --> 00:59:54.390
It's a weird mix.

00:59:54.390 --> 00:59:54.390
Appearance sample has some new stuff,
but it also has really old stuff, too.

00:59:54.390 --> 00:59:54.390
And it actually turns out that I can
build this for Universal without

00:59:54.390 --> 00:59:54.390
making any code changes.

00:59:59.350 --> 01:00:02.160
If you're interested in
some more of the details,

01:00:02.160 --> 01:00:05.600
you can go ahead and you can pop
open the transcript window here.

01:00:05.650 --> 01:00:07.940
And what you'll see is we
actually are going through,

01:00:08.140 --> 01:00:10.100
for example,
here we're doing the Intel build,

01:00:10.100 --> 01:00:14.090
and if I scroll down a little bit later,
you'll notice that we're

01:00:14.170 --> 01:00:19.570
doing PowerPC builds later,
if you go through and look.

01:00:19.570 --> 01:00:22.330
Let's see if I can find one of them.

01:00:22.330 --> 01:00:22.330
For example, here, now we're doing the
same stuff for PowerPC.

01:00:56.560 --> 01:01:03.740
And so now if I go out to... If we
go to the projects folder again

01:01:03.740 --> 01:01:05.640
and we actually look at this,
we reveal it in the finder,

01:01:05.700 --> 01:01:10.640
and we bring up a get info window,
or even better yet,

01:01:10.710 --> 01:01:11.900
we just bring up the con...

01:01:20.500 --> 01:01:24.900
So now we actually have built Appearance
Dev Sample and it should just launch.

01:01:24.940 --> 01:01:31.460
And here now you have a universal binary
with two clicks and some build time.

01:01:31.540 --> 01:01:33.260
With that, Chris.

01:01:39.920 --> 01:01:41.500
Now,
there are a couple of things about that

01:01:41.500 --> 01:01:45.690
build you might have noticed if you were
following along or saw it on the screen.

01:01:45.800 --> 01:01:48.800
One thing was that most of
the things that we built,

01:01:48.800 --> 01:01:52.790
we built twice,
and that is not unexpected.

01:01:52.800 --> 01:01:56.400
If you have a precompiled header,
you need a different precompiled

01:01:56.400 --> 01:02:01.800
header for Intel than for PowerPC,
because in the system headers,

01:02:01.800 --> 01:02:05.270
there are a lot of poundifs
for Indian issues and things

01:02:05.270 --> 01:02:07.800
like that that are different.

01:02:07.800 --> 01:02:09.800
If you have different
precompiled headers,

01:02:09.800 --> 01:02:13.800
you need two sets of precompiled headers,
but did you have to set any of that up?

01:02:13.800 --> 01:02:15.730
No, it happened automatically.

01:02:15.850 --> 01:02:17.800
You check the checkbox
for two architectures,

01:02:17.800 --> 01:02:19.800
we built two precompiled headers.

01:02:19.800 --> 01:02:22.800
Every source file needed
to be recompiled twice,

01:02:22.800 --> 01:02:26.800
compiled against the precompiled headers,
against the system headers,

01:02:26.800 --> 01:02:28.800
to generate a different .o file.

01:02:28.800 --> 01:02:32.800
There were two sets of .o files,
an Intel set, PowerPC set.

01:02:32.800 --> 01:02:35.800
At the end, each of them was linked
into a separate executable,

01:02:35.800 --> 01:02:37.800
and then the executables
were merged together.

01:02:37.800 --> 01:02:39.780
into one build product.

01:02:39.880 --> 01:02:41.800
We didn't have to build
our resources twice.

01:02:41.800 --> 01:02:46.510
We didn't have to copy our
resources or build our nibs twice.

01:02:46.970 --> 01:02:49.750
Everything non-code happened once.

01:02:49.850 --> 01:02:51.800
Everything code happened twice.

01:02:51.800 --> 01:02:54.770
There's no separate
configuration for PowerPC.

01:02:54.840 --> 01:03:00.800
It's just an iteration through all the
compilation steps about code generation.

01:03:00.920 --> 01:03:03.780
You just check the checkbox,
and the build system and the compiler

01:03:03.800 --> 01:03:05.800
take care of everything for you.

01:03:05.800 --> 01:03:09.800
We're using this method to create
a new version of the system.

01:03:09.800 --> 01:03:11.800
We're using the term Universal here.

01:03:11.800 --> 01:03:14.680
If you're coming from the old world,
you're familiar with

01:03:14.680 --> 01:03:15.800
Universal interfaces.

01:03:15.800 --> 01:03:16.800
They're different.

01:03:16.800 --> 01:03:18.800
They have nothing to do with each other.

01:03:18.800 --> 01:03:20.800
Forget about Universal interfaces.

01:03:20.800 --> 01:03:25.800
Universal means using
the 10.4 Universal SDK.

01:03:25.960 --> 01:03:27.660
And that's what it means.

01:03:27.870 --> 01:03:29.490
That is Universal PowerPC Intel.

01:03:29.750 --> 01:03:32.680
It's really best not to use
your system provided headers,

01:03:32.730 --> 01:03:36.090
because the headers on your
system are not only for that OS,

01:03:36.260 --> 01:03:39.610
but they will be for that
configuration of the OS,

01:03:39.740 --> 01:03:41.340
whatever machine you're running on.

01:03:41.480 --> 01:03:46.030
You can build native on Intel or
PowerPC and you'll get an

01:03:46.130 --> 01:03:48.160
executable native for that machine.

01:03:48.280 --> 01:03:51.340
If you want to build universal
for machines other than

01:03:51.340 --> 01:03:54.260
the one you're running on,
you really, really,

01:03:54.260 --> 01:03:56.300
really need to build against the SDK.

01:03:56.610 --> 01:04:01.720
And that will also help you on cross
operating system building in the future.

01:04:01.780 --> 01:04:03.580
You'll also see one other detail.

01:04:03.730 --> 01:04:06.220
You notice he got 57 warnings there.

01:04:06.260 --> 01:04:09.080
And that's because he didn't
change to the release build.

01:04:09.160 --> 01:04:11.050
He was still building his debug build.

01:04:11.250 --> 01:04:14.080
That debug build still
by default uses ZeroLink.

01:04:14.190 --> 01:04:18.350
Well, ZeroLink is a technology that's
tightly tied into the loader.

01:04:18.560 --> 01:04:23.720
And if you build ZeroLink on
a single architecture,

01:04:23.770 --> 01:04:26.840
but you're building
universal using the SDK,

01:04:26.930 --> 01:04:28.470
you're going to get those warnings.

01:04:28.480 --> 01:04:30.920
It just meant that he couldn't
launch an Intel binary

01:04:30.920 --> 01:04:32.820
ZeroLink on his PowerPC machine.

01:04:33.050 --> 01:04:34.550
That's pretty much all it meant.

01:04:34.670 --> 01:04:37.950
But you notice that the
PowerPC build succeeded,

01:04:38.070 --> 01:04:40.220
and that's what he launched.

01:04:41.740 --> 01:04:44.480
So we've taken you
through a heck of a lot.

01:04:44.820 --> 01:04:50.030
We've taken you from opening up an
ancient appearance sample application

01:04:50.040 --> 01:04:52.070
that had its origins in Code Warrior.

01:04:52.300 --> 01:04:53.540
It's all Carbon.

01:04:53.590 --> 01:04:54.950
It uses resources.

01:04:55.040 --> 01:04:59.080
You saw the res build
phase going on up there.

01:04:59.420 --> 01:05:03.680
And it's been updated gradually
over the years to run on 10.2.4

01:05:03.680 --> 01:05:05.450
and even use some new features.

01:05:05.650 --> 01:05:07.260
It's been brought into Xcode.

01:05:07.520 --> 01:05:10.980
We saw reconfiguring it,
removing a lot of the old settings,

01:05:10.980 --> 01:05:14.740
cleaning it up,
making it use Xcode 2.1 features,

01:05:14.740 --> 01:05:19.380
really making it sing with Xcode 2.1,
and building it for Intel all

01:05:19.380 --> 01:05:20.800
in the space of an hour.

01:05:21.100 --> 01:05:23.360
Thank you very much for following on.

01:05:23.380 --> 01:05:26.000
There's a lot more you can do.

01:05:26.010 --> 01:05:26.840
Come to the labs.

01:05:26.970 --> 01:05:30.750
If you have an application or you
couldn't get through the example,

01:05:30.750 --> 01:05:32.270
come to the labs.

01:05:32.410 --> 01:05:37.050
Go to developer.apple.com/wwdc2005.

01:05:37.080 --> 01:05:39.470
That's where you'll find a
lot of Xcode sample code.

01:05:39.470 --> 01:05:41.560
You'll find sample code
for other sessions.

01:05:41.560 --> 01:05:45.040
As well, related sessions,
to learn more about the

01:05:45.040 --> 01:05:49.720
Xcode user interface,
Wednesday, 5:00, session 403,

01:05:49.720 --> 01:05:51.180
power programming with Xcode.

01:05:51.180 --> 01:05:52.500
It's going to be a great session.

01:05:52.500 --> 01:05:57.170
We're going to take you in depth through
a lot of the things like the SCM system,

01:05:57.310 --> 01:06:01.580
like find and replace,
like code completion, like unit testing.

01:06:01.700 --> 01:06:04.780
Project management mastery,
we're going to give you the inside

01:06:04.780 --> 01:06:08.480
skinny on build configurations and
go into much more depth how to use

01:06:08.570 --> 01:06:13.050
them in shell script build phases,
how to invoke code from the command line

01:06:13.210 --> 01:06:16.860
as part of an automated build system,
things like that.

01:06:16.860 --> 01:06:20.430
And then if you are bringing
code to Xcode for the first time,

01:06:20.430 --> 01:06:24.830
you're going to need to come to the
moving to GCC 4.0 session to learn

01:06:24.830 --> 01:06:29.210
about the idiosyncrasies of GCC 4.0,
where it's pickier about your

01:06:29.310 --> 01:06:33.170
C++ code and what are the new
pragmas you can use in GCC.

01:06:33.500 --> 01:06:36.840
Labs, Tuesday, Wednesday, Thursday,
starting at 2:00 today,

01:06:36.840 --> 01:06:41.520
we're going to have the Xcode team,
the compiler people, the debugger people.

01:06:41.520 --> 01:06:45.580
The IDE people, all in the Xcode lab,
helping you bring your projects over,

01:06:45.580 --> 01:06:50.640
helping you check those check boxes
and bring your code over to Intel.

01:06:50.680 --> 01:06:53.250
If you have comments, questions,
want to know what our

01:06:53.280 --> 01:06:55.440
future direction is,
have suggestions,

01:06:55.440 --> 01:06:58.800
come to the feedback forum, Friday, 5:00.

01:06:58.800 --> 01:07:01.340
We really don't have time for
questions in this session.

01:07:01.430 --> 01:07:04.510
If you want to follow up,
we'll be available in the front

01:07:04.530 --> 01:07:08.520
row or come to the lab after
lunch starting at 2:00 today.

01:07:08.520 --> 01:07:10.580
Matthew Formica is our representative.

01:07:10.580 --> 01:07:11.460
He does a great job.

01:07:11.500 --> 01:07:13.460
You can get him on email.

01:07:13.620 --> 01:07:17.040
Join the Xcode users discussion
list for community-based support.