WEBVTT

00:00:04.280 --> 00:00:09.940
Welcome to session 125, VoiceOver and
Making Cocoa Applications Accessible.

00:00:09.970 --> 00:00:12.100
My name is Rick Fabrick,
and I'm an engineer

00:00:12.100 --> 00:00:13.640
on the VoiceOver team.

00:00:13.690 --> 00:00:16.920
And in case you missed the State of
the Union address on Monday,

00:00:16.970 --> 00:00:20.190
or our session yesterday,
I'm going to be going over a few things

00:00:20.440 --> 00:00:22.630
at the beginning of this session.

00:00:22.770 --> 00:00:26.070
I'm going to start out by
explaining what VoiceOver is,

00:00:26.070 --> 00:00:29.340
and then I'm going to talk about
the importance of accessibility.

00:00:29.340 --> 00:00:31.590
And finally,
I'm going to have a demonstration of

00:00:31.590 --> 00:00:34.300
VoiceOver so that you can see some of
the features that you'll be learning

00:00:34.510 --> 00:00:37.090
in order to test your applications.

00:00:38.090 --> 00:00:40.670
Now that's going to take
about 10 or 15 minutes,

00:00:40.670 --> 00:00:43.860
and when I'm done,
Mike Engber from the Cocoa team

00:00:43.900 --> 00:00:46.580
is going to come up and talk
to you about the details on

00:00:46.660 --> 00:00:49.130
accessorizing your applications.

00:00:49.540 --> 00:00:51.840
So, what is VoiceOver?

00:00:51.890 --> 00:00:54.330
Well, simply put,
VoiceOver is screen reader

00:00:54.330 --> 00:00:58.070
technology that comes installed
with every single Tiger system.

00:00:58.120 --> 00:01:03.180
And screen reader technology allows
those users who have visual impairments

00:01:03.190 --> 00:01:05.340
to fully access their computer.

00:01:05.340 --> 00:01:08.350
So everything that goes along,
that happens on their computer,

00:01:08.350 --> 00:01:10.290
is conveyed to them in a
way that they can perceive,

00:01:10.290 --> 00:01:14.010
and they're allowed to ask
the computer what's going on.

00:01:14.250 --> 00:01:18.500
Now, the main input device for
VoiceOver is the keyboard.

00:01:18.620 --> 00:01:22.740
So every single feature of a fully
accessible application needs to

00:01:22.740 --> 00:01:25.230
be available through the keyboard.

00:01:25.700 --> 00:01:28.200
The main output device is the speaker.

00:01:28.260 --> 00:01:30.500
So as I said before,
everything that goes on the computer,

00:01:30.510 --> 00:01:33.200
that happens on the computer,
is spoken to you,

00:01:33.200 --> 00:01:35.010
and we also have some audio cues.

00:01:37.670 --> 00:01:40.240
So VoiceOver is built
into the operating system.

00:01:40.240 --> 00:01:41.460
It's not bolted on.

00:01:41.640 --> 00:01:43.230
Now, what do I mean by this?

00:01:43.350 --> 00:01:47.040
What I mean is anybody can walk
up to any system running Tiger,

00:01:47.090 --> 00:01:49.800
hit Command + F5,
and if you're on a laptop,

00:01:49.810 --> 00:01:54.870
you may need to hit the Fn key,
the function key, and turn VoiceOver on.

00:01:54.910 --> 00:01:58.920
Being built in also means that it's
available during installation time.

00:01:58.930 --> 00:02:02.850
So even before the OS has been installed,
a user can turn VoiceOver on

00:02:02.850 --> 00:02:05.050
and install it independently.

00:02:06.980 --> 00:02:10.520
Once the user has installed the OS and
they're setting their computer up,

00:02:10.520 --> 00:02:12.580
VoiceOver is available as well.

00:02:12.660 --> 00:02:17.330
The Setup Assistant application
also provides a tutorial that walks

00:02:17.370 --> 00:02:19.040
them through the setup procedure.

00:02:19.040 --> 00:02:23.800
And you'll notice at the bottom of this
Setup Assistant application window,

00:02:23.840 --> 00:02:26.740
it says in text how to
launch that tutorial.

00:02:26.740 --> 00:02:30.030
But if you can't see the screen,
that's not going to help you very much.

00:02:30.760 --> 00:02:34.160
But after the introductory
music finishes playing,

00:02:34.160 --> 00:02:37.260
the application will speak instructions.

00:02:37.260 --> 00:02:38.790
And this is what that would sound like.

00:02:40.220 --> 00:02:44.900
Mac OS X Tiger includes a built-in
screen reader called VoiceOver.

00:02:45.020 --> 00:02:48.720
If you know how to use VoiceOver,
press Command-F5 now to turn

00:02:48.720 --> 00:02:50.180
it on and set up your Mac.

00:02:50.230 --> 00:02:54.710
If you would like to learn how to
use VoiceOver to set up your Mac,

00:02:54.710 --> 00:02:56.480
press the Escape key.

00:02:57.560 --> 00:03:00.370
Being built-in also means
it's available at login.

00:03:00.370 --> 00:03:03.800
So anybody can access their
computer independently without

00:03:03.870 --> 00:03:05.390
the help of a sighted individual.

00:03:05.390 --> 00:03:06.570
So it's fully accessible.

00:03:06.580 --> 00:03:09.660
And of course it's available
throughout the OS itself.

00:03:09.700 --> 00:03:12.080
So all the menus are accessible.

00:03:12.080 --> 00:03:14.980
You can go through the dock, the finder,
the desktop.

00:03:14.980 --> 00:03:18.100
And many of the applications
that come bundled with Tiger have

00:03:18.100 --> 00:03:19.700
been accessorized already.

00:03:19.700 --> 00:03:23.080
So from the get-go,
users will be able to access their email,

00:03:23.080 --> 00:03:24.860
send email, access the web.

00:03:25.550 --> 00:03:27.760
And we're hoping that your
applications will be here as well.

00:03:29.410 --> 00:03:32.400
As I said,
it's available anywhere Tiger is running.

00:03:32.490 --> 00:03:35.730
Now what this means is,
with the latest release of our OS,

00:03:35.770 --> 00:03:39.500
Mac OS X has become the largest install
base for any screen reader software.

00:03:39.500 --> 00:03:40.250
That's huge.

00:03:40.260 --> 00:03:44.380
Okay, so now who's going to benefit from
you accessorizing your application?

00:03:44.380 --> 00:03:48.180
Well, obviously those who have visual
impairment or the learning disabled,

00:03:48.190 --> 00:03:51.320
but also those who collaborate
with the visually impaired.

00:03:51.640 --> 00:03:54.780
So what I mean by collaborate
is when a couple of people are

00:03:54.790 --> 00:03:57.560
working at the same computer,
a visually impaired person,

00:03:57.560 --> 00:04:00.420
a sighted person, they're collaborating,
they're working together.

00:04:00.420 --> 00:04:04.710
VoiceOver provides some both visual and
audio cues to help this collaboration,

00:04:04.710 --> 00:04:06.860
to help them work closely together.

00:04:08.410 --> 00:04:13.460
And as time goes on,
I don't know about you,

00:04:13.460 --> 00:04:15.500
but I have a lot of my personal
information on my computer,

00:04:15.500 --> 00:04:15.890
right?

00:04:15.900 --> 00:04:20.330
All my financial information, music,
pictures, I access the internet to

00:04:20.330 --> 00:04:22.000
get my news and whatnot.

00:04:22.000 --> 00:04:26.370
If I lost access to my computer,
it would be a really bad thing.

00:04:26.740 --> 00:04:30.410
And unfortunately, the possibility of my
eyesight diminishing,

00:04:30.410 --> 00:04:31.260
it's there.

00:04:31.260 --> 00:04:35.240
So as time goes on, more and more of us
who are computer savvy,

00:04:35.250 --> 00:04:40.740
we may start to rely more and more on
screen reader technology like VoiceOver.

00:04:42.250 --> 00:04:45.080
Let's look at a couple of other
markets that you may want to sell into.

00:04:45.100 --> 00:04:48.360
The US government has
instituted Section 508,

00:04:48.360 --> 00:04:52.690
which requires, among other things,
that software purchased by government

00:04:52.690 --> 00:04:55.100
agencies must be accessible to everyone.

00:04:55.100 --> 00:04:57.100
That includes the visually impaired.

00:04:57.100 --> 00:05:00.070
If you plan on selling
to a government agency,

00:05:00.100 --> 00:05:02.210
one of the questions they're
going to be asking you is,

00:05:02.210 --> 00:05:05.090
"Is your application accessible?"
If your answer is no,

00:05:05.100 --> 00:05:08.090
they're not even going to be
able to consider purchasing it.

00:05:08.100 --> 00:05:11.930
Other governments around the
world are starting to adopt

00:05:12.160 --> 00:05:14.540
similar legislation as well.

00:05:14.950 --> 00:05:17.450
So simply by accessorizing
your application,

00:05:17.450 --> 00:05:19.130
your market share can increase.

00:05:19.170 --> 00:05:22.540
And when your market share increases and
there are more accessible applications

00:05:22.540 --> 00:05:26.540
available on the Mac platform,
the more visible Apple becomes and

00:05:26.540 --> 00:05:29.320
the larger market share Apple gets,
which means your market

00:05:29.350 --> 00:05:30.440
share can increase as well.

00:05:30.440 --> 00:05:31.780
So it's a win-win situation there.

00:05:31.780 --> 00:05:33.040
All right.

00:05:33.080 --> 00:05:35.060
So let me go over a little demo here.

00:05:35.060 --> 00:05:36.240
If I can have the demo.

00:05:36.240 --> 00:05:37.350
Yeah.

00:05:38.230 --> 00:05:39.670
Alright,
so the first thing that I want to make

00:05:39.670 --> 00:05:42.560
sure that you understand is everything
that's going on is through the keyboard.

00:05:42.560 --> 00:05:46.500
I'm not using the mouse at all,
so let me move the arrow up here.

00:05:46.500 --> 00:05:47.230
That shouldn't move.

00:05:47.260 --> 00:05:51.540
Okay, so I'm going to turn on
VoiceOver with Command F5.

00:05:51.540 --> 00:05:52.980
VoiceOver on.

00:05:52.980 --> 00:05:53.680
Finder.

00:05:53.790 --> 00:05:54.900
Macintosh HD.

00:05:54.900 --> 00:05:55.840
Selected.

00:05:55.900 --> 00:05:58.340
So, VoiceOver, when it launches,
when it starts up,

00:05:58.340 --> 00:06:00.970
it will automatically tell you
what application you're in,

00:06:01.020 --> 00:06:03.440
what window you're in,
what element you're on.

00:06:04.420 --> 00:06:05.910
So, let me check my email.

00:06:05.920 --> 00:06:10.010
I'm going to launch mail from the dock,
so with the keyboard I'm going to... Doc.

00:06:10.010 --> 00:06:10.910
Finder.

00:06:10.910 --> 00:06:11.670
Running.

00:06:11.820 --> 00:06:15.960
Go to the dock, move over to the mail
application and launch it.

00:06:16.080 --> 00:06:17.480
System preferences.

00:06:17.610 --> 00:06:17.950
Mail.

00:06:18.270 --> 00:06:18.670
Running.

00:06:19.350 --> 00:06:20.250
Mail inbox.

00:06:20.620 --> 00:06:21.340
Ten messages.

00:06:21.490 --> 00:06:22.040
Window.

00:06:22.040 --> 00:06:22.880
Delete button.

00:06:23.680 --> 00:06:26.980
Alright, so you may be able to see a
couple of those visual cues

00:06:26.980 --> 00:06:28.330
that I mentioned earlier.

00:06:28.390 --> 00:06:29.760
The first one is at the bottom.

00:06:29.760 --> 00:06:31.860
It's what we call the caption panel.

00:06:31.860 --> 00:06:34.420
And basically it just shows
you in text and print.

00:06:34.770 --> 00:06:37.290
everything that voiceover is saying.

00:06:37.690 --> 00:06:41.400
The second visual cue is around
the delete button at the top.

00:06:41.400 --> 00:06:43.740
And that's what we call
the VoiceOver cursor.

00:06:43.740 --> 00:06:44.600
It's a black rectangle.

00:06:44.600 --> 00:06:48.600
And it focuses,
it shows the person who's collaborating

00:06:48.600 --> 00:06:53.770
or somebody who has low visual sight
what they're focusing on and what

00:06:53.770 --> 00:06:54.600
element they're interacting with.

00:06:54.600 --> 00:06:56.600
And I can move that
around with the keyboard.

00:06:56.600 --> 00:06:57.670
Junk button.

00:06:58.260 --> 00:06:59.760
Reply button.

00:06:59.910 --> 00:07:01.600
Reply all button.

00:07:01.790 --> 00:07:05.600
And VoiceOver explains to me what
elements I'm on and their state.

00:07:05.600 --> 00:07:06.600
If it's dimmed, it'll say dimmed.

00:07:06.600 --> 00:07:10.600
Now, if I have limited vision,
I'm having a hard time seeing that,

00:07:10.600 --> 00:07:13.580
VoiceOver lets me increase the
size of the VoiceOver cursor.

00:07:13.600 --> 00:07:15.600
Let me show you that.

00:07:15.600 --> 00:07:18.600
VoiceOver cursor size 3, 4, 5.

00:07:18.600 --> 00:07:20.600
And I can continue navigating.

00:07:20.600 --> 00:07:21.570
Reply button.

00:07:21.620 --> 00:07:22.440
Junk button.

00:07:22.580 --> 00:07:23.480
Delete button.

00:07:23.600 --> 00:07:26.590
Alright,
let me bring that back down to normal.

00:07:26.610 --> 00:07:28.120
VoiceOver 3, 2, 1.

00:07:28.820 --> 00:07:30.600
Alright, so I'm ready to read my email.

00:07:30.600 --> 00:07:33.600
So I'm going to go down to the
table of emails and navigate around.

00:07:33.600 --> 00:07:35.370
Messages table.

00:07:35.600 --> 00:07:35.600
Interact with.

00:07:35.710 --> 00:07:38.600
Interact with messages table on.

00:07:38.600 --> 00:07:40.600
And I can move around inside of this.

00:07:40.600 --> 00:07:42.600
Image map no AX.

00:07:42.600 --> 00:07:45.600
May 26, 2005.

00:07:45.660 --> 00:07:47.110
Alright,
so this is the email I want to read

00:07:47.150 --> 00:07:49.840
so I can have VoiceOver quickly jump
down to the body of the email and

00:07:49.840 --> 00:07:52.600
start reading it to me automatically.

00:07:52.600 --> 00:07:55.440
Stop message.

00:07:55.440 --> 00:07:56.600
Interact.

00:07:56.600 --> 00:07:58.590
If it's working.

00:07:58.600 --> 00:07:58.600
So.

00:07:58.660 --> 00:07:59.600
Text.

00:07:59.600 --> 00:08:02.550
I recompiled it and
updated my public folder.

00:08:03.120 --> 00:08:04.490
New line.

00:08:04.600 --> 00:08:04.600
Can you verify this one works?

00:08:04.600 --> 00:08:06.170
For you.

00:08:06.600 --> 00:08:08.990
Alright, so this,
let's say I want to reply to this email

00:08:09.000 --> 00:08:10.600
but I don't know what command R is.

00:08:10.600 --> 00:08:12.600
I don't know the key combination.

00:08:12.600 --> 00:08:16.600
So, but I do know that there is a menu
item up there that says reply.

00:08:16.600 --> 00:08:17.600
So I'm going to go up to the menu.

00:08:17.600 --> 00:08:18.600
Menu bar.

00:08:18.600 --> 00:08:18.930
On.

00:08:19.230 --> 00:08:19.600
Apple.

00:08:19.600 --> 00:08:21.600
Go over to the messages menu.

00:08:21.600 --> 00:08:22.090
Mail.

00:08:22.090 --> 00:08:22.430
File.

00:08:22.740 --> 00:08:23.070
Edit.

00:08:23.070 --> 00:08:23.600
View.

00:08:23.600 --> 00:08:24.590
Mailbox.

00:08:24.590 --> 00:08:25.210
Message.

00:08:25.570 --> 00:08:26.540
Message menu.

00:08:26.600 --> 00:08:27.560
And go down to the reply.

00:08:27.660 --> 00:08:28.460
Send again.

00:08:28.840 --> 00:08:29.500
Can reply.

00:08:29.880 --> 00:08:30.520
Command R.

00:08:30.600 --> 00:08:31.450
Reply.

00:08:31.450 --> 00:08:31.980
Re.

00:08:31.980 --> 00:08:33.600
Image map no AX.

00:08:33.600 --> 00:08:36.820
And now I'm going to navigate
to the bottom of the window so

00:08:36.820 --> 00:08:38.600
that I can reply to this email.

00:08:38.600 --> 00:08:42.530
To last item A interacting
with item HTML content.

00:08:42.650 --> 00:08:43.480
Correct.

00:08:43.600 --> 00:08:45.600
And type my reply.

00:08:45.870 --> 00:08:46.520
So.

00:08:46.610 --> 00:08:46.740
A.

00:08:46.780 --> 00:08:46.870
E.

00:08:46.960 --> 00:08:47.080
S.

00:08:47.080 --> 00:08:47.240
A.

00:08:47.240 --> 00:08:47.380
A.

00:08:47.400 --> 00:08:47.600
K.

00:08:47.600 --> 00:08:47.810
E.

00:08:47.810 --> 00:08:48.010
K.

00:08:48.120 --> 00:08:48.590
New line.

00:08:48.630 --> 00:08:49.350
New line.

00:08:49.600 --> 00:08:52.140
Now I've typed my reply but
I want to make sure that

00:08:52.140 --> 00:08:53.670
what I've typed is correct.

00:08:53.680 --> 00:08:56.850
So with VoiceOver I'm going to go over
and move and check to make sure what

00:08:56.850 --> 00:08:58.600
I've typed is what I wanted to say.

00:08:58.600 --> 00:08:59.540
New line.

00:08:59.540 --> 00:09:00.340
Coolness.

00:09:00.610 --> 00:09:02.460
And VoiceOver lets me do
this letter by letter.

00:09:02.600 --> 00:09:03.560
C.

00:09:03.590 --> 00:09:04.050
O.

00:09:04.050 --> 00:09:04.600
O.

00:09:04.600 --> 00:09:05.600
L.

00:09:05.600 --> 00:09:07.350
Also word by word.

00:09:07.740 --> 00:09:08.590
Ness.

00:09:08.830 --> 00:09:09.600
Thanks.

00:09:09.600 --> 00:09:09.710
On.

00:09:09.910 --> 00:09:10.110
May.

00:09:10.110 --> 00:09:11.600
Twenty-six.

00:09:11.600 --> 00:09:14.110
I could do this line by line,
sentence by sentence,

00:09:14.130 --> 00:09:15.600
paragraph by paragraph.

00:09:15.600 --> 00:09:18.600
We let the user choose how they
want to navigate their text.

00:09:18.600 --> 00:09:21.690
Okay so now I want to send this email.

00:09:21.980 --> 00:09:24.550
And let's pretend again I don't
know the key combination,

00:09:24.580 --> 00:09:27.920
but I do know because I've navigated
around here that there's a send button.

00:09:27.920 --> 00:09:30.790
But I don't want to have to
navigate out and around and find it.

00:09:30.870 --> 00:09:31.980
I want to go directly to it.

00:09:32.050 --> 00:09:36.620
So another thing that
VoiceOver provides is the item chooser.

00:09:36.630 --> 00:09:41.020
And what that does is it will list all
of the visible items in the window.

00:09:41.020 --> 00:09:42.420
So let me bring that out.

00:09:42.460 --> 00:09:45.640
Bill, item chooser menu, 21 items.

00:09:45.640 --> 00:09:47.360
So there are 21 items here.

00:09:47.360 --> 00:09:49.690
I can use type ahead to
jump quickly to send.

00:09:49.690 --> 00:09:50.920
So let me type send.

00:09:51.440 --> 00:09:53.200
One item, send button.

00:09:53.200 --> 00:09:54.040
Send button.

00:09:54.040 --> 00:09:55.440
So now I'm at the send button.

00:09:55.440 --> 00:09:56.450
I can simply press it.

00:09:56.490 --> 00:09:57.090
Press.

00:09:57.160 --> 00:09:57.620
Text.

00:09:57.660 --> 00:10:00.530
I recompiled it and
updated my public folder.

00:10:00.540 --> 00:10:01.340
Okay.

00:10:01.340 --> 00:10:02.870
Well that's the end of the demonstration.

00:10:02.950 --> 00:10:03.090
Text.

00:10:03.100 --> 00:10:03.120
I recompiled.

00:10:03.300 --> 00:10:04.620
Let me turn VoiceOver off.

00:10:04.620 --> 00:10:05.570
VoiceOver off.

00:10:05.580 --> 00:10:06.680
Cool.

00:10:06.680 --> 00:10:09.380
If I could have the slides back up.

00:10:11.660 --> 00:10:13.640
All right,
so you may be asking yourself now,

00:10:13.640 --> 00:10:14.690
what should I do now?

00:10:14.690 --> 00:10:18.690
Well, the first thing that you need
to do is you need to support

00:10:18.690 --> 00:10:19.850
the Accessibility APIs.

00:10:19.860 --> 00:10:22.640
So everything,
all the information that you provide to

00:10:22.640 --> 00:10:26.640
the Accessibility APIs is the information
that VoiceOver gives to the user.

00:10:26.640 --> 00:10:30.470
So the more you support these APIs,
the more full experience that your users

00:10:30.470 --> 00:10:32.660
are going to have with your application.

00:10:32.820 --> 00:10:37.220
Now, VoiceOver may be the main
client of these APIs,

00:10:37.220 --> 00:10:38.320
but there are other ones.

00:10:38.320 --> 00:10:41.560
Eric Seymour, our manager,
demoed one at the State of

00:10:41.560 --> 00:10:43.260
the Union on Monday.

00:10:44.730 --> 00:10:47.630
It's very important
to support these APIs,

00:10:47.630 --> 00:10:51.600
but also full keyboard navigation
so you know when you hit tab,

00:10:51.790 --> 00:10:53.320
focus moves from control to control.

00:10:53.320 --> 00:10:55.840
Now, since this is Cocoa,
a lot of this is already

00:10:55.840 --> 00:10:57.470
done automatically for you.

00:10:57.470 --> 00:11:00.480
That's why Cocoa is the preferred
method of starting new applications.

00:11:00.480 --> 00:11:04.450
But if you have custom controls,
you want to make sure that

00:11:04.740 --> 00:11:07.280
those are in the keyboard loop.

00:11:07.280 --> 00:11:10.390
So that's something that you
need to think about as well.

00:11:11.730 --> 00:11:14.980
Also, there are going to be some,
there may be some features in your

00:11:15.030 --> 00:11:16.800
application that require the mouse.

00:11:16.800 --> 00:11:19.200
And you're going to need
to identify these and find

00:11:19.200 --> 00:11:22.640
alternative ways of accessing
those features using the keyboard.

00:11:22.640 --> 00:11:26.340
Now, for example,
our favorite example is drag and drop.

00:11:26.380 --> 00:11:28.180
So in the Finder,
if you want to copy a file,

00:11:28.240 --> 00:11:30.020
you drag it from one place to another.

00:11:30.680 --> 00:11:34.040
Now, the Finder has solved this
by using copy and paste.

00:11:34.040 --> 00:11:38.240
So you can select the item, hit copy,
open the destination, and hit paste.

00:11:38.240 --> 00:11:41.440
You may be able to use this in some
of the areas that you identified,

00:11:41.440 --> 00:11:43.920
or you may want to come
up with some of your own.

00:11:43.920 --> 00:11:50.630
Now, once you've done all of this work
accessorizing your application...

00:11:51.890 --> 00:11:54.180
You're going to want to test to make
sure that your users are going to be

00:11:54.180 --> 00:11:56.550
able to take advantage of all that.

00:11:56.620 --> 00:12:00.300
So Apple provides a couple of tools
that are in the developer package.

00:12:00.360 --> 00:12:02.890
The first one is the
Accessibility Verifier.

00:12:02.940 --> 00:12:06.940
Now this is a good application to get
a general sense of your application.

00:12:06.940 --> 00:12:10.100
You basically point this to
your running application.

00:12:10.150 --> 00:12:13.270
It will go through all of the
open windows and check all of the

00:12:13.270 --> 00:12:16.890
controls and make sure that you've
supported all the APIs properly.

00:12:16.950 --> 00:12:19.310
It may flag things you've
forgotten to do or some things

00:12:19.350 --> 00:12:21.300
that you've done incorrectly.

00:12:21.520 --> 00:12:24.850
The Accessibility Inspector is
great to focus in on a particular

00:12:24.880 --> 00:12:27.720
element so you can get all the
information for one element.

00:12:27.810 --> 00:12:30.790
When Mike comes up on the
stage in a couple of seconds,

00:12:30.790 --> 00:12:34.290
he'll show you how that application
would be used in his demos.

00:12:34.300 --> 00:12:38.530
Most importantly, you need to test your
application with VoiceOver.

00:12:38.530 --> 00:12:41.980
You need to unplug the keyboard
and turn off the display.

00:12:41.980 --> 00:12:46.740
Run your applications like the
user would who is using VoiceOver.

00:12:46.740 --> 00:12:50.640
Make sure that all of the features
that you provide can be accessed.

00:12:51.610 --> 00:12:54.670
When you can access all those features,
you know you have a fully

00:12:54.670 --> 00:12:56.060
accessible application.

00:12:56.270 --> 00:13:00.560
Now what you see up on the
screen is a key mapping.

00:13:00.790 --> 00:13:02.870
This is available for download.

00:13:02.950 --> 00:13:05.100
You can see the URL there at the bottom.

00:13:05.100 --> 00:13:06.270
There are several of these.

00:13:06.320 --> 00:13:09.210
Now, one of the things that I mentioned
was dimming your screen.

00:13:09.300 --> 00:13:11.940
It may be difficult to
do that on your laptops,

00:13:11.980 --> 00:13:15.240
but we offer a feature
that lets you do that.

00:13:15.290 --> 00:13:19.020
I challenge you, go ahead and find,
there's a couple of these maps.

00:13:19.080 --> 00:13:21.840
Download them and try and
find out how to do that.

00:13:23.590 --> 00:13:26.180
So with that,
let me ask Mike to come up on stage

00:13:26.180 --> 00:13:30.170
and show you exactly how to make your
Cocoa applications fully accessible.

00:13:30.170 --> 00:13:32.130
Thank you.

00:13:37.000 --> 00:13:41.860
- Hello, my name is Mike Engber,
and I'm gonna talk to you today

00:13:41.860 --> 00:13:46.530
about how to make your Cocoa apps
work with the Accessibility APIs.

00:13:48.790 --> 00:13:53.820
When we talk about the
accessibility architecture in OS X,

00:13:53.920 --> 00:13:56.210
there's really two halves to the story.

00:13:56.220 --> 00:14:00.560
The first are the APIs that
assistive apps like VoiceOver use

00:14:00.560 --> 00:14:03.740
in order to inspect the user
interfaces of other applications.

00:14:03.760 --> 00:14:06.640
And in this diagram,
that's represented by the green box.

00:14:06.640 --> 00:14:10.680
The other half of the story is what
the applications themselves have to

00:14:10.740 --> 00:14:13.060
do to expose their user interfaces.

00:14:13.080 --> 00:14:15.930
And those are represented
by the red boxes.

00:14:16.480 --> 00:14:19.100
And today we're going to mostly
talk just about the red boxes,

00:14:19.100 --> 00:14:23.830
specifically what Cocoa apps need to
do to work with the accessibility APIs.

00:14:23.840 --> 00:14:28.690
Now, before we get started,
it helps to review one of the

00:14:28.930 --> 00:14:33.520
fundamental problems that's
addressed by the accessibility APIs.

00:14:33.520 --> 00:14:37.620
And that is, how does an application
represent its user interface?

00:14:37.620 --> 00:14:42.540
Now, applications have a natural way of
representing their user interface.

00:14:42.540 --> 00:14:45.840
Cocoa apps use NSWindows or NSControls.

00:14:46.650 --> 00:14:48.920
and Carbon apps use

00:14:49.000 --> 00:14:52.280
and I are working on the
Windows Refs and Control Refs.

00:14:52.280 --> 00:14:55.400
But the problem with using these
natural representations is that

00:14:55.400 --> 00:14:59.540
it requires the assistive app to
understand Cocoa and Carbon and any

00:14:59.670 --> 00:15:01.840
other frameworks we add to the mix.

00:15:01.840 --> 00:15:04.700
And another problem with these
natural representations is they

00:15:04.790 --> 00:15:08.680
include a lot of extraneous detail,
clipping views and border views,

00:15:08.810 --> 00:15:13.260
things that aren't really part of
the user interface and are of no

00:15:13.310 --> 00:15:16.770
interest to assistive applications.

00:15:17.750 --> 00:15:21.940
So the solution that we've come up
with is to use this abstract object

00:15:22.020 --> 00:15:25.570
called a UI element to represent
everything in the user interface.

00:15:25.730 --> 00:15:29.240
Windows are UI elements,
menus are UI elements,

00:15:29.300 --> 00:15:32.540
the application itself is a UI element.

00:15:32.920 --> 00:15:36.000
Your application is a
hierarchy of UI elements.

00:15:36.000 --> 00:15:41.700
UI elements have attributes like a title
or a value or a children attribute,

00:15:41.700 --> 00:15:43.510
which is how you traverse the hierarchy.

00:15:43.620 --> 00:15:46.060
And then some UI elements
also have actions.

00:15:46.060 --> 00:15:49.860
A button might have a press action or a
slider might have an increment action.

00:15:49.860 --> 00:15:54.180
And rather than go into detail
about UI elements in slides,

00:15:54.200 --> 00:15:57.400
I'm going to use a tool,
Accessibility Inspector,

00:15:57.400 --> 00:16:03.230
which will let us look at some live
UI elements in a running application.

00:16:15.120 --> 00:16:20.370
So I'm going to use
TextEdit's Preferences pane,

00:16:20.370 --> 00:16:26.780
and I'm going to launch
Accessibility Inspector.

00:16:26.780 --> 00:16:29.490
I'll increase the font size.

00:16:31.380 --> 00:16:35.870
What Accessibility Inspector does
is as I move the mouse,

00:16:35.870 --> 00:16:39.800
it's reporting information about
the UI element under the mouse.

00:16:39.800 --> 00:16:43.320
Now, I want to use the mouse
for some other purposes,

00:16:43.320 --> 00:16:48.760
so I'm going to lock our attention
on the current UI element,

00:16:48.760 --> 00:16:50.960
and that's why all the text turns red.

00:16:50.960 --> 00:16:55.460
So we're locked now,
and we're locked on this radio button.

00:16:55.460 --> 00:16:59.380
Here's the role of the radio button,
and the whole hierarchy

00:16:59.400 --> 00:17:00.740
is shown above it.

00:17:00.840 --> 00:17:02.730
So it's a radio button
inside a radio group,

00:17:02.810 --> 00:17:05.480
in a tab group, in a window,
in the application text edit.

00:17:05.480 --> 00:17:07.970
And then if we look
further down the window,

00:17:07.970 --> 00:17:11.460
we can see a list of attributes
that this radio button has.

00:17:11.460 --> 00:17:14.780
It has a role, and you can think of that
like the radio button's class.

00:17:14.780 --> 00:17:18.660
It has a role description,
and so that's a version of the class

00:17:18.660 --> 00:17:21.300
that's suitable to report to the user.

00:17:21.300 --> 00:17:22.630
It's a string that would be localized.

00:17:22.640 --> 00:17:24.430
It has help.

00:17:24.570 --> 00:17:25.780
It has a value.

00:17:25.780 --> 00:17:28.020
This radio button isn't checked,
so the value's zero.

00:17:28.020 --> 00:17:30.520
And here's the position.

00:17:30.540 --> 00:17:31.200
A size.

00:17:31.200 --> 00:17:32.960
All these other attributes.

00:17:32.960 --> 00:17:36.660
And it also has an action,
a press action.

00:17:36.660 --> 00:17:37.850
And it also has a press action.

00:17:38.530 --> 00:17:43.540
And now that we're locked on
this particular UI element,

00:17:43.540 --> 00:17:47.870
another panel is available to
us that we can interact with it.

00:17:47.900 --> 00:17:51.680
And so one of the things we could do is
actually we can pick one of the actions,

00:17:51.680 --> 00:17:53.480
like the press action,
and we can perform it.

00:17:53.480 --> 00:17:57.210
So when I hit this perform button,
we'd expect that the same

00:17:57.410 --> 00:18:01.040
thing would happen as if
I clicked on that radio button.

00:18:01.060 --> 00:18:05.760
And we can see it changed state.

00:18:06.110 --> 00:18:11.630
Another feature of this that we can
use is we can highlight the bounds of

00:18:11.630 --> 00:18:15.480
the UI element we're interacting with,
and sometimes that's helpful to give

00:18:15.480 --> 00:18:18.400
us context as to what we're working on.

00:18:18.400 --> 00:18:23.460
I'm going to now pick another
UI element to operate on.

00:18:26.100 --> 00:18:30.740
I'm going to pick one of these
text fields and I'll lock on it.

00:18:30.880 --> 00:18:37.290
And another thing this panel
lets us do is pick an attribute.

00:18:37.410 --> 00:18:41.300
The attributes we can modify
have a W for writable after them.

00:18:41.300 --> 00:18:46.340
We can pick the value of this text field,
which is now 75,

00:18:46.340 --> 00:18:48.000
and we can change it to something else.

00:18:48.000 --> 00:18:52.150
We enter 42,
and then we hit the set value button,

00:18:52.190 --> 00:18:55.220
and it changes as if
we'd entered that value.

00:19:04.910 --> 00:19:13.900
Back to the slides.

00:19:13.900 --> 00:19:17.080
Now this pyramid is meant
to give you an idea of what

00:19:17.080 --> 00:19:20.890
efforts are required to support
accessibility in your applications.

00:19:20.890 --> 00:19:25.030
Like the food pyramid,
the stuff towards the bottom are the

00:19:25.150 --> 00:19:27.760
things that you need to do the most of.

00:19:27.760 --> 00:19:30.320
Fortunately,
those are the easiest items to do.

00:19:30.320 --> 00:19:34.130
As you move up the pyramid,
things get a little more challenging,

00:19:34.330 --> 00:19:37.360
but they're less frequently needed.

00:19:37.360 --> 00:19:43.010
Before we go further into this,
I'm going to demonstrate the application

00:19:43.110 --> 00:19:45.980
that we're going to be accessorizing.

00:20:23.000 --> 00:20:25.760
The project has disappeared on me.

00:20:25.760 --> 00:20:29.000
Nothing in it.

00:20:29.000 --> 00:20:34.390
I do not have an easy way
to fix that right now.

00:20:36.400 --> 00:20:41.600
[Transcript missing]

00:20:49.400 --> 00:20:50.830
Well, there's a CD in my bag.

00:20:50.830 --> 00:20:52.750
That's the only place
I know to get the source.

00:20:52.870 --> 00:20:55.880
So, if someone can retrieve me my bag,
in the meantime,

00:20:55.880 --> 00:20:57.710
I can run the application.

00:20:58.150 --> 00:21:01.830
and show you what the finished product
looks like and I'll get a copy of

00:21:01.830 --> 00:21:02.960
the source up here in a second.

00:21:02.960 --> 00:21:07.760
So anyway, this is the application we're
going to be accessorizing.

00:21:07.760 --> 00:21:11.510
And the central part of it is a
custom control that works like

00:21:11.510 --> 00:21:13.820
a client-side image map in HTML.

00:21:13.820 --> 00:21:19.030
So this is an image and superimposed on
it are various hotspots you can click on.

00:21:19.050 --> 00:21:21.190
So each food group is a hotspot.

00:21:21.200 --> 00:21:24.820
You can see I can click on them
and they highlight and they

00:21:24.820 --> 00:21:27.370
cause something to take effect.

00:21:32.560 --> 00:21:37.830
Another part of this application
is this little segmented control,

00:21:37.830 --> 00:21:41.390
and this controls the sort of mode
of operation of the image map.

00:21:41.420 --> 00:21:45.100
So if you click the middle segment,
it'll highlight all the hotspots,

00:21:45.160 --> 00:21:48.480
and you can imagine tying that to, say,
holding down the Option key.

00:21:48.480 --> 00:21:53.720
And in this third mode,
the image map will highlight as you

00:21:53.730 --> 00:21:57.020
mouse over the various hotspots.

00:21:57.020 --> 00:22:01.130
So these are different modes
that this thing can operate in.

00:22:14.550 --> 00:22:16.930
Fresh copy of the image map example.

00:22:16.930 --> 00:22:21.280
This time with everything in it.

00:22:40.430 --> 00:22:48.650
Okay, so one thing I want to show you is
how that image map control works.

00:22:50.400 --> 00:22:52.740
Even though this doesn't have
much to do with accessibility,

00:22:52.740 --> 00:23:00.020
it will give you some idea
of how the control operates.

00:23:04.670 --> 00:23:08.500
Here's the header file
for this custom control.

00:23:08.500 --> 00:23:10.360
We'll look at some of the methods.

00:23:10.450 --> 00:23:11.960
There's methods for configuring it.

00:23:12.010 --> 00:23:14.380
This sets the image.

00:23:14.380 --> 00:23:19.660
Here you can manually add hotspots,
rectangles, circles, or polygons.

00:23:19.660 --> 00:23:24.200
Probably a more convenient way to set
up those hotspots is the same way you'd

00:23:24.210 --> 00:23:26.660
do it if you were creating a web page.

00:23:26.660 --> 00:23:30.160
There's all these tools out there
for creating client-side image maps.

00:23:30.160 --> 00:23:34.900
They spit out HTML that
looks something like this.

00:23:35.010 --> 00:23:41.540
There are methods that will let you
specify an HTML file like this one,

00:23:41.600 --> 00:23:45.580
and it'll initialize
the hotspots from that.

00:23:47.320 --> 00:23:50.800
And then there's some
target and action methods.

00:23:50.800 --> 00:23:55.290
So it operates like other NS controls.

00:23:55.290 --> 00:24:00.080
And there's various other methods for
configuring its mode of operation.

00:24:00.080 --> 00:24:02.910
So this control is meant
to be sort of non-trivial,

00:24:02.910 --> 00:24:06.350
something that you could use as
a starting point for something

00:24:06.370 --> 00:24:08.120
in your own applications.

00:24:11.500 --> 00:24:13.770
All right,
now the next thing I want to do

00:24:13.770 --> 00:24:18.530
before we proceed is I want to bring
Rick back up here to demonstrate

00:24:18.890 --> 00:24:23.470
how this application works with
VoiceOver before it's been accessorized

00:24:23.470 --> 00:24:25.890
and after it's been accessorized.

00:24:27.710 --> 00:24:30.750
Okay, so this should be really quick.

00:24:30.790 --> 00:24:38.190
What I'm gonna do is launch both
versions of the application.

00:24:42.890 --> 00:24:49.340
All right, so this one on the left is the
non-accessorized application

00:24:49.380 --> 00:24:50.790
before any work is done on it.

00:24:50.820 --> 00:24:52.160
So I'm going to launch VoiceOver.

00:24:52.160 --> 00:24:57.800
VoiceOver on image map example,
image map example, window blank.

00:24:57.840 --> 00:25:00.610
Okay,
so first you notice that it skipped,

00:25:00.610 --> 00:25:05.470
the first item is not near the top,
so it completely skipped the image map.

00:25:05.500 --> 00:25:07.920
What I'm going to do is I'm going
to navigate through some of the

00:25:07.920 --> 00:25:10.800
controls and we'll hear what it
sounds like before we accessorize.

00:25:11.390 --> 00:25:12.910
Radio button one of three.

00:25:12.920 --> 00:25:15.310
Radio button two of three.

00:25:15.320 --> 00:25:17.220
So even though I can see.

00:25:17.320 --> 00:25:18.870
Radio button three of three.

00:25:18.880 --> 00:25:21.890
The icons, if I can't see the screen,
that doesn't tell me much.

00:25:21.900 --> 00:25:24.020
So I'd be scared to press
any of these things.

00:25:24.020 --> 00:25:25.570
And as I move around.

00:25:25.580 --> 00:25:27.460
Image map mode selector.

00:25:27.460 --> 00:25:28.610
Blank.

00:25:28.680 --> 00:25:31.410
So it completely skipped the
whole image map at the top.

00:25:31.450 --> 00:25:35.060
So now let me move over to
the accessorize application.

00:25:35.060 --> 00:25:38.810
Image map example, image map example,
image map.

00:25:38.910 --> 00:25:41.300
So you'll notice that we did
land at the top of the screen.

00:25:41.300 --> 00:25:43.410
So I can go to the window.

00:25:43.500 --> 00:25:45.390
And I can ask what element I'm on.

00:25:45.500 --> 00:25:48.570
Fats and sweets button is
in the voiceover cursor.

00:25:48.680 --> 00:25:51.560
So now I know I'm at fats and
sweets and I can move around.

00:25:51.680 --> 00:25:52.680
Dairy button.

00:25:52.680 --> 00:25:54.680
Meat and eggs button.

00:25:54.680 --> 00:25:56.680
Vegetables button.

00:25:56.680 --> 00:25:58.680
And interact with these buttons,
I can press them.

00:25:58.680 --> 00:26:00.680
Press vegetables button.

00:26:00.780 --> 00:26:04.680
And let me go down so that you
can see the segmented control.

00:26:04.870 --> 00:26:06.680
To last item.

00:26:06.680 --> 00:26:09.680
Rollover version highlighting
radio button three of three.

00:26:09.680 --> 00:26:10.830
So rollover highlighting.

00:26:10.840 --> 00:26:12.840
Visible hot spots.

00:26:12.840 --> 00:26:14.840
Radio button two of three.

00:26:14.840 --> 00:26:16.840
So now I know what the controls will do.

00:26:16.840 --> 00:26:20.840
And I can interact and fully access,
use this application.

00:26:20.870 --> 00:26:21.830
That's it.

00:26:21.840 --> 00:26:23.840
Let me turn voiceover back off.

00:26:23.840 --> 00:26:25.840
Voiceover off.

00:26:25.840 --> 00:26:26.840
Okay.

00:26:26.850 --> 00:26:29.100
Back to the slides.

00:26:33.460 --> 00:26:34.340
Can we get the slides back?

00:26:34.340 --> 00:26:42.800
Okay,
so now that we've seen the application

00:26:42.800 --> 00:26:45.820
we're going to accessorize,
we can flesh out the pyramid a bit more.

00:26:45.820 --> 00:26:49.080
First,
we're going to add some attributes.

00:26:49.080 --> 00:26:52.200
We're going to add one
using Interface Builder,

00:26:52.220 --> 00:26:54.320
and then we're going to
add one programmatically,

00:26:54.320 --> 00:26:57.620
and then we're going to handle
a tricky case involving the

00:26:57.620 --> 00:26:59.320
segments of the segmented control.

00:26:59.320 --> 00:27:04.120
Then we're going to see what it
took to make the image map view

00:27:04.120 --> 00:27:07.980
itself work with accessibility,
and then finally we're going to look

00:27:08.030 --> 00:27:11.280
at what it took to make the hotspots
themselves work with accessibility,

00:27:11.280 --> 00:27:15.820
and that will require
accessorizing a class from scratch.

00:27:18.810 --> 00:27:23.500
So we're going to start off with adding
an attribute using Interface Builder.

00:27:23.550 --> 00:27:27.940
And we're going to add an
attribute to the image map itself.

00:27:28.020 --> 00:27:30.020
It represents itself as a group.

00:27:30.090 --> 00:27:34.880
So it's a group containing buttons,
the hotspots.

00:27:34.880 --> 00:27:37.540
But that's all
VoiceOver could detect now,

00:27:37.540 --> 00:27:38.040
that it's a group.

00:27:38.150 --> 00:27:42.600
So we want VoiceOver to know that
it's really a food pyramid group.

00:27:42.630 --> 00:27:46.000
And we're going to do this
using Interface Builder.

00:27:46.070 --> 00:27:48.390
So back to the demo machine.

00:27:59.830 --> 00:28:07.910
So here's our nib with our window,
and we're going to select the image map,

00:28:07.930 --> 00:28:12.720
and then we're going to bring
up the inspector for it.

00:28:14.150 --> 00:28:18.260
I apologize the fonts
are a little small here.

00:28:18.260 --> 00:28:22.800
You'll notice that one of the options
in this menu is Accessibility.

00:28:22.820 --> 00:28:26.190
So we bring that up and you'll see
that there's a field here where

00:28:26.270 --> 00:28:27.950
we can type in the description.

00:28:27.960 --> 00:28:31.950
So we can type in food,

00:28:32.230 --> 00:28:36.990
Remember I said we want this
to be a food pyramid group.

00:28:37.090 --> 00:28:40.180
The fact that it's a group,
that comes from its role.

00:28:40.190 --> 00:28:44.200
So assistive apps can already
determine that it's a group.

00:28:44.200 --> 00:28:47.200
All we provide here is
the words food pyramid.

00:28:47.200 --> 00:28:51.510
If we typed in food pyramid group here,
not only would it be redundant,

00:28:51.510 --> 00:28:55.280
it could result in some awkward
behavior because assistive apps

00:28:55.410 --> 00:28:59.200
often combine the description and the
role and present that to the user.

00:28:59.200 --> 00:29:02.120
So if they did that,
it would be food pyramid group group.

00:29:02.120 --> 00:29:05.510
So when you're filling in descriptions,
make sure to just put in the

00:29:05.510 --> 00:29:07.200
description and not the group.

00:29:07.200 --> 00:29:11.870
And that's pretty much all we need to do.

00:29:14.400 --> 00:29:19.560
So using Interface Builder to add an
attribute is very straightforward.

00:29:19.560 --> 00:29:21.560
So back to the slides.

00:29:21.560 --> 00:29:27.390
Slides, please.

00:29:34.110 --> 00:29:36.970
The next thing we're going to
do is we're going to add an

00:29:36.970 --> 00:29:40.010
attribute programmatically.

00:29:40.310 --> 00:29:45.630
We can visually see that the
static text Image Map Mode Selector

00:29:45.720 --> 00:29:50.200
is acting like the title for
that segmented control above it.

00:29:50.200 --> 00:29:52.200
But they're two entirely
separate NS controls.

00:29:52.200 --> 00:29:56.070
This relationship is apparent to us,
but it's not exposed

00:29:56.070 --> 00:29:58.200
through accessibility.

00:29:58.200 --> 00:30:02.150
In order to make that relationship
available to accessibility,

00:30:02.200 --> 00:30:06.110
we have to add an attribute,
a UIElementTitle attribute.

00:30:08.900 --> 00:30:12.080
So, the first thing to note is,
if you were really doing this,

00:30:12.200 --> 00:30:14.240
you could do this in IB,
just like adding an outlet.

00:30:14.240 --> 00:30:17.200
There's a similar interface for
adding title UI element attributes,

00:30:17.200 --> 00:30:18.650
and that would be the
easiest way to do it.

00:30:18.740 --> 00:30:21.840
But for educational purposes,
I'm going to show you how

00:30:21.840 --> 00:30:23.580
to do it programmatically.

00:30:24.590 --> 00:30:26.940
The next thing to note
is when you see the code,

00:30:26.940 --> 00:30:29.560
you're going to see that I don't
use the outlets directly.

00:30:29.560 --> 00:30:34.740
And that's because the outlet,
which contains an NS control,

00:30:34.740 --> 00:30:38.550
like the NS segmented control,
that may or may not be the right

00:30:38.550 --> 00:30:40.500
thing to use as the UI element.

00:30:40.500 --> 00:30:43.880
Remember, there's a segmented control,
and then inside it's a segmented cell.

00:30:43.880 --> 00:30:46.640
So there's this whole issue of
which one's really the UI element.

00:30:46.780 --> 00:30:50.570
Well, we use a utility function,
NSAccessibility, unignored descendant,

00:30:50.570 --> 00:30:52.310
to answer that question for us.

00:30:52.310 --> 00:30:55.850
And I'm actually going to return to
this issue later in the presentation

00:30:55.980 --> 00:30:57.750
and elaborate on it a bit more.

00:30:57.760 --> 00:31:00.480
And then finally,
once we get the right object,

00:31:00.480 --> 00:31:03.100
there's a new method
that was added in Tiger,

00:31:03.100 --> 00:31:05.980
AccessibilitySetOverrideValueForAttribute
,

00:31:05.980 --> 00:31:09.870
that's going to let us override
the value of an existing attribute,

00:31:09.870 --> 00:31:13.200
or if that attribute doesn't exist,
it's going to add that

00:31:13.200 --> 00:31:15.300
attribute to the object.

00:31:16.850 --> 00:31:19.920
So I need to go back to the demo machine.

00:31:22.010 --> 00:31:25.470
And if you're following along,
the code for this is in

00:31:25.470 --> 00:31:30.840
ImageMapController.m.

00:31:30.840 --> 00:31:34.790
And this work is done in
the AwakeFromNib method.

00:31:37.440 --> 00:31:39.340
And you'll see there's
a comment that says,

00:31:39.350 --> 00:31:42.710
"Set up segmented control accessibility."
So the first thing we do is we

00:31:42.820 --> 00:31:46.600
create a couple local variables
to hold the UI elements of interest,

00:31:46.600 --> 00:31:49.700
and we're using that utility
function on the outlets,

00:31:49.700 --> 00:31:51.960
as I mentioned before.

00:31:52.200 --> 00:31:57.110
And then we're gonna use the method
accessibility set override value.

00:31:57.650 --> 00:31:59.260
The receiver is the segmented control.

00:31:59.260 --> 00:32:04.000
That's the UI element we
want to get the attribute.

00:32:04.000 --> 00:32:08.560
The name of the attribute is the
NSAccessibilityTitleUIElement attribute,

00:32:08.620 --> 00:32:09.560
and the value

00:32:10.220 --> 00:32:11.380
is another UI element.

00:32:11.380 --> 00:32:14.140
It's the segmented
control title UI element.

00:32:14.140 --> 00:32:21.100
And so basically this line of code
does all the work of interest.

00:32:21.100 --> 00:32:24.690
Okay, back to the slides please.

00:32:31.390 --> 00:32:33.420
Okay,
now the third case we're going to handle

00:32:33.870 --> 00:32:38.330
are descriptions for the individual
segments in the segmented control.

00:32:39.060 --> 00:32:43.800
So as Rick demonstrated,
if we don't do anything, these things,

00:32:43.800 --> 00:32:47.370
as far as VoiceOver is concerned,
are just radio button one, two,

00:32:47.370 --> 00:32:49.680
and three,
not very descriptive to the user.

00:32:49.680 --> 00:32:54.570
So we want to do a better job and
elaborate on what those things are.

00:32:57.120 --> 00:33:01.990
Now the tricky thing here is
knowing what object are we

00:33:02.000 --> 00:33:03.280
going to set the attribute on.

00:33:03.320 --> 00:33:06.390
We have a segmented control,
and the segmented control

00:33:06.390 --> 00:33:08.610
has a segmented cell,
but there are no NS segments.

00:33:08.680 --> 00:33:12.480
There are no objects representing
the individual segments.

00:33:12.480 --> 00:33:16.680
So that makes it a little bit tricky.

00:33:18.520 --> 00:33:23.140
Now, the solution to this problem
is we can ask the segmented

00:33:23.230 --> 00:33:26.960
control for its children from
an accessibility point of view,

00:33:26.960 --> 00:33:28.760
and it will return them.

00:33:28.760 --> 00:33:30.580
And we don't really,
we don't have to know what

00:33:30.580 --> 00:33:31.800
kind of objects they are.

00:33:31.800 --> 00:33:33.500
We just operate on those.

00:33:33.500 --> 00:33:36.930
So the basic approach we're going
to take is ask the segmented

00:33:36.950 --> 00:33:39.540
control for its children,
loop through the children,

00:33:39.540 --> 00:33:42.040
and then use accessibility
set override value,

00:33:42.040 --> 00:33:45.340
just like we did before,
on each of those children.

00:33:48.060 --> 00:33:51.600
So back to the demo machine.

00:33:51.650 --> 00:33:55.590
And the line of code that
does that is right here.

00:33:55.600 --> 00:33:57.640
The actual work's been
factored out in a function,

00:33:57.640 --> 00:33:59.600
which we're going to take a look at.

00:33:59.600 --> 00:34:02.160
But basically,
I specify the segmented control,

00:34:02.200 --> 00:34:04.570
and then I give it a list of
the descriptions to be used

00:34:04.570 --> 00:34:06.640
on the individual segments.

00:34:06.650 --> 00:34:08.960
And I factored it out into
a nice little function,

00:34:08.960 --> 00:34:13.080
so you could just copy and paste this
into your own projects if you like.

00:34:13.940 --> 00:34:16.800
And here we'll take a quick
look at that function.

00:34:16.800 --> 00:34:21.500
The first thing it does is it,
once again, it takes the control and uses

00:34:21.570 --> 00:34:25.480
this utility function to make sure
we get to the right UI element.

00:34:27.070 --> 00:34:30.260
and then here we're going to message
it and we're going to ask for the

00:34:30.260 --> 00:34:31.600
value of the children attribute.

00:34:31.610 --> 00:34:33.830
We're going to get back
an array of objects.

00:34:33.830 --> 00:34:37.820
And again, we don't know what kind of
objects they are exactly,

00:34:37.820 --> 00:34:40.310
but we know they are UI elements.

00:34:40.800 --> 00:34:51.900
[Transcript missing]

00:34:52.500 --> 00:34:56.640
Setting the description attribute
and the value is the description.

00:34:58.500 --> 00:35:00.280
So that's all there is to that.

00:35:00.530 --> 00:35:06.380
And I think at this point,
I will demonstrate the result of all

00:35:06.380 --> 00:35:11.770
this work using UI Element Inspector.

00:35:20.200 --> 00:35:21.030
Here's our app.

00:35:21.040 --> 00:35:22.960
Let's get some of the
other stuff out of the way.

00:35:22.970 --> 00:35:24.870
So here's our running application.

00:35:24.880 --> 00:35:29.790
I'll run Accessibility Inspector.

00:35:34.280 --> 00:35:36.120
So we did three things.

00:35:36.320 --> 00:35:39.040
We added a description to the image map.

00:35:39.090 --> 00:35:41.850
So let's lock onto the image map.

00:35:42.060 --> 00:35:43.890
And again,
I'm going to put the highlight on so you

00:35:43.890 --> 00:35:45.600
can see I've locked onto the right thing.

00:35:45.600 --> 00:35:49.560
And if we look in here,
we see here there's an AX description,

00:35:49.560 --> 00:35:50.640
food pyramid.

00:35:50.640 --> 00:35:52.600
So we know that one worked.

00:35:56.090 --> 00:35:59.000
Another thing we did was give
descriptions to the individual segments.

00:35:59.000 --> 00:36:02.200
So here I can lock on a segment,
and we can see it has an

00:36:02.200 --> 00:36:04.440
AX description rollover highlighting.

00:36:04.440 --> 00:36:06.870
I can lock on another segment.

00:36:08.440 --> 00:36:10.910
and I could see it has a description,
visible hotspots.

00:36:10.920 --> 00:36:12.020
So that worked also.

00:36:12.020 --> 00:36:16.800
And then finally, the next thing,
the last thing that we did,

00:36:16.800 --> 00:36:22.940
or the thing we haven't examined yet,
is we gave to the segmented control as

00:36:22.940 --> 00:36:26.640
a whole a title UI element attribute.

00:36:26.640 --> 00:36:29.070
Now you'll notice whenever I try to
mouse over the control as a whole,

00:36:29.140 --> 00:36:30.230
I keep hitting the buttons.

00:36:30.260 --> 00:36:31.760
So it seems like I'm kind of stuck.

00:36:31.760 --> 00:36:33.060
I want to get to their parent.

00:36:33.060 --> 00:36:34.020
How am I going to do it?

00:36:34.090 --> 00:36:36.100
Here's a little trick you can use.

00:36:36.120 --> 00:36:38.130
You lock onto one of the buttons.

00:36:38.400 --> 00:36:42.700
And then in this little panel
that comes up while you're locked,

00:36:42.700 --> 00:36:47.470
you can go to any of the attributes
whose value is another UI element.

00:36:47.580 --> 00:36:48.890
So here I'm going to go to the parent.

00:36:48.900 --> 00:36:51.160
And if you watch the highlight,
when I pick parent,

00:36:51.160 --> 00:36:52.940
you can see I've moved up the hierarchy.

00:36:53.060 --> 00:36:55.230
This window's changed or reflected.

00:36:55.260 --> 00:36:57.500
You can see I'm in the radio group now.

00:36:57.500 --> 00:37:00.190
And we can make sure that
we have an attribute,

00:37:00.270 --> 00:37:03.330
AX title UI element,
that's a piece of static text.

00:37:03.330 --> 00:37:08.160
And then if you want to make sure, well,
is that the right piece of static text?

00:37:09.650 --> 00:37:13.800
We can look and we can actually
see that in this go-to menu,

00:37:13.800 --> 00:37:15.210
the title UI element shows up.

00:37:15.300 --> 00:37:18.020
So we can now change the
focus to be that thing.

00:37:18.020 --> 00:37:21.090
And we can see we got the
right piece of static text.

00:37:21.100 --> 00:37:24.910
So back to the slides, please.

00:37:37.400 --> 00:37:41.220
Okay, so now before I proceed,
one thing I want to point out is we've

00:37:41.610 --> 00:37:46.230
covered now about 90% of what you need to
know to make your application accessible.

00:37:46.240 --> 00:37:49.140
The two remaining things I'm
going to illustrate are going

00:37:49.140 --> 00:37:51.950
to get more challenging,
but I don't want anyone

00:37:51.950 --> 00:37:53.370
to be daunted by it.

00:37:53.390 --> 00:37:56.510
I don't want you to think that
accessibility is too intimidating,

00:37:56.510 --> 00:37:57.000
right?

00:37:57.020 --> 00:37:59.600
Because if you just stick
to what we've done so far,

00:37:59.600 --> 00:38:03.580
you can make a huge difference in your
applications working with VoiceOver.

00:38:03.930 --> 00:38:07.670
And you can think of the next two topics
we're going to cover as extra credit for

00:38:07.700 --> 00:38:09.300
all the overachievers in the audience.

00:38:11.430 --> 00:38:14.360
And the first one we're going to talk
about is how did we make this image

00:38:14.360 --> 00:38:17.350
map itself work with accessibility?

00:38:19.450 --> 00:38:21.640
The good news is it
inherited from NSView.

00:38:21.640 --> 00:38:26.760
So most of its accessorization it
just inherits because it's a view and

00:38:26.760 --> 00:38:29.630
NSView works properly with accessibility.

00:38:29.650 --> 00:38:32.360
And because of that,
all we have to do is override

00:38:32.430 --> 00:38:35.840
the specific methods that we
want to behave differently.

00:38:38.420 --> 00:38:41.480
So I'm going to switch
to the demo machine.

00:38:41.480 --> 00:38:47.100
And we'll look at the source.

00:38:50.430 --> 00:38:53.920
Okay, all of the work for accessorizing
the Image Map is actually done

00:38:53.920 --> 00:38:58.140
in categories in a separate file,
ImageMapAccessibility.m.

00:38:58.140 --> 00:39:00.450
And that's a nice way to organize
your code if you want to keep the

00:39:00.460 --> 00:39:03.580
accessibility code all together.

00:39:06.060 --> 00:39:08.230
and here's the categories on Image Map.

00:39:08.240 --> 00:39:14.540
So you can see the first
method that we had to override

00:39:14.540 --> 00:39:15.930
is accessibility is ignored.

00:39:15.940 --> 00:39:18.540
It turns out NSViews
by default are ignored.

00:39:18.540 --> 00:39:22.670
Most views aren't actually
part of the user interface.

00:39:22.810 --> 00:39:25.480
They contain things that are
part of the user interface,

00:39:25.500 --> 00:39:28.900
but the views in and of themselves
are not that interesting.

00:39:28.960 --> 00:39:30.500
So by default, they're ignored.

00:39:30.500 --> 00:39:33.450
So the first thing we wanna do is say,
we're not ignored.

00:39:35.280 --> 00:39:39.550
The next method we override is
Accessibility Attribute Value,

00:39:39.550 --> 00:39:42.760
and there's a few attributes that
we want to change the value of.

00:39:42.890 --> 00:39:44.150
One of them is the role.

00:39:44.250 --> 00:39:46.910
We want to represent ourself as a group.

00:39:47.210 --> 00:39:49.260
The role description.

00:39:49.300 --> 00:39:52.980
We use a helper function to give us
the standard description for our role.

00:39:53.000 --> 00:39:54.500
So there's not much to figure out there.

00:39:54.500 --> 00:39:58.060
And then the final attribute we
override is the children attribute.

00:39:58.060 --> 00:39:59.750
These hotspots are not subviews.

00:39:59.920 --> 00:40:02.680
So we don't get them by default.

00:40:02.700 --> 00:40:05.930
So instead, we have to create children.

00:40:05.940 --> 00:40:09.490
And that's going to actually
be the topic of the...

00:40:09.680 --> 00:40:12.260
Next part of my presentation,
so I'm not going to go into detail here,

00:40:12.260 --> 00:40:14.530
but you can see that
we're creating an array,

00:40:14.620 --> 00:40:17.980
and for each hotspot,
we're adding an element to the array,

00:40:17.980 --> 00:40:20.320
and exactly what that element is,
I'm going to cover in a second.

00:40:22.930 --> 00:40:27.140
And then we also overrode
the hit test method.

00:40:27.260 --> 00:40:31.160
And this is because we want to,
if the mouse is over one of our children,

00:40:31.160 --> 00:40:34.300
we want to return that child
as the thing of interest.

00:40:34.440 --> 00:40:39.750
So we get, we're passed in a point and we
convert it to window coordinates

00:40:40.030 --> 00:40:41.840
from global coordinates.

00:40:41.950 --> 00:40:46.870
Then we convert it to local coordinates
and then we use a helper method to give

00:40:46.870 --> 00:40:49.140
us the hotspot that's over that point.

00:40:49.240 --> 00:40:52.740
And then we return

00:40:53.240 --> 00:41:03.530
Our child.

00:41:03.530 --> 00:41:03.530
And again,
the nature of what this object is,

00:41:03.530 --> 00:41:03.530
I'm going to cover in a second.

00:41:03.530 --> 00:41:03.530
But that's what we do when
we override hit testing.

00:41:03.530 --> 00:41:03.530
So back to the slides, please.

00:41:05.910 --> 00:41:09.650
So now we're going to do,
we're going to handle the

00:41:09.650 --> 00:41:11.730
children of the image map.

00:41:11.740 --> 00:41:14.200
And as I said before,
this is going to involve

00:41:14.220 --> 00:41:16.320
accessorizing a class from scratch.

00:41:21.350 --> 00:41:25.960
So the tricky part here is that
there are no objects representing

00:41:25.960 --> 00:41:28.100
those individual hotspots.

00:41:28.100 --> 00:41:31.060
Now, if you were designing this
control from scratch and you

00:41:31.060 --> 00:41:33.940
had accessibility in mind,
maybe you would create an object

00:41:34.090 --> 00:41:37.000
for each hotspot and that would
simplify the accessibility problem.

00:41:37.030 --> 00:41:42.000
But again, for purposes of illustration,
it's better here to show the hard case.

00:41:42.000 --> 00:41:44.400
What do you do when you
don't have any objects?

00:41:44.400 --> 00:41:47.910
And to handle it,
we're going to invent a class

00:41:47.910 --> 00:41:49.800
called Faux UI Elements.

00:41:49.800 --> 00:41:53.100
And this is a pretty generic class.

00:41:53.170 --> 00:41:55.300
And it turns out that we're
actually going to end up having to

00:41:55.300 --> 00:41:57.200
subclass it to solve our problem.

00:41:57.250 --> 00:42:00.610
But it's useful to solve it in a generic
way because that way you can take

00:42:00.700 --> 00:42:05.260
this Faux UI Element class out of here
and use it in your own applications.

00:42:05.530 --> 00:42:09.010
One thing I want to note is
these foe UI elements that we're

00:42:09.010 --> 00:42:12.160
going to use for our children,
we create them on the fly as needed.

00:42:12.160 --> 00:42:15.760
So when we're asked for our children,
we just allocate them, create an array,

00:42:15.760 --> 00:42:17.910
let it get auto-released,
and hand it back.

00:42:18.000 --> 00:42:21.300
So we're not going to try to cache
them and try to keep it in sync with

00:42:21.300 --> 00:42:23.260
the current state of the control.

00:42:23.260 --> 00:42:26.970
It's much easier just to create
them on the fly as they're needed.

00:42:28.930 --> 00:42:32.150
Before we get into it,
something that sometimes

00:42:32.190 --> 00:42:34.210
twists people around is,
well,

00:42:34.330 --> 00:42:36.450
how can I use these foe UI elements?

00:42:36.460 --> 00:42:37.400
They're not NSViews.

00:42:37.400 --> 00:42:39.000
How are they going to
work as UI elements?

00:42:39.000 --> 00:42:42.980
A UI element is anything that
implements the accessibility protocol.

00:42:43.120 --> 00:42:43.800
That's it.

00:42:43.800 --> 00:42:45.120
There's ten methods you implement.

00:42:45.290 --> 00:42:49.340
If you implement them all,
you can be used as a UI element.

00:42:51.650 --> 00:42:56.440
So, our foe UI elements,
they're just plain NS objects,

00:42:56.440 --> 00:42:59.400
and they're going to implement
the whole accessibility protocol.

00:42:59.400 --> 00:43:02.860
And when we look at the code,
you're going to see that they only keep

00:43:02.860 --> 00:43:07.430
track of their role in their parent,
which then leads to the question, well,

00:43:07.520 --> 00:43:09.260
if that's all they know,
how are they going to answer

00:43:09.260 --> 00:43:10.880
questions like their position or size?

00:43:10.880 --> 00:43:13.210
Well, the answer to that is,
they're not really going

00:43:13.210 --> 00:43:14.480
to answer that question.

00:43:14.480 --> 00:43:16.170
They're going to pass the
buck up to their parent.

00:43:16.730 --> 00:43:19.680
So,
we have this foe UI element protocol that

00:43:19.680 --> 00:43:25.060
the parent is expected to implement so
that the children can ask it to answer,

00:43:25.060 --> 00:43:26.900
you know, where am I?

00:43:26.900 --> 00:43:27.720
How big am I?

00:43:27.720 --> 00:43:29.060
Do I have the keyboard focus?

00:43:29.060 --> 00:43:30.010
Things like that.

00:43:30.060 --> 00:43:34.690
And then a final note is that
we have to override as equal.

00:43:34.700 --> 00:43:37.170
As I said before,
we're going to create these

00:43:37.170 --> 00:43:38.790
foe UI elements on the fly.

00:43:38.800 --> 00:43:42.460
So, if hit testing returns us, you know,
one of these hotspots,

00:43:42.460 --> 00:43:44.560
and then we go searching
for it in the parent array,

00:43:44.560 --> 00:43:46.280
we want that search to succeed.

00:43:46.620 --> 00:43:49.680
And by default, is equal is going to do
a pointer comparison.

00:43:49.680 --> 00:43:52.900
And that's going to fail because these
are going to be different objects.

00:43:52.900 --> 00:43:54.600
So, we override is equal.

00:43:56.100 --> 00:44:01.660
and Mike Engber are working on a new
application called the VoiceOver.

00:44:03.010 --> 00:44:05.300
So when we look at the code,
you're going to see we've

00:44:05.300 --> 00:44:08.210
implemented 10 methods,

00:44:08.330 --> 00:44:10.760
10 methods of the Accessibility Protocol.

00:44:10.870 --> 00:44:13.090
Four of them have to
do with the attributes.

00:44:13.130 --> 00:44:16.180
There's three action methods,
and then there's three other methods.

00:44:16.210 --> 00:44:19.400
There's the isIgnored,
which we've talked about, hit testing,

00:44:19.400 --> 00:44:20.860
and focus testing.

00:44:20.860 --> 00:44:26.270
So I need the demo machine back.

00:44:29.090 --> 00:44:33.970
So this code's located in another folder,
Faux UI Element.

00:44:34.030 --> 00:44:35.970
And I'll start by looking
briefly at the header file.

00:44:37.240 --> 00:44:39.790
And you'll see here's a,
there's two IVARs,

00:44:39.880 --> 00:44:40.680
the role and the parent.

00:44:40.780 --> 00:44:42.860
Like I said,
that's all it keeps track of.

00:44:42.960 --> 00:44:47.330
And there's an init method and a
factory method for cranking them out.

00:44:49.790 --> 00:44:53.280
Here is the definition of
the Faux UI Element Protocol.

00:44:53.460 --> 00:44:56.310
The parent, anyone who hands these
things out as their children,

00:44:56.310 --> 00:44:58.290
is expected to implement two methods.

00:44:58.380 --> 00:45:01.750
One to determine if this child has
the focus and then to give them the

00:45:01.870 --> 00:45:04.030
focus if the child requests the focus.

00:45:04.030 --> 00:45:05.800
That's keyboard focus
we're talking about.

00:45:05.930 --> 00:45:09.300
Then there's two methods having
to do with the position and size.

00:45:09.300 --> 00:45:12.500
Again, given a child, what's my position,
what's my size?

00:45:12.500 --> 00:45:15.870
The parent is expected to
answer those questions.

00:45:17.230 --> 00:45:20.310
Here we'll look at the
code that implements it.

00:45:20.310 --> 00:45:24.820
This is the implementation of the init
method and the factory method in DL.

00:45:24.820 --> 00:45:29.380
As I mentioned before,
we have to override isEqual.

00:45:29.380 --> 00:45:31.930
The first thing we do when we're
comparing is make sure the other

00:45:31.930 --> 00:45:33.280
object is a foe UI element.

00:45:33.280 --> 00:45:39.300
If it is, then we can compare the roles
and we compare the parents.

00:45:39.480 --> 00:45:41.700
And then if the override is equal,
the proper thing to do

00:45:41.700 --> 00:45:45.540
is also override hash.

00:45:47.200 --> 00:45:49.740
All right, so here we start into the
accessibility protocol.

00:45:49.810 --> 00:45:53.500
The first thing we do is return a
list of all the attributes we support.

00:45:53.640 --> 00:45:55.200
Here they all are.

00:45:55.200 --> 00:45:58.860
And then in the next method,
we'll actually return

00:45:58.860 --> 00:46:01.040
values for those attributes.

00:46:01.100 --> 00:46:03.200
So the first one is the role attribute.

00:46:03.240 --> 00:46:05.960
And since we keep track of our role,
all we do is hand back the

00:46:05.960 --> 00:46:08.440
IVAR we have for our role.

00:46:08.440 --> 00:46:11.400
If we're asked for the role description,
there's a helper function that'll give

00:46:11.400 --> 00:46:13.030
us a standard description for that role.

00:46:13.130 --> 00:46:15.550
So nothing tricky there.

00:46:15.760 --> 00:46:17.730
There's an attribute that
answers the question,

00:46:17.970 --> 00:46:19.310
are we the focused UI element?

00:46:19.310 --> 00:46:21.980
Sometimes people try to get tricky here.

00:46:21.980 --> 00:46:25.520
They check, oh, well,
are we in the main window?

00:46:25.520 --> 00:46:30.160
Am I the first responder or do
I belong in the first responder?

00:46:30.160 --> 00:46:31.690
It's easy to get that wrong.

00:46:31.690 --> 00:46:34.000
A much simpler thing to
do is just ask the app,

00:46:34.010 --> 00:46:38.320
using the accessibility protocol,
what it thinks the focused UI element is.

00:46:38.320 --> 00:46:40.280
And if it's you, say yes.

00:46:40.280 --> 00:46:45.440
And that way you can never be out of sync
with that attribute on the application.

00:46:45.600 --> 00:46:46.680
Thank you.

00:46:47.810 --> 00:46:49.230
Next is the parent attribute.

00:46:49.320 --> 00:46:55.760
Again, we keep track of our parents,
so we just have to hand back that IVAR.

00:46:57.490 --> 00:47:00.240
We use a little trick when we
implement the window attribute.

00:47:00.280 --> 00:47:02.190
We know we're in the same
window as our parent,

00:47:02.290 --> 00:47:05.610
so all we do is ask the parent,
"What do you think our window attribute

00:47:05.610 --> 00:47:08.460
is?" and we return the exact same thing.

00:47:08.560 --> 00:47:12.690
We do the same trick when it
comes to the top level UI element.

00:47:13.710 --> 00:47:17.860
And then the last two attributes
are our position attribute.

00:47:17.860 --> 00:47:20.640
And here we ask our
parent for our position,

00:47:20.710 --> 00:47:23.840
and we turn it into an
NS value and return that.

00:47:24.610 --> 00:47:28.250
And then here we ask our parent for...

00:47:28.740 --> 00:47:36.590
We use the Faux UI Element protocol to
find out the size of our application.

00:47:38.120 --> 00:47:41.100
The next methods of the Accessibility
Protocol we implement have to do with,

00:47:41.100 --> 00:47:42.400
is an attribute settable?

00:47:42.400 --> 00:47:45.000
The only thing that could
be settable is the focus.

00:47:45.000 --> 00:47:48.000
And again, we defer to our parent
to answer this question.

00:47:48.000 --> 00:47:51.810
And then if they actually
decide to set the value,

00:47:51.810 --> 00:47:56.550
once again, we defer to our parent
to actually do the work.

00:47:58.680 --> 00:48:00.400
There's three methods
having to do with actions.

00:48:00.400 --> 00:48:03.760
Now, we are not implementing any actions,
so we return the empty array of actions,

00:48:03.760 --> 00:48:07.970
and what we do in the other two
methods really isn't important.

00:48:07.980 --> 00:48:10.750
And you might notice, well,
these are going to be buttons,

00:48:10.760 --> 00:48:11.680
these hotspots.

00:48:11.730 --> 00:48:12.560
How are we going to press them?

00:48:12.560 --> 00:48:14.220
Well, we're going to handle
that in the subclass.

00:48:16.180 --> 00:48:18.960
And then finally,
accessibility is ignored.

00:48:18.960 --> 00:48:21.460
We don't want these things to be ignored,
so we return nil.

00:48:21.460 --> 00:48:24.560
And then there's hit
testing and focus testing.

00:48:24.560 --> 00:48:28.100
One thing I'd like to point out
about hit testing is when your

00:48:28.120 --> 00:48:32.010
accessibility hit test method is called,
your ancestors have already

00:48:32.010 --> 00:48:34.380
determined that the mouse is over you.

00:48:34.420 --> 00:48:37.540
And if you have nothing
further to say on the subject,

00:48:37.540 --> 00:48:38.750
you just return yourself.

00:48:38.900 --> 00:48:40.040
Just agree with that assessment.

00:48:40.040 --> 00:48:42.200
But if you have children,
you might want to return

00:48:42.200 --> 00:48:43.530
something more specific.

00:48:43.990 --> 00:48:47.070
But in our case, we don't,
so we basically just return ourself.

00:48:47.100 --> 00:48:48.660
And the same thing goes for focus.

00:48:48.660 --> 00:48:51.170
Our ancestors already determined
we have keyboard focus,

00:48:51.180 --> 00:48:54.610
and unless we have some children
inside us that might have it,

00:48:54.660 --> 00:48:56.330
we just return ourself.

00:48:56.470 --> 00:48:58.130
The thing you don't want
to do is return nil.

00:48:58.140 --> 00:49:00.510
If you return nil,
you're basically disagreeing

00:49:00.540 --> 00:49:02.840
with your ancestors,
and you're saying, you know,

00:49:02.840 --> 00:49:05.830
the mouse isn't over anything,
or no one has the keyboard focus.

00:49:05.840 --> 00:49:08.960
So that would be an
incorrect thing to do.

00:49:08.960 --> 00:49:13.140
All right.

00:49:13.460 --> 00:49:15.610
Back to the slides.

00:49:19.440 --> 00:49:23.120
So the faux UI elements don't quite
do what we want for the hotspots.

00:49:23.120 --> 00:49:24.900
So we're going to have to subclass.

00:49:24.950 --> 00:49:28.370
So we're going to create a subclass
that inherits from faux UI element.

00:49:28.440 --> 00:49:31.770
We're going to add one IVAR,
which is going to be the

00:49:31.770 --> 00:49:33.440
index of the hotspot.

00:49:33.440 --> 00:49:36.340
And we're going to have to override
isEqual to take that IVAR into account.

00:49:36.340 --> 00:49:38.130
So not only does another hotspot,
you know,

00:49:38.290 --> 00:49:41.340
another hotspot will have the same role,
and it's going to have the same parent,

00:49:41.340 --> 00:49:43.460
but it's not the same as us
unless the index matches.

00:49:43.460 --> 00:49:44.630
So we have to do that.

00:49:46.430 --> 00:49:48.290
And we're going to add a description.

00:49:48.340 --> 00:49:51.180
If the data for these hotspots
came from an HTML file,

00:49:51.180 --> 00:49:55.300
we can use the alt tag
to provide a description.

00:49:55.300 --> 00:49:56.810
And then finally,
we're going to implement

00:49:56.810 --> 00:49:57.580
the press action.

00:49:57.580 --> 00:50:03.320
So back to the demo machine.

00:50:06.360 --> 00:50:12.100
So the code for this is back
in ImageMapAccessibility.m,

00:50:12.100 --> 00:50:13.530
and it's towards the top of it.

00:50:13.540 --> 00:50:17.540
So here, since this is a private class,
we only use it in this file.

00:50:17.540 --> 00:50:19.480
It's declared and implemented in here.

00:50:19.480 --> 00:50:21.780
And here's its declaration.

00:50:21.780 --> 00:50:25.830
You can see we added our one IVAR,
the index, and we have our own init

00:50:25.830 --> 00:50:27.120
and factory methods.

00:50:27.120 --> 00:50:29.220
And in our factory methods,
we already know the role.

00:50:29.220 --> 00:50:30.270
These things are going to be buttons.

00:50:30.280 --> 00:50:34.570
So you just pass in the
index and the parent,

00:50:34.570 --> 00:50:37.490
which will be the image map.

00:50:37.520 --> 00:50:39.400
So here's the implementation.

00:50:39.400 --> 00:50:43.110
Here's the init method
and the factory method.

00:50:43.120 --> 00:50:45.540
Here's our override of isEqual.

00:50:45.540 --> 00:50:48.790
The first thing we do is make sure we're
comparing ourselves to another hotspot.

00:50:50.100 --> 00:50:52.430
And then we do the default thing,
make sure the other

00:50:52.810 --> 00:50:56.590
hotspot is the same role,
make sure it has the same parent,

00:50:56.590 --> 00:51:00.740
and then if it passes that,
we want to make sure the indexes match.

00:51:00.740 --> 00:51:05.060
And once again, we want hash to be
consistent with is equal,

00:51:05.060 --> 00:51:06.740
so we overrode hash.

00:51:06.740 --> 00:51:11.820
Here's an accessor method for the index,
right here.

00:51:14.990 --> 00:51:20.270
Okay, then most of the accessorization
was done in the faux UI elements,

00:51:20.290 --> 00:51:22.090
so we've only had to
override a few methods.

00:51:22.250 --> 00:51:26.660
Attribute names,
if this image map came from HTML data,

00:51:26.700 --> 00:51:29.900
what we're going to do is we have one
extra attribute we're going to support,

00:51:29.900 --> 00:51:31.460
and that's going to be
the description attribute,

00:51:31.580 --> 00:51:33.910
and we keep this cached
in a local static,

00:51:33.910 --> 00:51:37.900
and we initialize that
static by getting the,

00:51:37.900 --> 00:51:40.560
we call super accessibility
attribute names,

00:51:40.650 --> 00:51:44.080
and then we add one object,
the description attribute.

00:51:45.850 --> 00:51:48.690
When it comes to values,
most of the time we just

00:51:48.690 --> 00:51:51.180
defer to our superclass,
but if they're asking

00:51:51.180 --> 00:51:55.410
for the description,
we can ask the Image Map to give us

00:51:55.410 --> 00:51:58.800
the information for this hotspot,
given our index,

00:51:58.800 --> 00:52:00.800
and that information is a dictionary.

00:52:00.800 --> 00:52:03.660
Out of there we can extract
the value of the Alt key,

00:52:03.660 --> 00:52:06.800
and if there is no Alt key,
we can use the Title key.

00:52:06.800 --> 00:52:10.880
That way we can support a description
attribute for the hotspots.

00:52:11.240 --> 00:52:14.250
When it comes to the actions,
instead of returning the empty array,

00:52:14.250 --> 00:52:17.560
now we return an array
containing our press action.

00:52:18.060 --> 00:52:23.000
The action description, given an action,
this helper function will return

00:52:23.000 --> 00:52:24.890
a standard description for it.

00:52:24.950 --> 00:52:28.170
And then when we want to
actually perform the action,

00:52:28.590 --> 00:52:33.940
We just asked the ImageMap to perform the
action for a hotspot at a given R index.

00:52:33.940 --> 00:52:37.180
So again, this method,
perform action for a hotspot at an index,

00:52:37.180 --> 00:52:39.760
is implemented by the ImageMap.

00:52:42.370 --> 00:52:47.420
Okay,
now here I want to return to the spot

00:52:47.540 --> 00:52:50.840
where I sort of waved my hands earlier.

00:52:50.840 --> 00:52:54.880
When we're returning the
children for the image map,

00:52:54.940 --> 00:52:58.240
here's where we use that
factory method on Hotspot

00:52:58.250 --> 00:53:00.530
UI element to create a hotspot.

00:53:00.540 --> 00:53:02.290
Oh, excuse me, right here.

00:53:02.290 --> 00:53:06.920
To create a hotspot given an index
and we specify ourself as the parent.

00:53:06.980 --> 00:53:10.430
So that's where we
take advantage of this.

00:53:10.530 --> 00:53:12.310
And then in hit testing, we also do it.

00:53:12.360 --> 00:53:15.520
Once we've determined the index of
the hotspot we're interested in,

00:53:15.520 --> 00:53:17.300
again, we use the factory method.

00:53:17.300 --> 00:53:21.290
We create an element with the index
and we use ourself as the parent.

00:53:21.300 --> 00:53:27.540
And then here's our support for
the Faux UI element protocol.

00:53:27.540 --> 00:53:30.520
Since we're handing out Faux UI elements,
we have to support these things.

00:53:30.520 --> 00:53:35.340
Now, currently, this control does not
support keyboard focus.

00:53:35.340 --> 00:53:41.110
But if you decide to add keyboard focus,
this is where you have to do the work.

00:53:41.200 --> 00:53:42.400
All right.

00:53:42.400 --> 00:53:44.530
In these two methods, but we don't.

00:53:44.530 --> 00:53:48.040
So basically, we say no, no,
you never have the keyboard focus.

00:53:48.040 --> 00:53:52.440
And we don't have to do
anything for setting it up.

00:53:54.210 --> 00:53:55.980
Here's where we provide the position.

00:53:55.980 --> 00:53:59.490
If someone hands us one
of these children of ours,

00:53:59.540 --> 00:54:03.240
we determine its index,
and then we get its position,

00:54:03.240 --> 00:54:09.260
and then we have to convert those
coordinates to global screen coordinates,

00:54:09.260 --> 00:54:10.420
and we hand them out.

00:54:10.460 --> 00:54:13.010
And the same thing for the size.

00:54:13.010 --> 00:54:15.500
Given a faux UI element,
we determine its size,

00:54:15.500 --> 00:54:17.890
and we convert the bounds
and hand them back.

00:54:22.990 --> 00:54:25.520
So back to the slides.

00:54:30.290 --> 00:54:35.540
Okay, so that's it for accessorizing
our custom class.

00:54:35.540 --> 00:54:39.730
And in the time I have left,
I'm going to go quickly through

00:54:39.730 --> 00:54:43.240
some common problems people have
when they accessorize their apps.

00:54:44.740 --> 00:54:49.110
The first thing I want to mention
is that there's some debugging

00:54:49.110 --> 00:54:54.400
information we spew out to the
console if you set a certain flag.

00:54:54.400 --> 00:54:56.860
And that's the NS Accessibility
Debug Log Level.

00:54:56.860 --> 00:54:58.760
If you launch your application
from the command line,

00:54:58.760 --> 00:55:03.840
you can specify -NS
Accessibility Debug Log Level 1.

00:55:03.870 --> 00:55:06.530
And for certain kinds of
errors that we detect,

00:55:06.530 --> 00:55:10.170
we're going to print an
informative error message for you.

00:55:10.900 --> 00:55:13.730
Could you put me back
on the demo machine?

00:55:13.760 --> 00:55:17.180
I'm going to show you how to do this
in case you want to launch from IB.

00:55:17.180 --> 00:55:21.480
It's useful to know
that you go to your...

00:55:25.220 --> 00:55:30.100
You go to your executables and
you can pick your executable

00:55:30.110 --> 00:55:32.580
and get an inspector on it.

00:55:32.780 --> 00:55:35.730
And you'll notice the second
tab here is Arguments.

00:55:35.730 --> 00:55:38.700
So you can add an argument here.

00:55:38.740 --> 00:55:41.910
You can type in NS Accessibility.

00:55:48.200 --> 00:55:58.370
Level 1.

00:55:58.370 --> 00:55:58.370
So if you're not launching
from the command line,

00:55:58.370 --> 00:55:58.370
if you prefer to run all from within IB,
that's how you can achieve this.

00:55:58.370 --> 00:55:58.370
Back to the slides.

00:55:59.600 --> 00:56:03.490
So, my first tip if you're trying to
debug your apps is turn that flag on.

00:56:03.560 --> 00:56:05.730
That's just going to make
your life a lot easier.

00:56:05.740 --> 00:56:09.800
And then check the console for messages.

00:56:10.150 --> 00:56:12.540
A lot of the errors that you're
going to run into have to

00:56:12.540 --> 00:56:16.520
do with ignored UI elements,
and I kind of hinted at this before.

00:56:16.590 --> 00:56:19.620
Accessibility squeezes
out a lot of extraneous

00:56:19.620 --> 00:56:21.740
information from the hierarchy.

00:56:21.740 --> 00:56:24.380
So in reality, you might have a window
containing a frame view,

00:56:24.460 --> 00:56:26.160
containing a content view,
containing a button,

00:56:26.160 --> 00:56:28.210
containing a button cell.

00:56:28.690 --> 00:56:32.120
From an accessibility point of view,
you've got a window with a button in it.

00:56:32.120 --> 00:56:35.690
And ignored UI elements is sort
of how we achieve that simplicity.

00:56:35.760 --> 00:56:40.110
All the stuff in between,
those are ignored UI elements.

00:56:45.220 --> 00:56:49.610
So one of the problems you
can have is accidentally

00:56:49.620 --> 00:56:51.190
having an ignored UI element.

00:56:51.210 --> 00:56:53.560
So our image map was an example of that.

00:56:53.560 --> 00:56:55.390
NS views are ignored by default.

00:56:55.400 --> 00:57:00.750
So you need to make sure that
your class isn't ignored.

00:57:02.200 --> 00:57:05.740
Another problem you can have in this
area is using an ignored UI element.

00:57:05.830 --> 00:57:08.190
You'll remember we didn't
use those outlets directly.

00:57:08.370 --> 00:57:10.110
First,
we passed them to a helper function,

00:57:10.130 --> 00:57:12.700
NSAccessibilityUnignoredDescended.

00:57:12.700 --> 00:57:14.880
So if we tried to set
the attribute on the,

00:57:14.880 --> 00:57:18.510
say, the NSSegmentedControl,
we would actually have been setting

00:57:18.510 --> 00:57:20.540
it on something that's ignored.

00:57:20.540 --> 00:57:23.310
It would have been a
complete waste of time.

00:57:23.610 --> 00:57:25.210
So that's one mistake you can make.

00:57:25.280 --> 00:57:27.220
And if you actually,
if you try to set an attribute

00:57:27.220 --> 00:57:29.560
on an ignored UI element,
that's one of the cases that

00:57:29.660 --> 00:57:32.180
the accessibility debug log
level is going to catch.

00:57:32.180 --> 00:57:34.100
It's going to warn you that
you're trying to set an

00:57:34.100 --> 00:57:35.690
attribute on an ignored element.

00:57:35.690 --> 00:57:38.760
And that's generally a waste of time.

00:57:39.560 --> 00:57:43.040
Now, sometimes you need to traverse the
hierarchy in the other direction.

00:57:43.040 --> 00:57:46.220
For instance, you might be implementing
your parent attribute.

00:57:46.220 --> 00:57:49.420
And when you report who your parent is,
if your parent's ignored,

00:57:49.420 --> 00:57:52.120
you really want to report
your grandparent and so on.

00:57:52.170 --> 00:57:55.770
So we have a utility function to
help do that search and return

00:57:55.770 --> 00:57:59.090
the first unignored thing,
and that's NS Accessibility

00:57:59.140 --> 00:58:00.700
unignored ancestor.

00:58:00.700 --> 00:58:03.010
And then when you're
returning your children,

00:58:03.010 --> 00:58:06.100
if you've got a child that's ignored,
you want to replace it with

00:58:06.100 --> 00:58:07.540
his children and so on.

00:58:07.560 --> 00:58:11.580
And again, that's another sort of
tedious thing to calculate.

00:58:11.580 --> 00:58:13.260
So we have a helper function for you.

00:58:13.550 --> 00:58:15.080
NS Accessibility unignored children.

00:58:15.080 --> 00:58:16.310
You pass it an array of children.

00:58:16.310 --> 00:58:19.690
We'll take care of squeezing out
any children that are ignored and

00:58:19.690 --> 00:58:21.500
replacing them with their children.

00:58:21.500 --> 00:58:25.480
And then there's a convenience function
for the case if you only got one child.

00:58:25.480 --> 00:58:27.600
You just use that function.

00:58:27.600 --> 00:58:31.080
NS Accessibility unignored
children for only child.

00:58:34.860 --> 00:58:38.050
Another mistake you can make is
forgetting to implement hit testing.

00:58:38.060 --> 00:58:41.410
Depending on how you test your code,
this may be obvious right

00:58:41.440 --> 00:58:42.920
away or it might not be.

00:58:42.920 --> 00:58:47.380
If you use Accessibility Inspector,
which uses hit testing,

00:58:47.380 --> 00:58:50.400
when you move the mouse over UI elements,
you're going to know right

00:58:50.400 --> 00:58:51.950
away that something's wrong.

00:58:51.960 --> 00:58:53.090
Your children aren't showing up.

00:58:54.400 --> 00:58:58.580
VoiceOver often navigates the hierarchy
using the children attributes.

00:58:58.580 --> 00:59:02.360
If you use VoiceOver to test it,
it might not be obvious right away that

00:59:02.360 --> 00:59:04.560
you forgot to implement hit testing.

00:59:04.560 --> 00:59:06.860
That's another easy thing to forget.

00:59:08.840 --> 00:59:11.500
Another thing you can do
is have asymmetry in the

00:59:11.500 --> 00:59:13.420
parent-child relationship.

00:59:13.420 --> 00:59:16.220
If a child reports some other
UI element as its parent,

00:59:16.230 --> 00:59:18.540
when you ask that parent
for its list of children,

00:59:18.540 --> 00:59:20.340
that child better be in the list.

00:59:20.360 --> 00:59:24.500
And if you don't do that,
it's likely that that child is

00:59:24.500 --> 00:59:26.850
going to appear not to work.

00:59:26.860 --> 00:59:29.660
Once again,
if you look in the console and you have

00:59:29.680 --> 00:59:33.380
NS Accessibility debug log level on,
you'll see some error message

00:59:33.490 --> 00:59:37.540
about failure to find such and such
child and such and such a parent.

00:59:41.210 --> 00:59:44.870
If you go ahead and start using this
faux UI element class I've given you,

00:59:46.040 --> 00:59:50.100
remember to override is equal because
if you hand out a bunch of children

00:59:50.100 --> 00:59:53.380
and they all have the same role
and they have you as your parent,

00:59:53.410 --> 00:59:55.080
they're all going to be equal.

00:59:55.080 --> 00:59:58.680
So if hit testing returns some child,
you know, and I go looking for him

00:59:58.680 --> 01:00:01.040
in the children array,
it's going to say, oh,

01:00:01.040 --> 01:00:02.420
he matches the first one.

01:00:02.420 --> 01:00:06.080
Every single child is going to match
the first element in the children array.

01:00:06.080 --> 01:00:07.540
And so that's going to be a problem.

01:00:07.540 --> 01:00:12.120
So if you see this sort of bug that
every child seems to be the first thing,

01:00:12.210 --> 01:00:14.630
this is how it happens.

01:00:16.020 --> 01:00:19.920
And then the final thing I'd
mention is sometimes people forget

01:00:19.920 --> 01:00:21.350
to take into account is flipped.

01:00:21.450 --> 01:00:26.380
Some NS controls or NS views have this
sort of flipped coordinate system.

01:00:26.380 --> 01:00:30.770
And from an accessibility point of view,
when you're reporting your position,

01:00:30.770 --> 01:00:33.740
you want to return the lower
left corner of the view.

01:00:33.740 --> 01:00:37.610
And a flipped view,
00 is the upper left corner.

01:00:37.610 --> 01:00:40.400
And so this is not really a
coordinate conversion issue.

01:00:40.400 --> 01:00:44.860
If you use the upper left corner,
you're just passing the wrong point back.

01:00:44.940 --> 01:00:48.070
So you have to calculate the
bounds of the lower left corner,

01:00:48.070 --> 01:00:50.400
basically just add the
height of the view in,

01:00:50.400 --> 01:00:54.600
and that's the value you should convert
to global coordinates and return.

01:00:58.590 --> 01:01:02.820
So,
we have various documentation resources.

01:01:02.820 --> 01:01:04.890
Here's a URL.

01:01:06.700 --> 01:01:08.720
There are some related
sessions tomorrow morning.

01:01:08.720 --> 01:01:10.180
We have a feedback session.

01:01:10.180 --> 01:01:12.100
We'll have some Q&A today.

01:01:12.100 --> 01:01:16.720
And then Friday we'll be here for
a few hours for a hands-on lab.

01:01:16.720 --> 01:01:18.890
You can bring your projects
in and try them out.

01:01:21.120 --> 01:01:22.560
and here's a contact list.

01:01:22.560 --> 01:01:26.840
So the people that wanna
participate in Q&A,

01:01:26.840 --> 01:01:28.580
wanna come on up?