WEBVTT

00:00:00.920 --> 00:00:03.400
Good afternoon.

00:00:03.480 --> 00:00:04.390
My name is Scott Ryder.

00:00:04.530 --> 00:00:07.330
I am the director of
engineering for .Mac,

00:00:07.330 --> 00:00:10.590
and I'm here today to talk to you
about the new version of the SDK,

00:00:10.730 --> 00:00:12.340
.Mac 2.0.

00:00:12.490 --> 00:00:15.190
One thing I do want to point
out right up at the front,

00:00:15.340 --> 00:00:18.900
all the sessions at WWDC are
confidential except this one.

00:00:19.010 --> 00:00:21.590
You're welcome to talk to others
about what's going on in this session.

00:00:21.600 --> 00:00:23.580
We're announcing, again,
a brand new feature

00:00:23.580 --> 00:00:26.270
set for the SDK today,
and please feel free to talk

00:00:26.320 --> 00:00:27.680
to your friends about it.

00:00:27.790 --> 00:00:31.090
The other thing I'd like to talk about
at the real beginning here is what

00:00:31.090 --> 00:00:35.000
you're about to see is the culmination
of seven man years of engineering.

00:00:35.120 --> 00:00:40.800
This is the first step on a vision or a
path that we set out on five years ago,

00:00:40.860 --> 00:00:43.600
and we're just now reaching
our first milestone.

00:00:43.700 --> 00:00:47.080
So we're extremely excited to be here
today to be talking to you about this.

00:00:47.100 --> 00:00:48.700
It's something we've been working on,
like I said,

00:00:48.700 --> 00:00:51.700
for literally many calendar years.

00:00:51.820 --> 00:00:54.970
So without further ado,
who can benefit from this?

00:00:55.320 --> 00:00:57.700
Who are we trying to build
these new features for?

00:00:57.880 --> 00:00:59.600
Who is the SDK for?

00:00:59.640 --> 00:01:02.430
Well, if you're a game developer,
specifically if you're

00:01:02.430 --> 00:01:05.240
doing a multiplayer game,
or you're doing a game that has

00:01:05.240 --> 00:01:07.790
any kind of community aspect to it,
or of course if you're

00:01:07.790 --> 00:01:10.730
doing a turn-based game,
there are features in the new version of

00:01:10.850 --> 00:01:14.270
the SDK that are directly aimed for you.

00:01:14.410 --> 00:01:16.740
If you're doing a
document-centric application,

00:01:16.790 --> 00:01:19.500
you have a document that you want
to move with multiple people,

00:01:19.740 --> 00:01:22.210
you have a shared document where
you want to do any kind of workflow

00:01:22.250 --> 00:01:23.800
or collaborative kind of work.

00:01:23.910 --> 00:01:25.850
Of course,
if you want to back up data or keep

00:01:25.910 --> 00:01:29.700
archives of different states of your
document or content in your document,

00:01:29.830 --> 00:01:32.960
there are features in
the SDK directly for you.

00:01:33.100 --> 00:01:36.940
And if you're an application that
requires reliable notifications,

00:01:37.190 --> 00:01:40.210
you're doing a distributed solution,
you're doing any kind of distributed

00:01:40.210 --> 00:01:43.740
resource tracking or a reservation
system or anything along those lines,

00:01:43.880 --> 00:01:45.890
there are features in the SDK for you.

00:01:45.990 --> 00:01:49.340
And last, if you care about
inter-application communication,

00:01:49.440 --> 00:01:52.180
if you want to help build a suite
so that your app can publish content

00:01:52.180 --> 00:01:55.240
to another app and that app can do
more work and publish on to another

00:01:55.240 --> 00:01:59.680
app without having to have strong,
formal, engineering-level ties,

00:01:59.760 --> 00:02:03.200
there are features in the kit
that you can benefit from as well.

00:02:03.350 --> 00:02:05.030
So, the agenda.

00:02:05.490 --> 00:02:08.200
I want to give you a very brief
overview of .Mac for developers.

00:02:08.400 --> 00:02:11.500
What does .Mac mean from
a developer's perspective?

00:02:11.660 --> 00:02:14.370
Talk about 1.0, the kit,
which we announced last year.

00:02:14.570 --> 00:02:16.220
Specifically, what is it?

00:02:16.270 --> 00:02:17.770
And what are developers doing with it?

00:02:17.860 --> 00:02:19.720
This has been in the
market now for a year.

00:02:19.770 --> 00:02:21.980
There's some really
exciting things happening.

00:02:22.040 --> 00:02:26.230
Then I want to talk about, obviously,
2.0, the next big iteration of the kit.

00:02:26.440 --> 00:02:29.440
Give you a feature overview,
what's in the kit, what it's about,

00:02:29.490 --> 00:02:32.580
what you can build, kind of some examples
of where you can go,

00:02:32.580 --> 00:02:36.120
the technology areas we wanted to
open up with this version of the kit.

00:02:36.160 --> 00:02:38.470
And, of course,
we've got some really cool

00:02:39.110 --> 00:02:42.020
demos and an API review,
lots of nice code sample.

00:02:42.060 --> 00:02:42.620
At the end, we'll do Q&A.

00:02:42.620 --> 00:02:46.620
But really, the whole agenda for the
day is to kind of talk about

00:02:46.680 --> 00:02:50.180
what we call the DAO of .Mac,
which is this idea of client-side

00:02:50.180 --> 00:02:54.260
applications and server-side applications
working together so that the user

00:02:54.260 --> 00:02:56.020
doesn't have to pay any attention to it.

00:02:56.020 --> 00:02:57.660
It's just a seamless flow.

00:02:57.660 --> 00:02:59.580
And for you, the developer,
you don't have to pay

00:02:59.620 --> 00:03:00.580
any attention to it.

00:03:00.580 --> 00:03:01.820
There's no overhead.

00:03:01.820 --> 00:03:06.250
There's no extra headache for you to work
with a server-side component as well.

00:03:06.290 --> 00:03:09.960
So, the DAO of .Mac integration.

00:03:09.960 --> 00:03:12.060
Why do you want to integrate
with .Mac in the first place?

00:03:12.060 --> 00:03:14.360
What are some of the kind of
key features it gives you?

00:03:14.360 --> 00:03:16.260
Well, it gives you a global namespace.

00:03:16.260 --> 00:03:19.880
The @mac.com namespace gives you
the ability to identify your users

00:03:19.880 --> 00:03:23.610
regardless of what computer they're on,
regardless if they've upgraded

00:03:23.610 --> 00:03:26.900
the OS or did a format install or
they've bought another machine.

00:03:26.900 --> 00:03:30.110
It gives you a way of keeping track
of that person and letting them

00:03:30.210 --> 00:03:32.160
have a consistent set of services.

00:03:32.160 --> 00:03:34.560
And it's obviously
integrated with Mac OS X.

00:03:34.560 --> 00:03:37.290
You don't have to do any
things with names or passwords.

00:03:37.300 --> 00:03:39.560
It's built into that
.Mac preferences panel.

00:03:39.560 --> 00:03:41.860
The kit leverages that
information directly.

00:03:41.860 --> 00:03:44.220
There's no extra work for you,
the developer.

00:03:44.230 --> 00:03:46.760
It gives you seamless server-to-client.

00:03:46.760 --> 00:03:49.880
It lets you work with the servers
from your client without having

00:03:49.880 --> 00:03:52.950
to pay any attention to network
semantics or reachability or,

00:03:52.950 --> 00:03:56.700
you know, run loops or all those
other kind of things.

00:03:56.700 --> 00:03:59.220
Ultimately,
this enables new capabilities.

00:03:59.240 --> 00:04:01.050
Obviously,
durable identification of user.

00:04:01.160 --> 00:04:02.900
You can keep track of people.

00:04:02.900 --> 00:04:05.500
It gives you published web with,
you know, two method calls.

00:04:05.630 --> 00:04:08.460
You can get content from
your local system onto the

00:04:08.460 --> 00:04:10.700
Internet in a highly scalable way.

00:04:10.710 --> 00:04:11.660
It gives you store and forward.

00:04:11.660 --> 00:04:14.660
A place where you can put content
and have that move from user to user,

00:04:14.660 --> 00:04:16.660
application to application.

00:04:17.050 --> 00:04:20.540
Ultimately, it gives you some kind of key
points around collaboration.

00:04:20.560 --> 00:04:24.810
You know, and all this with full security
and full access control.

00:04:25.020 --> 00:04:27.080
You know, ultimately,
if you look at kind of some of

00:04:27.150 --> 00:04:30.260
the applications that Apple ships,
what the .Mac SDK gives you

00:04:30.260 --> 00:04:32.420
is the ability to build those
same kind of integrations,

00:04:32.420 --> 00:04:35.920
those same kind of leverages
into your apps that we deliver

00:04:35.920 --> 00:04:37.900
in our apps and the OS.

00:04:37.900 --> 00:04:42.720
So, at no cost to your application,
.Mac provides some big, some big things.

00:04:42.740 --> 00:04:46.900
Obviously, access to well over half a
million paying customers.

00:04:46.940 --> 00:04:49.660
The last number we put out
was 600,000 public members

00:04:49.730 --> 00:04:51.660
and that was eight months ago.

00:04:51.730 --> 00:04:53.760
So, we've obviously continued to grow.

00:04:53.790 --> 00:04:57.760
We have a lot of .Mac customers
and they're very happy customers.

00:04:57.790 --> 00:04:58.820
It gives you account management.

00:04:58.900 --> 00:05:00.440
You don't have to deal
with password resets.

00:05:00.580 --> 00:05:02.360
You don't have to deal with lost names.

00:05:02.410 --> 00:05:04.460
You don't have to deal
with namespace negotiation.

00:05:04.500 --> 00:05:06.500
The kit does all that for you.

00:05:06.510 --> 00:05:08.160
It is highly scalable.

00:05:08.210 --> 00:05:11.260
For example,
the iDisk service alone downloads

00:05:11.560 --> 00:05:15.860
seven terab-- I'm sorry,
10 terabytes a week and uploads a

00:05:15.860 --> 00:05:19.260
terabyte and a half per week of content.

00:05:19.260 --> 00:05:23.560
We process one half a
billion transactions on the

00:05:23.560 --> 00:05:25.550
back end every single week.

00:05:25.880 --> 00:05:28.060
This is a highly scalable service.

00:05:28.060 --> 00:05:31.020
We offer system support
and monitoring 24/7,

00:05:31.020 --> 00:05:31.760
365.

00:05:31.860 --> 00:05:35.080
We have a very dedicated group
of operations folks and systems

00:05:35.200 --> 00:05:37.860
engineering folks that carry pagers 24/7.

00:05:37.860 --> 00:05:41.060
And if a server goes down,
they bring that server back up.

00:05:41.940 --> 00:05:44.180
We are entirely open standards based.

00:05:44.200 --> 00:05:46.190
This is very, very important.

00:05:46.360 --> 00:05:48.260
This is not custom binary protocols.

00:05:48.260 --> 00:05:50.700
This is not some hackery
we're doing on the wire.

00:05:50.770 --> 00:05:53.650
We use open standards for every
single service that we build

00:05:53.660 --> 00:05:55.100
and we deploy to the internet.

00:05:55.130 --> 00:05:56.880
There is no custom protocol here.

00:05:56.920 --> 00:06:00.520
What the kit does is it wraps these,
and it makes them easy for you to use.

00:06:00.570 --> 00:06:02.550
But that's the big one.

00:06:02.870 --> 00:06:06.810
Not only do you not pay for this stuff,
for every new member you generate,

00:06:06.810 --> 00:06:08.080
we pay you $15.

00:06:08.100 --> 00:06:10.970
That's $15 in your pocket for
as long as your application

00:06:10.970 --> 00:06:12.580
is bringing in new members.

00:06:12.630 --> 00:06:15.510
So if someone is using your app and
they sign up because of your app,

00:06:15.640 --> 00:06:17.800
that's $15 in your pocket.

00:06:18.940 --> 00:06:23.000
So architecturally,
the core of .Mac is iDisk.

00:06:23.370 --> 00:06:24.510
iDisk sits in the center.

00:06:24.690 --> 00:06:26.880
All user data lives there.

00:06:26.950 --> 00:06:29.300
Alongside of iDisk,
we have account management for dealing

00:06:29.300 --> 00:06:32.380
with those passwords and namespace
and those other kinds of issues.

00:06:32.450 --> 00:06:35.650
And we have a suite of integration
services for making sure that this can

00:06:35.670 --> 00:06:38.940
all be connected both above the line,
which is where our own

00:06:38.940 --> 00:06:40.380
application servers sit.

00:06:40.530 --> 00:06:45.250
So if you think of what a user does,
this is what a user would see as .Mac.

00:06:45.430 --> 00:06:47.900
And they would obviously
come in over a web browser.

00:06:47.960 --> 00:06:48.840
This is where we've been.

00:06:48.910 --> 00:06:51.300
This is kind of the
traditional legacy of .Mac.

00:06:51.430 --> 00:06:54.260
But last year at WWDC,
we started a new direction.

00:06:54.260 --> 00:06:56.790
We're doing a lot of
things below the line.

00:06:57.000 --> 00:06:59.710
Through those open standards,
we're letting applications integrate

00:06:59.810 --> 00:07:03.830
directly with the infrastructure and the
backend systems that we have in .Mac,

00:07:03.860 --> 00:07:05.220
including your app.

00:07:05.300 --> 00:07:07.660
The one thing I want to
stress is the same protocols,

00:07:07.810 --> 00:07:12.100
the same interface, the same API,
the same code that we use at Apple is

00:07:12.100 --> 00:07:14.940
the same code we're delivering
and offering to you as developers.

00:07:15.170 --> 00:07:16.160
It's the same kit.

00:07:16.230 --> 00:07:17.320
There's no us/them.

00:07:17.460 --> 00:07:20.430
This is a we kind of opportunity.

00:07:20.700 --> 00:07:21.900
Again, iDisk is the core.

00:07:22.190 --> 00:07:23.720
All user data lives here.

00:07:23.860 --> 00:07:27.840
The .Mac application servers
access this same store as you do.

00:07:27.970 --> 00:07:30.630
It offers complete support
for WebDAV Level 2,

00:07:30.800 --> 00:07:32.900
which is RFC 2518.

00:07:33.040 --> 00:07:35.600
We follow the standard
right up the middle.

00:07:35.740 --> 00:07:38.600
For 2005,
we've added some new capabilities.

00:07:38.690 --> 00:07:40.600
The first thing we've added, of course,
is full UTF-8 support.

00:07:40.600 --> 00:07:44.080
So you can now use iDisk in
simplified Chinese or Korean,

00:07:44.080 --> 00:07:45.410
Japanese, English.

00:07:45.820 --> 00:07:49.190
Basically, if you can type it,
you can use it on the iDisk,

00:07:49.190 --> 00:07:51.760
and it works with both Mac and Windows.

00:07:52.210 --> 00:07:54.370
Complete support for web
dev access control list.

00:07:54.500 --> 00:07:58.000
So we're supporting the
full RFC 3744 specification.

00:07:58.000 --> 00:08:00.860
This is a spec it took
seven years to complete.

00:08:00.860 --> 00:08:03.300
So you can imagine it's extremely robust.

00:08:03.450 --> 00:08:05.700
It offers a very flexible ACL model.

00:08:05.700 --> 00:08:09.480
It offers user-definable groups,
and it offers multiple

00:08:09.480 --> 00:08:11.720
credential support,
and we're going to talk in a lot

00:08:11.760 --> 00:08:12.890
more detail about all of these.

00:08:12.900 --> 00:08:15.590
But the key thing is,
and I'll touch on this a couple

00:08:15.600 --> 00:08:19.460
times because it's very important,
all credentials in .mac are

00:08:19.500 --> 00:08:23.090
first-class citizens as far as
an access control list goes.

00:08:23.120 --> 00:08:26.720
There's no one credential that has
a greater capability than any other.

00:08:26.720 --> 00:08:28.200
You can use them interchangeably.

00:08:28.200 --> 00:08:29.260
You can mix and match them.

00:08:29.260 --> 00:08:30.220
It's very important.

00:08:31.540 --> 00:08:32.470
A little bit on standards.

00:08:32.550 --> 00:08:35.020
Again,
they are central to our philosophy.

00:08:35.080 --> 00:08:37.090
Now, the good thing about standards
is there are a lot of them.

00:08:37.200 --> 00:08:39.620
The bad thing about standards,
there's a lot of them.

00:08:39.760 --> 00:08:42.740
So when we look at something,
when we want to deliver a new feature,

00:08:42.800 --> 00:08:45.090
we kind of use those
four measuring sticks,

00:08:45.090 --> 00:08:45.700
if you will.

00:08:46.010 --> 00:08:48.540
The standard has to be stable,
it has to be secure,

00:08:48.740 --> 00:08:51.800
it has to be broadly accepted,
and it has to be compelling.

00:08:51.870 --> 00:08:55.730
There has to be something that we can
truly do that's differentiating for our

00:08:55.730 --> 00:08:58.140
customers and yours using that standard.

00:08:58.210 --> 00:08:59.950
Obviously,
today we support a lot of them.

00:09:00.080 --> 00:09:05.910
We support HTTP, HTTPS, WebDAV,
IMAP and POP for email, XMLRPC, DNS.

00:09:06.370 --> 00:09:08.170
There's a lot of them.

00:09:08.360 --> 00:09:11.480
Like I said, standards are at the
core of everything we do.

00:09:11.580 --> 00:09:14.760
So .Mac Kit 1.0.

00:09:16.120 --> 00:09:19.220
If .Mac is open standards-based,
why do you need a kit at all?

00:09:19.240 --> 00:09:22.040
Well,
using these standards still requires

00:09:22.130 --> 00:09:23.480
complex network programming.

00:09:23.510 --> 00:09:25.900
There's still a lot of
extra steps you have to do.

00:09:25.950 --> 00:09:28.140
Why do all the work if you don't have to?

00:09:28.200 --> 00:09:32.270
So the .Mac kit basically is
built on the same high-performance

00:09:32.370 --> 00:09:36.480
Mac OS X infrastructure that
Safari and all Tiger is-- CF Network,

00:09:36.790 --> 00:09:38.720
Run Loops, all of that.

00:09:38.800 --> 00:09:43.200
But we offer a simple session-style
Cocoa Objective-C interface.

00:09:43.240 --> 00:09:44.780
So it's a very easy API to use.

00:09:44.780 --> 00:09:46.520
And once you've learned
the way that it works,

00:09:46.710 --> 00:09:49.790
it works the same for everything
we're delivering today and everything

00:09:49.790 --> 00:09:51.680
we plan to deliver in the future.

00:09:51.750 --> 00:09:54.070
It fully supports both
synchronous and asynchronous.

00:09:54.240 --> 00:09:56.000
This is incredibly important.

00:09:56.060 --> 00:09:59.130
You can use the kit to dispatch
five asynchronous operations,

00:09:59.340 --> 00:10:01.490
flip it over to synchronous,
do two synchronous things.

00:10:01.760 --> 00:10:06.280
The asynchs will continue to run,
then flip back to async and do more work.

00:10:06.330 --> 00:10:07.110
It's up to you.

00:10:07.430 --> 00:10:10.740
Whatever your application needs,
whatever call style or interaction

00:10:10.880 --> 00:10:12.970
style you want to have with the kit,
it will support it.

00:10:13.020 --> 00:10:16.450
You can flip back and forth
between sync and async.

00:10:16.800 --> 00:10:18.030
It's an embedded framework.

00:10:18.090 --> 00:10:19.740
This is another very important thing.

00:10:19.800 --> 00:10:21.440
This is not something
that's built into the OS.

00:10:21.610 --> 00:10:24.840
It's about a little 500 kilobyte
package you deliver with your app.

00:10:24.960 --> 00:10:28.120
What that means is,
as the OS continues to move forward,

00:10:28.190 --> 00:10:29.760
the kit's going to be forward compatible.

00:10:29.840 --> 00:10:32.140
You don't have to worry about
something in the OS breaking

00:10:32.140 --> 00:10:33.660
or the API changing in the kit.

00:10:33.660 --> 00:10:35.880
When you have a version of
the kit and your app passes

00:10:35.880 --> 00:10:39.020
your own quality standards,
you can deploy and be assured that the

00:10:39.040 --> 00:10:40.740
kit's not going to change underneath you.

00:10:40.790 --> 00:10:41.930
It will always follow with you.

00:10:41.940 --> 00:10:43.240
It will always go where you go.

00:10:43.290 --> 00:10:46.520
If your user can install the app,
the kit will go with it.

00:10:47.410 --> 00:10:50.760
So last year at WWDC,
we announced 1.0 the kit.

00:10:50.870 --> 00:10:53.240
It had three core classes.

00:10:53.540 --> 00:10:54.700
DM member account.

00:10:54.760 --> 00:10:56.260
DM member account's
pretty straightforward.

00:10:56.390 --> 00:10:58.240
He deals with member accounts.

00:10:58.300 --> 00:10:59.620
DM IDisc session.

00:10:59.690 --> 00:11:01.190
He deals with accessing the IDisc.

00:11:01.370 --> 00:11:03.540
Get data up, get data down.

00:11:03.590 --> 00:11:05.020
DM transaction.

00:11:05.090 --> 00:11:06.920
He actually does all the work.

00:11:06.970 --> 00:11:11.280
DM transaction encapsulates every
interaction your app has with .Mac.

00:11:11.590 --> 00:11:14.420
So when you use DM member account,
or use DM IDisc session,

00:11:14.420 --> 00:11:16.600
or you use the new things
I'm going to talk about,

00:11:16.640 --> 00:11:18.560
they give you back transactions.

00:11:18.580 --> 00:11:20.660
That transaction is the
guy that's doing the work.

00:11:20.710 --> 00:11:22.160
He's the heart of the kit.

00:11:22.180 --> 00:11:24.140
Once you get used to
the transaction style,

00:11:24.210 --> 00:11:28.360
you do something, you get a transaction,
you know how everything in the kit works.

00:11:28.380 --> 00:11:30.420
And again, fully async and sync.

00:11:30.500 --> 00:11:32.340
So a synchronous transaction,
when you get it back,

00:11:32.460 --> 00:11:33.520
it's basically done.

00:11:33.550 --> 00:11:35.690
An asynchronous transaction
will be in operation,

00:11:35.700 --> 00:11:37.480
and will come back when it's done.

00:11:37.500 --> 00:11:39.580
And this is all thread safe.

00:11:39.630 --> 00:11:42.360
So you can call this on any
number of threads that you like.

00:11:42.400 --> 00:11:45.100
The transaction will delegate
and message you back on the same

00:11:45.160 --> 00:11:47.210
thread that you called it from.

00:11:47.330 --> 00:11:49.920
So we do all that state management
and thread management for you.

00:11:50.030 --> 00:11:53.790
Again, we really want to make this
simple and easy to use.

00:11:54.320 --> 00:11:57.210
The big core three things you're
going to do with a transaction,

00:11:57.360 --> 00:11:58.580
you're going to determine progress.

00:11:58.820 --> 00:11:59.380
How's it doing?

00:11:59.430 --> 00:12:01.790
So if you have an asynchronous
transaction in flight,

00:12:01.960 --> 00:12:04.320
you can ask it,
how many bytes do you have to move,

00:12:04.510 --> 00:12:06.760
and how many bytes have you moved so far?

00:12:06.860 --> 00:12:07.900
Those will give you the answers back.

00:12:07.980 --> 00:12:08.800
And you can poll those.

00:12:08.910 --> 00:12:12.420
You can do it in a loop,
do it on a timer, do it any way you like.

00:12:12.660 --> 00:12:15.480
Remember, it is thread safe,
and do it as often as you need

00:12:15.490 --> 00:12:17.280
to update your user's progress.

00:12:17.400 --> 00:12:18.240
Checking state.

00:12:18.240 --> 00:12:21.260
You can ask a transaction,
is it an error, is it completed,

00:12:21.320 --> 00:12:23.400
has it started, all of those things.

00:12:23.490 --> 00:12:26.240
Or if you don't want to keep
checking through a polling mechanism,

00:12:26.330 --> 00:12:29.100
you can also just register a delegate,
and the transaction will message your

00:12:29.100 --> 00:12:32.790
delegate when a big state change happens.

00:12:33.140 --> 00:12:35.500
It's canceled,
it's completed successfully,

00:12:35.500 --> 00:12:36.120
it had an error.

00:12:36.480 --> 00:12:38.480
It'll just call you back.

00:12:38.910 --> 00:12:40.660
And of course,
once a transaction is done,

00:12:40.760 --> 00:12:41.720
you get the result.

00:12:41.750 --> 00:12:44.920
If you were downloading a file,
for example, you would call result,

00:12:44.920 --> 00:12:48.650
and the transaction would give you back
his result and tell you how he did.

00:12:48.890 --> 00:12:51.020
So who's using the kit today?

00:12:51.080 --> 00:12:53.080
Well, obviously,
we're using it in our own

00:12:53.080 --> 00:12:54.950
.Mac application servers.

00:12:55.060 --> 00:12:57.880
So a good number of those half a
billion transactions today that

00:12:57.880 --> 00:13:01.140
we're processing from our own servers
are actually being done with the

00:13:01.160 --> 00:13:03.060
same kit we're delivering to you.

00:13:03.310 --> 00:13:05.540
It's used, obviously,
extensively by Apple.

00:13:05.590 --> 00:13:08.600
Many services inside of
Mac OS X Tiger use the

00:13:08.600 --> 00:13:10.360
kit to do what they do.

00:13:10.420 --> 00:13:14.820
iLife applications do,
like iMovie and iPhoto use the kit.

00:13:14.880 --> 00:13:16.860
Obviously,
applications that come from .Mac,

00:13:16.900 --> 00:13:18.980
they come with your membership,
like the backup app.

00:13:19.000 --> 00:13:20.460
They use the kit.

00:13:20.550 --> 00:13:23.850
We've had over 10,000 downloads
of the kit in the past year.

00:13:23.990 --> 00:13:26.900
So we've been extremely excited by the
number of people that have downloaded

00:13:26.960 --> 00:13:28.920
the kit and started delivering solutions.

00:13:28.960 --> 00:13:32.180
Some of the things they're doing with it,
because of those 10 million downloads,

00:13:32.180 --> 00:13:36.180
we're seeing 10 million transactions
come from the outside via the kit.

00:13:36.210 --> 00:13:38.740
They're doing web publishing,
a lot of good blogging apps and

00:13:38.830 --> 00:13:42.360
family tree apps and whatnot that are
publishing information up using the kit.

00:13:42.490 --> 00:13:44.000
It's really simple to do.

00:13:44.040 --> 00:13:45.860
They're backing up core data files.

00:13:45.930 --> 00:13:46.950
So they do something important.

00:13:47.000 --> 00:13:49.520
They want to give the user a very
simple and automated way to back it up

00:13:49.520 --> 00:13:51.290
without the user having to get involved.

00:13:51.340 --> 00:13:53.260
The kit does that for them.

00:13:53.290 --> 00:13:55.300
Those are some of the bigger
ones that are doing it.

00:13:55.430 --> 00:13:56.780
There's obviously a lot more.

00:13:56.850 --> 00:14:00.110
But one of the core things we're
starting to see today is collaboration.

00:14:00.240 --> 00:14:03.250
A lot of developers, a lot of you guys,
are starting to use the kit to

00:14:03.250 --> 00:14:04.750
do lightweight collaboration.

00:14:04.890 --> 00:14:07.540
One of my favorite examples is the Sims.

00:14:07.800 --> 00:14:10.270
So the Sims 2 comes with
this ability to have DNA and

00:14:10.270 --> 00:14:13.420
Sims that evolve over a lifetime,
and you can build them up.

00:14:13.570 --> 00:14:16.940
The kit lets you actually share them with
other people using your public folder.

00:14:16.940 --> 00:14:18.860
So you can put a Sim into
your public folder,

00:14:18.860 --> 00:14:20.970
and then other users can get it
down from your public folder.

00:14:20.980 --> 00:14:23.600
This whole community and
collaboration thing is starting.

00:14:23.600 --> 00:14:26.150
And we took a look at this,
and we kind of asked ourselves, OK,

00:14:26.190 --> 00:14:26.940
that's great.

00:14:26.950 --> 00:14:28.900
So where do we go from here?

00:14:28.900 --> 00:14:31.380
What do we do next with the kit?

00:14:31.820 --> 00:14:33.580
And that's what 2.0 is.

00:14:33.660 --> 00:14:37.860
So the kit 2.0 is designed to be the
easiest way you can add community

00:14:37.940 --> 00:14:39.940
and collaboration to your app.

00:14:40.010 --> 00:14:42.050
Those are the core goals.

00:14:42.160 --> 00:14:46.940
So goal-- we want to make
internet-wide collaboration simple.

00:14:47.020 --> 00:14:51.150
We want to let your users on a system
collaborate with another user on another

00:14:51.240 --> 00:14:53.520
system in five method calls or less.

00:14:53.590 --> 00:14:55.950
That's the goal-- five or less.

00:14:56.390 --> 00:14:57.930
We offer flexible access control.

00:14:58.150 --> 00:14:59.540
Obviously, you've got to have security.

00:14:59.540 --> 00:15:01.940
You've got to have a way
of controlling access.

00:15:02.020 --> 00:15:05.450
We offer a very rich publish and
subscribe style messaging system.

00:15:05.450 --> 00:15:07.540
I'll talk a lot more about each of those.

00:15:07.620 --> 00:15:11.980
We offer full support for
both members and non-members.

00:15:11.980 --> 00:15:14.680
Again, members and non-members.

00:15:14.910 --> 00:15:18.840
That means the host of a
collaboration must be a member.

00:15:19.020 --> 00:15:20.600
They have to be a paying customer.

00:15:20.660 --> 00:15:23.930
They have to be somebody who's
using .Mac to get stuff out there.

00:15:24.090 --> 00:15:27.550
However,
anyone else with a credential can then

00:15:27.700 --> 00:15:30.700
participate in that collaboration fully.

00:15:30.790 --> 00:15:34.240
They do not have to be a paid member.

00:15:34.310 --> 00:15:37.500
They don't even have
to have an @Mac.com ID.

00:15:37.610 --> 00:15:41.000
So the idea is to host a collaboration,
you have to be a paid member.

00:15:41.260 --> 00:15:43.670
But from that point forward,
anybody with a credential

00:15:43.670 --> 00:15:46.040
the system understands,
and we'll talk about that,

00:15:46.140 --> 00:15:47.320
can be a full participant.

00:15:47.570 --> 00:15:49.200
They don't have to pay.

00:15:49.260 --> 00:15:52.140
One way of looking at this is
in the 1.0 days of the kit,

00:15:52.190 --> 00:15:53.200
you have the iDisk.

00:15:53.260 --> 00:15:55.340
And the iDisk had a-- you know,
very central concept.

00:15:55.560 --> 00:15:58.650
There was an iDisk and there
was a user of that iDisk.

00:15:58.790 --> 00:16:00.920
2.0 of the kits lets
you kind of acknowledge,

00:16:00.960 --> 00:16:02.500
hey, there's other people out there.

00:16:02.590 --> 00:16:04.220
There are other Mac.com members.

00:16:04.370 --> 00:16:06.150
There are people who
aren't Mac.com members.

00:16:06.280 --> 00:16:07.800
There's groups of people.

00:16:07.850 --> 00:16:10.800
And really what 2.0 of the kit
lets you do is fade the technology

00:16:10.800 --> 00:16:14.400
into the background and make it
so you have this universal pipe.

00:16:14.510 --> 00:16:17.610
So data just flows from one person
to another person to another person,

00:16:17.900 --> 00:16:20.000
application to application seamlessly.

00:16:20.080 --> 00:16:22.300
This is the goal of the kit.

00:16:22.350 --> 00:16:23.640
So what's in it?

00:16:23.850 --> 00:16:26.300
So we went from three
classes to a couple more.

00:16:26.300 --> 00:16:28.100
We added some new features.

00:16:28.120 --> 00:16:29.890
There are some new credentials features.

00:16:29.910 --> 00:16:32.460
We've added this concept
of DM secondary user.

00:16:32.650 --> 00:16:33.700
It's a new class.

00:16:33.720 --> 00:16:36.760
These are people who
don't have @Mac.com IDs,

00:16:36.820 --> 00:16:39.500
but they do have credentials
the system understands.

00:16:39.570 --> 00:16:42.100
We've added this concept of DM group.

00:16:42.120 --> 00:16:43.420
And we've added DM credential.

00:16:43.540 --> 00:16:45.600
It's a new formal protocol.

00:16:45.980 --> 00:16:49.470
We've added a new abstract
base class for all sessions,

00:16:49.470 --> 00:16:52.360
in this case, just called DM session.

00:16:52.690 --> 00:16:55.670
We've added a new security feature,
a new formal protocol called

00:16:55.730 --> 00:16:59.640
DM security for letting you control
access to these other sessions.

00:16:59.720 --> 00:17:01.960
And of course,
we've added two new services,

00:17:02.030 --> 00:17:04.730
DM message subscriber
and DM message publisher.

00:17:05.010 --> 00:17:08.920
So you see we've gone from three
classes to a lot richer kit.

00:17:08.990 --> 00:17:13.140
But it still works exactly the same way.

00:17:13.290 --> 00:17:14.860
There's no difference.

00:17:14.950 --> 00:17:17.760
DM transaction does all the work.

00:17:17.880 --> 00:17:22.800
So state, including that progress,
the results, they're all encapsulated

00:17:22.800 --> 00:17:23.630
in the transaction.

00:17:23.820 --> 00:17:26.120
It is fully synchronous or asynchronous.

00:17:26.180 --> 00:17:28.140
You use the same methods,
whether you call it

00:17:28.250 --> 00:17:32.720
synchronously or asynchronously,
result always gives you the result.

00:17:33.400 --> 00:17:35.790
The default, of course,
is async because async is the

00:17:35.790 --> 00:17:37.200
model that makes the most sense.

00:17:37.330 --> 00:17:39.040
We handle all the
threading issues for you.

00:17:39.040 --> 00:17:40.480
We pull up our own worker threads.

00:17:40.560 --> 00:17:42.050
We shut them down when they're done.

00:17:42.170 --> 00:17:44.000
You don't have to pay
any attention to it.

00:17:44.070 --> 00:17:46.060
So if you're writing a
single-threaded Cocoa app,

00:17:46.120 --> 00:17:46.900
that's just fine.

00:17:46.900 --> 00:17:48.620
You can still use the kit asynchronously.

00:17:48.880 --> 00:17:49.730
You register a delegate.

00:17:49.830 --> 00:17:52.940
There's no threading issues for
you to have to deal with at all.

00:17:53.070 --> 00:17:56.300
So all those classes create transactions.

00:17:56.370 --> 00:18:00.400
Those transactions talk to .Mac
using those open standards,

00:18:00.460 --> 00:18:02.500
and they ultimately give you a result.

00:18:02.570 --> 00:18:05.400
And they can message a delegate
so you don't have to poll them.

00:18:05.500 --> 00:18:08.610
So they will simply tell you, hey,
this interesting thing just happened.

00:18:08.680 --> 00:18:10.800
You probably want to go process it.

00:18:12.990 --> 00:18:15.780
So how many people here
have ever had the concept,

00:18:15.780 --> 00:18:18.620
you know, I've got this great idea,
but I need a file server.

00:18:18.760 --> 00:18:22.180
I need a server that my app
can always guarantee is there,

00:18:22.220 --> 00:18:26.040
that the user controls all the access to,
they can let their buddies into,

00:18:26.040 --> 00:18:28.870
they can let other people into,
but it's scalable and

00:18:28.870 --> 00:18:30.500
it's running all the time.

00:18:30.530 --> 00:18:34.500
Well, that's what 2.0,
the new access features give you.

00:18:34.540 --> 00:18:36.780
So a little bit on credentials,
because obviously credentials

00:18:36.850 --> 00:18:39.100
are critical to how you
control access to this stuff.

00:18:39.120 --> 00:18:40.920
Mac OS X has this great
thing built into it.

00:18:41.060 --> 00:18:42.340
It's called the address book.

00:18:42.360 --> 00:18:45.660
And the address book gives you the
ability to represent people in cards.

00:18:45.700 --> 00:18:49.060
So if we take the idea of the
address book out of the center here,

00:18:49.100 --> 00:18:51.300
and we'll just put it,
because Mac OS X also has your

00:18:51.300 --> 00:18:53.660
.Mac account built right into it,
right?

00:18:53.720 --> 00:18:56.640
Every logged in user has the .Mac
account in the .Mac preference

00:18:56.700 --> 00:18:58.060
panel if they're a member.

00:18:58.090 --> 00:19:00.460
They have to be a member
to create these things,

00:19:00.460 --> 00:19:01.400
not to use them.

00:19:01.460 --> 00:19:04.820
So we'll just replace the concept
of my .Mac account is in the center.

00:19:04.930 --> 00:19:07.000
I'm scott@mac.com.

00:19:07.020 --> 00:19:09.100
Now,
let's focus on Lynn there for a minute.

00:19:09.350 --> 00:19:11.140
Lynn is one of my favorite people.

00:19:11.460 --> 00:19:13.100
She has a .Mac ID.

00:19:13.100 --> 00:19:14.970
And if you actually go look
in your address book card,

00:19:15.100 --> 00:19:18.930
you will see a .Mac ID for either their
email address or their iChat address.

00:19:19.100 --> 00:19:21.450
So you know,
just using the address book API,

00:19:21.450 --> 00:19:24.080
they've got a .Mac account,
and you know what that account is,

00:19:24.090 --> 00:19:26.760
and you can represent them
with the member account.

00:19:27.000 --> 00:19:28.360
That's what it's there for.

00:19:28.460 --> 00:19:30.220
So if you look through
my address book here,

00:19:30.290 --> 00:19:32.600
there's a bunch of other
people that have .Mac IDs,

00:19:32.770 --> 00:19:35.320
and they can all be represented
by DM member accounts.

00:19:35.610 --> 00:19:36.660
This is good.

00:19:36.890 --> 00:19:38.660
Now, let's focus on Mary.

00:19:38.890 --> 00:19:42.660
Mary, still one of my favorite people,
but she doesn't have a .Mac ID yet.

00:19:42.660 --> 00:19:46.160
Well, with the new version of the kit,
I have the ability of creating an

00:19:46.160 --> 00:19:48.510
ID for her that is valid across .Mac.

00:19:49.050 --> 00:19:54.220
Unlike Mary or whatever at mac.com,
this is Mary@Scott.

00:19:54.790 --> 00:19:56.160
It's my namespace.

00:19:56.160 --> 00:19:57.160
It is owned to me.

00:19:57.160 --> 00:19:59.150
In fact, it's linked, hard linked to me.

00:19:59.160 --> 00:20:02.030
If you look at the kit,
you use the .MacKit API to

00:20:02.120 --> 00:20:04.100
create the secondary credential.

00:20:04.320 --> 00:20:06.550
You use it to create the name,
to create the password,

00:20:06.650 --> 00:20:08.220
and it's linked to my account.

00:20:08.220 --> 00:20:09.220
It's hard bound.

00:20:09.220 --> 00:20:10.220
It's in my namespace.

00:20:10.480 --> 00:20:13.160
That means I can have a Mary@Scott,
and you can have a Mary@Tom,

00:20:13.320 --> 00:20:16.220
and there's no conflict,
because the uniqueness is at our names,

00:20:16.220 --> 00:20:18.220
Mary@Scott versus Mary@Tom.

00:20:18.220 --> 00:20:20.650
So if we look at the
other people in the kit,

00:20:20.810 --> 00:20:23.220
I can make up credentials
for all of them,

00:20:23.300 --> 00:20:28.220
and then I can encapsulate all of
them in DM's secondary user accounts.

00:20:28.920 --> 00:20:32.100
So the key thing is with 2.0, the kit,
you now have the ability for

00:20:32.100 --> 00:20:35.610
every person in the address book,
you can represent a credential for them,

00:20:35.610 --> 00:20:39.240
whether they have one all their own
or whether you make one up for them.

00:20:39.300 --> 00:20:42.550
We strongly encourage you,
the address book is extensible.

00:20:42.690 --> 00:20:44.540
Put that secondary credential,
if you make it up,

00:20:44.590 --> 00:20:45.590
in with the address book card.

00:20:45.750 --> 00:20:48.570
That way it gets backed up and it
moves around as that card moves around.

00:20:48.730 --> 00:20:49.970
Put the password in the key chain.

00:20:50.190 --> 00:20:51.240
That's what they're there for.

00:20:51.310 --> 00:20:52.510
It's a great place to hold those things.

00:20:52.630 --> 00:20:54.680
So when you make up
secondary credentials,

00:20:54.830 --> 00:20:57.320
put them in the address book
cards and put the corresponding

00:20:57.320 --> 00:20:58.530
passwords in the key chain.

00:21:00.360 --> 00:21:01.800
So now a little bit on groups.

00:21:01.820 --> 00:21:03.540
The address book also
lets you group things.

00:21:03.590 --> 00:21:07.380
So you can have neighbors and hiking
buddies and friends and family.

00:21:07.420 --> 00:21:09.640
So I just kind of
organized my address book.

00:21:09.660 --> 00:21:12.340
And just like you can group
them in the address book,

00:21:12.350 --> 00:21:13.860
you can also group them with a kit.

00:21:13.870 --> 00:21:15.520
That's what a DM group is.

00:21:15.520 --> 00:21:19.560
A DM group is a collection owned
by a member-- so this would be

00:21:19.560 --> 00:21:20.830
group at Scott in this case.

00:21:20.920 --> 00:21:22.550
So you can imagine
hiking buddies at Scott,

00:21:22.730 --> 00:21:27.400
friends at Scott, family at Scott-- that
contains credentials.

00:21:27.430 --> 00:21:29.020
And I'll say it again.

00:21:29.020 --> 00:21:32.320
All credentials are first class citizens.

00:21:32.330 --> 00:21:35.770
That means I can make a group of
credentials that you control and own

00:21:35.770 --> 00:21:37.940
and somebody else controls and own.

00:21:37.940 --> 00:21:40.290
All credentials are equal.

00:21:40.300 --> 00:22:53.400
[Transcript missing]

00:22:53.690 --> 00:22:57.580
A group can encompass any
number of credentials,

00:22:57.580 --> 00:23:00.600
any number of @Mac.com users,
any number of secondary

00:23:00.600 --> 00:23:03.710
users within limit.

00:23:03.710 --> 00:23:03.710
There's a limit.

00:23:04.150 --> 00:23:04.910
Groups are global.

00:23:05.130 --> 00:23:07.700
Just like credentials are global,
a group is global.

00:23:07.750 --> 00:23:10.000
And you can encompass any credential.

00:23:10.050 --> 00:23:12.380
Credentials you own,
credentials somebody else owns.

00:23:12.440 --> 00:23:14.400
And you can nest groups
up to three levels deep.

00:23:14.620 --> 00:23:17.730
So you can have a group
of a group of a group.

00:23:18.900 --> 00:23:20.070
So why does all this matter?

00:23:20.220 --> 00:23:23.920
Remember I was talking about
bundling a file server with your app.

00:23:24.000 --> 00:23:24.830
Let's look at an iDisk.

00:23:24.970 --> 00:23:26.460
Let's start with iDisk.

00:23:26.530 --> 00:23:29.400
It's always on, 24/7, 365.

00:23:29.460 --> 00:23:30.340
It's highly scalable.

00:23:30.440 --> 00:23:32.760
Remember,
half a billion transactions per week.

00:23:32.820 --> 00:23:35.400
This thing processes most of them.

00:23:35.470 --> 00:23:36.630
It is open standards based.

00:23:36.810 --> 00:23:39.260
This is not some custom file server,
custom protocol.

00:23:39.260 --> 00:23:40.990
This is web dev, RFC standard.

00:23:41.100 --> 00:23:41.800
It works on Linux.

00:23:41.890 --> 00:23:42.700
It works on Windows.

00:23:42.800 --> 00:23:44.650
It works on Mac.

00:23:45.190 --> 00:23:46.510
It has zero setup or admin.

00:23:46.720 --> 00:23:47.940
There's no software to install.

00:23:47.940 --> 00:23:49.370
There's no configuration to set up.

00:23:49.480 --> 00:23:51.000
There's no DNSs to route.

00:23:51.060 --> 00:23:53.350
It's just up and it's running.

00:23:53.560 --> 00:23:55.470
Now let's go way beyond
the public folder.

00:23:55.650 --> 00:23:58.220
The public folder gave you a very,
very lightweight way

00:23:58.220 --> 00:23:59.190
of doing collaboration.

00:23:59.290 --> 00:24:03.030
But now we've talked a lot about having
this rich access control list support.

00:24:03.150 --> 00:24:06.810
We have these global
per person credentials.

00:24:06.900 --> 00:24:08.160
All this is no cost.

00:24:08.160 --> 00:24:11.240
In fact, not only is it no cost,
we pay you $15 for every

00:24:11.240 --> 00:24:12.720
member that signs up.

00:24:12.760 --> 00:24:14.470
Sense the theme?

00:24:15.260 --> 00:24:18.480
Ultimately, this means you can ship
a server with your app.

00:24:18.560 --> 00:24:22.500
Another thing that's new for 2005 is you
can put content on the root of an iDisk.

00:24:22.520 --> 00:24:23.680
It used to be locked.

00:24:23.680 --> 00:24:28.680
One happy person.

00:24:28.680 --> 00:24:31.620
So you can now put anything you
want on the root of an iDisk.

00:24:31.620 --> 00:24:34.740
So you can make a folder
for your app on the root.

00:24:34.800 --> 00:24:36.400
Now,
so if we change the view a little bit,

00:24:36.400 --> 00:24:38.360
let's look at this a
little bit differently.

00:24:39.260 --> 00:24:43.780
What if we just view that folder
as a server in and of itself?

00:24:43.870 --> 00:24:46.580
Well, inside of that folder
I could put a camping trip,

00:24:46.660 --> 00:24:50.740
a documents, a drop box,
and a backup folder.

00:24:51.470 --> 00:24:55.760
If I grant access to a credential,
it becomes very much like a file server.

00:24:55.860 --> 00:24:58.350
So if I grant, say,
read and write access to the

00:24:58.350 --> 00:25:04.240
documents folder for Darth Omen and
Jane User-- and notice Darth Omen is

00:25:04.290 --> 00:25:07.070
not somebody-- it's a secondary user,
but it's not one I've created.

00:25:07.140 --> 00:25:09.400
It's one George has created.

00:25:09.470 --> 00:25:15.970
Then those people can get into documents,
and they can do read and write.

00:25:15.970 --> 00:25:15.970
So expand it out a little bit more.

00:25:16.300 --> 00:25:32.300
[Transcript missing]

00:25:32.460 --> 00:25:35.240
What's really nice,
this is even directly mountable.

00:25:35.300 --> 00:25:38.240
You can make this not only logically
look like a separate server,

00:25:38.240 --> 00:25:41.360
but actually physically look like
a separate server to the user.

00:25:41.420 --> 00:25:44.140
If you were to type "connect
to" and enter in that URL,

00:25:44.200 --> 00:25:47.640
or just put it in there programmatically
using the mount URL service,

00:25:47.690 --> 00:25:50.870
then it will mount on the desktop
exactly like a file server.

00:25:50.930 --> 00:25:53.600
It'll get the little iDisk globe to it,
but it'll have a root level.

00:25:53.600 --> 00:25:55.860
You can't go up and see
the rest of the iDisk.

00:25:55.910 --> 00:25:59.260
And the permissions that you set will
all be enforced by the things within it.

00:25:59.350 --> 00:26:01.540
So this is not just logically
shipping a separate server.

00:26:01.540 --> 00:26:03.640
This really is kind of
shipping a separate server.

00:26:03.690 --> 00:26:06.210
You can take an iDisk now and carve
it into little itty bitty pieces

00:26:06.630 --> 00:26:10.150
that make sense for your app,
and represent those to your

00:26:10.150 --> 00:26:13.190
user as a section of their
iDisk or as a separate server.

00:26:13.350 --> 00:26:15.340
It's at your discretion.

00:26:15.770 --> 00:26:17.040
How it all works?

00:26:17.060 --> 00:26:23.200
Well, iDisk's expression, of course,
is web dev access control list 3477 spec.

00:26:23.200 --> 00:26:27.410
You can grant any credential in the
system one of the following or any

00:26:27.410 --> 00:26:29.040
grouping of the following permissions.

00:26:29.090 --> 00:26:29.840
Read.

00:26:29.890 --> 00:26:31.100
Read the contents.

00:26:31.150 --> 00:26:34.300
If you put read on a object,
then it can read the

00:26:34.310 --> 00:26:35.250
contents of that object.

00:26:35.370 --> 00:26:38.370
You put read on a directory,
you can read the contents

00:26:38.500 --> 00:26:39.660
of the directory.

00:26:39.680 --> 00:26:40.360
Write.

00:26:40.630 --> 00:26:43.220
Write actually means three things.

00:26:43.250 --> 00:26:46.580
Write means create, modify, and delete.

00:26:46.640 --> 00:26:50.000
So I can make new content,
I can change content that exists,

00:26:50.040 --> 00:26:52.250
I can delete existing content.

00:26:52.330 --> 00:26:55.040
A subset of write,
or kind of a corollary is,

00:26:55.040 --> 00:26:56.900
you can grant just modify.

00:26:56.950 --> 00:26:59.910
That means you can't make new things,
and you can't delete things,

00:27:00.040 --> 00:27:02.180
but you can change things
that already exist.

00:27:02.240 --> 00:27:04.150
So if you're doing a collaborative
kind of project where,

00:27:04.150 --> 00:27:05.950
say, a teacher starts something
and the students are

00:27:05.950 --> 00:27:08.760
supposed to contribute to it,
but you don't want them destroying it,

00:27:08.780 --> 00:27:12.460
This is one example where you might
want to use modify instead of write.

00:27:12.920 --> 00:27:14.040
and Read Children.

00:27:14.090 --> 00:27:16.680
Read Children is a special
permission for directories.

00:27:16.760 --> 00:27:19.410
If you put Read Children on
a directory instead of read,

00:27:19.480 --> 00:27:21.660
that means if they know
the URL to the contents,

00:27:21.680 --> 00:27:24.100
they know there's a picture in there
and they know the name of the thing,

00:27:24.260 --> 00:27:24.830
they can read it.

00:27:24.830 --> 00:27:26.900
But they can't actually
get a directory listing.

00:27:26.960 --> 00:27:30.340
It blocks people from getting directory
listings if you don't have read,

00:27:30.380 --> 00:27:31.990
you just have read children.

00:27:32.970 --> 00:27:37.360
All these access control entities,
or ACEs, are fully inherited.

00:27:37.420 --> 00:27:40.960
So you can set the ACE on the top,
and all folders and all objects below

00:27:40.960 --> 00:27:42.820
it inherit that same permission.

00:27:42.870 --> 00:27:45.320
You can then explicitly, if you want,
override it.

00:27:45.450 --> 00:27:49.000
So if I say, read at the top and then
write only in this one object,

00:27:49.050 --> 00:27:52.990
that's one way of kind of building
very fine-grained permissions.

00:27:53.920 --> 00:27:58.710
So the three steps to setting
up access control lists.

00:27:58.820 --> 00:28:00.570
Step one, get a credential.

00:28:00.680 --> 00:28:03.780
Get an identity for somebody whom
you want to add permission for.

00:28:03.830 --> 00:28:06.050
In this case, it's going to be son@scott.

00:28:06.190 --> 00:28:09.320
So I'm going to get a reference
to the son@scott account.

00:28:09.370 --> 00:28:12.100
The next thing you do is
set access to some entity.

00:28:12.210 --> 00:28:14.330
In this case,
I'm going to give read access-- that's

00:28:14.330 --> 00:28:18.210
why I put it in yellow-- to the pages
document that's contained in the

00:28:18.210 --> 00:28:20.680
documents folder of my iDisk for me.

00:28:20.760 --> 00:28:23.120
Third step-- there is no third step.

00:28:23.250 --> 00:28:23.800
That's it.

00:28:23.880 --> 00:28:24.540
Two method calls.

00:28:24.710 --> 00:28:25.680
That's all it takes.

00:28:25.770 --> 00:28:28.120
So let's do a quick demo.

00:28:28.160 --> 00:28:30.270
I want to bring up George Ma.

00:28:39.380 --> 00:28:41.260
Good afternoon.

00:28:41.260 --> 00:28:42.260
My name is George Ma.

00:28:42.260 --> 00:28:44.100
I'm a .Mac engineer.

00:28:44.100 --> 00:28:46.200
And today,
I'm going to give you a quick demo

00:28:46.200 --> 00:28:49.730
of what Scott has been talking about,
how we're going to go way

00:28:49.810 --> 00:28:51.840
beyond a public folder.

00:28:56.440 --> 00:29:00.340
This is iDisk Browser,
which was shipped last year

00:29:00.540 --> 00:29:03.230
as a sample app in our SDK.

00:29:03.430 --> 00:29:06.840
And this year we've updated
it with access control

00:29:06.840 --> 00:29:09.360
capabilities in .Mac Kit 2.

00:29:09.360 --> 00:29:15.660
For the demo,
I've set up two folders on my iDisk,

00:29:15.660 --> 00:29:16.870
Apple and Pixar.

00:29:18.400 --> 00:29:24.400
Two corresponding groups,
each with the correct permissions set up.

00:29:24.400 --> 00:29:28.660
Now, remember what Scott said about
shipping a file server with your app?

00:29:28.660 --> 00:29:31.480
Well, let's see how this works.

00:29:32.910 --> 00:29:40.410
So the URL here, iDisk.mac.com, my iDisk.

00:29:43.200 --> 00:29:50.810
Typing a credential that
is part of the Apple group.

00:29:51.070 --> 00:29:54.110
And there it is.

00:29:54.350 --> 00:29:59.440
My Apple folder mounted on
the desktop as a volume.

00:29:59.440 --> 00:30:01.550
I can upload to--

00:30:02.880 --> 00:30:04.180
The file server.

00:30:04.190 --> 00:30:06.340
And of course,
this being a web dev server,

00:30:06.340 --> 00:30:12.000
it means I can access it with
anything that understands HTTP,

00:30:12.050 --> 00:30:12.810
such as a browser.

00:30:12.880 --> 00:30:20.010
So again, I type in the URL.

00:30:37.300 --> 00:31:01.000
[Transcript missing]

00:31:03.320 --> 00:31:05.150
Thanks, George.

00:31:05.240 --> 00:31:07.360
So a little bit more key
information about DM security,

00:31:07.360 --> 00:31:09.340
because that's how all this is done.

00:31:09.410 --> 00:31:11.070
It doesn't change the way classes work.

00:31:11.270 --> 00:31:13.810
It just adds a consistent
set of methods for managing

00:31:13.940 --> 00:31:15.780
access control to each of them.

00:31:16.040 --> 00:31:18.220
What can be modified
depends on the class.

00:31:18.260 --> 00:31:20.720
iDisk lets you modify different
things in other classes,

00:31:20.720 --> 00:31:22.520
which we're about to talk about.

00:31:22.750 --> 00:31:25.580
Permissions can be granted
to any DM member account,

00:31:25.600 --> 00:31:28.220
any DM secondary user, any DM group.

00:31:28.830 --> 00:31:29.830
Remember the naming convention.

00:31:29.950 --> 00:31:35.200
A member account is somebody@mac.com
versus somebody@user,

00:31:35.200 --> 00:31:38.800
like somebody@Scott, son@Scott,
daughter@Scott.

00:31:38.840 --> 00:31:44.580
And a group would be hiking
buddies@Scott or friends@GeorgeMaw.

00:31:45.820 --> 00:31:47.700
And it's more than just objects on iDisk.

00:31:47.750 --> 00:31:49.500
This applies to select services too.

00:31:49.930 --> 00:31:53.700
So let's talk about the real heart
of the 2.0 version of the kit,

00:31:53.700 --> 00:31:55.700
the publish and subscribe.

00:31:55.750 --> 00:31:58.700
The idea is we want to power a new
generation of collaborative features.

00:31:58.700 --> 00:32:02.700
We want to let you do something you
haven't been able to do in a long time.

00:32:02.700 --> 00:32:04.680
To do that, I want to go way, way back.

00:32:04.690 --> 00:32:07.840
So I've been in computing
for a little while,

00:32:07.910 --> 00:32:11.700
and I remember the good old
days when I had two machines.

00:32:11.700 --> 00:32:12.800
They were on the same table.

00:32:12.950 --> 00:32:13.690
They were always on.

00:32:13.690 --> 00:32:15.700
If I wanted to move data
from one to the other,

00:32:15.700 --> 00:32:19.340
I did a write socket on one side
and a read socket on the other side,

00:32:19.340 --> 00:32:20.690
and the world was a wonderful place.

00:32:21.000 --> 00:32:21.520
That was it.

00:32:21.700 --> 00:32:24.300
Then came this idea of, well,
let's hook a couple

00:32:24.310 --> 00:32:25.700
more of them together.

00:32:25.760 --> 00:32:27.690
So the network got a
little bit more complex,

00:32:27.690 --> 00:32:29.700
and the code got a
little bit more complex.

00:32:29.700 --> 00:32:31.220
And then someone said, wait a minute.

00:32:31.220 --> 00:32:33.140
Why don't we just create this big thing,
a server,

00:32:33.140 --> 00:32:34.440
and we'll put all the data on there?

00:32:34.850 --> 00:32:36.660
And the network got a
little bit more complex,

00:32:36.700 --> 00:32:38.700
and the code got a
little bit more complex.

00:32:38.700 --> 00:32:41.690
Well,
that server thing kind of caught on.

00:32:41.890 --> 00:32:44.700
And then Apple and Novell
and Banyan and Microsoft,

00:32:44.700 --> 00:32:46.700
you remember there's a lot of
server vendors once upon a time.

00:32:46.700 --> 00:32:50.550
And the code got more complex,
and the network got more complex,

00:32:50.550 --> 00:32:52.700
and there were more people on it.

00:32:54.000 --> 00:32:57.610
Then came this idea of, wait a minute,
we have offices in the south

00:32:57.730 --> 00:32:59.780
quarter of the city and the
north quarter of the city.

00:32:59.830 --> 00:33:02.410
It'd be really nice if all those
file servers and users could

00:33:02.410 --> 00:33:03.520
connect and talk to each other.

00:33:03.590 --> 00:33:05.780
So the WAN was invented.

00:33:05.830 --> 00:33:09.980
And the code got more complex,
and the network got more complex.

00:33:10.050 --> 00:33:14.830
And then came this thing
called the internet and email,

00:33:14.830 --> 00:33:16.500
and everybody wanted to get connected.

00:33:16.550 --> 00:33:20.650
And the code got more complex,
and the network got more complex.

00:33:20.920 --> 00:33:24.420
Then the bubble happened,
and WAN became a bad term,

00:33:24.420 --> 00:33:28.300
and ISP became a hotter term,
but basically the same thing.

00:33:28.420 --> 00:33:32.220
But the code got more complex,
the network got more complex,

00:33:32.340 --> 00:33:36.300
and then today we start moving
towards universal connectivity,

00:33:36.360 --> 00:33:40.060
and now we have laptops that come and go,
and DHCP, and wireless routes,

00:33:40.160 --> 00:33:43.800
and satellite routes, and hard lands,
and soft lands, and dial-ups,

00:33:43.800 --> 00:33:46.040
and broadband, and cable, and DSL,
and ATM,

00:33:46.040 --> 00:33:50.800
and brought in... code got more complex,
network got more complex.

00:33:50.800 --> 00:33:54.880
So that today, if you want to send
something point to point,

00:33:55.150 --> 00:33:55.610
good luck.

00:33:55.610 --> 00:33:58.300
It's like communicating
with a needle in a haystack.

00:33:58.300 --> 00:33:59.950
You don't know where the user is,
you don't know what kind

00:33:59.970 --> 00:34:02.300
of connection you have,
you certainly know an IP address,

00:34:02.300 --> 00:34:05.270
you know, heaven forbid that they have.

00:34:05.970 --> 00:34:09.720
DotMac 2.0 provides the ability
to return to the simple times.

00:34:09.760 --> 00:34:11.460
Let's make this easy.

00:34:11.510 --> 00:34:13.450
It's an API that enables communication.

00:34:13.750 --> 00:34:15.780
Fundamentally, that's what it does.

00:34:15.840 --> 00:34:18.220
It lets you send a message or an object.

00:34:18.430 --> 00:34:19.140
You can send one.

00:34:19.140 --> 00:34:19.780
You can send both.

00:34:19.900 --> 00:34:21.700
It's up to you.

00:34:21.990 --> 00:34:25.900
If Bonjour is zero
configuration networking,

00:34:25.970 --> 00:34:28.740
.MacKit 2.0 is zero
networking networking.

00:34:29.010 --> 00:34:31.960
You don't pay attention to
any aspects of the network.

00:34:32.130 --> 00:34:33.480
You don't worry about IP addresses.

00:34:33.480 --> 00:34:36.870
You don't worry about
daemons or server processes.

00:34:37.210 --> 00:34:40.960
Now, for the three people in
the room that get the joke,

00:34:41.010 --> 00:34:43.150
the idea is this is not new stuff.

00:34:43.340 --> 00:34:46.860
Like I said, we try to leverage open
standards everywhere that we can.

00:34:47.100 --> 00:34:48.890
In this case,
we're leveraging something called

00:34:48.890 --> 00:34:52.860
message queuing technology or publish
and subscribe message queuing technology.

00:34:52.990 --> 00:34:55.710
But we're ratcheting it up a notch.

00:34:55.810 --> 00:34:56.960
Scale with zero admin.

00:34:57.210 --> 00:34:59.560
Most message queues are
kind of 10,000 user systems.

00:34:59.670 --> 00:35:01.200
We have a couple more than that.

00:35:01.270 --> 00:35:03.600
So this is a message queue
that runs at our scale.

00:35:03.820 --> 00:35:08.370
600,000 is the last public number,
and we're growing well beyond that.

00:35:08.590 --> 00:35:09.940
It provides in-order delivery.

00:35:10.090 --> 00:35:12.370
If you send messages 1, 2, 3,
they will arrive.

00:35:12.500 --> 00:35:13.930
1, 2, 3.

00:35:14.050 --> 00:35:15.530
It offers you named endpoints.

00:35:15.670 --> 00:35:17.520
You don't send a message
to an IP address,

00:35:17.640 --> 00:35:19.240
you send a message to a person.

00:35:19.350 --> 00:35:22.200
The system guarantees that
it gets to that person.

00:35:22.280 --> 00:35:25.400
It offers store and forward,
so that the client machine

00:35:25.490 --> 00:35:26.700
doesn't need to be on.

00:35:26.760 --> 00:35:29.460
If it's not on, we'll hold the message
until the machine is on,

00:35:29.460 --> 00:35:31.560
and then we will deliver it.

00:35:31.640 --> 00:35:34.300
It offers a push model,
even through a NAT.

00:35:34.450 --> 00:35:37.390
So the idea is the message
delivery latency time is somewhere

00:35:37.520 --> 00:35:40.300
under sub-second to get that
message from point to point,

00:35:40.430 --> 00:35:42.900
plus the time it takes to
actually transfer the bits.

00:35:42.990 --> 00:35:46.890
So the connection setup, if you will,
is sub-second.

00:35:47.800 --> 00:35:49.600
It even offers launch and receive.

00:35:49.660 --> 00:35:52.060
That means your app doesn't
even have to be running.

00:35:52.110 --> 00:35:55.580
Messages can arrive in the background,
and when your app is run,

00:35:55.850 --> 00:35:57.080
the user will pick them up.

00:35:57.140 --> 00:35:59.920
Or if you wish,
you can register with the system so that

00:35:59.920 --> 00:36:03.880
if a message arrives to your application,
your application will be launched,

00:36:03.950 --> 00:36:05.640
and then the message will be delivered.

00:36:05.760 --> 00:36:08.000
Or a tool for your
application can be launched.

00:36:08.210 --> 00:36:09.820
It's up to you.

00:36:09.930 --> 00:36:13.620
So no background demons,
no extra processes, no cron jobs.

00:36:13.690 --> 00:36:15.530
All that's gone.

00:36:16.360 --> 00:36:17.200
and a whole lot more.

00:36:17.200 --> 00:36:17.890
It's secure.

00:36:17.900 --> 00:36:19.140
It's robust.

00:36:19.210 --> 00:36:21.340
But the basic idea is really simple.

00:36:21.400 --> 00:36:23.100
I have two systems.

00:36:23.140 --> 00:36:25.310
On the first system,
I want to send this thing,

00:36:25.420 --> 00:36:28.010
in this case a picture,
to this other person.

00:36:28.010 --> 00:36:31.180
The other person said, "Yeah,
I want to subscribe to that picture's

00:36:31.200 --> 00:36:34.940
thing." And the picture flows
from one machine to the other.

00:36:34.980 --> 00:36:36.600
That's not just slide sample code.

00:36:36.660 --> 00:36:37.680
That's valid pseudocode.

00:36:37.870 --> 00:36:38.700
That's really what it is.

00:36:38.820 --> 00:36:40.480
Remember I said five or less.

00:36:40.510 --> 00:36:43.490
It technically is down to about three.

00:36:44.290 --> 00:36:46.380
So a little bit on publish and subscribe,
because it makes sense

00:36:46.440 --> 00:36:48.240
to have some background.

00:36:48.290 --> 00:36:51.610
At the top are applications,
or sometimes called channels.

00:36:51.720 --> 00:36:53.220
It's the root of the hierarchy.

00:36:53.290 --> 00:36:57.580
The key thing is one application can
see another application's messages.

00:36:57.660 --> 00:36:59.640
They're not hardwalled from one another.

00:36:59.680 --> 00:37:03.760
This is core for cross-application
communication or collaboration.

00:37:03.840 --> 00:37:07.460
If you have a pictures app and somebody
else has a pictures publishing app,

00:37:07.520 --> 00:37:09.630
they can work together without
the two developers having

00:37:09.630 --> 00:37:10.680
to jump through any hoops.

00:37:10.680 --> 00:37:12.990
You can see each other's messages.

00:37:13.500 --> 00:37:15.150
topics, organize message.

00:37:15.260 --> 00:37:18.240
They're an organizational unit,
much like a folder.

00:37:18.450 --> 00:37:21.540
And inside of those topics
go the messages themselves.

00:37:21.660 --> 00:37:23.800
And a message can have three things.

00:37:23.850 --> 00:37:25.480
It can have a message.

00:37:25.520 --> 00:37:29.400
It can have a payload, a typed payload,
very important.

00:37:29.440 --> 00:37:33.600
And it can have meta,
any kind of meta information about

00:37:33.970 --> 00:37:36.710
that payload or about that message.

00:37:36.710 --> 00:37:38.290
It can have one of them.

00:37:38.290 --> 00:37:38.290
It can have all of them.

00:37:38.290 --> 00:37:38.290
It just can't have none of them.

00:37:39.660 --> 00:37:40.390
What can you build?

00:37:40.560 --> 00:37:41.800
Some very simple things?

00:37:41.850 --> 00:37:43.080
Well, you can do any casting.

00:37:43.100 --> 00:37:45.480
You know,
podcasting is very hot right now.

00:37:45.540 --> 00:37:49.400
But you can actually use this kind of
as an infrastructure to do an any cast.

00:37:49.460 --> 00:37:50.570
Imagine I have a system.

00:37:50.570 --> 00:37:52.820
And on this system, I've got a container.

00:37:52.860 --> 00:37:58.560
And inside that container is stuff:
media, text, pictures, whatever else.

00:37:58.590 --> 00:38:00.320
I have a bunch of other people
that I want to work with,

00:38:00.400 --> 00:38:00.930
another system.

00:38:01.000 --> 00:38:02.950
In fact,
a bunch of people that have all said,

00:38:02.950 --> 00:38:06.440
yeah, we want to subscribe to
this particular channel.

00:38:06.440 --> 00:38:09.840
In that case, they say,
subscribe to the Ryder Family News.

00:38:09.910 --> 00:38:13.560
At that point, when I publish something,
they receive it.

00:38:13.560 --> 00:38:16.790
Another key point about
our messaging technology,

00:38:16.820 --> 00:38:19.950
it's bidirectional,
meaning if I publish something

00:38:20.320 --> 00:38:22.990
using that same channel,
they can publish back to me.

00:38:22.990 --> 00:38:26.760
So it's a two-way street
if you want to enable it.

00:38:27.450 --> 00:38:28.460
What else could you do?

00:38:28.480 --> 00:38:30.460
Imagine workflow and collaboration.

00:38:30.490 --> 00:38:32.780
I have this object,
this thing that I'm working on.

00:38:32.990 --> 00:38:36.110
Now I want to send it to somebody else
who is or maybe is not using my app,

00:38:36.110 --> 00:38:39.940
but they're using an app that
understands my data type,

00:38:39.940 --> 00:38:42.690
a JPEG, an RTF, a sound.

00:38:43.090 --> 00:38:45.500
Well, in that case,
you simply would publish that message,

00:38:45.550 --> 00:38:47.720
that object as a message
to another person.

00:38:47.790 --> 00:38:50.140
They can then do whatever it
is that they want to do to it,

00:38:50.180 --> 00:38:53.620
including, remember, it's bidirectional,
so it could come back to your app.

00:38:53.700 --> 00:38:56.970
That person could then turn around
again and publish that out to another

00:38:56.970 --> 00:39:00.120
person who does even more things,
and that's bidirectional.

00:39:00.240 --> 00:39:03.060
So you can imagine,
you can start building these either

00:39:03.060 --> 00:39:06.680
workflow chains or approval chains
or distribution chains where data

00:39:06.760 --> 00:39:09.580
starts moving from app to app very,
very simply.

00:39:09.730 --> 00:39:11.420
So what else could you do?

00:39:11.710 --> 00:39:13.840
Well, how about notifications?

00:39:13.900 --> 00:39:15.680
Imagine I have this one system up here.

00:39:15.910 --> 00:39:18.000
He has, in this case,
I'll represent it as a book.

00:39:18.080 --> 00:39:20.160
He has this thing that he says, "Hey,
I've got this.

00:39:20.210 --> 00:39:23.720
It's available." So he publishes a
message out to all his buddies saying,

00:39:23.810 --> 00:39:25.950
"I've got this new thing."
And his buddies say,

00:39:25.950 --> 00:39:28.250
"Oh, yeah,
I want that." So he sends a message back,

00:39:28.290 --> 00:39:30.290
"Yeah,
I want it." So does this other guy.

00:39:30.290 --> 00:39:30.950
He sends it back.

00:39:31.240 --> 00:39:34.450
But because of the in-order delivery,
you know which order the messages arrived

00:39:34.450 --> 00:39:37.030
or which order they were published in,
so you can say, "Okay,

00:39:37.030 --> 00:39:39.340
the first publisher wins,
and he gets the rest."

00:39:39.370 --> 00:39:41.830
You do event parsing.

00:39:41.840 --> 00:39:42.680
You have an event that happens here.

00:39:42.680 --> 00:39:45.140
You want to track its flow.

00:39:45.730 --> 00:39:47.200
So how do you do this?

00:39:47.270 --> 00:39:50.680
Well, DMMessagePublisher is the
root for publishing messages,

00:39:50.680 --> 00:39:51.480
obviously.

00:39:51.580 --> 00:39:54.870
He generates and manages message topics,
and he actually publishes

00:39:54.870 --> 00:39:56.180
the message themselves.

00:39:56.270 --> 00:39:58.700
He conforms to DMSecurity, too.

00:39:58.770 --> 00:40:00.630
We'll talk about that.

00:40:00.980 --> 00:40:03.600
Message publishers generate topics.

00:40:03.680 --> 00:40:05.300
Giving an access to a topic.

00:40:05.440 --> 00:40:09.610
So if I let George Ma or Ryan Parks into
a topic that I've created,

00:40:09.820 --> 00:40:11.340
an invitation is sent.

00:40:11.400 --> 00:40:13.900
And the invitation is the
core of the security model.

00:40:13.980 --> 00:40:17.260
You don't receive messages from me
until you've accepted my invitation.

00:40:17.340 --> 00:40:20.340
And an invitation, by definition,
can contain no payload.

00:40:20.660 --> 00:40:21.660
It's one bit.

00:40:21.710 --> 00:40:23.860
It says,
"This person's offering something to you.

00:40:24.000 --> 00:40:26.170
Do you want to take it or not?"

00:40:26.790 --> 00:40:29.630
At this point,
the DM topic contains the messages,

00:40:29.630 --> 00:40:32.040
and obviously he manages the messages.

00:40:32.070 --> 00:40:36.140
Messages themselves can contain data,
and they generate transactions.

00:40:36.240 --> 00:40:38.910
So the flow can look a
little bit complicated.

00:40:39.220 --> 00:40:42.020
Let me show you the code,
because it's actually a lot simpler.

00:40:42.060 --> 00:40:44.280
In this case,
a member must host the topic.

00:40:44.500 --> 00:40:45.640
So in this case,
I'm going to get the member

00:40:45.640 --> 00:40:47.870
account out of the system
preferences on the local machine.

00:40:48.060 --> 00:40:50.750
That one call pulls the password,
pulls the account name

00:40:51.050 --> 00:40:53.220
from the .Mac pref panel.

00:40:53.270 --> 00:40:55.670
I get a DM publisher session,
because the DM publisher

00:40:55.690 --> 00:40:56.500
session is the key.

00:40:56.500 --> 00:40:59.460
He does all the, you know,
sets everything up.

00:40:59.480 --> 00:41:01.180
I create a topic and add a message.

00:41:01.330 --> 00:41:03.210
In this case,
it's the obligatory greetings

00:41:03.210 --> 00:41:05.800
topic with a message of "Hello,
world!"

00:41:06.480 --> 00:41:07.580
I then set access.

00:41:07.870 --> 00:41:11.160
I give another .Mac member
permissions to get into this.

00:41:11.190 --> 00:41:15.290
In this case, I'm going to grant access
to Ryan and George.

00:41:15.800 --> 00:41:42.700
[Transcript missing]

00:41:43.390 --> 00:41:44.080
How do you get them?

00:41:44.190 --> 00:41:45.480
What's the other end of the equation?

00:41:45.530 --> 00:41:47.220
Well, get a DM message subscriber.

00:41:47.430 --> 00:41:49.960
He manages your subscriptions to topics.

00:41:50.020 --> 00:41:53.020
There's a new kind of delegate
called a subscription delegate.

00:41:53.030 --> 00:41:55.990
He handles the obvious things,
like when new messages arrive,

00:41:55.990 --> 00:42:00.580
he has sent a message saying -- his
method is called that says there's

00:42:00.580 --> 00:42:03.970
new messages available for you,
new topics.

00:42:04.820 --> 00:42:06.360
Of course, he gets DM topics.

00:42:06.600 --> 00:42:09.220
They contain and manage
the messages in question,

00:42:09.250 --> 00:42:11.820
and the messages contain
the transactions.

00:42:11.860 --> 00:42:14.170
Very important point.

00:42:14.420 --> 00:42:18.640
By default, when the kit tells you you
have a new message available,

00:42:18.690 --> 00:42:22.300
it has already been downloaded
off the net and cached locally.

00:42:22.380 --> 00:42:25.990
That means you don't have to pay any
attention even to network latency.

00:42:26.100 --> 00:42:27.680
When the kit says there's
a new message available,

00:42:27.850 --> 00:42:28.940
it's available on the hard drive.

00:42:29.000 --> 00:42:30.540
If you say,
"Give it to me," it'll come back,

00:42:30.640 --> 00:42:34.130
whether it's a one-byte or
a five-megabyte message,

00:42:34.210 --> 00:42:37.000
it'll come back instantly
because it's already cached.

00:42:37.120 --> 00:42:41.300
We strongly encourage you to use this
behavior because it just makes your UI.

00:42:41.300 --> 00:42:43.350
You don't have to worry about
blocking or network delays or

00:42:43.470 --> 00:42:44.800
reachability or anything else.

00:42:44.800 --> 00:42:46.800
It's just there and it just works.

00:42:46.870 --> 00:42:49.300
There are a couple application
cases that we can think of

00:42:49.300 --> 00:42:51.800
where you wouldn't want this,
so you can turn it off.

00:42:52.010 --> 00:42:53.300
But it's on by default.

00:42:53.300 --> 00:42:56.800
It will always download the whole thing
and then tell you about it afterwards.

00:42:56.800 --> 00:42:59.210
Meaning if your app is launched
because new messages have arrived,

00:42:59.400 --> 00:43:00.300
they've really arrived.

00:43:00.300 --> 00:43:01.300
They're already on the system.

00:43:01.300 --> 00:43:04.410
You're ready to go and start
processing them and doing work.

00:43:05.170 --> 00:43:06.420
The code?

00:43:06.560 --> 00:43:08.270
First thing you do, again,
get a reference to the

00:43:08.270 --> 00:43:09.400
local Mac user's account.

00:43:09.480 --> 00:43:12.580
That's the thing in the
system preferences panel.

00:43:12.980 --> 00:43:15.380
Create a subscriber
session in a delegate.

00:43:15.380 --> 00:43:19.710
Assume the delegate option sets up and
he has to conform to one key message,

00:43:19.860 --> 00:43:21.580
one key protocol, if you will.

00:43:21.620 --> 00:43:24.300
But that's what it takes
to set up a subscriber.

00:43:24.360 --> 00:43:26.160
How do you receive new messages?

00:43:26.190 --> 00:43:27.780
There's one method you have to implement.

00:43:27.810 --> 00:43:29.380
Topics have changed.

00:43:29.410 --> 00:43:33.520
You will get an array of topics that
have new messages available in them.

00:43:33.560 --> 00:43:37.180
The full code for this would be,
I'm going to write a simple iterator.

00:43:37.180 --> 00:43:42.460
So I'll get one for the current topic and
one as an NS enumerator for the array.

00:43:43.370 --> 00:43:47.290
walk through the array,
pull out the newest message.

00:43:47.300 --> 00:43:48.220
You should look deeper.

00:43:48.360 --> 00:43:50.780
This is sample code for a slide,
but newest message will

00:43:50.780 --> 00:43:53.280
give you the last one,
but there could be more.

00:43:54.380 --> 00:43:56.640
From that message,
pull out the message string,

00:43:56.710 --> 00:43:59.820
pull out the payload, pull out the type.

00:43:59.860 --> 00:44:02.400
Key thing, type.

00:44:02.430 --> 00:44:05.100
When you put a payload in,
if you want to let your

00:44:05.100 --> 00:44:08.260
application work with others,
use standard types.

00:44:08.300 --> 00:44:11.590
And Spotlight has done this great
thing of pushing in the internet both,

00:44:11.640 --> 00:44:13.040
pushing down standard types.

00:44:13.270 --> 00:44:16.010
Pictures are typically JPEG,
but you could use TIFF or

00:44:16.020 --> 00:44:17.720
anything the system understands.

00:44:17.800 --> 00:44:24.380
For types, just use the file extensions,
you know, .html, .xml, .plist, .jpeg,

00:44:24.410 --> 00:44:25.600
whatever makes sense.

00:44:25.680 --> 00:44:27.060
Pass that type along.

00:44:27.110 --> 00:44:28.820
If it's something you
want to keep private,

00:44:28.820 --> 00:44:31.420
keep it in a private type, you know,
.myapp.

00:44:31.490 --> 00:44:33.330
It's up to you.

00:44:34.210 --> 00:44:36.400
Then hand it off to a controller
to go do something with.

00:44:36.460 --> 00:44:38.810
Process the message string
with the particular payload

00:44:39.050 --> 00:44:40.840
of that particular type.

00:44:41.020 --> 00:44:41.660
Type is key.

00:44:41.840 --> 00:44:44.390
Type is how you do
inter-application communication.

00:44:44.400 --> 00:44:47.640
You let users build suites of
applications without you having

00:44:47.640 --> 00:44:49.100
to work with the other developers.

00:44:49.200 --> 00:44:51.920
As long as they publish a JPEG that's
of the right format and you

00:44:51.920 --> 00:44:55.060
understand a JPEG of the right format,
your two apps can subscribe to

00:44:55.060 --> 00:44:58.360
each other's messages and work
across the message queue with

00:44:58.490 --> 00:45:02.100
no extra work on your part.

00:45:02.240 --> 00:45:03.230
So enough talking.

00:45:03.460 --> 00:45:05.390
Let's see some cool demos.

00:45:12.400 --> 00:45:15.160
Hi, I'm Ryan Parks,
and this is Chris Sharp.

00:45:15.160 --> 00:45:17.110
We're going to show you some
of this publish and subscribe

00:45:17.210 --> 00:45:23.580
technology in action using a little
application called .MacKitTiles.

00:45:23.580 --> 00:45:28.560
And basically how this works is each one
of these tiles is an NSImageView that

00:45:28.710 --> 00:45:31.890
you can drop an image to,
and there's a publisher and a

00:45:31.890 --> 00:45:33.780
subscriber in the tiles app.

00:45:33.780 --> 00:45:36.500
And each one of these
tiles represents a topic.

00:45:36.500 --> 00:45:39.780
You heard Scott mention a
little bit about the topics.

00:45:39.780 --> 00:45:44.920
And the thing about a topic is it's a
queue that you can publish messages to.

00:45:44.920 --> 00:45:46.120
You can subscribe to it.

00:45:46.120 --> 00:45:47.960
It's all in one.

00:45:47.960 --> 00:45:56.540
So basically Chris is viewable on my
computer through this little remote view.

00:45:56.540 --> 00:45:58.000
You see him.

00:45:58.000 --> 00:46:03.470
And we already have one image published,
but he's going to publish another one.

00:46:03.700 --> 00:47:03.000
[Transcript missing]

00:47:03.200 --> 00:47:25.600
[Transcript missing]

00:47:25.700 --> 00:47:49.900
[Transcript missing]

00:47:51.300 --> 00:47:53.600
Pretty cool stuff.

00:47:53.600 --> 00:47:58.100
And this is a great example of taking
an app like TextEdit with not really

00:47:58.100 --> 00:48:01.350
much network capabilities at all,
nothing to speak of,

00:48:01.440 --> 00:48:04.020
and turning it into this
powerful collaborative app with a

00:48:04.020 --> 00:48:05.270
relatively small amount of code.

00:48:05.280 --> 00:48:07.440
You just create a
publisher and a subscriber.

00:48:07.480 --> 00:48:11.940
And actually, in this case,
it's just a subscriber in TextEdit.

00:48:11.970 --> 00:48:14.470
And voila,
you've got this great collaborative app.

00:48:14.550 --> 00:48:16.280
And we hope you have a
lot of fun with this.

00:48:16.280 --> 00:48:18.050
Thanks very much.

00:48:24.490 --> 00:48:26.500
So it's always very important
when you're doing anything on a

00:48:26.500 --> 00:48:27.980
network to talk about security.

00:48:27.980 --> 00:48:31.670
I want to give you kind of the high-level
review of our security model as well.

00:48:31.780 --> 00:48:35.330
So on this one on the left,
we have myself.

00:48:35.470 --> 00:48:37.560
I'm going to publish
some stuff into my topic.

00:48:37.610 --> 00:48:41.020
I create the my topic using
the DM publisher calls.

00:48:41.060 --> 00:48:46.020
I then use the DM security protocol
to grant access to Ryan Parks.

00:48:46.280 --> 00:48:49.000
The minute I do that, that automatically
generates an invitation.

00:48:49.240 --> 00:48:51.620
So an invitation is then
sent to Ryan Parks saying,

00:48:51.690 --> 00:48:55.220
hey, scott@mac.com is offering
you this new topic,

00:48:55.230 --> 00:49:00.240
the-- I forgot what I called it--
the my topic from the My Great App.

00:49:00.660 --> 00:49:02.580
The invitation's a
programmatic way of saying,

00:49:02.580 --> 00:49:03.840
what do you want to do?

00:49:03.860 --> 00:49:05.600
Ryan has two choices.

00:49:05.690 --> 00:49:08.280
He can accept the invitation,
basically just subscribe to

00:49:08.290 --> 00:49:09.290
the topic and off he goes.

00:49:09.380 --> 00:49:11.460
Now messages will be delivered to him.

00:49:11.580 --> 00:49:13.200
Or he can just ignore it.

00:49:13.270 --> 00:49:15.160
If he ignores it, then nothing happens.

00:49:15.160 --> 00:49:15.900
There's no queue built.

00:49:16.010 --> 00:49:17.220
There's no endpoint built.

00:49:17.270 --> 00:49:19.720
He never hears about that topic again.

00:49:19.790 --> 00:49:21.810
So in this case, obviously,
he's going to subscribe to

00:49:22.140 --> 00:49:24.110
it because he likes his job.

00:49:26.510 --> 00:49:29.520
Accepting invitations is really simple.

00:49:29.600 --> 00:49:30.420
You get a transaction.

00:49:30.420 --> 00:49:32.120
That subscriber will
call you back and say,

00:49:32.120 --> 00:49:35.310
hey, there's some new
invitations you've received.

00:49:35.430 --> 00:49:38.050
Then you simply walk through
and accept the ones you want.

00:49:38.170 --> 00:49:41.100
So in this case, I can say,
give me the last object.

00:49:41.200 --> 00:49:43.040
You get an array of all the invitations.

00:49:43.130 --> 00:49:43.910
Give me the last one.

00:49:43.920 --> 00:49:46.420
Now again, you should look deeper,
because there may be more than one.

00:49:46.420 --> 00:49:49.920
But for sample code on a slide,
last object is fine.

00:49:49.980 --> 00:49:53.780
Then ask some controller,
do you want to accept this invitation?

00:49:53.850 --> 00:49:56.290
Notice,
invitations are programmatic things.

00:49:56.540 --> 00:49:59.100
They may make sense to
represent as UI to the user.

00:49:59.280 --> 00:50:02.060
They may not make sense to
represent to the UI as a user.

00:50:02.140 --> 00:50:04.480
For example, if you're doing a
distributed kind of app,

00:50:04.480 --> 00:50:07.360
where you want to move event
parsing or event back and forth,

00:50:07.410 --> 00:50:09.880
then probably you want to accept
the invitations programmatically.

00:50:09.960 --> 00:50:12.060
Just decide,
this is something I want to accept.

00:50:12.300 --> 00:50:14.720
Versus if you're a collaborative app,
say like text edit there,

00:50:14.720 --> 00:50:18.240
you'd probably want to put something in,
hey, Ryan is offering you a subscription.

00:50:18.510 --> 00:50:20.860
It's coming from this app,
and it's JPEGs.

00:50:20.990 --> 00:50:23.390
Do you want to accept this subscription?

00:50:23.510 --> 00:50:24.370
So you can do it either way.

00:50:24.380 --> 00:50:25.740
It's up to you.

00:50:25.810 --> 00:50:27.140
In this case,
I'm just handing it off to some

00:50:27.140 --> 00:50:30.260
controller to make the decision,
yeah, I want to subscribe to that.

00:50:30.320 --> 00:50:32.490
If that's the case,
you say subscribe to topic,

00:50:32.490 --> 00:50:33.380
and you're done.

00:50:33.430 --> 00:50:35.960
You now will receive messages
on this particular queue.

00:50:36.190 --> 00:50:38.300
It will follow the launching
behavior you've configured.

00:50:38.520 --> 00:50:40.790
It will follow the pre-download
or pre-caching behavior

00:50:40.790 --> 00:50:41.980
that you've configured.

00:50:42.050 --> 00:50:43.830
Valid code.

00:50:44.360 --> 00:50:49.250
So once I accept that subscription,
I can start publishing, obviously,

00:50:49.280 --> 00:50:49.870
at any time.

00:50:50.000 --> 00:50:50.840
It doesn't matter.

00:50:50.910 --> 00:50:52.760
And those messages will flow across.

00:50:52.810 --> 00:50:54.480
They will come from my
system to his system.

00:50:54.600 --> 00:50:56.760
All the latency and on
and off and reachability,

00:50:56.760 --> 00:50:58.530
that's all handled.

00:50:58.800 --> 00:51:02.670
If I want to let back publishing happen,
I want to not only give messages to Ryan,

00:51:02.730 --> 00:51:06.930
I want to let Ryan give messages
back to me on the same topic,

00:51:07.030 --> 00:51:08.200
you can do that.

00:51:08.290 --> 00:51:12.710
Using the DM security protocol,
you would grant Ryan access to my topic.

00:51:12.810 --> 00:51:16.450
So I'd create it, it's my topic,
obviously I have access to it.

00:51:16.620 --> 00:51:20.710
Granting Ryan access to read gives
him the ability to get messages.

00:51:20.980 --> 00:51:24.990
If you give him read and write,
then he can obviously put messages back,

00:51:25.110 --> 00:51:27.290
and messages will come back to you.

00:51:27.390 --> 00:51:30.360
Key thing:
only the sponsor can grant this

00:51:30.360 --> 00:51:33.330
additional back publishing privilege.

00:51:33.700 --> 00:51:36.610
If I give write to Ryan,
Ryan can't turn around and

00:51:36.610 --> 00:51:38.200
give write to somebody else.

00:51:38.280 --> 00:51:41.430
Only the subscriber,
only the person who's the sponsor can

00:51:41.430 --> 00:51:43.800
control who can put what into the topic.

00:51:43.900 --> 00:51:45.740
But, in this case,
I'm going to give Ryan back

00:51:45.740 --> 00:51:47.000
publishing permission.

00:51:47.140 --> 00:51:50.880
Ryan uses the same message publisher
calls as if he created the topic,

00:51:51.230 --> 00:51:53.670
and the messages come back to me.

00:51:54.370 --> 00:51:57.740
And of course, anyone can unsubscribe
at any time they like.

00:51:57.760 --> 00:51:59.740
Their infrastructure
connections are torn down,

00:51:59.780 --> 00:52:02.080
and they no longer receive
messages on that topic.

00:52:02.100 --> 00:52:04.130
And if they want,
they could go back again at a later

00:52:04.130 --> 00:52:06.000
date and resubscribe to the topic.

00:52:06.020 --> 00:52:07.730
It's up to them.

00:52:07.930 --> 00:52:09.620
So, what can you build with this?

00:52:09.870 --> 00:52:12.860
Well, it's very well suited to
obviously different applications

00:52:12.860 --> 00:52:13.730
that need to work together.

00:52:13.930 --> 00:52:16.930
Because of those tight payloads,
you can build solution suites.

00:52:17.050 --> 00:52:18.870
Either you can partner with
other developers and do a

00:52:18.870 --> 00:52:21.380
marketing bundle on your own,
or you can let users do

00:52:21.380 --> 00:52:22.780
it independently of you.

00:52:22.870 --> 00:52:23.800
It's up to you.

00:52:24.000 --> 00:52:27.030
Obviously, the suite can be all
from a single vendor,

00:52:27.160 --> 00:52:28.720
or you can mix and match.

00:52:29.700 --> 00:52:32.360
Ultimately, you can also use these as
components in the workflow.

00:52:32.430 --> 00:52:35.570
I produce images,
you package those images into documents,

00:52:35.790 --> 00:52:38.000
he takes the documents and
hands them off to a printer,

00:52:38.070 --> 00:52:39.140
and they get printed.

00:52:39.220 --> 00:52:43.870
The publish and subscribe messaging
system can move that message along.

00:52:44.290 --> 00:52:47.560
If you want to move data from one
user of your application to another,

00:52:47.590 --> 00:52:49.030
picking up and turning in assignments.

00:52:49.140 --> 00:52:51.730
In the education world,
a teacher could publish an assignment.

00:52:51.840 --> 00:52:54.490
The app would launch and all
the student systems saying this

00:52:54.580 --> 00:52:55.970
new assignment has arrived.

00:52:56.130 --> 00:52:58.090
They go do whatever
it is they need to do,

00:52:58.280 --> 00:53:01.790
take a test, whatnot, and publish back to
the teacher's machine.

00:53:02.130 --> 00:53:04.000
Workflow and approval chains.

00:53:04.040 --> 00:53:04.910
Is this image good enough?

00:53:05.070 --> 00:53:06.000
No.

00:53:06.050 --> 00:53:07.000
Change, change.

00:53:07.000 --> 00:53:07.270
Is this image good?

00:53:07.280 --> 00:53:07.980
No.

00:53:08.010 --> 00:53:08.400
Change.

00:53:08.460 --> 00:53:08.680
No.

00:53:09.030 --> 00:53:09.290
No.

00:53:09.580 --> 00:53:09.820
No.

00:53:10.110 --> 00:53:11.410
Maybe.

00:53:11.540 --> 00:53:13.900
You can do all those kinds of things.

00:53:14.280 --> 00:53:16.660
Assembling lots of dynamic
parts into a whole.

00:53:16.740 --> 00:53:18.900
You saw the simple change
we made to text edit.

00:53:18.970 --> 00:53:20.640
Add the ability to subscribe to it.

00:53:20.730 --> 00:53:24.200
You can build apps now very
simply where it's an amalgamation.

00:53:24.200 --> 00:53:26.560
Content comes in from a
bunch of different apps,

00:53:26.600 --> 00:53:30.220
written by you, written by others,
that you assemble into some whole

00:53:30.220 --> 00:53:32.060
that has meaning in your space.

00:53:32.150 --> 00:53:34.950
Multi-user, multi-way collaboration.

00:53:35.040 --> 00:53:38.880
Imagine 10 years ago,
the hot topic was shared whiteboards.

00:53:38.960 --> 00:53:40.940
This is kind of the
uber shared whiteboard,

00:53:41.040 --> 00:53:42.820
because now you can start
mixing and matching content

00:53:42.820 --> 00:53:44.600
from a lot of different places.

00:53:44.670 --> 00:53:47.400
Ultimately,
we know you can do some really,

00:53:47.400 --> 00:53:49.460
really cool things with this.

00:53:49.460 --> 00:53:53.180
The examples we put up here are very
simple ones to kind of whet the appetite.

00:53:53.340 --> 00:53:55.680
But imagine what you can do
with an app where you don't care

00:53:55.680 --> 00:53:57.040
about the networking anymore.

00:53:57.100 --> 00:53:58.710
You know the network
will get the data there.

00:53:58.850 --> 00:53:59.430
It'll arrive.

00:53:59.580 --> 00:54:02.040
It'll arrive without you having
to do any headaches or extra

00:54:02.040 --> 00:54:03.400
network level programming.

00:54:03.470 --> 00:54:08.700
When I started coding a little while ago,
networking was really cool.

00:54:08.700 --> 00:54:10.520
But boy, was it a pain in the tail.

00:54:10.590 --> 00:54:12.820
Sockets is powerful,
but Sockets is not friendly.

00:54:12.820 --> 00:54:16.160
Two method calls in Cocoa,
that's kind of friendly.

00:54:16.160 --> 00:54:18.900
I have an image, publish the image.

00:54:20.080 --> 00:54:21.430
This isn't a perfect fit for everything.

00:54:21.590 --> 00:54:23.380
It doesn't solve all the problems.

00:54:23.460 --> 00:54:24.700
Large groups.

00:54:24.760 --> 00:54:26.440
This has a finite number of endpoints.

00:54:26.550 --> 00:54:29.760
It's not designed to be the
thousand to one publishing system.

00:54:29.820 --> 00:54:32.440
This is designed for letting
groups of friends or larger,

00:54:32.440 --> 00:54:34.300
a little bit larger groups work together.

00:54:34.560 --> 00:54:37.740
But this is not how I would deliver
content to every person in this room.

00:54:37.820 --> 00:54:40.590
It's not what this system
is designed for today.

00:54:40.750 --> 00:54:43.200
High transaction or high message rates.

00:54:43.240 --> 00:54:47.880
If you try to send things too quickly,
you could get back KDM service busy.

00:54:48.020 --> 00:54:49.670
It just means you're
trying to put stuff in,

00:54:49.710 --> 00:54:51.500
do it quicker than the
queue can accept it.

00:54:51.550 --> 00:54:54.870
Now, we're still playing with
where the right numbers are,

00:54:54.870 --> 00:54:56.870
but the bottom line is,
if you're doing stuff

00:54:56.940 --> 00:54:59.960
in a reasonable manner,
like a message or two every

00:54:59.960 --> 00:55:02.780
ten minutes or every minute,
or maybe even half a minute,

00:55:02.850 --> 00:55:03.430
you'll be fine.

00:55:03.660 --> 00:55:05.630
If you're trying to do
ten messages in a second,

00:55:05.840 --> 00:55:07.760
you're going to get
back KDM service busy.

00:55:07.810 --> 00:55:09.510
If you get it back,
simply just wait a little

00:55:09.510 --> 00:55:10.670
bit and try sending it again.

00:55:10.960 --> 00:55:12.960
It just means you're sending too quick.

00:55:13.030 --> 00:55:14.860
This is a centralized service, though.

00:55:14.980 --> 00:55:17.900
So if you kind of look at the
spectrum of networking technology,

00:55:17.900 --> 00:55:22.080
on the extreme left, you have burn a DVD,
put it in a FedEx envelope,

00:55:22.080 --> 00:55:23.010
and send it off.

00:55:23.610 --> 00:55:27.200
Pretty reliable,
but not the best latency in the world.

00:55:27.200 --> 00:55:29.160
Latency is measured in days.

00:55:29.160 --> 00:55:31.890
The other end of the spectrum
is the first person shooters,

00:55:32.100 --> 00:55:35.260
you know, Halo or games of that nature,
where latency is measured

00:55:35.270 --> 00:55:37.110
in the sub-milliseconds.

00:55:37.430 --> 00:55:39.290
This kind of sits
somewhere in the middle.

00:55:39.340 --> 00:55:41.580
If a file server is a
perfectly acceptable way,

00:55:41.630 --> 00:55:44.200
make changes to a file,
save the file to the server,

00:55:44.280 --> 00:55:45.400
this is a perfect fit.

00:55:45.440 --> 00:55:47.290
This is that kind of scale,
that kind of latency.

00:55:47.400 --> 00:55:49.720
Obviously,
I didn't take it all the way down to the

00:55:49.720 --> 00:55:51.840
days because our latency isn't that low.

00:55:51.920 --> 00:55:54.180
But we're very,
very close to the way emails,

00:55:54.180 --> 00:55:56.330
instant messaging,
file servers kind of work from

00:55:56.330 --> 00:55:57.900
a network latency perspective.

00:55:57.970 --> 00:56:00.110
We're not a first person shooter.

00:56:00.260 --> 00:56:02.190
We're not designed to handle
messages at that rate.

00:56:02.270 --> 00:56:05.260
That's not the purpose of the kit today.

00:56:06.150 --> 00:56:09.760
Situations where messages
are completely transitory.

00:56:09.910 --> 00:56:12.760
Remember,
all messages are stored centrally.

00:56:12.840 --> 00:56:14.780
This is important because
the store and forward.

00:56:14.780 --> 00:56:17.140
If the machine that
it's sent to isn't on,

00:56:17.170 --> 00:56:19.460
we have to hold it in the
center for a little while.

00:56:19.510 --> 00:56:21.920
So you don't want to say,
this has changed.

00:56:21.940 --> 00:56:22.740
It's changed.

00:56:22.760 --> 00:56:23.220
It's changed.

00:56:23.400 --> 00:56:23.900
It's changed.

00:56:23.930 --> 00:56:24.320
It's changed.

00:56:24.360 --> 00:56:24.820
It's changed.

00:56:24.830 --> 00:56:28.680
You'll fill the queue because all
those messages get held in the center.

00:56:28.710 --> 00:56:30.880
You want to keep this
at the object level.

00:56:30.910 --> 00:56:32.910
This is not a status protocol as much.

00:56:33.020 --> 00:56:34.820
You can use it that
way if you're careful,

00:56:34.870 --> 00:56:36.080
But it's really about an object.

00:56:36.120 --> 00:56:37.560
This data's changed, and here it is.

00:56:37.600 --> 00:56:39.050
Here's the data.

00:56:39.770 --> 00:56:41.510
There's a maximum
capacity in that center.

00:56:41.680 --> 00:56:45.260
The queue has a depth,
a finite depth based on quota.

00:56:45.330 --> 00:56:48.110
And it doesn't offer anonymous support.

00:56:48.240 --> 00:56:50.440
So this is not a P2P system.

00:56:50.500 --> 00:56:53.640
I can't send something to anybody.

00:56:53.700 --> 00:56:56.940
I have to send to Ryan, to Chris,
to George, and to Mary.

00:56:57.010 --> 00:57:00.080
I can't send to anybody who
wants to subscribe to it.

00:57:00.140 --> 00:57:02.100
Doesn't offer that anonymous endpoint.

00:57:02.180 --> 00:57:05.490
All endpoints must be named endpoints.

00:57:05.550 --> 00:57:07.930
And they obviously have
to accept the invitation.

00:57:08.030 --> 00:57:10.720
So when you grant access to somebody,
they get that invitation.

00:57:10.720 --> 00:57:11.830
They accept that invitation.

00:57:11.840 --> 00:57:13.180
And then they get messages.

00:57:13.230 --> 00:57:17.460
They don't get messages until
they accept the invitation.

00:57:17.600 --> 00:57:19.310
So to wrap it up.

00:57:20.230 --> 00:57:22.440
We've talked about a lot of stuff.

00:57:22.510 --> 00:57:26.270
Tomorrow there's a lab in, I believe,
it's the second floor

00:57:26.270 --> 00:57:28.520
application lab one.

00:57:28.550 --> 00:57:32.010
For three hours from 9:00 to 12:00,
we will have the majority of the

00:57:32.010 --> 00:57:35.160
.Mac engineering team available to
answer your questions about the kit,

00:57:35.160 --> 00:57:38.980
about .Mac in general or otherwise,
if we don't get to them today.

00:57:39.010 --> 00:57:41.320
We'll be happy to give
you architectural advice,

00:57:41.320 --> 00:57:43.730
how to play with stuff,
how this could integrate to your app,

00:57:43.800 --> 00:57:46.820
what's the best way to make it fit,
and of course, answers for any burning

00:57:46.840 --> 00:57:47.730
questions that come up.

00:57:47.820 --> 00:57:51.800
Right after we left the room, you go, oh,
I wanted to-- tomorrow, 12:00 to noon.

00:57:51.800 --> 00:57:52.990
Or I'm sorry, 12:00 to noon.

00:57:53.000 --> 00:57:54.100
That's good.

00:57:54.390 --> 00:57:56.670
9:00 to 12:00.

00:57:57.030 --> 00:57:58.900
So how do you get this kit?

00:57:58.980 --> 00:58:00.830
It's an embedded framework
you can ship with your app.

00:58:00.980 --> 00:58:02.900
Remember,
this doesn't come with the system.

00:58:02.900 --> 00:58:06.400
This is a little package that you
deliver with your application.

00:58:06.530 --> 00:58:09.570
It's available from developer.apple.com.

00:58:09.980 --> 00:58:12.370
use a unique creator code for your app.

00:58:12.540 --> 00:58:13.580
Something we learned last year.

00:58:13.580 --> 00:58:17.450
All of our sample apps use the
four dashes as their creator code.

00:58:17.460 --> 00:58:20.880
Don't use the four dashes
in your application.

00:58:20.880 --> 00:58:23.340
It doesn't give you the
best quality of service.

00:58:23.400 --> 00:58:26.120
The system uses those
creator codes to kind of do a

00:58:26.130 --> 00:58:27.970
guaranteed quality of service.

00:58:28.000 --> 00:58:30.530
The sample code gets the
absolute lowest priority.

00:58:30.540 --> 00:58:32.750
So don't use that code.

00:58:32.770 --> 00:58:34.060
It's real simple.

00:58:34.060 --> 00:58:35.500
There's a simple website you can go to.

00:58:35.500 --> 00:58:36.860
Your app doesn't even need to be started.

00:58:36.860 --> 00:58:38.740
You don't have to have a single
line of code laid down to

00:58:38.740 --> 00:58:39.830
get a creator code assigned.

00:58:39.840 --> 00:58:41.400
Use that creator code.

00:58:41.400 --> 00:58:42.360
It's a four-digit code.

00:58:42.360 --> 00:58:43.150
Put it into your app.

00:58:43.400 --> 00:58:45.430
That will give you the best
experience with the kit.

00:58:45.560 --> 00:58:46.770
Don't use our four dashes.

00:58:46.890 --> 00:58:48.060
They're just for the sample code.

00:58:48.080 --> 00:58:51.390
The latest release will
have the .mac kit framework,

00:58:51.420 --> 00:58:55.330
all the documentation,
all the sample projects,

00:58:55.430 --> 00:58:57.160
including every demo that
you've seen up here today.

00:58:59.010 --> 00:59:02.760
and .Mac Kit 2.0 preview
in Universal Binary will

00:59:02.760 --> 00:59:05.060
be available July the 1st.

00:59:05.090 --> 00:59:06.940
So we're almost there.

00:59:06.970 --> 00:59:09.920
And in the lab tomorrow,
we will have early builds of the kit

00:59:10.130 --> 00:59:11.860
that you're welcome to come play with.

00:59:11.880 --> 00:59:15.180
And with that having been said, again,
I'd like to thank the .Mac team.

00:59:15.200 --> 00:59:17.860
There are members of this team that
have been working 70 hours a week for

00:59:17.860 --> 00:59:20.650
the past year to get to this point.

00:59:27.570 --> 00:59:32.810
And ultimately the-- whoa, that's neat.

00:59:33.310 --> 00:59:35.560
The formula we can't see.

00:59:42.340 --> 00:59:45.200
So we know how to get the kit.

00:59:45.270 --> 00:59:48.520
The formula that this is
designed to enable fundamentally,

00:59:48.610 --> 00:59:51.980
you take Mac OS X Tiger,
you add to that your

00:59:51.980 --> 00:59:57.770
application plus the .Mac SDK,
and you get to this networking nirvana,

00:59:57.980 --> 01:00:00.770
this point where client
and server blend together.

01:00:00.780 --> 01:00:02.860
The user doesn't have
to pay any attention.

01:00:02.970 --> 01:00:06.300
You can send messages from one of your
apps to another one of your apps with

01:00:06.540 --> 01:00:10.400
two lines of code on the sending side
and about three or four lines of code in

01:00:10.400 --> 01:00:14.810
a single method on the receiving side,
and it gets there.

01:00:14.910 --> 01:00:17.900
And with that having been said,
a couple contacts for you.

01:00:17.980 --> 01:00:20.180
Xavier is our WWDR evangelist.

01:00:20.300 --> 01:00:21.980
If you have questions, reach him.

01:00:22.040 --> 01:00:24.270
Molly is productmarketing in .Mac.

01:00:24.460 --> 01:00:26.340
So if you have marketing
questions you'd like to ask,

01:00:26.350 --> 01:00:28.290
that's a good place to put them.

01:00:28.460 --> 01:00:30.440
Two email addresses for .Mac kit.

01:00:30.610 --> 01:00:31.230
Bugs.

01:00:31.560 --> 01:00:35.010
Use the bugreporter.apple.com website.

01:00:35.080 --> 01:00:36.750
Don't send bugs to these email addresses.

01:00:36.820 --> 01:00:38.380
That's not what they're for.

01:00:38.450 --> 01:00:41.420
The .Mac kit feedback is API suggestions.

01:00:41.420 --> 01:00:42.520
The kit's developer preview.

01:00:42.720 --> 01:00:45.290
So if our API is a
little not quite perfect,

01:00:45.420 --> 01:00:45.960
send us feedback.

01:00:46.090 --> 01:00:47.020
Let us know.

01:00:47.070 --> 01:00:48.980
If there's a service you
want to see in the kit,

01:00:49.030 --> 01:00:49.980
let us know.

01:00:50.020 --> 01:00:52.010
This is a direct pipe
into the engineering team.

01:00:52.020 --> 01:00:55.680
It's a great way to kind of get
feature requests into the kit.

01:00:55.740 --> 01:00:58.720
.Mac zen is if you're doing
something really cool,

01:00:58.750 --> 01:01:01.400
you've got that yin-yang kind
of thing going in your app,

01:01:01.410 --> 01:01:04.480
and it's really cool and differentiating,
and you want to make sure we know about

01:01:04.580 --> 01:01:08.580
it so we can possibly-- co-marketing
or whatever else-- send it to .Mac zen.

01:01:08.680 --> 01:01:11.040
It's a direct pipe into the way--
way of getting things up there

01:01:11.110 --> 01:01:14.180
so people know and we know that
you're doing cool stuff out there.