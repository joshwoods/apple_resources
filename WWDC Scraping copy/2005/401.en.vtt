WEBVTT

00:00:01.730 --> 00:00:02.470
Morning everybody!

00:00:02.690 --> 00:00:07.930
Welcome to session 401,
What's New in Xcode 2.1.

00:00:10.330 --> 00:00:12.540
That was unexpected.

00:00:12.540 --> 00:00:14.590
That's the button.

00:00:14.650 --> 00:00:15.570
I'm Chris Espinosa.

00:00:15.650 --> 00:00:18.800
I'm the manager of developer
tools productivity at Apple.

00:00:18.800 --> 00:00:23.800
And we're going to take you through
some of the new features in Xcode 2.1.

00:00:23.800 --> 00:00:25.800
Now, it's available for download.

00:00:25.800 --> 00:00:28.390
We saw on the mailing list last
night that a lot of you have

00:00:28.420 --> 00:00:30.340
already downloaded and installed it.

00:00:30.610 --> 00:00:31.360
That's terrific.

00:00:31.470 --> 00:00:33.840
A lot of you are already
asking questions about it.

00:00:33.840 --> 00:00:35.030
It's also terrific.

00:00:35.100 --> 00:00:38.150
We'll have Q&A after this session,
so you can find out a

00:00:38.330 --> 00:00:39.550
little bit more about it.

00:00:39.950 --> 00:00:42.360
And it's really important,
if you haven't done it already,

00:00:42.500 --> 00:00:47.800
and you're planning on coming to the
session 4.02 right after this one,

00:00:47.800 --> 00:00:52.240
please download and install
Xcode 2.1 on your machine.

00:00:52.300 --> 00:00:57.800
Also download the appearance sample
updated sample code from DTS.apple.com.

00:00:57.800 --> 00:01:01.160
That's the sample program
we'll be walking through in the

00:01:01.160 --> 00:01:03.790
hands-on this morning at 10:30.

00:01:04.980 --> 00:01:07.500
So here's what you're going to
learn in this session today.

00:01:07.530 --> 00:01:12.010
We're going to go on a quick recap
of the features in Xcode 2.0.

00:01:12.010 --> 00:01:13.850
It was only released 12 weeks ago.

00:01:13.950 --> 00:01:16.350
A lot of you haven't even
installed and updated to that.

00:01:16.550 --> 00:01:18.800
But when you go to 2.1,
you're also going to have to

00:01:18.800 --> 00:01:21.270
understand what was in 2.0,
because there were some

00:01:21.360 --> 00:01:22.310
big features there.

00:01:22.920 --> 00:01:26.920
The key features of Xcode
2.1 that we just introduced:

00:01:27.120 --> 00:01:31.650
build configurations,
the breakpoint actions, conditions,

00:01:31.650 --> 00:01:33.940
and watchpoints, both of those you saw
yesterday in Ted's demo.

00:01:33.940 --> 00:01:34.900
Integrated unit testing you heard about.

00:01:34.900 --> 00:01:38.670
We're going to do a short demo today,
a longer demo later in the week.

00:01:38.900 --> 00:01:40.900
And the project file format changes.

00:01:40.900 --> 00:01:43.400
I'll go into a little
more detail about those.

00:01:43.400 --> 00:01:45.910
And of course,
we're going to talk about Xcode

00:01:45.910 --> 00:01:47.810
support for universal binaries.

00:01:47.960 --> 00:01:52.890
The good news is that
there's not much to learn.

00:01:52.890 --> 00:01:52.890
It's really great.

00:01:53.400 --> 00:01:56.310
So let's talk about Xcode 2.1.

00:01:56.360 --> 00:01:59.710
We just introduced 2.0 12 weeks ago.

00:01:59.960 --> 00:02:02.960
Why did we turn around
a .1 release so quickly?

00:02:03.000 --> 00:02:05.390
The answer: universal binary support.

00:02:05.630 --> 00:02:08.140
We couldn't ship that to you
in Tiger because we hadn't

00:02:08.180 --> 00:02:09.800
made this announcement yet.

00:02:09.920 --> 00:02:13.290
We had to put it integrated into the UI,
clean,

00:02:13.570 --> 00:02:15.260
so that you could use it right now.

00:02:15.510 --> 00:02:18.480
And we also had to make some
other major changes so that

00:02:18.620 --> 00:02:23.280
people could start upgrading,
start migrating their non-Xcode 2.0.

00:02:23.300 --> 00:02:25.790
We're going to be moving from Xcode
projects to Xcode and have a more

00:02:25.860 --> 00:02:27.530
productive development environment there.

00:02:27.530 --> 00:02:32.630
Xcode 2.1 replaces the
2.0 that's in Tiger.

00:02:32.640 --> 00:02:38.400
It runs on Tiger, it builds on Tiger,
it builds for PowerPC and Intel,

00:02:38.400 --> 00:02:43.780
and it cross-develops all
the way back to Mac OS 10.2.

00:02:43.780 --> 00:02:49.510
So you can upgrade to Xcode 2.1,
run it on a developer transition system,

00:02:49.790 --> 00:02:53.250
run it on your current PowerBook or G5,
and turn it on.

00:02:53.370 --> 00:02:55.960
And target the developer
transition system,

00:02:55.970 --> 00:02:59.980
the G5s, or any machine back to 10.2.

00:03:00.300 --> 00:03:04.530
It includes the
Mac OS 10.4 Universal SDK.

00:03:04.530 --> 00:03:08.480
That is the key to the developer
transition and targeting Intel.

00:03:08.620 --> 00:03:10.970
You need the SDK,
whether you're running on the

00:03:10.970 --> 00:03:12.970
Intel machine or on the PowerPC.

00:03:13.000 --> 00:03:16.500
It includes features to support
large project management.

00:03:16.500 --> 00:03:19.600
We really listened to our
developers who were saying,

00:03:19.600 --> 00:03:21.200
Xcode doesn't scale.

00:03:21.200 --> 00:03:25.370
You need to make it easier to manage very
large projects and trees of projects.

00:03:25.440 --> 00:03:28.230
There are some new
features to help with that.

00:03:28.230 --> 00:03:31.320
And it's got a lot of minor
productivity enhancements.

00:03:31.320 --> 00:03:34.610
We've had this long list of
things you've asked for over the

00:03:34.610 --> 00:03:36.630
years that we just never got to.

00:03:36.640 --> 00:03:37.840
We got to them this time.

00:03:37.840 --> 00:03:39.830
I think you're going
to like what you see.

00:03:39.950 --> 00:03:42.680
And then dozens and dozens of bug fixes.

00:03:42.680 --> 00:03:47.580
The good news is that we were just
closing this project just as you were

00:03:47.710 --> 00:03:53.240
getting the Golden Master of 2.0,
and we were ready to jump on anything

00:03:53.240 --> 00:03:56.260
you reported of new crashing bugs,
corner cases,

00:03:56.340 --> 00:03:58.880
weird things that you found in 2.0.

00:03:59.010 --> 00:04:00.640
We didn't have to do a lot of that.

00:04:00.880 --> 00:04:02.750
2.0 was a really solid release.

00:04:02.850 --> 00:04:05.990
We expect 2.1 to be just as solid.

00:04:06.170 --> 00:04:08.660
The new project file
format and the extension,

00:04:08.660 --> 00:04:11.320
I think, is going to be the change
that affects you most,

00:04:11.390 --> 00:04:16.760
because 2.1 projects cannot
be ported back to 2.0 or 1.5.

00:04:17.070 --> 00:04:21.710
It's a trapdoor migration
from 2.0 to 2.1.

00:04:21.830 --> 00:04:24.020
To help with that,
we've made a new project

00:04:24.020 --> 00:04:25.940
file format and extension.

00:04:25.940 --> 00:04:29.430
And so when you open
a 2.0 project in 2.1,

00:04:29.430 --> 00:04:33.740
it saves it aside so you can maintain
them side by side after that.

00:04:33.820 --> 00:04:35.420
It doesn't affect your old project.

00:04:36.100 --> 00:04:39.780
Upward but not backwards
compatible with 2.0.

00:04:39.800 --> 00:04:43.410
So let's just do a quick
recap of what was in 2.0.

00:04:43.410 --> 00:04:45.670
You probably got the seeds for that.

00:04:45.870 --> 00:04:47.900
You got the Golden Master 12 weeks ago.

00:04:47.900 --> 00:04:50.780
Maybe you haven't really explored
all of its new functionality.

00:04:50.780 --> 00:04:52.780
Let me take you through
that pretty quickly.

00:04:53.110 --> 00:04:54.560
There are some new UI layouts.

00:04:54.580 --> 00:04:59.260
There are the design tools,
a favorites bar where you can use your

00:04:59.450 --> 00:05:05.180
Xcode IDE as Safari-like to have quick
reference to all the things you need.

00:05:05.510 --> 00:05:06.820
There are some new UI layouts.

00:05:06.820 --> 00:05:09.130
There are some new UI layouts.

00:05:09.130 --> 00:05:11.500
There are some new UI layouts.

00:05:13.100 --> 00:05:17.240
All new documentation and dynamically
downloaded documentation from the

00:05:17.240 --> 00:05:20.720
web and improved Apple scriptability.

00:05:20.720 --> 00:05:21.520
The layouts.

00:05:21.520 --> 00:05:24.670
You can use your preferred
workflow now in Xcode.

00:05:24.670 --> 00:05:28.280
In the preferences,
in the general preferences,

00:05:28.280 --> 00:05:30.340
there's a choice of
three different layouts.

00:05:30.340 --> 00:05:33.340
The condensed layout
is code warrior-like.

00:05:33.620 --> 00:05:37.360
One single window for your
project and all other files,

00:05:37.360 --> 00:05:42.900
all other modes like debug or build
results open in separate windows.

00:05:42.920 --> 00:05:47.300
If you're migrating from code warrior,
this is probably the one you'd prefer.

00:05:47.300 --> 00:05:50.480
The default layout, what you get if you
just install Xcode raw,

00:05:50.480 --> 00:05:53.670
is the one that we've
been using from Xcode 1.0,

00:05:53.680 --> 00:05:55.920
which is the three pane view.

00:05:55.920 --> 00:06:00.360
The groups and files, the detail view,
and the embedded editor with

00:06:00.360 --> 00:06:03.940
the option to open separate
editors and still your build,

00:06:03.940 --> 00:06:07.560
your find,
your debug windows are all separate.

00:06:07.990 --> 00:06:10.100
The all-in-one is for
people who are accustomed to

00:06:10.100 --> 00:06:14.560
something like Visual Studio,
where you always work just in one window.

00:06:14.850 --> 00:06:18.850
Your debug, your build results,
your find results are in separate

00:06:18.850 --> 00:06:22.020
pages in the same window,
rather than opening in separate windows.

00:06:22.130 --> 00:06:25.610
So wherever you're coming from,
we have a working style

00:06:25.610 --> 00:06:27.090
that matches yours.

00:06:27.640 --> 00:06:28.490
The design tools.

00:06:28.550 --> 00:06:30.900
This was one of the big
features in Xcode 2.0.

00:06:30.900 --> 00:06:32.480
There are two sides to them.

00:06:32.580 --> 00:06:36.990
One is the class diagram,
where you can make a diagram of the

00:06:37.090 --> 00:06:40.730
class model of your application,
either your entire project

00:06:40.730 --> 00:06:43.270
or even selected parts of it.

00:06:43.320 --> 00:06:46.850
You can manipulate the diagram
and change it however you'd like,

00:06:46.870 --> 00:06:50.920
and even save it to use as documentation
and navigate from the class diagram

00:06:50.920 --> 00:06:53.160
back to your source code very easily.

00:06:53.160 --> 00:06:56.830
Then the other side is that you
can create a data model of the

00:06:57.250 --> 00:07:01.480
data in your application for use
with the core data framework.

00:07:01.480 --> 00:07:03.800
There are some sessions on
that later this week if you're

00:07:03.810 --> 00:07:05.230
interested in exploring those.

00:07:05.230 --> 00:07:09.730
This is a great,
powerful feature of Xcode 2.0.

00:07:09.950 --> 00:07:12.860
The code completion in
Xcode 2.0 is greatly,

00:07:12.860 --> 00:07:14.200
greatly improved.

00:07:14.200 --> 00:07:16.060
It's much more responsive.

00:07:16.160 --> 00:07:19.860
It does not pop up automatically
unless you specify it to,

00:07:19.870 --> 00:07:22.900
and then it only does so
for method completion.

00:07:22.900 --> 00:07:23.080
Okay?

00:07:23.080 --> 00:07:26.930
So it stays out of your way rather
than popping up when you didn't want

00:07:26.930 --> 00:07:29.220
it to or when you least expected it to.

00:07:29.220 --> 00:07:33.260
We've also improved the heuristics
for when it does a completion and what

00:07:33.260 --> 00:07:35.780
the priority of the completions are.

00:07:35.780 --> 00:07:39.040
And more often than not,
it knows what you're about

00:07:39.040 --> 00:07:42.790
to type and offers you that
completion first in the list.

00:07:42.940 --> 00:07:45.610
There's a little toggle in the list
where you can have the completions

00:07:45.690 --> 00:07:47.810
alphabetical or by priority order.

00:07:47.810 --> 00:07:49.850
You'll find that very useful.

00:07:49.860 --> 00:07:52.540
There's a little more on
that in session 4.0.3,

00:07:52.740 --> 00:07:55.260
which is coming up on
Wednesday afternoon.

00:07:57.310 --> 00:08:00.340
So those were the big
features of Xcode 2.0.

00:08:00.340 --> 00:08:03.500
And like I said,
we had a crash project once 2.0

00:08:03.500 --> 00:08:06.300
was finished to turn around 2.1.

00:08:06.400 --> 00:08:07.500
Why did we do that?

00:08:07.520 --> 00:08:08.460
What was our motivation?

00:08:08.500 --> 00:08:12.360
First, we need to support the
transition to universal binaries.

00:08:12.360 --> 00:08:15.260
And there are a couple
different sides of that.

00:08:15.270 --> 00:08:18.720
One was to just support
building universal binaries,

00:08:18.720 --> 00:08:23.410
but two was to support your transition
if you hadn't come to Xcode yet.

00:08:24.460 --> 00:08:28.240
Build configurations are a
really important part of that,

00:08:28.240 --> 00:08:32.240
not just to help you manage
multiple configurations and

00:08:32.240 --> 00:08:36.420
deploying for universal when you're
building for native on the desktop,

00:08:36.420 --> 00:08:41.840
but also when it comes to coming
to Xcode for the first time.

00:08:41.840 --> 00:08:43.510
Build styles were kind of alien.

00:08:43.510 --> 00:08:45.530
They worked in a counterintuitive way.

00:08:45.530 --> 00:08:48.740
We watched what was going on in the
Xcode users list and saw that that

00:08:48.740 --> 00:08:52.180
was one of the major stumbling blocks,
and we had to address it.

00:08:52.300 --> 00:08:53.900
Unit testing.

00:08:54.130 --> 00:08:57.090
We know that when you build once
and deploy on multiple times,

00:08:57.250 --> 00:09:00.780
you're going to have a harder
time qualifying your product on

00:09:00.780 --> 00:09:03.040
multiple deployment platforms.

00:09:03.040 --> 00:09:05.080
You really need to make sure it's right.

00:09:05.440 --> 00:09:09.400
Building in unit testing helps
to ensure that your code is

00:09:09.710 --> 00:09:12.040
correct before you deploy it.

00:09:12.170 --> 00:09:15.560
And by ensuring it's more
correct before you deploy it,

00:09:15.560 --> 00:09:19.200
you have an easier time qualifying
it when you have to deploy

00:09:19.380 --> 00:09:21.350
to multiple chip platforms.

00:09:21.580 --> 00:09:23.440
And then the new project file format.

00:09:23.590 --> 00:09:26.660
People kept telling us that
if I have multiple developers

00:09:26.660 --> 00:09:30.480
working on one project,
when two people are making changes,

00:09:30.620 --> 00:09:32.660
more often than not,
I get a conflict in my

00:09:32.660 --> 00:09:33.890
project file format.

00:09:33.900 --> 00:09:37.110
If I have to hand edit it,
I can't understand what's going on,

00:09:37.110 --> 00:09:39.190
I have to throw it out and do it again.

00:09:39.220 --> 00:09:42.310
We have made some improvements
in the project file format

00:09:42.360 --> 00:09:45.610
to make it more readable,
more diffable, more mergeable,

00:09:45.610 --> 00:09:50.130
to try to make it easier for multiple
developers to work on the same project.

00:09:50.260 --> 00:09:54.890
Again, if you've got your PowerPC experts
and your Intel experts

00:09:55.220 --> 00:09:58.150
working on the same project,
that's more important

00:09:58.390 --> 00:10:00.280
now than it was before.

00:10:00.640 --> 00:10:02.800
And we just wanted to improve livability.

00:10:03.000 --> 00:10:06.980
People who've moved to Xcode have
sometimes done it with teeth gritted,

00:10:06.980 --> 00:10:10.400
and I know several developers,
personal friends of mine,

00:10:10.460 --> 00:10:15.230
who drop a note to me every day on "Xcode
should work this way" because there

00:10:15.230 --> 00:10:16.610
are some livability issues about it.

00:10:16.710 --> 00:10:20.700
We have addressed a ton
of those in Xcode 2.1.

00:10:20.780 --> 00:10:24.590
We've improved the debugging and given
you some features that you really,

00:10:24.590 --> 00:10:27.740
really need to get your job done,
and gone a little beyond.

00:10:27.960 --> 00:10:32.270
We made a lot of UI changes to
introduce familiar elements.

00:10:32.920 --> 00:10:36.750
The biggest change, however,
I think is from build styles

00:10:37.330 --> 00:10:38.330
to build configurations.

00:10:38.390 --> 00:10:43.900
How many of you are using build
styles in Xcode 1.5 or 2.0 now?

00:10:44.080 --> 00:10:45.760
Okay, so you know what build styles are.

00:10:46.040 --> 00:10:47.740
That's great.

00:10:48.070 --> 00:10:52.900
Build styles are a way to
reduce target proliferation.

00:10:52.900 --> 00:10:55.630
And for that,
they actually work fairly well.

00:10:55.700 --> 00:10:57.890
Because in some other
environments like Code Warrior,

00:10:58.000 --> 00:11:00.420
you set up a target,
you include all of your

00:11:00.420 --> 00:11:02.790
files in the target,
you make all your target

00:11:02.820 --> 00:11:06.340
settings on that target,
you build it, you get a build product,

00:11:06.600 --> 00:11:07.170
that's fine.

00:11:07.170 --> 00:11:09.360
But that's just for debugging.

00:11:09.360 --> 00:11:12.770
When you need to do a release version,
or you need to do a

00:11:12.770 --> 00:11:16.480
version for beta seeding,
you need to clone that target,

00:11:16.480 --> 00:11:17.880
change the settings,
and then you can build it.

00:11:17.900 --> 00:11:20.170
And then from then on,
you need to maintain

00:11:20.170 --> 00:11:21.860
those targets in parallel.

00:11:21.860 --> 00:11:24.410
If you add a file to one target,
you need to make sure

00:11:24.410 --> 00:11:25.380
to add it to the other.

00:11:25.380 --> 00:11:30.500
If you make a change to a target setting,
you need to think, do I need to make that

00:11:30.500 --> 00:11:34.460
just to this target,
or do I need to make it to all targets?

00:11:34.540 --> 00:11:36.770
And that's a maintenance headache.

00:11:36.840 --> 00:11:41.240
Build styles help with that by
giving you a set of settings

00:11:41.350 --> 00:11:43.620
that apply across targets.

00:11:43.620 --> 00:11:46.500
They're a product of the
build style in the target.

00:11:46.500 --> 00:11:47.880
The target has its settings.

00:11:47.880 --> 00:11:51.910
The build styles have their settings,
and at build time, they're combined.

00:11:51.940 --> 00:11:56.530
But build styles are imposed on the
target rather than combined with them,

00:11:56.540 --> 00:11:59.830
and that's been counterintuitive
to a lot of you.

00:11:59.860 --> 00:12:04.030
The style settings override the
target settings rather than are

00:12:04.030 --> 00:12:06.500
inherited by the target settings.

00:12:06.500 --> 00:12:08.720
So when you're looking
at a target inspector,

00:12:08.720 --> 00:12:11.960
you don't see what you're going to
get because you don't see the build

00:12:11.960 --> 00:12:13.760
styles that are imposed on them.

00:12:13.800 --> 00:12:17.840
So because the build style settings
have obliterated the target settings,

00:12:18.010 --> 00:12:21.590
that has been confusing
to a lot of people.

00:12:21.860 --> 00:12:26.070
And that is especially true when
you have projects with cross-project

00:12:26.190 --> 00:12:28.190
references or sub-projects.

00:12:28.190 --> 00:12:32.170
Because what we do with build styles
is we take the build style from

00:12:32.170 --> 00:12:36.320
the master project and we apply
it to all of the sub-projects,

00:12:36.490 --> 00:12:39.670
regardless of what their target
settings or their own build styles are.

00:12:39.680 --> 00:12:42.800
And that means that if
you have a sub-project,

00:12:42.800 --> 00:12:46.320
that the master,
if you build the sub-project alone,

00:12:46.320 --> 00:12:48.050
it's built one way,
but if you build it as a

00:12:48.050 --> 00:12:51.410
sub-project of a master project,
it's built a different way.

00:12:51.700 --> 00:12:54.880
That's been very difficult to debug.

00:12:56.220 --> 00:13:00.020
Build configurations work differently.

00:13:00.020 --> 00:13:01.860
And this is the most important change.

00:13:01.860 --> 00:13:04.100
I'm going to spend a
lot of time on this now.

00:13:04.150 --> 00:13:07.040
Session 408 on Friday is going
to spend a lot of time on this.

00:13:07.040 --> 00:13:10.880
This is the major thing to
get in moving to Xcode 2.1.

00:13:10.880 --> 00:13:14.550
And we think that this is a very,
very positive change.

00:13:14.550 --> 00:13:18.360
But if you spend a long time wrenching
your brain into how build styles work,

00:13:18.510 --> 00:13:21.930
you're going to have to wrench
it back to build configurations.

00:13:23.040 --> 00:13:27.560
Build configurations is a matrix,
not a product of settings.

00:13:27.670 --> 00:13:34.020
Each target owns its own
settings for each configuration,

00:13:34.020 --> 00:13:35.070
and each...

00:13:35.950 --> 00:13:41.780
Target Configuration Setting Set is
independent of the others.

00:13:41.950 --> 00:13:45.820
You can make all of your
changes at the target level now.

00:13:45.850 --> 00:13:49.660
If you want to,
you can never leave the target inspector.

00:13:49.700 --> 00:13:53.290
You open the target inspector,
you see your configurations

00:13:53.290 --> 00:13:56.680
listed in the pop-up,
you make changes there, they take effect,

00:13:56.730 --> 00:13:58.400
what you see is what you get.

00:13:58.440 --> 00:14:01.330
And we think that that's
going to be very important,

00:14:01.330 --> 00:14:03.840
very intuitive, very clear at build time.

00:14:03.880 --> 00:14:08.640
So if I have three targets
in my debug configuration,

00:14:08.640 --> 00:14:12.880
each target has its own
debug configuration,

00:14:13.060 --> 00:14:16.060
each target has its own
release configuration.

00:14:16.060 --> 00:14:19.060
What's more important is when
we're dealing with sub-projects.

00:14:19.090 --> 00:14:24.900
If I have a target in my sub-project,
it has its own corresponding

00:14:25.700 --> 00:14:28.170
set of configurations.

00:14:28.960 --> 00:14:30.750
for debug and release.

00:14:30.810 --> 00:14:35.900
So when I build the parent project debug,
I tell the subprojects to build

00:14:35.900 --> 00:14:39.400
with their debug configuration,
not a set of settings

00:14:39.530 --> 00:14:41.110
that's passed down to them.

00:14:41.310 --> 00:14:44.140
It's an important distinction.

00:14:44.140 --> 00:14:47.580
If I build my subproject
in its debug mode,

00:14:47.580 --> 00:14:50.680
and then I go to the parent project
and build everything in its debug mode,

00:14:50.680 --> 00:14:52.780
I get the same thing.

00:14:52.780 --> 00:14:55.970
And that's going to be very
helpful for you in debugging.

00:14:56.590 --> 00:14:59.190
Now we put this in, we played with it,
we used it,

00:14:59.380 --> 00:15:04.780
and we realized we made it clearer,
we made it more intuitive,

00:15:04.880 --> 00:15:08.510
but there was still some power
in build styles that we really,

00:15:08.510 --> 00:15:09.640
really wanted to have.

00:15:09.700 --> 00:15:13.570
And that was the ability to
set it once and have it shared

00:15:14.150 --> 00:15:16.440
among all targets in my project.

00:15:16.500 --> 00:15:19.350
Now the way we were sharing
it before was not right,

00:15:19.390 --> 00:15:20.480
it was imposing.

00:15:20.490 --> 00:15:24.470
When all of you thought,
it was inheriting.

00:15:24.500 --> 00:15:26.500
So what did we do?

00:15:26.600 --> 00:15:32.400
We made project build configurations
that are inherited by the targets.

00:15:33.210 --> 00:15:36.500
So what if you want the same
settings across multiple projects,

00:15:36.910 --> 00:15:38.820
targets in your project?

00:15:38.820 --> 00:15:42.660
How do you make sure that if you
create a new target in your project,

00:15:42.660 --> 00:15:46.820
that it's got the right settings without
having to set it all up manually?

00:15:46.830 --> 00:15:49.770
And how do you make target
settings as concise as possible?

00:15:49.770 --> 00:15:52.940
A lot of you have complained that
you go to the target inspector,

00:15:53.030 --> 00:15:55.890
you choose show all, and it's daunting.

00:15:55.890 --> 00:15:58.270
There are hundreds of settings.

00:15:58.270 --> 00:16:01.980
How do you focus it out
to see what's different?

00:16:01.980 --> 00:16:06.780
Well, the way to do it is by putting your
common settings for your project

00:16:07.080 --> 00:16:12.450
in the project settings and have
all of your targets inherit that by

00:16:12.450 --> 00:16:15.680
default and override it if necessary.

00:16:15.740 --> 00:16:17.620
It's a very simple model.

00:16:17.620 --> 00:16:19.700
If you've done
object-oriented programming,

00:16:19.740 --> 00:16:21.460
it's dead obvious for you.

00:16:21.470 --> 00:16:23.070
It's just the right way.

00:16:23.070 --> 00:16:26.240
We've designed it the way you
thought build styles worked,

00:16:26.240 --> 00:16:28.150
and it's going to work a lot better.

00:16:30.380 --> 00:16:34.670
But we went one step further because
a lot of big organizations told us

00:16:34.810 --> 00:16:38.850
that they're used to storing their
settings in configuration files,

00:16:38.930 --> 00:16:42.170
checking them into their
source code repositories,

00:16:42.170 --> 00:16:45.910
diffing them, managing them,
using them repeatedly across

00:16:45.910 --> 00:16:49.230
multiple projects so that
when you start a new project,

00:16:49.320 --> 00:16:53.370
you just pick the configuration
file and add it to the project.

00:16:53.380 --> 00:16:57.800
And then you get all of your settings
right there rather than having to go in

00:16:57.830 --> 00:17:02.730
and check the same two dozen obscure,
confusing check boxes in every target.

00:17:02.740 --> 00:17:03.900
So we added those.

00:17:03.940 --> 00:17:07.510
A configuration file is
just a list of pairs.

00:17:07.530 --> 00:17:10.290
It's a .exe config file
that's in your project.

00:17:10.300 --> 00:17:13.270
It's a list of setting
equals value pairs.

00:17:15.310 --> 00:17:17.400
You can prototype it,
as I showed yesterday,

00:17:17.400 --> 00:17:20.700
by either cut and paste or drag
and drop right from the inspector,

00:17:20.800 --> 00:17:22.580
so you don't have to learn a new syntax.

00:17:22.600 --> 00:17:27.030
You just cut it out and paste
it in and drag and drop it.

00:17:27.260 --> 00:17:30.820
and you can share this file
among multiple configurations,

00:17:30.840 --> 00:17:34.260
among multiple targets,
and your project settings

00:17:34.570 --> 00:17:38.340
can be based on one set,
your target settings can be based

00:17:38.470 --> 00:17:42.430
on another configuration file,
and the same inheritance rules apply.

00:17:42.760 --> 00:17:45.850
We think this is going to be very,
very powerful.

00:17:48.020 --> 00:17:50.480
So, to show you those,
it's a lot to go through,

00:17:50.480 --> 00:17:53.390
but Scott Tooker is going to come up
and he's going to walk you through

00:17:53.400 --> 00:17:55.900
our new build configuration features.

00:17:56.210 --> 00:17:58.710
Thanks, Scott.

00:18:01.800 --> 00:18:04.700
So what I'm going to do is I'm just
going to do a quick walkthrough.

00:18:04.700 --> 00:18:07.220
We're going to take the project
I'm actually going to be

00:18:07.340 --> 00:18:08.900
doing a hands-on next session.

00:18:08.900 --> 00:18:11.200
We're going to take the final version
of that and just play a little

00:18:11.200 --> 00:18:12.880
bit with build configurations.

00:18:12.880 --> 00:18:16.680
So the first thing I wanted to do was
just show you the new target inspector.

00:18:16.680 --> 00:18:18.520
And it's really not all that different.

00:18:18.520 --> 00:18:21.790
The big changes we had from
2.0 is that we've added this

00:18:21.860 --> 00:18:23.280
configuration popup at the top.

00:18:23.280 --> 00:18:27.110
And you'll notice here that it has the
ability to show all configurations,

00:18:27.250 --> 00:18:30.730
which will show you basically
a combined set of the values

00:18:30.730 --> 00:18:33.140
across all your configurations.

00:18:33.140 --> 00:18:36.080
It can track the active configuration.

00:18:36.090 --> 00:18:39.020
So for example,
if I go and I change the active build

00:18:39.020 --> 00:18:44.100
configuration to testing in this case,
these values actually change.

00:18:44.800 --> 00:18:49.730
And then finally, we allow you to look at
any specific configuration,

00:18:49.740 --> 00:18:53.210
for example, debug, release.

00:18:53.870 --> 00:18:56.120
So now what I want to
do is just show you,

00:18:56.140 --> 00:18:57.400
the behavior is still the same.

00:18:57.400 --> 00:18:59.560
So for example,
if I want to set something on, let's say,

00:18:59.560 --> 00:19:02.560
the release configuration
for just this target,

00:19:02.620 --> 00:19:07.410
I can just go in.

00:19:07.410 --> 00:19:11.330
And let me search for, for example,
dead code stripping.

00:19:13.280 --> 00:19:15.200
And so what I'm going to
do here is just check this.

00:19:15.200 --> 00:19:17.280
And now what you'll notice is
I've set this on my release,

00:19:17.360 --> 00:19:20.300
but I haven't set it on testing or debug.

00:19:22.720 --> 00:19:24.940
Now, if I wanted to set this
across all configurations,

00:19:24.940 --> 00:19:27.020
I can also just easily go
up to all configurations.

00:19:27.320 --> 00:19:28.420
You'll see that it shows multiple value.

00:19:28.420 --> 00:19:29.970
I just click on this,
and now it's set across

00:19:29.990 --> 00:19:31.670
all my configurations.

00:19:31.760 --> 00:19:33.840
And so when I go look at them,
they're all there.

00:19:33.930 --> 00:19:35.080
So it's really simple.

00:19:35.130 --> 00:19:37.220
And as Chris points out,
you don't have to go

00:19:37.220 --> 00:19:38.150
any further than this.

00:19:38.230 --> 00:19:40.120
If all you want to do,
you can just set everything

00:19:40.120 --> 00:19:41.740
at the target level,
and that's fine.

00:19:42.000 --> 00:19:45.530
However, especially with projects
with lots of targets,

00:19:45.530 --> 00:19:48.240
it becomes a bit of a
maintenance headache,

00:19:48.360 --> 00:19:51.590
because, oh, did I set it in the
third of my five targets?

00:19:51.640 --> 00:19:53.880
Did I remember to --
across all 20 targets,

00:19:53.880 --> 00:19:54.880
set a given setting?

00:19:54.970 --> 00:19:57.540
Especially in the case
of things like warnings,

00:19:57.540 --> 00:20:01.420
for example, or things like dead code
stripping or debugging settings,

00:20:01.420 --> 00:20:04.860
things that tend to be the same across
all the targets in a given project,

00:20:04.860 --> 00:20:06.180
there's a much better way.

00:20:06.240 --> 00:20:08.760
And that's the project
build configurations.

00:20:08.780 --> 00:20:10.760
So let's go ahead.

00:20:13.230 --> 00:20:15.980
I'll bring that up.

00:20:15.980 --> 00:20:18.540
Now,
one of the things we get a lot is this

00:20:18.540 --> 00:20:21.950
looks very similar to the build styles.

00:20:22.600 --> 00:20:24.970
Unfortunately, yes, it does.

00:20:24.980 --> 00:20:26.910
But it's -- I can't say this enough.

00:20:26.910 --> 00:20:28.210
It's very different.

00:20:28.270 --> 00:20:29.860
We do not have build styles anymore.

00:20:29.860 --> 00:20:32.450
Project build settings are a
completely different beast.

00:20:32.450 --> 00:20:35.480
For one thing, as Chris said,
they live underneath.

00:20:35.530 --> 00:20:40.970
And also, they don't -- they only
apply to your project.

00:20:41.050 --> 00:20:42.870
They don't apply to subprojects.

00:20:43.000 --> 00:20:45.810
But, for example, here,
let's say I wanted to take

00:20:45.870 --> 00:20:50.320
dead code stripping and make
it a project level setting.

00:20:50.350 --> 00:20:52.080
Well, what I can do here is say,
you know what?

00:20:52.100 --> 00:20:54.640
Let me go ahead and cut this out here.

00:20:54.800 --> 00:21:00.200
And let's go over here into
my release and paste it there.

00:21:00.200 --> 00:21:00.200
Oops.

00:21:03.600 --> 00:21:16.400
[Transcript missing]

00:21:16.960 --> 00:21:19.900
You'll notice that it also
has dead code stripping set.

00:21:20.060 --> 00:21:22.620
And when I go through and I uncheck it,

00:21:22.660 --> 00:21:23.710
It goes away in both.

00:21:23.870 --> 00:21:24.800
So it's really easy.

00:21:24.800 --> 00:21:27.230
Now you have one place to set
those things like warnings,

00:21:27.290 --> 00:21:29.500
debug levels,
things that you're going to set once.

00:21:29.500 --> 00:21:32.060
And you want to have the same
thing for all your targets.

00:21:32.190 --> 00:21:33.650
Well, that's great.

00:21:33.840 --> 00:21:37.940
But what about those cases where
maybe not across all your targets,

00:21:37.940 --> 00:21:41.350
but all your release applications,
for example, you want to have a

00:21:41.350 --> 00:21:43.100
common set of settings?

00:21:43.190 --> 00:21:45.580
Let's say I wanted to
set dead code stripping,

00:21:45.640 --> 00:21:49.610
and don't strip init's and terms,
in just my release-- in

00:21:49.610 --> 00:21:52.150
my release applications,
but not necessarily and they

00:21:52.200 --> 00:21:54.020
were released libraries.

00:21:54.470 --> 00:21:56.280
Well, let's go ahead and click those.

00:21:56.340 --> 00:21:58.960
What we can do, I can set it here,
but then I have to remember to

00:21:58.960 --> 00:22:00.940
do that across all my projects.

00:22:01.000 --> 00:22:03.920
And if I ever want to change
what my release app is,

00:22:03.920 --> 00:22:05.190
that becomes a headache.

00:22:05.380 --> 00:22:08.990
Well, instead what I can do
is I can just go ahead

00:22:10.060 --> 00:22:14.560
I'm going to create a
configuration settings file.

00:22:14.560 --> 00:22:22.150
Let's just call it release app settings.

00:22:26.970 --> 00:22:29.780
And so for example,
this brings up a new XC config file,

00:22:29.780 --> 00:22:31.520
which is our configuration file.

00:22:31.930 --> 00:22:34.660
And I can just simply come over here.

00:22:34.700 --> 00:22:39.890
I will go ahead and cut the settings,
paste them over here.

00:22:40.800 --> 00:22:52.600
[Transcript missing]

00:22:52.870 --> 00:22:56.290
make a change,
and it's instantly picked up.

00:22:56.400 --> 00:22:58.720
This is extremely powerful,
especially for those of you

00:22:58.720 --> 00:23:01.470
that have lots of projects,
lots of sub-projects,

00:23:01.540 --> 00:23:05.010
but you have standard policies about
how you want to package your debug,

00:23:05.180 --> 00:23:07.580
your apps you give to testers,
your release.

00:23:07.710 --> 00:23:14.580
Before Xcode 2.1, you could at best put
things in build settings.

00:23:14.580 --> 00:23:17.450
Now we have a lot of flexibility
in this area to allow you to

00:23:17.450 --> 00:23:20.600
set things at the project level,
and also outside in these XC config

00:23:20.600 --> 00:23:23.220
files that you can easily check in.

00:23:23.300 --> 00:23:25.670
And with that,
I'll give it back to Chris.

00:23:25.850 --> 00:23:27.740
CHRIS BANES: Thanks, Scott.

00:23:34.900 --> 00:24:21.800
[Transcript missing]

00:24:22.090 --> 00:24:26.990
If you want to standardize on a style
of debugging or a style of release,

00:24:27.100 --> 00:24:31.210
if your company says that when
you release code you must strip

00:24:31.260 --> 00:24:34.880
the symbols or you must put in
these kinds of version strings,

00:24:35.160 --> 00:24:38.020
things like that,
you can put that in the project

00:24:38.020 --> 00:24:40.300
settings per configuration.

00:24:41.220 --> 00:24:44.470
If you want to characterize what
a particular target is like,

00:24:44.480 --> 00:24:47.940
this shared library is this way,
this application is this way,

00:24:47.940 --> 00:24:50.890
this tool is this way,

00:24:51.400 --> 00:24:55.880
And you're going to have multiple
ones of those that are the same.

00:24:55.890 --> 00:24:58.920
If you have a lot of similar tools,
a lot of similar plugins,

00:24:58.940 --> 00:25:02.510
you can put them in a configuration
file that is shared among

00:25:02.890 --> 00:25:05.470
all targets of that type.

00:25:06.210 --> 00:25:08.870
And if you want to distinguish
among the debug and release

00:25:08.970 --> 00:25:12.890
flavors of a particular target,
then you can put them in the

00:25:12.890 --> 00:25:15.200
target inspector for that target.

00:25:15.290 --> 00:25:18.360
It will inherit everything
from the project config files,

00:25:18.440 --> 00:25:22.380
from the project settings,
and from the target config file,

00:25:22.380 --> 00:25:25.740
and then you can
specialize on top of that.

00:25:26.110 --> 00:25:28.190
And then finally,
if you want a special case,

00:25:28.240 --> 00:25:34.450
if a single file in a single target for a
single configuration has to be built with

00:25:34.450 --> 00:25:39.650
a special optimization flag or a pragma
or some sort of compiler-specific things,

00:25:39.650 --> 00:25:42.010
there are always per-file settings
that you can go in and for a

00:25:42.010 --> 00:25:43.540
special case you can override them.

00:25:43.620 --> 00:25:48.760
So there's a nice,
clean stack of inheritance all the way

00:25:48.940 --> 00:25:54.790
up from my company standards to the
way this one file needs to be compiled.

00:25:55.700 --> 00:26:00.840
We also have taken your feedback
and we have changed the way

00:26:00.840 --> 00:26:05.830
that our build folders work,
so that the build folders for both

00:26:06.010 --> 00:26:11.480
the intermediates and for the build
products are segregated by configuration.

00:26:11.630 --> 00:26:15.530
So that if you're building
your debug build and you switch

00:26:15.530 --> 00:26:20.060
over to release to build it,
and then go back to your debug build,

00:26:20.060 --> 00:26:24.650
you don't have to rebuild
your debug build from scratch.

00:26:28.910 --> 00:26:32.290
You can also have your debug
product and your release

00:26:32.450 --> 00:26:36.090
product have different names,
or be in different places,

00:26:36.160 --> 00:26:38.940
because you can have those are in
the per configuration settings.

00:26:39.490 --> 00:26:45.340
This is a pretty big change,
and if you have complicated scripts,

00:26:45.500 --> 00:26:48.940
if you have post-processing scripts,
if you have workflow processes

00:26:49.050 --> 00:26:54.530
that depend upon your build product
being in a certain location,

00:26:54.540 --> 00:26:57.730
it will now be in a
folder in that location,

00:26:57.730 --> 00:27:00.200
and you may need to adapt those.

00:27:00.340 --> 00:27:04.910
We do provide some build settings
that tell you exactly where it is.

00:27:05.320 --> 00:27:09.040
Anders Bertelrud will go over that
in the project management mastery

00:27:09.040 --> 00:27:10.930
session on Friday afternoon.

00:27:11.000 --> 00:27:15.480
They're also mentioned in the
build setting notes in Xcode 2.1.

00:27:15.480 --> 00:27:18.250
For most of you, though,
this will be a change

00:27:18.340 --> 00:27:19.830
to be more intuitive.

00:27:19.930 --> 00:27:22.310
If I build my debug
and I build my release,

00:27:22.570 --> 00:27:24.140
now I have two instead of one.

00:27:24.280 --> 00:27:25.280
Thank you.

00:27:29.180 --> 00:27:31.780
So let's sum up build configuration.

00:27:31.820 --> 00:27:34.520
It's the biggest change in Xcode 2.1.

00:27:34.520 --> 00:27:36.970
It is, I think,
the best example we have of

00:27:37.100 --> 00:27:40.300
our attempting to balance
simplicity and clarity

00:27:41.950 --> 00:27:44.940
Power and versatility
for what you need to do,

00:27:44.940 --> 00:27:48.530
and also backwards compatibility
so that you don't have to make

00:27:48.590 --> 00:27:50.940
major transitions with your code.

00:27:50.980 --> 00:27:54.220
We have eliminated the number one
frustration about build settings is,

00:27:54.220 --> 00:27:57.000
"Why can't I see this in the
target inspector and set it

00:27:57.050 --> 00:27:59.020
here?" No more strikeout type.

00:27:59.020 --> 00:28:01.350
It's been removed from the product.

00:28:01.590 --> 00:28:04.710
They have a more intuitive
inheritance from the project

00:28:04.760 --> 00:28:07.770
level to the target level,
so you can have the power of

00:28:07.770 --> 00:28:11.230
generalization and specialization
without the confusion of where

00:28:11.480 --> 00:28:12.890
is that actually being set.

00:28:12.960 --> 00:28:17.330
They do the right thing with subprojects,
it's what you expect,

00:28:17.330 --> 00:28:21.830
that when you build a subproject
in its debug configuration it will

00:28:21.830 --> 00:28:25.250
build with its debug settings,
not its parent project's debug settings.

00:28:25.260 --> 00:28:30.040
And the project configurations and
the configuration files give you

00:28:30.110 --> 00:28:34.860
an expressive power that I don't
think you've seen before in any

00:28:34.860 --> 00:28:36.130
Apple development environment.

00:28:36.150 --> 00:28:38.870
I think it's really going to help you.

00:28:39.770 --> 00:28:43.680
The main thing though is that all
of these were put into this version

00:28:43.700 --> 00:28:47.240
at this time so that you could set
the right settings on the right

00:28:47.370 --> 00:28:51.700
configurations on the right targets
to help you build universal binaries.

00:28:51.700 --> 00:28:54.970
You're going to really use,
you're going to set the settings

00:28:54.970 --> 00:28:58.630
for universal architectures,
the settings for per architecture

00:28:58.700 --> 00:29:01.620
settings in your configurations,
in your target, or in your projects.

00:29:01.700 --> 00:29:04.210
That's where you're going to do it.

00:29:04.950 --> 00:29:06.960
So that's configurations.

00:29:06.960 --> 00:29:09.910
The next main thing we've put in that
I think is really going to affect

00:29:10.020 --> 00:29:12.600
your working style is breakpoints.

00:29:12.610 --> 00:29:15.570
Now a lot of this is old news to you
if you've been using other environments

00:29:16.110 --> 00:29:21.300
where you've had conditional breakpoints
and watchpoints and continuation

00:29:21.300 --> 00:29:25.200
and other styles of breakpoints and
breakpoint actions for quite a while.

00:29:25.200 --> 00:29:26.600
We have conditions.

00:29:26.600 --> 00:29:29.800
If you've used conditional
breakpoints in other environments

00:29:29.890 --> 00:29:32.740
or at the GDB command line,
they'll probably be

00:29:32.740 --> 00:29:34.600
utterly familiar to you.

00:29:34.600 --> 00:29:36.100
We have breakpoint actions.

00:29:36.100 --> 00:29:40.300
You have seen these in code where
you can log something when you hit

00:29:40.300 --> 00:29:44.220
a breakpoint rather than stopping.

00:29:44.460 --> 00:29:48.420
If you do printf style debugging,
you will love logging breakpoints

00:29:48.470 --> 00:29:53.200
because logging breakpoints are
printfs you don't have to compile.

00:29:53.270 --> 00:29:55.580
It's really great.

00:29:58.900 --> 00:30:01.440
The visualization you saw
a little bit of yesterday,

00:30:01.630 --> 00:30:07.210
it's a way to see where you are in a
bird's eye view of your application,

00:30:07.210 --> 00:30:12.680
rather than just having to look at a
stack crawl and see where you are there.

00:30:12.950 --> 00:30:17.100
Continuing after pause lets you set a
large number of breakpoints and watch

00:30:17.170 --> 00:30:22.640
your program flow without having to click
the continue button over and over again.

00:30:22.760 --> 00:30:27.560
And then watchpoints watch
the value of a local variable.

00:30:27.670 --> 00:30:29.450
So let's go through those one by one.

00:30:29.550 --> 00:30:30.260
Conditions.

00:30:30.510 --> 00:30:31.760
Pretty easy to set.

00:30:31.850 --> 00:30:35.660
When you hit a breakpoint,
it shows in the pop-- in the

00:30:35.670 --> 00:30:39.560
tooltip what the condition
is and what the situation is.

00:30:39.660 --> 00:30:42.110
You can go to the--

00:30:42.260 --> 00:30:46.300
So right here I've set a
breakpoint on this line,

00:30:46.300 --> 00:30:49.990
and I only break when the answer
is above a certain threshold.

00:30:50.020 --> 00:30:52.670
So if you're trying to
break in an iterative loop,

00:30:52.900 --> 00:30:54.820
and you don't want to
have to step every time,

00:30:54.940 --> 00:30:56.500
you can just set a
conditional breakpoint,

00:30:56.500 --> 00:30:59.330
and it will only stop at
that particular condition.

00:30:59.380 --> 00:31:04.010
The conditions can be
any valid expression.

00:31:04.010 --> 00:31:07.220
You can evaluate things,
you can even make function calls

00:31:07.220 --> 00:31:08.870
or method calls in the conditions.

00:31:08.900 --> 00:31:12.280
We warn you though,
make them as simple as possible,

00:31:12.680 --> 00:31:16.900
make them have no side effects,
and make them really reliable so they

00:31:16.900 --> 00:31:19.780
don't crash or stop your machine.

00:31:19.780 --> 00:31:25.160
Because those are going to be evaluated
every time you pass that breakpoint,

00:31:25.390 --> 00:31:30.770
and it could severely affect
performance or even the behavior of

00:31:30.770 --> 00:31:35.100
your application if you do untoward
things in your breakpoint condition.

00:31:35.140 --> 00:31:37.860
Also,
remember that you are in the debugger.

00:31:37.860 --> 00:31:38.750
You're not in the compiler.

00:31:38.850 --> 00:31:41.530
So you don't have full
access to everything you can

00:31:41.530 --> 00:31:43.140
type in your source code.

00:31:43.140 --> 00:31:45.370
You don't have a preprocessor available.

00:31:45.380 --> 00:31:51.780
So it just has to be a condition
that can be understood at runtime.

00:31:52.920 --> 00:31:54.140
Breakpoint actions.

00:31:54.140 --> 00:31:58.610
Once you have a breakpoint,
you have a number of actions

00:31:58.680 --> 00:31:59.860
that you can perform.

00:32:03.320 --> 00:32:06.300
And you can perform more
than one action in sequence.

00:32:06.380 --> 00:32:08.440
It looks kind of like
the Automator interface.

00:32:08.600 --> 00:32:11.400
You can log and optionally
speak a message,

00:32:11.410 --> 00:32:14.790
and there are a couple of
value substitutions that we

00:32:14.790 --> 00:32:17.890
can put in the log message,
including the hit count

00:32:18.190 --> 00:32:19.720
of that breakpoint.

00:32:19.720 --> 00:32:23.510
You can play a specified sound,
anything in your sound files.

00:32:23.720 --> 00:32:27.480
You can visualize the current
class and method in that

00:32:27.480 --> 00:32:30.500
class in the class diagram,
either one you've prepared

00:32:30.500 --> 00:32:33.900
already or one that's dynamically
created by the visualizer.

00:32:33.900 --> 00:32:36.390
You can execute any shell command.

00:32:36.400 --> 00:32:39.090
So that's very powerful.

00:32:39.090 --> 00:32:42.190
You can go in and use anything at
the Unix shell at breakpoint time.

00:32:42.200 --> 00:32:45.100
You can execute any Apple script.

00:32:45.300 --> 00:32:48.980
One of the things I did for a demo
right here was to go into the Unix

00:32:48.980 --> 00:32:49.240
shell and execute a shell command.

00:32:49.240 --> 00:32:49.240
So that's very powerful.

00:32:49.240 --> 00:32:49.240
You can go in and use anything at
the Unix shell at breakpoint time.

00:32:49.240 --> 00:32:49.240
You can execute any Apple script.

00:32:49.240 --> 00:32:49.240
One of the things I did for a demo
right here was to go into the Unix

00:32:49.240 --> 00:32:49.240
shell and execute a shell command.

00:32:49.240 --> 00:32:49.240
So that's very powerful.

00:32:49.240 --> 00:32:49.240
You can go in and use anything at
the Unix shell at breakpoint time.

00:32:49.440 --> 00:32:54.110
was to set my iChat status
message when I hit a breakpoint.

00:32:54.140 --> 00:32:59.280
So if I've got something that needs
to run for four or five hours,

00:32:59.320 --> 00:33:02.220
and then it hits an error condition,
and I put a breakpoint

00:33:02.340 --> 00:33:05.560
on that error condition,
I can set it up on a remote machine,

00:33:05.690 --> 00:33:08.380
log it into my iChat account,
and then just watch it in

00:33:08.400 --> 00:33:10.700
my iChat status window,
and when its status changes,

00:33:10.700 --> 00:33:13.590
I know it's hit its breakpoint,
and I can go off to the

00:33:13.590 --> 00:33:15.000
lab and figure it out.

00:33:18.810 --> 00:33:21.200
And of course,
since GDB is our underlying debugger,

00:33:21.200 --> 00:33:24.940
you can execute any
GDB command at breakpoint time.

00:33:25.030 --> 00:33:27.880
And that applies to
remote debugging as well.

00:33:28.170 --> 00:33:32.670
The GDB command will be executed in
the inferior on the remote machine

00:33:32.680 --> 00:33:34.630
rather than on your local machine.

00:33:34.740 --> 00:33:38.230
That's pretty important if you're
doing two-machine debugging from a

00:33:38.320 --> 00:33:42.120
PowerPC machine to an Intel machine,
for example.

00:33:43.330 --> 00:33:46.900
The visualizer is, I think,
the neatest part of it.

00:33:47.020 --> 00:33:50.200
We've just begun to scratch the
surface on what you can do with this.

00:33:50.200 --> 00:33:56.210
It shows the method highlighted
in the class of where you are

00:33:56.210 --> 00:33:58.010
when you hit the breakpoint.

00:33:58.190 --> 00:34:00.730
So if you're watching
the flow of control,

00:34:00.730 --> 00:34:04.690
if you want to see whether, for example,
you're doing something

00:34:05.080 --> 00:34:08.380
four or five times,
or where something's getting called from,

00:34:08.380 --> 00:34:13.680
or how the flow of control is happening,
it can show you that in a dynamic way.

00:34:13.680 --> 00:34:16.220
It is only for object-oriented code.

00:34:16.220 --> 00:34:19.140
It doesn't show you your
path through C code.

00:34:19.140 --> 00:34:22.970
And it does show only your
class inheritance hierarchy.

00:34:22.980 --> 00:34:24.440
It doesn't show your instances.

00:34:24.440 --> 00:34:27.960
We're going to be moving this
technology forward and doing

00:34:28.020 --> 00:34:28.020
everything we can to make it work.

00:34:28.070 --> 00:34:30.070
We're going to be doing other
things with it in the future.

00:34:30.310 --> 00:34:34.090
So consider this just a first
taste of what we intend to

00:34:34.100 --> 00:34:35.960
do with visual debugging.

00:34:37.050 --> 00:34:37.800
Watchpoints.

00:34:37.800 --> 00:34:42.340
We use the GDB Watchpoint feature
that's been in Mac OS X forever.

00:34:42.340 --> 00:34:46.590
We've improved its robustness
and reliability a good bit,

00:34:46.590 --> 00:34:48.860
and we've made it accessible
through the user interface.

00:34:48.860 --> 00:34:51.360
If you're familiar with
Code Warriors Watchpoints,

00:34:51.360 --> 00:34:52.530
it works the same way.

00:34:52.540 --> 00:34:55.060
You stop in the debugger,
you select a variable,

00:34:55.060 --> 00:34:59.060
you command-click it and pick
watch from the context menu.

00:34:59.060 --> 00:35:01.510
It's just that simple.

00:35:01.510 --> 00:35:07.060
And then it will break
whenever that value is changed.

00:35:07.060 --> 00:35:07.580
Now there are a couple
of caveats for that.

00:35:07.580 --> 00:35:11.060
It uses the hardware paging
system to watch changes.

00:35:11.060 --> 00:35:15.350
Since we don't want to impede,
so that impairs performance a little bit,

00:35:15.450 --> 00:35:19.060
and it also is not good for
variables that are on the stack.

00:35:19.060 --> 00:35:22.660
So you really can't use Watchpoints
to watch locals or registers,

00:35:22.660 --> 00:35:24.950
but you can use them
to watch anything that,

00:35:25.130 --> 00:35:27.040
for example, you've malloc'd.

00:35:27.110 --> 00:35:29.050
That's really useful.

00:35:29.350 --> 00:35:33.040
This is considered
something of last resort.

00:35:33.070 --> 00:35:37.060
If somebody is changing a value
and you don't know who it is,

00:35:37.060 --> 00:35:39.060
this is the best way to do it.

00:35:39.060 --> 00:35:45.470
But it's only when tracing
program flow has failed.

00:35:48.090 --> 00:35:53.100
So breakpoints,
much more like what you're used to.

00:35:53.410 --> 00:35:55.680
Some might consider
this Xcode catching up.

00:35:55.690 --> 00:35:59.240
I'm not unproud of that.

00:35:59.240 --> 00:36:02.150
We have a lot of catching up to do
with some environments that have

00:36:02.150 --> 00:36:04.040
been in the market for a longer time.

00:36:04.260 --> 00:36:08.190
But we do need to provide you this
capability so you can be more productive.

00:36:08.250 --> 00:36:10.560
And we're also intending
to not just catch up,

00:36:10.580 --> 00:36:15.510
but go beyond with more of the breakpoint
actions and with the visualizer.

00:36:16.580 --> 00:36:18.940
So let's talk about the third thing,
which is unit testing.

00:36:19.040 --> 00:36:23.980
How many of you are using a unit
testing discipline in your development?

00:36:24.480 --> 00:36:26.690
That is a surprisingly good number.

00:36:27.020 --> 00:36:28.060
That's great.

00:36:28.210 --> 00:36:33.450
Well, what we've done is we have taken
some of the industry standard open

00:36:33.500 --> 00:36:38.030
source unit testing frameworks and
we've integrated them into the Xcode

00:36:38.140 --> 00:36:44.360
build environment so you can create
a new testing target in any project,

00:36:44.460 --> 00:36:49.070
populate it with test cases,
and those test cases will be

00:36:49.120 --> 00:36:53.970
executed against your project
and targets in it at build time.

00:36:54.040 --> 00:37:00.010
And the results will be reported in your
errors and warnings window at build time.

00:37:00.010 --> 00:37:03.670
It's seamless, it's automatic,
and it really helps you

00:37:03.670 --> 00:37:07.340
integrate unit testing,
the unit testing discipline,

00:37:07.340 --> 00:37:09.740
right into your current projects.

00:37:09.840 --> 00:37:11.750
It's an opt-in model of testing.

00:37:11.850 --> 00:37:15.520
We don't force you to write test
cases before you can compile.

00:37:15.520 --> 00:37:18.770
You can start by doing
your project normally,

00:37:19.200 --> 00:37:23.300
then you can add the unit test
target and one or two tests and you

00:37:23.300 --> 00:37:25.910
can... beef up those tests over time.

00:37:25.990 --> 00:37:28.210
We don't force you to
have tests for everything.

00:37:28.320 --> 00:37:31.890
You get to add tests just
as you want to add tests.

00:37:32.200 --> 00:37:33.840
This is hard to describe in words.

00:37:34.020 --> 00:37:37.680
The best way to do it is a demo,
so Chris Hanson will come up and demo

00:37:37.690 --> 00:37:40.010
the unit testing feature for you.

00:37:43.310 --> 00:37:44.300
Thank you, Chris.

00:37:44.300 --> 00:37:48.080
Let me just close everything up here.

00:37:49.750 --> 00:37:52.560
And switch to my favorite
layout for Xcode,

00:37:52.800 --> 00:37:55.770
which is the default layout.

00:37:56.780 --> 00:38:01.700
What I have here is just a simple
project temperature converter that

00:38:01.700 --> 00:38:03.050
I've added some unit tests to.

00:38:03.060 --> 00:38:06.100
And I've also introduced
a couple of subtle errors,

00:38:06.180 --> 00:38:11.340
so we can see just how unit testing
and our other error reporting

00:38:11.340 --> 00:38:14.060
mechanisms are integrated in Xcode 2.1.

00:38:14.060 --> 00:38:18.020
So, first thing I'm going to do is
just try to build my project.

00:38:18.060 --> 00:38:23.060
You'll see that I'm not actually building
the temperature converter application,

00:38:23.060 --> 00:38:26.060
instead I'm building the
temperature converter test's target.

00:38:26.080 --> 00:38:28.970
This is a bundle containing
all of my test cases,

00:38:28.970 --> 00:38:30.980
separate from my application.

00:38:31.060 --> 00:38:34.060
As part of the build
process for this bundle,

00:38:34.060 --> 00:38:39.070
we'll actually launch the application,
inject our tests into it,

00:38:39.310 --> 00:38:42.050
and run all the tests,
and then report the results.

00:38:42.260 --> 00:38:44.560
So let's try building this.

00:38:52.300 --> 00:38:55.210
Well, we're precompiling,
we're compiling, and we get an error.

00:38:55.490 --> 00:38:57.760
So,
I'll bring up the build results window,

00:38:57.760 --> 00:38:59.740
and we can see what that error was.

00:38:59.750 --> 00:39:03.740
Well, we have a parse error here,
and it looks like we left out a colon.

00:39:03.750 --> 00:39:06.480
This is coming from the compiler,
obviously.

00:39:06.500 --> 00:39:10.620
So let's just fix this and rebuild.

00:39:10.640 --> 00:39:13.260
Saving before building, of course.

00:39:13.270 --> 00:39:14.280
And now we link.

00:39:14.280 --> 00:39:16.680
Now we're building our tests.

00:39:26.110 --> 00:39:32.690
We're running our tests.

00:39:32.690 --> 00:39:35.720
And somehow, ah, here we go.

00:39:35.720 --> 00:39:36.980
We got an error.

00:39:36.980 --> 00:39:39.360
So we have another error in our code.

00:39:39.360 --> 00:39:41.570
Now,
if we click on this test failure here,

00:39:41.620 --> 00:39:43.980
which shows up right in
our build results window,

00:39:44.030 --> 00:39:47.100
it takes us to the exact
line of code that failed.

00:39:47.100 --> 00:39:51.460
Now, here we have an assertion
that two values are equal.

00:39:51.460 --> 00:39:53.290
So we have one value here.

00:39:53.570 --> 00:39:57.480
Why don't I double click this,
and I'll bring up the actual

00:39:57.620 --> 00:39:59.510
source code for our test.

00:39:59.560 --> 00:40:02.330
You can see that we're just iterating
over a collection of conversions.

00:40:04.130 --> 00:40:08.610
And we're performing conversion
using our value transformer,

00:40:08.610 --> 00:40:10.980
and we're comparing it
to a known good value.

00:40:11.020 --> 00:40:13.100
And we can see that one of those failed.

00:40:13.160 --> 00:40:15.210
And if we look in our
build results window,

00:40:15.370 --> 00:40:19.840
since I can use a format
string in my assertion,

00:40:20.370 --> 00:40:22.950
I can even tell which iteration failed.

00:40:23.040 --> 00:40:27.980
So what I'm going to do is set
a breakpoint on this line by

00:40:27.980 --> 00:40:34.250
control-clicking in the margin and
choosing Add and Edit Breakpoint.

00:40:34.960 --> 00:40:36.980
And then,
since I don't want to sit there and

00:40:37.220 --> 00:40:41.330
step through four iterations of my loop,
I'm just going to put in

00:40:41.330 --> 00:40:42.850
the condition that failed.

00:40:42.970 --> 00:40:46.800
So that was iteration three.

00:40:48.030 --> 00:40:53.400
And now,
if we go back to our build results,

00:40:55.390 --> 00:40:57.540
We can see that even
though we had an error,

00:40:57.580 --> 00:40:59.300
our build succeeded.

00:40:59.350 --> 00:41:03.140
This is because we actually did
build the products that we wanted to.

00:41:03.400 --> 00:41:05.500
It's just running our tests that failed.

00:41:05.590 --> 00:41:09.440
This means that we do have products
available that we can debug.

00:41:09.540 --> 00:41:15.600
So let's debug right into our unit tests.

00:41:15.650 --> 00:41:18.080
We'll load our program in GDB.

00:41:26.410 --> 00:41:27.700
Our assertion.

00:41:27.740 --> 00:41:31.910
And we can even see that our
condition is i equals 3 if

00:41:31.920 --> 00:41:34.170
I hover over the breakpoint.

00:41:35.330 --> 00:41:37.760
It says what our condition is.

00:41:37.760 --> 00:41:41.040
So let's just step into this code,
and we're in our

00:41:41.040 --> 00:41:43.800
transformed value method.

00:41:43.800 --> 00:41:47.400
So let's just step a couple lines
and see if anything looks suspicious.

00:41:47.440 --> 00:41:49.300
Let's step over here.

00:41:49.380 --> 00:41:50.540
That looks fine.

00:41:50.880 --> 00:41:52.310
That looks fine.

00:41:52.490 --> 00:41:53.700
That looks fine.

00:41:53.860 --> 00:41:55.370
But what's this?

00:41:55.480 --> 00:41:58.680
We're assigning an integer value.

00:41:59.770 --> 00:42:02.460
to a double variable.

00:42:02.520 --> 00:42:04.780
What happens if we do this?

00:42:04.790 --> 00:42:06.860
Well, it says that--

00:42:07.260 --> 00:42:14.240
Our centigrade interim value is -273,
rather than -273.15.

00:42:14.360 --> 00:42:16.230
So that's probably where our error is.

00:42:16.340 --> 00:42:20.570
Let's terminate, change our code.

00:42:22.550 --> 00:42:25.850
And let's just go back to
the build window where we

00:42:25.890 --> 00:42:28.790
can build and build again.

00:42:29.630 --> 00:42:31.500
And this time, it succeeded.

00:42:31.500 --> 00:42:33.800
Bring up our build results.

00:42:33.800 --> 00:42:35.500
We have no errors.

00:42:35.500 --> 00:42:37.430
So we fixed our bug.

00:42:38.100 --> 00:42:43.230
That shows you how Xcode's integrated
unit testing really is integrated

00:42:43.400 --> 00:42:45.340
into your development workflow.

00:42:45.540 --> 00:42:47.210
Back to Chris.

00:42:53.500 --> 00:42:57.790
You're going to see a lot more on unit
testing a couple more times this week.

00:42:57.930 --> 00:43:03.110
Come to Power Programming in Xcode,
which has been moved from Tuesday evening

00:43:03.180 --> 00:43:06.730
to Wednesday evening to accommodate
the porting lab tomorrow night.

00:43:06.870 --> 00:43:11.670
And Chris will give a longer demo and
more complete explanation of how to

00:43:11.670 --> 00:43:14.480
set up unit tests in your application.

00:43:14.560 --> 00:43:19.020
Unit tests are a great development
methodology and they're supported

00:43:19.410 --> 00:43:22.860
in Xcode 2.1 in the build system,
in the wizards,

00:43:23.030 --> 00:43:27.120
makes it really easy to integrate
testing into your software.

00:43:27.120 --> 00:43:32.370
Final major feature I want to cover
is project file format changes.

00:43:33.410 --> 00:43:38.470
The main things we've done are to improve
readability by adding comments in the

00:43:38.580 --> 00:43:42.120
project file that tell you what's what,
rather than having to grope your

00:43:42.150 --> 00:43:44.220
way around long hexadecimal UUIDs.

00:43:44.300 --> 00:43:47.300
We've added mergeability.

00:43:47.300 --> 00:43:51.240
We have taken things that are atomic,
like file references,

00:43:51.310 --> 00:43:53.300
and put them all on one line.

00:43:53.440 --> 00:43:57.660
So line-based differs and line-based
mergers and line-based comparison

00:43:57.660 --> 00:44:02.300
routines can tell this whole file was
added or this whole file was removed.

00:44:02.300 --> 00:44:07.300
Rather than by saying, "Oh,
these two files, they look mostly alike,

00:44:07.300 --> 00:44:09.300
but they're only
different in this respect,

00:44:09.330 --> 00:44:11.300
so that's the only difference." Well,
that's inaccurate.

00:44:11.300 --> 00:44:15.280
So by combining things on one line,
we've made merging project files

00:44:15.600 --> 00:44:19.300
work better with line-based
diff and merge algorithms.

00:44:19.720 --> 00:44:23.070
Similarly, things that are discrete,
like project settings,

00:44:23.070 --> 00:44:26.300
we have busted out from single
lines to multiple lines.

00:44:26.300 --> 00:44:31.300
So if you change one target setting
in your version of the project,

00:44:31.300 --> 00:44:35.300
and she changes a different project
setting in her version of the project,

00:44:35.300 --> 00:44:38.410
that a line-based merger
can merge those together,

00:44:38.410 --> 00:44:41.770
rather than saying, "Oh,
this whole line has

00:44:41.770 --> 00:44:43.300
changed in both places.

00:44:43.320 --> 00:44:44.300
There's a conflict.

00:44:44.300 --> 00:44:47.300
I don't know what to do," and make
you grope through it manually.

00:44:47.310 --> 00:44:49.230
And then writeability.

00:44:49.340 --> 00:44:52.290
We have improved the ability to
machine-generate project files.

00:44:52.300 --> 00:44:57.970
The UUIDs that are there for Xcode's
internal cross-references are optional,

00:44:58.380 --> 00:45:00.300
so you don't have to generate them.

00:45:00.300 --> 00:45:03.250
And the project file format
is complete and definitive.

00:45:03.360 --> 00:45:08.710
It's not like an XML import/export
format that has a difference in

00:45:08.710 --> 00:45:11.300
fidelity from what the real thing is.

00:45:11.300 --> 00:45:16.240
The project model in memory
is the project file on disk.

00:45:16.300 --> 00:45:22.460
So if you can generate a project
file through mechanical means,

00:45:22.460 --> 00:45:26.670
when you read it into Xcode,
that generates an identical project and

00:45:26.770 --> 00:45:29.300
will save the identical project file.

00:45:29.300 --> 00:45:32.380
We think this is really going to be
a help in big organizations where

00:45:32.480 --> 00:45:36.390
you have to machine-generate a lot of
identical project files for plugins,

00:45:36.400 --> 00:45:39.300
for standards, things like that.

00:45:39.300 --> 00:45:41.300
We're going to continue to refine this.

00:45:41.300 --> 00:45:45.300
We reserve the right to completely
change the project file in the future.

00:45:45.300 --> 00:45:48.260
But for now,
to get your big projects up on Xcode,

00:45:48.320 --> 00:45:50.300
we think these changes are
really going to help you.

00:45:50.510 --> 00:45:53.260
When you look at the project file,
it's still somewhat cryptic.

00:45:53.300 --> 00:45:56.900
It's still got a lot of stuff in it,
but it does look like an old-style

00:45:57.070 --> 00:46:00.090
plist with comments in it,
in it, and it should be a lot easier

00:46:00.090 --> 00:46:02.540
to pick things out now.

00:46:05.030 --> 00:46:09.340
OK,
so those are the big hits in Xcode 2.1,

00:46:09.590 --> 00:46:14.440
the configurations, the breakpoints,
the unit testing,

00:46:14.460 --> 00:46:15.940
and the project file change.

00:46:16.020 --> 00:46:18.020
But like I said at the beginning,
there are a lot of

00:46:18.020 --> 00:46:19.140
little things we've done,
too.

00:46:19.320 --> 00:46:22.320
We think these are really going
to improve your productivity.

00:46:22.460 --> 00:46:25.110
In the user interface,
we've added an unlock file

00:46:25.110 --> 00:46:28.480
widget right to the file editor.

00:46:28.700 --> 00:46:32.210
So if you open up and edit locked
files and you want to save them,

00:46:32.420 --> 00:46:34.200
you can unlock them
right from the editor.

00:46:34.470 --> 00:46:37.430
Small things,
we know that bbedit had this

00:46:37.530 --> 00:46:42.370
when I was in short pants,
but now it's there in Xcode.

00:46:44.690 --> 00:46:46.920
We've added the touch feature to Xcode.

00:46:46.980 --> 00:46:51.020
When you click in the build column,
it marks the file as

00:46:51.020 --> 00:46:52.290
touched or untouched.

00:46:52.340 --> 00:46:56.420
It flips its state so that if you
need to rebuild a specific file,

00:46:56.420 --> 00:46:59.050
even though you haven't changed it,
you don't have to open it up,

00:46:59.060 --> 00:47:00.490
type a space, and save it.

00:47:00.620 --> 00:47:03.920
You can touch it right
there in the user interface.

00:47:04.970 --> 00:47:09.570
We've added a target inspector for
every file and every group so that you

00:47:09.570 --> 00:47:13.730
can see what targets a file belongs to,
and you can change it right

00:47:13.810 --> 00:47:14.900
there in the inspector.

00:47:15.060 --> 00:47:18.830
You can even take a whole group
of files and change their targets

00:47:18.930 --> 00:47:21.900
just by selecting the group,
opening the inspector,

00:47:21.900 --> 00:47:25.180
and checking and unchecking
the target membership.

00:47:26.990 --> 00:47:30.610
We've added a lot more drag
and drop to the product.

00:47:30.610 --> 00:47:34.270
When you're setting up target
membership and dependencies,

00:47:34.270 --> 00:47:37.900
you can drag and drop a dependent
target right onto the target inspector.

00:47:37.900 --> 00:47:39.900
Okay, one clap.

00:47:39.900 --> 00:47:43.600
I thought it deserved more than just one.

00:47:46.810 --> 00:47:50.970
And we've also added a lot more drag
and drop for build styles and paths.

00:47:50.970 --> 00:47:54.620
So you can take any file proxy
and drop it into any inspector

00:47:54.620 --> 00:47:57.690
that's expecting a string,
a path, or whatever.

00:47:57.870 --> 00:48:02.500
And it takes the path to that and
drops it right into the inspector.

00:48:06.810 --> 00:48:09.240
In building,
we've really improved the dependency

00:48:09.240 --> 00:48:11.100
checking and the reliability of it.

00:48:11.580 --> 00:48:16.650
This is going to speed up your
development more than you'd think,

00:48:16.980 --> 00:48:21.290
because a lot of times you're either
building files unnecessarily that

00:48:21.540 --> 00:48:24.760
don't really need to be rebuilt,
or something that does need to

00:48:24.860 --> 00:48:27.700
be rebuilt wasn't being picked
up and you had to do a full,

00:48:27.700 --> 00:48:30.410
clean rebuild in order
to get everything right.

00:48:30.460 --> 00:48:32.580
We're looking at a lot more things now.

00:48:32.580 --> 00:48:34.800
We're looking at more build settings,
we're looking at more

00:48:34.800 --> 00:48:38.990
internal dependencies,
and we have much more reliable building

00:48:39.450 --> 00:48:44.980
when you click the build button,
what needs to be rebuilt is rebuilt,

00:48:45.020 --> 00:48:47.610
and what doesn't need to
be rebuilt isn't rebuilt.

00:48:47.670 --> 00:48:49.640
We think that's going to
be a lot more reliable.

00:48:49.650 --> 00:48:53.970
We're also helping you by being
able to clean without removing

00:48:54.070 --> 00:48:58.150
your pre-compiled headers,
so that if your pre-comps are good,

00:48:58.150 --> 00:49:00.380
when you do a clean,
your pre-comps are safe.

00:49:00.380 --> 00:49:02.630
You're still around,
and you don't have to rebuild

00:49:02.630 --> 00:49:03.780
them on the next build.

00:49:03.800 --> 00:49:07.690
And that's just a simple
checkbox in the Clean dialog.

00:49:08.830 --> 00:49:13.570
We've also added a capability to
preprocess your Info.plist files.

00:49:13.690 --> 00:49:17.770
People who have .plc files in
Code Warrior have been asking

00:49:17.770 --> 00:49:19.960
us for a long time for this.

00:49:20.480 --> 00:49:26.220
Rather than adopting the PLC language,
which has a lot more to do with

00:49:26.340 --> 00:49:30.810
different language variations
and localizations of your plist,

00:49:31.050 --> 00:49:33.890
which we handle in a
completely different way,

00:49:33.890 --> 00:49:36.140
or inventing our own
precompiler language,

00:49:36.180 --> 00:49:38.810
I mean, everybody wants to invent
their own precompiler language,

00:49:38.810 --> 00:49:39.410
don't they?

00:49:39.540 --> 00:49:44.760
We just take your Info.plist and we
pass it through GCC's precompiler.

00:49:44.760 --> 00:49:48.610
You can have your own prefix file,
you can include header files,

00:49:48.610 --> 00:49:52.420
you can have pound if conditionals,
you can have macro substitution,

00:49:52.710 --> 00:49:56.050
all the things you want to
share variables between your

00:49:56.060 --> 00:50:01.120
source code and your plist
with the same GCC preprocessor.

00:50:01.290 --> 00:50:04.450
It's very simple to set up,
just a couple of settings

00:50:04.450 --> 00:50:06.280
in the target inspector.

00:50:09.980 --> 00:50:13.580
And finally, in debugging,
we've added a lot more data viewers.

00:50:13.580 --> 00:50:16.200
String and OS types are
now viewed properly,

00:50:16.200 --> 00:50:16.720
no matter what.

00:50:16.820 --> 00:50:20.580
You can view any long int as an OS type.

00:50:21.270 --> 00:50:27.660
We've added a string viewer for the
STL string right in the preview window.

00:50:30.110 --> 00:50:33.240
And we've added completion
in the GDB console.

00:50:33.240 --> 00:50:34.800
It's there from terminal.

00:50:34.800 --> 00:50:38.500
You have completion now in
the GDB console within Xcode.

00:50:38.550 --> 00:50:43.030
And it's mapped to the same
completion key that you use in the

00:50:43.030 --> 00:50:45.040
Xcode editor for code completion.

00:50:45.060 --> 00:50:48.470
So if you have your own
preferred completion key,

00:50:48.520 --> 00:50:50.920
it works in both code and in GDB.

00:50:52.560 --> 00:50:55.550
We have improved the SCM system a lot.

00:50:55.650 --> 00:51:00.400
We have automatic online/offline
detection and a master switch.

00:51:00.460 --> 00:51:03.570
If you unplug your machine and
go offline from your SCM system,

00:51:03.570 --> 00:51:06.510
it does not turn off the
checkbox in every project,

00:51:06.510 --> 00:51:08.400
making you go back and turn it on again.

00:51:08.400 --> 00:51:10.350
It just sets it to offline.

00:51:10.350 --> 00:51:13.400
When you plug the cable back in,
it's just like mail.

00:51:13.400 --> 00:51:16.440
It notices it's online and
all of your projects come back

00:51:16.440 --> 00:51:18.400
online to their SCM systems.

00:51:18.400 --> 00:51:25.270
We've also added support across all
SCM systems for unwrapped package files,

00:51:25.270 --> 00:51:29.580
NIBs, class models, RTFDs,

00:51:30.830 --> 00:51:32.510
It's really basic right now.

00:51:32.730 --> 00:51:37.010
A lot of SEM systems don't particularly
like handling unwrapped files,

00:51:37.070 --> 00:51:39.640
so a lot of the operations
are not necessarily going to

00:51:39.640 --> 00:51:44.880
do what you want them to do,
but the basic add, commit, checkout work.

00:51:45.060 --> 00:51:49.200
Things like moving and renaming may be
a little more difficult in some systems,

00:51:49.340 --> 00:51:55.430
but at least you can check
your nib into subversion now.

00:51:55.430 --> 00:51:55.430
And we have some...

00:51:58.350 --> 00:52:02.600
We have some improvements
to Subversion and Perforce,

00:52:02.690 --> 00:52:05.660
which does not have a hyphen in it,
but the spell checker

00:52:05.670 --> 00:52:07.050
wanted it to have one.

00:52:07.070 --> 00:52:09.300
Thank you.

00:52:09.300 --> 00:52:13.780
Never sign off on the final review of
your slides until you've read every word.

00:52:14.710 --> 00:52:17.290
In the Documentation Viewer,
we've made some improvements

00:52:17.410 --> 00:52:20.480
both in the viewer itself and in
the documentation that it views.

00:52:20.500 --> 00:52:24.610
We've added all of the standard C library
calls to the Documentation Viewer,

00:52:24.610 --> 00:52:26.700
so when you look for
malloc in the API view,

00:52:26.700 --> 00:52:29.290
it's there.

00:52:30.300 --> 00:52:32.940
It took our VP to
insist that that happen,

00:52:32.940 --> 00:52:33.680
to make that happen.

00:52:33.680 --> 00:52:35.060
It's very surprising.

00:52:35.110 --> 00:52:42.090
And part of that is fallout of all
of the man pages for man 3 and man 8,

00:52:42.230 --> 00:52:45.140
I believe, are now indexed in the
documentation viewer.

00:52:45.140 --> 00:52:48.280
So all of the Unix man pages are there.

00:52:48.600 --> 00:52:49.620
for API.

00:52:49.820 --> 00:52:52.860
And we've added back forward buttons,
just like in Safari,

00:52:52.940 --> 00:52:55.880
to the documentation viewer,
so you can manage a lot of different

00:52:55.880 --> 00:52:58.800
documents in a back forward fashion.

00:52:59.600 --> 00:53:03.280
And also, of course,
we still have what's in Xcode 2.0,

00:53:03.340 --> 00:53:08.550
which is the union of on-disk
and on-web documentation.

00:53:08.690 --> 00:53:12.820
We'll index everything and then
show you the hits in the index,

00:53:12.820 --> 00:53:15.340
regardless of whether
it's local or on the web.

00:53:15.400 --> 00:53:19.720
Automatically fetch the HTML page
from the web if you want,

00:53:19.720 --> 00:53:23.200
and then when there is an updated set,
we can download that from the

00:53:23.210 --> 00:53:26.890
web automatically and put it on
your disk for quick reference.

00:53:29.660 --> 00:53:33.360
And finally, we are continuing to beef
up the AppleScript support.

00:53:33.360 --> 00:53:37.230
A lot of you use AppleScript to
automate creation or management

00:53:37.230 --> 00:53:38.600
of projects in Xcode.

00:53:38.600 --> 00:53:40.780
We added a lot of support in 2.0.

00:53:41.000 --> 00:53:45.250
In 2.1, we extended it to much
more target creation,

00:53:45.530 --> 00:53:46.900
SCM operations.

00:53:46.900 --> 00:53:53.160
The project upgrade from Xcode 2.0
to Xcode 2.1 is AppleScriptable.

00:53:53.160 --> 00:53:58.300
There is a script up on DTS right
now that's associated with

00:53:58.320 --> 00:54:03.220
this session and the next one,
where you run that script and it will

00:54:03.220 --> 00:54:08.400
automatically walk a project tree and
upgrade all dependent sub-projects and

00:54:08.400 --> 00:54:12.150
change their names and references in
their master projects to refer to them.

00:54:12.160 --> 00:54:15.150
You can use that not only
to upgrade your projects,

00:54:15.220 --> 00:54:19.140
but also to read to see how some
of the new Xcode support works.

00:54:19.160 --> 00:54:22.160
Build configurations,
all of the Xcode support

00:54:22.160 --> 00:54:23.160
for build styles and so on.

00:54:23.200 --> 00:54:25.430
This has been removed,
that's been moved over to build

00:54:25.430 --> 00:54:29.160
configurations and you can create
targets now using AppleScript.

00:54:29.160 --> 00:54:31.710
Pretty much the only thing you
can't do is create new projects

00:54:31.710 --> 00:54:33.150
from scratch in AppleScript.

00:54:33.160 --> 00:54:35.160
We've got almost everything else covered.

00:54:38.630 --> 00:54:42.980
So, a lot of stuff,
a lot of stuff to put in a dot release.

00:54:42.980 --> 00:54:45.370
We are really looking forward
to your installing it,

00:54:45.570 --> 00:54:47.680
using it, giving us feedback on it.

00:54:47.780 --> 00:54:50.480
We're going to have a lot
of time for questions today.

00:54:50.500 --> 00:54:54.910
Xcode 2.1, powerful and intuitive
build settings management.

00:54:54.920 --> 00:54:58.870
We think we've removed your
impediments to productivity and

00:54:58.970 --> 00:55:05.150
added the things you need to do to
support building universal binaries.

00:55:05.290 --> 00:55:08.380
Versatile debugging,
not just with the breakpoints,

00:55:08.580 --> 00:55:11.790
the actions, and the watchpoints,
but also the visualizer,

00:55:11.800 --> 00:55:15.080
a new way to look at your
application in action.

00:55:15.080 --> 00:55:19.250
The UI features that you've
been asking us for for years,

00:55:19.250 --> 00:55:21.510
they're there, they work.

00:55:21.710 --> 00:55:25.100
and David Satterthwaite.

00:55:25.100 --> 00:55:32.690
We expect that usage of Xcode
2.0 should drop off really

00:55:32.700 --> 00:55:36.930
precipitously starting today.

00:55:36.930 --> 00:55:48.350
There's almost no reason to continue
to use 2.0 when you have 2.1 available.

00:55:49.110 --> 00:55:53.210
For more information,
everything is on the ADC website.

00:55:53.520 --> 00:55:55.480
We have a lot more sample code this year.

00:55:55.480 --> 00:55:58.190
We have a lot of sample
projects that are .xcproj.

00:55:58.350 --> 00:56:00.440
They will only open in Xcode 2.1.

00:56:00.440 --> 00:56:03.840
They demonstrate a lot of
the features of Xcode 2.1.

00:56:03.840 --> 00:56:08.080
We have sample code of
projects with subprojects.

00:56:08.230 --> 00:56:10.070
We have sample codes to
build configurations.

00:56:10.130 --> 00:56:12.160
We have sample code for unit testings.

00:56:12.300 --> 00:56:14.690
Lots of sample code to
show off the new features.

00:56:14.740 --> 00:56:16.160
It's all up on the website.

00:56:16.160 --> 00:56:20.160
There is an updated Xcode
2.1 reference guide.

00:56:20.160 --> 00:56:23.740
If you've seen the 2.0 guide,
it's truly phenomenal.

00:56:23.790 --> 00:56:24.930
It's huge.

00:56:24.990 --> 00:56:25.660
It's thick.

00:56:25.660 --> 00:56:26.570
It's detailed.

00:56:26.610 --> 00:56:27.300
It's accurate.

00:56:27.300 --> 00:56:28.890
It's got everything you need in it.

00:56:29.030 --> 00:56:30.700
You can now RT-FM.

00:56:30.750 --> 00:56:30.920
Okay?

00:56:31.020 --> 00:56:36.080
I'm going to answer a lot more questions
with that because the FM is fabulous.

00:56:36.280 --> 00:56:38.790
It's a fabulous manual.

00:56:39.960 --> 00:56:40.870
Other resources?

00:56:41.520 --> 00:56:42.870
Us.

00:56:42.930 --> 00:56:45.900
There are some related sessions.

00:56:46.110 --> 00:56:48.060
Matt, are you supposed to
be doing these slides?

00:56:48.680 --> 00:56:51.850
Okay, I'll finish.

00:56:52.290 --> 00:56:55.200
Best session to come to
is to stay in your chair,

00:56:55.450 --> 00:56:58.620
get on Wi-Fi,
download Xcode 2.1 and install it,

00:56:58.930 --> 00:57:02.290
download the appearance sample updated,
get it on your PowerBook,

00:57:02.350 --> 00:57:04.210
and follow through for
the next session in here,

00:57:04.210 --> 00:57:07.150
10.30, Session 402, Adopting Xcode,
hands-on.

00:57:07.150 --> 00:57:08.340
It's going to be an adventure.

00:57:08.360 --> 00:57:11.250
Power programming with Xcode
has been moved from this

00:57:11.410 --> 00:57:13.310
afternoon to tomorrow afternoon.

00:57:13.310 --> 00:57:16.530
We're going to go through the
user interface features of Xcode

00:57:16.530 --> 00:57:18.340
quite a bit in depth and detail.

00:57:19.100 --> 00:57:22.230
Project management mastery with Xcode,
Friday afternoon,

00:57:22.230 --> 00:57:27.520
Anders Bertelrud will tell you the
whole truth about build configurations,

00:57:27.610 --> 00:57:31.150
how they set up, how they work,
how build settings work,

00:57:31.420 --> 00:57:33.920
what's the relationship of
the environment variables,

00:57:33.920 --> 00:57:38.200
what the stack is,
all of the gory details of how to really,

00:57:38.370 --> 00:57:41.730
really get your arms
around the power of Xcode.

00:57:41.740 --> 00:57:45.520
And moving to GCC 4.0, Wednesday,
5 o'clock,

00:57:45.740 --> 00:57:48.660
if you're bringing code from GCC 4.0,
you're going to be able to get your

00:57:48.660 --> 00:57:48.660
arms around the power of Xcode.

00:57:48.680 --> 00:57:53.420
And moving to GCC 3.3 to 4.0,
there are a lot of changes in GCC 4.0,

00:57:53.420 --> 00:57:55.130
even for Xcode 2.0.

00:57:55.130 --> 00:58:00.060
The compiler is much more accurate
in its adherence to the C++ standard,

00:58:00.170 --> 00:58:05.060
so especially if you have C++ code,
you should come to that session.

00:58:07.000 --> 00:58:10.840
Support, support labs, support labs,
support labs.

00:58:11.050 --> 00:58:15.120
Tuesday, Wednesday, Thursday,
come to the lab, bring your source code,

00:58:15.330 --> 00:58:18.630
we'll bring it in Xcode 2.1,
we will move your build styles

00:58:18.750 --> 00:58:20.970
to build configurations,
we'll help you set it up,

00:58:21.250 --> 00:58:23.970
we'll get you running,
we'll check the checkbox and you will

00:58:24.030 --> 00:58:25.990
walk out of there with an Intel binary.

00:58:26.140 --> 00:58:28.140
We want you to do that.

00:58:28.580 --> 00:58:33.400
And then the feedback forum,
if you want to talk to us, Friday,

00:58:33.470 --> 00:58:34.260
5:00 PM.

00:58:34.260 --> 00:58:35.930
We know you'd rather
be having margaritas.

00:58:36.220 --> 00:58:39.740
We'll be there answering your questions.

00:58:39.740 --> 00:58:42.900
Matt Formica, come on up.

00:58:43.020 --> 00:58:44.880
He's our man.

00:58:46.810 --> 00:58:48.980
Develop Tools and Cocoa Evangelist.

00:58:49.110 --> 00:58:56.960
If you want to get to the team,
we are on Xcode users at lists.apple.com.

00:58:56.960 --> 00:58:59.660
We answer your questions,
we listen to your feedback,

00:58:59.750 --> 00:59:02.550
we want to hear what's going on,
we want to hear how you're

00:59:02.570 --> 00:59:03.780
doing with the product.

00:59:04.220 --> 00:59:10.780
Please subscribe to that list,
please tell us what you think,

00:59:10.780 --> 00:59:12.200
please ask questions rather
than flailing around.