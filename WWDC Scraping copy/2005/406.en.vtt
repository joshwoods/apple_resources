WEBVTT

00:00:01.140 --> 00:00:02.250
All right, good morning.

00:00:02.470 --> 00:00:03.660
It's great to be here.

00:00:03.660 --> 00:00:06.640
This is AppleScript Studio in Depth,
session 406.

00:00:06.740 --> 00:00:10.710
It's terrific to see so many
people here on a Friday morning

00:00:10.740 --> 00:00:12.810
at 9:00 in the morning,
particularly since the

00:00:12.810 --> 00:00:15.100
Apple campus bash was last night.

00:00:15.100 --> 00:00:18.280
So thank you for being here and
so bright and early this morning.

00:00:18.410 --> 00:00:23.980
And my name, of course, is Tim Bumgarner.

00:00:23.980 --> 00:00:24.900
I'm a senior software engineer at Apple.

00:00:24.900 --> 00:00:24.900
Thank you.

00:00:25.000 --> 00:00:28.660
This is actually our fifth year at
presenting at at Developer Conference for

00:00:28.670 --> 00:00:31.000
AppleScript Studio,
so it's been five years old.

00:00:31.150 --> 00:00:32.980
That's how long I've been at Apple,
actually,

00:00:33.100 --> 00:00:35.810
so it's sort of a little milestone there.

00:00:36.140 --> 00:00:37.390
And let's take a look at our agenda.

00:00:37.600 --> 00:00:40.150
So we're going to just go
through a brief introduction.

00:00:40.220 --> 00:00:42.820
Then we're going to have a hands-on
project that we're going to work through,

00:00:42.820 --> 00:00:45.340
and then a little bit of
information about where you can

00:00:45.440 --> 00:00:49.500
find out better documentation or
improved documentation for Studio.

00:00:49.530 --> 00:00:51.700
And hopefully,
we'll have some time left so that we

00:00:51.700 --> 00:00:54.270
can do a question and answer at the end.

00:00:54.630 --> 00:00:55.170
All right.

00:00:55.430 --> 00:00:57.960
So in order to do the introduction,
I need to do one of those little

00:00:57.960 --> 00:01:01.500
surveys to sort of gauge where
we're at as far as experience.

00:01:01.500 --> 00:01:05.500
So how many people are
new to AppleScript Studio?

00:01:06.020 --> 00:01:07.210
Wow.

00:01:07.920 --> 00:01:08.500
That's awesome.

00:01:08.500 --> 00:01:09.000
Cool.

00:01:09.000 --> 00:01:09.930
Glad to have you here.

00:01:10.090 --> 00:01:11.860
So that makes my job a little harder.

00:01:11.860 --> 00:01:13.220
We get to go a little slower.

00:01:13.220 --> 00:01:15.130
That's great, though.

00:01:15.140 --> 00:01:16.070
It's good to know that.

00:01:16.200 --> 00:01:19.360
How many people have actually
built a Studio application?

00:01:19.360 --> 00:01:21.340
Okay, good.

00:01:21.340 --> 00:01:24.510
And how many have actually
shipped a Studio application?

00:01:24.560 --> 00:01:27.500
Okay,
those of you that have your hands up,

00:01:27.510 --> 00:01:31.460
do you realize that it is simply
a matter of checking a box,

00:01:31.460 --> 00:01:35.140
turning on Intel, recompile,
and ship your application

00:01:35.430 --> 00:01:37.130
and you're on Intel.

00:01:37.790 --> 00:01:39.320
There won't be any other work to do.

00:01:39.320 --> 00:01:42.260
I've actually went into the labs
and tested all the Studio examples.

00:01:42.260 --> 00:01:43.190
They all work perfectly.

00:01:43.200 --> 00:01:46.290
So it's very simple for you to
develop a universal application.

00:01:46.290 --> 00:01:49.240
So we actually get to take advantage
of the fact that we're scripting

00:01:49.610 --> 00:01:52.660
using AppleScript on top of Cocoa.

00:01:53.700 --> 00:01:55.800
So why would you want to
use AppleScript Studio?

00:01:55.860 --> 00:01:59.430
Well, it's an easier approach to
creating Macintosh applications.

00:01:59.490 --> 00:02:02.250
If you're not comfortable
with the regular programming

00:02:02.260 --> 00:02:06.480
languages like Objective-C or C++,
AppleScript is a very

00:02:06.480 --> 00:02:08.620
approachable language,
and so it's a very easy way

00:02:08.620 --> 00:02:11.520
to put together real native
Macintosh applications.

00:02:11.520 --> 00:02:14.230
And it's also excellent at
doing rapid prototyping.

00:02:14.310 --> 00:02:18.190
You might want to put together an example
of what your application should do,

00:02:18.190 --> 00:02:22.220
and it's very quick to wire together
the things using AppleScript Studio.

00:02:23.000 --> 00:02:26.860
And it also works very well and mixes
in with other development languages.

00:02:26.860 --> 00:02:29.150
So inside of Xcode,
as you're using AppleScript,

00:02:29.210 --> 00:02:34.230
you can pull in a little bit of
Objective-C or C++ or Java code.

00:02:34.920 --> 00:02:38.620
Some of the common uses that we find
people using Studio for is to put

00:02:38.620 --> 00:02:40.420
a friend front end on Unix tools.

00:02:40.690 --> 00:02:42.880
So they have some tool
that they want to expose.

00:02:42.880 --> 00:02:45.000
And it's very simple to
put a UI in front of that.

00:02:45.200 --> 00:02:47.420
And using the do Shell script
command in Apple Script,

00:02:47.470 --> 00:02:50.260
they can take advantage
of the Unix tools.

00:02:50.350 --> 00:02:52.830
We also find that it's
a great application for

00:02:52.830 --> 00:02:55.500
working inside of a workflow.

00:02:55.500 --> 00:02:57.660
Apple Script Studio, of course,
is built on Apple Script.

00:02:57.750 --> 00:03:00.990
It is excellent at talking to
other scriptable applications.

00:03:01.130 --> 00:03:05.550
And so it makes a very good center for
talking to the various applications to

00:03:05.550 --> 00:03:08.720
provide a workflow in your environment.

00:03:08.720 --> 00:03:11.410
Another thing that we found
is people have spent a lot of

00:03:11.410 --> 00:03:13.120
time writing Apple Scripts.

00:03:13.350 --> 00:03:16.760
And in order to provide any sort of UI,
they end up doing display dialog.

00:03:16.860 --> 00:03:18.850
So I'm sure you may have
seen some scripts that just

00:03:18.990 --> 00:03:21.620
kept asking me with a dialog,
answer one question,

00:03:21.890 --> 00:03:23.500
answer another question,
and find that it goes

00:03:23.580 --> 00:03:24.590
off and does its thing.

00:03:24.700 --> 00:03:27.680
So what they do is they can take Studio,
take their existing script,

00:03:27.700 --> 00:03:29.520
and put a nice UI in front of that.

00:03:29.570 --> 00:03:31.320
And then go ahead and let it run.

00:03:31.380 --> 00:03:34.780
And of course, the most exciting thing,
which we saw in Todd's demo yesterday,

00:03:34.790 --> 00:03:36.860
is that you can use
Apple Script Studio to

00:03:36.960 --> 00:03:38.010
create Automator actions.

00:03:38.080 --> 00:03:40.020
As a matter of fact,
a good many of the actions

00:03:40.020 --> 00:03:44.150
that we ship in Automator use
Apple Script Studio to talk to

00:03:44.150 --> 00:03:46.730
various UI elements in the action.

00:03:48.410 --> 00:03:51.060
So this is a hands-on format.

00:03:51.100 --> 00:03:52.790
Unfortunately,
there's a technical difficulty,

00:03:52.830 --> 00:03:54.800
so the code that I have
is just a little newer.

00:03:54.800 --> 00:03:57.500
And that's-- what we're going to do
is we're going to take this lemon,

00:03:57.500 --> 00:03:58.800
and we're going to make a
little lemonade out of it.

00:03:58.930 --> 00:04:02.290
So I'm going to show you the old
code and compare it to the new code,

00:04:02.290 --> 00:04:03.040
and the differences.

00:04:03.050 --> 00:04:04.240
You'll still be able to follow along.

00:04:04.310 --> 00:04:06.360
And this is where I'm
going to do another survey.

00:04:06.460 --> 00:04:11.590
So how many people would like to actually
walk through and build the app with me?

00:04:12.740 --> 00:04:13.340
Okay, great.

00:04:13.450 --> 00:04:15.160
So, there's quite a few hands.

00:04:15.160 --> 00:04:17.580
So,
that's what we're going to attempt to do.

00:04:17.580 --> 00:04:19.030
I'll try to go slow enough.

00:04:19.030 --> 00:04:20.780
If I go too fast, I never do that.

00:04:20.780 --> 00:04:21.420
Ever.

00:04:21.420 --> 00:04:22.080
Let me know.

00:04:22.080 --> 00:04:23.800
So, raise your hand, holler out.

00:04:23.810 --> 00:04:26.590
Well, I won't see your hand,
but go ahead and holler out.

00:04:26.590 --> 00:04:27.900
Tell me I'm going too fast.

00:04:27.980 --> 00:04:29.710
It's a little tough to see the screen.

00:04:29.760 --> 00:04:31.430
I'll try to zoom in as best as I can.

00:04:31.430 --> 00:04:33.460
But if I get too far ahead,
just let me know.

00:04:33.570 --> 00:04:35.330
So, it's a very interactive thing.

00:04:35.330 --> 00:04:37.280
We'll go ahead and do it that way.

00:04:38.080 --> 00:04:40.360
So, you should have the session material.

00:04:40.470 --> 00:04:43.600
If you don't have that,
there's no way you'll be able to keep

00:04:43.600 --> 00:04:45.520
up because I won't be typing anything.

00:04:45.520 --> 00:04:46.940
I'll use demo assistant.

00:04:46.940 --> 00:04:50.730
But in your session material,
there's an outline,

00:04:50.730 --> 00:04:54.880
an OmniOutliner outline or a PDF, or RTF,
I'm sorry.

00:04:54.880 --> 00:04:57.460
And you can copy out the
bits of code that you need.

00:04:57.460 --> 00:04:59.220
It's very clear where to do that.

00:04:59.270 --> 00:05:01.460
But if you don't have that,
you won't be able to follow along.

00:05:03.090 --> 00:05:05.200
If you don't, just go ahead and watch me,
and you'll be able to

00:05:05.200 --> 00:05:06.000
pick these up later.

00:05:06.000 --> 00:05:08.320
Now,
we will make the newer version that I'm

00:05:08.320 --> 00:05:12.120
going to show that we're going to build
will be available after the conference,

00:05:12.140 --> 00:05:13.750
hopefully fairly soon after.

00:05:15.500 --> 00:05:17.740
So the hands-on project.

00:05:17.810 --> 00:05:19.870
So what we're going to do
is we're going to build this

00:05:19.890 --> 00:05:21.860
application called ScriptView.

00:05:22.460 --> 00:05:25.930
ScriptView is a script editor
with a database built into it.

00:05:26.080 --> 00:05:30.240
What we're going to do is demonstrate
new and improved features for Tiger.

00:05:30.440 --> 00:05:35.060
And so some of the improved features that
we have are the data sources that we have

00:05:35.060 --> 00:05:37.420
that back up outlines and table views.

00:05:37.500 --> 00:05:40.740
They've been greatly improved,
much easier to use.

00:05:40.740 --> 00:05:42.650
We have also new,
we've added toolbar support.

00:05:42.800 --> 00:05:45.860
So it's very simple to create
toolbars in your studio application,

00:05:46.010 --> 00:05:48.810
so it's more of a part of the
regular Cocoa application.

00:05:49.030 --> 00:05:50.870
We've also added target action support.

00:05:51.100 --> 00:05:54.100
So anywhere,
particularly from Cocoa in Objective-C,

00:05:54.140 --> 00:05:58.010
where you see that there is a
connection from a target to the action

00:05:58.020 --> 00:06:01.640
of a method that needs to execute,
you can now set that up in script.

00:06:01.710 --> 00:06:03.420
Typically,
you do this in Interface Builder.

00:06:03.420 --> 00:06:06.460
You drag a connection from one
thing to the next and specify it.

00:06:06.540 --> 00:06:08.020
Now you can do that in script as well.

00:06:08.170 --> 00:06:10.420
And that's important for toolbar support.

00:06:10.470 --> 00:06:12.610
We're also going to show you OSA Kit.

00:06:12.730 --> 00:06:13.800
This is a new framework.

00:06:13.800 --> 00:06:17.360
It's a public framework, Louis Shipp,
that provides the script editor

00:06:17.360 --> 00:06:19.420
view and the dictionary view.

00:06:19.420 --> 00:06:21.410
And actually,
it's the technology that all

00:06:21.410 --> 00:06:25.050
of the studio script editor
and automator are all built on.

00:06:25.180 --> 00:06:29.620
So it's actually the same code that we
use is now available for you to use.

00:06:29.640 --> 00:06:33.340
And then we're going to look
at some Xcode features for 2.1.

00:06:33.350 --> 00:06:35.000
If you have 2.0,
you'll be able to follow along,

00:06:35.000 --> 00:06:38.300
but you won't be able to execute these
breakpoint actions that we have now,

00:06:38.360 --> 00:06:40.630
which are new in 2.1.

00:06:41.500 --> 00:06:44.810
So let's go ahead and take a look
at the application in its final

00:06:45.430 --> 00:06:49.200
state so we can see what it's going
to look like when we're finished.

00:06:49.900 --> 00:06:52.730
And I'm going to go ahead and just
launch the built product at the end.

00:06:52.740 --> 00:06:55.240
Now, it's probably, can you see it?

00:06:55.340 --> 00:06:56.740
All right.

00:06:56.790 --> 00:06:57.680
All right, excellent.

00:06:57.680 --> 00:07:00.500
So let's go ahead and I'm just going to,
it's a script editor that

00:07:00.500 --> 00:07:01.740
has a script view here.

00:07:01.740 --> 00:07:03.640
The results are going
to get put out here.

00:07:03.640 --> 00:07:07.580
And I can add records down into this
table view and we'll see what that does.

00:07:07.670 --> 00:07:09.280
So I'm going to type in the wrong place.

00:07:09.340 --> 00:07:11.530
We'll go up here, do a current date.

00:07:11.750 --> 00:07:14.560
And you can see that it's
actually using the same features

00:07:14.560 --> 00:07:16.340
that are in the script editor.

00:07:16.660 --> 00:07:19.660
I can hit,
bring up the code completion and

00:07:19.660 --> 00:07:22.340
choose current date and hit enter.

00:07:22.340 --> 00:07:25.510
And I can compile it, run it.

00:07:25.640 --> 00:07:28.280
And you see the results
automatically get put down here.

00:07:28.280 --> 00:07:31.340
And I'm going to add that
as a record down here below.

00:07:31.340 --> 00:07:35.300
Let's do front window
and simply run that,

00:07:35.300 --> 00:07:36.980
add the record.

00:07:36.980 --> 00:07:39.380
And you can see that I have two
different records down here.

00:07:39.380 --> 00:07:41.300
I can click on that.

00:07:41.340 --> 00:07:43.600
And when I do, it puts the script back
into the script view.

00:07:43.600 --> 00:07:46.630
So it's a way for me to capture a bunch
of scripts that I have and save them.

00:07:46.660 --> 00:07:47.890
And I can save that with the document.

00:07:47.900 --> 00:07:52.200
There's also sorting is fully
supported in the table view.

00:07:52.200 --> 00:07:56.840
Sort it by date here or if I want
to sort by the source or the result.

00:07:56.840 --> 00:08:00.860
And you can see that the toolbar
itself is fully customizable.

00:08:00.860 --> 00:08:03.250
I can drag and add
things around as I like.

00:08:06.190 --> 00:08:07.790
And I can collapse that if I like.

00:08:07.930 --> 00:08:10.140
And it's also a
document-based application,

00:08:10.140 --> 00:08:12.440
so again, I can create as many
documents as I'd like.

00:08:12.470 --> 00:08:15.610
I can save the document,
and it works just like

00:08:15.610 --> 00:08:17.190
you would expect it to do.

00:08:17.450 --> 00:08:21.710
So that's the application that we're
going to build as our hands-on project.

00:08:26.900 --> 00:08:57.900
[Transcript missing]

00:08:59.110 --> 00:09:01.440
So what I have-- let's zoom
out of this for a moment.

00:09:01.490 --> 00:09:05.330
I am going to go into
Xcode and minimize that.

00:09:05.590 --> 00:09:09.170
And I'm going to choose from
the File menu New Project.

00:09:09.360 --> 00:09:11.560
This is whenever I want to
begin a new Xcode project.

00:09:11.670 --> 00:09:13.200
I will select that.

00:09:13.240 --> 00:09:15.950
And you can see that there are
several different categories of a

00:09:15.950 --> 00:09:19.570
lot of different types of things
that I can produce out of Xcode.

00:09:19.770 --> 00:09:22.150
The one that we're looking for
is in the Application group.

00:09:22.340 --> 00:09:23.990
And there's AppleScript application.

00:09:24.070 --> 00:09:27.060
And then there's the
AppleScript document-based application.

00:09:27.240 --> 00:09:29.500
So let's choose that one.

00:09:29.550 --> 00:09:30.920
Click the Next button.

00:09:30.960 --> 00:09:33.800
And then we're going to call
our project Script View.

00:09:33.880 --> 00:09:38.030
So it's a capital S, capital V,
Script View.

00:09:38.680 --> 00:09:40.100
All right.

00:09:40.140 --> 00:09:41.760
And when I'm finished,
I'll go ahead and click

00:09:41.760 --> 00:09:43.710
on the Finish button.

00:09:45.970 --> 00:09:47.800
And it will open up with a project.

00:09:47.860 --> 00:09:49.560
And it will be set up for us.

00:09:49.560 --> 00:09:53.360
So there's many things wired
together at the beginning.

00:09:53.410 --> 00:09:54.180
One would hope.

00:09:54.200 --> 00:09:56.200
Wake up, computer.

00:09:56.230 --> 00:09:58.160
Living on a firewire drive.

00:09:58.390 --> 00:09:58.960
So here we go.

00:09:59.020 --> 00:10:00.420
This is our Xcode project.

00:10:00.460 --> 00:10:04.250
And it comes already with a couple
of different scripts set up for us.

00:10:04.400 --> 00:10:06.380
This is the document script.

00:10:06.380 --> 00:10:09.540
It's the script that's executed
whenever we create a new document.

00:10:09.560 --> 00:10:12.690
And right now, it comes with a couple of
handlers that we'll discuss later.

00:10:12.870 --> 00:10:15.810
The script view is the one that's
attached to the application itself.

00:10:15.950 --> 00:10:17.960
So it's sort of the main script.

00:10:17.960 --> 00:10:19.600
We have our resources.

00:10:19.600 --> 00:10:22.570
We have here our document
nib and our main menu nib.

00:10:22.620 --> 00:10:25.810
The main menu nib is the nib
that contains our menu as

00:10:25.820 --> 00:10:27.980
the main application nib.

00:10:28.000 --> 00:10:30.360
And the document nib is the
thing that gets created every

00:10:30.410 --> 00:10:32.230
time we create a document.

00:10:32.370 --> 00:10:33.060
So let's go ahead.

00:10:33.060 --> 00:10:34.440
And we're going to go
into Interface Builder.

00:10:34.440 --> 00:10:38.490
And the simplest thing to do is to
double click on our document nib.

00:10:40.400 --> 00:10:41.060
All right?

00:10:41.210 --> 00:10:42.580
So everybody should be
an interface builder.

00:10:42.580 --> 00:10:45.050
And we have a window here by default.

00:10:45.180 --> 00:10:48.710
It's probably not quite big enough,
so we need to make it just a little bit

00:10:48.720 --> 00:10:50.840
bigger here to fit all of our views into.

00:10:50.840 --> 00:10:54.600
Now, the first thing we need to do is
put in our script editor view.

00:10:54.600 --> 00:10:57.940
Now, OSAKit provides a palette for us.

00:10:58.010 --> 00:11:00.740
And unfortunately,
it is not installed by default.

00:11:00.740 --> 00:11:03.610
You actually have to go add that the
first time that you want to use that.

00:11:03.740 --> 00:11:06.080
But it's very simple to do.

00:11:06.080 --> 00:11:10.500
You go to the Tools menu,
go to the Palette submenu,

00:11:10.700 --> 00:11:13.510
and pick Palette Preferences.

00:11:13.850 --> 00:11:17.760
And when we bring that open,
it takes us to the palettes panel.

00:11:17.780 --> 00:11:20.190
And we click the Add button.

00:11:22.530 --> 00:11:25.390
And what it does is it takes
us to the default location.

00:11:25.610 --> 00:11:29.230
This default location is generally
in your developer-- your system

00:11:29.230 --> 00:11:31.280
developer palettes folder.

00:11:31.490 --> 00:11:36.390
So anything that's in that folder
will automatically be loaded by IB.

00:11:36.400 --> 00:11:40.400
And you can see that that includes, like,
the Studio palette, Sherlock, and others.

00:11:40.400 --> 00:11:45.400
But we're going to go back
one level up to developer,

00:11:45.760 --> 00:11:47.170
select the extras group.

00:11:47.400 --> 00:11:51.270
And inside of the extras folder-- inside
of the extras folder is the palettes.

00:11:51.400 --> 00:11:54.370
And you can see there's actually quite a
few extra palettes here that you can add.

00:11:54.430 --> 00:11:57.700
The AB palette is for the address
book if you want to actually

00:11:57.780 --> 00:11:59.400
drag in a people chooser.

00:11:59.490 --> 00:12:02.330
The automator palette is right here.

00:12:02.540 --> 00:12:04.350
But the one we're looking
for is the OSA palette.

00:12:04.450 --> 00:12:08.130
So I'm going to go ahead and
select that and choose open.

00:12:08.400 --> 00:12:12.510
And you can see what
it did is over here--

00:12:14.300 --> 00:12:22.570
is an expert in the field of
web analytics and web analytics.

00:12:22.770 --> 00:12:25.520
He's been working on a number of projects
that work with each of these views,

00:12:25.520 --> 00:12:25.520
and he's been working on a
number of projects that work

00:12:25.520 --> 00:12:25.520
with each of these views.

00:12:26.180 --> 00:12:27.640
And I'm not going to reposition it yet.

00:12:27.640 --> 00:12:30.220
I'm just going to go
ahead and drag that in.

00:12:30.220 --> 00:12:32.060
What's going to be a little more
difficult is I'll have to zoom out

00:12:32.060 --> 00:12:34.990
and bring this window over here.

00:12:35.210 --> 00:12:38.060
So we can follow along
closer in the Zoom mode.

00:12:38.100 --> 00:12:42.720
And I'm going to take a script controller
and drag that into our project.

00:12:42.770 --> 00:12:46.780
The script controller is what
interacts with the script view.

00:12:46.840 --> 00:12:48.300
Now that takes care of that part of it.

00:12:48.510 --> 00:12:50.800
Now what we need is we
need a results view.

00:12:50.870 --> 00:12:53.370
And that simply can be just a text view.

00:12:53.500 --> 00:12:58.970
So I switch to the text palette,
drag out a text view,

00:12:59.660 --> 00:13:00.370
All right.

00:13:00.520 --> 00:13:02.360
We'll set that down about
here for the moment.

00:13:02.380 --> 00:13:03.860
Now,
the next thing we needed at the bottom

00:13:03.860 --> 00:13:07.130
of our application in the window,
in the document window, was a table view.

00:13:07.180 --> 00:13:09.160
So we'll switch over
to the table palette,

00:13:09.190 --> 00:13:11.050
and we'll drag that out.

00:13:14.030 --> 00:13:14.560
Right pace?

00:13:14.560 --> 00:13:16.740
Are we doing all right?

00:13:16.790 --> 00:13:17.160
All right, cool.

00:13:17.270 --> 00:13:19.890
If I don't hear you screaming,
I'm just going to assume all is well.

00:13:19.890 --> 00:13:23.680
So we're going to drag this out,
put it down here towards

00:13:23.680 --> 00:13:25.300
about the last third.

00:13:25.500 --> 00:13:38.600
[Transcript missing]

00:13:38.930 --> 00:13:41.790
And finally,
we'll grab our script view here

00:13:42.080 --> 00:13:45.240
at the top and fill that out.

00:13:45.320 --> 00:13:49.100
So that sort of gives us our spacing
that we had in the finished product.

00:13:49.140 --> 00:13:50.590
Now,
what we need to do is we need to put all

00:13:50.590 --> 00:13:52.480
of these views inside of a split view.

00:13:52.680 --> 00:13:56.520
And the simplest thing to do
is to go to the Edit menu.

00:13:56.710 --> 00:13:58.720
It'll scroll over and cooperate here.

00:13:58.760 --> 00:14:02.230
And the Edit menu-- or I'm sorry,

00:14:02.300 --> 00:14:15.100
[Transcript missing]

00:14:15.740 --> 00:14:17.460
And you can see that now
I do have a split view here.

00:14:17.460 --> 00:14:20.060
It's put all three of those
views into a split view.

00:14:20.100 --> 00:14:22.430
Now, the last thing we need to do as far
as the split view is concerned is

00:14:22.430 --> 00:14:23.820
we need to position it correctly.

00:14:23.870 --> 00:14:27.450
Many times I see a lot of applications,
they don't line up the edges

00:14:27.450 --> 00:14:29.770
of their views exactly right,
so you get a double border

00:14:30.100 --> 00:14:32.500
at the bottom of a toolbar,
sometimes in the corner

00:14:32.500 --> 00:14:33.350
they don't match correctly.

00:14:33.360 --> 00:14:35.420
So I have a little trick
that I use quite a bit.

00:14:35.460 --> 00:14:38.390
And when I created the split view,
it's right in the top left corner.

00:14:38.480 --> 00:14:42.050
I move using the arrow keys,
I move it up two pixels by

00:14:42.050 --> 00:14:44.680
hitting the up arrow key twice,
and I move it left two pixels.

00:14:45.300 --> 00:14:48.890
And then I take the window and resize it.

00:14:49.290 --> 00:14:52.200
until it snaps to where the
Aqua guideline says that it should be,

00:14:52.250 --> 00:14:56.380
and then I move it back down one
pixel and to the right one pixel.

00:14:56.470 --> 00:14:58.600
And that puts the border exactly right.

00:14:58.750 --> 00:15:01.990
It'll look very polished,
and look much more professional.

00:15:02.180 --> 00:15:06.060
So that takes care of the first
part of setting up our view.

00:15:06.260 --> 00:15:10.480
Now we actually need to wire together
our script view and the result view.

00:15:10.540 --> 00:15:14.340
And the way that you do that in interface
builder is you hold down the control key,

00:15:14.340 --> 00:15:17.830
and you click on the script controller
object down here in our objects view.

00:15:18.100 --> 00:15:21.620
And I'm going to drag a
connection up to the script view.

00:15:21.690 --> 00:15:23.450
And you see that it gives
me some feedback that I've

00:15:23.610 --> 00:15:24.400
dragged it to the right thing.

00:15:24.400 --> 00:15:26.700
And when I let go of it,
it's actually going to open

00:15:26.700 --> 00:15:29.350
up the inspector for us.

00:15:29.480 --> 00:15:32.000
See if I can't reposition all this.

00:15:32.060 --> 00:15:33.730
Working in zoom view is so much fun.

00:15:33.980 --> 00:15:35.200
All right.

00:15:35.200 --> 00:15:37.210
So, and let's say I actually lost
my connection when I did that,

00:15:37.210 --> 00:15:38.480
so I'll have to hook it up again.

00:15:38.530 --> 00:15:40.410
And you can see there
it gives me two outlets.

00:15:40.510 --> 00:15:42.120
One is the result view,
and one is the script view.

00:15:42.120 --> 00:15:45.200
So I select the script view
and click the connect button.

00:15:45.320 --> 00:15:47.960
So that's made that connection,
and I need to make one more.

00:15:47.970 --> 00:15:48.020
That's the script view.

00:15:48.020 --> 00:15:51.360
Again, holding the control key,
dragging to the text view.

00:15:51.420 --> 00:15:55.920
And this time it automatically selects
the result view for me and click connect.

00:15:56.000 --> 00:15:58.150
So that takes care of the
connections that we need between

00:15:58.150 --> 00:16:00.020
the script view and the result view.

00:16:00.080 --> 00:16:03.300
What the script controller
does is as I compile or run,

00:16:03.330 --> 00:16:05.840
it will talk to the script controller,
and the script controller will

00:16:05.840 --> 00:16:09.380
take the result and put it
into the result view for us.

00:16:09.420 --> 00:16:11.380
Now we need to work on our table view.

00:16:11.400 --> 00:16:13.140
By default it comes with two columns.

00:16:13.240 --> 00:16:16.240
So what I'm going to do is sort of
drill down into this by selecting it,

00:16:16.240 --> 00:16:17.960
and see if I can get my resizer here.

00:16:17.960 --> 00:16:21.420
It's always fun.

00:16:22.200 --> 00:16:36.500
[Transcript missing]

00:16:37.130 --> 00:16:39.890
And we make sure we don't have
the table-- columns selected.

00:16:39.900 --> 00:16:42.700
We actually want the table view,
and so it's always very important to look

00:16:42.700 --> 00:16:45.210
at the inspector and look at the title,
and it tells us what kind

00:16:45.320 --> 00:16:48.460
of thing we have selected,
so I have the table view selected.

00:16:48.510 --> 00:16:54.070
And I'm going to go ahead and change the
number of columns here in this cell to 5.

00:16:54.450 --> 00:16:57.360
And when I do that,
you see that I now have five columns.

00:16:57.380 --> 00:16:58.400
We're going to do a couple other things.

00:16:58.400 --> 00:17:01.320
We're going to turn on alternating
background for each row,

00:17:01.320 --> 00:17:04.420
and we're going to automatically
hide the scrollers as necessary.

00:17:04.520 --> 00:17:07.390
So as we add more data,
the scroll bars will appear.

00:17:07.420 --> 00:17:11.300
And then we're going to go in here and
just sort of reposition some of these.

00:17:11.380 --> 00:17:12.850
Sort of fill up the space appropriately.

00:17:13.020 --> 00:17:14.950
Oop, don't drag it.

00:17:18.160 --> 00:17:19.090
Okay.

00:17:19.240 --> 00:17:20.390
And there we go.

00:17:20.400 --> 00:17:21.940
A little wider here,
a little wider there.

00:17:21.940 --> 00:17:24.560
Just kind of spread
them out nice and even.

00:17:26.400 --> 00:17:55.100
[Transcript missing]

00:17:56.000 --> 00:17:58.940
The fourth is result.

00:17:58.950 --> 00:18:03.640
And the last one is for our comments.

00:18:04.510 --> 00:18:06.390
So we've got that looking pretty well.

00:18:06.400 --> 00:18:07.940
That takes care of most of the UI.

00:18:07.940 --> 00:18:11.790
The one last thing we need to
do is to select our split view,

00:18:11.790 --> 00:18:15.980
because what we need to do is make sure
that it stretches to fit the window.

00:18:15.980 --> 00:18:18.230
So for instance,
if I go ahead and test this

00:18:18.230 --> 00:18:21.340
interface under the File menu,
Command-R is a shortcut,

00:18:21.420 --> 00:18:24.200
you can see it will actually
an interface builder.

00:18:24.200 --> 00:18:25.460
I have my split views.

00:18:25.460 --> 00:18:29.230
I actually have the script
view is already working.

00:18:29.240 --> 00:18:31.720
I didn't have to write any code,
and it just will work for me.

00:18:31.720 --> 00:18:34.140
I can do the code
completion here as well.

00:18:34.400 --> 00:18:36.300
I can compile as needed.

00:18:36.410 --> 00:18:38.630
Splits look good,
but what you'll notice is

00:18:38.630 --> 00:18:41.800
that when I resize the window,
the content view of the split

00:18:41.830 --> 00:18:43.410
view isn't resizing to fit.

00:18:43.600 --> 00:18:46.580
So let's go ahead and quit the test mode,
and by clicking on the

00:18:46.580 --> 00:18:48.540
little icon or Command-Q,
we'll do that.

00:18:48.740 --> 00:18:54.200
And I'm going to get to my split view,
and again, I check here in my inspector

00:18:54.210 --> 00:18:57.580
that I have it selected,
and go to the size.

00:18:59.240 --> 00:19:01.340
And what we have is the
auto-sizing mechanism here.

00:19:01.340 --> 00:19:05.210
It allows us to tell Cocoa how
it should stretch our views.

00:19:05.370 --> 00:19:07.860
And what we want it to do is we
want it to fill up the entire

00:19:08.000 --> 00:19:09.250
space inside of the window.

00:19:09.260 --> 00:19:10.960
So we turn on both sets of those.

00:19:10.980 --> 00:19:13.320
And again, we can test that very
quickly in interface builder

00:19:13.320 --> 00:19:15.140
so that you can see that,
as I resize,

00:19:15.140 --> 00:19:17.240
now everything stretches and looks great.

00:19:17.460 --> 00:19:19.840
So that takes care of the user interface.

00:19:20.020 --> 00:19:21.880
We won't have to do much more with that.

00:19:21.990 --> 00:19:24.320
And from this point on,
it'll be mostly studio related.

00:19:24.370 --> 00:19:26.180
So this is typical interface builder.

00:19:26.180 --> 00:19:30.430
So this would be the same if I were
doing Cocoa or if I were doing studio.

00:19:30.530 --> 00:19:34.120
So these parts are all the
same things that you work with.

00:19:34.200 --> 00:19:37.150
So let's go ahead and save the
document under the File menu.

00:19:37.170 --> 00:19:38.940
I'll choose Save.

00:19:38.940 --> 00:19:41.380
Now you'll notice that there's
actually an alert that comes up.

00:19:41.400 --> 00:19:43.300
And what it says is that if
I save it in this format,

00:19:43.350 --> 00:19:46.430
which it's saying is
currently set to be pre-10.2,

00:19:46.670 --> 00:19:48.500
then I'll actually lose some data.

00:19:48.520 --> 00:19:51.660
And whenever you're going to be
using new features in the OS or in an

00:19:51.660 --> 00:19:54.940
interface builder in your Cocoa project,
you have to make sure you

00:19:54.940 --> 00:19:56.110
have the right version set.

00:19:56.120 --> 00:20:00.840
So I'm going to click Cancel and
go to the project window here.

00:20:00.860 --> 00:20:03.600
And there's a nib palette
in Tiger on the far right.

00:20:03.860 --> 00:20:06.380
And you'll see that there's a couple
different settings we need to look at.

00:20:06.380 --> 00:20:08.260
One is the nib file format.

00:20:08.270 --> 00:20:12.000
We need to change that
to 10.2 and later format.

00:20:12.040 --> 00:20:13.990
We optionally could use a
text archive if we like,

00:20:13.990 --> 00:20:15.320
but we'll just leave that off.

00:20:15.330 --> 00:20:19.680
And you'll notice here in the bottom of
the window is it says incompatibilities.

00:20:19.680 --> 00:20:24.200
There's seven incompatibilities if we are
setting our earliest target to be 10.2.

00:20:24.200 --> 00:20:26.060
What we need to do is
change that to 10.2.

00:20:26.060 --> 00:20:28.660
And when we do that,
you'll notice that all the

00:20:28.660 --> 00:20:30.400
incompatibilities go away.

00:20:30.400 --> 00:20:32.270
It's a good thing that
if you don't do that,

00:20:32.280 --> 00:20:35.000
most of what we're going to use
today just flat out doesn't work.

00:20:35.000 --> 00:20:37.010
So you need to make sure that
that's set appropriately.

00:20:37.210 --> 00:20:41.220
So now I can go ahead and choose Save.

00:20:41.240 --> 00:20:43.860
And it will save the document for us.

00:20:46.000 --> 00:20:51.700
[Transcript missing]

00:20:52.110 --> 00:20:54.840
And when it's finished,
we can go back over to Xcode.

00:20:54.870 --> 00:20:56.760
And we're going to build and go.

00:20:56.780 --> 00:20:58.610
And I'll just click on
the toolbar item here,

00:20:58.670 --> 00:21:01.820
or I can choose it from the build menu.

00:21:01.850 --> 00:21:04.090
Build and run, I guess we call it now.

00:21:06.050 --> 00:21:11.080
And it's going to build the
application and run it for us.

00:21:11.090 --> 00:21:13.840
Now I'll sort of have to zoom
out so we see the whole thing.

00:21:13.870 --> 00:21:14.720
And hide it.

00:21:14.860 --> 00:21:17.110
So you've noticed, of course,
that we don't have a toolbar yet,

00:21:17.140 --> 00:21:19.060
because we haven't got
around to creating that.

00:21:19.060 --> 00:21:21.570
But I still, again, have my editor here.

00:21:21.630 --> 00:21:23.010
And I can compile that.

00:21:23.140 --> 00:21:25.080
I can't run it without a toolbar yet.

00:21:25.080 --> 00:21:26.340
We have our results view.

00:21:26.340 --> 00:21:29.030
We can see that everything resizes,
so it looks pretty good.

00:21:29.040 --> 00:21:30.790
So that takes care of our first steps.

00:21:30.860 --> 00:21:34.690
So we're going to stop right
there and continue here.

00:21:37.300 --> 00:21:41.520
So, what we did is we went to Xcode,
we created a new project by choosing the

00:21:41.520 --> 00:21:43.450
appropriate template for our product.

00:21:43.610 --> 00:21:47.200
Then we went into Interface
Builder and built its interface.

00:21:47.200 --> 00:21:49.410
And then we wired together the
controller objects as needed,

00:21:49.410 --> 00:21:51.200
and then we built and
tested our application.

00:21:51.200 --> 00:21:52.150
And this is a typical process.

00:21:52.210 --> 00:21:54.930
You go into Interface Builder,
build your interface, go to Xcode,

00:21:54.930 --> 00:21:56.550
build and run, and see how you did.

00:21:57.660 --> 00:22:01.020
Okay, so the next step is to go ahead and
add a toolbar to our application.

00:22:01.020 --> 00:22:02.720
And this is what we're
going to do in this step.

00:22:02.840 --> 00:22:04.580
We're going to add some icon resources.

00:22:04.580 --> 00:22:07.560
So we saw the toolbar in the finished
product had a bunch of different icons.

00:22:07.570 --> 00:22:09.080
So we're going to add
that to the project.

00:22:09.080 --> 00:22:11.430
We're going to add an
AwakeFromNib handler.

00:22:11.430 --> 00:22:13.730
And this is, for those of you that
are Cocoa programmers,

00:22:13.730 --> 00:22:15.580
will recognize the name, AwakeFromNib.

00:22:15.580 --> 00:22:18.890
Anytime something gets loaded from a nib,
a method gets called in Cocoa.

00:22:18.980 --> 00:22:20.080
It's the same thing for Studio.

00:22:20.080 --> 00:22:22.600
If you want that object to
have a handler called for it,

00:22:22.600 --> 00:22:24.570
you just simply turn on AwakeFromNib.

00:22:24.980 --> 00:22:26.560
Then we're going to go in and
we're going to add the code.

00:22:27.570 --> 00:22:29.320
And we're going to add the code
to create a toolbar and its items.

00:22:29.320 --> 00:22:31.370
And then we're going to talk
about and use something,

00:22:31.370 --> 00:22:32.560
a new feature in Tiger.

00:22:32.560 --> 00:22:34.560
It's really an important
concept to understand.

00:22:34.560 --> 00:22:36.550
So we're going to talk about
that for just a minute.

00:22:37.570 --> 00:22:39.560
This is the idea of a script scope.

00:22:39.560 --> 00:22:41.560
So what is a nib script scope?

00:22:41.560 --> 00:22:44.630
Up till Tiger,
every instance of your scripts,

00:22:44.630 --> 00:22:47.520
there would only ever
be one instance of it.

00:22:47.600 --> 00:22:50.560
So for instance,
in a document-based application,

00:22:50.590 --> 00:22:56.540
I would create the first document,
and I had document.AppleScript.

00:22:56.540 --> 00:22:56.540
When it's built,
it actually ends up as document.SCPT.

00:22:56.540 --> 00:23:01.030
is only one instance loaded,
so that when I create another document--

00:23:03.590 --> 00:23:06.080
it would actually
reference the same script.

00:23:06.150 --> 00:23:09.010
I would only ever have one document.svpt.

00:23:09.190 --> 00:23:11.300
And actually that's not a good thing,
because it makes it much

00:23:11.430 --> 00:23:12.770
harder to write your code.

00:23:12.960 --> 00:23:18.230
So if we switch to a nib script scope,
and we have our first document,

00:23:18.230 --> 00:23:19.760
we get one instance.

00:23:19.820 --> 00:23:21.810
And the next time we
create the second document,

00:23:21.820 --> 00:23:24.510
or load the nib again,
we get a new instance of that.

00:23:24.750 --> 00:23:27.570
So you can actually use properties
inside of your script that

00:23:27.940 --> 00:23:29.340
reference things in your document.

00:23:29.430 --> 00:23:31.900
And it's unique to that
individual document.

00:23:31.900 --> 00:23:33.540
It's very powerful.

00:23:33.540 --> 00:23:37.140
It's going to be a much
easier way to write your code.

00:23:38.020 --> 00:23:38.910
And you'll see that as we go.

00:23:38.970 --> 00:23:41.680
And then the last one is there's
actually another scope called Object.

00:23:41.820 --> 00:23:44.940
And so you could actually have a
new instance for every element,

00:23:44.980 --> 00:23:48.510
or whatever you decide to attach it to,
there's a new instance of that script.

00:23:48.670 --> 00:23:52.580
So your code could be much more
modular and take a more natural

00:23:52.670 --> 00:23:55.380
use of scripts inside of Studio.

00:23:55.570 --> 00:23:59.060
So let's see what it takes
to build that script view.

00:23:59.090 --> 00:24:01.320
Or add the toolbar, I'm sorry.

00:24:02.530 --> 00:24:06.750
Now, this is where it gets interesting,
because my code is going to

00:24:06.810 --> 00:24:07.800
look a little differently.

00:24:07.810 --> 00:24:09.680
And hopefully,
I can point out all the differences.

00:24:09.750 --> 00:24:11.860
You'll still be able
to build what you have.

00:24:11.890 --> 00:24:20.120
And it's going to work just the same,
except I'm going to contrast

00:24:20.120 --> 00:24:20.120
the differences and the
improvements between sort of the

00:24:20.120 --> 00:24:20.120
pre-TigerWay versus the TigerWay.

00:24:20.480 --> 00:24:24.580
So let's go ahead and go
back into Interface Builder.

00:24:24.580 --> 00:24:26.800
Double-click on our document nib here.

00:24:26.800 --> 00:24:31.480
And what we need to do is
to select our window object.

00:24:31.480 --> 00:24:35.180
And that's easy enough to do by
clicking it on the Inspector palette.

00:24:36.560 --> 00:24:39.310
And we're actually going to go
through now and name a lot of the

00:24:39.310 --> 00:24:41.940
elements inside of our document nib.

00:24:41.960 --> 00:24:45.380
And to do that, for AppleScript,
you go to the Inspector and choose

00:24:45.380 --> 00:24:48.210
the AppleScript Inspector panel.

00:24:49.140 --> 00:24:50.730
And from this point,
we're going to work in

00:24:50.730 --> 00:24:51.870
this inspector quite a lot.

00:24:51.870 --> 00:24:53.170
We're able to name our objects.

00:24:53.230 --> 00:24:57.090
AppleScript loves to be able to talk
to objects inside of the environment,

00:24:57.090 --> 00:24:59.690
but it has to do that by
a couple different ways.

00:24:59.700 --> 00:25:02.260
It can do it by index,
so I can say document one.

00:25:02.260 --> 00:25:04.670
It can do it by name,
or I can say document foo,

00:25:04.670 --> 00:25:06.910
or I can do it by ID,
which is another unique

00:25:06.910 --> 00:25:08.900
identifier that you can give.

00:25:09.330 --> 00:25:12.140
We're going to be using the
name access to our objects.

00:25:12.140 --> 00:25:14.650
So for our window,
we don't need to actually name

00:25:14.650 --> 00:25:17.670
it in this particular case,
but we do need to turn

00:25:17.770 --> 00:25:20.060
on our nib handler,
our AwakeFromNib.

00:25:20.060 --> 00:25:24.550
So you see that there's a nib group,
and I simply click on AwakeFromNib.

00:25:24.800 --> 00:25:43.300
[Transcript missing]

00:25:46.390 --> 00:25:49.400
So by default, it's always set to global
for backwards compatibility.

00:25:49.460 --> 00:25:51.660
So you'll have to
remember to set it to nib.

00:25:51.910 --> 00:25:55.020
But this, what will happen is that now
when this window is opened,

00:25:55.030 --> 00:25:57.260
I get a unique instance
of the document script.

00:25:57.350 --> 00:26:00.610
It's not going to just
reuse one instance of that.

00:26:00.680 --> 00:26:01.480
It's very important.

00:26:01.480 --> 00:26:02.770
So let's do that.

00:26:02.900 --> 00:26:05.290
Now we need to kind of go back
and name all of our objects.

00:26:05.410 --> 00:26:07.770
What I find is that you
can sort of drill in here,

00:26:07.770 --> 00:26:09.950
click on the various different views.

00:26:09.950 --> 00:26:12.460
I find it much easier to
go to our document window.

00:26:12.460 --> 00:26:15.080
And there's two little controls here.

00:26:15.080 --> 00:26:16.240
One is for an icon view.

00:26:16.300 --> 00:26:17.500
And one is an outline view.

00:26:17.620 --> 00:26:19.940
So I actually switch
it to the outline view.

00:26:20.020 --> 00:26:22.880
And if you hold the Option key
down and click on the disclosure

00:26:22.880 --> 00:26:25.060
triangle for NSWindow,
it'll automatically

00:26:25.060 --> 00:26:26.230
expand all the children.

00:26:26.240 --> 00:26:29.980
So now it's very easy for me to
see the structure of my nib and

00:26:29.990 --> 00:26:32.310
go name things appropriately.

00:26:32.460 --> 00:26:34.490
And so what we need to do
is name our split view.

00:26:34.710 --> 00:26:36.310
And so if I go too fast, let me know.

00:26:36.600 --> 00:26:38.060
We're going to select
the split view here.

00:26:38.060 --> 00:26:40.160
I verify that I've got
the split view selected.

00:26:40.190 --> 00:26:41.590
And we're going to name this main.

00:26:41.660 --> 00:26:45.710
It's all lowercase, M-A-I-N.

00:26:45.710 --> 00:26:45.710
All right?

00:26:46.690 --> 00:26:48.990
Now,
you'll see that here's our script view,

00:26:49.190 --> 00:26:51.920
our result view as a text view,
and they're inside of scroll views,

00:26:51.920 --> 00:26:54.410
and in order to access them,
we need to name all of them.

00:26:54.430 --> 00:26:58.370
And the technique that I use is
I named the script view-- we're

00:26:58.370 --> 00:27:01.730
going to use a lowercase script,
capital V for view.

00:27:01.830 --> 00:27:04.440
So I'm going to name that script
view simply "script view."

00:27:04.550 --> 00:27:08.340
And I always name the scroll view
that it contains the same thing,

00:27:08.340 --> 00:27:11.390
so I don't have to think about
what it's actually named.

00:27:11.510 --> 00:27:15.910
And so I'm just going to copy and
paste that for that scroll view.

00:27:16.270 --> 00:27:18.280
Let's go down to the text view.

00:27:18.350 --> 00:27:21.180
And we're going to name this
one result view-- again,

00:27:21.180 --> 00:27:26.850
lowercase result,
uppercase V for view-- and copy that.

00:27:26.930 --> 00:27:29.620
And select the scroll
view for the result view,

00:27:29.690 --> 00:27:32.120
and name it result view.

00:27:32.160 --> 00:27:35.200
All right, the last piece down
here is the table view.

00:27:35.450 --> 00:27:39.460
And we're going to call
this one script table.

00:27:40.070 --> 00:27:43.860
Again, lowercase script,
uppercase T for table.

00:27:43.920 --> 00:27:47.350
And we copy that,
name the outline of the view

00:27:47.380 --> 00:27:51.320
that it's-- or the school view
that it's in to script table.

00:27:52.400 --> 00:27:54.400
All right.

00:27:54.400 --> 00:27:56.760
Everybody keeping up?

00:27:56.780 --> 00:27:58.800
We awake?

00:27:58.800 --> 00:27:59.360
Okay, great.

00:27:59.360 --> 00:28:01.600
So we have our table columns.

00:28:01.600 --> 00:28:04.300
We need to name these table columns
as well so that our data source

00:28:04.300 --> 00:28:07.260
will be able to find the appropriate
column when we get to that point.

00:28:07.480 --> 00:28:11.920
So I select the first one,
and that's date.

00:28:11.970 --> 00:28:15.560
And we're going to prepend all
of these with a lowercase script.

00:28:15.560 --> 00:28:15.560
So it's just script and then date.

00:28:15.880 --> 00:28:17.830
So I'm going to copy, actually,
the script so I don't have

00:28:17.840 --> 00:28:19.100
to retype it every time.

00:28:19.100 --> 00:28:24.300
We're going to select the name column,
script, paste that in,

00:28:24.300 --> 00:28:26.180
uppercase N for name.

00:28:26.350 --> 00:28:27.800
Do the same for source.

00:28:27.800 --> 00:28:31.050
I typed it.

00:28:31.170 --> 00:28:33.000
I forgot I can paste.

00:28:33.000 --> 00:28:35.120
All right, the result.

00:28:39.080 --> 00:28:40.570
And the last one is the comments.

00:28:40.570 --> 00:28:42.030
Did I make any mistakes, Sal?

00:28:42.030 --> 00:28:42.780
Am I all right?

00:28:42.780 --> 00:28:43.160
Okay.

00:28:43.550 --> 00:28:44.030
Everybody there?

00:28:44.140 --> 00:28:47.450
Because if you don't have these right,
your script's not going to work.

00:28:47.450 --> 00:28:49.960
And unfortunately,
we won't be able to come around and

00:28:49.960 --> 00:28:53.070
get your code working like we do
in our normal early bird sessions.

00:28:53.070 --> 00:28:54.920
So hopefully you've got all that.

00:28:56.650 --> 00:28:59.420
And also remember,
in the session material,

00:28:59.420 --> 00:29:00.760
we have all of the steps.

00:29:00.850 --> 00:29:03.090
And each step is the end of that step.

00:29:03.230 --> 00:29:05.630
So if you get lost, you can always,
when we finish up at

00:29:05.630 --> 00:29:08.520
step one or step two,
you can grab the last one prior to that.

00:29:08.600 --> 00:29:10.490
That puts you at the beginning
point or at the end point.

00:29:10.500 --> 00:29:12.440
So if you have a problem,
just go up to the next

00:29:12.440 --> 00:29:13.750
step and start from there.

00:29:14.380 --> 00:29:15.740
So let's go ahead and save that.

00:29:15.820 --> 00:29:18.960
And what we need to do is to go
ahead and implement our Awake

00:29:18.960 --> 00:29:20.920
from Nib handler that we created.

00:29:20.920 --> 00:29:23.930
So I'm going to go ahead and
just make sure that we've got

00:29:23.930 --> 00:29:25.670
that on our window object.

00:29:26.430 --> 00:29:27.080
And here it's -- go ahead.

00:29:27.080 --> 00:29:29.080
We've got our Nib and
we've got our document.

00:29:29.130 --> 00:29:31.510
And it's set to the
script -- scope of Nib.

00:29:31.710 --> 00:29:34.420
And so I'm going to go ahead
and click on the edit button.

00:29:34.430 --> 00:29:37.360
And this will take me back.

00:29:38.000 --> 00:29:46.600
[Transcript missing]

00:29:47.280 --> 00:29:48.200
Okay.

00:29:48.200 --> 00:29:50.000
And you can see that I have
my Awake from Nib handler.

00:29:50.000 --> 00:29:52.200
It was automatically inserted
to the script for me.

00:29:52.200 --> 00:29:56.170
I didn't have to remember what its name
was or what the actual parameters to it.

00:29:56.220 --> 00:29:57.140
It just inserts it for me.

00:29:57.200 --> 00:30:02.580
And I am going to use my
fancy-dancy demo monkey here.

00:30:02.830 --> 00:30:05.200
And I'm going to actually add a
piece of code that you don't have,

00:30:05.200 --> 00:30:07.270
and we're going to talk about
that here in just a second.

00:30:07.340 --> 00:30:10.300
So I'm going to paste that in.

00:30:10.730 --> 00:30:13.990
What I've done in this is taking
advantage of that nib scope,

00:30:13.990 --> 00:30:16.530
and I've set up some properties,
because these are the objects

00:30:16.600 --> 00:30:19.450
that I'm going to communicate
with regularly in my script.

00:30:19.550 --> 00:30:22.760
I'm going to be working with the data
source that's behind the table view.

00:30:22.810 --> 00:30:24.850
I'm going to be working
with the script view,

00:30:24.880 --> 00:30:26.740
the result view, and the table view.

00:30:26.840 --> 00:30:29.570
And so by doing this,
I can have these references.

00:30:29.750 --> 00:30:31.850
And in the AwakeFromNib,
we assign those references,

00:30:31.920 --> 00:30:33.160
and we only need to do it once.

00:30:33.360 --> 00:30:35.350
And then whenever I need to
talk to one of those objects

00:30:35.350 --> 00:30:38.620
throughout the rest of the script,
it's just a matter of

00:30:38.620 --> 00:30:40.130
using this property.

00:30:40.240 --> 00:30:43.650
Now, that's compared to the code that you
actually will have on your sample,

00:30:43.650 --> 00:30:48.290
where it will have, like,
script view foo of scroll

00:30:48.290 --> 00:30:51.380
view bar of window main,
and after a while,

00:30:51.380 --> 00:30:53.220
it just becomes a foobar mess.

00:30:53.220 --> 00:30:56.540
So it's -- and you have to keep
those updated after a while.

00:30:56.540 --> 00:30:58.610
Every time you change the hierarchy,
you would have to go through every

00:30:58.610 --> 00:31:00.540
instance that you use that and fix it.

00:31:00.670 --> 00:31:02.640
So this is a much better technique.

00:31:02.640 --> 00:31:04.990
And remember that you get -- this
is a unique instance of this for

00:31:05.140 --> 00:31:08.680
every document that's created
because we use that nib scope.

00:31:08.680 --> 00:31:09.650
All right.

00:31:09.680 --> 00:31:11.220
Let's go down to the AwakeFromNib.

00:31:11.220 --> 00:31:13.830
Now this code you do have,
and it's in your outline view,

00:31:13.950 --> 00:31:16.590
or you can grab that
code and paste it in.

00:31:16.810 --> 00:31:19.590
And I'm going to go ahead and --

00:31:19.900 --> 00:31:22.920
quickly type in this code,
and then we're going to walk through it.

00:31:23.030 --> 00:31:24.800
So I'll compile it.

00:31:24.800 --> 00:31:28.430
Has everybody got the code copied in?

00:31:29.530 --> 00:31:29.950
All right.

00:31:30.120 --> 00:31:33.220
So your code will look
a little more like this,

00:31:33.250 --> 00:31:35.350
that you just pasted in.

00:31:35.630 --> 00:31:38.140
from this point on down here,
make toolbar.

00:31:38.140 --> 00:31:41.150
It's very much the same code,
so this will look similar

00:31:41.150 --> 00:31:44.370
as we're walking through it,
and I'll try to highlight the

00:31:44.430 --> 00:31:46.670
differences if I can remember them.

00:31:46.770 --> 00:31:48.550
All right,
so the first thing we do is we're

00:31:48.600 --> 00:31:49.890
going to make a new toolbar.

00:31:49.890 --> 00:31:52.250
This is a new object in
Tiger for AppleScript Studio,

00:31:52.260 --> 00:31:54.970
and we use the typical make new,
and what type of thing we

00:31:55.040 --> 00:31:57.930
want is to make a new toolbar,
and it has several properties.

00:31:57.980 --> 00:31:59.220
One of them is the name.

00:31:59.540 --> 00:32:00.870
This one's very important.

00:32:00.870 --> 00:32:03.980
You have to have a unique
identifier for your toolbar.

00:32:03.980 --> 00:32:07.020
In this case, we just call it the
document toolbar identifier,

00:32:07.020 --> 00:32:10.080
and there's various
other properties here.

00:32:10.080 --> 00:32:12.900
Now, you may not understand or
know what all the various

00:32:12.900 --> 00:32:16.070
properties are for your toolbar,
so there's actually a resource

00:32:16.290 --> 00:32:20.340
as part of your project,
and if you look in the resources section,

00:32:20.340 --> 00:32:22.930
there's an AppleScript kit definition,
SDEF,

00:32:23.000 --> 00:32:26.900
and that actually uses our new dictionary
viewer that's a part of the script

00:32:27.010 --> 00:32:30.740
editor as well as... part of Xcode,
and what I love about it is it's

00:32:30.740 --> 00:32:34.100
very simple to find things now,
so if I want to learn about a toolbar,

00:32:34.250 --> 00:32:38.410
I just simply go to the search field,
type in toolbar, and I can see that I've

00:32:38.410 --> 00:32:39.610
got a toolbar class.

00:32:39.620 --> 00:32:43.130
Now, I'll zoom this up so you can see
a little better all the various

00:32:43.130 --> 00:32:45.420
properties that a toolbar knows about.

00:32:45.440 --> 00:32:48.870
So these are the allowed identifiers,
default identifiers,

00:32:48.880 --> 00:32:52.410
we're going to fill that out,
what the display mode currently is,

00:32:52.410 --> 00:32:55.400
our size mode,
and whether or not it's visible.

00:32:55.400 --> 00:32:57.400
So that's all controllable
through AppleScript.

00:32:57.400 --> 00:32:57.960
It's very simple.

00:32:57.980 --> 00:32:58.860
to use.

00:32:59.030 --> 00:33:01.420
So I'm going to move back to the code.

00:33:02.400 --> 00:35:37.000
[Transcript missing]

00:35:37.440 --> 00:35:38.300
Anyone?

00:35:38.460 --> 00:35:39.320
The window, exactly.

00:35:39.390 --> 00:35:41.750
So we attach the Awake from
Nib handler to the window,

00:35:41.760 --> 00:35:44.080
and when it gets called,
the object is the window.

00:35:44.110 --> 00:35:47.080
So we are just simply getting the
full path to that script view.

00:35:47.080 --> 00:35:49.810
Now, I actually could have written this,
so I didn't even do that.

00:35:49.810 --> 00:35:52.080
I could have attached the Awake
from Nib to the script view,

00:35:52.150 --> 00:35:54.600
checked its name,
and then assigned the property.

00:35:54.600 --> 00:35:57.020
And in the entire script,
I would never have to say,

00:35:57.140 --> 00:35:59.440
blah-de-blah of blah-de-blah
of blah-de-blah.

00:35:59.440 --> 00:36:01.650
But just to make this
simpler to walk through,

00:36:01.660 --> 00:36:03.800
I've showed you the difference there.

00:36:04.730 --> 00:36:07.640
Okay, now we've got those assigned,
and it actually does make one thing here,

00:36:07.640 --> 00:36:08.700
and it's a call method.

00:36:08.700 --> 00:36:13.370
And the controller object that we drug in
is actually attached to the script view.

00:36:13.380 --> 00:36:16.080
And I'm using what's known
as an Objective-C backdoor

00:36:16.080 --> 00:36:17.520
for AppleScript Studio.

00:36:17.520 --> 00:36:20.360
And I've never been so grateful in
my life when I added this feature,

00:36:20.360 --> 00:36:23.470
because it's been one way to work around,
you know, things that we didn't have

00:36:23.470 --> 00:36:25.040
completely covered yet in Studio.

00:36:25.040 --> 00:36:28.040
So I can always point you to
this thing called call method.

00:36:28.040 --> 00:36:30.570
And what it does is it sends
an Objective-C message to

00:36:30.740 --> 00:36:33.400
the script view and says,
give me your controller.

00:36:33.400 --> 00:36:34.580
And then I just simply send it.

00:36:34.670 --> 00:36:36.690
save a reference to that.

00:36:36.760 --> 00:36:39.370
All right,
now let's look at the toolbar items.

00:36:39.720 --> 00:36:42.220
So I'm making each new toolbar item.

00:36:42.270 --> 00:36:46.300
And I make it at the end of the existing
toolbar items of the DocumentToolbar.

00:36:46.320 --> 00:36:49.710
Again, the DocumentToolbar was the
thing that we just created.

00:36:49.870 --> 00:36:52.500
And it as well has many
different properties.

00:36:52.540 --> 00:36:54.390
Here's a very important one,
the identifier.

00:36:54.540 --> 00:36:57.450
Again, this identifier needs to
match all the way through.

00:36:57.590 --> 00:36:59.600
So this is the one for the compile.

00:36:59.600 --> 00:37:03.620
This is the name that I give it, compile,
if I want to refer to that

00:37:03.630 --> 00:37:05.980
toolbar item in the script.

00:37:05.980 --> 00:37:07.620
It's actually called compile item.

00:37:07.640 --> 00:37:08.530
This is the label.

00:37:08.680 --> 00:37:11.990
This is what the user sees in the
toolbar when they have it showing.

00:37:12.110 --> 00:37:13.160
So that's that label.

00:37:13.360 --> 00:37:15.590
The palette label also
has a different entry.

00:37:15.920 --> 00:37:20.620
So you can actually have a different
name inside of the customization palette.

00:37:20.640 --> 00:37:24.240
A tool tip, which in this case is
called compile script.

00:37:24.270 --> 00:37:25.880
That's also dynamically changeable.

00:37:25.990 --> 00:37:28.980
So script, you could actually change
your tool tip as you like.

00:37:29.030 --> 00:37:32.000
And we have image name
and compile script.

00:37:32.020 --> 00:37:35.250
Now,
so for every toolbar item in our toolbar,

00:37:35.260 --> 00:37:37.530
we want to make sure it
has the appropriate icon.

00:37:37.770 --> 00:37:39.220
So we actually haven't added those yet.

00:37:39.340 --> 00:37:43.360
So let's go ahead and do that
right now before I forget.

00:37:43.400 --> 00:37:46.520
And if you'll go into
your studio session,

00:37:47.430 --> 00:37:51.570
There is a section,
a folder here called Icon Resources.

00:37:51.590 --> 00:37:54.720
Okay, so you want to go to the finder,
find that Icon Resources folder,

00:37:54.720 --> 00:37:59.740
and I'm going to simply copy that folder,
and I'm going to go to my home directory,

00:37:59.740 --> 00:38:03.940
and here's the ScriptView project that
I'm working on right at the moment,

00:38:04.140 --> 00:38:06.810
and I'm going to paste
those Icon Resources in.

00:38:06.960 --> 00:38:11.300
So that just copied the folder,
put it over into my project on disk.

00:38:11.450 --> 00:38:13.920
Now I actually needed
to add that to Xcode.

00:38:13.920 --> 00:38:16.300
Let's see if I can zoom in here.

00:38:16.300 --> 00:38:17.100
Well, it won't work.

00:38:17.300 --> 00:38:19.800
So let's, I'm going to grab that
Icon Resources folder,

00:38:20.070 --> 00:38:23.860
and I'm going to drag it under the
Resources folder in my project.

00:38:23.860 --> 00:38:25.920
And when I do that,
it simply asks if I should go

00:38:25.920 --> 00:38:27.060
ahead and create these groups.

00:38:27.060 --> 00:38:29.970
So I go ahead and click
on the Add button.

00:38:32.100 --> 00:38:34.930
TIFFs is the preferred,
but you can use pings.

00:38:34.950 --> 00:38:36.120
It should work just fine.

00:38:36.120 --> 00:38:39.170
So I just happened to have TIFFs
from--a lot of these actually come

00:38:39.170 --> 00:38:42.820
right out of the script editor,
so that's what we use there.

00:38:42.820 --> 00:38:45.530
So I can see that I actually
have my compile script TIFF and

00:38:45.530 --> 00:38:47.210
this has the compile tool.

00:38:47.210 --> 00:38:49.410
So I'm going to go back to my script.

00:38:49.410 --> 00:38:53.340
And you can see that all I simply
do is I reference that TIFF or that

00:38:53.340 --> 00:38:55.650
image right here with the image name.

00:38:55.790 --> 00:38:57.920
You can actually--there's
another property called Image,

00:38:57.970 --> 00:39:00.820
and you can load your image any
other way and just simply set that.

00:39:00.820 --> 00:39:02.840
But this is the easiest way to do that.

00:39:02.840 --> 00:39:04.720
So we do that for that.

00:39:04.720 --> 00:39:08.140
Now here's the new feature
in--also in Sight of Tiger.

00:39:08.140 --> 00:39:09.110
And this is target action.

00:39:09.180 --> 00:39:10.950
We actually couldn't
reuse the word action.

00:39:10.970 --> 00:39:12.260
We had to call it action method.

00:39:12.400 --> 00:39:16.080
Had some symmetry with call method,
so it was okay.

00:39:16.080 --> 00:39:17.650
In Interface Builder,
when you wire up like a

00:39:17.650 --> 00:39:20.260
menu item to an object,
you're actually setting up

00:39:20.260 --> 00:39:21.700
what's called the target action.

00:39:21.700 --> 00:39:25.280
The message is sent to the target
and it sends that particular action.

00:39:25.280 --> 00:39:27.260
So in Studio, I can do the same thing.

00:39:27.260 --> 00:39:29.780
I can say that when the user
clicks the compile button,

00:39:29.780 --> 00:39:30.160
so that's the same thing.

00:39:30.160 --> 00:39:30.160
So I can say that when the
user clicks the compile button,

00:39:30.160 --> 00:39:30.160
so that's the same thing.

00:39:30.160 --> 00:39:30.200
So I can say that when the
user clicks the compile button,

00:39:30.280 --> 00:39:33.230
send this method--it's an
Objective-C method on that

00:39:33.230 --> 00:39:35.020
object called compile script.

00:39:35.020 --> 00:39:37.220
And it sends it to that target.

00:39:37.220 --> 00:39:38.560
So at this point,
I don't have to do anything

00:39:38.560 --> 00:39:39.740
else with that button.

00:39:39.750 --> 00:39:41.740
All the code--it'll
all be handled for me.

00:39:41.740 --> 00:39:45.800
I don't have to handle responding to
users clicking on that toolbar item.

00:39:45.800 --> 00:39:48.450
And we do the same thing for the stop.

00:39:48.450 --> 00:39:51.100
And we do the same thing for record.

00:39:52.600 --> 00:40:14.100
[Transcript missing]

00:40:18.100 --> 00:40:19.000
Sure.

00:40:19.000 --> 00:40:22.070
You just write that script,
and we'll show how you would do that.

00:40:22.190 --> 00:40:23.030
Okay, that would be part of that.

00:40:23.080 --> 00:40:25.080
So let's go ahead and
look at the other types.

00:40:25.170 --> 00:40:28.000
Now, you'll notice that for the
standard script editor stuff,

00:40:28.000 --> 00:40:29.810
it's all doing it with target action.

00:40:29.810 --> 00:40:34.260
But the last three that we have here,
I don't have target action.

00:40:34.260 --> 00:40:37.610
It's the same setup for everything else,
but there is no target action.

00:40:37.610 --> 00:40:40.370
And there's another way that we
respond to toolbar items that don't

00:40:40.450 --> 00:40:42.210
have target actions assigned to them.

00:40:42.280 --> 00:40:43.980
But we'll come back to
that in the next step.

00:40:44.210 --> 00:40:48.040
And the last thing that we do is that,
what is the object again?

00:40:48.040 --> 00:40:48.910
The window.

00:40:49.050 --> 00:40:51.680
The tool,
the window has a property called toolbar.

00:40:51.720 --> 00:40:54.880
We need to assign the toolbar
to the property to the window.

00:40:54.880 --> 00:40:58.080
And we just simply say
set toolbar of the window,

00:40:58.080 --> 00:40:59.880
or the object in this case,
to document toolbar.

00:40:59.880 --> 00:41:01.630
So I'm going to go ahead and save this.

00:41:01.670 --> 00:41:05.670
And we're going to choose,
click on the build and run.

00:41:06.520 --> 00:41:08.410
and see if we made any mistakes.

00:41:08.690 --> 00:41:11.400
It's not outside the
realm of possibilities.

00:41:11.450 --> 00:41:12.400
It's never happened to me before.

00:41:12.400 --> 00:41:14.390
It's un-possible.

00:41:15.580 --> 00:41:17.320
Okay, so our application runs,
and there you go.

00:41:17.320 --> 00:41:18.080
We've got a toolbar.

00:41:18.080 --> 00:41:21.490
You can see that I can actually
click on... I think I've got it set.

00:41:21.590 --> 00:41:22.760
Yeah, so I'm going to zoom in here.

00:41:24.080 --> 00:41:26.460
And I can click on the Customize palette,
drag it around,

00:41:26.460 --> 00:41:28.110
all the standard behaviors.

00:41:28.280 --> 00:41:29.530
Show/Hide,
you can actually use a little trick

00:41:29.610 --> 00:41:33.270
of clicking on the Option key,
I believe.

00:41:33.810 --> 00:41:35.420
And we can show and hide it.

00:41:35.500 --> 00:41:38.870
And we can actually even go ahead
into our script editor area,

00:41:38.880 --> 00:41:42.100
type current date,
and click on the compile button.

00:41:42.100 --> 00:41:44.800
And you can see what it
did is it used the target,

00:41:44.800 --> 00:41:47.110
talked to the script controller,
and said compile script.

00:41:47.350 --> 00:41:49.270
And it took care of all the code for me.

00:41:49.280 --> 00:41:50.970
Now the cool part is I can click run.

00:41:51.000 --> 00:41:53.400
And you'll notice that I have a result.

00:41:53.740 --> 00:41:56.560
Again, that script controller took
care of all that work for me.

00:41:56.560 --> 00:41:57.670
I didn't have to do a single thing.

00:41:57.720 --> 00:42:00.350
So with almost very little code,
actually all the code

00:42:00.440 --> 00:42:03.320
was just add the toolbar,
I can have a script editor that knows

00:42:03.320 --> 00:42:05.720
how to do everything that script
editor does outside of saving it.

00:42:05.820 --> 00:42:08.460
So that will take care of that section.

00:42:08.460 --> 00:42:09.390
So let's go ahead and go back.

00:42:09.490 --> 00:42:11.380
Quit the application.

00:42:11.400 --> 00:42:14.490
And we'll take a look at our next step.

00:42:17.820 --> 00:42:19.190
Okay, so what did we learn?

00:42:19.210 --> 00:42:21.440
We learned how easy it
is to add icon resources.

00:42:21.440 --> 00:42:22.750
They could be any image type.

00:42:22.830 --> 00:42:24.250
I had TIFFs in this particular case.

00:42:24.320 --> 00:42:27.020
I added a wake from nib
handler to the window so that

00:42:27.020 --> 00:42:29.990
when that document is loaded,
I have an opportunity to

00:42:30.060 --> 00:42:31.630
do something in my script.

00:42:32.960 --> 00:42:33.950
Studio is really, really based on that.

00:42:33.960 --> 00:42:37.450
It's being able to say, "Oh,
I want to know when some event happens,

00:42:37.460 --> 00:42:38.890
when the user does something particular.

00:42:38.960 --> 00:42:40.960
I want to know when he
clicks on something.

00:42:40.990 --> 00:42:42.850
I want to know when he opens
something." You just need to

00:42:42.850 --> 00:42:44.700
find the right event handler,
click on it,

00:42:44.700 --> 00:42:47.250
and attach it to the right script,
and then you'll get called

00:42:47.250 --> 00:42:48.500
at the appropriate times.

00:42:48.520 --> 00:42:51.340
So we also looked to see how
easy it was to create a toolbar.

00:42:51.340 --> 00:42:52.430
We do that in script.

00:42:52.520 --> 00:42:54.360
And then at the last,
we talked a bit about

00:42:54.360 --> 00:42:55.960
learning about script scopes.

00:42:55.960 --> 00:43:01.120
Our third step is we need to wire
up the rest of the toolbar items.

00:43:01.270 --> 00:43:01.880
So we only did the toolbar items.

00:43:02.960 --> 00:43:04.010
So we only did the standard
script editor pieces.

00:43:04.060 --> 00:43:07.180
We need to do the add and delete
record and the erase item.

00:43:07.400 --> 00:43:11.750
And then we're going to hook up our table
view so it actually starts to function.

00:43:12.080 --> 00:43:13.700
So this is what we're
going to do in this step.

00:43:13.740 --> 00:43:16.080
We're going to modify the
wake from nib handler.

00:43:16.080 --> 00:43:19.480
We're going to attach that
handler to yet another object.

00:43:19.480 --> 00:43:22.600
We're going to add a click toolbar
item handler so that this will get

00:43:22.760 --> 00:43:25.440
called whenever the user clicks
on a toolbar item that doesn't

00:43:25.440 --> 00:43:26.790
already have a target action.

00:43:26.940 --> 00:43:30.370
So this is where you'll respond to
something happening in your toolbar.

00:43:30.480 --> 00:43:33.020
And then we're going to add
a selections changed handler.

00:43:33.050 --> 00:43:36.340
We want this to be when the
user clicks on the table view,

00:43:36.380 --> 00:43:38.570
and as they click,
we want to update the script

00:43:38.570 --> 00:43:39.960
source out of that table view.

00:43:39.960 --> 00:43:42.350
So we're going to wire all that
up together and then hook up the

00:43:42.350 --> 00:43:43.900
data source behind the table view.

00:43:43.990 --> 00:43:46.460
So let's go back to the hands-on.

00:43:46.530 --> 00:43:48.980
Is everybody staying with me?

00:43:49.000 --> 00:43:49.640
Doing all right?

00:43:49.640 --> 00:43:51.420
OK, cool.

00:43:54.680 --> 00:43:56.950
All right.

00:43:57.070 --> 00:43:59.570
So now, hopefully I don't get lost
here in the next step.

00:43:59.760 --> 00:44:03.760
So let's go back to our--
back into Interface Builder.

00:44:03.820 --> 00:44:05.310
I'll actually get rid of this palette.

00:44:05.320 --> 00:44:07.780
I don't need that.

00:44:08.240 --> 00:44:12.090
And we are going to add an Awake
from Nib to our table view.

00:44:12.100 --> 00:44:15.200
So again, I find it simplest.

00:44:15.900 --> 00:44:19.400
to-- see if I can scroll over and
see both of these things at the same

00:44:19.400 --> 00:44:22.700
time-- to just go ahead and select our
table view here in the Outline view.

00:44:22.700 --> 00:44:25.450
It's a lot easier than trying to
double-click down into the right

00:44:25.450 --> 00:44:27.120
view so that I know I have that.

00:44:27.180 --> 00:44:32.560
Going to go to the Apple Script panel,
which is typically Command 8.

00:44:32.580 --> 00:44:33.940
It isn't always, unfortunately.

00:44:33.960 --> 00:44:36.860
So you sometimes will have to
make sure you're on the right one.

00:44:36.890 --> 00:44:38.520
And we see that it's
already set up for that.

00:44:38.520 --> 00:44:42.430
And I'm going to go down to the Nib
Group and click on Awake from Nib.

00:44:42.450 --> 00:44:45.560
And we're going to assign
it to the document script.

00:44:45.590 --> 00:44:50.820
And again, we need to make sure that the
scope is set to Nib and not global.

00:44:50.850 --> 00:44:52.040
All right.

00:44:52.050 --> 00:44:54.190
Let's go ahead and click Edit.

00:44:56.260 --> 00:45:00.200
And what it does is it takes me
back to my Wake From Nib handler

00:45:00.200 --> 00:45:02.590
and selects all the contents,
but we're actually going to add

00:45:02.970 --> 00:45:07.580
something at the beginning of this.

00:45:07.580 --> 00:45:07.580
And I

00:45:07.840 --> 00:45:10.900
I get to just hit command
period and it just works for me.

00:45:10.900 --> 00:45:13.980
You'll have to drag it in
from your outline document.

00:45:13.980 --> 00:45:17.060
And that adds some,
it's actually a big if else state.

00:45:17.060 --> 00:45:20.860
And I need to make sure that I have an
end if at the bottom of this handler.

00:45:20.860 --> 00:45:23.280
So I'll go down to the bottom.

00:45:23.300 --> 00:45:27.520
And just after the set toolbar,
I'm going to type in end if.

00:45:27.520 --> 00:45:28.800
And then I'll compile that.

00:45:28.800 --> 00:45:31.800
Hitting the enter key is
a shortcut for compiling.

00:45:31.800 --> 00:45:33.240
And let's go back up
and look at the code.

00:45:33.240 --> 00:45:35.620
So everything that's in the else
statement was what we had there before.

00:45:35.620 --> 00:45:38.500
So we just put a big if
block up before that.

00:45:38.500 --> 00:45:41.840
And we use a technique that
also is very common in Studio.

00:45:41.990 --> 00:45:45.580
Since we actually don't get a
different handler for each object,

00:45:45.610 --> 00:45:47.660
it's using the same handler name.

00:45:47.890 --> 00:45:48.880
It's awake from nib.

00:45:48.880 --> 00:45:51.480
All of the awake from nibs go to this
handler that's attached to that script.

00:45:51.480 --> 00:45:53.430
So what you do is you get
the name of the object.

00:45:53.530 --> 00:45:55.040
That's why it's important to name it.

00:45:55.040 --> 00:45:58.340
And the first thing we check is we say
if the name is equal to script table.

00:45:58.340 --> 00:46:01.890
That way we know that this particular
object that's being called for the

00:46:01.890 --> 00:46:04.470
awake from nib is the script table.

00:46:04.480 --> 00:46:05.430
And we again use our reference.

00:46:05.520 --> 00:46:07.400
Now, you don't have that reference.

00:46:07.400 --> 00:46:10.490
I do as I was showing the new technique.

00:46:10.580 --> 00:46:11.520
But you'll have that there.

00:46:11.520 --> 00:46:14.020
And we create a new data source.

00:46:14.020 --> 00:46:16.620
And we do that by simply
saying set up our reference,

00:46:16.620 --> 00:46:20.370
which happens again to be data source,
to make new data source at the end of

00:46:20.370 --> 00:46:22.400
data sources with the property name.

00:46:22.400 --> 00:46:26.060
So I actually, once I create this,
I can always access that particular

00:46:26.060 --> 00:46:29.010
data source by using it by name.

00:46:29.460 --> 00:46:31.850
Now, the next thing we do is
create all the data columns.

00:46:31.850 --> 00:46:36.900
And we make a new data column at the
end of data columns of data source.

00:46:36.900 --> 00:46:39.000
Data columns is an
element of data source,

00:46:39.190 --> 00:46:41.060
and with some various properties.

00:46:41.060 --> 00:46:42.710
And you'll notice some similarities.

00:46:42.710 --> 00:46:47.350
We've named each data column to
match the name of each table column.

00:46:47.370 --> 00:46:50.990
So if you misnamed these,
they won't be able to find each other,

00:46:50.990 --> 00:46:54.780
and you'll have data that won't
show up in a particular column.

00:46:54.780 --> 00:46:56.490
So that's a typical thing.

00:46:56.490 --> 00:46:57.990
So when you build and
run your application,

00:46:57.990 --> 00:46:59.210
you notice that there's a column.

00:46:59.370 --> 00:47:01.800
If you have a column missing its data,
that's a good clue.

00:47:01.800 --> 00:47:04.400
Go make sure that you've created
the data column with the same

00:47:04.400 --> 00:47:05.630
name as the table column.

00:47:05.640 --> 00:47:08.040
And actually, in Tiger,
it's even simpler than this.

00:47:08.040 --> 00:47:10.080
You don't actually have
to create a data source,

00:47:10.100 --> 00:47:12.180
and you don't have to
create the data columns.

00:47:12.180 --> 00:47:15.550
If you have a list of records,
an AppleScript list of records,

00:47:15.650 --> 00:47:18.020
or even a list of lists,
you can simply say,

00:47:18.020 --> 00:47:20.770
set content of table view
to that list of records.

00:47:20.930 --> 00:47:22.820
And it will create the data source.

00:47:22.820 --> 00:47:25.790
It creates all the data columns
and all the data rows and

00:47:25.840 --> 00:47:27.680
all the data cells for you.

00:47:27.790 --> 00:47:30.740
So one call can populate
the entire table view.

00:47:30.760 --> 00:47:33.730
And we're actually going to see
how that works a little later.

00:47:33.850 --> 00:47:35.440
And I do this for all
of the data columns.

00:47:35.440 --> 00:47:36.260
So I have five of them.

00:47:36.260 --> 00:47:39.700
I have the script date, script name,
script source, script result,

00:47:39.700 --> 00:47:41.690
and script comments.

00:47:41.970 --> 00:47:44.250
Now, we actually want this
data source to be sorted.

00:47:44.300 --> 00:47:46.130
We want to be able to click
on the various table columns

00:47:46.130 --> 00:47:48.450
and change the sort order,
so we have to tell the data source

00:47:48.600 --> 00:47:49.770
that it's going to be sorted.

00:47:49.850 --> 00:47:50.890
By default, it's false.

00:47:51.000 --> 00:47:52.280
We turn it to true.

00:47:52.340 --> 00:47:55.370
We want to set the current
sort column of the data source

00:47:55.370 --> 00:47:56.980
to the script date column.

00:47:57.180 --> 00:48:00.260
So we're going to use the first
column for our initial sort column.

00:48:00.490 --> 00:48:04.920
And then again, as we've done before,
we simply assign the data source,

00:48:04.920 --> 00:48:06.660
and the object represents

00:48:07.690 --> 00:48:09.620
What does it represent this time?

00:48:09.730 --> 00:48:10.900
In this case, it's the table view.

00:48:10.900 --> 00:48:13.240
So we're in the else block,
or the if block, for the table view.

00:48:13.240 --> 00:48:14.440
So the object is the table view.

00:48:14.440 --> 00:48:17.580
So we're setting the data source
of the table view to this data

00:48:17.580 --> 00:48:19.120
source that we just created.

00:48:19.190 --> 00:48:20.480
And the rest of this code is the same.

00:48:20.480 --> 00:48:21.110
We didn't change it.

00:48:21.120 --> 00:48:23.720
We just simply put it in an end if.

00:48:24.460 --> 00:48:29.450
Okay, so that takes care of our--

00:48:29.720 --> 00:48:30.700
setting up the data source.

00:48:30.700 --> 00:48:33.440
Now we need to actually add a
couple more functions down here.

00:48:33.560 --> 00:48:34.710
So let's go to our handlers.

00:48:34.960 --> 00:48:37.250
So I'm going to go and I'm going to add--

00:48:37.840 --> 00:48:38.800
I missed one.

00:48:38.800 --> 00:48:40.620
Oh, yes, this is the click handler.

00:48:40.620 --> 00:48:42.260
Let's go back to Interface Builder.

00:48:42.520 --> 00:48:45.720
And we're going to select
back to our window.

00:48:45.720 --> 00:48:51.400
What we need to do is we need to add the
handler that's the toolbar click handler

00:48:51.400 --> 00:48:54.300
so that when users click on a toolbar
item that doesn't have a target action,

00:48:54.300 --> 00:48:55.040
it'll get called.

00:48:55.040 --> 00:48:57.720
So I select my window,
go into AppleScript,

00:48:57.720 --> 00:48:59.420
and this is actually new for Tiger.

00:48:59.420 --> 00:49:00.570
There's a group here called toolbar.

00:49:00.580 --> 00:49:03.330
And there's one called click
toolbar item and another one

00:49:03.330 --> 00:49:04.670
called update toolbar item.

00:49:04.680 --> 00:49:07.080
We're simply going to work
with the click toolbar item.

00:49:07.500 --> 00:49:09.380
It's already attached with a document.

00:49:09.380 --> 00:49:11.760
This particular window is already
attached to the document script.

00:49:11.900 --> 00:49:14.670
And it already has script
set to scope to nib.

00:49:14.710 --> 00:49:15.770
So I'm going to go ahead and save that.

00:49:15.830 --> 00:49:17.740
And it just means that I have
changes left over there.

00:49:17.740 --> 00:49:18.650
I'll go ahead and accept that.

00:49:18.870 --> 00:49:21.160
And I'm going to click the edit
button to take me back to the code.

00:49:21.160 --> 00:49:24.040
And you can see that, again,
it added the handler for me.

00:49:24.040 --> 00:49:25.570
I didn't have to remember what that was.

00:49:25.620 --> 00:49:28.210
And in this case,
I'm going to have to go back

00:49:28.210 --> 00:49:30.630
one step and paste that code.

00:49:32.100 --> 00:49:53.000
[Transcript missing]

00:49:53.600 --> 00:50:58.800
[Transcript missing]

00:51:00.220 --> 00:51:01.540
Okay.

00:51:01.550 --> 00:51:04.730
I'll scroll down here a little further.

00:51:04.740 --> 00:51:06.860
This is all the finished code.

00:51:06.940 --> 00:51:08.420
And add record.

00:51:08.510 --> 00:51:12.120
And here, once again,
you'll see that in the

00:51:12.120 --> 00:51:13.700
code that you have,

00:51:13.840 --> 00:51:14.800
I have this bit of code.

00:51:14.800 --> 00:51:17.680
I wish it was an easier
way to show this together.

00:51:17.720 --> 00:51:22.560
Let me compile that and resize this.

00:51:22.700 --> 00:53:02.900
[Transcript missing]

00:53:03.780 --> 00:53:06.260
and I think I have all of my code,
and you should have those three.

00:53:06.260 --> 00:53:06.940
You should have those three.

00:53:06.940 --> 00:53:08.280
You should have add record,
delete record,

00:53:08.280 --> 00:53:10.190
and that last one I just showed
you should be in your script.

00:53:10.330 --> 00:53:12.030
We'll save that and build and go.

00:53:14.740 --> 00:53:18.200
And what we should be able to
do now is run our application.

00:53:18.210 --> 00:53:20.960
I'm going to type in current date,
compile it, run it.

00:53:21.300 --> 00:53:24.660
And if all is going well,
I click the Add Record,

00:53:24.680 --> 00:53:26.080
it added the record.

00:53:26.210 --> 00:53:26.740
So there I go.

00:53:26.740 --> 00:53:27.780
It's just that simple.

00:53:27.810 --> 00:53:30.890
I'm going to go ahead
and type front window.

00:53:31.600 --> 00:53:43.200
[Transcript missing]

00:53:44.230 --> 00:53:46.680
And I can also check to make
sure the Erase button is working,

00:53:46.680 --> 00:53:48.560
so that just erases my script view.

00:53:48.560 --> 00:53:51.070
So that takes care of that step.

00:53:54.990 --> 00:53:56.660
All right,
so what did we learn in step three?

00:53:56.660 --> 00:54:01.610
We showed how easy it was to implement
the click toolbar item handler so

00:54:01.710 --> 00:54:04.440
that you can respond to toolbar items
that don't have a target action.

00:54:04.440 --> 00:54:07.190
And then we showed you how easy
it was to create a data source.

00:54:07.190 --> 00:54:09.880
And as I explained,
it's actually simpler than

00:54:09.880 --> 00:54:11.790
what I even have in my example.

00:54:11.900 --> 00:54:13.120
Okay, we're on to step four.

00:54:13.120 --> 00:54:15.820
We're closing in on the home stretch,
and we're doing good on time,

00:54:15.820 --> 00:54:16.280
it looks like.

00:54:16.460 --> 00:54:18.610
So let's look at how
to save the document.

00:54:18.620 --> 00:54:20.920
So we want to be able to save
what's in the script view,

00:54:20.920 --> 00:54:24.140
and we want to save out all of the
records that are in that table view.

00:54:24.140 --> 00:54:27.430
And then we're also going to
turn on the column sorting so

00:54:27.490 --> 00:54:28.920
that we can sort our table view.

00:54:28.920 --> 00:54:32.120
So we're going to implement the
data representation handlers.

00:54:32.120 --> 00:54:33.890
There's two of them,
and we're going to talk

00:54:33.890 --> 00:54:35.040
about them in just a moment.

00:54:35.040 --> 00:54:38.800
And then we're going to have a handler
so that it responds to the user

00:54:38.800 --> 00:54:42.160
clicking on a column in our table view,
and that's called the

00:54:42.160 --> 00:54:42.900
column clicked handler.

00:54:42.900 --> 00:54:44.800
And then we're going to turn
on some sort indicators.

00:54:44.800 --> 00:54:46.690
It's very simple to do
now in Tiger as well.

00:54:46.720 --> 00:54:50.940
So let's go back to our demo.

00:54:53.750 --> 00:54:56.680
I'm going to quit the ScriptView.

00:54:56.990 --> 00:54:58.500
And let's see.

00:54:58.500 --> 00:55:04.640
What we need to do is go back into
our Document Nib in Interface Builder.

00:55:04.710 --> 00:55:06.990
Now, by default,
all of our templates are still

00:55:06.990 --> 00:55:12.660
built to work on the oldest--
clear back to like 10.1 and 10.2.

00:55:12.660 --> 00:55:16.510
So it's set to be global by default,
because that's a new feature in Tiger.

00:55:16.630 --> 00:55:19.070
So what you want to do is
select our document object,

00:55:19.180 --> 00:55:22.090
which back here in the icon
view is the Files Owner.

00:55:22.270 --> 00:55:24.120
Sometimes that's one other
reason I like the outline view.

00:55:24.120 --> 00:55:25.940
It's much more obvious what that is.

00:55:26.000 --> 00:55:27.700
It's the document object.

00:55:27.730 --> 00:55:30.860
And it already has two
handlers associated with it.

00:55:30.890 --> 00:55:32.200
And they're in the document group.

00:55:32.230 --> 00:55:34.430
And they're both on by
default in this template.

00:55:34.440 --> 00:55:37.120
One is called Data Representation,
and the other one's called

00:55:37.120 --> 00:55:38.420
Load Data Representation.

00:55:38.440 --> 00:55:40.550
And you can see that the problem
here is it's set to global,

00:55:40.720 --> 00:55:43.480
and our act would not work
correctly if it was trying to

00:55:43.480 --> 00:55:44.560
reference the wrong script.

00:55:44.740 --> 00:55:47.380
So I'm going to switch that to Scope Nib.

00:55:47.410 --> 00:55:49.160
Now, on yours,
you will just leave it global,

00:55:49.160 --> 00:55:52.110
and it'll just work fine
for purposes of the demo.

00:55:52.190 --> 00:55:54.680
Let's go ahead and then look at that.

00:55:54.910 --> 00:55:58.140
And we'll implement those handlers.

00:56:00.460 --> 00:56:01.970
My drive falls asleep in between.

00:56:02.160 --> 00:56:06.300
All right, let's go here and implement
the data representation.

00:56:06.360 --> 00:56:10.170
Now, this data representation handler
is the handler that gets called

00:56:10.270 --> 00:56:13.540
by AppleScript Studio when it's
time to save your document.

00:56:13.610 --> 00:56:16.700
And what it's asking it for is,
what data do you want me to

00:56:16.870 --> 00:56:19.170
store onto the file for you?

00:56:19.570 --> 00:56:22.830
And so you can simply return an
AppleScript structure of any type,

00:56:22.920 --> 00:56:24.220
and we'll take that data.

00:56:24.240 --> 00:56:27.160
And Studio takes care of actually
putting the bits out onto disk.

00:56:27.360 --> 00:56:30.150
And so I'm going to go
ahead and implement that.

00:56:31.770 --> 00:56:32.760
Hopefully, let's see.

00:56:32.760 --> 00:56:34.560
Oh, actually, we missed one.

00:56:34.560 --> 00:56:35.160
We're going to have to go back.

00:56:35.240 --> 00:56:37.720
I'm going to jump ahead one and
implement the data representation.

00:56:37.720 --> 00:56:41.030
And what it does is it
gets some information.

00:56:41.040 --> 00:56:42.910
Again,
it gets the content of the data source.

00:56:42.920 --> 00:56:46.400
Again, if we compare this to
the code that you have,

00:56:46.460 --> 00:56:48.420
it should be here.

00:56:48.420 --> 00:56:51.520
And let's go up to the
data representation.

00:56:51.520 --> 00:56:54.040
You can see it's actually
quite a bit more code.

00:56:54.040 --> 00:56:56.540
Again, it's this verbose instance.

00:56:56.560 --> 00:56:59.200
But what it's doing here
is that before Tiger,

00:56:59.200 --> 00:57:01.500
what you had to do is if you
wanted to get that data source,

00:57:01.560 --> 00:57:03.910
and all the data out of it,
you had to say contents of

00:57:03.950 --> 00:57:07.090
every data cell of every
data row of the data source.

00:57:07.120 --> 00:57:09.700
And that would, in essence,
build up this list of records for you.

00:57:09.740 --> 00:57:11.960
With Tiger,
it's just as simple as saying,

00:57:11.960 --> 00:57:13.700
give me the content of that data source.

00:57:13.700 --> 00:57:15.800
And it will do that much faster for you.

00:57:15.800 --> 00:57:19.300
We're also going to keep track of
what current sort column we have so

00:57:19.380 --> 00:57:22.600
that the sort column will be kept
track of when we save our document.

00:57:22.600 --> 00:57:24.770
We get the content of the script view.

00:57:24.800 --> 00:57:27.080
So whatever happens to be in the
script view at the time we save,

00:57:27.080 --> 00:57:28.560
we want to save that out in our document.

00:57:28.560 --> 00:57:31.220
And it would actually be nice if
we saved the bounds of the window.

00:57:31.450 --> 00:57:33.780
So wherever the user resized
and positioned their window,

00:57:33.780 --> 00:57:36.290
we'll save those bounds and
then we'll restore it so when

00:57:36.290 --> 00:57:39.020
they open their document,
it'll put it back to where it was before.

00:57:39.020 --> 00:57:42.460
And then what we do is construct
a simple Apple script record

00:57:42.460 --> 00:57:44.040
that has the table view data.

00:57:44.040 --> 00:57:48.170
It has the name of the sort column,
the source, and the window bounds.

00:57:48.240 --> 00:57:52.220
And then you simply return that
as the result of this handler.

00:57:52.220 --> 00:57:55.460
Studio takes that data,
streams it out to disk for you.

00:57:55.550 --> 00:57:58.860
So then when it comes time for
the user to open your document,

00:57:58.860 --> 00:58:01.760
it's going to call the load data
representation handler and we're

00:58:02.020 --> 00:58:03.180
going to implement that one.

00:58:03.180 --> 00:58:05.320
And let's see what this does.

00:58:07.040 --> 00:58:10.420
And what it does is what's passed
into this is the exact same data.

00:58:10.420 --> 00:58:11.830
So you see where the with data is?

00:58:12.190 --> 00:58:13.990
That is this data.

00:58:14.000 --> 00:58:18.600
It reads it in exactly in the same
format that you gave it to Studio,

00:58:18.600 --> 00:58:21.440
and it gives it back to you
in the with data object.

00:58:21.440 --> 00:58:24.240
And so it's just a matter of
pulling out the bits and pieces

00:58:24.240 --> 00:58:25.670
out of that data that we want.

00:58:25.750 --> 00:58:29.280
So to set up the sort column,
I get the sort column of the data source

00:58:29.510 --> 00:58:33.840
to the data column that had that name,
sort column name of with data.

00:58:34.130 --> 00:58:35.730
So you can see that that
was stored right here.

00:58:35.740 --> 00:58:37.980
Sort column name was in that object.

00:58:38.080 --> 00:58:38.930
We just pull it back out.

00:58:38.990 --> 00:58:40.300
Same thing for the script view.

00:58:40.300 --> 00:58:43.100
We set the content of the script
view to the script source.

00:58:43.180 --> 00:58:46.900
We set the bounds of the window to
the window bounds that we've saved.

00:58:47.010 --> 00:58:49.720
And here again,
this is the real power in Tiger.

00:58:49.720 --> 00:58:55.240
I didn't have to make and go through
the data source and go through and say,

00:58:55.240 --> 00:58:57.750
okay, for every data row,
I need to make a new data

00:58:57.750 --> 00:59:00.390
row for every data cell,
create a new data cell.

00:59:00.400 --> 00:59:03.950
I simply say set content of the data
source to the data that I saved.

00:59:04.060 --> 00:59:06.280
I saved out before and it
constructs everything for you.

00:59:06.320 --> 00:59:10.100
It sets up all the data columns and
all the data cells and it's very fast.

00:59:10.140 --> 00:59:13.200
And so the last thing we return
is whether or not this succeeded.

00:59:13.200 --> 00:59:16.230
So if there was some error here,
you would return false and you

00:59:16.240 --> 00:59:19.530
would get the standard alert at
the end of the application or when

00:59:19.530 --> 00:59:20.690
you try to open your document.

00:59:22.780 --> 00:59:27.320
All right, so that takes care of
the data representation.

00:59:27.370 --> 00:59:30.260
Let's go ahead and add sorting.

00:59:30.260 --> 00:59:31.820
Actually, let's go ahead and run this.

00:59:31.860 --> 00:59:34.990
Build and go.

00:59:35.520 --> 00:59:39.640
And again, we go through the process
of typing in some script,

00:59:39.850 --> 00:59:41.080
executing.

00:59:41.080 --> 00:59:44.670
I'll do another one for front window.

00:59:47.180 --> 00:59:47.600
All right.

00:59:47.600 --> 00:59:48.940
Oh, I forgot to click Add Record.

00:59:49.050 --> 00:59:50.720
It might help if I do that.

00:59:50.730 --> 00:59:51.840
Current date.

00:59:51.850 --> 00:59:54.990
And let's go ahead and
run and add that record.

00:59:55.200 --> 00:59:59.400
So now I actually have two
items in my table view.

00:59:59.420 --> 01:00:01.300
And just to make sure
everything's working well,

01:00:01.300 --> 01:00:03.440
I'm going to reposition this window.

01:00:03.440 --> 01:00:04.880
Let's put it way over here.

01:00:04.930 --> 01:00:07.140
And I'm going to make it a little bigger.

01:00:07.170 --> 01:00:11.360
And I'm going to go to the Save menu,
or File menu, and choose Save.

01:00:11.400 --> 01:00:13.020
And we're going to just
save it on the desktop,

01:00:13.020 --> 01:00:15.380
and I'm going to call it Sample.

01:00:16.590 --> 01:00:17.420
And save that.

01:00:17.620 --> 01:00:19.350
And you see that it
actually gave it a title.

01:00:19.480 --> 01:00:22.390
If I close the window,
go to the File menu,

01:00:22.680 --> 01:00:24.900
and go to the Open Recent and
choose my sample,

01:00:25.110 --> 01:00:28.420
you can see that it actually
loaded the document back up.

01:00:28.500 --> 01:00:30.780
I get my source that was
currently in the view.

01:00:30.830 --> 01:00:34.200
And I get all the various records
that I had in the document.

01:00:34.290 --> 01:00:37.730
And it also remembered the window
bounds where the document was located.

01:00:37.970 --> 01:00:39.930
Now one thing we skipped and
missed is the fact that when

01:00:39.940 --> 01:00:43.330
you click on this table view,
it should be updating the script source.

01:00:43.450 --> 01:00:44.390
We missed that step.

01:00:44.440 --> 01:00:46.000
So we need to go back and add that.

01:00:46.180 --> 01:00:49.620
So let's go and quit the
script view at the moment.

01:00:49.630 --> 01:00:51.910
We'll go back to Interface Builder.

01:00:52.050 --> 01:00:53.720
And we want to select our table view.

01:00:53.730 --> 01:00:56.800
Again, I'll go to the Outline view
in the project window here,

01:00:56.800 --> 01:00:58.040
select Table View.

01:00:58.100 --> 01:01:01.180
And I want to know when
the selection has changed.

01:01:01.280 --> 01:01:04.700
That's in the Data View group
over in our AppleScript Inspector.

01:01:04.720 --> 01:01:06.590
And there's one called Selection Changed.

01:01:06.770 --> 01:01:08.090
And I'm going to save that.

01:01:08.310 --> 01:01:11.690
And while we're in here,
let's go ahead and add the handler

01:01:11.830 --> 01:01:15.430
for our table view so that we'll know
when a user clicks on the column.

01:01:15.540 --> 01:01:18.100
So I'm going to select that as well.

01:01:18.100 --> 01:01:20.040
And again, it's in the Data View.

01:01:20.040 --> 01:01:22.390
And there's one called Column Clicked.

01:01:22.480 --> 01:01:23.220
Save that.

01:01:23.220 --> 01:01:24.990
And let's go Edit and fill these out.

01:01:25.160 --> 01:01:30.640
So for the Column Clicked-- let's
see if I get the right one here.

01:01:30.640 --> 01:01:31.140
Nope.

01:01:31.250 --> 01:01:32.970
Yep, that was correct.

01:01:33.240 --> 01:01:35.790
Let's fill out that handler.

01:01:37.090 --> 01:01:39.740
Now, whenever the user clicks
on a table column,

01:01:39.800 --> 01:01:42.930
what they're indicating is they're going
to change which one is being sorted on,

01:01:42.940 --> 01:01:45.690
and if they click on the same one,
they're just changing the order

01:01:45.700 --> 01:01:47.210
from ascending to descending.

01:01:47.220 --> 01:01:49.370
And so that's all that this code does.

01:01:49.450 --> 01:01:50.950
This is very standard code.

01:01:50.960 --> 01:01:54.160
You could actually just copy-paste
this code any time you need to do

01:01:54.350 --> 01:01:55.980
this sorting in your table view.

01:01:55.980 --> 01:01:58.730
Hopefully in a future version we'll
actually just take care of this for you,

01:01:58.830 --> 01:02:00.370
so you don't even have
to put this code in.

01:02:00.400 --> 01:02:01.150
It'll just handle it.

01:02:01.240 --> 01:02:03.700
But for now, you just copy it out
of any of the examples.

01:02:03.700 --> 01:02:04.450
It's all the same.

01:02:04.830 --> 01:02:05.560
And we get the name.

01:02:05.560 --> 01:02:08.040
We check to see if it's
the same sort column.

01:02:08.040 --> 01:02:10.560
If it's not,
we're going to switch the sort column.

01:02:10.720 --> 01:02:12.620
Otherwise,
we're just changing the sort order,

01:02:12.620 --> 01:02:15.520
and we just update the object,
which happens to be the table view.

01:02:15.520 --> 01:02:17.550
Now,
the other one that we needed to fill out

01:02:17.630 --> 01:02:19.840
that we missed was the selection change.

01:02:19.890 --> 01:02:22.330
This is whenever the user
clicks in the table view,

01:02:22.330 --> 01:02:24.910
we need to update the
contents of the script view.

01:02:24.920 --> 01:02:28.780
And that one was way back up here,
so we missed that quite early.

01:02:28.780 --> 01:02:30.760
Put that in.

01:02:30.760 --> 01:02:34.280
And all it does is whenever the
user clicks in the table view,

01:02:34.280 --> 01:02:34.750
we set that to the table view.

01:02:34.760 --> 01:02:37.380
And we set the content of the
result view to an empty string.

01:02:37.380 --> 01:02:41.740
And we grab out of our data source
the data cell called script source.

01:02:41.780 --> 01:02:45.050
Remember, we have a column in our data
source for the script source.

01:02:45.100 --> 01:02:48.200
So we go get the value out of that,
and then we simply stick it

01:02:48.200 --> 01:02:51.330
in the script view by saying
set content of script view.

01:02:51.340 --> 01:02:52.310
All right.

01:02:52.380 --> 01:02:55.010
Now, the one last thing we need
to do for our sorting is to

01:02:55.150 --> 01:02:56.870
actually add our sort indicators.

01:02:56.880 --> 01:02:59.670
And if you go back up
into the Wake from Nib,

01:02:59.840 --> 01:03:03.940
and in the first if block,
just after you set the data source,

01:03:06.010 --> 01:03:12.060
It's just a matter of turning
on our indicator by doing this.

01:03:12.120 --> 01:03:14.280
Turn on the sort indicators.

01:03:15.880 --> 01:03:19.530
And it's the property called
useSortIndicators of tableView.

01:03:19.540 --> 01:03:20.780
And we just simply set that to true.

01:03:20.780 --> 01:03:23.980
And that puts the little triangle and
keeps track of whether it's ascending

01:03:23.980 --> 01:03:25.480
or descending order in the sort.

01:03:25.480 --> 01:03:27.660
And we don't have to worry
about trying to set that before,

01:03:27.660 --> 01:03:30.340
which you had to do that before, Tiger,
if you actually wanted sort indicators.

01:03:30.340 --> 01:03:33.090
So let's build and run this
application and see how we're doing.

01:03:33.100 --> 01:03:36.180
So once again, actually to save time,
I'm just going to go and open

01:03:36.280 --> 01:03:38.500
up the existing sample so
I don't have to type it again.

01:03:38.500 --> 01:03:41.280
And you'll see that it actually
has the sort indicator turned on.

01:03:41.280 --> 01:03:43.820
And as I click on that,
it's changing the sort order.

01:03:44.080 --> 01:03:46.960
And I can change which column
I want to be the primary sort.

01:03:46.980 --> 01:03:49.300
So sorting is very simple to do.

01:03:49.300 --> 01:03:50.320
Okay.

01:03:50.320 --> 01:03:55.340
Let's go ahead and look
at the last step here.

01:03:58.090 --> 01:03:59.440
and what we did before.

01:03:59.470 --> 01:04:02.810
So I showed you how to implement
the data representation handlers.

01:04:02.930 --> 01:04:05.620
So any document-based applications,
you need to fill those out.

01:04:05.620 --> 01:04:06.300
It's very simple.

01:04:06.470 --> 01:04:09.010
Simply get the data you want to save,
return it in the data

01:04:09.010 --> 01:04:10.580
representation handler.

01:04:10.610 --> 01:04:12.790
And if you want-- and
when the document is open,

01:04:12.970 --> 01:04:15.240
you'll just implement the
load data representation.

01:04:15.240 --> 01:04:16.790
And you're given your data back.

01:04:16.800 --> 01:04:18.670
And you can populate your UI from that.

01:04:18.840 --> 01:04:22.210
And we also showed you how to add
column sorting in your table view.

01:04:22.220 --> 01:04:25.070
Now the last thing we're going
to look at is how to debug

01:04:25.140 --> 01:04:28.420
ScriptView and add a creator code.

01:04:28.500 --> 01:04:31.540
So if you're using Xcode 2.1,
we're going to show the fact that

01:04:31.540 --> 01:04:35.420
we actually use the new action
breakpoints or breakpoint actions.

01:04:35.420 --> 01:04:37.840
And then we're going to set
the creator code in this step.

01:04:37.840 --> 01:04:39.790
So let's go ahead and do that.

01:04:42.070 --> 01:04:44.990
Now, this one you can actually
go ahead and grab step five.

01:04:45.000 --> 01:04:49.250
So I'm actually going to close the
existing application or my project.

01:04:49.480 --> 01:04:51.940
And I'm going to go to my sources.

01:04:51.940 --> 01:04:55.700
And I'm going to grab step
five in the script view.

01:04:55.980 --> 01:04:58.440
And open up-- now,
if you're using Xcode 2.0,

01:04:58.440 --> 01:05:00.720
you have to use the .Xcode project.

01:05:00.720 --> 01:05:04.900
If you're using 2.1,
you'll open up the Xcode Proj project.

01:05:05.000 --> 01:05:06.970
So I'm going to go ahead and open
up the script view Xcode Proj,

01:05:06.970 --> 01:05:08.690
because I can show the
breakpoint actions,

01:05:08.750 --> 01:05:10.780
which is a new feature in Tiger.

01:05:10.780 --> 01:05:12.740
If you are using 2.0, that's OK.

01:05:12.740 --> 01:05:13.770
We'll still be able to debug.

01:05:13.780 --> 01:05:16.130
You just won't have those actions.

01:05:16.230 --> 01:05:17.740
So I'm going to go ahead
and build and run this.

01:05:17.740 --> 01:05:20.120
I'm actually going to clean,
just to make sure that since it's

01:05:20.120 --> 01:05:23.500
all been the same project name,
I'm going to just clean everything out.

01:05:23.540 --> 01:05:26.640
And you can do that by choosing
it under the build menu,

01:05:26.870 --> 01:05:28.620
clean or clean all targets.

01:05:28.690 --> 01:05:32.170
And then I'm going to go ahead and
just build the application and run it.

01:05:33.590 --> 01:05:36.390
And you'll notice that the
first thing I get is an error.

01:05:36.550 --> 01:05:38.190
So the document window
hasn't come up yet.

01:05:38.390 --> 01:05:43.060
I've got this really,
really very informational error here.

01:05:43.120 --> 01:05:47.180
Everybody understands what
NSReceiverEvaluationScriptError means,

01:05:47.190 --> 01:05:47.190
right?

01:05:47.410 --> 01:05:50.300
Steve has documented it well,
so you can sort of get a

01:05:50.360 --> 01:05:51.700
hint in the documentation.

01:05:51.740 --> 01:05:53.110
He does explain what all these are.

01:05:53.110 --> 01:05:56.760
We hope that it's actually
a long-standing problem.

01:05:56.760 --> 01:05:58.640
We need to address that,
and hopefully they'll be able to

01:05:58.640 --> 01:06:00.750
take that and have a much more
informative error message there.

01:06:00.760 --> 01:06:03.860
But what we have now is
the document does come up,

01:06:03.960 --> 01:06:05.890
but in essence,
something's not going to work very well.

01:06:06.000 --> 01:06:07.760
So let's go ahead and quit
that and go back to Xcode,

01:06:07.760 --> 01:06:10.080
and we're going to debug this to
figure out what the problem is.

01:06:10.820 --> 01:06:13.750
So back in Xcode,
I click on my scripts group,

01:06:14.010 --> 01:06:16.950
select my document, AppleScript,
and we're going to go

01:06:16.950 --> 01:06:18.600
down to the Wake From Nib.

01:06:18.600 --> 01:06:23.000
Let's make this a little wider,
easier to see, and zoom that up.

01:06:23.120 --> 01:06:25.340
And I'm going to go to
the Wake From Nib handler.

01:06:25.390 --> 01:06:28.210
Now, this is a good place to start,
because it was very

01:06:28.230 --> 01:06:29.600
early in the app launch.

01:06:29.700 --> 01:06:31.750
It was also very early
before the document came up.

01:06:31.880 --> 01:06:35.680
So Wake From Nib is a very good
place to start to debug this process.

01:06:35.680 --> 01:06:37.270
So I'm going to put a breakpoint here.

01:06:37.280 --> 01:06:40.790
Now, actually, so for those of Xcode 2.0,
you just simply click on the code.

01:06:40.910 --> 01:06:42.880
You just click on the column over here
on the left and put your breakpoint on.

01:06:42.900 --> 01:06:46.120
If you're using Xcode 2.1,
you can hold down the control

01:06:46.120 --> 01:06:49.320
key on that breakpoint,
and you can say edit breakpoint.

01:06:51.940 --> 01:06:55.260
And you get this new breakpoints UI.

01:06:55.280 --> 01:06:58.060
And I'll zoom this up so you
can see it a little better.

01:06:58.350 --> 01:07:02.580
And you can see that it's now put a
breakpoint on Awake from Nib on line 79.

01:07:02.590 --> 01:07:06.390
And if I click this-- and it has
a little bit of an Automator UI--

01:07:06.590 --> 01:07:07.880
The dogs, they stole our UI.

01:07:07.980 --> 01:07:08.670
That's okay.

01:07:08.670 --> 01:07:11.870
So what we can actually choose is
different types of break actions,

01:07:11.870 --> 01:07:14.140
so when it hits this break point,
we can have it do

01:07:14.140 --> 01:07:15.900
something very interesting.

01:07:15.900 --> 01:07:19.230
So as Todd also demonstrated this,
I'm going to pick the AppleScript,

01:07:19.230 --> 01:07:21.370
and I can actually enter
an AppleScript here,

01:07:21.490 --> 01:07:24.630
and it will execute when that
break point is hit in the debugger.

01:07:24.630 --> 01:07:28.060
So I'm going to just simply do
what I might have actually typed,

01:07:28.070 --> 01:07:30.510
for those of you debugging
in other methods,

01:07:30.550 --> 01:07:31.930
back in the code itself.

01:07:31.930 --> 01:07:36.150
I might say display dialog away from
nibs so I know that I got to this point.

01:07:36.840 --> 01:07:40.190
And I'll compile that, and test it.

01:07:40.200 --> 01:07:40.980
Looks fine.

01:07:40.980 --> 01:07:42.000
So that looks good.

01:07:42.000 --> 01:07:43.500
I'm just going to collapse.

01:07:43.500 --> 01:07:45.000
Oh, I just deleted it, is what I did.

01:07:45.000 --> 01:07:46.430
So I'll do this again.

01:07:46.470 --> 01:07:48.860
It was going so well.

01:07:49.210 --> 01:07:52.250
No, it's no problem.

01:07:52.250 --> 01:07:52.250
Display dialog.

01:07:52.480 --> 01:07:58.670
Actually, I've got to talk to him and put
the actual script view here and

01:07:58.670 --> 01:07:58.670
not just the simple text view.

01:07:58.670 --> 01:07:58.670
That would be logical, right?

01:07:58.700 --> 01:08:14.400
[Transcript missing]

01:08:19.400 --> 01:08:46.100
[Transcript missing]

01:08:46.770 --> 01:08:50.320
And if I go ahead and click continue,
and just one note in that

01:08:50.400 --> 01:08:52.660
is if there's a checkbox,
and if I say continue

01:08:52.660 --> 01:08:55.840
and put it in there,
it won't even stop in the breakpoint.

01:08:56.000 --> 01:08:58.020
What it does is it does the
action and then continues.

01:08:58.020 --> 01:09:00.390
So if you have some tight loop
and you don't want to have to

01:09:00.540 --> 01:09:03.590
keep stepping in the debugger,
you can just have it repeat the action,

01:09:03.590 --> 01:09:05.540
and it just continues running for you.

01:09:05.540 --> 01:09:07.510
But in this case,
the default is not that.

01:09:07.530 --> 01:09:09.230
It's going to stop in
the debugger for us.

01:09:09.260 --> 01:09:11.300
And so here I've got my debugger window.

01:09:11.300 --> 01:09:14.660
And it stopped on the
AwakeFromNib handler.

01:09:15.120 --> 01:09:17.950
And we stepped on the first line,
and we actually have

01:09:17.950 --> 01:09:19.460
different things here.

01:09:19.460 --> 01:09:21.180
We have all of our variables are global.

01:09:21.180 --> 01:09:23.840
So there's pi as represented here.

01:09:23.840 --> 01:09:26.530
These are all the AppleScript globals,
which I always find it funny I could

01:09:26.600 --> 01:09:27.900
actually go in and redefine pi.

01:09:30.850 --> 01:09:32.040
Or the number of minutes.

01:09:32.040 --> 01:09:34.300
If I'm a little late for work,
you can put that to be 80

01:09:34.300 --> 01:09:35.700
minutes or something like that.

01:09:35.700 --> 01:09:38.080
It's probably not a good
idea to change your globals.

01:09:38.120 --> 01:09:41.210
But it does show the various
properties that are in my script.

01:09:41.230 --> 01:09:43.580
So in this case,
we haven't assigned any of the

01:09:43.670 --> 01:09:46.700
properties that I had before,
like a result view or script view.

01:09:46.710 --> 01:09:49.560
And then at last,
it shows the local variables.

01:09:49.560 --> 01:09:52.350
In this case, we actually get to find
out what the object is.

01:09:52.470 --> 01:09:55.240
So we know this time, when the Awake from
Nib handler is called,

01:09:55.300 --> 01:09:57.370
that it's the window that's being passed.

01:09:57.480 --> 01:09:59.160
So we're going to step.

01:09:59.160 --> 01:10:01.020
And we'll step over to the next line.

01:10:01.020 --> 01:10:03.120
And it's going to check the name.

01:10:03.120 --> 01:10:04.160
And it's not that name.

01:10:04.310 --> 01:10:05.180
And it goes down.

01:10:05.190 --> 01:10:06.280
And it goes into the else statement.

01:10:06.280 --> 01:10:08.460
It's going to create our toolbar,
which is the right path.

01:10:08.590 --> 01:10:09.220
That looks good.

01:10:09.330 --> 01:10:10.960
So I don't think there's any error there.

01:10:11.030 --> 01:10:12.200
So I'm going to continue.

01:10:12.200 --> 01:10:14.040
And once again, the breakpoint is hit.

01:10:14.090 --> 01:10:17.040
Because Awake from Nib,
we also attach to the table view.

01:10:17.050 --> 01:10:18.370
And again, it triggers my action.

01:10:18.480 --> 01:10:19.400
It tells me I'm here.

01:10:19.400 --> 01:10:21.780
I could have had it say something,
for instance,

01:10:21.780 --> 01:10:23.380
or other interesting things.

01:10:23.380 --> 01:10:26.860
And I've stepped back into the code,
stopped at the first line.

01:10:26.860 --> 01:10:28.190
And it's going to check the name.

01:10:28.200 --> 01:10:30.980
And so I can see that-- oh,
the object is the table view.

01:10:30.980 --> 01:10:32.360
We've got the right object.

01:10:32.360 --> 01:10:33.900
And the name is script table.

01:10:33.900 --> 01:10:38.850
And so it's going to compare
the name is equal to scriptable.

01:10:38.880 --> 01:10:39.870
There we go.

01:10:39.920 --> 01:10:42.120
So we missed a variable, a letter.

01:10:42.120 --> 01:10:44.160
We actually need that to be script table.

01:10:44.190 --> 01:10:45.190
So I'm going to stop that.

01:10:45.310 --> 01:10:48.120
Because that's pretty obvious that
that's going to be the problem.

01:10:48.120 --> 01:10:51.540
And I'm just going to go ahead and
build and run this just for brevity.

01:10:51.540 --> 01:10:52.720
Let's zoom back up.

01:10:52.720 --> 01:10:53.680
And there was no error.

01:10:53.790 --> 01:10:55.920
So that took care of that error.

01:10:55.970 --> 01:10:59.140
So I'm going to open up my
document that I saved before.

01:10:59.300 --> 01:11:00.950
And there's actually another bug in here.

01:11:00.960 --> 01:11:03.700
And I'm going to show you another
technique that's very common in

01:11:03.700 --> 01:11:05.520
debugging your Studio applications.

01:11:05.540 --> 01:11:06.770
And that's if I click on here.

01:11:06.820 --> 01:11:07.880
I can click on the name.

01:11:07.880 --> 01:11:09.300
I can click on the result.

01:11:09.320 --> 01:11:13.340
But when I click on source,
that's a little better error.

01:11:13.350 --> 01:11:16.010
It says that the variable,
the column name is not defined.

01:11:16.140 --> 01:11:19.140
So at least it wasn't any
of those NS receiver errors.

01:11:19.210 --> 01:11:21.100
But obviously, something is wrong.

01:11:21.130 --> 01:11:23.740
Now, with the application still running,
what I'm going to do is I'm

01:11:23.740 --> 01:11:25.330
going to launch script editor.

01:11:25.370 --> 01:11:28.100
Because again,
Studio is a scriptable application,

01:11:28.220 --> 01:11:28.980
albeit at the view level.

01:11:28.980 --> 01:11:32.050
But it's still-- the code that
I write is the same code I can access

01:11:32.070 --> 01:11:33.980
from the outside of the environment.

01:11:34.020 --> 01:11:37.400
And I can go back to my demo
monkey and grab this bit of code.

01:11:37.440 --> 01:11:40.140
So it saves me the trouble of typing it.

01:11:40.900 --> 01:11:43.850
And what it does is it talks
to the script view application,

01:11:43.850 --> 01:11:46.390
which is running, by doing a tell block.

01:11:46.480 --> 01:11:47.790
And I get a reference to my table view.

01:11:47.790 --> 01:11:50.650
Again, I have to drill down because
I'm doing it from the outside.

01:11:51.020 --> 01:11:54.150
And what I want to do is I want to
get the name of every table column.

01:11:54.350 --> 01:11:55.440
Is that a little suspect?

01:11:55.540 --> 01:11:58.520
Maybe I didn't have that,
because we mentioned before if

01:11:58.520 --> 01:12:02.300
the name is misspelled or missing,
it's going to cause a problem.

01:12:02.300 --> 01:12:02.300
So I'm going to go ahead and run that.

01:12:02.580 --> 01:12:05.130
And it's a little hard to see here,
but down at the bottom,

01:12:05.130 --> 01:12:07.640
you actually see it
returns a list of strings.

01:12:07.840 --> 01:12:09.330
And we've got script date.

01:12:09.620 --> 01:12:11.500
We have script name.

01:12:11.570 --> 01:12:11.740
There.

01:12:11.740 --> 01:12:13.620
You can quit the application.

01:12:13.660 --> 01:12:14.740
Go back into interface builder.

01:12:14.740 --> 01:12:18.080
Or actually, we have to go back into
Xcode and find our resources.

01:12:18.310 --> 01:12:20.730
And drag this down.

01:12:21.080 --> 01:12:22.930
Well, if I time this just right,
you won't be able to

01:12:22.930 --> 01:12:23.760
ask me any questions.

01:12:23.760 --> 01:12:25.840
This will be good.

01:12:25.840 --> 01:12:27.590
Resources.

01:12:27.920 --> 01:12:30.510
Yeah, that would be nice to
have patch and continue,

01:12:30.630 --> 01:12:32.020
you know, build and continue.

01:12:32.020 --> 01:12:33.710
It's interesting suggestion.

01:12:33.810 --> 01:12:36.480
Let's,
so I'm gonna go in here and I'm gonna

01:12:36.660 --> 01:12:38.580
look at the various variables here.

01:12:38.880 --> 01:12:41.240
Bring up my Apple Script panel
and I can see that I have

01:12:41.240 --> 01:12:42.640
script date on the first one.

01:12:42.770 --> 01:12:46.020
I have script name, but certainly,
there we go.

01:12:46.100 --> 01:12:48.300
It's missing the script source.

01:12:48.300 --> 01:12:50.790
So if I add that,
I wouldn't spell it correctly.

01:12:50.880 --> 01:12:52.190
I'd have to debug it twice.

01:12:52.360 --> 01:12:53.420
Let's say that.

01:12:53.420 --> 01:12:56.250
Go back in here, build and run.

01:12:56.250 --> 01:13:00.910
Open up our existing example
and let's go ahead and you can

01:13:00.910 --> 01:13:03.480
see there as I click on date,
looks good.

01:13:03.480 --> 01:13:05.260
And source, everything's working.

01:13:05.520 --> 01:13:06.100
Okay, cool.

01:13:06.380 --> 01:13:07.950
Well, we're short on time,
so I'm gonna skip

01:13:08.070 --> 01:13:11.570
setting the creator code,
but let's wrap this up here.

01:13:14.870 --> 01:13:16.300
So, what did we learn today?

01:13:16.300 --> 01:13:19.080
AppleScript Studio is a very
powerful technology inside of,

01:13:19.080 --> 01:13:21.500
and we've enhanced it for
Tiger to make it easier for you,

01:13:21.500 --> 01:13:23.430
much more powerful,
better performance in areas.

01:13:23.430 --> 01:13:27.120
So that's all built under this
framework called AppleScript Kit.

01:13:27.240 --> 01:13:29.550
It has the better table view support,
data sources,

01:13:29.650 --> 01:13:31.160
and adds things like toolbars.

01:13:31.160 --> 01:13:33.480
We've also used OSA Kit,
another public framework that

01:13:33.560 --> 01:13:35.940
we've introduced in Tiger that
provides a script view,

01:13:35.940 --> 01:13:38.030
script controller,
so there may be a need in your

01:13:38.030 --> 01:13:41.230
application to have a simple little
script editor that you can use.

01:13:41.230 --> 01:13:42.010
It's very simple to do.

01:13:42.010 --> 01:13:43.220
You can do it almost with no code.

01:13:44.890 --> 01:13:47.920
So, what did we learn today?

01:13:47.960 --> 01:13:54.220
AppleScript Studio is a very
powerful technology inside of,

01:13:54.220 --> 01:13:59.970
and we've enhanced it for
Tiger to make it easier for you,

01:14:00.050 --> 01:14:05.400
much more powerful,
better performance in areas.

01:14:05.470 --> 01:14:12.870
So that's all built under this
framework called AppleScript Studio.

01:14:13.880 --> 01:14:17.000
So, what did we learn today?

01:14:17.000 --> 01:14:23.260
AppleScript Studio is a very
powerful technology inside of,

01:14:23.300 --> 01:14:28.950
and we've enhanced it for
Tiger to make it easier for you,

01:14:29.040 --> 01:14:34.410
much more powerful,
better performance in areas.

01:14:34.530 --> 01:14:41.920
So that's all built under this
framework called AppleScript Studio.

01:14:41.920 --> 01:14:45.410
because there's quite a community there,
and people are very helpful.

01:14:45.590 --> 01:14:48.960
And thank you very much for those of
you that take time to respond and help.

01:14:49.010 --> 01:14:51.290
And with that all, we've got 10 seconds.

01:14:51.330 --> 01:14:53.300
So do we want to-- we'll take a couple.

01:14:53.300 --> 01:14:54.420
See if we can get away
with doing a couple.

01:14:54.420 --> 01:14:56.920
So I'll bring up John Montreon
for questions and answers.

01:14:56.970 --> 01:14:58.760
And oh, yes, they've stuck in,
so I don't have to mention.

01:14:58.760 --> 01:15:00.670
And please give us
feedback at that location.

01:15:00.840 --> 01:15:02.480
Drew's too?