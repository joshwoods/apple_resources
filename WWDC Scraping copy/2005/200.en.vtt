WEBVTT

00:00:13.720 --> 00:00:14.660
Good afternoon.

00:00:14.710 --> 00:00:16.650
Thank you for coming today.

00:00:16.760 --> 00:00:19.660
So we're here to talk
about graphics and media,

00:00:19.720 --> 00:00:21.330
graphics and media in Tiger.

00:00:21.520 --> 00:00:26.420
And for the next hour,
Peter Graffagnino and I are going

00:00:26.420 --> 00:00:29.560
to give you an update on some of the
technologies that we built into Tiger.

00:00:29.560 --> 00:00:31.210
Of course,
there's a lot of stuff in Tiger,

00:00:31.280 --> 00:00:33.620
and we've only got an hour to talk,
so we're just going to cover

00:00:33.620 --> 00:00:34.790
some of the highlights.

00:00:35.400 --> 00:00:40.190
I want to start by reviewing just some
of the simple view of the goals we

00:00:40.190 --> 00:00:44.980
set for graphics and media in Tiger,
and really in Mac OS X overall.

00:00:45.260 --> 00:00:49.660
At the very highest level,
our goal was to build the richest,

00:00:49.660 --> 00:00:54.050
most powerful set of graphics
and media capabilities ever found

00:00:54.390 --> 00:00:56.360
in a computer operating system.

00:00:56.470 --> 00:01:00.480
We set out to do this
about five years ago now.

00:01:00.700 --> 00:01:02.500
So what does that involve?

00:01:02.550 --> 00:01:06.390
There are several key elements that we
knew we had to build into the system.

00:01:06.500 --> 00:01:10.460
The first element was a
professional-grade audio subsystem.

00:01:10.460 --> 00:01:13.600
So much of what we do
these days involves audio,

00:01:13.600 --> 00:01:15.620
and that's everything
from professional-type

00:01:15.690 --> 00:01:19.310
applications like Logic,
all the way down to the

00:01:19.320 --> 00:01:22.560
consumer-oriented applications,
and we knew we needed to have

00:01:22.560 --> 00:01:24.450
very robust technology for audio.

00:01:24.460 --> 00:01:29.380
In addition,
2D graphics is clearly important.

00:01:29.650 --> 00:01:32.800
Macintosh has a long legacy
of leadership in this area,

00:01:32.800 --> 00:01:36.550
and we wanted to make sure that
that would continue in Mac OS X,

00:01:36.710 --> 00:01:42.110
and clearly we've done a great job there,
and that's a very important part of

00:01:42.120 --> 00:01:45.590
the story for graphics and media.

00:01:46.220 --> 00:01:47.880
The third element is 3D graphics.

00:01:48.160 --> 00:01:49.880
Now, of course,
3D graphics are absolutely

00:01:49.880 --> 00:01:53.340
critical for games,
but increasingly,

00:01:53.340 --> 00:01:59.270
this technology is becoming
vital for a lot of other areas,

00:01:59.350 --> 00:02:00.520
including video.

00:02:00.520 --> 00:02:03.740
And in Mac OS X,
this is a very important part of our

00:02:03.740 --> 00:02:06.700
overall technology strategy for the UI.

00:02:06.920 --> 00:02:12.370
There's a lot of things we can do,
leveraging the GPU and other aspects

00:02:12.370 --> 00:02:16.560
of 3D stack that are going to allow us
to do amazing things in the operating

00:02:16.560 --> 00:02:18.280
system to date and going forward.

00:02:18.280 --> 00:02:21.500
The next major area is
our imaging technologies.

00:02:21.500 --> 00:02:24.490
Now, these are the technologies that
allow us to connect to cameras

00:02:24.490 --> 00:02:25.900
and printers and scanners.

00:02:25.900 --> 00:02:30.300
And increasingly,
we're leveraging these technologies

00:02:30.300 --> 00:02:34.800
to be able to perform some
incredible image processing.

00:02:36.500 --> 00:02:42.530
And they're going to be very
important in the overall system.

00:02:42.580 --> 00:02:45.250
Last but not least, of course, is video.

00:02:45.260 --> 00:02:47.970
Apple has a really
strong position in video,

00:02:48.060 --> 00:02:51.680
and our goal is to ensure that we hold
on to that and keep pushing that forward.

00:02:51.680 --> 00:02:53.150
There's a lot taking place.

00:02:53.180 --> 00:02:58.200
Now, these are sort of the right raw
ingredients for an operating system,

00:02:58.210 --> 00:03:00.760
but this is not all that matters.

00:03:00.780 --> 00:03:03.590
The next thing we have to be
concerned about is the speed

00:03:03.590 --> 00:03:05.470
of the individual technologies.

00:03:06.080 --> 00:03:08.010
Um...

00:03:08.200 --> 00:03:11.110
Excuse me, I screwed up.

00:03:11.560 --> 00:03:14.280
These technologies have
to be blindingly fast.

00:03:14.330 --> 00:03:16.780
And there's a few things we
have to worry about there.

00:03:16.800 --> 00:03:19.690
The first one is we know we need
to have the right architecture.

00:03:19.820 --> 00:03:23.220
Speed is, in large part,
a function of architecture.

00:03:23.280 --> 00:03:25.890
It also is important that we
have the right algorithms.

00:03:26.000 --> 00:03:30.080
And then lastly, we know that we need to
have great implementations.

00:03:30.190 --> 00:03:32.340
And this is one of the things
that you can count on us to

00:03:32.340 --> 00:03:34.690
do for you going forward.

00:03:34.890 --> 00:03:38.100
This is a very important part
of our service for all of you.

00:03:38.410 --> 00:03:41.650
The second element has
to do with integration.

00:03:41.720 --> 00:03:44.440
Of course,
we use these technologies independently.

00:03:44.530 --> 00:03:46.430
But increasingly,
there's incredibly interesting

00:03:46.530 --> 00:03:50.040
things that can be done by
combining the technologies together.

00:03:50.080 --> 00:03:53.840
And we want to make sure that we're
providing an architecture that makes this

00:03:54.300 --> 00:03:58.440
easy and also provides high performance
when you bring the technology together.

00:03:58.440 --> 00:04:00.160
And we have several things that
we're going to show you today

00:04:00.160 --> 00:04:03.360
to demonstrate some of the
progress we've made in this area.

00:04:03.380 --> 00:04:06.630
The next important
consideration-- -- is ease of use.

00:04:06.710 --> 00:04:10.020
The operating systems today
are incredibly complicated.

00:04:10.040 --> 00:04:13.630
It's hard to realize this
when you think of them sitting

00:04:13.630 --> 00:04:16.730
inside these little laptops,
but a modern operating system has

00:04:16.820 --> 00:04:21.000
literally tens of thousands of APIs,
hundreds, perhaps thousands,

00:04:21.000 --> 00:04:23.360
of distinct frameworks.

00:04:23.380 --> 00:04:26.960
The challenge for all of us is how to
figure out how to plumb the depths of

00:04:26.960 --> 00:04:30.980
these things and get the functionality
out and be able to wrangle it

00:04:30.980 --> 00:04:33.080
and use it in our applications.

00:04:33.300 --> 00:04:35.520
This is something that we
feel very strongly about.

00:04:35.650 --> 00:04:38.920
Ease of use and simplicity
is not just for beginners,

00:04:39.140 --> 00:04:43.360
but experts can derive tremendous
benefits with powerful tools

00:04:43.650 --> 00:04:46.020
that help them manage the
complexity of their systems,

00:04:46.030 --> 00:04:48.120
and we'll talk more about that later.

00:04:48.330 --> 00:04:51.120
The last thing I want to
talk about is the future.

00:04:51.120 --> 00:04:54.800
Of course, we know that things are always
changing in the world of technology,

00:04:55.080 --> 00:04:59.650
and today we announced a very interesting
and very significant change in the core

00:04:59.750 --> 00:05:02.920
technology on which all your system,
all your software,

00:05:03.050 --> 00:05:04.850
is eventually going to be based.

00:05:05.010 --> 00:05:07.810
One of the things that we wanted to do
in our operating system is to be able

00:05:07.820 --> 00:05:13.680
to insulate you from as many of these
disruptive technologies as we can.

00:05:13.810 --> 00:05:16.520
And there's a second part of it,
which is that if you can rely

00:05:16.520 --> 00:05:21.010
on the APIs that we provide,
what we'll be able to do in the

00:05:21.010 --> 00:05:25.020
future is we'll be able to provide
you tremendous benefits of performance

00:05:25.020 --> 00:05:29.260
and functionality in the future
as the technology continues to evolve.

00:05:29.390 --> 00:05:32.380
So this is sort of the high-level
goal that we set for the graphics

00:05:32.570 --> 00:05:35.910
and media team several years ago,
and this is something we've been

00:05:35.910 --> 00:05:38.670
executing on for a long time now.

00:05:38.850 --> 00:05:41.420
So the next thing I want to do
is I want to start to go through

00:05:41.420 --> 00:05:43.360
the technologies in Tiger.

00:05:43.360 --> 00:05:45.760
We've made a lot of
progress over the last year.

00:05:45.760 --> 00:05:50.260
We introduced most of these technologies
to you here last year at WWDC.

00:05:50.280 --> 00:05:53.350
Last year we were just beginning,
and now we're done.

00:05:53.660 --> 00:05:55.750
Things are out in the market,
and we're really pleased

00:05:55.820 --> 00:05:58.290
with what's occurred,
and we want to tell you about some of the

00:05:58.290 --> 00:06:00.320
things that we were able to accomplish.

00:06:00.370 --> 00:06:03.190
The first topic I want
to go into is QuickTime.

00:06:03.460 --> 00:06:07.520
Now, QuickTime is Apple's kind of
granddaddy API for multimedia,

00:06:07.520 --> 00:06:11.620
digital media, and time-based content.

00:06:11.990 --> 00:06:14.260
This has been around since 1991.

00:06:14.260 --> 00:06:18.060
It's used by content creators
and developers to create,

00:06:18.120 --> 00:06:20.060
manipulate,
and publish digital media in a

00:06:20.060 --> 00:06:22.040
variety of different formats.

00:06:22.280 --> 00:06:25.550
It's also -- it's built into the
foundation of the operating system,

00:06:25.550 --> 00:06:28.840
but it's also used by virtually
all of Apple's professional

00:06:28.970 --> 00:06:30.660
and consumer applications.

00:06:30.710 --> 00:06:32.440
But this technology
is not just important.

00:06:32.440 --> 00:06:34.040
This is also very important to Apple.

00:06:34.040 --> 00:06:37.040
This is also very important to our
third-party developer community.

00:06:37.040 --> 00:06:41.600
In fact, today,
Apple licenses QuickTime for

00:06:41.600 --> 00:06:44.740
redistribution with
software tools and titles,

00:06:44.740 --> 00:06:50.040
and every year we have more than
4,000 new titles that are licensed to

00:06:50.040 --> 00:06:52.520
distribute QuickTime with their products.

00:06:52.760 --> 00:06:55.100
So this has tremendous reach.

00:06:55.230 --> 00:06:58.400
Now, because Apple provides
QuickTime for Windows,

00:06:58.460 --> 00:07:00.650
we're able to go far
beyond the Macintosh,

00:07:00.730 --> 00:07:05.190
and as you heard Steve mention today,
our estimates are that since

00:07:05.280 --> 00:07:08.180
the beginning of QuickTime,
we've been able to distribute more

00:07:08.180 --> 00:07:10.210
than a billion copies of QuickTime.

00:07:10.360 --> 00:07:13.520
So you can see that it reached very,
very far.

00:07:13.630 --> 00:07:18.580
In fact, it goes beyond the PC,
because Apple has licensed the

00:07:18.580 --> 00:07:23.780
QuickTime file format for use
in a variety of non-PC devices,

00:07:23.870 --> 00:07:28.750
and we've been able to incorporate
the QuickTime format into the base

00:07:28.750 --> 00:07:30.410
of a number of industry standards.

00:07:30.640 --> 00:07:34.350
We find that QuickTime technology,
is going way, way beyond the PC.

00:07:34.680 --> 00:07:37.510
This is very exciting,
and I want you to know that the

00:07:37.520 --> 00:07:42.110
state of affairs with QuickTime today
is it's very robust technology.

00:07:42.300 --> 00:10:56.400
[Transcript missing]

00:10:56.650 --> 00:10:58.840
had the headaches, so you don't have to.

00:10:58.890 --> 00:11:03.710
This is probably the only multimedia
system that you can find out there in

00:11:03.710 --> 00:11:06.930
the mainstream that has the ability
to work with this kind of media in the

00:11:06.930 --> 00:11:08.260
way that you can do with QuickTime.

00:11:08.570 --> 00:11:10.730
It's really quite remarkable.

00:11:10.910 --> 00:11:14.840
You can learn a lot more about
264 and how it integrates into

00:11:14.840 --> 00:11:17.740
QuickTime in session 208 on Wednesday.

00:11:18.020 --> 00:11:20.410
So the next area where we
took a whole fresh look at

00:11:20.610 --> 00:11:22.140
QuickTime is in the area of audio.

00:11:22.140 --> 00:11:27.170
QuickTime and Quick-- the audio
support in QuickTime 7 is now

00:11:27.170 --> 00:11:29.030
built on top of core audio.

00:11:29.360 --> 00:11:31.950
And this means we inherit a
tremendous number of new capabilities

00:11:32.370 --> 00:11:33.760
that we haven't had in the past.

00:11:33.900 --> 00:11:36.990
And then combined with QuickTime's
traditional capabilities,

00:11:36.990 --> 00:11:39.070
we're able to do all kinds of new things.

00:11:39.090 --> 00:11:41.790
And very simply,
we've got rich support for a

00:11:41.810 --> 00:11:44.050
wide variety of surround formats.

00:11:44.200 --> 00:11:47.610
We can go up to 192 kilohertz
sample rates and beyond.

00:11:47.720 --> 00:11:50.670
We're able to support all
the known sample formats,

00:11:50.770 --> 00:11:53.160
including floating
point sampling formats.

00:11:53.270 --> 00:11:56.680
And we provide better accuracy--
synchronization accuracy--

00:11:56.680 --> 00:11:58.140
than we've ever had before.

00:11:58.280 --> 00:12:02.940
You can learn more about the audio
capabilities in session 201 on Tuesday.

00:12:03.020 --> 00:12:06.900
The next big area that we
wanted to tackle was sort of

00:12:06.900 --> 00:12:09.130
themed video on a texture.

00:12:09.480 --> 00:12:13.440
As you know,
the GPU is a real important emerging

00:12:13.720 --> 00:12:19.070
development that's having dramatic
impact on the graphics community,

00:12:19.150 --> 00:12:24.110
but it's also having dramatic impact
on the way that we think about video.

00:12:24.260 --> 00:12:29.400
QuickTime, up until QuickTime 7,
had an assumption built into

00:12:29.400 --> 00:12:33.520
its core about the nature of
video decompression and display.

00:12:33.820 --> 00:12:38.010
And the basic assumption was that
the two ideas-- picture decode and

00:12:38.010 --> 00:12:40.380
picture display-- were an atomic unit.

00:12:40.460 --> 00:12:47.120
This was an intelligent decision,
the right decision when we first made it,

00:12:47.120 --> 00:12:48.730
because it allowed us to ensure
optimal transfer of the media

00:12:48.890 --> 00:12:53.880
through the subsystem at a time when
memory bandwidth was at a premium.

00:12:53.940 --> 00:12:57.640
But for those of you who have
tried to take video and put it

00:12:57.640 --> 00:13:01.260
on a texture and have the video
subsystem still work great,

00:13:01.300 --> 00:13:03.060
you found this is a very difficult task.

00:13:03.180 --> 00:13:04.030
This is difficult for us.

00:13:04.110 --> 00:13:05.780
I'm sure it was very difficult for you.

00:13:05.900 --> 00:13:10.720
And we set out in QuickTime 7 to crack
this nut and solve it once and for all.

00:13:10.790 --> 00:13:11.820
How did we do that?

00:13:11.850 --> 00:13:16.860
We introduced a new technology
into the system called Core Video.

00:13:16.860 --> 00:13:21.320
This technology is
underneath QuickTime now,

00:13:21.320 --> 00:13:24.000
and it allows us to split the
picture decode and the picture

00:13:24.000 --> 00:13:27.000
display into two distinct phases.

00:13:27.030 --> 00:13:32.210
Core Video provides a very high
performance service for timing

00:13:32.210 --> 00:13:37.000
and buffering and ultimately
blitting of data to the display.

00:13:37.000 --> 00:13:43.440
And then QuickTime is responsible for
managing the decode and the scheduling

00:13:43.440 --> 00:13:46.600
of media to the point of the decode.

00:13:46.600 --> 00:13:49.140
And so what happens here is by making
this split in the architecture,

00:13:49.140 --> 00:13:53.160
we've now created a wonderful opening
for things like Core Image and

00:13:53.160 --> 00:13:56.920
OpenGL to be brought to bear on
the video frames before they've

00:13:56.940 --> 00:13:58.420
actually reached the screen.

00:13:58.520 --> 00:14:00.930
And we're going to show you some
more about that in just a second.

00:14:01.220 --> 00:14:03.720
You can learn about how to use
this in your own applications

00:14:03.740 --> 00:14:06.930
in Session 207 on Wednesday.

00:14:07.060 --> 00:14:10.280
So without any further ado,
let me come over to the demo machine

00:14:10.280 --> 00:14:14.090
and show you a little bit about what
you can do with this technology.

00:14:15.010 --> 00:14:23.560
So I have a very simple application here
that basically lets me bring up a clip.

00:14:23.560 --> 00:14:25.480
It's just a movie.

00:14:26.200 --> 00:14:29.660
And, uh, with this clip,
what I want to show you first of

00:14:29.660 --> 00:14:34.590
all is that this is basically an
application that's causing video to play,

00:14:34.860 --> 00:14:37.840
play, um,
play the movie to a texture and then the

00:14:37.970 --> 00:14:39.760
texture is being displayed on the screen.

00:14:39.760 --> 00:14:42.380
And what I can do with this
application is I can take,

00:14:42.540 --> 00:14:45.590
um, well, let me explain one other thing.

00:14:45.690 --> 00:14:50.580
So, um, for years people in the print
publishing world have utilized

00:14:50.620 --> 00:14:54.700
color sync to do color managed,
uh, workflows for print publishing.

00:14:55.020 --> 00:14:58.400
This is something that's very important
in professional workflows but has

00:14:58.470 --> 00:15:02.360
never really been available in a,
uh, off the shelf sort of, uh,

00:15:02.690 --> 00:15:05.860
easy to download sort
of a system in the past.

00:15:05.900 --> 00:15:11.360
What we are enabling with core video
and QuickTime 7 is the ability to start

00:15:11.360 --> 00:15:17.020
to apply color sync style profiles,
ICC profiles to video.

00:15:17.060 --> 00:15:20.480
The color sync operations are
hardware accelerated so that

00:15:20.480 --> 00:15:22.190
they can be utilized in parallel.

00:15:22.190 --> 00:15:23.800
They don't have any performance impacts.

00:15:23.800 --> 00:15:27.620
So, uh, I'm going to show you a little
bit of a sample of this.

00:15:27.620 --> 00:15:33.460
So, I'm going to show you a little
bit of a sample of this.

00:15:33.460 --> 00:15:39.180
So, I'm going to show you a
little bit of a sample

00:15:39.400 --> 00:15:42.360
And it's really as simple
as dragging the profile on,

00:15:42.360 --> 00:15:43.680
it's applied the video.

00:15:43.720 --> 00:15:47.060
Here's another one which is
sort of a typical sort of a

00:15:47.130 --> 00:15:50.900
popular kind of film effect,
sort of desaturates the video

00:15:50.900 --> 00:15:52.400
and then increases the contrast.

00:15:52.540 --> 00:15:57.780
So that's pretty cool,
and that's now possible with QuickTime 7.

00:15:59.400 --> 00:16:03.180
Now, the next thing that we did was
just sort of gratuitous and cute,

00:16:03.180 --> 00:16:05.700
but I want to show you this,
because it gives you a little bit

00:16:05.700 --> 00:16:09.190
better sense of the kind of the power
that's underneath this whole system.

00:16:09.200 --> 00:16:13.810
This is an application that
lets me basically turn my

00:16:13.810 --> 00:16:15.990
video into a jigsaw puzzle.

00:16:16.000 --> 00:16:21.520
So, I've got these little pieces,
and if I can find the corners,

00:16:21.520 --> 00:16:26.860
I can maybe put the puzzle back together,
and I don't think I'm doing so well.

00:16:26.860 --> 00:16:30.250
Well, the good news is I have a little
feature here that helps me make

00:16:30.460 --> 00:16:32.670
this happen for you in real time.

00:16:32.870 --> 00:16:36.350
Now...

00:16:39.970 --> 00:16:41.530
This is pretty cool.

00:16:41.680 --> 00:16:43.670
Let me tell you a little bit
more about how this one works.

00:16:43.830 --> 00:16:45.160
So the next thing I'm going
to do is I'm going to move,

00:16:45.250 --> 00:16:46.120
I can go to more pieces.

00:16:46.120 --> 00:16:48.510
We're now up to about,
what are we up to here?

00:16:48.530 --> 00:16:49.780
60 pieces.

00:16:49.780 --> 00:16:53.040
With this, if you look closely,
what you can see is every piece

00:16:53.040 --> 00:16:54.430
has a little shadow on it.

00:16:54.430 --> 00:16:57.210
Of course,
the pieces all have these rounded edges,

00:16:57.210 --> 00:16:59.920
and then there's the
video playing behind it.

00:17:00.050 --> 00:17:03.370
So what's happening is
QuickTime is decoding to a texture,

00:17:03.410 --> 00:17:07.300
and then using Core Graphics,
we've created a series of masks.

00:17:07.300 --> 00:17:09.700
I'm using Quartz 2D.

00:17:09.700 --> 00:17:13.270
We've created a series of masks,
and then the video is being

00:17:13.270 --> 00:17:17.420
drawn through the mask,
and the shadows on the puzzle pieces

00:17:17.550 --> 00:17:20.060
are being computed using Core Image.

00:17:20.090 --> 00:17:23.260
So you've got all these
technologies working together,

00:17:23.260 --> 00:17:25.380
and it's really quite remarkable.

00:17:25.460 --> 00:17:27.150
Obviously,
this would be a very difficult thing

00:17:27.150 --> 00:17:28.720
to do without these technologies.

00:17:28.750 --> 00:17:32.920
And again, you can apply the auto-solve
to get your groovy,

00:17:32.920 --> 00:17:34.700
funky animation.

00:17:34.700 --> 00:17:37.890
And you know, you can really take this
thing to the extreme.

00:17:37.890 --> 00:17:40.500
There's a few hundred pieces here.

00:17:40.500 --> 00:17:43.170
We've got almost 500 puzzle pieces.

00:17:43.400 --> 00:17:45.040
And again, the movie's playing just fine.

00:17:45.040 --> 00:17:46.500
It's just working great.

00:17:46.550 --> 00:17:50.570
So that's an incredibly powerful
new development in QuickTime 7.

00:17:54.700 --> 00:17:55.700
Thank you.

00:17:55.700 --> 00:18:01.700
So, you know,
one of the things that we learned

00:18:01.700 --> 00:18:05.380
talking with you over the last couple of
years is that more and more of you are

00:18:05.380 --> 00:18:08.120
using Cocoa to write your applications.

00:18:08.120 --> 00:18:10.860
Many of you have really learned about
the dramatic benefits that Cocoa can

00:18:10.920 --> 00:18:12.670
bring to your application development.

00:18:12.720 --> 00:18:16.400
Well,
we wanted to make sure that QuickTime 7

00:18:16.400 --> 00:18:20.840
was going to be a great client for
you if you're writing in Cocoa.

00:18:20.970 --> 00:18:24.800
And so we told you about this last year,
and we're done with it now.

00:18:24.930 --> 00:18:28.330
We've built a wonderful toolkit
that gives you very simple,

00:18:28.610 --> 00:18:34.270
powerful access to QuickTime through
a set of Cocoa APIs.

00:18:34.320 --> 00:18:37.120
It speaks the language that
Cocoa programmers speak.

00:18:37.170 --> 00:18:42.190
There are no sort of foreign data
types and strange API conventions

00:18:42.730 --> 00:18:45.260
that you have to learn now.

00:18:45.260 --> 00:18:47.420
And it's very powerful.

00:18:47.420 --> 00:18:49.750
In fact,
we wanted to make sure it was going

00:18:49.750 --> 00:18:53.900
to be powerful enough to support
an industrial-grade application.

00:18:53.900 --> 00:18:57.400
So we said we should be
using this ourselves.

00:18:57.420 --> 00:19:00.560
So one of the other things we did in
QuickTime 7 was we went back and we said,

00:19:00.560 --> 00:19:05.220
let's rewrite QuickTime Player,
and let's write it on top of QtKit.

00:19:05.220 --> 00:19:08.630
And with QtKit,
we'll automatically inherit a whole

00:19:08.630 --> 00:19:13.110
bunch of nice UI characteristics that
come with every Cocoa application.

00:19:13.300 --> 00:19:17.390
And because we knew we had to be able
to support high performance playback,

00:19:17.460 --> 00:19:20.600
I can promise you that the
QtKit framework is able to

00:19:20.600 --> 00:19:22.020
give you full access to the
high performance application.

00:19:22.020 --> 00:19:22.310
And that's what we're doing.

00:19:22.310 --> 00:19:24.680
We're going to be using the high
performance parts of the audio

00:19:24.680 --> 00:19:26.260
and video playback systems.

00:19:26.290 --> 00:19:29.160
There's no compromise here
when it comes to performance.

00:19:29.160 --> 00:19:31.220
So in addition,
we've been able to implement a whole

00:19:31.220 --> 00:19:37.740
bunch of new features because we've
got an easy-to-use programming API.

00:19:37.740 --> 00:19:40.260
We added some simple movie recording.

00:19:40.260 --> 00:19:42.310
We added movie sharing functionalities.

00:19:42.310 --> 00:19:44.060
There's a whole new set of AV controls.

00:19:44.170 --> 00:19:48.660
A very important feature for many of
you is now when you're doing exports,

00:19:48.740 --> 00:19:52.100
you can get multiple exports
running at the same time.

00:19:52.100 --> 00:19:52.160
And you can still use the same API.

00:19:52.180 --> 00:19:52.180
And that's what we're doing.

00:19:52.180 --> 00:19:54.460
And we're going to be using
the same application for all of

00:19:54.560 --> 00:19:56.170
the applications in the system.

00:19:56.170 --> 00:19:58.960
And it works great simultaneously.

00:19:58.960 --> 00:20:01.840
And it's actually quite
thread process friendly.

00:20:01.840 --> 00:20:06.420
So it'll back off when you're doing
other things that are important to you.

00:20:06.450 --> 00:20:08.200
Very, very cool feature.

00:20:08.230 --> 00:20:11.210
And then last of all,
there's a new groovy full screen

00:20:11.210 --> 00:20:15.900
control and display capability
that we're pretty excited about.

00:20:15.910 --> 00:20:19.110
Now this is a great testament to QtKit,
but I don't want you

00:20:19.110 --> 00:20:20.260
to take my word for it.

00:20:20.260 --> 00:20:21.820
I'd like to bring a good friend here.

00:20:21.820 --> 00:20:21.820
He's a great friend.

00:20:21.820 --> 00:20:21.820
He's a great friend.

00:20:21.820 --> 00:20:22.050
He's a great friend.

00:20:22.170 --> 00:20:24.250
And we're going to get a good friend
of ours up to the stage to tell you a

00:20:24.250 --> 00:20:26.760
little bit about what he's been doing.

00:20:26.760 --> 00:20:29.250
This is Michael Johnson from Pixar.

00:20:29.900 --> 00:20:35.300
[Transcript missing]

00:20:38.760 --> 00:20:42.360
I was here about three years ago and
gave a lunchtime talk where I showed

00:20:42.360 --> 00:20:45.760
you guys some sort of behind-the-scenes
stuff about how we make movies at Pixar.

00:20:45.760 --> 00:20:47.410
And at the end of it there,
I showed a little

00:20:47.410 --> 00:20:51.040
something I'd put together,
and it was a little program

00:20:51.040 --> 00:20:53.990
that I wrote for Pete Docter,
and it's what we refer to as

00:20:53.990 --> 00:20:55.600
being developed on a dare.

00:20:55.600 --> 00:20:59.580
Pete actually asked for a program
that he could just kind of tap out

00:20:59.580 --> 00:21:03.620
the timing of storyboards before
he would go into Final Cut Pro,

00:21:03.620 --> 00:21:06.410
which is a much more complicated
program than he wanted for

00:21:06.410 --> 00:21:07.800
that part of his process.

00:21:07.800 --> 00:21:10.700
So I went off and I wrote a
little something with him.

00:21:10.700 --> 00:21:12.600
We kind of iterated on
it for about two weeks,

00:21:12.600 --> 00:21:15.070
and every day we sort of put
some new features in there.

00:21:15.080 --> 00:21:17.720
And he really liked it,
and we ended up actually using

00:21:17.720 --> 00:21:19.400
it for a whole bunch of things.

00:21:19.400 --> 00:21:23.280
We ended up throwing another engineer,
Josh Annen, on with me,

00:21:23.280 --> 00:21:26.370
and we spent about six months
doing a full-blown real

00:21:26.370 --> 00:21:28.580
production app inside of Pixar.

00:21:28.580 --> 00:21:32.850
And we have lots of happy users for this,
and most of them are on

00:21:32.850 --> 00:21:34.920
movies I can't talk about.

00:21:36.900 --> 00:21:39.550
And there's one that I can talk about,
which it was actually

00:21:39.550 --> 00:21:42.580
used by Mark Andrews,
unbeknownst to us, the engineers.

00:21:42.600 --> 00:21:45.580
Mark Andrews was trying to work
on the final battle sequence.

00:21:45.580 --> 00:21:47.130
He's the head of story
on The Incredibles,

00:21:47.250 --> 00:21:49.120
and he was having some
troubles pinning this stuff up.

00:21:49.210 --> 00:21:51.020
And he heard about this app that we had.

00:21:51.050 --> 00:21:52.920
He scanned his pictures in,
he timed it out,

00:21:52.920 --> 00:21:56.970
he pitched it to Brad Bird,
and it went really well for him.

00:21:57.090 --> 00:22:01.830
And so I asked Mark to come today,
but unfortunately he was busy,

00:22:01.830 --> 00:22:04.710
so I have kind of the next best thing.

00:22:05.470 --> 00:22:06.850
So Violet comes running
in with the remote.

00:22:06.930 --> 00:22:09.080
"Mom, Mom, I got the remote!"
She turns visible again.

00:22:09.080 --> 00:22:09.800
Here comes the robot.

00:22:09.800 --> 00:22:14.030
"A remote, a remote for what?" "Violet,
I don't know!" She starts

00:22:14.030 --> 00:22:14.980
pressing buttons.

00:22:15.050 --> 00:22:15.830
Click, click, click, click.

00:22:15.890 --> 00:22:19.950
"To control the robot?" Click, click,
"Why don't you come on thing?" Comes,

00:22:19.950 --> 00:22:21.400
steps over camera.

00:22:22.090 --> 00:22:25.170
Presses the button.

00:22:25.170 --> 00:22:25.170
Click.

00:22:25.380 --> 00:22:31.820
Rocket Boosters, the robot,
control the robot, takes off flying,

00:22:31.820 --> 00:22:34.460
crashes into a building.

00:22:34.460 --> 00:22:36.130
Bob's still stuck in the claw.

00:22:36.150 --> 00:22:37.930
Maybe that wasn't the right one.

00:22:37.930 --> 00:22:38.790
Here it comes.

00:22:38.790 --> 00:22:40.460
Gets up, starts charging him.

00:22:40.540 --> 00:22:41.630
Bob's still stuck.

00:22:41.630 --> 00:22:42.360
Dash it all.

00:22:42.360 --> 00:22:43.230
Here it comes.

00:22:43.230 --> 00:22:44.340
Give me that thing.

00:22:44.350 --> 00:22:45.890
You don't know how to use it.

00:22:45.890 --> 00:22:46.990
Give me that thing.

00:22:47.000 --> 00:22:47.490
Click.

00:22:47.490 --> 00:22:48.540
Presses a button.

00:22:48.540 --> 00:22:49.030
Click.

00:22:49.030 --> 00:22:50.150
In the background.

00:22:50.150 --> 00:22:50.620
Fwing.

00:22:50.630 --> 00:22:52.260
Bob gets tossed up in the air.

00:22:52.260 --> 00:22:52.990
Oh, my God.

00:22:53.110 --> 00:22:54.180
He's free.

00:22:54.640 --> 00:22:55.460
That wasn't right.

00:22:55.730 --> 00:22:56.390
Bob grabs it.

00:22:56.390 --> 00:22:57.230
Give me that.

00:22:57.230 --> 00:23:00.400
Bob gets up off the ground
and sees the robot's coming.

00:23:00.400 --> 00:23:01.340
Boom, boom.

00:23:01.420 --> 00:23:02.860
Closer to his family.

00:23:02.860 --> 00:23:03.830
Boom, boom.

00:23:04.040 --> 00:23:05.750
Nothing can stop that thing.

00:23:05.800 --> 00:23:08.560
The only thing that
can stop it is itself.

00:23:18.670 --> 00:23:19.990
So like I said,
that's a little Cocoa app.

00:23:20.080 --> 00:23:23.840
We wrote it three years ago,
and it was very successful.

00:23:23.840 --> 00:23:25.400
It was kind of too successful.

00:23:25.400 --> 00:23:28.320
And my group, we're really busy.

00:23:28.320 --> 00:23:31.260
We do a lot of support for sort of the
story and editorial part of the pipeline.

00:23:31.260 --> 00:23:33.020
We have other things to do.

00:23:33.020 --> 00:23:34.990
We can't sort of just keep
tweaking these things.

00:23:35.000 --> 00:23:39.090
But the requests kind of kept piling up,
and they wanted things like they

00:23:39.090 --> 00:23:42.950
wanted to do longer pitches,
they wanted frame-accurate pitches,

00:23:42.950 --> 00:23:47.480
they wanted sound attached to the boards,
they wanted faster load times.

00:23:47.480 --> 00:23:50.870
And then what's interesting is
something we hadn't thought about,

00:23:50.960 --> 00:23:54.280
which is as the movie gets made,
we go out of the storyboard phase,

00:23:54.350 --> 00:23:57.250
and we go into the previs phase,
we go into a little modeling,

00:23:57.250 --> 00:23:59.540
then we have some animation and lighting.

00:23:59.540 --> 00:24:02.870
And they wanted this ability to
actually read back these big,

00:24:02.970 --> 00:24:07.100
you know, 25 minutes worth of stuff back
from editorial and play those in

00:24:07.100 --> 00:24:09.340
sequence with the rest of the boards.

00:24:09.400 --> 00:24:12.710
And, you know,
this is sort of an obvious answer here,

00:24:12.710 --> 00:24:15.360
right, which is use QuickTime, right?

00:24:15.360 --> 00:24:16.980
But, you know, I don't know.

00:24:16.980 --> 00:24:19.860
QuickTime is really... It's really hard,
and we're really busy.

00:24:19.860 --> 00:24:21.320
We can't make that kind of investment.

00:24:21.320 --> 00:24:23.380
And, you know, and frankly,
we're Cocoa programmers.

00:24:23.380 --> 00:24:25.090
We're a little spoiled.

00:24:25.100 --> 00:24:27.560
You know, we're simple people.

00:24:33.550 --> 00:24:37.670
So about, oh, I don't know,
eight months ago, a year ago,

00:24:37.740 --> 00:24:40.200
we started talking very
concretely with Apple,

00:24:40.200 --> 00:24:43.680
actually, I guess longer ago than that,
maybe a year and a half ago,

00:24:44.080 --> 00:24:47.840
about what we would like to see in a kit.

00:24:47.920 --> 00:24:54.330
And Apple was very, very responsive,
and they came up with the QT kit,

00:24:54.330 --> 00:24:57.770
which is a really great 1.0.

00:24:57.780 --> 00:25:01.460
It's a framework that I think
is going to continue to evolve,

00:25:01.460 --> 00:25:04.580
but right now,
the thing that's shipping there is really

00:25:05.120 --> 00:25:07.760
great for doing sort of movies of movies.

00:25:07.760 --> 00:25:10.970
And it did what we wanted,
which is let us get to the

00:25:10.980 --> 00:25:14.940
power of QuickTime and remain
true to our inner selves.

00:25:14.960 --> 00:25:16.040
Cocoa programmers.

00:25:16.040 --> 00:25:21.080
And again, it's been about,
because the QT kit, that's one thing.

00:25:21.080 --> 00:25:23.500
We built a couple apps with this stuff,
but the one that I'm talking

00:25:23.580 --> 00:25:25.800
about here today is this
thing called Pitch Doctor 2.

00:25:25.800 --> 00:25:27.660
And we've been working on
it now for about five years.

00:25:27.800 --> 00:25:28.340
Five months.

00:25:28.340 --> 00:25:34.180
And another programmer and I, Josh Minor,
and we're expecting lots of happy users.

00:25:34.180 --> 00:25:34.990
We're not there yet.

00:25:35.120 --> 00:25:37.480
We've got about another month
before this thing ships.

00:25:37.580 --> 00:25:41.450
So I thought I would give you
just a real quick demo here.

00:25:47.140 --> 00:25:49.230
So again, here's Pitch Doctor 2.

00:25:49.240 --> 00:25:51.740
We just subclassed a bunch
of stuff and made it darker

00:25:51.740 --> 00:25:54.760
because we like dark stuff.

00:25:54.780 --> 00:25:58.380
So here we are,
and here's Pitch Doctor 2,

00:25:58.410 --> 00:26:00.260
very similar to sort of
what you were seeing before,

00:26:00.390 --> 00:26:05.280
except this time we've actually got
some previous stuff cut in there now.

00:26:05.300 --> 00:26:08.820
And it's going in there,
it's going back and

00:26:08.820 --> 00:26:11.120
forth between the boards,
and...

00:26:11.630 --> 00:26:13.040
There's that sort of stuff,
and that's sort of in the middle,

00:26:13.040 --> 00:26:14.740
when you're in the middle
of the process there.

00:26:14.740 --> 00:26:19.800
But I brought along, actually,
so if you look down at the bottom here,

00:26:19.800 --> 00:26:21.750
you can see this is about
four minutes of footage.

00:26:21.760 --> 00:26:27.320
But where it starts to get really
interesting for us is when we actually

00:26:27.320 --> 00:26:32.700
do stuff where we've got a real
big chunk of the movie on there.

00:26:32.700 --> 00:26:35.930
So this is actually 6AB,
which is the last 22 minutes.

00:26:35.990 --> 00:26:37.640
It's a double reel of the movie.

00:26:37.690 --> 00:26:43.600
And so one of the other fun
things that we can do is,

00:26:43.810 --> 00:26:48.370
in addition to doing video,
we actually have a child

00:26:48.370 --> 00:26:51.200
window that we put up in there.

00:26:51.200 --> 00:26:53.990
And so we're actually doing a
sketching stuff on top of there,

00:26:54.000 --> 00:26:55.770
and those are based on those boards.

00:26:55.980 --> 00:26:59.290
And so we're getting all the advantages,
all the sort of advantages of being

00:26:59.300 --> 00:27:02.640
a Cocoa programmer and child window
stuff and all that kind of thing.

00:27:02.640 --> 00:27:04.960
And all the power of
QuickTime and the fact that we

00:27:05.050 --> 00:27:06.560
can sort of move around here.

00:27:06.740 --> 00:27:09.640
I'm coming in here, going there.

00:27:09.850 --> 00:27:13.830
And this is the kind of stuff that,
for us, is just -- it makes all the

00:27:14.170 --> 00:27:17.520
difference in the world that
we can sort of come in here,

00:27:17.660 --> 00:27:21.520
we go full screen on this stuff,
we're playing it.

00:27:21.720 --> 00:27:24.530
We can work very, very tightly with huge
chunks of the movie.

00:27:24.910 --> 00:27:29.690
And again,
this is -- Pitch Doctor was about 28,000,

00:27:29.750 --> 00:27:32.580
30,000 lines of code.

00:27:32.580 --> 00:27:34.860
Pitch Doctor 2,
we're actually using this framework

00:27:34.950 --> 00:27:36.580
we wrote called the Film Online Kit.

00:27:36.580 --> 00:27:38.310
It's about 60,000 lines of code.

00:27:38.410 --> 00:27:42.240
And Pitch Doctor 2, the app,
is 13,000 lines of code.

00:27:42.330 --> 00:27:44.960
So this stuff is real.

00:27:45.400 --> 00:27:46.820
And it's really, really cool.

00:27:46.890 --> 00:27:48.430
So I hope you guys use it.

00:27:48.570 --> 00:27:54.220
And I'm giving another -- we
can switch back over here.

00:27:54.260 --> 00:27:57.840
We have another talk on Friday,
kind of sort of the -- you know,

00:27:57.840 --> 00:28:00.540
similar to the one
I gave three years ago,

00:28:00.540 --> 00:28:02.510
sort of nominally called
Cartoons and Code.

00:28:02.520 --> 00:28:04.440
And hope to see you there.

00:28:04.530 --> 00:28:05.020
It's at lunch.

00:28:05.020 --> 00:28:05.720
I don't know what room it is.

00:28:05.900 --> 00:28:08.990
But you can look at the pieces.

00:28:09.030 --> 00:28:10.760
Thank you.

00:28:12.700 --> 00:28:16.270
Thank you very much, Michael.

00:28:16.430 --> 00:28:20.310
OK, so that's a quick view of QuickTime 7
and some of the things that

00:28:20.310 --> 00:28:22.490
we've been investigating there.

00:28:22.570 --> 00:28:24.000
And thanks again, Michael.

00:28:24.000 --> 00:28:25.560
That was great.

00:28:25.890 --> 00:28:28.540
So next,
I'd like to bring up Peter Graffagnino

00:28:28.550 --> 00:28:32.310
and have him tell you a lot more
about some of the other core

00:28:32.310 --> 00:28:35.530
technologies built into Tiger in
the area of graphics and media.

00:28:35.610 --> 00:28:36.780
Thanks, Tim.

00:28:36.780 --> 00:28:39.750
There you go.

00:28:39.800 --> 00:28:41.490
Hi, everybody.

00:28:42.990 --> 00:28:45.930
So I'm going to bring you through some
of the technologies we have for you

00:28:45.940 --> 00:28:49.140
in Mac OS X for graphics and media.

00:28:49.170 --> 00:28:51.520
And kind of to restate our goal,
I think you've heard a few of the

00:28:51.520 --> 00:28:55.480
talks this afternoon about how
what we really want to do is make

00:28:55.530 --> 00:28:58.860
it possible for you to create
applications that kind of surprise,

00:28:58.980 --> 00:29:00.380
delight, and inspire your users.

00:29:00.400 --> 00:29:03.400
You know,
the very Apple qualities we all like.

00:29:03.430 --> 00:29:06.750
Another way to think about it is
shortening the distance between

00:29:07.170 --> 00:29:10.990
your idea and kind of the code
that you create to implement that.

00:29:11.930 --> 00:29:14.000
Little corny, I know.

00:29:14.060 --> 00:29:18.040
So here's all the great core technology
we have that Tim talked about.

00:29:18.060 --> 00:29:22.120
And the great thing to realize is our
plan to give you all the tools you

00:29:22.120 --> 00:29:25.600
need is to build in professional-grade
technology into the OS.

00:29:25.620 --> 00:29:28.700
Whether you're doing audio, 2D,
3D imaging, or video,

00:29:28.700 --> 00:29:29.580
it's all right there.

00:29:29.580 --> 00:29:32.790
And there's professional applications
built on top of all of these

00:29:32.790 --> 00:29:34.520
stacks that you can go out and buy.

00:29:34.540 --> 00:29:36.760
Or you don't have to learn
about the low-level details.

00:29:36.760 --> 00:29:39.730
If you're just a Cocoa programmer,
all of these technologies are

00:29:39.900 --> 00:29:45.710
enabled when you use NS Image,
or use the sound API or 2D graphics.

00:29:45.840 --> 00:29:48.400
So I'm going to take you on a tour
through around these technologies and

00:29:48.400 --> 00:29:51.880
kind of tell you some of the basic
facts about them in case you're new,

00:29:51.880 --> 00:29:53.940
and also kind of what's new in Tiger.

00:29:53.970 --> 00:29:55.880
So first up is Core Audio.

00:29:55.880 --> 00:29:58.640
When we designed Mac OS X,
we kind of went back to the

00:29:58.640 --> 00:30:03.320
drawing board on platform audio to
really bring it into the-- enable

00:30:03.320 --> 00:30:06.180
a whole new set of applications.

00:30:06.180 --> 00:30:08.620
And Core Audio is a
professional-grade audio platform.

00:30:08.690 --> 00:30:13.980
It's floating point, multi-channel,
handles really high sampling frequencies,

00:30:13.980 --> 00:30:15.520
and it's incredibly low latency.

00:30:15.520 --> 00:30:17.360
We're able to accomplish this
by using some of the thread

00:30:17.460 --> 00:30:20.400
scheduling primitives in the kernel
to get incredibly low latency,

00:30:20.400 --> 00:30:23.920
which is real important
for high-performance audio.

00:30:23.920 --> 00:30:26.360
New in Tiger is something we're
calling aggregate devices,

00:30:26.360 --> 00:30:29.620
which is a way to take one
physical device-- say it's an

00:30:29.620 --> 00:30:33.190
eight-channel device-- and make it
look to software-- two of those,

00:30:33.200 --> 00:30:36.540
say-- and make it look
like one 16-channel device.

00:30:36.540 --> 00:30:39.680
So you can aggregate physical
devices into one logical device.

00:30:39.680 --> 00:30:40.780
That's really useful.

00:30:40.780 --> 00:30:45.240
Also is a new thing called
the Core Audio File Format,

00:30:45.240 --> 00:30:48.020
which is a new-- a
professional-grade audio format,

00:30:48.020 --> 00:30:52.640
which goes beyond the 32-bit
limit for addressing full 64 bits,

00:30:52.790 --> 00:30:53.520
multi-channel.

00:30:53.520 --> 00:30:57.720
And when you start dealing with surround
sound soundtracks of really big,

00:30:57.890 --> 00:31:00.270
long feature films, for example,
you can run out of 32

00:31:00.270 --> 00:31:01.360
bits pretty quickly.

00:31:01.420 --> 00:31:03.000
So that's a really great
format that's in there,

00:31:03.000 --> 00:31:06.190
and it's built in the QuickTime,
and has lots of metadata support,

00:31:06.190 --> 00:31:08.480
so it works well with Spotlight as well.

00:31:08.990 --> 00:31:11.400
The other real important thing
about audio architecture is

00:31:11.400 --> 00:31:14.260
having a good plug-in story,
and we've got that with Audio Units,

00:31:14.260 --> 00:31:19.380
which is a platform-wide standard
format for doing audio plug-ins.

00:31:19.420 --> 00:31:23.310
So you can do either DSP-type
plug-ins for just processing audio,

00:31:23.450 --> 00:31:26.730
or instrument plug-ins like
you might see in GarageBand,

00:31:26.770 --> 00:31:27.800
for example.

00:31:27.800 --> 00:31:31.180
And it's supported by all the
premier audio applications,

00:31:31.180 --> 00:31:35.820
so we've been able to kind of standardize
audio plug-ins across the platform,

00:31:35.820 --> 00:31:38.870
which is really great for people
who develop audio plug-ins,

00:31:38.940 --> 00:31:41.000
and great for hosting
applications as well.

00:31:41.000 --> 00:31:44.680
There's hundreds of effects available,
and there's a licensing program,

00:31:44.690 --> 00:31:47.900
which if you go to that URL,
and whether you write the individual

00:31:47.900 --> 00:31:51.200
audio plug-ins themselves,
or you create a hosting application,

00:31:51.240 --> 00:31:55.760
you can license the logo and use
it on your packaging if you want.

00:31:57.780 --> 00:32:00.940
Another interesting application to
go along with the audio units is

00:32:00.940 --> 00:32:03.150
something new in Tiger called AU Lab.

00:32:03.150 --> 00:32:07.300
And AU Lab is a visual developer
tool for exploring core audio,

00:32:07.300 --> 00:32:11.860
and it's sort of the best practices
test harness for your audio units.

00:32:13.030 --> 00:32:15.810
Audio units actually can have
either a custom UI that's custom

00:32:15.920 --> 00:32:18.800
drawn or a generic UI just on
their parameter description.

00:32:18.800 --> 00:32:21.140
And in AU Lab,
you can either look at it both ways,

00:32:21.140 --> 00:32:24.100
make sure it's working,
you can do live mixing and playback.

00:32:24.260 --> 00:32:26.140
It's kind of a performance tool as well.

00:32:26.140 --> 00:32:29.520
So you can look at audio units
in their full spectrum of uses,

00:32:29.590 --> 00:32:32.450
both real time and just
within the application.

00:32:33.890 --> 00:32:38.800
The other technology that we are
shipping in Tiger is called OpenAL.

00:32:38.800 --> 00:32:41.750
OpenAL is a powerful
API for 3D immersive audio,

00:32:41.820 --> 00:32:42.740
typically in games.

00:32:42.800 --> 00:32:47.800
It's cross-platform, Mac OS X,
Linux Windows, and consoles as well.

00:32:47.820 --> 00:32:52.800
And we engaged with this project before
Tiger and contributed to the open source,

00:32:52.800 --> 00:32:56.650
but now it's actually built into Tiger,
so you can just use OpenAL directly.

00:32:56.800 --> 00:32:58.860
It supports multiple
speakers for surround sound,

00:32:58.930 --> 00:33:00.800
and it's of course all
built on core audio,

00:33:00.800 --> 00:33:05.280
and there are a number of game titles
that are already shipping using OpenAL.

00:33:05.470 --> 00:33:08.160
A pointer to a couple
of the audio sessions.

00:33:08.160 --> 00:33:12.200
We've got audio sessions
tomorrow for you to check out.

00:33:13.330 --> 00:33:15.500
Next technology is 2D graphics.

00:33:15.650 --> 00:33:21.040
Quartz 2D and PDF form the foundation
of Mac OS X's 2D graphics API.

00:33:21.040 --> 00:33:23.190
It's a professional 2D drawing model.

00:33:23.200 --> 00:33:25.400
Obviously,
PDF and PostScript have been used in

00:33:25.410 --> 00:33:26.860
the graphic arts industry forever.

00:33:26.860 --> 00:33:30.580
And it's the basic of the whole
printing workflow on Mac OS X.

00:33:30.580 --> 00:33:33.940
It's integrated with ColorSync
for color management,

00:33:33.990 --> 00:33:36.940
and in Tiger,
it's integrated with Core Image for

00:33:36.940 --> 00:33:38.790
image processing as well.

00:33:39.430 --> 00:33:43.500
There's some good tools to
use with the Quartz 2D API.

00:33:43.540 --> 00:33:45.710
There's a Quartz debug,
which really lets you get in

00:33:45.710 --> 00:33:48.180
there and see how frequently
your windows are updating,

00:33:48.180 --> 00:33:50.190
what parts of your
windows you're drawing.

00:33:50.260 --> 00:33:51.570
It's a great tool if
you don't know about it.

00:33:51.580 --> 00:33:54.200
You can usually shave a lot of
processing out of your app and

00:33:54.200 --> 00:33:56.360
optimize your redraw speeds.

00:33:56.360 --> 00:33:58.350
ColorSync Utility is the
utility we have in there.

00:33:58.360 --> 00:34:01.280
It can do some advanced color
processing on PDF files.

00:34:01.280 --> 00:34:02.920
Also has a profile visualizer.

00:34:02.920 --> 00:34:05.100
You could take those profiles
Tim was playing with,

00:34:05.100 --> 00:34:09.770
bring them up, and actually look at how
the deforming color space.

00:34:09.780 --> 00:34:10.840
Great tool.

00:34:10.840 --> 00:34:14.420
And also Automator,
which you've seen demoed before.

00:34:14.470 --> 00:34:18.640
But it also has a-- we've provided
a few PDF actions for Automator,

00:34:18.680 --> 00:34:21.620
so you can do batch
processing to PDF files.

00:34:21.620 --> 00:34:25.970
And that's another opportunity for
applications who can process PDF.

00:34:25.980 --> 00:34:29.760
If they can also do Automator actions,
you can build up a pretty rich

00:34:29.950 --> 00:34:34.210
workflow of doing things to
PDF files through Automator.

00:34:34.600 --> 00:36:48.600
[Transcript missing]

00:36:52.200 --> 00:36:57.610
In fact, you can enjoy the benefits of
Metro even if you're still running 10.0,

00:36:57.690 --> 00:36:59.870
because PDF has always been in OS X.

00:37:00.170 --> 00:37:02.760
But actually,
there's a more interesting kind of

00:37:02.840 --> 00:37:08.130
point here that I'd like to make,
which is kind of this point

00:37:08.760 --> 00:37:14.910
about if a problem's been really
well solved in the industry,

00:37:15.180 --> 00:37:18.180
obviously,
many years of graphic arts-- great slide,

00:37:18.180 --> 00:37:18.180
isn't it?

00:37:18.310 --> 00:37:22.230
You know, there's little value in really
reinventing something like that.

00:37:22.290 --> 00:37:24.410
And there's a limited
amount of creative energy,

00:37:24.410 --> 00:37:26.160
you know,
that anyone has or any team has,

00:37:26.270 --> 00:37:28.140
and there's just better things to do.

00:37:28.140 --> 00:37:31.490
And so the analogy here would be,
you know, if you're writing applications

00:37:31.500 --> 00:37:34.130
on top of Mac OS X and all the
technology and all the work we put

00:37:34.130 --> 00:37:36.320
in to all these core technologies,
you know,

00:37:36.460 --> 00:37:39.120
don't go reinvent and write your
own 2D graphics library and your own

00:37:39.120 --> 00:37:40.810
image processing and all that stuff.

00:37:41.060 --> 00:37:44.260
Just, you know, leverage the platform,
you know, then spend your brain cells

00:37:44.260 --> 00:37:46.600
on doing things that are
unique to your application.

00:37:46.600 --> 00:37:48.840
So that's my little sidebar for that.

00:37:51.700 --> 00:37:52.610
I'm glad you agree.

00:37:52.620 --> 00:37:57.880
So next is 3D graphics, OpenGL.

00:37:57.880 --> 00:38:03.140
OpenGL is the industry standard
API for 3D graphics and visualization.

00:38:03.140 --> 00:38:07.340
It's been around forever and
really was the premier interactive

00:38:07.340 --> 00:38:09.600
3D graphics in the industry.

00:38:09.600 --> 00:38:13.080
And on OS X,
it's not just sort of an API that's

00:38:13.120 --> 00:38:15.720
on the side that burls a hole
through the windowing system.

00:38:15.720 --> 00:38:17.580
It's built in at a fundamental level.

00:38:18.040 --> 00:38:20.680
In fact, our whole windowing system,
Quartz Extreme,

00:38:20.680 --> 00:38:22.420
is built on top of OpenGL.

00:38:22.420 --> 00:38:24.700
And OpenGL is running all the time,
and it has been for a

00:38:24.790 --> 00:38:25.860
couple of releases now.

00:38:25.860 --> 00:38:27.830
And in Tiger,
we're taking that even further

00:38:27.960 --> 00:38:29.320
with things like Core Image.

00:38:29.320 --> 00:38:32.940
We're putting image
processing on top of the GPU.

00:38:32.940 --> 00:38:36.440
And with QuickTime and Core Video,
where we're putting video

00:38:36.440 --> 00:38:38.120
display on top of OpenGL.

00:38:38.120 --> 00:38:41.900
And some OpenGL improvements
themselves in Tiger,

00:38:41.900 --> 00:38:45.750
we have GLSL, which is the OpenGL shading
language in Tiger.

00:38:45.760 --> 00:38:47.780
And we also have a bunch of
performance optimizations.

00:38:48.020 --> 00:38:53.000
And we've seen some really good wins with
games just running from Panther to Tiger.

00:38:53.000 --> 00:38:54.950
So we're excited about that.

00:38:54.970 --> 00:38:59.110
The other great thing about the
OpenGL story on Mac OS X is that

00:38:59.120 --> 00:39:03.300
we've got some platform-specific
Mac OS X-only tools to work with OpenGL.

00:39:03.300 --> 00:39:05.310
You can work with
OpenGL on other platforms,

00:39:05.310 --> 00:39:07.670
but you don't get the
advantages of these tools.

00:39:07.680 --> 00:39:10.320
Like OpenGL Profiler,
which you can wheel up to your

00:39:10.320 --> 00:39:13.510
application and intercept all the
OpenGL calls and see what you're

00:39:13.510 --> 00:39:14.710
doing and what's taking time.

00:39:14.720 --> 00:39:16.700
Or the Driver Monitor,
where you can go in and

00:39:16.700 --> 00:39:18.000
see how texture and VRAM.

00:39:18.000 --> 00:39:21.570
is being allocated and see how long
you're waiting for the graphics card.

00:39:21.620 --> 00:39:24.630
Or OpenGL Shader Builder,
where you can prototype

00:39:24.630 --> 00:39:27.470
little fragment programs,
vertex programs.

00:39:27.580 --> 00:39:29.150
So a really great set of tools.

00:39:29.200 --> 00:39:31.360
And if you're not familiar with those,
you should definitely go to the

00:39:31.360 --> 00:39:32.400
sessions and check those out.

00:39:32.440 --> 00:39:36.150
So there's a couple of
sessions on OpenGL in 3D.

00:39:36.160 --> 00:39:37.760
There's going to be a games track.

00:39:37.830 --> 00:39:41.830
In fact, there's a whole games
track this year at WWDC.

00:39:41.860 --> 00:39:46.970
And there's an OpenGL performance
session on Thursday as well.

00:39:48.580 --> 00:39:51.260
So next we come to imaging.

00:39:51.260 --> 00:39:53.820
The new technology in
Tiger here is Core Image,

00:39:53.840 --> 00:39:58.960
which we talked about last year at WWDC,
and it's been shipping in Tiger.

00:39:58.960 --> 00:40:01.570
It's a floating point image
processing framework based

00:40:01.580 --> 00:40:05.120
on stream computing paradigm,
which I talked about last

00:40:05.120 --> 00:40:06.510
year how that worked.

00:40:06.760 --> 00:40:11.940
And it leverages both the GPU and
the CPU for implementation.

00:40:11.940 --> 00:40:17.330
So whether you're on, say, a dual G5,
or whether you're on an

00:40:17.330 --> 00:40:23.090
NVIDIA card or an ATI card,
we can program any of those computational

00:40:23.090 --> 00:40:25.820
engines to do the work for you.

00:40:25.820 --> 00:40:30.940
And the nice thing about Core Image is
the kernels are expressed in

00:40:31.010 --> 00:40:34.780
a hardware-independent manner,
in a little mini OpenGL shading

00:40:34.870 --> 00:40:37.800
language-like language for
doing image processing.

00:40:37.930 --> 00:40:39.800
And this makes the whole
thing very approachable.

00:40:39.800 --> 00:40:43.180
So you don't have to know how
to wrangle OpenGL and P buffers,

00:40:43.180 --> 00:40:45.330
or program AlteVec, or whatever.

00:40:45.340 --> 00:40:50.910
You can either string together predefined
kernels that we ship in the OS or

00:40:50.950 --> 00:40:53.060
kernels that other people have given you.

00:40:53.080 --> 00:40:55.610
Or you can write your own kernel,
and you just write the

00:40:55.610 --> 00:40:58.960
inner bit of the loop,
and everything else happens around it.

00:40:59.880 --> 00:41:03.150
Image units are a plug-in architecture
that goes along with core image,

00:41:03.160 --> 00:41:08.820
which is similar analog to
core audio and audio units.

00:41:09.010 --> 00:41:14.340
And it's extensible image processing
modules that you can do and install on

00:41:14.340 --> 00:41:16.360
the system and be hosted by applications.

00:41:16.360 --> 00:41:19.360
In fact, the new version of
Motion that just shipped,

00:41:19.590 --> 00:41:21.560
Motion 2, will load image units.

00:41:21.570 --> 00:41:24.340
And again, there's a licensing program,
whether you want to be a host app

00:41:24.340 --> 00:41:28.660
or you want to write image units,
that you can go to license the logo.

00:41:30.570 --> 00:41:33.660
Image.io is another really
interesting technology that we

00:41:33.770 --> 00:41:35.200
put into Tiger-related imaging.

00:41:35.200 --> 00:41:39.790
We took together all the best
implementations we had for JPEG,

00:41:39.790 --> 00:41:42.560
TIFF, and some of the open-source
stuff that's out there,

00:41:42.560 --> 00:41:46.430
put a universal API over that,
and support a wide variety

00:41:46.430 --> 00:41:48.620
of formats with a single API.

00:41:48.620 --> 00:41:51.410
And it's platform-optimized code,
so it's AlteVec-tuned

00:41:51.410 --> 00:41:52.720
where it's important.

00:41:52.720 --> 00:41:56.070
It supports metadata,
so all the Spotlight importers that

00:41:56.070 --> 00:41:59.800
deal with still image formats come
through Image.io and get the metadata.

00:42:00.500 --> 00:42:03.890
It has incremental loading, in fact,
Safari is on top of Image.io for

00:42:03.890 --> 00:42:06.960
all of its image handling on Tiger.

00:42:06.960 --> 00:42:10.820
And there's a bunch of new data formats
that we wanted to support as well.

00:42:10.820 --> 00:42:13.570
Floating-point images,
both floating-point variants

00:42:13.570 --> 00:42:16.460
of TIFF and OpenEXR,
which is a floating-point format,

00:42:16.460 --> 00:42:18.230
and camera RAW formats.

00:42:18.300 --> 00:42:20.360
If you have high-end
digital camera today,

00:42:20.360 --> 00:42:23.830
there's a bunch of RAW formats
that Image.io will support as well.

00:42:23.840 --> 00:42:28.820
There's a bunch of sessions this year
talking about Image.io as part of

00:42:29.270 --> 00:42:32.180
the... example code that they're doing.

00:42:32.240 --> 00:42:34.320
But what I wanted to
point at was this one,

00:42:34.320 --> 00:42:36.640
Mac OS X Color Image Management Explained
,

00:42:36.810 --> 00:42:40.190
because they actually go through
quite a number of interesting cases

00:42:40.220 --> 00:42:44.090
with Image.io and color management,
so I wanted to point you at that.

00:42:44.560 --> 00:42:48.560
Next up on the core image side,
we have a bunch of tools as well.

00:42:48.640 --> 00:42:53.000
We've got Core Image Funhouse,
which we demoed last year at WWDC.

00:42:53.000 --> 00:42:54.520
You saw Phil make the electric zebra.

00:42:54.520 --> 00:42:57.780
The app's been cleaned up
and made ready for you.

00:42:57.780 --> 00:43:00.680
In fact, the source code is in Tiger.

00:43:01.390 --> 00:43:03.430
And you can explore the
built-in image units.

00:43:03.490 --> 00:43:07.150
You can write your own,
and Funhaus will load them so you can

00:43:07.150 --> 00:43:09.940
see your custom image unit in action.

00:43:09.980 --> 00:43:15.320
Quartz Composer is also a really
good tool for exploring Core Image.

00:43:15.320 --> 00:43:16.670
You can wire it up in real time.

00:43:16.760 --> 00:43:17.680
You can be playing video.

00:43:17.680 --> 00:43:19.300
I'll give you a demo of this in a second.

00:43:19.300 --> 00:43:23.130
It includes a real-time little
Core Image kernel language pane

00:43:23.130 --> 00:43:26.760
that you can type into and see
things change in real time.

00:43:26.850 --> 00:43:30.200
So to point to the imaging sessions,
we've got Core Image tomorrow.

00:43:30.200 --> 00:43:33.940
And then on Wednesday,
we've got Color Image Management and

00:43:33.940 --> 00:43:36.080
Essential Ingredients
for Mac OS X Imaging,

00:43:36.080 --> 00:43:41.610
which is about camera connectivity
and also some image I/O there as well.

00:43:42.990 --> 00:43:44.300
Finally, video.

00:43:44.470 --> 00:43:46.890
Core video, I'm not going to spend a
huge amount of time on it.

00:43:46.960 --> 00:43:48.480
Tim talked how it relates to QuickTime.

00:43:48.480 --> 00:43:51.430
It's an optimized architecture
for video on a texture,

00:43:51.440 --> 00:43:54.960
includes all the data flow and
synchronization primitives to make

00:43:54.980 --> 00:43:58.900
the GPU and the CPU have maximum
parallelism when presenting video.

00:43:58.900 --> 00:44:03.500
There's a facility to synchronize
your display presentation of

00:44:03.500 --> 00:44:07.120
video with display refresh,
and it forms the basis of the new

00:44:07.120 --> 00:44:11.000
QuickTime 7 display architecture,
but you don't need to use QuickTime to

00:44:11.020 --> 00:44:12.440
take advantage of core video.

00:44:12.440 --> 00:44:15.240
If you're just reading, say,
raw YUV data from a disk

00:44:15.240 --> 00:44:18.120
or something like that,
you can just use the buffering

00:44:18.120 --> 00:44:20.010
services and draw it yourself.

00:44:20.730 --> 00:44:22.600
So that's core video.

00:44:22.630 --> 00:44:25.180
And of course,
what would Peter Graffagnino talk

00:44:25.320 --> 00:44:27.680
be without a little GPU action?

00:44:27.680 --> 00:44:30.720
So I thought I'd talk a little
bit about the GPU this year.

00:44:30.720 --> 00:44:34.460
I mean, we've obviously put a lot of
technology on top of the GPU with

00:44:35.030 --> 00:44:38.460
improvements in OpenGL and core
image and all of that thing.

00:44:38.460 --> 00:44:41.060
But I wanted to kind of make a
slightly different point this year.

00:44:41.060 --> 00:44:44.130
And that's what I call cutting
edge versus trailing edge.

00:44:44.160 --> 00:44:46.500
The industry,
particularly in the area of graphics,

00:44:46.560 --> 00:44:47.770
is moving really quickly.

00:44:47.770 --> 00:44:49.280
And you've got to evolve or die.

00:44:49.280 --> 00:44:50.580
I mean, if you don't,
you're going to die.

00:44:50.630 --> 00:44:53.840
If you're still on Quick Draw,
let's face it, your application is going

00:44:54.010 --> 00:44:55.420
to slowly become obsolete.

00:44:55.420 --> 00:44:59.360
And people aren't going to use it because
you're not keeping up with the times.

00:44:59.360 --> 00:45:01.990
But cutting edges are sharp.

00:45:01.990 --> 00:45:08.000
And you've got to be careful when
you're running with sharp objects.

00:45:08.050 --> 00:45:08.850
So there's some examples.

00:45:08.850 --> 00:45:11.080
Last year,
we talked about Quartz 2D Extreme.

00:45:11.080 --> 00:45:13.830
Quartz 2D Extreme, the final version,
is not in Tiger.

00:45:13.830 --> 00:45:17.160
We learned a bunch of stuff
about the Quartz 2D API.

00:45:17.160 --> 00:45:20.580
First off, we learned many applications
are not rendering bound.

00:45:20.600 --> 00:45:25.320
And when they are rendering bound and
they're using the Quartz 2D API well,

00:45:25.320 --> 00:45:30.080
we actually saw major performance
gains with Quartz 2D on top of OpenGL.

00:45:30.080 --> 00:45:32.520
But for people who weren't
using the API well,

00:45:32.520 --> 00:45:36.000
we actually saw some deficit
when they would run accelerated.

00:45:36.020 --> 00:45:39.550
And so in the final analysis,
with the extra resources required,

00:45:39.550 --> 00:45:42.370
it just wasn't worth doing
Quartz 2D Extreme until we

00:45:42.450 --> 00:45:45.580
get everyone using the 2D API,
hang on to their image refs

00:45:45.580 --> 00:45:47.480
so textures aren't uploaded.

00:45:47.480 --> 00:45:50.360
So definitely go to that
2D optimization session.

00:45:50.610 --> 00:45:55.280
And learn a bunch of stuff about
how to use Quartz 2D efficiently.

00:45:55.300 --> 00:45:59.260
The other thing to be careful of
when dealing with GPU programming

00:45:59.300 --> 00:46:01.470
is subtle differences between GPU.

00:46:01.480 --> 00:46:04.870
For example, you saw Ted talk about
division by zero on CPUs.

00:46:04.950 --> 00:46:07.020
Well, the same is true on GPUs, actually.

00:46:07.180 --> 00:46:10.310
If you divide by zero on an ATI card,
you get a different answer than if

00:46:10.410 --> 00:46:12.440
you divide by zero on an NVIDIA card.

00:46:12.440 --> 00:46:16.760
And you just have to deal with these
things in order to make progress.

00:46:16.810 --> 00:46:19.780
But my big message is, you know,
it's much better to be dealing with

00:46:19.870 --> 00:46:23.060
these little nicks and bruises than
being on the cutting edge than it is,

00:46:23.080 --> 00:46:24.480
you know, taking the conservative route.

00:46:24.550 --> 00:46:27.650
Because if your competitor is
out there on the cutting edge,

00:46:27.660 --> 00:46:30.010
you know, he's going to blaze the
trail in front of you,

00:46:30.010 --> 00:46:33.200
and you want to be the
one out there in the lead.

00:46:34.800 --> 00:46:38.010
So that's it for all of the
core technology that we have

00:46:38.230 --> 00:46:40.560
in the operating system,
all industrial strength

00:46:41.100 --> 00:46:42.790
across the spectrum here.

00:46:43.070 --> 00:46:45.030
I have one more technology
I want to talk about,

00:46:45.030 --> 00:46:46.950
which doesn't really fit
into any of those categories,

00:46:47.050 --> 00:46:50.450
because it's kind of an integration
technology across the whole

00:46:50.560 --> 00:46:52.640
suite of things in Mac OS X.

00:46:52.780 --> 00:46:54.700
It's called Quartz Composer.

00:46:54.800 --> 00:46:57.590
Quartz Composer is a framework
for real-time motion graphics,

00:46:57.590 --> 00:47:00.260
animations, and visualizations.

00:47:00.360 --> 00:47:04.710
The composition files that it
creates just can play back in

00:47:04.760 --> 00:47:06.980
Tiger with a very simple runtime API.

00:47:07.000 --> 00:47:09.920
They can actually play back
in QuickTime under Tiger.

00:47:09.920 --> 00:47:12.300
With the developer tools,
there's a graphical editor that

00:47:12.300 --> 00:47:14.770
you can edit these compositions,
and there's a really

00:47:14.840 --> 00:47:18.000
simple-to-use API for including
them in your applications.

00:47:18.050 --> 00:47:20.690
Some people make the analogy that
it's kind of like Interface Builder,

00:47:20.700 --> 00:47:24.300
but for a little parameterized
motion graphics things.

00:47:24.390 --> 00:47:26.060
So rather than try and
explain it some more,

00:47:26.060 --> 00:47:29.740
let me go to the demo machine
and show you a few things.

00:47:30.700 --> 00:47:34.620
Probably the most visible thing you
may have seen with Quartz Composer

00:47:34.720 --> 00:47:41.570
is the screensaver in Mac OS X Tiger.

00:47:42.460 --> 00:47:46.080
Let me bring it up here,
which is the RSS Visualizer.

00:47:46.150 --> 00:47:47.730
So this is actually a
parameterized screensaver.

00:47:47.740 --> 00:47:50.720
This is not rendered-- it's not
a QuickTime movie or anything.

00:47:50.720 --> 00:47:53.480
It's actually reading the RSS feed,
putting things on textures.

00:47:53.520 --> 00:47:57.440
There's a big sphere of cloudy
stuff that's rotating around.

00:47:57.440 --> 00:47:59.520
And all that's just
dynamically calculated.

00:47:59.550 --> 00:48:01.520
And in fact, to prove that to you,
what I can do is,

00:48:01.520 --> 00:48:05.520
if I option click on the Options tab,
it actually brings up the composition.

00:48:05.520 --> 00:48:08.600
And so if you want to go mess
with this on your system,

00:48:08.600 --> 00:48:13.070
you can actually look at the hidden
parameters for the screensaver

00:48:13.120 --> 00:48:16.440
and figure out what's going on.

00:48:16.920 --> 00:48:19.640
Let's see,
another thing I wanted to show while

00:48:19.640 --> 00:48:24.680
I'm here is some of the core image
integration with Quartz Composer.

00:48:24.810 --> 00:48:28.820
So let me open up this composition here.

00:48:28.850 --> 00:48:31.080
And you can see the data flow down here.

00:48:31.230 --> 00:48:33.860
What's going on is I'm taking a movie,
and right now I'm just playing

00:48:33.860 --> 00:48:36.760
it on a billboard texture.

00:48:36.890 --> 00:48:39.930
This came from a guy on the internet
who post-- after Tiger shipped,

00:48:40.000 --> 00:48:42.780
he went crazy and he did a
bunch of video processing stuff,

00:48:42.780 --> 00:48:44.560
which I thought was pretty cool.

00:48:44.580 --> 00:48:46.100
Sam Cass.

00:48:46.100 --> 00:48:48.900
So I'm going to disconnect the
image from the text and put

00:48:48.900 --> 00:48:50.640
it through this mixer here.

00:48:50.730 --> 00:48:54.220
So I'm going to mix the original with
the video as it's processed through this

00:48:54.220 --> 00:48:56.320
set of filters and put it back on there.

00:48:56.360 --> 00:48:59.490
And what he's done is he's added
this sort of highlight glow effect,

00:48:59.490 --> 00:49:01.080
which I think is pretty wild.

00:49:01.090 --> 00:49:04.070
And you can actually go into
the inspector here and look

00:49:04.270 --> 00:49:06.070
at some of the custom kernels.

00:49:06.190 --> 00:49:10.250
This is actually the code
that he wrote to process it.

00:49:10.350 --> 00:49:11.250
Some of these are built in.

00:49:11.340 --> 00:49:12.860
Some of these are custom one.

00:49:12.880 --> 00:49:14.180
And I can actually just go here.

00:49:14.180 --> 00:49:15.270
It's evaluating this in real time.

00:49:15.370 --> 00:49:24.480
I can say, OK, let's take the red and
multiply it 2.0 times R.

00:49:24.710 --> 00:49:26.640
So there it is with a little extra red.

00:49:26.640 --> 00:49:30.420
I could do, say, five times the red,
or six times the red,

00:49:30.420 --> 00:49:32.160
or 10 times the red.

00:49:32.180 --> 00:49:34.480
But if you're coming
up with an algorithm,

00:49:34.480 --> 00:49:37.310
you can just have stuff playing
and just sit there typing with it.

00:49:37.420 --> 00:49:42.060
So it's a great environment for
just kind of taming the GPU.

00:49:42.150 --> 00:49:44.520
So let me quit that.

00:49:44.550 --> 00:49:47.860
And another thing we noticed,
there's another guy who's

00:49:47.860 --> 00:49:50.620
been messing around with
Quartz Composer over in Japan,

00:49:50.620 --> 00:49:52.880
and he's done some amazing stuff.

00:49:52.900 --> 00:49:55.120
Let me double click on that.

00:49:56.000 --> 00:49:57.900
These were up on his blog,
and so we decided, well,

00:49:57.900 --> 00:50:00.320
let's just load them all,
and let's just go into expose

00:50:00.320 --> 00:50:04.920
and show you some of the
really cool things he's done.

00:50:10.020 --> 00:50:12.240
One one in particular I like is this one.

00:50:12.240 --> 00:50:16.240
I mean, it's getting decent frame rate.

00:50:16.240 --> 00:50:18.240
Of course, there's like eight other
compositions going,

00:50:18.240 --> 00:50:20.960
but that's kind of pretty.

00:50:20.960 --> 00:50:22.340
I mean, you should check out his stuff.

00:50:22.450 --> 00:50:29.630
Some of it's a little arty and probably
wouldn't take a while to absorb,

00:50:29.630 --> 00:50:33.480
but it's a really great
site if you caught that URL,

00:50:33.480 --> 00:50:33.480
if you didn't see me,
and I will point you at it.

00:50:35.110 --> 00:50:38.770
Let's see, so that's it for the
Quartz Composer demo.

00:50:38.840 --> 00:50:41.170
If I can go back to slides.

00:50:42.430 --> 00:50:44.820
So now we do have one more demo for you.

00:50:44.820 --> 00:50:49.090
So this is juggling the most
technology at once we could think of.

00:50:49.220 --> 00:50:52.360
And so what we're going to do
is try to demonstrate all of the

00:50:52.430 --> 00:50:56.940
technologies working together in Tiger,
both audio and visual.

00:50:56.940 --> 00:50:59.910
And so the concept here is we're
going to use Quartz Composer with

00:50:59.910 --> 00:51:05.540
parameterized compositions to
augment a live DJ performance.

00:51:05.550 --> 00:51:07.240
And so these visuals are not rendered.

00:51:07.260 --> 00:51:10.060
We do use a QuickTime movie
in there of some dancers,

00:51:10.070 --> 00:51:15.400
but it's all real-time animation
that's responding to the performance.

00:51:15.420 --> 00:51:18.990
And I think this is going to enable
some new possibilities and sort of

00:51:19.030 --> 00:51:21.120
real-time creation on the platform.

00:51:21.120 --> 00:51:24.240
So with that,
let me invite up Ean Golden.

00:51:24.260 --> 00:51:28.100
Ean is a local DJ and producer,
and he's going to show us

00:51:28.100 --> 00:51:29.470
what he's been able to do.

00:51:29.620 --> 00:51:29.940
Hey, Ean.

00:51:30.300 --> 00:51:30.680
Hey, Peter.

00:51:30.690 --> 00:51:32.790
Thank you.

00:51:36.190 --> 00:51:40.510
Hey guys, I'm really excited to be here,
and most excited about what

00:51:40.510 --> 00:51:42.960
you're going to create over the
next year for me to play with.

00:51:43.240 --> 00:51:45.690
Because I am the end user,
you guys are the creators,

00:51:45.700 --> 00:51:47.530
and I'm really,
really stoked about all the

00:51:47.640 --> 00:51:51.040
technology that he just talked about,
and what you can do with it,

00:51:51.130 --> 00:51:52.420
and then what I can do with it live.

00:51:52.440 --> 00:51:54.940
I've been a professional
DJ for eight years,

00:51:54.940 --> 00:51:57.620
and about two years ago
I made a major change.

00:51:57.620 --> 00:51:59.700
I started DJing completely digitally.

00:51:59.700 --> 00:52:02.180
I got rid of the records,
I got rid of the turntables,

00:52:02.220 --> 00:52:06.100
and I started using my PowerBook,
a sound card, my headphones,

00:52:06.100 --> 00:52:08.450
and a program called Traktor
from Native Instruments,

00:52:08.720 --> 00:52:11.420
which I want to show
you a little bit about.

00:52:13.120 --> 00:52:17.400
So, Traktor is basically
emulating your standard decks,

00:52:17.400 --> 00:52:17.870
if you will.

00:52:17.880 --> 00:52:21.760
On one side you've got one
piece of music playing.

00:52:23.900 --> 00:52:25.080
And on the other side,
you've got a second

00:52:25.080 --> 00:52:25.990
piece of music playing.

00:52:26.000 --> 00:52:31.300
And it all comes together in
the center in an internal mixer.

00:52:31.300 --> 00:52:32.180
Traktor's really cool.

00:52:32.180 --> 00:52:33.350
It's got some extra features.

00:52:33.380 --> 00:52:36.390
It's got really interesting looping
functions and filters and all

00:52:36.450 --> 00:52:41.560
kinds of great stuff that I can
manipulate the songs live with.

00:52:41.740 --> 00:52:47.180
And the one major obstacle that Traktor,
even though it created all

00:52:47.180 --> 00:52:51.000
this opportunity for creative
potential-- I could take songs,

00:52:51.020 --> 00:52:53.460
I could remix them on the fly,
I could do whatever I wanted--

00:52:53.550 --> 00:52:56.890
the major obstacle it came up
against was something I very

00:52:57.220 --> 00:53:01.680
fondly refer to as the geek effect,
which is I was using a laptop.

00:53:01.830 --> 00:53:04.660
And when you stick a performer
on a stage with a laptop,

00:53:04.790 --> 00:53:07.560
oftentimes people don't feel
like you're actually performing.

00:53:07.650 --> 00:53:12.140
They feel like you're up there checking
your email or surfing the internet.

00:53:12.140 --> 00:53:14.600
And for all they know,
you could be playing a podcast off

00:53:14.700 --> 00:53:16.550
of iTunes and not be doing anything.

00:53:16.670 --> 00:53:21.780
So the major battle was, OK,
now how do I show people this dynamic,

00:53:21.780 --> 00:53:25.980
incredible, performance that we're able
to do with this technology?

00:53:25.980 --> 00:53:28.180
And the answer was by
integrating visuals,

00:53:28.250 --> 00:53:32.280
by, through digital means,
showing on the screen what

00:53:32.280 --> 00:53:33.760
I was doing on the computer.

00:53:34.000 --> 00:53:38.000
And I was able to do this,
but it was through very tedious means.

00:53:38.030 --> 00:53:42.320
Basically, we had a second laptop
running a great program,

00:53:42.320 --> 00:53:44.880
a standard VJ program called VDMX.

00:53:44.890 --> 00:53:47.460
And we used standard video clips.

00:53:47.460 --> 00:53:50.720
And we applied different kinds of
effects to the video to reflect

00:53:50.830 --> 00:53:52.630
in real time what I was doing.

00:53:52.780 --> 00:53:55.820
But I came up against
two really big obstacles.

00:53:55.820 --> 00:53:57.540
The first was processor power.

00:53:57.540 --> 00:54:02.070
Anybody who works with video knows
the more effects you apply to video,

00:54:02.180 --> 00:54:05.130
as they start adding up,
your processor hits the floor.

00:54:05.280 --> 00:54:06.540
It just goes through the floor.

00:54:06.540 --> 00:54:07.880
You can't do all that much.

00:54:07.880 --> 00:54:09.240
The other problem was creative.

00:54:09.240 --> 00:54:10.750
I found a creative ceiling.

00:54:10.760 --> 00:54:12.480
I had all these ideas I wanted to do.

00:54:12.480 --> 00:54:15.070
When I turn a filter,
I want the whole thing to spin around.

00:54:15.080 --> 00:54:17.290
And I want the screen to explode.

00:54:17.380 --> 00:54:21.510
And there's only so much you can
do with video and effects before,

00:54:21.510 --> 00:54:24.100
again, the processor hits the floor.

00:54:24.100 --> 00:54:26.220
After doing a couple of
shows with this technology,

00:54:26.220 --> 00:54:27.890
I was introduced to Quartz Composer.

00:54:27.980 --> 00:54:31.210
And it became very apparent right
off the bat this was the answer

00:54:31.210 --> 00:54:32.720
that I had been looking for.

00:54:32.730 --> 00:54:36.110
Quartz Composer solved
both of these problems,

00:54:36.120 --> 00:54:40.210
number one,
because it's not leveraging only the CPU,

00:54:40.210 --> 00:54:41.400
but the GPU.

00:54:41.450 --> 00:54:45.650
And not only is it freeing
up the CPU by using the GPU,

00:54:45.680 --> 00:54:48.240
but now I was able to run
it all on the same machine.

00:54:48.270 --> 00:54:50.000
I could run Tractor on the GPU.

00:54:50.000 --> 00:54:52.090
I could run Quartz Composer on the CPU.

00:54:52.100 --> 00:54:54.060
Quartz on the GPU.

00:54:54.110 --> 00:54:58.240
And have both of these programs running
the same environment dynamically.

00:54:58.250 --> 00:55:01.280
And the second major thing,
the thing that really excited me,

00:55:01.280 --> 00:55:06.400
was Quartz Composer was
not affecting video.

00:55:06.400 --> 00:55:09.160
It was creating content on the fly.

00:55:09.170 --> 00:55:13.090
It was essentially generating
the same kind of material that

00:55:13.090 --> 00:55:16.630
I was generating in the stage,
which gave me unlimited creative

00:55:16.730 --> 00:55:18.260
potential for what I wanted to do.

00:55:18.260 --> 00:55:21.450
I mean, really,
the sky is the limit on that.

00:55:21.800 --> 00:55:24.600
I could do anything, basically.

00:55:24.600 --> 00:55:27.870
However, it was really just a limitation
of what I wanted to do.

00:55:28.080 --> 00:55:31.910
So I started working with the
team at Apple to find an effective

00:55:31.910 --> 00:55:34.620
integration of these two technologies.

00:55:34.650 --> 00:55:39.160
And what we did for this particular
demo is we've connected one piece

00:55:39.240 --> 00:55:44.440
of music in Tractor-- you see,
it's on the left side-- to one aspect,

00:55:44.440 --> 00:55:46.000
or one layer, of this Quartz composition.

00:55:46.000 --> 00:55:49.260
Let's see.

00:55:49.260 --> 00:55:50.750
I'll show that to you here real quick.

00:55:55.180 --> 00:55:59.470
So we've got a piece of video,
or one aspect of the court's composition,

00:55:59.580 --> 00:56:01.560
connected to one piece
of audio on one side,

00:56:01.570 --> 00:56:04.350
and we've got another aspect of the
court's composition connected to a

00:56:04.360 --> 00:56:06.910
second piece of audio on the second side.

00:56:08.100 --> 00:56:10.370
And then we've also connected
all the different looping and

00:56:10.530 --> 00:56:13.660
filters and effects to different
parameters of these compositions.

00:56:13.730 --> 00:56:17.950
So as I start to mix these two
pieces of audio together live,

00:56:17.950 --> 00:56:20.560
and as that mix evolves,
the video mix will also

00:56:20.560 --> 00:56:23.450
evolve in real time,
sort of reflecting what I'm

00:56:23.490 --> 00:56:26.590
doing and creating a compelling
example of the performance

00:56:26.710 --> 00:56:28.800
that's going on on the screen.

00:56:28.890 --> 00:56:31.080
So without much further ado,
I'm going to do a short little

00:56:31.090 --> 00:56:35.830
demonstration of what that might
look like in the real world.

00:56:46.900 --> 00:56:48.560
You know what would be good?

00:56:48.570 --> 00:56:52.140
If I stuck Quark's composer
up on the screen first.

00:58:22.190 --> 00:58:24.940
Explain that a little bit for you,
what was going on.

00:58:24.940 --> 00:58:27.870
Maybe it was apparent, maybe it wasn't,
but I'll do it pretty quick.

00:58:27.990 --> 00:58:30.660
So Ean had a device called
Trigger Finger from M-Audio,

00:58:30.660 --> 00:58:35.100
which is just a pad that sends a
bunch of MIDI signals into Traktor

00:58:35.200 --> 00:58:39.540
DJ Studio through Core MIDI and
then playing out the audio.

00:58:39.540 --> 00:58:41.900
So that's just his basic setup,
that's what he performs with.

00:58:42.010 --> 00:58:44.540
And so what we did is we
added Quartz Composer,

00:58:44.540 --> 00:58:48.630
we took the MIDI signals out of Traktor
and out of the controller itself,

00:58:48.630 --> 00:58:52.080
and we built some compositions
which used video and audio.

00:58:52.100 --> 00:58:56.630
And so what we did is we
added Quartz Composer,

00:58:56.640 --> 00:59:03.750
we took the MIDI signals out of Traktor
and out of the controller itself,

00:59:03.760 --> 00:59:09.900
and we built some compositions
which used video and audio.

00:59:10.100 --> 00:59:13.470
So finally,
I'm going to bring Tim back up on stage,

00:59:13.480 --> 00:59:15.420
and he's going to wrap us up.

00:59:15.450 --> 00:59:16.100
Thanks a lot, everybody.

00:59:20.000 --> 00:59:22.000
Thanks.

00:59:22.050 --> 00:59:27.000
Okay, so we've given you a quick
tour of some of the coolest

00:59:27.140 --> 00:59:29.000
technologies in Mac OS X Tiger.

00:59:29.000 --> 00:59:31.120
We think there's a lot of
exciting stuff going on here,

00:59:31.120 --> 00:59:34.490
and we're really looking forward to
talking with you this week and hearing

00:59:34.490 --> 00:59:36.000
about your experience with this.

00:59:36.110 --> 00:59:38.130
Of course,
we've only been able to scratch the

00:59:38.210 --> 00:59:42.000
surface of all of the new features that
our teams have built into the system.

00:59:42.000 --> 00:59:45.460
There's literally hundreds of
new features in the system for

00:59:45.460 --> 00:59:49.000
you to play around with and
utilize in your applications.

00:59:49.000 --> 00:59:53.000
Now, we've got lots and lots of
engineers here all week long,

00:59:53.000 --> 00:59:56.000
and I hope you'll have a
chance to talk with them.

00:59:56.000 --> 00:59:58.370
I hope you'll not be shy,
come up and talk with me or

00:59:58.370 --> 00:59:59.950
Peter about what you're up to.

01:00:00.070 --> 01:00:01.860
We really would love to hear this.

01:00:02.000 --> 01:00:05.820
We've got two feedback forums
on the afternoon of Friday.

01:00:06.000 --> 01:00:08.990
Come and tell us if you haven't had a
chance to talk to us during the week.

01:00:09.040 --> 01:00:12.000
Come and talk to us at the end of the
week and tell us what you're thinking.

01:00:12.000 --> 01:00:16.000
You know, there's one topic I haven't
talked about today,

01:00:16.000 --> 01:00:18.000
and I thought I probably should
mention something about it.

01:00:18.010 --> 01:00:21.930
And this was this little
detail of transitions.

01:00:22.000 --> 01:00:25.820
If things work the way
I want them to work,

01:00:25.820 --> 01:00:30.770
you really aren't going to have to worry
about these kinds of issues in terms

01:00:30.770 --> 01:00:32.980
of the graphics and media technologies.

01:00:33.000 --> 01:00:38.380
The way that I've spelled out our goals
for Mac OS X in the area of graphics and

01:00:38.470 --> 01:00:42.600
media is that it's our job to provide you
the right kinds of APIs so that we can

01:00:42.600 --> 01:00:44.990
insulate you from these kinds of changes.

01:00:45.000 --> 01:00:47.000
We've done a lot of the work already.

01:00:47.000 --> 01:00:50.020
And by the time we get
together next year,

01:00:50.120 --> 01:00:53.000
we'll have done the rest of the work.

01:00:53.000 --> 01:00:56.240
And, you know, my expectation is it's
going to go really well,

01:00:56.240 --> 01:00:57.910
and we're very excited about it.

01:00:58.040 --> 01:01:00.440
If you write to the APIs,
you'll derive all the

01:01:00.440 --> 01:01:04.000
benefits of our hard work,
and we hope you'll take us up on that.

01:01:04.000 --> 01:01:06.980
Anyway,
that's graphics and media in Tiger.

01:01:07.020 --> 01:01:08.960
Thank you very much for coming.

01:01:09.000 --> 01:01:11.000
Have a great week.