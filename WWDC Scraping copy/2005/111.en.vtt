WEBVTT

00:00:00.420 --> 00:00:05.610
Welcome to session 111,
HITextView Unleashed on Tiger.

00:00:07.980 --> 00:00:11.860
This is a hands-on session,
so if you haven't done so already,

00:00:11.870 --> 00:00:19.800
go ahead and download the code at
the HITextView session WWDC site.

00:00:20.800 --> 00:00:22.680
My name is Daniel Fenwick.

00:00:22.680 --> 00:00:25.700
I'm an engineering manager
in charge of Atsui,

00:00:25.700 --> 00:00:31.260
MLTE, text encoding and text
encoding converter,

00:00:31.340 --> 00:00:33.810
and Unicode utilities.

00:00:34.700 --> 00:00:38.240
So who are we trying to address this to?

00:00:38.240 --> 00:00:43.470
We want to help Carbon developers
design and create edible,

00:00:43.530 --> 00:00:49.040
edible scrollable text
fields in their applications.

00:00:49.040 --> 00:00:55.940
And also we want to address MLTE clients
who want more ease of use in their

00:00:55.940 --> 00:01:00.320
applications for their text encoding.

00:01:01.070 --> 00:01:04.970
And developers also interested in
MLTE features that are new in Tiger,

00:01:05.040 --> 00:01:08.350
a few of those will be raised also.

00:01:09.910 --> 00:01:15.360
What we hope you'll learn is how
simple it is to instantiate an

00:01:15.360 --> 00:01:18.090
HITextView in your application.

00:01:18.180 --> 00:01:23.270
This can be done either programmatically
or through Interface Builder.

00:01:24.660 --> 00:01:29.820
And embedding HITextView into
other views is really useful.

00:01:29.820 --> 00:01:34.660
Some of the benefits of that
are that you get compositing,

00:01:34.660 --> 00:01:41.430
scrolling, resizing, and lastly,
or not lastly, enabling UI features such

00:01:41.430 --> 00:01:46.400
as font and spelling panel
support and font substitution.

00:01:46.400 --> 00:01:48.720
Really quick and easy.

00:01:49.250 --> 00:01:52.190
And lastly,
getting data into and out of an

00:01:52.190 --> 00:01:56.810
HITextView is also going to be covered.

00:01:56.810 --> 00:01:59.240
And these are some of the
new features in Tiger.

00:02:01.490 --> 00:02:05.640
So let's take a look at the
framework hierarchy as it stands now.

00:02:05.690 --> 00:02:09.200
At the lowest level is ATSUI,
which I just mentioned,

00:02:09.200 --> 00:02:11.480
and many of you are
already familiar with that.

00:02:11.750 --> 00:02:17.590
It gives you the ultimate power
over your glyphs and placement.

00:02:17.760 --> 00:02:22.220
Above that is MLTE,
which calls ATSUI to do its layout.

00:02:22.310 --> 00:02:28.770
Higher level, and then higher still is
HITextView using MLTE.

00:02:29.460 --> 00:02:32.070
So MLTE and above is all Carbon.

00:02:32.170 --> 00:02:35.540
Below, in Atsui, is application services.

00:02:35.540 --> 00:02:40.340
And once again, HITextView provides the
highest level of abstraction.

00:02:40.400 --> 00:02:45.420
So objects at lower levels, though,
can be accessed for greater control.

00:02:46.190 --> 00:02:50.690
Though some MLTE APIs are
disabled when using HITextView,

00:02:50.700 --> 00:02:53.040
it's a higher level,
you don't get quite the control.

00:02:55.730 --> 00:02:58.910
Let's compare HITextView versus MLTE.

00:02:59.050 --> 00:03:02.040
Some of the advantages of
using HITextView are better

00:03:02.040 --> 00:03:04.620
interface builder integration,

00:03:06.390 --> 00:03:12.590
The ordering and compositing
with HIViews is available,

00:03:12.590 --> 00:03:17.050
which includes scrolling and resizing,
transparency.

00:03:17.440 --> 00:03:24.680
More automatic event handling,
such as menu updating and the font

00:03:24.730 --> 00:03:25.120
panel I mentioned in an earlier slide.

00:03:25.130 --> 00:03:25.530
Focus.

00:03:25.530 --> 00:03:28.410
And that all equates
to less code to write.

00:03:28.460 --> 00:03:34.140
Disadvantages again are some
MLTE features are disabled.

00:03:38.770 --> 00:03:40.140
So let's do some coding.

00:03:40.140 --> 00:03:42.480
We're not ready for a demo just yet.

00:03:42.730 --> 00:03:46.180
Let's go over what we can demo.

00:03:47.210 --> 00:03:54.580
So getting started with the HITextViews,
you need to call HITEXTView create.

00:03:54.920 --> 00:03:55.940
And that's a single call.

00:03:55.940 --> 00:04:00.620
MLTE-specific options can
be passed in at that time.

00:04:00.910 --> 00:04:02.400
And let's take a look.

00:04:02.400 --> 00:04:08.190
You declare your HIV ref, your bounds,
and your TXN frame options.

00:04:08.200 --> 00:04:12.050
And incidentally, when I mention TXN,
that's just the preface

00:04:12.050 --> 00:04:13.400
for the MLTE calls.

00:04:13.400 --> 00:04:15.540
So there's no confusion.

00:04:15.540 --> 00:04:20.310
The HITextView create, then,
is a preface for the MLTE calls.

00:04:20.720 --> 00:04:21.540
Excuse me.

00:04:21.540 --> 00:04:23.420
Where the first option is the bounds.

00:04:23.450 --> 00:04:25.880
You can set that however you want.

00:04:27.900 --> 00:04:32.100
The second parameter is
HITextView specific options.

00:04:32.100 --> 00:04:36.920
Right at this time, it's not used,
so set that to zero.

00:04:37.190 --> 00:04:40.730
The third parameter are
the MLTE-specific options,

00:04:40.730 --> 00:04:43.840
which we'll get into later,
but one in particular is the

00:04:43.840 --> 00:04:45.690
Do Font Substitution mask.

00:04:45.690 --> 00:04:51.620
That'll allow your text editor to
use font substitution automatically.

00:04:51.660 --> 00:04:57.700
And this is really useful,
highly advised for you to...

00:04:58.000 --> 00:05:09.000
[Transcript missing]

00:05:11.970 --> 00:05:15.900
All this can be created
in Interface Builder also.

00:05:15.900 --> 00:05:25.440
So, you can basically just click on the
text view icon here in your controls

00:05:25.440 --> 00:05:30.460
panel in Interface Builder and drag
it over and size it the way you want.

00:05:30.490 --> 00:05:32.570
It's that easy.

00:05:33.410 --> 00:05:36.160
Adding resize support is just as easy.

00:05:36.170 --> 00:05:38.470
Let's take a look.

00:05:38.720 --> 00:05:39.700
You have binding.

00:05:39.700 --> 00:05:43.610
In this case, I'm giving an example
of just binding left,

00:05:43.610 --> 00:05:46.490
but you'd want to do
this for all the sides,

00:05:46.490 --> 00:05:53.200
depending if you want a full bound
HITextView to a resize window.

00:05:53.340 --> 00:05:56.690
So you declare your layout info.

00:05:57.400 --> 00:06:00.550
If my clicker works.

00:06:00.570 --> 00:06:05.010
You tell it what kind you want,
in this case, again, is bind left.

00:06:05.150 --> 00:06:09.800
ToView equals null indicates
that you want to bind to the

00:06:09.820 --> 00:06:12.520
parent view just as default.

00:06:14.010 --> 00:06:17.650
And at this time, the offset is unused,
so it's a float.

00:06:17.660 --> 00:06:19.820
Set that to zero.

00:06:21.400 --> 00:06:27.090
And you set the HIView set layout
info and you're in business.

00:06:29.640 --> 00:06:33.500
You can also do this in Interface
Builder using the View Inspector.

00:06:33.500 --> 00:06:39.500
Go down to Layout and set
all the sides of your view.

00:06:39.620 --> 00:06:44.600
Here's the top view and we're
just setting that binding.

00:06:47.970 --> 00:06:53.630
So my demo engineer is stuck in traffic,
no surprise.

00:06:53.870 --> 00:06:58.360
So I'm going to have-- oh, he's here.

00:06:58.460 --> 00:06:59.870
This is Aaron Haney.

00:06:59.900 --> 00:07:02.380
He's our text engineer,
and he's going to demo

00:07:02.380 --> 00:07:03.920
what I just went over.

00:07:04.050 --> 00:07:07.130
Aaron, glad to see you.

00:07:07.880 --> 00:07:08.730
Glad to be here.

00:07:08.810 --> 00:07:10.810
Can everybody hear me OK?

00:07:14.220 --> 00:07:18.700
So if you look at the sample
code disk image that you can

00:07:18.700 --> 00:07:22.170
get on the attendee website,
inside that there's a

00:07:22.170 --> 00:07:23.600
folder for this session.

00:07:23.620 --> 00:07:26.230
It's numbered 111-HITEXTVIEW.

00:07:26.280 --> 00:07:30.000
Inside that there's a disk image,
and you can see the contents.

00:07:30.200 --> 00:08:20.300
[Transcript missing]

00:08:21.800 --> 00:08:27.390
So what we're going to do is instantiate
the HITextView with Interface Builder.

00:08:27.430 --> 00:08:29.610
However, as Dan mentioned,
you can also do it through code.

00:08:29.610 --> 00:08:33.560
And if you take a look inside
the Getting Started folder,

00:08:33.560 --> 00:08:37.810
there's a file called extras.c that
demonstrates how to do it through code.

00:08:38.020 --> 00:08:41.360
So in cases where there's more
than one way to do something,

00:08:41.360 --> 00:08:44.650
I've put the extras file in
place to show you the other way,

00:08:44.650 --> 00:08:47.220
the way that I'm not
going to do on stage.

00:08:47.220 --> 00:08:52.600
So on stage, we're going to do this
through Interface Builder.

00:08:52.600 --> 00:08:55.520
When we edit the nib,
we'll see that it looks exactly

00:08:55.580 --> 00:08:59.720
like what you get when you create a
blank Carbon application in Xcode.

00:08:59.720 --> 00:09:02.780
And as Dan mentioned,
to create an HITextView in

00:09:02.780 --> 00:09:06.050
Interface Builder,
all you have to do is select the

00:09:06.050 --> 00:09:08.000
text controls portion of the palette.

00:09:08.000 --> 00:09:10.500
Hover over the text view right here.

00:09:10.590 --> 00:09:14.580
It says just text view,
but it's actually an HITextView.

00:09:14.580 --> 00:09:17.280
So we just click and drag that over.

00:09:17.800 --> 00:09:22.270
And I'm going to actually resize
it to take up the entire window.

00:09:22.290 --> 00:09:23.480
You can see the Snap 2 guys.

00:09:23.480 --> 00:09:26.060
They're actually kind of hard to
see when they get towards the edge,

00:09:26.060 --> 00:09:30.020
but I actually am snapping it
to the very edge of the window.

00:09:31.260 --> 00:09:33.500
All right, now once we get it resized
to cover the entire window,

00:09:33.580 --> 00:09:37.590
it's very hard to see,
but if you go to the NIV view right here,

00:09:38.170 --> 00:09:41.220
And select outline view.

00:09:41.220 --> 00:09:43.390
Then you can clearly see that
we have a window and inside

00:09:43.400 --> 00:09:47.070
that there's the root view,
which is always present.

00:09:47.150 --> 00:09:50.000
And inside that there's the text view.

00:09:50.160 --> 00:09:54.000
Now we're just going to set a few
options Interface Builder gives you

00:09:54.200 --> 00:09:58.460
access to MLTE options at creation time.

00:09:58.530 --> 00:10:01.340
So let's always deal with Unicode text.

00:10:01.350 --> 00:10:02.980
We'll check that one.

00:10:03.070 --> 00:10:05.970
We want line wrapping on.

00:10:07.300 --> 00:10:10.230
And as Dan emphasized,
font substitution is very important,

00:10:10.260 --> 00:10:12.670
so we want to use that too.

00:10:13.360 --> 00:10:17.320
And we'd also like this text
view to resize along with

00:10:17.320 --> 00:10:18.990
the window automatically.

00:10:19.070 --> 00:10:24.740
And that can be done in the
layout portion of the inspector.

00:10:24.830 --> 00:10:27.440
For any HIView, this is valid.

00:10:28.740 --> 00:10:32.090
So I'm just going to go through
on every side and bind to the

00:10:32.090 --> 00:10:35.590
corresponding side of the parent view.

00:10:35.590 --> 00:10:38.100
And then we should get
automatic resizing.

00:10:40.300 --> 00:10:41.680
So let's build and run our project.

00:10:41.680 --> 00:10:44.400
And it's going to ask me
for save confirmation.

00:10:44.420 --> 00:10:49.240
Now that we have it,
you notice I can click inside the window,

00:10:49.240 --> 00:10:52.130
and we get our blinking cursor,
and I can type.

00:10:56.620 --> 00:11:00.850
If I select something,
the items in the edit menu

00:11:01.180 --> 00:11:02.380
are updated automatically.

00:11:02.520 --> 00:11:05.300
So I can cut, copy, paste.

00:11:05.480 --> 00:11:06.600
So let's select everything.

00:11:06.600 --> 00:11:08.720
We want to get a large amount
of text in here so we can see

00:11:08.720 --> 00:11:11.250
what view wrapping looks like.

00:11:11.400 --> 00:11:13.660
Let's do a little exponential, sorry.

00:11:13.840 --> 00:11:18.800
So I'm going to copy that, paste it,
select all, copy, paste.

00:11:18.840 --> 00:11:19.920
Again.

00:11:20.000 --> 00:11:22.990
So let's get a huge
amount of text in here.

00:11:25.060 --> 00:11:29.680
And you notice word wrapping works
just as we would expect since

00:11:29.680 --> 00:11:30.940
I turned that on in Interface Builder.

00:11:30.940 --> 00:11:34.000
Now all of those options can also
be controlled at creation time

00:11:34.000 --> 00:11:36.260
when you create your HITextView.

00:11:36.920 --> 00:11:38.170
There's a slight problem here.

00:11:38.220 --> 00:11:41.020
If I select all and copy
and paste one more time,

00:11:41.020 --> 00:11:44.800
one or two more times,
I've got more text than will really

00:11:44.800 --> 00:11:46.800
fit in a reasonably sized window.

00:11:46.800 --> 00:11:49.070
So despite the fact that we
have automatic word wrapping on,

00:11:49.070 --> 00:11:51.800
we still can't quite see everything
when we get a large amount of text.

00:11:51.800 --> 00:11:54.800
So what we need in addition
to this is scrolling.

00:11:54.850 --> 00:11:57.790
And that's what Dan is
going to talk about next.

00:11:57.790 --> 00:11:58.800
Dan?

00:11:58.800 --> 00:12:00.470
Thanks, Aaron.

00:12:04.000 --> 00:12:05.560
Can we go back to the slides, please?

00:12:05.560 --> 00:12:06.960
Slides, please.

00:12:06.960 --> 00:12:08.240
There you go.

00:12:08.240 --> 00:12:10.520
I need scrolling support.

00:12:10.700 --> 00:12:15.650
What you need to do here is
create a HIScrollView and

00:12:15.650 --> 00:12:18.700
embed the HITextView within it.

00:12:18.700 --> 00:12:24.700
So options for controlling that scroll
behavior are passed to the HIScrollView.

00:12:24.700 --> 00:12:26.570
Let's take a look.

00:12:27.010 --> 00:12:32.910
So, again, HIViewRef, ScrollView,
TextView, and some option bits.

00:12:33.590 --> 00:12:39.960
The HIScrollViewCreate, for once a nice,
reasonable name.

00:12:39.990 --> 00:12:42.350
And let's take a look at the options.

00:12:42.410 --> 00:12:46.460
The HIScrollViewOptionsVerticalScroll,
that will set up for

00:12:46.460 --> 00:12:48.000
the vertical scroll bar.

00:12:48.000 --> 00:12:50.640
And since we don't need the
horizontal in this case,

00:12:50.750 --> 00:12:52.570
we don't or it.

00:12:53.300 --> 00:12:59.770
And then finally, we add the HITextView,
or we embed the HITextView within

00:12:59.770 --> 00:13:01.200
the HISchoolView.

00:13:01.200 --> 00:13:05.200
And that's all there is to it.

00:13:06.840 --> 00:13:11.280
Adding scrolling support can also be
done through the interface builder.

00:13:11.310 --> 00:13:16.740
You go down to the Layout menu,
go down to Embed in, Scroll View.

00:13:16.760 --> 00:13:18.040
That's it.

00:13:18.070 --> 00:13:19.810
Aaron, you want to give a show?

00:13:20.650 --> 00:13:21.190
Okay.

00:13:22.120 --> 00:13:24.420
All right, so taking a look inside
folder number two,

00:13:24.510 --> 00:13:27.930
if you're following along,
the begin project is going to

00:13:27.930 --> 00:13:31.470
look exactly like the end project
from the previous example.

00:13:31.530 --> 00:13:36.460
And what we're going to do is,
like Dan showed, add scrolling support.

00:13:38.060 --> 00:13:41.200
Again, this can be done through both
Interface Builder and code.

00:13:41.250 --> 00:13:43.500
I'm going to do it on stage
using Interface Builder.

00:13:43.500 --> 00:13:45.780
If you look at the extras.c
file inside the folder,

00:13:45.780 --> 00:13:47.400
it explains how to do it with code.

00:13:47.400 --> 00:13:51.230
Also, every folder I forgot to mention
earlier contains a README file,

00:13:51.230 --> 00:13:55.140
which describes all the steps that
we go through in each of the demos.

00:13:57.380 --> 00:13:59.490
So let's take a look inside our nib.

00:13:59.550 --> 00:14:02.610
This is just like what we
had in the previous example.

00:14:03.140 --> 00:14:06.250
Looking at Outline View inside the NIV,
we can see that we have a

00:14:06.250 --> 00:14:09.330
text view inside our window.

00:14:09.440 --> 00:14:12.790
So let's make sure it's selected by
double-clicking it in Outline View.

00:14:12.860 --> 00:14:15.090
And as Dan showed,
we can embed it in a Scroll View just

00:14:15.100 --> 00:14:17.600
by selecting that from the Layout menu.

00:14:17.600 --> 00:14:20.910
Layout, Embed in, Scroll View.

00:14:21.710 --> 00:14:25.100
And when you embed a view inside a
scroll view in Interface Builder,

00:14:25.100 --> 00:14:29.020
the scroll view that it creates is the
size of the view you're embedding plus

00:14:29.030 --> 00:14:30.580
enough extra room for the scroll bar.

00:14:30.580 --> 00:14:32.380
So you can't see the scroll bars
yet because they're actually

00:14:32.380 --> 00:14:33.830
off the edge of the window.

00:14:33.920 --> 00:14:36.380
So I'll just resize the
window a little bit.

00:14:36.380 --> 00:14:37.330
And it snaps to the edge.

00:14:37.340 --> 00:14:40.560
And now you can see the scroll bars.

00:14:40.580 --> 00:14:43.260
And all of the options
for the scroll view

00:14:44.270 --> 00:14:46.910
Can be controlled through the inspector.

00:14:47.020 --> 00:14:50.450
Since we've already got word
wrapping on in our text view,

00:14:50.450 --> 00:14:54.680
we don't need a horizontal scroll bar,
so let's just turn that off.

00:14:54.680 --> 00:14:57.950
And because it goes all the
way to the edge of the window

00:14:57.950 --> 00:15:02.250
and there's a grow box there,
let's select allow grow box so the scroll

00:15:02.250 --> 00:15:05.190
bar doesn't conflict with the grow box.

00:15:05.520 --> 00:15:09.400
Lastly, we want to make sure that this
resizes along with the window.

00:15:09.400 --> 00:15:11.550
Now that the text view is
embedded in the scroll view,

00:15:11.550 --> 00:15:15.060
it's going to resize along
with the scroll view because

00:15:15.060 --> 00:15:16.400
that's its current parent.

00:15:16.400 --> 00:15:19.400
So in order to make everything resize
along with the window automatically,

00:15:19.400 --> 00:15:22.390
we also have to bind the
scroll view to the window.

00:15:22.400 --> 00:15:25.320
So now we go to the layout
portion of the inspector,

00:15:25.320 --> 00:15:28.400
go around and bind it on all four sides.

00:15:28.400 --> 00:15:34.390
And that should be it.

00:15:42.540 --> 00:15:45.390
And as you can see,
we now have a scroll bar.

00:15:45.430 --> 00:15:48.000
As before, we can click and edit.

00:15:58.210 --> 00:16:05.250
So I'm going to do the exponential
trick here to get a huge

00:16:05.250 --> 00:16:07.350
amount of text very quickly.

00:16:13.860 --> 00:16:16.340
And now you can see the
scroll bar is updating.

00:16:16.380 --> 00:16:19.400
As we resize,
when we resize large enough,

00:16:19.450 --> 00:16:21.730
it actually kind of goes away.

00:16:22.270 --> 00:16:26.500
I didn't have auto-hide scroll bars on,
so you can still see it,

00:16:26.550 --> 00:16:29.750
but the scroll slum disappears
when we get big enough.

00:16:30.540 --> 00:16:33.220
Let's make it really small.

00:16:33.220 --> 00:16:35.300
You can see that we can scroll
all the way to the bottom.

00:16:35.300 --> 00:16:37.500
As we type new text,
the scroll thumb gets smaller.

00:16:37.500 --> 00:16:41.930
Now we've got a pretty full-featured
little text view without

00:16:41.950 --> 00:16:43.500
having to do a lot of work.

00:16:43.500 --> 00:16:47.170
However, at the moment,
all we can do is type, cut,

00:16:47.190 --> 00:16:48.500
copy and paste.

00:16:48.500 --> 00:16:51.500
It's also nice to be
able to change the style.

00:16:51.500 --> 00:16:54.500
That requires font panel support.

00:16:54.500 --> 00:16:56.500
That's what Dan is going
to talk about next.

00:16:57.300 --> 00:16:58.500
Thanks, Aaron.

00:16:58.500 --> 00:17:00.380
Slides, please.

00:17:02.900 --> 00:17:06.260
Adding font panel support.

00:17:06.260 --> 00:17:09.810
You would probably want to
create a UI element for your end

00:17:09.810 --> 00:17:14.760
user to access the font panel,
but we're not going

00:17:14.760 --> 00:17:15.900
to cover that on this.

00:17:15.930 --> 00:17:20.620
You would do a
HICommandShowHideFontPanel for that.

00:17:20.980 --> 00:17:24.390
And then,
or Aaron will give a demo later on that.

00:17:24.390 --> 00:17:30.190
And set the HITEXTView's TXN object,
again, that's the MLTE object,

00:17:30.190 --> 00:17:31.900
to handle font panel events.

00:17:31.900 --> 00:17:34.850
Let's take a look.

00:17:35.650 --> 00:17:40.960
First thing we need to do is get the
TXN object out of the HITextView.

00:17:40.960 --> 00:17:45.320
You do that using the
HITEXTView getTXN object.

00:17:46.110 --> 00:17:49.910
Next,
we get the options that are currently

00:17:49.970 --> 00:17:57.800
in that TXN object so we can
OR in our font command processing

00:17:57.950 --> 00:17:59.370
and our font command updating.

00:17:59.370 --> 00:18:04.870
That's the two-way communication to
the font panel back to the TXN object.

00:18:05.050 --> 00:18:09.520
Once we order those in to our options,
we set the command event support

00:18:09.680 --> 00:18:12.480
back into the TXN object.

00:18:13.120 --> 00:18:14.740
And that's all there is to it.

00:18:14.740 --> 00:18:15.640
Aaron?

00:18:16.190 --> 00:18:16.560
Okay.

00:18:16.580 --> 00:18:19.030
Can we have demo machine one, please?

00:18:19.770 --> 00:18:20.390
Thanks.

00:18:21.220 --> 00:18:22.600
So in this example,
we're going to show how

00:18:22.600 --> 00:18:23.700
to add font panel support.

00:18:23.700 --> 00:18:27.540
There's only one way to do it,
so there's no extras file this time.

00:18:27.590 --> 00:18:33.350
The README goes over the steps,
and there's also a file called CodeToAdd,

00:18:33.350 --> 00:18:36.050
which has commented code
explaining exactly where it's

00:18:36.050 --> 00:18:37.770
to be inserted into the project.

00:18:37.860 --> 00:18:40.840
And as always,
the end project shows what it looks

00:18:40.880 --> 00:18:43.080
like after we've done our demo steps.

00:18:43.140 --> 00:18:47.280
So let's start with our begin project,
which in this case is still identical

00:18:47.280 --> 00:18:50.240
to the end from the previous example.

00:18:50.240 --> 00:18:52.160
Now what we want to do is,
as Dan mentioned,

00:18:52.260 --> 00:18:55.710
first give the user a way
to bring up the font panel.

00:18:57.650 --> 00:19:01.840
And the usual way to do something
like that is through a menu item.

00:19:01.890 --> 00:19:04.380
So let's take a look at the menu bar.

00:19:04.420 --> 00:19:07.830
I'm just going to add an
item to the Edit menu.

00:19:08.770 --> 00:19:13.270
To show the font panel,
so let's just drag it over and

00:19:13.270 --> 00:19:15.760
put an extra separator here.

00:19:15.760 --> 00:19:19.320
We'll give it a name.

00:19:20.300 --> 00:19:28.680
Show fonts and it's option semicolon
to create an ellipsis character.

00:19:30.110 --> 00:19:34.620
Now let's edit this menu item in
the inspector and make sure it

00:19:34.620 --> 00:19:37.290
sends the proper command event.

00:19:38.160 --> 00:19:40.230
Unfortunately,
it's not in this pop-up menu,

00:19:40.230 --> 00:19:45.370
but it is defined in fontpanel.h
inside common panels.

00:19:45.370 --> 00:19:50.130
You can find that just by
searching for show hide font panel.

00:19:50.830 --> 00:19:55.570
And the readme file explains that the
four character code for the command ID to

00:19:55.600 --> 00:20:00.610
show and hide the font panel is SHFP,
for show font panel.

00:20:01.800 --> 00:20:06.680
And the readme file explains that the
four character code for the command ID to

00:20:06.680 --> 00:20:08.450
show and hide the font panel is SHFP,
for show font panel.

00:20:15.250 --> 00:20:18.690
Now that we've given the user
a way to access the font panel,

00:20:18.700 --> 00:20:22.650
we also want to make sure that our
text view responds to the font panel.

00:20:24.000 --> 00:20:33.500
[Transcript missing]

00:20:34.360 --> 00:20:37.850
I'm also going to bring
up the code to add file.

00:20:37.860 --> 00:20:43.320
We first want to come up with a
way to refer to our text view.

00:20:43.380 --> 00:20:48.930
So in the code, I've defined a view ID,
which is a four-character code

00:20:48.930 --> 00:20:54.000
plus a numerical constant,
so that we can refer to our text view.

00:20:54.020 --> 00:20:57.020
And I called it MTXT for My Text View.

00:20:57.030 --> 00:21:01.600
So let's copy and paste that
over to Interface Builder.

00:21:01.650 --> 00:21:04.670
We use Outline View to
select the text view.

00:21:06.900 --> 00:21:09.000
Make sure it's selected.

00:21:09.000 --> 00:21:11.860
And then go to the control portion
of the inspector to paste that in.

00:21:11.860 --> 00:21:14.380
And it was MTXT0.

00:21:15.500 --> 00:21:16.790
We'll save the nib now.

00:21:16.810 --> 00:21:18.300
So now we have a way to refer to it.

00:21:18.310 --> 00:21:21.100
So let's just take this and you can
see the comment there tells you to

00:21:21.100 --> 00:21:22.500
put this at the top of the file.

00:21:22.500 --> 00:21:30.790
So I'm just going to, oops,
going to drag and drop this into main.c.

00:21:32.400 --> 00:21:36.120
And now we have a function
that we're going to add,

00:21:36.130 --> 00:21:38.410
which when called will--

00:21:39.670 --> 00:21:45.350
Grab the HITextView out of the window
based on that ID that I just defined.

00:21:45.800 --> 00:21:48.550
Then it will get the
underlying TXN object,

00:21:48.550 --> 00:21:52.090
or MLTE object, as it's also called,

00:21:52.910 --> 00:21:55.330
It'll get the current
command event support,

00:21:55.370 --> 00:21:59.440
so that way we don't stomp on any
of the currently existing options.

00:21:59.440 --> 00:22:03.610
Then we'll add these two constants to it.

00:22:03.610 --> 00:22:03.610
This one...

00:22:04.060 --> 00:22:08.630
Font Command Processing tells
MLTE to process commands that

00:22:08.630 --> 00:22:10.540
come from the font panel.

00:22:10.640 --> 00:22:15.250
And this one, Font Command Updating,
tells MLTE to keep the font panel

00:22:15.250 --> 00:22:17.230
updated based on its current selection.

00:22:17.230 --> 00:22:19.700
Together,
they provide full font panel support.

00:22:21.160 --> 00:22:24.200
Font Command Processing tells
MLTE to keep the font panel updated

00:22:24.220 --> 00:22:25.800
based on its current selection.

00:22:25.800 --> 00:22:28.180
Together,
they provide full font panel support.

00:22:28.230 --> 00:22:31.520
And this one, Font Command Updating,
tells MLTE to keep the font panel

00:22:31.520 --> 00:22:33.510
updated based on its current selection.

00:22:33.510 --> 00:22:36.210
Together,
they provide full font panel support.

00:22:52.100 --> 00:22:52.100
So, down here we've just got
a little bit of code.

00:22:52.900 --> 00:22:55.360
To install it,
to call it on the text view.

00:22:55.360 --> 00:22:59.440
So after the window creation,
anytime after we've created the window,

00:22:59.440 --> 00:23:00.980
we can set these options.

00:23:00.980 --> 00:23:03.320
So let's just drag and drop that in here.

00:23:03.360 --> 00:23:05.650
You can see the create window is up here.

00:23:05.650 --> 00:23:08.220
So as long as we're after that,
that's fine.

00:23:08.250 --> 00:23:09.980
And we also have this.

00:23:10.590 --> 00:23:13.590
Exit condition defined,
so I'll just need to add that

00:23:13.590 --> 00:23:15.630
label down at the bottom.

00:23:15.670 --> 00:23:17.380
And that's it.

00:23:17.420 --> 00:23:19.970
So let's see what happens
when we build and run it.

00:23:24.800 --> 00:23:27.100
All right, now we have the window
with the scroll bar.

00:23:27.100 --> 00:23:28.800
We can click and type.

00:23:28.800 --> 00:23:37.400
We also see the menu
item that we created.

00:23:38.870 --> 00:23:41.100
All right, now we have the window
with the scroll bar.

00:23:41.100 --> 00:23:42.800
We can click and type.

00:23:42.800 --> 00:23:49.420
We also see the menu
item that we created.

00:23:52.600 --> 00:23:56.600
And just to show you that
it isn't just the basics,

00:23:56.600 --> 00:23:57.680
you know, we can select another font.

00:23:57.680 --> 00:23:59.760
Let's select Skia.

00:23:59.900 --> 00:24:01.990
Everything in the font
panel is hooked up.

00:24:02.000 --> 00:24:03.580
We can do drop shadow,
we can change the color,

00:24:03.580 --> 00:24:05.010
we can change the underline.

00:24:05.260 --> 00:24:07.540
Even the typography panel is hooked up.

00:24:07.550 --> 00:24:10.060
It's all automatic,
it's all done for you.

00:24:10.060 --> 00:24:14.120
This is the kind of thing that
you could always do before.

00:24:14.120 --> 00:24:16.140
The font panel's been available
in Carbon for a while,

00:24:16.190 --> 00:24:17.250
but it took a lot more work.

00:24:17.330 --> 00:24:18.440
Now it's much more automatic.

00:24:18.880 --> 00:24:22.160
As you can see,
we can play with variations,

00:24:22.160 --> 00:24:23.880
we can play with all
the ligature controls,

00:24:23.880 --> 00:24:25.990
all of the advanced font panel stuff.

00:24:25.990 --> 00:24:28.000
It all just works for you.

00:24:28.000 --> 00:24:29.990
Very easy.

00:24:29.990 --> 00:24:31.390
Isn't that great?

00:24:31.410 --> 00:24:33.910
This is the kind of thing that's...

00:24:34.500 --> 00:24:41.300
[Transcript missing]

00:24:45.150 --> 00:24:49.590
It's now become kind of boilerplate in
text views to also have spelling support.

00:24:49.590 --> 00:24:51.600
And that's something
we added new in Tiger.

00:24:51.600 --> 00:24:53.220
And that's what Dan is
going to talk about next.

00:24:53.220 --> 00:24:54.320
Dan?

00:24:54.320 --> 00:24:55.940
Hey, thanks Aaron.

00:24:58.880 --> 00:25:01.120
So adding spelling panel support.

00:25:01.120 --> 00:25:04.560
It's very similar to adding
the font panel support.

00:25:04.560 --> 00:25:07.800
You need to create UI elements
to send the command events.

00:25:07.810 --> 00:25:11.350
In this case, check spelling,
show spelling panel,

00:25:11.350 --> 00:25:13.830
and the check spelling as you type.

00:25:14.280 --> 00:25:18.790
And you need to set the HITEXTView's
TXN object to handle these events.

00:25:18.800 --> 00:25:21.870
Let's take a look.

00:25:23.140 --> 00:25:28.890
There are the two options for
sending and receiving information

00:25:29.020 --> 00:25:31.200
from your spelling panel.

00:25:31.230 --> 00:25:33.190
Whoops, let me go back.

00:25:33.250 --> 00:25:36.940
And the last one there is
TXN set command event support.

00:25:36.960 --> 00:25:40.180
Very similar to the font panel support.

00:25:40.770 --> 00:25:46.290
And that's all I have to show and
Aaron will demonstrate how to install.

00:25:46.290 --> 00:25:46.930
Okay.

00:25:46.930 --> 00:25:48.310
Thanks, Dan.

00:25:48.830 --> 00:25:54.010
So now, we'll go to folder number four
for spelling panel support.

00:25:54.210 --> 00:25:57.460
And as Dan showed,
adding spelling panel support is almost

00:25:57.460 --> 00:26:00.100
exactly like adding font panel support.

00:26:00.180 --> 00:26:03.030
First thing we need to do, as before,
is give the user a way to

00:26:03.030 --> 00:26:04.840
access the spelling panel.

00:26:04.930 --> 00:26:08.940
And we'll do that through menu items.

00:26:09.010 --> 00:26:13.230
So let's create a new submenu here.

00:26:15.670 --> 00:26:17.800
We'll make this look just like
the standard menu that you

00:26:17.800 --> 00:26:20.600
see all throughout Mac OS X.

00:26:20.600 --> 00:26:23.900
It's going to say "Spelling"
and inside that submenu there's

00:26:23.900 --> 00:26:24.890
going to be three items.

00:26:24.900 --> 00:26:27.200
Whoops, I'm sorry.

00:26:27.200 --> 00:26:34.730
One to bring up the spelling panel.

00:26:42.930 --> 00:26:44.900
One to initiate spell check.

00:26:44.900 --> 00:26:52.110
And one to toggle
automatic spell checking.

00:27:00.700 --> 00:27:05.540
and that's exactly how it appears in the
standard menus seen throughout Mac OS X.

00:27:05.540 --> 00:27:08.700
So for each of these menu items,
we just need to edit them

00:27:08.700 --> 00:27:13.140
in the inspector and set
the appropriate command ID.

00:27:13.140 --> 00:27:16.370
So the first one for the spelling panel,

00:27:18.160 --> 00:27:22.720
Again,
it's not defined in this pop-up menu.

00:27:22.810 --> 00:27:24.140
However,
the reading tells you what it is,

00:27:24.140 --> 00:27:27.500
and you can also find it in
the Carbon events header.

00:27:27.510 --> 00:27:31.310
It's SHSP, for Shell Spelling Panel.

00:27:32.960 --> 00:27:37.430
Now we want to make sure this menu
item has auto-disabled checked,

00:27:37.430 --> 00:27:40.590
so that way whenever an
HITextView doesn't currently have focus,

00:27:40.600 --> 00:27:41.480
it's not enabled.

00:27:41.490 --> 00:27:45.980
Otherwise, the user would have a useless
menu item sitting there.

00:27:46.040 --> 00:27:49.540
And we want to turn off update
single item to make sure that

00:27:49.570 --> 00:27:53.370
Carbon Events always checks
it whenever events come in.

00:27:54.130 --> 00:27:59.960
And the standard menu key for this,
the standard shortcut

00:27:59.960 --> 00:28:02.950
key is command colon.

00:28:06.300 --> 00:28:11.090
Now to initiate spell check,
the four character code

00:28:11.100 --> 00:28:14.300
for the command ID is CKSP.

00:28:14.310 --> 00:28:17.390
You can find that in the README and
the Carbon Events header.

00:28:18.420 --> 00:28:21.700
We also want to do auto-disable
and turn off update single item.

00:28:21.700 --> 00:28:23.520
Make sure it always gets updated.

00:28:23.530 --> 00:28:26.420
The shortcut key is command semicolon.

00:28:28.800 --> 00:28:31.500
Lastly, for text spelling as you type,
first of all,

00:28:31.500 --> 00:28:35.060
we want to check that by default
because it is on by default once

00:28:35.070 --> 00:28:36.580
you add spelling panel support.

00:28:36.580 --> 00:28:41.820
Again, we want to turn off update single
item and turn on auto-disable.

00:28:41.820 --> 00:28:44.890
And there isn't a standard...

00:28:45.010 --> 00:29:03.550
Shortcut key for this one,
so we'll leave that off.

00:29:03.550 --> 00:29:03.550
But we do want to make sure we have
the correct command ID for this.

00:29:03.550 --> 00:29:03.550
And it is,
I'm going to have to refer to the readme,

00:29:03.550 --> 00:29:03.550
I can't remember.

00:29:03.550 --> 00:29:03.550
I think it's ASPC.

00:29:03.550 --> 00:29:03.550
Yes, it is.

00:29:03.550 --> 00:29:03.550
It's ASPC for auto spell check.

00:29:08.330 --> 00:29:12.360
You can always refer to the Carbon events
header to find the correct command ID.

00:29:12.390 --> 00:29:15.390
So now that we've done that,
the only thing we need to do is tell

00:29:15.400 --> 00:29:22.180
the HITextView's underlying MLTE object
to respond to spelling event support.

00:29:22.950 --> 00:29:24.830
And that's easy enough to do.

00:29:24.890 --> 00:29:27.070
We edit main.c.

00:29:27.110 --> 00:29:31.620
Scroll down to the point where we added
font panel support in the last example.

00:29:31.620 --> 00:29:34.780
And we're just going to
add a couple more lines.

00:29:34.780 --> 00:29:36.600
You can find them in
the code to add file.

00:29:36.600 --> 00:29:40.560
There's just two extra lines.

00:29:41.160 --> 00:29:46.210
Add spelling panel options.

00:29:46.210 --> 00:29:46.210
So let's just drag those over.

00:29:55.830 --> 00:29:57.300
That's it.

00:29:57.340 --> 00:30:00.920
This looks almost identical
to adding font panel support.

00:30:00.920 --> 00:30:02.990
The first constant

00:30:03.430 --> 00:30:06.020
tells MLTE to process events
from the spelling panel.

00:30:06.020 --> 00:30:11.510
Second constant tells MLTE to
keep the spelling panel and all

00:30:11.510 --> 00:30:15.260
of its associated menu items
updated based on its current state.

00:30:15.260 --> 00:30:21.340
Everything else remains exactly the same.

00:30:21.340 --> 00:30:23.300
So let's build and run it.

00:30:30.160 --> 00:30:33.700
Let me make this a little
bigger so that you can see it.

00:30:33.700 --> 00:30:39.690
Now as you can see,

00:30:40.110 --> 00:30:47.420
The HITextView currently has focus,
so the spelling items are all on.

00:30:47.710 --> 00:30:51.770
If I were to quit and restart this,
in fact I'm going to do that real quick.

00:30:51.770 --> 00:30:53.700
Let's quit and restart it.

00:30:53.750 --> 00:30:55.300
Now right now there's no blinking cursor.

00:30:55.300 --> 00:30:57.700
The HITextView doesn't have focus.

00:30:57.720 --> 00:30:59.140
So if you look at the
spelling menu items,

00:30:59.140 --> 00:31:00.690
they're actually disabled.

00:31:00.720 --> 00:31:04.830
As soon as I click in the HITextView,
it has focus and the spelling menu

00:31:04.830 --> 00:31:07.090
items are automatically enabled.

00:31:08.720 --> 00:31:11.260
So let's just type a little bit.

00:31:11.290 --> 00:31:14.010
Make it a little bigger so
that you can all see it.

00:31:19.030 --> 00:31:20.900
Make a deliberate mistake.

00:31:20.900 --> 00:31:28.110
And you can see it's automatically
underlined for me because I have

00:31:28.300 --> 00:31:29.300
"Check Spelling As You Type" on.

00:31:29.300 --> 00:31:31.300
So let's turn that off.

00:31:31.300 --> 00:31:33.100
You see it go away.

00:31:35.670 --> 00:31:40.780
And I can also say check spelling.

00:31:40.780 --> 00:31:43.830
It jumps to the first misspelled
word and I can also say

00:31:43.880 --> 00:31:46.890
bring up the spelling panel.

00:31:46.890 --> 00:31:50.620
Now because I have that
punctuation in there,

00:31:50.620 --> 00:31:53.190
it confused the spell check.

00:31:53.190 --> 00:31:53.190
So let's...

00:31:54.750 --> 00:31:55.700
Let's get a better example.

00:31:55.700 --> 00:31:58.540
Let me just pull that out.

00:31:58.540 --> 00:32:02.540
And we'll check spelling again.

00:32:02.540 --> 00:32:03.850
There we go.

00:32:06.410 --> 00:32:11.200
And I can make corrections,
and when I click correct,

00:32:11.230 --> 00:32:15.400
MLT will automatically update the text
based on events from the spelling panel.

00:32:15.440 --> 00:32:18.670
So now everything all just works,
and it's all very automatic.

00:32:18.670 --> 00:32:20.770
This is all new in Tiger.

00:32:20.770 --> 00:32:23.100
We encourage you to use it.

00:32:24.220 --> 00:32:28.270
Now Dan is going to talk about
something even more fancy,

00:32:28.270 --> 00:32:28.820
transparency.

00:32:28.840 --> 00:32:31.870
Hey, thanks Aaron.

00:32:32.250 --> 00:32:35.260
I don't know about you,
but I wish that was around two years ago.

00:32:35.260 --> 00:32:39.170
I could have really used it.

00:32:40.390 --> 00:32:41.700
Quite useful.

00:32:41.810 --> 00:32:44.160
So adding transparency.

00:32:44.180 --> 00:32:49.060
To add transparency to an HITextView,
use the function HITEXTVIEW,

00:32:49.060 --> 00:32:53.240
set background color,
with some non-opaque color.

00:32:53.240 --> 00:32:55.080
Let's take a look.

00:32:56.160 --> 00:33:02.130
So the first thing here is I grabbed
the CG color ref from the HITextView.

00:33:02.130 --> 00:33:07.760
It's just an easy way to create a
CG color ref with all the settings

00:33:07.830 --> 00:33:09.340
that are currently in the HITextView.

00:33:09.340 --> 00:33:12.550
But you could also just
create one from scratch,

00:33:12.690 --> 00:33:14.620
set your color space, etc.

00:33:15.220 --> 00:33:22.700
So here I modify that color with an
alpha that I've set to 0.5 in this case.

00:33:22.760 --> 00:33:26.810
And I release that previous color
since we don't need it anymore.

00:33:27.450 --> 00:33:31.510
Then,
using HITextView's set background color,

00:33:31.510 --> 00:33:34.630
we simply set it right
into the-- All right.

00:33:34.640 --> 00:33:36.230
Thanks, Dan.

00:33:38.860 --> 00:33:42.410
So starting with the begin
project in folder number five,

00:33:42.410 --> 00:33:45.270
you can see it's almost identical to
the end project from the previous one.

00:33:45.360 --> 00:33:47.090
However, there's two new files here.

00:33:47.170 --> 00:33:49.000
We know transparency.c.h.

00:33:49.000 --> 00:33:53.320
What that does is encapsulate a little
bit of code that makes the content view

00:33:53.320 --> 00:33:55.620
of the window completely transparent.

00:33:55.750 --> 00:33:59.680
Because a transparent HITextView still
won't show anything behind it

00:33:59.720 --> 00:34:03.390
unless there is nothing in the
way between it and other applications

00:34:03.610 --> 00:34:05.880
or other windows that are behind it.

00:34:05.880 --> 00:34:09.750
You can see an example of transparency
in MLTE Showcase if you have the

00:34:09.750 --> 00:34:11.880
Tiger development CD installed.

00:34:11.880 --> 00:34:16.280
Go to
/developer/examples/carbon/mlte-showcase.

00:34:16.280 --> 00:34:20.410
There's an example where the text
view is partially transparent and

00:34:20.410 --> 00:34:22.680
behind it there is a CG image view.

00:34:22.680 --> 00:34:25.480
In this case, we're going to do something
a little different.

00:34:25.480 --> 00:34:27.780
We're just going to make the window
itself transparent so that way you

00:34:27.780 --> 00:34:30.640
can see through to the desktop or
whatever windows are behind it.

00:34:30.710 --> 00:34:33.270
And that's what window transparency does.

00:34:33.310 --> 00:34:37.050
Inside that file there's just
enough event handling code to tell

00:34:37.050 --> 00:34:40.940
the toolbox to make the content
view completely transparent.

00:34:41.090 --> 00:34:46.110
Otherwise, this project is completely
unchanged from the previous one.

00:34:47.410 --> 00:34:52.510
So to do this, let's edit main.c.

00:34:56.810 --> 00:35:02.670
You can see we have one extra call,
make window transparent,

00:35:02.670 --> 00:35:04.640
and that calls into windowtransparency.c.

00:35:04.640 --> 00:35:07.100
Oops.

00:35:07.550 --> 00:35:10.190
Other than that,
everything is the same as before.

00:35:10.200 --> 00:35:13.510
So let's take a look at code2add.c.

00:35:14.510 --> 00:35:19.640
That contains code which looks almost
like what Dan just showed on his slides.

00:35:19.640 --> 00:35:22.270
It's just encapsulated into a function.

00:35:24.340 --> 00:35:27.120
What this does is for
a specified HITextView,

00:35:27.120 --> 00:35:29.680
it'll set its alpha by getting
the previous background

00:35:29.720 --> 00:35:31.650
color and changing it.

00:35:33.450 --> 00:35:36.100
To whatever you ask.

00:35:36.120 --> 00:35:38.580
So let's scroll up just a little bit.

00:35:39.410 --> 00:35:44.900
and drag and drop that
function over into main.c.

00:35:49.800 --> 00:35:52.740
The function doesn't do
much good unless we call it.

00:35:52.740 --> 00:35:56.130
So we'll scroll down a little
bit and we've got an extra--

00:35:56.910 --> 00:36:00.180
Couple of lines of code, just to call it.

00:36:00.180 --> 00:36:02.470
And in this case,
because we want to make it

00:36:02.480 --> 00:36:06.980
really apparent that the
window is really transparent,

00:36:06.980 --> 00:36:10.400
we're going to use an
alpha value of 0.25.

00:36:11.560 --> 00:36:13.500
You can use whatever you want.

00:36:13.500 --> 00:36:15.590
Now when you're setting
the background color,

00:36:15.590 --> 00:36:19.260
you notice we're saying HITextView copy
background color in order to

00:36:19.260 --> 00:36:21.500
get a CGColorRef to start with.

00:36:21.500 --> 00:36:22.500
You don't have to do that.

00:36:22.500 --> 00:36:24.480
Actually what you can do is
create a CGColorRef from scratch.

00:36:24.580 --> 00:36:26.300
You can get it from any kind of source.

00:36:26.520 --> 00:36:29.500
This is just a really quick way for us
to do it without altering anything else

00:36:29.500 --> 00:36:32.500
because we just want to change the alpha.

00:36:32.550 --> 00:36:36.820
And when you set the background
color in the HITextView,

00:36:36.820 --> 00:36:39.500
it will retain the color ref for you.

00:36:39.500 --> 00:36:42.500
So then you don't have to
keep it around anymore.

00:36:42.500 --> 00:36:43.450
You can do CGColorRelease.

00:36:49.340 --> 00:36:51.160
So that should be it.

00:36:51.180 --> 00:36:54.720
Let's build and run this.

00:36:54.720 --> 00:36:59.190
I'm also going to hide Xcode
so that it's really apparent.

00:36:59.380 --> 00:37:01.640
Now you can see here this
partially transparent window.

00:37:01.640 --> 00:37:03.420
Its alpha value is very small.

00:37:03.420 --> 00:37:05.680
It's only 0.25.

00:37:09.300 --> 00:37:12.930
And I can still type.

00:37:12.930 --> 00:37:14.700
I can even select.

00:37:14.710 --> 00:37:17.610
You can see the selection
shows up like that.

00:37:18.080 --> 00:37:20.220
You can bring up the font
panel and make it bigger.

00:37:20.220 --> 00:37:20.900
Whoops.

00:37:20.900 --> 00:37:24.010
I apologize,
I keep clicking a little too easily.

00:37:29.500 --> 00:37:31.770
Now when that window
is in the background,

00:37:31.770 --> 00:37:38.100
you'll notice that...
Let's put it up here.

00:37:38.300 --> 00:37:40.300
Let's put it over something white.

00:37:40.300 --> 00:37:45.100
Even the highlight color has an
alpha when it's in the background.

00:37:45.100 --> 00:37:47.100
So you can see it blending in there.

00:37:47.100 --> 00:37:51.730
If there was a...let's
actually move it over here.

00:37:53.760 --> 00:37:56.990
Now you can see the icon
through the highlight color.

00:37:57.050 --> 00:37:58.200
So now everything is transparent.

00:37:58.200 --> 00:37:59.700
You get proper compositing.

00:37:59.790 --> 00:38:02.530
If you add any type of
HI TextView or any other kind

00:38:02.530 --> 00:38:06.970
of content behind the TextView,
it will all get composited correctly.

00:38:07.050 --> 00:38:09.290
You can also put stuff on top
of it with alpha values and that

00:38:09.290 --> 00:38:10.980
will all get composited correctly.

00:38:10.980 --> 00:38:15.840
So these are the benefits of wrapping
up all the Carbon text editing

00:38:15.840 --> 00:38:18.010
code inside an HIView object.

00:38:21.410 --> 00:38:24.540
So now we've done some
pretty fancy things,

00:38:24.630 --> 00:38:26.890
but this text view isn't really
much good unless we can easily

00:38:26.890 --> 00:38:28.050
get data into and out of it.

00:38:28.090 --> 00:38:30.300
So far I've just had to
type and copy and paste.

00:38:30.320 --> 00:38:35.660
It'd be really nice to be able to load
and save files directly into this object.

00:38:35.660 --> 00:38:37.880
And that's what Dan is
going to talk about next.

00:38:37.920 --> 00:38:39.420
Hey, thanks Aaron.

00:38:41.970 --> 00:38:44.900
So responding to file menu.

00:38:44.900 --> 00:38:47.600
These are new for Tiger.

00:38:47.610 --> 00:38:48.890
They're for reading and writing.

00:38:48.890 --> 00:38:56.810
TXN read from CFURL and
TXN write range to CFURL.

00:38:57.100 --> 00:39:04.200
[Transcript missing]

00:39:05.110 --> 00:39:11.070
You can set this up to auto-detect what
type of file you're going to be reading

00:39:11.070 --> 00:39:14.400
from and that's what I'm showing here.

00:39:14.400 --> 00:39:16.550
Let's go through the parameters.

00:39:16.770 --> 00:39:22.160
First thing to do is grab the
TXN object from your HITextView.

00:39:22.200 --> 00:39:27.840
And these second and third
parameters refer to the data

00:39:27.840 --> 00:39:34.060
within the TXN object that you wish
to paste that information into.

00:39:34.100 --> 00:39:37.560
In this case, it's the entire TXN object.

00:39:38.560 --> 00:39:43.480
The third here, data options,
refers to what I was just talking about,

00:39:43.480 --> 00:39:46.240
auto-detection of the file type.

00:39:47.520 --> 00:39:50.800
And the fourth is the file URL.

00:39:50.820 --> 00:39:55.850
And finally,
this is set to null to basically ignore,

00:39:55.990 --> 00:39:59.910
but that's if you wanted to grab
the metadata from that file and

00:39:59.910 --> 00:40:03.200
have it accessible that way.

00:40:03.220 --> 00:40:06.780
Now, writing to a CFURL, it's similar.

00:40:06.820 --> 00:40:11.690
You set up a CFDictionary to supply
the information about the file type.

00:40:12.900 --> 00:40:13.740
- Take a look.

00:40:13.740 --> 00:40:19.990
First thing again is to extract
the TXN object from the HITextView.

00:40:20.000 --> 00:40:27.490
Again, the entire TXN object
is going to be written.

00:40:27.770 --> 00:40:30.140
And the data options,
which is the CFDictionary,

00:40:30.140 --> 00:40:34.600
and we'll discuss that after the slide,
is set there.

00:40:34.600 --> 00:40:37.040
Null being the doc attributes.

00:40:37.040 --> 00:40:43.230
Again, in this case, it's set to null,
meaning I'm not writing any specific

00:40:43.230 --> 00:40:46.830
metadata to this file and the file URL.

00:40:48.410 --> 00:40:52.170
Now the data options,
let's take a look at those.

00:40:52.180 --> 00:40:54.880
Dictionary,
and it contains information about

00:40:54.880 --> 00:40:57.940
the document type as I mentioned.

00:40:57.980 --> 00:41:02.120
And a CFDictionary is
composed of values and keys.

00:41:03.080 --> 00:41:05.560
And in this case,
you have a choice of two keys.

00:41:05.590 --> 00:41:11.970
The first being the data
option document type key.

00:41:11.970 --> 00:41:16.410
And the values that
are available are RTF,

00:41:16.410 --> 00:41:17.590
plain text,

00:41:18.560 --> 00:41:22.900
MLTE Document Type and
QuickTime Document Type.

00:41:22.960 --> 00:41:25.370
That's only for loading, though.

00:41:25.430 --> 00:41:30.530
Now, the second key available is the
Data Options Character Encoding key.

00:41:30.690 --> 00:41:36.000
And that's mainly for plain
text if you didn't wish to

00:41:36.070 --> 00:41:39.880
output to UniCode encoding.

00:41:39.880 --> 00:41:42.180
So you would just use that.

00:41:42.590 --> 00:41:49.600
and all these are available in
the MacText... MacTextEditor.h Ah,

00:41:49.600 --> 00:41:52.800
MacTextEditor.h.

00:41:52.870 --> 00:41:55.480
Now,
creating the DataOptionsCF dictionary

00:41:56.160 --> 00:41:59.330
supplies information about

00:42:01.400 --> 00:42:05.110
- Let's see, this is just going over,
I'm sorry, this is just going over how

00:42:05.110 --> 00:42:09.590
to create the CFDictionary,
which many of you have already done.

00:42:09.600 --> 00:42:14.120
In this case,
it's setting one key value pair,

00:42:14.140 --> 00:42:17.200
the data options document key type.

00:42:19.000 --> 00:42:23.110
Sending the number of pairs to one.

00:42:23.110 --> 00:42:31.160
And those last two parameters were
CFDictionary callbacks for that data.

00:42:31.160 --> 00:42:35.190
Now, finally,
let's go over the document attributes.

00:42:36.090 --> 00:42:39.300
They provide access to documents
for the Rich Text Format

00:42:39.370 --> 00:42:42.390
and MLTE Format documents.

00:42:42.580 --> 00:42:47.580
As an example,
TxEdit has a show properties in it with

00:42:47.580 --> 00:42:50.290
all the document attributes available.

00:42:50.290 --> 00:42:52.500
Author, company, copyright, etc.

00:42:52.500 --> 00:42:57.470
We're not going to cover
setting up the UI for this,

00:42:57.470 --> 00:42:59.740
but I just wanted to show it to you.

00:42:59.770 --> 00:43:04.500
This is easy to set up in terms
of accessing your metadata.

00:43:04.500 --> 00:43:10.970
And of course,
Spotlight uses the same metadata.

00:43:13.090 --> 00:43:18.420
The keys are predefined
in MacTextEditor.h And all

00:43:18.420 --> 00:43:20.810
the values are CF types.

00:43:20.810 --> 00:43:23.440
Most are CFStringRefs.

00:43:23.440 --> 00:43:25.470
Here's a list of them.

00:43:28.810 --> 00:43:31.590
And Aaron will give a demo
on how to set up this.

00:43:31.600 --> 00:43:32.600
Okay.

00:43:32.600 --> 00:43:33.600
There you go.

00:43:33.640 --> 00:43:34.600
All right.

00:43:34.600 --> 00:43:35.510
Thanks, Dan.

00:43:35.880 --> 00:43:43.390
So what we're going to do is add enough
code to make our little app respond

00:43:43.470 --> 00:43:44.720
to most of the stuff in the file menu.

00:43:44.720 --> 00:43:47.330
New, close, open, save, save as.

00:43:47.330 --> 00:43:51.120
If you look at the begin project
in folder number six file menu,

00:43:51.310 --> 00:43:54.000
you can see that it
looks a little different.

00:43:54.180 --> 00:43:58.770
This is the one project in the demo
today that has a little bit of a jump

00:43:58.840 --> 00:44:01.510
from the end of the previous demo.

00:44:01.510 --> 00:44:04.000
But let me just quickly go over.

00:44:04.000 --> 00:44:05.780
Let's close all the files
from the previous example.

00:44:05.800 --> 00:44:07.160
example.

00:44:07.170 --> 00:44:10.740
That's what I get for hiding
it instead of closing it.

00:44:12.570 --> 00:44:16.940
You can take a look and see that we
still have window transparency.c.

00:44:16.980 --> 00:44:17.990
That's unchanged.

00:44:18.030 --> 00:44:18.860
We still have main.

00:44:18.900 --> 00:44:21.290
We still have our nib,
which is also unchanged.

00:44:21.370 --> 00:44:25.410
We have a few new files, nav.c and nav.h.

00:44:25.520 --> 00:44:28.770
All that does is encapsulate just
enough code to do open and save

00:44:28.770 --> 00:44:30.260
dialogues using nav services.

00:44:30.260 --> 00:44:32.230
That's probably very
familiar to everyone,

00:44:32.240 --> 00:44:34.770
so I'm not going to go over
the contents of those files.

00:44:35.410 --> 00:44:40.500
We've also got two new files called
documentwindow.c and documentwindow.h.

00:44:40.570 --> 00:44:43.360
Main was getting a little big
because we kept adding more and

00:44:43.360 --> 00:44:46.450
more stuff directly inside it,
so all I've done is taken most

00:44:46.540 --> 00:44:50.390
of what was in there and pushed
it off into this extra file,

00:44:50.390 --> 00:44:51.660
documentwindow.c.

00:44:51.730 --> 00:44:54.690
You'll notice, if we open it up,

00:44:55.350 --> 00:44:57.290
We still have a lot of the
functions from the previous

00:44:57.290 --> 00:45:01.580
examples that are totally unchanged.

00:45:01.580 --> 00:45:03.930
Here's the text view set alpha.

00:45:06.410 --> 00:45:09.510
Here's TextView set options.

00:45:09.530 --> 00:45:10.700
This is all exactly like before.

00:45:10.700 --> 00:45:14.270
This is where we set the font
and spelling panel support.

00:45:15.590 --> 00:45:19.570
We've also added a tiny little
accessor function which finds by

00:45:19.570 --> 00:45:22.970
ID the text view in any of our windows,
which as we set it up

00:45:23.000 --> 00:45:26.370
in Interface Builder,
it was MTXT.

00:45:26.840 --> 00:45:28.960
I've also added a couple of tiny
little helper functions here

00:45:29.020 --> 00:45:35.560
at the bottom to set and get a
CFURL for the proxy in the window.

00:45:35.590 --> 00:45:38.550
So that way, because we're going to be
opening multiple windows now,

00:45:38.550 --> 00:45:41.040
we want to be able to keep track of
what document each window refers to.

00:45:41.060 --> 00:45:46.100
So just with a little bit of code here,
we can make the windows get the

00:45:46.100 --> 00:45:50.840
standard proxy icon and title
that you see throughout Mac OS X.

00:45:50.860 --> 00:45:52.910
And at the very top,

00:45:54.010 --> 00:45:57.730
I've encapsulated all the
code from main.c before,

00:45:57.730 --> 00:46:01.500
which would create one of the windows
and set up all the text view options.

00:46:01.550 --> 00:46:07.180
Most of this is just copy and pasted
straight over from main.c from before.

00:46:10.100 --> 00:46:12.100
We're still calling
make window transparent.

00:46:12.100 --> 00:46:17.330
We're still calling set text view
options and text view set alpha.

00:46:17.900 --> 00:46:21.140
And we just set the window
title to Untitled to start with

00:46:21.160 --> 00:46:23.700
whenever we create a new one.

00:46:23.750 --> 00:46:26.500
Now if you take a look at main.c,

00:46:27.610 --> 00:46:30.200
It's actually much more empty now.

00:46:30.200 --> 00:46:31.380
We just have our main entry point.

00:46:31.380 --> 00:46:32.220
It's really short.

00:46:32.220 --> 00:46:34.510
We just set up the menu bar.

00:46:35.530 --> 00:46:38.440
and we call Create New Document Window,
which is that encapsulated code

00:46:38.440 --> 00:46:40.460
I just showed you a second ago.

00:46:40.460 --> 00:46:42.780
We're also installing a
command event handler,

00:46:42.780 --> 00:46:44.980
an application-wide
command event handler,

00:46:45.000 --> 00:46:48.460
so that we can respond to
stuff in the file menu.

00:46:48.490 --> 00:46:50.730
This is probably very familiar.

00:46:50.910 --> 00:46:54.180
Here's the event handler
that I've created.

00:46:55.760 --> 00:46:58.850
If you scroll down,
you see a switch statement,

00:46:58.850 --> 00:46:59.600
which is very familiar.

00:46:59.600 --> 00:47:04.380
And we're just responding to the
standard file menu items-- Command-New,

00:47:04.380 --> 00:47:07.630
Command-Open, Save, and Save As.

00:47:08.020 --> 00:47:10.700
And we've got these comments
saying insert code to

00:47:10.700 --> 00:47:11.990
actually open the file here.

00:47:11.990 --> 00:47:14.520
You know, we've done everything creating
the new window except actually

00:47:14.520 --> 00:47:15.880
loading the data into the file.

00:47:15.880 --> 00:47:17.700
And that's what we're
going to add in the demo.

00:47:17.700 --> 00:47:25.330
So opening up code to add,
you can see it's very short.

00:47:28.830 --> 00:47:32.920
Like Dan said,
TXN read from CFURL operates

00:47:33.540 --> 00:47:38.010
on an MLTE object,
a TXN object, as it's also called.

00:47:40.390 --> 00:47:44.450
And so we're doing that and we're getting
it from the text view in our window.

00:47:44.460 --> 00:47:49.000
Sorry, my selection is...

00:47:51.400 --> 00:47:54.400
I'm a little bit skillful
with my mouse here.

00:47:54.400 --> 00:47:58.400
The next two parameters are offsets,
which refer to,

00:47:58.400 --> 00:48:00.900
these always refer to what's in memory.

00:48:00.900 --> 00:48:02.780
Whenever you see these,
it's referring to what's

00:48:02.780 --> 00:48:04.390
currently in the TXN object.

00:48:04.400 --> 00:48:07.280
So when you're reading in a file,
it's like, okay, where do you want it to

00:48:07.280 --> 00:48:09.400
go in the TextView object?

00:48:09.400 --> 00:48:11.900
By passing in these predefined
start and end offsets,

00:48:11.900 --> 00:48:15.780
we want it to replace the entire
contents of the TXN object.

00:48:18.080 --> 00:48:21.620
This parameter here is the
data options dictionary,

00:48:21.620 --> 00:48:24.090
which when you're opening,
you probably want to be as

00:48:24.090 --> 00:48:27.220
flexible as possible and just open
everything that MLTE supports.

00:48:27.300 --> 00:48:32.320
So you can pass null here and
MLTE will auto-detect it for you.

00:48:32.320 --> 00:48:36.060
One of the cases where you might want
to specify a dictionary is if you

00:48:36.060 --> 00:48:41.390
want to allow the user to specify
a particular text encoding if it's

00:48:41.390 --> 00:48:44.100
not auto-detecting it correctly.

00:48:44.180 --> 00:48:46.860
But most of the time you
just want to pass null.

00:48:48.140 --> 00:48:50.020
This is the file URL that we're opening.

00:48:50.020 --> 00:48:52.970
We're going to assume that the
code around it that's already

00:48:52.970 --> 00:48:56.270
pre-existing in the project is
going to set that up for us.

00:48:56.340 --> 00:49:01.300
And lastly is the metadata
document attributes dictionary,

00:49:01.300 --> 00:49:03.740
which in this case,
we're not going to pay attention to it,

00:49:03.780 --> 00:49:05.000
but it's pretty straightforward.

00:49:05.010 --> 00:49:08.680
If you just take a look
in the MacTextEditor.h,

00:49:08.720 --> 00:49:10.560
you'll see all the keys defined for you.

00:49:10.560 --> 00:49:13.510
Most of the types are
very simple CF types,

00:49:13.510 --> 00:49:15.000
like string refs.

00:49:15.020 --> 00:49:17.410
It's actually very easy to use.

00:49:18.310 --> 00:49:22.680
So to make our application
open correctly,

00:49:22.680 --> 00:49:25.270
let's just select a single line of code.

00:49:28.400 --> 00:49:34.280
We drag and drop it over,
right where we said we left a comment

00:49:34.280 --> 00:49:34.280
saying insert file open code here.

00:49:36.300 --> 00:49:49.100
[Transcript missing]

00:49:49.910 --> 00:49:52.850
You can get it done
with just a single call.

00:49:52.900 --> 00:49:57.220
However, you usually want to specify a
file type when you're saving.

00:49:57.220 --> 00:49:59.360
It's not like opening where
you want to support everything.

00:49:59.360 --> 00:50:02.750
When you're saving,
you're saving to a particular type.

00:50:02.770 --> 00:50:05.280
If you pass no for the
data options dictionary,

00:50:05.300 --> 00:50:07.540
you'll get the ML2E document type.

00:50:07.560 --> 00:50:10.900
And that's not really the
standard format on Mac OS X.

00:50:10.900 --> 00:50:18.890
It's kind of ML2E is the boilerplate
standard format for saving a file type.

00:50:19.500 --> 00:50:21.700
Wait, did I say MLT or rich text?

00:50:21.780 --> 00:50:27.190
Rich text is the standard
format for saving style text.

00:50:27.250 --> 00:50:30.760
So what we're doing here in these
three lines of code-- let me just

00:50:30.760 --> 00:50:34.980
make this window a little bigger
so we don't get line wrapping.

00:50:38.270 --> 00:50:42.080
We're going to create a dictionary
like Dan showed on the slides.

00:50:42.130 --> 00:50:47.350
This is the default allocator.

00:50:48.010 --> 00:50:51.680
We have a pair of keys and values,
one pair.

00:50:51.680 --> 00:50:54.630
We're going to specify a document
type and we're going to specify

00:50:54.630 --> 00:50:57.430
the RTF document type so that
way you can save to the rich

00:50:57.430 --> 00:51:00.000
text format which MSE supports.

00:51:00.000 --> 00:51:03.670
We only have one pair of keys and
values and these last two parameters

00:51:03.680 --> 00:51:07.120
are just for callbacks in case you
have something other than a CF type,

00:51:07.120 --> 00:51:09.880
you need your own allocators
and deallocators and most

00:51:09.880 --> 00:51:11.420
of the time that's unused.

00:51:11.900 --> 00:51:13.870
In this case,
we definitely don't need it since we're

00:51:13.930 --> 00:51:17.270
just using these predefined keys for you.

00:51:18.120 --> 00:51:22.500
Now we write to the CFURL,
and this is going to go into main.c

00:51:22.500 --> 00:51:24.930
so that we're going to assume the
CFURL is already set up for us.

00:51:24.980 --> 00:51:28.940
We've gotten it from
the file save dialog.

00:51:29.500 --> 00:51:32.730
This operates on a TXN object.

00:51:32.810 --> 00:51:36.230
We get that from the window,
and then we get the TXN object

00:51:36.390 --> 00:51:38.820
from the-- first we get the
text view from the window,

00:51:38.870 --> 00:51:41.810
then we get the underlying
TXN object from it.

00:51:42.190 --> 00:51:44.280
We're going to save the entire document.

00:51:44.360 --> 00:51:47.280
Again, these offsets always
refer to what's in memory.

00:51:47.290 --> 00:51:50.850
Since we're writing to a file,
it's how much of what's

00:51:50.900 --> 00:51:53.670
currently in memory do we want
to actually go out to disk.

00:51:53.680 --> 00:51:56.420
In this case, we want all of it,
so we'll just pass in these

00:51:56.450 --> 00:51:59.760
predefined start and end offsets.

00:52:00.210 --> 00:52:02.420
Next,
we pass in our data options dictionary,

00:52:02.420 --> 00:52:04.700
which we created one line up.

00:52:04.710 --> 00:52:08.510
That tells MLTE to save
in the rich text format,

00:52:08.560 --> 00:52:10.630
because that's what we specified.

00:52:10.720 --> 00:52:13.400
Here's where,
if we were interested in saving metadata,

00:52:13.490 --> 00:52:15.230
we would pass it in right here.

00:52:15.250 --> 00:52:18.570
We encourage you to do that,
because that way you'll get

00:52:18.570 --> 00:52:20.130
spotlight in this indexing.

00:52:20.180 --> 00:52:21.700
But for the purposes
of brevity right now,

00:52:21.700 --> 00:52:24.580
we're going to leave it
out up here on stage.

00:52:25.120 --> 00:52:27.060
and lastly there's the file URL.

00:52:27.070 --> 00:52:28.800
Once we're done with the
data options dictionary,

00:52:28.800 --> 00:52:30.790
we can go ahead and release it.

00:52:32.240 --> 00:52:39.360
So select this code and drop it
where we put the placeholder.

00:52:45.700 --> 00:52:54.200
[Transcript missing]

00:52:56.110 --> 00:52:58.920
Now you notice I didn't have to set up
anything in the menu because when you

00:52:58.920 --> 00:53:03.910
create a new Carbon project in Xcode,
you get standard file menu with

00:53:03.910 --> 00:53:06.230
all the proper command IDs already.

00:53:07.980 --> 00:53:11.990
So, now you can see it looks just like
the previous example with the alpha,

00:53:11.990 --> 00:53:14.900
we've still got the font
panel and spelling menu items,

00:53:14.900 --> 00:53:17.680
but now we have a proxy
icon and a window title.

00:53:17.750 --> 00:53:22.700
We can open multiple windows
because I hooked up the new command

00:53:22.700 --> 00:53:25.620
ID to create one of these windows.

00:53:26.590 --> 00:53:27.660
So let's take a look at Open.

00:53:27.660 --> 00:53:30.590
Let me drag,
we need a rich text file to work with,

00:53:30.590 --> 00:53:34.930
so I'm just going to use the README that
comes along with this project.

00:53:34.980 --> 00:53:40.500
Let's copy that to the desktop and
get that window out of the way.

00:53:40.530 --> 00:53:45.370
So we'll do file, open,
this is just the standard Nav Services.

00:53:46.730 --> 00:53:52.900
I'm going to select that README file,
click open, and you can see there it is.

00:53:56.900 --> 00:53:59.800
- And it looks just like
it does in TextEdit.

00:53:59.850 --> 00:54:05.090
Now I'm also gonna be able
to type in some stuff.

00:54:08.100 --> 00:54:09.440
We'll play with it in FontPanel.

00:54:09.460 --> 00:54:12.250
Let's make it big.

00:54:12.330 --> 00:54:13.800
Let's make it bold.

00:54:13.800 --> 00:54:16.310
I selected one of the words.

00:54:19.400 --> 00:54:21.560
and make that a different font.

00:54:21.560 --> 00:54:27.460
Let's pick something that's
really gonna stand out like Times.

00:54:27.930 --> 00:54:30.360
We'll make it a different size.

00:54:30.360 --> 00:54:31.300
OK.

00:54:31.340 --> 00:54:34.060
So this way we'll know that
styles are really being preserved.

00:54:34.120 --> 00:54:36.150
So we'll do save as.

00:54:39.230 --> 00:54:43.200
Save it to the desktop.

00:54:43.200 --> 00:54:45.000
Now let's turn off hide extensions
so you can see that we're

00:54:45.000 --> 00:54:47.320
going to save it as an RTF.

00:54:48.520 --> 00:54:53.920
Let's open it in TextEdit and verify
that it really does look exactly

00:54:53.990 --> 00:54:55.400
like it did in our text view.

00:54:55.400 --> 00:54:59.090
And because of transparency,
we can even line it up directly on top

00:54:59.090 --> 00:55:01.770
of it and see that it really is the same.

00:55:02.800 --> 00:55:05.940
So now you can see that we have the
ability to open and save the standard

00:55:05.940 --> 00:55:09.550
RTF format on Mac OS X very easily.

00:55:09.590 --> 00:55:14.210
You can exchange files with
other applications like TextEdit.

00:55:14.760 --> 00:55:17.760
This gives you a lot of
flexibility to get data into

00:55:17.760 --> 00:55:20.600
and out of your HITextViews.

00:55:20.660 --> 00:55:23.300
Now if you want a little
bit more in-depth example,

00:55:23.300 --> 00:55:25.600
I encourage you to take
a look at MLTE Showcase.

00:55:25.600 --> 00:55:29.600
It's in /developer/examples/carbon.

00:55:29.600 --> 00:55:34.760
That shows how to use the type pop-up
in the file save dialog so that

00:55:34.760 --> 00:55:35.600
you can choose different formats.

00:55:35.600 --> 00:55:38.650
You can choose the MLTE format,
you can choose plain text,

00:55:38.670 --> 00:55:40.520
which also uses the extra keys
in the data options dictionary

00:55:40.600 --> 00:55:43.600
to select an encoding.

00:55:43.600 --> 00:55:47.500
Now any valid CFString encoding
is available for use there.

00:55:47.500 --> 00:55:49.490
So it just demonstrates two.

00:55:49.500 --> 00:55:52.630
It shows you how to save
as UniCode or Mac Roman,

00:55:52.630 --> 00:55:55.500
but you can choose any of
the CFString encodings.

00:55:55.500 --> 00:55:58.470
They're all available.

00:56:00.090 --> 00:56:00.630
And that's it.

00:56:00.770 --> 00:56:03.040
I'm going to turn it back over to Dan.

00:56:03.040 --> 00:56:05.340
Hey, thanks Aaron.

00:56:05.520 --> 00:56:08.250
So, in summary,

00:56:08.470 --> 00:56:13.730
At least I think HITextView rocks and a
lot of other people expressed gratitude

00:56:13.800 --> 00:56:19.920
of getting these APIs available to you.

00:56:19.940 --> 00:56:24.570
It really makes quick work of
setting up a text editor in your

00:56:24.570 --> 00:56:29.460
application to free you up to
really make your application shine.

00:56:29.530 --> 00:56:33.290
And it's very easy to create and embed.

00:56:34.070 --> 00:56:38.350
and add font and spelling panel support.

00:56:38.350 --> 00:56:42.570
Read and write files was
just added in Tiger and

00:56:43.440 --> 00:56:46.120
For more information, let's take a look.

00:56:46.260 --> 00:56:52.400
Here you got the Carbon HI Toolbox
Feedback Forum tomorrow at 10:30.

00:56:52.400 --> 00:56:57.530
Really come to that and express
your desires for any new features,

00:56:57.530 --> 00:57:01.400
including the HITextView.

00:57:01.610 --> 00:57:05.400
Text, fonts, international technologies
feedback forum.

00:57:05.460 --> 00:57:08.400
That's on Friday at 9:00 a.m.

00:57:08.400 --> 00:57:13.580
And take your application global,
which is immediately

00:57:13.580 --> 00:57:17.380
following that on session 141.

00:57:18.070 --> 00:57:23.560
Documentation sample code, of course,
is at the WWDC 2005 site.

00:57:23.620 --> 00:57:28.290
Click on the HITextView session
and you'll get all the sample

00:57:28.290 --> 00:57:34.370
code that Aaron just went over,
plus all the documentation for MLTE also.

00:57:36.820 --> 00:57:37.700
Who to contact?

00:57:37.700 --> 00:57:41.010
Xavier Lagros of the
Worldwide Developer Relations.

00:57:41.080 --> 00:57:46.690
You can forward any emails to him
and they'll get to the right person.