WEBVTT

00:00:00.860 --> 00:00:02.350
Hi.

00:00:02.650 --> 00:00:07.200
Welcome to session 408,
Project Management Mastery with Xcode.

00:00:07.420 --> 00:00:09.460
So it's Friday afternoon.

00:00:09.460 --> 00:00:13.670
We've seen a week full of great sessions
about all kinds of aspects of Xcode.

00:00:13.890 --> 00:00:18.210
And in this session,
I wanted to dive down into some of the

00:00:18.540 --> 00:00:25.530
little bit deeper and more interesting
project management facilities Xcode has.

00:00:25.530 --> 00:00:25.530
So,

00:00:25.750 --> 00:00:26.940
I should introduce myself.

00:00:27.030 --> 00:00:27.940
I'm Anders Bertelrud.

00:00:27.940 --> 00:00:34.530
I'm the Xcode architect
for the IDE part of Xcode.

00:00:34.860 --> 00:00:38.420
as opposed to the compilers, linker, etc.

00:00:38.420 --> 00:00:43.880
So the motivation for this session
is that Xcode does have a lot of

00:00:43.880 --> 00:00:46.620
facilities to make simple things simple,
right?

00:00:46.620 --> 00:00:48.500
So there's a lot of project templates.

00:00:48.500 --> 00:00:51.520
You can set up a -- even a
fairly complicated thing,

00:00:51.520 --> 00:00:55.010
you know,
Coke application with core data support

00:00:55.010 --> 00:00:57.830
and building a spotlight importer.

00:00:57.830 --> 00:00:57.830
And, you know,

00:00:57.960 --> 00:01:00.560
Actually,
I just realized that I'm mic'd here,

00:01:00.560 --> 00:01:04.040
so why don't I leave that there.

00:01:05.420 --> 00:01:08.800
So,
there are also though a lot of facilities

00:01:08.800 --> 00:01:14.740
in Xcode that you may not know about
for setting up complicated projects,

00:01:14.990 --> 00:01:20.300
for managing that complexity,
and for making it as easy as possible

00:01:20.300 --> 00:01:21.690
and fine-tuning your projects.

00:01:21.780 --> 00:01:24.170
And that's what we're
going to talk about today.

00:01:25.310 --> 00:01:27.210
So what do I mean by a complex project?

00:01:27.460 --> 00:01:32.960
Well, simple one, you know, simple text,
kind of application, basic thing.

00:01:32.960 --> 00:01:36.490
Complicated one typically has
many targets of different kinds.

00:01:36.500 --> 00:01:38.980
You might have a couple of bundles,
a framework, application,

00:01:39.030 --> 00:01:40.090
some kernel extension.

00:01:40.100 --> 00:01:43.890
You might also have
cross-project references,

00:01:43.890 --> 00:01:46.270
and it's good if you do,
if you have a need for them,

00:01:46.400 --> 00:01:48.760
because that's one of the
great ways in which you can

00:01:48.760 --> 00:01:50.600
manage the complexity in Xcode.

00:01:50.600 --> 00:01:52.550
I'll talk more about
that in this session.

00:01:53.220 --> 00:01:55.300
You might have embedded
frameworks and plug-ins.

00:01:55.330 --> 00:01:58.560
Maybe you have 20 bundles that you
want to put inside of your app wrapper,

00:01:58.560 --> 00:02:00.850
or you have a couple of
frameworks you depend on that

00:02:00.870 --> 00:02:01.990
you want to ship with the app.

00:02:03.610 --> 00:02:06.500
Another thing you might do is to
create custom build configurations.

00:02:06.500 --> 00:02:09.090
You probably by now have heard a
lot about build configurations,

00:02:09.130 --> 00:02:11.500
which is a new feature in Xcode 2.1.

00:02:11.700 --> 00:02:15.090
And by default,
you get debug and release configurations.

00:02:15.140 --> 00:02:18.500
And they're set up to be fairly
convenient for default use.

00:02:18.560 --> 00:02:21.050
But you may want to create your own,
and you may have a lot of them.

00:02:22.180 --> 00:02:24.820
Another characteristic of what
I would call a complex project

00:02:24.820 --> 00:02:28.140
that's covered in this session
is shell script build phases.

00:02:28.210 --> 00:02:30.260
Xcode provides a lot of flexibility here.

00:02:30.260 --> 00:02:32.730
You can invoke anything
you can invoke in terminal.

00:02:32.760 --> 00:02:35.150
You can invoke as part
of a build in Xcode.

00:02:35.150 --> 00:02:38.320
And you can also invoke
external build systems,

00:02:38.320 --> 00:02:39.780
such as Make or Ant.

00:02:40.280 --> 00:02:42.300
And there are other
special build requirements.

00:02:42.370 --> 00:02:46.070
I don't actually list Universal as a
characteristic of a complex project and

00:02:46.080 --> 00:02:48.830
why you might want to be in the session,
because that's fairly simple

00:02:48.830 --> 00:02:50.120
in Xcode for the most part.

00:02:50.290 --> 00:02:53.360
Or at any rate,
the complexity lies in making your

00:02:53.430 --> 00:02:55.960
code Indian compatible with both.

00:02:56.050 --> 00:02:57.910
So what we're going to
talk about specifically is,

00:02:57.910 --> 00:02:59.670
first of all,
some project model concepts.

00:02:59.800 --> 00:03:02.090
Many of you understand Xcode's
project model pretty well,

00:03:02.090 --> 00:03:05.430
but there may be some things
that you're not quite clear on,

00:03:05.450 --> 00:03:09.900
or I may be able to provide a
different viewpoint on some of it.

00:03:10.070 --> 00:03:12.210
Then we're going to talk
specifically about targeting

00:03:12.210 --> 00:03:13.620
multiple OS versions with Mac OS X.

00:03:13.850 --> 00:03:16.900
A lot of you have Panther shipping
products on Panther,

00:03:16.900 --> 00:03:20.330
or at least you want to be
able to have your customers

00:03:20.350 --> 00:03:22.370
use Panther and run your app.

00:03:22.530 --> 00:03:24.180
And at the same time,
you want to take advantage

00:03:24.270 --> 00:03:25.110
of Tiger features.

00:03:25.190 --> 00:03:29.660
There's a lot of API that's been talked
about in this week that's Tiger-specific,

00:03:29.660 --> 00:03:32.740
and you certainly want to
use that conditionally.

00:03:33.510 --> 00:03:36.630
We're going to talk a little bit
about creating universal binaries.

00:03:36.740 --> 00:03:38.860
Not a whole lot to talk
about here in terms of Xcode,

00:03:38.860 --> 00:03:40.440
but there are some
nuances you may not know,

00:03:40.440 --> 00:03:42.190
such as per architecture settings.

00:03:42.200 --> 00:03:45.760
We're going to talk a little bit about
keeping track of version numbers.

00:03:45.760 --> 00:03:48.880
That's something that almost any product,
whether it's shareware or commercial,

00:03:48.880 --> 00:03:53.270
would want to use to have some facility
for identifying which version of the

00:03:53.360 --> 00:03:55.610
software that you're dealing with.

00:03:56.420 --> 00:03:59.250
We're going to talk a little bit
about fine-tuning your targets,

00:03:59.250 --> 00:04:01.350
and we'll look in more
detail at what that is.

00:04:01.360 --> 00:04:04.140
But that's some things you may not
know that you can set up to take better

00:04:04.140 --> 00:04:05.840
advantage of Xcode's build system.

00:04:07.370 --> 00:04:09.690
What we won't cover,
we're not going to talk about file

00:04:09.690 --> 00:04:11.960
editing or file navigation here.

00:04:12.020 --> 00:04:13.740
Also not about object modeling.

00:04:13.740 --> 00:04:15.250
There's been a lot of
good sessions on that,

00:04:15.300 --> 00:04:20.940
and I'm sure there'll be some
content provided after the conference

00:04:20.940 --> 00:04:22.000
that you can refer back to.

00:04:22.000 --> 00:04:25.000
We're not going to talk about
project navigation either,

00:04:25.000 --> 00:04:28.570
or class browsing, or debugging,
just to set the expectations.

00:04:28.640 --> 00:04:32.300
This is really project model
and project management.

00:04:33.080 --> 00:04:35.050
Back to what we will cover.

00:04:35.160 --> 00:04:38.320
Let's start on the first one,
project model concepts.

00:04:38.320 --> 00:04:40.880
What's in a project?

00:04:40.880 --> 00:04:42.070
Pretty simple.

00:04:42.390 --> 00:04:47.720
Almost any project has groups,
as we know, file references.

00:04:47.720 --> 00:04:51.500
The only nuance there is these files
are not actually a part of your project.

00:04:51.650 --> 00:04:53.780
They're referenced by the project file.

00:04:53.780 --> 00:04:56.540
Most of you know that already,
so that's not news.

00:04:56.540 --> 00:04:58.850
A project contains targets,
and you can have as many

00:04:58.850 --> 00:04:59.850
targets as you like.

00:04:59.850 --> 00:05:02.080
In fact,
you could have no targets if you like.

00:05:02.100 --> 00:05:02.520
If all you wanted to
do was organize them,

00:05:02.520 --> 00:05:03.060
you could have as many
targets as you like.

00:05:03.080 --> 00:05:05.560
You could organize some files
and be able to search on them.

00:05:05.790 --> 00:05:08.080
But most interesting
projects have targets.

00:05:08.310 --> 00:05:12.000
Executables, that's the Xcode term
for a launch context,

00:05:12.060 --> 00:05:15.980
such as starting working directory
and executable to launch,

00:05:16.170 --> 00:05:17.140
command line arguments.

00:05:17.150 --> 00:05:23.970
This is of interest when you go to debug
your application or even your plug-in.

00:05:24.580 --> 00:05:25.940
Bookmarks.

00:05:25.940 --> 00:05:31.500
We provide a way to organize store
name selections of contents of files.

00:05:31.630 --> 00:05:32.520
And smart groups.

00:05:32.620 --> 00:05:36.410
And this graphic list just nibbed files,
but of course you can put

00:05:36.520 --> 00:05:38.890
anything in your smart group.

00:05:39.340 --> 00:05:43.140
And a complex project also
has a couple of extra things.

00:05:43.140 --> 00:05:44.920
I've sort of souped up
the text editor example,

00:05:44.950 --> 00:05:47.300
or the, sorry,
the sketch example a little bit here.

00:05:47.340 --> 00:05:49.470
I don't know if you can
see this way in the back.

00:05:49.620 --> 00:05:51.170
This room is deeper than I expected.

00:05:51.400 --> 00:05:53.950
But we have externally built
targets there as an example.

00:05:53.960 --> 00:05:57.050
That's again where you can invoke
MakerAnt or any other build system

00:05:57.050 --> 00:05:58.720
you can run from the command line.

00:05:58.880 --> 00:06:00.090
There's unit test targets.

00:06:00.170 --> 00:06:03.690
That's new in Xcode 2.0,
and you can create them

00:06:03.690 --> 00:06:06.880
right from the project menu,
saying new target.

00:06:07.230 --> 00:06:08.970
Custom executables.

00:06:09.270 --> 00:06:10.250
You might not be aware of this.

00:06:10.250 --> 00:06:13.750
When you create an application or a tool,
Xcode automatically creates an

00:06:13.790 --> 00:06:17.530
execution context for you to run that,
and you can configure it by

00:06:17.530 --> 00:06:20.930
adding things like command line
flags and those sorts of things.

00:06:20.940 --> 00:06:24.030
If you are developing, let's say,
a bundle or a framework,

00:06:24.030 --> 00:06:28.000
you may want to specify an external
application that can run your bundle.

00:06:28.000 --> 00:06:30.080
So you can still debug
and run from within Xcode.

00:06:30.670 --> 00:06:33.780
Xcode would then launch
some external tool,

00:06:33.780 --> 00:06:37.170
either in debug mode or
just in normal run mode,

00:06:37.170 --> 00:06:39.060
which would then load your plugin.

00:06:39.060 --> 00:06:41.340
And you can specify command
line arguments and all the

00:06:41.340 --> 00:06:42.580
other facilities there.

00:06:42.580 --> 00:06:43.840
That's pretty straightforward.

00:06:43.840 --> 00:06:46.070
We're not going to go into a
huge amount of detail about that.

00:06:46.080 --> 00:06:48.930
Another thing you may find is
custom language source files.

00:06:48.930 --> 00:06:54.140
Xcode 2.0 and 2.1 let you set up
custom build rules to invoke your

00:06:54.140 --> 00:06:58.200
own tools or your own scripts
on any of your source files.

00:06:58.220 --> 00:07:00.580
And you can produce source code files.

00:07:00.640 --> 00:07:02.860
You can produce source code files,
or you can produce resources.

00:07:02.980 --> 00:07:04.880
And if you produce source code files,
they get fed back in

00:07:04.880 --> 00:07:05.990
the dependency analysis.

00:07:06.000 --> 00:07:10.240
So that's a pretty powerful utility
that not a lot of people use.

00:07:10.240 --> 00:07:12.400
And not everybody needs to use.

00:07:12.400 --> 00:07:15.600
But for those who do,
it's a great facility.

00:07:15.600 --> 00:07:19.750
New in Xcode 2.1 is that you can
preprocess your Info.plist file.

00:07:19.750 --> 00:07:21.820
I'll go into more detail about that.

00:07:21.820 --> 00:07:24.600
We might find that also
in a complex project.

00:07:24.780 --> 00:07:26.600
And references to other projects.

00:07:26.600 --> 00:07:28.540
I touched on this before,
and we're going to talk a little

00:07:28.540 --> 00:07:31.420
bit more in detail about that.

00:07:31.660 --> 00:07:33.530
In Xcode, you can add,
just like you can add

00:07:33.540 --> 00:07:35.280
a reference to a file,
you can add a reference

00:07:35.300 --> 00:07:38.600
to another project,
and there are some advantages to this.

00:07:38.800 --> 00:07:41.970
It lets you divide, obviously,
large projects into manageable pieces.

00:07:42.050 --> 00:07:45.240
Many of you do this anyway
by having separate targets,

00:07:45.280 --> 00:07:48.970
and maybe you have separate
projects that aren't related.

00:07:49.220 --> 00:07:51.100
The advantage here is, of course,
you can localize your

00:07:51.100 --> 00:07:52.120
project configuration.

00:07:52.120 --> 00:07:54.500
If you have some settings
that apply only to one target,

00:07:54.590 --> 00:07:56.840
you just set them on that
target in the project.

00:07:56.990 --> 00:08:01.040
If you have a couple of related
targets that are in the same project,

00:08:01.040 --> 00:08:05.440
you can set settings on the project,
and those targets will share it.

00:08:05.580 --> 00:08:09.750
But you don't have to expose all
the other targets to those settings.

00:08:09.870 --> 00:08:12.870
And, of course,
targets can depend on other projects,

00:08:12.870 --> 00:08:14.550
targets in other projects.

00:08:14.640 --> 00:08:19.120
So you can have a single click of
the hammer to build everything.

00:08:20.110 --> 00:08:25.470
And one sort of subtle effect of this is
to actually reduce SCM merge conflicts.

00:08:25.670 --> 00:08:28.470
As you may know,
Xcode 2.1 has an improved file format

00:08:28.640 --> 00:08:32.990
that is both easier to write and read,
and also to resolve conflicts in.

00:08:33.170 --> 00:08:35.520
But if you edit the same thing,
if you're a large team,

00:08:35.610 --> 00:08:38.130
conflicts do happen when you
check things in and out of

00:08:38.130 --> 00:08:40.000
source code management systems.

00:08:40.130 --> 00:08:45.720
By splitting your projects up,
you can actually avoid some of

00:08:45.720 --> 00:08:45.720
that just through your workflow.

00:08:46.000 --> 00:08:48.660
Let's talk a little
bit more about targets.

00:08:48.660 --> 00:08:51.360
Again, they're the main unit of
organization in the build system,

00:08:51.450 --> 00:08:55.220
and this means,
what I mean by that is that each target

00:08:55.220 --> 00:08:56.890
determines which build system to use.

00:08:56.900 --> 00:08:59.850
You can have an AMP target living
next to a make target living next

00:08:59.850 --> 00:09:02.930
to one of Xcode's native targets,
and that all works together.

00:09:02.940 --> 00:09:04.320
We'll see that later in a demo.

00:09:04.320 --> 00:09:06.720
Each target defines a
single logical product,

00:09:06.720 --> 00:09:10.920
and typically you wouldn't have more than
one target producing the same product.

00:09:10.920 --> 00:09:13.340
You would use build
configurations for that.

00:09:14.580 --> 00:09:16.160
And a target is really like a recipe,
right?

00:09:16.160 --> 00:09:19.370
There's ingredients and
then there's instructions.

00:09:20.240 --> 00:09:23.860
And of course,
targets can depend on other targets.

00:09:23.860 --> 00:09:27.690
So the ingredients of a target are really
the dependencies on the other targets,

00:09:27.690 --> 00:09:31.000
the references to the source
files that go in there.

00:09:31.150 --> 00:09:35.000
They could be products
of other targets in turn.

00:09:35.190 --> 00:09:38.360
And the references to frameworks and
libraries that you want to link against,

00:09:38.460 --> 00:09:39.810
and they too can be products.

00:09:39.860 --> 00:09:44.670
As far as the instructions,
we have the build phases.

00:09:45.000 --> 00:09:49.660
The build phases are available when you
twist open the Xcode icon for a target.

00:09:49.900 --> 00:09:53.450
And here you can really look at the
steps that Xcode is going to run

00:09:53.470 --> 00:09:55.070
when you go to build your target.

00:09:55.080 --> 00:09:56.670
And you can customize that.

00:09:56.670 --> 00:09:59.020
You can add your own shell scripts, etc.

00:09:59.020 --> 00:10:01.280
There are build rules.

00:10:01.280 --> 00:10:05.320
And the graphic here shows opening
the inspector window on the target.

00:10:05.320 --> 00:10:09.840
And as you see, we have a list,
an ordered list of build rules.

00:10:09.860 --> 00:10:11.580
And they get evaluated in order.

00:10:11.580 --> 00:10:15.540
And the first one whose condition
matches is going to run.

00:10:15.540 --> 00:10:19.900
We also have build configurations,
which are new for Xcode 2.1.

00:10:19.900 --> 00:10:21.300
And this is how you can differentiate.

00:10:21.410 --> 00:10:24.800
Although you have one target
producing one logical product,

00:10:24.870 --> 00:10:27.450
you can make it build a debug, release,
test,

00:10:27.450 --> 00:10:29.790
or other kind of variant of your target.

00:10:32.140 --> 00:10:34.340
I want to talk a little bit
about header files in particular,

00:10:34.340 --> 00:10:37.300
because there's often a question I get,
well, should I put my header

00:10:37.430 --> 00:10:38.170
file in the target?

00:10:38.180 --> 00:10:41.420
And I'm highlighting this just because
there's been confusion on this.

00:10:41.420 --> 00:10:44.150
So the question is, well, should you?

00:10:44.160 --> 00:10:46.680
And the answer is really
only add the target,

00:10:46.680 --> 00:10:50.230
only add the headers that are
going to be part of your product.

00:10:50.300 --> 00:10:53.520
So if you're going to put
headers into a framework,

00:10:53.520 --> 00:10:57.140
or if you're going to copy headers to
some place in the file system because

00:10:57.140 --> 00:10:59.910
you're building a static library,
then go ahead and put them in there.

00:10:59.940 --> 00:11:02.700
But there's no need to add the
headers if all you're doing is

00:11:02.700 --> 00:11:07.030
referring to them from source files,
because Xcode sets up automatically

00:11:07.030 --> 00:11:08.820
an access path for that.

00:11:08.820 --> 00:11:13.130
So all headers in the project are
accessible from the source files.

00:11:13.140 --> 00:11:19.010
And Xcode 2.0 and, of course,
2.1 supports recursive search paths.

00:11:19.020 --> 00:11:23.560
And there's a checkbox now you'll see
in the edit sheet for the search paths,

00:11:23.560 --> 00:11:27.630
whether they're header search
paths or library search paths.

00:11:27.640 --> 00:11:29.740
They all have this checkbox,
so you can make them recursive.

00:11:29.940 --> 00:11:31.420
immersive.

00:11:33.720 --> 00:11:36.840
So that's what's in a target,
and then the build system, of course,

00:11:36.840 --> 00:11:37.760
operates on the target.

00:11:37.760 --> 00:11:39.080
Most of you know this.

00:11:39.110 --> 00:11:40.880
Xcode has what's called
a native build system.

00:11:40.880 --> 00:11:44.230
You can also integrate
with external ones.

00:11:44.260 --> 00:11:48.150
Because Xcode's native build
system is internal in the IDE,

00:11:48.170 --> 00:11:52.780
that means that any changes you
make get reflected automatically.

00:11:52.780 --> 00:11:56.390
New in Xcode 2.1 is that there
is a column with a checkmark

00:11:56.570 --> 00:12:00.500
that indicates whether the source
file needs to be built or not.

00:12:01.610 --> 00:12:03.960
That was actually present in
previous versions as well,

00:12:03.960 --> 00:12:06.700
but what's new in 2.1 is you can
actually click on that checkmark,

00:12:06.700 --> 00:12:09.060
and you can touch or untouch
a file automatically.

00:12:12.160 --> 00:12:16.380
So one other thing to note,
with the internal build system,

00:12:16.380 --> 00:12:18.470
it starts compiling.

00:12:18.480 --> 00:12:19.560
Sometimes,
even while you're still typing,

00:12:19.560 --> 00:12:21.650
it starts what we call
predictively compiling.

00:12:21.740 --> 00:12:24.240
This means that when you go to build
after editing a single source file,

00:12:24.330 --> 00:12:26.600
you might not actually
see any compile line,

00:12:26.600 --> 00:12:28.760
or it might happen really quickly.

00:12:28.780 --> 00:12:30.050
Xcode didn't skip your file.

00:12:30.050 --> 00:12:32.690
It actually had just compiled it
in the background and was just

00:12:32.690 --> 00:12:34.070
able to copy the result over.

00:12:34.120 --> 00:12:36.540
So just a small note.

00:12:36.930 --> 00:12:38.930
So, build phases I mentioned before.

00:12:39.160 --> 00:12:45.760
These are the steps that the target goes
through when it builds your product.

00:12:45.830 --> 00:12:47.800
And they're the standard ones.

00:12:47.800 --> 00:12:51.190
You can copy the headers into the
framework and build the source files.

00:12:51.200 --> 00:12:53.670
The custom types are worth calling out.

00:12:53.670 --> 00:12:57.760
If you need to copy files from your
project to an arbitrary location in

00:12:57.760 --> 00:13:02.400
the file system as part of a build,
you can do that with a copy files phase.

00:13:02.400 --> 00:13:04.300
You can configure it to copy anywhere.

00:13:05.090 --> 00:13:08.010
You would use one copy files
phase for each destination

00:13:08.010 --> 00:13:09.480
that you want to copy to.

00:13:09.480 --> 00:13:13.450
You can also run an arbitrary script,
which could in turn do

00:13:13.550 --> 00:13:15.510
anything you'd like it to.

00:13:15.850 --> 00:13:19.050
The build rules,
going through the things that

00:13:19.150 --> 00:13:22.900
are part of a target here,
again, they specify how source

00:13:22.900 --> 00:13:25.140
files are processed,
and the important thing is every

00:13:25.140 --> 00:13:26.860
rule has a condition and an action.

00:13:26.860 --> 00:13:31.510
And if the condition matches,
the action runs, and then the evaluation

00:13:31.510 --> 00:13:32.800
of the rule stops.

00:13:32.880 --> 00:13:37.950
So the first rule that matches is used,
and this lets you shadow other

00:13:37.950 --> 00:13:40.710
rules that occur downstream of it.

00:13:41.980 --> 00:13:46.030
You can use this to, for example,
select GCC 3.3 versus 4.0,

00:13:46.560 --> 00:13:50.670
because you would change
the action from 3.3 to 4.0.

00:13:50.700 --> 00:13:53.190
And as I mentioned,
you can actually make the

00:13:53.220 --> 00:13:55.020
action be any custom script.

00:13:57.090 --> 00:14:00.760
So the condition and action
might be all nib files,

00:14:00.780 --> 00:14:03.060
all C++ source files.

00:14:03.060 --> 00:14:04.380
We have many built-in actions.

00:14:04.500 --> 00:14:06.610
Or you could specify any
file name pattern you want,

00:14:06.650 --> 00:14:08.130
and that uses the shell syntax.

00:14:08.270 --> 00:14:11.390
So star.dat, for example.

00:14:12.590 --> 00:14:15.410
And then the action, of course,
could be either one of the built-in

00:14:15.520 --> 00:14:20.900
compilers or file translator tools,
or it could be any command you want.

00:14:20.970 --> 00:14:22.540
In this case,
we're invoking a command-line

00:14:22.540 --> 00:14:25.080
tool called PLUtil,
which works on property lists,

00:14:25.140 --> 00:14:29.380
and it would convert to
XML whatever the source files

00:14:29.410 --> 00:14:32.400
that get passed through the rule.

00:14:33.140 --> 00:14:35.600
So, just an overview here again.

00:14:35.600 --> 00:14:36.980
Here's the condition.

00:14:37.000 --> 00:14:41.140
In this case, set to just match via a
specific shell pattern.

00:14:41.140 --> 00:14:43.430
The rule is a custom script.

00:14:43.430 --> 00:14:46.440
The script itself could be
anything you can type in terminal.

00:14:46.440 --> 00:14:49.600
So, you can use Perl, you can use Ruby.

00:14:49.600 --> 00:14:53.390
You would typically specify that with
a standard shell notation with the

00:14:53.390 --> 00:14:55.660
first line specifying the translator.

00:14:56.320 --> 00:15:01.860
And then you can define the output files
that will get produced by this rule.

00:15:01.860 --> 00:15:05.280
And this is what Xcode's dependency
graph uses in order to determine

00:15:05.280 --> 00:15:07.030
whether your rule needs to fire.

00:15:07.030 --> 00:15:11.540
If any of the inputs is newer
than any of the outputs,

00:15:11.540 --> 00:15:13.780
then the rule gets run.

00:15:16.780 --> 00:15:18.340
So some useful settings.

00:15:18.400 --> 00:15:22.030
I mentioned that it gets invoked
once for every source file,

00:15:22.080 --> 00:15:24.930
so obviously we need to know
what the input file path is.

00:15:25.100 --> 00:15:31.410
The input file path in this
case is an absolute path.

00:15:31.410 --> 00:15:31.410
And

00:15:32.290 --> 00:15:34.280
There are several variants of
that because you may want to

00:15:34.280 --> 00:15:38.200
split that out into the base,
into the suffix, and various other parts.

00:15:38.200 --> 00:15:42.400
So this is what you would use
in your rule and specify in your

00:15:42.520 --> 00:15:45.830
output files so that you can tell
Xcode what your script works on,

00:15:45.840 --> 00:15:49.000
what it's going to produce,
and where that's going to go.

00:15:49.340 --> 00:15:54.210
And these are all documented very
well in the Xcode documentation.

00:15:54.960 --> 00:15:59.800
There are two special settings
of interest that you may see

00:15:59.800 --> 00:16:01.780
over and over again being used.

00:16:01.840 --> 00:16:05.300
They are Target Builder
and Build Productster.

00:16:05.380 --> 00:16:07.090
Can those of you in the back read this?

00:16:07.140 --> 00:16:08.970
Is this big enough?

00:16:09.640 --> 00:16:11.100
Okay, great.

00:16:11.100 --> 00:16:16.090
And the target builder, it's...

00:16:17.130 --> 00:16:20.990
That refers to the directory
into which the target being

00:16:20.990 --> 00:16:23.140
built is going to put its output.

00:16:23.350 --> 00:16:26.320
So this rule is being
invoked as part of a target,

00:16:26.340 --> 00:16:30.540
and this is the path
where the outputs will go.

00:16:30.540 --> 00:16:32.980
The build productster is related.

00:16:32.990 --> 00:16:37.740
It is a directory that
contains references,

00:16:37.800 --> 00:16:41.280
some links, to all of the products
of the other targets.

00:16:41.390 --> 00:16:44.390
So this is what you would use to
refer to the outputs of any target.

00:16:44.390 --> 00:16:47.860
The two may be different if
you're doing an install build.

00:16:47.860 --> 00:16:52.140
Again, there's a lot of good information
on this in the documentation.

00:16:52.320 --> 00:16:54.830
I don't want to necessarily
teach all the nuances here,

00:16:54.920 --> 00:16:58.480
but mainly highlight it and make
sure that you're aware of these two.

00:16:58.490 --> 00:17:00.420
If you're doing your own
custom shell script rules,

00:17:00.430 --> 00:17:04.220
you'll probably be looking at
using either one or both of these.

00:17:06.540 --> 00:17:10.500
I've talked about build settings a
couple of times during the talk so far,

00:17:10.500 --> 00:17:12.500
and most of you know what those are.

00:17:12.540 --> 00:17:15.500
They're simply the knobs
and switches on a build.

00:17:15.500 --> 00:17:18.150
Most of the time,
you just want to define a certain value.

00:17:18.150 --> 00:17:20.500
My optimization level is 3.

00:17:20.500 --> 00:17:21.320
I want zero link on or off.

00:17:21.330 --> 00:17:23.850
But you can also refer to other settings.

00:17:23.850 --> 00:17:26.590
So this is an example where
the product name actually

00:17:26.590 --> 00:17:29.490
contains the version number,
which is, in this case,

00:17:29.490 --> 00:17:30.990
another build setting.

00:17:32.800 --> 00:17:36.840
I mentioned the shell script build
phases before and the shell script rules.

00:17:36.840 --> 00:17:40.920
We actually pass the build settings as
environment variables to those rules.

00:17:40.920 --> 00:17:45.120
So whether you're using Perl or Ruby or
any of these scripts or the shell,

00:17:45.180 --> 00:17:46.880
you have access to them.

00:17:47.340 --> 00:17:50.690
They can be set at either the
project or the target level.

00:17:50.710 --> 00:17:53.140
This is new in Xcode 2.1.

00:17:53.140 --> 00:17:56.840
In previous versions of Xcode,
the only really useful place to

00:17:56.940 --> 00:18:01.120
set the build settings was in the
target or in the build styles,

00:18:01.130 --> 00:18:02.470
which have now become configurations.

00:18:02.640 --> 00:18:06.340
In Xcode 2.1,
you can actually set it at the project

00:18:06.340 --> 00:18:08.890
level for any or all configurations.

00:18:08.910 --> 00:18:12.910
And this is a pretty powerful
facility because very often,

00:18:13.020 --> 00:18:17.410
many of your targets in the same project,
if not all of them, are going to want to

00:18:17.410 --> 00:18:18.640
share the same setting.

00:18:18.640 --> 00:18:21.870
So the project level is
a good place to set them.

00:18:21.870 --> 00:18:26.510
This implies that there's a precedence
hierarchy among the build settings.

00:18:26.510 --> 00:18:27.420
That's true.

00:18:27.580 --> 00:18:29.310
And let's take a look at that.

00:18:29.360 --> 00:18:32.800
So at the bottom,
we have the environment.

00:18:32.800 --> 00:18:35.990
And this is the typical environment
variables like home and group

00:18:35.990 --> 00:18:37.490
and user and those things.

00:18:37.490 --> 00:18:38.550
You would never set those.

00:18:38.550 --> 00:18:39.430
You would just refer to them.

00:18:39.430 --> 00:18:41.800
But they can be a very
useful thing to refer to.

00:18:41.800 --> 00:18:45.220
There's the built-in build settings,
such as the wrapper suffix

00:18:45.220 --> 00:18:46.980
for an application is .app.

00:18:47.020 --> 00:18:48.620
You would very rarely change that.

00:18:48.620 --> 00:18:51.020
In fact, for .app,
it's not recommended at all.

00:18:51.020 --> 00:18:54.200
The built-ins don't get changed,
but you can override them.

00:18:54.220 --> 00:18:57.350
The application settings come next.

00:18:57.380 --> 00:18:59.340
They really only get changed.

00:18:59.340 --> 00:19:01.460
They only get set through the
preference panel of Xcode.

00:19:01.460 --> 00:19:04.340
When you specify your
build output directory,

00:19:04.370 --> 00:19:05.820
that's changing the application settings.

00:19:05.950 --> 00:19:08.480
When you set a source tree,
which is a facility we

00:19:08.480 --> 00:19:11.140
have in the prefs panel,
then you're also changing

00:19:11.140 --> 00:19:12.640
the application settings.

00:19:12.910 --> 00:19:17.500
These apply to all projects that
you open from your account in Xcode.

00:19:17.910 --> 00:19:20.300
The project settings,
as I mentioned before,

00:19:20.300 --> 00:19:21.640
they're new in Xcode 2.1.

00:19:21.640 --> 00:19:25.200
Here you would set things that are
common to all targets in your project.

00:19:25.200 --> 00:19:28.400
And for many of you,
you'll find that that's actually

00:19:28.400 --> 00:19:30.470
probably the majority of the settings.

00:19:30.470 --> 00:19:33.310
Things like the project version,
you may have a string that

00:19:33.400 --> 00:19:36.370
contains your company name,
you may have header search paths

00:19:36.370 --> 00:19:39.880
that are actually shared or common
to all targets in the project.

00:19:39.880 --> 00:19:43.750
This is a great way to make sure that
all your targets have the same settings,

00:19:43.750 --> 00:19:47.280
is to set it at the project level
and let all the targets inherit.

00:19:49.340 --> 00:19:53.140
The target settings are above that,
meaning that they have higher precedence.

00:19:53.140 --> 00:19:55.970
Here you would set things
specific to the target,

00:19:56.080 --> 00:20:00.270
such as the product name and any special
flags that you may have for that target.

00:20:00.410 --> 00:20:02.810
But again,
I think you'll find that with the

00:20:02.900 --> 00:20:06.810
addition of the project settings,
most settings that you'll want to set are

00:20:06.810 --> 00:20:09.960
actually applied to the project level,
and that's the most

00:20:10.040 --> 00:20:11.810
appropriate place for them.

00:20:12.280 --> 00:20:15.250
Above that, at the very highest level,
we have the command line.

00:20:15.270 --> 00:20:16.400
And what are those settings?

00:20:16.400 --> 00:20:20.740
Well, Xcode has a command line
build tool called Xcode Build.

00:20:20.740 --> 00:20:24.900
And just like with Make or with
any other command line build tool,

00:20:24.900 --> 00:20:27.340
you can pass arguments on the
command line to that tool.

00:20:27.340 --> 00:20:30.970
You can override any build
setting at the command line level.

00:20:30.980 --> 00:20:33.220
You may want to do this if you're
doing a command line build,

00:20:33.220 --> 00:20:35.220
and you say, you know what,
just for this one build,

00:20:35.220 --> 00:20:36.920
I just want to put the
output somewhere else,

00:20:36.920 --> 00:20:39.200
or I want the app to be
called something different.

00:20:39.200 --> 00:20:42.120
You can do that by setting
settings at the command line level.

00:20:42.550 --> 00:20:47.280
This is always empty when
you're running the IDE itself,

00:20:47.280 --> 00:20:48.800
the application.

00:20:49.550 --> 00:20:52.000
And again, the precedence hierarchy,
as we saw there,

00:20:52.140 --> 00:20:56.820
is... Let me go through that.

00:20:57.190 --> 00:20:59.260
Clicked once, too many.

00:20:59.410 --> 00:21:01.880
What I wanted to show and
emphasize is that the highest

00:21:02.000 --> 00:21:04.970
precedence is at the top,
and the lowest precedence

00:21:04.970 --> 00:21:06.490
is at the bottom.

00:21:06.610 --> 00:21:10.260
So, any setting defined in a
higher tier can override,

00:21:10.260 --> 00:21:13.670
or will override,
settings at the lower level.

00:21:14.210 --> 00:21:17.510
And we'll talk a little bit
more about the macro expansion.

00:21:17.710 --> 00:21:19.450
Again, references to other settings.

00:21:19.450 --> 00:21:24.280
And the macro expansion,
you can refer to anything that's

00:21:24.370 --> 00:21:25.940
in a higher or lower tier.

00:21:25.940 --> 00:21:28.540
It's going to get
evaluated just the same.

00:21:28.540 --> 00:21:30.910
So you can have a setting
at the project level,

00:21:30.910 --> 00:21:34.800
and then it can refer to another setting
that's defined at the target level,

00:21:34.800 --> 00:21:39.020
and that each target can then customize
what the project setting refers to.

00:21:39.520 --> 00:21:42.460
It's also important to note that,
just like in Make,

00:21:42.460 --> 00:21:45.890
the value of the expansion can
be different at different times.

00:21:45.890 --> 00:21:48.930
The best example of this
is a command line rule,

00:21:48.930 --> 00:21:51.470
sorry, a build rule,
where you invoke your

00:21:51.780 --> 00:21:53.440
own command line tool.

00:21:53.440 --> 00:21:56.760
And let's say you have 20 source
files with a custom suffix.

00:21:56.760 --> 00:21:59.140
The rule gets invoked 20 times.

00:21:59.140 --> 00:22:04.150
The build setting input file path
refers to something different each time.

00:22:05.740 --> 00:22:08.600
There's a special case
when you override settings.

00:22:08.600 --> 00:22:15.490
You can actually refer to the
sort of magic setting $_VALUE,

00:22:15.990 --> 00:22:19.310
and what this is going to do is it's
going to substitute the overridden value.

00:22:19.600 --> 00:22:25.070
So in this way you can use inheritance
of the build settings to set up a

00:22:25.070 --> 00:22:28.700
fairly sophisticated macro expansion.

00:22:30.030 --> 00:22:33.290
And it's important to point out,
references to undefined

00:22:33.290 --> 00:22:37.900
macros are elided completely,
so they just become empty.

00:22:37.900 --> 00:22:42.200
You can use this to your
advantage in order to include,

00:22:42.200 --> 00:22:43.880
for example, conditional flags.

00:22:43.880 --> 00:22:47.410
So if you want the flag,
you'll define the setting,

00:22:47.460 --> 00:22:50.650
and if the setting is undefined,
then the flag just doesn't

00:22:50.650 --> 00:22:52.360
appear on the command line.

00:22:53.370 --> 00:22:57.540
Build settings are arranged
into build configurations.

00:22:57.560 --> 00:22:59.140
As you probably heard
earlier in the week,

00:22:59.190 --> 00:23:03.100
each configuration has a name,
and there's no restriction except that

00:23:03.100 --> 00:23:04.990
it has to be unique within the project.

00:23:05.030 --> 00:23:09.740
And there are an arbitrary number
of build settings that you can

00:23:10.020 --> 00:23:12.300
define in the configuration.

00:23:13.070 --> 00:23:18.240
And I should point out, actually,
you can define, you can override Xcode's

00:23:18.240 --> 00:23:20.740
built-in build settings,
or you can make up your

00:23:20.740 --> 00:23:23.260
entirely own names that you use
from your own shell scripts.

00:23:23.260 --> 00:23:28.820
New projects, by default,
have a debug and release configuration,

00:23:28.820 --> 00:23:33.600
and upgraded projects from
Xcode 2.0 and earlier also

00:23:33.950 --> 00:23:35.520
have a default configuration.

00:23:35.540 --> 00:23:43.030
And that corresponds to the target's own
settings without any of the build styles,

00:23:43.060 --> 00:23:45.910
because by definition,
an upgraded project comes from an earlier

00:23:45.910 --> 00:23:48.710
version of Xcode that had build styles.

00:23:49.420 --> 00:23:51.830
You can, of course,
have as many configurations as you want.

00:23:52.010 --> 00:23:53.480
You can name them anything you want.

00:23:53.610 --> 00:23:57.480
You can't delete the last configuration,
but because you probably want some

00:23:57.480 --> 00:24:00.760
kind of settings for your targets,
that's probably not a big restriction.

00:24:00.800 --> 00:24:03.500
You can really add as many as you like.

00:24:04.930 --> 00:24:10.370
One way to think about how build
configurations get used is to think

00:24:10.430 --> 00:24:15.000
of the name of the configuration as
a method interface or a protocol,

00:24:15.080 --> 00:24:18.500
and to think of the actual
settings in a build configuration

00:24:18.920 --> 00:24:20.100
as the implementation.

00:24:20.280 --> 00:24:22.900
So this is really polymorphism
for your project file,

00:24:22.900 --> 00:24:23.440
right?

00:24:23.440 --> 00:24:27.950
It's kind of like the OOP where
you can send a display or draw

00:24:27.950 --> 00:24:31.940
yourself message to any object,
and it does something

00:24:31.940 --> 00:24:35.260
appropriate for its kind,
for what that object is.

00:24:35.260 --> 00:24:36.720
It's the same thing here.

00:24:37.070 --> 00:24:39.590
When you build with the
debug configuration,

00:24:39.680 --> 00:24:44.040
you're not actually telling each
target necessarily what flags to use.

00:24:44.040 --> 00:24:46.610
You're saying to each target
to use its debug configuration.

00:24:46.620 --> 00:24:48.520
And it's up to the target
to determine what that is,

00:24:48.610 --> 00:24:50.230
or what you've configured in the target.

00:24:50.280 --> 00:24:53.520
So you could have a framework
target next to a bundle target

00:24:53.530 --> 00:24:55.280
and an application target.

00:24:55.280 --> 00:24:58.270
Each of them has a unique
notion of what debug means,

00:24:58.270 --> 00:25:00.370
but they all can build
themselves for debugging.

00:25:00.380 --> 00:25:05.120
And this graphic just illustrates
the example of a debug release

00:25:05.120 --> 00:25:09.850
configuration in a project,
and the targets in the project have

00:25:09.850 --> 00:25:15.610
their own configurations that inherit
from the project configurations.

00:25:15.640 --> 00:25:19.510
So settings at the project level.

00:25:21.870 --> 00:25:25.260
Here, the second setting from the top,
if you can read that,

00:25:25.380 --> 00:25:27.640
is the C language dialect.

00:25:27.640 --> 00:25:30.690
And in this example,
we can have two targets that

00:25:30.690 --> 00:25:32.400
are both in the project.

00:25:32.400 --> 00:25:36.440
They are sort of above the project level,
so they inherit from the project.

00:25:36.520 --> 00:25:41.450
What I'm going to do is,
in the background there, change.

00:25:41.460 --> 00:25:44.500
It's hard to see,
but the circled setting was

00:25:44.580 --> 00:25:49.040
changed to be the GNU 99 standard
from being the compiler default.

00:25:49.040 --> 00:25:53.990
And we only changed it in the project
both of the targets inherited.

00:25:56.900 --> 00:26:00.330
Another facility in Xcode 2.1 is
that you can actually create a

00:26:00.330 --> 00:26:02.620
style sheet or an XC config file.

00:26:02.620 --> 00:26:04.920
It's just a text file
that has settings in it.

00:26:04.950 --> 00:26:09.400
And this lets you share your settings
even beyond the borders of the project.

00:26:09.400 --> 00:26:13.070
And you can have two dozen
projects that all refer to the same

00:26:13.070 --> 00:26:15.530
standardized configuration file.

00:26:15.860 --> 00:26:17.770
You use a .XC config suffix.

00:26:17.770 --> 00:26:19.700
There is a file template for it.

00:26:19.840 --> 00:26:22.000
So you can just say new file
and create a config file.

00:26:22.000 --> 00:26:24.720
It's at the very bottom of
the sheet that comes up.

00:26:24.760 --> 00:26:27.600
You include that in your project,
and you can set any kind of

00:26:27.600 --> 00:26:30.160
a value you want in there,
any of the settings that you

00:26:30.160 --> 00:26:31.700
can define in the inspector.

00:26:31.800 --> 00:26:35.450
You can actually prototype,
as you may have seen in an earlier demo,

00:26:35.450 --> 00:26:40.070
by just selecting a bunch of the settings
and dragging them into the project file.

00:26:41.710 --> 00:26:44.480
And multiple targets can share
the same configuration file,

00:26:44.480 --> 00:26:47.400
and then of course you can check
them into a source code management

00:26:47.410 --> 00:26:50.040
system or anything like that,
reuse them across the projects.

00:26:50.040 --> 00:26:54.160
So, to revisit this diagram,
this is where we left off with

00:26:54.300 --> 00:26:58.440
our inheritance hierarchy,
but that's actually not the whole truth,

00:26:58.440 --> 00:26:58.940
right?

00:26:58.940 --> 00:27:01.030
If we just focus on the
targets and settings,

00:27:01.030 --> 00:27:02.940
I just talked about XC config files.

00:27:03.830 --> 00:27:08.230
Each of these two levels can also
optionally depend on an XC config file.

00:27:08.230 --> 00:27:13.220
This means that in addition to what you
define at the project settings level,

00:27:13.220 --> 00:27:17.910
right underneath that would be what
you define in the configuration file.

00:27:17.920 --> 00:27:21.720
So you can still define anything you
want in the project settings level,

00:27:21.780 --> 00:27:24.360
override what was in
that configuration file,

00:27:24.360 --> 00:27:30.200
but you could consider these two parts
of the stack to be double layered.

00:27:30.200 --> 00:27:33.720
And the bottom layer for each one
is the chosen configuration file.

00:27:33.720 --> 00:27:36.650
If any,
and the top layer is what you actually

00:27:36.650 --> 00:27:39.130
set right there in the inspector.

00:27:42.680 --> 00:27:46.870
So, in many cases,
you'll be able to set settings common

00:27:46.870 --> 00:27:48.570
to all projects in your config file.

00:27:48.580 --> 00:27:51.920
In other cases, you'll be able to set
settings at the project level.

00:27:51.920 --> 00:27:54.860
And what I want to do, though,
you may have a question, well,

00:27:54.860 --> 00:27:58.000
what if I select all my targets
and just set settings on those?

00:27:58.000 --> 00:27:59.310
You can certainly do that.

00:27:59.360 --> 00:28:01.910
If you end up setting the
same setting on all targets,

00:28:01.910 --> 00:28:04.710
you probably want to consider
whether you shouldn't do that

00:28:04.860 --> 00:28:07.350
in the project level instead,
which might be better,

00:28:07.370 --> 00:28:08.720
or in an XC config file.

00:28:10.940 --> 00:28:14.210
I wanted to make sure, though,
that the relationship between

00:28:14.210 --> 00:28:16.980
the different configurations and
the different targets is clear.

00:28:16.980 --> 00:28:19.420
So, I want to illustrate that.

00:28:19.420 --> 00:28:23.870
I'm just going to use the GLUT example,
which is the GL Utilities Toolkit

00:28:23.880 --> 00:28:26.380
from Developer Examples folder.

00:28:26.380 --> 00:28:28.810
And this has a bunch
of interesting targets.

00:28:28.840 --> 00:28:33.610
I've renamed the development deployment
configurations to be debug release,

00:28:33.610 --> 00:28:36.040
and I've added a test configuration.

00:28:37.880 --> 00:28:39.540
So,
this is an example with about 10 targets,

00:28:39.620 --> 00:28:41.820
I think, and three configurations.

00:28:41.940 --> 00:28:45.010
What happens if we select
just the one target,

00:28:45.080 --> 00:28:48.820
Atlantis target,
and then the debug configuration?

00:28:48.910 --> 00:28:50.740
Then we're operating on this box.

00:28:51.050 --> 00:28:53.510
Each of the boxes is a configuration.

00:28:53.510 --> 00:28:55.700
Each target, in this case,
is three configurations.

00:28:55.700 --> 00:28:57.970
They all have the same
name in each target,

00:28:57.970 --> 00:29:00.850
but each target has a unique
definition of what it means

00:29:00.850 --> 00:29:02.620
to be a debug configuration.

00:29:05.260 --> 00:29:06.750
So,
I'm going to change now so that I select

00:29:06.900 --> 00:29:10.060
the release configuration in the pop-up,
but I still have just

00:29:10.120 --> 00:29:11.580
the one target selected.

00:29:11.580 --> 00:29:13.540
Now I'm editing this box.

00:29:13.820 --> 00:29:17.170
And there's a special menu
item called All Configurations,

00:29:17.170 --> 00:29:19.510
and that edits all
configurations for that target.

00:29:19.510 --> 00:29:20.810
Pretty simple.

00:29:20.810 --> 00:29:24.980
So now, if I select a bunch of targets,
I can do multiple selection,

00:29:24.980 --> 00:29:29.400
and I'm still editing all configurations,
so the shaded boxes are now

00:29:29.400 --> 00:29:30.980
the ones that get edited.

00:29:30.980 --> 00:29:33.810
If I set a setting,
let's say turn off zero link,

00:29:33.810 --> 00:29:36.940
then that's going to affect
all of these configurations

00:29:36.940 --> 00:29:38.810
and all the selected targets.

00:29:40.120 --> 00:29:43.010
And again, if I switch back to a
single configuration,

00:29:43.010 --> 00:29:45.680
then only that column,
only that configuration in

00:29:45.680 --> 00:29:47.240
each target is affected.

00:29:47.240 --> 00:29:50.560
Now, of course,
I can extend this to select all targets.

00:29:50.560 --> 00:29:54.020
I still have just the release
configuration selected.

00:29:55.390 --> 00:29:59.400
And I can select all targets,
all configurations,

00:29:59.400 --> 00:30:01.740
and if I set any setting now,
it would get set for all

00:30:01.740 --> 00:30:03.510
of these configurations.

00:30:03.540 --> 00:30:06.570
Of course, in this case,
you really should consider

00:30:06.580 --> 00:30:10.220
whether it might not be better
to set it at the project level.

00:30:12.760 --> 00:30:17.310
Okay, so that was a fairly brief recap of
some of the project model concepts

00:30:17.480 --> 00:30:21.420
that are important to keep in mind
as you're configuring your projects.

00:30:21.540 --> 00:30:26.790
These concepts permeate all of the
configuration of projects you'll do.

00:30:26.800 --> 00:30:29.400
We're going to shift gears a little
bit and talk about some specific tasks,

00:30:29.400 --> 00:30:33.560
some of which are particularly
interesting in light of some of the

00:30:33.560 --> 00:30:36.670
announcements made now on Monday.

00:30:36.860 --> 00:30:39.440
First,
we're going to talk about targeting

00:30:40.060 --> 00:30:41.840
multiple versions of the OS.

00:30:42.030 --> 00:30:43.190
We do this with SDKs.

00:30:43.200 --> 00:30:44.800
SDKs are software development kits.

00:30:44.800 --> 00:30:46.560
Most of you are familiar with that.

00:30:46.580 --> 00:30:53.800
They provide build-time access to the
API for a particular release of Mac OS X.

00:30:53.800 --> 00:31:00.340
And so, again, you don't need to ship
an SDK to run your app.

00:31:00.520 --> 00:31:04.050
You would build against an
SDK that matches your target OS.

00:31:04.060 --> 00:31:11.420
So this lets you build against,
for example, Mac OS 10.4, use 10.4 API,

00:31:12.080 --> 00:31:15.950
and then you could still run your app
all the way back to 10.2 if you're

00:31:15.950 --> 00:31:21.260
careful to check conditionally for any
API differences between 10.2 and 10.4.

00:31:24.290 --> 00:31:28.490
I wanted to point out that you
actually already have made this choice,

00:31:28.670 --> 00:31:29.980
or are about to make this choice.

00:31:29.980 --> 00:31:34.700
Your use of API actually implicitly
determines which OS you're going

00:31:34.710 --> 00:31:36.710
to be able to run on and not.

00:31:36.780 --> 00:31:40.110
If you unconditionally use 10.4 API,
then you're only going to

00:31:40.110 --> 00:31:41.790
be able to run on 10.4.

00:31:41.800 --> 00:31:45.400
The advantage of an SDK is it
makes that choice explicit,

00:31:45.400 --> 00:31:51.350
so that you really think about and
sort of declare up front to Xcode that,

00:31:51.350 --> 00:31:55.540
yes, I'm going to use 10.4 API,
but I want to make sure that

00:31:55.540 --> 00:31:58.340
I only rely on 10.2 API.

00:31:58.340 --> 00:32:03.620
You do this by, you specify,
so there's two bounds, right?

00:32:03.680 --> 00:32:04.620
The lower bound, the upper bound.

00:32:04.620 --> 00:32:06.390
The SDK specifies the upper bound.

00:32:06.390 --> 00:32:09.330
Mac OS X deployment target
is the minimum required OS,

00:32:09.330 --> 00:32:10.810
that's the lower bound.

00:32:11.800 --> 00:32:13.280
Um...

00:32:13.900 --> 00:32:17.700
you have some rationale why
by default you build against

00:32:17.820 --> 00:32:19.460
whatever's installed in your machine.

00:32:19.480 --> 00:32:21.080
This is inherently kind of unstable.

00:32:21.080 --> 00:32:24.670
If you're running 10.3 and then
your colleague is running 10.4,

00:32:24.730 --> 00:32:26.550
if you give him your project,
he's now building

00:32:26.550 --> 00:32:30.040
against the 10.4 headers,
there may be different results.

00:32:30.040 --> 00:32:33.450
Going backwards is even worse,
because now it won't build at all,

00:32:33.460 --> 00:32:36.880
most likely if you're using 10.4 APIs.

00:32:37.060 --> 00:32:43.120
So this provides some insurance
that's gonna be stable over time,

00:32:43.120 --> 00:32:44.980
because we don't change the SDKs.

00:32:45.020 --> 00:32:50.060
The 10.2.8 SDK is the same now
as it was when it came out,

00:32:50.090 --> 00:32:52.690
because that's a constant in time.

00:32:52.750 --> 00:32:57.280
So this also lets Xcode warn about
accidentally using API that's too new,

00:32:57.280 --> 00:33:00.410
and also there's information
there about deprecated API.

00:33:00.590 --> 00:33:04.250
So you can at least be aware that
you're using deprecated API if

00:33:04.250 --> 00:33:09.190
some of the ones you're using are
deprecated and you can switch over.

00:33:10.770 --> 00:33:11.700
What's in an SDK?

00:33:11.700 --> 00:33:16.120
Mostly you don't need to know this,
but it might be useful just

00:33:16.230 --> 00:33:18.970
to understand how they fit in.

00:33:18.980 --> 00:33:21.430
There's a sparse directory
of the developer tools,

00:33:21.440 --> 00:33:24.210
so they contain the headers,
and they're the same as the

00:33:24.220 --> 00:33:27.990
headers for the developer tools
for the OS you're targeting.

00:33:28.000 --> 00:33:34.930
So the Mac OS X.8 headers are as
they were with those developer tools.

00:33:35.820 --> 00:33:37.350
There's dynamic library stubs.

00:33:37.390 --> 00:33:41.660
There's not actually the runtime
code from 10.2.8 in this example,

00:33:41.660 --> 00:33:43.950
but there's just the glue
that lets you bind to it.

00:33:43.980 --> 00:33:46.530
The static libraries are
there with their code,

00:33:46.570 --> 00:33:50.780
so that if you link against the
static library for the 10.2.8 SDK,

00:33:50.780 --> 00:33:54.040
you get the 10.2.8
code into your library.

00:33:54.040 --> 00:33:57.230
The idea is that it would be as if
you had taken your code back to a

00:33:57.230 --> 00:34:00.210
10.2.8 machine and compiled it there.

00:34:02.800 --> 00:34:06.830
There are no compilers or other
command line tools in the SDKs,

00:34:07.010 --> 00:34:10.480
so you'll need to be sure to configure
to use the right compiler version

00:34:10.600 --> 00:34:11.940
for the SDK that you're targeting.

00:34:11.940 --> 00:34:19.970
So 10.4, for example,
does not target Panther.

00:34:20.830 --> 00:34:23.470
An example of using SDKs,
let's say you wanted to

00:34:23.470 --> 00:34:26.250
build against 10.4 API,
take advantage of that,

00:34:26.380 --> 00:34:30.900
but then deploy on 10.2,
only require 10.2.

00:34:30.900 --> 00:34:34.020
In this case,
you specify 10.4 as the SDK,

00:34:34.020 --> 00:34:38.680
and set a setting in Inspector called
Mac OS X Deployment Targeted 10.2.

00:34:38.680 --> 00:34:41.610
So if we look at our
timeline of OS releases here,

00:34:41.650 --> 00:34:45.500
we had 10.0 way back when,
seems like forever ago,

00:34:45.500 --> 00:34:48.560
and then all the way up to 10.4,
and we're probably going to be

00:34:48.560 --> 00:34:51.480
releasing some other version of
Mac OS X at some point in the future,

00:34:51.480 --> 00:34:52.800
so I just put a question mark there.

00:34:52.800 --> 00:34:54.880
Not pre-announcing anything.

00:34:54.880 --> 00:34:58.870
What you would do is to, in fact,
I think that may have been

00:34:58.890 --> 00:35:01.820
announced in the keynote,
actually.

00:35:01.820 --> 00:35:05.240
So, you specify 10.4 as the SDK.

00:35:05.240 --> 00:35:07.800
You do this in the project inspector.

00:35:09.620 --> 00:35:14.130
You specify the
Mac OS X deployment as the minimum.

00:35:14.220 --> 00:35:18.710
This lets you unconditionally
use any API up to 10.2.

00:35:19.380 --> 00:35:21.940
And of course,
be careful if it says it's deprecated,

00:35:21.940 --> 00:35:23.540
you'll want to look at that.

00:35:23.600 --> 00:35:27.400
You can unconditionally
use API up to 10.2.

00:35:27.400 --> 00:35:31.250
You can conditionally use API up to 10.4.

00:35:31.330 --> 00:35:35.740
This means that you'll have to check
if the function pointers are nil.

00:35:36.410 --> 00:35:39.380
And do not use future APIs in that.

00:35:39.760 --> 00:35:42.640
This is kind of uninteresting
right now because 10.4 is new,

00:35:42.890 --> 00:35:46.850
but assuming you say my SDK is 10.3,
that really prevents

00:35:46.960 --> 00:35:50.200
you from using 10.4 API,
if that's the choice you made.

00:35:50.310 --> 00:35:53.380
And Xcode will help by enforcing that.

00:35:54.470 --> 00:35:57.160
A couple of notes on debugging with SDKs.

00:35:57.210 --> 00:36:00.810
Most of the issues you'll
find in practice are actually

00:36:00.810 --> 00:36:04.560
problems that occur both on,
let's say, 10.4 and 10.3.

00:36:04.560 --> 00:36:07.480
If you do have specific issues
that only occur on one OS,

00:36:07.480 --> 00:36:10.360
you can use Xcode's remote
debugging facilities.

00:36:10.360 --> 00:36:13.380
You would have another
machine that has the developer

00:36:13.390 --> 00:36:17.180
tools for the older release,
and you would set up your Xcode

00:36:17.240 --> 00:36:20.140
2.1 machine to connect to that.

00:36:20.570 --> 00:36:24.420
You do that in the executable inspector,
which defines the launch

00:36:24.420 --> 00:36:25.790
context for your app.

00:36:25.860 --> 00:36:30.550
And there's a checkbox there you can
specify a remote machine when you debug.

00:36:33.480 --> 00:36:37.000
So let's switch gears a little bit,
talk about the universal binaries.

00:36:37.210 --> 00:36:43.340
Related to SDKs, of course,
Xcode fully supports building for Intel.

00:36:43.340 --> 00:36:45.860
As you know,
you can create universal binaries,

00:36:45.860 --> 00:36:49.440
and they contain both
PowerPC and Intel code.

00:36:49.440 --> 00:36:51.670
And for many projects,
it really is as simple as

00:36:51.670 --> 00:36:54.790
clicking this checkbox,
as many of you have found in the labs.

00:36:55.700 --> 00:36:59.690
You may find that you'll want to
set architecture-specific settings.

00:36:59.690 --> 00:37:04.260
Xcode currently has some
of the build settings have

00:37:04.260 --> 00:37:07.620
architecture-specific forms,
and the way you set these are to

00:37:07.620 --> 00:37:13.000
add them to the inspector using
the notation I'll describe here.

00:37:13.000 --> 00:37:15.340
Keep in mind, again,
if you have a setting,

00:37:15.340 --> 00:37:18.880
even if it's architecture-specific,
if it's Intel-only setting,

00:37:18.930 --> 00:37:21.470
if it applies to all targets,
you'll want to set it

00:37:21.590 --> 00:37:22.920
at the project level.

00:37:25.450 --> 00:37:30.070
The general form of these
settings is the same basic setting

00:37:30.070 --> 00:37:32.700
name without the architecture,
and then an underscore,

00:37:32.790 --> 00:37:33.860
and then the architecture name.

00:37:33.860 --> 00:37:38.870
Now, for historical reasons,
the Intel architecture is called i386.

00:37:38.940 --> 00:37:41.960
As you see, this doesn't mean we
actually support a 386 chip.

00:37:41.980 --> 00:37:45.840
This means this is just the
name of the architecture,

00:37:45.840 --> 00:37:49.100
and the chip model
under that is separate.

00:37:49.100 --> 00:37:52.580
So in this case,
if you have other C flags,

00:37:52.580 --> 00:37:56.750
you can have other
C flags under bar i386.

00:37:56.950 --> 00:37:59.490
Incidentally,
the same works for PowerPC 64.

00:37:59.830 --> 00:38:04.210
That's considered a third architecture
from the build system's perspective.

00:38:05.690 --> 00:38:08.380
You can also specify different
SDK for different architectures.

00:38:08.430 --> 00:38:14.210
If you want to target
Mac OS 10.3 and only use X.3 API,

00:38:14.210 --> 00:38:18.080
that's great for PowerPC,
but for your Intel binaries,

00:38:18.080 --> 00:38:21.040
you're going to need to
build against the X.4 SDK.

00:38:21.160 --> 00:38:25.180
So what you would do here is
to specify your primary SDK,

00:38:25.300 --> 00:38:28.720
the X.3,
it would be in the General tab of

00:38:28.720 --> 00:38:31.510
the Project Inspector as usual.

00:38:32.660 --> 00:38:36.920
And then, in the target,
you would define an SDK with

00:38:36.920 --> 00:38:41.090
the architecture name in it,
and that would override the

00:38:41.090 --> 00:38:43.280
one inherited from the project.

00:38:44.070 --> 00:38:50.540
So this shows an example of
using an I3D6-specific SDK 10f4u

00:38:50.560 --> 00:38:53.080
that overrides the 10.3 one.

00:38:56.410 --> 00:39:00.460
And some of the settings, as I mentioned,
are configurable per architecture.

00:39:00.700 --> 00:39:02.370
Some of the more important
ones are SDK root.

00:39:02.410 --> 00:39:08.100
I use the notation $ to indicate
the architecture that's being

00:39:08.100 --> 00:39:09.500
compiled for at that time.

00:39:09.500 --> 00:39:13.560
When you build for Universal,
Xcode takes each architecture

00:39:13.560 --> 00:39:17.500
and iterates through the
target for that architecture.

00:39:17.690 --> 00:39:22.540
So that the lowercase a-r-c-h variable,
or the build setting,

00:39:22.580 --> 00:39:24.320
will actually be set to
the architecture that it's

00:39:24.400 --> 00:39:25.700
compiling for in that iteration.

00:39:26.320 --> 00:39:30.140
And of course,
if you only choose one of the checkboxes

00:39:30.190 --> 00:39:34.600
in the sheet for architectures,
it won't iterate.

00:39:34.650 --> 00:39:38.090
It will just go once through it.

00:39:39.680 --> 00:39:42.600
It's important to note, as I mentioned,
that the architecture-specific

00:39:42.600 --> 00:39:46.500
version of the SDK overrides
the non-architecture version.

00:39:46.500 --> 00:39:49.100
It really doesn't make
sense to have both.

00:39:49.100 --> 00:39:51.130
But settings, the flags, are additive.

00:39:51.180 --> 00:39:55.320
So first the common settings would come,
and then the architecture-specific

00:39:55.320 --> 00:39:59.130
settings when we're constructing
the command line for the compiler.

00:39:59.130 --> 00:40:00.970
So this is very useful to know.

00:40:02.020 --> 00:40:06.200
I mentioned that in more
specific detail on this slide.

00:40:06.200 --> 00:40:09.570
If you have generic flags to set,
let's say this warning sequence point,

00:40:09.610 --> 00:40:12.010
I managed to find one warning
that you could set in GC that

00:40:12.010 --> 00:40:14.580
you couldn't set from the GUI,
so here's one of them.

00:40:14.620 --> 00:40:18.500
And then you have
additional flags for I3-D6.

00:40:18.500 --> 00:40:23.160
The command line that you get out
of that would have the generic ones

00:40:23.160 --> 00:40:27.290
first that apply to all architectures,
and then the I3-D6

00:40:27.340 --> 00:40:28.860
specific ones after that.

00:40:29.240 --> 00:40:33.840
That's useful because very often
you can negate or invert the

00:40:33.840 --> 00:40:38.500
selection made in a previous
setting by using a later setting,

00:40:38.500 --> 00:40:41.100
so you can actually override
on the GCC command line.

00:40:45.010 --> 00:40:47.680
Let's talk a little bit
about version numbers.

00:40:47.680 --> 00:40:50.020
So Xcode supports project versioning.

00:40:50.110 --> 00:40:53.860
There is a pop-up that lets you
choose Apple generic versioning.

00:40:53.860 --> 00:40:57.550
Most software products that you build,
whether they're shareware

00:40:57.760 --> 00:41:00.930
or anything at all,
they have at least a build number.

00:41:00.930 --> 00:41:03.930
Some of them also have a
marketing version number.

00:41:03.930 --> 00:41:07.910
And there's a command line tool you
may not know about called AGV tool,

00:41:07.910 --> 00:41:11.750
stands for Apple generic versioning tool,
that helps with that.

00:41:11.800 --> 00:41:14.880
And it supports project versioning.

00:41:14.900 --> 00:41:16.400
It supports both build
and marketing versions.

00:41:16.400 --> 00:41:20.480
So the way you would configure this
is you would configure the project

00:41:20.480 --> 00:41:22.320
to use Apple generic versioning.

00:41:22.320 --> 00:41:25.320
The version number can
be anything you define.

00:41:25.320 --> 00:41:28.230
And in this case,
I'm setting it at the project level,

00:41:28.360 --> 00:41:30.760
as you notice,
because the version number is

00:41:30.760 --> 00:41:34.290
typically inherited by all targets,
or you typically want it to

00:41:34.290 --> 00:41:35.990
be the same for all targets.

00:41:36.030 --> 00:41:40.980
And you could have it be the
build number or marketing number.

00:41:40.980 --> 00:41:45.550
Then from the command line,
you can use AGV tool for example,

00:41:45.710 --> 00:41:51.540
as part of a nightly build to increment
the build number or some other script.

00:41:51.540 --> 00:41:54.360
And it operates on the project,
and it can set the marketing

00:41:54.360 --> 00:41:55.540
or the build number.

00:41:55.540 --> 00:42:01.320
You can configure it to automatically
check in changes into CVS.

00:42:01.320 --> 00:42:04.240
And as you know,
Xcode supports subversion

00:42:04.240 --> 00:42:05.860
and Perforce as well.

00:42:05.860 --> 00:42:10.270
So we'll probably end up updating
the script for that as well.

00:42:10.780 --> 00:42:13.330
It's best to quit the
project before running Xcode,

00:42:13.390 --> 00:42:16.170
because right now the tool
actually modifies the project file.

00:42:16.170 --> 00:42:19.100
Sorry,
I think I said before running Xcode,

00:42:19.100 --> 00:42:23.180
I meant before running AGV tool,
and then have AGV tool operate on it.

00:42:23.280 --> 00:42:26.500
So it's really mostly meant from
a batch processing perspective.

00:42:26.700 --> 00:42:30.400
You can, of course,
use AppleScript also to set the build

00:42:30.410 --> 00:42:32.700
setting that encodes the version number.

00:42:32.700 --> 00:42:35.700
So that's a way to do it if you
want to do it from within the IDE.

00:42:35.700 --> 00:42:38.690
And there's more info
in the documentation,

00:42:38.700 --> 00:42:41.700
but I wanted to raise that
as something to be aware of.

00:42:41.730 --> 00:42:44.430
You might get good usage out of that,
good mileage.

00:42:44.460 --> 00:42:48.000
Some of the options,
it supports a fair amount of options,

00:42:48.000 --> 00:42:52.440
and I encourage you to look at the
docs for more information about that.

00:42:55.450 --> 00:42:59.400
A couple of things you
can do to your targets.

00:42:59.420 --> 00:43:02.940
One of them is to set
up precompiled headers.

00:43:02.940 --> 00:43:05.750
This is a really important
thing for your build time,

00:43:05.750 --> 00:43:09.060
and I'll talk a little bit about that.

00:43:09.060 --> 00:43:12.260
Also, Xcode 2.1 supports
processing info plists.

00:43:12.260 --> 00:43:15.510
So, precompiled headers,
usually most of the code

00:43:15.510 --> 00:43:18.290
seen by the compiler,
if you're not using precompiled headers,

00:43:18.290 --> 00:43:19.610
is very redundant.

00:43:19.720 --> 00:43:21.150
It usually comes from headers.

00:43:21.280 --> 00:43:24.330
It comes from headers that are
typically the system headers.

00:43:24.330 --> 00:43:26.010
The Cocoa headers are very popular.

00:43:26.010 --> 00:43:28.920
The compiler sees those over and
over and over and over again,

00:43:28.960 --> 00:43:31.210
and they never change,
at least until you install

00:43:31.210 --> 00:43:32.620
the next version of Mac OS X.

00:43:32.690 --> 00:43:35.240
And if you use an SDK,
they never actually change,

00:43:35.340 --> 00:43:37.350
because even when you
upgrade your Mac OS X,

00:43:37.530 --> 00:43:40.860
the SDK remains stable,
which is one of the advantages.

00:43:40.860 --> 00:43:43.300
So just a small example,
a pretty extreme one,

00:43:43.300 --> 00:43:47.460
54 lines of sample code,
and I think about 900,000 lines of

00:43:47.460 --> 00:43:49.300
total code seen by the compiler.

00:43:49.300 --> 00:43:51.580
So that's a pretty low percentage, right?

00:43:51.580 --> 00:43:53.460
0.06% of interesting content
during that compilation.

00:43:53.460 --> 00:43:58.220
So the solution is to
create a precompiled header.

00:43:58.220 --> 00:44:00.960
So what you want to do is you want
to create a prefix header that

00:44:01.090 --> 00:44:04.630
gets implicitly included at the
beginning of each compilation unit,

00:44:04.640 --> 00:44:07.620
and then you set that
up to be precompiled.

00:44:07.740 --> 00:44:12.320
And in the prefix header,
you put the common headers

00:44:12.370 --> 00:44:14.000
that don't change a whole lot.

00:44:14.080 --> 00:44:17.140
Xcode will precompile it on demand,
so it doesn't actually

00:44:17.180 --> 00:44:19.100
compile it unless you use it.

00:44:19.150 --> 00:44:22.290
And if it precompiles it,
it only does so once,

00:44:22.370 --> 00:44:24.680
if it's shareable between
-- Even the projects,

00:44:24.740 --> 00:44:27.860
not only the targets,
but even the projects.

00:44:27.860 --> 00:44:33.160
So if you have the same prefix header
containing the same include files,

00:44:33.160 --> 00:44:36.940
and if you have the same set of flags,
then Xcode will actually

00:44:36.940 --> 00:44:39.410
share the precompiled header
and only build it once,

00:44:39.410 --> 00:44:43.300
even beyond however many targets
-- however many projects you

00:44:43.300 --> 00:44:45.080
have and share between them.

00:44:45.090 --> 00:44:48.160
Do keep in mind that if anything
at all that goes into the

00:44:48.160 --> 00:44:51.030
precompiled header changes,
we have to rebuild the

00:44:51.030 --> 00:44:52.140
precompiled header.

00:44:52.180 --> 00:44:53.440
That's pretty obvious.

00:44:53.460 --> 00:44:56.020
So Xcode will do that
for you automatically,

00:44:56.020 --> 00:44:56.490
no problem.

00:44:56.490 --> 00:44:58.130
Everything will work.

00:44:58.250 --> 00:45:01.110
But you don't want to be putting
a lot of volatile headers into the

00:45:01.110 --> 00:45:05.320
precompiled header because you'll have
to rebuild it over and over again,

00:45:05.360 --> 00:45:07.340
and that defeats the purpose.

00:45:07.340 --> 00:45:11.110
So put infrequently used --
infrequently changed headers

00:45:11.250 --> 00:45:16.960
into the precompiled header,
and everything should be great.

00:45:16.960 --> 00:45:19.670
Another thing to be aware of
is that the prefix header gets

00:45:19.770 --> 00:45:23.460
prepended to every source file,
so it has to be aware of C versus C++.

00:45:23.460 --> 00:45:30.270
You can easily do this
with #ifdef conditionals.

00:45:31.330 --> 00:45:33.970
The InfoP-List processing,
there's actually one kind of

00:45:33.970 --> 00:45:36.640
InfoP-List processing that's been
around for a long time in Xcode.

00:45:36.640 --> 00:45:43.030
And that is that, well,
I should point out, I jumped ahead here,

00:45:43.030 --> 00:45:47.360
the InfoP-List, if you don't know,
it's defined by the

00:45:47.450 --> 00:45:50.060
Mac OS X system manual.

00:45:50.060 --> 00:45:52.210
It is a property list.

00:45:52.210 --> 00:45:55.190
It's a text-based format that contains
information about your product,

00:45:55.200 --> 00:45:57.680
such as your application or
bundle or kernel extension.

00:45:58.120 --> 00:45:59.640
So, you can see here,
the version numbers,

00:45:59.640 --> 00:46:01.920
the name of the executable,
these are all things that are in there,

00:46:01.920 --> 00:46:02.600
document types.

00:46:02.600 --> 00:46:10.010
Some entities in there are localized,
and so there is another file that

00:46:10.010 --> 00:46:12.580
contains just human-readable strings.

00:46:12.580 --> 00:46:15.390
And a lot of the information
in the InfoP-List,

00:46:15.390 --> 00:46:19.640
such as the version number,
is information that exists elsewhere.

00:46:19.640 --> 00:46:23.580
We talked about Xcode's versioning
support in the previous set of slides.

00:46:23.600 --> 00:46:28.100
So, why not just take the version from
that and expand that in the InfoP-List?

00:46:28.120 --> 00:46:30.120
Turns out you can do exactly that.

00:46:30.120 --> 00:46:32.120
There's two ways to do it.

00:46:32.120 --> 00:46:35.240
You can refer to build settings
from within the InfoP-List,

00:46:35.240 --> 00:46:38.370
or you can run the InfoP-List
through the preprocessor.

00:46:39.440 --> 00:46:44.400
So, to expand build settings,
it happens automatically.

00:46:44.400 --> 00:46:46.160
All you have to do in this case,
for example,

00:46:46.160 --> 00:46:52.310
is to just refer to the executable name,
which is the sort of machine name

00:46:52.470 --> 00:46:55.160
for that little text field there
that says what the product name is.

00:46:55.160 --> 00:46:58.650
And then there's the
current project version,

00:46:58.650 --> 00:47:02.950
which is the internal name for
the inspector entry that sets

00:47:03.040 --> 00:47:05.210
what the version number is.

00:47:05.280 --> 00:47:07.160
You saw that in the
previous screenshot here.

00:47:08.440 --> 00:47:11.360
And when Xcode copies the
info pillars to your product,

00:47:11.490 --> 00:47:13.630
it will just expand these as it goes.

00:47:16.420 --> 00:47:20.940
And the other kind is to actually run
the InfoP-List through the preprocessor.

00:47:21.080 --> 00:47:24.960
So this is enabled using the
project or the target inspector.

00:47:24.960 --> 00:47:28.300
And there you can also
define macros and other,

00:47:28.300 --> 00:47:32.470
for example, header search paths that are
unique for your InfoP-List.

00:47:32.540 --> 00:47:36.060
In other words, in addition to what gets
used for your source files.

00:47:36.080 --> 00:47:39.610
And the graphic here shows
where to set that up.

00:47:40.860 --> 00:47:43.120
So pretty straightforward,
just checking a checkbox,

00:47:43.120 --> 00:47:45.400
and we'll run it through
the preprocessor each time.

00:47:45.400 --> 00:47:47.310
And so what can you do with that?

00:47:47.420 --> 00:47:50.470
Well, because it's run through
the preprocessor,

00:47:50.480 --> 00:47:55.480
it expands macro directives and macro
references and any directives you have.

00:47:55.500 --> 00:47:59.050
In this case, the sample case,
you can actually have a header file

00:47:59.190 --> 00:48:02.740
that includes some definitions,
and then you can refer to those

00:48:02.740 --> 00:48:04.680
from within your InfoP-List.

00:48:04.680 --> 00:48:08.370
You can also have conditional
sections of your InfoP-List

00:48:08.410 --> 00:48:10.520
that simply disappear or appear.

00:48:10.860 --> 00:48:14.090
depending on your preprocessor macros.

00:48:14.940 --> 00:48:18.860
So, what I want to do is to do a
little demo of some of these

00:48:18.970 --> 00:48:21.340
project configuration options.

00:48:21.430 --> 00:48:23.520
So,
let's go ahead and switch to demo one,

00:48:23.520 --> 00:48:24.120
please.

00:48:24.300 --> 00:48:26.210
Ah, we're already there.

00:48:27.800 --> 00:48:32.290
So in an earlier session,
Bertrand encouraged

00:48:32.290 --> 00:48:35.400
the use of open source,
so I figured I would do a

00:48:35.400 --> 00:48:39.540
little demo involving that,
and also show cross-project references.

00:48:39.540 --> 00:48:41.640
So I'm going to go to the
developer folder here.

00:48:41.640 --> 00:48:43.600
I'm just going to find
one of the examples,

00:48:43.600 --> 00:48:45.200
and I'm going to go into OpenGL.

00:48:45.200 --> 00:48:47.960
This is what you all have
on all of your machines.

00:48:47.960 --> 00:48:52.490
I'm just going to copy this
GLUT toolkit example up here,

00:48:52.590 --> 00:48:57.240
and then we'll find the Xcode
project and launch that.

00:48:57.950 --> 00:49:01.800
So Xcode 2.1 has a new and
improved project file format,

00:49:01.800 --> 00:49:04.340
so the first question is,
do I want to upgrade my project?

00:49:04.420 --> 00:49:07.070
And I want to do that,
so I'm just going to go ahead and

00:49:07.170 --> 00:49:09.260
save it using the recommended name.

00:49:09.280 --> 00:49:14.430
And this comes up,
and can everybody read that in the back?

00:49:17.510 --> 00:49:22.200
And so, let's, most of you have probably
seen this before.

00:49:22.200 --> 00:49:24.040
Let's just go ahead and
do build and go here,

00:49:24.040 --> 00:49:28.580
and we'll take a look at what this,
this is a little nifty little thing here.

00:49:28.580 --> 00:49:29.620
I guess it's pretty small.

00:49:29.620 --> 00:49:30.920
I can make it bigger.

00:49:30.920 --> 00:49:33.510
It moves around,
but it doesn't really do much.

00:49:33.610 --> 00:49:36.100
So, what if we add some physics to this?

00:49:36.100 --> 00:49:38.910
So, let's go ahead and quit this,
and I'm going to go ahead and close here.

00:49:39.620 --> 00:49:43.740
Turns out that there is a really
nice open source package called ODE,

00:49:43.740 --> 00:49:46.600
which is Open Dynamics Engine, I think.

00:49:46.640 --> 00:49:49.910
So, I just have an URL to that here,
and we'll see if the web page is up.

00:49:50.020 --> 00:49:51.430
Otherwise, I have a local copy of it.

00:49:51.480 --> 00:49:55.960
Just wanted to show you that I haven't
fiddled with the source code here.

00:49:55.960 --> 00:50:02.840
Looks like the network has gone down
between the time I tested it and now.

00:50:02.840 --> 00:50:07.070
So, I'm going to take my own copy,
which is identical.

00:50:09.600 --> 00:50:10.760
We'll see if that finishes.

00:50:10.760 --> 00:50:11.600
Okay, there we go.

00:50:11.600 --> 00:50:17.480
So what this does is it's
just a piece of open source,

00:50:17.510 --> 00:50:21.880
and it's a good demo because it actually
compiles nicely for Intel as well.

00:50:21.880 --> 00:50:23.560
Okay, so there we go.

00:50:23.670 --> 00:50:25.140
So that was the downloaded version.

00:50:25.140 --> 00:50:27.740
So I'm just going to drag the other
one to the trash and quit this.

00:50:27.740 --> 00:50:31.250
So here I have my little open source,
piece of open source here,

00:50:31.350 --> 00:50:33.550
and a whole bunch of files in there.

00:50:33.550 --> 00:50:35.650
So what I'm going to do is I'm
going to create another project

00:50:35.830 --> 00:50:38.400
because I wanted to show the
cross-project references here.

00:50:39.600 --> 00:50:42.540
And I'm just going to go ahead
and create an empty project.

00:50:42.540 --> 00:50:45.460
And what I want to do is I'm
just going to call this ODE 0.5.

00:50:45.500 --> 00:50:49.780
They've come up to version 0.5,
which is surprisingly stable,

00:50:49.780 --> 00:50:51.760
given the name of it.

00:50:51.920 --> 00:50:54.580
And I'm going to choose to
just put that on my desktop.

00:50:54.620 --> 00:50:56.820
So what I want to do now is
create just an empty project

00:50:56.860 --> 00:50:58.720
that has no targets of any kind.

00:50:58.720 --> 00:51:04.290
And the reason for that is I'm going to
create an external target to build ODE.

00:51:04.330 --> 00:51:06.940
As you can tell,
there are no file references, no groups,

00:51:06.940 --> 00:51:08.440
or anything at all like that.

00:51:08.490 --> 00:51:12.430
What I want to do, though,
is I'm going to open up the ODE folder.

00:51:12.470 --> 00:51:15.110
I'm just going to drag in the
source code that I expanded.

00:51:15.300 --> 00:51:18.120
This is the folder containing
the source code from the net.

00:51:18.130 --> 00:51:22.060
And then what I want to do is
just drag this into my project.

00:51:22.130 --> 00:51:25.150
So this is a very convenient way,
if you're working with open source,

00:51:25.220 --> 00:51:28.560
you can create kind of a
wrapper project in Xcode.

00:51:28.570 --> 00:51:33.160
You can say to not copy
the items into the project.

00:51:33.160 --> 00:51:36.410
And instead of recursively creating
groups which hard codes the

00:51:36.410 --> 00:51:40.320
file references in the project,
you can create a single file reference

00:51:40.440 --> 00:51:42.720
to just the top level folder.

00:51:42.720 --> 00:51:45.230
This has some advantages
and disadvantages.

00:51:45.460 --> 00:51:47.280
One advantage is that it's dynamic.

00:51:47.290 --> 00:51:50.880
As you change the folder
structure on disk,

00:51:50.880 --> 00:51:52.580
it's going to change in Xcode.

00:51:52.590 --> 00:51:56.840
The disadvantage is you can't edit
it and set as many reference settings

00:51:57.280 --> 00:52:01.020
as you could if the references
were actually part of Xcode.

00:52:01.730 --> 00:52:04.640
I'm going to want to configure
this real quickly here.

00:52:04.640 --> 00:52:07.840
So it turns out that there are
some user settings I can set.

00:52:07.910 --> 00:52:09.480
So this is a fairly nice one here.

00:52:09.480 --> 00:52:12.560
It's already configured for OS X,
and it actually uses

00:52:12.560 --> 00:52:14.640
a whole bunch of X11.

00:52:14.640 --> 00:52:18.380
But what I'm going to do is
I want to build the library only.

00:52:18.380 --> 00:52:21.880
So I'm just going to create
a new little make target.

00:52:21.880 --> 00:52:25.100
Again, this is not part of Xcode,
but what I'm demoing is showing open

00:52:25.100 --> 00:52:28.600
source that has its own build system
and how to call that through Xcode.

00:52:31.100 --> 00:52:34.490
So I'm going to go ahead
and create a new target.

00:52:34.490 --> 00:52:35.170
I think that's the right one.

00:52:35.170 --> 00:52:36.340
And let me see what that
target was called there.

00:52:36.340 --> 00:52:38.100
I did the research earlier.

00:52:38.460 --> 00:52:39.630
Yeah, odelib.

00:52:39.660 --> 00:52:42.540
So I'm going to save that file.

00:52:42.610 --> 00:52:47.470
And what I'm going to do is
to create a new target now.

00:52:47.470 --> 00:52:49.420
So I go into targets,
and I'm just going to use

00:52:49.660 --> 00:52:50.800
the context menu here.

00:52:50.800 --> 00:52:52.320
You can do this through the menu bar too.

00:52:52.320 --> 00:52:53.500
Create an external target.

00:52:53.620 --> 00:52:54.980
I'm just going to call it ODE.

00:52:54.980 --> 00:52:56.410
And I'm going to create a new target.

00:52:56.750 --> 00:52:59.260
And I can now edit the target here.

00:53:00.030 --> 00:53:03.550
Turns out that this project has
a nice little setting in its make

00:53:03.550 --> 00:53:06.340
file for where to put the output.

00:53:06.510 --> 00:53:12.500
So I'm just going to take and use the
setting that we talked about earlier.

00:53:12.590 --> 00:53:22.810
I'm going to see if I can enable zooming
here just to show you what I typed there.

00:53:24.550 --> 00:53:26.270
So that's what I was typing.

00:53:26.350 --> 00:53:33.190
What I'm doing here is I'm defining
a variable for the Make project,

00:53:33.190 --> 00:53:35.610
and I'm doing that on the
command line invocation of Make.

00:53:35.730 --> 00:53:40.410
So this is how I can use Xcode
to control what the Make file

00:53:40.470 --> 00:53:42.700
in the external target does.

00:53:43.810 --> 00:53:45.420
So that's the point of doing that.

00:53:45.650 --> 00:53:50.430
And then what I want to do is I want to
have the make tool here start out in the

00:53:50.440 --> 00:53:53.620
directory that contains the ODE sources.

00:53:53.740 --> 00:53:57.040
This started out as
being an absolute path,

00:53:57.140 --> 00:54:00.440
and so what I'm going to do here is,
because I want to make my

00:54:00.450 --> 00:54:03.170
project a little bit portable,
I'm just going to make

00:54:03.170 --> 00:54:05.010
that be a relative path.

00:54:05.870 --> 00:54:07.940
So let's go back out.

00:54:08.400 --> 00:54:09.230
Okay, so that's great.

00:54:09.380 --> 00:54:09.930
So I have that.

00:54:10.150 --> 00:54:15.640
What I can do now is to build this,
and I'm just going to click the hammer,

00:54:15.640 --> 00:54:18.690
and we're going to see
some build results.

00:54:18.780 --> 00:54:23.420
Now, this particular project emits
some errors at the beginning,

00:54:23.420 --> 00:54:27.430
but there's actually a nice
little line in there that says...

00:54:28.100 --> 00:54:46.300
[Transcript missing]

00:54:46.770 --> 00:54:49.580
it tried to output to a
directory that didn't exist.

00:54:49.760 --> 00:54:53.850
So one of the things that I want to do,
I built-- I wanted to build

00:54:53.950 --> 00:54:59.040
everything into the same directory,
debug versus release.

00:54:59.130 --> 00:55:04.620
The example from GL, by default,
had configurations that were

00:55:04.620 --> 00:55:06.030
named development deployment.

00:55:06.170 --> 00:55:08.020
So I'm just going to call that debug.

00:55:08.020 --> 00:55:10.090
I'm going to call that release.

00:55:10.150 --> 00:55:11.900
I'm actually going to
take out the defaults,

00:55:11.970 --> 00:55:13.540
because I don't need that.

00:55:13.540 --> 00:55:15.900
I'm going to go ahead
and build that again,

00:55:15.900 --> 00:55:20.100
just to get it into the
shared build location.

00:55:20.130 --> 00:55:23.740
When I build now,
the directory will exist,

00:55:23.750 --> 00:55:26.740
and it's going to create
the static library.

00:55:26.940 --> 00:55:28.440
So now we have two separate projects.

00:55:28.470 --> 00:55:30.420
One wraps the open source project.

00:55:30.680 --> 00:55:35.680
The other one is just
the standard GL examples.

00:55:35.680 --> 00:55:39.200
So what I'll do now is I create
a cross-project reference by

00:55:39.200 --> 00:55:43.220
just dragging the project.

00:55:43.240 --> 00:55:44.660
I say I don't want to copy it in.

00:55:44.660 --> 00:55:45.390
I just want to refer to it.

00:55:45.510 --> 00:55:48.460
I don't want to copy the actual project.

00:55:48.480 --> 00:55:51.380
And I'm not actually going
to add it to any targets,

00:55:51.380 --> 00:55:53.920
because it's just a
reference to a project.

00:55:53.950 --> 00:55:55.880
So I hit OK.

00:55:56.190 --> 00:55:59.760
What I'd like to do now
is to go to my target,

00:55:59.780 --> 00:56:02.390
which I wanted to improve
here a little bit.

00:56:02.500 --> 00:56:04.730
I'm going to inspect the target.

00:56:05.470 --> 00:56:08.160
And zoom in a little bit so you can see.

00:56:08.350 --> 00:56:11.820
And then I'm going to add

00:56:13.170 --> 00:56:15.260
The remote target.

00:56:15.310 --> 00:56:16.780
I'm going to click Add.

00:56:16.920 --> 00:56:22.300
So now you can see that
I've created a reference,

00:56:22.300 --> 00:56:26.920
a dependency from my target to
a target in another project.

00:56:27.690 --> 00:56:34.270
And then because the remote project
uses a make-based build system,

00:56:34.710 --> 00:56:39.040
it doesn't communicate to
Xcode where the products live.

00:56:39.170 --> 00:56:41.640
So what I'm going to do is
I'm going to go ahead and

00:56:41.640 --> 00:56:43.270
edit the header search paths.

00:56:44.950 --> 00:56:47.510
I'm going to take the
include directory from ODE,

00:56:47.660 --> 00:56:51.540
and as you see, Xcode automatically made
that relative to my project.

00:56:51.620 --> 00:56:53.080
I'm going to hit OK.

00:56:53.330 --> 00:56:59.290
And then from looking at
the open source project,

00:56:59.290 --> 00:56:59.290
I

00:56:59.990 --> 00:57:02.750
These were in there by default.

00:57:02.790 --> 00:57:07.340
I noticed that I have to
link in the static library.

00:57:07.340 --> 00:57:09.590
And ODE also uses C++.

00:57:09.680 --> 00:57:11.140
The OpenGL demos do not.

00:57:11.260 --> 00:57:16.990
So I'm going to go ahead and also
link against the C++ runtime library.

00:57:16.990 --> 00:57:21.560
That's just depending on which
open source project you use.

00:57:21.560 --> 00:57:24.920
And now I'm going to
go ahead and build this

00:57:25.390 --> 00:57:27.060
and build succeeded.

00:57:27.090 --> 00:57:30.720
Now, I haven't actually made any
changes yet to the source code.

00:57:30.910 --> 00:57:32.300
So,
let me go ahead and do that real quick.

00:57:32.300 --> 00:57:35.320
I'm not going to type
a whole lot of stuff.

00:57:35.460 --> 00:57:39.040
I actually have something
already written.

00:57:39.050 --> 00:57:41.360
So, wow, this is really big.

00:57:41.360 --> 00:57:46.890
So, I'm just going to take actually the
contents of the source file here

00:57:46.890 --> 00:57:49.930
and just replace with what I had

00:57:50.100 --> 00:59:45.700
[Transcript missing]

00:59:46.450 --> 00:59:51.730
Now I'm going to go back
to the GLUT examples.

00:59:51.840 --> 00:59:55.610
I'm going to make this project depend on

00:59:56.500 --> 01:00:14.100
[Transcript missing]

01:00:15.660 --> 01:00:22.560
And now, if I build my example,
it should go into-- here we see

01:00:22.570 --> 01:00:27.200
it going into the remote project,
building the open source target.

01:00:27.250 --> 01:00:31.890
We again get these harmless errors,
which it emits as errors,

01:00:32.000 --> 01:00:33.670
but they don't actually stop the build.

01:00:33.760 --> 01:00:38.830
Then we build and we link
the underwater target.

01:00:39.370 --> 01:00:43.270
If I open this up here,
we can see that it

01:00:43.360 --> 01:00:46.360
compiled each file twice,
and linked each file twice,

01:00:46.360 --> 01:00:51.880
and that was for the
Intel and the PowerPC side.

01:00:51.880 --> 01:00:54.020
And then, of course,
I can go ahead and run,

01:00:54.020 --> 01:00:56.120
and I see the physics animation up here.

01:00:56.120 --> 01:00:59.490
So, small example of
cross-project references,

01:00:59.490 --> 01:01:02.620
one of them wrapping
an open-source project,

01:01:02.680 --> 01:01:06.880
and using universal binaries,
and even using the SDK from

01:01:06.880 --> 01:01:08.920
within the open-source project.

01:01:09.300 --> 01:01:11.990
So, with that,
could I have the slides back?

01:01:12.040 --> 01:01:15.120
Thanks.

01:01:20.400 --> 01:02:39.700
[Transcript missing]

01:02:40.850 --> 01:02:42.700
This is Friday afternoon.

01:02:42.700 --> 01:02:44.280
There are a few related
sessions remaining.

01:02:44.350 --> 01:02:46.100
One of them is the
DevTools Feedback Forum.

01:02:46.200 --> 01:02:47.700
So that's at 5:00 PM.

01:02:47.700 --> 01:02:51.840
And I encourage you all to go there and
let us know what you think and what you

01:02:52.120 --> 01:02:54.390
would like to see us do for next year.

01:02:54.640 --> 01:02:58.740
And with that,
I'd like to ask Matt Formica to

01:02:58.740 --> 01:03:02.330
come up and handle the Q&A here.

01:03:02.330 --> 01:03:05.770
First of all, Matt Formica,
the DevTools evangelist,

01:03:05.770 --> 01:03:08.820
and we also have the Xcode
user discussion list.