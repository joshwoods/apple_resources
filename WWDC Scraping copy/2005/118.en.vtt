WEBVTT

00:00:07.900 --> 00:00:08.900
Good morning.

00:00:08.900 --> 00:00:10.740
Welcome to session 118,
Advanced Document-Based

00:00:10.850 --> 00:00:12.940
Application Techniques.

00:00:12.940 --> 00:00:14.180
My name is Mark Piccirelli.

00:00:14.180 --> 00:00:16.660
I'm an engineer in the
Cocoa Frameworks Group.

00:00:22.160 --> 00:00:24.270
So Cocoa has always had
a great architecture for

00:00:24.320 --> 00:00:27.080
document-based applications,
doing the standard sort of

00:00:27.080 --> 00:00:30.200
things like opening documents,
saving documents,

00:00:30.200 --> 00:00:34.780
even gives you a little help with
printing and undo and things like that.

00:00:34.840 --> 00:00:36.760
So if you know how,
you can do a lot of different

00:00:36.810 --> 00:00:37.920
clever things with it.

00:00:37.920 --> 00:00:40.340
I'm going to show you some
of the clever things today.

00:00:40.340 --> 00:00:43.930
And also, stuff I want to show you is
some of the new features that

00:00:43.930 --> 00:00:48.080
we introduced in Tiger that we'd
like you to take advantage of.

00:00:48.610 --> 00:00:49.480
So prerequisites.

00:00:49.500 --> 00:00:53.330
Hopefully you've already worked a
little bit with NS Document and friends.

00:00:53.380 --> 00:00:58.340
The sample code I'm going to show you
today depends a lot on Cocoa bindings,

00:00:58.380 --> 00:01:00.400
so hopefully you've been
experimenting with that.

00:01:00.420 --> 00:01:04.730
Understand the concepts behind
key value coding and key

00:01:04.870 --> 00:01:06.070
value observing compliance.

00:01:06.120 --> 00:01:09.670
And the classes we're specifically
going to spend a lot of time

00:01:09.810 --> 00:01:13.120
with today are NS Document,
NS Document Controller,

00:01:13.200 --> 00:01:18.240
and Window Controller,
and subclasses of our own making.

00:01:18.500 --> 00:01:19.530
*sniff*

00:01:20.230 --> 00:01:22.300
So what you'll learn.

00:01:22.330 --> 00:01:26.380
Good error handling is important,
and we've made some improvements

00:01:26.380 --> 00:01:29.860
in Tiger that makes that
easier for you to do properly.

00:01:29.920 --> 00:01:32.380
Supporting new file formats
with a plugin architecture,

00:01:32.380 --> 00:01:36.080
we've opened up our document type
API a little bit to help you there.

00:01:36.080 --> 00:01:39.320
Auto-saving,
a new feature we added in Tiger.

00:01:39.320 --> 00:01:44.580
Multiple windows per document,
and multiple documents per window.

00:01:44.920 --> 00:01:47.900
So today's sample app is Sketch 2.

00:01:47.920 --> 00:01:51.920
We are rewriting it to take
advantage of all the features we've

00:01:51.920 --> 00:01:52.940
added in the last several years.

00:01:52.940 --> 00:01:55.340
Actually, I say we, I really mean I.

00:01:55.340 --> 00:01:57.970
It doesn't take more than
one person to rewrite Sketch.

00:02:01.290 --> 00:02:04.590
So good error handling,
a good Macintosh application helps

00:02:04.670 --> 00:02:06.040
the user when things go wrong.

00:02:06.040 --> 00:02:09.040
It gives them a good description
of what went wrong and if possible,

00:02:09.040 --> 00:02:11.910
a suggestion of what they
can do to fix the problem.

00:02:14.830 --> 00:02:18.670
So in Panther,
we introduced a class named

00:02:18.700 --> 00:02:20.460
NSError and used it in a few places.

00:02:20.460 --> 00:02:23.200
But we didn't use it in NSDocument.

00:02:23.200 --> 00:02:26.500
NSDocument's error handling hadn't really
caught up to what was possible yet.

00:02:26.500 --> 00:02:30.300
So the result was error
alerts like this one,

00:02:30.300 --> 00:02:35.110
which is not even remotely
HI guidelines compliant and is

00:02:35.220 --> 00:02:39.010
unfortunate in a variety of ways.

00:02:40.660 --> 00:02:45.110
So there are ways in Panther and
earlier versions for your app

00:02:45.190 --> 00:02:48.730
to present good error alerts,
but it was hard.

00:02:48.920 --> 00:02:50.620
Number one,
how do you get on this document

00:02:50.620 --> 00:02:55.530
not to present its not so good
error alerts and things like that?

00:02:56.620 --> 00:02:59.000
So for Tiger,
we made a bunch of improvements.

00:02:59.000 --> 00:03:01.280
If you don't do anything to take
advantage of the improvements,

00:03:01.280 --> 00:03:04.150
the worst thing you'll see
is an error alert that though

00:03:04.150 --> 00:03:07.860
it's not very descriptive,
at least is HI guidelines compliant.

00:03:08.080 --> 00:03:10.960
So in this example, the document Migrate
Sketch cannot be opened.

00:03:10.960 --> 00:03:14.490
It doesn't have the word error there,
you know, no kidding.

00:03:14.490 --> 00:03:18.190
It just has a sentence
saying what went wrong.

00:03:20.850 --> 00:03:23.920
Now, for very simple applications,
even in Tiger,

00:03:23.920 --> 00:03:28.070
you might see something like this,
something really descriptive.

00:03:28.160 --> 00:03:31.080
The document Migrate
Sketch cannot be opened.

00:03:31.080 --> 00:03:34.520
You do not have appropriate
access privileges.

00:03:34.520 --> 00:03:38.650
And this document's code sends
the error and is causing this

00:03:38.680 --> 00:03:40.910
error alert to be presented.

00:03:40.970 --> 00:03:42.800
And at the bottom,
it even has a little bit

00:03:42.800 --> 00:03:44.020
of a recovery suggestion.

00:03:44.020 --> 00:03:47.590
To view or change access privileges,
select the file in the

00:03:47.590 --> 00:03:49.860
finder and choose File,
Get Info.

00:03:50.380 --> 00:03:52.720
So that's pretty helpful to the user.

00:03:55.290 --> 00:03:57.160
So what do you have to
do to take advantage?

00:03:57.160 --> 00:04:01.290
Because very often for backward
binary compatibility reasons,

00:04:01.300 --> 00:04:03.930
in old applications,
you just get the plain error alert

00:04:03.930 --> 00:04:05.310
with really not much description.

00:04:05.320 --> 00:04:10.070
Well, what you have to do is you have to
stop overriding the NSDocument and

00:04:10.070 --> 00:04:15.320
NSDocumentController methods that
don't have a place to return NSErrors.

00:04:15.540 --> 00:04:20.450
So instead of overriding read from
file of type or write to file of type,

00:04:20.450 --> 00:04:25.220
override read from URL of type error,
write to URL of type error.

00:04:25.220 --> 00:04:28.680
So the first two methods that
you see there are now deprecated.

00:04:28.680 --> 00:04:31.280
And of course, you know,
your application still works.

00:04:31.360 --> 00:04:34.730
We still invoke your overridden
methods even if they're deprecated.

00:04:34.740 --> 00:04:39.750
But if you remove those overrides
and override the new ones instead,

00:04:39.800 --> 00:04:44.670
the passing of the errors up and
down the stack works much nicer.

00:04:46.180 --> 00:04:47.780
So,
and this applies to both the NSDocument

00:04:47.780 --> 00:04:48.800
and the NSDocumentController.

00:04:48.810 --> 00:04:51.100
Check out the documentation
and the release notes.

00:04:51.240 --> 00:04:55.910
We deprecated a lot of methods
in Tiger and replaced them

00:04:55.910 --> 00:04:58.100
all with something better,
even if, you know,

00:04:58.100 --> 00:05:01.100
the something better was just
adding a place to return an error.

00:05:01.100 --> 00:05:03.010
So, demonstration.

00:05:03.010 --> 00:05:07.090
Let's update Sketch for
better error handling.

00:05:21.840 --> 00:05:27.860
So here I have a version of
Sketch that is pretty much rewritten,

00:05:27.860 --> 00:05:29.860
but I left--

00:05:30.550 --> 00:05:34.460
The old style reading and
writing methods in place.

00:05:34.600 --> 00:05:36.890
So read from file,
Sketch doesn't actually

00:05:36.890 --> 00:05:37.920
have to override this.

00:05:37.920 --> 00:05:41.360
If you've worked with NSDocument,
you know there's a series of

00:05:41.390 --> 00:05:44.560
method indications that happens
during reading and writing,

00:05:44.560 --> 00:05:48.410
and the default implementation
of each invokes something that's

00:05:48.470 --> 00:05:50.280
a little easier to override.

00:05:50.280 --> 00:05:54.920
So read from file, you know,
the default implementation of it

00:05:54.920 --> 00:06:00.200
actually gets an NSData and then
invokes low data representation.

00:06:00.500 --> 00:06:02.240
Actually,
there's another level in between

00:06:02.240 --> 00:06:03.700
there that involves file wrappers.

00:06:03.790 --> 00:06:07.380
But in this example, you know,
both of these are invoked.

00:06:07.380 --> 00:06:11.240
So and then this method,
this class still overrides the old

00:06:11.240 --> 00:06:17.850
style low data representation of
type and data representation of type.

00:06:28.610 --> 00:06:31.150
And if we, you know,
open a file to which we

00:06:31.150 --> 00:06:35.090
don't have read access,
you just get a very simple error alert.

00:06:35.170 --> 00:06:37.180
The document, a few circles,
without enough permissions,

00:06:37.180 --> 00:06:39.160
that's the name of it, cannot be opened.

00:06:42.300 --> 00:07:01.900
[Transcript missing]

00:07:09.800 --> 00:07:16.100
[Transcript missing]

00:07:17.560 --> 00:07:24.410
And let's replace our override of this
old data representation of type method.

00:07:30.100 --> 00:07:36.300
with the newer data of type method
that has a place to return an error.

00:07:39.300 --> 00:07:41.730
And we save that, and we build it,
and we run it.

00:07:41.800 --> 00:07:49.730
And we try and open the same file again,
to which we don't have permissions.

00:07:50.900 --> 00:07:51.360
And we get the same error alert.

00:07:51.360 --> 00:07:52.220
It's not very descriptive.

00:07:52.240 --> 00:07:53.660
What went wrong?

00:07:53.670 --> 00:07:57.900
Well, in SKT DrawDocument,
the subclass of NSDocument,

00:07:57.920 --> 00:08:00.900
we still have this override
of this old deprecated method.

00:08:00.900 --> 00:08:05.210
So NSDocumentController,
NSDocument machinery for backward

00:08:05.230 --> 00:08:07.880
binary compatibility overrides it.

00:08:07.880 --> 00:08:10.890
And once you start--I'm sorry,
invokes it.

00:08:10.900 --> 00:08:14.530
And once it starts down this
backward binary compatibility path,

00:08:14.530 --> 00:08:18.900
calling all these deprecated methods
that don't have a place to return errors,

00:08:18.900 --> 00:08:20.900
it stays on that path.

00:08:20.900 --> 00:08:24.590
So the best you'll get is an
error that is not ugly but is

00:08:24.590 --> 00:08:26.890
not very descriptive either.

00:08:26.890 --> 00:08:32.580
So let's replace that to--

00:08:33.480 --> 00:08:35.970
with the method that
replaces it in Tiger,

00:08:35.980 --> 00:08:37.860
an override of the method
that replaces it in Tiger.

00:08:37.860 --> 00:08:40.700
So read from URL of type error.

00:08:40.700 --> 00:08:43.390
And one of the things we
did while introducing all

00:08:43.390 --> 00:08:46.150
this new API and NSDocument,
Document Controllers,

00:08:46.150 --> 00:08:49.400
made up our mind whether we
wanted to use file paths or URLs.

00:08:49.400 --> 00:08:52.720
So we went with URLs.

00:09:00.940 --> 00:09:03.300
So we build it and run it.

00:09:03.300 --> 00:09:06.740
And we open that file to which
we do not have permission.

00:09:06.740 --> 00:09:10.900
And it puts a very
descriptive error alert up.

00:09:10.900 --> 00:09:12.480
And that's a good thing.

00:09:12.480 --> 00:09:17.420
This error alert actually, in particular,
this NSError was returned by an

00:09:17.420 --> 00:09:22.790
NSData method that NSDocument
called to get the data that

00:09:22.790 --> 00:09:24.210
it passes to read from data.

00:09:24.330 --> 00:09:26.960
So NSData returned the NSError.

00:09:26.960 --> 00:09:30.890
NSDocument fiddled with it a little
bit to put it in the context of a

00:09:30.930 --> 00:09:35.540
document error and then presented
it to the user using an API,

00:09:35.540 --> 00:09:38.300
if you check the release
notes in the documentation,

00:09:38.300 --> 00:09:40.750
which is really very open.

00:09:40.810 --> 00:09:44.010
And there are many,
many customization opportunities

00:09:44.130 --> 00:09:47.130
for presenting errors.

00:10:02.600 --> 00:10:06.070
what you just saw was
that what you want to do,

00:10:06.190 --> 00:10:08.500
as soon as your application
can depend on Tiger,

00:10:08.530 --> 00:10:13.460
get rid of your overrides of the
old methods and avoid the backward

00:10:13.460 --> 00:10:15.150
binary compatibility code path.

00:10:15.150 --> 00:10:17.120
You know,
your application will work but the error

00:10:17.120 --> 00:10:19.130
alerts won't be as good as they could be.

00:10:19.240 --> 00:10:22.920
And you'll trigger, you know,
better default error presentation.

00:10:22.920 --> 00:10:25.620
And--oh, something I didn't show it.

00:10:25.710 --> 00:10:29.390
There are lots of opportunities
for you to return errors,

00:10:29.400 --> 00:10:32.220
you know, in those overrides,
those methods that you saw.

00:10:32.320 --> 00:10:34.480
If your application is
what senses the error,

00:10:34.480 --> 00:10:37.800
you can create an NSError object
very easily and return it.

00:10:37.800 --> 00:10:40.680
And if you check the
documentation for NSError,

00:10:40.680 --> 00:10:42.000
it's very powerful.

00:10:42.010 --> 00:10:46.390
It has places for showing for a
description of the error and a failure

00:10:46.400 --> 00:10:50.920
reason for the error which is just part
of that that's used some of the time.

00:10:50.940 --> 00:10:55.340
And, you know, recovery suggestions,
recovery options for putting, you know,

00:10:55.340 --> 00:10:58.000
buttons on the error alert,
all sorts of stuff.

00:10:58.020 --> 00:10:58.740
So have a look at that.

00:10:58.980 --> 00:11:03.390
So plug-in architectures.

00:11:04.850 --> 00:11:08.240
Over the years I've had a bunch
of questions and requests from

00:11:08.340 --> 00:11:10.590
people who wanted to make their
applications more flexible.

00:11:10.620 --> 00:11:15.780
They wanted to ship an application
and add support for new file formats,

00:11:15.780 --> 00:11:17.810
either importing or
exporting after the fact.

00:11:17.860 --> 00:11:22.290
Either they ship the plugins themselves
or they allow third parties to ship them.

00:11:22.300 --> 00:11:26.110
And NS Document Controller didn't
really have enough API to

00:11:26.110 --> 00:11:27.790
make this easy for you.

00:11:27.800 --> 00:11:30.100
If you did it,
you ended up doing it all yourself.

00:11:30.100 --> 00:11:32.710
You ended up having to
reproduce a lot of the work that

00:11:32.710 --> 00:11:34.350
NS Document Controller does.

00:11:34.700 --> 00:11:36.970
To make that unnecessary,
we've opened up the

00:11:36.970 --> 00:11:39.700
document type API in Tiger.

00:11:43.590 --> 00:11:48.050
And the gist of the change is that if
your plugins support new file formats,

00:11:48.170 --> 00:11:51.760
you want them to get used by
AppKit's default machinery.

00:11:51.760 --> 00:11:55.420
So what we've done,
we've added a few new methods to

00:11:55.420 --> 00:11:58.440
classes like NSDocumentController.

00:11:58.440 --> 00:12:00.850
DefaultType,
which is the name of the type

00:12:00.900 --> 00:12:04.660
for new documents if the user
selects new from the file menu.

00:12:04.660 --> 00:12:09.000
Type for contents of URL error
when the user's opening a document,

00:12:09.000 --> 00:12:10.180
what type is it?

00:12:10.940 --> 00:12:13.660
And document class names,
if your plugin architecture

00:12:13.830 --> 00:12:17.390
is so powerful that you allow
it to add new subclasses of

00:12:17.390 --> 00:12:21.320
NSDocument to your application,
well, we can accommodate that

00:12:21.320 --> 00:12:22.820
now without too much.

00:12:22.820 --> 00:12:25.980
And then there's a few other old
methods that have been there,

00:12:25.980 --> 00:12:29.220
like type from file extension
and document class for type.

00:12:29.220 --> 00:12:33.030
They've always been there,
but a lot of them weren't invoked

00:12:33.030 --> 00:12:35.300
when you would expect them to be.

00:12:35.410 --> 00:12:38.280
You would override them, and you're like,
hey, my override's useless.

00:12:38.380 --> 00:12:44.710
We now very consistently use public
API when you would expect it to be.

00:12:48.380 --> 00:12:49.540
And that was for document opening.

00:12:49.540 --> 00:12:52.260
For document saving,
roughly the same situation.

00:12:52.360 --> 00:12:57.050
There's a new method in NSDocument,
a writable type for save operation.

00:12:57.060 --> 00:13:01.770
If your document, you know,
sometimes when you support exporting,

00:13:01.810 --> 00:13:05.810
you can't export specific document
formats because the document is

00:13:05.820 --> 00:13:08.480
using some feature that won't be
representable in that file format.

00:13:09.260 --> 00:13:11.900
If you have complicated
situations like that,

00:13:11.990 --> 00:13:15.580
you have total control now over
what the user sees in the save

00:13:15.580 --> 00:13:19.020
panel and things like that because
you can just override this method.

00:13:19.020 --> 00:13:22.140
And it returns, you know,
an array of type names and you can

00:13:22.160 --> 00:13:24.280
fiddle with that array all you want.

00:13:24.320 --> 00:13:29.080
And existing class methods like
writable types and isNativeType are now,

00:13:29.090 --> 00:13:32.430
again,
invoked when you would expect them to be.

00:13:35.200 --> 00:13:40.380
So for a demonstration,
I kind of made up a problem for myself

00:13:40.380 --> 00:13:42.170
so I could solve it using plugins.

00:13:42.330 --> 00:13:45.880
Sketch 2 uses a new native file format.

00:13:45.910 --> 00:13:48.920
It uses a new style property
list so it gets to put numbers

00:13:48.920 --> 00:13:53.000
in them instead of having to,
you know, make strings out of everything

00:13:53.000 --> 00:13:54.320
and put it in there.

00:13:54.330 --> 00:13:56.920
But any good application that
updates its file format still has

00:13:57.020 --> 00:13:59.100
to open documents of the old format.

00:13:59.190 --> 00:14:01.850
So in Sketch,
we'll add support for that old file

00:14:01.850 --> 00:14:04.020
format using an importer plugin.

00:14:19.870 --> 00:14:22.530
So here we are in Sketch,
and I added just a really

00:14:22.530 --> 00:14:24.740
simple plugin architecture,
and I didn't want to

00:14:24.740 --> 00:14:25.700
get too clever up here.

00:14:25.700 --> 00:14:29.660
And where is it?

00:14:29.660 --> 00:14:32.050
Just to a subclass of
Document Controller,

00:14:32.050 --> 00:14:33.780
I just put the stuff in there.

00:14:33.780 --> 00:14:39.360
There's a few new public methods,
not public methods, methods on this

00:14:39.360 --> 00:14:41.100
Document Controller subclass.

00:14:41.100 --> 00:14:45.840
Exporter for type, where type is an
NSDocument-style type name.

00:14:46.440 --> 00:14:49.840
Importer for type, and the entire list of
exporters and so on.

00:14:49.840 --> 00:14:53.360
And just when the
Document Controller is initialized,

00:14:53.380 --> 00:15:00.120
it just routes around in a
directory for all the bundles,

00:15:00.220 --> 00:15:02.290
whose file name extension
is SketchPlugin,

00:15:02.290 --> 00:15:05.530
and instantiates the principal
class out of those bundles

00:15:05.530 --> 00:15:07.080
and adds them to its list.

00:15:10.300 --> 00:15:18.190
And in SKT Draw Document,
we use this stuff in a few places.

00:15:19.900 --> 00:15:24.670
So in our override of read from data,
read from data has passed a type name,

00:15:24.670 --> 00:15:29.200
which has already been figured
out by the document controller.

00:15:29.200 --> 00:15:33.640
And this override, you know,
it checks to see if the type

00:15:33.640 --> 00:15:37.710
is one of the ones that it
natively knows how to read.

00:15:38.400 --> 00:15:41.900
And if not,
it just asks Document Controller, "Hey,

00:15:41.900 --> 00:15:45.420
is there an importer for
that type?" And if there is,

00:15:45.420 --> 00:15:50.430
it just invokes this method,
which is defined on the importer class.

00:15:50.440 --> 00:15:52.310
I'll show you that.

00:15:58.760 --> 00:16:01.580
From data,
get graphics and the print info and

00:16:01.670 --> 00:16:04.010
an error if something goes wrong.

00:16:04.030 --> 00:16:05.440
So it's very specific to Sketch.

00:16:05.440 --> 00:16:09.510
And the other thing that an importer
is responsible for telling its

00:16:09.870 --> 00:16:13.380
users is what type it is it's
importing and what the valid file

00:16:13.380 --> 00:16:15.760
name extensions are for that type.

00:16:15.790 --> 00:16:20.280
In Sketch, updating the file format,
the file name extension is now Sketch 2.

00:16:20.280 --> 00:16:24.850
This importer understands
the old Sketch file name

00:16:24.970 --> 00:16:28.680
extension and also Draw 2,
which is an old sketch

00:16:28.680 --> 00:16:28.680
file name extension.

00:16:28.700 --> 00:16:30.370
an older one.

00:16:33.830 --> 00:16:37.570
So if we were to run this,
this wouldn't work right now,

00:16:37.620 --> 00:16:40.640
because we haven't overwritten any of
the methods that I was just telling

00:16:40.640 --> 00:16:45.180
you about to tell NSDocumentController
about the types that are available now.

00:16:45.180 --> 00:16:48.960
So let's add overrides for that.

00:16:53.230 --> 00:17:00.990
And the first thing to
do is in NSDocument,

00:17:00.990 --> 00:17:03.370
override a couple of methods.

00:17:05.340 --> 00:17:12.940
Readable types, SKT Draw Document,
in addition to the types

00:17:13.190 --> 00:17:17.500
that NSDocument has found by rooting
around in your Info.plist can also

00:17:17.620 --> 00:17:21.390
read the types that are supported
by various importers that are

00:17:21.390 --> 00:17:22.600
installed in the application.

00:17:22.600 --> 00:17:25.960
So it gets the list of
importers and asks each one,

00:17:25.960 --> 00:17:29.690
you know, what's your supported type and
adds it to the list and returns

00:17:29.730 --> 00:17:31.290
that to who's ever asking.

00:17:31.290 --> 00:17:34.850
And typically who's ever
asking is NSDocumentController.

00:17:34.850 --> 00:17:37.100
You're not supposed to have to care.

00:17:37.100 --> 00:17:39.240
And the same thing for writable types.

00:17:39.260 --> 00:17:43.110
It just roots around in the list of
exporters asking each one what's your

00:17:43.110 --> 00:17:45.100
supported type and adds it to the list.

00:17:45.100 --> 00:17:49.100
But that by itself would not be enough.

00:17:49.100 --> 00:17:52.650
It's required, but it's not enough.

00:17:56.770 --> 00:18:03.160
We also have to override a couple,
excuse me,

00:18:06.700 --> 00:18:12.700
A couple of NSDocumentController methods,
too.

00:18:12.990 --> 00:18:16.930
So NSDocumentController
has a few methods.

00:18:17.520 --> 00:18:23.000
The default implementations of all of
which just root around in information

00:18:23.000 --> 00:18:26.010
found in your application's Info.plist.

00:18:26.250 --> 00:18:32.650
But if we want to support
different file extensions,

00:18:32.650 --> 00:18:36.450
we're going to have to tell it how
to figure out the document type

00:18:36.450 --> 00:18:38.500
from a specific file extension.

00:18:38.740 --> 00:18:41.870
And here we just use the
importers to accomplish that.

00:18:41.970 --> 00:18:46.870
So we get the list of importers and

00:18:49.500 --> 00:18:54.330
And we check to see if this particular
file name extension is in the set of

00:18:54.330 --> 00:18:59.700
extensions supported by the plugin,
and if so, we say that the type for this

00:18:59.780 --> 00:19:03.790
file extension is the one
supported by this importer.

00:19:06.220 --> 00:19:09.100
And another thing we have to
override is Document Class for Type.

00:19:09.260 --> 00:19:12.100
Our plugin architecture is
not that super whiz-bang,

00:19:12.160 --> 00:19:16.100
so it doesn't let you add new subclasses
in this document to the application.

00:19:16.100 --> 00:19:22.080
But what it does say is that for any
particular type that's been found

00:19:22.080 --> 00:19:26.250
using importers and stuff like that,
the Document Class is going

00:19:26.360 --> 00:19:30.100
to be SKT DrawDocument,
because that still gets instantiated

00:19:30.100 --> 00:19:32.530
for different importer types.

00:19:32.760 --> 00:19:37.180
and file extensions from type
is used in the save panel,

00:19:37.180 --> 00:19:40.820
oh, and also in the open,
when presenting the open panel.

00:19:41.210 --> 00:19:43.900
For a particular type,
what is the list of file extensions

00:19:43.900 --> 00:19:45.840
that corresponds to that type?

00:19:46.700 --> 00:19:51.750
Let's build that and run it.

00:20:12.480 --> 00:20:16.650
So this particular file
that we're opening,

00:20:17.830 --> 00:20:17.830
an old...

00:20:18.640 --> 00:20:19.370
There we go.

00:20:19.500 --> 00:20:21.320
An old sketch document that sketch.

00:20:21.440 --> 00:20:25.570
This isn't--oh, hey,
you know what I forgot to do.

00:20:26.580 --> 00:20:30.700
If you're going to support
a plugin architecture,

00:20:30.700 --> 00:20:34.240
you really ought to build the plugins.

00:20:38.000 --> 00:20:39.630
Let's try that again.

00:20:39.690 --> 00:20:42.090
So that's what happens,
so you get to see what happens

00:20:42.100 --> 00:20:43.400
when there is no plugin available.

00:20:43.400 --> 00:20:46.890
In the open panel, it's disabled.

00:20:47.300 --> 00:20:49.240
Now when we make the plugin available,
when we built it,

00:20:49.240 --> 00:20:52.510
we just dropped it in the spot
where Sketch could find it.

00:20:53.900 --> 00:20:54.960
There we go.

00:20:54.960 --> 00:20:59.890
Now this file with the old file
name extension on it is recognized.

00:20:59.900 --> 00:21:04.200
So, and it opens just fine.

00:21:13.430 --> 00:21:15.290
So that's it for importers.

00:21:15.300 --> 00:21:20.890
So what you just saw.

00:21:20.900 --> 00:21:24.420
I'd already added a simple
plugin architecture to Sketch.

00:21:24.420 --> 00:21:27.480
I didn't really walk you through
all the code and detail of how

00:21:27.480 --> 00:21:29.870
I designed that very simple stuff.

00:21:29.880 --> 00:21:32.350
Well, it wasn't that simple,
but how I designed that

00:21:32.350 --> 00:21:33.900
relatively straightforward stuff.

00:21:33.920 --> 00:21:38.160
We hooked it up so that it could be
used in document opening and saving

00:21:38.160 --> 00:21:42.380
by overriding the NSDocumentController
and NSDocument methods that are invoked

00:21:42.380 --> 00:21:44.260
when the app kit needs information.

00:21:44.260 --> 00:21:47.760
And now it reliably invokes
those overridden methods.

00:21:49.840 --> 00:21:51.640
So autosaving.

00:21:51.790 --> 00:21:53.680
More new API that we introduced in Tiger.

00:21:53.680 --> 00:21:57.470
It's a feature of NS Document.

00:22:00.170 --> 00:22:02.870
What it does is it helps the user,
it's the same thing you've seen

00:22:02.870 --> 00:22:05.340
in a number of other applications,
it helps the user recover from

00:22:05.410 --> 00:22:10.220
things like application crashes,
perhaps caused by poorly written plugins,

00:22:10.220 --> 00:22:13.820
power failures, and things like that.

00:22:13.870 --> 00:22:17.130
Things like that, I mean, you know,
kernel panics, cosmic rays,

00:22:17.140 --> 00:22:18.210
things like that.

00:22:18.220 --> 00:22:20.660
So, it's not on by default.

00:22:20.660 --> 00:22:23.080
We explored the idea of like, hey,
is this a feature we can add to

00:22:23.160 --> 00:22:25.690
every NS Document-Based app and
they'll just get it for free?

00:22:26.320 --> 00:22:28.660
And no, we couldn't do that at all.

00:22:28.660 --> 00:22:31.560
So, you have to explicitly turn it on.

00:22:31.560 --> 00:22:33.150
But turning it on is pretty easy.

00:22:33.160 --> 00:22:36.040
Basically,
what turning it on requires is that you

00:22:36.040 --> 00:22:40.050
have to add a little bit of UI for this,
for the preference for this.

00:22:40.050 --> 00:22:41.680
Users don't always want auto-saving.

00:22:41.680 --> 00:22:45.880
And your document saving code has
to follow the rules that have been

00:22:45.880 --> 00:22:48.260
in the documentation for a while.

00:22:48.260 --> 00:22:52.860
For example, in an override of a method
that has write in the name,

00:22:52.860 --> 00:22:55.280
it passes in, you know, a URL.

00:22:56.320 --> 00:23:00.750
Actually, just write the file to that
URL regardless of the current

00:23:00.750 --> 00:23:02.000
location of the document.

00:23:02.100 --> 00:23:05.950
Don't invoke file URL or file name
as it was called in Panther before

00:23:06.060 --> 00:23:07.740
we added a bunch of new API.

00:23:07.790 --> 00:23:10.380
Don't assume anything that
there's a relationship between the

00:23:10.520 --> 00:23:14.190
current document's location and
where we're asking you to write.

00:23:14.220 --> 00:23:16.800
Even before this,
we've been asking you to write in,

00:23:16.830 --> 00:23:22.260
you know, a folder,
a directory inside the temporary folders.

00:23:22.260 --> 00:23:24.620
Then we'd play, you know,
FS Exchange object games

00:23:24.620 --> 00:23:25.760
and things like that.

00:23:25.820 --> 00:23:26.280
So, the final version of the
file would be in the folder.

00:23:26.320 --> 00:23:27.040
You would be happy.

00:23:27.040 --> 00:23:30.690
And, you know, various metadata wouldn't
get stripped off.

00:23:30.720 --> 00:23:35.950
But now with this auto-saving feature,
it's one step more important that

00:23:35.950 --> 00:23:40.220
when NSDocument tells you to write
a file by invoking your override

00:23:40.220 --> 00:23:43.110
of one of the writing methods,
just write it right there

00:23:43.370 --> 00:23:44.840
and don't do anything else.

00:23:44.840 --> 00:23:47.910
So, let me show you.

00:23:47.920 --> 00:23:49.080
I will turn it on and sketch.

00:24:06.850 --> 00:24:06.850
Actually,
it's already turned on in Sketch,

00:24:06.850 --> 00:24:06.850
but let me walk you through
what we did to do that.

00:24:13.430 --> 00:24:15.980
First of all,
we had to add a new preference panel,

00:24:15.980 --> 00:24:17.300
Sketch's first preference.

00:24:17.300 --> 00:24:22.180
A simple checkbox,
whether or not the user wants

00:24:22.180 --> 00:24:25.770
us to autosave documents or not,
and if so, how often.

00:24:25.770 --> 00:24:28.600
And by how often,
I mean from the time that the

00:24:28.600 --> 00:24:32.170
user modifies the document,
how long should NSDocument

00:24:32.170 --> 00:24:34.080
wait before it autosaves.

00:24:34.140 --> 00:24:38.140
If you have it doing it every one second,
it'll get annoying,

00:24:38.290 --> 00:24:43.120
but once an hour leaves a lot of time
to lose work if something goes wrong.

00:24:43.300 --> 00:24:44.330
Thank you.

00:24:44.890 --> 00:24:48.630
So, and the way we set up this UI,
we used bindings.

00:24:48.650 --> 00:24:50.980
It was pretty simple on this half of it.

00:24:51.030 --> 00:24:56.880
The value of this checkbox
is just bound to a key path

00:24:56.970 --> 00:25:00.300
that's in the user defaults,
auto-saving documents, a Boolean value.

00:25:00.300 --> 00:25:06.680
And the value for the delay, you know,
how long before, you know,

00:25:06.680 --> 00:25:09.670
between when the user modifies
a document and it's auto-saved,

00:25:09.680 --> 00:25:13.760
you know, the delay in seconds is also
saved in the user preferences.

00:25:17.570 --> 00:25:20.690
And that's pretty much all it takes
to get that preferences panel up and

00:25:20.710 --> 00:25:22.770
saving stuff in the user defaults.

00:25:22.990 --> 00:25:27.080
Now,
to get stuff out of the user defaults,

00:25:27.140 --> 00:25:29.980
I use bindings in a way that
I guess is kind of novel.

00:25:29.980 --> 00:25:33.300
Not a lot of people have done it yet.

00:25:34.370 --> 00:25:37.600
The problem that has to be solved
is that what you saw in the UI is

00:25:37.600 --> 00:25:39.200
that there's a checkbox and a number.

00:25:39.200 --> 00:25:42.100
But in the API for this
document controller,

00:25:42.100 --> 00:25:44.520
there's just a number,
the autosaving delay.

00:25:44.520 --> 00:25:47.340
And if the delay is zero,
then it doesn't autosave.

00:25:47.380 --> 00:25:49.790
But of course,
that isn't the kind of thing

00:25:49.790 --> 00:25:53.340
you would want to represent in
the UI to the user directly.

00:25:53.340 --> 00:25:55.570
Type a zero if you don't want autosaving.

00:25:55.580 --> 00:25:57.530
Not good enough.

00:25:57.580 --> 00:26:00.600
So we put the checkbox,
we put the custom value.

00:26:00.600 --> 00:26:02.210
So we end up with these two numbers.

00:26:02.400 --> 00:26:04.900
We have to make them,
we end up with these two values.

00:26:04.900 --> 00:26:07.740
We have to make them just one number
to show it on this document controller.

00:26:07.740 --> 00:26:13.310
And the way I set it up is that
I added bindings to my app delegate.

00:26:13.320 --> 00:26:15.580
Why did I put it in the app delegate?

00:26:15.580 --> 00:26:17.310
Because it was there.

00:26:17.320 --> 00:26:20.210
And, you know, this didn't deserve like
a whole other class.

00:26:20.220 --> 00:26:23.910
So, and there's other ways to
do this besides bindings.

00:26:23.920 --> 00:26:26.060
But I was kind of
experimenting a little bit.

00:26:26.120 --> 00:26:29.860
So what we did is an interesting feature.

00:26:29.860 --> 00:26:32.380
What we did is take advantage of an
interesting feature of the default.

00:26:32.380 --> 00:26:33.820
Implementation of key value binding.

00:26:33.820 --> 00:26:36.830
If you bind an object, any doc,
any object,

00:26:36.940 --> 00:26:39.490
even like the app delegate like this.

00:26:41.340 --> 00:26:44.000
And it doesn't have, you know,
binding support already.

00:26:44.000 --> 00:26:48.780
The default implementation of key-value
binding will just use key-value coding

00:26:48.910 --> 00:26:52.000
to set the value as it's changed.

00:26:52.230 --> 00:26:54.630
So we bind our--

00:26:54.960 --> 00:27:04.490
Our app delegate to the user
defaults using this key,

00:27:04.490 --> 00:27:04.490
it's just, it's the same,

00:27:06.500 --> 00:27:09.540
The key is autosaving documents,
and there's another one, autosave delay.

00:27:09.540 --> 00:27:13.470
And we just use the same key that we're
using to put it in the user defaults.

00:27:13.620 --> 00:27:17.490
So we bind the app delegate
directly to the user defaults.

00:27:17.500 --> 00:27:22.000
Now because we bound that,
what that means is that key value binding

00:27:22.000 --> 00:27:27.470
is going to use key value coding to tell
the app delegate when the value changes.

00:27:27.500 --> 00:27:31.400
So we have to be key value coding
compliant for these two keys,

00:27:31.400 --> 00:27:35.500
the autosave documents, yes or no,
and the autosave delay.

00:27:35.500 --> 00:27:40.940
And all we had to do to do
that was to add two methods,

00:27:40.940 --> 00:27:45.500
autosaving documents
and set autosave delay.

00:27:45.500 --> 00:27:51.770
So, and in both cases,
they do the right thing.

00:27:54.750 --> 00:27:58.890
It boils down to an invocation of
this NSDocument controller method,

00:27:58.930 --> 00:28:01.290
setAutoSavingDelay.

00:28:01.700 --> 00:28:05.180
So if autosaving,
then we set the delay to the

00:28:05.180 --> 00:28:06.780
real number of users typed in.

00:28:06.780 --> 00:28:10.400
If that checkbox is not checked,
then we just set it to zero.

00:28:15.140 --> 00:28:21.110
So actually,
you can see these get invoked.

00:28:26.700 --> 00:28:40.700
[Transcript missing]

00:28:41.660 --> 00:28:44.250
I don't know if you
can see this too well,

00:28:44.250 --> 00:28:48.380
but it's invoking our set
autosaving delay method.

00:28:48.380 --> 00:28:52.170
And what happened is basically
the value went from bindings.

00:28:52.220 --> 00:28:55.480
It got set in the user defaults,
and because user defaults

00:28:55.590 --> 00:28:56.800
is KVO compliant,
you know,

00:28:56.800 --> 00:28:59.780
observable for a number of things,
it bounced right back up

00:28:59.780 --> 00:29:03.040
into this bindings that we'd
added to the app delegate.

00:29:03.040 --> 00:29:07.010
So is this definitely the
least code way to do this?

00:29:07.060 --> 00:29:09.440
I'm not really sure,
but at least we didn't have to

00:29:09.440 --> 00:29:15.000
write anything that directly,
you know, read or wrote to user defaults.

00:29:17.130 --> 00:29:20.390
So, and we'll set the value to
something nice and short.

00:29:20.410 --> 00:29:25.610
We're not going to wait a minute
here to see auto saving happen.

00:29:27.250 --> 00:29:30.150
And before we start
pretending to crash the app,

00:29:30.150 --> 00:29:32.760
we should probably save that in defaults.

00:29:38.260 --> 00:29:42.820
And now when the program starts up,
the binding stuff is telling the app

00:29:42.820 --> 00:29:46.660
delegate what the values were that
were stored in the user defaults.

00:29:46.820 --> 00:29:50.040
Okay, so now autosaving is on.

00:29:50.040 --> 00:29:51.830
Let's see it in action.

00:29:52.050 --> 00:29:58.240
Let me leave some space
over here on the desktop.

00:29:58.320 --> 00:30:01.760
I'll open a file on the desktop.

00:30:01.760 --> 00:30:05.010
Oops.

00:30:05.030 --> 00:30:07.890
And just add a few things to it.

00:30:14.820 --> 00:30:17.690
So this is the file we
just saved on the desktop,

00:30:17.700 --> 00:30:19.240
our document.

00:30:19.240 --> 00:30:24.510
Now the document's not modified at all,
but if we modify it by just dragging

00:30:24.520 --> 00:30:26.920
a graphic or something like that,

00:30:27.570 --> 00:30:28.900
and wait three seconds.

00:30:28.940 --> 00:30:32.680
There's the autosave document
contents right next to it.

00:30:34.750 --> 00:30:37.720
So, and this works for
untitled documents too.

00:30:37.740 --> 00:30:46.660
If we go into our home directory and
under library autosave information,

00:30:48.130 --> 00:30:51.180
You can see it's already stored
the property list there where

00:30:51.180 --> 00:30:55.420
it's pointing to this document
that is already auto-saved.

00:30:55.470 --> 00:31:03.900
If we make a new untitled document
and just do anything to it,

00:31:05.260 --> 00:31:08.540
It just gets saved in that same
folder in your home directory.

00:31:08.560 --> 00:31:13.000
So, and let's hear it for the finder
for showing that so quickly.

00:31:16.970 --> 00:31:23.810
So let's crash our app by just-- oh,
there's so many ways to do it.

00:31:26.360 --> 00:31:29.100
Yes.

00:31:29.100 --> 00:31:31.800
So I'll just restart it.

00:31:34.490 --> 00:31:37.160
And there are those two
autosaved documents right back.

00:31:37.160 --> 00:31:39.900
So, and as you can see--

00:31:43.590 --> 00:31:46.180
And as you can see,
the Document Modified button in

00:31:46.190 --> 00:31:50.700
the window close control is set.

00:31:50.700 --> 00:31:54.460
And what that means is that no
matter how much you undo or redo,

00:31:54.460 --> 00:31:57.280
you're never going to get this
document to the point where it's

00:31:57.280 --> 00:32:01.350
not going to ask you if it should
be saved when you close the window.

00:32:02.300 --> 00:32:17.300
[Transcript missing]

00:32:17.680 --> 00:32:24.510
And by the same token,
if you just close a document,

00:32:24.510 --> 00:32:24.510
throw it away,

00:32:25.400 --> 00:32:45.500
[Transcript missing]

00:32:57.690 --> 00:33:01.340
So what you just saw is, you know,
stuck in a demonstration of something

00:33:01.340 --> 00:33:02.840
novel that you can do with bindings.

00:33:02.840 --> 00:33:06.760
And our modified documents
got autosaved automatically.

00:33:06.760 --> 00:33:08.530
And it didn't take a lot of code.

00:33:08.540 --> 00:33:11.550
You know, that code I showed you,
that was all the code I added to

00:33:11.630 --> 00:33:13.000
Sketch to support this feature.

00:33:13.000 --> 00:33:16.120
There was nothing new to do in
NSDocumentController or NSDocument.

00:33:16.120 --> 00:33:18.710
It's just all built into NSDocument.

00:33:18.720 --> 00:33:22.970
Now, there's still nice customization
opportunities for you.

00:33:23.400 --> 00:33:26.100
In Tiger,
we introduced a new kind of save

00:33:26.120 --> 00:33:29.970
operation enumeration that gets passed
around between those different methods.

00:33:29.980 --> 00:33:33.130
So if you want to know whether or not
a particular saving that your document

00:33:33.130 --> 00:33:36.680
is being asked to do is for autosaving
or save or save as or save a copy,

00:33:36.680 --> 00:33:38.690
you can find that out.

00:33:38.790 --> 00:33:42.330
But if you're just doing something
simple that reads and writes,

00:33:42.330 --> 00:33:43.490
it all just works.

00:33:45.700 --> 00:33:47.930
So multiple windows per document.

00:33:47.940 --> 00:33:49.740
This is something that's
always been an AppKit,

00:33:49.770 --> 00:33:53.340
but there's never really been much
of a demonstration of it before.

00:33:54.550 --> 00:33:58.350
An NS document was designed for this,
in contrast to something I'll

00:33:58.400 --> 00:33:59.600
show you right after this.

00:33:59.620 --> 00:34:03.600
Every NS document owns one
or more window controllers.

00:34:03.600 --> 00:34:06.510
So if you have a UI, for example,
I think a popular

00:34:06.540 --> 00:34:10.040
example is when you have,
like, a 3D modeling tool, and there's,

00:34:10.050 --> 00:34:13.240
you know,
the shaded version showing in one window,

00:34:13.240 --> 00:34:17.140
and the 3D, you know,
wireframe in another window,

00:34:17.140 --> 00:34:19.640
and you're showing a bunch of
windows onto the same document,

00:34:19.640 --> 00:34:21.720
and you don't want to really
close the document until

00:34:21.720 --> 00:34:22.840
all the windows are closed.

00:34:23.420 --> 00:34:25.400
This is the kind of UI I'm talking about.

00:34:25.440 --> 00:34:27.860
And also you can see this
in Interface Builder,

00:34:27.860 --> 00:34:30.770
where it has the, you know,
the main window showing you the

00:34:30.770 --> 00:34:32.990
instance view or the class view,
and then the actual windows

00:34:33.050 --> 00:34:33.950
or menus of the app.

00:34:33.980 --> 00:34:37.900
So every document in this architecture
owns one or more window controllers,

00:34:37.900 --> 00:34:40.200
and every window controller has a window.

00:34:40.200 --> 00:34:43.610
Every window controller
points back to its document,

00:34:43.680 --> 00:34:46.160
so it's a bidirectional connection.

00:34:46.160 --> 00:34:50.000
And the interesting thing is that
you can add window controllers

00:34:50.000 --> 00:34:54.320
to an already open document,
whenever you feel like it.

00:34:54.340 --> 00:34:57.530
And the kind of architecture
you end up with looks like this.

00:34:57.540 --> 00:35:02.150
A document controller pointing to,
you know, zero or more documents pointing

00:35:02.150 --> 00:35:07.260
to one or more window controllers,
each of which points to a window.

00:35:11.020 --> 00:35:15.280
And if you're supporting a
multiple windows per document UI,

00:35:15.280 --> 00:35:19.040
you can do a lot of this stuff
without NSDocument's help.

00:35:19.080 --> 00:35:23.540
So why even tell NSDocument
about the window controllers that

00:35:23.640 --> 00:35:24.920
are pointing to the document?

00:35:24.920 --> 00:35:27.350
Well,
it does a bunch of convenient things.

00:35:27.490 --> 00:35:31.050
Number one, at startup time,
it tells the window controller about

00:35:31.050 --> 00:35:33.160
itself to establish a connection.

00:35:33.160 --> 00:35:38.000
It already has a mechanism built in
for when the windows should be shown.

00:35:38.400 --> 00:35:41.090
It tells all of its window
controllers that it knows about

00:35:41.090 --> 00:35:45.290
when the document itself is edited,
so that it can set that little

00:35:45.290 --> 00:35:48.850
window title bar close button thingy.

00:35:48.880 --> 00:35:53.640
And it also does interesting
methods like synchronize window

00:35:53.680 --> 00:35:55.920
title with document name.

00:35:55.920 --> 00:35:59.140
So if you try this in
something like Sketch,

00:35:59.140 --> 00:36:02.700
go ahead and go to the finder with a
document that's open and rename it,

00:36:02.770 --> 00:36:05.680
or turn off file name extension hiding,
or whatever you want.

00:36:05.800 --> 00:36:08.080
And when you switch back to Sketch,
the window title will just

00:36:08.080 --> 00:36:09.210
be updated automatically.

00:36:09.220 --> 00:36:11.480
So this is the kind of stuff it does.

00:36:11.550 --> 00:36:13.300
And of course,
the document will tell all the window

00:36:13.300 --> 00:36:17.690
controllers it knows about to close
themselves when it itself is closed.

00:36:17.700 --> 00:36:21.470
And as far as closing goes, you know,
it has some rules built in

00:36:21.470 --> 00:36:23.150
for what does this mean.

00:36:23.160 --> 00:36:24.100
Are you closing this window?

00:36:24.100 --> 00:36:26.130
Are you closing the document
at the same time or what?

00:36:28.530 --> 00:36:31.980
So as a demo,
let's just real quick enable multiple

00:36:31.980 --> 00:36:34.730
windows for document and sketch.

00:36:44.100 --> 00:36:49.090
And basically all we're doing is
to our window controller class,

00:36:49.110 --> 00:36:53.340
because I didn't think this really
went in the NSDocument subclass,

00:36:53.340 --> 00:36:57.100
even though this particular
action will work there too,

00:36:57.100 --> 00:36:58.000
new document window.

00:36:58.000 --> 00:37:07.130
So all this does is it creates a sibling
window controller and adds it to the

00:37:07.130 --> 00:37:10.330
document and then tells it to show.

00:37:10.830 --> 00:37:13.450
And as a nicety,
for this particular action,

00:37:13.520 --> 00:37:18.580
we did a menu item validation that
tries to put up a window or a menu item

00:37:18.580 --> 00:37:22.040
title that's a little bit descriptive.

00:37:22.140 --> 00:37:29.040
So a new window for a specific
document instead of saying new window.

00:37:29.250 --> 00:37:35.080
So let's run it and open up a document.

00:37:36.910 --> 00:37:39.770
and hold down the Option key
because I made this a

00:37:39.770 --> 00:37:41.200
mini-weight of an alternate.

00:37:41.200 --> 00:37:44.060
And so just new window for our document.

00:37:45.500 --> 00:38:31.500
[Transcript missing]

00:38:31.600 --> 00:38:37.420
So, an NS document nicely enforces
behavior like you close one window,

00:38:37.530 --> 00:38:38.300
Okay, fine.

00:38:38.300 --> 00:38:40.490
The document still has a window.

00:38:40.490 --> 00:38:44.690
So only when you close another
window does it bother putting

00:38:44.690 --> 00:38:46.840
up the save preference.

00:38:49.700 --> 00:38:57.500
[Transcript missing]

00:39:02.510 --> 00:39:06.000
So what you just saw, NSDocument,
you know, we took advantage of a feature

00:39:06.000 --> 00:39:07.600
that NSDocument has always had.

00:39:07.600 --> 00:39:12.950
We just had to add a little
bit of code to trigger it.

00:39:13.760 --> 00:39:18.100
Now, something that's going to
involve a bunch more code is

00:39:18.100 --> 00:39:20.600
multiple documents per window.

00:39:20.650 --> 00:39:24.060
This is the kind of UI where in preview,
if you open up a bunch of

00:39:24.060 --> 00:39:28.820
TIFF documents at once,
it'll open them all up in the same

00:39:28.820 --> 00:39:34.290
window and have a drawer on the side
with a thumbnail and all that stuff.

00:39:34.550 --> 00:39:35.420
And it's tricky.

00:39:35.440 --> 00:39:36.040
I really mean that.

00:39:36.040 --> 00:39:38.360
It's tricky, because then it's
Document Window Controller.

00:39:38.360 --> 00:39:40.080
We're not designed for this.

00:39:40.080 --> 00:39:42.110
But you can do it.

00:39:44.230 --> 00:39:49.580
So, and the things that are in, you know,
the design that makes this difficult

00:39:49.580 --> 00:39:54.640
is the fact that NS documents
create and own window controllers.

00:39:54.640 --> 00:39:57.170
Well, that's a fine pattern
in simple applications,

00:39:57.180 --> 00:40:00.110
but if you have a window
controller that's displaying the

00:40:00.200 --> 00:40:06.150
contents of multiple documents,
you know, that's not a good assumption.

00:40:07.050 --> 00:40:09.400
And then this document controller
doesn't know anything really

00:40:09.400 --> 00:40:10.380
about window controllers.

00:40:10.450 --> 00:40:14.730
All it knows is that it tells
documents that it opens to

00:40:14.730 --> 00:40:16.600
make new window controllers.

00:40:16.600 --> 00:40:20.080
It doesn't do anything,
any of the stuff that we need in this

00:40:20.080 --> 00:40:24.270
case that I'm about to show you about,
you know, managing window controllers.

00:40:24.330 --> 00:40:25.360
When do they get created?

00:40:25.360 --> 00:40:30.160
When do documents get associated
with them and stuff like that.

00:40:32.220 --> 00:40:33.120
So, but that's okay.

00:40:33.120 --> 00:40:36.980
All we have to do is, you know,
make a couple UI decisions,

00:40:36.980 --> 00:40:42.240
make up rules for when new
windows are created and therefore

00:40:42.240 --> 00:40:45.660
new window controllers and what
documents get associated with them.

00:40:45.690 --> 00:40:49.560
And then we have to subclass to make
a smarter document controller class.

00:40:53.200 --> 00:40:54.810
We're also going to have to
deal with some assumptions that

00:40:54.930 --> 00:40:55.980
this window controller makes.

00:40:55.980 --> 00:41:00.640
A window controller,
its default implementation in the AppKit,

00:41:00.640 --> 00:41:02.300
can only point to one document.

00:41:02.300 --> 00:41:05.510
Well, that's not good enough
for what we want to do,

00:41:05.530 --> 00:41:06.870
but that's okay.

00:41:06.880 --> 00:41:11.600
What we have to know is the what's and
the when's of the messages that are

00:41:11.600 --> 00:41:16.810
sent back and forth between document
and window controller so we can override

00:41:16.810 --> 00:41:19.860
some of the methods and things like that.

00:41:20.380 --> 00:41:22.240
The good news is they're all public.

00:41:22.370 --> 00:41:26.510
There's no SPI back chatter secretly
between window controller and documents,

00:41:26.510 --> 00:41:29.770
so we can see everything
that's going on and change it.

00:41:29.860 --> 00:41:34.620
And we'll basically just subclass
to make a smarter window controller.

00:41:37.290 --> 00:41:41.830
And what we'll end up with is this,
an object diagram like this.

00:41:41.840 --> 00:41:46.880
A document controller kind of temporarily
pointing to a window controller.

00:41:46.880 --> 00:41:49.660
You know, it creates it,
adds a bunch of documents to it,

00:41:49.680 --> 00:41:50.690
and then forgets about it.

00:41:50.700 --> 00:41:54.620
But the document controller, as always,
will still keep a pointer

00:41:54.620 --> 00:41:56.180
to a bunch of documents.

00:41:56.180 --> 00:42:00.150
And the window controller will
now point to a bunch of documents,

00:42:00.250 --> 00:42:02.260
and documents will still
point to a window controller.

00:42:02.260 --> 00:42:05.030
And, you know,
the nice thing about what's there in

00:42:05.030 --> 00:42:08.130
the AppKit is that even though it wasn't
designed with this in mind at all,

00:42:08.140 --> 00:42:13.200
the fact that the API is pretty
good and it's nice and public,

00:42:13.260 --> 00:42:16.400
you know,
allows us to rearrange things into an

00:42:16.400 --> 00:42:19.740
object diagram that doesn't look at all
like the last one that we showed for,

00:42:19.750 --> 00:42:22.290
you know, multiple windows per document.

00:42:22.300 --> 00:42:25.690
So let's do that.

00:42:25.730 --> 00:42:27.740
Let's trigger this feature in Sketch.

00:42:41.100 --> 00:42:46.870
So the first thing I want to show
you is the nib that we made for this.

00:42:46.880 --> 00:42:51.510
And for this demo,
this work on Sketch 2 right now,

00:42:51.520 --> 00:42:54.390
I'm not fooling around with
having a drawer with neat

00:42:54.500 --> 00:42:56.620
thumbnails and stuff like that.

00:42:56.650 --> 00:42:59.030
But that would be nice to do someday.

00:42:59.040 --> 00:43:01.630
All I did was use bindings
to add this pop-up.

00:43:01.760 --> 00:43:05.700
This will be our document selector here.

00:43:05.700 --> 00:43:09.960
And if you look at the
bindings that are used in it,

00:43:11.810 --> 00:43:18.700
It binds to the files owner,
which is a window controller,

00:43:18.710 --> 00:43:20.700
and it's binding to
the list of documents.

00:43:20.700 --> 00:43:22.630
That's what it's going to present.

00:43:22.770 --> 00:43:25.330
Specifically,
what the user's going to see is a

00:43:25.330 --> 00:43:31.700
new property that I added to this
document called Notifying Display Name.

00:43:31.700 --> 00:43:34.700
And when the user selects
something in Selected Object,

00:43:34.700 --> 00:43:38.700
that's going to change the
document of the window controller.

00:43:45.890 --> 00:43:49.790
Yeah, and one thing to keep in
mind with that is that,

00:43:49.950 --> 00:43:54.130
you know, this documents property,
this is something that we're adding

00:43:54.130 --> 00:43:56.000
to our subclass of window controllers.

00:43:56.000 --> 00:43:59.810
So, in a key value coding and
observing compliant way so that

00:43:59.810 --> 00:44:01.670
it can be used in a binding.

00:44:04.400 --> 00:44:08.440
And another thing to tell you is that
the reason why we added this notifying

00:44:08.440 --> 00:44:13.000
display name property to our subclass
of NSDocument is because NSDocument

00:44:13.000 --> 00:44:17.460
has a display name property already,
but it's not KBO compliant for it.

00:44:17.590 --> 00:44:20.220
It doesn't send out any
notifications when it changes.

00:44:20.220 --> 00:44:23.400
So to get around that,
because you want to show the

00:44:23.400 --> 00:44:27.860
real display name to the user,
we just added this other property.

00:44:27.860 --> 00:44:29.220
It was pretty easy.

00:44:36.810 --> 00:44:39.680
So SKT Document Controller.

00:44:39.680 --> 00:44:42.170
Now, I'd mentioned that we have to
figure out some rules about when

00:44:42.170 --> 00:44:47.460
we're going to batch windows or
documents into single windows.

00:44:47.460 --> 00:44:51.850
And what we've done here to
implement those rules in our subclass

00:44:51.850 --> 00:44:54.720
Venice Document Controller is
override the method that gets

00:44:54.720 --> 00:44:55.940
invoked for each document.

00:44:55.940 --> 00:44:59.980
Open document with contents URL,
display error.

00:44:59.980 --> 00:45:04.500
And what we do is if--
because in this method,

00:45:04.500 --> 00:45:09.880
we don't really know if this document
is going to be just open by itself.

00:45:09.880 --> 00:45:11.720
The user just double
clicked on it by itself.

00:45:11.720 --> 00:45:15.660
Or it's part of a big batch
that the user opened in Finder.

00:45:15.670 --> 00:45:18.200
And at this point,
you may be asking yourself a question,

00:45:18.200 --> 00:45:20.090
well,
why doesn't a document controller have

00:45:20.280 --> 00:45:23.680
open documents with contents of URLs?

00:45:23.680 --> 00:45:25.440
And that's a good question.

00:45:25.690 --> 00:45:27.980
But it doesn't have
such a method right now.

00:45:28.040 --> 00:45:30.390
So we have to do a little
bit of coalescing with these

00:45:30.390 --> 00:45:32.370
files as they get opened.

00:45:33.040 --> 00:45:38.640
So what we do is we open
the documents right away,

00:45:38.640 --> 00:45:40.640
but we don't display them.

00:45:40.640 --> 00:45:43.900
We put that off until we know how
many documents need to get displayed.

00:45:43.900 --> 00:45:46.190
And by display,
I mean having a window open on it.

00:45:46.200 --> 00:45:51.960
So what we do is we just collect them in
a mutable array and schedule something

00:45:51.960 --> 00:45:57.090
to happen at the end of the run loop,
you know, display pending documents.

00:46:05.990 --> 00:46:15.900
What Display Pending Documents does
is if the document count is one,

00:46:15.900 --> 00:46:18.140
you know, the user only clicked on
one document at a time,

00:46:18.140 --> 00:46:20.880
it just does what a document
controller would have done if we

00:46:20.880 --> 00:46:24.960
hadn't fooled with it by overriding,
you know, open document contents URL.

00:46:24.960 --> 00:46:27.420
Just make window controllers
and show windows.

00:46:27.810 --> 00:46:31.370
Now if we have a bunch
of documents to open,

00:46:33.890 --> 00:46:41.160
What we do is we create one
window controller and we add it

00:46:41.370 --> 00:46:42.580
to each one of the documents.

00:46:42.580 --> 00:46:46.550
So it's called Add Window Controller,
but really we're just,

00:46:46.550 --> 00:46:49.800
but there's really only going to be
one window controller per document,

00:46:49.800 --> 00:46:51.980
even though there's multiple
documents per window controller.

00:46:51.980 --> 00:46:56.560
So basically we're just telling the
document controller about each one,

00:46:56.560 --> 00:46:58.410
I'm sorry,
we're telling each document about

00:46:58.410 --> 00:46:59.650
the window controller it should use.

00:46:59.730 --> 00:47:01.240
And it's the same window
controller over and over.

00:47:02.150 --> 00:47:04.530
And then we make the first document
the current one after all that.

00:47:04.540 --> 00:47:07.800
That's the one that the user would
expect to pop up in the front.

00:47:07.800 --> 00:47:09.730
And then we show the window controller.

00:47:17.400 --> 00:47:20.990
So we also created our own
subclass of window controller

00:47:21.000 --> 00:47:25.590
here just for this purpose,
with a nice long descriptive name.

00:47:28.620 --> 00:47:35.200
And just to introduce it, you know,
this is setting up a bunch of

00:47:35.200 --> 00:47:37.120
bindings with the graphic view.

00:47:37.120 --> 00:47:40.210
One of the design decisions we
made is that there would just

00:47:40.210 --> 00:47:43.880
be one graphic view per window,
and what it was being displayed

00:47:43.880 --> 00:47:48.120
would be bound to the current
document of the window controller,

00:47:48.120 --> 00:47:52.310
and if the current document changes,
that's fine.

00:47:53.030 --> 00:47:59.840
So, you know, the graphic view is bound
to a keypath document.crawl,

00:47:59.840 --> 00:48:09.870
and if the current document changes,
that's fine.

00:48:16.770 --> 00:48:20.580
And that's just regular stuff
in WindowDidLoad that we

00:48:20.580 --> 00:48:23.350
would have done for Sketch,
whether it supported multiple

00:48:23.350 --> 00:48:25.590
windows per document or not.

00:48:55.980 --> 00:48:55.980
So here in setDocument,
this is pretty interesting.

00:48:55.980 --> 00:48:55.980
NSDocument always invokes this
method for each one of the window

00:48:55.980 --> 00:48:55.980
controllers that is added to it.

00:48:55.980 --> 00:48:55.980
And we really have to take advantage of,
you know, what's being invoked when

00:48:55.980 --> 00:48:55.980
information like that.

00:48:55.980 --> 00:48:55.980
So we do a couple things.

00:48:55.980 --> 00:48:55.980
Number one,
NSWindowController is KVO compliant.

00:48:55.980 --> 00:48:55.980
I'm sorry,
this particular window controller

00:48:55.980 --> 00:48:55.980
is KVO compliant for something
called the graphics controller,

00:48:55.980 --> 00:48:55.980
which is the NSDocument.

00:48:56.000 --> 00:48:59.170
So we have one NSRA controller
that the graphic view is bound

00:48:59.240 --> 00:49:01.000
to so it can get its selection.

00:49:01.180 --> 00:49:04.800
Well, we want to store selection
on a per-document basis,

00:49:04.800 --> 00:49:07.880
so we have one
NSRA controller per document.

00:49:07.880 --> 00:49:11.560
And here, this is just the KVO compliant
way to tell the graphic viewer,

00:49:11.560 --> 00:49:15.310
whoever is bound to this, that, you know,
this graphics controller thing

00:49:15.410 --> 00:49:18.690
is going to change because the
current document is going to change

00:49:18.710 --> 00:49:20.460
because we're in setDocument.

00:49:21.870 --> 00:49:29.840
And the first thing we do when a document
is set on the window controller is,

00:49:29.840 --> 00:49:31.740
because we can't assume that
there's just one document,

00:49:31.740 --> 00:49:35.700
we add the document to the
list that we're maintaining.

00:49:35.700 --> 00:49:38.200
And we do it in a KVO-compliant way.

00:49:38.200 --> 00:49:42.360
You know, this method name,
the fact that it matches

00:49:42.360 --> 00:49:46.940
the KVC-compliant method
name for documents matters.

00:49:47.350 --> 00:49:49.350
Now that we've invoked it,
anybody who's observing

00:49:49.350 --> 00:49:51.640
the set of documents,
like that pop-up that you

00:49:51.730 --> 00:49:54.470
saw in the main window,
will hear about the change

00:49:54.470 --> 00:49:55.980
to the list of documents.

00:49:55.980 --> 00:49:59.020
And they'll also hear about the
change in the current document.

00:50:05.040 --> 00:50:10.690
And here I'll just show you real
quick here in Insert Object.

00:50:12.140 --> 00:50:14.600
This is what I was talking about with,
number one,

00:50:14.600 --> 00:50:19.240
recording the list of documents,
and then also creating a new array

00:50:19.240 --> 00:50:22.450
controller that goes with the document.

00:50:28.160 --> 00:50:31.290
And then an SKT draw document.

00:50:31.400 --> 00:50:35.840
Just a few more things we have to
override to make all this work.

00:50:38.050 --> 00:50:41.840
The first one is that we have to
disable some unfortunate behavior

00:50:41.840 --> 00:50:44.900
in NSDocument's addWindowController.

00:50:44.900 --> 00:50:49.660
What it does is whenever you
invoke addWindowController,

00:50:49.660 --> 00:50:53.890
for some reason,
it looks to see if there's another

00:50:53.890 --> 00:50:57.240
document already on that window
controller and just kicks it off.

00:50:57.280 --> 00:50:59.740
Just makes it, you know,
tells it to go away.

00:50:59.740 --> 00:51:03.080
And sends it setDocumentNill.

00:51:03.080 --> 00:51:04.650
Well, we don't want that to happen.

00:51:04.660 --> 00:51:07.100
So we just added a quick check.

00:51:08.000 --> 00:51:09.290
Um...

00:51:09.650 --> 00:51:12.780
If we're in the middle
of add window controller,

00:51:12.780 --> 00:51:13.920
or I'm sorry, here.

00:51:13.920 --> 00:51:16.940
If we're in the middle
of add window controller,

00:51:16.980 --> 00:51:19.620
if we're not in the middle of add
window controller for some other window,

00:51:19.650 --> 00:51:22.710
for some other document,
then only then do we do the

00:51:22.710 --> 00:51:24.510
remove window controller.

00:51:25.940 --> 00:51:28.420
So this is what I was talking
about with the what's and

00:51:28.420 --> 00:51:31.270
when's of what gets invoked.

00:51:33.580 --> 00:51:37.680
Now another thing that we have
to tackle with this is we have to

00:51:37.680 --> 00:51:41.740
override the sentence document method
should close window controller,

00:51:41.930 --> 00:51:44.060
delegate should close
selector context info.

00:51:44.060 --> 00:51:47.540
Because any particular document,
you know,

00:51:47.540 --> 00:51:51.340
the default implementation assumes that
the document owns the window controller.

00:51:51.340 --> 00:51:54.060
Well, it doesn't really in this case.

00:51:54.060 --> 00:51:58.200
So we had to make our document subclass
a little bit smarter than that.

00:52:00.490 --> 00:52:05.680
And what it does is it basically invokes
the default implementation in a way

00:52:05.680 --> 00:52:11.390
that makes sure that it gets called
back before passing it on to whoever

00:52:11.390 --> 00:52:14.590
was calling that in the first place.

00:52:14.600 --> 00:52:18.350
So, and basically it tells
whoever was calling,

00:52:18.350 --> 00:52:22.440
no, don't close the window controller,
but then it goes ahead and

00:52:22.540 --> 00:52:24.280
closes the document anyway,
because that's the right

00:52:24.340 --> 00:52:25.160
thing to do at this point.

00:52:32.200 --> 00:52:37.680
Something else we have to add to the
subclass of NSDocument is we have

00:52:37.680 --> 00:52:42.380
to tell any window controllers that
are attached to the document that

00:52:42.380 --> 00:52:44.070
this document is about to close.

00:52:44.070 --> 00:52:48.950
And we just added a new method to
our own window controller class.

00:52:53.300 --> 00:52:58.370
And what it does is very simple.

00:52:58.400 --> 00:53:02.520
It just records that there's a
document being closed so that when

00:53:02.520 --> 00:53:06.640
it itself gets a close message,
it knows that it's coming

00:53:06.770 --> 00:53:09.000
from a specific document.

00:53:09.000 --> 00:53:12.340
A little bit of internal knowledge,
only NS document ever sends the

00:53:12.400 --> 00:53:14.420
closed message to window controllers.

00:53:14.420 --> 00:53:21.340
So this is the kind of stuff you have
to know to do this kind of interface.

00:53:21.340 --> 00:53:26.080
So, yeah.

00:53:26.080 --> 00:53:30.720
So after all that, let's run this.

00:53:30.720 --> 00:53:38.220
And let's make a few more copies.

00:53:52.930 --> 00:53:55.760
So we open all those,
and the document controller

00:53:55.900 --> 00:53:57.190
figured out that,
hey, we're opening a bunch

00:53:57.270 --> 00:54:00.700
of documents at once,
and opened them all in the same window.

00:54:00.700 --> 00:54:06.540
And this pop-up is just bound to a
property of the window controller.

00:54:13.980 --> 00:54:13.980
And it's just changing which--what
the current document is.

00:54:13.980 --> 00:54:13.980
And it's the same graphic
view in each case.

00:54:14.600 --> 00:54:16.560
And as you notice,
we took the time to make an

00:54:16.560 --> 00:54:26.150
array controller per document
so that we have selection that

00:54:26.150 --> 00:54:29.190
tracks the document properly.

00:54:31.130 --> 00:54:32.990
So, oh, and one other thing.

00:54:33.130 --> 00:54:36.200
Something I've seen people do
is overriding NSDocument display

00:54:36.200 --> 00:54:39.990
name when they could be overriding

00:54:40.380 --> 00:54:44.040
This name,
Window Title for Document Display Name.

00:54:44.080 --> 00:54:48.640
This is what we overrode to just put
this little indicator here about,

00:54:48.720 --> 00:54:52.580
you know, which document is which.

00:54:58.810 --> 00:55:00.890
And as you close them,
they just get removed

00:55:01.000 --> 00:55:01.900
from the list properly.

00:55:01.900 --> 00:55:08.230
And if you have to save, you can do that.

00:55:08.240 --> 00:55:16.350
So, and then when you close the last one,
of course, the window disappears.

00:55:18.420 --> 00:55:21.730
That's it for multiple
windows per document.

00:55:21.740 --> 00:55:24.280
Multiple documents per window.

00:55:31.830 --> 00:55:36.960
So what you just saw,
in contrast to contrast it with

00:55:36.960 --> 00:55:40.080
the earlier thing you saw with
multiple windows per document,

00:55:40.080 --> 00:55:44.150
these two things together could be a
good example of following the precept of,

00:55:44.190 --> 00:55:46.850
you know, simple things,
make simple things simple

00:55:46.850 --> 00:55:48.360
and complex things possible.

00:55:48.360 --> 00:55:52.120
You know, multiple windows on one
document was really simple.

00:55:52.120 --> 00:55:54.930
We just had to add one method
to trigger the feature and,

00:55:54.940 --> 00:55:59.060
you know, a validation method because we
wanted the menu item to look just so.

00:56:00.370 --> 00:56:03.300
This last thing we did,
multiple documents per window,

00:56:03.300 --> 00:56:05.490
as you can see, was a bunch more work.

00:56:05.600 --> 00:56:08.370
But we could do it,
and we didn't have to use any

00:56:08.410 --> 00:56:10.200
SPI or anything like that.

00:56:10.220 --> 00:56:14.370
Just you needed to know
a few internal details,

00:56:14.450 --> 00:56:17.040
but you know them now, so.

00:56:18.800 --> 00:56:22.860
So, for more information, documentation,
sample code, and other resources,

00:56:22.940 --> 00:56:24.420
the typical URL.

00:56:24.420 --> 00:56:27.730
So, the sample code that I've
just been showing you isn't on

00:56:27.730 --> 00:56:29.000
the disk image you have yet.

00:56:29.000 --> 00:56:32.480
So, and it's probably not going to
be available any time this week

00:56:32.530 --> 00:56:36.160
because it has to go through
this DTS sample code process,

00:56:36.160 --> 00:56:38.870
which sounds quite grueling,
but probably just boils

00:56:38.940 --> 00:56:40.360
down to a bunch of emails.

00:56:40.360 --> 00:56:44.010
But eventually, the end result of this
will be that Sketch,

00:56:44.010 --> 00:56:47.240
the sample code,
is going to be up on the DTS website,

00:56:47.860 --> 00:56:51.040
and I can, you know,
update it and get new things out to

00:56:51.200 --> 00:56:55.200
you without having to wait for the
next major shipping release or the

00:56:55.200 --> 00:56:56.980
next WWDC or something like that.

00:56:57.070 --> 00:57:02.500
So, now that we've rewritten Sketch and
it's being worked on rather actively,

00:57:02.500 --> 00:57:05.510
you should start to see a bunch
of new things appear in it.

00:57:07.210 --> 00:57:09.490
So who to contact for more information?

00:57:09.500 --> 00:57:13.080
The person to point you in the right
direction for stuff is Matt Formica,

00:57:13.120 --> 00:57:16.760
mformica@apple.com.

00:57:17.460 --> 00:57:19.680
and related sessions.

00:57:19.680 --> 00:57:23.160
I would recommend the
Cocoa Tiger Makeover

00:57:23.160 --> 00:57:25.440
later on this afternoon.

00:57:25.440 --> 00:57:27.730
And also, oh,
something I left out is I did get

00:57:27.730 --> 00:57:31.510
permission to give away copies of the
sketch sample code as it is right now.

00:57:31.510 --> 00:57:34.150
So if you catch me in that
Cocoa Tiger Makeover lab,

00:57:34.170 --> 00:57:38.310
I'll plug in my iPod shuffle to
your computer and you can have

00:57:38.310 --> 00:57:41.740
a copy of everything that we've
just been looking at even before

00:57:41.740 --> 00:57:43.340
it goes through all the review.

00:57:43.340 --> 00:57:47.040
So, and of course on Friday morning is
the feedback session so you can share

00:57:47.040 --> 00:57:48.910
your opinions about whatever you like.