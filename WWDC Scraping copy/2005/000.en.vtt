WEBVTT

00:00:00.340 --> 00:00:03.690
Ladies and gentlemen,
please welcome Vice President of

00:00:03.700 --> 00:00:07.530
Software Engineering,
Bertrand Serlet.

00:00:15.540 --> 00:00:16.340
Good afternoon.

00:00:16.340 --> 00:00:21.680
It's a pleasure to be here with
you on this very memorable day,

00:00:21.680 --> 00:00:24.650
as I'm sure you've noticed this morning.

00:00:24.900 --> 00:03:23.500
[Transcript missing]

00:03:24.580 --> 00:03:29.100
So with this,
I'd like to turn to my colleague,

00:03:29.120 --> 00:03:31.570
Scott Forstal,
who heads Platform Experience,

00:03:31.680 --> 00:03:35.370
to tell us more about best practices.

00:03:41.050 --> 00:03:44.140
How's everyone doing?

00:03:44.230 --> 00:03:48.480
Is the food better this
year than last year?

00:03:49.390 --> 00:03:51.660
I had nothing to do with it.

00:03:51.690 --> 00:03:53.710
All right, as Bertrand said,
we're going to talk about

00:03:53.950 --> 00:03:55.260
best practices today.

00:03:55.270 --> 00:03:58.690
Now, had we given this talk a year ago,
we would have talked about the

00:03:58.690 --> 00:04:03.360
top 10 best practices for building
a killer Mac OS X application.

00:04:03.380 --> 00:04:05.840
And then Steve made this big
announcement this morning.

00:04:05.880 --> 00:04:08.560
And so, well, watch this.

00:04:08.610 --> 00:04:12.260
STEVE BAZYL: The numbers all go to 11.

00:04:12.260 --> 00:04:14.190
These go to 11.

00:04:15.340 --> 00:04:20.060
That's right, this year our list of
best practices goes to 11.

00:04:20.060 --> 00:04:22.630
And we will start off with
the new best practice,

00:04:22.750 --> 00:04:25.420
number 11, to be processor independent.

00:04:25.420 --> 00:04:28.400
Bertrand said we're going
to have some fun with cars,

00:04:28.400 --> 00:04:31.250
so let's start with an analogy
and we will beat it to death

00:04:31.340 --> 00:04:32.540
over the next two hours.

00:04:32.560 --> 00:04:35.220
We'll start off,
if you even think about the

00:04:35.220 --> 00:04:39.320
Mac as being this great car,
right, this beautiful great car.

00:04:39.320 --> 00:04:42.320
And inside we've had this engine,
the PowerPC engine,

00:04:42.690 --> 00:04:45.820
which has done a wonderful job for
us for the last decade and will

00:04:45.890 --> 00:04:47.620
continue to for the next year or so.

00:04:49.400 --> 00:04:53.980
But now, as we look out to the future,
we know we want to add another

00:04:54.090 --> 00:04:56.820
flavor of the exact same car,
just with a different engine.

00:04:56.820 --> 00:05:01.510
So we have one car has a PowerPC engine,
one car has an Intel engine.

00:05:01.520 --> 00:05:03.620
But to the consumer,
when you look at the cars,

00:05:03.620 --> 00:05:05.770
they look the same, and that's important.

00:05:05.780 --> 00:05:07.740
So what does that mean to you?

00:05:07.760 --> 00:05:11.510
You've all been writing these
great applications for Mac OS X,

00:05:11.830 --> 00:05:12.970
which run on PowerPC.

00:05:13.760 --> 00:05:17.800
We're asking you to take that same
application and make a version of it

00:05:17.890 --> 00:05:20.510
which runs on Macs running Intel as well.

00:05:22.760 --> 00:05:27.140
Now after this morning's announcement,
some of you look like this, right?

00:05:27.140 --> 00:05:29.860
Some were pretty happy.

00:05:30.070 --> 00:05:35.290
Some of you look like that,
and I saw a few of you who

00:05:35.290 --> 00:05:39.980
looked a little like this.

00:05:41.230 --> 00:05:43.540
So what you're all asking yourself,
right?

00:05:43.720 --> 00:05:46.090
You're puzzled over,

00:05:46.290 --> 00:05:48.460
How much work is it going to be?

00:05:48.550 --> 00:05:49.700
This is what you're caring about.

00:05:49.770 --> 00:05:53.220
How much work is it going to be
for you to take your application,

00:05:53.280 --> 00:05:56.580
which runs on PowerPC,
and make it run on Intel as well?

00:05:56.650 --> 00:05:58.270
The great answer is very little.

00:05:58.320 --> 00:06:04.310
But the real answer is it depends.

00:06:07.870 --> 00:06:10.530
We have a good art department.

00:06:10.800 --> 00:06:11.830
So what does it depend on?

00:06:11.970 --> 00:06:15.780
It really depends on the type of
project that you're working on.

00:06:16.020 --> 00:06:18.700
So I'm going to split these into
four different project types.

00:06:19.010 --> 00:06:21.660
It's a different four than
Steve split them in this morning,

00:06:21.660 --> 00:06:22.550
but it's very close.

00:06:22.760 --> 00:06:25.910
I'm going to add a little
geek factor for number two.

00:06:26.480 --> 00:06:30.650
The first type of project are
scripts and Java projects.

00:06:30.780 --> 00:06:34.710
So this is all of your standard
shell script languages right

00:06:34.710 --> 00:06:36.940
from C# to Bash to Corn.

00:06:36.940 --> 00:06:39.720
There'll be a rumble outside to
figure out which one's the best.

00:06:39.750 --> 00:06:43.880
But it's all the standard
shell scripting languages.

00:06:43.910 --> 00:06:46.620
Then the higher level scripting
languages from Perl to Ruby,

00:06:46.620 --> 00:06:49.970
again, I'm sure there's camps that
will fight over Python.

00:06:50.200 --> 00:06:53.610
We have the higher level
scripting languages like

00:06:53.610 --> 00:06:56.090
AppleScript and JavaScript.

00:06:56.450 --> 00:07:01.000
Even Automator with its workflows,
those workflows are scripts.

00:07:01.000 --> 00:07:03.360
So these all count under
the scripting languages.

00:07:03.360 --> 00:07:07.430
And surprising to some,
even dashboard widgets are scripts.

00:07:07.430 --> 00:07:09.990
So they're really just web pages
with JavaScript for the animation.

00:07:09.990 --> 00:07:12.860
So all of those fit into
the scripting part of this.

00:07:12.950 --> 00:07:14.270
Now I said it was Java and scripts.

00:07:14.270 --> 00:07:18.120
Java, you know, there's thousands and
thousands of applications.

00:07:18.120 --> 00:07:21.420
Many of you have probably wasted
many hours on Yahoo Games.

00:07:21.420 --> 00:07:25.060
So all the Java applications.

00:07:25.760 --> 00:07:27.460
So that's the first category.

00:07:27.460 --> 00:07:32.520
The great thing about this first
category is they all just work.

00:07:32.520 --> 00:07:33.240
Right?

00:07:33.370 --> 00:07:35.810
They all,
they're platform independent by design

00:07:35.860 --> 00:07:39.360
because scripting languages in Java,
they're either interpreted or

00:07:39.360 --> 00:07:41.040
they're just in time compiled.

00:07:41.040 --> 00:07:42.950
They have intermediate languages.

00:07:42.960 --> 00:07:46.000
They're meant not to have anything
specific to the binary type

00:07:46.080 --> 00:07:47.760
they run on in them themselves.

00:07:47.760 --> 00:07:49.020
So all of these just work.

00:07:49.120 --> 00:07:49.500
Yay.

00:07:49.500 --> 00:07:51.540
So all the scripting people can leave.

00:07:51.540 --> 00:07:52.450
You're done.

00:07:55.220 --> 00:07:56.290
Unix projects.

00:07:56.290 --> 00:07:59.820
So these are, you know,
all your X11 applications,

00:07:59.820 --> 00:08:01.830
a lot of your GNU applications.

00:08:01.830 --> 00:08:06.490
In fact, if you look out on SourceForge,
it lists over 28,000 of

00:08:06.490 --> 00:08:08.300
these types of projects.

00:08:08.410 --> 00:08:11.200
So second level are Unix projects.

00:08:11.250 --> 00:08:14.250
Most of these projects are
already cross-platform.

00:08:14.380 --> 00:08:17.070
They already run on
Intel and other processors.

00:08:17.070 --> 00:08:20.300
And so the time to port most of
these is really going to be the

00:08:20.330 --> 00:08:23.850
time it takes you to copy your
source over and recompile it.

00:08:24.010 --> 00:08:24.310
That's it.

00:08:25.890 --> 00:08:29.080
The third type of project
are Cocoa applications.

00:08:29.260 --> 00:08:32.900
So this includes a lot of the new
applications coming to Mac OS X.

00:08:32.900 --> 00:08:35.650
A lot of the new ones
are written in Cocoa.

00:08:36.020 --> 00:08:39.460
And we'll talk a little bit more
about how long it takes to do these.

00:08:39.610 --> 00:08:42.050
Steve this morning said a few days.

00:08:42.050 --> 00:08:43.470
As you'll see, it could be less.

00:08:43.470 --> 00:08:46.220
And the last are Carbon applications.

00:08:46.220 --> 00:08:48.640
And of course,
this is the stable of applications

00:08:48.750 --> 00:08:51.500
which defines the Mac,
has defined the Mac for a long,

00:08:51.500 --> 00:08:52.240
long time.

00:08:53.700 --> 00:08:56.380
So again,
it depends how much of Xcode you're

00:08:56.380 --> 00:09:00.280
using and whether your application
is cross-platform already to

00:09:00.410 --> 00:09:04.550
determine how long it's going to
take for you to move these across.

00:09:04.560 --> 00:09:08.200
So throughout the rest of this talk,
as we go through the other

00:09:08.200 --> 00:09:12.120
top 10 best practices,
we'll show you how adopting these best

00:09:12.120 --> 00:09:16.250
practices will ease your transition
to make it processor independent

00:09:16.250 --> 00:09:18.430
and will help fill in this column.

00:09:18.440 --> 00:09:23.440
So as I said,
the new best practice number 11 is 2D.

00:09:23.770 --> 00:09:26.330
And that is to build a processor
independent application.

00:09:26.340 --> 00:09:29.230
I said that,
and it was a few minutes ago,

00:09:29.830 --> 00:09:32.920
and I kind of lied.

00:09:33.270 --> 00:09:35.440
It's true, but it's not the whole truth.

00:09:35.450 --> 00:09:37.580
In fact,
we do want you to continue to build

00:09:37.860 --> 00:09:39.750
your applications and run on PowerPC.

00:09:39.760 --> 00:09:43.990
There's a huge installed base of
Macs out there running PowerPC,

00:09:44.070 --> 00:09:47.440
so we want you to keep on
selling into that installed base,

00:09:47.460 --> 00:09:51.180
and to the new base as it
emerges over the next couple

00:09:51.180 --> 00:09:53.760
years with Intel processors.

00:09:53.790 --> 00:09:56.080
But we don't need to
build two applications,

00:09:56.080 --> 00:09:59.240
one that runs on PowerPC and
one that runs on Intel.

00:09:59.450 --> 00:10:03.990
So what we've done is we've provided a
technology that enables you to build a

00:10:03.990 --> 00:10:07.180
single application that will run on both.

00:10:07.550 --> 00:10:09.720
and this application,
this type of application

00:10:10.000 --> 00:10:11.680
we call universal.

00:10:11.890 --> 00:10:15.260
So universal application is
an application which can run

00:10:15.260 --> 00:10:18.570
on both PowerPC and Intel,
double click, just works.

00:10:18.890 --> 00:10:20.420
Now why would we want to do that?

00:10:20.520 --> 00:10:21.680
There's a lot of reasons.

00:10:21.710 --> 00:10:26.210
All right, so this means best practice
number 11 is to be universal,

00:10:26.210 --> 00:10:28.180
not processor independent.

00:10:28.270 --> 00:10:31.000
So as I was saying,
why would we want to do this?

00:10:31.000 --> 00:10:35.860
Well, one reason is it removes a lot
of IS department headaches.

00:10:35.860 --> 00:10:39.020
The last thing your IS department
wants to do when they start adding

00:10:39.020 --> 00:10:43.970
Macintoshes that are running
Intel is to have to have --

00:10:44.610 --> 00:10:48.100
An applications folder that has
one folder which is Intel and

00:10:48.100 --> 00:10:51.700
in there are listed all of the
Intel-based Macintosh applications

00:10:51.700 --> 00:10:54.640
and below is one labeled PowerPC,
right?

00:10:54.640 --> 00:10:55.500
This is really confusing.

00:10:55.500 --> 00:10:59.280
Here's even a worse example that
we conjured up where every single

00:10:59.740 --> 00:11:02.700
application is listed twice and
you look in the kind column and

00:11:02.700 --> 00:11:06.850
figure out which one and then try
to look at your about box and what

00:11:06.970 --> 00:11:08.500
kind of machine are you running.

00:11:08.500 --> 00:11:10.500
You don't want this.

00:11:10.500 --> 00:11:12.860
You want any user to be able
to sit down on any machine,

00:11:12.860 --> 00:11:15.490
double click and run any
application and it just runs.

00:11:15.500 --> 00:11:16.940
They should be able to
connect to a server,

00:11:16.940 --> 00:11:18.500
the server has a bunch
of applications on it,

00:11:18.500 --> 00:11:22.440
double click any application
on the server and it just runs.

00:11:22.500 --> 00:11:25.500
So, no IS department headaches.

00:11:25.500 --> 00:11:30.020
The next is really for you
which is you should have,

00:11:30.140 --> 00:11:31.790
you know, one SKU.

00:11:32.060 --> 00:11:35.920
If you're building this application,
jam on it.

00:11:36.060 --> 00:11:38.560
It doesn't exist,
but we'll give it out to you

00:11:38.640 --> 00:11:41.200
if you'd like to build one.

00:11:41.200 --> 00:11:44.740
You don't want to have to have
two boxes with this fine print

00:11:44.740 --> 00:11:48.560
on the side of the box where a
user has to walk into the store,

00:11:48.760 --> 00:11:52.350
look at that fine print and say,
which one is for PowerPC and

00:11:52.350 --> 00:11:56.440
which one's for Intel,
and then buy the correct one.

00:11:56.440 --> 00:11:57.280
People don't want to know that.

00:11:57.280 --> 00:11:59.750
They don't want to have to know what
kind of machine they're running.

00:11:59.840 --> 00:12:01.240
They just know they're running a Mac.

00:12:01.240 --> 00:12:05.710
And so instead of selling two boxes,
you should be able to sell a single

00:12:05.710 --> 00:12:08.470
box that can run on any Mac out there.

00:12:08.660 --> 00:12:12.690
The basic story is,
as you walk around the show floor,

00:12:12.690 --> 00:12:14.820
you're going to see a
lot of these machines.

00:12:14.880 --> 00:12:18.660
And some of those machines are
going to be running PowerPC inside.

00:12:19.000 --> 00:12:21.800
Some of those machines are
going to be running Intel.

00:12:21.880 --> 00:12:25.020
But as far as the consumer is concerned,
it shouldn't matter.

00:12:25.120 --> 00:12:27.210
Your applications,
all of the applications should

00:12:27.310 --> 00:12:31.380
just work on all of them,
and they should just work natively.

00:12:32.640 --> 00:12:39.310
So if this is your user interface
on a Mac running PowerPC,

00:12:39.310 --> 00:12:43.160
then this is your user interface
on a Mac running Intel.

00:12:43.160 --> 00:12:45.960
If this is your dashboard
on a Mac running PowerPC,

00:12:46.370 --> 00:12:48.490
this is your dashboard
on a Mac running Intel.

00:12:48.500 --> 00:12:49.680
It's the exact same.

00:12:49.820 --> 00:12:53.230
The experience for the
consumer is the same.

00:12:53.610 --> 00:12:58.250
So, best practice number 11, the new one,
is to build universal applications.

00:12:58.420 --> 00:13:02.020
Build one application,
the same one you have today,

00:13:02.030 --> 00:13:06.550
and enable it to run on
both PowerPC and on Intel.

00:13:07.210 --> 00:13:12.210
All right, now let's go to the next of
the top 10 best practices.

00:13:12.350 --> 00:13:15.270
We've taken and split
it into two categories,

00:13:15.450 --> 00:13:20.440
the best practices for user features and
the best practices for implementation.

00:13:20.480 --> 00:13:22.980
So let's get to the cars.

00:13:24.370 --> 00:13:25.830
Here's a big garage.

00:13:26.010 --> 00:13:29.600
I'm going to start on the five
best practices for user features.

00:13:29.760 --> 00:13:33.190
So tell us what's behind door number 10.

00:13:35.230 --> 00:13:39.980
So best practice number 10 is to
build the ultimate driving experience,

00:13:39.980 --> 00:13:43.230
which really is to build the
ultimate Mac application.

00:13:43.250 --> 00:13:46.910
A lot of people come to us and ask,
you know, what are the guidelines,

00:13:46.910 --> 00:13:50.340
what are the rules, what are the tips,
what are the tricks to build the

00:13:50.340 --> 00:13:52.660
best Mac application possible?

00:13:52.660 --> 00:13:55.370
And so I'm going to go through
a set of those that should help.

00:13:55.440 --> 00:13:58.640
The first one should be obvious, right?

00:13:58.640 --> 00:14:01.810
Start with a killer idea,
start with that killer idea

00:14:01.950 --> 00:14:06.180
that you know is going to sell,
and then know your target customer.

00:14:06.180 --> 00:14:07.180
And this is really important.

00:14:07.180 --> 00:14:08.900
A lot of people don't do that.

00:14:09.000 --> 00:14:11.900
You know, are you selling to a consumer?

00:14:11.900 --> 00:14:13.540
Are you selling to a professional?

00:14:13.540 --> 00:14:15.480
Are you selling into education?

00:14:15.500 --> 00:14:16.960
Are you selling to the enterprise?

00:14:16.960 --> 00:14:19.090
So really know your target customer.

00:14:21.180 --> 00:14:24.680
Next, design for Aqua and Mac OS X.

00:14:24.780 --> 00:14:28.500
So clearly Aqua is the user interface,
so design so it fits in and

00:14:28.840 --> 00:14:31.310
feels like an Aqua application.

00:14:31.310 --> 00:14:35.230
But also, especially if you have a
cross-platform application,

00:14:35.380 --> 00:14:39.770
make sure that when it runs on Mac OS X,
it feels like a Mac OS X application.

00:14:40.170 --> 00:14:41.360
What do I mean by that?

00:14:41.360 --> 00:14:44.000
Well, simple things like we
have a single menu bar,

00:14:44.000 --> 00:14:45.960
so make sure you take advantage of that.

00:14:45.960 --> 00:14:49.320
But also, we have a dock,
which moves around the screen.

00:14:49.320 --> 00:14:52.350
So make sure you're listening to
the API so when the dock moves,

00:14:52.350 --> 00:14:55.200
it doesn't include your
document and you can resize.

00:14:55.200 --> 00:14:57.010
So there's a lot of things like that.

00:14:57.290 --> 00:14:58.680
We sell a ton of portables.

00:14:58.680 --> 00:15:02.600
Make sure that your application
deals with mobility extremely well.

00:15:02.620 --> 00:15:05.020
Let's get back to the Aqua part of that.

00:15:05.020 --> 00:15:10.140
Here is a cross-platform application,
which is a chat app.

00:15:10.160 --> 00:15:13.230
It's a Mac OS X application,
which clearly was designed with

00:15:13.230 --> 00:15:15.050
the lowest common denominator.

00:15:15.050 --> 00:15:19.020
It works, but it doesn't feel
like a Mac application.

00:15:19.030 --> 00:15:21.430
It does not feel like an
Aqua Mac OS X application.

00:15:21.460 --> 00:15:25.720
Our users really demand that
people build great applications

00:15:25.720 --> 00:15:28.240
that feel like Mac applications.

00:15:28.240 --> 00:15:29.570
So let's get back to
the Aqua part of that.

00:15:30.130 --> 00:15:31.960
The next thing is keep it simple.

00:15:32.090 --> 00:15:36.430
It's often much easier to build an
application which has more and more

00:15:36.520 --> 00:15:39.450
features and to allow the feature
creep to happen where suddenly it

00:15:39.450 --> 00:15:43.000
becomes this mess of tons and tons
of features that someone sitting

00:15:43.000 --> 00:15:45.640
down to the app can't figure out,
can't use.

00:15:45.850 --> 00:15:49.480
It's much better to figure out exactly
which app-- which features you want

00:15:49.480 --> 00:15:51.330
to implement and implement them well.

00:15:51.480 --> 00:15:54.440
So looking at this, you know,
there's a lot of features in there,

00:15:54.530 --> 00:15:58.090
but it's extremely
daunting for the new user.

00:15:58.770 --> 00:16:01.340
Next, iterate on elegant layout.

00:16:01.400 --> 00:16:05.140
When you have a killer idea
and you start to implement it,

00:16:05.270 --> 00:16:08.520
don't stick with the first
layout that you come up with.

00:16:08.570 --> 00:16:11.820
Really iterate until you
have a fantastic layout.

00:16:11.870 --> 00:16:13.930
Let me give you an example.

00:16:14.560 --> 00:16:18.960
A company called Stamps.com has
what I believe is a killer idea.

00:16:19.030 --> 00:16:22.680
They want you to be able to use
the photos from your iPhoto library

00:16:23.730 --> 00:16:27.800
and create stamps that you can
then use for the US Postal Service.

00:16:27.850 --> 00:16:32.340
So use pictures of your kids that will
then be the stamps you can send out.

00:16:32.400 --> 00:16:34.080
Very cool.

00:16:34.390 --> 00:16:37.950
The first implementation,
the first layout of this did not

00:16:38.130 --> 00:16:40.930
communicate the power of the idea.

00:16:41.030 --> 00:16:43.850
So let's walk through a few things
that aren't right in this layout

00:16:43.920 --> 00:16:46.130
and then show you what they did.

00:16:46.570 --> 00:16:49.740
First,
where's the star of this application?

00:16:49.760 --> 00:16:52.260
This application is all
about building a stamp,

00:16:52.260 --> 00:16:55.200
a great stamp,
but it's hard to see that with this

00:16:55.320 --> 00:16:59.160
really crazy layout and there's
all these controls all around.

00:16:59.160 --> 00:17:01.000
So where's the star?

00:17:01.030 --> 00:17:03.270
Next thing, information flow.

00:17:03.360 --> 00:17:06.180
Information flow is key to simplicity.

00:17:06.250 --> 00:17:09.590
Good information flow is key to
finding out how you use an application,

00:17:09.590 --> 00:17:13.240
how you walk through the application
and construct what you're doing.

00:17:13.260 --> 00:17:15.290
This looks sort of like a lightning bolt.

00:17:15.350 --> 00:17:19.070
It's confusing to figure out
which set of steps you take.

00:17:20.370 --> 00:17:22.550
There's not enough information.

00:17:22.870 --> 00:17:26.060
One of the key parts of this
application is picking a photo

00:17:26.060 --> 00:17:27.840
you're going to use for your stamps.

00:17:27.900 --> 00:17:32.520
And you can barely even see three
photos from your iPhoto library in it.

00:17:33.050 --> 00:17:34.700
Next is control clutter.

00:17:34.750 --> 00:17:37.740
You'll see that there's actually
some controls in the content region.

00:17:37.790 --> 00:17:39.690
There's some controls
below the content region.

00:17:39.770 --> 00:17:41.240
There's some controls even further down.

00:17:41.270 --> 00:17:42.270
You know, what acts on what?

00:17:42.480 --> 00:17:44.260
It's not clear.

00:17:45.530 --> 00:17:47.050
Choose your controls wisely.

00:17:47.190 --> 00:17:48.950
If you look at this,
they've chosen to go with

00:17:48.950 --> 00:17:51.050
the metal application,
and yet they're not using the

00:17:51.050 --> 00:17:52.900
metal variants of the controls.

00:17:53.110 --> 00:17:55.800
So make sure you use the right
control for the right job.

00:17:55.930 --> 00:18:00.180
And speaking of metal,
there's big wastelands of metal on this,

00:18:00.180 --> 00:18:02.330
which don't look very good either.

00:18:02.470 --> 00:18:04.160
So that's what they started with.

00:18:04.190 --> 00:18:07.070
And they iterated and
iterated and iterated,

00:18:07.220 --> 00:18:10.030
and here's what stamps.com came up with.

00:18:10.280 --> 00:18:15.040
It's far better, and it solves all the
problems we just talked about.

00:18:15.150 --> 00:18:16.170
There's a clear star.

00:18:16.460 --> 00:18:19.240
The star is the stamp you're
building in the middle.

00:18:19.350 --> 00:18:23.310
Information flow clearly flows
from the top to the bottom.

00:18:24.120 --> 00:18:25.360
There's more information.

00:18:25.380 --> 00:18:29.530
You can see eight photos here instead
of only being able to see three photos.

00:18:29.540 --> 00:18:31.440
There's no clutter anymore.

00:18:31.440 --> 00:18:34.860
All of the controls are lined up
nicely below the content region.

00:18:34.860 --> 00:18:36.040
You know what they work on.

00:18:36.040 --> 00:18:40.180
And they've used the metal
variants of the controls.

00:18:40.200 --> 00:18:44.160
And there aren't giant swatches
of metal all over the place.

00:18:44.160 --> 00:18:47.520
So again, they started with this,
a great idea,

00:18:47.540 --> 00:18:51.880
but weren't communicating it well,
and then iterated to this.

00:18:52.700 --> 00:18:55.480
So when you are working on your
application and you think you have

00:18:55.620 --> 00:18:58.640
a killer idea and you have a layout,
really iterate through each of

00:18:58.700 --> 00:19:02.070
the points we talked about to
build the killer application.

00:19:03.490 --> 00:19:07.230
Next,
adopt killer technologies for Mac OS X.

00:19:07.370 --> 00:19:10.860
So here is a cross-platform
chess application.

00:19:10.930 --> 00:19:14.570
And again, it works,
but it clearly doesn't feel

00:19:14.570 --> 00:19:15.600
like a Mac application.

00:19:15.600 --> 00:19:19.960
It's not taking advantage of
anything that's specific to Mac OS X.

00:19:20.020 --> 00:19:21.720
This is Big Bang Chess.

00:19:21.820 --> 00:19:26.080
So Big Bang Chess,
it uses Quartz and OpenGL and

00:19:26.080 --> 00:19:30.640
QuickTime for animations to make it
beautiful to get these reflections.

00:19:30.690 --> 00:19:33.380
It ties in with iTunes so
you can play different songs

00:19:33.430 --> 00:19:35.160
while you're playing a game.

00:19:35.200 --> 00:19:38.880
It actually uses the address book to
find opponents you can play against.

00:19:38.900 --> 00:19:42.500
It uses iChat and Mail to send
out and actually ask requests.

00:19:42.650 --> 00:19:46.480
It ties in with Bonjour to find people
local to you to start chess games with.

00:19:46.520 --> 00:19:49.150
And in fact,
you can even have it send an email each

00:19:49.210 --> 00:19:53.860
time you make a move because you're
slow to remind the other person that

00:19:53.970 --> 00:19:56.040
you're still playing and it's their turn.

00:19:56.140 --> 00:19:59.160
So Big Bang Chess,
a lot of features it ties in.

00:19:59.160 --> 00:20:02.640
And using, leveraging all these features
of Mac OS X makes it that

00:20:02.640 --> 00:20:03.360
much better of an application.

00:20:03.360 --> 00:20:03.360
So Big Bang Chess,
a lot of features it ties in and using,

00:20:03.360 --> 00:20:03.360
leveraging all these features
of Mac OS X makes it that

00:20:03.360 --> 00:20:03.360
much better of an application.

00:20:03.360 --> 00:20:05.090
application.

00:20:06.020 --> 00:20:09.660
And next,
really deliver high production value.

00:20:09.670 --> 00:20:12.620
Mac users demand that you
have high production value.

00:20:12.620 --> 00:20:17.460
Let's say you're building an application
that's going to catalog everything

00:20:17.520 --> 00:20:19.180
you see on your shelves at home.

00:20:19.320 --> 00:20:22.450
So your movies, your DVDs, your books,
your games.

00:20:22.450 --> 00:20:25.660
You could build an application that
looks a lot like a spreadsheet.

00:20:25.660 --> 00:20:32.020
And it's functional, it works,
but compare that to Delicious Library.

00:20:32.780 --> 00:20:35.410
Delicious library has
a photorealistic shelf.

00:20:35.520 --> 00:20:39.130
It integrates with the address
book for the people on the left.

00:20:39.240 --> 00:20:42.180
It integrates with Spotlight so
you can find these things anywhere.

00:20:42.180 --> 00:20:43.200
It has a widget.

00:20:43.200 --> 00:20:50.030
It uses OpenGL and a bunch of the core
imaging stuff or a bunch of the Quartz

00:20:50.190 --> 00:20:51.500
stuff to draw these things nicely.

00:20:51.500 --> 00:20:56.440
It even integrates with the iSight so
you can hold an iSight up to your book.

00:20:56.480 --> 00:20:58.560
And it actually scans the barcode
and then looks out and gets you

00:20:58.560 --> 00:21:00.740
the picture of the book so you
don't need to type anything in.

00:21:01.380 --> 00:21:05.330
So it really integrates with all these
different technologies and then has this

00:21:05.610 --> 00:21:08.030
very high production value feel to it.

00:21:10.140 --> 00:21:16.390
So here are six great points for
building a killer application on the Mac.

00:21:17.250 --> 00:21:19.120
Now,
one thing we found over the last several

00:21:19.120 --> 00:21:25.760
years is that technology advancements
are enabling experience enhancements.

00:21:25.890 --> 00:21:30.380
So technology is advancing very fast,
and that enables us to make the

00:21:30.510 --> 00:21:32.260
user experience even better.

00:21:32.450 --> 00:21:37.030
Specifically, I want to talk about the
improved performance of the GPU,

00:21:37.320 --> 00:21:39.260
of the graphics card.

00:21:39.390 --> 00:21:42.180
If you look back seven years,

00:21:42.400 --> 00:21:49.010
Seven years ago, we could render about 30
million pixels a second.

00:21:49.170 --> 00:21:52.900
So using the state of the art
for graphics seven years ago,

00:21:52.920 --> 00:21:56.500
we could render 30
million pixels a second.

00:21:56.520 --> 00:21:59.780
If you look to Moore's law to
predict where we'd be today,

00:21:59.800 --> 00:22:03.940
Moore's law says that you double the
processing power every 18 to 24 months,

00:22:03.970 --> 00:22:09.060
we'd be at about 250 million
pixels per second today.

00:22:09.070 --> 00:22:11.800
Let's go ahead and graph
what really happened.

00:22:12.100 --> 00:22:17.240
I can only graph two points on this
chart without changing the scale.

00:22:17.340 --> 00:22:21.660
And this is because GPUs have
vastly outperformed Moore's Law.

00:22:21.760 --> 00:22:24.690
Let me change the scale here and
show you what's actually happened

00:22:24.690 --> 00:22:27.800
in the GPU space over the same time.

00:22:28.100 --> 00:22:34.870
We can now calculate and render well
over 6.5 billion pixels a second,

00:22:34.920 --> 00:22:37.970
when Moore's Law would have
actually suggested we could

00:22:37.970 --> 00:22:39.590
render about 250 million.

00:22:39.600 --> 00:22:43.800
So this is fantastic
improvements in technology.

00:22:43.870 --> 00:22:46.040
Why does the user care?

00:22:46.040 --> 00:22:51.870
The answer is there are benefits to
the user of the increased GPU speed,

00:22:51.880 --> 00:22:56.490
and it's benefits that basically you get
by leveraging that increase in power.

00:22:57.590 --> 00:23:00.800
The first thing it does is it
gives you increased fidelity.

00:23:00.960 --> 00:23:04.270
A little more than a decade ago,
this little game came out.

00:23:04.270 --> 00:23:10.620
It was Myst, and it was considered a
breakthrough in multimedia gaming.

00:23:11.530 --> 00:23:15.670
When you look back at it,
it was basically a slideshow

00:23:15.850 --> 00:23:18.510
of a few renderings,
and every once in a while,

00:23:18.510 --> 00:23:24.510
you get these tiny thumbnail pre-rendered
movies at 256 colors that would play.

00:23:25.040 --> 00:23:29.480
and that was considered
great multimedia for a game.

00:23:29.500 --> 00:23:33.260
In the fall, Myst 5 is gonna be released.

00:23:33.280 --> 00:23:38.040
Myst 5, of course,
is 32 bit deep instead of 256 colors.

00:23:38.310 --> 00:23:44.360
It's full screen instead of tiny
thumbnails and this renders 15 to

00:23:44.360 --> 00:23:49.310
30 frames per second whereas the
original Myst rendered a single

00:23:49.310 --> 00:23:53.200
scene in 24 hours on a Mac Quadra.

00:23:53.320 --> 00:23:58.910
So we've gone from 24 hours for a frame
to 15 to 30 frames per second and that's

00:23:59.010 --> 00:24:01.120
all to the increased power of the GPU.

00:24:02.960 --> 00:24:08.590
The next thing the fast GPUs have
done is they decreased the wait time.

00:24:09.340 --> 00:24:12.120
So in the past,
you spent a lot of time waiting

00:24:12.570 --> 00:24:14.700
when you want to be doing.

00:24:14.750 --> 00:24:18.460
An example of that is render time.

00:24:18.510 --> 00:24:21.900
A lot of video applications
had this very slow render time.

00:24:21.950 --> 00:24:23.460
And so you'd add a transition.

00:24:23.510 --> 00:24:24.880
You weren't sure it was
going to be the right one.

00:24:25.020 --> 00:24:26.710
You sat and waited for it to render.

00:24:26.900 --> 00:24:29.100
If it wasn't the right one,
you had to redo it.

00:24:29.160 --> 00:24:32.120
And it really got in the
way of the creative process.

00:24:32.250 --> 00:24:37.350
So the faster GPUs have enabled us to
move from render time to real time.

00:24:37.480 --> 00:24:40.720
If you look at Final Cut Pro,
Final Cut Pro used to have all these

00:24:40.720 --> 00:24:43.380
render panels where you'd have to wait.

00:24:43.450 --> 00:24:47.240
But now, most of these transitions,
when you add them, are done real time.

00:24:47.300 --> 00:24:48.340
There's no longer a panel.

00:24:48.340 --> 00:24:50.380
You can see it immediately.

00:24:50.510 --> 00:24:54.630
So faster GPU has
decreased the wait time.

00:24:54.840 --> 00:24:58.400
And last,
it's really enabled new applications.

00:24:58.490 --> 00:25:03.220
Things like iChat U+3 we could
not have done without fast GPU.

00:25:03.220 --> 00:25:06.420
All of these reflections,
the skewing of the people,

00:25:06.420 --> 00:25:07.480
that's all done on the card.

00:25:07.730 --> 00:25:12.810
We couldn't have done this
application without these fast GPUs.

00:25:12.820 --> 00:25:13.510
Motion.

00:25:13.740 --> 00:25:16.760
Motion is all about real-time
effects and being able to

00:25:16.760 --> 00:25:18.550
manipulate these real-time effects.

00:25:18.830 --> 00:25:22.660
Motion couldn't have been
done without these fast GPUs.

00:25:22.660 --> 00:25:24.380
So GPUs have done a lot for us.

00:25:24.380 --> 00:25:27.090
It's up to you guys to
take advantage of it,

00:25:27.100 --> 00:25:29.630
but they increase your fidelity,
they decrease the wait time,

00:25:29.630 --> 00:25:33.020
and they enable whole new classes
of applications that you guys can

00:25:33.020 --> 00:25:35.010
come and think of and implement.

00:25:35.700 --> 00:25:38.180
If you sort of step back and
see what we've done with this,

00:25:38.260 --> 00:25:43.900
we start with both the GPU, the fast GPU,
and the CPU, and really just consider

00:25:43.960 --> 00:25:45.490
that processing power.

00:25:45.500 --> 00:25:49.240
And on top of this processing power,
we build these really

00:25:49.240 --> 00:25:52.020
powerful graphics libraries,
right?

00:25:52.020 --> 00:25:55.020
Everything from OpenGL to Quartz,
Core Image, Core Video, and QuickTime.

00:25:55.020 --> 00:25:58.350
So we build these great,
powerful graphics libraries.

00:25:58.360 --> 00:26:00.820
And your application, of course,
sits on top of these.

00:26:01.220 --> 00:26:05.410
Now, these libraries both allow
you to leverage the power

00:26:05.810 --> 00:26:09.850
of the GPU and the CPU,
and they insulate you from it.

00:26:09.860 --> 00:26:13.910
So for a while,
you've been using the power of, say,

00:26:13.910 --> 00:26:17.680
programmability on an
ATI card in the right Mac.

00:26:17.780 --> 00:26:22.280
But none of you had to go and
learn how to program the ATI card.

00:26:22.280 --> 00:26:23.560
We did it for you, right?

00:26:23.560 --> 00:26:25.990
We employ smart people who
do exactly that for you.

00:26:26.000 --> 00:26:29.150
And so we've already
insulated you from that.

00:26:29.220 --> 00:26:30.850
And the same way.

00:26:31.310 --> 00:26:35.480
If you code to our high-level
APIs across the board here,

00:26:35.480 --> 00:26:38.980
then you don't have to worry
whether or not you're running

00:26:39.030 --> 00:26:40.550
on a power PC or Intel.

00:26:40.560 --> 00:26:44.030
As far as graphics would be concerned,
you'll already be universal.

00:26:44.140 --> 00:26:46.660
So we have these great
graphics libraries.

00:26:46.660 --> 00:26:49.560
They'll insulate you from it,
and they'll take advantage of

00:26:49.560 --> 00:26:51.060
exactly the right GPU or CPU.

00:26:51.060 --> 00:26:54.240
In fact,
as CPUs become more and more parallel and

00:26:54.240 --> 00:26:58.490
GPUs become more and more programmable,
we'll do the right thing in our

00:26:58.510 --> 00:27:01.020
libraries to take advantage on the
system that your app is running.

00:27:01.220 --> 00:27:06.560
To maximally leverage the
power of the processor there.

00:27:06.560 --> 00:27:07.910
All right.

00:27:08.130 --> 00:27:13.660
So that is best practice number 10
to provide a killer user interface.

00:27:13.660 --> 00:27:17.020
What is behind door number nine?

00:27:19.710 --> 00:27:25.480
The answer is building
in a navigation system.

00:27:25.670 --> 00:27:29.640
A navigation system in your car
is all about finding things,

00:27:29.690 --> 00:27:29.800
right?

00:27:29.800 --> 00:27:33.660
Finding where you're going,
finding a gas station along the way,

00:27:33.890 --> 00:27:34.640
finding a restaurant.

00:27:34.640 --> 00:27:38.820
We've believed for quite some time
that finding and searching are

00:27:38.820 --> 00:27:43.790
really important to improve the user
experience of using an application.

00:27:43.800 --> 00:27:47.570
So if you look across the board,
each of our applications, you know,

00:27:47.570 --> 00:27:50.460
more and more of our
applications have built-in search

00:27:50.610 --> 00:27:52.260
fields and a built-in find.

00:27:52.260 --> 00:27:54.400
We think it's extremely important.

00:27:55.860 --> 00:27:59.320
And that's why in Tiger,
we built in what we believe

00:27:59.750 --> 00:28:03.800
is the ultimate in searching,
and that's Spotlight.

00:28:04.000 --> 00:28:05.650
So I'm sure you all know Spotlight.

00:28:05.870 --> 00:28:07.480
Top right of your menu bar,
you can click on it,

00:28:07.480 --> 00:28:09.760
you get a search field,
you can type anything you want,

00:28:09.810 --> 00:28:14.980
and we'll search your entire drive,
and extremely quickly we'll come

00:28:14.980 --> 00:28:18.730
back with a set of results based on
your search being of either metadata

00:28:18.930 --> 00:28:20.830
or the contents of those files.

00:28:21.050 --> 00:28:22.520
It's great.

00:28:22.590 --> 00:28:24.270
Now it's your turn.

00:28:25.320 --> 00:28:28.990
Now what we want you to do is make sure
that you integrate well with Spotlight

00:28:28.990 --> 00:28:32.510
to make the Spotlight experience
for all the customers even better.

00:28:32.520 --> 00:28:35.860
The first thing you should
do is embrace metadata.

00:28:35.860 --> 00:28:38.620
If you're working on a
document-based application,

00:28:38.620 --> 00:28:43.520
then the first thing you want to do is
augment your document with metadata.

00:28:43.520 --> 00:28:46.080
So for something like this,
you should add, you know,

00:28:46.080 --> 00:28:50.100
what kind of camera took the picture,
add some keywords, add, you know,

00:28:50.100 --> 00:28:51.350
was there an alpha channel or not.

00:28:51.420 --> 00:28:54.050
So augment your documents,
whatever they be,

00:28:54.050 --> 00:28:57.690
with appropriate metadata that
people might want to search on.

00:28:57.760 --> 00:29:01.740
The next thing you should do
is preserve that metadata.

00:29:01.740 --> 00:29:04.480
So if you open up a file
that has metadata in it,

00:29:04.480 --> 00:29:08.060
when you save that file,
make sure you don't lose it all.

00:29:08.100 --> 00:29:11.380
Make sure you preserve the
metadata across savings.

00:29:11.400 --> 00:29:14.620
So first thing for Spotlight,
embrace metadata.

00:29:15.870 --> 00:29:20.240
The second thing is you'd like to
spotlight enable your documents.

00:29:20.340 --> 00:29:21.800
So what does that mean?

00:29:21.840 --> 00:29:25.180
Let me take you behind the curtain
of Spotlight to explain at a

00:29:25.230 --> 00:29:28.490
high level how Spotlight works,
and then we can see how you can

00:29:28.490 --> 00:29:30.800
Spotlight enable your documents.

00:29:30.890 --> 00:29:34.750
At the center of Spotlight is a
central index for the entire system.

00:29:34.800 --> 00:29:39.800
So we have this great, very fast,
robust central index.

00:29:39.800 --> 00:29:42.800
It's tied in closely to the
kernel in the file system,

00:29:43.080 --> 00:29:45.800
and that is the Spotlight index.

00:29:45.920 --> 00:29:48.790
There's two ways of
interacting with this index.

00:29:48.820 --> 00:29:50.790
There's populating it,
and then there's using it.

00:29:50.790 --> 00:29:53.550
So let's talk about populating.

00:29:53.790 --> 00:29:57.460
The index is populated
by a series of importers.

00:29:57.560 --> 00:30:01.200
So each of these importers knows
about one or more document file types.

00:30:01.260 --> 00:30:03.940
And whenever one of those file
types appears on the system

00:30:03.940 --> 00:30:07.240
or changes on the system,
the importer notices it and

00:30:07.240 --> 00:30:09.000
tells Spotlight about it.

00:30:09.060 --> 00:30:12.520
We try to provide almost
all these standard file type

00:30:12.860 --> 00:30:15.420
importers out of the box.

00:30:15.580 --> 00:30:20.900
But if you have a custom document type,
if your application

00:30:20.900 --> 00:30:25.110
creates a custom file type,
then you need to create an

00:30:25.110 --> 00:30:29.600
importer to let your documents
in on the Spotlight game.

00:30:29.770 --> 00:30:33.800
So to spotlight enable your documents,
you should write Spotlighter

00:30:33.810 --> 00:30:37.250
importer plugins where necessary.

00:30:37.520 --> 00:30:40.800
The last thing is really
using Spotlight APIs.

00:30:40.890 --> 00:30:42.970
So again,
looking to the other side of this,

00:30:43.100 --> 00:30:47.060
the using side,
we have a great set of APIs where

00:30:47.060 --> 00:30:49.840
your application can sit,
it can make rich queries

00:30:50.060 --> 00:30:53.360
of the Spotlight index,
and you'll get results back.

00:30:53.420 --> 00:30:55.430
These queries can be compound queries.

00:30:55.560 --> 00:30:57.460
They can have multiple criteria.

00:30:57.510 --> 00:30:58.790
They can be standing queries.

00:30:58.920 --> 00:31:01.960
So if anything ever
changes in the file system,

00:31:01.960 --> 00:31:04.360
you'll immediately be
notified of that change,

00:31:04.420 --> 00:31:07.090
and your query will always be live.

00:31:07.200 --> 00:31:09.720
An example of where we do this is mail.

00:31:09.780 --> 00:31:11.280
We can do a search in mail.

00:31:11.320 --> 00:31:12.760
That's a spotlight query.

00:31:12.860 --> 00:31:14.870
You can actually save
that as a smart mailbox,

00:31:14.870 --> 00:31:16.040
which makes it persistent.

00:31:16.090 --> 00:31:19.400
All of that's done using
the spotlight APIs.

00:31:19.450 --> 00:31:22.900
So three great ways to
use the spotlight APIs.

00:31:22.930 --> 00:31:27.080
And that's the way to build
navigation into your car.

00:31:27.560 --> 00:31:29.940
In this case, your application.

00:31:29.950 --> 00:31:31.060
All right.

00:31:31.080 --> 00:31:32.560
Next car.

00:31:32.610 --> 00:31:35.100
What's it going to be?

00:31:35.120 --> 00:31:36.980
The answer is?

00:31:37.740 --> 00:31:43.030
Pimp Your Ride.

00:31:43.030 --> 00:31:43.030
HR has left the room.

00:31:43.510 --> 00:31:45.490
So it's popular to
pimp your car nowadays,

00:31:45.560 --> 00:31:45.740
right?

00:31:45.740 --> 00:31:47.120
It's popular to pimp your ride.

00:31:47.290 --> 00:31:51.600
So in Tiger, we believe we've added
a way to pimp your OS.

00:31:51.650 --> 00:31:56.580
And you can do that through a set of
accessories called dashboard widgets.

00:31:57.040 --> 00:31:59.410
But we've been getting
questions from people saying,

00:31:59.410 --> 00:32:02.640
how do I build a dashboard
widget that really fits in

00:32:02.640 --> 00:32:04.160
with the rest of dashboard?

00:32:04.300 --> 00:32:08.510
Dashboard is a completely new
UI paradigm in the system.

00:32:08.860 --> 00:32:11.720
So how can I build the right
kind of dashboard widget?

00:32:11.830 --> 00:32:14.510
So let me go ahead and give
you some guidelines on how to

00:32:14.510 --> 00:32:18.060
build killer dashboard widgets.

00:32:18.450 --> 00:32:21.890
First, don't bogey the screen.

00:32:24.150 --> 00:32:27.500
Dashboard widgets,
unlike Windows from any other

00:32:27.500 --> 00:32:32.220
application in Mac OS X,
aren't meant to occlude each other.

00:32:32.220 --> 00:32:34.060
They're meant to sit side by side.

00:32:34.060 --> 00:32:35.590
They're not meant to sit
on top of each other.

00:32:35.600 --> 00:32:38.120
And the reason is,
you bring dashboard up and

00:32:38.120 --> 00:32:39.900
you dismiss it very quickly.

00:32:39.900 --> 00:32:42.960
So the last thing you want
to do is bring up dashboard,

00:32:42.960 --> 00:32:46.800
have to move some things around to find
the information you're looking for.

00:32:46.800 --> 00:32:49.660
So don't build some giant
dashboard widget that takes

00:32:49.780 --> 00:32:53.550
up most of dashboard because,
frankly, no one's going to use it.

00:32:54.000 --> 00:32:57.180
What you should do is build a
nice small dashboard widget with

00:32:57.180 --> 00:32:58.960
exactly the right information.

00:32:58.960 --> 00:33:01.410
And if there's more
information someone might want,

00:33:01.410 --> 00:33:04.930
if these are headlines of stories,
they can click on that dashboard widget

00:33:04.940 --> 00:33:07.060
and you can take them somewhere else,
take them, say,

00:33:07.150 --> 00:33:08.720
to Safari to read the full story.

00:33:08.720 --> 00:33:12.700
But this is the place just to get
that quick information in a nice size.

00:33:12.760 --> 00:33:14.940
So don't bogart the screen.

00:33:14.940 --> 00:33:18.500
Next, one widget per function.

00:33:19.940 --> 00:33:24.470
This widget right here has three
completely separate functions in here.

00:33:24.550 --> 00:33:27.160
It's a clock widget,
it's a weather widget,

00:33:27.240 --> 00:33:29.160
it's a calendar widget.

00:33:29.280 --> 00:33:31.680
Instead, build three different widgets.

00:33:31.940 --> 00:33:34.710
That allows the user to decide which
of those widgets they actually care

00:33:34.710 --> 00:33:37.880
about and will pull off and use,
and it doesn't sort of confuse the story.

00:33:38.190 --> 00:33:41.750
So you should have one
widget per function.

00:33:42.650 --> 00:33:46.520
Next, dashboard widgets, as I said,
are not Aqua applications.

00:33:46.650 --> 00:33:49.160
So if you look on here,
one of these stands out.

00:33:49.190 --> 00:33:52.260
And it's the middle one because
there's Aqua controls in the front.

00:33:52.310 --> 00:33:55.180
Everywhere else,
we try to use custom controls that

00:33:55.320 --> 00:33:58.420
fit in very nicely with the dashboard.

00:33:58.740 --> 00:34:00.600
And so you should do the same.

00:34:00.650 --> 00:34:03.220
You shouldn't put Aqua controls in
the front of your dashboard widgets.

00:34:03.350 --> 00:34:06.280
You should make something feel very,
very Aqua-like, or very,

00:34:06.280 --> 00:34:08.450
very dashboard-like.

00:34:09.760 --> 00:34:12.980
Next,
communicate key information quickly.

00:34:13.020 --> 00:34:14.900
As I said before,
the dashboard's meant to be

00:34:14.900 --> 00:34:17.300
brought up and dismissed quickly,
right?

00:34:17.360 --> 00:34:19.170
People bring it up just
to look at something.

00:34:19.320 --> 00:34:23.970
So here's a weather widget which
doesn't communicate hardly anything.

00:34:24.410 --> 00:34:26.420
It's sunny in 73, somewhere in there.

00:34:26.670 --> 00:34:30.800
But again, this weather widget, you know,
with a large number for 73,

00:34:30.870 --> 00:34:33.400
with a large sun,
immediately communicates

00:34:33.400 --> 00:34:35.250
the weather conditions.

00:34:35.250 --> 00:34:37.270
And if you want,
the smaller numbers on here will

00:34:37.340 --> 00:34:39.230
communicate highs and lows for the day.

00:34:39.230 --> 00:34:42.070
But the key information is,
what's the temperature right now?

00:34:42.070 --> 00:34:42.670
Is it sunny?

00:34:42.680 --> 00:34:43.400
Is it raining?

00:34:43.400 --> 00:34:44.540
Is there lightning?

00:34:44.540 --> 00:34:46.020
All right, next.

00:34:48.070 --> 00:34:50.590
Uh, baby's got back.

00:34:50.600 --> 00:34:55.390
So the front of your widget is
for communicating information.

00:34:55.540 --> 00:34:56.080
Right?

00:34:56.150 --> 00:34:58.620
The front of your widget is
for communicating information.

00:34:58.980 --> 00:35:01.960
The back of your widget
is for configuration.

00:35:02.040 --> 00:35:04.770
So make sure you put all the
configuration on the back of the

00:35:04.800 --> 00:35:08.690
widget and keep all the information
flow on the front of the widget.

00:35:09.890 --> 00:35:12.260
And last, really make it beautiful.

00:35:12.570 --> 00:35:15.280
Dashboard widgets are supposed
to have this really fun feel,

00:35:15.570 --> 00:35:16.490
make them beautiful.

00:35:16.920 --> 00:35:19.610
There's one thing I'll point
out that we've tried to do,

00:35:19.650 --> 00:35:23.630
which is try not to create a
widget with too many colors.

00:35:23.640 --> 00:35:24.080
Right?

00:35:24.150 --> 00:35:25.780
Don't create this
Christmas tree of a widget.

00:35:25.780 --> 00:35:28.820
Try to pick a main color
and then play off that color

00:35:28.820 --> 00:35:30.640
for the rest of the widget.

00:35:30.640 --> 00:35:33.160
So if you look at the
stock widget up there,

00:35:33.210 --> 00:35:35.640
blue is clearly the color of the widget.

00:35:35.640 --> 00:35:37.320
I think there's four
different blues in there.

00:35:37.320 --> 00:35:39.780
They're different shades of the
same blue to help tie it together.

00:35:39.850 --> 00:35:42.320
But distinguish the different
regions where necessary.

00:35:42.340 --> 00:35:46.380
So really make your app,
make your widgets beautiful.

00:35:46.380 --> 00:35:48.220
And that is number eight.

00:35:48.220 --> 00:35:49.440
Pimp your ride.

00:35:49.440 --> 00:35:58.270
So behind door number seven,
we have make room for everyone.

00:36:00.960 --> 00:36:04.510
For years now on Mac OS X,
we've been adding accessibility

00:36:04.620 --> 00:36:06.400
sort of throughout the OS.

00:36:06.430 --> 00:36:08.960
And we feel very,
very strongly about this.

00:36:08.990 --> 00:36:11.800
We've added zooming,
white on black display,

00:36:11.800 --> 00:36:12.470
it goes on and on.

00:36:12.680 --> 00:36:15.300
We've been adding more
and more accessibility.

00:36:15.340 --> 00:36:19.950
But with Tiger, we think we've hit a home
run in that we've built in

00:36:19.960 --> 00:36:22.140
something called VoiceOver.

00:36:22.180 --> 00:36:25.830
And VoiceOver is a screen
reader for both the blind and

00:36:25.830 --> 00:36:28.480
the visually impaired users.

00:36:29.640 --> 00:36:32.930
When we went about building this,
we wanted to build the best

00:36:33.180 --> 00:36:37.780
screen reader in the world,
and we wanted to build it in

00:36:37.780 --> 00:36:39.960
to every copy of Mac OS X.

00:36:40.080 --> 00:36:43.180
Because we feel very,
very strongly that if a student

00:36:43.180 --> 00:36:47.780
at a school goes to the lab and
they're blind or visually impaired,

00:36:47.880 --> 00:36:51.420
they should be able to use every
single machine in that lab.

00:36:51.560 --> 00:36:54.170
They shouldn't be told you can
use that one in the very back,

00:36:54.170 --> 00:36:55.680
which might not even be on today.

00:36:56.010 --> 00:36:59.190
They should be able to walk up to
any machine in that entire school,

00:36:59.340 --> 00:37:01.060
sit down, and use it.

00:37:01.460 --> 00:37:03.700
We believe if someone
goes into a library,

00:37:03.790 --> 00:37:07.240
they should be able to walk up to any
machine in that library and use it.

00:37:07.350 --> 00:37:12.280
And the great thing is, if that library,
if that school is running Tiger,

00:37:12.280 --> 00:37:13.140
they can.

00:37:13.300 --> 00:37:16.410
We don't believe this is
just for after you've,

00:37:17.060 --> 00:37:19.340
yeah, absolutely.

00:37:22.450 --> 00:37:25.370
We feel very strongly about this,
and we hired the team for this.

00:37:25.490 --> 00:37:28.060
We said, we are going to build the
best in the world here,

00:37:28.060 --> 00:37:31.610
because we want everyone to
be able to use every Mac.

00:37:32.480 --> 00:37:36.360
We didn't say they should be able to
use it after everything's installed.

00:37:36.420 --> 00:37:39.960
We said they should be able to walk up to
a machine and install Tiger themselves.

00:37:40.070 --> 00:37:42.540
So we build VoiceOver right
into the installation.

00:37:42.610 --> 00:37:46.740
We try to make it permeate the entire
OS so people are never felt like they're

00:37:46.740 --> 00:37:50.190
a second class citizen running Mac OS X.

00:37:51.270 --> 00:37:52.580
So that's what we've done.

00:37:52.580 --> 00:37:55.370
Now it's your turn to help
make this work throughout the

00:37:55.370 --> 00:37:56.990
OS with all the applications.

00:37:57.010 --> 00:38:01.120
The first thing you should do is
support the accessibility APIs.

00:38:01.170 --> 00:38:05.550
So this is a set of APIs which will
tell VoiceOver what your application

00:38:05.650 --> 00:38:07.220
is doing so it knows what to read.

00:38:07.220 --> 00:38:09.520
It knows to say,
this is the button you're on.

00:38:09.540 --> 00:38:11.260
Here's the text the person's typing.

00:38:11.260 --> 00:38:16.470
You have to support these accessibility
APIs to integrate with VoiceOver.

00:38:17.360 --> 00:38:19.860
Next,
you should add full keyboard access.

00:38:19.980 --> 00:38:23.530
By adding full keyboard access,
you further improve the fidelity of

00:38:23.600 --> 00:38:26.730
using your application with VoiceOver.

00:38:27.340 --> 00:38:29.920
You should also make sure
there's keyboard alternatives

00:38:30.090 --> 00:38:31.960
to all mouse operations.

00:38:32.020 --> 00:38:35.560
And we've actually added a lot
of tools to help you out here.

00:38:35.650 --> 00:38:37.560
So if you take your application
and you run it through the

00:38:37.560 --> 00:38:41.770
accessibility verifier,
it'll create a report customized for

00:38:41.770 --> 00:38:46.830
your application saying what needs to be
done to make your application accessible.

00:38:46.960 --> 00:38:49.610
The Accessibility Inspector is
an application which,

00:38:49.610 --> 00:38:52.930
while you're running your application,
will tell you what parts are

00:38:52.930 --> 00:38:56.480
accessible and you can sort of,
you know, at runtime test things out.

00:38:56.780 --> 00:38:59.520
And of course there's nothing better
than just turning on VoiceOver,

00:38:59.560 --> 00:39:02.020
which if you're running Tiger today,
you can do on any machine,

00:39:02.020 --> 00:39:04.790
I think it's Control-F5,
it'll turn on VoiceOver and

00:39:04.850 --> 00:39:08.280
you can see how well your
application runs with VoiceOver.

00:39:08.380 --> 00:39:12.950
So if all of this wasn't enough,
there's a stick.

00:39:13.140 --> 00:39:17.200
And the stick is that some
organizations won't even buy your

00:39:17.200 --> 00:39:20.900
software unless you're accessible.

00:39:21.180 --> 00:39:22.840
But we should all do it
for the right reason,

00:39:22.840 --> 00:39:24.140
not for the stick.

00:39:24.510 --> 00:39:29.180
To really experience
VoiceOver and how well it works,

00:39:29.220 --> 00:39:30.970
I think you really need to have a demo.

00:39:31.120 --> 00:39:34.680
So I'd like to bring up Eric Seymour,
the manager of the VoiceOver team,

00:39:34.720 --> 00:39:35.510
to show it off.

00:39:35.520 --> 00:39:36.970
Eric.

00:39:42.530 --> 00:39:45.310
Okay, so as Scott said,
one of the most important features

00:39:45.320 --> 00:39:48.030
of voiceover for somebody who's
visually impaired is that you can

00:39:48.080 --> 00:39:51.350
just walk up to any Tiger system,
no matter where it is, and turn it on.

00:39:51.360 --> 00:39:52.400
So let's do that right now.

00:39:52.400 --> 00:39:56.030
I'm just going to hit Command F5,
turn it on.

00:39:59.950 --> 00:40:01.190
VoiceOver off.

00:40:01.200 --> 00:40:02.700
There we go.

00:40:02.700 --> 00:40:03.190
Let's do it again.

00:40:03.200 --> 00:40:05.870
VoiceOver on Safari app window back.

00:40:05.870 --> 00:40:06.200
Dim button.

00:40:06.200 --> 00:40:08.160
So VoiceOver speaks to me.

00:40:08.230 --> 00:40:09.200
It lets me know what's
going on on my desktop.

00:40:09.200 --> 00:40:11.860
And now I'm going to move around a
little bit without using the mouse,

00:40:11.860 --> 00:40:12.200
by the way.

00:40:12.200 --> 00:40:13.100
Forward.

00:40:13.100 --> 00:40:14.190
Dim button.

00:40:14.190 --> 00:40:15.200
Reload button.

00:40:15.200 --> 00:40:18.200
And as I move,
VoiceOver gives me an indication

00:40:18.200 --> 00:40:20.200
of each item that I'm landing on,
so it helps me along my way.

00:40:20.200 --> 00:40:22.200
So I'm going to quickly jump
forward to the search field.

00:40:22.230 --> 00:40:26.200
Add bookmark but HT splitter
blank Google search text field.

00:40:26.200 --> 00:40:28.200
And I'm going to search on something.

00:40:28.200 --> 00:40:34.030
C E I E E C space C E O V R.

00:40:35.320 --> 00:40:37.570
So that sound you hear is
VoiceOver telling me that

00:40:37.650 --> 00:40:38.640
the page is done loading.

00:40:38.640 --> 00:40:41.530
And I'm simply going to
start reading the page.

00:40:42.000 --> 00:40:46.700
VoiceOver Search,
Advanced Search Preferences, Link Web.

00:40:46.850 --> 00:40:50.960
So VoiceOver isn't only designed for
users who can't see the screen at all.

00:40:50.960 --> 00:40:54.400
It's actually quite optimized for
folks who have low vision and who

00:40:54.400 --> 00:40:56.220
still rely on some of that vision.

00:40:56.300 --> 00:40:59.530
And also for users who have full
vision who want to collaborate

00:40:59.530 --> 00:41:00.460
with a VoiceOver user.

00:41:00.500 --> 00:41:02.900
A lot of times people work at
a computer at the same time,

00:41:03.020 --> 00:41:03.840
same computer.

00:41:03.930 --> 00:41:05.130
So let me show you
some of those features.

00:41:05.200 --> 00:41:07.520
One of them is I can make
the VoiceOver cursor bigger.

00:41:07.620 --> 00:41:09.400
VoiceOver 3, 4, 5.

00:41:09.470 --> 00:41:10.960
And continue moving around.

00:41:11.040 --> 00:41:12.370
Did you mean VoiceOver?

00:41:12.380 --> 00:41:14.480
Link Apple, Mac OS X.

00:41:14.680 --> 00:41:17.420
Mac OS X Tiger introduces VoiceOver app.

00:41:17.550 --> 00:41:20.140
Now if I have difficulties
tracking the VoiceOver cursor

00:41:20.140 --> 00:41:22.710
as it moves around the screen,
I can also move it to center.

00:41:22.720 --> 00:41:23.610
So let's do that now.

00:41:23.830 --> 00:41:24.950
Dial visuals.

00:41:25.060 --> 00:41:25.890
Link Apple.

00:41:25.980 --> 00:41:27.040
Accessibility.

00:41:27.090 --> 00:41:29.690
Link the VoiceOver cyber
style and expensive.

00:41:29.780 --> 00:41:31.220
All right,
now let me make it small again.

00:41:31.460 --> 00:41:32.810
Voice 3, 2, 1.

00:41:32.970 --> 00:41:34.840
And let's move it back to center.

00:41:34.920 --> 00:41:35.860
Or move it back to normal.

00:41:35.860 --> 00:41:36.940
Dial visuals.

00:41:37.100 --> 00:41:38.750
And let's finish up and follow a link.

00:41:38.930 --> 00:41:40.060
Link the VoiceOver.

00:41:40.060 --> 00:41:40.960
Link Apple.

00:41:41.020 --> 00:41:41.950
Accessibility.

00:41:41.990 --> 00:41:43.310
VoiceOver.

00:41:43.400 --> 00:41:45.080
Press Apple.

00:41:45.120 --> 00:41:45.900
OK.

00:41:46.130 --> 00:41:47.210
So that's VoiceOver.

00:41:47.360 --> 00:41:49.930
Now I'm going to turn VoiceOver off.

00:41:50.560 --> 00:41:51.960
VoiceOver off.

00:41:52.110 --> 00:41:54.700
So VoiceOver relies on
the accessibility APIs.

00:41:54.750 --> 00:41:56.300
And of course,
we're asking everybody here

00:41:56.300 --> 00:41:59.430
to implement the accessibility
APIs in your application.

00:41:59.510 --> 00:42:02.840
And this is important because this is
how VoiceOver talks to your application

00:42:02.840 --> 00:42:06.530
and gathers information about the user
interface experience as it's happening,

00:42:06.530 --> 00:42:07.510
as it's changing.

00:42:07.660 --> 00:42:12.070
And it turns out that this is a really
powerful feature inside of Mac OS X.

00:42:12.280 --> 00:42:16.180
And it opens up all sorts of interesting
opportunities for applications that

00:42:16.260 --> 00:42:17.790
have nothing to do with accessibility.

00:42:18.020 --> 00:42:19.920
So I just want to show
you an example of that.

00:42:19.980 --> 00:42:22.480
Let's say that I wanted
to build some online help.

00:42:22.510 --> 00:42:24.870
And I want to vend it via the web, HTML.

00:42:24.960 --> 00:42:27.510
So here's what that might look like.

00:42:29.310 --> 00:42:31.920
So here we have some online help.

00:42:32.050 --> 00:42:35.040
Somebody could go to this website
and see step-by-step instructions.

00:42:35.060 --> 00:42:37.140
So we've got some text
describing each thing,

00:42:37.140 --> 00:42:40.220
and we've got screenshots with
circles around each item of interest.

00:42:40.240 --> 00:42:42.900
And in this particular case,
this tells me how I can set the

00:42:42.900 --> 00:42:47.370
recent number of applications in the
Apple menu using system preferences.

00:42:47.530 --> 00:42:50.940
So it turns out the accessibility
APIs can help us create this type

00:42:51.040 --> 00:42:52.750
of documentation fairly easily.

00:42:52.860 --> 00:42:55.980
So we have a little sample application,
some concept where that does that.

00:42:55.980 --> 00:42:57.870
So I'm going to show that to you.

00:42:58.300 --> 00:42:59.840
All right,
so the first thing I'm going to do is

00:42:59.840 --> 00:43:01.500
launch this little sample application.

00:43:01.600 --> 00:43:03.400
It's called Follow Me.

00:43:03.580 --> 00:43:05.390
And I'm going to start recording.

00:43:05.490 --> 00:43:07.470
So...

00:43:07.630 --> 00:43:10.400
Notice now as I move
around my user interface,

00:43:10.400 --> 00:43:14.240
a little red circle follows
me underneath the mouse.

00:43:14.410 --> 00:43:17.780
So this is Follow Me asking
the accessibility APIs,

00:43:17.780 --> 00:43:18.760
what's under the mouse?

00:43:18.950 --> 00:43:20.010
What's its screen rectangle?

00:43:20.150 --> 00:43:22.460
And then it uses that information
to produce this circle.

00:43:22.600 --> 00:43:23.540
So that's fairly basic.

00:43:23.650 --> 00:43:27.040
So let's go ahead and create some
steps for our step-by-step tutorial.

00:43:27.120 --> 00:43:31.680
So step one is going to be click
on System Preferences from the doc.

00:43:31.930 --> 00:43:34.790
And now let's go ahead and click on it.

00:43:34.970 --> 00:43:38.950
And step two is going to
be click on Appearance.

00:43:40.640 --> 00:43:41.660
And now let's go there.

00:43:41.660 --> 00:43:46.310
And step three is going to
be go to this pop-up here.

00:43:46.370 --> 00:43:49.940
And step four is going to be--
let's use 50 for our example.

00:43:49.940 --> 00:43:51.900
Let's screenshot that.

00:43:51.980 --> 00:43:53.400
And we're done.

00:43:53.500 --> 00:43:54.960
So let's quit System Preferences.

00:43:54.960 --> 00:43:55.800
Don't need that anymore.

00:43:55.800 --> 00:43:57.470
And let's take a look at
the results and follow me.

00:43:57.480 --> 00:43:59.880
So now, of course,
we have four clean steps here.

00:43:59.940 --> 00:44:02.210
And we've got screenshots
with each step with the circle

00:44:02.220 --> 00:44:03.980
drawn in the right position.

00:44:04.130 --> 00:44:06.160
But more importantly, we've got text.

00:44:06.210 --> 00:44:07.680
And I didn't enter any of this text.

00:44:07.860 --> 00:44:10.340
And the text is actually
quite useful and accurate.

00:44:10.510 --> 00:44:13.180
So click System Preferences in the doc.

00:44:13.180 --> 00:44:15.020
Make selection from the pop-up.

00:44:15.090 --> 00:44:17.100
From the pop-up button, choose 50.

00:44:17.140 --> 00:44:20.770
Now this is, follow me,
using accessibility APIs and asking very

00:44:20.770 --> 00:44:22.440
specific questions of the user interface.

00:44:22.560 --> 00:44:25.160
Not only where is it on the screen,
but what's its purpose?

00:44:25.270 --> 00:44:26.550
What's its purpose in the application?

00:44:26.600 --> 00:44:27.300
What's its title?

00:44:27.320 --> 00:44:28.420
What's its value?

00:44:28.460 --> 00:44:31.300
And then it turns around and
presents that in an alternative way.

00:44:31.340 --> 00:44:34.950
VoiceOver is doing the exact same
thing for folks with disabilities.

00:44:35.110 --> 00:44:38.500
So there's a mainstream use
of the accessibility APIs.

00:44:38.520 --> 00:44:41.550
It's a very, very powerful feature,
often overlooked in Tiger.

00:44:41.610 --> 00:44:44.150
And it's very well supported
by Carbon and Cocoa.

00:44:44.200 --> 00:44:47.210
And I just want to leave you with
one reminder that VoiceOver is

00:44:47.400 --> 00:44:49.030
on every single Tiger system.

00:44:49.090 --> 00:44:51.930
So I strongly encourage you,
hit Command-F5, turn it on,

00:44:52.060 --> 00:44:53.920
see how accessible your applications are.

00:44:53.950 --> 00:44:55.920
Thanks very much.

00:45:02.730 --> 00:45:04.140
Thanks, Eric.

00:45:04.160 --> 00:45:05.970
Yeah, and VoiceOver is fantastic.

00:45:06.050 --> 00:45:09.240
It's really going to open up
our applications to everyone,

00:45:09.240 --> 00:45:13.820
to all blind and visually impaired users,
and the accessibility APIs are going

00:45:13.820 --> 00:45:17.450
to open up a whole other class of
application to be able to do things like

00:45:17.620 --> 00:45:21.400
this Follow Me demo that was shown today.

00:45:21.480 --> 00:45:23.660
So that's accessibility in VoiceOver.

00:45:23.690 --> 00:45:26.310
Next car, Baited Breath.

00:45:29.160 --> 00:45:31.130
Joyride.

00:45:31.130 --> 00:45:35.100
So this is about making your
apps fun and compelling,

00:45:35.140 --> 00:45:37.480
things that people really,
really want to use.

00:45:37.510 --> 00:45:40.920
And I could have a whole set of slides
about this and try to explain it,

00:45:41.080 --> 00:45:44.140
but I think the best way to explain
it is just to give you a demo

00:45:44.140 --> 00:45:47.610
of two applications that I think
sort of fulfill this category.

00:45:47.610 --> 00:45:49.770
So let's go over here.

00:45:51.940 --> 00:45:55.600
So the first application
is called Comic Life.

00:45:55.660 --> 00:45:58.430
There's actually an interesting
developer story with this.

00:45:58.900 --> 00:46:01.280
Five different engineers
are working on this.

00:46:01.330 --> 00:46:03.980
They've never met each other in person.

00:46:04.030 --> 00:46:05.060
They met on the internet.

00:46:05.120 --> 00:46:07.160
They live on three different continents.

00:46:07.220 --> 00:46:09.630
And they decided to write
a Cocoa application for

00:46:09.630 --> 00:46:12.790
Mac OS X to build comic strips.

00:46:13.110 --> 00:46:16.760
So let me go ahead and grab
a picture for the top here.

00:46:16.760 --> 00:46:18.100
How about a couple longhorns?

00:46:18.180 --> 00:46:19.780
What do you think?

00:46:20.910 --> 00:46:22.890
So you see,
as soon as I drop that picture on,

00:46:22.890 --> 00:46:26.700
and these pictures here are
all from your iPhoto library,

00:46:26.800 --> 00:46:30.800
so it integrates with iPhoto,
it performs a core image effect.

00:46:30.800 --> 00:46:33.800
I can go over here and I can
change the core image effect,

00:46:34.160 --> 00:46:38.800
things like your hatched grayscale,
how it's drawn bright.

00:46:38.970 --> 00:46:43.800
So all of these are core image
effects applying almost immediately.

00:46:43.810 --> 00:46:47.800
All right, so what would Longhorn say?

00:46:48.490 --> 00:46:50.580
Shouts from the audience.

00:46:50.580 --> 00:46:54.280
I like to chew my cud.

00:46:56.210 --> 00:46:57.850
Isn't that what longhorns do?

00:46:57.850 --> 00:46:59.600
They sit around and chew their cud?

00:46:59.600 --> 00:47:00.100
Okay.

00:47:00.110 --> 00:47:01.080
So there we go.

00:47:01.080 --> 00:47:01.540
There's one image.

00:47:01.640 --> 00:47:06.080
Let's go and add -- how about a tiger?

00:47:06.500 --> 00:47:08.140
Very nice.

00:47:08.310 --> 00:47:10.320
Let's get a speech balloon for that.

00:47:10.320 --> 00:47:12.600
He's a little more rambunctious.

00:47:12.600 --> 00:47:17.270
He says, catch me if you can.

00:47:18.530 --> 00:47:20.840
Move that over there.

00:47:20.870 --> 00:47:21.340
Boom.

00:47:21.340 --> 00:47:22.140
All right.

00:47:22.240 --> 00:47:25.250
So this is also integrated
in with the EyeSight.

00:47:25.590 --> 00:47:27.800
So I can go down here
and I can say Capture.

00:47:27.910 --> 00:47:29.940
And here am I.

00:47:29.940 --> 00:47:32.690
Let me see if I look this way.

00:47:32.700 --> 00:47:35.180
Now it's there.

00:47:35.200 --> 00:47:38.060
There we go.

00:47:38.080 --> 00:47:41.410
It just cartoonified me.

00:47:43.750 --> 00:47:50.190
And I'll say see you on the other side.

00:47:50.600 --> 00:47:57.350
I can squeeze that guy around,
move this over here.

00:47:57.650 --> 00:47:58.420
I don't like that.

00:47:58.610 --> 00:47:59.600
Off my nose.

00:47:59.900 --> 00:48:00.350
Nice.

00:48:00.600 --> 00:48:01.600
All right.

00:48:01.600 --> 00:48:04.600
See you on the -- let's
make it a little bigger.

00:48:04.600 --> 00:48:05.570
The other side.

00:48:05.700 --> 00:48:07.600
Notice there's sound
effects for everything.

00:48:07.600 --> 00:48:11.650
That's not my lunch.

00:48:12.610 --> 00:48:17.550
And one more here,
so how about this image from the chasm?

00:48:18.090 --> 00:48:23.410
Nice tiger jumping a chasm and this
longhorn looks slightly frightened.

00:48:23.480 --> 00:48:31.010
So we'll say,
"Whoa!" Convert that to graphics.

00:48:31.050 --> 00:48:31.050
Boom.

00:48:32.800 --> 00:48:45.400
[Transcript missing]

00:48:48.100 --> 00:48:50.500
There we go, put that around there.

00:48:50.560 --> 00:48:54.700
So again,
a really nice Cocoa application done

00:48:54.700 --> 00:48:56.000
by these people around the world.

00:48:56.020 --> 00:48:59.140
Now I have this great cartoon I'd like,
this comic strip I'd like,

00:48:59.150 --> 00:49:00.600
I want to publish it.

00:49:00.620 --> 00:49:03.930
Well, .Mac has public APIs now,
so you can publish things in

00:49:03.930 --> 00:49:05.810
your applications to .Mac.

00:49:06.130 --> 00:49:08.860
So let me go ahead up here
and do as simple as saying,

00:49:08.920 --> 00:49:10.880
publish to .Mac.

00:49:14.630 --> 00:49:17.280
And it'll go ahead and create this.

00:49:17.280 --> 00:49:17.980
Here we go.

00:49:18.120 --> 00:49:20.860
Looking for .mac.

00:49:20.860 --> 00:49:21.690
Here we go.

00:49:22.510 --> 00:49:25.470
Tiger, rocks, tiger.

00:49:26.700 --> 00:49:27.800
Boom, publishes it.

00:49:27.820 --> 00:49:29.980
It creates a JPEGs of
each of these images.

00:49:29.980 --> 00:49:31.440
It creates the HTML.

00:49:31.470 --> 00:49:33.600
It uploads it to my dot Mac account.

00:49:33.600 --> 00:49:35.180
And boom, there we are.

00:49:35.200 --> 00:49:37.300
Let me open it up in your browser.

00:49:37.360 --> 00:49:39.100
Here it is.

00:49:39.120 --> 00:49:39.900
There's the cartoon.

00:49:40.010 --> 00:49:41.140
So just like that.

00:49:41.190 --> 00:49:42.100
It's a comic strip.

00:49:42.100 --> 00:49:49.540
It's a really nice example of a very fun,
engaging application, a joy ride.

00:49:49.570 --> 00:49:52.260
All right,
so let me show you the next one.

00:50:00.720 --> 00:50:04.980
This next application is called Unity.

00:50:04.980 --> 00:50:09.990
And it's a 3D gaming engine,
plus it's an environment to both

00:50:10.260 --> 00:50:13.580
create the game and to play it,
to test it at the same time.

00:50:13.600 --> 00:50:15.970
So if you look up here,
this top pane is all

00:50:16.100 --> 00:50:18.600
about creating your game,
laying it out,

00:50:18.600 --> 00:50:20.600
and the bottom is all about using it.

00:50:20.600 --> 00:50:22.790
So I can go ahead and
just start running it,

00:50:22.790 --> 00:50:24.310
and here I am playing this game.

00:50:24.600 --> 00:50:26.200
Run around.

00:50:26.650 --> 00:50:27.580
All right, great.

00:50:27.740 --> 00:50:30.600
So again, the top is about setting it up.

00:50:30.630 --> 00:50:32.590
So I decide I want to
move this light source.

00:50:32.590 --> 00:50:35.600
I can just grab the light source,
move it over here.

00:50:35.600 --> 00:50:38.800
This is a fan light source,
so you can see when I run it,

00:50:38.850 --> 00:50:41.290
it's rotating, the fan's all rotating.

00:50:41.590 --> 00:50:44.370
And I can run through it.

00:50:45.490 --> 00:50:47.840
So let me go ahead and take this box.

00:50:47.840 --> 00:50:50.540
I can move the box over a little bit,
right about there.

00:50:50.540 --> 00:50:52.160
Again, run it.

00:50:52.250 --> 00:50:55.160
It's great, except it seems odd that a
box is floating in midair,

00:50:55.160 --> 00:50:57.480
so the engine's better than that.

00:50:57.480 --> 00:50:59.440
I can turn on gravity.

00:50:59.450 --> 00:51:00.360
Now I turn on again.

00:51:00.360 --> 00:51:02.700
Look, the box will actually
fall through the ground.

00:51:02.700 --> 00:51:03.200
OK.

00:51:03.200 --> 00:51:06.540
So there must be something
I'm missing here.

00:51:06.540 --> 00:51:11.700
Let's go to Component, Dynamics,
and turn on the box collider.

00:51:11.890 --> 00:51:15.760
And let me go ahead and run that again.

00:51:15.840 --> 00:51:18.450
And boom,
it falls and it rocks the other box.

00:51:18.600 --> 00:51:19.960
So very, very cool.

00:51:20.210 --> 00:51:23.890
Real time, you can sit there, play,
learn about it.

00:51:28.230 --> 00:51:30.900
So this is great.

00:51:31.000 --> 00:51:34.040
So I'd like to pimp my ride.

00:51:34.220 --> 00:51:36.200
I'd like to make a game out of it.

00:51:36.210 --> 00:51:38.090
Now I can just go here
and say build game,

00:51:38.090 --> 00:51:40.540
which will build a game I can spit out.

00:51:40.580 --> 00:51:42.950
It can build it for a full screen player.

00:51:43.160 --> 00:51:44.870
It can build it for the web page.

00:51:44.960 --> 00:51:46.740
But notice we've been out for, what,
40 days?

00:51:46.820 --> 00:51:49.360
You can build a widget out of this.

00:51:49.380 --> 00:51:53.120
No, they say, impossible.

00:51:53.390 --> 00:51:54.830
My great game.

00:51:54.840 --> 00:51:57.540
All right,
so I'll go ahead and create the game.

00:51:57.540 --> 00:52:00.470
So again, it's walking through,
finding every one of the objects,

00:52:00.710 --> 00:52:02.420
creating them,
creating all the characters,

00:52:02.420 --> 00:52:04.840
and it has spit it out,
so let me hide this.

00:52:04.880 --> 00:52:06.760
Here's the new widget, double-click.

00:52:06.860 --> 00:52:08.150
Yes, I'd like to accept.

00:52:08.280 --> 00:52:11.600
It's loading it up,
initializing all the different pieces.

00:52:11.600 --> 00:52:14.140
It has created this
nice little game frame,

00:52:14.140 --> 00:52:15.320
and here we are.

00:52:15.360 --> 00:52:17.240
You see the box just fell.

00:52:17.240 --> 00:52:19.990
I can go around, blast things,
and now I have this

00:52:20.000 --> 00:52:23.380
pretty high-fidelity game,
which I can spend the next

00:52:23.380 --> 00:52:26.780
10 hours playing for you,
you know, right here.

00:52:26.800 --> 00:52:29.380
So very, very cool.

00:52:29.380 --> 00:52:30.270
It's a game...

00:52:36.000 --> 00:52:40.590
Using the APIs of Mac OS X,
using things like OpenGL,

00:52:40.600 --> 00:52:44.160
they've built this great
Cocoa both building environment

00:52:44.600 --> 00:52:47.500
and test environment,
and they can even go

00:52:47.500 --> 00:52:48.960
out to widgets already.

00:52:48.960 --> 00:52:50.330
So very, very cool.

00:52:50.340 --> 00:52:51.330
So that is Joyride.

00:52:51.340 --> 00:52:55.920
It's to make very fun, compelling,
engaging applications.

00:52:55.980 --> 00:52:59.860
And even if you're building something
which is for the enterprise,

00:52:59.860 --> 00:53:03.100
find ways to still make it compelling,
make it fun.

00:53:04.660 --> 00:53:06.970
So here are the five user features.

00:53:07.130 --> 00:53:09.450
Now I'd like to turn it over to
Bertrand to go through the best

00:53:09.590 --> 00:53:12.000
practices for implementation.

00:53:12.010 --> 00:53:13.500
Bertrand.

00:53:13.500 --> 00:53:15.180
Thanks, Scott.

00:53:18.800 --> 00:54:29.400
[Transcript missing]

00:54:30.050 --> 00:54:34.840
Now we've added a twist to it,
and that's the Maco binary format.

00:54:34.970 --> 00:54:40.800
This format takes the executable
section compiled for PowerPC and

00:54:40.910 --> 00:54:47.910
glues that to the piece of executable
that is compiled for Intel.

00:54:48.110 --> 00:54:51.840
This is being
multi-architecture by design.

00:54:51.910 --> 00:54:56.310
We planned this a while back,
just in case.

00:54:57.070 --> 00:54:59.460
We've also changed the drivers,
the GCC driver,

00:54:59.510 --> 00:55:03.290
so that you can specify several
arguments at the command line,

00:55:03.290 --> 00:55:06.080
and it will build this universal binary.

00:55:06.940 --> 00:55:11.940
This is the way to compile code
to have your code universal.

00:55:12.000 --> 00:55:13.900
Could it be easier?

00:55:14.410 --> 00:55:16.950
Answer, yes,
it could be easier with Xcode,

00:55:17.010 --> 00:55:21.530
because with Xcode,
you just have this checkbox.

00:55:22.010 --> 00:55:25.930
The two checkboxes that
Theo mentioned this morning,

00:55:26.480 --> 00:55:28.140
they are there.

00:55:28.230 --> 00:55:32.660
Now, this checkbox produced not
just a universal binary,

00:55:32.730 --> 00:55:35.790
but they produce a universal application.

00:55:35.890 --> 00:55:41.170
Because as you know, in Mac OS X,
an application is a token in Finder,

00:55:41.260 --> 00:55:43.990
but in fact,
there's a whole set of things underneath.

00:55:44.270 --> 00:55:46.760
You have, obviously, the executable.

00:55:46.830 --> 00:55:49.630
Now, it's a binary that's universal.

00:55:49.730 --> 00:55:53.940
But you also have all the resources that
you need when you run your application.

00:55:53.950 --> 00:55:57.560
And you have all the localization
so that everyone from the

00:55:57.560 --> 00:56:00.440
world can run this application.

00:56:00.450 --> 00:56:03.760
You have these applications
that can live on a server,

00:56:03.810 --> 00:56:08.330
that can serve people that
have a Macintosh with PowerPC.

00:56:08.420 --> 00:56:11.940
Some will have a Macintosh with Intel.

00:56:12.140 --> 00:56:14.460
And they can even use
different languages.

00:56:14.510 --> 00:56:17.570
This is truly universal.

00:56:18.680 --> 00:56:24.600
So my first best practice here,
you need to literate.

00:56:24.600 --> 00:56:31.590
And that means using a universal
set of tools using GCC and Xcode.

00:56:32.780 --> 00:56:36.300
Next, best practice: open it up.

00:56:36.440 --> 00:56:40.120
This is all about openness.

00:56:40.660 --> 00:56:44.180
Because over the last decade or so,
there's been a major shift in the

00:56:44.250 --> 00:56:47.000
computer industry towards open systems.

00:56:47.010 --> 00:56:50.360
And in fact,
Apple is at the forefront of a shift.

00:56:50.400 --> 00:56:53.730
If you think like a decade ago,
we had an operating system

00:56:53.840 --> 00:56:55.040
that was not so open.

00:56:55.040 --> 00:56:57.760
I'm talking of Mac OS 9
and its predecessors.

00:56:57.760 --> 00:57:01.080
It didn't integrate very nicely
in the rest of the world.

00:57:01.400 --> 00:57:03.950
Think, for example, of networking.

00:57:04.230 --> 00:57:09.130
It didn't have much bridges,
too many bridges towards

00:57:09.430 --> 00:57:12.700
open kind of systems,
open subsystems.

00:57:12.820 --> 00:57:18.000
On the other hand,
Mac OS X is a very open system.

00:57:18.080 --> 00:57:19.210
Of course, you have Unix.

00:57:19.290 --> 00:57:22.300
I mean, you can do more open than Unix.

00:57:22.300 --> 00:57:24.600
Unix define openness in many ways.

00:57:24.700 --> 00:57:28.990
But you have also all those
bridges towards things like X11.

00:57:30.680 --> 00:57:32.980
So there are two sides to openness.

00:57:33.280 --> 00:57:37.420
You have open standards and open source.

00:57:37.520 --> 00:57:38.820
Why do open standards?

00:57:39.000 --> 00:57:41.790
Well, the first reason is obvious,
to avoid reinventing the wheel.

00:57:41.790 --> 00:57:44.920
There's lots of people who've
thought deeply about those topics.

00:57:45.080 --> 00:57:46.600
You may not be an expert in that area.

00:57:46.600 --> 00:57:48.120
Just use a standard.

00:57:48.120 --> 00:57:51.170
But there's a deeper reason for that.

00:57:51.170 --> 00:57:56.090
It's Metcalfe's law that states
that the interest of a protocol

00:57:56.090 --> 00:58:01.310
grows as a square of the number
of people who speak that protocol.

00:58:01.600 --> 00:58:05.730
This is a very conceptual law
that I think applies to a lot of

00:58:05.730 --> 00:58:08.420
what we do in the computer field.

00:58:08.850 --> 00:58:10.700
Now then you have open source.

00:58:10.820 --> 00:58:14.470
Now open source of course
implements open standards.

00:58:14.470 --> 00:58:16.590
That's very typical for open source.

00:58:17.160 --> 00:58:20.400
There's one reason to use open
source that has grown over the

00:58:20.400 --> 00:58:24.460
last few years and that's the
security advantage of open source.

00:58:25.110 --> 00:58:27.450
Because when you have some
code that's open source,

00:58:27.630 --> 00:58:28.760
you can trust the code.

00:58:28.760 --> 00:58:31.400
Because many people are
looking at the code.

00:58:31.520 --> 00:58:34.220
If it's open source,
they can look at the code.

00:58:34.220 --> 00:58:37.750
They can, if there's any weakness,
look at it and make sure all

00:58:37.750 --> 00:58:39.510
the weakness get addressed.

00:58:39.580 --> 00:58:42.460
On the other hand,
if you have closed source,

00:58:42.660 --> 00:58:46.190
you have to trust the entities
that provide you the source.

00:58:46.250 --> 00:58:49.550
This is why we've made,
this is one of the reasons why

00:58:49.550 --> 00:58:53.430
we've made the whole lowest
level of Mac OS X open source.

00:58:53.440 --> 00:58:54.780
Open source.

00:58:54.780 --> 00:58:57.010
Code as well is very reliable.

00:58:57.010 --> 00:59:01.340
Because again,
lots of people have contributed to fixes.

00:59:03.230 --> 00:59:05.800
It's also a good thing for
the community in general.

00:59:06.130 --> 00:59:10.250
So that's a little kind
of fuzzy and mushy,

00:59:10.390 --> 00:59:15.890
but I think you can do open source
just for self-interest as well.

00:59:16.150 --> 00:59:19.830
Because you benefit of all the
improvements of the community and it

00:59:19.830 --> 00:59:22.310
lets you focus where you add value.

00:59:23.060 --> 00:59:27.650
The place where you are an expert,
that's where you add value and that's

00:59:27.730 --> 00:59:31.080
a place where you can open source your
code or you can keep it closed source.

00:59:31.130 --> 00:59:36.190
We, Apple, as a model of doing both open
source and closed source.

00:59:36.890 --> 00:59:41.560
Now we have a number of components
in Tiger that are open source.

00:59:41.620 --> 00:59:44.350
Let me talk quickly about three of them.

00:59:44.460 --> 00:59:49.240
The first one is SQLite,
which is an open source SQL database.

00:59:49.240 --> 00:59:55.920
Now for a number of WWDC in the past,
I had folks coming to me and saying,

00:59:55.920 --> 00:59:58.920
"Well,
can you please bundle the database?

00:59:58.920 --> 01:00:02.170
I have an application that wants
to use the database and there's no

01:00:02.170 --> 01:00:06.640
standard database coming with Mac OS X,
so I have to do that on my own and

01:00:06.730 --> 01:00:11.600
persistence is not so trivial." So we
decided at the beginning of Tiger to

01:00:11.600 --> 01:00:17.230
look around and see what open source
database we could bundle in the system.

01:00:17.470 --> 01:00:21.040
And what we discovered is that there
were several groups within Apple,

01:00:21.040 --> 01:00:23.400
because of course we
had the need as well,

01:00:23.490 --> 01:00:25.800
who already were using SQLite.

01:00:25.850 --> 01:00:29.080
They were using SQLite
because it was very,

01:00:29.080 --> 01:00:31.810
very lightweight and it was fast.

01:00:31.890 --> 01:00:35.390
And so we said,
"This is perfect." And we have added

01:00:35.390 --> 01:00:41.290
SQLite bundled in the US and we use
it in major applications like Mail,

01:00:41.420 --> 01:00:42.360
Safari.

01:00:42.360 --> 01:00:46.720
Our experience with SQLite
has been exceptional.

01:00:47.100 --> 01:00:50.910
This is very reliable, very fast,
very lightweight.

01:00:51.020 --> 01:00:55.390
And it solved this persistency problem
when you want to have a database.

01:00:55.450 --> 01:01:02.010
Now remember, as we go towards Intel,
that every once in a while, you have,

01:01:02.010 --> 01:01:06.240
when you do persistent data structures,
you have this byte ordering problem,

01:01:06.240 --> 01:01:07.720
this Indian issue.

01:01:07.780 --> 01:01:09.290
And so they solved that.

01:01:09.500 --> 01:01:13.390
By having a database,
you solve this byte ordering issue.

01:01:13.480 --> 01:01:18.610
So it is a key in having
an application universal.

01:01:19.730 --> 01:01:24.000
Next open source subsystem,
that's WebCore.

01:01:24.030 --> 01:01:29.040
Now we decided to engage in doing
our own Brassler a few years ago.

01:01:29.130 --> 01:01:34.600
And we looked around and said what open
source base are we going to start from?

01:01:34.600 --> 01:01:39.350
We actually considered doing our own,
okay, recreating all that from scratch.

01:01:39.450 --> 01:01:41.480
But very quickly, we abandoned that idea.

01:01:41.750 --> 01:01:44.130
Because again, I mean,
you have such a leg up when you

01:01:44.150 --> 01:01:47.210
start with something that's open
source that has been iterated,

01:01:47.340 --> 01:01:48.760
and that's really good.

01:01:48.760 --> 01:01:54.430
And we decided to pick KHTML,
and WebCore is a derivative of KHTML.

01:01:54.950 --> 01:01:58.300
Because it was a next
generation rendering engine.

01:01:58.440 --> 01:02:01.120
It was designed with
modern concepts in mind,

01:02:01.390 --> 01:02:03.630
things like cascading style sheets.

01:02:03.630 --> 01:02:07.470
Very, very modern code base that
we knew we could evolve.

01:02:07.560 --> 01:02:11.270
It was also much smaller than
anything else we looked at

01:02:11.270 --> 01:02:13.480
for the same functionality.

01:02:14.210 --> 01:02:20.080
So we have made open source drops
of WebCore at regular intervals.

01:02:20.080 --> 01:02:26.510
I'm very happy to announce today that our
CVS repository is now live for WebCore.

01:02:26.640 --> 01:02:31.600
So you will be able to see
the progress as we make it.

01:02:35.440 --> 01:02:38.950
Now beyond that,
we have added an object-oriented wrapper

01:02:39.050 --> 01:02:44.800
called WebKit so that you don't have to
deal with all the details of WebCore.

01:02:44.870 --> 01:02:49.640
And we've decided to make
WebKit open source as well.

01:02:50.080 --> 01:02:52.550
So you'll be able to see.

01:02:57.100 --> 01:03:02.040
You will have a great code base to
look at to see how to best use WebCore.

01:03:02.040 --> 01:03:04.030
And that will go live later this week.

01:03:05.610 --> 01:03:10.840
Now we added also one feature in WebCore
in Tiger that is worth mentioning.

01:03:10.840 --> 01:03:13.710
In Panther,
you could of course render HTML.

01:03:13.710 --> 01:03:16.380
In Tiger, you can edit HTML as well.

01:03:16.380 --> 01:03:18.120
This is an important feature.

01:03:18.120 --> 01:03:21.130
If you use mail,
you are using that feature every day,

01:03:21.270 --> 01:03:25.030
every time you send a message
because that's done with the

01:03:25.270 --> 01:03:27.510
WebCore editing facility.

01:03:29.180 --> 01:03:33.640
Next, open source subsystem, JavaScript.

01:03:33.930 --> 01:03:35.250
Now JavaScript is a language.

01:03:35.250 --> 01:03:39.900
It's one of those interpreted languages
that has been growing over the past.

01:03:39.900 --> 01:03:42.500
By the way,
scripted languages are the fastest

01:03:42.630 --> 01:03:45.220
growing areas in terms of languages.

01:03:45.220 --> 01:03:49.530
A lot and a lot of you are using
more and more scripted languages,

01:03:49.620 --> 01:03:51.340
and I think that's great.

01:03:51.340 --> 01:03:53.980
Now,
when you look 10 years ago at the web,

01:03:53.980 --> 01:03:58.110
people were saying, well, you know,
maybe Java is going to take over the

01:03:58.110 --> 01:03:59.810
web for all the dynamic contents.

01:03:59.880 --> 01:04:01.370
This hasn't really happened.

01:04:01.500 --> 01:04:04.070
What has happened is that
JavaScript has taken over.

01:04:04.150 --> 01:04:08.530
You have more and more dynamic pages
that are written using JavaScript.

01:04:08.710 --> 01:04:08.990
Why?

01:04:08.990 --> 01:04:11.230
Because it's very lightweight.

01:04:11.400 --> 01:04:12.840
It's a very simple language.

01:04:12.840 --> 01:04:16.760
I mean, you don't need to have, like,
object-oriented constructs in many cases,

01:04:16.860 --> 01:04:21.370
and you can just type a few lines
of JavaScript and do what you want.

01:04:21.400 --> 01:04:24.540
It's also very well
integrated with the browser.

01:04:24.540 --> 01:04:26.780
And of course, we use that in Safari.

01:04:26.780 --> 01:04:32.320
We have an open source implementation,
KJS,

01:04:32.320 --> 01:04:35.160
and we use that for dashboard widgets.

01:04:35.160 --> 01:04:38.290
So we are fully committed to
improving our implementation

01:04:38.290 --> 01:04:39.900
of JavaScript over time.

01:04:39.900 --> 01:04:41.980
We are fully committed to JavaScript.

01:04:41.980 --> 01:04:45.780
It's becoming one of the key
languages on the platform.

01:04:45.780 --> 01:04:49.550
And one of the nice things of
JavaScript that has been mentioned

01:04:49.550 --> 01:04:51.780
earlier is that it's universal.

01:04:52.910 --> 01:04:55.550
So these were three
open source components.

01:04:55.560 --> 01:04:58.660
We have a lot more open
source components in Mac OS X.

01:04:58.660 --> 01:05:01.710
In fact,
between the client operating system

01:05:01.720 --> 01:05:06.000
and the server operating system,
we reshape about 100 different

01:05:06.000 --> 01:05:07.640
open source projects.

01:05:07.670 --> 01:05:10.720
Now this is maybe a good
time to do a parenthesis,

01:05:10.720 --> 01:05:13.750
open up a parenthesis on Mac OS X server.

01:05:13.800 --> 01:05:16.500
This is a product you may
or may not be familiar with.

01:05:16.500 --> 01:05:22.300
If you are a long time Apple follower,
you know that this product derives

01:05:22.560 --> 01:05:26.110
from the Apple share products
that we had like a decade ago.

01:05:26.150 --> 01:05:31.220
Apple share product was file and
print using the AFP protocol.

01:05:31.250 --> 01:05:35.860
It was a very closed protocol,
fundamentally.

01:05:35.870 --> 01:05:37.340
It was not an open product.

01:05:37.340 --> 01:05:43.160
Now we've changed totally that over the
years because nowadays Mac OS X server

01:05:43.450 --> 01:05:46.380
is all focused on open source.

01:05:46.390 --> 01:05:50.240
What Mac OS X server is,
is a container of open source

01:05:50.370 --> 01:05:53.020
products that we can use to
run our open source projects.

01:05:53.020 --> 01:05:56.520
Fundamentally, what we do is we take the
best open source projects,

01:05:56.520 --> 01:05:59.110
we qualify them,
something which is not always

01:05:59.150 --> 01:06:01.520
done in the open source community.

01:06:01.520 --> 01:06:03.280
We integrate them together.

01:06:03.280 --> 01:06:05.280
For example, we carburize the services.

01:06:05.290 --> 01:06:10.020
We make sure all the open source projects
that we shape play well together.

01:06:10.020 --> 01:06:12.830
And of course,
we put an easy to use UI on top of

01:06:12.830 --> 01:06:19.360
that so that anyone can administer
their machines with Mac OS X server.

01:06:19.390 --> 01:06:20.500
So this is what
Mac OS X server has become.

01:06:20.500 --> 01:06:23.990
very focused on open source.

01:06:24.440 --> 01:06:28.120
Okay, so what is the best practice here?

01:06:28.570 --> 01:06:32.620
Well, it is to do what we do,
which is to use open source

01:06:32.790 --> 01:06:34.470
projects whenever you can.

01:06:34.570 --> 01:06:37.660
You have a rich collection of
the web of open source projects,

01:06:37.910 --> 01:06:42.320
pretty much any piece of functionality
that you can describe in a few sentences.

01:06:42.320 --> 01:06:45.390
There's an open source project
that implements it out there,

01:06:45.390 --> 01:06:47.530
and there's many open source projects.

01:06:47.540 --> 01:06:51.210
So you can pick the ones that you want,
whether you need some command

01:06:51.210 --> 01:06:53.060
or whether you need a library.

01:06:53.640 --> 01:06:57.900
You then download the open source code,
you recompile it.

01:06:58.140 --> 01:07:01.240
Typically, the code has been run on
a variety of platforms,

01:07:01.240 --> 01:07:04.040
and so it will run as well
on PowerPC as on Intel.

01:07:04.040 --> 01:07:07.040
And if you make improvements to that,
you can share them.

01:07:07.040 --> 01:07:11.610
But the big thing with open source
code is that it is universal.

01:07:11.720 --> 01:07:15.320
And in fact, this morning,
Theo mentioned that in Mathematica,

01:07:15.410 --> 01:07:18.410
there's a number of open
source projects that are used,

01:07:18.410 --> 01:07:21.180
and those projects
came along very nicely.

01:07:23.370 --> 01:07:30.000
So this was my best practice number four,
open it up, which is all about using open

01:07:30.000 --> 01:07:33.430
standards and open source.

01:07:34.310 --> 01:07:38.700
Now, next best practice:
build from parts.

01:07:38.820 --> 01:07:42.990
The car industry has realized
that you can reuse components

01:07:43.070 --> 01:07:44.960
from one car to the next.

01:07:45.140 --> 01:07:49.470
Well, the analogy applies of course
to the software industry,

01:07:49.470 --> 01:07:51.730
where you can reuse components.

01:07:52.180 --> 01:07:56.540
This is all about object orientation.

01:07:56.620 --> 01:07:58.870
Now, some of you,
when you think of object orientation,

01:07:58.870 --> 01:08:00.900
you may think about Java.

01:08:00.990 --> 01:08:04.100
Mac OS X is a great platform for Java.

01:08:04.200 --> 01:08:07.390
There's a natural match between
the way Java was developed

01:08:07.390 --> 01:08:10.700
with Unix and the pinnings,
Unix stream, Java stream.

01:08:10.700 --> 01:08:14.140
There's a very nice impedance
match with the platform.

01:08:14.160 --> 01:08:18.510
At the same time,
we've made all the work to really make

01:08:18.510 --> 01:08:24.800
Java apps great citizen on the platform
so that our users don't need to know.

01:08:24.800 --> 01:08:31.460
We support both latest version of Java,
1.4.2 and Java 1.5.

01:08:31.460 --> 01:08:35.610
Java 1.5, if you are confused,
is also the same as Java 5.0.

01:08:35.610 --> 01:08:37.720
There's been a little
renaming change here.

01:08:37.720 --> 01:08:42.340
And both versions are available
on the Apple development system,

01:08:42.340 --> 01:08:47.710
which is... The system that you have
that has an Intel that you will be

01:08:47.730 --> 01:08:53.020
able to get your hands on this week
that has an Intel processor inside.

01:08:53.310 --> 01:08:57.310
So Java, of course,
enables your application to be universal.

01:08:57.440 --> 01:09:01.720
We do all the heavy lifting
in terms of making sure it

01:09:01.770 --> 01:09:04.910
works on any of the processors.

01:09:05.070 --> 01:09:08.360
There are a number of great
applications that are done in Java.

01:09:08.360 --> 01:09:11.300
Many of you, or some of you,
may be using Eclipse,

01:09:11.320 --> 01:09:16.400
which is a Java IDE geared
towards Java applications.

01:09:16.400 --> 01:09:20.490
In fact,
there's a number of great usage of Java.

01:09:20.530 --> 01:09:22.390
It's ideal for server code.

01:09:22.650 --> 01:09:26.750
And this is a place where Java has
totally taken off the application

01:09:26.750 --> 01:09:29.130
servers kind of business.

01:09:29.180 --> 01:09:32.190
It's also great for custom application.

01:09:32.580 --> 01:09:37.730
It's great whenever you need
to have cross-OS portability.

01:09:37.930 --> 01:09:40.080
Java is all fantastic for that.

01:09:40.180 --> 01:09:43.100
But Java is also a lowest
common denominator.

01:09:43.240 --> 01:09:46.180
So if you want to really
leverage a platform,

01:09:46.250 --> 01:09:48.880
it may not be ideal.

01:09:48.990 --> 01:09:53.200
That's where you want to go
towards a native object-oriented

01:09:53.330 --> 01:09:57.070
framework for the platform,
and that's Cocoa.

01:09:57.920 --> 01:10:02.960
Now we have, at the inception of Cocoa,
we had a bit of philosophy.

01:10:02.960 --> 01:10:08.080
We wanted to make sure it was possible to
write an application without much code.

01:10:08.080 --> 01:10:11.500
Because we all know that
the more code you have,

01:10:11.500 --> 01:10:15.060
the more work it's going
to take to write that code,

01:10:15.190 --> 01:10:17.430
to maintain that code, obviously.

01:10:17.480 --> 01:10:21.440
So there's been a lot of thought
that went into making sure we

01:10:21.440 --> 01:10:25.800
have automatic behaviors in Cocoa,
so that when you instantiate your object,

01:10:25.800 --> 01:10:28.440
you don't need to do
a lot of setup steps.

01:10:28.590 --> 01:10:32.250
Your object is ready to go,
ready to be useful right there.

01:10:32.580 --> 01:10:36.710
We optimize for the 80% case,
not the 20%.

01:10:37.450 --> 01:10:42.700
We also provided a rich toolbox with
encapsulated objects for a lot of

01:10:42.700 --> 01:10:45.320
the functionalities you may want.

01:10:45.370 --> 01:10:48.820
But at the same time,
we recognized the fact that to

01:10:48.820 --> 01:10:52.730
make your application special,
there had to be a few things where

01:10:52.730 --> 01:10:55.120
you deviate from the default behavior.

01:10:55.190 --> 01:10:58.100
That is the added value
of your application.

01:10:58.220 --> 01:11:00.340
That's the 20% case.

01:11:00.390 --> 01:11:02.940
And so for those few things,
we provided a lot of

01:11:03.030 --> 01:11:05.300
extensibility mechanisms.

01:11:05.370 --> 01:11:08.970
We provided, of course, subclassing,
but we also provided this

01:11:08.980 --> 01:11:13.000
mechanism that's called categories
that is extremely powerful.

01:11:13.020 --> 01:11:18.000
It enables you to have a network
of objects that is instantiated

01:11:18.010 --> 01:11:20.940
and to define behavior,
added behavior,

01:11:21.010 --> 01:11:25.080
additional behavior for those
objects that got instantiated.

01:11:25.130 --> 01:11:29.550
This is fairly unique to
Objective-C and Cocoa.

01:11:29.870 --> 01:11:33.190
And we support delegation,
which is another very interesting

01:11:33.320 --> 01:11:40.030
form of extensibility that in many
cases is your friend to get with very

01:11:40.040 --> 01:11:43.750
little code customizable behavior.

01:11:44.280 --> 01:11:48.100
Now, Cocoa is built on this language
that's called Objective-C.

01:11:48.180 --> 01:11:52.940
Now, saying that Objective-C is a
language is a little bit of misnomer

01:11:52.940 --> 01:11:58.360
because Objective-C is really
a very thin layer on top of C.

01:11:58.420 --> 01:12:01.630
If you look at the syntactic
production in the grammar,

01:12:01.630 --> 01:12:03.760
most of Objective-C is C.

01:12:04.340 --> 01:12:09.560
It's just adding a little bit of sugar,
syntactic sugar,

01:12:09.750 --> 01:12:14.660
for object-oriented concepts
like classes and methods.

01:12:14.860 --> 01:12:18.230
Now because it's mostly C,
it also means that it integrates really

01:12:18.230 --> 01:12:23.180
well with C++ and we have a number
of applications that are a mix of C,

01:12:23.180 --> 01:12:25.290
C++, Objective-C.

01:12:26.930 --> 01:12:31.970
At the heart of Objective-C,
there is a runtime.

01:12:32.210 --> 01:12:36.560
This is where the power
of Objective-C lies.

01:12:36.650 --> 01:12:41.520
This runtime is really powerful
because it enables introspection.

01:12:41.670 --> 01:12:44.880
So you can take an
Objective-C object and ask,

01:12:44.980 --> 01:12:48.620
"Okay,
what kind of methods can you handle?"

01:12:48.880 --> 01:12:55.270
This in turn enables rapid application
development tools like Interface Builder.

01:12:55.270 --> 01:12:59.410
And that's why you get a higher
productivity with Cocoa-based

01:12:59.610 --> 01:13:03.770
tools because you can specify
the behavior right there.

01:13:04.950 --> 01:13:08.200
Now, the language is one thing,
but a lot of the power of

01:13:08.370 --> 01:13:10.500
Cocoa comes from its frameworks.

01:13:10.500 --> 01:13:14.440
We've worked really hard to make sure
we have a rich set of frameworks,

01:13:14.450 --> 01:13:19.810
but very consistent set of frameworks,
very consistent, very predictable naming

01:13:19.810 --> 01:13:21.560
of the methods and so on.

01:13:21.560 --> 01:13:22.560
Very orthogonal APIs.

01:13:22.560 --> 01:13:25.860
You are not going to find a
little kind of property list

01:13:25.860 --> 01:13:31.220
abstraction in one part of the API,
and another kind of not quite the same,

01:13:31.220 --> 01:13:34.980
but very close abstraction
in another part of the API.

01:13:34.980 --> 01:13:37.850
No, we factorized all that.

01:13:38.030 --> 01:13:41.380
We've added a number of
subsystems over the years.

01:13:41.380 --> 01:13:44.060
There's all the basic subsystems
that you can think of,

01:13:44.070 --> 01:13:46.360
you know, views, text, and so on.

01:13:46.370 --> 01:13:50.860
Even some very high level ones like
document architecture or scripting.

01:13:51.580 --> 01:13:55.560
and each release we add new subsystems.

01:13:55.610 --> 01:14:01.240
Let me go through a couple of
the subsystems we added in Tiger.

01:14:01.360 --> 01:14:03.680
First one is Core Data.

01:14:03.870 --> 01:14:07.740
Now at first glance,
Core Data is about object-oriented

01:14:07.740 --> 01:14:10.360
APIs for persistency.

01:14:11.150 --> 01:14:15.950
An implementation of SQL,
of Core Data sits on top of SQLite.

01:14:15.950 --> 01:14:20.680
That means you can have this,
in the abstract, this network of objects,

01:14:20.790 --> 01:14:25.100
but they are stored in an SQLite file
and they are handled with SQLite.

01:14:25.160 --> 01:14:27.440
You can also go to XML files for debug.

01:14:27.440 --> 01:14:29.320
That's not very scalable,
but that's handy.

01:14:29.320 --> 01:14:32.800
And so you can edit your object graph.

01:14:32.910 --> 01:14:35.820
You can manipulate it and
automatically it will get

01:14:35.910 --> 01:14:38.200
reflected on file incrementally.

01:14:38.200 --> 01:14:41.070
This is not like, you know,
a big button that says save

01:14:41.160 --> 01:14:42.540
the entire object graph.

01:14:42.700 --> 01:14:46.440
No, this is all incremental,
which makes it fast.

01:14:46.440 --> 01:14:50.440
But Core Data is actually a
little more than persistency.

01:14:50.600 --> 01:14:54.430
It actually provides the
abstraction of a model if you use

01:14:54.430 --> 01:14:56.960
a model view controller paradigm.

01:14:57.080 --> 01:15:01.060
So it is very powerful
in that sense because it

01:15:01.150 --> 01:15:05.390
abstracts all handling of data,
pure data.

01:15:05.610 --> 01:15:09.160
And we have a number of tools
that enable you to define

01:15:09.220 --> 01:15:12.500
schema for your object graph.

01:15:12.650 --> 01:15:15.180
And so that gets rid
of a whole lot of code.

01:15:15.180 --> 01:15:18.820
So very quickly, by using the tools,
with direct manipulation of the tools,

01:15:18.820 --> 01:15:23.750
you can specify what are your objects,
what your objects look like,

01:15:23.750 --> 01:15:27.770
and hook them up to all
the UI very quickly.

01:15:29.360 --> 01:15:32.000
Next up, system, Sync Services.

01:15:32.150 --> 01:15:34.320
This is about data synchronization.

01:15:34.470 --> 01:15:38.990
We all live in a world that
has a lot of computers around,

01:15:39.080 --> 01:15:42.780
computers, devices,
and you have your data that's replicated

01:15:42.850 --> 01:15:45.590
across all those different environments,
all those machines.

01:15:45.600 --> 01:15:49.670
And so this is the problem
that Sync Services is solving,

01:15:49.850 --> 01:15:54.410
how to synchronize all the data
between the different places.

01:15:55.620 --> 01:16:02.200
Think Services give you very fine
control over the syncing process.

01:16:02.200 --> 01:16:04.180
You can do incremental syncing,
of course.

01:16:04.180 --> 01:16:07.420
You can specify what happens
when there's a conflict.

01:16:07.420 --> 01:16:13.320
We use that for all the system data types
you are used to-- things like addresses,

01:16:13.480 --> 01:16:16.340
calendars, bookmarks, and so on.

01:16:16.400 --> 01:16:18.980
But it is highly customizable.

01:16:19.090 --> 01:16:23.360
So you can use that for the data types
that are specific to your application.

01:16:23.360 --> 01:16:30.090
And you'll be able to have your users
sync via .Mac or sync with devices.

01:16:31.990 --> 01:16:35.020
Next-up system, Core Image.

01:16:35.050 --> 01:16:35.990
Scott mentioned that a bit.

01:16:36.150 --> 01:16:40.110
This is about making
accelerated graphics easy.

01:16:40.110 --> 01:16:43.860
I don't know about you,
but I do not know how to program

01:16:44.020 --> 01:16:48.520
the ATI chip or the NVIDIA chip,
and I don't really want to know.

01:16:49.340 --> 01:16:53.110
I want to use filters,
what we call image units,

01:16:53.110 --> 01:16:56.980
and I want to have a large
collection of filters.

01:16:57.030 --> 01:16:59.700
This is provided by Core Image.

01:16:59.750 --> 01:17:03.850
I want to define new image units,
and there's a little language to

01:17:03.850 --> 01:17:06.300
that that's independent of the GPU.

01:17:08.690 --> 01:17:11.720
And then I want something that's really,
really fast.

01:17:11.930 --> 01:17:15.080
No more slow random time.

01:17:15.130 --> 01:17:16.790
Real time.

01:17:17.070 --> 01:17:18.460
And that's what Core Image does.

01:17:18.460 --> 01:17:25.240
It has some rocket technology
here to look at the sequence,

01:17:25.240 --> 01:17:31.090
the composition of your effects and say,
okay, what kind of code I can dynamically

01:17:31.240 --> 01:17:36.010
generate on the fly to have the
optimal kind of per pixel composition.

01:17:36.500 --> 01:17:40.250
It creates that code
dynamically and then it runs it.

01:17:40.250 --> 01:17:42.370
That's how Core Image works.

01:17:42.370 --> 01:17:44.250
Really rocket science.

01:17:44.250 --> 01:17:48.990
And it is GPU and CPU independent,
as I mentioned earlier,

01:17:49.040 --> 01:17:52.900
so it will work whatever
machine the user has.

01:17:52.900 --> 01:17:56.270
In that sense,
it is another tool for getting

01:17:56.430 --> 01:17:58.580
a universal application.

01:18:01.570 --> 01:18:05.430
Last Cocoa Subsystem I want to mention,
that's QtKit.

01:18:05.500 --> 01:18:09.800
Over the years,
a number of you have come to say, "Wow,

01:18:09.800 --> 01:18:11.400
we really love QuickTime.

01:18:11.400 --> 01:18:13.870
There's so much power in QuickTime.

01:18:13.880 --> 01:18:17.990
The things that you can do with
QuickTime are just amazing." But the

01:18:18.070 --> 01:18:20.870
APIs are a little complex to use.

01:18:20.870 --> 01:18:25.400
You know, you have several
thousand of APIs to grok,

01:18:25.520 --> 01:18:29.400
and that's a little overwhelming when
you're not very familiar with that.

01:18:29.400 --> 01:18:33.120
So we've decided to add an
object-oriented API that

01:18:33.120 --> 01:18:35.360
perfectly fits with Cocoa.

01:18:35.510 --> 01:18:38.300
It is very much in the Cocoa spirit.

01:18:38.440 --> 01:18:44.400
I think it's been a beautiful job there
of having that perfectly fit Cocoa.

01:18:44.830 --> 01:18:48.430
It's simple, but...

01:18:50.350 --> 01:18:52.580
It's simple but powerful.

01:18:52.590 --> 01:18:55.740
In fact, it is so powerful that this
is what we're using in the

01:18:55.740 --> 01:18:57.860
QuickTime player that is in Tiger.

01:18:58.040 --> 01:19:03.380
We rewrote the QuickTime player from
scratch in order to use the Qt Kit APIs.

01:19:03.450 --> 01:19:06.120
You know,
this is a principle of dog food,

01:19:06.280 --> 01:19:09.240
which is kind of a religion in Cupertino.

01:19:09.530 --> 01:19:13.000
So you can get the same power
as a QuickTime player in your

01:19:13.000 --> 01:19:16.300
application by using those APIs.

01:19:16.400 --> 01:19:21.840
So these were just a few of the
subsystems that we've added in Tiger,

01:19:21.840 --> 01:19:23.440
in Cocoa.

01:19:23.830 --> 01:19:25.780
There are a lot more.

01:19:26.760 --> 01:19:30.290
Now, let me tell you a secret.

01:19:30.410 --> 01:19:34.600
You may have noticed over the
last few years that Apple has

01:19:34.760 --> 01:19:38.260
produced a few more apps,
both system apps and

01:19:38.260 --> 01:19:40.460
iLife apps and iWork apps.

01:19:40.460 --> 01:19:42.400
We've produced those apps really fast.

01:19:42.490 --> 01:19:44.760
They are high-quality applications.

01:19:44.760 --> 01:19:46.040
What's the secret?

01:19:46.040 --> 01:19:50.320
Well, most of those new apps written
from scratch have been written

01:19:50.320 --> 01:19:54.480
in Cocoa because Cocoa gives you
increased productivity because

01:19:54.650 --> 01:19:58.040
a Cocoa app is higher level,
has less code.

01:19:58.040 --> 01:19:59.860
It's hard to exactly quantify that.

01:19:59.860 --> 01:20:01.920
Some people are saying, you know, 5X.

01:20:02.070 --> 01:20:03.130
Others are saying 10X.

01:20:03.130 --> 01:20:04.680
I don't know what the exact number is.

01:20:04.680 --> 01:20:05.960
It doesn't really make sense.

01:20:05.960 --> 01:20:10.050
But for the same functionality,
you have way less code.

01:20:10.050 --> 01:20:11.330
That is a fact.

01:20:11.330 --> 01:20:16.780
And that really makes you write
new applications much more easily.

01:20:16.780 --> 01:20:19.060
Now, what about universality?

01:20:19.060 --> 01:20:21.340
What about Indianness in particular?

01:20:21.340 --> 01:20:26.310
Well, the good news there is that
Cocoa is a high-level API.

01:20:26.310 --> 01:20:29.980
And so it handles a lot of
the low-level things for you.

01:20:29.980 --> 01:20:32.960
And byte ordering is a
very low-level thing.

01:20:32.960 --> 01:20:37.560
For example, if you use the Unicode
abstraction and a string in Cocoa,

01:20:37.560 --> 01:20:45.700
you don't need to bother into exactly
what kind of for the Unicode bytes.

01:20:45.700 --> 01:20:47.730
Same thing for serializations.

01:20:47.730 --> 01:20:52.260
There's a number of APIs at different
levels with different serializations.

01:20:52.260 --> 01:20:58.410
And all those APIs in Cocoa handle,
of course, byte ordering perfectly.

01:20:58.730 --> 01:21:02.850
So if you have a Cocoa application,
you may have to do minor

01:21:02.920 --> 01:21:06.880
tweaks because remember,
you may have a portion of

01:21:06.970 --> 01:21:09.050
your application written in C.

01:21:09.140 --> 01:21:10.730
You can go as low level as you want.

01:21:10.800 --> 01:21:14.470
And if you go very low level,
you may have some tweaks to do.

01:21:14.510 --> 01:21:17.920
But for the most part,
it should just be a recompile.

01:21:17.920 --> 01:21:21.520
And then you will have a
universal Cocoa application.

01:21:22.880 --> 01:21:28.290
So I would like now to invite Ali Ozer,
who is manager of the Cocoa team,

01:21:28.290 --> 01:21:33.770
to demonstrate what you can do to
make Cocoa applications universal.

01:21:33.880 --> 01:21:35.090
Thank you, Bertrand.

01:21:41.470 --> 01:21:42.960
Hello, everybody.

01:21:42.960 --> 01:21:45.100
So let's say you want
to play some Solitaire.

01:21:45.320 --> 01:21:48.800
And since this mission-critical
application does not come with Tiger,

01:21:48.800 --> 01:21:50.350
you search the web.

01:21:53.570 --> 01:21:56.700
So if you go to randomoracle.com,
there's a very nice little

01:21:56.700 --> 01:21:58.060
solitaire game there.

01:21:58.100 --> 01:21:58.700
Let's download it.

01:22:08.200 --> 01:22:09.200
Okay, so there it is.

01:22:09.200 --> 01:22:09.860
Nice icon.

01:22:09.860 --> 01:22:11.960
Let's run it.

01:22:11.960 --> 01:22:12.700
There you go.

01:22:12.700 --> 01:22:15.130
Now, first thing to note is the number
in the title is not the number

01:22:15.220 --> 01:22:16.630
of games I've actually played.

01:22:16.740 --> 01:22:19.280
As a matter of fact,
I'm not very good at this game at all.

01:22:19.330 --> 01:22:21.880
I can never win for some reason,
but I know, you know,

01:22:21.880 --> 01:22:24.350
you're supposed to grab the reds
and put them on top of blacks.

01:22:24.570 --> 01:22:26.340
The game is pretty nice
because it will give you hints.

01:22:26.340 --> 01:22:26.840
There you go.

01:22:26.840 --> 01:22:28.390
You know, you can play those, too.

01:22:28.390 --> 01:22:30.660
You can even undo moves
if you make a mistake.

01:22:30.720 --> 01:22:31.330
So there you go.

01:22:31.470 --> 01:22:33.520
Pretty nice little solitaire game.

01:22:33.520 --> 01:22:36.060
Now, one thing to note, though,
this game, I just downloaded.

01:22:36.150 --> 01:22:39.120
It's clearly a PowerPC application,
a Cocoa application

01:22:39.120 --> 01:22:40.530
written for the PowerPC.

01:22:40.970 --> 01:22:44.670
However, if we look

01:22:47.750 --> 01:22:50.300
You'll see that it is
one of those Intel boxes.

01:22:50.300 --> 01:22:51.180
You saw earlier one.

01:22:51.240 --> 01:22:52.100
Steve was on it.

01:22:52.100 --> 01:22:53.240
And here you go.

01:22:53.240 --> 01:22:55.340
This one is also an Intel box.

01:22:55.340 --> 01:22:57.180
So what's going on here
is that this application,

01:22:57.180 --> 01:23:00.330
this PowerPC application
is running translated.

01:23:00.330 --> 01:23:02.890
It's being translated through Rosetta.

01:23:02.890 --> 01:23:05.370
Now, important to note,
we downloaded this and ran it,

01:23:05.370 --> 01:23:07.450
and there was no panels,
nothing telling you

01:23:07.450 --> 01:23:10.050
you're going to do this,
no UI to indicate that it's

01:23:10.100 --> 01:23:11.470
running in this funky mode.

01:23:11.840 --> 01:23:13.320
It's a transparent UI.

01:23:13.590 --> 01:23:15.420
You also notice that it's dynamic.

01:23:15.420 --> 01:23:16.790
It's happening on the fly.

01:23:16.920 --> 01:23:18.200
It's very compatible.

01:23:18.260 --> 01:23:19.040
It's very fast.

01:23:19.160 --> 01:23:20.470
And you just can't tell.

01:23:20.510 --> 01:23:22.200
So it's doing a very good job.

01:23:23.550 --> 01:23:27.350
However,
now that we know that this is translated,

01:23:27.380 --> 01:23:29.970
being developers, it's like, well,
translated is great,

01:23:29.980 --> 01:23:34.040
but what would be even better is if we
had a native version of this application,

01:23:34.040 --> 01:23:35.740
one that was actually built for Intel.

01:23:35.740 --> 01:23:37.890
So let's see if we can do that.

01:23:38.770 --> 01:23:41.360
Now it turns out the website
I downloaded this from also

01:23:41.430 --> 01:23:43.760
comes with the source code,
which is great.

01:23:43.760 --> 01:23:45.800
So let's download that.

01:23:51.240 --> 01:23:54.460
So there's a tar file
containing the sources.

01:23:54.500 --> 01:23:56.660
I will expand it and I will open it.

01:23:56.720 --> 01:23:58.960
You'll notice that it's
a fairly small size.

01:23:59.120 --> 01:24:03.420
It's about 3,000,
4,000 lines of Objective-C source code.

01:24:03.580 --> 01:24:05.500
We'll go ahead and open the project.

01:24:05.830 --> 01:24:08.560
Now, when you open an older project,
any project,

01:24:08.600 --> 01:24:15.400
either from old days or Xcode 2.0 even,
in Xcode 2.1, you'll be asked to upgrade.

01:24:15.400 --> 01:24:17.480
And you can save the project
file aside if you don't want

01:24:17.480 --> 01:24:18.830
to write over the one you have.

01:24:18.960 --> 01:24:21.110
So I will go ahead and do that.

01:24:23.090 --> 01:24:25.800
So the project is saved and it's
opened and as you can see it's

01:24:25.800 --> 01:24:28.500
got the source code in there.

01:24:28.500 --> 01:24:32.100
Now before I build this, one more note,
if you open a fairly old project,

01:24:32.210 --> 01:24:34.940
not Xcode 2.0,
if you open a Jam-based project

01:24:34.940 --> 01:24:38.670
or a project builder project,
you'll notice that the project is not yet

01:24:38.670 --> 01:24:40.910
using the native build system of Xcode.

01:24:41.090 --> 01:24:45.000
You know that because the menu item here,
upgrade all projects and all

01:24:45.020 --> 01:24:46.960
targets in project to native.

01:24:46.960 --> 01:24:49.640
That indicates that this is
still using the old build system.

01:24:49.640 --> 01:24:51.730
Now you want to upgrade to
the native build system.

01:24:51.840 --> 01:24:56.270
It's not necessary, it's optional,
but you want to do that if you want to

01:24:56.270 --> 01:24:59.600
take advantage of features like zero
link or if you want to build universal.

01:24:59.600 --> 01:25:00.800
So it's a good idea to do.

01:25:00.960 --> 01:25:03.240
And I will go ahead and do that now.

01:25:03.300 --> 01:25:05.320
It tells me what it's going to do.

01:25:05.320 --> 01:25:05.940
And it does it.

01:25:05.970 --> 01:25:07.940
I won't read this,
but the gist of it is that the

01:25:07.940 --> 01:25:12.270
upgrade went well and that should
be the experience with most of you.

01:25:12.920 --> 01:25:15.890
Okay, now that we've done this,
we're about ready to build.

01:25:15.950 --> 01:25:18.330
One more thing I want to show you is
that I'm going to click on the upgraded

01:25:18.490 --> 01:25:20.370
target and bring up the info panel.

01:25:20.370 --> 01:25:23.690
Now, so far, you've been seeing the fake
version of this on slides,

01:25:23.690 --> 01:25:25.230
but here's the real panel.

01:25:25.230 --> 01:25:27.790
The architecture here shows
you native architecture.

01:25:27.840 --> 01:25:29.120
That's the default situation.

01:25:29.120 --> 01:25:31.640
If I double click on this,
you'll see that panel,

01:25:31.640 --> 01:25:34.760
the one that's been shown on slides,
showing you the Intel and

01:25:34.760 --> 01:25:35.900
PowerPC buttons.

01:25:35.900 --> 01:25:41.370
I will leave the Intel selection,
and I will go ahead and hit build and go.

01:25:41.400 --> 01:25:44.150
So, again,
this project just came off the web,

01:25:44.150 --> 01:25:44.800
fresh.

01:25:44.800 --> 01:25:45.440
It wasn't built.

01:25:45.440 --> 01:25:46.890
It didn't know anything about Intel.

01:25:46.890 --> 01:25:48.100
And there you go.

01:25:48.270 --> 01:25:52.700
So the project came up and running
on Intel with zero lines of code

01:25:52.700 --> 01:25:55.610
change and very minor tweaks,
which is nice.

01:26:00.540 --> 01:26:03.110
And it seems to be
working as well as before.

01:26:03.400 --> 01:26:03.740
There you go.

01:26:03.740 --> 01:26:04.740
I can make my moves.

01:26:04.880 --> 01:26:08.320
Now,
you might not believe me at this point,

01:26:08.370 --> 01:26:09.930
of course, that this is Intel.

01:26:09.930 --> 01:26:13.640
One way to tell is that you can
bring up the application in Finder,

01:26:13.640 --> 01:26:16.340
the executable,
or the application itself.

01:26:16.380 --> 01:26:18.770
And if you look at this last
column with summary of information,

01:26:18.770 --> 01:26:22.010
you'll see that the
architecture is indeed Intel.

01:26:22.020 --> 01:26:25.640
So I will close this,
and I will quit the game.

01:26:25.690 --> 01:26:28.330
Now I'll go back to Project Builder.

01:26:28.980 --> 01:26:31.460
Bring up the info panel.

01:26:31.860 --> 01:26:34.560
Bring up the architecture panel,
and I will double click both.

01:26:34.700 --> 01:26:36.500
Because, of course,
the best practice for shipping

01:26:36.500 --> 01:26:38.920
your application when you're
done with it and you're ready to

01:26:39.240 --> 01:26:40.700
ship it is to ship it universal.

01:26:40.700 --> 01:26:46.110
So it runs on Macintoshes of
both Intel and PowerPC flavor.

01:26:46.810 --> 01:26:52.500
Now, when I do that,
and I go back and say again, build,

01:26:52.610 --> 01:26:54.490
note that it starts building again.

01:26:54.820 --> 01:26:57.240
Now, this time,
it's already built to Intel before,

01:26:57.240 --> 01:26:59.500
so it's just building
the PowerPC binaries,

01:26:59.610 --> 01:27:01.450
and it's packaging it all up,
and it's finished building.

01:27:01.610 --> 01:27:03.590
So let's go ahead and run.

01:27:03.890 --> 01:27:06.360
And again,
now this is the universal application.

01:27:06.360 --> 01:27:08.070
It runs just like the other one did.

01:27:08.120 --> 01:27:08.680
No problems.

01:27:08.680 --> 01:27:09.740
You can't tell.

01:27:09.740 --> 01:27:12.230
The only way that if you want to
really tell and convince yourself

01:27:12.320 --> 01:27:13.960
is you say show in finder.

01:27:14.160 --> 01:27:18.560
And you'll see that the architecture
here is Intel and PowerPC.

01:27:18.560 --> 01:27:22.560
So zero lines of code change and you
have yourself a universal binary.

01:27:22.560 --> 01:27:24.880
Let me show you one more application.

01:27:24.880 --> 01:27:29.140
Now, this one, as I said,
is a fairly small app.

01:27:29.140 --> 01:27:32.240
This one is an application
called GNU Mail.

01:27:32.240 --> 01:27:37.580
This is about -- I think it
uses a reusable framework and

01:27:37.580 --> 01:27:41.340
along with the framework it's
about 95,000 lines of code.

01:27:41.520 --> 01:27:44.520
The app itself is 60,000 lines
of Cocoa Objective C and the

01:27:44.520 --> 01:27:46.740
framework is about 35,000 lines.

01:27:46.840 --> 01:27:48.810
It's called pantomime,
a pretty nice framework for

01:27:48.810 --> 01:27:50.180
message delivery and so on.

01:27:50.310 --> 01:27:56.790
So I downloaded this earlier and I built
it and I will now get it running for you.

01:27:57.430 --> 01:28:00.630
Notice it's doing some last few linking,
relinking everything,

01:28:00.650 --> 01:28:04.920
and it's going to get started
right now and copy the resources.

01:28:04.930 --> 01:28:08.300
And there you go.

01:28:08.300 --> 01:28:08.300
So this is a...

01:28:08.690 --> 01:28:10.960
This is, as I said,
a fairly large Cocoa application,

01:28:10.960 --> 01:28:12.980
a full-featured mail application.

01:28:12.980 --> 01:28:14.260
And you can click on the messages.

01:28:14.310 --> 01:28:16.980
You'll see that it's got -- by the way,
here's where you go for

01:28:16.980 --> 01:28:18.590
the beer bash on Thursday.

01:28:18.620 --> 01:28:19.400
Catch that?

01:28:19.510 --> 01:28:21.110
If you're not taking the bus.

01:28:21.200 --> 01:28:25.130
Oh, there's the Beagle my nieces just
bought and my Apple store order.

01:28:25.440 --> 01:28:29.030
But as you can see, it's got support for
rich text mail and so on.

01:28:29.090 --> 01:28:31.280
It's got a nice set of preferences.

01:28:31.280 --> 01:28:35.220
You can see here you can click
expert and see more preferences.

01:28:35.220 --> 01:28:37.750
And it's interesting to note
that although I did download this

01:28:37.870 --> 01:28:40.880
earlier and prepared for the demo,
the number of lines of code

01:28:40.900 --> 01:28:42.540
I had to change were zero.

01:28:42.540 --> 01:28:44.340
Zero lines of code change.

01:28:44.380 --> 01:28:46.340
Again, just build and ran.

01:28:46.340 --> 01:28:49.820
So here we have two unsuspecting
apps that just ran on Intel,

01:28:49.820 --> 01:28:50.540
no problem.

01:28:50.830 --> 01:28:53.300
And as a matter of fact,
I actually tried another six,

01:28:53.350 --> 01:28:57.480
another half a dozen applications,
downloaded and tried them, and they all,

01:28:57.480 --> 01:29:00.240
all of these built and ran
with zero lines of code change.

01:29:00.350 --> 01:29:03.080
So I think for the most part,
most of you are going to

01:29:03.080 --> 01:29:04.470
be in for a nice surprise.

01:29:04.470 --> 01:29:06.790
And I hope you get a chance to try
this out on your Apple devices.

01:29:06.890 --> 01:29:08.550
own applications soon.

01:29:09.020 --> 01:29:10.610
Thank you.

01:29:17.610 --> 01:29:19.640
Thank you, Ali.

01:29:19.880 --> 01:29:21.460
Zero line change.

01:29:21.700 --> 01:29:23.220
That's amazing.

01:29:23.350 --> 01:29:27.760
So this was building from parts,
which is really about using object

01:29:27.760 --> 01:29:31.620
orientation for high-level programming.

01:29:31.640 --> 01:29:33.400
Now, what about Carbon?

01:29:33.430 --> 01:29:34.840
Well, let's talk about Carbon.

01:29:34.840 --> 01:29:37.310
Let's soup it up.

01:29:42.400 --> 01:29:50.290
A lot of the big names applications on
the platform are Carbon applications.

01:29:50.900 --> 01:31:38.200
[Transcript missing]

01:31:38.400 --> 01:31:45.440
The best practice here is to continue to
perfect your Carbon application and also,

01:31:45.590 --> 01:31:49.520
of course, to make it universal.

01:31:49.730 --> 01:31:54.270
Now, you may encounter two areas of
difficulty in terms of making

01:31:54.270 --> 01:31:59.410
your Carbon application universal,
and the first one is resources.

01:32:00.210 --> 01:32:03.180
If you use resources
for standard UI element,

01:32:03.230 --> 01:32:05.100
well,
you're done because we have done the

01:32:05.100 --> 01:32:11.180
work of dealing with the byte ordering
issues that may occur with resources.

01:32:11.240 --> 01:32:13.790
Of course, the best practice there
is that if you want,

01:32:13.860 --> 01:32:17.790
you can switch to interface builder
and then it will become even easier

01:32:17.790 --> 01:32:20.130
and you have direct manipulation.

01:32:20.760 --> 01:32:23.940
If you are using custom resources, well,
you are on your own here.

01:32:23.940 --> 01:32:27.100
You may have to tweak
by hand the resources.

01:32:27.100 --> 01:32:31.450
As you get things of the resource files,
you may have to flip the

01:32:31.450 --> 01:32:33.580
bits or flip the bytes.

01:32:33.640 --> 01:32:38.360
We provide you a mechanism called
flippers to ease that a little bit.

01:32:39.330 --> 01:32:42.310
The second category of
difficulties that we've seen with

01:32:42.390 --> 01:32:45.700
Carbon application is document formats.

01:32:45.790 --> 01:32:51.810
Now, if your application has a kind of
standard document format or has

01:32:52.090 --> 01:32:56.290
been ported on Windows where it's
using the same document format,

01:32:56.370 --> 01:32:58.040
chances are you have nothing to do.

01:32:58.040 --> 01:33:02.000
Your document format
is already end-in-safe.

01:33:02.000 --> 01:33:04.680
But if you have some in-memory
data structures that you are

01:33:04.730 --> 01:33:09.050
making persistent by blasting
those data structures onto disk,

01:33:09.050 --> 01:33:13.200
you may have some difficulties
because the PowerPC layout is

01:33:13.200 --> 01:33:15.390
different from the Intel layout.

01:33:15.400 --> 01:33:18.160
So you will have then
to handle end-in-ness.

01:33:18.160 --> 01:33:20.880
And again, you can tweak by hand.

01:33:20.880 --> 01:33:25.270
Or you can change your format if
that's a possibility for you and

01:33:25.270 --> 01:33:32.310
use a standard XML format or other
APIs like the HRI archive I mentioned.

01:33:32.900 --> 01:33:36.720
So looking at the steps to
make a Carbon app universal,

01:33:36.780 --> 01:33:39.970
first step to tweak and then recompile.

01:33:40.090 --> 01:33:44.080
Ah, but to recompile,
you need to have universal tools.

01:33:44.080 --> 01:33:48.120
And the only universal tools,
at least for the moment on the platform,

01:33:48.120 --> 01:33:50.840
are GCC and Xcode.

01:33:51.130 --> 01:33:53.220
So first, you need to switch to Xcode.

01:33:53.300 --> 01:33:57.820
The good news there is that we've
made it easier to import your

01:33:58.200 --> 01:34:00.420
Carbon application into Xcode.

01:34:00.490 --> 01:34:03.190
In Xcode 2.1,
there are new facilities that

01:34:03.190 --> 01:34:08.850
enable you to keep the structure
for the sources that you have into,

01:34:08.850 --> 01:34:11.200
when you import it into Xcode.

01:34:11.230 --> 01:34:14.220
We have a mechanism called
configurations that enable you

01:34:14.360 --> 01:34:17.400
to produce different binaries,
different tools.

01:34:17.430 --> 01:34:22.100
And all this works with precompiled
headers so that you can have the

01:34:22.560 --> 01:34:24.880
best speed for C code or C++ code.

01:34:24.910 --> 01:34:26.690
And we've improved the debugger.

01:34:26.810 --> 01:34:30.440
All that will be covered with
a lot more length in an hour.

01:34:30.440 --> 01:34:31.930
or so.

01:34:32.440 --> 01:34:35.980
So summarizing the steps to
make a Carbon app universal.

01:34:36.120 --> 01:34:40.410
First one, if you are not there already,
switch to GCC index code.

01:34:40.550 --> 01:34:42.650
Step two, tweak.

01:34:42.720 --> 01:34:44.120
Step three, recompile.

01:34:44.410 --> 01:34:47.930
And you will have a
universal application.

01:34:48.030 --> 01:34:51.370
So the best practice for your
Carbon application is to beat up.

01:34:51.470 --> 01:34:54.630
Is continue to evolve
your Carbon application

01:34:54.750 --> 01:34:58.090
as we are evolving Carbon.

01:34:59.900 --> 01:35:03.680
Next best practice and
my last best practice,

01:35:03.790 --> 01:35:07.000
probably the most important,
pedal to the metal.

01:35:07.000 --> 01:35:12.920
In order to delight your users,
your application needs to be fast.

01:35:12.920 --> 01:35:15.320
Speed is the key.

01:35:15.320 --> 01:35:20.340
Now in order to have a fast application,
you need a fast operating system.

01:35:20.400 --> 01:35:23.250
And you know,
it's a bit of a challenge when

01:35:23.250 --> 01:35:26.750
you have 200 new features,
including some deep

01:35:26.750 --> 01:35:31.540
features like Spotlight,
to make the system as fast as it was.

01:35:31.840 --> 01:35:33.870
Yet we've done that.

01:35:33.870 --> 01:35:39.610
We measure always at each
release a number of metrics.

01:35:39.640 --> 01:35:45.700
And the vast majority of all the metrics
we measure tell us that Tiger is a

01:35:45.700 --> 01:35:48.450
little bit faster than its predecessor.

01:35:48.470 --> 01:35:52.610
And this is a trend we've carried
for a number of releases now.

01:35:52.660 --> 01:35:54.050
How do we do that?

01:35:54.050 --> 01:35:56.310
Well, it's a lot of hard work.

01:35:56.310 --> 01:36:00.840
We get the entire team to spend
several months just thinking,

01:36:00.840 --> 01:36:03.000
focusing about performance.

01:36:03.000 --> 01:36:04.840
There's no secret here.

01:36:04.840 --> 01:36:07.260
It's really a lot of hard work.

01:36:07.390 --> 01:36:08.880
We turn every stone.

01:36:08.880 --> 01:36:11.880
You know,
we look at everything we can do,

01:36:12.070 --> 01:36:13.080
and we do it.

01:36:13.080 --> 01:36:18.420
Starting with the kernel and the OS,
we are trying to be a little

01:36:18.420 --> 01:36:20.780
more stingy with resources.

01:36:20.780 --> 01:36:24.450
And the key here is laziness,
lazy evaluation.

01:36:24.450 --> 01:36:27.240
We try to save the memory until
you use a certain subsystem.

01:36:27.240 --> 01:36:27.480
And that's the key.

01:36:27.480 --> 01:36:29.590
We try to save the memory
until you use a certain system.

01:36:30.180 --> 01:36:31.640
We have improved boot time.

01:36:31.640 --> 01:36:35.860
We added a great new facility
for those of you who are in the

01:36:35.860 --> 01:36:37.860
unique space called LaunchD.

01:36:37.920 --> 01:36:41.730
I recommend that you go to the
BSD sessions that talk about that.

01:36:41.950 --> 01:36:47.660
That enables us to launch all the
process lazily in the dependency order.

01:36:47.760 --> 01:36:50.640
We changed the kernel so that
it's a lot more efficient

01:36:50.870 --> 01:36:52.610
on multiprocessor machines.

01:36:52.800 --> 01:36:54.420
The fine-grained locking.

01:36:54.480 --> 01:37:00.300
We've done a lot of things to optimize
specific tasks in the OS itself.

01:37:00.430 --> 01:37:01.900
Now there's also the frameworks.

01:37:01.900 --> 01:37:07.640
Now the frameworks are highly leveraged
because if we save 1k bytes in,

01:37:07.640 --> 01:37:11.140
say, the system framework,
every single process that

01:37:11.140 --> 01:37:14.490
uses a system framework,
and typically you have like 50 or

01:37:14.490 --> 01:37:19.100
100 of those on a typical machine,
is going to save this 1k bytes.

01:37:19.100 --> 01:37:26.700
So you've saved now a significant
portion of the RAM that your users have.

01:37:26.890 --> 01:37:30.700
And you have certain code paths that
are very critical for performance.

01:37:30.700 --> 01:37:34.700
The graphics code path,
the text code path, you know,

01:37:34.700 --> 01:37:36.070
certain operations like drag and drop.

01:37:36.350 --> 01:37:38.700
So we've optimized all this.

01:37:38.790 --> 01:37:39.700
And then there's the tools.

01:37:39.700 --> 01:37:44.800
We benefit from the improvements in GCC,
the improvements that we do, but frankly,

01:37:44.810 --> 01:37:46.700
we should not take credit
here for the community.

01:37:46.700 --> 01:37:49.740
There's a lot of improvements that
the community does in terms of

01:37:50.020 --> 01:37:51.690
generating more efficient code.

01:37:51.700 --> 01:37:52.270
We have a lot of improvements that
the community does in terms of

01:37:52.270 --> 01:37:52.700
generating more efficient code.

01:37:52.700 --> 01:37:53.700
So we benefit from all that.

01:37:53.700 --> 01:37:57.760
And in fact, for the last two categories,
the improvements we do in the

01:37:57.900 --> 01:38:01.550
frameworks and in the tools,
you directly benefit from that.

01:38:01.700 --> 01:38:06.700
So you'll get an automatic speed
up with your application on Tiger.

01:38:06.720 --> 01:38:07.620
Do you want more speed?

01:38:07.720 --> 01:38:10.770
The answer is yes, of course,
always maximum speed.

01:38:10.770 --> 01:38:12.700
That's the best practice here.

01:38:12.700 --> 01:38:17.420
And to gain more speed,
the first step in all the textbook is

01:38:17.420 --> 01:38:20.690
first to measure and then to optimize.

01:38:20.730 --> 01:38:21.700
But you need to know first
what is the problem here.

01:38:21.700 --> 01:38:23.700
And for that,
we have a number of performance tools.

01:38:23.700 --> 01:38:28.700
I think they are very good tools.

01:38:28.700 --> 01:38:31.810
And the reason why is, again,
the dog food principles.

01:38:32.040 --> 01:38:34.690
We use those for our
own system applications.

01:38:34.740 --> 01:38:38.650
We have tools for pretty much every
performance aspect in the system.

01:38:38.700 --> 01:38:43.700
We have tools to measure
CPU activities at shark and sampler.

01:38:43.810 --> 01:38:46.470
We have tools to address memory usage.

01:38:46.700 --> 01:38:50.640
We have tools to look at the threading,
at the drawing, a number of tools.

01:38:50.770 --> 01:38:53.750
I think you will find that
our tool collections for

01:38:53.840 --> 01:38:55.550
performance is really rich.

01:38:55.700 --> 01:38:58.560
And by the way,
all those tools are present on

01:38:58.760 --> 01:39:02.820
the Apple development system,
the boxes that have an

01:39:02.820 --> 01:39:07.700
Intel processor that you can touch
in the labs throughout this week.

01:39:07.870 --> 01:39:10.700
So those tools are universal.

01:39:12.020 --> 01:39:16.990
Now, once you have found out
what are the problem areas,

01:39:17.180 --> 01:39:20.300
what are the hotspots,
you want to optimize.

01:39:20.440 --> 01:39:22.890
And here, all the textbooks say that,
and they are right.

01:39:23.040 --> 01:39:25.970
The first thing to do is
to work on the algorithm.

01:39:25.970 --> 01:39:27.280
Okay, that's the key.

01:39:27.280 --> 01:39:29.130
But of course you are doing that.

01:39:29.240 --> 01:39:30.820
And so let's assume this is done.

01:39:31.210 --> 01:39:34.190
Then the temptation might
be to write assembly code.

01:39:34.190 --> 01:39:36.630
Okay, let's record this in assembly.

01:39:36.700 --> 01:39:38.120
It's going to be faster.

01:39:38.120 --> 01:39:39.440
Yes, you can do that.

01:39:39.650 --> 01:39:42.700
But you know,
it's hard to write assembly.

01:39:42.700 --> 01:39:43.410
That's right.

01:39:43.410 --> 01:39:45.740
You are going to spend a
lot of time debugging that.

01:39:45.750 --> 01:39:48.110
And it's very hard to maintain.

01:39:48.240 --> 01:39:52.510
If you want to use a vector instructions,
you know, the LTVec and SSE,

01:39:52.620 --> 01:39:55.030
this is really like rocket science.

01:39:55.040 --> 01:39:58.220
So as much as possible,
you want to avoid that.

01:39:58.360 --> 01:40:02.880
One thing that may save you there
is the new GCC feature that is

01:40:02.880 --> 01:40:07.430
in the latest version of GCC,
which is called auto vectorization.

01:40:07.500 --> 01:40:11.090
GCC will try for certain
patterns of loops to use at

01:40:11.100 --> 01:40:13.000
best the vector registers.

01:40:13.000 --> 01:40:17.100
And this is whether it's a
PowerPC machine using the LTVec

01:40:17.430 --> 01:40:23.320
vector registers or an Intel machine
using the SSE vector registers.

01:40:23.960 --> 01:40:28.970
But there's another best practice here
to optimize your code that has a deep

01:40:28.970 --> 01:40:30.910
algorithm where you want more speed.

01:40:31.540 --> 01:40:34.090
And that's to use the
Accelerate framework.

01:40:34.410 --> 01:40:37.470
We have designed the Accelerate
framework for that purpose.

01:40:37.580 --> 01:40:39.400
What is the Accelerate framework?

01:40:39.540 --> 01:40:44.950
It's a bunch of facilities
for doing vector math,

01:40:44.950 --> 01:40:49.710
for doing operations on large integers,
for doing linear algebra,

01:40:49.760 --> 01:40:55.080
for doing signal processing, you know,
fast Fourier transforms and the like,

01:40:55.210 --> 01:40:59.260
and for doing image processing,
all the filters that you may

01:40:59.410 --> 01:41:01.710
want to do using the CPU.

01:41:02.080 --> 01:41:06.290
We've optimized all of
those for PowerPC using the

01:41:06.290 --> 01:41:10.680
Altivec vector registers,
but also we've started to

01:41:10.680 --> 01:41:12.040
optimize them for Intel.

01:41:12.040 --> 01:41:13.340
We're not done there.

01:41:13.340 --> 01:41:14.370
We just started.

01:41:14.510 --> 01:41:17.160
But we will optimize them for Intel.

01:41:17.160 --> 01:41:20.210
We will have the... We will
have the best implementation of

01:41:20.290 --> 01:41:21.640
those functions that we provide.

01:41:21.640 --> 01:41:23.760
This is a commitment that we have.

01:41:24.060 --> 01:41:29.320
We are committed to have the fastest
implementation on both architectures.

01:41:29.320 --> 01:41:31.720
If you find a function
that's not fast enough,

01:41:31.720 --> 01:41:34.020
that could be made faster,
please tell us.

01:41:34.210 --> 01:41:35.000
We'll optimize it.

01:41:35.000 --> 01:41:39.400
And we are committed to have
a richer set of functions.

01:41:39.400 --> 01:41:43.870
We already have 4,500,
but we want to add more over time.

01:41:43.880 --> 01:41:50.750
So the Accelerate framework is a
key framework for universality,

01:41:50.920 --> 01:41:55.240
for getting your application
to be universal and fast.

01:41:55.440 --> 01:41:58.510
And it also saves some code, by the way.

01:41:58.880 --> 01:42:05.610
So this is pedal to the metal,
making your application fast,

01:42:05.610 --> 01:42:07.660
accelerate your application.

01:42:07.660 --> 01:42:13.070
And this is my last best practice.

01:42:13.510 --> 01:42:18.760
Throughout this presentation,
I've used at times the word "tweak" and

01:42:18.760 --> 01:42:24.970
I've talked about "Indian-ness". So you
may not know all the implications of

01:42:25.140 --> 01:42:31.290
"Indian-ness". You may not know where
the word "Indian-ness", the terminology,

01:42:31.290 --> 01:42:32.100
comes from.

01:42:32.190 --> 01:42:35.780
It actually comes from Gulliver's Travel,
because in Gulliver's

01:42:35.790 --> 01:42:39.880
Travel you have two nations,
the Little Indians and the Big Indians,

01:42:39.940 --> 01:42:41.400
and they are at war.

01:42:41.450 --> 01:42:45.590
They are at war because they
have a divergence of opinion on

01:42:45.610 --> 01:42:49.980
how to best crack a hard-boiled
egg before you eat it.

01:42:49.980 --> 01:42:54.440
Should you start with the big end or
should you start with the little end?

01:42:54.440 --> 01:42:58.990
Now Gulliver's Travel was
written by Jonathan Swift,

01:42:59.210 --> 01:43:03.570
who is an Englishman,
and so I thought that to talk

01:43:03.570 --> 01:43:09.870
about all the subtleties about
"Indian-ness", I should invite

01:43:09.870 --> 01:43:11.140
on stage another Englishman.

01:43:11.400 --> 01:43:16.570
And that's Simon Patience,
who is leading the Chorus team.

01:43:16.910 --> 01:43:17.630
Simon.

01:43:17.640 --> 01:43:17.640
Thank you.

01:43:25.630 --> 01:43:26.500
Good afternoon.

01:43:26.500 --> 01:43:29.860
Although I am English,
I hope that's the only similarity between

01:43:29.860 --> 01:43:32.790
me and that photograph of Jonathan Swift.

01:43:34.150 --> 01:43:39.180
So, as Steve mentioned earlier on,
we've been working on this for some time.

01:43:39.180 --> 01:43:42.930
And in fact, for the last few months,
we've actually been working

01:43:42.930 --> 01:43:44.360
on porting some applications.

01:43:44.360 --> 01:43:48.230
And so, what I'd like to do is to share
with you some of our experiences.

01:43:48.240 --> 01:43:51.050
And to start off

01:43:52.400 --> 01:43:56.350
We found that actually we had a large
number of applications that came over,

01:43:56.720 --> 01:43:58.700
reported a large number,
and they came over with

01:43:58.700 --> 01:44:00.500
zero lines of code changed.

01:44:00.580 --> 01:44:04.200
And we were actually quite amazed at
just the sheer quantity of applications

01:44:04.200 --> 01:44:06.120
that needed no change whatsoever.

01:44:06.850 --> 01:44:07.880
Was it all easy going?

01:44:08.070 --> 01:44:10.840
Was it all completely without event?

01:44:10.880 --> 01:44:12.240
Well, no.

01:44:12.270 --> 01:44:13.880
There were some incidences.

01:44:13.890 --> 01:44:17.560
We had some applications crash.

01:44:17.560 --> 01:44:21.580
We had some unanticipated
numerical results.

01:44:22.560 --> 01:44:26.260
We had some unanticipated colors.

01:44:26.260 --> 01:44:31.440
We also had some strange
texts from time to time.

01:44:31.440 --> 01:44:35.100
We had bad reads and writes from disks.

01:44:39.300 --> 01:44:42.760
It's great when you've got kids.

01:44:42.760 --> 01:44:45.360
And we had some strange network behavior.

01:44:45.420 --> 01:44:49.380
So what I thought I'd do is we'd look
behind what actually caused all these.

01:44:49.420 --> 01:44:52.160
So let's debug some of these problems,
shall we?

01:44:53.070 --> 01:44:54.960
So the first thing you do is you say,
well, you've got two different

01:44:54.960 --> 01:44:57.010
architectures here,
so it's pretty obvious that

01:44:57.020 --> 01:44:58.750
you're going to have problems.

01:45:00.280 --> 01:45:03.280
But the reality is that once you
get past the instruction set,

01:45:03.280 --> 01:45:06.000
which the compiler hides for you,
then the architectures are

01:45:06.000 --> 01:45:07.360
really not that different.

01:45:07.440 --> 01:45:09.790
There are clearly some differences,
and those are the things

01:45:09.790 --> 01:45:12.520
that are tripping you up,
but it's not like we're talking about

01:45:12.520 --> 01:45:14.590
two things that are radically different.

01:45:14.890 --> 01:45:18.390
So the first thing that Bertrand
has mentioned before is end in this.

01:45:18.490 --> 01:45:22.010
So what I want to do is to show you
some of the things that we've seen that

01:45:22.150 --> 01:45:26.000
you'll see when you hit end in problems.

01:45:26.130 --> 01:45:28.700
So you can see in this dialog box,
we've got some buttons

01:45:28.700 --> 01:45:30.260
here which are yellow.

01:45:30.340 --> 01:45:32.400
The buttons next to them have
got nothing in them at all

01:45:32.400 --> 01:45:33.560
and that's clearly not right.

01:45:33.610 --> 01:45:36.760
And then there's this sort of
pinkish box down on the left hand

01:45:36.940 --> 01:45:39.490
side which really should be the same
color as the rest of the background.

01:45:39.580 --> 01:45:44.110
So these are the kinds of visual clues
that say that you have an end in issue.

01:45:44.260 --> 01:45:47.910
The next one, we have an RGB image here,
which is pretty much all R.

01:45:48.110 --> 01:45:50.270
So that's not right.

01:45:50.820 --> 01:45:54.700
And finally we have a YUV image
here which is pretty much all

01:45:54.700 --> 01:45:58.820
wrong because Tim looks nothing
like that when you iChat him.

01:46:00.420 --> 01:46:03.060
So endiness, also known as byte order.

01:46:03.290 --> 01:46:05.510
So let's have a look at a bit
about what's going on here.

01:46:05.550 --> 01:46:07.400
So we'll pick a number.

01:46:08.270 --> 01:46:09.980
So there's a nice number.

01:46:10.060 --> 01:46:14.240
So we'll look to see how it's laid out
in memory on the two different systems.

01:46:14.330 --> 01:46:17.980
So we have on the big Indian,
it's a nice logical layout.

01:46:17.990 --> 01:46:22.080
It reads left to right,
just as you would if--

01:46:28.000 --> 01:46:30.280
And on a little engine,
you see it's backwards.

01:46:30.310 --> 01:46:33.850
But actually, it's still logical,
because the lowest order byte

01:46:33.850 --> 01:46:35.800
is at the lowest order address.

01:46:35.810 --> 01:46:38.810
And this goes to all
the multi-byte types.

01:46:40.640 --> 01:46:43.410
Now the interesting thing is when
you put two shorts together and have

01:46:43.410 --> 01:46:46.120
a look to see how they're organized
and on a Big Endian machine they

01:46:46.120 --> 01:46:47.580
look remarkably like an integer.

01:46:47.580 --> 01:46:50.730
But this is not true on
a Little Endian machine.

01:46:50.740 --> 01:46:55.020
So remember Big Endian, PowerPC,
Little Endian, Intel.

01:46:57.860 --> 01:47:01.250
So let's go back to our two integers,
and let's have a look at a piece of

01:47:01.270 --> 01:47:03.870
code that has made some assumptions.

01:47:04.140 --> 01:47:07.450
Now the assumption that's been
made here is that the address of

01:47:07.450 --> 01:47:10.760
the integer is the same as the
address of the lower order byte.

01:47:10.900 --> 01:47:13.130
But of course if you look at the result,
you end up getting two

01:47:13.130 --> 01:47:14.180
very different values.

01:47:14.430 --> 01:47:18.390
And this is why you start getting
strange colors and things on your screen.

01:47:19.900 --> 01:47:26.070
If we go back to the two shorts example,
and we have a little code fragment here,

01:47:26.090 --> 01:47:28.680
that is definitely making the
assumption that when you put those

01:47:28.680 --> 01:47:32.070
two shorts together in a structure
and then cast it to an integer,

01:47:32.070 --> 01:47:35.220
you're going to end up
with a legitimate integer.

01:47:35.220 --> 01:47:37.830
Now, again,
if you look at the result there,

01:47:37.880 --> 01:47:39.280
that's not the case.

01:47:39.310 --> 01:47:41.190
Now, the way to solve these
problems is just to remove the

01:47:41.250 --> 01:47:43.460
assumptions out of your code,
and if you're doing things

01:47:43.520 --> 01:47:47.060
like the assignments,
then do them in an end-in-safe way.

01:47:47.060 --> 01:47:49.540
It's okay to have that structure there,
but when you extract

01:47:49.540 --> 01:47:51.670
the elements out of it,
you have to do it in a way

01:47:51.670 --> 01:47:53.000
that is end-in-sensitive.

01:47:55.160 --> 01:47:58.990
Another related part of
endianness is bit fields.

01:47:59.130 --> 01:48:01.560
So here's a bit field
with four elements in it.

01:48:01.880 --> 01:48:04.720
This is on a big endian machine.

01:48:05.270 --> 01:48:07.680
And we'll have a look and see how
that's laid out on a little Indian.

01:48:07.680 --> 01:48:11.040
And the first thing you notice is that
the bit fields are ordered backwards

01:48:11.320 --> 01:48:13.500
compared to the big Indian machine.

01:48:13.640 --> 01:48:15.270
But if you look at the
bit fields themselves,

01:48:15.270 --> 01:48:18.540
if you look at B, for example,
then the bits within that bit field

01:48:18.820 --> 01:48:21.070
are actually ordered in the same way.

01:48:21.990 --> 01:48:25.970
So this makes life very confusing and
is in fact a big interoperability risk.

01:48:26.050 --> 01:48:30.010
If you send this bit field across between
two applications through a socket,

01:48:30.120 --> 01:48:33.630
for example, to the other instance of the
application on a different

01:48:33.640 --> 01:48:37.740
machine that's a little endian,
it will get incorrect data.

01:48:37.760 --> 01:48:44.000
And similarly on a disk layout,
you'll have the same problem.

01:48:44.000 --> 01:48:46.300
So that was endianness.

01:48:46.300 --> 01:48:48.400
The next topic was divide by zero.

01:48:48.400 --> 01:48:52.420
So divide by zero is actually pretty
good because it's fairly obvious

01:48:52.420 --> 01:48:56.650
when you hit it because you get this
crash log and it says divide by zero.

01:48:56.970 --> 01:48:59.260
Now, you'd think that this
wouldn't happen very often.

01:48:59.260 --> 01:49:00.780
I mean, we're all good programmers,
right?

01:49:00.780 --> 01:49:03.240
So, you know, you wouldn't go off and
do things like that.

01:49:03.280 --> 01:49:06.970
But we actually saw this much
more frequently than we expected.

01:49:07.070 --> 01:49:09.180
So let's have a look and see why.

01:49:09.770 --> 01:49:12.180
So here's a little code fragment,
very little one actually.

01:49:12.260 --> 01:49:15.680
So set A to zero,
perhaps do a bit of stuff in between,

01:49:15.680 --> 01:49:20.290
and then we go off and assign B a value,
which is an integer divided by A.

01:49:20.520 --> 01:49:25.300
Let's have a look to see what they look
like on the two different platforms.

01:49:25.370 --> 01:49:28.700
So on PowerPC,
B is assigned the value of zero,

01:49:28.700 --> 01:49:30.900
and your program will
continue on and run,

01:49:30.900 --> 01:49:31.940
and you're all set.

01:49:31.960 --> 01:49:35.920
You're not even aware of the fact
that you've actually divided by zero.

01:49:35.930 --> 01:49:37.850
On Intel, however,

01:49:38.290 --> 01:49:40.360
Your program stops.

01:49:40.470 --> 01:49:44.000
And this is why we see it a lot,
because on the PowerPC,

01:49:44.070 --> 01:49:47.160
there was no real exception caused by
the fact that you had divided by zero.

01:49:49.410 --> 01:49:53.060
The next thing I want to talk
about is structures and unions.

01:49:53.090 --> 01:49:56.620
Now, you've probably noticed that I'm
talking a lot about multi-byte types,

01:49:56.620 --> 01:49:59.700
and these are really the things
that can cause a lot of problems,

01:49:59.700 --> 01:50:03.660
especially if you make assumptions
about how they're laid out in memory.

01:50:03.770 --> 01:50:06.740
So here we have a structure,
or a union I should say,

01:50:06.740 --> 01:50:10.440
containing a short and a structure
which assumes that the bytes

01:50:10.450 --> 01:50:12.330
are ordered in a certain way.

01:50:13.440 --> 01:50:16.140
But if you look in the layout,
memory layout of them,

01:50:16.160 --> 01:50:19.300
then you find that the low byte and the
high byte get different values depending

01:50:19.300 --> 01:50:21.260
on which end in this machine you're in.

01:50:21.260 --> 01:50:25.020
Now this is a very simple problem to fix,
and in fact you'll find

01:50:25.030 --> 01:50:27.360
this in a lot of code,
especially in the Unix world,

01:50:27.410 --> 01:50:30.020
where you just use a big end in
conditional and you just make

01:50:30.020 --> 01:50:36.330
sure that the right orders are
encapsulated in that conditional.

01:50:37.730 --> 01:50:41.880
So that's the way that you address those.

01:50:41.880 --> 01:50:45.780
The thing that Bertrand referred to
earlier on was data file formats.

01:50:45.780 --> 01:50:48.950
So if we take ourselves
on a big engine machine,

01:50:49.680 --> 01:50:51.920
let's say we write out
a whole bunch of things,

01:50:51.920 --> 01:50:54.960
multibyte data, unions, bit fields,
and then we go to a

01:50:55.070 --> 01:50:57.860
little engine machine,
we take the file across,

01:50:57.860 --> 01:50:59.080
and we read it back.

01:50:59.120 --> 01:51:00.300
And what do we get there?

01:51:00.330 --> 01:51:02.870
Well, basically, you get garbage.

01:51:03.830 --> 01:51:06.300
So how do you address this problem?

01:51:06.390 --> 01:51:09.390
Well there are three
ways which we recommend.

01:51:10.090 --> 01:51:13.240
The first way is to use
the high level APIs,

01:51:13.330 --> 01:51:17.240
the APIs that you'll find in core data
or in foundation or core foundation.

01:51:17.240 --> 01:51:19.480
So there's APIs at any
level of the system,

01:51:19.480 --> 01:51:21.840
regardless of how you're programming.

01:51:21.840 --> 01:51:26.910
And they will handle the writing out
of data into your files in an endian

01:51:26.920 --> 01:51:29.800
safe way and reading it back again.

01:51:29.940 --> 01:51:32.200
So that's the best way to go.

01:51:32.420 --> 01:51:34.900
But you may already have
a data file that you have,

01:51:34.980 --> 01:51:38.360
that you've defined,
and it's in XML format.

01:51:38.420 --> 01:51:41.220
That's pretty good too, because XML,
as long as you're not writing

01:51:41.300 --> 01:51:44.680
binary information into it,
is also safe.

01:51:44.710 --> 01:51:46.580
You have to deal with
management of the file itself,

01:51:46.600 --> 01:51:49.760
but you're still in pretty good shape.

01:51:49.760 --> 01:51:51.530
But you've already
shipped your application.

01:51:51.680 --> 01:51:53.420
The users are out there using it.

01:51:53.420 --> 01:51:54.660
They've created the files.

01:51:54.670 --> 01:51:58.130
And unfortunately, it was on a PowerPC,
and therefore it's got big

01:51:58.130 --> 01:52:00.270
engine information in it already.

01:52:00.390 --> 01:52:02.180
So what do you

01:52:02.960 --> 01:52:05.560
Well, use flippers.

01:52:05.560 --> 01:52:14.190
So flippers are either archive
formats or archive plug-ins that

01:52:14.190 --> 01:52:17.190
will actually exchange the byte
ordering on the fly for you,

01:52:17.190 --> 01:52:20.580
or we have data flippers,
which are things like OS byte order,

01:52:20.670 --> 01:52:24.710
which you put into the stream of
data that will invert the byte

01:52:24.710 --> 01:52:30.240
ordering on the fly as the data
comes in or goes out of your file.

01:52:30.240 --> 01:52:33.780
The good thing about them is that if
your endiness sense in the file is the

01:52:33.780 --> 01:52:37.150
same as the endiness sense of the host,
then it doesn't do anything,

01:52:37.150 --> 01:52:38.670
so you don't incur any overhead.

01:52:41.090 --> 01:52:49.910
The next big activity that you have
done for your application is optimizing

01:52:49.920 --> 01:52:52.600
it for performance using Altevec.

01:52:52.660 --> 01:52:55.460
Now this is hard because you probably
spent a long time doing this and

01:52:55.470 --> 01:52:57.830
invested a lot of effort into it.

01:52:58.400 --> 01:53:04.310
The good news is that there are a lot
of similarities between AltiVec and SSE.

01:53:04.760 --> 01:53:08.610
So the structure of your program
that you've had to adopt in order to

01:53:08.750 --> 01:53:11.980
be able to do the vector arithmetic
is the same on the two sides.

01:53:12.040 --> 01:53:12.660
So that helps.

01:53:12.660 --> 01:53:17.720
Many of the operations that you find on
AltaVec are the same as they are on SSE.

01:53:17.720 --> 01:53:22.090
And most of the capabilities of
the two systems are the same.

01:53:22.090 --> 01:53:23.210
So you're in good shape.

01:53:24.690 --> 01:53:26.720
But there are a few differences.

01:53:26.830 --> 01:53:29.350
Some of the algorithms
are not quite equivalent,

01:53:29.350 --> 01:53:31.720
which means that you have to be
careful about what exactly you

01:53:31.720 --> 01:53:36.040
were depending on and whether it's
exactly the same when you get to SSE.

01:53:36.160 --> 01:53:39.490
Some of the semantics of the
operations are slightly different,

01:53:39.490 --> 01:53:42.190
so you may find that you
get unexpected results.

01:53:42.840 --> 01:53:46.980
and some of the capabilities of Altevec
are just simply not there in SSE,

01:53:46.980 --> 01:53:51.920
in which case you have to look
for alternative algorithms

01:53:51.920 --> 01:53:54.570
to be able to move across.

01:53:54.890 --> 01:53:57.570
So we've done quite a few applications
that have been accelerated

01:53:57.940 --> 01:53:59.720
and we've made these ports.

01:53:59.810 --> 01:54:03.210
And so our recommendation
initially is to start with C code.

01:54:03.290 --> 01:54:06.520
You take your Altevec functions
and you just write straight C.

01:54:06.710 --> 01:54:08.940
Now the reason for this is twofold.

01:54:09.110 --> 01:54:11.600
First it gets you up and running faster.

01:54:11.670 --> 01:54:15.640
And secondly, software is pretty
much a living organism.

01:54:15.700 --> 01:54:19.080
And so what we found is that after a
while some of the things that were on the

01:54:19.100 --> 01:54:20.960
hot path are no longer on the hot path.

01:54:20.980 --> 01:54:24.180
And so therefore we've had a number of
instances where we actually didn't bother

01:54:24.280 --> 01:54:28.520
turning the C code into SSE because
it was no longer a performance issue.

01:54:29.990 --> 01:54:33.620
If you're already a cross-platform app,
you will have SSE code for

01:54:33.800 --> 01:54:36.870
other operating systems,
say Windows.

01:54:37.170 --> 01:54:41.100
This you can bring over and use
in your OS X app pretty easily.

01:54:41.100 --> 01:54:44.180
You may have to do some editing
to change some of the formats,

01:54:44.240 --> 01:54:49.000
but it's a real leg up on getting
your accelerated code going.

01:54:49.360 --> 01:54:52.300
But as Bertrand said earlier on,
the best answer is to use

01:54:52.300 --> 01:54:53.940
Accelerate whenever possible.

01:54:54.000 --> 01:54:58.620
So take this opportunity to look
for the chance to be able to

01:54:58.620 --> 01:55:00.860
adopt the Accelerate interfaces.

01:55:00.930 --> 01:55:04.940
And we do have over 4,500
functions and growing.

01:55:05.000 --> 01:55:07.540
And Accelerate framework
is already universal.

01:55:07.840 --> 01:55:12.080
So you just do this once and you
can forget about it for always.

01:55:13.100 --> 01:55:15.590
So the last thing I want to
talk about is some platform

01:55:15.600 --> 01:55:18.110
assumptions that we've seen in code.

01:55:19.940 --> 01:55:23.480
What we've seen is that there's
a number of pieces of code that

01:55:23.810 --> 01:55:27.440
have in their source code an
assumption that if it's on Windows,

01:55:27.440 --> 01:55:28.340
it must be Intel.

01:55:28.340 --> 01:55:31.700
So you have if-def Windows,
then a bunch of Intel-specific code.

01:55:31.720 --> 01:55:36.410
We've also seen applications which have
got the same sort of assumption about,

01:55:36.410 --> 01:55:38.930
well, if it's OS X,
then there must be some

01:55:38.930 --> 01:55:40.420
PowerPC stuff in here.

01:55:41.300 --> 01:55:45.160
So as of this morning,
this assumption is no longer true.

01:55:45.160 --> 01:55:47.830
OS X is now on Intel.

01:55:47.830 --> 01:55:51.250
So you have to make sure in order
to build your code properly that

01:55:51.610 --> 01:55:53.100
these assumptions are correct.

01:55:53.180 --> 01:55:57.900
That if you have Intel-specific code,
it's in an Intel if-def,

01:55:58.060 --> 01:56:02.750
and OS X-specific code,
and it's an OS X-specific if-def.

01:56:05.290 --> 01:56:08.220
So if you followed all these things,
then you should be well on your way

01:56:08.280 --> 01:56:10.950
to having a universal application.

01:56:11.400 --> 01:56:13.780
But clearly I've only
covered some part of this,

01:56:13.780 --> 01:56:16.930
so you want to know more, I assume.

01:56:17.590 --> 01:56:18.900
So we've written this document.

01:56:18.900 --> 01:56:21.880
It's called the Universal Binary
Programming Guidelines.

01:56:21.940 --> 01:56:24.350
You'll find a link to it on
the Apple Developer website

01:56:24.390 --> 01:56:26.340
at developer.apple.com.

01:56:26.380 --> 01:56:29.540
And this is a fantastic guideline
for you to help to get you

01:56:29.540 --> 01:56:31.620
to a universal application.

01:56:31.680 --> 01:56:34.600
It lists the sorts of problems
that you're likely to see,

01:56:34.750 --> 01:56:38.040
the causes of those problems,
and what you can do about it.

01:56:38.240 --> 01:56:39.410
It has code examples.

01:56:39.620 --> 01:56:41.060
It's a great document.

01:56:41.110 --> 01:56:44.770
You'll also find it on your CD,
so you should be able

01:56:44.770 --> 01:56:46.810
to look at it today.

01:56:47.360 --> 01:56:51.840
The other thing is that clearly I've only
touched on some of the elements here.

01:56:51.850 --> 01:56:55.750
So you need to look through the program
schedule and find all the other porting

01:56:55.800 --> 01:56:59.640
sessions that are going on this week,
which will go into much greater depth.

01:56:59.760 --> 01:57:03.010
And then there's all the labs
that you should take advantage of.

01:57:03.150 --> 01:57:06.720
So hopefully that's explained
some tweaks and endings.

01:57:06.720 --> 01:57:07.700
Thank you, Bertrand.

01:57:08.620 --> 01:57:09.720
Thank you, Simon.

01:57:16.400 --> 01:57:18.240
So let me recap.

01:57:18.450 --> 01:57:23.480
We went through a number of
best practices for building

01:57:23.480 --> 01:57:28.710
amazing applications,
user features for creating the best

01:57:28.710 --> 01:57:32.220
applications that our users want to buy.

01:57:32.370 --> 01:57:35.890
We talked about best practices for
the implementation so that we can

01:57:35.890 --> 01:57:41.960
develop those applications really
fast and high quality implementations.

01:57:42.370 --> 01:57:48.300
We've drawn examples throughout
the presentation from Tiger.

01:57:48.360 --> 01:57:53.150
Tiger has a number of fantastic
technologies that bring

01:57:53.340 --> 01:57:55.800
the platform to a new high.

01:57:56.110 --> 01:57:59.100
and Tiger is universal.

01:57:59.170 --> 01:58:03.840
Now a little recap if you were asleep
during the various presentation,

01:58:03.920 --> 01:58:12.310
if this is the UI on a PowerPC system,
this will be the UI on an Intel system.

01:58:13.290 --> 01:58:16.840
If this is a structure
of the system on PowerPC,

01:58:16.840 --> 01:58:20.240
and by structure I mean those boxes,
okay, symbolic boxes,

01:58:20.240 --> 01:58:27.240
but I really mean APIs because the
structure of the system implies the APIs.

01:58:27.410 --> 01:58:30.660
These are the APIs on a Mac for Intel.

01:58:30.660 --> 01:58:33.200
It's the same APIs, no change.

01:58:33.670 --> 01:58:37.450
Same UI, same APIs.

01:58:38.630 --> 01:58:43.250
Now, as far as the work that needs to be
done for the various kinds of projects,

01:58:43.760 --> 01:58:47.060
for the first category,
all the scripted projects, Java projects,

01:58:47.060 --> 01:58:51.100
JavaScript projects, widgets, and so on,
it just works.

01:58:51.180 --> 01:58:55.460
For Unix projects,
it's just a very short recompile.

01:58:55.460 --> 01:58:58.850
For Cocoa Apps,
I've been conservative and said

01:58:58.850 --> 01:59:01.500
it's small tweaks and a recompile.

01:59:01.500 --> 01:59:05.530
But you saw Ali do a demonstration
where he took a number of apps

01:59:05.950 --> 01:59:07.960
and it was just a recompile.

01:59:08.500 --> 01:59:12.040
For Carbon Apps,
the first move is to move to

01:59:12.040 --> 01:59:15.090
Xcode if you're not already there.

01:59:15.100 --> 01:59:19.380
After that, you may have to do a few
tweaks and then a recompile.

01:59:19.380 --> 01:59:23.450
And remember Theo this morning
from Warframe Research.

01:59:23.520 --> 01:59:25.060
Okay, two hours.

01:59:25.120 --> 01:59:28.460
Now, maybe this was the best guess,
but I am sure there will

01:59:28.640 --> 01:59:30.400
be a broad spectrum here.

01:59:32.560 --> 01:59:35.100
You can start today.

01:59:35.260 --> 01:59:37.760
We have a number of sessions.

01:59:37.900 --> 01:59:39.250
We have a number of labs.

01:59:39.350 --> 01:59:42.740
These labs are by technology area.

01:59:42.770 --> 01:59:43.990
We have seven labs.

01:59:44.270 --> 01:59:48.090
In those labs,
we have a hundred computers

01:59:48.100 --> 01:59:51.980
with an Intel processor,
the Apple development systems.

01:59:52.390 --> 01:59:57.520
And you can order today the
Developer Transition Kit that contains

01:59:57.600 --> 02:00:01.300
usage for an Apple development system,
that contains all the

02:00:01.320 --> 02:00:05.980
tools that you need,
including the latest Xcode 2.1,

02:00:06.010 --> 02:00:09.910
as well as these great documents,
these very thick documents,

02:00:10.040 --> 02:00:12.060
the Universal Programming Guidelines.

02:00:12.060 --> 02:00:12.650
I read it.

02:00:12.660 --> 02:00:18.730
It's a high-quality document that
can really help you transition.

02:00:19.650 --> 02:00:28.040
We are blessed with having a very
vibrant ecosystem with your applications.

02:00:28.040 --> 02:00:32.110
We have now over 12,000
of your applications.

02:00:32.450 --> 02:00:32.880
Thank you.

02:00:32.880 --> 02:00:36.870
Now my request to you.

02:00:39.500 --> 02:00:44.690
My request to you starting today is
to make those applications universal.

02:00:44.690 --> 02:00:46.850
Thank you.