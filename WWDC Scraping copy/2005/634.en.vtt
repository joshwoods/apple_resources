WEBVTT

00:00:00.490 --> 00:00:01.640
Good morning.

00:00:01.910 --> 00:00:04.440
Thanks for attending this
session this morning,

00:00:04.440 --> 00:00:09.030
session 634, Configuring and Deploying
Oracle 10g on Mac OS X.

00:00:09.160 --> 00:00:10.640
We're very excited about this session.

00:00:10.640 --> 00:00:15.380
I think those of you who were here
last year heard the announcement

00:00:15.480 --> 00:00:18.070
that it would be coming,
the product actually released

00:00:18.150 --> 00:00:20.780
in December of this last year.

00:00:20.890 --> 00:00:25.200
And both companies are very excited
by the uptake in the development

00:00:25.200 --> 00:00:30.340
and deployment of Oracle 10g on
Mac OS X over the last couple of months.

00:00:30.580 --> 00:00:32.560
And we're here today,
we've got a couple of folks from

00:00:32.560 --> 00:00:35.120
Apple and Oracle to come up and
talk to you a little bit about

00:00:35.120 --> 00:00:38.760
deploying and things that you should
know about as you go through your

00:00:38.760 --> 00:00:44.430
configuration and hopefully help you
along in your development as well.

00:00:44.510 --> 00:00:48.330
I'd like to take a quick survey of
those in the audience who are ISVs who

00:00:48.500 --> 00:00:54.500
are looking at using Oracle 10g as part
of the database for their development.

00:00:54.500 --> 00:00:55.500
Okay, great.

00:00:55.500 --> 00:00:58.500
And how about in-house or consulting?

00:00:58.500 --> 00:01:00.310
In-house developers or consulting,
so looking to use it in your

00:01:00.310 --> 00:01:01.490
enterprise or in your business?

00:01:01.490 --> 00:01:03.500
Fantastic, great.

00:01:03.500 --> 00:01:06.360
Well, I think today's messaging
is really going to help.

00:01:06.360 --> 00:01:13.500
We have Sergio Leunissen from Oracle here
to talk about Oracle database and,

00:01:13.500 --> 00:01:16.610
you know, big picture how it runs,
the architecture behind it,

00:01:16.610 --> 00:01:18.500
a little bit about the
different configurations.

00:01:18.500 --> 00:01:21.150
And then followed up,
Paul Lambert from Apple will actually

00:01:21.150 --> 00:01:24.500
be talking about specifically how to
optimize and configure for Mac OS X.

00:01:24.500 --> 00:01:28.130
And then Sergio will actually
come up and give a 10-15

00:01:28.220 --> 00:01:32.360
minute demonstration on HTMLDB,
which we're really excited about.

00:01:32.500 --> 00:01:35.410
And then we'll wrap up with a
Q&A session because I'm sure

00:01:35.430 --> 00:01:37.350
there's a few questions out there.

00:01:37.500 --> 00:01:40.960
I would also like to mention
following this session,

00:01:40.980 --> 00:01:44.590
on the second floor in the
third alcove downstairs across

00:01:44.610 --> 00:01:47.490
from the Enterprise IT Lab,
we'll be having a special session

00:01:47.490 --> 00:01:49.440
called 10g RAC on Mac OS X.

00:01:49.500 --> 00:01:51.500
So if you can attend that,
that would be great.

00:01:51.500 --> 00:01:54.430
We actually have one of our partners
that's going to be putting on that.

00:01:54.500 --> 00:01:58.300
It's sort of an informal discussion,
but we'd love to have you attend and

00:01:58.300 --> 00:02:02.500
learn a little bit more about deploying
Apple in a cluster configuration

00:02:02.500 --> 00:02:05.500
and taking advantage of real
application clustering from Oracle.

00:02:05.500 --> 00:02:08.970
So to start off,
we'd like to run a customer

00:02:09.090 --> 00:02:11.480
testimonial video for you.

00:02:11.550 --> 00:02:14.620
Around the world,
Holland has long been known

00:02:14.620 --> 00:02:18.490
as the country of flowers,
and it's easy to see why.

00:02:18.500 --> 00:02:23.500
An assortment of these colorful
creations blanket the region's landscape,

00:02:23.500 --> 00:02:23.500
providing a wonderful experience.

00:02:23.570 --> 00:02:27.810
providing a rich backdrop for Dutch life.

00:02:30.100 --> 00:02:34.020
At this flower auction,
more than 19 million flowers

00:02:34.020 --> 00:02:38.340
change hands every day,
supplied by 6,000 growers and

00:02:38.350 --> 00:02:41.100
bought by 1,100 wholesalers.

00:02:41.100 --> 00:02:45.100
One of the leaders behind
the flower boom is Florensis.

00:02:45.100 --> 00:02:50.210
Florensis' position is in
the top three of the world,

00:02:50.210 --> 00:02:55.180
you could say, because that's our aim,
to be the best worldwide.

00:02:55.350 --> 00:03:00.420
The company cultivates more than
650 million plants on a yearly basis

00:03:00.650 --> 00:03:03.720
on more than 220,000 acres of land.

00:03:03.800 --> 00:03:07.420
But the rapid growth in
Florencys greenhouse operations

00:03:07.670 --> 00:03:09.800
has also created challenges.

00:03:09.800 --> 00:03:14.300
The amount of data was increasing,
you can say, day by day.

00:03:14.300 --> 00:03:18.560
Before choosing Oracle,
the company had difficulty managing

00:03:18.560 --> 00:03:20.800
the data for its blooming business.

00:03:20.920 --> 00:03:26.190
You need to have a system where all
the data was kept in on a reliable way,

00:03:26.310 --> 00:03:31.300
because the system is supporting
every part of the process.

00:03:31.300 --> 00:03:34.300
To make its business
run more efficiently,

00:03:34.300 --> 00:03:38.300
Florencys teamed up with Oracle and
Dutch IT company Matadex.

00:03:38.300 --> 00:03:41.560
Working together,
they've created a custom

00:03:41.560 --> 00:03:45.300
solution to support the entire
Florencys logistical process,

00:03:45.300 --> 00:03:48.290
from order entry to client delivery.

00:03:48.300 --> 00:03:50.300
The foundation of the system
is the Oracle 10g system.

00:03:50.300 --> 00:03:56.540
The system is Oracle Database 10g,
an Apple's Mac OS X platform.

00:03:57.190 --> 00:04:01.660
The solution also supports the use
of robotic instruments that control

00:04:01.660 --> 00:04:04.770
and monitor operations on the ground.

00:04:06.190 --> 00:04:10.770
This robotical system is connected
to the Oracle database and is fully

00:04:10.770 --> 00:04:13.100
supported by the Oracle database.

00:04:13.100 --> 00:04:18.520
So data which are coming out of the
robotical system are going into the

00:04:18.520 --> 00:04:22.100
intra system on a real time basis.

00:04:22.110 --> 00:04:29.290
Today, Florencia's business is
blossoming like never before,

00:04:29.290 --> 00:04:32.100
thanks to Oracle Database 10g.

00:04:32.100 --> 00:04:37.100
By combining technology and
new innovations in flower R&D,

00:04:37.100 --> 00:04:41.100
Oracle and Florencia are planting
the seeds for continued success.

00:04:41.100 --> 00:04:45.090
Our core business is
not maintaining systems,

00:04:45.100 --> 00:04:49.100
our core business is
growing plants and seeds.

00:04:49.100 --> 00:04:55.310
That's why we've chosen for Apple and for
the same reason we've chosen for Oracle.

00:05:02.490 --> 00:05:04.200
Great, with that I'd like to
bring up Sergio Leunissen

00:05:04.200 --> 00:05:06.400
to begin our presentation.

00:05:06.400 --> 00:05:06.400
Sergio.

00:05:06.410 --> 00:05:11.990
Thanks Matt.

00:05:12.200 --> 00:05:13.190
Good morning.

00:05:13.190 --> 00:05:15.460
You know, I actually grew up,
I was telling Matt,

00:05:15.460 --> 00:05:18.360
I grew up about 12 minutes
away from that auction house.

00:05:18.360 --> 00:05:20.360
That's a place called Alsmere.

00:05:20.380 --> 00:05:23.980
About 70% of the flowers in
the world that are traded in

00:05:23.980 --> 00:05:25.740
the world go through there.

00:05:25.740 --> 00:05:27.870
That was about 10 years ago.

00:05:29.250 --> 00:05:32.430
Great,
so I'm excited to be here to talk about

00:05:33.040 --> 00:05:36.970
how Oracle and Apple have been working
together to create a great platform

00:05:37.580 --> 00:05:39.570
for running your enterprise data.

00:05:39.680 --> 00:05:48.080
It's a very affordable, cost-effective,
flexible, easy-to-manage platform.

00:05:48.080 --> 00:05:50.310
So what are we going to cover today?

00:05:52.220 --> 00:05:57.300
Well, I want to talk about the objectives
behind creating Oracle Database 10g.

00:05:57.300 --> 00:06:00.070
What were some of the key focus areas?

00:06:01.600 --> 00:06:26.400
[Transcript missing]

00:06:27.390 --> 00:06:28.890
So my name is Sergio Leunissen.

00:06:29.110 --> 00:06:31.320
I've been with Oracle for 10 years.

00:06:31.570 --> 00:06:33.800
Actually, June 12th, it'll be 10 years.

00:06:33.830 --> 00:06:38.270
I've been working with the
Oracle database since version 7.1.6,

00:06:38.270 --> 00:06:42.970
and I've been the proud owner of a
Mac for about three years at home.

00:06:46.890 --> 00:06:49.940
So what were the objectives
behind Oracle Database 10g?

00:06:49.940 --> 00:06:53.190
What were we trying to
do for our customers?

00:06:54.690 --> 00:06:58.650
Well, the first thing we wanted to do
was to enable grid computing.

00:06:58.650 --> 00:07:02.660
And grid computing allows our
customers to more efficiently

00:07:02.660 --> 00:07:07.240
use their hardware resources,
their servers, their storage,

00:07:07.450 --> 00:07:12.040
configure them in an IT infrastructure
such that it's used more efficiently.

00:07:12.260 --> 00:07:14.690
I'll talk more about that later.

00:07:14.880 --> 00:07:18.120
The next thing we wanted to do is
deliver the highest quality of service.

00:07:18.220 --> 00:07:19.660
What does that mean?

00:07:19.770 --> 00:07:23.820
Well, it means you deliver systems
that are always up and running.

00:07:24.600 --> 00:07:29.880
That perform well,
that scale well to handle a lot of users,

00:07:29.880 --> 00:07:31.500
and they're also secure.

00:07:31.590 --> 00:07:35.500
They protect your data,
they make sure no one can bring it down.

00:07:36.400 --> 00:07:42.600
We wanted to do this while reducing
the cost and complexity of managing

00:07:42.640 --> 00:07:44.100
all this IT infrastructure.

00:07:44.460 --> 00:07:49.600
Finally, Oracle has always been known to
provide the most comprehensive

00:07:50.400 --> 00:07:53.640
integrated database available,
meaning that you can use it for

00:07:53.760 --> 00:07:58.520
your transaction processing,
data warehousing, business intelligence,

00:07:58.650 --> 00:08:04.900
and even special data types such as
spatial and unstructured text data,

00:08:04.900 --> 00:08:04.900
for example.

00:08:06.910 --> 00:08:10.780
So we did this, we delivered database
10g sometime last year,

00:08:10.780 --> 00:08:13.800
and this is what industry
experts are saying.

00:08:13.830 --> 00:08:17.130
They're saying that Oracle database
10g is simply the most sophisticated

00:08:17.140 --> 00:08:21.800
database available today on the market,
and we're proud of that.

00:08:21.800 --> 00:08:24.960
But what we're even more
proud of is that we've reached

00:08:24.960 --> 00:08:29.260
new levels of manageability,
such that database 10g is no longer

00:08:29.260 --> 00:08:31.800
just for Fortune 500 companies.

00:08:31.800 --> 00:08:35.430
Small shops,
mid-sized enterprises stand to gain

00:08:35.430 --> 00:08:38.280
from using database 10g as well.

00:08:41.400 --> 00:09:36.000
[Transcript missing]

00:09:37.800 --> 00:09:41.560
So let's talk about grid computing.

00:09:41.560 --> 00:09:48.510
Grid computing is the idea
that you pool your resources,

00:09:48.510 --> 00:09:48.510
that is your processing power,

00:09:48.730 --> 00:09:53.950
and your storage such that it can be
shared and allocated dynamically across

00:09:54.010 --> 00:09:56.910
all the applications that need to use it.

00:09:57.490 --> 00:09:59.410
If you look at this picture
over here on the left side,

00:09:59.410 --> 00:10:05.440
that is your left side, you see that,
you see separate applications,

00:10:05.540 --> 00:10:08.570
each running on their own servers,
on their own storage.

00:10:08.620 --> 00:10:13.700
Each of them are configured
and sized to handle peak load.

00:10:13.720 --> 00:10:15.540
What does that mean?

00:10:15.540 --> 00:10:20.240
That means that at any point in time,
one of those systems,

00:10:20.240 --> 00:10:24.310
server and storage together,
could be taxed,

00:10:24.320 --> 00:10:27.350
could be running at capacity,
while another one,

00:10:27.360 --> 00:10:29.910
another system is not doing anything,
right?

00:10:30.010 --> 00:10:32.300
So you're not efficiently
using your hardware resources.

00:10:32.300 --> 00:10:37.340
With grid computing,
what you do is you standardize

00:10:37.340 --> 00:10:42.960
on high performance,
low cost hardware such as Apple XServe,

00:10:42.960 --> 00:10:46.660
low cost storage such
as Apple XServe RAID,

00:10:46.660 --> 00:10:51.310
and you pool them together,
you consolidate them such

00:10:51.310 --> 00:10:53.320
that they can be used.

00:10:53.340 --> 00:10:56.620
They're resources,
the capacity can be shared

00:10:56.620 --> 00:10:58.420
across applications.

00:10:58.420 --> 00:11:03.420
The reason you use these high density,
high performance nodes such as

00:11:03.490 --> 00:11:08.000
Apple XServe is that you can start small
and you can scale up as you need more.

00:11:08.000 --> 00:11:09.350
So it's a very modular approach.

00:11:14.880 --> 00:11:19.680
So our next objective was to
provide high quality of service.

00:11:19.700 --> 00:11:24.480
One of the aspects of quality of service
is that you want to reduce downtime.

00:11:24.480 --> 00:11:29.140
Now downtime can be caused
because there's data corruption,

00:11:29.220 --> 00:11:32.040
right, maybe a disk fails.

00:11:32.040 --> 00:11:36.530
You could have just data
corruption because someone made

00:11:36.530 --> 00:11:39.110
the wrong update on your data.

00:11:39.320 --> 00:11:44.080
Or you could have an all-out calamity,
a disaster at your data center, right?

00:11:44.080 --> 00:11:48.790
So what Oracle has done is we've
introduced technologies with database 10g

00:11:49.040 --> 00:11:54.100
To make it very easy and quick to
recover from all of these problems,

00:11:54.250 --> 00:11:55.140
right?

00:11:55.240 --> 00:11:57.900
To make sure you're up and
running as soon as possible.

00:11:57.970 --> 00:12:02.650
For example, with ASM,
ASM is Automatic Storage Management.

00:12:02.740 --> 00:12:07.780
It's a technology that allows you to,
that automatically for you mirrors your

00:12:07.780 --> 00:12:10.890
data across what's called failure groups.

00:12:10.900 --> 00:12:13.900
A failure group being
a collection of disks,

00:12:14.080 --> 00:12:18.240
disks that share,
that might fail together because

00:12:18.240 --> 00:12:22.430
they share a network connection
or they share a disk controller,

00:12:22.430 --> 00:12:22.900
right?

00:12:22.900 --> 00:12:25.050
It automatically mirrors that for you.

00:12:25.140 --> 00:12:28.580
It also allows you to do
something called flash recovery,

00:12:28.610 --> 00:12:32.250
which means you're backing up,
you're putting all your recovery

00:12:32.390 --> 00:12:36.730
related files on low cost storage,
such as Apple X, Apple X Server RAID,

00:12:36.730 --> 00:12:40.220
to make sure you can
quickly recover from that.

00:12:40.800 --> 00:12:56.220
Another source of downtime
could be a human error.

00:12:57.010 --> 00:12:57.010
Someone could drop a table or
maybe delete some rows that

00:12:57.010 --> 00:12:57.010
shouldn't have been deleted.

00:12:57.010 --> 00:12:57.010
I've never done it myself,
but I've heard this happens.

00:12:57.370 --> 00:13:01.330
With Flashback, Flashback is a technology
that allows you to,

00:13:01.910 --> 00:13:05.680
well, flashback,
that is rewind the database to a point

00:13:05.680 --> 00:13:09.800
in time where a table that was dropped,
you know, exists again.

00:13:09.800 --> 00:13:14.200
It's very, Oracle's the only database
company that has that technology.

00:13:14.380 --> 00:13:17.350
And finally,
Data Guard is a technology that allows

00:13:17.380 --> 00:13:22.210
you to keep a running copy of the
database at a remote site so you can

00:13:22.210 --> 00:13:24.710
failover should something happen.

00:13:29.170 --> 00:13:33.270
Another aspect of quality of service
is making sure that your database

00:13:33.270 --> 00:13:36.190
and the data in it is secure.

00:13:36.370 --> 00:13:40.850
Oracle provides several technologies
to keep your database secure.

00:13:40.980 --> 00:13:45.600
First, Oracle has been committed
to security for a long time.

00:13:45.600 --> 00:13:49.390
In the last decade,
we have passed 17 independent

00:13:49.450 --> 00:13:53.860
certifications for security,
called Common Criteria Certification.

00:13:54.070 --> 00:13:57.000
We're the only database company
in the industry that has that.

00:13:57.000 --> 00:13:59.000
So we're serious about security.

00:13:59.040 --> 00:14:02.680
What we've done in 10g,
we've introduced technologies such as,

00:14:02.680 --> 00:14:05.000
that provide low level security.

00:14:05.340 --> 00:14:08.460
Technology is called
fine-grained access control.

00:14:09.230 --> 00:14:13.670
Now traditional databases,
what they do is they provide

00:14:13.670 --> 00:14:17.100
access control at the object level.

00:14:17.150 --> 00:14:20.580
So someone may or may not
be able to see a table,

00:14:20.830 --> 00:14:23.100
say with employee names and salaries.

00:14:23.310 --> 00:14:27.250
What we do is we make that access
control much more fine grained,

00:14:27.250 --> 00:14:31.020
allowing you to secure or
provide access control at the

00:14:31.020 --> 00:14:32.930
data item or the row level.

00:14:33.100 --> 00:14:37.980
So I can see some of the
rows in the employees table,

00:14:37.980 --> 00:14:40.090
but not all of them.

00:14:40.100 --> 00:14:42.090
And this is enforced
at the database level,

00:14:42.090 --> 00:14:47.100
regardless of how you come in,
what application you come in from.

00:14:47.100 --> 00:14:52.290
We can even provide row level
access control based on the

00:14:52.350 --> 00:14:55.060
column you're selecting.

00:14:55.060 --> 00:14:58.070
So I don't know,
some of you here probably know SQL.

00:14:58.110 --> 00:15:01.100
If you type select * from employees,
or say you select last name,

00:15:01.100 --> 00:15:01.100
you can see that the rows
are set up in the database.

00:15:01.100 --> 00:15:02.100
So you can see that the rows
are set up in the database.

00:15:02.100 --> 00:15:02.730
So I can see some of the
rows in the employees table,

00:15:02.730 --> 00:15:03.100
but not all of them.

00:15:03.100 --> 00:15:03.100
And this is enforced
at the database level,

00:15:03.100 --> 00:15:03.100
regardless of how you come in,
what application you come in from.

00:15:03.100 --> 00:15:06.080
name from employees,
I'm allowed to see all the rows.

00:15:06.200 --> 00:15:09.540
But as soon as I select last
name comma salary from employees,

00:15:09.540 --> 00:15:12.220
I only get to see the
rows I'm allowed to see.

00:15:12.390 --> 00:15:16.740
So it fires based on the
column I'm selecting.

00:15:17.470 --> 00:15:20.420
There's an option called
Advanced Security Option that

00:15:20.420 --> 00:15:24.140
helps you encrypt your data both
when it's in transit on a network

00:15:24.530 --> 00:15:26.840
and in the database itself.

00:15:26.890 --> 00:15:30.060
And then finally we have
auditing technology allowing

00:15:30.060 --> 00:15:34.600
you to capture who's looking,
at what time, at what data,

00:15:34.650 --> 00:15:37.940
what exactly they saw,
and what updates they made.

00:15:37.980 --> 00:15:41.950
Very important these days when
there are new regulations such as

00:15:41.970 --> 00:15:46.260
Sarbanes-Oxley and HIPAA requiring
you to do a lot of auditing.

00:15:49.030 --> 00:15:51.850
As I mentioned before,
we've made it much easier for

00:15:51.850 --> 00:15:55.170
you to manage all this with
running on Apple hardware,

00:15:55.350 --> 00:15:58.640
having lots of automatic
features such as things that

00:15:58.640 --> 00:16:03.100
automatically tune your memory,
automatic storage management,

00:16:03.150 --> 00:16:07.200
I talked about that,
and also automatic backup and recovery,

00:16:07.200 --> 00:16:10.730
and diagnostic tools that come
up in a web-based console,

00:16:11.200 --> 00:16:14.280
allowing you to see,
getting warnings for things that

00:16:14.280 --> 00:16:16.390
are going on in your database.

00:16:18.950 --> 00:16:23.490
So all in all,
database 10g running on Apple XServe,

00:16:23.490 --> 00:16:28.400
really affordable,
cost effective platform to

00:16:28.400 --> 00:16:30.430
run your enterprise data.

00:16:30.530 --> 00:16:34.600
Now I'd like to ask Paul to come on
stage and tell us about the details.

00:16:35.660 --> 00:16:38.380
Thank you, Sergio.

00:16:38.380 --> 00:16:39.600
My name is Paul Lambert.

00:16:39.640 --> 00:16:44.180
I am the Mac OS X architect
for Apple's IS&T.

00:16:44.180 --> 00:16:48.440
Some of you may have seen
me speak earlier this week.

00:16:48.460 --> 00:16:51.950
I'm going to talk about configuring
the database itself--I'm sorry,

00:16:51.960 --> 00:16:55.660
configuring the operating system
and the systems that you're going

00:16:55.660 --> 00:16:58.090
to be putting your database on.

00:16:58.220 --> 00:17:01.220
I'm going to discuss a couple of topics.

00:17:02.110 --> 00:17:05.450
First we're going to talk about choosing
where your data should be stored.

00:17:05.450 --> 00:17:08.430
And when you do that,
you have a number of questions

00:17:08.430 --> 00:17:11.210
you have to keep in mind,
but it's also the most important

00:17:11.330 --> 00:17:12.860
question you have to answer.

00:17:12.990 --> 00:17:17.430
And the thing that you are doing with
a database is dealing with your data,

00:17:17.430 --> 00:17:20.200
and if that data is the
most important thing,

00:17:20.200 --> 00:17:21.390
start with it.

00:17:21.980 --> 00:17:25.510
The second thing we're going to talk
about are various configurations

00:17:25.570 --> 00:17:31.900
you can use for your various
editions of Oracle Database 10g.

00:17:31.960 --> 00:17:35.500
And we'll talk about some
recommended configurations and

00:17:35.500 --> 00:17:39.800
all of the various options that
you have within those ranges.

00:17:39.850 --> 00:17:43.020
Then we'll talk about actually
configuring the hardware that

00:17:43.020 --> 00:17:44.680
you are using for your database.

00:17:45.240 --> 00:17:48.740
and configuring the software
whenever you install it.

00:17:48.770 --> 00:17:51.690
And finally, we'll talk about automating
your deployment very briefly.

00:17:51.950 --> 00:17:56.500
This is probably the most important
phase if your management actually

00:17:56.500 --> 00:17:58.350
gives you time to do any planning.

00:17:58.370 --> 00:18:02.320
And the reason why it's important
is because it gives you a

00:18:02.320 --> 00:18:06.860
lot of reproducibility later,
and that's always very helpful at

00:18:06.860 --> 00:18:09.830
3:30 in the morning on a Saturday.

00:18:09.830 --> 00:18:12.550
So to begin with,
let's talk about choosing

00:18:12.550 --> 00:18:12.550
where to store your data.

00:18:14.160 --> 00:18:18.340
Apple provides a number
of storage options.

00:18:18.340 --> 00:18:21.210
The first and the most famous, of course,
is XServe RAID.

00:18:21.300 --> 00:18:24.100
And XServe RAID is a
fantastic storage option.

00:18:24.180 --> 00:18:27.680
If you're using XServe RAID,
it gives you enhanced reliability,

00:18:27.780 --> 00:18:32.350
enhanced availability,
enhanced performance,

00:18:32.670 --> 00:18:34.770
and also enhanced size.

00:18:35.570 --> 00:18:38.380
If you're using the
Apple internal PCI RAID card,

00:18:38.550 --> 00:18:41.550
which is a feature that some
people aren't so familiar with,

00:18:41.680 --> 00:18:45.260
but on XServe G5s this is
a build-to-order option.

00:18:45.370 --> 00:18:48.440
And if you use this,
it can improve the reliability of

00:18:48.440 --> 00:18:51.640
the internal disk for many cases,
and so sometimes this

00:18:51.640 --> 00:18:53.000
is a very good option.

00:18:53.150 --> 00:18:56.810
We also provide software mirroring
within the operating system,

00:18:56.940 --> 00:18:59.740
which can be used to improve
reliability in the event of a

00:18:59.740 --> 00:19:01.860
hardware or component failure.

00:19:01.940 --> 00:19:07.490
And in many cases you may wish to use,
or you may need to use, a SAN switch.

00:19:08.580 --> 00:19:10.590
When you're choosing
where to store your data,

00:19:10.590 --> 00:19:13.000
you do have to consider
the three major questions,

00:19:13.000 --> 00:19:16.360
which are: How much data do you have?

00:19:16.730 --> 00:19:20.940
If you have 5 terabytes of data,
you won't be storing

00:19:20.940 --> 00:19:22.550
that on internal disks.

00:19:22.670 --> 00:19:25.860
You need to know how are you
going to be using that data.

00:19:25.860 --> 00:19:28.800
If it's extremely
important that it be quick,

00:19:28.840 --> 00:19:30.520
then you need to make sure
you use quick storage.

00:19:30.590 --> 00:19:34.310
If that's not important,
of course you can rule that out.

00:19:34.690 --> 00:19:37.790
And you also need to know how
reliable your data needs to be.

00:19:37.880 --> 00:19:43.350
If the database is used during the day
by a small sales team and if it goes out,

00:19:43.530 --> 00:19:46.600
you know, they get annoyed but it
doesn't slow the business down,

00:19:46.780 --> 00:19:47.600
that's one thing.

00:19:47.800 --> 00:19:53.910
If the database is driving
your online website and all

00:19:54.430 --> 00:19:57.570
of your income comes from it,
then reliability is going

00:19:57.570 --> 00:19:57.570
to be a much larger concern.

00:20:00.430 --> 00:20:03.560
So let's talk about the
additions of Oracle.

00:20:03.560 --> 00:20:06.280
Oracle Database 10g is
standard edition one.

00:20:06.280 --> 00:20:09.560
In a typical configuration,
you'll use an XServe G5,

00:20:09.570 --> 00:20:13.770
which provides you with ECC RAM and
some other really nice features,

00:20:13.770 --> 00:20:16.070
and it also is really small.

00:20:16.980 --> 00:20:20.180
You might use the internal disks
or you might attach an XSERV RAID,

00:20:20.180 --> 00:20:23.170
depending on your storage
and performance needs.

00:20:24.860 --> 00:20:29.800
For Oracle Database 10g Standard Edition,
you might use, for example,

00:20:29.960 --> 00:20:33.060
two XServe G5s,
each with an attached XServe RAID,

00:20:33.210 --> 00:20:38.130
or use the internal disks with
the Apple Hardware RAID PCI card.

00:20:38.170 --> 00:20:42.300
That gives you a little more
flexibility in your deployment,

00:20:42.300 --> 00:20:44.300
and it also gives you a
little more room for growth.

00:20:45.730 --> 00:20:50.450
If you're using the enterprise
edition of Oracle Database 10g,

00:20:50.450 --> 00:20:55.340
you might want to use multiple
XServe G5s with the Apple Hardware

00:20:55.340 --> 00:20:59.470
RAID PCI card installed to give you
that reliability for your root volume

00:20:59.540 --> 00:21:04.460
and also if you use the internal disks
for backup space or some other purpose.

00:21:04.540 --> 00:21:11.570
And then attach XServe RAIDs to them
for the storage and take advantage of

00:21:11.570 --> 00:21:12.060
the reliability and the performance.

00:21:12.720 --> 00:21:16.670
You may wish to use a SAN switch or
a SAN fabric in that case as well,

00:21:16.670 --> 00:21:19.060
although it's entirely not necessary,
and it depends on your

00:21:19.200 --> 00:21:21.600
storage requirements and your
flexibility requirements.

00:21:21.730 --> 00:21:26.410
The advantage of using a SAN switch
is that you can then address more

00:21:26.540 --> 00:21:28.980
than one XSERV RAID from each XSERV.

00:21:29.400 --> 00:21:32.730
The disadvantage is it is an
additional bit of complexity.

00:21:32.810 --> 00:21:34.740
So if you don't need
the additional space,

00:21:34.740 --> 00:21:36.650
it's probably not necessary.

00:21:37.840 --> 00:21:39.830
And finally,
if you're going to use Oracle's

00:21:39.900 --> 00:21:42.730
real application clusters
with Oracle Database 10g,

00:21:42.730 --> 00:21:46.800
which is a fantastic technology
to allow you to scale,

00:21:46.970 --> 00:21:49.270
you'll want to use multiple XServe G5s.

00:21:49.360 --> 00:21:51.870
I recommend purchasing a lot of them.

00:21:52.550 --> 00:21:56.580
You'll need a SAN switch and
then multiple XSERV RAIDs.

00:21:56.600 --> 00:21:59.330
And this allows you to actually
share the storage on the

00:21:59.350 --> 00:22:01.400
XSERV RAIDs between the XSERV G5s.

00:22:01.570 --> 00:22:03.400
And they'll all address that storage.

00:22:03.400 --> 00:22:07.670
And then each of those XSERV G5s
will act as a database server and

00:22:07.670 --> 00:22:10.400
will provide access to that data.

00:22:10.400 --> 00:22:12.770
If you start to see
that you need more CPU,

00:22:12.890 --> 00:22:14.400
you buy an XSERV G5.

00:22:14.400 --> 00:22:17.400
If you run low on space,
you buy an XSERV RAID.

00:22:17.400 --> 00:22:20.400
And it allows you to scale
those two parts separately.

00:22:20.400 --> 00:22:24.400
And so it gives you extra convenience
and flexibility in your management.

00:22:25.370 --> 00:22:28.800
If this is where you're keeping
the list of restaurants people

00:22:28.980 --> 00:22:31.790
like to go to for lunch,
it's probably too big.

00:22:31.810 --> 00:22:34.950
But if this is for your
enterprise-level databases,

00:22:34.960 --> 00:22:36.110
it's fantastic.

00:22:37.300 --> 00:22:39.760
So let's talk about the
configuration of the hardware.

00:22:39.800 --> 00:22:44.310
The Apple Hardware RAID PCI card is not
so familiar to many Apple customers,

00:22:44.320 --> 00:22:46.700
and so I wanted to spend
a moment talking about it.

00:22:46.780 --> 00:22:49.710
It is an internal card that
provides hardware RAID for the

00:22:49.710 --> 00:22:51.550
internal disks on the XSERV G5.

00:22:51.730 --> 00:22:55.700
Because it is hardware RAID,
it doesn't use any CPU power to do that.

00:22:55.750 --> 00:22:59.270
The simple and obvious
configuration to use it in is to

00:22:59.270 --> 00:23:01.700
do RAID 5 among all three disks.

00:23:01.700 --> 00:23:03.700
And this allows you to survive
if you have a disk failure.

00:23:03.700 --> 00:23:11.500
It also allows you to have
the performance of RAID 5.

00:23:11.500 --> 00:23:11.500
However,

00:23:11.720 --> 00:23:14.750
If you do that and you have a
single file system on there,

00:23:14.750 --> 00:23:18.470
it can complicate your backups
a little bit and so forth.

00:23:18.580 --> 00:23:21.590
So the recommended
configuration is to use RAID 5,

00:23:21.710 --> 00:23:24.740
but to do multiple logical volumes.

00:23:24.800 --> 00:23:27.190
When you do the multiple logical volumes,
you can have a small volume

00:23:27.190 --> 00:23:30.540
for your root volume and then
a larger area for your data.

00:23:30.590 --> 00:23:34.980
And then you can backup the OS and file
system in the database installation

00:23:35.100 --> 00:23:38.300
separately from the actual data,
and so your backup

00:23:38.360 --> 00:23:40.780
administrators will be happier.

00:23:42.620 --> 00:23:45.920
If you're using Oracle's
clustering or failover

00:23:46.050 --> 00:23:50.480
configurations and those products,
you may actually consider not using that

00:23:50.480 --> 00:23:52.450
and in fact going to a single root disk.

00:23:52.690 --> 00:23:54.900
For example,
with an Oracle RAC installation,

00:23:54.900 --> 00:23:57.540
you might want to use cluster
servers with a single disk.

00:23:57.590 --> 00:24:05.150
And that allows you to hopefully
be able to deploy a new one quickly

00:24:05.150 --> 00:24:07.490
in the event of a failure and
survive a failure by redundancy.

00:24:10.260 --> 00:24:14.120
If you're going to be using XServe RAID,
the simple and obvious configuration

00:24:14.120 --> 00:24:17.840
is to do RAID 5 across all seven
disks on each controller and

00:24:17.840 --> 00:24:20.110
publish that as a single one.

00:24:20.360 --> 00:24:24.580
However, a more recommended configuration
in order to survive more types of

00:24:24.630 --> 00:24:30.000
failures would be to use RAID 5
across six disks and do one hot spare,

00:24:30.040 --> 00:24:31.880
so that you don't have to be
there to replace the disk,

00:24:31.980 --> 00:24:34.890
it will automatically
replace a failed one.

00:24:35.190 --> 00:24:36.760
And then you can use
the software mirroring,

00:24:36.760 --> 00:24:39.920
the Apple RAID software mirroring
in Disk Utility to mirror

00:24:39.920 --> 00:24:41.330
between the two controllers.

00:24:41.610 --> 00:24:45.090
And then if a controller fails,
you're able to continue using the

00:24:45.090 --> 00:24:49.110
data on the other side until you're
able to replace that controller.

00:24:49.350 --> 00:24:53.420
If you're using Oracle's
automatic storage management,

00:24:53.420 --> 00:24:56.700
you may want to go back to a
very simple configuration using

00:24:56.700 --> 00:25:01.290
RAID 5 across seven disks,
and then use Oracle for the mirroring.

00:25:01.390 --> 00:25:04.510
The advantage of that situation
is it allows Oracle to

00:25:04.510 --> 00:25:07.730
manage the mirroring part,
so you can get a little bit more

00:25:07.840 --> 00:25:10.330
performance because Oracle knows
exactly which data it needs to

00:25:10.420 --> 00:25:13.100
mirror and which it can live without.

00:25:17.250 --> 00:25:20.690
If you decide to go with a SAN switch
or your environment requires it,

00:25:20.690 --> 00:25:24.750
it's important to pay attention to
the configuration of that switch.

00:25:24.890 --> 00:25:27.130
The simple configuration,
which is to power it on

00:25:27.130 --> 00:25:29.950
and plug everything in,
actually does work very nicely,

00:25:29.950 --> 00:25:32.780
and especially if
you're using Oracle RAC,

00:25:32.870 --> 00:25:34.780
that can be fine.

00:25:34.910 --> 00:25:40.450
But I would recommend that you actually
zone each LUN from your storage,

00:25:40.560 --> 00:25:44.160
from your XSERV RAIDs,
to the controllers that need to see it.

00:25:44.290 --> 00:25:47.470
And the advantage of this is when
somebody comes in to do some work

00:25:47.580 --> 00:25:50.900
who's not very familiar with the
configuration or the situation,

00:25:51.030 --> 00:25:54.250
they won't, for example,
format drives that are really

00:25:54.250 --> 00:25:58.480
on other machines and in use,
and so they don't realize that and

00:25:58.480 --> 00:26:00.190
they wipe out data or whatever.

00:26:00.320 --> 00:26:03.590
It's easy to make mistakes like that,
and the easiest way to avoid

00:26:03.590 --> 00:26:05.110
them is to do that zoning.

00:26:08.030 --> 00:26:10.140
So now it's time to
install your software.

00:26:10.260 --> 00:26:13.240
And of course the first thing you
need to install is Mac OS X Server.

00:26:13.460 --> 00:26:17.010
When you're installing
Mac OS X Server for Oracle Database 10g,

00:26:17.010 --> 00:26:20.640
it's important to keep in mind that
right now the only certified revision

00:26:21.250 --> 00:26:24.900
with Oracle Database 10g is 10.3.6.

00:26:25.030 --> 00:26:28.870
So when you install
Mac OS X Server 10.3.6,

00:26:28.870 --> 00:26:33.730
in the Oracle installation instructions,
there are instructions on

00:26:33.730 --> 00:26:35.900
getting the Oracle kernel update.

00:26:35.970 --> 00:26:38.100
And you can download that and install it.

00:26:38.100 --> 00:26:40.280
It's a very simple install.

00:26:41.320 --> 00:26:43.760
What's not mentioned in the instructions,
but which I recommend,

00:26:43.760 --> 00:26:47.110
is also getting the Ethernet
driver update from Apple.

00:26:47.110 --> 00:26:51.670
And the Ethernet driver update
applies to 10.3.3 through 10.3.7.

00:26:51.670 --> 00:26:55.950
And it fixes a minor problem with
the Broadcom Ethernet driver.

00:26:56.040 --> 00:26:58.430
And it'll save you a little bit
of trouble later on if you have

00:26:58.510 --> 00:27:01.260
a very busy network and you start
running into strange issues.

00:27:01.350 --> 00:27:03.720
It's just easier to start with it.

00:27:05.720 --> 00:27:08.860
Finally, we'll talk about the file
systems on the software side.

00:27:08.960 --> 00:27:12.930
When you are installing
Oracle Database 10g,

00:27:12.960 --> 00:27:16.600
and you go to put your data on your
XSERV RAIDs or your internal disk,

00:27:16.610 --> 00:27:20.600
you'll probably use HFS+.
The advantage of HFS+ is it's simple,

00:27:20.740 --> 00:27:23.860
it's the default,
and the performance is fantastic.

00:27:23.860 --> 00:27:26.780
It's exactly what you should be using.

00:27:27.040 --> 00:27:30.490
And of course,
you might do the software mirroring

00:27:30.490 --> 00:27:33.750
in order to ensure reliability
across multiple RAID controllers.

00:27:34.080 --> 00:27:39.240
If you're using Oracle RAC, however,
or Oracle's automatic storage manager,

00:27:39.410 --> 00:27:42.070
you'll want to use raw devices.

00:27:42.070 --> 00:27:46.550
And raw devices give direct
access to the physical device,

00:27:46.550 --> 00:27:51.270
and typically on other platforms,
raw devices are literally raw

00:27:51.270 --> 00:27:53.480
and are not a file system.

00:27:53.560 --> 00:27:55.710
On Mac OS X,
they're treated as a file system,

00:27:55.710 --> 00:27:58.160
and this can be a little bit
of a source of confusion.

00:27:58.530 --> 00:28:00.050
So I wanted to cover it very quickly.

00:28:00.270 --> 00:28:04.240
Whenever you make a
raw device for Oracle,

00:28:04.240 --> 00:28:10.500
if you give it /dev/disk 3s2 or whatever,
the next time the machine boots,

00:28:10.580 --> 00:28:12.400
that disk may be renamed.

00:28:12.490 --> 00:28:14.530
Because on Mac OS X,
the disks are named in the

00:28:14.530 --> 00:28:15.900
order that they're seen.

00:28:16.000 --> 00:28:20.800
In order to prevent that and
simplify that configuration,

00:28:20.920 --> 00:28:26.900
the disk label command
and the raw partition file

00:28:26.900 --> 00:28:30.200
system were put into 10.3.6.

00:28:30.480 --> 00:28:32.680
You can use the user--

00:28:32.950 --> 00:28:39.240
SBin pdisk command to actually put
a partition label on the device.

00:28:39.290 --> 00:28:42.290
And you create a single
partition of type Apple label.

00:28:42.290 --> 00:28:46.260
And then you use the disk label
command to tell that partition

00:28:46.640 --> 00:28:49.520
that it is a raw device,
and what its name should

00:28:49.520 --> 00:28:50.730
be in slashed dev.

00:28:50.730 --> 00:28:55.640
You also set the permissions for it and
all of those other pieces of information.

00:28:55.750 --> 00:28:57.950
And this is all described
in the disk label man page.

00:28:57.950 --> 00:29:01.100
But I wanted to point it out in
case it was a source of confusion

00:29:01.100 --> 00:29:04.770
when you're first starting.

00:29:05.120 --> 00:29:08.490
Other useful piece of information
is if you are doing Oracle RAC,

00:29:08.650 --> 00:29:13.000
when you do this from one
XServe G5 to one XServe RAID,

00:29:13.000 --> 00:29:17.000
the other XServe G5s may not
see the changes immediately.

00:29:17.120 --> 00:29:20.110
And on those hosts,
you can use pdisk with the -dump

00:29:20.110 --> 00:29:23.350
option against that device,
and it will re-read the header

00:29:23.360 --> 00:29:26.330
information and it will see
that there's that raw device

00:29:26.330 --> 00:29:27.910
there and it will show up.

00:29:30.960 --> 00:29:33.780
Once you have the server installed,
you'll want to do some tuning,

00:29:33.790 --> 00:29:38.410
and Oracle's instructions have specific
tuning options that they recommend.

00:29:40.200 --> 00:29:43.090
They also recommend putting
it into XERC directly,

00:29:43.090 --> 00:29:46.910
and that can be a
maintainability issue sometimes,

00:29:46.910 --> 00:29:49.580
especially if you have
software that's checking for

00:29:49.780 --> 00:29:51.600
changes to files and so forth.

00:29:51.700 --> 00:29:57.120
One option and one way to separate that
from the Apple-supplied code in XERC is

00:29:57.120 --> 00:30:02.890
to only change XERC enough to read,
for example, an XERC.local tuning file,

00:30:02.890 --> 00:30:05.090
or an XERC.local file.

00:30:05.170 --> 00:30:09.600
If you look in Mac OS X 10.3.9
or Mac OS X Server 10.3.9,

00:30:09.600 --> 00:30:12.600
the XERC file there
actually does read these.

00:30:12.710 --> 00:30:15.650
So that's a good place to look
for inspiration on how to change

00:30:15.680 --> 00:30:17.980
10.3.6's file to do the same.

00:30:18.280 --> 00:30:22.690
And you'll put some of your settings
into the @CRC.local tuning file

00:30:22.700 --> 00:30:26.400
and some into the sysctl.conf file.

00:30:26.460 --> 00:30:29.100
And we'll talk briefly about what
the different types of settings are

00:30:29.100 --> 00:30:31.700
and why they go in different places.

00:30:33.820 --> 00:30:36.460
The two types of settings
are the sysctl settings,

00:30:36.580 --> 00:30:39.040
which go into sysctl.conf.

00:30:39.080 --> 00:30:43.560
And those settings are kernel-wide
parameters that take effect immediately

00:30:43.560 --> 00:30:45.570
when they're set by the sysctl command.

00:30:45.780 --> 00:30:49.020
So you can use the sysctl
command to set them on the fly.

00:30:49.040 --> 00:30:54.620
They're also read from
sysctl.conf at boot,

00:30:54.620 --> 00:30:55.360
so that's where you put them to make
sure that they remain after each reboot.

00:30:55.820 --> 00:30:57.650
Even though they do
take effect immediately,

00:30:57.720 --> 00:31:00.430
it's important to pay attention
to what that effect is,

00:31:00.500 --> 00:31:03.240
because in many cases,
all they do is change

00:31:03.240 --> 00:31:08.170
the maximum of a maximum,
or they change something that is only

00:31:08.170 --> 00:31:12.300
looked at by processes when they start,
and so running processes

00:31:12.300 --> 00:31:13.870
may not be affected.

00:31:15.520 --> 00:31:19.640
The sysctl man page in section 2 of
the man pages has information about

00:31:19.650 --> 00:31:21.980
many of the options that are there.

00:31:21.990 --> 00:31:27.440
Many of the Oracle provided
options are involving System 5

00:31:27.580 --> 00:31:32.160
shared memory paradigms,
and that's very similar to

00:31:32.160 --> 00:31:32.160
other operating systems.

00:31:32.580 --> 00:31:35.560
The per-process resource limits
are set by the ulimit command.

00:31:35.730 --> 00:31:43.410
And the ulimit command is an interesting
difference from the kernel parameters,

00:31:43.410 --> 00:31:45.900
and that is that it is per-process.

00:31:46.010 --> 00:31:49.460
So there's no way to change those
values for a running process.

00:31:49.540 --> 00:31:51.300
If you want to change them
across the whole system,

00:31:51.300 --> 00:31:55.100
you do need to change them
through the @crc.local tuning

00:31:55.100 --> 00:31:57.900
file and then reboot the system.

00:31:58.200 --> 00:32:00.770
They're inherited by every
process from its parent,

00:32:00.770 --> 00:32:09.170
and only root can change them above the
soft limits that are set by the parent.

00:32:10.510 --> 00:32:14.370
They can't be set for Mac init,
which is the primary process

00:32:14.420 --> 00:32:15.160
running on the system.

00:32:15.160 --> 00:32:17.470
It has process ID 2.

00:32:17.690 --> 00:32:21.450
MakaNet kicks off XERC,
so every child of XERC,

00:32:21.540 --> 00:32:25.100
if you do put the tuning in there,
will have those new resource limits.

00:32:25.290 --> 00:32:28.510
But MakaNet also kicks
off the Windows Server,

00:32:28.790 --> 00:32:31.490
and the Windows Server is
what provides the GUI login.

00:32:31.660 --> 00:32:34.420
And so, for example,
there is a max-prox-per-uid

00:32:34.770 --> 00:32:37.280
resource limit,
and that resource limit

00:32:37.360 --> 00:32:39.600
is at 100 by default.

00:32:39.600 --> 00:32:42.040
If you have an Oracle account
on the system and you're

00:32:42.040 --> 00:32:45.120
using Oracle in that account,
and you've raised that

00:32:45.120 --> 00:32:52.410
in XERC.localTuning to,
say, 2000, for example, and you have 150

00:32:52.410 --> 00:32:55.960
Oracle processes running,
if you go to the GUI and you

00:32:55.960 --> 00:33:00.040
log in on the console as Oracle,
it will fail, because the limit there

00:33:00.170 --> 00:33:03.160
is still set to 100,
and that also applies if

00:33:03.160 --> 00:33:04.950
you use ARD to connect in.

00:33:06.420 --> 00:33:10.370
So in that case, you'll want to SSH in,
or log in as another user, SU to root,

00:33:10.550 --> 00:33:13.850
change your U limit,
and then become Oracle.

00:33:16.800 --> 00:33:21.000
So once you've done all of these
steps and you have Oracle installed,

00:33:21.030 --> 00:33:24.200
you want to automate the
deployment of your configuration.

00:33:24.250 --> 00:33:28.410
And the reason you want to do this is so
that it can be reproduced very easily.

00:33:29.600 --> 00:33:31.990
The Apple hardware
RAID PCI card configuration

00:33:32.030 --> 00:33:34.000
can be scripted very easily.

00:33:34.150 --> 00:33:36.490
The Apple RAID software
mirroring can also be scripted

00:33:36.510 --> 00:33:38.900
using the diskutil command.

00:33:39.900 --> 00:33:44.420
Your Mac OS X Server 1036 configuration,
if you use a deployment

00:33:44.420 --> 00:33:48.230
image to deploy your systems,
you can make a specific image

00:33:48.280 --> 00:33:50.800
for Oracle database 10g systems.

00:33:50.800 --> 00:33:54.800
If you don't do that,
you may want to start,

00:33:54.800 --> 00:33:57.770
or you may take an existing image
and write a script that modifies it

00:33:57.820 --> 00:34:00.800
to meet these specific requirements.

00:34:00.830 --> 00:34:05.800
For example, by installing the new XERC,
XERC tuning local, and so forth.

00:34:05.800 --> 00:34:08.890
You also may want to write a simple
script to do the raw devices,

00:34:08.950 --> 00:34:11.840
because that provides
you with repeatability,

00:34:11.840 --> 00:34:13.790
and you can tell someone to do
it over the phone without having

00:34:13.870 --> 00:34:17.800
to give them a whole bunch of
stuff that's hard to remember.

00:34:19.870 --> 00:34:26.360
So those are the things that I wanted
to cover and make sure that were clear.

00:34:26.390 --> 00:34:28.680
Obviously,
you do need to make sure you know

00:34:28.680 --> 00:34:31.690
where your data is being stored
and how you're going to use it.

00:34:31.830 --> 00:34:38.860
And then configuring your hardware
for availability and configuring your

00:34:39.180 --> 00:34:41.680
software for supportability are the
next most important steps to allow

00:34:41.680 --> 00:34:41.680
you to sleep all through the weekend.

00:34:42.440 --> 00:34:45.530
And now I'm going to give it
back to Sergio to show one of my

00:34:45.740 --> 00:34:48.950
favorite Oracle 10g applications.

00:34:56.400 --> 00:34:58.280
Thanks, Paul.

00:34:58.340 --> 00:35:00.280
Okay,
I wanted to switch gears a little bit

00:35:00.310 --> 00:35:02.990
and talk about application development.

00:35:05.050 --> 00:35:08.680
Oracle HTMLDB is a free feature of
the 10g database that allows you to

00:35:08.680 --> 00:35:12.480
quickly develop web-based applications.

00:35:13.750 --> 00:35:17.380
Oracle HTMLDB is a free feature of
the 10g database that allows you to

00:35:17.380 --> 00:35:21.200
quickly develop web-based applications.

00:35:27.250 --> 00:35:31.380
What's interesting about HTMLDB is
that it's entirely browser-based.

00:35:31.440 --> 00:35:35.450
That is, you develop from a browser,
you don't need to install any

00:35:35.480 --> 00:35:40.190
client software to do development,
and you deploy to a browser.

00:35:40.570 --> 00:35:45.540
So your end users are using a web browser
to see their applications and their data.

00:35:45.540 --> 00:35:53.100
The other interesting thing
is that it's entirely hosted,

00:35:53.100 --> 00:35:53.100
meaning multiple

00:35:53.390 --> 00:35:57.360
Projects or individuals can work
in the same database in what's

00:35:57.360 --> 00:36:00.530
called their own workspace,
where they have their own

00:36:00.530 --> 00:36:05.300
database schema and they're not
stepping on each other's toes.

00:36:05.300 --> 00:36:09.350
So we actually have, back in Reston,
where I work, Reston, Virginia,

00:36:09.350 --> 00:36:11.260
we have a server on the internet.

00:36:11.430 --> 00:36:13.300
It's called htmlb.oracle.com.

00:36:13.300 --> 00:36:15.400
And when you go there,
you can sign up for a free

00:36:15.520 --> 00:36:18.300
workspace and do exactly what
I'm going to show you now.

00:36:18.300 --> 00:36:21.570
And as of yesterday,
we had something like 9,000

00:36:21.610 --> 00:36:23.500
workspaces there all running.

00:36:24.330 --> 00:36:28.270
Okay, so HTMLDB, web development tool
for the Oracle database.

00:36:28.270 --> 00:36:32.270
So you can do a lot of things with it,
but I wanted to talk about it in

00:36:32.270 --> 00:36:37.990
terms of a specific scenario that
I'm sure you're all familiar with.

00:36:40.010 --> 00:36:44.590
So picture this,
you are tasked with getting organized,

00:36:44.710 --> 00:36:49.500
collecting data,
sharing it on say the projects that

00:36:49.500 --> 00:36:51.460
you're working on in your department.

00:36:51.590 --> 00:36:52.500
So what do you do?

00:36:52.680 --> 00:36:55.000
You spark up a spreadsheet, right?

00:36:55.020 --> 00:36:59.160
You type in some data about projects,
people that are assigned those projects,

00:36:59.190 --> 00:37:01.980
when the tasks are due and so forth.

00:37:02.070 --> 00:37:04.280
And then you send it
to all your coworkers,

00:37:04.320 --> 00:37:06.760
and they add yet more data to it, right?

00:37:06.830 --> 00:37:07.950
And they send it back to you.

00:37:08.030 --> 00:37:09.510
Now you have 10 spreadsheets, right?

00:37:09.540 --> 00:37:13.750
And you need to merge them all
and scrub them and dedupe them.

00:37:13.770 --> 00:37:16.760
This is probably something
that you've done before.

00:37:18.410 --> 00:37:20.940
Spreadsheets are a wonderful
communication tool.

00:37:21.110 --> 00:37:23.830
If you have data in it,
it's great to show reports and

00:37:23.830 --> 00:37:25.950
charts and things like that.

00:37:26.100 --> 00:37:34.610
They are a lousy tool for sharing data
and doing updates at the same time.

00:37:34.610 --> 00:37:34.610
It's not a good concurrent database.

00:37:35.780 --> 00:37:36.700
So what are you left with?

00:37:36.700 --> 00:37:40.300
You're left with a mess
of data fragmentation.

00:37:40.410 --> 00:37:42.690
You have data that's not secure.

00:37:42.690 --> 00:37:46.430
It's floating around on desktops,
on USB drives and so forth.

00:37:46.740 --> 00:37:49.690
It's not accessible when
you need to get to it.

00:37:49.760 --> 00:37:53.720
Whenever you need to get the latest data,
someone else always has it.

00:37:53.910 --> 00:37:55.680
That's just the way it works.

00:37:55.680 --> 00:38:01.680
And you're really inefficiently
using your resources to

00:38:02.040 --> 00:38:08.180
So what we're doing with HTMLDB,
what we're helping you do is

00:38:08.320 --> 00:38:11.610
taking some of those spreadsheets,
the data out of them,

00:38:11.610 --> 00:38:14.240
and desktop databases,
take the data out of it,

00:38:14.270 --> 00:38:18.700
move it into a database,
Oracle Database 10g,

00:38:18.920 --> 00:38:21.660
Where it's secure,
where everybody can access

00:38:21.660 --> 00:38:23.280
it at the same time,
right?

00:38:23.590 --> 00:38:26.500
Where it's backed up,
where it's managed by professionals,

00:38:26.540 --> 00:38:29.960
where you can audit who's
actually looking at the data.

00:38:30.070 --> 00:38:34.420
And using HTMLDB,
building user interfaces,

00:38:34.420 --> 00:38:39.220
web-based applications,
so that people can access

00:38:39.220 --> 00:38:41.880
it from any web browser.

00:38:41.880 --> 00:38:44.200
Can we go to demo two, please?

00:38:52.130 --> 00:38:54.860
So here I am.

00:38:54.860 --> 00:38:57.670
Actually what I did is on
Wednesday I installed the

00:38:57.670 --> 00:39:04.600
Oracle Database 10g and HTMLDB on
10.3.6 of OS X Server and

00:39:04.600 --> 00:39:06.700
we have that running right here.

00:39:06.700 --> 00:39:08.370
And so here I am in my web browser.

00:39:08.440 --> 00:39:09.770
I'm logged into my workspace.

00:39:09.870 --> 00:39:12.220
I called it Apple.

00:39:12.220 --> 00:39:17.400
And over here I have one
of these spreadsheets.

00:39:17.400 --> 00:39:20.540
Now what I'm doing here is I'm
tracking data about hardware assets

00:39:20.640 --> 00:39:23.270
that we have in our organization.

00:39:23.290 --> 00:39:29.030
So we have information about
what kind of machines we have,

00:39:29.030 --> 00:39:33.370
what kind of CPUs, how much they cost,
when we bought them and so forth.

00:39:33.370 --> 00:39:36.060
It's a pretty old spreadsheet.

00:39:36.630 --> 00:39:38.830
So what I want to do is
get rid of this thing,

00:39:38.830 --> 00:39:39.180
right?

00:39:39.480 --> 00:39:42.880
I want to be able to have everyone
in my organization to look

00:39:43.120 --> 00:39:47.540
at the data at the same time,
always be looking at the up-to-date data,

00:39:47.540 --> 00:39:49.420
and be able to make updates.

00:39:50.770 --> 00:39:55.040
So what I'm going to do is I'm
going to create a new application.

00:39:55.130 --> 00:39:58.890
And I'm going to say I want to do
that based on spreadsheet data.

00:39:59.530 --> 00:40:04.510
And what I just did is
I highlighted the entire data set.

00:40:04.700 --> 00:40:40.100
[Transcript missing]

00:40:40.690 --> 00:40:44.020
The table that this is going to create,
this is going to create a database table,

00:40:44.090 --> 00:40:45.310
right?

00:40:45.460 --> 00:40:47.570
I'm going to give that a name.

00:40:47.900 --> 00:41:19.800
[Transcript missing]

00:41:20.160 --> 00:41:25.110
Things such as how much
money do we spend on them?

00:41:25.670 --> 00:41:32.380
And then finally, I'm going to give this
application a name.

00:41:32.570 --> 00:41:38.140
The hardware asset tracker and
this is really all we need.

00:41:38.160 --> 00:41:42.370
Ah, okay, we need to use a,
some kind of look and feel or

00:41:42.370 --> 00:41:44.160
a theme for this application.

00:41:44.290 --> 00:41:51.090
So what we do in HTMLDB is we provide out
of the box a couple of themes and they're

00:41:51.090 --> 00:41:55.980
really just sets of HTML templates
stored in the database and you can,

00:41:55.980 --> 00:41:55.980
you can modify them and
create new ones if you want.

00:41:57.420 --> 00:41:58.300
There we go.

00:41:58.300 --> 00:41:59.440
Looks like it's set to go.

00:41:59.810 --> 00:42:02.740
So,
without really any programming so far,

00:42:02.770 --> 00:42:06.150
I've been able to tell this wizard,
you know, create me a data entry

00:42:06.230 --> 00:42:08.300
and reporting application.

00:42:08.300 --> 00:42:10.790
So, let's see what we have.

00:42:11.430 --> 00:42:13.450
The application is already secured.

00:42:13.590 --> 00:42:18.180
Right now it's using a HTMLDB specific
authentication mechanism,

00:42:18.180 --> 00:42:24.290
but you can also use single sign-on or
LDAP based authentication if you want.

00:42:25.750 --> 00:42:27.540
So here we are.

00:42:27.690 --> 00:42:29.080
We're running the application.

00:42:29.340 --> 00:42:31.680
Let's just see what we can do.

00:42:31.680 --> 00:42:33.940
First, we can filter the data set.

00:42:33.940 --> 00:42:38.270
So here you're looking at the data coming
out of a table in an Oracle database

00:42:38.270 --> 00:42:40.600
that was previously in a spreadsheet.

00:42:40.800 --> 00:42:42.140
We can toss away the spreadsheet.

00:42:42.140 --> 00:42:43.980
This is now the single point of truth,
right?

00:42:44.130 --> 00:42:49.510
This is where people go,
point their web browser,

00:42:49.510 --> 00:42:50.430
and they're operating on
the data in the spreadsheet.

00:42:52.010 --> 00:42:57.850
I can also sort by different columns,
right?

00:42:58.200 --> 00:43:02.380
Did I mention that
Apple X Servers are performant?

00:43:02.430 --> 00:43:04.430
That's pretty quick, right?

00:43:04.670 --> 00:43:07.350
Now, of course,
we can also add new records

00:43:07.420 --> 00:43:11.760
to this database very quickly,
so it generated that form for us.

00:43:12.140 --> 00:43:15.150
Let's look real quickly at
the kind of analysis reports.

00:43:15.230 --> 00:43:16.690
It's created some analysis reports.

00:43:16.800 --> 00:43:21.200
So here's by CPU type, you know,
how much money did we spend on them,

00:43:21.220 --> 00:43:23.100
average and summarized.

00:43:23.170 --> 00:43:28.410
And then we also have some charts,
you know.

00:43:28.490 --> 00:43:31.150
How does our asset database
break down by CPU type?

00:43:32.060 --> 00:43:33.500
Great.

00:43:33.660 --> 00:43:37.110
So, this is an application
generated real quickly,

00:43:37.170 --> 00:43:37.750
right?

00:43:37.750 --> 00:43:40.190
It didn't really do any programming.

00:43:40.280 --> 00:43:43.060
That's really the idea behind
HTML to be declarative,

00:43:43.060 --> 00:43:46.550
real quick,
reporting and data entry applications.

00:43:46.550 --> 00:43:49.580
But often that means,
if something is quick,

00:43:49.750 --> 00:43:53.080
that often means whatever
it produces is rigid.

00:43:53.080 --> 00:43:57.630
You can't touch it, you can't change it,
you can't change the behavior

00:43:57.670 --> 00:43:59.480
or the look and feel of it.

00:43:59.480 --> 00:44:03.180
So, I'm going to dispel that myth here.

00:44:03.560 --> 00:44:05.950
What I'm going to do is,
let's look at--well,

00:44:06.000 --> 00:44:08.220
let's first see if this form works.

00:44:08.220 --> 00:44:13.030
So, here's an update form and I can
make updates to the database,

00:44:13.030 --> 00:44:13.910
right?

00:44:14.100 --> 00:44:16.830
And the nice thing is with
HTMLDB we automatically have

00:44:16.890 --> 00:44:20.760
built-in lost update detection,
allowing concurrent updates without

00:44:20.760 --> 00:44:24.440
really losing any data or any changes.

00:44:24.560 --> 00:44:26.510
But let's say,

00:44:26.760 --> 00:44:30.640
There's a business rule that I want
to impose on this application.

00:44:30.690 --> 00:44:35.780
That is,
I don't want anyone to be able to

00:44:35.970 --> 00:44:40.400
"Apply or insert a null
value in the CPU speed field.

00:44:40.560 --> 00:44:43.000
So right now it's clear that
that rule is not enforced,

00:44:43.010 --> 00:44:43.400
right?

00:44:43.400 --> 00:44:49.090
You see over here that the value is null.

00:44:49.090 --> 00:44:53.110
And so let's bring that up.

00:44:55.290 --> 00:44:58.170
What I want to do is create a
data validation on this form,

00:44:58.370 --> 00:45:02.900
making sure that whenever someone
does an update in this form,

00:45:02.970 --> 00:45:04.560
that field is checked.

00:45:04.740 --> 00:45:10.060
Notice here at the bottom,
I have what's called a developer toolbar.

00:45:10.150 --> 00:45:13.350
This is what allows me to,
because I'm the developer,

00:45:13.470 --> 00:45:15.940
I'm logged into my workspace
as a developer and I'm

00:45:15.940 --> 00:45:19.130
running this application,
this is what allows me to change the

00:45:19.570 --> 00:45:23.390
behavior and the functionality of this
application really while it's running.

00:45:23.500 --> 00:45:27.240
So what I'm going to do is,
I'm going to create

00:45:27.310 --> 00:45:31.900
something new on this page,
and that something new is a control,

00:45:31.960 --> 00:45:33.760
and in this case I want the validation,
right?

00:45:33.910 --> 00:45:37.500
So now I'm in the
development environment.

00:45:38.470 --> 00:45:44.630
Incidentally,
HTMLDB itself was developed in HTMLDB.

00:45:46.260 --> 00:45:48.800
I'm going to let that sink
in for a little while.

00:45:49.030 --> 00:45:54.190
So we built, using HTMLDB,
a collection of applications,

00:45:54.190 --> 00:45:56.840
one of which you're looking at now,
the application builder,

00:45:56.840 --> 00:45:59.110
together making up 900 pages or so.

00:45:59.410 --> 00:46:00.990
So it's a serious tool, right?

00:46:00.990 --> 00:46:02.380
You can do real things with it.

00:46:02.610 --> 00:46:06.920
Because HTMLDB really is
a database application.

00:46:07.020 --> 00:46:11.140
All it does is collect data from you,
puts it in our metadata store about

00:46:11.190 --> 00:46:13.490
the application that you're building.

00:46:13.490 --> 00:46:17.240
And we thought the fastest way to
do that was to use HTMLDB itself.

00:46:17.280 --> 00:46:21.820
Now, the only thing is that it sometimes
causes headaches when you're

00:46:21.820 --> 00:46:23.940
editing a page with itself,
right?

00:46:26.300 --> 00:46:27.450
Does that make sense?

00:46:27.700 --> 00:46:29.700
Which you have to do sometimes.

00:46:29.750 --> 00:46:34.390
Anyway,
so I'm creating a validation and sorry.

00:46:35.550 --> 00:46:38.900
I'm creating a validation that's going
to check to make sure that the item,

00:46:38.990 --> 00:46:41.190
the field, is not null.

00:46:44.400 --> 00:47:18.900
[Transcript missing]

00:47:19.770 --> 00:47:21.460
So let's try to make an update.

00:47:21.460 --> 00:47:25.470
Ooh, error occurred,
and you see value must be specified,

00:47:25.470 --> 00:47:26.700
right, at the field level.

00:47:26.700 --> 00:47:30.600
So I changed the functionality
of the application even though

00:47:30.600 --> 00:47:32.690
it was generated from a wizard.

00:47:34.000 --> 00:47:37.960
Now there's one more thing I want to do.

00:47:38.090 --> 00:47:42.800
I want to show you that I can change
the look and feel of this application

00:47:42.930 --> 00:47:45.800
simply by switching its theme.

00:47:46.540 --> 00:47:49.510
So I'm going to add a new theme to
my application here and then say I'd

00:47:49.510 --> 00:47:52.380
like to switch to that theme please.

00:47:54.130 --> 00:47:56.370
And really all it's doing,
it's taking all the

00:47:56.370 --> 00:48:01.800
templates and switching them,
because it's all data driven.

00:48:02.760 --> 00:48:05.850
And so here we are in
the application again,

00:48:05.850 --> 00:48:10.370
right,
now with a completely different look.

00:48:20.500 --> 00:48:23.500
Go back to the slides, please.

00:48:23.620 --> 00:48:25.810
Okay, so we've seen...

00:48:26.680 --> 00:48:32.610
That the database running on
Apple X Server is really affordable.

00:48:34.000 --> 00:48:52.200
[Transcript missing]

00:48:58.050 --> 00:49:00.390
So in summary,
I hope what you were able to take away

00:49:00.470 --> 00:49:05.000
from today's presentation was that we've
got some great working products together.

00:49:05.000 --> 00:49:08.490
I think hopefully you've seen
this week that Apple's definitely

00:49:08.490 --> 00:49:10.080
focused on the enterprise.

00:49:10.110 --> 00:49:12.000
We're really excited about
what we're doing here.

00:49:12.000 --> 00:49:15.130
Hopefully you've all had a chance to
walk around the data center and check

00:49:15.130 --> 00:49:17.000
out some of our solutions down there.

00:49:17.000 --> 00:49:21.700
We've got a lot of successes right now
going on in this area for our company

00:49:21.700 --> 00:49:24.000
and with our enterprise partners.

00:49:24.000 --> 00:49:27.480
And we're really hoping that some
of the things you've taken away from

00:49:27.480 --> 00:49:31.440
this week is that we're definitely
a player out there and would love

00:49:31.500 --> 00:49:32.990
to work in your organizations.

00:49:33.000 --> 00:49:36.960
I guess a couple things I would
like to mention again is the

00:49:37.050 --> 00:49:39.950
10g Rack session following this.

00:49:40.010 --> 00:49:42.000
It's going to be in level 2 in Alcove 3.

00:49:42.000 --> 00:49:45.000
Again,
it's across from your enterprise IT lab.

00:49:45.000 --> 00:49:47.410
Another thing we'd like to do is
get your feedback on what you saw

00:49:47.420 --> 00:49:48.990
this week from an enterprise level.

00:49:49.000 --> 00:49:52.000
We actually have an
enterprise feedback session.

00:49:52.000 --> 00:49:54.000
It's at 3:30 in which room, Chris?

00:49:54.000 --> 00:49:55.270
Yes?

00:49:55.640 --> 00:49:58.520
Please come and give us your feedback.

00:49:58.650 --> 00:50:00.500
If you haven't noticed,
if you've been attending

00:50:00.500 --> 00:50:04.500
WWDC for the last few years,
we've really tried to emphasize

00:50:04.500 --> 00:50:07.580
a lot on what's going on in
the enterprise with Apple.

00:50:07.590 --> 00:50:08.500
We do that with your feedback.

00:50:08.530 --> 00:50:11.910
I think hopefully you've seen
a continuing growth in the

00:50:12.010 --> 00:50:16.040
sessions and in the availability
of our engineering groups and the

00:50:16.040 --> 00:50:18.500
products that are coming to market.

00:50:18.500 --> 00:50:21.460
If you're out there developing
markets for the enterprise,

00:50:21.560 --> 00:50:25.550
I didn't introduce myself earlier,
but my name is Matt Sturgis and

00:50:25.610 --> 00:50:28.500
I have a team of folks that manage
our enterprise relationships,

00:50:28.500 --> 00:50:29.460
the IT partners.

00:50:29.510 --> 00:50:32.400
For instance, the Oracles and SAPs,
when they're bringing

00:50:32.400 --> 00:50:35.500
applications to market,
they work directly with our team.

00:50:35.500 --> 00:50:38.470
One of the things that we like to
do is work more closely with you

00:50:38.470 --> 00:50:41.430
as partners to help you guys be
successful in the market when you

00:50:41.520 --> 00:50:43.490
do bring your solutions to market.

00:50:43.500 --> 00:50:46.470
For the customers as well,
one of the things that we're

00:50:46.470 --> 00:50:48.500
looking for are success stories.

00:50:48.500 --> 00:50:50.500
Especially on Oracle right now.

00:50:50.500 --> 00:50:54.350
If you're out there in your shops and you
guys are developing or deploying Oracle,

00:50:54.710 --> 00:50:56.500
please come find me after this session.

00:50:56.500 --> 00:50:59.160
I'd love to talk to you about what
you're doing and see if there's

00:50:59.210 --> 00:51:02.410
potential to make you guys famous
within the Apple Oracle community.