WEBVTT

00:00:01.300 --> 00:00:02.520
Good morning.

00:00:02.610 --> 00:00:06.960
Welcome to session 126,
Implementing Core Data with

00:00:06.960 --> 00:00:08.680
Hands-on Examples.

00:00:08.750 --> 00:00:09.610
I'm Rick Ballard.

00:00:09.860 --> 00:00:12.340
This is Chris Hanson,
and we're engineers with

00:00:12.340 --> 00:00:14.830
Development Technologies.

00:00:20.000 --> 00:00:23.150
Today we're going to be going through
several steps in showing you how to

00:00:23.270 --> 00:00:26.060
build an effective core data application.

00:00:26.090 --> 00:00:29.100
We're going to start out
in the Xcode Data Modeler,

00:00:29.250 --> 00:00:32.520
showing you how to build
your core data model.

00:00:32.520 --> 00:00:36.160
Then we're going to move on to a
command line example that shows you

00:00:36.160 --> 00:00:39.000
how to set up your persistence stack.

00:00:39.000 --> 00:00:42.670
Next, we'll show you how to build an
application using AppKit that

00:00:42.770 --> 00:00:47.150
has a simple table view populated
with data from core data,

00:00:47.150 --> 00:00:49.460
but without using bindings yet.

00:00:49.620 --> 00:00:52.880
And then we'll move on to another
example showing you how to use the

00:00:52.880 --> 00:00:55.790
power of core data with Cocoa bindings.

00:00:55.980 --> 00:00:58.700
Finally, we'll show you a completed app.

00:00:58.730 --> 00:01:01.510
We're going to be building a recipe
manager today with core data.

00:01:01.610 --> 00:01:04.070
So this is the core recipes application.

00:01:04.320 --> 00:01:07.210
And what we'll be building in the
hands-on examples is a simplified

00:01:07.310 --> 00:01:10.670
version of the recipe manager,
designed to show you

00:01:10.800 --> 00:01:12.700
examples about core data.

00:01:12.850 --> 00:01:16.020
In the end, we'll take a brief look at
what a more complex core

00:01:16.020 --> 00:01:18.680
recipe manager might look like.

00:01:19.110 --> 00:01:20.590
So this is a hands-on session.

00:01:20.600 --> 00:01:23.980
And if you're following along today,
there are a few things you'll need.

00:01:24.050 --> 00:01:28.300
You'll need a laptop with a
copy of OS X Tiger installed,

00:01:28.360 --> 00:01:32.560
either Xcode 2.0 or Xcode 2.1.

00:01:32.760 --> 00:01:38.100
You'll need your WWDC CD,
which has a sample code disk image on it.

00:01:38.240 --> 00:01:41.230
You want to look in there,
find one of the Core Data sessions,

00:01:41.490 --> 00:01:43.180
pull up the Core Recipes disk image.

00:01:43.420 --> 00:01:46.840
Inside that disk image is
a sample code disk image.

00:01:46.900 --> 00:01:50.640
And you'll need that sample code if
you want to try and follow along.

00:01:50.660 --> 00:01:55.100
Inside, you'll find a hands-on examples
folder with four examples on it.

00:01:55.150 --> 00:01:58.470
And those are the examples
we'll be stepping through today.

00:01:58.640 --> 00:02:00.560
Now,
if you're having trouble following along,

00:02:00.600 --> 00:02:04.100
you're having trouble keeping up,
don't worry.

00:02:04.190 --> 00:02:06.700
Inside the sample code,
there's a begin folder and an

00:02:06.700 --> 00:02:08.340
end folder for each example.

00:02:08.420 --> 00:02:10.600
The end folder is what we'll be building.

00:02:10.710 --> 00:02:12.700
So it's better that you
follow along with us,

00:02:12.770 --> 00:02:15.100
pay attention,
make sure you don't miss anything.

00:02:15.210 --> 00:02:19.030
And you can always go back using
the read me in the disk image

00:02:19.040 --> 00:02:23.290
and build from the begin to the
end example on your own time.

00:02:24.520 --> 00:02:27.760
So we're going to start out,
for those of you who haven't read the

00:02:27.760 --> 00:02:31.840
documentation or maybe missed yesterday's
session or just need a quick refresher,

00:02:31.940 --> 00:02:34.990
with a quick overview of some
of the concepts of Core Data,

00:02:34.990 --> 00:02:38.030
which Chris Hanson is going to give us.

00:02:38.130 --> 00:02:39.750
CHRIS HANSON: Thanks, Rick.

00:02:41.140 --> 00:02:46.260
So Core Data, as we often describe it,
is an object graph management

00:02:46.260 --> 00:02:48.900
and persistence framework.

00:02:49.380 --> 00:02:53.740
Here's the architecture of what we
call the Core Data Persistence Stack.

00:02:53.980 --> 00:02:59.030
Starting sort of at the top level,
you have your data model.

00:02:59.120 --> 00:03:04.080
This model describes the model objects
in model view controller terms in

00:03:04.080 --> 00:03:06.260
your application in rich detail.

00:03:06.470 --> 00:03:10.080
It describes the entities,
the types of things that you're

00:03:10.080 --> 00:03:13.530
working with in your application,
as well as the attributes that they

00:03:13.530 --> 00:03:16.390
have and how they relate to each other.

00:03:17.160 --> 00:03:22.610
This model is then fed into a persistent
store coordinator that manages

00:03:22.610 --> 00:03:24.910
any number of persistent stores.

00:03:25.060 --> 00:03:28.030
These persistent stores are what
actually store the data that's

00:03:28.170 --> 00:03:32.200
represented by your model and
that's used in your application.

00:03:32.320 --> 00:03:34.640
The Persistent
Store Coordinator basically acts as

00:03:34.830 --> 00:03:39.420
a facade on any number of stores,
presenting a unified interface to

00:03:39.490 --> 00:03:43.060
the higher levels of the stack,
so they don't have to care so much

00:03:43.060 --> 00:03:45.700
where data comes from or where it goes.

00:03:45.800 --> 00:03:47.540
On top of the persistent
store coordinator,

00:03:47.670 --> 00:03:50.200
you have one or more
managed object contexts.

00:03:50.340 --> 00:03:51.880
These are sort of like
your drafting table.

00:03:52.190 --> 00:03:55.080
They're where you keep your work
products while you're working

00:03:55.200 --> 00:03:56.700
with different object graphs.

00:03:56.900 --> 00:04:00.490
You might have one managed object
context in one application.

00:04:00.730 --> 00:04:02.970
Another type of application
might have several,

00:04:03.080 --> 00:04:05.260
all talking to the same
persistent store coordinator.

00:04:05.260 --> 00:04:15.970
And finally,
you have your managed objects.

00:04:15.970 --> 00:04:15.970
These represent the actual data in
your application and are connected

00:04:15.970 --> 00:04:15.970
up into what we call an object graph.

00:04:16.220 --> 00:04:19.060
The managed object context
and the managed objects are

00:04:19.060 --> 00:04:22.820
really how you interact with
the data in your application.

00:04:22.960 --> 00:04:26.000
If you're performing operations
on individual bits of data,

00:04:26.080 --> 00:04:28.860
you're generally going to be
working with your managed objects.

00:04:28.910 --> 00:04:32.140
If you're working with your
entire object graph as a whole,

00:04:32.140 --> 00:04:36.120
for example, if you're saving it or if
you're fetching things into it,

00:04:36.120 --> 00:04:39.330
you'll be working with the
managed object context.

00:04:41.110 --> 00:04:43.710
So to start with,
Rick is going to show us how

00:04:43.710 --> 00:04:47.710
to do some Core Data modeling
to describe your model objects.

00:04:51.300 --> 00:04:55.780
Those of you following along will
want to open up in the example one,

00:04:55.800 --> 00:04:59.530
working with a Core Data Model folder,
you'll see a file called

00:04:59.530 --> 00:05:02.410
corerecipes-begin.xcdatamodel.

00:05:02.470 --> 00:05:05.030
That's an Xcode data model file,
and that's what we'll be

00:05:05.030 --> 00:05:06.140
working with in a moment.

00:05:06.140 --> 00:05:09.860
When we go through the data modeler,
we'll show you how to work with

00:05:09.870 --> 00:05:13.540
Xcode's data modeling tool,
how to add entities, attributes,

00:05:13.590 --> 00:05:15.960
and relationships between entities.

00:05:15.960 --> 00:05:19.260
And finally, we'll show you the Predicate
Builder and how to build a simple

00:05:19.260 --> 00:05:20.820
predicate for a fetch request.

00:05:20.840 --> 00:05:25.090
So let's go to our hands-on
part of this presentation.

00:05:29.200 --> 00:05:31.770
And you can go ahead and
open up the Exi Data Model.

00:05:31.880 --> 00:05:38.410
Going to turn up the zoom a little bit.

00:05:38.550 --> 00:05:42.630
So here you can see we have two entities,
one named Recipes and

00:05:42.630 --> 00:05:44.480
one named Ingredients.

00:05:44.490 --> 00:05:48.630
Both of these have several attributes,
such as name and preparation time.

00:05:48.770 --> 00:05:52.620
And in the upper part of the Data Model,
we have another list of the

00:05:52.620 --> 00:05:56.620
entities and of the attributes
for the currently selected entity.

00:05:56.780 --> 00:06:00.500
So we're going to start out by adding
an attribute to an existing entity.

00:06:00.570 --> 00:06:03.720
So let's select the Recipe entity.

00:06:03.720 --> 00:06:07.430
We're going to click on the plus
button up in the Property pane

00:06:07.430 --> 00:06:11.110
and choose Add Attribute.

00:06:12.710 --> 00:06:16.900
Now let's add a number
of servings attribute.

00:06:16.950 --> 00:06:18.320
So we'll call it number of servings.

00:06:18.400 --> 00:06:20.680
When you're adding attributes,
you want to start them

00:06:20.680 --> 00:06:21.940
with a lowercase letter.

00:06:21.960 --> 00:06:25.570
And then generally,
the convention is to use bumpy case.

00:06:25.730 --> 00:06:27.640
So we say number of servings.

00:06:27.660 --> 00:06:31.770
And we're going to set
this type to int16.

00:06:32.920 --> 00:06:35.500
We can leave this as
an optional attribute,

00:06:35.500 --> 00:06:38.240
so don't uncheck the optional checkbox.

00:06:38.350 --> 00:06:42.000
And we will set the
minimum value to zero,

00:06:42.100 --> 00:06:45.400
because you can't have
fewer than zero servings.

00:06:45.610 --> 00:06:48.780
And we'll set a default value
of 4 so that when you create a

00:06:48.780 --> 00:06:54.300
new instance of a recipe entity,
its number of servings will start with 4.

00:06:55.400 --> 00:06:59.240
And you can see if you're familiar
with entity relationship diagrams,

00:06:59.240 --> 00:07:02.460
this diagram should be fairly familiar.

00:07:02.460 --> 00:07:05.900
You can see there's a relationship
already between recipes and ingredients.

00:07:05.900 --> 00:07:09.080
And the arrowheads on the
relationship indicate that it's

00:07:09.080 --> 00:07:10.920
a one-to-many relationship.

00:07:10.920 --> 00:07:14.110
That is,
every recipe can have many ingredients,

00:07:14.250 --> 00:07:17.680
denoted by the two arrowheads,
and every ingredient

00:07:17.840 --> 00:07:21.920
can have but one recipe,
denoted by the single arrowhead.

00:07:21.970 --> 00:07:24.320
So let's go ahead and add a new entity.

00:07:24.320 --> 00:07:28.140
Let's say that a recipe
is written by one chef.

00:07:28.150 --> 00:07:30.350
So we're going to add a chef entity.

00:07:30.370 --> 00:07:32.950
So up in the Entities pane,
you're going to want to

00:07:32.980 --> 00:07:34.500
click on the plus button.

00:07:35.600 --> 00:07:37.600
And you may want to drag that
over to the left so it's not

00:07:37.600 --> 00:07:40.400
obscuring the rest of your diagram.

00:07:40.440 --> 00:07:43.590
And let's name this entity Chef.

00:07:44.850 --> 00:07:47.820
I'm going to do that either in the
diagram or in the upper right-hand

00:07:47.820 --> 00:07:49.880
corner where it says Name.

00:07:49.940 --> 00:07:53.220
Let's add a couple
attributes to our new entity.

00:07:53.250 --> 00:07:55.520
Well,
a chef has a first name and a last name,

00:07:55.580 --> 00:07:58.880
so let's add first name
and last name attributes.

00:07:58.910 --> 00:08:00.980
I'm going to go up to
the Properties pane,

00:08:01.030 --> 00:08:05.020
click the plus button,
choose Add Attribute.

00:08:06.700 --> 00:08:08.840
And we're going to name
this one First Name,

00:08:08.840 --> 00:08:12.120
again with the same
capitalization convention,

00:08:12.120 --> 00:08:15.910
lowercase first, uppercase N for name.

00:08:16.420 --> 00:08:17.170
Let's do it again.

00:08:17.290 --> 00:08:19.040
Add another attribute.

00:08:19.090 --> 00:08:21.900
We'll call this one Last Name.

00:08:23.780 --> 00:08:25.370
Now these things,
these two attributes have

00:08:25.440 --> 00:08:26.310
some things in common.

00:08:26.510 --> 00:08:27.410
They're both strings.

00:08:27.560 --> 00:08:28.940
We don't have to edit
them all separately.

00:08:28.940 --> 00:08:33.170
We can select them both
up in the properties pane.

00:08:33.840 --> 00:08:36.850
And now we can drag down on
the type and choose string,

00:08:36.850 --> 00:08:39.870
and it will set it for both
of them at the same time.

00:08:42.780 --> 00:08:45.920
So now let's go and go
back to the first one,

00:08:45.920 --> 00:08:49.500
just selecting one at a time.

00:08:49.650 --> 00:08:53.960
And let's set the default value
of first name to first name.

00:08:56.300 --> 00:09:00.870
Let's go to the second one and set
the default value to last name.

00:09:00.990 --> 00:09:04.370
So now when we create a new
instance of a Chef entity,

00:09:04.570 --> 00:09:09.410
it will come with a first name of first
name and a last name of last name.

00:09:10.920 --> 00:09:14.840
So now let's make this relationship
between chefs and recipes that we need.

00:09:14.960 --> 00:09:18.150
Well, every recipe is written
by one chef in our world,

00:09:18.150 --> 00:09:20.800
and a chef can write multiple recipes.

00:09:20.990 --> 00:09:23.510
So let's go ahead and
start with the chef entity.

00:09:23.720 --> 00:09:24.840
Click on the chef entity.

00:09:24.990 --> 00:09:26.730
We're going to add a
relationship to recipe.

00:09:26.940 --> 00:09:29.400
Then we'll add a relationship
back from recipe to chef and make

00:09:29.500 --> 00:09:32.360
them inverse of each other to
create a one-to-many relationship.

00:09:32.460 --> 00:09:37.290
So start by clicking the plus button
and choosing Add Relationship.

00:09:39.370 --> 00:09:42.100
We're going to name this
relationship Recipes because it's

00:09:42.130 --> 00:09:45.380
the recipes that a chef wrote.

00:09:45.510 --> 00:09:50.490
And we're going to set the destination of
this relationship to the recipe entity.

00:09:51.930 --> 00:09:57.200
Finally, we will check the
Too Many Relationship checkbox.

00:09:57.210 --> 00:10:01.040
And now every chef is
related to many recipes.

00:10:01.160 --> 00:10:02.110
Well, let's put the inverse in.

00:10:02.180 --> 00:10:05.480
So click on Recipe,
click the plus button in

00:10:05.530 --> 00:10:09.550
the Property pane again,
and choose Add Relationship.

00:10:09.610 --> 00:10:12.340
And we'll name this one Chef,
because it's the chef

00:10:12.340 --> 00:10:13.810
that wrote the recipe.

00:10:15.330 --> 00:10:19.380
So set the destination entity
after you've named it to Chef.

00:10:19.380 --> 00:10:22.260
Now we have two relationships here,
but they're really the

00:10:22.260 --> 00:10:23.220
inverse of each other.

00:10:23.220 --> 00:10:26.020
So we want to set them to
be an inverse relationship.

00:10:26.020 --> 00:10:29.740
This will allow Core Data to do its
relationship maintenance for us.

00:10:29.740 --> 00:10:33.570
So you're going to choose the
inverse dropdown and set the

00:10:33.650 --> 00:10:38.970
inverse of this relationship to the
recipe's relationship on the Chef.

00:10:39.240 --> 00:10:41.860
And you see that the two arrows
we had going between them have now

00:10:41.860 --> 00:10:46.170
become one arrow that signifies
a one-to-many relationship.

00:10:47.130 --> 00:10:48.940
So let's do one more thing.

00:10:48.940 --> 00:10:51.280
Yesterday,
in the introduction to Core Data Session,

00:10:51.280 --> 00:10:54.440
they talked about fetch requests
as how you fetch the data

00:10:54.530 --> 00:10:55.920
from the persistent stack.

00:10:55.950 --> 00:10:58.860
Well, normally, when you create a fetch
request for an entity,

00:10:58.880 --> 00:11:03.920
it will fetch all the entities available,
or all the instances of the given entity

00:11:03.920 --> 00:11:06.000
available in the persistent stack.

00:11:06.150 --> 00:11:09.360
But you may only want to fetch
a subset of those entities.

00:11:09.430 --> 00:11:12.520
And so you may want to assign a
predicate to your fetch request,

00:11:12.540 --> 00:11:16.900
which will resolve to true or false
for each instance of an entity.

00:11:16.930 --> 00:11:19.640
And when it resolves to true,
it will fetch that instance.

00:11:19.740 --> 00:11:22.360
If it resolves to false,
it will not fetch that instance.

00:11:22.380 --> 00:11:25.230
You can do this all programmatically,
but we have a nice predicate builder

00:11:25.520 --> 00:11:29.480
for graphically building your predicate
for a fetch request in the data model.

00:11:29.480 --> 00:11:31.260
So let's go ahead and do that now.

00:11:31.420 --> 00:11:34.190
We're going to add a fetch
request for the Chef entity.

00:11:34.310 --> 00:11:37.460
So you want to click on Chef.

00:11:37.490 --> 00:11:41.590
And again, in the Properties pane,
you're going to click on the plus button.

00:11:42.800 --> 00:11:45.940
You can choose Show Fetch Requests
if you want from the dropdown first,

00:11:45.940 --> 00:11:47.800
but you can add one either way.

00:11:47.800 --> 00:11:54.060
You're going to click on the plus
button and add a new fetch request.

00:11:55.780 --> 00:11:59.230
Let's name this fetch request
Chef Name Fetch Request,

00:11:59.230 --> 00:12:01.510
because we're going to design a
predicate that will allow us to

00:12:01.600 --> 00:12:06.770
fetch a chef or all the chefs whose
name matches a given name that we'll

00:12:06.770 --> 00:12:09.390
supply when we use the fetch request.

00:12:09.600 --> 00:12:12.170
So once we've named it,
click the Edit Predicate button

00:12:12.240 --> 00:12:15.060
to bring up our Predicate Builder.

00:12:15.850 --> 00:12:19.790
And what we're going to do here is make
it so that when you use this predicate,

00:12:19.850 --> 00:12:24.200
you'll supply a value for
a variable called name.

00:12:24.260 --> 00:12:28.180
And the predicate will match a given
chef if the first name is equal to

00:12:28.180 --> 00:12:32.190
the value you supply or the last name
is equal to the value you supply.

00:12:32.300 --> 00:12:34.480
So we want to OR two conditions together.

00:12:34.580 --> 00:12:37.610
So let's click the plus button
to add a second condition.

00:12:37.820 --> 00:12:40.420
And the default it comes up
with is to AND them together.

00:12:40.490 --> 00:12:43.440
We're going to choose to
OR them together instead.

00:12:44.330 --> 00:12:48.120
And we want to make one of the conditions
on first name and the other on last name.

00:12:48.180 --> 00:12:51.850
So you're going to choose the second
box and change it to last name.

00:12:52.370 --> 00:12:55.990
Let's change both of those equal
boxes to like because we don't

00:12:56.050 --> 00:12:59.940
want to compare to see if the value
we supply is exactly the same.

00:13:00.000 --> 00:13:04.230
We want to see if it matches
like a regular expression,

00:13:04.240 --> 00:13:07.230
though reject is a little more
like a regular expression.

00:13:07.230 --> 00:13:10.530
Like is more like shell-style
globbing matching.

00:13:10.680 --> 00:13:17.190
And we're going to Control-click to the
right of that field and choose Variable.

00:13:18.350 --> 00:13:20.640
This lets us enter in a name for
a variable that we're going to

00:13:20.800 --> 00:13:22.690
see if the first name is like.

00:13:22.800 --> 00:13:25.410
So let's say our variable's name, name.

00:13:25.510 --> 00:13:27.940
We're going to do the same
thing for the second condition.

00:13:28.190 --> 00:13:36.690
Control-click to the right of the field,
change it to a variable,

00:13:36.690 --> 00:13:37.200
enter in the name of our variable,
which is name.

00:13:37.200 --> 00:13:37.200
And we can hit OK now.

00:13:37.760 --> 00:13:40.280
You see it's got a string
representation of that predicate.

00:13:40.320 --> 00:13:44.260
That string representation is what
you would use if you were building

00:13:44.320 --> 00:13:49.280
a predicate programmatically using
the predicate with format method.

00:13:50.110 --> 00:13:54.100
So this is a predicate that allows
us to fetch any chef whose first

00:13:54.190 --> 00:13:59.000
name or their last name is equal
or is like the value we supply.

00:13:59.090 --> 00:14:01.110
If you play around with the
predicate builder a bit more,

00:14:01.140 --> 00:14:03.100
you can see that you can
drag conditions around,

00:14:03.110 --> 00:14:06.600
you can create fairly complex predicates,
move parts around.

00:14:06.850 --> 00:14:08.660
It's a very nice tool.

00:14:08.660 --> 00:14:12.200
Chris,
can I show you a little bit of that?

00:14:15.890 --> 00:14:19.390
So if we added a new condition,
for example, or added an and,

00:14:19.570 --> 00:14:22.190
you can move parts of it around.

00:14:30.660 --> 00:14:33.100
This is something you can experiment
with when you get a chance.

00:14:33.180 --> 00:14:40.420
There we go.

00:14:40.530 --> 00:14:42.660
All right, so let's move on.

00:14:42.770 --> 00:14:44.990
So go back to our slides.

00:14:48.290 --> 00:14:50.610
So what did we just do?

00:14:50.860 --> 00:14:55.040
Well, we opened the data model and added
an attribute to an existing entity.

00:14:55.200 --> 00:14:58.590
We created a new entity
in our data model.

00:14:58.760 --> 00:15:02.570
We added a one-to-many relationship
between two existing entities.

00:15:02.720 --> 00:15:06.560
And we created a fetch request in our
model that we could access later in

00:15:06.560 --> 00:15:10.980
our application and used the Predicate
Builder to assign it a predicate.

00:15:11.200 --> 00:15:13.440
Now we're going to move on to
building a command line example

00:15:13.460 --> 00:15:16.160
that sets up a persistent stack,
and Chris is going to

00:15:16.160 --> 00:15:17.480
lead us through this.

00:15:26.030 --> 00:15:30.640
So now that we have a data model,
we need to actually do something with it.

00:15:30.850 --> 00:15:34.380
What we're going to do here is create
a simple command line application that

00:15:34.450 --> 00:15:38.930
sets up a Core Data persistent stack,
fetches some managed objects

00:15:39.310 --> 00:15:43.470
from a persistent store,
and then if it doesn't have any

00:15:43.510 --> 00:15:47.360
managed objects in that store yet,
it'll create one,

00:15:47.360 --> 00:15:51.660
insert it in a managed object context,
and save that context

00:15:51.660 --> 00:15:53.730
to the persistent store.

00:15:53.880 --> 00:15:56.550
So let's go hands-on.

00:16:00.390 --> 00:16:06.040
And in your example two folder,
you have Core Recipes, CocoaView.

00:16:06.040 --> 00:16:11.080
Actually, you have example two,
building a Core Data command

00:16:11.080 --> 00:16:13.350
line application.

00:16:13.510 --> 00:16:16.290
So open Core Recipes tool begin.

00:16:19.520 --> 00:16:25.680
And let's look at corerecipes-tool.m.

00:16:25.760 --> 00:16:27.880
So if we scroll down to
the main routine here,

00:16:27.880 --> 00:16:30.650
we have a pretty giant font size here.

00:16:31.100 --> 00:16:33.380
It's probably smaller on your screen.

00:16:33.790 --> 00:16:36.480
We can see sort of the
structure of this tool.

00:16:36.530 --> 00:16:39.520
What we've done is--

00:16:42.270 --> 00:16:49.010
Set up a persistent stack in
initialized Core Data stack.

00:16:49.560 --> 00:16:53.960
Then we try to fetch all the chefs
that are available through that stack

00:16:54.490 --> 00:16:57.330
using the fetch all chefs routine.

00:16:58.210 --> 00:17:01.170
If that succeeds,
we check how many we fetched.

00:17:01.380 --> 00:17:07.400
If we didn't actually fetch any,
we try to insert and save a chef.

00:17:07.530 --> 00:17:11.860
And finally, if we did fetch anything,
we try to print it out.

00:17:11.980 --> 00:17:14.990
So let's just build and run this.

00:17:18.540 --> 00:17:19.610
We get an error.

00:17:19.720 --> 00:17:25.630
This error happens because we haven't
even initialized our stack yet.

00:17:25.760 --> 00:17:28.180
We've only written the
skeleton of the code.

00:17:28.180 --> 00:17:36.220
So let's go back to core-recipes-tool.m
and look at initialized Core Data stack.

00:17:38.580 --> 00:17:42.500
What we have here is a commented
out block of code that actually

00:17:42.500 --> 00:17:45.700
finds our model and then
sets up our persistent stack.

00:17:45.780 --> 00:17:49.440
Let's just uncomment
this large comment block.

00:17:51.320 --> 00:17:55.390
We can see here that the first
thing we do is try to find our

00:17:55.390 --> 00:17:58.600
managed object model describing
our data from our bundle.

00:17:58.870 --> 00:18:01.760
Since this is a command line tool,
it'll just look in the

00:18:01.760 --> 00:18:03.650
same directory as the tool.

00:18:04.450 --> 00:18:08.080
Then we set up a persistent store
coordinator to provide access

00:18:08.270 --> 00:18:11.820
to our data using that model.

00:18:12.210 --> 00:18:15.300
Finally,
we create a managed object context to

00:18:15.300 --> 00:18:20.290
use when working with our data and attach
it to the persistent store coordinator.

00:18:21.230 --> 00:18:25.040
And then we add an XML persistent store.

00:18:25.050 --> 00:18:27.180
Now,
you can actually use one of three store

00:18:27.200 --> 00:18:29.880
types that represent on-disk stores.

00:18:29.880 --> 00:18:33.140
You can use XML,
you can use a binary format,

00:18:33.180 --> 00:18:34.860
or you can use SQLite.

00:18:34.880 --> 00:18:38.040
And we also have a fourth type of store,
an in-memory store,

00:18:38.060 --> 00:18:41.420
that doesn't actually write
any data to disk on save,

00:18:41.500 --> 00:18:44.980
but is very useful if you have
your own document formats.

00:18:45.010 --> 00:18:47.640
We're not going to go
into how to use that here.

00:18:47.830 --> 00:18:51.900
I encourage you to come to
Advanced Core Data Usages tomorrow,

00:18:52.120 --> 00:18:55.180
where we might be talking about
a little bit more of that.

00:18:56.740 --> 00:19:01.780
So now let's build and run,
saving as we go.

00:19:02.480 --> 00:19:05.060
And this time,
we get an error while fetching.

00:19:05.150 --> 00:19:06.760
So obviously, it's gone through.

00:19:06.760 --> 00:19:08.260
It's set up our persistent stack.

00:19:08.330 --> 00:19:11.500
It's tried to add that store.

00:19:11.570 --> 00:19:13.720
But there's nothing in it.

00:19:14.710 --> 00:19:22.080
So let's go back to corerecipes.tool.m
and find the fetchAllChefs method.

00:19:23.080 --> 00:19:26.010
Not only was there nothing in the store,
we didn't even actually have the

00:19:26.130 --> 00:19:28.490
code working that does the fetch.

00:19:28.610 --> 00:19:34.000
So again, we have a commented out block
of code that you can uncomment.

00:19:35.200 --> 00:19:39.890
And we can see that the first thing
it does is find the Chef entity.

00:19:40.060 --> 00:19:43.240
Generally in Core Data,
you need to work with entities

00:19:43.630 --> 00:19:46.720
directly rather than by name,
although there are places where

00:19:46.720 --> 00:19:48.300
you'll work with them by name too.

00:19:48.300 --> 00:19:51.270
So we can use the utility
method on NSEntityDescription,

00:19:51.270 --> 00:19:56.500
EntityForName and ManagedObjectContext
to find our entity.

00:19:56.500 --> 00:19:59.440
Once we have our entity,
we programmatically set up

00:19:59.440 --> 00:20:03.620
a fetch request that will
just find all Chef entities.

00:20:03.620 --> 00:20:07.720
The reason that it'll find them all
is that we don't specify a predicate.

00:20:07.720 --> 00:20:10.590
If we don't specify a
predicate on a fetch request,

00:20:10.600 --> 00:20:15.540
it's assumed that you want all instances
of the entity that you're fetching.

00:20:16.200 --> 00:20:19.370
Once we have our fetch request,
we simply ask our managed object

00:20:19.460 --> 00:20:27.170
context to find all of the instances
of that entity that it possibly can.

00:20:28.180 --> 00:20:31.460
Once we have our fetch request,
we simply ask our managed object

00:20:31.460 --> 00:20:39.180
context to find all of the instances
of that entity that it possibly can.

00:20:39.770 --> 00:20:43.060
Once we have our fetch request,
we simply ask our managed object

00:20:43.060 --> 00:20:49.680
context to find all of the instances
of that entity that it possibly can.

00:20:51.850 --> 00:20:53.920
and we get just a little further.

00:20:53.950 --> 00:20:57.560
Now you see that we get an error
while inserting and saving a chef.

00:20:57.570 --> 00:21:02.000
Well, this happened because we
tried to fetch our chefs,

00:21:02.020 --> 00:21:03.800
but we didn't actually have any.

00:21:03.850 --> 00:21:06.580
So of course it tries to
create an initial one,

00:21:06.600 --> 00:21:09.940
but because that code
isn't hooked up yet,

00:21:09.970 --> 00:21:12.360
it doesn't actually get anywhere.

00:21:12.360 --> 00:21:15.300
So let's go back to corerecipes.tool.m.

00:21:15.340 --> 00:21:19.510
And in our next method,
we have insertChef and save.

00:21:20.970 --> 00:21:26.520
Here we have one more little piece
of commented out code that shows you

00:21:26.530 --> 00:21:29.020
how to create a new managed object.

00:21:29.020 --> 00:21:31.460
So generally,
when you're creating new managed objects,

00:21:31.460 --> 00:21:37.590
you use an entity description insert new
entity-- insert new object for entity

00:21:37.590 --> 00:21:40.620
for name in managed object context.

00:21:40.620 --> 00:21:43.670
You don't actually have to find the
entity description object for the

00:21:43.680 --> 00:21:46.890
entity that you're referring to,
because you can simply specify

00:21:46.890 --> 00:21:49.840
the name and the managed object
context you want to create it in.

00:21:49.840 --> 00:21:52.880
The managed object context can find
that entity because it's attached

00:21:52.950 --> 00:21:57.250
to a persistent store coordinator,
which in turn is attached to a model.

00:21:57.910 --> 00:22:00.110
Once we've created our object,
we set a couple of

00:22:00.130 --> 00:22:01.890
initial properties on it.

00:22:01.990 --> 00:22:05.280
We're just using John Doe
for the chef's name.

00:22:05.850 --> 00:22:07.930
And finally,
now that we have an object in

00:22:07.930 --> 00:22:11.810
our managed object context,
we save it.

00:22:12.700 --> 00:22:15.640
and finally, we return it.

00:22:15.790 --> 00:22:19.310
So at this point,
we can build and run one more time.

00:22:20.860 --> 00:22:26.550
And you see that no Chef was found,
so we created one and inserted it in

00:22:26.550 --> 00:22:28.640
our managed object context and saved it.

00:22:28.790 --> 00:22:34.420
And we just use NSLog to
output the Chef that we saved.

00:22:34.530 --> 00:22:39.080
So you can see that not only does it have
the first name and last name that we set,

00:22:39.140 --> 00:22:42.670
it also has an empty
collection of recipes,

00:22:42.670 --> 00:22:46.700
and it has a managed object ID.

00:22:46.740 --> 00:22:51.390
Excellent, we've got screen zoom.

00:22:51.510 --> 00:22:54.650
So if we run this one more time,

00:22:57.810 --> 00:23:00.380
You can see that we actually
found that chef now that it's

00:23:00.470 --> 00:23:03.570
been saved in a persistent store.

00:23:03.870 --> 00:23:08.400
And we can get the name
of the chef that we found.

00:23:08.510 --> 00:23:10.040
So what have we learned?

00:23:10.070 --> 00:23:12.260
Going back to slides.

00:23:16.990 --> 00:23:21.650
Well, we figured out how to set up a
Core Data persistent stack that

00:23:21.750 --> 00:23:24.080
provides access to our data.

00:23:24.240 --> 00:23:27.970
We fetched some data from it,
some managed objects.

00:23:28.430 --> 00:23:32.960
When we didn't find any managed objects,
we created one,

00:23:32.960 --> 00:23:36.910
and then we saved our object
graph containing that one object.

00:23:39.340 --> 00:23:42.560
Now that we know how to work with
Core Data from a command line tool,

00:23:42.580 --> 00:23:47.680
let's kick it up a notch and
go to an AppKit application.

00:23:51.770 --> 00:23:54.350
So those of you following along will
want to look in the example three

00:23:54.360 --> 00:23:59.200
folder and open up the Core Recipes,
Cookerview-begin project.

00:23:59.320 --> 00:24:02.940
This project, we're going to go through
how to display data from your

00:24:02.940 --> 00:24:05.330
managed objects in a table view.

00:24:05.460 --> 00:24:10.000
We'll show you how to traverse the
relationships in your object graph.

00:24:10.380 --> 00:24:14.310
will show you how to create a
custom NSManageObject subclass,

00:24:14.310 --> 00:24:18.610
which you can provide your own business
logic or custom model behavior in.

00:24:18.700 --> 00:24:21.200
We'll show you how to
delete managed objects,

00:24:21.230 --> 00:24:24.040
and we'll show you a little
bit about delete rules.

00:24:24.160 --> 00:24:26.080
So let's go hands-on.

00:24:36.100 --> 00:24:44.700
So we're going to open up the
Core Recipes Cook Review Project.

00:24:44.830 --> 00:24:46.560
Let's start out in our nib file.

00:24:46.560 --> 00:24:51.130
So go ahead and open up mainmenu.nib.

00:24:53.970 --> 00:24:56.340
This machine is not
quite configured right,

00:24:56.390 --> 00:24:59.270
so go ahead and launch Interface Builder.

00:25:14.600 --> 00:25:30.400
[Transcript missing]

00:25:30.820 --> 00:25:34.780
Here we have a blank window which
we're going to use for our application.

00:25:34.920 --> 00:25:36.840
So we want to display
data in a table view.

00:25:36.840 --> 00:25:40.280
Let's start out by dragging an
NS table view from the appropriate

00:25:40.280 --> 00:25:42.050
palette into the window.

00:25:42.230 --> 00:25:48.170
If you're not familiar
with Interface Builder,

00:25:48.170 --> 00:25:48.170
you might not want to
try and follow along now.

00:25:48.170 --> 00:25:48.170
If you are,
you should be able to keep up.

00:25:50.310 --> 00:25:53.960
I'm going to resize that to be
most of the size of our window.

00:25:53.960 --> 00:25:57.180
We're also going to drag in an
NS button and place it below the

00:25:57.180 --> 00:25:59.960
table view down in the lower right.

00:26:01.330 --> 00:26:02.500
Let's name that button Delete.

00:26:02.700 --> 00:26:04.620
We'll use it to delete
our recipes in a bit.

00:26:04.640 --> 00:26:10.160
Now you can see when you look in the
document window in this nib that we

00:26:10.160 --> 00:26:12.760
have a Core Recipes Controller instance.

00:26:12.880 --> 00:26:15.660
That's our main controller class we're
going to use for this application.

00:26:15.770 --> 00:26:18.000
And it needs to know
where the table view is.

00:26:18.130 --> 00:26:21.260
So let's start out by control
dragging from the Core Recipes

00:26:21.260 --> 00:26:23.700
Controller up to our table view.

00:26:23.800 --> 00:26:27.660
Now you can see it tells you the name of
the object you're currently pointing at.

00:26:27.840 --> 00:26:30.090
You want to make sure it says
NS Table View so you don't

00:26:30.230 --> 00:26:32.500
connect it to the scroll view,
for example.

00:26:32.610 --> 00:26:34.780
So go ahead and control
drag up there and let go.

00:26:34.860 --> 00:26:38.800
And it should bring up the recipe
table outlet on our controller.

00:26:38.800 --> 00:26:39.750
That's an outlet we set up.

00:26:39.980 --> 00:26:42.220
Let's go ahead and connect that.

00:26:43.500 --> 00:26:47.740
Now our table view needs to have
a data source outlet pointing

00:26:47.740 --> 00:26:51.160
back at the controller since
we're not using bindings yet.

00:26:51.300 --> 00:26:55.750
So let's go from the table view,
drag down to the controller,

00:26:56.430 --> 00:26:57.790
Hook up the data source outlet.

00:26:57.790 --> 00:26:59.950
Now, if the data source isn't
one of the outlets showing,

00:26:59.960 --> 00:27:02.690
you probably dragged from the
scroll view or a different view,

00:27:02.690 --> 00:27:03.550
maybe a column view.

00:27:03.790 --> 00:27:07.080
So try again, drag from the table view
down to your controller.

00:27:07.080 --> 00:27:08.360
Hook up data source.

00:27:09.630 --> 00:27:12.170
Finally,
let's Control-drag from the Delete button

00:27:12.290 --> 00:27:19.220
to our controller and hook up the
Delete Recipe target on the controller.

00:27:20.360 --> 00:27:23.270
Now let's set up our table
view to display our data.

00:27:23.400 --> 00:27:27.300
You want to click down until
your inspector says that it's an

00:27:27.300 --> 00:27:29.720
NSTableView you're inspecting.

00:27:29.760 --> 00:27:32.180
And you want to go to the
attributes part of the inspector,

00:27:32.180 --> 00:27:34.740
which is in the pop-up, the first option.

00:27:34.880 --> 00:27:36.720
And it starts out with
two columns by default.

00:27:36.820 --> 00:27:37.910
So let's add a third column.

00:27:38.060 --> 00:27:41.240
Because we have three pieces of
information we need to display.

00:27:41.370 --> 00:27:46.040
We need to display the recipe name,
the first name for the chef who

00:27:46.290 --> 00:27:49.710
is associated with the recipe,
and the last name for the chef

00:27:49.710 --> 00:27:51.360
who is associated with the recipe.

00:27:51.460 --> 00:27:52.180
So let's go ahead.

00:27:52.180 --> 00:27:52.810
We've got three columns.

00:27:52.900 --> 00:27:57.030
Let's resize them so we can see all
three of them in the table view.

00:28:02.790 --> 00:28:05.460
Let's click on that first column
header and name it "Recipe."

00:28:05.460 --> 00:28:08.700
That's where we'll put the name
of the recipe we're looking at.

00:28:08.700 --> 00:28:13.190
Let's click on the second one
and call it "Chef First Name."

00:28:15.500 --> 00:28:18.770
From the third column,
we will call chef last name.

00:28:18.770 --> 00:28:22.000
Now we need some way for the
table view to tell its data

00:28:22.000 --> 00:28:24.120
source what goes in what column.

00:28:24.120 --> 00:28:27.730
We're going to use the identifier
for a column to do that.

00:28:27.730 --> 00:28:31.980
So select the first column again,
and in the attributes inspector,

00:28:32.070 --> 00:28:33.990
there's an identifier field.

00:28:33.990 --> 00:28:35.160
Just put in name.

00:28:35.160 --> 00:28:38.470
We're going to use the
identifier field as a key path,

00:28:38.470 --> 00:28:42.520
which we're going to call value
for key path on our recipe NSManage

00:28:42.520 --> 00:28:45.350
object to get the name of the recipe.

00:28:45.540 --> 00:28:50.170
For the second one,
we're going to put chef.firstname.

00:28:50.170 --> 00:28:53.200
That's a key path,
which accesses chef and

00:28:53.200 --> 00:28:54.230
then the first name of chef.

00:28:54.230 --> 00:28:57.540
Well, now chef is the name of the
relationship we added to the

00:28:57.620 --> 00:28:59.360
recipe entity in the first step.

00:28:59.360 --> 00:29:02.430
So what that's going to do when
we call value for key path,

00:29:02.490 --> 00:29:06.160
chef.firstname,
is traverse the relationship between

00:29:06.330 --> 00:29:08.780
the recipe entity and the chef entity.

00:29:08.780 --> 00:29:13.070
We're going to, in this application,
fetch all our recipes at the beginning,

00:29:13.080 --> 00:29:15.480
but we're never going to use an NSFetch
request to get the name of the recipe.

00:29:15.540 --> 00:29:17.920
To pull our chefs out of
the persistence stack.

00:29:17.960 --> 00:29:22.240
We don't have to do that because we can
traverse the relationship between the

00:29:22.350 --> 00:29:25.370
recipe and the chef to get at our chefs.

00:29:25.440 --> 00:29:29.820
For our third column,
we're going to call it chef.lastname

00:29:29.890 --> 00:29:30.820
to get at the last name.

00:29:30.820 --> 00:29:34.690
And make sure, if you can't see up here,
we're doing lowercase l for last name,

00:29:34.700 --> 00:29:35.540
uppercase n.

00:29:35.800 --> 00:29:39.000
It's the same naming convention
we used when we were naming our

00:29:39.000 --> 00:29:40.870
attributes in the data modeler.

00:29:41.700 --> 00:29:43.150
That about wraps it up for our Nib.

00:29:43.250 --> 00:29:45.490
So let's go ahead and
close the Nib document.

00:29:45.490 --> 00:29:46.590
And it'll ask us to save.

00:29:46.600 --> 00:29:48.030
We'll go ahead and save.

00:29:48.120 --> 00:29:49.840
And go back to Xcode.

00:29:49.980 --> 00:29:52.750
We're going to open up
Core Recipes Controller.

00:29:52.930 --> 00:29:56.190
Let's open up the header file
and take a brief look at it.

00:29:56.450 --> 00:29:59.850
I should note for this application,
we created a data file that's

00:30:00.030 --> 00:30:01.640
pre-populated with recipes.

00:30:01.640 --> 00:30:04.730
So we're not creating any
recipes in this example.

00:30:04.840 --> 00:30:07.320
And the recipes for this
example are in a store file,

00:30:07.320 --> 00:30:09.070
which is included in the project.

00:30:09.230 --> 00:30:11.190
It's an XML store.

00:30:11.280 --> 00:30:13.270
So in the header file,
you can see this is just

00:30:13.270 --> 00:30:14.690
an NSObject to control it.

00:30:14.720 --> 00:30:16.910
And we're going to
hang on to our context,

00:30:17.060 --> 00:30:20.110
our managed object context,
and our managed object model.

00:30:20.210 --> 00:30:22.320
We also have a mutable array of recipes.

00:30:22.480 --> 00:30:25.600
Well, for this example,
we're going to fetch all our recipes,

00:30:25.740 --> 00:30:29.630
cache them in an array in our object,
and use them to give

00:30:29.630 --> 00:30:31.720
values to our table view.

00:30:32.410 --> 00:30:36.300
So let's go ahead and go over
to the implementation file,

00:30:36.350 --> 00:30:39.330
which is corerecipescontroller.m.

00:30:39.600 --> 00:30:42.150
And from the function pop-up,
you should be able to get

00:30:42.150 --> 00:30:45.580
down to the number of rows in
table view data source method.

00:30:45.580 --> 00:30:47.380
This is one of the two
data source methods.

00:30:47.570 --> 00:30:49.750
And since we're not implementing
all the functionality here,

00:30:50.000 --> 00:30:53.870
if you're doing all the
data source functionality,

00:30:53.940 --> 00:30:56.330
you'd have a lot more methods.

00:30:56.330 --> 00:31:01.740
And you'll find when we jump to bindings
that it'll do a lot of this for us.

00:31:01.740 --> 00:31:01.740
But for now,
we're going to do it with data source.

00:31:01.740 --> 00:31:01.740
Go ahead and uncomment
this block of code.

00:31:03.200 --> 00:31:05.230
And you'll see it checks
and sees if we've already

00:31:05.320 --> 00:31:07.120
populated our recipes array.

00:31:07.120 --> 00:31:10.240
If not, it'll go ahead and populate it,
make sure we have it.

00:31:10.270 --> 00:31:14.070
And it'll get the count of the
number of recipes that we fetched.

00:31:15.300 --> 00:31:18.740
So let's take a look at that populate
recipes method and see what that does.

00:31:18.790 --> 00:31:21.150
Go to the function pop-up again.

00:31:24.320 --> 00:31:30.060
And let's uncomment that
first block of code.

00:31:30.070 --> 00:31:32.250
You'll see this is very
similar to what we did before.

00:31:32.250 --> 00:31:34.180
We get our managed object context.

00:31:34.380 --> 00:31:37.830
And if you look up in the file later,
you'll see that there's the standard

00:31:37.830 --> 00:31:40.700
code to initialize the context
in the managed object model.

00:31:40.720 --> 00:31:44.510
This is something you'll get when you
create a new Cocoa Core Data application

00:31:44.620 --> 00:31:47.140
because it comes in the template.

00:31:47.610 --> 00:31:50.410
We create a fetch request,
just like we did in the last example.

00:31:50.690 --> 00:31:53.320
We set its entity to recipe.

00:31:55.000 --> 00:32:00.100
Let's uncomment the second block of
code in which we execute the fetch,

00:32:00.100 --> 00:32:05.530
get back an array of recipes,
and we cache it in our object controller.

00:32:05.640 --> 00:32:08.500
So let's go to the last
data source method.

00:32:10.520 --> 00:32:19.450
From the function pop-up,
you want table view object

00:32:19.450 --> 00:32:19.450
value for table column row.

00:32:19.450 --> 00:32:19.450
Let's go ahead and uncomment this.

00:32:21.800 --> 00:32:25.850
Here again, we make sure that we
populate our recipes.

00:32:26.010 --> 00:32:29.260
We get the column identifier for
the column we're supplying data for.

00:32:29.260 --> 00:32:32.340
That's what we set up
in Interface Builder.

00:32:32.480 --> 00:32:36.630
We make sure that it's within the
valid-- that the row we're getting

00:32:36.630 --> 00:32:38.230
actually exists as a recipe.

00:32:38.340 --> 00:32:41.430
And finally,
we simply get the recipe managed

00:32:41.430 --> 00:32:44.760
object context back out of
our array with object index.

00:32:44.810 --> 00:32:48.190
And we call value for keypath
passing that column identifier.

00:32:48.350 --> 00:32:52.120
So value for keypath name
to get the recipe's name.

00:32:52.320 --> 00:32:55.830
Value for keypath chef.firstName
to traverse that relationship and

00:32:55.830 --> 00:32:57.580
get the first name of the chef.

00:32:57.680 --> 00:32:59.290
Let's go ahead and build and run this.

00:32:59.460 --> 00:33:01.440
We're going to save as we go.

00:33:07.800 --> 00:33:09.820
For those of you on laptops,
don't worry if you can't

00:33:09.930 --> 00:33:14.340
keep up quite that much,
but you'll see in our table view,

00:33:14.340 --> 00:33:15.800
we've got four recipes.

00:33:15.800 --> 00:33:20.040
This comes out of our store that
we created that's in the bundle.

00:33:20.040 --> 00:33:23.470
And you've got a chef first
name and a chef last name.

00:33:23.660 --> 00:33:26.630
So there, we've accessed data that
we didn't fetch out.

00:33:26.720 --> 00:33:32.060
We just traversed the relationship to
get to that Chef data in our store.

00:33:32.060 --> 00:33:36.200
So let's go ahead and quit this and
add the ability to delete a recipe.

00:33:38.400 --> 00:33:41.520
So there, we've accessed data that
we didn't fetch out.

00:33:41.520 --> 00:33:45.110
We just traversed the relationship to
get to that Chef data in our store.

00:33:49.000 --> 00:33:52.000
Let's go ahead and uncomment this method.

00:33:52.000 --> 00:33:56.380
All this does is it gets the
selected row in the table view,

00:33:56.380 --> 00:34:00.170
gets the recipe that corresponds
to that table row back out of

00:34:00.170 --> 00:34:05.080
our array of Cache recipes,
and it tells the managed object

00:34:05.160 --> 00:34:07.260
context to delete the recipe.

00:34:07.260 --> 00:34:10.000
When you want to delete
an NSManaged object,

00:34:10.000 --> 00:34:13.240
you tell the context to delete it,
and that marks it for deletion.

00:34:13.320 --> 00:34:15.940
At that point,
you shouldn't use that object anymore.

00:34:15.940 --> 00:34:19.970
If you simply release the object, well,
it will go out of memory,

00:34:20.110 --> 00:34:21.380
but it's still persistent.

00:34:21.380 --> 00:34:23.690
It's still in your store,
assuming that you added it

00:34:23.770 --> 00:34:25.260
to a managed object context.

00:34:25.290 --> 00:34:27.500
So to actually delete
the NSManaged object,

00:34:27.500 --> 00:34:31.680
you tell the context to delete it,
and then you save.

00:34:32.600 --> 00:34:34.600
We don't actually save in
this application because we're

00:34:34.600 --> 00:34:37.050
not changing the store file.

00:34:37.200 --> 00:34:41.010
So let's go ahead and build and run,
saving as we go.

00:34:42.960 --> 00:34:44.080
And select a recipe.

00:34:44.190 --> 00:34:47.020
Let's try clam chowder.

00:34:47.020 --> 00:34:48.060
And press the delete button.

00:34:48.170 --> 00:34:50.190
You see it goes away.

00:34:50.740 --> 00:34:53.600
Now here,
there was one chef that had two recipes.

00:34:53.600 --> 00:34:54.980
We deleted one of them.

00:34:55.100 --> 00:34:58.010
What Core Data did,
since we set the chef relationship

00:34:58.010 --> 00:35:01.010
and the recipes relationship
as inverse of each other,

00:35:01.150 --> 00:35:04.300
was automatically maintain
that relationship for us.

00:35:04.300 --> 00:35:08.740
Previously, the chef had the recipes
relationship pointing to two recipes.

00:35:08.740 --> 00:35:10.510
Well, we deleted one of them.

00:35:10.510 --> 00:35:13.150
But instead of leaving
the chef's relationship

00:35:13.150 --> 00:35:16.210
pointing to a deleted recipe,
Core Data went through that

00:35:16.540 --> 00:35:20.680
relationship to the inverse and
told the chef to remove the recipe.

00:35:20.700 --> 00:35:23.220
And the chef removed that
deleted recipe out of its set

00:35:23.440 --> 00:35:24.910
of recipes it was related to.

00:35:25.020 --> 00:35:26.690
That's automatic
relationship maintenance.

00:35:26.690 --> 00:35:29.630
The reason it just
removed it from that set,

00:35:29.630 --> 00:35:32.810
nullifying the relationship,
is because the delete rule

00:35:32.810 --> 00:35:34.120
we had set was nullify.

00:35:34.120 --> 00:35:36.630
So let's quit this and go to
our data model and see where

00:35:36.630 --> 00:35:37.960
we set that delete rule.

00:35:40.900 --> 00:35:47.190
Now if you click on the
Chef relationship in Recipe,

00:35:47.350 --> 00:35:49.470
In the upper right,
you'll see it says Delete Rule,

00:35:49.470 --> 00:35:50.990
and it's set to nullify.

00:35:51.080 --> 00:35:55.810
So that means when you delete me,
nullify the relationship on the other

00:35:55.810 --> 00:35:58.880
side of anything that's related to me,
so they're not pointing

00:35:58.880 --> 00:36:00.220
at a garbage object.

00:36:00.460 --> 00:36:03.000
Well, what if we wanted,
when we deleted a recipe,

00:36:03.040 --> 00:36:05.940
for it to delete the
associated chef as well?

00:36:05.970 --> 00:36:08.280
Let's change that delete rule to cascade.

00:36:08.400 --> 00:36:14.470
And let's go ahead and build and run.

00:36:18.410 --> 00:36:22.740
Now select Clam Chowder and
press the Delete button.

00:36:22.830 --> 00:36:25.590
And you see that Lily Benthen,
the chef of Clam Chowder,

00:36:25.650 --> 00:36:28.380
who is also the chef of
Pan-Seared Swordfish,

00:36:28.380 --> 00:36:31.640
has been deleted and disappears
out of Pan-Seared Swordfish.

00:36:31.760 --> 00:36:33.840
Well, when she was deleted,
why did she disappear

00:36:33.840 --> 00:36:35.250
from Pan-Seared Swordfish?

00:36:35.360 --> 00:36:39.930
Because her recipes relationship
also has a nullified delete rule.

00:36:40.100 --> 00:36:44.640
And so the cascade delete rule on our
recipe deleted the associated Chef.

00:36:44.640 --> 00:36:47.260
The nullify delete rule on
the Chef nullified it back

00:36:47.380 --> 00:36:51.640
on the last remaining recipe
that was related to that Chef.

00:36:52.570 --> 00:36:55.260
So let's go ahead and quit this.

00:36:55.260 --> 00:36:57.300
We have those two columns,
firstName and lastName.

00:36:57.300 --> 00:36:58.970
Well,
wouldn't it be better to display the

00:36:59.170 --> 00:37:03.580
full name of the Chef in one column
instead of having two extraneous columns?

00:37:03.580 --> 00:37:06.170
We don't have a full name
attribute on the Chef,

00:37:06.170 --> 00:37:09.640
and if we added one,
that would be redundant information.

00:37:09.640 --> 00:37:12.410
We wouldn't have to keep the full
name in sync with both the first

00:37:12.410 --> 00:37:14.660
name and the last name attributes.

00:37:14.660 --> 00:37:19.010
So instead,
we're going to create a new accessor

00:37:19.060 --> 00:37:25.880
on that ManageObject that specifies
a derived attribute of full name.

00:37:25.880 --> 00:37:28.620
So to start out, open that data model up.

00:37:32.900 --> 00:37:34.740
We'll click on Chef.

00:37:34.740 --> 00:37:38.340
We're currently using a base
NSManageObject for this chef.

00:37:38.380 --> 00:37:42.770
We really want to use our own new class,
a Chef, which is going to inherit

00:37:42.770 --> 00:37:44.030
from NSManageObject.

00:37:44.110 --> 00:37:46.420
So when you select Chef,
you'll see that the class

00:37:46.420 --> 00:37:47.840
is set to NSManageObject.

00:37:47.880 --> 00:37:52.510
We're going to change that
to Chef with a capital C.

00:37:54.800 --> 00:37:58.560
Let's save this data model and close it.

00:37:58.590 --> 00:38:01.060
And let's go to the File menu,
say New File.

00:38:01.100 --> 00:38:04.330
We're going to create a
new Objective-C class.

00:38:06.210 --> 00:38:09.460
Under Cocoa,
you'll see the Objective-C class type.

00:38:09.540 --> 00:38:11.830
Choose that and hit Next.

00:38:12.130 --> 00:38:15.310
And we're going to name this Chef.m.

00:38:15.310 --> 00:38:17.340
This is our Chef class.

00:38:21.140 --> 00:38:24.260
Now you see, when it comes up,
it inherits from NSObject.

00:38:24.270 --> 00:38:27.610
NSManageObject is the
root object of our models.

00:38:27.820 --> 00:38:32.200
So we're going to change this to
NSManageObject to inherit from.

00:38:32.210 --> 00:38:35.720
This is a custom NSManageObject subclass.

00:38:35.730 --> 00:38:37.640
Right now, it doesn't provide any
new custom behavior,

00:38:37.740 --> 00:38:40.490
so let's add that full name method.

00:38:41.550 --> 00:38:45.130
So you're going to just use
standard obc method declaration

00:38:45.210 --> 00:38:47.680
syntax to add NSString full name.

00:38:47.820 --> 00:38:55.320
Let's go over to the implementation file,
chef.m.

00:38:58.800 --> 00:39:03.170
had that same method declaration,
but we're going to put the

00:39:03.170 --> 00:39:05.390
implementation here instead.

00:39:06.390 --> 00:39:07.440
This is a very simple method.

00:39:07.500 --> 00:39:09.550
We really just need to
concatenate the first name and

00:39:09.550 --> 00:39:12.000
the last name and return that.

00:39:12.130 --> 00:39:14.290
So we're going to return

00:39:15.310 --> 00:39:17.930
We're going to use the
in a string class method,

00:39:18.080 --> 00:39:20.510
string with format.

00:39:21.800 --> 00:39:27.720
We provide a format string
that has two objects,

00:39:27.720 --> 00:39:31.840
so %at%at for our format string,

00:39:32.130 --> 00:39:34.560
Now for the first object,
we're going to want the first name.

00:39:34.560 --> 00:39:40.140
So we send a message to self,
value for key, first name.

00:39:40.170 --> 00:39:43.740
That's how we get the first
name out of the NSManage object.

00:39:44.260 --> 00:39:47.860
and finally,
self-value-for-key-lastname to provide

00:39:47.910 --> 00:39:51.070
the second half of that format string.

00:39:51.080 --> 00:39:54.000
I'm going to close that method,
put a semi on it.

00:39:54.010 --> 00:39:55.840
Let's build and run.

00:40:02.200 --> 00:40:04.100
One more thing we have to do.

00:40:04.100 --> 00:40:07.430
So let's quit this and
actually use that method.

00:40:07.440 --> 00:40:08.820
We're not using it yet.

00:40:08.890 --> 00:40:12.180
So close this file and
open up the nib file again.

00:40:17.090 --> 00:40:20.010
So we have two columns,
and they're using chef.firstname,

00:40:20.010 --> 00:40:21.000
chef.lastname.

00:40:21.020 --> 00:40:22.520
Let's select the table view.

00:40:22.710 --> 00:40:24.850
In the Attributes Inspector,
let's change columns back

00:40:24.960 --> 00:40:27.430
to two instead of three.

00:40:28.660 --> 00:40:33.550
And we may want to rearrange the columns
up there so it looks nice and neat.

00:40:33.630 --> 00:40:37.760
And let's rename that Chef first
name column to just Chef.

00:40:37.810 --> 00:40:40.950
Because we're going to put the full
name of the chef in that column.

00:40:42.050 --> 00:40:44.680
For the identifier,
instead of saying Chef.FirstName,

00:40:44.680 --> 00:40:47.310
we'll say Chef.FullName.

00:40:48.030 --> 00:40:51.800
So now, when we call value for key,
it's going to traverse the

00:40:51.800 --> 00:40:55.980
Chef relationship and then call
value for key full name on the Chef,

00:40:56.130 --> 00:41:00.340
which will invoke that full name accessor
we added through key value coding,

00:41:00.380 --> 00:41:04.300
get back the full name by concatenating
the first name and the last name,

00:41:04.380 --> 00:41:05.310
and returning it.

00:41:05.460 --> 00:41:09.090
So let's close this nib, saving as we go.

00:41:09.220 --> 00:41:13.300
And let's build and run
and see if it works now.

00:41:13.440 --> 00:41:14.560
There we go.

00:41:14.560 --> 00:41:17.720
A recipe column and a Chef column.

00:41:19.940 --> 00:41:21.380
Now note that's a derived attribute.

00:41:21.630 --> 00:41:23.450
When you get into bindings,
you'll see you want to set

00:41:23.550 --> 00:41:26.660
that as a dependent key,
that the full name is dependent on

00:41:26.710 --> 00:41:28.000
the first name and the last name.

00:41:28.000 --> 00:41:29.730
And if you go to the
binding sessions later,

00:41:29.760 --> 00:41:32.160
you should see how to do that
or drop in the Core Data Labs.

00:41:32.270 --> 00:41:38.990
Since this isn't a bindings application,
we didn't have to do that.

00:41:38.990 --> 00:41:38.990
So let's go ahead and quit,
and let's switch back to our slides.

00:41:42.580 --> 00:41:44.340
So what did we just do?

00:41:44.410 --> 00:41:48.450
We populated an NS table view with
data we pulled out of our Manage

00:41:48.450 --> 00:41:50.760
Objects using value for Keypath.

00:41:50.790 --> 00:41:54.160
We demonstrated how to
traverse a relationship between

00:41:54.160 --> 00:41:56.160
our recipes and our chefs.

00:41:56.160 --> 00:41:58.700
And you don't have to fetch
everything out of the stack.

00:41:58.720 --> 00:42:01.010
You really just need to fetch
something that you can use to

00:42:01.090 --> 00:42:04.440
traverse relationships to get
at your other objects from.

00:42:04.500 --> 00:42:07.080
We created a custom
NS Manage Objects subclass.

00:42:07.080 --> 00:42:08.620
This was a fairly simple one.

00:42:08.780 --> 00:42:12.280
You can create your own much more complex
ones with your own business logic,

00:42:12.280 --> 00:42:15.120
customizing your model classes.

00:42:15.140 --> 00:42:19.340
We demonstrated the nullify
and the delete cascade rules.

00:42:19.360 --> 00:42:22.440
And there's one more thing,
a custom data formatter.

00:42:22.440 --> 00:42:25.850
Let's jump back to hands-on
real quick and show that.

00:42:29.700 --> 00:42:31.600
Can we see our hands on again, please?

00:42:31.600 --> 00:42:37.880
So say you wanted to display
some information about an

00:42:37.880 --> 00:42:40.790
NSManage object in the debugger.

00:42:42.330 --> 00:42:45.260
Let's go ahead and put a break
point in the delete recipes method.

00:42:45.310 --> 00:42:47.090
If you're following along,
I wouldn't try and follow

00:42:47.090 --> 00:42:47.950
along for this part.

00:42:48.010 --> 00:42:50.760
We're going to go pretty quickly,
type in some obscure syntax.

00:42:50.800 --> 00:42:53.420
To learn about custom data
formatters on your own,

00:42:53.500 --> 00:42:55.410
I would look in the Xcode user manual.

00:42:55.680 --> 00:43:00.550
We're just going to give
you a quick demo of this.

00:43:00.550 --> 00:43:07.700
So go ahead and put a break point on
self-managed object delete object.

00:43:08.010 --> 00:43:11.350
Let's close this file
and build and debug.

00:43:20.860 --> 00:43:22.640
So go ahead and delete
one of those recipes.

00:43:22.640 --> 00:43:28.260
Here we're stopped in Xcode's debugger.

00:43:28.310 --> 00:43:30.270
It uses GDB.

00:43:30.430 --> 00:43:32.660
And you can see in the upper
right-hand pane where it

00:43:32.800 --> 00:43:36.280
lists the visible variables,
we have recipe to delete,

00:43:36.380 --> 00:43:38.400
which is our NSManage object.

00:43:38.420 --> 00:43:42.170
But it doesn't display anything
very useful about that.

00:43:42.490 --> 00:43:44.910
Say we wanted to display some
useful information in the summary

00:43:45.010 --> 00:43:47.070
column about our NSManage object.

00:43:47.220 --> 00:43:50.120
We're going to use a custom
data formatter to do this.

00:43:50.210 --> 00:43:52.700
So double click in the summary column.

00:43:53.410 --> 00:43:54.760
This syntax is a little obscure.

00:43:54.760 --> 00:43:56.940
You can look it up in
the Xcode user manual.

00:43:57.090 --> 00:44:02.190
What we're going to say is curly brace,
then paren ns_string*paren

00:44:02.360 --> 00:44:04.560
to return an NSString.

00:44:05.030 --> 00:44:11.330
Square bracket, square bracket,
$var in uppercase is essentially

00:44:11.330 --> 00:44:13.560
self in a custom data formatter.

00:44:13.620 --> 00:44:18.920
So we're going to send this variable,
message entity, to get its entity.

00:44:19.090 --> 00:44:20.730
Close square bracket,
and we're going to send

00:44:20.730 --> 00:44:24.440
that entity description,
the method name, to return its name.

00:44:24.440 --> 00:44:26.600
Close square bracket, close curly brace.

00:44:26.600 --> 00:44:28.920
Finally,
I'm going to stick a colon S on the

00:44:29.000 --> 00:44:34.010
end to tell it to display the summary
of the object that this returns,

00:44:34.010 --> 00:44:36.740
which sends it the description method.

00:44:36.740 --> 00:44:38.860
Let's go ahead and hit Return.

00:44:38.860 --> 00:44:41.210
You can see now,
instead of displaying no real useful

00:44:41.210 --> 00:44:44.990
information about our NSManage object,
it tells us that it's a

00:44:44.990 --> 00:44:47.500
recipe NSManage object.

00:44:47.500 --> 00:44:50.390
If we had a custom subclass,
we could call value for key,

00:44:50.500 --> 00:44:52.700
print some information
about that managed object.

00:44:52.700 --> 00:44:54.540
It can be very useful
when you're debugging.

00:44:54.560 --> 00:44:57.360
You can also open up the console
and look at it that way as well.

00:44:57.590 --> 00:44:59.610
Let's go back to our slides.

00:45:03.250 --> 00:45:07.360
So finally, our last step,
we created a custom data formatter.

00:45:07.440 --> 00:45:11.160
So let's see what happens when you put
Core Data together with Cocoa Bindings.

00:45:11.190 --> 00:45:12.700
Chris is going to walk us through this.

00:45:14.800 --> 00:45:17.270
Thanks, Rick.

00:45:19.480 --> 00:45:20.700
Cocoa is great.

00:45:20.760 --> 00:45:26.110
That's not a lot of work to
hook your data up to a table.

00:45:27.320 --> 00:45:32.440
With Cocoa bindings,
you can do even more with even less work.

00:45:32.550 --> 00:45:36.060
So what we're going to show you is
how to connect your prototype data

00:45:36.060 --> 00:45:39.560
model up to a prototype interface,
the kind of interface that you

00:45:39.560 --> 00:45:42.680
might get from a human interface
designer that you've hired,

00:45:42.790 --> 00:45:45.160
or that you might have just
thrown together yourself while

00:45:45.160 --> 00:45:47.340
trying to design your application.

00:45:47.450 --> 00:45:50.610
Then we're going to show you how to
hook your single window application

00:45:50.610 --> 00:45:53.760
into Core Data's provided undo handling.

00:45:53.930 --> 00:45:59.460
Core Data actually provides full undo
support across your managed object graph.

00:45:59.590 --> 00:46:02.520
That's part of why we
call them managed objects.

00:46:02.690 --> 00:46:08.720
However, in a single window application,
you need to actually tell the window

00:46:08.860 --> 00:46:11.560
to use Core Data's undo manager.

00:46:11.710 --> 00:46:14.890
And finally,
we're going to iteratively add a

00:46:14.890 --> 00:46:17.800
couple features to our application.

00:46:17.940 --> 00:46:20.120
So let's go hands-on.

00:46:23.210 --> 00:46:25.560
We're going to open-- excuse me.

00:46:25.890 --> 00:46:32.100
We're going to open example four,
Core Recipes Cocoa Bindings Begin.

00:46:32.110 --> 00:46:34.100
Excuse me here.

00:46:36.820 --> 00:46:39.950
Let's just open up our nib file.

00:46:40.020 --> 00:46:41.860
On our demo machine,
we'll probably have to do this by

00:46:41.860 --> 00:46:45.840
navigating the Open File dialog
in Interface Builder.

00:46:45.860 --> 00:46:49.260
We're most of the way there already.

00:46:49.310 --> 00:46:51.900
Fortunately,
we put this stuff on our desktop.

00:46:54.240 --> 00:46:58.640
And we can see that we already
have an interface set up.

00:46:58.750 --> 00:47:02.060
However, it's not actually wired
up to our data model yet.

00:47:02.140 --> 00:47:04.860
So what we're going to do is
take advantage of some of the

00:47:04.860 --> 00:47:09.960
new features in Interface Builder
in Tiger and in our data model.

00:47:10.110 --> 00:47:14.960
So let's switch to Xcode
and bring up our data model.

00:47:17.240 --> 00:47:21.400
And let's drag that a little bit to
the right so that we'll be able to see

00:47:21.400 --> 00:47:26.220
both our Interface Builder document
and our data model at the same time,

00:47:26.390 --> 00:47:28.170
specifically the diagram view.

00:47:28.400 --> 00:47:33.080
Now, you've all probably seen the demo
where you drag-- you option drag--

00:47:33.100 --> 00:47:39.040
an entity from your data model into
an Interface Builder design window

00:47:39.450 --> 00:47:41.140
and generate an interface for it.

00:47:41.200 --> 00:47:45.790
But you can also drag directly
to an Interface Builder document

00:47:45.800 --> 00:47:47.730
window and create a controller.

00:47:48.050 --> 00:47:51.560
This is great if you don't actually
want to use the default interface,

00:47:51.620 --> 00:47:56.190
but you do want a controller set up
already with all of the appropriate

00:47:56.190 --> 00:47:59.490
keys for your managed object entity.

00:48:00.720 --> 00:48:04.250
So the first thing we're going to do,
since our interface shows

00:48:04.620 --> 00:48:08.980
recipes and ingredients,
is option drag our recipe entity

00:48:08.980 --> 00:48:12.500
into our Interface Builder document.

00:48:12.980 --> 00:48:16.420
Interface Builder will pop to the
front and ask us if we want to create

00:48:16.490 --> 00:48:18.780
a controller for one or many objects.

00:48:18.890 --> 00:48:21.730
Since we're going to be
controlling a table view,

00:48:22.090 --> 00:48:25.490
We're going to tell it that we
want a controller for many objects.

00:48:25.740 --> 00:48:28.320
This will create an NSArrayController.

00:48:28.370 --> 00:48:30.620
You can see that we have
a recipe array controller,

00:48:30.680 --> 00:48:32.940
and if you inspect it--

00:48:34.920 --> 00:48:41.800
You can see that it's already configured
to control an entity instead of a class.

00:48:41.810 --> 00:48:44.330
The entity's name is recipe.

00:48:44.530 --> 00:48:48.020
And it's set to automatically
prepare its content.

00:48:48.070 --> 00:48:52.060
That means that the first thing
it will do is it'll just fetch all

00:48:52.060 --> 00:48:54.380
of the instances of that entity.

00:48:56.480 --> 00:48:58.750
Now let's actually set up the table.

00:48:58.930 --> 00:49:03.480
So double-click the Recipe table
at the left of the Design window.

00:49:03.530 --> 00:49:05.480
That'll select the table view itself.

00:49:05.530 --> 00:49:08.000
Now click on the Recipe column.

00:49:08.050 --> 00:49:10.700
When we're working with bindings,
we generally don't bind

00:49:10.700 --> 00:49:12.780
to the table itself,
although there are some

00:49:12.780 --> 00:49:14.040
bindings on the table.

00:49:14.140 --> 00:49:17.080
Most of the time, though,
we'll be binding values

00:49:17.250 --> 00:49:19.900
on the table column.

00:49:20.030 --> 00:49:23.160
So switch over to our Inspector and
bring up the Bindings pane.

00:49:26.400 --> 00:49:29.990
and pull down the value.

00:49:33.490 --> 00:49:37.960
Yeah,
might want to not zoom quite so much.

00:49:38.010 --> 00:49:41.920
You can see that it's already set to
bind to our recipe array controller.

00:49:41.980 --> 00:49:44.480
And we'll definitely want to
bind to the arranged objects

00:49:44.770 --> 00:49:46.880
key of our array controller.

00:49:46.940 --> 00:49:51.110
This is the sorted collection
of objects that were fetched.

00:49:51.220 --> 00:49:53.340
And we'll want to use the model key path.

00:49:53.390 --> 00:49:56.550
If you pop down the
model key path combo box,

00:49:56.620 --> 00:49:59.890
we'll want to use a
model key path of name.

00:50:00.670 --> 00:50:05.360
You can see all of the keys for the
recipe entity in that model key path

00:50:05.360 --> 00:50:09.730
combo box because we dragged our
entity over from Interface Builder and

00:50:09.870 --> 00:50:12.400
told Interface Builder all about it.

00:50:14.080 --> 00:50:16.970
Next, let's set up our ingredients table.

00:50:17.270 --> 00:50:20.990
Let's go back to our data model
again and scroll a little bit to

00:50:20.990 --> 00:50:23.010
the right and do the same thing.

00:50:23.150 --> 00:50:28.800
We can just option drag directly to
the Interface Builder document and

00:50:28.910 --> 00:50:31.590
create a controller for many objects.

00:50:33.810 --> 00:50:37.130
Inspecting our Ingredients
Array Controller,

00:50:37.130 --> 00:50:41.510
we can see that, again,
its managed object context

00:50:41.660 --> 00:50:44.070
is pre-bound for us.

00:50:44.160 --> 00:50:48.800
We can also go to the
Attributes Inspector.

00:50:50.230 --> 00:50:53.800
and see that it's configured to
be an entity array controller

00:50:54.330 --> 00:50:56.600
for the entity named Ingredient.

00:50:56.790 --> 00:50:59.310
Now, if we go back to our bindings,

00:51:01.570 --> 00:51:06.030
We can see that only the
managed object context is set.

00:51:06.110 --> 00:51:11.540
What this means is that this controller,
since it automatically prepares content,

00:51:11.590 --> 00:51:14.650
will immediately try to
fetch all of our ingredients.

00:51:14.790 --> 00:51:18.000
Since our interface is kind
of a master detail interface,

00:51:18.050 --> 00:51:20.160
we don't necessarily want that.

00:51:20.210 --> 00:51:23.320
Instead,
we want to be able to select a recipe

00:51:23.820 --> 00:51:27.640
In the first column,
and then in the ingredients table,

00:51:27.690 --> 00:51:30.100
see only the ingredients for that recipe.

00:51:30.270 --> 00:51:34.250
So what we can do is we can bind
the content set binding of our

00:51:34.250 --> 00:51:36.490
ingredient array controller.

00:51:37.230 --> 00:51:39.440
So pop that down.

00:51:39.510 --> 00:51:44.310
And we can use the
recipe array controller

00:51:44.820 --> 00:51:48.210
Actually, no, we do want to use the
Ingredient Array Controller.

00:51:48.400 --> 00:51:49.460
Sorry.

00:51:49.600 --> 00:51:52.540
No, we want to use the
Recipe Array Controller.

00:51:52.720 --> 00:51:54.800
Getting myself confused here.

00:51:54.950 --> 00:51:58.360
We'll want to use the Selection
Controller key because this

00:51:58.360 --> 00:52:03.130
represents the actual selected
objects in the Recipes table.

00:52:03.400 --> 00:52:09.500
And we'll want to use a model
key path of ingredients.

00:52:09.600 --> 00:52:13.920
This is a too many relationship key,
but it's still a key.

00:52:16.250 --> 00:52:17.130
So let's close this up.

00:52:17.280 --> 00:52:21.570
Close the content set.

00:52:21.580 --> 00:52:23.360
I'm sorry.

00:52:23.600 --> 00:52:26.740
And now we need to actually set
up the bindings on the individual

00:52:26.740 --> 00:52:29.250
columns in the Ingredients table.

00:52:29.500 --> 00:52:32.790
So just like the last table,
we can double-click the table view

00:52:33.100 --> 00:52:35.990
and then click the ingredient column.

00:52:37.850 --> 00:52:41.700
And pop down the value binding.

00:52:41.750 --> 00:52:44.900
And bind to the Ingredient
Array Controller.

00:52:49.340 --> 00:52:55.790
and use the controller key arranged
objects and the model key path of name.

00:52:58.000 --> 00:53:02.900
Now, just highlight the amount column.

00:53:02.990 --> 00:53:07.060
You can see that we're now
inspecting the amount column,

00:53:07.090 --> 00:53:09.620
and our bindings inspector
has barely changed.

00:53:10.490 --> 00:53:14.800
Obviously, this isn't bound yet,
so our bind checkbox isn't checked,

00:53:14.800 --> 00:53:19.780
and our model keypath isn't filled in,
but our bind to pop-up is

00:53:20.080 --> 00:53:26.730
still set to what it was the
last time we used this pane.

00:53:27.970 --> 00:53:32.190
This is sort of a shortcut that makes it
very easy to successively set bindings

00:53:32.190 --> 00:53:35.500
on various controls in your window.

00:53:35.650 --> 00:53:42.120
So now we can just pull down the
model keypath and choose amount.

00:53:43.250 --> 00:53:48.650
And we can do the same thing for
the Measure column and choose

00:53:48.780 --> 00:53:51.190
the model key path of Measure.

00:53:54.300 --> 00:53:58.340
Finally, we have a big text view at
the bottom of this window.

00:53:58.380 --> 00:54:01.800
This is where the selected recipe
is going to show its ingredients.

00:54:01.800 --> 00:54:04.020
So let's double click this.

00:54:04.020 --> 00:54:05.920
And that will let us
inspect the text view.

00:54:05.920 --> 00:54:08.790
You want to make sure that
you're inspecting the text view

00:54:09.020 --> 00:54:10.700
and not the scroll view itself.

00:54:10.700 --> 00:54:15.250
And you see that we have several
value bindings on the text view.

00:54:15.300 --> 00:54:17.560
What we're going to bind
to is the data binding,

00:54:17.840 --> 00:54:24.020
because this text view is actually
going to let us put in styled text.

00:54:24.020 --> 00:54:27.920
So we're going to pop
down the data binding.

00:54:27.920 --> 00:54:30.830
We're going to use the recipe
array controller with the

00:54:30.830 --> 00:54:32.500
selection controller key.

00:54:33.750 --> 00:54:38.540
And we're going to use a
model key path of directions.

00:54:38.610 --> 00:54:42.980
If you were to look at this in the model,
you would see that the actual attribute

00:54:43.060 --> 00:54:50.980
type of the directions attribute on
the Recipe entity is binary data.

00:54:51.020 --> 00:54:55.930
But we're binding this to a text view,
so what we're going to need to

00:54:56.220 --> 00:54:58.910
do is add a value transformer.

00:55:02.530 --> 00:55:05.440
And just pop that down and
use NSUN Archive from Data.

00:55:05.500 --> 00:55:11.340
And this way,
we can maintain the fidelity of the data

00:55:11.420 --> 00:55:16.570
as we push it back and forth between
the model object and our bindings.

00:55:19.450 --> 00:55:21.400
So we only need to do
a couple more things.

00:55:21.420 --> 00:55:24.900
We need to set up our
add and remove buttons.

00:55:24.950 --> 00:55:27.900
For this,
we're just going to use target action.

00:55:28.040 --> 00:55:33.390
So highlight the Add button under our
recipes table and Control-drag from

00:55:33.390 --> 00:55:35.590
it to the recipe array controller.

00:55:35.760 --> 00:55:40.070
An Interface Builder will helpfully
switch to the target action subpane

00:55:40.170 --> 00:55:43.310
of the Connections Inspector.

00:55:44.600 --> 00:55:47.340
And let's just choose Add.

00:55:47.460 --> 00:55:48.940
Connect that up.

00:55:49.050 --> 00:55:51.840
And now,
Control-drag from the Remove button right

00:55:51.840 --> 00:55:54.200
next to it to the REST PRA controller.

00:55:54.280 --> 00:55:56.640
And you can see the Interface
Builder automatically

00:55:56.640 --> 00:55:58.110
highlights the Remove method.

00:55:58.300 --> 00:56:01.220
It tries to help you,
and it tries to derive what

00:56:01.220 --> 00:56:03.660
to do from what you're doing.

00:56:03.790 --> 00:56:06.130
So let's just connect that up.

00:56:06.850 --> 00:56:10.300
and do the same thing under
the Ingredients table.

00:56:10.360 --> 00:56:12.130
This time,
we're going to Control-drag from the

00:56:12.130 --> 00:56:18.510
Add button to the Ingredient Array
Controller and choose its Add method.

00:56:19.630 --> 00:56:23.850
and from the ingredient tables
remove button to the ingredient array

00:56:24.980 --> 00:56:27.270
controller connecting to remove.

00:56:29.730 --> 00:56:32.240
We now have our interface wired up.

00:56:32.290 --> 00:56:35.130
Let's save this Interface
Builder document.

00:56:37.150 --> 00:56:42.140
and go back to our application.

00:56:42.170 --> 00:56:44.580
Now we can just build and go.

00:56:49.520 --> 00:56:53.260
And we have no data at first,
so our application doesn't show anything.

00:56:53.370 --> 00:56:58.070
But because we have Core Data managing
our object graph and we have

00:56:58.230 --> 00:57:02.380
bindings managing our interface,
we can actually start

00:57:02.380 --> 00:57:04.470
using our application.

00:57:04.820 --> 00:57:07.790
So let's click the
Add button under Recipes,

00:57:07.790 --> 00:57:09.210
and we can add a recipe.

00:57:09.460 --> 00:57:11.340
Let's add another recipe too.

00:57:11.380 --> 00:57:15.000
And let's just call the
first one Apple Pie.

00:57:16.800 --> 00:57:19.140
and the second one, Chocolate Cake.

00:57:19.170 --> 00:57:22.830
I'm in kind of a dessert
mood this morning.

00:57:22.960 --> 00:57:28.090
So let's highlight Apple Pie and
add an ingredient to it.

00:57:28.650 --> 00:57:34.440
And you can see that we added a new
managed object which can have a default

00:57:34.440 --> 00:57:36.900
value for each of its attributes.

00:57:37.020 --> 00:57:39.480
So the default value for
the name attribute of an

00:57:39.480 --> 00:57:43.440
ingredient is new Ingredient,
and the default value for the

00:57:43.700 --> 00:57:46.090
amount of an ingredient is 1.

00:57:47.180 --> 00:57:50.920
So let's just add some apples here,
since that's the main

00:57:51.000 --> 00:57:53.340
component of Apple Pie.

00:57:53.340 --> 00:57:55.500
And Rick can pick the amount.

00:57:55.500 --> 00:57:57.910
He's the chef.

00:57:57.930 --> 00:58:01.690
And for our measures,
we can just say apple.

00:58:03.900 --> 00:58:06.380
And of course, we need more than just
apples and apple pie.

00:58:06.380 --> 00:58:07.840
We also need some pie crust.

00:58:07.920 --> 00:58:10.390
Can buy that stuff ready-made, I guess.

00:58:13.080 --> 00:58:15.340
And let's just,
let's use two because it's kind of

00:58:15.340 --> 00:58:18.050
nice to have the strips layered on top.

00:58:19.360 --> 00:58:23.240
And we're just going to use
Crust for the ingredients.

00:58:23.430 --> 00:58:26.180
Now let's exercise our
Remove button here.

00:58:26.400 --> 00:58:28.240
Let's highlight the
chocolate cake recipe,

00:58:28.240 --> 00:58:29.780
since we're not going
to fill that in yet,

00:58:29.850 --> 00:58:31.760
and click Remove.

00:58:31.850 --> 00:58:34.230
And quit our application.

00:58:36.300 --> 00:58:40.360
And we're just going to use
Crust for the ingredients.

00:58:40.360 --> 00:58:43.350
Now let's exercise our
Remove button here.

00:58:43.360 --> 00:58:45.240
Let's highlight the
chocolate cake recipe,

00:58:45.240 --> 00:58:46.790
since we're not going
to fill that in yet,

00:58:46.800 --> 00:58:48.760
and click Remove.

00:58:51.120 --> 00:58:56.540
A lot of users, though-- well, actually,
I'll hold off on that.

00:58:56.590 --> 00:59:00.720
Let's actually change the
pie crust to just say crust.

00:59:03.360 --> 00:59:04.750
Now let's try to undo this.

00:59:04.880 --> 00:59:09.180
So go up to the Edit menu,
and Undo isn't highlighted.

00:59:09.610 --> 00:59:12.120
Well, this is because we made a
small change to the template

00:59:12.680 --> 00:59:14.630
for purposes of illustration.

00:59:14.780 --> 00:59:17.050
We can quit the application.

00:59:18.680 --> 00:59:24.480
and go back to Xcode and open
up corerecipescontroller.m.

00:59:25.350 --> 00:59:28.940
Now, if you're building a
document-based application,

00:59:29.020 --> 00:59:38.960
the persistent document machinery handles
hooking up your Managed Object Context's

00:59:39.270 --> 00:59:42.670
Undo Manager to your window.

00:59:42.890 --> 00:59:46.700
And our application template
allows you to do that too,

00:59:46.700 --> 00:59:50.300
but if you're building your own
application and you're creating

00:59:50.300 --> 00:59:53.980
your windows on your own,
you'll need to know how to do this.

00:59:54.310 --> 01:00:00.040
Basically, a window gets asked for
an undo controller to use.

01:00:00.160 --> 01:00:03.890
So since we're using Core Data,
we want to provide that window with our

01:00:04.230 --> 01:00:07.760
managed object context undo manager.

01:00:07.940 --> 01:00:12.070
So we do that by making our
object the windows delegate,

01:00:12.090 --> 01:00:15.200
which we've already done for
you in Interface Builder.

01:00:15.340 --> 01:00:18.120
And then we fill in the
window delegate method.

01:00:18.230 --> 01:00:21.190
Window will return undo manager.

01:00:21.490 --> 01:00:24.860
So we just have a single line of code
commented out here for you that gets

01:00:25.020 --> 01:00:29.560
the undo manager from our managed
object context and then returns

01:00:29.600 --> 01:00:32.910
it as the Windows undo manager.

01:00:33.100 --> 01:00:35.470
So if we build and run again,

01:00:38.280 --> 01:00:41.100
We can see that our change was saved.

01:00:41.130 --> 01:00:44.210
Now let's change that back to Pycrust.

01:00:46.600 --> 01:00:47.890
and Undo.

01:00:48.560 --> 01:00:52.580
We can see the Undo is highlighted,
so we can undo that change,

01:00:52.580 --> 01:00:58.200
and we can even redo that change,
because now the Windows Undo Manager and

01:00:58.200 --> 01:01:02.860
our Managed Object Context Undo Manager,
which is managing the object graph Undos,

01:01:02.870 --> 01:01:04.930
are one and the same.

01:01:05.360 --> 01:01:08.960
So we can even undo and redo
adding and removing objects.

01:01:09.120 --> 01:01:13.900
So let's add a new ingredient,
and let's undo that.

01:01:17.940 --> 01:01:23.800
Core Data provides you with
automatic undo and redo support.

01:01:23.890 --> 01:01:27.710
So we save on quit,
but a lot of users like the

01:01:27.710 --> 01:01:31.060
security of also being able
to save whenever they want.

01:01:31.060 --> 01:01:34.000
After all,
sometimes you have power outages.

01:01:34.000 --> 01:01:38.760
Sometimes your applications crash,
especially during development.

01:01:39.620 --> 01:01:44.880
And if you look at the File menu,
we actually have an active Save menu.

01:01:44.880 --> 01:01:46.840
However, it's not actually wired up.

01:01:46.870 --> 01:01:49.380
It'll look like it's wired up,
but it's not actually

01:01:49.380 --> 01:01:50.690
going to do anything.

01:01:51.570 --> 01:01:56.840
So let's quit the application
and make that work.

01:01:56.840 --> 01:02:03.590
Well, I've already done the work in our
sample of wiring it to the Save Action.

01:02:04.730 --> 01:02:11.000
In our controller class,
but we haven't actually saved.

01:02:11.150 --> 01:02:14.130
So let's uncomment that comment block.

01:02:16.140 --> 01:02:19.130
And you can see that all we're
doing is asking our managed object

01:02:19.200 --> 01:02:21.650
context to save our object graph.

01:02:21.650 --> 01:02:24.960
And then if we get an error,
we use the new error presenting

01:02:24.960 --> 01:02:30.420
machinery in our application to present
that error to the user in a nice form.

01:02:30.540 --> 01:02:33.560
So let's actually exercise that.

01:02:33.610 --> 01:02:36.570
Let's build and go, saving as we go.

01:02:39.570 --> 01:02:40.860
Now let's add a new recipe.

01:02:40.880 --> 01:02:48.010
And just as an aside,
Core Data also provides

01:02:48.630 --> 01:02:50.290
validation machinery.

01:02:50.380 --> 01:02:55.350
We have a validation rule on
recipe that says that you need at

01:02:55.350 --> 01:02:57.810
least one ingredient in a recipe.

01:02:58.060 --> 01:03:01.230
You can't save a recipe
without ingredients.

01:03:01.430 --> 01:03:05.160
So let's try to save one using File Save.

01:03:06.490 --> 01:03:11.600
We'll get an error from our application
using present error that says,

01:03:11.810 --> 01:03:14.080
too few items in ingredients.

01:03:14.150 --> 01:03:20.790
It's actually picking up that the
ingredients relationship on our recipe

01:03:40.520 --> 01:03:40.560
So let's click OK.

01:03:40.560 --> 01:03:40.560
Let's remove our new recipe.

01:03:40.560 --> 01:03:40.560
And let's try to save again.

01:03:40.560 --> 01:03:40.560
And this time we saved.

01:03:40.560 --> 01:03:40.560
So what have we learned?

01:03:40.560 --> 01:03:40.560
Let's go back to the slides.

01:03:44.890 --> 01:03:49.440
Well, we created a prototype application
from a prototype human interface

01:03:49.480 --> 01:03:50.760
and a prototype data model.

01:03:50.790 --> 01:03:53.450
The human interface is something
that we might have gotten from

01:03:53.530 --> 01:03:56.690
our human interface designer or
something we may have knocked up

01:03:56.690 --> 01:04:00.790
in Interface Builder while we were
making our proposal for our project.

01:04:01.340 --> 01:04:05.370
We integrated Core Data undo handling
in a single window application.

01:04:05.540 --> 01:04:08.220
And this is exactly the kind of thing
that you'll need to do if you're building

01:04:08.220 --> 01:04:11.520
an application with lots of windows,
where you're creating

01:04:11.520 --> 01:04:13.100
the windows on the fly.

01:04:14.360 --> 01:04:18.460
And we started iteratively adding
features to our prototype application,

01:04:18.520 --> 01:04:19.360
fleshing it out.

01:04:19.640 --> 01:04:23.500
We've used the power of bindings to make
it very easy to get our interface up

01:04:23.500 --> 01:04:29.810
and running so we can use more time to
actually add features to our application.

01:04:31.380 --> 01:04:35.410
Now, Rick's going to show us what happens
if you sit and do this for a while

01:04:35.750 --> 01:04:38.330
with the Core Recipes application.

01:04:40.770 --> 01:04:43.460
Thank you, Chris.

01:04:43.550 --> 01:04:45.690
So if you want to open this
up and take a look at it,

01:04:45.840 --> 01:04:49.240
it's in the Core Recipes
sample applications folder.

01:04:49.340 --> 01:04:51.120
It's called Core Recipes App.

01:04:51.160 --> 01:04:53.820
We've already built it here,
so we won't take the time to do that.

01:04:53.820 --> 01:04:55.790
But on your own time,
I encourage you to take

01:04:55.810 --> 01:04:56.700
a look through this.

01:04:56.700 --> 01:05:00.920
It demonstrates a lot of advanced
techniques you can use in Core Data.

01:05:01.220 --> 01:05:03.850
This is a recipe manager
written with Core Data,

01:05:03.990 --> 01:05:05.990
Core Recipes.

01:05:06.140 --> 01:05:11.400
This application works with both
the XML and the in-memory stores.

01:05:11.720 --> 01:05:15.750
allows you to use multiple stores all
under one persistent store coordinator.

01:05:15.900 --> 01:05:18.240
In fact,
when you add new stores to your machine,

01:05:18.240 --> 01:05:21.580
it automatically finds
them with Spotlight.

01:05:21.760 --> 01:05:25.030
and adds them under the Persistence
Store Coordinator so they show

01:05:25.340 --> 01:05:27.900
up in your Persistence Stack.

01:05:28.450 --> 01:05:32.460
It uses separate managed object
contexts for each editor window.

01:05:32.600 --> 01:05:36.500
This allows each editor window to
have its own undo stack to allow

01:05:36.500 --> 01:05:39.840
them to be saved separately without
having to save them all at once.

01:05:39.890 --> 01:05:45.670
And those contexts are all sitting on top
of the same persistent store coordinator.

01:05:45.830 --> 01:05:49.200
It allows you to create smart
groups using NS predicates and

01:05:49.280 --> 01:05:54.910
fetch requests to fetch a subset
of the recipes in your library.

01:05:55.170 --> 01:05:58.310
It generates URLs for managed
objects for recipes that you

01:05:58.390 --> 01:06:02.630
can use to go back and look at a
particular recipe in the application.

01:06:02.780 --> 01:06:04.930
It integrates with Spotlight, as I said.

01:06:05.170 --> 01:06:08.050
And this is a bindings application.

01:06:08.160 --> 01:06:10.710
So let's take a quick look at this.

01:06:15.110 --> 01:06:15.800
Just going to open it up.

01:06:15.800 --> 01:06:16.940
Like I said, we've already built it.

01:06:16.940 --> 01:06:20.000
You see it's got an
iTunes-like interface.

01:06:20.000 --> 01:06:22.660
We can add a new group.

01:06:22.670 --> 01:06:26.960
And if we get info on that group,
we can build a predicate for it.

01:06:28.750 --> 01:06:31.350
This is similar to the Predicate Builder,
but what it's really just

01:06:31.350 --> 01:06:35.410
doing is programmatically
building an NS predicate.

01:06:37.150 --> 01:06:39.980
which we'll then use to set
on our fetch request to fetch

01:06:39.980 --> 01:06:41.560
a certain set of recipes.

01:06:41.600 --> 01:06:47.940
We can go to our library
and look at a recipe.

01:06:47.980 --> 01:06:49.700
You open it up.

01:06:54.660 --> 01:06:57.810
Let's close this and take a look
at building a URL for a recipe.

01:06:57.910 --> 01:07:01.030
Close this recipe and we've got a
little button in the upper right

01:07:01.030 --> 01:07:02.860
that'll save it as an RTF document.

01:07:03.030 --> 01:07:04.640
Export it.

01:07:07.400 --> 01:07:12.500
If you look in that RTF document,
it's formatted nicely.

01:07:12.500 --> 01:07:14.780
Down at the bottom,
there's a URL to go back to

01:07:14.780 --> 01:07:17.100
our recipe in Core Recipes app.

01:07:17.120 --> 01:07:20.290
And if we click on that,
it opens it right up.

01:07:25.450 --> 01:07:28.600
We don't have time today to show you
all the features of Core Recipes app,

01:07:28.630 --> 01:07:30.930
but like I said,
I encourage you to take a look at it,

01:07:31.050 --> 01:07:32.990
read through the code,
read the README file,

01:07:33.140 --> 01:07:36.430
play around with it,
see the sort of things you can do.

01:07:36.540 --> 01:07:38.300
So let's jump back to our slides.

01:07:38.300 --> 01:07:46.510
And Chris is going to go over a
few advanced topics quickly for us.

01:07:53.070 --> 01:07:55.500
So really right now,
what we've done is give you

01:07:55.650 --> 01:07:59.100
sort of a taste of what it's
like to develop with Core Data.

01:07:59.230 --> 01:08:02.780
But as you go on and
develop your applications,

01:08:02.810 --> 01:08:06.630
there's some advanced topics that you
might run into that we haven't covered.

01:08:07.330 --> 01:08:11.020
For example, if you actually look at all
these calls that we make to

01:08:11.090 --> 01:08:16.070
add persistent store with type,
which adds a persistent store at a

01:08:16.420 --> 01:08:19.380
URL to a persistent store coordinator,
you'll see that there's a

01:08:19.380 --> 01:08:20.900
configuration parameter.

01:08:20.920 --> 01:08:22.840
But what does that actually mean?

01:08:22.850 --> 01:08:26.850
Well, a configuration is just a named
collection of entities that

01:08:26.860 --> 01:08:28.840
you set up in your data model.

01:08:28.980 --> 01:08:34.550
And what this lets you do is constrain
your storage for a particular store to

01:08:34.550 --> 01:08:36.840
a subset of the entities in your model.

01:08:36.870 --> 01:08:40.690
For example,
you can store some entities in one store,

01:08:40.690 --> 01:08:44.070
and you can store some other
entities in a different store,

01:08:44.200 --> 01:08:45.840
but use the same model.

01:08:45.840 --> 01:08:48.260
Now,
you can't create relationships between

01:08:48.450 --> 01:08:53.330
entities in different persistent stores,
but you can record, for example,

01:08:53.400 --> 01:08:58.080
object IDs by using
the URI representation.

01:08:58.080 --> 01:09:00.160
Oops.

01:09:03.950 --> 01:09:06.960
We also have this concept
of transient properties.

01:09:06.980 --> 01:09:10.270
As you're editing your model,
you'll see a transient

01:09:10.270 --> 01:09:13.560
checkbox on your attributes.

01:09:13.830 --> 01:09:16.940
that might be a little, you know,
mysterious.

01:09:17.080 --> 01:09:20.200
I mean, we talk about Core data as
an object graph management

01:09:20.200 --> 01:09:21.710
and persistence framework.

01:09:21.720 --> 01:09:25.720
Well, transient attributes get you
all the management of Core data,

01:09:25.720 --> 01:09:27.680
but without the persistence.

01:09:27.680 --> 01:09:32.020
So these are really useful for
computed values that you need to model.

01:09:32.020 --> 01:09:36.440
For example, we added the Chef -- the
full name key under Chef.

01:09:36.440 --> 01:09:39.100
We could have added that as
a transient attribute and

01:09:39.330 --> 01:09:41.050
implemented it in the same way.

01:09:41.170 --> 01:09:43.410
However,
what we would have then been able

01:09:43.410 --> 01:09:47.380
to do is actually option drag our
Chef entity into an interface builder

01:09:47.380 --> 01:09:51.920
design window and generate an interface
that included that full name attribute.

01:09:53.690 --> 01:09:56.420
This also lets you use
your own value classes.

01:09:56.560 --> 01:10:00.170
For example, you can create an attribute
with an undefined attribute

01:10:00.730 --> 01:10:03.670
type that is backed by,
for example,

01:10:03.670 --> 01:10:08.250
another attribute in your entity.

01:10:08.610 --> 01:10:12.590
And you can give your first attribute,
say, an NSColor.

01:10:12.930 --> 01:10:16.250
Now that NSColor can't be stored by
Core Data because Core Data doesn't

01:10:16.250 --> 01:10:20.480
know how to store those,
but you can turn it into a data

01:10:20.480 --> 01:10:25.710
object that you store in a separate
attribute and that you populate

01:10:25.710 --> 01:10:28.780
your transient with on fetch.

01:10:29.990 --> 01:10:32.780
And finally,
this is a big topic that's been coming up

01:10:32.870 --> 01:10:36.160
recently on the Cocoa Dev mailing list,
copy and paste and drag and

01:10:36.160 --> 01:10:37.640
drop of managed objects.

01:10:37.780 --> 01:10:41.030
This is something that you'll
need to think about a little bit.

01:10:41.150 --> 01:10:44.910
It's not supported automatically,
but you can, if you're just doing things

01:10:44.960 --> 01:10:48.420
within your own application,
pass around object IDs.

01:10:48.420 --> 01:10:52.660
Now, you're going to need to think
a little bit about this,

01:10:52.670 --> 01:10:57.510
though, because you won't want to pass
object IDs to newly inserted

01:10:57.510 --> 01:10:59.800
objects between contexts.

01:10:59.900 --> 01:11:04.300
Because the contexts sit on top of
the persistent store coordinator,

01:11:04.300 --> 01:11:10.340
but until an object is saved,
it sort of lives in that context alone.

01:11:11.120 --> 01:11:14.640
So a better strategy might be to
encode just the data that you need

01:11:14.900 --> 01:11:17.680
from that object on the pasteboard.

01:11:17.690 --> 01:11:20.270
Of course, once you start encoding
data from your object,

01:11:20.440 --> 01:11:23.290
you need to consider what
this means for relationships.

01:11:23.370 --> 01:11:25.220
After all,
you don't want to actually encode your

01:11:25.350 --> 01:11:29.480
entire object graph onto the pasteboard
when you're just copying a single object.

01:11:29.860 --> 01:11:34.180
So you need to consider whether a
relationship represents containment.

01:11:34.180 --> 01:11:37.360
For example,
a recipe has a bunch of ingredients,

01:11:37.360 --> 01:11:40.080
and those ingredients are tightly bound.

01:11:40.080 --> 01:11:41.680
They're contained within that recipe.

01:11:41.680 --> 01:11:44.350
Or whether it just
represents association.

01:11:44.670 --> 01:11:48.620
For example, a recipe also has a chef,
but it doesn't own that chef.

01:11:48.620 --> 01:11:51.110
That chef actually owns the recipes.

01:11:51.140 --> 01:11:54.280
So copying a recipe
shouldn't copy the chef,

01:11:54.350 --> 01:11:57.130
but it should copy its ingredients.

01:11:57.140 --> 01:11:59.840
So these are just some of the things
that you might want to consider.

01:11:59.860 --> 01:12:02.450
And then you might want to start
thinking about as you start building

01:12:02.450 --> 01:12:03.750
applications with core data.

01:12:05.500 --> 01:12:09.000
and for more on this topic,
you can attend Advanced Core Data Usages,

01:12:09.210 --> 01:12:15.120
Session 143 tomorrow at 2:00 PM.

01:12:15.140 --> 01:12:18.000
Now Rick's going to tell
us where to go from here.

01:12:24.800 --> 01:12:26.400
Thank you for coming today.

01:12:26.400 --> 01:12:28.780
If you're looking for more information,
such as our documentation,

01:12:28.900 --> 01:12:33.670
sample code and other resources,
please go to the WWDC 2005 website.

01:12:33.760 --> 01:12:39.060
Also on your Tiger DVD when you install
Xcode it will install developer examples,

01:12:39.130 --> 01:12:41.670
if you look in
Developer Examples Core Data you'll

01:12:41.690 --> 01:12:42.960
see some examples there.

01:12:43.040 --> 01:12:46.360
We've got some excellent
Core Data documentation written by

01:12:46.360 --> 01:12:49.920
Malcolm Crawford online and in the
documentation installed with Xcode.

01:12:49.920 --> 01:12:52.500
We've got a bunch of
Core Data sessions left today.

01:12:52.500 --> 01:12:56.280
We have two Core Data labs,
one at 12:00 and one at 3:30.

01:12:56.320 --> 01:12:58.230
I encourage you to come
there with your code,

01:12:58.230 --> 01:13:00.610
with your questions,
and we'll sit down with you and

01:13:00.640 --> 01:13:02.880
help you make the most of Core Data.

01:13:02.880 --> 01:13:06.100
There's a session on getting the most
out of Cocoa Bindings today at 2:00.

01:13:06.100 --> 01:13:08.620
Cocoa Bindings doesn't need
to be used with Core Data,

01:13:08.620 --> 01:13:11.770
but they go hand in hand very well,
and I recommend you attend that one if

01:13:11.770 --> 01:13:15.760
you want to build Cocoa applications
that work well and build them quickly.

01:13:15.820 --> 01:13:18.320
Tomorrow at 9:00 we
have our feedback forum.

01:13:18.320 --> 01:13:21.510
Come and give us your questions,
your comments, your concerns,

01:13:21.510 --> 01:13:22.480
and your raves.

01:13:22.630 --> 01:13:24.480
And tomorrow at 2:00 p.m.

01:13:24.480 --> 01:13:26.740
is the advanced Core Data usage session.

01:13:26.800 --> 01:13:29.720
We'll go over a lot more of the
advanced tips and tricks you'll

01:13:29.720 --> 01:13:34.300
need to use when you're building a
real complex real-world application.

01:13:34.300 --> 01:13:37.140
We'd love your feedback on
how this session was for you,

01:13:37.270 --> 01:13:40.080
so please talk to Xavier Allegros
or Matthew Formica.

01:13:40.080 --> 01:13:44.840
You can find their email addresses
here or probably on the WWDC website,

01:13:45.200 --> 01:13:48.840
and let them know what we
could do better next time,

01:13:48.840 --> 01:13:50.950
how it worked for you.

01:13:51.020 --> 01:13:52.460
Thank you for coming,
and have a great rest of your day.

01:13:52.460 --> 01:13:54.590
of WWDC.