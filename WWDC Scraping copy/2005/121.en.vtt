WEBVTT

00:00:10.300 --> 00:00:12.490
All right, good afternoon everyone.

00:00:12.570 --> 00:00:15.630
I'm Doug Davidson and I'd
like to welcome you all to the

00:00:15.630 --> 00:00:18.390
Cocoa Tiger Makeover session.

00:00:18.590 --> 00:00:21.910
Now,
one of the great things about Cocoa is

00:00:21.910 --> 00:00:26.740
that it makes it really easy for you
to start developing your application

00:00:26.740 --> 00:00:29.000
and get it up and running quickly.

00:00:29.080 --> 00:00:33.210
But we all know that there's a
big difference between an ordinary

00:00:33.270 --> 00:00:36.200
application and an outstanding one.

00:00:36.310 --> 00:00:39.490
And what makes that difference
is attention to detail.

00:00:39.500 --> 00:00:44.500
So, what we want to do this afternoon is
to show you how Cocoa makes it easy

00:00:44.500 --> 00:00:49.460
to add the details that will make
your application really stand out,

00:00:49.500 --> 00:00:55.740
especially with all the great new
features that we have in Tiger.

00:00:58.420 --> 00:01:03.750
So for this purpose,
we have a simple basic application

00:01:03.750 --> 00:01:08.210
that we are going to transform.

00:01:10.170 --> 00:01:14.170
It is a simple personal
finance application,

00:01:14.210 --> 00:01:17.400
the sort of thing you might use
to keep track of your checkbook.

00:01:17.490 --> 00:01:19.600
It's a document-based application.

00:01:19.700 --> 00:01:23.600
Each document has a single window
with a table view in it that

00:01:23.600 --> 00:01:26.100
contains a list of transactions.

00:01:26.100 --> 00:01:29.620
You know, money coming in,
money going out, money going out,

00:01:29.620 --> 00:01:31.680
money going out, money going out.

00:01:31.740 --> 00:01:37.800
There's another view below that that
shows the details of each transaction.

00:01:37.800 --> 00:01:40.640
It's all done with bindings,
so it's really simple.

00:01:40.680 --> 00:01:45.790
And it can read and write
its own custom file format.

00:01:45.870 --> 00:01:48.380
So let's take a look at it.

00:01:48.380 --> 00:01:50.800
Can we go over to demo one, please?

00:01:52.800 --> 00:01:54.110
So here's our application.

00:01:54.150 --> 00:01:56.980
We call it iSpend.

00:01:56.980 --> 00:01:59.390
And I have some sample
transactions loaded.

00:01:59.440 --> 00:02:05.180
You can see they have a date, an amount,
a description, optional category,

00:02:05.180 --> 00:02:06.460
and account type.

00:02:06.460 --> 00:02:10.850
And we can add transactions,
we can delete transactions,

00:02:10.870 --> 00:02:14.200
we can open up the detail
view down below that shows the

00:02:14.200 --> 00:02:15.340
details of each transaction.

00:02:15.340 --> 00:02:16.360
We can modify them.

00:02:16.580 --> 00:02:19.450
So the application works.

00:02:19.640 --> 00:02:22.070
But there's a lot we'd
like to do with it.

00:02:22.170 --> 00:02:25.200
We'd like to spiff up
this user interface.

00:02:25.300 --> 00:02:28.610
We'd like to be able to copy and
paste and drag and drop these

00:02:28.660 --> 00:02:30.500
transactions all over the place.

00:02:30.670 --> 00:02:34.370
And we'd like to take advantage
of some of the great new

00:02:34.400 --> 00:02:36.900
Tiger features like Spotlight.

00:02:37.040 --> 00:02:38.150
That's what we're going
to show you today.

00:02:38.310 --> 00:02:40.500
So let's start the makeover.

00:02:40.500 --> 00:02:43.110
Go back to the slides.

00:02:47.600 --> 00:02:53.600
We're going to do this in three parts.

00:02:53.600 --> 00:02:56.510
I'll be talking about the first part,
which is all about dealing

00:02:56.510 --> 00:02:57.600
with the pasteboard.

00:02:57.600 --> 00:03:02.080
What we're going to do to this
application is add support for copy

00:03:02.080 --> 00:03:08.590
and paste and for drag and drop and
for services from the services menu.

00:03:09.480 --> 00:03:11.370
So I'm going to start with copy
and paste because that's the

00:03:11.460 --> 00:03:12.800
foundation of the rest of this.

00:03:12.800 --> 00:03:16.900
And I'm going to describe a particular
means of dealing with the pasteboard

00:03:16.910 --> 00:03:20.340
here that I like to think of as the
right way to handle the pasteboard.

00:03:20.340 --> 00:03:21.550
Why do I call it that?

00:03:21.580 --> 00:03:25.360
Because it's going to make all
the rest of this really easy.

00:03:25.380 --> 00:03:30.040
And in this way of doing things,
everything is going to have three steps.

00:03:31.020 --> 00:03:34.480
So, for example,
for writing to the pasteboard,

00:03:34.480 --> 00:03:36.010
we'll have step one.

00:03:36.080 --> 00:03:40.860
On whatever object is going to
be writing to the pasteboard,

00:03:40.860 --> 00:03:44.020
we'll define a method that describes
the list of types that we're

00:03:44.190 --> 00:03:45.750
willing to write to the pasteboard.

00:03:45.760 --> 00:03:47.140
Just returns an array of them.

00:03:47.140 --> 00:03:47.900
Okay?

00:03:47.900 --> 00:03:49.530
Step two.

00:03:52.290 --> 00:03:55.300
is a fairly generic method,
not really specific to this application,

00:03:55.300 --> 00:03:57.750
I'll show you the
implementation in a minute,

00:03:57.770 --> 00:04:06.270
that takes a pasteboard and a list
of types and writes those types to

00:04:06.270 --> 00:04:06.270
the pasteboard using step three,

00:04:06.880 --> 00:04:10.370
The method that really does the work,
which takes a pasteboard and a type

00:04:10.370 --> 00:04:12.800
and writes that type to the pasteboard.

00:04:12.870 --> 00:04:16.500
And this is the method that has the
custom code that knows about the format

00:04:16.500 --> 00:04:21.710
of each type you're going to write
to the pasteboard and does that work.

00:04:23.160 --> 00:04:25.630
Reading from the
Pasteboard is very similar.

00:04:25.730 --> 00:04:29.900
Step one:
we're going to define a method that

00:04:29.900 --> 00:04:33.340
describes a list of types that we're
willing to read from the Pasteboard.

00:04:33.340 --> 00:04:35.450
It returns an array of those.

00:04:35.530 --> 00:04:39.520
Step 2 is another fairly generic method
that I'll show you in a minute that

00:04:39.720 --> 00:04:42.730
takes a pasteboard and reads from it.

00:04:42.740 --> 00:04:46.560
It doesn't need to take a list of
types because the pasteboard itself

00:04:46.560 --> 00:04:48.680
knows the types that it contains.

00:04:49.120 --> 00:04:53.070
Step three, again,
is a method that really does the work,

00:04:53.130 --> 00:04:57.680
that takes a pasteboard and a type and
reads that type from the pasteboard.

00:04:57.700 --> 00:05:01.100
And this is the method that has a
custom code that knows about each format

00:05:01.120 --> 00:05:02.980
that you read from the pasteboard.

00:05:02.980 --> 00:05:06.640
Okay,
so let's take a look at that in code.

00:05:06.640 --> 00:05:08.900
If we could go over to demo one.

00:05:11.110 --> 00:05:13.060
Bring up Xcode.

00:05:13.090 --> 00:05:17.820
Now, in this particular application,
we've decided that the document is

00:05:17.820 --> 00:05:20.590
going to be handling the copy and
paste because it's the document

00:05:20.680 --> 00:05:23.320
here that knows about the formats.

00:05:23.430 --> 00:05:28.530
I have added a category to my document
class for handling the pasteboard.

00:05:28.580 --> 00:05:32.290
Here is the first method I told you
about that describes the types we are

00:05:32.420 --> 00:05:34.040
willing to write to the pasteboard.

00:05:34.040 --> 00:05:38.360
In this case, we have, first of all,
a custom pasteboard type that we

00:05:38.360 --> 00:05:42.790
are going to use for copy and paste
within this particular application.

00:05:43.130 --> 00:05:47.930
And then we also want to be able
eventually to support promise drags.

00:05:47.990 --> 00:05:51.290
That is where we drag things
to the finder or the desktop,

00:05:51.350 --> 00:05:57.600
say, and produce a file there if the
receiving application wants it.

00:05:57.860 --> 00:06:00.530
And to do that,
we have to write out two types,

00:06:00.530 --> 00:06:05.100
a special files promise pasteboard
type and a file names pasteboard type.

00:06:05.170 --> 00:06:07.460
And we're also going
to write out rich text,

00:06:07.550 --> 00:06:12.200
RTF pasteboard type, and plain text,
string pasteboard type.

00:06:12.230 --> 00:06:13.510
That's the first method.

00:06:13.600 --> 00:06:16.870
The second one is the fairly generic
one I told you about that takes a

00:06:16.880 --> 00:06:19.140
pasteboard and an array of types.

00:06:19.170 --> 00:06:22.000
And all this method does is
it goes through those types

00:06:22.000 --> 00:06:27.280
and picks out the ones that we
are actually willing to write.

00:06:27.620 --> 00:06:32.970
And then it declares those types
on the pasteboard and then just

00:06:32.970 --> 00:06:36.970
goes through them one by one and
writes them to the pasteboard

00:06:37.080 --> 00:06:41.510
using this third detail method.

00:06:42.520 --> 00:06:45.180
And so this is the one
that does the work.

00:06:45.180 --> 00:06:48.730
It has code for each type
that we're willing to write.

00:06:48.790 --> 00:06:52.700
So for example, for our custom type,
we are just going to write the

00:06:52.760 --> 00:06:55.460
transactions out as archived data.

00:06:55.620 --> 00:06:57.900
Our application knows how
to read and write that.

00:06:58.070 --> 00:07:02.310
For the file's promise pasteboard type,
the way that works is that

00:07:02.310 --> 00:07:08.610
to support promise drags,
for that we write out the extension

00:07:08.800 --> 00:07:12.860
of the file type and the similar types
that we are willing to write out.

00:07:12.870 --> 00:07:15.840
And then the file name's pasteboard type,
well,

00:07:16.890 --> 00:07:18.260
We don't want to do that right away.

00:07:18.260 --> 00:07:19.340
We don't have a file handy.

00:07:19.340 --> 00:07:22.130
We're only going to do that if
the receiver actually wants it.

00:07:22.240 --> 00:07:26.030
So we'll just say yes
and do that later on,

00:07:26.030 --> 00:07:27.100
lazily.

00:07:28.020 --> 00:07:38.060
RichText, I'm not going to show
you this right here,

00:07:38.060 --> 00:07:38.220
but you can look at it
in your sample code.

00:07:38.220 --> 00:07:38.500
This is somewhat interesting.

00:07:38.500 --> 00:07:44.510
We will write out a list of transactions
to RichText using the new text table

00:07:44.510 --> 00:07:49.700
support in Tiger to write out a list
of transactions as a table in RTF.

00:07:49.910 --> 00:07:54.590
And for plain text,
there is also another method that will

00:07:54.630 --> 00:07:57.910
write it out as tab separated values.

00:07:57.910 --> 00:07:57.910
Pretty simple.

00:07:58.370 --> 00:08:01.730
There's one more method that
we need for our promise drags.

00:08:01.730 --> 00:08:03.530
If we are actually called
on to write out a file,

00:08:03.540 --> 00:08:05.800
we need to have a method
that writes out a file.

00:08:05.900 --> 00:08:07.740
And this is pretty simple.

00:08:07.800 --> 00:08:10.230
It just uses the NSDocument support.

00:08:10.310 --> 00:08:12.800
We already know how to write
out our custom file format,

00:08:12.940 --> 00:08:16.090
so this one calls on that to do it.

00:08:17.460 --> 00:08:23.310
So, once we have all that,
then our copy method is just a one-liner.

00:08:23.950 --> 00:08:27.290
That is,
it writes to the general pasteboard all

00:08:27.290 --> 00:08:29.810
the types that we're willing to write.

00:08:31.540 --> 00:08:34.900
All right, then let's go to the
reading from the pasteboard.

00:08:34.900 --> 00:08:38.190
Here's the first method I told
you about that declares the

00:08:38.380 --> 00:08:40.330
types we're willing to read.

00:08:40.370 --> 00:08:43.140
In this case,
our custom type will read in file names.

00:08:43.330 --> 00:08:47.750
We don't need the file promise type.

00:08:47.750 --> 00:08:47.750
Rich text and plain text.

00:08:48.370 --> 00:08:51.390
and the generic method to
read from the pasteboard,

00:08:51.390 --> 00:08:53.240
which again is pretty simple.

00:08:53.260 --> 00:08:58.680
All it does is go through all the
types that we are willing to read.

00:08:58.740 --> 00:09:01.080
For each one, it checks to see if
it's on the pasteboard.

00:09:01.140 --> 00:09:03.690
If it is,
it tries to read it and stops when

00:09:03.690 --> 00:09:06.600
the first success is encountered.

00:09:07.880 --> 00:09:11.840
And then here again is the
method that does all the work.

00:09:11.840 --> 00:09:17.840
For our custom document type,
we read it in as archive data.

00:09:18.090 --> 00:09:19.140
File name is pasteboard type.

00:09:19.140 --> 00:09:23.090
We read it in as a file,
so we know how to read files.

00:09:23.840 --> 00:09:30.720
And for rich text,
we have a method that parses

00:09:30.780 --> 00:09:34.940
those tables that we wrote out,
or if there is no table present,

00:09:34.940 --> 00:09:39.430
it falls back to the plain text parsing,
which will parse tab-separated

00:09:39.430 --> 00:09:43.760
values or comma-separated
values or similar formats.

00:09:44.280 --> 00:09:46.300
So let's try it out.

00:09:46.320 --> 00:09:47.140
Okay, run it.

00:09:47.140 --> 00:09:50.080
And...

00:09:51.500 --> 00:09:54.620
Bring up the data.

00:09:54.790 --> 00:10:00.480
Let's see if we can copy something.

00:10:01.900 --> 00:10:04.670
And paste.

00:10:04.700 --> 00:10:05.230
That worked.

00:10:05.330 --> 00:10:07.940
That's our custom type
within the application.

00:10:07.940 --> 00:10:10.290
Or we can try it as text.

00:10:10.300 --> 00:10:12.160
There's rich text.

00:10:12.160 --> 00:10:13.990
There's our table.

00:10:15.100 --> 00:10:32.300
[Transcript missing]

00:10:34.490 --> 00:10:40.130
The next thing I'd like to talk about,
now that we've got copy and

00:10:40.140 --> 00:10:45.120
paste as our foundation,
we can move on to other things,

00:10:45.120 --> 00:10:47.960
drag and drop and services.

00:10:48.250 --> 00:10:51.700
The main data view in this
application is a table view.

00:10:51.730 --> 00:10:54.890
So we're going to make that
table view serve as a dragging

00:10:55.220 --> 00:10:57.320
source and dragging destination.

00:10:57.320 --> 00:11:01.440
Now in Tiger,
there are some new methods for the

00:11:01.540 --> 00:11:05.180
data source for the table view that
make drag and drop support really easy.

00:11:05.250 --> 00:11:07.140
So we're going to use them.

00:11:07.180 --> 00:11:11.750
Again, three steps to act as
a drag and drop source.

00:11:12.230 --> 00:11:17.820
Step 1: At initialization,
we need to register a

00:11:17.820 --> 00:11:20.700
drag operation mask,
it's called,

00:11:20.700 --> 00:11:25.190
that specifies the kind of drag
operations that we're willing to support.

00:11:27.040 --> 00:11:31.310
Step 2: At the start of a drag,
we'll be called on to provide

00:11:31.320 --> 00:11:33.180
the contents of the pasteboard.

00:11:33.690 --> 00:11:36.280
But we already know how to do
that because we have our method

00:11:36.280 --> 00:11:38.730
that writes to the pasteboard.

00:11:40.970 --> 00:11:44.640
And step three,
if the drag ends up being a promise drag,

00:11:44.660 --> 00:11:48.310
say to the finder,
then the recipient will tell us

00:11:48.330 --> 00:11:50.430
where it wants the files written out.

00:11:50.500 --> 00:11:54.450
And so there's a method on the data
source that will be called that

00:11:54.450 --> 00:11:59.760
will specify the location where
the file should be written out.

00:11:59.820 --> 00:12:03.270
And that just calls the method
I showed you just now that writes

00:12:03.270 --> 00:12:05.470
out a file to a specific location.

00:12:07.010 --> 00:12:13.200
To serve as a drag-and-drop destination,
step one, at initialization time,

00:12:13.200 --> 00:12:19.540
we need to register the types that
we're willing to accept in a drag.

00:12:19.720 --> 00:12:22.090
But that's just our
readable pasteboard types,

00:12:22.090 --> 00:12:23.530
so we already know that.

00:12:23.920 --> 00:12:28.980
Step two, as a drag comes in as
dragged over our table view,

00:12:28.980 --> 00:12:31.940
we will be called
repeatedly to validate it.

00:12:31.960 --> 00:12:36.210
And I'll show you the
implementation of that in a minute.

00:12:37.430 --> 00:12:41.700
And step three, if the drag is ultimately
dropped on our table view,

00:12:41.710 --> 00:12:46.700
we'll be called on to accept
it and to write that data in.

00:12:46.710 --> 00:12:50.890
But that just calls on the
method that we've shown earlier

00:12:50.890 --> 00:12:53.270
to read from a pasteboard.

00:12:56.920 --> 00:12:59.130
Then we come to services.

00:12:59.340 --> 00:13:01.560
Services are a really
neat feature in Mac OS X,

00:13:01.560 --> 00:13:04.910
so we should support them as much
as possible because they're really

00:13:05.380 --> 00:13:06.730
useful and it's really easy to do.

00:13:06.740 --> 00:13:14.280
We wanna be able to use services
from within our application.

00:13:14.330 --> 00:13:20.890
So for that, step one, at initialization,
we need to register all the types

00:13:21.040 --> 00:13:25.510
that we're willing to hand off to
a service or back from a service.

00:13:25.580 --> 00:13:26.530
But we already know those.

00:13:26.610 --> 00:13:29.790
those are our readable and
writable pasteboard types.

00:13:30.770 --> 00:13:34.580
Step 2:
When the service menu is brought up,

00:13:34.610 --> 00:13:37.730
we need to validate
specific entries in it.

00:13:37.740 --> 00:13:39.700
I'm not going to show you that method,
but it's really simple.

00:13:39.700 --> 00:13:42.470
It's like other menu validation code.

00:13:42.850 --> 00:13:47.390
And step three, there is no step three,
or rather, we already did it.

00:13:47.420 --> 00:13:51.040
Because step three is just to implement
those methods that I showed you before,

00:13:51.060 --> 00:13:56.300
that writes types to the pasteboard
or reads types from the pasteboard.

00:13:56.740 --> 00:13:57.170
That's it.

00:13:57.180 --> 00:14:03.380
But we also want to make this
application provide some services.

00:14:03.380 --> 00:14:07.320
And I've written two simple services
for this application to provide.

00:14:07.320 --> 00:14:13.710
For providing services, step one,
we need to advertise them by adding

00:14:13.720 --> 00:14:15.970
a services entry to our infop list.

00:14:15.980 --> 00:14:20.160
And this entry specifies all sorts
of information about the service,

00:14:20.160 --> 00:14:23.020
like what the menu name is and so forth.

00:14:23.020 --> 00:14:25.950
But one important thing I want
to note is that it gives a name,

00:14:25.950 --> 00:14:28.890
in this case,
import data that's going to be used

00:14:28.890 --> 00:14:33.280
as part of the method that will be
invoked if the service is actually used.

00:14:34.900 --> 00:14:41.290
Step 2 is we need to register
some object in our application

00:14:41.320 --> 00:14:44.690
to act as a service provider.

00:14:44.900 --> 00:14:51.000
Step 3: Implement the method that will be
invoked when the service is used.

00:14:51.220 --> 00:14:57.250
For the import data service,
the full signature method looks

00:14:57.250 --> 00:15:03.800
like 'import data with user data and
error'. This is a very simple service,

00:15:03.800 --> 00:15:05.730
so the implementation is very simple.

00:15:05.800 --> 00:15:10.190
This service just copies
data into our application,

00:15:10.190 --> 00:15:14.060
into the frontmost document,
and so it just uses the

00:15:14.060 --> 00:15:17.800
method that we showed before
to read from the pasteboard.

00:15:17.800 --> 00:15:23.900
So,
let's take a look at this again in code.

00:15:34.270 --> 00:15:38.810
Now, you remember that I said that
these drag and drop methods are

00:15:38.810 --> 00:15:42.030
going to be implemented on the
data source for our table view.

00:15:42.030 --> 00:15:44.700
In this case,
that's our array controller.

00:15:44.840 --> 00:15:49.230
So I have a category on our
array controller subclass.

00:15:49.300 --> 00:15:51.860
This is all for drag and drop.

00:15:51.890 --> 00:15:57.490
And here you see the initialization.

00:15:57.900 --> 00:16:08.500
[Transcript missing]

00:16:08.910 --> 00:16:15.290
For acting as a source,
we register the drag operation mask.

00:16:15.420 --> 00:16:19.100
In this particular application,
we have chosen to regard the

00:16:19.100 --> 00:16:24.560
transactions as being ordered by
sorting and not by manual rearrangement.

00:16:24.560 --> 00:16:26.740
So the drag and drop operation
we're going to support is

00:16:26.740 --> 00:16:28.000
always going to be a copy.

00:16:28.000 --> 00:16:35.280
So the mask we use is the or of copy
operation or the generic operation,

00:16:35.280 --> 00:16:39.510
which just means whatever operation
you're going to do with this.

00:16:42.430 --> 00:16:47.300
And then remember,
when a drag starts from our table view,

00:16:47.300 --> 00:16:51.550
we'll be called on to provide
data to the pasteboard.

00:16:51.550 --> 00:16:55.860
And this just uses the method
that writes to a pasteboard with

00:16:55.860 --> 00:16:58.420
our writable pasteboard types.

00:16:59.220 --> 00:17:04.210
And if the drag-out happens
to have a recipient that wants

00:17:04.210 --> 00:17:06.200
prompt to redeem or promise,

00:17:06.300 --> 00:17:23.200
[Transcript missing]

00:17:24.300 --> 00:17:30.200
[Transcript missing]

00:17:31.020 --> 00:17:33.500
When the drag appears
over the table view,

00:17:33.500 --> 00:17:37.280
we have to validate it,
which means decide whether to accept

00:17:37.280 --> 00:17:41.890
it or refuse it and with what operation
and decide where the drag indicator

00:17:41.890 --> 00:17:43.540
will show up in the table view.

00:17:43.680 --> 00:17:46.350
In this case,
we are always putting the drag

00:17:46.400 --> 00:17:49.070
indicator at the end of the table view.

00:17:49.190 --> 00:17:53.730
here, and we accept if the pasteboard
contains some of the types

00:17:53.950 --> 00:17:57.290
that we're willing to read,
I'll let the operation

00:17:57.330 --> 00:17:58.700
that's going to be a copy.

00:17:58.700 --> 00:18:01.950
There's a little bit of a
subtle point if we're dragging

00:18:02.270 --> 00:18:04.490
within the single table view.

00:18:04.490 --> 00:18:08.330
I'll let you take a look at
that in the source yourself.

00:18:08.330 --> 00:18:11.110
And then the last part is very simple.

00:18:11.140 --> 00:18:14.380
If the drag is actually
dropped on our table view,

00:18:14.460 --> 00:18:16.530
we'll be called on to accept it.

00:18:16.570 --> 00:18:20.990
And for that, we just read in from the
pasteboard using our read

00:18:20.990 --> 00:18:24.610
selection from pasteboard method.

00:18:24.630 --> 00:18:26.700
So let's try it out.

00:18:36.880 --> 00:18:43.850
So, let me make some selections
of various items in here,

00:18:43.850 --> 00:18:46.790
and then we'll try dragging them over.

00:18:46.810 --> 00:18:48.570
And you'll notice the
drag indicator appears,

00:18:48.620 --> 00:18:50.040
and I can drop it.

00:18:50.090 --> 00:18:51.670
And there they are.

00:18:51.730 --> 00:18:57.100
Or perhaps I want to take
and drag them to the desktop.

00:18:57.130 --> 00:19:01.750
There's a file written out.

00:19:02.150 --> 00:19:09.070
Or I can take and say,
drag these out to text.

00:19:09.420 --> 00:19:11.400
And there's our table.

00:19:11.400 --> 00:19:13.280
Plain text.

00:19:13.280 --> 00:19:16.180
There are our tab-separated items.

00:19:16.940 --> 00:19:19.140
So we have drag and drop working.

00:19:19.260 --> 00:19:21.240
What about services?

00:19:21.280 --> 00:19:25.280
Well, let's see.

00:19:27.900 --> 00:19:36.420
One of the services that is available is,
say, TextEdit,

00:19:36.430 --> 00:19:38.730
new window containing selection.

00:19:38.750 --> 00:19:43.000
Boom, brings up a new window in
TextEdit containing that data.

00:19:43.060 --> 00:19:46.400
But there are some more
interesting services.

00:19:46.490 --> 00:19:49.160
Say, let's try Mail.

00:19:49.160 --> 00:19:54.660
Mail provides a service, send file,
and up comes Mail with a new message

00:19:54.700 --> 00:19:57.430
with a file created from that data.

00:19:58.790 --> 00:20:02.350
And then we also have the services
provided by our iSpin application.

00:20:02.360 --> 00:20:07.080
So let me make a selection in TextEdit.

00:20:08.700 --> 00:20:21.900
[Transcript missing]

00:20:23.540 --> 00:20:28.400
So we have our drag and drop,
copy and paste, and service is working.

00:20:28.440 --> 00:20:30.820
Let's go back to the slides.

00:20:34.600 --> 00:20:37.630
And now I would like to
welcome up the next speaker,

00:20:37.630 --> 00:20:41.890
Hansen, who is going to tell us all about
improving the user interface.

00:20:48.170 --> 00:20:51.990
Good afternoon, my name is Hansen,
and I'm an engineer in the Cocoa Group.

00:20:51.990 --> 00:20:57.370
And today I'd like to show you how you
can add some cool new user interface

00:20:57.390 --> 00:20:59.830
improvements in your applications.

00:21:00.510 --> 00:21:06.310
So, Doug has already shown us how
to do pasteboard handling.

00:21:06.480 --> 00:21:11.220
So I'm going to show you how to add
an NSDatePicker to your application,

00:21:11.220 --> 00:21:14.400
implement undo support,
and take advantage of view

00:21:14.400 --> 00:21:20.270
animations to create simple visual
transitions between your views.

00:21:20.770 --> 00:21:22.390
So let's get started.

00:21:22.480 --> 00:21:26.130
First thing, an estate picker.

00:21:26.980 --> 00:21:33.440
DatePicker is a new control in Tiger that
allows you to display an NSDate instance.

00:21:33.470 --> 00:21:35.690
There are two styles of DatePicker.

00:21:35.750 --> 00:21:42.260
There is a textual style that
contains a text field and a stepper.

00:21:42.310 --> 00:21:46.550
And this style, as many of you may know,
is similar to the

00:21:46.550 --> 00:21:49.930
Carbon DatePicker control.

00:21:50.610 --> 00:21:55.110
There is also a second style,
a graphical style,

00:21:55.110 --> 00:21:58.300
that provides a calendar and a clock.

00:21:58.580 --> 00:22:01.600
Now, no matter which one of
these two styles you use,

00:22:01.600 --> 00:22:04.530
you can specify which date or
time elements should be visible.

00:22:04.570 --> 00:22:06.930
So, for instance,
if you don't want to display the time,

00:22:06.980 --> 00:22:10.270
you can not show the clock.

00:22:11.820 --> 00:22:17.330
So now let's see this in action,
and I'm going to do a demo.

00:22:19.600 --> 00:22:26.440
So, first thing I'm going to do is open
up another version of our application.

00:22:26.470 --> 00:22:29.830
Those of you who might be
following along the sample code,

00:22:29.830 --> 00:22:35.150
you can open the ispend03 Xcode project.

00:22:35.940 --> 00:22:41.800
And now, Daypicker,
we're going to be doing the

00:22:41.800 --> 00:22:45.200
Daypicker thing completely
in Interface Builder today.

00:22:45.200 --> 00:22:52.560
So, I'm going to open up
my document.nib file.

00:22:53.330 --> 00:22:57.200
And we brought up the nib.

00:22:57.250 --> 00:23:00.970
And the date field that we're
going to replace is in our

00:23:00.990 --> 00:23:03.870
bank transaction detail view.

00:23:03.930 --> 00:23:06.950
So you can see here that's the...

00:23:07.700 --> 00:23:09.500
The view that we want to bring up.

00:23:09.530 --> 00:23:14.810
And you notice that we have this
field 'Date' and a text field here.

00:23:14.870 --> 00:23:17.300
Now let's look at the text field.

00:23:17.350 --> 00:23:19.370
Let's inspect it.

00:23:19.600 --> 00:23:25.290
Let's bring up the inspector
and let's choose bindings.

00:23:25.670 --> 00:23:28.280
And as you can see,
this text field is bound

00:23:28.330 --> 00:23:33.980
to selection.date of the
transactions controller,

00:23:34.040 --> 00:23:39.860
which means it's showing whatever
the date of the currently

00:23:39.860 --> 00:23:42.290
selected item in the window is.

00:23:42.460 --> 00:23:49.280
So now, we want to replace this text
field with our new NSDatePicker.

00:23:49.310 --> 00:23:53.820
So the first thing we're going to do is
we're going to delete this text field.

00:23:55.400 --> 00:24:00.300
And let's go to our pallets up
here and go to the text section.

00:24:00.450 --> 00:24:08.240
And you notice this item here,
this is the NSDate Picker object.

00:24:08.240 --> 00:24:11.580
So we're gonna drag that into
our Bank Transaction view.

00:24:11.580 --> 00:24:16.480
So next,
we're gonna go back to the Inspector.

00:24:17.610 --> 00:24:21.130
And let's change some of the settings.

00:24:21.130 --> 00:24:25.260
We want to display the month, day,
and year.

00:24:25.370 --> 00:24:29.500
But we don't want to display the time.

00:24:29.550 --> 00:24:33.170
Great, so now let's make it
a little bit smaller.

00:24:34.890 --> 00:24:39.610
So now we want to bind this date
picker to the same value that we

00:24:39.610 --> 00:24:41.600
bound the previous text field to.

00:24:41.600 --> 00:24:50.090
So I'm going to go back to the inspector
and go to Bindings and click on Value.

00:24:51.290 --> 00:24:56.040
And we've already got Transactions
Controller selected here and

00:24:56.040 --> 00:24:58.300
the controller key selection.

00:24:58.330 --> 00:25:00.360
That's exactly what we want.

00:25:00.460 --> 00:25:03.960
Now for the model key path,
we want the date.

00:25:03.960 --> 00:25:08.240
So we're going to click this
pull-down and select date.

00:25:08.360 --> 00:25:11.350
And now we've connected our bindings.

00:25:11.890 --> 00:25:18.000
So that's all we need to do to
set up our Textual Date Picker.

00:25:18.720 --> 00:25:24.900
So next, I'd also like to add a graphical
version of the Date Picker.

00:25:24.940 --> 00:25:27.460
However, the graphical version
is a little bit bigger,

00:25:27.460 --> 00:25:31.230
so I'm going to create
another window for it.

00:25:31.260 --> 00:25:34.180
So let's go to our palette here.

00:25:34.500 --> 00:25:39.500
Actually, let me hide Xcode so that
it's a little cleaner.

00:25:39.500 --> 00:25:43.970
And let's drag in a panel.

00:25:48.200 --> 00:25:51.200
Let's make this panel a utility window.

00:25:51.200 --> 00:25:55.740
Make it a little bit smaller.

00:25:55.740 --> 00:25:58.180
Let's give it a different name.

00:26:04.170 --> 00:26:08.740
Now as before, we're going to go and drag
in a DatePicker object.

00:26:08.750 --> 00:26:12.350
So we're going to drag this into here.

00:26:13.040 --> 00:26:18.000
So now we go back to the
inspector and change its style.

00:26:18.000 --> 00:26:22.080
We can select the style from the
pop-up and change it to graphical.

00:26:22.640 --> 00:26:26.540
And now as you can see,
there is a calendar and a clock.

00:26:26.570 --> 00:26:30.500
We don't want to display the clock,
so let's select time selection none,

00:26:30.500 --> 00:26:34.750
and center the calendar.

00:26:35.600 --> 00:26:36.440
There.

00:26:36.510 --> 00:26:41.490
So now, as before,
we have to bind it to the correct thing.

00:26:41.490 --> 00:26:48.060
So let's go to Bindings, select Value,
and from the pull-down

00:26:48.060 --> 00:26:50.980
from Model Keypath,
select Date.

00:26:52.180 --> 00:26:58.040
Great, so now we have a window that shows
a graphical version of the date,

00:26:58.040 --> 00:27:02.180
but now we need a way to
bring up this utility panel.

00:27:02.240 --> 00:27:05.100
So luckily,
here I already have a nice little

00:27:05.100 --> 00:27:12.190
button with a calendar icon,
so I am going to connect this button

00:27:12.810 --> 00:27:18.010
by control-clicking and
dragging up to my date panel.

00:27:18.900 --> 00:27:21.630
And now that brings up a target action.

00:27:21.700 --> 00:27:27.310
I will select 'Order Front'
and click 'Connect'. And now...

00:27:27.550 --> 00:27:32.000
When I click this button,
this panel should pop up.

00:27:32.050 --> 00:27:37.160
So now let's go back to
Xcode and build and run this.

00:27:39.080 --> 00:27:46.000
Let's add a couple of items.

00:27:46.070 --> 00:27:52.710
Now you see that we have a date
picker object here and I can click

00:27:52.760 --> 00:27:57.000
the stepper and you see all the
selected items increment their month.

00:27:57.000 --> 00:28:03.440
You can increment the year or the
date and I can click the button and

00:28:03.440 --> 00:28:08.000
change the date using the calendar.

00:28:08.000 --> 00:28:09.000
And it all just works.

00:28:09.000 --> 00:28:12.020
I didn't have to write
a single line of code.

00:28:18.800 --> 00:28:22.800
Could you take the slides, please?

00:28:22.800 --> 00:28:26.960
So now that you've seen how easy
it is to create a date picker,

00:28:26.960 --> 00:28:31.210
I'm going to go on to our next topic,
Undo Support.

00:28:31.510 --> 00:28:35.870
So, Undo support is provided
by NSUndo Manager.

00:28:36.190 --> 00:28:41.700
NSUndo Manager records operations
for undo and redo on a stack.

00:28:42.020 --> 00:28:47.830
Now, in order to use the Undo Manager,
whenever we have a change made to

00:28:47.870 --> 00:28:52.710
our model objects in our application,
say the transactions in

00:28:52.710 --> 00:28:56.480
our iSpend application,
we want to tell the Undo

00:28:56.570 --> 00:28:59.520
Manager a method to register.

00:28:59.520 --> 00:29:01.970
We want to register with the
Undo Manager a way to revert the

00:29:01.970 --> 00:29:06.930
change back to its previous value.

00:29:07.690 --> 00:29:11.370
Document-based applications,
such as our IceBand application,

00:29:11.470 --> 00:29:14.050
supply an undo manager by default.

00:29:14.330 --> 00:29:17.940
This default undo manager also
maintains and keeps track of

00:29:17.940 --> 00:29:24.170
the edited state of the document
so that the little dirty mark,

00:29:25.860 --> 00:29:31.070
The dirty mark is marked when there
are still undo operations on the stack.

00:29:31.600 --> 00:29:34.840
Now, of course,
many of you know about Core Data.

00:29:35.050 --> 00:29:37.030
Core Data is new in Tiger.

00:29:37.100 --> 00:29:40.260
If you use Core Data to provide
the model for your applications,

00:29:40.300 --> 00:29:42.660
you'll get undo support for free.

00:29:42.690 --> 00:29:44.480
However, today,
the undo support I'm going to show

00:29:44.480 --> 00:29:49.470
you will work back on Panther and
previous versions of Mac OS X.

00:29:50.830 --> 00:29:54.970
So next, I'm going to tell you the
two ways that you can use to

00:29:55.080 --> 00:29:59.210
register your methods for undo.

00:30:00.170 --> 00:30:06.630
The first way to register a method for
undo is to use register_undo_with_target.

00:30:06.690 --> 00:30:13.450
This is a very simple way of registration
which is only used when your method

00:30:13.450 --> 00:30:17.570
takes a single object-typed argument.

00:30:17.850 --> 00:30:22.070
Now, often,
you may have... your methods may

00:30:22.210 --> 00:30:27.800
require more than one argument,
or maybe the argument is not an object,

00:30:27.880 --> 00:30:29.690
maybe it's an integer or a float.

00:30:29.870 --> 00:30:33.060
So in those cases,
we provide a more general method called

00:30:33.060 --> 00:30:35.460
invocation-based undo registration.

00:30:36.130 --> 00:30:40.420
The method there is a method
on NSUndue Manager called

00:30:40.710 --> 00:30:43.450
prepareWithInvocationTarget.

00:30:43.870 --> 00:30:46.900
And to use that,
you specify the actual invocation

00:30:46.950 --> 00:30:49.070
to revert the object state.

00:30:49.220 --> 00:30:51.860
Now this is possible because
of the dynamic nature of

00:30:51.860 --> 00:30:54.160
the Objective-C runtime.

00:30:55.780 --> 00:30:59.360
So, next,
what do we need to do to add Undo

00:30:59.360 --> 00:31:03.310
Support to our iSpend application?

00:31:03.310 --> 00:31:03.310
Well,

00:31:04.870 --> 00:31:10.540
First, when the user adds or removes
a transaction in a document,

00:31:10.780 --> 00:31:13.240
we want to be able to undo that action.

00:31:13.310 --> 00:31:14.940
So to do that,
we're going to take advantage of key

00:31:14.940 --> 00:31:19.930
value observing to observe changes
made to the transaction's array.

00:31:21.000 --> 00:31:26.080
Next, if the user changes a
value in the transaction,

00:31:26.130 --> 00:31:31.410
such as editing the date or the amount,
we want to be able to undo that.

00:31:31.490 --> 00:31:35.650
So to do that, first,
each transaction model object needs a

00:31:35.650 --> 00:31:38.950
reference to the document's undo manager.

00:31:39.060 --> 00:31:42.330
Once we set that up, then,

00:31:42.570 --> 00:31:48.380
In each of the places where we
change the transaction's value,

00:31:48.760 --> 00:31:53.500
Meaning, in each of the setter accessor
methods for the transaction,

00:31:53.530 --> 00:31:56.720
we will register the undo instruction.

00:31:57.500 --> 00:32:03.190
So next, I'd like to go to the demo
and show you this in action.

00:32:05.210 --> 00:32:11.790
So first, let's go to mydocument.m.

00:32:14.560 --> 00:32:20.350
And the document,
this NSDocument subclass,

00:32:24.150 --> 00:32:26.320
First, I'll go to the top.

00:32:26.420 --> 00:32:30.730
So our document subclass is already
registered as an observer for

00:32:31.230 --> 00:32:34.080
changes to the transactions array.

00:32:35.570 --> 00:32:38.740
It does this because it needs to
keep track of the current balance,

00:32:38.740 --> 00:32:39.340
for instance.

00:32:39.340 --> 00:32:45.090
So that observation is set
up here in the init method.

00:32:45.410 --> 00:32:48.480
So next,
since we're already registered for

00:32:48.480 --> 00:32:54.160
notifications to the transactions array,
when...

00:32:56.430 --> 00:33:02.720
When we receive a notification that the
user has added or removed an object,

00:33:02.720 --> 00:33:09.440
a transactions object, we, this method,
observe value for key path of object,

00:33:09.470 --> 00:33:12.270
change context will be invoked.

00:33:12.610 --> 00:33:15.810
This method takes a changed dictionary.

00:33:15.920 --> 00:33:19.020
This changed dictionary contains

00:33:19.340 --> 00:33:22.470
All the objects that have been removed
and all the objects that have been added.

00:33:22.580 --> 00:33:26.840
So all the objects that are removed,
we will save in an array

00:33:26.850 --> 00:33:30.300
called old transactions and the
objects that have been added,

00:33:30.320 --> 00:33:32.730
we will save in new transactions.

00:33:34.000 --> 00:33:37.380
So now, well,
what happens when the user removes

00:33:37.970 --> 00:33:41.060
one or more transaction objects?

00:33:41.280 --> 00:33:47.200
Now we'll go into this code and
we need to tell our undo manager

00:33:47.260 --> 00:33:51.940
how to add back in the objects
that the user just removed.

00:33:51.970 --> 00:33:54.060
So to do that,

00:33:54.780 --> 00:33:59.800
We tell the UndoManager
to prepare an invocation,

00:33:59.950 --> 00:34:04.480
and the method that we're going to give
it is 'Insert objects in transactions

00:34:04.480 --> 00:34:10.460
at indexes'. This method I'm going
to implement for you in a moment.

00:34:10.530 --> 00:34:14.850
Now similarly,
if the user decides to add a transaction,

00:34:15.510 --> 00:34:17.920
will go down to here,
and we need to tell the undo

00:34:17.920 --> 00:34:22.510
manager a way to remove the
transaction that the user just added.

00:34:22.760 --> 00:34:27.270
So we're going to, this time,

00:34:28.010 --> 00:34:32.140
RegisterUndoWithTarget and we're
going to give it the method

00:34:32.220 --> 00:34:35.900
removeObjectsFromTransactionsAddIndexes.

00:34:35.900 --> 00:34:39.300
Now notice this time I can use
the simple undo registration

00:34:39.390 --> 00:34:45.300
method because this method
removeObjectsFromTransactionsAddIndexes

00:34:45.300 --> 00:34:51.450
takes a single argument
which is a type of object.

00:34:53.210 --> 00:34:56.030
The user has added a
bunch of new transactions,

00:34:56.030 --> 00:35:01.010
and we want each new transaction
model object to contain a reference

00:35:01.010 --> 00:35:06.400
to the document so that it can
access the document's undo manager.

00:35:06.490 --> 00:35:11.010
So we're going to tell each new
transaction to perform the 'select

00:35:11.010 --> 00:35:13.190
or set document' on itself.

00:35:14.050 --> 00:35:20.690
So now, I'm going to go down to the end
of this method and I'm going to

00:35:20.690 --> 00:35:25.900
implement those two methods that
I referenced above to revert the changes.

00:35:27.160 --> 00:35:30.260
Insert objects and remove objects.

00:35:30.260 --> 00:35:33.930
And as you can see here,
they're basically just

00:35:33.930 --> 00:35:40.190
array insertion and removal,
but we're going to do a special thing.

00:35:40.210 --> 00:35:44.160
We're going to use mutable
array value for key.

00:35:44.540 --> 00:35:49.630
This uses a mutable array proxy so
that key value observing and key

00:35:49.640 --> 00:35:51.800
value coding compliance is maintained.

00:35:51.800 --> 00:35:53.490
Why do we need to do this?

00:35:53.560 --> 00:35:58.080
Well, we need to do this so that our
transactions controller will be

00:35:58.080 --> 00:36:01.910
notified of the change that we make.

00:36:03.160 --> 00:36:08.100
So that's all we need to do to be able
to undo adding or removing a transaction.

00:36:08.100 --> 00:36:14.360
So next I need to...

00:36:15.400 --> 00:36:28.600
[Transcript missing]

00:36:28.810 --> 00:36:31.320
wants to undo a change
made to the transactions,

00:36:31.320 --> 00:36:35.040
the transaction model object
that is logically located

00:36:35.040 --> 00:36:37.300
in the transaction model.

00:36:37.350 --> 00:36:42.580
So we're going to go to the
transactions.m implementation file.

00:36:43.630 --> 00:36:45.640
The first thing I'd like to
show you is we've already

00:36:45.640 --> 00:36:47.760
pre-populated this with the code.

00:36:47.760 --> 00:36:52.680
We need to implement the setDocument
and undoManager accessors.

00:36:52.910 --> 00:36:58.740
So this gives us a way to tell the
transaction object what the R document

00:36:58.740 --> 00:37:01.280
is and get it its undo manager.

00:37:01.340 --> 00:37:04.830
Once we've done that, we can...

00:37:05.900 --> 00:37:22.300
[Transcript missing]

00:37:22.740 --> 00:37:24.490
change to its previous value.

00:37:24.530 --> 00:37:29.220
So we're going to prepare an
invocation and we're going to

00:37:29.220 --> 00:37:31.780
give it the previous value.

00:37:32.100 --> 00:37:36.660
and All the other setter
methods follow the same pattern.

00:37:36.690 --> 00:37:40.480
So in the interest of time,
I'm not going to go over that today.

00:37:40.480 --> 00:37:43.290
You can check that out
in your sample code.

00:37:43.720 --> 00:37:46.140
So that's all we need to do there.

00:37:46.150 --> 00:37:51.890
And I'd like to now run the program
and show you how this works.

00:37:53.800 --> 00:38:00.770
So I'm going to add a bunch of objects
and I can change the descriptions.

00:38:02.500 --> 00:38:05.270
And I can delete a bunch of objects.

00:38:05.290 --> 00:38:08.570
And now notice I can undo the delete.

00:38:09.700 --> 00:38:14.300
I can start undoing the changes
I made to the descriptions,

00:38:14.320 --> 00:38:18.970
and I can undo the ads,
but I can also redo them.

00:38:19.430 --> 00:38:25.090
Now we get undo and redo support for
free because NSUndoManager keeps track of

00:38:25.090 --> 00:38:28.290
both undos and redos on the same stack.

00:38:31.040 --> 00:38:33.900
There, so that's all you need
to do to implement Undo.

00:38:33.900 --> 00:38:39.530
So next, let's go back to the slides.

00:38:42.560 --> 00:38:46.480
So next,
I'd like to talk about View Animations.

00:38:46.550 --> 00:38:50.170
So View Animations are
another new feature in Tiger.

00:38:51.200 --> 00:38:53.560
There are two new classes
that we added to Tiger:

00:38:53.630 --> 00:38:56.140
NSAnimation and NSViewAnimation.

00:38:56.220 --> 00:39:01.080
NSAnimation manages the timing
and progress of animations.

00:39:01.130 --> 00:39:04.990
Its subclass, NSViewAnimation,
provides a very simple and easy way to

00:39:05.000 --> 00:39:09.270
add transitions between views or windows.

00:39:09.600 --> 00:39:12.890
Some of those transactions include:
you can fade in or fade

00:39:12.980 --> 00:39:16.290
out a viewer window,
or you can animate a change in the

00:39:16.290 --> 00:39:19.930
size or location of a viewer window.

00:39:21.630 --> 00:39:25.840
NSV animation can manage several
animations simultaneously.

00:39:25.880 --> 00:39:30.120
So this is useful, for instance,
if you want to fade in one view

00:39:30.120 --> 00:39:32.500
while you fade out another view.

00:39:32.960 --> 00:39:36.890
Now, for each of the animations
that you want to animate,

00:39:36.890 --> 00:39:39.810
you will specify that using a dictionary.

00:39:40.120 --> 00:39:44.400
The most important thing in
the dictionary is a target key.

00:39:44.400 --> 00:39:48.400
The target key is the view or the
window that you want to animate.

00:39:48.400 --> 00:39:51.500
You can also provide
several optional keys.

00:39:51.500 --> 00:39:56.500
The effect key, you can provide fade-in
or fade-out effect.

00:39:56.500 --> 00:40:00.500
And you can also provide the start
and end frame of your animation.

00:40:00.500 --> 00:40:05.270
Now, if you do not provide the start
or the end frame of the animation,

00:40:05.270 --> 00:40:08.680
by default,
the NSFv animation class will use the

00:40:08.680 --> 00:40:11.160
current frame of your target view.

00:40:12.920 --> 00:40:17.780
So, for more examples of View Animations
and NS Animations in general,

00:40:17.780 --> 00:40:22.020
I invite you to attend session 146,
Cocoa Advanced View Techniques,

00:40:22.060 --> 00:40:23.900
Friday at 3:30 p.m.

00:40:26.260 --> 00:40:28.760
So now,
what steps do we need to do to add

00:40:28.760 --> 00:40:33.200
NS animations to our Iceman application?

00:40:33.210 --> 00:40:35.790
Well,

00:40:36.690 --> 00:40:39.840
What we want to do is,
in the detail view,

00:40:39.840 --> 00:40:44.260
when we click the disclosure triangle and
bring up the detail view or change from

00:40:44.260 --> 00:40:48.550
one detail view to another detail view,
we want a cool fade-in

00:40:48.550 --> 00:40:50.280
and fade-out effect.

00:40:50.460 --> 00:40:54.640
So, we're going to do three
animations simultaneously.

00:40:54.650 --> 00:40:59.160
The first animation we're going to do is,
we're going to fade out the

00:40:59.340 --> 00:41:01.560
old view and reposition it.

00:41:01.560 --> 00:41:04.600
Secondly,
the two views might be different sizes,

00:41:04.600 --> 00:41:07.800
so the document window
might have to resize itself.

00:41:07.800 --> 00:41:11.190
So,
we're going to animate the window resize.

00:41:11.420 --> 00:41:15.700
Third, we're going to fade in
and expand the new view.

00:41:16.500 --> 00:41:20.280
And now, once we've created all three
of our animation dictionaries,

00:41:20.280 --> 00:41:23.400
we're going to concatenate
them into a single list.

00:41:23.530 --> 00:41:25.840
Then we can run the animation.

00:41:25.940 --> 00:41:29.270
Once the animation is done running,
then we can clean up any

00:41:29.280 --> 00:41:31.400
temporary state that we set up.

00:41:31.490 --> 00:41:35.080
So now let's go to the demo,
and I'll show you this in action.

00:41:37.270 --> 00:41:44.680
So, let's go to the
expandableviewcontroller.m file.

00:41:44.730 --> 00:41:51.260
And this file contains the logic
for controlling our detail view,

00:41:51.260 --> 00:41:54.450
expanding and hiding our detail view.

00:41:54.530 --> 00:41:59.210
So all that logic is contained
in the updateView method here.

00:42:01.660 --> 00:42:05.600
So the first thing that I need to
do is there could be a previous

00:42:05.600 --> 00:42:07.600
animation already running.

00:42:07.670 --> 00:42:14.050
So if that is the case,
let's go down here,

00:42:14.050 --> 00:42:16.630
and I'm going to add some code.

00:42:18.930 --> 00:42:20.060
just handled that case.

00:42:20.110 --> 00:42:23.230
Now,
if previous animation is already running,

00:42:23.300 --> 00:42:26.790
I will set its progress to one
to display its final frame,

00:42:26.790 --> 00:42:29.580
and then I'm going to stop the animation.

00:42:29.960 --> 00:42:33.760
So now let's start and create
our three animation dictionaries.

00:42:33.880 --> 00:42:36.550
The first one I'm going to do is

00:42:37.120 --> 00:42:41.540
Here,
we are abruptly hiding the old view.

00:42:41.580 --> 00:42:44.180
So now I want this view to fade out.

00:42:44.250 --> 00:42:49.860
So I'm going to replace
it with an entry in our,

00:42:49.860 --> 00:42:49.860
a div.

00:42:50.220 --> 00:42:54.540
and Before I do that,
I need to calculate the

00:42:55.050 --> 00:42:57.100
old view's final frame.

00:42:57.100 --> 00:43:00.210
This code calculates that.

00:43:00.740 --> 00:43:04.030
Then I'm going to create its dictionary.

00:43:04.090 --> 00:43:07.190
The target key will be the current view.

00:43:08.540 --> 00:43:10.830
The effect key will be FadeOutEffect.

00:43:10.840 --> 00:43:15.980
And the end frame is the frame
we just calculated above.

00:43:16.290 --> 00:43:21.570
Lastly, I will add the dictionary to
our array of view animations.

00:43:23.310 --> 00:43:25.560
Now we're done with the first dictionary.

00:43:25.750 --> 00:43:31.200
The next one is our
window resize dictionary.

00:43:31.270 --> 00:43:34.970
So here we're resizing the window.

00:43:35.290 --> 00:43:38.200
We want the window resize
to take place simultaneously

00:43:38.200 --> 00:43:41.760
as our other tree animation,
so we're going to replace this

00:43:41.760 --> 00:43:44.510
with another entry in our list.

00:43:44.920 --> 00:43:50.240
So, first thing we need to do is we're
going to nudge the Windows frame

00:43:50.310 --> 00:43:51.830
to a non-integral value.

00:43:52.090 --> 00:43:54.510
Now,
this is actually sort of a workaround

00:43:54.610 --> 00:43:56.120
for a bug in NSView animation.

00:43:56.120 --> 00:43:59.360
The reason is,

00:43:59.520 --> 00:44:06.870
If the end frame of the animation
is the same as the frame's current,

00:44:06.870 --> 00:44:13.060
is the same as the Windows frame,
then it won't actually animate anything.

00:44:13.060 --> 00:44:16.390
So we're going to do a little tweak here.

00:44:17.200 --> 00:44:21.400
So then we're going to
create the dictionary.

00:44:21.480 --> 00:44:24.810
The target key will be
the document window.

00:44:26.570 --> 00:44:31.860
and the end frame will be
the frame we nudged up here.

00:44:31.880 --> 00:44:36.180
And then we're going to append
the dictionary to our list.

00:44:36.220 --> 00:44:38.650
So, lastly,

00:44:39.470 --> 00:44:43.230
We need to create a dictionary
for our final animation,

00:44:43.260 --> 00:44:46.400
which is the fade-in of the new
view that we're going to show.

00:44:46.400 --> 00:44:51.410
So here we're going to replace this code
where it abruptly unhides the new view,

00:44:51.410 --> 00:44:57.400
and as before, we're going to create the
new view's start frame,

00:44:57.420 --> 00:44:59.810
calculate the new view's start frame.

00:45:00.030 --> 00:45:02.720
So this code is actually
pretty complicated.

00:45:02.740 --> 00:45:05.800
I don't have time to get into it here,
but you all have this sample code.

00:45:05.800 --> 00:45:08.380
You can take a look at this yourself.

00:45:09.470 --> 00:45:15.290
And as before, we're going to,
once we've set up our frame,

00:45:15.290 --> 00:45:17.590
we're going to create its dictionary.

00:45:17.630 --> 00:45:20.270
Its target key will be the new view.

00:45:22.500 --> 00:45:26.100
And the effect will be Fade In.

00:45:26.100 --> 00:45:28.540
And then we're going to give
it the start frame and the

00:45:28.540 --> 00:45:30.810
end frame we calculated above.

00:45:30.860 --> 00:45:35.740
And last, we're going to add it to
our list of view animations.

00:45:36.110 --> 00:45:39.100
So now that we have a
list of three animations,

00:45:39.140 --> 00:45:43.800
we can create the animation and run it.

00:45:44.570 --> 00:45:49.520
So I'm going to go down here and
we're going to instantiate an

00:45:49.520 --> 00:45:55.890
instance of NSV animation using
our array that we created above.

00:45:56.390 --> 00:46:00.680
Then I'm going to set ourself as
the delegate so that we get called

00:46:00.680 --> 00:46:03.180
when the animation stops or ends.

00:46:03.260 --> 00:46:06.090
And then I'm going to start
running the animation.

00:46:06.500 --> 00:46:10.550
So now notice before,
we used to have this

00:46:10.550 --> 00:46:12.410
auto-resizing code here.

00:46:12.410 --> 00:46:15.830
Now, this no longer makes sense to be
here because at this point the

00:46:16.250 --> 00:46:17.690
animation could still be running.

00:46:17.750 --> 00:46:22.520
So we're going to move
it down to a later point.

00:46:24.440 --> 00:46:30.460
So now, since we're the delegate
of the animation,

00:46:30.620 --> 00:46:32.860
when the animation stops,
we're going to get called.

00:46:32.860 --> 00:46:38.370
So we're going to take this
opportunity to do some cleanup.

00:46:39.030 --> 00:46:42.940
So in the animationDidStop,
we're going to invoke animationDidEnd and

00:46:42.940 --> 00:46:46.700
we're going to implement animationDidEnd.

00:46:46.700 --> 00:46:51.900
And we can clean up all the
temporary state we've set up,

00:46:51.930 --> 00:46:53.040
including the origins.

00:46:53.040 --> 00:46:56.780
We've changed the origins
around during the animation.

00:46:56.780 --> 00:47:00.030
We need to tell the table
view to redisplay itself,

00:47:00.160 --> 00:47:01.560
et cetera, et cetera.

00:47:01.560 --> 00:47:04.990
And then we release the
animation and set it to nil.

00:47:05.270 --> 00:47:07.790
And now at this point,
we can go back and restore

00:47:07.790 --> 00:47:12.470
the resizing behavior of the
other views in the window.

00:47:12.840 --> 00:47:15.090
So now, that's it, we're done.

00:47:15.430 --> 00:47:19.480
So now, well, what does this look like?

00:47:19.480 --> 00:47:22.200
Let's run it.

00:47:24.030 --> 00:47:28.580
And... let's add a bunch of items.

00:47:28.580 --> 00:47:30.700
Resize this a little bit.

00:47:30.760 --> 00:47:34.120
Now notice if I click
the disclosure triangle,

00:47:34.120 --> 00:47:40.270
you see there, we have a nice sort of
shrinking and expanding effect.

00:47:40.350 --> 00:47:43.160
If I click between the
bank and the stock view,

00:47:43.200 --> 00:47:46.020
the bank view will fade out and
the stock view will fade in.

00:47:46.110 --> 00:47:50.010
And we also continue to do
this sort of expanding and

00:47:51.400 --> 00:48:08.600
[Transcript missing]

00:48:10.000 --> 00:48:13.780
So that concludes my
portion of the talk today.

00:48:13.820 --> 00:48:16.200
Go back to the slides.

00:48:16.310 --> 00:48:20.730
Next, I'd like to introduce Corbin Dunn,
who will teach you all how to use

00:48:20.730 --> 00:48:27.780
Spotlight and implement searching
technology in your applications.

00:48:29.500 --> 00:48:30.660
Thanks, Hansen.

00:48:30.820 --> 00:48:32.490
So, my name is Corbin Dunn.

00:48:32.550 --> 00:48:35.650
I work for the Application Kit in
Cocoa at Apple.

00:48:35.650 --> 00:48:39.760
And today, I'm going to show you how to
add three cool new features

00:48:39.760 --> 00:48:42.110
to our Tiger application here.

00:48:42.120 --> 00:48:45.880
First, I'm going to show you how to add
a cool search field to the toolbar

00:48:45.880 --> 00:48:47.910
on our little applications window.

00:48:47.910 --> 00:48:50.660
That way we can filter on
and find exactly what we want

00:48:50.660 --> 00:48:52.590
inside of that document file.

00:48:52.600 --> 00:48:54.820
Second, well, think about searching.

00:48:54.820 --> 00:48:58.280
You're trying to find this one
little file on your huge hard drive.

00:48:58.460 --> 00:48:59.650
It can be kind of hard to do.

00:48:59.800 --> 00:49:02.660
So, in Tiger, we add this cool new
feature called Spotlight,

00:49:02.760 --> 00:49:04.590
allowing you to easily find things.

00:49:04.670 --> 00:49:06.910
So,
we need to tell the Spotlight database

00:49:07.000 --> 00:49:09.150
about our custom iSpin file format.

00:49:09.160 --> 00:49:11.320
So, to do that,
we're going to go ahead and write

00:49:11.440 --> 00:49:12.910
a Spotlight metadata plugin.

00:49:12.910 --> 00:49:16.680
The third and final thing I'm going
to show you how to do is to further

00:49:16.680 --> 00:49:20.420
take advantage of Spotlight by
adding a Spotlight search window

00:49:20.770 --> 00:49:22.440
directly inside of our application.

00:49:22.440 --> 00:49:24.430
So, let's jump right into it.

00:49:24.430 --> 00:49:26.000
A toolbar search field.

00:49:26.040 --> 00:49:27.220
What does that mean?

00:49:27.220 --> 00:49:29.000
As you see in this
little screenshot here,

00:49:29.000 --> 00:49:32.050
we're adding this custom,
an NS custom view to the

00:49:32.050 --> 00:49:33.540
top right of the toolbar.

00:49:33.630 --> 00:49:35.320
And it's pretty easy to do.

00:49:35.320 --> 00:49:38.280
So, adding a search field.

00:49:38.280 --> 00:49:39.560
Oops, let me go back.

00:49:39.780 --> 00:49:39.990
Okay.

00:49:40.270 --> 00:49:41.350
First, how do we do it?

00:49:41.950 --> 00:49:49.390
Inside the my document nib file,
we will add an NS custom view to the nib.

00:49:49.770 --> 00:49:52.730
On-site of that,
we will add an NSSearch field

00:49:52.790 --> 00:49:54.940
inside of the custom view.

00:49:56.600 --> 00:49:59.490
Then we're going to need
to access it in code,

00:49:59.490 --> 00:50:03.010
so we will add an outlet that
connects the NSSearch field

00:50:03.220 --> 00:50:06.600
up to the My Document header
file and access it in code.

00:50:06.740 --> 00:50:09.370
Finally, new in Tiger,
we can add some bindings and we can

00:50:09.370 --> 00:50:13.390
bind the NSSearch field and have it
automatically filter the array controller

00:50:13.660 --> 00:50:15.590
to see exactly what we want to see.

00:50:15.600 --> 00:50:17.600
What are the bindings?

00:50:17.600 --> 00:50:19.590
Well, the bindings that we'll be
looking for is the predicate,

00:50:19.650 --> 00:50:22.600
which is done with an NSSearch predicate.

00:50:22.600 --> 00:50:27.240
It looks like this thing you see here,
this description string contains with

00:50:27.290 --> 00:50:29.600
a little bracket 'c' dollar sign value.

00:50:29.600 --> 00:50:32.600
I'll go into further exactly
what that is in a little bit,

00:50:32.620 --> 00:50:34.600
but that predicate is going
to be our description,

00:50:34.600 --> 00:50:36.590
which we want to search on.

00:50:36.660 --> 00:50:39.580
Once you have one predicate bound,
you can bind to another one.

00:50:39.600 --> 00:50:43.200
So the second predicate that we're
going to bind to is going to be this

00:50:43.420 --> 00:50:48.240
type contains dollar sign value,
and that's going to be for the category.

00:50:48.350 --> 00:50:50.670
So I'm going to present a little
bit more information on NSPredicate

00:50:50.680 --> 00:50:53.140
a little bit later in the session,
so you'll have to bear

00:50:53.150 --> 00:50:54.450
with me for just a second.

00:50:54.540 --> 00:50:59.040
Finally, to add the actual custom view,
we'll access that outlet and inside

00:50:59.040 --> 00:51:02.550
a code we'll create the toolbar
item and it'll all fall together.

00:51:02.630 --> 00:51:07.690
So let's go to a demo on
how to exactly do this.

00:51:10.100 --> 00:51:13.000
What I have here is the iSpin04 project.

00:51:13.120 --> 00:51:16.480
And inside of it,
I'm going to go ahead and double-click

00:51:16.500 --> 00:51:22.220
on the mydocument.niv file and
open it up in Airface Builder.

00:51:22.540 --> 00:51:27.200
So,
we need to add an NS custom view here.

00:51:27.250 --> 00:51:29.680
So,
I'm going to go over and drag a custom

00:51:29.680 --> 00:51:32.860
view on over to the my document nib file.

00:51:34.170 --> 00:51:39.660
And let's just rename
this to 'Search View'.

00:51:40.670 --> 00:51:43.450
Alright,
so we have that search view there.

00:51:43.500 --> 00:51:47.210
Now if we go over to the text section,
I'm going to go ahead and grab

00:51:47.210 --> 00:51:51.790
an NSSearch field over here,
drop it on down to the search view.

00:51:52.000 --> 00:51:53.900
We'll make it a little larger.

00:51:54.010 --> 00:51:56.130
Alright,
and we want to access it in code,

00:51:56.230 --> 00:52:00.140
so we want to have an outlet for it.

00:52:00.250 --> 00:52:02.300
So I'm going to go over
to the files owner,

00:52:02.300 --> 00:52:06.290
is the 'My Document'. I'm
going to go to the classes.

00:52:06.650 --> 00:52:09.540
Go to the Outlets
section in the Inspector,

00:52:09.550 --> 00:52:13.970
add a new outlet, and this is going to be
the Search Field outlet.

00:52:14.010 --> 00:52:15.560
And what is the type?

00:52:15.720 --> 00:52:19.970
Well, it's an NSSearchField,
so we're going to fill that in.

00:52:21.110 --> 00:52:24.080
All right,
and I'm going to go over to code,

00:52:24.080 --> 00:52:26.420
and we have to add the same type
of thing inside the header file.

00:52:26.430 --> 00:52:32.230
So inside of mydocument.h,
so here's the mydocument header.

00:52:32.800 --> 00:52:37.800
So inside of here, I'll just paste in the
NSSearchField outlet.

00:52:37.800 --> 00:52:42.590
All right,
now back over to Interface Builder.

00:52:44.880 --> 00:52:48.200
So now we need to actually hook that
up so I can control drag from the

00:52:48.270 --> 00:52:52.200
files owner on over to the search field
and this is the typical outlet hookup

00:52:52.200 --> 00:52:53.800
stuff that you're probably used to.

00:52:53.800 --> 00:52:55.790
Now we need to do some bindings.

00:52:55.800 --> 00:53:01.700
So we can click on that NSSearch field,
go over to the binding section, and now,

00:53:01.700 --> 00:53:05.800
new in Tiger,
we have this predicate binding here,

00:53:05.800 --> 00:53:08.790
and if I click bind,

00:53:09.000 --> 00:53:21.920
The key path is the key path in our
model that we want to filter on.

00:53:21.930 --> 00:53:30.350
We want a display name of 'Description'.
I can cheat and drop down the model key

00:53:30.350 --> 00:53:34.840
path section and see what's in my model.

00:53:34.900 --> 00:53:37.130
One of the items is 'Description' string.

00:53:37.150 --> 00:53:38.690
That was the name of my model.

00:53:38.840 --> 00:53:43.980
I'm going to replace the word 'key
path' with 'Description' string.

00:53:44.430 --> 00:53:49.230
After contains,
I'm going to add a little bracket

00:53:49.230 --> 00:53:52.290
'c' so it's case insensitive.

00:53:52.720 --> 00:53:56.200
So once we have one predicate bound,
we can bind another predicate.

00:53:56.240 --> 00:54:00.210
So let's go ahead and bind
another one here in a similar way.

00:54:00.220 --> 00:54:03.350
This one, we're gonna call it
'category'. And again,

00:54:03.350 --> 00:54:05.310
the model keypath,
I'm not sure what the keypath was,

00:54:05.320 --> 00:54:07.810
so I can kind of drop it down
and try and figure it out.

00:54:07.820 --> 00:54:09.840
I guess category is type.

00:54:09.860 --> 00:54:14.800
So I'm gonna go ahead and
make this type contains,

00:54:14.850 --> 00:54:18.550
it's really tiny, I'm sorry, c value.

00:54:19.650 --> 00:54:22.200
Alright,
so that hooks up the predicate bindings.

00:54:22.200 --> 00:54:27.150
So now we can go back over to
Xcode and actually create the item.

00:54:27.360 --> 00:54:32.300
So, inside of Xcode we have a category
that does all the toolbar work.

00:54:32.300 --> 00:54:38.330
In here, the first thing that you see,
there's this line here,

00:54:38.370 --> 00:54:41.350
which is an identifier,
search toolbar item identifier.

00:54:41.490 --> 00:54:45.020
We're gonna use that to identify
our search toolbar item.

00:54:45.500 --> 00:54:47.750
We have a couple
delegate methods in here.

00:54:47.850 --> 00:54:49.440
Here's the first important one.

00:54:49.510 --> 00:54:54.060
The toolbar, item for identifier,
will be inserted in the toolbar.

00:54:54.140 --> 00:54:57.440
And what you see here is you
can see that it already has the,

00:54:57.440 --> 00:55:01.270
or first thing it does is
it creates a toolbar item.

00:55:01.510 --> 00:55:05.120
and it's creating the
specifics for the add button.

00:55:05.180 --> 00:55:07.640
It creates the specifics
for the delete button,

00:55:07.700 --> 00:55:09.280
for the save button.

00:55:09.340 --> 00:55:13.820
And so we want to add a
section for a new search field.

00:55:13.910 --> 00:55:16.790
So inside of here,
I'm gonna see if that item identifier

00:55:17.300 --> 00:55:19.800
is the search toolbar item identifier.

00:55:19.850 --> 00:55:22.900
And if it is, oops,

00:55:24.710 --> 00:55:27.540
And if it is,
we're going to add some code here.

00:55:27.570 --> 00:55:29.720
So first I'm going to set
up the standard properties.

00:55:29.750 --> 00:55:32.000
So I'm going to set the
label to be our search,

00:55:32.030 --> 00:55:34.260
set the palette label
and set the tool tip.

00:55:34.280 --> 00:55:41.160
But the thing that really does the work
is using the toolbar item set view.

00:55:41.170 --> 00:55:43.120
I'm setting it to that
search field outlet.

00:55:43.140 --> 00:55:46.950
So it's going to take that NS custom view
and drop it directly into our toolbar.

00:55:46.960 --> 00:55:50.870
Finally,
the last thing I'm going to do is

00:55:51.400 --> 00:56:09.400
[Transcript missing]

00:56:10.200 --> 00:56:14.890
I should be able to open up
something with a bunch of files.

00:56:14.930 --> 00:56:16.470
And now we have a cool
little search field.

00:56:16.580 --> 00:56:19.440
So as you see,
description category there,

00:56:19.460 --> 00:56:21.870
and let's search for a deposit.

00:56:21.900 --> 00:56:24.000
So it filters on deposit.

00:56:24.020 --> 00:56:27.660
We can drop it down to category,
and let's say I want to see meals.

00:56:27.660 --> 00:56:31.560
I must have typed something in wrong,
as it's not quite working.

00:56:31.570 --> 00:56:33.490
Well, normally it would work.

00:56:34.980 --> 00:56:36.880
Oh, well anyways,
so it would normally work,

00:56:36.950 --> 00:56:39.660
but I have a typo.

00:56:39.930 --> 00:56:43.470
Alright,
so let's go back over to some slides.

00:56:45.180 --> 00:56:48.600
Second thing I'm going to show is how
to create a Spotlight metadata plugin.

00:56:48.700 --> 00:56:51.410
Hopefully you went to yesterday's
talk where we went over the

00:56:51.410 --> 00:56:54.090
details of exactly how to do this,
so I'm going to quickly cover it.

00:56:54.580 --> 00:57:01.090
But what this does,
it allows the Spotlight database to

00:57:01.090 --> 00:57:01.090
know about our custom file formats.

00:57:01.480 --> 00:57:02.060
How does it do it?

00:57:02.300 --> 00:57:05.800
It does it via UTI,
a universal type identifier.

00:57:05.810 --> 00:57:09.580
And in this case,
it's com.apple.ispin.document that

00:57:09.670 --> 00:57:12.270
identifies our iSpin documents.

00:57:12.460 --> 00:57:17.220
With that, we can write an importer,
or sorry, a Spotlight metadata plugin,

00:57:17.260 --> 00:57:20.310
which will fill in custom attributes.

00:57:20.520 --> 00:57:23.840
mditem.h has some custom
attributes defined for us,

00:57:23.840 --> 00:57:27.900
and we can fill in the KMDItem
text content for the particular

00:57:28.260 --> 00:57:30.130
text content of our file.

00:57:30.180 --> 00:57:32.300
We can also define custom attributes.

00:57:32.340 --> 00:57:36.280
For our iSpin files,
we can fill in the total balance.

00:57:36.390 --> 00:57:39.870
So we'll define one called
com_apple_iSpinBalance,

00:57:39.870 --> 00:57:43.500
which will contain the
total balance for that file.

00:57:43.730 --> 00:57:45.840
So the Icebin metadata plugin.

00:57:45.970 --> 00:57:49.550
What's done is inside of Xcode,
I just use the wizard to create a

00:57:49.560 --> 00:57:53.510
new metadata importer plugin project.

00:57:54.270 --> 00:57:58.740
Then I added some proper entries
into schema.xml and Info.plist.

00:57:58.740 --> 00:58:01.680
I'll quickly go over exactly what I did.

00:58:01.860 --> 00:58:06.030
Then the most important part is
to fill in getMetadataForFile.

00:58:06.140 --> 00:58:09.340
There's a function called
getMetadataForFile.

00:58:09.400 --> 00:58:12.640
Inside of it,
we have a CFMutableDictionaryRef

00:58:12.640 --> 00:58:16.040
with called attributes,
where we fill in the attributes

00:58:16.040 --> 00:58:18.180
that we want for that file.

00:58:18.950 --> 00:58:20.100
Now, what will we do?

00:58:20.150 --> 00:58:23.420
Well, we're going to go ahead and
load path to file into an

00:58:23.420 --> 00:58:26.170
NSData object and deserialize it.

00:58:26.230 --> 00:58:28.690
Our custom file format
is really just a plist.

00:58:28.860 --> 00:58:31.860
So here we're going to use property
list from data to deserialize it.

00:58:31.980 --> 00:58:34.820
We can then walk through each
of the transaction items,

00:58:34.850 --> 00:58:39.180
concatenate all the strings together to
generate one total description string,

00:58:39.230 --> 00:58:42.740
and we can concatenate all the balances
together to find a total balance

00:58:43.100 --> 00:58:45.770
and then set the custom attributes.

00:58:46.040 --> 00:58:49.080
So then once that's done,
we'll compile it and install it.

00:58:49.090 --> 00:58:51.670
Just compile the project
like usual in Xcode.

00:58:51.710 --> 00:58:55.400
To install it, you drop it into Tilda
Library Spotlight or Library Spotlight,

00:58:55.440 --> 00:58:58.800
depending on exactly where you
want and how you want it to work.

00:58:58.840 --> 00:59:01.480
So let's give a quick demo of that.

00:59:05.700 --> 00:59:12.930
So, I'm going to go ahead and open
up the Spotlight plug-in project.

00:59:14.240 --> 00:59:19.740
And inside of here,
we have the schema.xml file.

00:59:19.760 --> 00:59:22.800
The key thing to notice,
we're defining some custom attributes.

00:59:22.800 --> 00:59:26.280
So inside of the attributes section,
there's that one I mentioned,

00:59:26.280 --> 00:59:29.740
com apple ispin balance,
which is a CFNumber.

00:59:29.820 --> 00:59:32.370
There's also a few others added here.

00:59:33.150 --> 00:59:39.160
Then for the types, we have our UTI,
the COM Apple iSpin document.

00:59:39.250 --> 00:59:44.090
This is telling the Spotlight database
that these are the types of documents

00:59:44.090 --> 00:59:46.830
that our importer actually imports.

00:59:46.870 --> 00:59:49.930
We tell it the attributes
that we actually handle.

00:59:50.000 --> 00:59:53.750
So inside of here, we see that balance
attribute that we defined,

00:59:53.750 --> 00:59:56.740
and we're going to use
one of the standard ones,

00:59:56.740 --> 00:59:58.180
KMDItemTextContent.

00:59:58.910 --> 01:00:02.410
Next, we'll notice that we have the
transaction inside of our project

01:00:02.500 --> 01:00:04.800
so we can access our model.

01:00:04.970 --> 01:00:09.380
Then inside of 'Get Metadata for File',
there's that standard 'Get Metadata for

01:00:09.380 --> 01:00:11.800
File'. Now it has a bunch of code here.

01:00:11.800 --> 01:00:13.800
Again, as I said,
it iterates through everything.

01:00:13.810 --> 01:00:16.800
If you have any questions,
feel free to come to the lab afterwards.

01:00:16.800 --> 01:00:18.800
I'm going to just highlight
this key portion here.

01:00:18.800 --> 01:00:22.720
We take that CF mutable
dictionary ref and we just,

01:00:22.810 --> 01:00:26.800
via tool-free bridging,
typecast it to an NS mutable dictionary.

01:00:26.800 --> 01:00:31.790
Use the typical set object for
key in this dictionary pattern

01:00:31.840 --> 01:00:37.880
to fill in the total balance
for that key that we defined,

01:00:38.140 --> 01:00:39.800
com apple ispin balance.

01:00:39.800 --> 01:00:42.700
In addition,
I computed the total descriptions

01:00:42.700 --> 01:00:47.800
in this one string and I used
the typical set object for key

01:00:47.910 --> 01:00:49.800
of the KMDItem text content.

01:00:49.800 --> 01:00:54.800
And that way the importer will
import all those values for us.

01:00:54.800 --> 01:00:58.510
So let's go back on over to some slides.

01:01:00.960 --> 01:01:01.870
Spotlight search window.

01:01:02.020 --> 01:01:04.350
This is the third and final
thing I'm going to go over.

01:01:04.420 --> 01:01:06.420
As you see in that screenshot,
I'm going to show how to add

01:01:06.440 --> 01:01:09.700
a cool little search window
directly inside of our application.

01:01:09.800 --> 01:01:13.800
Now, we could search for all the files
in the system for whatever we

01:01:13.800 --> 01:01:16.140
wanted or just in our application.

01:01:16.170 --> 01:01:20.050
We're going to do it just inside
of our application by limiting

01:01:20.050 --> 01:01:22.010
it to just that particular UTI.

01:01:23.400 --> 01:01:27.970
So what I already did here is I have
the view search window menu item

01:01:27.970 --> 01:01:31.540
hooked up to display this window.

01:01:31.540 --> 01:01:35.320
And that window is just a new
nib file with a window in it.

01:01:35.340 --> 01:01:40.400
And it has a, inside of the search panel,
it has a table view with a couple of

01:01:40.400 --> 01:01:43.550
columns and in a search field on the top.

01:01:44.000 --> 01:01:45.460
In addition, we need to control it.

01:01:45.640 --> 01:01:48.870
So I created this file,
search_controller.h and

01:01:48.870 --> 01:01:54.020
search_controller.m that we're going to
use to actually access it and code to it.

01:01:54.090 --> 01:01:58.290
So editing search_controller.h,
what's inside of here?

01:01:58.510 --> 01:02:02.350
The key thing is NSMetadataQuery.

01:02:02.470 --> 01:02:05.400
It is the Cocoa entry
port into our searches.

01:02:05.400 --> 01:02:09.310
So inside of our search controller file,
inside of the header,

01:02:09.390 --> 01:02:13.400
we'll have an instance of it,
an instance variable called _Query.

01:02:13.400 --> 01:02:15.400
We'll also have a search key.

01:02:15.400 --> 01:02:19.320
Now the reasons we have these is we
want to expose them for bindings.

01:02:19.400 --> 01:02:21.400
The search key we'll use to
bind it to the search field,

01:02:21.400 --> 01:02:25.400
and whenever that search field changes,
it'll change the search key.

01:02:25.400 --> 01:02:29.400
The query will be exposed so we
can actually bind to the results.

01:02:29.400 --> 01:02:31.400
So exposing it for bindings.

01:02:31.400 --> 01:02:35.390
So you see the query,
that's going to be how we expose it.

01:02:35.620 --> 01:02:37.400
And what can we bind to?

01:02:37.400 --> 01:02:41.400
Up here is a little snippet of
the header for NSMetadataQuery.

01:02:41.400 --> 01:02:47.390
In it, it has this NSArrayResults,
which are the results from the search.

01:02:47.500 --> 01:02:50.350
The results is an array
of NSMetadataItems.

01:02:50.400 --> 01:02:54.400
Now they are bindable,
so we can directly bind to any of the

01:02:54.400 --> 01:02:55.400
attributes that we want to bind to.

01:02:55.430 --> 01:03:01.110
So we can find the name of the item,
the name of the file system name,

01:03:01.110 --> 01:03:05.400
and that's what we'll go
ahead and directly do.

01:03:05.400 --> 01:03:10.710
So in addition, we want to expose the
search key for bindings.

01:03:10.850 --> 01:03:12.830
That's done pretty standard.

01:03:12.840 --> 01:03:17.600
We'll have the search key accessor
and a set search key writer.

01:03:17.630 --> 01:03:21.680
Inside set search key,
it's going to call this custom function

01:03:21.870 --> 01:03:28.400
'createSearchPredicate'. Now that
gets back into what is NSPredicate?

01:03:28.420 --> 01:03:33.230
Well, NSPredicate, on its simplest sense,
it's used to define logical conditions

01:03:33.420 --> 01:03:35.180
for filtering and searching.

01:03:35.240 --> 01:03:36.550
So what does that mean?

01:03:36.700 --> 01:03:40.410
For example,
a description like 'Tom', that would

01:03:40.460 --> 01:03:44.680
return something where it matches
'Tom' or 'Thomas' or 'Tomato'.

01:03:44.710 --> 01:03:49.800
You could use equals to filter on
just equal to that and not like it.

01:03:49.800 --> 01:03:52.220
In addition,
there's a descendant class of

01:03:52.220 --> 01:03:55.300
NSPredicate called NSCompoundPredicate.

01:03:55.300 --> 01:03:58.560
That allows you to combine
two predicates into a new one.

01:03:58.720 --> 01:04:01.690
So you could have description like
'Tom', description like 'Fred',

01:04:01.840 --> 01:04:04.040
combine them together with 'or',
and you have a new predicate,

01:04:04.040 --> 01:04:07.200
which is the 'or'
combination of both of those.

01:04:07.200 --> 01:04:10.150
So I highly recommend reading the
documentation for in this predicate

01:04:10.210 --> 01:04:13.450
because I'm just lightly covering it.

01:04:14.140 --> 01:04:17.730
So creating the search predicate goes
back to that custom method called

01:04:17.730 --> 01:04:21.780
'CreateSearchPredicate'. Inside of it,
I'm going to lightly go over this,

01:04:21.790 --> 01:04:25.620
and then I'm going to go over it again
in code to further emphasize the points.

01:04:25.640 --> 01:04:28.830
So inside of here, the first line,
it's creating a predicate

01:04:29.230 --> 01:04:34.840
where the KMDItemTextContent is
like the search key passed in.

01:04:34.880 --> 01:04:38.790
So that's going to filter on exactly
what was given to us as a search key.

01:04:38.850 --> 01:04:41.980
The second line is
creating another predicate,

01:04:42.000 --> 01:04:47.340
and that one,
it's KMDItemContentType is equal to RUTI.

01:04:47.360 --> 01:04:50.590
So that's going to filter
on exactly RUTI file types.

01:04:50.630 --> 01:04:53.940
So I use NSCompoundPredicate
and predicate,

01:04:53.950 --> 01:04:57.440
or and predicate with
sub-predicate to take those two,

01:04:57.460 --> 01:05:00.610
and them together to a one,
and that way I limit it to RUTI for

01:05:00.610 --> 01:05:02.210
exactly what we want to find.

01:05:02.370 --> 01:05:07.580
Then I call querySetPredicate and
queryStartQuery to get it all rolling.

01:05:07.580 --> 01:05:08.490
How does it actually work?

01:05:08.650 --> 01:05:11.010
Well,
bindings is how it actually all works.

01:05:11.090 --> 01:05:14.800
We'll drop an NSArrayController down,
set the content array to

01:05:14.830 --> 01:05:18.410
bind to query.results,
which we exposed.

01:05:18.450 --> 01:05:22.760
The table column one,
we're going to just bind the value to the

01:05:22.760 --> 01:05:25.970
KMDItemFS name in the arranged objects.

01:05:26.010 --> 01:05:29.810
So that's inside the arranged
objects of query.results.

01:05:30.090 --> 01:05:32.860
Another one from Balance is
going to be bound to our custom

01:05:32.860 --> 01:05:36.440
attribute that we defined:
com.apple.ispin.balance.

01:05:36.510 --> 01:05:40.170
So let's give a demo on
how to exactly do this.

01:05:42.060 --> 01:05:46.510
So this is back to the iSpin04 project.

01:05:46.510 --> 01:05:49.600
So inside of the
search_controller.h file,

01:05:49.600 --> 01:05:53.680
you can see that here's that
instance of NSMetadataQuery and

01:05:53.680 --> 01:05:55.880
also the search key NSString.

01:05:56.050 --> 01:06:00.900
So let's go over to the .m file,
search-controller.m.

01:06:00.950 --> 01:06:06.110
So in the init,
we're going to do the typical

01:06:06.640 --> 01:06:10.400
NS Metadata Query alloc init
pattern that you see everywhere.

01:06:10.440 --> 01:06:13.140
Then we're going to
create a sort descriptor.

01:06:13.180 --> 01:06:18.440
This sort descriptor is going to be
inited with a key of KMDItemFS name.

01:06:18.470 --> 01:06:22.130
So this will allow the query
results to automatically be filtered

01:06:22.390 --> 01:06:24.320
on the file system name for us.

01:06:24.350 --> 01:06:28.700
So we create an array with that object
and call QuerySetSortDescriptors.

01:06:28.740 --> 01:06:33.090
You could have other sorts of
descriptors to sub-sort if you wanted.

01:06:34.510 --> 01:06:37.730
Next, we need to expose some
things for bindings.

01:06:37.760 --> 01:06:39.300
So the query is going to be exposed.

01:06:39.430 --> 01:06:41.150
Pretty simple.

01:06:41.900 --> 01:06:45.560
Then the search key is
going to be exposed.

01:06:45.610 --> 01:06:49.160
The key portion in setSearchKey,
so when the search key changes,

01:06:49.220 --> 01:06:52.090
I'm going to call this
createSearchPredicate method.

01:06:52.150 --> 01:06:53.840
So createSearchPredicate.

01:06:54.140 --> 01:06:55.700
What are we doing here?

01:06:55.760 --> 01:06:58.180
Again,
we want the KMDItem text content to

01:06:58.180 --> 01:07:00.260
be like that string passed to us.

01:07:00.320 --> 01:07:04.400
So I use NSPredicate,
predicateWithFormat,

01:07:04.420 --> 01:07:07.150
given that predicate format,
and the search key that we

01:07:07.230 --> 01:07:09.570
had already given to us.

01:07:10.070 --> 01:07:14.350
Next,
we want to limit it to just our files.

01:07:14.380 --> 01:07:18.160
So inside of here,
I'm looking for when the

01:07:18.160 --> 01:07:24.390
CamDatom content type is our UTI,
the com.apply.spin document.

01:07:24.540 --> 01:07:30.070
Finally, we have to take those two,
use NSCompoundPredicate and predicate

01:07:30.070 --> 01:07:33.790
with sub-predicates to combine
them together to create a new one,

01:07:33.790 --> 01:07:34.900
and then do something with it.

01:07:34.900 --> 01:07:38.100
So we'll go query, set predicate,
and query,

01:07:38.100 --> 01:07:40.450
start query to get all rolling.

01:07:40.510 --> 01:07:43.150
Then the real magic happens
inside of the bindings.

01:07:43.330 --> 01:07:46.400
So I'm going to open up search-pound.nib.

01:07:46.400 --> 01:07:49.010
Let me close some other stuff here.

01:07:51.500 --> 01:07:55.930
Alright, so inside the search panel,
we want an array controller,

01:07:55.930 --> 01:07:58.300
so we're going to go
over to the controllers,

01:07:58.350 --> 01:08:02.180
drag an array controller down
over to the search panel.

01:08:02.490 --> 01:08:05.140
We're going to go over to the bindings.

01:08:05.200 --> 01:08:08.790
And the content array, well,
what did we expose?

01:08:08.790 --> 01:08:12.560
First of all,
we exposed it in the search controller,

01:08:12.560 --> 01:08:14.440
so I'm going to select it.

01:08:14.440 --> 01:08:18.070
And the model keypath
was 'query.results'.

01:08:18.490 --> 01:08:20.640
Hopefully I'll type it right.

01:08:20.700 --> 01:08:27.290
And next, we need to double-click on
the table column's file name.

01:08:28.560 --> 01:08:34.560
We want to bind the value to that new
array control that we just specified,

01:08:34.560 --> 01:08:38.690
the arranged objects,
and the model keypath,

01:08:38.760 --> 01:08:43.850
that's the KMDItemFS name,
so it's the file system name attribute.

01:08:44.570 --> 01:08:45.790
The balance?

01:08:45.840 --> 01:08:48.430
Same type of thing,
except the model keypath

01:08:48.540 --> 01:08:51.460
is going to be com,
apple, iso, then balance.

01:08:51.520 --> 01:08:54.670
So it's that custom
attribute that we defined.

01:08:55.080 --> 01:08:58.670
The last thing to bind
is the NSSearch field.

01:08:58.670 --> 01:09:01.500
So the value,
I'm going to bind it to the files owner,

01:09:01.500 --> 01:09:03.230
the search controller.

01:09:03.310 --> 01:09:06.580
And let's see, it was called what?

01:09:06.580 --> 01:09:06.580
Search key?

01:09:07.150 --> 01:09:09.320
Alright, so that should be
enough for the bindings.

01:09:09.540 --> 01:09:14.860
So now if I go back over to Xcode,
compile this guy, run it.

01:09:14.920 --> 01:09:19.260
So now we have... let's hide some stuff.

01:09:19.260 --> 01:09:23.090
View, search window,
brings up that search window,

01:09:23.210 --> 01:09:25.970
and we could search for deposit.

01:09:27.110 --> 01:09:30.760
and look,
it found that file directly inside of it.

01:09:30.820 --> 01:09:34.760
So that's an example of how to create,
use searching directly

01:09:34.760 --> 01:09:35.680
inside of your application.

01:09:35.810 --> 01:09:41.070
Let's go back on over to the slides.

01:09:43.620 --> 01:09:45.110
The makeover is complete!

01:09:45.260 --> 01:09:47.500
We went over how to add
pasteboard handling,

01:09:47.500 --> 01:09:52.500
user interface improvements,
and some cool searching enhancements.

01:09:52.590 --> 01:09:54.970
For more information,
come to tonight's lab,

01:09:54.970 --> 01:09:58.840
the Cocoa Tiger Makeover Lab in the
Application Technologies Lab tonight

01:09:58.880 --> 01:09:59.670
at 6:30.

01:09:59.770 --> 01:10:02.500
Drop by it, we can answer any
questions that you have.

01:10:02.500 --> 01:10:07.500
For more information, documentation,
sample code, other resources,

01:10:07.500 --> 01:10:12.500
developer.apple.com/wwwdc2005
Or you can contact these people:

01:10:12.500 --> 01:10:16.610
Matthew Formica,
our Cocoa Core Data Evangelist,

01:10:16.610 --> 01:10:18.660
Cocoa Development,
we have that mailing list,

01:10:18.680 --> 01:10:21.500
Apple Bug Tracking System,
used for reporting bugs.