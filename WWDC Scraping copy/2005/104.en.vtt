WEBVTT

00:00:09.760 --> 00:00:11.180
Welcome to session 1.04.

00:00:11.360 --> 00:00:13.380
My name is Xavier Legros.

00:00:13.380 --> 00:00:15.820
And I'll be talking to you
in the next hour about using

00:00:15.820 --> 00:00:18.910
the Spotlight Query APIs.

00:00:19.070 --> 00:00:19.880
So what are we going to do?

00:00:20.040 --> 00:00:22.560
So what we're going to try to
do first is kind of give you

00:00:22.560 --> 00:00:26.880
an overview of architecture,
kind of the technology behind Spotlight.

00:00:26.880 --> 00:00:30.420
And this is going to be pretty much
a follow up from this morning's talk,

00:00:30.420 --> 00:00:34.550
when Dominic actually went through
a couple of details about how

00:00:34.680 --> 00:00:36.040
to write a Spotlight plugin.

00:00:36.050 --> 00:00:38.820
And what we're going to do is that
we're going to pretty much implement the

00:00:38.940 --> 00:00:42.960
second part of architectural graphics,
if you were this morning at the session.

00:00:42.970 --> 00:00:45.530
In which case, we're going to do getting
metadata out of a file.

00:00:45.640 --> 00:00:48.240
So we're going to teach you how you,
as a developer,

00:00:48.240 --> 00:00:52.520
with a very simple set of APIs,
can query the data store to retrieve

00:00:52.520 --> 00:00:55.020
metadata attribute on files.

00:00:55.060 --> 00:00:58.420
And then we'll finish, actually,
with Vince,

00:00:58.450 --> 00:00:59.420
who's going to be coming here.

00:00:59.420 --> 00:01:01.840
He will show you another part
of creating the data store.

00:01:01.840 --> 00:01:03.940
And in this case,
it's pretty much kind of the

00:01:03.940 --> 00:01:05.340
contrary of creating a file.

00:01:05.340 --> 00:01:07.020
In this case,
what we're going to be doing is pretty

00:01:07.020 --> 00:01:10.240
much we have a set of parameters,
search, and we want, actually,

00:01:10.240 --> 00:01:13.280
to get back all the files
that satisfy this search.

00:01:13.280 --> 00:01:14.640
All right, let's get started.

00:01:14.730 --> 00:01:16.680
So understanding the technology.

00:01:16.700 --> 00:01:18.850
What's very,
very important for you as a developer,

00:01:18.900 --> 00:01:22.480
because there are many solutions
out there that try to mimic

00:01:22.480 --> 00:01:23.570
what Spotlight is doing,
what's very,

00:01:23.570 --> 00:01:27.170
very important for you as a developer
to understand is that Spotlight

00:01:27.170 --> 00:01:29.540
is not bolted onto the system.

00:01:29.670 --> 00:01:33.130
Spotlight is fully integrated
inside Mac OS X Tiger.

00:01:33.270 --> 00:01:34.620
So what does that mean?

00:01:34.650 --> 00:01:36.810
That means that first,
at the heart of the Spotlight

00:01:36.900 --> 00:01:39.240
technology is actually your server.

00:01:39.270 --> 00:01:42.060
And that server is pretty
much a central piece that you,

00:01:42.110 --> 00:01:45.600
as a developer,
will be pretty much interfacing with.

00:01:45.790 --> 00:01:49.150
So let's see the two different set
of APIs that we have and pretty

00:01:49.150 --> 00:01:53.290
much the two different features
that we have for Spotlight.

00:01:53.500 --> 00:01:56.810
On your right, you're going to see the
first thing is that,

00:01:56.810 --> 00:01:59.310
you know, we have a bunch of
documents on our hard drive.

00:01:59.430 --> 00:02:01.800
You know, it could be on the desktop,
it could be on the document folder.

00:02:01.800 --> 00:02:06.540
And the first part of the Spotlight
technology enables you as a developer

00:02:06.540 --> 00:02:11.410
to pretty much extract that metadata
from the files that you know to actually

00:02:11.560 --> 00:02:14.380
put them back in the Spotlight server.

00:02:14.740 --> 00:02:17.690
What the Spotlight server is
going to do when your plugin

00:02:18.010 --> 00:02:20.920
sends back that metadata,
it's going to do a couple of things.

00:02:21.080 --> 00:02:23.330
First thing is that we're going
to store the metadata attributes

00:02:23.440 --> 00:02:24.580
inside the metadata store.

00:02:24.580 --> 00:02:28.440
And in that data store,
these are going to be attributes such as,

00:02:28.440 --> 00:02:31.720
you know, KMDI 10 title, KMDI 10 author.

00:02:31.720 --> 00:02:34.250
And Dominique went in details
this morning about how to write

00:02:34.360 --> 00:02:36.670
that first piece of software,
the Spotlight plugin,

00:02:36.670 --> 00:02:38.000
the Spotlight importer.

00:02:38.000 --> 00:02:41.390
And then we have right now another
content store where actually what we're

00:02:41.390 --> 00:02:44.650
going to store in there is more like,
you know, the text content.

00:02:44.740 --> 00:02:47.740
And, you know, the main idea here,
which is, by the way,

00:02:48.080 --> 00:02:50.500
does not matter too much
for you as a developer.

00:02:50.500 --> 00:02:52.980
It doesn't impact you as a
developer to the technology.

00:02:53.150 --> 00:02:55.110
But here in this case,
what's important for you to understand

00:02:55.220 --> 00:02:56.820
is how things are fitting in the system.

00:02:56.820 --> 00:03:00.310
And here the content store will store
pretty much a binary representation of

00:03:00.310 --> 00:03:04.270
actually the text that you're going to
pass through the KMDI 10 text content.

00:03:06.700 --> 00:05:11.300
[Transcript missing]

00:05:12.840 --> 00:05:14.150
All right, so what do we have?

00:05:14.220 --> 00:05:17.070
As a developer,
you have three different set of APIs to

00:05:17.090 --> 00:05:18.720
help you interface with Spotlight.

00:05:18.740 --> 00:05:22.450
Okay, the plugin APIs first,
and once again, we went through great

00:05:22.450 --> 00:05:23.300
details this morning.

00:05:23.300 --> 00:05:26.640
The key point here is
that if as a developer,

00:05:26.760 --> 00:05:30.180
your application or your tool
or whatever your business is on

00:05:30.180 --> 00:05:33.160
Mac OS X generates a custom file.

00:05:33.160 --> 00:05:35.760
What I mean by that is like, you know,
a file that, you know,

00:05:35.760 --> 00:05:37.720
is only your application
knows how to read.

00:05:37.720 --> 00:05:41.220
You have to write a Spotlight
plugin to interface with our system,

00:05:41.220 --> 00:05:41.720
okay?

00:05:42.380 --> 00:05:43.740
And once again,
this is very straightforward.

00:05:43.740 --> 00:05:46.220
If you didn't go this morning,
come back to the lab and we'll show you.

00:05:46.280 --> 00:05:47.040
This is very, very straightforward.

00:05:49.460 --> 00:05:53.120
The second part of APIs,
and which is kind of like the first

00:05:53.120 --> 00:05:57.480
part for querying of a Spotlight server,
is actually getting the meta--

00:05:57.660 --> 00:05:59.680
what I call the get metadata APIs.

00:05:59.710 --> 00:06:02.380
And here in this case
is that you have a file,

00:06:02.380 --> 00:06:05.230
and what you want to do is
find out what are the metadata

00:06:05.230 --> 00:06:06.640
associated with that file.

00:06:06.760 --> 00:06:10.360
So you have an FSPEC, you have a CFURL,
whatever you want.

00:06:10.400 --> 00:06:12.780
And you want to find out
maybe the creation date,

00:06:12.780 --> 00:06:15.280
maybe what's the author,
what are the key presence.

00:06:15.340 --> 00:06:19.120
So that's going to be the first
thing we're going to do today.

00:06:20.260 --> 00:06:23.320
And the last part,
which I think is actually like a very

00:06:23.450 --> 00:06:28.550
powerful set of APIs and very simple,
is you want to query the database and

00:06:28.580 --> 00:06:30.200
get back results like a set of files.

00:06:30.350 --> 00:06:33.130
So you want to say,
show me all the files on

00:06:33.130 --> 00:06:37.050
my system that are JPEGs,
that have the flash turned on,

00:06:37.060 --> 00:06:39.110
and that type of resolution.

00:06:39.180 --> 00:06:40.900
And then we send you back a set of files.

00:06:40.940 --> 00:06:43.000
You know, a little bit like what
the Finder is doing,

00:06:43.000 --> 00:06:43.870
obviously.

00:06:44.560 --> 00:06:46.160
As a developer,
what's important for you to

00:06:46.160 --> 00:06:49.500
understand is that in your project,
Carbon or Cocoa,

00:06:49.500 --> 00:06:50.950
it doesn't really matter.

00:06:51.070 --> 00:06:54.740
In Xcode, what you have to do is
link against core services.

00:06:54.790 --> 00:06:57.750
The metadata framework is
actually present inside the

00:06:57.840 --> 00:06:59.900
core services framework.

00:06:59.930 --> 00:07:03.740
And I suppose most of you are already
linking against that framework.

00:07:03.760 --> 00:07:08.660
All right, so I gave you a quick
overview of the architecture,

00:07:08.720 --> 00:07:10.840
the different set of APIs you
can use depending on what

00:07:10.890 --> 00:07:11.940
you're trying to achieve.

00:07:11.960 --> 00:07:13.940
Remember, you have a custom file format.

00:07:13.970 --> 00:07:15.480
Use a Spotlight plugin.

00:07:15.650 --> 00:07:17.260
Write a Spotlight plugin.

00:07:17.310 --> 00:07:19.290
Then after that, you want to do queries.

00:07:19.300 --> 00:07:21.160
We have two different type of queries.

00:07:21.300 --> 00:07:23.610
First type of query
will be you have a file,

00:07:23.620 --> 00:07:25.220
you want to get the metadata.

00:07:25.240 --> 00:07:28.240
And that's what we're going to
do here in this part of Apprezzo.

00:07:28.260 --> 00:07:32.710
All right, so first, as a developer,
why would you want to query the Spotlight

00:07:32.910 --> 00:07:35.310
server for getting back metadata?

00:07:35.550 --> 00:07:37.780
Well, a couple of cases.

00:07:37.790 --> 00:07:39.640
Case number one, you're an application.

00:07:39.640 --> 00:07:42.600
And it could be you're doing 2D
content or you're doing 3D content,

00:07:42.600 --> 00:07:45.910
but your application generated
files that has been actually using

00:07:45.920 --> 00:07:47.520
different other file formats.

00:07:47.520 --> 00:07:51.120
And what I mean by that is that take,
for instance, a 2D drawing application.

00:07:51.120 --> 00:07:54.510
And the guy, the user,
goes and selects a JPEG file,

00:07:54.650 --> 00:07:57.560
drags and drops it
inside your application.

00:07:57.560 --> 00:07:59.440
Maybe you want to keep a
reference of that file.

00:07:59.440 --> 00:08:03.340
And maybe you want actually to present
the metadata associated with that file.

00:08:03.340 --> 00:08:06.500
So this is the type of
API you will be using.

00:08:06.500 --> 00:08:09.560
Another idea would be, obviously,
if you wanted to display the properties

00:08:09.680 --> 00:08:13.780
for your own document or if you're in
the business of tracking documents,

00:08:13.810 --> 00:08:14.560
for instance.

00:08:14.560 --> 00:08:18.540
Maybe your application manages
different revisions of files across

00:08:18.630 --> 00:08:21.060
the product cycle or a project cycle.

00:08:21.070 --> 00:08:24.750
And you wanted to query, well,
I'm working on advertising for the

00:08:24.750 --> 00:08:27.250
Apple computer right now on the T1.

00:08:27.320 --> 00:08:29.740
And I want to get all my PDF files.

00:08:29.740 --> 00:08:33.200
And I want to get all my JPEG files
and all my Postgres files.

00:08:33.200 --> 00:08:36.100
Maybe you want to do a query and
get back specific attributes from

00:08:36.100 --> 00:08:37.780
these files inside your project.

00:08:37.890 --> 00:08:40.000
This, once again,
would be the type of APIs you would

00:08:40.050 --> 00:08:42.260
be using to achieve that feature,
to implement that feature.

00:08:42.260 --> 00:08:45.760
A couple of examples that we have.

00:08:45.760 --> 00:08:47.720
Remember this morning-- I don't
know if you were here this

00:08:47.860 --> 00:08:51.380
morning-- but in Dominic's talk,
he went to the Finder.

00:08:51.380 --> 00:08:53.790
And in the Finder,
when you command I to get

00:08:53.790 --> 00:08:57.080
the information of the file,
we get pretty much the metadata

00:08:57.080 --> 00:08:58.940
information associated with the file.

00:08:58.940 --> 00:09:02.310
That would be the type of feature you
could implement in your application,

00:09:02.310 --> 00:09:04.100
get info panel type.

00:09:04.100 --> 00:09:05.550
All right.

00:09:05.950 --> 00:09:09.680
Before we go and we dig a little bit
more about the APIs and how you're

00:09:09.680 --> 00:09:11.770
going to be able to implement that,
how you're going to be able

00:09:11.860 --> 00:09:14.880
to architect your application
to achieve these features,

00:09:14.880 --> 00:09:17.510
I need to talk to you a little
bit about the MD item ref.

00:09:17.510 --> 00:09:22.220
The MD item ref,
think of it as this little nice box that

00:09:22.220 --> 00:09:25.910
actually the Spotlight server manages.

00:09:25.910 --> 00:09:30.680
Each file on the system is represented
in the Spotlight data store by the

00:09:30.730 --> 00:09:33.150
Spotlight server as an MD item ref.

00:09:33.150 --> 00:09:35.780
So think of it as a representation
of the Spotlight server.

00:09:35.800 --> 00:09:36.670
Think of it as a representation
of the files on the disk.

00:09:37.040 --> 00:09:41.930
And each MD item ref can contain
several metadata attributes.

00:09:42.310 --> 00:09:46.340
Could have a KMDI item author,
could have the pixel resolution,

00:09:46.340 --> 00:09:50.500
the width, the height, but as well,
as we saw this morning,

00:09:50.500 --> 00:09:54.000
it could contain as well
file system attributes.

00:09:54.000 --> 00:09:57.940
And here in this case, I don't have any,
but you have to understand

00:09:57.940 --> 00:10:01.090
that inside the data store,
we have actually the file

00:10:01.090 --> 00:10:05.000
system creation date,
the modification date, the file size.

00:10:05.060 --> 00:10:05.340
Okay?

00:10:05.740 --> 00:10:09.340
So all these attributes are actually
available as well through that simple set

00:10:09.340 --> 00:10:10.990
of APIs are stored in the MD item ref.

00:10:11.060 --> 00:10:14.200
So this is pretty much the key
object you're going to be using,

00:10:14.200 --> 00:10:18.120
you're going to be manipulating in
order to query the Spotlight server.

00:10:20.600 --> 00:11:44.500
[Transcript missing]

00:11:45.350 --> 00:11:47.720
All right,
so how does it look like as a code?

00:11:47.720 --> 00:11:50.270
Once again, very, very straightforward.

00:11:50.270 --> 00:11:53.670
Step number one, remember,
mditemcreate to get an mditemref

00:11:53.670 --> 00:11:55.390
for representation of a file.

00:11:55.510 --> 00:11:58.560
Here in this case,
we hard-coded something with a CFSTR,

00:11:58.650 --> 00:12:01.630
you know, the macro to create a
CFString on the stack.

00:12:01.630 --> 00:12:05.040
But in your case, if you have an FS spec,
you go back to a CFURL,

00:12:05.080 --> 00:12:07.620
and from the CFURL,
you get back the CFString,

00:12:07.620 --> 00:12:09.010
and you're in business.

00:12:09.030 --> 00:12:13.050
So you pass that to mditemcreate,
the default allocator, we don't care,

00:12:13.140 --> 00:12:14.550
and the path.

00:12:14.690 --> 00:12:15.180
And you get the CFString.

00:12:15.230 --> 00:12:18.560
And you get back this little nice,
this neat little object, an mditemref.

00:12:18.580 --> 00:12:19.110
Great.

00:12:19.180 --> 00:12:20.610
So that's step number one.

00:12:20.850 --> 00:12:21.290
That's cool.

00:12:21.370 --> 00:12:22.950
At that point, what do we have?

00:12:22.950 --> 00:12:25.950
Very simple, just the link,
an iditemref that is represented

00:12:25.970 --> 00:12:28.510
on the Spotlight server,
and our file on disk.

00:12:28.690 --> 00:12:29.470
Okay?

00:12:31.570 --> 00:12:32.680
All right, step number two.

00:12:32.680 --> 00:12:35.720
Remember, now we're going to go
and query the data store.

00:12:35.720 --> 00:12:39.540
We're going to query the server to say,
OK, tell me all the different

00:12:39.540 --> 00:12:41.180
keys that that file contains.

00:12:41.190 --> 00:12:45.060
Tell me all the metadata keys,
I should say, that that file contains.

00:12:45.080 --> 00:12:45.960
Very straightforward.

00:12:46.060 --> 00:12:48.060
We're going to define a CFR.

00:12:48.180 --> 00:12:49.950
So all the names of the keys.

00:12:50.160 --> 00:12:52.500
And remember,
when I say the name of the keys here,

00:12:52.500 --> 00:12:57.430
I talk about the com, underscore,
com.camdi item, blah, blah, blah,

00:12:57.430 --> 00:13:00.000
or whatever keys you will be using.

00:13:00.020 --> 00:13:03.860
And what we're going to do is that we're
going to call mdi item copy attributes.

00:13:03.860 --> 00:13:05.180
And we're going to pass the item ref.

00:13:05.220 --> 00:13:06.000
Very simple.

00:13:06.000 --> 00:13:07.380
That sends us back an array.

00:13:07.500 --> 00:13:11.020
And inside this array,
we have all the keys that are present.

00:13:11.310 --> 00:13:13.710
We have the keys at that point in time,
but we don't have actually

00:13:13.990 --> 00:13:16.080
the associated values with it.

00:13:16.180 --> 00:13:20.060
So what you're going to be doing
from there is that two things.

00:13:20.060 --> 00:13:23.300
You could go back and say,
call mdi item copy attributes.

00:13:23.310 --> 00:13:27.760
And we send you back all the keys
with all the attributes associated.

00:13:27.830 --> 00:13:29.610
But maybe in your case,
you want you to be

00:13:29.610 --> 00:13:31.390
able to be more clever,
I would say,

00:13:31.390 --> 00:13:33.270
and just request a couple of keys.

00:13:33.590 --> 00:13:36.000
Maybe some files will have 40 attributes.

00:13:36.000 --> 00:13:37.430
And in this case,
you don't want to do that.

00:13:37.540 --> 00:13:43.740
So between the mdi item copy attribute
names and the mdi item copy attributes,

00:13:43.780 --> 00:13:47.740
you could actually just go and
work the name array and just remove

00:13:47.740 --> 00:13:50.500
maybe some of the keys in there.

00:13:50.520 --> 00:13:51.900
Very straightforward.

00:13:52.080 --> 00:13:54.760
So at that point, what do we have?

00:13:55.810 --> 00:13:56.940
Very simple.

00:13:56.960 --> 00:13:59.380
We get better results,
which is pretty much like

00:13:59.380 --> 00:14:00.910
an array of keys and data.

00:14:00.920 --> 00:14:03.350
Here in this case,
you can see that Vince has been doing

00:14:03.350 --> 00:14:07.310
some trading and has $10 billion
probably in his account balance,

00:14:07.320 --> 00:14:09.240
which is pretty good, we think,
for an Apple engineer.

00:14:09.240 --> 00:14:12.510
And we have actually a couple of
keys associated with all that data.

00:14:12.520 --> 00:14:14.770
So that's pretty nice,
but there are two things

00:14:14.960 --> 00:14:15.950
that are weird here.

00:14:15.960 --> 00:14:19.960
The first thing is, how did Vince get $10
billion during day trading?

00:14:19.960 --> 00:14:21.580
But that's just a side question.

00:14:21.580 --> 00:14:23.940
The real question for
this session is that,

00:14:23.940 --> 00:14:26.620
would it be better if we
could actually have real text,

00:14:26.740 --> 00:14:27.220
right?

00:14:27.500 --> 00:14:30.110
What you want to see is
what that key really means.

00:14:30.170 --> 00:14:32.640
So when you send back
the result to the user,

00:14:32.640 --> 00:14:34.540
you could display real data.

00:14:34.540 --> 00:14:38.040
Obviously, you don't want to send back
that and show that to the user.

00:14:38.040 --> 00:14:41.080
So, good text, absolutely,
we have good text.

00:14:41.200 --> 00:14:43.630
And here, the main idea,
what we're going to achieve now is

00:14:43.750 --> 00:14:47.450
that we're going to try to get the
text that is associated with the key.

00:14:47.650 --> 00:14:49.080
But is there actually better?

00:14:50.720 --> 00:14:54.350
So what you can do with a very
simple API actually is get back

00:14:54.460 --> 00:14:56.100
the localized names of attributes.

00:14:56.160 --> 00:14:59.250
And the key point here is to achieve,
instead of getting back

00:14:59.320 --> 00:15:05.420
the KMDItem author key,
what you get back is, I want authors.

00:15:05.490 --> 00:15:07.620
And obviously,
if it's authors in English and

00:15:07.620 --> 00:15:11.100
you're running in French,
what you would like is like, auteur.

00:15:11.220 --> 00:15:12.170
Make a difference?

00:15:12.290 --> 00:15:14.020
In French.

00:15:14.250 --> 00:15:17.760
And what is very cool is that if
you've been to this morning talk,

00:15:17.760 --> 00:15:21.590
you know that people writing Spotlight
plugins for their file format can

00:15:21.590 --> 00:15:23.030
actually define their own keys.

00:15:23.080 --> 00:15:26.730
And when you define your own key,
you know, in the schema file,

00:15:26.730 --> 00:15:28.780
you're going to be able
actually to define,

00:15:28.830 --> 00:15:30.620
you know, a description as well.

00:15:30.620 --> 00:15:33.070
So you could have, you know,
the fact that this key is

00:15:33.070 --> 00:15:34.680
author and give a description.

00:15:34.680 --> 00:15:37.160
This is the author for the document,
blah, blah, blah, blah, blah, blah.

00:15:39.560 --> 00:15:40.800
All right,
so how are we going to do that?

00:15:40.870 --> 00:15:43.340
How to obtain localized
names for our attributes?

00:15:43.390 --> 00:15:46.460
First thing, you're going to call
mdschema.copyDisplay,

00:15:46.460 --> 00:15:48.040
name for attribute,
and I think it's probably easier

00:15:48.040 --> 00:15:49.640
for you to just read on the screen.

00:15:49.680 --> 00:15:51.900
And you're going to pass
the key that you get back.

00:15:51.920 --> 00:15:55.320
In this case, it's, you know,
I just coded it here, but you know,

00:15:55.320 --> 00:15:58.550
what you will do is probably pass, like,
you know, an ID from, like, you know,

00:15:58.560 --> 00:16:02.390
the CFArray that we got back previously,
okay?

00:16:02.580 --> 00:16:03.000
Very easy.

00:16:03.130 --> 00:16:06.660
And then you get back a CFStringRef,
which is pretty much the full name.

00:16:06.700 --> 00:16:07.690
Excellent.

00:16:07.820 --> 00:16:12.100
So that will send us back, for instance,
in this case, if I were to pass kmd

00:16:12.120 --> 00:16:15.860
item video bit rate,
db video if I was reading in French,

00:16:15.930 --> 00:16:19.220
and video bit rate in English.

00:16:19.580 --> 00:16:21.930
Sorry, my English is a little bit rusty.

00:16:22.680 --> 00:16:24.560
What's very,
very important is that if you're

00:16:24.560 --> 00:16:28.550
in the case of writing a Spotlight
plugin for your file format,

00:16:28.630 --> 00:16:31.240
it's very,
very important as well that you offer

00:16:31.240 --> 00:16:33.370
translations for all of these keys.

00:16:33.400 --> 00:16:35.770
I know that some of you may think
that there is no French person

00:16:35.770 --> 00:16:37.680
that would use our software,
but trust me,

00:16:37.680 --> 00:16:40.650
we do have a bunch of US software
and it's great when it's

00:16:40.650 --> 00:16:41.800
localized in different countries.

00:16:41.800 --> 00:16:43.600
So if you're writing
your Spotlight plugin,

00:16:43.670 --> 00:16:45.490
remember you can localize all these keys.

00:16:45.560 --> 00:16:47.030
So please pay attention to that.

00:16:48.080 --> 00:16:49.050
All right.

00:16:49.150 --> 00:16:51.120
So now remember what I said
is that here in this case,

00:16:51.220 --> 00:16:55.020
what we've done is that we go back,
you know, not the description,

00:16:55.020 --> 00:16:56.930
but pretty much like, you know,
what the key is about.

00:16:57.080 --> 00:16:58.360
So in this case, author.

00:16:58.360 --> 00:17:00.940
What is nice is that as well,
you may want to get the full

00:17:01.070 --> 00:17:02.840
description of what that key does.

00:17:02.900 --> 00:17:06.770
And here in this case, once again,
very simple API that will send you back

00:17:06.770 --> 00:17:09.140
the localized version of a description.

00:17:09.140 --> 00:17:12.380
MD schema copy display
description for attribute.

00:17:14.250 --> 00:17:18.520
We're going to try to make
longer API names next year.

00:17:18.520 --> 00:17:19.320
And you pass the key.

00:17:19.470 --> 00:17:21.280
And once again,
same thing that before here,

00:17:21.280 --> 00:17:25.350
what you would be doing is you would
probably pass an ID inside the CFRA that

00:17:25.500 --> 00:17:27.880
was sent back from the previous API.

00:17:27.970 --> 00:17:29.940
So what did we achieve here?

00:17:29.970 --> 00:17:32.800
We get back, for instance, in this case,
that would be the name of the media file,

00:17:32.800 --> 00:17:35.490
what the name of the media file is,
or whatever full description you

00:17:35.490 --> 00:17:38.730
would have in your schema file.

00:17:38.950 --> 00:17:42.170
So in this first part,
what we did is that we

00:17:42.170 --> 00:17:43.200
got an MDI time ref.

00:17:43.340 --> 00:17:45.980
Remember, from there,
we queried and we got back all

00:17:46.060 --> 00:17:49.220
the list of the keys that actually
are stored in the data store.

00:17:49.230 --> 00:17:51.810
And then after that,
I queried the Spotlight server

00:17:52.230 --> 00:17:55.420
to send me back only the data
that I wanted for the keys.

00:17:55.440 --> 00:17:58.740
Once you have that,
I show you very simple APIs that enable

00:17:58.740 --> 00:18:03.260
you to get the localized name of the
key and the localized description.

00:18:03.280 --> 00:18:06.560
To show you that in action,
I can invite on stage Vince,

00:18:06.570 --> 00:18:08.040
Monsieur Vince, as we call him.

00:18:08.040 --> 00:18:08.760
Hello.

00:18:08.760 --> 00:18:11.180
And Vince is going to walk you back
through the code and show you the

00:18:11.290 --> 00:18:12.840
second part of his presentation.

00:18:12.840 --> 00:18:13.900
Thanks.

00:18:13.900 --> 00:18:15.740
Oh, can you go back to the slide again?

00:18:15.780 --> 00:18:17.160
So hi, I'm Vince DeMarco.

00:18:17.240 --> 00:18:18.840
Can you go back to the presentation?

00:18:18.900 --> 00:18:21.380
So I'm Vince DeMarco,
and I'm a member of the

00:18:21.510 --> 00:18:22.720
Spotlight engineering team.

00:18:22.810 --> 00:18:25.660
So what I'm going to do today
is show you what Xavier just

00:18:25.660 --> 00:18:26.840
showed you a little while ago.

00:18:26.840 --> 00:18:29.700
So I'm going to make a
graphical version of MDLS.

00:18:29.710 --> 00:18:31.980
MDLS is a command line tool
that lets you see all the

00:18:31.980 --> 00:18:33.390
metadata associated with a file.

00:18:33.520 --> 00:18:35.800
Except in this version,
what's basically going to happen

00:18:35.800 --> 00:18:38.100
is you're going to take a file
from the Finder and drag it and

00:18:38.190 --> 00:18:39.560
drop it on the-- on the window.

00:18:39.600 --> 00:18:41.590
So all you see in the top
half is a little text field

00:18:41.720 --> 00:18:43.960
with the path of the file,
and then a table view

00:18:43.960 --> 00:18:44.770
showing all the data.

00:18:44.870 --> 00:18:48.680
Can you switch to the demo one?

00:18:50.140 --> 00:18:53.430
So I'm not going to describe all
the code that's going on here,

00:18:53.460 --> 00:18:58.590
but what happens as soon as the file is
dropped from the finder onto this window,

00:18:58.590 --> 00:19:01.740
this method, file dropped,
is going to get called.

00:19:01.740 --> 00:19:04.640
So within the notification
that gets passed,

00:19:04.650 --> 00:19:09.440
in the user info is a list of all
the paths that the person selected.

00:19:09.440 --> 00:19:12.360
I don't really care about all the paths,
so I'm just going to grab the first one.

00:19:12.430 --> 00:19:16.820
So the first thing I'm going to do is
just set the text field at the top of the

00:19:16.820 --> 00:19:19.000
window with the path the user selected.

00:19:19.000 --> 00:19:22.640
So the first step I want to do is
I want to get the MD item ref for

00:19:22.640 --> 00:19:25.940
the file that the person created,
that the person just

00:19:25.940 --> 00:19:26.920
dragged and dropped there.

00:19:26.920 --> 00:19:27.980
So I get that.

00:19:27.980 --> 00:19:31.550
Before I go any further,
I really need to check to make sure

00:19:31.660 --> 00:19:34.480
that the ref that I got back is valid.

00:19:34.480 --> 00:19:36.980
So if any error occurs,
we end up returning null.

00:19:36.980 --> 00:19:40.310
A possible error is the file got,
the person does not have permission to

00:19:40.350 --> 00:19:44.260
read the file or the file may have been
deleted in the process of doing the drag.

00:19:44.330 --> 00:19:47.540
So as the drag was released,
the file went away.

00:19:47.560 --> 00:19:49.080
So now that we know that
we have an MD item ref,

00:19:49.080 --> 00:19:49.080
we're going to go ahead
and create a new file.

00:19:49.080 --> 00:19:49.570
So I'm going to go ahead
and create a new file.

00:19:49.570 --> 00:19:50.720
So I'm going to go ahead
and create a new file.

00:19:50.790 --> 00:19:53.960
So the first step is to get all
the interesting attribute names.

00:19:54.060 --> 00:19:55.300
So Xavier showed that.

00:19:55.300 --> 00:19:58.650
All this window is going to do is
show all the possible attributes,

00:19:58.740 --> 00:19:59.740
not any select set.

00:19:59.740 --> 00:20:02.610
So this will return an array
of all the attribute names.

00:20:02.730 --> 00:20:05.740
The next step, I want to get a list of
all the attribute values.

00:20:05.880 --> 00:20:09.340
So I'm going to get the CFDictionary back
of everything that I want.

00:20:09.340 --> 00:20:12.400
So now that I've got all the data,
I'm basically going to tell

00:20:12.400 --> 00:20:14.150
the table view to update.

00:20:14.150 --> 00:20:14.150
So I'm going to go ahead and say, "Hey,
this is the table view.

00:20:14.150 --> 00:20:14.150
I'm going to get the
name of the table view.

00:20:14.150 --> 00:20:14.150
I'm going to

00:20:15.350 --> 00:20:19.200
So table view in Cocoa basically
shows rows and columns of data.

00:20:19.280 --> 00:20:22.300
So in this case, I've got two columns
and n number of rows.

00:20:22.300 --> 00:20:26.800
And the number of rows is equal to
the number of attributes in the array.

00:20:26.910 --> 00:20:28.980
So I'm just going to
return that as the count.

00:20:28.980 --> 00:20:33.640
So the number of attribute names,
if that has been set, is just equivalent.

00:20:33.640 --> 00:20:36.830
So the number of items in the
array is equivalent to the

00:20:36.840 --> 00:20:38.970
number of rows in the table view.

00:20:39.590 --> 00:20:41.960
So the last step here is to
actually just try to display

00:20:41.960 --> 00:20:44.260
all the data in the two columns.

00:20:44.260 --> 00:20:47.940
So the first column is the name of
the property that I'm interested in.

00:20:49.130 --> 00:20:51.670
Actually, the first thing I want to do
is I want to get the attribute

00:20:51.670 --> 00:20:53.020
name for that particular row.

00:20:53.390 --> 00:20:57.520
So TableView, as it's loading its data,
calls you and tells you that it

00:20:57.530 --> 00:20:59.000
wants the data for a particular row.

00:20:59.090 --> 00:21:01.360
So in this case, it's like row n.

00:21:01.420 --> 00:21:03.400
So the first thing I want to do is
I'm going to grab the attribute out

00:21:03.450 --> 00:21:04.880
of the array that I'm interested in.

00:21:04.950 --> 00:21:10.390
So I'm going to grab attribute name out
of the inspected ref attribute names.

00:21:10.460 --> 00:21:12.960
So next,
I want to return this property back

00:21:13.280 --> 00:21:15.140
to the TableView to display it.

00:21:16.310 --> 00:21:18.120
So I'll just simply return that.

00:21:18.170 --> 00:21:21.470
And then the last thing I want to do in
the second column is I actually want to

00:21:21.470 --> 00:21:23.680
display the individual pieces of data.

00:21:23.730 --> 00:21:27.330
So that entails just looking
it up in the dictionary.

00:21:28.110 --> 00:21:31.920
So I'm going to grab the value
out of the inspected attribute,

00:21:32.040 --> 00:21:34.380
inspected ref attribute values,
which is the dictionary

00:21:34.380 --> 00:21:35.930
of the keys and values,
and then return it.

00:21:36.000 --> 00:21:38.500
This code down here is just
basically trying to reformat the

00:21:38.500 --> 00:21:40.140
data to make it look a little nicer.

00:21:42.180 --> 00:21:46.670
Here, so I'll compile this and we can go.

00:21:46.800 --> 00:21:50.000
So here's the window that
I just ran from the program.

00:21:50.040 --> 00:21:54.570
So we'll go into Finder and I'll
drag and drop a file onto it.

00:22:02.550 --> 00:22:05.500
So here's the file that I just selected.

00:22:05.530 --> 00:22:07.510
So here's all the attributes
associated with the file.

00:22:07.610 --> 00:22:12.500
So the things that are interesting
is-- so this file's got two keywords.

00:22:12.500 --> 00:22:14.420
It's a Lotus and a lease.

00:22:14.430 --> 00:22:18.170
And this file was taken
with a Minolta camera.

00:22:19.420 --> 00:22:20.520
It's a JPEG image.

00:22:20.860 --> 00:22:22.300
So you can see all the content types.

00:22:22.300 --> 00:22:25.630
So all the first column and the name
of the property is not in English.

00:22:25.660 --> 00:22:26.440
Even we have API.

00:22:26.440 --> 00:22:29.900
So the next step would be to
localize these values so they're

00:22:29.900 --> 00:22:31.770
displayed a little nicer.

00:22:32.380 --> 00:22:33.190
So this is really easy.

00:22:33.260 --> 00:22:37.690
So right here,
after we-- instead of grabbing

00:22:37.800 --> 00:22:41.860
the-- so instead of grabbing the
original value-- so attribute name.

00:22:41.980 --> 00:22:42.480
Oops.

00:22:42.480 --> 00:22:48.080
Oh, jeez.

00:22:58.190 --> 00:23:01.460
So instead of returning the attribute
name like I was doing in the past,

00:23:01.460 --> 00:23:05.620
I simply call mdSchema copy
display name for that attribute

00:23:05.620 --> 00:23:07.220
that I was going to display.

00:23:07.300 --> 00:23:10.620
The thing to note here with mdSchema
copy display name attribute is

00:23:10.850 --> 00:23:14.490
right here I'm checking if it
actually has returned any value.

00:23:14.560 --> 00:23:17.540
If it returns a value, then it's okay to
display that to the user.

00:23:17.550 --> 00:23:20.710
If it doesn't return anything,
the intent is it's not--it

00:23:20.710 --> 00:23:23.260
shouldn't be a user visible value.

00:23:23.260 --> 00:23:24.820
It's not interesting
to the user to see it.

00:23:24.820 --> 00:23:27.980
So I--and I will show you this.

00:23:30.400 --> 00:23:36.140
So if we run the same program again,
one more time with the same file.

00:23:36.260 --> 00:23:38.540
So all the interesting
user visible things,

00:23:38.540 --> 00:23:42.150
so instead of saying KMDItemDevice,
AcquisitionDevice,

00:23:42.150 --> 00:23:45.140
now it says DeviceMake here.

00:23:45.140 --> 00:23:48.380
And then the keywords,
instead of saying KMDItemKeywords,

00:23:48.380 --> 00:23:50.140
it says Keywords in English.

00:23:50.140 --> 00:23:53.210
There's other things like exposure time,
so it's all...

00:23:53.540 --> 00:23:56.430
The one thing I didn't
do in this program,

00:23:56.430 --> 00:23:59.520
which you may have noticed,
is I'm leaking all the

00:23:59.520 --> 00:24:01.840
MD item refs up at the bottom.

00:24:01.980 --> 00:24:04.750
So if you drop the second file in,
you'll leak the first one.

00:24:04.760 --> 00:24:09.360
So to be nice to the system,
I should probably clean this up,

00:24:09.430 --> 00:24:11.630
and I'll just do this right now.

00:24:14.520 --> 00:24:21.050
So all you have to do here is
if we have an old inspected ref,

00:24:22.600 --> 00:24:42.500
[Transcript missing]

00:24:51.300 --> 00:24:52.760
And so I don't know anything's happening.

00:24:52.760 --> 00:24:54.190
I'll send them to null.

00:24:54.290 --> 00:25:02.400
OK, that's it for that.

00:25:02.400 --> 00:25:05.440
I won't bother running
it because I just did.

00:25:05.440 --> 00:25:07.830
So can we switch back to the slides now?

00:25:10.400 --> 00:25:13.620
So that's basically how you get
all the data for individual items.

00:25:13.740 --> 00:25:16.820
So the next step would actually
be to perform a query to find a

00:25:16.930 --> 00:25:19.190
file that's interesting to you.

00:25:19.660 --> 00:25:21.820
So why would you even want
to search for any files in

00:25:21.820 --> 00:25:23.660
Spotlight within your application?

00:25:23.770 --> 00:25:26.240
Well, the first thing that comes to
mind is it's a cool feature

00:25:26.240 --> 00:25:28.460
and you should probably just
do this in your application.

00:25:28.460 --> 00:25:32.570
But a more legitimate thing would be to
enable search within your application.

00:25:32.570 --> 00:25:35.640
So it allows the user a new
way to find interesting files.

00:25:35.730 --> 00:25:40.390
So one example that comes to mind is if
you're writing a 3D modeling program.

00:25:40.760 --> 00:25:43.730
and the person wants to find a
skin texture to apply one of their

00:25:43.730 --> 00:25:47.360
objects in the modeling program,
but they have thousands of textures.

00:25:47.360 --> 00:25:48.840
It would be impossible for them.

00:25:48.880 --> 00:25:51.520
They really don't want to get
a preview for all 1,000 files,

00:25:51.670 --> 00:25:54.590
try to find which one they're
actually interested in.

00:25:54.590 --> 00:25:59.760
So it would be nice if some part
in your UI they could type skin,

00:25:59.850 --> 00:26:05.230
narrow the search list down to 10 and
then only have to get a preview of

00:26:05.230 --> 00:26:05.230
10 individual items instead of 1,000.

00:26:06.150 --> 00:26:08.470
Another thing is to
find related documents.

00:26:08.590 --> 00:26:12.200
So now more and more
people are working on,

00:26:12.200 --> 00:26:14.270
like more and more documents to
get their individual work done.

00:26:14.360 --> 00:26:16.870
So an example of this
would be making a magazine.

00:26:17.060 --> 00:26:20.200
So if you make an article in a magazine,
you need the, you

00:26:20.540 --> 00:26:23.640
The desktop publishing program
to put all the files together,

00:26:23.640 --> 00:26:28.140
you need the text for the article
and any associated pictures.

00:26:28.210 --> 00:26:32.170
So it would be nice if within the desktop
publishing program they could say,

00:26:32.170 --> 00:26:36.640
"Tiger article Spotlight by me,
Vince DeMarco," and then find

00:26:36.640 --> 00:26:40.270
all the related files and then
pop them all together and make

00:26:40.360 --> 00:26:42.280
the finished presentation.

00:26:43.120 --> 00:26:45.700
So how do you actually
search within Spotlight?

00:26:45.770 --> 00:26:49.130
It's actually as simple
as Xavier just showed you.

00:26:49.260 --> 00:26:52.000
So there's just a few key
objects you need to understand.

00:26:52.000 --> 00:26:56.820
You need to understand how
the query language operates.

00:26:56.920 --> 00:26:59.280
You need to understand the
different modes of the queries and

00:26:59.280 --> 00:27:01.720
then we're going to go together,
bring this all together and implement

00:27:01.720 --> 00:27:03.930
an example to show you how to do this.

00:27:04.580 --> 00:27:06.640
So searching with Spotlight
requires the two key objects.

00:27:06.720 --> 00:27:10.360
So the first one is MD Item Ref,
which represents a file on disk.

00:27:10.530 --> 00:27:14.860
I'm not going to go into any further
because Xavier explained that a little

00:27:14.860 --> 00:27:16.470
earlier within the presentation.

00:27:16.600 --> 00:27:19.500
The next item that's of
interest is the MD Query Ref.

00:27:19.500 --> 00:27:22.860
So this represents,
it's a calculation of the query

00:27:22.880 --> 00:27:25.490
results and the query string itself.

00:27:26.420 --> 00:27:31.440
So the query language within Spotlight
is a simple C-like expression.

00:27:31.540 --> 00:27:35.030
So you have an attribute on one
side is equal to a particular value.

00:27:35.050 --> 00:27:39.210
So in this case,
I'm searching for KMDItemContentType,

00:27:39.210 --> 00:27:42.390
which is the type of the file,
and it's equal to public.rtf.

00:27:42.470 --> 00:27:45.440
This will basically return all
RTF files stored within the system.

00:27:45.980 --> 00:27:49.740
So all the different types,
you can have numbers, strings,

00:27:49.740 --> 00:27:52.990
and dates of all the attributes,
and we have all the standard

00:27:52.990 --> 00:27:54.400
operators that you can do in C.

00:27:54.400 --> 00:27:57.210
The only one of note that's interesting
is you can do ranges of numbers.

00:27:59.190 --> 00:28:02.580
You can group the APIs with ands, ors,
and parentheses,

00:28:02.580 --> 00:28:07.410
and you can do logical knots of
the big group of expressions.

00:28:08.610 --> 00:28:11.190
So some examples of some queries.

00:28:11.300 --> 00:28:13.080
So once again,
if I want to find all the plain

00:28:13.170 --> 00:28:16.800
text documents in my file,
I have KMDItemContentType.

00:28:17.240 --> 00:28:21.320
That's the attribute name and
I'm searching for the value

00:28:21.430 --> 00:28:23.790
of it is public.plain-text.

00:28:24.240 --> 00:28:26.860
So the second example is if I want
to find all the documents with my

00:28:26.890 --> 00:28:28.690
system that have the word WWDC.

00:28:28.900 --> 00:28:31.030
So I'm searching for my presentation.

00:28:31.060 --> 00:28:36.160
So I'm searching for KMDItemTextContent,
the attribute, is equal to the value,

00:28:36.160 --> 00:28:39.680
or in this case contains the value, WWDC.

00:28:40.490 --> 00:28:42.610
The third example is I'm
searching with an array.

00:28:42.770 --> 00:28:45.610
In Dominic's talk this morning,
he described the keywords are

00:28:45.620 --> 00:28:47.370
actually an array of strings.

00:28:47.370 --> 00:28:50.700
So a document can have many
keywords associated with it,

00:28:50.700 --> 00:28:51.650
not just one.

00:28:52.890 --> 00:28:55.680
So in this case, I want to find all the
documents that have the keyword

00:28:55.810 --> 00:28:58.500
"important" associated with them,
and it could be--it would

00:28:58.500 --> 00:28:59.690
return a whole bunch of them.

00:28:59.960 --> 00:29:03.400
The last example,
I'm searching--I'm basically searching

00:29:03.400 --> 00:29:06.650
for the attribute "display name"
and I want to find all documents

00:29:06.690 --> 00:29:11.610
that start with an uppercase A and
are any random number of characters.

00:29:11.610 --> 00:29:12.840
of any length.

00:29:12.890 --> 00:29:16.500
So in all these examples I'm showing,
I'm finding actually exact matches.

00:29:16.590 --> 00:29:19.750
So the last one I'm finding A,
any document that starts with the

00:29:19.860 --> 00:29:22.100
upper case A but of any length.

00:29:22.170 --> 00:29:25.730
It would be interesting if I could do,
if I could narrow the search down without

00:29:25.730 --> 00:29:28.230
having to be really explicit in my query.

00:29:28.720 --> 00:29:31.640
So to do this we have
string match modifiers.

00:29:31.640 --> 00:29:33.890
So there's three basic
string match modifiers.

00:29:33.940 --> 00:29:37.140
At the end of every query you
can specify a C which means that

00:29:37.140 --> 00:29:39.000
the query is case insensitive.

00:29:39.000 --> 00:29:42.070
So in this case Spotlight
all lower case is equivalent

00:29:42.070 --> 00:29:43.950
to Spotlight all upper case.

00:29:44.720 --> 00:29:49.300
The second string match modifier
is the diacritic insensitivity.

00:29:49.410 --> 00:29:52.620
So if I have a bunch of
English documents and a bunch of

00:29:52.620 --> 00:29:54.770
French documents in my system,

00:29:55.150 --> 00:29:59.840
Since I'm a native English speaker,
I'm not going to spell elegant correctly

00:30:00.030 --> 00:30:02.330
in French with the accent on both the Es.

00:30:02.330 --> 00:30:04.590
I'm probably going to spell
it in the English form.

00:30:04.600 --> 00:30:06.180
Same if I'm searching the document.

00:30:06.260 --> 00:30:08.060
If I'm a French user,
I'm going to put the accents.

00:30:08.110 --> 00:30:09.880
If I'm an English user,
I'm not going to really bother.

00:30:10.000 --> 00:30:13.280
So this is so you can say
elegant is equivalent to elegant

00:30:13.530 --> 00:30:17.590
with the quotation marks,
with the accents, I'm sorry.

00:30:18.430 --> 00:30:22.590
The last modifier is I want to
find is the word-based modifier.

00:30:22.700 --> 00:30:24.430
So it detects transitions in the case.

00:30:24.430 --> 00:30:27.530
Lots of times people end up
doing camel casing words.

00:30:27.680 --> 00:30:30.190
So you go Spotlight with
a big S and a big L.

00:30:30.190 --> 00:30:32.770
And they're actually using
that to signify that those

00:30:32.770 --> 00:30:35.500
are two separate words,
but they're written together.

00:30:35.500 --> 00:30:38.100
Same thing with text edit
or interface builder.

00:30:38.920 --> 00:30:42.280
So in this case,
light is equivalent to spotlight.

00:30:42.280 --> 00:30:44.990
So that word exists in that match.

00:30:45.070 --> 00:30:49.410
But the second example we have, Paris,
is not equal to comparison.

00:30:49.640 --> 00:30:53.740
This would be a match if in
comparison it was an uppercase

00:30:53.740 --> 00:31:00.050
C and we had an uppercase P in the
Paris and an uppercase O in the on.

00:31:00.050 --> 00:31:01.050
Then it would match.

00:31:01.060 --> 00:31:04.820
So if we put this all together,
I want to find...

00:31:05.360 --> 00:31:08.950
All the files on my system that
have the attribute KMDItemTitle

00:31:09.180 --> 00:31:11.850
that contain the word light,
and I'm going to search

00:31:12.130 --> 00:31:14.530
it word insensitive,
diacritic insensitive,

00:31:14.530 --> 00:31:15.640
and case insensitive.

00:31:21.280 --> 00:31:24.820
Oh, and the word match too,
it also applies to spaces, underscores,

00:31:24.840 --> 00:31:27.720
and dashes and dots too.

00:31:28.190 --> 00:31:33.110
So if we want to-- it would be
interesting to put this all together.

00:31:33.260 --> 00:31:37.740
All the type information in Spotlight
is based off of the UTI hierarchy.

00:31:37.850 --> 00:31:40.480
And in UTI hierarchy,
everything is inherited.

00:31:40.660 --> 00:31:45.560
So we have at the top of the hierarchy,
we have public.data or public.content.

00:31:45.570 --> 00:31:48.260
And below that,
somewhere we have like public.image.

00:31:48.260 --> 00:31:52.680
And all the image file formats
inherit from public.image.

00:31:53.570 --> 00:31:56.530
So this allows you to find, for example,
all the audio content or

00:31:56.530 --> 00:31:57.630
all the image content.

00:31:57.660 --> 00:32:00.500
So instead of having to
find all the public.jpg,

00:32:00.720 --> 00:32:02.710
public.gif,

00:32:03.880 --> 00:32:04.800
Tiff, etc.

00:32:04.800 --> 00:32:09.170
All the hundreds of different file
formats you can say in one query.

00:32:09.740 --> 00:32:11.000
Well, they edited that wrong.

00:32:11.050 --> 00:32:15.180
So I can find KMDItemContentTypeTree
equals public.image.

00:32:15.230 --> 00:32:17.500
Ignore the equals equals WWC at the end.

00:32:17.500 --> 00:32:18.500
That's wrong.

00:32:18.610 --> 00:32:21.630
So this would find all the image
files known to the system with

00:32:21.630 --> 00:32:25.300
one query without having to
specify the each individual types.

00:32:25.360 --> 00:32:30.420
But you could do that if you needed to
and you only wanted TIFF or JPEG images.

00:32:30.540 --> 00:32:33.490
So you can put these all together
to make a more complicated query.

00:32:33.550 --> 00:32:36.220
So in this case,
I want to find all the images

00:32:36.330 --> 00:32:40.080
on my system that have an
alpha channel and have a height

00:32:40.080 --> 00:32:42.420
DPI greater than equal to 300.

00:32:42.750 --> 00:32:46.600
So it's KMDItemContentTypeTree
is equal to public.image.

00:32:46.600 --> 00:32:48.460
That's all the image files.

00:32:48.600 --> 00:32:52.600
And KMDItemResolutionHeightDPI is
greater than equal to 300.

00:32:52.600 --> 00:32:56.600
And KMDItem has alpha
channels equal to 1.

00:32:56.600 --> 00:32:58.600
So that attribute is set.

00:32:58.600 --> 00:33:00.600
So we'll do a little demo using MDFind.

00:33:00.730 --> 00:33:02.600
Can you switch to the demo machine?

00:33:02.760 --> 00:33:06.590
So MDFind is a little command line tool.

00:33:07.430 --> 00:33:13.800
That lets you type in
queries and get back results.

00:33:13.850 --> 00:33:16.440
So what I'm going to do as a
query is I'm going to find all the

00:33:16.440 --> 00:33:17.800
application files on the system.

00:33:17.800 --> 00:33:20.800
So remember at the beginning,
a couple of slides ago I described

00:33:20.800 --> 00:33:23.300
that the UTI Harkey is inherited.

00:33:23.300 --> 00:33:25.800
So we have different kinds of
applications on the system.

00:33:25.800 --> 00:33:28.800
So you can have a packaged application
or a non-packaged application,

00:33:28.800 --> 00:33:31.800
but they all inherit from
com.appleapplication.

00:33:31.800 --> 00:33:36.800
So we can find all application
files on the system.

00:33:36.980 --> 00:33:38.970
The item.

00:33:48.710 --> 00:33:51.220
So that'll be all the
applications on this machine.

00:33:51.230 --> 00:33:54.220
And there's quite a few of them.

00:33:54.260 --> 00:33:57.340
I'm not going to read each
individual one out to you.

00:33:57.340 --> 00:33:58.140
That'll take too long.

00:33:58.140 --> 00:33:59.490
So we've got lots of files there.

00:33:59.740 --> 00:34:05.300
So I want to narrow down the query
to find only applications that have

00:34:05.890 --> 00:34:10.910
that only applications that
have an A in their display name.

00:34:17.340 --> 00:34:24.290
So I'm just doing *,
a* and then making it word, diacritic,

00:34:24.290 --> 00:34:25.830
and case-insensitive.

00:34:26.320 --> 00:34:30.540
So if we run this query again,
the list is a little bit smaller.

00:34:30.600 --> 00:34:31.930
So in the last step,
I want to try to narrow

00:34:31.930 --> 00:34:32.680
this down any more.

00:34:32.680 --> 00:34:38.580
I want to find all applications
that are copyright by Apple.

00:34:38.660 --> 00:34:41.330
So we'll just keep extending this query.

00:34:45.570 --> 00:34:47.910
So I'm just going to find the
word Apple within the word,

00:34:48.030 --> 00:34:51.040
within the document,
within the copyright string.

00:34:51.060 --> 00:34:53.960
So I'm going to do this word insensitive,
diacritic insensitive,

00:34:53.960 --> 00:34:56.250
and case insensitive too.

00:34:57.290 --> 00:34:58.700
So let me clear this screen.

00:34:58.780 --> 00:35:00.630
So now we have a much smaller list again.

00:35:00.770 --> 00:35:04.360
So let me just run this query
again with a smaller list.

00:35:04.390 --> 00:35:08.200
So if we do only applications
that have to start with A instead.

00:35:12.790 --> 00:35:14.980
There's a little demo
and you have a lot left.

00:35:15.040 --> 00:35:16.690
The interesting thing,
the only real thing of note,

00:35:16.700 --> 00:35:18.040
can you switch back to the slides?

00:35:18.100 --> 00:35:21.690
The only thing of note to take from that
demo is while you're making your query,

00:35:21.690 --> 00:35:24.570
it's best if you just
try it out on MDFind.

00:35:24.570 --> 00:35:28.000
You don't have to write
any code and you can see,

00:35:28.100 --> 00:35:32.790
you should try to make a query so
you're basically trying to narrow

00:35:32.790 --> 00:35:36.820
it down to a small set of files so
you can try your query on MDFind

00:35:36.820 --> 00:35:36.820
and see if it narrows down to the
files you're actually interested in.

00:35:37.290 --> 00:35:39.390
So the next step now that
you know how to make,

00:35:39.390 --> 00:35:41.530
you know how to write some simple
queries and you need to implement

00:35:41.610 --> 00:35:44.110
the search within your application.

00:35:44.810 --> 00:35:50.240
There's basically two ways you can
implement search within your application.

00:35:50.290 --> 00:35:54.070
You can open the Spotlight search window,
so that's that little menu

00:35:54.180 --> 00:35:55.370
on the top hand corner.

00:35:55.380 --> 00:35:58.850
If the person types in a string,
you get the results and you

00:35:58.850 --> 00:36:03.060
can select the show all window,
show all, which brings up the

00:36:03.100 --> 00:36:05.300
Spotlight results window.

00:36:05.620 --> 00:36:07.860
The second way of doing this
all is just to simply perform a

00:36:07.940 --> 00:36:10.440
query within your application.

00:36:10.500 --> 00:36:12.830
So opening the Spotlight
window is really,

00:36:12.890 --> 00:36:13.940
really simple.

00:36:15.040 --> 00:36:17.510
And it provides a really easy way
for you to integrate Spotlight

00:36:17.530 --> 00:36:20.170
within your application with
a minimal amount of work.

00:36:20.230 --> 00:36:24.160
So all you need to do in this case
is call "hi search window show" with

00:36:24.160 --> 00:36:25.400
a string you want to search for.

00:36:25.410 --> 00:36:29.760
This is the same string that the
user would have typed into the

00:36:30.130 --> 00:36:32.300
field in the Spotlight window.

00:36:32.660 --> 00:36:34.590
This is already integrated
in a couple of applications.

00:36:34.670 --> 00:36:36.250
For example, Address Book.

00:36:36.280 --> 00:36:39.360
You get the--there's a little action
menu at the top window of Address Book.

00:36:39.360 --> 00:36:40.900
It says search in Spotlight.

00:36:41.140 --> 00:36:42.300
It's basically doing this.

00:36:42.360 --> 00:36:45.810
And in TextEdit, if you select a word
within your document,

00:36:45.900 --> 00:36:49.430
you can go Spotlight and you
find all occurrences of that word

00:36:49.430 --> 00:36:51.500
everywhere in--on your hard disk.

00:36:51.560 --> 00:36:55.140
This is great to provide--present
related items to the user,

00:36:55.140 --> 00:36:58.190
but you as an application
developer cannot interact

00:36:58.190 --> 00:36:59.930
with this window in any way.

00:36:59.930 --> 00:37:02.160
You can simply present it and that's it.

00:37:02.690 --> 00:37:06.100
So if you actually want
to do anything further,

00:37:06.100 --> 00:37:08.740
you need to write a query
within your application.

00:37:08.950 --> 00:37:11.910
Executing a query in your application
is three simple steps again.

00:37:12.090 --> 00:37:15.300
So the first step is to
create an empty query ref.

00:37:15.370 --> 00:37:18.800
The second step is to register the
callback so you get notified of

00:37:18.910 --> 00:37:20.700
updates and changes to the query.

00:37:20.750 --> 00:37:23.390
And the third is to execute the query.

00:37:23.510 --> 00:37:25.260
So step one.

00:37:25.480 --> 00:37:26.910
is to create the MD Query ref.

00:37:26.950 --> 00:37:29.400
So all I'm doing here is
I have a query string.

00:37:29.400 --> 00:37:33.520
In this query I'm searching
for KMDItemContentType is

00:37:33.630 --> 00:37:36.400
equal to public.plain-text.

00:37:36.400 --> 00:37:40.300
I'm searching once again for all
plain text documents within my system,

00:37:40.300 --> 00:37:41.390
on my system.

00:37:41.890 --> 00:37:46.600
And you just call empty query create and
the second parameter is the query string.

00:37:46.650 --> 00:37:51.900
This creates a standard CF type object
which you can retain and release and you

00:37:51.900 --> 00:37:54.720
can put in all the CF collection classes.

00:37:55.290 --> 00:37:57.200
So the second step after
you've created your query is

00:37:57.200 --> 00:37:58.560
to register for the callbacks.

00:37:58.560 --> 00:38:02.200
The reason that this is the second
step and not the first step is in

00:38:02.200 --> 00:38:06.820
CF Notification Center at Observer,
you're basically telling it

00:38:06.920 --> 00:38:08.140
which query you want to observe.

00:38:08.140 --> 00:38:11.090
It's the second to last parameter.

00:38:11.220 --> 00:38:11.420
It says query.

00:38:11.420 --> 00:38:13.980
I want to be notified of
any changes on this query.

00:38:13.980 --> 00:38:18.080
You can also pass null and get notified
of any query happening on the system.

00:38:18.240 --> 00:38:22.180
The other thing that's really
interesting to note here is that

00:38:22.180 --> 00:38:24.540
I called the CF Notification Center.

00:38:24.540 --> 00:38:26.960
I got the local center,
not the distributed center.

00:38:26.980 --> 00:38:30.360
This just got added into Tiger recently.

00:38:30.360 --> 00:38:33.200
You would do the same thing
in a foundation class.

00:38:33.200 --> 00:38:35.910
You just register with
NS Notification Center,

00:38:35.910 --> 00:38:37.300
the default center.

00:38:37.300 --> 00:38:40.930
So in my example, I'm only listening for
the finished notification,

00:38:40.930 --> 00:38:45.320
but you'd also typically listen for the
progress and the update notifications.

00:38:45.320 --> 00:38:49.750
So of the three notifications we sent,
the first notification we sent

00:38:49.750 --> 00:38:51.440
is the progress notification.

00:38:51.440 --> 00:38:54.620
So as your query is running and
the server is gathering results,

00:38:54.620 --> 00:38:57.330
as it sends the results back
to your client application,

00:38:57.360 --> 00:39:00.420
you get the progress notification so
you could do something in your UI.

00:39:00.420 --> 00:39:05.510
So you could update a table or increase
the size of a menu and show the person

00:39:05.510 --> 00:39:08.410
the results as they're being fetched.

00:39:08.900 --> 00:39:12.110
The second notification we sent
is the finish notification.

00:39:12.110 --> 00:39:14.800
So as the server's finished
and completed your query,

00:39:14.800 --> 00:39:16.930
it's gotten all the results
it can at this point,

00:39:16.950 --> 00:39:19.150
it's going to send you this
notification saying it's all done.

00:39:19.290 --> 00:39:21.700
So maybe you could
stop the spinny cursor,

00:39:21.700 --> 00:39:24.600
I mean the little spinny
progress indicators.

00:39:24.940 --> 00:39:28.300
or notify the user that they're done.

00:39:28.300 --> 00:39:31.280
The last notification that we
send is the update notification.

00:39:31.280 --> 00:39:34.360
So after the query is finished,
it goes into the update phase.

00:39:34.680 --> 00:39:38.730
So as the user creates or destroys files
that match or don't match your query,

00:39:38.800 --> 00:39:43.210
the results that will
change as this is happening.

00:39:43.320 --> 00:39:48.420
The only thing to note here,
this is only get sent

00:39:48.420 --> 00:39:50.010
if the query is live,
which I'll explain in just a second.

00:39:50.600 --> 00:39:53.730
So, step two and a half,
you have to implement the

00:39:53.760 --> 00:39:55.140
notification callback.

00:39:55.140 --> 00:39:57.400
So this is what you would do in CF.

00:39:57.400 --> 00:39:59.040
So this is the standard
thing you would do in CF.

00:39:59.040 --> 00:40:00.510
There's really nothing special here.

00:40:00.510 --> 00:40:02.260
You could do the same
thing in Foundation.

00:40:02.260 --> 00:40:05.200
It would just be
Objective-C classes instead.

00:40:05.200 --> 00:40:08.320
So the thing that's interesting
here and the same thing applies to

00:40:08.400 --> 00:40:11.950
in Foundation is the object that
sent the notification is your query.

00:40:11.950 --> 00:40:15.530
So you can use this to look up
whatever information that you need.

00:40:15.590 --> 00:40:18.270
You might need to get from
the query to know what's

00:40:19.690 --> 00:40:23.490
So the last step we need to do is now
we need to actually execute the query.

00:40:23.560 --> 00:40:24.200
So this is simple.

00:40:24.200 --> 00:40:26.590
We simply call md query execute.

00:40:26.680 --> 00:40:31.040
The first parameter is the query
and the second one is flags.

00:40:31.040 --> 00:40:33.820
By default, you could pass zero,
which I'll explain what that means.

00:40:33.820 --> 00:40:36.510
So in this case,
I'm calling--and the flags

00:40:36.630 --> 00:40:38.200
can be one of two things.

00:40:38.200 --> 00:40:43.090
So we can say--if we say on the flags
and you order them all together,

00:40:43.090 --> 00:40:46.470
you can say k md query
synchronous which means

00:40:47.060 --> 00:40:49.830
KMD Query will not return
until it's fetched all the

00:40:49.830 --> 00:40:50.770
results that are available.

00:40:50.840 --> 00:40:54.980
Basically, until you would have gotten
that finished notification.

00:40:55.020 --> 00:40:57.960
The second flag is
KMD Query wants updates.

00:40:58.100 --> 00:41:00.170
This is telling you after
the query is finished,

00:41:00.170 --> 00:41:03.090
if the user deletes or
creates any new files,

00:41:03.090 --> 00:41:03.970
let me know about it.

00:41:04.000 --> 00:41:07.030
So by default,
if you set the flag to zero,

00:41:07.100 --> 00:41:12.660
your query will be running asynchronously
and you will not get updates.

00:41:14.510 --> 00:41:17.380
So the next step after you've executed
the query and you've gotten the

00:41:17.380 --> 00:41:21.850
notification somewhere is you need
to retrieve the individual results.

00:41:22.510 --> 00:41:25.220
So the retrieving results
basically involves two calls.

00:41:25.330 --> 00:41:29.730
It's only two calls because conceptually
you can think of an MD query as an array.

00:41:29.890 --> 00:41:33.250
So an array, a read-only array really has
only two appropriate calls.

00:41:33.420 --> 00:41:37.210
You can ask it how many things are in
the array and you can get an individual

00:41:37.510 --> 00:41:39.400
item anywhere within the array.

00:41:39.500 --> 00:41:40.780
So hence we have these two calls.

00:41:41.070 --> 00:41:44.960
So we have MD query get results count
and MD query get results at index.

00:41:46.510 --> 00:41:50.200
So MD Query Get Results Count just
simply returns the number

00:41:50.200 --> 00:41:53.820
of items in the result set.

00:41:54.560 --> 00:41:56.580
And there's really not much to that.

00:41:56.600 --> 00:41:58.820
You just get the count and
you can iterate over them.

00:41:58.820 --> 00:42:01.820
The next, as you're iterating over them,
you can get the particular

00:42:02.130 --> 00:42:04.940
item at a particular index.

00:42:04.940 --> 00:42:07.640
So you simply call mdquery,
get results at index.

00:42:07.820 --> 00:42:12.090
And just get the mditemref at
that particular index value.

00:42:12.710 --> 00:42:16.050
So the thing to note with
retrieving results is if you've

00:42:16.200 --> 00:42:19.400
started your query in live mode,
as your query is executing,

00:42:19.450 --> 00:42:21.740
the query result set
is constantly changing.

00:42:21.860 --> 00:42:26.140
So if at one point you ask it,
give me item at index 4,

00:42:26.210 --> 00:42:29.840
by the time in your code,
you want to know you get index 4.

00:42:29.840 --> 00:42:33.040
So if you stashed away this
index you're interested in,

00:42:33.040 --> 00:42:35.880
then later in your program,
after some period of time,

00:42:35.930 --> 00:42:39.520
you go to array index 4,
it might not even be there.

00:42:39.520 --> 00:42:41.080
And it might be out of bounds now.

00:42:41.160 --> 00:42:43.880
So to get around this problem,
while you're currently iterating,

00:42:43.880 --> 00:42:46.420
you can update, enable,
and disable the query.

00:42:46.680 --> 00:42:49.870
So basically everything's kind
of freeze dried for that period

00:42:49.870 --> 00:42:51.510
of time so you can look at it.

00:42:51.690 --> 00:42:52.680
You don't need to do this.

00:42:52.760 --> 00:42:56.680
If you're only going to be looking at
the results set within the callback,

00:42:56.680 --> 00:42:58.850
within the notification callbacks,
you don't really have to

00:42:58.850 --> 00:42:59.990
enable and disable the query.

00:43:00.190 --> 00:43:01.590
That's really done for you.

00:43:01.600 --> 00:43:04.560
And enabling and disabling
a query is stacked.

00:43:04.620 --> 00:43:08.450
So if you've done four enables,
you need to do four disables.

00:43:08.450 --> 00:43:09.600
Or, I'm sorry, backwards.

00:43:09.600 --> 00:43:13.020
If you do four disables,
you need to do four enables for

00:43:13.020 --> 00:43:14.600
it to get turned back on again.

00:43:14.600 --> 00:43:17.490
If they don't match,
it'll stay in the last state that it was.

00:43:17.570 --> 00:43:21.600
So the biggest thing to take away
from this is the results are live.

00:43:21.600 --> 00:43:23.700
Everything can come and go
as you're working on them,

00:43:23.720 --> 00:43:24.550
so be aware of that.

00:43:26.100 --> 00:43:28.320
So we'll do a little demo to do a query.

00:43:28.590 --> 00:43:31.700
So this is going to be this application,
which is a simplified

00:43:31.710 --> 00:43:33.990
version of the search window.

00:43:34.430 --> 00:43:37.040
So basically in that top search field,
you're going to type some string

00:43:37.040 --> 00:43:39.490
that you're looking for and then
you'll get the results below.

00:43:39.630 --> 00:43:42.520
So can we switch to demo one please?

00:44:09.500 --> 00:44:10.700
Let me just get a drink of water.

00:44:10.700 --> 00:44:18.480
So the first thing we do as the user
is typing into the top search field,

00:44:18.490 --> 00:44:22.160
what's happening is the start search
method is going to get called.

00:44:22.220 --> 00:44:25.280
So as they type in a character
and the appropriate delay,

00:44:25.280 --> 00:44:30.660
however the Cocoa search field operates,
we get the string that the user entered.

00:44:30.770 --> 00:44:33.470
So the first thing we want to
do is create a query string from

00:44:33.550 --> 00:44:35.180
what the user just typed in.

00:44:35.330 --> 00:44:38.100
So we're going to basically
do a very simple query.

00:44:38.100 --> 00:44:43.660
We're going to find all the metadata
star is equal to what the user typed in.

00:44:43.660 --> 00:44:45.860
And we're going to know our case.

00:44:45.860 --> 00:44:48.540
We're going to be word insensitive,
case insensitive,

00:44:48.680 --> 00:44:50.220
and diacritic insensitive.

00:44:50.220 --> 00:44:54.780
And we're also going to search the text
content equals what the user typed in.

00:44:54.780 --> 00:44:57.580
And we're going to do case
and diacritic insensitive.

00:44:57.580 --> 00:44:59.860
The thing to note here is I'm
not checking if they've typed any

00:44:59.940 --> 00:45:02.820
special characters like quotes
and any of that kind of stuff,

00:45:02.850 --> 00:45:04.340
so if they type a quote,
the query's probably

00:45:04.340 --> 00:45:05.490
going to be malformed.

00:45:05.550 --> 00:45:07.030
But for this demo, it'll be just fine.

00:45:08.100 --> 00:45:11.890
So now that we have the query string,
the next step is to

00:45:11.890 --> 00:45:15.480
create the MD query ref.

00:45:15.680 --> 00:45:18.920
So given the query string right here,
I'm going to create the MD Query

00:45:18.920 --> 00:45:20.780
Ref with a default allocator.

00:45:20.870 --> 00:45:22.420
So once again,
to make sure that the person

00:45:22.420 --> 00:45:27.000
hasn't typed in just some garbage,
so they can type "hello" quote there,

00:45:27.000 --> 00:45:29.330
which in this case wouldn't parse
because we didn't have enough quotes.

00:45:29.370 --> 00:45:31.920
You really would have to escape it,
but I'm not doing any of that.

00:45:32.010 --> 00:45:34.610
So what we're going to do is
check if the query is okay.

00:45:34.610 --> 00:45:36.550
If the query is okay,
the next step I'm going to do is

00:45:36.550 --> 00:45:39.430
I'm going to register for all the
notifications that I'm interested in.

00:45:39.570 --> 00:45:42.480
So in this case,
I'm going to do this in Objective-C.

00:45:42.560 --> 00:45:44.910
I'm going to register with the

00:45:45.070 --> 00:45:47.120
With a default notification center.

00:45:47.120 --> 00:45:49.670
So I'm registering the
finished notification,

00:45:49.760 --> 00:45:52.070
the progress notification,
and the update notification.

00:45:52.220 --> 00:45:54.000
And I'm going to have them
call my update data method.

00:45:54.000 --> 00:45:56.940
And I'm only interested in the
current query that I'm executing.

00:45:59.680 --> 00:46:02.780
So now that I've registered
for the notifications,

00:46:02.780 --> 00:46:06.380
the next step I need to do is
actually execute the query.

00:46:09.370 --> 00:46:11.680
So I'm going to execute the query
and I'm going to tell the system that

00:46:11.680 --> 00:46:13.300
I want to be notified of updates.

00:46:13.300 --> 00:46:17.290
I'm also running it asynchronously
because I haven't put any flags there.

00:46:18.230 --> 00:46:21.040
So now that I've got the query back,
so now the query's going

00:46:21.040 --> 00:46:22.240
to start running in the UI.

00:46:22.320 --> 00:46:24.590
So the next step I want to do
is I want to update the UI.

00:46:24.680 --> 00:46:28.900
So as the query is executing,
I'm just going to call-- my update data

00:46:28.900 --> 00:46:31.680
colon method is going to get called.

00:46:31.700 --> 00:46:36.210
And in this case,
I'm going to reload the table view.

00:46:36.210 --> 00:46:57.120
This call, and then I'm going to set
the title of the window.

00:46:57.120 --> 00:46:57.120
So the title,
I'm just going to say the query that the

00:46:57.120 --> 00:46:57.120
person entered in and how many matches
they currently have at this point.

00:46:57.120 --> 00:46:57.120
And then the number of
matches at this point,

00:46:57.120 --> 00:46:57.120
I'm just going to call
MD Query Get Results Count,

00:46:57.120 --> 00:46:57.120
which will say that I have 10 or 14
or however many I have at that point.

00:46:57.120 --> 00:46:57.120
So the final step

00:46:57.870 --> 00:47:00.610
is now I need to update the
table view in the result query.

00:47:00.690 --> 00:47:04.900
So the number of rows in the
table view is equal to the

00:47:04.980 --> 00:47:07.580
number of items in the query.

00:47:08.320 --> 00:47:11.700
So if the person did enter
a query that we have,

00:47:11.700 --> 00:47:13.500
I can ask the query for its result count.

00:47:13.580 --> 00:47:16.710
If we don't have a query,
then I'll simply return zero.

00:47:18.320 --> 00:47:21.500
So then the last step in the table view,
table view wants to get the

00:47:21.590 --> 00:47:22.800
data that it wants to display.

00:47:22.800 --> 00:47:25.680
So it's going to pass me the
column that it's interested in,

00:47:25.790 --> 00:47:27.960
which is that,
and then the row that I'm interested in.

00:47:29.920 --> 00:47:36.080
So the first thing I'm going to do is,
given the row, I'm going to get the query

00:47:36.080 --> 00:47:37.830
result at the particular index.

00:47:38.030 --> 00:47:39.560
So I'll get the MD item ref.

00:47:39.580 --> 00:47:43.660
You'll notice here I'm not-- yeah,
I probably-- in this code,

00:47:43.660 --> 00:47:48.180
I really should be enabling
and disabling the query.

00:47:48.360 --> 00:47:53.950
I'm not doing that here, and technically,
that's incorrect too,

00:47:53.950 --> 00:47:54.240
but it'll work for this demo.

00:47:54.240 --> 00:47:54.240
So if I'm updating the first column--

00:47:54.910 --> 00:47:58.220
All I'm going to do is I'm going to get
the path of the individual attribute,

00:47:58.240 --> 00:48:01.700
calling mditemcopyattribute,
with the mditemref

00:48:01.700 --> 00:48:04.580
that I'm interested in,
which I've just gotten above right here,

00:48:04.580 --> 00:48:07.790
and then I want the attribute path.

00:48:08.270 --> 00:48:11.120
So I'm going to take the path and then
I'm going to call NSWorkspace and get

00:48:11.180 --> 00:48:12.540
the icon for that particular path.

00:48:12.540 --> 00:48:18.050
And then the last step here is

00:48:19.670 --> 00:48:21.250
So I'm going to have the two
columns in the table view.

00:48:21.260 --> 00:48:23.760
The first one's going to be the icon,
and the second column will be

00:48:23.760 --> 00:48:24.980
the display name of the file.

00:48:25.100 --> 00:48:29.300
So the display name is equivalent
to what you would see in the Finder

00:48:29.360 --> 00:48:31.310
if you were looking at it there.

00:48:32.180 --> 00:48:36.250
So I'm just going to go the same thing,
the same-- do the same thing again.

00:48:36.300 --> 00:48:39.920
I call mditemCopyAttribute
with the mditemRef of interest,

00:48:39.920 --> 00:48:43.000
which I got above again,
and I get the display name.

00:48:43.000 --> 00:48:47.150
And I set that to object
and then release them.

00:48:47.260 --> 00:48:53.000
So if we build this one-- whoops.

00:48:57.720 --> 00:48:59.400
Oh, so I have a syntax error here.

00:48:59.400 --> 00:49:01.190
There we go.

00:49:01.230 --> 00:49:02.740
This is just to show
you that it's all live,

00:49:02.740 --> 00:49:04.830
and I'm not faking this all.

00:49:10.780 --> 00:49:11.540
So here's the query.

00:49:11.540 --> 00:49:16.990
So if I type in "Lotus,"
I end up getting 18 matches,

00:49:17.000 --> 00:49:17.800
and here's all the files.

00:49:17.800 --> 00:49:19.740
So in this case, they're all pictures.

00:49:19.820 --> 00:49:25.800
I can go a little further and
type "dress book," and I get...

00:49:26.120 --> 00:49:30.040
Some cards from address book,
applications,

00:49:30.040 --> 00:49:33.300
and then any source code that
happens to be on the system.

00:49:33.300 --> 00:49:37.320
Okay,
can we switch back to the slides please?

00:49:45.490 --> 00:49:48.180
So now you know how to do
all the simple type queries.

00:49:48.180 --> 00:49:51.410
Now we need to take this a
step a little further and do

00:49:51.410 --> 00:49:52.760
something more interesting.

00:49:52.780 --> 00:49:56.210
So this is where I'm going to talk
about some more advanced topics.

00:49:56.890 --> 00:49:58.640
The first thing you
noticed in my little demo,

00:49:58.640 --> 00:49:59.800
I didn't do any sorting.

00:49:59.800 --> 00:50:02.500
They just came back in the array--
in the order that they happen

00:50:02.610 --> 00:50:03.520
to come back in the server.

00:50:03.600 --> 00:50:07.000
So the metadata library provides
some simple sorting you can do.

00:50:07.220 --> 00:50:11.600
The only sorting that it actually
does is sort in ascending order.

00:50:11.600 --> 00:50:15.530
So in this case,
the last parameter of mdquerycreate

00:50:15.530 --> 00:50:18.110
is a CFArray containing the
names of the attributes you

00:50:18.170 --> 00:50:20.920
want to sort in ascending order.

00:50:21.510 --> 00:50:23.370
But you can do further sorting,
but you have to provide

00:50:23.370 --> 00:50:24.400
your own callback function.

00:50:24.400 --> 00:50:28.120
So for example,
the search menu sorts the dates

00:50:28.120 --> 00:50:33.400
in descending order and names
of the files in ascending order.

00:50:33.400 --> 00:50:34.400
You can do that kind of stuff.

00:50:34.400 --> 00:50:37.390
You have to provide the
callback on your own.

00:50:38.540 --> 00:50:42.780
The other thing you'd like to do is scope
the query to a particular directory.

00:50:42.780 --> 00:50:45.100
So maybe you only want to search
the person's home directory

00:50:45.100 --> 00:50:48.210
or only a particular volume
or only a particular hard drive.

00:50:48.310 --> 00:50:53.310
Finder lets you do this when you set the
search scope in the little search slices.

00:50:54.110 --> 00:50:56.730
So we'll go back to the demo
machine again and we'll end up

00:50:56.780 --> 00:51:03.080
and I'll add sorting and the
scoping of the individual queries.

00:51:03.580 --> 00:51:05.700
The thing to know about the
sorting and the scoping,

00:51:05.800 --> 00:51:08.230
you need to do this
before the query execute.

00:51:08.360 --> 00:51:10.480
After the query is executed,
you cannot change any of these values.

00:51:13.100 --> 00:51:15.840
So if we go back here,
now that we've created-- so

00:51:15.840 --> 00:51:18.140
now we've created the query.

00:51:18.200 --> 00:51:21.020
The first thing I want to do-- oh, sorry.

00:51:21.220 --> 00:51:25.920
Instead of creating the
query-- so in the past-- oops.

00:51:25.920 --> 00:51:27.910
Oh, jeez.

00:51:30.420 --> 00:51:33.970
So I'm going to create the query now.

00:51:34.010 --> 00:51:36.790
So the last parameter,
I'm going to pass it a CFArray or

00:51:36.790 --> 00:51:39.730
an NSArray in this case,
and I want to sort by display name.

00:51:39.730 --> 00:51:42.100
So it's just the array
containing all the strings.

00:51:42.100 --> 00:51:45.590
I could have easily added
more and more attributes.

00:51:46.410 --> 00:51:47.100
So that's that.

00:51:47.210 --> 00:51:48.760
So now they'll be sorted.

00:51:48.760 --> 00:51:54.040
And then the next step to do is I want
to limit the scope of the query to only

00:51:54.040 --> 00:51:57.300
search in the person's home directory.

00:51:57.410 --> 00:51:59.300
So in this case, I have the query again.

00:51:59.300 --> 00:52:02.430
I call mdquery setSearchScope.

00:52:02.560 --> 00:52:03.800
The first parameter is the query.

00:52:03.800 --> 00:52:08.820
The second parameter is an array of

00:52:09.710 --> 00:52:14.840
CFStrings containing the path or
CFURLs pointing to the path where

00:52:14.840 --> 00:52:18.230
you want to search for your files.

00:52:18.410 --> 00:52:20.890
Here you can also pass,
there's a bunch of known

00:52:20.890 --> 00:52:22.220
constants you can pass.

00:52:22.230 --> 00:52:25.590
In this case I'm passing KMD query
scope home to only limit it to

00:52:25.590 --> 00:52:26.900
the person's home directory.

00:52:26.980 --> 00:52:31.090
There's some to limit it to just
the network or the entire computer.

00:52:31.850 --> 00:52:36.100
So if we do the same query
again and I type Lotus,

00:52:36.120 --> 00:52:38.140
I'll get nine matches
instead of the previous time,

00:52:38.200 --> 00:52:40.960
which I think I got 18 because
it found the rest of the files

00:52:40.990 --> 00:52:41.950
on the rest of the hard drive.

00:52:41.960 --> 00:52:44.000
So these are just the pictures
in my home directory instead

00:52:44.000 --> 00:52:46.320
of a picture of a lotus,
which was somewhere else of a flower.

00:52:46.320 --> 00:52:49.860
Okay,
can we switch back to the slides again,

00:52:49.930 --> 00:52:50.770
please?

00:52:56.480 --> 00:53:00.990
So the last thing I'm going to talk
about is fetching the query attributes.

00:53:01.200 --> 00:53:05.460
So basically, all this entails is as
your query is executing,

00:53:05.690 --> 00:53:08.990
the query is actually sorted
on the client library.

00:53:09.040 --> 00:53:13.900
So in order to make this more efficient,
what happens with the server sends--

00:53:13.920 --> 00:53:17.480
when we send the request back to
the server to get the query results,

00:53:17.500 --> 00:53:20.430
we send it another message saying,
please send us these list of

00:53:20.450 --> 00:53:22.610
attributes along with the result.

00:53:22.680 --> 00:53:24.900
So basically,
if you can conceptually think of

00:53:24.910 --> 00:53:29.690
this as the query starting the array
of the results and alongside of it,

00:53:29.840 --> 00:53:31.280
it's got an array.

00:53:31.280 --> 00:53:34.340
So the first array is array of empty
item refs and alongside it is another

00:53:34.340 --> 00:53:35.850
array of the attribute values.

00:53:35.880 --> 00:53:39.780
So if you're sorting by display
name and author as an example,

00:53:39.780 --> 00:53:42.840
which-- so in this case,
I'm doing it by content type.

00:53:42.890 --> 00:53:46.020
So when I sort by these values,
I've also got them locally

00:53:46.060 --> 00:53:47.570
in the client library.

00:53:47.660 --> 00:53:50.020
So it would make sense for
you to have access to this.

00:53:50.300 --> 00:53:52.640
So this is all basically a bulk call.

00:53:52.640 --> 00:53:55.930
So as I get the results,
send me back these values because

00:53:55.930 --> 00:53:58.350
I'm going to need them immediately.

00:54:00.420 --> 00:54:02.250
The only reason,
the big reason why you want to do this,

00:54:02.370 --> 00:54:04.540
because every time you're making,
so we do this in the sorting

00:54:04.540 --> 00:54:08.060
because if we kept doing,
to sort them we would need the value

00:54:08.060 --> 00:54:10.840
and to get the value we'd have to
make a round trip back to the server,

00:54:10.840 --> 00:54:13.700
ask it for the value and get
the value back and sort them.

00:54:13.700 --> 00:54:17.950
If we were sorting 100,000 items we
would be sending 100,000 message,

00:54:17.950 --> 00:54:20.740
100,000 plus messages
as we're doing the sort.

00:54:22.530 --> 00:54:25.310
So to get these values,
there's only two basic calls.

00:54:25.310 --> 00:54:27.820
So if you, once again,
if you conceptually think of the

00:54:27.820 --> 00:54:31.170
query as storing off to the side,
so we have an array of the MD item

00:54:31.170 --> 00:54:33.800
refs that we're interested,
and then off to the side we have

00:54:33.870 --> 00:54:35.740
another array of the attribute values.

00:54:35.900 --> 00:54:39.100
So it seems that we only need two calls.

00:54:39.680 --> 00:54:43.000
So we call mdQueryGetIndexOfResult
given the query,

00:54:43.000 --> 00:54:45.970
and then the mditemref that we're
interested in will give you the index on

00:54:45.970 --> 00:54:48.720
that second array of the value you want.

00:54:49.180 --> 00:54:52.290
And then to look up values
within that sort of subarray,

00:54:52.450 --> 00:54:57.300
we call
mdQueryGetAttributeValuesOfResultAtIndex.

00:54:57.330 --> 00:54:59.900
The first parameter is the query,
the second parameter is

00:54:59.900 --> 00:55:04.060
the attribute that I want,
content type, and then last is the index.

00:55:04.100 --> 00:55:09.230
If the value is not there or it's empty,
you'll get a nil back.

00:55:12.010 --> 00:55:14.200
So, and that was the talk.

00:55:14.280 --> 00:55:15.310
So I'll invite Xavier back.

00:55:15.430 --> 00:55:18.640
So, as you notice,
it's not that much code in your

00:55:18.640 --> 00:55:20.310
program to try to do a query.

00:55:20.310 --> 00:55:21.840
It's very, very simple.

00:55:21.850 --> 00:55:25.780
So you should all try to integrate it
in quickly within your application.

00:55:32.350 --> 00:55:34.140
Hello, hello.

00:55:34.140 --> 00:55:38.800
OK, so to summarize, I think today,
between Dominic's talk this morning

00:55:38.800 --> 00:55:43.480
about plugins and our talk on MD queries,
I hope we gave you a

00:55:43.480 --> 00:55:45.930
good overview of how you,
as a developer,

00:55:46.020 --> 00:55:49.000
can integrate with this great technology.

00:55:49.010 --> 00:55:52.150
I mean, you've all seen all the marketing
we've been pushing behind Tiger.

00:55:52.180 --> 00:55:54.620
Spotlight is obviously number one.

00:55:54.620 --> 00:55:57.680
I think there are really a lot
of things that you guys can do

00:55:57.680 --> 00:56:01.620
on your side of the fence in your
application to take advantage of that,

00:56:01.660 --> 00:56:03.660
to distinguish yourself
from the marketplace,

00:56:03.660 --> 00:56:06.900
but as well to bring tremendous
innovation on the platform

00:56:06.900 --> 00:56:08.340
with your application.

00:56:08.390 --> 00:56:10.440
So remember,
there are a couple of things I want

00:56:10.510 --> 00:56:11.960
you to remember from today's talk.

00:56:11.960 --> 00:56:17.190
The first one is that Spotlight is
totally integrated inside Mac OS X Tiger.

00:56:17.350 --> 00:56:22.300
So for you as a developer, number one,
if you have your own file type,

00:56:22.300 --> 00:56:25.400
if you have your custom file format
that your application generates,

00:56:25.460 --> 00:56:28.740
please do write a Spotlight importer.

00:56:28.740 --> 00:56:30.540
OK, very, very important.

00:56:30.540 --> 00:56:33.520
Then after that-- So with that,
obviously, I think-- I hope today we

00:56:33.520 --> 00:56:36.690
gave you a quick overview,
and we really convinced you that

00:56:36.780 --> 00:56:40.180
adding query APIs inside your
application could make a lot of sense.

00:56:40.180 --> 00:56:42.790
And hopefully,
we showed you the different ways you

00:56:42.790 --> 00:56:45.380
can integrate that in your application.

00:56:46.880 --> 00:56:51.040
For more information,
we have a couple of new features.

00:56:51.120 --> 00:56:52.660
Today, this afternoon, the UTI.

00:56:52.800 --> 00:56:55.570
Obviously, we talked this morning,
UTIs are very important

00:56:55.700 --> 00:56:58.940
across Mac OS X now,
the Unified Type Identifiers.

00:56:58.960 --> 00:57:03.420
And so Chris actually will be talking
later on at five about UTIs and how

00:57:03.420 --> 00:57:07.240
you can declare them in your plugins,
inside your application,

00:57:07.240 --> 00:57:10.140
whatever different things
you should look for.

00:57:10.190 --> 00:57:13.740
The lab, which starts,
if I'm not mistaken, not at noon,

00:57:13.740 --> 00:57:15.920
but at five, I think, is that correct?

00:57:17.200 --> 00:57:20.920
3:30, very soon in all cases,
so check your little agendas.

00:57:20.950 --> 00:57:23.480
Where you have actually the
Spotlight team pretty much there to

00:57:23.480 --> 00:57:24.960
answer any questions you may have.

00:57:24.970 --> 00:57:28.810
You know, it could be like on plugins
or on the MD Query APIs,

00:57:28.880 --> 00:57:29.820
it doesn't matter.

00:57:29.860 --> 00:57:32.290
Just come by, talk to us.

00:57:32.500 --> 00:57:34.490
I know this morning a couple
of folks had questions,

00:57:34.490 --> 00:57:38.780
and so this is a great way to
get your questions answered.

00:57:38.810 --> 00:57:40.900
And if you want to learn
more about the file system,

00:57:40.900 --> 00:57:44.710
we have a session as well on Thursday,
Tuesday, Thursday,

00:57:44.750 --> 00:57:47.700
today at 5:00 And Dominique will
be part of that if you want to

00:57:47.700 --> 00:57:49.990
learn more about the file system.

00:57:51.430 --> 00:57:51.940
Correct.

00:57:51.940 --> 00:57:54.000
And thank you for reminding
me that there is another lab

00:57:54.170 --> 00:57:56.680
tomorrow morning starting at 9:00.

00:57:56.690 --> 00:57:58.940
And we hope to see you there.

00:57:58.940 --> 00:58:00.610
And thank you.

00:58:05.980 --> 00:58:07.940
One thing that is very important,
whatever you're doing,

00:58:08.020 --> 00:58:09.970
if you're going to write
using the MD Query APIs,

00:58:09.990 --> 00:58:12.440
if you're going to do a Spotlight plugin,
please send me an email.

00:58:12.440 --> 00:58:16.550
We want to track who's doing what and
we hope we can help you actually promote

00:58:16.630 --> 00:58:18.880
the integration of Tiger technologies
inside your application.