WEBVTT

00:00:23.710 --> 00:00:30.500
And then we're going to finally
wrap it up with some widget events

00:00:30.500 --> 00:00:38.500
that you'll probably help you
make a widget from scratch that

00:00:38.500 --> 00:00:38.500
integrates well into Dashboard,
feels like it belongs,

00:00:44.620 --> 00:00:47.260
So what's in a Widget?

00:00:47.260 --> 00:00:49.290
There's at least four things
inside of every Widget.

00:00:49.290 --> 00:00:51.500
And if you were here at the last session,
you saw these.

00:00:51.500 --> 00:00:52.990
There's at least an HTML file.

00:00:53.000 --> 00:00:54.720
This is where your
Widget's implementation is.

00:00:55.160 --> 00:00:59.980
Here you use CSS, HTML, and JavaScript to
introduce interactivity,

00:00:59.980 --> 00:01:02.290
your design,
and your structure for your Widget.

00:01:02.780 --> 00:01:04.960
From there,
there's also an Info.plist file.

00:01:04.960 --> 00:01:08.590
And for those of you not familiar,
the Info.plist is used for all of

00:01:08.620 --> 00:01:12.110
the information that Dashboard and
Mac OS X needs about your Widget,

00:01:12.110 --> 00:01:14.340
all the metadata, its name,
some little bits about

00:01:14.370 --> 00:01:16.490
where to find the HTML,
and stuff like that.

00:01:16.540 --> 00:01:21.050
Beyond that, there's two image files,
a default.png and an icon.png.

00:01:21.150 --> 00:01:25.410
These are files that are used by the
Dashboard to represent your Widget,

00:01:25.450 --> 00:01:28.440
either while it's loading
or in the Widget bar.

00:01:28.440 --> 00:01:31.540
And these are put inside
of a Widget bundle.

00:01:31.540 --> 00:01:32.760
A Widget bundle is a file that's
used to represent your Widget.

00:01:32.760 --> 00:01:35.060
A widget to a user is a single
icon which they can click on

00:01:35.110 --> 00:01:36.130
and just represents a Widget.

00:01:36.140 --> 00:01:38.340
But inside,
it's really a folder which contains all

00:01:38.340 --> 00:01:40.160
of the resources that your Widget needs.

00:01:40.160 --> 00:01:42.280
And you can put anything
you need in here,

00:01:42.710 --> 00:01:44.570
images and CSS and JavaScript files.

00:01:44.580 --> 00:01:47.680
So to that end,
a lot of Widgets you'll see will have

00:01:47.680 --> 00:01:51.030
things like JavaScript files in there,
CSS files.

00:01:51.040 --> 00:01:53.230
You'll see these things called Lproj.

00:01:53.310 --> 00:01:54.350
These are language projects.

00:01:54.370 --> 00:01:55.850
They're used for localizing your Widget.

00:01:55.860 --> 00:01:59.080
And finally, you'll also see things like
Widget plugins sometimes.

00:01:59.080 --> 00:02:02.570
And these are native code plugins
which you can use to bridge the WebKit.

00:02:02.740 --> 00:02:04.740
So you can use these to
build your own Widget.

00:02:04.740 --> 00:02:07.460
So you can use these to build your
own framework that's used inside of

00:02:07.460 --> 00:02:08.700
a Widget and Objective-C runtime.

00:02:08.790 --> 00:02:12.740
So we're going to jump right into
it and build your first Widget.

00:02:12.740 --> 00:02:14.610
This Widget has four things
in it like I mentioned before.

00:02:14.740 --> 00:02:20.040
It has an Info.plist,
it has an HTML file, a default.png,

00:02:20.040 --> 00:02:22.290
and it has an icon.png.

00:02:29.300 --> 00:02:32.030
So I should mention really quick
that all of the sample code

00:02:32.040 --> 00:02:36.440
we're using in this session is
available from the WWDC 2005 site.

00:02:36.450 --> 00:02:38.860
This is the sample code
example called Hello World.

00:02:38.920 --> 00:02:41.180
So if you've downloaded it,
feel free to follow along.

00:02:41.210 --> 00:02:43.330
If not, just look on the screen here,
and we'll take you

00:02:43.380 --> 00:02:44.140
through the whole process.

00:02:44.240 --> 00:02:46.860
It's very simple,
and will only take about a minute or two.

00:02:47.270 --> 00:02:50.010
And just so you know,
I'm going to be using a typing assistant,

00:02:50.010 --> 00:02:51.390
which we call Demo Monkey.

00:02:51.510 --> 00:02:53.600
And the reason for that is because
there's nothing more boring

00:02:53.600 --> 00:02:55.100
than watching me type code.

00:02:55.100 --> 00:02:59.440
So I'm just going to be dragging the
bits of code that I need into the files,

00:02:59.440 --> 00:03:01.810
and I'll talk to them as I drag them in.

00:03:02.920 --> 00:03:05.680
So to start off with,
if we take a look at the Widget,

00:03:05.900 --> 00:03:06.900
it's actually very straightforward.

00:03:06.900 --> 00:03:09.920
It just has a graphic in the background,
then it has the text, "Hello,

00:03:09.920 --> 00:03:12.800
world." The text is
positioned and stylized.

00:03:12.820 --> 00:03:16.550
And then it also has a couple of
other nice things with regards to

00:03:16.550 --> 00:03:20.800
where the close button is located,
and we do that in our Info.plist key.

00:03:20.800 --> 00:03:23.300
We always recommend that you
place the close button over the

00:03:23.310 --> 00:03:24.770
top left corner of your Widget.

00:03:24.830 --> 00:03:26.800
We'll get into that more into
detail later and all that stuff.

00:03:26.800 --> 00:03:28.800
So let's go in and
actually make this Widget.

00:03:28.800 --> 00:03:31.800
The first thing we'll do here,
and we're going to use Xcode to do this,

00:03:31.800 --> 00:03:32.800
is create a new file.

00:03:32.800 --> 00:03:35.800
And this is going to be our HTML file.

00:03:35.800 --> 00:03:38.800
The first bit we're going
to put in here is our body,

00:03:38.800 --> 00:03:40.800
and it uses, you know, standard HTML.

00:03:40.800 --> 00:03:42.800
So we have opening and closing HTML tags.

00:03:42.800 --> 00:03:44.770
And then in the body, we have two things.

00:03:44.900 --> 00:03:46.730
We have an image,
which is our background.

00:03:46.810 --> 00:03:48.800
We happen to be reusing
our default.png here,

00:03:48.800 --> 00:03:50.660
but you can use any image you like.

00:03:50.800 --> 00:03:53.790
And then we have the text, "Hello,
world." And then we wrap it in a div.

00:03:53.830 --> 00:03:56.800
So a div is just an HTML layer.

00:03:56.860 --> 00:03:58.800
And we style it.

00:03:58.800 --> 00:04:01.260
We're using a class,
and we call that class "Hello,

00:04:01.260 --> 00:04:03.800
text." So let me bring in
that style information.

00:04:03.800 --> 00:04:05.770
And that goes in the head of the file.

00:04:05.900 --> 00:04:07.800
It's in between the HTML and the body.

00:04:07.800 --> 00:04:12.120
And in it, we just have two bits,
the first bit being "Hello, text." Again,

00:04:12.120 --> 00:04:14.650
this just applies some font information,
bolds it, places it,

00:04:14.650 --> 00:04:15.780
and things to that effect.

00:04:15.850 --> 00:04:18.730
And then the other style
which we use here is a body,

00:04:18.800 --> 00:04:20.800
and we set our margin to zero.

00:04:20.920 --> 00:04:24.790
So the reason you do this is because you
don't want to use margins in a Widget.

00:04:24.810 --> 00:04:26.790
Sometimes margins change
between WebKit versions,

00:04:26.880 --> 00:04:27.800
and it leads to unpredictable layout.

00:04:27.800 --> 00:04:29.780
If you get rid of that,
wherever you position something

00:04:29.790 --> 00:04:30.800
is where it'll end up.

00:04:30.800 --> 00:04:32.660
So we strongly recommend you
use "Set your body to zero."

00:04:32.830 --> 00:04:34.800
It's a very simple thing.

00:04:34.800 --> 00:04:35.790
So that's our HTML file.

00:04:35.850 --> 00:04:36.780
It's actually pretty straightforward.

00:04:36.800 --> 00:04:38.800
So I'm just going to save this.

00:04:40.030 --> 00:04:42.330
And what I'm going to do is,
on the desktop,

00:04:42.330 --> 00:04:44.740
I am going to make a new folder.

00:04:44.750 --> 00:04:47.960
And I'm going to call
this one Hello World.

00:04:49.170 --> 00:04:55.050
And in it, I'm going to put this file,
hello-world.html.

00:04:55.820 --> 00:04:56.900
So that's it.

00:04:56.950 --> 00:05:00.460
I can take this file
if I go on my desktop,

00:05:00.460 --> 00:05:02.100
and I can run it inside Safari.

00:05:02.100 --> 00:05:04.100
This is one of the great
things about Widgets is that,

00:05:04.120 --> 00:05:06.500
ooh, you'll notice that it
doesn't work in Safari.

00:05:06.760 --> 00:05:09.550
And the reason for that is because
I have to include the images.

00:05:09.610 --> 00:05:12.230
So if I go here into the project
that I've already set aside,

00:05:12.240 --> 00:05:14.090
and you have this all
in your sample code,

00:05:14.150 --> 00:05:17.430
there's the two files that I need,
default and icon.png.

00:05:17.540 --> 00:05:18.660
So let's take a quick peek at

00:05:21.000 --> 00:05:23.010
The default icon is what's--
the default-- I'm sorry,

00:05:23.020 --> 00:05:26.160
the default image is what's shown on
the Dashboard as your Widget's loading.

00:05:26.290 --> 00:05:28.050
And like I said,
we're also using it as the

00:05:28.060 --> 00:05:29.470
background for our Widget.

00:05:30.080 --> 00:05:34.800
And then our icon.png is what's shown in
the Widget bar to represent your Widget.

00:05:34.800 --> 00:05:38.890
Users can click on this or drag
it out to make the actual Widget.

00:05:39.870 --> 00:05:42.990
So now that they're in the
same folder as our HTML file,

00:05:42.990 --> 00:05:45.240
I can show this in Safari,
and sure enough, there we go.

00:05:45.240 --> 00:05:46.260
It has our text and our image.

00:05:46.380 --> 00:05:47.040
Everything's placed.

00:05:47.040 --> 00:05:50.040
So it's a great web page,
but it's not a Widget yet.

00:05:50.240 --> 00:05:53.810
And the thing we have to add to make
it a Widget is an Info.plist file.

00:05:53.820 --> 00:05:57.040
So the Info.plist file is all
the information that Mac OS X,

00:05:57.160 --> 00:05:59.470
the Finder,
and Dashboard need in order to make

00:05:59.570 --> 00:06:01.660
this particular bundle a Widget.

00:06:01.800 --> 00:06:04.220
It provides some metadata
that's important.

00:06:04.220 --> 00:06:06.320
It must be named Info.plist.

00:06:06.420 --> 00:06:07.940
This is a requirement of Mac OS X.

00:06:08.500 --> 00:06:15.310
So we're going to go into
Xcode here and make a new file.

00:06:15.620 --> 00:06:20.050
So every Info.plist file starts off with
just some information about the file,

00:06:20.230 --> 00:06:23.360
what version of XML we're using,
and which DTD it conforms to.

00:06:23.390 --> 00:06:26.120
Do yourself a favor and just
grab this from existing files.

00:06:26.120 --> 00:06:27.660
It just makes life a lot easier.

00:06:27.840 --> 00:06:30.090
But we've included it here.

00:06:30.570 --> 00:06:33.420
From there, we have a couple of keys
that are required by the OS.

00:06:33.520 --> 00:06:35.320
The first one is CFBundleDisplayName.

00:06:35.330 --> 00:06:37.780
This is the name of the Widget
as it will be localized.

00:06:37.800 --> 00:06:40.200
And this is then used in the
Widget Bar and in the Finder if

00:06:40.280 --> 00:06:42.780
you provide localized equivalents.

00:06:43.170 --> 00:06:45.090
There's a CFBundle identifier.

00:06:45.410 --> 00:06:47.800
This is a unique string
for your class of Widget.

00:06:48.010 --> 00:06:49.600
You have to make this
unique for any Widget.

00:06:49.620 --> 00:06:55.040
And this helps Dashboard separate--
helps it-- how should I say--

00:06:55.040 --> 00:06:57.560
differentiate different Widgets.

00:06:58.570 --> 00:07:00.460
From there, we have a CFBundle name.

00:07:00.460 --> 00:07:02.600
This is what's used by other
utilities within the system

00:07:02.690 --> 00:07:04.660
to recognize this Widget,
like the activity monitor

00:07:04.660 --> 00:07:05.980
and things to that effect.

00:07:05.990 --> 00:07:08.020
And then finally,
we have a CFBundle version.

00:07:08.140 --> 00:07:10.840
We recommend you provide this,
even though it's not strictly necessary,

00:07:11.090 --> 00:07:12.780
because it helps for conflict resolution.

00:07:12.780 --> 00:07:15.500
If a user has multiple versions
of your Widget installed,

00:07:15.500 --> 00:07:19.680
Dashboard is smart enough to look at this
key and load the most recent version.

00:07:20.820 --> 00:07:24.530
From there, we're going to load in some
Dashboard-specific keys.

00:07:24.690 --> 00:07:27.240
The first one we're going
to put in here is main HTML.

00:07:27.310 --> 00:07:30.620
And this is just a string which
points to the HTML which contains

00:07:30.620 --> 00:07:32.120
the implementation of our Widget.

00:07:32.150 --> 00:07:34.940
Remember a minute ago,
I saved hello world dot HTML.

00:07:35.200 --> 00:07:36.620
Well, here's where I specify it.

00:07:36.660 --> 00:07:38.780
And when Dashboard loads this Widget,
it's going to say, OK,

00:07:38.810 --> 00:07:42.200
this is the HTML file I need,
and it's going to load that.

00:08:07.800 --> 00:08:07.830
We're also going to put in a close box.

00:08:07.830 --> 00:08:07.890
And like I said before, by default,
a close box, if you don't specify the

00:08:07.890 --> 00:08:07.950
close box inset X and Y keys,
it just goes in the top left corner,

00:08:07.950 --> 00:08:07.980
which is not that big of a deal.

00:08:07.980 --> 00:08:08.050
But if your Widget has alpha or
transparency around its edges,

00:08:08.050 --> 00:08:08.100
you need to move the close
box so that it's over the top

00:08:08.100 --> 00:08:08.120
left corner of the Widget.

00:08:08.120 --> 00:08:08.200
It just helps people associate
that the close box belongs

00:08:08.200 --> 00:08:08.800
to a Widget a lot easier.

00:08:10.830 --> 00:08:12.640
And then the final thing we need
to do is we need to bring in just

00:08:12.640 --> 00:08:14.560
some closing tags to close out the
dictionary that's the plist and

00:08:14.660 --> 00:08:15.800
close out the plist altogether.

00:08:15.800 --> 00:08:17.800
So we're going to save this.

00:08:17.800 --> 00:08:19.490
And again,
we'll save it in the same folder

00:08:19.490 --> 00:08:20.720
we saved all our other files.

00:08:20.790 --> 00:08:23.790
We name it Info.plist.

00:08:24.030 --> 00:08:27.420
Now, I just built this all
manually using Xcode,

00:08:27.420 --> 00:08:30.140
and that's okay,
but we provide on the system a

00:08:30.140 --> 00:08:32.110
great-- with the developer tools,
actually-- the

00:08:32.110 --> 00:08:35.900
Property List Editor application,
which we strongly recommend you use.

00:08:36.040 --> 00:08:38.720
It just helps prevent typos,
and it gives it a nice graphical

00:08:38.850 --> 00:08:39.900
interface for all the different keys.

00:08:39.980 --> 00:08:41.900
So if I look here,
all the keys that I have

00:08:41.900 --> 00:08:44.900
already specified in Xcode,
they're all listed here.

00:08:44.900 --> 00:08:46.890
Their types are also noted here.

00:08:46.960 --> 00:08:49.900
This is especially useful for, like,
the closed-box inset X and Y.

00:08:49.900 --> 00:08:50.840
These aren't strings.

00:08:50.910 --> 00:08:51.900
These are numbers.

00:08:52.230 --> 00:08:53.900
Things like that are very helpful.

00:08:53.900 --> 00:08:55.900
So I strongly recommend in
the future you use that.

00:08:55.900 --> 00:08:57.880
So we have a folder.

00:08:57.980 --> 00:08:58.890
We have our four files in it.

00:08:58.920 --> 00:09:00.570
Let's make it a Widget.

00:09:01.240 --> 00:09:02.320
I'm just going to close it.

00:09:02.340 --> 00:09:06.350
And all that you have to do to make
something a Widget is to select its name

00:09:06.830 --> 00:09:11.370
and then provide the .wgt file extension.

00:09:11.520 --> 00:09:13.360
The finder's going to ask,
are you sure you want to do this?

00:09:13.360 --> 00:09:13.880
I'm going to say yes.

00:09:14.020 --> 00:09:15.660
Go ahead and do it.

00:09:16.250 --> 00:09:17.120
And then it's a Widget.

00:09:17.120 --> 00:09:19.040
It's replaced with the
standard Widget icon.

00:09:19.100 --> 00:09:21.140
And all I have to do
is double-click on it.

00:09:21.140 --> 00:09:23.200
And sure enough, there's my Widget.

00:09:23.200 --> 00:09:29.570
Back to slides, please.

00:09:33.790 --> 00:09:35.500
So now that we've assembled
your first widget,

00:09:35.550 --> 00:09:36.880
well, OK, it's a toy.

00:09:36.880 --> 00:09:38.300
It doesn't really do much of anything.

00:09:38.510 --> 00:09:40.780
It's time to actually make
your widget do something.

00:09:40.780 --> 00:09:43.440
And so you need to introduce
interactivity in your widget.

00:09:43.520 --> 00:09:45.320
And you do this using JavaScript.

00:09:45.390 --> 00:09:47.480
You can use the widget technologies,
which we'll discuss,

00:09:47.480 --> 00:09:49.150
and which were discussed
in the previous session.

00:09:49.290 --> 00:09:51.460
You can also leverage some of
the great new features in WebKit.

00:09:51.570 --> 00:09:55.580
But first, you really should think
about your widget's design.

00:09:55.660 --> 00:09:58.440
Design is what makes your widgets
stand apart and will make people

00:09:58.440 --> 00:10:00.290
recognize it when Dashboard is shown.

00:10:00.380 --> 00:10:02.260
So there's a lot of things
you should take into account.

00:10:02.320 --> 00:10:04.780
And you should do it first before
you actually implement your widget

00:10:04.800 --> 00:10:07.880
in order to put an emphasis,
the proper emphasis, on the design.

00:10:07.940 --> 00:10:10.690
So the first thing we're going to
talk about is try not to make your

00:10:10.820 --> 00:10:12.160
widget the jack of all trades.

00:10:12.450 --> 00:10:14.070
Make your widget very succinct.

00:10:14.130 --> 00:10:16.240
And have it focus on a primary purpose.

00:10:16.270 --> 00:10:18.790
And do that purpose phenomenally well.

00:10:18.890 --> 00:10:21.100
So instead of doing one
widget that has a clock,

00:10:21.170 --> 00:10:27.350
some weather, some calendar information,
do just a clock, just a weather widget,

00:10:27.490 --> 00:10:28.510
and just a calendar.

00:10:28.620 --> 00:10:30.350
And that way,
a user can put as many of each

00:10:30.580 --> 00:10:33.250
instance of widget they want
on their screen at any time.

00:10:33.400 --> 00:10:35.390
I have family in Europe,
so I want to keep track of

00:10:35.500 --> 00:10:36.720
their time versus my time.

00:10:36.720 --> 00:10:38.840
But I only care about the
weather in San Francisco,

00:10:38.890 --> 00:10:40.380
so I can only have one weather widget.

00:10:40.380 --> 00:10:42.050
And you get the idea.

00:10:42.850 --> 00:10:44.670
Scott Forstall in the
State of the Union said,

00:10:44.790 --> 00:10:50.090
"Don't Bogart the Dashboard."
What that means is make your Widget

00:10:50.090 --> 00:10:52.500
as small as effectively possible.

00:10:52.850 --> 00:10:56.130
Try not to make huge Widgets that
have banner ads and tons of article

00:10:56.130 --> 00:11:00.600
information and things like that in
there because it's just stealing space.

00:11:00.620 --> 00:11:04.230
Some of our most popular computers are
12-inch iBook and our 12-inch PowerBook,

00:11:04.230 --> 00:11:06.140
which have 10 by 7 screens.

00:11:06.250 --> 00:11:08.660
And a Widget like the one you're
seeing on the left is just going to

00:11:08.660 --> 00:11:11.850
totally hog the Dashboard space and
people aren't going to keep it around.

00:11:11.980 --> 00:11:14.250
If you're going to try to
provide this type of information,

00:11:14.250 --> 00:11:17.260
aggregate it into something like
headlines and then from there

00:11:17.260 --> 00:11:20.530
hand it off to another application
like Safari instead of just

00:11:20.810 --> 00:11:22.500
having it all on the Dashboard.

00:11:24.130 --> 00:11:27.250
The next thing you should take into
account is use color to your advantage.

00:11:27.500 --> 00:11:30.700
One of the nice things about Widgets
is that we don't constrain you nearly

00:11:30.700 --> 00:11:32.340
as much when it comes to UI design.

00:11:32.340 --> 00:11:33.630
You can do whatever you want.

00:11:33.780 --> 00:11:38.690
So color is a great way
to brand your Widget.

00:11:38.860 --> 00:11:40.520
For instance,
of the nine Widgets up there,

00:11:40.530 --> 00:11:42.560
you can pick out the
calendar really easily.

00:11:42.560 --> 00:11:44.040
It sticks out versus the other ones.

00:11:44.040 --> 00:11:46.860
If everyone makes a Widget that
looks like the world clock,

00:11:46.860 --> 00:11:48.960
you're not going to
differentiate your Widget.

00:11:48.960 --> 00:11:50.240
This red one really pops out.

00:11:50.240 --> 00:11:53.530
And so when I'm using Dashboard, I know,
OK, I need to use the calendar.

00:11:53.810 --> 00:11:55.310
I'm going to hit F12,
and then I'm going to

00:11:55.310 --> 00:11:57.100
look for the red thing,
the calendar in this case.

00:11:57.100 --> 00:11:59.910
And that's what's going to jump out,
and that's what I'm going to use.

00:12:00.830 --> 00:12:04.040
Next thing to consider is be very,
very careful with branding.

00:12:04.160 --> 00:12:07.590
Try not to waste space on the front of
your Widget with one-time information

00:12:07.590 --> 00:12:09.260
or advertisements and things like that.

00:12:09.260 --> 00:12:11.680
If you do need to provide some
information about branding and

00:12:11.680 --> 00:12:14.700
where the Widget data came from,
do it on the back of the Widget.

00:12:14.970 --> 00:12:17.660
Provide a URL,
maybe hand them off to a website,

00:12:17.880 --> 00:12:18.860
something to that effect.

00:12:19.040 --> 00:12:20.840
Try not to put banner ads on the front.

00:12:20.840 --> 00:12:22.980
Again,
people will just be annoyed by it and

00:12:23.230 --> 00:12:25.330
they're going to get rid of your Widget.

00:12:26.250 --> 00:12:28.310
This is another one that's
a little bit confusing.

00:12:28.500 --> 00:12:31.100
Try not to use Aqua controls
on the front of your Widget.

00:12:31.100 --> 00:12:36.100
Use integrated controls and design custom
controls that look like their real-world

00:12:36.100 --> 00:12:39.090
counterparts and behave like them,
but also integrate really

00:12:39.090 --> 00:12:39.990
well into your design.

00:12:40.100 --> 00:12:42.730
If you look at the Widget on the left,
the Aqua controls just

00:12:42.730 --> 00:12:44.010
kind of seem disruptive.

00:12:44.110 --> 00:12:47.090
They don't feel quite right
in place with this nice blue,

00:12:47.200 --> 00:12:48.030
clean design.

00:12:48.200 --> 00:12:50.480
So the Widget version on the
right has this nice little

00:12:50.480 --> 00:12:53.450
pop-up menu that just looks nice,
but notice that it still

00:12:53.450 --> 00:12:55.060
looks like a pop-up menu.

00:12:55.130 --> 00:12:56.370
It has a clear outline.

00:12:56.440 --> 00:12:58.100
It has the arrows on the side.

00:12:58.100 --> 00:13:01.490
It functions just like a pop-up menu,
too, but it integrates better into

00:13:01.500 --> 00:13:02.830
the design of the Widget.

00:13:03.720 --> 00:13:06.800
This is a personal pet peeve of mine:
closed boxes.

00:13:06.840 --> 00:13:09.910
Make sure to take the time to
add those two Info.plist keys,

00:13:09.910 --> 00:13:15.110
close_box_inset_x and -y,
to move your closed box over the

00:13:15.200 --> 00:13:16.530
top left corner of the Widget.

00:13:16.600 --> 00:13:19.580
If you do this,
people will know right away which

00:13:19.590 --> 00:13:21.330
Widget owns that closed box.

00:13:21.660 --> 00:13:24.660
If you don't do this and someone
has a really cluttered Dashboard,

00:13:24.730 --> 00:13:27.130
there's going to be closed boxes all
over the place and they're going to

00:13:27.130 --> 00:13:28.600
get really confused really quickly.

00:13:28.600 --> 00:13:30.900
So this shows a clear ownership,
and I really recommend you do it.

00:13:30.900 --> 00:13:31.920
It's just two keys.

00:13:31.990 --> 00:13:33.600
It's really simple to do.

00:13:34.490 --> 00:13:37.900
Next thing you should take into account,
use the Apple supplied artwork.

00:13:37.920 --> 00:13:40.020
You probably don't know this,
but if you look inside of

00:13:40.100 --> 00:13:42.820
System Library Widget Resources,
we provide you with a whole bunch

00:13:42.820 --> 00:13:44.400
of artwork and other little tools.

00:13:44.440 --> 00:13:46.810
So for instance,
you'll notice that a lot of Widgets that

00:13:46.900 --> 00:13:50.400
use the flip transition to flip to their
back uses this info button artwork.

00:13:50.440 --> 00:13:52.370
Well, that's all available for you in
System Library Widget Resources.

00:13:52.400 --> 00:13:56.150
Same thing for standard buttons,
these glass style buttons that we use,

00:13:56.260 --> 00:13:58.200
like for done and things to that effect.

00:13:58.430 --> 00:14:01.450
You should really use those and instead
of copying them into your Widget,

00:14:01.630 --> 00:14:04.360
just link to them directly in
System Library Widget Resources.

00:14:04.400 --> 00:14:07.990
That way if we ever update them,
you'll get them for free.

00:14:08.510 --> 00:14:10.220
And finally, look around.

00:14:10.270 --> 00:14:14.500
There's some great Widgets out there that
are just a good source of inspiration.

00:14:14.600 --> 00:14:15.500
See what they've done.

00:14:15.500 --> 00:14:19.500
Take a look and see if their
ideas can work for you.

00:14:19.500 --> 00:14:23.110
A lot of our Widgets provide a really
good experience for summarizing data,

00:14:23.110 --> 00:14:24.500
like the Weather Widget.

00:14:24.500 --> 00:14:26.710
You know, it shows by default just
the current weather,

00:14:26.710 --> 00:14:29.500
but then you can show more
to look at the forecast.

00:14:29.580 --> 00:14:33.130
It's a really good way of working,
and we recommend you do the same.

00:14:33.700 --> 00:14:36.020
So now that we've talked about design,
we're going to spend just a few

00:14:36.020 --> 00:14:37.580
minutes talking about localization.

00:14:37.660 --> 00:14:41.550
And we bring it up really early,
because it tends to affect how you lay

00:14:41.550 --> 00:14:44.850
out all of the files within your Widget
and how you wind up working with some

00:14:44.950 --> 00:14:46.810
of the resources inside of your Widget.

00:14:46.910 --> 00:14:50.190
So it's important that we bring it up
now so that you can take into account

00:14:50.270 --> 00:14:52.350
when you're building your first Widget.

00:14:52.600 --> 00:14:55.260
So if you look inside a localized Widget,
you'll see a lot of times

00:14:55.340 --> 00:14:56.690
these things called L-proj's.

00:14:56.790 --> 00:14:58.410
These are language project directories.

00:14:58.540 --> 00:15:02.440
And this is a standard system that
OS X uses to localize resources.

00:15:02.480 --> 00:15:05.790
You'll notice that they have usually
two character codes as their names.

00:15:05.850 --> 00:15:11.220
So de.lproj is for German,
en is for English, es is for Spanish,

00:15:11.220 --> 00:15:12.190
and so forth and so forth.

00:15:12.260 --> 00:15:15.680
And if you look at our documentation,
there's tons of information

00:15:15.680 --> 00:15:20.400
about all the different codes
you can use for localization.

00:15:20.590 --> 00:15:23.990
Inside of these folders,
you'll find all the localized

00:15:24.050 --> 00:15:27.920
resources for that widget.

00:15:28.470 --> 00:15:32.060
What that means is inside here,
you can put any images you want

00:15:32.150 --> 00:15:34.450
to use for specific localization,
any style sheets,

00:15:34.450 --> 00:15:37.220
so if you have to take into
account a different design,

00:15:37.240 --> 00:15:39.900
localized strings,
you might want to include them in here,

00:15:39.920 --> 00:15:42.080
and any Info.plist keys
that you want to localize.

00:15:42.080 --> 00:15:43.930
So for instance,
if you'd like to have your Widget have a

00:15:43.930 --> 00:15:46.480
different name and a different language,
you can do that in an

00:15:46.530 --> 00:15:48.490
Info.plist.strings file.

00:15:49.020 --> 00:15:50.640
The nice thing about this system,
by the way,

00:15:50.800 --> 00:15:52.700
is that it's a standard OS X system.

00:15:52.840 --> 00:15:55.450
Whenever you ask for any one of
these resources in your HTML,

00:15:55.450 --> 00:15:58.790
JavaScript, or CSS,
it will automatically try to just go into

00:15:58.800 --> 00:16:03.060
the localized folder that corresponds to
the user's current localization setting.

00:16:03.060 --> 00:16:04.140
You get this for free.

00:16:04.170 --> 00:16:07.260
You don't have to specify every
directory or anything like that.

00:16:07.290 --> 00:16:10.390
So if I were to, in this case,
just ask for localized strings.js

00:16:10.460 --> 00:16:13.370
and I were running in German,
it would just automatically just

00:16:13.370 --> 00:16:15.050
fetch the German version of that.

00:16:15.050 --> 00:16:16.220
I don't have to do anything for it.

00:16:16.220 --> 00:16:16.220
So it's a really handy little system.

00:16:16.630 --> 00:16:20.340
First one of these files I'd like to
talk about is the Info.plist.strings.

00:16:20.400 --> 00:16:21.790
There's only really
one line in this file.

00:16:21.940 --> 00:16:23.700
That's the CFBundle display name.

00:16:23.700 --> 00:16:28.110
And here you would provide a
foreign language equivalent

00:16:28.340 --> 00:16:29.620
for the name of your Widget.

00:16:29.750 --> 00:16:32.780
And this is the string that's used
in the finder when the user sees it.

00:16:32.990 --> 00:16:34.680
It's also used in the Widget bar.

00:16:34.780 --> 00:16:36.720
So for any keys you want to
provide an equivalent for,

00:16:36.720 --> 00:16:37.890
you just do an equal statement.

00:16:38.210 --> 00:16:41.950
So in this case,
we're going to use CFBundle display name.

00:16:41.950 --> 00:16:43.690
We're going to set equal to Hola Mundo
for our Spanish translation.

00:16:44.320 --> 00:16:45.790
Now we're going to get
into localized strings,

00:16:45.790 --> 00:16:47.480
and this is a little bit
more of a convoluted topic.

00:16:47.560 --> 00:16:49.040
So I've got some good graphics here.

00:16:49.100 --> 00:16:50.170
We hope to work through this all.

00:16:50.310 --> 00:16:53.070
So the first bit of this all is
that in your language project,

00:16:53.200 --> 00:16:55.450
for each language,
you should have something to the

00:16:55.450 --> 00:16:57.200
effect of a localizedstrings.js file.

00:16:57.200 --> 00:17:00.200
This contains all of the strings in
your Widget that need to be localized.

00:17:00.200 --> 00:17:02.200
And it looks something like this.

00:17:02.200 --> 00:17:03.440
It has an array in it.

00:17:03.440 --> 00:17:05.190
We call it localized string.

00:17:05.240 --> 00:17:06.200
You can call it whatever you want.

00:17:06.310 --> 00:17:08.790
And in it,
we have each index corresponds to

00:17:08.890 --> 00:17:11.200
a localized version of that string.

00:17:11.200 --> 00:17:14.200
So we provide the index of hello world.

00:17:14.200 --> 00:17:15.200
That's our English equivalent,
which we're programming in.

00:17:15.200 --> 00:17:17.150
But then we provide
the Spanish equivalent,

00:17:17.150 --> 00:17:18.200
hola mundo, there.

00:17:18.200 --> 00:17:20.190
So that way, later on,
when I query for a string,

00:17:20.250 --> 00:17:23.260
I can just ask for what I know
the string to be and automatically

00:17:23.260 --> 00:17:25.180
get the localized version back.

00:17:25.200 --> 00:17:29.190
So the first thing that happens
here--the next thing that happens,

00:17:29.210 --> 00:17:32.200
once you've provided the localized
strings is in your HTML file,

00:17:32.200 --> 00:17:34.120
you just need to include the file itself.

00:17:34.240 --> 00:17:35.160
Don't include a path to it.

00:17:35.270 --> 00:17:37.200
Just ask for localizedstrings.js.

00:17:37.200 --> 00:17:39.130
And you'll automatically
get the localized version.

00:17:39.210 --> 00:17:40.200
And all this stuff is going
to be in the localize string.

00:17:40.200 --> 00:17:41.200
So you can see that the string is
going to be in the localize string.

00:17:41.200 --> 00:17:43.200
And you can also include
your JavaScript file.

00:17:43.200 --> 00:17:46.200
Because in your JavaScript file,
we are going to call a setup function.

00:17:46.200 --> 00:17:48.230
This is called when
your widget first loads,

00:17:48.320 --> 00:17:51.200
and it knows about all of the things that
need to be localized inside your widget.

00:17:51.200 --> 00:17:55.390
And it's going to pull all of
those localized strings in and

00:17:55.390 --> 00:17:57.200
dump them inside of the widget.

00:17:58.400 --> 00:18:01.260
So that setup function looks like this.

00:18:01.430 --> 00:18:03.980
It has getElementById,
and it just knows the elements

00:18:04.010 --> 00:18:05.060
that need to be localized.

00:18:05.090 --> 00:18:07.680
And it's going to call this
getLocalizedString function.

00:18:07.700 --> 00:18:10.710
And that works like this.

00:18:11.440 --> 00:18:14.020
Get localized string,
since we've included the

00:18:14.020 --> 00:18:16.900
localizedstrings.js file
inside of the project,

00:18:16.900 --> 00:18:19.930
will automatically be available
to the JavaScript file.

00:18:20.270 --> 00:18:23.880
And so we're going to just pass
in the Hello World key to that.

00:18:23.880 --> 00:18:28.310
And then it's going to just get supplied
back in and then returned back to the

00:18:28.310 --> 00:18:32.600
function that we called in our setup
function that asks for the string.

00:18:32.600 --> 00:18:36.750
And so in here, when we've asked for get
localized string Hello World,

00:18:36.800 --> 00:18:41.270
it's gone to the JavaScript file,
gotten the localized string out.

00:18:41.570 --> 00:18:43.650
And then it's replaced it
and sent it back to our

00:18:43.660 --> 00:18:45.700
HTML file where it's localized.

00:18:45.700 --> 00:18:46.700
So we've done a lot there.

00:18:46.700 --> 00:18:50.370
We're going to go into demo and we'll
explain that a lot more clearly there.

00:18:50.790 --> 00:18:52.120
And then also,
some of the things you might

00:18:52.120 --> 00:18:53.900
want to consider localizing,
style sheets.

00:18:54.080 --> 00:18:57.040
So if you need to do different string
placement based on different languages,

00:18:57.040 --> 00:18:59.500
colors that mean different
things in different cultures,

00:18:59.510 --> 00:19:02.040
and finally, any images,
if you want to include any flags or

00:19:02.050 --> 00:19:05.670
any other culture-specific images,
you can include them in a

00:19:05.730 --> 00:19:07.800
localization language project.

00:19:07.830 --> 00:19:09.960
So let's go to demo two, please.

00:19:17.020 --> 00:19:19.100
So in this example,
we're going to be following

00:19:19.100 --> 00:19:21.540
the Hello VELT example,
which is inside of the sample

00:19:21.540 --> 00:19:22.860
code that you could have gotten.

00:19:22.910 --> 00:19:26.880
Please feel free to take a look or
follow along on screen at this point.

00:19:28.000 --> 00:19:30.720
So again, I'm going to be using a script
helper here that just provides

00:19:30.740 --> 00:19:32.350
all the code that I need.

00:19:32.490 --> 00:19:36.780
So the first thing which we need to do
here-- and let's actually take a look at

00:19:36.780 --> 00:19:39.530
what the widget looks like beforehand.

00:19:39.580 --> 00:19:41.180
So I'm going to just go here,
and I'm going to call

00:19:41.210 --> 00:19:46.130
this hello-welt.wdgt.

00:19:46.200 --> 00:19:47.780
We're going to add the
file extension to that,

00:19:47.790 --> 00:19:50.060
and we're going to run it.

00:19:50.150 --> 00:19:52.580
So right now, we are running in the
German localization,

00:19:52.610 --> 00:19:55.090
so it is localized.

00:19:56.610 --> 00:20:00.660
So if we take a look in here,
we have a German localization,

00:20:00.680 --> 00:20:02.910
and in it are a couple of files.

00:20:02.960 --> 00:20:06.860
The first thing is the
info.plist-- Info.plist.strings.

00:20:06.920 --> 00:20:09.830
And again, like I said before,
we're just providing an equivalent

00:20:10.040 --> 00:20:13.460
to any of the strings that we want
to localize inside of our Info.plist.

00:20:13.560 --> 00:20:16.270
So in this case, we just want to localize
the CFBundle display name,

00:20:16.360 --> 00:20:17.840
and we want it in
German to be Hallo Welt,

00:20:17.990 --> 00:20:20.560
which is the German equivalent
of Hello World.

00:20:21.920 --> 00:20:28.290
Also in this language project file,
we have a localized strings.js file.

00:20:29.910 --> 00:20:32.930
And in it, we have all of the localized
strings that we're going to be

00:20:32.930 --> 00:20:34.220
using inside of this Widget.

00:20:34.230 --> 00:20:35.700
So it's actually pretty simple.

00:20:35.700 --> 00:20:37.950
We have hello, world.

00:20:38.330 --> 00:20:40.810
That's the index that
we're going to query for.

00:20:40.920 --> 00:20:44.370
And we're setting that equal to hello,
welt, which is our German thing.

00:20:44.470 --> 00:20:47.580
So when we use our
localized string function,

00:20:47.640 --> 00:20:50.370
it's going to know about this array.

00:20:50.370 --> 00:20:54.670
It's going to provide the English,
and it's going to get the

00:20:54.670 --> 00:20:57.120
German version back and provide it
back for the body of the Widget.

00:20:59.210 --> 00:21:05.700
And then we're going to construct really
quickly our JavaScript file for this.

00:21:05.780 --> 00:21:07.340
So the first thing which we're
going to do is we're going

00:21:07.340 --> 00:21:09.280
to provide a setup function.

00:21:09.280 --> 00:21:11.500
And this setup function,
like I said before,

00:21:11.510 --> 00:21:14.490
knows what elements inside the
Widget need to be localized.

00:21:14.710 --> 00:21:19.140
So in this case, the Widget has a part of
text called hello text.

00:21:19.140 --> 00:21:21.490
And we're going to set its inner
text to be the result of this

00:21:21.670 --> 00:21:23.360
getLocalizedString function.

00:21:23.370 --> 00:21:26.340
This getLocalizedString function
is going to-- I'm going to

00:21:26.340 --> 00:21:28.640
show you that right now.

00:21:28.640 --> 00:21:30.860
Oops, wrong bit.

00:21:30.860 --> 00:21:32.500
There we go.

00:21:34.690 --> 00:21:38.880
It's going to try to get inside
the localized strings array and

00:21:38.880 --> 00:21:42.540
take whatever key is provided,
so in this case, hello world,

00:21:42.580 --> 00:21:45.230
and it's going to try to
pull that out of the array.

00:21:45.340 --> 00:21:48.150
And once it has,
it's going to return it back

00:21:48.410 --> 00:21:51.470
into the setup function,
which will then place

00:21:51.480 --> 00:21:54.440
it inside of the widget.

00:21:54.540 --> 00:21:56.670
So let's save this.

00:21:59.460 --> 00:22:02.230
So if I save it on the desktop here,
I'm just going to put it-- actually,

00:22:02.230 --> 00:22:08.720
I need to unmake my widget.

00:22:08.720 --> 00:22:10.270
Here we go.

00:22:16.210 --> 00:22:18.460
Okay, let's save that now.

00:22:18.590 --> 00:22:26.170
And we're going to call
this hello-velt.js.

00:22:26.170 --> 00:22:28.380
And then it saves it right there.

00:22:30.330 --> 00:22:33.740
And the last thing we need to do is,
inside of our HTML file,

00:22:33.740 --> 00:22:36.600
we'll need to include the
two different resources,

00:22:36.600 --> 00:22:38.050
JavaScript resources
that we need to have.

00:22:38.210 --> 00:22:41.130
Our localized strings.js, again,
it'll load in whatever

00:22:41.130 --> 00:22:44.330
the localized version is,
and we need to include the

00:22:44.330 --> 00:22:46.870
actual JavaScript file,
which is going to have all the

00:22:46.870 --> 00:22:49.450
functions we need to actually
get the localized string.

00:22:49.600 --> 00:22:52.100
And then we provide an
onload handler for our body,

00:22:52.100 --> 00:22:54.710
which calls the setup function.

00:22:57.500 --> 00:23:03.320
All right, so we're going to go ahead
and make this a widget again.

00:23:04.840 --> 00:23:07.660
at .wdgt on there.

00:23:07.730 --> 00:23:10.160
So I'm going to run this one
as German and as English,

00:23:10.160 --> 00:23:12.670
just to show you how that all works.

00:23:14.520 --> 00:23:16.530
So if we go to internationalization,
right now we are running

00:23:16.540 --> 00:23:19.290
in German-- or right now,
we're running in English.

00:23:19.320 --> 00:23:20.340
OK.

00:23:21.350 --> 00:23:23.130
We are--

00:23:24.800 --> 00:23:27.410
running in German now,
and it's running in German,

00:23:27.410 --> 00:23:29.880
and it should be running in English.

00:23:30.730 --> 00:23:33.080
When we set that up there-- well,
it doesn't seem to be

00:23:33.080 --> 00:23:34.200
working for me today.

00:23:34.250 --> 00:23:36.240
But if you look at the sample code,
I know that it works.

00:23:36.240 --> 00:23:38.070
I can verify it because
I've tried it many times.

00:23:38.150 --> 00:23:41.700
So we'll go there.

00:23:41.730 --> 00:23:43.560
Back to slides, please.

00:23:45.590 --> 00:23:47.300
So now that we've talked
about localization,

00:23:47.300 --> 00:23:49.770
we're going to spend a good
amount of time the next 20 minutes

00:23:49.850 --> 00:23:53.660
talking about setting up a Widget
back and then saving preferences.

00:23:53.770 --> 00:23:55.960
This is a really big deal,
because pretty much any Widget that

00:23:55.960 --> 00:23:59.740
you download nowadays has a back to it,
and it usually needs to save

00:23:59.740 --> 00:24:02.360
some type of preferences,
just if it's color or language

00:24:02.360 --> 00:24:03.540
or anything to that effect.

00:24:03.690 --> 00:24:06.720
So the first thing you need
to do is inside of your HTML,

00:24:06.720 --> 00:24:09.330
you need to set up two
layers or two sides.

00:24:09.430 --> 00:24:12.020
So in this case,
we recommend that you use just two divs.

00:24:12.180 --> 00:24:15.110
And set one to be the front div,
and you put your Widget's

00:24:15.140 --> 00:24:16.340
front side there.

00:24:16.390 --> 00:24:20.130
And then you use another div,
and you set that to be the Widget's back.

00:24:20.280 --> 00:24:22.450
And you just put whatever--
in between these tags,

00:24:22.450 --> 00:24:25.880
you put whatever images and
strings you need to make that

00:24:26.140 --> 00:24:28.870
Widget to have a front and a back.

00:24:29.090 --> 00:24:33.660
And then in your CSS file,
you're going to need to do two things.

00:24:33.830 --> 00:24:36.690
You need to set the display
style for the front to block.

00:24:36.820 --> 00:24:38.020
So in this case, it means show.

00:24:38.200 --> 00:24:39.890
Block means show in CSS.

00:24:39.990 --> 00:24:43.050
And then for the back,
you need to set the back display to none,

00:24:43.050 --> 00:24:46.360
so tell it to hide, not to show.

00:24:47.070 --> 00:24:49.760
Another thing you need to do on the
front is you need to use the info button.

00:24:49.790 --> 00:24:52.540
Now, unfortunately,
in previous and prereleased

00:24:52.630 --> 00:24:55.500
versions of OS X Tiger,
we included a different graphic,

00:24:55.500 --> 00:24:57.480
and some people are still using that,
and I want to discourage that,

00:24:57.570 --> 00:25:00.050
because we really want people
to use this info button graphic.

00:25:00.210 --> 00:25:02.180
People know when they expect
-- they expect a certain

00:25:02.200 --> 00:25:02.970
behavior when they see it.

00:25:02.990 --> 00:25:05.000
They know that it's going to
take them to a widget backside.

00:25:05.000 --> 00:25:06.850
It's a standard control, if you will.

00:25:06.970 --> 00:25:08.210
There's two parts to this icon.

00:25:08.220 --> 00:25:11.750
There's the eye icon, actually,
and then there's the background circle,

00:25:11.880 --> 00:25:15.780
which fades on -- or which actually
flashes on when you mouse over the eye.

00:25:15.780 --> 00:25:17.450
And there's a bunch of
JavaScript we'll go into to

00:25:17.570 --> 00:25:19.410
handle these rollovers and fades.

00:25:19.730 --> 00:25:23.200
Again, these images are available for you
in system library widget resources.

00:25:23.200 --> 00:25:27.220
We suggest you link to them there,
and that you use black or white versions.

00:25:27.220 --> 00:25:30.160
We provide them both,
whichever works best for your design.

00:25:30.230 --> 00:25:31.680
And again,
we recommend that you place this

00:25:31.820 --> 00:25:34.900
at the bottom right-hand corner
of your widget whenever possible.

00:25:34.900 --> 00:25:38.620
It's just the usual place where
people expect to see this thing.

00:25:38.620 --> 00:25:40.880
It's okay to put it in the
bottom left or the top right,

00:25:40.970 --> 00:25:43.240
but really strive as much as possible
to put it in the bottom right.

00:25:43.240 --> 00:25:45.100
That's where they expect to see it.

00:25:45.100 --> 00:25:47.640
And at this point,
I just want to address the topic

00:25:47.640 --> 00:25:49.370
of control regions really quick.

00:25:49.410 --> 00:25:52.460
Because the info button is a button,
it's a control region.

00:25:52.460 --> 00:25:55.520
You would not expect someone to
mouse over that and be able to grab

00:25:55.520 --> 00:25:57.560
the widget from the info button.

00:25:57.560 --> 00:26:02.270
And so you need to set a region around
it so that Dashboard knows that,

00:26:02.330 --> 00:26:03.740
hey, this is a button.

00:26:03.740 --> 00:26:06.080
I don't want people to be
able to drag from here.

00:26:06.080 --> 00:26:08.010
So that's done as a CSS property.

00:26:08.160 --> 00:26:10.530
It's called Apple Dashboard Region.

00:26:10.530 --> 00:26:16.430
And it takes, as its argument,
one function called Dashboard Region.

00:26:16.590 --> 00:26:18.300
Its first parameter is always control.

00:26:18.300 --> 00:26:19.520
There's no other type.

00:26:19.580 --> 00:26:22.950
But from there, we do either circles or
squares -- or rectangles,

00:26:22.990 --> 00:26:23.560
sorry.

00:26:23.630 --> 00:26:25.540
And then you can optionally
provide offsets from the

00:26:25.540 --> 00:26:26.800
edge of the wrapped element.

00:26:29.520 --> 00:26:32.750
So now that we've done CSS,
in JavaScript,

00:26:32.750 --> 00:26:34.140
you'll need to do a couple of things.

00:26:34.150 --> 00:26:36.680
Once the Info button is clicked upon,
you need to use

00:26:36.680 --> 00:26:39.040
Widget.PrepareForTransition.

00:26:39.070 --> 00:26:41.580
And then you pass it to
the parameter toBack.

00:26:41.600 --> 00:26:44.890
And what this does is it freezes
your Widgets UI so that any

00:26:44.950 --> 00:26:47.530
changes you do from this point
on won't be shown to the user.

00:26:47.640 --> 00:26:49.820
It just freezes it,
and it will stay that way for

00:26:49.820 --> 00:26:51.420
about three to four seconds.

00:26:51.420 --> 00:26:54.840
If you don't do the following steps,
though, crazy stuff will start happening.

00:26:54.890 --> 00:26:56.840
So you need to follow the next steps.

00:26:56.940 --> 00:27:00.110
From there, we usually take the front
div that we set up before,

00:27:00.110 --> 00:27:01.620
and we set its display to none.

00:27:01.660 --> 00:27:03.440
So in other words, don't show it.

00:27:03.470 --> 00:27:07.140
And then we set the back
style display to block.

00:27:07.250 --> 00:27:08.840
That means now bring it forward.

00:27:08.880 --> 00:27:11.960
And then finally,
you call Widget.PerformTransition.

00:27:12.160 --> 00:27:13.980
This is the function which
provides that great little flip

00:27:14.080 --> 00:27:17.700
transition which you've all seen,
which flips a Widget from

00:27:17.700 --> 00:27:19.890
the right to the left.

00:27:20.090 --> 00:27:21.880
And for what it's worth,
the front of the Widget then

00:27:21.880 --> 00:27:24.490
will be that frozen thing,
which we froze with PrepareForTransition.

00:27:24.570 --> 00:27:26.800
The back will be whatever
we've changed the Widget UI to.

00:27:26.820 --> 00:27:28.270
to be.

00:27:28.780 --> 00:27:29.960
So, okay, now you're on the back.

00:27:30.080 --> 00:27:31.360
What do you do here?

00:27:31.440 --> 00:27:33.700
Here is a good place for branding
and copyright information.

00:27:33.700 --> 00:27:36.360
So if you have any URLs you want
to point to for data streams

00:27:36.360 --> 00:27:38.690
or if you want to provide some
information about your own website,

00:27:38.700 --> 00:27:41.060
some help information,
feel free to put that back here.

00:27:41.060 --> 00:27:43.570
If you're going to provide preferences,
we actually do actually

00:27:43.570 --> 00:27:45.000
use Aqua Controls here,
though.

00:27:45.130 --> 00:27:48.470
And the reason for that is that people
don't visit backsides very often,

00:27:48.470 --> 00:27:51.020
and so they need to be able
to know what's going on.

00:27:51.020 --> 00:27:52.780
So Aqua Controls are much
more natural to them,

00:27:52.870 --> 00:27:55.180
and they'll just be able to
use them and be done with them.

00:27:55.290 --> 00:27:56.930
And besides,
the back of the Widget is also

00:27:56.930 --> 00:27:59.860
kind of a more utility feel to it,
and Aqua has that feel going for it.

00:27:59.920 --> 00:28:02.840
And then when you're done,
use a Done button in the bottom

00:28:02.840 --> 00:28:06.200
right-hand corner that shows
the changes have taken effect.

00:28:06.280 --> 00:28:08.380
If someone clicks on this,
that's going to run the transition

00:28:08.380 --> 00:28:09.730
and flip it back over to the front.

00:28:09.740 --> 00:28:11.440
Don't reuse the Info button here.

00:28:11.560 --> 00:28:12.410
Use a Done button.

00:28:12.430 --> 00:28:15.390
It shows that the changes have happened,
and it separates.

00:28:15.460 --> 00:28:18.290
It makes the Info button
a little bit more special.

00:28:18.420 --> 00:28:20.690
And then flipping back to the
front follows a similar set of

00:28:20.800 --> 00:28:22.730
processes as flipping to the back.

00:28:23.080 --> 00:28:26.210
Here we just use prepare for transition,
but instead of passing into back,

00:28:26.300 --> 00:28:27.190
we pass into front.

00:28:27.310 --> 00:28:32.060
We set the back's display style to none,
so it doesn't show.

00:28:32.200 --> 00:28:34.080
And then we set the front's
display style to block,

00:28:34.080 --> 00:28:35.320
so it doesn't do anything.

00:28:35.320 --> 00:28:36.750
And then finally, perform transition.

00:28:36.750 --> 00:28:39.280
This flips the Widget from the
left to the right in the opposite

00:28:39.350 --> 00:28:40.700
direction as our first one.

00:28:40.780 --> 00:28:43.310
So let me show you how this all works.

00:28:50.750 --> 00:28:53.540
So we're going to be following
the Goodbye World example for

00:28:53.540 --> 00:28:55.160
the rest of today's demos.

00:28:55.160 --> 00:28:58.340
If you take a look in the
Goodbye World sample code,

00:28:58.340 --> 00:28:59.540
you'll notice that it's milestone.

00:28:59.540 --> 00:29:01.770
So we're going to go through
milestone one and two right now,

00:29:01.800 --> 00:29:07.320
just starting off,
and then actually adding all

00:29:07.320 --> 00:29:09.840
these different features on there,
adding the flip transition.

00:29:09.890 --> 00:29:14.570
So again, I've got a script for this guy,
so I have my code easy to pull off.

00:29:20.800 --> 00:29:28.160
And we're going to show you the Widget
as it is beforehand really quick.

00:29:28.160 --> 00:29:29.360
So I'm just going to take this guy.

00:29:29.360 --> 00:29:31.610
I'm going to name it Goodbye.

00:29:31.850 --> 00:29:35.020
HelloWorld.wdgt.

00:29:35.340 --> 00:29:36.800
And that's going to make this a Widget.

00:29:36.800 --> 00:29:38.800
I'm going to double-click it
and run it here in Dashboard.

00:29:38.900 --> 00:29:40.430
And you'll see that it
basically doesn't do anything.

00:29:40.440 --> 00:29:43.480
It's just like the Hello World we
first ran about 15 minutes ago.

00:29:43.480 --> 00:29:48.170
So we're going to add
the back to this Widget.

00:29:48.170 --> 00:29:51.960
So let's, in case you didn't know,
you can always Control-click on a

00:29:51.970 --> 00:29:54.420
Widget and click Show Package Contents.

00:29:54.490 --> 00:29:56.950
And this will show you
what's actually inside of it.

00:29:56.950 --> 00:29:59.980
This way you don't always have
to remove the .wdgt extension to

00:29:59.980 --> 00:30:01.610
show the contents of a bundle.

00:30:03.480 --> 00:30:05.730
So the first thing we're
going to do is take a look at

00:30:05.730 --> 00:30:07.350
our HTML file here in Xcode.

00:30:07.370 --> 00:30:09.400
And you'll see it's just like the
Hello World that we made before.

00:30:09.400 --> 00:30:10.390
It just has two things.

00:30:10.390 --> 00:30:13.720
It has an image and the text
Hello World on it and not much else.

00:30:13.740 --> 00:30:16.860
So we're going to, first off,
add the front div tag

00:30:16.920 --> 00:30:18.660
that I spoke about before.

00:30:18.770 --> 00:30:19.740
We set its ID to front.

00:30:19.740 --> 00:30:22.580
And the reason we're using ID here is
because we're going to be later using

00:30:22.630 --> 00:30:25.200
this widget in--this div in JavaScript.

00:30:25.240 --> 00:30:27.540
So if you ever want to access
anything through the DOM,

00:30:27.540 --> 00:30:30.190
you need to use an ID statement
instead of a class statement.

00:30:30.310 --> 00:30:32.770
Class is used for styles.

00:30:33.280 --> 00:30:38.850
And then we also need to
provide a close div tag there,

00:30:38.850 --> 00:30:41.400
just to close off the back
to signal that we're done.

00:30:41.460 --> 00:30:44.360
And then we're going to
be adding the back div.

00:30:44.560 --> 00:30:46.090
And the back div,
all that it's doing is it

00:30:46.100 --> 00:30:47.330
has its own background image.

00:30:47.340 --> 00:30:48.720
It's a little bit darker
than the front one.

00:30:48.890 --> 00:30:50.880
It's a good idea to do
on the back of a Widget.

00:30:50.970 --> 00:30:54.630
And then it just has a done button,
like I said you should be using before.

00:30:54.790 --> 00:30:58.640
So that's basically just setting
it up to have a front and a back.

00:30:58.740 --> 00:31:01.200
And now we're going to be
adding the info button there.

00:31:01.250 --> 00:31:02.920
Again, the info button has two parts.

00:31:03.020 --> 00:31:05.840
So let me prepare this
for that to come in.

00:31:06.070 --> 00:31:10.660
The first thing it has is the actual eye.

00:31:11.070 --> 00:31:13.680
So again, I've applied a class flip.

00:31:13.750 --> 00:31:16.450
And that means that in my JavaScript,
I'm going to have a flip class,

00:31:16.530 --> 00:31:17.640
which positions this.

00:31:17.720 --> 00:31:19.480
And then I have an ID flip.

00:31:19.550 --> 00:31:21.520
That's going to actually
have the URL to the image.

00:31:21.520 --> 00:31:23.200
I'm going to do that
all in my JavaScript.

00:31:23.270 --> 00:31:24.160
That does the eye.

00:31:24.380 --> 00:31:26.580
And then we need to do the
background circle as well.

00:31:26.580 --> 00:31:28.260
So I'm going to drag that text in here.

00:31:28.490 --> 00:31:30.100
And this one also has a class flip.

00:31:30.150 --> 00:31:34.300
So it means it's going to be positioned
in the same place as the eye icon is.

00:31:34.300 --> 00:31:35.840
But its ID is flip-a-rolly.

00:31:35.990 --> 00:31:37.900
So that means that it's going
to have a different ID and a

00:31:37.910 --> 00:31:39.700
different image associated with it.

00:31:39.930 --> 00:31:42.900
So that's our HTML file.

00:31:43.170 --> 00:31:45.830
Let's go into our CSS file.

00:31:47.000 --> 00:31:48.360
Again, it's a pretty basic file.

00:31:48.360 --> 00:31:50.550
It contains some information
about how the text should look,

00:31:50.780 --> 00:31:53.740
setting the body margins to zero,
and then also setting up where

00:31:53.740 --> 00:31:54.880
the background image is placed.

00:31:54.900 --> 00:31:57.900
We're going to add two bits right now.

00:31:57.900 --> 00:31:59.900
We're going to add the
front CSS statement.

00:31:59.910 --> 00:32:03.900
So again, this makes sure that the front,
when the Widget is first load, is shown.

00:32:03.900 --> 00:32:06.820
And then we're going to
add the style for the back.

00:32:06.890 --> 00:32:10.900
And its display has been set to none,
so it hides.

00:32:10.900 --> 00:32:14.900
And I've also slipped in a little bit of
CSS information about the Done button.

00:32:14.900 --> 00:32:19.900
It just positions it so that
it's in the middle of the back.

00:32:21.730 --> 00:32:25.210
And then the final thing which
we're going to throw in here is the

00:32:25.210 --> 00:32:28.640
CSS information for the info button.

00:32:28.740 --> 00:32:31.360
So remember when I said
they both had class flip?

00:32:31.470 --> 00:32:34.200
So that's this particular class,
and a class flip is denoted

00:32:34.200 --> 00:32:35.700
with a period in front of it.

00:32:35.810 --> 00:32:38.170
And we position it absolutely.

00:32:38.420 --> 00:32:40.300
With regards to the
bottom right-hand corner,

00:32:40.300 --> 00:32:42.800
we set its width and height,
and then we provide it

00:32:43.050 --> 00:32:44.200
with a control region.

00:32:44.200 --> 00:32:45.700
Like I mentioned before,
you don't want people to be able

00:32:45.700 --> 00:32:47.500
to drag from on top of a button.

00:32:47.610 --> 00:32:50.700
So we've specified an
Apple Dashboard region here.

00:32:50.860 --> 00:32:54.770
And then now for Flip,
the Flip ID and the FlipRoly ID,

00:32:54.770 --> 00:32:58.180
notice these are marked off
with a hash in front of them.

00:32:58.280 --> 00:33:02.100
We've specified their initial opacity
and what file we're using for them.

00:33:02.220 --> 00:33:05.840
So the info button goes to
System Library Widget Resources,

00:33:05.840 --> 00:33:08.300
and it's pulling out
the white info button.

00:33:08.740 --> 00:33:11.600
And we've also set its
z-index to be 8,000.

00:33:11.680 --> 00:33:14.030
So the reason we do that is we
want it to be way up there on top.

00:33:14.110 --> 00:33:15.860
We don't ever want anything
to cover this over.

00:33:15.920 --> 00:33:17.300
8,000 seems like a large enough number.

00:33:17.350 --> 00:33:20.160
It's pretty arbitrary,
but we chose 8,000.

00:33:20.380 --> 00:33:23.500
And then for the circle
that shows up underneath,

00:33:23.550 --> 00:33:27.040
we've specified in System Library Widgets
to use the white rolly image.

00:33:27.100 --> 00:33:29.490
And we set its z-index to be 7,999.

00:33:29.580 --> 00:33:32.340
That ensures it's just
underneath the eye.

00:33:34.520 --> 00:33:35.560
And that's pretty much
everything we need to do in CSS.

00:33:35.560 --> 00:33:39.010
So now you'll notice that this particular
Widget does not have a JavaScript file,

00:33:39.250 --> 00:33:40.480
because it doesn't do
anything in JavaScript.

00:33:40.510 --> 00:33:43.020
So we're going to add now the
functions that get called when the

00:33:43.030 --> 00:33:44.480
pref should be shown and hidden.

00:33:44.500 --> 00:33:48.470
So in Xcode,
I'm going to create a new file,

00:33:48.470 --> 00:33:51.500
and the first function I'm
going to add here is showback.

00:33:51.500 --> 00:33:54.320
And this follows a pretty simple idea.

00:33:54.500 --> 00:33:58.330
What it does is it tries to obtain from
the DOM the front and the back divs.

00:33:58.490 --> 00:34:01.490
It just assigns them to local variables
for use later on in the function.

00:34:01.500 --> 00:34:05.500
And then we call
Widget.prepareForTransitionToBack.

00:34:05.500 --> 00:34:06.390
Okay?

00:34:06.540 --> 00:34:07.500
This is going to prepare the Widget.

00:34:07.500 --> 00:34:10.500
It's going to freeze its UI and
then flip it over to the back.

00:34:10.500 --> 00:34:12.500
Notice that we wrapped it
inside of an if statement.

00:34:12.500 --> 00:34:15.500
The reason being is if I wanted to
debug this Widget inside of Safari,

00:34:15.500 --> 00:34:18.500
Widget.prepareForTransition
would just choke Safari.

00:34:18.500 --> 00:34:23.050
And so we need to make sure we're running
in Dashboard before we try to call this.

00:34:23.320 --> 00:34:26.800
Then we set the front
style display to none,

00:34:26.800 --> 00:34:29.610
so we're hiding the front,
and then we're showing the back using

00:34:29.610 --> 00:34:32.080
a back style display equals block.

00:34:32.200 --> 00:34:34.170
And then finally,
once we've done everything,

00:34:34.330 --> 00:34:38.480
we set its timeout to--we set the
widget.perform transition to occur,

00:34:38.480 --> 00:34:41.200
and this actually will do
the actual flip transition.

00:34:41.200 --> 00:34:44.120
Now notice that we wrap this
inside of a set timeout.

00:34:44.240 --> 00:34:46.200
That's a little idiosyncrasy of WebKit.

00:34:46.200 --> 00:34:49.530
We're forcing--by doing this,
we're forcing widget.perform transition

00:34:49.530 --> 00:34:51.200
to happen on the next render loop.

00:34:51.200 --> 00:34:53.570
This makes sure that everything
that we've done beforehand in

00:34:53.570 --> 00:34:56.360
this function has happened,
has drawn, and then will perform

00:34:56.360 --> 00:34:57.200
the actual transition.

00:34:57.200 --> 00:35:00.200
So there's no drawing happening
while someone's flipping to the back.

00:35:00.200 --> 00:35:01.200
That can get kind of ugly.

00:35:01.200 --> 00:35:04.260
And then finally,
we're just doing some cleanup here

00:35:04.400 --> 00:35:06.520
with regards to the info button.

00:35:06.940 --> 00:35:09.550
So that's the show function.

00:35:09.700 --> 00:35:11.520
Let me show you the hide function.

00:35:11.560 --> 00:35:13.800
It actually does just about the
same thing as the show function.

00:35:13.870 --> 00:35:16.640
The only difference here
is that we are calling

00:35:16.710 --> 00:35:21.010
prepareForTransition to the front,
and then we set our display for the

00:35:21.140 --> 00:35:23.040
back to none and our front to block.

00:35:23.190 --> 00:35:29.510
So it's pretty much just a flip
of the show press function.

00:35:29.830 --> 00:35:33.520
And then the last thing we need to do
is we need to include a whole bunch of

00:35:33.690 --> 00:35:36.320
fade information for the info button.

00:35:36.360 --> 00:35:38.240
So this is quite a block of code here.

00:35:38.240 --> 00:35:41.040
And I'm not going to go into
it very in depth right now.

00:35:41.050 --> 00:35:43.220
You can get this from the documentation.

00:35:43.270 --> 00:35:46.380
It's included inside of the
Dashboard Programming Guide.

00:35:46.440 --> 00:35:50.000
And what this chunk of code
does is it does two things.

00:35:50.020 --> 00:35:54.640
It fades the info eye icon on when
a person mouses over the widget,

00:35:54.670 --> 00:35:56.210
and fades it out when they mouse out.

00:35:56.300 --> 00:35:59.000
And then when a person
rolls over that eye icon,

00:35:59.110 --> 00:36:02.110
it brings its background circle
up and then gets rid of it when

00:36:02.110 --> 00:36:04.290
a person mouses away from it.

00:36:05.070 --> 00:36:08.620
So the functions that you should be
aware of right here are mouse move.

00:36:08.620 --> 00:36:10.900
This is what's called when
somebody mouses over the Widget.

00:36:11.020 --> 00:36:14.460
Mouse exit.

00:36:14.460 --> 00:36:17.540
This is what's called when
somebody mouses out of the Widget.

00:36:19.170 --> 00:36:22.190
And then down here at the bottom,
we have Enter Flip.

00:36:22.230 --> 00:36:26.180
So this is when somebody
mouses-- rolls over the eye icon.

00:36:26.180 --> 00:36:29.820
And we have Exit Flip when
somebody mouses out of the icon.

00:36:29.870 --> 00:36:31.320
So we're going to save this file.

00:36:31.320 --> 00:36:33.700
And again, we're going to save it
inside of our widget,

00:36:33.700 --> 00:36:36.120
which I need to unbundle at the moment.

00:36:36.220 --> 00:36:44.710
So now we'll save it.

00:36:56.430 --> 00:36:59.840
So inside of our Widget,
we now have this goodbyeworld.js.

00:36:59.840 --> 00:37:01.950
But there's a problem,
and that is that we haven't told

00:37:01.970 --> 00:37:03.170
our HTML file to include it.

00:37:03.260 --> 00:37:05.930
So let's open there and add all those
event handlers that I talked about

00:37:05.930 --> 00:37:07.390
for fading and things to that effect.

00:37:07.490 --> 00:37:09.960
We go back into our HTML file.

00:37:10.590 --> 00:37:11.550
First thing we're going to
do is we're going to do our

00:37:11.550 --> 00:37:13.680
JavaScript include right up here.

00:37:13.720 --> 00:37:15.440
And again,
we're just including goodbye-world.js,

00:37:15.440 --> 00:37:20.090
so that way our Widget can run all
the JavaScript functions we added.

00:37:20.670 --> 00:37:24.480
From there, in our Info button,
I'm going to include the Show Prefs.

00:37:24.650 --> 00:37:28.800
So when our Info button is clicked,
this way the prefs will be shown.

00:37:28.920 --> 00:37:32.400
For our Done button on the back,
I'm going to include

00:37:33.710 --> 00:37:35.920
is an on-click handler for hide prefs.

00:37:35.920 --> 00:37:38.370
What that does is that calls
the hide prefs function that

00:37:38.370 --> 00:37:40.340
we just wrote a minute ago.

00:37:40.360 --> 00:37:42.100
And then two more things we have to add.

00:37:42.100 --> 00:37:45.390
We have to add the handlers for when we
mouse over the Widget and the i button.

00:37:45.600 --> 00:37:50.610
So mousing over the Widget,
we're going to do on the front div,

00:37:50.610 --> 00:37:56.350
we're going to provide onMouseMove and
onMouseOut handlers and provide them to

00:37:56.350 --> 00:37:56.350
the mouseMove and mouseExit functions
that I described to you a minute ago.

00:37:56.920 --> 00:38:01.780
And then on the info button itself,
we're going to have also onMouseMove

00:38:01.820 --> 00:38:04.300
and onMouseOver handlers.

00:38:04.330 --> 00:38:07.890
And these are called when somebody mouses
over the info button itself and brings

00:38:07.900 --> 00:38:10.200
up the background circle underneath it.

00:38:10.260 --> 00:38:14.500
So we're going to save this,
and believe it or not,

00:38:14.540 --> 00:38:16.110
we now are going to have
a backside on the Widget.

00:38:16.390 --> 00:38:18.200
It's a lot of work, but it's worth it.

00:38:18.210 --> 00:38:21.330
So we're going to throw this guy,
and we're going to add in a .wdgt.

00:38:21.500 --> 00:38:23.990
Whoops, forgot the period there.

00:38:47.900 --> 00:38:47.900
Go ahead and add that.

00:38:47.900 --> 00:38:47.900
And when I run this in Dashboard,
you'll notice when I mouse over,

00:38:47.900 --> 00:38:47.900
the info button now fades
on nice and gracefully.

00:38:47.900 --> 00:38:47.900
And then when I mouse over it,
the circle pops underneath it.

00:38:47.900 --> 00:38:47.900
When I click on it,
we get the flip to the back.

00:38:47.900 --> 00:38:47.900
Here I click on the done,
it flips back forward, and we're set.

00:38:50.940 --> 00:38:53.100
So can I go back to slides, please?

00:38:53.140 --> 00:38:58.160
So now we've shown you
how to do the flip,

00:38:58.160 --> 00:38:59.260
but it's kind of useless.

00:38:59.260 --> 00:39:00.230
It's a toy right now.

00:39:00.440 --> 00:39:02.740
So this really works best when
you're dealing with preferences.

00:39:02.950 --> 00:39:07.080
You need to provide a menu or text fields
or any way of providing preferences.

00:39:07.080 --> 00:39:09.420
And then you'll need to save them, too.

00:39:09.440 --> 00:39:13.780
So Dashboard has available to it all
of the preference system of Mac OS X.

00:39:13.820 --> 00:39:14.800
It's the same system.

00:39:14.800 --> 00:39:16.700
We've provided
JavaScript wrappers for that.

00:39:16.810 --> 00:39:18.770
So to save a preference,
we provide you the set

00:39:18.890 --> 00:39:20.310
preference for key method.

00:39:20.470 --> 00:39:24.370
And that just takes two arguments,
a preference and then a key

00:39:24.370 --> 00:39:26.100
that you want to save it under.

00:39:26.250 --> 00:39:29.580
And you should definitely save this
preference the moment that it's set.

00:39:29.590 --> 00:39:31.960
And the reason for that is
that widgets tend to be,

00:39:31.960 --> 00:39:33.400
unfortunately, a little bit transitory.

00:39:33.450 --> 00:39:34.780
Someone can log out at any time.

00:39:34.780 --> 00:39:36.310
They could log out while
your widget was on its back.

00:39:36.320 --> 00:39:39.740
And so you probably want to save
the preference that they just made.

00:39:39.790 --> 00:39:42.250
And it's also good to think about
preferences even if you don't

00:39:42.270 --> 00:39:45.390
think you need to use preferences
because of the fact that sometimes

00:39:45.460 --> 00:39:48.740
installers will quit the dock
to try to put their icon into it.

00:39:48.910 --> 00:39:50.460
And all of a sudden,
your widget will lose

00:39:50.460 --> 00:39:51.620
whatever it was doing.

00:39:51.650 --> 00:39:55.040
And so it's a good idea to save
any information that you'd like

00:39:55.110 --> 00:39:58.060
to persist across restarts,
across logins and logouts,

00:39:58.100 --> 00:39:59.620
and things like that.

00:39:59.640 --> 00:40:02.120
And beyond that,
you also want to retrieve preferences.

00:40:02.130 --> 00:40:04.850
And a good place to do this
is on your onload handler.

00:40:04.980 --> 00:40:07.860
So when your widget first loads,
it can try to access whatever

00:40:07.930 --> 00:40:11.010
preferences are available and then
try to adjust the widget accordingly.

00:40:11.060 --> 00:40:14.310
And to do that,
we provide the preference for key method.

00:40:14.400 --> 00:40:17.360
And that just takes in whatever key
that you know about that you've saved.

00:40:17.380 --> 00:40:19.580
And we'll try to retrieve that key.

00:40:19.580 --> 00:40:23.680
Now, if no preference exists,
you'll just be getting null back.

00:40:23.680 --> 00:40:24.680
So that's something to know, too.

00:40:24.680 --> 00:40:27.410
So let's go in the demo and
show you how to do that.

00:40:33.790 --> 00:40:38.430
So we're just going to keep building
on the Widget that we just used.

00:40:38.600 --> 00:40:41.570
I'm going to unbundle it first this time.

00:40:42.520 --> 00:40:44.420
makes life a little bit easier.

00:40:44.420 --> 00:40:47.860
So the first thing we're going to do is,
in our HTML file,

00:40:47.880 --> 00:40:50.880
we're just going to add a menu.

00:40:51.100 --> 00:40:53.640
We're going to open it in Xcode,
and then we're going

00:40:53.640 --> 00:40:55.320
to add a menu in there.

00:40:55.320 --> 00:40:57.000
And the reason is because if
we're going to save preferences,

00:40:57.000 --> 00:40:58.990
we might as well give the
user something worth saving.

00:40:59.000 --> 00:41:00.850
And so that menu,
we're going to put it on

00:41:00.850 --> 00:41:04.350
the back of the Widget,
and we are going to place

00:41:04.350 --> 00:41:07.940
it right here in between the
background image and the done.

00:41:08.090 --> 00:41:10.600
And it has just two options in it,
hello world and goodbye world,

00:41:10.600 --> 00:41:12.950
so a person can choose
whichever string they prefer.

00:41:13.210 --> 00:41:15.990
And notice that we gave
it an ID of world pop-up.

00:41:15.990 --> 00:41:18.570
We're going to need that in
our JavaScript to access this

00:41:18.570 --> 00:41:20.000
particular menu settings.

00:41:20.000 --> 00:41:21.520
settings.

00:41:21.700 --> 00:41:24.260
So that's all we have to do
here in our HTML right now.

00:41:24.290 --> 00:41:27.100
And our CSS file, really quick.

00:41:28.850 --> 00:41:30.000
Open that up in Xcode.

00:41:30.080 --> 00:41:32.340
We need to provide a style for the menu.

00:41:32.400 --> 00:41:34.530
Again, nothing too crazy,
just some absolute positioning

00:41:34.620 --> 00:41:37.850
so that it is center-aligned
in the middle of the back.

00:41:40.510 --> 00:41:41.500
Whoops.

00:41:41.500 --> 00:41:42.160
There we go.

00:41:42.220 --> 00:41:43.340
Save that.

00:41:43.410 --> 00:41:46.090
And then, in JavaScript,

00:41:46.740 --> 00:41:49.380
We're going to need
to provide two things.

00:41:49.400 --> 00:41:52.120
We're going to need to provide a
facility for when the menu is changed,

00:41:52.170 --> 00:41:54.850
so that way when the menu changes,
we can say, OK,

00:41:54.940 --> 00:41:56.980
we need to update the text
on the front of the Widget,

00:41:56.980 --> 00:41:58.840
and then also save that off on the disk.

00:41:58.930 --> 00:42:00.850
So I have a function
written up that does that,

00:42:00.850 --> 00:42:04.360
and it's just called menuChanged.

00:42:05.760 --> 00:42:09.270
And what it takes in is,
it takes in the element,

00:42:09.300 --> 00:42:11.740
so that's the select itself.

00:42:11.800 --> 00:42:14.150
And based on that element,
its selected index,

00:42:14.250 --> 00:42:16.600
if the first thing is chosen,
it's going to change the text of the

00:42:16.630 --> 00:42:19.800
Widget to be "Hello World." And then
if we're running within a Widget,

00:42:19.840 --> 00:42:21.570
it's going to save that preference out.

00:42:21.780 --> 00:42:25.200
So we save preference for key,
and we pass it the string "Hello World."

00:42:25.200 --> 00:42:28.540
That's the preference that we're saving.

00:42:28.540 --> 00:42:32.150
And we're going to give
it some arbitrary key.

00:42:32.150 --> 00:42:32.190
In this case, I've chosen "World String."

00:42:32.380 --> 00:42:34.300
And we do the same thing if
someone chooses Goodbye World on

00:42:34.300 --> 00:42:35.300
the back of the Widget.

00:42:35.390 --> 00:42:36.670
We're just going to say
the string Goodbye World,

00:42:36.750 --> 00:42:39.780
and again,
we use the key World String for that.

00:42:40.190 --> 00:42:41.400
So that's saving a preference.

00:42:41.520 --> 00:42:43.530
What if you want to
retrieve a preference?

00:42:43.610 --> 00:42:48.440
So I'm going to add an onload
handler called setup that's called

00:42:48.450 --> 00:42:50.500
when the Widget is first loaded.

00:42:50.660 --> 00:42:52.700
And it checks to make sure we're
running inside of a Widget,

00:42:52.780 --> 00:42:55.770
and if we are,
it's going to try to get that

00:42:55.770 --> 00:42:57.800
preference from the system.

00:42:57.870 --> 00:42:59.840
Widget.preferenceForKey,
and we pass it the key

00:42:59.840 --> 00:43:01.180
that we know about,
world string,

00:43:01.460 --> 00:43:05.820
and it's going to then provide whatever
preference is stored for my Widget back.

00:43:05.990 --> 00:43:07.140
We check to see if it's null.

00:43:07.140 --> 00:43:09.590
If it's set to null,
that means that there was no preference,

00:43:09.590 --> 00:43:11.670
and we can just skip over this,
run it as if it was

00:43:11.680 --> 00:43:12.900
run for the first time.

00:43:12.900 --> 00:43:16.170
But if it happens to have a preference,
we're going to obtain the

00:43:16.170 --> 00:43:19.270
inner text from the DOM and
set it to the saved preference,

00:43:19.400 --> 00:43:22.290
and then we do also some cleanup work
with regards to the select on the back.

00:43:22.400 --> 00:43:24.400
If someone has Goodbye World as
their preference,

00:43:24.400 --> 00:43:26.400
they would expect that the menu
on the back reflected that,

00:43:26.400 --> 00:43:30.210
so we just do some selected
index trickery here.

00:43:30.530 --> 00:43:31.900
So that's our JavaScript.

00:43:31.920 --> 00:43:35.620
All we have to do now is we
go back into our HTML file,

00:43:35.620 --> 00:43:37.820
and then we add two handlers.

00:43:37.930 --> 00:43:40.750
First, for when the menu changes,
we need to actually say, OK,

00:43:40.750 --> 00:43:43.210
if the menu changes,
call that change world

00:43:43.210 --> 00:43:45.360
function that we just wrote.

00:43:45.380 --> 00:43:48.700
And then on the body,
we need to include a setup handler.

00:43:48.860 --> 00:43:50.510
That's called when the
widget is first loaded.

00:43:50.570 --> 00:43:53.480
So we use the onLoad handler,
set it equal to the setup function.

00:43:53.490 --> 00:43:55.030
And that means when the
widget is first loaded,

00:43:55.100 --> 00:44:00.210
it's going to call this and try
to do the preference retrieval.

00:44:00.310 --> 00:44:03.070
So let's run this and see how it works.

00:44:05.490 --> 00:44:08.840
So we're going to add the .WDGT.

00:44:08.850 --> 00:44:10.840
That's a W, OK?

00:44:10.840 --> 00:44:12.750
And we'll add that.

00:44:14.160 --> 00:44:16.940
So, I'm going to flip it to the back.

00:44:16.940 --> 00:44:18.590
We now have this menu
that says Goodbye World.

00:44:18.640 --> 00:44:19.990
I'm going to choose that.

00:44:19.990 --> 00:44:22.240
When we flip it over,
it says Goodbye World.

00:44:22.260 --> 00:44:26.090
And you'll notice that if I close
this and open it up again,

00:44:26.180 --> 00:44:31.480
it remembered that
Goodbye World is my preference.

00:44:31.480 --> 00:44:34.190
So, if we could go back to slides,
please.

00:44:37.180 --> 00:44:39.450
So now that we've saved preferences,
I should probably tell you

00:44:39.450 --> 00:44:42.900
about one of the bigger caveats
about using preferences.

00:44:43.000 --> 00:44:44.790
By default,
whenever you save a preference,

00:44:44.900 --> 00:44:46.890
it'll be available to any Widget.

00:44:47.010 --> 00:44:50.000
So in a sense, it's a global preference
that any Widget can access.

00:44:50.110 --> 00:44:52.400
And sometimes that's just
not the right thing to do.

00:44:52.530 --> 00:44:54.570
You need to be aware of
the fact that sometimes,

00:44:54.620 --> 00:44:56.360
like the Weather Widget,
you want to have multiple

00:44:56.480 --> 00:44:58.810
instances of a Widget open,
and each one remembers

00:44:58.810 --> 00:45:00.170
its own preferences.

00:45:00.300 --> 00:45:04.000
To that end, we provide you with the
Widget.Identifier property.

00:45:04.100 --> 00:45:07.210
So what this is, it's a unique identifier
per class of Widget.

00:45:07.340 --> 00:45:13.320
So every World Clock Widget will have
a unique identifier of its own type,

00:45:13.320 --> 00:45:15.480
versus all the other World Clock Widgets.

00:45:15.640 --> 00:45:18.400
We recommend that you integrate
it into your save key,

00:45:18.400 --> 00:45:20.740
the portion where you
save and retrieve a key.

00:45:20.840 --> 00:45:23.000
So we use a function like this
a lot of times called makeKey,

00:45:23.000 --> 00:45:25.320
which just appends the identifier
to the key you're saving.

00:45:25.460 --> 00:45:28.300
And when it saves it then
out to the Info.plist file,

00:45:28.300 --> 00:45:31.600
it's going to actually save it
with the identifier and the key.

00:45:31.600 --> 00:45:33.190
So that way,
when you save and retrieve it,

00:45:33.230 --> 00:45:33.900
that preference will be available to you.

00:45:33.940 --> 00:45:36.050
And that preference will be unique
for that instance of Widget.

00:45:36.220 --> 00:45:38.700
So again, we call preferenceForKey.

00:45:38.740 --> 00:45:39.940
And then we use makeKey.

00:45:40.140 --> 00:45:43.500
It makes this key and spits it back in,
as if we were just calling

00:45:43.500 --> 00:45:50.480
Widget.Identifier plus key as the
second parameter in setPreferenceForKey.

00:45:50.560 --> 00:45:51.580
So let's show you how this works.

00:45:51.670 --> 00:45:52.590
Demo two, please.

00:46:03.220 --> 00:46:06.200
Okay.

00:46:06.200 --> 00:46:08.600
So for this modification,
everything happens in JavaScript.

00:46:08.700 --> 00:46:12.070
And we're actually just going to provide
this new make key method function,

00:46:12.140 --> 00:46:14.150
and then we're going to just change
all of our calls to preference for

00:46:14.200 --> 00:46:15.620
key and set preference for key.

00:46:15.620 --> 00:46:19.450
So if we open our Widget up again here...

00:46:23.100 --> 00:46:28.210
We're going to open up
our JavaScript file again.

00:46:28.410 --> 00:46:32.340
And the first thing that we're going to
add is just this unique function here,

00:46:32.340 --> 00:46:34.180
which is called make key.

00:46:34.210 --> 00:46:36.540
And again,
all it does is it makes a unique key

00:46:36.590 --> 00:46:38.850
based on the identifier of your Widget.

00:46:40.470 --> 00:46:42.640
And then I'm going to look
for set preference for key.

00:46:42.640 --> 00:46:45.440
And right now, like I said before,
it's just doing it globally.

00:46:45.470 --> 00:46:50.890
We're going to provide a new version,
which uses the make key function

00:46:50.930 --> 00:46:52.670
that I talked about before.

00:46:54.430 --> 00:46:59.400
And that's going to use make key instead
of just actually providing the string.

00:46:59.400 --> 00:47:00.400
Get rid of the old one.

00:47:00.430 --> 00:47:04.090
And we'll do the same thing
for if goodbye is saved.

00:47:07.900 --> 00:47:09.420
I don't have Steve Mangling
going on here,

00:47:09.450 --> 00:47:13.020
but we'll just get rid of this.

00:47:13.050 --> 00:47:17.480
And then the final little bit of this
is that when we set up the function,

00:47:17.540 --> 00:47:21.170
we also needed to retrieve the
unique Widgets for this instance.

00:47:21.370 --> 00:47:24.980
So in the setup function,
when we do our preference

00:47:24.980 --> 00:47:29.140
for key up here,
we need to provide a different version,

00:47:29.140 --> 00:47:33.430
which does preference for key
using our make key function.

00:47:33.690 --> 00:47:36.310
So just going to save this
and make this a Widget again.

00:47:42.110 --> 00:47:43.990
So I've got one Widget here,
and I'm going to set

00:47:43.990 --> 00:47:47.610
it to be Goodbye World.

00:47:47.670 --> 00:47:49.600
And then I'm going to open
another instance up here and

00:47:49.600 --> 00:47:51.000
have it to be Hello World.

00:47:51.100 --> 00:47:53.900
And then I'm going to just pretend
that somebody logged in and logged out.

00:47:53.900 --> 00:47:59.320
I'm really just going to kill the doc,
which is what's hosting the Dashboard,

00:47:59.320 --> 00:48:00.930
using Kill All Doc.

00:48:02.550 --> 00:48:05.640
This will simulate a login and logout.

00:48:05.640 --> 00:48:07.500
Then, I'm going to show Dashboard.

00:48:07.550 --> 00:48:11.260
Sure enough, each remembered what
string they had on them.

00:48:16.600 --> 00:48:21.560
Okay, back to slides, please.

00:48:21.560 --> 00:48:23.120
So now that we've talked about
pretty much all the different

00:48:23.150 --> 00:48:25.740
caveats of working with preferences,
you should also be aware of some

00:48:25.750 --> 00:48:28.600
event handlers which can provide
extra value to your Widget.

00:48:28.600 --> 00:48:32.600
The first, and one thing I should
note about all of these,

00:48:32.600 --> 00:48:35.600
is that you should always wrap them
inside of an if window.widget statement.

00:48:35.600 --> 00:48:39.130
You provide this in your JavaScript file,
and the idea is to make sure

00:48:39.210 --> 00:48:41.600
that these are only used when
you're running within Dashboard.

00:48:41.600 --> 00:48:44.540
Unfortunately,
Safari doesn't support the Widget object,

00:48:44.540 --> 00:48:46.600
so most of these will not work in Safari.

00:48:46.690 --> 00:48:48.600
So it's just a nice little
bit of advice for you.

00:48:48.600 --> 00:48:52.600
The first thing we're going to talk
about is the Widget activation events.

00:48:52.600 --> 00:48:53.590
These are Widget onShow and onHide.

00:48:53.600 --> 00:48:56.810
These are handlers for those events,
and you provide your functions that

00:48:56.920 --> 00:48:58.600
would be called when these events happen.

00:48:58.600 --> 00:49:00.600
So what's onShow?

00:49:00.600 --> 00:49:04.600
onShow is called when your Widget,
when Dashboard as a whole is first shown.

00:49:04.600 --> 00:49:08.600
And the idea behind this is that you
might want to turn on some timers,

00:49:08.600 --> 00:49:10.600
start drawing,
do processor-intensive tasks.

00:49:10.600 --> 00:49:10.600
What's onShow?

00:49:10.600 --> 00:49:10.600
onShow is called when your Widget,
when Dashboard as a whole is first shown.

00:49:10.600 --> 00:49:10.600
And the idea behind this is that you
might want to turn on some timers,

00:49:10.600 --> 00:49:10.600
start drawing,
do processor-intensive tasks.

00:49:10.620 --> 00:49:10.670
What's onShow?

00:49:10.670 --> 00:49:10.960
onShow is called when your Widget,
when Dashboard as a whole is first shown.

00:49:10.960 --> 00:49:11.220
And the idea behind this is that you
might want to turn on some timers,

00:49:11.220 --> 00:49:11.600
start drawing,
do processor-intensive tasks.

00:49:11.600 --> 00:49:12.590
While your Widget's showing.

00:49:12.590 --> 00:49:13.780
Or update stuff from the Internet.

00:49:13.780 --> 00:49:14.600
Anything like that.

00:49:14.600 --> 00:49:18.550
And then conversely, when a Widget,
when Dashboard is hidden,

00:49:18.550 --> 00:49:21.990
you want to be available,
you want to know about onHide,

00:49:21.990 --> 00:49:26.170
because when the Dashboard's not shown,
you don't want to be using up

00:49:26.170 --> 00:49:28.540
CPU or resources unnecessarily.

00:49:28.810 --> 00:49:33.930
And so you set a function
to be equal to the onHide,

00:49:34.080 --> 00:49:36.590
an onHide property.

00:49:36.880 --> 00:49:39.500
In addition to that,
we also provide the Widget Focus events,

00:49:39.750 --> 00:49:41.920
Window on Focus and Window on Blur.

00:49:42.100 --> 00:49:45.100
And these are useful for knowing
when your Widget has key focus.

00:49:45.100 --> 00:49:47.070
A good example of this
is our Calculator Widget.

00:49:47.300 --> 00:49:50.100
The Calculator's screen lights
up when you click on it,

00:49:50.100 --> 00:49:52.560
and that kind of shows that, okay,
whatever you type at this point is

00:49:52.560 --> 00:49:55.290
going to get sent to the Calculator,
and then its screen,

00:49:55.380 --> 00:50:00.990
it goes gray whenever it loses the
focus of the screen-- of the key.

00:50:01.180 --> 00:50:02.960
And then finally,
there's Widget on Remove.

00:50:03.040 --> 00:50:05.940
And at this point,
I have to confess a deep, dirty secret.

00:50:06.020 --> 00:50:08.540
Our Widget at this point,
our Goodbye World Widget,

00:50:08.540 --> 00:50:10.210
has been polluting our hard disk.

00:50:10.270 --> 00:50:12.470
It's been saving a whole bunch
of prefs without cleaning up

00:50:12.470 --> 00:50:13.840
after itself after I close them.

00:50:13.960 --> 00:50:17.880
So the Widget on Remove handler is
good for clearing out preferences

00:50:17.880 --> 00:50:22.160
that you've saved that you need to
get rid of after you're dismissed.

00:50:22.160 --> 00:50:24.920
So to wipe out a preference,
you set preference for key.

00:50:24.920 --> 00:50:27.610
And for the value you're saving,
you just pass it null.

00:50:27.610 --> 00:50:31.100
And Dashboard will know that means, OK,
get rid of the preference.

00:50:31.780 --> 00:50:33.850
And two other things you should be
aware of are some Widget methods.

00:50:33.940 --> 00:50:37.010
We provide two methods,
Widget.OpenApplication.

00:50:37.010 --> 00:50:39.670
And what this does is you
provide a bundle ID here,

00:50:39.670 --> 00:50:43.120
and any bundle ID that you provide here,
it will try to open that application

00:50:43.190 --> 00:50:44.360
if it's available on the system.

00:50:44.360 --> 00:50:46.140
And when it does,
it gets rid of the Dashboard

00:50:46.140 --> 00:50:47.660
and brings up that application.

00:50:47.660 --> 00:50:50.400
So calling
OpenApplication.com.apple.iTunes

00:50:50.400 --> 00:50:52.860
will bring up iTunes
and dismiss the Dashboard.

00:50:52.860 --> 00:50:55.750
And if you need to open a web page,
for instance, on the back,

00:50:55.830 --> 00:50:58.770
if you have any branding information
and you want to point people to

00:50:58.770 --> 00:51:01.730
wherever your feed came from,
use Widget.OpenURL,

00:51:01.730 --> 00:51:02.850
and you provide the URL here.

00:51:02.910 --> 00:51:05.480
You can just provide it as a string
or build it however you see fit.

00:51:05.620 --> 00:51:07.720
And again,
this will open that web page in

00:51:07.720 --> 00:51:10.020
whatever the user's default browser is.

00:51:10.020 --> 00:51:13.100
So let's demo this really quick for you.

00:51:19.540 --> 00:51:23.520
So we are going to remove the dot
widget extension from Goodbye World here

00:51:23.520 --> 00:51:26.340
again so that we can work with it.

00:51:32.930 --> 00:51:35.730
And what we're going to do is
we're going to add a couple of

00:51:35.820 --> 00:51:37.340
handlers to our Goodbye World.

00:51:37.340 --> 00:51:41.680
We're going to have its text change
color whenever it gains and loses focus.

00:51:41.760 --> 00:51:43.450
And we're also going to take
care of removing preferences,

00:51:43.600 --> 00:51:45.820
cleaning up after ourselves.

00:51:46.540 --> 00:51:48.300
So this all happens again
in our JavaScript file,

00:51:48.360 --> 00:51:50.340
so I'm going to open
that up here in Xcode.

00:51:50.360 --> 00:51:52.460
So the first thing I'm going to
do is register for some events.

00:51:52.480 --> 00:51:55.040
And again, I've wrapped these inside
of an if window.widget.

00:51:55.040 --> 00:51:57.780
That just makes sure that
we're running within Dashboard,

00:51:57.780 --> 00:52:00.780
that we're not running
in a browser like Safari.

00:52:00.880 --> 00:52:02.360
And we're registering for three events.

00:52:02.370 --> 00:52:03.660
First off, widget on remove.

00:52:03.780 --> 00:52:05.980
This is called when the Widget
is removed from the Dashboard.

00:52:06.060 --> 00:52:08.900
And we're going to provide a
function called remove to do that.

00:52:08.900 --> 00:52:11.070
We're going to handle window on focus.

00:52:11.230 --> 00:52:13.340
So this is when the
Widget gets key focus.

00:52:13.340 --> 00:52:14.400
We're going to do
something different there,

00:52:14.400 --> 00:52:17.160
and we're going to provide
the focused function for that.

00:52:17.220 --> 00:52:19.720
And then similarly,
we're going to use window on blur,

00:52:19.790 --> 00:52:21.370
which we'll call a function called blur.

00:52:21.690 --> 00:52:26.490
And blur will-- blurred,
sorry-- will change the Widget text color

00:52:26.530 --> 00:52:29.900
to a different color just to show that
the Widget doesn't have focus anymore.

00:52:29.930 --> 00:52:32.660
The first one of these is removed.

00:52:32.680 --> 00:52:35.300
And like I said before,
it calls set preference for key,

00:52:35.340 --> 00:52:36.710
sets the preference to be null.

00:52:36.880 --> 00:52:38.560
And it's already using
our make key function,

00:52:38.600 --> 00:52:41.660
so it'll only do this per instance,
not globally.

00:52:45.000 --> 00:52:48.360
Our focused function sets the
world text color to white,

00:52:48.360 --> 00:52:52.160
so that means when the Widget has focus,
it's going to be white.

00:52:52.210 --> 00:52:56.720
And we have it that when
the Widget loses focus,

00:52:56.720 --> 00:53:00.000
when it's blurred,
it changes the text color to gray.

00:53:00.050 --> 00:53:00.440
And that's it.

00:53:02.170 --> 00:53:06.160
So, first I'm going to show you the
focus changes and I'm going to

00:53:06.200 --> 00:53:08.710
show you the effect on preferences.

00:53:11.960 --> 00:53:13.200
So I have my Widget here.

00:53:13.200 --> 00:53:14.400
I'm just going to bring
out another Widget.

00:53:14.400 --> 00:53:16.780
I'm going to bring out
the Calculator one.

00:53:16.780 --> 00:53:18.720
And you'll notice that the
moment the Calculator lights up,

00:53:18.880 --> 00:53:20.300
my Widget goes gray.

00:53:20.300 --> 00:53:24.180
That's because I've signed up for
the onFocus and onBlur events.

00:53:24.180 --> 00:53:27.570
So we can just kind of do dueling
Widgets here back and forth.

00:53:29.320 --> 00:53:33.230
So that's not that special,
but let me go into the user's

00:53:33.320 --> 00:53:35.910
library preferences folder.

00:53:37.630 --> 00:53:40.100
And I'm going to show you that,
sure enough,

00:53:40.120 --> 00:53:43.900
I've polluted my preferences folder here,
and I have this plist here,

00:53:43.900 --> 00:53:47.010
even though I haven't saved a preference
for my current instance of Widget.

00:53:47.150 --> 00:53:49.270
So I'm going to delete this.

00:53:50.180 --> 00:53:54.730
I'm going to bring up the Widget,
flip it over to the back,

00:53:54.740 --> 00:53:56.000
and change its preference.

00:53:56.070 --> 00:53:58.090
And the moment that happened,
you'll notice right here in the

00:53:58.350 --> 00:54:01.000
background that all of a sudden
there's now a plist for my Widget.

00:54:01.140 --> 00:54:03.000
And that's where the
preference has been saved.

00:54:03.090 --> 00:54:04.970
So I click on Done, and sure enough,
it's there.

00:54:05.010 --> 00:54:08.000
But if I close this Widget,
the moment I close it,

00:54:08.000 --> 00:54:09.000
you'll notice that that
preference disappeared.

00:54:09.000 --> 00:54:11.000
This is just good housekeeping.

00:54:11.020 --> 00:54:13.000
You don't want to pollute
people's hard drive.

00:54:13.000 --> 00:54:14.990
Make sure you clean up your preferences.

00:54:19.090 --> 00:54:24.000
Okay, can I go back to slides, please?

00:54:24.070 --> 00:54:25.500
So now that you've made
this phenomenal Widget,

00:54:25.500 --> 00:54:27.500
and you have the foundations
for making a great Widget,

00:54:27.560 --> 00:54:29.000
how are you going to get it out there?

00:54:29.120 --> 00:54:32.490
Well, we recommend that you archive it
using the finder's archive command.

00:54:32.500 --> 00:54:35.010
From there, you put it on your server,
and then you submit it

00:54:35.010 --> 00:54:39.000
to our download site at
apple.com/downloads/macos10dashboard.

00:54:39.070 --> 00:54:41.000
We have over 400 Widgets
up there made by you guys,

00:54:41.000 --> 00:54:42.500
so thanks very much.

00:54:42.500 --> 00:54:44.490
You guys have already been a
pretty active little community,

00:54:44.500 --> 00:54:47.610
and we're looking forward to
seeing that grow and become just

00:54:47.620 --> 00:54:48.910
a bigger and bigger community.

00:54:49.000 --> 00:54:51.000
In fact,
I'd like to switch demo right now

00:54:51.000 --> 00:54:54.190
and show you some of the great
Widgets that people have made.

00:54:57.620 --> 00:55:00.300
So one of the more popular
Widgets that I've seen is

00:55:00.300 --> 00:55:02.180
the Business Week RSS Widget.

00:55:02.180 --> 00:55:05.300
And this one uses RSS and network access.

00:55:05.300 --> 00:55:07.840
We'll be talking about that more
in our advanced session tomorrow.

00:55:07.840 --> 00:55:10.450
But you'll see that it just
puts a whole bunch of headlines

00:55:10.450 --> 00:55:11.960
on here and things like that.

00:55:13.510 --> 00:55:16.400
Another really popular one which you
might have seen is the Hulu Girl Widget.

00:55:16.400 --> 00:55:19.260
So we can have Homer on
our Dashboard Hulu-ing.

00:55:19.430 --> 00:55:22.030
Not terribly useful, but kind of fun.

00:55:23.670 --> 00:55:27.360
Another one which was out here is
there's a WWDC Schedule Widget.

00:55:27.500 --> 00:55:30.730
So you can find out
what's happening next.

00:55:30.810 --> 00:55:32.700
At 2:00, there's a .mac SDK session.

00:55:32.820 --> 00:55:33.460
You should visit that.

00:55:33.490 --> 00:55:34.670
I have a friend in .mac.

00:55:34.730 --> 00:55:35.650
It's good stuff.

00:55:35.830 --> 00:55:38.000
And you can find out all
about the conference for that.

00:55:38.000 --> 00:55:39.980
And just to show you how easy
it is to make one of these,

00:55:40.130 --> 00:55:44.520
over the weekend, in four hours,
I made this Widget, which I call Mirror.

00:55:44.520 --> 00:55:47.730
And what this does is it
accesses an eyesight and puts

00:55:48.310 --> 00:55:50.390
yourself on the Dashboard.

00:55:50.400 --> 00:55:52.100
And it mirrors it.

00:55:52.100 --> 00:55:55.670
So that way, I can see if someone's
looking over my shoulder.

00:55:55.670 --> 00:55:57.200
It's like the ultimate boss key.

00:55:57.200 --> 00:56:00.240
So that way,
if I have games on my Dashboard

00:56:00.270 --> 00:56:01.890
or something like that,
I can say, oh, shoot,

00:56:02.170 --> 00:56:04.160
someone's there and get rid of it.

00:56:04.260 --> 00:56:08.100
Or let's say I'm getting ready to talk
to Steve Jobs or somebody like that.

00:56:08.100 --> 00:56:10.830
I can make sure my hair is in good shape.

00:56:10.940 --> 00:56:12.200
So it's a handy little Widget.

00:56:12.200 --> 00:56:14.370
And as an incentive to show
up to our lab this afternoon,

00:56:14.370 --> 00:56:16.200
if you come,
I'll show you how I made that.

00:56:16.200 --> 00:56:19.100
I used Quartz Compositor and
a couple other little things.

00:56:19.100 --> 00:56:21.200
And we'll show you how I did that there.

00:56:21.220 --> 00:56:23.200
So back to slides, please.

00:56:27.820 --> 00:56:29.980
So today we've covered the basic Widget.

00:56:30.000 --> 00:56:32.980
The four things that go in every
Widget are an Info.plist file,

00:56:32.980 --> 00:56:37.230
an HTML file, and the two images,
the default and icon.png.

00:56:37.450 --> 00:56:39.400
From there,
we covered some design tips which help

00:56:39.400 --> 00:56:42.790
you make a Widget that looks like it
belongs on Dashboard and uses conventions

00:56:42.860 --> 00:56:44.300
that people are used to seeing.

00:56:44.300 --> 00:56:47.270
Then we spent a good amount of
time talking about localization

00:56:47.420 --> 00:56:50.190
and what it takes to localize your
Widget strings and its design.

00:56:50.300 --> 00:56:53.250
Then we talked about
preferences and Widget backs,

00:56:53.300 --> 00:56:56.910
how to add a back and how
to access it and how to save

00:56:56.910 --> 00:56:58.300
preferences and retrieve them.

00:56:58.300 --> 00:57:00.810
And finally,
we talked about some useful Widget

00:57:00.810 --> 00:57:04.300
events which help your Widget act
like it belongs on the Dashboard.

00:57:04.790 --> 00:57:06.820
For this, all the information
I covered in the session,

00:57:06.840 --> 00:57:08.160
take a look at our documentation.

00:57:08.160 --> 00:57:10.240
It's available on the WWDC site.

00:57:10.370 --> 00:57:11.690
There's two books there right now.

00:57:11.700 --> 00:57:15.310
There's the Dashboard Programming Guide,
which covers different topics

00:57:15.370 --> 00:57:18.420
and task-based information
about adding things to widgets.

00:57:18.420 --> 00:57:20.980
And there's the Reference,
which covers all the Infoplist keys

00:57:20.980 --> 00:57:23.600
and all the other little things
that the widget object can do.

00:57:23.680 --> 00:57:25.390
And there's a ton of
other resources there,

00:57:25.450 --> 00:57:26.400
like sample code.

00:57:26.400 --> 00:57:29.190
There's great sample code on
how to resize and stretch and

00:57:29.190 --> 00:57:30.540
add scrollers to your widget.

00:57:30.540 --> 00:57:32.940
These are things that are not
necessarily widget specific.

00:57:32.940 --> 00:57:33.940
They're DHTML.

00:57:33.970 --> 00:57:37.530
But the sample code makes it
really easy to do these things.

00:57:38.450 --> 00:57:41.290
Your roadmap for the rest of this week,
tomorrow at 2:00,

00:57:41.290 --> 00:57:43.420
I believe in the North Beach room,
we're going to be doing

00:57:43.420 --> 00:57:44.720
advanced Dashboard Widgets.

00:57:44.810 --> 00:57:48.000
That's where we cover how to use command
line utilities inside of a Widget,

00:57:48.150 --> 00:57:50.800
how to access the network
through HTTP requests.

00:57:50.800 --> 00:57:52.790
We also cover Widget and
WebKit plugins in there.

00:57:52.790 --> 00:57:56.300
So if you ever need to interact with
Cocoa or anything to that effect,

00:57:56.300 --> 00:57:58.760
or need to draw special 3D
graphics or anything like that,

00:57:58.970 --> 00:58:02.610
you'll want to use a
WebKit plugin or a Widget plugin.

00:58:02.740 --> 00:58:07.240
At the same time, unfortunately,
there is Safari for Web Designers,

00:58:07.330 --> 00:58:09.250
which covers Canvas and
a couple of other things.

00:58:09.260 --> 00:58:10.820
So if you're interested
in more web design,

00:58:10.830 --> 00:58:13.490
we suggest you go to that
session and then view our session

00:58:13.490 --> 00:58:15.360
when the sessions come online.

00:58:15.360 --> 00:58:18.750
Tomorrow morning is
Advanced WebKit Development,

00:58:18.750 --> 00:58:22.850
and that is a great session about
making a WebKit plugin and all of

00:58:22.850 --> 00:58:24.330
the associated in and outs with that.

00:58:24.390 --> 00:58:25.780
We'll be covering it
in an advanced session,

00:58:25.780 --> 00:58:27.160
but if you want to know
all the nuts and bolts,

00:58:27.210 --> 00:58:29.120
we suggest you go to that
session tomorrow morning.

00:58:29.120 --> 00:58:32.330
And then finally this afternoon
at 3:30 in Applications

00:58:32.330 --> 00:58:35.910
Technology Lab 1 on Level 2,
we have our Development Lab.

00:58:35.920 --> 00:58:38.540
So if you have any questions
about Widget implementations,

00:58:38.580 --> 00:58:40.750
design, come talk to us.

00:58:40.820 --> 00:58:44.000
We'll have the Dashboard
Engineers and WebKit Engineers there

00:58:44.000 --> 00:58:45.190
to give you advice.

00:58:46.070 --> 00:58:48.380
If you have any questions,
feel free to contact our evangelist.

00:58:48.540 --> 00:58:49.660
His name is Alan Samuel.

00:58:49.850 --> 00:58:52.160
His email address is blucher1@apple.com.

00:58:52.320 --> 00:58:54.000
And he'll be up here in a moment, too.

00:58:54.000 --> 00:58:58.130
And there's also a great Widget
community starting up at lists.apple.com.

00:58:58.130 --> 00:59:00.950
The Dashboard Dev Mailing List is
there for you to ask your questions.

00:59:01.000 --> 00:59:03.980
It's manned by Apple engineers
and by community people,

00:59:04.070 --> 00:59:07.000
third-party developers,
just making Widgets on their own.