WEBVTT

00:00:01.450 --> 00:00:02.970
Wow, I'm impressed.

00:00:03.100 --> 00:00:06.100
Two o'clock on a Friday afternoon,
so many people.

00:00:06.220 --> 00:00:07.890
How's everybody doing?

00:00:09.600 --> 00:00:13.400
"Grab the week's almost over."
So we're going to talk a little

00:00:13.400 --> 00:00:16.430
bit about network authentication.

00:00:16.460 --> 00:00:18.230
I'm actually quite surprised
at the number of people

00:00:18.230 --> 00:00:19.360
that are interested in that.

00:00:19.360 --> 00:00:21.270
What

00:00:23.400 --> 00:00:29.700
[Transcript missing]

00:00:29.860 --> 00:00:45.730
Eric Clement: Okay,
well this is a hands-on session,

00:00:45.730 --> 00:00:45.730
we're going to be going over a
little bit of code as part of this,

00:00:45.730 --> 00:00:45.730
but I'm going to do a little bit
of discussion about where we're

00:00:45.730 --> 00:00:45.730
going and what we're trying to do.

00:00:45.730 --> 00:00:45.730
So let's get right into this.

00:00:45.730 --> 00:00:45.730
My name is Eric Clement,
I'm a directory services engineer.

00:00:45.730 --> 00:00:45.730
I work on our Open Directory and
Active Directory plugins.

00:00:46.470 --> 00:00:48.140
So, what are you going to learn here?

00:00:48.270 --> 00:00:51.410
Well, we're going to talk a little
bit about Open Directory,

00:00:51.690 --> 00:00:55.630
where we're going with authentication,
do a little bit of discussion

00:00:55.640 --> 00:01:01.060
about authentication in general,
what that means, things like Kerberos,

00:01:01.060 --> 00:01:06.430
single pass--clear text passwords,
challenge response passwords,

00:01:06.430 --> 00:01:06.430
give you a little bit of
code examples after that,

00:01:06.430 --> 00:01:06.430
and then go into a Q&A.

00:01:07.500 --> 00:02:26.800
[Transcript missing]

00:02:27.480 --> 00:02:30.340
So, how does Directory Services work?

00:02:30.360 --> 00:02:34.350
Directory Services is actually an API,
but reality is it talks

00:02:34.450 --> 00:02:35.340
to a back-end daemon.

00:02:35.400 --> 00:02:38.390
Most of you have seen this
daemon called Directory Services.

00:02:38.940 --> 00:02:42.400
These APIs do nothing on the
client for the most part.

00:02:42.440 --> 00:02:45.540
All they do is send a call across
the Mach message over to the daemon

00:02:45.540 --> 00:02:47.400
and let the daemon do all the work.

00:02:47.420 --> 00:02:50.630
This is why you only have one
API and a smaller framework

00:02:50.630 --> 00:02:52.270
footprint on your client.

00:02:52.400 --> 00:02:55.910
Eric Clement So, the great thing here is,
in the future we can do a lot

00:02:55.990 --> 00:03:02.660
more in Directory Services,
and who knows where we can go there, but,

00:03:02.660 --> 00:03:02.660
you know, maybe...

00:03:03.590 --> 00:03:06.800
caching in the future.

00:03:07.170 --> 00:03:09.760
Typically, most clients would actually
write that into their client.

00:03:09.810 --> 00:03:12.560
Well, you wouldn't have to do that
if we implemented something

00:03:12.560 --> 00:03:14.060
in directory services.

00:03:14.110 --> 00:03:17.300
So that's just something to keep in mind,
possibilities of what we can do.

00:03:17.300 --> 00:03:20.730
Now, we try to point out here the user
application runs in user space,

00:03:20.730 --> 00:03:24.740
and directory service statement
actually runs in the system space.

00:03:25.080 --> 00:03:26.730
Now that allows us to
talk to anything we want.

00:03:26.820 --> 00:03:29.200
We get files on the system.

00:03:29.230 --> 00:03:32.060
That's how NetInfo works, etc.

00:03:34.530 --> 00:03:37.560
So where are we going
with authentication?

00:03:37.620 --> 00:03:42.490
We support all the legacy
protocols today in Open Directory.

00:03:42.640 --> 00:03:48.230
That includes ClearText, NTLM,
NTLM v2 now has been added,

00:03:48.230 --> 00:03:50.940
and all the various protocols, CRM MD5.

00:03:51.250 --> 00:03:54.200
Now keep in mind,
this doesn't mean that every

00:03:54.270 --> 00:03:55.990
system will support it.

00:03:56.100 --> 00:03:58.800
Just because the directory service
supports CRM MD5 doesn't mean

00:03:59.070 --> 00:04:02.360
the particular directory you're
talking to will support CRM MD5.

00:04:02.450 --> 00:04:05.560
So things to keep in mind if you
decide to write an application that

00:04:05.560 --> 00:04:09.650
uses the directory service APIs,
and to pay attention to those error

00:04:09.650 --> 00:04:11.900
codes you get back from the APIs.

00:04:12.330 --> 00:04:15.880
We've said this for the
past couple of years,

00:04:15.970 --> 00:04:19.000
we're very actively pursuing KerberoS.

00:04:19.130 --> 00:04:21.500
KerberoS is our solution
for network authentication.

00:04:21.500 --> 00:04:23.460
You'll see that across
all of our applications in

00:04:23.460 --> 00:04:25.140
Mac OS X and Mac OS X Server.

00:04:25.290 --> 00:04:28.330
We're actually authenticating the
majority of our services using KerberoS.

00:04:28.510 --> 00:04:32.330
The great thing about that is,
entering the passwords and usernames,

00:04:32.330 --> 00:04:34.400
you don't have to do that anymore.

00:04:34.400 --> 00:04:35.800
It's a single sign-on technology.

00:04:35.800 --> 00:04:39.390
I'll talk a little bit more about
that in detail a little bit later.

00:04:41.830 --> 00:04:44.020
Panther, Tiger, Server,
both we added all this

00:04:44.020 --> 00:04:45.740
functionality quite some time ago.

00:04:45.740 --> 00:04:47.750
And the great thing is,
a lot of the customers,

00:04:47.820 --> 00:04:50.770
hopefully a lot of the
IT folks here are doing it,

00:04:50.770 --> 00:04:54.000
are deploying Mac OS X Tiger and
Panther in your environment.

00:04:54.000 --> 00:04:56.360
So the great thing is if
you're deploying OpenLDAP or

00:04:56.360 --> 00:04:58.670
Open Directory on your system,
you get the advantage of

00:04:58.670 --> 00:05:01.340
all these various protocols,
all these various authentication

00:05:01.730 --> 00:05:03.620
methods built in right out of the box.

00:05:03.680 --> 00:05:07.590
So if you have a particular web
application and you want to use CRAMMD5,

00:05:07.590 --> 00:05:10.740
for example,
you can use CRAMMD5 and it'll work.

00:05:10.740 --> 00:05:12.800
Or maybe you wanna use some other method.

00:05:12.820 --> 00:05:15.440
So that's one of the great things
about deploying Mac OS X and

00:05:15.440 --> 00:05:16.620
Open Directory in your environment.

00:05:19.940 --> 00:05:24.040
We've tried to remove as much as
we can to make this difficult.

00:05:24.140 --> 00:05:26.300
So obviously we've got all the
APIs and what you're going to see

00:05:26.300 --> 00:05:29.020
here today is we're going to give
you some sample code to go back with

00:05:29.120 --> 00:05:31.870
you that will actually make it a
little bit easier for those one-offs.

00:05:32.030 --> 00:05:33.820
You know,
I've got a web application I want,

00:05:33.820 --> 00:05:35.950
I want to do a quick authentication,
all I've got is a

00:05:35.950 --> 00:05:38.080
username and a password,
let me authenticate that.

00:05:38.330 --> 00:05:39.840
So we're trying to make that
a little bit easier for you,

00:05:39.880 --> 00:05:41.260
just some sample code
to take back with you.

00:05:41.380 --> 00:05:46.100
This is just a starting point,
it's not everything you may need to do,

00:05:46.100 --> 00:05:47.830
so keep that in mind.

00:05:48.170 --> 00:05:51.170
Also keep in mind, as I said,
these APIs work across

00:05:51.170 --> 00:05:55.100
all the directory systems,
so things you may want to do with LDAP,

00:05:55.190 --> 00:05:57.890
guess what,
it works with Active Directory.

00:05:59.960 --> 00:06:02.100
So how do you authenticate a user?

00:06:02.110 --> 00:06:06.040
Well, the reality is we're kind of
focusing here on the back end.

00:06:06.040 --> 00:06:07.280
I've got a web application.

00:06:07.280 --> 00:06:13.010
I've got a new application I'm bringing
up that has a client server base.

00:06:13.170 --> 00:06:14.460
We're going to focus on
the back end of that,

00:06:14.640 --> 00:06:18.690
because the reality is,
typically if I was a GUI on the desktop,

00:06:18.840 --> 00:06:22.280
I would use Security Framework,
I may use PAM or some other

00:06:22.280 --> 00:06:23.600
authentication service.

00:06:23.770 --> 00:06:26.550
But on the back end, the reality is,
you'd want to use directory services

00:06:26.550 --> 00:06:27.590
for all your authentication.

00:06:27.600 --> 00:06:31.200
The reason is, just like I said before,
you want to get to

00:06:31.210 --> 00:06:33.120
those other directories.

00:06:34.310 --> 00:06:37.580
Server-based applications,
we definitely recommend either PAM,

00:06:37.620 --> 00:06:40.070
although we actually recommend
Director Service first,

00:06:40.070 --> 00:06:44.220
because Director Service will do all the
things that you would ever want to do,

00:06:44.220 --> 00:06:44.970
we hope.

00:06:45.100 --> 00:06:49.000
GSS API is our recommended method
for doing your authentications.

00:06:49.070 --> 00:06:53.180
GSS API is obviously used within
Espinago for web applications.

00:06:53.270 --> 00:06:56.660
So GSS API is your single
sign-on Kerbero soft.

00:06:56.980 --> 00:07:02.140
It's a token that gets passed around
for all your network authentications.

00:07:05.400 --> 00:07:07.900
Who knows the difference between
authentication and authorization?

00:07:07.900 --> 00:07:13.490
I didn't quite see enough hands there.

00:07:14.190 --> 00:07:16.060
So, you know,
this is always a point of contention

00:07:16.060 --> 00:07:19.100
for some people that they think
they're actually the same thing.

00:07:19.310 --> 00:07:20.000
Well, they're not.

00:07:20.100 --> 00:07:23.090
Authentication is proving who you are.

00:07:23.090 --> 00:07:24.940
I'm Eric Clements, I can prove it.

00:07:25.090 --> 00:07:26.260
I've got an ID.

00:07:26.260 --> 00:07:30.080
Does that mean I have access
to go run into the other room?

00:07:30.080 --> 00:07:33.090
Or I have access to, you know,
take somebody's car?

00:07:33.190 --> 00:07:34.090
No.

00:07:34.100 --> 00:07:36.360
So, you know,
proof of identity is just one

00:07:36.360 --> 00:07:37.970
step within authentication.

00:07:37.970 --> 00:07:41.100
The next step is to authorize a person.

00:07:41.140 --> 00:07:44.810
So in Mac OS X Tiger, we introduced ACLs.

00:07:45.100 --> 00:07:48.860
ACLs are part of your authorization
mechanism to say who has

00:07:48.860 --> 00:07:53.000
access to run this application,
who has access to use this application.

00:07:53.010 --> 00:07:55.460
So that's a very distinct difference.

00:07:55.610 --> 00:07:58.400
And you'll see through some charts
I'll show in a second that just

00:07:58.400 --> 00:08:02.530
because you authenticated somebody,
somebody doesn't mean that they

00:08:02.580 --> 00:08:04.710
have the access to actually use it.

00:08:06.130 --> 00:08:09.420
We typically use groups today in
most of our membership checks.

00:08:09.720 --> 00:08:10.610
You may have something else.

00:08:10.630 --> 00:08:13.550
It could be a flat file,
it could be a database,

00:08:13.690 --> 00:08:16.720
it could be anything on the back end
that you use to prove that that user has

00:08:16.720 --> 00:08:18.980
access to what you're trying to get to.

00:08:19.000 --> 00:08:22.770
We obviously support service ACLs.

00:08:22.770 --> 00:08:26.000
This is what's done with what
we call our Member D process.

00:08:26.000 --> 00:08:29.990
We have a published API to say,
"Check for this service and see if

00:08:30.010 --> 00:08:33.880
this user has access to that." We're
not going to demonstrate that here,

00:08:33.880 --> 00:08:34.900
but keep that in mind.

00:08:35.000 --> 00:08:36.000
If you want to go down
the path of saying,

00:08:36.000 --> 00:08:39.760
"Does this user have
access?" Use those APIs.

00:08:42.490 --> 00:08:45.660
So everything that we have is included
in our Open Directory Framework,

00:08:45.660 --> 00:08:47.840
also known as
Directory Services Framework.

00:08:47.840 --> 00:08:51.040
All you have to do is include one header,
and with that you get all the

00:08:51.160 --> 00:08:54.540
APIs you need to do anything
with all the various directories.

00:08:54.570 --> 00:08:58.520
The one we're going to talk about
in particular is DS-DudernodeAuth.

00:08:58.860 --> 00:09:02.570
And when everybody looks at these APIs,
they give me kind of a

00:09:02.860 --> 00:09:04.260
hard time about them.

00:09:04.560 --> 00:09:06.460
But actually,
the great thing about this is,

00:09:06.530 --> 00:09:09.900
we've been able to extend this protocol,
or this API,

00:09:10.170 --> 00:09:14.280
to support all these various methods
that we've been adding over the years.

00:09:14.350 --> 00:09:17.140
We didn't support NTL in V2 and Panther.

00:09:17.190 --> 00:09:19.760
Now we do,
and it's all with the same API.

00:09:19.760 --> 00:09:21.620
So it's one of the
great things about this.

00:09:21.620 --> 00:09:23.750
And with the code samples
we're going to give you,

00:09:23.840 --> 00:09:26.010
we'll hide some of this from you,
so you don't have to worry about it.

00:09:26.060 --> 00:09:29.040
But the great thing is,
you can use all these various

00:09:29.040 --> 00:09:30.790
authentication methods.

00:09:33.220 --> 00:09:36.540
So Kerbero, I talked a little bit
about GSS API and Kerbero.

00:09:36.560 --> 00:09:40.900
Kerbero is a ticket-based authentication.

00:09:41.460 --> 00:09:44.300
Once I get authenticated, I get a ticket.

00:09:44.480 --> 00:09:50.120
That ticket proves who I am and allows me
to get tickets to get to other services.

00:09:50.380 --> 00:09:55.080
Now this has been widely adopted by us,
Microsoft, even Novell's gone down this

00:09:55.080 --> 00:09:56.300
path and several others.

00:09:56.360 --> 00:10:00.190
A lot of you have been playing
in the Kerberoos world long

00:10:00.190 --> 00:10:02.300
before we entered this space.

00:10:02.480 --> 00:10:05.440
But it's great technology,
we're really excited about it,

00:10:05.440 --> 00:10:08.710
and it's really become an
industry standard across the

00:10:08.830 --> 00:10:10.600
board for single sign-on.

00:10:11.030 --> 00:10:13.450
You know, single sign-on has always
been the holy grail.

00:10:13.480 --> 00:10:17.180
You know,
sign into the desktop and just launch

00:10:17.180 --> 00:10:18.580
and get to all my applications.

00:10:18.580 --> 00:10:21.980
How many of you had 10 passwords
or more and wrote them down?

00:10:21.980 --> 00:10:23.520
That was always a nightmare.

00:10:23.520 --> 00:10:26.420
The great thing is here you don't
have to worry about that anymore.

00:10:26.420 --> 00:10:28.760
And the great thing is, you know,
Kerberos has a whole

00:10:28.870 --> 00:10:29.640
lot of functionality.

00:10:29.640 --> 00:10:33.280
It supports encryption, packet signing,
mutual authentication,

00:10:33.280 --> 00:10:36.920
all kinds of the buzzwords that are very
important in your environment because as

00:10:37.050 --> 00:10:41.320
we continue to go forward in this space,
people are more concerned about

00:10:41.320 --> 00:10:44.900
not just proving who the user is
but also ensuring that I'm talking

00:10:44.900 --> 00:10:46.310
to the server that I think I am.

00:10:46.360 --> 00:10:48.590
You know, we sometimes forget about that.

00:10:48.660 --> 00:10:51.720
You know, you walk into a Starbucks and
I connect to a server and say,

00:10:51.720 --> 00:10:54.110
well, it must be www.apple.com.

00:10:54.120 --> 00:10:55.450
It says it is.

00:10:57.650 --> 00:10:59.100
So it must be it, right?

00:10:59.130 --> 00:11:02.240
So the great thing is, with Kerbero,
we get down to this path and say,

00:11:02.260 --> 00:11:07.420
"Now I want you to prove that you are
the server I think you are." So this is

00:11:07.420 --> 00:11:09.930
one of the great things about Kerbero,
and we're really excited

00:11:09.930 --> 00:11:11.000
about it in general.

00:11:11.010 --> 00:11:14.400
Now we do recommend GSS as
the kind of starting point.

00:11:14.400 --> 00:11:17.000
I know some people do some
things directly with Kerbero.

00:11:17.070 --> 00:11:22.200
GSS has become the most common method of
doing Kerbero authentication and tickets.

00:11:22.220 --> 00:11:24.630
In reality,
the SPNago is actually a Kerbero,

00:11:24.700 --> 00:11:30.230
a GSS token inside of
the encapsulated packet.

00:11:30.590 --> 00:11:32.680
And I also recommend, you know,
some people try to do

00:11:32.680 --> 00:11:35.770
things manually and say,
you know, I'll figure out how to

00:11:35.770 --> 00:11:36.700
negotiate my protocol.

00:11:36.890 --> 00:11:41.760
I really recommend looking
at using things like Sassl.

00:11:42.760 --> 00:11:45.940
"Use the open standards,
find ways to authenticate a user,

00:11:46.090 --> 00:11:49.700
find ways to negotiate that user's
authentication with those open standards.

00:11:49.860 --> 00:11:51.030
Because it will make
your life a lot easier,

00:11:51.040 --> 00:11:53.620
allow you to expand in the
future to other things.

00:11:53.890 --> 00:11:56.110
Because down the road,
maybe there's something

00:11:56.130 --> 00:11:57.410
beyond Kerbero's."

00:11:57.570 --> 00:12:00.740
So keep that in mind and try to use
the things that are already in place

00:12:00.740 --> 00:12:03.980
that are very common in this space.

00:12:04.360 --> 00:12:06.600
So things you need to really
be concerned about though,

00:12:06.600 --> 00:12:10.340
if you go down the Kerbero's path,
you really need to think

00:12:10.340 --> 00:12:12.000
about your IP address.

00:12:12.030 --> 00:12:16.770
So one of the most common problems
we have is people have servers

00:12:16.860 --> 00:12:21.000
that have forward lookup entries
but don't have a reverse entry.

00:12:21.030 --> 00:12:26.000
So I know I'm going to www.apple.com,
but if I looked at that IP address,

00:12:26.010 --> 00:12:27.900
it says it's nobody.

00:12:27.910 --> 00:12:31.620
Well the problem is in a Kerbero space,
that doesn't work.

00:12:32.300 --> 00:12:35.280
We actually expect to be able to
look up that host name because that's

00:12:35.280 --> 00:12:39.400
how you can get the information in
order to get the tickets you need.

00:12:39.470 --> 00:12:41.990
So even in Mac OS X,
you'll notice in Tiger,

00:12:42.010 --> 00:12:45.040
when you configure your server now,
the host name is actually derived

00:12:45.160 --> 00:12:47.150
from the IP address that it's getting.

00:12:47.300 --> 00:12:50.510
So we're trying to do our best
effort to make it easy on you,

00:12:50.770 --> 00:12:52.950
but keep in mind if you
go down the Kerbero space,

00:12:52.950 --> 00:12:57.860
you really need to keep your addresses
forward and reverse matching.

00:12:59.150 --> 00:13:01.750
The other thing is,
in our space we actually

00:13:02.500 --> 00:13:04.200
use a single key tab.

00:13:04.210 --> 00:13:06.300
That key tab is
controlled by root access.

00:13:06.300 --> 00:13:09.580
So if you're gonna run on our
platform and use existing keys,

00:13:09.650 --> 00:13:11.720
keep in mind that if you're
writing an application,

00:13:11.720 --> 00:13:14.480
you may need to have that
application running as root.

00:13:14.480 --> 00:13:17.580
Typically that's not always
the smart thing to do,

00:13:17.630 --> 00:13:20.280
but we've tried to work around some of
that and we recommend you need to look

00:13:20.280 --> 00:13:24.530
at that if you're gonna use Kerberos
and the key tab built in on a host.

00:13:24.900 --> 00:13:51.700
[Transcript missing]

00:13:51.910 --> 00:13:57.270
The other thing to keep in mind is,
as we've seen this ourselves,

00:13:57.610 --> 00:14:02.070
that service case is very important.

00:14:02.740 --> 00:14:04.260
Not every protocol is alike.

00:14:04.400 --> 00:14:08.130
So look at the specs,
look at what you should be using,

00:14:08.190 --> 00:14:09.500
and be sure you're using
the right service type.

00:14:09.500 --> 00:14:12.590
Because the reality is,
Kerbero is case sensitive.

00:14:12.720 --> 00:14:16.930
So if I have a service key for,
in this case, HTTP,

00:14:17.080 --> 00:14:18.970
"It's actually uppercase.

00:14:19.090 --> 00:14:21.060
And if you ask for a
lowercase version of it,

00:14:21.140 --> 00:14:24.000
you're not going to get it,
because the KDC doesn't have that.

00:14:24.000 --> 00:14:28.390
So just something to keep in
mind from Kerbero's perspective.

00:14:29.510 --> 00:14:31.900
Let's talk a little bit about
the flow of authentication.

00:14:32.100 --> 00:14:34.190
So this is just two of the
examples out of the three that

00:14:34.220 --> 00:14:35.390
we're going to do in the code.

00:14:35.390 --> 00:14:38.400
The first one being the
password authentication.

00:14:38.520 --> 00:14:40.770
So what's the first thing that happens?

00:14:40.860 --> 00:14:42.900
You get a name and password.

00:14:44.620 --> 00:14:46.990
So what's different on the
platform here is in most cases

00:14:47.050 --> 00:14:51.000
you take whatever username you
got and do an authentication.

00:14:51.000 --> 00:14:56.400
Well, on Mac OS X, we have the concept
of multiple usernames.

00:14:56.400 --> 00:14:59.600
So when I sign in on my computer,
I sign in as Eric Clements.

00:14:59.600 --> 00:15:03.600
Our reality is my username
is really E.Clements,

00:15:03.600 --> 00:15:06.600
but I don't use that name half the time,
right?

00:15:06.650 --> 00:15:08.790
So you really need to look
up the user and find out what

00:15:08.920 --> 00:15:11.040
username to authenticate as.

00:15:11.280 --> 00:15:14.650
This is very important
because as protocols vary

00:15:14.650 --> 00:15:18.380
and in fact you see this AFP,
we will authenticate

00:15:18.380 --> 00:15:20.070
against AFP with a long

00:15:21.300 --> 00:15:22.410
"Or the short name, we don't really care.

00:15:22.610 --> 00:15:25.130
Some other systems don't do that.

00:15:25.260 --> 00:15:27.890
So you need to find the official
record name of the user and do the

00:15:27.890 --> 00:15:30.240
authentication with that record name.

00:15:30.310 --> 00:15:33.620
And you do that using DS-DurrNodeAuth.

00:15:33.840 --> 00:15:36.550
And then the most important
step I mentioned before,

00:15:36.550 --> 00:15:38.140
check the authorization.

00:15:38.170 --> 00:15:40.260
Now in your case you may not
care about the authorization.

00:15:40.310 --> 00:15:43.100
Every user that authenticates has access,
so that may not be

00:15:43.100 --> 00:15:46.000
pertinent in your case,
but if you put the step in there and have

00:15:46.000 --> 00:15:48.630
it there in case you decide to use it,
then you've already

00:15:48.630 --> 00:15:50.280
got the functionality.

00:15:50.300 --> 00:15:55.110
And then at that point is when you
decide to allow or deny that access.

00:15:56.950 --> 00:15:59.240
In the Kerbero space,
it's slightly different.

00:15:59.300 --> 00:16:02.210
You actually get a service ticket
that you're going to verify.

00:16:03.090 --> 00:16:07.050
So once GSS and Kerbero has
verified that service ticket,

00:16:07.080 --> 00:16:08.860
then the next thing you're
going to do is look up to see

00:16:08.880 --> 00:16:10.150
if the user is a real user.

00:16:10.320 --> 00:16:13.550
Now that's important because just
because I'm configured for Kerbero

00:16:13.670 --> 00:16:17.840
doesn't mean I'm pointed at a directory
that have users that can log in.

00:16:18.020 --> 00:16:21.130
If you take that user just
because they're in Kerbero,

00:16:21.270 --> 00:16:25.000
doesn't mean that they're a
valid user on that system.

00:16:25.190 --> 00:16:27.740
So one of the other things that we do
now is you actually need to look up

00:16:27.800 --> 00:16:32.040
that same user in the directory and say,
"Is this a user in this system?" Then you

00:16:32.040 --> 00:16:37.200
also check to see if they're in the
authentication or authorization tab.

00:16:37.270 --> 00:16:40.600
Then at that point you
allow or deny the access.

00:16:40.610 --> 00:16:43.620
Obviously in a password challenge
it's slightly different,

00:16:43.620 --> 00:16:45.380
but it's a very similar concept.

00:16:49.930 --> 00:16:52.950
So let's jump right over to
code example and some demos.

00:16:52.960 --> 00:16:57.880
So this is actually published on the web.

00:16:57.970 --> 00:17:00.760
So if you want to pull it up,
you can take a look at it.

00:17:00.760 --> 00:17:03.900
I've got a couple sample
applications and code.

00:17:03.900 --> 00:17:05.140
I'll kind of step through here.

00:17:05.140 --> 00:17:07.250
We've got three applications
called Lookup User,

00:17:07.330 --> 00:17:08.920
Demo Server, and Demo Client.

00:17:08.920 --> 00:17:12.570
The concept here was I was going to have
a demo server running in the background,

00:17:12.630 --> 00:17:15.640
and I'm going to have a client
and try various authentications

00:17:15.640 --> 00:17:20.600
against that server and see the
fact that I can deny it or prove it.

00:17:20.630 --> 00:17:24.110
So I tried to document at the top of
these some key steps that are going on,

00:17:24.230 --> 00:17:25.160
just like you saw before.

00:17:25.160 --> 00:17:26.680
In this case,
we're going to look at the Lookup User.

00:17:26.710 --> 00:17:29.500
What does it take to look
up a user on Mac OS X?

00:17:29.500 --> 00:17:31.840
Well, there's actually a lot of
APIs from a DS perspective,

00:17:31.840 --> 00:17:34.260
but I tried to make this a lot easier.

00:17:34.260 --> 00:17:37.420
So you'll see these APIs actually
documented in these headers.

00:17:37.420 --> 00:17:39.220
These are the common
code that you can take,

00:17:39.220 --> 00:17:43.240
use it, modify it,
however you want for your applications.

00:17:43.240 --> 00:17:49.050
And lots of header docking here,
talking about the various functions,

00:17:49.050 --> 00:17:51.210
including locating your search end.

00:17:51.450 --> 00:17:57.800
So the first thing is we have the
concept of an authentication chain.

00:17:59.210 --> 00:18:02.510
That authentication chain determines
where users should be able to

00:18:02.510 --> 00:18:04.740
authenticate to the system.

00:18:04.830 --> 00:18:07.110
So the first thing you do is
find that authentication chain,

00:18:07.110 --> 00:18:09.140
and that is your search node.

00:18:09.150 --> 00:18:13.140
Next, we locate the user and do an auth.

00:18:13.230 --> 00:18:15.350
So let's just actually just
jump back to this lookup user

00:18:15.370 --> 00:18:17.480
and see what the code's like.

00:18:17.600 --> 00:18:20.380
So first thing we do is we have
to open up directory services.

00:18:20.470 --> 00:18:23.600
You'll see this on this
first dsopendir service.

00:18:23.640 --> 00:18:27.470
Once that's valid,
we can go get our search node.

00:18:27.470 --> 00:18:29.770
Then we can look up the user.

00:18:31.670 --> 00:18:35.350
And here basically,
once we've gone past that point,

00:18:35.920 --> 00:18:37.690
we have found a valid user.

00:18:37.890 --> 00:18:40.110
So let's just actually do this.

00:18:41.700 --> 00:18:43.120
So that's a quick output of that.

00:18:43.190 --> 00:18:47.210
You can actually see the fact that
"demo auth" is actually "demo auth"

00:18:47.210 --> 00:18:49.900
lowercase all concatenated together.

00:18:50.000 --> 00:18:52.840
And it actually tells me
where that user is located.

00:18:52.950 --> 00:18:54.850
The reality is if this
was an Active Directory,

00:18:54.850 --> 00:18:56.200
for example,
it would say "Active Directory"

00:18:56.200 --> 00:18:57.900
and some domain off of that.

00:18:57.990 --> 00:19:01.390
Or if this was an Open Directory,
it would say "l.v3" and some

00:19:01.460 --> 00:19:03.400
IP address or some node name.

00:19:03.400 --> 00:19:05.290
So it's very important to this step.

00:19:05.290 --> 00:19:08.730
This is just the precursor to
actually doing the authentication.

00:19:23.620 --> 00:19:24.090
Is that better?

00:19:24.100 --> 00:19:31.190
So next we actually have the demo server.

00:19:31.200 --> 00:19:34.620
And this is the core of the code that
you would need to do if you were doing

00:19:34.620 --> 00:19:36.080
an authentication on the back end.

00:19:36.090 --> 00:19:41.220
This is your server application and
you're gonna verify that user and take

00:19:41.220 --> 00:19:43.150
their authorization with that code.

00:19:43.280 --> 00:19:46.440
The demo client that is provided here
we're not really gonna go over because

00:19:46.460 --> 00:19:52.300
this is just getting as an example of how
to send the credentials across the wire.

00:19:52.400 --> 00:19:54.380
This is not production code.

00:19:54.480 --> 00:19:55.820
Please don't use network routines.

00:19:55.820 --> 00:19:58.660
These were just thrown
together for the demonstration.

00:19:59.740 --> 00:20:03.590
So in this demo server,
we've got three different

00:20:03.590 --> 00:20:04.440
authentications.

00:20:04.530 --> 00:20:07.210
First, we've got a clear text.

00:20:07.550 --> 00:20:10.400
So this is what I said, you know,
we have a ClearText password,

00:20:10.430 --> 00:20:12.960
doesn't mean that you should be sending
that password over the wire in ClearText.

00:20:13.030 --> 00:20:13.830
In my case I am.

00:20:13.830 --> 00:20:18.170
But please don't do that in your apps.

00:20:19.490 --> 00:20:23.230
So, just like before,
as I said on the presentation,

00:20:23.250 --> 00:20:25.860
first you need to locate the user.

00:20:27.150 --> 00:20:31.070
First we need to look at
the user and the directory.

00:20:31.080 --> 00:20:33.200
Then we're going to get
their official record name.

00:20:33.340 --> 00:20:36.500
This is that step where we
turn demo auth into demo user,

00:20:36.610 --> 00:20:38.500
or demo auth concatenated.

00:20:38.690 --> 00:20:42.230
Then we're going to authenticate them
with the appropriate authentication type.

00:20:44.050 --> 00:20:46.140
And the key difference here,
we went up to this point,

00:20:46.260 --> 00:20:51.320
but now you'll notice here we're going
to actually do the authentication.

00:20:54.100 --> 00:20:58.120
So let's just jump over and just run
this real quick so you can see it.

00:20:58.210 --> 00:21:00.390
So in this case,
you can see I'm running my application

00:21:00.410 --> 00:21:03.460
here called Demo Server on port 2500.

00:21:03.500 --> 00:21:06.080
I did throw out a little warning here
because we're not actually going to do

00:21:06.080 --> 00:21:08.220
a Kerberoos demonstration in this case.

00:21:08.290 --> 00:21:13.020
But if I was doing a Kerberoos,
I'd need to run this as root.

00:21:13.130 --> 00:21:17.600
So we're going to do a clear text
auth on port 2500 with this machine,

00:21:17.660 --> 00:21:20.680
with the user demo auth
and password Apple.

00:21:21.230 --> 00:21:25.410
You notice that the server accepted
the credentials and notice I actually

00:21:25.440 --> 00:21:28.850
logged on the server side that we've
received a clear text authentication

00:21:29.430 --> 00:21:32.100
and that it was a successful auth.

00:21:32.350 --> 00:21:36.430
Now let's just do that again,
but let's mess it up.

00:21:36.450 --> 00:21:39.810
Now you notice I've actually
said it was rejected.

00:21:42.000 --> 00:21:46.880
And you notice on the back end,
it says it was an invalid authentication.

00:21:46.880 --> 00:21:50.040
It's very easy to do,
and all these functions are

00:21:50.040 --> 00:21:52.230
located in these DS Utility files.

00:21:52.820 --> 00:21:55.890
Now, you could simplify this into
a smaller routine if you like.

00:21:55.900 --> 00:21:58.460
Maybe all you care about is one Auth,
and then you can close

00:21:58.810 --> 00:22:00.990
down Direct Services and
I'll do it again later.

00:22:00.990 --> 00:22:03.100
We tried to make this
a little more flexible,

00:22:03.100 --> 00:22:05.910
because you might be doing
multiple Auths at the same time.

00:22:05.960 --> 00:22:09.040
So we left a little flexibility
on what you might want to do.

00:22:09.280 --> 00:22:12.800
Now let's jump down to the CRAM MD5.

00:22:12.900 --> 00:22:16.490
So CRAM MD5 is a little different,
because this is a challenge response.

00:22:16.610 --> 00:22:20.100
In this case, the server is going to
send me a challenge,

00:22:20.140 --> 00:22:22.800
and I'm going to craft a
response based on that challenge.

00:22:22.980 --> 00:22:25.740
Because I don't want to send my
password in some way that somebody

00:22:25.790 --> 00:22:27.600
could figure out what my password is.

00:22:27.730 --> 00:22:31.300
So I'm going to take that challenge,
do some operation on it,

00:22:31.300 --> 00:22:34.030
in this case a CRAM MD5,
and send that response

00:22:34.030 --> 00:22:35.390
back to the server.

00:22:36.000 --> 00:22:39.060
Now,
just like you saw in the previous code,

00:22:39.090 --> 00:22:40.540
all the same steps.

00:22:40.540 --> 00:22:44.160
Open the search node, locate the user,
I've got a user, open the node.

00:22:44.430 --> 00:22:50.140
In this case,
we're going to do a challenge response.

00:22:50.230 --> 00:22:52.750
So in that challenge response,
we'll just kind of look at that real

00:22:52.760 --> 00:22:54.520
quick because it's slightly different.

00:23:01.200 --> 00:23:05.220
You notice the parameters,
we actually expect the challenge.

00:23:05.310 --> 00:23:08.020
And that challenge can be of any
length depending on the protocol.

00:23:08.070 --> 00:23:11.730
In this case, we follow the standard
RFC for doing a CRM MD5.

00:23:11.840 --> 00:23:14.460
You notice here,
this code is very generic,

00:23:14.540 --> 00:23:17.780
because the goal was that you
have one function call to say,

00:23:17.850 --> 00:23:24.940
"I'm sending CRM MD5, I'm sending APOP,
CHAP, LM, NT hashes." So,

00:23:24.980 --> 00:23:28.500
one function routine that you can call.

00:23:28.600 --> 00:23:30.530
Now in our case,

00:23:34.350 --> 00:23:35.900
We're going to do a quick demo.

00:23:35.960 --> 00:23:41.420
We're going to switch
the protocol to CRAM-MB5.

00:23:41.430 --> 00:23:44.840
And you'll notice a slight
difference on the server this time.

00:23:44.870 --> 00:23:48.690
We generated a challenge
when the connection came in.

00:23:49.850 --> 00:23:51.760
"And the client responded
to that challenge.

00:23:51.960 --> 00:23:54.010
In this case,
it was still a valid authentication."

00:23:54.040 --> 00:23:57.040
Now you'll notice that in the
sample code that you've got,

00:23:57.080 --> 00:24:00.940
a little bit higher in here,
if you go to handle CRM NB5,

00:24:00.940 --> 00:24:05.410
you'll notice that we're
generating a challenge.

00:24:08.170 --> 00:24:11.110
This is all based off of RFC 1460.

00:24:11.180 --> 00:24:14.910
Sending tokens, reading tokens back,
and doing the authentication.

00:24:15.090 --> 00:24:16.840
So I tried to master this
a little bit for you.

00:24:16.850 --> 00:24:18.800
Like I said,
this is a good starting point if you

00:24:18.850 --> 00:24:21.710
need to do any of these authentications.

00:24:23.100 --> 00:24:27.270
Next, we've got a GSS API,
which is slightly

00:24:27.270 --> 00:24:30.240
different because GSS API,
one thing to keep in mind is,

00:24:30.290 --> 00:24:33.630
depending on the options the user
selects for the authentication,

00:24:33.640 --> 00:24:36.640
you may have multiple round trips.

00:24:36.720 --> 00:24:40.520
In challenge response,
you've got a challenge and a response.

00:24:40.690 --> 00:24:43.350
GSS API, you may say,
I want mutual authentication,

00:24:43.360 --> 00:24:47.160
I want encryption, I want packet signing,
etc.

00:24:47.300 --> 00:24:50.590
You may have multiple steps going back
and forth between the client and server

00:24:50.590 --> 00:24:52.280
to negotiate all that information.

00:24:52.430 --> 00:24:53.880
So that's something to keep in mind.

00:24:53.940 --> 00:24:56.440
And you'll notice in the code here,
when I'm doing this auth,

00:24:56.480 --> 00:24:58.390
I'm actually in a loop.

00:25:00.700 --> 00:25:02.700
"I put a little documentation
dumping out things here,

00:25:02.700 --> 00:25:08.340
but you notice I would receive a token,
I do the auth, if I have to continue,

00:25:08.350 --> 00:25:11.510
I keep on going until
I get a final result."

00:25:14.670 --> 00:25:15.900
As I said,
I'm not going to demonstrate the

00:25:15.900 --> 00:25:18.600
GSS because that does require all
of our DNS and everything set up

00:25:18.600 --> 00:25:20.800
and we don't have that here today.

00:25:21.200 --> 00:25:22.680
So that's basically it.

00:25:22.740 --> 00:25:24.500
It's not super complicated.

00:25:24.550 --> 00:25:26.790
Our goal was to give you
something to start with,

00:25:26.930 --> 00:25:31.100
to look at, and to keep in mind,
and what we think you should be doing.

00:25:31.100 --> 00:25:35.050
Back to slides, please.

00:25:37.850 --> 00:25:39.500
All that make sense?

00:25:39.550 --> 00:25:43.480
For those that are coders?

00:25:43.650 --> 00:25:47.600
For more information,
obviously the website for the conference

00:25:47.600 --> 00:25:53.520
has all this sample code on it,
as well as SDKs for directory

00:25:53.520 --> 00:25:55.390
services and other APIs.

00:25:56.340 --> 00:25:57.200
Who you should contact?

00:25:57.320 --> 00:26:01.670
Obviously Skip Levens
is our contact for WWDR.