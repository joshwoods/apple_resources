WEBVTT

00:00:02.990 --> 00:00:07.100
My name is Ted Jucevic,
and we're going to be

00:00:07.180 --> 00:00:09.360
talking about Java today.

00:00:09.890 --> 00:00:14.440
So I'm one of your DTS engineers,
so if you send a DTS incident in,

00:00:14.440 --> 00:00:18.480
I'll be one of the ones who
would hopefully be helping you.

00:00:18.480 --> 00:00:21.760
And let's get this thing started.

00:00:22.320 --> 00:00:23.440
So why are you here?

00:00:23.450 --> 00:00:26.880
Well, of course,
Java 2 Standard Edition 5.0 is new

00:00:26.880 --> 00:00:29.830
to the platform and there's some
new configuration options on it.

00:00:29.890 --> 00:00:34.070
We're gonna talk about
deployment strategies,

00:00:34.090 --> 00:00:37.640
about some things we
recommend and don't recommend.

00:00:37.660 --> 00:00:42.300
We're gonna give some good
debugging tricks and tips.

00:00:42.300 --> 00:00:45.040
These are things that we found that,

00:00:45.100 --> 00:01:08.700
[Transcript missing]

00:01:09.660 --> 00:01:15.320
So, of course, Java on Mac OS 10.4.

00:01:17.160 --> 00:01:22.330
New with 10.4,
we actually include Java AI and Java 3D,

00:01:22.420 --> 00:01:25.550
so you don't have to worry about
making sure that's installed.

00:01:25.550 --> 00:01:28.720
If your users are using Tiger,
they have it.

00:01:28.780 --> 00:01:33.310
Of course,
we've got Java 1.4.2 and Java 1.3.1

00:01:33.310 --> 00:01:35.700
by default on every user's install.

00:01:35.700 --> 00:01:40.220
And then available as a download
is the Java 5 Standard Edition.

00:01:41.480 --> 00:01:44.650
The reason we have it as a
download is at this point,

00:01:44.680 --> 00:01:48.170
not everybody needs it,
and so we don't want everybody

00:01:48.170 --> 00:01:51.610
to have to download it over
software update over modem.

00:01:51.620 --> 00:01:56.000
But for those people who need it,
it's available to you and your customers.

00:01:58.680 --> 00:02:02.360
So of course we're going to
talk about Xcode in Java.

00:02:02.360 --> 00:02:05.880
It has all the features that you
guys have been asking for up to

00:02:05.880 --> 00:02:07.650
this point that we're aware of.

00:02:07.710 --> 00:02:11.830
Code completion, native interfaces,
source control management.

00:02:11.880 --> 00:02:16.100
It has the works and it'll take
care of you from start to finish

00:02:16.100 --> 00:02:20.870
when developing Java applications,
including JNI libraries.

00:02:21.170 --> 00:02:25.840
We're not going to lock you in,
we're cross-platform, it's Java,

00:02:25.920 --> 00:02:28.640
so there's tons of tools out there.

00:02:28.660 --> 00:02:35.740
NetBeans is a great one, Eclipse product,
Borland's JBuilder, IntelliJ,

00:02:35.740 --> 00:02:41.890
all your favorite toys and tools
are available for the platform.

00:02:43.200 --> 00:02:46.810
Of course, Eclipse 3.1,
we found that a lot of our

00:02:46.810 --> 00:02:49.170
developers are using it,
so we actually have a

00:02:49.170 --> 00:02:50.600
complete session on it.

00:02:50.640 --> 00:02:52.770
Go ahead and check it out.

00:02:52.800 --> 00:02:56.720
It's Friday at 5 p.m., so if
you're one of the diehards,

00:02:56.770 --> 00:03:00.300
stick around,
and it's going to be a great session.

00:03:03.940 --> 00:03:07.980
So, we of course,
we also got J2EE Strategy.

00:03:07.980 --> 00:03:11.520
It's bundled with every Mac OS X server.

00:03:11.520 --> 00:03:17.580
So, if you buy like a X server product,
you have JBoss, Patches, Tomcat,

00:03:17.690 --> 00:03:19.000
and Access.

00:03:19.000 --> 00:03:22.460
And of course,
there's also Xcode templates

00:03:22.530 --> 00:03:23.800
for doing deployment to that.

00:03:23.840 --> 00:03:28.140
Nice thing about it is these
are just standard open source

00:03:28.170 --> 00:03:29.960
installs of JBoss and Tomcat.

00:03:29.960 --> 00:03:32.360
So, if for some reason you don't
like the configuration,

00:03:32.360 --> 00:03:33.760
it's very easy for you to update.

00:03:33.760 --> 00:03:37.510
And then also, on your client machines,
if you want to do some testing

00:03:37.510 --> 00:03:41.500
and developing with them,
it's very easy just to

00:03:41.500 --> 00:03:46.360
install Tomcat and JBoss,
and you can get everything

00:03:46.550 --> 00:03:48.860
going even on a client machine.

00:03:51.100 --> 00:03:52.880
So what are we going to cover?

00:03:52.920 --> 00:03:58.680
Well, we're going to talk about
deploying your application,

00:03:58.680 --> 00:04:01.340
of course, like I just said.

00:04:01.410 --> 00:04:07.400
We're going to start out from the simple
jars and stuff to the custom deployment.

00:04:07.520 --> 00:04:11.010
Java Web Start has some really
cool features we'll talk about.

00:04:11.180 --> 00:04:14.420
We're going to talk about the debugging.

00:04:14.610 --> 00:04:18.040
We've run into some situations
where people kind of just get stuck

00:04:18.040 --> 00:04:19.420
when they get a hang and stuff.

00:04:19.420 --> 00:04:22.100
And so this is something that's
going to really tell you how to

00:04:22.140 --> 00:04:25.370
get the most information out of it,
figure out what it is,

00:04:25.430 --> 00:04:28.820
and if it turns out--
which rarely occurs,

00:04:28.820 --> 00:04:33.440
it's our issue-- how to write a
bug that will make sense to us and

00:04:33.540 --> 00:04:36.820
will give us all the tools we need
to actually fix it quickly and

00:04:36.820 --> 00:04:39.400
then get it in the next release,
hopefully.

00:04:39.400 --> 00:04:41.170
And then, of course,
we're going to talk about

00:04:41.230 --> 00:04:43.900
developing with Xcode.

00:04:44.110 --> 00:04:46.920
Like I said before,
with Java 2 Standard Edition 5.0,

00:04:46.920 --> 00:04:49.340
there's a few additional
things that you have to do.

00:04:49.340 --> 00:04:52.690
if you want to target that JVM.

00:04:53.230 --> 00:04:55.480
So with that,
let me bring up Scott Kovach,

00:04:55.480 --> 00:04:58.640
and he's going to introduce you
to our deployment strategies.

00:04:58.640 --> 00:05:03.010
Thank you, Scott.

00:05:05.650 --> 00:05:12.030
Okay, so here's what I'm gonna talk
about in this portion of the talk.

00:05:12.200 --> 00:05:16.410
We're gonna talk about what's available
to you for deployment on Mac OS X.

00:05:16.570 --> 00:05:18.500
We're going to talk about
what we've added in Tiger.

00:05:18.500 --> 00:05:22.860
We've added a few things,
and there's just improving our

00:05:22.860 --> 00:05:24.490
integration with the operating system.

00:05:24.750 --> 00:05:27.860
We're going to talk about how Java 5
will affect your deployment options.

00:05:27.900 --> 00:05:31.630
There are things you want to be aware
of if the end user decides to put

00:05:31.700 --> 00:05:33.860
Java 5 on their machine right now.

00:05:33.880 --> 00:05:36.800
And we'll talk about what you
need to be aware of for your work.

00:05:36.840 --> 00:05:41.760
And finally, transitions is a theme
at this year's WWDC.

00:05:41.760 --> 00:05:46.620
And there's a few things you'll
want to be aware of if you pick

00:05:46.630 --> 00:05:50.460
up one of the developer machines
that we offered this year.

00:05:50.460 --> 00:05:55.120
We'll talk about what you want to
know there and what were some of the

00:05:55.120 --> 00:05:59.060
deployment issues that are going to
be important to you down the road.

00:06:00.490 --> 00:06:04.880
So here are the choices that you've got
available to you right now on Mac OS X.

00:06:04.980 --> 00:06:08.000
The easiest thing you can
do is build a JAR file,

00:06:08.080 --> 00:06:12.690
either on the Mac or on Windows,
and put a main class entry

00:06:12.760 --> 00:06:15.290
in the JAR's manifest.

00:06:15.380 --> 00:06:17.300
If you do that,
when you double-click on the JAR,

00:06:17.300 --> 00:06:18.500
it'll look like an application.

00:06:18.500 --> 00:06:21.390
We'll launch it as if you did Java-JAR.

00:06:21.700 --> 00:06:40.800
[Transcript missing]

00:06:40.960 --> 00:06:42.900
If you want to take a little
bit more time and make your

00:06:43.040 --> 00:06:46.000
application integrate a little bit
better with the Mac OS X desktop,

00:06:46.000 --> 00:06:47.740
you can build a bundled application.

00:06:47.740 --> 00:06:52.270
We'll talk a little bit about that
later in the talk about building those,

00:06:52.270 --> 00:06:55.960
but basically a bundled application
has everything a Java app needs

00:06:55.960 --> 00:06:57.290
in one application bundle.

00:06:57.300 --> 00:07:00.420
Your JAR files, your resources,
and you can just double click on

00:07:00.540 --> 00:07:03.980
that and it'll be an application
like anything else on the X desktop.

00:07:05.270 --> 00:07:09.900
And finally,
Java Web Start is a great way to deploy

00:07:09.920 --> 00:07:15.060
across different platforms that have
different needs on different platforms.

00:07:15.080 --> 00:07:21.190
So say you have some native libraries
that you need to build for each platform,

00:07:21.190 --> 00:07:23.790
Web Start's a great way to
deploy using that because you

00:07:23.820 --> 00:07:25.190
can set it up for each platform.

00:07:25.200 --> 00:07:29.150
We'll briefly mention that later.

00:07:30.130 --> 00:07:33.520
And finally, we're not going to talk
about it in this session,

00:07:33.520 --> 00:07:35.960
we're going to talk about it this
afternoon on JNI development,

00:07:35.960 --> 00:07:40.060
but you can also build a custom launcher,
and that's for those of you who

00:07:40.060 --> 00:07:44.620
are writing C code that will
invoke the JVM yourself using JNI.

00:07:44.620 --> 00:07:46.560
We'll talk about that later today.

00:07:49.640 --> 00:07:53.240
So when you install Tiger,
there are a few things that you,

00:07:53.260 --> 00:07:56.170
you know,
what VM are you going to be using when

00:07:56.170 --> 00:07:58.680
it comes time to do your deployment?

00:07:58.750 --> 00:08:03.430
Well, just about by default,
you're going to use Java 1.4.2.

00:08:03.500 --> 00:08:07.220
And the first three examples I show here,

00:08:07.450 --> 00:08:12.640
If you do Java from the command line,
the default VM is 142, so Java-version,

00:08:12.640 --> 00:08:14.820
that's what you're going to get.

00:08:15.100 --> 00:08:17.960
is a great example of how
to use Java Web Start.

00:08:18.000 --> 00:08:22.000
If you double click on a jar, again,
that's roughly the equivalent of

00:08:22.000 --> 00:08:26.000
doing Java-Jar from the command line,
so again, that's 142.

00:08:26.300 --> 00:08:30.000
WebKit, which is, of course,
what is used inside Safari,

00:08:30.000 --> 00:08:34.000
always uses 142 by default.

00:08:34.000 --> 00:08:37.000
And for a Web Start application,
you get to pick.

00:08:37.000 --> 00:08:40.000
Part of the JNLP specification
lets you pick the VM.

00:08:40.000 --> 00:08:44.180
You could pick 142 or 131 if you need it,

00:08:44.700 --> 00:09:07.000
[Transcript missing]

00:09:08.110 --> 00:09:10.700
So let's talk about Java 5.0.

00:09:10.820 --> 00:09:13.880
Well, when the user installs that,
what happens?

00:09:13.930 --> 00:09:16.740
Okay, generally you don't like to
read out of these things,

00:09:16.790 --> 00:09:19.200
but there's actually a pretty
important line in the release

00:09:19.200 --> 00:09:20.940
notes that bears repeating here.

00:09:21.010 --> 00:09:25.870
Java 1.4.2 remains the current
JDK after Java 5 is installed.

00:09:25.950 --> 00:09:27.160
So what does that mean?

00:09:27.200 --> 00:09:30.680
Well, what that means is when
you type java-version,

00:09:30.700 --> 00:09:33.000
it's still gonna say 1.4.2.

00:09:33.040 --> 00:09:35.740
That does not mean that you
cannot use 1.5.0 for your

00:09:35.820 --> 00:09:37.820
applications or for your deployment.

00:09:37.850 --> 00:09:40.710
If you want 1.5.0, you gotta ask for it.

00:09:40.750 --> 00:09:42.870
You can ask for it in Web Start.

00:09:42.960 --> 00:09:44.750
You can ask for it in
a bundled application.

00:09:44.760 --> 00:09:47.900
You just say 1.5.0 for the JVM version.

00:09:48.630 --> 00:09:50.870
Now,

00:09:52.600 --> 00:09:57.220
Customer can make Java 5.0
their preferred JVM.

00:09:57.220 --> 00:09:59.520
What does a preferred JVM mean?

00:09:59.540 --> 00:10:04.120
Well, I'm gonna show you in the next
demonstration exactly what it means

00:10:04.120 --> 00:10:07.290
from a practical point of view,
but basically what it says is that if

00:10:07.290 --> 00:10:14.240
you choose a JVM version that basically
says I can work with a JVM version

00:10:14.240 --> 00:10:18.100
or later using the plus notation,
you cannot automatically assume

00:10:18.100 --> 00:10:19.780
that Java 5 will be used.

00:10:19.780 --> 00:10:21.630
And we'll show what that
means here in just a moment.

00:10:21.840 --> 00:10:25.810
So how does this information then
change the chart I just showed you?

00:10:26.240 --> 00:10:30.400
Well, again, for the command line,
nothing changed at all.

00:10:30.470 --> 00:10:36.460
For Java-based applications and applets,
we'll pick the preferred JVM.

00:10:36.710 --> 00:10:40.330
We'll pick what the user has chosen
for the VM that they want to use to run

00:10:40.330 --> 00:10:46.020
applets and what they consider their
preferred VM for application deployment.

00:10:46.060 --> 00:10:48.950
Now, for Web Start and applications,
again, nothing's changed.

00:10:49.070 --> 00:10:53.410
We'll pick the VM that you specify,
and that's pretty important.

00:10:55.450 --> 00:10:58.790
If you want 150, you've done the testing,
and you decide that's what you need,

00:10:59.230 --> 00:11:01.410
ask for it, we'll use it.

00:11:03.340 --> 00:11:07.000
So sort of to explain what's going
on here and sort of give you a visual

00:11:07.000 --> 00:11:11.180
example of what I just talked about,
let's go over here to the demo machine.

00:11:11.210 --> 00:11:15.070
And what I'm gonna do is
show you a little bit of

00:11:15.070 --> 00:11:18.590
Java Preferences application.

00:11:18.760 --> 00:11:23.810
and show you what that's going to mean
when it comes time to run an application.

00:11:24.430 --> 00:11:27.190
So for this part of the demonstration,
I'm gonna focus down here on the

00:11:27.190 --> 00:11:29.100
Java Application runtime settings.

00:11:29.100 --> 00:11:34.630
As you can see, 142 is the listed first,
because again, it's the default.

00:11:35.420 --> 00:11:38.500
So let's go over here with a
small application I've written.

00:11:38.530 --> 00:11:40.870
You don't have this in the sample
code for this session because,

00:11:40.940 --> 00:11:42.770
quite frankly,
it's not all that interesting.

00:11:42.810 --> 00:11:45.700
It's a basic Java application.

00:11:46.210 --> 00:11:52.490
and all it's going to do is draw the
value of Java.version on the screen.

00:11:53.200 --> 00:11:55.240
and the other interesting
thing for this particular

00:11:55.240 --> 00:12:00.070
application is that over here in

00:12:00.430 --> 00:12:02.500
and I have one for plus.

00:12:02.500 --> 00:12:06.990
Recall that one for plus
means that I'll use the latest

00:12:07.010 --> 00:12:10.250
VM starting with at least 1.4.

00:12:10.280 --> 00:12:14.950
When you install 1.5,
the meaning is follow the

00:12:15.350 --> 00:12:17.560
user's preferences as well.

00:12:17.560 --> 00:12:20.680
So let's run this application.

00:12:23.900 --> 00:12:27.900
Let me see that I've used one four plus,
and it says one four two oh seven.

00:12:27.900 --> 00:12:37.240
So now we'll quit that and we'll change
the order and put J2SC5O at the front,

00:12:37.260 --> 00:12:38.480
run the same application.

00:12:38.500 --> 00:12:44.370
Oh, you're right,
I forgot to say the settings.

00:12:48.900 --> 00:12:49.900
is running it again.

00:12:49.900 --> 00:12:52.670
There we go.

00:12:52.900 --> 00:12:56.380
Java 5 is now being used as the VM.

00:12:57.130 --> 00:12:59.890
So,
if you want to get around this problem,

00:12:59.960 --> 00:13:02.280
because now you're saying, well, hey,
I don't know what the user's done.

00:13:02.280 --> 00:13:07.140
Well, I can fix that by saying 1.4 star.

00:13:10.700 --> 00:13:24.200
[Transcript missing]

00:13:33.120 --> 00:13:33.910
Okay, let's go back to the slides.

00:13:33.940 --> 00:13:41.260
All right, let's talk about very quickly
what I just showed you.

00:13:41.280 --> 00:13:45.150
The important real estate you want to
understand in Java preferences is that

00:13:45.180 --> 00:13:46.680
Java Application Runtime Settings.

00:13:46.700 --> 00:13:49.730
That's where the end user is
going to be able to pick right

00:13:49.730 --> 00:13:52.950
now what their preferred VM is
for running Java applications.

00:13:52.960 --> 00:13:57.220
You want to recognize the trade-offs
that are involved when you pick a

00:13:57.300 --> 00:13:59.680
JVM version for your application.

00:13:59.680 --> 00:14:01.670
Plus is forward-looking.

00:14:02.290 --> 00:14:06.190
Plus means that I am absolutely
certain that every version of

00:14:06.300 --> 00:14:08.880
Java that Apple releases is going
to work with my application.

00:14:08.880 --> 00:14:11.450
Maybe that's the right thing.

00:14:11.460 --> 00:14:13.260
Maybe that is the case.

00:14:13.260 --> 00:14:14.370
All right.

00:14:16.300 --> 00:14:41.000
[Transcript missing]

00:14:42.010 --> 00:14:45.400
We want to discourage you
from using a specific version.

00:14:45.600 --> 00:14:49.320
Get out of the habit of using
142 for your VM version.

00:14:50.100 --> 00:15:14.700
[Transcript missing]

00:15:18.300 --> 00:15:21.570
We're going to switch and talk
about Applets and Web Start.

00:15:21.570 --> 00:15:25.060
In Tiger, we have two versions available
for Applet deployment.

00:15:25.330 --> 00:15:28.770
14207,
and I'm calling out the 07 because that's

00:15:28.860 --> 00:15:30.920
actually important for some people.

00:15:30.920 --> 00:15:33.700
We try to keep up with the
latest versions from Sun,

00:15:33.700 --> 00:15:37.710
but sometimes it doesn't always mesh
with our release schedule as well.

00:15:37.710 --> 00:15:40.790
So 14207 is what made it into Tiger.

00:15:41.810 --> 00:15:46.950
If we install 150,
it's specifically 15002.

00:15:47.140 --> 00:15:49.560
I believe 03 came out about
three days before we shipped,

00:15:49.610 --> 00:15:51.210
so that's why we didn't make it.

00:15:51.810 --> 00:15:54.170
We've improved the
integration with the keychain.

00:15:54.350 --> 00:15:59.520
The keychain is now the place to
go for your certificate storage

00:15:59.570 --> 00:16:03.310
when deploying a signed Applet and
a signed Web Start application.

00:16:03.310 --> 00:16:05.720
We'll show you that in a few minutes.

00:16:06.600 --> 00:16:29.800
[Transcript missing]

00:16:30.620 --> 00:16:34.250
One of the problems with, well,
not a problem,

00:16:34.250 --> 00:16:37.570
but one of the things that can
happen when you install 150 is,

00:16:37.620 --> 00:16:39.500
remember,
the user gets to pick which VM they

00:16:39.500 --> 00:16:40.850
want to use to launch Applets.

00:16:40.920 --> 00:16:43.760
So this proposes a problem.

00:16:43.760 --> 00:16:46.180
You know,
what do I do if I want to take advantage

00:16:46.230 --> 00:16:48.260
of some 15 features in Applets?

00:16:49.600 --> 00:17:05.200
[Transcript missing]

00:17:15.390 --> 00:17:20.490
I've created an applet that
the code of which is not,

00:17:20.660 --> 00:17:22.920
you know,
it's not all that useful an applet,

00:17:22.920 --> 00:17:25.090
but it's going to demonstrate a point.

00:17:25.300 --> 00:17:47.500
[Transcript missing]

00:17:51.200 --> 00:17:54.690
So we build and run, and Safari loads.

00:17:54.770 --> 00:17:58.780
And what I've done for this
demonstration and for what you have

00:17:58.790 --> 00:18:02.840
in your sample code is I've used
the AntBase signed applet template.

00:18:02.880 --> 00:18:06.340
And what I've done is we've
automatically built a signed applet,

00:18:06.340 --> 00:18:08.090
and I want to show you some
of the -- very briefly,

00:18:08.100 --> 00:18:11.700
some of the new features
for certificate management.

00:18:11.780 --> 00:18:15.540
I can show the certificate,
and we've got a much better-looking

00:18:15.640 --> 00:18:19.560
certificate -- dialogue
than we've had in the past.

00:18:19.610 --> 00:18:22.110
So that's one nice feature of it.

00:18:22.320 --> 00:18:25.290
Get a lot more information
about the certificate than

00:18:25.360 --> 00:18:26.730
we could provide in the past.

00:18:26.790 --> 00:18:28.880
And we've got this checkbox here,
Always Trust.

00:18:28.920 --> 00:18:31.900
And when I check that,
the certificate gets added to

00:18:31.900 --> 00:18:34.990
the current user's keychain,
and it's always there.

00:18:35.040 --> 00:18:39.220
And you can now go to Keychain
Access and manage whether you

00:18:39.220 --> 00:18:42.510
want to trust that certificate,
delete it, whatever,

00:18:42.680 --> 00:18:46.020
using a standard Apple tool
instead of this separate Java world

00:18:46.150 --> 00:18:48.420
thing that Sun has provided.

00:18:48.420 --> 00:18:50.600
So,

00:18:50.900 --> 00:19:10.400
[Transcript missing]

00:19:10.850 --> 00:19:15.410
I am an ambitious person,
and I decide that, hey,

00:19:15.440 --> 00:19:18.900
there's some cool 1.5 features
that I like to use for my applet.

00:19:18.920 --> 00:19:21.610
Well, let's take a look at that.

00:19:25.030 --> 00:19:27.850
One of the other things in this
demonstration and the sample code you

00:19:27.850 --> 00:19:32.280
get is that I've added the changes
you need to get Ant to use Java 1.5.

00:19:32.300 --> 00:19:32.930
It's actually not hard.

00:19:32.940 --> 00:19:35.850
There's about four more lines of code,
or four more lines you need

00:19:35.850 --> 00:19:37.700
to add to your build.xml.

00:19:37.700 --> 00:19:39.890
But once you do,
you can have an Ant-based

00:19:39.890 --> 00:19:41.470
build that uses 1.5.

00:19:41.470 --> 00:19:44.230
So you want to take a look
at that in your samples.

00:19:47.160 --> 00:19:52.490
So the difference here is that I am using
these new pointer info and mouse info

00:19:52.620 --> 00:19:55.480
classes that are available only in 1.5.

00:19:55.900 --> 00:20:16.500
[Transcript missing]

00:20:18.000 --> 00:20:30.000
[Transcript missing]

00:20:30.470 --> 00:20:31.550
So how are we going to deal with that?

00:20:31.570 --> 00:20:36.350
Well, just to show you that it does work,
we'll quickly switch.

00:20:41.100 --> 00:20:44.140
And we see that 1.5 did load,
and now the mouse is running around.

00:20:44.140 --> 00:20:45.540
I even know, oh, it went in the menu bar.

00:20:45.540 --> 00:20:46.700
That's neat.

00:20:46.700 --> 00:20:47.900
It goes anywhere on the screen.

00:20:47.900 --> 00:20:48.950
I can track it.

00:20:48.960 --> 00:20:51.270
Yeah, all well and good.

00:20:52.070 --> 00:20:53.240
Well, now what?

00:20:53.280 --> 00:20:57.600
Well,
one thing we've added in Tiger is that

00:20:59.900 --> 00:21:18.200
[Transcript missing]

00:21:19.000 --> 00:21:21.940
is the head of the
Java Development and Development team.

00:21:21.940 --> 00:21:25.930
He's the director of the
Java Development and Development team.

00:21:27.500 --> 00:21:49.300
[Transcript missing]

00:21:50.970 --> 00:21:55.010
and if I don't find either one,
because it is possible to, you know,

00:21:55.020 --> 00:21:57.740
really whack your system
and make Java unavailable,

00:21:57.760 --> 00:21:59.720
I'll put up something
intelligent that says,

00:21:59.720 --> 00:22:02.410
you know, you don't have Java,
we're sort of out of luck.

00:22:02.470 --> 00:22:11.940
So here I have 5.0, so I'll run this,
run this version of my applet, and see,

00:22:11.940 --> 00:22:20.140
yes, there it works in 1.5,
and the same applet,

00:22:26.500 --> 00:22:28.330
also loads and runs in 1.4.

00:22:28.330 --> 00:22:34.240
So I got one applet, one deployment,
and I've switched VMs, everything's good.

00:22:34.580 --> 00:22:37.730
So take this example back with you,
and now you can be able to cope

00:22:37.730 --> 00:22:40.580
with whatever the user's chosen.

00:22:40.590 --> 00:22:42.010
And it's not a perfect example.

00:22:42.050 --> 00:22:43.280
I don't check for Safari.

00:22:43.280 --> 00:22:45.880
I don't check for WebKit,
anything like that.

00:22:45.920 --> 00:22:48.820
But it gets the point across that
now there's a way that you can detect

00:22:48.820 --> 00:22:53.180
what version of Java is in the browser
without actually launching Java,

00:22:53.220 --> 00:22:54.320
which is a good thing.

00:22:54.320 --> 00:22:58.280
All right.

00:22:58.300 --> 00:23:04.060
And with that,
we'll head back to the slides.

00:23:12.470 --> 00:23:15.060
Let's talk a little bit
about Java Web Start.

00:23:15.300 --> 00:23:17.110
The slide's pretty short,
'cause there's not a whole lot new

00:23:17.110 --> 00:23:19.670
going on with Web Start and Tiger.

00:23:19.750 --> 00:23:24.710
It is 1.4.2.0.7, as installed with the
same version of Java.

00:23:24.720 --> 00:23:30.120
Java 5 installs something
called Java Cache Viewer.

00:23:30.390 --> 00:23:34.620
This goes into Applications, Utilities,
Java, J2SE 5.0.

00:23:34.650 --> 00:23:39.260
And what that basically
is is Web Start 1.5.

00:23:39.290 --> 00:23:42.320
It conforms to a new version
of the JNLP specification,

00:23:42.320 --> 00:23:44.000
which you can get from Sun.

00:23:44.020 --> 00:23:49.000
Lot of new things in that that
we've been adding things to 1.5,

00:23:49.100 --> 00:23:52.690
and we're trying to keep
up with Sun as best we can.

00:23:52.920 --> 00:23:57.300
There's some new features in
that I wanna talk to you about.

00:23:57.330 --> 00:24:00.810
What Sun did is they refactored a good
portion of the plugin in Web Start.

00:24:00.870 --> 00:24:05.520
So now, you saw that signed
applet certificate dialog.

00:24:05.920 --> 00:24:08.250
You'll get one of those in
Web Start as well if you deploy a

00:24:08.250 --> 00:24:10.420
signed application in Web Start.

00:24:10.450 --> 00:24:12.240
This is actually a big thing for a while.

00:24:12.240 --> 00:24:14.380
So we're very happy to have it now.

00:24:14.400 --> 00:24:16.760
Lot of enterprise enhancements.

00:24:16.850 --> 00:24:20.470
There are ways you can set up
one configuration for your entire

00:24:20.480 --> 00:24:22.540
organization via Web Start.

00:24:22.570 --> 00:24:26.940
HTTPS client authentication
is a new way to guarantee,

00:24:27.160 --> 00:24:32.070
make sure you know who's
running your application.

00:24:32.470 --> 00:24:34.480
One of the big ones is
PAC 200 compression.

00:24:34.480 --> 00:24:36.660
And if you haven't heard
about this or looked into it,

00:24:36.660 --> 00:24:37.900
I strongly suggest you do so.

00:24:37.920 --> 00:24:41.100
You can get an 8 to 1 compression
ratio on your jar files.

00:24:41.100 --> 00:24:46.690
If you have a megabyte of jar code,
125K downloads.

00:24:46.760 --> 00:24:49.170
Now, and that scales up.

00:24:49.280 --> 00:24:53.080
I mean, you know,
we've tested some applets in the area of,

00:24:53.080 --> 00:24:55.060
with 20 megabytes of jar files.

00:24:55.060 --> 00:24:59.800
And if they ran it through PAC 200
and set up their server correctly,

00:24:59.800 --> 00:25:02.620
you can have a really big
win for downloading data,

00:25:02.620 --> 00:25:04.960
or for downloading the
code for your applets,

00:25:04.960 --> 00:25:06.280
or your Web Start app, for that matter.

00:25:08.120 --> 00:25:12.350
is the developer of Web Start,
and he's going to talk about how to use

00:25:12.350 --> 00:25:14.990
Web Start to deploy Java Application.

00:25:15.000 --> 00:25:17.000
Finally, there's an import facility,
which is interesting.

00:25:17.000 --> 00:25:19.000
You could pre-import a
Web Start application

00:25:19.140 --> 00:25:20.910
into the user's cache.

00:25:21.000 --> 00:25:23.260
And again,
that sort of gets around the whole

00:25:23.410 --> 00:25:26.000
20 megabyte download problem.

00:25:26.000 --> 00:25:28.000
So these are good things in Web Start.

00:25:28.220 --> 00:25:30.000
All these work on Mac OS X.

00:25:30.130 --> 00:25:35.000
Everything you see on
this slide works on OS X.

00:25:37.200 --> 00:25:39.560
Very briefly, I said we're not going to
talk about custom launchers,

00:25:39.560 --> 00:25:41.940
but we're talking about
deployment in Java 5 here,

00:25:41.940 --> 00:25:43.240
so I want to mention it very briefly.

00:25:43.240 --> 00:25:47.980
If your app is using
JNI to load a VM yourself,

00:25:48.220 --> 00:25:49.620
you can pick 1.5.

00:25:49.710 --> 00:25:55.080
All you have to do is add the set info,
Java JVM version, 1.5,

00:25:55.080 --> 00:25:59.610
and that will tell JNI and VM, use 1.5.

00:26:02.230 --> 00:26:07.000
This last point sounds a little mean,
but we think we've got a lot of good

00:26:07.000 --> 00:26:09.350
deployment technologies on OS X.

00:26:09.430 --> 00:26:15.900
So, you know, ask yourself if you really
need to use a custom launcher.

00:26:15.930 --> 00:26:18.560
We realize there are a lot of you that,
yeah, that you do have a really good

00:26:18.560 --> 00:26:20.360
reason to use a custom launcher.

00:26:20.410 --> 00:26:21.950
But if you don't have to,
look at bundling an

00:26:21.950 --> 00:26:22.990
application or Web Start.

00:26:23.000 --> 00:26:25.300
That's really the best way to go.

00:26:27.380 --> 00:26:28.830
Okay, transitions.

00:26:28.840 --> 00:26:35.680
Good news for you is that if you
wrote a pure Java application,

00:26:35.690 --> 00:26:37.000
you're done.

00:26:37.000 --> 00:26:38.320
I mean, Steve Jobs was right.

00:26:38.360 --> 00:26:39.160
You are done.

00:26:39.160 --> 00:26:43.420
Not that I would argue with
Steve Jobs on something like that,

00:26:43.420 --> 00:26:43.420
but.

00:26:45.170 --> 00:26:46.300
But there are things you want to know.

00:26:46.460 --> 00:26:50.430
It does just work,
with a few caveats that we mentioned in

00:26:50.440 --> 00:26:52.900
the Java overview session on Tuesday.

00:26:53.780 --> 00:27:00.990
The stub that is built into a bundled
application is currently not universal.

00:27:01.230 --> 00:27:06.020
is the developer of
Java Application Services,

00:27:06.020 --> 00:27:12.740
and he's going to talk about how
to use Java Application Services to

00:27:12.740 --> 00:27:16.580
debug Java Application Services.

00:27:16.880 --> 00:27:18.910
So for the best performance
for your application,

00:27:18.910 --> 00:27:20.660
you want to rebundle or
rebuild your application.

00:27:20.680 --> 00:27:22.830
It takes no time to do.

00:27:22.840 --> 00:27:25.320
You just do a clean build in
Xcode if that's what you're using.

00:27:25.320 --> 00:27:28.400
Or if you're using Jar Bundler,
just rebundle your application.

00:27:28.420 --> 00:27:31.940
Take, what,
two minutes to do any of these things.

00:27:33.700 --> 00:27:36.030
Another important fact is
that if an application,

00:27:36.050 --> 00:27:39.690
a Java application,
or your C-based application

00:27:39.690 --> 00:27:42.440
is loaded in Rosetta,
you cannot use the Java VM.

00:27:42.440 --> 00:27:45.770
You cannot load the VM.

00:27:45.780 --> 00:27:47.220
JNI will fail to load the VM.

00:27:47.220 --> 00:27:53.820
If you are trying to load the plugin,
that will also fail silently as well.

00:27:54.430 --> 00:27:59.400
So, you know, the answer there is,
build a universal application,

00:27:59.410 --> 00:28:01.310
you'll get to use Java.

00:28:01.570 --> 00:28:07.060
And finally, there is no 131 on an
Intel-based machine.

00:28:07.600 --> 00:28:25.800
[Transcript missing]

00:28:28.800 --> 00:29:11.400
[Transcript missing]

00:29:14.440 --> 00:29:22.690
will be talking about the development
of Java and Java's compatibility.

00:29:22.690 --> 00:29:23.800
We will be looking at that and hopefully
taking care of it by the time we,

00:29:23.800 --> 00:29:23.800
in a future release.

00:29:23.800 --> 00:29:23.800
And with that,
I'll take it over to Mike McDougall,

00:29:23.800 --> 00:29:23.800
who's going to talk about debugging.

00:29:26.900 --> 00:29:46.400
[Transcript missing]

00:29:48.800 --> 00:29:51.200
All right,
so the first thing we're going to

00:29:51.210 --> 00:29:55.130
cover today is sort of what to do when
you encounter one of these things.

00:29:55.210 --> 00:29:59.010
There's some real basic tricks and
tips and things that you should have

00:29:59.010 --> 00:30:01.280
in your pocket when you encounter this.

00:30:01.290 --> 00:30:04.380
We're going to cover the two
most high-level problems.

00:30:04.510 --> 00:30:06.930
We're going to talk
about hangs and crashes.

00:30:07.070 --> 00:30:10.980
We're going to go to two tools for
dealing most specifically with hangs.

00:30:10.980 --> 00:30:14.160
We're going to really get hands-on,
so get your portables

00:30:14.160 --> 00:30:16.110
out if they're not out.

00:30:16.270 --> 00:30:19.720
We're going to talk about crashes,
then we're going to go

00:30:19.720 --> 00:30:21.260
into some more tools.

00:30:21.260 --> 00:30:22.140
So, hangs and crashes.

00:30:22.450 --> 00:30:26.170
Why is my cursor spinning?

00:30:26.700 --> 00:30:38.400
[Transcript missing]

00:30:39.300 --> 00:30:56.700
[Transcript missing]

00:30:58.500 --> 00:31:10.500
[Transcript missing]

00:31:11.200 --> 00:31:25.700
[Transcript missing]

00:31:26.290 --> 00:31:29.530
So, going to hangs first of all.

00:31:29.620 --> 00:31:31.790
When you're hung,
really what you need to do is you

00:31:31.790 --> 00:31:33.030
need to start looking at threads.

00:31:33.030 --> 00:31:36.270
In Java, you know,
threads are pretty cheap.

00:31:36.400 --> 00:31:37.820
You sort of spit them out like candy.

00:31:38.680 --> 00:31:42.170
So, we're going to go over kill-quit.

00:31:42.290 --> 00:31:44.920
Kill-quit is a, so, kill.

00:31:44.920 --> 00:31:49.780
Kill is a Unix inter-process
communication command,

00:31:49.930 --> 00:31:51.820
signal handling.

00:31:51.820 --> 00:31:56.480
And in Java,
we've put a signal handle in there.

00:31:56.480 --> 00:31:59.810
It's waiting for this quit,
it's like number three of the signals.

00:31:59.820 --> 00:32:02.720
And that's sort of a clue
that the VM interprets to say,

00:32:02.900 --> 00:32:05.190
hey,
sort of stick out your tongue and say,

00:32:05.190 --> 00:32:07.050
ah, tell me what's going on.

00:32:07.700 --> 00:32:11.270
And so, actually, just so I know sort
of who I'm talking to,

00:32:11.310 --> 00:32:14.280
how many of you folks have
had your application hang

00:32:14.390 --> 00:32:16.110
and have typed kill-quit?

00:32:17.400 --> 00:32:44.700
[Transcript missing]

00:32:44.880 --> 00:32:48.350
On the native side,
there's two halves of every Java thread.

00:32:48.370 --> 00:32:50.330
There's the Java half,
which as Java developers

00:32:50.340 --> 00:32:51.580
you'll be real familiar with.

00:32:51.690 --> 00:32:55.490
Maybe a little less you'll be familiar
with is every one of those threads has

00:32:55.510 --> 00:32:59.180
a native side where all the JNI and
Cocoa and underlying stuff goes.

00:32:59.180 --> 00:33:01.840
So I'm going to talk to you about Sample.

00:33:01.840 --> 00:33:06.180
It's got a lot of friends that, you know,
GDB or Activity Monitor,

00:33:06.390 --> 00:33:08.730
but I'm going to talk about Sample.

00:33:09.170 --> 00:33:12.140
So, again, same thread.

00:33:12.180 --> 00:33:13.370
This is looking for clues.

00:33:13.400 --> 00:33:16.770
How many of you folks
have run the console app?

00:33:17.150 --> 00:33:31.810
is an expert on
Java application development.

00:33:31.810 --> 00:33:31.810
He's been working with
us for a long time.

00:33:31.810 --> 00:33:31.810
He's been working with
us for a long time.

00:33:31.810 --> 00:33:31.810
He's been working with
us for a long time.

00:33:32.590 --> 00:33:35.780
So, we'll bring up the
spinning cursor of death,

00:33:35.820 --> 00:33:38.040
so that those of you
who have your portables,

00:33:38.040 --> 00:33:41.000
we're going to go hands-on very soon,
but you should get your portables out.

00:33:41.160 --> 00:33:43.730
There's a sample code.

00:33:43.730 --> 00:33:46.280
If you don't have the sample code,
still get your portables out.

00:33:46.480 --> 00:33:47.250
Fire up Xcode.

00:33:47.260 --> 00:33:51.020
Xcode is in developer applications.

00:33:51.020 --> 00:33:52.520
Xcode.

00:33:52.520 --> 00:33:53.640
So fire it up.

00:33:54.710 --> 00:33:57.320
If you have the sample code,
get the sample code out,

00:33:57.540 --> 00:34:02.400
launch the disk image,
go to blocked event queue, .dmg,

00:34:02.480 --> 00:34:07.460
launch that, and then make a copy of
that onto your desktop,

00:34:07.460 --> 00:34:08.520
so you want to be able to modify that.

00:34:08.660 --> 00:34:11.820
So I'm going to sort of stare at the
spinning cursor of death with the rest of

00:34:11.820 --> 00:34:15.420
the audience until somebody tells me that
they have sort of Xcode up and running,

00:34:15.420 --> 00:34:17.500
and it's ready to go along with me here.

00:34:17.500 --> 00:34:20.460
We got one, two, okay, so Xcode's up.

00:34:20.590 --> 00:34:22.330
So for those of you who
are doing the sample code,

00:34:22.330 --> 00:34:23.490
get the sample code going.

00:34:23.500 --> 00:34:30.950
For, for the rest of you,
go to the file menu and say new project.

00:34:30.950 --> 00:34:34.450
New project,
and then go down into the Java section

00:34:34.450 --> 00:34:39.220
and build yourself a swing application.

00:34:39.220 --> 00:34:41.630
It's like,
I've timed this on my portable,

00:34:41.630 --> 00:34:44.760
which is really slow,
and it's only about 45 seconds

00:34:44.760 --> 00:34:47.830
to get yourself a swing
application up and running.

00:35:04.430 --> 00:35:04.430
So, people following along
with the sample code.

00:35:04.430 --> 00:35:04.430
Anyone who's got the sample code up?

00:35:04.430 --> 00:35:04.430
Great.

00:35:04.430 --> 00:35:04.430
Okay, so I'm going to go to demo one,
where I've got my sample code.

00:35:04.430 --> 00:35:04.430
Now, let's see.

00:35:08.050 --> 00:35:14.570
Now, some of you folks, this is in,
I wrote this in Xcode 2.0,

00:35:14.570 --> 00:35:17.180
and a lot of you folks have got 2.1.

00:35:17.280 --> 00:35:19.540
So you're going to
actually need to press,

00:35:19.640 --> 00:35:22.500
after you copy it onto your
desktop so you can modify it,

00:35:22.550 --> 00:35:29.180
you're going to have to say yes,
convert to the new Xcode format.

00:35:29.750 --> 00:35:32.110
and then you'll be able
to build and go like me.

00:35:32.200 --> 00:35:36.620
So this is a fatally flawed application.

00:35:36.620 --> 00:35:37.860
That's also not very complicated.

00:35:37.860 --> 00:35:38.680
It's got two bits.

00:35:38.720 --> 00:35:40.380
It's got a panel.

00:35:40.900 --> 00:36:11.500
[Transcript missing]

00:36:13.230 --> 00:36:15.070
Hey, what's going on here?

00:36:15.070 --> 00:36:17.210
I've got the one that's fixed.

00:36:17.390 --> 00:36:18.850
You all should be hung.

00:36:18.850 --> 00:36:19.380
Okay.

00:36:19.390 --> 00:36:21.100
Anybody out there hung?

00:36:21.100 --> 00:36:21.710
Great.

00:36:21.810 --> 00:36:22.050
Okay.

00:36:22.350 --> 00:36:26.160
So anybody out there got a
swing application and running?

00:36:26.160 --> 00:36:28.810
So these things that
I'm going to show you,

00:36:29.140 --> 00:36:30.470
you don't have to be hung.

00:36:30.850 --> 00:36:31.930
It sort of helps.

00:36:31.930 --> 00:36:36.740
Let's go to the terminal where sort
of God intended programmers to work.

00:36:36.740 --> 00:36:39.120
Terminal is in the utilities folder.

00:36:39.300 --> 00:36:41.620
Come on, utilities.

00:36:42.400 --> 00:36:44.040
Oh, now I'm hung.

00:36:47.070 --> 00:36:48.990
- Please demo gods, have mercy.

00:36:49.080 --> 00:36:51.530
What's going on here?

00:36:51.540 --> 00:36:54.920
I'm going to a fire where I drive.

00:36:54.920 --> 00:36:57.920
Okay, I'm gonna talk through this,
because you don't, you don't,

00:36:57.920 --> 00:37:00.340
I don't have to see it
to explain it to you.

00:37:00.360 --> 00:37:03.060
So, the terminal should come up.

00:37:06.610 --> 00:37:07.860
It just, so the thing woke up.

00:37:07.970 --> 00:37:08.500
Thank you, folks.

00:37:08.500 --> 00:37:10.610
God.

00:37:10.660 --> 00:37:11.840
No, it hasn't.

00:37:14.190 --> 00:37:16.810
So the first thing you want to
do to use these two techniques,

00:37:16.810 --> 00:37:18.210
we're going to talk
about kill-quit-sample,

00:37:18.230 --> 00:37:21.590
you're going to do them in Unix.

00:37:21.900 --> 00:37:25.810
And so what you want to do is run top,
T-O-P.

00:37:26.390 --> 00:37:30.400
and you want to find the process
ID of the thing that's hung.

00:37:30.410 --> 00:37:35.320
Now, if you're running a--

00:37:35.710 --> 00:37:43.110
is the developer of Java,
and he's going to be talking about

00:37:43.590 --> 00:37:47.820
how to use Java to debug Java.

00:37:48.600 --> 00:37:50.400
and Quit.

00:37:50.420 --> 00:37:53.710
Now, type kill - quit

00:37:54.710 --> 00:37:56.160
and the Process ID.

00:37:56.180 --> 00:38:00.650
I want you all to do this
because it's sort of like--

00:38:02.100 --> 00:38:06.260
- It's your fingers should
know how to do this.

00:38:06.260 --> 00:38:11.490
It's one thing to hear a person
on stage say kill dash quit,

00:38:11.490 --> 00:38:15.980
but I really want your
fingers to have done this.

00:38:15.980 --> 00:38:18.190
So who's got kill dash,
they've quit there,

00:38:18.190 --> 00:38:18.190
so folks are following along, good.

00:38:18.190 --> 00:38:18.190
So once you do that,
Java sort of sticks out its tongue, says,

00:38:18.190 --> 00:38:18.190
"Ah, what's going on?"

00:38:18.200 --> 00:39:09.900
[Transcript missing]

00:39:10.310 --> 00:39:13.240
If you're running in Tiger and
you've got 5.0 installed,

00:39:13.530 --> 00:39:16.200
kill-quit is really great because
if you have a classic deadlock,

00:39:16.280 --> 00:39:20.340
right at the bottom, it's going to say,
you have a classic deadlock.

00:39:20.420 --> 00:39:23.180
And it's going to tell you
the two objects that the

00:39:23.550 --> 00:39:26.020
deadlock has occurred with.

00:39:26.060 --> 00:39:29.400
So for those of you who have
ever tried to parse through

00:39:29.460 --> 00:39:32.750
threads finding a deadlock,
5.0 is really great because we

00:39:32.810 --> 00:39:34.170
actually hand you the information.

00:39:34.180 --> 00:39:38.800
Now, everyone can look down again,
find the event queue.

00:39:40.200 --> 00:39:43.400
The event queue is really
the workhorse of Java.

00:39:43.400 --> 00:39:47.990
And generally speaking, if you're hung,
you're going to be able to look

00:39:47.990 --> 00:39:50.410
right at the event queue and
find out where the problem is.

00:39:50.420 --> 00:39:53.310
Now, I'm not hung, but you are.

00:39:53.340 --> 00:39:56.460
So at the very top,
you've got a little thunk of code,

00:39:56.460 --> 00:39:58.700
which is just Java saying, how do I wait?

00:39:58.700 --> 00:40:03.110
And then underneath that, you actually,
you should see,

00:40:03.220 --> 00:40:07.700
those of you who are hung,
you'll see information that sort of

00:40:07.800 --> 00:40:12.590
points you right back into your code to,
to where the problem is

00:40:12.760 --> 00:40:16.360
So we're going to look at that code.

00:40:16.500 --> 00:40:21.210
So who can see the line number
that is probably problematic?

00:40:21.340 --> 00:40:22.080
Great.

00:40:22.240 --> 00:40:24.280
So let's go to the code.

00:40:24.770 --> 00:40:26.830
Oh, before you go to the code,
this little button here,

00:40:26.830 --> 00:40:27.920
let's talk about this.

00:40:27.920 --> 00:40:29.380
This is an important debugging tip, too.

00:40:29.520 --> 00:40:31.650
When you hang,
now this is a sort of special

00:40:31.650 --> 00:40:34.920
situation because I can make
this program hang very easily.

00:40:34.920 --> 00:40:38.420
But if you're sort of living
in the world and you hang,

00:40:38.420 --> 00:40:42.330
don't have it be your reflex to say,
okay, let's just force quit here and

00:40:42.330 --> 00:40:43.730
see if I can make it happen again.

00:40:43.740 --> 00:40:47.950
No, because one time in 50,
you're not going to be able

00:40:48.200 --> 00:40:50.010
to make it happen again.

00:40:50.020 --> 00:40:55.280
You're going to be in a case where it's
some really curious race condition,

00:40:55.280 --> 00:41:01.850
and you've sort of fortunately got
your machine gummed up in a way that

00:41:01.860 --> 00:41:03.610
your users will get it gummed up,
but you're not going to be

00:41:03.610 --> 00:41:04.500
able to make that happen again.

00:41:04.500 --> 00:41:07.880
So before you terminate,
before you do kill-quit,

00:41:07.880 --> 00:41:10.130
before you force quit...

00:41:10.200 --> 00:41:17.300
[Transcript missing]

00:41:17.400 --> 00:41:26.600
[Transcript missing]

00:41:30.400 --> 00:41:39.700
[Transcript missing]

00:41:41.570 --> 00:41:46.520
- You got an action listener,
and you have this sort of more

00:41:46.540 --> 00:41:49.510
correct version commented out.

00:41:49.510 --> 00:41:52.630
What's going on with this sample is that

00:41:55.120 --> 00:42:01.220
is every time through the paint,
as I said, it draws the paint,

00:42:01.270 --> 00:42:03.050
and then it sort of shouts
out to anybody who's watching,

00:42:03.060 --> 00:42:05.040
"Hey, I just painted."

00:42:05.400 --> 00:42:10.970
And down here in the button
that does this waiter,

00:42:10.970 --> 00:42:12.780
it's saying, okay,
I'm going to wait patiently

00:42:12.780 --> 00:42:14.000
for the paint to occur.

00:42:14.000 --> 00:42:18.010
So what's going on here is that all
of this stuff happens on the event

00:42:18.010 --> 00:42:20.360
queue that I talked about earlier.

00:42:20.360 --> 00:42:23.810
So the action listener for this
paint button is going to sit on the

00:42:23.850 --> 00:42:28.140
event queue and it's going to say,
okay, show me a paint, show me a paint.

00:42:29.230 --> 00:42:31.710
But the paint also has to
happen on the event queue.

00:42:31.710 --> 00:42:34.610
So it's not going to be able to
actually do the painting that the

00:42:34.610 --> 00:42:37.620
button is waiting for until you
free up that event queue for it.

00:42:37.730 --> 00:42:40.190
So, you know,
you have sort of a deadlock situation,

00:42:40.190 --> 00:42:41.330
you're wedged.

00:42:41.360 --> 00:42:44.330
The way to unwedge yourself,
and this is just generally

00:42:44.330 --> 00:42:48.120
always a good programming tip,
is be very light on the event queue.

00:42:48.120 --> 00:42:49.170
Get off of it.

00:42:49.350 --> 00:42:53.050
Give it, give, give, give another,
give all the work to another thread

00:42:53.170 --> 00:42:54.910
and let that thread do the work.

00:42:54.910 --> 00:42:57.480
So you guys can get
this all running again.

00:42:57.480 --> 00:42:58.240
Comment this out.

00:42:59.680 --> 00:42:59.720
I think it's command slash.

00:42:59.720 --> 00:43:02.660
Yeah, command,
command slash will uncomment it.

00:43:02.700 --> 00:43:05.980
You know, put this,
this flawed version here that doesn't

00:43:06.130 --> 00:43:08.000
spawn a new thread to do all the work.

00:43:08.070 --> 00:43:11.630
Rebuild and go and, and,
and everything will work great.

00:43:13.220 --> 00:43:18.200
So, the other tool that I want
your fingers to have done,

00:43:18.200 --> 00:43:22.790
so get your Java app, get it running,
go to the terminal,

00:43:24.760 --> 00:43:28.460
type sample and the same process ID.

00:43:28.460 --> 00:43:31.090
Ah, I'm not running, so that won't work.

00:43:36.400 --> 00:44:05.800
[Transcript missing]

00:44:05.950 --> 00:44:07.000
and I'll just talk to
you a little bit of,

00:44:07.000 --> 00:44:08.280
this is the native side of things.

00:44:08.280 --> 00:44:12.840
Mostly you won't have to look at this,
unless you're doing a little JNI code.

00:44:12.940 --> 00:44:14.080
But I have to look at this, right?

00:44:14.130 --> 00:44:16.600
If you've written a
pure Java application,

00:44:16.600 --> 00:44:18.940
your problem probably won't be in sample.

00:44:18.940 --> 00:44:22.670
But if the problem is
in someone else's code,

00:44:22.670 --> 00:44:26.770
this is information that you
need to give to them in case they

00:44:26.810 --> 00:44:31.010
have a problem in their JNI code,
or their native code.

00:44:31.920 --> 00:44:34.820
The way that sample works
is it just pokes in every,

00:44:34.820 --> 00:44:37.980
I guess in this case it's
every 10 milliseconds,

00:44:38.100 --> 00:44:40.870
and it says what do the
native stacks look like?

00:44:40.910 --> 00:44:44.220
The first number is a count,
the second number is a symbol,

00:44:44.220 --> 00:44:45.080
you can see.

00:44:45.080 --> 00:44:46.840
Some things don't run very often.

00:44:46.840 --> 00:44:49.400
The structure of this is pretty
obvious if you look into it,

00:44:49.410 --> 00:44:51.640
so I'm not going to go
into this in great detail.

00:44:51.640 --> 00:44:54.890
But one of the things that you need
to know is that if you're providing

00:44:54.890 --> 00:44:58.300
information to somebody else,
to Apple, to another developer,

00:44:58.300 --> 00:45:01.900
these are the two sort of collections
of information that you need

00:45:01.900 --> 00:45:01.900
to provide to somebody else.

00:45:01.920 --> 00:45:20.260
So, with that, let's go back to slides.

00:45:25.600 --> 00:45:38.970
will be joined by Ted Jucevic,
who will be joining us in the chat room.

00:45:38.970 --> 00:45:38.970
Ted, you're welcome to join us.

00:45:38.970 --> 00:45:38.970
Thank you.

00:45:39.500 --> 00:45:43.230
If you've written pure Java code,
pretty much as far as debugging goes,

00:45:43.230 --> 00:45:44.100
you're done.

00:45:44.140 --> 00:45:46.030
It's not your fault.

00:45:46.270 --> 00:45:47.000
It's somebody else's.

00:45:47.000 --> 00:45:50.690
So really what your job is at that
point is to try to make sure that it

00:45:50.690 --> 00:45:54.880
doesn't happen to your users by gathering
all the relevant information together

00:45:55.130 --> 00:45:58.560
and sending it to me or my colleagues
or if you know that the problem is

00:45:58.910 --> 00:46:03.160
likely in someone else's application,
sending that information off to them.

00:46:03.180 --> 00:46:05.570
So where do you get the information?

00:46:06.830 --> 00:46:10.700
The native information is
going to be right where inside

00:46:10.700 --> 00:46:12.560
Crash Reporter's folder.

00:46:12.560 --> 00:46:18.090
So it'll be like java.crash.log
or safari.crash.log.

00:46:20.340 --> 00:46:22.640
And the Java information,
so there's some sort of

00:46:22.690 --> 00:46:23.940
clever stuff in the Java VM.

00:46:23.940 --> 00:46:27.250
That's going to be in a folder
in a very similar location.

00:46:27.260 --> 00:46:30.820
But it's got a Java stack in it.

00:46:30.890 --> 00:46:33.290
This is also useful for you
if you are doing JNI code.

00:46:33.300 --> 00:46:36.170
It'll have the Java stack,
if it can figure it out,

00:46:36.580 --> 00:46:39.560
right leading up to the
JNI code that crashed.

00:46:39.560 --> 00:46:41.360
So good information.

00:46:41.360 --> 00:46:44.330
If you folks are typing furiously,
like every release note that we

00:46:44.330 --> 00:46:47.650
send out tends to have a sort of
summary of where the stuff is.

00:46:47.660 --> 00:46:50.220
So the other thing I want
to encourage you all to do,

00:46:50.280 --> 00:46:51.060
use Bug Reporter.

00:46:51.060 --> 00:46:52.660
We really, really love your bugs.

00:46:52.720 --> 00:46:54.970
In fact,
one of the reasons that Tiger is so

00:46:54.970 --> 00:46:58.360
good is because I've gotten bugs,
or I and my colleagues,

00:46:58.390 --> 00:47:00.630
have gotten bugs from you guys and
had a chance to deal with them.

00:47:00.660 --> 00:47:02.700
So what makes a great bug report?

00:47:02.700 --> 00:47:05.800
It's really down to steps to reproduce.

00:47:05.800 --> 00:47:11.500
If you give us a bug report,
or one of your colleagues a bug report,

00:47:11.500 --> 00:47:13.560
and you can tell them how
to make that crash happen,

00:47:13.560 --> 00:47:14.400
that's like gold.

00:47:17.060 --> 00:47:22.380
And it goes sort of in three tiers
of like how rich the vein is.

00:47:22.380 --> 00:47:24.980
If you give me words saying do this,
do this, do this, do this,

00:47:24.980 --> 00:47:26.820
and then you will crash,
that's really good.

00:47:26.860 --> 00:47:30.380
But even better is if you have
like a little chunk of sample code,

00:47:30.410 --> 00:47:34.920
static, void, main, open paren, you know,
and your instructions

00:47:34.920 --> 00:47:37.900
to me are compile this,
run, and you will crash.

00:47:37.900 --> 00:47:39.420
I mean, that's like platinum.

00:47:39.420 --> 00:47:44.700
And the other thing you should know
as developers is those bugs sort

00:47:44.700 --> 00:47:48.060
of trickle to the top of the let's
deal with this immediately queue.

00:47:48.060 --> 00:47:53.800
And then really, really, really,
what's better than platinum?

00:47:53.800 --> 00:47:54.320
Diamonds.

00:47:54.320 --> 00:47:59.310
So if it's got a JUnit test, you know,
it's not that far to go from static,

00:47:59.370 --> 00:48:02.540
void,
main to subclassing JUnits test case.

00:48:02.540 --> 00:48:06.330
And then putting asserts in to say
what you really expect to happen.

00:48:06.340 --> 00:48:08.570
Now,
if you put one of those in a bug report,

00:48:08.580 --> 00:48:12.380
not only are we going to eventually,
hopefully, be able to see exactly

00:48:12.380 --> 00:48:15.030
what the problem is,
but we're going to be able to

00:48:15.100 --> 00:48:16.150
put in a bug report and we're
going to put that into our test

00:48:16.150 --> 00:48:19.840
harness at Apple so that if,
you know, we make some boneheaded mistake

00:48:19.900 --> 00:48:22.260
three months later that might
make your bug come back,

00:48:22.360 --> 00:48:25.130
we're going to know immediately, oh,
we've messed up.

00:48:25.240 --> 00:48:29.120
So please, please,
if you go to the effort

00:48:29.120 --> 00:48:33.200
of putting code together,
think about using JUnit.

00:48:33.200 --> 00:48:36.290
And finally,
if you just crash and you're like, damn,

00:48:36.290 --> 00:48:38.520
I'm busy, push the send to Apple button.

00:48:38.520 --> 00:48:43.420
Those things get collated together
internally inside of Apple.

00:48:43.420 --> 00:48:46.010
And if you get a bug,
if you get a bug report on your desk

00:48:46.060 --> 00:48:51.150
and it says 513 people have seen
this stack trace in their crash,

00:48:51.160 --> 00:48:53.080
I mean, this sort of gets your attention.

00:48:53.080 --> 00:48:54.430
And we do get that.

00:48:54.530 --> 00:48:57.500
So please, push the send to Apple button,
if nothing else.

00:48:57.500 --> 00:49:03.670
And finally, because I care about this,
automate in your testing.

00:49:03.680 --> 00:49:05.680
This will make your life easier.

00:49:05.680 --> 00:49:07.360
Automated testing is here.

00:49:07.360 --> 00:49:10.130
Use JUnit,
use some other automated test framework,

00:49:10.230 --> 00:49:14.680
but build testing into
your development cycle.

00:49:15.220 --> 00:49:18.120
So let's talk about
other important tools.

00:49:18.120 --> 00:49:22.220
Of course, you get the Java debugger
and the IDE of your choice.

00:49:22.220 --> 00:49:24.460
You can do it in Xcode.

00:49:24.460 --> 00:49:26.120
You can do it in Eclipse or NetBeans.

00:49:28.660 --> 00:49:29.440
JDB.

00:49:29.440 --> 00:49:30.610
JDB is a great native debugger.

00:49:30.620 --> 00:49:34.590
It's really, you know,
gets you into the guts

00:49:34.600 --> 00:49:35.420
of the native side.

00:49:35.420 --> 00:49:39.500
So if you're doing JNI code,
this is a good tool to sort of learn.

00:49:39.590 --> 00:49:42.040
It takes some doing,
but it's really good.

00:49:42.060 --> 00:49:44.910
This is a sort of terminal level thing.

00:49:45.000 --> 00:49:45.820
and Shark.

00:49:45.900 --> 00:49:49.110
I hope there's not a session
at the developers conference

00:49:49.150 --> 00:49:52.450
today that doesn't say,
"Go use Shark to profile your

00:49:52.450 --> 00:49:54.620
application." It's great.

00:49:54.620 --> 00:49:56.290
Java's fully integrated into it.

00:49:56.460 --> 00:50:00.300
Objects, you know,
allocation you can look at.

00:50:00.310 --> 00:50:01.390
You can look at methods.

00:50:01.390 --> 00:50:02.420
You can look at times.

00:50:02.570 --> 00:50:03.870
It's a terrific tool.

00:50:04.070 --> 00:50:06.500
We've got a session today.

00:50:07.900 --> 00:50:22.500
[Transcript missing]

00:50:23.000 --> 00:50:28.900
[Transcript missing]

00:50:34.280 --> 00:50:38.600
So, my name's still Ted Jucevic.

00:50:38.630 --> 00:50:40.740
We're gonna talk about where things are.

00:50:40.840 --> 00:50:44.990
This may be an old hat for some people
who have been developing on the platform,

00:50:45.070 --> 00:50:48.150
but what is different is we're
gonna talk about where the Java 2

00:50:48.150 --> 00:50:50.780
Standard Edition 5.0 stuff is.

00:50:50.820 --> 00:50:53.740
We're also gonna talk about,
show you a quick tour of

00:50:54.190 --> 00:50:57.000
Xcode from a Java perspective.

00:50:57.000 --> 00:51:00.180
Some of you, that's a little old hat,
but,

00:51:00.320 --> 00:51:02.280
The rest of you, it's good stuff.

00:51:02.340 --> 00:51:06.940
Of course,
your standard command line tools for the

00:51:06.940 --> 00:51:09.030
Java 1.4.2 are available on the path.

00:51:09.600 --> 00:51:11.960
Java, Java C, all those fun toys.

00:51:11.960 --> 00:51:17.110
The standard Java Home,
library Java Home, so if you're running,

00:51:17.120 --> 00:51:22.350
say, Tomcat or an application that
needs to know where Java Home is,

00:51:22.350 --> 00:51:26.920
that's what your environment
variable would be set to.

00:51:26.920 --> 00:51:30.440
At this point in time,
that point's at the default JDK,

00:51:30.450 --> 00:51:33.100
so that would be the 1.4.2.

00:51:33.100 --> 00:51:36.090
At some future point when
we move it to Java 5.0,

00:51:36.100 --> 00:51:40.420
you won't have to change your environment
variable or anything like that.

00:51:40.520 --> 00:51:41.960
It'll automatically happen for you.

00:51:43.580 --> 00:51:47.390
Extension libraries for JNI libraries.

00:51:47.410 --> 00:51:52.370
Because we provide the JVMs for you,
you can't really put your

00:51:52.380 --> 00:51:55.920
JNI libraries and extensions with the
JVM like you do on other platforms.

00:51:55.920 --> 00:51:58.760
And then additionally,
your users could say, well,

00:51:58.760 --> 00:52:01.810
you know what,
this bug is occurring in 1.4.2,

00:52:01.810 --> 00:52:05.210
but I've heard it's fixed in 5.0,
so let me switch to Java 2

00:52:05.210 --> 00:52:07.100
Standard Edition 5.0.

00:52:07.520 --> 00:52:09.810
You, of course,
you want your JNI libraries and

00:52:09.810 --> 00:52:11.430
extensions to continue to run.

00:52:11.450 --> 00:52:15.060
So what we've done is we've provided
some global spaces for you to

00:52:15.060 --> 00:52:17.220
put JNI libraries and extensions.

00:52:17.220 --> 00:52:20.950
The first one, library Java extensions,
is system-wide.

00:52:20.950 --> 00:52:24.070
So this would be something if, say,
you were installing

00:52:24.640 --> 00:52:27.970
something for all users,
putting in slash applications,

00:52:27.980 --> 00:52:31.830
and for some reason you didn't
want to include your JNI library or

00:52:31.870 --> 00:52:34.760
extension with the application bundle.

00:52:34.760 --> 00:52:37.430
The other place is in your
user's home directory.

00:52:37.500 --> 00:52:40.810
Same path, and you may need to create
this if it isn't already there,

00:52:40.810 --> 00:52:44.560
but, you know, the user's home directory,
library Java extensions.

00:52:44.560 --> 00:52:46.310
You can put that in there.

00:52:46.310 --> 00:52:48.340
That'll be per user install.

00:52:48.340 --> 00:52:51.590
You know, so if for some reason this is,
say, a banking application

00:52:51.590 --> 00:52:53.990
or something like that,
and you don't want to share

00:52:53.990 --> 00:52:56.490
that with everybody else,
it goes into there.

00:52:56.500 --> 00:53:02.850
And, of course, for your JNI includes,
for the preferred JDK, system, library,

00:53:03.250 --> 00:53:05.730
framework, Java VM framework.

00:53:07.440 --> 00:53:12.160
Now, the reason you have to add that
include path is on Mac OS X we

00:53:12.210 --> 00:53:14.090
have this concept of frameworks.

00:53:14.100 --> 00:53:18.580
But, of course,
JNI doesn't know about frameworks.

00:53:18.640 --> 00:53:22.740
So it doesn't put Java VM slash JNI.h.

00:53:22.740 --> 00:53:26.070
So what you have to do is say, go ahead.

00:53:26.080 --> 00:53:29.710
If you don't find this header file,
say JNI.h,

00:53:29.710 --> 00:53:35.020
in the default framework search paths,
look also here.

00:53:35.020 --> 00:53:39.780
And you can add that to the
build properties in Xcode.

00:53:40.150 --> 00:53:43.150
If you're going to be using
Java 2 Standard Edition 5.0,

00:53:43.150 --> 00:53:45.960
you're going to want to put
system library frameworks,

00:53:45.960 --> 00:53:51.360
Java VM.frameworks, versions, 5.0,
headers.

00:53:51.360 --> 00:53:53.710
Don't write this all down.

00:53:53.720 --> 00:53:55.510
I probably should have said that
at the beginning of the slide.

00:53:55.520 --> 00:53:58.040
This is well documented
in our documentation.

00:53:58.040 --> 00:54:04.600
When you install developer tools,
of course you get that documentation,

00:54:04.600 --> 00:54:07.260
and then with Java 2
Standard Edition 5.0,

00:54:07.260 --> 00:54:10.080
there's another set of developer tools
that will also include the differences.

00:54:10.100 --> 00:54:13.370
for Java 2.0.

00:54:14.580 --> 00:54:19.680
So, like I said, the 142 is the default
one on the command line.

00:54:19.720 --> 00:54:26.100
So, the same kind of thing you have to do
with the JNI headers is for the Java C.

00:54:26.100 --> 00:54:28.700
You have to point it
to the correct Java C.

00:54:28.700 --> 00:54:35.120
Again, that system, library, frameworks,
javavm.framework, versions 1.5, commands,

00:54:35.130 --> 00:54:35.800
Java C.

00:54:35.800 --> 00:54:39.540
Now, again, don't write it down.

00:54:39.540 --> 00:54:40.440
It's well documented.

00:54:40.440 --> 00:54:43.260
You can copy and paste
from the documentation.

00:54:44.640 --> 00:54:47.220
So,
let's actually just do this real quick.

00:54:47.300 --> 00:54:48.720
Let's go back to this demo machine.

00:54:48.720 --> 00:54:51.860
Let me go ahead and quit
just about everything.

00:54:53.280 --> 00:54:58.700
This Java Preferences is in
Application Utilities Java,

00:54:58.700 --> 00:55:00.790
and then there's a folder for Java 5.0.

00:55:00.790 --> 00:55:10.990
Let me just go ahead and switch
this back to 142 for my demo.

00:55:10.990 --> 00:55:10.990
I'll get rid of my iDisk.

00:55:12.220 --> 00:55:15.940
So let's go ahead and launch Xcode.

00:55:16.020 --> 00:55:20.610
And I'm just going to
create a quick project.

00:55:20.850 --> 00:55:25.920
This is actually something we
don't have in the hands-on SDK,

00:55:25.970 --> 00:55:27.610
but just to follow along.

00:55:27.760 --> 00:55:32.860
The important part is not the code,
but actually the Java C setting.

00:55:32.860 --> 00:55:37.600
Let me just go down to Java,
and let's call it a swing app.

00:55:37.610 --> 00:55:42.000
And 5, oh, swing app.

00:55:42.040 --> 00:55:44.890
It's going to create it
in my home directory.

00:55:45.000 --> 00:55:49.110
And if I was to go into the target,
these are all your files and stuff.

00:55:49.140 --> 00:55:52.540
If you guys aren't
familiar with the Xcode,

00:55:52.710 --> 00:55:56.160
Thursday of WWDC,
you should get familiar with it.

00:55:56.400 --> 00:56:00.160
But from a Java perspective,
if you go into the targets,

00:56:00.190 --> 00:56:03.310
double click on the target,
you'll see all these properties

00:56:03.320 --> 00:56:04.920
and settings and stuff.

00:56:04.920 --> 00:56:08.210
If you go to Java compiler settings,
go to this pop-up,

00:56:08.370 --> 00:56:10.140
and you don't have a choice.

00:56:10.140 --> 00:56:13.520
It's Java C, Jikes,
and the-- the default are the one, four,

00:56:13.520 --> 00:56:13.790
two.

00:56:13.940 --> 00:56:16.980
So what you need to do is go to
the expert settings and change

00:56:16.980 --> 00:56:19.370
the value of the Java compiler.

00:56:19.460 --> 00:56:25.820
So system, library, frameworks.

00:56:26.000 --> 00:56:32.230
javavm.frameworkversions.

00:56:32.470 --> 00:56:41.770
PERS, IONS, 1.5, Commands, Java C.

00:56:41.970 --> 00:56:44.490
Copy and paste works well too.

00:56:44.940 --> 00:56:46.560
Yes, I've done that quite a few times.

00:56:46.560 --> 00:56:51.300
So if I go ahead and run this right now,
I will compile with Java 2

00:56:51.400 --> 00:56:54.980
Standard Edition 5.0,
but I get this exemption.

00:56:54.980 --> 00:56:57.180
Same kind of thing that Scott ran into.

00:56:57.180 --> 00:57:01.850
The classes, you know, they're compiled,
they're targeted at the Java 5 compiler,

00:57:01.980 --> 00:57:04.660
so of course it doesn't run in 1.4.2.

00:57:04.660 --> 00:57:09.880
So the next setting is you have
to go in and set the deployment.

00:57:09.880 --> 00:57:15.900
And for this, we just use 1.5 plus.

00:57:18.480 --> 00:57:21.030
Let me just do a clean just to
make sure everything gets updated.

00:57:21.120 --> 00:57:24.270
And of course,
this will go ahead and run in

00:57:24.270 --> 00:57:27.280
Java 2 Standard Edition 5.0.

00:57:27.280 --> 00:57:29.780
Or it should.

00:57:29.780 --> 00:57:31.640
Oh, star.

00:57:36.100 --> 00:57:51.100
[Transcript missing]

00:57:51.700 --> 00:58:00.300
[Transcript missing]

00:58:01.310 --> 00:58:05.040
I'm going to show you how to use
Java 5.0 for mouse pointer type

00:58:05.040 --> 00:58:07.520
stuff that's specific for Java 5.0.

00:58:07.520 --> 00:58:10.540
So let me just go ahead and
get rid of the paint in here.

00:58:10.540 --> 00:58:11.710
And it's down here.

00:58:11.710 --> 00:58:15.370
Let me just cut this out and drag in
this snippet of code so that we can

00:58:15.370 --> 00:58:18.200
actually do something Java 5.0 specific.

00:58:18.200 --> 00:58:21.290
And all this does is it
essentially just creates a simple

00:58:21.290 --> 00:58:25.140
Etch-a-Sketch type application,
drawing based on the mouse pointer

00:58:25.140 --> 00:58:26.820
location and stuff like that.

00:58:26.920 --> 00:58:30.570
And so I go out, Etch-a-Sketch,
and stuff like that.

00:58:31.480 --> 00:58:33.110
So...

00:58:34.030 --> 00:58:36.180
Let's look at that
application real quick,

00:58:36.180 --> 00:58:42.190
and let me give you a quick tour of
things that are Macintosh specific.

00:58:42.330 --> 00:58:45.290
We have this thing called
the com apple EAWT.

00:58:45.300 --> 00:58:50.490
Java Applications on other
platforms don't have this

00:58:50.490 --> 00:58:53.110
concept of an application menu.

00:58:53.120 --> 00:58:56.720
They don't have this concept
of application preferences or

00:58:56.720 --> 00:59:00.040
handlers for our standard about box.

00:59:00.040 --> 00:59:05.550
So in this EAWT,
we got this thing called a...

00:59:07.280 --> 00:59:10.390
Let's see, dun dun dun, where is it?

00:59:10.520 --> 00:59:13.680
Application.

00:59:15.210 --> 00:59:18.400
Now,
I believe if I option double click on it,

00:59:18.400 --> 00:59:21.400
I should go to the
documentation for that class.

00:59:21.440 --> 00:59:23.900
Oops.

00:59:24.900 --> 00:59:27.320
took me to the Objective-C stuff.

00:59:27.390 --> 00:59:34.260
If you look in our documentation for the
Java 2 Standard Edition 1.4 or 5.0 stuff,

00:59:34.260 --> 00:59:37.740
you'll see there's a
bunch of action listeners,

00:59:37.740 --> 00:59:40.940
this application class
that you can set up.

00:59:40.950 --> 00:59:45.880
What it will do is allow you to put
up your about up here in the left-hand

00:59:45.880 --> 00:59:50.870
corner and actually handle those events,
actually do preferences,

00:59:50.950 --> 00:59:53.870
and then handle the quit in Xcode.

00:59:54.800 --> 00:59:57.930
There's also some -- so
what I'm pointing you,

00:59:57.930 --> 01:00:00.580
though, at is not cross-platform.

01:00:00.630 --> 01:00:03.520
So up on our sample code website,
we have this thing called

01:00:03.520 --> 01:00:04.920
an application adapter.

01:00:04.920 --> 01:00:07.070
Essentially,
it's an empty stub file for all these

01:00:07.070 --> 01:00:08.750
functions that you would be calling.

01:00:08.750 --> 01:00:11.830
And you just include
it in your application,

01:00:11.860 --> 01:00:12.960
your jar file.

01:00:13.010 --> 01:00:16.660
And then when you deploy this to, say,
Windows or Linux or any

01:00:16.660 --> 01:00:20.520
other Java platform,
your application will continue to run.

01:00:20.690 --> 01:00:25.460
Even though you've referenced
these Apple-specific packages,

01:00:25.460 --> 01:00:29.010
your application will still run
because it will find those empty

01:00:29.010 --> 01:00:33.230
stub libraries in your application
bundle and be up and running in time.

01:00:33.240 --> 01:00:35.650
Let's see if there's a few more things.

01:00:35.650 --> 01:00:39.290
We've got a few minutes that
I can actually talk about here.

01:00:39.400 --> 01:00:43.310
We also have events for handling
open application and open file.

01:00:43.310 --> 01:00:46.080
So if for some reason, say, like your,
say,

01:00:46.080 --> 01:00:50.400
a word processor or something like that,
and you want your application,

01:00:50.540 --> 01:00:56.930
when they double-click on, say, a doc,
your word processor, extension document,

01:00:56.930 --> 01:01:02.340
what you can do is you can set
up your application's plist,

01:01:02.360 --> 01:01:07.280
just standard application
bundle plist settings,

01:01:07.280 --> 01:01:11.230
so that you'll handle that extension.

01:01:11.230 --> 01:01:11.230
If you set up for this
application listener,

01:01:11.290 --> 01:01:15.430
to handle open file,
what you'll do is you'll get in this

01:01:15.430 --> 01:01:20.880
application event a pointer to the
URL for where that file was opened,

01:01:20.880 --> 01:01:23.680
like on the finder or
something like that.

01:01:23.760 --> 01:01:27.350
And so you can actually
get a full-fledged

01:01:27.470 --> 01:01:32.810
Mac OS X Java Application using this
class that doesn't necessarily look

01:01:33.270 --> 01:01:37.290
or feel like a Java Application just
brought over from another platform.

01:01:38.110 --> 01:01:42.100
But at the same time,
using that application

01:01:42.770 --> 01:01:44.650
and the sample code that
I referred to on our website,

01:01:44.740 --> 01:01:49.380
the application stubs,
you can still use that same

01:01:49.380 --> 01:01:52.230
binary on other platforms.

01:01:52.380 --> 01:01:54.100
So definitely check that out.

01:01:54.300 --> 01:01:56.670
It's in our documentation.

01:01:56.690 --> 01:01:59.840
It's under com/apple/eat/aewt.

01:01:59.900 --> 01:02:03.880
And look at the
application listener stuff.

01:02:04.040 --> 01:02:06.890
This is some really cool stuff
that will make your application

01:02:06.900 --> 01:02:11.670
just run and behave and act like
a normal Mac OS X application.

01:02:12.030 --> 01:02:16.000
So we've actually come to
the end of our presentation.

01:02:16.000 --> 01:02:20.100
If we can go back to slides,
I think that's the last one there.

01:02:20.180 --> 01:02:23.280
And I think we're at the
point where we got Q&A.

01:02:23.400 --> 01:02:27.830
So for more information,

01:02:29.660 --> 01:02:34.430
We've got a humongous URL that
you can go to and download all

01:02:34.430 --> 01:02:37.440
the documentation that we are
pointing you to and stuff like that.

01:02:42.450 --> 01:02:46.500
Related sessions, well,
there's actually a little conflict.

01:02:46.630 --> 01:02:50.100
Right after here is the Develop, Debug,
Deploy lab.

01:02:50.100 --> 01:02:54.140
And go to that,
but there's also a J2ME devices.

01:02:54.200 --> 01:02:58.580
So if you're interested in doing
Java 2 Micro Edition development,

01:02:58.580 --> 01:03:01.880
there's a session in the
Presidio right after this.

01:03:01.900 --> 01:03:05.360
But if you're just doing
standard Java development,

01:03:05.360 --> 01:03:06.440
go to the lab.

01:03:06.440 --> 01:03:10.520
And if you have any questions,
they'll be happy to help you there.

01:03:11.230 --> 01:03:14.180
There's actually a JNI session.

01:03:14.180 --> 01:03:15.740
There should have been more on here.

01:03:16.120 --> 01:03:20.020
There's a JNI session that
Scott pointed out that's this afternoon.

01:03:20.020 --> 01:03:21.360
Go to that one.

01:03:21.370 --> 01:03:22.400
That's a great session.

01:03:22.400 --> 01:03:24.150
There's also a performance session.

01:03:24.220 --> 01:03:26.660
I believe that's tomorrow
at 9 a.m., right?

01:03:26.660 --> 01:03:29.180
That is going to be a great session.

01:03:29.180 --> 01:03:33.240
That's going to talk about graphics,
just general performance

01:03:33.240 --> 01:03:34.750
tips on Mac OS X.

01:03:36.260 --> 01:03:39.340
If you have any concerns
about performance at all,

01:03:39.340 --> 01:03:42.540
go to those two sessions,
and you'll get essentially

01:03:42.540 --> 01:03:44.660
all your questions answered.