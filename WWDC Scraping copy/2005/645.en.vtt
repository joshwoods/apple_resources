WEBVTT

00:00:06.540 --> 00:00:11.400
I wanted to try something here.

00:00:11.400 --> 00:00:14.820
This is an Automator session and
I've got a keynote presentation.

00:00:14.820 --> 00:00:18.970
So let's see what we can do here.

00:00:18.970 --> 00:00:18.970
Don't look at that one.

00:00:18.970 --> 00:00:18.970
Oh, geez, I forgot to close it.

00:00:19.210 --> 00:00:21.680
Automator happens to have
some keynote actions,

00:00:21.680 --> 00:00:24.140
one of which is start
the keynote slideshow.

00:00:24.210 --> 00:00:27.160
That'll tell Keynote to get going.

00:00:27.700 --> 00:00:28.660
That's another one.

00:00:28.740 --> 00:00:30.690
Stop the keynote slideshow.

00:00:30.700 --> 00:00:32.660
That's the one I chose.

00:00:32.690 --> 00:00:34.800
I didn't intend to choose that one.

00:00:36.340 --> 00:00:40.480
I thought we'd be done quicker that way
if I chose that one right off the bat.

00:00:40.480 --> 00:00:44.980
And I happen to have this little command
line tool I wrote called Clapper Tool.

00:00:45.190 --> 00:00:49.300
And here comes a little experiment
that may or may not work.

00:00:49.380 --> 00:00:50.460
No, no, no, hold your applause.

00:00:50.540 --> 00:00:51.680
You'll totally mess this up.

00:00:51.680 --> 00:00:53.380
I'm serious.

00:00:54.400 --> 00:01:01.070
Automator already has a run shell
script action in which you can type a

00:01:01.090 --> 00:01:03.480
shell script command of your choice.

00:01:03.480 --> 00:01:05.560
So I'm going to tell it to do that.

00:01:07.610 --> 00:01:09.000
The Clapper.

00:01:09.000 --> 00:01:10.660
All right, and we're going to run it.

00:01:10.660 --> 00:01:12.200
Just please, we're going to run this.

00:01:12.200 --> 00:01:12.650
Hang on, here we go.

00:01:12.660 --> 00:01:13.160
Ready?

00:01:13.160 --> 00:01:14.160
Everybody ready?

00:01:14.370 --> 00:01:17.990
Thank you.

00:01:21.600 --> 00:01:22.780
- Stop, no, you're gonna, hold it.

00:01:22.780 --> 00:01:28.770
We're on slide 39 already
with all that clapping.

00:01:28.770 --> 00:01:34.510
So we're gonna talk about
building actions for system

00:01:34.510 --> 00:01:35.550
administrators in terms of,
by the way, where's the little clicker?

00:01:35.550 --> 00:01:35.550
Nobody gave me the little clicker.

00:01:35.550 --> 00:01:35.550
I'll have to keep coming back over.

00:01:35.550 --> 00:01:35.550
Thanks.

00:01:36.350 --> 00:01:42.230
We're going to talk about using
Automator with the shell and perl and

00:01:42.230 --> 00:01:43.820
other scripting languages like that.

00:01:43.820 --> 00:01:46.030
There is some new stuff that's
just been added to Automator

00:01:46.040 --> 00:01:47.340
in the Xcode 2.1 build.

00:01:47.340 --> 00:01:48.690
Who's installed the 2.1 build?

00:01:48.700 --> 00:01:51.850
Who wondered what that was on
the front list of packages about

00:01:51.850 --> 00:01:53.840
shell Automator Actions and so on?

00:01:53.860 --> 00:01:54.900
Well, you've come to the right place.

00:01:55.200 --> 00:01:58.080
We're going to talk about using the run
shell script action that I just used

00:01:58.080 --> 00:02:01.050
there where I typed a little fragment of
shell script to cause it to run a tool.

00:02:01.120 --> 00:02:03.450
We're also going to talk,
this is my favorite part though,

00:02:03.450 --> 00:02:06.480
building new actions with this
thing called AM Shell Script Action.

00:02:06.480 --> 00:02:09.560
This is an interesting new way to
build GUIs on top of shell scripts

00:02:09.630 --> 00:02:11.450
as part of the Automator Workflow.

00:02:11.460 --> 00:02:13.030
We're going to talk about
mixing all this stuff together.

00:02:14.250 --> 00:02:16.870
I'm not going to tell you every
detail about the born shell and

00:02:16.990 --> 00:02:18.920
perl and ruby and other languages.

00:02:18.920 --> 00:02:22.600
I bought the ruby book at O'Reilly's
over there earlier and briefly

00:02:23.160 --> 00:02:25.720
considered attempting to write
a ruby script here during the demo.

00:02:25.720 --> 00:02:29.120
But frankly, I'm getting behind on
reading my O'Reilly books.

00:02:29.120 --> 00:02:31.060
Every time I come to WWDC,
I buy about 12 more.

00:02:31.150 --> 00:02:33.120
And a year later,
I've read about three of them.

00:02:33.120 --> 00:02:37.080
And then I come here and I think I've
got this much space on my shelf at home.

00:02:37.080 --> 00:02:40.000
How many books have you got that can
fit in eight and three-quarter inches,

00:02:40.000 --> 00:02:41.560
you know, with birds on the cover?

00:02:41.560 --> 00:02:42.320
I'd like a few more birds.

00:02:42.330 --> 00:02:43.130
Oh, totally off track.

00:02:43.220 --> 00:02:46.130
And we're not going to talk about
AppleScript or Cocoa Stages,

00:02:46.160 --> 00:02:47.910
and I'm not going to tell
you every little detail of

00:02:48.130 --> 00:02:51.120
Interface Builder or Xcode,
because there are 83 trillion little

00:02:51.120 --> 00:02:54.310
details of Interface Builder and Xcode,
many of which you can

00:02:54.310 --> 00:02:55.790
ignore in this session.

00:02:56.170 --> 00:02:57.510
So let me just do a quick
review of Automator.

00:02:57.590 --> 00:03:00.740
Can we go back to demo two over here?

00:03:00.740 --> 00:03:02.810
Nobody uses demo one, do they?

00:03:03.310 --> 00:03:06.400
So here's Automator.

00:03:06.960 --> 00:03:09.140
And you're probably familiar
with a lot of these actions

00:03:09.150 --> 00:03:11.680
that are in here already,
but the neat thing that you can

00:03:11.840 --> 00:03:16.670
do with these new Automator shell
actions is that you can build a whole

00:03:16.670 --> 00:03:19.650
new class of actions here where you
get to design a user interface and

00:03:19.650 --> 00:03:22.530
interface builder and have a shell
script execute in the background.

00:03:22.530 --> 00:03:25.270
Here's one I wrote.

00:03:25.440 --> 00:03:27.000
A little while ago,
we were having fun with

00:03:27.000 --> 00:03:27.920
this one the other day.

00:03:27.920 --> 00:03:30.940
This turns the system identifier light on
an XServe on and off and will optionally

00:03:30.940 --> 00:03:32.200
flash out messages in Morse code.

00:03:32.840 --> 00:03:37.990
People think that the XServe
doesn't have a display,

00:03:37.990 --> 00:03:41.390
but it really has a one-by-one
yellow and off display.

00:03:41.500 --> 00:03:44.350
We were having great fun in the
data center yesterday with this.

00:03:44.470 --> 00:03:47.400
All the machines in the rack were
flashing their host name in Morse code.

00:03:47.400 --> 00:03:49.400
Kind of a useful system of min tool.

00:03:49.400 --> 00:03:52.980
If you can't remember what that one is,
just watch it for a little while.

00:03:53.800 --> 00:03:57.520
So this is actually running,
this is a GUI that you

00:03:57.520 --> 00:03:59.040
design in Interface Builder.

00:03:59.040 --> 00:03:59.880
I'm going to show you all this stuff.

00:03:59.990 --> 00:04:01.380
And then it runs a command.

00:04:01.410 --> 00:04:02.880
It runs an actual Unix command.

00:04:02.880 --> 00:04:06.210
I have a tool called Identifier
Light that flashes SOS on

00:04:06.260 --> 00:04:07.960
all the lights if you want.

00:04:08.010 --> 00:04:11.710
And there are a variety of interesting
ways you can build actions in this way.

00:04:11.710 --> 00:04:15.290
I wrote a little The Clapper action where
I can say how many claps I want to do.

00:04:15.400 --> 00:04:17.980
Five claps, four, three, two,
for instance.

00:04:18.040 --> 00:04:20.440
But my mic is actually on that
computer so there's no need to try.

00:04:21.620 --> 00:04:23.860
I'll be showing you a few
more of these as we go along.

00:04:23.860 --> 00:04:25.460
There's one here that sorts items,
for instance.

00:04:25.460 --> 00:04:29.060
This takes text from another action
and runs the Unix sort command.

00:04:29.060 --> 00:04:33.390
And you get to decide in your UI that
you build how you want the user to pick

00:04:33.390 --> 00:04:35.900
whether it's going forwards or backwards.

00:04:35.900 --> 00:04:37.910
Or do you want to have a pop-up
list to select numerically

00:04:38.010 --> 00:04:39.220
or alphabetically and so on.

00:04:39.260 --> 00:04:43.130
So this is, I think,
a fun new frontier in building Automator

00:04:43.130 --> 00:04:47.830
Actions for those of us who still
use VI to edit our Info.plist files.

00:04:47.840 --> 00:04:49.540
How many people edit
an Info.plist with VI?

00:04:49.540 --> 00:04:51.250
Good.

00:04:51.830 --> 00:04:55.970
Go back to the slides for a minute.

00:04:56.920 --> 00:04:59.120
Improved already,
can you believe that this thing

00:04:59.120 --> 00:05:01.680
which has been out for three
weeks has already been improved?

00:05:01.700 --> 00:05:04.860
Matter of fact it has,
there is an improved

00:05:04.980 --> 00:05:06.620
run shell script action.

00:05:06.620 --> 00:05:07.660
Which is better than the old one.

00:05:07.660 --> 00:05:09.370
Now here's the minor problem.

00:05:09.440 --> 00:05:12.220
The new improved run shell
script is not technically in the

00:05:12.230 --> 00:05:13.960
Xcode 2.1 build that you have.

00:05:13.960 --> 00:05:15.840
It is in the build that I have.

00:05:15.840 --> 00:05:21.420
I didn't realize this until yesterday,
until I built several dozen

00:05:21.460 --> 00:05:23.880
slides talking about the
new run shell script action.

00:05:23.920 --> 00:05:26.480
The more exciting part is
the AM shell script action,

00:05:26.520 --> 00:05:28.980
where you can build the graphical
interfaces with interface builder.

00:05:29.020 --> 00:05:31.220
You'll get that in Xcode 2.1.

00:05:31.220 --> 00:05:33.900
You'll be getting the new run
shell script action shortly,

00:05:33.920 --> 00:05:37.150
they tell me, in a software update,
let's hope.

00:05:37.730 --> 00:05:39.740
That's what the old one looked like.

00:05:39.930 --> 00:05:41.400
This is what the new one looks like.

00:05:41.400 --> 00:05:42.800
It's a little bit better.

00:05:42.990 --> 00:05:45.600
You can pick your shell of
choice on a pop-up menu.

00:05:45.600 --> 00:05:48.550
It's got a number of,
I don't want to say bug fixes,

00:05:48.610 --> 00:05:52.040
but shall we say improvements or
enhancements in the way it can

00:05:52.040 --> 00:05:55.600
handle anything other than the
most trivial line of shell code.

00:05:55.600 --> 00:05:57.430
A minor issue with the old one.

00:05:57.640 --> 00:05:58.540
Coming real, real soon.

00:05:58.630 --> 00:05:59.590
I'm going to be showing you that one.

00:05:59.610 --> 00:06:02.040
I had the old one on here for my
Clapper action just to prove to

00:06:02.110 --> 00:06:03.200
you that that one actually works.

00:06:03.270 --> 00:06:05.110
We run the new one over there.

00:06:05.410 --> 00:06:07.870
More excitingly is this thing
called AM Shell Script Action,

00:06:07.870 --> 00:06:10.620
which is really a new
project template in Xcode.

00:06:10.640 --> 00:06:12.900
If you start up Xcode 2.1,
you're going to see something

00:06:12.900 --> 00:06:17.840
called a Shell Script Automator
Action as one of the project types.

00:06:19.780 --> 00:06:22.430
So let's talk about these actions
in general and how the shell script

00:06:22.430 --> 00:06:25.440
action differs from the Apple script
action or the Cocoa action

00:06:25.440 --> 00:06:27.310
that you may have seen already.

00:06:27.430 --> 00:06:30.700
The whole idea of Automator Workflows
is to take a bunch of actions,

00:06:30.700 --> 00:06:32.610
string them together, you know,
and there's a whole bunch

00:06:32.610 --> 00:06:33.460
that come with Automator.

00:06:33.460 --> 00:06:37.270
There are these generic run-shell-script
and run-Apple-script actions where you

00:06:37.280 --> 00:06:40.500
can type a little bit of code in a window
like I did with that clapper thing and,

00:06:40.500 --> 00:06:41.940
you know, dispense with any fancy UI.

00:06:41.940 --> 00:06:44.120
Or you can create your own,
and this is where this actually

00:06:44.120 --> 00:06:45.570
gets pretty interesting,
I think.

00:06:45.600 --> 00:06:48.020
A Cocoa Action,
if you looked at the package,

00:06:48.040 --> 00:06:49.320
would look like that.

00:06:49.340 --> 00:06:51.610
You'd find,
you'll always find an Info.plist,

00:06:51.640 --> 00:06:55.650
a nice XML file that describes
what every action does,

00:06:55.660 --> 00:06:58.460
what kind of input it takes,
what kind of output it produces.

00:06:58.460 --> 00:07:00.850
In a Cocoa Action,
you'll find an executable

00:07:00.850 --> 00:07:03.790
file in a Mac OS folder,
a piece of compiled code,

00:07:03.790 --> 00:07:07.950
and you'll find a user interface,
a nib file from Interface Builder.

00:07:08.040 --> 00:07:10.620
In an AppleScript Action,
you'll find much the same thing,

00:07:10.710 --> 00:07:14.300
except you'll have an actual script file
rather than the compiled piece of code.

00:07:14.300 --> 00:07:17.620
They both have an Info.plist to
specify parameters.

00:07:18.460 --> 00:07:21.940
And they both have a nib file
for specifying the interface.

00:07:21.940 --> 00:07:24.400
These new shell actions
are the same general idea,

00:07:24.400 --> 00:07:27.830
except that there's always a file
in there called main.command.

00:07:27.840 --> 00:07:28.820
You can't really change this name.

00:07:28.820 --> 00:07:30.130
It has to be main.command.

00:07:30.140 --> 00:07:33.980
But you can add whatever Perl code
or shell code or awk or grep or

00:07:33.980 --> 00:07:38.290
t-rof or whatever you want in there
to produce a graphical action.

00:07:38.320 --> 00:07:40.850
Who enjoys talking like a
caveman when they're talking

00:07:40.900 --> 00:07:42.620
about Unix command line things?

00:07:42.620 --> 00:07:44.050
Awk, grep, trough.

00:07:44.120 --> 00:07:46.510
Ask me why it's called awk.

00:07:46.620 --> 00:07:48.050
No, ask me why it's called grep.

00:07:48.150 --> 00:07:48.430
That's even better.

00:07:48.460 --> 00:07:50.340
Why is it called grep?

00:07:52.780 --> 00:07:57.490
I don't know why people
find this to be difficult.

00:07:57.610 --> 00:08:03.510
I mean, this is the power of Macintosh
and the simplicity of Unix

00:08:03.510 --> 00:08:06.630
all rolled in together here.

00:08:08.440 --> 00:08:11.680
These actions you're going
to find are describing what

00:08:11.770 --> 00:08:13.530
application they belong to.

00:08:13.650 --> 00:08:16.900
Now the shell ones that we're
going to write don't really

00:08:16.900 --> 00:08:19.040
belong to an actual application.

00:08:19.040 --> 00:08:22.460
They're going to be marked as
if they belong to terminal,

00:08:22.460 --> 00:08:25.110
but they're not really running terminal.

00:08:25.110 --> 00:08:27.890
But you'll see them in
the terminal category.

00:08:27.960 --> 00:08:29.580
And actions also talk about types
of input and types of output.

00:08:29.580 --> 00:08:29.580
And all that stuff is
in the Info.plist file.

00:08:29.580 --> 00:08:29.580
And somewhere else is the
actual executable code.

00:08:30.140 --> 00:08:31.240
We script people.

00:08:31.240 --> 00:08:34.010
We love the ones that handle text.

00:08:34.380 --> 00:08:37.000
Take text as input, write text as output.

00:08:37.070 --> 00:08:39.280
Lots of certain Automator
Actions produce text already,

00:08:39.280 --> 00:08:40.410
but there are plenty
of others that don't.

00:08:40.560 --> 00:08:43.580
We get to write our own text actions
here that talk to each other via

00:08:43.740 --> 00:08:47.000
standard input and standard output,
if you're familiar with that

00:08:47.000 --> 00:08:48.660
idea from shell programming.

00:08:50.340 --> 00:08:52.900
Perhaps this reminds you of Unix pipes.

00:08:52.900 --> 00:08:54.440
Does anyone have Unix pipes?

00:08:54.440 --> 00:08:57.480
Little blobs of useful functionality
that you string together,

00:08:57.480 --> 00:09:00.630
the data flows through from
the top down to the bottom.

00:09:00.660 --> 00:09:04.190
I've been learning recently,
I was trying to think of a good example,

00:09:04.290 --> 00:09:07.260
and I've been quite interested
recently in the pancreas.

00:09:07.260 --> 00:09:09.140
I've been learning quite a
bit about the pancreas lately.

00:09:09.860 --> 00:09:12.320
And I was considering constructing
some kind of a workflow that sort

00:09:12.320 --> 00:09:14.720
of mimicked the digestive system,
where you have a mouth and a

00:09:14.720 --> 00:09:17.580
throat object and a stomach,
and a pancreas object would

00:09:17.580 --> 00:09:20.590
secrete enzyme objects into
this small intestine object.

00:09:20.630 --> 00:09:24.320
And I decided not to do that particular
demo because that particular workflow

00:09:24.320 --> 00:09:26.290
often reverses and goes the other way.

00:09:29.220 --> 00:09:32.650
Automator is very much a one-way process,
much like a traditional Unix script.

00:09:32.740 --> 00:09:35.290
This is the actual first Unix
script I ever saw in London,

00:09:35.290 --> 00:09:39.120
Ontario, at a meeting of some group
where Brian Kernighan,

00:09:39.120 --> 00:09:41.360
one of the fathers of Unix,
came to speak,

00:09:41.360 --> 00:09:43.560
and he talked about software tools.

00:09:44.510 --> 00:09:48.370
And the whole software tools idea was
an approach where you wrote little tools

00:09:48.410 --> 00:09:49.960
that did one thing and one thing well.

00:09:50.010 --> 00:09:53.640
He got talking about all these odd
tools like cat and tr and sort,

00:09:53.640 --> 00:09:56.380
and my first reaction was that, you know,
what kind of an idiotic

00:09:56.380 --> 00:09:57.450
name for a command is cat?

00:09:57.750 --> 00:10:00.240
Short for catnate,
which is apparently a word

00:10:00.240 --> 00:10:01.920
that means produce text.

00:10:01.920 --> 00:10:03.810
And he told us about
all these little tools,

00:10:03.810 --> 00:10:05.680
and he types this little
pipe on the flight,

00:10:05.830 --> 00:10:06.780
type, type, type.

00:10:06.780 --> 00:10:08.580
And I don't quite get what this is.

00:10:08.580 --> 00:10:09.900
The first one is displaying a file.

00:10:09.980 --> 00:10:13.830
The second one, he assured me,
was translating everything that

00:10:13.830 --> 00:10:15.920
wasn't a character to a new line.

00:10:15.920 --> 00:10:18.730
In effect, putting everything that wasn't
alphabetic became a new line so that

00:10:18.730 --> 00:10:20.120
the words would be one on the line.

00:10:20.120 --> 00:10:21.820
The third one is making
everything lowercase,

00:10:21.820 --> 00:10:24.270
and then we're sorting them,
and then we're uniquing them to

00:10:24.270 --> 00:10:27.170
make sure there's no more than
one adjacent occurrence of a word.

00:10:27.230 --> 00:10:29.690
And then we're comparing them
to the system dictionary.

00:10:29.700 --> 00:10:30.610
So what is this doing?

00:10:30.890 --> 00:10:32.760
Spell checking, right?

00:10:32.760 --> 00:10:36.690
It's a bunch of little tools that
perform spell checking in this way.

00:10:36.700 --> 00:10:39.960
And I saw that example, and I thought,
let's, you could actually do this.

00:10:39.960 --> 00:10:41.630
Let's do that today in Automator.

00:10:41.630 --> 00:10:43.400
Let's do that today in Automator.

00:10:43.630 --> 00:10:45.600
Got to start somewhere.

00:10:45.600 --> 00:10:48.970
We'll start with a
30-year-old shell script.

00:10:52.510 --> 00:10:53.490
So let's see.

00:10:53.910 --> 00:10:54.430
Little tip for you.

00:10:54.490 --> 00:10:58.240
By the way, you can save interesting
workflows down here in Automator

00:10:58.270 --> 00:11:00.960
and replay them on demand.

00:11:00.980 --> 00:11:03.710
You can actually double click
here and individually put these

00:11:03.710 --> 00:11:05.620
items into your current workflow.

00:11:05.620 --> 00:11:08.340
Seriously, if you have actions
that you've customized,

00:11:08.340 --> 00:11:11.170
your favorite collections of actions,
put them into one big, hog,

00:11:11.180 --> 00:11:13.360
and pointless workflow,
whether it makes any sense or not,

00:11:13.360 --> 00:11:14.460
and then keep that down here.

00:11:14.460 --> 00:11:17.560
You've now got your own private
little library of my favorite

00:11:17.560 --> 00:11:20.940
10 of the 150 Automator Actions.

00:11:21.380 --> 00:11:23.230
So if we wanted to do spell
checking in the Unix way,

00:11:23.230 --> 00:11:26.940
we might start out by getting the
contents of a text edit document.

00:11:27.040 --> 00:11:28.300
I have a text edit document here.

00:11:28.300 --> 00:11:34.380
I'm not a very good speller,
but I was reviewing the names

00:11:34.380 --> 00:11:37.520
of various Mac OS X releases.

00:11:37.580 --> 00:11:37.810
Text edit document.

00:11:38.610 --> 00:11:41.100
And then we want to run a Unix script.

00:11:41.130 --> 00:11:43.170
We want to do the exact same
thing that we saw in that pipe.

00:11:43.250 --> 00:11:47.970
We want to essentially convert all of the
non-alphabetic characters to new lines,

00:11:47.970 --> 00:11:50.070
so all the words will be one on a line.

00:11:50.330 --> 00:11:51.330
And then we want to run another one.

00:11:51.330 --> 00:11:52.660
We want to make all the words lowercase.

00:11:52.660 --> 00:11:55.160
This is running the TR program
to make everything lowercase.

00:11:55.240 --> 00:11:56.710
Then we're going to sort them
and we're going to unique them.

00:11:56.720 --> 00:11:59.920
And so you see I'm adding individual
stages to my Automator workflow that

00:11:59.950 --> 00:12:04.670
really are being hooked up like pipes
in the traditional Unix piping process.

00:12:05.210 --> 00:12:06.100
Sorry?

00:12:07.000 --> 00:12:07.100
Zoom.

00:12:07.100 --> 00:12:08.100
Zoom, zoom, zoom.

00:12:08.100 --> 00:12:09.100
Here we go.

00:12:09.100 --> 00:12:10.100
So these are all pretty boring.

00:12:10.100 --> 00:12:11.660
I mean,
they're a little -- I'm giving you --

00:12:11.660 --> 00:12:14.690
I could do -- is this giving anyone a

00:12:16.620 --> 00:12:20.260
Are you loving the year of HD where
we're using even smaller fonts than we

00:12:20.260 --> 00:12:21.700
ever did before just because we can?

00:12:21.830 --> 00:12:23.250
Isn't that exciting?

00:12:23.370 --> 00:12:25.580
How about I zoom out a little bit there?

00:12:25.820 --> 00:12:28.540
Each of these is one of these run
shell script stages where I've

00:12:28.540 --> 00:12:30.830
typed in a little fragment of
shell script and the output of one

00:12:30.830 --> 00:12:32.130
becomes the input of the next one.

00:12:32.220 --> 00:12:35.760
Very much like that Unix pipeline.

00:12:35.760 --> 00:12:39.510
And the final one is perhaps the most
useful Automator stage of the 150,

00:12:39.590 --> 00:12:40.570
view results.

00:12:40.660 --> 00:12:42.520
You're going to find
yourself using this a lot.

00:12:42.520 --> 00:12:44.520
This is a stage you can
drop in and it just says,

00:12:44.520 --> 00:12:45.390
here's what I got.

00:12:45.550 --> 00:12:46.800
Here's what I got from
the previous stage.

00:12:46.800 --> 00:12:49.680
It will, if you like,
pass it along to the next stage.

00:12:49.680 --> 00:12:52.450
So it's a fine debugging tool to
drop here and there in Automator.

00:12:52.460 --> 00:12:53.670
So I'm going to run this.

00:12:53.700 --> 00:12:54.390
Let's try running this.

00:12:54.420 --> 00:12:56.100
And hopefully we come up
with a few misspelled words.

00:12:56.100 --> 00:12:57.140
Oh, there we go.

00:12:57.140 --> 00:12:57.900
A few misspelled words.

00:12:57.900 --> 00:13:00.000
The word and is apparently
not in the system dictionary.

00:13:00.000 --> 00:13:01.680
That's most unfortunate.

00:13:01.680 --> 00:13:04.400
Huh?

00:13:04.400 --> 00:13:05.340
That's better.

00:13:08.200 --> 00:13:10.220
was doing so well, boy.

00:13:10.230 --> 00:13:11.120
And we'll add View Results.

00:13:11.190 --> 00:13:12.340
Thank you,
we're comparing it to the dictionary,

00:13:12.340 --> 00:13:14.210
then we're gonna View Results.

00:13:14.630 --> 00:13:16.000
I thought and was a
correctly spelled word.

00:13:16.000 --> 00:13:16.720
I was really quite confident.

00:13:16.760 --> 00:13:17.820
Thank you.

00:13:17.820 --> 00:13:18.420
I can't spell it all.

00:13:18.510 --> 00:13:20.020
Now stop.

00:13:20.020 --> 00:13:22.160
No, I mean,
you could do that on the command line.

00:13:22.180 --> 00:13:23.680
Why is this necessarily a big deal?

00:13:23.680 --> 00:13:26.670
Well, it's the same sort of
idea as Unix piping.

00:13:26.680 --> 00:13:27.690
I'm going to let you in on a secret.

00:13:27.810 --> 00:13:31.620
Automator was originally
designed as a tool for stringing

00:13:31.620 --> 00:13:33.480
shell scripts together.

00:13:33.480 --> 00:13:36.060
All this Apple script and Cocoa stuff,
with all due respect to the

00:13:36.060 --> 00:13:38.530
many fine Apple script and
Cocoa programmers here in the room,

00:13:38.560 --> 00:13:41.110
was kind of an afterthought
that was bolted onto this site.

00:13:41.180 --> 00:13:43.600
It's primarily a shell scripting tool.

00:13:43.600 --> 00:13:44.540
I think it's misunderstood.

00:13:44.600 --> 00:13:48.270
It was, what is the Automator
guy holding in the icon?

00:13:48.280 --> 00:13:49.040
He's holding a pipe.

00:13:49.110 --> 00:13:50.950
He's holding a section of pipe.

00:13:54.720 --> 00:13:57.260
It used to be called,
anybody know what it used to be called?

00:13:57.280 --> 00:13:58.330
It used to be called Pipeline.

00:13:58.330 --> 00:13:59.770
That's right,
it used to be called Pipeline.

00:13:59.770 --> 00:14:03.030
Then after that it was called Executor,
briefly.

00:14:03.030 --> 00:14:05.890
And after that it was called,
for a brief two-hour period,

00:14:05.890 --> 00:14:09.080
Apple Script Composer, I think,
and that was short-lived.

00:14:09.080 --> 00:14:11.630
Then it got renamed to,
I can't even remember what it is now,

00:14:11.630 --> 00:14:12.280
Automator.

00:14:12.280 --> 00:14:14.480
Last year at WWDC there
had been all these changes.

00:14:14.480 --> 00:14:17.520
Anybody who was talking about this tool,
you could detect them pausing when

00:14:17.590 --> 00:14:20.620
they stated the name of the program
because they had to think for a moment,

00:14:20.760 --> 00:14:22.100
what was it called now?

00:14:22.100 --> 00:14:26.360
And I have it on pretty good authority
that the Automator team actually wrote an

00:14:26.360 --> 00:14:30.810
Automator Workflow to rename all the code
in the project as the API kept changing,

00:14:30.810 --> 00:14:31.580
you know?

00:14:34.090 --> 00:14:36.000
Glad they haven't had to
run that program this year.

00:14:36.020 --> 00:14:37.120
So there's my little Unix pipe.

00:14:37.120 --> 00:14:38.840
But really, we can do better.

00:14:38.840 --> 00:14:41.570
This isn't a pipe
I would expect to share,

00:14:41.580 --> 00:14:42.860
necessarily, with other people.

00:14:42.860 --> 00:14:46.860
I wouldn't want to call you and say,
type in tr A to Z A to Z.

00:14:46.860 --> 00:14:48.560
No, no, no, capital A, capital Z.

00:14:48.560 --> 00:14:50.040
No, no, with a space in between them.

00:14:50.040 --> 00:14:52.120
I'm not going to expect
people to type that in.

00:14:52.160 --> 00:14:55.040
But I happen to have pre-built a
number of Automator actions that

00:14:55.040 --> 00:14:57.040
do many of these same things.

00:14:57.040 --> 00:15:00.040
Like, for instance,
in my terminal category over here,

00:15:00.040 --> 00:15:02.490
I can delete these two,
the ones that put them one word to a

00:15:02.500 --> 00:15:04.880
line-- I'll take that one out-- and
the one that makes them all lowercase.

00:15:04.880 --> 00:15:06.620
Because I happen to
have written an action,

00:15:06.620 --> 00:15:10.140
one of these shell actions,
called convert words of text.

00:15:10.350 --> 00:15:13.210
And this is really running those
exact same tools under the covers,

00:15:13.210 --> 00:15:15.980
except you get a little bit of a UI that
was designed here in Interface Builder.

00:15:15.980 --> 00:15:18.000
I want to convert them
to one word per line,

00:15:18.000 --> 00:15:19.300
remove punctuation.

00:15:19.300 --> 00:15:20.600
What kind of case do you want to make?

00:15:20.600 --> 00:15:21.800
I want to make them lowercase.

00:15:21.800 --> 00:15:24.970
So there's a better looking action
that does very much the same thing.

00:15:25.190 --> 00:15:27.590
In fact, if I run this workflow,
since all these actions are

00:15:27.640 --> 00:15:30.840
producing text and emitting text,
it still produces the same list

00:15:31.130 --> 00:15:32.700
of misspelled words at the bottom.

00:15:32.700 --> 00:15:33.120
I think you would agree.

00:15:33.120 --> 00:15:35.960
This one's a little easier to manipulate,
and in particular,

00:15:35.960 --> 00:15:39.160
to share with other users than
anything based on the shell

00:15:39.160 --> 00:15:40.200
script actually would be.

00:15:40.200 --> 00:15:42.290
I'm going to teach you how to
design things like this so that

00:15:42.340 --> 00:15:45.340
you can wrap these shell commands
with a nice graphical interface,

00:15:45.360 --> 00:15:46.520
give those to other people.

00:15:46.520 --> 00:15:47.980
I can delete these other ones, too.

00:15:47.980 --> 00:15:50.200
This one sorts,
and this one uniques them.

00:15:50.200 --> 00:15:53.640
I happen to have one here called
sort items that you can say,

00:15:53.820 --> 00:15:55.600
on what column do you
want to sort them on?

00:15:55.600 --> 00:15:57.020
Do you want to go forwards or backwards?

00:15:57.020 --> 00:15:58.050
Let's remove the duplicates.

00:15:58.150 --> 00:15:59.520
So there we go, the same way.

00:15:59.520 --> 00:16:05.430
You build up over a while a collection of
these little text processing actions that

00:16:05.460 --> 00:16:07.120
I think makes your life a lot easier.

00:16:07.120 --> 00:16:10.860
I think I've finally reached Automator
nirvana in that I can write a workflow

00:16:10.870 --> 00:16:14.420
now without having to stop partway
through and invent a new action.

00:16:14.420 --> 00:16:16.640
There was a long time there where
I'd have something I wanted to do,

00:16:16.640 --> 00:16:18.220
and I'd get partway into it,
and I'd think, gosh,

00:16:18.220 --> 00:16:21.280
this would be a great
shell action in Automator.

00:16:21.280 --> 00:16:23.120
And I'd dash off into the tool
and actually build things.

00:16:23.120 --> 00:16:25.730
But once you get your own little
library of these things together,

00:16:25.760 --> 00:16:26.960
you can start sharing
them with other people,

00:16:26.960 --> 00:16:27.200
too.

00:16:27.200 --> 00:16:29.560
You can take each of these actions
and put them in Library Automator,

00:16:29.560 --> 00:16:31.200
and other people can run them as well.

00:16:31.200 --> 00:16:32.240
If we could go back to the slides,
please.

00:16:32.240 --> 00:16:32.400
So.

00:16:37.390 --> 00:16:39.060
So how do these things actually work?

00:16:39.150 --> 00:16:41.320
Good question.

00:16:41.340 --> 00:16:43.940
This is the new run shell script action.

00:16:43.940 --> 00:16:46.360
Let me talk about the one where you
just type a fragment of shell script

00:16:46.490 --> 00:16:48.950
for a moment before we discuss the
ones where you actually build a

00:16:48.950 --> 00:16:51.180
GUI that talks to the shell script.

00:16:52.570 --> 00:16:55.240
This is a simple action with a
text field in it where you can

00:16:55.240 --> 00:16:57.670
type up a little bit of shell,
a little bit of perl,

00:16:57.670 --> 00:16:59.900
a little bit of awk, whatever you like.

00:16:59.980 --> 00:17:03.100
Choose how you want the input
to be handled as command line

00:17:03.100 --> 00:17:06.240
arguments or as standard input,
and it will pass it on to the next

00:17:06.240 --> 00:17:08.340
Automator Action in the workflow.

00:17:08.340 --> 00:17:11.400
You have a choice of a whole
bunch of interesting scripting

00:17:11.400 --> 00:17:13.030
languages on Mac OS X.

00:17:13.040 --> 00:17:15.790
In fact,
this new version of run-shell script

00:17:15.790 --> 00:17:19.380
that you're going to get real soon
now actually comes with a bunch of

00:17:19.420 --> 00:17:21.240
templates for different languages.

00:17:21.390 --> 00:17:24.080
These are individual templates
for a variety of different

00:17:24.190 --> 00:17:26.360
programming languages.

00:17:26.360 --> 00:17:26.860
Oh, boy.

00:17:26.860 --> 00:17:28.100
Hands off the build.

00:17:28.100 --> 00:17:28.740
Don't clap.

00:17:30.400 --> 00:17:35.900
[Transcript missing]

00:17:38.600 --> 00:17:39.540
I think I've blown it again.

00:17:39.680 --> 00:17:39.910
You know what?

00:17:39.980 --> 00:17:42.690
This is an automatic build, isn't it?

00:17:42.700 --> 00:17:44.480
Oh, I need a workflow here.

00:17:44.610 --> 00:17:47.740
I need a workflow to pause the,
don't go to the next slide unless

00:17:47.740 --> 00:17:49.920
at least five seconds have elapsed.

00:17:50.360 --> 00:17:51.640
Whew, there we go.

00:17:51.660 --> 00:17:54.240
These are examples in Automator
of this new shell scripting.

00:17:54.240 --> 00:17:57.100
You can choose a scripting
language on that little pop-up,

00:17:57.110 --> 00:17:59.900
and you can choose whether you
want to handle input as standard

00:17:59.900 --> 00:18:02.690
input or as individual arguments,
and it will cough up a little

00:18:02.810 --> 00:18:05.730
fragment in the appropriate
programming language for you there.

00:18:05.770 --> 00:18:09.560
The most basic one in a shell,
the one on the top left, the cat command,

00:18:09.560 --> 00:18:11.910
the good old cat command,
all it does is copies

00:18:12.410 --> 00:18:14.400
its input to its output.

00:18:14.430 --> 00:18:15.640
Maybe a good one to try first.

00:18:15.640 --> 00:18:18.960
I wouldn't try selling
that one necessarily.

00:18:19.780 --> 00:18:20.840
But it gives you a start.

00:18:20.870 --> 00:18:22.530
Now,
I enjoyed the Ruby ones at the bottom.

00:18:22.560 --> 00:18:24.600
I stared at these two
Ruby examples for the longest time,

00:18:24.600 --> 00:18:25.880
not knowing a lot about Ruby.

00:18:25.970 --> 00:18:27.890
And I was this close to
filing a bug report claiming

00:18:27.950 --> 00:18:30.190
that they were both the same,
that we'd done something wrong.

00:18:30.200 --> 00:18:34.200
We had the same thing for standard
input and for command line arguments.

00:18:34.200 --> 00:18:37.290
It turns out there is an F in
that one and a V in that one

00:18:37.290 --> 00:18:39.410
that I almost didn't quite see.

00:18:39.410 --> 00:18:39.410
Anyway.

00:18:39.750 --> 00:18:40.540
I enjoy Ruby.

00:18:40.540 --> 00:18:42.300
Are there any actual
Ruby programmers here?

00:18:42.300 --> 00:18:43.740
It seems to have a lot
of coolness about it.

00:18:43.740 --> 00:18:45.140
Is that true?

00:18:45.150 --> 00:18:45.970
Yeah?

00:18:46.060 --> 00:18:48.520
Am I gonna like it better than Python?

00:18:48.520 --> 00:18:50.000
Perl?

00:18:50.300 --> 00:18:58.810
Boren Shell and VI is the
king of integrated development

00:18:58.810 --> 00:18:58.810
environments as well.

00:18:59.780 --> 00:19:00.540
Oh, who's hissing?

00:19:00.540 --> 00:19:04.310
Are there Emacs programmers,
users in here?

00:19:04.450 --> 00:19:07.400
VI, VI users?

00:19:07.510 --> 00:19:09.490
Who calls it VI?

00:19:09.570 --> 00:19:11.600
Who calls it SIX?

00:19:16.820 --> 00:19:17.300
I used to.

00:19:17.300 --> 00:19:19.580
We Canadians, we often pronounce things
in interesting ways.

00:19:19.580 --> 00:19:21.300
For a long time we were saying
"Project Builder" and that

00:19:21.300 --> 00:19:22.330
was freaking everybody out.

00:19:22.340 --> 00:19:25.820
We were saying "Java." "Java" and
"Project Builder." I'd do sessions,

00:19:25.820 --> 00:19:28.180
they wouldn't know what the
heck I was talking about.

00:19:28.180 --> 00:19:30.170
So I've decided,
and I'd like the Canadians in the

00:19:30.170 --> 00:19:32.240
room to back me up here to preserve
this notion that we pronounce

00:19:32.360 --> 00:19:38.690
things differently in Canada,
we call it "XCOD." Is that right?

00:19:40.320 --> 00:19:43.220
Anyway, there's two basic styles of
writing one of these scripts.

00:19:43.220 --> 00:19:46.860
Do you want the input to your
script to come on standard input,

00:19:46.860 --> 00:19:48.690
or do you want it to come
as command line arguments?

00:19:48.720 --> 00:19:52.070
Experienced scripters are used to kind
of flipping a coin in a lot of scenarios,

00:19:52.070 --> 00:19:53.320
which way they want to do it.

00:19:53.400 --> 00:19:57.940
And Automator gives you templates
to get you started in either case.

00:19:57.940 --> 00:19:59.960
You want to know which
way you want to use.

00:20:00.000 --> 00:20:02.290
I think it's going to depend on
the kind of action you're writing.

00:20:02.300 --> 00:20:04.450
If you're writing the sort of
action that's going to process

00:20:04.490 --> 00:20:08.140
a whole body of text at once,
and you've got some Unix commands in mind

00:20:08.140 --> 00:20:11.070
that are already reading from standard
input and writing to standard output,

00:20:11.070 --> 00:20:12.080
like sort, for instance.

00:20:12.080 --> 00:20:16.160
That's the command that would
sort backwards on column four.

00:20:16.180 --> 00:20:20.330
That takes a body of text and sorts it
and spits it out as another body of text.

00:20:20.390 --> 00:20:21.830
I do that with standard input.

00:20:21.860 --> 00:20:25.560
But if I wanted to process a list of
each lines individually in some way,

00:20:25.560 --> 00:20:28.760
I'd probably do it as individual
command line arguments.

00:20:28.800 --> 00:20:31.330
I'd click the other option on that thing,
and they would be fed to my script.

00:20:32.070 --> 00:20:35.570
As individual command line parameters
that I could loop through in that way.

00:20:35.600 --> 00:20:37.310
I think it's going to be
different in every case,

00:20:37.310 --> 00:20:39.060
so don't look for a blanket
recommendation for me

00:20:39.060 --> 00:20:40.080
as to which is better.

00:20:40.080 --> 00:20:42.280
Those are the basic run
shell script actions,

00:20:42.280 --> 00:20:46.200
but most of the ones I was showing you
were little GUIs with Interface Builder.

00:20:46.200 --> 00:20:47.300
How is that actually working?

00:20:47.300 --> 00:20:47.810
Let's talk about that.

00:20:49.540 --> 00:20:52.330
Well, with Run Shell Script,
you've got a script where you type

00:20:52.330 --> 00:20:53.950
a script like that and away it goes.

00:20:54.030 --> 00:20:56.050
There's not really any user interface.

00:20:56.080 --> 00:20:58.540
With these shell script actions,
you design a little nib

00:20:58.540 --> 00:21:00.860
file in Interface Builder,
make it look really nice,

00:21:00.870 --> 00:21:03.460
you make it look really bulletproof
so that people can't type

00:21:03.460 --> 00:21:06.250
words into fields that are only
supposed to have numbers in them,

00:21:06.250 --> 00:21:07.260
for instance.

00:21:07.260 --> 00:21:10.770
And you arrange via the miracle
of Cocoa Bindings to have the

00:21:11.080 --> 00:21:14.920
selections the user has chosen in
the UI be reflected as environment

00:21:14.930 --> 00:21:17.030
variables for your shell script.

00:21:17.270 --> 00:21:19.120
This is really pretty slick.

00:21:19.180 --> 00:21:20.830
So here's an example.

00:21:20.920 --> 00:21:22.420
This is a sorting items action.

00:21:22.430 --> 00:21:23.160
It's got some options.

00:21:23.160 --> 00:21:24.300
What column do you want to sort on?

00:21:24.300 --> 00:21:25.340
Do you want to go forwards or backwards?

00:21:25.340 --> 00:21:27.560
And we'll build something kind
of like this in a few minutes.

00:21:27.560 --> 00:21:29.230
So how does this actually work?

00:21:29.310 --> 00:21:32.170
In Interface Builder,
you set up what we call Cocoa Bindings

00:21:32.170 --> 00:21:35.100
that associate items in the
user interface with a particular

00:21:35.100 --> 00:21:37.240
property that you want to,
or I should say,

00:21:37.240 --> 00:21:39.820
a parameter you want to be
available in the shell script.

00:21:39.920 --> 00:21:44.320
So as an Interface Builder developer,
I would be sketching out my UI like that.

00:21:44.380 --> 00:21:46.960
And in the Bindings
Inspector in Interface Builder,

00:21:46.960 --> 00:21:47.630
I would say, you know what?

00:21:47.700 --> 00:21:50.950
I want whatever you type in that
box to be bound to a parameter

00:21:50.950 --> 00:21:52.720
called sort column over here.

00:21:52.720 --> 00:21:54.980
I get to pick that name, sort column.

00:21:55.020 --> 00:21:57.970
And I would go through that for
all the various items in my UI.

00:21:57.970 --> 00:22:02.020
I would set up bindings that say that
thing should be called remove duplicates.

00:22:02.020 --> 00:22:05.460
That other thing should
be called direction.

00:22:05.460 --> 00:22:08.520
And that's going to be bound to
either the word forwards or backwards,

00:22:08.520 --> 00:22:08.910
let's say.

00:22:08.910 --> 00:22:12.560
So you build a bunch of these bindings
using Cocoa Bindings techniques.

00:22:12.610 --> 00:22:15.180
And at the time that your
script actually runs,

00:22:15.180 --> 00:22:18.280
Automator collects the values
of everything in the user

00:22:18.280 --> 00:22:19.420
interface as a bunch of pairs.

00:22:19.420 --> 00:22:21.300
In this case, the sort column is one.

00:22:21.300 --> 00:22:23.840
The direction is zero because
you can ask for the index of

00:22:23.840 --> 00:22:26.720
the selected pop-up rather than
the word that's on the pop-up.

00:22:26.730 --> 00:22:28.180
That's sometimes easier.

00:22:28.180 --> 00:22:31.640
Anyway, Automator goes through and builds
a bunch of these keys and values.

00:22:31.640 --> 00:22:32.500
What's in your UI?

00:22:32.500 --> 00:22:34.130
What parameters did we want to set?

00:22:34.130 --> 00:22:36.980
Set up some keys and values and
hand them to the shell script.

00:22:37.200 --> 00:22:41.470
And then when your shell script,
remember it's always called main.command,

00:22:41.470 --> 00:22:44.530
when it runs, it's getting input from
the previous stage,

00:22:44.530 --> 00:22:48.000
and it can refer to these environment
variables in the born shell.

00:22:48.000 --> 00:22:49.740
You would just say
dollar sign sort column.

00:22:49.740 --> 00:22:52.340
And that's going to be a one, a two,
a three, a four.

00:22:52.340 --> 00:22:54.820
It's going to be whatever the user
typed in that box is going to be

00:22:54.830 --> 00:22:57.570
provided to the shell script as an
environment variable called sort

00:22:57.570 --> 00:22:59.210
column because of the binding.

00:22:59.210 --> 00:23:02.650
And then as the developer of this script,
I can just use the dollar sign sort

00:23:02.660 --> 00:23:06.640
column notation to retrieve the value
of that particular environment variable.

00:23:07.230 --> 00:23:10.000
The syntax for environment variables
will be a little different in Perl.

00:23:10.000 --> 00:23:11.700
You've got an associative
array called env,

00:23:11.700 --> 00:23:13.080
and you look things up by name.

00:23:13.080 --> 00:23:15.590
But every scripting language
has some way to retrieve the

00:23:15.680 --> 00:23:17.270
value of an environment variable.

00:23:17.320 --> 00:23:19.420
And that's what you're getting from
these shell script actions as they run.

00:23:19.690 --> 00:23:22.350
Then my thing sorts its input that
it got from the previous stage,

00:23:22.350 --> 00:23:23.590
writes it to the output.

00:23:23.590 --> 00:23:25.280
And away we go.

00:23:27.110 --> 00:23:31.280
It wouldn't be much fun if all we
could deal with were text coming in.

00:23:31.370 --> 00:23:32.480
Text, well, it would be fun for me.

00:23:32.540 --> 00:23:36.050
But it wouldn't be much fun for many of
the users of Mac OS X who are used to

00:23:36.050 --> 00:23:38.370
dealing with other things than just text.

00:23:38.380 --> 00:23:40.790
Automator has a lot of actions
that talk about other things.

00:23:40.800 --> 00:23:43.000
They talk about pictures,
and they talk about photos,

00:23:43.000 --> 00:23:44.660
they talk about files in the finder.

00:23:44.660 --> 00:23:45.940
We need a way to cope with that.

00:23:46.500 --> 00:23:48.670
Fortunately,
Automator comes with 18 skillion

00:23:48.760 --> 00:23:51.990
conversion actions that can
convert from different types to,

00:23:52.270 --> 00:23:54.220
eventually, a text representation.

00:23:54.820 --> 00:23:57.990
They can convert from a file
that's selected in the finder

00:23:58.150 --> 00:24:03.430
into the Unix path of that file,
/volumes/steves/foo/bar, like that.

00:24:03.670 --> 00:24:05.660
Not the AppleScript way with
the colons and everything,

00:24:05.660 --> 00:24:07.250
that I can't really,
not my favorite way of

00:24:07.250 --> 00:24:09.620
referring to a path name,
but they'll actually wind up giving

00:24:09.620 --> 00:24:12.870
you a proper Unix path because
of these conversions that go

00:24:12.870 --> 00:24:15.760
from file system objects to text.

00:24:16.380 --> 00:24:18.150
It's very common to have a
workflow where you've got an

00:24:18.150 --> 00:24:19.640
item that's referring to files.

00:24:19.640 --> 00:24:21.550
There's one called
Get Selected Finder Items.

00:24:21.560 --> 00:24:24.110
Already in Automator,
that's asking the finder

00:24:24.230 --> 00:24:25.380
which items are selected.

00:24:25.380 --> 00:24:27.740
It's going to make a list of them
and pass them to the next action.

00:24:27.760 --> 00:24:31.500
If I'm writing a shell action,
I would prefer to get not

00:24:31.500 --> 00:24:34.160
some Apple script idea of
record objects or something,

00:24:34.160 --> 00:24:36.230
but a list of the actual Unix path names.

00:24:36.280 --> 00:24:40.320
This will be accomplished magically
by a conversion that's tossed in there

00:24:40.320 --> 00:24:41.900
in the middle by Automator for you.

00:24:41.900 --> 00:24:44.360
So there's a lot of interesting
conversions in the system.

00:24:44.440 --> 00:24:47.330
If you look in System Library Automator,
you'll see a bunch of actions

00:24:47.330 --> 00:24:48.670
that end in .c action.

00:24:48.700 --> 00:24:50.600
These are all conversions
that will secretly go from

00:24:50.600 --> 00:24:51.660
one data type to another.

00:24:53.620 --> 00:24:56.740
You can get from many...
Here's the interesting thing.

00:24:56.740 --> 00:24:57.860
I drew this diagram.

00:24:57.890 --> 00:25:00.920
I actually wrote... Now call
me a geek if you must.

00:25:02.090 --> 00:25:05.340
But I actually wrote a shell script that
crawled through all the conversions,

00:25:05.380 --> 00:25:08.710
looked at the Info.plist entries
to decide what conversions

00:25:08.710 --> 00:25:11.970
went from what to what,
and used OmniGraffle to build a big

00:25:11.970 --> 00:25:14.030
diagram of what I could convert.

00:25:14.250 --> 00:25:17.460
And then the real heroes of WWDC,
if you ask any of the presenters,

00:25:17.460 --> 00:25:20.000
the real heroes are the people from
a graphics company called Duarte

00:25:20.040 --> 00:25:23.780
Design who do a marvelous job of
fixing up all of our diagrams.

00:25:23.780 --> 00:25:27.780
And you're about to see the
diagram that the guy drew for me,

00:25:27.780 --> 00:25:31.550
and it made me weep with delight when
I saw what he'd done with this diagram.

00:25:31.560 --> 00:25:32.950
It was fabulous,
except all the arrows were

00:25:32.950 --> 00:25:34.790
pointing in the wrong direction,
and it was kind of making

00:25:34.790 --> 00:25:36.850
the exact opposite point that
I actually wanted to make.

00:25:36.860 --> 00:25:39.120
But it was such a beautiful
diagram when he was done with

00:25:39.170 --> 00:25:41.880
it that I thought I would change
my talk to match the diagram.

00:25:44.240 --> 00:25:46.990
But he gave me this--
I like this transition.

00:25:48.250 --> 00:25:50.630
So there's a whole lot of
Automator Transitions out there.

00:25:50.640 --> 00:25:53.940
The ones in red and green and blue are
the ones that can actually ultimately

00:25:53.940 --> 00:25:56.970
get converted to a text object,
which is the kind that we want.

00:25:57.080 --> 00:25:59.810
So you can deal with iTunes tracks,
because those represent

00:25:59.820 --> 00:26:00.950
files on the file system.

00:26:01.010 --> 00:26:02.370
For instance,
you can deal with individual

00:26:02.470 --> 00:26:04.100
iPhotos in a shell action,
because they're stored

00:26:04.210 --> 00:26:04.820
as a file somewhere.

00:26:04.820 --> 00:26:06.920
Eventually,
the path name of that file will

00:26:07.080 --> 00:26:10.430
fall through this conversion system
and wind up being presented to your

00:26:10.430 --> 00:26:14.180
shell-based action as a Unix path.

00:26:15.080 --> 00:26:17.240
So let's talk about a couple of the
existing actions that are in there.

00:26:17.240 --> 00:26:20.410
I showed you the Run Shell Script action
already where you can type a fragment

00:26:20.410 --> 00:26:21.620
of shell script and away it goes.

00:26:21.790 --> 00:26:23.240
Another good one is Run AppleScript.

00:26:23.310 --> 00:26:24.100
I like AppleScript.

00:26:24.100 --> 00:26:25.550
I like it quite a lot.

00:26:25.690 --> 00:26:31.760
It's a mutant moon language
from the planet Sedna,

00:26:31.760 --> 00:26:31.760
but I like it quite a lot.

00:26:32.470 --> 00:26:34.660
Seriously Sal, I love Apple Scripts.

00:26:34.660 --> 00:26:35.300
Sal does a great job.

00:26:35.300 --> 00:26:36.160
Who doesn't love Sal?

00:26:36.160 --> 00:26:38.150
Give it up for Sal!

00:26:42.980 --> 00:26:45.470
You don't need to know
AppleScript to Sal's level to get

00:26:45.470 --> 00:26:47.030
going with this particular action.

00:26:47.070 --> 00:26:49.250
There's a couple of very simple
things you will find handy,

00:26:49.250 --> 00:26:51.560
even if you are primarily
a shell programmer.

00:26:51.620 --> 00:26:54.930
AppleScript can do a lot
in a short period of time.

00:26:55.070 --> 00:26:56.940
This is a simple
AppleScript action that just says,

00:26:56.970 --> 00:26:58.370
return some item of input.

00:26:58.420 --> 00:27:01.140
Give me a random item from
something that came through before.

00:27:01.140 --> 00:27:03.600
But the sort of thing I think
you might actually like a lot

00:27:03.600 --> 00:27:06.330
is that AppleScript has this
thing called Do Shell Script with

00:27:06.330 --> 00:27:07.840
Administrator Privileges.

00:27:08.240 --> 00:27:11.120
You as system admins are going
to find this very useful.

00:27:11.120 --> 00:27:13.360
This is a way to run a
shell script as root.

00:27:13.430 --> 00:27:15.620
An authentication panel will pop up,
new in Tiger,

00:27:15.620 --> 00:27:17.840
the right kind of authentication
panel will pop up,

00:27:18.010 --> 00:27:19.910
and it will run that
shell script as root.

00:27:19.920 --> 00:27:22.510
So if you find yourself needing
to build a workflow that's going

00:27:22.570 --> 00:27:25.180
to do something privileged,
it's going to produce a bunch of

00:27:25.180 --> 00:27:28.190
files and you want to do something
that requires root permission,

00:27:28.220 --> 00:27:31.330
you may find it handy to package
what you need to do as a little

00:27:31.330 --> 00:27:35.640
Do Shell Script and then a string of
shell code with Administrator Privileges,

00:27:35.640 --> 00:27:36.760
and that bit will run as root.

00:27:37.360 --> 00:27:41.340
There's no direct way in Automator to
run a shell action directly as root.

00:27:41.400 --> 00:27:43.680
Although I have a couple of ideas
and I was passing them off to

00:27:43.680 --> 00:27:46.560
the Automator team and I said,
what if we did it this way?

00:27:46.560 --> 00:27:48.460
What if we hacked sudo and
we wrote something over here

00:27:48.460 --> 00:27:49.490
and I had it all working?

00:27:49.500 --> 00:27:50.340
They said, what are you crazy?

00:27:50.340 --> 00:27:51.780
That's evil.

00:27:51.780 --> 00:27:52.900
You should not encourage
people to do that.

00:27:52.940 --> 00:27:55.250
So here's my politically correct stance.

00:27:55.330 --> 00:27:58.280
This is how you can get a
shell script to run as root.

00:27:58.340 --> 00:28:00.510
And maybe there are other ways,
but I can't tell you.

00:28:00.790 --> 00:28:05.900
Talk to me later.

00:28:09.080 --> 00:28:11.340
All right,
we want to build our own actions, though.

00:28:11.550 --> 00:28:12.600
It's 2005.

00:28:12.600 --> 00:28:14.760
I'm still using the same text
editor I was using in 1981,

00:28:14.760 --> 00:28:17.840
but there has to be a new way to
actually present the input to this

00:28:17.840 --> 00:28:19.420
shell script with interface builder.

00:28:19.420 --> 00:28:21.270
That's what I want to show you.

00:28:21.920 --> 00:28:22.840
You start out in Xcode.

00:28:22.840 --> 00:28:25.090
You'll see the new shell
script Automator Action.

00:28:25.150 --> 00:28:27.490
Isn't it great that Automator is the
first thing that you see in Xcode

00:28:27.490 --> 00:28:28.980
when you're building a new project?

00:28:29.040 --> 00:28:32.300
You won't be tempted to go and write
a device driver or anything like that.

00:28:32.300 --> 00:28:35.070
You'll want to get through all these
things first before you proceed to

00:28:35.070 --> 00:28:37.100
the 40,000 other document types.

00:28:37.100 --> 00:28:39.090
We want to build shell
script Automator Actions.

00:28:39.860 --> 00:28:42.640
You're going to get a typical
Xcode window like this that

00:28:42.640 --> 00:28:44.270
has a main.command in it.

00:28:44.270 --> 00:28:45.740
That's going to be your script
that you're going to edit.

00:28:45.880 --> 00:28:48.460
It has a main.nib in it,
which is the user interface

00:28:48.460 --> 00:28:49.880
you're going to design.

00:28:49.880 --> 00:29:01.280
It has our favorite
Info.plist down at the bottom.

00:29:01.900 --> 00:29:31.800
[Transcript missing]

00:29:33.700 --> 00:29:35.860
All right, that's my spelling homework.

00:29:35.980 --> 00:29:38.830
Put that away, put that away.

00:29:39.020 --> 00:29:42.200
Eh, that was really nice, but no,
I won't save that.

00:29:42.290 --> 00:29:43.190
So here we are in Xcode.

00:29:43.230 --> 00:29:45.820
We're going to build a new...

00:29:46.470 --> 00:29:46.880
Project.

00:29:47.050 --> 00:29:47.300
Project?

00:29:47.570 --> 00:29:47.820
Project?

00:29:47.890 --> 00:29:48.390
What are we building here?

00:29:48.440 --> 00:29:49.280
A project or a pro-ject?

00:29:49.590 --> 00:29:50.900
Project.

00:29:50.960 --> 00:29:52.350
Project?

00:29:52.420 --> 00:29:54.400
Project.

00:29:54.560 --> 00:29:56.510
Get on with it.

00:29:57.500 --> 00:30:00.550
We want to build a shell
script Automator Action.

00:30:00.550 --> 00:30:01.440
Here we go.

00:30:01.540 --> 00:30:08.320
I'm going to call it "Incredible
Sorting Example of Doom." I hope

00:30:08.320 --> 00:30:12.000
there's not a limit in the length
of the name of these things here.

00:30:12.000 --> 00:30:18.040
So, here in Xcode, Xcod, here in Xcod,

00:30:18.200 --> 00:30:21.090
I'm ready to go with my main.nib,
my main.command, and my favorite,

00:30:21.130 --> 00:30:22.040
the Info.plist.

00:30:22.080 --> 00:30:25.270
And we're going to want to build
something where the user can say

00:30:25.270 --> 00:30:27.200
what column do they want to sort on.

00:30:27.240 --> 00:30:29.550
Unix has a sort command,
and you can say sort-k4,

00:30:29.560 --> 00:30:32.030
and it means sort on the
fourth column of the input.

00:30:32.040 --> 00:30:35.670
We want to have a checkbox that says do
you want to sort backwards or forwards?

00:30:35.670 --> 00:30:36.480
That's sort-r.

00:30:36.480 --> 00:30:40.390
Sort has 53 trillion different options,
and probably an Automator Action that

00:30:40.410 --> 00:30:43.390
encompassed all of those actions
would scroll beyond the limits

00:30:43.390 --> 00:30:46.460
of what we have on our cinema
displays full of checkboxes.

00:30:46.460 --> 00:30:47.690
So we're going to keep this simple.

00:30:47.710 --> 00:30:49.540
A sword action,
do you want to go forwards or backwards,

00:30:49.560 --> 00:30:51.410
and on what column?

00:30:54.890 --> 00:30:55.800
What's the column delimiter?

00:30:55.800 --> 00:30:58.680
It'll be white space in this case.

00:30:58.840 --> 00:31:01.030
Although I may be too chicken to
actually try sorting on column two,

00:31:01.060 --> 00:31:02.080
so we'll see how it goes.

00:31:04.400 --> 00:31:15.000
[Transcript missing]

00:31:15.420 --> 00:31:17.410
If you're a maximum
stud shell programmer,

00:31:17.410 --> 00:31:20.800
you're going to edit it here rather
than use the new plist property

00:31:20.870 --> 00:31:22.660
editor that's built into Xcode,
aren't you?

00:31:22.880 --> 00:31:26.080
You're going to be coming back
to this rather than going to this

00:31:26.180 --> 00:31:29.410
wussy little thing here in Xcode
where we can click on checkboxes

00:31:29.410 --> 00:31:30.700
and pop-ups to do what we want.

00:31:30.700 --> 00:31:31.270
We're not going to do that.

00:31:31.350 --> 00:31:35.040
We're going to go in here,
and you absolutely must,

00:31:35.040 --> 00:31:38.220
as a developer here, get this part right.

00:31:38.410 --> 00:31:40.200
You have a dictionary.

00:31:40.200 --> 00:31:42.950
It's empty here, as you can see,
which is the default

00:31:43.030 --> 00:31:44.660
parameters of your script.

00:31:44.780 --> 00:31:47.620
You must define in the Info.plist every
variable that you think you're going

00:31:47.630 --> 00:31:50.770
to set in the user interface that
will be presented to the shell script.

00:31:50.860 --> 00:31:53.220
You have to type that properly
in here as a key and a value,

00:31:53.220 --> 00:31:54.450
or it ain't going to work.

00:31:56.700 --> 00:32:22.000
: So here we go,
let's see if I can type a

00:32:22.000 --> 00:32:22.000
syntactically correct plist on the fly.

00:32:22.000 --> 00:32:22.000
I want to have a key called backwards.

00:32:22.000 --> 00:32:22.000
Do we want to go backwards or not?

00:32:22.000 --> 00:32:22.000
And I'll make that a, no, by default.

00:32:22.000 --> 00:32:22.000
You give a default
value for these things.

00:32:22.000 --> 00:32:22.000
The default for sorting
backwards is going to be false.

00:32:22.000 --> 00:32:22.000
And I want to have
another key called column.

00:32:22.000 --> 00:32:22.000
What column do we want to sort on?

00:32:22.000 --> 00:32:22.000
A good default would
probably be column one.

00:32:24.920 --> 00:32:26.980
All right, all you human plist parsers,
does that look okay?

00:32:26.980 --> 00:32:27.710
Oh, thank you.

00:32:27.780 --> 00:32:28.580
But you know what?

00:32:28.580 --> 00:32:29.540
We can always cheat.

00:32:29.540 --> 00:32:30.940
We can always say, where is it?

00:32:30.950 --> 00:32:32.540
File, parse file as property list.

00:32:32.660 --> 00:32:33.670
It's in here somewhere.

00:32:33.670 --> 00:32:34.460
Well, I'm sure.

00:32:34.510 --> 00:32:35.070
There we go.

00:32:35.070 --> 00:32:36.380
Parse file as property list.

00:32:36.380 --> 00:32:37.690
That's always good to check.

00:32:37.690 --> 00:32:38.740
Oh, it is good.

00:32:39.020 --> 00:32:39.740
Worth checking that.

00:32:39.740 --> 00:32:41.680
If you mess this up,
and I certainly did the first

00:32:41.680 --> 00:32:44.980
800 or 900 times I did this,
your action will appear to run properly.

00:32:45.130 --> 00:32:46.970
But since it doesn't
actually load this thing,

00:32:46.970 --> 00:32:48.260
nothing else is going to work.

00:32:48.260 --> 00:32:51.310
So do take the time to verify
that that Info.plist is right.

00:32:51.320 --> 00:32:53.930
If you must,
you have my permission to go and

00:32:53.930 --> 00:32:57.320
use the little graphical pop-up
editor here where we can see

00:32:57.410 --> 00:32:59.650
the parameters that are defined,
column and backwards.

00:32:59.650 --> 00:33:01.950
If you want, you can use that.

00:33:02.880 --> 00:33:05.560
So we've decided that we're
going to have two parameters,

00:33:05.560 --> 00:33:08.560
a Boolean, true or false,
are we going backwards or forwards,

00:33:08.580 --> 00:33:12.300
and a number called column that's
going to be our sort column.

00:33:12.420 --> 00:33:13.360
I'm going to write my script in a minute.

00:33:13.360 --> 00:33:16.370
I'm going to do a little UI work here.

00:33:16.420 --> 00:33:21.800
Here's the simple UI of
an Automator Action.

00:33:22.400 --> 00:33:24.820
Well, let's just say that's a nice handy
piece of text that we don't need,

00:33:24.820 --> 00:33:29.530
but it's something to start
with a sort on column number...

00:33:29.790 --> 00:33:32.660
By the way, if you go Apple equal sign,
it actually shrinks the thing

00:33:32.770 --> 00:33:35.580
in Interface Builder to fit
exactly the text that you type.

00:33:35.670 --> 00:33:37.140
Ooh, is that nice.

00:33:37.140 --> 00:33:38.820
We want to sort on what column?

00:33:38.820 --> 00:33:39.950
Well,
we're going to bring a text field here.

00:33:40.040 --> 00:33:41.850
I'm going to type a column in here.

00:33:41.860 --> 00:33:43.220
I'm going to make it better in a minute,
but for now it's going

00:33:43.220 --> 00:33:43.820
to be a text field.

00:33:43.820 --> 00:33:48.440
And we want to have a
checkbox called backwards.

00:33:50.510 --> 00:34:13.110
: That would be a basic UI.

00:34:13.110 --> 00:34:13.110
It's enough to get started.

00:34:13.110 --> 00:34:13.110
And using the amazing
Cocoa binding system,

00:34:13.110 --> 00:34:13.110
you'll see that you have
these inspectors here.

00:34:13.110 --> 00:34:13.110
I want to attach the value that
the user types in that text field

00:34:13.110 --> 00:34:13.110
with the parameter called column
that I've announced that my

00:34:13.110 --> 00:34:13.110
Automator Action is going to use.

00:34:13.110 --> 00:34:13.110
Then my shell script,
I can use the dollar sign

00:34:13.110 --> 00:34:13.110
column to pick that all up.

00:34:13.570 --> 00:34:15.330
Zoom?

00:34:15.360 --> 00:34:16.500
You're going to have a
headache in a minute.

00:34:16.510 --> 00:34:17.500
You asked me to zoom.

00:34:17.500 --> 00:34:18.740
Oh, I move very slowly.

00:34:18.740 --> 00:34:20.140
Here we go.

00:34:20.140 --> 00:34:21.740
Oh, see,
that's what happens when you zoom.

00:34:23.900 --> 00:34:25.900
Yeah, yeah, yeah, turn on Autosphere.

00:34:25.900 --> 00:34:27.780
Come up here if you have a problem.

00:34:27.800 --> 00:34:29.810
You stand here.

00:34:33.210 --> 00:34:36.240
Yeah, what the heck, come on, let's go.

00:34:36.360 --> 00:34:37.660
So I've forgotten where, oh yeah, column.

00:34:37.760 --> 00:34:41.440
This is gonna be,
whatever you typed in there is gonna be

00:34:41.480 --> 00:34:44.460
created as an environment variable called
column when your shell script runs.

00:34:44.460 --> 00:34:48.280
And so the shell script can talk
about $column and pick up this value.

00:34:48.370 --> 00:34:52.940
Similarly, the backwards one here,
I'm gonna bind it to another,

00:34:52.950 --> 00:34:55.170
I'm gonna bind its value,
and check boxes have a

00:34:55.180 --> 00:34:58.120
value of a zero or a one,
are they clicked or not?

00:34:58.150 --> 00:34:59.420
Same idea, backwards.

00:34:59.500 --> 00:35:00.630
Zero, it's not checked.

00:35:00.660 --> 00:35:01.690
One, it is checked.

00:35:03.210 --> 00:35:05.200
Backwards, okay, I've made two bindings.

00:35:05.200 --> 00:35:10.510
I'm gonna save this and
I'm gonna go back to Xcode.

00:35:11.830 --> 00:35:13.300
Oh, thank you very much.

00:35:13.300 --> 00:35:13.570
I don't know.

00:35:13.590 --> 00:35:13.890
Let's see.

00:35:13.940 --> 00:35:15.650
We'll look in the... Oh, all right.

00:35:15.710 --> 00:35:16.910
We'll actually use this.

00:35:16.910 --> 00:35:18.440
The parameters inspector.

00:35:18.440 --> 00:35:20.050
It appears to be backwards.

00:35:20.050 --> 00:35:20.850
What did I put?

00:35:21.200 --> 00:35:22.660
Am I binding?

00:35:22.760 --> 00:35:26.830
I put back... I was right.

00:35:26.830 --> 00:35:29.490
Thank you very much.

00:35:29.490 --> 00:35:30.960
If we run one minute over,
we're going to know why now.

00:35:30.960 --> 00:35:30.960
We're going to have to
stop and look at this.

00:35:31.700 --> 00:35:33.180
All right,
the incredible sorting example of Doom.

00:35:33.180 --> 00:35:34.470
Somewhere in here is a shell script.

00:35:34.540 --> 00:35:35.850
Oh, there's my shell script.

00:35:35.880 --> 00:35:38.420
Now,
you can see that the first line says,

00:35:38.520 --> 00:35:39.380
what shell are we going to run?

00:35:39.380 --> 00:35:41.490
I could change this to perl or Ruby or
something else if I wanted to use

00:35:41.490 --> 00:35:42.860
a different programming language.

00:35:42.890 --> 00:35:44.970
I'm going to use the
born shell right here.

00:35:45.000 --> 00:35:46.370
And by default, it does cat.

00:35:46.660 --> 00:35:49.940
And for style principles,
you really should set

00:35:49.940 --> 00:35:53.780
the path equals bin,
user bin, sbin, user sbin.

00:35:53.780 --> 00:35:55.150
This is old habits from a long time ago.

00:35:55.150 --> 00:35:57.170
Set the path properly.

00:35:57.320 --> 00:36:00.420
Make sure your script exits nicely.

00:36:00.420 --> 00:36:02.670
If your script doesn't
exit with a zero status,

00:36:02.750 --> 00:36:04.980
the whole workflow is going
to stop at that point.

00:36:04.980 --> 00:36:06.730
So that's a little bit of
boilerplate I always like to put in.

00:36:06.740 --> 00:36:10.310
And we've got this marvelous thing here
called Demo Monkey where I can just go

00:36:10.350 --> 00:36:12.210
like this and it hauls in some code.

00:36:12.220 --> 00:36:16.490
I really want Malcolm Crawford,
who wrote Demo Monkey, which is, Malcolm,

00:36:16.490 --> 00:36:17.550
are you in here?

00:36:17.560 --> 00:36:18.540
Love the Demo Monkey.

00:36:18.580 --> 00:36:19.700
Loving the Demo Monkey.

00:36:19.700 --> 00:36:22.120
Wishing that when I did that,
it made a little fake typing

00:36:22.230 --> 00:36:24.850
sound so that people thought
I was actually typing it in.

00:36:27.030 --> 00:36:29.000
: They would think so until I picked
up the water to try to drink it.

00:36:29.000 --> 00:36:32.400
So here in the Bourne show,
we're saying if the

00:36:32.400 --> 00:36:35.000
backwards variable is 1,
then we want to set something

00:36:35.000 --> 00:36:37.470
called direction to -r,
then we're going to say

00:36:37.580 --> 00:36:39.110
sort -k $column $direction.

00:36:39.130 --> 00:36:44.000
So that will wind up being something
like sort -k 4 and then nothing if

00:36:44.000 --> 00:36:47.760
I didn't check the backwards box,
or it's going to say sort -k 4 -r

00:36:47.760 --> 00:36:50.300
if I did check the backwards box.

00:36:50.300 --> 00:36:51.830
Does that make sense?

00:36:52.790 --> 00:36:54.200
Well, let's see if it works, smart guy.

00:36:54.200 --> 00:36:55.720
Let's see here.

00:36:56.100 --> 00:36:58.640
Build, run.

00:36:59.070 --> 00:37:02.360
You will find these things always
wind up in that big terminal bucket

00:37:02.460 --> 00:37:03.900
when Automator actually launches.

00:37:03.930 --> 00:37:04.500
Two errors.

00:37:04.500 --> 00:37:05.220
Oh, isn't that interesting?

00:37:05.290 --> 00:37:06.970
Two errors.

00:37:07.500 --> 00:37:10.000
: How could there be two
errors in something so simple?

00:37:10.000 --> 00:37:11.180
Well, you know what?

00:37:11.180 --> 00:37:15.660
There's the Automator style
police are somehow involved here.

00:37:15.660 --> 00:37:19.780
NSButtonBackwards uses
a non-standard font.

00:37:21.520 --> 00:37:23.930
The text field does not
continuously update the value.

00:37:24.000 --> 00:37:25.160
Well, actually, these are good things.

00:37:25.160 --> 00:37:28.760
We want all of our Automator Actions
to look like other Automator Actions.

00:37:28.840 --> 00:37:31.890
And so in the build process,
there's a little tool called AMLint

00:37:31.990 --> 00:37:33.760
that's running and being picky,
picky, picky,

00:37:33.760 --> 00:37:37.140
and inspecting your nib and making
sure you've built it according

00:37:37.140 --> 00:37:40.790
to the way that the Automator
Police wants you to build Actions.

00:37:41.070 --> 00:37:43.020
So I'm going to go back
to my NIM file here,

00:37:43.110 --> 00:37:46.330
and I'm going to take that
backwards button and bring

00:37:46.510 --> 00:37:49.810
up the font panel and say,
yeah, yeah, yeah,

00:37:49.810 --> 00:37:52.600
we'll use the small system font.

00:37:52.630 --> 00:37:53.760
That better?

00:37:53.760 --> 00:37:56.920
And this one here is complaining,
text field does not

00:37:56.920 --> 00:37:58.820
continuously update value.

00:37:58.820 --> 00:37:59.810
Well, this is actually good.

00:37:59.940 --> 00:38:03.120
In fact, I can see by looking at that
that I actually typed C-O-L-U-M.

00:38:05.120 --> 00:38:07.580
Who's used an application on the
Mac where they type something

00:38:07.580 --> 00:38:09.960
in a text field that doesn't
take until you hit return?

00:38:09.960 --> 00:38:11.280
Who hates that?

00:38:11.380 --> 00:38:14.310
Who wishes that all applications
correctly updated values,

00:38:14.310 --> 00:38:16.820
even if you typed and you hit
tab to get out of the field

00:38:16.820 --> 00:38:18.450
or you click somewhere else?

00:38:18.460 --> 00:38:19.980
That's what it's warning you about here.

00:38:19.980 --> 00:38:23.120
It wants you to arrange that this value
is always updated no matter what the user

00:38:23.120 --> 00:38:24.870
types or whether they hit return or not.

00:38:25.330 --> 00:38:28.350
That's a simple checkbox over here.

00:38:28.610 --> 00:38:35.410
will be presenting his presentation
on the Automator Action System.

00:38:35.610 --> 00:38:41.650
and his team have been working
on a new version of Automator

00:38:41.790 --> 00:38:45.710
Action for System Administrators.

00:38:45.860 --> 00:38:46.680
So we should be all right there.

00:38:46.680 --> 00:38:47.600
I've made a couple of changes.

00:38:47.600 --> 00:38:48.810
I said that should be the small font.

00:38:48.880 --> 00:38:51.390
This should update continuously.

00:38:51.530 --> 00:38:52.190
Let's try it now.

00:38:52.230 --> 00:38:54.200
I think that's right.

00:38:54.210 --> 00:38:54.540
Good.

00:38:54.560 --> 00:38:57.850
Now it launches Automator
for you automatically.

00:38:58.190 --> 00:39:00.920
And I'm going to find
down here in Terminal,

00:39:00.920 --> 00:39:04.610
hopefully,
the incredible sorting example of Doom.

00:39:04.830 --> 00:39:07.510
This is why we have the HD monitors here,
because we have very long

00:39:07.610 --> 00:39:08.850
titles for our Automator.

00:39:08.850 --> 00:39:10.690
I'm surprised it's not complaining
about the length of that title.

00:39:10.690 --> 00:39:12.440
You'd think, you know,
of all the things A.M.

00:39:12.440 --> 00:39:14.740
Lint was going to complain about,
it would say, your thing is too wide.

00:39:14.760 --> 00:39:18.910
So let's put, let's, uh,
your action is too wide.

00:39:18.910 --> 00:39:19.890
What did you think I said?

00:39:19.920 --> 00:39:25.340
I'll have to pause and take a water and
collect my thoughts here for a moment.

00:39:25.340 --> 00:39:25.990
Just excuse me.

00:39:26.020 --> 00:39:27.090
Okay.

00:39:29.900 --> 00:39:31.100
I can't run this right by itself.

00:39:31.100 --> 00:39:32.290
It wouldn't really do very much useful.

00:39:32.300 --> 00:39:34.900
It would sort nothing and
the output would vanish.

00:39:35.020 --> 00:39:37.130
But we're going to want to add,
for starters,

00:39:37.190 --> 00:39:39.540
we're going to want the view
results action here so we can

00:39:39.540 --> 00:39:40.900
see what our action actually did.

00:39:40.900 --> 00:39:43.640
And we're going to want to
supply it with some text.

00:39:43.960 --> 00:39:47.780
One way to supply things with text
we saw before is to ask TextEdit for

00:39:47.780 --> 00:39:49.400
the contents of the front document.

00:39:49.610 --> 00:39:52.040
Another way, though,
is you'll find an action here

00:39:52.040 --> 00:39:53.400
called Get Specified Text.

00:39:53.440 --> 00:39:56.280
And this is a place where
you can just type in a little

00:39:56.280 --> 00:39:58.120
bit of text and away it goes.

00:39:58.490 --> 00:40:00.970
So I have a handy-dandy list here
because the season's about to start of

00:40:00.970 --> 00:40:02.560
all your Canadian Football League teams.

00:40:02.560 --> 00:40:03.940
Should we zoom in so we can take notes?

00:40:03.940 --> 00:40:04.900
Write those down.

00:40:04.900 --> 00:40:06.100
There's all your CFL teams.

00:40:06.260 --> 00:40:07.360
And we want to sort these.

00:40:08.700 --> 00:40:22.900
[Transcript missing]

00:40:23.210 --> 00:40:25.070
For the benefit of anyone
from British Columbia,

00:40:25.070 --> 00:40:26.700
we can actually run
it the other way here,

00:40:26.700 --> 00:40:29.680
and then BC will be at the top of the
heap there and the bottom or something.

00:40:29.780 --> 00:40:32.750
Anyway, we want to sort on column
two by the team name.

00:40:32.780 --> 00:40:35.760
So as I'm doing this,
it's actually changing the way

00:40:35.760 --> 00:40:36.610
it's running the sort command.

00:40:36.650 --> 00:40:37.530
So what command is it running here?

00:40:37.560 --> 00:40:39.260
Sort-k2, right?

00:40:39.310 --> 00:40:43.070
If I click on the backwards box,
it's going to go sort-k2-r.

00:40:43.270 --> 00:40:44.260
Does that make sense?

00:40:44.290 --> 00:40:46.800
See, it's fairly straightforward to
get things out of the UI here

00:40:46.800 --> 00:40:49.590
and bind them to a shell script.

00:40:49.780 --> 00:40:51.290
It's still possible to mess this up,
though.

00:40:51.300 --> 00:40:53.760
I mean, one could type, you know,
something, sort on column two.

00:40:53.760 --> 00:40:57.090
That's probably not
going to work properly,

00:40:57.090 --> 00:40:58.060
you know?

00:40:58.060 --> 00:40:59.680
Not really an option.

00:40:59.680 --> 00:41:00.720
Sort on column two, like that.

00:41:00.720 --> 00:41:02.200
That's probably not going to work either.

00:41:02.200 --> 00:41:06.220
We can make this UI a little
more bulletproof than that,

00:41:06.220 --> 00:41:07.000
I think.

00:41:07.110 --> 00:41:08.610
I firmly believe that if
you have a text field where

00:41:08.610 --> 00:41:10.400
someone can only type a number,
you shouldn't let them type

00:41:10.460 --> 00:41:11.560
anything other than a number.

00:41:11.560 --> 00:41:14.740
We're passing silly options to the
sort command right at the moment.

00:41:15.440 --> 00:41:17.340
So we might go back to,
stop Automator here,

00:41:17.340 --> 00:41:19.360
and go back to Interface
Builder for a moment.

00:41:19.360 --> 00:41:21.840
Here's something I like
to do for numeric input.

00:41:21.840 --> 00:41:24.880
I like to take a text field like that,
and in the inspector, the main inspector,

00:41:24.880 --> 00:41:27.040
not the bindings inspector,
but the main inspector,

00:41:27.040 --> 00:41:29.360
I like to take that text field and say,
you know what,

00:41:29.360 --> 00:41:31.070
this one is not actually editable.

00:41:31.070 --> 00:41:32.750
It's display only.

00:41:32.750 --> 00:41:34.680
It'll display a number, but that's it.

00:41:34.960 --> 00:41:37.750
And I like to bring in
one of these stepper guys.

00:41:37.750 --> 00:41:41.140
This is a little object that can
bump a numeric field up and down.

00:41:41.140 --> 00:41:43.520
And here's the trick,
you bind it to the exact same thing

00:41:43.520 --> 00:41:45.120
that you bound the text field to.

00:41:45.440 --> 00:41:50.060
So I'm going to bind that guy to, oh,
here, by the time you've typed it once,

00:41:50.140 --> 00:41:52.600
it knows what the existing bindings are.

00:41:52.680 --> 00:41:55.680
I'm going to bind that
thing to column as well.

00:41:55.690 --> 00:41:59.250
And you can in the inspector
for one of these guys,

00:41:59.250 --> 00:42:04.380
start at one up to, I don't know, 100,
something like that.

00:42:04.420 --> 00:42:08.000
So if we try this one now,
this will be a little better, I think,

00:42:08.000 --> 00:42:09.540
from a UI perspective.

00:42:09.540 --> 00:42:12.600
Still the same script and everything.

00:42:12.770 --> 00:42:14.490
We'll run it again.

00:42:15.580 --> 00:42:20.150
and in Terminal we're going to
see the incredible sorting thing.

00:42:20.200 --> 00:42:21.890
And I can't, I can select that,
but I can't change it.

00:42:22.370 --> 00:42:24.600
This is a little more
bulletproof way to do it.

00:42:24.780 --> 00:42:27.420
I've got two objects bound
to the same property.

00:42:27.420 --> 00:42:28.860
That's completely fine.

00:42:28.860 --> 00:42:31.230
Bindings are going to
keep them all in sync.

00:42:31.230 --> 00:42:34.350
If you make a few small
concessions like this to usability,

00:42:34.350 --> 00:42:37.160
you're going to have a sorting
action that will be much

00:42:37.160 --> 00:42:38.600
more useful by end users.

00:42:38.600 --> 00:42:41.410
Your dad will be less likely
to phone you up because the

00:42:41.410 --> 00:42:44.270
Automator Workflow you built,
he typed in the word two

00:42:44.340 --> 00:42:46.300
rather than the number two.

00:42:47.160 --> 00:42:50.130
My dad is buying an EMAC and he called
me this week and it hadn't arrived yet

00:42:50.280 --> 00:42:53.550
and he wanted to know if it was because
we were putting an Intel processor in it.

00:42:53.550 --> 00:42:55.840
I don't think so.

00:42:55.840 --> 00:42:56.510
Not yet.

00:42:56.540 --> 00:42:59.800
Let's go back to slides, please.

00:43:02.770 --> 00:43:03.760
Oh, we built a script action.

00:43:03.760 --> 00:43:04.260
Isn't that marvelous?

00:43:04.310 --> 00:43:07.640
Now, there actually is a more elaborate
version of this exact thing

00:43:07.640 --> 00:43:10.660
as a developer example that
I believe ships with Xcode 2.1.

00:43:10.710 --> 00:43:16.240
It's the sort example that you see
in my terminal collection already.

00:43:16.240 --> 00:43:18.060
It's got forwards and
backwards and numerically,

00:43:18.060 --> 00:43:19.130
and you want to remove duplicates or not.

00:43:19.170 --> 00:43:22.410
So there's a more elaborate version
of this exact same thing there.

00:43:23.640 --> 00:43:24.840
Let's just review this binding thing.

00:43:24.840 --> 00:43:25.770
It is pretty important.

00:43:25.820 --> 00:43:27.390
You've got to get this right
or it ain't going to work.

00:43:27.460 --> 00:43:31.050
I don't think it's that hard,
but then I've been doing it for... I've

00:43:31.080 --> 00:43:33.860
been using Interface Builder since...
When did Next release Interface Builder?

00:43:33.860 --> 00:43:34.750
Version 0.8?

00:43:35.010 --> 00:43:37.470
Probably not every... I'll bet there
are people in here who have been using

00:43:37.480 --> 00:43:39.640
Interface Builder since Next Step 0.8,
are there?

00:43:39.640 --> 00:43:41.220
Yeah, it's easy, isn't it?

00:43:41.450 --> 00:43:45.530
After you've been using it for 17 years,
it's easy, right?

00:43:45.550 --> 00:43:47.540
But fortunately,
I don't think you need to know

00:43:47.580 --> 00:43:50.420
everything about Interface
Builder to build these shell UIs.

00:43:50.420 --> 00:43:51.710
What I showed you there is just about it.

00:43:51.770 --> 00:43:54.580
You lay out some text
fields and you bind them,

00:43:54.580 --> 00:43:56.090
you kind of get the hang of
this whole bindings thing.

00:43:58.140 --> 00:44:00.240
You don't need to be a huge expert in it.

00:44:00.270 --> 00:44:03.600
You're dragging things in,
you're going to the bindings,

00:44:03.600 --> 00:44:07.800
and you're associating
things with a model keypath.

00:44:07.920 --> 00:44:09.990
You've got to get all these parts right,
though.

00:44:10.000 --> 00:44:11.130
Everything has to agree.

00:44:11.220 --> 00:44:13.840
The binding name and the name of the
variable in the shell script and the

00:44:13.890 --> 00:44:16.460
name of the thing in the Info.plist,
they've all got to be the same,

00:44:16.460 --> 00:44:17.440
including case.

00:44:17.440 --> 00:44:22.120
You can't get the caps
wrong in this scenario.

00:44:22.120 --> 00:44:22.120
It's not going to work.

00:44:23.270 --> 00:44:43.670
: So also when you see
this value parameter,

00:44:43.670 --> 00:44:43.670
if all you're doing is a simple
shell script action with Automator,

00:44:43.670 --> 00:44:43.670
don't mess with the pop-up there.

00:44:43.670 --> 00:44:43.670
It should always say "parameters."
You're binding what you typed

00:44:43.670 --> 00:44:43.670
here to the parameters object,
which is this special Automator

00:44:43.670 --> 00:44:43.670
thing that's going to transfer
those values to the shell script.

00:44:43.670 --> 00:44:43.670
It should also always say "selection,"
at least for a text field here.

00:44:45.050 --> 00:44:46.120
So text fields are easy.

00:44:46.120 --> 00:44:47.810
We did a text field, right?

00:44:47.990 --> 00:44:51.350
The only little trick to remember is
to click Continuously Updates Value,

00:44:51.350 --> 00:44:53.080
or AMLint is gonna complain.

00:44:53.080 --> 00:44:54.980
So don't forget to do those.

00:44:55.370 --> 00:44:56.500
Checkboxes, the same idea.

00:44:56.500 --> 00:44:58.980
You're binding again to selection,
but this time rather than a string,

00:44:58.980 --> 00:45:00.090
you're getting a 0 or a 1.

00:45:00.330 --> 00:45:02.830
So your script can ask
whether a particular

00:45:02.830 --> 00:45:04.580
environment variable is 0 or 1.

00:45:04.580 --> 00:45:07.260
That's the born-shell syntax
for doing a numeric expression.

00:45:07.260 --> 00:45:10.140
Two parentheses,
then the inside is evaluated numerically.

00:45:10.140 --> 00:45:13.090
So that says if isRadioactive is 1,
then remove a file.

00:45:13.670 --> 00:45:17.400
Now, because you're giving a
default value to this thing,

00:45:17.400 --> 00:45:18.640
it's always going to be 0 or 1.

00:45:18.660 --> 00:45:19.760
You don't need to really check.

00:45:19.830 --> 00:45:23.580
Your Info.plist probably said that the
default value for this box was false,

00:45:23.580 --> 00:45:26.240
for this parameter was false,
or 0 or something.

00:45:26.240 --> 00:45:30.030
So you can avoid a certain amount of
silly little defensive programming here.

00:45:30.030 --> 00:45:33.160
You don't really need to check
that that variable is defined.

00:45:33.160 --> 00:45:34.520
If you've done it right,
it will be defined.

00:45:34.520 --> 00:45:37.490
It will either have the default value
or the value that the user chose,

00:45:37.580 --> 00:45:38.610
but it won't be empty.

00:45:40.050 --> 00:45:41.360
Some of the other objects are
a little more interesting.

00:45:41.360 --> 00:45:42.300
Sliders.

00:45:42.330 --> 00:45:44.590
We all did the text field
and slider demo in our next

00:45:44.590 --> 00:45:46.240
career about a thousand times.

00:45:46.240 --> 00:45:47.800
We got quite to love these sliders.

00:45:47.970 --> 00:45:50.080
Although I notice they're not
continuously sending actions anymore.

00:45:50.080 --> 00:45:51.420
When did we change that?

00:45:51.480 --> 00:45:52.500
Sliders used to be continuous.

00:45:52.520 --> 00:45:53.520
They're not continuous anymore.

00:45:53.520 --> 00:45:54.040
Or is it just me?

00:45:54.060 --> 00:45:56.870
Who has a continuous slider?

00:45:56.940 --> 00:45:59.320
It's not what you think.

00:45:59.320 --> 00:45:59.320
Come on.

00:45:59.740 --> 00:46:11.720
Sliders are going to
have a numeric value,

00:46:11.720 --> 00:46:13.320
0, 1, 23.7.

00:46:13.320 --> 00:46:16.180
You've got a bunch of parameters in the
regular interface builder inspector that

00:46:16.180 --> 00:46:19.100
lets you set how the slider is reacting.

00:46:19.180 --> 00:46:22.340
And so long as you bind it the right way,
you're going to have a variable in your

00:46:22.340 --> 00:46:24.430
shell script that you can take a look at.

00:46:24.740 --> 00:46:25.620
Radio buttons.

00:46:25.620 --> 00:46:27.850
This gets a little more interesting.

00:46:27.850 --> 00:46:30.720
This is actually a matrix object of,
I don't know,

00:46:30.730 --> 00:46:33.950
NS button cells or something,
but it's really one object

00:46:33.950 --> 00:46:37.460
that has a couple of different
things you could bind to.

00:46:37.470 --> 00:46:39.960
You'll see in the inspector,
in the bindings inspector

00:46:39.960 --> 00:46:41.830
for a matrix like this,
you have a choice.

00:46:41.910 --> 00:46:44.520
Do you want to bind to the content,
or the content objects,

00:46:44.520 --> 00:46:46.530
the content values,
or the selected index,

00:46:46.530 --> 00:46:48.390
or the selected object, selected tag?

00:46:48.390 --> 00:46:50.440
A couple of them are
more useful than others.

00:46:50.460 --> 00:46:53.620
Selected index will give you the
number of the thing that was selected,

00:46:53.630 --> 00:46:54.580
01.

00:46:54.600 --> 00:46:55.090
02.

00:46:55.110 --> 00:46:57.630
This might be a good idea if
you were planning on localizing

00:46:57.780 --> 00:46:58.910
your application later.

00:46:58.910 --> 00:47:01.040
Just in your script,
deal with the number that the

00:47:01.040 --> 00:47:02.560
user chose rather than the string.

00:47:02.770 --> 00:47:04.380
But if you're lazy like me,
you can just ask,

00:47:04.430 --> 00:47:06.430
bind to the selected value,
and you're going to get an object

00:47:06.430 --> 00:47:10.990
that corresponds to the word that
was actually shown on the pop-up.

00:47:13.280 --> 00:47:15.680
Interface Builder, by the way,
when you bring in radio

00:47:15.680 --> 00:47:16.840
buttons like this,
you get two of them,

00:47:16.840 --> 00:47:18.530
and you hold down the Option key
and you drag the corner and

00:47:18.630 --> 00:47:19.440
you get a bunch of them.

00:47:19.540 --> 00:47:22.430
If you ever wanted to know how to make
a whole lot of radio buttons like that.

00:47:22.480 --> 00:47:24.690
Or the Control key or something.

00:47:24.700 --> 00:47:25.000
I don't know.

00:47:25.000 --> 00:47:28.030
I have to do it four or five times myself
to find the one that actually turns one.

00:47:28.090 --> 00:47:28.590
Which is it?

00:47:28.660 --> 00:47:29.780
Option?

00:47:29.780 --> 00:47:30.670
Command?

00:47:30.670 --> 00:47:31.360
Shift?

00:47:31.910 --> 00:47:32.520
Letter K?

00:47:32.520 --> 00:47:33.360
Anybody remember?

00:47:33.360 --> 00:47:35.020
I think it's Option, isn't it?

00:47:35.130 --> 00:47:39.150
It was on the slide,
but that doesn't mean it's right.

00:47:41.800 --> 00:48:05.000
[Transcript missing]

00:48:07.400 --> 00:48:10.960
You can ask for the selected index, 0, 1,
2, or 3, or you can ask for the actual

00:48:10.960 --> 00:48:11.890
word that was on the pop-up.

00:48:12.000 --> 00:48:13.440
Your choice when you hook up the binding.

00:48:13.550 --> 00:48:17.470
You can bind either the selected
index or selected value.

00:48:17.950 --> 00:48:20.490
also knew, by the way,
completely changing gears for a moment,

00:48:20.490 --> 00:48:23.500
did you know that there was a
user bin automator with Xcode 2.1?

00:48:23.500 --> 00:48:24.610
Thank you.

00:48:24.980 --> 00:48:31.680
Well,
just hold your applause for a second

00:48:31.680 --> 00:48:31.680
until I tell you what it actually does.

00:48:31.680 --> 00:48:31.680
Or maybe we should stop here.

00:48:32.430 --> 00:48:33.760
This runs workflows
from the command line.

00:48:33.860 --> 00:48:35.140
Automator and then some workflow.

00:48:35.140 --> 00:48:36.430
And it runs the workflow
from the command line.

00:48:36.480 --> 00:48:37.860
There are some limitations.

00:48:37.860 --> 00:48:39.360
I don't think user interaction can work.

00:48:39.420 --> 00:48:41.280
I don't think you can run
this if nobody is logged in.

00:48:41.280 --> 00:48:43.000
I don't think you can
do it as a login hook,

00:48:43.070 --> 00:48:44.850
which is what I really was hoping for.

00:48:44.850 --> 00:48:45.740
It's a good start.

00:48:45.920 --> 00:48:48.300
But it is a way that you could
incorporate the running of an Automator

00:48:48.430 --> 00:48:51.490
workflow into a shell script if you
want to flip things totally inside out.

00:48:52.280 --> 00:48:55.770
I have an Automator workflow that
actually builds dashboard widgets.

00:48:55.770 --> 00:48:58.460
I was trying to cut down on the
number of demos I had to do.

00:48:58.470 --> 00:49:01.550
And I thought maybe I could then
have a dashboard widget that used

00:49:01.550 --> 00:49:03.600
this to run an Automator workflow.

00:49:03.600 --> 00:49:05.860
And they could duke it
out during the demo.

00:49:05.860 --> 00:49:08.030
And I could just go off and see.

00:49:08.030 --> 00:49:09.260
I'd have to try that.

00:49:09.300 --> 00:49:10.330
Maybe next year.

00:49:12.790 --> 00:49:14.990
Let me give you a few random tips and
then I'm going to show you a couple more

00:49:14.990 --> 00:49:18.690
interesting workflows and try to build
something that solves an actual problem.

00:49:18.740 --> 00:49:22.380
It's not like me to get that far.

00:49:22.400 --> 00:49:23.870
A couple of tips here.

00:49:23.880 --> 00:49:26.390
There isn't really a
debugger for shell scripts.

00:49:26.460 --> 00:49:28.420
Perl has a debugger,
but it would be a little weird to

00:49:28.420 --> 00:49:29.880
use it in this Automator context.

00:49:29.880 --> 00:49:33.590
But I want to encourage you to
drop this view results thing in all

00:49:33.870 --> 00:49:37.000
over the place as you're developing
a sequence of these actions.

00:49:37.140 --> 00:49:37.820
View results.

00:49:37.820 --> 00:49:39.060
It'll fit in anywhere.

00:49:39.060 --> 00:49:39.860
It accepts anything.

00:49:39.860 --> 00:49:43.120
It just copies it to the next stage
and it prints out what it was.

00:49:43.470 --> 00:49:45.560
With the colons.

00:49:45.560 --> 00:49:47.900
And this is a great debugger.

00:49:47.930 --> 00:49:49.960
Of the available
Automator debugging tools,

00:49:49.970 --> 00:49:51.500
this is one of the premier ones.

00:49:55.490 --> 00:49:56.140
The other one, no.

00:49:56.140 --> 00:50:00.090
Another one is ask for confirmation
is a way to get your script to stop

00:50:00.390 --> 00:50:02.570
at a certain point while you think.

00:50:02.630 --> 00:50:04.910
And if you haven't got like
a clapper action on hand,

00:50:04.910 --> 00:50:08.020
this is a way to get it to stop and
put up a little UI and wait for it.

00:50:08.020 --> 00:50:09.430
You can look around,
did it create the file

00:50:09.500 --> 00:50:10.410
I thought it was going to?

00:50:10.410 --> 00:50:12.120
Did it actually tell
iPhone to do something?

00:50:12.120 --> 00:50:15.820
So ask for results and wait for
confirmation or ask for confirmation

00:50:15.820 --> 00:50:17.850
or two very useful examples here.

00:50:19.380 --> 00:50:21.780
And Automator itself is
actually Apple scriptable.

00:50:21.810 --> 00:50:25.360
The Automator engineering team
has told me that this is scary.

00:50:25.360 --> 00:50:28.210
They've written self-modifying
workflows that as they run,

00:50:28.210 --> 00:50:30.830
send messages to Automator to
add and remove things on the

00:50:30.830 --> 00:50:32.520
fly from the current workflow.

00:50:32.520 --> 00:50:35.010
All you people who want Automator
to do branching and looping,

00:50:35.080 --> 00:50:35.670
here you go.

00:50:40.850 --> 00:50:43.650
There is, by the way, incidentally,
there is an Automator Workflow that

00:50:43.780 --> 00:50:45.470
executes other Automator Workflows.

00:50:45.500 --> 00:50:46.460
You might have seen this.

00:50:46.480 --> 00:50:50.310
You can, I don't recommend this,
you can make your Automator Workflow loop

00:50:50.310 --> 00:50:53.790
if you save it in a file and the last
thing is execute this workflow again,

00:50:53.800 --> 00:50:55.360
this exact same workflow.

00:50:55.360 --> 00:50:57.420
It may be hard to stop it at this point.

00:51:00.310 --> 00:51:02.060
But I actually, honestly,
I did find that kind of handy.

00:51:02.060 --> 00:51:05.160
I put in a,
there's a pause workflow action that

00:51:05.160 --> 00:51:08.740
waits for a certain number of seconds,
then I had it run my workflow again.

00:51:08.740 --> 00:51:12.570
So it just sat there and ran for a while,
creating dashboard widgets and opening

00:51:12.570 --> 00:51:14.780
them until my screen was actually full.

00:51:14.780 --> 00:51:19.330
You may find an actual use for this.

00:51:19.330 --> 00:51:19.330
If you do, please drop me an email.

00:51:19.330 --> 00:51:19.330
But...

00:51:19.760 --> 00:51:22.340
Let me show you something over
here on this scriptability idea.

00:51:22.480 --> 00:51:23.700
Could I have demo two?

00:51:23.700 --> 00:51:24.450
Oh, way ahead of me.

00:51:24.520 --> 00:51:26.100
Could I have demo one?

00:51:26.160 --> 00:51:27.060
And could I have the slides?

00:51:27.060 --> 00:51:30.570
Now could I have demo one?

00:51:31.050 --> 00:51:39.830
and Demo 2.

00:51:39.830 --> 00:51:39.830
Can we put this FireWire
disk up on the screen?

00:51:39.830 --> 00:51:39.830
Is that possible?

00:51:39.830 --> 00:51:39.830
Why did they come over here?

00:51:39.830 --> 00:51:39.830
Oh, yeah.

00:51:42.760 --> 00:51:46.680
You can rig these view results
thing in on your own if you want,

00:51:46.720 --> 00:51:50.040
but if you had something like,
what was I doing before?

00:51:50.040 --> 00:51:54.370
Sort on column O,
and we'll bring in the text edit

00:51:54.530 --> 00:51:58.600
thing with get contents of text thing.

00:51:58.600 --> 00:52:02.510
There are scripts that you can,
you can come up with scripts that do

00:52:02.510 --> 00:52:07.920
things like include view results in
between every pair of actions in here.

00:52:07.920 --> 00:52:09.860
See if it actually works.

00:52:09.860 --> 00:52:10.020
This is the first time I've tried it.

00:52:10.510 --> 00:52:13.980
Okay, well,
theoretically it is possible to run

00:52:13.980 --> 00:52:16.380
scripts that will tell Automator,
"Try

00:52:19.190 --> 00:52:21.340
Oh, okay, try it again.

00:52:21.380 --> 00:52:23.820
I have no faith that this will
actually do anything different,

00:52:23.960 --> 00:52:24.870
but we'll try it again.

00:52:24.870 --> 00:52:26.960
Although I've been using computers
long enough to know that just

00:52:27.050 --> 00:52:29.100
because it doesn't work in the
first try doesn't mean it's not

00:52:29.100 --> 00:52:30.320
going to work in the second try.

00:52:36.520 --> 00:52:41.500
Let's go back to slides for a moment.

00:52:41.520 --> 00:52:45.200
All right, how about we don't demo that?

00:52:46.290 --> 00:52:46.760
Here's another tip.

00:52:46.860 --> 00:52:48.690
You know what shell scripts
and perl scripts and so on

00:52:48.690 --> 00:52:50.030
usually have two output streams.

00:52:50.050 --> 00:52:52.050
The standard output,
which is what flows in

00:52:52.050 --> 00:52:55.880
Automator to the next stage,
text usually, and the standard error,

00:52:55.880 --> 00:52:59.020
which is where interesting error messages
will be discarded automatically by

00:52:59.160 --> 00:53:00.600
Automator so you can never see them.

00:53:00.620 --> 00:53:03.860
If you have something
which is not working,

00:53:03.860 --> 00:53:08.800
you may find it handy to redirect
the standard error stream somewhere

00:53:08.800 --> 00:53:11.300
other than the null device.

00:53:12.030 --> 00:53:13.110
I find it handy to do this.

00:53:13.220 --> 00:53:15.100
See that there, exec2 into devconsole?

00:53:15.110 --> 00:53:18.520
That takes the standard error stream
and redirects it to the console device,

00:53:18.520 --> 00:53:20.760
which means that any errors
this script produces,

00:53:20.760 --> 00:53:22.920
I'm going to be able to watch
them in the console application.

00:53:22.920 --> 00:53:26.300
I can fire up console and see error
messages from my Automator app,

00:53:26.300 --> 00:53:26.850
if any.

00:53:26.860 --> 00:53:31.480
I can even do a command like the echo
there to actually direct a statement

00:53:31.570 --> 00:53:36.270
in my shell script to the error device
and then it goes to the console.

00:53:38.780 --> 00:53:41.540
So that can be actually kind of handy.

00:53:41.580 --> 00:53:43.260
I put this kind of thing
in my scripts all the time.

00:53:43.280 --> 00:53:45.570
Set-XV, Exec 2 into Dev Console.

00:53:45.610 --> 00:53:49.130
I was using the shell for, I swear,
15 years before I understood what

00:53:49.170 --> 00:53:50.830
these two lines actually did.

00:53:50.910 --> 00:53:53.170
Someone showed them to
me in 1983 and said,

00:53:53.170 --> 00:53:55.290
here, trust me,
someday you'll be presenting

00:53:55.290 --> 00:53:57.940
to a lot of people and you'll
want to use this example.

00:53:57.940 --> 00:54:01.920
Set-XV in the Born shell turns on
a form of shell debugging where it

00:54:01.960 --> 00:54:05.900
will echo every line as it's about
to execute and it will take all the

00:54:06.010 --> 00:54:08.450
dollar sign things and expand them.

00:54:08.700 --> 00:54:10.920
And if you do that and redirect
it to the console device,

00:54:10.920 --> 00:54:14.050
you'll get a beautiful log of how
your shell script is actually running,

00:54:14.310 --> 00:54:17.380
exactly what it's trying to do for
every single line of shell script.

00:54:17.460 --> 00:54:18.870
This can be a marvelous
debugging technique.

00:54:18.880 --> 00:54:21.920
Printenv is also a useful command
that you might want to put in.

00:54:21.920 --> 00:54:24.070
Let me just show you why here.

00:54:25.340 --> 00:54:29.080
We have, uh,
you didn't wait until I asked for it.

00:54:29.080 --> 00:54:30.080
I'm gonna have to do it again.

00:54:30.080 --> 00:54:30.580
Hang on.

00:54:30.610 --> 00:54:32.200
Wait for me.

00:54:32.200 --> 00:54:33.900
My show.

00:54:33.900 --> 00:54:35.820
I have slides.

00:54:49.140 --> 00:54:52.500
And can I have demo two?

00:54:52.540 --> 00:54:57.140
Thank you.

00:54:57.140 --> 00:54:58.500
Thank you very much.

00:55:02.600 --> 00:55:04.200
I forget why I came over here.

00:55:04.200 --> 00:55:06.780
Oh yeah,
let me just show you a couple little

00:55:06.780 --> 00:55:10.850
debugging things and then we'll try to
assemble a potentially useful workflow.

00:55:11.070 --> 00:55:12.000
Let's see, let me build a new one here.

00:55:12.000 --> 00:55:14.980
I'm going to build a shell script
Automator Action that does not

00:55:14.980 --> 00:55:16.360
really actually do anything.

00:55:16.540 --> 00:55:18.900
Does not do anything.

00:55:18.930 --> 00:55:20.270
Much.

00:55:23.220 --> 00:55:27.650
version one.

00:55:27.650 --> 00:55:31.160
I feel like putting parentheses in
a file name is a bad idea somehow.

00:55:31.400 --> 00:55:44.600
[Transcript missing]

00:55:45.400 --> 00:56:01.600
[Transcript missing]

00:56:03.800 --> 00:56:17.200
[Transcript missing]

00:56:18.700 --> 00:56:19.860
AM default parameters.

00:56:19.860 --> 00:56:26.250
Here we go, indict.

00:56:26.250 --> 00:56:26.250
Key foo, key string.

00:56:26.720 --> 00:56:27.790
"Nothing.

00:56:27.850 --> 00:56:28.700
String.

00:56:28.700 --> 00:56:29.300
Key.

00:56:29.300 --> 00:56:29.900
Bar.

00:56:29.900 --> 00:56:30.500
Key.

00:56:30.500 --> 00:56:32.510
Isn't this exciting?

00:56:32.510 --> 00:56:36.210
Isn't this the best
part of WWC right here?

00:56:36.210 --> 00:56:38.510
What if my cab's here yet?

00:56:38.700 --> 00:56:41.510
That's what you're all thinking.

00:56:41.520 --> 00:56:43.180
Is my cab here yet?

00:56:43.240 --> 00:56:46.600
Is he going to remember to take out
that last dictionary that's sitting

00:56:46.600 --> 00:56:46.600
right-- Can he type the word 'dict'?
Where's my spell checking workflow?

00:56:46.600 --> 00:56:46.600
Ugh!"

00:56:49.200 --> 00:56:50.660
So I just want to bind two things, right?

00:56:50.660 --> 00:56:51.700
I want to bind two things.

00:56:51.700 --> 00:56:53.990
And I got one called foo
and I got one called bar.

00:56:55.050 --> 00:56:55.050
And I'm going to bind...

00:56:55.340 --> 00:57:02.300
and his team will be presenting the next
session of Automator Action Sessions.

00:57:03.670 --> 00:57:05.060
Okay, selected value.

00:57:05.080 --> 00:57:07.430
And this one here, I'm going to bind the
value of the checkbox,

00:57:07.430 --> 00:57:08.830
which is a 1 or a 0 to bar.

00:57:08.870 --> 00:57:09.990
Okay?

00:57:10.020 --> 00:57:11.910
Simple?

00:57:13.300 --> 00:57:17.200
So, uh... And remember,
my script is just gonna say printenv.

00:57:17.200 --> 00:57:20.810
Printenv is a Unix command that
merely prints the value of all

00:57:20.810 --> 00:57:23.310
the current environment variables.

00:57:24.380 --> 00:57:26.440
So if I've got a little
script like this here,

00:57:26.440 --> 00:57:30.260
let's check the syntax of this
while we're just waiting here.

00:57:30.430 --> 00:57:31.640
Parse selection is property list.

00:57:31.640 --> 00:57:33.470
Parse file is property list.

00:57:33.520 --> 00:57:35.340
Oh, phew, that's always nice.

00:57:35.370 --> 00:57:37.290
Oh, what did I forget?

00:57:38.650 --> 00:57:40.220
Command bin sh failed with exit code one.

00:57:40.220 --> 00:57:42.020
Aha, I always make, what is that?

00:57:42.020 --> 00:57:45.190
Couldn't read.

00:57:46.330 --> 00:57:47.300
What's wrong with it?

00:57:47.300 --> 00:57:47.630
No, it hasn't got that far yet.

00:57:47.650 --> 00:57:51.150
It's not actually,
uh... It's running the build script.

00:57:51.250 --> 00:57:54.820
Put up the slides for a moment.

00:57:54.820 --> 00:57:56.340
Thank you.

00:57:59.260 --> 00:58:00.660
In fact, you know what,
let's go back to that movie.

00:58:00.660 --> 00:58:02.120
I love that movie on the first slide,
you know?

00:58:02.200 --> 00:58:05.200
Steve, the name is too long.

00:58:05.200 --> 00:58:06.200
Get out.

00:58:06.200 --> 00:58:07.200
The name is too long?

00:58:08.950 --> 00:58:10.840
Oh, a trailing space.

00:58:10.840 --> 00:58:12.520
What kind of fool am I?

00:58:12.560 --> 00:58:13.040
Don't answer that.

00:58:13.040 --> 00:58:15.400
It's a rhetorical question.

00:58:15.500 --> 00:58:17.700
When I come back, I want to know what the
purple thing with an S is.

00:58:17.700 --> 00:58:18.390
I don't know what that is.

00:58:18.390 --> 00:58:20.990
I've seen it go by four
or five times already.

00:58:23.060 --> 00:58:24.120
All right, you can come back over here.

00:58:24.170 --> 00:58:26.280
You can come back over to this one.

00:58:26.320 --> 00:58:29.660
Doesn't do anything
much yet with no space.

00:58:29.700 --> 00:58:30.880
Think that'll be better?

00:58:30.940 --> 00:58:32.510
Thank you, everybody.

00:58:32.570 --> 00:58:33.900
Radar, where is Radar?

00:58:34.030 --> 00:58:37.630
Cannot create project
whose name ends in space.

00:58:37.960 --> 00:58:41.110
How many people think, like me,
that should be a priority one bug?

00:58:42.390 --> 00:58:43.140
Here we go, real fast.

00:58:43.140 --> 00:58:44.300
I'll just do one thing here.

00:58:44.300 --> 00:58:45.610
We'll get the pop-up.

00:58:45.780 --> 00:58:46.900
Whoops, hang on.

00:58:46.900 --> 00:58:50.100
Bring in a pop-up and make him small.

00:58:51.120 --> 00:58:55.210
is a small size and we're
going to bind him to,

00:58:55.210 --> 00:58:59.410
to bind his selected value to foo,
and then I'm going to

00:58:59.410 --> 00:58:59.410
go fix the Info.plist.

00:59:00.400 --> 00:59:02.400
I'm going to fix the Info.plist.

00:59:02.400 --> 00:59:04.820
And do you think I would be able
to cut and paste this by now

00:59:04.820 --> 00:59:07.880
or use the demo typing monkey,
but...

00:59:16.700 --> 00:59:24.000
[Transcript missing]

00:59:25.060 --> 00:59:27.040
I like to put it on its own line, okay?

00:59:27.040 --> 00:59:30.690
Like that.

00:59:30.690 --> 00:59:30.690
Jeez.

00:59:31.000 --> 00:59:32.220
And back in our script,
what were we doing?

00:59:32.340 --> 00:59:35.020
Printing NV or something
pointless like that?

00:59:35.070 --> 00:59:37.870
All right, where are we here?

00:59:40.400 --> 00:59:42.210
What a great example, huh?

00:59:42.210 --> 00:59:45.230
Watch it fail again because
it's still too long.

00:59:45.230 --> 00:59:47.260
Okay, this time it's working.

00:59:47.260 --> 00:59:47.770
Phew.

00:59:47.770 --> 00:59:51.030
So here comes a script with
a somewhat pointless UI.

00:59:51.030 --> 00:59:52.700
Does not do anything yet.

00:59:52.700 --> 00:59:54.200
Oh, it's got a pop-up.

00:59:54.200 --> 00:59:56.940
I forgot to take that up,
but we don't care.

00:59:56.940 --> 00:59:58.750
We're all friends, right?

00:59:58.750 --> 01:00:01.340
I'm so glad we're having this rehearsal.

01:00:01.400 --> 01:00:03.960
You know, I love these WWDC rehearsals.

01:00:03.960 --> 01:00:05.610
Conference next week is
going to be so great.

01:00:05.610 --> 01:00:05.610
You're all so kind for
sitting through this here.

01:00:06.400 --> 01:00:16.700
[Transcript missing]

01:00:17.070 --> 01:00:19.370
But seriously,
this is actually a fairly useful

01:00:19.370 --> 01:00:20.700
way to debug what's going on.

01:00:20.700 --> 01:00:23.200
If you've got a whole bunch of
bindings and something went wrong

01:00:23.200 --> 01:00:26.000
and you can't figure out why,
just check it here.

01:00:26.100 --> 01:00:29.530
And while you're at it,
let's just pretend that this

01:00:29.620 --> 01:00:32.370
particular UI was-- there was
more going on in this script.

01:00:32.420 --> 01:00:35.050
So I'm going to redirect
printenv to devconsole.

01:00:36.300 --> 01:00:38.600
And I'm going to start up the, yeah,
you know what,

01:00:38.600 --> 01:00:40.020
just because I was waiting, all right?

01:00:40.030 --> 01:00:41.530
Maybe there was going
to be more in that line.

01:00:41.540 --> 01:00:45.780
That's why that backslash is there.

01:00:45.820 --> 01:00:47.900
So we'll run that again and
I'll go find the console app

01:00:47.980 --> 01:00:50.180
that I forgot to put in my doc.

01:00:52.570 --> 01:00:58.380
: Spotlight.

01:00:58.380 --> 01:00:58.380
I've heard about that.

01:00:58.380 --> 01:00:58.380
Is that good?

01:01:01.210 --> 01:01:03.740
So console is constantly
displaying everything that went

01:01:03.820 --> 01:01:06.820
to a certain output device.

01:01:06.840 --> 01:01:11.940
And we'll try Automator here
with this modified-- oh,

01:01:11.940 --> 01:01:13.400
sorry, it's in terminal.

01:01:13.440 --> 01:01:14.700
Does not actually do anything yet.

01:01:14.700 --> 01:01:16.220
Run that now.

01:01:16.250 --> 01:01:19.430
And the output of that command should
appear down here in the console.

01:01:19.450 --> 01:01:22.900
Oh, there's the output of
printenv in the console.

01:01:22.910 --> 01:01:24.750
That's a nice way--

01:01:25.500 --> 01:01:27.700
If I'd known you were going to
clap or something like that,

01:01:27.700 --> 01:01:30.100
I wouldn't have wasted so
much time on the slides.

01:01:30.100 --> 01:01:33.160
Let me show you one last thing,
then I'll take a couple of questions,

01:01:33.210 --> 01:01:34.250
because I can see we're
almost out of time here.

01:01:34.340 --> 01:01:37.300
I decided that it might be useful
to do an actual practical workflow.

01:01:37.300 --> 01:01:40.100
How many times has this happened to you?

01:01:40.100 --> 01:01:40.680
Here's my iPod.

01:01:40.690 --> 01:01:43.410
It's connected to this computer.

01:01:43.760 --> 01:01:44.660
Oh, it's in use.

01:01:44.720 --> 01:01:45.380
It could not be ejected.

01:01:45.500 --> 01:01:49.770
Please quit some random
application and see if that helps.

01:01:52.000 --> 01:02:00.660
Would it kill the finder to give you
a hint about what application it was?

01:02:00.660 --> 01:02:05.590
Well, there happens to be a majestic
Unix command called LSOF.

01:02:05.680 --> 01:02:09.600
And LSOF will give you a ton
of data about every process and

01:02:09.950 --> 01:02:12.230
every file that it has open.

01:02:12.360 --> 01:02:16.060
And if you can manage to get through
the incredibly long LSOF man page,

01:02:16.060 --> 01:02:19.160
you may discover one or two that can
restrict it to a certain file system.

01:02:19.240 --> 01:02:20.780
So I had this idea that I'd
write a workflow that would

01:02:20.780 --> 01:02:21.650
solve this problem for me.

01:02:22.030 --> 01:02:23.740
so

01:02:24.230 --> 01:02:24.560
Here's a trick.

01:02:24.710 --> 01:02:26.580
Control-click on anything in
the finder and you can say

01:02:26.580 --> 01:02:27.700
Automator create workflow.

01:02:27.700 --> 01:02:30.500
It will make a new workflow
that starts out with that thing.

01:02:30.500 --> 01:02:31.100
That's kind of nice.

01:02:31.100 --> 01:02:33.330
So there's a workflow
that starts out with that.

01:02:33.430 --> 01:02:37.890
We're going to add a plain ordinary
shell script because I previously looked

01:02:38.000 --> 01:02:40.370
up the actual command that I want.

01:02:40.420 --> 01:02:43.090
Actually, this has to go to arguments.

01:02:43.170 --> 01:02:44.400
And we're going to delete that here.

01:02:44.530 --> 01:02:49.370
And we want to bring in a little bit of
LSOF command that will actually tell me

01:02:50.010 --> 01:02:50.900
Yeah, zoom, zoom.

01:02:50.900 --> 01:02:53.740
That's going to say --
see that dollar sign,

01:02:53.740 --> 01:02:54.190
ad sign?

01:02:54.250 --> 01:02:56.420
That says take the output
of the previous command,

01:02:56.420 --> 01:02:59.320
which is going to be the path name
that was selected in that first thing.

01:02:59.320 --> 01:03:03.100
And run LSOF with these mystery
arguments on it and show me the results.

01:03:03.130 --> 01:03:04.610
Well, if we run that, oh,
here's some output.

01:03:04.610 --> 01:03:07.010
Bash and Microsoft Word and
there's a bunch of process IDs.

01:03:07.290 --> 01:03:10.860
And I want to cut that down and
make that a little more useful.

01:03:10.860 --> 01:03:14.420
So let me hide that and hide that,
because the scroll is better when

01:03:14.420 --> 01:03:16.220
you hide some of these things.

01:03:16.330 --> 01:03:19.110
And bring in a few of these other work
flows that I previously alluded to.

01:03:19.290 --> 01:03:20.760
See how we're getting
a lot of stuff here?

01:03:20.800 --> 01:03:23.140
I've got this nice one called
filter text by position.

01:03:23.140 --> 01:03:28.280
And what I really want is line two
through the end and the first field.

01:03:28.280 --> 01:03:30.510
This script,
this particular work flow happens to

01:03:30.510 --> 01:03:33.080
run a big honking Perl script that
parses things and gives you the first

01:03:33.080 --> 01:03:36.130
and lines and the last three lines or
the fourth field or whatever you want.

01:03:36.320 --> 01:03:37.760
So if we run that,
we'll see that the result

01:03:37.780 --> 01:03:39.560
we're actually getting here,
this is better.

01:03:39.560 --> 01:03:41.530
It's a list,
one bash and Microsoft Word seems

01:03:41.530 --> 01:03:43.020
to have that device open twice.

01:03:43.020 --> 01:03:48.180
Well, we can put in the sort thing
and say remove the duplicates.

01:03:48.180 --> 01:03:49.720
That will narrow it

01:03:51.090 --> 01:03:53.890
Now we're down to just, hopefully,
Bash and Microsoft Word.

01:03:53.890 --> 01:03:57.360
And I'd like to present--this is a list,
and I'd like to present it to the user.

01:03:57.550 --> 01:04:00.000
Now, I don't know if there is a good
Automator Action that presents

01:04:00.000 --> 01:04:02.180
a list of things to the user,
but this is a fairly easy

01:04:02.420 --> 01:04:03.320
thing to do in AppleScript.

01:04:03.370 --> 01:04:06.280
I'm getting a list of strings,
and I'd like to say,

01:04:06.280 --> 01:04:10.060
"Choose from list that list
of strings with prompt.

01:04:10.110 --> 01:04:12.560
Here is the guilty process."

01:04:17.210 --> 01:04:26.760
: Now, when I was first developing this,
I was going to kill the

01:04:26.760 --> 01:04:26.760
process immediately after that,
but I thought that might

01:04:26.760 --> 01:04:26.760
be a little destructive.

01:04:28.600 --> 01:04:29.380
So I think we'll leave it as this,
but can you see how you can

01:04:29.380 --> 01:04:31.290
actually string some of these
things together and come up with

01:04:31.330 --> 01:04:32.390
something that might be useful?

01:04:32.480 --> 01:04:34.640
This, if I were to give you this one,
this wouldn't be that useful because

01:04:34.640 --> 01:04:39.010
it's always telling you about my iPod,
which is maybe not that helpful.

01:04:39.230 --> 01:04:41.000
I'm going to try something
here that may or may not work.

01:04:41.000 --> 01:04:44.200
So far it has worked about two out
of three times that I've tried it.

01:04:44.200 --> 01:04:49.210
I'm going to delete that thing that
says "Start out with my iPod," and I'm

01:04:49.210 --> 01:04:50.400
going to save this in a special way.

01:04:50.400 --> 01:04:52.400
I'm going to save it as a Finder plugin.

01:04:52.550 --> 01:04:58.380
Why can I not eject this freaking disk?

01:05:00.610 --> 01:05:02.050
That's now a Finder plugin.

01:05:02.130 --> 01:05:03.690
Automator lets you
save things as plugins,

01:05:03.690 --> 01:05:07.290
which means you can now go over here
and you can control-click on that.

01:05:07.570 --> 01:05:08.590
Automator.

01:05:08.670 --> 01:05:11.570
Why can I not eject this freaking disk?

01:05:28.400 --> 01:05:29.030
Thank you.

01:05:29.030 --> 01:05:32.120
I'll be happy to take a few
questions if there are any questions.

01:05:32.120 --> 01:05:35.650
I know people want to get out of here
and get on their planes because we're all

01:05:35.750 --> 01:05:38.800
going to the football game in Halifax,
Nova Scotia tomorrow.

01:05:38.800 --> 01:05:40.170
Have we got any questions?

01:05:40.170 --> 01:05:41.300
I think there's a few.

01:05:41.300 --> 01:05:44.790
Are there anybody here from the Automator
team that I might be able to pass

01:05:44.790 --> 01:05:46.980
these questions to if they get hard?

01:05:49.230 --> 01:05:51.060
Alright,
I'd be happy to take a few questions.

01:05:51.220 --> 01:05:52.100
Yes, up in the front.

01:05:52.180 --> 01:05:53.080
One quick comment.

01:05:53.090 --> 01:05:58.100
Any actions you guys come up with,
go to AutomatorActions.com

01:05:58.100 --> 01:06:00.090
and submit them.

01:06:00.180 --> 01:06:01.100
Share them with the world.

01:06:01.100 --> 01:06:04.100
I know that's what you're all about,
open source and all that.

01:06:04.100 --> 01:06:07.080
So log on and put them on there, please.

01:06:07.240 --> 01:06:10.130
Are there any good books about
Apple script programming in general,

01:06:10.130 --> 01:06:11.090
Hanan Rosenthal?

01:06:11.120 --> 01:06:13.610
Yeah, let's...

01:06:16.060 --> 01:06:16.640
Oh, he's got one.

01:06:16.710 --> 01:06:17.070
What do you know?

01:06:17.210 --> 01:06:18.200
How shameless of you.

01:06:18.200 --> 01:06:19.100
Have you got one for me?

01:06:19.100 --> 01:06:22.390
That would be a nice turnaround
if you had a book for me.

01:06:23.120 --> 01:06:27.660
If you want to carry three and a half
pounds worth of paper to Nova Scotia.

01:06:27.660 --> 01:06:28.700
Any other questions?

01:06:28.700 --> 01:06:29.660
I'm hanging around for a bit.

01:06:29.660 --> 01:06:32.480
If anybody's got any questions,
I'd be happy to take them up front.

01:06:32.480 --> 01:06:34.440
I thank you all very much for
staying to the end of WWC,

01:06:34.440 --> 01:06:35.320
and I hope you enjoyed the show.

01:06:35.320 --> 01:06:36.950
Thank you very much.

01:06:36.950 --> 01:06:37.940
Thank you.