WEBVTT

00:00:09.760 --> 00:00:10.600
Good morning.

00:00:10.600 --> 00:00:11.240
My name is David Black.

00:00:11.360 --> 00:00:13.790
I'm a senior architect in the
professional applications division.

00:00:13.790 --> 00:00:17.780
And this morning we'll be talking about
using XML along with Final Cut and

00:00:17.910 --> 00:00:20.890
the tools in Tiger to create complex
workflow applications as well as

00:00:20.890 --> 00:00:23.590
import and export data from the
professional application suite.

00:00:23.620 --> 00:00:25.440
Before we begin,
I actually want to just give

00:00:25.440 --> 00:00:27.860
you a picture of what we've
been up to for the last year.

00:00:27.860 --> 00:00:31.660
We just came back from NAB 2005,
a month or two ago,

00:00:31.660 --> 00:00:35.690
and just want to roll our demo
reel that we ran during the show.

00:02:08.800 --> 00:02:19.800
[Transcript missing]

00:03:05.400 --> 00:03:10.720
♪ It's alright this mystical time you've
got ♪ ♪ That's a lot it is plentiful ♪ ♪

00:03:10.720 --> 00:03:15.650
If you stay in this moment so critical ♪
♪ Let the music change your brain stems

00:03:15.650 --> 00:03:20.160
chemicals ♪ ♪ Make you feel like your
spirit's invincible ♪ ♪ Falsentrifical

00:03:20.160 --> 00:03:22.290
reaching up to your pinnacle mouth ♪

00:03:40.500 --> 00:03:52.600
[Transcript missing]

00:03:52.800 --> 00:03:55.800
♪ The question won't disrespect
them but our styles ♪ ♪ Cuff

00:03:55.800 --> 00:03:58.170
skin touch like Dave Beckham,
come on ♪

00:04:44.330 --> 00:04:46.930
So something to note about
everything you saw in that video,

00:04:46.930 --> 00:04:49.410
including the video itself,
is that it wasn't-- none of that

00:04:49.600 --> 00:04:52.660
content was built with any one tool,
but a combination of tools.

00:04:52.710 --> 00:04:54.720
In many cases,
those tools were linked together using

00:04:54.760 --> 00:04:57.810
different workflow technologies--
media-to-data interchange,

00:04:57.810 --> 00:04:58.780
data interchange.

00:04:58.820 --> 00:05:01.140
In the case of Final Cut,
many of those tools used XML to

00:05:01.160 --> 00:05:02.500
communicate to Final Cut.

00:05:02.500 --> 00:05:05.560
What we're going to talk about today
is we're going to actually start with

00:05:05.560 --> 00:05:08.900
a quick introduction to common data
formats you'll see in post-production.

00:05:09.070 --> 00:05:12.700
Talk about interchanging data
with Final Cut Pro using XML.

00:05:12.830 --> 00:05:15.510
And then also get into examples of
actually some applications you can

00:05:15.540 --> 00:05:20.260
build and some ideas for where you
can take these tools in your products.

00:05:21.700 --> 00:05:24.290
Starting off with project
data interchange formats,

00:05:24.290 --> 00:05:26.510
the first question,
for those of you maybe not familiar

00:05:26.510 --> 00:05:29.800
with the video production space,
is what is project data?

00:05:29.800 --> 00:05:33.750
We can think of it as really the
structure that ties everything together.

00:05:33.770 --> 00:05:37.120
Certainly, there's a lot of time and
effort put into acquiring media,

00:05:37.120 --> 00:05:41.080
shooting video, recording audio,
making stills in Photoshop, for example.

00:05:41.080 --> 00:05:43.540
But really,
the tenor and cadence of everything

00:05:43.540 --> 00:05:46.660
as it comes together is really
a function of how those elements

00:05:46.660 --> 00:05:48.340
are timed and tied together.

00:05:49.380 --> 00:05:51.870
Really, when it comes down to it,
certainly in post-production,

00:05:51.870 --> 00:05:54.770
this is the data that users
spend the most time creating.

00:05:54.780 --> 00:05:57.270
It's really getting all of those
relations together that makes the

00:05:57.270 --> 00:05:58.920
product come together right in the end.

00:05:58.920 --> 00:06:02.050
And traditionally,
this has been difficult to exchange.

00:06:02.060 --> 00:06:04.410
In many ways,
many application vendors think

00:06:04.410 --> 00:06:07.000
of this as their secret sauce,
the things that make their

00:06:07.130 --> 00:06:08.720
applications better than other people.

00:06:08.720 --> 00:06:12.150
And there's a lot of mismatch in
features which has made this problem

00:06:12.160 --> 00:06:13.900
not necessarily easy to solve.

00:06:15.980 --> 00:06:17.860
Legacy formats,
you can think of things that came

00:06:17.860 --> 00:06:19.920
together maybe one to two decades ago.

00:06:19.920 --> 00:06:22.620
And really they were tied
around hardware formats,

00:06:22.740 --> 00:06:24.250
basically hardware tools.

00:06:24.260 --> 00:06:27.120
So you could think of a bank of
tape decks going through a switcher.

00:06:27.140 --> 00:06:28.700
Think of a telecine machine.

00:06:28.700 --> 00:06:31.060
Think of early
film-to-video technologies.

00:06:31.060 --> 00:06:34.530
And if you look at examples,
probably the simplest is just

00:06:34.530 --> 00:06:35.860
something called a batch list.

00:06:35.860 --> 00:06:39.220
A batch list is really just a list
of relevant segments of media on

00:06:39.220 --> 00:06:42.460
a source tape or a linear source
medium indexed by timecode with

00:06:42.460 --> 00:06:44.170
some basic logging information.

00:06:44.700 --> 00:06:46.640
Name, author, tape identifier, et cetera.

00:06:46.640 --> 00:06:50.620
And EDL is really an expansion on
that where those individual segments

00:06:50.620 --> 00:06:53.860
are laid out in relation to each
other to form a completed production.

00:06:53.860 --> 00:06:57.580
So you can think of the ordering,
the timing, transitions, audio effects,

00:06:57.580 --> 00:06:58.280
et cetera.

00:07:00.400 --> 00:07:03.330
Contemporary formats came about in
the last decade with the rise of

00:07:03.470 --> 00:07:05.360
digital nonlinear editorial systems.

00:07:05.360 --> 00:07:08.080
As computing power came
up in the early 90s,

00:07:08.080 --> 00:07:10.240
all of a sudden,
tape-based bays were no longer

00:07:10.240 --> 00:07:12.200
the most cost-effective solution.

00:07:12.200 --> 00:07:15.000
And as software solutions came online,
they added vast amounts of

00:07:15.000 --> 00:07:16.540
capability to the whole picture.

00:07:16.880 --> 00:07:20.380
So, created to replace legacy formats,
really to address those

00:07:20.380 --> 00:07:23.160
unique capabilities,
these formats had the disadvantage

00:07:23.170 --> 00:07:26.380
of unfortunately being based
around binary container formats.

00:07:26.380 --> 00:07:29.370
Many of the legacy formats were
actually nothing more than plain text,

00:07:29.370 --> 00:07:32.600
something that could be stored easily
on a floppy disk or even a printout.

00:07:32.630 --> 00:07:35.040
But with computing
power somewhat limited,

00:07:35.040 --> 00:07:37.460
binary formats were used for efficiency.

00:07:37.460 --> 00:07:41.130
The problem with binary formats is
they can be very complex to parse.

00:07:41.130 --> 00:07:45.560
You're looking at potentially having
specific library and tool requirements.

00:07:45.560 --> 00:07:46.850
This may actually make it harder to
find a way to store a particular format.

00:07:46.890 --> 00:07:49.100
It may even make it harder to take
data from one platform to another.

00:07:49.100 --> 00:07:51.730
Two examples of this,
probably the one everyone

00:07:51.730 --> 00:07:54.630
in the post-production
space is most familiar with,

00:07:54.630 --> 00:07:55.110
is OMF.

00:07:55.220 --> 00:07:58.440
This was created by Avid in the
early 90s as an interchange form

00:07:58.440 --> 00:08:00.480
between their individual tool sets.

00:08:00.540 --> 00:08:04.640
And while an SDK was made available,
it never quite caught on, really.

00:08:04.640 --> 00:08:06.470
And because it was
controlled by one company,

00:08:06.470 --> 00:08:08.320
no one really trusted it, quite frankly.

00:08:08.320 --> 00:08:11.190
In order to address the
shortcomings of OMF,

00:08:11.190 --> 00:08:13.640
AAF came about in the mid-90s.

00:08:13.640 --> 00:08:16.590
And this was a format with
the same goals in mind,

00:08:16.610 --> 00:08:16.860
except that it was a
little bit more complex.

00:08:16.910 --> 00:08:17.380
In other words, it was a concept.

00:08:17.380 --> 00:08:20.380
Instead of being driven by one company,
it was driven by an industry consortium.

00:08:20.380 --> 00:08:24.200
Really, the goal of this project was
interchange between large,

00:08:24.260 --> 00:08:26.380
complex editorial tools.

00:08:26.610 --> 00:08:30.210
And being such,
binary container formats were used,

00:08:30.210 --> 00:08:33.380
again,
under the auspices of a foundation.

00:08:33.380 --> 00:08:36.510
The problem with AAF is it really
hasn't seen the adoption that

00:08:36.510 --> 00:08:37.370
everyone had hoped it would.

00:08:37.380 --> 00:08:40.380
Part of this is just due to
the complexity of the format.

00:08:40.430 --> 00:08:44.380
Part of it just being due to, again,
the focus on large vendors,

00:08:44.380 --> 00:08:46.660
not necessarily small vendors.

00:08:47.340 --> 00:08:49.560
Open data formats have actually
finally started to come

00:08:49.560 --> 00:08:51.260
around the last few years.

00:08:51.330 --> 00:08:55.300
As computing power has gone forward,
more and more better tools have come out.

00:08:55.350 --> 00:08:57.620
Everyone started to realize
that all of a sudden,

00:08:57.620 --> 00:09:00.650
there wasn't necessarily a
large performance or storage

00:09:00.650 --> 00:09:04.480
penalty toward storing data in
relatively easy to access formats.

00:09:04.580 --> 00:09:09.210
Think of things like XML enabling
these things to come to pass.

00:09:09.210 --> 00:09:14.200
Really the key aspect here is open
access to everything and really to

00:09:14.200 --> 00:09:14.690
make them easy to parse and generate.

00:09:16.730 --> 00:09:20.480
Getting on to talk about Final Cut Pro,
we took a look at the interchange

00:09:20.620 --> 00:09:22.700
problem starting a couple of years ago.

00:09:22.860 --> 00:09:24.710
And we started off
with customer feedback.

00:09:24.870 --> 00:09:27.840
Having put out an editorial tool
that we've seen it market for,

00:09:27.850 --> 00:09:30.470
we started to ask our customers
and developers what they wanted.

00:09:30.470 --> 00:09:32.940
From customer,
we got feedback of certainly

00:09:32.940 --> 00:09:36.580
they wanted access to common data
formats used in the industry.

00:09:36.580 --> 00:09:38.310
There were some that we
had managed to support.

00:09:38.310 --> 00:09:39.970
There were others that
we hadn't at that time.

00:09:39.980 --> 00:09:41.540
But customers wanted access to it all.

00:09:41.550 --> 00:09:44.790
Customers also wanted access to
the contents of their projects.

00:09:46.630 --> 00:09:48.850
The sophistication of the
general editorial customer has

00:09:48.850 --> 00:09:50.100
gone up in the last few years.

00:09:50.100 --> 00:09:53.530
Whereas customers may have used sort of
handwritten notes and logbooks in the

00:09:53.530 --> 00:09:56.920
past to keep track of their projects,
now they're really getting into using

00:09:56.920 --> 00:10:00.110
things like databases and other tools
on their computer to keep track of

00:10:00.110 --> 00:10:01.940
what's going on with their media.

00:10:01.940 --> 00:10:04.760
That really only works if they
can actually have some level

00:10:04.760 --> 00:10:06.270
of access to their projects.

00:10:06.340 --> 00:10:09.330
And finally, a lot of customers wanted to
integrate Final Cut Pro into

00:10:09.330 --> 00:10:11.110
their custom processing pipelines.

00:10:11.120 --> 00:10:13.480
These may have been systems that
they purchased from other vendors.

00:10:13.480 --> 00:10:15.710
These may have been internally
developed workflow systems.

00:10:16.380 --> 00:10:18.600
Developer feedback in
some ways was the same,

00:10:18.600 --> 00:10:19.740
but slightly different.

00:10:19.770 --> 00:10:23.420
Certainly, a lot of developers wanted to
interchange data with Final Cut Pro.

00:10:23.720 --> 00:10:26.250
Simple import/export,
being able to leverage

00:10:26.250 --> 00:10:29.070
their tools with ours,
and also to be able to write tools

00:10:29.070 --> 00:10:31.140
and extensions for Final Cut Pro.

00:10:31.140 --> 00:10:34.070
When you get beyond the large developers,
there are a great number of

00:10:34.070 --> 00:10:37.060
developers who actually want to
write very interesting focused tools

00:10:37.060 --> 00:10:40.090
that work with Final Cut Pro to
extend it in new areas of workflow.

00:10:40.100 --> 00:10:42.540
And finally,
developers had their own custom

00:10:42.540 --> 00:10:45.940
processing pipelines from
turnkey systems to contract work.

00:10:47.510 --> 00:10:50.030
When we considered all the feedback,
we ended up taking what we

00:10:50.140 --> 00:10:53.240
feel is a different look at
the problem than most people,

00:10:53.240 --> 00:10:56.310
in that really it's not just
interchange between systems,

00:10:56.360 --> 00:10:59.940
but really it's about enabling
both developers and users to do

00:10:59.970 --> 00:11:01.610
unique things with their data.

00:11:01.620 --> 00:11:05.480
We felt it very important to minimize
library and tool requirements.

00:11:05.520 --> 00:11:07.590
On the one hand,
we didn't quite see the need anymore

00:11:07.590 --> 00:11:09.910
with where systems are today,
but at the same time,

00:11:10.000 --> 00:11:12.880
we felt it very important to
enable everyone to work with us.

00:11:13.650 --> 00:11:16.500
Something else we also sort of
see as a creeping problem that not

00:11:16.500 --> 00:11:19.480
necessarily everyone has considered is
really long-term archival of projects.

00:11:19.480 --> 00:11:21.750
I'll come back to that in a minute,
but it's sort of a problem that

00:11:21.750 --> 00:11:24.400
not everyone has realized yet,
but just starting to rear its head.

00:11:26.200 --> 00:11:29.700
To solve this, we came up with a
Final Cut Pro XML interchange format.

00:11:29.720 --> 00:11:32.550
We initially introduced
it with Final Cut Pro 4.

00:11:32.660 --> 00:11:34.740
And of course, it's coded in XML.

00:11:34.860 --> 00:11:35.800
Found this very important.

00:11:35.800 --> 00:11:37.340
Standard tools, standard libraries.

00:11:37.390 --> 00:11:39.520
Tiger has wonderful support for XML.

00:11:39.670 --> 00:11:42.550
And even when it comes down to it,
you can parse it and use it

00:11:42.610 --> 00:11:44.210
as plain text if you want.

00:11:44.370 --> 00:11:46.390
And we put it together,
we felt it very important to make

00:11:46.390 --> 00:11:49.750
sure that it covered the complete
spectrum of a Final Cut Pro project.

00:11:50.000 --> 00:11:52.190
The data structures within
our self-documenting,

00:11:52.220 --> 00:11:56.000
if you had the XML and nothing else,
you could make sense of it.

00:11:56.020 --> 00:11:59.140
And we also felt very important that
with the data we had control over,

00:11:59.150 --> 00:12:01.990
we did not want any black or dark data.

00:12:02.130 --> 00:12:04.710
This is actually,
this is quite a serious problem

00:12:04.710 --> 00:12:07.440
in some formats where there'll be
data encoded in such a way where

00:12:07.440 --> 00:12:10.890
a particular vendor can access it,
but an average user, power user,

00:12:10.930 --> 00:12:14.390
or a third-party developer cannot,
and that dramatically limits

00:12:14.390 --> 00:12:16.290
the flexibility of those tools.

00:12:16.720 --> 00:12:18.140
Here's a brief snippet of XML.

00:12:18.140 --> 00:12:20.000
We'll get into a little
bit more details later.

00:12:20.040 --> 00:12:22.300
But if you look at this,
this is really on the order of

00:12:22.300 --> 00:12:23.880
just defining a simple clip.

00:12:23.890 --> 00:12:28.160
You see a name, a duration, a frame rate,
and even a source time code to

00:12:28.160 --> 00:12:30.610
track back to a source media tape.

00:12:32.950 --> 00:12:36.060
In designing our XML format,
we considered it very much

00:12:36.060 --> 00:12:37.400
a superset of formats.

00:12:37.400 --> 00:12:39.220
Again,
with the feedback from our customers,

00:12:39.220 --> 00:12:41.100
they wanted access to
common industry formats.

00:12:41.140 --> 00:12:43.780
We threw everything into our
format so that we could actually

00:12:43.780 --> 00:12:45.480
use it as a translation mechanism.

00:12:45.480 --> 00:12:48.810
In fact, internally,
we already have several translation

00:12:48.810 --> 00:12:53.000
tools that use our XML as an intermediary
format to simplify the process.

00:12:53.000 --> 00:12:55.520
For example,
we have an AAF plugin up on our

00:12:55.730 --> 00:12:57.780
website for users to download.

00:12:57.780 --> 00:13:00.500
That AAF basically
translates to and from XML.

00:13:00.500 --> 00:13:05.290
We talked about an archivable
format and this being an issue.

00:13:05.360 --> 00:13:07.770
Think of maybe 30,
40 years ago if someone

00:13:07.770 --> 00:13:09.100
were to go and cut a film.

00:13:09.110 --> 00:13:11.380
Once that film was completed,
they could store the original

00:13:11.380 --> 00:13:14.500
negative and the cut list indicating
the segments of tape being used.

00:13:14.500 --> 00:13:17.940
And 30, 40 years back,
assuming that film stock had survived,

00:13:17.980 --> 00:13:19.680
you could come back and
reconstruct that project.

00:13:20.340 --> 00:13:23.420
Similar capabilities with EDLs, again,
need to preserve your source tapes.

00:13:23.500 --> 00:13:26.520
Of course, the problem is with
binary container formats,

00:13:26.520 --> 00:13:29.200
if it's dependent on a
particular library or platform,

00:13:29.200 --> 00:13:30.480
20 years from now,
they're going to be able to use it.

00:13:30.480 --> 00:13:34.040
Now, that platform and that library
may not exist or may not

00:13:34.040 --> 00:13:35.860
exist in a usable fashion.

00:13:35.860 --> 00:13:38.160
Having this data as plain text
makes it relatively simple

00:13:38.160 --> 00:13:39.550
for someone to write a parser.

00:13:39.550 --> 00:13:42.890
Again,
no library or platform requirements

00:13:43.000 --> 00:13:47.770
and XML is great for this,
as is making it self-documenting.

00:13:48.600 --> 00:13:49.480
Who's using this today?

00:13:49.480 --> 00:13:51.620
A lot of people are
in the last few years.

00:13:51.620 --> 00:13:55.490
Automatic Duck and Gallery systems
have a wide range of interchange tools,

00:13:55.630 --> 00:13:59.100
primarily oriented toward interchanging
between Final Cut and Avid systems.

00:13:59.100 --> 00:14:01.860
Building for Media,
a small shop in the Netherlands,

00:14:01.860 --> 00:14:05.340
actually has an entire broadcast
automation system built using

00:14:05.340 --> 00:14:08.590
QuickTime and Final Cut and XML,
which is being deployed in

00:14:08.590 --> 00:14:11.140
several broadcast stations
around the world at this point.

00:14:11.160 --> 00:14:14.810
Grass Valley makes a very well-thought-of
line of broadcast servers.

00:14:15.360 --> 00:14:18.540
They actually added support in the
last year for Final Cut systems

00:14:18.540 --> 00:14:22.000
to not only retrieve media
from their playback servers,

00:14:22.000 --> 00:14:24.140
but push media up for broadcast as well.

00:14:24.140 --> 00:14:28.530
Siemens, formerly BBC Technology,
has a rather interesting workflow

00:14:28.530 --> 00:14:30.840
workgroup system called Kaledia.

00:14:30.860 --> 00:14:32.920
So you can think of this
sort of as a multi-user

00:14:32.920 --> 00:14:36.700
collaborative editorial workspace,
essentially indexing media and projects,

00:14:36.700 --> 00:14:37.310
et cetera.

00:14:37.320 --> 00:14:40.960
And this is linked directly
with Final Cut Pro using XML.

00:14:40.960 --> 00:14:44.170
It's actually a separate application
which uses XML and Finder

00:14:44.170 --> 00:14:46.100
Launch to enable data interchange.

00:14:46.350 --> 00:14:50.170
Finally, Silicon Color is a small company
which has a very well-thought-of

00:14:50.430 --> 00:14:51.350
color grading system.

00:14:51.360 --> 00:14:53.770
Think of color grading as sort
of the industrial strength

00:14:53.770 --> 00:14:57.730
version of color correction,
used in the film world, et cetera.

00:14:57.780 --> 00:15:01.980
And this system actually does full
round-tripping with Final Cut Pro,

00:15:02.340 --> 00:15:05.850
tracking changes to the
media not only within itself,

00:15:05.850 --> 00:15:07.040
but within Final Cut.

00:15:07.080 --> 00:15:09.190
So essentially,
you could grade a show and

00:15:09.390 --> 00:15:11.580
then have someone go back
and tweak it in Final Cut,

00:15:11.580 --> 00:15:16.490
and Silicon Color would notice and
reprocess only the footage that changed.

00:15:17.630 --> 00:15:20.360
Version 1 we released
back Final Cut Pro 4.1.

00:15:20.530 --> 00:15:22.650
It's supported in 4.5 and 5.0.

00:15:23.220 --> 00:15:25.660
When we released Final Cut Pro 5.0
earlier this year,

00:15:25.660 --> 00:15:28.120
we actually bumped the
version to version 2.

00:15:28.120 --> 00:15:31.490
And primarily this is about supporting
new features in Final Cut Pro,

00:15:31.490 --> 00:15:34.330
including multi-camera editing,
much improved support

00:15:34.330 --> 00:15:36.500
for multi-channel audio,
and even film data

00:15:36.500 --> 00:15:38.080
courtesy of Cinema Tools.

00:15:40.070 --> 00:15:43.850
And really when it comes down to it,
it's all about the workflow

00:15:44.030 --> 00:15:45.810
these tools put together.

00:15:45.810 --> 00:15:48.690
And start off by talking about
some lightweight workflow tools,

00:15:48.690 --> 00:15:50.920
things that are relatively
simple to put together.

00:15:51.110 --> 00:15:54.220
Think if you could use Perl scripts,
Apple script, Automator to build these.

00:15:54.530 --> 00:15:57.170
These are things oriented
around you have a task,

00:15:57.170 --> 00:16:00.590
might be repetitive,
might be something you do once a month,

00:16:00.590 --> 00:16:04.030
and you want to automate it both
for accuracy and efficiency.

00:16:04.080 --> 00:16:07.990
And really these are the kind of things
that not only developers can build,

00:16:07.990 --> 00:16:07.990
but power users as well.

00:16:09.470 --> 00:16:12.240
Some examples of this,
you might talk about interstitials,

00:16:12.240 --> 00:16:13.880
essentially sort of the
little now playing numbers

00:16:13.880 --> 00:16:14.880
you'll see in a TV station.

00:16:14.880 --> 00:16:17.100
Text overlays,
you might have footage shot

00:16:17.180 --> 00:16:18.940
in a language with subtitles.

00:16:18.940 --> 00:16:20.940
You want to automate the
insertion of those subtitles

00:16:20.940 --> 00:16:22.000
on that media as you edit it.

00:16:22.100 --> 00:16:25.440
And even just doing data mining or
extracting information from projects,

00:16:25.500 --> 00:16:28.210
you might want to know what songs,
what media is used for rights purposes.

00:16:30.020 --> 00:16:31.340
And with that,
I'd actually like to invite

00:16:31.340 --> 00:16:35.460
Eric Version on stage to show you some
examples of tools he put together.

00:16:39.770 --> 00:16:42.170
Good morning, everyone.

00:16:42.250 --> 00:16:43.780
As David mentioned,
I'm going to show you some

00:16:43.780 --> 00:16:48.280
of the things you can do with
Final Cut Pro XML interchange format.

00:16:48.280 --> 00:16:49.860
I always have a little
trouble with that phrase.

00:16:49.860 --> 00:16:56.520
I'm going to go ahead and
open up one of the samples

00:16:57.490 --> 00:17:02.160
that comes with Final Cut Pro.

00:17:02.160 --> 00:17:02.160
It's a little set of -- excuse me.

00:17:02.160 --> 00:17:02.160
Am I not --

00:17:02.810 --> 00:17:04.280
What's going on here?

00:17:04.280 --> 00:17:05.160
Here we go.

00:17:05.160 --> 00:17:06.940
OK.

00:17:06.940 --> 00:17:09.600
This is a sample.

00:17:09.600 --> 00:17:12.680
Some footage of the
Bay Area in high definition.

00:17:12.680 --> 00:17:14.500
Looks very nice.

00:17:14.500 --> 00:17:17.800
And what I'd like to do is
I'd like to subtitle this.

00:17:17.800 --> 00:17:23.240
So I want to have some text that
matches what's going on with the images.

00:17:23.240 --> 00:17:27.450
And since I anticipate I'm going to
be wanting to do this more than once,

00:17:27.450 --> 00:17:30.080
I might as well write a tool.

00:17:30.080 --> 00:17:32.280
So let's pause this.

00:17:32.280 --> 00:17:33.830
We want to select it.

00:17:33.840 --> 00:17:38.020
And let's save it out
using the XML export.

00:17:38.020 --> 00:17:40.000
You'll be seeing this a lot.

00:17:40.000 --> 00:17:41.000
All right.

00:17:41.000 --> 00:17:42.260
There we go.

00:17:42.260 --> 00:17:43.260
Need to give it a name.

00:17:43.260 --> 00:17:46.380
Let's just change that name so it's a--

00:17:48.890 --> 00:17:50.600
A little bit simpler.

00:17:50.620 --> 00:17:52.560
And let's hide this away.

00:17:52.580 --> 00:17:59.040
And then that highlighted file on the
desktop is the resulting XML export.

00:17:59.560 --> 00:18:02.110
Now,
I've got two scripts up here at the top.

00:18:02.220 --> 00:18:04.920
These are both AppleScript droplets.

00:18:05.160 --> 00:18:09.740
I'm going to go ahead
and take my XML export.

00:18:09.790 --> 00:18:11.830
I'm going to show you the
action of the scripts,

00:18:11.830 --> 00:18:13.840
and then we'll go back and take
a look at how we actually did it.

00:18:13.850 --> 00:18:18.790
So I just drop that on the first one.

00:18:19.180 --> 00:18:21.600
wants to ask me where to put it.

00:18:21.600 --> 00:18:23.400
I'm just going to use the default.

00:18:23.420 --> 00:18:25.560
Let's take a look at this.

00:18:26.400 --> 00:18:27.410
Let's see.

00:18:27.410 --> 00:18:28.780
Can I zoom it up?

00:18:28.780 --> 00:18:29.870
There we go.

00:18:29.970 --> 00:18:34.240
What we have there is just a
really simple output format.

00:18:34.240 --> 00:18:35.870
We've got three columns.

00:18:36.040 --> 00:18:37.900
First column is the start time.

00:18:38.050 --> 00:18:40.240
The second column is the duration.

00:18:40.240 --> 00:18:43.270
Last column is the text
that I'm going to add.

00:18:43.280 --> 00:18:46.900
Start times and durations
are expressed in frames.

00:18:48.620 --> 00:18:51.450
You'll notice that this first one
doesn't have a very interesting title.

00:18:51.450 --> 00:18:52.580
Let's just get rid of that one.

00:18:52.580 --> 00:18:55.490
And if I was doing this for real,
I'd-- so let's just go

00:18:55.490 --> 00:18:57.060
save and put that away.

00:18:57.100 --> 00:19:01.250
Now we want to go and insert
that text into the project.

00:19:01.260 --> 00:19:03.860
So we'll drop the XML back on there.

00:19:03.890 --> 00:19:08.100
We want to go down and pick the file
that tells us what we're going to add.

00:19:08.100 --> 00:19:09.170
And we'll just take the default here.

00:19:09.240 --> 00:19:13.180
Now let's go drop that on Final Cut.

00:19:13.720 --> 00:19:17.720
Now, you'll notice in the import,
I can either create a new project or

00:19:17.720 --> 00:19:19.890
I can add this to my existing project.

00:19:19.950 --> 00:19:24.050
I'm going to go ahead and add
it to the existing project and

00:19:24.930 --> 00:19:33.310
fix the fault because you've got
a whole variety of frame rates.

00:19:33.590 --> 00:19:37.440
may have to switch that and Helena is
going to show you how you can even

00:19:37.440 --> 00:19:41.750
cause that dialogue to go away.

00:19:42.110 --> 00:19:43.240
And we can see we've got the new thing.

00:19:43.240 --> 00:19:44.540
Let's go ahead and play that.

00:19:44.540 --> 00:19:49.610
And now you'll see
that we have subtitles.

00:19:50.750 --> 00:19:54.110
And I hardly had to do any work at all.

00:19:54.180 --> 00:19:58.360
Now this,
at this point I could actually go in

00:19:58.540 --> 00:20:01.900
and change these some if I wanted.

00:20:01.950 --> 00:20:07.890
But let's pause this and I'm going to go
ahead and close the project because we're

00:20:07.890 --> 00:20:09.830
not going to be coming back to that.

00:20:10.170 --> 00:20:14.140
And let's take a look at the
scripts that we're running.

00:20:14.220 --> 00:20:16.240
Here's the first one.

00:20:16.390 --> 00:20:20.030
I'll start out with just
Apple's friendly disclaimer.

00:20:20.070 --> 00:20:22.140
You'll see that an awful lot this week.

00:20:22.190 --> 00:20:26.280
The first portion of this

00:20:26.460 --> 00:20:31.980
is simply some standard AppleScript that
I pulled off of Apple's website.

00:20:31.980 --> 00:20:34.550
It's not even on the developer site.

00:20:34.840 --> 00:20:38.280
If you go -- it's called
the AppleScript guidebook,

00:20:38.280 --> 00:20:39.560
essential subroutines.

00:20:39.730 --> 00:20:44.080
This is just a script to
process it as a droplet.

00:20:44.080 --> 00:20:49.990
The -- all the OpenHandler does is handed
the list of files that were dropped on,

00:20:49.990 --> 00:20:54.490
the application bundle,
it's checking to make sure that the

00:20:54.490 --> 00:20:57.700
particular things are actually files.

00:20:57.750 --> 00:20:59.660
If it is a file,
it's going to go ahead and

00:20:59.660 --> 00:21:01.900
call the process item routine.

00:21:02.190 --> 00:21:08.120
Otherwise, it'll post an alert telling
me it's a little upset.

00:21:09.200 --> 00:21:11.300
Here's the process item stuff.

00:21:11.530 --> 00:21:13.840
Again, this is fairly straightforward.

00:21:13.840 --> 00:21:17.880
The main thing we're doing here
is the do shell script at the end.

00:21:17.880 --> 00:21:18.500
That's really the meat.

00:21:18.610 --> 00:21:21.660
The rest of this is
just setting things up.

00:21:21.670 --> 00:21:24.720
You'll notice the
beginning of the routine,

00:21:24.720 --> 00:21:29.910
we're going and getting the path to
the application bundle that we've run.

00:21:29.910 --> 00:21:33.250
The reason that I'm doing
that is do shell script.

00:21:33.310 --> 00:21:36.380
When it invokes the shell script,
your current working directory is

00:21:36.380 --> 00:21:38.090
going to be the root of the volume.

00:21:38.090 --> 00:21:40.080
In many cases, that's not what you want.

00:21:40.080 --> 00:21:43.800
What I actually do is I grab the
path to the application bundle,

00:21:43.800 --> 00:21:45.180
pop up one level.

00:21:45.180 --> 00:21:47.230
That's what local Dura is.

00:21:47.230 --> 00:21:52.390
I also set another reference,
which is pointing to where the

00:21:52.390 --> 00:22:01.130
scripts are inside the bundle so that
I can easily call the pro script.

00:22:01.160 --> 00:22:01.780
Next line.

00:22:01.780 --> 00:22:04.060
Down, return R, display dialog.

00:22:04.060 --> 00:22:07.490
Just telling AppleScript to
run the display dialog for me.

00:22:07.500 --> 00:22:11.650
And then in the...

00:22:11.900 --> 00:22:18.900
Yeah, if you look down here,
all we're doing is--

00:22:19.080 --> 00:22:25.030
Changing the paths into quoted form
because on the Mac you can have path

00:22:25.030 --> 00:22:29.830
names that have spaces in them or other
characters and these can be a problem

00:22:29.830 --> 00:22:32.160
for the Unix command line parsing.

00:22:32.160 --> 00:22:35.710
We just go ahead and quote
everything and then down here

00:22:35.710 --> 00:22:42.150
when we have the shell script,
we actually pass a single command line

00:22:42.150 --> 00:22:45.970
which does the CD as the beginning
and then does the Perl script.

00:22:46.030 --> 00:22:48.770
Now let's show the actual Perl script.

00:22:51.000 --> 00:22:53.000
So the first thing we do is we
have to create a new Perl script.

00:22:53.000 --> 00:22:55.000
So we have to create a new Perl script.

00:22:55.000 --> 00:22:57.000
And then we have to
create a new Perl script.

00:22:57.060 --> 00:22:58.990
And then we have to
create a new Perl script.

00:23:00.100 --> 00:23:04.080
Let's go over here.

00:23:04.080 --> 00:23:06.000
OK.

00:23:06.000 --> 00:23:10.870
And notice I'm using a
Pro module called XML LiveXML.

00:23:11.270 --> 00:23:18.300
XML LiveXML is not included in the
standard Mac OS X distribution.

00:23:18.600 --> 00:23:21.230
Nor is it included in the
developer tools distribution.

00:23:21.280 --> 00:23:26.030
So if you're going to use that,
you need to go and get it either from

00:23:26.030 --> 00:23:32.660
CPAN or from Think or from Darwin Ports.

00:23:32.660 --> 00:23:36.340
In preparation for this talk,
I did actually get it from

00:23:36.340 --> 00:23:40.570
Think and I got it from
Darwin Ports and both worked.

00:23:40.770 --> 00:23:44.840
First thing I do is just create a parser.

00:23:44.840 --> 00:23:48.140
This is just-- the standard Perl is
just making sure that I was only called

00:23:48.230 --> 00:23:54.550
with one argument because I don't know
what to do if I have more than one.

00:23:55.240 --> 00:23:58.140
And here's the main routine
that's actually doing things.

00:23:58.170 --> 00:24:00.850
We start out,
we're past the name of the file

00:24:00.860 --> 00:24:05.010
that we want to operate on.

00:24:05.010 --> 00:24:05.010
We go ahead and

00:24:06.120 --> 00:24:11.960
Go ahead and ask the parser to
parse the file for us and pick up

00:24:11.960 --> 00:24:14.890
the root element of the document.

00:24:15.540 --> 00:24:18.810
Then once I've picked up the
root element of the document,

00:24:18.810 --> 00:24:22.700
I'm going to go ahead and make sure
it has the format that I'd like.

00:24:22.710 --> 00:24:27.640
Now you'll notice that this stuff here,
that's just an XPath expression.

00:24:27.930 --> 00:24:30.540
If you haven't used XPath before,
don't be afraid.

00:24:30.540 --> 00:24:33.840
I hadn't used XPath before I did this.

00:24:33.870 --> 00:24:38.100
And it's basically-- it'll take
you about half an hour to an hour

00:24:38.100 --> 00:24:43.650
to figure out how to use XPath
and feel comfortable with it.

00:24:44.050 --> 00:24:47.930
This particular sample,
I only wanted to have one sequence,

00:24:47.970 --> 00:24:52.100
so I'm making sure that the
format looks the way I want.

00:24:52.160 --> 00:25:00.190
Then I'm going ahead and finding
where the video tracks will be.

00:25:02.150 --> 00:25:09.170
Then all I'm doing is zipping
along the track and for each clip

00:25:09.170 --> 00:25:15.030
item I'm pulling out the duration,
start and end times.

00:25:15.030 --> 00:25:19.300
And the reason I'm doing this extra
nonsense down there is because

00:25:19.300 --> 00:25:20.820
I'm only picking up clip items.

00:25:20.850 --> 00:25:24.000
When I initially did this,
I did this with the

00:25:24.000 --> 00:25:26.620
sample file that you saw.

00:25:26.620 --> 00:25:30.330
I later tried to apply it to some
other things and got a little more

00:25:30.350 --> 00:25:36.810
broke because I was attempting to
compensate for the fact that I wasn't

00:25:36.810 --> 00:25:41.580
actually picking up all the items.

00:25:41.580 --> 00:25:41.580
And that's basically

00:25:41.680 --> 00:25:47.220
"Let's go ahead and
look at the second one,

00:25:47.240 --> 00:25:49.720
which looks very similar.

00:25:49.930 --> 00:25:52.840
Again, disclaimer at the front.

00:25:52.840 --> 00:25:55.470
This top part here,
this is exactly the same

00:25:55.480 --> 00:25:57.450
as the other script.

00:25:58.880 --> 00:26:04.990
And in fact, down here,
it's again very similar

00:26:05.000 --> 00:26:05.680
to the previous script.

00:26:05.840 --> 00:26:07.760
This part is exactly identical.

00:26:08.030 --> 00:26:11.430
Here's where we picked up the name of
the list file that we wanted to-- that

00:26:11.510 --> 00:26:13.960
contained the text we wanted to insert.

00:26:14.040 --> 00:26:16.040
Here's where we picked up the rest of it.

00:26:16.150 --> 00:26:19.990
And you'll notice that the do
shell script is a little more

00:26:20.040 --> 00:26:25.490
complicated because in this case,
I'm actually calling it with an argument,

00:26:25.490 --> 00:26:28.750
which is the generator
that describes the--

00:26:29.040 --> 00:26:38.960
describes to Final Cut the form of
the text that the text should take.

00:26:39.060 --> 00:26:42.240
Let's go ahead and get out of there.

00:26:42.520 --> 00:26:44.100
Go over.

00:26:44.150 --> 00:26:46.580
Here's my Perl script.

00:26:46.620 --> 00:26:48.160
Again, same sort of thing.

00:26:48.160 --> 00:26:49.960
There's our disclaimer.

00:26:50.190 --> 00:26:54.300
The opening,
this is almost exactly the same

00:26:54.300 --> 00:26:56.280
except that I'm using get ops.

00:26:56.670 --> 00:27:02.150
To pick up my options,
the process and routine in this part

00:27:02.290 --> 00:27:06.990
is identical to the previous one.

00:27:07.020 --> 00:27:10.610
And let's get down to the part
that actually does something.

00:27:11.510 --> 00:27:16.270
This line,
I go ahead and I create a track that I'm

00:27:16.380 --> 00:27:19.180
going to put the text generators into.

00:27:19.180 --> 00:27:21.740
This is initially a node that's
not connected to anything else.

00:27:21.740 --> 00:27:23.700
It's not part of my document.

00:27:23.700 --> 00:27:25.880
It's just off on the side.

00:27:26.090 --> 00:27:31.070
I go in and pick up my input,
come back in typical Perl fashion,

00:27:31.070 --> 00:27:34.360
it's just a reference
to an array of arrays.

00:27:34.360 --> 00:27:36.780
I go through that whole array.

00:27:36.780 --> 00:27:40.910
For each item in the array,
I create a generator that's going

00:27:40.910 --> 00:27:44.110
to give me back an XML node.

00:27:44.110 --> 00:27:47.060
I append that to the track,
so I'm building up the

00:27:47.090 --> 00:27:48.600
track as we go along.

00:27:48.620 --> 00:27:52.490
Once I've gone through the list,
I just take the track,

00:27:52.590 --> 00:27:57.020
attach it into the video,
and now tell the document to

00:27:57.060 --> 00:28:03.440
serialize itself back out,
and that does the write out.

00:28:03.440 --> 00:28:05.440
Here's the generator.

00:28:05.440 --> 00:28:05.440
Here's the generator.

00:28:07.800 --> 00:28:12.120
You'll see that the generators
go straight forward.

00:28:12.210 --> 00:28:13.910
For those of you who aren't
that familiar with Perl,

00:28:13.910 --> 00:28:18.810
this is a little bit of Perl magic,
which allows me, when I read in the file,

00:28:18.810 --> 00:28:21.390
to do it in a single line.

00:28:21.920 --> 00:28:26.820
So of course I'm passing the start time,
the length, and the title that

00:28:26.820 --> 00:28:28.050
I want to put up there.

00:28:28.290 --> 00:28:32.240
You'll notice that I'm actually
not even doing any XML down here.

00:28:32.300 --> 00:28:34.440
I'm just doing string substitutions.

00:28:34.500 --> 00:28:40.930
I'll show you what I'm pulling in
as the generator file in a moment.

00:28:41.360 --> 00:28:44.020
Do the same string substitutions,
then I tell the parser

00:28:44.020 --> 00:28:47.430
to parse that result,
pass back the document element so

00:28:47.430 --> 00:28:49.810
it can be stitched back into the--

00:28:50.740 --> 00:28:52.960
Overall XML.

00:28:53.010 --> 00:28:55.870
Let's go ahead and take
a look at the generator.

00:28:56.500 --> 00:28:59.040
Now you might be saying this
looks a little complicated.

00:28:59.040 --> 00:29:00.910
Gee, that's a whole bunch of XML,
isn't it?

00:29:01.500 --> 00:29:06.680
But I actually didn't
have to write that XML.

00:29:06.680 --> 00:29:08.990
I got Final Cut to give that to me.

00:29:09.000 --> 00:29:11.080
You'll notice I only changed
a couple of things in here.

00:29:11.080 --> 00:29:15.060
There's the duration,
there's the in and the out,

00:29:15.060 --> 00:29:19.210
start and end, and in fact down here
is where the string is.

00:29:19.220 --> 00:29:22.860
So let's...

00:29:24.480 --> 00:29:30.500
Take a look and see how we could go ahead
and get something like that generator.

00:29:30.500 --> 00:29:34.150
In fact, what I'm going to be showing you
here is exactly the way that I got

00:29:34.200 --> 00:29:35.460
that generator in the first place.

00:29:35.460 --> 00:29:38.990
What we're going to do
is create a new project.

00:29:39.290 --> 00:29:40.180
This is an empty project.

00:29:40.240 --> 00:29:45.320
Let's go ahead and use the
XML export and save that.

00:29:45.320 --> 00:29:47.640
We'll call this one before.

00:29:48.390 --> 00:29:54.300
Then I'm going to go over to my effects,
get a video generator.

00:29:54.340 --> 00:29:55.940
There we go, text.

00:29:55.960 --> 00:29:59.560
And throw one of these on the timeline.

00:30:01.450 --> 00:30:05.370
Okay, straightforward.

00:30:05.460 --> 00:30:08.500
And let's go ahead and export that one.

00:30:11.400 --> 00:30:14.160
"Following after, let's hide this away.

00:30:14.180 --> 00:30:17.550
Now I'm going to go to,
because I'm a Unix guy,

00:30:17.880 --> 00:30:19.760
I'm going to go over to the command line.

00:30:19.820 --> 00:30:24.600
These files happen to have been
created with Macintosh line endings.

00:30:24.600 --> 00:30:26.660
I'm just going to fix those
with a little tool of my own.

00:30:27.430 --> 00:30:30.790
And then I'm going to use OpenDiff.

00:30:32.120 --> 00:30:36.100
The only reason I'm
fixing the line endings,

00:30:36.100 --> 00:30:38.090
OpenDIF could actually handle
it with the Mac line endings,

00:30:38.160 --> 00:30:39.590
but it doesn't look quite as nice.

00:30:39.600 --> 00:30:47.240
And here you see what changed
between the two copies of the XML.

00:30:47.240 --> 00:30:50.050
Well, the duration obviously changed
because we went from having

00:30:50.360 --> 00:30:52.400
nothing to having something.

00:30:52.400 --> 00:30:55.930
And here's the generator.

00:30:56.270 --> 00:31:01.040
And if I were to cut this out and
paste it in and do a diff with

00:31:01.220 --> 00:31:06.180
the generator file I'm using,
you'd see that it's virtually identical.

00:31:11.290 --> 00:31:16.820
Now, one of the other things that
David mentioned as something we

00:31:16.820 --> 00:31:20.650
might want to do is you might
be working with what's called

00:31:20.650 --> 00:31:23.200
a bumper or an interstitial.

00:31:23.320 --> 00:31:26.810
And here's one that we had one
of our editors make for us.

00:31:37.000 --> 00:31:40.300
Surfing is serious business
for these middle schoolers.

00:31:40.300 --> 00:31:43.910
When the school day is over,
instead of heading to the playing fields,

00:31:43.910 --> 00:31:45.490
they head to the beach.

00:31:45.520 --> 00:31:48.960
Join us at 5:00 when we
meet these amazing kids.

00:31:48.960 --> 00:31:52.560
Only on KROC Channel 8.

00:31:52.560 --> 00:31:53.400
OK.

00:31:53.400 --> 00:31:55.260
Typical spot you might see on TV.

00:31:55.260 --> 00:31:58.580
You'll notice the only places where
we actually mention the time are here.

00:31:58.580 --> 00:32:01.890
There's a piece of text
that says 5 o'clock.

00:32:01.900 --> 00:32:05.600
And back here.

00:32:05.980 --> 00:32:09.440
There's-- what was that?

00:32:09.440 --> 00:32:11.140
I changed keyboards on me.

00:32:11.140 --> 00:32:11.830
Back here.

00:32:11.890 --> 00:32:12.780
Join us at 5:00.

00:32:12.800 --> 00:32:14.780
Where we say join us at 5:00.

00:32:14.860 --> 00:32:17.480
So what we want to do--

00:32:17.770 --> 00:32:22.330
is it would be really nice to be able to
generate multiple copies of this bumper,

00:32:22.530 --> 00:32:26.450
one that says five o'clock,
one that says seven, one that says 11,

00:32:26.450 --> 00:32:29.570
and be able to do that
in an automated way.

00:32:29.600 --> 00:32:34.700
So let's go ahead and
once again export the XML.

00:32:35.000 --> 00:32:38.060
Let's just give it a nice simple name.

00:32:38.110 --> 00:32:39.280
Okay.

00:32:39.280 --> 00:32:43.310
And I'm going to go ahead and
close these projects so you can

00:32:43.400 --> 00:32:46.130
see that there's nothing going on.

00:32:46.810 --> 00:32:48.280
There we go.

00:32:48.290 --> 00:32:50.590
And hide that away.

00:32:51.450 --> 00:32:53.960
Now, surf is very complicated.

00:32:54.040 --> 00:32:58.420
I'm not going to show you that XML,
but I'm going to show you

00:32:58.420 --> 00:33:00.480
what we want to do with it.

00:33:00.490 --> 00:33:03.190
Here's the beginning of my script.

00:33:03.400 --> 00:33:07.600
Okay, so we have a bumper,
and that bumper has two things

00:33:07.600 --> 00:33:10.120
that we want to modify in there.

00:33:10.120 --> 00:33:13.360
It's got the audio that
we want to swap out,

00:33:13.520 --> 00:33:16.860
and it's got the text
that we want to change.

00:33:17.600 --> 00:33:21.750
So in order to do that,
I need to have in my files coming in,

00:33:21.750 --> 00:33:24.660
I need to know what's the
name of the original audio,

00:33:24.680 --> 00:33:28.000
what's the original text,
and then what do I want to replace

00:33:28.000 --> 00:33:33.080
that with in terms of audio and text,
and what name would I like

00:33:33.080 --> 00:33:36.380
to give the resulting output.

00:33:37.860 --> 00:33:41.150
So here's in fact the
input I'm going to give it.

00:33:41.210 --> 00:33:44.960
Very straightforward.

00:33:46.530 --> 00:33:49.250
Nothing very exciting there.

00:33:49.630 --> 00:33:57.000
And you'll see that this
script is very simple.

00:33:57.000 --> 00:33:59.260
The top again,
all I'm doing is making sure

00:33:59.260 --> 00:34:00.960
I have a single argument.

00:34:01.000 --> 00:34:03.260
And here's the--

00:34:05.040 --> 00:34:20.740
Routine, I get past the file name,
I grab the content of the file.

00:34:20.740 --> 00:34:20.740
I'm not even doing any
XML parsing in this.

00:34:20.740 --> 00:34:20.740
I grab my input and then for each one
I'm going to go ahead and make a copy.

00:34:20.740 --> 00:34:20.740
If we go down and

00:34:22.180 --> 00:34:24.700
Look at Make Copy here.

00:34:24.760 --> 00:34:29.780
We're going to go, as I said,
we're getting a file name,

00:34:29.780 --> 00:34:33.340
we're getting the content of the file,
we're getting what we're looking for

00:34:33.350 --> 00:34:36.170
and what we're going to replace it with.

00:34:37.210 --> 00:34:43.880
I use standard Perl stuff that's in
the distribution to parse the name,

00:34:43.880 --> 00:34:44.860
generate a new name.

00:34:45.220 --> 00:34:48.180
I go and find all occurrences of the
audio file name and replace them.

00:34:48.180 --> 00:34:52.510
The audio file name also shows
up in URI form with escapes,

00:34:52.510 --> 00:34:57.170
so I want to catch that as well
and then substitute the text.

00:34:57.190 --> 00:35:00.580
And then when I'm done,
I just write it out.

00:35:04.600 --> 00:35:07.880
"Go ahead and if we're going to run this,
let's go over here.

00:35:07.930 --> 00:35:17.910
Just go ahead and run bumper with
surf and take input from bumper.

00:35:18.180 --> 00:35:19.020
How many times can I do that?

00:35:19.100 --> 00:35:20.430
There we go.

00:35:20.490 --> 00:35:22.710
And that didn't take any time at all.

00:35:22.840 --> 00:35:23.470
And there we have.

00:35:23.510 --> 00:35:26.170
Let's go ahead and bring one
of these up in Final Cut.

00:35:26.190 --> 00:35:29.740
I'm going to go ahead and
create a new project this time.

00:35:29.800 --> 00:35:31.850
Save it away.

00:35:35.650 --> 00:35:40.800
And if I click over here,
you can see that it now says 7 o'clock.

00:35:40.800 --> 00:35:50.510
And if I click over here, there we go.

00:35:51.590 --> 00:35:51.590
Now, just to...

00:35:57.100 --> 00:36:00.160
Okay, so as a last thing,
what I wanted to show you was once I had

00:36:00.160 --> 00:36:04.070
this thing that would do subtitles,
I got a little crazy and I went, "Oh,

00:36:04.070 --> 00:36:04.290
wow.

00:36:04.460 --> 00:36:06.670
I could do, I could like subtitle a song.

00:36:06.670 --> 00:36:10.260
I could do my own karaoke." So I took
a song I liked and I just grabbed

00:36:10.270 --> 00:36:14.510
the lyrics off the web and listened
to the song and adjusted the line

00:36:14.510 --> 00:36:16.980
breaks so it matched the phrasing.

00:36:17.030 --> 00:36:22.890
And then I wrote a very,
very simple piece of Perl

00:36:23.070 --> 00:36:30.650
that took that text and distributed
it across the timeline of the song,

00:36:30.800 --> 00:36:32.600
just evenly separated.

00:36:32.610 --> 00:36:35.240
As you can see-- not in the right place.

00:36:35.480 --> 00:36:37.200
Here we go.

00:36:42.240 --> 00:36:47.960
There's the words and after I fixed it,
I'll just play a little

00:36:47.960 --> 00:36:48.600
piece of that for you.

00:36:48.610 --> 00:36:53.240
There's sulfur, californium, and fermium,
berkelium, and also mendelevium,

00:36:53.240 --> 00:36:56.460
einsteinium, nobelium, and arcryptan,
deandre, danzine, and zircon, rhodium,

00:36:56.460 --> 00:36:58.660
and chlorine, Carbon, cobalt, copper,
tungsten, tin, and sodium.

00:36:58.660 --> 00:37:03.240
And that's what happens when you
give an engineer too much time.

00:37:03.240 --> 00:37:07.990
And with that,
I'd like to turn it back to David.

00:37:25.170 --> 00:37:26.540
Slides back, please.

00:37:26.680 --> 00:37:27.250
Thank you.

00:37:27.450 --> 00:37:28.060
Thank you, Eric.

00:37:28.090 --> 00:37:31.630
So I just wanted to give you a good
idea of just relatively powerful

00:37:31.630 --> 00:37:36.220
but simple things you can actually
put together very quickly using XML.

00:37:36.970 --> 00:37:39.750
Simple is not everything,
and there are times when you need to

00:37:39.750 --> 00:37:41.660
do something dramatically more complex.

00:37:41.660 --> 00:37:45.060
These might be situations in
which you need to actually

00:37:45.060 --> 00:37:46.980
generate XML from scratch.

00:37:46.980 --> 00:37:49.860
Maybe you're doing an import
or export type application.

00:37:49.860 --> 00:37:53.310
You might be merging very large
data sets from another application.

00:37:53.320 --> 00:37:58.440
In some ways, these tools might be more
mini-applications in some ways.

00:37:58.440 --> 00:38:02.700
Tools with UI basically targeted to
make things very simple for a user,

00:38:03.060 --> 00:38:07.280
as opposed to sort of maybe a scripting
tool or something very tailored

00:38:07.280 --> 00:38:08.320
to a particular user's workflow.

00:38:08.320 --> 00:38:11.780
And really, as opposed to using things
like Perl and AppleScript,

00:38:11.780 --> 00:38:15.320
you tend to build these things with
much more industrial strength tools,

00:38:15.320 --> 00:38:20.100
like Xcode, Interface Builder, C++,
and of course Core Foundation, Core Data,

00:38:20.100 --> 00:38:21.770
and even things like LibXML, too.

00:38:21.780 --> 00:38:25.480
Actually, to talk about some of these,
I'd like to invite Helena Ju up

00:38:25.480 --> 00:38:27.670
on stage to show you some of the
things she's been working on.

00:38:41.700 --> 00:38:43.420
Good morning.

00:38:43.470 --> 00:38:48.130
So Dave talked a little bit about how
a lot of different people are using

00:38:48.130 --> 00:38:50.620
Final Cut's XML as an integration tool.

00:38:50.620 --> 00:38:53.750
So a lot of times,
people are bringing in media

00:38:53.750 --> 00:38:58.130
via some other acquisition,
or perhaps they're editing the color,

00:38:58.130 --> 00:39:01.980
or they're sweetening the audio,
all in different applications.

00:39:02.000 --> 00:39:04.440
And then you want to bring those
things back into Final Cut.

00:39:04.450 --> 00:39:07.280
So one example, for example,
is the documentary filmmakers.

00:39:07.280 --> 00:39:09.740
A lot of them are bringing
in a lot of stills.

00:39:09.740 --> 00:39:16.370
So they perhaps will use iPhoto
to organize various albums,

00:39:16.370 --> 00:39:18.170
so let's just do that now.

00:39:18.540 --> 00:39:20.560
Here, these are just some pictures
I have in my Ocoto library.

00:39:20.560 --> 00:39:21.600
So let's see.

00:39:21.640 --> 00:39:24.600
Let's take a waterfall shot and--

00:39:24.810 --> 00:39:30.900
Some of the shots of Chicago and
this exciting pink elephant.

00:39:30.950 --> 00:39:35.060
And cookies I made at my grandma's house.

00:39:40.550 --> 00:39:46.140
So then what we're going to do here is
use a little tool that I wrote last week.

00:39:46.270 --> 00:39:49.280
It took me about two days.

00:39:49.340 --> 00:39:52.680
And we're just going to
go ahead and choose--

00:39:56.000 --> 00:39:58.200
OK, we're just going to choose
that album we just created,

00:39:58.200 --> 00:40:00.450
WWDC2.

00:40:00.460 --> 00:40:07.230
And this tool-- so I wrote
this entirely with NSXML,

00:40:07.360 --> 00:40:11.560
CF,
various core foundation tools on Tiger.

00:40:11.560 --> 00:40:18.340
And so here, we select the album that we
want to export from iPhoto.

00:40:18.340 --> 00:40:23.830
And all I do is I basically
mine the iPhoto's album XML file

00:40:23.830 --> 00:40:27.860
for the data that I want,
which is the URLs of the various

00:40:27.860 --> 00:40:32.500
files that I'm using in an album,
and also the names of all the albums,

00:40:32.500 --> 00:40:34.690
which is then I put in this pop-up.

00:40:34.700 --> 00:40:41.600
And then I use the UI to tell
myself later which durations,

00:40:41.600 --> 00:40:42.550
transitions.

00:40:42.810 --> 00:40:46.150
Here, I just created a random one
that chooses between the three

00:40:46.150 --> 00:40:49.500
that I provided in the pop-up,
and the duration of the transitions,

00:40:49.500 --> 00:40:53.200
and the frame rates,
and how we want to output

00:40:53.200 --> 00:40:54.960
the-- sequence names.

00:40:54.990 --> 00:40:58.980
So we'll just save that one off.

00:40:59.040 --> 00:41:00.020
Great.

00:41:00.020 --> 00:41:02.620
And bring that into Final Cut.

00:41:03.240 --> 00:41:05.310
I'm giving you an idea of how
the tool works and then we'll

00:41:05.310 --> 00:41:11.060
walk back through and look at the
XML generates and how that code works.

00:41:11.160 --> 00:41:13.110
So, save that.

00:41:14.970 --> 00:41:15.970
And voila, here it is.

00:41:16.050 --> 00:41:19.760
I'm actually using Final Cut Pro HD,
which is 4.5,

00:41:19.860 --> 00:41:21.660
which we released last year at NAB.

00:41:21.660 --> 00:41:24.120
So this is actually an older
version of Final Cut to show you

00:41:24.510 --> 00:41:27.340
that the XML worked even then.

00:41:27.340 --> 00:41:32.480
And you can develop powerful tools
even with the older Final Cut.

00:41:32.490 --> 00:41:36.990
The version of the XML in Final Cut 4.5,
as this is playing,

00:41:37.050 --> 00:41:40.710
is version 1 of the XML,
XML being the name of the

00:41:40.720 --> 00:41:45.240
Final Cut Pro XML interchange format.

00:41:45.250 --> 00:41:48.510
We're actually on version 2 now,
but that mostly the differences

00:41:48.510 --> 00:41:51.540
are various things for the
new features in Final Cut 5.

00:41:51.540 --> 00:41:54.310
So we're talking multi-clip,
multi-channel audio export,

00:41:54.380 --> 00:41:57.520
things like that, are in XML version 2.

00:41:57.540 --> 00:42:00.780
But other than that,
it's actually identical to version 1.

00:42:00.790 --> 00:42:06.160
So let's stop that playback
and check out that XML.

00:42:09.830 --> 00:42:16.140
Like if I import it again,
we automatically get the save dialog.

00:42:16.140 --> 00:42:20.560
We didn't get that import XML dialog
that Eric had multiple times.

00:42:20.570 --> 00:42:24.640
The reason is because I have this
block here at the top of the XML.

00:42:24.640 --> 00:42:26.210
Let's see.

00:42:32.050 --> 00:42:35.600
I'm unable to zoom,
but here we have import options.

00:42:35.600 --> 00:42:39.320
And what I do here is I create
new project and say true.

00:42:39.420 --> 00:42:43.310
So that automatically spawned
the save dialog with the default

00:42:43.410 --> 00:42:45.110
project name I put in there.

00:42:45.180 --> 00:42:49.610
And then goes ahead and does
the default sequence presets,

00:42:49.610 --> 00:42:50.620
et cetera.

00:42:51.990 --> 00:42:55.670
and all the different options
that are in that import dialog.

00:42:55.680 --> 00:42:59.730
So we'll go ahead and just basically fill
out the dialog and then the user doesn't

00:42:59.740 --> 00:43:03.450
need to see it when they import the XML.

00:43:03.490 --> 00:43:07.870
So the other interesting things here,
sequence, this part is pretty much boiler

00:43:07.970 --> 00:43:11.570
for any sequence except the
name here is different because

00:43:11.570 --> 00:43:14.940
we brought this in from the UI,
and the frame rate comes

00:43:14.940 --> 00:43:16.120
in from the UI as well.

00:43:16.120 --> 00:43:19.440
So there's media track.

00:43:19.440 --> 00:43:23.000
And then here is the first clip item
and here is the transition item.

00:43:23.040 --> 00:43:26.540
If we were to export this
from XML from Final Cut,

00:43:26.540 --> 00:43:28.440
let's just do that now.

00:43:30.380 --> 00:43:32.190
You'll see that there's
actually a lot more keys.

00:43:32.320 --> 00:43:38.550
So let's see, export XML after.

00:44:02.200 --> 00:44:04.370
There's all these other keys in
here at the top of the sequence.

00:44:04.410 --> 00:44:06.850
We've got the duration of the sequence,
which actually was at

00:44:06.850 --> 00:44:09.860
the bottom of this one,
but then we have time code in the out

00:44:09.860 --> 00:44:14.620
and then a whole bunch of different
things about the media format.

00:44:14.620 --> 00:44:17.750
And the thing I'm trying to show you
here is that while you can define

00:44:17.750 --> 00:44:20.510
pretty much everything in the XML,
you don't have to.

00:44:20.620 --> 00:44:24.970
We're trying to create a lightweight
tool so that you can simply and easily

00:44:24.970 --> 00:44:27.060
define the keys that you need to define.

00:44:27.060 --> 00:44:33.130
So for example, for the stills,
I don't really care, for example,

00:44:33.260 --> 00:44:34.930
about the duration or the

00:44:35.630 --> 00:44:37.320
the time code, things like that.

00:44:37.350 --> 00:44:41.370
So if we look at the clip item,
which this is the first clip item,

00:44:41.370 --> 00:44:48.500
it runs from here to here in the-- after,
it doesn't quite fit on the screen.

00:44:48.520 --> 00:44:52.060
And over here this is the
XML that I defined in my app.

00:44:52.110 --> 00:44:54.640
And all I defined is the
file that it's coming from,

00:44:54.640 --> 00:44:57.430
the name, the duration.

00:44:57.490 --> 00:45:00.260
So start and end, I actually just put a
negative one for the end,

00:45:00.260 --> 00:45:02.280
and I'll talk a little bit
more about how I do the timing

00:45:02.350 --> 00:45:04.100
for the individual elements.

00:45:04.130 --> 00:45:09.070
And then the time base I want you
to calculate the frame rate says.

00:45:09.590 --> 00:45:13.200
So that's a little bit
what the XML looks like.

00:45:13.340 --> 00:45:17.430
If we go to the application,

00:45:17.800 --> 00:45:19.360
here.

00:45:19.360 --> 00:45:21.730
Let me just hide those other things.

00:45:21.730 --> 00:45:23.450
So I've got two different classes here.

00:45:23.450 --> 00:45:26.900
I've got the PSController class,
and this class is the class

00:45:26.980 --> 00:45:28.450
that writes out the XML.

00:45:28.450 --> 00:45:31.730
So I've got functions
named save slideshow,

00:45:31.740 --> 00:45:34.620
write XML out to create XML document.

00:45:34.620 --> 00:45:39.270
And the other class is where I'm
pulling in things from the UI and

00:45:39.310 --> 00:45:43.600
also things from the iPhoto XML,
which is actually a PList.

00:45:43.600 --> 00:45:47.300
So I have functions like
get slideshow title,

00:45:47.300 --> 00:45:54.670
should create new project,
get clip duration, get media duration,

00:45:54.790 --> 00:45:57.560
number of files in album.

00:45:57.560 --> 00:45:59.970
These are the type of
functions I have in this class.

00:46:00.040 --> 00:46:02.140
So I'm not going to talk so much about
this class because you can pretty

00:46:02.140 --> 00:46:07.800
much bring in data from anywhere,
any database, any like from iTunes,

00:46:07.800 --> 00:46:12.640
iPhoto,
your databases or a tab-delimited file.

00:46:12.640 --> 00:46:13.600
Those can be coming from anywhere.

00:46:13.600 --> 00:46:16.470
The interesting thing and
relevant thing for this talk

00:46:16.540 --> 00:46:18.980
is how we're creating that XML.

00:46:18.980 --> 00:46:24.100
So at the top of the file, of course,
I have just the boilerplate.

00:46:24.780 --> 00:46:27.200
And then here we have saved slideshow.

00:46:27.250 --> 00:46:32.780
All this does is-- I actually got
this code from the developer.apple.com

00:46:32.790 --> 00:46:36.220
and I did a search for NSSavePanel.

00:46:36.290 --> 00:46:39.990
So you too can find this
code on your local website.

00:46:40.180 --> 00:46:42.370
And I just default save to the desktop.

00:46:42.460 --> 00:46:47.740
I write the file out as an XML file
and then I get the title from my UI and

00:46:48.000 --> 00:46:50.760
then just tell myself to write the XML.

00:46:50.760 --> 00:46:56.590
Which here is really short because I'm
using NSData and all NSData have to do

00:46:56.590 --> 00:47:00.650
is say I want to take my XML document,
which you'll see this

00:47:00.810 --> 00:47:03.330
function in a second,
and then I want to write it pretty

00:47:03.330 --> 00:47:07.200
print so that you have all the nice tabs
and everything's on different lines.

00:47:07.440 --> 00:47:11.880
And then I call the
NSData call write to file.

00:47:11.880 --> 00:47:14.780
And I sort of feel like I'm
cheating because it's so easy,

00:47:14.780 --> 00:47:16.070
but that's all there is to it.

00:47:16.100 --> 00:47:20.910
So here is a block of what
I want that XML to be output as,

00:47:20.910 --> 00:47:25.360
which is here,
this is the import options, sorry,

00:47:25.360 --> 00:47:29.990
this is a helper function called
add import options that I added

00:47:29.990 --> 00:47:34.500
to my create XML file so that
I could bypass that dialog.

00:47:34.780 --> 00:47:38.780
So all it does is output this
chunk of XML essentially,

00:47:38.780 --> 00:47:44.380
slightly different depending on
whether or not you actually wanted

00:47:44.380 --> 00:47:47.100
to output a new project or not.

00:47:47.420 --> 00:47:51.200
So we take in a root node,
which we're going to make--

00:47:51.370 --> 00:47:53.740
so we make a blank note here.

00:47:53.950 --> 00:47:55.440
All it has is the name of the thing.

00:47:55.440 --> 00:47:56.700
So it's called import options.

00:47:56.700 --> 00:47:58.260
It doesn't live anywhere.

00:47:58.290 --> 00:48:02.060
And then we add it to the root node here.

00:48:02.380 --> 00:48:05.670
And so that gets put in as a sub node.

00:48:06.050 --> 00:48:08.480
And the important thing to note
about all this processing is

00:48:08.570 --> 00:48:12.480
just that it's all about just
reorganizing data you already have.

00:48:12.480 --> 00:48:15.690
You brought in all the data from your UI,
from your other database.

00:48:15.770 --> 00:48:18.500
And here, it's not exciting,
because all you're doing is

00:48:18.500 --> 00:48:21.940
reorganizing data you already have
and sticking it in this particular

00:48:21.940 --> 00:48:25.360
order so that it looks like XML so
that Final Click can understand it.

00:48:25.560 --> 00:48:30.340
So we're going to create a new
project node and say that it's true,

00:48:30.340 --> 00:48:32.480
because we know we want
to create a new project.

00:48:32.510 --> 00:48:36.560
And then we add child to
the import options node.

00:48:36.560 --> 00:48:43.080
And that's exactly how you append things
and add new nodes to the XML tree.

00:48:43.080 --> 00:48:45.580
And I do the exact same thing here.

00:48:45.590 --> 00:48:49.660
I go and get the project name,
and then I save it off as the value

00:48:49.750 --> 00:48:52.760
of a node called target project name.

00:48:52.760 --> 00:48:56.100
And then I add it as a
child to the import options.

00:48:56.200 --> 00:49:01.610
So then I just collapsed that here for
all the rest of the import options,

00:49:01.610 --> 00:49:04.860
since now you can sort of see
how one puts together the nodes.

00:49:04.890 --> 00:49:07.990
And then for create XML document,
the only interesting thing

00:49:07.990 --> 00:49:11.720
really is that you create a
node in the middle of nowhere,

00:49:11.730 --> 00:49:12.880
just like you did everywhere else.

00:49:13.020 --> 00:49:15.390
And then you initiate with root element.

00:49:15.400 --> 00:49:18.430
And that creates an NSXML document.

00:49:18.450 --> 00:49:22.640
And then you can add the version of the
XML document and the character encoding.

00:49:22.700 --> 00:49:24.760
But after that,
everything is exactly the same.

00:49:24.820 --> 00:49:26.770
Here I'm adding an attribute.

00:49:26.780 --> 00:49:29.690
And then below,
I'm creating new elements.

00:49:29.700 --> 00:49:34.470
I'm doing add child over and over
again for the rest of the sequence.

00:49:34.500 --> 00:49:37.890
And then I have a little for loop here.

00:49:38.900 --> 00:49:48.560
which creates the clip items and
then also the transition items.

00:49:48.560 --> 00:49:50.160
So this is my loop.

00:49:50.490 --> 00:49:54.790
And the only reason it's so long is
because for each XML node I've got a

00:49:54.790 --> 00:49:58.260
couple lines where I go and get the
string and then I stick the string

00:49:58.260 --> 00:49:59.980
in the node and add it as a child.

00:49:59.980 --> 00:50:03.730
And I want to point out that the
reason why this is such uninteresting

00:50:03.730 --> 00:50:07.560
code and it's really boring is
because Tiger is really great.

00:50:07.570 --> 00:50:12.390
I used NSXML everywhere and
where I couldn't I pretty much

00:50:12.460 --> 00:50:14.330
used the core foundation analog.

00:50:16.850 --> 00:50:20.820
This demo is really boring
because Tiger is so great.

00:50:20.980 --> 00:50:23.340
I don't know how to
explain that very well.

00:50:23.520 --> 00:50:25.810
It took me two days to
write this code and I don't

00:50:25.870 --> 00:50:27.200
particularly know Cocoa very well.

00:50:27.200 --> 00:50:29.490
I'm one of the developers on Final Cut.

00:50:29.650 --> 00:50:34.710
So I just had one screen that
was developer.apple.com and

00:50:34.710 --> 00:50:36.510
I constantly looked things up.

00:50:36.570 --> 00:50:38.440
And then I had the other screen
where I was writing code.

00:50:38.590 --> 00:50:42.620
So if I can do it in two days,
I'm sure you can do it in much less time.

00:50:42.620 --> 00:50:46.840
And then down here we have where
we do the transition items.

00:50:46.840 --> 00:50:50.520
Now I said I would talk about a little
how I did the ins and the outs and the

00:50:50.520 --> 00:50:53.080
starts and the ends for the transitions.

00:50:53.120 --> 00:50:56.280
So let me do that now.

00:50:57.380 --> 00:51:00.820
Okay, so for the clip items here,
so first I have the clip item block

00:51:00.890 --> 00:51:03.660
and then I have the transition item
block below it so that if I don't

00:51:03.660 --> 00:51:06.880
have any more clip items coming up,
I know not to add a transition.

00:51:06.880 --> 00:51:09.320
So that last element isn't going
to have a transition at the end.

00:51:09.320 --> 00:51:16.440
So here to do the start and end,
I actually am calculating the start

00:51:16.440 --> 00:51:21.260
and end for each individual item based
on those durations in the dialogue.

00:51:21.290 --> 00:51:24.880
And you'll notice actually
these were in seconds,

00:51:24.980 --> 00:51:27.280
but all the math in here is in frames.

00:51:27.300 --> 00:51:32.300
So I'm going ahead and
getting the number of frames,

00:51:32.330 --> 00:51:35.230
which I'm calculating in my other class.

00:51:35.290 --> 00:51:37.610
And then I'm putting
it in as a start value,

00:51:37.610 --> 00:51:39.300
but only for the first item.

00:51:39.300 --> 00:51:41.140
And then same thing with the end.

00:51:41.260 --> 00:51:44.290
I'm only adding it for the last item.

00:51:44.290 --> 00:51:46.300
So here's where I add the end element.

00:51:46.300 --> 00:51:48.040
I'm only adding it for the last one.

00:51:48.430 --> 00:51:49.900
Everywhere else I'm
putting in negative one.

00:51:49.920 --> 00:51:53.750
And the reason I'm doing that is
because you have these transitions and,

00:51:53.750 --> 00:51:55.840
okay, so you think about the media.

00:51:55.840 --> 00:51:57.860
Because for the still, right,
the media could be however

00:51:57.860 --> 00:51:58.780
long you want it to be.

00:51:58.780 --> 00:52:00.350
It's a still,
so it's just going to repeat itself.

00:52:00.360 --> 00:52:03.350
But if there's a transition,
the media for one element is

00:52:03.350 --> 00:52:06.780
like this long and the media for
the next element is this long.

00:52:06.780 --> 00:52:09.400
And they're going to overlap where
that transition is so that you can do

00:52:09.400 --> 00:52:12.420
that wipe for the whole duration of the
transition or you can cross dissolve.

00:52:12.420 --> 00:52:15.600
And really the media needs to be there
for the whole duration of the transition.

00:52:15.600 --> 00:52:20.390
But it's hard to say, right,
that this thing overlaps that thing

00:52:20.390 --> 00:52:22.820
by however much you need it to.

00:52:22.820 --> 00:52:25.770
And Final Cut,
you figured that out magically.

00:52:25.850 --> 00:52:28.620
So what we've done is say, well,
you just say Final Cut,

00:52:28.620 --> 00:52:30.880
figure that thing out
magically with a negative one.

00:52:30.920 --> 00:52:33.060
And then you put the transition
exactly where you want it.

00:52:33.100 --> 00:52:35.780
And we know to say, okay, well,
the transition starts here,

00:52:35.780 --> 00:52:37.340
so I'm going to start blending.

00:52:37.410 --> 00:52:39.860
So that's what the negative one is for.

00:52:39.860 --> 00:52:41.160
It's an undefined value.

00:52:41.160 --> 00:52:44.320
And then we magically do that for you.

00:52:44.320 --> 00:52:46.680
So then the same thing
with the transitions.

00:52:46.790 --> 00:52:49.100
We actually put the
correct start and end in.

00:52:49.100 --> 00:52:51.500
You see there's no magic
negative ones here.

00:52:51.500 --> 00:52:53.890
And that's how you get nice transitions.

00:52:54.470 --> 00:52:58.300
I mentioned this briefly,
but the thing I wanted to leave you

00:52:58.300 --> 00:53:03.030
with is that you could really make
such a tool with any sort of database.

00:53:03.120 --> 00:53:07.530
Here, I've just used the iPhoto database
because it was convenient and I happen

00:53:07.530 --> 00:53:10.600
to have iPhoto pictures on my laptop.

00:53:10.620 --> 00:53:13.320
But given enough time,
you could do the same

00:53:13.320 --> 00:53:15.080
thing with any database.

00:53:15.100 --> 00:53:18.830
I was going to do iTunes as well,
but I ran out of time.

00:53:18.950 --> 00:53:21.270
But one can also do the
same thing with iTunes,

00:53:21.620 --> 00:53:23.230
with file maker pro database.

00:53:23.290 --> 00:53:24.620
Many people are doing this.

00:53:24.770 --> 00:53:27.990
Like Dave listed out all the various
companies are doing interesting things.

00:53:28.070 --> 00:53:30.600
Building for Media is doing
exactly this sort of workflow.

00:53:30.600 --> 00:53:32.800
They're bringing in stuff
from the broadcast server.

00:53:32.800 --> 00:53:35.000
They're saving it off to
certain files and they say,

00:53:35.000 --> 00:53:36.260
"Okay, here are the URLs.

00:53:36.260 --> 00:53:37.420
Here is how long the files are.

00:53:37.420 --> 00:53:40.430
I'm going to make you a
rough cut." And really,

00:53:40.660 --> 00:53:42.880
anybody can be doing this,
bringing it from any

00:53:42.920 --> 00:53:44.240
sort of asset system.

00:53:44.240 --> 00:53:46.810
So good luck.

00:53:52.800 --> 00:53:57.340
Thank you, Helena.

00:53:57.340 --> 00:54:01.560
So really to wrap up,
it really is all these tools,

00:54:01.560 --> 00:54:03.970
all these capabilities are
really about the workflow.

00:54:03.970 --> 00:54:09.440
And really our goal has been to enable a
wide range of tools to be built by you,

00:54:09.440 --> 00:54:10.270
by everyone.

00:54:11.670 --> 00:54:13.890
Open formats really are key to this.

00:54:13.920 --> 00:54:16.720
It's in a way, you know,
we certainly have ways we think in

00:54:16.720 --> 00:54:19.150
which our software will be used,
but there are really interesting

00:54:19.230 --> 00:54:21.550
things that we just don't know
about that you know about that

00:54:21.570 --> 00:54:22.840
we want to enable you to do.

00:54:22.840 --> 00:54:25.940
I talked earlier about
linking multiple applications,

00:54:25.940 --> 00:54:29.230
basically using data formats
to move data between different

00:54:29.230 --> 00:54:31.440
applications to round trip it,
etc.

00:54:31.440 --> 00:54:35.150
And this is really a powerful thing
and really what customers want.

00:54:35.220 --> 00:54:38.450
As Eric showed you earlier,
the simplest tools can

00:54:38.450 --> 00:54:40.420
really do powerful things.

00:54:40.420 --> 00:54:43.060
And yet,
if you want to go to that next level,

00:54:43.060 --> 00:54:45.600
you can move up to more
traditional tools to again,

00:54:45.600 --> 00:54:48.200
write many applications,
pull workflow systems, etc.

00:54:48.620 --> 00:54:49.510
relatively easily.

00:54:51.160 --> 00:54:53.600
Just some ideas, you know,
we've talked about these this morning,

00:54:53.600 --> 00:54:54.810
but just to reiterate them a little more.

00:54:54.820 --> 00:54:59.180
Data extraction, really good thing,
really important thing.

00:54:59.410 --> 00:55:01.550
Template-based media generation.

00:55:01.560 --> 00:55:04.850
Eric showed you not only
how he just merely reused a

00:55:04.910 --> 00:55:07.270
chunk of XML from Final Cut,
but how he did substitution

00:55:07.350 --> 00:55:08.490
in an initial program.

00:55:08.500 --> 00:55:12.290
Building bumpers and interstitials
like Eric showed you used to

00:55:12.430 --> 00:55:14.060
be a very time-consuming thing.

00:55:14.060 --> 00:55:17.000
It used to be a very error-prone thing,
and a lot of organizations are using

00:55:17.000 --> 00:55:18.760
tools like this to simplify things.

00:55:19.790 --> 00:55:23.140
Putting subtitles, text overlays, again,
doing automated, just quicker,

00:55:23.240 --> 00:55:24.000
more accurate.

00:55:24.000 --> 00:55:26.830
And when you get into more
sophisticated applications,

00:55:26.830 --> 00:55:30.280
asset and media management tools,
that's the number one thing

00:55:30.430 --> 00:55:32.160
we're hearing from customers.

00:55:32.160 --> 00:55:34.690
They're out there looking for
tools to complement Final Cut and

00:55:34.690 --> 00:55:36.240
their other media applications.

00:55:36.240 --> 00:55:39.940
As hard drives go up and
machines get more powerful,

00:55:39.940 --> 00:55:42.500
everyone's getting more and more media,
and they need a way to management.

00:55:42.500 --> 00:55:44.530
Production databases.

00:55:44.540 --> 00:55:46.800
Talked earlier about power users.

00:55:46.800 --> 00:55:49.640
Well, pretty much the most insane
power users I've found,

00:55:49.640 --> 00:55:50.780
are in the film community.

00:55:50.780 --> 00:55:53.850
These are people who used to have little
hand logbooks they'd scribble down

00:55:53.900 --> 00:55:55.540
information from their software with.

00:55:55.680 --> 00:55:58.730
They're now building massive database
systems off to the side that track

00:55:58.730 --> 00:56:00.250
all the production information.

00:56:00.320 --> 00:56:02.330
Not only relatively
simple things like rights,

00:56:02.410 --> 00:56:04.880
but even just who's in what shot,
what the lighting was,

00:56:04.880 --> 00:56:06.030
who was on the camera at the time.

00:56:06.080 --> 00:56:08.870
And finally,
data importers and exporters.

00:56:08.950 --> 00:56:14.140
Enabling customers to pull data back and
forth in applications in the way they

00:56:14.140 --> 00:56:17.170
want is something that definitely sells.

00:56:18.110 --> 00:56:20.880
If you're looking for more
information on any of this stuff,

00:56:21.030 --> 00:56:23.100
everything is on the developer site.

00:56:23.100 --> 00:56:25.960
All the code that Eric and
Helena showed you today is up there.

00:56:25.960 --> 00:56:27.910
Links to the
Final Cut Pro XML documentation

00:56:27.910 --> 00:56:29.330
and DTDs are up there as well.