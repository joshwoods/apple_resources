WEBVTT

00:00:00.730 --> 00:00:04.160
Good morning and welcome to the
last session of our Worldwide

00:00:04.160 --> 00:00:05.680
Developers Conference '05.

00:00:05.680 --> 00:00:10.290
You guys are the true die-hard
developers to be here today.

00:00:11.160 --> 00:00:17.860
We have a great program
with the Eclipse guys.

00:00:17.880 --> 00:00:21.730
And so without further ado,
let me go ahead and introduce

00:00:21.860 --> 00:00:25.090
to you Bjorn Freeman-Benson,
our Technical Director for

00:00:25.090 --> 00:00:28.100
OS Processes and Infrastructure
of the Eclipse Foundation.

00:00:28.100 --> 00:00:31.000
Welcome Bjorn, please.

00:00:33.320 --> 00:00:39.540
And so just to be completely clear,
OS is open source, not operating system.

00:00:39.740 --> 00:00:43.970
So the thing that I wanted to talk
a little bit about for a few minutes

00:00:44.190 --> 00:00:48.040
to the few people who are still here
is some of the overviews of Eclipse.

00:00:48.050 --> 00:00:53.630
And then Daniel is going to come up
and give some actual hands-on demos.

00:00:53.730 --> 00:00:59.290
And if you guys had, say,
gigabit ethernet fiber to your laptops,

00:00:59.430 --> 00:01:01.740
you could,
if you hadn't downloaded Eclipse yet,

00:01:01.800 --> 00:01:03.550
download it onto your machines.

00:01:03.720 --> 00:01:06.120
On the other hand,
we're betting that if you start now,

00:01:06.120 --> 00:01:07.460
you're not going to finish in time.

00:01:07.460 --> 00:01:09.280
So if you've got it, you can play along.

00:01:09.280 --> 00:01:14.770
If you don't, you can get it later and
memorize what you did.

00:01:14.910 --> 00:01:19.040
The general thing about the Eclipse
development environment is that it's

00:01:19.040 --> 00:01:20.820
not just a development environment.

00:01:20.820 --> 00:01:24.020
Originally,
in version one of the Eclipse project,

00:01:24.020 --> 00:01:25.900
it was a Java IDE.

00:01:25.900 --> 00:01:29.180
But since then,
the Eclipse Foundation and the

00:01:29.180 --> 00:01:32.870
Eclipse member companies have been
working to build it into more than

00:01:32.870 --> 00:01:35.170
just a Java development environment.

00:01:35.170 --> 00:01:38.570
Although today's talk with Daniel's
demo is going to emphasize mostly

00:01:38.570 --> 00:01:41.950
on the Java development environment,
I wanted to say a few words about

00:01:41.950 --> 00:01:43.750
some of the other things as well.

00:01:43.780 --> 00:01:46.270
But before I do,
I'm curious how many of you

00:01:46.390 --> 00:01:49.100
actually have used Eclipse,
downloaded Eclipse.

00:01:49.130 --> 00:01:53.220
So if I do that general stuff,
you already know those answers.

00:01:53.220 --> 00:01:55.800
And in fact, Daniel,
you might want to speed up the

00:01:55.800 --> 00:01:58.920
first few slides or something,
because these people already

00:01:58.920 --> 00:02:00.820
know what they're talking about.

00:02:01.010 --> 00:02:05.470
So many of you might have already seen
these slides about what is Eclipse,

00:02:05.470 --> 00:02:07.770
but I'll go over them a little bit.

00:02:07.810 --> 00:02:13.260
We claim on the Eclipse Foundation that
it basically is four components.

00:02:13.280 --> 00:02:14.780
There's a client runtime.

00:02:14.780 --> 00:02:18.710
There's a number of extensible
application platform frameworks

00:02:18.710 --> 00:02:20.220
that you can build on.

00:02:20.220 --> 00:02:23.360
There's some extensible tool platforms.

00:02:23.360 --> 00:02:26.370
And then on top of that,
the thing we're talking about today

00:02:26.370 --> 00:02:28.300
is the Java development tooling.

00:02:28.300 --> 00:02:31.830
Now, you could just subtract the
Java development tooling,

00:02:31.830 --> 00:02:35.110
and you could build some
other tooling on top of that.

00:02:35.280 --> 00:02:36.580
So we have a C++ tooling.

00:02:36.690 --> 00:02:38.230
We have Fortran tooling.

00:02:38.230 --> 00:02:40.130
We're going to have Pascal soon.

00:02:40.220 --> 00:02:41.300
We have COBOL.

00:02:41.300 --> 00:02:43.300
We have test and performance.

00:02:43.300 --> 00:02:46.630
We have business intelligence
reporting and a whole bunch of

00:02:46.630 --> 00:02:50.270
other things that are built on
top of the same tooling platform.

00:02:50.300 --> 00:02:54.360
Or you can subtract it even farther,
and you could get a runtime system

00:02:54.380 --> 00:02:56.300
that you use for rich clients.

00:02:56.450 --> 00:03:00.020
So you could just build a
rich client platform with the

00:03:00.020 --> 00:03:02.290
basic user interface things.

00:03:02.330 --> 00:03:03.230
You could build some tools.

00:03:03.320 --> 00:03:05.650
Or in this case,
we're going to talk about

00:03:05.650 --> 00:03:07.310
Java development tools.

00:03:08.050 --> 00:03:14.280
The interesting-- well,
so when we talk about the

00:03:14.280 --> 00:03:18.300
Java development tools,
almost all of you have downloaded it.

00:03:18.320 --> 00:03:21.520
I didn't actually notice how many
people hadn't raised their hands.

00:03:21.590 --> 00:03:23.770
But there's what it looks like.

00:03:23.890 --> 00:03:25.970
It has boxes and sort of things.

00:03:26.040 --> 00:03:30.030
If you look over here,
and if I press the button right-- oh,

00:03:30.060 --> 00:03:34.660
I guess it doesn't even work-- you
have all the things that you expect

00:03:34.670 --> 00:03:37.400
in a standard development environment.

00:03:39.410 --> 00:03:44.980
The interesting thing to me about
the Java development tooling of

00:03:44.980 --> 00:03:50.050
Eclipse is that it keeps an entire
model of the Java program in memory

00:03:50.420 --> 00:03:51.910
while you're busy editing it.

00:03:52.010 --> 00:03:55.830
And so that allows you to do interesting
things from the tooling perspective

00:03:56.270 --> 00:04:01.810
that you wouldn't otherwise be able
to do if you were just looking at text.

00:04:02.120 --> 00:04:06.380
So we have the usual stuff
like automatic background,

00:04:06.380 --> 00:04:08.240
incremental building, and so on.

00:04:08.390 --> 00:04:10.710
But we have things like this,
like code assistance and code

00:04:10.760 --> 00:04:12.720
completion and these sort of things.

00:04:12.720 --> 00:04:16.130
And you can do these strictly
based on text pattern matching.

00:04:16.250 --> 00:04:19.160
But Daniel will show that if you
just use text pattern matching,

00:04:19.160 --> 00:04:21.140
there are a few cases you can't catch.

00:04:21.280 --> 00:04:23.680
But if you use an actual
model behind the scenes,

00:04:23.840 --> 00:04:27.010
you can catch more information
about the system and do better

00:04:27.010 --> 00:04:28.700
versions of code completion.

00:04:28.810 --> 00:04:33.200
You can do code completion for
Java 5 generics and keeping track

00:04:33.260 --> 00:04:36.320
of all the type parameters and
the wildcard type parameters and

00:04:36.320 --> 00:04:40.200
the constrained wildcard type type
parameters and that sort of thing.

00:04:40.200 --> 00:04:42.200
You can do linked editing,
which is down there at the bottom.

00:04:42.200 --> 00:04:47.200
So linked editing is where you go to,
say, a variable name in the Java program

00:04:47.200 --> 00:04:50.650
and you rename it by typing over it,
and it renames all of the others

00:04:50.650 --> 00:04:54.690
at the same time throughout the
program simultaneously on the screen

00:04:54.690 --> 00:04:56.200
because it's got a model back there.

00:04:56.200 --> 00:04:58.130
And it's not just text
replace of each one.

00:04:58.200 --> 00:05:00.200
It's actually changing that
model element back there.

00:05:00.200 --> 00:05:04.350
Now, on the debug side, you know,
it has the sort of things that

00:05:04.350 --> 00:05:07.910
you'd expect from a modern
programming environment.

00:05:08.320 --> 00:05:12.120
You can do hot code replace if
your JVM underneath supports that.

00:05:12.200 --> 00:05:14.140
You can evaluate expressions.

00:05:14.140 --> 00:05:18.140
For those of you who know the
history of the Smalltalk language,

00:05:18.140 --> 00:05:22.290
a lot of the people who built
the JVM -- the JDT tooling for

00:05:22.590 --> 00:05:26.140
Eclipse came from Smalltalk,
and they really missed being able

00:05:26.140 --> 00:05:29.350
to evaluate expressions on the fly,
so they added that in.

00:05:30.250 --> 00:05:37.110
You know,
it has searching that you would expect.

00:05:38.460 --> 00:05:39.970
refactoring tools.

00:05:40.190 --> 00:05:42.560
It has Ant.

00:05:42.560 --> 00:05:43.450
It has JUnit.

00:05:43.600 --> 00:05:47.800
It has these things that you expect
when you're developing with Java.

00:05:48.820 --> 00:05:52.510
More important from the point of view
of the Eclipse organization is that

00:05:52.510 --> 00:05:57.140
it's got these extension APIs where
you can extend the existing Eclipse

00:05:57.260 --> 00:05:59.090
to do other interesting things.

00:05:59.120 --> 00:06:01.620
So you can build your own tools
on top of these frameworks.

00:06:01.780 --> 00:06:04.640
You can extend these tools
and frameworks yourself.

00:06:04.720 --> 00:06:08.160
So this little picture over
here is a picture of some of the

00:06:08.160 --> 00:06:11.960
searching that you can do because,
again, you have that model in memory.

00:06:11.960 --> 00:06:15.100
So you can search not
just on text things,

00:06:15.190 --> 00:06:17.880
but also actual code fragments.

00:06:19.030 --> 00:06:24.470
One of the things that these
standard slides that the Eclipse

00:06:24.470 --> 00:06:28.010
Foundation likes to show,
talk about, is that Eclipse is built

00:06:28.010 --> 00:06:29.400
on a series of plug-ins.

00:06:29.730 --> 00:06:32.900
Personally, even though I'm from the
Foundation to talk about it,

00:06:32.900 --> 00:06:34.960
don't feel that that's
such an interesting thing,

00:06:34.960 --> 00:06:37.190
because everything these
days is built on plug-ins.

00:06:37.360 --> 00:06:39.200
Operating systems are built on plug-ins.

00:06:39.200 --> 00:06:42.900
I mean, I think my Toyota Corolla
is built on plug-ins.

00:06:43.030 --> 00:06:47.890
So here's the slide that says,
"Everything's built on a plug-in."

00:06:49.240 --> 00:06:56.940
So as many of you who know Eclipse know,
we have released 1.0, 2.0, 2.1, 3.0,

00:06:56.940 --> 00:06:58.770
and now 3.1.

00:06:59.150 --> 00:07:02.510
And there were a number of themes
in each one of those releases.

00:07:02.650 --> 00:07:06.740
For 3.1, the themes were scaling up,
being able to handle

00:07:06.800 --> 00:07:11.320
much larger programs,
making sure that we had Java 5 support,

00:07:11.320 --> 00:07:14.410
making it enterprise ready,
which I'm a little vague on

00:07:14.530 --> 00:07:17.310
exactly what that term is,
except that there are a lot of

00:07:17.570 --> 00:07:20.690
large customers who want to build
large systems with many tools.

00:07:20.690 --> 00:07:24.320
And then the one at the bottom,
Design for Extensibility,

00:07:24.320 --> 00:07:25.420
is Be a Better Platform.

00:07:25.420 --> 00:07:28.410
One of the things that the Eclipse
Foundation and all of its member

00:07:28.470 --> 00:07:32.500
companies are trying to do is not
just design the best Java IDE,

00:07:32.500 --> 00:07:37.730
but to build a platform on which other
companies can build successful tools.

00:07:37.730 --> 00:07:40.450
So we're not just
building a successful IDE,

00:07:40.600 --> 00:07:43.480
which is what Daniel's going to show you,
but there are a number of APIs that

00:07:43.480 --> 00:07:46.690
you can build your own tools on top of,
or build them and sell them.

00:07:46.690 --> 00:07:50.660
One of the big emphasis
that the Eclipse team,

00:07:50.670 --> 00:07:53.780
especially from IBM,
has spent a lot of time on,

00:07:53.990 --> 00:07:58.440
the entire history of Eclipse is making
sure that the performance is good.

00:07:58.440 --> 00:08:03.490
And it's one of those things where it's
not a single large task that they did,

00:08:03.520 --> 00:08:07.630
but they constantly worked on
incrementally improving each of the

00:08:07.630 --> 00:08:11.760
little things that they could to get the
performance better and better and better.

00:08:11.760 --> 00:08:16.600
As you know, building a system that works
fast is just a non-trivial task.

00:08:16.620 --> 00:08:19.040
And they have this nice little graph.

00:08:19.100 --> 00:08:21.350
It shows their tests,
and a few of them run

00:08:21.350 --> 00:08:22.700
a little bit slower.

00:08:22.700 --> 00:08:25.520
They run this on every
single nightly build,

00:08:25.520 --> 00:08:28.550
and it shows what the
performance characteristics are.

00:08:28.700 --> 00:08:48.600
[Transcript missing]

00:08:50.160 --> 00:08:54.270
There's a number of user
interface improvements.

00:08:54.310 --> 00:08:55.440
I can sort of wave my hand.

00:08:55.440 --> 00:08:59.100
There's more preferences,
which means-- although, personally,

00:08:59.100 --> 00:09:01.950
I can't see that as an improvement,
because it just means there's

00:09:01.950 --> 00:09:02.970
more things to configure.

00:09:03.290 --> 00:09:06.610
But I guess it means there's
more things that can make it

00:09:06.610 --> 00:09:08.750
look exactly like you want it to.

00:09:08.870 --> 00:09:10.270
We have dynamic help.

00:09:10.280 --> 00:09:14.900
There's lots of new quick assists,
so you can get comments on your code.

00:09:14.970 --> 00:09:17.210
You can get critiques on your code.

00:09:17.310 --> 00:09:19.530
You can refactor your code, and so on.

00:09:20.160 --> 00:09:23.660
There's a few things in the runtime.

00:09:24.020 --> 00:09:27.170
Maybe the only interesting
one is this Java web start.

00:09:27.230 --> 00:09:28.800
You know, there's a few other things.

00:09:28.800 --> 00:09:30.060
You can sign your jars now.

00:09:30.060 --> 00:09:32.210
You can make your
plug-ins as a single jar.

00:09:32.280 --> 00:09:34.420
Again,
for people who are just using the tool,

00:09:34.420 --> 00:09:37.520
it doesn't really matter whether we
have bundle permissions underneath.

00:09:37.540 --> 00:09:38.600
You don't really care.

00:09:38.630 --> 00:09:43.900
That would only be if you're planning to,
say, release secure applications with it.

00:09:44.510 --> 00:09:48.260
And then, of course,
there's the Java 5 features,

00:09:48.260 --> 00:09:51.640
which are perhaps the
most significant change,

00:09:51.640 --> 00:09:56.340
I feel, in the Eclipse JDT for 3.1,
which is, as you know,

00:09:56.340 --> 00:09:59.200
Java 5 has a lot of new
typing features and so on,

00:09:59.200 --> 00:10:01.770
which add a great deal of
complexity to the parser and,

00:10:01.770 --> 00:10:03.100
therefore, to the IDE.

00:10:03.100 --> 00:10:05.800
So, for instance,
when you're doing code assist,

00:10:05.800 --> 00:10:08.730
you want to make sure that the
code assist handles generic

00:10:08.900 --> 00:10:12.140
types and wildcarded types and
constrained types and so on.

00:10:12.720 --> 00:10:14.360
And similarly with refactoring.

00:10:14.360 --> 00:10:16.540
Now you can go and
refactor and you just do,

00:10:16.540 --> 00:10:19.040
you know, instead of just the simple
ones like rename or move

00:10:19.040 --> 00:10:21.980
method up or move method down,
there's refactorings that

00:10:21.990 --> 00:10:25.470
take types and make them into
generic types or back and forth.

00:10:25.520 --> 00:10:28.590
There's ones that take, you know,
collections and map them

00:10:28.590 --> 00:10:30.300
over to generic collections.

00:10:30.300 --> 00:10:32.810
And so there's a whole bunch
of refactorings that you

00:10:32.810 --> 00:10:36.060
would use when you're actually
developing with Java 5 code.

00:10:36.060 --> 00:10:39.540
Java 5 does auto-boxing.

00:10:39.540 --> 00:10:41.030
So one of the things that the compiler
does to make sure that the code is

00:10:41.030 --> 00:10:42.700
in the right place is to make sure
that the code is in the right place.

00:10:42.700 --> 00:10:46.840
One of the problems with auto-boxing,
of course, is if you accidentally use it,

00:10:46.840 --> 00:10:50.260
you might get results you didn't
expect or you might get performance

00:10:50.260 --> 00:10:53.110
problems because while it's handy,
it does have a cost.

00:10:53.240 --> 00:10:55.800
So you can turn on a feature in the
compiler and it'll tell you where

00:10:55.800 --> 00:10:58.700
all the auto-boxing is happening,
highlighting them with little yellow

00:10:58.700 --> 00:11:00.340
underscores and that sort of thing.

00:11:32.200 --> 00:11:35.090
and you go out and you get the resource,
and you format into the string,

00:11:35.090 --> 00:11:35.860
and you put it off.

00:11:36.000 --> 00:11:38.100
But of course,
when you do that in your Java code,

00:11:38.100 --> 00:11:40.600
what you have in your
Java code is a magic key.

00:11:40.600 --> 00:11:42.580
You don't have the actual string.

00:11:42.580 --> 00:11:47.170
But the Eclipse IDE will now show
you the actual string in the editor,

00:11:47.170 --> 00:11:50.080
even though it's stored in the bundle,
and you can switch back and forth

00:11:50.080 --> 00:11:53.410
between the bundle and the actual
string by hitting-- I think it's

00:11:53.410 --> 00:11:56.160
the F5 key will take you there
or it will take you back again.

00:11:56.160 --> 00:11:59.840
And it'll also do spell
checking across the messages,

00:11:59.910 --> 00:12:04.220
even though they're in a text file,
rather than in the actual source file.

00:12:04.220 --> 00:12:07.710
And so they've made the support for
making internationalized applications,

00:12:07.710 --> 00:12:10.280
at least at the text replacement level,
much easier.

00:12:10.280 --> 00:12:12.360
Now, of course,
there's a lot of other features in

00:12:12.360 --> 00:12:15.650
making an international application,
but I'm sure that in 3.2,

00:12:15.650 --> 00:12:18.420
they'll get farther along on that.

00:12:20.810 --> 00:12:23.800
And then here's that
thing about better APIs.

00:12:23.980 --> 00:12:29.020
There's generalize, undo, redo.

00:12:29.030 --> 00:12:30.910
I'm going to sort of wave my hands here.

00:12:31.160 --> 00:12:33.930
Just saying better APIs doesn't
really solve your problem unless

00:12:33.930 --> 00:12:37.460
you had a specific problem that
you needed an API to solve.

00:12:37.460 --> 00:12:40.830
If you're a tool user,
it doesn't really matter whether the

00:12:40.830 --> 00:12:44.000
tool is well-built underneath or not,
as long as it's solving

00:12:44.000 --> 00:12:45.560
your particular problem.

00:12:45.700 --> 00:12:48.760
One of the things that they've
been working on in 3.1 is this

00:12:48.850 --> 00:12:50.300
language toolkit enhancements.

00:12:50.300 --> 00:12:52.480
And they're going to work on
that substantially more in

00:12:52.480 --> 00:12:56.280
3.2 to make it easier to add--

00:12:57.130 --> 00:13:01.260
To add new languages.

00:13:01.770 --> 00:13:03.980
So at the moment,
it's quite easy to add a

00:13:03.980 --> 00:13:06.370
new Java-like language,
and not so easy to add a

00:13:06.370 --> 00:13:07.860
new non-Java-like language.

00:13:07.860 --> 00:13:11.700
But there are many other languages out
there that you might want to incorporate,

00:13:11.700 --> 00:13:16.200
and so they're working on making
the support for languages more

00:13:16.200 --> 00:13:18.850
generic and less Java-specific.

00:13:19.860 --> 00:13:23.440
One of the things that
was announced recently,

00:13:23.440 --> 00:13:26.390
I think, was it Tuesday?

00:13:26.710 --> 00:13:30.040
was that the Apple people
actually have a universal binary

00:13:30.040 --> 00:13:31.950
now for the Eclipse development.

00:13:32.010 --> 00:13:38.290
So it'll run on the new Intel processors
as well as the existing processors.

00:13:38.570 --> 00:13:42.020
And that you could do this
without making any code changes,

00:13:42.020 --> 00:13:46.180
just slight make file changes,
and it recompiled, which was quite nice.

00:13:47.860 --> 00:13:50.560
And I don't know why this slide says
what you'll learn this afternoon,

00:13:50.560 --> 00:13:53.560
because by my clock, it's evening.

00:13:53.590 --> 00:13:56.830
But hey.

00:13:56.940 --> 00:14:00.210
So Daniel--

00:14:00.910 --> 00:14:03.660
And I don't know why this slide says
what you'll learn this afternoon,

00:14:03.660 --> 00:14:06.660
because by my clock, it's evening.

00:14:06.660 --> 00:14:08.060
But hey.

00:14:08.060 --> 00:14:08.060
So Daniel--

00:14:09.600 --> 00:14:49.100
[Transcript missing]

00:14:50.310 --> 00:14:53.200
So if you've got Eclipse
installed and you'd like to

00:14:53.230 --> 00:14:56.390
fire it up and follow along,
that'll be fun for all of us.

00:14:56.420 --> 00:14:59.210
The first thing you have to
do when you start up Eclipse,

00:14:59.260 --> 00:15:02.230
and this is something
that they often stress,

00:15:02.310 --> 00:15:05.340
is starting a project is
not a common activity.

00:15:05.340 --> 00:15:07.310
It's working in a project day after day.

00:15:07.320 --> 00:15:10.000
So these aren't the steps that you
have to take over and over again.

00:15:10.000 --> 00:15:13.320
But identifying a workspace,
and this is just your

00:15:13.320 --> 00:15:15.200
own private preference.

00:15:15.200 --> 00:15:17.820
Do you like to keep all your
projects in a single workspace?

00:15:17.820 --> 00:15:21.120
Do you like to keep different
projects in different workspaces?

00:15:21.120 --> 00:15:22.990
It's the way you want
to organize your work.

00:15:23.170 --> 00:15:24.620
Different people have
different preferences.

00:15:24.620 --> 00:15:30.050
The same way that you might keep all your
files in a one-subversion repository,

00:15:30.140 --> 00:15:33.390
you might spread them
across several of them.

00:15:33.760 --> 00:15:37.720
Once you've selected your workspace,
go ahead and create a project.

00:15:37.720 --> 00:15:40.400
And we'll go through this quickly because
you're all pretty familiar with this.

00:15:40.400 --> 00:15:43.370
The two projects we'll talk
about today are a regular

00:15:43.370 --> 00:15:45.660
Java project and a plug-in project.

00:15:45.660 --> 00:15:50.000
And this might be the best
trick to take away with you.

00:15:50.000 --> 00:15:53.380
If you haven't seen it documented and you
forget what the keyboard shortcuts are,

00:15:53.380 --> 00:15:57.420
make a note to yourself, Command-Shift-L,
and that should bring up all the

00:15:57.420 --> 00:15:59.840
available shortcuts to you in Eclipse.

00:15:59.840 --> 00:16:01.320
Okay?

00:16:01.320 --> 00:16:03.540
So let's go to the demo real quick.

00:16:03.700 --> 00:16:04.730
Yeah.

00:16:06.880 --> 00:16:11.450
And we're going to fire up
Xcode because we needed some

00:16:11.550 --> 00:16:12.680
code that you could work on.

00:16:12.680 --> 00:16:18.680
And so there's nothing better to work
on than the spotlight-- I'm sorry,

00:16:18.680 --> 00:16:23.560
the swing template in Xcode.

00:16:28.500 --> 00:16:32.640
And so my favorite feature,
how do you know Xcode has started?

00:16:32.640 --> 00:16:34.380
Well, you don't.

00:16:38.010 --> 00:16:42.520
So if you start up and create
yourself a Java swing application,

00:16:42.520 --> 00:16:46.340
and give it some name
that you can remember,

00:16:46.340 --> 00:16:46.340
like WWDC,

00:16:50.720 --> 00:16:55.460
And now let's open up Eclipse
and we'll use that code.

00:16:55.630 --> 00:16:59.480
So quickly,
we'll get to the code aware stuff.

00:16:59.500 --> 00:17:00.670
You need a workspace.

00:17:00.910 --> 00:17:03.490
Choose any workspace you'd like.

00:17:06.280 --> 00:17:10.100
Then you're going to
fire up a new project,

00:17:10.110 --> 00:17:13.300
dance around quietly
while Eclipse starts up.

00:17:15.320 --> 00:17:18.540
That's much faster than it used to be,
so that's quite an improvement.

00:17:18.580 --> 00:17:20.290
They're at release
candidate one right now.

00:17:20.300 --> 00:17:21.680
They're going to release candidate two.

00:17:21.680 --> 00:17:24.900
And then I think at Java one is
when the final release of 3.1 is.

00:17:24.900 --> 00:17:25.430
Is that right?

00:17:25.460 --> 00:17:29.060
Well, if everything goes well,
Java one will, just before Java one,

00:17:29.060 --> 00:17:32.960
the final release of 3.1 will be out,
and the Eclipse download servers

00:17:32.960 --> 00:17:34.640
will be absolutely maxed out.

00:17:34.640 --> 00:17:36.210
That's the goal.

00:17:37.800 --> 00:17:42.840
So we're starting up a Java project,
following the wizard.

00:17:44.210 --> 00:17:49.270
And if we zoom in a little bit,
give it a name like, oh, hands-on.

00:17:49.470 --> 00:17:51.700
And we're going to create
it from existing source.

00:17:51.720 --> 00:17:56.190
In this case,
we'll find the code that we just created.

00:17:57.200 --> 00:18:00.210
In our home directory, there's WWDC.

00:18:00.440 --> 00:18:02.060
Choose it.

00:18:02.160 --> 00:18:03.790
Finish it.

00:18:04.920 --> 00:18:07.460
Along the way,
Eclipse tries to help you out.

00:18:07.460 --> 00:18:10.160
It realizes that you're
creating a Java application.

00:18:10.160 --> 00:18:14.950
And so it asks you if that's
how you want to look at it.

00:18:15.110 --> 00:18:17.020
And of course, you do.

00:18:20.650 --> 00:18:22.940
Is that disconcerting to see
that wave back and forth?

00:18:23.050 --> 00:18:24.260
I'll stop it then.

00:18:24.260 --> 00:18:31.120
So if you look at what it's
created inside a default package,

00:18:31.140 --> 00:18:34.630
because there is no package that was
created for that swing application,

00:18:34.700 --> 00:18:37.630
you see the three classes
that are created for you.

00:18:37.640 --> 00:18:41.200
One of your best friends in
Eclipse is the Preference Panel,

00:18:41.330 --> 00:18:42.840
and let's start there.

00:18:42.840 --> 00:18:45.240
Let's close off this and close off this.

00:18:45.240 --> 00:18:51.700
I've already got problems.

00:18:51.700 --> 00:18:51.700
I'm reporting a whole
bunch of errors there.

00:18:53.330 --> 00:18:55.760
There are several ways
to deal with warnings.

00:18:55.900 --> 00:18:58.900
And we're going to
choose my favorite way,

00:18:58.900 --> 00:19:00.480
and that is to ignore them.

00:19:00.480 --> 00:19:02.420
So let's go to Preferences.

00:19:02.420 --> 00:19:05.630
One of the best things you can do
with Eclipse is get familiar with

00:19:05.630 --> 00:19:08.720
the preferences because most of
the assistance is configurable.

00:19:08.740 --> 00:19:11.470
If you find it annoying that it pops
up things and always reminds you,

00:19:11.470 --> 00:19:12.350
you can turn it off.

00:19:12.420 --> 00:19:14.360
If you find the level isn't
strong enough for you,

00:19:14.360 --> 00:19:15.220
you can turn it on.

00:19:15.220 --> 00:19:19.660
So here under Java, under Compiler,
under Errors,

00:19:19.660 --> 00:19:23.580
I get all the errors that it can
get warnings about or ignore.

00:19:23.580 --> 00:19:26.270
And here at the top of
Potential Programming Problems,

00:19:26.270 --> 00:19:28.520
I find the one that
I'm being warned about.

00:19:28.520 --> 00:19:31.600
I can change it to Error
for a second and apply it.

00:19:31.740 --> 00:19:33.940
That requires that you rebuild.

00:19:35.450 --> 00:19:37.440
And you see that these all turned red.

00:19:37.460 --> 00:19:40.060
They've now changed
from warnings to errors.

00:19:40.070 --> 00:19:43.010
And now, of course,
if you want them to go away,

00:19:44.780 --> 00:19:50.650
We rebuild, and we don't have to worry
about the serializable problem.

00:19:50.750 --> 00:19:52.410
So let me interject just one thing here.

00:19:52.420 --> 00:19:55.890
One of the interesting things about
the Eclipse compiler is that even

00:19:55.960 --> 00:19:59.170
if your project has errors in it,
you can still run it.

00:19:59.270 --> 00:20:02.700
Because the compiler actually produces
class files for all the files,

00:20:02.770 --> 00:20:04.630
even the ones with errors in them.

00:20:04.820 --> 00:20:07.520
It just puts in an exception called,
there's an error here,

00:20:07.850 --> 00:20:10.290
wherever it finds an error,
whether it's a syntax error or

00:20:10.600 --> 00:20:12.080
programming error like that.

00:20:12.140 --> 00:20:14.740
And so then you can run your
program for as far as it can get.

00:20:14.940 --> 00:20:17.540
And if you didn't actually hit
that statement or that class,

00:20:17.720 --> 00:20:19.010
it wouldn't stop.

00:20:19.240 --> 00:20:22.440
You find that often you
aren't looking to build it.

00:20:22.590 --> 00:20:24.200
It's just building as you go.

00:20:24.240 --> 00:20:26.850
And so the model's
constantly being updated.

00:20:27.020 --> 00:20:30.010
And so if we take a look at this--

00:20:32.080 --> 00:20:33.620
We can run this.

00:20:33.900 --> 00:20:39.760
And right now, I'm Control-clicking on
this and selecting Run As,

00:20:39.760 --> 00:20:43.000
Java Application.

00:20:45.410 --> 00:20:49.140
And there's your standard swing example.

00:20:49.250 --> 00:20:52.210
So if we can go back to the slides,
please.

00:20:59.970 --> 00:21:02.890
So let's look at some of these
Java model-aware things while

00:21:03.410 --> 00:21:08.240
I quickly flip ahead behind
your back to the next demo.

00:21:08.240 --> 00:21:11.260
Well, actually, strictly speaking,
it's behind your back.

00:21:11.360 --> 00:21:11.780
It is.

00:21:11.960 --> 00:21:14.080
It's not behind their back.

00:21:14.960 --> 00:21:17.710
So let's look at the
things we can create.

00:21:17.770 --> 00:21:20.700
And you can see in the middle,
the new things added for Java 5 are,

00:21:20.700 --> 00:21:23.060
of course, enumerations and annotations.

00:21:23.060 --> 00:21:26.120
At the top, the things that you might
want to create are packages,

00:21:26.240 --> 00:21:27.390
classes, interfaces.

00:21:27.480 --> 00:21:30.600
And at the bottom, we'll take a look at
JUnit tests in a minute.

00:21:30.600 --> 00:21:34.050
One of my favorite parts of Eclipse
is that JUnit is deeply integrated.

00:21:34.060 --> 00:21:35.660
And we'll take a look at that.

00:21:37.890 --> 00:21:40.880
So when you choose to add a package,
you'll notice that there's this

00:21:40.880 --> 00:21:42.450
model thing that keeps coming up.

00:21:42.570 --> 00:21:45.660
There's a strong correspondence
between folders and packages.

00:21:45.660 --> 00:21:49.650
Now, if you've used just a text editor,
or you've used, oh, say,

00:21:49.650 --> 00:21:52.790
another IDE that doesn't
have that correspondence,

00:21:52.840 --> 00:21:55.150
this might feel different for you.

00:21:55.160 --> 00:21:58.990
But it's nice that there's this
very Java-aware environment for you.

00:21:59.000 --> 00:22:02.820
Right now, I'm taking the first steps
to Conway's Game of Life,

00:22:02.820 --> 00:22:05.640
where there's cells that
you turn on and off.

00:22:05.740 --> 00:22:10.520
And so I've created a package
named Life inside of this.

00:22:10.640 --> 00:22:15.030
And within that package,
I'm going to create a test case.

00:22:15.040 --> 00:22:18.490
So a JUnit test case,
are most of you familiar

00:22:18.700 --> 00:22:20.280
with unit testing?

00:22:20.280 --> 00:22:22.470
Great.

00:22:24.500 --> 00:23:06.400
[Transcript missing]

00:23:07.170 --> 00:23:09.500
When you create it,
all that information that you just

00:23:09.700 --> 00:23:12.760
stubbed out gets generated for you.

00:23:12.760 --> 00:23:14.400
The package information is there.

00:23:14.400 --> 00:23:17.240
The fact that you extended
test cases up there.

00:23:17.240 --> 00:23:19.140
And so, of course,
if you extend test case,

00:23:19.140 --> 00:23:20.090
you need to import it.

00:23:20.180 --> 00:23:22.060
And so there's the generated test class.

00:23:22.060 --> 00:23:23.800
Not deep, but really useful.

00:23:23.990 --> 00:23:26.940
And if you're doing this every
time you create a new class,

00:23:26.940 --> 00:23:29.450
it's nice to have a tool
that works with you.

00:23:29.500 --> 00:23:33.880
So let's take a look at a
demo of what we might do here.

00:23:37.720 --> 00:23:39.830
And so, I think that's a great question.

00:23:43.300 --> 00:23:50.700
[Transcript missing]

00:23:51.920 --> 00:23:54.040
Yeah, but at least in this nightmare,
you have your pants on.

00:23:54.210 --> 00:23:56.140
Yes.

00:23:56.200 --> 00:23:58.390
Well, that is useful.

00:23:59.680 --> 00:24:03.380
Let me switch back to the last workspace,
if it'll allow me to,

00:24:03.380 --> 00:24:06.720
and see if I can continue.

00:24:06.720 --> 00:24:09.000
Wow.

00:24:13.890 --> 00:24:17.370
Okay,
so what I want to do in this demo is

00:24:17.430 --> 00:24:21.940
when we created the original version,
we had a bunch of cases,

00:24:22.050 --> 00:24:24.280
a bunch of classes that
were in the default package.

00:24:24.300 --> 00:24:28.440
In Java 5, at least, you know that that's
definitely not a good thing.

00:24:28.440 --> 00:24:30.130
In general, it's not a good thing.

00:24:30.140 --> 00:24:32.080
So let's take a look here.

00:24:32.080 --> 00:24:35.600
Thank goodness there is
a default package there.

00:24:35.600 --> 00:24:37.170
So let's create a new package.

00:24:41.200 --> 00:24:46.700
Let's give it a simple name like GUI,
G-U-I.

00:24:46.760 --> 00:24:49.160
I've got my new package.

00:24:50.060 --> 00:24:52.820
And now here's a nice
little Eclipse feature.

00:24:52.830 --> 00:24:55.280
I've got these guys that were
living in the default package.

00:24:55.280 --> 00:24:58.280
I want to move them to the GUI package.

00:24:58.330 --> 00:25:03.700
If I right-click here, or Control-click,
you see this Refactor menu?

00:25:03.730 --> 00:25:05.920
This Refactor menu is your friend.

00:25:05.950 --> 00:25:08.240
Right now it tells you you
can only do two things.

00:25:08.240 --> 00:25:10.900
It's context-aware,
so in different settings,

00:25:10.930 --> 00:25:12.940
it will offer you different refactorings.

00:25:12.960 --> 00:25:18.230
In this case, what I want to do is I want
to move these three classes.

00:25:18.340 --> 00:25:19.900
And I choose where I want to move them.

00:25:19.900 --> 00:25:22.280
to move them to GUI.

00:25:24.000 --> 00:25:25.000
It checks on them.

00:25:25.000 --> 00:25:26.210
It moves them over.

00:25:26.350 --> 00:25:27.560
It thinks a bit.

00:25:27.560 --> 00:25:29.340
It decides,
do I want to crash on them and

00:25:29.340 --> 00:25:31.870
embarrass them twice in one day?

00:25:33.910 --> 00:25:34.790
It checks on them.

00:25:34.800 --> 00:25:36.020
It moves them over.

00:25:36.020 --> 00:25:37.360
It thinks a bit.

00:25:37.360 --> 00:25:39.140
It decides,
do I want to crash on them and

00:25:39.140 --> 00:25:41.590
embarrass them twice in one day?

00:25:51.090 --> 00:25:55.080
Okay, let's create a new menu.

00:25:55.090 --> 00:25:58.740
And actually,
the version that didn't run,

00:25:58.750 --> 00:26:01.380
I'd increase the font size,
so let me do that again for you.

00:26:01.440 --> 00:26:06.290
And so under Appearance,

00:26:07.970 --> 00:26:11.700
Suddenly the day's gotten much longer,
huh?

00:26:11.720 --> 00:26:13.720
Well, not for you.

00:26:18.420 --> 00:26:19.480
Adjust the font size.

00:26:19.580 --> 00:26:23.430
Waiting is a feature.

00:26:23.610 --> 00:26:26.520
That's another cup of
coffee waiting to happen.

00:26:30.000 --> 00:26:32.900
Maybe not waiting this long.

00:26:32.900 --> 00:26:33.890
Let's apply it.

00:26:33.930 --> 00:26:36.260
Great.

00:26:36.300 --> 00:26:40.940
So let's add a new
menu to the main class.

00:26:45.860 --> 00:26:48.920
Are you all familiar with this template?

00:26:48.930 --> 00:26:51.300
Is it like your favorite code?

00:26:53.300 --> 00:26:55.940
Later, I'll tell you a story.

00:26:56.010 --> 00:26:59.790
So let's add another menu.

00:27:00.800 --> 00:27:05.810
So if I add a J menu,
and I call it Help Menu,

00:27:06.200 --> 00:27:11.790
and I-- excuse me-- say
equals a new J menu.

00:27:12.970 --> 00:27:15.810
I'm not going to be as proper,
and that is one thing that

00:27:15.810 --> 00:27:18.000
Apple is very good at doing,
going to the resource bundle so

00:27:18.000 --> 00:27:19.700
it's nicely internationalized.

00:27:19.750 --> 00:27:20.900
I'm not going to do that.

00:27:20.900 --> 00:27:23.260
I've just added a help menu.

00:27:23.880 --> 00:27:26.500
And let's add a JMenu item.

00:27:26.500 --> 00:27:31.670
And let's just do that by saying,
Help Menu, what can you do?

00:27:32.120 --> 00:27:35.760
And it pops up and tells me all
the things it knows how to do.

00:27:35.760 --> 00:27:39.200
And so one of the things I'm going
to ask it to do is to add something.

00:27:39.200 --> 00:27:39.890
What can it add?

00:27:39.960 --> 00:27:43.260
It can add a new J menu item.

00:27:43.260 --> 00:27:49.790
And appropriately enough,
let's call it Don't Panic.

00:27:52.730 --> 00:27:55.550
And finally, let's add this help menu
to my main menu bar.

00:27:55.640 --> 00:27:59.920
Add.

00:27:59.920 --> 00:28:01.870
It knows what to add.

00:28:02.800 --> 00:28:05.030
I'll show you in the next demo
why I've done it this way.

00:28:05.040 --> 00:28:08.380
We're going to show you another way
to do it where it just thinks for you.

00:28:08.380 --> 00:28:12.460
So did you have to do anything special to
get it to pop up what it's going to do?

00:28:12.460 --> 00:28:14.100
I didn't because I waited long enough.

00:28:14.100 --> 00:28:18.000
I could have by doing
Control Space if I was impatient.

00:28:18.000 --> 00:28:20.500
You're good.

00:28:20.580 --> 00:28:22.380
So we run this.

00:28:28.700 --> 00:28:31.640
We've got our new help menu
with the don't panic item.

00:28:31.640 --> 00:28:35.450
We don't like where the menu bar is,
but in the interest of time,

00:28:35.450 --> 00:28:39.880
we won't bother adding
the system property.

00:28:39.880 --> 00:28:42.760
We'll just press through.

00:28:42.760 --> 00:28:45.820
Back to the slides, please.

00:28:45.820 --> 00:28:47.140
We having fun?

00:28:47.190 --> 00:28:48.980
Gosh, yes.

00:28:49.980 --> 00:28:53.480
This is one of my favorite features,
programming by intention.

00:28:53.480 --> 00:28:56.620
You couldn't have even
imagined this a while ago.

00:28:56.960 --> 00:28:59.180
Programming by intention
says you're coding along,

00:28:59.180 --> 00:29:03.400
and you say to yourself, gosh,
I'd really like a class named this.

00:29:03.400 --> 00:29:06.900
So you type in the class name,
and the program doesn't freak.

00:29:06.900 --> 00:29:09.860
It says,
would you like me to create this for you?

00:29:09.860 --> 00:29:10.720
And you go, okay.

00:29:10.720 --> 00:29:13.100
And then you say,
I'd like this class to do this.

00:29:13.100 --> 00:29:15.610
And the program understands
what you're doing.

00:29:15.820 --> 00:29:18.280
So some of the help that
you have available to you in

00:29:18.400 --> 00:29:22.460
Eclipse is the light bulb help,
some source hints, and then refactorings,

00:29:22.460 --> 00:29:24.150
which are your best friend.

00:29:24.150 --> 00:29:28.960
So the idea is, whatever you want,
you pretend it exists.

00:29:28.960 --> 00:29:31.220
So I want to create a new cell object.

00:29:31.220 --> 00:29:33.520
I say cell, cell equals a new cell.

00:29:33.520 --> 00:29:36.430
And Eclipse lets me know
that there's something wrong.

00:29:36.430 --> 00:29:37.930
You can see this in two ways.

00:29:37.930 --> 00:29:40.770
You see the red squiggly
lines under cell and new cell.

00:29:40.770 --> 00:29:44.400
And you see the light bulb with
the X on it says something's wrong.

00:29:47.320 --> 00:29:48.720
So what's wrong?

00:29:48.720 --> 00:29:51.590
Well, first of all,
there is no cell class.

00:29:51.680 --> 00:29:54.160
Second of all,
there is no no-argument constructor,

00:29:54.160 --> 00:29:57.550
although if you created a cell class,
chances are you'd have

00:29:57.550 --> 00:30:01.310
your no-arg constructor,
and so the code won't compile.

00:30:01.360 --> 00:30:02.640
That's where I disagree
with you slightly.

00:30:02.640 --> 00:30:03.640
It will compile.

00:30:03.650 --> 00:30:05.440
It'll just compile with an error.

00:30:05.570 --> 00:30:06.990
Thank you.

00:30:09.260 --> 00:30:10.160
Is that a feature?

00:30:10.330 --> 00:30:11.960
No, it actually is a feature.

00:30:11.960 --> 00:30:12.840
I use it all the time.

00:30:12.840 --> 00:30:16.760
I write my code,
and then I don't complete it all,

00:30:16.760 --> 00:30:19.700
and I run what I have,
so I don't have to finish

00:30:19.700 --> 00:30:20.790
the program before I start.

00:30:20.940 --> 00:30:25.340
So this is great with students who,
if you're a teacher,

00:30:25.360 --> 00:30:30.770
with students whose relationship with
the compiler is not a friendly one,

00:30:30.770 --> 00:30:33.320
and they think that the compiler
is not there to help them.

00:30:36.370 --> 00:30:37.840
How can we fix this code?

00:30:37.890 --> 00:30:40.500
Well, Eclipse lets us know.

00:30:40.520 --> 00:30:41.790
And it's pretty darn smart.

00:30:41.790 --> 00:30:44.410
It says, you've got lots of options here.

00:30:44.430 --> 00:30:47.120
You've typed in cell,
and maybe you're mistaken,

00:30:47.120 --> 00:30:50.460
or maybe it's what you meant to do,
and here's some things that we

00:30:50.460 --> 00:30:52.310
could do to make that code work.

00:30:55.760 --> 00:30:59.380
So in this case,
we'll choose to create the cell class.

00:30:59.390 --> 00:31:04.900
We again get this helpful little pop-up,
and we choose what package it's in.

00:31:05.150 --> 00:31:06.900
We choose its superclass.

00:31:06.900 --> 00:31:10.440
Now, everything in Java, of course,
has a superclass,

00:31:10.440 --> 00:31:13.940
even if it's just plain old object,
which it is in this case.

00:31:13.940 --> 00:31:17.110
And we decide what we
want to happen here.

00:31:17.180 --> 00:31:21.870
In this case, I've changed the modifier
from public to default.

00:31:23.780 --> 00:31:25.360
And there's the generated cell class.

00:31:25.360 --> 00:31:26.740
Can you back up one slide there?

00:31:26.740 --> 00:31:27.440
No.

00:31:27.450 --> 00:31:28.700
No.

00:31:29.120 --> 00:31:32.140
So one of the things they've added
in 3.1-- I'll just show you here.

00:31:32.160 --> 00:31:34.200
You see how Properties
is now an active link?

00:31:34.320 --> 00:31:37.420
So when you get a dialog box like that,
and you click on that active link,

00:31:37.420 --> 00:31:39.920
it'll take you to the dialog
box to set the properties.

00:31:39.980 --> 00:31:41.280
So you can then configure it.

00:31:41.310 --> 00:31:43.120
You don't have to remember
which menu it is and so on.

00:31:43.120 --> 00:31:47.300
It just tells you this is the thing
that affects that particular checkbox.

00:31:50.120 --> 00:31:53.260
So already you're seeing that
this is better than a text editor.

00:31:53.520 --> 00:31:56.420
It's anticipating, it's helping you,
it's working with you.

00:31:56.630 --> 00:32:00.420
Not that I'm saying
anything about VI or Emacs.

00:32:00.540 --> 00:32:03.500
So let's take a look
at how this might work.

00:32:04.800 --> 00:32:07.630
So if we can go back to the demo machine,
please.

00:32:07.760 --> 00:32:10.260
So if we go back to the Help menu,

00:32:11.390 --> 00:32:15.000
We've already added this new JMenu item.

00:32:15.010 --> 00:32:16.780
Let's add something else in here.

00:32:16.860 --> 00:32:21.500
And so what I'm going to
type in here is Help Menu,

00:32:21.500 --> 00:32:27.680
Add, O, Find Towel.

00:32:30.340 --> 00:32:31.910
Seemed perfectly reasonable to me.

00:32:31.920 --> 00:32:34.200
I know what FindTal is supposed to be.

00:32:34.200 --> 00:32:35.980
Apparently, Eclipse doesn't.

00:32:35.980 --> 00:32:38.310
And so let's see what
it's telling me I can do.

00:32:38.410 --> 00:32:41.060
I click on the light bulb.

00:32:41.070 --> 00:32:43.480
This is magic to me.

00:32:44.260 --> 00:32:48.540
It says not only what it could do for me,
but if you look in the right side,

00:32:48.540 --> 00:32:52.050
it gives me a preview of what the code's
going to look like if it does that.

00:32:52.100 --> 00:32:55.300
And so in this case,
one of the things it can do is

00:32:55.300 --> 00:32:59.380
create local variable findTowel,
but it's not done yet.

00:33:02.110 --> 00:33:04.610
So we created the local variable.

00:33:04.750 --> 00:33:07.510
Something's still wrong.

00:33:07.550 --> 00:33:08.120
What's wrong?

00:33:08.180 --> 00:33:11.530
I haven't-- well, I'll let it tell you.

00:33:12.240 --> 00:33:14.660
You need to initialize the variable.

00:33:14.740 --> 00:33:19.330
So we let it initialize the variable.

00:33:20.570 --> 00:33:26.880
Now, you'd think Eclipse would know
exactly what's in my mind.

00:33:27.020 --> 00:33:29.050
I'll take that back and let them know.

00:33:29.060 --> 00:33:29.640
Huh?

00:33:29.640 --> 00:33:32.110
I'll let the developers know
that that's a problem there.

00:33:32.230 --> 00:33:34.760
But that's pretty far.

00:33:34.760 --> 00:33:37.040
The fact that I actually have
to write a couple words of

00:33:37.090 --> 00:33:38.920
code doesn't worry me too much.

00:33:38.920 --> 00:33:44.290
So I can write a new JMenu item,
knowing that Bjorn is going

00:33:44.290 --> 00:33:46.500
to have that fixed in 3.2.

00:33:48.040 --> 00:33:52.950
And let's call that FineTowel.

00:33:53.000 --> 00:33:57.300
Run it.

00:34:03.800 --> 00:34:05.990
and that's programming by intention.

00:34:06.200 --> 00:34:07.550
I think that's pretty neat.

00:34:07.560 --> 00:34:10.930
We have the slides, please.

00:34:15.610 --> 00:34:15.900
Okay.

00:34:15.900 --> 00:34:19.580
Programming by intention is
one way to go about things,

00:34:19.580 --> 00:34:22.700
but there's times that you
know what your intentions are,

00:34:22.700 --> 00:34:24.630
and you're typing along,
and you just like to know

00:34:24.630 --> 00:34:25.830
what's available to you.

00:34:25.860 --> 00:34:27.500
Now, you see this in other IDs.

00:34:27.500 --> 00:34:30.390
It's very common that you
start typing a package name,

00:34:30.390 --> 00:34:31.380
and you do javax.

00:34:31.380 --> 00:34:33.890
and all the options pop up,
and that's useful,

00:34:33.890 --> 00:34:35.420
and we saw that before.

00:34:35.600 --> 00:34:38.100
And that's more of what
I think of as code assist.

00:34:38.100 --> 00:34:42.260
And so to activate code assist,
that's what Bjorn was getting at before.

00:34:42.260 --> 00:34:46.870
The two ways is if I pause long
enough after typing my frame dot,

00:34:46.870 --> 00:34:48.740
it'll pop up.

00:34:48.880 --> 00:34:50.810
Or I can just do control space.

00:34:50.810 --> 00:34:53.360
Control space is really
nice if you're in,

00:34:53.370 --> 00:34:57.800
say, a class that extends J frame,
and you don't want to do this dot so that

00:34:57.800 --> 00:35:00.440
you can see all the things available.

00:35:00.440 --> 00:35:03.250
And you just do control space,
and you can see all the things

00:35:03.250 --> 00:35:04.550
that's available to you.

00:35:04.980 --> 00:35:08.210
The other thing is the amount of time
it takes to pop up is configurable.

00:35:08.210 --> 00:35:10.060
It's really the way you code.

00:35:10.060 --> 00:35:13.240
Sometimes it pops up too fast for you,
and it gets in your way,

00:35:13.240 --> 00:35:15.420
and sometimes you just don't
want to wait that long.

00:35:15.420 --> 00:35:17.740
So you go to the preferences,
and you can set that time.

00:35:20.630 --> 00:35:26.170
So for instance,
in the test cell method that we wrote,

00:35:26.610 --> 00:35:29.370
if I'm in it and I type
that I want assistance,

00:35:29.640 --> 00:35:31.640
here are all the methods
that are available to me,

00:35:31.640 --> 00:35:37.330
and that should look familiar to you if
you've done any unit testing using JANET.

00:35:40.620 --> 00:35:44.490
For once you've got Assert True,
you've got this pop-up message

00:35:44.490 --> 00:35:45.930
that lets you know that,
well,

00:35:45.930 --> 00:35:47.820
here are the arguments it's expecting.

00:35:47.820 --> 00:35:51.250
It's expecting a string that's
the message and then a Boolean

00:35:51.250 --> 00:35:53.570
condition that it can test against.

00:35:53.580 --> 00:35:56.130
And then,
let's say inside of Assert True,

00:35:56.260 --> 00:35:58.830
what we're testing is, is the cell alive?

00:35:58.830 --> 00:36:02.380
And now we're back to coding by
intention because there is no

00:36:02.410 --> 00:36:04.770
isAlive method in the cell class.

00:36:04.770 --> 00:36:06.900
And so these things work back and forth.

00:36:06.980 --> 00:36:10.340
But again,
it knows I don't have an isAlive method.

00:36:10.340 --> 00:36:13.830
It prompts me, and you can see that
that's how it stubs out.

00:36:13.850 --> 00:36:16.640
In this case,
we're choosing the simplest thing,

00:36:16.640 --> 00:36:18.720
and so isAlive just returns false.

00:36:21.100 --> 00:36:53.300
[Transcript missing]

00:36:55.530 --> 00:36:57.970
OK,
so if we take a look again at the demo,

00:36:58.050 --> 00:36:58.300
please.

00:36:58.380 --> 00:37:02.470
We've run the GUI code here.

00:37:02.580 --> 00:37:05.680
And let me look at the About box here.

00:37:05.700 --> 00:37:07.850
Here's the About box.

00:37:08.730 --> 00:37:10.230
Not very interesting.

00:37:10.510 --> 00:37:11.860
So let me get rid of it.

00:37:11.860 --> 00:37:15.780
Let's go to aboutbox.java.

00:37:15.780 --> 00:37:17.810
And under Super--

00:37:19.700 --> 00:37:22.160
Let's see what we can do to add to this.

00:37:22.160 --> 00:37:23.380
I've got an About box.

00:37:23.560 --> 00:37:25.890
I'd like to customize the color, perhaps.

00:37:25.950 --> 00:37:28.880
I don't want to write this
dot to see what I can do,

00:37:28.910 --> 00:37:31.410
so I use Control + Space.

00:37:32.550 --> 00:37:34.500
I see all the things that
I can do in this guy,

00:37:34.500 --> 00:37:36.370
and so one of them is set.

00:37:36.410 --> 00:37:37.140
What can I set?

00:37:37.140 --> 00:37:38.680
I can set the background color.

00:37:38.770 --> 00:37:41.540
As soon as you see the guy
highlighted that you want,

00:37:41.770 --> 00:37:44.250
you can stop typing and just hit return.

00:37:44.340 --> 00:37:46.380
So I'll hit return.

00:37:47.360 --> 00:37:50.480
It tells me it's going to take a color.

00:37:50.540 --> 00:37:53.240
What colors are available here?

00:37:53.280 --> 00:37:55.800
Well, cyan works for me.

00:38:00.240 --> 00:38:02.540
And so Code Assist is a wonderful thing.

00:38:02.580 --> 00:38:07.660
Code Assist has enabled me to very
quickly find the methods that I want,

00:38:07.820 --> 00:38:09.980
find the parameters that I need.

00:38:10.010 --> 00:38:14.660
And now within the About box,
I have a beautiful blue box.

00:38:18.220 --> 00:38:20.940
Slides, please.

00:38:20.940 --> 00:38:21.930
How are we doing for time?

00:38:21.940 --> 00:38:28.740
When your demo crashes, you go faster,
don't you?

00:38:28.740 --> 00:38:31.600
OK, let's look at running some tests.

00:38:33.000 --> 00:38:34.600
This is a different view of JUnit.

00:38:34.600 --> 00:38:37.600
It's actually inside the IDE,
so you're not running it as a standalone.

00:38:37.600 --> 00:38:42.340
If we run JUnit at this point,
and I'll show you what we did.

00:38:42.340 --> 00:38:44.620
Instead of running it
as a Java application,

00:38:44.620 --> 00:38:47.880
you just right-click and choose
to run it as a JUnit test.

00:38:47.880 --> 00:38:52.180
What's nice here is my
tests are running green,

00:38:52.180 --> 00:38:55.820
and I'm feeling good because I tested
that when I created a new cell,

00:38:55.820 --> 00:38:59.180
it should be dead,
and isAlive always returns false.

00:39:00.550 --> 00:39:02.940
That's a pretty trivial way
to get your test to pass.

00:39:03.130 --> 00:39:06.810
You should always do the simplest thing,
and then you should make it fail again.

00:39:06.980 --> 00:39:08.700
So is a live cell alive?

00:39:09.030 --> 00:39:13.500
Let's create a new test method.

00:39:13.510 --> 00:39:17.370
And so we've decided to test
a new cell should be dead.

00:39:17.380 --> 00:39:19.400
A live cell should be alive.

00:39:19.420 --> 00:39:22.100
We have a setAlive method
that doesn't exist yet,

00:39:22.300 --> 00:39:24.560
so we use a little help.

00:39:25.240 --> 00:39:27.780
We run the test as soon
as the code compiles,

00:39:27.850 --> 00:39:29.640
so we have to add the setAlive method.

00:39:29.640 --> 00:39:31.980
Let's just do nothing inside of it.

00:39:32.000 --> 00:39:34.410
isAlive always returns false.

00:39:34.470 --> 00:39:37.760
That used to be a good thing, but now,
of course, my test will fail,

00:39:38.170 --> 00:39:41.710
because a new cell will be dead,
but a live cell, the call to isAlive,

00:39:41.720 --> 00:39:43.300
will also return false.

00:39:44.890 --> 00:39:46.220
So we muck around in it.

00:39:46.260 --> 00:39:49.540
We've got a fool with it.

00:39:49.550 --> 00:39:52.080
Watch this.

00:39:52.110 --> 00:39:53.300
This is what I'm saying.

00:39:53.390 --> 00:39:58.580
If you're used to coming from the
world of just text programming

00:39:58.690 --> 00:40:03.480
and not the model underneath,
you see those three lives?

00:40:07.930 --> 00:40:10.220
I didn't know that Eclipse put
orange circles around things.

00:40:10.300 --> 00:40:12.780
That's pretty cool.

00:40:12.790 --> 00:40:14.690
How do you make that happen?

00:40:14.760 --> 00:40:15.880
It's in 3.2.

00:40:15.900 --> 00:40:17.880
Oh, OK.

00:40:18.790 --> 00:40:23.140
Those three Alives are
different from those two Alives.

00:40:23.140 --> 00:40:26.020
Not all the Alives are the same.

00:40:26.020 --> 00:40:28.520
This is part of the
magic of the refactoring,

00:40:28.520 --> 00:40:30.150
that if I wanted to--

00:40:33.120 --> 00:40:37.830
This could be a much-- if
I wanted to change these two

00:40:37.830 --> 00:40:40.790
Alives to a different name,
it would leave the other ones alone.

00:40:40.900 --> 00:40:43.830
It knows the difference between
the Alives that refer to this

00:40:43.830 --> 00:40:48.670
local variable from the ones that
refer to the instance variable.

00:40:49.870 --> 00:40:53.500
And in spite of the fact that the
orange circles didn't come from Eclipse,

00:40:53.610 --> 00:40:54.860
the yellow highlights do.

00:40:55.060 --> 00:40:55.480
Yes.

00:40:55.480 --> 00:40:57.790
So you can highlight the variables.

00:40:57.840 --> 00:40:59.980
The art department didn't
think that was clear enough,

00:40:59.980 --> 00:41:02.660
so there's your orange circles.

00:41:05.510 --> 00:41:09.160
And in spite of the fact that the
orange circles didn't come from Eclipse,

00:41:09.160 --> 00:41:10.580
the yellow highlights do.

00:41:10.580 --> 00:41:11.080
Yes.

00:41:11.080 --> 00:41:13.400
So you can highlight the variables.

00:41:13.400 --> 00:41:15.580
The art department didn't
think that was clear enough,

00:41:15.580 --> 00:41:16.340
so there's your orange circles.

00:41:16.550 --> 00:41:20.260
And in spite of the fact that the
orange circles didn't come from Eclipse,

00:41:20.260 --> 00:41:21.630
the yellow highlights do.

00:41:22.020 --> 00:41:22.180
Yes.

00:41:22.180 --> 00:41:24.500
So you can highlight the variables.

00:41:24.500 --> 00:41:26.680
The art department didn't
think that was clear enough,

00:41:26.680 --> 00:41:29.360
so there's your orange circles.

00:41:41.030 --> 00:41:43.350
One of the nicest things
was you no longer need to

00:41:43.350 --> 00:41:45.400
do get content pane dot add.

00:41:45.400 --> 00:41:46.960
You can just do direct add.

00:41:47.040 --> 00:41:49.430
I know it sounds like a
small feature in Java 5,

00:41:49.430 --> 00:41:52.480
but boy, it feels good.

00:41:53.620 --> 00:41:58.040
Common refactorings,
and one of the major code smells,

00:41:58.040 --> 00:41:59.840
is when you see repeated codes.

00:41:59.840 --> 00:42:03.180
So, for instance, the fact that you
created a cell each time,

00:42:03.460 --> 00:42:04.280
you pull it out.

00:42:04.450 --> 00:42:08.330
If you look at the available refactoring,
so if you want to take this

00:42:08.490 --> 00:42:11.300
code back and then right-click
on it with Eclipse and see what

00:42:11.610 --> 00:42:14.590
refactorings are available to you,
you'll see that you can make

00:42:14.590 --> 00:42:18.380
the local variable into a field,
you can extract the instantiation,

00:42:18.490 --> 00:42:21.430
you can pull it up,
you can use your setup method.

00:42:22.520 --> 00:42:24.640
And so your resulting
code is much cleaner.

00:42:24.640 --> 00:42:26.190
You've only created your cell once.

00:42:26.210 --> 00:42:27.570
You've got your declaration.

00:42:27.650 --> 00:42:29.360
It's private cell, cell at the top.

00:42:29.650 --> 00:42:33.640
And inside the setup method is
where you instantiate it each

00:42:33.900 --> 00:42:36.080
time you run a test method.

00:42:39.230 --> 00:42:41.860
So, once more to the demo machine.

00:42:41.970 --> 00:42:43.900
And while he's switching
to the demo machine,

00:42:43.950 --> 00:42:46.710
the interesting thing-- well,
another interesting thing about that

00:42:46.710 --> 00:42:51.270
highlighting of the yellow variables and
so on is that that works also in Javadoc.

00:42:51.440 --> 00:42:54.970
So the model that Eclipse keeps behind
there is not just for the source code,

00:42:55.040 --> 00:42:56.280
but also for the Javadoc.

00:42:56.390 --> 00:42:59.240
So you know when you're typing
Javadoc tags about like C,

00:42:59.260 --> 00:43:03.780
another method, and another class,
you can go to that Javadoc tag and press

00:43:04.050 --> 00:43:07.500
take me to the definition of this method,
and it'll take you right to

00:43:07.500 --> 00:43:10.640
that source file because it's
not just textual substitution.

00:43:10.640 --> 00:43:12.970
It's actually a model,
and it works on the Javadoc side

00:43:13.250 --> 00:43:15.830
as well as on the code side.

00:43:16.350 --> 00:43:21.570
So we talked about all this Java 5 stuff,
but where do we set that?

00:43:21.730 --> 00:43:26.370
So let's look at the
preferences again for Eclipse.

00:43:27.060 --> 00:43:29.620
If we look at the preferences,
we're actually going to set

00:43:29.690 --> 00:43:30.970
it in two different places.

00:43:31.000 --> 00:43:35.990
If you go down to the Java menu,
we're going to set it for the compiler.

00:43:36.000 --> 00:43:39.000
You see the compiler compliance level.

00:43:39.000 --> 00:43:42.290
That's what it's going to use
to enforce at this level for

00:43:42.290 --> 00:43:44.910
all the new keywords and such.

00:43:46.980 --> 00:43:49.040
If I apply that, well,
something's changed.

00:43:49.040 --> 00:43:50.740
We have to rebuild it.

00:43:51.060 --> 00:43:54.280
The second place is I'm going
to go down to Install JREs.

00:43:54.280 --> 00:43:56.220
And even though this
looks like checkboxes,

00:43:56.220 --> 00:43:57.660
these are radio buttons.

00:43:57.660 --> 00:44:00.270
And so check Java 5.

00:44:04.120 --> 00:44:06.680
And now we're 5.0 compliant.

00:44:06.680 --> 00:44:09.200
Oh, we got problems.

00:44:09.200 --> 00:44:10.900
We got problems already.

00:44:10.950 --> 00:44:15.200
So the method show is deprecated.

00:44:15.320 --> 00:44:18.640
So it takes us to show, and we think,
well, it's deprecated.

00:44:18.640 --> 00:44:20.380
It's got a cross through it.

00:44:20.380 --> 00:44:22.000
You know what?

00:44:22.000 --> 00:44:23.600
I don't need it.

00:44:23.600 --> 00:44:26.370
Once I've set visible to true,
I don't need it.

00:44:31.350 --> 00:44:33.880
So I've removed it,
and my problems go away.

00:44:33.980 --> 00:44:41.860
I'm looking at my notes here
because my stage demos aren't there.

00:44:41.860 --> 00:44:43.220
Sorry about that.

00:44:43.220 --> 00:44:45.440
So I wanted to show
you a find and replace.

00:44:45.440 --> 00:44:47.930
And so if we look at pref pane--

00:44:49.190 --> 00:44:51.210
So here's two different ways of renaming.

00:44:51.370 --> 00:44:54.000
If I have Prefs text here,
do you see when I clicked on it,

00:44:54.090 --> 00:44:56.980
all the other things
that are highlighted?

00:44:57.020 --> 00:45:00.090
Those are other references
to the same variable.

00:45:00.100 --> 00:45:03.420
So that's what Bjorn meant was that
wasn't an artifact of the slide.

00:45:03.480 --> 00:45:05.010
That's actually in Eclipse.

00:45:05.110 --> 00:45:11.200
And so if I choose to refactor that,
a shortcut to refactoring,

00:45:11.200 --> 00:45:17.150
which you'll come to love, is Alt,
Command T.

00:45:17.310 --> 00:45:18.780
And so one of the things
I can do is rename.

00:45:19.100 --> 00:45:24.550
If I rename it to Preferences, Text,

00:45:26.180 --> 00:45:29.600
You'll notice that all the instances
are now renamed to Preferences Text.

00:45:29.600 --> 00:45:35.590
I know, but it saves you.

00:45:35.700 --> 00:45:38.450
The other thing you
can do is do a search.

00:45:38.550 --> 00:45:46.520
And so I can do a search
for this.getContentPane.

00:45:46.590 --> 00:45:50.660
And I can choose to
replace that with anything,

00:45:50.730 --> 00:45:53.810
including replace it with nothing.

00:45:55.900 --> 00:46:12.100
[Transcript missing]

00:46:13.890 --> 00:46:16.230
Not only does Eclipse know
what you do want to have,

00:46:16.230 --> 00:46:19.060
Eclipse has a good idea of
what you don't want to have.

00:46:19.460 --> 00:46:25.770
And so let me add an import
statement for something I don't need.

00:46:25.770 --> 00:46:30.370
So let me do import javax.media.jai.

00:46:31.320 --> 00:46:34.440
I feel so proud of myself.

00:46:34.440 --> 00:46:37.610
I've imported this new package.

00:46:37.610 --> 00:46:40.410
And do you see the
yellow underline there?

00:46:40.600 --> 00:46:44.500
Eclipse knows that I've imported
something and I never use that import.

00:46:44.710 --> 00:46:49.110
And so for those of you that don't
use .star and use specific ones,

00:46:49.110 --> 00:46:52.180
as you no longer need the classes
that you've done an import for,

00:46:52.180 --> 00:46:55.530
you get flagged and you get told,
you don't need that anymore,

00:46:55.530 --> 00:46:56.650
do you want to get rid of it?

00:46:56.810 --> 00:46:59.190
And so we can remove the import
because it's not needed anymore.

00:46:59.190 --> 00:47:06.470
And that's a nice way to clean
up code because otherwise it

00:47:06.470 --> 00:47:06.800
just gets gooier and gooier.

00:47:07.110 --> 00:47:08.980
Boy, there's a thought that
just went flying somewhere.

00:47:08.980 --> 00:47:13.350
Well, one of the things I use that scheme
for is I actually never write

00:47:13.350 --> 00:47:16.330
imports because I find them redundant
since Eclipse will do them for me.

00:47:16.360 --> 00:47:18.680
So I just write all my code and it says,
well, I don't know this class and

00:47:18.770 --> 00:47:19.730
I don't know this class.

00:47:19.760 --> 00:47:21.860
And then I use the
organize imports method,

00:47:22.070 --> 00:47:25.070
which goes out and puts in all the
import statements for me for all the

00:47:25.160 --> 00:47:28.760
classes that it doesn't know about
and asks if there's any ambiguity.

00:47:28.760 --> 00:47:31.380
And so it just fills it
all in because I'm lazy.

00:47:31.380 --> 00:47:33.830
And again, that's all configurable
in the preferences.

00:47:33.860 --> 00:47:36.220
And so that's another nice thing, too.

00:47:36.820 --> 00:47:39.120
So we'll go back to the slides, please.

00:47:42.620 --> 00:47:46.790
So we've now set the IDE to use J2SE 5.0.

00:47:46.860 --> 00:47:50.200
And so let's take a look at some
of the things that it can do.

00:47:50.440 --> 00:47:51.900
We just set the VM preferences.

00:47:51.900 --> 00:47:53.320
This is so that it's in your slide.

00:47:53.320 --> 00:47:55.770
So when you go home, you go, oh,
where was that?

00:47:55.790 --> 00:47:57.280
That's where you do it.

00:47:57.360 --> 00:48:00.430
So that little circle
also is in an Eclipse.

00:48:00.780 --> 00:48:03.840
But you can see that interface
and enums are now in.

00:48:03.900 --> 00:48:05.940
And so you can work with those.

00:48:05.940 --> 00:48:09.210
Also, one of the things you can
work with is generics.

00:48:09.450 --> 00:48:12.380
And so, for instance, here--

00:48:13.030 --> 00:48:16.360
We're working with an int,
and we want to change it.

00:48:16.360 --> 00:48:17.270
So let's take a look.

00:48:17.280 --> 00:48:20.520
We have squares,
and we're getting these yellow squiggles.

00:48:20.520 --> 00:48:23.140
It's telling us that, well,
you can use ints here,

00:48:23.140 --> 00:48:26.010
but maybe it would be nicer.

00:48:26.650 --> 00:48:29.820
If you used an iterator
with a generic type,

00:48:29.820 --> 00:48:33.200
you specified the type that you're using.

00:48:33.210 --> 00:48:36.940
And so if we go ahead and
use a parameterized type,

00:48:36.970 --> 00:48:42.790
you'll find that appears whenever
you need it in your refactorings.

00:48:44.100 --> 00:48:47.920
And so the list for squares,
it didn't fill in the type in this case.

00:48:47.920 --> 00:48:50.880
I'll show you an example
in a minute where it does.

00:48:50.950 --> 00:48:53.640
So it didn't fill in the type,
but you go ahead and fill in that

00:48:53.640 --> 00:48:57.500
question mark instead of the wildcard
with the type you actually want.

00:48:58.100 --> 00:49:00.240
In this case, Integer.

00:49:00.450 --> 00:49:03.000
And I get a lot safer, smarter code.

00:49:03.040 --> 00:49:08.740
That's, of course,
Java 5 dependent there, though.

00:49:08.860 --> 00:49:10.940
So to the Batmobile.

00:49:11.170 --> 00:49:14.930
Back to the demo.

00:49:15.140 --> 00:49:17.770
And here in About box,

00:49:19.900 --> 00:49:29.500
[Transcript missing]

00:49:30.200 --> 00:49:33.390
I guess I should ask Francois,
the person that wrote this code here?

00:49:34.030 --> 00:49:34.530
Never mind.

00:49:34.750 --> 00:49:36.200
It's wonderful.

00:49:36.270 --> 00:49:38.900
But we're going to do
it a little differently.

00:49:40.200 --> 00:49:59.100
[Transcript missing]

00:50:02.800 --> 00:50:05.060
I'm getting a problem here.

00:50:05.140 --> 00:50:08.430
So what's the possible
problem that I'm getting?

00:50:10.050 --> 00:50:11.850
I don't have the import
statement in there,

00:50:11.860 --> 00:50:14.670
so I'll go ahead,
even though Bjorn has a better way,

00:50:14.670 --> 00:50:15.830
but I'll persist.

00:50:16.020 --> 00:50:18.510
Now, this is a little flaky.

00:50:18.760 --> 00:50:21.660
List labelList equals new ArrayList,
and it seems like it doesn't

00:50:21.660 --> 00:50:22.910
understand what I'm saying.

00:50:23.180 --> 00:50:25.530
The fix is going to be a
little bit interesting here.

00:50:25.730 --> 00:50:28.700
Change the type of
labelList to ArrayList.

00:50:28.850 --> 00:50:29.720
You see the deal here?

00:50:29.740 --> 00:50:33.350
LabelList is being created
by a call to ArrayList,

00:50:33.350 --> 00:50:36.060
so it knows it has to be of that type.

00:50:36.090 --> 00:50:39.370
And yet, when I double-click here...

00:50:39.970 --> 00:50:42.500
One of the choices is to
use the interface list,

00:50:42.590 --> 00:50:45.080
which is what I typed in the first place.

00:50:45.080 --> 00:50:49.550
But because it's not just using a string,
it had to make sure that that

00:50:49.550 --> 00:50:51.340
was the list that I meant.

00:50:51.440 --> 00:50:54.750
So I apparently double-clicked
on ArrayList instead of List.

00:50:54.750 --> 00:50:56.900
But you'll forgive me and we'll go on.

00:51:00.140 --> 00:51:05.980
So we can now, one of the nice things,
because we're now Java 5 compliant here,

00:51:06.050 --> 00:51:08.660
is we can use that sort
of a for loop instead.

00:51:08.660 --> 00:51:12.780
And so we can say for a JLabel.

00:51:12.780 --> 00:51:14.070
Okay.

00:51:16.500 --> 00:51:22.700
[Transcript missing]

00:51:23.650 --> 00:51:26.660
and it's just as happy as can be.

00:51:26.660 --> 00:51:28.500
I can do whatever I want in there.

00:51:28.610 --> 00:51:31.470
So there's your new for loop as well.

00:51:32.310 --> 00:51:35.460
Not doing anything now, but again,
it's no worse.

00:51:35.460 --> 00:51:37.030
So we'll go back to the slides, please.

00:51:39.320 --> 00:51:40.150
Home Stretch.

00:51:40.860 --> 00:51:42.030
Building Plugins.

00:51:42.030 --> 00:51:44.560
You can do this on other platforms.

00:51:44.560 --> 00:51:50.300
It's not the part of Eclipse
that Bjorn was stressing today.

00:51:50.300 --> 00:51:53.330
And the main thing was to
show you that it can be done,

00:51:53.420 --> 00:51:56.740
and it can be done very easily
here on the Mac as well.

00:51:56.900 --> 00:51:59.940
And so instead of choosing
to build a new Java project,

00:51:59.940 --> 00:52:02.620
you'll choose to build
a new plugin project.

00:52:02.620 --> 00:52:06.340
If you look in the plugins,
you'll see that Eclipse

00:52:06.510 --> 00:52:08.350
is just a ton of plugins.

00:52:08.380 --> 00:52:11.530
And during their first
couple years of existence,

00:52:11.530 --> 00:52:15.210
that was a big part of the stump
speech was that Eclipse is this

00:52:15.360 --> 00:52:19.320
very thin platform on which
everything is done with plugins.

00:52:19.320 --> 00:52:21.630
And people said, well,
I want to build my own.

00:52:21.630 --> 00:52:23.330
And so here you can.

00:52:23.340 --> 00:52:25.700
So you choose to create a plugin.

00:52:27.240 --> 00:52:29.430
You name your plugin.

00:52:29.920 --> 00:52:32.440
We're going to create it
based on the Java project.

00:52:32.640 --> 00:52:35.620
We'll call it Hello WWDC.

00:52:36.700 --> 00:53:08.400
[Transcript missing]

00:53:09.240 --> 00:53:10.440
Looks like a lot of stuff.

00:53:10.600 --> 00:53:14.230
And I don't know if you go to your
local Jug meeting and you hear this,

00:53:14.340 --> 00:53:16.940
but it seems that in Cleveland,
at our local Jug,

00:53:16.940 --> 00:53:20.600
a lot of people come in and say,
look how much you can

00:53:20.600 --> 00:53:21.700
do and not write code.

00:53:21.700 --> 00:53:23.170
And that's a little scary.

00:53:23.180 --> 00:53:27.500
But here you can actually access
the code that you're generating

00:53:27.500 --> 00:53:29.610
and modify it and play with it.

00:53:29.700 --> 00:53:33.440
And so here's the directory of
what you've created and where.

00:53:33.960 --> 00:53:37.500
A lot of the life is going to live
down there in that plugin.xml file,

00:53:37.500 --> 00:53:41.820
but you'll see that what it calls
is that sample action.java file.

00:53:43.120 --> 00:53:47.320
So running the plug-in,
this is kind of interesting.

00:53:47.360 --> 00:53:48.400
You're creating a plug-in.

00:53:48.400 --> 00:53:51.320
The plug-in has to run
as part of Eclipse,

00:53:51.370 --> 00:53:53.150
but you're developing in Eclipse.

00:53:53.290 --> 00:53:56.290
And so what you have to do is you
have to bring up another instance

00:53:56.350 --> 00:53:58.050
of Eclipse to test your plug-in in.

00:53:58.380 --> 00:54:00.460
And that's what happens at the bottom,
where it says,

00:54:00.500 --> 00:54:02.260
launch an Eclipse application.

00:54:02.380 --> 00:54:05.330
So you'll launch another instance
of Eclipse in which you are testing

00:54:05.430 --> 00:54:07.890
the plug-in that you're developing.

00:54:09.500 --> 00:54:42.300
[Transcript missing]

00:54:43.660 --> 00:54:44.690
and it looks something like that.

00:54:44.750 --> 00:54:48.980
You create a new menu with
a new menu item in it.

00:54:49.090 --> 00:54:53.710
So, when you run the plug-in,
either way you get a little pop-up.

00:54:53.740 --> 00:54:54.280
Life is happy.

00:54:56.460 --> 00:54:56.800
OK.

00:54:56.800 --> 00:55:03.370
If you look in the extensions,
you see the sample action.

00:55:03.720 --> 00:55:08.250
That's whether you accessed it from
the menu bar or from the toolbar.

00:55:08.450 --> 00:55:11.220
That's the thing that actually happens.

00:55:11.260 --> 00:55:14.510
And so here is the XML view.

00:55:14.980 --> 00:55:16.600
This is the GUI view.

00:55:16.630 --> 00:55:21.320
I find it easier to see things here,
but however you're more comfortable.

00:55:21.470 --> 00:55:24.130
If you look down here at the bottom,

00:55:25.490 --> 00:55:28.200
You can see,
as I jump off the back of the stage,

00:55:28.200 --> 00:55:33.500
you can see there's the class that's
called when you enable the action.

00:55:33.500 --> 00:55:36.650
There's a tooltip there,
and there's a menu bar as well.

00:55:36.680 --> 00:55:39.220
And so you've got
something in the toolbar,

00:55:39.220 --> 00:55:42.420
you've got something in the menu bar,
and you've got the tooltip that pops up

00:55:42.500 --> 00:55:44.000
when you access the thing in the toolbar.

00:55:44.000 --> 00:55:46.180
So it's all there right in the XML file.

00:55:46.200 --> 00:55:48.930
Deploying the plug-in, again,
there's another wizard that

00:55:48.930 --> 00:55:50.140
takes you through that.

00:55:53.090 --> 00:55:58.350
What's new in Eclipse 3.1 is you can now
deploy the plug-in as a JAR file instead

00:55:58.350 --> 00:56:01.180
of a directory of different things,
and that's sort of a neater

00:56:01.180 --> 00:56:02.190
way to distribute it.

00:56:02.280 --> 00:56:05.600
And so we can package the
plug-in as a JAR archive.

00:56:07.400 --> 00:57:58.400
[Transcript missing]

00:58:02.250 --> 00:58:04.410
You can sit-- well,
because they have an Eclipse book,

00:58:04.440 --> 00:58:06.560
but they were closed
before the session's over.

00:58:06.580 --> 00:58:10.700
And so it's-- So can you use it to order
things other than the Eclipse book?

00:58:10.700 --> 00:58:13.240
You can.

00:58:13.430 --> 00:58:18.260
So for Pearl Books, it's T5 WWDC.

00:58:20.910 --> 00:58:24.340
Tango 5, Whiskey Whiskey, Delta Charlie.

00:58:24.400 --> 00:58:25.870
If we have to spell out WWC.