WEBVTT

00:00:00.620 --> 00:00:04.180
Welcome everyone.

00:00:04.230 --> 00:00:06.260
My name is Shay Shemltzer.

00:00:06.280 --> 00:00:11.680
I'm from Oracle and welcome to the
Developing J2E Application using

00:00:11.680 --> 00:00:13.300
Oracle JDeveloper.

00:00:13.350 --> 00:00:17.700
What we'll try to do today in the
session is take you through the process

00:00:17.830 --> 00:00:24.680
of developing a complete J2E application
using the Oracle development tools,

00:00:24.730 --> 00:00:26.400
which is called JDeveloper.

00:00:26.470 --> 00:00:31.200
Just to get a feeling of the audience,
how many people here are

00:00:31.200 --> 00:00:34.220
currently doing Java development?

00:00:34.460 --> 00:00:39.000
How many people here actually
have JDeveloper currently

00:00:39.000 --> 00:00:41.680
installed on their machine?

00:00:41.760 --> 00:00:43.220
Just a few.

00:00:43.830 --> 00:00:48.350
Because the original thought was for
you to follow what I'm doing on the

00:00:48.350 --> 00:00:51.780
stage and duplicate it on your machines.

00:00:51.900 --> 00:00:57.590
And how many people of you actually have
an Oracle database on your machines?

00:00:57.900 --> 00:01:02.510
Okay, so we expected this might happen.

00:01:02.510 --> 00:01:08.630
So what we did is we basically plugged in
my PowerBook into the network and there's

00:01:08.630 --> 00:01:14.080
a database running on this PowerBook and
I let you access it for those of you

00:01:14.080 --> 00:01:16.480
who will be following step by step.

00:01:17.280 --> 00:01:23.010
But note that since we are doing it
through a Wi-Fi connection and since

00:01:23.010 --> 00:01:29.080
we are using a PowerBook as a server,
it might not perform that well, right?

00:01:29.210 --> 00:01:31.240
So just a head notice.

00:01:31.240 --> 00:01:36.490
Right, so even for those of you who don't
have JDeveloper on your machines,

00:01:36.490 --> 00:01:39.600
I think by looking at
what I'm doing today,

00:01:39.600 --> 00:01:42.580
you should be able to go back
to your office later on today,

00:01:42.580 --> 00:01:46.510
download JDevelooper for free,
install it and run through it.

00:01:46.600 --> 00:01:51.830
And I'll also show you where you can
get step by step instruction for doing

00:01:52.080 --> 00:01:54.880
what I'm doing and doing even more.

00:01:55.620 --> 00:01:58.020
This is our topic today.

00:01:58.050 --> 00:02:02.070
And I'll start by giving you a short
overview of what JDeveloper is.

00:02:02.140 --> 00:02:05.680
JDeveloper is Oracle's
Java development environment,

00:02:05.710 --> 00:02:08.580
but it is more than just a
Java development environment.

00:02:08.580 --> 00:02:13.930
It is basically a development environment
that we use for building database objects

00:02:14.040 --> 00:02:20.320
and creating XML files and XML schemas
and creating web services and creating

00:02:20.320 --> 00:02:25.510
anything that has to do with Java,
as well as creating other stuff.

00:02:25.520 --> 00:02:29.030
And I shall explain later on.

00:02:29.250 --> 00:02:36.020
So it's a single ID that we expect to
be used for any type of development.

00:02:36.040 --> 00:02:40.460
JDeveloper itself is written in Java,
and therefore it runs on a Macintosh or

00:02:40.460 --> 00:02:43.330
any other machine that has Java on it,
which is one of the

00:02:43.370 --> 00:02:44.800
benefits of having Java.

00:02:44.800 --> 00:02:48.460
So we actually don't expect any problems
taking JDeveloper and running it on

00:02:48.500 --> 00:02:50.460
the Intel-based Macintosh machines.

00:02:50.460 --> 00:02:54.860
We probably should try it out this week.

00:02:55.390 --> 00:02:58.000
JDeveloper also supports the
full development lifecycle.

00:02:58.150 --> 00:03:02.060
Some people like to design the
application before they build it,

00:03:02.060 --> 00:03:04.300
which is a strange way of doing stuff.

00:03:04.420 --> 00:03:08.200
But usually it results in better
quality of an application.

00:03:08.300 --> 00:03:12.520
Inside JDeveloper there are UML modelers
that let you design your application.

00:03:12.910 --> 00:03:16.770
There is also a database modeler
that lets you design your database

00:03:16.770 --> 00:03:20.720
structure and create the tables
that you need in your database.

00:03:20.890 --> 00:03:25.800
After modeling,
you can actually generate code.

00:03:25.800 --> 00:03:29.720
The code and the modelers are
synchronized at all times.

00:03:29.860 --> 00:03:32.740
After that,
you go into the coding environment.

00:03:32.810 --> 00:03:38.150
We have a lot of graphical utilities
and helpful things to help your

00:03:38.150 --> 00:03:40.800
development process be more fluent.

00:03:40.800 --> 00:03:45.880
Once you are finished developing,
we have a debugger, tester,

00:03:45.880 --> 00:03:49.800
we integrate with JUnit so
you can do unit testing.

00:03:49.800 --> 00:03:53.090
We integrate with N so you
can build your projects.

00:03:53.100 --> 00:03:58.800
We integrate with CVS so you can do
version management of your files.

00:03:58.800 --> 00:04:01.800
We also support deployment.

00:04:01.800 --> 00:04:06.020
We give you one-click deployment
to Oracle's application server,

00:04:06.020 --> 00:04:08.800
JBoss, Tomcat, or WebLogic.

00:04:08.800 --> 00:04:11.770
Basically, JDevelooper creates
standard J2E applications.

00:04:11.840 --> 00:04:14.650
You can take what we create in
JDevelooper and deploy it to

00:04:14.810 --> 00:04:18.690
any J2E compliant application
server that is out there.

00:04:19.990 --> 00:04:23.020
And that's basically a nice
segue to the second point,

00:04:23.070 --> 00:04:25.570
which talks about the fact
that whatever you create in

00:04:25.570 --> 00:04:27.170
JDeveloper is completely standard.

00:04:27.180 --> 00:04:34.670
We use standard J3, standard XML,
standard HTML.

00:04:34.700 --> 00:04:36.290
Nothing is Oracle proprietary.

00:04:36.380 --> 00:04:41.180
You can choose your application server,
and you can also choose your database.

00:04:41.180 --> 00:04:45.780
So if it happens to be that you
don't have Oracle on your machine,

00:04:45.780 --> 00:04:48.380
but you have MySQL,
you should be able to do the same

00:04:48.460 --> 00:04:51.470
stuff that I'm doing with the
Oracle database using MySQL or any

00:04:51.470 --> 00:04:53.180
other database for that matter.

00:04:53.200 --> 00:04:55.760
So because you're using JDBC, basically.

00:04:55.840 --> 00:04:58.800
As I mentioned before,
we integrate with open source

00:04:58.930 --> 00:05:03.670
standards and open source utilities,
such as JUnit, CVS.

00:05:03.680 --> 00:05:07.230
We have exceptional support
for the STRATs framework that

00:05:07.410 --> 00:05:09.090
you'll experience later on.

00:05:09.200 --> 00:05:13.480
And JDeveloper itself
has an extension API.

00:05:13.480 --> 00:05:17.440
So if there's something we
missed while we built JDeveloper,

00:05:17.730 --> 00:05:21.040
you can always use the extension
API to integrate other capabilities

00:05:21.140 --> 00:05:23.800
and other products into JDeveloper,
add functionality.

00:05:23.800 --> 00:05:29.290
And we have an extension exchange on
our website that lets you download,

00:05:29.340 --> 00:05:32.900
I think, currently about 50
extensions to JDeveloper.

00:05:32.960 --> 00:05:39.190
That do everything from code formatting
to building wireless applications.

00:05:42.070 --> 00:05:49.580
The main focus for us when we develop
JDevelooper is on ease of use while

00:05:49.580 --> 00:05:49.990
you're developing your application.

00:05:50.220 --> 00:05:53.930
So what we are trying to do is
bring sort of the power of a 4GL

00:05:53.930 --> 00:06:00.260
environment into the J2E world,
but still keeping intact the fact

00:06:00.260 --> 00:06:03.650
that you can always access the code.

00:06:03.740 --> 00:06:08.730
So while you'll see me doing a
lot of stuff using visual tools

00:06:08.730 --> 00:06:14.070
and dialogues instead of actually
going and hard-coding Java,

00:06:14.160 --> 00:06:17.500
I can always switch to the code view.

00:06:17.520 --> 00:06:19.860
And you can always go and edit the code.

00:06:20.100 --> 00:06:21.510
The actual Java code.

00:06:21.580 --> 00:06:29.070
So the way that we make everything
simpler for you is by providing you with

00:06:29.100 --> 00:06:31.620
a framework while you're developing.

00:06:31.620 --> 00:06:35.460
And this is what we call the
Oracle Application Development Framework,

00:06:35.480 --> 00:06:36.270
or Oracle ADF.

00:06:39.320 --> 00:06:42.500
Oracle ADF aims to simplify the
way that you build JT application

00:06:42.500 --> 00:06:44.410
by giving you certain utilities.

00:06:44.630 --> 00:06:48.360
There are some principles that we
use when developing this stuff.

00:06:48.480 --> 00:06:50.770
First of all,
what we try to do is provide you with

00:06:50.770 --> 00:06:55.350
solutions to common problems or common
needs when developing a JT application.

00:06:55.460 --> 00:06:58.030
So if you ever developed
a JT application,

00:06:58.040 --> 00:07:00.930
you know that you need, for example,
a layer that will enable you

00:07:01.050 --> 00:07:05.010
to map your object world,
the object that you create

00:07:05.010 --> 00:07:07.650
in the Java language,
to relational tables in

00:07:07.650 --> 00:07:08.960
the relational database.

00:07:08.960 --> 00:07:12.610
Assuming that you are using
a relational database.

00:07:12.820 --> 00:07:16.710
Then after you do this thing,
you might want to use caching

00:07:16.710 --> 00:07:18.620
and persistence solution.

00:07:19.270 --> 00:07:23.120
If you're creating a web application,
you need a framework that will allow you

00:07:23.120 --> 00:07:27.670
to control the flow of the application,
how one page leads to another page

00:07:28.050 --> 00:07:30.100
when you're operating with them.

00:07:30.170 --> 00:07:33.880
If you're creating user interfaces,
you might need a set of user interface

00:07:33.880 --> 00:07:38.180
components that you can just pick up
and use in your application instead

00:07:38.190 --> 00:07:41.400
of building complex UIs on your own.

00:07:41.500 --> 00:08:47.500
[Transcript missing]

00:08:48.080 --> 00:08:53.420
It's not just about providing a solution,
it's also about giving you an

00:08:53.420 --> 00:08:56.500
easy way to use this solution.

00:08:56.660 --> 00:09:02.790
As I said, portability and compatibility
are always important for us.

00:09:03.160 --> 00:09:08.410
ADF can be deployed on any
application server that supports J2E.

00:09:09.160 --> 00:09:13.740
We support different
development approaches.

00:09:13.770 --> 00:09:19.130
Some people prefer to just go
ahead and start coding Java,

00:09:19.250 --> 00:09:20.900
directly access the code.

00:09:21.010 --> 00:09:24.820
Some people would like to first do
modeling and then generate code,

00:09:24.930 --> 00:09:26.650
what we call MDA approach.

00:09:26.770 --> 00:09:32.340
Some other people would like to work with
visual tools and wizards and dialogues.

00:09:32.420 --> 00:09:38.330
Your development team usually comprises
of people from all those areas,

00:09:38.380 --> 00:09:40.140
of those preferences.

00:09:40.140 --> 00:09:43.970
In JDeveloper,
you can use each one of those approaches,

00:09:44.090 --> 00:09:48.160
but everyone works on the same
file from the same environment.

00:09:48.320 --> 00:09:52.340
So if I'm doing a Strats page
flow and I prefer to do it

00:09:52.340 --> 00:09:56.850
visually using drag and drop,
another guy can go to the same

00:09:57.000 --> 00:10:01.830
file I created and edit the
XML file directly if he prefers to.

00:10:02.900 --> 00:10:07.470
The same framework can be used
by different types of developers,

00:10:07.470 --> 00:10:13.500
which is a very important fact for
organizations who have many developers.

00:10:13.510 --> 00:10:15.700
We always keep the white-box approach.

00:10:15.700 --> 00:10:19.660
You can always access the code and look
what's happening behind the scenes.

00:10:22.350 --> 00:10:26.240
ADF is based on the MVC architecture
for building applications.

00:10:26.240 --> 00:10:31.040
MVC architecture separates your
application into three distinct layers,

00:10:31.080 --> 00:10:34.880
which makes development
easier and maintenance easier,

00:10:34.880 --> 00:10:40.380
and makes it easier to plug and
change components without needing

00:10:40.380 --> 00:10:44.170
to change everything in the system.

00:10:44.260 --> 00:10:47.340
So there's the view layer.

00:10:47.360 --> 00:10:48.400
That's the V.

00:10:48.470 --> 00:10:51.400
View layer has to do with the
way that you display data,

00:10:51.430 --> 00:10:55.280
and we support both rich
client as well as web clients.

00:10:55.440 --> 00:10:58.700
So you can build a client
server type application,

00:10:58.710 --> 00:11:02.700
or you can build a web application
accessible through a browser.

00:11:02.730 --> 00:11:04.750
There's the controller,
which is an important

00:11:04.860 --> 00:11:07.870
part for web application,
controls the flow between

00:11:07.890 --> 00:11:10.120
the different pages.

00:11:10.150 --> 00:11:15.430
We basically use Strats,
which is the de facto controller

00:11:15.580 --> 00:11:19.220
for Java server pages in the market.

00:11:19.330 --> 00:11:21.760
And there's the model layer,
which is the layer that does your

00:11:21.760 --> 00:11:24.900
business logic and connects to your data.

00:11:24.900 --> 00:11:29.270
What we did is below the model layer,
we basically created a layer

00:11:29.360 --> 00:11:32.370
called the business services layer.

00:11:32.500 --> 00:11:48.400
[Transcript missing]

00:11:48.840 --> 00:11:51.440
Some people say that EJB are
overhead and they prefer,

00:11:51.440 --> 00:11:54.330
for example,
when they do access to database,

00:11:54.330 --> 00:11:57.750
they take the POJO approach,
where they simply create Java objects

00:11:57.820 --> 00:12:00.090
that access the database directly.

00:12:00.100 --> 00:12:03.160
So you can create
business services in POJO.

00:12:03.160 --> 00:12:06.790
Some people say we want to do
a service-oriented architecture

00:12:06.860 --> 00:12:10.400
and all our business services
are exposed as web services.

00:12:10.400 --> 00:12:13.720
So this is another way to
build a business service.

00:12:14.550 --> 00:12:20.450
And we let you take each one of those and
plug it into the system and use the same

00:12:20.450 --> 00:12:24.250
way and the same development approach
to do the rest of the development.

00:12:28.920 --> 00:12:32.140
So what we'll be doing today.

00:12:32.150 --> 00:12:34.340
Basically,
we'll do a very basic application

00:12:34.500 --> 00:12:40.400
to manage employees and departments,
which is the usual Oracle demo.

00:12:40.400 --> 00:12:44.120
The steps that we'll be doing is first,
we'll create Java classes that

00:12:44.310 --> 00:12:49.370
access the database and do all the
operations against the database.

00:12:49.580 --> 00:12:53.950
We're going to use Oracle TopLink,
which is Oracle's persistent

00:12:54.690 --> 00:12:57.500
solution for POJO objects.

00:12:57.870 --> 00:13:03.080
Then we're going to build a JSF user
interface on top of this layer.

00:13:03.090 --> 00:13:07.780
So create web pages to
allow you to actually access

00:13:07.880 --> 00:13:13.150
the database and see data,
update data, add data.

00:13:13.580 --> 00:13:17.990
To control the flow of the application,
we are going to use Strats,

00:13:18.000 --> 00:13:20.340
an open-source framework.

00:13:20.400 --> 00:13:25.680
If we have enough time,
we will also try to create a

00:13:25.680 --> 00:13:28.780
web service based application.

00:13:28.800 --> 00:13:30.340
I don't know if we will
have enough time at the end.

00:13:30.480 --> 00:13:33.500
If not,
you can come down to the demo booth,

00:13:33.550 --> 00:13:35.950
to the data center area,
and we will show you

00:13:35.990 --> 00:13:37.300
how to do it over there.

00:13:38.590 --> 00:13:40.840
Some words about TopLink.

00:13:40.880 --> 00:13:46.560
TopLink is a way for you to do
object relational and persistence.

00:13:47.000 --> 00:13:56.500
[Transcript missing]

00:13:58.540 --> 00:14:00.760
The nice thing is that
it can do it in two ways.

00:14:01.090 --> 00:14:05.430
One way is to start with existing
tables in the database and just

00:14:05.430 --> 00:14:08.960
create Java objects from those tables.

00:14:09.150 --> 00:14:15.030
The other approach is that you let the
Java people design their own object.

00:14:15.330 --> 00:14:19.140
and you let the database
people design their own tables.

00:14:19.170 --> 00:14:22.690
And then you do what we call the scenario
of "meet in the middle", where you

00:14:22.700 --> 00:14:28.170
map existing Java objects to existing
tables and you tell the Java objects

00:14:28.170 --> 00:14:31.320
how to persist data into the tables.

00:14:33.110 --> 00:14:35.700
This is basically what Toplink does.

00:14:35.700 --> 00:14:42.490
It also does all the persistence stuff,
which means all the create, read, update,

00:14:42.690 --> 00:14:47.100
delete operations on the tables
without you having to write a single

00:14:47.100 --> 00:14:49.390
line of JDBC to access the database.

00:14:49.400 --> 00:14:50.980
It does it automatically for you.

00:14:51.090 --> 00:14:55.780
Manage transaction lockings
and those type of things.

00:14:56.020 --> 00:15:01.000
It has advanced caching mechanisms,
so it can cache data in the middle tier,

00:15:01.000 --> 00:15:04.630
to reduce the number of network traffic
that you do to the server and offset

00:15:04.630 --> 00:15:07.330
load from your database machine.

00:15:07.580 --> 00:15:10.530
There's a lot of tuning options
that we won't go into today,

00:15:10.760 --> 00:15:12.620
which let you control the way it behaves.

00:15:12.620 --> 00:15:17.550
And it's a non-intrusive solution,
which means that it doesn't actually

00:15:17.640 --> 00:15:22.140
go into your Java code and you don't
change anything in your Java code

00:15:22.140 --> 00:15:24.480
in order to persist your data.

00:15:24.940 --> 00:15:29.880
Everything is done
externally in XML files.

00:15:30.760 --> 00:15:32.700
It has a flexible deployment approach.

00:15:32.760 --> 00:15:39.730
You can deploy TopLink as a CMP for EJBs,
you can deploy TopLink as

00:15:39.920 --> 00:15:42.500
a server object,
or you can deploy TopLink in

00:15:42.570 --> 00:15:46.950
a client-server mode,
running on the client,

00:15:46.950 --> 00:15:46.950
accessing the database.

00:15:47.460 --> 00:15:50.300
Another thing we'll do today
is web interface development.

00:15:50.320 --> 00:15:57.190
We'll be using the Visual JSP Editor and
the Visual Strats Editor in JDeveloper

00:15:57.190 --> 00:16:00.290
to do this in a nice and easy way.

00:16:00.610 --> 00:16:03.420
If you don't have the software
on your machine currently,

00:16:03.720 --> 00:16:06.900
this is where you'll be
getting the software later on.

00:16:06.970 --> 00:16:12.210
We have a website called OTN,
the Oracle Technology Network,

00:16:12.210 --> 00:16:15.900
and you can basically download
JDeveloper for free from this website.

00:16:15.900 --> 00:16:19.900
It's the complete version, no time limit,
just go ahead and play with it.

00:16:20.100 --> 00:16:21.580
There are currently two
versions of JDeveloper,

00:16:21.580 --> 00:16:24.240
actually there are more,
but the two relevant versions of

00:16:24.240 --> 00:16:31.060
JDeveloper that are out there is 10.1.2,
which is our current production version,

00:16:31.070 --> 00:16:32.900
which we'll be using today.

00:16:33.030 --> 00:16:34.990
And there's also a preview
of our next version,

00:16:34.990 --> 00:16:38.870
which is called 10.1.3,
but probably should have been called 11,

00:16:38.890 --> 00:16:43.350
because it's a major rehaul
of the interface and a lot

00:16:43.360 --> 00:16:44.710
of new features in there.

00:16:44.900 --> 00:16:48.890
JSF, EJB3,
a lot of other stuff is in there.

00:16:48.900 --> 00:16:48.900
So you can download JDeveloper,
and you can also download

00:16:48.900 --> 00:16:48.900
the Oracle 10g on Mac OS X.

00:16:48.900 --> 00:16:52.710
So you can download both of them
running on the Mac and play with

00:16:52.840 --> 00:16:54.870
them and see how you like them.

00:16:54.950 --> 00:16:57.980
And if you need an Oracle database,
this is the URL to get your

00:16:58.080 --> 00:16:59.690
Oracle database for Macintosh.

00:16:59.920 --> 00:17:00.900
Question?

00:17:00.900 --> 00:17:00.900
Yeah.

00:17:09.200 --> 00:17:13.490
The first link is to the
JDevelooper homepage on OTN.

00:17:13.740 --> 00:17:20.000
So the way that we keep communication
open between us and the developer

00:17:20.000 --> 00:17:22.240
community is through that page,
basically.

00:17:22.380 --> 00:17:28.520
Over there you can get tutorials and
demos and code samples and how-tos

00:17:28.930 --> 00:17:32.160
and all the stuff that we offer,
basically,

00:17:32.310 --> 00:17:36.360
along with a discussion forum where
you can ask questions and get answers,

00:17:36.530 --> 00:17:39.530
hopefully,
and an extension exchange where

00:17:39.530 --> 00:17:43.330
you can get all the extensions
to JDevelooper and more and more.

00:17:43.500 --> 00:17:48.220
So basically you can either write
down the URL or just go to Google and

00:17:48.220 --> 00:17:49.620
do a search for JDevelooper.

00:17:49.730 --> 00:17:52.000
It will take you there as the first link.

00:17:52.110 --> 00:17:55.850
All right,
so let's switch to Demo Machine 2.

00:17:56.100 --> 00:18:12.960
is the developer of the application.

00:18:14.110 --> 00:18:14.110
This is what you should have on your
machine if you want to follow up.

00:18:14.110 --> 00:18:14.110
Start up JDevloper 10.1.2.

00:18:14.110 --> 00:18:14.110
If you have a database on your machine,
you might want to start that one as well.

00:18:14.110 --> 00:18:14.110
I'll start my database.

00:18:34.990 --> 00:18:40.360
and inside JDevelooper
when you first start it up,

00:18:40.380 --> 00:18:47.890
you'll probably see something like that,
which means that you currently don't have

00:18:47.890 --> 00:18:47.890
anything and you have a little welcome
page with all the links to all the

00:18:47.890 --> 00:18:47.890
pages and the information that you need.

00:18:47.890 --> 00:18:47.890
You can probably...

00:18:50.970 --> 00:18:55.340
One thing I can do is get you
all to sit a little closer.

00:18:55.340 --> 00:18:57.330
This is one way.

00:18:57.340 --> 00:19:00.340
I think I actually did
something about the font size.

00:19:00.340 --> 00:19:07.730
If I do application... For the dialogues,
I can't actually do it for the dialogues,

00:19:07.730 --> 00:19:13.810
but I think for the actual code editor...

00:19:14.400 --> 00:19:33.700
[Transcript missing]

00:19:38.070 --> 00:19:41.370
Once your database has started,
you should be able to connect

00:19:41.370 --> 00:19:42.400
to it from JDeveloper.

00:19:42.410 --> 00:19:44.100
If you don't have a
database on your machine,

00:19:44.100 --> 00:19:46.700
this is what you're
basically going to do.

00:19:46.760 --> 00:19:50.600
There's a connection tab that lets you
define connections to various places,

00:19:50.600 --> 00:19:52.100
like your application server.

00:19:52.100 --> 00:19:54.790
So this is where you can define a
connection to the Oracle application

00:19:54.970 --> 00:20:00.040
server or a BEA application server,
and this would let you deploy

00:20:00.120 --> 00:20:01.950
your application easily later on.

00:20:02.130 --> 00:20:06.220
You can access your UDDI registry
to look up web services.

00:20:06.340 --> 00:20:09.600
You're interested in the
database connection tab.

00:20:09.620 --> 00:20:14.300
And if you don't have anything in here,
you basically right-click and

00:20:14.630 --> 00:20:19.150
choose "New Database Connection."

00:20:19.620 --> 00:20:24.260
Click Next and give a nice
name to your database.

00:20:24.290 --> 00:20:29.100
This is going to be the WWDC database.

00:20:29.100 --> 00:20:34.040
Here you can define the type
of JDBC you are going to use.

00:20:34.040 --> 00:20:37.740
I'm going to use the Oracle JDBC,
but you can add JDBC drivers

00:20:37.860 --> 00:20:39.950
for other databases.

00:20:40.510 --> 00:20:42.240
Next, username and password.

00:20:42.240 --> 00:20:42.990
It's very easy here.

00:20:43.060 --> 00:20:46.240
It's HR HR, human resource.

00:20:46.410 --> 00:20:50.070
And also click the
deploy password checkbox.

00:20:50.070 --> 00:20:52.760
It would make it easier to
save you the login screen each

00:20:52.820 --> 00:20:54.280
time you run the application.

00:20:55.010 --> 00:20:57.930
HRHR username and password.

00:20:58.050 --> 00:21:02.980
If you have any problems,
Gary is here from the JDevelooper team.

00:21:03.050 --> 00:21:04.660
He will be trying to help you.

00:21:04.660 --> 00:21:06.420
If you have any problems
following with me,

00:21:06.490 --> 00:21:10.330
just raise your hand and
Gary will try to help you.

00:21:10.450 --> 00:21:15.670
The next step is defining the
database connection to the server.

00:21:15.850 --> 00:21:20.810
You need a hostname.

00:21:20.810 --> 00:21:20.810
I actually have a hostname.

00:21:22.400 --> 00:21:37.100
[Transcript missing]

00:21:39.410 --> 00:21:43.960
So I'll click cancel here,
but keep this form open.

00:21:43.960 --> 00:21:48.580
You'll keep the 1521 here and the
ORCL uppercase over here as default.

00:21:48.600 --> 00:21:52.960
The IP address that
you actually need is--

00:21:57.110 --> 00:22:02.170
206.13.37.55.

00:22:02.170 --> 00:22:08.330
And this will get you connected
to the server machine.

00:22:15.120 --> 00:22:17.780
I'll keep this on the
screen for a second or two.

00:22:18.160 --> 00:22:21.160
Again, remember,
this is not a very powerful machine,

00:22:21.160 --> 00:22:23.860
and I'm hoping that it can
handle the load from the guys

00:22:23.890 --> 00:22:24.990
who actually are following up.

00:22:25.260 --> 00:22:30.590
You can then go to the Test tab,
click Test Connection.

00:22:30.620 --> 00:22:31.760
It should bring up Success.

00:22:31.760 --> 00:22:34.180
If it doesn't bring up Success,
it means that something went

00:22:34.370 --> 00:22:35.700
horribly wrong before that.

00:22:35.700 --> 00:22:37.500
But don't panic.

00:22:37.670 --> 00:22:38.450
Gary is here to help.

00:22:38.520 --> 00:22:44.300
Let me just copy this in case
someone will need it later on.

00:22:45.640 --> 00:22:47.990
Yeah, so...

00:22:57.540 --> 00:23:06.920
is the IP address.

00:23:06.920 --> 00:23:07.310
Write it down somewhere in the
notepad and you can access it.

00:23:09.280 --> 00:23:12.400
Once you have your database connection,
you are basically ready to work.

00:23:12.490 --> 00:23:15.200
Switch back to the application tab.

00:23:15.300 --> 00:23:17.080
The application tab is
basically where you see all the

00:23:17.080 --> 00:23:18.400
components of your application.

00:23:18.420 --> 00:23:21.660
Currently you don't have anything,
so if you actually right-click

00:23:21.860 --> 00:23:25.510
or control-click here,
you are able to choose "New

00:23:25.530 --> 00:23:28.330
Application Workspace".
Application Workspace is a

00:23:28.330 --> 00:23:32.600
way for you to manage multiple
projects under a single roof,

00:23:32.660 --> 00:23:36.500
letting you build projects
that depend on one another.

00:23:36.610 --> 00:23:40.040
Create a new application,
give it a meaningful name,

00:23:40.170 --> 00:23:43.500
like the WWDC demo.

00:23:43.620 --> 00:23:49.000
You can specify an application
prefix if you want to.

00:23:49.000 --> 00:23:52.500
Then you can specify the template
that you are going to use.

00:23:52.620 --> 00:23:56.990
We are not going to use
any template for this run.

00:23:57.150 --> 00:23:59.000
Let me explain the concept.

00:23:59.000 --> 00:24:02.970
The template lets you specify a set
of technologies that you are going

00:24:03.090 --> 00:24:05.600
to use in this specific project.

00:24:05.800 --> 00:24:10.500
For example, as I told you before,
you can use EJBs in JDeveloper,

00:24:10.500 --> 00:24:13.550
or you can use POJOs,
and you can use JSPs,

00:24:13.640 --> 00:24:16.500
and you can use stats,
or you can choose not to use stats.

00:24:16.520 --> 00:24:19.500
JDeveloper has everything in it.

00:24:19.640 --> 00:24:24.580
When you create new stuff,
it would basically show you a new

00:24:24.580 --> 00:24:28.300
gallery of the things that you can use.

00:24:28.590 --> 00:24:32.500
This is a way for you to limit the
number of things that it displays to you,

00:24:32.500 --> 00:24:35.500
to only show you the
things that you care about.

00:24:35.500 --> 00:24:35.500
By choosing "Gallery", you can limit the
number of things that it displays to you,

00:24:35.500 --> 00:24:35.500
to only show you the
things that you care about.

00:24:35.500 --> 00:24:35.500
By choosing "Gallery", you can limit the
number of things that it displays to you,

00:24:35.500 --> 00:24:35.500
to only show you the
things that you care about.

00:24:35.590 --> 00:24:37.500
By choosing "No Template",
you tell it basically:

00:24:37.500 --> 00:24:41.490
show me all the
technologies that you have.

00:24:41.500 --> 00:24:46.500
So we'll choose "No Template", click
"OK", and it creates a project for you.

00:24:46.500 --> 00:24:48.500
And it calls it "Project",
which is not very meaningful,

00:24:48.500 --> 00:24:54.300
so you can go and do "File",
"Rename", and rename the project

00:24:54.400 --> 00:25:00.500
into "Model". Because this is the
model layer for our MVC architecture.

00:25:01.600 --> 00:25:34.300
[Transcript missing]

00:25:34.350 --> 00:25:43.140
Click on Top Link and then on the right.

00:25:43.200 --> 00:25:46.400
This will allow you to
add Top Link components

00:25:46.570 --> 00:25:48.300
to this specific project.

00:25:48.640 --> 00:25:52.940
Under Technology Scope, Top Link,
and then on the right.

00:25:52.990 --> 00:25:58.360
Right-click on the
project and choose New.

00:25:58.930 --> 00:26:06.740
is the founder of Oracle JDeveloper.

00:26:06.740 --> 00:26:15.310
He is the founder of Oracle JDeveloper.

00:26:15.310 --> 00:26:15.310
He is the founder of Oracle JDeveloper.

00:26:15.310 --> 00:26:15.310
He is the founder of Oracle JDeveloper.

00:26:15.310 --> 00:26:15.310
He is the founder of Oracle JDeveloper.

00:26:15.490 --> 00:26:17.840
Click OK, you get a little wizard.

00:26:17.880 --> 00:26:21.040
You go through the motion of
selecting the various things.

00:26:21.050 --> 00:26:26.150
So here you choose the database
connection that you're going to use.

00:26:26.210 --> 00:26:28.900
Then you'll see the list of tables.

00:26:29.160 --> 00:26:36.050
is a developer at ISVs.

00:26:36.110 --> 00:26:37.800
Shay Shemltzer is a developer at ISVs.

00:26:37.800 --> 00:26:37.800
Shay Shemltzer is a developer at ISVs.

00:26:41.570 --> 00:26:55.140
TopLink is a database that finds out
about the structure of the tables,

00:26:55.160 --> 00:27:04.300
and creates two Java classes
that interact with those tables.

00:27:04.320 --> 00:27:08.060
If you double-click on the classes,
you'll see the code.

00:27:08.060 --> 00:27:11.470
On the left side,
you see the list of methods

00:27:11.470 --> 00:27:13.170
that it provides you.

00:27:13.210 --> 00:27:17.740
It gives you a getter and a setter
for each column in the database,

00:27:17.760 --> 00:27:24.150
as well as add methods for collections
that are nested inside objects.

00:27:24.250 --> 00:27:28.760
In the structure pane,
look for a method called

00:27:28.840 --> 00:27:32.410
setLastName and double-click on it.

00:27:32.760 --> 00:27:37.500
This will take you directly into
the setLastName place in the code.

00:27:37.500 --> 00:27:40.890
This is the current
business logic that it does,

00:27:40.990 --> 00:27:42.870
which is not very complex.

00:27:43.260 --> 00:27:50.290
Let's add some business
logic to this method.

00:27:51.310 --> 00:27:53.640
So do something like that.

00:27:53.660 --> 00:27:58.160
Write if and then press Control-Return.

00:27:58.170 --> 00:28:00.570
It automatically completes
the if structure for you.

00:28:00.620 --> 00:28:04.620
JDevelooper comes with code templates,
with existing code templates,

00:28:04.620 --> 00:28:06.740
as well as code templates
that you can add.

00:28:06.770 --> 00:28:11.820
So it's a very easy way for you to
reuse code that you do a lot of times.

00:28:11.920 --> 00:28:14.880
You can basically just
type it and it will pop up.

00:28:14.880 --> 00:28:17.890
OK, so if a last name,
which is the parameter

00:28:17.930 --> 00:28:20.310
that this method gets--

00:28:20.480 --> 00:28:26.760
Click the dot to activate the methods.

00:28:27.340 --> 00:28:31.160
You are looking for the
"Equal ignore case" method.

00:28:31.200 --> 00:28:35.160
Type "Eq" and it will give you that one.

00:28:35.530 --> 00:28:39.080
You can add a name here.

00:28:39.710 --> 00:28:41.600
This is the name of the software.

00:28:41.960 --> 00:28:45.340
You can put your own name here.

00:28:45.830 --> 00:28:49.470
You need to do something
if this is the case.

00:28:49.890 --> 00:28:56.590
Type "sop" which stands for "System
Out Print". Click "Ctrl + Enter" again.

00:28:56.600 --> 00:29:05.130
Here you can write something
like "I got high as input".

00:29:05.810 --> 00:29:09.800
This is a very simple business logic,
but it's just to show you the concept.

00:29:09.890 --> 00:29:12.950
When you write validation
logic or stuff like that,

00:29:12.950 --> 00:29:15.820
you write them in the Java bin,
in the Java world,

00:29:16.210 --> 00:29:20.880
without actually caring about how
I'm going to access the database and

00:29:20.880 --> 00:29:23.800
retrieve the values from the database
and insert them into the database.

00:29:23.870 --> 00:29:26.800
I'm just working in the
object view of stuff.

00:29:26.980 --> 00:29:30.790
You can compile everything just to make
sure that you didn't do any mistakes.

00:29:30.800 --> 00:29:34.670
There's a little compile button up here.

00:29:34.800 --> 00:29:35.800
One of those two.

00:29:35.800 --> 00:29:37.800
One is compile, one is rebuild.

00:29:37.800 --> 00:29:41.780
The next step is to click
on the top link mapping,

00:29:41.780 --> 00:29:46.050
right-click on it and
choose "New Session XML".

00:29:46.330 --> 00:29:49.800
New SessionXML creates the
SessionXML object which basically,

00:29:49.800 --> 00:29:55.590
if you double-click it and click
"Add", just use the default

00:29:55.590 --> 00:29:59.500
name that it provides you,
the SessionXML controls all the

00:29:59.500 --> 00:30:02.960
aspects of how you connect to the
database in terms of managing,

00:30:03.000 --> 00:30:06.940
connection pooling, logging,
caching and stuff like that.

00:30:07.080 --> 00:30:10.700
We won't go too deep into this,
so just create one by clicking the

00:30:10.700 --> 00:30:17.550
"Add" and you can save everything and
close this window by clicking here.

00:30:18.250 --> 00:30:23.580
Click on the TopLink mapping,
right-click on it and choose "Generate

00:30:23.760 --> 00:30:30.350
TopLink deployment descriptor".
The TopLink deployment descriptor is

00:30:30.920 --> 00:30:38.190
basically the XML file that maps all the
Java objects to the specific columns in

00:30:38.190 --> 00:30:41.390
the database and does everything for you.

00:30:41.460 --> 00:30:48.590
Everything was generated for you,
you don't need to change anything.

00:30:48.590 --> 00:30:48.590
If you want to, you can change,
but for this demo, don't.

00:30:50.390 --> 00:30:55.030
Basically, you right-click on the
TopLink mapping and choose "Generate

00:30:55.030 --> 00:30:58.230
TopLink deployment descriptor".

00:30:59.200 --> 00:31:04.970
By now, you should have two classes:
a session object and a

00:31:04.970 --> 00:31:07.400
deployment descriptor XML file.

00:31:07.490 --> 00:31:15.480
Right-click on the department class
and choose "New Sample Java Client".

00:31:16.960 --> 00:31:21.530
The new sample Java client creates
some basic code that you can run by

00:31:21.660 --> 00:31:24.560
clicking on the "Run" icon over here.

00:31:24.770 --> 00:31:27.590
That would access the
database and retrieve all the

00:31:27.700 --> 00:31:31.230
departments using TopLink,
just to verify that the code

00:31:31.610 --> 00:31:33.300
that you did so far works.

00:31:33.490 --> 00:31:36.740
And it would show it up
over here in the log window,

00:31:36.910 --> 00:31:40.410
so you can see the information
coming from the database.

00:31:43.640 --> 00:31:55.940
This is our model layer for our MVC.

00:31:56.030 --> 00:31:58.710
We created some Java objects,
we added business logic,

00:31:58.710 --> 00:32:02.180
and we made sure that they can access
the database and do everything for us.

00:32:02.200 --> 00:32:06.320
The next step is to build some
nice user interface on top of it.

00:32:06.320 --> 00:32:13.700
What you'll be doing now is
standing on your workspace,

00:32:13.700 --> 00:32:15.400
which I call WWDC demo,
right-clicking on it and

00:32:15.400 --> 00:32:17.420
choosing New Project.

00:32:17.440 --> 00:32:24.380
Choose an empty project and you can
name the project "View". This is

00:32:24.480 --> 00:32:27.190
where we'll create our view layer.

00:32:27.270 --> 00:32:30.890
We created a new project called "View".

00:32:31.070 --> 00:32:36.500
By double-clicking on the project,
you can go to the Preferences or

00:32:36.580 --> 00:32:42.060
the Properties of the project,
go to the Technology Scope node,

00:32:42.090 --> 00:32:49.810
and shuttle to the right
Strats and Java Server pages.

00:32:50.100 --> 00:32:51.660
and servers.

00:32:51.660 --> 00:32:57.620
Stats and JSPs will allow you
to create Stats diagram and

00:32:57.690 --> 00:33:01.710
Java server pages in this project.

00:33:02.280 --> 00:33:07.300
Okay, so it actually created a
strats config XML file for you.

00:33:07.300 --> 00:33:12.110
Double-click this strats config
XML file and it will open

00:33:12.590 --> 00:33:14.270
the strats page flow modeler.

00:33:14.320 --> 00:33:18.800
And this is basically
what you're going to see.

00:33:18.800 --> 00:33:19.910
It's an empty page.

00:33:20.030 --> 00:33:23.130
At this stage,
you might want to zoom in just

00:33:23.130 --> 00:33:25.890
to make sure that it is empty.

00:33:25.900 --> 00:33:26.960
Okay, because it is empty.

00:33:26.960 --> 00:33:33.370
And here is basically where I'm going
to define the flow of the application.

00:33:33.370 --> 00:33:36.380
Which page is going to call which page.

00:33:36.380 --> 00:33:41.750
So we'll start by choosing from the
component palette on the right side.

00:33:41.750 --> 00:33:46.640
Choose the data page and click
anywhere in the empty area over here.

00:33:46.640 --> 00:33:49.240
And it will create a data page for you.

00:33:49.310 --> 00:33:51.360
And name this page browse.

00:33:51.360 --> 00:33:54.580
Make sure there's a
slash before the browse.

00:33:55.590 --> 00:33:58.380
Okay, you can actually name
it whatever you want.

00:33:58.460 --> 00:34:01.590
You can even keep the default name.

00:34:01.590 --> 00:34:01.590
It's okay with me.

00:34:02.550 --> 00:34:05.640
For those of you interested
in looking at the code view,

00:34:05.710 --> 00:34:09.860
you can switch to the source
tab and you can see the code

00:34:09.860 --> 00:34:14.720
for the Strats page flow.

00:34:18.560 --> 00:34:22.920
If you want to edit the look
and feel of the browse page,

00:34:22.920 --> 00:34:27.330
just double-click on it and
choose "Create the JSP page".

00:34:27.790 --> 00:34:33.480
Click "OK". This would take you
into the Visual JSP page editor,

00:34:33.480 --> 00:34:37.080
where you can create
HTML pages and JSP pages.

00:34:37.220 --> 00:34:43.130
So over here you can just write
some text like "Welcome to my app".

00:34:43.370 --> 00:34:53.790
You can format the text by doing "head
3" and "head 1". If you right-click here

00:34:53.970 --> 00:35:00.300
and choose "Split Document", you can
see the HTML code behind this stuff.

00:35:00.300 --> 00:35:03.330
You can change the HTML code.

00:35:05.740 --> 00:35:10.570
will be a great example of this.

00:35:10.770 --> 00:35:13.740
If you are the type of person
who writes HTML directly,

00:35:13.750 --> 00:35:14.600
go ahead and do it.

00:35:14.600 --> 00:35:17.600
How about adding some
stylesheet to this page?

00:35:17.600 --> 00:35:21.300
On the component palette,
you can choose the stylesheet,

00:35:21.300 --> 00:35:26.610
the CSS page of components,
and just click the JDevelooper to

00:35:26.740 --> 00:35:28.600
implement a stylesheet on your page.

00:35:28.710 --> 00:35:31.710
Make it look a little nicer, I guess.

00:35:34.620 --> 00:35:40.900
Now I want to show you the
departments of the database.

00:35:40.980 --> 00:35:44.800
I have the department as a
Java object in my other project.

00:35:45.140 --> 00:35:49.470
How can I bring them over into my page?

00:35:49.620 --> 00:35:53.680
You should have here a data control tab,
which is currently empty.

00:35:53.720 --> 00:35:58.330
If you don't have it,
go to "View" and check the

00:35:58.330 --> 00:36:01.700
"Data Control" palette.

00:36:01.770 --> 00:36:05.500
Make sure it's visible on the right side.

00:36:05.600 --> 00:36:14.170
Now I can go to the "Model Project"
and click the "Department" tab.

00:36:15.500 --> 00:36:25.800
Drag and drop JDeveloper into
the Data Control Palette.

00:36:25.800 --> 00:36:25.800
Choose the two values in
the session configuration.

00:36:27.360 --> 00:36:31.900
What I just created is a visual way
to look at the Java class as a data

00:36:31.900 --> 00:36:35.510
component that I can use in my JSP.

00:36:36.370 --> 00:36:39.880
I can see the departments and
I can see the various columns

00:36:40.050 --> 00:36:41.800
that each department has.

00:36:41.870 --> 00:36:47.130
This is basically a method called
"read all departments". It has a return

00:36:47.130 --> 00:36:50.680
value which is a collection of objects.

00:36:50.870 --> 00:36:57.630
So, "Stand on the return". Over here
choose "read only form" in

00:36:57.680 --> 00:37:00.100
the "Drag and drop as" box.

00:37:00.170 --> 00:37:03.700
Drag and drop the return into your page.

00:37:03.800 --> 00:37:05.700
Into an empty area on your page.

00:37:05.770 --> 00:37:10.340
This creates three fields with
three labels to show you the

00:37:10.550 --> 00:37:13.100
information about the departments.

00:37:13.170 --> 00:37:19.480
While still sending out the return,
choose "Navigation" buttons and

00:37:19.480 --> 00:37:25.700
drag them directly after the table,
but inside the red rectangle.

00:37:25.700 --> 00:37:29.000
So, inside the same form object,
just add the buttons.

00:37:29.050 --> 00:37:32.110
And those buttons basically
let me scroll through records,

00:37:32.110 --> 00:37:37.160
moving to the previous next record and
scrolling to the last and first record.

00:37:40.000 --> 00:37:59.800
[Transcript missing]

00:38:02.100 --> 00:38:07.000
This creates a table of employees.

00:38:07.020 --> 00:38:11.000
This is the JSP visual
way of looking at it.

00:38:11.360 --> 00:38:13.000
This is the code version.

00:38:13.000 --> 00:38:17.000
The code version is basically
using expression language

00:38:17.000 --> 00:38:20.170
to bind to our Java classes.

00:38:21.230 --> 00:38:25.100
Our page is ready to be operated.

00:38:25.100 --> 00:38:31.020
Go back to the strats config tab,
go to the browse page,

00:38:31.210 --> 00:38:34.410
right-click on it and choose "Run".

00:38:34.570 --> 00:38:38.020
What this will do is start
compiling everything,

00:38:38.140 --> 00:38:41.500
make sure everything is compiled.

00:38:41.560 --> 00:38:45.700
And then it would start up the embedded
J2E server that comes with JDeveloper.

00:38:45.700 --> 00:38:48.090
So while you're developing
J2E applications and you want

00:38:48.090 --> 00:38:50.200
to test them and run them
and see if everything works,

00:38:50.280 --> 00:38:52.140
you don't have to deploy
to a remote server.

00:38:52.380 --> 00:38:54.090
Everything is inside JDeveloper.

00:38:54.160 --> 00:38:56.980
You don't even have to bother
with the configuration of

00:38:56.980 --> 00:38:58.790
deployment descriptor files.

00:38:58.860 --> 00:39:02.560
You just click "Run" and it
automatically invokes the

00:39:02.560 --> 00:39:08.510
J2E container and goes to your page.

00:39:08.920 --> 00:39:10.900
I'm guessing it won't
find the IP address,

00:39:10.900 --> 00:39:16.350
so let me just change
here the IP address to...

00:39:16.600 --> 00:39:24.100
[Transcript missing]

00:39:26.700 --> 00:39:43.200
[Transcript missing]

00:39:44.080 --> 00:39:45.920
This is a basic browser application.

00:39:45.960 --> 00:39:47.980
How much code did I need to write?

00:39:48.270 --> 00:39:49.680
Nothing so far.

00:39:49.800 --> 00:39:51.000
Everything is drag and drop.

00:39:51.140 --> 00:39:54.670
Behind the scenes,
a lot of Java code was created for me.

00:39:54.760 --> 00:39:58.000
But we give you a nicer way to
do it instead of just coding.

00:39:58.000 --> 00:40:00.950
You have this application
which is very nice,

00:40:00.950 --> 00:40:03.000
but it only lets you see data.

00:40:03.000 --> 00:40:06.710
You also want to be able to
insert and update information.

00:40:06.930 --> 00:40:08.790
So, let's do it.

00:40:08.790 --> 00:40:12.270
Let's add another data page
to our Strats page flow.

00:40:12.420 --> 00:40:19.120
So, click Data Page, click an empty area,
and call this page the Edit Page,

00:40:19.120 --> 00:40:22.850
with a slash at the beginning.

00:40:22.850 --> 00:40:22.860
Just one slash.

00:40:24.210 --> 00:40:30.170
Double-click the Edit page to
take you to the JSP Visual Editor.

00:40:30.800 --> 00:41:29.300
[Transcript missing]

00:41:29.900 --> 00:41:33.260
So now we know that from the edit page
we can go back to the browse page.

00:41:33.300 --> 00:41:35.050
But we also want to go
the other way around.

00:41:35.140 --> 00:41:38.800
We want to be able to go from the
browse page and create things.

00:41:38.800 --> 00:41:41.480
So click on the browse page.

00:41:42.320 --> 00:41:45.960
Let's add the operation
for creating an employee.

00:41:46.150 --> 00:41:55.040
If you expand the employee object,
you'll see the operations

00:41:55.080 --> 00:41:56.790
for the employee.

00:41:57.380 --> 00:42:01.370
Click the Create button and
drag and drop the Create into

00:42:01.390 --> 00:42:03.240
this empty space right here.

00:42:03.590 --> 00:42:05.460
There's an empty cell here.

00:42:05.540 --> 00:42:09.010
And it will basically create
a button for you that enables

00:42:09.010 --> 00:42:10.930
you to create a new employee.

00:42:13.220 --> 00:42:16.900
This will invoke the create operation.

00:42:16.960 --> 00:42:20.340
The next step is optional.

00:42:20.400 --> 00:42:30.670
Click on the lowest left cell and
go into Design - Table - Split Cell.

00:42:30.850 --> 00:42:33.220
and click OK.

00:42:33.460 --> 00:42:36.750
This creates another cell in your table.

00:42:37.310 --> 00:42:42.800
This time in the operations choose
the setCurrent row with key.

00:42:42.800 --> 00:42:46.480
It's the first thing that looks a little
differently than the other operation.

00:42:47.280 --> 00:42:52.510
Choose findRowLink,
so it will be embedded as a link,

00:42:52.600 --> 00:42:53.760
not as a button.

00:42:53.830 --> 00:43:00.000
And drag and drop it into this little
empty cell that you just created.

00:43:00.100 --> 00:43:03.380
So if you saw the
application before that,

00:43:03.380 --> 00:43:04.800
we basically had many employees.

00:43:04.870 --> 00:43:07.890
And I want to be able to select
a specific employee from the

00:43:08.050 --> 00:43:11.600
multi-record table and edit
the details of this employee.

00:43:11.600 --> 00:43:14.540
And this is basically what I did now,
is I just specified that I'm

00:43:14.620 --> 00:43:19.200
going to choose a specific row
in this multi-record table.

00:43:19.350 --> 00:43:21.200
And it created this link.

00:43:21.340 --> 00:43:25.070
When you're standing on the link,
you can actually see the href or

00:43:25.070 --> 00:43:27.200
the URL that it's going to call.

00:43:27.200 --> 00:43:31.870
You need to go to the end of
the URL and specify the event.

00:43:32.100 --> 00:43:34.000
So you do ampersand event.

00:43:34.000 --> 00:43:38.000
And you do ampersand event = edit.

00:43:38.000 --> 00:43:41.070
At the end of everything though.

00:43:41.730 --> 00:43:45.860
This basically tells our strats
diagram that in the event of

00:43:46.080 --> 00:43:49.690
someone clicking this link,
I'm going to invoke the edit operation.

00:43:49.740 --> 00:43:53.470
So let's go back to the strats page flow.

00:43:54.170 --> 00:44:02.890
Add a forward link from the Browse
page to the Edit page in the event

00:44:02.970 --> 00:44:06.100
of someone clicking the Edit.

00:44:06.390 --> 00:44:10.100
Make sure uppercase and
lowercase are important here.

00:44:10.100 --> 00:44:15.480
The name of the link should be
"edit". Do another forward link from

00:44:15.740 --> 00:44:18.100
the Browse page to the Edit page.

00:44:18.100 --> 00:44:28.100
Make sure the name of the link should
be "edit". Complete the application.

00:44:28.120 --> 00:44:31.100
You have two pages and
navigation built between them.

00:44:31.100 --> 00:44:36.070
You can do other stuff on your machine.

00:44:36.120 --> 00:44:45.100
You can do things like design a table,
split cells, add two more empty cells,

00:44:45.100 --> 00:44:50.050
in order for you to be able
to ClickForm operation,

00:44:50.120 --> 00:44:52.530
the commit operation.

00:44:52.700 --> 00:44:59.500
[Transcript missing]

00:45:03.660 --> 00:45:12.250
is a great developer for in-house
developers and developers at ISVs.

00:45:12.250 --> 00:45:19.610
Shay Shemltzer is a great
developer for in-house developers

00:45:19.610 --> 00:45:22.780
and developers at ISVs.

00:45:22.780 --> 00:45:25.030
Shay Shemltzer is a great
developer for in-house developers

00:45:25.030 --> 00:45:25.030
and developers at ISVs.

00:45:27.600 --> 00:45:30.880
If you're interested,
I can show you later on how to

00:45:30.880 --> 00:45:33.030
make sure it won't pop up this.

00:45:33.130 --> 00:45:35.120
So now I have my page.

00:45:35.180 --> 00:45:39.680
I can actually create a new employee
by pressing the create button.

00:45:39.750 --> 00:45:42.070
And then I can insert some information.

00:45:42.070 --> 00:45:45.510
So you can insert whatever
information you want.

00:45:45.860 --> 00:46:01.030
Employee ID: 104 First name:
Shay Hire date: 2004-03-03 Job ID:

00:46:01.030 --> 00:46:09.540
ad_vp Last name: Shay Phone number:
650-555555

00:46:11.210 --> 00:46:14.760
When you click "Submit",
it actually saves the data.

00:46:14.870 --> 00:46:17.450
By the way, if you remember,
at the beginning of the session,

00:46:17.450 --> 00:46:22.760
we actually did some business logic
that we added to the set last name.

00:46:22.830 --> 00:46:25.160
So if the last name equals
"shy", we did something.

00:46:25.270 --> 00:46:29.040
And you can actually see the
results over here at the log window.

00:46:29.150 --> 00:46:30.960
It actually popped up the message.

00:46:31.050 --> 00:46:34.180
So the business logic that you
created in your model layer was

00:46:34.180 --> 00:46:35.640
invoked at the correct place.

00:46:35.640 --> 00:46:39.390
And probably you have a more complex
business logic in your application,

00:46:39.500 --> 00:46:40.840
but it just works.

00:46:42.710 --> 00:46:45.340
If you want to edit the
details of an employee,

00:46:45.340 --> 00:46:50.480
click on the details and you can
edit the last name over here.

00:46:50.660 --> 00:46:52.890
Click and it works.

00:46:53.020 --> 00:46:55.900
You can commit the changes
or roll back the changes.

00:46:55.900 --> 00:46:57.300
Let's roll back.

00:46:57.370 --> 00:46:59.530
Data has disappeared.

00:46:59.900 --> 00:47:03.960
Although you browsed
through various pages,

00:47:03.960 --> 00:47:08.380
moved back and forward using stats,
transaction management was completely

00:47:08.380 --> 00:47:11.200
unharmed and everything was done for you.

00:47:11.830 --> 00:47:15.510
This is how we do
J2A development in JDevelooper.

00:47:15.900 --> 00:47:22.500
Visual approach, drag and drop,
very easy to do.

00:47:23.390 --> 00:47:27.660
What I want to do in the
remaining time is I want to try

00:47:27.750 --> 00:47:32.270
and build a similar application,
but this time I'm going to try and

00:47:32.270 --> 00:47:35.300
use a web service as the data source.

00:47:35.300 --> 00:47:38.640
I'm not actually sure if the
network connection here to

00:47:38.640 --> 00:47:40.500
the internet actually works.

00:47:40.590 --> 00:47:46.930
I'm going to do a find web service on my
UDDI repository and I'm going to look for

00:47:46.960 --> 00:47:50.490
a web service with the name "airport".

00:47:51.720 --> 00:47:56.490
This is a Microsoft UDDI repository.

00:47:56.830 --> 00:48:00.470
It looks up all the web services
that are on this repository,

00:48:00.600 --> 00:48:04.390
hopefully finding one
that is called "AirPold".

00:48:06.700 --> 00:48:13.300
I'm not sure it's actually working here,
but I'll try it.

00:48:19.290 --> 00:48:26.120
The concept is that just as I created
a class to access the database,

00:48:26.160 --> 00:48:28.640
I can create a class to
access the web service.

00:48:28.710 --> 00:48:37.430
I can embed this class into my
JDeveloper and use it in my application.

00:48:37.680 --> 00:48:46.870
This session will be valuable
for in-house developers

00:48:46.870 --> 00:48:46.870
and developers at ISVs.

00:48:46.870 --> 00:48:46.870
Shay Shemltzer

00:48:50.500 --> 00:48:58.240
Let's do something else instead.

00:48:58.280 --> 00:49:00.500
Instead of showing you how to
use an existing web service,

00:49:00.500 --> 00:49:05.220
let me show you how easy it is to
create a web service of your own.

00:49:05.220 --> 00:49:07.770
You can create a new application.

00:49:12.510 --> 00:49:18.150
is the founder of Oracle JDeveloper.

00:49:18.160 --> 00:49:24.160
He is the founder of Oracle JDeveloper.

00:49:24.160 --> 00:49:28.240
He is the founder of Oracle JDeveloper.

00:49:28.240 --> 00:49:28.240
He is the founder of Oracle JDeveloper.

00:49:28.240 --> 00:49:28.240
He is the founder of Oracle JDeveloper.

00:49:29.110 --> 00:49:33.810
and let's add some method here.

00:49:33.810 --> 00:49:34.880
So public string.

00:49:36.300 --> 00:49:44.230
will say hello, which actually receives a
string variable call name.

00:49:46.600 --> 00:49:54.000
[Transcript missing]

00:49:56.110 --> 00:50:02.880
This is your "Hello
World" example in Java.

00:50:04.750 --> 00:50:13.290
Now I want to expose this
complex business logic as a web

00:50:13.370 --> 00:50:16.700
service for other people to use.

00:50:16.700 --> 00:50:21.990
Right-click on the class and
I have the ability to create a

00:50:21.990 --> 00:50:25.170
J2E web service from this class.

00:50:25.840 --> 00:50:32.330
Once I created this web service,
it actually went ahead and created,

00:50:32.330 --> 00:50:37.000
if you click on the web service here,
it created the WSDL for me.

00:50:37.000 --> 00:50:38.560
So if you know anything
about web services,

00:50:38.560 --> 00:50:44.020
it's an easy way to communicate between
processes and functions that are written

00:50:44.100 --> 00:50:47.550
in any language running on any system.

00:50:48.200 --> 00:51:07.500
[Transcript missing]

00:51:10.590 --> 00:51:15.130
This takes the web service and
deploys it to the Oracle application

00:51:15.130 --> 00:51:17.900
server inside my machine.

00:51:18.070 --> 00:51:22.500
It gives me a URL for
accessing this web service.

00:51:22.500 --> 00:51:26.170
Let's copy the URL.

00:51:29.810 --> 00:51:37.470
will probably change the
IP address again to 127.0.0.1.

00:51:39.000 --> 00:51:41.800
This is a testing harness
for my web service.

00:51:41.800 --> 00:51:46.000
I can invoke the say hello,
pass a parameter,

00:51:47.000 --> 00:52:16.500
[Transcript missing]

00:52:17.120 --> 00:52:22.040
This was another aspect of JDeveloper,
the ability to create web services

00:52:22.140 --> 00:52:26.530
and use them in your application.

00:52:29.240 --> 00:52:31.510
What else can I show you?

00:52:31.820 --> 00:52:34.250
Any questions so far?

00:52:43.300 --> 00:52:47.020
So if you click on the
web service over here,

00:52:47.020 --> 00:52:48.200
you have the WSDL.

00:52:48.200 --> 00:52:49.180
It doesn't matter.

00:52:49.180 --> 00:52:52.790
Over here on the web service,
right click and choose Run.

00:52:53.940 --> 00:52:56.210
This basically takes the WSDL,
takes the JAR,

00:52:56.300 --> 00:52:59.200
basically gets the JAR file,
packages everything and deploys

00:52:59.290 --> 00:53:01.100
it to the embedded J2E server.

00:53:01.250 --> 00:53:05.610
On the log window,
you'll have a URL that you can

00:53:05.610 --> 00:53:09.090
copy and paste on your machine.

00:53:09.660 --> 00:53:15.610
and this would bring up the
page to test your web service.

00:53:17.730 --> 00:53:20.390
You can try adding more
parameters to your web service

00:53:20.390 --> 00:53:22.940
and try to run it that way.

00:53:30.500 --> 00:53:36.670
Yeah, so if I copy this one, pop this up.

00:53:36.700 --> 00:53:49.200
[Transcript missing]

00:53:50.040 --> 00:53:54.900
So you can actually click the "Say
Hello." This pops up just a screen that

00:53:54.900 --> 00:53:58.190
knows how to activate your web service.

00:53:59.400 --> 00:54:02.970
is a great example of this.

00:54:03.000 --> 00:54:09.900
You can see the results of
your web service as the return

00:54:09.900 --> 00:54:13.730
value of your SOAP message.

00:54:14.600 --> 00:54:27.800
[Transcript missing]

00:54:28.200 --> 00:54:32.900
If you're a company that
produces a utility to create

00:54:32.900 --> 00:54:40.270
PDFs from Word documents,
you can have a web service interface

00:54:40.270 --> 00:54:42.100
to your utility and expose it.

00:54:42.100 --> 00:54:44.990
You can charge people for
using the web service.

00:54:45.100 --> 00:54:47.820
It's also very powerful in-house.

00:54:48.100 --> 00:54:53.100
If you have various departments in
your organization doing various things,

00:54:53.350 --> 00:54:58.030
you can use the utility to
create PDFs from your database.

00:54:58.120 --> 00:55:06.100
You can also use the utility to
create PDFs from your database.

00:55:06.100 --> 00:55:10.140
Expose it as a web service.

00:55:13.600 --> 00:55:16.180
Okay.

00:55:17.010 --> 00:55:19.440
While we're here,
I'll show you just a little bit of

00:55:19.520 --> 00:55:26.710
JDeveloper 10.1.3 just to give you a
taste of how it differs from 10.1.2 in

00:55:26.780 --> 00:55:28.400
terms of look and feel and functionality.

00:55:28.470 --> 00:55:31.940
In 10.1.3,
I'm popping up the preview version that

00:55:31.960 --> 00:55:34.160
you can currently download from OTN.

00:55:34.180 --> 00:55:39.380
One of our main focus areas was
improving coder productivity.

00:55:39.380 --> 00:55:43.190
So in 10.1.2,
you saw how I do everything visually.

00:55:43.610 --> 00:55:46.750
But when you actually go and
you develop a project beyond

00:55:46.750 --> 00:55:49.960
just doing things visually,
at some point you'll have to delve

00:55:49.960 --> 00:55:51.910
into the code and do some changes.

00:55:55.560 --> 00:56:01.900
We wanted to make sure that even those
types of changes would be easy to do.

00:56:01.900 --> 00:56:10.300
So,
let's create a new application over here.

00:56:10.300 --> 00:56:13.090
Call it 10.1.3 demo.

00:56:21.670 --> 00:56:23.600
Let's get a new class.

00:56:23.600 --> 00:56:33.370
Let's call this class,
that would be my dog class.

00:56:37.720 --> 00:56:41.480
One thing you should see out
of the box is that the whole

00:56:41.650 --> 00:56:44.100
user interface has been revised.

00:56:44.120 --> 00:56:47.920
It includes the way that you can
double-click a tab to maximize the

00:56:47.920 --> 00:56:49.940
area so you can see more things.

00:56:49.950 --> 00:56:53.440
This works for every area of your screen.

00:56:53.440 --> 00:56:59.160
You can click the structure window,
you can click the application navigator.

00:57:00.420 --> 00:57:06.700
Let's define a couple of variables,
like a private string name for the dog

00:57:06.710 --> 00:57:12.900
and also a private int age for the dog.

00:57:13.230 --> 00:57:17.550
Let me try and increase the font so
you'll be able to see more because

00:57:17.550 --> 00:57:21.000
this is actually a coding demo.

00:57:21.120 --> 00:57:24.100
It would be nice for you to be
able to see some of the stuff.

00:57:24.100 --> 00:57:26.790
France.

00:57:33.760 --> 00:57:37.700
What you can see now is that
the name and age are grayed out.

00:57:37.700 --> 00:57:41.700
If you compare them, for example,
to the string.

00:57:41.700 --> 00:57:45.530
And if you actually stand on the line,
you'll see a little

00:57:45.800 --> 00:57:47.700
light bulb on the side.

00:57:47.700 --> 00:57:50.710
And if you click on it,
it will tell you this is an unused

00:57:50.980 --> 00:57:52.660
parameter or unused variable.

00:57:52.950 --> 00:57:55.670
Do you want to remove it?

00:57:55.710 --> 00:57:57.660
And you can choose to
remove it if you want to.

00:57:57.720 --> 00:58:01.360
I actually do want to use them,
so let's right-click over

00:58:01.360 --> 00:58:05.050
here generate accessos.

00:58:05.400 --> 00:58:11.590
This generates setters and getters for
my two parameters and now they are used

00:58:11.740 --> 00:58:13.700
so they are not grayed out anymore.

00:58:13.760 --> 00:58:17.090
I can now add another method,
for example,

00:58:17.090 --> 00:58:25.840
which will do public string say hello and

00:58:33.810 --> 00:58:39.300
is a great developer.

00:58:39.430 --> 00:58:45.360
He is a great developer.

00:58:45.430 --> 00:58:50.560
He is a great developer.

00:58:50.560 --> 00:58:50.560
He is a great developer.

00:58:50.560 --> 00:58:50.560
He is a great developer.

00:58:50.990 --> 00:58:52.900
This is a very good class.

00:58:52.900 --> 00:58:56.300
I can use it as an
interface for other classes.

00:58:56.440 --> 00:59:05.060
Right-click over here and choose
Refactor and say Extract Interface.

00:59:05.120 --> 00:59:09.010
Call this interface
the I-Animal interface.

00:59:09.700 --> 00:59:34.800
[Transcript missing]

00:59:35.810 --> 00:59:39.650
So now I can actually go and say,
that's very nice,

00:59:39.820 --> 00:59:42.780
let's create another class.

00:59:42.840 --> 00:59:46.770
Let's create the class cat,
the cat class.

00:59:51.860 --> 00:59:56.800
Let's tell this class that it
actually implements an interface.

00:59:56.800 --> 01:00:01.800
I didn't save everything,
so I probably should save everything.

01:00:01.970 --> 01:00:08.950
Tools, implement interface,
and add there my apple, my package,

01:00:08.990 --> 01:00:13.800
I have the animal interface,
and everything was generated for me.

01:00:14.000 --> 01:00:16.970
And then at some point I say,
it doesn't make sense

01:00:16.970 --> 01:00:18.760
for animals to say hello.

01:00:18.970 --> 01:00:21.780
They don't say hello.

01:00:21.840 --> 01:00:23.800
So I actually want to rename this method.

01:00:23.800 --> 01:00:31.900
So I can just right-click on it and
say refactor rename and say speak,

01:00:32.240 --> 01:00:33.720
because animals can't speak, of course.

01:00:33.810 --> 01:00:38.510
So I click speak and I have
the preview checked here.

01:00:39.730 --> 01:00:43.700
And it actually shows me if
I change it in the interface,

01:00:43.700 --> 01:00:45.950
where else it should be changed.

01:00:45.980 --> 01:00:50.030
So it should be changed in the cat
class as well as in the dog class.

01:00:50.040 --> 01:00:53.220
And if I'm fine with that,
I can just tell it, okay,

01:00:53.390 --> 01:00:54.830
run ahead and change it.

01:00:55.250 --> 01:00:59.600
And if you go to the cat class,
it now says speak over here.

01:00:59.600 --> 01:01:03.080
And if you go to the dog class,
it says speak over here.

01:01:03.250 --> 01:01:06.370
And if you find out,
actually this is not what I wanted,

01:01:06.470 --> 01:01:07.600
I want to go back.

01:01:07.740 --> 01:01:08.900
You just go and you do undo.

01:01:09.720 --> 01:01:14.030
and it undoes the changes
everywhere for you.

01:01:15.300 --> 01:01:20.320
This is refactoring,
which is a very strong

01:01:20.320 --> 01:01:22.400
way to organize your code.

01:01:22.500 --> 01:01:26.740
Refactoring is defined as changing the
structure of the code without influencing

01:01:26.770 --> 01:01:28.260
the functionality of the code.

01:01:28.310 --> 01:01:32.920
It makes it very easy to break out parts
of your code and make it more usable.

01:01:32.980 --> 01:01:36.230
For example,
if say hello actually got a parameter.

01:01:36.350 --> 01:01:41.010
Suppose I want to have a
parameter for this stuff.

01:01:41.690 --> 01:01:43.000
Hello.

01:01:45.240 --> 01:01:46.540
Click over here.

01:01:46.540 --> 01:01:52.680
And I can say introduce parameter.

01:02:06.500 --> 01:02:24.300
[Transcript missing]

01:02:24.900 --> 01:02:36.570
This session will be valuable
for in-house developers

01:02:36.570 --> 01:02:36.570
and developers at ISVs.

01:02:36.570 --> 01:02:36.570
Shay Shemltzer

01:02:37.200 --> 01:02:57.300
[Transcript missing]

01:02:58.720 --> 01:03:04.670
and actually, if I take those two things,
I would like to have...

01:03:07.700 --> 01:03:15.890
I would like to refactor them into
a variable that is called greeting.

01:03:18.830 --> 01:03:22.480
So now I have a greeting that
is consistent of those two.

01:03:22.500 --> 01:03:25.740
So you see how easy it is to
take parts and move it out.

01:03:25.990 --> 01:03:27.850
Other stuff that you can do is,
for example,

01:03:28.000 --> 01:03:30.120
we have dynamic code templates now.

01:03:30.120 --> 01:03:35.020
So if you type, for example,
a tally and press return enter,

01:03:35.020 --> 01:03:41.580
you get a loop, an i, and for i loop,
that you can actually change.

01:03:41.580 --> 01:03:45.280
So you can go, I don't want to call it i,
I want to call it counter,

01:03:45.940 --> 01:03:49.960
and then I'm going to run
all the way to the dog size,

01:03:49.960 --> 01:03:52.290
and when you click,
it changes everything in the

01:03:52.290 --> 01:03:53.750
loop for you automatically.

01:03:53.810 --> 01:03:56.920
And you can define your
own templates like this.

01:03:56.920 --> 01:03:59.830
So there's, for example,
the connection stuff that

01:04:00.230 --> 01:04:03.800
automatically creates a
JDBC connection for you in your class.

01:04:03.860 --> 01:04:06.430
And then maybe you say, hey,
that's very nice.

01:04:06.440 --> 01:04:11.810
Maybe I should take...
Let's remove this part.

01:04:11.900 --> 01:04:13.980
Okay.

01:04:18.680 --> 01:04:31.630
This is a great way to build a
Java application using JDeveloper.

01:04:31.880 --> 01:04:34.200
Refactoring is one of
the features of the code.

01:04:34.290 --> 01:04:37.600
Better integration with CVS.

01:04:37.710 --> 01:04:38.800
JSF support.

01:04:38.800 --> 01:04:44.160
If previously we did JSP page
editing in JDevelooper 10.1.3,

01:04:44.240 --> 01:04:49.360
you can also go to the web tier
and create JSF pages using a

01:04:49.360 --> 01:04:57.700
visual JSF page layout editor,
as well as a visual way to

01:04:58.230 --> 01:05:02.360
manage the JSF page flow,
or basically the faces config file.

01:05:02.400 --> 01:05:05.400
There are a lot of other
features in 10.1.3.

01:05:05.400 --> 01:05:08.370
As I said,
it should probably be called 11.

01:05:08.540 --> 01:05:14.790
And this is,
can we switch back to the slides now?

01:05:15.650 --> 01:05:17.830
This is the demo I wanted to show you.

01:05:17.830 --> 01:05:20.720
If you missed anything or if
you didn't have your machine

01:05:20.720 --> 01:05:26.000
ready here to follow with me,
you can just go to this URL over here

01:05:26.000 --> 01:05:27.880
to the JDevelooper homepage on OTN.

01:05:27.960 --> 01:05:33.440
There's a link there to something called
the ADF Workshop Top Link version.

01:05:33.440 --> 01:05:37.370
This basically takes you to the
same steps I did on the stage with

01:05:37.430 --> 01:05:41.850
screenshots and everything in there
for you to follow step by step.

01:05:42.640 --> 01:05:44.540
There are many other tutorials in there.

01:05:44.540 --> 01:05:46.870
If you want to do more
web services stuff,

01:05:46.890 --> 01:05:48.060
it's also there.

01:05:48.070 --> 01:05:49.540
That's it.

01:05:49.540 --> 01:05:51.070
So what should be your next step?

01:05:51.210 --> 01:05:54.440
Go to otn.oracle.com,
download the software, free download,

01:05:54.440 --> 01:05:56.330
complete version on your machine.

01:05:56.340 --> 01:06:00.140
Follow the tutorials, demos,
white papers, sample extensions.

01:06:00.140 --> 01:06:02.600
If you have any questions,
you can ask them on the

01:06:02.600 --> 01:06:03.970
discussion forum on OTN.

01:06:04.290 --> 01:06:07.540
And you might want to
join our Java newsletter,

01:06:07.640 --> 01:06:12.320
a monthly newsletter that goes
out to our Java developers.

01:06:12.640 --> 01:06:15.300
It keeps you up to date on the
latest things that we added to the

01:06:15.430 --> 01:06:19.160
product and the latest how-tos,
articles and other stuff.

01:06:19.160 --> 01:06:20.030
And that's it.

01:06:20.120 --> 01:06:21.120
Any questions?

01:06:27.300 --> 01:06:42.600
[Transcript missing]

01:06:45.240 --> 01:06:46.540
All right.

01:06:46.580 --> 01:06:49.200
So if you want to see
more about JDeveloper,

01:06:49.320 --> 01:06:51.550
see other types of development,
see JB development,

01:06:51.560 --> 01:06:54.720
how it's done in JDeveloper,
see web services development,

01:06:54.720 --> 01:06:58.960
see other things,
just come down to the data center.

01:06:58.960 --> 01:07:00.610
We have a JDevelooper booth over there.

01:07:00.840 --> 01:07:02.740
Thank you very much for joining me today.

01:07:02.740 --> 01:07:04.460
Hope to see you soon.