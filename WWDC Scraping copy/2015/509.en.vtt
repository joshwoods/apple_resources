WEBVTT

00:00:26.516 --> 00:00:33.896
[ Applause ]

00:00:34.396 --> 00:00:36.676
>> CONRAD SHULTZ: Hi,
my name is Conrad Shultz

00:00:36.676 --> 00:00:39.096
and I'm an engineer on
the Safari and WebKit team

00:00:39.306 --> 00:00:44.216
and this is Session 509,
Seamless Linking to Your App.

00:00:44.746 --> 00:00:48.716
So, if you're here at WWDC, you
almost certainly have an app

00:00:48.976 --> 00:00:51.776
and odds are you have
a website for that app.

00:00:52.106 --> 00:00:55.116
So a quick show of hands, how
many of you have a website

00:00:55.116 --> 00:00:58.926
that allows users to access
some of the same content

00:00:58.926 --> 00:01:01.726
or functionality as in your app?

00:01:02.066 --> 00:01:04.186
Great. This talk is for you.

00:01:06.766 --> 00:01:11.986
So we are going to talk about
how we can tear down the walls

00:01:12.356 --> 00:01:14.326
between your app
and your website

00:01:14.686 --> 00:01:17.346
and create a tight
association between them.

00:01:17.596 --> 00:01:20.406
As an example of what we
are going to talk about,

00:01:20.706 --> 00:01:23.876
I would like to begin
with a demo of an app

00:01:23.916 --> 00:01:26.126
that you probably have
installed on your iPhone

00:01:26.126 --> 00:01:29.486
or iPad right now, the WWDC app.

00:01:33.076 --> 00:01:36.136
So here I have a message
from my colleague, Jonathan,

00:01:36.586 --> 00:01:38.456
telling me to check
out a keynote.

00:01:38.866 --> 00:01:40.266
And that sounds like
a good idea,

00:01:40.266 --> 00:01:44.886
and I have the WWDC app
installed on this iPad.

00:01:45.496 --> 00:01:47.746
And I see this is a web link

00:01:47.746 --> 00:01:50.006
so it will probably
still open in Safari.

00:01:50.086 --> 00:01:52.336
Let's go ahead and tap on it.

00:01:52.336 --> 00:01:56.816
And, huh, that's pretty cool, it
took me right to the WWDC app.

00:01:57.466 --> 00:01:58.176
Maybe you missed that.

00:01:58.176 --> 00:01:58.926
Let's do that again.

00:01:58.926 --> 00:02:02.896
I will go ahead and tap on back
to messages in the upper left.

00:02:02.896 --> 00:02:06.556
I see this is just a
regular HTTPS link going

00:02:06.556 --> 00:02:11.186
to Developer.Apple.com,
and I tap on it, and, boom!

00:02:11.426 --> 00:02:14.166
Right to the WWDC app,
right to the keynote.

00:02:14.416 --> 00:02:16.026
No ping ponging through Safari.

00:02:16.536 --> 00:02:17.316
It's magic!

00:02:18.516 --> 00:02:24.936
[ Applause ]

00:02:25.436 --> 00:02:28.326
So we are going to talk
about three cool technologies

00:02:28.546 --> 00:02:30.296
to help you tear
down those walls

00:02:30.296 --> 00:02:31.776
between your app
and your website.

00:02:33.006 --> 00:02:36.106
First, the magic you
just saw in the demo,

00:02:36.356 --> 00:02:39.176
where the WWDC app
opened to the right place

00:02:39.346 --> 00:02:43.586
when a regular link was tapped.

00:02:43.956 --> 00:02:47.936
Next, we are going to talk
about Smart App Banners,

00:02:48.196 --> 00:02:50.536
which allow users
to discover your app

00:02:50.676 --> 00:02:51.806
when they visit your website.

00:02:53.616 --> 00:02:57.326
Finally, shared web credentials,
which allows your app

00:02:57.466 --> 00:03:01.396
to access Safari-saved passwords
and, therefore, make logging

00:03:01.396 --> 00:03:03.636
into your app a breeze
for your users.

00:03:04.326 --> 00:03:06.296
To start us off, I would
like to invite my colleague,

00:03:06.296 --> 00:03:09.706
Jonathan to the stage to talk
to us about linking to your app.

00:03:11.516 --> 00:03:16.756
[ Applause ]

00:03:17.256 --> 00:03:17.976
>> JONATHAN GRYNSPAN:
Thank you, Conrad.

00:03:18.736 --> 00:03:20.756
Hello everyone, my name
is Jonathan Grynspan

00:03:20.756 --> 00:03:23.636
and I'm a Core Services
Software Engineer here at Apple.

00:03:24.376 --> 00:03:26.966
Today I would like to take
a moment to talk to you

00:03:27.056 --> 00:03:29.006
about your app's
place in the universe.

00:03:29.556 --> 00:03:36.316
I saw a lot of hands go up
when Conrad asked how many

00:03:36.316 --> 00:03:38.366
of you have both an
app and a website.

00:03:38.656 --> 00:03:39.836
And it's not surprising.

00:03:40.356 --> 00:03:45.206
Many modern apps are more than
just what the user downloads.

00:03:46.006 --> 00:03:51.426
They also have a
strong web presence.

00:03:51.546 --> 00:03:55.216
Often web content
mirrors app content.

00:03:55.216 --> 00:03:57.926
Many of you have a great website
with great functionality,

00:03:57.926 --> 00:04:01.696
and we like how your users are
able to reach that functionality

00:04:01.696 --> 00:04:03.406
without even having
to install an app.

00:04:04.456 --> 00:04:06.306
We also like when your
apps work together.

00:04:06.996 --> 00:04:11.056
An app exists as
part of an ecosystem.

00:04:11.746 --> 00:04:14.986
If your app, or website, needs
to access content provided

00:04:14.986 --> 00:04:16.266
by another app, or website,

00:04:16.516 --> 00:04:18.185
it needs to communicate
with it somehow.

00:04:19.026 --> 00:04:22.906
For example, if you have an app
for foodies and you want to link

00:04:22.906 --> 00:04:24.796
to a recipe, you might
want to use an app

00:04:24.796 --> 00:04:28.976
or service, such as Yumly.

00:04:29.626 --> 00:04:33.206
So how does your
app get to Yumly,

00:04:33.206 --> 00:04:36.756
and how does it provide Yumly's
content correctly and quickly?

00:04:37.426 --> 00:04:42.906
On iOS we usually
use URLs to send data

00:04:42.906 --> 00:04:43.816
from one app to another.

00:04:44.806 --> 00:04:49.806
So let's take a look at
how we do that today.

00:04:49.996 --> 00:04:53.356
Many iOS apps implement what's
called a custom URL scheme.

00:04:54.306 --> 00:04:56.066
These are a very effective tool,

00:04:56.136 --> 00:04:58.146
because they let apps
communicate with each other

00:04:58.306 --> 00:05:00.486
but they do have a few pitfalls.

00:05:01.386 --> 00:05:04.106
First off, they don't
always map to the right app,

00:05:05.096 --> 00:05:06.986
because there is no app
that truly owns them.

00:05:08.316 --> 00:05:10.286
Two apps can claim
the same URL scheme

00:05:10.826 --> 00:05:12.436
and users don't really
have a good way

00:05:12.436 --> 00:05:14.616
to say which app they mean.

00:05:16.196 --> 00:05:19.576
Second off, if your app is
not installed, they fall flat.

00:05:20.236 --> 00:05:24.616
The URL doesn't open and the
app needs custom code in order

00:05:24.616 --> 00:05:26.326
to handle this fairly
common situation.

00:05:27.046 --> 00:05:30.366
And finally, they
make protecting user's

00:05:30.366 --> 00:05:31.326
privacy difficult.

00:05:32.006 --> 00:05:35.036
Apps need to be able to detect
if other apps are installed

00:05:35.036 --> 00:05:37.506
on a device, in order to
use custom URL schemes.

00:05:37.796 --> 00:05:41.126
This means that they can sniff
out if a user has a dating app,

00:05:41.126 --> 00:05:42.176
or a banking app,

00:05:42.176 --> 00:05:44.446
or a politically-charged
app installed.

00:05:44.826 --> 00:05:46.536
This is personal information,

00:05:46.536 --> 00:05:48.266
and users do not
want to share it.

00:05:48.816 --> 00:05:51.766
So, there has to be a
better way, but what does

00:05:51.766 --> 00:05:52.906
that better way look like?

00:05:53.916 --> 00:05:57.636
Well, obviously, it needs
to be just as easy to use

00:05:57.636 --> 00:05:59.966
as custom URL schemes,
so we are still talking

00:05:59.966 --> 00:06:01.686
about a kind of URL.

00:06:02.406 --> 00:06:04.956
It must have verifiable
ownership,

00:06:05.406 --> 00:06:07.356
URLs should always
open in the right app.

00:06:08.516 --> 00:06:11.076
There should be a strong
two-way association

00:06:11.076 --> 00:06:13.156
between your app and your URLs.

00:06:13.696 --> 00:06:17.916
It must have the ability
to fall back gracefully,

00:06:17.916 --> 00:06:19.396
if your app is not installed.

00:06:19.786 --> 00:06:22.676
The URL should still work
when a user taps on it.

00:06:22.676 --> 00:06:25.946
Safari, and web browsers
in general, are a great way

00:06:25.946 --> 00:06:28.466
to display rich content,
and are present

00:06:28.466 --> 00:06:30.956
on nearly every platform,
so we'll make sure

00:06:30.956 --> 00:06:33.226
that these links can
open in a web browser.

00:06:37.286 --> 00:06:41.086
And it absolutely must
protect a user's privacy.

00:06:42.006 --> 00:06:45.106
When I run an app on my
device, it has no right to know

00:06:45.106 --> 00:06:47.066
that I also have
your app installed.

00:06:47.686 --> 00:06:49.926
And, of course, the
links that, the --

00:06:49.926 --> 00:06:52.886
excuse me, and, of course,
the links that you tap are

00:06:52.886 --> 00:06:54.426
between you and your device.

00:06:54.426 --> 00:06:56.876
There is no need for a
third party to be involved.

00:06:57.646 --> 00:07:01.216
As Conrad showed you, web
URLs are the ideal solution

00:07:01.386 --> 00:07:02.996
that fit all of these criteria.

00:07:03.716 --> 00:07:05.966
You know when they
are going to open,

00:07:05.966 --> 00:07:09.206
they work nearly everywhere,
and no third party needs

00:07:09.206 --> 00:07:10.556
to be involved when you tap one.

00:07:11.266 --> 00:07:15.876
Now that we have
identified web URLs

00:07:16.126 --> 00:07:17.926
as our solution,
let's break one down.

00:07:18.386 --> 00:07:21.156
I know you have all seen a URL
before, but if we take a look

00:07:21.156 --> 00:07:23.776
at the components of a URL,
we'll have a better idea

00:07:23.956 --> 00:07:25.576
of how these links
are going to work.

00:07:25.926 --> 00:07:29.886
Here is a perfectly
normal web URL.

00:07:30.256 --> 00:07:31.586
If you are curious, this links

00:07:31.586 --> 00:07:34.006
to last year's WWDC
keynote video.

00:07:34.856 --> 00:07:37.726
This is not a new URL that
we had to generate just

00:07:37.726 --> 00:07:39.246
for this purpose, or
just for this app.

00:07:39.586 --> 00:07:41.666
It already existed,
and you can visit it

00:07:41.666 --> 00:07:45.586
on the Apple Developer
Connection website today.

00:07:45.866 --> 00:07:49.616
If I open it in Safari, I expect
to see exactly the content

00:07:49.616 --> 00:07:53.606
that you would expect, the
video and information about it.

00:07:53.606 --> 00:07:57.306
If I - uh, I also expect to see
the same content if I open this

00:07:57.306 --> 00:08:00.346
on a Mac, or on another platform
entirely, they are universal.

00:08:01.066 --> 00:08:04.486
And thanks to universal
links, this link will open

00:08:04.486 --> 00:08:07.776
in our WWDC app without a
web browser getting involved.

00:08:07.856 --> 00:08:09.826
So, in order for that to work,

00:08:09.826 --> 00:08:11.596
iOS needs to look
for a few things.

00:08:12.776 --> 00:08:14.496
The first thing we
look at is the scheme.

00:08:14.816 --> 00:08:18.416
We support HTTPS and HTTP URLs.

00:08:18.866 --> 00:08:21.826
Next up is the domain,
or host name.

00:08:22.466 --> 00:08:25.066
The domain is securely
associated with your app,

00:08:25.566 --> 00:08:29.046
by using an SSL certificate
to sign a file that is stored

00:08:29.046 --> 00:08:30.236
on your secure web server.

00:08:30.236 --> 00:08:34.696
I will have more info on
that in just a moment.

00:08:34.696 --> 00:08:37.265
After we have analyzed
the scheme and the domain,

00:08:37.265 --> 00:08:38.265
we take a look at the path.

00:08:39.436 --> 00:08:41.456
The path can either
match exactly,

00:08:41.756 --> 00:08:43.426
or it can match with a prefix.

00:08:43.926 --> 00:08:47.946
In both cases, you specify
the matches, uh, sorry,

00:08:47.946 --> 00:08:51.136
you specify the matches and you
are in control of the situation.

00:08:51.766 --> 00:08:56.716
This is useful if you have
content that is on your website

00:08:56.716 --> 00:08:58.496
but is not representable
in your app yet.

00:08:59.116 --> 00:09:04.666
If a URL does not match,
it opens in Safari just

00:09:04.666 --> 00:09:06.066
like any other link would.

00:09:06.656 --> 00:09:12.386
If we do match a URL and we need
to - sorry, if we do match a URL

00:09:12.386 --> 00:09:15.166
and send it to you, you
can use NS URL components

00:09:15.166 --> 00:09:17.076
to break it down, and to
get at the information

00:09:17.076 --> 00:09:18.586
in the URL that's useful to you.

00:09:19.376 --> 00:09:22.066
I particularly like
using NS URL Query Item

00:09:22.336 --> 00:09:25.426
because it makes
accessing the components

00:09:25.426 --> 00:09:26.826
of the query super simple.

00:09:29.516 --> 00:09:33.746
Universal links mean having your
app, not Safari, handle links

00:09:33.746 --> 00:09:37.926
to your website, but in order to
get-- in order to open your app,

00:09:38.086 --> 00:09:41.316
when a user taps a link to
your website, iOS needs to know

00:09:41.496 --> 00:09:43.006
that your app should
open that link.

00:09:43.976 --> 00:09:46.956
Your app must claim that it can
handle links from your website.

00:09:46.956 --> 00:09:50.586
And iOS then contacts
your website, and confirms

00:09:50.626 --> 00:09:53.266
that your site knows about
your app, and is willing

00:09:53.266 --> 00:09:55.126
to be represented by it.

00:09:56.076 --> 00:09:57.526
So let's get your server ready.

00:09:58.136 --> 00:09:59.626
There are four steps
in this process.

00:10:00.156 --> 00:10:04.086
The first step is to create
a special file called the

00:10:04.146 --> 00:10:06.046
Apple-app-site-association file

00:10:06.316 --> 00:10:08.376
that iOS downloads
from your web server.

00:10:08.926 --> 00:10:12.466
This file contains specially
structured JSON data.

00:10:13.986 --> 00:10:16.056
If you adopted Handoff
from the Web

00:10:16.116 --> 00:10:19.036
or Shared Web Credentials last
year, this should look familiar.

00:10:20.076 --> 00:10:22.496
The top level key here is
applinks, which is sibling

00:10:22.496 --> 00:10:26.046
to web credentials or
activity continuation

00:10:26.046 --> 00:10:28.966
if you already have
either of them.

00:10:28.966 --> 00:10:31.646
The apps key is important
and should be present

00:10:31.646 --> 00:10:33.576
with an empty array
as its value.

00:10:34.126 --> 00:10:37.876
Under the new details key,
you will see the dictionary.

00:10:38.586 --> 00:10:41.476
The keys for this dictionary are
your application identifiers,

00:10:41.736 --> 00:10:43.946
which consist of your
team ID, which you can get

00:10:43.946 --> 00:10:46.236
from the Developer portal,
followed by a period,

00:10:46.576 --> 00:10:48.296
followed by your
bundle identifier.

00:10:48.856 --> 00:10:51.506
If you have more than one
app, you can specify each

00:10:51.506 --> 00:10:52.686
of them under a separate key.

00:10:53.246 --> 00:10:57.056
The paths array tells
us what parts

00:10:57.056 --> 00:10:59.016
of the website are
supported by your app.

00:10:59.886 --> 00:11:02.386
If you can support your
entire website in your app,

00:11:02.676 --> 00:11:04.906
you only need to
include a single asterisk

00:11:04.906 --> 00:11:08.746
like you see here, but on
day one, it's quite possible

00:11:08.746 --> 00:11:11.016
that your app won't
support every single page

00:11:11.016 --> 00:11:11.666
on your website.

00:11:12.406 --> 00:11:14.586
So we have given you
the ability to specify

00:11:14.586 --> 00:11:16.056
which pages it can handle.

00:11:17.116 --> 00:11:19.806
As you can see, I have now
added two paths to the array.

00:11:20.166 --> 00:11:21.526
The first is an exact match.

00:11:21.966 --> 00:11:24.446
If a user taps a link that
goes to exactly that path,

00:11:24.636 --> 00:11:26.466
it will open in this app.

00:11:26.986 --> 00:11:29.846
If an entire section of
your website is supported

00:11:29.846 --> 00:11:34.266
by your app, you can use a path
prefix, such as the second entry

00:11:34.266 --> 00:11:36.346
in this array, to specify

00:11:36.346 --> 00:11:37.926
that that section
will open in your app.

00:11:38.316 --> 00:11:40.596
Notice the asterisk at
the end, which tells us

00:11:40.596 --> 00:11:41.876
that this is a path prefix.

00:11:42.726 --> 00:11:45.266
It's important to note that
these paths are case sensitive

00:11:45.566 --> 00:11:48.046
and that other URL
components, such as the query

00:11:48.046 --> 00:11:51.036
or the fragment,
are not supported.

00:11:51.656 --> 00:11:55.836
The second step is to
procure an SSL certificate

00:11:55.956 --> 00:11:57.756
from a recognized
certificate authority.

00:11:58.316 --> 00:12:01.036
This is not the same certificate
that you use to sign your app

00:12:01.186 --> 00:12:05.056
for the App Store it's
not generated by Apple.

00:12:05.276 --> 00:12:07.896
We suggest that you use the
same certificate that you use

00:12:07.896 --> 00:12:10.616
for your HTTPS server,
but it's not required.

00:12:11.316 --> 00:12:13.676
If you have more than one domain
that you need to represent

00:12:13.676 --> 00:12:16.096
in your app, we suggest you
consider getting what's called a

00:12:16.096 --> 00:12:17.186
wild card certificate.

00:12:17.796 --> 00:12:19.896
For more information on
certificate generation,

00:12:20.106 --> 00:12:21.986
please contact your
certificate authority.

00:12:22.536 --> 00:12:28.256
Step 3 is to sign the JSON file
you just created using your

00:12:28.256 --> 00:12:29.126
SSL certificate.

00:12:29.126 --> 00:12:32.486
In order to do this,
you will need

00:12:32.486 --> 00:12:36.306
to use the openssl smime
command in terminal

00:12:36.306 --> 00:12:38.056
on your development Mac.

00:12:38.676 --> 00:12:40.136
These two file names
are important.

00:12:40.566 --> 00:12:43.096
The first one is the name of
the file that you just created,

00:12:43.516 --> 00:12:46.626
the unsigned JSON file that's
on your development Mac.

00:12:46.686 --> 00:12:49.356
The second must match
exactly what you see here,

00:12:49.676 --> 00:12:52.946
apple-app-site-association.

00:12:53.476 --> 00:12:56.316
These are your private key,

00:12:56.786 --> 00:12:58.946
which you generated during
certificate generation,

00:12:59.666 --> 00:13:01.566
and the certificate
that was given to you

00:13:01.566 --> 00:13:02.906
by your certificate authority.

00:13:03.076 --> 00:13:05.176
Once again, this is
not a certificate given

00:13:05.176 --> 00:13:05.846
to you by Apple.

00:13:05.846 --> 00:13:07.696
It's neither your App
Store certificate,

00:13:07.696 --> 00:13:09.206
nor your developer
ID certificate.

00:13:09.766 --> 00:13:11.826
There is one last
note to make here,

00:13:11.826 --> 00:13:14.046
if you have an intermediate
certificate that was given

00:13:14.046 --> 00:13:16.676
to you by your certificate
authority, you will need

00:13:16.676 --> 00:13:18.066
to include during signing.

00:13:20.356 --> 00:13:21.726
The fourth and final step,

00:13:22.246 --> 00:13:23.676
now that you have
a signed JSON file,

00:13:23.766 --> 00:13:25.286
is to upload it to
your web server.

00:13:25.786 --> 00:13:27.366
This goes at the
root of your server.

00:13:27.366 --> 00:13:33.566
For example, www.example.com
/ apple-app -site-association.

00:13:34.686 --> 00:13:36.296
It's important to
note that each app

00:13:36.296 --> 00:13:39.626
that your domain supports may
need a separate JSON file that's

00:13:39.626 --> 00:13:41.356
signed appropriately
for that domain.

00:13:41.986 --> 00:13:46.916
For example, example.com and
www.example.com are distinct.

00:13:48.336 --> 00:13:51.236
We introduced this
functionality in iOS 8,

00:13:51.466 --> 00:13:53.946
in support of two features:
Handoff from the Web

00:13:53.946 --> 00:13:55.406
and Shared Web Credentials.

00:13:56.436 --> 00:13:59.436
In iOS 9, we are adding
support for universal links,

00:13:59.716 --> 00:14:02.046
and we want to make it as
easy as possible for you

00:14:02.046 --> 00:14:05.466
to adopt universal links in
your app as soon as possible.

00:14:06.256 --> 00:14:10.926
So-sorry, starting
in seed 2 of iOS 9,

00:14:11.666 --> 00:14:13.046
we will no longer require you

00:14:13.196 --> 00:14:15.726
to sign your
apple-app-site-association file.

00:14:16.146 --> 00:14:18.436
Simply upload the unsigned
JSON -- thank you [applause].

00:14:22.326 --> 00:14:22.636
Thank you.

00:14:23.586 --> 00:14:27.226
Simply upload the unsigned JSON
file with the same file name,

00:14:27.226 --> 00:14:31.606
apple-app site-association,
to your HTTPS server,

00:14:32.166 --> 00:14:33.936
and iOS will take
care of the rest.

00:14:34.666 --> 00:14:37.016
Note that the signing
requirement remains in effect,

00:14:37.086 --> 00:14:39.856
if you need to support iOS 8
for backwards compatibility.

00:14:39.896 --> 00:14:41.506
If you are starting with iOS 9,

00:14:41.776 --> 00:14:43.216
you do not need to
fine the file.

00:14:43.216 --> 00:14:48.396
Now, let's talk about adoption
within your application.

00:14:48.896 --> 00:14:50.876
You will need to modify
your application delegate,

00:14:50.876 --> 00:14:52.836
and you will need to
adopt an entitlement.

00:14:52.836 --> 00:14:56.386
I will show you how to do both.

00:14:56.576 --> 00:14:58.536
First off is the
application delegate.

00:14:59.136 --> 00:15:01.626
If you adopted Handoff last
year, this should look familiar.

00:15:03.166 --> 00:15:05.246
This method is sent to
your application delegate,

00:15:05.586 --> 00:15:08.226
when a user activity is
delivered to your application.

00:15:08.736 --> 00:15:12.496
User activity objects
- excuse me -

00:15:12.496 --> 00:15:15.996
user activity objects have a
web page URL property that,

00:15:15.996 --> 00:15:20.806
in the case of this feature,
is always an HTTPS or HTTP URL,

00:15:21.246 --> 00:15:23.386
it's never nil for this feature.

00:15:23.956 --> 00:15:28.266
The activity type, in the
case of universal links,

00:15:28.336 --> 00:15:32.086
is always NS User
Activity Type Browsing Web.

00:15:33.156 --> 00:15:35.626
Once you have confirmed that the
activity type matches what you

00:15:35.626 --> 00:15:38.756
are expecting, you
can break down the URL

00:15:39.236 --> 00:15:43.176
from the web page URL using
the NSURLComponents class.

00:15:44.306 --> 00:15:46.776
Just like with custom URL
schemes, it's possible

00:15:46.776 --> 00:15:49.626
that the URL doesn't
represent anything in your app,

00:15:49.626 --> 00:15:53.196
or it represents outdated
or malformed content.

00:15:53.786 --> 00:15:56.946
If that occurs, you should
detect it and fail gracefully.

00:15:57.046 --> 00:15:59.906
Now, gracefully here,
is app specific.

00:16:00.316 --> 00:16:03.006
It may be appropriate for you
to present an alert to the use,

00:16:03.376 --> 00:16:06.346
explaining what went wrong,
or it may be a better choice

00:16:06.486 --> 00:16:09.066
for you to open the link
in Safari, which you can do

00:16:09.066 --> 00:16:12.406
from your app, by calling
UI Application Open URL.

00:16:12.936 --> 00:16:14.776
The most important thing
to take away from this,

00:16:14.976 --> 00:16:16.816
is that users are
not left staring

00:16:16.886 --> 00:16:18.076
at a blank View Controller.

00:16:20.856 --> 00:16:24.146
Once your application delegate
has been updated, you will need

00:16:24.146 --> 00:16:25.526
to update your app's
entitlements.

00:16:26.166 --> 00:16:27.556
This is easy with XCode.

00:16:28.086 --> 00:16:30.076
Navigate to your
projects settings,

00:16:30.186 --> 00:16:31.676
and to the configurations,
sorry,

00:16:31.676 --> 00:16:35.646
the capabilities tab there,
and select associated domains.

00:16:37.106 --> 00:16:39.256
You will want to add an
entry for each domain

00:16:39.256 --> 00:16:42.406
that your app supports: app
links, followed by a colon,

00:16:42.726 --> 00:16:43.886
followed by the domain name.

00:16:44.226 --> 00:16:45.876
Once again, every domain

00:16:45.876 --> 00:16:47.966
that your app supports
needs a separate entry here,

00:16:47.966 --> 00:16:48.766
they are distinct.

00:16:49.206 --> 00:16:53.386
Example.com and www.example.com
need separate entries,

00:16:53.386 --> 00:16:56.456
as you see here.

00:16:56.596 --> 00:16:57.816
I will show you how
this all comes

00:16:57.816 --> 00:16:58.866
to together in just a moment.

00:16:59.146 --> 00:17:01.756
But first I would like to review
a couple of best practices.

00:17:02.276 --> 00:17:05.496
As with all content coming
from outside your app,

00:17:05.886 --> 00:17:09.066
data may be malformed and
you may need to validate it.

00:17:09.695 --> 00:17:12.195
If it is, that doesn't mean
that you have made a mistake,

00:17:12.606 --> 00:17:14.226
but it does mean
that you will want

00:17:14.226 --> 00:17:17.746
to fail gracefully
when it occurs.

00:17:17.965 --> 00:17:20.856
Once you have a URL to
process, you should keep in mind

00:17:20.896 --> 00:17:25.906
that HTTP has caveats on iOS 9
for the sake of user security

00:17:26.066 --> 00:17:29.556
and privacy, if you transport
data using, for instance,

00:17:29.556 --> 00:17:34.026
NSURLSession, you should
always be using HTTPS.

00:17:35.116 --> 00:17:37.826
If you need to use
unencrypted HTTP in your app,

00:17:38.526 --> 00:17:42.916
you should review Session 711,
Networking with NSURLSession,

00:17:43.026 --> 00:17:45.996
which covers an important new
networking technology called App

00:17:46.276 --> 00:17:47.326
Transport Security.

00:17:47.406 --> 00:17:52.436
Now, let's take a look at how
this all fits together in XCode.

00:17:52.436 --> 00:17:53.936
I will be showing you code

00:17:53.936 --> 00:18:01.186
from the WWDC app that's
available on the App Store.

00:18:01.406 --> 00:18:05.026
So I have here the WWDC project,

00:18:05.026 --> 00:18:07.136
and I have created a new
extension that's going

00:18:07.136 --> 00:18:08.946
to house the code we
are looking at today.

00:18:09.326 --> 00:18:11.476
This extension is on my
application delegate class

00:18:11.476 --> 00:18:12.446
and the first thing I'm going

00:18:12.446 --> 00:18:15.026
to do is add the
application delegate method

00:18:15.026 --> 00:18:15.806
that we discussed.

00:18:16.506 --> 00:18:20.246
Now, again, if you adopted
Handoff last year this is the

00:18:20.246 --> 00:18:21.256
same delegate method.

00:18:21.766 --> 00:18:24.476
You'll just need to extend it to
support this new functionality.

00:18:25.366 --> 00:18:27.796
The parameter we
are interested in,

00:18:27.796 --> 00:18:31.026
is the user activity parameter,
which contains information

00:18:31.086 --> 00:18:32.426
on what the user is doing,

00:18:32.426 --> 00:18:35.206
which in this case is
navigating from a website.

00:18:37.716 --> 00:18:38.926
We are interested

00:18:38.926 --> 00:18:41.426
in the activity type
and the web page URL.

00:18:42.306 --> 00:18:45.506
For our purposes, the activity
type is always NSUser activity

00:18:45.506 --> 00:18:46.466
type BrowsingWeb.

00:18:46.996 --> 00:18:49.806
However, if your app supports
user activities coming

00:18:49.806 --> 00:18:53.076
from other sources, such as
Handoff, then you will need

00:18:53.076 --> 00:18:54.966
to check the activity
type as I have done here.

00:18:56.216 --> 00:18:58.366
Because it's NSUser
activity type BrowsingWeb,

00:18:58.366 --> 00:19:00.716
I know there is a web page
URL and that it's not nil,

00:19:00.976 --> 00:19:03.946
so I have used an
explicit unwrap

00:19:04.126 --> 00:19:07.896
of the web page zero property
to get the URL from it.

00:19:07.896 --> 00:19:10.686
I then send it to this
function, present URL,

00:19:11.016 --> 00:19:13.616
which is responsible for
breaking down the URL

00:19:14.086 --> 00:19:16.836
and delivering it to
the user interface

00:19:16.836 --> 00:19:18.956
so that the user can see it.

00:19:20.196 --> 00:19:22.196
The signature of this function
is fairly straight forward.

00:19:22.196 --> 00:19:25.186
It takes a single URL as
input, and returns a Boolean,

00:19:25.186 --> 00:19:27.816
saying whether or not we
were able to handle the URL.

00:19:27.816 --> 00:19:30.916
Now, the body of the method
is a little bit more complex,

00:19:30.916 --> 00:19:32.636
but I will walk you
through it line by line.

00:19:33.526 --> 00:19:36.946
The first thing we do is create
an instance of NSURL Components.

00:19:37.576 --> 00:19:40.896
This class, as I said before,
breaks down the URL for you

00:19:41.006 --> 00:19:44.736
and allows you to access
the individual parts of it,

00:19:44.736 --> 00:19:46.476
without you having to
build your own parser.

00:19:47.966 --> 00:19:51.036
Once we have that object, we
extract a few components from it

00:19:51.076 --> 00:19:52.176
that we are interested in here.

00:19:52.966 --> 00:19:55.946
For the WWDC app, we are
interested in the host

00:19:56.316 --> 00:19:57.446
and the path components.

00:19:58.456 --> 00:20:02.216
Now, the WWDC app can
handle URLs coming from more

00:20:02.216 --> 00:20:05.426
than one domain, so I want to
check the domain to make sure

00:20:05.426 --> 00:20:06.476
that it's what I'm expecting,

00:20:07.096 --> 00:20:08.536
so I have got a switch
statement here,

00:20:09.146 --> 00:20:11.166
with a case of
developer.apple.com,

00:20:11.296 --> 00:20:14.176
which is the URL that Conrad
showed you earlier, or sorry,

00:20:14.176 --> 00:20:15.266
the host name for that URL.

00:20:16.606 --> 00:20:18.816
Once I have matched that,
I want to match the path,

00:20:19.946 --> 00:20:22.626
and I use a switch statement,
which is very powerful in Swift,

00:20:22.956 --> 00:20:25.256
to gather all of the components
at once, and compare them

00:20:25.256 --> 00:20:29.236
in a single line,
s/videos,/WWDC,

00:20:29.476 --> 00:20:30.986
something that may
or may not be a year.

00:20:32.436 --> 00:20:34.446
I want to take a
look at that value,

00:20:34.446 --> 00:20:36.536
which is a string right now,
and turn it into an Int.

00:20:36.536 --> 00:20:42.086
So I cast it with the Int
initializer, excuse me,

00:20:42.946 --> 00:20:44.536
and I also gather
the session number,

00:20:44.626 --> 00:20:46.686
which in this case
would be Session 509.

00:20:46.686 --> 00:20:48.506
In the case of the
example Conrad showed you,

00:20:48.506 --> 00:20:51.006
it was Session 101.

00:20:51.006 --> 00:20:53.256
Now, this Find Session method I
will show you in just a second.

00:20:54.686 --> 00:20:56.076
If those components
have matched,

00:20:56.356 --> 00:20:58.026
then I want to present
it to the user,

00:20:58.106 --> 00:21:01.616
but I need to validate the input
first because it's possible,

00:21:02.956 --> 00:21:07.316
it's possible that it isn't in
a range that makes any sense.

00:21:07.316 --> 00:21:09.566
For instance, a year
before Apple was founded

00:21:09.616 --> 00:21:11.086
or a session number
in the millions.

00:21:12.196 --> 00:21:14.336
So I take the year in
session, and compare them

00:21:14.336 --> 00:21:19.936
against two ranges, 2011 to
2015 for the year, 100 to 10,000

00:21:19.936 --> 00:21:20.776
for the session number.

00:21:20.776 --> 00:21:22.556
And if it's in those
ranges, then it looks

00:21:22.556 --> 00:21:24.926
like something that's valid
that we can present to the user.

00:21:25.366 --> 00:21:27.626
So we proceed to present it.

00:21:29.016 --> 00:21:31.686
Now, I mentioned this Find
Session method which I'm going

00:21:31.686 --> 00:21:32.356
to show you right now.

00:21:33.406 --> 00:21:33.896
There we are.

00:21:34.676 --> 00:21:37.106
And this is specific to our app.

00:21:37.106 --> 00:21:39.246
It's unlikely you will
have this exact same code,

00:21:39.246 --> 00:21:41.036
so I'm not going to go
into too much detail here,

00:21:41.326 --> 00:21:44.446
but the idea is that the data
that's coming in may come

00:21:44.446 --> 00:21:47.406
from more than one source, so
we want to check all of them.

00:21:47.596 --> 00:21:50.096
The first thing we look at is
the fragment, which in the case

00:21:50.096 --> 00:21:53.566
of URLs from 2014 and before,
contained the session ID,

00:21:54.166 --> 00:21:57.856
and then if that didn't contain
the session ID, we take a look

00:21:58.376 --> 00:22:00.746
at the query which
we have broken apart

00:22:00.746 --> 00:22:02.376
with NSURL query item.

00:22:02.806 --> 00:22:05.766
In this case the query item's
property is already populated

00:22:05.766 --> 00:22:06.276
for us.

00:22:07.406 --> 00:22:09.046
We iterate over,
and we find the one

00:22:09.046 --> 00:22:11.006
that either matches
ID, or instance.

00:22:11.006 --> 00:22:15.376
Either one may contain
the session number for us.

00:22:16.336 --> 00:22:17.856
Now, I'm almost done
with the code here,

00:22:17.986 --> 00:22:19.086
but there is something missing.

00:22:19.676 --> 00:22:21.166
There is a lot of
return falses here.

00:22:21.166 --> 00:22:24.296
There is a lot of cases where we
weren't able to handle the URL.

00:22:25.236 --> 00:22:28.266
And, again, that's okay
because we may get invalid input

00:22:28.266 --> 00:22:31.926
from time to time, but up here
in my application delegate,

00:22:32.136 --> 00:22:33.896
I'm not doing anything
with that return value,

00:22:34.326 --> 00:22:36.766
and if I get a URL
that's clearly invalid,

00:22:36.766 --> 00:22:39.406
the user is not going
to see anything.

00:22:39.406 --> 00:22:41.866
The WWDC Apple opened,
and they will be presented

00:22:41.866 --> 00:22:43.056
with a blank View Controller,

00:22:43.056 --> 00:22:45.226
which is exactly what
we want to avoid.

00:22:45.776 --> 00:22:47.416
So we are going to
fail gracefully

00:22:47.416 --> 00:22:49.136
and it's very, very
easy to do that.

00:22:49.826 --> 00:22:52.556
In this case, if present
URL returns false,

00:22:52.856 --> 00:22:54.976
then I know that I didn't
present anything to the user,

00:22:55.316 --> 00:22:56.606
and I pass the URL back

00:22:56.756 --> 00:22:59.566
to Safari using UIApplication
openURL.

00:23:00.836 --> 00:23:02.986
Those are all of the code
changes you need to adopt this.

00:23:03.206 --> 00:23:05.856
If you have already got
code for custom URL schemes,

00:23:05.976 --> 00:23:07.806
it's quite likely it
will look very similar

00:23:07.806 --> 00:23:08.666
to what we have here.

00:23:09.736 --> 00:23:13.286
Now, I'd like to show you what
this app looked like before

00:23:13.466 --> 00:23:15.786
and after we added this
code, but before I do that,

00:23:16.116 --> 00:23:17.276
I need to add an entitlement.

00:23:17.886 --> 00:23:22.386
So I go to my Project Settings,
I select the Capabilities tab,

00:23:22.386 --> 00:23:24.056
and I select Associated Domains.

00:23:24.596 --> 00:23:27.396
I'm going to add a
single entry here,

00:23:27.536 --> 00:23:29.656
because we are only working
with a single domain today,

00:23:30.006 --> 00:23:33.516
but once again, if you have more
than one domain, example.com;

00:23:33.516 --> 00:23:36.916
www.example.com, they
will need separate entries

00:23:36.916 --> 00:23:37.776
in this entitlement.

00:23:38.356 --> 00:23:43.426
In this case, I need
applinks:developer.apple.com.

00:23:44.446 --> 00:23:44.796
That's it.

00:23:45.626 --> 00:23:47.066
I'm ready to go on
my client side.

00:23:47.066 --> 00:23:49.046
So I am going to show
you what the app looked

00:23:49.046 --> 00:23:50.306
like before we added this.

00:23:51.156 --> 00:23:53.566
So here I have got my
iPad, and this has a copy

00:23:53.566 --> 00:23:57.386
of the WWDC app installed
before we added, sorry,

00:23:57.436 --> 00:24:00.216
before we added universal
links to it.

00:24:00.216 --> 00:24:03.176
And I'm going to go to the
same text message, sorry,

00:24:03.176 --> 00:24:04.926
the same iMessage I
sent Conrad earlier.

00:24:05.516 --> 00:24:08.986
It's exactly the same
message, but when I tap it

00:24:09.596 --> 00:24:11.466
because I haven't
adopted universal links,

00:24:12.216 --> 00:24:13.586
it just opens in Safari.

00:24:14.516 --> 00:24:18.136
Safari is a great app and it can
show me some fantastic content,

00:24:18.136 --> 00:24:20.926
and in particular, it doesn't
give me all the options

00:24:20.926 --> 00:24:21.866
that I can get from the app.

00:24:22.306 --> 00:24:25.536
I can watch the video in
both the app and Safari, but,

00:24:25.536 --> 00:24:28.866
I can also provide feedback from
the app, or, make it a favorite

00:24:28.926 --> 00:24:31.426
to watch later, I can even
download it for offline viewing.

00:24:31.836 --> 00:24:35.066
So, as I showed you, we
have this now in our app,

00:24:35.176 --> 00:24:37.256
in the app you have in
your hands right now,

00:24:37.776 --> 00:24:39.826
and that looks a
little bit like this.

00:24:40.506 --> 00:24:43.656
So, once more, this is the URL
that I sent Conrad earlier,

00:24:43.656 --> 00:24:47.396
and I tap it, and just as
before, it opens the keynote

00:24:47.776 --> 00:24:49.006
and I can add it
to my favorites,

00:24:49.356 --> 00:24:51.546
I can watch the video,
download it, and so forth.

00:24:52.356 --> 00:24:54.776
And that is pretty
much everything we had

00:24:55.386 --> 00:24:56.336
to do [applause].

00:24:58.356 --> 00:24:58.626
Thank you.

00:25:04.066 --> 00:25:06.776
So before I hand the
remote back to Conrad,

00:25:06.966 --> 00:25:09.766
I would like to thank you for
coming, and I look forward

00:25:09.766 --> 00:25:11.416
to seeing what all
of you are going

00:25:11.416 --> 00:25:13.706
to create using universal
links in iOS 9.

00:25:13.926 --> 00:25:14.796
Thank you.

00:25:15.516 --> 00:25:19.816
[ Applause ]

00:25:20.316 --> 00:25:20.706
>> CONRAD SHULTZ: Great.

00:25:22.026 --> 00:25:22.966
Thank you Jonathan.

00:25:24.556 --> 00:25:29.316
So by adopting universal
links you will give all

00:25:29.316 --> 00:25:32.776
of your users the best
possible user experience.

00:25:33.926 --> 00:25:36.786
For users who have your app
installed on your iPhone

00:25:36.786 --> 00:25:41.306
or iPad, links to your
website will open immediately

00:25:41.306 --> 00:25:44.916
in your app without
any distracting flashes

00:25:44.916 --> 00:25:45.696
through Safari.

00:25:46.856 --> 00:25:51.046
You no longer have to write
JavaScript on your website

00:25:51.446 --> 00:25:53.536
to detect if your
app is installed,

00:25:53.536 --> 00:25:56.386
or try to defect it it's
installed, and launch the app

00:25:56.386 --> 00:25:58.276
on behalf of the user.

00:25:59.016 --> 00:26:03.016
If a user does not have
your app installed,

00:26:03.186 --> 00:26:05.476
your links will still
seamlessly open in Safari.

00:26:05.476 --> 00:26:11.756
And for the same reason, your
links will still just work

00:26:11.996 --> 00:26:14.576
on the Mac or even
on other platforms.

00:26:16.326 --> 00:26:19.816
Now, because this is all handled
locally on the user's device,

00:26:20.066 --> 00:26:22.306
there are no wasteful
extra round trips

00:26:22.306 --> 00:26:25.856
out to the user's web server
or out to your web server.

00:26:26.926 --> 00:26:31.366
And, of course, this also means
the neither Apple nor any other

00:26:31.366 --> 00:26:36.006
third party can track
what your users are doing.

00:26:37.426 --> 00:26:41.516
So we have talked a
little, or, we have talked

00:26:41.516 --> 00:26:45.286
about how these links will
take the user to your website

00:26:45.546 --> 00:26:46.906
if they don't have
your app installed.

00:26:47.916 --> 00:26:50.136
Once there, many of
you probably want

00:26:50.136 --> 00:26:53.316
to help your user discover
and install your app.

00:26:53.696 --> 00:26:56.016
And ILS has a technology
that can help

00:26:56.016 --> 00:26:58.896
with that called
Smart App Banners.

00:26:59.456 --> 00:27:02.326
Let's spend just a
couple of minutes talking

00:27:02.326 --> 00:27:05.766
about Smart App Banners which is
also about the time it will take

00:27:05.766 --> 00:27:07.216
for you to adopt them.

00:27:07.996 --> 00:27:09.536
So what are Smart App Banners?

00:27:10.286 --> 00:27:14.016
They are unobtrusive UI
elements that help route users

00:27:14.016 --> 00:27:16.926
to your app, and which are
presented automatically

00:27:16.926 --> 00:27:18.326
by Safari on iOS.

00:27:19.176 --> 00:27:24.376
If a user doesn't have your app
installed, the banner will offer

00:27:24.376 --> 00:27:28.286
to launch the App Store so
that the user can download it.

00:27:28.286 --> 00:27:32.016
If the user does have your app
installed, the banner will offer

00:27:32.016 --> 00:27:33.496
to launch the app for the user.

00:27:34.726 --> 00:27:38.276
Smart App Banners are trivial
to add to your website.

00:27:39.486 --> 00:27:43.686
And new with iOS 9's
app search feature,

00:27:44.146 --> 00:27:48.066
Smart App Banners will be used
by Apple to help index your app

00:27:48.066 --> 00:27:50.656
and its content, which
increases the likelihood

00:27:50.936 --> 00:27:55.046
of the user finding and
installing your app.

00:27:55.316 --> 00:27:58.526
Now, some of you might
use custom URL schemes

00:27:58.826 --> 00:28:03.816
to launch the user into
your app from your website.

00:28:04.896 --> 00:28:07.916
This will still work,
but it's not recommended.

00:28:08.066 --> 00:28:11.636
And there is no guarantee
that the user experience

00:28:11.636 --> 00:28:14.366
with custom URL schemes will
remain the same in the future.

00:28:15.336 --> 00:28:18.166
Smart App Banners afford the
preferred user experience.

00:28:19.776 --> 00:28:22.536
So to adopt Smart App
Banners, all you need

00:28:22.536 --> 00:28:26.936
to do is add one line of HTML
to your website's head section.

00:28:28.176 --> 00:28:32.466
The apple-itunes-app meta tag
will tell Safari that you want

00:28:32.466 --> 00:28:35.126
to install, or display,
a Smart App Banner.

00:28:36.036 --> 00:28:40.686
The content attribute
must include your app ID,

00:28:41.206 --> 00:28:43.916
which is used to route the
user to the correct app.

00:28:44.536 --> 00:28:47.686
You can obtain your app ID
using the convenient iTunes

00:28:47.686 --> 00:28:48.296
link maker.

00:28:48.876 --> 00:28:55.226
The app argument should
include the URL of the page

00:28:55.226 --> 00:28:56.566
that is currently
being displayed.

00:28:57.356 --> 00:28:58.516
This is for a couple of reasons.

00:28:59.116 --> 00:29:02.736
First, this allows you
to customize the view

00:29:02.736 --> 00:29:04.246
that you show to the user.

00:29:05.086 --> 00:29:09.316
And it's passed to your
application open URL source

00:29:09.316 --> 00:29:10.886
application annotation method.

00:29:12.126 --> 00:29:14.556
Second, it is, it
helps make sure

00:29:14.556 --> 00:29:17.606
that app search recognizes
your site as more

00:29:17.606 --> 00:29:18.806
than just a landing page.

00:29:19.036 --> 00:29:21.736
And for more information on
this point, I would refer you

00:29:21.736 --> 00:29:24.456
to the Introducing
Search API session.

00:29:24.456 --> 00:29:26.806
You can find the video of it.

00:29:26.806 --> 00:29:27.716
It was held yesterday.

00:29:29.336 --> 00:29:32.386
Finally, note the Smart
App Banners will not appear

00:29:32.386 --> 00:29:34.126
in the iOS simulator, so be sure

00:29:34.126 --> 00:29:35.496
that you test on
a physical device.

00:29:36.986 --> 00:29:39.416
Once you have adopted
Smart App Banners,

00:29:40.096 --> 00:29:43.146
and once your app can handle
links to your website,

00:29:43.626 --> 00:29:46.256
you have a really
cool opportunity

00:29:46.546 --> 00:29:48.306
to simplify your website.

00:29:49.286 --> 00:29:52.806
It no longer needs to
be a promotional vehicle

00:29:52.926 --> 00:29:53.556
for your app.

00:29:54.916 --> 00:29:58.126
It can instead focus on
presenting your content

00:29:58.516 --> 00:30:00.176
in the best manner possible.

00:30:01.156 --> 00:30:06.106
You no longer need to be in the
business of displaying banners

00:30:06.286 --> 00:30:09.036
or splash screens,
or writing code

00:30:09.036 --> 00:30:10.726
to handle custom URL schemes.

00:30:11.556 --> 00:30:16.416
Your website can now be simpler
to use and simpler to write.

00:30:17.516 --> 00:30:21.956
Okay. So we have talked
a fair bit about how

00:30:21.956 --> 00:30:24.096
to get users into your app.

00:30:25.046 --> 00:30:29.206
Once there, many of them
are going to have to log

00:30:29.206 --> 00:30:31.196
in to your service,
for it to be useful.

00:30:31.196 --> 00:30:34.096
If that happens, they
might see a screen

00:30:34.336 --> 00:30:36.646
like this, a log-in form.

00:30:37.196 --> 00:30:40.516
This is a frustrating
moment for your users.

00:30:40.916 --> 00:30:44.316
They probably don't remember
their credentials even though

00:30:44.316 --> 00:30:47.766
they might have logged into
your site many times in Safari.

00:30:48.686 --> 00:30:51.826
They don't want, or don't know,
how to look their passwords up.

00:30:52.536 --> 00:30:54.116
This is precisely the moment

00:30:54.476 --> 00:30:56.206
when the user might
just abandon ship,

00:30:56.916 --> 00:30:59.086
leave your app, maybe
even delete it.

00:30:59.086 --> 00:31:05.006
But what if instead you could
present a list of credentials

00:31:05.236 --> 00:31:06.266
for the user to select?

00:31:07.146 --> 00:31:10.056
That would turn this into this.

00:31:10.926 --> 00:31:13.876
A simple picker that
allows the user to choose

00:31:13.876 --> 00:31:16.786
from passwords they have
previously saved in Safari.

00:31:17.676 --> 00:31:20.926
Well, the technology to do
this was introduced in iOS 8

00:31:21.316 --> 00:31:23.686
and it's called Shared
Web Credentials.

00:31:24.176 --> 00:31:28.346
Shared Web Credentials
allow your app

00:31:28.626 --> 00:31:30.936
to access Safari's
saved passwords

00:31:31.376 --> 00:31:34.586
and thereby eliminate
the headache for users,

00:31:34.586 --> 00:31:36.426
of r having to remember
their passwords

00:31:36.886 --> 00:31:38.976
in different contexts
on different devices.

00:31:39.796 --> 00:31:41.766
How does this work?

00:31:42.706 --> 00:31:48.816
Well, when Safari on either iOS,
or OS X sees a user logging in,

00:31:48.816 --> 00:31:50.606
or filling out an
account creation form,

00:31:50.866 --> 00:31:52.806
it can help the user in
several different ways.

00:31:53.196 --> 00:31:56.816
Specifically, Safari can
offer to save passwords

00:31:56.816 --> 00:31:58.376
on the user's behalf
in the keychain.

00:31:59.546 --> 00:32:01.726
It can sync those
passwords to all

00:32:01.726 --> 00:32:04.256
of the users' devices
using iCloud Keychain,

00:32:04.256 --> 00:32:05.626
so they are always available

00:32:05.726 --> 00:32:08.956
on the user's iPhone,
iPad, and Macs.

00:32:09.196 --> 00:32:11.336
It can suggest
cryptographically-strong

00:32:11.336 --> 00:32:15.236
passwords for the
user, and of course,

00:32:15.496 --> 00:32:18.536
it can autofill those
passwords on the user's behalf,

00:32:18.846 --> 00:32:20.916
when the user goes to log in.

00:32:21.836 --> 00:32:24.406
And with the Shared
Web Credentials API,

00:32:24.626 --> 00:32:27.726
it can also prevent users
from being stuck on your app

00:32:27.796 --> 00:32:29.336
when they go to log in.

00:32:30.036 --> 00:32:33.606
To adopt Shared Web Credentials,
there are two parts.

00:32:34.786 --> 00:32:38.546
First, you need to
establish a tight association

00:32:38.546 --> 00:32:41.926
between your app and your
website just like we talked

00:32:41.926 --> 00:32:44.026
about for universal links.

00:32:44.846 --> 00:32:48.026
Second, you do need to adopt
a little API in your app,

00:32:48.116 --> 00:32:51.926
to access the credentials
themselves.

00:32:51.926 --> 00:32:56.056
So since shared web
credentials allows the user

00:32:56.056 --> 00:32:58.526
to share their passwords,
we need to establish

00:32:58.566 --> 00:33:01.706
that you control both
your app and your website.

00:33:03.156 --> 00:33:05.056
Just like we did when
we allowed your app

00:33:05.266 --> 00:33:07.066
to handle links to your website.

00:33:07.816 --> 00:33:13.676
Your server tells us to trust
your app by a simple addition

00:33:13.826 --> 00:33:15.966
to the
apple-app-site-association file

00:33:15.966 --> 00:33:17.006
that Jonathan discussed.

00:33:17.906 --> 00:33:21.966
Specifically, all you need to
do is add a top level dictionary

00:33:21.966 --> 00:33:28.836
under the web credentials key,
with a key of apps, and an array

00:33:28.836 --> 00:33:31.096
of app IDs, that your server,

00:33:31.096 --> 00:33:34.616
your website trusts
to share credentials.

00:33:35.126 --> 00:33:39.556
Your app also needs to tell
us to trust your website.

00:33:40.156 --> 00:33:42.336
And this is accomplished
by adding, a,

00:33:42.336 --> 00:33:44.186
one or more web credentials
entries

00:33:44.486 --> 00:33:46.636
to the associated-domains
entitlement

00:33:47.166 --> 00:33:48.266
that we talked about earlier.

00:33:48.876 --> 00:33:52.466
And you can also do this using
XCode's project inspector

00:33:52.676 --> 00:33:55.536
as Jonathan showed in the demo.

00:33:56.696 --> 00:34:01.436
Okay. So now let's talk about
adopting the API in your app.

00:34:01.436 --> 00:34:05.296
A typical flow in your app
might look something like this.

00:34:05.556 --> 00:34:09.666
First your app will check to
see if it has credentials saved

00:34:09.666 --> 00:34:12.196
in the keychain, and if
so, use them to log in.

00:34:12.795 --> 00:34:17.956
If not, it will ask to
access any passwords

00:34:17.996 --> 00:34:19.295
that Safari has saved.

00:34:19.295 --> 00:34:23.126
If those are available,
it will use those,

00:34:23.126 --> 00:34:24.926
it will save them
locally and then log in.

00:34:25.466 --> 00:34:29.366
If none are available, it will
present its built-in log-in UI,

00:34:29.366 --> 00:34:32.366
to ask for credentials and then
proceed in the usual manner.

00:34:33.795 --> 00:34:35.946
So a basic implementation

00:34:36.226 --> 00:34:39.735
of requesting Safari's passwords
might look something like this.

00:34:40.476 --> 00:34:43.866
The key function is
SecRequestSharedWebCredential

00:34:45.106 --> 00:34:48.596
which takes a completion
handler,

00:34:48.806 --> 00:34:51.666
and optionally takes domain
and user name arguments.

00:34:52.196 --> 00:34:54.755
In the completion handler,

00:34:54.946 --> 00:34:56.815
we check whether we
got credentials back,

00:34:57.005 --> 00:35:00.496
and if so, use them to log in.

00:35:01.046 --> 00:35:03.196
Otherwise, we will
present the log-in UI.

00:35:03.766 --> 00:35:07.206
Note that in both cases we
dispatch to the main queue

00:35:07.206 --> 00:35:08.696
because there is no guarantee

00:35:09.016 --> 00:35:13.846
that the completion handler
is called on the main queue.

00:35:14.046 --> 00:35:17.406
So if your app allows the
user to create an account

00:35:17.736 --> 00:35:19.136
or change their password,

00:35:19.396 --> 00:35:21.956
you really should
update Safari's keychain

00:35:22.146 --> 00:35:24.056
so that the next time
the user goes to log

00:35:24.056 --> 00:35:26.006
in to your website
on, say, their Mac,

00:35:26.736 --> 00:35:29.056
the correct password is
available to be autofilled,

00:35:29.376 --> 00:35:32.606
and you can do that using
the SecAddSharedWebCredential

00:35:32.606 --> 00:35:33.576
function as shown here.

00:35:34.156 --> 00:35:40.456
The Shared Web Credentials API
also lets you generate secure

00:35:40.456 --> 00:35:43.316
passwords using the exact
same algorithm as Safari,

00:35:43.966 --> 00:35:47.176
using the Sec Create Shared Web
Credential Password function,

00:35:47.556 --> 00:35:48.266
as shown here.

00:35:48.996 --> 00:35:52.026
There are some additional
advanced features of the API,

00:35:52.026 --> 00:35:54.316
and if you are interested
in those, I will refer you

00:35:54.316 --> 00:35:57.296
to last year's session, Your
App, Your Website, and Safari.

00:36:01.936 --> 00:36:04.696
So we have talked
about some great tools

00:36:05.116 --> 00:36:08.476
for giving your users
the best experience

00:36:08.476 --> 00:36:10.496
in both your app
and your website.

00:36:11.246 --> 00:36:16.286
First, on iOS 9 with just a
little bit of work on your part,

00:36:16.936 --> 00:36:21.206
regular links to your website
can become universal links.

00:36:22.346 --> 00:36:25.896
And can open your
app just as easily

00:36:25.896 --> 00:36:26.856
as they open your website.

00:36:27.466 --> 00:36:31.476
And iOS will insure that
your users are given the best

00:36:31.476 --> 00:36:34.146
possible experience,
which may be your app,

00:36:34.516 --> 00:36:35.846
or may be your website.

00:36:36.556 --> 00:36:40.946
The days of using custom
URL schemes to route users

00:36:40.946 --> 00:36:42.886
into your app are over.

00:36:43.906 --> 00:36:50.066
Next, you can adopt Smart
App Banners, which will,

00:36:50.066 --> 00:36:52.266
the first time your user
visits your website,

00:36:52.526 --> 00:36:53.916
will help them discover
your app.

00:36:53.916 --> 00:36:55.796
On a subsequent visits,

00:36:56.116 --> 00:36:59.326
they will help redirect
users into your app.

00:36:59.326 --> 00:37:03.496
And at all times, they will
help App Search index your app

00:37:03.496 --> 00:37:06.736
and its content, so that it
is available to your users

00:37:06.736 --> 00:37:08.216
in both Safari and Spotlight.

00:37:09.906 --> 00:37:12.736
Finally, by adopting
shared web credentials,

00:37:13.226 --> 00:37:16.886
you can give your app access
to Safari's saved passwords,

00:37:17.096 --> 00:37:20.176
and make logging into your
app a breeze for your users.

00:37:20.566 --> 00:37:24.266
For more information on what
we have talked about today,

00:37:24.456 --> 00:37:25.936
you can check out
our documentation.

00:37:26.706 --> 00:37:28.556
You can ask a question
on the Dev forums,

00:37:28.826 --> 00:37:30.766
and of course reach out to DTS.

00:37:32.306 --> 00:37:35.746
You can also contact John Davis,
our Web Technologies Evangelist

00:37:35.966 --> 00:37:38.436
or Jake Behrens, the App
Frameworks Evangelist.

00:37:38.876 --> 00:37:41.036
There are several related
sessions, both this year

00:37:41.036 --> 00:37:43.446
and last, that go more
into detail on some

00:37:43.446 --> 00:37:44.686
of the topics we discussed.

00:37:46.006 --> 00:37:47.686
Thank you and have a great
rest of the conference.

00:37:49.516 --> 00:38:01.820
[ Applause ]