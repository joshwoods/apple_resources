WEBVTT

00:00:26.596 --> 00:00:26.716
>> VIPUL PRAKASH: Hello.

00:00:26.716 --> 00:00:30.166
Welcome to session 709.

00:00:30.936 --> 00:00:33.826
I'm Vipul Prakash
and I'll be joined

00:00:33.826 --> 00:00:36.286
by my colleagues Dave
Salim and Jason Douglas.

00:00:36.786 --> 00:00:41.846
We'll give you an in-depth tour
of the new Search APIs in iOS 9.

00:00:42.396 --> 00:00:46.846
As you saw in the Keynote, deep
links, the content in your apps,

00:00:46.846 --> 00:00:50.036
they can now appear as tightly
integrated search results

00:00:50.106 --> 00:00:50.746
in Spotlight.

00:00:51.316 --> 00:00:52.766
This is tremendously exciting.

00:00:53.726 --> 00:00:56.376
On iOS users spent most of
their time inside of apps,

00:00:56.516 --> 00:00:58.956
this is where all the great
content is, this is really

00:00:58.956 --> 00:01:01.366
where people live their
digital lives these days.

00:01:01.816 --> 00:01:04.766
We have been interested
in connecting all

00:01:04.766 --> 00:01:06.436
of this great content
through Search.

00:01:06.816 --> 00:01:11.936
We didn't want to create an ad
hoc one-size-fits-all course

00:01:11.936 --> 00:01:14.656
of indexing scheme going
inside of your apps

00:01:14.656 --> 00:01:17.136
to grab whatever it can
and stuffs it in Spotlight.

00:01:17.636 --> 00:01:20.156
That's an approach to indexing
that worked well for the web

00:01:20.646 --> 00:01:24.316
because it is uniform but
it is the wrong approach

00:01:24.586 --> 00:01:25.546
for app search.

00:01:26.596 --> 00:01:30.006
What we wanted to do was
create an experience where you

00:01:30.006 --> 00:01:33.106
as developers choose
exactly what is in the index,

00:01:33.556 --> 00:01:37.306
how results appear in search
and where the user goes

00:01:37.306 --> 00:01:39.086
to when they tap on the results.

00:01:39.946 --> 00:01:41.506
I think we have been
able to achieve this

00:01:41.616 --> 00:01:44.896
with search APIs keeping
them simple and lightweight.

00:01:46.216 --> 00:01:51.286
The goal of search APIs
is to bring the content

00:01:51.346 --> 00:01:55.926
in your apps more deeply
in a search context.

00:01:56.756 --> 00:01:59.316
In addition to results appearing

00:01:59.316 --> 00:02:02.156
in Spotlight they
also appear in Safari.

00:02:03.916 --> 00:02:08.485
This works in a way similar to
how Spotlight suggestions work

00:02:08.485 --> 00:02:10.606
which are produced in iOS 8.

00:02:11.466 --> 00:02:14.676
As the user types a query
into the Safari address bar,

00:02:14.676 --> 00:02:17.946
you have the results from the
Internet like Maps, Wikipedia,

00:02:17.946 --> 00:02:22.046
App Store and the user can tap
on the results to jump directly

00:02:22.046 --> 00:02:23.366
to the content they're
looking for.

00:02:23.956 --> 00:02:27.176
In iOS 9 users will be
able to jump directly

00:02:27.576 --> 00:02:30.326
to content inside of your apps.

00:02:31.596 --> 00:02:36.306
This is another vector
of distribution

00:02:36.306 --> 00:02:38.166
and exposure we provide.

00:02:38.776 --> 00:02:42.866
Public deep links inside of
your app, will now appear

00:02:43.096 --> 00:02:46.186
in search results for users that
don't have your app installed.

00:02:46.666 --> 00:02:49.056
This is super exciting.

00:02:49.706 --> 00:02:54.776
This provides a whole
new level of exposure

00:02:54.776 --> 00:02:57.506
for your app potentially
to hundreds

00:02:57.506 --> 00:02:59.586
of millions of iOS users.

00:03:00.516 --> 00:03:06.386
[Applause]

00:03:06.886 --> 00:03:08.146
>> VIPUL PRAKASH: Let's
look at how this works.

00:03:08.146 --> 00:03:09.736
Let's look at examples.

00:03:11.316 --> 00:03:15.106
We invited the folks from
Airbnb to look at the APIs

00:03:15.106 --> 00:03:18.606
and they were able to do an
integration within a few hours.

00:03:19.206 --> 00:03:22.906
What they did, they took
reservations that users make

00:03:23.276 --> 00:03:25.806
and the communications that
they have on the platform

00:03:26.036 --> 00:03:28.026
and index them to
the search APIs.

00:03:28.826 --> 00:03:32.786
Now when I look for the
reservation I made in Napa,

00:03:32.786 --> 00:03:36.316
I put that in Spotlight,
the reservation comes

00:03:36.316 --> 00:03:37.426
up as the first result.

00:03:38.266 --> 00:03:40.976
It has the dates --
it is really cool.

00:03:41.146 --> 00:03:43.146
[Applause]

00:03:43.276 --> 00:03:45.496
>> VIPUL PRAKASH: It has
the dates, number of guests,

00:03:45.566 --> 00:03:49.316
descriptions, and when I
tap on it it takes me inside

00:03:49.316 --> 00:03:51.516
of the rich experience
in the app.

00:03:52.776 --> 00:03:56.326
Another result that you will see
here, this is result number 2,

00:03:56.326 --> 00:04:01.036
which is a message from the
host of the reservation.

00:04:01.386 --> 00:04:06.736
As you can see, I can read
the message, it is very useful

00:04:06.736 --> 00:04:09.026
and there is also a
call glyph on the right,

00:04:09.846 --> 00:04:13.796
when they indexed this,
they are added data

00:04:13.796 --> 00:04:16.995
to include the phone
number of the host

00:04:17.466 --> 00:04:20.446
and Spotlight picked this
up, rendered a call glyph

00:04:20.636 --> 00:04:23.136
and when it happens, it
does what you expect.

00:04:23.716 --> 00:04:25.446
It makes the call.

00:04:26.026 --> 00:04:31.116
So this is a really beautifully
integrated integration

00:04:31.396 --> 00:04:33.346
to achieve search APIs.

00:04:33.346 --> 00:04:34.606
Let's look at other examples.

00:04:36.166 --> 00:04:38.636
Here is LinkedIn, a
professional networking app.

00:04:39.116 --> 00:04:41.006
What's happening
in this example,

00:04:41.636 --> 00:04:44.426
my first degree network,
all of the communications

00:04:44.426 --> 00:04:47.546
that I have had on LinkedIn have
been added to the search index.

00:04:47.886 --> 00:04:52.286
Now they're available in the
same way as built-in Contacts

00:04:52.486 --> 00:04:54.046
and built-in messages
that are available.

00:04:57.996 --> 00:05:00.896
Now search APIs, are not
limited to just content.

00:05:01.456 --> 00:05:06.136
One really handy use case
is to make navigation points

00:05:06.356 --> 00:05:08.846
and features inside
of apps searchable.

00:05:09.416 --> 00:05:13.526
As an example, our very
own Health app does this.

00:05:14.286 --> 00:05:17.746
It indexes all the deep
links of all the sessions.

00:05:17.746 --> 00:05:21.546
If I want to see how many steps
I have taken, I type steps

00:05:21.546 --> 00:05:24.306
in Spotlight, get this
deep link, tap on it,

00:05:24.406 --> 00:05:25.686
go straight to the steps screen.

00:05:27.516 --> 00:05:31.306
[Applause]

00:05:31.806 --> 00:05:32.796
>> VIPUL PRAKASH: I
think this is very cool.

00:05:32.796 --> 00:05:37.536
One of the most popular
users of Spotlight Search is

00:05:37.616 --> 00:05:39.016
to find and launch apps.

00:05:39.446 --> 00:05:43.226
We believe in iOS
9 going straight

00:05:43.276 --> 00:05:46.346
to deep navigation points
inside of apps is going

00:05:46.346 --> 00:05:49.826
to be another very
popular use case.

00:05:50.076 --> 00:05:54.556
In all these examples
the results came

00:05:54.556 --> 00:05:57.686
from your own device index,
the deep links were put

00:05:57.686 --> 00:05:59.886
in the device index and
they never crossed the

00:05:59.886 --> 00:06:00.616
device boundary.

00:06:01.156 --> 00:06:03.866
What if the user does not
have your app installed?

00:06:04.436 --> 00:06:09.006
We maintain a massive
index of deep links

00:06:09.506 --> 00:06:10.796
in Apple's cloud servers.

00:06:11.266 --> 00:06:15.586
We can serve results
seamlessly from this index.

00:06:15.586 --> 00:06:22.286
We have come up with a novel
way of populating this index.

00:06:23.636 --> 00:06:28.986
Developers, you can tag content
which is public as public

00:06:29.516 --> 00:06:33.266
and once enough users engage
with it, it is then promoted

00:06:33.466 --> 00:06:37.346
to the cloud index where now
it is available to all users

00:06:37.346 --> 00:06:40.286
of your app and if there
are web links associated

00:06:40.646 --> 00:06:46.506
with the deep links then it is
available to all users of iOS.

00:06:46.696 --> 00:06:53.746
Now indexing and crawling apps
is nonsensical in some ways

00:06:53.746 --> 00:06:56.076
but on the web, it is not.

00:06:56.076 --> 00:06:59.136
If your app mirrors its content

00:06:59.296 --> 00:07:03.276
on a website what
we can do is go out

00:07:03.276 --> 00:07:07.036
and proactively go index your
website, find the deep links

00:07:07.406 --> 00:07:09.006
and bring them in a cloud index

00:07:09.066 --> 00:07:11.416
when they're seamlessly
available in search.

00:07:11.746 --> 00:07:19.486
This logic of seamlessness of on
device search and cloud search,

00:07:19.486 --> 00:07:21.906
it is very important to
the App Search story.

00:07:22.506 --> 00:07:25.236
There is a lot of content
in apps that's private

00:07:25.896 --> 00:07:29.236
and then content that's public,
it is not both at the same time.

00:07:29.706 --> 00:07:33.446
What we can do with this
approach is present a seamless

00:07:33.636 --> 00:07:36.996
search interface to the user
where the results are coming

00:07:36.996 --> 00:07:38.796
from the device index
or the cloud index.

00:07:39.266 --> 00:07:42.466
Let's look at examples of this.

00:07:42.606 --> 00:07:46.676
I searched for "northern lights"
a music festival, I'm presented

00:07:46.676 --> 00:07:49.156
with a result from the cloud
index from the EventBrite app,

00:07:50.186 --> 00:07:52.996
I don't have this app installed,
this result has a web link.

00:07:53.326 --> 00:07:59.796
I tap on it, it takes me to
Safari and opens the space.

00:07:59.886 --> 00:08:03.446
You notice that EventBrite
users, the smart app banner

00:08:04.256 --> 00:08:06.896
which encourages me
to download the app

00:08:07.326 --> 00:08:09.846
and experience this
content in a richer way,

00:08:10.526 --> 00:08:11.666
which is what I do now.

00:08:12.636 --> 00:08:16.376
Imagine if this was your
app, wouldn't it be awesome

00:08:16.746 --> 00:08:19.886
to get your content in
front of all iOS users

00:08:19.886 --> 00:08:23.246
in this very contextual way when
they're looking for something

00:08:23.466 --> 00:08:26.086
that your app provides
to promote app discovery?

00:08:26.186 --> 00:08:31.476
Here is an example where I
searched for "sprained ankle".

00:08:31.976 --> 00:08:36.515
I don't have an app for
medical conditions on my device.

00:08:36.515 --> 00:08:42.416
I'm offered multiple results
by App Search based on the apps

00:08:42.466 --> 00:08:45.226
that users have previously
found interesting

00:08:45.276 --> 00:08:46.986
or useful for this quarry.

00:08:47.856 --> 00:08:51.356
I can tap on this,
install the app

00:08:51.726 --> 00:08:57.296
and continue my exploration
inside of the app.

00:08:57.516 --> 00:08:59.726
So how does this work?

00:09:01.166 --> 00:09:06.456
App Search has three APIs
that are distinct but related.

00:09:06.846 --> 00:09:10.856
They're designed for
enabling different use cases

00:09:10.996 --> 00:09:11.716
of App Search.

00:09:12.786 --> 00:09:14.816
The first one is NSUserActivity.

00:09:14.816 --> 00:09:17.276
This is an extension
of the Handoff API

00:09:17.886 --> 00:09:19.126
that we released in iOS 8.

00:09:20.336 --> 00:09:23.726
When we looked at the
pattern of information access

00:09:23.856 --> 00:09:27.796
and search one of the things
we found is that users want

00:09:27.796 --> 00:09:31.286
to certainly for things
they have seen in the past.

00:09:31.286 --> 00:09:34.626
NSUserActivity makes
searching this information

00:09:34.626 --> 00:09:36.296
and indexing it very easy.

00:09:36.566 --> 00:09:41.246
It sort of works like how a web
browser maintains your browsing

00:09:41.246 --> 00:09:44.296
history and the user
activity maintains the form

00:09:44.296 --> 00:09:46.266
of app history and
makes it searchable.

00:09:46.836 --> 00:09:50.866
The second API is
called Core Spotlight.

00:09:50.866 --> 00:09:53.716
This is a very powerful way

00:09:53.716 --> 00:09:58.756
of comprehensively indexing
any content inside of your app.

00:09:58.756 --> 00:10:02.846
All built in apps in iOS
9, Mail, Notes, Calendar,

00:10:02.846 --> 00:10:04.416
they use this Core Spotlight.

00:10:04.676 --> 00:10:11.966
It gives you low level access
to the index on the device,

00:10:11.966 --> 00:10:14.806
it sort of works like a
database API you can add

00:10:14.806 --> 00:10:20.196
and remove items,
and it's the best way

00:10:20.476 --> 00:10:23.736
to index any private
content that you have inside

00:10:23.736 --> 00:10:24.656
of your app for the user.

00:10:25.746 --> 00:10:28.976
Third API is web markup.

00:10:29.976 --> 00:10:33.126
This is for apps that mirror
their content on a website.

00:10:33.796 --> 00:10:37.746
You can simply markup your
web content with deep links,

00:10:37.816 --> 00:10:40.526
annotation information,
we go out, crawl it,

00:10:41.046 --> 00:10:45.246
put it in the cloud index and
it is then seamlessly available

00:10:45.296 --> 00:10:47.196
to users through iOS 9 search.

00:10:47.746 --> 00:10:53.026
Here is the Agenda for
the rest of the session.

00:10:54.056 --> 00:10:57.196
We'll do a deep dive
into each of these APIs,

00:10:57.916 --> 00:11:02.166
show you how they work,
and we'll look at how best

00:11:02.166 --> 00:11:04.986
to adopt these APIs
in your apps.

00:11:07.496 --> 00:11:10.496
We'll talk about NSUserActivity
and Core Spotlight,

00:11:10.496 --> 00:11:11.506
I would like to ask Dave Salim.

00:11:12.516 --> 00:11:20.616
[Applause]

00:11:21.116 --> 00:11:25.346
>> DAVE SALIM: I'm Dave Salim,
a developer on App Search.

00:11:26.686 --> 00:11:29.116
We just heard about some
exciting new features

00:11:29.686 --> 00:11:32.096
to make the content in
your apps searchable

00:11:32.386 --> 00:11:33.256
and more discoverable.

00:11:34.196 --> 00:11:37.226
Now we'll take a look at some
of the APIs you can adopt

00:11:37.226 --> 00:11:38.116
to enable these features.

00:11:38.686 --> 00:11:43.576
We'll start off by taking
a look at NSUserActivity.

00:11:45.096 --> 00:11:48.306
A little background,
NSUserActivity was introduced

00:11:48.306 --> 00:11:50.686
in iOS 8 to support Handoff.

00:11:51.616 --> 00:11:53.806
Handoff is the amazing
feature that allows you

00:11:53.806 --> 00:11:56.546
to start an activity on one
device and pick up right

00:11:56.546 --> 00:11:57.936
where you left off on another.

00:11:59.246 --> 00:12:03.306
NSUserActivity is a lightweight
way to capture application state

00:12:03.486 --> 00:12:04.606
which can be restored later.

00:12:06.766 --> 00:12:11.916
Now new in iOS 9 is we're adding
the ability for NSUserActivities

00:12:12.036 --> 00:12:16.346
to be indexed and searchable
from iOS search and Safari.

00:12:16.976 --> 00:12:20.246
You will now be able
to associate metadata

00:12:20.246 --> 00:12:22.966
with your activities so you
can describe your activities.

00:12:23.396 --> 00:12:25.756
And that information
can be used to index

00:12:25.756 --> 00:12:27.676
and provide rich search results.

00:12:28.826 --> 00:12:30.626
When users engage with
your search results,

00:12:31.106 --> 00:12:32.106
your app will be launched

00:12:32.266 --> 00:12:34.666
and passed the activity
with that result.

00:12:35.326 --> 00:12:38.426
You can continue restoring the
state bringing the user right

00:12:38.426 --> 00:12:39.256
back to its content.

00:12:40.676 --> 00:12:42.566
Let's take a look at an example

00:12:42.836 --> 00:12:46.996
of how NSUserActivities
are added to the index.

00:12:47.036 --> 00:12:50.976
Here we have a recipe app and
as a user browses a recipe

00:12:50.976 --> 00:12:53.986
in this app, we create an
NSUserActivity capturing its

00:12:53.986 --> 00:12:56.656
state, providing it
the information needed

00:12:56.656 --> 00:12:57.786
to get back to this recipe.

00:12:58.336 --> 00:13:01.746
We then describe that
activity with information

00:13:01.746 --> 00:13:05.546
from the recipe, the title,
description, even a thumbnail.

00:13:07.066 --> 00:13:08.396
Then we inform the system

00:13:08.676 --> 00:13:11.316
that this activity represents
the user's current state

00:13:11.846 --> 00:13:14.076
and that activity is added
to the on-device index.

00:13:15.716 --> 00:13:19.246
So as a user moves about the
app we follow the same pattern

00:13:19.586 --> 00:13:22.076
of creating activities,
describing them,

00:13:22.156 --> 00:13:23.446
and informing the system

00:13:23.706 --> 00:13:25.596
that these represent
the users current state

00:13:26.036 --> 00:13:28.426
and these activities will be
added to the on-device index.

00:13:28.986 --> 00:13:34.156
Let's take a look at some of
the new and existing properties

00:13:34.156 --> 00:13:37.376
on NSUserActivity used
to support App Search.

00:13:38.846 --> 00:13:40.656
First, there is now properties

00:13:41.116 --> 00:13:44.276
to designate an activity's
capabilities, there is one

00:13:44.276 --> 00:13:48.206
for Handoff, by default Handoff
is enabled, if you choose not

00:13:48.206 --> 00:13:49.786
to enable Handoff
for your users,

00:13:49.786 --> 00:13:51.126
you can easily set
this to false.

00:13:51.196 --> 00:13:52.986
There is one for search

00:13:53.346 --> 00:13:56.086
which allows on-device
indexing of the activity.

00:13:57.176 --> 00:13:58.596
There is one for Public Indexing

00:13:58.666 --> 00:14:02.076
which we'll talk
about in a minute.

00:14:02.226 --> 00:14:04.156
Next, how do you
describe your activity?

00:14:04.566 --> 00:14:06.536
First you give your
activity a title.

00:14:07.436 --> 00:14:10.246
This title is used both for
indexing and for display

00:14:10.246 --> 00:14:11.156
in the search results.

00:14:12.226 --> 00:14:14.616
You can also provide keywords
to describe your activity,

00:14:14.786 --> 00:14:15.896
these will also be indexed.

00:14:16.516 --> 00:14:19.776
To fully more describe your
activity you can use a new class

00:14:19.776 --> 00:14:20.406
we're introducing

00:14:20.406 --> 00:14:23.536
in Core Spotlight named
CSSearchableItem.attributeSet

00:14:23.646 --> 00:14:25.426
which makes it easy to
describe the activity

00:14:25.596 --> 00:14:27.596
by setting properties
and you can set this

00:14:27.596 --> 00:14:30.436
on the contentAttributes
property of NSUserActivity.

00:14:31.526 --> 00:14:34.676
If you prefer for your
activity to only be shown

00:14:34.676 --> 00:14:40.206
until a certain date, you can
provide an expiration date.

00:14:40.406 --> 00:14:43.976
Also if your activity's content
can be restored on the web

00:14:44.836 --> 00:14:47.056
or you support Safari's
universal links,

00:14:47.606 --> 00:14:49.186
set the webpage URL property

00:14:49.566 --> 00:14:51.206
and the system will
appropriately launch your

00:14:51.206 --> 00:14:54.346
activity in Safari
or in your app.

00:14:57.216 --> 00:14:59.506
Now let's take a look at
how we create an activity.

00:15:00.046 --> 00:15:05.076
Here we're instantiating an
instance of an NSUserActivity

00:15:05.256 --> 00:15:07.446
and we're providing
it an activity type.

00:15:08.376 --> 00:15:10.106
This is a unique
string that you provide,

00:15:10.106 --> 00:15:12.426
this is the same string
you provide to the system

00:15:12.786 --> 00:15:15.736
to let it know what activities
your app is capable of handling.

00:15:17.046 --> 00:15:19.936
We recommend a reverse DNS-style
notation for these types

00:15:19.936 --> 00:15:22.976
of strings to keep them unique.

00:15:23.116 --> 00:15:24.756
Next, our activity
needs a title.

00:15:25.366 --> 00:15:28.096
Again, the title is used
for indexing and used

00:15:28.096 --> 00:15:29.816
as a display title in
the search results.

00:15:30.296 --> 00:15:33.346
Next, we're setting a dictionary

00:15:33.346 --> 00:15:36.356
on the userInfo property
containing the information we

00:15:36.356 --> 00:15:38.346
need to recreate the state.

00:15:38.726 --> 00:15:44.456
Next we're enabling on-device
indexing of the activity

00:15:44.766 --> 00:15:46.836
by setting eligibleForSearch
to true,

00:15:47.166 --> 00:15:51.346
and with this activity it
represents what the user's

00:15:51.346 --> 00:15:54.566
current state is and we inform
the system by becomeCurrent

00:15:54.566 --> 00:15:56.536
on the activity and the
activity will be added

00:15:56.716 --> 00:15:57.726
to the on-device index.

00:15:58.146 --> 00:16:00.766
What does this look
like for your users?

00:16:01.456 --> 00:16:04.036
Now users can be
returned search results

00:16:04.176 --> 00:16:06.766
for activities indexed
from your apps.

00:16:08.236 --> 00:16:11.336
Here we can see how the title
property maps to the title

00:16:11.626 --> 00:16:17.196
in the search result and if you
provide more information using

00:16:17.196 --> 00:16:20.186
the contentAttributes set we
can provide richer results.

00:16:20.786 --> 00:16:24.136
So now what happens
when a user taps on one

00:16:24.136 --> 00:16:25.016
of your search results?

00:16:26.506 --> 00:16:29.106
A UI application delegate
method in your app is called,

00:16:29.686 --> 00:16:31.136
the same one used for Handoff.

00:16:31.596 --> 00:16:34.076
Here we see continueUserActivity
restorationHandler.

00:16:35.116 --> 00:16:37.456
And we pass that activity
for the search result.

00:16:37.976 --> 00:16:42.696
We check its activity
type and we can continue

00:16:42.696 --> 00:16:45.456
to restore the state using
the information populated

00:16:45.456 --> 00:16:46.206
in the user info.

00:16:48.396 --> 00:16:52.106
So now users can tap on results
for activities from your app

00:16:52.106 --> 00:17:00.216
and you can restore them right
back to the proper state.

00:17:00.216 --> 00:17:03.516
NSUserActivity in App
Search is a great way

00:17:03.516 --> 00:17:05.425
to let your users get back

00:17:05.425 --> 00:17:06.976
to the content they
previously visited.

00:17:08.286 --> 00:17:09.695
We wanted to take
it a step further.

00:17:09.695 --> 00:17:13.796
So when we were designing this
feature we took a look at a lot

00:17:13.796 --> 00:17:16.636
of apps in the App
Store and noticed a lot

00:17:16.636 --> 00:17:20.766
of apps have content that's
available to many other users.

00:17:21.406 --> 00:17:25.826
So we thought wouldn't it
be great for discoverability

00:17:25.976 --> 00:17:29.106
if we could take the activities
representing public content

00:17:29.866 --> 00:17:32.896
and make them searchable by all
users of the app not just ones

00:17:32.896 --> 00:17:34.796
that previously visited
that content?

00:17:37.196 --> 00:17:38.386
That's what we're doing

00:17:38.386 --> 00:17:40.696
with NSUserActivity
and Public Indexing.

00:17:42.226 --> 00:17:42.966
So how does this work?

00:17:43.746 --> 00:17:46.056
As a user navigates
the public content

00:17:46.356 --> 00:17:50.006
in your apps you create
NSUserActivities capturing

00:17:50.006 --> 00:17:54.046
that state and you
designate them as public.

00:17:55.436 --> 00:17:58.276
As users engage with
the search results

00:17:58.276 --> 00:18:01.936
for these activities
the activity is shared

00:18:01.936 --> 00:18:05.496
with our cloud index and
made searchable by all users

00:18:05.496 --> 00:18:08.276
of the app, not just ones that
previously visited the content.

00:18:09.486 --> 00:18:11.866
If your activity can
be restored on the web

00:18:11.916 --> 00:18:15.536
and you set the webpageURL
property you can massively

00:18:15.536 --> 00:18:19.126
increase its audience by being
searchable in iOS Safari.

00:18:21.116 --> 00:18:25.056
So let's see how we designate
an activity as public.

00:18:26.016 --> 00:18:28.336
We can start off with the
activity we previously saw

00:18:29.766 --> 00:18:31.366
and we can set one
additional property.

00:18:31.366 --> 00:18:34.156
Here we're setting
eligibleForPublicIndexing

00:18:34.376 --> 00:18:38.366
to true and we just designated
this activity as public.

00:18:40.196 --> 00:18:42.666
Even though we have set
this property to true,

00:18:43.836 --> 00:18:45.546
that doesn't mean
that the contents

00:18:45.546 --> 00:18:48.666
of the activity are immediately
shared with our cloud index.

00:18:49.126 --> 00:18:55.326
For an activity to be shared
it first needs to appear

00:18:55.326 --> 00:18:58.706
in search results and be
engaged with by many users.

00:18:59.356 --> 00:19:06.016
We track these engagements using
a zero-knowledge proof method

00:19:06.316 --> 00:19:08.656
which keeps the activities'
contents private

00:19:09.276 --> 00:19:13.116
until an engagement
threshold is met.

00:19:13.326 --> 00:19:17.166
So here in more detail as a user
engages with the search result

00:19:17.166 --> 00:19:20.726
for an activity designated
as public a one-way hash

00:19:21.076 --> 00:19:23.456
of the activity is sent
to our cloud index.

00:19:23.946 --> 00:19:30.276
Not until the cloud index has
seen the same hash many times

00:19:30.276 --> 00:19:32.076
from users is the content

00:19:32.346 --> 00:19:34.296
of the activity shared
with our cloud index.

00:19:34.816 --> 00:19:37.886
We took extra measure

00:19:37.886 --> 00:19:42.596
in defining the feature this way
first to respect user privacy

00:19:43.156 --> 00:19:46.216
and second to prevent
any user specific data

00:19:46.216 --> 00:19:48.956
from accidentally being
shared with our cloud index.

00:19:50.696 --> 00:19:55.906
In addition, the properties on
NSUserActivity eligibleForSearch

00:19:55.986 --> 00:19:59.166
and eligibleForPublicIndexing
are false by default

00:20:00.076 --> 00:20:02.836
and for everyone here,
only designate public

00:20:03.076 --> 00:20:06.036
on your activities that
represent content and features

00:20:06.226 --> 00:20:08.866
that are popular among
many of your users.

00:20:13.656 --> 00:20:16.246
Now let's take a look at some
additional benefits you get

00:20:16.246 --> 00:20:17.836
for adopting NSUserActivity.

00:20:18.636 --> 00:20:20.006
The first is Handoff.

00:20:20.866 --> 00:20:23.646
So by adopting the API you've
just added support for Handoff.

00:20:23.646 --> 00:20:26.986
If you choose, you can allow
your users to start an activity

00:20:27.706 --> 00:20:30.376
in your app on one device
and continue it on another.

00:20:34.136 --> 00:20:37.056
The next two are related
to new features from Siri.

00:20:39.216 --> 00:20:43.176
As shown in the keynote, swiping
left of home presents the user

00:20:43.446 --> 00:20:44.486
with Siri suggestions.

00:20:45.706 --> 00:20:48.516
Along with suggested
Contacts and suggested apps

00:20:48.516 --> 00:20:52.866
and nearby places, activities
from your app can be suggested.

00:20:53.566 --> 00:20:56.696
Here we see a suggestion for
an upcoming calendar event

00:20:57.396 --> 00:21:00.126
and a suggestion to
resume a podcast.

00:21:00.566 --> 00:21:05.106
Next is the Siri
smart reminders.

00:21:06.016 --> 00:21:10.096
Now users can ask Siri to
remind them of specific content

00:21:10.256 --> 00:21:13.706
from your apps and when
they do the activity

00:21:13.706 --> 00:21:15.686
from your app is
embedded in the reminder.

00:21:15.686 --> 00:21:18.366
It is an easy way
for users to get back

00:21:18.366 --> 00:21:20.586
to the content they want
to be reminded about.

00:21:21.746 --> 00:21:26.536
NSUserActivity in App Search
makes it easy for your users

00:21:26.536 --> 00:21:28.536
to get back to the content
they previously visited

00:21:28.536 --> 00:21:31.586
and it can make the
public content

00:21:31.586 --> 00:21:33.156
in your apps more discoverable.

00:21:37.576 --> 00:21:39.926
Next let's talk about
the next API you can use

00:21:39.926 --> 00:21:41.896
to make the content in
your apps searchable,

00:21:42.496 --> 00:21:44.086
that's Core Spotlight.

00:21:47.316 --> 00:21:50.346
Core Spotlight is a
brand-new framework on iOS 9.

00:21:50.816 --> 00:21:54.206
It provides a database-like API

00:21:54.746 --> 00:21:57.136
so you can add, update,
delete items.

00:21:58.526 --> 00:22:01.286
The items you indexed using
Core Spotlight will be searchable

00:22:01.856 --> 00:22:06.266
in iOS search and it is used by
our own built-in apps, Messages,

00:22:06.266 --> 00:22:09.226
Mail, Calendar, Notes,
you can get an idea

00:22:09.516 --> 00:22:11.886
of what you can index
with Core Spotlight.

00:22:12.406 --> 00:22:17.706
Let's take a look at the API.

00:22:17.936 --> 00:22:19.886
First we start off with
a CSSearchableItem.

00:22:21.056 --> 00:22:23.826
This will represent the
unique item we wish to index.

00:22:24.256 --> 00:22:29.526
Next we associate a
CSSearchableItemAttributeSet

00:22:30.176 --> 00:22:33.076
which is an easy way to describe
the item by setting properties.

00:22:35.716 --> 00:22:39.346
Then we pass the CSSearchItem
to the CSSearchableIndex

00:22:39.926 --> 00:22:42.476
and the item is added
to the on-device index.

00:22:47.616 --> 00:22:52.156
Let's see how we go
about creating an item.

00:22:52.356 --> 00:22:53.926
First we start off
by creating the

00:22:53.926 --> 00:22:55.556
CSSearchableItemAttributeSet.

00:22:56.816 --> 00:22:58.736
Here we have one for an image.

00:23:02.756 --> 00:23:05.596
Next we set a few properties
on the attribute set

00:23:05.596 --> 00:23:07.976
to describe the item
we wish to index.

00:23:07.976 --> 00:23:10.576
Here we're setting a
title and a description.

00:23:11.966 --> 00:23:14.096
We'll see how the title
and the description map

00:23:14.206 --> 00:23:19.366
to the search result in a bit.

00:23:19.576 --> 00:23:21.516
Next we create the
CSSearchableItem

00:23:21.516 --> 00:23:24.606
and we supply a unique
identifier,

00:23:24.766 --> 00:23:26.566
this is an identifier
that the app can use

00:23:26.566 --> 00:23:29.856
to reference the actual
data that we wish to index.

00:23:30.416 --> 00:23:33.426
We can supply a domain
identifier.

00:23:33.566 --> 00:23:36.216
This is a way of
grouping items together.

00:23:36.216 --> 00:23:38.666
In our example here
we're indexing a photo.

00:23:38.796 --> 00:23:42.046
We may want to group all
of our photos together

00:23:42.046 --> 00:23:44.126
under a domain identifier
representing an album.

00:23:45.286 --> 00:23:47.656
And we provide an attribute
set which we created

00:23:47.656 --> 00:23:52.416
above describing the item.

00:23:52.626 --> 00:23:56.106
Next, we index the item
calling indexSearchableItems

00:23:56.266 --> 00:23:58.956
on the CSSearchableIndex
passing it an array

00:23:58.956 --> 00:24:00.206
of items we wish to index.

00:24:00.726 --> 00:24:04.236
What does this look
like for users?

00:24:05.216 --> 00:24:07.176
Users can now go into iOS search

00:24:07.626 --> 00:24:09.856
and be returned search
results things in your app

00:24:09.926 --> 00:24:11.886
that have been indexed
using Core  Spotlight.

00:24:16.916 --> 00:24:19.986
Here is how some of the
attributes, properties we set

00:24:19.986 --> 00:24:22.686
on the attribute set map
to the search result.

00:24:23.096 --> 00:24:28.936
What happens when a user taps
on one of your search results,

00:24:31.396 --> 00:24:34.256
a UI application delegate
method in your app is called,

00:24:34.946 --> 00:24:36.526
the same one used for Handoff

00:24:37.056 --> 00:24:42.206
and here we see again
ContinuousUserActivity

00:24:42.206 --> 00:24:45.776
RestorationHandler and this time
you know you're being launched

00:24:45.776 --> 00:24:50.346
by a Core  Spotlight item
because the activity type is set

00:24:50.346 --> 00:24:51.956
to CSSearchableItemActionType

00:24:52.326 --> 00:24:55.386
and the unique identifier
we used

00:24:55.386 --> 00:24:59.096
when we initialized the
searchable item is accessible

00:24:59.276 --> 00:25:00.956
for the value

00:25:01.086 --> 00:25:03.426
in CSSearchableItem
ActivityIdentifier

00:25:03.706 --> 00:25:04.476
in the userInfo.

00:25:07.156 --> 00:25:11.286
So now users can tap on search
results and you can return them

00:25:11.286 --> 00:25:13.216
to the right context
for that item.

00:25:13.316 --> 00:25:19.186
Now let's talk about
maintaining your index.

00:25:20.256 --> 00:25:22.676
The index supports
updating items.

00:25:23.796 --> 00:25:27.246
Over time the title of
your item may change,

00:25:27.246 --> 00:25:30.666
the description may change, the
user updates, certain fields

00:25:30.666 --> 00:25:33.606
of your -- representing your
item, you can update them

00:25:34.646 --> 00:25:37.136
by calling the same method
you used to index items

00:25:37.606 --> 00:25:40.286
by creating a CSSearchableItem
with a unique identifier

00:25:40.766 --> 00:25:44.466
that you wish to update
associating an updated

00:25:44.466 --> 00:25:46.056
CSSearchableItemAttributeSet

00:25:47.036 --> 00:25:49.536
and indexing the item
calling CSSearchableItems.

00:25:52.136 --> 00:25:55.146
Another common maintenance
routine is deleting items.

00:25:55.786 --> 00:25:58.256
It is good practice
to delete any items

00:25:58.256 --> 00:26:00.116
that are no longer
relevant from the index.

00:26:00.636 --> 00:26:02.886
We support multiple
ways to delete items.

00:26:03.716 --> 00:26:05.356
First, you can delete
by identifier

00:26:06.296 --> 00:26:08.506
so you can pass an
array of identifiers

00:26:09.236 --> 00:26:11.206
to delete searchable
items with identifiers.

00:26:11.726 --> 00:26:14.356
Those items will be
deleted from the index.

00:26:14.776 --> 00:26:18.416
You can delete by
domain identifier.

00:26:18.716 --> 00:26:21.156
You saw earlier when
creating our item,

00:26:21.906 --> 00:26:24.976
you can use a domain identifier
to group items together.

00:26:25.506 --> 00:26:29.596
You can pass the
identifier and the group

00:26:29.596 --> 00:26:30.556
of items will be deleted

00:26:30.626 --> 00:26:32.026
when calling
deleteSearchableItems

00:26:32.216 --> 00:26:33.206
WithDomainIdentifiers.

00:26:33.616 --> 00:26:38.036
Last, you can delete all
the items from your index

00:26:38.566 --> 00:26:40.736
by calling
deleteAllSearchableItems

00:26:41.106 --> 00:26:41.986
WithCompletion handler.

00:26:42.466 --> 00:26:49.926
Now let's take a look at a
demo to see how easy it is

00:26:49.926 --> 00:26:51.856
to add Core Spotlight
to your apps.

00:26:52.616 --> 00:26:55.566
Our demo app is a photo
viewer displaying a collection

00:26:55.566 --> 00:26:55.986
of photos.

00:26:56.396 --> 00:26:59.496
I'll show you how easy it is to
index the items by their title

00:27:00.606 --> 00:27:02.246
and we'll look at
the user experience

00:27:02.606 --> 00:27:04.056
of searching and restoring.

00:27:12.636 --> 00:27:16.326
Here we have Xcode and
the iPhone simulator.

00:27:16.946 --> 00:27:20.446
Let's launch our app
first to get an idea

00:27:20.446 --> 00:27:21.146
of what it looks like.

00:27:22.306 --> 00:27:24.786
Here we have a collection
of photos,

00:27:25.436 --> 00:27:28.186
each photo has a title below it.

00:27:28.286 --> 00:27:29.596
There are some nice
sunsets in here.

00:27:30.966 --> 00:27:32.906
Okay. Let's see how easy it is

00:27:33.066 --> 00:27:34.676
to index these photos
using their title.

00:27:36.736 --> 00:27:40.816
You go in Spotlight, and we
have a method, index items

00:27:41.616 --> 00:27:44.946
and we'll call this when
the data model initializes

00:27:45.516 --> 00:27:50.806
and we'll enumerate over all
of the photos in the data store

00:27:50.806 --> 00:27:54.356
and we'll add each photo
using Core Spotlight.

00:27:55.486 --> 00:28:00.786
We'll start off by creating
the attribute set describing

00:28:02.756 --> 00:28:03.666
the photo.

00:28:03.666 --> 00:28:06.816
Here we're creating a
CSSearchableItemAttributeSet

00:28:08.616 --> 00:28:09.516
for an image.

00:28:10.376 --> 00:28:14.036
Then we'll take the title
from the data model and set it

00:28:14.036 --> 00:28:16.426
on the Title property
of the attribute set.

00:28:17.836 --> 00:28:20.356
We'll also include a
description based on that title.

00:28:25.716 --> 00:28:27.876
Next we'll create
the item itself.

00:28:28.676 --> 00:28:32.116
Here we're passing in a unique
identifier which represents

00:28:32.256 --> 00:28:35.886
that we can use to reference
the image in our data store.

00:28:40.756 --> 00:28:46.626
Then we'll call
indexSearchableItems passing

00:28:46.626 --> 00:28:49.176
in the item into the
CSSearchableIndex.

00:28:50.726 --> 00:28:54.396
Now let's build and run this app
and here we are back in our app

00:28:54.396 --> 00:28:59.146
and this time when our app
initialized it called index

00:28:59.146 --> 00:29:01.856
items and enumerated all of
the photos in the collection

00:29:01.886 --> 00:29:05.896
and added each photo
to the on-device index.

00:29:07.806 --> 00:29:10.336
Now we can go into iOS search

00:29:11.166 --> 00:29:14.226
and I remember seeing some
nice sunsets in there.

00:29:14.226 --> 00:29:18.976
We can see results from
our app for these sunsets

00:29:19.306 --> 00:29:23.376
with the Title of
"sunset" in them.

00:29:23.586 --> 00:29:26.286
Tapping on one of
the results allows us

00:29:26.286 --> 00:29:27.966
to restore the app right back

00:29:28.186 --> 00:29:29.496
to the proper context
for that item.

00:29:30.516 --> 00:29:37.306
[Applause]

00:29:37.806 --> 00:29:39.586
>> DAVE SALIM: That's
how easy it is

00:29:40.196 --> 00:29:41.986
to index items using
Core Spotlight.

00:29:42.956 --> 00:29:44.146
So some additional features

00:29:44.846 --> 00:29:47.156
in Core Spotlight is
support for batching.

00:29:47.926 --> 00:29:51.136
Your app may choose to index a
large number of items and wish

00:29:51.456 --> 00:29:52.856
to break it up in batches.

00:29:53.366 --> 00:29:56.616
The index supports saving
the State of where you are

00:29:56.616 --> 00:29:58.356
in your batch process
and retrieving it

00:29:58.356 --> 00:30:00.386
so that you can resume
where you left off.

00:30:01.186 --> 00:30:04.016
There is also support for
a delegate and extension

00:30:04.016 --> 00:30:06.146
so that the index can
communicate with your app

00:30:06.476 --> 00:30:08.116
in the foreground, background,

00:30:08.116 --> 00:30:09.216
or when it is not
currently running.

00:30:10.316 --> 00:30:12.256
There is support for
data protection classes

00:30:12.636 --> 00:30:14.816
so you can choose the
appropriate security policy

00:30:15.236 --> 00:30:16.536
for the information
that you're indexing.

00:30:17.856 --> 00:30:21.446
Core Spotlight is an easy
to adopt database-like API

00:30:22.336 --> 00:30:25.206
which you can use to
index any features

00:30:25.206 --> 00:30:27.326
and content from your apps.

00:30:28.536 --> 00:30:30.576
So now I'll hand it over
to Jason Douglas talk

00:30:30.576 --> 00:30:32.596
about the third API, web markup.

00:30:33.516 --> 00:30:43.176
[Applause]

00:30:43.676 --> 00:30:44.546
>> JASON DOUGLAS: Hello.

00:30:45.196 --> 00:30:46.416
My name is Jason Douglas.

00:30:46.446 --> 00:30:47.626
I'm from the Siri team.

00:30:47.856 --> 00:30:49.576
We'll talk about web markup.

00:30:49.956 --> 00:30:53.476
You have seen two amazing ways

00:30:53.476 --> 00:30:55.446
to make your app
contents searchable both

00:30:55.536 --> 00:30:59.956
in NSUserActivity and
Core Spotlight, the third set

00:30:59.956 --> 00:31:02.226
of those APIs is web markup.

00:31:02.596 --> 00:31:04.666
And this is for content
from the app

00:31:04.976 --> 00:31:06.746
which is also available
on a website.

00:31:07.276 --> 00:31:11.966
The key to making this
connection is a mobile

00:31:11.966 --> 00:31:12.446
deep link.

00:31:12.746 --> 00:31:14.856
A deep link is a lot
like a URL but rather

00:31:14.856 --> 00:31:17.896
than to a webpage
it links to content,

00:31:18.046 --> 00:31:23.966
specific content directly
inside of your app.

00:31:24.236 --> 00:31:25.656
You saw this diagram earlier

00:31:26.026 --> 00:31:28.786
where we're building
both an on-device index

00:31:28.786 --> 00:31:31.086
and a cloud index
from public items

00:31:31.086 --> 00:31:32.526
that are sourced
from the device.

00:31:33.346 --> 00:31:35.236
Well, to call crawl content

00:31:35.236 --> 00:31:38.566
from websites Apple now has
a web crawler called AppleBot

00:31:38.826 --> 00:31:41.246
which is going out and
crawling app websites

00:31:41.276 --> 00:31:42.346
for quite some time now.

00:31:43.106 --> 00:31:45.576
And for a lot of this content,
you didn't have to do anything.

00:31:45.676 --> 00:31:49.876
If your website supports
mobile deep links, we were able

00:31:49.876 --> 00:31:53.056
to go ahead, discover that
content and make it searchable

00:31:53.096 --> 00:31:54.926
from iOS search and Safari.

00:31:56.736 --> 00:32:00.296
This content when
pulled from the website,

00:32:00.296 --> 00:32:04.396
we surface it directly in search
and Safari like you see here.

00:32:05.816 --> 00:32:07.096
And when a user taps on one

00:32:07.096 --> 00:32:09.276
of the results they're
deep linked directly

00:32:09.276 --> 00:32:11.386
into your app seeing the content

00:32:11.386 --> 00:32:13.276
that they saw from
search results.

00:32:13.746 --> 00:32:18.076
You will notice there is a
link to get back to your app

00:32:18.466 --> 00:32:19.346
which you get for free.

00:32:19.686 --> 00:32:21.096
You don't have to
do anything special

00:32:21.096 --> 00:32:22.516
in your app to get
this behavior.

00:32:23.486 --> 00:32:26.116
Users simply have to tap on
that link in the top left corner

00:32:26.366 --> 00:32:27.836
and they're taken
back to searching.

00:32:27.836 --> 00:32:29.946
This makes it seamless
to go back and forth.

00:32:31.396 --> 00:32:34.686
There are four simple steps

00:32:34.786 --> 00:32:38.706
to making your apps content
searchable via the web markup.

00:32:39.606 --> 00:32:43.086
The first step is making
sure Apple can discover

00:32:43.416 --> 00:32:45.216
and index your website.

00:32:46.436 --> 00:32:50.206
The second step is ensuring that
your website contains markup

00:32:50.206 --> 00:32:51.256
for mobile deep links.

00:32:51.706 --> 00:32:54.486
Next you want to also be sure

00:32:54.486 --> 00:32:59.546
that your app can handle opening
those deep links and finally,

00:32:59.546 --> 00:33:01.526
this is optional, but
highly recommended,

00:33:01.736 --> 00:33:03.756
is adding mark-up
for structured data.

00:33:03.876 --> 00:33:06.096
We'll talk more about
what this is.

00:33:06.136 --> 00:33:09.566
This allows your results to
look rich and engaging to users.

00:33:10.106 --> 00:33:14.806
So the first step, making your
website discoverable by Apple.

00:33:14.806 --> 00:33:18.066
We have been going out crawling
the web for a while looking

00:33:18.066 --> 00:33:20.426
for sites with deep
links, the easiest way

00:33:20.426 --> 00:33:23.286
to make sure we can find the
app's website is to use it

00:33:23.286 --> 00:33:25.486
as either your support
or marketing URL

00:33:25.726 --> 00:33:28.426
when you submit the
site to iTunes Connect.

00:33:29.836 --> 00:33:33.096
When you submit your app there
is two text boxes for this.

00:33:33.096 --> 00:33:34.116
It is very easy.

00:33:34.426 --> 00:33:37.496
We use them as a starting
point for going out

00:33:37.496 --> 00:33:38.986
and finding mobile deep links.

00:33:39.376 --> 00:33:43.526
The next thing is making sure

00:33:43.526 --> 00:33:46.696
that your website has
markup for deep links.

00:33:47.506 --> 00:33:50.076
The most popular way, you have
probably seen this before,

00:33:50.496 --> 00:33:52.296
are something called
Smart App Banners,

00:33:52.296 --> 00:33:53.896
they have been around
for a while.

00:33:53.946 --> 00:33:57.396
This is a simple <meta>
tag specifying the app

00:33:57.396 --> 00:34:00.016
and what the deep
link URL should be.

00:34:01.006 --> 00:34:04.296
Users when they visit your app's
website in Safari see a banner.

00:34:04.706 --> 00:34:07.266
If the app is not installed
it allows them to go directly

00:34:07.266 --> 00:34:08.576
to the App Store to install it

00:34:08.835 --> 00:34:12.255
or if it is already installed
you can click the view button

00:34:12.525 --> 00:34:14.956
to view that content
directly inside of your app.

00:34:15.835 --> 00:34:18.856
If you want to learn more
about Smart App Banners check

00:34:18.856 --> 00:34:21.856
out the Safari Web Content Guide
which has more information.

00:34:22.436 --> 00:34:29.116
In iOS 9 there is a new
feature called Universal Links

00:34:29.436 --> 00:34:30.926
which is an even
better alternative

00:34:30.926 --> 00:34:31.926
to Smart App Banners.

00:34:33.085 --> 00:34:37.266
There are a few advantages
over the custom URL schemes

00:34:37.266 --> 00:34:39.545
that you may have used in
the past for deep links.

00:34:40.766 --> 00:34:42.576
The first of the features
is they're unique.

00:34:43.056 --> 00:34:47.156
Multiple apps can't
claim the same custom --

00:34:47.156 --> 00:34:49.076
they can claim the
same custom URL scheme

00:34:49.076 --> 00:34:51.416
but with universal
links they can't collide

00:34:51.676 --> 00:34:55.505
because we use the app website
as a way to uniquely identify.

00:34:56.565 --> 00:35:00.226
It is secure, just because
you say that an app belongs

00:35:00.226 --> 00:35:03.036
to a certain website we
don't take it for granted.

00:35:03.656 --> 00:35:06.946
A signed certificate is
uploaded to the website

00:35:06.946 --> 00:35:10.366
and when the user installs your
app we check the certificate

00:35:10.366 --> 00:35:13.716
to make sure that they're
truly linked together.

00:35:15.296 --> 00:35:19.656
They're also flexible so users
can control the behavior whether

00:35:19.656 --> 00:35:22.596
they prefer being within the
website or within the app,

00:35:22.596 --> 00:35:24.476
they can easily toggle
this behavior

00:35:24.556 --> 00:35:26.536
and choose the default
they want the most.

00:35:26.806 --> 00:35:29.336
This means that you can
also avoid using things

00:35:29.336 --> 00:35:31.646
like JavaScript to
try to ask the user

00:35:31.866 --> 00:35:32.866
which they would prefer.

00:35:33.176 --> 00:35:35.716
Another great advantage of not
using Javascript is it's one

00:35:35.716 --> 00:35:38.066
of the types of deep
link which we have a bit

00:35:38.066 --> 00:35:39.606
of a hard time understanding.

00:35:39.606 --> 00:35:42.606
Using something like Universal
Links ensures we're able

00:35:42.606 --> 00:35:44.296
to parse your deep
links correctly.

00:35:45.436 --> 00:35:47.586
The final advantage,
they're universal.

00:35:48.276 --> 00:35:52.916
A Universal Link is a single URL
used both for your web content

00:35:52.916 --> 00:35:54.496
as well as your app's content.

00:35:54.756 --> 00:35:57.416
You don't need to have two
separate URLs, one for web

00:35:57.416 --> 00:35:59.416
and one for the deep
link content.

00:35:59.966 --> 00:36:06.326
If using Universal Links
we'll still need to know

00:36:06.326 --> 00:36:09.026
about your deep links
via your web markup,

00:36:09.026 --> 00:36:11.406
so you want to use
Smart App Banners

00:36:11.726 --> 00:36:13.696
or an alternative
supported standard.

00:36:14.006 --> 00:36:16.976
This also ensures that if a user
doesn't have the app installed

00:36:17.206 --> 00:36:19.796
they're still able to go
discover your app, and find it,

00:36:19.796 --> 00:36:23.496
install it since Universal Links
is a feature that's enabled once

00:36:23.496 --> 00:36:24.636
your app is installed.

00:36:25.536 --> 00:36:28.596
To learn more, I highly
recommend that you check

00:36:28.596 --> 00:36:30.966
out the session Seamless
Linking to Your App

00:36:31.176 --> 00:36:31.926
which will be tomorrow.

00:36:35.636 --> 00:36:39.936
So the next step or the other
alternatives we also support

00:36:39.936 --> 00:36:42.776
for deep linking, one of
those is Twitter cards

00:36:43.616 --> 00:36:48.236
which also uses <meta> tags
and Facebook app links.

00:36:48.426 --> 00:36:52.556
In addition to just supporting
smart app banners we support

00:36:52.556 --> 00:36:54.536
these as well and
we'll add support

00:36:54.536 --> 00:36:57.916
for other popular standards
that may come along later.

00:37:01.876 --> 00:37:04.896
Finally, making sure that
your app can open deep links.

00:37:05.056 --> 00:37:08.396
In the past and you may
be familiar with this,

00:37:08.396 --> 00:37:09.896
you may have already
done this for your app,

00:37:10.146 --> 00:37:12.406
is making sure you've
implemented openURL.

00:37:13.526 --> 00:37:16.066
Here is a simple
example of using openURL.

00:37:16.796 --> 00:37:19.526
In this case in our
example we have a URL

00:37:19.526 --> 00:37:22.416
which can view profiles and
it simply takes a profile ID.

00:37:22.416 --> 00:37:26.896
We simply parse the URL
with NSURL components

00:37:28.026 --> 00:37:31.396
and pass the profile ID
from the query parameters

00:37:31.696 --> 00:37:32.656
to the view controller.

00:37:33.026 --> 00:37:35.736
This is a very simple
example of how easy it is

00:37:35.766 --> 00:37:38.046
to support deep linking
for your app.

00:37:40.916 --> 00:37:43.386
So now I want to talk
about structured data

00:37:43.386 --> 00:37:44.726
which I alluded to earlier.

00:37:45.786 --> 00:37:49.376
Structured data is something in
addition to the mobile deep link

00:37:49.736 --> 00:37:51.306
which lets us understand

00:37:51.306 --> 00:37:53.336
and parse information
about your results.

00:37:53.956 --> 00:37:57.476
Parsing freeform web
text is not an easy task

00:37:57.476 --> 00:37:59.576
and this helps us
out significantly.

00:38:00.366 --> 00:38:03.126
It also ensures that
your results can stand

00:38:03.126 --> 00:38:06.516
out to the user rather than
just having text you can have an

00:38:06.516 --> 00:38:09.436
image, ratings, and
other key things

00:38:09.476 --> 00:38:10.876
that are called out
in the result.

00:38:11.276 --> 00:38:12.976
It can also help
improve your ranking

00:38:13.346 --> 00:38:16.276
because we know this result is
rich and engaging to the user,

00:38:16.566 --> 00:38:19.136
we may tend to surface it
more than other results.

00:38:19.806 --> 00:38:23.316
So one standard for
adding this type

00:38:23.316 --> 00:38:25.276
of structured data
is open graph.

00:38:25.976 --> 00:38:28.916
Open graph you can
specify an image, an audio,

00:38:28.916 --> 00:38:31.006
or even a video file
with your result.

00:38:31.316 --> 00:38:33.606
You simply place this
markup on your webpage

00:38:33.606 --> 00:38:34.776
and we'll then associate it

00:38:34.776 --> 00:38:39.976
with the deep link we also
find on the same page.

00:38:40.996 --> 00:38:42.766
Another very common format

00:38:42.846 --> 00:38:46.006
for structured data is
schema.org that's been

00:38:46.006 --> 00:38:50.046
around for a while and we're
adding support for it rapidly.

00:38:50.846 --> 00:38:53.876
A common schema.org
is AggregateRatings

00:38:53.876 --> 00:38:55.566
for ratings and reviews.

00:38:56.326 --> 00:38:59.286
This example we're showing
adding the AggregateRating

00:38:59.286 --> 00:39:05.586
markup with the schema.org micro
data and we support RDFA as well

00:39:05.586 --> 00:39:09.196
as JSON-LD depending on
what you're comfortable

00:39:09.196 --> 00:39:12.716
with implementing on your
website we'll support that

00:39:12.716 --> 00:39:14.616
and parse that to
be all-inclusive.

00:39:17.196 --> 00:39:19.326
Now let's dissect an example

00:39:19.326 --> 00:39:20.756
of how this works
in the real world.

00:39:21.106 --> 00:39:23.536
Here is an Airbnb
result and the first

00:39:23.536 --> 00:39:26.156
and most obvious thing is
the title which we parsed

00:39:26.156 --> 00:39:30.256
with standard HTML <title> tags
and then we go a step further.

00:39:31.186 --> 00:39:33.066
There is a price
per night shown.

00:39:33.426 --> 00:39:38.936
We're able to do this because
on this webpage the Offer schema

00:39:38.936 --> 00:39:41.736
was added and it is
associated with a hotel.

00:39:42.846 --> 00:39:45.586
We're able to parse that price
and price currency and show

00:39:45.586 --> 00:39:47.406
that directly in the result.

00:39:48.876 --> 00:39:53.106
We're also able to show number
of reviews via AggregateRating

00:39:53.106 --> 00:39:56.086
from schema.org and
a rating value

00:39:56.086 --> 00:39:57.436
which we can render as stars.

00:39:59.946 --> 00:40:03.316
Finally, the image has been
provided using open graph's

00:40:03.356 --> 00:40:04.066
image tag.

00:40:04.646 --> 00:40:09.726
So now to talk about
some of the schemas

00:40:09.726 --> 00:40:11.606
which we support
from schema.org.

00:40:12.406 --> 00:40:18.066
The first is AggregateRatings,
another is offers, prices,

00:40:18.586 --> 00:40:22.166
or if you have a consumer
shopping site, you offer things

00:40:22.166 --> 00:40:26.686
for sale and as we saw
with hotels maybe, booking,

00:40:28.036 --> 00:40:30.426
price range in case you
don't have a fixed price

00:40:30.476 --> 00:40:35.366
but rather a range of prices,
interactionCount for things

00:40:35.366 --> 00:40:38.576
like likes, views, comments,

00:40:40.076 --> 00:40:43.786
also interactionCount will
be superseded in schema.org

00:40:43.836 --> 00:40:49.186
by the new Action set of schemas
which we'll support that as well

00:40:49.356 --> 00:40:50.966
if you're thinking of migrating

00:40:50.966 --> 00:40:52.846
from interactionCount
to Actions.

00:40:54.406 --> 00:40:56.726
Organization for things
such as businesses,

00:40:56.766 --> 00:41:00.166
you can also have
addresses associated

00:41:00.166 --> 00:41:03.426
with these contact information,
like telephone numbers

00:41:03.426 --> 00:41:04.436
and we'll see a bit later how

00:41:04.436 --> 00:41:06.886
that can help make your
result more richer.

00:41:07.276 --> 00:41:11.336
Recipes, this one
is self-explanatory.

00:41:13.026 --> 00:41:16.636
SearchActions, in case your
website has a landing page

00:41:16.636 --> 00:41:18.826
for searches by marking it

00:41:18.826 --> 00:41:21.686
up in a special way we're also
then able to treat your result

00:41:21.786 --> 00:41:23.426
in a little bit differently,

00:41:23.426 --> 00:41:25.726
we know it is a landing
page for search.

00:41:26.986 --> 00:41:28.616
Finally, ImageObjects.

00:41:28.906 --> 00:41:31.136
This is for nothing
else but images.

00:41:31.136 --> 00:41:36.076
So now I want to also
talk about Actions.

00:41:36.736 --> 00:41:39.076
Actions are a way
using structured data

00:41:39.076 --> 00:41:41.396
to allow your results
to become actionable.

00:41:42.976 --> 00:41:46.456
There's a set of actions that
we'll be supporting on launch,

00:41:46.496 --> 00:41:50.676
the first of which is dialing a
phone number, getting directions

00:41:50.676 --> 00:41:53.786
to an address and playing
an audio or video file.

00:41:53.786 --> 00:42:00.796
For the first of these
examples dialing a phone number.

00:42:01.326 --> 00:42:04.706
As we saw before with the
Organization schema you can add

00:42:04.706 --> 00:42:07.066
something like a
telephone as a property.

00:42:07.696 --> 00:42:10.746
When we see this telephone
number we can parse it

00:42:10.746 --> 00:42:13.186
and put a call button
directly in the result.

00:42:13.516 --> 00:42:16.356
This makes your result
actionable now.

00:42:17.516 --> 00:42:20.606
Another is using an
AudioObject schema

00:42:21.486 --> 00:42:24.836
with AudioObject you can
specify a URL to an audio file

00:42:24.836 --> 00:42:28.486
and the users will play it from
the result, they don't have

00:42:28.536 --> 00:42:32.886
to deep link into the app
and play it from there.

00:42:34.326 --> 00:42:35.886
Finally, getting directions.

00:42:36.606 --> 00:42:39.836
Providing a postal address
we can then allow the user

00:42:39.836 --> 00:42:42.166
to navigate directly
without having

00:42:42.166 --> 00:42:43.276
to deep link into the app.

00:42:43.636 --> 00:42:46.766
This has the benefit of
making your result much more

00:42:46.766 --> 00:42:48.626
potentially interactive
to the user.

00:42:49.366 --> 00:42:51.206
If a user sees a list
of results and sees

00:42:51.206 --> 00:42:53.466
that they can get
directly to the action

00:42:53.466 --> 00:42:56.516
that they want they may be more
likely to click on your result.

00:42:56.516 --> 00:43:04.306
So we have shown a lot of
different schemas, markups,

00:43:04.536 --> 00:43:07.046
we'll add testing
tools later this year

00:43:07.156 --> 00:43:09.856
for testing the markup
on your website.

00:43:09.856 --> 00:43:13.636
This will be available on the
developer site later this year.

00:43:13.966 --> 00:43:16.956
We'll be having testing tools
for both the deep link markup

00:43:16.956 --> 00:43:19.846
and the structured data markup.

00:43:20.856 --> 00:43:23.686
Finally, I just wanted to
call out a few more resources

00:43:24.006 --> 00:43:26.776
as you're adding both
either mobile deep links

00:43:26.856 --> 00:43:31.446
or structured data to the
website, do check out some

00:43:31.506 --> 00:43:34.256
of these resources,
provide a lot of information

00:43:34.256 --> 00:43:40.006
and again we'll hopefully
help get you started.

00:43:40.356 --> 00:43:40.696
Thanks.

00:43:42.516 --> 00:43:47.696
[Applause]

00:43:48.196 --> 00:43:51.626
>> JASON DOUGLAS: Now I
hand it back to Vipul.

00:43:55.756 --> 00:43:58.776
>> VIPUL PRAKASH: So those
are three simple, powerful,

00:43:58.776 --> 00:44:05.056
and flexible ways of making
your app searchable on iOS 9.

00:44:05.276 --> 00:44:06.256
Which one should you use?

00:44:06.516 --> 00:44:10.316
It is a function of the
nature of your content as well

00:44:10.316 --> 00:44:12.976
as the kind of search experience
that you're trying to create.

00:44:13.696 --> 00:44:17.846
Core Spotlight is for
private data which is indexed

00:44:17.846 --> 00:44:20.686
on the device and you
can use Core Spotlight

00:44:20.896 --> 00:44:24.586
to comprehensively
index data in your app.

00:44:24.586 --> 00:44:27.976
If you're building or you
have a social networking app

00:44:28.016 --> 00:44:30.656
for instance and you wanted
to index all of the messages

00:44:31.016 --> 00:44:32.836
that the user has
sent and received,

00:44:33.206 --> 00:44:35.086
Core Spotlight is the
right tool for the job.

00:44:36.036 --> 00:44:39.336
Web markup is for apps that
mirror their content on the web.

00:44:39.756 --> 00:44:42.866
If you do that, you should
absolutely adopt that markup,

00:44:42.866 --> 00:44:46.866
because it creates tremendous
opportunity for your app

00:44:46.976 --> 00:44:49.046
and content to be
discovered by users

00:44:49.216 --> 00:44:51.586
that don't have your app yet.

00:44:51.856 --> 00:44:55.356
Use NSUserActivity for both
public and private content

00:44:55.356 --> 00:44:58.906
as well as for indexing
navigation points inside

00:44:58.906 --> 00:44:59.306
of your app.

00:45:00.316 --> 00:45:03.366
Now there is another flavor of
NSUserActivity that Dave touched

00:45:03.366 --> 00:45:04.766
on which is Public Indexing.

00:45:05.436 --> 00:45:06.576
This is really powerful.

00:45:06.816 --> 00:45:09.986
If your app has a large
number of items, millions

00:45:09.986 --> 00:45:13.486
or even hundreds of millions
you can use Public Indexing

00:45:13.486 --> 00:45:16.246
to essentially move those
items and have them indexed

00:45:16.246 --> 00:45:18.126
in Apple's cloud index.

00:45:20.316 --> 00:45:22.966
These APIs while distinct,

00:45:24.336 --> 00:45:26.166
they're really designed
to work together.

00:45:26.736 --> 00:45:31.646
In the same app for the
same content you can adopt

00:45:31.646 --> 00:45:32.506
multiple APIs.

00:45:33.856 --> 00:45:38.706
The only thing to remember
is for items that are indexed

00:45:39.616 --> 00:45:42.766
from multiple places, you
want to connect these items

00:45:43.396 --> 00:45:44.796
by giving them the same ID.

00:45:45.306 --> 00:45:51.176
If you're using all three APIs,
the obvious ID is the URL.

00:45:52.946 --> 00:45:56.346
You would set CSSearchableItems
UniqueIdentifier to the URL

00:45:56.896 --> 00:45:59.626
and NSUserActivity related to
the unique identifier as well

00:45:59.626 --> 00:46:01.226
as the webpage URL to the URL.

00:46:01.966 --> 00:46:05.516
if you use NSUserActivity
and Core Spotlight together,

00:46:05.516 --> 00:46:08.126
which is a very common
pattern, you just want to ensure

00:46:08.476 --> 00:46:09.686
that they have the same ID.

00:46:10.146 --> 00:46:13.896
Now this help search
deduplicate results

00:46:14.316 --> 00:46:16.576
but it also helps
items rank stronger.

00:46:17.126 --> 00:46:19.446
Let's talk a bit about ranking.

00:46:21.916 --> 00:46:23.896
The magic of search really is

00:46:23.976 --> 00:46:28.166
to provide the most relevant
result based on a few keystrokes

00:46:28.166 --> 00:46:29.176
of input from the user.

00:46:29.616 --> 00:46:31.826
We have done a lot of work here.

00:46:32.996 --> 00:46:36.176
Relevance and ranking,
is a complex function

00:46:36.176 --> 00:46:38.236
of matching the query
to the items.

00:46:38.516 --> 00:46:40.906
Most of this is completely
transparent

00:46:41.186 --> 00:46:43.136
to you developers
and to our users.

00:46:44.796 --> 00:46:50.996
However, an important component
of ranking is interaction

00:46:50.996 --> 00:46:52.586
with the content and results.

00:46:52.586 --> 00:46:57.616
What you can do is help ensure
that search can capture all

00:46:57.616 --> 00:46:58.496
of these interactions.

00:46:58.996 --> 00:47:03.646
The three types of
interactions that we care about,

00:47:03.646 --> 00:47:08.156
one is URL popularity,
this is applicable

00:47:08.336 --> 00:47:13.316
to content that's indexed via
web markup and this is based

00:47:13.316 --> 00:47:16.866
on any quality indications
you add through schemas

00:47:16.866 --> 00:47:22.016
like ratings, likes, reviews, as
well as the position of the URL

00:47:22.076 --> 00:47:23.396
in the web's link graph.

00:47:24.336 --> 00:47:29.076
The URL improved this
position based on popularity

00:47:29.076 --> 00:47:30.246
and this happens automatically.

00:47:30.836 --> 00:47:36.436
The second interaction
is the frequency of views

00:47:36.436 --> 00:47:39.226
that your content
receives inside of the app.

00:47:39.696 --> 00:47:43.386
Really the only way to capture
this is through NSUserActivity

00:47:43.386 --> 00:47:46.876
which is why we encourage that
you always adopt NSUserActivity.

00:47:47.766 --> 00:47:49.546
The third and most
important form

00:47:49.546 --> 00:47:51.756
of interaction is engagement
with search results.

00:47:51.826 --> 00:47:54.856
This is when a search result
is presented to the user,

00:47:55.386 --> 00:47:58.456
whether they tap on the
result, or if they're satisfied

00:47:58.456 --> 00:48:02.846
by the description in the result
which we call silent engagement

00:48:02.846 --> 00:48:04.496
and we capture through
session analytics.

00:48:08.316 --> 00:48:11.316
A quick checklist of what
to do to optimize relevance.

00:48:11.316 --> 00:48:13.946
First, continue to
do what you're doing,

00:48:13.946 --> 00:48:15.516
make great apps and
great content.

00:48:15.516 --> 00:48:18.646
Really, the search
system is designed to find

00:48:18.646 --> 00:48:20.456
and bubble up the best content.

00:48:21.406 --> 00:48:24.506
You can help by ensuring
that we can capture all

00:48:24.506 --> 00:48:26.396
of the interactions,
using NSUserActivity,

00:48:26.936 --> 00:48:29.866
use NSUserActivity with Public
Indexing where applicable

00:48:30.466 --> 00:48:33.356
because now we can
capture the engagements

00:48:33.356 --> 00:48:35.536
with your content
across the user base.

00:48:36.596 --> 00:48:40.536
Adopt schema mark-up
for interactions counts

00:48:40.626 --> 00:48:41.796
and quality indications.

00:48:42.236 --> 00:48:45.176
Finally follow user
interface guidelines I'll talk

00:48:45.176 --> 00:48:45.836
about in a moment.

00:48:48.696 --> 00:48:50.226
The flip side of bubbling

00:48:50.226 --> 00:48:55.306
up great content is suppressing
content that is not relevant.

00:48:55.826 --> 00:49:00.486
We have done a lot of
work on this as well.

00:49:00.486 --> 00:49:03.306
If malicious or a poorly
considered app is spamming the

00:49:03.306 --> 00:49:07.066
index, we will downrank
their results

00:49:07.436 --> 00:49:09.216
or suppress them entirely.

00:49:09.576 --> 00:49:10.726
The most important sort

00:49:10.726 --> 00:49:15.286
of measure here is
engagements-to-shown ratios,

00:49:15.286 --> 00:49:17.866
the amount of times your
results are shown in search

00:49:18.236 --> 00:49:20.196
and how many times are engaged.

00:49:20.746 --> 00:49:22.896
Low engagements will
be suppressed

00:49:23.246 --> 00:49:27.196
and high engagement ratios
will help your content rank

00:49:27.196 --> 00:49:28.056
up higher in search.

00:49:28.586 --> 00:49:33.896
One of the best ways to
get high engagements is

00:49:33.936 --> 00:49:36.626
to follow a few simple
user guidelines.

00:49:37.196 --> 00:49:39.806
One of the things
you will notice

00:49:39.806 --> 00:49:42.356
in iOS 9 is search results even

00:49:42.356 --> 00:49:46.376
from built-in apps are very
descriptive and rich and this is

00:49:46.376 --> 00:49:50.266
because we found that richer
results get more engagements.

00:49:50.806 --> 00:49:55.286
A few things here,
provide a thumbnail,

00:49:55.546 --> 00:49:58.916
provide a well-structured
readable description, ratings

00:49:58.916 --> 00:50:00.276
and actions where applicable.

00:50:00.946 --> 00:50:04.026
The image in the thumbnail
is really powerful,

00:50:04.256 --> 00:50:06.676
it gives the user a
sense of what they'll see

00:50:06.676 --> 00:50:08.986
when they tap on the result.

00:50:08.986 --> 00:50:10.486
Provide a good thumbnail.

00:50:11.056 --> 00:50:13.376
Provide key information that
the user is looking for.

00:50:13.776 --> 00:50:16.686
For instance, if the user is
looking for a booking number,

00:50:16.686 --> 00:50:19.086
a reference number, include
it in the description

00:50:19.306 --> 00:50:22.376
so that the search task can be
completed right there in search.

00:50:22.966 --> 00:50:29.226
Now another powerful provision
is support for keywords.

00:50:29.746 --> 00:50:32.786
In all the APIs you can
provide a number of keywords

00:50:33.116 --> 00:50:35.596
that will then trigger
search results.

00:50:35.836 --> 00:50:39.366
Category keywords tend
to be very, very useful.

00:50:40.566 --> 00:50:43.546
Users may search type
"ticket" when searching

00:50:43.546 --> 00:50:46.276
for a specific ticket
rather than typing the name,

00:50:46.576 --> 00:50:49.376
they may type "recipe"
when looking for protein.

00:50:49.596 --> 00:50:51.956
This creates a magical,

00:50:51.956 --> 00:50:54.356
intelligent experience
for users.

00:50:54.846 --> 00:51:01.496
Other types of keywords
that are useful are synonyms

00:51:01.566 --> 00:51:05.236
and abbreviations, users want
to type as little as possible,

00:51:05.536 --> 00:51:08.376
so instead of searching "San
Francisco Giants" they may type

00:51:08.376 --> 00:51:11.696
"sf giants" and you can provide
this recall through keywords.

00:51:16.226 --> 00:51:20.466
Just as important, is
behavior on launch.

00:51:20.496 --> 00:51:23.066
This is what happens when
the user taps on the result.

00:51:23.366 --> 00:51:25.596
You want to take them
straight to the content

00:51:25.726 --> 00:51:29.816
that they're looking for without
interstitials, without pop-ups,

00:51:30.086 --> 00:51:32.796
without screens,
without spending a lot

00:51:32.796 --> 00:51:34.196
of time loading that screen.

00:51:35.096 --> 00:51:37.296
This is, in fact, so
important that we measure

00:51:37.296 --> 00:51:42.096
and estimate the time from tap
to the content shown and use it

00:51:42.096 --> 00:51:43.226
as a factor in ranking.

00:51:43.646 --> 00:51:47.606
Here is two examples.

00:51:47.606 --> 00:51:48.246
One is right.

00:51:48.596 --> 00:51:49.466
One is wrong.

00:51:49.466 --> 00:51:51.976
Let me show you what to do.

00:51:52.516 --> 00:51:59.516
[Pause]

00:52:00.016 --> 00:52:04.000
[Laughter]

00:52:04.046 --> 00:52:04.966
>> VIPUL PRAKASH: I'm sure none
of you have apps that do that!

00:52:05.516 --> 00:52:09.866
[Applause]

00:52:10.366 --> 00:52:12.426
>> VIPUL PRAKASH: It is
frustrating for the user

00:52:12.786 --> 00:52:16.056
and you want to find ways
of completely avoiding it.

00:52:16.616 --> 00:52:20.986
Let's talk about
what to do next.

00:52:22.536 --> 00:52:26.916
You can, of course, index your
app content comprehensively,

00:52:27.256 --> 00:52:30.046
these are certain things that
we have found to be very useful

00:52:30.046 --> 00:52:30.926
in the search context.

00:52:31.096 --> 00:52:33.086
Any content that the user
has viewed in the past

00:52:33.086 --> 00:52:36.136
that you can capture with
NSUserActivity and content

00:52:36.136 --> 00:52:38.996
that the user may have
created or curated by starring

00:52:38.996 --> 00:52:42.006
or creating lists inside of
the app, people want to go back

00:52:42.146 --> 00:52:45.846
to things that they
have done in the past.

00:52:45.996 --> 00:52:49.436
Navigation points and
features are very, very useful.

00:52:50.036 --> 00:52:56.896
New messages, new content
arriving that the user may want

00:52:56.896 --> 00:52:59.586
to look for inside of your
app, you would also want

00:52:59.586 --> 00:53:01.036
to look for this in search.

00:53:02.456 --> 00:53:05.206
You can get creative.

00:53:05.296 --> 00:53:07.046
You can proactively index items

00:53:07.316 --> 00:53:09.216
that the user may
want to look at.

00:53:09.306 --> 00:53:13.496
Say I bought a ticket to a music
festival, I may be interested

00:53:13.746 --> 00:53:15.136
in other music festivals
in the area.

00:53:15.136 --> 00:53:17.906
You can use your app
analytics to figure

00:53:17.906 --> 00:53:22.896
out interesting content
and put it in the index.

00:53:22.896 --> 00:53:26.756
Really the APIs are
flexible and allow you

00:53:27.026 --> 00:53:29.426
to create novel search
experiences.

00:53:29.466 --> 00:53:31.846
The possibilities here
are really limitless.

00:53:35.816 --> 00:53:38.056
So summary, just
let's take a look

00:53:38.056 --> 00:53:39.846
of things we covered
in the session.

00:53:40.266 --> 00:53:46.546
We introduced fast on-device
and cloud architecture that used

00:53:46.616 --> 00:53:48.646
for indexing deep links
and for App Search.

00:53:49.156 --> 00:53:50.496
We showed you three APIs

00:53:50.736 --> 00:53:54.176
and deep linking methods
which you can adopt.

00:53:54.796 --> 00:53:59.556
We showed you how great
content, descriptive results,

00:53:59.726 --> 00:54:04.026
and fast content-to-result
interaction can provide engaging

00:54:04.026 --> 00:54:04.976
search experience.

00:54:06.336 --> 00:54:11.116
Provisions built in the APIs
that are taking your content

00:54:11.336 --> 00:54:14.636
and showing it to iOS
users around the world.

00:54:18.956 --> 00:54:20.586
We have some more information.

00:54:21.386 --> 00:54:23.036
If you're looking for
details, you can head

00:54:23.086 --> 00:54:27.796
to our search API documentation
portal, we have forums

00:54:27.796 --> 00:54:29.906
for more interactive help.

00:54:31.986 --> 00:54:36.596
I'd recommend going to the
session on seamless linking

00:54:36.596 --> 00:54:37.696
that Jason introduced.

00:54:42.776 --> 00:54:46.516
We also have two labs, one

00:54:46.516 --> 00:54:48.896
that starts immediately
after I stop talking.

00:54:49.266 --> 00:54:53.546
You should come and join us
there and another one on Friday

00:54:53.936 --> 00:54:58.616
and we would love to see some
integrations with search APIs

00:54:58.816 --> 00:55:03.206
on Friday that you
made during WWDC.

00:55:03.756 --> 00:55:05.866
That's it for App Search.

00:55:06.516 --> 00:55:11.500
[Applause]