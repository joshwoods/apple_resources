WEBVTT

00:00:23.990 --> 00:00:24.430
Thank you.

00:00:24.500 --> 00:00:25.940
Thank you for all coming here.

00:00:25.940 --> 00:00:30.550
Thank you for being part of the
experience and the renovation,

00:00:30.550 --> 00:00:35.140
rejuvenation, revolution that Apple's
going through right now.

00:00:35.140 --> 00:00:37.240
It's an incredible
time to be a developer.

00:00:37.300 --> 00:00:39.990
It's an incredible time
to be an Apple employee,

00:00:40.180 --> 00:00:42.060
and especially for AppleScript.

00:00:42.240 --> 00:00:46.300
Over the last year,
AppleScript has progressed more and

00:00:46.300 --> 00:00:48.940
more and grown faster and faster.

00:00:48.940 --> 00:00:50.240
It's just on fire.

00:00:50.240 --> 00:00:53.840
And with the evolution of
AppleScript becoming a peer

00:00:53.840 --> 00:00:57.980
development language with
Objective-C and Java and Cocoa,

00:00:58.200 --> 00:01:02.740
Carbon, and the rest of it,
and the development tools and Xcode,

00:01:02.740 --> 00:01:06.570
we have pushed farther and grown faster,
and we're reaching farther

00:01:06.570 --> 00:01:08.040
and farther every day.

00:01:08.040 --> 00:01:10.300
We want to deliver more
for you with AppleScript,

00:01:10.300 --> 00:01:12.220
and we want to be able
to be your hand-to-hand.

00:01:12.240 --> 00:01:15.080
We want to be able to get your hands
and fingers into the world to get

00:01:15.170 --> 00:01:18.520
the things done that make you money,
because this is all about money.

00:01:18.520 --> 00:01:21.300
Well, some of it's about fun,
but some of it's about money

00:01:21.300 --> 00:01:24.130
and making sure that you're
successful at what you do.

00:01:24.140 --> 00:01:29.750
AppleScript Studio can be a great part
and a component of that process for you

00:01:29.750 --> 00:01:35.720
in that it can combine disparate parts of
code and resources and put them together

00:01:35.720 --> 00:01:41.860
in a way that not only makes your users
and customers satisfied and easy to use,

00:01:41.860 --> 00:01:42.010
but it can also be a great way
to make your users and customers

00:01:42.010 --> 00:01:42.220
satisfied and easy to use.

00:01:42.240 --> 00:01:44.790
But it can also deliver a
lot of power under the hood.

00:01:44.810 --> 00:01:47.350
So today you're going to see an
overview of some of the new things

00:01:47.350 --> 00:01:50.110
that are in AppleScript Studio,
plus a good portion of what

00:01:50.380 --> 00:01:53.540
AppleScript Studio can do
in its new environment.

00:01:53.540 --> 00:01:56.610
And to do that,
we have a couple people today that

00:01:56.610 --> 00:01:59.040
are the key to this technology.

00:01:59.040 --> 00:02:01.990
First is Tim Bumgarner,
who is the senior engineer

00:02:01.990 --> 00:02:03.660
for AppleScript Studio.

00:02:03.660 --> 00:02:05.930
He's the brains and execution behind it.

00:02:06.000 --> 00:02:09.660
And the man behind the man,
he couldn't be the man without the man,

00:02:09.670 --> 00:02:11.800
is John Coelho, venerable.

00:02:12.240 --> 00:02:15.320
And he's the man behind the
AppleScript Studio guide

00:02:15.320 --> 00:02:16.700
and source and sage.

00:02:16.700 --> 00:02:19.220
So with that, I'll let Tim take it away.

00:02:19.340 --> 00:02:19.580
Thank you.

00:02:25.100 --> 00:02:26.050
All right, thanks, Sal.

00:02:26.080 --> 00:02:30.300
Well,
I was thinking about last year's session,

00:02:30.300 --> 00:02:33.650
and I just knew what I started
my session out last year

00:02:33.650 --> 00:02:35.940
would come back to haunt me,
because if you'll remember,

00:02:35.940 --> 00:02:38.840
I had a slide that came out and said,
maybe I'd consider myself Mr.

00:02:38.840 --> 00:02:40.140
AppleScript Studio.

00:02:40.140 --> 00:02:44.240
And of course, the acronym was ASS,
and I would be known as Mr.

00:02:44.240 --> 00:02:44.780
Ass.

00:02:44.780 --> 00:02:48.020
And sure enough, somebody walks up to me,
a colleague, and says,

00:02:48.020 --> 00:02:50.680
I'd like to introduce you to my friend,
and this is Mr.

00:02:50.680 --> 00:02:51.240
Ass.

00:02:51.240 --> 00:02:52.200
Great.

00:02:52.770 --> 00:02:54.600
So I think I'm going to go with Mr.

00:02:54.600 --> 00:02:55.270
Studio.

00:02:55.280 --> 00:02:57.090
So the worst you can call me is Mr.

00:02:57.090 --> 00:02:57.400
S.

00:02:57.400 --> 00:02:59.430
And that's a subtle difference,
but important.

00:02:59.440 --> 00:03:03.850
The other thing I noticed when I went
through my session last year is that

00:03:03.950 --> 00:03:05.960
I talked a million miles an hour.

00:03:05.960 --> 00:03:07.960
And hopefully I can slow down.

00:03:07.960 --> 00:03:10.500
But my apologies to the
language translator,

00:03:10.500 --> 00:03:12.730
because I have no clue
how she kept up last year.

00:03:12.830 --> 00:03:13.940
Great.

00:03:13.990 --> 00:03:16.820
So let's go ahead and get started
and talk about AppleScript Studio.

00:03:16.820 --> 00:03:20.770
And hopefully we'll have
good luck with the clicker.

00:03:22.020 --> 00:03:24.590
must be the bane of our
existence in AppleScript.

00:03:24.590 --> 00:03:26.990
We had the same problem
in AppleScript Studio,

00:03:26.990 --> 00:03:28.910
or the AppleScript updates, so.

00:03:30.740 --> 00:03:34.370
Okay, looks like the slide
is probably at the end,

00:03:34.540 --> 00:03:37.450
and it's the wrong one that's loaded,
so we didn't get the right slide.

00:03:37.460 --> 00:03:39.700
Try this again.

00:03:39.980 --> 00:03:41.920
Okay, simple enough to fix.

00:03:41.920 --> 00:03:46.690
If this is the worst that happens to me,
I'm pretty happy.

00:03:46.690 --> 00:03:46.690
All right.

00:03:48.030 --> 00:03:50.440
This way we get to see the
nice movie fronting along.

00:03:50.440 --> 00:03:51.560
I knew we were missing something there.

00:03:51.560 --> 00:03:52.500
Okay.

00:03:52.500 --> 00:03:53.990
And Sal's already been here?

00:03:53.990 --> 00:03:54.550
I'm here?

00:03:54.550 --> 00:03:55.400
We're all here.

00:03:55.570 --> 00:03:56.440
Let's get going.

00:03:56.440 --> 00:03:58.040
Okay, so let's talk about the agenda.

00:03:58.040 --> 00:04:00.620
And what we're going to do is a
little bit of an introduction.

00:04:00.620 --> 00:04:02.320
We'll go through a little overview.

00:04:02.320 --> 00:04:04.680
I'm not going to go through
the detail I did last year.

00:04:04.680 --> 00:04:07.540
Hopefully enough of you have used it
and looked at it to know how it works,

00:04:07.550 --> 00:04:10.060
but we'll just do a quick
demonstration of how to do that.

00:04:10.320 --> 00:04:13.820
Now, last year we were talking
about what was in Studio 1.1.

00:04:13.820 --> 00:04:17.040
We also previewed a little bit
about what was in Studio 1.2.

00:04:17.040 --> 00:04:20.180
We weren't able to actually show you
the features because we hadn't shipped

00:04:20.330 --> 00:04:22.170
Jaguar yet or were far enough along.

00:04:22.180 --> 00:04:24.280
And so we're going to go
through some of those important

00:04:24.370 --> 00:04:27.460
key features that we added in
Studio 1.2 in the Jaguar timeframe.

00:04:27.460 --> 00:04:31.490
In Studio 1.3, we're going to talk about
what we're releasing for the

00:04:31.490 --> 00:04:33.190
upcoming Panther release.

00:04:33.200 --> 00:04:35.430
And some of these things are
already in the preview release,

00:04:35.480 --> 00:04:36.870
and we'll talk about that in a bit.

00:04:36.920 --> 00:04:39.640
And then we'll just discuss a
little again about future features.

00:04:40.130 --> 00:04:42.930
documentation, and Q&A.

00:04:45.030 --> 00:04:45.450
Introduction.

00:04:45.530 --> 00:04:46.620
What is AppleScript Studio?

00:04:46.620 --> 00:04:49.340
And so what we've done is we've
taken a combination of all

00:04:49.340 --> 00:04:50.380
these wonderful technologies.

00:04:50.460 --> 00:04:53.500
We've taken advantage of AppleScript,
and we've integrated it into

00:04:53.500 --> 00:04:55.110
every one of these technologies.

00:04:55.180 --> 00:04:56.820
We've integrated it into Xcode.

00:04:56.820 --> 00:04:58.720
It was in Project Builder
in the previous versions.

00:04:58.720 --> 00:05:00.620
We moved it right directly
straight into Xcode.

00:05:00.620 --> 00:05:03.000
And insidiously enough,
we've even inserted

00:05:03.000 --> 00:05:04.360
ourselves even deeper.

00:05:04.360 --> 00:05:05.450
It's a requirement.

00:05:05.590 --> 00:05:06.660
It has to be there.

00:05:06.970 --> 00:05:09.730
We've also, through a palette,
have been able to integrate

00:05:09.730 --> 00:05:11.110
into Interface Builder.

00:05:11.110 --> 00:05:14.960
And then all of that is built on top
of the Cocoa Application Frameworks.

00:05:15.000 --> 00:05:17.570
And so we get the advantage of
everything that Cocoa provides.

00:05:17.640 --> 00:05:19.980
But it's also two things.

00:05:19.980 --> 00:05:21.630
It's the development environment.

00:05:21.700 --> 00:05:24.500
It's where you get to go in and
you develop your application.

00:05:24.500 --> 00:05:26.960
And then it's also a runtime,
so that when you get

00:05:26.960 --> 00:05:29.300
your application built,
you can send it out,

00:05:29.310 --> 00:05:32.260
put it out on the web,
distribute it through your company,

00:05:32.320 --> 00:05:34.170
and then anybody can just run it.

00:05:34.260 --> 00:05:36.360
They don't need any extra extensions.

00:05:36.360 --> 00:05:38.420
They don't need any additions,
any plugins.

00:05:38.440 --> 00:05:39.140
It just works.

00:05:39.140 --> 00:05:41.740
And that makes it really terrific
to do that for deployment.

00:05:41.740 --> 00:05:43.800
So what can you do with Studio?

00:05:43.800 --> 00:05:47.220
First and foremost, we're creating native
Macintosh applications.

00:05:47.220 --> 00:05:50.000
It's, for all fundamental purposes,
is a Cocoa application.

00:05:50.000 --> 00:05:53.160
But it uses AppleScript as
the development language.

00:05:54.670 --> 00:05:56.700
And we get to take advantage of
everything that Cocoa provides.

00:05:56.700 --> 00:06:00.210
We get all of the wonderful table views,
outline views, buttons, widgets,

00:06:00.210 --> 00:06:01.600
you name it, we've got it.

00:06:01.600 --> 00:06:02.560
We can script those.

00:06:02.560 --> 00:06:05.320
And of course, with AppleScript,
we really get to leverage.

00:06:05.330 --> 00:06:09.340
We get to take advantage of being able to
create solutions that uses applications

00:06:09.450 --> 00:06:11.540
that are local to my computer.

00:06:11.540 --> 00:06:14.550
I can talk to other applications
that are across the network or

00:06:14.550 --> 00:06:17.840
even out through the internet and
take advantage of the next thing,

00:06:17.840 --> 00:06:19.330
which are web services.

00:06:19.500 --> 00:06:23.860
Just like we talk to a local application,
we can talk to a web service.

00:06:23.900 --> 00:06:28.980
We simply say tell application,
and using XML, RPC, and SOAP,

00:06:29.060 --> 00:06:31.660
we can go get data from that
and populate and provide a

00:06:31.660 --> 00:06:33.280
front end to it with a nice UI.

00:06:33.280 --> 00:06:34.590
Sal Soghoian, Tim Bumgarner, John Coehrer

00:06:35.010 --> 00:06:36.820
And then we can go down
to a very deeper level.

00:06:36.820 --> 00:06:40.580
And since Mac OS X is
basically a Unix-like operating

00:06:40.630 --> 00:06:44.010
system built on top of that,
we can take advantage of the do shell

00:06:44.010 --> 00:06:45.660
script that AppleScript gives us.

00:06:45.660 --> 00:06:50.070
And you can go down and you can put a
nice wrapper around some of those gnarly

00:06:50.130 --> 00:06:54.680
terminal applications or code pieces
and fundamentally put something that

00:06:54.680 --> 00:06:57.640
people just wouldn't usually understand.

00:06:57.640 --> 00:07:00.580
They could use a really nice,
simple UI to do that.

00:07:01.200 --> 00:07:03.800
And then, of course,
with being inside of Xcode,

00:07:03.830 --> 00:07:06.250
Xcode allows you to build C applications,
C++.

00:07:06.360 --> 00:07:07.700
We can use Objective-C.

00:07:07.700 --> 00:07:08.580
We can use Java.

00:07:08.580 --> 00:07:12.740
Any of those languages we can actually
call directly from inside of AppleScript.

00:07:12.740 --> 00:07:15.480
And with some of the process or
progress that's being made with

00:07:15.480 --> 00:07:18.130
AppleScript itself at Cocoa level,
you can turn around and

00:07:18.130 --> 00:07:21.020
from those other languages,
particularly Cocoa,

00:07:21.020 --> 00:07:23.500
you can actually create an
AppleScript and then talk back

00:07:23.500 --> 00:07:25.280
into your Studio application.

00:07:25.280 --> 00:07:27.010
So it's a bit of a round trip,
which is great.

00:07:27.040 --> 00:07:29.530
So a little bit of an overview.

00:07:29.540 --> 00:07:31.120
Let's talk about where we've been.

00:07:31.180 --> 00:07:32.750
bed.

00:07:33.870 --> 00:07:35.420
Studio 1.0 was released.

00:07:35.420 --> 00:07:38.820
We came out with that in our
December 2001 developer tools.

00:07:38.820 --> 00:07:43.160
And that was, I believe,
Mac OS X version 10.1.2.

00:07:43.160 --> 00:07:45.940
So you can run your Studio apps
from that time forward.

00:07:45.940 --> 00:07:48.410
Then we released in April,
about four months later,

00:07:48.550 --> 00:07:51.720
we released our 1.1 release
in the April developer tools.

00:07:51.720 --> 00:07:56.100
And then we, of course, released 1.2,
which was a big feature release

00:07:56.110 --> 00:07:57.840
in the Jaguar of last year.

00:07:59.200 --> 00:08:01.750
And there was a point release,
some bug fixes that we needed to get in,

00:08:01.750 --> 00:08:03.120
went out in the December tools.

00:08:03.120 --> 00:08:05.320
And then, of course,
we're going to talk about

00:08:05.320 --> 00:08:06.760
AppleScript Studio 1.3.

00:08:06.760 --> 00:08:08.250
A little point of clarification.

00:08:08.300 --> 00:08:10.470
I want to make sure that
everybody understands that

00:08:10.470 --> 00:08:13.360
what went out in the developer
preview release is exactly that.

00:08:13.400 --> 00:08:15.980
The Studio 1.3 is just a preview release.

00:08:15.980 --> 00:08:17.080
It's not finished.

00:08:17.080 --> 00:08:19.340
It will be finished as part of Panther.

00:08:19.340 --> 00:08:21.630
So it's a sneak preview
for you to look at it,

00:08:21.630 --> 00:08:24.370
use it, take advantage of some
of the new features,

00:08:24.370 --> 00:08:28.460
but you really can't deploy any
applications until Panther goes to GM.

00:08:30.550 --> 00:08:32.680
And so what I'd like to do
is show you how easy it is to

00:08:32.730 --> 00:08:34.140
create a Studio application.

00:08:34.330 --> 00:08:37.620
And if we look at it,
we basically go through the same cycle.

00:08:37.760 --> 00:08:41.890
We create a project in Xcode,
we open up the interface,

00:08:41.970 --> 00:08:45.310
lay it out the way we want to,
we name our objects,

00:08:45.430 --> 00:08:48.280
attach some handlers, we edit the script,
we build and run,

00:08:48.280 --> 00:08:51.320
and then just go through the cycle,
making sure, adding to it and enhancing

00:08:51.320 --> 00:08:52.420
that application.

00:08:52.420 --> 00:08:56.550
So I'd like to actually go right to that,
and we will demonstrate

00:08:56.550 --> 00:08:58.080
how easy that is to do.

00:08:58.080 --> 00:08:59.610
So if we can go to the demo machine.

00:08:59.800 --> 00:09:00.530
Excellent.

00:09:00.560 --> 00:09:03.920
So I'm going to go right into Xcode,
and I'm going to choose

00:09:03.930 --> 00:09:05.440
New Project from the File menu.

00:09:05.440 --> 00:09:08.200
And you can see that Xcode
itself is able to create all

00:09:08.200 --> 00:09:10.240
kinds of different applications.

00:09:10.240 --> 00:09:13.710
There's applications, bundles,
frameworks, Java, tools, you name it,

00:09:13.710 --> 00:09:14.430
we've got it.

00:09:14.880 --> 00:09:17.800
The first three are the ones, of course,
great with AppleScript, starting with A.

00:09:17.800 --> 00:09:19.480
We always get to go at
the head of the class.

00:09:19.480 --> 00:09:23.020
And we've got three different
types of project templates here.

00:09:23.020 --> 00:09:26.710
We have the AppleScript application,
we have a document-based application

00:09:26.780 --> 00:09:29.550
if we want multiple documents,
and then we have something

00:09:29.550 --> 00:09:30.720
we call a droplet.

00:09:30.720 --> 00:09:33.440
It's very similar to the applet that
you would create with Script Editor.

00:09:33.460 --> 00:09:36.060
So I'm, in this case,
going to just choose the

00:09:36.160 --> 00:09:37.760
AppleScript application.

00:09:37.760 --> 00:09:42.110
And we're going to use, of course,
the good old standby, our Hello World.

00:09:42.110 --> 00:09:44.100
And I'll name that project.

00:09:45.630 --> 00:09:49.280
And the first thing I do is I'm
going to go right into the nib file,

00:09:49.280 --> 00:09:52.980
our main menu dot nib,
and work on the interface.

00:09:53.210 --> 00:09:55.180
Since this is Hello World,
there's not much interface.

00:09:55.180 --> 00:09:57.160
As a matter of fact,
I'm actually going to get rid of this

00:09:57.230 --> 00:09:58.960
default window that you see here.

00:09:59.020 --> 00:10:00.720
I'm just going to go
ahead and delete that.

00:10:00.790 --> 00:10:03.900
And then I'm going to go
to the Show Info panel,

00:10:03.900 --> 00:10:06.800
and I'm going to select this Files Owner.

00:10:06.800 --> 00:10:08.820
This represents the application object.

00:10:08.820 --> 00:10:12.600
And any time you want to do anything with
AppleScript inside of Interface Builder,

00:10:12.600 --> 00:10:15.460
you go to the AppleScript Inspector,
and that's in this case is

00:10:15.460 --> 00:10:16.920
Command 7 as a shortcut.

00:10:16.920 --> 00:10:20.400
And I notice that there
are different aspects here.

00:10:20.400 --> 00:10:21.580
We have our name field.

00:10:21.580 --> 00:10:23.000
This lets me name objects.

00:10:23.000 --> 00:10:25.180
Whenever you reference
something inside of AppleScript,

00:10:25.180 --> 00:10:27.450
there are several different
ways that you can do that,

00:10:27.510 --> 00:10:29.880
and one of them is by name,
and that's the most recommended.

00:10:29.880 --> 00:10:32.250
You could also do it by index or by ID.

00:10:32.250 --> 00:10:35.120
And then the next section
shows us the event handlers.

00:10:35.140 --> 00:10:39.180
These are the handlers that are related
to the object that is currently selected.

00:10:39.180 --> 00:10:41.280
So if I had a button selected,
it would have a different

00:10:41.280 --> 00:10:42.320
set of event handlers.

00:10:42.320 --> 00:10:45.580
And then down finally at the
last is the script section.

00:10:45.580 --> 00:10:46.900
This shows us all the scripts
that are in the script.

00:10:46.920 --> 00:10:51.470
So if you see over here, we have a
HelloWorld.AppleScript back in Xcode.

00:10:51.480 --> 00:10:55.360
So what I want to find out is
when the application is launched.

00:10:55.360 --> 00:10:58.380
So what I simply do is go in and
click on the launched event handler.

00:10:58.380 --> 00:11:01.950
I go down, attach it to this HelloWorld,
which is our application script,

00:11:01.950 --> 00:11:04.510
and then I'm going to click
the Edit Script button.

00:11:04.520 --> 00:11:07.210
And when I do that,
it jumps me back over into Xcode,

00:11:07.290 --> 00:11:10.500
and it selects the contents
of the onLaunched handler.

00:11:10.500 --> 00:11:13.420
It actually inserted that for me,
so I don't have to remember what the

00:11:13.490 --> 00:11:15.120
parameters are or how it's spelled.

00:11:15.120 --> 00:11:16.900
I just choose it,
and it inserts it for me.

00:11:16.920 --> 00:11:20.140
And we're going to go with about
the simplest bit of code that

00:11:20.140 --> 00:11:23.560
you can write in AppleScript,
and it's just display dialog, HelloWorld.

00:11:26.540 --> 00:11:29.290
And then when that dialogue is done,
I'm just going to go ahead and

00:11:29.290 --> 00:11:30.310
tell the application to quit.

00:11:30.330 --> 00:11:31.120
I don't want to have to quit it.

00:11:31.120 --> 00:11:32.020
I just want it to go away.

00:11:32.040 --> 00:11:33.880
So we're going to go ahead and save that.

00:11:33.940 --> 00:11:35.690
And then from the Build menu,
we're going to go ahead

00:11:35.700 --> 00:11:36.660
and choose Build and Run.

00:11:38.000 --> 00:11:41.090
And it's going to go ahead and it
compiles the .appleScript file,

00:11:41.260 --> 00:11:42.490
links it, and then runs it.

00:11:42.550 --> 00:11:43.000
And there you go.

00:11:43.000 --> 00:11:44.680
You've got the display dialog.

00:11:44.780 --> 00:11:48.030
And so when I go ahead and choose OK,
the application actually

00:11:48.150 --> 00:11:49.000
quits and finishes.

00:11:49.000 --> 00:11:52.700
That's just as simple as it is to create,
you know, obviously a very simple app.

00:11:52.860 --> 00:11:54.740
But from here, it's the same process.

00:11:54.740 --> 00:11:58.660
Edit the interface, attach your handlers,
edit your script, build and run,

00:11:58.700 --> 00:12:00.700
and then just keep
building and keep building.

00:12:00.910 --> 00:12:01.510
All right.

00:12:01.510 --> 00:12:03.690
So we go back to slides, please.

00:12:06.100 --> 00:12:09.270
Okay, so let's talk about some of the
Studio 1.2 features that we added in

00:12:09.270 --> 00:12:12.480
the Jaguar that we didn't get a chance
to actually demonstrate and talk about,

00:12:12.480 --> 00:12:14.350
but they're really important
and they were some of the most

00:12:14.480 --> 00:12:15.720
requested features that we had.

00:12:15.760 --> 00:12:20.310
And the first is drag-and-drop support,
and then also pasteboard support,

00:12:20.310 --> 00:12:24.360
data source enhancements,
and document-based applications.

00:12:24.360 --> 00:12:26.680
And so we're going to go
through each of these features,

00:12:26.720 --> 00:12:30.010
and what we're going to do is we're going
to develop an application from start to

00:12:30.010 --> 00:12:34.220
finish that employs and builds upon and
adds each of these features as we go.

00:12:34.220 --> 00:12:36.950
So let's talk about
drag-and-drop support.

00:12:36.960 --> 00:12:39.750
We've got a series of new event handlers.

00:12:39.760 --> 00:12:42.340
There's actually about six of them here,
I believe.

00:12:42.340 --> 00:12:44.360
There's a drag-entered, exit,
and updated.

00:12:44.360 --> 00:12:47.840
This is while you're dragging
objects across a view.

00:12:47.840 --> 00:12:51.210
There's a drop, which is the one that we
almost always care about.

00:12:51.300 --> 00:12:52.500
That's the only one
that's the most important.

00:12:52.520 --> 00:12:54.120
There's a prepare-drop-conclude.

00:12:54.120 --> 00:12:56.510
These happen before and
after the drop handler.

00:12:56.520 --> 00:13:00.030
We've also added a new command or
variant on the command register.

00:13:00.040 --> 00:13:04.200
We need to be able to tell the view
what is it that we want to listen for.

00:13:04.200 --> 00:13:05.740
What kind of drop do we want?

00:13:05.840 --> 00:13:06.720
What type of data?

00:13:06.820 --> 00:13:09.070
And so we do that with
the register drag types.

00:13:09.160 --> 00:13:12.370
So in order to help me with this,
I'm going to bring up John Coelho.

00:13:12.450 --> 00:13:15.420
He's our QA engineer for Studio,
and he's going to help me

00:13:15.420 --> 00:13:16.830
make sure I don't mess up.

00:13:16.980 --> 00:13:19.720
So let's welcome him up.

00:13:26.560 --> 00:13:28.730
So what we're going to do,
and for the sake of time,

00:13:28.730 --> 00:13:32.240
we don't have time to lay out everything
as far as the interface is concerned.

00:13:32.380 --> 00:13:34.630
So we're going to go ahead and
we've already laid out a project,

00:13:34.780 --> 00:13:37.020
but we haven't added any script yet.

00:13:37.020 --> 00:13:38.670
So we're just going to
bring up the interface.

00:13:38.790 --> 00:13:41.600
So let's go ahead and double
click on document.nib.

00:13:42.870 --> 00:13:45.530
And you'll see that what we have
here is our application is going

00:13:45.590 --> 00:13:47.270
to be a document-based application.

00:13:47.310 --> 00:13:49.850
It's going to present a window
that has a table view on the top.

00:13:49.890 --> 00:13:53.020
It's in a split view,
and below the bottom is a text view.

00:13:53.020 --> 00:13:55.870
And so what we're going to be
able to do is drag files from

00:13:56.050 --> 00:13:57.840
the finder into the table view.

00:13:57.840 --> 00:14:00.430
It'll list that information
in the table view,

00:14:00.430 --> 00:14:03.550
and then in the bottom,
we'll actually have a script.

00:14:03.580 --> 00:14:06.660
We can put in some AppleScript,
and when we're all done,

00:14:06.670 --> 00:14:10.080
we're going to be able to build
and execute that AppleScript for

00:14:10.080 --> 00:14:11.850
every item in the table view.

00:14:12.220 --> 00:14:15.930
So this is something in an app
that we're calling Batch Processor.

00:14:15.940 --> 00:14:17.260
So let's go ahead and take a look at it.

00:14:17.290 --> 00:14:18.950
We're going to start
attaching some scripts to it.

00:14:18.980 --> 00:14:21.620
So we see that we've named
some objects already,

00:14:21.620 --> 00:14:23.500
and we've named the table view.

00:14:23.500 --> 00:14:26.200
And we can tell that we've got the
table view selected because you can

00:14:26.200 --> 00:14:29.580
see that it has the table view name
up in the title of the info panel.

00:14:29.580 --> 00:14:33.080
And what we're going to look for is that
there's a category called drag and drop.

00:14:33.080 --> 00:14:35.810
And so he's going to check
the drop event handler for us.

00:14:35.810 --> 00:14:40.520
And then also, when the nib is loaded,
we want to set and make sure that we

00:14:40.520 --> 00:14:42.590
register for a particular type of drag.

00:14:42.680 --> 00:14:45.190
So let's go ahead and click the drag.

00:14:45.400 --> 00:14:46.330
The Awake from Nib.

00:14:46.330 --> 00:14:47.930
And then, okay,
we're going to attach this to

00:14:47.930 --> 00:14:49.970
our document.AppleScript file.

00:14:49.980 --> 00:14:51.740
So let's go ahead and
we'll edit the script now.

00:14:51.740 --> 00:14:53.850
So he's going to fill out.

00:14:53.870 --> 00:14:57.370
Now, lest you think that John's
the world's fastest typer,

00:14:57.370 --> 00:15:00.940
we're actually using something
called Demo Assistant.

00:15:00.940 --> 00:15:05.320
It's a sample that ships with
Mac OS X and the developer tools.

00:15:05.320 --> 00:15:07.580
Allows you to do this
fancy little command too,

00:15:07.580 --> 00:15:09.500
and we populate all the script for you.

00:15:09.500 --> 00:15:11.460
And so he's filled out
the Awake from Nib,

00:15:11.460 --> 00:15:13.450
and let's go ahead and
fill out the onDrop,

00:15:13.470 --> 00:15:14.730
and then we'll talk about that.

00:15:14.940 --> 00:15:17.190
Okay,
so let's look at the onAwake from Nib.

00:15:17.240 --> 00:15:21.340
And you can see we have
the tell the object,

00:15:21.430 --> 00:15:23.500
in this case the object
is the table view,

00:15:23.500 --> 00:15:26.930
to register for drag types,
and we want the file names.

00:15:26.990 --> 00:15:28.220
We could pass it a full list.

00:15:28.310 --> 00:15:30.150
We could pass it string, color, font.

00:15:30.220 --> 00:15:32.850
There's a lot of different
types that you can register for.

00:15:32.860 --> 00:15:34.780
In this case, we just want file names.

00:15:35.200 --> 00:15:37.820
Now, up in the onDropped handler,
you'll see that we have

00:15:37.820 --> 00:15:41.080
simply just a display dialog,
because we're just going to test this.

00:15:41.080 --> 00:15:44.120
We're going to drag in some files,
and what we should get when we're

00:15:44.120 --> 00:15:45.600
done is a dialog popping up.

00:15:45.690 --> 00:15:46.940
So let's go ahead and build and run this,
John.

00:15:54.380 --> 00:15:59.180
Okay, so the application comes up,
and he's going to go into the finder,

00:15:59.180 --> 00:16:02.620
and we're going to show a kind
of cool Mac OS X thing we can do.

00:16:02.620 --> 00:16:06.600
We can go to our AppleScript Studio's
examples and go into the little

00:16:06.610 --> 00:16:10.220
search field and type .pbproj,
and it will quickly filter

00:16:10.220 --> 00:16:12.610
all of the project files,
because when we're done,

00:16:12.610 --> 00:16:15.400
we're actually going to build some
things using some Xcode scriptability.

00:16:15.400 --> 00:16:18.120
So now he's going to move that over,
drag those files in.

00:16:24.770 --> 00:16:26.510
As you see now, as he's dragging that
over the table view,

00:16:26.510 --> 00:16:28.920
you get the little plus indicator
indicating that it actually drops.

00:16:28.970 --> 00:16:30.620
If you were to try to drag
it over the text view,

00:16:30.620 --> 00:16:34.540
you see nothing because we've only
registered for a drag in the table view.

00:16:34.540 --> 00:16:35.600
So go ahead and drop those in, John.

00:16:35.600 --> 00:16:36.510
And there you go.

00:16:36.510 --> 00:16:38.940
We've got the drop
handler just got executed.

00:16:38.940 --> 00:16:42.570
Okay, so that's how easy it is to
add and at least get notified

00:16:42.770 --> 00:16:44.410
that a drop has happened.

00:16:44.410 --> 00:16:45.900
So can we go back to slides, please?

00:16:45.900 --> 00:16:47.090
Okay.

00:16:49.860 --> 00:16:51.150
Okay, now that's great.

00:16:51.150 --> 00:16:52.760
So we've got a drop happening.

00:16:52.760 --> 00:16:54.580
We've got the right kind of data,
at least we hope so,

00:16:54.580 --> 00:16:55.530
and this is what we're going to find out.

00:16:55.540 --> 00:16:58.740
So in order to support drag and drop,
we had to do the next step.

00:16:58.850 --> 00:17:01.580
We had to expose the pasteboard class.

00:17:01.580 --> 00:17:04.240
And so we've done that,
and it actually has a

00:17:04.240 --> 00:17:06.280
series of named pasteboards.

00:17:06.280 --> 00:17:09.300
There's a general pasteboard,
a drag pasteboard, find.

00:17:09.300 --> 00:17:12.110
If you ever notice in Cocoa,
you do a find in one app.

00:17:12.110 --> 00:17:15.540
For better or worse,
that same find is in another Cocoa app,

00:17:15.540 --> 00:17:18.040
and we can actually script that as well.

00:17:18.620 --> 00:17:22.060
And we also then have a
preferred contents property.

00:17:22.080 --> 00:17:25.180
You can put data on a pasteboard
in a lot of different formats.

00:17:25.180 --> 00:17:28.610
It can have strings, files, lists,
images.

00:17:28.700 --> 00:17:32.010
This way we can say,
we want this type of data in this format,

00:17:32.080 --> 00:17:35.040
and we can get and set it
in that particular format.

00:17:36.000 --> 00:17:38.420
So what we're going to do is
demonstrate a little bit using

00:17:38.420 --> 00:17:41.810
bringing up our new Script Editor and
having the application still running.

00:17:41.970 --> 00:17:44.200
We're going to look and find out
what we can about pasteboards.

00:17:44.200 --> 00:17:46.860
So John's going to use the
contextual menu on Script Editor,

00:17:46.860 --> 00:17:51.850
and he's going to actually insert some
script in a tele-application block,

00:17:51.920 --> 00:17:55.410
and he's going to type
in batch processor.

00:17:57.610 --> 00:17:59.460
And then he's going to fill out,
and we're going to just

00:17:59.460 --> 00:18:00.450
ask it for the pasteboards.

00:18:00.490 --> 00:18:03.830
What pasteboards do you
have in your application?

00:18:06.100 --> 00:18:07.670
And when he goes ahead
and checks and runs that,

00:18:07.670 --> 00:18:10.880
you'll see down in the result window
that we have a series of pasteboards.

00:18:10.950 --> 00:18:11.510
They're all named.

00:18:11.510 --> 00:18:14.750
There's a general, there's a font, find,
and drag.

00:18:14.750 --> 00:18:16.710
And the one that we're going
to test at the moment is just

00:18:16.710 --> 00:18:18.020
look at the general pasteboard.

00:18:18.020 --> 00:18:21.900
So let's see what the things there are
about a pasteboard that are interesting.

00:18:21.940 --> 00:18:24.360
So let's look at the
properties of the pasteboard.

00:18:24.360 --> 00:18:25.510
Here we go.

00:18:28.800 --> 00:18:30.150
We're going to look at
the particular pasteboard.

00:18:30.160 --> 00:18:31.200
We're going to do it by name.

00:18:31.200 --> 00:18:32.800
So we'll go ahead and run that.

00:18:32.800 --> 00:18:34.790
And you'll see that there is
actually a lot of different

00:18:34.790 --> 00:18:36.160
types of data on that pasteboard.

00:18:36.220 --> 00:18:38.180
Some of it is listed as rich text,
string.

00:18:38.180 --> 00:18:39.830
There's also some Carbon types.

00:18:40.010 --> 00:18:43.270
Don't ask me what they are,
but they're there if you need them.

00:18:43.270 --> 00:18:45.980
And then there's also the
different type of class.

00:18:45.980 --> 00:18:48.870
The preferred type in this
case is defaults to string.

00:18:48.870 --> 00:18:51.740
And the contents at the
moment has the string general.

00:18:51.740 --> 00:18:55.600
And so we can actually go ahead and
change the contents of the pasteboard.

00:18:55.600 --> 00:18:58.230
And we'll do a set contents
of pasteboard general.

00:19:01.890 --> 00:19:02.990
And he's going to go ahead and run that.

00:19:03.040 --> 00:19:05.360
And then he'll just
choose paste somewhere,

00:19:05.360 --> 00:19:07.240
and you'll see that it
now has that variable.

00:19:07.260 --> 00:19:09.750
Now, there's a reason why
I demonstrated this for you.

00:19:09.800 --> 00:19:12.750
And this is a great tool
while developing studio apps.

00:19:12.760 --> 00:19:14.640
They're live, they're running,
they're scriptable.

00:19:14.640 --> 00:19:18.400
You can easily delve in,
use it as a great debugging tool

00:19:18.400 --> 00:19:21.800
to figure out where your views are,
why something is or isn't responding.

00:19:21.800 --> 00:19:23.220
And so this is a great way to do that.

00:19:23.280 --> 00:19:24.960
So let's go ahead and we'll quit that.

00:19:25.020 --> 00:19:26.040
We'll quit Project Builder.

00:19:26.130 --> 00:19:28.150
I'm sorry, I knew I'd do that.

00:19:28.540 --> 00:19:31.990
Xcode, our batch processor,
and the other application,

00:19:32.050 --> 00:19:32.900
our script editor.

00:19:32.900 --> 00:19:34.570
And let's go back in,
and we're going to fill

00:19:34.570 --> 00:19:35.480
out the drop handler.

00:19:35.480 --> 00:19:36.940
So we'll get rid of that display dialog.

00:19:36.940 --> 00:19:40.080
And we'll go ahead and let
John put all these lines in,

00:19:40.080 --> 00:19:41.550
and then we'll quickly talk about them.

00:19:43.780 --> 00:19:45.940
Now, so what's going to happen is
that the drop is going to happen,

00:19:45.940 --> 00:19:48.390
and you'll see up there that
there's a variable called dragInfo,

00:19:48.390 --> 00:19:50.780
and that's a type of called dragInfo.

00:19:50.780 --> 00:19:52.870
And it has a couple different things.

00:19:52.870 --> 00:19:54.620
It has one of them,
and the one we care about is

00:19:54.620 --> 00:19:56.020
it has the pasteboard property.

00:19:56.020 --> 00:19:59.370
And so what we're going to do is
we're going to find out the types that

00:19:59.380 --> 00:20:01.330
are in the pasteboard of this drag.

00:20:01.340 --> 00:20:05.470
And then we want to go on to the next
line and make sure that what we have in

00:20:05.470 --> 00:20:07.840
that list or array is the file names.

00:20:07.940 --> 00:20:09.580
So let's go on down to it.

00:20:09.660 --> 00:20:12.050
It's hard to see on this monitor,
so I'll look over here.

00:20:12.440 --> 00:20:14.570
And we're going to set
the preferred type.

00:20:14.660 --> 00:20:18.100
We want to make sure that we get the data
out of that pasteboard as file names.

00:20:18.120 --> 00:20:21.380
And then we're going to simply get
the contents and put it in a list.

00:20:21.380 --> 00:20:23.960
And in this case,
we're going to just display a dialog,

00:20:24.080 --> 00:20:26.780
show the fact that we got the
data that we were expecting.

00:20:26.780 --> 00:20:28.080
So let's go ahead and build and run this,
John.

00:20:33.060 --> 00:20:35.760
compiles and launches,
and he's going to drag that out.

00:20:35.760 --> 00:20:38.880
We'll open up our list of files again.

00:20:39.540 --> 00:20:42.840
and this time as he adds it,
we'll get a dialogue that lists

00:20:42.840 --> 00:20:48.200
the fact that we're actually,
we're not getting files or aliases,

00:20:48.200 --> 00:20:48.200
but we're getting full POSIX paths.

00:20:48.410 --> 00:20:51.470
Typically everything in Studio works
because it's built on top of

00:20:51.480 --> 00:20:54.190
CocoaScript and currently works
in the Notion and POSIX paths.

00:20:54.200 --> 00:20:56.300
We're hoping to unify that
in some future release.

00:20:56.300 --> 00:20:58.950
So let's go ahead.

00:20:59.510 --> 00:21:00.170
and go back.

00:21:00.510 --> 00:21:03.420
And now,
we'll go on to the back to the slides,

00:21:03.420 --> 00:21:03.800
please.

00:21:05.660 --> 00:21:06.670
So that talks about the pasteboard.

00:21:06.720 --> 00:21:07.720
So now we've done the drag.

00:21:07.720 --> 00:21:10.190
We got the data out of it,
out of the pasteboards.

00:21:10.220 --> 00:21:11.480
Now we need to do something with it.

00:21:11.520 --> 00:21:15.450
We need to populate that table and
put the data so that you can see that.

00:21:15.490 --> 00:21:17.270
And the way that we do
that is with data sources.

00:21:17.270 --> 00:21:19.010
And we've made some enhancements.

00:21:19.010 --> 00:21:22.260
There were several issues that came up,
and we've listened to that,

00:21:22.260 --> 00:21:24.580
and we tried to fix as
many things as we could.

00:21:24.580 --> 00:21:26.120
And one of them was Make New.

00:21:26.120 --> 00:21:29.410
We wanted to be able to support
Make New for data sources.

00:21:29.410 --> 00:21:32.050
You used to have to go in,
drag this funny-looking cube thing out,

00:21:32.050 --> 00:21:33.080
make a connection.

00:21:33.080 --> 00:21:35.570
It was about a page and a
half of documentation to do.

00:21:35.600 --> 00:21:37.600
And you had to describe
something that should be simple.

00:21:37.600 --> 00:21:39.500
What we did is made it very simple.

00:21:39.500 --> 00:21:42.920
You just simply say Make New Data Source,
and you get your new

00:21:42.920 --> 00:21:43.810
data source in one line.

00:21:43.820 --> 00:21:46.300
We also found that it
wasn't terribly fast,

00:21:46.300 --> 00:21:50.300
creating new data rows individually,
populating the data cells.

00:21:50.300 --> 00:21:53.380
And we found that we could just
simply do it with an append command.

00:21:53.380 --> 00:21:55.570
You give it an append command
with a list of records,

00:21:55.650 --> 00:21:57.830
AppleScript records,
and it does it all for you very,

00:21:57.960 --> 00:22:00.660
very quickly, much faster than you
could do it yourself.

00:22:02.210 --> 00:22:05.340
We also added sorting support,
so you could sort the data sources.

00:22:05.340 --> 00:22:08.740
And you can pick out which
is the default sort column,

00:22:08.740 --> 00:22:12.540
if they have ascending, descending,
what type of sort that they will have.

00:22:12.730 --> 00:22:13.780
And so we'll take a look at that.

00:22:13.780 --> 00:22:14.750
So we're going to go on to the next step.

00:22:14.780 --> 00:22:17.200
So let's go back to our demo machine.

00:22:18.990 --> 00:22:21.040
And so what we're going to do is we're
going to go back to our wake from nib.

00:22:21.040 --> 00:22:23.540
And when the table view
is loaded from the nib,

00:22:23.540 --> 00:22:25.820
we need to set some things up
in order to make this happen.

00:22:25.820 --> 00:22:28.000
And so again, I'll just let John go
ahead and fill those out,

00:22:28.000 --> 00:22:30.000
and then we'll come back
and we'll talk about that.

00:22:30.020 --> 00:22:32.690
So the idea is we're going
to create a data source.

00:22:32.700 --> 00:22:36.500
We're going to create a data column
that matches every table view column

00:22:36.500 --> 00:22:38.340
that we had in our table view.

00:22:38.340 --> 00:22:41.450
And then after that, when we do the drag,
we'll later add the data

00:22:41.450 --> 00:22:42.710
rows that go with that.

00:22:43.200 --> 00:22:45.660
So let's take a look at
that make new data source.

00:22:45.660 --> 00:22:48.820
Okay, you can see that we make a new
data source and we put it at

00:22:48.840 --> 00:22:50.450
the end of the data source.

00:22:50.460 --> 00:22:53.010
AppleScript always wants to know where
to put things when you make them.

00:22:53.100 --> 00:22:55.040
Quite often there's a default place.

00:22:55.040 --> 00:22:57.070
In this case,
we needed to specify that to put

00:22:57.070 --> 00:22:58.720
it at the end of the data sources.

00:22:58.720 --> 00:23:01.430
The next section just creates
all of our data columns,

00:23:01.430 --> 00:23:02.680
again using make new.

00:23:02.680 --> 00:23:05.240
And we actually pass a few
different parameters to it.

00:23:05.240 --> 00:23:07.560
Name, we have to name each
of these data columns.

00:23:07.590 --> 00:23:11.220
And this is an important thing to
remember when you're using data sources.

00:23:11.580 --> 00:23:15.430
The name of each data column has
to match the AppleScript name

00:23:15.500 --> 00:23:17.270
of the table view column.

00:23:17.270 --> 00:23:19.930
And that's how it does all of
its magic in matching it up.

00:23:20.060 --> 00:23:23.420
If they're named correctly
or they don't match,

00:23:23.420 --> 00:23:24.550
it won't work.

00:23:24.660 --> 00:23:25.910
You won't get any data in your column.

00:23:25.920 --> 00:23:27.770
So you have to make
sure those are correct.

00:23:27.770 --> 00:23:30.830
And there's also some sort information
you can specify for a data source,

00:23:30.910 --> 00:23:33.790
whether it's ascending or descending,
alphabetical or numerical,

00:23:33.860 --> 00:23:34.860
and some other data.

00:23:34.860 --> 00:23:36.580
So let's go on and
look at the rest of it.

00:23:36.600 --> 00:23:40.470
Okay, the next thing you need to do
is to tell it that it is sorted.

00:23:40.480 --> 00:23:41.160
Okay, the next thing you need to do
is to tell it that it is sorted.

00:23:41.160 --> 00:23:43.610
Because you could go ahead and set
everything up and then turn off

00:23:43.710 --> 00:23:45.120
sorting or turn it off as you like.

00:23:45.190 --> 00:23:46.860
And you simply do that
by setting the property.

00:23:48.980 --> 00:23:50.760
And then the next thing we
want to do is make sure we

00:23:50.860 --> 00:23:52.600
set the sort column for that.

00:23:52.600 --> 00:23:55.080
And then the very last thing and
the most important is to hook it up.

00:23:55.150 --> 00:23:58.250
So we basically set the data source
property again of the object,

00:23:58.250 --> 00:24:01.480
which is the table view,
to this new data source that we created.

00:24:01.480 --> 00:24:02.900
All right.

00:24:02.920 --> 00:24:06.030
And then what we're going to do is we're
going to go replace that display dialog.

00:24:06.030 --> 00:24:07.720
So we've got our data
source all ready to go,

00:24:07.790 --> 00:24:10.000
and we're going to add a few
lines here to replace that.

00:24:10.060 --> 00:24:12.580
And we want to make sure
that we got at least one file

00:24:12.580 --> 00:24:14.160
dropped onto our table view.

00:24:14.160 --> 00:24:16.700
And then we're going to call this
handler called add files to data source.

00:24:17.980 --> 00:24:20.700
And we're going to go add
that down at the end here.

00:24:23.470 --> 00:24:25.840
And you can see that it's a local
handler that we're going to call.

00:24:25.840 --> 00:24:28.600
We're going to pass it the files,
and we're going to pass it the

00:24:28.680 --> 00:24:30.780
data source that we want to
append this information to.

00:24:30.780 --> 00:24:32.270
And we'll go to the first line.

00:24:32.280 --> 00:24:34.180
It's an important line, the setup date.

00:24:34.180 --> 00:24:36.770
I'll go ahead and add the next piece,
John.

00:24:38.210 --> 00:24:40.720
Okay, and let's take a look at the
update views of data source.

00:24:40.720 --> 00:24:43.540
Whenever you're going to put a
bunch of data into the data source,

00:24:43.540 --> 00:24:46.100
you want to make sure that you
turn off the updating of views.

00:24:46.160 --> 00:24:48.280
Otherwise,
what will happen is in the table view,

00:24:48.280 --> 00:24:50.060
you'll see them individually added.

00:24:50.060 --> 00:24:52.790
And not only is it distracting
to see them individually added,

00:24:52.790 --> 00:24:53.900
but it's much slower.

00:24:53.900 --> 00:24:54.890
So turn those off.

00:24:54.890 --> 00:24:56.280
Go into a repeat loop.

00:24:56.340 --> 00:24:58.120
We make each new data row.

00:24:58.120 --> 00:25:01.960
We're going to store away a
reference to that full file path.

00:25:02.000 --> 00:25:04.390
We're going to set the
contents of each data cell,

00:25:04.390 --> 00:25:06.960
because what happens is
when we make a new data row,

00:25:06.960 --> 00:25:08.080
it creates for you a new data row.

00:25:08.100 --> 00:25:16.370
So we're going to call it a table view,
a named data cell for every row.

00:25:16.370 --> 00:25:16.370
There's a cell for every table
or data row in the column.

00:25:16.990 --> 00:25:19.770
Okay, and then we'll go down and we're
going to set the contents of the

00:25:19.790 --> 00:25:21.040
name one in this particular case.

00:25:21.040 --> 00:25:22.720
And we're going to use call method.

00:25:22.720 --> 00:25:24.970
And I remember I told you
that we could actually use

00:25:24.970 --> 00:25:26.630
Objective-C or other languages.

00:25:26.630 --> 00:25:30.190
And there happens to be this
wonderful little utility class

00:25:30.370 --> 00:25:32.340
on Objective-C and as string.

00:25:32.340 --> 00:25:34.460
And it's a last path component.

00:25:34.460 --> 00:25:37.240
What it does is it takes a posix
path and gives me the last item.

00:25:37.240 --> 00:25:40.250
I don't have to worry about
parsing the slashes or the colons.

00:25:40.250 --> 00:25:44.520
And with a simple little call method,
I can directly message the object

00:25:44.520 --> 00:25:46.800
and it will get it of the item again.

00:25:46.900 --> 00:26:15.800
So, I think we're ready, John?

00:26:15.800 --> 00:26:16.580
You ready?

00:26:16.900 --> 00:26:20.770
All right, let's build and run that.

00:26:22.140 --> 00:26:25.160
So we're getting closer, getting closer,
building this application.

00:26:25.280 --> 00:26:28.020
So now when it's up and running,
he's going to go in there,

00:26:28.020 --> 00:26:30.920
drag some files, and you can see, voila,
we've added our files,

00:26:30.920 --> 00:26:33.020
and they've all shown up,
all parsed correctly.

00:26:33.020 --> 00:26:37.110
And it has our date modified filled out,
our name filled out in the path,

00:26:37.110 --> 00:26:39.890
and the status we'll
take care of in a minute.

00:26:40.080 --> 00:26:42.630
Now you'll notice that John's going
to try clicking on the columns.

00:26:42.660 --> 00:26:45.910
Well, we said it'd be sorted,
but unfortunately we

00:26:45.910 --> 00:26:47.290
forgot one thing to add.

00:26:47.290 --> 00:26:50.400
And we're not recognizing the
fact that the column got clicked,

00:26:50.400 --> 00:26:52.360
so we need to add that event handler.

00:26:53.710 --> 00:26:58.260
So we'll go back into our
document bib in Interface Builder,

00:26:58.260 --> 00:27:01.210
and we'll go to the Data View categories.

00:27:02.680 --> 00:27:04.270
and we'll look for,
I know that there's one in

00:27:04.270 --> 00:27:07.420
there called Column Clicked,
and we want to select that one.

00:27:07.420 --> 00:27:10.080
And it's already attached to
the document as AppleScript,

00:27:10.110 --> 00:27:11.700
so we'll click our Edit Script.

00:27:11.990 --> 00:27:15.720
Now, the script that he's inserting
here is pretty much boilerplate.

00:27:15.750 --> 00:27:18.240
Any time that you're going to
do sorting on a table view,

00:27:18.240 --> 00:27:19.320
just go copy this code.

00:27:19.320 --> 00:27:22.690
There's examples already that we
ship that has this bit of script.

00:27:22.850 --> 00:27:25.680
And it basically looks at it, says, "Oh,
what was the last column?

00:27:25.680 --> 00:27:27.680
If it's the last sorted
column is different,

00:27:27.830 --> 00:27:29.680
switch to that and make
that the primary column.

00:27:29.680 --> 00:27:32.430
If it's the same one,
just switch the ordering." So it's

00:27:32.490 --> 00:27:34.160
something that we'll do there.

00:27:34.160 --> 00:27:36.320
What we'd like to do is make
this even more automatic,

00:27:36.320 --> 00:27:39.390
excuse me,
automatic so that it just happens.

00:27:39.400 --> 00:27:41.120
You don't have to worry
about clicking on the,

00:27:41.120 --> 00:27:43.230
or doing a click tantrum,
we'll try to do that for you.

00:27:43.430 --> 00:27:45.360
So I think that should be it for sorting,
John.

00:27:45.390 --> 00:27:47.390
Let's go ahead and go and run that.

00:27:52.950 --> 00:27:55.420
Okay, let's drag out some items.

00:27:55.450 --> 00:27:55.900
See what we got.

00:27:55.940 --> 00:27:57.580
Drag out a few more.

00:27:57.580 --> 00:28:01.400
And we just keep adding as we like,
and you'll notice now as it clicks

00:28:01.450 --> 00:28:04.260
that it actually changes the
ascending and descending order.

00:28:04.260 --> 00:28:07.100
If it clicks on a different column,
we can change the type and date modified.

00:28:07.100 --> 00:28:09.320
Now you'll notice there's
no little indicator.

00:28:09.320 --> 00:28:11.330
I'm hoping that Cocoa puts
that in there for us,

00:28:11.330 --> 00:28:14.260
but I'll probably have to put that
in there myself so that you'll know

00:28:14.260 --> 00:28:16.000
which way that those are sorting.

00:28:16.000 --> 00:28:17.860
So again,
those are as much as we can do for you,

00:28:17.860 --> 00:28:19.040
that's what we want to do.

00:28:19.040 --> 00:28:22.660
So that takes care of doing the
data source support with supporting.

00:28:22.660 --> 00:28:26.050
So let's go back to the slides, please.

00:28:27.130 --> 00:28:28.990
Okay.

00:28:29.000 --> 00:28:30.900
In the process of
building this application,

00:28:30.900 --> 00:28:32.690
we started out with a document-based app.

00:28:32.770 --> 00:28:35.750
And what we wanted to do ultimately
is to be able to save those files

00:28:35.750 --> 00:28:38.640
that we drug in there plus the
script and save it as a document,

00:28:38.640 --> 00:28:41.300
and then we could open it
up and process this later.

00:28:41.300 --> 00:28:43.940
And there are two ways that
you can do document-based

00:28:43.940 --> 00:28:45.760
support in AppleScript Studio.

00:28:46.400 --> 00:28:49.930
One is there's two event handlers
that are high-level event handlers,

00:28:50.060 --> 00:28:51.590
and there are two low-level.

00:28:51.590 --> 00:28:53.620
Now, the high-level are the easiest ones.

00:28:53.620 --> 00:28:56.690
Well, they're both pretty easy,
but the first two are the easiest,

00:28:56.690 --> 00:28:58.960
and those are the ones
that are on by default.

00:28:58.980 --> 00:29:02.850
This is when you, what you'll do is data
representation gets called when

00:29:02.980 --> 00:29:06.680
the document is about to be saved,
and you just return the data that

00:29:06.680 --> 00:29:08.700
you want saved in the document.

00:29:08.700 --> 00:29:11.670
You don't have to worry about writing
the file or anything like that.

00:29:11.740 --> 00:29:14.340
You just pass back the
AppleScript data that you want saved.

00:29:15.320 --> 00:29:18.100
Then when the document is opened,
you go to the load data

00:29:18.100 --> 00:29:22.260
representation handler gets called,
and it passes back to you the data that

00:29:22.260 --> 00:29:24.330
you gave it when it was saved before.

00:29:24.330 --> 00:29:27.280
So then you simply update
your UI with that data.

00:29:27.280 --> 00:29:30.800
Now, if it's important to you to actually
be concerned about how each byte

00:29:30.810 --> 00:29:33.790
is read from the disk or the format
or the structure of the file,

00:29:33.830 --> 00:29:37.020
you can use the low-level event handlers,
and you just get past the

00:29:37.020 --> 00:29:39.620
POSIX path to the file,
and you can write out the data,

00:29:39.620 --> 00:29:42.320
and then you can read
the data back yourself.

00:29:43.720 --> 00:29:45.820
In this case, we're going to use the
high-level event handlers.

00:29:45.860 --> 00:29:46.860
They're exclusive, though.

00:29:46.860 --> 00:29:47.850
You can't pick and choose.

00:29:47.860 --> 00:29:49.720
You either have to go high
or you have to go low.

00:29:49.870 --> 00:29:50.790
So we're going to go high.

00:29:50.860 --> 00:29:52.940
So let's switch back to our demo machine.

00:29:56.130 --> 00:29:59.200
And you'll see that this particular,
since we chose a document-based

00:29:59.200 --> 00:30:01.100
application project,
it already starts out with

00:30:01.100 --> 00:30:02.250
those two handlers checked.

00:30:02.330 --> 00:30:05.240
So we don't have to go into the
document app or NIV and turn them on.

00:30:05.260 --> 00:30:06.160
They're already there.

00:30:06.160 --> 00:30:07.240
We're just going to go
ahead and fill them out.

00:30:07.290 --> 00:30:09.180
So let's fill out the
data representation one.

00:30:13.400 --> 00:30:14.420
I'll let them put that in.

00:30:14.500 --> 00:30:16.690
And again, remember,
this will get called when it's

00:30:16.690 --> 00:30:18.160
time to save your application.

00:30:18.160 --> 00:30:20.540
And the object represents
the document object,

00:30:20.540 --> 00:30:24.180
and of type just tells you what type
of file that you might want to save.

00:30:24.190 --> 00:30:25.320
And you can set up for multiple types.

00:30:25.320 --> 00:30:26.620
In this case, we just have the default.

00:30:26.620 --> 00:30:33.780
And he's going to fill out
the load data representation,

00:30:33.780 --> 00:30:34.900
and we'll quickly talk about those.

00:30:34.900 --> 00:30:34.900
Let's go back up to the first one.

00:30:36.410 --> 00:30:38.790
And so the first thing we
do is we have the document.

00:30:38.790 --> 00:30:41.840
What we really need to do is get the
data out of the table view or out of

00:30:41.840 --> 00:30:43.500
the data source of the table view.

00:30:43.500 --> 00:30:47.520
And we can do that by using the
window elements of a document.

00:30:47.520 --> 00:30:49.150
So we get window one of that document.

00:30:49.860 --> 00:30:52.180
And then we go ahead and get
the table view and get the data

00:30:52.210 --> 00:30:53.580
source out of the table view.

00:30:53.580 --> 00:30:57.560
And then we're going to get the
associated object of every data row.

00:30:57.560 --> 00:30:59.140
This is the thing I love
about AppleScript.

00:30:59.140 --> 00:31:03.150
This one single line saves me
from repeating over things.

00:31:03.190 --> 00:31:05.770
I just say,
give me this property of every

00:31:05.990 --> 00:31:08.080
single one of those data rows.

00:31:08.080 --> 00:31:12.580
So what we get back is originally
what we were given in the drop that

00:31:12.650 --> 00:31:15.370
we get a list of files of POSIX paths.

00:31:15.370 --> 00:31:18.160
So then we'll get the contents
of the text view because we also

00:31:18.160 --> 00:31:19.580
want to save out the script.

00:31:19.860 --> 00:31:21.730
And then we want to return that.

00:31:21.790 --> 00:31:26.000
So look at what we're returning
is we are returning the files to

00:31:26.000 --> 00:31:30.830
process and we're returning the
script as an AppleScript record.

00:31:30.830 --> 00:31:33.120
So that when load data
representation happens,

00:31:33.140 --> 00:31:35.460
that's what we're going
to get passed back in.

00:31:35.470 --> 00:31:37.260
We're going to get passed
back in an AppleScript record

00:31:37.350 --> 00:31:38.480
that has those two elements.

00:31:38.480 --> 00:31:40.550
So let's go ahead and look at
the load data representation.

00:31:40.550 --> 00:31:41.910
Basically the same thing.

00:31:41.990 --> 00:31:44.700
Need to get the window,
need to get the data source.

00:31:44.700 --> 00:31:47.940
And then we're going to use that
same handler that we had before,

00:31:47.940 --> 00:31:49.580
the add files to data source.

00:31:49.620 --> 00:31:49.820
Okay.

00:31:49.860 --> 00:31:52.800
So we'll have exactly
the same format of data.

00:31:52.810 --> 00:31:55.540
And then let's take a look and then we'll
set the contents of the script view.

00:31:55.670 --> 00:31:59.720
So let's go ahead and build and
run this and see if it works.

00:32:02.700 --> 00:32:05.380
Okay, so we got our view,
we got our table view ready to go.

00:32:05.380 --> 00:32:10.570
We'll open up our files,
drag some files in.

00:32:10.740 --> 00:32:12.700
And then we'll actually go modify
the script because it always

00:32:12.750 --> 00:32:14.770
comes up with a default script,
so you'll see that we're actually

00:32:14.780 --> 00:32:16.430
going to be saving a different script.

00:32:16.540 --> 00:32:19.460
And let's choose a save
from the file menu.

00:32:19.750 --> 00:32:22.090
And we'll give it a name.

00:32:23.790 --> 00:32:24.660
and save that.

00:32:24.660 --> 00:32:27.460
And we already had one there before.

00:32:27.460 --> 00:32:27.840
That's okay.

00:32:27.840 --> 00:32:28.800
We'll go ahead and close it now.

00:32:28.820 --> 00:32:30.400
And then we're going
to go to the File menu,

00:32:30.400 --> 00:32:32.470
and we'll go to Open Recent,
and we're going to choose

00:32:32.580 --> 00:32:33.700
that file we just saved.

00:32:33.780 --> 00:32:34.300
And there you go.

00:32:34.300 --> 00:32:40.220
We've opened back up the files and the
script with just very little script.

00:32:40.220 --> 00:32:40.940
Okay.

00:32:40.940 --> 00:32:43.660
So let's go back to the slides, please.

00:32:45.000 --> 00:32:47.180
So those are the 1.2 features.

00:32:47.180 --> 00:32:49.720
So we were able to drag and drop,
be able to get the

00:32:49.720 --> 00:32:50.820
data from a pasteboard.

00:32:50.820 --> 00:32:54.360
We were able to add data to the
table view through the data source

00:32:54.360 --> 00:32:57.280
with the enhancements we made,
and then very easily create

00:32:57.280 --> 00:32:59.640
a document from that,
which is far simpler than we

00:32:59.680 --> 00:33:01.210
had in our earlier releases.

00:33:01.210 --> 00:33:04.750
So now what I'd like to do is talk
about some of the features that

00:33:04.750 --> 00:33:07.490
we're releasing in Studio 1.3.

00:33:09.000 --> 00:33:10.890
Drum roll, please.

00:33:11.090 --> 00:33:11.790
What is it?

00:33:11.890 --> 00:33:15.140
Well, it may look like a short list,
but it's a very, very important list.

00:33:15.140 --> 00:33:18.710
And the first one is a script property,
and the second one is plug-in support,

00:33:18.710 --> 00:33:21.600
and we're going to show you that
with some Xcode scriptability.

00:33:21.600 --> 00:33:25.090
Let's talk about that first one.

00:33:26.860 --> 00:33:28.220
This is the one I'm most excited about.

00:33:28.220 --> 00:33:31.950
It's really going to have a great,
terrific impact on the way that

00:33:32.000 --> 00:33:33.100
you write Studio applications.

00:33:33.100 --> 00:33:37.690
The fact is, every object,
any Cocoa Inessence masked object,

00:33:37.690 --> 00:33:43.120
gets a script property so that you can
do things like access the properties or

00:33:43.120 --> 00:33:45.820
globals or event handlers of a script.

00:33:45.880 --> 00:33:50.580
So you can imagine that you have a
foo property on a script on a button.

00:33:50.720 --> 00:33:53.260
So now you can say foo
of script of button one.

00:33:53.260 --> 00:33:56.780
Or if we're able to step over the script,
you'll just be able to say foo of

00:33:56.890 --> 00:33:58.640
button one and get that property.

00:33:58.640 --> 00:34:01.820
Or set foo of button
one to some new value.

00:34:01.820 --> 00:34:04.240
So you can imagine,
instead of these big monolithic scripts

00:34:04.270 --> 00:34:07.170
that we've had to write in the past,
that you can have very small scripts

00:34:07.250 --> 00:34:10.760
because now it's very easy to
talk to scripts of other objects.

00:34:10.760 --> 00:34:13.140
And we can call their handlers as well.

00:34:13.140 --> 00:34:17.040
The other cool thing is that you
can take those scripts and you

00:34:17.140 --> 00:34:19.150
can set new ones dynamically.

00:34:19.240 --> 00:34:20.520
You can change during runtime.

00:34:20.720 --> 00:34:23.590
You can set a button to actually
have a different unclicked

00:34:23.930 --> 00:34:25.680
handler or a new menu item,
if you like,

00:34:25.730 --> 00:34:28.820
and be able to create those things on
the fly and have different behaviors.

00:34:30.820 --> 00:34:34.430
And another cool thing is that
external applications can access

00:34:34.430 --> 00:34:35.820
that same script property.

00:34:35.990 --> 00:34:38.460
So you can have another studio
app or some other script

00:34:38.460 --> 00:34:42.020
editor or script running,
and you can get the properties,

00:34:42.020 --> 00:34:45.560
the globals, and the handlers of that
running studio application.

00:34:45.560 --> 00:34:50.970
So you can now call back in to a studio
application and execute that event

00:34:50.970 --> 00:34:53.930
handler using AppleScript Studio.

00:34:54.560 --> 00:34:57.530
All right, we'd like to demonstrate
just a little bit about that.

00:34:57.530 --> 00:35:01.260
And this is going to put the
finishing touches on the last of

00:35:01.260 --> 00:35:03.900
our batch processor demonstration.

00:35:04.410 --> 00:35:07.090
So what we'd like to do is go
into our main menu nib this time,

00:35:07.110 --> 00:35:12.100
because we're going to hook
some handlers to our file menu.

00:35:13.410 --> 00:35:17.450
And you'll see that there are two
menu items already added for us.

00:35:17.630 --> 00:35:20.340
One is process all,
and the other one is process selected.

00:35:20.340 --> 00:35:24.040
So we want to be able to just easily
choose a menu item and have all of

00:35:24.040 --> 00:35:26.160
those items in our table view processed.

00:35:26.160 --> 00:35:28.660
So the first thing we have
to do is we have to name it.

00:35:28.690 --> 00:35:31.210
We just name it so that we
can refer to it by name,

00:35:31.210 --> 00:35:33.200
and I'll show you why in a second.

00:35:34.540 --> 00:35:37.050
Then we want to make sure we have
the Choose Menu item selected,

00:35:37.130 --> 00:35:39.690
and we're going to attach it this
time to the application script,

00:35:39.810 --> 00:35:41.840
which is our batch-to-border.AppleScript.

00:35:42.000 --> 00:35:44.610
And we'll do the same
thing for the selected.

00:35:49.100 --> 00:35:52.260
Okay, we'll choose our menu
item and add it to that.

00:35:52.260 --> 00:35:54.600
Let's go ahead and edit our script.

00:35:54.600 --> 00:35:56.100
Now, we have two menu items.

00:35:56.100 --> 00:35:58.810
They're both going to
execute the same handler,

00:35:58.820 --> 00:36:01.100
at least the way that we
set it up at the moment.

00:36:01.100 --> 00:36:03.100
And so we need to know
which one was chosen.

00:36:03.100 --> 00:36:09.380
And the way we do that is we
use the name of the object.

00:36:09.380 --> 00:36:10.090
So go ahead and finish that out,
and we'll take a look at

00:36:10.090 --> 00:36:10.090
it when you're finished.

00:36:10.430 --> 00:36:11.500
And this is a common practice.

00:36:11.530 --> 00:36:12.340
We do this a lot.

00:36:12.430 --> 00:36:14.760
You'll have four or five
buttons in a window,

00:36:14.760 --> 00:36:16.730
and they're all going to
call the same click handler.

00:36:16.730 --> 00:36:19.160
So the easiest thing to do is just
to look at the name of the object

00:36:19.190 --> 00:36:20.640
and do something appropriately.

00:36:20.780 --> 00:36:23.490
Remember back to what I talked about,
the script property in the next

00:36:23.490 --> 00:36:26.330
release is that we're going to be
able to even make smaller ones.

00:36:26.340 --> 00:36:29.220
You can have four different scripts,
one for each button,

00:36:29.220 --> 00:36:30.540
doing their own thing.

00:36:30.540 --> 00:36:33.620
You won't have to do this if naming,
but we didn't get into demo this today.

00:36:33.620 --> 00:36:34.570
So let's go ahead and look at that.

00:36:35.280 --> 00:36:38.450
So we get the, again,
we get the window of the front document,

00:36:38.450 --> 00:36:41.550
we get the table view,
and then this is the fun part.

00:36:41.550 --> 00:36:44.160
We get the script of the front document.

00:36:44.160 --> 00:36:45.820
Remember document.AppleScript?

00:36:45.820 --> 00:36:49.420
We're going to get that script object,
and then we're going to be able to

00:36:49.420 --> 00:36:51.460
call a handler in that AppleScript.

00:36:51.460 --> 00:36:54.730
In this case, when it's for the all menu,
we're going to call process

00:36:54.730 --> 00:36:57.170
all files of table view,
and then on the else case,

00:36:57.170 --> 00:36:59.820
we're checking to see if
it was the selected items.

00:36:59.820 --> 00:37:02.040
And then we go through,
and we get the window,

00:37:02.040 --> 00:37:04.660
get the table view,
and we get the script again.

00:37:04.660 --> 00:37:05.260
And this time,
we're going to do the same thing.

00:37:05.260 --> 00:37:06.090
We're going to call a different handler.

00:37:06.100 --> 00:37:07.760
We're going to call
process selected files.

00:37:07.760 --> 00:37:09.440
So let's go ahead and save this document.

00:37:09.440 --> 00:37:12.300
We'll go and add that handler
to our document.AppleScript.

00:37:19.700 --> 00:38:19.400
[Transcript missing]

00:38:20.550 --> 00:38:24.990
Now, what it's going to do is we're
going to bring it up this time.

00:38:25.010 --> 00:38:30.510
We're going to drag in a bunch of
several AppleScript Studio projects.

00:38:31.080 --> 00:38:33.500
And what we're going to do is we're
going to actually put a real script,

00:38:33.560 --> 00:38:35.540
a running script in here this time.

00:38:35.580 --> 00:38:38.620
Now this isn't a script view,
so it's not going to check the syntax,

00:38:38.720 --> 00:38:40.750
but I'm just able to paste
in a little script here.

00:38:40.750 --> 00:38:43.150
So let's go ahead and put that in, John.

00:38:43.720 --> 00:38:48.820
First thing we do is the file to
process is the file that's passed to us.

00:38:48.840 --> 00:38:50.950
It's going to be a POSIX path,
so we have to get the alias

00:38:51.000 --> 00:38:52.360
to it using the POSIX file.

00:38:52.360 --> 00:38:55.550
It's a good way to transfer
from POSIX file to POSIX path.

00:38:55.640 --> 00:38:59.640
We added that support in a couple
of versions of AppleScript ago.

00:38:59.840 --> 00:39:01.970
We're going to go in and we're
going to tell application

00:39:01.970 --> 00:39:03.420
because Xcode is scriptable now.

00:39:03.470 --> 00:39:05.630
It has more work to go yet,
but there's still quite a

00:39:05.630 --> 00:39:07.050
bit of functionality there.

00:39:07.050 --> 00:39:09.360
So what we're going to do is
we're going to open the file,

00:39:09.450 --> 00:39:12.680
and that's just a standard open message,
and then we're going to set the status

00:39:12.720 --> 00:39:16.380
message because what we're going to do
is call the build last project document.

00:39:16.380 --> 00:39:18.000
There's a build command in Xcode.

00:39:18.000 --> 00:39:19.670
It's going to build and
it'll tell us right now,

00:39:19.670 --> 00:39:21.180
it tells us if it succeeded or failed.

00:39:21.180 --> 00:39:25.410
And then we return that status message,
and our code that we didn't go through

00:39:25.530 --> 00:39:29.440
in detail will actually put the
status message in the column for us.

00:39:29.880 --> 00:39:32.340
So let's go ahead and
we'll build and run this.

00:39:32.500 --> 00:39:36.200
Or actually, we'll just choose now from
the file menu our process all.

00:39:36.260 --> 00:39:38.100
And you'll see that it says processing.

00:39:38.190 --> 00:39:41.240
It's going to tell Xcode
to open the document.

00:39:41.240 --> 00:39:43.760
It compiles it, switches back,
and you see that it succeeded

00:39:43.760 --> 00:39:45.060
in each of these cases.

00:39:45.060 --> 00:39:45.820
So there you go.

00:39:46.050 --> 00:39:52.450
We're able to run that process over
each of those items in that document.

00:39:54.000 --> 00:39:56.000
- Now this is actually quite
useful because I can save

00:39:56.000 --> 00:39:58.400
this as a document now,
and whenever I want to open

00:39:58.400 --> 00:39:59.980
those up and process that,
I can.

00:40:00.330 --> 00:40:01.360
But it's very flexible.

00:40:01.360 --> 00:40:04.310
If I wanted to add a bunch of images,
I could drag some images in,

00:40:04.310 --> 00:40:07.540
and that little run script could call
something to manipulate those images.

00:40:07.540 --> 00:40:09.320
So we're going to put
this out as an example.

00:40:09.320 --> 00:40:12.760
It'll be out there certainly
in the Panther release.

00:40:12.870 --> 00:40:14.760
Hopefully we can put it up
sooner so you can play with it

00:40:14.850 --> 00:40:15.840
with the code that you have.

00:40:15.850 --> 00:40:17.860
And with that,
I'd like to thank John for his help

00:40:17.860 --> 00:40:19.630
on that part of the demo today.

00:40:19.850 --> 00:40:21.710
Thanks, John.

00:40:27.180 --> 00:40:28.500
Of course, I want all my support now.

00:40:28.640 --> 00:40:31.480
It all probably goes downhill from here
because I'll drive the rest of the demo,

00:40:31.480 --> 00:40:32.320
so let's see what we got.

00:40:32.380 --> 00:40:35.440
Okay, next thing, plug-in support.

00:40:35.520 --> 00:40:37.250
I'm also very excited about this.

00:40:37.260 --> 00:40:42.380
What we can do with Xcode Scriptability,
we can now create Studio plug-ins

00:40:42.380 --> 00:40:46.090
that are written in AppleScript that
you can plug into Xcode and enhance

00:40:46.090 --> 00:40:48.910
the environment in ways that we
haven't even begun to think of.

00:40:49.180 --> 00:40:51.170
And we're able to do that.

00:40:51.180 --> 00:40:53.450
We've added a new plug-in
loaded event handler.

00:40:53.450 --> 00:40:57.260
And through that,
it's supported currently with Xcode.

00:40:57.260 --> 00:41:01.170
I believe Sal's got lots of ideas
on where to plug these things in,

00:41:01.270 --> 00:41:03.040
so just stay tuned, okay?

00:41:04.710 --> 00:41:07.290
We've also,
in order to do anything meaningful,

00:41:07.460 --> 00:41:11.880
we needed to add more make new support,
in particular menus and menu items,

00:41:11.880 --> 00:41:14.820
because it's not very interesting if
your plug-in gets loaded and you can't

00:41:14.820 --> 00:41:16.630
really do anything in the environment.

00:41:16.630 --> 00:41:19.770
You need to at least provide
some access to your plug-in,

00:41:19.770 --> 00:41:23.470
so this is the first steps we're
going to add more in the future.

00:41:24.490 --> 00:41:26.740
So I want to talk a little bit
about the Xcode scriptability.

00:41:26.740 --> 00:41:31.590
There are a set of low-level classes
that we'll have that talk about projects

00:41:31.590 --> 00:41:35.710
and targets and file references,
and there's lots more, believe me.

00:41:35.720 --> 00:41:39.700
And then there's the high-level classes,
documents, windows, and views.

00:41:39.700 --> 00:41:41.840
And so we're just beginning on this.

00:41:41.840 --> 00:41:43.340
There's quite a bit in
the preview release.

00:41:43.340 --> 00:41:45.300
There's more to come.

00:41:45.300 --> 00:41:47.150
And we're going to
take advantage of this.

00:41:47.150 --> 00:41:49.450
What I'm going to do is put
together a plug-in that we're

00:41:49.450 --> 00:41:52.210
going to add to Xcode and cross
your fingers and hope it all works.

00:41:52.360 --> 00:41:54.920
So let's go back to our demo machine.

00:41:55.630 --> 00:41:58.140
And what I'd like to do is
open up a different project.

00:41:58.140 --> 00:42:01.920
Again,
there's a bit of UI involved in this,

00:42:01.920 --> 00:42:04.620
so I didn't want to bore you with going
through the process of setting up the UI.

00:42:04.620 --> 00:42:07.220
But I do have a nib here
that's set up already.

00:42:07.220 --> 00:42:09.260
It's our Settings Viewer plug-in.

00:42:09.260 --> 00:42:11.640
Now, actually,
before I get started with that,

00:42:11.640 --> 00:42:13.330
I did want to show you one thing.

00:42:13.340 --> 00:42:15.110
And I wanted to go back to
Script Editor and show you a

00:42:15.110 --> 00:42:16.520
little bit of that scriptability.

00:42:16.540 --> 00:42:18.330
So I'm going to go in
here and do a... Actually,

00:42:18.380 --> 00:42:20.060
I'm going to open up
the nice library window.

00:42:21.000 --> 00:42:21.690
We worked hard.

00:42:21.710 --> 00:42:22.870
We want to make sure we show it.

00:42:22.980 --> 00:42:26.490
So I can come in here and I can find...
Open up the dictionary for Xcode.

00:42:26.500 --> 00:42:28.890
And you can see that there are low level.

00:42:29.020 --> 00:42:30.500
Some of these are the build phases.

00:42:30.500 --> 00:42:31.880
They still, unfortunately, have PB.

00:42:31.880 --> 00:42:34.840
But the references, targets,
applications, and document views.

00:42:35.060 --> 00:42:35.970
Lots of different suites.

00:42:36.030 --> 00:42:39.780
They're actually quite large,
some of these.

00:42:40.250 --> 00:42:42.400
and there's a lot to play with,
which is great.

00:42:42.400 --> 00:42:45.140
I think that's probably the first thing
that most people do when they see a new

00:42:45.140 --> 00:42:48.180
scriptable application is look at all the
different objects you get to play with.

00:42:48.260 --> 00:42:49.820
A great big sandbox.

00:42:49.940 --> 00:42:50.390
It's great.

00:42:50.420 --> 00:42:50.700
It's lovely.

00:42:50.700 --> 00:42:53.070
And so what we can do is
kind of play with that a bit,

00:42:53.070 --> 00:42:56.100
and I'm going to go over and
create a new script for Xcode.

00:42:56.100 --> 00:43:00.180
And what I want to do is just let's
look at what projects we have running.

00:43:00.180 --> 00:43:02.740
And right now I have
Project Settings Viewer,

00:43:02.740 --> 00:43:06.460
and we can do things like look
at the targets of projects.

00:43:06.460 --> 00:43:08.460
Well,
let's just in this case we'll name it.

00:43:08.460 --> 00:43:11.750
So we'll just call it Settings Viewer.

00:43:12.220 --> 00:43:15.590
So I actually see that I have a
bundle target that's part of that,

00:43:15.590 --> 00:43:17.770
and we can even keep drilling
further and further down.

00:43:17.800 --> 00:43:21.440
This is where it's going to get
interesting and pertinent to the demo

00:43:21.440 --> 00:43:22.420
that we're going to create today.

00:43:22.420 --> 00:43:25.220
And we're going to look at the
build settings of the target.

00:43:25.260 --> 00:43:30.390
And you'll see that there's these
funny-looking archaic constants

00:43:30.390 --> 00:43:32.770
here with various settings.

00:43:33.180 --> 00:43:34.340
and how I want to relate this.

00:43:34.370 --> 00:43:36.750
You would get to the same
information from the UI itself

00:43:36.890 --> 00:43:40.240
by going to the target,
selecting the inspector,

00:43:40.280 --> 00:43:41.660
the target there,
and bring up the inspector.

00:43:41.660 --> 00:43:43.420
Well, actually, in this case,
we have to look at it

00:43:43.420 --> 00:43:44.240
in a different place.

00:43:44.240 --> 00:43:48.180
We have to go into our editor
and look at the expert view,

00:43:48.180 --> 00:43:49.280
and here they are.

00:43:49.280 --> 00:43:50.830
Those are the things
that you actually saw.

00:43:50.840 --> 00:43:53.590
Now, the cool thing is you can do
it from inside a script editor.

00:43:53.590 --> 00:43:56.000
You can actually set build
settings or change those build

00:43:56.010 --> 00:43:57.470
settings back in the target.

00:43:57.480 --> 00:44:00.690
But what I wanted to do,
and I thought about the inspectors

00:44:00.690 --> 00:44:03.700
are cool and everything,
and I have reasons for it.

00:44:03.890 --> 00:44:05.610
Ask me later,
and I'll tell you why I think

00:44:05.700 --> 00:44:06.940
the inspectors are cool.

00:44:06.940 --> 00:44:08.030
But it's top-down.

00:44:08.080 --> 00:44:11.930
You have to drill down to get to
that particular build setting.

00:44:11.930 --> 00:44:13.970
What I wanted to do was
turn it upside down.

00:44:13.980 --> 00:44:16.970
I wanted to go find out every
build setting that's defined in my

00:44:17.040 --> 00:44:18.890
project and find out who defines it.

00:44:19.020 --> 00:44:21.570
So that's not in the
application itself yet,

00:44:21.570 --> 00:44:23.650
so I can write a plug-in to do that.

00:44:23.780 --> 00:44:26.680
So I'll jump over, and I've called the
settings viewer plug-in.

00:44:27.480 --> 00:44:29.480
And I open up the plug-in.

00:44:29.570 --> 00:44:31.480
Try this again.

00:44:31.480 --> 00:44:35.480
And what I'm going to do is bring
up my Apple script panel inspector.

00:44:35.480 --> 00:44:39.480
And I see that there's now a new
category called plug-in loaded.

00:44:39.480 --> 00:44:40.590
So I choose that,
and I'm going to set it on

00:44:40.590 --> 00:44:43.480
the settings viewer plug-in.

00:44:43.480 --> 00:44:45.430
And we'll go over and edit the script.

00:44:45.480 --> 00:44:45.480
And we'll ignore that error.

00:44:46.110 --> 00:44:49.470
And I have no clue what it said,
but we'll just ignore it.

00:44:49.480 --> 00:44:51.480
And I'm going to make a new script.

00:44:51.480 --> 00:44:53.460
And my wonderful one-handed typing here.

00:44:53.480 --> 00:44:55.480
We're going to go off,
and I'll come back and talk about this.

00:44:55.480 --> 00:44:57.470
And I'm going to make a new script.

00:44:57.690 --> 00:44:59.480
In a second.

00:44:59.480 --> 00:45:01.480
Okay.

00:45:01.480 --> 00:45:01.480
So what I'm going to do is I'm actually
going to create this local script.

00:45:01.480 --> 00:45:05.480
And in that script,
I'm going to put an on choose menu item.

00:45:05.550 --> 00:45:07.480
Just like you saw back in
the last demonstration.

00:45:07.480 --> 00:45:09.480
But it's actually now
inside of a script object.

00:45:09.480 --> 00:45:13.990
Then the next thing I'm going to do
is I'm going to find another one of

00:45:13.990 --> 00:45:15.470
those lovely Apple script things.

00:45:15.480 --> 00:45:19.480
I'm going to go find the first
menu item whose title is project.

00:45:19.480 --> 00:45:21.480
So I'm going to go over
and find the project menu.

00:45:21.480 --> 00:45:23.480
Now I'm going to get the class browser.

00:45:23.480 --> 00:45:26.120
And what I want to do is insert
a menu item right after the

00:45:26.240 --> 00:45:27.470
show class browser menu item.

00:45:27.530 --> 00:45:29.480
And what I want to do is I sort of
get a couple of references for those.

00:45:29.480 --> 00:45:31.480
And then I'm going to
make a new menu item.

00:45:31.480 --> 00:45:35.460
And I set it to be after
that show browser menu item.

00:45:35.480 --> 00:45:37.480
And then I set it with some properties.

00:45:37.480 --> 00:45:39.330
I set a title and a name.

00:45:39.580 --> 00:45:43.620
And then finally,
you see I dynamically set the

00:45:43.650 --> 00:45:47.480
script of that menu item by
passing it this script right here.

00:45:47.570 --> 00:45:51.400
So what it's going to
do is when I build this,

00:45:51.720 --> 00:45:54.050
When we actually install
the plug-in and run it,

00:45:54.050 --> 00:45:56.150
it's going to add a menu item,
and then when I choose it,

00:45:56.150 --> 00:45:57.800
it should present a
display dialog for us.

00:45:57.800 --> 00:46:01.700
So we do need to, in this case,
quit Xcode.

00:46:01.700 --> 00:46:04.580
And I'm going to bring up,
hide this for the moment,

00:46:04.630 --> 00:46:06.760
and we're going to find the build.

00:46:07.960 --> 00:46:10.320
And just to show you,
this is where I built the project,

00:46:10.440 --> 00:46:11.390
and this is my plug-in.

00:46:11.390 --> 00:46:13.030
It's an extension of PB plug-in.

00:46:13.030 --> 00:46:16.680
And this is the local plug-ins on
my library in my user's account.

00:46:16.690 --> 00:46:20.560
So it's library, application support,
Apple, developer tools, plug-ins.

00:46:20.570 --> 00:46:26.410
So I just copy that over, drop it in,
and I go back into Xcode, launch that.

00:46:26.440 --> 00:46:29.640
And now what's happened is
that that plug-in got loaded in

00:46:29.640 --> 00:46:31.570
the process of starting Xcode.

00:46:31.590 --> 00:46:35.780
And if I go and open up a project, oh,
let's do count down timer.

00:46:35.780 --> 00:46:37.880
And you'll see now under the project,
it's going to say, oh,

00:46:37.880 --> 00:46:37.880
let's do count down timer.

00:46:37.880 --> 00:46:39.160
And then I'm going to go
back into the project menu.

00:46:39.270 --> 00:46:39.870
This wasn't here before.

00:46:39.910 --> 00:46:41.040
Of course,
I should have shown that to you,

00:46:41.040 --> 00:46:42.180
because you may not believe me now.

00:46:44.540 --> 00:46:45.500
I could if you want me to.

00:46:45.500 --> 00:46:47.500
I'll throw the plug-in
out and we'll start over.

00:46:47.500 --> 00:46:49.000
But let's go on.

00:46:49.000 --> 00:46:51.290
So now when I choose this,
if all is working well,

00:46:51.500 --> 00:46:54.690
it actually will display my
dialog so that at least I know

00:46:54.750 --> 00:46:56.590
I've got the plug-in loaded.

00:46:59.420 --> 00:47:01.410
Okay, well that's not very interesting,
and that certainly

00:47:01.410 --> 00:47:03.430
doesn't get the job done,
so let's go and finish

00:47:03.430 --> 00:47:04.900
working on that project.

00:47:04.900 --> 00:47:07.060
So I'm going to go back in,
I'm going to open up my

00:47:07.060 --> 00:47:10.060
Settings Viewer plug-in,
and this time we're going to go into the,

00:47:10.160 --> 00:47:12.690
much easier to sort it this way,
and I'm going to go into

00:47:12.830 --> 00:47:15.660
the Settings Viewer itself,
and I'm going to describe a little

00:47:15.660 --> 00:47:17.500
bit about the UI for this plug-in.

00:47:17.560 --> 00:47:21.000
When you choose that menu item,
I'm going to present this outline view,

00:47:21.000 --> 00:47:23.390
and I'm going to go through,
and I'm going to ask

00:47:23.580 --> 00:47:26.670
every single project,
or ask the project, ask every target,

00:47:26.690 --> 00:47:29.100
ask every build phase,
everything I can possibly

00:47:29.100 --> 00:47:30.180
ask for its build settings.

00:47:30.220 --> 00:47:33.640
And then I'm going to list the
build settings as top-level items,

00:47:33.640 --> 00:47:37.290
and then child items will be added as,
from the, whoever defines those

00:47:37.460 --> 00:47:41.090
particular settings,
and that's the way that this should look.

00:47:41.180 --> 00:47:43.490
And so what I need to do is
actually add an event handler,

00:47:43.490 --> 00:47:45.580
and I want to know when
this window gets opened,

00:47:45.580 --> 00:47:47.500
because we're going to add
something back in our menu.

00:47:47.520 --> 00:47:49.210
And so I'm going to go into our
menu item chooser to do that,

00:47:49.210 --> 00:47:49.980
to load the nib for us.

00:47:49.980 --> 00:47:52.720
So I go in here,
and we'll click on the open,

00:47:52.730 --> 00:47:56.400
and this time I'm going to
put it in the Settings Viewer.

00:47:58.120 --> 00:47:59.780
And since there's a
little bit of code here,

00:47:59.780 --> 00:48:01.720
I'm actually hopefully going
to be able to do this right

00:48:02.360 --> 00:48:05.100
and drag in our snippet one.

00:48:07.340 --> 00:48:11.200
Now, this is a little bit of code here,
and what I want to describe is that we,

00:48:11.200 --> 00:48:13.300
in this case,
we need to use the terms from Xcode,

00:48:13.300 --> 00:48:16.300
and we're going to fix this as just a
limitation of the current implementation.

00:48:16.300 --> 00:48:18.360
But what we want to do is get
the last project document,

00:48:18.360 --> 00:48:20.280
and I'm going to do a
little bit of call methods.

00:48:20.290 --> 00:48:21.060
I do a lot of this.

00:48:21.080 --> 00:48:23.720
Sal scolds me, but, you know,
I'll learn sooner or later.

00:48:23.720 --> 00:48:26.230
But again, I use that string by
deleting path extension.

00:48:26.300 --> 00:48:27.060
It's so simple.

00:48:27.060 --> 00:48:27.980
It's just one call.

00:48:28.030 --> 00:48:29.960
I know it's there, so I want to use that.

00:48:30.180 --> 00:48:31.880
And then I've got a
little spinning indicator.

00:48:31.880 --> 00:48:33.440
You didn't see it,
but it's a little progress

00:48:33.440 --> 00:48:35.450
indicator up in the view,
and I'm going to tell it that

00:48:35.450 --> 00:48:38.100
I want to use threaded animation,
so it just spins on its own.

00:48:38.100 --> 00:48:39.300
I don't need to tell it to do anything.

00:48:39.300 --> 00:48:41.860
And then I'm going to start
that indicator spinning.

00:48:41.860 --> 00:48:45.520
And then what I'm going to do is
there's a little status text field.

00:48:45.520 --> 00:48:47.320
I guess I could show these
where these things are here.

00:48:47.320 --> 00:48:49.220
There's actually a
little indicator there,

00:48:49.220 --> 00:48:51.660
and there's actually a
little status indicator here.

00:48:51.660 --> 00:48:54.410
And I'm going to set
that status right here,

00:48:54.810 --> 00:48:58.630
passing it in the project title
that we're currently looking at.

00:48:58.700 --> 00:49:00.160
We have update the object.

00:49:00.160 --> 00:49:01.440
That's to tell it to redraw.

00:49:01.440 --> 00:49:02.870
Please ignore the delays.

00:49:02.880 --> 00:49:05.280
There's one that's just a little kludge,
but okay.

00:49:05.280 --> 00:49:07.400
On to outline view
settings and scroll view.

00:49:07.400 --> 00:49:09.920
We get the outline view
out of that window,

00:49:09.920 --> 00:49:11.960
and then we get the data source.

00:49:11.960 --> 00:49:13.820
We make a new one,
just like we did before.

00:49:13.820 --> 00:49:15.020
We make a new data source.

00:49:15.040 --> 00:49:17.780
We're going to create three new columns,
name, kind, and value.

00:49:17.780 --> 00:49:20.130
And then, again,
we're going to set that data

00:49:20.250 --> 00:49:21.840
source of the outline view.

00:49:21.840 --> 00:49:24.220
And then we're going to
call a couple handlers here.

00:49:24.220 --> 00:49:26.440
One is called find settings
for items in project.

00:49:26.440 --> 00:49:29.230
So we're going to pass it the project,
go find all those items.

00:49:29.810 --> 00:49:31.790
And then we're going
to expand the settings.

00:49:31.910 --> 00:49:34.960
What I want to do is find every
setting that's defined more than once,

00:49:34.960 --> 00:49:36.500
so I can look at, like, build styles.

00:49:36.500 --> 00:49:39.520
Check development versus deployment,
and you'll see how that works.

00:49:39.520 --> 00:49:41.200
And then at the end,
we're going to turn off

00:49:41.200 --> 00:49:42.380
the progress indicator.

00:49:42.380 --> 00:49:46.580
And then we're going to update the
status of the field to clear it out,

00:49:46.700 --> 00:49:48.240
or at least set the project title there.

00:49:48.350 --> 00:49:49.180
Update the object.

00:49:49.200 --> 00:49:50.900
Ignore the obvious
kludge with the blazer.

00:49:50.900 --> 00:49:52.880
That's to make sure
that it draws correctly.

00:49:52.880 --> 00:49:53.120
All right.

00:49:53.200 --> 00:49:53.590
Trust me.

00:49:53.600 --> 00:49:55.060
It's needed, but we'll fix that.

00:49:55.080 --> 00:49:56.880
So that part is in there.

00:49:56.880 --> 00:49:58.940
We actually need to add
a little bit more here.

00:49:59.760 --> 00:50:00.980
Resize this down.

00:50:00.980 --> 00:50:04.480
We need to add these two handlers and
any supporting items that go with that.

00:50:04.540 --> 00:50:07.680
So hopefully it's this piece
that I've got copied off here.

00:50:09.730 --> 00:50:10.130
All right.

00:50:10.220 --> 00:50:14.000
And so what it's going to do, again,
we have to use the using terms block.

00:50:14.080 --> 00:50:16.160
It's going to turn off the updating
just like we did before because

00:50:16.160 --> 00:50:17.350
we're going to add some data to it.

00:50:17.430 --> 00:50:19.700
And, yes,
it's going to do some call methods

00:50:19.700 --> 00:50:23.580
that I've added to this project,
repeats through each of the build styles,

00:50:23.580 --> 00:50:26.100
adding those settings,
reprocess each target,

00:50:26.110 --> 00:50:27.960
adding those build settings.

00:50:28.160 --> 00:50:30.380
And if I would like,
I could go actually find every

00:50:30.380 --> 00:50:31.920
build file and get its settings.

00:50:31.930 --> 00:50:35.190
So what it's going to return me is a
whole data source populated with all the

00:50:35.190 --> 00:50:37.290
build settings and those that define it.

00:50:37.390 --> 00:50:40.050
And then finally at the end,
it's going to call expand settings.

00:50:40.060 --> 00:50:42.700
And it's going to go through,
it's going to find out which

00:50:42.720 --> 00:50:45.280
ones have more than one data
item and then expand it.

00:50:45.370 --> 00:50:47.230
So I think it takes care of that.

00:50:47.230 --> 00:50:51.190
And the last thing we need to do
is go back into the plug-in script.

00:50:51.390 --> 00:50:53.480
And we need to replace
this display dialogue.

00:50:53.480 --> 00:50:55.080
And we'll put that in.

00:50:55.080 --> 00:50:57.870
And, again, call method.

00:50:57.880 --> 00:50:59.080
You notice there's lots of call method.

00:50:59.100 --> 00:50:59.440
I love it.

00:50:59.480 --> 00:50:59.810
It's great.

00:50:59.950 --> 00:51:01.100
It makes it easy to add things.

00:51:01.100 --> 00:51:02.980
But this is sort of a
workaround for a bug.

00:51:02.980 --> 00:51:05.580
We're going to fix this by the
time release comes out so that

00:51:05.580 --> 00:51:08.180
it's easy to load a nib that's
actually now in a plug-in.

00:51:08.200 --> 00:51:09.650
We already have support for load nib.

00:51:09.660 --> 00:51:11.560
You just pass it load nib
in the name of the nib,

00:51:11.560 --> 00:51:12.460
and it just works.

00:51:12.460 --> 00:51:14.840
In this case, though,
the plug-in doesn't or the

00:51:14.840 --> 00:51:16.520
nib isn't in the application.

00:51:16.520 --> 00:51:17.810
It's in the plug-in.

00:51:17.890 --> 00:51:19.110
So you need to add an extension.

00:51:19.130 --> 00:51:19.970
We'll get that in there.

00:51:20.530 --> 00:51:23.870
So I'm going to go ahead and build this.

00:51:25.160 --> 00:51:27.780
and it's built,
so I'm going to have to quit again.

00:51:27.800 --> 00:51:30.960
And we'll quit this,
and I have to go throw this one away,

00:51:30.960 --> 00:51:32.580
'cause I don't need it anymore.

00:51:32.650 --> 00:51:33.970
Copy that one over.

00:51:34.280 --> 00:51:37.320
And now when I go back into Xcode,

00:51:39.110 --> 00:51:40.100
magically appears.

00:51:40.100 --> 00:51:41.100
Right.

00:51:41.100 --> 00:51:42.100
Okay.

00:51:42.100 --> 00:51:45.040
So then let's go in and let's
open up another project here.

00:51:45.040 --> 00:51:47.190
And cross your fingers, I choose this.

00:51:47.270 --> 00:51:48.860
It should open a window.

00:51:48.860 --> 00:51:51.280
Spins the indicator,
goes finds all the settings,

00:51:51.280 --> 00:51:54.540
and expands all of the settings
that are defined multiply.

00:51:54.610 --> 00:51:57.060
So I can look and see that
ZeroLink is on for development.

00:51:57.060 --> 00:51:58.220
It's off for deployment.

00:51:58.270 --> 00:52:00.400
I can check all of
these various settings.

00:52:00.400 --> 00:52:01.570
It's just a way to look at the settings.

00:52:01.580 --> 00:52:04.030
I know this appeals to all
the engineers in the crowd,

00:52:04.030 --> 00:52:05.400
so some of us may not get it.

00:52:05.470 --> 00:52:07.520
But this is a very cool thing.

00:52:07.520 --> 00:52:09.910
And we've been able to plug it right in,
take advantage of the

00:52:09.910 --> 00:52:11.080
scriptability in Xcode.

00:52:11.080 --> 00:52:11.950
Thank you.

00:52:20.300 --> 00:52:22.970
Okay, back to the slides.

00:52:23.030 --> 00:52:23.770
Future features.

00:52:23.870 --> 00:52:27.270
Well, I won't tell you that I looked
at last year's list of future

00:52:27.280 --> 00:52:30.120
features and did a scorecard,
so we'll just go right along here.

00:52:30.180 --> 00:52:32.440
We're going to add make
new and delete support.

00:52:32.440 --> 00:52:34.580
I think it's really important,
especially with things like

00:52:34.720 --> 00:52:38.680
plug-ins and other type of dynamic,
especially with the script property,

00:52:38.680 --> 00:52:40.440
you're going to want to be
able to create new things.

00:52:40.580 --> 00:52:42.350
And what are some of those
new things you want to create?

00:52:42.450 --> 00:52:42.930
Toolbars.

00:52:42.930 --> 00:52:45.330
It would be excellent to be
able to take advantage of the

00:52:45.330 --> 00:52:46.730
toolbars that are in Cocoa.

00:52:46.730 --> 00:52:49.360
The reason that it isn't there
currently is that there is no way to put

00:52:49.360 --> 00:52:52.680
toolbars together in Interface Builder,
and that's where we hook everything up.

00:52:52.800 --> 00:52:55.360
But now that we're dynamic,
now you can see the picture, right?

00:52:55.360 --> 00:52:57.000
We can start creating these things.

00:52:57.000 --> 00:52:58.410
Same thing with the dock menu.

00:52:58.410 --> 00:53:02.030
You're going to be able to support
the dock menu that pops up and add

00:53:02.030 --> 00:53:04.240
your own items and respond to those.

00:53:04.240 --> 00:53:05.860
Dictionary viewer.

00:53:05.860 --> 00:53:08.790
Sometimes it's a bit difficult,
especially when you get

00:53:08.890 --> 00:53:10.370
very large terminology.

00:53:10.580 --> 00:53:13.290
So what we're going to do is define
the data that you need and define

00:53:13.350 --> 00:53:14.720
the classes and the commands.

00:53:14.720 --> 00:53:17.080
And so what we're going to do
is build on all the wonderful

00:53:17.080 --> 00:53:18.560
things we've done in Xcode.

00:53:18.580 --> 00:53:21.230
You can imagine a little search field,
so as you type window,

00:53:21.230 --> 00:53:23.770
we're going to filter that for you,
or a particular code.

00:53:23.770 --> 00:53:26.110
We're going to pull that into
the dictionary viewer and

00:53:26.110 --> 00:53:27.600
make it a much nicer place.

00:53:27.600 --> 00:53:29.680
We're going to be able to show you,
hopefully,

00:53:29.690 --> 00:53:32.800
documentation examples right in
line in the dictionary viewer.

00:53:32.800 --> 00:53:33.920
Okay.

00:53:34.080 --> 00:53:35.700
Thank you.

00:53:39.660 --> 00:53:40.010
Roadmap.

00:53:40.150 --> 00:53:42.180
So obviously we've
already had some of these,

00:53:42.190 --> 00:53:44.100
so for the disk we'll look at 401.

00:53:44.100 --> 00:53:45.570
I had our AppleScript update.

00:53:45.570 --> 00:53:47.220
We already had our feedback form.

00:53:47.220 --> 00:53:49.140
It would be nice if we
had these at the end,

00:53:49.140 --> 00:53:50.010
but that's okay.

00:53:50.010 --> 00:53:53.150
We have our AppleScript,
and QuickTime already happened at 2.

00:53:53.150 --> 00:53:55.130
We have a session tomorrow, 414.

00:53:55.130 --> 00:53:57.140
This is to show you,
if you're interested,

00:53:57.190 --> 00:54:00.120
how to make your Carbon or
Cocoa applications scriptable so that

00:54:00.130 --> 00:54:03.700
we can take advantage and do even more
cool things with AppleScript Studio.

00:54:03.700 --> 00:54:07.910
We'll open up much more applications,
and they'll show you how to do that.

00:54:08.440 --> 00:54:11.290
Session 311 on Friday will show
you how to automate your testing.

00:54:11.290 --> 00:54:14.280
With some of the things like
GUI scripting that we've provided,

00:54:14.280 --> 00:54:17.050
you can actually click on
buttons and choose menu items,

00:54:17.050 --> 00:54:20.940
and there's other tools that can be
used to check in and test your software.

00:54:20.940 --> 00:54:23.290
And then in 623,
we have an AppleScript for

00:54:23.340 --> 00:54:24.680
system administrators.

00:54:24.680 --> 00:54:26.290
I feel like a flight attendant.

00:54:26.290 --> 00:54:28.970
It's like, you know,
this is AppleScript Airlines.

00:54:28.980 --> 00:54:30.820
Welcome to Flight 306.

00:54:30.820 --> 00:54:35.860
On your tour, our final destination
is AppleScript Nirvana.

00:54:35.920 --> 00:54:39.480
If this is not your destination,
there are exits 4 and aft.

00:54:39.480 --> 00:54:40.380
Okay.

00:54:40.380 --> 00:54:41.010
Okay.

00:54:41.260 --> 00:54:41.950
Whom to contact?

00:54:42.010 --> 00:54:43.130
Well, give me a call.

00:54:43.180 --> 00:54:44.820
Well, don't call me,
but you can send me an email.

00:54:44.820 --> 00:54:46.310
I'll try to respond as best I can.

00:54:46.320 --> 00:54:48.980
We have Todd Fernandez,
who is our engineering manager.

00:54:48.980 --> 00:54:49.950
Sal Seguin.

00:54:49.990 --> 00:54:50.780
Everybody knows Sal.

00:54:50.780 --> 00:54:51.610
Knows and loves him.

00:54:51.760 --> 00:54:54.260
And then we have Jason Yeoh,
who is our technology manager.

00:54:54.260 --> 00:54:58.140
And for more information,
you can find all of these

00:54:58.140 --> 00:54:59.480
wonderful references.

00:54:59.480 --> 00:55:02.490
We have building applications,
which is a bit of a tutorial.

00:55:02.490 --> 00:55:05.220
This is probably our first
documentation that we wrote,

00:55:05.220 --> 00:55:06.320
and we know that we're
going to enhance it,

00:55:06.320 --> 00:55:06.320
hopefully, in the future.

00:55:06.320 --> 00:55:09.100
We're going to enhance it hopefully
in the future and make it even better.

00:55:09.100 --> 00:55:12.620
And the Studio Terminology reference
was new with Jaguar last year.

00:55:12.620 --> 00:55:13.820
It's a wonderful reference.

00:55:13.820 --> 00:55:16.570
And actually,
can I switch back over to the

00:55:16.570 --> 00:55:18.280
machine for just a minute?

00:55:18.280 --> 00:55:20.220
Because I've had a lot
of requests for this.

00:55:20.220 --> 00:55:23.980
It used to be in Project Builder,
it showed up right here.

00:55:23.980 --> 00:55:26.700
It said,
show our AppleScript Studio help.

00:55:26.830 --> 00:55:28.280
What we've done is consolidated a bit.

00:55:28.280 --> 00:55:30.720
So you have to, unfortunately,
pushed it down a level a little lower.

00:55:30.720 --> 00:55:34.300
You bring up the documentation viewer,
but we get to be at the top of the class.

00:55:34.320 --> 00:55:35.660
We're first thing AppleScript.

00:55:35.960 --> 00:55:39.700
And you can actually just come in here
and find out about AppleScript Studio,

00:55:39.700 --> 00:55:41.320
the references, they're all right there.

00:55:41.320 --> 00:55:44.010
And you actually even can take
advantage of some of the searching

00:55:44.010 --> 00:55:45.270
features to get to that help.

00:55:45.460 --> 00:55:47.060
Okay, we go back to the slides again,
thank you.

00:55:47.080 --> 00:55:49.060
Release notes.

00:55:49.060 --> 00:55:51.640
Every time we send out a revision,
we didn't get them in

00:55:51.640 --> 00:55:54.120
the 1.3 preview release,
but in the final release,

00:55:54.120 --> 00:55:55.740
we'll make sure we have a
good set of release notes.

00:55:55.740 --> 00:55:59.100
There is also lots and lots.

00:55:59.100 --> 00:56:03.160
I think I have 33 examples at this point,
and I will keep adding more of those,

00:56:03.160 --> 00:56:05.480
the ones you saw today
and other examples.

00:56:05.640 --> 00:56:08.220
That's probably your best resource
when you're getting right into it.

00:56:08.290 --> 00:56:11.300
Go open each of those examples, build it,
run it.

00:56:11.300 --> 00:56:15.360
We try to be very specific to the
tasks that we're trying to demonstrate.

00:56:15.360 --> 00:56:18.680
And of course, there's a studio website
that's updated all the time.