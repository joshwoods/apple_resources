WEBVTT

00:00:25.980 --> 00:00:26.880
How you doing folks?

00:00:26.880 --> 00:00:29.900
Thank you all for coming.

00:00:29.900 --> 00:00:31.970
All you guys in the back,
move on up front.

00:00:31.980 --> 00:00:33.260
There's a lot of space back here.

00:00:33.260 --> 00:00:35.700
I can't really see you people too well.

00:00:36.080 --> 00:00:41.120
Thank you for coming to today's
session 410 Cocoa Update.

00:00:41.260 --> 00:00:44.820
If, like me, you love Cocoa,
you're going to see a lot of really

00:00:44.820 --> 00:00:46.900
great stuff in here that's going
to make you love it even more.

00:00:46.900 --> 00:00:51.750
If you don't yet love Cocoa,
you will after this session.

00:00:52.020 --> 00:00:55.900
We're going to talk about some really
great additions to the frameworks

00:00:55.900 --> 00:01:03.330
and here to talk about them,
Ali Ozer, manager of Cocoa frameworks.

00:01:11.970 --> 00:01:14.460
Yes, so we are going to talk about Cocoa.

00:01:14.520 --> 00:01:18.290
Great stuff we've added to Cocoa.

00:01:18.290 --> 00:01:18.290
Let's see.

00:01:18.700 --> 00:01:21.560
As usual, you might have come to these
Cocoa Update talks before,

00:01:21.560 --> 00:01:23.770
we're going to talk about the
changes we made in the AppKit,

00:01:23.850 --> 00:01:26.340
the application framework,
and Foundation framework.

00:01:26.390 --> 00:01:28.970
We're going to talk about new features,
and we're going to talk about some of

00:01:29.020 --> 00:01:31.030
the significant API changes we've made.

00:01:31.120 --> 00:01:33.690
We are not going to talk about
bug fixes because we don't have

00:01:33.690 --> 00:01:36.710
time to go into all of that stuff,
but we are going to

00:01:36.710 --> 00:01:37.740
cover the major stuff.

00:01:37.880 --> 00:01:41.340
And we will also provide plenty of
pointers to other sessions because

00:01:41.340 --> 00:01:44.940
there's a lot of information being
presented to you at this WWDC.

00:01:45.050 --> 00:01:48.330
So first, the AppKit update,
which I will do.

00:01:49.200 --> 00:01:54.160
Okay, so if you had come to
Scott Forstall and Bertrand's talk,

00:01:54.160 --> 00:01:57.460
you probably, you heard about the
Aqua changes that we made.

00:01:57.780 --> 00:01:59.090
They're mostly refinements.

00:01:59.400 --> 00:02:01.440
Scott showed some of them to you.

00:02:01.440 --> 00:02:05.910
There are changes in the look of windows,
menus, tab views, boxes, etc.

00:02:06.040 --> 00:02:09.270
Our goal with the Aqua refinements
we made is that it's all

00:02:09.270 --> 00:02:11.010
automatic adoption by your apps.

00:02:11.110 --> 00:02:13.500
The metrics are compatible
and the APIs are compatible.

00:02:13.500 --> 00:02:16.550
So hopefully no changes for your apps.

00:02:16.620 --> 00:02:18.980
I will just show you

00:02:19.840 --> 00:02:23.190
Some of these changes,
they're pretty subtle for the most part.

00:02:23.360 --> 00:02:25.850
On the right side you
have the old Aqua look,

00:02:25.970 --> 00:02:28.590
the Jaguar, and the new side,
the stuff in Panther.

00:02:28.590 --> 00:02:31.140
I'm not sure if you can really see,
but the window title bar

00:02:31.140 --> 00:02:32.040
is slightly different.

00:02:32.040 --> 00:02:33.660
If you run Panther,
you'll probably notice them.

00:02:33.660 --> 00:02:36.880
The splitter bar now has a
more sort of elegant dimple.

00:02:36.880 --> 00:02:38.460
The slider is more elegant.

00:02:38.460 --> 00:02:39.910
It's thinner knob there.

00:02:39.910 --> 00:02:42.370
The buttons actually
look somewhat better.

00:02:42.470 --> 00:02:44.350
Also,
the tab view on the box in the bottom,

00:02:44.350 --> 00:02:46.750
the right and the left,
you notice that the tab view on the

00:02:46.750 --> 00:02:49.540
boxes have changed significantly,
and they are much better.

00:02:49.770 --> 00:02:51.880
You know, more elegant, fresher look.

00:02:51.990 --> 00:02:55.290
And you'll note that despite
the big change there,

00:02:55.370 --> 00:02:56.580
the metrics are compatible.

00:02:56.580 --> 00:02:59.220
The insides should still
fit your views just fine.

00:02:59.300 --> 00:03:00.820
So if not, you know,
you run into problems,

00:03:00.940 --> 00:03:02.090
please report bugs on that.

00:03:03.810 --> 00:03:06.710
Other changes we made in Aqua you might
have already noticed if you're running

00:03:06.710 --> 00:03:09.240
Panther is there's smooth scrolling now.

00:03:09.270 --> 00:03:10.850
The parameters are
still being fine-tuned,

00:03:10.850 --> 00:03:15.480
but basically allowing you to not lose
context as you scroll through pages.

00:03:15.480 --> 00:03:20.840
Faster window and sheet animations,
and also a distinct look for main, key,

00:03:20.840 --> 00:03:22.120
and inactive windows.

00:03:22.220 --> 00:03:27.760
If you don't know what this means,
I'll just touch upon it during

00:03:27.760 --> 00:03:27.760
my demo in a few minutes.

00:03:28.240 --> 00:03:30.800
SafePanel and OpenPanel have
undergone a lot of changes.

00:03:30.800 --> 00:03:33.240
You might have used it
already and noticed it.

00:03:33.240 --> 00:03:36.170
It's brand new look and feel, but again,
compatible APIs.

00:03:36.270 --> 00:03:36.900
That's our goal.

00:03:36.900 --> 00:03:39.840
The main goal here with
the Safe and OpenPanel is,

00:03:39.840 --> 00:03:42.500
one,
not only provide more functionality to

00:03:42.500 --> 00:03:47.180
the user like list view and column view,
but also provide the same user-centric

00:03:47.250 --> 00:03:49.440
model we are providing in Finder.

00:03:50.870 --> 00:03:52.560
So that's the open panel.

00:03:52.560 --> 00:03:55.200
And this is the saved panel
running as a sheet and text edit.

00:03:55.460 --> 00:03:58.490
Now you'll notice that in the
bottom of this screenshot,

00:03:58.490 --> 00:03:59.690
there's an accessory view.

00:03:59.700 --> 00:04:02.700
Again, text edit didn't have to change
at all to use the new saved panel.

00:04:02.700 --> 00:04:04.090
The accessory view just works.

00:04:04.100 --> 00:04:05.110
The saved panel just works.

00:04:05.190 --> 00:04:08.490
It just looks and feels
considerably different.

00:04:08.870 --> 00:04:11.430
We have added a new API to
SafePanel OpenPanel,

00:04:11.430 --> 00:04:14.410
which is independent of
actually the changes we made.

00:04:14.440 --> 00:04:15.800
Actually, the API is in OpenPanel.

00:04:15.800 --> 00:04:18.800
As you know, you could have a new folder
button in the SafePanel,

00:04:18.800 --> 00:04:21.260
but sometimes there are cases where
you want it in the OpenPanel as well,

00:04:21.340 --> 00:04:23.300
and we've allowed you to
do that with this new API.

00:04:23.620 --> 00:04:27.230
We've also deprecated these
view tags that SafePanel had.

00:04:27.240 --> 00:04:29.500
I don't think anybody
was using them anymore,

00:04:29.500 --> 00:04:31.220
but if you are using them heavily,
depending on them,

00:04:31.220 --> 00:04:32.360
you might want to let us know.

00:04:32.360 --> 00:04:35.700
These were the tags that let you get to
the various UI elements in the Open and

00:04:35.790 --> 00:04:37.870
SafePanel so you could fiddle with them.

00:04:37.890 --> 00:04:42.620
Typically, we recommend using accessory
views to customize these panels.

00:04:42.620 --> 00:04:46.380
Mini Controls is another
new feature in Panther.

00:04:46.380 --> 00:04:47.460
It's not automatic.

00:04:47.460 --> 00:04:50.440
If you want to use Mini Controls,
you have to ask for them.

00:04:50.440 --> 00:04:52.620
They are smaller than small.

00:04:53.240 --> 00:04:57.700
You'll see the regular, the small,
and the mini all the way at the right

00:04:57.910 --> 00:05:00.240
side are your mini controls there.

00:05:00.330 --> 00:05:02.970
As we improve our
miniaturization technology,

00:05:03.070 --> 00:05:06.310
we will be able to fit 38
million controls on Windows,

00:05:06.320 --> 00:05:10.350
like our G5,
but right now we have the mini controls.

00:05:10.410 --> 00:05:13.350
Mini Controls use Lucida
Grandin 9 as their system font.

00:05:13.450 --> 00:05:17.320
We have added a new method to
NSFont to allow you to dynamically

00:05:17.320 --> 00:05:21.360
get that figure as opposed to
hardwiring it into your apps.

00:05:22.100 --> 00:05:25.360
So, we have that new control and
if you were at Scott Forstall's

00:05:25.360 --> 00:05:29.570
section of the State of the Union,
you heard about that switcher thing.

00:05:29.570 --> 00:05:32.890
That's that switcher thing you see in
Finder which lets you switch between two,

00:05:33.000 --> 00:05:35.000
three, four, you know, different modes.

00:05:35.000 --> 00:05:37.030
It is available in Finder and Jaguar.

00:05:37.030 --> 00:05:38.250
You've seen it there.

00:05:38.260 --> 00:05:39.990
OpenSafePanel also uses it.

00:05:40.000 --> 00:05:43.000
It's a subclass of control
and also available as a cell.

00:05:43.000 --> 00:05:45.650
Yesterday in one of the sessions,
somebody was asking that they

00:05:45.650 --> 00:05:47.990
could not see this control
in Interface Builder yet.

00:05:48.100 --> 00:05:51.000
That's because it's not there
yet as a public API in the seed.

00:05:51.000 --> 00:05:53.000
It will be there for the final one.

00:05:53.210 --> 00:05:56.360
One problem we're having with
this control is that we just

00:05:56.360 --> 00:05:58.000
can't come up with a name.

00:05:58.130 --> 00:06:01.000
So, we'd like you to help
name this new class.

00:06:01.000 --> 00:06:07.360
There's immense brain power in this room,
so please send us your name ideas

00:06:07.470 --> 00:06:10.950
to namedatclass@group.apple.com.

00:06:12.490 --> 00:06:18.790
The only requirement
that started with NS and,

00:06:18.790 --> 00:06:18.790
you know,
don't put your name in it or whatever,

00:06:18.790 --> 00:06:18.790
but so...

00:06:19.860 --> 00:06:21.170
So this is all for fun.

00:06:21.180 --> 00:06:22.880
Just send us your things.

00:06:22.880 --> 00:06:24.680
We're just going to see if there
are some great ideas out there.

00:06:24.680 --> 00:06:25.560
We have a few ideas.

00:06:25.560 --> 00:06:27.800
We're not super happy with most of them.

00:06:27.830 --> 00:06:28.360
So we'll see.

00:06:28.360 --> 00:06:30.480
And Legal asked me to
put this next slide up.

00:06:30.540 --> 00:06:31.740
You send us that name.

00:06:31.740 --> 00:06:32.760
That name is ours.

00:06:32.760 --> 00:06:35.420
You can't claim anything, et cetera,
et cetera.

00:06:35.420 --> 00:06:37.740
And your name isn't
the name of a product.

00:06:37.890 --> 00:06:40.080
NS Adobe Photoshop is not a good name.

00:06:40.080 --> 00:06:42.750
So just send us your names
in the next few days.

00:06:42.750 --> 00:06:43.350
Not now.

00:06:43.350 --> 00:06:44.390
Listen to me now.

00:06:44.390 --> 00:06:46.630
But after the session, you can do it.

00:06:46.700 --> 00:06:48.170
And we'll see what comes up.

00:06:49.020 --> 00:06:53.430
And, you know, if we use your name,
we'll give you a big thank you.

00:06:56.010 --> 00:06:57.440
So we have new button styles.

00:06:57.440 --> 00:06:59.990
The disclosure triangle,
which is something that's been missing,

00:06:59.990 --> 00:07:01.890
is now a button style on an S button.

00:07:02.050 --> 00:07:04.600
We also have a textured button.

00:07:05.360 --> 00:07:07.430
Tina, there you go.

00:07:07.430 --> 00:07:10.140
We also have the textured button style,
which is basically buttons

00:07:10.140 --> 00:07:12.840
that look appropriate for
texture that is metal windows.

00:07:12.940 --> 00:07:15.460
So it's just another style
of button to get that.

00:07:15.460 --> 00:07:18.360
We also added a circular slider.

00:07:18.370 --> 00:07:22.960
It's a separate slider type.

00:07:23.210 --> 00:07:25.660
It's the little things.

00:07:25.660 --> 00:07:28.840
So, you set the slider type and there's
an enum for the slider type.

00:07:28.870 --> 00:07:32.150
Most of the rest of the
slider API ends up working.

00:07:32.250 --> 00:07:34.300
For instance,
the bottom slider in that picture,

00:07:34.300 --> 00:07:36.600
I don't know if you can see it,
but it has little tick marks and so on.

00:07:36.600 --> 00:07:39.040
So you can, you know,
the slider still works,

00:07:39.040 --> 00:07:40.730
the slider is just circular.

00:07:41.800 --> 00:07:44.640
Toolbar now has the concept
of selectable toolbar items.

00:07:44.640 --> 00:07:48.120
Scott Forstall mentioned
this in his talk.

00:07:48.430 --> 00:07:52.240
This is like in system preferences
where toolbar items are not actions,

00:07:52.240 --> 00:07:55.220
but they denote states.

00:07:55.270 --> 00:07:57.920
Just like with other toolbar stuff,
it's pretty easy to use.

00:07:58.040 --> 00:08:02.360
Your delegate normally declares
what items should be on the toolbar.

00:08:02.360 --> 00:08:05.080
It now also declares, if it wants,
what items can be

00:08:05.120 --> 00:08:06.550
selectable with this method.

00:08:06.580 --> 00:08:09.040
And it returns an area of
the selectable identifiers.

00:08:09.090 --> 00:08:11.760
And then everything else is
managed by the toolbar for you.

00:08:11.810 --> 00:08:13.800
If you want, of course,
you can explicitly change the

00:08:13.800 --> 00:08:16.430
selected item with these two calls,
set selected item,

00:08:16.430 --> 00:08:19.220
or you can ask for it with
selected item identifier.

00:08:19.220 --> 00:08:20.730
Pretty straightforward.

00:08:21.870 --> 00:08:26.680
Talking about selections,
one problem we had with focus rings,

00:08:26.680 --> 00:08:30.570
and now that as we implement focus
rings more and more throughout the kit,

00:08:30.570 --> 00:08:33.180
is in some cases, automatic focus rings.

00:08:33.180 --> 00:08:35.910
This is often if you've enabled
focus rings or keyboard navigation,

00:08:35.910 --> 00:08:38.410
or even if not,
because we draw focus rings for you on

00:08:38.490 --> 00:08:41.680
text fields and table views and such,
sometimes a focus ring

00:08:41.680 --> 00:08:42.850
just doesn't look right.

00:08:42.930 --> 00:08:44.010
An example is this screenshot.

00:08:44.010 --> 00:08:47.070
I don't know if you can tell,
but this table view is hitting

00:08:47.070 --> 00:08:50.670
the top edge of the window,
and the focus ring ends up

00:08:50.820 --> 00:08:53.410
just overlapping the border
of the window up there.

00:08:53.420 --> 00:08:55.480
Sometimes you have this case where
the table is across the one side

00:08:55.480 --> 00:08:56.880
of the one edge of the window,
and again,

00:08:56.880 --> 00:08:59.300
you don't want a focus ring drawn.

00:08:59.300 --> 00:09:01.460
In these cases,
you can now disable the focus ring

00:09:01.460 --> 00:09:05.070
drawing from its default setting to none,
and there will be other

00:09:05.320 --> 00:09:07.140
settings we add in the future.

00:09:07.140 --> 00:09:09.530
An exterior is where you actually say,
"I want an exterior

00:09:09.530 --> 00:09:10.800
always," for some reason.

00:09:10.850 --> 00:09:14.260
Default just means control,
do the right thing with the focus ring.

00:09:14.260 --> 00:09:17.740
There are cases where a table view
actually decides not to draw the focus

00:09:18.050 --> 00:09:20.520
ring if it knows it won't look good.

00:09:20.520 --> 00:09:23.990
But But it can't always tell,
and that's why we give you this control.

00:09:25.340 --> 00:09:28.020
TextField Cell now has
API for placeholder strings.

00:09:28.070 --> 00:09:32.550
This is this new UI paradigm that
appeared in the last year or two,

00:09:32.550 --> 00:09:36.440
where TextField has a default
placeholder where you can tell

00:09:36.440 --> 00:09:40.370
what you're supposed to type,
like last name, address, search, Google,

00:09:40.370 --> 00:09:43.360
I think in the Safari toolbar, and so on.

00:09:43.360 --> 00:09:45.090
So you can now specify
a placeholder string.

00:09:45.100 --> 00:09:47.160
You can even specify an
attributed string if you wish,

00:09:47.160 --> 00:09:49.310
if you don't like the grade
version but you want some other

00:09:49.310 --> 00:09:50.680
radically different thing.

00:09:50.680 --> 00:09:51.890
So you specify the placeholder.

00:09:51.970 --> 00:09:54.860
As soon as the user starts typing,
it's replaced by what they're typing.

00:09:56.510 --> 00:09:59.350
Jumping from text field to search field.

00:09:59.350 --> 00:10:00.240
Thank you.

00:10:00.380 --> 00:10:01.440
Search field is a new control.

00:10:01.440 --> 00:10:03.390
It's a subclass of text field.

00:10:03.460 --> 00:10:05.480
It's also available as a cell.

00:10:05.690 --> 00:10:09.470
It's basically that the
search functionality,

00:10:09.470 --> 00:10:13.300
the UI for the search functionality
that you see in Safari,

00:10:13.300 --> 00:10:16.780
Mail, Address Book,
a bunch of other apps.

00:10:16.870 --> 00:10:23.020
And it features the search
button on the the left side

00:10:23.290 --> 00:10:26.090
You know earlier I screwed
up my left and right,

00:10:26.090 --> 00:10:26.880
didn't I?

00:10:26.880 --> 00:10:27.000
Oh well.

00:10:27.000 --> 00:10:29.000
So it features a search
button on the left side,

00:10:29.000 --> 00:10:31.720
the X button on the right side,
and these are customizable and

00:10:31.720 --> 00:10:33.320
there's a recents list as well.

00:10:33.320 --> 00:10:35.400
Let's just talk about the API a bit.

00:10:35.470 --> 00:10:37.500
You can customize the
search or cancel buttons.

00:10:37.500 --> 00:10:38.850
If you want,
you can have some other button

00:10:38.850 --> 00:10:41.980
up here instead of a magnifying
glass or not appear at all.

00:10:41.980 --> 00:10:43.460
You can customize the search menu.

00:10:43.780 --> 00:10:48.130
That's the menu that appears beneath the,
you know, when you bring down the menu.

00:10:48.380 --> 00:10:53.530
You provide a template which allows you
to say where you want the recents item to

00:10:53.530 --> 00:10:56.280
go or what other items you want in there.

00:10:57.890 --> 00:10:59.800
You can also customize the
way recents are handled.

00:10:59.800 --> 00:11:02.570
You can either have us
manage the recents for you,

00:11:02.570 --> 00:11:04.830
or you can specify what the recents are.

00:11:04.830 --> 00:11:07.710
And you can even have the
search field save the recents

00:11:07.810 --> 00:11:11.420
automatically to preferences so that,
you know, the user types stuff,

00:11:11.420 --> 00:11:12.800
the recents are automatically saved.

00:11:12.800 --> 00:11:13.800
You don't ever have to worry about it.

00:11:13.800 --> 00:11:17.520
And you do that using the autosave
name stuff that you might be familiar

00:11:17.520 --> 00:11:19.680
with from NS Window or NS Table View.

00:11:19.680 --> 00:11:22.050
You just specify this autosave name,
it's automatically saved

00:11:22.160 --> 00:11:23.160
to preferences for you.

00:11:23.170 --> 00:11:25.780
You can also specify the
maximum recents if the default,

00:11:25.780 --> 00:11:27.780
I think, 10 is too big, too small.

00:11:27.800 --> 00:11:30.800
ThugMod Search Panel.

00:11:30.800 --> 00:11:32.660
The app is not only
provider of technology,

00:11:32.770 --> 00:11:36.120
it's also a client of technology because
the font panel uses the search field,

00:11:36.130 --> 00:11:37.520
as you can see in the bottom.

00:11:37.570 --> 00:11:39.510
The font panel has many other features.

00:11:39.510 --> 00:11:41.170
It's got improved collection management.

00:11:41.240 --> 00:11:42.570
If you've played with it,
you've probably seen it.

00:11:42.710 --> 00:11:44.470
Better user interface overall.

00:11:44.490 --> 00:11:46.780
You can now have color
support and favorites and

00:11:46.780 --> 00:11:49.100
the ability to search fonts,
as I mentioned.

00:11:49.270 --> 00:11:51.910
In the demo,
I will just show the font panel quickly

00:11:51.990 --> 00:11:54.050
and see some other of its features.

00:11:54.680 --> 00:11:58.980
The font panel now has the ability
to enable/disable elements of the UI.

00:11:58.980 --> 00:12:02.060
This is useful in some cases where
you want the user to select a font,

00:12:02.070 --> 00:12:03.800
but for instance,
you don't want them to specify

00:12:03.800 --> 00:12:07.400
the font size or the font face
or the weight or whatever.

00:12:07.400 --> 00:12:10.200
For instance,
the user should just specify Lucida,

00:12:10.340 --> 00:12:12.200
and you just need to know Lucida.

00:12:12.200 --> 00:12:15.240
You don't need to know it's 10 point,
12 point.

00:12:15.270 --> 00:12:18.780
If the first responder implements this
method called ValidModesForFontPanel

00:12:18.980 --> 00:12:22.320
and returns what fields it wants,
the other fields will be disabled.

00:12:22.540 --> 00:12:24.700
By default,
if this method isn't implemented,

00:12:24.700 --> 00:12:30.130
which is of course the default state
for 10.2 apps and most other cases,

00:12:30.200 --> 00:12:33.310
the standard mode's mask is assumed.

00:12:34.140 --> 00:12:37.750
From Font Panel to Font Manager,
you've seen the collections,

00:12:37.750 --> 00:12:40.500
and again Scott touched upon that.

00:12:40.630 --> 00:12:42.680
There's API for managing the collections.

00:12:42.910 --> 00:12:48.000
The collections are identified by a name,
and they represent a bunch of fonts.

00:12:48.000 --> 00:12:50.810
We have methods for add a collection,
remove a collection,

00:12:50.810 --> 00:12:53.450
and also of course enumerate
the collection by getting an

00:12:53.450 --> 00:12:54.980
array of collection names.

00:12:55.080 --> 00:12:56.000
Fairly straightforward.

00:12:56.000 --> 00:12:57.810
You'll note that when
you add a collection,

00:12:57.820 --> 00:12:58.990
it's global for the user.

00:12:59.000 --> 00:13:01.980
That means the collection applies
to all of the user's applications.

00:13:02.010 --> 00:13:04.000
It appears in the font panels.

00:13:04.000 --> 00:13:05.970
For all apps.

00:13:06.030 --> 00:13:08.000
There's an option to make
a collection per app.

00:13:08.000 --> 00:13:11.880
However, in the WWDC seed,
that option is not working yet.

00:13:12.070 --> 00:13:13.760
In addition to being able
to manage the collections,

00:13:13.760 --> 00:13:15.950
you can manage the fonts in
the collections by adding

00:13:16.250 --> 00:13:18.700
fonts to a collection,
removing fonts from a collection,

00:13:18.700 --> 00:13:20.680
or enumerating the fonts in a collection.

00:13:20.770 --> 00:13:23.230
Now note here that I'm not
talking in terms of NSFont,

00:13:23.330 --> 00:13:25.430
which is how we usually
represent fonts in Cocoa,

00:13:25.430 --> 00:13:28.140
but I'm talking in terms of
this font descriptor object,

00:13:28.150 --> 00:13:30.410
which is another new object.

00:13:30.450 --> 00:13:32.000
And that's here.

00:13:32.120 --> 00:13:35.640
Font descriptor is a lightweight object.

00:13:35.670 --> 00:13:40.560
It basically lets you specify a font
with as much detail as you want.

00:13:40.690 --> 00:13:43.500
For instance, you can specify that it's
Helvetica Oblique 13,

00:13:43.500 --> 00:13:45.270
or you can just specify it's Helvetica.

00:13:45.360 --> 00:13:48.240
You can even specify it's 13,
but maybe that's not very useful.

00:13:48.400 --> 00:13:52.740
It also allows you to specify colors
and a bunch of other attributes.

00:13:52.790 --> 00:13:55.460
And NSFont descriptor is a much
lighter weight than a font.

00:13:55.590 --> 00:13:58.090
So if you have a collection with, say,
10,000 fonts in it,

00:13:58.240 --> 00:14:01.060
you don't have to enumerate
all those NSFont instances.

00:14:01.130 --> 00:14:03.360
And it also lets you
represent fonts partially,

00:14:03.360 --> 00:14:05.150
and that's why we added this class.

00:14:05.180 --> 00:14:09.840
Expect this to appear
more in future APIs.

00:14:09.940 --> 00:14:13.770
So, talk about fonts,
the next obvious topic is text.

00:14:13.770 --> 00:14:15.480
And there are lots of changes in text.

00:14:15.480 --> 00:14:20.920
In session 427, Friday afternoon at 5,
it's a great time,

00:14:21.000 --> 00:14:23.830
you can stay that extra hour,
avoid traffic, it's good.

00:14:23.940 --> 00:14:26.900
Anyway,
that session will cover these in detail.

00:14:26.900 --> 00:14:29.280
Now,
I do want to give a quick demo of text

00:14:29.280 --> 00:14:34.030
just to whet your appetite about what
some of the stuff Doug Davidson will

00:14:34.030 --> 00:14:34.900
talk about in that session.

00:14:34.900 --> 00:14:39.970
So, demo 3, I think?

00:14:39.970 --> 00:14:39.970
Yes.

00:14:41.080 --> 00:14:43.360
Okay, so let's see.

00:14:43.520 --> 00:14:48.850
One thing I mentioned earlier was
this distinction between main,

00:14:48.990 --> 00:14:49.580
key, and inactive.

00:14:49.610 --> 00:14:50.860
I just want to show you that first.

00:14:50.860 --> 00:14:55.340
As you can see,
the left window now is active.

00:14:55.340 --> 00:14:56.220
This one is active.

00:14:56.220 --> 00:15:00.600
When you bring up a font panel, like so,
it's a not modal panel.

00:15:00.600 --> 00:15:04.970
The question is,
which window doesn't act on?

00:15:05.010 --> 00:15:07.170
Now, in this case,
it's obvious because this window is still

00:15:07.170 --> 00:15:08.790
active and my typing goes to that window.

00:15:08.790 --> 00:15:12.380
However, if you make the font window,
key, by clicking on it or by

00:15:12.380 --> 00:15:14.540
typing a font number here,
for instance,

00:15:14.780 --> 00:15:18.600
then you have two windows and you,
especially on larger screens, you know,

00:15:18.600 --> 00:15:21.700
a lot of you are getting 17
inches or big cinema displays,

00:15:21.810 --> 00:15:24.340
you can't tell if windows are
side by side which one is active.

00:15:24.370 --> 00:15:26.180
And that's the case in Jaguar.

00:15:26.180 --> 00:15:29.360
Here, what ends up happening is the
title bar has a distinct look.

00:15:29.440 --> 00:15:32.600
Now, for users who don't understand this,
it probably won't get in the way,

00:15:32.600 --> 00:15:36.170
but for users to, which understand this,
I think it's a nice touch which

00:15:36.460 --> 00:15:40.280
makes it possible to know that,
you know, if these two windows,

00:15:40.280 --> 00:15:42.980
when you're in this state,
you're going to know exactly

00:15:42.980 --> 00:15:47.740
what window it will apply to.

00:15:47.740 --> 00:15:50.800
So, that's the distinction,
main key inactive state distinction.

00:15:50.800 --> 00:15:55.430
Now, talking about the font panel,
here it is.

00:15:55.430 --> 00:15:59.520
There's a search field, as I mentioned.

00:15:59.680 --> 00:16:00.800
This is a menu here.

00:16:00.800 --> 00:16:02.930
As you can see,
the UI has been refined a bit.

00:16:02.970 --> 00:16:07.000
You can show preview
that we had that before.

00:16:07.000 --> 00:16:11.920
You can bring up a typography panel,
which we did not have in Jaguar.

00:16:12.010 --> 00:16:14.600
This typography panel
is context-sensitive.

00:16:14.600 --> 00:16:16.480
It's based on the current font.

00:16:16.640 --> 00:16:19.940
In Cocoa right now, in the WWDC,
this panel isn't hooked up.

00:16:20.020 --> 00:16:23.810
But what it lets you do is
it lets you set up a bunch

00:16:23.810 --> 00:16:28.010
of font-specific parameters,
so it's for advanced typography.

00:16:28.980 --> 00:16:31.500
But note, again, in the WWDC,
it's not hooked up,

00:16:31.500 --> 00:16:33.690
so it's not functional
in Cocoa applications.

00:16:33.790 --> 00:16:37.230
Another feature you'll see here
is that edit sizes is now a sheet

00:16:37.310 --> 00:16:39.060
rather than a separate modal state.

00:16:39.150 --> 00:16:41.310
And also,
we have a way to bring up the font

00:16:41.310 --> 00:16:43.450
panel directly from the font panel,
which is this Manage

00:16:43.450 --> 00:16:47.640
Fonts menu item down here.

00:16:47.730 --> 00:16:49.680
So one thing I want to show
you right now in the tech,

00:16:49.740 --> 00:16:53.330
one of the features we've added
is the text completion stuff.

00:16:53.420 --> 00:16:54.640
We've added automatic completion.

00:16:54.640 --> 00:16:56.620
Some of you might have already
seen this in other contexts.

00:16:56.620 --> 00:17:00.550
PB certainly provided this before,
and there were some packages out

00:17:00.550 --> 00:17:03.520
there like Mike Ferris' package,
which provided completion.

00:17:03.590 --> 00:17:05.580
What you basically get is,
as you're typing,

00:17:05.620 --> 00:17:07.840
if you type your default
completion character,

00:17:07.840 --> 00:17:11.430
which is either F5 or Option Escape,
or you can change it to

00:17:11.430 --> 00:17:14.080
be Escape if you want,
as you hit that character,

00:17:14.140 --> 00:17:17.040
it basically provides all the
words that can complete it.

00:17:17.170 --> 00:17:19.300
And in this case, you know,
welcome happens to be the first word.

00:17:19.300 --> 00:17:19.730
That's good.

00:17:19.860 --> 00:17:21.730
So I can just continue typing.

00:17:21.880 --> 00:17:25.620
I'll type WW, and, well, you know,
it doesn't know about WWDC.

00:17:25.620 --> 00:17:26.620
So in this case, you just will type,
you know, welcome.

00:17:26.620 --> 00:17:28.520
You'll type WWDC.

00:17:28.530 --> 00:17:30.020
Now, the good thing is,
once you've done that,

00:17:30.020 --> 00:17:32.920
next time you try to type WWDC,
it will appear.

00:17:32.920 --> 00:17:35.130
And because it does appear in
the document and it's close by,

00:17:35.170 --> 00:17:36.660
it goes all the way to the top.

00:17:36.720 --> 00:17:40.000
So that's a good thing.

00:17:44.200 --> 00:17:46.670
So, let me close this document.

00:17:46.710 --> 00:17:50.100
One other feature in the text
system is here's a document

00:17:50.150 --> 00:17:52.600
that looks pretty plain,
but the extension will probably

00:17:52.600 --> 00:17:54.030
give you a clue as to what it is.

00:17:54.550 --> 00:17:57.470
We don't have Word on this machine,
and that is a Word document.

00:17:57.660 --> 00:18:00.690
If I were to say open and
go to my desktop here,

00:18:00.690 --> 00:18:04.500
you'll notice that the
Word document will appear here.

00:18:04.790 --> 00:18:06.100
It actually does open.

00:18:06.300 --> 00:18:10.720
So we've added support
for Word documents.

00:18:12.560 --> 00:18:15.780
One thing to note though is that
Word is a very rich document format

00:18:15.780 --> 00:18:16.930
and Word has a lot of features.

00:18:17.000 --> 00:18:19.940
There are many features of Word that
we don't yet do out of the box,

00:18:19.940 --> 00:18:21.500
such as tables and stuff.

00:18:21.840 --> 00:18:24.650
Those features are not
going to work very well.

00:18:24.660 --> 00:18:28.500
So expect us to work with the
more simple document types.

00:18:28.500 --> 00:18:29.990
And in cases where we
don't have Word around,

00:18:30.070 --> 00:18:31.200
I think it's pretty useful.

00:18:31.300 --> 00:18:34.110
The good thing is you can also
actually save as a Word document.

00:18:34.200 --> 00:18:35.260
So I can try to save this.

00:18:35.300 --> 00:18:38.540
And when you do that, in this case,
it will actually tell me that

00:18:38.540 --> 00:18:41.280
the saving will be lossy because
I opened the Word document and

00:18:41.350 --> 00:18:42.780
it might have lost some features.

00:18:42.800 --> 00:18:45.970
The good thing is once you save
from text-edit a Word document,

00:18:46.040 --> 00:18:47.930
you try to save again,
it won't warn you anymore because

00:18:47.930 --> 00:18:49.280
it knows it's no longer lossy.

00:18:49.280 --> 00:18:52.610
But anyway,
this is a feature we'll be improving,

00:18:52.610 --> 00:18:56.210
but the basic,
pretty solid support is there as is.

00:18:56.510 --> 00:18:59.060
Okay, so one thing that we've added to
the text system is something we've

00:18:59.060 --> 00:19:02.400
been missing for a long time,
and that's a standard find panel.

00:19:02.400 --> 00:19:02.880
Here it is.

00:19:02.890 --> 00:19:05.440
It looks somewhat like the
text edit one from before.

00:19:05.440 --> 00:19:09.380
Text edit now is about
500 or 300 lines thinner.

00:19:09.380 --> 00:19:12.930
It's got some nice, you know,
basic find options, and, you know,

00:19:12.930 --> 00:19:16.540
it's available in the text system by
default when you create one in IB,

00:19:16.540 --> 00:19:17.930
so it's there for you.

00:19:20.480 --> 00:19:23.490
One problem people had with the
text system was the default ruler.

00:19:23.580 --> 00:19:25.860
People didn't quite understand
what some of those fields were.

00:19:25.860 --> 00:19:27.680
In fact, they didn't understand
what all of them were,

00:19:27.680 --> 00:19:28.860
maybe, except for maybe this one.

00:19:28.860 --> 00:19:31.330
And we cleaned this stuff a bit.

00:19:31.470 --> 00:19:35.440
So for spacing now, we have this,
you can single or double, and, I mean,

00:19:35.440 --> 00:19:38.180
that's nice and simple,
but not very powerful.

00:19:38.180 --> 00:19:40.960
You can also, for instance,
go ahead and specify other stuff,

00:19:40.960 --> 00:19:43.010
like you can make the line
height one and a half,

00:19:43.010 --> 00:19:45.230
and you can specify paragraph
spacing if you wish,

00:19:45.230 --> 00:19:48.880
let's say 30 pixels, and suddenly,
you know, you get those options.

00:19:48.880 --> 00:19:50.460
So it's, it's a lot of fun.

00:19:50.510 --> 00:19:53.630
So it's a lot more, I think,
straightforward and intuitive to

00:19:53.630 --> 00:19:56.480
set these parameters right now.

00:19:56.480 --> 00:19:59.080
Another menu we've added
here is the styles menu,

00:19:59.080 --> 00:20:02.250
and let me just talk about that briefly.

00:20:02.750 --> 00:20:04.360
For instance,
let's say instead of this black here,

00:20:04.360 --> 00:20:06.430
I want this to be outlined.

00:20:06.430 --> 00:20:08.360
And by the way, Mac OS 9 fans,
you can notice the

00:20:08.360 --> 00:20:11.810
outline font over there,
which we didn't have in Jaguar as well.

00:20:11.930 --> 00:20:14.960
So let's say you really like this
outline font and you want to use

00:20:14.960 --> 00:20:17.030
it elsewhere in your document.

00:20:17.270 --> 00:20:18.680
Previously,
what you could do was you could

00:20:18.780 --> 00:20:23.160
copy the style and you could select
this and you could paste the style.

00:20:23.240 --> 00:20:25.970
And if you could use these command keys,
they're very useful for

00:20:26.170 --> 00:20:29.520
quickly propagating a style
throughout your document.

00:20:29.520 --> 00:20:34.370
One thing we've done now is if you really
like the style you can go ahead and

00:20:34.600 --> 00:20:39.550
Add to your favorites.

00:20:39.550 --> 00:20:39.550
And let's say we call this WBC.

00:20:40.160 --> 00:20:40.760
Headline.

00:20:40.760 --> 00:20:44.630
And you specify whether you want the
font and the ruler as part of the style.

00:20:44.740 --> 00:20:48.380
So now I can come back here,
down here for instance, and I can say,

00:20:48.380 --> 00:20:50.320
yep, I want that, WWDC headline slide.

00:20:50.420 --> 00:20:52.960
So this is not style sheets,
but simple way to preserve

00:20:52.960 --> 00:20:54.370
the styles you use often.

00:20:54.450 --> 00:20:57.480
And again, it's just standard part
of the text system.

00:20:57.480 --> 00:20:59.450
Okay, so I think that's all
for the demo right now.

00:21:09.480 --> 00:21:10.620
So there are many user features.

00:21:10.650 --> 00:21:12.400
We showed some of them.

00:21:12.480 --> 00:21:17.200
Word documents, find panel,
dealing with styles, a better text ruler,

00:21:17.250 --> 00:21:18.640
background color,
which I didn't show you,

00:21:18.640 --> 00:21:19.860
but it's in there.

00:21:19.860 --> 00:21:21.080
Text doesn't support it yet.

00:21:21.140 --> 00:21:23.840
Text completion, setting base,
writing direction.

00:21:23.840 --> 00:21:26.660
That's also, we added support for
this for buy-die writers.

00:21:26.660 --> 00:21:29.190
And also,
we have character styles like outlines,

00:21:29.190 --> 00:21:29.990
shadows, etc.

00:21:30.060 --> 00:21:31.880
Not all of them are exposed to the UI.

00:21:31.920 --> 00:21:34.530
We've also added many
new text attributes.

00:21:34.600 --> 00:21:36.630
Again, Doug will probably talk
about these in more detail,

00:21:36.630 --> 00:21:38.990
but there's, you know,
strike through colors, stroke colors,

00:21:39.070 --> 00:21:40.900
shadow, obliqueness, expansion.

00:21:40.900 --> 00:21:43.510
You can specify,
attach a cursor to a range of text.

00:21:43.630 --> 00:21:45.900
You can attach a tooltip
to a range of text.

00:21:45.900 --> 00:21:47.900
You can specify line heights,
as I showed you.

00:21:47.900 --> 00:21:49.900
And paragraph spacing,
you have a lot more control over.

00:21:49.900 --> 00:21:52.850
Other new features include a
new public typesetter class,

00:21:52.960 --> 00:21:55.540
the ATS typesetter,
which gives you a lot more power

00:21:55.540 --> 00:21:58.760
over the typesetting process,
and a glyph generator class.

00:21:58.900 --> 00:22:01.900
And additional changes include
truncated text drawing.

00:22:01.900 --> 00:22:04.880
If you have code where you measure
the text and then you go ahead

00:22:04.880 --> 00:22:07.850
and redraw it after cutting it,
clipping it, whatever,

00:22:07.920 --> 00:22:11.980
using the truncated text drawing will
be a big performance win because we

00:22:12.000 --> 00:22:14.900
do all that measurement for you and
put the ellipses in the right place.

00:22:15.000 --> 00:22:18.070
There's also improved accessibility.

00:22:18.200 --> 00:22:19.200
Thank you.

00:22:19.200 --> 00:22:22.430
The improved accessibility allows
the assistive apps to get at the

00:22:22.430 --> 00:22:25.110
backing store of text and get much
more information about them and also

00:22:25.210 --> 00:22:26.960
a bunch of performance improvements.

00:22:27.040 --> 00:22:29.190
For instance,
string drawing is way faster now.

00:22:29.290 --> 00:22:31.700
Again, session 427, Friday afternoon.

00:22:31.700 --> 00:22:35.700
I mentioned shadows,
and a shadow is now a new class.

00:22:35.700 --> 00:22:38.680
It lets you specify a drop shadow.

00:22:38.840 --> 00:22:42.630
It's independent of the CTM,
so the light source

00:22:42.670 --> 00:22:44.940
determines where the light,
the system light source

00:22:44.940 --> 00:22:46.200
determines where the shadow is.

00:22:46.200 --> 00:22:48.200
So it's the value for
a new text attribute.

00:22:48.200 --> 00:22:51.040
If you set the shadow attribute
to an instance of an shadow,

00:22:51.110 --> 00:22:53.200
all text will be drawn with that shadow.

00:22:53.200 --> 00:22:55.410
Now, shadow is a generally useful class.

00:22:55.420 --> 00:22:58.200
You can set offset blur,
and you can use it anywhere,

00:22:58.200 --> 00:23:02.190
just like NSColor or
NSFont by just saying set.

00:23:02.200 --> 00:23:05.160
So, you know,
that's pretty straightforward.

00:23:05.220 --> 00:23:07.970
And then any drawing you
do in that graphics context

00:23:07.970 --> 00:23:09.590
will appear with a shadow.

00:23:11.130 --> 00:23:14.380
So let's talk about
views for a while now.

00:23:14.380 --> 00:23:18.510
Views in Jaguar, one complaint that came
up in various forums,

00:23:18.510 --> 00:23:21.370
discussions,
etc., this view-rect coalescing

00:23:21.370 --> 00:23:24.460
problem where a view would,
whenever it got multiple

00:23:24.460 --> 00:23:26.930
rects invalidated,
it would coalesce them

00:23:26.930 --> 00:23:28.080
into a bigger rect.

00:23:28.080 --> 00:23:30.660
And that would end up causing
it to draw more than necessary.

00:23:30.720 --> 00:23:33.070
Let me give you a demo, a little example.

00:23:33.210 --> 00:23:34.760
Here's your window.

00:23:34.760 --> 00:23:37.820
Let's say the user clicks
that checkbox at the top.

00:23:37.870 --> 00:23:40.130
And let's say clicking that
checkbox causes that text field

00:23:40.220 --> 00:23:41.440
in the bottom to be updated.

00:23:41.440 --> 00:23:45.760
If these two happen in the same,
you know, event cycle,

00:23:45.760 --> 00:23:47.990
which they probably would, you

00:23:48.560 --> 00:23:51.200
Although these individual
views are invalid themselves,

00:23:51.340 --> 00:23:54.040
the superview,
the common ancestor for these two views,

00:23:54.130 --> 00:23:56.560
ends up getting an invalidation
wreck that's this big,

00:23:56.560 --> 00:24:00.760
which of course ends up touching,
redrawing almost everything in the view.

00:24:00.880 --> 00:24:03.050
And in some cases it's no big deal,
it's a result of an event,

00:24:03.050 --> 00:24:05.840
but in other cases there's a
performance that could be significant.

00:24:05.840 --> 00:24:09.830
So this is the problem that
we're looking to solve.

00:24:11.380 --> 00:24:14.760
So in Panther,
views track invalidated areas,

00:24:14.760 --> 00:24:19.500
and we restrict the clipping to
the areas that need drawing only.

00:24:19.610 --> 00:24:23.580
So if a rect has multiple rectangles,
we actually set the clip areas so

00:24:23.600 --> 00:24:27.400
any drawing you do will actually only
appear in those areas by default.

00:24:27.430 --> 00:24:30.090
And another important thing about
this is that the drawRect method,

00:24:30.100 --> 00:24:34.300
which is how a view draws itself,
is still the funnel point for drawing.

00:24:34.330 --> 00:24:37.790
We did not want apps to change.

00:24:38.120 --> 00:24:42.180
to for this feature to be
effective across the system.

00:24:42.180 --> 00:24:45.500
Now what I mean by drawRect is the funnel
is that drawRect will not get called

00:24:45.500 --> 00:24:47.440
multiple times with multiple rects.

00:24:47.610 --> 00:24:50.920
Instead, drawRect will get called
once with a rectangle that's

00:24:50.920 --> 00:24:54.140
the union just like before,
so that behavior hasn't changed

00:24:54.220 --> 00:24:55.890
and maintains compatibility.

00:24:55.950 --> 00:24:59.140
Now you can go ahead and draw just
that rectangle as you did before

00:24:59.140 --> 00:25:00.630
and the clipping will save you.

00:25:00.630 --> 00:25:02.830
There will be some gain
in performance there.

00:25:03.040 --> 00:25:05.690
However, if you're sophisticated,
you can call this method,

00:25:05.690 --> 00:25:08.100
getRectsBeingDrawn,
and count and get back a

00:25:08.100 --> 00:25:09.600
list and count of rects.

00:25:09.600 --> 00:25:12.030
You do this in your drawRect
method and as a result of that,

00:25:12.050 --> 00:25:13.740
you can just draw those rectangles,
you know,

00:25:13.740 --> 00:25:16.320
because those are the rectangles
we actually want you to draw.

00:25:17.590 --> 00:25:20.270
We've also given you a convenience
method to determine whether a given

00:25:20.270 --> 00:25:21.850
rect intersects these rectangles.

00:25:21.860 --> 00:25:25.500
That allows you to quickly determine
whether a rect you have should be drawn.

00:25:25.500 --> 00:25:29.490
We've also given you a way to override
the default clipping behavior.

00:25:29.500 --> 00:25:35.620
Before I said that we clip for you,
you know, the rectangles.

00:25:35.620 --> 00:25:37.550
If you want to change
that for some reason,

00:25:37.550 --> 00:25:39.500
you'd have to be pretty
sophisticated to want to do that.

00:25:39.600 --> 00:25:43.500
You can override that behavior,
return no, and do your own thing.

00:25:43.500 --> 00:25:46.500
There might be reasons for this,
but it's fairly advanced.

00:25:46.600 --> 00:25:48.450
Now,
here you're looking at this thinking,

00:25:48.450 --> 00:25:51.080
"Well, if I have to do this,
then my view that doesn't do this

00:25:51.080 --> 00:25:55.920
is not going to take advantage
of this whole process." Well,

00:25:56.060 --> 00:25:59.490
it turns out that most of the time,
the performance hit we get

00:25:59.490 --> 00:26:03.450
from this isn't because a view
internally isn't managing rects.

00:26:03.550 --> 00:26:07.570
It's because at the
Windows content level,

00:26:07.570 --> 00:26:12.340
the views that have updated
are being coalesced.

00:26:12.490 --> 00:26:15.950
The one view that really needs to
implement this is a view like the

00:26:15.970 --> 00:26:19.610
content view of your window or maybe
a box that can include multiple views.

00:26:19.620 --> 00:26:21.740
So just by doing it there,
which we've done in the app kit,

00:26:21.870 --> 00:26:24.640
we are seeing many benefits,
a lot of benefits to this thing.

00:26:24.640 --> 00:26:26.520
But if you have a view
that's fairly sophisticated,

00:26:26.530 --> 00:26:28.460
a graphic view with a lot
of changing documents,

00:26:28.510 --> 00:26:30.360
maybe animations,
you might want to go to the

00:26:30.360 --> 00:26:34.030
next step and implement this
method and make it even faster.

00:26:34.540 --> 00:26:38.800
Another feature we've added to view,
which was being asked a lot recently,

00:26:38.800 --> 00:26:41.740
was the concept this
view hiding business.

00:26:41.740 --> 00:26:45.950
You can basically tell
a view it's hidden.

00:26:46.100 --> 00:26:47.310
Thank you.

00:26:47.340 --> 00:26:51.740
And it not only hides that view,
but it hides all its sub-views,

00:26:51.740 --> 00:26:52.850
of course.

00:26:52.900 --> 00:26:55.290
And it also manages a lot
of stuff like cursor recs,

00:26:55.390 --> 00:26:59.090
tooltip recs, tracking recs are disabled,
OpenGL services are ordered out,

00:26:59.120 --> 00:27:01.470
and the responder chains
are just automatically.

00:27:01.480 --> 00:27:04.870
You don't want to be tabbing
through and ending up in the weeds,

00:27:04.870 --> 00:27:05.800
of course.

00:27:05.800 --> 00:27:09.110
And the API is very Cocoa-esque,
meaning simple.

00:27:09.220 --> 00:27:12.190
You say set hidden or is hidden,
and that's it.

00:27:12.190 --> 00:27:13.460
And everything else is handled for you.

00:27:13.460 --> 00:27:16.890
We do have a third method, unfortunately,
so it's 50% more complex

00:27:16.890 --> 00:27:18.710
than maybe it needs to be.

00:27:18.780 --> 00:27:21.950
You can ask a view whether it's
hidden or whether it's hidden because

00:27:21.950 --> 00:27:23.580
a super view of that view is hidden.

00:27:23.580 --> 00:27:26.680
Because clearly, you know,
if your super view was hidden,

00:27:26.680 --> 00:27:28.470
you get hidden,
but it's an implicit hiding and you can

00:27:28.470 --> 00:27:29.680
ask whether the view is in that state.

00:27:31.450 --> 00:27:36.640
Oh, before I move over, move on,
I should mention some people have

00:27:36.640 --> 00:27:40.840
implemented set hidden and is hidden
in their applications as a category,

00:27:40.840 --> 00:27:41.330
for instance.

00:27:41.330 --> 00:27:43.460
In general,
we should work with those categories.

00:27:43.460 --> 00:27:46.220
However, there are cases where we were
assuming the set hidden we

00:27:46.220 --> 00:27:48.950
called was our implementation,
and we've cleaned those up.

00:27:49.080 --> 00:27:51.160
So we believe we've addressed
the compatibility problems.

00:27:51.430 --> 00:27:55.060
But if you have your own set hidden
methods or is hidden methods,

00:27:55.060 --> 00:27:58.120
just make sure things
are still working right.

00:27:58.130 --> 00:27:59.680
Of course,
something that might be bad is if

00:27:59.680 --> 00:28:01.380
you had a set hidden method but
didn't have an is hidden method.

00:28:01.460 --> 00:28:04.530
So we're calling, you know,
our is hidden, but your set hidden,

00:28:04.530 --> 00:28:06.400
and that might be a little bizarre.

00:28:06.400 --> 00:28:08.930
So there is a potential
compatibility issue there,

00:28:08.930 --> 00:28:11.390
but we have, you know,
addressed the ones we've seen.

00:28:11.660 --> 00:28:15.270
Now there's a lot more view discussion
and graphics discussion this afternoon,

00:28:15.310 --> 00:28:18.950
session 413 in the 2D drawing techniques.

00:28:19.240 --> 00:28:23.550
From view to window,
if you manage your window's internals

00:28:23.630 --> 00:28:25.940
like you have your own toolbar,
whatever, or you want a sheet to come

00:28:25.940 --> 00:28:27.890
out from a custom place,
you can now have a delegate

00:28:27.970 --> 00:28:30.730
method that allows a sheet to
come up from anywhere you want.

00:28:30.800 --> 00:28:32.930
So there it is.

00:28:32.990 --> 00:28:35.400
You basically specify a rectangle
where it should come out of.

00:28:35.400 --> 00:28:37.730
And we ignore the height of
the rectangle for now because

00:28:37.800 --> 00:28:39.210
sheets are always coming down.

00:28:39.300 --> 00:28:44.660
So if you specify a small width,
it will genie out of there and so on.

00:28:44.830 --> 00:28:47.010
You can make it come out of,
for instance, if you have your own

00:28:47.010 --> 00:28:48.300
toolbar under that toolbar.

00:28:48.300 --> 00:28:51.300
We also allow you to have a
custom minimized dock icon image.

00:28:51.300 --> 00:28:53.090
This API used to be
there for a long time.

00:28:53.100 --> 00:28:55.900
It was disabled due to compatibility,
but we enabled it again.

00:28:55.900 --> 00:28:59.500
So if you don't like the dock's,
you know, minimized dock icon image,

00:28:59.500 --> 00:29:01.000
you can provide your own.

00:29:01.970 --> 00:29:05.160
And as Windows,
tooltips in Windows used to be disabled

00:29:05.510 --> 00:29:07.840
for all Windows except the active window.

00:29:07.950 --> 00:29:12.160
We enabled them so that inactive
Windows in your active app,

00:29:12.210 --> 00:29:13.900
the tooltips now work.

00:29:14.090 --> 00:29:16.320
They are disabled in inactive
applications because we

00:29:16.320 --> 00:29:18.870
don't want tooltips to just
jump up at you everywhere.

00:29:18.920 --> 00:29:22.900
But you can enable it for an inactive,
you can enable it for the

00:29:22.900 --> 00:29:26.000
Windows inactive app by telling
those Windows that they should

00:29:26.000 --> 00:29:28.770
have tooltips no matter what,
and here's the way to do that.

00:29:30.460 --> 00:29:34.210
It used to be you can convert
frame recs or content recs back

00:29:34.320 --> 00:29:36.140
and forth at a factory method.

00:29:36.140 --> 00:29:39.080
So you can tell for this window
style what's the conversion.

00:29:39.080 --> 00:29:42.900
We now let you do it at the window level,
and that lets you take special

00:29:42.980 --> 00:29:46.070
circumstances of the window into
account like toolbars and who knows,

00:29:46.070 --> 00:29:47.420
maybe other future changes.

00:29:47.510 --> 00:29:52.800
But these are basically a little more
per instance specific ways to do that.

00:29:52.800 --> 00:29:56.120
We've also added eight new methods
that parallel similar frame methods,

00:29:56.120 --> 00:29:59.820
where you can set the max size, min size,
et cetera of a window based on

00:30:00.010 --> 00:30:04.220
the content size of the window,
not the frame size of the window.

00:30:04.220 --> 00:30:06.620
So these are basically parallel
to the existing frame ones.

00:30:06.620 --> 00:30:07.620
They look great.

00:30:07.620 --> 00:30:10.850
They're not implemented
in your seed though,

00:30:10.880 --> 00:30:13.660
so for now this is all you get for that.

00:30:13.660 --> 00:30:16.240
From window to alert,
we've added a new public class.

00:30:16.240 --> 00:30:19.150
If you use alert panels,
you know that that's one

00:30:19.150 --> 00:30:22.740
of the significant piece of
C APIs we have in the kit.

00:30:22.740 --> 00:30:26.860
We added this class to add some
flexibility over the C APIs.

00:30:26.860 --> 00:30:26.860
Okay.

00:30:27.100 --> 00:30:29.660
So you can now assign key
equivalents to your buttons.

00:30:29.660 --> 00:30:32.220
You can assign custom return values.

00:30:32.220 --> 00:30:33.340
You can show a help button.

00:30:33.370 --> 00:30:35.140
You see one in the left side here.

00:30:35.140 --> 00:30:37.740
And you can, if you want,
you can provide more than three buttons,

00:30:37.740 --> 00:30:41.760
and sometimes the situation calls for it.

00:30:41.760 --> 00:30:44.000
The API here is fairly straightforward.

00:30:44.000 --> 00:30:46.580
You init an NSAlert,
and then you set parameters,

00:30:46.580 --> 00:30:50.540
message text, informative text, icon,
whatever you want.

00:30:50.540 --> 00:30:54.180
Then you run it just like you run
other sheets or panels with either run

00:30:54.180 --> 00:30:56.300
model or begin sheet for model window.

00:30:56.300 --> 00:30:56.860
So that brings up a sheet.

00:30:56.860 --> 00:30:57.800
So pretty straightforward.

00:30:57.860 --> 00:31:02.560
The one other thing here is
that if you have old C-based,

00:31:02.560 --> 00:31:06.020
you know,
you're making the old C-based calls,

00:31:06.020 --> 00:31:08.610
and you want to just convert
those in your NSAlert class,

00:31:08.610 --> 00:31:11.460
we've given you a convenience
method that does it.

00:31:11.550 --> 00:31:13.970
This convenience method,
in addition to just doing that same old,

00:31:14.050 --> 00:31:15.980
you know,
same function call in the style,

00:31:15.980 --> 00:31:18.460
with a method style,
it also sets the return value

00:31:18.500 --> 00:31:21.760
so that they're compatible
with the old return values.

00:31:21.760 --> 00:31:23.850
The old return values were sort of,
I don't know,

00:31:23.860 --> 00:31:26.620
if anybody ever looked at it,
they're like some minus ones.

00:31:26.620 --> 00:31:28.560
They were like one, zero, one,
and they weren't, you know,

00:31:28.560 --> 00:31:30.460
the rightmost button,
and it wasn't clear what it is,

00:31:30.460 --> 00:31:31.880
and I don't even remember what it is now.

00:31:31.880 --> 00:31:32.940
The new values are a lot better.

00:31:32.940 --> 00:31:36.210
They're like the rightmost button,
rightmost button plus one, plus two,

00:31:36.280 --> 00:31:36.880
et cetera.

00:31:36.880 --> 00:31:39.060
But this will set up
the old return values,

00:31:39.060 --> 00:31:41.340
assuming you want to
use it in the old way.

00:31:41.340 --> 00:31:44.220
So use this if you're transferring
code from your C-based one to this one.

00:31:44.220 --> 00:31:46.180
Of course,
C-based ones aren't deprecated.

00:31:46.180 --> 00:31:48.080
It's just, you know,
you might want to switch

00:31:48.080 --> 00:31:49.380
for some reason or another.

00:31:49.390 --> 00:31:50.540
I mentioned the help button.

00:31:50.540 --> 00:31:52.580
To get a help button to
show in your NSAlert,

00:31:52.610 --> 00:31:55.310
you say set help anchor,
and you provide the anchor that should

00:31:55.310 --> 00:31:56.370
be open when the help button is on.

00:31:56.380 --> 00:31:57.860
The help button is pressed.

00:31:57.920 --> 00:32:00.830
If you want more sophisticated handling,
you would implement the delegate method,

00:32:00.860 --> 00:32:04.160
alert show help, and you will be called,
and you can then decide to

00:32:04.200 --> 00:32:05.650
show help any way you want.

00:32:05.760 --> 00:32:09.220
Of course, in doing that,
you might want to use these new

00:32:09.220 --> 00:32:11.640
help manager methods we've added.

00:32:11.640 --> 00:32:14.460
Before it used to be that you could
have--I think you could have help

00:32:14.620 --> 00:32:17.890
anchor in your info playlist and
it was automatically dealt with,

00:32:17.890 --> 00:32:19.860
but you didn't have finer control.

00:32:19.920 --> 00:32:23.280
With these new help manager methods,
you can specify the help anchor you want,

00:32:23.280 --> 00:32:26.140
the book you want,
and you can even also--.

00:32:26.180 --> 00:32:30.160
Let's open the help pages by specifying
query string that you get from the user,

00:32:30.160 --> 00:32:32.300
for instance, using find string in book.

00:32:32.420 --> 00:32:36.890
If you specify nil there for the book,
it will search in all the books.

00:32:38.090 --> 00:32:40.900
Now one other way you might provide
help is rather than using Help Viewer,

00:32:40.900 --> 00:32:42.460
if you want,
you might maybe have your own

00:32:42.460 --> 00:32:45.310
way of opening documents or
opening a help application.

00:32:45.390 --> 00:32:47.540
In that case,
you probably turn to NS Workspace

00:32:47.540 --> 00:32:50.080
and we've added some new
methods to NS Workspace as well.

00:32:50.420 --> 00:32:54.580
One of them is the ability to
launch an app by bundle identifier.

00:32:54.680 --> 00:32:56.910
So rather than name or path,
you can now launch it with

00:32:56.990 --> 00:33:00.500
bundle identifier and let launch
services decide which version,

00:33:00.500 --> 00:33:03.790
which app it corresponds to.

00:33:03.970 --> 00:33:06.220
We've also provided some options here.

00:33:06.220 --> 00:33:08.270
These are options like
Launch and Classic,

00:33:08.340 --> 00:33:10.440
Print, Launch and Quit, etc.

00:33:10.440 --> 00:33:12.840
There are a bunch of things like that,
or Print and Quit.

00:33:12.840 --> 00:33:14.380
So you specify those options.

00:33:14.430 --> 00:33:18.010
You can specify an Apple event if
you wanted some Apple event-level

00:33:18.020 --> 00:33:19.780
customization there.

00:33:19.780 --> 00:33:22.280
And you also get back
a launch identifier,

00:33:22.330 --> 00:33:24.590
which can be used for
various other purposes.

00:33:24.690 --> 00:33:25.380
Currently, it's not.

00:33:25.380 --> 00:33:27.320
I don't think there's any
APIs that take advantage of it,

00:33:27.320 --> 00:33:29.760
but in the future there might
be to identify what launch

00:33:29.760 --> 00:33:31.840
event you're talking about.

00:33:31.840 --> 00:33:33.790
You can also now open
multiple files at once.

00:33:33.880 --> 00:33:35.880
With the second method,
you just specify an array of

00:33:35.880 --> 00:33:37.550
URLs and they're all opened.

00:33:37.550 --> 00:33:40.190
And that's rather than
calling it one at a time.

00:33:40.250 --> 00:33:43.570
And we'll see the counterparts
of that in a little bit.

00:33:45.860 --> 00:33:47.860
You can also now discover an
application with bundle ID,

00:33:47.870 --> 00:33:49.770
so if you do want to get a
path to an application but

00:33:49.830 --> 00:33:51.800
not launch it necessarily,
you use this.

00:33:51.860 --> 00:33:55.200
And we also now let you see the bundle
identifier launched application.

00:33:55.260 --> 00:33:59.120
It's in the dictionary you get back when
you get back an app launch notification.

00:33:59.120 --> 00:34:00.640
And there's that key for that.

00:34:00.700 --> 00:34:03.300
We also now have sleep notifications.

00:34:03.300 --> 00:34:06.790
We have Will Sleep and Did Wake.

00:34:06.790 --> 00:34:07.940
We don't have the other two.

00:34:08.020 --> 00:34:11.460
These two are not
implemented in the WWDC seed,

00:34:11.490 --> 00:34:13.980
but they do what you might expect them.

00:34:14.150 --> 00:34:17.740
Now, in the Will Sleep notification,
you can actually take your time

00:34:17.860 --> 00:34:20.040
to do some stuff if you want.

00:34:20.110 --> 00:34:22.790
And the machine won't go
to sleep until you're done.

00:34:22.930 --> 00:34:25.660
However, you can't count on that because
there might be cases where the

00:34:25.660 --> 00:34:27.400
machine is going to emergency sleep.

00:34:27.470 --> 00:34:29.680
The lid is closed,
or the power is going out,

00:34:29.680 --> 00:34:30.900
or there's no battery.

00:34:31.070 --> 00:34:33.220
In those cases,
you might not even get this notification,

00:34:33.220 --> 00:34:35.640
or if you do, it might still go to sleep
halfway through this.

00:34:35.670 --> 00:34:38.160
So don't count on being able to
do stuff in this notification.

00:34:38.160 --> 00:34:40.380
It's just a way to,
if you did want to do something,

00:34:40.490 --> 00:34:41.860
this is the way to do it.

00:34:43.910 --> 00:34:46.150
Better than what you had before.

00:34:48.070 --> 00:34:50.500
Okay, so earlier we talked about
opening multiple files.

00:34:50.500 --> 00:34:53.140
This is the counterpart.

00:34:53.140 --> 00:34:55.290
You will get an open files call,
which includes all the

00:34:55.380 --> 00:34:56.440
files that were opened.

00:34:56.440 --> 00:34:59.750
This is very useful for instance
if the user double clicks on,

00:34:59.750 --> 00:35:02.500
you know, 30 JPEG documents in Finder.

00:35:02.500 --> 00:35:04.310
If you want to hear that they
all came as one big clump,

00:35:04.310 --> 00:35:06.540
you would implement this
method and get all of them.

00:35:06.540 --> 00:35:08.590
Before there were ways like
you'd implement open file.

00:35:08.700 --> 00:35:11.670
You'd get 30 open calls and you could
check to see whether you were on

00:35:11.680 --> 00:35:16.040
the same event cycle to deduce that
they were all being opened together.

00:35:16.110 --> 00:35:18.770
If these methods are implemented,
they will supersede the old methods

00:35:18.770 --> 00:35:20.940
which is application open file colon.

00:35:21.010 --> 00:35:24.010
Now note that with multiple file
requests coming in at the same time,

00:35:24.010 --> 00:35:28.000
the delegate has more responsibility
for handling UI and error conditions.

00:35:28.000 --> 00:35:31.240
For instance, you know,
one of the files might not open.

00:35:31.240 --> 00:35:34.250
The user might cancel the
opening process in between,

00:35:34.250 --> 00:35:36.410
you know, when a panel comes up or such.

00:35:36.610 --> 00:35:38.880
To enable you to do this,
typically you'd handle this

00:35:38.880 --> 00:35:40.150
by sending an Apple event.

00:35:40.150 --> 00:35:44.190
We've added a method in this
application that lets you just

00:35:44.190 --> 00:35:47.900
send a reply to open or print
and you can specify what you want

00:35:48.090 --> 00:35:49.820
communicated and it's handled for you.

00:35:49.820 --> 00:35:52.780
So you don't have to do any
special Apple event stuff.

00:35:52.880 --> 00:35:54.430
Now if you do want more
sophisticated behavior,

00:35:54.440 --> 00:35:58.450
you can send Apple events directly
using Apple event manager class.

00:35:58.630 --> 00:36:01.520
Here the success is implied,
so you would typically use

00:36:01.520 --> 00:36:05.110
this if you just want to
communicate cancel or failure.

00:36:05.760 --> 00:36:09.180
So let's jump to menus.

00:36:09.260 --> 00:36:12.770
Mac OS 9, those of you who use Mac OS 9,
you know that when you went

00:36:12.770 --> 00:36:15.290
to the control panel menu
item in the Apple menu,

00:36:15.290 --> 00:36:18.190
you could select that menu item all
the way to the sub menu and it would

00:36:18.260 --> 00:36:21.020
open up the control panel where
you could choose what you wanted.

00:36:21.060 --> 00:36:24.190
Cocoa didn't have that
ability to assign those,

00:36:24.190 --> 00:36:27.930
a super menu to be a leaf
target and now you can do that.

00:36:27.930 --> 00:36:31.420
You can just set the target and action
on a menu item and it will work.

00:36:31.470 --> 00:36:35.360
We also added this support for dynamic
menu items based on key equivalent.

00:36:35.360 --> 00:36:39.230
What I mean by this is you hold
down alternate or option or

00:36:39.230 --> 00:36:45.520
shift and the menu title changes
and something different happens.

00:36:45.520 --> 00:36:48.870
The way you do that is you just
specify certain menu items as being

00:36:48.960 --> 00:36:53.690
alternates of the first one and if
we notice that they're alternates,

00:36:53.690 --> 00:36:55.600
we just collapse them into one menu item.

00:36:55.600 --> 00:37:00.430
Now if you run such a Nib file on Jaguar,
the individual menu items

00:37:00.430 --> 00:37:03.930
will show as distinct items
which is reasonable behavior,

00:37:03.930 --> 00:37:06.750
maybe not exactly but in Jaguar
this feature doesn't exist,

00:37:06.760 --> 00:37:09.050
so it's better than nothing.

00:37:09.950 --> 00:37:13.140
Another thing in menus,
you can now have attributed menu titles.

00:37:13.140 --> 00:37:16.230
You can't put full
attributed strings here,

00:37:16.230 --> 00:37:18.500
like a Word document,
but you can specify the style

00:37:18.500 --> 00:37:19.660
and I think an embedded image.

00:37:19.660 --> 00:37:20.660
It's fairly limited.

00:37:20.750 --> 00:37:21.900
And color.

00:37:22.010 --> 00:37:24.900
And you can also have
tooltips on menu items.

00:37:25.080 --> 00:37:26.900
And NSMany now is a delegate.

00:37:26.900 --> 00:37:28.900
After so many years,
it finally got a delegate.

00:37:28.900 --> 00:37:31.900
We added this for lazily
populating the menu.

00:37:31.950 --> 00:37:34.880
There are some menus which take
time to populate and you don't want

00:37:34.880 --> 00:37:37.900
to necessarily do it at app launch.

00:37:37.900 --> 00:37:41.120
So we have this delegate method,
menu needs update,

00:37:41.340 --> 00:37:44.900
and you can go ahead and populate
the menu when you get that.

00:37:44.900 --> 00:37:46.900
That will be sent to you
when the menu is brought up.

00:37:46.900 --> 00:37:49.890
Thank you.

00:37:51.800 --> 00:38:57.200
[Transcript missing]

00:38:59.150 --> 00:39:01.000
Okay,
and one other feature that I haven't

00:39:01.090 --> 00:39:04.540
heard talked about in the sessions
I went to is customizable command keys.

00:39:04.540 --> 00:39:06.940
In system preferences,
you can now specify command

00:39:06.940 --> 00:39:09.730
keys for arbitrary menu items,
and they can be either global

00:39:09.730 --> 00:39:10.810
or they can be per app.

00:39:10.810 --> 00:39:13.950
And this works in Cocoa and Carbon apps,
so it's across the system.

00:39:13.950 --> 00:39:17.560
So, you know, you can specify what menu
equivalents you want for whatever.

00:39:17.560 --> 00:39:20.660
And here you see, for instance,
text that has somehow, you know,

00:39:20.660 --> 00:39:22.890
start speaking has been
set to command option S,

00:39:22.890 --> 00:39:24.960
hide others has been
set to command option H,

00:39:24.960 --> 00:39:26.650
so it works everywhere, and so on.

00:39:26.650 --> 00:39:29.040
So that's, that's a great feature.

00:39:29.100 --> 00:39:31.410
fairly useful.

00:39:31.710 --> 00:39:33.100
NSBrowser.

00:39:33.100 --> 00:39:36.200
One thing NSBrowser didn't have before
was continuous horizontal scrolling.

00:39:36.200 --> 00:39:39.740
It was, if you remember,
it would just jump in discrete steps.

00:39:40.000 --> 00:39:42.800
It's now implemented
and it's on by default.

00:39:42.850 --> 00:39:49.100
We now also have column resizing,
which is what Finder had this in Jaguar.

00:39:49.100 --> 00:39:52.980
Column resizing by default is not on,
so the browser behaves like it did before

00:39:53.060 --> 00:39:56.190
because there are enough compatibility
issues that we did not want to,

00:39:56.190 --> 00:39:59.270
you know, introduce incompatibilities
as a result of this.

00:39:59.280 --> 00:40:02.410
You can change the column resizing
type to one of three values.

00:40:02.410 --> 00:40:05.190
The no column resizing means
the columns will never resize.

00:40:05.210 --> 00:40:08.010
Before, they would resize based on
the width of the browser.

00:40:08.230 --> 00:40:10.920
Auto column resizing is the
behavior we have today and user

00:40:10.920 --> 00:40:15.370
column resizing is where the user
can resize them any way they want.

00:40:16.450 --> 00:40:19.450
And of course,
it would be good to provide

00:40:19.450 --> 00:40:22.940
persistence of these values so you
don't have to worry about them.

00:40:23.140 --> 00:40:26.090
So just by setting an autosave
name like we saw earlier,

00:40:26.180 --> 00:40:30.820
you can get the column widths to be
saved automatically in preferences.

00:40:30.820 --> 00:40:34.880
You can also, if you want to do more
sophisticated action as a result

00:40:34.880 --> 00:40:39.760
of column width size changes,
you can implement this notification

00:40:40.160 --> 00:40:43.080
and basically do whatever you want.

00:40:43.660 --> 00:40:46.140
TableView now has index set
based selection management.

00:40:46.140 --> 00:40:48.100
We'll talk about index
set in a few minutes.

00:40:48.100 --> 00:40:49.840
Chris Parker will go into that class.

00:40:49.920 --> 00:40:54.160
But instead of individually
specifying row IDs,

00:40:54.260 --> 00:40:59.830
column IDs, you now specify them in bulk,
which is a lot more efficient.

00:40:59.880 --> 00:41:02.520
This NSIndexSet is a
new Foundation class.

00:41:02.550 --> 00:41:05.260
We also have API for managing sorting UI.

00:41:05.290 --> 00:41:09.000
By using this other new
class called SortDescriptor,

00:41:09.850 --> 00:41:12.200
I hope you realize this means
we don't do sorting for you,

00:41:12.200 --> 00:41:15.170
just the sort UI for you,
but basically we do show, you know,

00:41:15.170 --> 00:41:18.240
the appropriate,
we let the user click on the column

00:41:18.240 --> 00:41:22.060
headers and you tell us which
columns are sortable and how,

00:41:22.060 --> 00:41:24.300
and we just manage the
sorting behavior for you.

00:41:24.430 --> 00:41:27.880
And, by the way, we also, yeah,
it says they automatically make the

00:41:27.940 --> 00:41:31.480
state persistent if you've asked
your table view to be persistent.

00:41:31.750 --> 00:41:34.030
The data source,
which is what you usually implement,

00:41:34.200 --> 00:41:36.670
still does the actual sorting,
but we tell it what the

00:41:36.680 --> 00:41:37.700
sort parameters are.

00:41:37.790 --> 00:41:40.440
And outline view, of course,
which is a subclass of table view,

00:41:40.470 --> 00:41:41.560
has the same behavior.

00:41:41.610 --> 00:41:43.540
In table view,
we have finer grid drawing control.

00:41:43.540 --> 00:41:46.840
You can now draw vertical or
horizontal grids independently.

00:41:46.910 --> 00:41:48.430
We have control over background drawing.

00:41:48.530 --> 00:41:50.280
For instance, if you want alternating
background colors,

00:41:50.300 --> 00:41:53.690
this might have been a way to do it,
but turns out we added this

00:41:53.770 --> 00:41:56.960
other method that says set users
alternating background colors,

00:41:57.000 --> 00:42:00.910
which is the white and blue or
white and gray colors you see

00:42:00.910 --> 00:42:03.170
in a lot of apps these days.

00:42:04.030 --> 00:42:07.820
If you want to use those colors
in your own lists or tables,

00:42:07.820 --> 00:42:11.000
we've also added a method to NSColor
to return an array of those colors.

00:42:11.000 --> 00:42:14.520
So white, light blue, white, light blue,
it can change depending on the release,

00:42:14.520 --> 00:42:15.000
whatever.

00:42:15.000 --> 00:42:18.070
You can also find out
the current control tint.

00:42:18.170 --> 00:42:20.820
Before, it wasn't easy for you to
find out whether the system

00:42:20.820 --> 00:42:24.000
was set to graphite or Aqua,
the blue.

00:42:24.070 --> 00:42:25.850
You could find out what
the current color was,

00:42:25.850 --> 00:42:28.480
but you couldn't really tell it
was graphite or Aqua other than

00:42:28.480 --> 00:42:30.000
looking at the hue of the color.

00:42:30.080 --> 00:42:34.000
NSColor also now allows you to set the
fill and stroke colors independently.

00:42:34.000 --> 00:42:37.000
So set fill, set stroke.

00:42:37.010 --> 00:42:41.000
So these are considered primitives,
just like the existing set method.

00:42:42.330 --> 00:42:43.420
NSColor to NSImage.

00:42:43.420 --> 00:42:45.600
We now support PostScript and EPS files.

00:42:45.780 --> 00:42:48.260
You heard about that, I think, on Monday.

00:42:48.260 --> 00:42:51.860
We, yeah, I mean, just go ahead and try
it and see how it works.

00:42:51.860 --> 00:42:55.330
I think the first time it's currently
a bit slow to set up the VM,

00:42:55.410 --> 00:42:58.240
but after it's pretty quick
and works pretty well.

00:42:58.360 --> 00:43:00.710
We also support five-channel CMYK images.

00:43:00.710 --> 00:43:03.680
ImageView now does automatic
animation of images.

00:43:03.680 --> 00:43:06.110
You can enable or
disable this if you want.

00:43:06.110 --> 00:43:09.260
As you know, we added animated image
support in Jaguar,

00:43:09.260 --> 00:43:12.180
but now ImageView will
also do it for you.

00:43:12.200 --> 00:43:14.200
Automatically.

00:43:14.200 --> 00:43:18.180
You can now poof it up with this great
new function called ShowAnimationEffect.

00:43:18.340 --> 00:43:22.000
Basically,
that's to get the little poof animation.

00:43:22.000 --> 00:43:24.160
We have two, actually,
animation effects and more to

00:43:24.160 --> 00:43:25.910
be added maybe in the future.

00:43:25.910 --> 00:43:29.060
They both do the same thing,
disappearing and poof,

00:43:29.110 --> 00:43:31.870
but if you really want poof
and not a disappearing action,

00:43:31.880 --> 00:43:34.620
you can choose poof as
opposed to the other one.

00:43:34.710 --> 00:43:37.370
It's an asynchronous action
and you'll get called back if

00:43:37.440 --> 00:43:39.790
you want when the poof is done.

00:43:40.290 --> 00:43:43.240
And as Cursor now supports
images other than 16x16 for

00:43:43.240 --> 00:43:48.080
applications compiled on Panther,
or linked on Panther,

00:43:48.080 --> 00:43:52.620
the reason for that is we found some
incompatibilities by just enabling this.

00:43:52.620 --> 00:43:56.140
Some applications, it turns out,
were already specifying large images,

00:43:56.150 --> 00:43:58.040
and so we're getting ugly cursor images.

00:43:58.040 --> 00:44:01.020
So we can't enable this due
to compatibility reasons.

00:44:01.050 --> 00:44:03.230
There's also support for
additional standard cursors that

00:44:03.230 --> 00:44:10.240
you might need in many cases:
pointing hand, closed hand, resize, etc.

00:44:10.240 --> 00:44:11.170
Speech classes.

00:44:11.250 --> 00:44:13.750
We have two classes that
wrap a bunch of speech APIs.

00:44:13.750 --> 00:44:15.080
They're quite powerful.

00:44:15.090 --> 00:44:15.940
You should look at them.

00:44:15.940 --> 00:44:17.440
I'm not going to talk
about them here because,

00:44:17.440 --> 00:44:19.740
you know,
time is short and features are many.

00:44:19.760 --> 00:44:23.180
Speech recognizer, speech synthesizer,
it lets you get back commands

00:44:23.180 --> 00:44:28.770
for various recognized speech
that the user might be saying.

00:44:29.500 --> 00:44:31.220
Another thing I'm not going
to do just this year is,

00:44:31.220 --> 00:44:32.870
and so I'm not going to even
talk about it other than,

00:44:32.870 --> 00:44:35.130
well, talk about it a bit,
is the controller layer,

00:44:35.130 --> 00:44:36.000
which is the bindings.

00:44:36.000 --> 00:44:37.130
You've seen a few demos of this.

00:44:37.180 --> 00:44:39.540
I think you're all excited to
go see the demo this afternoon.

00:44:39.540 --> 00:44:42.340
It's basically APIs to
eliminate the glue code.

00:44:42.380 --> 00:44:47.120
It comes, it's a bunch of enhancements,
you know, in various places.

00:44:47.120 --> 00:44:49.780
We've enhanced the key value coding,
if you're familiar with that.

00:44:50.760 --> 00:44:53.900
We've also added a new class in
this controller and subclasses.

00:44:54.310 --> 00:44:57.400
Currently, we have three in the kit,
object controller, array controller,

00:44:57.500 --> 00:44:58.700
user defaults controller.

00:44:58.700 --> 00:45:02.050
And there's a very tight
integration with interface builder,

00:45:02.050 --> 00:45:05.920
and I will, maybe I will show that,
or maybe not if I don't have time.

00:45:05.920 --> 00:45:08.660
And in fact,
that's what makes this feature possible.

00:45:08.690 --> 00:45:11.520
You know, the feature here is to just
raise the bar as far as,

00:45:11.680 --> 00:45:14.710
you know, avoiding eliminating
code you have to write,

00:45:14.770 --> 00:45:18.110
and the integration with interface
builder is a major part of that.

00:45:18.120 --> 00:45:20.730
There are two talks for this.

00:45:20.740 --> 00:45:23.440
The one this afternoon,
Cocoa UI programming.

00:45:23.440 --> 00:45:27.160
Friday morning, there was a Cocoa talk,
Cocoa performance techniques.

00:45:27.240 --> 00:45:30.540
We actually changed that to a
second controller layer talk,

00:45:30.740 --> 00:45:33.420
and it's a continuation of
the UI programming talk,

00:45:33.530 --> 00:45:36.830
where Mark Petrelli will go into more,
he will actually cover

00:45:36.830 --> 00:45:40.560
the APIs in more detail,
talk about key value coding, controllers,

00:45:40.670 --> 00:45:42.810
key value binding, observing.

00:45:42.820 --> 00:45:46.400
That's Friday morning at 9 a.m., so it's
not a performance talk at that slot.

00:45:46.470 --> 00:45:49.130
It's, the number in the room is the same,
the title has changed,

00:45:49.130 --> 00:45:50.320
so please make a note of it.

00:45:50.760 --> 00:45:54.390
I think Andreas will probably
point it out at today's talk.

00:45:54.800 --> 00:45:58.480
So,
Interface Builder has support for many

00:45:58.580 --> 00:46:00.520
of the features and APIs discussed here.

00:46:00.520 --> 00:46:01.690
Not all, but many.

00:46:01.690 --> 00:46:05.480
I mean, the Interface Builder team has
tracked the changes and we worked

00:46:05.570 --> 00:46:07.700
with them carefully to make
sure everything gets in there.

00:46:07.710 --> 00:46:10.540
There's support for bindings,
there's support for WebKit, as you saw,

00:46:10.540 --> 00:46:12.570
as a simple palette,
and also many of the things

00:46:12.570 --> 00:46:13.620
we talked about here.

00:46:13.840 --> 00:46:16.580
There's also some good improved
compatibility checking.

00:46:16.580 --> 00:46:18.820
Let me just give a quick demo of this.

00:46:18.860 --> 00:46:21.700
I'm going to try not to overlap too much.

00:46:21.800 --> 00:46:22.920
Ah, too far.

00:46:22.920 --> 00:46:24.420
Can we switch to the demo machine?

00:46:24.700 --> 00:46:25.990
- Okay.

00:46:32.090 --> 00:46:34.870
Okay,
so I'll create a new Cocoa application

00:46:35.050 --> 00:46:37.900
in Interface Builder.

00:46:37.900 --> 00:46:39.940
So if you look at some
of the palettes here,

00:46:39.940 --> 00:46:41.440
you'll notice there are some new things.

00:46:41.440 --> 00:46:43.670
The search field, this is a search field.

00:46:43.670 --> 00:46:46.850
You can actually drag it out here,
and if you bring up the inspector,

00:46:46.990 --> 00:46:50.020
you'll notice there's even a
way to specify the placeholder.

00:46:50.020 --> 00:46:52.980
You can say Google here,
and there you go.

00:46:52.980 --> 00:46:54.780
It says Google in there.

00:46:54.780 --> 00:46:56.650
Let's see.

00:46:56.650 --> 00:46:59.250
The table view one has
some bunch of new stuff.

00:46:59.250 --> 00:47:01.100
I'll get back to it in a second.

00:47:01.100 --> 00:47:04.100
Here you see the new box
and the new tab view styles.

00:47:04.120 --> 00:47:05.620
This is the web kit.

00:47:05.660 --> 00:47:08.130
Currently there is a web
view you can drag out,

00:47:08.130 --> 00:47:12.690
and finally the bindings one down
here with three nice colored boxes.

00:47:12.720 --> 00:47:15.190
Let's drag out a table view here.

00:47:17.500 --> 00:47:20.150
Okay.

00:47:20.150 --> 00:47:22.140
Now, like, just as an example,
some of the features

00:47:22.140 --> 00:47:25.140
we talked about here,
you can specify down here,

00:47:25.140 --> 00:47:27.480
use alternating row background,
so you can enable this.

00:47:27.510 --> 00:47:30.050
You can specify vertical,
horizontal grids,

00:47:30.070 --> 00:47:31.220
as you can see some of the features.

00:47:31.220 --> 00:47:34.970
Another feature that the IB team added
is a way to specify the data cell.

00:47:35.000 --> 00:47:37.220
For instance, these are now the cells.

00:47:37.360 --> 00:47:41.330
You notice they're somewhat different
than their big counterparts here.

00:47:41.390 --> 00:47:45.690
And the way you use this is
you go here and you drop it.

00:47:45.790 --> 00:47:46.520
And there you go.

00:47:53.200 --> 00:47:57.250
Triangle here lets you set the
properties of that data cell object.

00:47:57.260 --> 00:47:59.600
For instance,
I can make them mini controls or

00:47:59.600 --> 00:48:03.360
I can give them a bunch of tick marks.

00:48:03.360 --> 00:48:04.200
So there you go.

00:48:04.200 --> 00:48:07.790
So that's basically how you
can customize those cells.

00:48:07.800 --> 00:48:11.630
If you click on the table column,
like I click here,

00:48:11.640 --> 00:48:14.880
select the table column,
the table column info also

00:48:14.880 --> 00:48:17.200
lets you specify sort key,
sort selector, etc.

00:48:17.200 --> 00:48:19.000
So somewhat more support there.

00:48:19.420 --> 00:48:21.100
Let's see.

00:48:21.490 --> 00:48:26.090
Okay,
so let me now try to save this document.

00:48:26.090 --> 00:48:26.090
I will say save.

00:48:26.670 --> 00:48:30.250
So note that in the Save panel,
it says 10.2 and later format.

00:48:30.290 --> 00:48:33.230
Can you see this all the way in the back?

00:48:33.330 --> 00:48:36.300
And that's the new keyed archiving
format we added in Jaguar.

00:48:36.300 --> 00:48:40.800
Now, if I try to specify pre-10.2 format,
I will get this warning.

00:48:40.810 --> 00:48:43.620
And it says, it's 10.2 nib file.

00:48:43.620 --> 00:48:45.040
It will require data loss.

00:48:45.040 --> 00:48:46.790
It will result in data loss.

00:48:46.800 --> 00:48:48.720
And I'll say show incompatibilities.

00:48:48.900 --> 00:48:52.600
And this panel here actually-- let
me see if I can magnify in on this.

00:48:52.600 --> 00:48:53.290
Yeah, there we go.

00:48:53.440 --> 00:48:56.320
So this panel here tells
you the critical losses.

00:48:56.350 --> 00:48:59.280
Basically, this nib won't even
open in the old system.

00:48:59.280 --> 00:49:02.020
And also the losses, like, well,
you won't get all the new

00:49:02.020 --> 00:49:03.360
background colors or whatever.

00:49:03.440 --> 00:49:05.640
So at this point,
you can choose to delete those

00:49:05.640 --> 00:49:11.100
incompatibilities or save
the file in the new format.

00:49:11.100 --> 00:49:12.380
OK, so let's see.

00:49:12.410 --> 00:49:14.600
What time is it?

00:49:14.610 --> 00:49:17.450
Yeah,
I think maybe I'll let Chris come in.

00:49:17.460 --> 00:49:22.180
So I'm not going to go to the
rest of the demo at this point.

00:49:22.300 --> 00:49:25.880
Can we switch back to the-- slides,
please?

00:49:25.880 --> 00:49:26.800
There's my clicker.

00:49:26.800 --> 00:49:28.480
There we go.

00:49:30.200 --> 00:49:34.170
Okay, the last thing I want to talk about
before I invite Chris Parker to stage,

00:49:34.170 --> 00:49:38.480
oh, there's a demo, is this NSNib class.

00:49:38.500 --> 00:49:42.480
And it's a new class representing
an interface builder nib file.

00:49:42.480 --> 00:49:45.810
The APIs we had before for
nib files was all load the nib

00:49:45.810 --> 00:49:49.620
from disk and there you go,
load it from disk.

00:49:49.620 --> 00:49:52.580
We've gotten requests to allow loading
them from memory for performance

00:49:52.580 --> 00:49:54.530
reasons especially or for other reasons.

00:49:54.530 --> 00:49:57.410
You might want to save nibs
as flattened data somewhere.

00:49:57.560 --> 00:49:59.840
So basically, there's an NSNib class.

00:49:59.930 --> 00:50:01.800
You can init it with
the contents of a URL,

00:50:01.800 --> 00:50:05.060
so load it from the file system
and you can instantiate it over and

00:50:05.060 --> 00:50:06.820
over while keeping it in memory.

00:50:06.820 --> 00:50:08.880
Or if you want,
you can load it from somewhere

00:50:08.880 --> 00:50:10.960
else and instantiate it many times.

00:50:11.020 --> 00:50:12.610
For instance,
if you have a nib that occurs

00:50:12.610 --> 00:50:14.910
many times in your window,
you don't have to load it from the

00:50:15.020 --> 00:50:16.360
file system over and over again.

00:50:16.400 --> 00:50:20.280
The other cool thing about NSNib is that
these can be archived and unarchived.

00:50:20.280 --> 00:50:23.450
So the whole NSNib object can
be archived and it represents

00:50:23.480 --> 00:50:25.220
that nib file in its resources.

00:50:25.220 --> 00:50:27.390
So it's a pretty powerful concept.

00:50:27.530 --> 00:50:29.140
You still--I mean,
you don't have to use this if you're

00:50:29.140 --> 00:50:32.320
just loading a nib file from your
resources like you normally do,

00:50:32.470 --> 00:50:34.980
but for more advanced usage,
this is the place to look.

00:50:36.250 --> 00:50:39.060
Okay, so that's it for the AppKit update.

00:50:39.130 --> 00:50:40.640
I hope I've left you enough time.

00:50:40.640 --> 00:50:42.230
This is Chris Parker,
who is an engineer in the

00:50:42.300 --> 00:50:43.200
Cocoa Frameworks group.

00:50:43.210 --> 00:50:44.200
Thank you, sir.

00:50:49.910 --> 00:50:50.880
Thank you.

00:50:50.900 --> 00:50:51.300
My name is Chris Parker.

00:50:51.300 --> 00:50:53.550
I'm an engineer in the
Cocoa frameworks group,

00:50:53.550 --> 00:50:55.300
and we're going to be talking
about the stuff that we've

00:50:55.300 --> 00:50:56.900
added to Foundation this year.

00:50:56.900 --> 00:50:58.850
First up,
we've added some new language features.

00:50:58.940 --> 00:51:01.980
There's a new exception
mechanism in Foundation,

00:51:02.000 --> 00:51:05.900
and it's a Java-style exception
mechanism that includes a finally clause.

00:51:05.900 --> 00:51:08.900
So you get @catch, @try, and @finally.

00:51:08.900 --> 00:51:12.030
It's binary compatible with the old one,
and it automatically does

00:51:12.040 --> 00:51:14.950
a few things for you,
like bring variables up to volatile,

00:51:14.950 --> 00:51:16.900
so that when you throw the exception,
things actually work right.

00:51:16.900 --> 00:51:23.040
It deals with return statements,
and it actually handles continue, break,

00:51:23.040 --> 00:51:24.900
and go to correctly.

00:51:24.900 --> 00:51:24.900
So, once upon a time,

00:51:25.300 --> 00:51:28.200
You would have written something
like this using the NSDuring

00:51:28.200 --> 00:51:29.440
macro and stuff like that.

00:51:29.440 --> 00:51:33.480
Now we're actually asking you to
write things like this using @try.

00:51:33.490 --> 00:51:35.540
You can return the object directly.

00:51:35.570 --> 00:51:37.870
There's a catch for exceptions.

00:51:40.900 --> 00:51:44.890
You can actually have multiple
catch statements here,

00:51:44.900 --> 00:51:48.360
so as you get more
specific ones up front,

00:51:48.360 --> 00:51:50.900
you can fall through to the
more general exception class.

00:51:50.900 --> 00:51:54.890
There's also a synchronization
mechanism now in Foundation.

00:51:54.990 --> 00:51:55.900
It's a new statement.

00:51:55.900 --> 00:51:58.070
You can synchronize on
any object individually,

00:51:58.080 --> 00:52:00.900
and it will clear any locks that
you've held above the catch point

00:52:00.900 --> 00:52:01.900
if you throw an exception in there.

00:52:01.900 --> 00:52:03.890
So this is the synchronized object.

00:52:03.900 --> 00:52:06.780
We don't have a synchronized
method specifier,

00:52:06.780 --> 00:52:09.880
so you can only do it
on individual objects.

00:52:09.930 --> 00:52:13.390
And actually, for the exception stuff,
we don't have a throws clause

00:52:13.560 --> 00:52:16.980
that you can put on methods,
so you still have to manage

00:52:17.030 --> 00:52:19.100
that yourself in a way.

00:52:19.640 --> 00:52:21.640
We've made some changes
now to key value coding,

00:52:21.710 --> 00:52:26.100
both to improve key value coding and
support the new bindings API better.

00:52:26.120 --> 00:52:29.500
And this is some of the older API that
we've had in place has been deprecated

00:52:29.500 --> 00:52:32.060
and there's a category in the binding
header that'll show you which,

00:52:32.060 --> 00:52:34.190
or the coding header rather,
which will tell you

00:52:34.190 --> 00:52:35.600
which methods those are.

00:52:35.610 --> 00:52:37.700
We've also got some new more
consistently named methods and

00:52:37.740 --> 00:52:39.050
some new things you can do with it.

00:52:39.100 --> 00:52:43.340
So you can actually set values for
keys now using this new method and then

00:52:43.350 --> 00:52:45.600
also you can validate values for keys.

00:52:45.600 --> 00:52:50.570
And if something does go wrong in
validating a particular value for a key,

00:52:50.580 --> 00:52:53.780
we actually give you a way to
report a new NSError back and

00:52:53.780 --> 00:52:55.600
we'll get to that in a few minutes.

00:52:55.600 --> 00:52:59.610
And there's also some methods for
dealing with getting whole arrays out

00:52:59.610 --> 00:53:03.600
for given keys if you send a value
for key message to a mutable array.

00:53:03.600 --> 00:53:05.490
And for all of these methods,
there are also key

00:53:05.490 --> 00:53:07.360
path variants of these,
so if you need to go

00:53:07.360 --> 00:53:09.790
deeper into collections,
you can get back more

00:53:09.790 --> 00:53:11.600
information out from that.

00:53:11.600 --> 00:53:15.600
There's also a new API for
undefined keys and nil values.

00:53:15.600 --> 00:53:19.410
This lets you be able to set things
up for your own objects where you can

00:53:19.410 --> 00:53:21.560
specify values for undefined keys.

00:53:21.710 --> 00:53:25.520
You can set values for undefined
keys and you can also set what

00:53:25.530 --> 00:53:27.600
the nil value is going to be.

00:53:29.400 --> 00:53:32.760
New categories on NSArray and
NSDictionary for value for key,

00:53:32.760 --> 00:53:36.630
as well as on NSMutableArray for doing
set value and getting values for keys.

00:53:36.760 --> 00:53:40.630
There are extremely detailed comments,
thanks to Mark Picciarelli,

00:53:40.790 --> 00:53:45.440
in NSKeyValueCoding.h and the companion
that we'll talk about in a minute.

00:53:45.560 --> 00:53:47.930
And it talks about how to modify
the behavior for this if you

00:53:47.930 --> 00:53:51.100
want to change how it works
or implement your own methods,

00:53:51.100 --> 00:53:53.760
and that's definitely good reading.

00:53:53.920 --> 00:53:57.030
For key value observing now,
this is part of how the

00:53:57.030 --> 00:53:58.810
bindings mechanism works.

00:53:59.130 --> 00:54:01.260
You can register objects for
notifications about value

00:54:01.260 --> 00:54:03.400
changes on given key paths.

00:54:03.540 --> 00:54:08.220
For NSObject and subclasses,
you use this AddObserver for key path,

00:54:08.350 --> 00:54:09.990
specifying some options,
and you can specify your

00:54:09.990 --> 00:54:12.360
own context pointer,
which you'll get back later.

00:54:12.510 --> 00:54:16.050
For NSArrays, you should use AddObserver
to objects and indexes,

00:54:16.050 --> 00:54:17.620
specifying an index set.

00:54:17.760 --> 00:54:21.110
This is much more efficient than
pinging the AddObserverForKeyPath

00:54:21.210 --> 00:54:23.060
method over and over and over again.

00:54:23.060 --> 00:54:23.060
And again,
you should use AddObserver for key path,

00:54:23.060 --> 00:54:23.060
specifying some options,
and you can specify your

00:54:23.060 --> 00:54:23.060
own context pointer,
which you'll get back later.

00:54:23.060 --> 00:54:23.060
For NSArrays, you should use AddObserver
to objects and indexes,

00:54:23.060 --> 00:54:23.060
specifying an index set.

00:54:23.060 --> 00:54:23.060
This is much more efficient than
pinging the AddObserverForKeyPath

00:54:23.060 --> 00:54:23.060
method over and over and over again.

00:54:23.190 --> 00:54:25.310
And again,
you specify some options about what

00:54:25.310 --> 00:54:28.960
kinds of things you want to get
notifications for in the context pointer.

00:54:29.080 --> 00:54:31.180
What you'll get...

00:54:34.330 --> 00:54:35.200
There we go.

00:54:35.380 --> 00:54:36.820
Is this.

00:54:36.820 --> 00:54:39.940
The observer object will receive
an observed value for key path

00:54:40.170 --> 00:54:43.170
of object with the change and
NSDictionary representing the

00:54:43.170 --> 00:54:46.440
change and your context pointer
that you passed in before.

00:54:46.440 --> 00:54:49.200
So you can attach your own
information to these notifications.

00:54:49.200 --> 00:54:51.760
Observer notifications
can be either automatic.

00:54:51.800 --> 00:54:52.920
You can set it up.

00:54:53.210 --> 00:54:55.740
You use our methods and we do it for you.

00:54:55.760 --> 00:54:59.130
Or you can actually drive
the machinery by hand.

00:54:59.130 --> 00:55:01.970
And there are more notes on that in
the key value observing dot h header.

00:55:03.030 --> 00:55:05.380
In order to make some
of this work for large,

00:55:05.380 --> 00:55:07.780
potentially sparse sets,
we've got this new thing

00:55:07.780 --> 00:55:09.400
called an NSIndexSet.

00:55:09.400 --> 00:55:11.990
And it's a way to do really efficient,
fast storage of large

00:55:11.990 --> 00:55:13.400
numbers of unsigned integers.

00:55:13.400 --> 00:55:16.540
And you create one of these basically
by specifying either an individual

00:55:16.630 --> 00:55:17.900
index or an index in a range.

00:55:17.900 --> 00:55:21.400
You can test to see whether or
not indexes exist inside the set.

00:55:21.590 --> 00:55:24.890
You can do all kinds of
intersection work with it.

00:55:24.900 --> 00:55:29.400
You can find out whether you
intersect indexes in a range.

00:55:29.550 --> 00:55:32.000
Retrieving indexes,
you can pick out the first index and then

00:55:32.000 --> 00:55:36.400
you can iterate up through them to find
out what indexes are actually in the set.

00:55:36.400 --> 00:55:38.820
And this ties in with a bunch
of stuff for table view,

00:55:38.820 --> 00:55:41.400
for pulling out selected
items and stuff like that.

00:55:41.400 --> 00:55:43.500
There's a mutable variant so
that once you create this,

00:55:43.500 --> 00:55:45.400
you can actually push
indexes in and out of it.

00:55:45.400 --> 00:55:49.360
You can add indexes or remove indexes
by range or by entire index set.

00:55:49.440 --> 00:55:51.400
So you can specify, "Oh,
I've got this index set.

00:55:51.400 --> 00:55:54.990
I want to take all the indexes
in this other one out." Right?

00:55:55.000 --> 00:55:56.720
So it's fairly powerful.

00:55:57.330 --> 00:55:58.520
Sort descriptors.

00:55:58.520 --> 00:56:00.660
You want to be able to
do this for table views.

00:56:00.660 --> 00:56:04.880
You set up an array of sort descriptors
and that describes a sort ordering.

00:56:04.910 --> 00:56:07.800
And these can also be used
for comparing objects.

00:56:07.800 --> 00:56:09.850
You can specify one
object and another object.

00:56:09.850 --> 00:56:12.320
They'll tell you what the
comparison result is based

00:56:12.320 --> 00:56:14.040
on those sort descriptors.

00:56:14.060 --> 00:56:17.630
You can also create sorted arrays from
NSArrays and you can pick out--you can

00:56:17.630 --> 00:56:21.620
take an NS mutable array and basically
hand it the sort descriptor and say,

00:56:21.620 --> 00:56:22.790
"Sort yourself."

00:56:26.520 --> 00:56:27.500
Here we go.

00:56:27.500 --> 00:56:30.260
Value transformers, again,
another part of the bindings API.

00:56:30.340 --> 00:56:32.930
This actually allows you to return
a new object for some kind of given

00:56:32.930 --> 00:56:36.120
value and it lets you shift it
over into this other object type.

00:56:36.180 --> 00:56:38.590
So it will return you the same
type or different type with

00:56:38.590 --> 00:56:41.320
a--you can do it either way.

00:56:41.320 --> 00:56:43.940
You can transform a value and
if it's a reversible transform,

00:56:43.940 --> 00:56:48.460
you can actually set it up to
hand you back the old value.

00:56:48.460 --> 00:56:51.420
You create these yourselves by
subclassing and then you can

00:56:51.450 --> 00:56:55.230
register that subclass by--you
can register it by name so you can

00:56:55.310 --> 00:56:56.410
get it back easily with the class.

00:56:56.480 --> 00:56:59.860
And we've actually provided a bunch
of them for you for doing things

00:56:59.860 --> 00:57:05.100
like negating booleans and nil
transforms or not nil and being able

00:57:05.100 --> 00:57:06.600
to pick things up from archives.

00:57:06.600 --> 00:57:10.060
So, you know, basically everybody's been
asking for that category in

00:57:10.090 --> 00:57:11.870
NSU user defaults to do colors.

00:57:11.870 --> 00:57:13.470
You can do it with this too.

00:57:17.670 --> 00:57:18.580
There we go.

00:57:18.670 --> 00:57:22.920
NSError is a new public class for
being able to specify errors flexibly.

00:57:22.920 --> 00:57:25.400
You can attach your own information to
these things so that they can bubble

00:57:25.410 --> 00:57:29.720
up through and you can actually put
NSErrors inside of other NSErrors.

00:57:29.720 --> 00:57:32.170
You create one by specifying
a domain using a string.

00:57:32.170 --> 00:57:36.060
And we've specified a number of
different error domains in the headers

00:57:36.070 --> 00:57:38.980
for things in Foundation and in the kit.

00:57:38.980 --> 00:57:41.880
You specify an error code from within
that domain and then your dictionary.

00:57:41.880 --> 00:57:43.740
And there are accessors for
all of these things as well

00:57:43.740 --> 00:57:45.260
as a localized description.

00:57:45.370 --> 00:57:47.690
And you should use the localized
description to be able to provide

00:57:47.690 --> 00:57:50.950
a meaningful string to your
users when it comes up in the UI.

00:57:50.960 --> 00:57:56.960
NSXML parser after popular demand.

00:58:01.820 --> 00:58:03.500
You can set one of these up from a URL.

00:58:03.500 --> 00:58:07.750
If you need to do it from a file,
you can use a file URL or existing data.

00:58:07.910 --> 00:58:10.040
And you assign a delegate and
the delegate basically just

00:58:10.110 --> 00:58:12.620
implements only the messages
that it's actually interested in.

00:58:12.620 --> 00:58:15.800
You'll get things like starting
document or did start element.

00:58:15.870 --> 00:58:17.860
You'll get some namespace information.

00:58:17.860 --> 00:58:21.300
You'll get, you know,
you can do found comments,

00:58:21.300 --> 00:58:22.790
stuff like that.

00:58:23.290 --> 00:58:26.950
We've also added NSStream to Foundation.

00:58:26.950 --> 00:58:29.820
This is NSInputStream and
NSOutputStreamer for reading and writing.

00:58:29.970 --> 00:58:32.190
They're toll-free bridged
into their CF equivalents.

00:58:32.220 --> 00:58:35.810
So you can take one of these things
and pass it right into the CF APIs that

00:58:35.810 --> 00:58:37.890
take read streams or write streams.

00:58:38.160 --> 00:58:41.600
The network streams support basically
everything that the CF version does.

00:58:41.600 --> 00:58:43.910
Secure sockets, proxies, stuff like that.

00:58:43.920 --> 00:58:45.660
You can also do file and memory streams.

00:58:45.660 --> 00:58:46.950
And these are subclassable.

00:58:47.040 --> 00:58:49.950
So if you need to do your
own kinds of streams and pass

00:58:49.950 --> 00:58:53.450
them into the CF flavors,
you can subclass NSInputStream and

00:58:53.450 --> 00:58:56.090
NSOutputStream and they'll just work.

00:58:56.310 --> 00:59:02.800
For NS Input Stream,
you can set them up with

00:59:02.890 --> 00:59:04.930
data or with a file at path.

00:59:04.930 --> 00:59:08.480
And you just read it for a
given anticipated length.

00:59:08.580 --> 00:59:10.230
You'll get back the
length you actually read.

00:59:10.310 --> 00:59:13.520
You can get a buffer in order one,
so that it's basically as

00:59:13.600 --> 00:59:15.300
fast as we can hand it to you.

00:59:15.300 --> 00:59:18.660
Or you can test to see if there
are bytes available on the stream.

00:59:18.660 --> 00:59:21.930
NS Output Stream, for writing stuff out,
you can write out to

00:59:21.930 --> 00:59:23.210
fixed length buffers.

00:59:23.280 --> 00:59:26.830
You can write out to a growing
memory buffer or to a file at a path.

00:59:26.850 --> 00:59:29.420
Same kind of thing,
you write a specific length.

00:59:29.420 --> 00:59:30.900
You get back how much you actually wrote.

00:59:30.900 --> 00:59:33.660
And you can check to
see if it's available.

00:59:33.680 --> 00:59:36.660
We've also set it up so you
can get streams to hosts.

00:59:36.660 --> 00:59:37.100
Right?

00:59:37.210 --> 00:59:41.660
So grab a pair of network streams so
you can read and write to these things.

00:59:41.660 --> 00:59:43.660
If you don't want one,
you pass them in by reference.

00:59:43.660 --> 00:59:45.420
If you don't want one, pass nil.

00:59:45.660 --> 00:59:47.620
You'll have to schedule these
things in order to get events.

00:59:47.660 --> 00:59:48.660
If you don't want to pull them in,
you can do that by sending

00:59:48.660 --> 00:59:48.660
them to the server.

00:59:48.670 --> 00:59:50.660
If you don't want to pull the
stream constantly for events,

00:59:50.660 --> 00:59:55.220
you can schedule it to get events off of
these things and write in the run loop.

00:59:55.220 --> 00:59:57.350
And once you've done that,
you assign a delegate and your

00:59:57.350 --> 01:00:00.340
delegate will get one of these stream
handle event messages that will say,

01:00:00.340 --> 01:00:04.250
"Hey, this stream just had this thing
happen to it." So you've got open,

01:00:04.250 --> 01:00:07.430
whether or not it's got bytes
available or you can write to it,

01:00:07.430 --> 01:00:10.210
whether an error occurred,
that kind of thing.

01:00:10.800 --> 01:00:12.180
Streams.

01:00:12.180 --> 01:00:20.410
And, oh, there are properties too for
setting things like whether or

01:00:20.420 --> 01:00:25.160
not you got stuff back out or,
you know,

01:00:25.160 --> 01:00:25.710
out of a memory stream or if you
want to set up your SOX proxies,

01:00:25.710 --> 01:00:25.710
what level of security you want.

01:00:25.710 --> 01:00:25.710
Basically, all that good stuff.

01:00:25.790 --> 01:00:30.240
In that line, there have been a number
of enhancements to NSURL,

01:00:30.240 --> 01:00:33.450
as well as the class itself,
as well as a number of new classes.

01:00:33.510 --> 01:00:34.690
This is a short list.

01:00:34.700 --> 01:00:36.820
You should probably go look at the
Foundation headers for this stuff.

01:00:37.030 --> 01:00:40.520
There will be another
session about this later on,

01:00:40.730 --> 01:00:42.700
probably today and tomorrow.

01:00:42.700 --> 01:00:43.160
There's one tomorrow.

01:00:44.520 --> 01:00:46.950
There's a text URL request to represent
what you want to get off the wire,

01:00:46.960 --> 01:00:48.840
the response for what
you actually got back.

01:00:48.870 --> 01:00:52.210
There's stuff to specify
caching policies for downloading

01:00:52.430 --> 01:00:54.520
URLs once you've got it on disk.

01:00:54.520 --> 01:00:57.280
Connections and downloads for
getting things either right

01:00:57.280 --> 01:00:58.760
into data or right down to disk.

01:00:58.760 --> 01:01:01.890
And then also NSURL protocol so
you can define your own if you

01:01:02.120 --> 01:01:03.980
want to support new URL types.

01:01:04.070 --> 01:01:07.870
There is a modest technology
demo on all of your hard drives.

01:01:08.010 --> 01:01:09.110
Here's a screenshot.

01:01:09.220 --> 01:01:10.520
Okay.

01:01:10.530 --> 01:01:14.520
These are the same APIs that the
Safari guys use to get all of their data.

01:01:14.520 --> 01:01:16.430
They're working off the network.

01:01:16.530 --> 01:01:18.800
So as they improve it
and they get faster,

01:01:18.800 --> 01:01:20.920
you guys improve and you get faster.

01:01:20.920 --> 01:01:24.520
So there is another session
about this much later in the day.

01:01:24.520 --> 01:01:28.110
So to wrap up,
Jason Guy is going to come up.

01:01:28.110 --> 01:01:30.270
He's going to sprint up.

01:01:34.650 --> 01:01:35.040
Thanks, Chris.

01:01:35.040 --> 01:01:40.720
So we're going to have a QA shortly,
so if you guys want to queue

01:01:41.070 --> 01:01:43.100
up behind the microphones,
that'll be great.

01:01:43.240 --> 01:01:45.930
In the meantime,
let me do a quick roadmap for you all.

01:01:45.940 --> 01:01:48.720
Go to all of our Cocoa sessions.

01:01:48.720 --> 01:01:50.170
Lots of really great stuff.

01:01:50.330 --> 01:01:52.540
The UI programming session 4.12.

01:01:52.540 --> 01:01:55.680
Late it's day, right here, 3.30.

01:01:55.680 --> 01:01:58.650
You'll get a lot of really great
information on using the new

01:01:58.650 --> 01:02:00.540
bindings that we've introduced.

01:02:00.540 --> 01:02:07.450
Later on in the week, Friday morning,
session 4.19 at 9 o'clock.

01:02:07.640 --> 01:02:10.220
We'll go really in-depth,
so you'll see all the APIs.

01:02:10.220 --> 01:02:15.480
If you're interested in 2D drawing
techniques or you want to see some really

01:02:15.480 --> 01:02:22.540
great tips and tricks for things that
we've done in iChat or iTunes and so on,

01:02:22.540 --> 01:02:24.010
you should really go to that.

01:02:24.080 --> 01:02:28.040
Take a great look at how we've used
the APIs and how you can use the APIs.

01:02:28.040 --> 01:02:29.240
Lots of code will be in there.

01:02:29.240 --> 01:02:31.840
The tech session is the
last session on Friday,

01:02:31.840 --> 01:02:32.670
5 o'clock.

01:02:33.080 --> 01:02:35.060
The really hardcore
Cocoa folks will be there,

01:02:35.060 --> 01:02:36.400
so I know you'll all be there.

01:02:36.400 --> 01:02:40.320
And you missed the first session.

01:02:40.320 --> 01:02:42.660
Some of you probably did, item 400.

01:02:42.710 --> 01:02:45.590
But you'll be getting the DVDs,
so you can watch it again.

01:02:45.600 --> 01:02:48.120
And, of course, the feedback forum,
very important.

01:02:48.180 --> 01:02:49.600
We need to hear from you guys.

01:02:49.600 --> 01:02:53.220
To that note,
if you want to send feedback,

01:02:53.220 --> 01:02:54.580
start with John Galenzi.

01:02:54.580 --> 01:02:56.340
He's the manager of software evangelism.

01:02:56.340 --> 01:02:59.940
He's the one who takes the stuff you
guys ask for and makes them do it.

01:03:00.080 --> 01:03:04.260
If you have API feedback,
specific things you

01:03:04.260 --> 01:03:07.390
want to see in the APIs,
send it to coco-feedback

01:03:07.460 --> 01:03:09.500
at group.apple.com.

01:03:09.500 --> 01:03:13.840
And if you have technical
questions on how to use the API,

01:03:13.840 --> 01:03:16.060
send it to my team,
developer technical support,

01:03:16.060 --> 01:03:16.940
and we'll help you out.

01:03:17.130 --> 01:03:20.200
And as Ali noted,
we need a name for that switcher thing.

01:03:20.200 --> 01:03:24.790
If you have ideas,
it's namethatclass at group.apple.com.

01:03:24.800 --> 01:03:29.240
We've got some great documentation,
improving all the time.

01:03:29.240 --> 01:03:33.040
The API stuff will be
documented in the next few days.

01:03:33.040 --> 01:03:37.020
We won't put documentation
forthcoming on there,

01:03:37.020 --> 01:03:37.370
will we?

01:03:37.380 --> 01:03:37.920
Okay.