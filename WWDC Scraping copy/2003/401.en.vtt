WEBVTT

00:00:28.690 --> 00:00:29.870
Testing.

00:00:29.870 --> 00:00:30.600
Hello.

00:00:30.600 --> 00:00:32.010
Do I get introduced?

00:00:32.050 --> 00:00:36.150
I guess not.

00:00:36.920 --> 00:00:39.820
All right, guys,
you're going to get me in trouble.

00:00:39.870 --> 00:00:40.700
I'm Sal Soghoian.

00:00:40.700 --> 00:00:43.150
I'm the AppleScript product
manager for Apple Computer,

00:00:43.150 --> 00:00:44.800
and thank you for coming here today.

00:00:44.800 --> 00:00:46.770
Thank you for coming to San Francisco.

00:00:46.780 --> 00:00:50.720
Thank you for being a part of this
revolution that's going on right now.

00:00:50.720 --> 00:00:53.680
And I really appreciate you being here,
and the AppleScript team

00:00:53.730 --> 00:00:55.020
appreciates it as well.

00:00:56.440 --> 00:01:00.040
I first fell in love with
AppleScript back in 1992

00:01:00.040 --> 00:01:04.200
when I got the developer CD,
and I saw that there was the ability

00:01:04.530 --> 00:01:09.770
for a normal schmo to be able to make
the computer do what I wanted it to do.

00:01:09.780 --> 00:01:12.900
And the vision I had then was
to be able to create automation

00:01:13.160 --> 00:01:16.710
and workflows where I could take
information from one program,

00:01:16.710 --> 00:01:19.200
manipulate it,
move it to another program,

00:01:19.300 --> 00:01:23.080
take that and move it to another
program and build something.

00:01:23.080 --> 00:01:26.080
And in the decade following,
that vision happened.

00:01:26.440 --> 00:01:27.830
And the development of the
system has not dimmed at all.

00:01:27.840 --> 00:01:30.640
And matter of fact,
it has grown considerably.

00:01:30.660 --> 00:01:35.250
As you saw today is the pinnacle
of what we've been able to do with

00:01:35.250 --> 00:01:39.420
our new Xcode and AppleScript's
integration as a peer language with

00:01:39.420 --> 00:01:43.260
Objective-C and Java as a development
language in the operating system.

00:01:43.260 --> 00:01:46.050
It's unparalleled in what it can do now.

00:01:46.060 --> 00:01:49.780
We have access into all the system APIs.

00:01:49.840 --> 00:01:51.160
We can call the command line.

00:01:51.160 --> 00:01:52.360
We can do web services.

00:01:52.400 --> 00:01:55.050
We have the interface,
and we can even control the

00:01:55.050 --> 00:01:56.420
UI elements of AppleScript.

00:01:56.440 --> 00:01:58.410
We can do applications
that aren't scriptable.

00:01:58.490 --> 00:02:02.010
So it's been quite an adventure,
and it's progressing on and

00:02:02.010 --> 00:02:03.790
going even farther every day.

00:02:03.800 --> 00:02:06.420
But instead of me giving
you this overview,

00:02:06.420 --> 00:02:10.520
I'm going to introduce someone who
is new to the AppleScript team.

00:02:10.520 --> 00:02:13.850
He's leading the team now,
and he's doing an incredible job,

00:02:13.850 --> 00:02:17.300
as you're seeing in Panther,
of delivering more and more

00:02:17.300 --> 00:02:21.880
tools and abilities to you,
our AppleScript customers.

00:02:21.880 --> 00:02:23.380
So I'd like to introduce Mr.

00:02:23.380 --> 00:02:24.320
Todd Fernandez.

00:02:24.410 --> 00:02:25.480
And please come on up, Todd.

00:02:25.480 --> 00:02:25.980
Thank you.

00:02:26.440 --> 00:02:28.440
How is this thing not working?

00:02:28.440 --> 00:02:30.690
Thanks a lot, Sal.

00:02:34.400 --> 00:02:35.390
Well, good afternoon.

00:02:35.390 --> 00:02:37.600
The clicker seems to be
a little haywire today,

00:02:37.600 --> 00:02:42.010
but eventually, perhaps we'll get a
slide with my name on it.

00:02:46.510 --> 00:02:47.360
There we go.

00:02:47.380 --> 00:02:47.720
All right.

00:02:47.820 --> 00:02:48.600
Well, good afternoon.

00:02:48.600 --> 00:02:50.630
Welcome to Session 401,
AppleScript Update.

00:02:50.640 --> 00:02:53.410
As Sal has done that
gracious introduction,

00:02:53.410 --> 00:02:54.860
I'm Todd Fernandez.

00:02:54.860 --> 00:02:57.740
I'm the relatively new
AppleScript Engineering Manager,

00:02:57.740 --> 00:03:00.350
and I'm very pleased to be here
with you today to talk to you and

00:03:00.460 --> 00:03:03.360
show you a lot of the great new
work we've been doing for Panther.

00:03:03.360 --> 00:03:07.680
Now, I know a lot of you have been coming
to WWDC for years and have been

00:03:07.680 --> 00:03:11.360
working with AppleScript for years,
and are probably wondering who

00:03:11.360 --> 00:03:15.090
I am and what I'm doing up here,
since for the last five years running,

00:03:15.320 --> 00:03:17.160
Chris Espinoza has been
presenting this session.

00:03:17.160 --> 00:03:20.020
And in fact, last year,
both presenters were named Chris.

00:03:20.020 --> 00:03:21.800
So I'll tell you what I'm going to do.

00:03:21.920 --> 00:03:25.120
To make everybody feel more comfortable,
you can call me Chris.

00:03:26.980 --> 00:03:30.010
I'll respond, Todd, Chris, whatever.

00:03:30.010 --> 00:03:31.460
So now that we've gotten
that out of the way,

00:03:31.460 --> 00:03:33.610
let's get started.

00:03:35.330 --> 00:03:36.420
So here's our agenda.

00:03:36.420 --> 00:03:38.420
We'll go through a brief introduction.

00:03:38.420 --> 00:03:41.720
I'll make sure we bring everybody
up to date on what's happened since

00:03:41.720 --> 00:03:45.040
the last time we were here together,
and then spend the bulk of the

00:03:45.040 --> 00:03:48.240
presentation going over the many
new features and enhancements

00:03:48.290 --> 00:03:49.950
we've got cooking for Panther.

00:03:53.000 --> 00:03:55.580
This thing is really finicky.

00:03:55.640 --> 00:03:58.990
All right.

00:03:59.060 --> 00:04:02.550
So the first thing I want to
do is go over the three things

00:04:02.550 --> 00:04:04.750
that I hope that you all take
away from this session today.

00:04:05.000 --> 00:04:08.310
First of all,
what are the changes that we're

00:04:08.720 --> 00:04:11.940
making in Panther for AppleScript?

00:04:11.950 --> 00:04:14.370
Secondly, and more importantly,
how you can take advantage of them to

00:04:14.370 --> 00:04:14.370
improve your scripts and applications.

00:04:14.560 --> 00:04:17.000
And something that
Sal just was talking about,

00:04:17.000 --> 00:04:21.500
and which I hope you saw in the keynote
and Steve using it for his demo,

00:04:21.500 --> 00:04:24.710
that all the changes we're making,
all of the work that you're

00:04:24.710 --> 00:04:27.980
doing with your scripts,
enhancing your scriptable applications.

00:04:28.060 --> 00:04:31.000
Hopefully there are people here
with newly scriptable applications.

00:04:31.040 --> 00:04:37.900
We really feel there's a lot of momentum
building behind AppleScript on Mac OS X,

00:04:37.900 --> 00:04:39.390
and we hope that we can share our
excitement with you during this session.

00:04:39.730 --> 00:04:43.040
and what I really want to do
is thank all of you because the

00:04:43.040 --> 00:04:46.410
community is one of the things
that makes AppleScript so great.

00:04:46.560 --> 00:04:50.940
And all the work we're doing,
combining with all the work you're doing,

00:04:50.940 --> 00:04:53.480
to solve problems for our customers.

00:04:53.900 --> 00:08:13.700
[Transcript missing]

00:08:20.710 --> 00:08:21.980
Thanks very much, Sal.

00:08:21.990 --> 00:08:27.480
And I'd like to continue by going over
the version history of AppleScript so

00:08:27.480 --> 00:08:31.810
we're up to speed with where we are.

00:08:31.850 --> 00:08:32.960
It's been a busy couple of years.

00:08:32.960 --> 00:08:36.280
You're going to see a whole lot of
releases we've done since the release

00:08:36.280 --> 00:08:38.640
of Mac OS X a little over two years ago.

00:08:40.080 --> 00:08:42.550
We shipped AppleScript 1.6
alongside with the initial release

00:08:42.550 --> 00:08:47.480
of AppleScript of Mac OS X,
followed by version 1.7 with

00:08:47.480 --> 00:08:51.830
Mac OS X 10.1 and for Mac OS 9 as well.

00:08:52.700 --> 00:08:56.530
We then shipped AppleScript 1.8 with
the December 2001 developer tools,

00:08:56.530 --> 00:09:01.100
and a series of updates after that,
culminating in AppleScript 1.8.3,

00:09:01.100 --> 00:09:05.910
which was an independent software
update for both Mac OS 9 and Mac OS X.

00:09:06.420 --> 00:09:10.290
Last year at the conference,
we were talking about AppleScript 1.9,

00:09:10.360 --> 00:09:13.840
which in fact we shipped with Jaguar,
Mac OS X 10.2.

00:09:13.840 --> 00:09:18.900
We shipped a significant update
late last year as AppleScript 1.9.1

00:09:18.900 --> 00:09:23.230
in the Mac OS X 10.2.3 update,
and then the Script Editor 2

00:09:23.230 --> 00:09:27.080
and System Events betas with
the December 2002 developer

00:09:27.140 --> 00:09:28.600
tools late last year.

00:09:28.980 --> 00:09:32.220
So that brings us up to date with
where we are with AppleScript,

00:09:32.560 --> 00:09:35.160
and I'm pleased to announce
today we're going to be shipping,

00:09:35.160 --> 00:09:40.580
if the clicker will cooperate,
AppleScript 1.9.2 with Panther.

00:09:40.580 --> 00:09:42.740
Now, you might look at the version
number there and think,

00:09:42.830 --> 00:09:45.100
well, gosh, they must not have
been working very hard.

00:09:45.100 --> 00:09:46.560
It's just a minor release.

00:09:46.560 --> 00:09:49.890
But we're just conserving
version numbers.

00:09:49.890 --> 00:09:52.150
We, in fact,
have done an awful lot of work,

00:09:52.210 --> 00:09:53.810
which we'll go through now.

00:09:58.080 --> 00:09:59.820
If we can actually get
the clicker to work.

00:09:59.930 --> 00:10:02.560
So let's dive right in and
start talking about what we've

00:10:02.560 --> 00:10:04.330
been working on for Panther.

00:10:05.930 --> 00:10:07.760
go through four separate areas.

00:10:07.850 --> 00:10:09.980
We're going to talk about
some new formats for saving

00:10:09.980 --> 00:10:12.100
your scripts in applets.

00:10:12.250 --> 00:10:14.230
A long list of
scriptability enhancements,

00:10:14.230 --> 00:10:17.240
touching nearly every component
of the AppleScript system.

00:10:17.450 --> 00:10:20.960
There are a few changes to be aware of
as you move to Panther for both scripts

00:10:20.960 --> 00:10:22.890
and your scriptable applications.

00:10:23.040 --> 00:10:26.080
And then I'm going to touch
briefly on AppleScript Studio.

00:10:26.450 --> 00:10:28.200
So let's just jump right in.

00:10:28.200 --> 00:10:32.120
So you might be wondering, well,
what are these new bundle formats?

00:10:32.990 --> 00:10:35.340
and you might actually
see them someday here.

00:10:35.600 --> 00:10:36.400
All right.

00:10:36.420 --> 00:10:41.280
Well, they're a new alternative to
the data and resource fork

00:10:41.280 --> 00:10:41.280
formats you're all familiar with.

00:10:41.480 --> 00:10:46.710
They use the standard Mac OS X packaging
with script document file packages for

00:10:46.770 --> 00:10:51.830
compiled scripts and .app application
bundles for applets and droplets.

00:10:52.870 --> 00:10:54.760
Of course, they're supported by
all the standard tools.

00:10:54.760 --> 00:10:59.220
Script Editor, OSA Compile,
and StoreScript all can save and access

00:10:59.500 --> 00:11:02.140
scripts in Applets in these new formats.

00:11:02.460 --> 00:11:04.710
And in fact,
I know that a lot of you have

00:11:04.710 --> 00:11:08.670
been asking for this for years,
OSA Compile and StoreScript can

00:11:08.670 --> 00:11:12.310
now create new applets and
droplets in the new format.

00:11:13.300 --> 00:11:14.940
Yes, thank you very much.

00:11:14.990 --> 00:11:18.100
The team's worked very hard on this.

00:11:18.120 --> 00:11:22.120
However,
in order to get some of these advantages,

00:11:22.270 --> 00:11:24.700
there is a downside.

00:11:24.740 --> 00:11:28.400
Because the old AppleScript runtime
and tools on earlier versions

00:11:28.410 --> 00:11:31.000
of Mac OS X don't know anything
about these new formats,

00:11:31.100 --> 00:11:33.020
these new formats do require Panther.

00:11:33.050 --> 00:11:35.900
However,
if you do need your scripts to run

00:11:35.900 --> 00:11:40.310
on earlier versions of Mac OS X,
of course the old formats are still

00:11:40.310 --> 00:11:41.390
supported and still will be supported.

00:11:41.940 --> 00:11:44.060
However,
there are some pretty significant

00:11:44.070 --> 00:11:46.830
advantages to these new formats
that we think will make them

00:11:46.920 --> 00:11:50.660
worth your while to adopt if,
in fact, you can live with the lack

00:11:50.660 --> 00:11:52.420
of backward compatibility.

00:11:52.530 --> 00:11:54.120
They're more flexible.

00:11:54.230 --> 00:11:56.330
Applets can be moved
easily across file systems,

00:11:56.330 --> 00:11:59.770
even if the file systems don't
know anything about resource forks.

00:11:59.880 --> 00:12:03.630
This makes it easy to store large chunks
of data that your scripts depend on

00:12:03.750 --> 00:12:07.940
right as part of the script itself,
such as pictures or movies.

00:12:08.690 --> 00:12:11.840
This also enables us to save
persistent script attributes,

00:12:11.840 --> 00:12:13.600
particularly in Script Editor 2.

00:12:13.600 --> 00:12:16.280
Examples are the description
for your script and the

00:12:16.280 --> 00:12:18.320
window bounds and location,
so that every time you

00:12:18.320 --> 00:12:20.940
open your script again,
you don't have to drag it down and

00:12:20.940 --> 00:12:22.740
resize it just the way you like it.

00:12:22.990 --> 00:12:25.850
Now, in fact, Script Editor 2,
the version that's in the

00:12:25.850 --> 00:12:28.320
Panther Developer Preview,
doesn't yet do this,

00:12:28.320 --> 00:12:30.040
but it will before we ship it.

00:12:30.190 --> 00:12:31.950
Stay tuned.

00:12:32.560 --> 00:12:36.080
So, so far I've been talking about what
these new formats mean for scripters.

00:12:36.130 --> 00:12:38.930
What do they mean for
application developers?

00:12:39.030 --> 00:12:42.290
So, if your application needs
to interact directly with

00:12:42.370 --> 00:12:47.310
scripts and load and run them,
we have a set of new OS A APIs that

00:12:47.370 --> 00:12:54.640
support all the script file formats,
the new ones as well as all the old ones.

00:12:54.640 --> 00:12:54.640
So we strongly encourage you to
adopt these APIs in your application.

00:12:55.170 --> 00:12:58.430
The obvious pairs,
we have OSA load file and store

00:12:58.510 --> 00:13:01.050
file to load and store scripts.

00:13:01.230 --> 00:13:07.870
and we have a pair of convenience methods
that build on OSA load file and do with

00:13:07.870 --> 00:13:09.600
script what you need to do with them.

00:13:09.720 --> 00:13:12.930
We think that these new OSA APIs will
help you simplify your code,

00:13:12.930 --> 00:13:14.930
make it easier to read and maintain.

00:13:15.060 --> 00:13:19.080
And of course, you'll need to do this to
support the new bundle formats.

00:13:20.340 --> 00:13:24.540
So that's the new bundle formats.

00:13:24.560 --> 00:13:27.440
Let's start going through
all the enhancements we made

00:13:27.440 --> 00:13:29.040
to scriptability in Panther.

00:13:29.040 --> 00:13:31.490
And as you can see from this list,
as I mentioned earlier,

00:13:31.650 --> 00:13:34.480
we've touched almost every
component in the system.

00:13:34.480 --> 00:13:37.530
So let's start with Script Editor 2,
which hopefully many of

00:13:37.530 --> 00:13:38.420
you have seen already.

00:13:38.420 --> 00:13:40.760
We released the beta late last year.

00:13:40.770 --> 00:13:43.400
As you know,
it's a Cocoa scriptable replacement

00:13:43.550 --> 00:13:47.600
for what we understand is the
oldest remaining application that

00:13:47.600 --> 00:13:51.390
still ships as part of Mac OS X,
but no longer.

00:13:52.070 --> 00:13:54.520
So those of you who have
worked with it realize it's got

00:13:54.520 --> 00:13:56.480
some amazing new technology.

00:13:56.660 --> 00:13:58.520
Check this out.

00:14:01.030 --> 00:14:03.740
Unlike the technology
built into this clicker,

00:14:03.770 --> 00:14:07.690
it's got drag and drop.

00:14:07.720 --> 00:14:09.140
It's got find and replace.

00:14:09.220 --> 00:14:10.980
Can you believe it?

00:14:13.800 --> 00:14:16.020
They can work with
scripts larger than 32K.

00:14:16.020 --> 00:14:20.470
I don't know why anyone would want to,
but you know if you do, now you can.

00:14:21.710 --> 00:14:23.180
and hey, it's got undo.

00:14:23.400 --> 00:14:26.160
Now I'm sure no one in this
audience would ever make a mistake

00:14:26.260 --> 00:14:28.540
when they're coding their scripts,
but you know,

00:14:28.540 --> 00:14:31.130
sometimes maybe the cat walks
across the keyboard when you're

00:14:31.170 --> 00:14:32.800
getting coffee or something,
I don't know.

00:14:32.800 --> 00:14:34.420
So it's there if you need it.

00:14:34.420 --> 00:14:37.870
So more seriously though,
we're really excited about this great

00:14:38.080 --> 00:14:41.220
new tool that we're providing for you.

00:14:41.220 --> 00:14:45.140
And what we're doing,
hopefully many of you saw the demos

00:14:45.140 --> 00:14:47.980
and the sessions on the new Xcode IDE.

00:14:47.980 --> 00:14:51.400
And what we're trying to do with
Script Editor 2 is adopt some of

00:14:51.410 --> 00:14:54.590
the innovative new user interface
elements that have gone into Xcode

00:14:54.610 --> 00:14:57.340
and we're going to continue to do that
as we approach the final release of

00:14:57.340 --> 00:14:59.050
Script Editor 2 alongside with Panther.

00:15:02.700 --> 00:15:05.710
So, one great enhancement I know
you're all going to love is that

00:15:05.710 --> 00:15:09.730
we've made Open Dictionary much
faster in the new Script Editor.

00:15:11.200 --> 00:15:13.440
You're not going to believe it.

00:15:13.500 --> 00:15:17.080
There is a caveat, however,
that I'll get to later when we get to

00:15:17.230 --> 00:15:24.120
changes to be aware of for you scriptable
application developers out there.

00:15:24.120 --> 00:15:24.120
However, we told you about it last year,
so you shouldn't need to

00:15:24.120 --> 00:15:24.120
worry about it anymore.

00:15:26.600 --> 00:15:29.700
And Script Editor 2 creates new
applets in the bundle format

00:15:29.770 --> 00:15:31.560
that we just talked about.

00:15:31.750 --> 00:15:34.800
However,
it will save existing applets in the

00:15:34.800 --> 00:15:37.150
same format that they're already in.

00:15:38.280 --> 00:15:39.810
So that's Script Editor 2.

00:15:40.030 --> 00:15:42.980
Let's move on to folder actions.

00:15:42.980 --> 00:15:49.800
As you know, folder actions returned,
although it's not going

00:15:50.310 --> 00:15:53.550
to show up on the slide,
last year in Mac OS X 10.2.

00:15:53.550 --> 00:15:53.550
We believe in Panther,
we've made them better than ever.

00:15:54.980 --> 00:15:59.680
So, the contextual menu in
Finder is back in Panther.

00:15:59.900 --> 00:16:01.590
Now of course that doesn't
make it better than ever.

00:16:01.710 --> 00:16:03.900
It returns us to where
we were with Mac OS 9,

00:16:04.000 --> 00:16:06.910
but we've got a great new
tool that we're really excited

00:16:06.910 --> 00:16:08.680
about that we never had before.

00:16:09.150 --> 00:16:15.890
We call it Folder Action Setup,
which again,

00:16:15.890 --> 00:16:15.890
if the slide ever... There we go.

00:16:16.520 --> 00:16:19.970
All right, so Folder Action Setup shows
you all of the attached folder

00:16:19.970 --> 00:16:23.130
actions on your system as a whole,
something you couldn't do before.

00:16:23.170 --> 00:16:27.320
It also provides UI for enabling,
disabling, attaching, removing,

00:16:27.320 --> 00:16:30.400
or editing individual
folder actions or scripts.

00:16:30.510 --> 00:16:32.140
And that's something you
couldn't do before either.

00:16:32.140 --> 00:16:38.090
It wasn't possible to enable
or disable an individual script

00:16:38.090 --> 00:16:38.090
that was part of a folder action,
but now you can.

00:16:39.030 --> 00:16:42.520
Folder Actions Setup is in
the Panther Developer Preview,

00:16:42.520 --> 00:16:45.580
but I do want to make you aware
that the functionality that's in the

00:16:45.580 --> 00:16:48.150
Developer Preview is not complete for
what we're going to ship in Panther.

00:16:48.210 --> 00:16:51.910
It's already very useful,
and I think you're going to like it,

00:16:51.910 --> 00:16:53.420
but it's not complete.

00:16:55.570 --> 00:16:58.050
So now we've talked about folder actions,
let's move on to Script Menu.

00:16:58.070 --> 00:16:59.940
We've got a lot of great new
enhancements to Script Menu,

00:16:59.940 --> 00:17:01.030
making it even easier to use.

00:17:01.040 --> 00:17:04.650
In fact, you saw Steve was running
it during the demo.

00:17:05.040 --> 00:17:07.130
I'll start from the bottom
because even unfortunately

00:17:07.130 --> 00:17:09.980
it's not enabled by default,
but it's very easy to install and we're

00:17:09.980 --> 00:17:11.740
going to show that to you in a moment.

00:17:11.740 --> 00:17:15.660
We've also added support for aliases
including for remote machines.

00:17:15.660 --> 00:17:17.680
And you can put applications, droplets,
documents,

00:17:17.680 --> 00:17:20.810
almost anything you want in there and
ScriptMenu will do the correct thing

00:17:20.810 --> 00:17:24.420
to open it or display it or whatever
would be the appropriate thing.

00:17:24.420 --> 00:17:28.820
We've also added some new ways to access
what you've got stored in ScriptMenu.

00:17:28.820 --> 00:17:32.140
If you select a folder,
it will open it for you in Finder.

00:17:32.140 --> 00:17:34.380
If you select a script while
holding down the option key,

00:17:34.510 --> 00:17:36.640
it will open it for you in
ScriptEditor so you can get

00:17:36.640 --> 00:17:38.080
right to editing your script.

00:17:38.080 --> 00:17:41.510
We've also made it easier to
work with ScriptMenu if you've

00:17:41.510 --> 00:17:43.400
got a lot of your own scripts.

00:17:43.400 --> 00:17:47.000
Previously you had all the library
example scripts in the top of the menu

00:17:47.000 --> 00:17:48.700
and the user scripts down at the bottom.

00:17:48.700 --> 00:17:51.800
We've now made it very easy to hide the
library example scripts so that it's

00:17:51.800 --> 00:17:54.660
easier to work with your own scripts.

00:17:54.660 --> 00:17:58.740
And we've also added a great new
feature that allows you to add

00:17:58.740 --> 00:18:02.120
scripts specific to a particular
application to ScriptMenu.

00:18:02.120 --> 00:18:04.880
So that when you have that
application frontmost,

00:18:04.880 --> 00:18:07.520
those scripts show up
beneath your user scripts.

00:18:08.850 --> 00:18:10.790
So now I've been talking
about all these things,

00:18:10.810 --> 00:18:13.440
I'd like to actually show them to you,
and I'd like to ask Tim Bumgarner

00:18:13.440 --> 00:18:19.960
to come up and help me show you the
enhancements we made to Script Menu,

00:18:19.960 --> 00:18:22.300
Folder Actions,
and Script Editor 2 in Panther.

00:18:22.300 --> 00:18:22.300
TIM BUMGARNER: Thank you.

00:18:22.300 --> 00:18:22.300
Thanks, Todd.

00:18:24.870 --> 00:18:26.990
So the first thing we'd like to
do is show you how easy it is

00:18:26.990 --> 00:18:28.420
to install it on your menu bar.

00:18:28.560 --> 00:18:31.190
Yes,
notice that it's not in here by default.

00:18:31.360 --> 00:18:32.300
And we'll just double click here.

00:18:32.300 --> 00:18:34.750
Simple double click, there it is.

00:18:34.910 --> 00:18:38.210
And you can see all the library
example scripts are there,

00:18:38.280 --> 00:18:41.840
but all you need to do is hide them.

00:18:41.870 --> 00:18:43.940
And then you'll see
just your user scripts,

00:18:43.980 --> 00:18:48.960
which are the ones in your library
scripts off your home directory.

00:18:49.170 --> 00:18:52.200
So if you select a folder,
as I just mentioned,

00:18:52.200 --> 00:18:54.660
it'll open them for you in Finder.

00:18:55.120 --> 00:18:58.580
And if you hold down the Option key
while selecting a script,

00:18:58.620 --> 00:19:01.010
it will open it for you in Script Editor.

00:19:01.610 --> 00:19:09.490
So if you notice here,
if Tim will go back to script menu,

00:19:09.490 --> 00:19:09.490
you see all the
Script Editor scripts there.

00:19:10.080 --> 00:19:12.110
So how did we do that?

00:19:12.170 --> 00:19:14.600
If we go back to Finder,
you'll see that the scripts are no

00:19:14.600 --> 00:19:19.020
longer there in Script Menu because
Script Editor 2 is no longer frontmost.

00:19:19.900 --> 00:19:23.640
But what if we wanted to have
some Finder-specific scripts?

00:19:23.730 --> 00:19:27.200
So all you need to do is in
your Library Scripts folder,

00:19:27.280 --> 00:19:30.140
create a folder called Applications,
which you can see in

00:19:30.260 --> 00:19:32.400
the Finder window there.

00:19:33.110 --> 00:19:33.920
- Turn it over, right?

00:19:33.940 --> 00:19:34.290
- Yep.

00:19:34.320 --> 00:19:36.410
And you can see we've got
a link to Script Editor,

00:19:36.500 --> 00:19:40.030
and we just made a link to
the Finder example scripts.

00:19:40.030 --> 00:19:44.130
Of course, you can make these anything
you want that you want to

00:19:44.130 --> 00:19:46.290
show up on Finder's frontmost.

00:19:46.290 --> 00:19:49.890
You just need to make the name
of the alias of the folder,

00:19:49.900 --> 00:19:52.490
whatever's in there,
match the name of the application that

00:19:52.490 --> 00:19:52.490
you want these scripts to show up for.

00:19:52.490 --> 00:19:52.490
And now if we go back to Script Menu,
you'll see that all the

00:19:52.490 --> 00:19:52.490
Finder scripts have shown up.

00:19:54.430 --> 00:19:57.050
And you can see each one
has its own individual set.

00:19:57.060 --> 00:19:58.300
This is an exciting feature.

00:19:58.300 --> 00:19:59.890
I've been looking for
this for a long time.

00:19:59.900 --> 00:20:04.010
And hopefully all of you
will find it useful as well.

00:20:04.110 --> 00:20:07.090
So let's move on to folder actions.

00:20:07.840 --> 00:20:12.600
So as I mentioned, the Folder Actions
contextual menu is back.

00:20:12.670 --> 00:20:15.500
So if we select a folder,
hold down the Control key,

00:20:15.500 --> 00:20:17.520
you'll see we've got a
couple of options there.

00:20:17.520 --> 00:20:20.020
We can enable Folder Actions.

00:20:20.950 --> 00:20:22.680
And let's add one.

00:20:22.680 --> 00:20:28.920
So attach a folder action to the desktop,
and let's just use one of the examples.

00:20:29.410 --> 00:20:31.220
Oh, we have to go find the right way.

00:20:31.220 --> 00:20:34.370
We'll go down the long way here.

00:20:34.370 --> 00:20:37.650
Flying, demoing without a net.

00:20:37.650 --> 00:20:38.890
Scripts.

00:20:40.380 --> 00:20:41.260
There we go.

00:20:41.290 --> 00:20:41.500
All right.

00:20:41.580 --> 00:20:42.500
Click Choose.

00:20:42.580 --> 00:20:43.900
Okay, that's how easy it is.

00:20:44.060 --> 00:20:45.480
You can see that it actually is there.

00:20:45.490 --> 00:20:47.790
It added it,
so we can remove it if we needed to.

00:20:47.840 --> 00:20:48.480
Or edit it.

00:20:48.510 --> 00:20:49.190
Mm-hmm.

00:20:49.290 --> 00:20:51.000
All right, well, let's try one out.

00:20:51.000 --> 00:20:53.290
We've actually got a folder action.

00:20:53.380 --> 00:20:56.390
Steve mentioned this morning
about the new built-in

00:20:56.520 --> 00:20:59.800
conversion from PostScript to
PDF that's available in Panther.

00:20:59.870 --> 00:21:02.260
We're going to make use of
that now using AppleScript.

00:21:02.360 --> 00:21:07.080
We've got a folder action attached
to this PDF output folder.

00:21:07.200 --> 00:21:09.800
There's a PostScript to
PDF attached to it.

00:21:09.800 --> 00:21:12.810
And if we drop this
PostScript file in there,

00:21:13.300 --> 00:21:14.680
I'm going to shug along.

00:21:14.700 --> 00:21:17.110
And you can see that our new item
alert we just added to the desktop

00:21:17.220 --> 00:21:20.360
pops up to let us know we've got this
new PDF that's just been created there.

00:21:21.950 --> 00:21:26.440
And it's a handy file for this week,
nice map of San Francisco.

00:21:26.500 --> 00:21:28.900
And we're here somewhere,
I'm not sure exactly where.

00:21:28.900 --> 00:21:31.390
Well, we're all here, right?

00:21:31.470 --> 00:21:34.400
All right,
so I mentioned that we've got this

00:21:34.400 --> 00:21:36.740
great new tool folder action set up,
so let's show you that.

00:21:36.740 --> 00:21:40.440
You can access it from the
applications AppleScript menu,

00:21:40.440 --> 00:21:42.430
or in folder and finder,
or just launch it from

00:21:42.470 --> 00:21:44.900
the contextual menu,
as Tim just did.

00:21:44.980 --> 00:21:48.520
As you can see, you can enable and
disable folder actions.

00:21:48.740 --> 00:21:52.510
You can examine existing folder
actions and see the attached

00:21:52.560 --> 00:21:53.830
scripts that are part of them.

00:21:53.830 --> 00:22:01.010
You can delete or
remove attached scripts.

00:22:01.910 --> 00:22:05.380
And you can also delete
entire folder actions.

00:22:05.380 --> 00:22:06.700
And of course add them.

00:22:06.820 --> 00:22:11.000
You can also edit scripts
directly from folder action setup.

00:22:11.090 --> 00:22:12.340
Go to public.

00:22:12.340 --> 00:22:14.300
Either one.

00:22:14.300 --> 00:22:15.360
Hit edit script.

00:22:15.450 --> 00:22:18.180
It'll open it for us in Script Editor.

00:22:20.020 --> 00:22:22.560
So that's the new tool,
Folder Action Setup.

00:22:22.560 --> 00:22:23.110
Give it a try.

00:22:23.110 --> 00:22:24.180
Give us your feedback.

00:22:24.190 --> 00:22:25.480
As I said, we're still working on it.

00:22:25.520 --> 00:22:27.310
We want to add some great
new functionality to it.

00:22:27.340 --> 00:22:29.200
And with that,
I'll turn it over to Tim to go over

00:22:29.200 --> 00:22:31.040
some new features in Script Editor 2.

00:22:31.040 --> 00:22:31.320
Great.

00:22:31.320 --> 00:22:32.100
Well, thank you, Todd.

00:22:32.120 --> 00:22:32.520
Good job.

00:22:32.520 --> 00:22:33.180
All right.

00:22:33.180 --> 00:22:34.560
Very excited about this.

00:22:34.560 --> 00:22:38.220
We're releasing a second beta here
at the conference in the Panther.

00:22:38.220 --> 00:22:41.260
It should be out on your Panther CD,
as Todd mentioned.

00:22:41.260 --> 00:22:43.960
And I want to talk about a few things,
as Todd mentioned as well,

00:22:43.960 --> 00:22:46.460
that it's built on Cocoa,
and that's really powerful.

00:22:46.460 --> 00:22:49.340
We get a lot of functionality for free,
and he went through those.

00:22:49.340 --> 00:22:52.510
So I'm just going to go right in and
talk about some of the new things,

00:22:52.510 --> 00:22:54.840
the scriptability of
Script Editor itself.

00:22:54.840 --> 00:22:56.640
And I'm going to type
a little script here,

00:22:56.640 --> 00:22:58.540
and what I'm going to do is I'm
going to make a new document.

00:22:58.540 --> 00:23:00.370
So I'm in Script Editor itself.

00:23:00.410 --> 00:23:03.310
I don't need to tell another
application because I'm

00:23:03.350 --> 00:23:05.310
scripting Script Editor itself.

00:23:05.310 --> 00:23:08.570
So I'm going to make a new document,
and I'm going to set the

00:23:08.570 --> 00:23:10.810
contents of the front document.

00:23:11.330 --> 00:23:14.850
Now you'll notice if you were watching
really carefully there was some little

00:23:14.850 --> 00:23:17.280
ellipses in there and some type ahead.

00:23:17.280 --> 00:23:19.730
And if I start typing here you'll
see that it's got a little ellipses.

00:23:19.730 --> 00:23:21.610
This is a new feature
called Code Assistant.

00:23:21.610 --> 00:23:24.660
I'm not sure the name will stay
the same because we use Code Sense.

00:23:24.660 --> 00:23:27.150
It's the same technology
that we're using in Xcode.

00:23:27.290 --> 00:23:30.010
So it's trying to guess what the
thing is that I'm trying to type.

00:23:30.010 --> 00:23:32.990
So if I type an I or an SP in
this case it's diacriticals.

00:23:32.990 --> 00:23:34.020
Oh, there it is.

00:23:34.060 --> 00:23:36.280
Expose jumped right in and got me.

00:23:36.280 --> 00:23:36.880
Okay.

00:23:36.880 --> 00:23:39.980
Don't hit that key.

00:23:39.980 --> 00:23:44.060
In this case it's not set up for
display but I could bring up a list.

00:23:44.100 --> 00:23:57.600
[Transcript missing]

00:23:57.900 --> 00:23:59.410
And hopefully I typed that correctly.

00:23:59.500 --> 00:24:01.520
And now, so what I've done is
I'm going to tell it,

00:24:01.520 --> 00:24:04.510
script editor, make a new document,
set the contents of that new

00:24:04.510 --> 00:24:07.680
document to this other script,
and now I'm going to tell it to execute.

00:24:07.680 --> 00:24:10.000
So I'm going to execute
the front document.

00:24:10.230 --> 00:24:12.160
So we're gonna compile that.

00:24:12.180 --> 00:24:13.730
Build and run,
and what you're going to see is

00:24:13.730 --> 00:24:16.750
a new window and a display dialog
that comes up right after that.

00:24:16.830 --> 00:24:19.960
So I could use scripting and
script the script editor itself.

00:24:19.960 --> 00:24:21.240
It's a pretty cool thing that you can do.

00:24:21.240 --> 00:24:23.720
And there's tons of things
that you can do with that.

00:24:23.720 --> 00:24:26.540
Okay, so let's close all those.

00:24:26.540 --> 00:24:29.250
Another thing that we can do,

00:24:29.780 --> 00:24:32.870
Another new feature is
we've added this nav bar.

00:24:32.880 --> 00:24:34.740
Again,
Todd had mentioned that we're trying

00:24:34.740 --> 00:24:38.480
to work with the tools group and
use some of the same technology,

00:24:38.480 --> 00:24:39.600
the same look and feel.

00:24:39.600 --> 00:24:42.330
And so if I show the navigation bar,
it actually shows me a couple

00:24:42.330 --> 00:24:44.180
different things this nav bar pops up.

00:24:44.200 --> 00:24:46.380
One is the different components
that we have on the system.

00:24:46.380 --> 00:24:48.540
In this case,
we just have the AppleScript component.

00:24:48.540 --> 00:24:50.040
And this lists our elements.

00:24:50.040 --> 00:24:52.350
So if I use our drag and drop,
I can drag in a simple

00:24:52.350 --> 00:24:53.620
little script here.

00:24:53.800 --> 00:24:55.640
And you'll notice now
that it populates it,

00:24:55.640 --> 00:24:58.860
so I can go to my global property,
or a global or a property,

00:24:58.860 --> 00:25:00.420
or to a different handler.

00:25:00.420 --> 00:25:03.000
And even more importantly,
as I'm moving around,

00:25:03.000 --> 00:25:07.180
you'll notice up here that it's tracking
which script or what element that I'm in,

00:25:07.180 --> 00:25:09.060
which is great for really large scripts.

00:25:09.060 --> 00:25:12.040
You can jump and navigate very
simply and find out where you are.

00:25:15.150 --> 00:25:18.170
Okay,
another thing I'm really excited about,

00:25:18.170 --> 00:25:21.080
and I use all the time myself,
is under the window menu,

00:25:21.080 --> 00:25:22.320
we've added a library window.

00:25:22.320 --> 00:25:25.510
And when you bring this up,
it lists all of the ‑‑ I can put

00:25:25.590 --> 00:25:29.090
any scriptable application that
I'm using on a regular basis.

00:25:29.100 --> 00:25:32.630
And so I can just simply go through
here and select one like the finder

00:25:32.700 --> 00:25:35.790
and click on the open dictionary,
and I can quickly get to the

00:25:35.790 --> 00:25:38.690
dictionary and find out any
information I want about that.

00:25:38.750 --> 00:25:42.060
So I can just double click on it,
do the same thing, look at text edit.

00:25:42.420 --> 00:25:46.240
And the other thing I can do is
I can create a new script from here.

00:25:46.240 --> 00:25:48.510
So if I click the finder
and say make new script,

00:25:48.510 --> 00:25:52.500
you can see that it automatically fills
out the teleapplication block for me,

00:25:52.500 --> 00:25:54.250
so I don't have to go
type that every time,

00:25:54.250 --> 00:25:55.460
which saves a ton of time.

00:25:55.460 --> 00:25:59.600
I can do something like name of every
‑‑ you can see it's auto typing for me.

00:25:59.600 --> 00:26:01.960
I can hit the complete key,
and I can type window

00:26:01.960 --> 00:26:03.380
and hit the complete key.

00:26:03.380 --> 00:26:06.060
So it knows what I'm trying to
type and will let me do that.

00:26:06.130 --> 00:26:07.820
So let's go ahead and run that.

00:26:07.900 --> 00:26:09.870
In this case,
I don't have any windows open,

00:26:09.950 --> 00:26:11.940
so let's go in here
and add a few windows.

00:26:12.440 --> 00:26:15.570
And I'll even minimize those
because they don't have to be open.

00:26:15.900 --> 00:26:16.640
And we'll run this again.

00:26:16.640 --> 00:26:18.600
And you can see down here,
another thing we've done is

00:26:18.600 --> 00:26:21.490
we've consolidated the separate
result window and event log.

00:26:21.650 --> 00:26:23.600
And we've put them all
into a single window,

00:26:23.600 --> 00:26:27.440
which makes it much simpler to use and
keeps it with the themes that we're

00:26:27.540 --> 00:26:29.800
trying to do in the tools group as well.

00:26:29.940 --> 00:26:33.200
All right,
so let's go ahead and close that.

00:26:33.380 --> 00:26:36.250
Now, since the Script Editor itself
is scriptable,

00:26:36.360 --> 00:26:39.150
what we're going to do is we
can take advantage of that,

00:26:39.160 --> 00:26:42.320
and we have these things that
are the contextual menus.

00:26:42.320 --> 00:26:43.770
They're the same menus
that are over here,

00:26:43.770 --> 00:26:45.480
so you can use them now
in two different ways.

00:26:45.480 --> 00:26:49.180
You can come choose them from here,
or you can actually come in here and

00:26:49.180 --> 00:26:52.570
type something like name of every window,
and I can select these

00:26:52.570 --> 00:26:54.870
and use the modifier key,
the control key,

00:26:54.920 --> 00:26:58.120
I can bring up the contextual menu,
and do a tell block.

00:26:58.200 --> 00:27:01.360
So I can say, let's do tell finder,
and it takes that bit of code and

00:27:01.400 --> 00:27:03.280
puts it inside the tell block form.

00:27:03.300 --> 00:27:05.180
And we can run that,
and we've already seen that,

00:27:05.230 --> 00:27:11.040
but I can come in here and say, oh,
let's make a set disk list to every disk.

00:27:11.040 --> 00:27:14.440
Now, using that same scriptability,
we can select this list,

00:27:14.440 --> 00:27:17.800
and what I want to do is I want to
iterate or repeat over every item

00:27:17.800 --> 00:27:20.000
in that list and do a little action.

00:27:20.000 --> 00:27:22.480
So I select the disk list,
go down to the repeat,

00:27:22.660 --> 00:27:25.450
and choose process every item,
and watch what will happen

00:27:25.450 --> 00:27:26.820
in the script itself.

00:27:26.820 --> 00:27:30.180
It goes through, takes the list,
writes the script for us,

00:27:30.180 --> 00:27:33.280
substitutes that, and gets ready for us
just to put our action in.

00:27:33.300 --> 00:27:36.210
for every item in that list.

00:27:40.700 --> 00:27:43.920
Now another feature that we've added,
which I really use a lot,

00:27:43.960 --> 00:27:46.900
because I do a lot of
testing of scripting,

00:27:47.040 --> 00:27:48.340
and we've added histories.

00:27:48.340 --> 00:27:50.240
There's a result history
and event log history.

00:27:50.240 --> 00:27:54.400
You might have noticed that as
I bring up a script window here,

00:27:54.400 --> 00:27:58.560
I can type current date and run that,
and you'll see that the

00:27:58.620 --> 00:28:00.460
history shows up here,
and if I run it again,

00:28:00.460 --> 00:28:03.380
I'll get a little bit
of a different value.

00:28:03.380 --> 00:28:06.360
And I can even compare that by
selecting two of them and see what

00:28:06.360 --> 00:28:08.370
the differences were between that.

00:28:08.370 --> 00:28:11.300
Or I can come back to this
script that ran a little earlier.

00:28:11.400 --> 00:28:13.590
And now the nice thing is that I'll
go ahead and close this window,

00:28:13.590 --> 00:28:15.270
and you go, you know,
I just did something in that

00:28:15.320 --> 00:28:18.380
script just a minute ago,
but I closed it, I forgot to save it.

00:28:18.380 --> 00:28:20.590
Well, during the,
you can just double click and get back

00:28:20.590 --> 00:28:22.380
to the script that generated that result.

00:28:22.380 --> 00:28:25.370
So you can go back to that.

00:28:29.000 --> 00:28:30.000
There are a lot.

00:28:30.000 --> 00:28:31.980
There's a ton of other features,
and we're going to just

00:28:31.980 --> 00:28:32.940
keep improving this.

00:28:32.940 --> 00:28:33.770
We're really excited about it.

00:28:33.800 --> 00:28:34.930
And I'll bring Todd back up.

00:28:34.980 --> 00:28:35.480
Thanks.

00:28:42.570 --> 00:28:43.460
Let me get back to slides, please.

00:28:43.510 --> 00:28:44.260
Thank you.

00:28:44.260 --> 00:28:46.730
One thing that I neglected to mention
earlier and I wanted to let you know is,

00:28:46.810 --> 00:28:49.580
in addition to shipping this
new version of Script Editor in

00:28:49.600 --> 00:28:56.520
the Panther Developer Preview,
we're also making it available as

00:28:56.520 --> 00:28:57.980
a second beta for Mac OS X 10.2,
and that's already available

00:28:57.980 --> 00:28:57.980
on the AppleScript website.

00:28:58.900 --> 00:29:01.090
So,
so far we've been talking about tools.

00:29:01.220 --> 00:29:03.530
What about the AppleScript runtime
in Standard Edition?

00:29:03.540 --> 00:29:06.900
So we've made a lot of
improvements there as well.

00:29:07.050 --> 00:29:10.190
Before I show you this next slide,
I will warn you that my speaker

00:29:10.250 --> 00:29:13.010
training instructor would be
horrified to see this slide,

00:29:13.010 --> 00:29:15.990
but I really left it this way so
you get an idea of the scope of

00:29:15.990 --> 00:29:18.900
the number of changes that we've
made in the Standard Edition.

00:29:18.900 --> 00:29:24.690
So you might want to shield your eyes,
if in fact the clicker will work.

00:29:25.260 --> 00:29:26.340
There we go.

00:29:26.470 --> 00:29:28.600
So that's a lot of
stuff up on the screen,

00:29:28.600 --> 00:29:30.670
but I would like to highlight two things.

00:29:30.670 --> 00:29:33.100
One,
the new Choose Color standard edition.

00:29:33.180 --> 00:29:36.900
And that gives you a standard
Mac OS X color picker and returns

00:29:36.960 --> 00:29:38.940
you a list of the RGB values.

00:29:39.120 --> 00:29:42.420
The second I'd like to highlight is
the long list of new special folder

00:29:42.420 --> 00:29:44.290
enumerations we've added a path to.

00:29:44.330 --> 00:29:48.060
If you want to get to the Movies folder,
we've made it very easy to do that,

00:29:48.060 --> 00:29:51.420
and in a portable way so that it's
very easy for you to give the script

00:29:51.420 --> 00:29:54.530
to somebody else and it will work
correctly on their system as well.

00:29:55.820 --> 00:29:58.640
So let's talk about the
AppleScript runtime as well.

00:29:58.640 --> 00:30:01.680
We've made a lot of changes there also.

00:30:02.520 --> 00:30:05.480
First of which I know that a lot of
you are going to be excited about,

00:30:05.480 --> 00:30:08.540
applets now handle events first in,
first out, so that you can now

00:30:08.540 --> 00:30:10.030
write AppleScript CGI's.

00:30:10.500 --> 00:30:11.740
A little excitement there.

00:30:11.740 --> 00:30:12.370
All right.

00:30:12.650 --> 00:30:18.970
We've made Unicode constants
much more easy to use,

00:30:18.970 --> 00:30:24.770
and we've made a number of
enhancements to the date class,

00:30:24.770 --> 00:30:24.770
which we'll go over now.

00:30:24.770 --> 00:30:24.770
I think you'll be excited about these,
too.

00:30:24.770 --> 00:30:24.770
Well, first we added a short date string.

00:30:24.970 --> 00:30:28.430
and the format of this string is
controlled by the International Panel on

00:30:28.430 --> 00:30:29.680
System Preferences.

00:30:29.680 --> 00:30:33.530
More exciting, I think,
might be that months can

00:30:33.530 --> 00:30:36.090
now be coerced to numbers.

00:30:38.710 --> 00:30:42.250
And of course,
that means that months can be compared.

00:30:42.460 --> 00:30:43.840
So you can write things like this.

00:30:43.980 --> 00:30:46.740
All right.

00:30:46.740 --> 00:30:49.360
So let's dive back into some tools.

00:30:49.360 --> 00:30:50.820
System Events.

00:30:50.820 --> 00:30:54.670
We released a beta late last year
with the new GUI scripting feature,

00:30:54.670 --> 00:30:56.390
which I'll get to in a moment.

00:30:56.660 --> 00:30:59.920
We've also made a number of other
changes in the various suites

00:30:59.920 --> 00:31:01.350
that make up System Events.

00:31:01.570 --> 00:31:05.540
So in the System Events suite,
we've merged all the application

00:31:05.540 --> 00:31:09.360
classes from the other suites into
one in the System Events suite.

00:31:09.360 --> 00:31:12.060
And that class has gained
a number of new properties,

00:31:12.060 --> 00:31:16.130
including one related to the
new GUI scripting feature.

00:31:16.170 --> 00:31:19.240
Disk folder file has also
seen a number of improvements.

00:31:19.240 --> 00:31:22.040
We've added a handful of
new verbs and new classes,

00:31:22.300 --> 00:31:27.040
including a new class called Disk Item,
which both file and folder inherit from,

00:31:27.040 --> 00:31:29.750
so that if you want to see all files,
you can do that.

00:31:29.750 --> 00:31:32.220
If you want to see all folders,
you can do that.

00:31:32.220 --> 00:31:34.990
And if you want to see both of them,
all the disk items,

00:31:35.110 --> 00:31:36.730
we've made it very easy to do that.

00:31:36.790 --> 00:31:40.740
We've also added the same list of special
folder properties to match path to,

00:31:40.740 --> 00:31:43.600
so it doesn't matter whether
you're using the Scripting

00:31:43.620 --> 00:31:46.100
Edition or scripting system events.

00:31:46.430 --> 00:31:48.660
And that brings us to
the Processes Suite,

00:31:48.770 --> 00:31:54.930
which is where the new
GUI scripting feature is.

00:31:55.610 --> 00:31:57.820
You know,
I may just carry the keyboard with me.

00:31:57.850 --> 00:31:58.820
Will that actually work?

00:31:59.050 --> 00:32:02.530
There we go.

00:32:02.530 --> 00:32:02.530
Yay!

00:32:03.120 --> 00:32:05.230
So GUI scripting.

00:32:05.400 --> 00:32:09.660
I'm sure a number of you have worked
with the beta that we released last year,

00:32:09.890 --> 00:32:13.480
but I want to make sure
that the message gets clear,

00:32:13.480 --> 00:32:16.660
gets through, about what we think
GUI scripting is good for.

00:32:16.660 --> 00:32:17.440
Thanks.

00:32:24.630 --> 00:32:28.020
So we believe there are two
main uses for GUI scripting.

00:32:28.050 --> 00:32:30.430
One is for automated
GUI testing of applications,

00:32:30.520 --> 00:32:33.430
and if you're interested in that,
you should come to John Comiskey's

00:32:33.430 --> 00:32:35.000
session 311 on Friday morning.

00:32:35.000 --> 00:32:39.950
He's going to tell you all about it.

00:32:39.950 --> 00:32:39.950
The second one is if you've got...

00:32:42.900 --> 00:32:53.060
and David So the second use we
see for GUI scripting is you've

00:32:53.060 --> 00:32:55.500
got a complicated workflow,
you've got a number of great

00:32:55.500 --> 00:32:59.460
scriptable applications to do what
you're doing for your workflow,

00:32:59.460 --> 00:33:02.890
and there's one application that's
not scriptable or has one little

00:33:02.890 --> 00:33:06.750
alert panel that's not scriptable,
and all you need to do is click OK,

00:33:06.890 --> 00:33:09.580
and your entire workflow
will be scriptable.

00:33:09.580 --> 00:33:12.690
That might be a good problem
that GUI scripting might

00:33:12.740 --> 00:33:14.400
be able to help you solve.

00:33:14.450 --> 00:33:16.840
However, and I can't stress this
strongly enough-- Point at me,

00:33:16.840 --> 00:33:19.750
pretend you got-- Slide, please.

00:33:19.940 --> 00:33:23.240
It's not a substitute for
object model scriptability.

00:33:23.350 --> 00:33:23.780
It's not.

00:33:23.800 --> 00:33:26.110
So let's not get confused about that.

00:33:26.120 --> 00:33:28.100
I'll go into more detail
about why in a moment.

00:33:28.100 --> 00:33:30.820
But practically speaking,
GUI scripting is part of the

00:33:30.820 --> 00:33:32.160
System Events Processes suite.

00:33:32.160 --> 00:33:35.380
There's a new UI Element class
that Process now inherits from,

00:33:35.380 --> 00:33:38.830
and it also has it as an element so
that you can walk down the hierarchy

00:33:38.830 --> 00:33:40.860
of UI elements in an application.

00:33:40.860 --> 00:33:44.030
And UI elements are just standard
GUI widgets you're familiar with,

00:33:44.030 --> 00:33:47.470
splitters, radio buttons,
the ones there I've listed on the slide.

00:33:47.470 --> 00:33:48.870
Slide, please.

00:33:49.280 --> 00:33:53.360
So why isn't this a good replacement
for object model scriptability?

00:33:53.360 --> 00:33:55.110
Well, there are four big limitations.

00:33:55.140 --> 00:33:57.430
One is that it's disabled by default.

00:33:57.440 --> 00:34:00.520
So that if you write a great
GUI scripting script and you

00:34:00.520 --> 00:34:02.600
hand it off to somebody else,
well,

00:34:02.600 --> 00:34:06.500
it's not going to run on their system
until they set a specific obscure

00:34:06.510 --> 00:34:08.980
preference in system preferences.

00:34:08.980 --> 00:34:12.610
What we recommend is that you actually
add a check to your GUI scripting

00:34:12.610 --> 00:34:16.110
scripts that will tell the user why
it's not going to run and tell them

00:34:16.110 --> 00:34:18.150
what they need to do so it will run.

00:34:18.760 --> 00:34:21.130
So that's a resolvable problem.

00:34:21.190 --> 00:34:23.310
However, the next ones are a
little bit more serious.

00:34:23.350 --> 00:34:26.600
GUI scripting scripts are going
to be extremely fragile when the

00:34:26.600 --> 00:34:30.030
application's UI changes because
they're dependent on the ordering of

00:34:30.040 --> 00:34:33.680
the different UI elements on the window.

00:34:33.680 --> 00:34:36.540
So that whenever the
developer adds a new button,

00:34:36.540 --> 00:34:40.700
a new text field, a new whatever,
which pretty much means every time they

00:34:40.700 --> 00:34:45.140
release a new version of the application,
your GUI scripting

00:34:45.140 --> 00:34:48.240
script is going to break.

00:34:48.240 --> 00:34:49.870
So software testers to
test your application,

00:34:49.870 --> 00:34:51.990
they probably are going to be
willing to put up with that.

00:34:52.010 --> 00:34:53.820
But your customers aren't.

00:34:53.890 --> 00:34:57.720
They really need object model scripting
to protect them against this fragility.

00:34:59.360 --> 00:35:02.730
Another serious limitation is that
GUI scripting scripts cannot control

00:35:02.730 --> 00:35:04.600
non-standard interface elements.

00:35:04.600 --> 00:35:10.130
So if you're writing your own
special widget that's not Cocoa,

00:35:10.130 --> 00:35:13.650
GUI scripting scripts aren't going
to be able to control it unless you

00:35:13.730 --> 00:35:17.300
do a lot of extra work to make it
work with the accessibility API.

00:35:17.300 --> 00:35:20.370
Now I'm sure none of you
use non-standard controls,

00:35:20.430 --> 00:35:23.250
I'm sure you just drag
them in IB off the palette,

00:35:23.250 --> 00:35:27.030
but if you do, GUI scripting won't
work for your customers.

00:35:28.460 --> 00:35:31.250
And a fourth limitation is that
GUI scripting does not work

00:35:31.260 --> 00:35:33.180
well with non-English languages.

00:35:33.180 --> 00:35:35.770
This is primarily connected
with keystrokes and keycodes.

00:35:35.840 --> 00:35:39.510
We have some ideas of how to
address this particular limitation,

00:35:39.560 --> 00:35:42.230
but it's never going to
be completely robust.

00:35:42.300 --> 00:35:45.620
So what are the solutions
to these limitations?

00:35:45.660 --> 00:35:48.040
Well,
you need object model scriptability,

00:35:48.080 --> 00:35:51.410
so that if you're a scripter and you
have an application that you need to use

00:35:51.460 --> 00:35:54.890
or want to use and it's not scriptable,
you should request object model

00:35:54.930 --> 00:35:56.340
scriptability from the developer.

00:35:57.770 --> 00:35:59.430
If you're an application
developer and you haven't made

00:35:59.430 --> 00:36:02.120
your application scriptable yet,
well, you should come to the session on

00:36:02.120 --> 00:36:05.440
Thursday morning and find out how,
because your customers need and

00:36:05.440 --> 00:36:07.800
deserve object model scriptability.

00:36:09.500 --> 00:36:11.390
So that brings me to a
completely new feature,

00:36:11.710 --> 00:36:13.400
image events.

00:36:13.400 --> 00:36:15.560
Now, okay then.

00:36:15.560 --> 00:36:17.070
So we can deconstruct the name here.

00:36:17.070 --> 00:36:19.180
Events, well,
it sounds like system events,

00:36:19.180 --> 00:36:21.170
and in fact,
it's also a faceless scriptable

00:36:21.170 --> 00:36:22.960
application like system events.

00:36:22.960 --> 00:36:23.680
Hang on, Tim.

00:36:23.680 --> 00:36:27.220
An image, well, you know,
you're working with images,

00:36:27.400 --> 00:36:31.110
so it's actually a superset of color
sync and image capture scriptability.

00:36:31.110 --> 00:36:34.840
So what can you do with image events?

00:36:34.840 --> 00:36:37.620
Well, you can manipulate images
in color sync profiles.

00:36:38.300 --> 00:36:39.940
You can access image metadata.

00:36:39.940 --> 00:36:41.300
You can add or change a profile.

00:36:41.300 --> 00:36:45.380
You can rotate crop scale images,
and you can translate file formats.

00:36:45.390 --> 00:36:47.540
So hang on.

00:36:47.540 --> 00:36:49.840
I'll point at you.

00:36:50.770 --> 00:36:52.900
So we're excited about this.

00:36:52.900 --> 00:36:55.910
We think this will be very useful for
workflows where you don't necessarily

00:36:55.910 --> 00:36:58.940
want to be launching all these
UIs to script your application.

00:36:58.940 --> 00:37:02.100
You can just tell Image Events what
you want to do with your images

00:37:02.100 --> 00:37:04.020
and do a lot of batch processing.

00:37:04.300 --> 00:37:05.870
However,
the version of Image Events that's

00:37:05.950 --> 00:37:08.380
in your Panther developer
preview is not functional yet.

00:37:08.410 --> 00:37:10.690
The dictionary is there,
so you can definitely look at

00:37:10.690 --> 00:37:13.830
that in Script Editor and give us
your feedback on the dictionary.

00:37:14.020 --> 00:37:16.620
But you'll have to wait for the
final release of Panther to see

00:37:16.630 --> 00:37:19.050
Image Events in all its glory.

00:37:19.640 --> 00:37:21.320
Thank you Tim.

00:37:21.360 --> 00:37:22.160
So, PDF Workflow.

00:37:22.160 --> 00:37:25.560
Steve talked a lot about PDFs
this morning in the keynote.

00:37:25.610 --> 00:37:28.350
And although this feature
isn't actually new in Panther,

00:37:28.350 --> 00:37:31.490
it was added in Mac OS X 10.2.4,
we think it's a great feature and

00:37:31.510 --> 00:37:33.650
we're going to actually show it
to you in a demo in a few moments.

00:37:33.720 --> 00:37:35.880
It's documented on the
AppleScript website,

00:37:35.930 --> 00:37:36.660
how to use it.

00:37:36.660 --> 00:37:40.720
And what it allows you to do is do
arbitrary processing of saved PDF files

00:37:40.870 --> 00:37:42.870
directly from the print dialog.

00:37:42.880 --> 00:37:45.640
You can run any AppleScript you
want so you can do anything that

00:37:45.640 --> 00:37:47.640
AppleScript can do with the PDF file.

00:37:47.690 --> 00:37:50.080
And I'll show you a couple of examples.

00:37:50.130 --> 00:37:53.640
What you need to do for your AppleScripts
are use an open handler to receive

00:37:53.640 --> 00:37:56.060
the references to the saved files.

00:37:56.060 --> 00:38:00.320
And when you create scripts or some
of the other things that you can do

00:38:00.320 --> 00:38:05.000
to affect what the saved PDF file
will do is just add these scripts

00:38:05.000 --> 00:38:10.130
and links to folders or anything
else like that to a PDF services

00:38:10.140 --> 00:38:11.330
folder in your library folder.

00:38:11.440 --> 00:38:13.930
And you can put this in your home
directory library folder if you

00:38:13.930 --> 00:38:14.950
just want to see it yourself.

00:38:14.950 --> 00:38:17.440
If you want to make it available
to anyone using your machine,

00:38:17.440 --> 00:38:19.770
you can put it in slash library
and of course you can put it

00:38:19.770 --> 00:38:21.010
in network library as well.

00:38:22.900 --> 00:38:24.110
Thanks Tim.

00:38:24.110 --> 00:38:26.780
One of the things we're
very excited about,

00:38:26.780 --> 00:38:31.480
and I think you can tell from
hearing AppleScript mentioned

00:38:31.480 --> 00:38:36.160
in all the earlier sessions,
is across Mac OS X we're seeing

00:38:36.160 --> 00:38:42.260
enhanced scriptability to major system
applications such as Address Book,

00:38:42.260 --> 00:38:44.680
Finder, iPhoto, and Mail.

00:38:44.680 --> 00:38:45.290
And in fact, we have two major newly
scriptable apps in Panther.

00:38:45.290 --> 00:38:45.290
The new iChat AV is scriptable.

00:38:45.850 --> 00:38:49.970
and the new Xcode IDE is also scriptable,
and Tim, in fact,

00:38:50.040 --> 00:38:53.300
is going to demo that scriptability
in his AppleScript Studio session

00:38:53.300 --> 00:38:54.800
on Wednesday afternoon.

00:38:54.800 --> 00:38:57.390
So we're very excited about this,
and we're going to continue to work

00:38:57.390 --> 00:39:02.300
with our colleagues to continue adding
great new scriptable apps on Mac OS X.

00:39:02.450 --> 00:39:06.590
And with that, I'd actually like to show
you the PDF workflow feature.

00:39:07.040 --> 00:39:10.240
and Ty together with some of the
great scriptable apps on Mac OS X.

00:39:10.240 --> 00:39:12.590
Can we add demo three, please?

00:39:13.590 --> 00:39:19.240
So this is the web page that documents
the feature on the AppleScript web page.

00:39:19.330 --> 00:39:22.000
And I'll just show you what it looks
like before we add this feature.

00:39:22.000 --> 00:39:29.340
You bring up the print dialogs,
the one you're used to.

00:39:29.340 --> 00:39:30.520
Here's the Save as PDF button that
Steve highlighted this morning.

00:39:30.520 --> 00:39:30.520
We're going to make it even better.

00:39:32.100 --> 00:39:36.490
So one of the things you can do,
well first of all we need

00:39:36.600 --> 00:39:41.220
to create a PDF services
folder in our library folder.

00:39:41.220 --> 00:39:43.290
Let's just drag that over.

00:39:46.700 --> 00:39:49.500
All right,
and one thing we can do is we can

00:39:49.500 --> 00:39:54.240
actually drag in an alias to a folder,
and what that will tell it to do is

00:39:54.240 --> 00:39:57.040
to copy the saved PDF to that folder.

00:39:57.040 --> 00:40:07.330
And we'll change the title of this
alias because the name of whatever

00:40:07.330 --> 00:40:08.900
is in this folder is what will
show up in the Save to PDF menu.

00:40:14.610 --> 00:40:15.380
That's one thing you do.

00:40:15.380 --> 00:40:18.340
Another thing you do is
drag applications in,

00:40:18.380 --> 00:40:20.620
or aliases to them.

00:40:20.700 --> 00:40:24.610
Say you want to have it open in preview.

00:40:26.590 --> 00:40:29.480
But what's most powerful
is using AppleScript,

00:40:29.480 --> 00:40:32.320
of course,
which allows you to do almost anything.

00:40:32.320 --> 00:40:36.860
So let's just drag in the AppleScript,
and I already like that name, so.

00:40:37.950 --> 00:40:40.500
Let's go back to Safari.

00:40:40.530 --> 00:40:43.140
And if we bring up the
print dialog again.

00:40:43.620 --> 00:40:48.650
You'll see that the nice little
Save as PDF button is now a menu.

00:40:49.130 --> 00:40:52.590
And you can see that you
still can just save as PDF,

00:40:52.590 --> 00:40:59.450
but you can also copy the PDF to
that folder that we made and open it

00:40:59.910 --> 00:41:05.670
with preview or any Acrobat Reader,
whatever you want to add in here,

00:41:05.670 --> 00:41:05.670
any application.

00:41:05.670 --> 00:41:05.670
And then the script.

00:41:05.670 --> 00:41:05.670
Now what the script is going to do
is actually receive the PDF file.

00:41:07.190 --> 00:41:07.940
after creates it.

00:41:07.940 --> 00:41:11.740
It's going to prompt me
for a file name for it,

00:41:11.740 --> 00:41:17.720
so let's see, PDF workflow doc,
and when I click OK,

00:41:17.720 --> 00:41:23.020
what it's going to do is save the file,
then ask AddressBook for the names and

00:41:23.020 --> 00:41:27.580
email addresses for the members of a
PDF reviewer's group within AddressBook,

00:41:27.580 --> 00:41:31.570
and tell Mail to create a new message
with this PDF file as an attachment

00:41:31.870 --> 00:41:34.420
addressed to those recipients.

00:41:34.540 --> 00:41:38.200
And you can see the new
addresses as objects.

00:41:38.740 --> 00:41:41.410
And this is just one small example
of what you can do with this

00:41:41.410 --> 00:41:44.420
feature and combining it with other
great scriptable applications.

00:41:44.520 --> 00:41:48.550
So back to slides, please.

00:41:55.600 --> 00:41:57.600
Can we get slides please?

00:41:57.600 --> 00:42:00.240
Thank you.

00:42:00.940 --> 00:42:02.910
All right,
so we've been talking mostly about

00:42:03.310 --> 00:42:05.630
changes that affect scripters.

00:42:05.700 --> 00:42:12.730
There are also some significant
enhancements to Cocoa Scripting

00:42:12.730 --> 00:42:12.730
for you application developers
out there to improve the

00:42:12.730 --> 00:42:12.730
scriptability in your application.

00:42:13.720 --> 00:42:17.360
One great new enhancement is that
you can now suspend and then resume

00:42:17.360 --> 00:42:19.700
the processing of the particular
Apple Evander script command

00:42:19.700 --> 00:42:21.980
that's being handled currently.

00:42:22.570 --> 00:42:27.670
This allows you to avoid having the
scripts block on some long process in a

00:42:27.670 --> 00:42:28.730
particular application you're scripting.

00:42:29.190 --> 00:42:31.960
And also, there's new API that allows
you to access the exact

00:42:31.960 --> 00:42:35.040
Apple event that's being handled,
which means you can now set the

00:42:35.040 --> 00:42:38.710
return code for the Apple event,
which allows you to get much better error

00:42:38.710 --> 00:42:40.950
handling in your scriptable applications.

00:42:41.040 --> 00:42:44.290
You can also get direct access to
parameters that Cocoa Scripting

00:42:44.340 --> 00:42:47.550
doesn't provide direct access to,
like the subject parameter

00:42:47.550 --> 00:42:49.130
and considering ignoring.

00:42:49.300 --> 00:42:54.430
And Cocoa Scripting now completely
handles properties for you.

00:42:54.430 --> 00:42:55.010
You don't have to write any code,
and you get it for free.

00:42:55.910 --> 00:43:00.070
So that brings us to the end of our list
of scriptability enhancements in Panther.

00:43:00.130 --> 00:43:01.350
Slide, please.

00:43:01.440 --> 00:43:04.500
So I now want to talk about the small
number of things that you really

00:43:04.500 --> 00:43:09.110
need to be aware of as you move your
applications and your scripts to Panther.

00:43:10.860 --> 00:43:13.910
The first one is that with
the new bundled formats,

00:43:13.960 --> 00:43:16.730
if you're using path to
me in a bundled applet,

00:43:16.930 --> 00:43:19.960
you will get a path return
that ends with a colon.

00:43:20.020 --> 00:43:27.830
What this means is if your script
is relying on getting the container

00:43:28.290 --> 00:43:28.970
for the applet by just removing
the last element in the path,

00:43:28.970 --> 00:43:28.970
that logic is going to break.

00:43:29.180 --> 00:43:30.490
Of course, it's pretty easy to fix.

00:43:30.510 --> 00:43:32.440
You just remove the colon
and the last element.

00:43:32.480 --> 00:43:35.670
However, if you're using a bundle,
what you really should do is use it

00:43:35.670 --> 00:43:44.860
as a bundle and store the files that
you're trying to access inside the bundle

00:43:44.860 --> 00:43:48.170
in the contents resources directory,
in which case you want the colon

00:43:48.170 --> 00:43:48.170
there because you're going to have
to add contents and resources.

00:43:48.420 --> 00:43:52.260
So the next change is that we've changed
the default behavior of offsetof,

00:43:52.270 --> 00:43:54.890
and I'll go into more detail in a moment.

00:43:56.140 --> 00:44:00.420
This we also told you last year,
and we're reinforcing again this year,

00:44:00.420 --> 00:44:03.020
that you should avoid
implicitly encoded text types.

00:44:03.020 --> 00:44:05.950
And again, I'll go into a little bit
more detail on further slides.

00:44:05.960 --> 00:44:08.550
The final one,
and I alluded to this earlier in

00:44:08.550 --> 00:44:13.420
talking about the improved performance
of Open Dictionary in Script Editor 2.

00:44:13.420 --> 00:44:16.970
We're using a new API that
only sees applications that

00:44:17.270 --> 00:44:21.880
have NSAppleScriptEnabled
equals yes in their Info.plist.

00:44:21.880 --> 00:44:24.720
Now we told you about this last year,
so we hope that all of your

00:44:24.720 --> 00:44:26.720
applications now have this setting.

00:44:26.970 --> 00:44:29.960
But if they don't,
your application won't show up

00:44:29.960 --> 00:44:31.490
in the Open Dictionary list.

00:44:31.570 --> 00:44:35.280
Now of course your customers can still
drag the application over Script Editor,

00:44:35.280 --> 00:44:37.400
and can still browse to your application.

00:44:37.500 --> 00:44:39.640
But if you want it to show
up in Open Dictionary,

00:44:39.650 --> 00:44:42.440
you will need to add this
setting in your next release.

00:44:42.440 --> 00:44:44.730
So, slide please.

00:44:45.870 --> 00:44:52.050
So, up to AppleScript 1.9.1,
offset of always considered

00:44:52.050 --> 00:44:54.300
case and ignore diacriticals.

00:44:54.330 --> 00:44:58.800
This was in fact the opposite of the
defaults in the Apps Script runtime.

00:44:58.900 --> 00:45:04.230
And in fact,
the scripting edition didn't honor

00:45:04.230 --> 00:45:04.230
ignoring and considering statements.

00:45:04.710 --> 00:45:10.010
What we decided to do in
AppleScript 1.9.2-- slide,

00:45:10.010 --> 00:45:10.010
please--

00:45:10.570 --> 00:45:13.730
is making the default behavior
match the AppleScript defaults

00:45:13.730 --> 00:45:17.250
so the system is more consistent,
and make sure that offset of honors

00:45:17.250 --> 00:45:19.360
considering ignoring statements.

00:45:19.480 --> 00:45:24.490
What this means is if your script
depends on the old behavior,

00:45:24.510 --> 00:45:27.640
you're going to need to add considering
case and ignoring diacritical statements

00:45:27.710 --> 00:45:30.660
around your uses of offset of.

00:45:30.660 --> 00:45:32.770
Hang on.

00:45:33.740 --> 00:45:35.700
Okay.

00:45:35.700 --> 00:45:39.960
Let's get back to where...
There is one caveat,

00:45:39.960 --> 00:45:40.700
however.

00:45:40.700 --> 00:45:45.370
About a week and a half ago,
the underlying API that we

00:45:45.370 --> 00:45:51.410
used to implement ignoring
diacriticals was changed on us,

00:45:51.410 --> 00:45:54.690
so that in fact,
in the developer preview,

00:45:54.690 --> 00:45:54.690
ignoring diacriticals won't work.

00:45:54.690 --> 00:45:54.690
But we will fix this for Panther.

00:45:56.020 --> 00:45:56.680
Next slide, please.

00:45:56.680 --> 00:46:01.130
So you need to avoid using
implicitly encoded text types,

00:46:01.170 --> 00:46:03.940
specifically type text,
and the reason is it's incapable of

00:46:03.940 --> 00:46:05.700
representing international characters.

00:46:05.700 --> 00:46:09.200
And in fact, you want to also avoid type
C string and type P string.

00:46:09.200 --> 00:46:12.350
Not only can they not represent
international characters,

00:46:12.350 --> 00:46:15.090
they don't support a full
set of text coercions.

00:46:15.700 --> 00:46:18.530
We're deprecating them in Panther,
and we will remove them

00:46:18.530 --> 00:46:20.560
in a future release,
so you need to move off

00:46:20.560 --> 00:46:21.800
of these text types.

00:46:21.800 --> 00:46:25.860
And what we suggest instead is
that you use type Unicode text.

00:46:25.860 --> 00:46:27.960
Thanks, Tim.

00:46:30.070 --> 00:46:32.260
So those are the small number of
changes you need to be aware of as you

00:46:32.260 --> 00:46:34.160
move your scripts and apps to Panther.

00:46:34.160 --> 00:46:36.200
And I'd just like to briefly
mention Apple Script Studio.

00:46:36.320 --> 00:46:39.220
I'm going to not steal
too much of Tim's thunder.

00:46:39.380 --> 00:46:42.800
We definitely like to thank all
of you for the great number of

00:46:42.810 --> 00:46:44.560
Studio apps you've been writing.

00:46:44.670 --> 00:46:47.510
It's really exciting to see
all the new apps out there.

00:46:47.510 --> 00:46:49.940
And in fact,
if you're interested in Studio,

00:46:49.940 --> 00:46:53.450
you may want to go to the Migrating to
Mac OS X session on Thursday morning.

00:46:53.450 --> 00:46:56.540
I understand a representative from
Pixar is going to be showing and

00:46:56.780 --> 00:47:01.140
talking about the Studio application
they used to move 300 of their

00:47:01.210 --> 00:47:04.230
users from Mac OS 9 to Mac OS X.

00:47:05.780 --> 00:47:07.740
We're going to be shipping
AppleScript Studio 1.3.

00:47:07.740 --> 00:47:11.240
It's in the developer preview,
and it's got a handful of new features,

00:47:11.350 --> 00:47:16.140
a new property,
a couple of new event handlers,

00:47:16.140 --> 00:47:22.490
and the major new feature,
which is very exciting,

00:47:22.490 --> 00:47:22.720
and Tim's going to demo on Wednesday,
you can now write

00:47:22.720 --> 00:47:22.720
AppleScript Studio plugins
for the new Xcode IDE.

00:47:23.460 --> 00:47:26.400
and as I mentioned,
Wednesday afternoon Tim will go

00:47:26.490 --> 00:47:28.640
through this in great detail.

00:47:30.070 --> 00:47:34.250
So since you've been such a
great audience in putting up with

00:47:34.250 --> 00:47:37.940
me up here instead of a Chris,
I thought I'd actually bring up a

00:47:37.940 --> 00:47:41.030
Chris to talk to you about some of
the things he talked about last year.

00:47:41.080 --> 00:47:43.750
So Chris, please come up.

00:47:46.000 --> 00:47:48.260
Tim keeps watching the slides.

00:47:48.260 --> 00:47:49.680
Thank you, Todd.

00:47:49.730 --> 00:47:53.140
So that doesn't look quite right.

00:47:53.190 --> 00:47:56.490
Could you... Thank you.

00:47:56.740 --> 00:48:01.980
Alright, so last year, slide please,
I was up here talking to you about

00:48:01.980 --> 00:48:04.460
all the nifty new stuff we were
going to do over the following year,

00:48:04.460 --> 00:48:07.030
that is to say, by now.

00:48:07.250 --> 00:48:08.690
So, how do we do?

00:48:08.690 --> 00:48:11.410
Well, you know,
in theory there's no difference

00:48:11.420 --> 00:48:13.260
between theory and practice,
right?

00:48:13.260 --> 00:48:14.840
So, reality check time.

00:48:14.840 --> 00:48:21.830
What we talked about last year was an
XML replacement for the old AET resource

00:48:21.830 --> 00:48:25.060
format for dictionaries called SDEF.

00:48:25.120 --> 00:48:28.660
We're going to have a new API called
Carbon Scripting that would make it

00:48:28.660 --> 00:48:33.260
much easier to make your application
scriptable if you were writing in Carbon.

00:48:34.240 --> 00:48:36.680
We'd allow you to create
scriptable plugins,

00:48:36.850 --> 00:48:40.010
both for applications and as
part of AppleScript itself.

00:48:40.040 --> 00:48:47.010
We're going to start moving away from
four character codes for terminology,

00:48:47.040 --> 00:48:50.820
and we're going to introduce a
major new rev of AppleScript itself

00:48:50.820 --> 00:48:51.920
called AppleScript 10.

00:48:52.860 --> 00:48:54.710
So,

00:48:55.110 --> 00:48:57.280
This year we have some good news,
we have some bad news,

00:48:57.280 --> 00:48:59.700
and we have some slightly weird news.

00:48:59.700 --> 00:49:01.780
So, slide please.

00:49:02.160 --> 00:49:03.820
So the good news first.

00:49:03.830 --> 00:49:04.860
SDEF actually shipped.

00:49:05.070 --> 00:49:10.300
It's there, it's usable,
we have a few clients,

00:49:10.420 --> 00:49:16.160
and we've made a few improvements
to the SDEF format itself and the

00:49:16.160 --> 00:49:19.820
SDP tool that works with it in Panther.

00:49:19.840 --> 00:49:22.240
And the cool thing about this is,
and this is one of the reasons we

00:49:22.240 --> 00:49:27.380
moved to XML in the first place,
is that we can actually make changes

00:49:27.380 --> 00:49:30.260
to the format without incredible
pain in breaking everybody.

00:49:30.260 --> 00:49:33.690
So it's all backward
compatible and it all works.

00:49:34.320 --> 00:49:37.500
We have several internal clients now.

00:49:37.800 --> 00:49:42.880
Mail, iChat, and I believe Xcode are all
using SDEF to generate their

00:49:42.880 --> 00:49:45.420
scripting terminology in Panther.

00:49:45.420 --> 00:49:47.610
So that's very cool,
especially because it forced us to

00:49:47.610 --> 00:49:50.800
fix several things that were broken.

00:49:51.160 --> 00:49:53.810
Direct support in
Cocoa scripting is still coming.

00:49:53.820 --> 00:49:58.680
For now you have to use SDP to
turn your SDEF into a script

00:49:58.730 --> 00:50:01.170
suite and script terminology file.

00:50:01.560 --> 00:50:02.500
and others.

00:50:02.500 --> 00:50:04.280
So, we're working on that.

00:50:04.280 --> 00:50:05.400
Maybe Panther, maybe not.

00:50:05.400 --> 00:50:06.820
We're working on that.

00:50:06.880 --> 00:50:08.760
Okay, next slide.

00:50:08.850 --> 00:50:10.520
The bad news.

00:50:10.520 --> 00:50:11.400
Here's what didn't make it.

00:50:11.400 --> 00:50:13.900
Codeless terminology and AppleScript 10.

00:50:13.900 --> 00:50:18.020
Now, I want to be clear here that we
are still planning on doing these.

00:50:18.020 --> 00:50:19.360
We haven't given up.

00:50:19.360 --> 00:50:21.360
However,
they're not ready for prime time yet.

00:50:21.360 --> 00:50:25.870
In fact, they're not even really
ready for late night.

00:50:26.450 --> 00:50:30.480
Hopefully next year I will have some
good news on this slide instead.

00:50:30.480 --> 00:50:33.340
Alright, next, the weird news.

00:50:33.390 --> 00:50:37.270
So, Carbon scripting, you know, the

00:50:38.080 --> 00:50:39.660
We really, really liked Cocoa Scripting.

00:50:39.660 --> 00:50:41.500
We liked what it does for you.

00:50:41.500 --> 00:50:44.200
We liked the way it very neatly
meshes with your application.

00:50:44.200 --> 00:50:47.960
You have to put in very little effort to
make your Cocoa application scriptable,

00:50:47.960 --> 00:50:51.540
and that's really what we wanted
to emulate with Carbon Scripting.

00:50:51.640 --> 00:50:55.340
So it was supposed to be very much
a parallel to Cocoa Scripting.

00:50:55.340 --> 00:50:58.960
It was built around object methods
instead of these accessor functions,

00:50:58.960 --> 00:51:01.730
which you largely had to write yourself.

00:51:01.850 --> 00:51:06.220
And it would just do a lot more for
you than the old object support did.

00:51:06.270 --> 00:51:08.240
So, you know, we thought about, you know,
we were looking at this

00:51:08.240 --> 00:51:10.380
and trying to design it,
and you know, looking at all the work,

00:51:10.430 --> 00:51:12.580
and saying, "Okay, it's going to be just
like Cocoa Scripting,

00:51:12.580 --> 00:51:13.750
and okay,
so we have to write all this stuff,

00:51:13.800 --> 00:51:15.160
and it's going to be just
like Cocoa Scripting,

00:51:15.190 --> 00:51:18.030
and we have to test it,
and it's going to be just

00:51:18.030 --> 00:51:19.850
like Cocoa Scripting,
and we have to document it,

00:51:19.850 --> 00:51:25.780
and it's going to be just like
Cocoa Scripting." What would happen

00:51:25.780 --> 00:51:25.780
if we just used Cocoa Scripting?

00:51:26.370 --> 00:51:30.970
Well, you know, we tried it,
and it actually works astonishingly well.

00:51:31.030 --> 00:51:33.080
Next.

00:51:36.030 --> 00:51:36.860
No lie.

00:51:36.900 --> 00:51:37.820
It really does.

00:51:37.820 --> 00:51:40.980
What you do is you
link in Foundation Kit,

00:51:40.980 --> 00:51:42.320
which has all the scripting support.

00:51:42.320 --> 00:51:47.810
You write Objective-C classes that
essentially front-end all your scripting,

00:51:47.820 --> 00:51:50.460
and they talk to your real
Carbon implementation.

00:51:50.460 --> 00:51:53.670
And you add one line
to your initialization,

00:51:53.670 --> 00:51:56.040
and it pretty much just works.

00:51:57.040 --> 00:51:59.660
So you can use this to
do scriptable plug-ins.

00:51:59.670 --> 00:52:01.520
System Events does this today.

00:52:01.520 --> 00:52:04.560
It's actually been doing
them for several releases.

00:52:04.560 --> 00:52:06.360
It's all already documented.

00:52:06.360 --> 00:52:08.800
And it also works on
any version of Mac OS X.

00:52:08.800 --> 00:52:11.490
You don't have to wait
for Panther to use it.

00:52:11.560 --> 00:52:14.860
There are some more details
on this in Session 4.14,

00:52:14.980 --> 00:52:17.410
which I completely forget
exactly when it is,

00:52:17.500 --> 00:52:19.770
but go see that one,
Making Your Carbon and

00:52:19.770 --> 00:52:21.920
Cocoa Applications Scriptable.

00:52:21.920 --> 00:52:24.500
So, you know, this sounds,
this is pretty cool, right?

00:52:24.500 --> 00:52:27.000
You know, it works, it's documented,
it's there.

00:52:27.000 --> 00:52:29.170
Hang on and listen to the fine print.

00:52:29.180 --> 00:52:32.090
Next slide.

00:52:33.160 --> 00:52:36.600
So first off,
this is not completely free.

00:52:36.600 --> 00:52:39.540
There are significant
runtime costs to this.

00:52:39.540 --> 00:52:41.420
Depending on if you do
sort of the naive approach,

00:52:41.420 --> 00:52:44.740
it can actually add several seconds
to your application launch time.

00:52:44.740 --> 00:52:48.720
There are ways around this, however,
and we have some documentation

00:52:48.820 --> 00:52:50.920
prepared for those.

00:52:50.920 --> 00:52:55.110
The other thing is that writing glue to
your existing application might be hard,

00:52:55.120 --> 00:52:58.360
depending on how your
application is implemented.

00:52:58.360 --> 00:53:00.610
Of course, you're probably going to
have that problem no matter

00:53:00.610 --> 00:53:01.740
what kind of API we provided.

00:53:01.740 --> 00:53:08.940
There's only so far we can pull a really
old and crusty application design.

00:53:08.940 --> 00:53:11.190
The other problems have to do
with Cocoa Scripting itself.

00:53:11.310 --> 00:53:13.700
Cocoa Scripting,
while it's pretty darn good,

00:53:13.700 --> 00:53:14.790
is not perfect.

00:53:14.790 --> 00:53:18.220
Its error handling is, shall we say,
substandard.

00:53:18.250 --> 00:53:23.570
However,
changes in Panther correct a lot of that.

00:53:23.570 --> 00:53:27.700
You can now get in sort of through
the back door to do all the things

00:53:27.700 --> 00:53:29.900
that Cocoa Scripting won't do for you,
and you weren't able

00:53:29.900 --> 00:53:30.950
to do that in Jaguar.

00:53:30.960 --> 00:53:32.860
So you can at least fix things yourself.

00:53:32.860 --> 00:53:35.070
In the future,
we hope to improve Cocoa Scripting

00:53:35.070 --> 00:53:40.460
so that it really does handle all
this sort of thing correctly for you.

00:53:40.460 --> 00:53:44.270
Pretty much all of our attention in
terms of making applications scriptable

00:53:44.270 --> 00:53:46.690
will be focused on Cocoa Scripting.

00:53:47.980 --> 00:53:49.600
Next.

00:53:49.970 --> 00:53:51.200
Oh, yes.

00:53:51.200 --> 00:53:52.510
So, summary.

00:53:52.820 --> 00:53:54.490
So, SDEV is here today.

00:53:54.500 --> 00:53:55.100
Use it.

00:53:55.100 --> 00:53:58.890
It's a lot nicer than writing
sweet script terminology

00:53:58.960 --> 00:54:01.100
or AET resources by hand.

00:54:01.100 --> 00:54:01.940
So please use it.

00:54:02.030 --> 00:54:04.700
Give us feedback.

00:54:04.700 --> 00:54:06.500
Carbon scripting is Cocoa scripting.

00:54:06.500 --> 00:54:09.920
So, you know,
this solution is not for everyone.

00:54:10.120 --> 00:54:13.000
So, you know,
go to session 414 and figure out whether

00:54:13.000 --> 00:54:14.600
or not this actually works for you.

00:54:14.600 --> 00:54:18.040
It does work,
but it's not completely ideal.

00:54:18.520 --> 00:54:21.660
and still to come, AppleScript 10,
Codeless Terminology.

00:54:21.660 --> 00:54:24.110
We're actually going to
do this stuff for real.

00:54:24.160 --> 00:54:25.340
At least, that's my plan.

00:54:25.400 --> 00:54:29.400
So, that's it for me.

00:54:29.510 --> 00:54:30.090
Thank you very much.

00:54:30.190 --> 00:54:35.610
Come on back, Todd.

00:54:37.770 --> 00:54:40.460
All right,
well I'd like to conclude with a,

00:54:40.490 --> 00:54:42.560
we've run through some
of the documentation

00:54:42.620 --> 00:54:44.150
resources we have available.

00:54:44.180 --> 00:54:46.140
Next slide please.

00:54:46.320 --> 00:54:50.500
We've got a substantial reference library
consisting of lots of different pieces

00:54:50.500 --> 00:54:53.620
I'm going to walk through one by one.

00:54:53.800 --> 00:54:56.280
We've got a lot of updated content
in the Panther Help Center,

00:54:56.280 --> 00:55:00.100
which you can see much of it is
ready and in the developer preview.

00:55:00.100 --> 00:55:03.160
And a little bit of idea about
what we're planning for the future,

00:55:03.220 --> 00:55:05.420
updating the language guide, of course.

00:55:05.420 --> 00:55:09.360
And we're planning to write a new
book on scripting interface guidelines

00:55:09.360 --> 00:55:13.030
to give all of you who are making
your applications scriptable a better

00:55:13.440 --> 00:55:16.440
idea of how to make your application
scriptable in a way that's going to

00:55:16.440 --> 00:55:19.480
be consistent across the platform
with other applications so it's

00:55:19.480 --> 00:55:22.020
easier for your customers to learn
how to script your application.

00:55:22.020 --> 00:55:23.540
Slide, please.

00:55:23.700 --> 00:55:26.380
We're excited about it too.

00:55:27.770 --> 00:55:29.820
So we've got lots of
documentation for scripters.

00:55:29.820 --> 00:55:31.890
Of course,
the language guide is useful for

00:55:31.900 --> 00:55:33.650
application developers as well.

00:55:33.680 --> 00:55:34.630
Next slide, please.

00:55:34.740 --> 00:55:37.920
We've got lots of documentation
for application developers,

00:55:37.920 --> 00:55:42.040
whether you're Carbon or Cocoa,
and of course, we just learned that

00:55:42.040 --> 00:55:44.100
sometimes it doesn't matter.

00:55:44.180 --> 00:55:45.440
Next slide, please.

00:55:45.460 --> 00:55:48.110
Lots of studio documentation.

00:55:48.590 --> 00:55:49.500
Next slide.

00:55:49.500 --> 00:55:52.190
We've got a series of technical
notes about specific areas of

00:55:52.190 --> 00:55:55.140
AppleScript and related technologies.

00:55:55.140 --> 00:55:56.880
Next slide, please.

00:55:56.880 --> 00:56:01.940
And this particular reference
includes links to the previous ones,

00:56:01.940 --> 00:56:06.990
as well as a lot of other technical
notes that you might find useful.

00:56:06.990 --> 00:56:08.040
Next slide.

00:56:08.040 --> 00:56:12.170
There are some technical Q&As where
we've got questions that developers

00:56:12.170 --> 00:56:12.170
have asked over time and answers,
as well as a lot of sample code.

00:56:12.910 --> 00:56:16.260
We've got the AppleScript website,
which is a great one-stop shop.

00:56:16.320 --> 00:56:19.800
It has links to many of the
resources I just talked about.

00:56:19.910 --> 00:56:23.510
There are lots of third-party websites,
perhaps maintained by some of

00:56:23.510 --> 00:56:26.510
you out there in the audience,
and we thank you for that.

00:56:26.610 --> 00:56:32.730
There's the O'Reilly book,
as well as many other

00:56:32.730 --> 00:56:33.020
third-party books on AppleScript,
and there are more coming all the time.

00:56:34.020 --> 00:56:37.740
So I'd just like to sum up by
quickly going over what's next.

00:56:37.750 --> 00:56:44.500
We're going to be shipping
AppleScript 1.9.2 in Panther,

00:56:44.510 --> 00:56:50.380
and you have a version of that with the
developer preview with lots of enhanced

00:56:50.380 --> 00:56:50.380
scriptability and some great new tools.

00:56:50.380 --> 00:56:50.380
And we'll be working on delivering
AppleScript 10 to you after Panther.

00:56:50.890 --> 00:56:54.920
So what can you do with the
developer preview that I'm sure

00:56:54.920 --> 00:56:59.630
many of you have picked up already?

00:56:59.630 --> 00:56:59.630
Well, if you're an application developer,
you can test your application,

00:56:59.630 --> 00:56:59.630
make sure it still works.

00:56:59.850 --> 00:57:01.830
You can, I hope,
take advantage of some of the

00:57:01.830 --> 00:57:04.730
enhancements to Cocoa Scripting
we've referred to and improve

00:57:04.730 --> 00:57:07.600
the error handling of the
scriptability in your application.

00:57:07.600 --> 00:57:12.100
We strongly encourage you to adopt the
new OSA API so that your applications

00:57:12.100 --> 00:57:15.870
work with not only the old formats,
but also the new bundle formats.

00:57:15.920 --> 00:57:19.290
And definitely start writing
terminology using SDEF.

00:57:19.410 --> 00:57:23.700
As Chris explained, we've got a couple of
clients inside Apple,

00:57:23.700 --> 00:57:25.200
and we'd like to have you join us.

00:57:25.200 --> 00:57:28.040
If you're a scripter,
there were the few changes that

00:57:28.040 --> 00:57:32.300
I talked about that you need to prepare
your scripts for if they're affected,

00:57:32.300 --> 00:57:34.460
and test them on the developer
preview to make sure that they'll

00:57:34.460 --> 00:57:36.690
run when you move to Panther.

00:57:37.540 --> 00:57:40.280
And with that,
we'll get to kind of the standard slides.

00:57:40.390 --> 00:57:41.520
These are some of the contacts.

00:57:41.620 --> 00:57:43.550
Of course, you all know Sal.

00:57:43.570 --> 00:57:45.260
Now you've met me.

00:57:45.450 --> 00:57:49.450
Developer technical support and the
engineer who covers AppleScript,

00:57:49.450 --> 00:57:50.420
Jean-Montbriand.

00:57:50.460 --> 00:57:52.600
And Jason Yeo,
the Mac OS Technology Manager,

00:57:52.600 --> 00:57:55.480
who's going to be up here
shortly to help run the Q&A.

00:57:56.060 --> 00:57:56.790
Next slide.

00:57:56.840 --> 00:57:59.860
We've got a great slate
of sessions this week.

00:57:59.860 --> 00:58:01.910
The order is a little bit weird,
but we're going to do

00:58:01.910 --> 00:58:04.360
the feedback forum next,
actually, on Wednesday morning,

00:58:04.360 --> 00:58:05.640
so we hope to see you there.

00:58:05.640 --> 00:58:08.750
We'd love to get your
feedback on what you'd like,

00:58:08.750 --> 00:58:12.910
what we've talked about today,
what you see in the next couple days

00:58:12.910 --> 00:58:17.770
as you work with the developer preview,
what you'd like to see in the future.

00:58:17.860 --> 00:58:21.380
We've got sessions on
interactions with other important

00:58:21.380 --> 00:58:21.590
Apple technologies like QuickTime,
of course the Studio session.

00:58:22.100 --> 00:58:24.390
Making your application scriptable.

00:58:24.390 --> 00:58:26.000
Next slide.

00:58:26.000 --> 00:58:29.350
And a set of sessions on
Friday dealing with different

00:58:29.350 --> 00:58:31.840
aspects of using scriptability to
solve different types of problems,

00:58:31.840 --> 00:58:35.280
whether you're testing software
or whether you're trying to make

00:58:35.290 --> 00:58:38.590
your life as a system administrator
much easier on Mac OS X.