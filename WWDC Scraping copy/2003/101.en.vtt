WEBVTT

00:00:26.750 --> 00:00:29.740
Good afternoon.

00:00:29.770 --> 00:00:30.580
I'm Craig Keithley.

00:00:30.580 --> 00:00:33.110
I'm the security technology
evangelist in Apple's Worldwide

00:00:33.120 --> 00:00:34.440
Developer Relations Group.

00:00:34.580 --> 00:00:36.600
I'm really pleased by this turnout.

00:00:36.760 --> 00:00:39.940
Security is a really important
part of our architecture,

00:00:39.940 --> 00:00:44.400
and it should be an important part of
your applications and solutions as well.

00:00:44.460 --> 00:00:46.730
Today's session,
we're going to give you an overview

00:00:46.730 --> 00:00:48.260
of our security architecture.

00:00:48.300 --> 00:00:51.090
We're going to go into a bit of
the structure and what pieces

00:00:51.090 --> 00:00:54.190
are there and what they're for
and how you should use them.

00:00:54.250 --> 00:00:58.570
So without further ado, Perry the Cynic.

00:01:06.500 --> 00:01:08.290
Okay, good.

00:01:08.580 --> 00:01:11.500
I'm glad somebody cares about security.

00:01:11.790 --> 00:01:14.490
Never know, five in the evening.

00:01:15.770 --> 00:01:19.390
Okay, security is different.

00:01:19.520 --> 00:01:22.680
Most features, you know,
you know you want it,

00:01:22.830 --> 00:01:25.150
it'll wow the users,
it'll sell lots of copies,

00:01:25.260 --> 00:01:31.310
that's why you're using a technology
and you just want to use it right.

00:01:31.310 --> 00:01:31.310
Security,

00:01:31.870 --> 00:01:35.300
There are a few applications where
security actually is the main feature,

00:01:35.300 --> 00:01:38.700
you know, your typical encryption
utilities and stuff like that.

00:01:38.700 --> 00:01:41.010
But for most of you,
it's something you put into

00:01:41.120 --> 00:01:43.990
your applications so things
don't go disastrously wrong

00:01:44.130 --> 00:01:48.170
and you get really bad press,
you know, like security violation

00:01:48.740 --> 00:01:51.460
in public disclosure,
that kind of stuff.

00:01:51.460 --> 00:01:54.500
So for most of you, security is sort of a
defensive kind of thing.

00:01:54.500 --> 00:02:00.900
There are situations where it sort of
adds to the value of a feature because

00:02:00.900 --> 00:02:05.810
you can make it work better than it could
if you didn't have any way of determining

00:02:05.810 --> 00:02:10.820
who's who and who's allowed to get
what they're supposed to be getting.

00:02:10.870 --> 00:02:14.610
But I think for most of you,
the experience is that security tends

00:02:14.670 --> 00:02:17.220
to get in the way of your application.

00:02:17.250 --> 00:02:21.850
And I've certainly seen a lot of
application programmers that spent

00:02:21.850 --> 00:02:25.180
a lot of time just making that
bad security get out of the way so

00:02:25.180 --> 00:02:28.140
they can get their feature to work.

00:02:28.420 --> 00:02:34.160
One thing that you're probably
all noticed at least once,

00:02:34.160 --> 00:02:37.850
and if you haven't, you will,
security operates on

00:02:37.860 --> 00:02:39.300
the weakest link effect.

00:02:39.430 --> 00:02:42.910
There is nothing that
is absolutely secure,

00:02:43.290 --> 00:02:47.710
but if your stuff is the thing
with the weakest security,

00:02:47.850 --> 00:02:51.680
the weakest application security-wise
or the weakest library security-wise,

00:02:51.680 --> 00:02:54.980
the attackers are going to come after
you because you're the easiest target.

00:02:54.980 --> 00:02:59.530
So like the old joke with
the two people in the forest,

00:02:59.530 --> 00:03:01.540
which we've all heard,
so I won't repeat it.

00:03:01.600 --> 00:03:06.580
Your task primarily is not
to be the easiest mark when

00:03:06.580 --> 00:03:09.220
the bad hackers come calling.

00:03:09.510 --> 00:03:11.140
So, what are we going to talk about?

00:03:11.220 --> 00:03:13.720
This is security architecture overview.

00:03:13.720 --> 00:03:17.240
So, you're not going to see any lines
of APIs scrolling over the screen.

00:03:17.260 --> 00:03:19.100
That's not the level of detail.

00:03:19.190 --> 00:03:23.220
I am going to tell you what
we've got in big brushstrokes.

00:03:23.240 --> 00:03:26.750
I'm going to tell you
what to look out for,

00:03:26.980 --> 00:03:31.700
how these things are supposed to be used,
and basically, if you have a problem,

00:03:31.700 --> 00:03:35.940
which document you go to first,
which API header you go to first,

00:03:35.940 --> 00:03:38.960
to see if maybe you can
solve your problem there.

00:03:39.420 --> 00:03:41.800
Well, technologies, what have we got?

00:03:41.910 --> 00:03:46.210
A lot of what we got
is industry standard.

00:03:46.980 --> 00:03:47.900
It's UNIX.

00:03:47.900 --> 00:03:50.760
We're all making a big deal
out of how this is really UNIX,

00:03:50.940 --> 00:03:54.380
so you'll find
UNIX security technologies,

00:03:54.380 --> 00:03:55.700
all the standard stuff.

00:03:55.860 --> 00:03:58.820
There is Mach 3 under there.

00:03:58.820 --> 00:04:02.560
Most of the time you won't notice,
most of the time you don't have to know,

00:04:02.560 --> 00:04:05.620
but if you know something about
Mach or if you run into something

00:04:05.620 --> 00:04:09.700
having to do with Mach ports,
that's a part of the security here.

00:04:09.700 --> 00:04:13.270
You can certainly break an
OS X system really wide open by

00:04:13.270 --> 00:04:15.860
doing stupid things with Mach ports.

00:04:15.860 --> 00:04:20.440
We use the common data security
architecture API infrastructure

00:04:20.440 --> 00:04:25.060
that's an open group standard,
and it's in there.

00:04:25.200 --> 00:04:26.730
That's how you do crypto.

00:04:27.030 --> 00:04:29.930
We have pretty darn good
support for Kerberos 5,

00:04:29.930 --> 00:04:31.940
this time around for Panther.

00:04:31.940 --> 00:04:36.110
As a matter of fact,
we have a strategy to Kerberize just

00:04:36.120 --> 00:04:39.380
about every client server application.

00:04:39.440 --> 00:04:43.460
And you'll find a lot of the
open source stuff in there:

00:04:43.460 --> 00:04:44.820
SSH, OpenSSL, all that good stuff.

00:04:44.820 --> 00:04:47.710
If you can't find it in
the system out of the box,

00:04:47.710 --> 00:04:50.250
you can probably just compile it there.

00:04:50.340 --> 00:04:53.740
You may have heard of UNIX ports,
which makes it pretty easy to get stuff

00:04:53.790 --> 00:04:55.850
onto OS X if it's reasonably portable.

00:04:55.860 --> 00:05:02.480
And let's just think.

00:05:03.700 --> 00:05:09.460
: Okay, well of course we can't just
do the open source stuff.

00:05:09.460 --> 00:05:10.690
We want you to pay extra money.

00:05:10.700 --> 00:05:14.700
We want everybody to pay extra money,
so we have Mac OS X specific stuff.

00:05:14.700 --> 00:05:17.560
We have Keychains.

00:05:17.630 --> 00:05:21.550
Everybody here know what a Keychain is?

00:05:22.100 --> 00:05:25.910
This is where you put your
secrets so they don't leak out.

00:05:26.080 --> 00:05:29.080
We have something called
the Authorization API,

00:05:29.080 --> 00:05:31.930
which you may not have heard of,
but you should,

00:05:32.230 --> 00:05:35.750
because it's pretty darn useful,
particularly if you make local

00:05:35.750 --> 00:05:37.730
client-server arrangements.

00:05:37.950 --> 00:05:43.060
It's basically a way to deal with
authorizations in the system.

00:05:43.190 --> 00:05:47.690
We have X.509 Certificate Support and
Associated Trust Management.

00:05:47.690 --> 00:05:50.190
That's, we think,
a heck of a lot better than

00:05:50.240 --> 00:05:52.100
what you get out of OpenSSL.

00:05:52.100 --> 00:05:57.450
I put directory services on
here not because it's something

00:05:57.450 --> 00:06:01.270
that the security group does,
although we talk to those

00:06:01.360 --> 00:06:04.170
folks once in a while,
but if your security problem is how

00:06:04.170 --> 00:06:08.620
to look up users and find them and
enumerate them and figure out what

00:06:08.820 --> 00:06:11.520
they're supposed to be allowed to do,
directory services is probably

00:06:11.590 --> 00:06:13.100
the API that you're going to use.

00:06:13.100 --> 00:06:15.600
that you want to go through.

00:06:17.360 --> 00:06:19.170
Alright, next level of detail.

00:06:19.170 --> 00:06:24.300
As I said at the beginning, as usual,
keep your questions, write them down,

00:06:24.300 --> 00:06:25.300
you can ask them at the end.

00:06:25.300 --> 00:06:29.710
We'll stick around for as long as it
takes to answer all of your questions.

00:06:33.410 --> 00:06:37.030
Which one of you is not comfortable
just dealing in Unix terms?

00:06:37.060 --> 00:06:39.170
Let's admit it.

00:06:39.700 --> 00:06:43.600
Raise your hands if this Unix thing
just freaks you out and you're sort of

00:06:43.650 --> 00:06:46.220
used to the OS 9 way of doing things.

00:06:46.410 --> 00:06:47.610
All right.

00:06:47.940 --> 00:06:50.030
Thank you.

00:06:50.350 --> 00:06:57.410
So, very briefly for you, unlike OS 9,
on UNIX, processes are hard separated

00:06:57.410 --> 00:06:58.480
with address spaces.

00:06:58.480 --> 00:07:02.240
Each process has its own address space,
and that's really the main

00:07:02.360 --> 00:07:04.190
point of security in UNIX.

00:07:04.310 --> 00:07:07.020
Within an address space,
you have the OS 9 game back,

00:07:07.020 --> 00:07:11.130
and everybody can look at each other's
data if they only figure out where it is.

00:07:11.190 --> 00:07:16.170
You can't really separate or
keep secrets within one process.

00:07:16.200 --> 00:07:19.350
So, the UNIX trick,
to the extent that it is a trick,

00:07:19.350 --> 00:07:22.850
is if you want to protect data,
stick it in its own process,

00:07:22.850 --> 00:07:26.190
or stick it in its own file
managed by its own process,

00:07:26.270 --> 00:07:28.790
and then that process can defend the
data against everybody else who's

00:07:28.830 --> 00:07:30.190
sitting in a different process.

00:07:30.200 --> 00:07:39.150
What you have is user identities,
user IDs, numbers, names, and groups.

00:07:39.180 --> 00:07:42.200
You have the UNIX file system
that is basically your primary

00:07:42.200 --> 00:07:42.200
way of labeling the data.

00:07:42.200 --> 00:07:44.220
Craig Keithley,
Perry 'the Cynic' Kiehtreiber So,

00:07:44.220 --> 00:07:44.500
the UNIX system is basically your
primary way of labeling the data.

00:07:44.500 --> 00:07:44.730
You can look at each other's data,
and everybody can look

00:07:44.740 --> 00:07:44.830
at each other's data.

00:07:44.830 --> 00:07:45.060
You can look at each other's data.

00:07:45.220 --> 00:07:46.370
Craig Keithley,
Perry 'the Cynic' Kiehtreiber with

00:07:46.490 --> 00:07:48.200
who owns it and who gets access to it.

00:07:49.320 --> 00:07:51.310
And, uh,

00:07:51.600 --> 00:07:54.750
You have the magic word user,
user number zero,

00:07:54.830 --> 00:07:58.500
who gets to do everything
in the system that he wants.

00:07:58.500 --> 00:08:01.060
At that point, my presentation said,
sort of, "the nuclear weapon of

00:08:01.060 --> 00:08:02.880
Unix," and they told me,
"Don't do that.

00:08:02.890 --> 00:08:06.500
It's bad." You're not supposed
to use scary words anymore.

00:08:06.500 --> 00:08:11.940
And we have the setUID facility,
which is essentially the one

00:08:11.940 --> 00:08:17.000
and only way that you can get
access to a user ID if you don't

00:08:17.000 --> 00:08:18.500
already have access to a user ID.

00:08:18.500 --> 00:08:23.350
That's basically the one Unix
mechanism for elevating privileges

00:08:23.350 --> 00:08:28.290
or getting access to stuff that
you don't already have access to.

00:08:29.680 --> 00:08:35.100
And cautionary words about root:
always a good idea.

00:08:35.290 --> 00:08:38.820
Root is dangerous, root is omnipotent,
root can do anything.

00:08:38.860 --> 00:08:41.540
Root can mess you up,
can delete your data,

00:08:41.720 --> 00:08:43.530
completely corrupt the system.

00:08:43.620 --> 00:08:47.880
So be very afraid if you write
code that runs with root privilege.

00:08:48.000 --> 00:08:51.010
The primary advice is don't
do it if you don't have to.

00:08:51.130 --> 00:08:54.360
If you have to, then...

00:08:54.640 --> 00:08:58.430
Know that you are dancing in a minefield
and either be an expert in how to do

00:08:58.430 --> 00:09:01.280
this right or hire yourself an expert.

00:09:01.380 --> 00:09:04.180
Writing root-level code,
if you're just sort of

00:09:04.180 --> 00:09:07.800
kind of understanding Unix,
is just not a good idea and it's

00:09:07.940 --> 00:09:13.050
worthwhile getting yourself at least a
consultant who understands this stuff

00:09:13.050 --> 00:09:15.620
if you're not comfortable with it.

00:09:15.750 --> 00:09:20.370
One principle about root code:
don't make it big.

00:09:20.650 --> 00:09:22.410
Make it really, really simple.

00:09:22.420 --> 00:09:25.930
Make it really, really small and make it
really easy to understand.

00:09:26.010 --> 00:09:32.740
Ideally, the code that you write that
runs with root privilege is about

00:09:32.740 --> 00:09:34.740
a page or two of source code.

00:09:34.740 --> 00:09:36.870
Of course, yeah, okay,
so your application may

00:09:36.870 --> 00:09:39.660
have 200,000 lines of code,
so what do you do?

00:09:39.800 --> 00:09:41.440
Remember process separation?

00:09:41.470 --> 00:09:43.540
This is how you do security in Unix.

00:09:43.540 --> 00:09:45.540
Take your root code,
make it as small as possible,

00:09:45.540 --> 00:09:45.540
and then you can start
to build your code.

00:09:45.540 --> 00:09:46.710
If you want to build your
code as small as possible,

00:09:46.710 --> 00:09:50.190
stick it in a separate process
so it runs as a process separate

00:09:50.210 --> 00:09:53.740
from your big application,
and then let the two talk to

00:09:53.740 --> 00:09:55.040
each other in a secure way.

00:09:55.040 --> 00:09:56.480
I'll tell you how later.

00:09:56.500 --> 00:09:57.580
We call this factoring.

00:09:57.580 --> 00:10:00.910
It's a little bit like the factoring
the OS 9 folks of you went through

00:10:00.910 --> 00:10:05.020
when you did Apple Script and
you factored your application.

00:10:05.140 --> 00:10:08.920
Anybody remember that?

00:10:08.930 --> 00:10:08.930
It's about the same idea.

00:10:09.000 --> 00:10:12.990
So, standard UNIX, marvelous UNIX.

00:10:12.990 --> 00:10:15.940
Not quite totally normal UNIX.

00:10:15.940 --> 00:10:18.000
There is a Mach microkernel in there.

00:10:18.000 --> 00:10:20.960
As I said,
most of the time you don't notice,

00:10:21.660 --> 00:10:27.750
but it is in there and it is not
separated from the UNIX kernel.

00:10:27.760 --> 00:10:30.000
The two are sort of sitting
there like Siamese twins.

00:10:30.000 --> 00:10:34.350
So, you have to understand that sometimes
it is possible to get things

00:10:34.510 --> 00:10:38.030
out of UNIX going the Mach route
that on a normal UNIX system

00:10:38.130 --> 00:10:39.970
you wouldn't be able to get.

00:10:40.120 --> 00:10:43.060
For example,
there are ways to get root privilege by

00:10:43.170 --> 00:10:46.000
going through the Mach passport facility.

00:10:46.000 --> 00:10:50.290
So, when you are doing security analysis,
if this is the kind of thing you do,

00:10:50.500 --> 00:10:51.400
keep that in mind.

00:10:51.490 --> 00:10:54.630
Otherwise, for the most part,
don't worry about it.

00:10:55.290 --> 00:10:58.100
The root user doesn't
actually exist by default.

00:10:58.100 --> 00:11:00.040
Well, okay, it exists,
but it doesn't have a password,

00:11:00.130 --> 00:11:02.920
so you can't log in as the root user.

00:11:02.920 --> 00:11:05.540
An administrator can go in, turn it on,
give it a password,

00:11:05.580 --> 00:11:09.910
it'll be a perfectly nice user,
but by default, it doesn't exist.

00:11:10.000 --> 00:11:12.600
And that's by design.

00:11:13.220 --> 00:11:16.700
We have invented a class of
users called administrators,

00:11:16.860 --> 00:11:20.900
which technically is just those
users that are in the admin group.

00:11:21.110 --> 00:11:24.340
And administrators can actually
do a lot of things to your system.

00:11:24.340 --> 00:11:28.750
If you look around your Mac OS X system,
Jaguar, Panther, earlier, doesn't matter,

00:11:29.050 --> 00:11:31.750
there's a lot of directories
that are writable by group admin.

00:11:31.980 --> 00:11:35.050
So admin users are almost root.

00:11:35.220 --> 00:11:37.430
Frankly, an admin user,
if he knows what he's doing,

00:11:37.540 --> 00:11:38.970
can get the root pretty easily.

00:11:39.200 --> 00:11:40.820
So look out for that group.

00:11:40.960 --> 00:11:44.960
Make sure you don't accidentally create
directories that belong to admin or

00:11:44.960 --> 00:11:50.660
are writable by admin unless you mean
them to be basically system opening.

00:11:51.430 --> 00:11:53.230
Just a few words about Mach.

00:11:53.230 --> 00:11:54.510
It's in there.

00:11:54.670 --> 00:11:56.280
You probably don't care about it.

00:11:56.280 --> 00:12:00.290
If for some reason you actually
want to use a Mach interface,

00:12:00.490 --> 00:12:01.330
it's a different world.

00:12:01.400 --> 00:12:02.880
It's not like sort of Unix.

00:12:03.060 --> 00:12:06.420
So get yourself a book, you know,
a nutshell book or whatever

00:12:06.490 --> 00:12:07.480
your preference is.

00:12:07.560 --> 00:12:09.320
Learn how to do this right.

00:12:09.350 --> 00:12:12.880
Basically, Mach ports,
Mach message ports are the

00:12:13.070 --> 00:12:15.120
big thing in Mach security.

00:12:15.160 --> 00:12:16.980
A Mach message port is an access right.

00:12:17.090 --> 00:12:19.500
You can pass it around
between processes and,

00:12:19.500 --> 00:12:22.340
well, this is how you do security.

00:12:22.380 --> 00:12:25.400
One warning word,
if you know about Mach and you want

00:12:25.540 --> 00:12:29.360
to play around with it in OS X,
we are actually using the Bootstrap

00:12:29.360 --> 00:12:31.580
port facility quite extensively.

00:12:31.600 --> 00:12:34.780
We're using Mach Bootstrap subsets.

00:12:34.860 --> 00:12:37.380
Again, if you don't know what this means,
never mind.

00:12:37.420 --> 00:12:40.840
But if you do, we are using this.

00:12:40.900 --> 00:12:45.990
Don't expect that every process in the
system has the same Mach Bootstrap.

00:12:47.840 --> 00:12:52.730
Common data security architecture.

00:12:52.730 --> 00:12:56.210
It's an open group standard,
you can tell by the word.

00:12:56.570 --> 00:12:58.800
We implemented that for Mac OS X.

00:12:58.800 --> 00:13:01.080
It's a pretty complete implementation.

00:13:01.090 --> 00:13:04.010
This is not a port of the
Intel reference platform.

00:13:04.030 --> 00:13:06.880
This is a completely new implementation.

00:13:07.050 --> 00:13:08.300
We've open sourced it.

00:13:08.410 --> 00:13:12.170
You can get it out of the CVS repository,
look at it, play around with it,

00:13:12.170 --> 00:13:14.290
be impressed with how great it is.

00:13:14.950 --> 00:13:18.430
It's C++, in case anybody cares.

00:13:18.810 --> 00:13:23.520
Basically, anything in the system, well,
almost anything in the system, excuse me,

00:13:23.530 --> 00:13:29.780
in the system that does cryptography is
actually doing it through the CDSA APIs.

00:13:29.830 --> 00:13:33.650
So, whenever you see something
doing encryption,

00:13:33.690 --> 00:13:37.780
whether it's disk images
or SSL or anything else,

00:13:37.820 --> 00:13:42.300
chances are, ultimately,
it's calling down into the CDSA layer.

00:13:42.360 --> 00:13:44.990
So,
what you see is that many times you're

00:13:44.990 --> 00:13:50.860
going to end up using the CDSA layer
implicitly by calling higher APIs.

00:13:51.410 --> 00:13:53.060
So, it's really great.

00:13:53.060 --> 00:13:56.530
I mean, the open group standard
is like 600 pages.

00:13:56.530 --> 00:14:00.970
I mean, you can spend many,
many weekends just reading the standard.

00:14:01.290 --> 00:14:04.510
And it's a very,
very powerful set of APIs.

00:14:04.600 --> 00:14:05.580
It's very flexible.

00:14:05.580 --> 00:14:07.900
It's all pluggable with plugins.

00:14:07.950 --> 00:14:09.840
It's also very verbose.

00:14:10.020 --> 00:14:12.740
I mean,
it basically takes about 50 lines of

00:14:12.840 --> 00:14:16.690
C code to just start the thing up,
you know, calling initialization

00:14:16.690 --> 00:14:18.220
and loading modules.

00:14:18.330 --> 00:14:23.490
So, unless this is something that you
really need to learn because your

00:14:23.490 --> 00:14:29.120
job is doing cryptography on OS X,
my advice would be that you should

00:14:29.120 --> 00:14:30.930
try to use higher-level APIs.

00:14:31.230 --> 00:14:35.470
For example, if you want to do SSL,
call the SSL APIs.

00:14:35.570 --> 00:14:39.140
They'll do all of this
nasty stuff under the hood.

00:14:39.170 --> 00:14:43.670
There are situations where, you know,
there isn't a higher-level API or

00:14:43.670 --> 00:14:45.980
it doesn't quite do what you want.

00:14:46.040 --> 00:14:49.080
One of the features of our APIs,
the Apple APIs,

00:14:49.210 --> 00:14:53.420
is that in almost all places,
if you look,

00:14:53.440 --> 00:14:58.570
there is an API function that gets you
CDSA data structures out from underneath.

00:14:58.680 --> 00:15:04.240
So, if a higher-level API gets you
90% to where you want to go,

00:15:04.470 --> 00:15:07.630
you can get the CDSA module
handles and attachment handles,

00:15:07.680 --> 00:15:11.440
make a couple of calls,
get that special extra option you needed,

00:15:11.610 --> 00:15:14.750
and then go back up and continue
on the higher-level API.

00:15:14.920 --> 00:15:17.740
So, that's really how you
should look at this.

00:15:19.750 --> 00:15:21.190
All right.

00:15:21.370 --> 00:15:26.310
Big building block number one: Keychains.

00:15:26.310 --> 00:15:26.310
So,

00:15:26.650 --> 00:15:27.360
You all have one.

00:15:27.620 --> 00:15:30.600
Well, at least if you have an OS X system
that you've ever logged into,

00:15:30.810 --> 00:15:32.170
you all have a Keychain.

00:15:32.310 --> 00:15:33.170
At least one.

00:15:33.300 --> 00:15:37.500
Because the system makes one for you
when you log in for the first time.

00:15:37.550 --> 00:15:42.490
A Keychain is a file in your home
directory where you can stick secrets.

00:15:42.500 --> 00:15:46.070
Passwords, keys,
all that stuff that you don't

00:15:46.070 --> 00:15:48.500
want just everybody to know.

00:15:48.500 --> 00:15:51.480
You could put it on a sticky note
or write it on a piece of paper.

00:15:51.520 --> 00:15:55.500
The nice thing about Keychains is
that they actually encrypt the data.

00:15:55.500 --> 00:16:00.010
So if you log out and you
walk away and somebody carries

00:16:00.020 --> 00:16:04.500
your system away in his car,
they can't get at your secrets.

00:16:04.890 --> 00:16:08.410
Because, as the line item here says,
they're offline safe.

00:16:08.500 --> 00:16:13.270
That literally means that short
of calculating for a couple of

00:16:13.670 --> 00:16:16.500
probably hundreds of thousands of
years on the fastest known platform,

00:16:16.500 --> 00:16:18.500
there is really no way
to get those secrets.

00:16:18.500 --> 00:16:22.500
So you can't get those secrets out
of a Keychain if you're not around.

00:16:22.500 --> 00:16:24.480
That's assuming you
picked a good password.

00:16:24.580 --> 00:16:28.000
But I hope you all know about the
importance of not picking your

00:16:28.000 --> 00:16:30.500
mother's maiden name as your password.

00:16:31.990 --> 00:16:36.820
The items in a Keychain are
protected by access controls,

00:16:37.020 --> 00:16:39.830
specifically by
CDSA access control lists.

00:16:40.000 --> 00:16:42.770
I'll talk about that in
a couple of slides later,

00:16:43.010 --> 00:16:46.790
but keep that in mind,
it's really powerful.

00:16:48.860 --> 00:16:53.500
If you look at it at the CDSA layer,
these things are databases.

00:16:53.660 --> 00:16:56.800
They're really actually
databases complete with schemas.

00:16:57.070 --> 00:16:58.400
You have different item types.

00:16:58.490 --> 00:17:00.620
Each item type has a different schema.

00:17:00.760 --> 00:17:06.610
You have a set of typed attributes
assigned to items of a particular type.

00:17:06.930 --> 00:17:09.430
And behind your back,
this stuff is actually

00:17:09.480 --> 00:17:11.080
done by a system daemon.

00:17:11.200 --> 00:17:13.780
Remember, again,
Unix separation of address spaces?

00:17:14.140 --> 00:17:15.660
All of the good stuff,
all of the secrets,

00:17:15.720 --> 00:17:17.920
are not actually sitting
in your own address space.

00:17:18.030 --> 00:17:20.720
They're handled by the
security server daemon.

00:17:20.870 --> 00:17:24.270
So even if some bad virus
actually manages to grab

00:17:24.270 --> 00:17:27.560
ahold of your application,
all is not lost.

00:17:27.910 --> 00:17:30.220
Some is lost, but not all.

00:17:33.960 --> 00:17:35.690
Scalable APIs.

00:17:35.690 --> 00:17:36.300
Hmm.

00:17:36.330 --> 00:17:39.560
Well,
there's a single API function for "Store

00:17:39.810 --> 00:17:45.070
this secret in my keychain somewhere,
please." If all you want is some

00:17:45.070 --> 00:17:49.680
bag to stick your secret password
into and then get it back out later,

00:17:49.770 --> 00:17:50.530
that's the only call you need.

00:17:50.530 --> 00:17:52.490
Just store that for me.

00:17:52.660 --> 00:17:56.940
You give an account name and a service
name just so we can tell them apart,

00:17:56.940 --> 00:17:58.750
but that's all there is to it.

00:17:58.940 --> 00:18:03.180
And there's one other call, which is,
you know, get stuff out from my keychain

00:18:03.370 --> 00:18:04.800
and give it back to me.

00:18:05.120 --> 00:18:06.200
Cool.

00:18:06.220 --> 00:18:07.820
Not very much detail to this, of course.

00:18:08.000 --> 00:18:11.280
So if you actually have to
deal with a situation where

00:18:11.320 --> 00:18:14.460
there's multiple keychains,
yes, you can have multiple keychains,

00:18:14.620 --> 00:18:18.260
you can drop down to a somewhat
more interesting API with a lot

00:18:18.270 --> 00:18:21.910
more arguments where you can say,
you know, which keychain and under

00:18:21.920 --> 00:18:23.900
what circumstances.

00:18:23.900 --> 00:18:27.900
You can search through them and do all
kinds of interesting stuff with it.

00:18:28.080 --> 00:18:32.570
If that's still too simple for you,
if you really, really need to do the

00:18:32.570 --> 00:18:35.670
nitty-gritty detail,
you can actually drop down all

00:18:35.710 --> 00:18:39.900
the way to the CDSA API level and
manipulate keychains from there.

00:18:39.970 --> 00:18:42.880
And that's probably
hundreds of lines of code,

00:18:42.880 --> 00:18:47.900
but it lets you do anything that is
physically possible to do with keychains.

00:18:47.990 --> 00:18:49.900
So this is your choice here.

00:18:49.900 --> 00:18:53.950
Of course, you know, the higher the API,
the simpler the call, the lower the API,

00:18:53.950 --> 00:18:54.730
the more work.

00:18:54.870 --> 00:18:57.670
But at least you got a choice.

00:18:58.990 --> 00:19:05.510
So, how is access to a Keychain and the
items in the Keychain controlled?

00:19:05.610 --> 00:19:08.960
These things are UNIX files,
at least right now, so if you don't have

00:19:09.040 --> 00:19:12.320
UNIX file access permissions,
you can't get at them.

00:19:12.450 --> 00:19:15.420
So, if you want to make a
Keychain that's just yours,

00:19:15.420 --> 00:19:19.760
you can use the usual
UNIX commands or the finder,

00:19:19.830 --> 00:19:23.150
get info to make it just readable
by you and not anybody else,

00:19:23.150 --> 00:19:26.190
and that's fine, that's security.

00:19:26.850 --> 00:19:33.080
The next thing is a passphrase or some
other secret that locks the whole thing.

00:19:33.080 --> 00:19:37.540
This is basically the key that
encrypts the data in your Keychain.

00:19:37.680 --> 00:19:40.090
If that passphrase,
that secret isn't around,

00:19:40.280 --> 00:19:41.910
nobody can really get at the contents.

00:19:41.910 --> 00:19:48.800
As long as you pick a good passphrase,
that makes it, as I said, offline safe.

00:19:48.800 --> 00:19:52.260
You can feel pretty confident.

00:19:52.470 --> 00:19:56.670
We're 99.99% sure that we
didn't make a mistake there.

00:19:56.670 --> 00:20:00.800
That in particular means if somebody
walks away with your PowerBook,

00:20:00.870 --> 00:20:04.280
which has a Keychain on it,
which has your brokerage

00:20:04.280 --> 00:20:06.450
account password in it,
that's okay.

00:20:06.780 --> 00:20:11.190
As long as you didn't set your
Keychain to stay open forever,

00:20:11.460 --> 00:20:12.400
you're safe.

00:20:12.400 --> 00:20:14.470
That's a good feeling.

00:20:15.980 --> 00:20:18.840
So we have the master unlock,
what we call the

00:20:19.040 --> 00:20:20.740
passphrase for a keychain.

00:20:20.750 --> 00:20:22.900
And then the next step,
for each particular item,

00:20:22.910 --> 00:20:25.250
there is an access control list.

00:20:25.380 --> 00:20:27.700
Now, these access control
lists can be as simple as,

00:20:27.700 --> 00:20:32.130
so I don't care anybody,
or it can be put up a dialogue

00:20:32.130 --> 00:20:35.700
and confirm with me before
you allow access to this item,

00:20:35.740 --> 00:20:40.390
or it can be a list of applications,
like let mail.app use this,

00:20:40.590 --> 00:20:42.620
but ask me if anybody else tries.

00:20:42.930 --> 00:20:46.890
That's actually more or less the default,
the creating application gets free access

00:20:46.920 --> 00:20:49.560
and everybody else puts up a dialogue.

00:20:50.030 --> 00:20:55.580
The dialogue's there mostly so if you
end up with a virus that tries to roam

00:20:55.580 --> 00:20:58.840
through your keychain while it's open,
you get a chance to figure out that

00:20:58.870 --> 00:21:01.220
somebody is doing something weird here.

00:21:03.300 --> 00:21:06.600
In particular,
you don't need to trust the

00:21:06.600 --> 00:21:10.890
file system a Keychain is on,
because the Keychain, as I said,

00:21:10.890 --> 00:21:11.650
is encrypted.

00:21:11.760 --> 00:21:14.080
The secrets on it are encrypted.

00:21:14.200 --> 00:21:19.420
That means that the only thing the
file system ever sees is gobbledygook,

00:21:19.470 --> 00:21:21.160
as far as the real secrets are concerned.

00:21:21.160 --> 00:21:23.160
I mean, the structure of the
Keychain is understandable.

00:21:23.160 --> 00:21:26.120
You can see the items,
but you can't see the secret.

00:21:26.240 --> 00:21:29.910
Now, this means that it's actually,
from a cryptographic point of view,

00:21:30.020 --> 00:21:32.720
completely safe to put your
Keychain on your iDisk.

00:21:32.840 --> 00:21:35.070
even if you don't trust Apple.

00:21:35.400 --> 00:21:41.120
Even if you think that Mac.com is run
by evil alien infiltrators who read all

00:21:41.140 --> 00:21:45.250
the data that's going through Mac.com,
you can still put your keychain there,

00:21:45.250 --> 00:21:48.740
because all that's getting
on there is encrypted data.

00:21:48.800 --> 00:21:52.110
And the only one who gets to actually
see the clear text data is the

00:21:52.190 --> 00:21:54.410
security server demon on your system.

00:21:54.520 --> 00:21:57.300
Same thing, of course,
with AFP servers and NFS servers

00:21:57.300 --> 00:21:58.540
or removable volumes.

00:21:58.710 --> 00:21:59.660
It doesn't matter.

00:21:59.740 --> 00:22:02.550
You don't have to trust the file system.

00:22:06.500 --> 00:22:09.780
Yeah, well, advanced stuff, sort of.

00:22:09.780 --> 00:22:12.100
You can have any number of Keychains.

00:22:12.270 --> 00:22:13.500
You start with one.

00:22:13.500 --> 00:22:17.980
You can make new ones in a little utility
application called Keychain Access.

00:22:18.090 --> 00:22:20.570
You can make as many of them as you want.

00:22:20.710 --> 00:22:22.460
Why would you want to do that?

00:22:22.660 --> 00:22:25.440
Well, perhaps you want to make one
with some secrets in it that

00:22:25.440 --> 00:22:28.470
you carry around with you,
you know, one of those little USB dongle

00:22:28.480 --> 00:22:31.380
things or a zip disk or
whatever strikes your fancy.

00:22:31.530 --> 00:22:35.020
Maybe you're comfortable with
carrying around some of them,

00:22:35.040 --> 00:22:36.340
but not all of them.

00:22:39.350 --> 00:22:42.700
Generally,
if you have more than one Keychain,

00:22:42.820 --> 00:22:45.460
things are arranged for use,
so when you search for an item,

00:22:45.460 --> 00:22:47.380
you actually end up searching them all.

00:22:47.570 --> 00:22:51.580
There's a search list that
is part of your preferences.

00:22:51.610 --> 00:22:54.250
You don't have to put all of your
Keychains on that search list,

00:22:54.340 --> 00:22:58.300
but that's what you get by default,
because that's what normal users want.

00:22:58.390 --> 00:23:01.450
Portable does not mean that you
can take it to your Windows box

00:23:01.450 --> 00:23:04.430
and it'll do anything useful there,
but it does mean that

00:23:04.440 --> 00:23:07.280
if you take a Keychain,
put it on your USB dongle

00:23:07.280 --> 00:23:10.690
or a Zip disk or wherever,
you go to another OS X system

00:23:10.690 --> 00:23:13.300
and you stick it in there,
it'll work.

00:23:13.350 --> 00:23:16.350
It will require your passphrase
to actually access it,

00:23:16.350 --> 00:23:19.480
but there's nothing particularly
specific to the system

00:23:19.480 --> 00:23:21.160
where you made the Keychain.

00:23:21.160 --> 00:23:24.290
It'll work on any OS X system.

00:23:25.710 --> 00:23:32.190
If you want to store things in a Keychain
and find that none of the defined item

00:23:32.200 --> 00:23:36.230
types really do it for you because
you need very special attributes,

00:23:36.280 --> 00:23:39.690
for example,
you can extend the schemas on a

00:23:39.690 --> 00:23:42.300
Keychain to add your own item types.

00:23:42.570 --> 00:23:45.240
That's definitely advanced stuff.

00:23:45.250 --> 00:23:49.890
I don't generally advise it because
it's much easier to just shoehorn it

00:23:49.890 --> 00:23:52.180
into one of the existing data types.

00:23:52.210 --> 00:23:56.630
But if you really feel
that that's what you need,

00:23:56.720 --> 00:23:58.970
call developer support.

00:23:59.200 --> 00:24:00.070
We can work with you.

00:24:00.140 --> 00:24:02.810
We can either tell you that that's
not what you should be doing,

00:24:02.810 --> 00:24:05.240
or we can show you how to do it.

00:24:06.380 --> 00:24:09.410
There is,
in addition to these user keychains,

00:24:09.470 --> 00:24:12.300
you know, the one that each of
you has automatically,

00:24:12.300 --> 00:24:14.630
there's also keychains in
the system that's new for

00:24:14.700 --> 00:24:17.260
Panther called system keychains.

00:24:17.340 --> 00:24:20.420
They're normal keychain files,
except they don't belong to a user,

00:24:20.420 --> 00:24:24.010
they belong to the system,
and since there isn't any user around,

00:24:24.140 --> 00:24:27.140
they're not actually unlocked with
a secret that a user types in.

00:24:27.270 --> 00:24:29.540
They're unlocked in other ways.

00:24:29.630 --> 00:24:32.660
The only time when you
actually care about this is if

00:24:32.680 --> 00:24:36.800
you're writing system daemons,
you know, things like PPP daemons

00:24:36.800 --> 00:24:40.450
or message servers or,
you know, generally if you're thinking of

00:24:40.450 --> 00:24:43.850
writing something for OS X server,
maybe you're a candidate

00:24:43.950 --> 00:24:45.590
for system keychains.

00:24:45.950 --> 00:24:47.570
Look it up under that term.

00:24:47.630 --> 00:24:50.470
The same APIs work for system keychains.

00:24:50.490 --> 00:24:53.220
If you're writing a system daemon,
you will automatically

00:24:53.220 --> 00:24:55.920
work with them by default,
because the rules are

00:24:56.010 --> 00:24:57.540
a little bit different.

00:25:01.670 --> 00:25:09.020
Authorization.

00:25:09.020 --> 00:25:09.020
Another big building block of security,
a lot of code that went in there.

00:25:12.220 --> 00:25:15.040
The catchphrase is:
The Authorization API is

00:25:15.130 --> 00:25:18.080
about authorization,
not authentication.

00:25:18.400 --> 00:25:20.300
Yeah, gee, what does that mean?

00:25:20.300 --> 00:25:26.920
It means that this is about whether to
allow a privileged operation to proceed.

00:25:26.990 --> 00:25:30.390
It's not about who the requester is.

00:25:31.830 --> 00:25:35.210
If that's sort of too subtle,
I'll try to work out the difference

00:25:35.260 --> 00:25:38.900
a little bit as we're going along.

00:25:39.300 --> 00:25:44.070
There is, in your OS X system,
and has been for quite a while,

00:25:44.300 --> 00:25:47.440
an authorization configuration database.

00:25:47.440 --> 00:25:53.400
It's currently in /etc/authorization,
although eventually we

00:25:53.560 --> 00:25:56.150
may move it elsewhere.

00:25:56.150 --> 00:25:56.150
So forget I told you about that.

00:25:56.700 --> 00:26:00.500
And that's the place
where an administrator can

00:26:00.510 --> 00:26:03.130
set authorization rules.

00:26:03.500 --> 00:26:07.250
Basically rules that determine
under what circumstances the

00:26:07.250 --> 00:26:09.560
system lets you do certain things.

00:26:11.080 --> 00:26:15.210
Authorization has the built-in
capability to do what people usually

00:26:15.350 --> 00:26:19.300
call "single sign-on." Basically,
what that means is that once you've

00:26:19.440 --> 00:26:23.720
typed in whatever is needed or otherwise
proven that you're allowed access,

00:26:23.880 --> 00:26:28.150
you can remember that you did
that and carry that credential

00:26:28.160 --> 00:26:29.880
over to other operations.

00:26:30.000 --> 00:26:33.520
You may have noticed, for example,
if you're not an admin user,

00:26:33.620 --> 00:26:35.320
you open up preferences.

00:26:35.320 --> 00:26:38.160
There's this little lock icon.

00:26:38.190 --> 00:26:38.880
You have to click that.

00:26:38.930 --> 00:26:42.300
It asks you,
"Show me your admin password."

00:26:42.330 --> 00:26:45.770
If you then go over to a
different preferences panel,

00:26:45.770 --> 00:26:49.720
it doesn't ask you again because
even though that other panel

00:26:49.720 --> 00:26:54.350
does a separate authorization,
it remembers that you just

00:26:54.350 --> 00:26:56.690
proved you're an admin.

00:26:56.690 --> 00:26:56.690
Well, you're probably still an admin.

00:26:59.210 --> 00:27:02.190
This is a pluggable architecture.

00:27:02.370 --> 00:27:07.410
You can, if you need to,
write plugins to add

00:27:07.660 --> 00:27:10.170
authorization methods.

00:27:11.000 --> 00:27:15.390
And if you're a Unix kind of person
and you're wondering why we're

00:27:15.390 --> 00:27:18.840
not just using PAM for this stuff,
since PAM is, you know,

00:27:19.010 --> 00:27:23.030
pluggable authorization,
because we think that ours is

00:27:23.030 --> 00:27:28.070
a heck of a lot more flexible,
but if you have your heart sold to PAM,

00:27:28.390 --> 00:27:31.900
we're actually gatewaying
both ways to and from PAM,

00:27:31.940 --> 00:27:36.030
meaning there is a PAM plugin that
can trigger an authorization check

00:27:36.030 --> 00:27:40.840
and there is an authorization
rule that can run a PAM chain.

00:27:40.900 --> 00:27:42.000
Thank you.

00:27:44.220 --> 00:27:46.100
All very theoretical, I know.

00:27:46.100 --> 00:27:50.600
And this is Keynote,
so I tried my hand at graphics.

00:27:50.790 --> 00:27:52.600
This is your program.

00:27:52.600 --> 00:27:54.600
This is some server.

00:27:54.620 --> 00:27:56.760
Your program would really,
really very much like that

00:27:56.860 --> 00:27:59.300
server to do something for it.

00:27:59.420 --> 00:28:05.520
Unmount the CD-ROM, reboot the system,
unlock the secrets of the universe,

00:28:05.520 --> 00:28:06.640
whatever.

00:28:07.330 --> 00:28:08.660
How can this server trust you?

00:28:08.660 --> 00:28:10.140
I mean, who are you?

00:28:10.140 --> 00:28:11.100
Why do you want this?

00:28:11.130 --> 00:28:12.510
Why should you be allowed to do this?

00:28:12.570 --> 00:28:13.220
Okay.

00:28:13.700 --> 00:28:18.410
So, your program calls the
authorization API and makes

00:28:18.410 --> 00:28:19.990
an authorization create call.

00:28:20.460 --> 00:28:23.060
There's a name in there,
that's just a character string,

00:28:23.090 --> 00:28:25.620
and each of these strings,
we call them write strings,

00:28:25.620 --> 00:28:26.840
mean something different.

00:28:27.070 --> 00:28:28.280
They're just used by convention.

00:28:28.280 --> 00:28:33.500
And of course, we're using a dotted
hierarchical notation here.

00:28:33.510 --> 00:28:37.300
The authorization API hands you back
what we call an authorization ref.

00:28:37.300 --> 00:28:41.830
This is one of those opaque,
you don't have to worry what's in them,

00:28:41.830 --> 00:28:45.250
don't ever look at them,
kind of abstract handles.

00:28:45.530 --> 00:28:49.480
You take this authorization ref
and you hand it together with

00:28:49.520 --> 00:28:52.400
your actual request to the server.

00:28:52.400 --> 00:28:58.680
The server looks at your request and
hands that authorization ref with a call

00:28:58.680 --> 00:29:02.840
called authorization copyrights back to
the authorization API and basically asks,

00:29:02.840 --> 00:29:05.380
"This guy over there
that sent me this handle,

00:29:05.400 --> 00:29:08.720
is he supposed to be allowed to do
this?" The authorization API does

00:29:08.720 --> 00:29:13.180
something incredibly magical and decides
whether you're supposed to be allowed

00:29:13.180 --> 00:29:19.630
to do this and either sends back,
"Sure, go ahead," or "Eh-eh." The server

00:29:19.880 --> 00:29:24.680
basically does it or doesn't do it and
sends its response back to your program.

00:29:24.800 --> 00:29:26.800
Simple.

00:29:26.930 --> 00:29:31.400
Depending on which side you're on,
that sort of means different things.

00:29:31.400 --> 00:29:34.580
If you're on the program side,
what you're doing is you're

00:29:34.580 --> 00:29:37.360
creating an authorization and
handing it over to a server.

00:29:37.360 --> 00:29:38.480
That's all you're doing.

00:29:38.480 --> 00:29:42.150
If you're writing a server,
then what you're doing is you're

00:29:42.150 --> 00:29:47.360
taking authorization requests from your
clients and then you're checking them.

00:29:47.500 --> 00:29:51.500
If you're doing what I told you
about dealing with root privilege,

00:29:51.610 --> 00:29:55.320
namely factoring your application
into a little part that has root

00:29:55.320 --> 00:29:59.360
privilege and a large part that doesn't,
you're actually going to do both things.

00:29:59.430 --> 00:30:03.320
Because that server will be your
little factored program and,

00:30:03.360 --> 00:30:06.670
well,
your program is the rest of your program.

00:30:08.430 --> 00:30:11.060
I don't know if you actually
care what's happening there,

00:30:11.060 --> 00:30:12.750
but I'll tell you anyway.

00:30:12.960 --> 00:30:15.360
When you are making these
authorization calls,

00:30:15.500 --> 00:30:19.540
you're actually talking to the
security server daemon in the system.

00:30:19.720 --> 00:30:23.500
And what it does, behind your back, is...

00:30:24.930 --> 00:30:27.820
I should have checked
those slides one more time.

00:30:27.820 --> 00:30:34.750
Anyway, it is talking to a UI daemon that
talks to the user behind your back.

00:30:35.630 --> 00:30:41.930
So, the prototypical application
of the authorization API,

00:30:41.930 --> 00:30:45.260
and remember the little lock
icons in the preferences,

00:30:45.390 --> 00:30:47.620
is that a dialogue comes up and it says,
you know,

00:30:47.620 --> 00:30:48.880
"Prove that you're an administrator.

00:30:48.950 --> 00:30:52.870
Type in the administrator password for,
you know, some administrator account."

00:30:52.940 --> 00:30:57.290
This dialogue does not actually
come from the application

00:30:57.380 --> 00:30:59.540
that you are working with.

00:30:59.620 --> 00:31:01.740
It doesn't come from preferences.app.

00:31:01.760 --> 00:31:04.200
It doesn't come from any
kind of background server.

00:31:04.300 --> 00:31:07.440
This actually comes indirectly
from security server.

00:31:07.720 --> 00:31:11.700
That's important because, you know,
the application actually never

00:31:11.700 --> 00:31:13.500
sees that admin password.

00:31:13.500 --> 00:31:17.000
You're talking, when you are typing in
your admin password,

00:31:17.070 --> 00:31:20.070
you're talking to a system
daemon that you better trust

00:31:20.180 --> 00:31:22.270
because it's part of the system.

00:31:22.500 --> 00:31:28.200
The result will be passed to some server,
but not the secret that is

00:31:28.310 --> 00:31:30.680
actually being checked here.

00:31:30.790 --> 00:31:36.220
So again, Unix, different processes,
keep things apart, good for security.

00:31:37.380 --> 00:31:41.540
So, what ingredients have we got here?

00:31:41.550 --> 00:31:45.100
You have rights.

00:31:45.100 --> 00:31:45.100
These are these...

00:31:45.210 --> 00:31:52.430
They're actually just ASCII strings,
no fancy Unicode or anything.

00:31:53.290 --> 00:31:57.440
Recommending that if you make
these strings for your own use,

00:31:57.500 --> 00:32:01.310
you use the Java convention of
basically taking your company

00:32:01.310 --> 00:32:03.090
DNS name and reversing it.

00:32:03.260 --> 00:32:05.790
So if your company
happens to be froboss.com,

00:32:05.790 --> 00:32:09.250
then your write strings
would be called com.froboss.

00:32:09.320 --> 00:32:10.980
and whatever's after that is up to you.

00:32:10.980 --> 00:32:15.890
We are also defining a bunch
of these things for the system.

00:32:15.990 --> 00:32:17.570
They typically start with system.

00:32:17.610 --> 00:32:19.160
when we define them.

00:32:19.180 --> 00:32:23.180
There's a couple of other ones here,
but for the most part,

00:32:23.180 --> 00:32:25.320
this is how we name them.

00:32:26.070 --> 00:32:30.130
Each of these write strings
has a different meaning.

00:32:30.170 --> 00:32:33.010
These meanings are there by convention.

00:32:33.120 --> 00:32:35.660
There's nothing magical about
the characters in the strings.

00:32:35.660 --> 00:32:38.530
There's no automatic mapping
to system services or anything.

00:32:38.540 --> 00:32:41.520
It's just that eventually,
when you make authorizations

00:32:41.670 --> 00:32:44.700
based on these writes,
they'll go to a server and the server

00:32:44.780 --> 00:32:48.390
will check for a particular write
in order to determine whether it's

00:32:48.400 --> 00:32:50.570
supposed to do something for you or not.

00:32:50.630 --> 00:32:55.110
If you're wondering what write
strings to use there as a client,

00:32:55.110 --> 00:32:58.590
look up the documentation
of the server or the system

00:32:58.590 --> 00:33:00.220
service that you're calling.

00:33:00.240 --> 00:33:03.100
If you are writing a server,
you're going to make up your own.

00:33:03.260 --> 00:33:07.670
As I said, our recommendation is that you
use your reversed .com name and

00:33:07.670 --> 00:33:11.380
then just use something that's
unique within your company.

00:33:12.200 --> 00:33:18.180
Credentials

00:33:18.520 --> 00:33:21.960
Things that you are or that
you have or that you can prove.

00:33:21.990 --> 00:33:27.480
Again, the prototypical credential is,
show me that you have an admin password.

00:33:27.500 --> 00:33:31.400
That happens through that dialogue
that we've already talked about.

00:33:31.420 --> 00:33:33.570
There's other types of credentials.

00:33:33.620 --> 00:33:34.950
This is pluggable.

00:33:34.970 --> 00:33:38.540
If you have a particular kind of
credential in mind that you thought

00:33:38.650 --> 00:33:43.420
would be really cool in the system,
you can write a plugin and shove it in,

00:33:43.420 --> 00:33:46.810
and it will become available
for authorization roles.

00:33:48.980 --> 00:33:51.340
Credentials are shareable.

00:33:51.340 --> 00:33:56.340
As I said, we have the single sign-on
capability in there.

00:33:56.340 --> 00:33:59.620
If you share a credential
between authorizations,

00:33:59.740 --> 00:34:03.430
then you only have to enter it once,
and it automatically carries

00:34:03.430 --> 00:34:06.900
over to other authorization roles
that use the same credential.

00:34:07.030 --> 00:34:09.930
That's cool because you don't
have to type in that administrator

00:34:10.000 --> 00:34:11.900
password over and over again.

00:34:11.910 --> 00:34:15.120
It's also potentially dangerous
because if you're not really sure

00:34:15.120 --> 00:34:20.190
about who you're sharing it with,
the user may accidentally authorize

00:34:20.250 --> 00:34:22.900
more than he thinks he does.

00:34:22.900 --> 00:34:27.190
Win a little bit, lose a little bit.

00:34:27.190 --> 00:34:28.900
Be careful.

00:34:29.320 --> 00:34:36.010
They're persistent in that you can
configure them to be remembered forever,

00:34:36.010 --> 00:34:36.900
which essentially means that
you can't remember them forever.

00:34:36.900 --> 00:34:39.400
That's what it actually means
until the user logs out or

00:34:39.480 --> 00:34:40.900
for a certain amount of time.

00:34:40.900 --> 00:34:44.870
This is another way of controlling
the single sign-on thing.

00:34:45.020 --> 00:34:49.800
If you give it a five-minute lifetime,
that means that it becomes available

00:34:49.800 --> 00:34:53.740
for satisfying other authorization
requests for five minutes after

00:34:53.780 --> 00:34:56.890
you type in that password,
and then you have to do it again.

00:34:59.720 --> 00:35:01.560
And then there's rules.

00:35:01.680 --> 00:35:06.510
The administrative authorization
configuration database.

00:35:06.680 --> 00:35:09.800
/etc/authorization,
and now you all forget about this again,

00:35:09.800 --> 00:35:11.600
basically maps rights to credentials.

00:35:11.600 --> 00:35:18.510
So it says things like,
in order to make a change

00:35:18.590 --> 00:35:21.710
to the network preferences,
you have to prove

00:35:21.710 --> 00:35:23.240
you're an administrator.

00:35:23.270 --> 00:35:28.880
Or in order to reboot the system,
it's okay, anybody can do that.

00:35:28.890 --> 00:35:30.710
Or, you know, stuff like that.

00:35:30.970 --> 00:35:35.740
If you are wondering /etc/authorization
is a normal plist file,

00:35:35.740 --> 00:35:39.360
you can open it in the plist editor,
there's a bunch of comments in there,

00:35:39.360 --> 00:35:42.180
you can, you know, play around with it.

00:35:43.110 --> 00:35:46.060
New for Panther,
there's actually an API for

00:35:46.320 --> 00:35:48.000
adding entries to this.

00:35:48.170 --> 00:35:50.950
That's really cool,
particularly if you make up

00:35:50.950 --> 00:35:53.470
a new write for yourself,
for example,

00:35:53.580 --> 00:35:57.320
to talk between your root-factored
part and the rest of your application.

00:35:57.450 --> 00:36:00.310
Because, again,
we don't really want you to know

00:36:00.310 --> 00:36:04.080
that the configuration is in
this particular file in /etc.

00:36:04.210 --> 00:36:07.940
What you can do now,
starting with Panther, not in Jaguar,

00:36:07.940 --> 00:36:11.680
is you can call this new API, say,
"I want to create this new

00:36:11.780 --> 00:36:16.150
authorization write." You also get
to add some descriptive strings,

00:36:16.160 --> 00:36:17.800
and it can be localized.

00:36:17.830 --> 00:36:21.370
And you can do that in your
post-install script or the first

00:36:21.520 --> 00:36:23.430
time you run your application.

00:36:23.680 --> 00:36:28.150
It will simply add a write to the system
that you can then use for yourself

00:36:28.200 --> 00:36:30.480
and offer as a service to others.

00:36:33.200 --> 00:36:35.880
So where is this stuff being used?

00:36:35.880 --> 00:36:38.540
Well, in your application soon, I know.

00:36:38.560 --> 00:36:44.350
But pretty much all of these
little lock round button things

00:36:44.400 --> 00:36:48.820
that you click on that ask you for
your admin password or not because

00:36:48.880 --> 00:36:53.570
you've already typed it before,
those are all based on authorization.

00:36:54.050 --> 00:37:00.190
There is a service called
Authorization Execute with Privileges,

00:37:00.190 --> 00:37:02.860
very ugly name intentionally,
that effectively is a way

00:37:02.860 --> 00:37:04.990
of getting root access.

00:37:05.050 --> 00:37:09.620
And that we recommend under
very specific circumstances,

00:37:09.670 --> 00:37:13.760
rather than as a generic
facility to get root access.

00:37:13.760 --> 00:37:15.560
Let me say that one more time.

00:37:15.580 --> 00:37:20.500
This is for very specific circumstances,
like, for example,

00:37:20.540 --> 00:37:22.410
third-party installers.

00:37:22.660 --> 00:37:26.760
If you write an application that for
some reason or other needs root access,

00:37:26.940 --> 00:37:30.910
then calling this is not the
best way to deal with it.

00:37:31.090 --> 00:37:35.290
You actually are better off
writing a little factored,

00:37:35.430 --> 00:37:41.850
very small set UID root application,
well, tool, factoring your application,

00:37:41.870 --> 00:37:44.490
remember,
and then using authorization to make

00:37:44.570 --> 00:37:48.710
sure that it's actually the rest of
your application that's calling it.

00:37:49.120 --> 00:37:54.300
New for Panther authorization:
Bind Privileged Port.

00:37:54.760 --> 00:37:57.140
Those of you who do networking
have probably figured out by

00:37:57.140 --> 00:38:02.190
now that in Unix you need to be
root to bind to a TCP/IP port

00:38:02.200 --> 00:38:07.870
whose number is less than 1024,
which at some point was considered

00:38:07.870 --> 00:38:11.650
to be a security feature by
certain students in Berkeley.

00:38:12.370 --> 00:38:15.800
But because of legacy and tradition
and backward compatibility,

00:38:15.800 --> 00:38:18.620
it's still like that to this day.

00:38:18.700 --> 00:38:24.100
If wanting to bind to a low-numbered
port is the only reason why you're

00:38:24.180 --> 00:38:28.120
considering gaining root privilege,
starting with Panther,

00:38:28.330 --> 00:38:30.500
this call can save you the trouble.

00:38:30.500 --> 00:38:34.160
It's authorization-based,
which means that, again,

00:38:34.340 --> 00:38:37.190
behind your back,
not in your application,

00:38:37.260 --> 00:38:39.960
there might be a dialogue
popping up asking the user to

00:38:40.030 --> 00:38:41.380
confirm that it's really okay.

00:38:41.400 --> 00:38:44.030
Or if the administrator
configured it differently,

00:38:44.170 --> 00:38:45.160
it'll just work.

00:38:45.170 --> 00:38:47.790
Or if the administrator is paranoid,
it just won't work.

00:38:47.890 --> 00:38:52.680
But it cannot under any circumstances
be any worse than the current situation,

00:38:52.850 --> 00:38:55.600
which is, if you're not root,
you can't do it.

00:38:55.720 --> 00:38:59.270
So look at that one if you
need low-numbered ports.

00:39:05.600 --> 00:39:13.590
X.509 certificates.

00:39:13.590 --> 00:39:13.590
Can I have a show of hands on which
one here actually knows what that is?

00:39:15.200 --> 00:39:29.400
[Transcript missing]

00:39:29.750 --> 00:39:32.240
For those of you who
know what certificates,

00:39:32.310 --> 00:39:36.530
X5 and X9 certificates are,
we have full support for them

00:39:36.840 --> 00:39:39.660
pretty much in the Panther system.

00:39:39.760 --> 00:39:42.200
Some of it is preliminary,
but it's there.

00:39:42.210 --> 00:39:45.930
That's a pleasant change from Jaguar,
where there was a lot of promise

00:39:45.930 --> 00:39:47.700
in the system at that point.

00:39:47.700 --> 00:39:52.230
At the CDSA level,
we support things like building

00:39:52.230 --> 00:39:58.010
certificate chains and evaluating
them to make sure that they're

00:39:58.010 --> 00:40:00.670
cryptographically okay.

00:40:00.670 --> 00:40:00.670
That's part of the CDSA standard,
and that's where it's implemented.

00:40:02.020 --> 00:40:06.320
We have higher-level APIs for the
stuff that you really care about.

00:40:06.510 --> 00:40:12.880
In particular, SSL is supported by an
API called Secure Transport,

00:40:12.950 --> 00:40:16.680
which is our own implementation
of SSL that's using CDSA for

00:40:16.680 --> 00:40:20.750
cryptography and doing a lot of useful,
good stuff for you.

00:40:21.930 --> 00:40:26.900
In addition to the pure
cryptographic verification stuff,

00:40:26.900 --> 00:40:30.660
one thing that you get if you call our

00:40:30.720 --> 00:40:33.110
The first thing I would like to
say about certificate and trust

00:40:33.260 --> 00:40:35.690
support APIs is there's a little
database hidden in the system,

00:40:35.700 --> 00:40:40.180
a per-user database,
that allows the user to basically tag

00:40:40.180 --> 00:40:43.100
a certificate with a level of trust.

00:40:43.250 --> 00:40:47.580
It allows the user to say things like,
"Okay, this certificate's fine.

00:40:47.580 --> 00:40:48.720
I've looked at it.

00:40:48.940 --> 00:40:51.270
I'll trust it for
network connections now,

00:40:51.310 --> 00:40:55.370
or I'll trust it for mail use now." Or,
"That one there,

00:40:55.400 --> 00:40:58.660
I know it's cryptographically okay,
but I hate this guy,

00:40:58.660 --> 00:41:00.390
so never let me use this."

00:41:00.560 --> 00:41:03.830
We call it the user trust database.

00:41:03.910 --> 00:41:08.940
It's persistent,
it's per user and per policy.

00:41:09.170 --> 00:41:17.260
There is a session on Thursday that
I think talks about that a little bit.

00:41:18.000 --> 00:41:19.570
- Actually, a lot.

00:41:19.690 --> 00:41:21.140
So look it up in your program.

00:41:21.140 --> 00:41:26.580
Oh, and yes, you can store certificates
in your Keychains.

00:41:26.630 --> 00:41:30.420
There's an item type for
certificates that lets them fit

00:41:30.520 --> 00:41:32.280
right into your Keychain files.

00:41:32.280 --> 00:41:34.550
And as a matter of fact,
we recommend that that's

00:41:34.550 --> 00:41:35.940
how you store certificates.

00:41:35.940 --> 00:41:41.020
'Cause it works, it's easy,
and there's pretty good support for

00:41:41.020 --> 00:41:44.430
searching for certificates in Keychains.

00:41:45.760 --> 00:41:56.920
Secure Transport, as I said,
that's our SSL implementation.

00:41:56.920 --> 00:41:56.920
It's a pretty good SSL implementation.

00:41:56.920 --> 00:41:56.920
It implements the whole standard
client-side and service-side.

00:41:57.640 --> 00:42:03.670
It automatically ties into the user
trust stuff that I just talked about.

00:42:04.000 --> 00:42:09.140
So by just using secure transport,
you get that for free.

00:42:09.960 --> 00:42:12.850
I should give you one practical warning.

00:42:13.090 --> 00:42:17.920
There are some uses of SSL out there,
particularly the OpenSSL-based ones,

00:42:18.030 --> 00:42:21.980
that are very,
very lenient about how they

00:42:22.120 --> 00:42:24.700
interpret the rules of SSL.

00:42:25.130 --> 00:42:28.740
They pass a lot of stuff that
they really shouldn't because

00:42:28.740 --> 00:42:31.200
otherwise the customers complain.

00:42:31.650 --> 00:42:34.320
Some web browsers come to mind.

00:42:34.340 --> 00:42:38.800
By default, if you use secure transport,
it will actually implement the standard,

00:42:38.880 --> 00:42:45.140
which means that if, for example,
an SSL server has an expired certificate,

00:42:45.160 --> 00:42:46.480
it will not connect to that server.

00:42:46.480 --> 00:42:49.120
It will give you an error back saying,
"I've got an expired certificate.

00:42:49.210 --> 00:42:52.590
This is not working." There's a
number of flags and options to

00:42:52.590 --> 00:42:55.380
secure transport to basically say,
"It's okay.

00:42:55.450 --> 00:42:56.040
I know.

00:42:56.040 --> 00:42:59.300
Do it anyway." But these
are not on by default.

00:42:59.320 --> 00:43:02.720
And we don't recommend that you
just turn them on by default.

00:43:02.750 --> 00:43:06.570
Those of you transitioning from OpenSSL,
it's a little bit tempting.

00:43:06.580 --> 00:43:08.900
Just set all those flags and it'll work.

00:43:08.900 --> 00:43:09.440
It's fine.

00:43:09.590 --> 00:43:14.080
But it's not the right answer because
these are actually potentially

00:43:14.160 --> 00:43:16.580
problems of a security nature.

00:43:16.580 --> 00:43:19.900
So leave those flags off by default.

00:43:19.900 --> 00:43:23.480
If you must,
give the user options to override with

00:43:23.480 --> 00:43:26.190
your favorite check boxes and like.

00:43:26.360 --> 00:43:31.590
Better answer is to actually
use our user trust APIs.

00:43:31.740 --> 00:43:36.380
We have canned UI that you can use to
essentially present to the user the

00:43:36.470 --> 00:43:41.640
fact that something having to do with
certificates failed and how and why.

00:43:41.800 --> 00:43:46.030
And that allows the user to then
go in and express his opinion

00:43:46.320 --> 00:43:48.530
on whether to proceed or not.

00:43:50.000 --> 00:43:54.560
If you're using CF Network,
HTTPS protocol through CF Network,

00:43:54.680 --> 00:43:56.690
you're getting secure
transport automatically

00:43:56.690 --> 00:43:57.990
because that's what it calls.

00:43:58.140 --> 00:44:03.080
So same things apply,
same warnings and same congratulations.

00:44:03.190 --> 00:44:05.960
Very good,
you're using the right solution.

00:44:08.370 --> 00:44:13.300
This is what we provide for SSL usage.

00:44:15.520 --> 00:44:16.960
Preliminary.

00:44:17.100 --> 00:44:18.560
Not an official API.

00:44:18.810 --> 00:44:20.580
May change.

00:44:20.670 --> 00:44:22.020
Just to play around with.

00:44:22.240 --> 00:44:23.820
Okay, end of disclaimer.

00:44:23.960 --> 00:44:28.230
This is our preliminary
implementation of CMS and SMIME.

00:44:28.350 --> 00:44:34.340
CMS, the cryptographic message syntax,
and SMIME, the secure MIME.

00:44:34.550 --> 00:44:39.370
It's basically the way you do
encrypted email in the X.509 universe,

00:44:39.370 --> 00:44:44.000
and CMS is sort of a generic way
of making encrypted bags of stuff.

00:44:44.170 --> 00:44:49.620
These APIs are actually ported
and somewhat modified from

00:44:49.620 --> 00:44:52.060
what you will find in Mozilla.

00:44:52.060 --> 00:44:56.190
Some of you may be familiar with it.

00:44:58.350 --> 00:45:03.790
As I said, it's not an official API yet,
but this is what we're planning on

00:45:03.790 --> 00:45:05.800
making official next time around.

00:45:06.070 --> 00:45:09.390
So if this is your area of interest,
if you're interested in encrypted

00:45:09.390 --> 00:45:12.520
email or otherwise making
encrypted blobs of stuff,

00:45:12.710 --> 00:45:15.810
take a look at that, play around with it,
give us feedback,

00:45:15.970 --> 00:45:19.610
tell us what's not working or what
you think should be different.

00:45:20.840 --> 00:45:24.250
And again, of course,
this stuff is using our user

00:45:24.250 --> 00:45:28.600
trust implementation and all of
the good stuff automatically.

00:45:31.130 --> 00:45:33.800
So, that's the major building blocks.

00:45:33.960 --> 00:45:38.210
Let me give you an example of
something practical that you may

00:45:38.210 --> 00:45:42.390
have actually run into and how
it's using those building blocks.

00:45:42.560 --> 00:45:43.640
Encrypted disk images.

00:45:43.720 --> 00:45:45.490
You all know what disk images are.

00:45:45.550 --> 00:45:48.080
If you make a disk image,
there's actually a little

00:45:48.080 --> 00:45:51.660
pop-up that lets you say,
"Make that encrypted." Cool, huh?

00:45:51.720 --> 00:45:55.340
Actually, very cool,
because our cryptography

00:45:55.340 --> 00:45:56.140
is pretty darn good.

00:45:56.140 --> 00:46:01.430
Our implementation, we think, is secure,
so you can actually trust that security,

00:46:01.430 --> 00:46:05.280
unlike certain third-party
utilities I could think of.

00:46:06.310 --> 00:46:09.210
Of course, the cryptography itself,
the encrypting of the disk

00:46:09.280 --> 00:46:10.790
blocks is done through CDSA.

00:46:10.790 --> 00:46:14.830
You'd expect that, and that's what we do.

00:46:15.020 --> 00:46:20.410
The disk images are encrypted with
keys based on a passphrase that you

00:46:20.540 --> 00:46:22.410
type in when you create the image.

00:46:22.630 --> 00:46:26.690
The passphrases are usually
stored in your keychain,

00:46:26.930 --> 00:46:29.290
because that's where secrets go.

00:46:29.700 --> 00:46:31.500
And therefore,
as long as your Keychain is

00:46:31.500 --> 00:46:34.590
unlocked and your access controls
are set up appropriately,

00:46:34.680 --> 00:46:37.750
you're actually not generally
being bothered with having to

00:46:37.780 --> 00:46:40.660
type in the passphrase for your
encrypted disk image again.

00:46:40.680 --> 00:46:43.010
It'll just fish it out of your Keychain.

00:46:43.110 --> 00:46:46.730
If you're being paranoid with your
Keychain and you have it unlock

00:46:46.730 --> 00:46:50.330
itself after a couple of minutes,
well, maybe you'll get a prompt to

00:46:50.380 --> 00:46:53.690
unlock your Keychain with an
appropriate description that,

00:46:53.770 --> 00:46:55.680
you know, somebody wants to.

00:46:55.700 --> 00:47:30.200
[Transcript missing]

00:47:30.820 --> 00:47:34.000
Your encrypted disk images
are actually pretty darn safe,

00:47:34.120 --> 00:47:36.060
even against physical removal.

00:47:36.260 --> 00:47:39.000
Because what happens when the
thief opens the powerbook,

00:47:39.070 --> 00:47:43.480
I mean, obviously if he reboots it,
you're safe because the disk image,

00:47:43.680 --> 00:47:46.890
the mounted part of the disk image
is gone and the thief needs to have

00:47:46.890 --> 00:47:49.090
your passphrase to decrypt it again.

00:47:49.220 --> 00:47:53.060
But if he still gets your
powerbook while it's asleep,

00:47:53.060 --> 00:47:58.590
it will still be asked for either the
passphrase for your Keychain in order to

00:47:58.590 --> 00:48:03.260
reopen the Keychain or directly for the
passphrase for the encrypted disk image.

00:48:03.260 --> 00:48:06.490
If either of these fails,
the image gets unmounted

00:48:06.490 --> 00:48:08.450
and your data is safe again.

00:48:09.560 --> 00:48:13.640
And of course, when we actually go and
we ask for the passphrase,

00:48:13.840 --> 00:48:15.680
either for the Keychain
or for the disk image,

00:48:15.820 --> 00:48:21.940
that's again happening through a security
server and the UI daemon that it uses.

00:48:22.010 --> 00:48:27.460
So the application that actually requests
the mount or the other user interaction

00:48:27.540 --> 00:48:29.890
doesn't get to see your passphrase.

00:48:30.060 --> 00:48:33.370
So that's sort of how
things get put together.

00:48:37.200 --> 00:48:40.160
Having bombarded you with
all of those technologies,

00:48:40.160 --> 00:48:43.830
I'm going to make up for that
a little bit by telling you how

00:48:43.830 --> 00:48:46.280
to actually go and use them.

00:48:49.250 --> 00:48:50.910
This is sort of obvious.

00:48:51.120 --> 00:48:53.600
Find the right API for your job.

00:48:53.750 --> 00:49:01.480
Don't try to subvert some API that looks
cool but isn't necessarily made to work.

00:49:01.700 --> 00:49:17.700
[Transcript missing]

00:49:17.870 --> 00:49:20.310
The fewer arguments you
have to explicitly specify,

00:49:20.350 --> 00:49:21.790
the more defaults you get.

00:49:21.960 --> 00:49:25.580
And getting defaults is actually good,
because if it turns out that one of

00:49:25.650 --> 00:49:28.800
the defaults is not such a great idea,
we'll change them for you next time.

00:49:28.800 --> 00:49:32.630
If you explicitly specify every
last option of an API call,

00:49:32.640 --> 00:49:37.670
then you are actually going to have to
roll your application to make a change.

00:49:37.670 --> 00:49:41.790
So when in doubt,
call the higher-level APIs.

00:49:43.940 --> 00:49:47.640
I have seen a lot of
creative use of APIs,

00:49:47.730 --> 00:49:50.170
security and otherwise.

00:49:50.310 --> 00:49:52.580
I mean, this is sort of an
Apple developer tradition,

00:49:52.580 --> 00:49:54.180
you know, "Look, it's an API.

00:49:54.550 --> 00:49:56.890
How badly can we mangle it?"

00:49:57.720 --> 00:50:01.220
That's sort of fun if it's an
API for drawing boxes on the

00:50:01.220 --> 00:50:04.810
screen or maybe for writing files,
but if you're doing

00:50:04.880 --> 00:50:08.440
this to a security API,
you are probably hurting the

00:50:08.540 --> 00:50:10.270
security of your program.

00:50:10.450 --> 00:50:14.790
Because these APIs aren't just calls
that you make and something wonderful

00:50:14.890 --> 00:50:17.360
happens magically and everything's cool.

00:50:17.430 --> 00:50:19.240
These APIs are part of a process.

00:50:19.400 --> 00:50:22.360
They're part of a way of
working with your data.

00:50:22.440 --> 00:50:25.510
So when you go and start
using a security API,

00:50:25.510 --> 00:50:29.950
actually read the part that doesn't
just describe what the APIs are

00:50:29.950 --> 00:50:31.900
and what the parameters look like.

00:50:31.930 --> 00:50:36.020
Read the part on how to use them
and then try as well as you can

00:50:36.050 --> 00:50:38.200
to actually use them that way.

00:50:38.250 --> 00:50:41.990
Because the further away from
the intended use you get,

00:50:41.990 --> 00:50:46.070
the more likely you are to get
into some weird path that may not

00:50:46.070 --> 00:50:48.320
be as well tested as you'd hoped.

00:50:48.340 --> 00:50:51.470
And even worse,
that may actually break the security

00:50:51.470 --> 00:50:53.720
model that you think you're using.

00:50:53.800 --> 00:50:58.170
So to the extent that you can,
stay on the mark path and try to stay

00:50:58.170 --> 00:51:01.400
simple in your application of these APIs.

00:51:02.810 --> 00:51:07.190
Security is not the kind of thing
you put in the last two weeks

00:51:07.260 --> 00:51:09.050
of your development process.

00:51:09.160 --> 00:51:11.120
I hope you all know that.

00:51:11.220 --> 00:51:13.840
The best thing to do is to design it in.

00:51:13.880 --> 00:51:18.810
At least, you know, have your program,
once you've scaffolded it up,

00:51:18.960 --> 00:51:21.670
if you don't think you know
that much about security,

00:51:21.770 --> 00:51:25.080
find somebody who does and
have them look over it.

00:51:25.130 --> 00:51:28.850
The longer you wait,
the harder the wake up sometimes is when

00:51:28.860 --> 00:51:33.620
you realize that you've done this wrong
and there is no easy way to fix it short

00:51:33.620 --> 00:51:36.380
of rewriting major parts of your program.

00:51:36.440 --> 00:51:41.330
So it's, this is not Mac OS X specific,
but I'll give it to you because

00:51:41.330 --> 00:51:43.340
you paid good money for this.

00:51:43.390 --> 00:51:45.300
Put the security in early.

00:51:45.350 --> 00:51:50.800
And if you don't think you're an expert,
get yourself at least the advice of one.

00:51:50.930 --> 00:51:52.650
It's worth it.

00:51:55.470 --> 00:51:56.790
Find the right API, he says.

00:51:56.800 --> 00:51:58.030
Yeah, what does that mean?

00:51:58.040 --> 00:52:01.880
If you need to store secrets,
if you need to keep secrets,

00:52:01.930 --> 00:52:04.520
particularly if you need to
keep secrets from other people,

00:52:04.550 --> 00:52:06.520
use Keychains, that's what they're for.

00:52:06.520 --> 00:52:09.670
That's where you stick secrets.

00:52:10.190 --> 00:52:14.350
If you need to provide
some privileged service,

00:52:14.550 --> 00:52:19.820
either to the rest of your own
program or to third parties,

00:52:20.270 --> 00:52:21.470
Think authorization.

00:52:21.520 --> 00:52:25.950
Authorization is specifically
there to answer the question,

00:52:25.960 --> 00:52:28.580
"Am I supposed to do this now or not?"

00:52:29.310 --> 00:52:32.480
If you have a network connection,
TCP/IP probably,

00:52:32.480 --> 00:52:36.960
to some other machine and you're
worried about people snooping on it,

00:52:37.130 --> 00:52:41.920
use secure transport, that's SSL,
use it right,

00:52:42.090 --> 00:52:45.600
and you basically don't have to
worry about snoopers at that point.

00:52:45.740 --> 00:52:48.980
Using right is a little
bit harder than it sounds.

00:52:49.040 --> 00:52:53.180
It's not as easy as just calling
secure transport and saying,

00:52:53.250 --> 00:52:59.330
"We're cool now." But that's one level of
detail that I'm not going to go in here.

00:52:59.560 --> 00:53:00.800
Read the documentation.

00:53:00.800 --> 00:53:03.600
It's actually got some
good stuff in there.

00:53:03.770 --> 00:53:07.590
If you need to authenticate
people over the network,

00:53:07.650 --> 00:53:09.810
go to directory services.

00:53:09.810 --> 00:53:11.200
That's its job.

00:53:11.240 --> 00:53:15.380
It deals with looking up users and
figuring out what their attributes are.

00:53:16.990 --> 00:53:21.370
If you work with X.509 certificates,
then CMS is a good try.

00:53:21.370 --> 00:53:24.530
Again, not an official API yet, really.

00:53:24.880 --> 00:53:25.510
Can't change.

00:53:25.680 --> 00:53:27.060
Preliminary.

00:53:27.230 --> 00:53:27.520
Still.

00:53:27.870 --> 00:53:29.110
That's our answer for it.

00:53:29.140 --> 00:53:32.650
So,
short of porting some third-party code,

00:53:32.650 --> 00:53:35.780
this is actually what you want to call.

00:53:35.910 --> 00:53:40.090
And if you need to do cryptography
sort of at the base level,

00:53:40.120 --> 00:53:42.600
not for a particular purpose,
but because your job

00:53:42.680 --> 00:53:48.700
calls for cryptography,
then CDSA is what you're going to call.

00:53:48.730 --> 00:53:50.020
There you are.

00:53:50.020 --> 00:53:53.220
And as it says here at the bottom,
of course, life is never that easy.

00:53:53.240 --> 00:53:56.040
So you'll end up mixing
and matching these things.

00:53:56.050 --> 00:53:58.160
But that is an initial map.

00:53:58.380 --> 00:54:01.320
Do's and don'ts.

00:54:01.320 --> 00:54:02.220
I love do's and don'ts.

00:54:02.220 --> 00:54:05.010
I get to tell other people what to do.

00:54:06.230 --> 00:54:13.120
Wherever we recommend a particular API,
like secure transport for SSL, use that.

00:54:13.240 --> 00:54:16.280
Don't go off and say, "Well,
I've seen this cool open

00:54:16.280 --> 00:54:19.300
source thing over there,
and I'm sure it's much better

00:54:19.300 --> 00:54:21.070
than this Apple stuff."

00:54:22.380 --> 00:54:25.250
So maybe there's a 0.1%
chance that it actually is,

00:54:25.390 --> 00:54:32.230
but there's a 99.many chance
that our stuff will actually

00:54:32.270 --> 00:54:38.360
work better on OS X than
something that you port yourself.

00:54:38.360 --> 00:54:38.360
In particular,

00:54:39.530 --> 00:54:45.020
Whenever you find yourself
in a situation where,

00:54:45.020 --> 00:54:47.820
"Am I supposed to do this now?

00:54:48.000 --> 00:54:50.060
I'm root and I'm doing
something dangerous.

00:54:50.060 --> 00:54:52.360
Am I supposed to be?"
That's authorization.

00:54:52.600 --> 00:54:53.360
Think authorization.

00:54:53.500 --> 00:54:55.260
That's what that's for.

00:54:55.270 --> 00:54:58.990
If you use that,
you are actually slotting into a very

00:54:59.090 --> 00:55:04.240
interesting and fairly complicated
machinery that allows an administrator

00:55:04.240 --> 00:55:07.540
to configure how permissive
the security in his system is.

00:55:07.580 --> 00:55:10.300
If you do this on your own,
you're going to end up re-implementing

00:55:10.300 --> 00:55:13.220
half of authorization and the
other half is going to be missing.

00:55:13.280 --> 00:55:16.740
So try not to do that.

00:55:16.770 --> 00:55:21.540
If you deal with X.509 certificates and

00:55:23.410 --> 00:55:26.750
You want to know whether a certificate
chain validates or whether to trust a

00:55:26.750 --> 00:55:28.690
certificate for a particular operation.

00:55:28.830 --> 00:55:35.620
SecTrust APIs are what you really
should be using rather than some generic

00:55:35.800 --> 00:55:40.700
X.509 certificate library like OpenSSL.

00:55:40.900 --> 00:55:44.560
Because, again, there's stuff in there
that is OS X specific,

00:55:44.710 --> 00:55:47.890
for example, the user trust database,
which if you call our APIs,

00:55:47.930 --> 00:55:48.930
you get for free.

00:55:49.070 --> 00:55:54.800
If you call, say,
OpenSSL or some Mozilla library, nope,

00:55:55.040 --> 00:55:56.920
just the raw stuff.

00:55:58.140 --> 00:56:04.160
Before you go off and use root code,
try to find something in the system

00:56:04.160 --> 00:56:06.320
that already does what you need.

00:56:06.320 --> 00:56:09.230
For example,
before you go off and become root in

00:56:09.230 --> 00:56:13.140
order to mount and unmount file systems,
dig around a bit and you'll find

00:56:13.140 --> 00:56:15.740
that there's something called
a volume manager that actually

00:56:15.740 --> 00:56:17.200
does these things for a living.

00:56:17.350 --> 00:56:31.730
Craig Keithley,
Perry 'the Cynic' Kiehtreiber

00:56:32.790 --> 00:56:37.060
If you have to use root code, as I said,
factor your application,

00:56:37.190 --> 00:56:39.520
make the amount of code
that actually runs with root

00:56:39.610 --> 00:56:43.640
privilege as small as possible,
and I really mean two pages.

00:56:43.690 --> 00:56:46.140
In rare cases, maybe five pages.

00:56:46.260 --> 00:56:50.280
If you find yourself writing
ten pages of root code,

00:56:50.320 --> 00:56:52.050
you probably made a mistake.

00:56:52.160 --> 00:56:56.630
So go back and think about what you
really need that root privilege for.

00:57:00.060 --> 00:57:01.060
Of course, there are don'ts.

00:57:01.180 --> 00:57:02.760
I mean, there's never just dos.

00:57:02.760 --> 00:57:09.130
If you need to keep a secret,
don't just stuff it in a file.

00:57:09.340 --> 00:57:14.020
Don't just stuff it in a file and make it
readable and writable only by yourself.

00:57:14.080 --> 00:57:15.280
Put it in a keychain.

00:57:15.350 --> 00:57:17.210
It is safer.

00:57:18.730 --> 00:57:24.440
You can get into so much trouble
trying to do your own secret storage.

00:57:24.440 --> 00:57:27.910
It's not worth it, believe me.

00:57:30.720 --> 00:57:34.730
If you have communication between
different processes because

00:57:34.730 --> 00:57:38.600
your client server or because
you had to factor your program,

00:57:38.620 --> 00:57:44.170
don't try to come up with your
own ways of authenticating

00:57:44.720 --> 00:57:46.260
the two pieces to each other.

00:57:46.290 --> 00:57:47.580
Use authorization.

00:57:47.580 --> 00:57:48.700
Again, that's what it's for.

00:57:48.700 --> 00:57:49.620
It's very good at that.

00:57:49.700 --> 00:57:53.460
You can basically get the code templates,
stick them in your program,

00:57:53.460 --> 00:57:56.700
and they will, for the most part,
work just fine for you.

00:57:56.700 --> 00:58:00.480
If you try to do this by hand,
it's very hard to do it right.

00:58:00.480 --> 00:58:04.380
It will definitely take you
longer to do it on your own than

00:58:04.380 --> 00:58:06.470
to do it with authorization.

00:58:07.560 --> 00:58:10.400
If you are writing root code,
and this is only a partial list of

00:58:10.460 --> 00:58:13.700
all the horrible things you're never
supposed to be doing while you're root,

00:58:13.830 --> 00:58:15.100
don't ever load a plugin.

00:58:15.170 --> 00:58:20.550
Doesn't matter where you got it from,
don't ever load a plugin.

00:58:20.850 --> 00:58:23.560
Don't link against any GUI libraries.

00:58:23.560 --> 00:58:24.680
I've got nothing against GUIs.

00:58:24.830 --> 00:58:27.000
GUIs are wonderful, but GUIs are big.

00:58:27.000 --> 00:58:28.670
There's a lot of code in GUIs.

00:58:28.810 --> 00:58:32.440
GUIs have a nasty habit of
loading plugins behind your back.

00:58:32.510 --> 00:58:33.800
Don't do that.

00:58:33.890 --> 00:58:39.800
Your root code should be a simple tool
that the glorious GUI-enabled Cocoa or

00:58:39.890 --> 00:58:45.050
Carbon app of yours is going to talk to,
using authorization.

00:58:45.050 --> 00:58:45.050
Did I mention that?

00:58:45.050 --> 00:58:45.050
Good.

00:58:45.190 --> 00:58:48.930
And there's also a laundry list of
dangerous system calls and library

00:58:49.010 --> 00:58:53.430
calls that any unique security textbook
can tell you about that you are under no

00:58:53.430 --> 00:58:56.040
circumstances to call while you are root.

00:58:56.050 --> 00:58:58.900
Things like, you know, system and P open.

00:58:59.050 --> 00:59:01.610
There's about two dozen others.

00:59:02.140 --> 00:59:05.900
Other things you shouldn't be doing:
don't assume there's a

00:59:05.900 --> 00:59:07.360
single user on the system.

00:59:07.360 --> 00:59:10.560
This is an old, particularly you who
come from the OS 9 side,

00:59:10.560 --> 00:59:12.390
I mean there's always a user, you know?

00:59:12.560 --> 00:59:13.040
The user.

00:59:13.220 --> 00:59:15.990
After all,
we're a personal operating system, right?

00:59:16.220 --> 00:59:16.420
No.

00:59:16.710 --> 00:59:18.330
There isn't always just one user.

00:59:18.560 --> 00:59:21.770
We've just introduced what's so
nicely called fast switching,

00:59:21.830 --> 00:59:25.100
which means that there can be any
number of users on your system.

00:59:25.100 --> 00:59:26.990
And they're all logged
in up there in the front.

00:59:27.090 --> 00:59:28.880
They typed in their
password at some point.

00:59:29.190 --> 00:59:31.120
Their programs are still running.

00:59:31.270 --> 00:59:34.290
One of them gets displayed in the front,
but the other ones are alive too,

00:59:34.610 --> 00:59:40.070
and you have no idea which one
of them might be the one that you

00:59:40.070 --> 00:59:45.580
want to talk to unless you actually
belong to a particular user.

00:59:46.440 --> 00:59:50.300
And Keychains right now are
files in the file system,

00:59:50.350 --> 00:59:51.270
single files.

00:59:51.280 --> 00:59:53.930
If you can avoid it,
don't assume that will

00:59:53.930 --> 00:59:57.400
always be the case,
because it won't.

00:59:59.150 --> 00:59:59.940
Okay.

00:59:59.940 --> 01:00:05.690
If you actually have a little bit of
spare time to think about how to make

01:00:05.710 --> 01:00:12.730
your code more future-proof or less
in risk of having to be rewritten

01:00:12.730 --> 01:00:12.730
every time you release something,

01:00:13.180 --> 01:00:14.300
Use standard APIs.

01:00:14.420 --> 01:00:18.940
We have this fairly strong policy
about continuing to maintain support

01:00:18.980 --> 01:00:21.700
for APIs once we call them APIs.

01:00:21.790 --> 01:00:25.000
So that's good for you if you call them.

01:00:25.500 --> 01:00:45.600
[Transcript missing]

01:00:45.970 --> 01:00:50.740
Don't assume that all access
is based on passwords.

01:00:50.770 --> 01:00:52.920
That's already no longer
true in the system today.

01:00:53.000 --> 01:00:59.850
There are some smart card interfaces and
it'll become less true in the future.

01:01:00.920 --> 01:01:03.940
And do test with different
security configurations.

01:01:04.060 --> 01:01:07.060
Test with different authorizations,
learn how to play around with

01:01:07.060 --> 01:01:10.120
the authorization database,
and play around with the access

01:01:10.120 --> 01:01:11.600
controls on Keychain items.

01:01:11.600 --> 01:01:15.440
See if suddenly your application
throws up dozens of dialogues.

01:01:15.550 --> 01:01:19.090
That would be embarrassing for
users who care about security.

01:01:19.400 --> 01:01:25.110
I am running over, so I'm going to speed
up like a dervish here.

01:01:25.430 --> 01:01:26.830
Almost all of this stuff is Darwin.

01:01:27.000 --> 01:01:30.060
The only stuff that I've talked
about that isn't Darwin is

01:01:30.060 --> 01:01:31.690
the actual GUI components.

01:01:31.790 --> 01:01:35.850
If you get Darwin from the open
source server and install it,

01:01:35.940 --> 01:01:36.820
this is all in there.

01:01:36.820 --> 01:01:39.370
You've got CDSA,
you've got the security server,

01:01:39.380 --> 01:01:40.980
you've got all this stuff.

01:01:41.130 --> 01:01:44.040
Anywhere where there's UI involved,
you've got a stub that

01:01:44.040 --> 01:01:45.390
doesn't do anything.

01:01:45.810 --> 01:01:49.750
So, if you were really, really desperate,
you could take Darwin code and, you know,

01:01:49.810 --> 01:01:52.390
hack it up to do UI again, but of course,
why would you?

01:01:52.560 --> 01:01:55.810
It's only $129 to get the real stuff.

01:01:57.830 --> 01:02:00.200
Quick list of what's new for Panther.

01:02:00.450 --> 01:02:03.400
A lot of the X519
certificate support is new.

01:02:03.430 --> 01:02:05.650
The CMS S-MIME is new.

01:02:05.720 --> 01:02:11.350
You can now import certificate bundles,
PKCS, if you don't know what that is,

01:02:11.350 --> 01:02:13.200
don't worry about it.

01:02:13.280 --> 01:02:15.200
System Keychains are new.

01:02:15.590 --> 01:02:21.030
There are two new frameworks
called Security Foundation and

01:02:21.070 --> 01:02:27.690
Security Interface for Cocoa programmers
that make nice canned user

01:02:27.690 --> 01:02:30.310
interface panes and views.

01:02:33.710 --> 01:02:37.600
Authorization got the access
to low-numbered ports call and

01:02:37.810 --> 01:02:41.920
the APIs for programmatically
adding authorizations are new.

01:02:42.080 --> 01:02:45.780
And you get more flexibility in
controlling how the dialogues

01:02:45.780 --> 01:02:47.990
work that sometimes get issued.

01:02:48.160 --> 01:02:52.550
Keychain access is a lot nicer now.

01:02:52.560 --> 01:02:54.100
Let's put it this way.

01:02:54.140 --> 01:02:56.090
Somebody stuck secure arrays in.

01:02:56.100 --> 01:02:59.680
If you're the kind of guy who
wants to erase something 20 times,

01:02:59.710 --> 01:03:01.650
the NSA can't get at your data.

01:03:01.950 --> 01:03:02.890
You can do it now.

01:03:02.930 --> 01:03:04.100
It takes a while.

01:03:04.100 --> 01:03:05.430
Okay.

01:03:05.430 --> 01:03:09.090
I am wrapping up now.

01:03:11.350 --> 01:03:14.580
Somebody stuck this in,
so this is the first time I've seen this.

01:03:14.830 --> 01:03:16.960
These are other things
you may want to go to.

01:03:16.960 --> 01:03:20.300
Okay.

01:03:21.700 --> 01:03:24.440
Yes, they all sound really interesting.

01:03:24.440 --> 01:03:28.450
109 security certificate APIs.

01:03:28.450 --> 01:03:33.180
If X.509 certificates rings
your dinger or it's something

01:03:33.290 --> 01:03:38.270
you need for your program,
then definitely go there.

01:03:39.130 --> 01:03:42.200
It'll discuss the APIs we
have and how to use them.

01:03:42.240 --> 01:03:46.550
Kerberos, of course,
if that's your area of interest.

01:03:46.910 --> 01:03:49.110
Oh yeah, security feedback.

01:03:49.140 --> 01:03:53.380
In case you didn't like my presentation,
FF016 security feedback forum,

01:03:53.450 --> 01:03:54.470
that's where you get to complain.

01:03:54.980 --> 01:03:57.030
Unless you want to do it now.

01:03:59.110 --> 01:04:03.360
Craig Keithley, who officially is there
to serve your every whim,

01:04:03.460 --> 01:04:04.000
and me.

01:04:04.290 --> 01:04:07.160
Yes, you can send me email, I don't mind.

01:04:07.490 --> 01:04:09.720
I don't promise to answer, but...

01:04:12.100 --> 01:04:17.260
There is by the way I should mention,
a mail list that Apple has,

01:04:17.260 --> 01:04:21.580
it's called apple-cdsa@group.apple.com.

01:04:21.580 --> 01:04:26.500
It was originally created as a self
support and feedback kind of mailing

01:04:26.500 --> 01:04:30.870
list for Cdsa users but in the past
it's low volume enough that if you

01:04:31.040 --> 01:04:36.840
have other security questions it's
probably okay to just ask them there.

01:04:36.840 --> 01:04:41.360
Using the usual rules for mailing lists,
read the archive first

01:04:41.360 --> 01:04:43.070
and be patient and nice.

01:04:44.970 --> 01:04:59.290
For more information, well,
you know these places, of course.

01:04:59.290 --> 01:04:59.290
This is where our documentation sits,
and under security,

01:04:59.290 --> 01:04:59.290
you'll find what we've got.

01:04:59.290 --> 01:04:59.290
In particular, there's

01:05:00.870 --> 01:05:05.800
There's a section on the Keychain
APIs and on authorization.

01:05:05.910 --> 01:05:07.800
There's the Apple CDSA mailing list.

01:05:07.800 --> 01:05:12.780
The CDSA is an open group standard,
so if you really want the 600 pages,

01:05:12.780 --> 01:05:14.340
you can get it from the open group.