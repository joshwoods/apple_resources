WEBVTT

00:00:18.130 --> 00:00:19.240
Good afternoon.

00:00:19.240 --> 00:00:21.100
Thanks for joining us this afternoon.

00:00:21.110 --> 00:00:22.240
I'm Brett Halle.

00:00:22.240 --> 00:00:24.500
I'm the director of
Pro Video Engineering.

00:00:24.660 --> 00:00:26.850
Today we're going to spend a
few minutes and talk about how

00:00:26.850 --> 00:00:30.340
to interface professional video
hardware to Final Cut Pro 4.0.

00:00:30.540 --> 00:00:34.490
One of the big challenges in the
video production space is how to

00:00:34.490 --> 00:00:38.730
actually get all that data into
the computer in an effective way,

00:00:39.170 --> 00:00:41.600
whether it be video and audio
and all the various pieces.

00:00:41.760 --> 00:00:44.280
And then when you're
dealing with that much data,

00:00:44.280 --> 00:00:46.850
be it standard definition
or high definition,

00:00:46.940 --> 00:00:50.440
how do you manipulate it and
manage it and then display it and

00:00:50.440 --> 00:00:55.630
do things like effects in a very
highly efficient and quick way?

00:00:55.820 --> 00:00:59.950
To talk about how that is done and
how you can produce products that

00:01:00.000 --> 00:01:04.660
can work with Final Cut Pro 4.0,
I'd like to invite Ken Carson,

00:01:04.660 --> 00:01:09.000
the Final Cut Pro engineering lead,
to talk about this.

00:01:12.900 --> 00:01:17.700
Good afternoon.

00:01:17.700 --> 00:01:20.490
We've just released
Final Cut 4.0 a couple weeks ago.

00:01:20.560 --> 00:01:21.040
It came out.

00:01:21.150 --> 00:01:23.360
We introduced it at NAB this year.

00:01:23.590 --> 00:01:27.080
And with that,
we've really shown our commitment to

00:01:27.080 --> 00:01:31.550
the high-end space for video production,
a whole suite of tools.

00:01:31.550 --> 00:01:34.780
And today,
we're here talking about how we can

00:01:34.820 --> 00:01:40.020
interface hardware with our application
and what you can do to help us produce

00:01:40.020 --> 00:01:42.900
even better tools for the industry.

00:01:44.790 --> 00:01:47.560
So we'll be covering a
number of topics here.

00:01:47.560 --> 00:01:51.370
There's a good number of you in
the audience who know more about

00:01:51.370 --> 00:01:54.640
this than I do at this point,
having developed a number

00:01:54.640 --> 00:01:56.020
of products for us.

00:01:56.060 --> 00:01:59.290
Then there's a bunch of
you probably new to this,

00:01:59.300 --> 00:02:02.480
and I'll be trying to split the
difference between those of you

00:02:02.480 --> 00:02:04.860
who know it all and those of you
who don't know much about it.

00:02:04.920 --> 00:02:10.940
So we'll be describing two kinds of
video hardware that works with Final Cut.

00:02:10.940 --> 00:02:14.440
Those that just do the
input and the output,

00:02:14.700 --> 00:02:19.240
as opposed to those that do a lot
of effects processing on board,

00:02:19.240 --> 00:02:21.400
beyond what the host computer could do.

00:02:21.420 --> 00:02:25.910
We'll be talking about RT Extreme,
which is our new software

00:02:25.910 --> 00:02:27.960
model for effects processing.

00:02:27.960 --> 00:02:32.280
And we'll be talking about
the AV playback architecture,

00:02:32.280 --> 00:02:33.860
which is all built around QuickTime.

00:02:35.560 --> 00:02:38.770
As an extension to that,
we then use an enabler file,

00:02:38.860 --> 00:02:42.330
the RT-Enabler, to let Final Cut know
about the capabilities.

00:02:42.340 --> 00:02:46.680
We'll cover that and talk
about the opportunities for the

00:02:46.680 --> 00:02:49.320
developers with our products.

00:02:49.460 --> 00:02:51.720
Following that,
I'll have Gio come up and talk about

00:02:51.780 --> 00:02:55.680
the uncompressed codecs that we've
developed and released with this version,

00:02:55.680 --> 00:03:01.030
and the Pro I/O protocol and
driver set that we've developed.

00:03:02.630 --> 00:03:05.220
So with Final Cut Pro 4.0,
actually all versions

00:03:05.330 --> 00:03:07.400
of Final Cut really,
it's built on QuickTime.

00:03:07.400 --> 00:03:10.450
That provides a lot of
flexibility for how it works,

00:03:10.540 --> 00:03:13.070
what kind of hardware
can be attached to it,

00:03:13.070 --> 00:03:17.190
as opposed to everything coming
from us and you get what we provide.

00:03:17.220 --> 00:03:23.140
You can handle with through
QuickTime a wide range of resolutions.

00:03:23.140 --> 00:03:33.190
We can handle, for example, 320,
240 JPEG, all the way up to HD online

00:03:33.190 --> 00:03:33.190
using hardware solutions.

00:03:34.210 --> 00:03:38.940
Software versions, so you buy a computer,
Final Cut Pro,

00:03:38.940 --> 00:03:43.010
that alone is enough to let you
work with software versions.

00:03:43.110 --> 00:03:49.580
For example, the offline RT, the DV,
and FireWire out for DV.

00:03:51.190 --> 00:03:57.220
Adding on hardware gives you the
ability to perform SD and HD,

00:03:57.290 --> 00:04:01.400
and that can either be the
I/O or accelerated versions.

00:04:03.460 --> 00:04:07.770
So a little history on how the effects
have come about within Final Cut.

00:04:07.850 --> 00:04:12.840
Final Cut 1 came out
in the spring of '99,

00:04:12.840 --> 00:04:17.890
and the ability to do real-time effects
was a real obvious missing piece there.

00:04:17.920 --> 00:04:20.900
So version 2 took us a
little while to get there.

00:04:20.900 --> 00:04:24.640
We released the first version
with Final Cut with real-time

00:04:24.780 --> 00:04:26.690
effects based on QuickTime.

00:04:26.970 --> 00:04:32.210
In that model,
we were using hardware acceleration

00:04:32.210 --> 00:04:32.210
to perform all the effects.

00:04:32.410 --> 00:04:36.760
Later that year, we released Final Cut 3,
which introduced the

00:04:36.860 --> 00:04:38.300
G4 real-time effects.

00:04:38.300 --> 00:04:44.270
For that, we took the model that we had,
developed for hardware with QuickTime,

00:04:44.450 --> 00:04:47.890
and applied a software
engine underneath it,

00:04:47.920 --> 00:04:52.850
replacing the hardware that
would have done the decompression

00:04:52.850 --> 00:04:57.510
and the effects with software,
so that you don't need to add

00:04:57.560 --> 00:05:00.330
any additional hardware just
to do the simple effects.

00:05:01.310 --> 00:05:04.390
And this spring,
we introduced Final Cut Pro 4.0

00:05:04.600 --> 00:05:09.030
with the RT Extreme model,
which really enhances what

00:05:09.030 --> 00:05:11.040
we can do in software.

00:05:11.130 --> 00:05:17.010
We are now handling full-frame images,
different resolutions,

00:05:17.010 --> 00:05:21.700
a lot more effects,
and expanded to be able to use the

00:05:21.700 --> 00:05:25.230
video out from our software effects.

00:05:25.230 --> 00:05:30.890
In version 3, there was no monitoring
on external devices.

00:05:31.500 --> 00:05:35.710
And we've also extended the number
of effects that are available for

00:05:35.840 --> 00:05:38.050
the hardware developers as well.

00:05:39.060 --> 00:05:43.000
So, to go back through the two different
kinds of the video hardware,

00:05:43.000 --> 00:05:45.000
this is a really big distinction.

00:05:45.000 --> 00:05:51.320
You can build a board that has a lot
of processing power built into it and

00:05:51.320 --> 00:05:54.870
perform the effects in the hardware.

00:05:55.000 --> 00:06:02.990
And if you go with a system like that,
you can provide a lot of capabilities,

00:06:02.990 --> 00:06:02.990
just not possible in the base CPU.

00:06:03.150 --> 00:06:06.160
On the other hand,
you can also build a system that

00:06:06.160 --> 00:06:07.900
just provides the video I/O.

00:06:07.930 --> 00:06:12.570
If you take just the
computer and the software,

00:06:12.710 --> 00:06:16.430
The computers come with FireWire,
so if you're working with DV,

00:06:16.570 --> 00:06:17.940
you're all set.

00:06:17.970 --> 00:06:22.580
But if you're trying to work in
standard definition or HD video,

00:06:22.800 --> 00:06:27.380
there is no plug on the back of a
Macintosh that lets you connect direct

00:06:27.380 --> 00:06:30.020
to your video monitors or tape decks.

00:06:30.020 --> 00:06:33.860
So you have to have a piece
of hardware in between there.

00:06:33.860 --> 00:06:38.040
That hardware can be as simple
as just doing the conversion from

00:06:38.100 --> 00:06:41.170
the uncompressed video to the
analog and digital video worlds.

00:06:43.550 --> 00:06:48.520
I'm going to go through some of what's
new in RT-Effects with RT-Extreme.

00:06:48.520 --> 00:06:55.100
One of the things that we've got in
there that's with the new effects,

00:06:55.100 --> 00:07:01.140
all of the effects scripts are
now capable of being real-time,

00:07:01.140 --> 00:07:05.390
with the exception of those that
read particular frames back.

00:07:05.400 --> 00:07:07.090
That's a very small set of them.

00:07:07.100 --> 00:07:12.780
The effects scripts is the
scripting language that all of

00:07:12.780 --> 00:07:14.040
our effects have been written in.

00:07:14.040 --> 00:07:18.450
If you're familiar with the program,
the effects builder tool is

00:07:18.530 --> 00:07:20.040
built into the application.

00:07:20.040 --> 00:07:21.900
You can see all of these
scripts are written.

00:07:23.450 --> 00:07:38.140
Another aspect of the new effects in
version 4 is the variable speed effect.

00:07:38.140 --> 00:07:38.370
So this lets you do keyframe speed,
real-time speed, and variable rate speed.

00:07:39.820 --> 00:07:45.700
We've taken advantage of OpenGL to do
a number of our effects processing.

00:07:45.750 --> 00:07:49.100
For those of you who've been
catching some of the OpenGL sessions,

00:07:49.100 --> 00:07:55.890
you can see that there's a lot of
capability out there in the GPU,

00:07:55.890 --> 00:07:55.890
and we're taking advantage of that now.

00:07:58.790 --> 00:08:04.160
We added beyond version 3,
in version 3 we had just offline

00:08:04.190 --> 00:08:09.130
RT and DV as our file formats
that were supported for real-time.

00:08:09.360 --> 00:08:13.260
In version 4,
we've added uncompressed formats as well.

00:08:13.330 --> 00:08:20.990
At this point,
we are only enabling those when

00:08:20.990 --> 00:08:24.080
you connect a hardware board to
them since there is no I/O directly

00:08:24.080 --> 00:08:24.080
available for the uncompressed formats.

00:08:25.690 --> 00:08:30.470
Internally, the video processing that we
do is generally YUV-based.

00:08:30.540 --> 00:08:36.730
In this version,
we've optimized it so that we're

00:08:37.190 --> 00:08:41.530
using a combination of 422 processing
and 4444 processing based on

00:08:41.530 --> 00:08:41.530
the effects being performed to
get you the best performance.

00:08:41.880 --> 00:08:45.560
Another feature that's been added is
real-time 3-2 pull-down insertion.

00:08:45.580 --> 00:08:49.850
So with cinema tools bundled in
the application and the advent of

00:08:49.850 --> 00:08:56.260
these new cameras that are shooting,
like the Panasonic DVX-100 that puts

00:08:56.260 --> 00:09:01.840
24-fps data onto a TV NTSC tape,
we can capture that,

00:09:01.840 --> 00:09:07.630
get the 24-fps data out of that,
do true 24-fps editing and playback

00:09:07.780 --> 00:09:13.860
reinserting the 3-2 pull-downs that you
can display it out to an NTSC device.

00:09:15.040 --> 00:09:22.190
So I'm going to come over and demo a few
things and highlight what's unique in

00:09:22.190 --> 00:09:29.060
this version that the hardware developers
are going to need to know how to get to.

00:09:29.120 --> 00:09:32.530
So I've got a sequence here.

00:09:33.050 --> 00:09:36.910
You can see the various
tracks and video and audio.

00:09:37.040 --> 00:09:40.080
I'll just play through it once
and then describe a few things

00:09:40.080 --> 00:09:41.760
that are going on in here.

00:09:46.890 --> 00:09:49.460
So you can see that the effects
are being performed here.

00:09:49.600 --> 00:09:50.800
None of this is rendered.

00:09:50.800 --> 00:09:54.770
Now, first off,
over here in the RT pop-up,

00:09:54.770 --> 00:09:57.800
we've got a number of settings.

00:09:57.800 --> 00:10:03.510
This being DV, we've enabled a choice of
quality to perform for playback.

00:10:03.640 --> 00:10:07.500
If I switch up to high quality,
we'll see that more of the things in

00:10:07.550 --> 00:10:09.960
the timeline will not be real-time.

00:10:09.960 --> 00:10:13.600
So if you look at the colors over here,
this section being red indicates

00:10:13.600 --> 00:10:15.230
that it doesn't think it's real-time.

00:10:15.240 --> 00:10:19.240
This green, it thinks,
is if I switch to high quality,

00:10:19.240 --> 00:10:26.280
this other clip is now beyond what we can
guarantee will be real-time and software.

00:10:26.890 --> 00:10:30.520
But we've also added another
feature called Unlimited RT.

00:10:30.700 --> 00:10:35.630
Now this removes the time constraints
that we have in here for figuring out

00:10:35.630 --> 00:10:38.690
what's possible on a particular machine.

00:10:38.830 --> 00:10:43.310
And in general,
we have to be pretty conservative

00:10:43.310 --> 00:10:43.310
with those estimates because

00:10:44.080 --> 00:10:49.000
Different machines,
you have different kinds of disk systems.

00:10:49.000 --> 00:10:51.340
If you have short clips,
it's possible to play through

00:10:51.340 --> 00:10:54.560
something that's more complicated,
but if you try extending that clip,

00:10:54.560 --> 00:10:55.440
it won't work.

00:10:55.510 --> 00:11:01.310
So in the normal model that we use,
we are pretty conservative about it.

00:11:01.410 --> 00:11:06.280
And if I play through this section where
we've got multiple clips layered on top,

00:11:06.420 --> 00:11:10.620
you can see that even in full frame,
it is real-time.

00:11:11.110 --> 00:11:13.000
And we weren't dropping any frames.

00:11:13.000 --> 00:11:18.020
So I want to highlight the different
render bar colors that we've got up here.

00:11:18.020 --> 00:11:20.780
A change from version 3.

00:11:20.780 --> 00:11:23.870
Over here in the left,
we've got this section with

00:11:23.940 --> 00:11:26.850
the cross-dissolve that's
being performed in real time.

00:11:26.980 --> 00:11:29.980
Now that I'm in full resolution,
that's coming out in a kind

00:11:29.980 --> 00:11:33.270
of grayish-green color,
because this is full quality.

00:11:33.480 --> 00:11:35.270
There's no advantage to rendering this.

00:11:35.360 --> 00:11:39.620
If I switch back to the
medium quality mode,

00:11:39.620 --> 00:11:42.240
you'll see it as bright green,
which is what we used to use

00:11:42.240 --> 00:11:44.210
for the real-time effects.

00:11:45.070 --> 00:11:49.490
Over here, this section,
now that I'm in unlimited RT,

00:11:49.580 --> 00:11:52.790
this shows up as orange to show
you that it's beyond what we think

00:11:52.910 --> 00:11:55.970
is really going to work correctly,
but we'll let you do it.

00:11:56.000 --> 00:11:57.960
And this section over here is yellow.

00:11:58.050 --> 00:11:59.900
This is a proxy effect.

00:11:59.900 --> 00:12:04.000
So a proxy effect,
as I'm scrubbing through it,

00:12:04.000 --> 00:12:07.140
you can see this has a soft edge on it,
but we're not able to perform

00:12:07.140 --> 00:12:10.000
that part in real time,
so we're showing it in yellow.

00:12:10.050 --> 00:12:15.010
And as it plays, you see it's being
performed with a hard edge.

00:12:22.300 --> 00:12:26.130
And one of the things that we've
got in this version is the ability

00:12:26.130 --> 00:12:30.440
to work with multiple codecs
that handle the same formats.

00:12:30.440 --> 00:12:33.950
So over here in the system
settings under effects handling,

00:12:33.950 --> 00:12:38.240
we've got on the left side a list
of all of the formats that have

00:12:38.290 --> 00:12:44.360
enabler entries saying that they
can be real-time in some form.

00:12:44.360 --> 00:12:47.650
And then over on the right
there's a pop-up that lists the

00:12:47.650 --> 00:12:53.460
different manufacturers who are
providing drivers for that format.

00:12:53.460 --> 00:13:00.880
So this is an NTSC DV sequence,
so we're using the Final Cut Pro codecs.

00:13:00.880 --> 00:13:08.570
And I added an enabler that would list a
couple of others here so that if I choose

00:13:09.040 --> 00:13:12.890
Another codec or choose
none and come back here.

00:13:12.940 --> 00:13:22.130
We're going to see that the
timeline changes from all those

00:13:22.130 --> 00:13:23.490
being real-time to being read
requiring rendering because nothing

00:13:23.490 --> 00:13:23.490
is going to perform those effects.

00:13:25.190 --> 00:13:30.300
This was a problem in particular
previously with DV where a couple

00:13:30.300 --> 00:13:36.810
of different vendors had DV drivers
and we would disable our DV if

00:13:37.000 --> 00:13:41.100
we found one of them installed.

00:13:41.100 --> 00:13:44.860
And they needed external control
panels to turn on and off their

00:13:44.860 --> 00:13:47.100
versions in order to turn ours on.

00:13:47.100 --> 00:13:51.640
And I'm expecting that with version 4,
a lot of people are going to be

00:13:51.640 --> 00:13:57.100
providing uncompressed solutions that
are going to be overlapping down here.

00:13:57.210 --> 00:14:02.040
And this will let people within
the application switch who's

00:14:02.040 --> 00:14:04.900
going to be running the effects.

00:14:07.530 --> 00:14:12.090
One other thing that I wanted to
highlight over here as a new feature

00:14:12.170 --> 00:14:15.000
is the floating point rendering.

00:14:15.120 --> 00:14:18.320
Now we don't do floating
point processing in real time,

00:14:18.530 --> 00:14:25.050
but the option is over here in the
video processing tab to choose to use

00:14:25.190 --> 00:14:29.090
the floating point rendering engine.

00:14:29.090 --> 00:14:29.090
If you

00:14:30.660 --> 00:14:34.700
For 10-bit uncompressed video,
you'll want to do this as a way

00:14:34.700 --> 00:14:36.520
to preserve the image quality.

00:14:36.660 --> 00:14:39.640
Otherwise,
you'll be going through 8-bit paths.

00:14:39.640 --> 00:14:45.700
Alright, so let's go back to the slides.

00:14:51.490 --> 00:14:55.130
So one of the important things to
remember about ArcGIS Xtreme and

00:14:55.130 --> 00:14:57.990
using software effects is that,
um,

00:14:58.210 --> 00:14:59.400
They'll just keep getting better.

00:14:59.400 --> 00:15:07.580
In fact, what we've got here, you know,
this is a dual G4 1.42 gig machine.

00:15:07.580 --> 00:15:11.240
But you can imagine that with what's
been introduced here at the show,

00:15:11.240 --> 00:15:18.830
with the G5 and with the
software improvements in Panther,

00:15:18.830 --> 00:15:18.830
that the capabilities of the
system will just keep improving.

00:15:20.200 --> 00:15:24.210
On the hardware side,
all the things we've been

00:15:24.370 --> 00:15:29.780
adding for the software effects
really translate as well.

00:15:29.850 --> 00:15:34.320
So, for example,
the variable speed effects are

00:15:34.320 --> 00:15:37.070
available for the hardware.

00:15:37.180 --> 00:15:41.270
And in addition,
the ability to mix formats in

00:15:41.270 --> 00:15:43.770
a sequence that we've added,
which can be enabled with the

00:15:43.770 --> 00:15:43.770
hardware products at this point.

00:15:44.020 --> 00:15:47.690
Previously, if you had more tried to
set up a sequence for,

00:15:47.690 --> 00:15:51.470
say, uncompressed and you wanted
to drop a DV clip into it,

00:15:51.470 --> 00:15:55.040
you would need to render that
in order to play it back.

00:15:55.210 --> 00:15:59.440
Even if it was possible for you
to decompress it in real time,

00:15:59.470 --> 00:16:03.460
we weren't able to get the
data queued properly without a

00:16:03.460 --> 00:16:05.840
glitch in between the formats.

00:16:05.840 --> 00:16:09.070
In this version,
we're able to do that using a

00:16:09.070 --> 00:16:12.760
new filter that we've developed,
which I'll get into later.

00:16:13.590 --> 00:16:17.980
So on the floating-point rendering,
this is 128 bits per pixel,

00:16:18.140 --> 00:16:20.490
so it's 32 bits per channel.

00:16:20.570 --> 00:16:26.370
We're doing this with YUV plus alpha,
and it's what we call the R4FL format.

00:16:26.550 --> 00:16:30.390
This is a variation on the

00:16:31.060 --> 00:16:33.950
Our 408 format,
which we use internally for our

00:16:33.960 --> 00:16:36.870
YUV plus alpha image processing.

00:16:37.000 --> 00:16:42.770
Our 408 is 8-bit,
pretty much based on the

00:16:42.770 --> 00:16:50.970
standard 601 style of YUV,
but it's a fully sampled 444 format.

00:16:50.990 --> 00:16:58.260
And this, with 32 bits per channel,
is using approximately the same layout.

00:16:59.330 --> 00:17:02.310
Of course,
videotape machines at this point

00:17:02.490 --> 00:17:04.910
don't handle 32 bits per pixel.

00:17:05.110 --> 00:17:06.930
They top out at around 10.

00:17:07.000 --> 00:17:10.670
So as a more efficient format
for storing that kind of data,

00:17:10.670 --> 00:17:12.780
there's the V210 format.

00:17:12.920 --> 00:17:20.120
So V210 is storing 10 bits
per channel packed in...

00:17:20.490 --> 00:17:25.900
Four pixels and five bytes,
five 32-bit words, something like that.

00:17:28.230 --> 00:17:31.930
We've developed a lot of optimized
code for doing the conversion

00:17:31.940 --> 00:17:41.130
between our 4FL and V210,
2VUI formats.

00:17:41.290 --> 00:17:44.430
And we're making that available
to the developers so that

00:17:44.430 --> 00:17:46.200
we get consistent results.

00:17:46.200 --> 00:17:54.030
And we thought about leaving it all on
our side and having the interface read

00:17:54.190 --> 00:18:00.920
data from either 2VUI or V210 format
and doing the conversion on our side,

00:18:00.920 --> 00:18:01.880
where it would be a lot simpler.

00:18:01.880 --> 00:18:04.600
But it means that there's one
more buffer copy going on.

00:18:04.600 --> 00:18:09.080
If we give you the code to you,
you can put it in your components and

00:18:09.080 --> 00:18:14.980
the buffer copy on the decompress can be
doing the translation at the same time.

00:18:18.640 --> 00:18:25.380
One of the other advantages of using
QuickTime format in between here is that

00:18:25.760 --> 00:18:30.500
Our developers can write drivers
to do any format they want.

00:18:30.800 --> 00:18:34.560
You're not restricted to the
V210 or 2VUI formats that we've

00:18:34.560 --> 00:18:36.400
developed for uncompressed.

00:18:36.460 --> 00:18:45.760
You can come up with a 16-bit
per channel format if you'd like,

00:18:45.760 --> 00:18:47.520
or you can come up with other more
highly compressed formats as well.

00:18:49.570 --> 00:18:55.260
So here's a block diagram that shows
how we're performing the effects.

00:18:55.260 --> 00:18:59.280
Now this is pretty much the
QuickTime model of how you do things.

00:18:59.380 --> 00:19:04.280
On the left-hand side,
we've got the video path,

00:19:04.390 --> 00:19:07.060
and in the center is the audio path.

00:19:07.110 --> 00:19:09.000
So the video goes through
the QuickTime movie,

00:19:09.160 --> 00:19:15.120
and then you've got the
codecs that process that and

00:19:15.120 --> 00:19:20.880
send it out to the hardware,
and then the hardware

00:19:20.880 --> 00:19:21.120
interfaces to the external world
videotape machines or monitors.

00:19:21.190 --> 00:19:24.670
The pieces shown in gold are the
parts that you would be writing.

00:19:24.680 --> 00:19:28.300
The blue parts are part
of the system software,

00:19:28.300 --> 00:19:30.880
and the application in
Final Cut's up there at the top.

00:19:30.920 --> 00:19:34.200
The audio path in the
middle is sort of the same.

00:19:34.200 --> 00:19:37.460
In the standard QuickTime model,
the audio would be driven

00:19:37.620 --> 00:19:39.640
directly off the QuickTime movie.

00:19:39.640 --> 00:19:43.650
Within Final Cut,
it's kind of a roundabout path.

00:19:43.660 --> 00:19:47.600
In the QuickTime movie,
it's being called driving it all,

00:19:47.600 --> 00:19:50.660
but it's going back through
Final Cut to provide the data directly

00:19:50.730 --> 00:19:54.350
to Core Audio so that we get the
multi-channel output at this point.

00:20:00.630 --> 00:20:04.210
Now, standard real-time effects
that you'll be using,

00:20:04.440 --> 00:20:09.330
the first three that I'll talk about
are effects that QuickTime has defined.

00:20:09.330 --> 00:20:13.490
So there's composite, alpha gain,
and cross dissolve.

00:20:13.500 --> 00:20:18.950
The composite is selected within
the Final Cut interface through

00:20:18.950 --> 00:20:21.500
the layering of the tracks.

00:20:21.550 --> 00:20:23.410
If you've got more than
one layer of video,

00:20:23.510 --> 00:20:26.490
they get combined through
the composite effect.

00:20:26.500 --> 00:20:31.450
Alpha gain is really the opacity filter.

00:20:31.500 --> 00:20:37.970
So that takes a full 100% opaque
track and adds some opacity to

00:20:37.970 --> 00:20:40.500
that so that if you then layer
it on top of something else,

00:20:40.500 --> 00:20:43.690
it's blending into the background.

00:20:43.990 --> 00:20:49.050
And the cross-dissolve transition
lets you take two clips,

00:20:49.160 --> 00:20:51.690
put them next to each other,
and cross-dissolve between them.

00:20:51.790 --> 00:20:58.550
So building your effects off
of the standard QuickTime

00:20:59.690 --> 00:21:06.890
Codex makes it a lot
simpler to develop these,

00:21:06.890 --> 00:21:06.890
and this is really the core set of
being able to do anything in real time.

00:21:07.740 --> 00:21:13.350
In addition to those,
we've developed a set within Final Cut.

00:21:13.500 --> 00:21:42.300
[Transcript missing]

00:21:43.270 --> 00:21:53.560
The Speed Filter lets you define variable
rate speed and play it back in real time.

00:21:53.560 --> 00:21:53.560
Now this can be done either

00:21:53.840 --> 00:21:57.200
"As a single track where we're
just holding frames and playing

00:21:57.200 --> 00:22:02.950
them out in the new durations,
or you can also

00:22:03.310 --> 00:22:08.360
"We do a dual track playback
and blend the results.

00:22:08.360 --> 00:22:11.770
So in a dual track version,
we provide you the frame that's a

00:22:11.770 --> 00:22:15.040
little bit before the point in time
that we really want to be showing,

00:22:15.040 --> 00:22:21.910
and the frame that's a little
after that point in time,

00:22:21.910 --> 00:22:23.030
and you can blend the two based
on the ratio of how far it is

00:22:23.030 --> 00:22:23.030
away from the optimal time."

00:22:26.490 --> 00:22:29.450
The RT data filter is something we
developed as a way to get around the

00:22:29.560 --> 00:22:34.940
problem I was describing before about
using multiple formats in one sequence.

00:22:34.940 --> 00:22:43.720
And this also simplifies the
development of the playback as well.

00:22:43.720 --> 00:22:48.940
Because in a standard QuickTime model,
if you're playing normal

00:22:49.310 --> 00:22:53.460
video without effects on it,
you're going to get a call per frame

00:22:53.460 --> 00:22:56.060
to be decompressing each of the frames.

00:22:56.400 --> 00:22:58.340
And then handling it
and passing it through.

00:22:58.400 --> 00:23:03.380
When you're performing an effect,
the effect is really treated as

00:23:03.380 --> 00:23:06.400
one frame of very long duration.

00:23:06.400 --> 00:23:08.400
Or one sample, really.

00:23:08.400 --> 00:23:12.410
And you're responsible for
producing all the in-between frames

00:23:12.750 --> 00:23:14.970
based on the timing provided.

00:23:15.640 --> 00:23:19.510
With this data filter,
you can construct a, well,

00:23:19.510 --> 00:23:24.310
Final Cut will construct the sequence
for you so that everything in the movie

00:23:24.670 --> 00:23:27.800
is flowing through the effect model.

00:23:27.820 --> 00:23:31.000
That if you have no other effects,
you always have the

00:23:31.000 --> 00:23:32.840
data filter at the base.

00:23:32.880 --> 00:23:36.330
It also provides a way for us
to pass off some data that is

00:23:36.340 --> 00:23:38.780
otherwise not easy for you to get.

00:23:38.930 --> 00:23:41.820
For example, what's the frame rate?

00:23:41.820 --> 00:23:45.350
It's one of those tricky things where
QuickTime's so flexible that they don't

00:23:45.350 --> 00:23:48.480
really care what the frame rate is,
but in the video world,

00:23:48.520 --> 00:23:51.970
the frame rate really
matters and doesn't change.

00:23:52.050 --> 00:23:54.040
Your hardware really
needs to know what it is.

00:23:54.040 --> 00:23:58.430
And sometimes it's not as obvious as it
should be when you're trying to figure

00:23:58.430 --> 00:23:59.610
it out based on the QuickTime movie.

00:23:59.710 --> 00:24:02.700
So we can give you that
directly through this.

00:24:04.060 --> 00:24:11.750
The RT-STILS effect lets you include
STILS in the sequence in real time.

00:24:12.010 --> 00:24:14.870
Now, the STILS are set up

00:24:15.080 --> 00:24:20.610
So that we render them when we
construct the movie and put them

00:24:20.610 --> 00:24:25.820
into RAM so that on playback there's
no delay accessing them from disk or

00:24:25.820 --> 00:24:28.840
creating them if they're generators.

00:24:29.000 --> 00:24:33.390
And the interface provides the
ability to control how much of the

00:24:33.450 --> 00:24:38.000
applications memory you're going
to dedicate to the still cache.

00:24:38.010 --> 00:24:43.770
And we've got a lot of code in
there to handle releasing and

00:24:43.770 --> 00:24:49.000
reallocating the stills as you switch
the sequence that's in the front.

00:24:49.000 --> 00:24:51.070
Of course,
if you're using more stills than

00:24:51.100 --> 00:24:54.280
fit in memory and you're switching,
it's got to be regenerating

00:24:54.320 --> 00:24:55.990
them each time you switch tabs.

00:24:56.000 --> 00:24:58.190
So there's a price to that.

00:24:58.930 --> 00:25:03.980
And then the motion effect
implements the controls that

00:25:03.980 --> 00:25:05.680
are in the Final Cut motion tab.

00:25:05.870 --> 00:25:11.760
So this gives you the
ability to do scaling,

00:25:11.760 --> 00:25:11.760
centering,

00:25:12.400 --> 00:25:17.130
"Rotation, cropping, distort,
drop shadow,

00:25:17.130 --> 00:25:23.170
those are the sorts of things
that are in the motion effect."

00:25:26.280 --> 00:25:35.990
Now, when we take the effect that you've
described in the Final Cut timeline and

00:25:37.380 --> 00:25:40.240
Convert that into a QuickTime movie.

00:25:40.340 --> 00:25:43.960
We have to break down the
hierarchy of the effects as

00:25:43.960 --> 00:25:46.460
they're going to be processed.

00:25:46.610 --> 00:25:51.560
So this is an example where we've got
a moving still over cross-dissolve

00:25:51.700 --> 00:25:54.580
of two color-corrected DV sources.

00:25:54.710 --> 00:25:58.890
So in the upper left,
we've got the still effect,

00:25:58.890 --> 00:26:03.850
which is essentially a generator
in the QuickTime model because

00:26:03.850 --> 00:26:03.850
there are no sources to that.

00:26:04.650 --> 00:26:10.080
Then below that you can see the
two video streams which feed

00:26:10.090 --> 00:26:13.380
the color correction effects.

00:26:13.550 --> 00:26:21.260
Those two color correctors go
in the cross dissolve and the

00:26:21.260 --> 00:26:21.260
motion still with the motion goes
through being composite on top.

00:26:23.200 --> 00:26:27.960
But within the QuickTime movie structure,
it actually looks a lot

00:26:27.960 --> 00:26:32.250
more like our timeline,
in that you've got a base video track,

00:26:32.250 --> 00:26:36.140
and then you've got tracks
for the various sources.

00:26:36.240 --> 00:26:44.860
So over in the movie world,
you're going to see just

00:26:44.860 --> 00:26:44.920
the composite there,
and the two DV sources.

00:26:45.630 --> 00:26:48.560
So, for example,
the composite that's over

00:26:48.560 --> 00:26:52.890
there on the right is the
only thing that you really see

00:26:53.260 --> 00:26:57.370
directly in the movie.

00:26:57.580 --> 00:26:59.300
And when they try to play back the movie,

00:26:59.390 --> 00:27:02.610
QuickTime goes around and asks
all of the installed components

00:27:02.740 --> 00:27:06.680
who handle that format,
or that particular effect,

00:27:06.680 --> 00:27:09.890
in this case the composite blend effect.

00:27:09.940 --> 00:27:12.860
They're looking for anybody
that can handle that,

00:27:12.910 --> 00:27:17.360
and if you're writing these components,
your component should say you can.

00:27:17.420 --> 00:27:20.560
But when that happens,
you're then responsible for handling

00:27:20.560 --> 00:27:22.200
all the things that are below it.

00:27:22.450 --> 00:27:24.840
So you need to examine the tree,
make sure that it's all

00:27:24.880 --> 00:27:29.300
stuff that you understand,
and then you have to expand that out.

00:27:29.530 --> 00:27:33.910
And map that to whatever hardware
or software components you have

00:27:33.910 --> 00:27:36.090
that can perform these pieces.

00:27:39.160 --> 00:27:43.050
The capture architecture is very
much like the playback architecture,

00:27:43.090 --> 00:27:45.080
just a few pieces that are replaced.

00:27:45.080 --> 00:27:48.690
Data is flowing the other direction.

00:27:48.800 --> 00:27:51.460
You've got the sequence
grabber that's really driving

00:27:51.460 --> 00:27:53.090
the QuickTime side of things.

00:27:53.100 --> 00:27:59.240
And then the pieces that you need
to write is the video digitizer

00:27:59.240 --> 00:28:02.100
and the Core Audio device.

00:28:02.100 --> 00:28:06.200
So in the audio side,
it's flowing through the

00:28:06.200 --> 00:28:09.100
sound manager and Core Audio.

00:28:09.100 --> 00:28:13.100
Again, the audio is the center path
and video is on the left.

00:28:13.240 --> 00:28:15.840
And as usual,
the device control is off to the

00:28:15.850 --> 00:28:20.380
side as a separate path that really,
in most cases, won't affect anything

00:28:20.470 --> 00:28:22.100
that you'd be writing.

00:28:22.110 --> 00:28:26.260
The application would talk straight
to the devices through something

00:28:26.260 --> 00:28:28.100
like a USB to serial converter.

00:28:28.100 --> 00:28:32.100
Or if you're using a FireWire protocol,
it could be A/V sync.

00:28:32.100 --> 00:28:32.940
control.

00:28:36.690 --> 00:28:40.170
So again,
this is pretty much the standard

00:28:40.170 --> 00:28:44.270
QuickTime model for how to do things,
and if you're trying to figure out

00:28:44.290 --> 00:28:47.270
how to write the QuickTime drivers,
there's a lot of information

00:28:47.270 --> 00:28:49.130
available on the QuickTime website.

00:28:49.280 --> 00:28:54.440
And I/O Kit layer for how to
talk to the hardware is also

00:28:54.440 --> 00:28:56.900
standard for the device drivers.

00:28:57.160 --> 00:28:59.900
But there are some things that
you need to know to work with

00:28:59.900 --> 00:29:01.700
Final Cut that are a little different.

00:29:01.740 --> 00:29:05.550
One of them is that getting the
AV sync on playback accurately.

00:29:06.600 --> 00:29:11.460
For those of you who made it to the
QuickTime session yesterday afternoon,

00:29:11.460 --> 00:29:17.250
Jean-Michel was describing the new
APIs that'll make this a little better

00:29:17.740 --> 00:29:20.840
in the next version of QuickTime.

00:29:20.850 --> 00:29:24.080
Unfortunately, that's not part of
Final Cut 4 at this point,

00:29:24.110 --> 00:29:27.540
but we will be switching
to that at some point.

00:29:27.580 --> 00:29:30.680
But as it stands now,
since the audio and the video

00:29:30.680 --> 00:29:33.480
are running through those two
separate paths that we saw,

00:29:33.660 --> 00:29:36.750
they're independent,
and you have to do some work to make

00:29:36.750 --> 00:29:40.400
sure that they come back together and
are in perfect sync when you play back.

00:29:40.400 --> 00:29:43.160
On the playback side,
it's pretty straightforward

00:29:43.160 --> 00:29:47.400
in that as playback begins,
the first frame of audio that you

00:29:47.410 --> 00:29:51.040
receive and the first frame of video
that you receive should be lined up,

00:29:51.070 --> 00:29:53.140
even though they come at separate times.

00:29:53.160 --> 00:29:56.770
We know and you know that those are
the two things that need to be played

00:29:56.770 --> 00:29:59.540
together to begin the playback.

00:30:00.800 --> 00:30:05.170
For capture,
it's a similar sort of problem,

00:30:05.320 --> 00:30:08.540
and that's not yet addressed in
the new version of QuickTime.

00:30:08.640 --> 00:30:12.170
So the way we've worked around
that one is to have you insert

00:30:12.190 --> 00:30:16.560
a known pattern into the audio,
since the audio is streaming before the

00:30:16.690 --> 00:30:19.110
actual video frames start to appear.

00:30:19.260 --> 00:30:22.440
You just insert,
we provide a call to give

00:30:22.580 --> 00:30:24.400
you the pattern to use.

00:30:24.400 --> 00:30:29.180
You insert that into your audio up until
the point where you begin the capture.

00:30:29.260 --> 00:30:32.600
And once again, in your drivers,
you know exactly which video frame

00:30:32.690 --> 00:30:36.250
you're starting the capture with
and what audio corresponds to that.

00:30:36.260 --> 00:30:40.060
So when you get to that first frame of
audio that corresponds to that first

00:30:40.060 --> 00:30:43.670
frame of video that you are capturing,
stop inserting our pattern,

00:30:43.920 --> 00:30:48.260
put in the real audio stream,
and we'll add that to the video.

00:30:48.260 --> 00:30:52.260
After the capture, walk through,
look at the audio at the beginning,

00:30:52.260 --> 00:30:55.490
strip off all the parts
that match the pattern,

00:30:55.600 --> 00:30:58.260
and line up that,
the next sample of audio,

00:30:58.260 --> 00:31:00.250
with the beginning of the video.

00:31:01.920 --> 00:31:09.220
As I said,
the VTR control would generally be

00:31:09.220 --> 00:31:09.220
through external devices like USB.

00:31:10.610 --> 00:31:14.410
Now, one of the other areas that
is different from the standard

00:31:14.410 --> 00:31:20.270
QuickTime model is the RT enabler.

00:31:20.270 --> 00:31:22.530
This is what's used to let Final Cut know
the capabilities of your RT system.

00:31:23.690 --> 00:31:33.720
These are implemented as FX scripts
using the FX script language,

00:31:33.720 --> 00:31:39.150
and they're run as startup scripts
as opposed to the normal scripts

00:31:39.150 --> 00:31:39.150
that are interpreted and run to
perform effects in real time.

00:31:40.550 --> 00:31:44.680
The first important aspect of the
enabler is the effect mapping.

00:31:44.680 --> 00:31:49.660
And what the effect mapping accomplishes
for us is the ability to use the same

00:31:49.660 --> 00:31:56.650
filters and UI and effect scripts for
real-time as we use for not real-time.

00:31:56.700 --> 00:32:00.960
That means that the users don't need
to learn different sets of filters

00:32:00.960 --> 00:32:03.820
or choose different filters depending
on their hardware configuration.

00:32:03.820 --> 00:32:06.070
They just edit the same
way they always do.

00:32:06.980 --> 00:32:12.170
And within this effect mapping,
your script will define which of

00:32:12.270 --> 00:32:18.990
our software FX scripts you've got
hardware or other acceleration for.

00:32:19.000 --> 00:32:25.300
And through this effect mapping,
we describe what QuickTime components

00:32:25.400 --> 00:32:28.700
of yours get called in
place of the FX scripts.

00:32:34.450 --> 00:32:38.400
One of the big advantages of that,
as I said, is that you've got only one

00:32:38.400 --> 00:32:41.220
set of filters and effects that
people need to learn to use.

00:32:41.220 --> 00:32:45.340
But another aspect of that is that
you can take a project file that you

00:32:45.500 --> 00:32:50.550
built on a high-end system with lots
of hardware and can move it over to,

00:32:50.630 --> 00:32:54.280
say, a PowerBook and work
on a portable system,

00:32:54.280 --> 00:32:56.120
which doesn't have
access to your hardware,

00:32:56.120 --> 00:33:00.860
and the filters and effects still
perform correctly because they were

00:33:00.860 --> 00:33:03.340
all built off of the effects scripts.

00:33:03.710 --> 00:33:05.240
We just fall back to the effects scripts.

00:33:05.240 --> 00:33:06.780
You can see the right results.

00:33:06.780 --> 00:33:10.340
And it works the opposite way, too,
that somebody could be developing

00:33:10.340 --> 00:33:14.770
their project in offline mode without
the hardware and then going into

00:33:14.770 --> 00:33:19.990
an online suite and using the new
features and capabilities that you've

00:33:19.990 --> 00:33:22.160
developed to get things in real time.

00:33:25.110 --> 00:33:29.870
Second big aspect of the
RT-Enabler is the effect costing.

00:33:29.990 --> 00:33:33.810
The effect costing is necessary to be
able to predict before we play it back

00:33:33.810 --> 00:33:38.100
whether something's going to require
rendering or can be played in real time.

00:33:38.100 --> 00:33:42.190
At first glance,
that seems like a simple problem,

00:33:42.190 --> 00:33:46.180
but in fact,
it's not at all obvious when you get to

00:33:46.180 --> 00:33:52.090
the middle ground as to whether something
will perform in real time or not.

00:33:52.100 --> 00:33:58.100
If you've got a piece of hardware that's
got three physical decoders on it,

00:33:58.100 --> 00:34:01.880
you can pretty well guarantee
that a fourth stream of

00:34:01.950 --> 00:34:04.100
video is not going to work.

00:34:04.270 --> 00:34:09.100
That's a pretty simple
aspect of the costing.

00:34:09.100 --> 00:34:13.100
But if you're doing it in software
or a lot of the hardware these days,

00:34:13.100 --> 00:34:16.730
it's more general purpose and
it's more a matter of how many

00:34:16.730 --> 00:34:21.100
other things is it trying to do
that limits the capabilities.

00:34:21.100 --> 00:34:23.100
So we've got two models that we can use.

00:34:23.100 --> 00:34:28.100
One of them is based on a time budget
and the other is a resource budget.

00:34:28.240 --> 00:34:30.100
And you can use the two
of them at the same time.

00:34:30.100 --> 00:34:35.790
So the resource budget is like the
example I had where you've got physical

00:34:35.790 --> 00:34:40.090
decompressors and you can't handle
more than three streams of video.

00:34:40.170 --> 00:34:43.100
So you can put a limit
saying you can only do three.

00:34:43.100 --> 00:34:46.240
On the other hand,
the time budget is a model

00:34:46.240 --> 00:34:50.100
where you describe how long
each of the effects takes.

00:34:50.100 --> 00:34:56.100
And how much total time you're willing
to take to perform the effects.

00:34:56.100 --> 00:34:59.100
And before we construct
the QuickTime movie,

00:34:59.100 --> 00:35:01.660
we run through it,
add it all up and see whether all the

00:35:01.660 --> 00:35:04.100
pieces exceeds the limit that you've set.

00:35:04.100 --> 00:35:08.100
And if it exceeds the limit,
we'll put up the red render bar saying,

00:35:08.100 --> 00:35:09.090
"Sorry, this needs rendering.

00:35:09.090 --> 00:35:12.040
We can't do that in
real time." Otherwise,

00:35:12.040 --> 00:35:17.100
we'll give you the green render bar
and see it play back in real time.

00:35:20.900 --> 00:35:25.550
So a couple of changes that we
made in version 4 to the enablers.

00:35:25.760 --> 00:35:30.090
One of these is providing the
manufacturer name to show up

00:35:30.090 --> 00:35:32.540
in the Effects Handling tab.

00:35:32.640 --> 00:35:35.340
So if you don't add the
new entry to the enabler,

00:35:35.540 --> 00:35:38.970
over there where I showed you
in the Effects Handling tab,

00:35:39.080 --> 00:35:43.240
we won't know what to provide as a name.

00:35:43.360 --> 00:35:48.090
We'll just put the manufacturer 4cc,
which isn't very useful

00:35:48.140 --> 00:35:49.760
to your customers.

00:35:51.390 --> 00:35:55.920
Another enhancement that we made to it,
if you've looked at

00:35:55.920 --> 00:36:01.510
the Final Cut enabler,
the one that's inside of our application,

00:36:01.590 --> 00:36:06.440
you can see that it's a pretty big file,
and we've added some commands

00:36:06.440 --> 00:36:12.840
that help save the redundancy,
make it easier to write the pieces,

00:36:12.840 --> 00:36:17.000
and maintain the code that
you're putting in there.

00:36:17.990 --> 00:36:22.320
For example, if you're defining all of
the capabilities for DV,

00:36:22.320 --> 00:36:28.450
NTSC DV, you then have to duplicate
all of that again to do PAL,

00:36:28.450 --> 00:36:33.060
and with the new commands,
it's pretty easy to just duplicate

00:36:33.090 --> 00:36:38.330
and then tell it what's different,
rather than repeat a lot of the data.

00:36:39.960 --> 00:36:45.720
Another new thing that we've added in
this version is a debugging enabler,

00:36:45.720 --> 00:36:45.720
which

00:36:45.950 --> 00:36:51.700
Just use data to counsel about what's
going on while we're interpreting the

00:36:51.700 --> 00:36:56.700
effects and figuring out what we're going
to be building in the QuickTime movie.

00:36:56.900 --> 00:37:05.290
One of the trickiest things has
been when you build your effect,

00:37:05.300 --> 00:37:05.990
you've got all your components installed,
you think everything's set up, and

00:37:06.180 --> 00:37:07.930
you put it all together and
you get a red render bar.

00:37:07.940 --> 00:37:11.190
It's like, okay, why isn't it real time?

00:37:11.200 --> 00:37:13.840
There's a lot of reasons
it could not be real time.

00:37:13.840 --> 00:37:21.120
And short of you getting together with
us using your debugger and our debugger,

00:37:21.120 --> 00:37:24.830
it's been pretty tricky to
figure out some of these cases.

00:37:24.840 --> 00:37:27.780
This way,
we're providing more information

00:37:27.780 --> 00:37:30.620
about what we're doing on our side
and what we thought didn't work.

00:37:30.620 --> 00:37:33.390
So I think this is going to help a lot.

00:37:34.250 --> 00:37:36.980
And we'd like feedback on other
sorts of things that we can be

00:37:36.980 --> 00:37:38.240
putting in here that'll help you out.

00:37:42.830 --> 00:37:46.940
So, here's an example,
a very simple example,

00:37:46.940 --> 00:37:54.170
of what's necessary to enable
video out and the uncompressed

00:37:54.170 --> 00:37:56.540
software path in version four.

00:37:56.980 --> 00:38:01.860
So, the first line is setting
the enable to view IFX flag,

00:38:02.090 --> 00:38:10.300
and that enables the software
processing of uncompressed video in

00:38:10.300 --> 00:38:13.200
real time within the application.

00:38:13.200 --> 00:38:20.240
The second switch,
the enable software RT video out flag,

00:38:20.670 --> 00:38:26.940
lets us call your video out
with our software effect.

00:38:26.980 --> 00:38:29.730
So,

00:38:29.870 --> 00:38:34.080
This makes the RKE Enabler look simple.

00:38:34.130 --> 00:38:36.480
And if you're building
just an I/O device,

00:38:36.530 --> 00:38:39.240
this is all you really
need to be able to do.

00:38:39.340 --> 00:38:42.090
Because all of the effects processing
will be handled through our software,

00:38:42.100 --> 00:38:48.480
we've already got a complex enabler
that describes how to do all

00:38:48.480 --> 00:38:48.480
of the effects that we perform.

00:38:48.910 --> 00:38:52.350
In this case,
the parameter 1 at the beginning

00:38:52.350 --> 00:38:55.350
of the enable software,
or T-video out,

00:38:55.350 --> 00:38:59.760
is a description of what the
relative cost of your video audio

00:38:59.760 --> 00:39:02.800
is compared to our standard version.

00:39:02.800 --> 00:39:09.920
So you need to do a little profiling to
see what scale factor to put in there

00:39:09.970 --> 00:39:13.560
so that our costing works out right.

00:39:13.560 --> 00:39:13.560
But otherwise,
it's pretty straightforward.

00:39:16.060 --> 00:39:26.900
So the opportunities in the
area to support Final Cut,

00:39:27.240 --> 00:39:30.520
hardware acceleration is always going
to be able to provide more effects,

00:39:30.520 --> 00:39:30.520
better quality.

00:39:31.430 --> 00:39:37.400
In the SD world, the SineWave,
for example,

00:39:37.400 --> 00:39:48.910
now can do a number of streams of
full-quality SD with a wide variety of

00:39:48.910 --> 00:39:49.950
the effects that we have in Final Cut.

00:39:50.710 --> 00:39:56.990
In the HD world,
the bandwidth requirements make

00:39:56.990 --> 00:39:56.990
hardware a real necessity still.

00:39:57.680 --> 00:40:01.700
There's a number of products
already that provide 3/2 pulldown

00:40:01.700 --> 00:40:08.180
in real time from the video outs,
so we're playing it back as though

00:40:08.270 --> 00:40:16.840
it's 24 and they provide a spicket
that converts that to 30 for playback.

00:40:16.840 --> 00:40:20.220
Another aspect of what you
can do with hardware is

00:40:20.220 --> 00:40:28.020
provide other kinds of codecs,
so MPEG-2, motion JPEG, there's Bixlet,

00:40:28.020 --> 00:40:29.980
who knows?

00:40:29.980 --> 00:40:35.160
You can do whatever you want.

00:40:37.550 --> 00:40:45.650
So with RTXtreme, that really demands an
I/O style of device.

00:40:45.710 --> 00:40:49.080
If you're going to use the software
effects built into Final Cut,

00:40:49.160 --> 00:40:54.020
all you need to provide is the
interface to the video hardware.

00:40:54.180 --> 00:40:58.360
That can be done either
through PCI or FireWire.

00:40:58.390 --> 00:41:01.580
There's a number of boards out there
now that are doing this with PCI.

00:41:01.580 --> 00:41:05.850
Gio's going to be talking about how
you can do this with FireWire now.

00:41:06.810 --> 00:41:12.450
One of the things that the I/O device
provides is a way to connect to VTRs,

00:41:12.500 --> 00:41:17.080
but another aspect is to give
you true color monitoring on

00:41:17.140 --> 00:41:19.560
NTSC or PAL video devices.

00:41:21.070 --> 00:41:27.540
Another big area of opportunity,
this isn't exactly hardware specific,

00:41:27.650 --> 00:41:32.040
but effects scripts and after
effects plugins fit into the effects

00:41:32.040 --> 00:41:34.310
model within Final Cut nicely.

00:41:36.380 --> 00:41:40.910
So to get back to HD,
this is really the biggest

00:41:40.910 --> 00:41:43.200
opportunity area that I see coming up.

00:41:43.220 --> 00:41:50.180
And that as RT Extreme gets
faster and faster,

00:41:50.250 --> 00:41:53.160
taking over the SD video
world is within sight.

00:41:53.160 --> 00:41:54.130
We're not there.

00:41:54.250 --> 00:41:56.640
There's still a lot that
hardware can do in that area.

00:41:56.660 --> 00:42:00.610
But in HD, it's going to be a while.

00:42:00.950 --> 00:42:04.480
There isn't anything that's going
to get you high quality HD out

00:42:04.500 --> 00:42:07.710
of the computer as it is today.

00:42:09.400 --> 00:42:13.020
Advantage,
it's the same basic architecture as SD,

00:42:13.060 --> 00:42:14.020
it's just bigger.

00:42:14.030 --> 00:42:17.550
Wider, higher, faster.

00:42:19.340 --> 00:42:23.520
And of course, the new hardware that
we've been introducing,

00:42:23.520 --> 00:42:27.200
the G5 with PCIX,
will assist you with the high

00:42:27.200 --> 00:42:29.300
bandwidth needs in this area.

00:42:29.360 --> 00:42:34.720
And the XSERV RAID is a good way to get a
lot of data quickly off of the hard disk.

00:42:36.260 --> 00:42:37.060
All right.

00:42:37.190 --> 00:42:42.160
I'd like to introduce Giovanni Agnole
to take over and talk about the

00:42:42.160 --> 00:42:45.090
uncompressed codecs that we've developed.

00:42:55.200 --> 00:42:57.360
Okay,
my name's Giovanni Agnolli and I'm going

00:42:57.430 --> 00:42:58.970
to be talking about two things today.

00:42:59.020 --> 00:43:03.980
The first is going to be the
uncompressed 422 codecs that we've

00:43:03.980 --> 00:43:06.980
included in the Final Cut Pro release.

00:43:07.070 --> 00:43:14.520
I'm also going to be talking
about Pro I/O after that.

00:43:15.580 --> 00:43:21.300
In the 4.0 release of Final Cut,
we've added standard 8- and 10-bit

00:43:21.300 --> 00:43:26.630
uncompressed YCBCR422 codecs,
and these are also

00:43:27.000 --> 00:43:31.580
available to developers for
inclusion in their products.

00:43:31.580 --> 00:43:40.900
Say you wanted to ship a PCI board
that worked with After Effects.

00:43:41.020 --> 00:43:44.840
The main reason we did these codecs
is so that we could facilitate the

00:43:44.840 --> 00:43:50.620
exchange of uncompressed data and remove
the need for vendor-specific codecs.

00:43:50.620 --> 00:43:57.080
We saw a lot of problems with users
trying to exchange uncompressed data,

00:43:57.080 --> 00:44:01.920
and they needed to go and send
their friend who wanted to read

00:44:01.920 --> 00:44:06.720
the data the vendor-specific
codec that had created it.

00:44:06.800 --> 00:44:11.800
Of course, these codecs are tuned to take
advantage of the latest hardware.

00:44:11.800 --> 00:44:16.400
We've done a lot of work to
improve the speed of them by

00:44:16.400 --> 00:44:18.800
writing some AlteVec code.

00:44:18.800 --> 00:44:26.370
And another big win with these codecs is
that Final Cut 4 supports them natively.

00:44:28.110 --> 00:44:31.490
So the formats of these codecs
are pretty straightforward,

00:44:31.490 --> 00:44:33.050
and they've been around
for quite a while,

00:44:33.100 --> 00:44:33.530
actually.

00:44:33.660 --> 00:44:37.580
They were originally
described by Chris Perazzi in

00:44:37.580 --> 00:44:42.590
December '99 in QT IceFlow '19,
and I put the link up here

00:44:42.590 --> 00:44:44.760
so you guys can check it out.

00:44:44.930 --> 00:44:48.260
And we commonly refer to
the codecs by their 4CCs.

00:44:48.260 --> 00:44:51.290
So Ken's talked about the
2VUI and the V210 codecs.

00:44:51.330 --> 00:44:54.830
That's essentially what
we're talking about here,

00:44:54.830 --> 00:44:58.100
8-bit and 10-bit uncompressed YCBCR.

00:44:58.870 --> 00:45:03.250
The codecs have a lot of capabilities,
but the things that you guys

00:45:03.250 --> 00:45:07.300
are most interested in is what
they compress and decompress to.

00:45:07.300 --> 00:45:14.080
And the 2VY codec supports
the R408 and V408 FCP formats,

00:45:14.120 --> 00:45:17.290
as well as 32-bit ARGB and 2VY.

00:45:17.400 --> 00:45:23.490
The 10-bit adds support for the FCP R4FL,
which is the 32-bit

00:45:23.550 --> 00:45:28.000
floating point format,
and V64A, which is the

00:45:28.000 --> 00:45:31.800
After Effects 16-bit RGB format.

00:45:31.810 --> 00:45:36.300
We also support the QT gamma
level APIs in these codecs.

00:45:36.340 --> 00:45:41.160
And so if you have a destination
PIX map that has a different

00:45:41.430 --> 00:45:46.300
gamma than the source image,
we'll do the gamma conversion for you.

00:45:46.300 --> 00:45:48.780
And as I said before,
they've been optimized

00:45:48.780 --> 00:45:50.890
for the latest hardware.

00:45:53.340 --> 00:45:58.060
So the main reason we're telling
you about this is because we

00:45:58.060 --> 00:45:59.680
want you to use these codecs.

00:45:59.820 --> 00:46:03.960
And just, you know,
the benefits are highest quality.

00:46:03.960 --> 00:46:04.920
It's uncompressed.

00:46:04.920 --> 00:46:07.190
It's not a lossy codec.

00:46:07.200 --> 00:46:13.380
We want to get a common file format
among our user base so that we can ease

00:46:13.380 --> 00:46:18.840
the interchange of data among our users,
which we believe will improve

00:46:18.840 --> 00:46:21.070
the user workflow dramatically.

00:46:21.090 --> 00:46:25.600
And it's also important that
you support these formats if

00:46:25.630 --> 00:46:30.270
you intend to use RTX Stream,
because RTX Stream is

00:46:30.270 --> 00:46:32.870
tuned for these codecs.

00:46:33.040 --> 00:46:37.360
We use the 2VUI format
internally to render.

00:46:37.380 --> 00:46:41.340
So if it has to do a
conversion to another format,

00:46:41.350 --> 00:46:46.340
that's an extra copy there
that means loss of performance.

00:46:46.340 --> 00:46:50.280
And best of all,
you're getting free optimized code.

00:46:50.280 --> 00:46:52.960
And it can't get better than that.

00:46:53.140 --> 00:46:56.640
We're going to give these codecs
to you to distribute if you'd like.

00:46:56.640 --> 00:47:00.260
And that means less work
for you as a developer.

00:47:00.260 --> 00:47:04.270
You can focus on doing something
cool with your hardware

00:47:04.440 --> 00:47:06.210
instead of writing codecs.

00:47:06.380 --> 00:47:08.780
So the next thing I'm going
to talk about is ProIO,

00:47:08.780 --> 00:47:15.610
which is, I don't know,
a new way of getting audio and

00:47:15.610 --> 00:47:17.430
video in and out of the Macintosh.

00:47:17.540 --> 00:47:22.590
And first I want to talk a little
bit about the philosophy behind

00:47:22.610 --> 00:47:25.960
ProIO and why we went about doing this.

00:47:25.980 --> 00:47:32.670
As Ken talked previously,
we see this trend of ever increasing

00:47:32.860 --> 00:47:38.790
processing power in the CPU and
GPU and decreasing cost of storage.

00:47:39.010 --> 00:47:43.560
And so that led us to
developing RTX Stream,

00:47:43.560 --> 00:47:48.260
which takes advantage of those
capabilities in the host machine.

00:47:48.260 --> 00:47:55.440
And with that,
we needed a mechanism for easily getting

00:47:55.850 --> 00:48:01.370
audio and video in and out of the Mac,
primarily interfacing with

00:48:01.370 --> 00:48:07.830
professional devices such as
high-end VTRs and cameras.

00:48:07.860 --> 00:48:11.480
And so when we went and tried
to figure out what kind of

00:48:11.480 --> 00:48:16.150
bus we were going to use,
we decided on FireWire because of

00:48:16.330 --> 00:48:18.940
its easy plug and play capabilities.

00:48:18.940 --> 00:48:20.840
And it's also really simple
instead of like having to

00:48:20.840 --> 00:48:25.540
go to a PCI card or whatnot,
you just plug it in

00:48:25.540 --> 00:48:27.660
similar to a DV camera.

00:48:28.580 --> 00:48:30.830
So what is a Pro-I architecture?

00:48:30.840 --> 00:48:33.000
It's basically got two parts.

00:48:33.090 --> 00:48:36.460
We have a data transfer
protocol specification,

00:48:36.610 --> 00:48:39.440
and we also have FireWire
unit specifications.

00:48:39.510 --> 00:48:44.660
And the data transfer protocol
specification mainly deals with

00:48:44.660 --> 00:48:49.480
how to send uncompressed audio
and video over the 1394A bus.

00:48:49.500 --> 00:48:53.620
And so in that uncompressed stream,
we're sending synchronized

00:48:53.620 --> 00:48:54.870
audio and video.

00:48:54.900 --> 00:49:02.500
The video can be NTC or PAL, 8 or 10 bit,
YCBC or 422 video.

00:49:02.500 --> 00:49:07.430
And we also send eight
channels of uncompressed audio,

00:49:07.520 --> 00:49:13.320
which can be 16 or 24 bit,
and a variety of sample rates.

00:49:13.680 --> 00:49:17.490
And that all comes out to
about 230 megabits per second.

00:49:17.500 --> 00:49:18.490
And then once we add, like, pro-I,
we can send that to the Pro-I.

00:49:18.570 --> 00:49:18.700
And so in that uncompressed stream,
we're sending synchronized

00:49:18.700 --> 00:49:18.740
audio and video.

00:49:18.740 --> 00:49:18.870
The video can be NTC or PAL, 8 or 10 bit,
YCBC or 422 video.

00:49:18.870 --> 00:49:18.970
And we also send eight
channels of uncompressed audio,

00:49:18.980 --> 00:49:19.490
which can be 16 or 24 bit,
and a variety of sample rates.

00:49:19.500 --> 00:49:24.000
protocol and packetization on
top of that were really pushing

00:49:24.000 --> 00:49:28.340
the limits of the 1394a spec.

00:49:28.340 --> 00:49:33.630
But we believe that it was important
to fit all this into the 400 megabit

00:49:33.630 --> 00:49:39.880
per second spec versus just because of
the wide variety of machines out there

00:49:39.880 --> 00:49:43.720
that have these connections on them.

00:49:43.720 --> 00:49:49.620
So getting back to the protocol
specification also covers things like

00:49:49.620 --> 00:49:56.280
packetization and the framing of the
data and some flow control techniques.

00:49:56.280 --> 00:50:02.160
The second part of the architecture
is the FireWire unit specification.

00:50:02.160 --> 00:50:05.420
And I don't know if you know
anything about FireWire,

00:50:05.430 --> 00:50:08.590
but there's a lot of
resources on the web.

00:50:08.600 --> 00:50:13.700
A unit specification kind of allows
a device to define its capabilities.

00:50:13.700 --> 00:50:17.560
And so we have three units.

00:50:17.700 --> 00:50:20.940
There's the AV unit,
which is the -- it does

00:50:20.940 --> 00:50:23.150
most of the heavy lifting.

00:50:23.160 --> 00:50:31.020
It handles all the transfer of
uncompressed audio and video.

00:50:31.020 --> 00:50:36.290
And we have a serial unit,
which handles -- allows us to

00:50:36.290 --> 00:50:40.700
transmit RS-422 over the FireWire.

00:50:40.700 --> 00:50:43.680
So this is really
useful for deck control.

00:50:43.680 --> 00:50:47.470
And the third unit we've
put into the architecture is

00:50:47.660 --> 00:50:51.570
the firmware upgrade unit,
which allows you to upgrade

00:50:51.570 --> 00:50:53.680
your device at some later date.

00:50:53.680 --> 00:50:58.630
So if you want to upgrade the firmware,
it's -- there's a unit

00:50:58.630 --> 00:51:01.390
that allows you to do that.

00:51:02.840 --> 00:51:07.280
So, what are the developer
opportunities with Pro I/O?

00:51:07.380 --> 00:51:11.540
Well, what we're trying to get is people,
you developers,

00:51:11.540 --> 00:51:13.580
to develop Pro I/O devices.

00:51:13.580 --> 00:51:19.590
We really think that there's a broad
market for these things and it really,

00:51:19.590 --> 00:51:25.200
you know, we've had a lot of success
with the first devices to date.

00:51:25.200 --> 00:51:29.090
So, you can develop an
analog-only device that would,

00:51:29.280 --> 00:51:33.200
you know,
convert component or composite signals,

00:51:33.200 --> 00:51:41.490
you know, XLR into digital data and
send it over the FireWire bus.

00:51:41.500 --> 00:51:47.790
Or you could develop a digital
I/O device that would take in SDI,

00:51:47.900 --> 00:51:50.500
AES, ADAT, et cetera.

00:51:50.500 --> 00:51:53.180
Or you could do a device that did both.

00:51:53.310 --> 00:51:55.190
Or maybe you have an idea.

00:51:55.200 --> 00:51:59.780
Maybe you have an idea of some
other connection that we haven't

00:51:59.780 --> 00:52:04.200
thought of and we'd be happy
to talk to you about that and,

00:52:04.200 --> 00:52:08.810
you know, update the specifications
to include that.

00:52:09.690 --> 00:52:16.740
So the first Pro IO device that
is out there today is the AJIO.

00:52:16.740 --> 00:52:18.940
And it's kind of the Cadillac of devices.

00:52:18.940 --> 00:52:24.830
And I just put this up here as an example
to show you what these devices look like.

00:52:24.840 --> 00:52:30.080
Basically, we have a bunch of analog
and digital connections.

00:52:30.080 --> 00:52:35.550
Pretty much anything a professional
video user could want to connect

00:52:35.560 --> 00:52:39.560
to their existing VTRs or cameras.

00:52:39.560 --> 00:52:44.110
And then you'll see in the lower
middle part of the screen there,

00:52:44.110 --> 00:52:46.650
there's a FireWire connection.

00:52:46.660 --> 00:52:50.390
That's the bus connection to the Mac.

00:52:50.460 --> 00:52:54.590
So we're basically capturing
data or playing back data through

00:52:54.590 --> 00:52:58.970
all these different connections
and then transferring it over

00:52:58.970 --> 00:53:01.020
the FireWire bus to the Mac.

00:53:01.100 --> 00:53:04.740
There's also an RS-422 connection
there for deck control,

00:53:04.740 --> 00:53:09.400
which if you're in the Pro video space,
you know is absolutely necessary.

00:53:09.600 --> 00:53:10.840
Amen.

00:53:11.200 --> 00:53:22.180
So, along with the architecture,
we're also providing drivers.

00:53:22.180 --> 00:53:28.040
The ProIO driver release is a
standard set of QuickTime drivers

00:53:28.040 --> 00:53:30.090
for ProIO devices.

00:53:30.090 --> 00:53:32.100
So,
if you make a device that follows a spec,

00:53:32.210 --> 00:53:33.890
it should work with these drivers.

00:53:33.900 --> 00:53:41.310
In that set of QuickTime drivers,
there's a VDIG and a HAL plugin

00:53:41.310 --> 00:53:46.260
for capture of audio and video,
and also VOUT and the

00:53:46.260 --> 00:53:50.700
VOUT transfer codec and Clock,
Core Audio,

00:53:50.700 --> 00:53:54.160
HAL plugin output device for playback.

00:53:54.160 --> 00:53:59.830
And it's basically the QuickTime driver
set that you need to interrupt with

00:53:59.830 --> 00:54:02.960
any QuickTime-capable application.

00:54:02.960 --> 00:54:03.410
So,
if you make a device that follows a spec,

00:54:03.410 --> 00:54:03.880
it should work with these drivers.

00:54:03.880 --> 00:54:08.420
So, the idea is that these drivers
should work not just with Final Cut,

00:54:08.420 --> 00:54:10.720
but with other applications as well.

00:54:10.720 --> 00:54:15.190
Additionally,
we support the Final Cut specific

00:54:15.190 --> 00:54:21.760
APIs that Ken talked about earlier,
the Cover, A/V sync, and a Deck Control.

00:54:21.760 --> 00:54:25.140
And those are, you know,
we're the Final Cut team,

00:54:25.140 --> 00:54:28.600
so of course we do the extra
bit to support our app.

00:54:28.680 --> 00:54:33.860
In addition,
there's Apple FireWire Serial Driver,

00:54:33.860 --> 00:54:37.950
which... allows you to send
serial data over the FireWire

00:54:37.970 --> 00:54:40.000
bus to the ProIO device.

00:54:40.000 --> 00:54:42.830
And, of course,
all this stuff's been optimized

00:54:42.830 --> 00:54:47.000
for the latest hardware,
lots of good AlteVec loops, etc.

00:54:47.000 --> 00:54:49.540
And best of all,
it's out there right now.

00:54:49.540 --> 00:54:52.920
It was released yesterday.

00:54:54.060 --> 00:55:01.410
I took Ken's capture architecture
diagram and kind of grayed out all the

00:55:01.540 --> 00:55:08.780
non-ProIO parts just to show you what
we're providing in the driver package and

00:55:08.810 --> 00:55:14.000
also what you as a developer need to do.

00:55:14.010 --> 00:55:16.290
If you look down there,
there's the ProIO hardware.

00:55:16.300 --> 00:55:21.000
That's what developers need to develop.

00:55:21.330 --> 00:55:27.840
And then you can look and see that we
provide a ProIO VDIG and ProIO HAL plugin

00:55:27.840 --> 00:55:34.000
to get audio and video into Final Cut or
any QuickTime-enabled application.

00:55:34.000 --> 00:55:37.360
And then we also have the Apple FireWire
serial driver to do deck control.

00:55:37.360 --> 00:55:41.710
And all those talk through
the I/O FireWire family,

00:55:41.810 --> 00:55:47.110
which sends queries
across the FireWire bus.

00:55:48.250 --> 00:55:50.380
So playback is very similar.

00:55:50.440 --> 00:55:57.790
We have a transfer codec,
a V-out clock to send video out,

00:55:57.790 --> 00:56:01.840
and we have a HAL plugin
to send audio out.

00:56:01.870 --> 00:56:04.910
And again,
they communicate through the I/O FireWire

00:56:04.930 --> 00:56:06.960
family to the Pro I/O hardware.

00:56:06.960 --> 00:56:11.870
And there's the Apple FireWire serial
driver there for any deck control.

00:56:13.030 --> 00:56:16.520
So obviously I can't tell you
how to build a device right here.

00:56:16.520 --> 00:56:21.920
So if you want more information
on uncompressed 422 codec

00:56:21.940 --> 00:56:26.550
licensing or ProIO licensing,
or want to take part in

00:56:26.550 --> 00:56:31.000
an upcoming ProIO kitchen,
you should contact Jeff Lowe,

00:56:31.000 --> 00:56:34.950
who's our WDR representative,
and he will help get you

00:56:34.950 --> 00:56:36.920
the right information.

00:56:36.920 --> 00:56:40.080
I think I'm going to call Brett up.

00:56:40.100 --> 00:56:41.860
He's going to wrap up for us.

00:56:43.000 --> 00:56:46.590
Thanks, Jill.

00:56:53.730 --> 00:56:57.760
So we spent some time going over
all the various ways that you can

00:56:57.860 --> 00:57:03.020
be approaching or get involved in
developing hardware for Final Cut 4.

00:57:03.020 --> 00:57:04.700
We strongly encourage you to do that.

00:57:04.700 --> 00:57:07.760
There's a number of other sessions
that you can get involved with.

00:57:07.760 --> 00:57:11.730
Some of them are coming up here or
have happened early in the week,

00:57:11.730 --> 00:57:15.500
and if you've missed them,
they should be on the DVD.

00:57:15.500 --> 00:57:19.580
We will have a session tomorrow
for dealing with plug-ins and

00:57:19.750 --> 00:57:23.440
encourage you to do that if
you're interested in creating,

00:57:23.440 --> 00:57:27.590
for example, effects scripts or things
like After Effects modules,

00:57:27.590 --> 00:57:28.210
things like that.

00:57:28.300 --> 00:57:31.630
We will be talking about the
various plug-in models there,

00:57:31.630 --> 00:57:35.950
and we will have a feedback form for
Final Cut on Friday afternoon at 5:00.

00:57:38.030 --> 00:57:40.780
As already mentioned,
Jeff Lowe is the guy.

00:57:40.880 --> 00:57:46.650
If you're interested in any of the
pro professional film and video area,

00:57:46.650 --> 00:57:47.970
he can help you.

00:57:48.120 --> 00:57:51.260
As mentioned,
we will be having a kitchen later

00:57:51.260 --> 00:57:54.620
this year to get into details about
actually how to make some of these

00:57:54.650 --> 00:57:57.960
devices and what the protocols,
wire protocols and stuff are.

00:57:58.040 --> 00:58:02.000
There's a number of places
you can get more information.

00:58:02.000 --> 00:58:06.000
And obviously, it can take a while to
scribble all this down,

00:58:06.000 --> 00:58:09.000
but I believe all this information
is up on the web for you.

00:58:09.000 --> 00:58:12.560
But in addition to the kind
of standard stuff that's out

00:58:12.720 --> 00:58:16.000
there in terms of video formats,
if you haven't had a chance,

00:58:16.000 --> 00:58:20.000
there's QuickTime sessions and
audio sessions and I/O Kit sessions

00:58:20.000 --> 00:58:24.000
that will be very important for
you in terms of driver development.