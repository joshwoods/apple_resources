WEBVTT

00:00:26.020 --> 00:00:32.970
So what we're going to talk
about today is the UNIX tools.

00:00:32.980 --> 00:00:34.920
There we go.

00:00:35.640 --> 00:00:38.620
Now, you've heard about Xcode
and you've seen the demos,

00:00:38.820 --> 00:00:41.120
and Xcode is a full tool suite.

00:00:41.380 --> 00:00:44.960
Part of that means that it
includes command-line tools.

00:00:45.250 --> 00:00:49.050
We have a full set of command-line
tools of the traditional sort that

00:00:49.170 --> 00:00:53.370
the UNIX community is used to,
has been using for a long time.

00:00:53.590 --> 00:00:55.520
We use that to speed the ports.

00:00:55.560 --> 00:00:59.750
We use it to ease maintenance
of the programs once ported.

00:00:59.900 --> 00:01:04.690
And what it really comes down to is that
it's part of making Mac OS X a really

00:01:04.690 --> 00:01:07.930
superior home for UNIX applications.

00:01:07.980 --> 00:01:12.400
One of the best ways to characterize
it is that things just work.

00:01:12.670 --> 00:01:15.580
I have a number of acquaintances,
including a number of the

00:01:15.870 --> 00:01:20.180
enthusiasts of that L system,
and they would go to some trouble to

00:01:20.180 --> 00:01:23.740
run PowerPC Linux on their tie books,
and they would run it for a while,

00:01:23.800 --> 00:01:25.610
depending on their level of dedication.

00:01:25.830 --> 00:01:29.830
But I've noticed that they tend to
drift back to running OS X on them.

00:01:29.960 --> 00:01:36.040
And basically what they've discovered,
what they report, is that they can get

00:01:36.040 --> 00:01:40.550
their DVD player to work,
the 3D graphics doesn't result

00:01:40.560 --> 00:01:45.220
in strange artifacts outside
the boundaries of the X windows,

00:01:45.340 --> 00:01:49.480
and other things that will
typically happen on a Linux system,

00:01:49.480 --> 00:01:52.680
even after this many years
of development for it.

00:01:52.810 --> 00:01:59.820
So that's really the appeal
of Mac OS X for a UNIX system.

00:01:59.820 --> 00:02:01.550
development.

00:02:01.820 --> 00:02:03.810
So specific things that we'll talk about.

00:02:03.950 --> 00:02:08.240
We'll talk about specifically
what tools are delivered.

00:02:08.400 --> 00:02:10.750
We'll talk about their unique features.

00:02:10.890 --> 00:02:13.960
We'll go into porting issues
for bringing over new programs.

00:02:13.960 --> 00:02:17.120
And then we'll go into how
to mix it up with Xcode.

00:02:17.120 --> 00:02:22.010
So you can have both a command-line
environment and an IDE environment

00:02:22.010 --> 00:02:24.610
and have them work well together.

00:02:26.950 --> 00:02:28.280
So Xcode.

00:02:28.300 --> 00:02:30.460
Xcode, Xcode, Xcode, Xcode.

00:02:30.500 --> 00:02:32.650
Yes, that's our big thing.

00:02:34.240 --> 00:02:39.370
But it includes command-line tools,
and since, as the audience said,

00:02:39.380 --> 00:02:42.500
they're primarily UNIX people,
that's what we're going to talk about.

00:02:43.900 --> 00:02:45.230
So what are their advantages?

00:02:45.240 --> 00:02:46.110
They're familiar.

00:02:46.350 --> 00:02:48.570
There's been 30 years
of productivity on UNIX.

00:02:48.910 --> 00:02:51.080
The original UNIX designers
were pretty smart guys.

00:02:51.080 --> 00:02:54.240
They understood about the
composability of tools.

00:02:54.240 --> 00:02:57.710
And I throw out a specific example,
and everybody snickers,

00:02:57.710 --> 00:03:02.020
but the UNIX guys knows that these kind
of things come up on a daily basis.

00:03:02.360 --> 00:03:05.060
And you take an example of,
you have two files.

00:03:05.060 --> 00:03:07.720
You have,
there's some references to a function

00:03:07.720 --> 00:03:09.580
that a bug report has mentioned.

00:03:09.580 --> 00:03:12.730
And you need to find the references,
but these are very large files,

00:03:12.730 --> 00:03:15.120
and just grepping for
throughout the entire files,

00:03:15.120 --> 00:03:16.520
there's too many of them.

00:03:16.560 --> 00:03:19.000
So you take a diff between
two versions of the file,

00:03:19.000 --> 00:03:21.910
and then you grep that for
these couple of function names.

00:03:21.980 --> 00:03:25.720
And this is something that
UNIX people do on a daily basis.

00:03:25.720 --> 00:03:29.240
It's almost a on-the-fly
scripting kind of process.

00:03:29.240 --> 00:03:31.080
And it's very powerful.

00:03:32.020 --> 00:03:35.640
The UNIX world also,
because of the time it's been around,

00:03:35.640 --> 00:03:40.700
has developed a large number of
tools that are already out there,

00:03:40.700 --> 00:03:41.880
already in use.

00:03:41.880 --> 00:03:46.260
So we want to be able to take advantage
of that very large body of tools.

00:03:51.440 --> 00:03:53.820
told me these things were difficult.

00:03:54.070 --> 00:03:56.900
So the Terminal program is
the basic way you get to it.

00:03:56.930 --> 00:03:59.380
And I'm not even going to ask.

00:03:59.380 --> 00:04:02.790
I'm sure everybody has used
the Terminal program here.

00:04:03.100 --> 00:04:05.590
So the,
but we have to show a screenshot for it,

00:04:05.640 --> 00:04:07.120
so I have to apologize for the graphics.

00:04:07.120 --> 00:04:11.130
The,
because you have to get to the terminal

00:04:11.130 --> 00:04:14.060
program by clicking somewhere or another.

00:04:16.000 --> 00:04:19.500
And so it's under Applications,
Utilities, down near the bottom.

00:04:19.500 --> 00:04:23.710
The true terminal aficionado, though,
puts his copy in the

00:04:23.720 --> 00:04:25.220
dock where it belongs.

00:04:29.770 --> 00:04:32.860
So the Terminal program,
it opens up multiple windows.

00:04:33.090 --> 00:04:35.320
Each window runs a separate shell.

00:04:35.370 --> 00:04:37.640
And you have quite a few
configurability options.

00:04:37.680 --> 00:04:40.550
You have a lot of the same
kind of options you would see

00:04:40.550 --> 00:04:42.140
in something like an Xterm.

00:04:42.140 --> 00:04:45.100
You can set the character codes.

00:04:45.140 --> 00:04:46.770
You can set the colors of the screens.

00:04:46.950 --> 00:04:48.340
You can do all that kind of stuff.

00:04:48.400 --> 00:04:51.870
You also have some options that you
won't necessarily see in an Xterm.

00:04:52.080 --> 00:04:53.980
For instance,
you can set the transparency

00:04:53.980 --> 00:04:55.950
of the terminal windows.

00:04:56.030 --> 00:04:59.180
And it's an interesting thing to
see how that comes out style-wise,

00:04:59.230 --> 00:05:02.520
because some people, for instance,
they find that very cluttered.

00:05:02.700 --> 00:05:05.780
And my personal terminal
windows tend to be opaque.

00:05:05.780 --> 00:05:07.800
Other people,
they like actually being able to see

00:05:07.800 --> 00:05:11.720
what's happening in the terminal windows
that are both in front and in back.

00:05:11.820 --> 00:05:15.970
And so they'll set all the
windows to about 50% transparency.

00:05:16.240 --> 00:05:18.350
And then you can see
everything that's going on.

00:05:18.430 --> 00:05:22.430
And then you just have the trick of
figuring out which of the characters

00:05:22.530 --> 00:05:27.680
streaming by are from the front window
and which ones are in the back window.

00:05:28.020 --> 00:05:31.300
So in Panther,
we also include a server menu,

00:05:31.530 --> 00:05:36.860
which basically gives you shortcuts
to the various SSHs and RSHs

00:05:36.860 --> 00:05:39.650
and so forth that you might want
to do to run to other machines.

00:05:39.650 --> 00:05:43.890
So that's going to be
a very handy feature.

00:05:46.950 --> 00:05:51.120
Okay, so let us recite the catechism.

00:05:51.200 --> 00:05:54.060
So we say emacs foo.c.

00:05:54.100 --> 00:05:54.860
We cat it.

00:05:55.150 --> 00:05:57.970
This is our code review process.

00:05:58.870 --> 00:06:02.140
Being truly studly programmers,
we don't bother with

00:06:02.450 --> 00:06:05.930
headers or declarations or
any of that kind of stuff.

00:06:05.930 --> 00:06:07.460
We compile it with CC.

00:06:07.470 --> 00:06:10.080
We add a dash G because we like to debug.

00:06:10.080 --> 00:06:11.070
And we run it.

00:06:11.070 --> 00:06:13.960
We run .slash so that we
pick up our A dot out,

00:06:14.060 --> 00:06:17.180
not somebody else's, like the virus.

00:06:17.180 --> 00:06:18.520
And it prints out hello.

00:06:18.520 --> 00:06:20.150
But we like the debugger a lot.

00:06:20.160 --> 00:06:23.170
And so we're going to run
the debugger on this anyway.

00:06:24.030 --> 00:06:27.780
And so we fire up the
debugger with fire up GDB.

00:06:27.780 --> 00:06:29.070
We say break main.

00:06:29.070 --> 00:06:29.830
We run it.

00:06:29.830 --> 00:06:30.950
And we can step.

00:06:31.050 --> 00:06:32.960
And it still prints hello
and all that kind of stuff.

00:06:32.990 --> 00:06:35.290
So we're actually done.

00:06:35.320 --> 00:06:38.030
I mean, this is everything you need
to know for programming.

00:06:42.680 --> 00:06:43.360
Nobody's getting up.

00:06:43.470 --> 00:06:45.040
Okay.

00:06:45.180 --> 00:06:45.470
Hear that?

00:06:45.470 --> 00:06:46.440
Everybody's falling asleep.

00:06:46.520 --> 00:06:49.740
I see a couple heads
falling backwards already.

00:06:49.820 --> 00:06:52.960
I appreciate everybody coming
out this early in the morning.

00:06:52.960 --> 00:06:56.290
I understand that it's a real sacrifice.

00:06:56.930 --> 00:07:00.840
Okay, for shells,
we do offer a variety of shells.

00:07:00.930 --> 00:07:03.390
People use different shells because
they have different scripting language,

00:07:03.400 --> 00:07:04.980
different usage characteristics.

00:07:04.980 --> 00:07:09.840
So for normal interactive usage,
we have TCSH, Improved C-Shell.

00:07:09.840 --> 00:07:12.960
It has history and
other good stuff in it.

00:07:13.050 --> 00:07:18.090
And we have also the ZSH,
mostly because Jordan Hubbard likes it,

00:07:18.090 --> 00:07:19.080
I'm told.

00:07:19.560 --> 00:07:23.570
And then we have the Bash,
which is the GNU project's

00:07:23.570 --> 00:07:27.290
reimplementation of the Born shell,
Bash being short for

00:07:27.290 --> 00:07:28.860
the Born-Again shell.

00:07:28.860 --> 00:07:35.460
So Bash also has the advantage that
it's a fairly fast version of bin SH.

00:07:35.460 --> 00:07:42.220
Now for editors, we offer Emacs,
the one true editor.

00:07:42.220 --> 00:07:43.510
And then we have the Emacs,
the one true editor.

00:07:48.710 --> 00:07:50.660
Emacs is highly customizable.

00:07:50.930 --> 00:07:52.760
It has its own programming language.

00:07:52.760 --> 00:07:57.070
It's probably the most
widespread use of Lisp,

00:07:57.570 --> 00:07:59.030
perhaps even surpassing AutoCAD.

00:07:59.040 --> 00:08:03.100
And it's used for quite a
lot of different things.

00:08:03.100 --> 00:08:07.740
People have built newsreaders and
actually built IDs with Emacs.

00:08:07.740 --> 00:08:10.420
Quite a few different kinds
of uses for the customization.

00:08:10.420 --> 00:08:13.870
The Jaguar standard version is 21.1.

00:08:13.870 --> 00:08:18.340
The Panther standard version
we expect to be 21.2.

00:08:18.600 --> 00:08:21.760
You can also get X11 and Carbon versions.

00:08:21.810 --> 00:08:26.840
The one that's built in a system
is kind of a basic TTY-type Emacs,

00:08:26.840 --> 00:08:30.350
but we do have X11 and
Carbon versions available as well.

00:08:30.360 --> 00:08:35.380
Now, because we value diversity,
we also offer VI.

00:08:40.200 --> 00:08:41.780
This is bad.

00:08:41.780 --> 00:08:42.820
I got a tough audience here.

00:08:42.820 --> 00:08:43.760
Okay.

00:08:43.760 --> 00:08:46.390
Well, I have a good story for VI then.

00:08:46.440 --> 00:08:51.560
And well, VI actually last regularly used
VI just about 20 years ago.

00:08:51.940 --> 00:08:53.320
And I used it for about a year or so.

00:08:53.320 --> 00:08:58.280
And this is back in the days of BSD 4.1.

00:08:58.670 --> 00:09:02.780
Does anybody remember BSD 4.1?

00:09:02.790 --> 00:09:02.790
Yeah, okay.

00:09:03.600 --> 00:09:04.680
It's very few clappings.

00:09:04.680 --> 00:09:07.540
Okay, well.

00:09:07.540 --> 00:09:08.920
It was a long time ago.

00:09:09.080 --> 00:09:14.640
Anyway, so I used VI for about a year and
really never used it much after that.

00:09:14.640 --> 00:09:16.880
I went into a university environment,
everybody used Emacs,

00:09:16.880 --> 00:09:20.480
and I kind of went along with the
crowd and made the transition.

00:09:20.480 --> 00:09:25.170
But when I came back to Apple and
VI would show up from time to time,

00:09:25.170 --> 00:09:27.900
like when you're checking into CVS.

00:09:27.900 --> 00:09:32.710
And after not using it for 20 years,
I still remembered the commands.

00:09:33.350 --> 00:09:35.060
I didn't know where they came from.

00:09:35.060 --> 00:09:36.740
I just typed the commands right away.

00:09:36.980 --> 00:09:39.730
So that's really a point in its favor.

00:09:39.740 --> 00:09:41.840
I'm not sure anybody would
remember all the Emacs commands

00:09:41.840 --> 00:09:42.800
after that length of time.

00:09:44.680 --> 00:09:48.720
Now in Panther, we've upgraded to Vim,
short for improved VI.

00:09:48.720 --> 00:09:51.990
It has more customization
and configuration.

00:09:52.110 --> 00:09:54.970
And some people actually
think it's too big,

00:09:54.970 --> 00:09:56.110
but that's OK.

00:09:56.320 --> 00:09:58.190
Now we also have a
number of other editors.

00:09:58.200 --> 00:10:03.860
We have Pico, we have Sed, we have Ed,
and then for the real, real programmers,

00:10:03.910 --> 00:10:05.990
we have Cat.

00:10:07.320 --> 00:10:11.040
Now, how many people have actually
written programs using just CAT?

00:10:11.150 --> 00:10:13.320
Uh-huh, yep.

00:10:13.470 --> 00:10:18.240
How many people have written a
thousand-line program using CAT?

00:10:18.390 --> 00:10:21.200
Yeah, nobody's raising their hands now.

00:10:22.540 --> 00:10:26.310
So for language options, we provide C,
of course.

00:10:26.370 --> 00:10:29.680
We provide both C90 and C99.

00:10:29.780 --> 00:10:31.500
Some people call it C89,
but that's wrong.

00:10:31.500 --> 00:10:33.060
It's actually C90.

00:10:33.120 --> 00:10:34.460
We do have C99.

00:10:34.460 --> 00:10:37.490
In Panther, we actually provide the
library that goes with it,

00:10:37.490 --> 00:10:41.820
so you now have something
resembling a complete C99 solution.

00:10:42.220 --> 00:10:45.370
We have C++,
we have Objective-C of course,

00:10:45.370 --> 00:10:48.900
and we have Objective-C++,
which is essentially a combination.

00:10:48.900 --> 00:10:52.260
It's C++ extended with
Objective-C features.

00:10:52.260 --> 00:10:57.060
We offer both 1.3 and
1.4 versions of Java.

00:10:57.060 --> 00:10:59.780
We also have an assortment
of scripting languages.

00:10:59.780 --> 00:11:02.570
You get Perl, Tcl, PHP, Python, and Ruby.

00:11:02.580 --> 00:11:06.980
And so we also have third parties.

00:11:06.980 --> 00:11:11.120
We have things like MetroWorks, Absoft,
NAG, and so forth.

00:11:11.300 --> 00:11:13.420
You can also download
additional languages,

00:11:13.430 --> 00:11:17.180
for instance, G77 for Fortran,
Gnat for Ada.

00:11:17.310 --> 00:11:19.780
We got the Gnat guys here this time.

00:11:20.580 --> 00:11:21.150
There he is.

00:11:21.170 --> 00:11:21.620
OK, yes.

00:11:21.720 --> 00:11:28.270
We have these nutcases that have
actually gotten Ada running on Mac OS X.

00:11:28.280 --> 00:11:30.760
It really works,
and there's actually people

00:11:30.840 --> 00:11:32.400
doing useful work with it.

00:11:32.720 --> 00:11:35.590
We offer Lisp, or sorry,
you can download Lisp and quite

00:11:35.610 --> 00:11:36.970
a variety of other languages.

00:11:41.590 --> 00:11:45.740
So for build tools,
there's basically three major options.

00:11:45.780 --> 00:11:47.050
GNU make is the standard.

00:11:47.270 --> 00:11:51.520
And it's just the standard,
the usual GNU make.

00:11:51.520 --> 00:11:53.670
When you say make,
that's the one you get.

00:11:53.890 --> 00:11:56.400
For people that need
compatibility with BSD make,

00:11:56.410 --> 00:12:00.390
and you know who you are,
we have BSD make.

00:12:00.450 --> 00:12:03.280
We don't recommend it, however,
for anything beyond what's required

00:12:03.280 --> 00:12:04.600
strictly for compatibility.

00:12:04.600 --> 00:12:08.600
Its features are somewhat different
from what most people are used to.

00:12:08.620 --> 00:12:12.870
And then finally, we have PB build,
which is used by Xcode projects.

00:12:13.130 --> 00:12:16.700
And it's essentially the
command-line interface to Xcode.

00:12:17.160 --> 00:12:19.300
This is actually very useful
in a mixed environment,

00:12:19.310 --> 00:12:22.500
because you can have somebody
that works in the Xcode IDE,

00:12:22.500 --> 00:12:25.540
build up their project, add files,
and so forth.

00:12:25.570 --> 00:12:28.880
And then if you, say,
are SSH-ing in from somewhere else,

00:12:28.900 --> 00:12:33.140
you can type PB build and
build the same project.

00:12:36.380 --> 00:12:40.180
We, of course, have the usual collection
of standard UNIX tools.

00:12:40.270 --> 00:12:44.390
The collection is most similar
to what you'll find in FreeBSD.

00:12:44.580 --> 00:12:49.820
We have the CVS, RCS, SCCS,
the trough and all of its little friends,

00:12:49.820 --> 00:12:52.530
the compiler generators,
Bison and its friends,

00:12:52.530 --> 00:12:58.210
the various object tool working programs
and programming tools in general.

00:12:58.380 --> 00:13:03.750
The total comes out to about 400 or
so scattered across bin and user bin.

00:13:03.810 --> 00:13:07.420
Now, if that's not enough,
we also have the Ports Manager.

00:13:07.780 --> 00:13:12.760
And the Ports Manager basically allows
you to add to the collection dynamically,

00:13:12.870 --> 00:13:14.040
not unlike software update.

00:13:14.060 --> 00:13:17.280
So the mechanism that we're
currently using in Panther,

00:13:17.280 --> 00:13:20.420
or going to be using in Panther,
is called Darwin Ports.

00:13:20.420 --> 00:13:25.200
And similar to the Fink and
the FreeBSD Ports packages.

00:13:25.200 --> 00:13:28.360
In fact, just a couple days ago,
we had a meeting with a

00:13:28.360 --> 00:13:28.360
company called Darwin Ports,
and they were talking about

00:13:28.360 --> 00:13:28.360
how they could use the Fink
and the FreeBSD Ports packages.

00:13:28.360 --> 00:13:32.960
And so the Fink and Darwin Ports guys
have actually started talking about a

00:13:32.960 --> 00:13:35.690
way to integrate their two activities.

00:13:36.160 --> 00:13:39.840
About 400 ports have been
done in Darwin Ports to date,

00:13:40.020 --> 00:13:43.600
and it offers both command-line
and GUI interfaces.

00:13:43.720 --> 00:13:47.620
So the command-line interface is port,
and there's various commands, fetch,

00:13:47.620 --> 00:13:48.630
extract, etc.

00:13:48.850 --> 00:13:53.400
What it does, it downloads the sources,
builds it, and installs it.

00:13:53.660 --> 00:13:57.150
So to actually get a look at
how this works in practice,

00:13:57.150 --> 00:14:00.440
we have Sean Faegan,
who's going to give a demo.

00:14:06.300 --> 00:14:11.300
Hello, my name is Sean Faegan, and I do,
as I tell people, I do UNIX-y stuff.

00:14:11.300 --> 00:14:15.090
All right,
first I was just going to show you... Ah,

00:14:15.300 --> 00:14:17.300
wrong one.

00:14:17.680 --> 00:14:19.080
Thank you.

00:14:19.130 --> 00:14:21.020
I was going to show you the
Ports Manager application,

00:14:21.050 --> 00:14:21.940
which is the GUI.

00:14:21.940 --> 00:14:24.620
And there it is.

00:14:24.620 --> 00:14:27.100
As you can see,
I used the command-line to launch

00:14:27.100 --> 00:14:29.340
GUIs because I prefer the command-line.

00:14:30.620 --> 00:14:36.240
The Ports Manager application is in
Applications Utilities on Panther.

00:14:36.240 --> 00:14:41.060
And the first time you run it,
it'll tell you it hasn't been installed.

00:14:41.060 --> 00:14:42.700
You want to install it.

00:14:42.760 --> 00:14:44.020
You, of course, say yes.

00:14:44.020 --> 00:14:46.660
It'll ask you for the admin password.

00:14:46.660 --> 00:14:49.870
And it'll download, build stuff,
configure it.

00:14:49.940 --> 00:14:51.420
And then you end up with this.

00:14:51.420 --> 00:14:54.240
And here are all of the utilities,
all the categories.

00:14:54.240 --> 00:14:57.160
And as you can see,
there are quite a few.

00:14:57.160 --> 00:14:58.260
Wow, there are.

00:14:58.770 --> 00:15:00.600
But I'm going to show you how to
use the Ports Manager application.

00:15:00.600 --> 00:15:02.560
Again, I like the terminal.

00:15:02.560 --> 00:15:05.900
So I was going to show you a
simple utility for all those

00:15:05.900 --> 00:15:08.260
people who need to speak Swedish.

00:15:10.200 --> 00:15:13.970
Okay, I've already fetched it
because the thousands of

00:15:14.020 --> 00:15:16.650
people using the network here,
it gets kind of bogged down.

00:15:16.660 --> 00:15:19.570
So the next part is just to build it.

00:15:20.690 --> 00:15:22.180
Wow, that was easy.

00:15:22.230 --> 00:15:23.250
It was a fast machine.

00:15:23.430 --> 00:15:25.600
Next part is to install it.

00:15:25.600 --> 00:15:33.460
Also installed, rehash,
because this is CSH.

00:15:36.890 --> 00:15:41.110
And there's the message
of the day in Swedish.

00:15:41.180 --> 00:15:42.620
Wow, that was easy.

00:15:42.620 --> 00:15:48.310
The other thing I like about
Darwin Ports is you can do this.

00:15:52.900 --> 00:15:56.160
It has, by doing the package command,
it has created an installable bundle.

00:15:56.160 --> 00:15:58.400
If I double-click it,
it'll run the standard

00:15:58.400 --> 00:15:59.600
installation program.

00:15:59.600 --> 00:16:01.800
But it's already installed,
so I won't do that now.

00:16:04.530 --> 00:16:09.320
The other thing I wanted to show you
was one of the most useful aspects of

00:16:09.320 --> 00:16:13.250
the Darwin's port system is actually
that you can use it not only to

00:16:13.250 --> 00:16:17.480
install tools and utilities and
libraries and whatnot that you need,

00:16:17.480 --> 00:16:22.740
but you can also use it as a basis to
figure out what to do for your own ports.

00:16:22.740 --> 00:16:29.330
And I had a couple of ports here.

00:16:29.330 --> 00:16:31.980
Let's see.

00:16:35.250 --> 00:16:36.540
Okay.

00:16:36.550 --> 00:16:37.000
Thank you.

00:16:37.000 --> 00:16:38.100
Huh.

00:16:38.100 --> 00:16:39.660
Come on.

00:16:39.700 --> 00:16:41.600
Display.

00:16:41.600 --> 00:16:43.030
Yes.

00:16:43.080 --> 00:16:47.500
How about Zap D-Vex?

00:16:47.560 --> 00:16:49.020
How's that?

00:16:50.110 --> 00:16:50.510
Yeah, yeah, yeah.

00:16:50.620 --> 00:16:51.700
How's that?

00:16:51.820 --> 00:16:53.800
Better?

00:16:53.950 --> 00:16:54.800
Bigger.

00:16:54.800 --> 00:17:01.070
64.

00:17:07.700 --> 00:17:08.300
Wow.

00:17:08.300 --> 00:17:09.800
OK.

00:17:09.800 --> 00:17:11.800
All right.

00:17:11.800 --> 00:17:12.920
It's actually very scary.

00:17:12.920 --> 00:17:17.420
So this is a port called OpenPSP.

00:17:17.650 --> 00:17:21.400
The port file, the file called port file,
has everything about it

00:17:21.400 --> 00:17:23.220
in their description.

00:17:23.220 --> 00:17:26.700
And the part I wanted to show you
was the stuff mark host configure.

00:17:26.700 --> 00:17:29.780
And that is a series of
commands that are run after the

00:17:29.780 --> 00:17:31.820
configure stage in the process.

00:17:31.820 --> 00:17:35.420
And as you can see, this is an example.

00:17:35.420 --> 00:17:39.390
Someone had sharp pragma
implementation in their source and

00:17:39.390 --> 00:17:41.710
you don't really want to have it.

00:17:41.710 --> 00:17:45.010
So that's an example of
something you might need to do.

00:17:45.010 --> 00:17:46.080
It's very long.

00:17:46.980 --> 00:17:49.910
The other example was...

00:17:51.020 --> 00:17:54.260
Let's see, I think this is eight.

00:17:54.260 --> 00:17:58.140
The other thing,
in case it wasn't obvious from that,

00:17:58.140 --> 00:18:02.280
the Darwin ports, by default,
install things in user D ports.

00:18:02.310 --> 00:18:05.920
And then for those of you who are
familiar with the FreeBSD ports system,

00:18:05.940 --> 00:18:10.050
the structure will be very familiar,
except that it uses a port

00:18:10.130 --> 00:18:12.400
file instead of a make file.

00:18:14.610 --> 00:18:19.600
and here, all those configure args.

00:18:19.600 --> 00:18:27.020
I've actually run into a couple
places where I needed to use the

00:18:27.090 --> 00:18:33.120
XPM library and I found that it was
easiest to just grep through the port

00:18:33.120 --> 00:18:37.680
files in the Darwin ports to figure
out the configure args I needed.

00:18:37.820 --> 00:18:40.960
And I wanted to show you one last thing.

00:18:41.500 --> 00:18:43.420
Editors.

00:18:43.460 --> 00:18:44.340
Okay.

00:18:44.340 --> 00:18:48.840
One thing that the port mechanism
has that the FreeBSD ports

00:18:49.030 --> 00:18:52.600
mechanism doesn't have is variants.

00:18:52.640 --> 00:18:54.940
And they're marked by
this variant command,

00:18:54.940 --> 00:19:00.890
as you can see in the
middle of the screen there.

00:19:00.890 --> 00:19:00.890
This one

00:19:01.810 --> 00:19:05.230
is how you would build the
carbonized version of Emacs.

00:19:05.330 --> 00:19:09.160
And I had one thought about
building it and running it

00:19:09.180 --> 00:19:14.080
off of my little USB keyfrog,
which you can do,

00:19:14.080 --> 00:19:16.200
because it will actually build a bundle.

00:19:16.320 --> 00:19:18.620
But my little keyfrog
is only 128 megabytes,

00:19:18.650 --> 00:19:20.960
and Emacs won't fit on it.

00:19:22.780 --> 00:19:23.720
There you go.

00:19:23.720 --> 00:19:25.860
Well, thanks, Sean.

00:19:25.860 --> 00:19:26.220
Oh, yeah.

00:19:26.220 --> 00:19:27.040
One last thing.

00:19:27.040 --> 00:19:31.140
There will be more discussion about
Darwin ports at the open source session,

00:19:31.140 --> 00:19:33.640
which is session 102 at 1030.

00:19:41.700 --> 00:19:42.300
Thanks, Sean.

00:19:42.300 --> 00:19:46.390
And I hope that some of you
will actually volunteer to add

00:19:46.390 --> 00:19:48.240
more stuff to the Darwin ports.

00:19:53.360 --> 00:19:56.980
We have the next-- OK.

00:19:57.100 --> 00:20:01.470
So I'm going to shift gears
a moment and talk about APIs.

00:20:01.820 --> 00:20:07.340
The fundamental API we
have for OS X is POSIX.

00:20:07.680 --> 00:20:12.230
POSIX is-- we don't have a total,
complete, every last detail passes

00:20:12.240 --> 00:20:13.690
the conformance test POSIX.

00:20:13.760 --> 00:20:17.080
What we do have is essentially
as much POSIX as just about

00:20:17.080 --> 00:20:18.810
everybody cares about.

00:20:18.910 --> 00:20:21.640
So if you find anything
that's not conformant,

00:20:21.730 --> 00:20:24.210
and we want to hear about that
because that means there's at

00:20:24.210 --> 00:20:27.790
least one person that cares
about that little bit of POSIX.

00:20:28.320 --> 00:20:31.690
We also have OpenGL and
GLUT for interface.

00:20:31.860 --> 00:20:36.310
We have Carbon and Cocoa for GUIs,
which there's a number of sessions

00:20:36.570 --> 00:20:38.420
going into the details of those APIs.

00:20:38.420 --> 00:20:42.780
For doing drivers and kernel extensions,
we have something called I/O Kit.

00:20:42.840 --> 00:20:45.890
Unfortunately, if this is new to you,
you're out of luck because the

00:20:45.890 --> 00:20:47.440
I/O Kit session was yesterday.

00:20:47.440 --> 00:20:52.130
But you can certainly find out about it
in online documentation and so forth.

00:20:52.140 --> 00:20:58.130
And I/O Kit is interesting because it's
a C++ framework that allows you to write

00:20:58.230 --> 00:21:02.730
drivers without actually recreating
everything that is required for a driver.

00:21:02.740 --> 00:21:03.900
It uses inheritance.

00:21:03.900 --> 00:21:08.070
And if you've ever tried to write
a Linux device driver or just read

00:21:08.070 --> 00:21:11.680
the book on Linux device drivers,
you can appreciate how much

00:21:11.680 --> 00:21:12.980
of an advantage that is.

00:21:14.590 --> 00:21:19.500
We, uh, Panther X11 is integrated
with the system.

00:21:19.620 --> 00:21:23.390
So, yeah.

00:21:24.320 --> 00:21:28.070
It is one of the big demanded
features from Jaguar,

00:21:28.100 --> 00:21:30.860
so that's good to have.

00:21:30.860 --> 00:21:34.990
We also provide IPv6
via the CF network API,

00:21:35.300 --> 00:21:39.050
and this is such an important API that it
actually has its own session on Friday.

00:21:39.050 --> 00:21:42.850
So if you're interested in that,
go for the session.

00:21:44.480 --> 00:21:47.900
For some more details about specific
API things that are new in Panther,

00:21:47.900 --> 00:21:51.310
we have pull, we have dlopen,

00:21:51.540 --> 00:21:53.420
Oh, come on.

00:21:53.420 --> 00:21:56.070
This is another one of the most
requested features from Jaguar.

00:21:56.140 --> 00:21:57.990
Yes, deal open and it's friends.

00:21:58.190 --> 00:22:03.360
We also have a number of new libraries,
libxml, we have the wide care library

00:22:03.360 --> 00:22:05.420
for C99 that I referred to.

00:22:05.480 --> 00:22:07.860
We have a couple of libraries
for internationalization as well.

00:22:07.860 --> 00:22:15.170
Again, in general,
the API will resemble what

00:22:15.170 --> 00:22:15.170
you see in FreeBSD 5.0.

00:22:17.200 --> 00:22:19.680
I have to talk a little bit
about frameworks because that's

00:22:19.680 --> 00:22:22.190
something that is unique to OS X.

00:22:22.300 --> 00:22:25.910
And a framework is
essentially a shared library.

00:22:25.910 --> 00:22:31.470
We'll often use the term "dilib"
to refer to the single file that

00:22:31.470 --> 00:22:33.400
is the shared library proper.

00:22:33.540 --> 00:22:36.310
But the way a framework is
structured is that it packages up

00:22:36.790 --> 00:22:41.960
the dilib and the resources and the
headers all into a single place.

00:22:42.200 --> 00:22:46.230
And this is basically a little
bit more sophisticated design

00:22:46.230 --> 00:22:50.880
than you'll see in something
like a standard UNIX-type system,

00:22:51.150 --> 00:22:55.310
where the resources are who knows where
and the headers are mooshed into use

00:22:55.310 --> 00:22:57.200
or include along with everything else.

00:22:57.200 --> 00:23:00.770
So the framework packages it all up,
gives it a place, as you can see down at

00:23:00.770 --> 00:23:04.110
the bottom of the example,
where you can essentially have

00:23:04.110 --> 00:23:09.200
separate files for each language that
you wish to translate the strings

00:23:09.200 --> 00:23:11.980
that are used in that framework.

00:23:14.440 --> 00:23:17.980
Now, to use the frameworks,
you just say include foo/foo.h

00:23:18.060 --> 00:23:20.310
for a framework named Foo.

00:23:20.740 --> 00:23:24.190
To link it, you add a dash framework and
then the name of the framework.

00:23:24.190 --> 00:23:30.130
Most of the supplied frameworks you'll
find in /systems/library/frameworks.

00:23:30.130 --> 00:23:32.950
And if you look in there, there's 40, 50,
60.

00:23:33.040 --> 00:23:34.360
There's actually quite a few.

00:23:34.420 --> 00:23:36.220
QuickTime is a framework.

00:23:36.250 --> 00:23:39.990
The whole of Carbon is a
single framework and so forth.

00:23:40.300 --> 00:23:42.000
Now,
if you want to add your own frameworks,

00:23:42.000 --> 00:23:45.450
you can drop them into
System Library Frameworks,

00:23:45.450 --> 00:23:48.840
or you can put them in your
own place and then direct the

00:23:48.960 --> 00:23:51.040
compiler to find them using -F.

00:23:51.160 --> 00:23:54.000
And this is, again,
an option that is unique to

00:23:54.000 --> 00:23:56.360
Apple's version of the compiler.

00:23:56.540 --> 00:24:03.680
And it works a lot like -I for adding
a place for finding include files.

00:24:04.300 --> 00:24:08.870
Now, the traditional UNIX-y type
headers still live in user include.

00:24:08.980 --> 00:24:11.660
So you'll see that sometimes
it's a little bit of a confusing

00:24:11.660 --> 00:24:14.460
situation because we'll talk
about a system framework.

00:24:14.480 --> 00:24:18.340
And system framework is essentially
our term for what would be

00:24:18.340 --> 00:24:20.180
called libc in Linux land.

00:24:20.180 --> 00:24:24.190
But the headers are still kept in user
include because if they were actually

00:24:24.190 --> 00:24:27.190
under system library frameworks,
no one would ever be able to find them.

00:24:31.010 --> 00:24:35.660
So the most important thing to know about
the compiler is the compiler is gcc.

00:24:35.710 --> 00:24:37.560
I think everybody knows that by now.

00:24:37.560 --> 00:24:39.550
A couple of years ago,
this was a little bit

00:24:39.570 --> 00:24:41.210
more of a less well-known.

00:24:41.360 --> 00:24:44.780
So all the usual gcc options work.

00:24:45.320 --> 00:24:47.950
Now, we also have a number of
additional compiler options,

00:24:47.950 --> 00:24:51.100
and there's actually a whole session
that goes into detail on this.

00:24:51.190 --> 00:24:54.190
There's a couple that are especially
interesting for UNIX porting.

00:24:54.370 --> 00:24:57.820
One of them is -f-altevec,
which enables Altevec types

00:24:57.820 --> 00:24:59.500
and built-in functions.

00:24:59.650 --> 00:25:03.740
It is more powerful and slightly
different in behavior than the

00:25:03.740 --> 00:25:06.730
-m-altevec that is an FSF gcc.

00:25:06.880 --> 00:25:11.370
The details are more complicated
that I can get into here.

00:25:11.570 --> 00:25:14.760
Find me afterwards if you want
to talk about it in depth.

00:25:15.180 --> 00:25:20.060
We also have an option that's
called -mdynamicnopic that's

00:25:20.060 --> 00:25:22.740
recommended for applications.

00:25:22.740 --> 00:25:26.980
The normal mode of code generation for
gcc is to generate relocatable code.

00:25:27.420 --> 00:25:30.850
That is, by default,
everything you build can go into

00:25:30.850 --> 00:25:34.300
a shared library that can be
relocated around the memory space.

00:25:34.300 --> 00:25:38.300
But the code for this is not
quite as efficient as it could be,

00:25:38.300 --> 00:25:41.700
and so for an application which
is not going to be relocated,

00:25:41.700 --> 00:25:45.700
you can say -mdynamicnopic,
get a little bit more efficient code,

00:25:45.700 --> 00:25:50.610
but at the same time still
get to relocatable dilibs.

00:25:52.580 --> 00:25:56.270
Now to build libraries,
you have the traditional

00:25:56.270 --> 00:26:00.310
mechanism to build a libfoo.a,
you use ar to build the library,

00:26:00.410 --> 00:26:03.100
you use ranlib to build
the table of contents.

00:26:03.100 --> 00:26:04.760
This is a little bit different than ELF.

00:26:04.860 --> 00:26:06.940
In ELF,
you don't need to run the ranlib step,

00:26:06.940 --> 00:26:10.580
and so sometimes programs that
you're porting over won't actually

00:26:10.580 --> 00:26:14.190
arrange for the ranlib step,
and you have to add that yourself.

00:26:14.580 --> 00:26:18.630
To build the dynamic library,
use cc-dynamiclib.

00:26:19.010 --> 00:26:20.690
Now, most of the time,
you won't actually need to

00:26:20.690 --> 00:26:24.350
supply that argument yourself,
because if you use lib tool,

00:26:24.370 --> 00:26:28.160
lib tool already knows about all this,
and the versions of lib tool

00:26:28.160 --> 00:26:32.120
that are out in the world already
have the necessary OS X support.

00:26:32.140 --> 00:26:36.840
It's possible that you'll run into an
older program that has an older copy

00:26:36.840 --> 00:26:39.750
of lib tool that's been sucked into it.

00:26:39.820 --> 00:26:42.740
In those cases, you'll need to update the
lib tool in the package.

00:26:46.570 --> 00:26:51.520
So to keep track of versions,
there's really two layers of the system.

00:26:51.550 --> 00:26:57.000
The lower layer system, we call Darwin,
consists of the open source code.

00:26:57.000 --> 00:26:58.020
There's no framework.

00:26:58.020 --> 00:27:00.740
The framework support is there,
but there's no frameworks that are

00:27:00.740 --> 00:27:02.640
normally shipped with as part of Darwin.

00:27:02.640 --> 00:27:06.840
There's also no GUI, so Darwin is a real
bare-bones UNIX system.

00:27:08.580 --> 00:27:13.130
The tool software version, swvers,
reports the OS X version,

00:27:13.160 --> 00:27:16.490
and that's going to be a 10.2.6
or 10.3 or what have you.

00:27:16.500 --> 00:27:21.340
The uname-a, another UNIX command,
reports the Darwin version,

00:27:21.340 --> 00:27:23.850
which looks a little bit different.

00:27:23.940 --> 00:27:28.910
And it's changed somewhat since 10.0,
and so I provide here a handy little

00:27:28.910 --> 00:27:31.420
chart of exactly what happened to it.

00:27:31.420 --> 00:27:35.520
So the main thing to keep
in mind is that a 10.x,

00:27:35.520 --> 00:27:37.920
you add 4 and you get the Darwin.

00:27:38.580 --> 00:27:41.470
the major Darwin version number.

00:27:45.900 --> 00:27:58.100
[Transcript missing]

00:28:01.570 --> 00:28:08.490
Okay, yeah,
so the most unusual thing about

00:28:08.590 --> 00:28:12.480
this is that the Darwin numbering
scheme changed partway through 10.1.

00:28:12.480 --> 00:28:16.830
So I see that 10.10 is 1.4,
and then we change it to be a

00:28:16.830 --> 00:28:18.720
more consistent numbering scheme.

00:28:18.720 --> 00:28:21.770
And, well,
I won't explain why it's more consistent,

00:28:21.770 --> 00:28:22.560
it just is.

00:28:26.040 --> 00:28:31.740
and David It corresponds, if you see,
if you look in the About box in OS X,

00:28:31.740 --> 00:28:36.120
you'll see down the bottom
it says a number like 7A179.

00:28:36.120 --> 00:28:39.260
And the 7 is actually where the
Darwin version number comes from.

00:28:39.310 --> 00:28:41.650
So it ties into parts of
Apple's internal process.

00:28:46.590 --> 00:28:49.050
Now, most of the time,
programs these days-- or

00:28:49.050 --> 00:28:52.610
I should say most of the time,
but a large number of programs these

00:28:52.610 --> 00:28:54.440
days use GNU Configure and Make.

00:28:54.640 --> 00:28:59.260
And those programs will
almost always just work.

00:28:59.260 --> 00:29:02.600
Once in a while-- this actually was more
true last year than it was this year--

00:29:02.810 --> 00:29:07.760
the config.guess and config.subscripts,
which essentially tell you

00:29:07.760 --> 00:29:12.100
what kind of machine you're on,
they needed to be updated.

00:29:12.100 --> 00:29:15.870
That's much less commonly true nowadays.

00:29:16.170 --> 00:29:20.110
Now, we do recommend that if you
have to have some kind of test

00:29:20.210 --> 00:29:23.370
for system-specific features,
that don't try to rely

00:29:23.380 --> 00:29:25.140
on the predefined macros.

00:29:25.140 --> 00:29:26.160
We have those.

00:29:26.160 --> 00:29:28.200
There's a double underscore Apple.

00:29:28.200 --> 00:29:32.260
There is a double underscore
Apple CC for compiler version.

00:29:32.260 --> 00:29:34.260
There's a double underscore
Mach and so forth.

00:29:34.280 --> 00:29:37.180
In practice,
it's hard to come up with exactly the

00:29:37.200 --> 00:29:41.560
right combination of those that refers
to a specific version of Mac OS X.

00:29:42.450 --> 00:29:44.870
So, in general,
we want you to look at features,

00:29:44.910 --> 00:29:46.410
test for features instead.

00:29:46.420 --> 00:29:50.360
And if you want to actually set
up a whole bunch of code that's

00:29:50.420 --> 00:29:57.080
ifdef for OS X specifically,
define your own preprocessor flag,

00:29:57.080 --> 00:30:01.860
Mac OS X, and set that up with a
dash D in the make file.

00:30:01.860 --> 00:30:04.920
And so, a configure script adds
the dash D Mac OS X,

00:30:04.920 --> 00:30:07.460
and then your code tests ifdef Mac OS X.

00:30:07.460 --> 00:30:10.740
That basically gives you more control.

00:30:11.400 --> 00:30:14.400
And it also means you're not as
subject to minor changes that

00:30:14.400 --> 00:30:17.720
might happen from one compiler
or one OS revision to the next.

00:30:21.850 --> 00:30:25.370
Now, porting an interface,
despite the command-line focus,

00:30:25.370 --> 00:30:28.300
we know that there's quite a
few little GUIs of one sort

00:30:28.340 --> 00:30:30.020
or another on UNIX tools.

00:30:30.020 --> 00:30:31.850
Curses just works.

00:30:31.930 --> 00:30:33.360
We use the nCurses library.

00:30:33.360 --> 00:30:34.340
It's very standard.

00:30:34.340 --> 00:30:36.880
If you link against that,
unlikely you'll run

00:30:36.960 --> 00:30:38.440
into any difficulties.

00:30:38.440 --> 00:30:45.560
We have versions of TickleTK and
QtMac that are adapted for Aqua.

00:30:45.560 --> 00:30:48.960
And you, in fact,
saw a demo of QtMac yesterday

00:30:48.960 --> 00:30:51.530
with the spinning gears and all.

00:30:52.970 --> 00:30:54.500
X11 just works.

00:30:54.840 --> 00:30:57.830
X11 applications will actually
auto-launch the server,

00:30:57.830 --> 00:31:00.200
so users may not even be
aware that they are running

00:31:00.200 --> 00:31:01.860
an X server behind the scenes.

00:31:01.860 --> 00:31:07.380
OpenGL and GLUT are standard libraries.

00:31:07.380 --> 00:31:11.980
You will have to translate
any includes of GL.h.

00:31:11.980 --> 00:31:17.900
OpenGL and GLUT are standard libraries.

00:31:17.900 --> 00:31:25.210
You will have to translate
any includes of GL.h.

00:31:27.820 --> 00:31:32.820
So just briefly to go over some of the
common problems that people run into.

00:31:32.980 --> 00:31:35.300
The first is the CPP precomp.

00:31:35.460 --> 00:31:39.020
Now, CPP precomp has gone from 3.3,
so this is as much

00:31:39.060 --> 00:31:40.400
historical as anything else.

00:31:40.400 --> 00:31:46.090
The 3.1 compiler would use CPP precomp,
which is very useful

00:31:46.180 --> 00:31:50.270
for things like Cocoa,
but UNIX ports generally don't

00:31:50.270 --> 00:31:53.460
have large enough headers,
or they don't use large enough headers

00:31:53.460 --> 00:31:55.540
to actually need precompiled headers.

00:31:55.560 --> 00:31:59.840
So it's kind of a waste of time,
and CPP precomp does have some areas

00:31:59.910 --> 00:32:04.000
where it wasn't entirely consistent
with the normal GNU preprocessor.

00:32:04.330 --> 00:32:08.780
And so the usual advice is
to add a no-CPP precomp.

00:32:08.980 --> 00:32:12.800
It's still good advice,
3.3 will just ignore the no-CPP precomp.

00:32:14.590 --> 00:32:16.860
There are some missing
declarations and functions,

00:32:17.070 --> 00:32:20.660
although last year there was a
bunch of easy examples to point to,

00:32:20.660 --> 00:32:23.380
but all the ones I knew of
have been fixed for Panther,

00:32:23.380 --> 00:32:24.820
so there's nothing to point to anymore.

00:32:24.820 --> 00:32:27.320
But I'm sure there's still
some that are out there.

00:32:28.950 --> 00:32:31.040
You may also run into
duplicate definitions.

00:32:31.040 --> 00:32:34.880
That is,
the system framework will have things

00:32:34.880 --> 00:32:40.930
like getopt will be compiled into it,
and your program may also link in getopt,

00:32:41.040 --> 00:32:43.900
its own version of getopt,
and then you'll get complaints.

00:32:43.980 --> 00:32:48.060
Now, on a Linux system,
it will just note that there is a

00:32:48.160 --> 00:32:51.070
duplicate definition and will go on.

00:32:51.070 --> 00:32:54.700
And the OS X linker
will actually complain.

00:32:54.700 --> 00:32:57.720
It will say, oh, multiply defined,
you know, this is an error.

00:32:58.380 --> 00:33:02.260
And we do this because this ties back
into the Mac world where multiple

00:33:02.260 --> 00:33:04.850
definitions of symbols were hard errors.

00:33:04.860 --> 00:33:09.500
So the way to deal with this is to
add a dash multiply defined suppress.

00:33:09.500 --> 00:33:12.420
And this is something
that's a linker option,

00:33:12.420 --> 00:33:15.620
but you can hand it in
this form to the compiler.

00:33:25.030 --> 00:33:27.930
told me this was a squirrel-y.

00:33:28.010 --> 00:33:31.330
So other less common
problems you might run into,

00:33:31.410 --> 00:33:32.630
pthread functionality.

00:33:32.670 --> 00:33:37.100
Some pthread functionality
is missing even in Panther.

00:33:37.100 --> 00:33:38.830
You can run into namespace conflicts.

00:33:38.900 --> 00:33:40.360
And this has always been a concern.

00:33:40.360 --> 00:33:43.260
Although in practice,
it doesn't seem to happen that often.

00:33:43.260 --> 00:33:46.110
And there's an option
called two-level namespace,

00:33:46.110 --> 00:33:48.550
which is way too
complicated to go into here.

00:33:48.560 --> 00:33:52.770
Just read the linker man page,
and it has all the gory details.

00:33:53.190 --> 00:33:56.860
As I mentioned earlier,
this actually happens a fair amount,

00:33:56.860 --> 00:34:00.500
so it's really not a less common problem,
is to remember to run ranlib.

00:34:00.550 --> 00:34:04.090
That's pretty straightforward.

00:34:04.090 --> 00:34:07.750
You just have to remember to do
it or add it into the make file.

00:34:08.100 --> 00:34:13.060
Another thing that a few people have
bumped into is that the NCURS is a

00:34:13.060 --> 00:34:17.170
separate library in Jaguar and later,
and previously it was included

00:34:17.250 --> 00:34:18.420
in the system framework.

00:34:18.480 --> 00:34:22.180
And so basically if you want a
program that will run in both

00:34:22.180 --> 00:34:25.950
pre-Jaguar and post-Jaguar systems,
you'll have to build them slightly

00:34:25.950 --> 00:34:30.140
differently because the library
is no longer being incorporated

00:34:30.140 --> 00:34:32.610
as part of the system framework.

00:34:37.400 --> 00:34:39.930
Now, most of the time for porting,
you want to use AutoConf.

00:34:40.030 --> 00:34:45.600
AutoConf is normally automatically
used in GNU-type configure scripts.

00:34:45.640 --> 00:34:48.800
And it's really the best way
to test for OS features on the

00:34:48.800 --> 00:34:50.990
machine that you're building on.

00:34:52.250 --> 00:34:55.250
And it basically the process,
actually I should ask,

00:34:55.370 --> 00:34:58.270
how many people are not
familiar with AutoConf?

00:34:59.130 --> 00:34:59.700
Okay.

00:34:59.970 --> 00:35:05.630
Basically, Autoconf is horrible,
horrible mishmash of scripts and

00:35:05.630 --> 00:35:09.140
macros and various kinds of trickery.

00:35:09.140 --> 00:35:12.060
The basic concept of
Autoconf is pretty simple,

00:35:12.060 --> 00:35:12.690
though.

00:35:12.700 --> 00:35:14.570
It will build a tiny program.

00:35:14.570 --> 00:35:18.010
For instance,
a tiny program that includes a UNIX.h,

00:35:18.010 --> 00:35:20.340
which is a non-standard header.

00:35:20.340 --> 00:35:24.410
And it will compile the small program,
and it will see if it errors out.

00:35:24.530 --> 00:35:28.980
If it errors out, it says, no,
UNIX.h not found, then it sets a macro.

00:35:29.000 --> 00:35:32.540
It's a macro called haveUNIX.h,
and then is zero.

00:35:32.710 --> 00:35:34.940
So it says that this
header has not been found.

00:35:34.940 --> 00:35:36.570
And then you can use
that in your sources.

00:35:36.580 --> 00:35:42.120
If haveUNIX.h, then include UNIX.h,
otherwise don't include it.

00:35:42.120 --> 00:35:46.780
So it's a very powerful mechanism,
and this is really the core of how a lot

00:35:46.780 --> 00:35:51.960
of these programs can be brought to a
new system and just build the first time.

00:35:53.820 --> 00:35:56.340
And we're lucky in that
there's actually a book now in

00:35:56.340 --> 00:35:59.820
AutoConf describing it in great detail,
written by the people that

00:35:59.890 --> 00:36:01.000
put a lot of it together.

00:36:02.500 --> 00:36:07.160
But it has one fatal flaw,
which is that it tests the features

00:36:07.340 --> 00:36:08.890
of the machine you're building on.

00:36:08.940 --> 00:36:13.120
So if you're running Jaguar and
you want to build for Panther,

00:36:13.120 --> 00:36:16.710
or as I'm sure everybody's doing now,
I saw installations going

00:36:16.710 --> 00:36:19.230
on all day yesterday,
everybody's running Panther,

00:36:19.230 --> 00:36:23.550
and they want to build for Jaguar,
AutoConf won't do the right thing.

00:36:23.560 --> 00:36:26.220
It'll build a program that'll
work just fine for Panther and

00:36:26.220 --> 00:36:27.710
may or may not work on Jaguar.

00:36:28.220 --> 00:36:32.460
So we provide an availability macros.h,
and it's under user include.

00:36:32.460 --> 00:36:36.260
And what this will do,
this will actually have a set of flags,

00:36:36.320 --> 00:36:40.280
a set of definitions,
that are used in the OS X headers

00:36:40.280 --> 00:36:45.040
to say whether a particular
feature is available in Jaguar,

00:36:45.040 --> 00:36:46.030
Panther, what have you.

00:36:46.060 --> 00:36:51.150
And so you actually want to make those
tests when you're using features that are

00:36:51.150 --> 00:36:52.870
not available in all versions of OS X.

00:36:56.720 --> 00:36:59.990
So going to a few more caveats.

00:37:00.300 --> 00:37:01.940
Don't abuse root.

00:37:02.020 --> 00:37:03.260
It's a personal machine, sure.

00:37:03.260 --> 00:37:05.300
Why not step on stuff in user bin?

00:37:05.300 --> 00:37:08.420
Improve the compiler.

00:37:08.420 --> 00:37:09.250
Overwrite the headers.

00:37:09.260 --> 00:37:13.250
We really don't recommend this because
you can easily get into a situation

00:37:13.250 --> 00:37:16.550
where the program builds on your
machine and doesn't build on the

00:37:16.580 --> 00:37:18.170
machine of the person next to you.

00:37:18.220 --> 00:37:20.830
In fact,
I ran into this just yesterday because

00:37:20.860 --> 00:37:25.160
I had some header files that I had not
moved forward to a new installation.

00:37:26.190 --> 00:37:28.480
So be careful about this kind of thing.

00:37:28.480 --> 00:37:29.520
Use your local.

00:37:29.520 --> 00:37:30.860
We have a full set of user local.

00:37:30.860 --> 00:37:34.800
We keep our own hands off it so that
you can fill it up with your own things.

00:37:36.710 --> 00:37:40.180
The Maco object file format is
actually a very different file format

00:37:40.300 --> 00:37:42.200
from Aout or Elf or any other format.

00:37:42.200 --> 00:37:46.120
One of the consequences is no
standard GNU binutils port.

00:37:46.120 --> 00:37:49.690
I often hear people say, well,
the first thing I need to do

00:37:49.690 --> 00:37:52.840
is build binutils on OS X,
and then I can continue with my work.

00:37:52.920 --> 00:37:54.770
I say, well,
that's not going to get you very far.

00:37:56.800 --> 00:38:00.500
So if there's anybody that wants
to port binutils to Mac OS,

00:38:00.590 --> 00:38:03.090
please see me afterwards.

00:38:04.020 --> 00:38:07.260
So another thing to watch out
for is whitespace and path names.

00:38:07.320 --> 00:38:12.140
You get a standard installation,
you have a /Macintosh space HD.

00:38:12.240 --> 00:38:15.220
And if you forget to properly
quote your file names,

00:38:15.220 --> 00:38:16.690
bad things can happen.

00:38:16.780 --> 00:38:19.000
In fact, some of you may remember there
was a bad thing that happened in

00:38:19.080 --> 00:38:22.650
something in an Apple tool where
somebody forgot the quoting.

00:38:24.150 --> 00:38:25.780
So beware.

00:38:25.780 --> 00:38:27.940
Another thing that happens,
at least as often,

00:38:27.980 --> 00:38:30.420
is HFS versus UFS issues.

00:38:30.420 --> 00:38:35.500
Foo.c, Foo.bigc, CamelCapsFoo,
all these things are

00:38:35.500 --> 00:38:37.420
turned into the same file.

00:38:37.440 --> 00:38:41.080
And this has some interesting
and unfortunate consequences.

00:38:41.080 --> 00:38:44.150
For instance,
if somebody has a CVS repository

00:38:44.150 --> 00:38:47.470
with files of the same name
differing only in case,

00:38:47.470 --> 00:38:50.200
and CVS just does not like that at all.

00:38:50.780 --> 00:38:53.400
Every time you do a checkout,
every time you do an update, it says, oh,

00:38:53.400 --> 00:38:54.600
this file already exists.

00:38:54.600 --> 00:38:55.830
I've already checked out this file.

00:38:55.840 --> 00:38:58.140
And it tries to overwrite it
with the other file anyway.

00:38:58.140 --> 00:38:59.830
Very confused situation.

00:39:01.490 --> 00:39:04.280
Another consequence that
I believe Sean pointed out to me

00:39:04.280 --> 00:39:08.870
that I hadn't heard of before,
a lot of times people will have a

00:39:09.040 --> 00:39:11.220
file named install in all uppercase.

00:39:11.220 --> 00:39:13.380
It's like they're reading
me about how to install.

00:39:13.380 --> 00:39:16.600
But they also have a make install action.

00:39:16.630 --> 00:39:19.080
Well, on a UFS system,
make install will say, oh,

00:39:19.200 --> 00:39:20.490
the install file's there.

00:39:20.590 --> 00:39:22.320
It's perfectly finished and done.

00:39:22.320 --> 00:39:23.400
There's nothing to do.

00:39:23.420 --> 00:39:25.430
So make install has no effect.

00:39:30.000 --> 00:39:31.600
Okay, a couple words about the debugger.

00:39:31.600 --> 00:39:33.680
There's a whole session
on debugging later on,

00:39:33.680 --> 00:39:35.750
so for the gory details.

00:39:35.760 --> 00:39:41.500
Mac OS X debugger is GDB,
currently based on the 5.3

00:39:41.500 --> 00:39:44.190
release of GDB from the FSF.

00:39:44.420 --> 00:39:47.530
It has a large number of extensions.

00:39:47.530 --> 00:39:49.420
There's some Objective-C stuff.

00:39:49.480 --> 00:39:53.350
Objective-C stuff is going in FSF GDB,
but it's not all there yet.

00:39:53.510 --> 00:39:56.620
So we also have Mach support,
we have framework support,

00:39:56.620 --> 00:39:58.740
we have a number of additional commands.

00:39:58.740 --> 00:40:01.200
Again,
some of these are making it into FSF GDB,

00:40:01.200 --> 00:40:02.850
but they're not all there yet.

00:40:07.120 --> 00:40:09.940
Now, again, there's another session
with all the details on gcc,

00:40:09.940 --> 00:40:12.050
so I'll just hit the highlights.

00:40:12.200 --> 00:40:15.190
The Jaguar system compiler is 3.1.

00:40:15.470 --> 00:40:20.160
We still have 2.9.5.2,
and this is used for

00:40:20.160 --> 00:40:25.870
compatibility with 10.1,
in particular, if you're building KEXTs.

00:40:26.000 --> 00:40:30.940
10.1 earlier cannot run
a 3.x compiled KEXT,

00:40:30.940 --> 00:40:33.300
although the reverse is true.

00:40:33.610 --> 00:40:35.960
The Panther compiler is 3.3.

00:40:35.960 --> 00:40:39.820
And so it's already
sitting on your systems.

00:40:39.820 --> 00:40:43.270
As I think Ted mentioned yesterday,
even though the Xcode is

00:40:43.370 --> 00:40:48.160
still in preview state,
the 3.3 compiler is a GM compiler.

00:40:48.160 --> 00:40:51.490
We've used it for quite a lot of stuff,
and in general,

00:40:51.490 --> 00:40:53.790
it's been of pretty good quality.

00:40:55.000 --> 00:40:58.990
Special features of 3.3,
we have even more optimization.

00:40:58.990 --> 00:41:01.500
You saw the spec numbers are
getting better all the time.

00:41:01.500 --> 00:41:03.940
We get even better C++ conformant.

00:41:03.940 --> 00:41:08.420
We have a new mechanism called
PCH for precompiled headers.

00:41:08.420 --> 00:41:10.730
So CPPrecomp is gone.

00:41:10.730 --> 00:41:11.920
PFE is gone.

00:41:12.210 --> 00:41:14.770
PCH is the only way to go.

00:41:20.100 --> 00:41:23.250
So how do you deal with all
these different GCC versions?

00:41:23.260 --> 00:41:25.510
Well, we give them all different names.

00:41:25.560 --> 00:41:29.780
So 295 compiler is always a user bin GC2.

00:41:29.780 --> 00:41:32.950
The standard version 3,
whatever standard is

00:41:32.950 --> 00:41:36.000
appropriate for the system,
is at gcc3.

00:41:36.000 --> 00:41:40.900
And then we symlink cc and gcc
to one or the other of these.

00:41:41.580 --> 00:41:45.460
To flip back and forth, if you want to,
it's very often convenient just

00:41:45.500 --> 00:41:48.740
to change the default so that the
makefiles and so on don't have

00:41:48.830 --> 00:41:49.870
to know about this distinction.

00:41:49.880 --> 00:41:54.640
You can use the script gccselect,
which is also unique to OS X.

00:41:54.640 --> 00:41:59.110
And it's basically an elaborate
script that will choose the compiler

00:41:59.110 --> 00:42:01.250
that is the default compiler.

00:42:01.260 --> 00:42:03.440
It knows about setting up
the auxiliary programs,

00:42:03.440 --> 00:42:04.930
the headers, and all that stuff.

00:42:05.020 --> 00:42:10.810
Since it's actually affecting user bin,
you do need to be root to run it.

00:42:16.430 --> 00:42:17.660
Yeah, okay.

00:42:17.660 --> 00:42:21.580
So I press it harder,
it makes it work better.

00:42:22.120 --> 00:42:25.630
Okay, now Bodhi Gerfen will come up and
give us a little demo of using

00:42:25.640 --> 00:42:29.580
the Xcode IDE with open source
projects using two different modes.

00:42:29.580 --> 00:42:30.000
Cool.

00:42:30.000 --> 00:42:31.580
Thank you very much, Stan.

00:42:36.300 --> 00:42:37.690
I'm afraid of this thing now.

00:42:37.900 --> 00:42:39.260
Well, good morning.

00:42:39.380 --> 00:42:45.490
How many of you guys yesterday went to
the Developer Tools overview session?

00:42:45.490 --> 00:42:46.800
Just want to get an idea.

00:42:46.800 --> 00:42:47.120
OK.

00:42:47.500 --> 00:42:48.320
Great.

00:42:48.430 --> 00:42:51.540
Well, this morning I want to look
at three different things

00:42:51.970 --> 00:42:53.640
related to our Xcode product.

00:42:53.690 --> 00:42:57.350
I want to look at two ways that you
can take your existing open source

00:42:57.350 --> 00:43:00.230
applications and bring them into the IDE.

00:43:00.230 --> 00:43:04.400
I want to look at some benefits
of each of these two ways.

00:43:04.400 --> 00:43:07.160
And most importantly,
I want to give you a couple of examples

00:43:07.270 --> 00:43:10.530
because I want to show you what steps
you can take as a UNIX Developer,

00:43:10.600 --> 00:43:13.650
as an open source developer,
to actually start taking

00:43:13.660 --> 00:43:16.170
advantage of these -- of the IDE.

00:43:16.170 --> 00:43:20.340
So to begin with,
two types of integration into the IDE.

00:43:20.340 --> 00:43:23.670
The first type is you can
keep your existing make file.

00:43:23.780 --> 00:43:25.790
You can keep your
make-based build system.

00:43:25.820 --> 00:43:29.200
You may have seen yesterday where
Tony TV got on stage and talked about

00:43:29.200 --> 00:43:34.450
all the benefits of the dependency
checking that the Xcode IDE provides.

00:43:34.480 --> 00:43:37.680
But if you already have
a project based on make,

00:43:37.680 --> 00:43:41.240
perhaps you're doing -- you're
working on an open source project

00:43:41.240 --> 00:43:43.460
with another group of people,
you don't want to lose all

00:43:43.460 --> 00:43:45.060
the work you've put into it.

00:43:45.170 --> 00:43:46.440
You can continue to do that.

00:43:46.620 --> 00:43:49.080
Our IDE will not change your files.

00:43:49.080 --> 00:43:52.560
It will support your make files,
and it just -- it adds another

00:43:52.560 --> 00:43:57.120
file in the directory that allows
the IDE to keep track of files.

00:43:57.120 --> 00:44:03.220
The other thing you can do is you
can use Xcode's native build system.

00:44:03.220 --> 00:44:03.720
And this is going to mean
going through the Xcode IDE,

00:44:03.720 --> 00:44:05.800
you're going going through
perhaps your Makefile today,

00:44:05.800 --> 00:44:08.800
figuring out your targets,
figuring out some of the settings,

00:44:08.800 --> 00:44:11.240
and changing settings in Xcode.

00:44:11.240 --> 00:44:14.130
So we're going to look at some
examples of each of these.

00:44:14.140 --> 00:44:16.890
So to begin with,
the benefits of keeping your

00:44:16.890 --> 00:44:20.460
existing Makefile and using
it inside the Xcode IDE.

00:44:20.460 --> 00:44:22.900
Well, obviously the big benefit
is you already have it,

00:44:22.910 --> 00:44:24.720
it's probably already working.

00:44:24.720 --> 00:44:26.640
But why would you want
to bring it into the IDE?

00:44:26.640 --> 00:44:28.470
Well, there are some benefits.

00:44:28.480 --> 00:44:29.860
You get a graphical IDE.

00:44:29.860 --> 00:44:33.030
You get one of the really nice
features that Stan pointed out to me

00:44:33.140 --> 00:44:36.380
that he likes is the symbol indexing
that you get through the IDE.

00:44:36.560 --> 00:44:38.020
We have a nice batch find.

00:44:38.070 --> 00:44:40.580
We have source control integration.

00:44:40.580 --> 00:44:45.180
And of course the documentation is there,
both API reference and conceptual docs.

00:44:45.180 --> 00:44:46.700
And we didn't forget
about your man pages.

00:44:46.700 --> 00:44:48.920
Since you're coming into the IDE,
we still let you view the

00:44:48.920 --> 00:44:49.840
man pages through that.

00:44:49.910 --> 00:44:50.460
He's Mr.

00:44:50.460 --> 00:44:51.160
Man Pages.

00:44:51.160 --> 00:44:52.510
I like the man pages.

00:44:52.510 --> 00:44:54.380
I spend a lot of time in them.

00:44:54.380 --> 00:44:55.040
And I don't like Rof.

00:44:55.040 --> 00:44:58.670
He bugs me every time I don't write one.

00:44:58.670 --> 00:45:00.360
Exactly.

00:45:00.360 --> 00:45:04.030
So to begin with,
we're going to look at a demo

00:45:04.030 --> 00:45:08.350
of using an existing open source
project that's Make based.

00:45:08.350 --> 00:45:12.640
And I'm going to show you how
to bring it into the Xcode IDE.

00:45:12.640 --> 00:45:13.780
Just some simple steps.

00:45:13.780 --> 00:45:16.800
Obviously,
things are going to vary a little bit.

00:45:16.800 --> 00:45:19.950
But to begin with,
I always got to start the app,

00:45:19.950 --> 00:45:22.420
which I was smart enough
to have running already.

00:45:22.420 --> 00:45:25.250
In Xcode, just choose new project.

00:45:25.250 --> 00:45:28.920
And in this case, we're using a Makefile,
so we're just going to

00:45:28.920 --> 00:45:29.840
choose an empty project.

00:45:29.840 --> 00:45:36.900
And I'm going to call this one --
I picked something nice and big here.

00:45:37.850 --> 00:45:42.850
Subversion.

00:45:42.850 --> 00:45:42.850
And I've got it here
in my examples source.

00:45:46.480 --> 00:45:47.680
So you need to set a directory.

00:45:47.680 --> 00:45:50.460
If you're bringing an
existing project in,

00:45:50.700 --> 00:45:53.540
it's probably good to go,
just like I did, go a directory up.

00:45:53.690 --> 00:45:58.510
So my source code actually is in-- I'll
show you where it is-- in examples,

00:45:58.510 --> 00:45:59.200
source.

00:45:59.280 --> 00:46:00.330
There's my source code.

00:46:00.510 --> 00:46:08.510
So I chose the source directory and
then named the project Subversion,

00:46:08.540 --> 00:46:10.200
the same project name as my existing
project that works with Make.

00:46:10.420 --> 00:46:13.770
So when you do this,
you just get-- we chose an empty project,

00:46:13.770 --> 00:46:16.610
so we get pretty much
an empty project window.

00:46:16.730 --> 00:46:20.550
First thing you want to do is let's
bring in our source code files.

00:46:20.770 --> 00:46:26.850
So under the Project menu,
we're going to Add Files.

00:46:26.850 --> 00:46:32.800
And again,
I navigate to where my source files are.

00:46:32.880 --> 00:46:34.550
Got to go with column view.

00:46:34.550 --> 00:46:34.550
That's much better.

00:46:34.550 --> 00:46:34.550
All right.

00:46:37.100 --> 00:46:38.560
So I'm going to add these files in here.

00:46:38.560 --> 00:46:40.160
It's going to take a little minute.

00:46:40.270 --> 00:46:42.780
First, we need to choose-- take
the default options.

00:46:42.780 --> 00:46:45.860
You do want to create groups
for any added folders.

00:46:45.940 --> 00:46:53.730
This will let the Xcode IDE go
through all your source files,

00:46:53.730 --> 00:46:53.730
add it to the index,
let you find all the symbols.

00:46:53.720 --> 00:46:55.840
We've got to wait a second here.

00:46:55.860 --> 00:46:57.990
And boom, we've got all our files.

00:46:58.360 --> 00:47:01.220
Now,
you saw some of these things yesterday,

00:47:01.220 --> 00:47:05.270
and I encourage you to go to the
later sessions on the Xcode IDE,

00:47:05.320 --> 00:47:07.550
but you get a lot of benefits.

00:47:07.560 --> 00:47:10.590
So I'm not going to go into a lot of
detail on all the benefits you get.

00:47:10.590 --> 00:47:13.610
I'm just trying to give you a
starting ground for your projects.

00:47:14.000 --> 00:47:17.160
But you notice we have,
we can now search on, we can choose the

00:47:17.160 --> 00:47:20.100
project here and search,
and we get the nice fast find.

00:47:20.100 --> 00:47:21.960
We can go through everything.

00:47:21.960 --> 00:47:27.080
We also get the more enhanced
find where we could look for,

00:47:27.080 --> 00:47:30.940
I don't know, main,
and we'll get down here

00:47:30.940 --> 00:47:35.350
under the find results,
we see all the occurrences

00:47:35.420 --> 00:47:37.890
of main in all our files.

00:47:37.890 --> 00:47:39.920
So you get a lot of benefits there.

00:47:39.920 --> 00:47:43.940
We also have, let's stop that find.

00:47:44.000 --> 00:47:45.000
Thank you.

00:47:45.940 --> 00:47:48.520
I mentioned the symbol lookup,
which is another nice feature.

00:47:48.520 --> 00:47:52.230
So let's look in here under Subversion.

00:47:52.250 --> 00:47:54.630
It's a nice management system also,
you can see.

00:47:54.680 --> 00:48:01.540
Clients, command-line, I don't know,
let's take, for example, main.

00:48:03.920 --> 00:48:07.340
Notice this pop-up right here.

00:48:07.460 --> 00:48:08.100
Excuse me.

00:48:08.170 --> 00:48:10.420
It collects the symbols
in that particular file,

00:48:10.420 --> 00:48:13.680
so you can do a nice quick jump to get
to the various symbols in your file.

00:48:13.680 --> 00:48:15.870
We also have the documentation lookup.

00:48:15.870 --> 00:48:19.460
I mentioned the man pages and
the regular documentation window.

00:48:19.460 --> 00:48:23.640
So you get a lot of benefits,
and you haven't changed anything.

00:48:23.640 --> 00:48:24.800
You haven't changed.

00:48:24.800 --> 00:48:28.360
All you've done is you've
added in your source file.

00:48:28.900 --> 00:48:32.770
All that we've done is we've
added this pbproj right there.

00:48:32.770 --> 00:48:34.620
The rest of the things are just the same.

00:48:34.640 --> 00:48:37.970
So if you have a group of people
that some people want to use the IDE,

00:48:38.150 --> 00:48:40.700
some people want to use command-line,
it's okay.

00:48:40.700 --> 00:48:41.970
And at Apple, we do that.

00:48:41.970 --> 00:48:43.700
Our engineers are all over the map.

00:48:43.700 --> 00:48:46.130
Some like the IDE,
some like the command-line.

00:48:46.130 --> 00:48:47.360
That's the beauty of it.

00:48:47.400 --> 00:48:49.870
So you can see here some
basic benefits you get.

00:48:49.870 --> 00:48:53.660
I guess I should show you it building
to prove that it actually builds.

00:48:53.660 --> 00:48:56.100
Oh, yeah,
because we forgot an important step here.

00:48:57.060 --> 00:48:59.060
In our project, we've got the files in.

00:48:59.060 --> 00:49:02.240
The one thing we have to do to
actually build it is add a new target.

00:49:02.240 --> 00:49:05.970
And in this case, we chose new target
from the project menu,

00:49:05.970 --> 00:49:08.990
and we're going to choose
the appropriate name,

00:49:08.990 --> 00:49:10.320
GNU make target.

00:49:10.320 --> 00:49:14.590
And I'm going to call it
something obvious like make.

00:49:16.130 --> 00:49:17.240
Finish.

00:49:17.310 --> 00:49:19.610
And let's see if this actually works.

00:49:19.700 --> 00:49:24.740
I'm going to open the build
window so you can see what's

00:49:24.740 --> 00:49:27.190
going on behind the scenes here.

00:49:30.810 --> 00:49:32.250
I think I touched a file in there.

00:49:32.260 --> 00:49:33.360
Most of them are good.

00:49:33.360 --> 00:49:35.030
Oh, we have one file I touched.

00:49:35.030 --> 00:49:37.440
And so make goes ahead and redoes it.

00:49:37.610 --> 00:49:39.340
And we were successful.

00:49:39.470 --> 00:49:42.280
So very minimal work to
bring your projects in.

00:49:42.280 --> 00:49:43.940
That was-- yeah.

00:49:44.380 --> 00:49:45.240
You saw it's pretty trivial.

00:49:45.240 --> 00:49:46.970
All you need to do is make a new project.

00:49:47.050 --> 00:49:48.500
An empty project is the best.

00:49:48.500 --> 00:49:53.590
Then you need to add your files in,
and then just add a new target,

00:49:53.590 --> 00:49:54.850
a GNU make target.

00:49:54.860 --> 00:49:56.580
So if we can go back to the slides.

00:49:56.580 --> 00:50:03.280
So that's using an existing build style,
a make file, with the Xcode IDE.

00:50:03.300 --> 00:50:06.830
But what if you want to use
the native build system?

00:50:06.870 --> 00:50:08.650
Maybe you sat in a couple
sessions yesterday,

00:50:08.650 --> 00:50:10.660
the keynote,
the development tools overview,

00:50:10.660 --> 00:50:12.720
and you saw all those great features.

00:50:13.520 --> 00:50:15.780
Their list was a lot
bigger than that list.

00:50:16.140 --> 00:50:19.230
Their list was more like this list.

00:50:19.260 --> 00:50:22.020
What if you want to take
advantage of the zero link,

00:50:22.070 --> 00:50:24.810
the predictive compilation,
the distributed build system,

00:50:24.810 --> 00:50:25.980
the code sense?

00:50:25.980 --> 00:50:27.980
There's a lot of great
features they showed you.

00:50:28.040 --> 00:50:31.030
Now some of those features
are dependent on gcc 3.3,

00:50:31.080 --> 00:50:35.030
but all of them are dependent on
the native build system of Xcode.

00:50:35.060 --> 00:50:37.890
So what if you want to
take advantage of those?

00:50:38.090 --> 00:50:41.130
So again, a quick example of that.

00:50:42.630 --> 00:50:45.060
And if we go back to the demo machine.

00:50:45.060 --> 00:50:47.230
Thanks.

00:50:47.340 --> 00:50:51.230
So in this case,
I chose a much simpler project because

00:50:51.300 --> 00:50:54.180
it's a pretty dang big project there.

00:50:54.580 --> 00:50:57.000
We've got this little
command-line tool called RMAN,

00:50:57.000 --> 00:50:59.540
and this is actually the
tool we use inside Xcode to

00:50:59.540 --> 00:51:02.200
generate the HTML man pages.

00:51:02.200 --> 00:51:04.100
It's a very simple tool.

00:51:04.100 --> 00:51:06.250
We only require one file
to actually build it.

00:51:06.340 --> 00:51:07.960
So take the examples here.

00:51:07.960 --> 00:51:12.100
I understand your projects are probably
going to be a little more complex.

00:51:12.100 --> 00:51:15.740
Again,
we're going to start with a new project.

00:51:15.790 --> 00:51:17.830
This time we're going to do
something a little different,

00:51:17.830 --> 00:51:18.280
though.

00:51:18.960 --> 00:51:20.600
We know what we want to end up with.

00:51:20.690 --> 00:51:23.140
We know we want to end up
with a command-line tool.

00:51:23.200 --> 00:51:25.190
So I'm going to choose standard tool.

00:51:25.200 --> 00:51:28.040
And same thing again.

00:51:28.330 --> 00:51:30.200
RMAN.

00:51:30.200 --> 00:51:32.890
Actually, that file is already okay.

00:51:33.280 --> 00:51:36.140
But I'm going to choose the
directory where my project exists.

00:51:36.140 --> 00:51:39.260
I'm going to give it the same name, RMAN.

00:51:39.340 --> 00:51:42.620
And you can see there,
volumes of sample source, RMAN.

00:51:42.950 --> 00:51:46.380
Oh, template files already exist.

00:51:47.630 --> 00:51:50.420
You always got to have
something fun in a demo.

00:51:50.460 --> 00:51:52.690
All right,
so we end up with a project here.

00:51:52.700 --> 00:51:55.040
Now, this one's a little different
than the other project.

00:51:55.040 --> 00:51:56.580
The other one was an empty project.

00:51:56.600 --> 00:51:58.350
This one--

00:51:59.660 --> 00:52:05.360
will actually-- let
me debug show run log.

00:52:05.540 --> 00:52:09.390
This one actually does
something if we build it.

00:52:12.900 --> 00:52:14.380
Excuse me.

00:52:14.410 --> 00:52:17.820
This one, if we build it and run it,
it's a simple hello world application.

00:52:17.850 --> 00:52:19.370
Now,
this isn't the application we wanted,

00:52:19.370 --> 00:52:19.790
though.

00:52:19.800 --> 00:52:21.660
This is just a template file.

00:52:21.660 --> 00:52:24.770
When you use one of the
template files in the Xcode IDE,

00:52:24.920 --> 00:52:27.360
it sticks a couple of
basic files in there,

00:52:27.360 --> 00:52:30.350
usually a header file, a source file,
maybe a man page in this case,

00:52:30.450 --> 00:52:32.940
since it was a command-line tool.

00:52:32.940 --> 00:52:35.990
And it also sets your
build settings for you.

00:52:36.020 --> 00:52:37.000
It sets linker settings.

00:52:37.000 --> 00:52:40.660
It sets the basic things you
need for that type of project.

00:52:40.660 --> 00:52:43.340
So first thing we've got to
do in this one is I'm going

00:52:43.340 --> 00:52:45.660
to show the target pane here.

00:52:45.820 --> 00:52:49.610
And I'm going to remove this main.c,
because that's not the file I want.

00:52:49.610 --> 00:52:53.890
So I'm just going to uncheck it,
which removes it from this target.

00:52:54.090 --> 00:52:58.910
And I'm going to drag in the file I want,
so our man.c.

00:52:59.700 --> 00:53:01.600
Of course,
you could do it like we did before,

00:53:01.600 --> 00:53:04.460
go to the project menu and add files,
but, you know, it is a Macintosh.

00:53:04.460 --> 00:53:07.630
Drag and drop works.

00:53:08.310 --> 00:53:12.800
So we've added our source file,
and things should just work.

00:53:12.800 --> 00:53:14.900
Oh, but life's not that good.

00:53:15.000 --> 00:53:17.850
So if you look here,
this is one of the features you

00:53:17.860 --> 00:53:19.140
get by using a native target.

00:53:19.220 --> 00:53:22.550
You get the integrated
error and warning reporting.

00:53:22.610 --> 00:53:24.900
So over here on the left,
you can see-- I guess I'm

00:53:24.960 --> 00:53:26.860
pointing to the screen,
which you guys can't see.

00:53:26.880 --> 00:53:29.190
Over there on the left,
you can see the errors and warnings.

00:53:29.300 --> 00:53:31.630
And you notice we have
a couple of errors.

00:53:31.690 --> 00:53:33.860
We have, what, five errors,
and we have a bunch of warnings.

00:53:33.860 --> 00:53:36.040
We're not going to worry
about the warnings right now,

00:53:36.040 --> 00:53:37.740
because at least we
can get it to compile.

00:53:37.740 --> 00:53:39.290
But what about those errors?

00:53:39.410 --> 00:53:42.310
This is the kind of thing you're
going to find if you're importing

00:53:42.340 --> 00:53:44.510
your project into the Xcode IDE.

00:53:44.900 --> 00:53:47.780
You'll notice our errors are all
about variables that are defined.

00:53:47.820 --> 00:53:51.990
And if you look at it,
if you look in your source project,

00:53:52.130 --> 00:53:57.450
I notice that a lot of these
things are defined in my make file.

00:54:00.900 --> 00:54:04.610
So for example, we've got vol list.

00:54:04.630 --> 00:54:08.450
And this is the call-in.

00:54:09.100 --> 00:54:10.140
Excuse me, let me make this bigger.

00:54:10.140 --> 00:54:12.560
I realize you can't see it back there.

00:54:12.560 --> 00:54:18.690
If I look in my Makefile and do a find.

00:54:21.000 --> 00:54:23.160
I can see that, yeah, indeed,
they did set this

00:54:23.160 --> 00:54:24.600
variable in the make file.

00:54:24.610 --> 00:54:28.070
So how do you get these kind
of things into the Xcode IDE?

00:54:28.400 --> 00:54:31.260
This is a very important thing,
and this will help you get

00:54:31.270 --> 00:54:33.240
your projects into the IDE.

00:54:33.270 --> 00:54:41.090
So we notice that there's a lot of
things defined in the make file.

00:54:41.090 --> 00:54:41.090
All you need to do-- let's
go back to our source code.

00:54:41.560 --> 00:54:44.380
All you need to do is go
to this Targets tab here,

00:54:44.430 --> 00:54:45.300
choose the target.

00:54:45.360 --> 00:54:48.360
When we made the template,
it automatically added a target,

00:54:48.360 --> 00:54:49.740
a command-line target.

00:54:49.830 --> 00:54:54.840
One of the features in Xcode is, the IDE,
is that it uses the inspector a lot

00:54:54.840 --> 00:54:56.640
for a lot of your build settings.

00:54:56.690 --> 00:54:59.630
So we selected the target,
and we're going to open the inspector,

00:54:59.690 --> 00:55:03.560
take a look at it,
and we see general settings,

00:55:03.580 --> 00:55:06.040
build settings, some rules, properties.

00:55:06.090 --> 00:55:07.830
Well,
this is a variable we want to pass in,

00:55:07.840 --> 00:55:11.990
so under the build settings,
we're going to look at

00:55:11.990 --> 00:55:12.930
our current settings.

00:55:12.950 --> 00:55:15.240
I'm going to open this drawer
and look at our current settings,

00:55:15.260 --> 00:55:17.720
and here you see a nice,

00:55:18.480 --> 00:55:20.900
Nice thing that you
might be familiar with.

00:55:20.980 --> 00:55:22.800
We've got other C flags.

00:55:22.890 --> 00:55:27.420
So in this case, I could add in minus d,

00:55:28.480 --> 00:55:31.560
and whatever that setting was, or minus,
there we go.

00:55:31.560 --> 00:55:37.290
And then over here I could maybe
add a new variable definition.

00:55:44.000 --> 00:56:07.200
[Transcript missing]

00:56:08.510 --> 00:56:11.700
Again, we open, we look at the target,
we open the inspector, we look,

00:56:11.770 --> 00:56:13.040
I'm going to look in current settings.

00:56:13.040 --> 00:56:16.510
If you want more details about all these
different things in this drawer here,

00:56:16.510 --> 00:56:19.190
the help has some information
on it and also the sessions

00:56:19.190 --> 00:56:20.890
later on give you more details.

00:56:20.900 --> 00:56:24.610
But if you look here,
I've set in the options that I needed,

00:56:24.610 --> 00:56:28.790
having looked at the make file,
I've added in some variable definitions,

00:56:28.790 --> 00:56:32.000
and let's see if this just works now.

00:56:32.000 --> 00:56:36.490
So we'll show the build log,
because that's slightly interesting.

00:56:36.800 --> 00:56:38.700
And this is actually a nice feature here.

00:56:38.700 --> 00:56:42.010
This button right here allows
you to see what's going on.

00:56:42.020 --> 00:56:43.630
We're not doing any magic here.

00:56:43.740 --> 00:56:46.860
We're still running the same compiler
that Stan talked about earlier.

00:56:46.930 --> 00:56:49.620
This lets you see what's
going on behind the scenes.

00:56:49.620 --> 00:56:53.080
So if we build this guy-- ooh,
build succeeded.

00:56:53.230 --> 00:56:53.870
Beautiful.

00:56:54.050 --> 00:56:58.090
So all I did was added in those settings
that I looked at in the make file.

00:56:58.230 --> 00:57:01.290
And again, you can take a look at it
in the main project window.

00:57:01.470 --> 00:57:05.300
And you can see here's
our existing errors.

00:57:05.560 --> 00:57:07.010
We no longer have any actual errors.

00:57:07.070 --> 00:57:08.580
We've just got some warnings.

00:57:08.800 --> 00:57:10.940
We can cruise around,
find things quickly.

00:57:11.080 --> 00:57:14.260
So back to slides, please.

00:57:15.170 --> 00:57:17.350
You can see that there's a lot
of benefits you can get by using

00:57:17.350 --> 00:57:18.920
Xcode's native build system.

00:57:19.050 --> 00:57:23.340
You saw how easy it was to bring your
existing Make files into Xcode and

00:57:23.550 --> 00:57:25.440
acquire some of the benefits there.

00:57:25.530 --> 00:57:28.530
So I hope this gives you something
to hang on to as you go into

00:57:28.530 --> 00:57:32.060
the other sessions and see and
realize that as a UNIX developer,

00:57:32.060 --> 00:57:35.140
as an open source developer,
you can take advantage

00:57:35.200 --> 00:57:36.700
of our great Xcode IDE.

00:57:36.850 --> 00:57:39.090
So thanks very much.

00:57:47.570 --> 00:57:54.030
One of the things that should give you
confidence about the mixed Xcode and the

00:57:54.110 --> 00:57:58.290
command-line setup is that actually this
is what Apple uses itself to build OS X.

00:57:58.300 --> 00:58:01.830
OS X consists of some 1,200,
1,300 projects,

00:58:01.860 --> 00:58:03.680
of which the kernel is just one.

00:58:04.520 --> 00:58:09.680
And it uses the, many of the projects are
set up to be Xcode projects,

00:58:09.780 --> 00:58:12.010
but the mass build,
that is the final build

00:58:12.020 --> 00:58:14.770
of the entire system,
is done with one very,

00:58:14.770 --> 00:58:17.800
very large script that does
a command-line invocation of

00:58:17.860 --> 00:58:19.410
these projects over and over.

00:58:19.420 --> 00:58:23.590
So another case where we do, in fact,
eat our own dog food.

00:58:26.710 --> 00:58:29.180
Long time.

00:58:29.240 --> 00:58:35.270
No, we actually have build fleets,
as they're called, of several machines

00:58:35.270 --> 00:58:37.960
ranging 8 to 20 machines.

00:58:37.960 --> 00:58:42.190
Just depends on which group
is doing what kind of build.

00:58:42.190 --> 00:58:45.160
Yeah, so it's all distributed around.

00:58:45.160 --> 00:58:46.450
It is enough code.

00:58:46.450 --> 00:58:50.790
I estimated one time I sort of did a
"back of the envelope" kind of thing.

00:58:50.790 --> 00:58:54.850
I came up with some 30 million lines
of code in the system as a whole.

00:58:54.850 --> 00:58:56.450
Don't quote me on that.

00:58:56.460 --> 00:58:59.080
That was just my personal estimate.

00:58:59.080 --> 00:59:04.400
So it was enough code that sometimes
the machines actually will be hit

00:59:04.400 --> 00:59:08.720
by alpha particles or something
like that in interesting situations.

00:59:08.860 --> 00:59:12.220
Anyway, so not to digress.

00:59:12.220 --> 00:59:16.970
To instead to sum up, as you see,
Xcode is a complete tool environment.

00:59:16.970 --> 00:59:21.090
Part of being complete is including
a full set of command line tools.

00:59:21.090 --> 00:59:23.480
We have quite a few command line tools.

00:59:23.480 --> 00:59:27.590
We have a set of various levels of power,
shall we say.

00:59:29.130 --> 00:59:31.840
The standard porting techniques
are sufficient to resolve

00:59:31.840 --> 00:59:33.570
the API differences they are.

00:59:33.740 --> 00:59:38.580
We have a Darwin port system
that will ease the transition.

00:59:38.610 --> 00:59:40.280
You can either download the tools.

00:59:40.310 --> 00:59:43.920
The other thing that we didn't really go
into any depth is that you can also look

00:59:44.000 --> 00:59:47.870
to see how people have done Darwin ports
to see how other people have solved the

00:59:47.870 --> 00:59:50.000
kinds of problems you might run into.

00:59:50.150 --> 00:59:52.330
And finally,
we've seen how you can actually

00:59:52.720 --> 00:59:56.110
use both the Xcode IDE and you
can use the command-line tools,

00:59:56.110 --> 00:59:58.980
and they actually
interoperate in a useful way.

01:00:00.130 --> 01:00:02.710
So that's the content.

01:00:02.930 --> 01:00:03.880
For more information,

01:00:05.780 --> 01:00:07.790
We have a number of things online.

01:00:07.800 --> 01:00:13.940
We have the UNIX porting guides about
porting the package UNIX software,

01:00:13.940 --> 01:00:18.120
details of the compiler, debugging,
assembler, and so forth.

01:00:18.320 --> 01:00:23.870
We have a Maco runtime architecture book
that's interesting for the true nerds.

01:00:24.980 --> 01:00:28.140
We also have a technical note on
the porting of command-line tools,

01:00:28.140 --> 01:00:29.640
which says a lot of things
that I've been saying,

01:00:29.640 --> 01:00:31.600
so if you'd like to
see it in printed form.

01:00:31.750 --> 01:00:35.830
And I mentioned getting config.yes
and config.sub if you need to,

01:00:35.990 --> 01:00:40.960
and this is the URL that actually takes
you there to get the latest copies.

01:00:42.930 --> 01:00:45.700
So, additional,
we have some URLs to pick up stuff,

01:00:45.790 --> 01:00:50.080
both the official Apple site,
developer.apple.com,

01:00:50.080 --> 01:00:51.500
and the Darwin pages.

01:00:51.500 --> 01:00:54.190
We also have opendarwin.org,
which is where the

01:00:54.190 --> 01:00:57.280
Darwin ports come from,
and then Fink, which is a source forge.

01:00:59.710 --> 01:01:01.900
And then finally we have
our contact addresses.

01:01:01.900 --> 01:01:03.110
We have Xcode feedback.

01:01:03.230 --> 01:01:05.740
We have a large collection
of mailing lists.

01:01:05.740 --> 01:01:07.330
I'm on way too many of them myself.

01:01:07.560 --> 01:01:09.690
So if you want to get a
hold of me personally,

01:01:09.690 --> 01:01:10.700
that's one way to do it.

01:01:10.850 --> 01:01:14.610
And then, of course,
Godfrey likes to put his email address.

01:01:14.690 --> 01:01:16.060
And he loves getting email.

01:01:16.190 --> 01:01:19.320
So send him lots.

01:01:19.380 --> 01:01:21.160
Okay, well, that's it for me.

01:01:21.160 --> 01:01:23.080
Thank you very much.