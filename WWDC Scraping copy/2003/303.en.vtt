WEBVTT

00:00:27.730 --> 00:00:28.600
Good afternoon.

00:00:28.600 --> 00:00:30.870
Welcome to session 303.

00:00:31.020 --> 00:00:34.080
So on Monday you saw intro to Xcode.

00:00:34.080 --> 00:00:36.810
Yesterday you saw a little
bit more detail about it,

00:00:36.860 --> 00:00:38.600
and today we're going to
get into a lot more detail.

00:00:38.600 --> 00:00:42.060
So I hope you're ready.

00:00:43.100 --> 00:00:47.710
So I'm Anders Bertelrud,
and I'd like to talk about

00:00:47.760 --> 00:00:49.310
some of the details of Xcode.

00:00:49.650 --> 00:00:53.180
What we're going to talk about today,
some of the things we'll

00:00:53.180 --> 00:00:55.020
cover are moving to Xcode.

00:00:55.020 --> 00:00:57.730
Some of you may have source code.

00:00:57.750 --> 00:00:59.940
Some of you may have old
project builder projects.

00:01:00.030 --> 00:01:01.630
You may have code warrior projects.

00:01:01.630 --> 00:01:03.460
You may want to move that into Xcode.

00:01:04.460 --> 00:01:19.600
We're going to talk about
optimizing build performance.

00:01:19.600 --> 00:01:19.600
As you know, the speed is a big theme
of the Xcode discussion,

00:01:19.600 --> 00:01:19.600
Xcode talks in this conference,
and we're going to be

00:01:19.600 --> 00:01:19.600
going into some of that.

00:01:19.980 --> 00:01:23.850
We're going to talk about Xcode support
for building for multiple OS versions

00:01:23.860 --> 00:01:26.850
from one and the same install.

00:01:26.850 --> 00:01:29.480
And also get into some issues
of workflow and automation.

00:01:29.480 --> 00:01:32.880
We have several features
for accessing documentation,

00:01:32.950 --> 00:01:36.230
for doing source code management,
for automating your

00:01:36.230 --> 00:01:37.700
workflow in many ways.

00:01:37.840 --> 00:01:41.480
And the common theme among
all of these things is time,

00:01:41.570 --> 00:01:42.120
right?

00:01:42.120 --> 00:01:47.000
This is all to save you time so that you
can focus on your app and fixing your

00:01:47.120 --> 00:01:49.590
bugs and then shipping your product.

00:01:50.010 --> 00:01:55.290
So moving into Xcode,
there are several ways.

00:01:55.440 --> 00:01:57.000
And it's easy to get started.

00:01:57.140 --> 00:02:00.870
Many of you have probably already
installed the developer preview for

00:02:00.870 --> 00:02:04.440
Panther and maybe played with Xcode,
maybe installed it on Jaguar.

00:02:04.440 --> 00:02:07.870
There are many migration paths
if you already have code.

00:02:07.870 --> 00:02:10.810
One of them is to create a new
project using the new project

00:02:10.810 --> 00:02:14.030
wizard of the appropriate type,
application, framework,

00:02:14.030 --> 00:02:17.110
whatever your product is,
and then just add the source code

00:02:17.110 --> 00:02:18.870
that you have to the project.

00:02:20.690 --> 00:02:22.650
Another way is to open an
old Project Builder project.

00:02:22.740 --> 00:02:28.280
Xcode can seamlessly open Project Builder
projects and build your targets,

00:02:28.390 --> 00:02:30.110
whatever you had in the
Project Builder project.

00:02:30.160 --> 00:02:32.780
Of course,
you can't make modifications that

00:02:32.780 --> 00:02:37.110
rely on Xcode-only features and
then go back to Project Builder,

00:02:37.240 --> 00:02:39.030
but you can upgrade.

00:02:39.520 --> 00:02:41.700
Also, we have a Code Warrior importer.

00:02:41.850 --> 00:02:45.530
Project Builder had this as well,
but in Xcode it's been improved a lot.

00:02:45.580 --> 00:02:48.400
So we can bring in your source files,
we convert your targets,

00:02:48.480 --> 00:02:51.780
and set a lot of the
compiler options as well.

00:02:52.050 --> 00:02:55.000
And finally,
a fourth way is if you have a make file,

00:02:55.000 --> 00:02:57.940
you can actually wrap an
Xcode project around that.

00:02:58.010 --> 00:03:00.500
You just set up a target
to invoke your make file,

00:03:00.500 --> 00:03:02.420
and you can still take
advantage of the editor,

00:03:02.440 --> 00:03:06.050
and you can take advantage of
a lot of the features in Xcode,

00:03:06.050 --> 00:03:09.840
but you would let your make file
or ant or jam or whatever you're

00:03:09.840 --> 00:03:11.930
using actually do the build.

00:03:12.180 --> 00:03:16.200
So another important point is
that if you bring in source code,

00:03:16.200 --> 00:03:19.300
let's say you bring in an
old project builder project,

00:03:19.390 --> 00:03:22.020
you can actually convert
each target individually.

00:03:22.070 --> 00:03:26.210
And we'll see how to do that,
but you can leave the targets that

00:03:26.210 --> 00:03:28.760
work best as jam targets for now.

00:03:29.220 --> 00:03:32.450
You can take one target after
another and convert them,

00:03:32.450 --> 00:03:36.410
and then gradually start taking
advantage of Xcode's features.

00:03:36.780 --> 00:03:39.650
And an important point is that
some of the features we're showing,

00:03:39.720 --> 00:03:42.980
such as zero-link and fix and continue,
are really only available

00:03:43.030 --> 00:03:43.830
for Xcode targets.

00:03:44.130 --> 00:03:47.700
We really rely on this new native
internal build system to deal with this.

00:03:47.780 --> 00:03:51.010
So you need to upgrade your targets,
convert your targets to

00:03:51.050 --> 00:03:52.530
take advantage of that.

00:03:52.620 --> 00:03:59.730
And if you create a new project
or if you start with the samples,

00:03:59.730 --> 00:03:59.730
the new project templates are
native targets by default.

00:04:00.530 --> 00:04:04.280
So let's talk a little bit about some
of the target types that Xcode supports.

00:04:04.280 --> 00:04:08.470
So first of all of course the native
Xcode targets we talked about.

00:04:08.580 --> 00:04:12.240
We support applications, frameworks,
libraries, plugins and the developer

00:04:12.590 --> 00:04:15.130
preview and we'll be extending
this to all the different kinds

00:04:15.140 --> 00:04:17.960
of things you want to build,
the kernel extensions, etc.

00:04:17.960 --> 00:04:21.450
The project builder targets,
you would still leave it as a project

00:04:21.450 --> 00:04:25.230
builder target if it's one of the
few things we don't support yet,

00:04:25.230 --> 00:04:28.930
which are the kernel extensions,
some of the Java types and of

00:04:29.270 --> 00:04:33.030
course you could leave your
applications and frameworks as the

00:04:33.030 --> 00:04:35.880
old project builder targets as well,
but then you wouldn't take

00:04:35.920 --> 00:04:38.140
advantage of the new features,
so you'd want to upgrade.

00:04:40.800 --> 00:04:44.880
And it's important to note we actually
support external targets as well.

00:04:44.880 --> 00:04:47.560
So you could have any external
build system you want.

00:04:47.650 --> 00:04:49.500
In fact, it might not even be
a build system at all.

00:04:49.500 --> 00:04:52.480
Maybe it's just a shell script you
want to invoke as part of your build.

00:04:52.640 --> 00:04:56.810
And it fits seamlessly into Xcode
so you can have a native application

00:04:56.810 --> 00:05:00.920
target that depends on some
custom shell script that you have.

00:05:02.390 --> 00:05:07.700
Another important aspect of an Xcode
project are the build settings.

00:05:07.700 --> 00:05:10.370
So the targets define
what you want to build.

00:05:10.490 --> 00:05:12.980
And the settings are the little
knobs and switches on that.

00:05:12.980 --> 00:05:14.670
It defines how you want it built.

00:05:14.740 --> 00:05:16.660
So they control the inner
workings of a build.

00:05:16.800 --> 00:05:18.230
Do you want debug symbols or not?

00:05:18.380 --> 00:05:19.600
Do you want optimization or not?

00:05:19.610 --> 00:05:21.340
Where do you want the output file to go?

00:05:21.340 --> 00:05:22.340
That kind of thing.

00:05:23.400 --> 00:05:25.200
They're usually set on
a particular target.

00:05:25.200 --> 00:05:27.140
You've probably seen this in
some of the earlier demos.

00:05:27.140 --> 00:05:30.600
We're going to get into more detail
about that in a demo in this session.

00:05:30.600 --> 00:05:34.200
And you can also, though,
set them on a build style,

00:05:34.200 --> 00:05:36.220
what we call a build style.

00:05:36.220 --> 00:05:38.750
So you can, for example,
set up a build style for debug

00:05:38.830 --> 00:05:40.420
and another one for release.

00:05:40.420 --> 00:05:43.510
You only need to have a single
target for whatever you're building,

00:05:43.590 --> 00:05:44.880
say it's an application.

00:05:44.880 --> 00:05:48.400
But you can apply the different
styles to build different variations.

00:05:48.430 --> 00:05:51.760
So the styles encode the things
that are different between

00:05:51.760 --> 00:05:53.100
a debug and a release build.

00:05:53.200 --> 00:05:57.970
such as optimization level,
debug symbols, those kinds of things.

00:05:58.990 --> 00:06:03.460
And the settings in the build styles
do override the ones at a lower level.

00:06:03.460 --> 00:06:05.970
We'll see a diagram here
of how this fits together.

00:06:06.060 --> 00:06:08.240
But the basic point is,
if you have a build style that

00:06:08.280 --> 00:06:12.580
says it turns on optimization,
then that's going to override

00:06:12.590 --> 00:06:14.000
what your target says.

00:06:15.300 --> 00:06:18.140
They're also passed in the
environment for external shell

00:06:18.210 --> 00:06:20.800
scripts and for external tools.

00:06:20.800 --> 00:06:25.350
And this means that you can set
options in your project and have

00:06:25.350 --> 00:06:29.810
those be passed down to whatever build
system or tool that you're using,

00:06:29.810 --> 00:06:33.430
whether it's Make,
whether it's a custom Perl script,

00:06:33.430 --> 00:06:34.880
things like that.

00:06:35.740 --> 00:06:37.490
So how do these fit together?

00:06:37.490 --> 00:06:40.810
Well, as I mentioned,
there's an ordering of them.

00:06:40.810 --> 00:06:44.430
And this is just kind of give you
a flavor for some of the depth

00:06:44.430 --> 00:06:46.170
here of what you can set up.

00:06:46.170 --> 00:06:49.810
The environment variables,
such as path and user and those

00:06:49.810 --> 00:06:53.350
kinds of Unix-y things are
available at the lowest level,

00:06:53.350 --> 00:06:54.660
just like for Make.

00:06:54.660 --> 00:06:57.400
Above that, there are built-in settings.

00:06:57.400 --> 00:07:01.190
These are the defaults,
things like where the default system

00:07:01.190 --> 00:07:05.740
locations for where frameworks go,
the default optimization

00:07:05.740 --> 00:07:08.750
level for the compiler,
that kind of thing.

00:07:09.070 --> 00:07:10.400
The target settings are above that.

00:07:10.480 --> 00:07:14.680
This is what you see in the inspector,
as we'll see in a demo in a little bit.

00:07:14.710 --> 00:07:16.850
And the build styles override that.

00:07:16.990 --> 00:07:21.650
So this is where you would say,
turn on or off debug symbols

00:07:21.650 --> 00:07:23.820
for a particular build.

00:07:23.960 --> 00:07:25.760
The command line settings go above this.

00:07:25.980 --> 00:07:30.070
These are not used in the IDE,
but as you may know,

00:07:30.080 --> 00:07:32.490
and as we'll see later,
there is an external command line

00:07:32.570 --> 00:07:36.580
tool that lets you build Xcode
projects as part of a nightly build

00:07:36.580 --> 00:07:39.000
or as part of an automated process.

00:07:39.000 --> 00:07:41.270
So if you pass anything
on the command line,

00:07:41.280 --> 00:07:43.770
just like with Make,
it will override whatever

00:07:43.770 --> 00:07:45.000
your project said.

00:07:46.820 --> 00:07:50.300
So build styles, what are they used for?

00:07:50.300 --> 00:07:53.350
Well, it's important to note that they
dynamically override the target settings.

00:07:53.380 --> 00:07:55.550
They don't actually go
and modify the target.

00:07:55.630 --> 00:07:58.960
So this is something that
you pick in a pop-up menu,

00:07:58.960 --> 00:08:02.010
or you can choose it as
the active build style.

00:08:02.150 --> 00:08:05.710
And it's just to avoid
having to duplicate targets,

00:08:05.710 --> 00:08:10.080
because then you get into a
situation where when you add a file,

00:08:10.080 --> 00:08:12.100
you're going to have to remember to add
it to both your debug and release target,

00:08:12.100 --> 00:08:12.100
et cetera.

00:08:12.570 --> 00:08:15.140
Some examples of this
are the obvious ones,

00:08:15.240 --> 00:08:17.000
turn debug symbols on or off.

00:08:17.060 --> 00:08:19.710
But also, you may want to enable
or disable zero link.

00:08:19.790 --> 00:08:21.730
Zero link is a feature that
saves you a lot of time,

00:08:22.100 --> 00:08:26.660
but it also defers some potential
link errors to the actual runtime.

00:08:27.020 --> 00:08:30.650
So if you know zero link works,
it actually works by doing the linking

00:08:30.730 --> 00:08:32.220
as you load in each object file.

00:08:32.220 --> 00:08:34.060
You actually run the object files.

00:08:34.120 --> 00:08:36.420
And when that happens,
if you have an undefined symbol,

00:08:36.420 --> 00:08:38.280
you may not find out until later.

00:08:38.360 --> 00:08:42.140
So you may want to turn that
off just to validate a build,

00:08:42.140 --> 00:08:45.220
and then turn it back on to
get the speed benefit again.

00:08:45.270 --> 00:08:48.960
Other things you can do are to enable
or disable alternate algorithms.

00:08:48.990 --> 00:08:51.200
Or if you have a demo
version of your app,

00:08:51.240 --> 00:08:54.300
you may want to build a demo
version with a save disabled,

00:08:54.300 --> 00:08:57.050
and then you build the full
version also without having

00:08:57.050 --> 00:08:58.470
to have two separate targets.

00:09:00.750 --> 00:09:05.400
One of the new features in Xcode
compared to the older IDs that

00:09:05.400 --> 00:09:09.910
Apple has had are to user configurable
build rules in a graphical way.

00:09:09.940 --> 00:09:15.130
So you can actually define how the
build system maps particular file types

00:09:15.250 --> 00:09:18.320
to compilers in a very detailed way.

00:09:18.320 --> 00:09:22.000
And the way this works is
that there is a list of rules,

00:09:22.000 --> 00:09:24.000
as we'll see in a little bit later.

00:09:24.000 --> 00:09:28.030
And the first one that matches
is the one that gets applied.

00:09:28.160 --> 00:09:31.640
So you can define both specific
and general rules and have

00:09:31.920 --> 00:09:34.380
the specific ones first,
and then in that way you can

00:09:34.380 --> 00:09:38.750
control very fine grain level how
your source files get processed.

00:09:40.120 --> 00:09:43.100
In each rule can match
two different things.

00:09:43.430 --> 00:09:45.110
It can either be a
category of file types.

00:09:45.140 --> 00:09:47.600
Xcode has a built-in notion
of various file types,

00:09:47.600 --> 00:09:51.500
Java source files, C++ files, res files,
nib files, let's say.

00:09:51.500 --> 00:09:55.420
But you can also match any
particular shell pattern,

00:09:55.420 --> 00:10:00.090
star.hc in this case matches
anything with an extension of h or c.

00:10:00.230 --> 00:10:02.970
You can enter anything you want there.

00:10:03.850 --> 00:10:08.140
And in Xcode, you also use the rules to
select the compiler version.

00:10:08.240 --> 00:10:12.230
So it's very easy to just go in and
find the entries for the C files.

00:10:12.370 --> 00:10:17.170
You can pick between GCC 3.3 or GCC 3.1,
let's say.

00:10:18.810 --> 00:10:22.560
So now you've moved
your project into Xcode,

00:10:22.620 --> 00:10:28.490
whether it's from project builder or by
adding sources that you had separately.

00:10:28.880 --> 00:10:31.740
Let's talk a little bit about
optimizing the build performance.

00:10:31.770 --> 00:10:35.470
Now, Xcode does have a fast,
powerful build system,

00:10:35.470 --> 00:10:38.640
and it provides a lot of the
speed benefits automatically.

00:10:38.690 --> 00:10:41.670
So there's no dependency
on external builds.

00:10:41.670 --> 00:10:44.930
We don't generate some text
file that then has to get

00:10:44.930 --> 00:10:46.610
parsed by an external tool.

00:10:46.610 --> 00:10:50.470
Instead, Xcode just keeps track of the
text changes that you're making

00:10:50.470 --> 00:10:53.270
to your source code or whether
you add files to your project,

00:10:53.270 --> 00:10:56.070
and it automatically knows
what you need to rebuild.

00:10:56.120 --> 00:10:58.970
So by the time you go to
actually start a build,

00:10:58.970 --> 00:11:01.420
it's already done a lot of the work.

00:11:01.530 --> 00:11:03.140
It's tightly integrated
with the user interface,

00:11:03.140 --> 00:11:06.470
so you see check marks for
files that are out of date,

00:11:06.500 --> 00:11:07.510
et cetera.

00:11:08.920 --> 00:11:12.980
However, there are still opportunities
for you to tune your project.

00:11:13.090 --> 00:11:17.480
Xcode will automatically do things
like predictive compilation,

00:11:17.540 --> 00:11:21.410
but you can also set up a precompiled
prefix header for your project

00:11:21.410 --> 00:11:22.650
that can save a lot of time.

00:11:22.650 --> 00:11:27.370
That's something that Xcode doesn't
really do for you because it depends

00:11:27.370 --> 00:11:29.090
on how your sources are laid out.

00:11:29.120 --> 00:11:30.580
You'll want to define that yourself.

00:11:31.530 --> 00:11:34.140
You can also turn on parallel
and distributed builds.

00:11:34.360 --> 00:11:38.650
Parallel builds are on by default,
but distributed builds,

00:11:38.650 --> 00:11:42.910
you can access that in an easy way,
but you need to enable that

00:11:43.020 --> 00:11:46.000
because we don't want to start
sending your source code everywhere

00:11:46.270 --> 00:11:47.370
just without you knowing it.

00:11:47.440 --> 00:11:50.540
Zero link is something that
is also enabled by default.

00:11:50.540 --> 00:11:53.280
Of course,
you don't want that on for deployment,

00:11:53.280 --> 00:11:55.700
so there's fine-grained
control over that,

00:11:55.700 --> 00:11:57.780
and the same for fix and continue.

00:11:59.930 --> 00:12:02.260
So a word about precompiled headers.

00:12:02.260 --> 00:12:06.350
As you may have heard in previous talks,
GCC 3.3 has a new precompiled

00:12:06.350 --> 00:12:08.930
header mechanism called PCH.

00:12:09.020 --> 00:12:12.750
And this is a lot better than
the older ones because it

00:12:12.750 --> 00:12:18.290
supports C++ first and foremost,
and it's also better implementation.

00:12:18.920 --> 00:12:21.580
These are easy to set up using
Xcode's target inspector.

00:12:21.590 --> 00:12:25.840
What you do is you define a
prefix header for the common API.

00:12:25.840 --> 00:12:29.360
A lot of Carbon applications,
for example, would start by including

00:12:29.360 --> 00:12:32.240
the Carbon.h header.

00:12:32.240 --> 00:12:35.760
Similarly, Cocoa apps may start
by including Cocoa.h.

00:12:35.860 --> 00:12:39.660
So if you put this in a prefix header,
precompile the prefix header,

00:12:39.660 --> 00:12:42.030
you can get really fast turnaround.

00:12:43.330 --> 00:12:46.210
Keep in mind the prefix header gets
included for all files in the target.

00:12:46.380 --> 00:12:49.890
So if you have C++ and C files,
it needs to be compatible with both.

00:12:50.290 --> 00:12:52.600
This is easy to do with the #ifdef.

00:12:52.600 --> 00:12:54.760
We'll see that in the demo.

00:12:54.760 --> 00:12:58.920
And also keep in mind to only put
headers that change relatively

00:12:58.920 --> 00:13:02.340
infrequently into the PCH because,
of course, if they change,

00:13:02.340 --> 00:13:05.850
then the precompiled header
will need to be recompiled.

00:13:06.160 --> 00:13:08.920
Now, Xcode knows about all the
dependencies and the inclusions,

00:13:09.010 --> 00:13:12.170
so it will automatically recompile
the prefix header for you,

00:13:12.170 --> 00:13:13.930
but that still takes extra time.

00:13:13.930 --> 00:13:16.330
So you wouldn't want to put anything
in there that changes a lot.

00:13:19.310 --> 00:13:22.480
Distributed builds is another new
feature that we're really excited about.

00:13:22.480 --> 00:13:26.570
Xcode can take advantage of
multiple processors in your machine,

00:13:26.570 --> 00:13:28.980
of course,
but your neighbor in the cubicle next

00:13:28.980 --> 00:13:32.690
to you has that G5 sitting there,
and he's surfing the web, and yeah,

00:13:32.690 --> 00:13:34.960
you really want to
compile on that machine,

00:13:34.960 --> 00:13:35.840
actually.

00:13:35.920 --> 00:13:39.000
So what you can do is you
can take advantage of,

00:13:39.060 --> 00:13:42.640
in effect,
instead of a two-processor system,

00:13:42.640 --> 00:13:44.700
you can have an end-processor system,
right,

00:13:44.700 --> 00:13:47.940
where end is the sum of all the CPUs
and all the different machines that

00:13:47.960 --> 00:13:49.770
you choose for distributed builds.

00:13:49.820 --> 00:13:52.840
So it can be distributed
to other machines,

00:13:52.840 --> 00:13:54.570
and there's two modes.

00:13:54.630 --> 00:13:57.230
There's what we call sort
of the free love mode,

00:13:57.310 --> 00:13:59.840
which is where it uses
rendezvous to just see,

00:13:59.840 --> 00:14:02.670
oh, is there anybody out there who
has said that they want to be

00:14:02.670 --> 00:14:04.180
a distributed build server?

00:14:04.180 --> 00:14:05.820
And if so, okay, well, we'll send it.

00:14:05.920 --> 00:14:06.700
We'll send them our files, right?

00:14:06.700 --> 00:14:09.870
But for a more controlled environment,
you may want to just

00:14:09.870 --> 00:14:12.090
specify a list of servers,
for example,

00:14:12.090 --> 00:14:15.070
the ones that are known to be
in your team's department in

00:14:15.070 --> 00:14:17.020
a lab somewhere or something.

00:14:18.930 --> 00:14:22.830
And a note about this is it does
require GCC 3.3 and Xcode targets.

00:14:22.890 --> 00:14:27.600
So here's another reason to upgrade
to upgrade an imported project

00:14:27.600 --> 00:14:30.310
builder target to be an Xcode target.

00:14:32.010 --> 00:14:34.460
Zero Link is another feature
designed to save you time.

00:14:34.460 --> 00:14:39.980
We found that link time is a
significant part of the turnaround time.

00:14:40.040 --> 00:14:43.060
And not so much for a full build,
but when you do the

00:14:43.060 --> 00:14:45.960
edit debug build cycle,
you spend a lot of time watching

00:14:46.020 --> 00:14:47.660
it say linking this and that.

00:14:47.780 --> 00:14:51.960
So Zero Link takes advantage of the
fact that typically when you make edits,

00:14:51.960 --> 00:14:54.980
you edit, let's say you have 100 files,
you edit a couple of them,

00:14:55.060 --> 00:14:56.490
and then you want to link again.

00:14:56.610 --> 00:14:59.020
Well, then it has to read all
those files back in,

00:14:59.190 --> 00:15:00.840
generate the binary, et cetera.

00:15:00.840 --> 00:15:04.830
So what we've rather do is just
leave those other 98 files alone,

00:15:04.920 --> 00:15:09.220
just load them off of the disk when
the application starts running.

00:15:09.220 --> 00:15:13.080
So again, it eliminates the link
step by running directly.

00:15:13.080 --> 00:15:16.600
And this is on by default in
the development build style.

00:15:16.690 --> 00:15:19.770
So while you're doing
day-to-day development,

00:15:19.790 --> 00:15:22.600
you get Zero Link by
default for a native target.

00:15:22.710 --> 00:15:26.310
The deployment build, of course,
you get a real binary because you don't

00:15:26.310 --> 00:15:28.470
want to actually ship your object files.

00:15:30.050 --> 00:15:33.620
With Fix and Continue,
this is another feature

00:15:33.620 --> 00:15:35.370
that's mostly automatic.

00:15:35.460 --> 00:15:37.480
It lets you fix things
while you're debugging.

00:15:37.530 --> 00:15:40.680
And as we've seen in some
of the previous demos,

00:15:40.740 --> 00:15:43.040
you don't even have to
stop at a breakpoint.

00:15:43.090 --> 00:15:46.840
And for simple logic errors,
this can be a real time saver.

00:15:46.900 --> 00:15:48.240
It's enabled by default.

00:15:48.240 --> 00:15:50.340
You can turn this one
off too if you want.

00:15:50.340 --> 00:15:53.600
There's no real reason to turn it off,
but we want to give you lots

00:15:53.600 --> 00:15:55.250
of control over these things.

00:15:55.250 --> 00:15:58.040
And with that nifty search
field now in the inspector,

00:15:58.040 --> 00:15:59.050
there's no real reason not to.

00:16:00.110 --> 00:16:02.500
This is great for localized changes.

00:16:02.500 --> 00:16:05.440
You don't want to change
things that have global effect,

00:16:05.440 --> 00:16:08.640
like the size of a struct,
but logic errors, off by one errors,

00:16:08.760 --> 00:16:11.060
that kind of thing works great.

00:16:11.100 --> 00:16:14.480
So I'm going to ask Scott Tooker
to come up on stage and

00:16:14.480 --> 00:16:15.800
demo some of these things.

00:16:20.800 --> 00:16:24.570
What I'm going to go through today is,
we've already gone through

00:16:24.760 --> 00:16:26.990
this in previous sessions,
but we want to take another pass

00:16:26.990 --> 00:16:29.790
through the target settings and
give you kind of a deeper feel

00:16:29.920 --> 00:16:33.030
for how to set up your target,
both just the settings you want

00:16:33.030 --> 00:16:35.600
to set and also some tips and
tricks for the precompiled headers,

00:16:35.640 --> 00:16:37.040
how to set that up properly.

00:16:37.040 --> 00:16:43.960
We'll also look a little bit at the
build styles and at build feedback,

00:16:43.960 --> 00:16:47.030
a little bit more in depth on that.

00:16:47.030 --> 00:16:47.030
So let me bring up my project.

00:16:47.690 --> 00:16:49.740
So the first thing I want to do
is just point out that the way

00:16:49.750 --> 00:16:52.400
it works is that we just bring
up the inspector on the target,

00:16:52.400 --> 00:16:54.380
and there are four
parts to this inspector.

00:16:54.380 --> 00:16:58.750
There's this general tab where you have
your name of the target and the product,

00:16:58.950 --> 00:17:01.750
and notice that the name of the target
can be different than the product,

00:17:01.750 --> 00:17:03.580
and also the target dependencies.

00:17:03.580 --> 00:17:05.460
This target doesn't
have any at this point.

00:17:05.460 --> 00:17:08.540
There's the build tab,
which I'll get back to

00:17:08.540 --> 00:17:12.080
later in just a bit,
and this is kind of the meat.

00:17:12.080 --> 00:17:13.500
This is where all the settings go.

00:17:13.500 --> 00:17:16.920
There's also the rules that
was talked about earlier.

00:17:17.060 --> 00:17:19.390
This is where you can set
for a given type of file,

00:17:19.390 --> 00:17:21.180
you know, what do you want to use.

00:17:21.260 --> 00:17:24.480
And as pointed out,
you can also create your own,

00:17:24.480 --> 00:17:27.100
and you can reorder them how you like.

00:17:27.120 --> 00:17:29.130
And then finally there's the properties.

00:17:29.140 --> 00:17:32.500
So for those applications that are,
for those targets that produce bundles

00:17:32.590 --> 00:17:35.190
like applications and frameworks,
here's where you can set stuff that

00:17:35.190 --> 00:17:39.160
would normally go in your info key list,
like your bundle identifier, an icon,

00:17:39.160 --> 00:17:41.960
or document types in the
case of an application.

00:17:43.490 --> 00:17:46.120
And just note that we also do support,
for example,

00:17:46.140 --> 00:17:50.180
opening up the Info.plist as a
file so you can directly edit it.

00:17:50.420 --> 00:17:52.200
But let me jump back here to build.

00:17:52.310 --> 00:17:54.600
And as I said,
this is the meat of the target inspector.

00:17:54.600 --> 00:17:55.950
This is where all your settings are.

00:17:55.960 --> 00:17:57.890
So you'll notice here we're
looking at the common settings.

00:17:57.930 --> 00:18:01.830
These are settings we
expect you to change often.

00:18:01.830 --> 00:18:05.130
There are things like, okay,
I want to enable C++ exceptions,

00:18:05.130 --> 00:18:07.200
or I want,
maybe I have a style of library

00:18:07.200 --> 00:18:08.790
or my header search paths.

00:18:08.810 --> 00:18:10.760
But there's much more than this.

00:18:10.760 --> 00:18:12.260
Let me just open this up.

00:18:12.320 --> 00:18:14.360
We actually have several groups here.

00:18:14.360 --> 00:18:16.940
Many are static,
but there's actually one dynamic

00:18:16.940 --> 00:18:18.800
group that I'll get to in a second.

00:18:18.800 --> 00:18:22.610
So you'll notice here we have kind
of our standard build settings.

00:18:22.610 --> 00:18:26.280
These are settings that aren't
bound to a given compiler

00:18:26.280 --> 00:18:27.790
like GCC or a tool like Res.

00:18:27.850 --> 00:18:31.230
They may apply to multiple tools,
or they may just be something

00:18:31.460 --> 00:18:33.330
that's specific to Xcode itself.

00:18:33.330 --> 00:18:38.340
We also have GCC settings,
and we have some resource

00:18:38.340 --> 00:18:39.370
manager settings.

00:18:39.370 --> 00:18:42.490
And then for these groups,
we also provide some subdivisions.

00:18:42.500 --> 00:18:44.960
And as you can see,
we also show the subdivisions

00:18:44.960 --> 00:18:47.680
in some cases by different
icons next to the warnings,

00:18:47.680 --> 00:18:48.870
next to the settings.

00:18:50.330 --> 00:18:53.610
Let's talk a little bit more
about the actual UI itself.

00:18:53.620 --> 00:18:56.680
So let me go back to the common settings.

00:18:56.680 --> 00:19:00.070
And you'll notice here what we provide.

00:19:00.070 --> 00:19:03.550
If I select one of these guys,
we actually provide descriptions.

00:19:03.550 --> 00:19:07.470
Because one thing we noticed when
we looked at environments is that,

00:19:07.470 --> 00:19:09.170
especially when dealing
with things like GCC,

00:19:09.170 --> 00:19:11.720
but also other environments,
sometimes the settings

00:19:11.820 --> 00:19:13.440
can be very cryptic.

00:19:13.440 --> 00:19:17.460
And you as a developer may not
know or really need to know

00:19:17.460 --> 00:19:19.040
what all these things mean.

00:19:19.040 --> 00:19:21.000
And so we wanted to provide
descriptions to make it easy for you

00:19:21.000 --> 00:19:24.060
to get a little bit of background on,
OK, if I check this on,

00:19:24.060 --> 00:19:26.680
what is it going to do to my code?

00:19:27.310 --> 00:19:30.520
Also, as you can see,
especially if I go to, for example,

00:19:30.520 --> 00:19:33.400
the GCC settings,
there are quite a number of them.

00:19:33.400 --> 00:19:35.290
And so we wanted to provide a
quick way that you could get

00:19:35.380 --> 00:19:37.590
to just the settings you want,
even if you didn't know

00:19:37.590 --> 00:19:38.900
exactly what it was called.

00:19:38.970 --> 00:19:42.170
So, for example,
if I want to find out about, let's say,

00:19:42.170 --> 00:19:44.610
prefix files, I can say prefix.

00:19:44.680 --> 00:19:45.560
Now, it's interesting.

00:19:45.560 --> 00:19:48.320
You'll notice here, okay,
this has prefix, this has prefix,

00:19:48.340 --> 00:19:50.810
but effective C++ violations,
what's going on there?

00:19:51.040 --> 00:19:54.530
Well, if I click on it,
and if you go through here,

00:19:54.530 --> 00:19:57.700
what you'll find out is it's
actually referencing the

00:19:57.720 --> 00:19:59.980
prefix in the description.

00:20:00.060 --> 00:20:02.680
So, this isn't the best example,
but another example is, for example,

00:20:02.680 --> 00:20:07.510
if I wanted to do something with type ID,
which has to do with RTTI.

00:20:10.190 --> 00:20:12.340
It actually picks it up right here.

00:20:12.450 --> 00:20:14.950
So this way you don't have to
know exactly what it's called,

00:20:15.020 --> 00:20:17.690
you just have to kind of
know what you're looking for.

00:20:17.780 --> 00:20:20.260
So we hope that this will make it a
lot--we believe this will make it a

00:20:20.260 --> 00:20:23.460
lot easier for people when they need
to set those types of target settings.

00:20:26.530 --> 00:20:28.820
The one last thing I want to talk
about was this current settings.

00:20:28.840 --> 00:20:31.220
You'll notice that it has the
same kind of icon as some of

00:20:31.220 --> 00:20:34.490
our smart groups over here have,
because it's actually a smart group.

00:20:34.520 --> 00:20:38.590
What the current settings
contains-- let me get rid of that.

00:20:39.210 --> 00:20:41.300
What you see is all those settings
that you've set on your target that

00:20:41.300 --> 00:20:43.200
are different from the defaults.

00:20:43.200 --> 00:20:46.000
So it's kind of like a very
convenient filter because if you

00:20:46.000 --> 00:20:49.200
went to go back and look at common
settings or the GCC settings,

00:20:49.200 --> 00:20:50.130
you'd see a bunch of things.

00:20:50.250 --> 00:20:53.130
But some of these may be things you've
never touched and never want to touch.

00:20:53.260 --> 00:20:59.050
These are the actual settings that
you have changed from the defaults.

00:20:59.050 --> 00:21:03.190
So it gives you a quick look to see,
okay, what's different about my

00:21:03.190 --> 00:21:03.190
target from what a default
stock target would give me.

00:21:04.130 --> 00:21:06.240
So at this point,
I'm going to close this.

00:21:06.240 --> 00:21:08.270
And I want to talk a little
bit about build styles,

00:21:08.270 --> 00:21:10.380
which was talked about earlier.

00:21:10.380 --> 00:21:13.090
One of the problems we're trying
to solve with build styles is

00:21:13.130 --> 00:21:17.460
that you want to be able to just
override one thing in your target.

00:21:17.500 --> 00:21:20.370
And we've seen some environments
where you'll have to have three

00:21:20.370 --> 00:21:23.050
different targets that all
build the same exact thing,

00:21:23.050 --> 00:21:25.430
except maybe they have a
different optimization style.

00:21:25.530 --> 00:21:28.260
So what we've implemented
are these build styles.

00:21:28.280 --> 00:21:30.900
And we have two by
default in every project.

00:21:31.050 --> 00:21:34.180
One is the development style,
and one is the deployment style.

00:21:34.240 --> 00:21:37.240
And so you can see here it's the
same UI as the target editor.

00:21:37.310 --> 00:21:40.410
And I'm not going to go into that,
but one small thing I wanted to

00:21:40.410 --> 00:21:43.750
mention was sometimes you want
to add your own custom flag build

00:21:43.760 --> 00:21:44.960
settings for whatever reason.

00:21:44.960 --> 00:21:46.650
You may need to reference
them in a script,

00:21:46.650 --> 00:21:47.340
for example.

00:21:47.420 --> 00:21:50.300
And this is very easily done by just
clicking this little plus button.

00:21:50.300 --> 00:21:56.380
I can just type, you know,
my build setting.

00:21:56.440 --> 00:21:58.650
And then you can put in the value.

00:22:00.910 --> 00:22:02.640
And just as easily,
if you want to get rid of something,

00:22:02.640 --> 00:22:04.960
you just go down here
and hit the minus button.

00:22:04.960 --> 00:22:06.490
It goes away.

00:22:07.480 --> 00:22:11.100
And then one final thing is in
this project inspector where

00:22:11.100 --> 00:22:14.180
we have the build styles,
we also allow you to indicate for a given

00:22:14.290 --> 00:22:19.210
project you may want to build it into a
separate location like we're doing here.

00:22:19.380 --> 00:22:22.880
This provides some cleanliness,
but also it can leverage

00:22:23.010 --> 00:22:24.250
our build system.

00:22:24.350 --> 00:22:26.820
If you build a lot of projects
into a common location,

00:22:26.820 --> 00:22:33.420
we can actually do some stuff
to use those things together.

00:22:33.430 --> 00:22:35.620
So let me close that.

00:22:37.010 --> 00:22:40.760
So now let's talk just a
second about the prefix file.

00:22:40.760 --> 00:22:43.800
So it was mentioned earlier you
can create these precompiled

00:22:43.840 --> 00:22:44.960
prefix header files.

00:22:45.170 --> 00:22:47.360
Well,
the way this works is if I go to the

00:22:47.360 --> 00:22:49.540
build-- let me search for prefix.

00:22:50.190 --> 00:22:51.100
We have two settings.

00:22:51.100 --> 00:22:51.900
One is the prefix header.

00:22:51.900 --> 00:22:54.560
And you'll notice here it's qt._prefix.h.

00:22:54.560 --> 00:22:57.410
And we just check on the
precompile prefix header.

00:22:57.430 --> 00:23:00.460
And to show you what a common
prefix header looks like,

00:23:00.460 --> 00:23:02.380
let's go over here.

00:23:05.170 --> 00:23:07.330
This is my Qt prefix.h.

00:23:07.330 --> 00:23:10.220
You'll notice that this is fairly simple.

00:23:10.220 --> 00:23:13.690
Remember that because your prefix is
implicitly included before every file,

00:23:13.690 --> 00:23:16.460
you do need to be careful because,
for example,

00:23:16.490 --> 00:23:20.760
these are all C++ files that are being
-- these are all headers with C++

00:23:20.760 --> 00:23:22.450
that are being implicitly included.

00:23:22.600 --> 00:23:24.540
But if I was to include this, say,
from a C file,

00:23:24.540 --> 00:23:26.670
I don't want these headers to
be implicitly included because

00:23:26.680 --> 00:23:27.720
it could cause problems.

00:23:27.810 --> 00:23:33.520
So remember to use these guards here,
this ifdef, C++, ifdefc.

00:23:33.520 --> 00:23:35.800
But it does provide a lot of
flexibility because you can then have

00:23:35.800 --> 00:23:38.940
different sets of headers that get
included for different types of files.

00:23:43.260 --> 00:23:44.400
Now finally, let's go ahead.

00:23:44.400 --> 00:23:48.660
I'm going to build and run
this to just talk a little

00:23:48.660 --> 00:23:50.110
bit about our build feedback.

00:23:50.140 --> 00:23:50.920
Well, yeah.

00:23:51.100 --> 00:23:53.310
Well, one,
our single file builds are really fast.

00:23:53.320 --> 00:23:57.580
Two, you saw there for just a second
it said the build failed.

00:23:57.580 --> 00:24:01.260
Well, one thing I can do is we have
this detailed build window

00:24:01.260 --> 00:24:03.450
where I can go and I can say,
"Oh, look.

00:24:03.450 --> 00:24:06.370
I had errors while
compiling this file here.

00:24:06.370 --> 00:24:09.430
I have two warnings and
I have a series of errors."

00:24:09.490 --> 00:24:11.360
And that's one place I can go.

00:24:11.360 --> 00:24:14.490
But there's actually places that are
even more common you can look at.

00:24:14.490 --> 00:24:17.930
We actually have this errors and warnings
smart group that if I click it pops

00:24:17.930 --> 00:24:21.950
up with a window that at the top has
a list of all the errors and warnings.

00:24:21.960 --> 00:24:24.370
And then even just with the
keyboard I can go through this

00:24:24.390 --> 00:24:27.520
list and it'll jump me around to
the various errors and warnings.

00:24:27.520 --> 00:24:30.030
And if I want this in a separate window,
all I need to do is double

00:24:30.030 --> 00:24:31.510
click the errors and warnings.

00:24:31.510 --> 00:24:32.260
And there you go.

00:24:32.260 --> 00:24:33.440
There's a separate window.

00:24:33.440 --> 00:24:35.460
I can just track it over there.

00:24:35.460 --> 00:24:38.320
And then finally, in a given file,
let me go to, for example,

00:24:38.380 --> 00:24:41.310
this warning right here.

00:24:48.930 --> 00:24:52.040
You'll notice right here we have
the warnings and the errors in line.

00:24:52.040 --> 00:24:54.470
And if you actually click on them,
we'll show you in the status bar, okay,

00:24:54.470 --> 00:24:55.800
this is what the warning said.

00:24:55.800 --> 00:25:01.070
So in this case,
they're relatively easy to fix.

00:25:02.850 --> 00:25:06.100
Turns out I forgot a semicolon
and mislabeled something.

00:25:06.210 --> 00:25:09.790
And then you can just go on your way.

00:25:09.790 --> 00:25:14.570
Back to you, Anders.

00:25:14.570 --> 00:25:14.570
ANDRES BORUCH: OK.

00:25:14.570 --> 00:25:14.570
Thanks, Scott.

00:25:20.600 --> 00:25:23.860
All right,
so that was just showing you where to

00:25:23.860 --> 00:25:28.400
actually set some of these flags that
we talked about in the slides earlier.

00:25:28.590 --> 00:25:30.040
So I'm going to switch
gears a little bit,

00:25:30.150 --> 00:25:32.360
talk about building for
multiple OS releases.

00:25:32.380 --> 00:25:37.100
So you now have the nice
Panther Preview CD in your bag.

00:25:37.140 --> 00:25:39.680
Well,
you also have the shipping Jaguar OS,

00:25:40.140 --> 00:25:42.860
and you may want to deploy for 10.1 also.

00:25:42.860 --> 00:25:48.560
So Xcode lets you build
for multiple OS releases,

00:25:48.560 --> 00:25:51.780
but still be booted off of one release.

00:25:51.780 --> 00:25:55.150
This also saves you time, of course,
because you don't have to set

00:25:55.150 --> 00:25:58.260
up multiple partitions and
install on multiple partitions,

00:25:58.260 --> 00:26:00.860
and then rerun.

00:26:00.940 --> 00:26:05.340
So a typical example is you might want
to run the Jaguar version of Xcode,

00:26:05.430 --> 00:26:08.160
but then you actually
use the Panther APIs,

00:26:08.290 --> 00:26:10.290
Panther Preview APIs.

00:26:10.570 --> 00:26:15.340
Each target can individually specify
the minimum and the maximum OS.

00:26:15.340 --> 00:26:19.140
And the minimum version of the
OS is the minimum that you require

00:26:19.140 --> 00:26:21.410
your customers to have to run it.

00:26:21.500 --> 00:26:26.090
So features on that version
will be assumed to be available.

00:26:26.190 --> 00:26:30.300
Now, the maximum version specifies
the version for which you want

00:26:30.300 --> 00:26:32.490
to take advantage of features.

00:26:32.550 --> 00:26:36.200
So let's say your minimum is Jaguar,
your maximum is Panther.

00:26:36.350 --> 00:26:38.350
You want to be able to take
advantage of Panther features,

00:26:38.460 --> 00:26:41.520
but you want to do so in a fail-safe way.

00:26:41.520 --> 00:26:45.050
So if the feature is not available,
you just don't call it.

00:26:45.130 --> 00:26:48.220
So, and the Xcode Developer Preview
supports 10.1.5.

00:26:48.220 --> 00:26:52.960
It has SDKs for 10.1.5, 10.2.6,
and for the Panther Preview.

00:26:53.110 --> 00:27:00.730
And this is the developer
CD for both Jaguar and Panther.

00:27:01.890 --> 00:27:05.220
The APIs for each OS release
are packaged in an SDK.

00:27:05.340 --> 00:27:07.360
So what does one of these SDKs contain?

00:27:07.450 --> 00:27:11.380
Well, it's a folder that just has
the headers and stub libraries

00:27:11.380 --> 00:27:13.860
for that version of the OS.

00:27:13.860 --> 00:27:17.130
So you actually get the same
headers as you would on an

00:27:17.130 --> 00:27:19.520
install with developer packages.

00:27:20.490 --> 00:27:23.840
SDKs can be added independently
and removed independently.

00:27:23.840 --> 00:27:27.180
They can be rather large since they
contain all the headers and the stub

00:27:27.180 --> 00:27:29.390
libraries for a particular version.

00:27:29.400 --> 00:27:32.530
So you can add them after the
fact or you can remove them if

00:27:32.620 --> 00:27:36.070
you decide that you don't need,
for example, 10.1.

00:27:36.990 --> 00:27:41.000
And one of the things that happens
when you set the minimum and maximum

00:27:41.210 --> 00:27:44.980
OS version you want to target
is that special macros are set.

00:27:44.980 --> 00:27:48.020
These are documented in more
detail in the help pages,

00:27:48.020 --> 00:27:51.960
but you can then use the
macros in your code to check

00:27:52.240 --> 00:27:56.180
which functions are available,
which functionality.

00:27:56.180 --> 00:28:00.370
You can use them at runtime to check
whether a particular function pointer

00:28:00.370 --> 00:28:02.460
is nil and then just not call that.

00:28:02.500 --> 00:28:06.400
So this way you can take
advantage of new features and

00:28:06.520 --> 00:28:08.890
still support older releases.

00:28:09.420 --> 00:28:13.830
Another thing Xcode has is what's
called source tree support.

00:28:13.950 --> 00:28:19.410
You may have external sources such
as Power Plant or the QT frameworks

00:28:19.970 --> 00:28:24.170
or other large source bases that
are not part of your project,

00:28:24.190 --> 00:28:28.220
but they're installed someplace
on your machine that someplace may

00:28:28.240 --> 00:28:30.240
be different for each developer.

00:28:30.420 --> 00:28:35.100
So what each developer can do is to
set up just a single source tree to

00:28:35.100 --> 00:28:38.950
point to a place on disk and say,
okay, here's where my QT sources live,

00:28:38.960 --> 00:28:43.320
here's where my Power Plant sources live,
and then the project can just reference

00:28:43.320 --> 00:28:45.400
that and access them that way.

00:28:45.420 --> 00:28:48.940
The source tree can refer to
the source base using either

00:28:48.940 --> 00:28:50.980
relative or absolute paths.

00:28:50.980 --> 00:28:55.090
So you can nest projects inside
of folders that group the

00:28:55.090 --> 00:28:57.550
source trees and the projects.

00:28:57.640 --> 00:29:00.320
Or you could put the source base.

00:29:00.430 --> 00:29:01.650
an absolute place on disk.

00:29:04.420 --> 00:29:07.710
This feature is used by the
Code Warrior importer when it

00:29:07.710 --> 00:29:11.200
imports a project that uses,
for example, Power Plant.

00:29:11.200 --> 00:29:14.560
It will actually find Power Plant on your
disk and set up a source tree to that.

00:29:14.600 --> 00:29:19.310
So, you don't have to copy the sources
in or carry those along or anything.

00:29:20.980 --> 00:29:24.390
So we talked a little bit about
build and about how to configure

00:29:24.390 --> 00:29:27.610
your project to take advantage of
some of the speed improvements there,

00:29:27.610 --> 00:29:31.600
such as setting up a prefix header,
precompiled prefix header.

00:29:31.650 --> 00:29:34.340
We talked a little bit
about the OS support.

00:29:34.360 --> 00:29:36.810
We also have some workflow and
automation features that you might

00:29:36.810 --> 00:29:40.600
not be aware of and that you probably
haven't seen in any demos so far.

00:29:40.640 --> 00:29:43.060
So some of the stuff we've
shown so far has been talked

00:29:43.060 --> 00:29:46.100
about in previous sessions,
but the second half here

00:29:46.100 --> 00:29:51.380
are some kind of pearls that
haven't been talked about yet.

00:29:51.460 --> 00:29:54.230
Source code management,
we've been mentioned a little

00:29:54.230 --> 00:29:56.340
bit in previous sessions.

00:29:56.340 --> 00:30:01.590
Xcode is tightly integrated
with the SCM support.

00:30:01.930 --> 00:30:04.700
So we have built-in support
for CVS and Perforce.

00:30:04.700 --> 00:30:07.320
And it's not just a menu that
you pull down and you can

00:30:07.350 --> 00:30:09.290
access all the features there.

00:30:09.290 --> 00:30:12.530
We actually show the information
about the SCM state in

00:30:12.530 --> 00:30:14.370
line along with the files.

00:30:14.370 --> 00:30:16.250
It's a lot more integrated.

00:30:16.710 --> 00:30:19.650
And we support the day-to-day
operations such as adding,

00:30:19.650 --> 00:30:23.480
removing files, changing files,
updating files, that kind of stuff.

00:30:23.570 --> 00:30:24.440
You can also compare.

00:30:24.440 --> 00:30:25.440
You can look at the history.

00:30:25.440 --> 00:30:29.300
You can open the inspector on a
particular file and you can see

00:30:29.490 --> 00:30:31.980
the source code management history.

00:30:32.080 --> 00:30:37.050
You can see who checked in, what changes,
and when.

00:30:37.050 --> 00:30:40.980
And you can actually select two
revisions and compare them graphically

00:30:40.980 --> 00:30:40.980
in a tool called File Merge.

00:30:42.380 --> 00:30:44.900
Some of the other things we
leave to external repository

00:30:44.900 --> 00:30:48.060
management systems are creating new
repository and things like that.

00:30:49.720 --> 00:30:52.980
We also have very good
documentation access.

00:30:53.170 --> 00:30:55.880
That's also part of
productivity and speed,

00:30:55.880 --> 00:30:58.440
is getting quick access
to your documentation.

00:30:58.440 --> 00:31:01.830
And you look at this function with
five arguments and you need the

00:31:01.830 --> 00:31:03.760
details of that really quickly.

00:31:03.780 --> 00:31:07.280
We have API look up,
which searches as you type.

00:31:07.280 --> 00:31:11.570
You may have seen in previous
demos and probably see soon again

00:31:11.570 --> 00:31:16.580
maybe how we can quickly narrow
down a large list of symbols of

00:31:16.620 --> 00:31:19.900
documentation pages for the APIs.

00:31:19.900 --> 00:31:22.890
Mac OS X, as you know,
has a very rich set of APIs.

00:31:22.970 --> 00:31:27.800
In fact, there are multiple sets of APIs,
Cocoa, Carbon, et cetera.

00:31:27.800 --> 00:31:31.660
So you can focus on any one
of those or more than one,

00:31:31.930 --> 00:31:36.260
or you can search through them all and
quickly look for what you want to find.

00:31:36.280 --> 00:31:40.800
The full text search is better for things
like the conceptual documentation where

00:31:40.810 --> 00:31:44.560
you may have a phrase or a concept,
in mind, and you may just try out a

00:31:44.560 --> 00:31:47.630
couple of phrases until you
get the hits that you want.

00:31:49.740 --> 00:31:51.940
So what's available in this area?

00:31:52.070 --> 00:31:54.700
First of all,
there's help for Xcode itself.

00:31:54.700 --> 00:31:58.420
That's available from the Help menu,
as we'll show in a minute.

00:31:58.460 --> 00:32:01.580
We also have access to the
full documentation for Carbon,

00:32:01.580 --> 00:32:04.780
Cocoa, I/O Kit, et cetera,
all the reference documentation.

00:32:04.820 --> 00:32:08.460
If you need information about a
specific method or function or class,

00:32:08.460 --> 00:32:11.280
it's just a couple of mouse clicks away.

00:32:11.350 --> 00:32:14.770
Sun's Java documentation
is also available.

00:32:14.900 --> 00:32:16.800
The Mac OS X man pages are available.

00:32:16.870 --> 00:32:19.300
We're based on BSD,
and all those man pages are

00:32:19.300 --> 00:32:21.090
available right there in Xcode.

00:32:24.680 --> 00:32:28.560
Another aspect is
scripting and automation.

00:32:28.690 --> 00:32:33.850
So you access the documentation and
you can certainly do that through,

00:32:33.910 --> 00:32:35.830
let's say, man on the command line.

00:32:35.830 --> 00:32:38.760
You could do that through the
built-in documentation support.

00:32:38.760 --> 00:32:43.110
You could also use scripts to set up
custom queries or that kind of thing.

00:32:43.570 --> 00:32:46.430
There are several levels
of automation here.

00:32:46.430 --> 00:32:48.420
Xcode itself is scriptable.

00:32:48.420 --> 00:32:50.420
Project Builder was not.

00:32:50.420 --> 00:32:51.940
That was the previous IDE.

00:32:51.940 --> 00:32:54.600
Xcode is actually scriptable
from the ground up.

00:32:54.740 --> 00:32:58.460
There is a command line build
tool also so that you can use

00:32:58.750 --> 00:33:00.930
that in your nightly builds.

00:33:00.950 --> 00:33:03.840
Let's say if you have a batch
build that occurs every night that

00:33:03.930 --> 00:33:07.310
pulls 15 projects together and
builds them with special options,

00:33:07.310 --> 00:33:08.350
you could do that.

00:33:08.400 --> 00:33:12.200
The command line build tool is
actually linked against the same

00:33:12.200 --> 00:33:13.400
framework that the Xcode is.

00:33:13.400 --> 00:33:15.630
It's called Xcode IDE users so
it has exactly the same code

00:33:15.670 --> 00:33:17.040
paths for building and all that.

00:33:17.040 --> 00:33:18.960
It has access to the entire build system.

00:33:18.960 --> 00:33:23.810
There is a user scripts menu which is,
this was an MPW feature that was

00:33:23.940 --> 00:33:26.090
requested and it's been added.

00:33:26.200 --> 00:33:30.110
You can add custom menu items
tied to your own scripts.

00:33:30.300 --> 00:33:33.540
And we also have MPW inspired
worksheet functionality.

00:33:33.540 --> 00:33:36.140
So we'll talk a little
bit more about these.

00:33:36.140 --> 00:33:40.590
The scriptability, as I mentioned before,
you can actually have access to Xcode's

00:33:40.590 --> 00:33:42.720
object model through Apple script.

00:33:43.480 --> 00:33:46.310
You can change target
settings and multiple targets,

00:33:46.310 --> 00:33:49.750
add files to targets, add to projects,
those kinds of things.

00:33:49.840 --> 00:33:53.810
You can also start and stop builds
using Apple script if you want.

00:33:55.010 --> 00:33:57.150
There are still, I should say,
there are still a couple of

00:33:57.150 --> 00:33:58.580
things that are not supported.

00:33:58.580 --> 00:34:02.440
Some of the details, for example,
not every property of every object,

00:34:02.580 --> 00:34:06.260
but we're working on adding that
because we want Apple's scriptability

00:34:06.330 --> 00:34:09.970
to be a very full-featured way of
accessing Xcode's functionality.

00:34:11.630 --> 00:34:14.840
Another way to automate things is
to build from the command line.

00:34:14.880 --> 00:34:17.840
So you may have a build that
starts at 2:00 AM at night.

00:34:17.880 --> 00:34:20.140
There's a tool called pbbuild.

00:34:20.140 --> 00:34:25.870
This is kind of for historical reasons to
provide compatibility with some scripts.

00:34:25.950 --> 00:34:29.680
It provides access to the IDE,
and as I mentioned,

00:34:29.680 --> 00:34:34.360
it uses the exact same build
system as the IDE does.

00:34:34.460 --> 00:34:38.350
So you have access to
all the same features.

00:34:38.500 --> 00:36:26.700
[Transcript missing]

00:36:29.300 --> 00:36:31.810
This ties in a little bit to the
worksheet functionality we have.

00:36:31.880 --> 00:36:34.700
This is another NPW-inspired feature.

00:36:34.810 --> 00:36:37.860
As Ted mentioned in the
overview for Developer Tools,

00:36:37.860 --> 00:36:40.070
there's a great legacy
of Developer Tools here.

00:36:40.170 --> 00:36:45.390
We wanted to make sure we brought
forward some of the pearls that people

00:36:45.390 --> 00:36:48.270
have really liked in previous IDEs.

00:36:48.590 --> 00:36:51.300
So Xcode has NPW style
worksheet functionality.

00:36:51.300 --> 00:36:54.710
And what this means is
you have a text file.

00:36:55.060 --> 00:36:59.440
You can select one or more commands
and just execute them as if you

00:36:59.440 --> 00:37:02.320
typed them in a terminal or a shell.

00:37:02.380 --> 00:37:06.850
And one of the nice ways to use this
is that you can save frequently used

00:37:06.970 --> 00:37:12.720
snippets of shell code or even Perl
code or Apple script just in a text file

00:37:12.720 --> 00:37:15.200
and then run it whenever you need to.

00:37:15.270 --> 00:37:19.270
It also is nice because unlike terminal,
it preserves the history independently.

00:37:19.270 --> 00:37:21.910
So you can come back to a
command and its output that

00:37:21.910 --> 00:37:23.800
you ran maybe half a year ago,
right?

00:37:23.800 --> 00:37:26.990
And you can see what the output was
and you can compare things that way.

00:37:27.000 --> 00:37:28.320
We'll see some of this in the demo.

00:37:31.090 --> 00:37:34.370
And again, the results here are pasted
back into the text buffer.

00:37:34.480 --> 00:37:38.290
So it's an iterative
worksheet experience.

00:37:38.600 --> 00:37:43.840
So to help demo some of these features,
I'm going to ask Matt Morse

00:37:43.850 --> 00:37:48.290
to come up on stage.

00:37:50.550 --> 00:37:53.600
Well, as Anders has pointed out,
there's a wealth of

00:37:53.600 --> 00:37:55.530
documentation on the system.

00:37:55.680 --> 00:38:00.910
There are over 500 books of various
scope from small topics all the way

00:38:00.920 --> 00:38:04.280
up to the human interface guidelines.

00:38:04.370 --> 00:38:09.890
And besides that,
there's over 75,000 bits of

00:38:09.970 --> 00:38:14.940
reference documentation for
the APIs that are available in

00:38:14.940 --> 00:38:17.200
the libraries on your system.

00:38:17.320 --> 00:38:19.840
So this is a great
wealth of documentation.

00:38:19.950 --> 00:38:25.720
The challenge is to get to the piece
of documentation that you need quickly.

00:38:26.590 --> 00:38:31.620
So I'd like to show you some of
the ways you can do that in Xcode.

00:38:31.620 --> 00:38:34.260
Xcode has a documentation window.

00:38:34.260 --> 00:38:38.360
Well, first there's help available
through Xcode help.

00:38:38.360 --> 00:38:43.770
And the documentation window is
available also from the help menu.

00:38:44.170 --> 00:38:47.350
So you bring up the documentation window.

00:38:47.530 --> 00:38:51.810
It has a look very much like the project
window with your groups over here.

00:38:51.910 --> 00:38:56.860
In this case, the groups are sections
of the documentation,

00:38:56.860 --> 00:39:03.550
the entire installed library
and subsections that focus

00:39:03.560 --> 00:39:05.260
on particular technologies.

00:39:05.260 --> 00:39:10.040
As you see, as I'm selecting the
different subsections,

00:39:10.040 --> 00:39:14.040
the technology home page
appears in the content area.

00:39:14.090 --> 00:39:20.530
And from there you can burrow in
and find the documentation you want

00:39:20.610 --> 00:39:25.470
if you want to browse in that way.

00:39:25.910 --> 00:39:32.580
A navigation note that I think
you should know is you can command

00:39:32.870 --> 00:39:37.840
click any link to bring up the
documentation in a separate window,

00:39:37.840 --> 00:39:44.610
and you can option click to
bring it up in your browser.

00:39:47.610 --> 00:39:56.020
OK, so that's one way to navigate through
the documentation if you're browsing.

00:39:56.300 --> 00:40:00.700
Up here, you've seen this area updating
as I was clicking as well.

00:40:00.750 --> 00:40:07.690
This is the results of a
search for the API symbols that

00:40:07.810 --> 00:40:19.870
So, to focus on a particular symbol,
just start typing its name and you

00:40:19.880 --> 00:40:25.880
quickly go from the entire universe of
75,000 available symbols down to the

00:40:25.880 --> 00:40:29.700
few that match what you're looking for.

00:40:29.830 --> 00:40:33.190
And in this case,
let's say you were looking

00:40:33.190 --> 00:40:34.960
for the groups method.

00:40:35.620 --> 00:40:40.940
and clicking that brings
it up in the content area.

00:40:40.980 --> 00:40:46.180
Another navigation note is take
a look at the symbol pop-up.

00:40:46.280 --> 00:40:47.900
It's just like in the code editor.

00:40:47.940 --> 00:40:54.790
You can easily get around the
documentation for a class using this.

00:40:56.160 --> 00:40:58.930
OK.

00:40:59.000 --> 00:41:03.170
I think I should mention this was
shown in the overview session as well,

00:41:03.170 --> 00:41:07.470
but you can turn off
any of these columns,

00:41:07.500 --> 00:41:11.390
titles that you don't find useful.

00:41:13.090 --> 00:41:16.880
and customized it for the way
you like to get around it.

00:41:16.960 --> 00:41:20.180
OK, so that's the API search mechanism.

00:41:20.180 --> 00:41:25.020
You can also do a full text search,
as you could in Project Builder,

00:41:25.050 --> 00:41:31.870
on any of the sections here that
you have selected in your library.

00:41:33.090 --> 00:41:37.850
So that's the documentation window,
but often the quickest way

00:41:38.000 --> 00:41:42.800
to the answer you want is
directly from your code editor.

00:41:42.870 --> 00:41:45.990
So let's take a look at a project.

00:41:48.980 --> 00:41:54.740
Bringing up some source code here.

00:41:54.750 --> 00:41:56.740
Getting down to something interesting.

00:41:56.960 --> 00:42:00.200
You can,
if you want to look up the documentation

00:42:00.200 --> 00:42:05.790
for a specific symbol or class method,
just option click it.

00:42:05.850 --> 00:42:09.090
And if there are multiple destinations,
as you see,

00:42:09.160 --> 00:42:11.800
you get a menu to select from.

00:42:11.800 --> 00:42:15.720
If you wanted to see the
documentation for NSString,

00:42:15.770 --> 00:42:17.690
just pick that.

00:42:18.410 --> 00:42:22.930
Likewise,
you can control click to bring up

00:42:23.060 --> 00:42:30.330
the full text search feature to
search for anything that you want.

00:42:31.520 --> 00:42:36.750
OK, so the code editors nicely link
to the documentation access.

00:42:36.810 --> 00:42:41.290
Another way you can get to documentation
is through the class browser.

00:42:42.270 --> 00:42:44.640
If you're doing
object-oriented programming,

00:42:44.640 --> 00:42:48.160
you'll probably find the
class browser very useful.

00:42:48.210 --> 00:42:52.470
You can get to the header documentation,
or the header declarations,

00:42:52.550 --> 00:42:57.360
but also the blue books give you
access to the documentation for the

00:42:57.360 --> 00:43:02.320
selected class or method of that class.

00:43:02.470 --> 00:43:05.110
So make use of that.

00:43:06.390 --> 00:43:11.790
Another way you can get around is,
or another type of documentation

00:43:11.790 --> 00:43:16.540
you can access is the man pages,
the Unix manual pages,

00:43:16.600 --> 00:43:22.040
either by name or searching.

00:43:22.040 --> 00:43:22.040
So for example,

00:43:26.410 --> 00:43:28.640
For example, there it is.

00:43:28.850 --> 00:43:31.850
And the man pages are all linked,
hyperlinked,

00:43:31.940 --> 00:43:36.180
so you can go to related man pages.

00:43:36.180 --> 00:43:38.770
This one I didn't see.

00:43:40.110 --> 00:43:42.230
The link for.

00:43:42.280 --> 00:43:46.090
Okay, so that's a good way to access,
those are a number of good ways

00:43:46.100 --> 00:43:49.890
to access the local documentation,
the documentation that's

00:43:49.910 --> 00:43:51.410
installed on your system.

00:43:51.490 --> 00:43:54.340
If you want to extend your
search a little further,

00:43:54.350 --> 00:44:00.040
the user scripts menu that
Anders mentioned can help you there.

00:44:00.170 --> 00:44:07.040
For example, select,
make a selection in your code editor and

00:44:08.980 --> 00:44:17.280
You can then search the developer
website at Apple for that selection.

00:44:22.510 --> 00:44:27.640
send it out to the internet
and do a Google search.

00:44:27.640 --> 00:44:32.480
OK, so those are some of the fast ways to
get around the documentation and find

00:44:32.480 --> 00:44:35.070
answers to the questions you have.

00:44:35.080 --> 00:44:39.420
Let me take a little closer
look at the user scripts menu.

00:44:40.460 --> 00:44:46.900
User scripts are scripts that
extend the command set of Xcode

00:44:46.900 --> 00:44:51.910
with commands that you decide,
you create.

00:44:52.050 --> 00:44:57.520
Xcode comes with a number of
pre-built commands and here they are.

00:44:57.530 --> 00:45:00.720
Let me show you how some of these work.

00:45:00.780 --> 00:45:06.320
A very useful one I find is this
uncomment comment selection and you

00:45:06.320 --> 00:45:10.820
see as it was pointed out earlier
that there's a key equivalent for it.

00:45:10.940 --> 00:45:17.000
So if you need to take some piece
of your code out of service,

00:45:17.110 --> 00:45:20.390
you can do it as easily as that.

00:45:27.800 --> 00:45:33.300
OK, another comment type that
I find very useful is this--

00:45:33.890 --> 00:45:36.720
comment with a prefix
with exclamation points.

00:45:36.720 --> 00:45:41.600
If you need to come
back to something later,

00:45:41.600 --> 00:45:41.600
you can--

00:45:42.130 --> 00:45:45.510
Mark it in that way,
and with a consistent prefix you can

00:45:45.510 --> 00:45:50.180
easily get back to that sort of comment.

00:45:53.330 --> 00:45:56.230
OK, if you're doing
object-oriented programming,

00:45:56.240 --> 00:45:59.230
you might find that you're
doing a lot of typing,

00:45:59.230 --> 00:46:02.790
creating accessor methods
for your instance variables.

00:46:03.110 --> 00:46:06.190
Here, too, user scripts can help you out.

00:46:06.560 --> 00:46:10.420
For example,
let's make an accessor method

00:46:10.450 --> 00:46:13.500
for that instance variable.

00:46:16.680 --> 00:46:21.540
So I've put the declaration
on the clipboard,

00:46:21.540 --> 00:46:24.210
and now I can just paste it in.

00:46:24.440 --> 00:46:27.960
And likewise,
there's a similar command for

00:46:27.990 --> 00:46:30.180
pasting in the definition.

00:46:31.390 --> 00:46:34.450
Okay, there's sort commands,
and one last thing I'd like to show

00:46:34.450 --> 00:46:39.300
you with the user scripts menu is
the suite of HeaderDoc commands.

00:46:39.300 --> 00:46:45.960
These commands let you put structured
comments in your headers that later can

00:46:45.960 --> 00:46:49.130
be generated into HTML documentation.

00:46:49.130 --> 00:46:54.920
It's much like Java doc, but it's for C,
C++, and Objective C.

00:46:54.920 --> 00:46:57.120
So let's see how that works.

00:46:58.620 --> 00:47:03.680
For example,
let's say we want to document this class.

00:47:05.760 --> 00:47:11.400
We can insert a class template comment.

00:47:11.400 --> 00:47:13.590
Take the class name up there.

00:47:13.650 --> 00:47:18.140
And here's where you'd write
your abstract and description.

00:47:18.290 --> 00:47:22.790
And here's a method that we'll document.

00:47:22.820 --> 00:47:27.160
I don't know exactly what it does,
but we can at least put

00:47:27.160 --> 00:47:30.770
in a skeletal comment.

00:47:31.240 --> 00:47:35.740
And you see that in this case
the user script is smart enough

00:47:35.740 --> 00:47:40.590
to parse the declaration and
pull out the parameters here.

00:47:41.240 --> 00:47:48.200
Okay, if we save that and view
HeaderDoc for this header,

00:47:48.360 --> 00:47:55.330
Xcode will invoke the HeaderDoc tool,
generate the HTML, and create some

00:47:55.740 --> 00:47:59.490
documentation for our class.

00:48:04.380 --> 00:48:08.110
So I encourage you to give that a try.

00:48:08.240 --> 00:48:09.700
OK, so that's user scripts.

00:48:09.700 --> 00:48:14.620
The related feature of worksheets
I'd like to show right now.

00:48:14.670 --> 00:48:20.940
Worksheets are kind of a less formal
way of adding commands to Xcode.

00:48:20.960 --> 00:48:25.810
And as was pointed out,
it's a good way to keep a history

00:48:25.810 --> 00:48:31.440
of commands that you find useful,
that are difficult to retype,

00:48:31.440 --> 00:48:33.480
or easily forgotten.

00:48:33.620 --> 00:48:36.960
So here's just a simple command.

00:48:37.020 --> 00:48:37.990
Hit Control-R.

00:48:38.020 --> 00:48:42.490
Select it, hit Control-R,
and it's executed in that text buffer.

00:48:42.510 --> 00:48:44.550
And that's the output.

00:48:45.340 --> 00:48:50.570
So we just did a listing,
Unix listing of the root directory.

00:48:53.460 --> 00:48:58.050
This command is used to invoke
an application in a way to see if

00:48:58.050 --> 00:49:01.000
it's doing any redundant drawing.

00:49:01.070 --> 00:49:04.000
Those command line switches
are good to remember.

00:49:04.000 --> 00:49:07.560
One way to do it is to
leave it in your worksheet.

00:49:07.560 --> 00:49:09.800
Let's see what that looks like.

00:49:10.050 --> 00:49:15.790
I'm invoking TextEdit.

00:49:16.120 --> 00:49:20.830
with those special flags that show
where the drawing is happening.

00:49:20.840 --> 00:49:27.320
And this makes it easy to see if
any excess drawing is going on.

00:49:30.700 --> 00:49:33.940
Thank you.

00:49:33.940 --> 00:49:35.020
All right.

00:49:35.070 --> 00:49:40.440
This is a command that lets you
know what symbols you're importing

00:49:40.440 --> 00:49:41.860
from a particular library.

00:49:41.860 --> 00:49:46.460
In this case,
we're going to look at TextEdit

00:49:46.470 --> 00:49:49.600
and see what it's pulling
in from the Cocoa library.

00:49:49.750 --> 00:49:54.180
So Command-R, Control-R,
and there you have it.

00:49:56.080 --> 00:49:58.940
And I'd like to show you just one more.

00:49:58.940 --> 00:50:03.600
As we look through this list of commands,
you see some are in Perl,

00:50:03.600 --> 00:50:10.240
some are invoking Apple scripts,
some were Unix commands.

00:50:10.370 --> 00:50:16.380
Here's one that, as a genetic engineer,
you might want to use if you've

00:50:16.380 --> 00:50:20.760
misplaced a patch of DNA and
you need a little bit more.

00:50:21.530 --> 00:50:22.520
So there you go.

00:50:22.520 --> 00:50:28.540
Those are the features of worksheets,
user scripts, and documentation access.

00:50:28.540 --> 00:50:29.960
Thank you.

00:50:29.960 --> 00:50:31.570
MATT MORELL: Thanks, Matt.

00:50:35.010 --> 00:50:38.040
All right, so as you see,
you can really go to town and

00:50:38.040 --> 00:50:42.680
customize this and just pretty much
set up any kind of workflow you

00:50:42.680 --> 00:50:45.260
want and bind it to a key command.

00:50:45.970 --> 00:50:48.340
So I just want to wrap up some
of the things we talked about.

00:50:48.340 --> 00:50:51.170
We want to leave a fairly
long Q&A session here today,

00:50:51.170 --> 00:50:52.860
because this is a
fairly detailed session.

00:50:52.860 --> 00:50:57.780
Some of the things we touched on are
Xcode has a lot of productivity features,

00:50:57.850 --> 00:50:58.440
right?

00:50:58.570 --> 00:51:02.900
Some of them, we tried to make many of
them work automatically,

00:51:03.130 --> 00:51:05.060
and a lot of them work
pretty well automatically.

00:51:05.060 --> 00:51:08.270
We're still a developer preview,
so by GM we want to get them to

00:51:08.270 --> 00:51:10.200
work a lot better automatically.

00:51:10.260 --> 00:51:14.780
There's still room for improvement
in terms of your fine tuning.

00:51:15.110 --> 00:51:18.420
Things like fix and continue,
we can work on making that even better.

00:51:18.500 --> 00:51:20.630
Other things you really
need to customize,

00:51:20.630 --> 00:51:22.230
like the scriptability here.

00:51:22.250 --> 00:51:24.300
We provide you with a
lot of sample scripts.

00:51:24.400 --> 00:51:27.800
All those scripts under the user
menu come as sample scripts,

00:51:27.800 --> 00:51:31.500
but of course you can add
or modify any of them.

00:51:31.500 --> 00:51:35.810
This HeaderDoc knowledge, for example,
is not built into Xcode in any way.

00:51:35.820 --> 00:51:36.850
That's just in the script.

00:51:37.010 --> 00:51:38.660
So you could really
add whatever you want.

00:51:38.720 --> 00:51:40.220
Precomputing.

00:51:40.220 --> 00:51:41.120
We've got a lot of
different compiled headers.

00:51:41.240 --> 00:51:42.980
We talked a little bit
about how to set those up.

00:51:43.040 --> 00:51:45.660
There's a lot more
information in the help pages.

00:51:45.720 --> 00:51:49.690
Xcode gives you the power and the
flexibility here to really customize

00:51:49.690 --> 00:51:52.070
your workflow the way you want to.

00:51:52.370 --> 00:51:53.760
So how to learn more about this?

00:51:53.810 --> 00:51:56.730
Well, we're not going to ask you to go
out on the web and read about this,

00:51:56.820 --> 00:51:57.030
right?

00:51:57.030 --> 00:51:58.830
We have built-in help pages.

00:51:58.900 --> 00:52:02.150
So as we just saw,
you can use the documentation

00:52:02.150 --> 00:52:05.900
search features not just
for the API documentation,

00:52:05.900 --> 00:52:09.830
but also for help about
Xcode functionality itself.

00:52:10.120 --> 00:52:12.840
There are, of course,
the Inside Mac OS X books,

00:52:12.840 --> 00:52:16.650
especially the System Overview
book that talks more about some of

00:52:16.720 --> 00:52:18.690
the concepts that underlie this.

00:52:18.870 --> 00:52:22.840
The IDE, of course,
supports the platform initiatives,

00:52:22.840 --> 00:52:26.980
things like frameworks,
things like that kind of concept.

00:52:27.110 --> 00:52:32.980
And those IDE-independent things are
documented in the System Overview.

00:52:32.980 --> 00:52:37.560
Xcode knows how to build them,
but the best documentation

00:52:37.560 --> 00:52:38.990
is in the System Overview.

00:52:39.340 --> 00:52:42.960
Of course,
the developer connection tools pages,

00:52:42.960 --> 00:52:46.310
and the CVS documentation,
and the Perforce documentation

00:52:46.430 --> 00:52:48.640
are available on the web.

00:52:50.990 --> 00:52:52.870
Who to contact for more information?

00:52:53.160 --> 00:52:57.270
Guy Fugigiorgi,
Technology Manager for Development Tools.

00:52:57.270 --> 00:52:59.540
I'm actually going to invite
him up on the stage now for Q&A.

00:52:59.540 --> 00:53:03.400
And here are also some other URLs.

00:53:03.400 --> 00:53:08.260
There are a couple more sessions
you may want to check out.