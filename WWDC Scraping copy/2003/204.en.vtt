WEBVTT

00:00:27.320 --> 00:00:28.200
Good morning, everyone.

00:00:28.230 --> 00:00:31.540
I'm Werner Neubrand, and I'm one of the
image capture engineers.

00:00:31.540 --> 00:00:36.300
And today, we will talk about an
image capture update.

00:00:36.300 --> 00:00:39.930
So I will give you a brief
introduction to image capture,

00:00:39.930 --> 00:00:40.980
short overview.

00:00:40.980 --> 00:00:45.070
Then I will talk about how
you can use image capture

00:00:45.070 --> 00:00:47.900
from within your application.

00:00:48.000 --> 00:00:58.000
[Transcript missing]

00:00:58.100 --> 00:01:08.700
[Transcript missing]

00:01:09.420 --> 00:01:13.080
So, just looking at the
Image Capture Framework,

00:01:13.190 --> 00:01:16.680
it's a framework that was
introduced with Mac OS X,

00:01:16.680 --> 00:01:20.290
and it's dealing with
still image devices.

00:01:20.370 --> 00:01:25.620
So, any camera, or with Jaguar,
we started supporting scanners,

00:01:25.650 --> 00:01:28.690
are really covered by this.

00:01:29.330 --> 00:01:35.470
So the nice thing really is it's an
architecture that takes the device

00:01:35.550 --> 00:01:38.090
specifics from the application.

00:01:38.190 --> 00:01:42.200
So you write an application to
work with an image capture device,

00:01:42.220 --> 00:01:45.940
then you and your application does
not need to know about that device.

00:01:45.940 --> 00:01:50.640
There's no need to know a low-level
protocol to talk to a device.

00:01:50.640 --> 00:01:55.600
You just use a couple of the
actually very few image capture APIs.

00:01:58.990 --> 00:02:03.350
If we look at the framework,
then let's look at the components that

00:02:03.350 --> 00:02:06.320
we install by the framework first.

00:02:06.570 --> 00:02:09.280
I'm not really going
into too much detail,

00:02:09.280 --> 00:02:13.280
because we have so many plugins
and helper applications.

00:02:13.280 --> 00:02:17.240
Let's just focus on the main things.

00:02:17.240 --> 00:02:21.980
And one of the main things, of course,
is the component that talks to a device.

00:02:21.980 --> 00:02:23.230
We call it device module.

00:02:23.240 --> 00:02:29.500
It's actually a background application,
UILess, and it runs in your user space.

00:02:31.610 --> 00:02:37.250
This device module talks to a
specific device or a class of devices.

00:02:37.930 --> 00:02:41.240
And on the camera side,
we were actually very lucky,

00:02:41.250 --> 00:02:46.300
because we can just have a handful
of device modules to cover almost

00:02:46.840 --> 00:02:49.240
100% of the existing cameras.

00:02:49.240 --> 00:02:54.740
Now that is possible,
because a lot of cameras are adopting

00:02:54.740 --> 00:02:57.860
two really favored protocols.

00:02:57.860 --> 00:03:00.770
One is the PTP,
Picture Transfer Protocol,

00:03:00.770 --> 00:03:03.170
and the other one is Mass Storage.

00:03:03.180 --> 00:03:07.590
So you'll grab a camera and you will
see it as a mass storage volume.

00:03:07.900 --> 00:03:11.240
If you look at all the
devices that we support,

00:03:11.240 --> 00:03:15.000
you'll see that we have about
10 different camera drivers,

00:03:15.000 --> 00:03:18.100
where PTP and Mass Storage are
the most important ones.

00:03:18.100 --> 00:03:21.910
All the others are
really vendor-specific.

00:03:23.950 --> 00:03:27.190
The nice thing about these is really,
again,

00:03:27.190 --> 00:03:30.060
they cover a whole family of devices.

00:03:30.060 --> 00:03:33.390
So there's really no need
to have more than these 10,

00:03:33.390 --> 00:03:35.230
and we really cover a lot.

00:03:36.730 --> 00:03:38.920
Unfortunately, on the scanner side,
it's not that easy.

00:03:38.920 --> 00:03:42.680
You see, we have two modules listed.

00:03:42.680 --> 00:03:46.660
That's the twin bridge
and the type 1 scanner.

00:03:46.660 --> 00:03:49.760
That's for the Epson class scanners.

00:03:51.780 --> 00:03:54.420
"But we really want to add more.

00:03:54.500 --> 00:03:57.920
And hopefully we have a
couple of the developers here

00:03:57.990 --> 00:04:00.590
that can help us do that."

00:04:01.500 --> 00:04:04.840
So,
if you look at the device module again,

00:04:04.930 --> 00:04:10.100
what sits on top of it is
a background application.

00:04:10.520 --> 00:04:16.060
The Image Capture Extension that
deals with multiple modules,

00:04:16.100 --> 00:04:18.360
even at the same time.

00:04:18.370 --> 00:04:22.090
So you can have an application
using a scanner and a camera,

00:04:22.090 --> 00:04:25.560
more or less at the same time,
or multiple cameras.

00:04:26.520 --> 00:04:30.510
On top of that,
we have the client application.

00:04:32.360 --> 00:04:36.740
One client application you all know
that we ship with Mac OS X is iPhoto.

00:04:36.780 --> 00:04:40.680
The other one that we also ship
is the Image Capture application.

00:04:40.900 --> 00:04:47.000
And your application could be one of
those using the Image Capture Framework.

00:04:48.440 --> 00:04:52.340
Now these are just the main
three components for the entire

00:04:52.580 --> 00:04:55.010
image capture architecture.

00:04:55.510 --> 00:05:00.400
Now let's look at how we
handle this internally.

00:05:00.440 --> 00:05:05.400
So internally,
we have the notion of ICA objects.

00:05:05.400 --> 00:05:11.390
ICA objects are these things that are...

00:05:11.690 --> 00:05:16.590
"Specified by type and subtype,
so they describe the type of the

00:05:16.590 --> 00:05:20.000
object by OS types and subtypes.

00:05:20.000 --> 00:05:23.390
They may contain reference
to other objects.

00:05:23.430 --> 00:05:27.000
That allows you to build a hierarchy,
a tree.

00:05:27.330 --> 00:05:30.920
They may contain properties
and dictionaries."

00:05:31.840 --> 00:05:35.400
Properties,
that's where we have the real data.

00:05:35.400 --> 00:05:41.390
The real data was reduced with the
Panta introduction to actually adjust

00:05:41.530 --> 00:05:45.580
the thumbnails and the image or audio
data that could be on a camera device.

00:05:48.720 --> 00:05:52.430
With Jaguar, actually,
we were introducing dictionaries.

00:05:52.560 --> 00:05:54.480
That's actually a very convenient way.

00:05:54.480 --> 00:05:59.640
So we are assigning one
dictionary to one object,

00:05:59.710 --> 00:06:04.340
and that dictionary contains all
the metadata for that object.

00:06:04.790 --> 00:06:09.620
So the nice thing with that is we
can very easily give you a chance

00:06:10.150 --> 00:06:15.790
to get access to all EXIF data that
you may get from a camera image by

00:06:15.810 --> 00:06:21.590
just looking at that dictionary,
because we stuff all that

00:06:21.590 --> 00:06:21.590
EXIF data into that dictionary.

00:06:22.990 --> 00:06:27.640
Now, with these three building blocks,
we actually can create

00:06:27.640 --> 00:06:29.480
something like that.

00:06:29.490 --> 00:06:39.020
So we have an object sitting at the top,
and then going down we have two objects

00:06:39.020 --> 00:06:39.020
that are referred by the root object.

00:06:39.540 --> 00:06:45.920
They all have dictionaries,
and they all may have properties.

00:06:46.450 --> 00:06:53.490
So in the real world, we always start,
when we, for example, look at the camera,

00:06:53.490 --> 00:06:57.880
with the device list, the root object.

00:06:59.700 --> 00:07:58.400
[Transcript missing]

00:08:00.180 --> 00:08:03.760
In the real world,
we could connect a camera.

00:08:03.820 --> 00:08:07.340
That camera will have a dictionary.

00:08:07.460 --> 00:08:11.260
That dictionary actually contains
information about the device,

00:08:11.390 --> 00:08:15.860
but also about the objects,
the images on that device.

00:08:15.970 --> 00:08:21.420
And we have two properties:
a thumbnail and a name,

00:08:21.430 --> 00:08:25.370
although you could actually get the
name from the dictionary as well.

00:08:27.320 --> 00:08:29.660
And on that camera, we can have an image.

00:08:29.710 --> 00:08:31.440
Well, the image, again,
would have a dictionary,

00:08:31.440 --> 00:08:34.170
but for that image,
the dictionary would contain

00:08:34.390 --> 00:08:36.030
the excess information.

00:08:36.560 --> 00:08:39.840
The image would have a property.

00:08:39.950 --> 00:08:45.400
The property one would be
the thumbnail information.

00:08:45.400 --> 00:08:49.160
So you can get very easily get
access by just reading that property,

00:08:49.160 --> 00:08:53.050
get a thumbnail that you
can display in your UI,

00:08:53.240 --> 00:08:55.800
or even the actual image data.

00:08:55.800 --> 00:09:00.330
And of course,
you can have multiple images on that.

00:09:02.880 --> 00:09:09.190
So let's switch to demo four,
and I will show you.

00:09:09.950 --> 00:09:17.280
Just a small help application that
we are using to just indicate what

00:09:17.280 --> 00:09:20.870
kind of applications are running.

00:09:20.940 --> 00:09:24.210
So you see, we have the Image Capture
extension that I mentioned before,

00:09:24.210 --> 00:09:27.360
and then I have listed all
the different camera modules,

00:09:27.360 --> 00:09:30.080
and at the bottom I have the
Image Capture application.

00:09:30.200 --> 00:09:34.280
So let's see what happens
when I connect a camera.

00:09:37.120 --> 00:09:40.670
I connect the camera and
you will see immediately,

00:09:40.670 --> 00:09:45.840
this is a PDP camera, and it shows up,
PDP camera module gets launched,

00:09:45.920 --> 00:09:48.680
and the image capture
extension gets launched.

00:09:49.400 --> 00:09:51.460
Now, of course,
I could launch Image Capture

00:09:51.460 --> 00:09:53.940
and browse the camera content.

00:09:53.940 --> 00:09:57.100
I could say,
"I want to download this and this."

00:09:57.250 --> 00:10:00.320
But I will actually
launch another utility,

00:10:00.320 --> 00:10:02.420
the Image Capture Browser.

00:10:02.490 --> 00:10:07.750
Image Capture Browser is a small utility
that comes with the Image Capture SDK.

00:10:07.900 --> 00:10:47.400
[Transcript missing]

00:10:47.950 --> 00:10:51.500
Up here, I can actually browse,
go to the first directory.

00:10:51.500 --> 00:10:53.380
I have two directories on that device.

00:10:53.380 --> 00:10:58.770
I see that directory has a property,
that's the file name.

00:10:59.870 --> 00:11:08.500
"And I can go through that, I see, oh,
there's another, and so on.

00:11:08.500 --> 00:11:08.500
So,

00:11:09.190 --> 00:11:15.440
One nice thing is I can actually
go to this data dictionary.

00:11:15.500 --> 00:11:20.160
It shows you what I was showing before,
dynamically,

00:11:20.180 --> 00:11:24.390
what you have connected to your system.

00:11:25.760 --> 00:11:29.280
The data dictionary actually
is a flattened out structure.

00:11:29.390 --> 00:11:32.290
So it shows you at one level deep,

00:11:33.910 --> 00:11:36.940
The actual data that's on this device.

00:11:36.940 --> 00:11:41.300
So the Canon PowerShot S50 in
this case has these images.

00:11:41.360 --> 00:11:45.190
And these are actually the ICA objects.

00:11:47.410 --> 00:11:52.100
Now this is flattened out,
so we did parse the entire

00:11:52.880 --> 00:11:59.520
tree that's on this device,
and flattened it out into a single array.

00:12:00.420 --> 00:12:06.600
"It's for you to really give you really
quick access to all the data on that."

00:12:06.830 --> 00:12:10.460
If we look at the tree structure,
then actually you see, well,

00:12:10.460 --> 00:12:11.280
it's not that easy.

00:12:11.300 --> 00:12:15.140
It's really, if you would walk the
tree all by yourself,

00:12:15.140 --> 00:12:22.930
go to the root object, get the nth child,
and so on, and walk the tree,

00:12:22.930 --> 00:12:28.620
do that for all the dictionaries,
and you could get to the

00:12:28.630 --> 00:12:32.610
same eight images that we
have in the data dictionary,

00:12:32.610 --> 00:12:32.610
much easier to access.

00:12:32.930 --> 00:12:36.650
The advantage of the Tree Dictionary
is it would also give you

00:12:36.970 --> 00:12:38.540
non-image related files.

00:12:38.540 --> 00:12:42.670
So for example,
if a camera would contain a firmware

00:12:42.670 --> 00:12:46.890
update or whatever on that device,
on that CF card,

00:12:46.890 --> 00:12:49.370
then you would see it here.

00:12:51.820 --> 00:12:54.780
So this is Image Capture Browser,
is the utility that comes

00:12:54.860 --> 00:12:58.240
with the Image Capture SDK,
and whenever you work with

00:12:58.420 --> 00:13:02.480
image capture devices,
it might be very useful to just use that.

00:13:02.500 --> 00:13:06.740
Okay,
let's switch back to the presentation.

00:13:06.740 --> 00:13:08.010
Okay.

00:13:10.290 --> 00:13:14.890
Now, in the next section,
I will talk about what it takes for you,

00:13:14.890 --> 00:13:19.680
your application,
to get access and use Image Capture

00:13:19.740 --> 00:13:21.740
Framework and Image Capture devices.

00:13:23.410 --> 00:13:28.800
There are a couple of levels,
a couple of steps that you can...

00:13:28.960 --> 00:13:33.640
Do or not do to work with
the image capture devices?

00:13:33.650 --> 00:13:36.060
Well, the first one is a very simple one.

00:13:36.230 --> 00:13:41.010
With the Image Capture application,
we give you a way to set your

00:13:41.040 --> 00:13:44.390
application as an automatic task.

00:13:45.330 --> 00:13:46.780
It's very nice because it's very easy.

00:13:46.780 --> 00:13:50.420
All you have to do is the user
has to select your application,

00:13:50.610 --> 00:13:53.320
and then from within the
Image Capture application,

00:13:53.320 --> 00:13:56.450
you do a download,
and what happens is you get an open

00:13:56.450 --> 00:13:59.030
event for all the downloaded images.

00:13:59.030 --> 00:14:01.270
Couldn't be easier.

00:14:03.550 --> 00:14:06.450
Only disadvantage is,
it works only with the

00:14:06.450 --> 00:14:09.320
Image Capture application.

00:14:09.720 --> 00:14:16.480
"If you prefer another application
as a startup that gets launched

00:14:16.480 --> 00:14:21.050
when the camera is connected,
then this approach wouldn't work."

00:14:22.940 --> 00:14:26.880
The next one, to make it very simple,
actually is added with Panther,

00:14:27.010 --> 00:14:29.960
and that's the service.

00:14:30.360 --> 00:14:34.700
You probably know that all
Cocoa applications get that for free.

00:14:34.840 --> 00:14:41.960
So, under the application menu,
there is a menu item called Services.

00:14:42.200 --> 00:14:49.140
And this allows you, your application,
to use image capture devices directly.

00:14:50.570 --> 00:14:54.620
For Carbon applications,
you have to do a little bit.

00:14:54.640 --> 00:14:57.140
You have to implement
certain Apple events,

00:14:57.140 --> 00:15:01.370
and you find here a URL where
you get more information.

00:15:01.700 --> 00:15:04.950
You have to implement certain
Apple events so that your

00:15:04.950 --> 00:15:11.510
application will actually
take use of the service menu.

00:15:11.980 --> 00:15:15.070
Service menu is very simple
because a service can,

00:15:15.270 --> 00:15:21.940
on the paste board, basically say,
I deliver text or image data.

00:15:21.940 --> 00:15:26.440
And if your application would
allow the pasting in of images,

00:15:26.440 --> 00:15:30.000
then it automatically
supports the service.

00:15:34.190 --> 00:15:38.960
The next level, with Panther,
we are introducing a new way to,

00:15:38.970 --> 00:15:42.860
a simple way, to use a common UI.

00:15:43.200 --> 00:15:58.010
Common UI is something like that.

00:15:58.010 --> 00:15:58.010
So it's very similar to the
Image Capture application itself.

00:15:58.010 --> 00:15:58.010
In fact, it is the same thing.

00:15:58.010 --> 00:15:58.010
It's just a plug-in that gets loaded,
and we display that.

00:15:58.010 --> 00:15:58.010
We strip it down a little bit.

00:15:58.010 --> 00:15:58.010
For example, in this...

00:15:58.240 --> 00:16:03.940
The common UI, you currently cannot do
any delete or take picture.

00:16:03.940 --> 00:16:07.700
You cannot change the automatic
task or download folder,

00:16:07.700 --> 00:16:10.990
because there's no
download folder currently.

00:16:12.920 --> 00:16:15.640
And Common UI is used,
and we will talk about

00:16:15.720 --> 00:16:16.610
that in a little bit.

00:16:16.610 --> 00:16:19.720
Common UI is used with a single new API.

00:16:21.110 --> 00:16:24.100
"You just call this and the UI comes up.

00:16:24.120 --> 00:16:30.120
The user may choose the picture and hit
import and you have it in your app."

00:16:30.860 --> 00:16:35.600
And of course,
the old way to work with image capture

00:16:35.600 --> 00:16:38.470
is really you create your own UI.

00:16:39.320 --> 00:16:41.580
There are a couple of examples for that.

00:16:41.600 --> 00:16:43.120
Of course, iPhoto did that.

00:16:43.220 --> 00:16:46.980
Graphics Converter does that.

00:16:47.000 --> 00:16:50.250
And FileMaker, I guess,
they're using that.

00:16:52.150 --> 00:16:55.750
The advantage of your own custom UI is,
of course, you have full control.

00:16:55.760 --> 00:16:58.200
The disadvantage is you have to
implement more or less everything.

00:17:01.170 --> 00:17:07.770
There are just three really very
useful APIs for your common UI,

00:17:07.950 --> 00:17:14.910
and you should really make use of
those if you aren't doing already.

00:17:15.360 --> 00:17:19.110
We just showed you that before,
when you look at the

00:17:19.350 --> 00:17:23.900
object tree for a camera,
instead of walking the tree directly,

00:17:23.900 --> 00:17:28.690
you could and you should make use of
the dictionary that we provide for

00:17:28.700 --> 00:17:34.190
you with all the already pre-digested
information about the actual images.

00:17:34.240 --> 00:17:38.690
Let's have a quick look
at these three APIs.

00:17:38.690 --> 00:17:46.240
Get-ICADeviceList is the fastest and
only way to get the device list object

00:17:46.240 --> 00:17:50.190
that is at the root of everything.

00:17:50.270 --> 00:17:59.200
From there on, you can go to your
different images or devices.

00:18:00.150 --> 00:18:06.880
Copy Object Property Dictionary returns
the dictionary for a given object.

00:18:07.360 --> 00:18:11.830
So just get the device list,
get the device, the property dictionary

00:18:11.830 --> 00:18:14.840
for the device list,
and then you know what

00:18:14.850 --> 00:18:18.240
device is connected,
you know the ICA object

00:18:18.240 --> 00:18:22.190
for the connected devices,
and from that you get the dictionary

00:18:22.190 --> 00:18:24.360
and you have access to all the images.

00:18:26.950 --> 00:18:30.620
Here again, that's how the dictionary
looks like for a camera,

00:18:30.620 --> 00:18:32.640
or in this case, a card reader.

00:18:32.640 --> 00:18:36.600
You see, we, for example,
have the capabilities.

00:18:36.600 --> 00:18:40.030
This card reader allows
you to delete images,

00:18:40.140 --> 00:18:43.100
and it allows you to support the eject.

00:18:43.980 --> 00:18:48.390
So the Image Capture UI may
bring up an eject toolbar item,

00:18:48.390 --> 00:18:51.520
saying, well, eject this volume,
because it's mass storage.

00:18:51.520 --> 00:18:55.120
And below,
you see the data dictionary that

00:18:55.180 --> 00:19:01.860
is really an array of dictionaries,
one item, one dictionary for each image.

00:19:05.550 --> 00:19:10.160
So, it gets a little bit more complicated
if you just add more objects.

00:19:10.210 --> 00:19:14.920
Then again, it's very simple and easy and
straightforward to just use the

00:19:14.920 --> 00:19:17.530
data dictionary with all the images.

00:19:17.750 --> 00:19:21.200
You know exactly that
these are only images.

00:19:22.720 --> 00:19:27.300
On the download file, well,
it's a very simple API,

00:19:27.300 --> 00:19:31.990
because all it takes is the IC object,
and it takes a dictionary ref,

00:19:32.110 --> 00:19:35.590
where to download the image.

00:19:36.390 --> 00:19:40.040
And it actually does a little
bit post-processing for you.

00:19:40.060 --> 00:19:44.590
For example, it automatically embeds
a color sync profile.

00:19:44.600 --> 00:19:45.800
Very convenient.

00:19:45.800 --> 00:19:47.370
You don't have to do anything.

00:19:47.420 --> 00:19:48.400
It does that.

00:19:50.830 --> 00:19:56.150
However, if the image already has a
color sync profile embedded,

00:19:56.480 --> 00:20:04.580
some of the newer cameras do,
then of course we will

00:20:04.580 --> 00:20:04.580
not re-embed that profile,
we will not overwrite that.

00:20:05.460 --> 00:20:07.090
It allows you to adjust
the creation date.

00:20:07.230 --> 00:20:12.270
So when you download the image,
then we set the creation date,

00:20:12.270 --> 00:20:13.640
if you set that flag on.

00:20:13.670 --> 00:20:16.420
We set the creation date to
the exit information that we

00:20:16.420 --> 00:20:17.940
can extract out of the image.

00:20:17.940 --> 00:20:22.080
It creates a custom icon if you want.

00:20:22.320 --> 00:20:25.170
It can rotate the images.

00:20:29.020 --> 00:20:33.280
Okay, let me just do a short demo on the
different steps of integration.

00:20:33.280 --> 00:20:35.160
So if you switch to number four.

00:20:37.810 --> 00:20:42.120
So I have the PDP cameras still running,
and what I can do is I launch

00:20:42.120 --> 00:20:46.220
the Image Capture application,
and you see I could either

00:20:46.220 --> 00:20:51.450
download all or just download one,
and as...

00:20:51.940 --> 00:20:55.720
A post-processing automatic task,
I selected Preview.

00:20:55.720 --> 00:20:59.360
So I can show you how this
room looked like this morning

00:20:59.360 --> 00:21:01.080
when nobody was in here.

00:21:01.080 --> 00:21:02.840
I just do a download.

00:21:05.000 --> 00:21:08.360
The image gets downloaded
and preview should launch.

00:21:08.360 --> 00:21:10.980
And that's it.

00:21:11.020 --> 00:21:15.920
So, very easy for your application to get
involved with image capture devices,

00:21:15.920 --> 00:21:18.860
because it just gets launched
and gets an open event.

00:21:22.250 --> 00:21:28.000
So, let me show you the second
level of integration.

00:21:28.000 --> 00:21:30.940
I have a version of TextEdit here,
and under Services,

00:21:30.940 --> 00:21:33.930
you see Image Capture,
and I can select Import Image.

00:21:33.940 --> 00:21:38.510
It brings up a custom UI,
looks very similar to whatever we

00:21:39.010 --> 00:21:45.810
just saw before in the application,
and I can select...

00:21:47.000 --> 00:21:52.200
[Transcript missing]

00:21:52.660 --> 00:21:54.300
It should take a while.

00:21:54.340 --> 00:21:58.350
You see, it's even too big to
display in text edit.

00:21:58.350 --> 00:22:01.810
But here is the image.

00:22:05.470 --> 00:22:12.390
Another way to use the common UI that
you just saw as a service is really,

00:22:12.400 --> 00:22:13.700
you could modify TextEdit.

00:22:13.700 --> 00:22:16.970
Now that was easy to do because TextEdit
is really one of the sample apps that

00:22:17.040 --> 00:22:20.680
you get when you install Panther,
a sample app for the app kit.

00:22:20.690 --> 00:22:27.410
So I can very easily add an import image.

00:22:29.300 --> 00:22:33.320
"And as you see, well,
the input image doesn't do anything else,

00:22:33.400 --> 00:22:37.110
but using the common UI,
brings up the common UI,

00:22:37.180 --> 00:22:43.730
I can select an image and I can import
that and should be able to display that.

00:22:43.730 --> 00:22:48.620
It's a very large one.

00:22:48.620 --> 00:22:48.620
Okay, so."

00:22:51.950 --> 00:22:56.890
Okay, so that's one way of using
the Image Capture Framework.

00:22:56.900 --> 00:23:01.300
One other thing I can do is I can,

00:23:01.570 --> 00:23:05.140
I'm going to show you a
custom implementation,

00:23:05.140 --> 00:23:09.600
and we just created a very
quick and dirty Photoshop plugin

00:23:09.600 --> 00:23:11.540
that uses a custom UI.

00:23:11.680 --> 00:23:17.520
Custom UI based on the three
APIs that I was showing to you,

00:23:17.520 --> 00:23:21.510
and the Image Capture Custom UI plugin,
well, very simple.

00:23:21.620 --> 00:23:26.280
It just gets the camera icon,
the thumbnail.

00:23:26.360 --> 00:23:29.650
It gets the number of cameras,
so if we would have

00:23:29.680 --> 00:23:32.840
multiple devices connected,
it just prints that.

00:23:33.020 --> 00:23:38.220
And then it looks at the data
dictionary to get all the images.

00:23:39.370 --> 00:23:45.020
So I can select one and import that.

00:23:45.620 --> 00:23:51.800
And these images are large,
so it takes a while,

00:23:51.800 --> 00:23:51.800
but here's the image.

00:23:52.870 --> 00:23:59.390
23% and yeah, so we get the image very
quickly into any application.

00:24:06.090 --> 00:24:10.000
So let's go back to the presentation.

00:24:10.000 --> 00:24:17.580
And let's look at the scanner
support in Image Capture.

00:24:18.210 --> 00:24:22.500
Well, one of the main goals was
really to have a very simple UI.

00:24:22.650 --> 00:24:25.220
Make it easy.

00:24:25.300 --> 00:24:29.930
Make it easy for the standard
user to use the scanner.

00:24:32.890 --> 00:24:37.640
Image Capture supports actually
two types of device modules.

00:24:37.760 --> 00:24:41.770
One, the Image Capture Native,
and the other one is really

00:24:41.820 --> 00:24:43.560
the TWAIN data sources.

00:24:43.690 --> 00:24:47.140
You may ask,
"Why are you doing that?" Well,

00:24:47.140 --> 00:24:48.340
very simple.

00:24:48.340 --> 00:24:52.840
TWAIN data sources,
they are available for quite some time,

00:24:52.940 --> 00:25:00.510
and they probably give you a very good
way to work with a certain device.

00:25:01.930 --> 00:25:07.480
However, it's not that easy to create a
real solid Twain data source.

00:25:07.480 --> 00:25:10.820
It takes some time,
because not only you have to talk,

00:25:10.820 --> 00:25:14.700
actually implement everything
to talk to the device,

00:25:14.700 --> 00:25:17.060
but you also have to
implement your own UI.

00:25:19.070 --> 00:25:23.030
Now, with an image capture
native scanner module,

00:25:23.030 --> 00:25:27.270
you're not really worried about the UI,
because the UI is part of the

00:25:27.280 --> 00:25:28.490
image capture application.

00:25:28.500 --> 00:25:33.490
All you have to do is implement,
because we have a framework to really

00:25:33.490 --> 00:25:39.480
create your own scanner module,
implement very few calls,

00:25:39.480 --> 00:25:45.210
and that actually gives you access to
all image capture client applications.

00:25:49.760 --> 00:25:56.350
So we have a set of,
just specifically talking to the scanner.

00:25:56.930 --> 00:26:02.400
We have a set of APIs that
were introduced with Jaguar.

00:26:02.740 --> 00:26:05.990
We are not going to add
any API for Panther.

00:26:06.370 --> 00:26:10.500
However,
we changed the meaning of two APIs.

00:26:10.790 --> 00:26:17.170
It used to be that ICAs cannot get and
set parameters for the APIs to pass in

00:26:17.250 --> 00:26:26.040
a CFDictionaryRef or in a dictionary,
pass all the parameters.

00:26:26.080 --> 00:26:31.720
Well, we still maintain that,
but we are switching the keys.

00:26:31.720 --> 00:26:36.170
We are switching the keys to a
model that's closer to Twain.

00:26:37.100 --> 00:26:41.420
So basically,
all the Twain caps and ICAPs,

00:26:41.420 --> 00:26:44.550
we have those as a key.

00:26:44.920 --> 00:26:50.660
The values for those are a
dictionary with all the right

00:26:51.260 --> 00:26:55.540
content for that ICAP structure.

00:26:57.420 --> 00:27:00.460
Now this actually allows
us to be more flexible.

00:27:00.570 --> 00:27:03.680
First of all,
it's probably easier for you,

00:27:03.690 --> 00:27:09.200
with a Twain background,
to really implement a native scanner now.

00:27:10.350 --> 00:27:13.820
For example, for us,
it gives us a very easy way to

00:27:13.820 --> 00:27:17.340
enhance the scanner capabilities,
because in Jaguar,

00:27:17.340 --> 00:27:19.060
we could do only flatbed scans.

00:27:19.060 --> 00:27:21.850
We could not switch to
a transparency unit.

00:27:21.910 --> 00:27:23.460
With Panther, it's easy to do.

00:27:23.460 --> 00:27:28.480
We more or less mirror what
we have on the twain side.

00:27:31.160 --> 00:27:32.620
Talking about Twain.

00:27:32.760 --> 00:27:36.360
Well, Twain is really an industry-wide,
it's very established,

00:27:36.360 --> 00:27:41.450
it's more than 10 years old,
standard to access imaging devices.

00:27:41.500 --> 00:27:47.060
Twain, by itself,
supports cameras and scanners.

00:27:47.060 --> 00:27:49.640
However,
within the image capture environment,

00:27:49.640 --> 00:27:51.260
we are using only scanners.

00:27:51.260 --> 00:27:56.040
Because with the very few
camera modules that we have,

00:27:56.080 --> 00:28:00.300
we cover roughly 100% of the cameras.

00:28:00.300 --> 00:28:02.180
Maybe not 100, but very close to.

00:28:06.060 --> 00:28:10.830
Dwayne, if you look at the setup,
has three key components.

00:28:10.930 --> 00:28:13.740
First one is the client application.

00:28:13.980 --> 00:28:18.300
"Second is the Twain Data Source Manager,
the DSM,

00:28:18.340 --> 00:28:23.620
and the actual Twain Data Source." "Well,
that looks very similar to

00:28:23.720 --> 00:28:26.500
the Image Capture setup."

00:28:28.960 --> 00:28:34.190
Dwayne DSM is installed with Mac OS X.

00:28:34.320 --> 00:28:37.870
So back on Mac OS 9 days,
a lot of vendors,

00:28:37.930 --> 00:28:43.130
when they were selling their device,
they were shipping a CD that actually

00:28:43.130 --> 00:28:46.060
did install a Dwayne Data Source Manager.

00:28:47.490 --> 00:28:50.500
Which was really confusing because,
first of all,

00:28:50.520 --> 00:28:54.630
applications could not assume that
the Data Source Manager was installed.

00:28:55.500 --> 00:29:11.800
[Transcript missing]

00:29:12.380 --> 00:29:15.910
And for those non-MACO applications,
those of you who are still

00:29:15.910 --> 00:29:20.290
using CFM-based applications,
we have a shared library.

00:29:20.400 --> 00:29:47.800
[Transcript missing]

00:29:49.050 --> 00:29:52.760
So if you look at the setup, again,
this looks very familiar.

00:29:52.790 --> 00:29:57.290
It's the same or very close setup
as we had for Image Capture.

00:29:57.300 --> 00:29:58.460
Well, there's a big difference.

00:29:58.460 --> 00:30:02.260
Big difference is actually that
all these three components are

00:30:02.260 --> 00:30:04.140
running in the same process.

00:30:04.140 --> 00:30:10.180
With Image Capture,
each block was a different process.

00:30:11.230 --> 00:30:14.840
Actually, that has the advantage that we,
as a central piece,

00:30:15.020 --> 00:30:19.960
the Image Capture Background application,
is always in charge of all the devices,

00:30:19.960 --> 00:30:23.590
so we can have multiple
clients and multiple devices.

00:30:23.640 --> 00:30:26.780
Well, in the Twain world,
it's not that easy to handle that,

00:30:27.140 --> 00:30:29.990
because you have multiple instances
of the DSM actually running.

00:30:34.190 --> 00:30:37.860
So how did we integrate
Twain with Image Capture?

00:30:37.880 --> 00:30:41.780
Well, we did that,
and remember I mentioned that early on.

00:30:41.830 --> 00:30:45.680
We are using a Twain bridge.

00:30:45.830 --> 00:30:52.710
Image Capture basically implements
a module that talks to a Twain DS.

00:30:52.830 --> 00:30:57.150
So from the Twain world,
it looks like a Twain client.

00:30:57.220 --> 00:30:59.680
From the Image Capture world,
it looks like an

00:30:59.760 --> 00:31:02.130
Image Capture device module.

00:31:03.900 --> 00:31:07.650
Which also means that this thing,
whenever you connect the device,

00:31:07.720 --> 00:31:11.840
this thing gets launched,
the twin bridge gets launched,

00:31:11.970 --> 00:31:16.020
and it will be running as long
as the device is connected.

00:31:17.570 --> 00:31:20.750
We implemented a way,
a very easy way for you,

00:31:20.830 --> 00:31:22.800
to hook up button support.

00:31:22.900 --> 00:31:25.910
Because a lot of vendors,
they ship now these scanners with a scan,

00:31:25.970 --> 00:31:29.200
email, fax, copy,
whatever button in front.

00:31:29.220 --> 00:31:33.450
And what they really want is that
user presses the copy button,

00:31:33.460 --> 00:31:37.460
and then a certain application
on the Mac should be launched

00:31:37.460 --> 00:31:39.090
and should do a copy.

00:31:40.980 --> 00:31:42.030
Well, you can do that.

00:31:42.040 --> 00:31:49.110
You can implement your own
button listening plugin,

00:31:49.110 --> 00:31:49.110
put that into your DS,

00:31:49.260 --> 00:31:55.560
And then this code gets executed
when no one else is using the device.

00:31:56.910 --> 00:32:00.980
So there's no need for you
to write up a special kernel

00:32:00.980 --> 00:32:03.640
extension in order to do that.

00:32:05.950 --> 00:32:08.020
So that's how the setup looks like.

00:32:08.090 --> 00:32:11.850
So Image Capture,
the train bridge is the,

00:32:12.270 --> 00:32:16.200
Client Talks to the DSM Through the
DSM To the different DSs

00:32:16.270 --> 00:32:18.200
www.werner-neubrand.com
www.werner-neubrand.com

00:32:18.200 --> 00:32:20.200
www.werner-neubrand.com
www.werner-neubrand.com

00:32:22.410 --> 00:32:26.450
Again, the nice thing,
any image capture-aware application

00:32:26.450 --> 00:32:28.990
can just use Twain data sources.

00:32:30.960 --> 00:32:34.870
Actually,
we have a mode where we present our UI,

00:32:34.880 --> 00:32:40.300
or where you can choose to use the
Twain original DS UI if you want.

00:32:43.800 --> 00:32:48.100
So the Twain implementation
is really currently 1.9,

00:32:48.100 --> 00:32:51.680
and they came up with the spec in 2000.

00:32:51.680 --> 00:32:56.030
They describe how to write
a Twain client application,

00:32:56.030 --> 00:32:58.540
how to write a Twain data source.

00:32:58.740 --> 00:33:01.210
It's really well organized.

00:33:01.240 --> 00:33:04.680
They have a Windows section and
they have a Macintosh section.

00:33:04.680 --> 00:33:07.610
Unfortunately,
that section for the Macintosh

00:33:07.610 --> 00:33:09.690
is really made for Mac OS 9.

00:33:09.700 --> 00:33:18.850
The current spec is really not the way
you should follow in order to implement

00:33:18.850 --> 00:33:23.440
a DS or even a Swain client application.

00:33:25.280 --> 00:33:26.190
We made some changes.

00:33:26.270 --> 00:33:29.820
So for the DS, for example,
it used to be that those

00:33:29.890 --> 00:33:32.000
were just shared libraries.

00:33:32.090 --> 00:33:37.100
Now we really require now a bundle.

00:33:37.320 --> 00:33:40.320
The bundle has a couple of advantages.

00:33:40.510 --> 00:33:45.060
For example, we can store additional
information in the info or device

00:33:45.060 --> 00:33:47.820
info.p list that we require.

00:33:48.070 --> 00:33:52.450
The Info.plist, for example,
contains information about the device,

00:33:52.450 --> 00:33:55.010
the scanner that you
are going to hook up.

00:33:55.070 --> 00:33:58.190
It contains, for example,
for a USB scanner,

00:33:58.270 --> 00:34:00.120
a vendor and product ID.

00:34:01.720 --> 00:34:03.100
Now, why is that important?

00:34:03.230 --> 00:34:08.070
Well, Twain itself has no way to match,
whenever you connect a device,

00:34:08.240 --> 00:34:11.580
to match that device to
a certain DS directly.

00:34:11.580 --> 00:34:17.300
So what you end up with,
you can have like 15 different

00:34:17.300 --> 00:34:20.150
DSs installed on one machine.

00:34:20.380 --> 00:34:24.540
And there's no way to get
the just active device.

00:34:24.600 --> 00:34:27.050
With Image Capture, it's easy,
because we just have a

00:34:27.120 --> 00:34:32.540
scanner device module running,
and you can ask Image Capture,

00:34:32.540 --> 00:34:38.280
"What is the device?" Well, with Twain,
you can iterate over all devices,

00:34:38.500 --> 00:35:18.200
[Transcript missing]

00:35:18.390 --> 00:35:22.090
That allows us to map the
device that is connected,

00:35:22.140 --> 00:35:24.910
that's plugged in,
that we detect on the bus,

00:35:25.320 --> 00:35:28.270
with a given DS that's installed.

00:35:30.680 --> 00:35:31.940
We switched also to the event model.

00:35:32.060 --> 00:35:35.040
It used to be that back
in the old Mac OS 9 days,

00:35:35.040 --> 00:35:36.630
there was this wait next event loop.

00:35:36.710 --> 00:35:39.500
There was this constant
polling for events.

00:35:39.510 --> 00:35:43.530
So whenever there was an event,
the client application would

00:35:43.530 --> 00:35:49.280
pass that event to the DS,
and the DS could decide, yes,

00:35:49.280 --> 00:35:53.510
I want to use it, or no, no,
I just pass it back to the application,

00:35:53.510 --> 00:35:53.510
and the application handles the event.

00:35:55.600 --> 00:35:57.790
So, event model has changed.

00:35:57.830 --> 00:36:03.020
And the last thing we really ask you,
if you are going to write an ONDS,

00:36:03.170 --> 00:36:05.620
is support the UILess operation.

00:36:05.620 --> 00:36:11.810
It's an optional feature,
but we would really ask you to do it.

00:36:12.130 --> 00:36:13.900
in order to work with Image Capture.

00:36:14.030 --> 00:36:17.620
Because otherwise we could just
bring up the standard DSUI,

00:36:17.620 --> 00:36:21.680
and in a bit you will see why that's
not that great of an idea always.

00:36:25.520 --> 00:36:28.770
So for the Twain client,
there's also this new event model,

00:36:28.770 --> 00:36:34.120
where instead of calling wait next event,
you could register the callback

00:36:34.370 --> 00:36:38.160
proc for the case that the
DS wants to send you a message.

00:36:38.210 --> 00:36:42.230
For example, scan data is available.

00:36:43.100 --> 00:37:19.200
[Transcript missing]

00:37:22.000 --> 00:37:29.550
Let's now talk about the
things that are new in Panther.

00:37:31.010 --> 00:37:35.400
We have made some image
capture enhancements.

00:37:35.500 --> 00:37:38.590
We are going to talk about
image capture networking,

00:37:38.700 --> 00:37:42.480
web sharing, and a couple of new APIs.

00:37:44.210 --> 00:37:46.160
Let me start with the
Image Capture Enhancement.

00:37:46.190 --> 00:37:50.270
One thing I mentioned before was really,
we added the property

00:37:50.270 --> 00:37:52.000
dictionary for the device list.

00:37:52.450 --> 00:37:59.190
Now this may seem like a little
thing that you could live without.

00:37:59.640 --> 00:38:05.220
Well, it's a very convenient way to
get to all the devices at once,

00:38:05.370 --> 00:38:09.920
also to get to information
about the devices.

00:38:09.920 --> 00:38:11.640
For example, is it a USB device?

00:38:11.640 --> 00:38:16.560
Is it this specific model of the
scanner that is the only one that

00:38:16.560 --> 00:38:19.590
I'm going to support or ignore?

00:38:20.900 --> 00:38:23.600
We did some changes in the UI.

00:38:23.760 --> 00:38:29.680
So, for example, we have faster launching
for image captures,

00:38:29.680 --> 00:38:32.640
and that's probably
those of you who have,

00:38:32.800 --> 00:38:37.840
like, the new one gigabyte CF cards or
so with thousands of images on it.

00:38:38.000 --> 00:38:42.030
They noticed that it takes a while
before image capture was coming up,

00:38:42.090 --> 00:38:45.840
bringing up the UI,
and was showing the thumbnails.

00:38:45.840 --> 00:38:51.340
Well, we reduced that time dramatically,
and it's much faster launching.

00:38:51.340 --> 00:38:53.660
And at the initial point,
when we do not have all the

00:38:53.940 --> 00:38:57.000
information about the device,
we just bring up a progress bar saying,

00:38:57.110 --> 00:39:00.320
while we are talking to the device,
we are collecting information,

00:39:00.320 --> 00:39:01.540
and just be patient.

00:39:01.540 --> 00:39:03.580
It will be there in a couple of seconds.

00:39:06.290 --> 00:39:07.740
Then we have a better session handling.

00:39:07.740 --> 00:39:13.300
It used to be that when two instances
of image capture application,

00:39:13.300 --> 00:39:16.460
for example, were running,
and the first one had

00:39:16.460 --> 00:39:18.090
the scanner session open.

00:39:18.090 --> 00:39:18.900
Remember?

00:39:18.900 --> 00:39:22.970
Scanner usage is really session based,
so you have to open a session,

00:39:22.990 --> 00:39:26.190
you have to then do
your scanning commands,

00:39:26.200 --> 00:39:29.880
then close the session before
someone else can access the

00:39:29.880 --> 00:39:32.500
device and open a session.

00:39:32.780 --> 00:39:36.720
So what was happening in the past was,
first one is active, session is active,

00:39:36.920 --> 00:39:38.970
you launch the second one,
and the second one was saying, well,

00:39:38.980 --> 00:39:39.820
no device connected.

00:39:39.820 --> 00:39:41.010
Oh, that's not that great.

00:39:41.160 --> 00:39:45.600
So we really have a better way to inform
you that there's a session ongoing,

00:39:45.600 --> 00:39:49.830
and also keep that dialogue open,
and the first session closes, and whoops,

00:39:49.830 --> 00:39:51.200
the second one gets active.

00:39:53.740 --> 00:39:59.100
We added a couple of scanner image
enhancements and progressive scanning.

00:39:59.200 --> 00:40:40.600
[Transcript missing]

00:40:43.630 --> 00:40:47.510
You see, on this machine I do
have a scanner connected,

00:40:47.620 --> 00:40:51.400
a Type 1 scanner,
and I'm using Photoshop again,

00:40:51.420 --> 00:40:57.800
but this time I'm using Photoshop from
a plugin where I do the standard UI.

00:40:58.470 --> 00:41:03.900
And scanner wasn't in use,
so it takes some time to warm up.

00:41:04.080 --> 00:41:08.990
And then that time I can show you,
we have added an image

00:41:08.990 --> 00:41:11.640
correction section to the UI.

00:41:11.640 --> 00:41:14.580
The goal again was keep it simple.

00:41:14.580 --> 00:41:19.440
So we just have the three radio buttons
where we allow you to do nothing.

00:41:19.440 --> 00:41:22.360
That was the current setup,
where we allow you to do

00:41:22.360 --> 00:41:24.120
an automatic correction.

00:41:24.120 --> 00:41:27.060
And here you see actually
the progressive scan,

00:41:27.060 --> 00:41:33.430
so instead of waiting for the
entire image to be scanned in,

00:41:33.430 --> 00:41:33.430
we...

00:41:34.100 --> 00:41:40.000
[Transcript missing]

00:41:41.800 --> 00:41:53.300
[Transcript missing]

00:41:54.180 --> 00:41:59.060
And the nice thing, of course,
you can switch to manual and you get the

00:41:59.120 --> 00:42:01.060
slider settings based on the automatic.

00:42:01.090 --> 00:42:05.190
You can still enhance it,
so you can brighten it up

00:42:05.190 --> 00:42:10.800
or do some weird things,
change the color.

00:42:11.000 --> 00:42:22.900
[Transcript missing]

00:42:28.320 --> 00:42:32.580
Other than that, you may notice that we,
on the options,

00:42:32.580 --> 00:42:37.250
we give you a way to choose the
resolution for an overview scan.

00:42:37.840 --> 00:42:43.100
So, whenever you work with the overview,
if you really want to

00:42:43.100 --> 00:42:46.040
zoom in quite a bit,
then you should make sure that

00:42:46.070 --> 00:42:49.260
you're not scanning at 25 dpi,
because that's really just a few

00:42:49.260 --> 00:42:53.830
pixels that you have to correct,
and the results may not be that good.

00:42:53.840 --> 00:42:57.510
So, what we do is really,
on this image correction,

00:42:57.540 --> 00:43:01.250
we are using ColorSync,
and actually produce a

00:43:01.250 --> 00:43:03.780
ColorSync abstract profile,

00:43:03.940 --> 00:43:07.440
And on the real scan,
when we import that,

00:43:07.490 --> 00:43:10.170
we apply that profile.

00:43:10.200 --> 00:43:25.100
[Transcript missing]

00:43:31.760 --> 00:43:37.540
So another thing that we are going to add
in Panther is image capture networking.

00:43:37.670 --> 00:43:43.730
It's a very easy way to share your
camera or scanner on a network.

00:43:44.120 --> 00:43:47.000
Unfortunately, there are a lot of things
you have to implement.

00:43:47.150 --> 00:43:50.450
Well, not quite,
because it works with all existing

00:43:50.450 --> 00:43:52.700
camera and scanner modules.

00:43:52.700 --> 00:43:55.000
It works with all existing
client applications.

00:43:55.000 --> 00:43:59.650
So, iPhoto, out of the box,
will just work with network

00:43:59.820 --> 00:44:02.500
scanning and network cameras.

00:44:02.780 --> 00:44:05.240
There's really no new API.

00:44:05.960 --> 00:44:07.520
So how do we do that?

00:44:07.550 --> 00:44:10.940
Well, if we look at the standard setup,
where we have the different components,

00:44:10.940 --> 00:44:13.200
like device module,
image capture background app,

00:44:13.200 --> 00:44:16.170
and your client application,
just imagine that you

00:44:16.250 --> 00:44:17.990
have that on two machines.

00:44:19.100 --> 00:44:23.320
Now, how can we make it work so that
without changing the lower layer,

00:44:23.330 --> 00:44:28.290
the device module, and the upper layer,
the applications, it still works?

00:44:28.440 --> 00:44:31.080
Well, of course,
there's only one thing we have to do,

00:44:31.080 --> 00:44:34.020
is we have to get the middle layers,
the image capture,

00:44:34.020 --> 00:44:36.480
the background applications,
to talk to each other.

00:44:36.500 --> 00:44:40.560
And we do that on your local
subnet using Rendezvous.

00:44:40.560 --> 00:44:44.220
So really,
there's no need to configure anything.

00:44:46.290 --> 00:44:49.390
Whenever you have sharing turned on,

00:44:50.380 --> 00:44:54.040
on one machine, you can select, yes,
I want this one, this one shared,

00:44:54.060 --> 00:44:57.930
but I don't have to type in
IP addresses or whatever.

00:45:01.010 --> 00:45:05.900
So that's a great way to
share scanners and cameras.

00:45:05.990 --> 00:45:07.350
But we did more.

00:45:07.640 --> 00:45:11.280
Actually,
the Image Capture web server allows

00:45:11.380 --> 00:45:14.860
you to share cameras on the internet.

00:45:15.010 --> 00:45:18.740
Now that's a really great way,
and the nice thing again,

00:45:18.780 --> 00:45:25.150
is it works with existing device modules,
and works with all internet browsers.

00:45:25.230 --> 00:45:29.690
And that's really a great way,
because then you hook up the camera here,

00:45:29.980 --> 00:45:34.480
And you can access it on all platforms,
all over the world,

00:45:34.480 --> 00:45:36.940
once you get through to that device.

00:45:37.040 --> 00:45:41.660
And the nice thing really,
this is done without

00:45:41.660 --> 00:45:44.500
downloading the images first.

00:45:44.610 --> 00:45:49.280
So you take the pictures,
hook it up to your iBook over wireless,

00:45:49.290 --> 00:45:53.370
you can share it,
and people around the world can

00:45:53.370 --> 00:45:56.390
access the content of your camera.

00:45:58.230 --> 00:46:01.540
And that's actually
how it is implemented.

00:46:01.630 --> 00:46:03.700
The Image Capture Web Sharing is
just another client,

00:46:03.700 --> 00:46:06.920
a client that we install and
we will launch automatically

00:46:07.210 --> 00:46:08.720
when you select to do it.

00:46:08.800 --> 00:46:14.080
And the nice thing is really it
works with all different clients.

00:46:14.080 --> 00:46:17.030
So let me show you that.

00:46:17.120 --> 00:46:18.250
Here we go.

00:46:21.200 --> 00:46:27.260
So if you go to number four, yeah,
and let me quit preview.

00:46:27.550 --> 00:46:31.690
So again, I have my PDP camera here,
and what I want to do is launch

00:46:31.740 --> 00:46:34.020
the image capture application.

00:46:34.430 --> 00:46:37.750
Image Capture Application allows
me again to browse,

00:46:37.750 --> 00:46:39.730
look at all the images.

00:46:40.470 --> 00:46:45.160
We added the sharing panel.

00:46:45.210 --> 00:46:49.280
Now, sharing,
first part is I can specify,

00:46:49.280 --> 00:46:50.700
look for other devices.

00:46:50.750 --> 00:46:53.960
Look for other devices that
are on this sub-channel.

00:46:56.000 --> 00:46:59.590
Then I have an option
to share my devices.

00:46:59.590 --> 00:47:02.360
You can even turn on the web sharing.

00:47:03.400 --> 00:47:06.690
So let me turn on the web sharing,
and as shared name,

00:47:06.690 --> 00:47:10.270
I use Werner's Devices,
and I'm not using any password.

00:47:10.300 --> 00:47:16.690
And I can say, share my devices,
and then this table view gets enabled,

00:47:16.690 --> 00:47:18.910
and I can, per device,
I can decide whether

00:47:18.950 --> 00:47:20.460
I want to share it or not.

00:47:20.460 --> 00:47:23.450
So let me share my device.

00:47:24.260 --> 00:47:27.190
"Canon PowerShot" By the way,
down at the bottom,

00:47:27.190 --> 00:47:31.070
you notice that since we
enabled the web sharing,

00:47:31.170 --> 00:47:36.420
you notice the Image Capture web
server gets automatically launched.

00:47:37.140 --> 00:47:40.230
Now, on this machine, well,
I don't see anything, of course,

00:47:40.230 --> 00:47:43.940
because I have to go to
machine number three.

00:47:46.200 --> 00:47:55.600
[Transcript missing]

00:47:58.320 --> 00:48:01.640
See, there's no image capture
device connected.

00:48:01.680 --> 00:48:03.710
Well, of course not,
because this machine does not

00:48:03.710 --> 00:48:06.000
have any device connected.

00:48:07.760 --> 00:48:13.670
Now, I want to access this
camera on the other machine.

00:48:13.670 --> 00:48:15.520
How do I do that?

00:48:15.620 --> 00:48:18.050
Well, I go to my sharing,
and here I do select

00:48:18.050 --> 00:48:20.230
look for shared devices.

00:48:20.230 --> 00:48:25.550
I go to my browse,
and then in the browse panel,

00:48:25.550 --> 00:48:32.710
I do see the Canon PowerShot S50,
which I can choose to use,

00:48:32.710 --> 00:48:34.790
and here it is.

00:48:35.010 --> 00:48:39.090
So now on this machine I'm using
a camera that's connected maybe to

00:48:39.090 --> 00:48:41.780
another machine in the back room.

00:48:41.920 --> 00:48:45.450
And it can access it as if
it was connected directly.

00:48:45.920 --> 00:48:49.970
And notice that we also do,
still do support all our APIs.

00:48:50.000 --> 00:48:53.380
So for example, download file just works.

00:48:53.390 --> 00:48:55.690
Although, the,

00:48:55.870 --> 00:49:01.110
"The directory ref that you specify
is really on your local machine.

00:49:01.210 --> 00:49:04.560
So you specify to download
to your local machine,

00:49:04.640 --> 00:49:07.950
and we internally remap that,
get the data from here,

00:49:07.980 --> 00:49:09.790
and save it on your local machine.

00:49:09.890 --> 00:49:12.820
So we do exactly what you want."

00:49:15.360 --> 00:49:19.300
I have another tool to just,
it's one of the debugging tools

00:49:19.300 --> 00:49:23.440
that may end up in the SDK.

00:49:23.440 --> 00:49:25.880
It allows you to actually
look at the different devices,

00:49:25.880 --> 00:49:30.820
and you see, I see the same object
structure on this machine.

00:49:30.820 --> 00:49:36.610
I can actually select the camera.

00:49:37.500 --> 00:49:58.000
[Transcript missing]

00:50:00.200 --> 00:50:03.940
"Just show you the device list object.

00:50:04.050 --> 00:50:08.320
So the only thing that indicates that
this is a non-local thing is really

00:50:08.320 --> 00:50:13.700
an entry in here that indicates,
yes, it is a remote device."

00:50:14.990 --> 00:50:17.190
And again,
the nice thing is down here you

00:50:17.250 --> 00:50:20.880
see we just run image capture,
so there's really no device

00:50:20.880 --> 00:50:22.920
module invoked on this machine.

00:50:24.660 --> 00:50:26.470
Okay, but I actually did more.

00:50:26.760 --> 00:50:29.910
So I did not only...

00:50:31.400 --> 00:50:35.840
I activate this one to
do the local sharing.

00:50:35.860 --> 00:50:38.460
I also enable the web sharing.

00:50:39.270 --> 00:50:46.490
Now, when I open this,
how do I get through this machine?

00:50:47.500 --> 00:50:54.600
[Transcript missing]

00:50:58.720 --> 00:51:03.500
So select that one and you see, whoops,
same content.

00:51:03.510 --> 00:51:07.970
But just imagine this could be
on the other side of the world.

00:51:10.140 --> 00:51:14.800
Now that's a very easy
way to access the cameras.

00:51:14.840 --> 00:51:19.640
If you don't want or have a browser
that does not support rendezvous,

00:51:19.700 --> 00:51:23.500
how do you actually know that

00:51:24.320 --> 00:51:41.540
The URL, or you call your friend on
the other side of the world,

00:51:41.540 --> 00:51:41.540
"Well, go to this URL." "Well,
what is the URL?" "Well, actually,

00:51:41.540 --> 00:51:41.570
if we just quickly switch back
to number four in the sharing."

00:51:43.750 --> 00:51:47.690
"In the sharing panel,
down here you see the URL.

00:51:47.700 --> 00:51:53.700
Just use that, send that in the email,
and they can access it.

00:51:53.810 --> 00:51:56.370
So if you switch back to number three,

00:51:56.570 --> 00:52:13.770
And then let's see if
I can actually access,

00:52:13.770 --> 00:52:13.770
since I was using VPN to
connect to the Apple campus.

00:52:13.770 --> 00:52:13.770
So in my office,
I did set up a memory stick reader,

00:52:13.770 --> 00:52:13.770
so I should be able to just access that.

00:52:13.970 --> 00:52:16.490
So this one here is
really a memory stick,

00:52:16.590 --> 00:52:19.140
Sony memory stick reader
in Cupertino in the office.

00:52:19.190 --> 00:52:20.690
But we actually have more.

00:52:20.860 --> 00:52:27.140
So we have one camera set up

00:52:29.400 --> 00:52:35.600
[Transcript missing]

00:52:36.020 --> 00:52:40.760
I can switch to a remote monitor
and I can actually look at what

00:52:40.990 --> 00:52:44.040
the canvas looks like right now.

00:52:44.180 --> 00:52:46.800
And it refreshes,
and you see here when the

00:52:46.800 --> 00:52:50.390
next image will be taken,
so it takes every minute

00:52:50.400 --> 00:52:51.420
or so you can configure it.

00:52:51.520 --> 00:52:54.740
It takes a picture and
updates the screen.

00:52:54.740 --> 00:53:01.110
Well, that's one thing you
can do with a webcam.

00:53:01.110 --> 00:53:01.110
That's

00:53:01.700 --> 00:53:28.900
[Transcript missing]

00:53:36.170 --> 00:53:39.900
Going back to the browsing part,
if the camera supports it,

00:53:39.960 --> 00:53:43.330
you can take a picture directly.

00:53:43.340 --> 00:53:45.690
So you don't have to go
to this monitor mode.

00:53:46.000 --> 00:53:49.340
Whenever you want, you can trigger it.

00:53:49.340 --> 00:53:51.580
You can download.

00:53:52.830 --> 00:53:55.630
and you can even look at the
list view so you can actually

00:53:55.630 --> 00:53:57.340
see when was this picture taken.

00:53:57.340 --> 00:54:01.130
You see we even had a
night shot from last night.

00:54:01.130 --> 00:54:05.100
And we can just download that to disk.

00:54:05.140 --> 00:54:13.620
And speed is not that.

00:54:34.170 --> 00:54:39.090
"The tracking alpha is probably
a better way." So again,

00:54:39.090 --> 00:54:46.790
if you look at that in actual size,
you see this is not a

00:54:47.040 --> 00:54:50.100
cheap webcam resolution.

00:54:50.100 --> 00:54:54.100
It's much higher quality.

00:54:54.100 --> 00:54:58.100
Okay,
so that's image capture web sharing.

00:54:58.100 --> 00:55:03.210
Let's go back to the slides.

00:55:04.770 --> 00:55:08.010
Let's talk about the new
APIs that we have in Panther.

00:55:08.020 --> 00:55:12.300
First of all,
and we saw that used by services and

00:55:12.380 --> 00:55:16.760
also by the modified version of TextEdit,
we have this common UI,

00:55:16.760 --> 00:55:18.370
the ICA Import Image.

00:55:18.380 --> 00:55:23.180
It really gives you an easy way
to access a kind of nice UI,

00:55:23.180 --> 00:55:24.440
easy to use.

00:55:24.440 --> 00:55:26.120
You don't have to worry about thumbnails.

00:55:26.120 --> 00:55:29.720
It will be speed optimized
and present everything.

00:55:29.720 --> 00:55:33.220
That's how the API looks like.

00:55:33.310 --> 00:55:36.520
All you do is,
in standard image capture way,

00:55:36.520 --> 00:55:39.790
you specify a parameter
block and a callback proc,

00:55:39.790 --> 00:55:44.930
and the parameter block has
the device object for that

00:55:44.930 --> 00:55:49.900
you want to bring up the UI,
but actually we made it easier for you.

00:55:49.900 --> 00:55:51.900
You can just specify zero.

00:55:51.900 --> 00:55:54.910
That means if you have a
single device connected,

00:55:54.910 --> 00:55:56.280
well, use that one.

00:55:56.360 --> 00:56:00.440
If you have multiple devices connected,
we bring up a small selection box,

00:56:00.500 --> 00:56:03.120
and you can let the
user choose which one.

00:56:05.450 --> 00:56:07.470
There are some flags you can specify.

00:56:07.620 --> 00:56:11.150
Do you want to have single
or multiple selection?

00:56:11.360 --> 00:56:15.170
You can specify file types that your
application is going to support.

00:56:15.220 --> 00:56:19.890
For example, on the memory stick,
I also have an MP3 file,

00:56:19.980 --> 00:56:24.290
and it wouldn't do any good
to allow pasting an MP3 file

00:56:24.290 --> 00:56:26.790
to a graphics application.

00:56:28.940 --> 00:56:30.900
There's also a filter
proc that you can specify,

00:56:31.070 --> 00:56:35.300
and that filter proc gets called for each
image before displaying it in the UI.

00:56:35.300 --> 00:56:39.360
Actually, you can then look at that
image and reject it if you

00:56:39.360 --> 00:56:41.360
don't want to display that.

00:56:43.090 --> 00:56:47.000
And then you get back and see
if ArrayRef with the data for

00:56:47.010 --> 00:56:50.030
all the user selected images.

00:56:51.450 --> 00:56:54.040
So,
if you look at the TextEdit application,

00:56:54.070 --> 00:56:57.130
what did I have to do in
order to implement that?

00:56:57.230 --> 00:57:00.450
Well, it was very simple,
because I just created a new

00:57:00.450 --> 00:57:04.450
method that gets called when
the menu item was selected.

00:57:04.870 --> 00:57:09.290
I'm basically zeroing out the
ICA import image parameter block.

00:57:09.370 --> 00:57:14.980
However, I do specify the filter proc
and supported file types.

00:57:14.980 --> 00:57:18.600
I specify just the callback proc,
and as file type,

00:57:18.600 --> 00:57:20.790
I just specify TIFF and JPEG.

00:57:20.950 --> 00:57:24.980
I'm willing to import
TIFF and JPEG files.

00:57:25.780 --> 00:57:29.640
My callback proc gets
called before displaying or

00:57:29.990 --> 00:57:35.780
adding each image to the UI,
meaning I have the freedom to reject it.

00:57:35.780 --> 00:57:39.390
If, for example,
I'm working only with very small images,

00:57:39.390 --> 00:57:42.870
I can reject all the ones that
are more than a certain size.

00:57:44.240 --> 00:57:51.420
And here I have the callback proc,
which just calls into a

00:57:51.420 --> 00:57:53.710
method of the document.

00:57:53.710 --> 00:57:57.360
And that's the ICA import callback.

00:57:57.380 --> 00:58:00.650
And all I'm doing in here
is checking the return code.

00:58:00.650 --> 00:58:05.500
I look at the error
code in the header file,

00:58:05.500 --> 00:58:11.680
and also look back,
do I get back an array of NSData?

00:58:12.100 --> 00:58:14.970
If so,
I get the first element of that array,

00:58:14.970 --> 00:58:18.230
put it into an NSData,
and actually the easiest way

00:58:18.230 --> 00:58:22.360
to get that into text edit was
just make use of the pasteboard.

00:58:22.370 --> 00:58:26.860
So basically act as pasting it in,
and that's what I'm doing here.

00:58:29.220 --> 00:58:35.420
Another new API that we're going to
add is ICA Copy Object Thumbnail.

00:58:35.540 --> 00:58:40.570
ICA Copy Object Thumbnail is
just retrieving the thumbnail.

00:58:40.670 --> 00:58:41.890
Why would we do that?

00:58:41.990 --> 00:58:46.450
Because we did it in the past by
just using ICA Get Property Data.

00:58:46.600 --> 00:58:50.910
Well, the reason to do it is really
we support multiple formats.

00:58:51.040 --> 00:58:54.420
In the back,
we had our own ICA Thumbnail format,

00:58:54.420 --> 00:58:58.280
which was just raw data, raw RGB data.

00:58:59.280 --> 00:59:03.340
Now we also support JPEG and TIFFs.

00:59:03.440 --> 00:59:07.640
The advantage of this is they could
be actually smaller because they

00:59:07.800 --> 00:59:22.000
[Transcript missing]

00:59:24.340 --> 00:59:28.660
So for this API, again,
parameter block and callback block,

00:59:28.660 --> 00:59:31.180
and what you specify is just the object.

00:59:31.280 --> 00:59:36.340
You specify the thumbnail format,
and you get back thumbnail data.

00:59:39.350 --> 00:59:41.940
The last thing,
it's not actually a new API,

00:59:41.940 --> 00:59:45.800
but it's a new message type
that we introduced with Panther.

00:59:45.800 --> 00:59:50.790
And we are allowing now
third-party applications.

00:59:50.790 --> 00:59:54.940
There were certain vendors that
wanted to use their application,

00:59:55.010 --> 00:59:58.100
bypassing Image Capture,
their application to

00:59:58.100 --> 00:59:59.860
talk to a camera device.

01:00:00.340 --> 01:00:04.720
Now, this is a bit of a problem,
because whenever you connect the device,

01:00:04.720 --> 01:00:07.500
an Image Capture camera
module gets launched,

01:00:07.500 --> 01:00:09.100
and it keeps the device.

01:00:12.340 --> 01:00:17.670
And the only way in the past to
really get to that device was

01:00:17.800 --> 01:00:34.700
[Transcript missing]

01:00:34.820 --> 01:00:36.840
And then Image Capture
will release the device,

01:00:36.840 --> 01:00:41.240
meaning you and your application
can bypass Image Capture

01:00:41.240 --> 01:00:43.000
and use the device directly.

01:00:43.000 --> 01:00:44.210
And here's how you use it.

01:00:44.290 --> 01:00:45.620
It's very straightforward.

01:00:45.620 --> 01:00:48.740
It's just an IC object send message
parameter block that you clear.

01:00:48.740 --> 01:00:53.560
You specify the object,
and then the message type

01:00:53.560 --> 01:00:57.970
KICA message device yield,
and send that.

01:00:58.060 --> 01:01:00.600
Then Image Capture will
release the device,

01:01:00.600 --> 01:01:02.250
and you can work with that.

01:01:04.180 --> 01:01:07.450
So that's really the end of
the image capture overview,

01:01:07.450 --> 01:01:12.940
and here are the contact persons,
Travis and John Simra.

01:01:12.940 --> 01:01:16.500
If you have any questions, comments,
suggestions,

01:01:16.520 --> 01:01:20.660
bugs that you want to report,
these are the right persons to ask.

01:01:20.660 --> 01:01:22.780
Thank you.