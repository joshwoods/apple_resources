---
Title:  QuickTime State of the Union
Year:   2003
Web:    https://nonstrict.eu/wwdcindex/wwdc2003/701/

[!] This transcript was generated using Whisper, it has known transcription errors.
---

Ladies and gentlemen, please welcome Vice President, Interactive Media Group, Tim Schaaff. Hello. Good morning. Welcome. Thank you for coming today. Today's session is a little different from previous developer conference sessions in that we've combined the developer conference, as always, with With QuickTime Live, this year we've got a large group of developers here to learn about the new APIs and software technologies that we're introducing in QuickTime we've been working on over the past year. And we've also got a whole bunch of sessions oriented at the content creators and content publishers who typically are the primary attendees at QuickTime Live Conference.

So it's kind of an interesting mix. We've got over 32 sessions. We've got some hands-on labs that you can go and attend. They're running all week long, and I strongly encourage you to go there. If you're writing applications and you've run into bugs or you've run into problems and you need some help from engineers who know what's going on, there's all week long hands-on labs. You can take your code and they'll sit down with you and help you work through that.

And then there's also hands-on labs for the content publishers as well. And you can go there and get advice from people who know how to use QuickTime. And they'll help you out with that. So it should be great. I want to start today with an update about where things stand with QuickTime in the marketplace. And to help me do that, I want to bring Frank Casanova, Director of Product Marketing, up to tell us what's going on. Thanks, Steve.

Hi guys. So in typical fashion, marketing and engineering count differently. There's over 45 sessions about QuickTime. It's all how you count. Anyway, we're thrilled with the combination of these two conferences. We had three QuickTime Live that were standalone conferences, but to leverage the scale of WWDC, to be able to take advantage of the infrastructure, all the people to do all the work, has been absolutely incredible.

So we're thrilled with this, and we know that it makes our QuickTime activities even bigger. And what I wanted to talk about today addresses kind of the diverse nature of this crowd. We in this crowd are now more diverse in our backgrounds and our activities and the centers of our attention than ever before, even more so than last year, because we've done a whole bunch of new things with QuickTime just in the last year.

So we have a bunch of folks in this crowd that are old-timers, been around QuickTime longer than most of us. There's a whole bunch of people that are here for the very first time, working on the new formats and the new codecs. There's a bunch of folks that deliver QuickTime-encoded content in a standards fashion out into different delivery mediums that aren't even available to most of us. We'll talk about all of that.

But to weigh to ensure that we're all kind of on the same playing field, let's just zoom back just a little bit and talk about what it was that Apple tried to do. What is it that we accomplished with QuickTime back in the day? What was it that we set out to do in the very beginning?

Fundamentally, we wanted to try to be the first personal computer manufacturer to put together audio and video, have them play synchronized on a personal computer. And we did that back as we were doing research in the late 80s, and we brought that out in the early, like 1991. You guys remember some of the codecs in here? Just an eye chart. You can't read this, but I can.

Road Pizza, some of the old codecs. And year after year, we steadily released new, big releases of QuickTime, accelerating in the recent years to doing basically a major release a year with a bunch of minor releases, but all with our eye toward a couple of really important things.

Quickly and aggressively evolving the platform, maintaining backward compatibility because we didn't want to lock people out of the content that they'd created in QuickTime, ever. We still haven't done that. With QuickTime, one content still plays in QuickTime 6.3, and we've held on to that as one of the core components of what we do, and we'll do that for the foreseeable future.

[Transcript missing]

And that's all great. We've got this great architecture that's evolved over the years. We've been diligent in evolving it as quickly as possible. We use it across all of the various parts of what Apple does, but what good would that do if it was just a little boutique format that didn't have any reach?

Well, reach is not a problem for us in QuickTime. As of this morning, QuickTime 6, and I should probably make that last few digits just kind of like roll over. As of this morning, we've had over 115 million downloads just from our website of QuickTime 6. And basically, every second of every day, four people download QuickTime.

We've got incredible distribution of this architecture, and the infrastructure to deliver this across all the different languages we support, and across all the different ways that it can be distributed. From our website. And this alone puts us very much, you know, at the top of the heap with respect to distribution. But this is just one way in which QuickTime is actually distributed.

It's referred to on upwards of about 20,000 websites every day refer people to our site to get QuickTime. All these sites and just tens of thousands more have QuickTime content. We look at the logs every once in a while to see who's aiming their customers, who's aiming their visitors at us. So that's all part of our web distribution. But tools. There's hundreds of tools that exist that use QuickTime and distribute QuickTime. In addition, titles. Every day, about a dozen different titles ship that use QuickTime at their core.

Every single day. And some of these go on to sell millions of copies each, and every one of them installs QuickTime. And this is a very, very interesting and very large business that's run out of my group as well. So we get to watch that, how it's growing and what the requests are for licensing. Enhanced music CDs.

A lot of you guys have seen this. A lot of you guys out here likely have these discs, and you may not even know it. There's no kind of like unified branding scheme about enhanced discs, but these are basically music CDs. You put them in a dashboard of your car, they play just fine.

When you put them in a computer, you get a full multimedia experience. And that is traditionally and almost exclusively delivered with QuickTime. And why do the music guys use QuickTime exclusively? Because we're cross-platform. We talked about distribution earlier. Ninety-five percent of all of our distribution. Is on the PC.

But we've made sure that our PC player looks and acts and feels just like the Mac player. We don't dumb down the codex. We don't make the experience like a lot less interesting than on the Macintosh. And these music guys and the other folks that are authoring the content really respect that and use QuickTime as a result. And some of these discs, as you know, there's hundreds of them in distribution at any time. Thousands of them have been done since these things have started, and some of them are done by some incredibly large stars that sell millions of copies. copies.

And of course, digital cameras. This is pretty interesting. We started this just about a year and a half, maybe two years ago. And now there's over 200 different digital cameras from over 45 manufacturers around the world who distribute QuickTime with their digital cameras. You know, this was the first year when more digital cameras sold than film cameras, and that'll never change. That will always stay that way for the rest of time.

You know, digital cameras have taken off, and we're the only ones who are distributed this way. And what's even more interesting is half of these cameras, 100 of these cameras, actually have a file format license. We license them to QuickTime file format. And in that file format, they can capture, these still cameras capture short video clips, and they record them right in the QuickTime file format on the cameras.

When you plug it into your Mac or you plug it into your PC, you've got a QuickTime movie. If you have QuickTime Pro, you could trim the edges and you could combine a couple of them, and then you could push it up to a website. You could play it. It's just that easy. And so we continue to see a lot of interest in the digital camera area, you know, as we go forward.

So, racing up from the beginning of time to just the beginning of last year. Kind of like a where are things, how are they going, distribution, support, how it's being used. But last year was actually, for me certainly, probably the most exciting year. It was the year where Apple kind of put its foot down on a set of architectural and technological directions. It was last year where we really put a stake in the sand and said we are a company that's interested in and building on standards. And it's not just OS X or FireWire or USB, Bluetooth. I mean, there's standards all over the Macintosh now.

Something you would never think of, you know, 10 years ago, or even 5 years ago, but now it's standards-based. QuickTime is no different. We've had lots of standards-based codecs over the years, but now we've totally embraced the industry standards of MPEG-4. And with QuickTime 6 that we launched last July, we really started down this path in earnest. We jumped in with both feet like no one else and built QuickTime.

We built QuickTime 6 as an ISO-compliant MPEG-4 architecture. You know, it's important to remember that when the International Organization for Standards were deciding how to build MPEG-4, the MPEG for the Internet. MPEG-1 came out in the early '90s, MPEG-2 in the mid-'90s, and very targeted applications, very targeted data rates. But what about an Internet-based MPEG?

And so they could have gone anywhere, created one of their own. Well, they came to us, and we worked with them. And MPEG-4 file format ended up being the most important thing for us. It's based on the QuickTime file format. We're incredibly proud of that. And, of course, we deliver -- we were the first people to deliver a generally available, widely distributed MPEG-4 solution with MPEG-4 video, AAC audio, support for the MP4 file extension, which, you know, kind of marks a file as MPEG-4. And a bunch of other things that do quality of streaming, instant on streaming, the first people to do that, skip protection.

And a host of other technologies came with QuickTime 6. But again, we're proud of that. And again, the most important and the most interesting part is our decision to go with standards. And what that meant was we now, instead of standing by ourselves and just looking at real networks and looking at Microsoft, who are looking back at us, and battling it out based on, you know, a bunch of architectures, trying to figure out -- you know, every once in a while, we would all declare victory, right? Microsoft, real, Apple, we'd all put out a press release.

The most downloads, the most subscriptions, the most Northwest in the U.S. There's some kind of announcement. There's some kind of announcement that we would all routinely make pounding our chests about what we were doing. But while we were doing that, there were some very definite losers. Content providers who were forced to encode in multiple formats to reach the broadest audience. And end users who were forced to download and install and use multiple players to get the broadest range of content. And you all know what happens when you install two or, God forbid, three of these media players on one computer.

You know, they don't exactly coexist peacefully. But this is typical of a nascent industry. This is typical of an industry that's not really a media player. This is typical of an industry that's just getting going and de facto standards battle it out. But like any other industry that matures, the Internet itself, any other set of technologies that have evolved, standards come in and provide a level playing field. Standards come in and provide a set of repeatable, dependable, and reliable technologies that then the industry can embrace and move forward on and get rid of the various battles. And we believe MPEG-4 provides that.

A huge organization of companies that support, use MPEG-4. And what I'd like to do now is invite Rob Conan, who is the president of the M4IF, the MPEG-4 Industry Forum, to come up here and talk for a couple minutes about what's going on in the world of MPEG-4 and where it's all going. Welcome.

Thank you very much, Frank. It's a pleasure to be here. As Frank has said, Apple is a great supporter of open standards, and MPEG-4 is one of the promising open standards that we have around today. Yesterday, I got an email from a very small company. I'd never heard of them from Norway.

They're called Visiware. And they said, "Well, we have this new cool MPEG-4 product. It's a mobile video conferencing system." It has a little tiny camera and a tiny screen in front of your eyes. You're wireless, and you can do video conferencing. It's mobile, and it's using MPEG-4. There was another announcement today. It was made by Microsoft.

Am I allowed to say that word here? And JVC. And they have a new mobile device out, and it supports MPEG-4. This illustrates that small companies and large companies alike have to support open standards, whether they want to or not, because it makes sense and because it makes the consumer happy.

The MPEG-4 Industry Forum, which I represent here and I'm proud to represent here today, is a forum of about 100 companies that all create MPEG-4 technology in various different industries. And I will say a little bit about all the different industries. And they all believe in the value of open standards to create an interoperable multimedia ecosystem where you have the same content representation working across all your devices. So you can move content from your mobile phone to your PC. and to your DVD player and it just works.

Of course, this starts with QuickTime 6 today, which supports MPEG-4 video, MPEG-4 audio, advanced audio coding, the MPEG-4 file format. We see support for MPEG-4 in phones. The 3G and the 2.5G phones in the world, around the world, wherever you go, support MPEG-4. We see it in PDAs. Sony has this really cool Clia PDA, which supports MPEG-4, and they've announced their PS Portable to be released next year, which also does MPEG-4. We see it in DVD players.

Some of them use the brand name Devix, which you may have heard. Devix is just an MPEG-4 compliant implementation. We, of course, see the iPods and iTunes, which use MPEG-4 audio. We see video cameras that do digital video, but also do MPEG-4 if you want to post stuff to... ...the web. And we see a host of internet players that all support MPEG-4. You can get MPEG-4 plugins also for Windows Media and also for real.

So it looks like our original vision of MPEG-4 as something that works across industries and across networks and devices is coming true. And the industry projections are interesting. They all say, initially there will be competition with Microsoft, but in the long run the market will understand the value of an open standard, and they will choose the open standard.

And also because the open standard has been created by people from all these areas, and they understand the needs from all these areas, from the mobile industry, from the CE industry, and from the computer industry. So let's take a look at where we are tomorrow, where we will be. There's a new MPEG-4 video coder coming up.

It's called Advanced Video Coding. The experts in the industry already say it's the best video codec around. It beats all of the other proprietary and standard formats. Advanced Audio Coding, supported in your iPod today and in your iTunes, is already the best audio codec. And with high-efficiency AAC, as it's called, you can get CD-quality stereo audio in 48 kilobits per second. And that's already being used in like Digital Radio Mondial, which is a satellite-based radio system, or XM, which is also satellite-based radio.

And we will see, with AVC, Advanced Video Coding, and with AAC, Advanced Audio Coding, we will see MPEG-4 being adopted in the broadcast industry, in the packaged media like the DVD, in the mobile entertainment industry, in lots of great and funny devices, and of course, and finally, on the internet. And that brings me back to QuickTime and to Frank, and I want to thank you for allowing me to say a few words, Frank. Thanks, Rob. Appreciate it.

Rob mentioned a couple of things that are important. Because of the standard, we want as many people as possible to embrace and use the standard. We look at Windows Media, and the guys at Microsoft have done an incredible job with the video codec and the audio codec. Unfortunately, it's closed, and it's proprietary, and it's only Microsoft's.

Real Networks has dabbled in standards. Real Networks has a plug-in for their player that supports MPEG-4, which is a great start. And we would invite them, and I routinely invite Microsoft, to join us and support MPEG-4, because with the inclusion of MPEG in all of their players, it just only gets better. So, I mean, it's a good point Rob brought out. He's totally platform agnostic. I tend to forget about that every once in a while, and kind of stick to QuickTime.

The last thing we did, the most recent thing we did, was probably one of the most exciting things that I had done with QuickTime since I took this job a number of years ago, is watching us be able to cash in on some of the dividends from our investment standards. I mean, just, not even a year ago, we started shipping, you know, QuickTime 6 with our MPEG-4 support. And now, with QuickTime 6.3, we're delivering the next logical extension, the whole new industry's worth of support for 3GPP, Third Generation Partnership Project. This is a group of companies.

There's actually 434 companies that are members of the 3GPP organization. And they, like the M4AF organization, are dedicated to the use of, the support of, and the management of a standard, but for, not so much for the internet, as much as for wireless devices, cell phones, 3G cell phones to be specific.

This support of QuickTime 6.3 introduced a couple of new, one new codec, a couple of new file formats, basically AAC and AMR audio, MPEG-4 video in H.263, but as a .3GP file. A new file extension. So, we're going to talk about that. And then, we're going to talk about the extension to QuickTime, and one that's incredibly important for this, the mobile world. And including 3G text, support for the 3G file format.

We can play back .AMR files. And, if you guys have ever seen any of these absolutely incredible phones, this one's from NTT DoCoMo. It has two cameras built into it. I mean, I'm looking at you guys now. I'm going to take a picture of you guys. I just took a picture. This is the screen. I mean, it's absolutely incredible.

Unfortunately, it doesn't work here. The camera does. But nothing else really turns on. But when you land at Narita and you turn this phone on, it takes on a whole new meaning. This thing is just incredible, what it can do. And in the back, they have these SD cards. And the SDV format is what these cards read. And we support those as well.

And we're really excited about this. We were in Tokyo just two weeks ago doing the 6.3 launch. And we had 80 members of the press show up to our launch. A gentleman, Natsuno-san, who is the founder of the NTT DoCoMo, is the founder of iMode. If you know anything about what's going on over in Japan, iMode is an incredible service provided by NTT DoCoMo to provide access to information and entertainment. And they've extended that now to iMotion.

Well, Natsuno-san came to our launch. He spoke on behalf. This guy's a rock star over in Japan. He gets like Steve Jobs treatment when he's there. It was wild. And he spoke at our conference, and it was just incredibly well received. Because we took prototype versions of QuickTime 6.3 months ago, back like December or something.

And we gave them to a number of folks, including DoCoMo, who immediately started building out their iMotion content service with all of their thousands of content providers creating content using QuickTime 6.3. And when the service launched, they had all the content they needed. And it just worked based on QuickTime.

The way this works, there's a couple different ways. First is professional content providers with, you know, Macs or PCs with QuickTime-based tools capture their content, get it somehow, and simply encode as a 3G file. I'll show you that in a little bit. Push it out to one of these mobile service providers, to their basic cell towers, and then people with these cell phones can just surf around and find the content and play it back, save it or whatever.

Equally as important and interesting is what you can do as a consumer. You know, instead of taking a snapshot of you guys, I could have captured 15 or 30 seconds worth of video, and then simply go to the address book, dial up another cell phone, and email the movie to you, or dial up an email address and send it to a desktop.

So this is where QuickTime, you know, QuickTime's role is important to point out. QuickTime is not on these phones. This is the beauty of working with the standard. We don't have to port--shut this off so I don't have to look at myself-- we don't have to port QuickTime to every device that wants to be a member of this 3G community.

That's the beauty of standards. We do what we do best, content creation and playback. We're not a 3G company, but we get to play in the 3G industry. So content creation is what we do best, and we continue to do that. And playback on a desktop is what we do best, and we continue to do that. And the standards industry takes care of everything in between, from the servers to the cell phones and all the various technologies required to play in this space.

There's lots of other phones, too. This is the 3650 from Nokia that actually does a beautiful job, and you can actually take pictures and short videos here and use them. The set of services aren't available yet like the Japanese have. It's very much like stepping into the future when you go there, and very depressing to step back into the past when you come back.

It's really amazing if you ever get a chance to try it. And there's a whole bunch of companies. This doesn't even begin to touch the types of companies that are investing in the evolution and development of the 3G industry. It's vast. It's really kind of Japanese-centric right now, moving out to the Pacific Rim, to Europe and the U.S., and hopefully not too distant future, within the next couple of years.

We're meeting with all the companies that are involved in this, all the big infrastructure manufacturers, all the content providers, all the handset manufacturers, to make sure that the standard and that QuickTime 6.3 and the things that we're doing together and the tools that you guys create can all work to create content.

And to talk just a little bit more about the world of 3G, I'd like to invite Roberto Castagna from Nokia to come up here and talk a little bit. Roberto's a long-time friend and colleague, member of the standards community, to talk a little bit about the 3G world. Roberto, thank you. Welcome.

Thank you. Good morning, everybody. Yeah, actually I have two messages that I would like to deliver to you today. One message is a little bit about the past, and the other message is more about the future. And the message about the past is actually a little bit where do we come from, and what did we do together with Apple, especially with the QuickTime team at Apple. And of course, Nokia being a telecom company, we have been always working with standards, because that's the only way that you can have the devices interoperate with each other.

And Nokia is involved in several standardization bodies, but of course the 3GPP is now the standardization body for us. So that's where we are really creating the foundations for the 2.5G and 3G telecommunications. And it was a couple of years ago that we were starting to now address, in addition to the very simple application, which is voice, we started to address other applications. We started to address other multimedia applications on mobile terminals, namely the multimedia messaging, which is what allows you to create content on your terminal and send it to other terminals, and of course also mobile streaming.

And it was pretty clear that the 3GPP needed to address this discussion, and I think we did a fantastic investment a couple of years ago. I have been working with Dave Singer in the MPEG team for several years, and he said, "Why don't you come to the 3GPP?" And that was probably one of the best things that I did in that group, because it really helped us bring together the culture of the open standard multimedia that Apple has had in the PC world for several years into the 3GPP community.

And together with the help of Dave and other companies there, we have developed a multimedia architecture which is entirely based on open standards. We have transport protocols, we have media formats, we have everything based on open standards. And of course we have a 3GPP file format. And it has been really great that very soon after the standard was finalized, then Apple released QuickTime 6.3 that actually supports these 3GPP formats. Today we have a situation in which you can really create content across devices. You can create content on mobile phones, you can create content on personal computers, and this content can travel across a variety of networks. It's really exciting.

You will see demos today and also later during the conference. You can actually create content on GSM phones, transfer to your PC, put titles, do some editing, and then you can send them via email to a phone in Japan, and then it still works. And all of this is based on open standards. This is really great.

And in addition to that, we also have evidence that even industry players that were actually working on proprietary formats are now actually being pulled towards open standards. Since Frank named it, now I feel allowed to name it myself, but also real networks actually is now providing support for 3GPP formats on the mobile version of their player. And this is really exciting because it really means exactly what Rob was saying earlier, that when open standards start to work, then the whole industry is clearly attracted because it's a win-win situation. So this is really great.

And actually, as a thank you to Apple for their work, actually I have here a recyclable wooden mobile phone that I will leave here for Frank, just to remind you about the beauty of open standards. And then when you get tired of open standards, you can also use it to open bottles, which is maybe more interesting. So it's here.

But this was the message about the past. Now the message about the future. And this is very much about your, and maybe my being, developers. This is a developer conference. And typically, let's say until today, the idea of developers has always been a sort of vertical idea. We are here today in the Apple Developers Conference. Of course, we have Nokia developers.

We have Series 60. Series 60 is the software platform that Nokia is also licensing for mobile phone manufacturers. And we have Series 60 developers. The idea of developers were always vertical. But now, especially for the mobile environment, now that we have this fantastic platform of open standards, which already guarantees interoperability across devices and across networks, the exciting message today is that the concept of developer community is not anymore a vertical one.

Today, the developers of Apple and the developers of Nokia and the developers of Sony Ericsson and the developers of Series 60, they're actually creating one single, big developer community which can leverage this open standard platform. And this is a clear case in which the total is bigger than simply the sum of the different parts.

And I think this is really great. I'm extremely excited about being part of that. And I really encourage you to, let's say, to think different. I've seen it on a couple of T-shirts. And really do that. And you have a golden opportunity to expand the scope of your activity.

As developers to the mobile world, you have the opportunity of bridging, creating the famous bridge between the Internet and the mobile world. So I think this is a good day. I think it's great that there is this opportunity. And I strongly encourage you to take advantage of that in your work and in your future activity. Good luck and thanks a lot.

Thanks, Roberto. Appreciate it. Roberto, I think this is the phone you should have put the real player on. I'll show you in the visualizer later. It's wood. Sorry, I can't help myself. So, I'm Last couple of things I wanted to talk about. As we evolve QuickTime, as we move forward, the sea of APIs, 2,400 some odd APIs that make up the QuickTime library of routines and things that you can play with.

One thing we haven't done, we haven't really radically changed the way that you can get access to the codecs that we build into QuickTime. We've had a lot of people ask us, "Well, this is great. You're supporting these new formats. You're supporting these new technologies. You're supporting all this new stuff.

How do we get access? Do we have to write new tools, new applications?" No. Almost every time, the same applications that you use before QuickTime 6.3 came out, one day you're editing your DV file and Final Cut or some other application and you export it and you can save it as an MPEG-4 file. You install QuickTime 6.3 and the 3GPP codecs just show up. And what I wanted to demonstrate--I'll collect all my toys. Tim, I'll leave the clicker right here. What I wanted to demonstrate was making a long walk, a very long walk.

What I wanted to demonstrate to you guys is how this looks. Here's Final Cut Pro, and we have a project in here. This is Red Hot Chili Peppers. This DV file is a short little clip. Remember, the 3G world is not a long format world. You don't really watch hour-long content on your phone. There's certain battery issues that come into play. But it's short form.

As I sat there in the airport, I'm downloading little movie clips and audio clips. And this is a good example of one. This file, this DV file is 193 megabytes. And I'm going to play it, and you can get a sense for what it looks like on the computer.

That's like a classic little clip that you would get on one of the iMotion service. I mean, I found tons of this kind of stuff in Japan when I was there. But now the question is, what do you do? How do you go from almost 200 megabytes to something that will fit on a cell phone over the wireless internet that they have? Well, with installing QuickTime 6.3, we just go to Export, Using QuickTime Conversion, and I can click right here.

And in addition to all the other codecs we support, here's 3GPP. If I select that, I can go a little further. Instead of using the default options, go into the settings. And the guys in engineering did an incredibly elegant job of presenting all the myriad of options that exist for you to tailor the 3G file to the particular network you're on, or the particular format you want to use, whether it's just the general versions, the profiles of 3GPP, video information with sliders, audio with sliders.

There's no better way to adjust this stuff than just grabbing and dragging a slider. And text is really important in the Japanese market, scrolling text, support for emoji and other capabilities. So what I would normally do now is just dial up the settings I want, hit Export, it would happen. And then what I would get is a 3G file.

The 3G file of this movie is just over 200 kilobytes, from almost 200 megabytes to 200 kilobytes, using this format. And when I was in Japan last week, we actually... We actually did send it over the wireless internet and it downloaded right to my phone. We can't do that here. But what I have, if we can switch over to the visualizer.

There we go. What I have is my, this is actually my phone, and we have that video clip on it. So what I'll do is I'll just play that, and you can see what it looks like. It's accessing the SD card where it lives. Can you hear that?

So, 200 kilobit file, and just transfer it over. Thanks. The coolest thing is about this, when we were in Japan doing this press briefing, we were able to right there in front of all the press do these demos live. I mean, we were able to capture some content, we were able to push the content up to an iDisc and email the URL of that movie to my phone.

I clicked it on my phone, it progressively downloaded to my phone, I watched it as it happened, we took some video of the audience and moved it. It was really, it was like doing things over the internet but with no wires, and it really works and it represents kind of the center of the set of activities.

As I promised, I might close and I can show you, this is the phone that Roberto handed to me that I think deserves the real player. So we will continue to follow the standards. Both Roberto and Rob were kind enough to join us here and talk about the future as they see it.

The good news is it's the future as we see it as well. New codex for audio, new codex for video. The standards world is not slowing down at any level. It's accelerating. When you go to these big trade shows like IBC or any of the cell phone shows like CTIA, it's standards everywhere.

And if you want to see the proprietary formats, you get to go to their booth and look at them. And we think that that's just great. We think we backed the right horse, if you will. But we put our money in the right place, and now the dividends are coming back. And we're thrilled with the progress we've made. So with that, I'd like to turn it back to Tim. Thanks for your time, and I'll talk to you guys later.

Thank you, Frank. I think that phone conforms to the TreeGPP standard. Sorry. I had to do that. So, the last 10 months have been a very important year for QuickTime. Really a year of building a foundation of technology on which we would build our future products. And in the last year we built a complete end-to-end solution for the MPEG-4 format, including the live broadcast tool, the QuickTime Broadcaster. We've got the streaming server, which now supports MPEG-4. We've got the QuickTime player, and we've created a whole end-to-end solution.

And I think it's been, first of all, it was an incredible amount of work. But I think as you see the 3G stuff, you start to get the idea of some of the interesting convergence possibilities that arise. And I think you can see from the relatively simple and simplistic even interface that we're providing in the standard players, that there's a lot of opportunity for you as a software developer to come in and build more finely tuned solutions, and to really orient yourself towards some of these new markets where the PC and the consumer electronics industries are starting to come together. The consumer electronics industry knows all about building things into the small devices.

But they really, really need your help when it comes to building polished solutions that bring the Internet and the consumer electronics world closer together. And this is what I think is a great opportunity for all of you. So, now I'd like to turn attention to what's coming down the pike. Things we're working on for Panther and in the coming few months that we'll be able to deliver to you.

The first thing I want to talk about is QuickTime for Java. As you know, QuickTime for Java exists today. We've had it available for a couple of years. It's got a very rich feature set. We're making some pretty significant upgrades to the system. The first thing tracks some changes, fairly major changes that are happening in Apple's overall support for Java. The new version of QuickTime for Java is compatible with Java 1.4.1. Very important. It's the latest version from Sun that's widely deployed. It integrates fully with Java's AWT and swing components.

Very important to the developers we've talked to, we received a lot of feedback about this, is that we wanted to see the Java APIs in QuickTime conform a little bit more closely to the kinds of metaphors that Java programmers expect. And this is things like factories and players and drawers and that kind of a model. And so we've made some API changes that will support this new metaphor. And of course, you can still access all the C APIs for QuickTime through JNI, which is the standard model for how Java connects to C APIs.

If you've got existing apps, well, you're going to have to make some small changes to those applications in all likelihood to be able to make them run in the new world order. But you can continue to use Java 1.3.1, and we're continuing to ship that in the systems, and so all of your existing applications will still be compatible. But there are opportunities to do new kinds of integration with Java, and new kinds of capabilities enabled by Java 1.4 that you'll need to switch over to support if you want those features.

We will make these capabilities available for Mac OS X and for Windows, and we've begun seeding already. As long as you're a member of ADC, Apple's Developer Connection Program, you can go up to the website and you can find out how to get onto the seed list and get the software today.

The next thing I want to talk about is QuickTime for Cocoa. As you know, Cocoa supports QuickTime through a couple of built-in classes. We've got NSMovie and NSMovieView. They use the standard kind of object-oriented model where you've got model, view, controller, and we've created a similar separation in QuickTime in NSMovie and NSMovieView.

We are going to be adding several new classes to our support for QuickTime for Cocoa programmers. Yes, long awaited. It's going to give you a lot more access to the lower-level data structures and some of the lower-level capabilities. Hopefully, this will all be packaged up into an easy-to-consume format. Frank mentioned there's 2,400 different APIs for QuickTime.

If you're just getting started, if your orientation is around building an application that takes advantage of QuickTime, you probably don't want to look for a quick time. You want to learn 2,400 new APIs before you can do anything. This is going to go a long ways to making that task much, much easier.

As with the Java work, you can also combine this with the traditional C API. So if you know those details, or you need to get more advanced functionality that we haven't yet revealed in the Cocoa world, you'll still be able to do that. We haven't yet begun seeding this work.

It's not in your Panther packages, but we're going to begin very shortly. And so if you're interested in this, I would encourage you to contact Guillermo Ortiz. He's providing all of the developer assistance inside of developer relations, and he'll make sure you're on the seed list, and we'll let you know just as soon as the software is available. It's very exciting, and we're really looking forward to seeing what you'll be able to do with QuickTime in Cocoa.

The next thing I want to talk about is performance. Multimedia really isn't much of a phenomenon without good performance. And we spend a lot of time at Apple working on performance. And this breaks down to several different categories. Certainly there is the domain of codecs. We've got a whole stable of codecs. And with every release of QuickTime, we try to make an investment in improving the performance of the ones that we're hearing from you are most important to you.

And the areas where we can see from the ways that QuickTime is being used are getting the most pressure. And in the last several months, we've been making significant enhancements with this standard set of codecs. And that's a real important part of what we're working on. The second area has to do not with the side of getting to the screen, but the part where you get the data from the disk and into the system. I'll be talking in a minute about some higher resolution video.

And video work we've been doing. One of the really important elements of working with high-res video and uncompressed video is being able to manage the super intensive data I.O. that's associated with these formats. We've been doing a lot of work in the plumbing of QuickTime in the areas of the data handlers, the software that gets the data from the disks and hands it off to QuickTime in a timed sort of a way, a synchronized way. And the video media handlers, which are responsible for moving the data through the QuickTime system. We've been doing a lot of work here to be able.

To make QuickTime be able to keep up with the really high data rates that you'd associate with uncompressed HD res video. And we'll talk a little bit more about that shortly. The last area I want to talk about relates to QuickTime and its usability in a multi-threaded application environment. As most of you probably know, putting QuickTime in a multi-threaded environment has been kind of a no-no to date. There are a lot of aspects of QuickTime which have not been multi-threaded.

There are thread safe, there's a lot of aspects of the lower level system which haven't been thread safe to date. But we felt that one of the most important areas where we could provide some substantial improvements in the overall performance and responsiveness of the system would come if we could unlock some of those blockers for you.

And so we've been doing a lot of work inside of QuickTime to be able to allow you to start putting QuickTime functionality on separate threads. Whether this is due to a single thread or a single block. Whether it's doing background compression or background renders or exports or imports.

A whole range of operations that are really important for building high performance and highly responsive applications. And we're going to be delivering this stuff in Panther and I would encourage you to go to some of the other sessions where they'll be talking about the details in much greater depth. But that's a really critical piece of our work for Panther in QuickTime 6.4.

So, the next thing I want to talk about is the QuickTime streaming server. We introduced the QuickTime streaming server a couple of years ago, and it's really been very, very successful for Apple. I want to tell you very quickly what's in it. So the server is a full function server. It's an industrial strength server. It's able to support live streams. It's able to support video on demand.

You can connect the QuickTime broadcaster to it and do all the replication of streams. So you can do multicast, you can do unicast, all that kind of stuff. We also built into the system support for our proprietary skip protection and instant on technologies. These technologies make the experience of streaming much, much easier and more enjoyable for consumers working on the internet.

Skip protection basically allows you to utilize excess bandwidth of the network to be able to buffer the content ahead, so that when there are glitches in the network, as there typically are, packets are lost, it provides enough of a... enough of a buffering ahead so that you can go back and get the packets before they're actually needed, so the customer never even notices that the packets were lost or that the network was flaky.

The instant on, of course, provides the experience of not having to wait when you connect to a stream. The buffering messages basically go away, and it's pretty much like what you would experience if you were playing the files on your local hard drive if you've got the network bandwidth.

We've got a very rich Apache style, plus, we've got a very rich Apache style plug-in architecture for the streaming server. If you haven't looked at this and you're interested in server-oriented media operations, I would strongly encourage you to go to the sessions and hear more about this. The plug-in architecture allows you to customize and extend all kinds of functions in the streaming server.

Really cool. This is all built into Mac OS X Server, but in addition, Apple decided back in the beginning we were going to make the software available through an open source project. We call it Apple's Public Source License, also known as DARPA. We're going to make the software available through a server called the Darwin Server. And you can go out and download the software and you can port it to whatever platform you want. It's already available in binary form for all the major OS platforms. And this has been very, very successful. We've had several hundred thousand developers download and use the server.

[Transcript missing]

Now, we've been having some network challenges over the last 24 hours, so just give them a break if it has trouble. Okay, so as Tim kind of mentioned, QuickTime QTSS Publisher is really designed to solve those problems where you've got your media all encoded, it's all ready to go, now it's time to get it up on the internet. What do you do?

You go and FTP it up. Oh, God, I forgot to hint it. Hint it, put it back up. What's the URL for that? It's like it's always been complicated for people, so we really tried to simplify that whole process for people who are responsible for making the content available on the internet.

So here's the application. When you bring it up, you're going to see your media library. You can kind of view this as kind of the staging area, or it's basically the library of all of your stuff that could be made available for the internet. It's not yet available on the internet. This is just a place where you kind of do all your work. You can view things hierarchically. You can organize things in any kind of directory structure you want to.

You can click over here to the View All view, and you can see everything in your entire library. So once you've decided you're ready to put something on the internet, just click on that. And then move over to the settings for that application. So if anybody's ever tried to put something up on their streaming server and had to go through the whole process of hinting a movie, we basically have now made it one click. So you're done. This movie is now up on the server. It's showing me the URL that is necessary for the viewer to look at this movie. So I'll click on that and it'll actually preview it for me in the player. So that is a lot easier. Great.

So the second problem that people tend to have is setting up playlists. So I'm going to go back to media. This application lets you manage all of your playlists. You can manage MP3 playlists, which are using Icecast, Shoutcast protocol, or you can manage your QuickTime playlists, which can be movies or audio or any kind of QuickTime content. So I'm going to show you how easy it is to create an MP3 playlist.

Let's click New Playlist. Let's say I want to set up a listening party for A new Linkin Park CD that came out. We do this all the time at Apple. Click new playlist, I name it, go find all the content I would like, and I'm just going to select the entire album.

Those actually are the real names for these songs. I dragged them in here. So I could click start and it would just work. The playlist would be up and available on the internet. But when you're doing a listening party, you tend to want to schedule things. You want to play at 3:30 on Friday, right? So we've added functionality to let you schedule when the playlist should start. So I could say I want this to play on July 1st. I want it I'd like to start at 3:30 p.m.

[Transcript missing]

and then going back to the media list.

The other problem people tend to have is that they've got all this content ready, they think they've got it hidden properly, they've got RTSP URLs. It's always been a real pain to kind of get all the HTML all set up. So I'm going to show you now how you can do that.

If you go over to your links view, this is going to show you everything that is available on the internet. So I've got all of these playlists that are available. I'm going to go over to the Avril CD. I can drop in a custom image. This is what's going to show up on the webpage.

I can also really easily generate ref movies for doing multi bandwidth. So you've got people who are listening on modems, people on DSL, and people on LAN. And basically it's just a matter of dragging things over there. It's really easy to do. I'm not going to do that right now. The next thing is we will actually generate the HTML for you. So this HTML is valid if you were to take it and drag it into Dreamweaver or BBEdit or your favorite web authoring application. It would just work. Let me move on to one last thing.

So we've also made it really easy to generate web pages. So select a couple of items, click web page. Got the option to select a template. We're going to ship with a bunch of templates, but we're using an open standard called XSL. So for most of you professionals, you've probably got your own website that has its own look, and you can use this templating format for that. And I'll show you how easy it is to update your content or generate your content. So I'm going to click create page.

What this is going to do is it's going to actually generate all of the HTML, put it into the appropriate web directories for using the Apache web server and Mac OS X server, and then it's going to pop up a preview for me in Safari. So click create page. It's off doing its thing with the web server, and then it shows me a preview and I've got a website with links that work. That's a streaming video. And that's it.

I'm a QTSS publisher. We think this is going to make things a lot easier. There's no more FTP. There's no more getting to the terminal. We think that people are going to be able to use this to set up some really great websites and really get their content out in a much easier fashion. Thanks.

So that's an update on the QuickTime streaming server. Thank you, Chris. I think that's going to be very cool. And that's bundled with Mac OS X Server. Panther. So, the next section I want to talk about is high def video. The domain of high definition video is one of these areas that's kind of out on the bleeding edge. It's one of the coolest things we've been involved with lately, and it's got some unique challenges. And I want to talk to some of those challenges.

The first thing is obviously just take a little inventory of how big are we talking about here when we talk about high def video. This is a representation of the clip that you were looking at on the phone. So, this is sort of 3GP size, 176 by 144. This is sort of your standard Internet type content, 320 by 240, sort of traditional quarter screen kind of stuff. Here's a full NTSC size, 720, this is sort of typical DV type content. And here is the high res HD content. It's really quite remarkable.

Um... Now, that's great, I love the size and everything, but what's it going to cost me to be able to work with this content? It's a real problem. We look at the data rates. I picked kind of an intermediate data rate for the HD content. This is, it can run anywhere from 95 to 155, 160 megabytes a second, depending on exactly how deep color you use and all that sort of.

That's compared to the DV content or the internet video content, which, you know, it's like 2,000 times the size of the 3G data rates. It's just outrageously heavy duty stuff. Let me show you how that actually works, though, and talk a little bit about those challenges. So, let's switch over to the demo machine.

So, the first thing I'm going to do is I'm just going to pull up one of these files. So, this is a 10-bit uncompressed HD. Well, so the first problem I have is it doesn't fit on my screen. So, you know, there's the title there in the middle, so I can just scroll all day long and, you know, it's kind of frustrating.

I can't really get to the bottom of the screen and so I can, you know, I can half size it and I can get down. Okay, now I can see the whole thing. Oh, great, there's some video. This is the Terminator 3 trailer. It's just about to be released. Okay.

Sure, let's go ahead and try and play it and see what this experience is like. Well, that's not really very exciting. So, what's going on here is this file is so darn big that I can't keep up with the disk. And as a consequence, the whole experience is just really chunky.

These images are basically the equivalent of a 2 megapixel still image camera, each single frame. We're talking about a 4 megabyte per frame image. The system really can't keep up with the standard computer. So what do people do when they want to work with this content? Well, if you go to the studios, what you're going to find is you're going to find a whole bunch of really big disks.

You're going to find, no, we don't have one of them in here. And I didn't want to bring one. It's talking about carrying a couple hundred pounds of extra hardware. And my situation actually mirrors pretty well the real world for people who work in these studio professional kind of environments. There are going to be some people who have the hardware to be able to work with this stuff live. But it's really big, it's really expensive, and that means it's not going to be widely available.

As Steve mentioned yesterday, we find ourselves on occasion working with this other company that he has some involvement with, Pixar. And they've been telling us about the problems that they have when they're working with their content. And the problems basically, to us, sounded very similar to the kinds of problems that everybody working with HD content is going to start to have.

And we decided we were going to get involved and see what we could do to try and help out. This is an interesting space for Apple. We care a great deal about content creation and publishing, not just for consumers, but also for the professional space. It's very important to us because it's often the harbinger, the leading edge of what will be consumer technology in the years to come.

And so we like to practice our skills in the pro space, and hope that those, as those things become more and more mainstream, we'll be able to leverage the know-how that we acquired trying to solve these problems. So we built this codec called Pixlet. I want to go back to the slides, please.

Pixlet is this really interesting codec, and I don't think we've ever seen anything that's quite like it. The first thing we wanted to design was something that could handle studio-grade image quality. And this meant, not that I thought it looked good, but it meant that it could pass the sniff test with people at Pixar.

People who do this for a living. In order to be able to achieve this quality, we felt that the way we needed to get there was to leverage some very, very powerful still image technology that's built into JPEG 2000, but we took it and built a proprietary version of this because what we encountered was that the standard algorithms are not computationally sort of feasible on today's hardware.

So we did a whole bunch of work to tune the wavelet in order to be able to run it in real time on today's hardware platforms. If you tried to do this experiment using JPEG 2000, many of the characteristics you'd be able to achieve, but many of them you would not.

And in particular, the performance benchmark you'd need to meet to be able to have this be widely usable would not be possible. So we did a whole bunch of work optimizing both for the G4 and G5 architectures, but also work in the core of the math to enable the wavelet algorithm to be efficient enough.

The codec supports arbitrary resolution. It accepts very deep color, as Steve mentioned. Certainly you can put 8-bit per pixel channel color in there, but you can go deeper if that's important. And it's a variable compression. It's a very simple algorithm. So you can use 20 to 1. You can go up to 40 to 1.

You can go outside that range, but my experience is that most people are going to stay in that range. And that means that it ends up producing for, say, half HD resolution, a data rate that's about the same data rate as DV content. So it's not low data rate.

It's not an internet file format. But it's a format that's very, very usable in the studio. So let me go back to the demo machine and show you what the same clip looks like encoded in Pixlet. And I'll just let this play. The life you know, all the stuff you take for granted, it's not gonna last.

Imagine a world of permanent darkness, where machines control man's destiny. Imagine you were the only one who could stop it. But before you do, something terrible has to happen. So I think you get the idea. It's very, very high quality. In addition, you can do things that you could never do with the HD content. I'm going backwards. Forwards. Oops.

[Transcript missing]

So the next topic I'm going to talk about is color management. Now, first of all, a little bit of background about what this color management problem is. Basically, every device that captures images, captures in a digital format, captures them with certain assumptions about what it means, what the digital values that are associated with the pixels actually mean.

And of significance is the whole question of what does the color, a certain color, end up mapping to in terms of the pixel values. Now, the unfortunate or just the harsh reality of the world is that from device to device, whether it's a camera as in an input device, or a screen, an output device, or a piece of paper coming out of a printer, this is highly variable. And in addition to that, the language of color that has been developed in each of these different market segments is very different.

Creates a tremendous problem if you're working in a professional environment where color accuracy and color fidelity is important. So Apple created a technology that allows you to solve this problem. We basically modeled the source color profile of the source media, source device, and we modeled the destination device. And then we apply transformations to the pixels to be able to adjust and normalize and produce a calibrated result, which is very, very important. So, in the end, we have a result which is accurate. It works really, really well. It's been widely adopted in the professional publishing domain.

But, you know, it was traditionally quite an advanced feature. When we brought this out in 1995, it was computationally pretty expensive. And if color wasn't super critical to what you were doing, it wasn't something you were likely to be willing to pay the computational cost to support. And so it was an opt-in feature. Now let me tell you the second part of the story.

We built these technologies into QuickTime called Graphic Importers and Exporters. Very powerful, very easy to use. Allows you to open or save to a whole range of still image formats. QuickTime supports a whole bunch of them. And, you know, we're adding new ones all the time. A lot of you have written importers, exporters to support your own formats.

One of the things about this is that these images tend to come to you tagged with different color profiles that are supposed to be used in managing this color workflow. We've provided APIs inside of the graphic importers to be able to read these profiles, and then on export to be able to write them out.

Hello. But it was up to you to go and make those calls, pull the data out, and be able to write it back. Our experience is this has led to a very inconsistent experience, and I want to show you that right now. Hello. We're going to go to the demo machine. Oh, okay. We'll just go to the demo machine.

So the first thing I want to do is I've got this Nemo image. And I'm going to open it up with Photoshop. Photoshop's kind of the gold standard. They get it right. So I want to show you what it looks like when it's correct. So there you go. Now I'm going to open the same image in BBEdit.

Now, you don't expect BBEdit to get it right, because it's not really an imaging application. And if you look here, what you can see is that the colors in the BBEdit version are much darker than the colors in the Photoshop version. And the Photoshop version is correct, and this is wrong. I don't mean to slam BBEdit. It's actually a fantastic application, but it actually highlights the problem we want to solve. Most people don't have time to get this stuff right.

Most people don't know that they're even getting it wrong, because how would you ever know if you didn't see the two images side by side? So we want to come over and fix this problem in Panther. And here's what we've done. We've built into Panther some modifications to the graphic importer and exporter routines that basically allow you to automatically apply the profiles kind of behind your back, so that most applications will derive the benefit immediately. Can we switch to demo one? So I'll open it up in Photoshop again.

Open it up in dbedit. And what you should see this time is you're getting a very accurate color. This is going to be great for consumers. The pre-press guys were already getting things right, but consumers are just completely baffled at what's happening to them when they open these images in different applications and they get different experience. This is going to allow us to solve that. Go back to slides, please.

So that's color management with QuickTime. So the last thing I want to talk about is QuickTime audio. Mac OS X introduced a whole new audio architecture, and this is a major innovation, not just in the realm of audio, but in the realm of operating systems. It was a ground-up redesign of the system. We wanted to support all the modern hardware capabilities, and this meant multi-channel, high data rate, high res, greater than 16-bit per sample, high sample rates.

just out of range. Low latency I/O. Anybody working in a professional audio environment knows that if you don't have low latency I/O, you are not working in a pro domain. You can't get your work done. It's just unusable. Mac OS X has the lowest I/O latency for audio of any operating system anywhere. And I would challenge you to put it up against even a wide range of professional audio products. It's incredibly compelling. As I said, we support bigger, deeper, wider formats. It's got a very flexible plug-in format.

If you're interested in audio and you'd like to be able to extend the system, there's a great API for doing that called Audio Unit API, and you can learn all about that at the show. And we wanted to deliver pro-level performance. Well, that was core audio. What are we going to do in QuickTime? It's been a long time since we've done a fundamental rethinking of the QuickTime audio architecture. For Panther, we are doing just that.

It leverages core audio, of course, and it's available on Macintosh, of course. Many of these capabilities will be provided on Windows as well. First and foremost, we break the 64 kilohertz sampling rate barrier. We support 24-bit, 32-bit floating point formats. We support, for the first time, multi-channel formats. And I'm going to show you some 5.1 audio today, but we support all the different formats. There's just a zillion of them, and there's a very flexible architecture inside of QuickTime that allows you to label the tracks appropriately so that they end up going to the right speakers.

And it's very, very powerful. We support this both for uncompressed audio, PCM, as well as for compressed audio formats such as AAC. And we've also done a major rework of the synchronization architecture in QuickTime so that when you have multiple channels, you will be guaranteed sample-accurate synchronization across your various tracks, a promise we do not make today. So let me show you how that works. Here we go.

So the first thing I'm going to do is I'm just going to open up an audio file. And I'm going to show you what we've got here. So I've got six soundtracks. They're PCM, 48 kilohertz. And the first thing you notice is in the channel section here, it says left. If I go through the channels, I've got right-- well, so far, nothing new-- center. LFE, Low Frequency Enhanced, that's the base, subwoofer, left surround, and right surround. So the channels are now labeled, and when we play this, you'll be able to tell.

Okay, well that's good. That's surrounding an audio file. But of course, QuickTime supports video as well, and I want to make sure that you get a chance to see this working in the video context. It's just like everything else in QuickTime. Cut, copy, paste, it all just works. You stick it in the files, you manipulate it exactly the same way you manipulate audio in the current version of the QuickTime, and it works really, really well. This is the Matrix trailer.

Do we proceed? Yes. He is still. Only human. So that's about that. So that's high def, I mean that's surround audio in QuickTime. and that's going to be very cool. So, we are... We are wrapping up just in time. In summary, we've got seven cool new capabilities coming in QuickTime for Panther, and I hope you'll take a look at that.

I think there's something in here for everybody. We've got a billion sessions at the show this week. I'm not going to spend any time reviewing that. Hands-on Labs, content creators, and software developers. Go check that out all day long every day. If you have any questions, you want to get more information about any of these details, contact Guillermo Ortiz, QuickTime man at Apple.com. And that's the show. Thank you very much.
