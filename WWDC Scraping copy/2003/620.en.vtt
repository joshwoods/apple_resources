WEBVTT

00:00:22.610 --> 00:00:22.870
All right.

00:00:22.920 --> 00:00:27.640
Good afternoon.

00:00:27.640 --> 00:00:30.710
Welcome to session 620 IE.

00:00:30.720 --> 00:00:33.550
And for those of you who want
to know what that's about,

00:00:33.940 --> 00:00:34.680
stay tuned.

00:00:34.680 --> 00:00:35.740
You'll find out at the end.

00:00:37.800 --> 00:00:39.700
What are we going to talk about today?

00:00:39.900 --> 00:00:44.000
Reaching out to other,
reaching out to Apple APIs.

00:00:44.000 --> 00:00:50.780
So the basic premise of this talk is
that you have a Java application already,

00:00:50.810 --> 00:00:51.930
for the most part.

00:00:52.020 --> 00:00:54.110
I mean,
if you're going to be writing one,

00:00:54.290 --> 00:00:57.320
that's cool too, but let's assume you
have a pure Java API,

00:00:57.320 --> 00:01:00.130
pure Java application
that runs on our platform.

00:01:00.130 --> 00:01:02.850
And you might, you know,
you might have a Java application

00:01:02.850 --> 00:01:02.850
that runs on our platform.

00:01:03.180 --> 00:01:06.000
You know, think that that's cool because
Java's portable and all that,

00:01:06.000 --> 00:01:07.240
and we think that's great as well.

00:01:07.240 --> 00:01:12.690
But just by having your
application run on our system...

00:01:12.930 --> 00:01:16.400
Apples, APIs,
and services actually reach in and

00:01:16.600 --> 00:01:21.900
extend it for you automatically somewhat
because of some of our built-in features

00:01:21.900 --> 00:01:27.010
and some of the technology we did
with the AWT rewrite in Top of Cocoa.

00:01:27.080 --> 00:01:29.620
However, most of it,
and so we'll see a little bit

00:01:29.620 --> 00:01:33.260
of some of those free extensions
that you get a little bit.

00:01:33.300 --> 00:01:39.160
But also, this talk is about how your app
can reach down and reach into some

00:01:39.240 --> 00:01:43.910
of Apple's APIs and get a little
bit more close to the platform.

00:01:43.920 --> 00:01:46.860
As well as discussing how to
get closer to the platform,

00:01:46.860 --> 00:01:49.600
we talk about some of the
pitfalls of getting a little

00:01:49.600 --> 00:01:51.280
too close to the platform.

00:01:51.280 --> 00:01:56.000
So, we're going to talk, first of all,
about the things you get for free.

00:01:56.000 --> 00:01:59.080
You've seen some of that in a
couple of the sessions already.

00:01:59.080 --> 00:02:02.560
We're going to talk about
the threading architecture,

00:02:02.560 --> 00:02:05.360
which is... In my opinion,
which is the one that counts

00:02:05.360 --> 00:02:08.520
since I wrote the talk,
is the one thing you really need

00:02:08.520 --> 00:02:11.980
to know about when you're talking
about getting into our APIs.

00:02:11.980 --> 00:02:14.690
And we'll give you a lot
of examples about that.

00:02:14.750 --> 00:02:16.100
We'll talk about launchers.

00:02:16.160 --> 00:02:22.080
We'll talk about the embedded movie
view demo of our Cocoa component.

00:02:22.080 --> 00:02:24.860
We'll talk about some
disk recording APIs,

00:02:24.890 --> 00:02:29.630
which I have had the pleasure to discover
and tame over the past few weeks,

00:02:29.630 --> 00:02:32.910
up until even 2 o'clock this morning,
12 hours ago.

00:02:33.550 --> 00:02:36.120
and even a little bit of address book.

00:02:38.130 --> 00:02:42.560
will have, I'll also get up and do a demo
of all that code so that you

00:02:42.560 --> 00:02:44.160
can actually see that it's real.

00:02:44.160 --> 00:02:47.340
And we'll hopefully end even a
little earlier than some of the

00:02:47.390 --> 00:02:53.910
other sessions have because I thought
that this might be a good place

00:02:53.910 --> 00:03:02.010
for us to actually spend some time in
Q&A getting into some of the depth.

00:03:02.010 --> 00:03:03.310
So things you get for free.

00:03:03.310 --> 00:03:03.310
Cocoa input methods.

00:03:03.510 --> 00:03:07.750
We have,
because of the AWT rewrite in Cocoa,

00:03:07.750 --> 00:03:10.690
we use Cocoa to get things in.

00:03:10.690 --> 00:03:14.700
Because of that,
we get multi-language input for free.

00:03:14.700 --> 00:03:16.910
We get Inkwell for free.

00:03:16.920 --> 00:03:19.350
How many of you people
remember the Inkwell demo from,

00:03:19.350 --> 00:03:21.160
I think, I can't remember when it was.

00:03:21.160 --> 00:03:22.580
But it actually works.

00:03:22.580 --> 00:03:25.110
It works without any coding on your part.

00:03:25.120 --> 00:03:31.880
You can actually hook a little pad up to
your device and get the drivers right.

00:03:32.150 --> 00:03:35.580
And Inkwell will actually
do input into your Java app.

00:03:35.710 --> 00:03:37.870
And you haven't had to write
a line of code for that.

00:03:37.920 --> 00:03:42.020
We're not going to demonstrate that today
because of the vagaries of disk drivers

00:03:42.020 --> 00:03:44.000
and Panther and pre-release machine.

00:03:44.000 --> 00:03:44.570
Well, who knows.

00:03:44.620 --> 00:03:47.160
But it is done.

00:03:47.160 --> 00:03:51.920
The accessibility implementation is
the key to many of these free services.

00:03:51.980 --> 00:03:54.320
It gets you, of course, accessibility.

00:03:55.160 --> 00:03:58.530
But it also gets you the Apple script,
GUI scripting that we talked

00:03:58.630 --> 00:04:01.680
about and have demonstrated
in some of the other talks.

00:04:01.680 --> 00:04:04.560
Greg's going to come up and
actually show you more of

00:04:04.560 --> 00:04:06.800
that in just about 30 seconds.

00:04:06.840 --> 00:04:09.720
Menu items is another thing
that you get for free.

00:04:09.740 --> 00:04:13.170
Without any effort or
coding on your part,

00:04:13.170 --> 00:04:17.170
in AWT-style applications,
you get the services

00:04:17.170 --> 00:04:19.600
menu absolutely for free.

00:04:19.600 --> 00:04:20.900
You get the spell checking.

00:04:20.900 --> 00:04:23.920
You get speech,
speakless item kind of thing.

00:04:23.920 --> 00:04:28.200
And... There's just... There's a pile of
things that you actually get for free.

00:04:28.200 --> 00:04:30.780
So it's really cool to
write Java to begin with.

00:04:30.900 --> 00:04:34.080
But it's even cooler to deploy it
on Mac OS X where it's actually

00:04:34.090 --> 00:04:38.720
part of an... It just is... It's
one of our... It's extensible

00:04:38.730 --> 00:04:40.190
just by being on our system.

00:04:40.200 --> 00:04:43.220
Other people can use it in many ways.

00:04:43.220 --> 00:04:47.910
So without further ado,
let's let Greg drive for a little while.

00:04:51.100 --> 00:04:55.240
I'm on demo this one.

00:04:55.240 --> 00:04:55.840
OK.

00:04:56.050 --> 00:05:00.480
Did any of you see the Java State of
the Union where I did this demo?

00:05:00.480 --> 00:05:01.400
No.

00:05:01.400 --> 00:05:02.340
OK, about half.

00:05:02.510 --> 00:05:04.780
So I have a little bit of this demo,
and I've also added to it that

00:05:04.960 --> 00:05:05.750
you'll see in a little bit.

00:05:05.820 --> 00:05:08.800
And I'll talk a little bit more about
how I did it in some more detail.

00:05:08.800 --> 00:05:14.290
So first off, what I have is just a
plain Java application.

00:05:14.510 --> 00:05:16.600
This is a little different than the
one I showed in State of the Union,

00:05:16.600 --> 00:05:17.640
and I'll get to that a little later.

00:05:17.640 --> 00:05:20.100
There's this big area down here
I'll talk about in a second.

00:05:20.100 --> 00:05:22.190
So this is a swing application.

00:05:22.200 --> 00:05:25.040
I used to say it's pure swing,
but not anymore.

00:05:25.040 --> 00:05:25.900
I'll get to that in a sec.

00:05:25.970 --> 00:05:28.880
And it uses the brush
metal look and feel.

00:05:28.880 --> 00:05:30.630
And this is just standard Java.

00:05:30.640 --> 00:05:34.380
This little window to the
right has transparency.

00:05:34.380 --> 00:05:37.520
And we could do things like this.

00:05:37.520 --> 00:05:41.100
And it's a little hard to see,
but you could add a whole

00:05:41.100 --> 00:05:42.660
bunch of little things.

00:05:42.660 --> 00:05:46.020
This is a pure transparent window,
all in pure Java code.

00:05:46.330 --> 00:05:50.920
Just an AWT window where I set it to a
background color that has an alpha value.

00:05:50.920 --> 00:05:53.970
And then the Quartz Extreme Compositor
takes care of the rest.

00:05:54.040 --> 00:05:58.300
And so it's pretty fun that we have this.

00:05:58.380 --> 00:06:00.930
And I also set it up that
it works as an applet.

00:06:00.940 --> 00:06:04.120
And so you could see
that inside of Safari,

00:06:04.120 --> 00:06:07.990
the Java brush metal
look and feel shows up.

00:06:08.120 --> 00:06:10.880
And this is a key point
for a little later.

00:06:10.880 --> 00:06:12.640
When it's an applet, it's a real thing.

00:06:12.660 --> 00:06:13.740
It's a red transparent window.

00:06:13.740 --> 00:06:16.380
When it's an application,
it's a gray transparent window.

00:06:16.380 --> 00:06:19.460
And it's the same darn thing.

00:06:19.460 --> 00:06:21.340
You know, nice, trivial, simple.

00:06:23.900 --> 00:06:29.660
I'll talk a little bit
about how I did this.

00:06:29.660 --> 00:06:32.640
Or some ways -- rather,
what I'm going to talk about is how

00:06:32.760 --> 00:06:36.570
you can see that the native integration
that Java has with Mac OS X can help

00:06:36.570 --> 00:06:38.900
you write better Java applications.

00:06:38.960 --> 00:06:41.650
So first off,
we have the Apple animating here.

00:06:41.920 --> 00:06:45.310
There's a great program on
Mac OS X called Quartz Debug.

00:06:45.480 --> 00:06:48.600
One way to speed up your program
is not to have it draw a lot.

00:06:48.650 --> 00:06:51.870
So one thing that Quartz Debug
has here is flash screen updates.

00:06:52.030 --> 00:06:54.290
When I first wrote this,
I was repainting the entire

00:06:54.290 --> 00:06:57.100
transparent window every time,
and it was a little slow.

00:06:57.160 --> 00:06:59.980
And then I went and figured out
that I can make sure I only draw the

00:06:59.980 --> 00:07:01.700
Java parts that I'm interested in.

00:07:01.850 --> 00:07:04.540
It kind of slows things down a
little bit when Quartz does this,

00:07:04.540 --> 00:07:07.500
but you can make sure that you're
only drawing what you need to.

00:07:08.130 --> 00:07:12.380
So some more of the native
integration that we have.

00:07:12.380 --> 00:07:17.640
I'm going to quit this and start it
over so that I can run my AppleScript.

00:07:17.890 --> 00:07:20.450
What I have is an AppleScript.

00:07:21.900 --> 00:07:27.850
I have an AppleScript here that
will use the Mac OS X accessibility

00:07:27.910 --> 00:07:29.590
and Java accessibility integration.

00:07:29.600 --> 00:07:34.250
The Java APIs have accessibility
where all your users can

00:07:34.250 --> 00:07:35.710
learn about the buttons.

00:07:35.720 --> 00:07:41.430
They can use screen readers or zoom
in where it's large if they have

00:07:42.080 --> 00:07:44.320
difficulty seeing or some such.

00:07:44.320 --> 00:07:48.740
But what's also cool is the accessibility
APIs are also AppleScriptable.

00:07:48.740 --> 00:07:50.390
So it uses the same thing.

00:07:50.610 --> 00:07:54.520
What you see here is it's
telling Java the first window,

00:07:54.520 --> 00:07:55.540
which is this window.

00:07:55.540 --> 00:07:59.730
And then it goes and it finds
the button titled Add Image,

00:07:59.730 --> 00:08:01.130
and it clicks it.

00:08:01.210 --> 00:08:03.380
So the API is pretty simple.

00:08:03.380 --> 00:08:06.380
You have to enable it in
your system preferences under

00:08:06.380 --> 00:08:08.810
Universal Access to get access to this.

00:08:08.820 --> 00:08:11.410
But I'm going to run this really quickly,
and then I'm going to show

00:08:11.410 --> 00:08:12.450
you a little bit more.

00:08:12.460 --> 00:08:14.430
Thanks, Greg.

00:08:14.460 --> 00:08:16.920
First, I'll add the Apple logo.

00:08:21.470 --> 00:08:23.630
Now adding the Java logo.

00:08:23.640 --> 00:08:26.440
So this is pure Java code
being Apple scripted.

00:08:26.490 --> 00:08:30.640
Your program can be used in
ways you don't even understand.

00:08:33.720 --> 00:08:37.060
And lastly a picture of Scott.

00:08:37.080 --> 00:08:40.960
Now it will start bouncing around.

00:08:40.970 --> 00:08:44.130
Now let's turn on the transparency.

00:08:45.710 --> 00:08:47.600
Back to you, Greg.

00:08:47.700 --> 00:08:48.600
Okay.

00:08:48.770 --> 00:08:51.800
So as you can see,
this is a good integration

00:08:51.800 --> 00:08:53.900
between Java and Mac OS X.

00:08:54.110 --> 00:08:55.980
No extra Java code is necessary.

00:08:56.210 --> 00:08:59.990
If you have custom-- so there is
extra Java code necessary if you

00:09:00.090 --> 00:09:02.600
write custom component controls.

00:09:02.670 --> 00:09:06.630
All the standard AWT and swing
components that come from Sun have

00:09:06.630 --> 00:09:09.280
the Java accessibility set up,
so Mac OS X will see them.

00:09:09.500 --> 00:09:11.940
If you have a custom component,
you'd have to wire it up

00:09:11.940 --> 00:09:14.400
to Java accessibility,
and then when it runs on Mac OS X,

00:09:14.400 --> 00:09:17.600
it should work fine.

00:09:17.740 --> 00:09:20.300
So what am I going to show you now?

00:09:20.400 --> 00:09:25.100
I really like the demos
I saw of embedding WebKit,

00:09:25.300 --> 00:09:28.900
and I've even seen some
questions about it on JavaDev.

00:09:29.020 --> 00:09:31.650
The last two days, I've been doing that.

00:09:32.410 --> 00:09:36.650
and it actually took me two days
because I had a bad Panther install.

00:09:36.650 --> 00:09:39.900
But it should have taken only an hour.

00:09:39.900 --> 00:09:43.960
So here's WebKit inside of
a pure Java application.

00:09:47.410 --> 00:09:51.100
It's pretty,
it's so terribly simple how I did this.

00:09:51.100 --> 00:09:54.600
It's really powerful.

00:09:54.760 --> 00:09:57.060
I mean,
just imagine with any Java program,

00:09:57.100 --> 00:10:01.160
you can now display any data
that is visible in a web browser.

00:10:01.180 --> 00:10:04.580
So QuickTime, Flash, you name it,
you got it.

00:10:04.600 --> 00:10:06.980
I even have this set up.

00:10:07.200 --> 00:10:28.000
[Transcript missing]

00:10:28.330 --> 00:10:29.880
But you know.

00:10:29.880 --> 00:10:31.570
Oh, no.

00:10:31.720 --> 00:10:36.360
This did not happen when I-- oh,
I'm disappointed.

00:10:45.330 --> 00:10:47.300
It's no fun.

00:10:47.300 --> 00:10:48.080
There we go.

00:10:48.080 --> 00:10:49.180
Oh, they've got two now.

00:10:49.220 --> 00:10:54.120
OK, well, you know, I did it in a day.

00:10:54.220 --> 00:10:57.370
So I could show you very-- oh, well,
there we go.

00:10:57.440 --> 00:11:00.660
I could show you very
easily how I did this.

00:11:00.760 --> 00:11:05.600
We had this great Cocoa component
that we added to our AWT.

00:11:05.620 --> 00:11:08.490
This is where its
custom Mac OS/Time work.

00:11:08.680 --> 00:11:09.720
That's the NAV code.

00:11:09.780 --> 00:11:11.420
So here's the Java code.

00:11:11.440 --> 00:11:12.410
It's a Cocoa component.

00:11:12.580 --> 00:11:16.590
It's just a component that
you add a single view,

00:11:16.590 --> 00:11:17.950
which creates an NS view.

00:11:18.140 --> 00:11:21.330
You return the pointer to that as an int.

00:11:21.670 --> 00:11:25.340
I added a method called setURL
that you just pass a string to it.

00:11:25.390 --> 00:11:27.480
This is the sendMessage API.

00:11:27.780 --> 00:11:31.370
It is a standard API defined
in the Cocoa component.

00:11:31.550 --> 00:11:35.660
You do some things to set up the
sizes so that it fits in there.

00:11:35.830 --> 00:11:41.310
And on the native side,
I have my-- can you all read that?

00:11:43.210 --> 00:11:43.880
It's very easy.

00:11:43.960 --> 00:11:44.960
I made my own object.

00:11:45.070 --> 00:11:45.580
I allocate.

00:11:45.650 --> 00:11:47.790
You just return it.

00:11:47.900 --> 00:11:51.220
My object is a web view from WebKit.

00:11:52.140 --> 00:11:55.340
I just made it size zero
because Java will take care of,

00:11:55.380 --> 00:11:57.560
the Cocoa component will
take care of resizing it.

00:11:57.640 --> 00:12:01.140
And then when it gets a message,
I translate the Java string

00:12:01.140 --> 00:12:04.590
to an NSString and then
call load request on it.

00:12:04.620 --> 00:12:06.760
So it works very nice and easily.

00:12:06.760 --> 00:12:09.750
What else was I going to show you?

00:12:09.800 --> 00:12:11.920
I believe that's all for now.

00:12:11.920 --> 00:12:15.140
If you want to learn more
about Mac OS X accessibility,

00:12:15.140 --> 00:12:18.880
there's a session tomorrow morning,
and I imagine they'll have

00:12:18.880 --> 00:12:24.480
more than Apple GUI scripting
and the other built-in

00:12:25.080 --> 00:12:27.960
Accessibility APIs that there are.

00:12:27.990 --> 00:12:31.000
More of a real screen reader
that all your users would use.

00:12:31.000 --> 00:12:32.480
Thank you.

00:12:37.470 --> 00:12:39.210
Actually, a great lead-in for some
of the rest of my slides,

00:12:39.210 --> 00:12:40.080
which we haven't seen.

00:12:40.080 --> 00:12:46.980
So I'll be talking a little
bit more about the kinds of

00:12:46.980 --> 00:12:49.040
stuff he was doing right there,
but let's talk just a

00:12:49.080 --> 00:12:52.020
little bit more about that
WebView thing that he was doing.

00:12:52.020 --> 00:12:56.490
So as you saw,
it's nearly trivial to make that happen.

00:12:56.520 --> 00:13:02.580
There's a whole talk on that tomorrow in,
I don't have the time on that one,

00:13:02.580 --> 00:13:03.900
it's session 420.

00:13:04.220 --> 00:13:09.400
So please go to that if you have
specific questions about the do's and

00:13:09.400 --> 00:13:13.100
don'ts of that in a Cocoa context,
admittedly,

00:13:13.460 --> 00:13:18.160
even though what we're going to show
you is most of that still applies even

00:13:18.340 --> 00:13:20.820
with this fancy little Cocoa component.

00:13:20.820 --> 00:13:23.350
The other thing I wanted to talk about...

00:13:25.800 --> 00:13:27.460
was extended AppleScripting.

00:13:27.510 --> 00:13:30.400
So what we've shown you so
far is how to script the GUI,

00:13:30.400 --> 00:13:35.170
how to script the stuff that
comes for free with accessibility.

00:13:35.540 --> 00:13:39.740
So standard scripting,
we've already handled the five common

00:13:39.740 --> 00:13:42.730
events that every app already deals with.

00:13:42.830 --> 00:13:45.280
And in fact,
you get a handle on that with

00:13:45.280 --> 00:13:48.100
the extended AWT more directly.

00:13:48.310 --> 00:13:51.190
So with accessibility,
we get automatic GUI scripting,

00:13:51.240 --> 00:13:52.240
as you just saw.

00:13:52.260 --> 00:13:53.830
So advanced scripting.

00:13:53.840 --> 00:13:55.900
I mean,
if there are AppleScript aficionados

00:13:55.900 --> 00:13:58.150
in this audience,
then they're kind of

00:13:58.200 --> 00:14:01.850
looking... I can't see them,
luckily, because they'll be looking

00:14:01.850 --> 00:14:04.410
at me a little askance,
because advanced scripting

00:14:04.410 --> 00:14:09.630
has to do with building up a
dictionary of terms and actions and

00:14:09.670 --> 00:14:12.280
properties about your application.

00:14:12.280 --> 00:14:17.300
So in Greg's case,
if he were a true AppleScript aficionado,

00:14:17.300 --> 00:14:21.140
he would have had people, you know,
to represent Greg and Scott,

00:14:21.160 --> 00:14:24.590
and he would have told the people to
hop and dance and fight and jump around.

00:14:24.730 --> 00:14:27.040
He would have told them to jump,
and he would have told them

00:14:27.040 --> 00:14:28.020
to do other kinds of things.

00:14:28.040 --> 00:14:30.920
So if this is the kind of
AppleScripting you want to do,

00:14:30.920 --> 00:14:33.230
then you have to learn a lot
more about AppleScripting.

00:14:33.280 --> 00:14:38.380
So what happens is that Cocoa offers
lots of wrappers for these nowadays.

00:14:38.380 --> 00:14:43.500
They're all in NSScript something
or other classes,

00:14:43.500 --> 00:14:46.820
and you add dictionaries and
hang them onto your... hang

00:14:46.870 --> 00:14:49.580
them onto your app wrapper.

00:14:49.580 --> 00:14:54.760
The interesting thing about
Cocoa is it's got a bunch of

00:14:54.890 --> 00:15:00.010
built-in key value kinds of notions,
such that if you go, you know,

00:15:00.010 --> 00:15:03.940
set jump height, if there's a jump height
instance variable,

00:15:03.940 --> 00:15:07.330
then Cocoa will go and find that
and update it for you automatically.

00:15:07.420 --> 00:15:12.220
Now, the very interesting thing is
that we've had AppleScripting

00:15:12.220 --> 00:15:16.350
at this level available to
Cocoa Java programmers for some time,

00:15:16.370 --> 00:15:17.260
and it's been around
for several years now,

00:15:17.260 --> 00:15:19.300
and it's in one of the examples there.

00:15:19.300 --> 00:15:26.080
So if you like Cocoa a lot,
and you like Java a lot,

00:15:26.080 --> 00:15:28.950
we've always kind of steered
you towards Cocoa Java.

00:15:28.960 --> 00:15:35.170
The glue that goes on right now
between extending AppleScript and

00:15:35.410 --> 00:15:41.070
the basic technology that's in there
right now is not quite unraveled

00:15:41.070 --> 00:15:46.340
enough for us to get to this more
advanced level for pure Java.

00:15:46.360 --> 00:15:48.360
So we're going to have to wait and
see if we can get to that level.

00:15:48.370 --> 00:15:49.360
So we're going to have to wait
and see if we can get to that

00:15:49.360 --> 00:15:50.360
level for swing-based programs.

00:15:50.360 --> 00:15:52.300
I'm not saying it's impossible,
it's just I wasn't able to

00:15:52.300 --> 00:15:53.540
unravel it in the past two weeks.

00:15:53.540 --> 00:15:55.270
So there may be hope for it, though.

00:15:55.280 --> 00:15:59.730
That's just kind of a caveat
on what we've done so far.

00:16:01.170 --> 00:16:02.630
Let me talk about
threading architecture now.

00:16:02.630 --> 00:16:07.380
This is the one thing you need to
remember at the end of this talk.

00:16:08.880 --> 00:16:10.530
So what's a thread?

00:16:10.530 --> 00:16:18.560
I'm going to assume that all of you
have sat in front of at least JDB or

00:16:19.470 --> 00:16:25.080
hopefully even GDB and have seen a
backtrace of your program running.

00:16:25.140 --> 00:16:27.760
If you've seen a backtrace,
then you know what a thread is.

00:16:27.760 --> 00:16:30.080
If you've seen multiple threads,
you obviously know what

00:16:30.080 --> 00:16:30.940
multiple threads are.

00:16:30.940 --> 00:16:33.220
So here's just an example backtrace.

00:16:33.230 --> 00:16:34.620
I took out a few frames.

00:16:34.650 --> 00:16:36.380
So what's a thread?

00:16:36.380 --> 00:16:37.540
Just basic review.

00:16:37.540 --> 00:16:41.270
From the kernel's viewpoint,
it's a set of registers in the stack

00:16:41.270 --> 00:16:42.920
that goes with the flow of control.

00:16:42.920 --> 00:16:44.570
It gets scheduled and all that.

00:16:44.640 --> 00:16:46.360
Processes start with one thread.

00:16:46.470 --> 00:16:47.360
This is Unix.

00:16:48.710 --> 00:16:51.550
The first thread spawns
others if they're needed,

00:16:51.570 --> 00:16:56.480
and on a Macintosh for a GUI application,
there are always lots of threads running.

00:16:56.500 --> 00:17:06.500
The key thing about Java is that the
first thread on any Mac OS application,

00:17:06.500 --> 00:17:13.050
the first thread has special duties
because the first thread initializes

00:17:13.050 --> 00:17:16.750
the GUI libraries underneath everything.

00:17:16.850 --> 00:17:20.900
Whether that's Carbon or
whether that's Cocoa,

00:17:20.970 --> 00:17:22.100
this has always been true.

00:17:22.100 --> 00:17:26.420
We have had to stand on our heads
in 1.3.1 in order to not kick off

00:17:26.560 --> 00:17:28.600
Carbon at the wrong time in the past.

00:17:28.720 --> 00:17:32.190
We are not standing on our head
anymore in the 1.4.1 stuff.

00:17:32.310 --> 00:17:35.380
We took the bull by the horns and
actually said we have to start

00:17:35.380 --> 00:17:37.280
things up a little differently.

00:17:37.280 --> 00:17:40.660
So let's talk about that a
little bit in more detail.

00:17:40.660 --> 00:17:43.950
If you have code that you've gotten,
launch code that you've

00:17:43.950 --> 00:17:46.760
gotten from somewhere,
it just looks like this.

00:17:46.780 --> 00:17:52.780
You gather all your arguments,
you find this VM thing, JNI create VM.

00:17:52.780 --> 00:17:57.410
Then once you have a VM,
you go off and you find your main class.

00:17:57.500 --> 00:18:01.460
You get all these method
descriptors and whatnot.

00:18:01.460 --> 00:18:04.540
You invoke it, it goes off,
it does something.

00:18:04.540 --> 00:18:09.910
Sometimes it creates a J frame,
which brings up your app,

00:18:09.910 --> 00:18:13.610
and then the main thread just returns.

00:18:13.680 --> 00:18:19.780
On Apple, however... We have to do things
a little bit differently.

00:18:20.110 --> 00:18:25.780
What we do is we take these steps and
we move them over into another thread.

00:18:25.780 --> 00:18:28.900
Then of course we have to put a
little bit of code back there to

00:18:28.900 --> 00:18:31.780
spawn the thread and to get it going.

00:18:31.940 --> 00:18:36.760
Then the key element there is that
very first thread has to do this

00:18:36.770 --> 00:18:39.780
thing called running the run loop.

00:18:40.140 --> 00:18:43.780
Maybe you know what that's about,
maybe you don't.

00:18:43.780 --> 00:18:46.770
You'll learn a little bit more
about it in just a moment.

00:18:48.330 --> 00:18:54.630
So, as I said before,
the very first thread has the duty of,

00:18:54.630 --> 00:18:54.630
you know,

00:18:54.760 --> 00:18:59.280
Getting the VM started,
or of gathering arguments and

00:18:59.280 --> 00:19:01.610
stuff and running the run loop.

00:19:02.150 --> 00:19:06.190
It will, if it's done properly,
spawn off a second thread,

00:19:06.230 --> 00:19:09.780
which goes off, launches,
finds your main, kicks in your main,

00:19:09.780 --> 00:19:11.470
and hangs out there as long as you want.

00:19:11.480 --> 00:19:13.660
As long as that first thread
does something interesting,

00:19:13.660 --> 00:19:15.960
gathers IO or whatever,
you're going to have a second thread.

00:19:15.960 --> 00:19:19.050
If it's got GUI,
if it's launched a JFrame,

00:19:19.090 --> 00:19:23.190
then there's a thread that
we've created on your behalf,

00:19:23.430 --> 00:19:25.900
which we call the AWT event queue thread.

00:19:27.200 --> 00:20:21.300
[Transcript missing]

00:20:21.460 --> 00:20:27.570
The AWT peer implementation takes that
input as a Cocoa event and transforms it

00:20:27.570 --> 00:20:33.600
and sticks it over onto a queue that's
read by the AWT event queue thread.

00:20:33.600 --> 00:20:37.770
And so that's how threading
threads get set up and run on

00:20:37.770 --> 00:20:40.180
every Mac OS X application.

00:20:40.180 --> 00:20:43.690
So we don't really care if
that second thread that just

00:20:43.770 --> 00:20:45.840
started a J frame goes away.

00:20:47.130 --> 00:20:51.740
But if you had just taken raw
code from some other system over

00:20:51.740 --> 00:20:55.090
and that first thread went away,
then guess what?

00:20:55.210 --> 00:20:57.090
There's no thread running any run loop.

00:20:57.190 --> 00:20:59.620
And so your UI is still
kind of hanging out there,

00:20:59.620 --> 00:21:01.860
but there's no input
ever going to go to it.

00:21:01.930 --> 00:21:05.770
And so that's what happens when
you just take straight code that

00:21:05.840 --> 00:21:08.940
deals with libraries and getting
stuff started and try to port it

00:21:09.170 --> 00:21:10.990
directly to a Mac OS X system.

00:21:12.490 --> 00:21:15.240
So,
that whole business we call launchers.

00:21:15.240 --> 00:21:19.860
So we have actually two standard
mechanisms on the system already.

00:21:19.890 --> 00:21:24.060
We have the one that underlies
user bin Java and user bin Java H.

00:21:24.060 --> 00:21:26.010
You know,
there's this one little magic program

00:21:26.010 --> 00:21:27.580
that does all those little duties.

00:21:31.490 --> 00:21:34.640
Oh, the second one is our
launcher stub that we set up.

00:21:34.660 --> 00:21:39.160
If you use jar bundler or if you
use Xcode to build an application,

00:21:39.160 --> 00:21:42.460
then there's a little tiny little
C program that gets started.

00:21:42.510 --> 00:21:46.780
It's found in your contents Mac OS,
whatever your app name is,

00:21:46.830 --> 00:21:52.440
and that knows how to do lots of stuff,
including this little thread business.

00:21:52.480 --> 00:21:55.270
The launcher,

00:21:56.780 --> 00:22:01.540
The launcher also knows how to read
the Info.plist and set up those

00:22:01.560 --> 00:22:04.900
arguments and pick which VM you run.

00:22:04.900 --> 00:22:08.110
I'm not gonna talk about
picking VMs right now.

00:22:09.100 --> 00:22:14.100
It's a little dicey.

00:22:14.100 --> 00:22:18.220
The JNI code that gets everything
started and gets run is,

00:22:18.280 --> 00:22:21.190
of course, in your Java VM framework.

00:22:24.010 --> 00:22:27.060
So some of you, however,
are going to be bound and

00:22:27.080 --> 00:22:30.370
determined to write a launcher.

00:22:30.390 --> 00:22:33.010
We still advise you to try not to.

00:22:33.980 --> 00:22:38.690
But if you have existing
threads of legacy code,

00:22:38.690 --> 00:22:41.510
and not everybody comes
here with pure Java code,

00:22:41.510 --> 00:22:44.360
some of it actually glues
down into sockets or glues

00:22:44.410 --> 00:22:48.540
into other kinds of stuff,
and it's just got to be there.

00:22:48.540 --> 00:22:53.440
If you have threads of legacy code,
if you have, say, properties that change

00:22:53.480 --> 00:22:57.110
on a per-launch basis,
different maximum memory sizes,

00:22:57.110 --> 00:22:58.520
different...

00:22:58.740 --> 00:23:02.320
attributes for a graphic state,
things like that.

00:23:02.370 --> 00:23:06.270
That's a kind of a semi-legitimate
reason to not live with our

00:23:06.270 --> 00:23:08.300
standard launcher scheme.

00:23:08.300 --> 00:23:11.790
If you have a non-standard main,
for example,

00:23:11.790 --> 00:23:15.710
there's no rule once you launch
your own VM that you have

00:23:15.860 --> 00:23:18.000
to go through a static main.

00:23:18.000 --> 00:23:21.400
That's just a user-bent Java rule.

00:23:21.400 --> 00:23:24.320
It's not a hard and fast rule.

00:23:25.880 --> 00:23:29.820
If you have any other reason,
I know there's somebody out here

00:23:29.820 --> 00:23:33.570
in the audience who I won't name,
but...

00:23:33.910 --> 00:23:36.620
has so many reasons he can't
explain them to me why they

00:23:36.620 --> 00:23:38.370
have to have their own launcher.

00:23:38.440 --> 00:23:42.240
So we figured that we might as well give
you some example code to get you started

00:23:42.240 --> 00:23:43.950
because it is a little bit of a pain.

00:23:43.950 --> 00:23:48.540
So Ted Jusevic, who helped give an
excellent talk yesterday,

00:23:48.690 --> 00:23:54.340
has written a little example of that and
it's on the web in the place that normal

00:23:54.340 --> 00:23:58.320
examples are at developerapple.com,
Java.

00:23:58.320 --> 00:24:00.920
Go to the examples page and find that.

00:24:01.260 --> 00:24:02.270
Please start with that code.

00:24:02.300 --> 00:24:02.880
It's good.

00:24:02.880 --> 00:24:03.460
It works.

00:24:03.900 --> 00:24:09.480
It takes you through all those steps
that are tedious but necessary.

00:24:09.480 --> 00:24:13.320
I'd like to talk now a little
bit about something that's also,

00:24:13.320 --> 00:24:16.200
this one's not actually out on the web.

00:24:16.200 --> 00:24:19.230
This is in the developer examples.

00:24:19.230 --> 00:24:25.200
It's part of what is now the
Java SDK except that in the most recent

00:24:25.200 --> 00:24:29.270
release we somehow forgot to include it.

00:24:29.430 --> 00:24:30.600
So it's in previous releases.

00:24:30.600 --> 00:24:33.880
It will come back, but it's the NSMovie.

00:24:33.900 --> 00:24:35.900
I'll give you an example.

00:24:35.900 --> 00:24:40.080
And what that does is that shows
you how to embed Cocoa components.

00:24:40.180 --> 00:24:44.130
Now Greg just got up there and did a
whirlwind tour of Cocoa components and

00:24:44.140 --> 00:24:47.450
I'll give you one maybe just as fast,
maybe a little bit longer,

00:24:47.460 --> 00:24:48.400
a little bit later.

00:24:48.500 --> 00:24:55.360
But the basic idea is that, as you know,
AWT peers are built upon Cocoa's app kit.

00:24:56.500 --> 00:25:03.390
We have provided EAWT Cocoa component
in order for you to play around with

00:25:03.390 --> 00:25:07.930
your own views or somebody else's views
that they've written in Cocoa already.

00:25:07.940 --> 00:25:10.620
This is not quite the base.

00:25:10.620 --> 00:25:12.830
It's not really the
subclass of the peers,

00:25:12.920 --> 00:25:15.260
but it's sort of a peer
for the rest of you.

00:25:15.260 --> 00:25:16.350
It's not a peer for us.

00:25:16.430 --> 00:25:18.040
It's a peer for the rest of you.

00:25:18.150 --> 00:25:22.290
So the Cocoa component arranges
for all kinds of stuff to happen.

00:25:22.380 --> 00:25:23.440
It fields those events.

00:25:23.440 --> 00:25:24.880
It paints.

00:25:24.880 --> 00:25:27.200
It paints on the AppKit main thread.

00:25:27.200 --> 00:25:33.090
And you as a subclasser just implement a
few methods in order to interact with it.

00:25:33.340 --> 00:25:35.980
And it's very simple to
use as you saw for that.

00:25:36.020 --> 00:25:40.400
The architecture is there to get
messages from one side to the other.

00:25:40.400 --> 00:25:44.760
And as I said,
we have example code out there.

00:25:44.960 --> 00:25:47.260
But I thought I'd actually
show you how simple it is.

00:25:47.260 --> 00:25:51.280
So again, the basic idea here is
that we have a Java peer.

00:25:52.010 --> 00:25:52.890
We have a Cocoa view.

00:25:52.900 --> 00:25:54.790
You need to keep them related.

00:25:54.800 --> 00:25:58.560
So the Java part's going to sit
in the Java painting hierarchy.

00:25:58.560 --> 00:26:03.350
And secretly over on the AppKit side,
there's going to be a similar

00:26:03.350 --> 00:26:04.530
hierarchy going on as well.

00:26:04.540 --> 00:26:06.540
So we have to keep those
two things related.

00:26:08.380 --> 00:26:13.610
from the Java viewpoint,
use subclass Cocoa Component.

00:26:14.590 --> 00:26:19.050
And you load your little native library.

00:26:19.230 --> 00:26:25.370
And you create your little special view.

00:26:25.370 --> 00:26:25.370
So,

00:26:26.710 --> 00:26:30.020
Cocoa component actually
calls that method createNSVue.

00:26:30.040 --> 00:26:32.300
You don't even have to worry about that.

00:26:32.340 --> 00:26:33.780
You have to add some value to it.

00:26:33.860 --> 00:26:37.460
So in this case,
we're gonna define three constants.

00:26:37.470 --> 00:26:41.340
In the movie view case,
we're gonna give them a URL to load,

00:26:41.360 --> 00:26:45.070
tell them to play, tell them to stop,
and these are gonna be linked to buttons.

00:26:45.230 --> 00:26:50.470
So when the buttons hit and ask
it to play or ask it to stop,

00:26:50.620 --> 00:26:55.500
they're gonna send this little message
with this little integer value across

00:26:55.500 --> 00:26:59.500
and in the play and stop value,
no extra values.

00:26:59.500 --> 00:27:03.310
In the setURL, we're actually gonna
send the string across.

00:27:03.500 --> 00:27:05.560
So that's pretty easy
from the Java perspective.

00:27:05.560 --> 00:27:09.940
On the Cocoa side, you have a little bit
more complicated class.

00:27:10.010 --> 00:27:15.490
You saw that AWT message class
that Greg described earlier.

00:27:15.530 --> 00:27:16.720
It's the same implementation.

00:27:16.720 --> 00:27:19.060
In this case,
it fields that message ID and does a

00:27:19.100 --> 00:27:21.540
switch on the three values it could have.

00:27:21.630 --> 00:27:22.980
Here you see the Cocoa.

00:27:22.980 --> 00:27:25.500
I don't know how many people
have seen Objective-C syntax,

00:27:25.500 --> 00:27:27.300
before.

00:27:27.360 --> 00:27:29.770
I'm not going to give
a mini tutorial on it,

00:27:29.910 --> 00:27:32.590
but trust me that it's,
apart from the syntax,

00:27:32.610 --> 00:27:33.740
very much like Java.

00:27:33.740 --> 00:27:37.700
So in this case,
the NSMovie alloc is going to go

00:27:37.700 --> 00:27:40.700
allocate a little instance of that guy,
and then he's going to initialize

00:27:40.700 --> 00:27:41.770
it with the following method.

00:27:41.790 --> 00:27:42.640
Init with URL.

00:27:46.200 --> 00:28:09.500
[Transcript missing]

00:28:10.580 --> 00:28:15.460
The trickiest part for many
people is writing the JNI code.

00:28:15.510 --> 00:28:20.420
So you gotta have a JNI code
in order to create that NSView.

00:28:20.460 --> 00:28:22.340
And here we have the Cocoa Movie View.

00:28:22.340 --> 00:28:23.800
That was the subclass we just did.

00:28:23.800 --> 00:28:25.790
We alloc and edit.

00:28:26.110 --> 00:28:30.680
Tell the movie to go ahead and start
showing and then return that pointer

00:28:30.680 --> 00:28:33.900
back to be managed automatically
for you on the other side.

00:28:33.930 --> 00:28:35.790
That's pretty simple.

00:28:35.880 --> 00:28:38.370
So simple, we made it an example,
and you all have all read it,

00:28:38.370 --> 00:28:39.890
and I've just been boring
you up to this point.

00:28:39.960 --> 00:28:41.420
So this is stuff you haven't seen before.

00:28:41.420 --> 00:28:43.360
Let's talk about disk
recording for just a moment.

00:28:43.380 --> 00:28:45.970
Now, disk recording...

00:28:47.780 --> 00:28:49.240
comes in two frameworks.

00:28:49.240 --> 00:28:56.380
It comes in a C-based straight framework
disk recording where using plain C,

00:28:56.380 --> 00:29:03.250
carbon-like C, you can have DR, la-di-da,
la-di-da, la-di-da stuff.

00:29:03.260 --> 00:29:06.860
If you like programming in Carbon,
then I'm not sure why

00:29:06.870 --> 00:29:08.370
you're in this room.

00:29:08.400 --> 00:29:12.260
There's also an Objective-C framework
for this as well.

00:29:13.050 --> 00:29:16.410
So you don't have to
program at the CF level,

00:29:16.490 --> 00:29:18.920
but if you don't like Objective-C,
you can.

00:29:18.920 --> 00:29:24.000
There's also an Objective-C-based
disk recording UI framework.

00:29:24.020 --> 00:29:27.560
Now this is actually very interesting.

00:29:31.830 --> 00:29:37.900
Both frameworks use a run loop to
drive the work and drive notifications.

00:29:37.900 --> 00:29:42.100
So you basically set up a
little input on your run loop,

00:29:42.100 --> 00:29:46.130
tell it to start working,
and then notifications are sent

00:29:46.130 --> 00:29:48.100
to you when it does its thing.

00:29:48.100 --> 00:29:49.570
And you don't know how it's doing it.

00:29:49.570 --> 00:29:50.890
Is it spinning another thread?

00:29:50.890 --> 00:29:52.420
Is it talking to another process?

00:29:52.420 --> 00:29:55.280
You don't know, and frankly,
you don't care.

00:29:55.280 --> 00:29:57.580
What you do know is that
those notifications is where

00:29:57.580 --> 00:29:58.800
you interact with this.

00:30:00.300 --> 00:30:01.990
So what is true?

00:30:02.000 --> 00:30:05.480
What's true in 1.3.1?

00:30:05.500 --> 00:30:10.410
If you try to interact
directly with the GUI,

00:30:10.550 --> 00:30:14.900
that the framework that the
AWT uses to implement the peers.

00:30:14.900 --> 00:30:19.260
If you interact with it directly,
you are treading on very thin

00:30:19.260 --> 00:30:26.940
ice because the things we have
to do to own those peer classes

00:30:26.940 --> 00:30:26.940
and keep track of what's going on

00:30:27.700 --> 00:30:28.980
Well, we do what we have to do.

00:30:29.130 --> 00:30:31.940
And sometimes if you go
try triggering GUI actions,

00:30:31.940 --> 00:30:35.520
independent of what we're doing,
we get into all kinds

00:30:35.540 --> 00:30:37.510
of crossing problems.

00:30:37.510 --> 00:30:40.230
I won't mention locks by name right here,
but if you've ever

00:30:40.230 --> 00:30:42.800
tried any of this stuff,
I think you know what I mean.

00:30:43.660 --> 00:30:49.100
Nevertheless, I had to ask myself,
how hard would it be to at least add

00:30:49.100 --> 00:30:52.250
a burn button to that movie view?

00:30:52.250 --> 00:30:54.900
So let's talk about
burn logic for a moment.

00:30:55.670 --> 00:30:56.980
So what do you need to do to burn a CD?

00:30:56.980 --> 00:31:00.210
You have to get what's
known as the device,

00:31:00.210 --> 00:31:02.080
that actual CD thing.

00:31:02.080 --> 00:31:05.360
You can tell it to open the floppy tray,
close it.

00:31:05.360 --> 00:31:07.560
You can ask whether
there's media in it or not.

00:31:07.710 --> 00:31:09.380
It's all kinds of fun stuff to do.

00:31:09.430 --> 00:31:11.450
You get a device and a folder to burn.

00:31:11.450 --> 00:31:14.870
You set up this notification center,
like I've talked about.

00:31:14.870 --> 00:31:18.000
You start the burn,
then you process the notifications.

00:31:18.060 --> 00:31:19.070
No big deal.

00:31:19.070 --> 00:31:21.530
And then finally, afterwards,
you clean up.

00:31:21.600 --> 00:31:25.580
So just to make it very clear,
what we need to do is we

00:31:25.580 --> 00:31:25.580
need to do a lot of work.

00:31:25.580 --> 00:31:30.890
So what we're going to do in this case
is you're sitting in the AWT side.

00:31:31.480 --> 00:31:34.960
and you need to send that
message to go burn a movie.

00:31:34.970 --> 00:31:39.090
It needs to go over to the
AppKit main thread and actually

00:31:39.090 --> 00:31:44.020
trigger those actions to trigger work
on the AWT or trigger work on the

00:31:44.020 --> 00:31:46.560
AppKit side on the main event loop.

00:31:47.030 --> 00:31:50.820
So as you process notifications, however,
you actually want to give

00:31:50.970 --> 00:31:53.900
feedback to the AWT side.

00:31:53.900 --> 00:32:02.060
And so you have to use JNI methods
to call in and just set up some work.

00:32:02.500 --> 00:32:05.630
So let me jump to a demo right now.

00:32:05.670 --> 00:32:08.190
There's one other thing.

00:32:09.720 --> 00:32:14.910
thought was in my slides
that didn't happen yet.

00:32:14.910 --> 00:32:14.910
So I'll talk about that directly.

00:32:15.200 --> 00:32:17.410
If we could switch to demo machine two.

00:32:17.600 --> 00:32:19.000
You've done it.

00:32:19.050 --> 00:32:19.560
Very nice.

00:32:19.560 --> 00:32:22.900
So, in this demo,
what I'm also going to try to do

00:32:22.900 --> 00:32:24.240
is show you a little bit of Xcode.

00:32:24.240 --> 00:32:29.250
Now, it has been said that Xcode does
not natively deal with Java build

00:32:29.280 --> 00:32:32.230
targets and things like that,
but, well.

00:32:32.430 --> 00:32:32.910
That's true.

00:32:32.910 --> 00:32:38.840
And it still supports all the
Jam-based targets and stuff that have

00:32:38.840 --> 00:32:42.000
existed for the past several years.

00:32:42.000 --> 00:32:47.590
So I actually started with an old
project and converted it and then said,

00:32:47.820 --> 00:32:49.990
well,
maybe there's secret stuff going on.

00:32:50.130 --> 00:32:53.100
So I'm just going to throw away
that and start from scratch.

00:32:53.100 --> 00:32:58.130
So I actually started from scratch
and rebuilt the demo that is out

00:32:58.130 --> 00:33:01.560
there in the developer examples case.

00:33:02.120 --> 00:33:04.560
And it all worked except
one little glitch.

00:33:04.560 --> 00:33:05.800
I won't even tell you about that.

00:33:05.940 --> 00:33:08.100
But let's...

00:33:10.120 --> 00:33:12.480
Let's show you one thing, first of all.

00:33:12.670 --> 00:33:13.960
Let me take one more detour.

00:33:13.960 --> 00:33:15.520
Let me launch Address Book.

00:33:15.630 --> 00:33:21.040
You'll notice that I've actually
set the Address Book up as me.

00:33:21.040 --> 00:33:22.830
I've set me up as me.

00:33:22.850 --> 00:33:23.500
Oops.

00:33:23.500 --> 00:33:25.880
That's just for reference.

00:33:25.880 --> 00:33:31.000
So now let's show the Cocoa component.

00:33:33.600 --> 00:33:37.740
So if you haven't seen this GUI before,
now you do.

00:33:37.740 --> 00:33:43.090
I've actually set it up in sort
of full screen mode a little bit.

00:33:43.400 --> 00:33:51.400
[Transcript missing]

00:33:54.460 --> 00:33:58.460
So notice that this whole view
switched to be the find results.

00:33:58.460 --> 00:34:04.220
Now, this button lets you pull up an
all-in-one kind of editor window.

00:34:04.220 --> 00:34:08.740
And the virtue of that window here is
that you can flip between your address,

00:34:08.740 --> 00:34:11.240
between your find results,
very easily and take a

00:34:11.280 --> 00:34:12.450
look at what's going on.

00:34:12.560 --> 00:34:16.750
Notice that if I go back and
start picking other items,

00:34:16.790 --> 00:34:21.430
then that top window reflects
what's going on on the left.

00:34:21.880 --> 00:34:25.760
And in this case, the find results,
the address book find results,

00:34:26.080 --> 00:34:27.390
drive that list up there.

00:34:27.400 --> 00:34:29.550
So the first part...

00:34:32.020 --> 00:34:35.140
is in my application.

00:34:35.140 --> 00:34:37.360
What I'm going to have
is a little status field,

00:34:38.200 --> 00:34:44.090
and it's going to call a JNI routine
to get the first name of me and

00:34:44.440 --> 00:34:51.510
set the status field up with a
welcome message with the me name.

00:34:52.340 --> 00:34:57.020
On the hard part, you know, the C,
the diving into Apple APIs,

00:34:57.020 --> 00:34:58.500
is right there.

00:34:58.500 --> 00:35:01.500
Now, if that's not visible,
I can zoom it in a little bit.

00:35:01.500 --> 00:35:02.960
Is that visible in the back?

00:35:04.340 --> 00:35:05.140
seems to be.

00:35:05.160 --> 00:35:08.100
All right,
so how hard is it to get me's first name?

00:35:08.130 --> 00:35:10.580
You have an address book factory.

00:35:10.580 --> 00:35:12.640
You get the shared address book.

00:35:12.740 --> 00:35:14.410
There's one and only address book.

00:35:14.470 --> 00:35:16.760
And you ask it for me.

00:35:16.760 --> 00:35:21.700
You send the me message
to the result of that,

00:35:21.850 --> 00:35:27.970
and it brings back an AV person object,
which is just a big, fancy dictionary,

00:35:27.970 --> 00:35:27.970
big, fancy property list.

00:35:27.970 --> 00:35:27.970
Yeah.

00:35:28.360 --> 00:35:30.660
So you ask it for the
first name property,

00:35:30.660 --> 00:35:36.490
you get back a string,
and you return that first name

00:35:36.490 --> 00:35:40.340
turned into a Java string.

00:35:40.340 --> 00:35:45.660
And that's a utility up...

00:35:47.380 --> 00:35:47.960
about here.

00:35:47.960 --> 00:35:49.380
It takes a string.

00:35:49.380 --> 00:35:55.090
NSStrings are Unicode characters,
so basically we get the length,

00:35:55.220 --> 00:35:57.640
make sure it's within range,
and then you get Unicode

00:35:57.740 --> 00:36:00.250
characters out of it,
filling up this array first

00:36:00.250 --> 00:36:04.100
with Unicode characters,
then you make a new string and return it.

00:36:04.130 --> 00:36:05.260
No big problem.

00:36:05.440 --> 00:36:10.210
Let's actually show this app running
so you'll see what's going on.

00:36:11.460 --> 00:36:12.440
So here it is.

00:36:12.490 --> 00:36:14.640
There's my name right there.

00:36:14.670 --> 00:36:18.230
And we got that by fetching the
address book on launch and just

00:36:18.370 --> 00:36:20.480
to personalize it a little bit.

00:36:20.820 --> 00:36:24.290
Now, what this is,
what I've turned this in is sort of

00:36:24.290 --> 00:36:26.700
my personal movie viewer application.

00:36:26.700 --> 00:36:31.140
I have my movies on my iPod,
and so I just plug the iPod into here,

00:36:31.140 --> 00:36:34.150
and when I'm done with this application,
I'll just switch over to the

00:36:34.280 --> 00:36:37.550
iPod and click an application,
and it'll have a little custom

00:36:37.560 --> 00:36:41.600
little application to show the
movies that I also hold on there.

00:36:41.600 --> 00:36:45.890
So, for example, we see this...

00:36:48.010 --> 00:36:51.480
is coming along,
and we have some photos that

00:36:51.480 --> 00:36:55.280
I made when I was on vacation
over in the Greek islands.

00:36:55.400 --> 00:36:58.350
So the first one is of a pink Cadillac,
of all things.

00:36:58.530 --> 00:36:59.990
So you get the idea.

00:37:00.240 --> 00:37:02.630
You get to start and stop the movie.

00:37:02.720 --> 00:37:05.850
And the fun thing here is, of course,
you get to burn.

00:37:05.960 --> 00:37:07.580
So I'm going to press Burn.

00:37:07.630 --> 00:37:12.260
Oops, we have some status right away that
shows up and says we have no media.

00:37:12.330 --> 00:37:17.210
So let's go ahead and put some media in.

00:37:23.830 --> 00:37:26.800
Now, what I'm going to do is,
in this case, I'm going to let the finder

00:37:26.840 --> 00:37:28.480
intercept the media insert.

00:37:28.480 --> 00:37:32.230
We're going to let the finder say,
we don't really know what to do with it.

00:37:32.240 --> 00:37:33.280
We're just going to leave it around.

00:37:33.280 --> 00:37:36.790
Then this program is going to
come up and capture that and burn.

00:37:36.800 --> 00:37:40.410
So what we do is we ignore it
from the finder's perspective,

00:37:40.410 --> 00:37:41.660
and we try burning it again.

00:37:41.660 --> 00:37:45.550
And voila, it's preparing the disk.

00:37:45.620 --> 00:37:48.380
It's writing the disk.

00:37:51.080 --> 00:37:51.900
Closing the disk.

00:37:51.900 --> 00:37:54.170
Actually,
I'm not quite sure how it happens

00:37:54.170 --> 00:37:57.950
all that fast because the verify
step takes an extraordinary length

00:37:58.120 --> 00:37:59.920
of time from my perspective.

00:38:19.580 --> 00:38:26.130
We have a CD with the
Greek movies burned onto it.

00:38:26.580 --> 00:38:29.060
Let me show you a couple other things.

00:38:29.390 --> 00:38:31.210
First of all,

00:38:34.420 --> 00:38:37.980
If we turn on this funny thing
called Character Palette,

00:38:38.010 --> 00:38:40.820
you see this icon show up over here.

00:38:40.940 --> 00:38:43.100
Now, here I am in my AWT view.

00:38:43.420 --> 00:38:45.060
Voila, look at that.

00:38:45.090 --> 00:38:50.140
That menu item magically appeared
during the middle of my running app.

00:38:50.170 --> 00:38:52.540
My running app, well, no, my running app.

00:38:52.580 --> 00:38:54.240
That was not there before.

00:38:54.260 --> 00:38:56.960
It'll go away if I turn it off.

00:38:59.600 --> 00:39:00.670
Now, what does that palette do?

00:39:00.680 --> 00:39:04.410
For this app, actually, not a whole lot.

00:39:04.490 --> 00:39:09.560
I added this funny little text window
just so that we could show that if

00:39:09.560 --> 00:39:13.790
you were really interested in adding,
say, Cyrillic alphabetic

00:39:13.900 --> 00:39:17.610
characters to your app,
you could put some chas in there.

00:39:17.780 --> 00:39:20.510
But in any case,
if this input panel was actually of

00:39:20.590 --> 00:39:24.880
importance to you or your customers,
you should know that you haven't written

00:39:24.880 --> 00:39:26.930
a line of code to get it to happen.

00:39:26.930 --> 00:39:31.330
So I just think that's one of
the fabulous kinds of built-in

00:39:31.450 --> 00:39:34.030
things that we give you for free.

00:39:34.040 --> 00:39:35.920
Let me...

00:39:38.210 --> 00:39:43.090
Let me actually show you
some of those code steps.

00:39:44.230 --> 00:39:44.270
While we do that,

00:39:51.200 --> 00:39:59.500
[Transcript missing]

00:40:03.860 --> 00:40:06.540
So let's find everywhere I've
written disk burning into the app.

00:40:06.550 --> 00:40:09.920
I actually put numbers on them
so that we could actually see the

00:40:09.920 --> 00:40:11.460
steps a little bit more carefully.

00:40:11.460 --> 00:40:13.040
So here's disk burning one.

00:40:13.220 --> 00:40:18.510
We add a button that says, movie view,
go ahead and burn whenever I click.

00:40:18.690 --> 00:40:21.380
Click that,
and that's the button's action.

00:40:21.420 --> 00:40:25.890
Second step is, as we saw before,
to send--

00:40:26.300 --> 00:40:28.790
The second one, sorry.

00:40:29.250 --> 00:40:32.440
To send the message
across to the other side.

00:40:33.870 --> 00:40:35.100
Very hard.

00:40:35.220 --> 00:40:42.500
Third step,
we've switched on Burn Movie and--

00:40:43.640 --> 00:40:48.880
If we've selected a movie,
we go ahead and say, do burn on it.

00:40:49.090 --> 00:40:51.880
Now, take a look at this little
bit of code right here.

00:40:51.900 --> 00:40:59.680
What we've taken as input
is file:// something.mov.

00:40:59.700 --> 00:41:03.390
What we want is the
file stuff stripped off,

00:41:03.410 --> 00:41:06.620
and actually the whole last component,
we're actually gonna burn the directory

00:41:06.620 --> 00:41:10.090
that contains the movie in it.

00:41:10.270 --> 00:41:13.510
In Cocoa,
to get the last half of the string,

00:41:13.570 --> 00:41:15.820
or to strip off the
file colon slash slash,

00:41:15.820 --> 00:41:17.260
you say substring from index.

00:41:17.260 --> 00:41:21.100
To get everything but
the last path component,

00:41:21.100 --> 00:41:23.190
you say string by deleting
last path component.

00:41:23.200 --> 00:41:26.300
So in that one little line,
we've actually stripped that

00:41:26.310 --> 00:41:28.020
URL down to a directory path.

00:41:28.060 --> 00:41:31.100
We tell ourselves to burn it.

00:41:32.580 --> 00:41:35.270
Now this is actually not a lot of code.

00:41:35.460 --> 00:41:36.670
What do we need to do?

00:41:36.760 --> 00:41:39.980
You find out all the devices
that are on the system.

00:41:40.390 --> 00:41:44.100
This code isn't totally robust
because there might not be

00:41:44.100 --> 00:41:47.590
an object at index zero,
but we just grabbed the first one.

00:41:48.670 --> 00:41:50.900
We acquire what's known
as a media reservation.

00:41:50.900 --> 00:41:54.730
Go to the DR documentation to
figure out what that means.

00:41:54.850 --> 00:41:56.490
So that just means we grab the device.

00:41:56.640 --> 00:41:58.960
We ask, is the media present?

00:41:59.000 --> 00:42:00.660
If not, we send a message back.

00:42:00.930 --> 00:42:03.860
We ask if the media is blank,
because they could have added

00:42:03.860 --> 00:42:04.930
something else in there.

00:42:05.140 --> 00:42:09.060
Again, we send status and
release the reservations.

00:42:09.110 --> 00:42:12.150
Assuming we've got media,
we've got the device, everything's going,

00:42:12.250 --> 00:42:14.760
we allocate a burner object.

00:42:14.820 --> 00:42:18.230
We set up the writing information.

00:42:18.490 --> 00:42:22.860
And we set up this notification center,
and we tell it to go

00:42:22.860 --> 00:42:24.470
ahead and start burning.

00:42:25.800 --> 00:42:27.750
So the burns come in,
you get a property list,

00:42:27.750 --> 00:42:29.680
a dictionary of the results.

00:42:29.690 --> 00:42:31.200
You get like the current status.

00:42:31.250 --> 00:42:33.970
So you say, is this thing done?

00:42:34.010 --> 00:42:37.190
And you send status
back to the other side.

00:42:37.430 --> 00:42:40.410
You release it, you release the burner.

00:42:40.440 --> 00:42:45.420
Certain statuses have a percentage,
so it's preparing, it's writing,

00:42:45.420 --> 00:42:47.340
and all those sorts of stuff.

00:42:47.500 --> 00:42:51.980
We get the percentage and quantify it
back into an integer and send it back.

00:42:52.000 --> 00:42:56.580
So that's actually not a lot of code.

00:42:57.260 --> 00:42:59.340
I actually wrote this routine twice.

00:42:59.460 --> 00:43:02.800
This routine I wrote between
1:00 and 2:00 in the morning.

00:43:03.160 --> 00:43:09.800
Let me show you what
it used to look like in

00:43:12.460 --> 00:43:13.830
for core foundation style code.

00:43:13.900 --> 00:43:19.500
We have GetDevice.

00:43:20.200 --> 00:43:26.400
You get the array, you get the count,
you get the value at the index,

00:43:26.400 --> 00:43:28.390
you return it.

00:43:29.160 --> 00:43:33.500
You have to turn that
string into an FS ref.

00:43:33.500 --> 00:43:38.300
I actually did the character
stripping and stuff in this guy.

00:43:38.300 --> 00:43:41.230
You have to ask whether it's reserved.

00:43:41.340 --> 00:43:44.540
You have to go get some status,
look up some dictionary values.

00:43:46.170 --> 00:43:47.840
Luckily,
I didn't have to write all this code.

00:43:47.840 --> 00:43:50.300
I stole it from the disk burning example.

00:43:50.380 --> 00:43:55.500
Here's that callback notification
routine that takes those strings

00:43:55.500 --> 00:44:02.720
and turns them into useful error
messages and sends them back across.

00:44:02.720 --> 00:44:05.470
So, in any case, this is an entire file.

00:44:05.470 --> 00:44:09.020
It's about four times as long
as the Objective-C stuff.

00:44:09.130 --> 00:44:12.610
I'm really happy to say that
there is some good Cocoa code

00:44:12.650 --> 00:44:14.370
to make that simpler.

00:44:16.230 --> 00:44:22.660
Let me show you Xcode
in a little bit of...

00:44:24.360 --> 00:44:26.510
Let me show it to you
in action a little bit.

00:44:26.590 --> 00:44:29.160
First of all,
let's go back to those find results.

00:44:29.240 --> 00:44:33.930
So I had that funny, weird...

00:44:38.360 --> 00:44:41.290
text field, and I don't really like that.

00:44:41.430 --> 00:44:44.310
So let's go ahead and
rebuild the project.

00:44:47.310 --> 00:44:52.860
So as we rebuild the project,
we will get some errors

00:44:52.860 --> 00:44:54.780
and warnings show up.

00:44:56.880 --> 00:45:03.770
So we get all these funny
errors and warnings.

00:45:03.770 --> 00:45:03.770
Now, what are they about?

00:45:03.770 --> 00:45:03.770
Well, it's because at one in the
morning I didn't convert

00:45:04.200 --> 00:45:13.200
[Transcript missing]

00:45:13.790 --> 00:45:18.980
And if the whole help system were here,
we would have had something pop up there.

00:45:19.010 --> 00:45:20.220
But that didn't quite happen.

00:45:20.220 --> 00:45:27.010
Let's pop it up by hand and see whether
or not we can find this constant.

00:45:35.710 --> 00:45:38.590
So in fact, it's not too far away.

00:45:38.620 --> 00:45:39.950
So there's actually a status.

00:45:40.040 --> 00:45:44.610
It turns out that each of
these guys have a counterpart

00:45:45.300 --> 00:45:56.700
[Transcript missing]

00:45:58.020 --> 00:46:01.840
All the way through,
but let's go ahead and do this again.

00:46:02.000 --> 00:46:06.890
You'll see that we end up with
fewer warning messages this time.

00:46:07.000 --> 00:46:09.700
So we've seen the documentation window.

00:46:09.700 --> 00:46:14.070
Sometimes I have found it useful to
actually pull up the entire build window

00:46:14.200 --> 00:46:19.800
that you may have seen or remember
from the project builder instantiation.

00:46:19.880 --> 00:46:24.990
But in any case,
sometimes link errors and other

00:46:25.100 --> 00:46:29.790
things are best resolved using
the standard build window.

00:46:29.980 --> 00:46:34.190
So let's see whether or
not we can run this again.

00:46:36.300 --> 00:46:42.180
In this case, let's pick this guy.

00:46:43.610 --> 00:46:46.950
So at the beginning,
I said that I'd tell you

00:46:47.010 --> 00:46:49.720
what that IE stood for.

00:46:49.760 --> 00:46:54.040
Turns out that on some motorcycles,
they have model numbers.

00:46:54.050 --> 00:46:55.950
And in this case,

00:47:00.300 --> 00:47:02.500
This happened to be my latest toy.

00:47:02.500 --> 00:47:05.300
It happens to be a Monster 620 IE.

00:47:05.310 --> 00:47:09.190
And so I just decided
I had to call it IE.

00:47:11.090 --> 00:47:12.520
for whatever reason.

00:47:12.630 --> 00:47:17.140
So motorcycles are great to look
at when they're not moving at all.

00:47:17.160 --> 00:47:20.270
But of course, they're even nicer

00:47:20.500 --> 00:47:25.700
[Transcript missing]

00:47:45.200 --> 00:47:46.780
We're going to be using a
lot of wheel off the ground,

00:47:46.780 --> 00:47:50.190
so luckily the resolution on
this isn't very good for that.

00:47:50.210 --> 00:47:53.480
But, you know,
you've got to be really careful

00:47:53.480 --> 00:47:56.200
when you're out on public roadways.

00:48:00.410 --> 00:48:01.600
That's it for the demo.

00:48:01.600 --> 00:48:06.640
I think I've shown most
of what I needed to see.

00:48:06.640 --> 00:48:10.420
Let's flip back to slides.

00:48:10.530 --> 00:48:12.520
If I could find my clicker.

00:48:14.800 --> 00:48:19.760
And actually, the address book-- that's
where that slide went.

00:48:19.760 --> 00:48:22.070
I knew I had an extra slide in there.

00:48:22.330 --> 00:48:25.200
The address book
APIs are as I showed you.

00:48:25.230 --> 00:48:30.150
What I tried to do in this talk is--

00:48:30.290 --> 00:48:32.870
is giving you a sample of
what you can try to get into.

00:48:33.090 --> 00:48:34.700
Nope, I need to go back to this demo.

00:48:34.700 --> 00:48:35.640
I'm sorry.

00:48:35.640 --> 00:48:40.430
I have to show you one other
piece of code back here.

00:48:46.500 --> 00:48:48.830
There's also a nice little piece of code.

00:48:48.860 --> 00:48:55.200
Here it is.

00:48:55.200 --> 00:48:58.440
Now this is super succinct.

00:48:58.440 --> 00:49:05.310
This is run a setup panel
to go pick your device.

00:49:05.520 --> 00:49:10.740
sets the speed, sets it multi-session,
sets all kinds of options

00:49:10.740 --> 00:49:11.700
on a nice little panel.

00:49:11.700 --> 00:49:14.760
And when you're done
setting up the panel,

00:49:14.760 --> 00:49:15.340
you hit OK.

00:49:15.340 --> 00:49:16.190
It comes back.

00:49:17.970 --> 00:49:25.290
And then you pop up this burn
progress panel and tell it to go run.

00:49:25.320 --> 00:49:29.050
It's very simple, and it doesn't work.

00:49:29.080 --> 00:49:30.380
It's a shame.

00:49:30.420 --> 00:49:34.950
But it is because the
AWT needs to own things,

00:49:35.020 --> 00:49:39.000
needs to own locks that's going
on over on the AppKit side.

00:49:39.050 --> 00:49:42.500
And this burn panel
just gets very confused.

00:49:42.500 --> 00:49:46.320
So there are some things you can do,
and there are some things you can't do.

00:49:46.940 --> 00:49:50.510
You guys have to be careful about
what you try to do because you want

00:49:50.680 --> 00:49:53.080
your apps to run for a long time.

00:49:53.190 --> 00:49:55.840
I guess that's the best
message I have here.

00:49:55.940 --> 00:49:58.050
All right, let's go to some Q&A.

00:49:58.080 --> 00:49:59.170
Okay.

00:50:04.440 --> 00:50:05.460
We still have a couple other talks.

00:50:05.460 --> 00:50:06.620
I'm sorry.

00:50:06.620 --> 00:50:08.500
The WebKit API is tomorrow.

00:50:08.500 --> 00:50:12.500
We have a feedback session
tomorrow morning in the marina.

00:50:12.500 --> 00:50:16.020
And we have our performance talk,
of course, tomorrow afternoon,

00:50:16.020 --> 00:50:19.280
which has a lot of great details
about what's really going on with

00:50:19.290 --> 00:50:22.630
the processors and what we've
done to help make that happen.