WEBVTT

00:00:30.800 --> 00:00:32.990
Thank you, thank you.

00:00:32.990 --> 00:00:34.240
It's been a long day.

00:00:34.240 --> 00:00:35.540
How are you guys doing?

00:00:35.540 --> 00:00:36.800
Everybody okay?

00:00:36.800 --> 00:00:37.800
Excellent.

00:00:37.800 --> 00:00:40.810
So today's going to be a really great
session for those of you who are

00:00:40.840 --> 00:00:44.110
either new to the platform or have
been here a long time and want to see

00:00:44.110 --> 00:00:45.970
what's happening on the Cocoa side.

00:00:45.980 --> 00:00:47.960
We've got two really great people.

00:00:47.960 --> 00:00:50.620
We have Matthew Formica,
who is a developer

00:00:50.620 --> 00:00:53.370
technical support engineer,
and we have Tina Huang,

00:00:53.370 --> 00:00:57.140
who is an application framework engineer,
and they're both going to talk to you

00:00:57.270 --> 00:01:02.200
about why you should be using Cocoa and
how cool you can do things with it.

00:01:02.200 --> 00:01:07.400
So let's start with Matthew.

00:01:10.740 --> 00:01:13.140
Thank you, Jason.

00:01:13.160 --> 00:01:17.480
We are going to get right
into the material here today.

00:01:17.740 --> 00:01:21.220
What we're going to talk
about today is what Cocoa is.

00:01:21.280 --> 00:01:24.350
Some of you may be here, as Jason said,
for the first time.

00:01:24.490 --> 00:01:26.940
You're not really familiar with Cocoa,
although you may have

00:01:26.940 --> 00:01:27.750
already heard about it.

00:01:27.830 --> 00:01:30.900
We're also going to talk about
what some of the benefits of

00:01:30.970 --> 00:01:33.980
Cocoa are for you as a developer,
and how you can use it in a

00:01:34.020 --> 00:01:38.300
variety of application settings,
and we'll have some demos along the way.

00:01:39.830 --> 00:01:41.460
So let's dive right in.

00:01:41.700 --> 00:01:43.000
What is Cocoa?

00:01:43.080 --> 00:01:46.970
Well, what we like to say is
that Cocoa is a powerful,

00:01:47.030 --> 00:01:49.570
full-featured, easy-to-use,
object-oriented framework

00:01:49.700 --> 00:01:50.900
for Mac OS X development.

00:01:50.930 --> 00:01:55.470
And that's kind of a mouthful,
but basically it means more rapid

00:01:55.600 --> 00:01:59.890
productivity for you as a developer,
thanks to its object-oriented

00:01:59.890 --> 00:02:01.010
underpinnings.

00:02:01.130 --> 00:02:05.000
And we believe at Apple that it is,
in fact, the fastest way to full-featured

00:02:05.000 --> 00:02:08.240
applications on Mac OS X.

00:02:10.530 --> 00:02:13.490
This is an architecture diagram
illustrating some of the

00:02:13.490 --> 00:02:15.280
layers that make up Mac OS X.

00:02:15.360 --> 00:02:18.900
At the bottom is Darwin, the Unix layer.

00:02:18.920 --> 00:02:21.450
On top of that sits some
graphics technologies,

00:02:21.460 --> 00:02:25.100
Quartz, OpenGL, and QuickTime,
and then a layer of frameworks.

00:02:25.170 --> 00:02:29.180
These are the layers that your
applications will typically write to,

00:02:29.210 --> 00:02:32.150
such things as Java, Carbon, and Cocoa.

00:02:32.260 --> 00:02:36.090
And what we're going to
focus in on today is Cocoa.

00:02:37.250 --> 00:02:41.630
We talk about Cocoa as
this one monolithic thing,

00:02:41.670 --> 00:02:44.050
but when we drill down a bit,
we see that there are really two

00:02:44.180 --> 00:02:49.830
core frameworks that make it up,
Foundation and AppKit.

00:02:50.600 --> 00:02:52.800
The way this works is like so.

00:02:53.060 --> 00:02:55.970
Foundation is where the
non-graphical user interface

00:02:56.000 --> 00:02:57.870
components of Cocoa reside.

00:02:58.010 --> 00:03:02.180
Such things as strings and networking,
scripting,

00:03:02.250 --> 00:03:05.370
and file system calls reside here.

00:03:05.460 --> 00:03:08.620
If you're writing an application
that doesn't use a user interface,

00:03:08.680 --> 00:03:12.180
you could just link against Foundation,
and you'd be set.

00:03:12.260 --> 00:03:15.510
However, if you do want to use a
graphical user interface,

00:03:15.510 --> 00:03:17.410
you'll want to add in AppKit.

00:03:17.640 --> 00:03:21.740
AppKit contains classes for
controls and windows and other

00:03:21.740 --> 00:03:26.590
things that do use a user interface
as part of the application.

00:03:27.560 --> 00:03:29.500
We can actually go beyond this.

00:03:29.620 --> 00:03:32.380
Besides these two core
object-oriented frameworks,

00:03:32.450 --> 00:03:35.500
Foundation and AppKit,
there are a variety of other pieces

00:03:35.500 --> 00:03:40.290
of the system that work together to
make the Cocoa experience what it is.

00:03:41.180 --> 00:03:44.240
These include things like
our development tools.

00:03:44.320 --> 00:03:47.270
Project Builder and our
newly introduced Xcode,

00:03:47.330 --> 00:03:50.280
along with Interface Builder and
the performance tools on the system,

00:03:50.350 --> 00:03:54.410
all have features carefully
designed for Cocoa development.

00:03:55.000 --> 00:03:58.300
On top of this,
we have powerful and dynamic

00:03:58.300 --> 00:04:01.680
languages that provide the
support to make Cocoa possible.

00:04:01.680 --> 00:04:04.750
Objective C and Java.

00:04:07.800 --> 00:04:11.480
All of these work together to
help you write code faster.

00:04:11.690 --> 00:04:15.120
The framework APIs are mature,
they've been around for a long time,

00:04:15.120 --> 00:04:17.590
and they've been designed
from the ground up with an

00:04:17.610 --> 00:04:20.210
object-oriented approach in mind.

00:04:20.550 --> 00:04:23.060
Besides this,
they leverage Objective-C and

00:04:23.060 --> 00:04:28.640
the dynamic runtime that it
provides in a few different ways.

00:04:28.770 --> 00:04:32.530
Objective-C and Cocoa code
are weakly typed,

00:04:32.580 --> 00:04:36.830
and so they allow you to reuse more code
because the code you write will tend to

00:04:36.830 --> 00:04:39.570
be more generic right out of the box.

00:04:39.750 --> 00:04:44.690
In addition, there isn't a need for such
complexities as templates,

00:04:44.820 --> 00:04:48.680
often a source of confusion in C++.

00:04:50.510 --> 00:04:54.760
Objective-C and the dynamic
runtime also enable you to create

00:04:55.020 --> 00:04:56.900
more effective shared frameworks.

00:04:56.960 --> 00:05:00.570
You don't have application
binary interface issues like

00:05:00.650 --> 00:05:03.980
you might with other languages,
and you can extend base

00:05:03.980 --> 00:05:08.500
classes without breaking
applications that depend on them.

00:05:09.070 --> 00:05:11.490
And thirdly,
we have this concept of categories.

00:05:11.500 --> 00:05:13.600
This is a language feature
which is very powerful.

00:05:13.600 --> 00:05:18.360
You can add methods to existing classes
without having the source code do them.

00:05:18.380 --> 00:05:23.760
So, for example, if you write, say,
a program that's a million lines of code,

00:05:23.760 --> 00:05:27.160
and you use our
Unicode-compliant string class,

00:05:27.180 --> 00:05:30.570
NSString, throughout that code,
and then discover there's one more

00:05:30.570 --> 00:05:33.930
method you wish all strings in your
program could take advantage of,

00:05:33.960 --> 00:05:37.820
you don't have to go and replace
your use of NSString with a subclass.

00:05:37.820 --> 00:05:41.430
Simply add a category to
NSString and add that method.

00:05:41.460 --> 00:05:43.090
Very powerful.

00:05:48.300 --> 00:05:51.660
And all of this adds up to help you be
faster to market with your products.

00:05:51.700 --> 00:05:54.720
You can spend your time developing
your application's unique features

00:05:55.320 --> 00:05:57.730
instead of reinventing the wheel.

00:05:58.290 --> 00:06:00.160
and enables you to write less code.

00:06:00.300 --> 00:06:04.700
Cocoa keeps simple things simple
and makes complex things possible.

00:06:04.760 --> 00:06:07.700
It raises the baseline for
the code that you write,

00:06:07.790 --> 00:06:11.120
so you're writing your
application's unique portion.

00:06:11.710 --> 00:06:14.300
In addition,
your application can automatically

00:06:14.300 --> 00:06:18.300
get new features over time
without recompiling or reshipping.

00:06:18.490 --> 00:06:24.030
Thanks to the dynamic nature of
Objective-C and the Cocoa runtime,

00:06:24.160 --> 00:06:27.100
your application can take advantage
of features as soon as they

00:06:27.100 --> 00:06:28.720
appear in the operating system.

00:06:28.900 --> 00:06:31.370
They just automatically show up.

00:06:35.900 --> 00:06:39.910
And so we've been talking a lot about the
languages that are used up to this point,

00:06:40.090 --> 00:06:42.390
so I want to focus in on that just a bit.

00:06:42.770 --> 00:06:45.800
There are really two languages that
are supported for Cocoa development:

00:06:46.000 --> 00:06:48.390
Objective-C and Java.

00:06:48.400 --> 00:06:52.680
I'm sure you all know what Java is,
so I'll focus on Objective-C here.

00:06:52.920 --> 00:06:56.380
It's actually a language that
was invented in the '80s and

00:06:56.380 --> 00:07:00.700
is today a standard part of
the Free Software Foundation's

00:07:00.700 --> 00:07:02.670
GCC distribution.

00:07:02.900 --> 00:07:06.670
And it's a very dynamic language,
and along with Java,

00:07:06.670 --> 00:07:09.710
provides the support that Cocoa needs.

00:07:10.240 --> 00:07:15.140
In addition, if you're writing in Cocoa,
you can plug in your Carbon C or

00:07:15.310 --> 00:07:18.600
C++ code right into these languages.

00:07:18.740 --> 00:07:22.570
Or if you have Unix code,
they integrate in as well.

00:07:24.610 --> 00:07:28.820
So that still leaves the question open,
which language should you use?

00:07:28.840 --> 00:07:33.100
And really the answer is,
use the language that fits your needs.

00:07:33.160 --> 00:07:37.030
You may find that you have existing
Java code or libraries that

00:07:37.030 --> 00:07:41.290
you want to take advantage of,
or you may have code out in the community

00:07:41.290 --> 00:07:42.900
that you want to take advantage of.

00:07:42.940 --> 00:07:47.410
If so, you may find that writing your
application in Java using the

00:07:47.500 --> 00:07:50.090
Cocoa APIs is the best road for you.

00:07:50.320 --> 00:07:53.040
On the other hand,
most developers find that the

00:07:53.040 --> 00:07:58.080
faster runtime performance and lower
memory overhead of Objective-C make

00:07:58.080 --> 00:07:59.790
it the language of choice.

00:07:59.900 --> 00:08:02.800
We'll focus in on Objective-C today.

00:08:02.980 --> 00:08:05.890
With that, I'd like to turn things
over to my associate,

00:08:05.950 --> 00:08:10.140
Tina, to talk a little bit about some
of the details of how you actually

00:08:10.370 --> 00:08:12.590
go about programming in Cocoa.

00:08:17.670 --> 00:08:18.970
Thank you very much, Matt.

00:08:19.060 --> 00:08:21.990
Once again, my name is Tina Huang,
and I am one of the

00:08:22.060 --> 00:08:24.630
Cocoa Frameworks engineers.

00:08:25.500 --> 00:08:29.980
So basically what I'll be talking to you
about in this section is three things.

00:08:30.100 --> 00:08:34.080
First, we're going to cover some of the
fundamentals of Objective-C syntax.

00:08:34.230 --> 00:08:37.660
Then we're going to go over some of
the various Cocoa design patterns.

00:08:37.800 --> 00:08:39.820
And finally,
we're going to talk about some

00:08:39.820 --> 00:08:44.010
of the various developer tools
we have for you on the system.

00:08:44.140 --> 00:08:46.920
So in order to illustrate
some of these concepts,

00:08:46.920 --> 00:08:50.940
we're going to take a look at
this simple to-do list example.

00:08:50.940 --> 00:08:55.400
And in particular,
we're going to focus on adding a

00:08:55.510 --> 00:08:59.100
preferences pane to this to-do list.

00:08:59.100 --> 00:09:02.270
And for those of you interested,
later on in the talk,

00:09:02.270 --> 00:09:05.200
Matt's going to come back on stage
and actually show you how you

00:09:05.280 --> 00:09:10.600
can integrate this preferences
pane into a Carbon application.

00:09:10.600 --> 00:09:15.450
So let's just jump right in and
take a look at Objective-C syntax.

00:09:16.540 --> 00:09:19.170
Here's a copy of valid Objective-C code.

00:09:19.200 --> 00:09:24.200
Here is a function that converts
from Celsius to Fahrenheit,

00:09:24.200 --> 00:09:27.010
and it probably looks very
familiar to a lot of you.

00:09:27.200 --> 00:09:32.490
Well, that is because Objective-C is
a strict superset of ANSI C.

00:09:32.500 --> 00:09:38.000
So all your old ANSI C code from your
old apps is still valid Objective-C code.

00:09:38.000 --> 00:09:41.080
So you don't always have to look
at Objective-C for your answers.

00:09:41.720 --> 00:09:47.120
However, Objective-C does provide a few
additions on top of ANSI C.

00:09:47.200 --> 00:09:52.830
The first is we wanted Objective-C to
have an object-oriented

00:09:52.830 --> 00:09:54.580
layer on top of strict C.

00:09:54.700 --> 00:09:59.680
So this included having new
syntax to define new types of

00:09:59.860 --> 00:10:03.920
classes and to actually deal
with those different objects.

00:10:04.000 --> 00:10:07.640
And most importantly,
we wanted the ability to send

00:10:07.640 --> 00:10:09.860
messages to these objects.

00:10:11.020 --> 00:10:13.120
In Objective-C,
one of the very unique things

00:10:13.120 --> 00:10:18.400
about it is we pass messages to
objects rather than invoke methods.

00:10:18.400 --> 00:10:23.190
And this means that the actual code
that's executed is determined at runtime.

00:10:23.200 --> 00:10:27.700
So in order to do this,
we needed new syntax to send messages,

00:10:27.700 --> 00:10:32.400
and we needed runtime
support for these messages,

00:10:32.400 --> 00:10:36.350
and finally, we needed various data
types for these messages.

00:10:36.400 --> 00:10:42.280
So let's just jump right in and
look at some messaging syntax.

00:10:42.400 --> 00:10:45.900
So for those of you familiar
with any other object-oriented

00:10:45.900 --> 00:10:50.900
language like Java or C++,
you might be used to a method

00:10:50.970 --> 00:10:52.390
called looking something like this.

00:10:52.400 --> 00:10:57.760
So here you're sending a
do-something method to my object.

00:10:57.900 --> 00:11:02.400
Well, in Objective-C,
each message begins and ends

00:11:02.400 --> 00:11:04.260
with a set of square brackets.

00:11:04.400 --> 00:11:09.400
To the right of the opening bracket,
you have the receiving object,

00:11:09.800 --> 00:11:14.250
and to the right of that,
you'll see the do-something message.

00:11:14.300 --> 00:11:18.240
So here is a complete
Objective-C message.

00:11:19.710 --> 00:11:23.600
Now you can also have a message
that takes any number of arguments.

00:11:23.790 --> 00:11:26.640
So in a traditional
object-oriented language,

00:11:26.690 --> 00:11:31.680
you would have something like this,
which is an ordered list of arguments.

00:11:31.720 --> 00:11:35.180
Now in Objective-C,
we have something new that we

00:11:35.180 --> 00:11:37.450
refer to as name parameters.

00:11:37.450 --> 00:11:39.320
So it looks something like this.

00:11:39.320 --> 00:11:42.850
You begin, once again,
with your receiving object,

00:11:42.850 --> 00:11:45.820
and then to the right of that,
we're going to have

00:11:46.180 --> 00:11:49.380
the do with this colon,
end this colon message.

00:11:49.600 --> 00:11:51.560
The colons are part of the message name.

00:11:51.640 --> 00:11:55.370
And to the right of that,
you will see the various

00:11:55.450 --> 00:11:56.830
parameters that you pass in.

00:11:56.840 --> 00:12:01.390
And you have one parameter
to the right of each colon.

00:12:02.510 --> 00:12:06.220
So this is how you pass
messages in Objective-C.

00:12:06.220 --> 00:12:09.490
Now, some of you may wonder,
why would we want to do

00:12:09.490 --> 00:12:11.280
this name parameters?

00:12:11.320 --> 00:12:13.700
Well, in short,
this generally just improves

00:12:13.700 --> 00:12:15.480
the readability of your code.

00:12:15.480 --> 00:12:19.380
In this case, it's pretty obvious,
the two objects that

00:12:19.470 --> 00:12:20.440
you're trying to send.

00:12:20.480 --> 00:12:25.360
But you can imagine a case where
you have an initializer that you're

00:12:25.360 --> 00:12:27.660
taking in 10 different arguments.

00:12:27.670 --> 00:12:31.090
Now, granted,
the Java method of just having 10

00:12:31.090 --> 00:12:34.520
arguments in a list might seem shorter.

00:12:34.580 --> 00:12:36.640
However,
you can imagine that you might start

00:12:36.640 --> 00:12:40.720
confusing which argument goes where,
and having the name parameters

00:12:41.310 --> 00:12:43.610
can actually be very useful.

00:12:44.390 --> 00:12:47.100
So let's take a look once
again at these messages,

00:12:47.100 --> 00:12:51.170
but let's focus particularly
on the parts in orange.

00:12:51.310 --> 00:12:55.870
So the part of the message independent
of the parameters is referred to

00:12:55.870 --> 00:12:58.580
as the selector of the message.

00:12:58.600 --> 00:13:03.350
And you can actually programmatically
access this part of the message using

00:13:03.360 --> 00:13:06.500
what we call the atSelector syntax.

00:13:06.940 --> 00:13:10.000
Now you may wonder,
why might I want this?

00:13:10.240 --> 00:13:15.240
Well, this allows you to access a
message independent of the

00:13:15.240 --> 00:13:17.610
receiving object's type.

00:13:18.160 --> 00:13:20.490
And what makes this really
powerful is the fact that

00:13:21.350 --> 00:13:25.380
at runtime and compile time,
the type of the receiving object does

00:13:25.380 --> 00:13:28.230
not necessarily have to be known.

00:13:28.780 --> 00:13:33.020
And this is because Objective-C is
a dynamically typed language.

00:13:33.140 --> 00:13:36.940
The type of the object is
actually determined at runtime.

00:13:36.960 --> 00:13:42.980
And so we have this generic ID object
that can represent any object type.

00:13:43.010 --> 00:13:46.980
And you're actually allowed to
query the object at runtime and

00:13:47.130 --> 00:13:52.010
ask it what class it is and what
methods are available to it.

00:13:52.390 --> 00:13:57.380
And so you can actually use this message,
the response to selector message,

00:13:57.380 --> 00:14:02.860
in order to find out first if an object
does actually accept this message,

00:14:02.860 --> 00:14:06.330
and then if it does, send it the message.

00:14:08.240 --> 00:14:11.730
So now that we've looked at some of
the specifics of Objective-C syntax,

00:14:11.730 --> 00:14:16.690
let's step back a second and take a look
at some generic Cocoa design patterns.

00:14:16.800 --> 00:14:23.300
And the first one that we want to talk
about right now is memory management.

00:14:23.470 --> 00:14:27.970
So Cocoa uses something
called reference counting.

00:14:29.120 --> 00:14:33.880
Basically, when you retain an object,
this increments your reference count.

00:14:33.930 --> 00:14:37.570
When you release the object,
you decrement the count.

00:14:37.610 --> 00:14:40.940
And we have something called
auto-releasing that decrements

00:14:40.940 --> 00:14:42.570
it at some later point.

00:14:42.580 --> 00:14:47.320
And an object is freed whenever
the reference count drops to zero.

00:14:47.320 --> 00:14:51.240
And so there are a few rules to
the memory management contract.

00:14:51.340 --> 00:14:58.000
The first being, only creation methods,
and this is init, copy, and new,

00:14:58.970 --> 00:15:00.750
will actually return retained objects.

00:15:00.760 --> 00:15:05.710
And in all other cases,
the receiver is responsible for retaining

00:15:05.710 --> 00:15:09.580
the object when it first gets it,
and releasing it when it's done.

00:15:10.870 --> 00:15:14.380
and once again,
an object is deallocated once

00:15:14.580 --> 00:15:17.420
the retain count drops to,
there are no remaining references,

00:15:17.420 --> 00:15:19.880
and the retain count drops to zero.

00:15:21.430 --> 00:15:26.670
So now we're going to look at another
Cocoa-specific design pattern.

00:15:27.210 --> 00:15:32.210
And this is actually going to deal
with communicating with the interface.

00:15:32.510 --> 00:15:35.430
So you can imagine
that in your interface,

00:15:35.430 --> 00:15:39.230
you have some element in your UI,
and you want it to basically

00:15:39.800 --> 00:15:42.830
effect change on your application.

00:15:43.220 --> 00:15:48.920
So first, when we're talking about that,
we use something called target action.

00:15:48.990 --> 00:15:52.320
And so you can imagine you have
a button in your application,

00:15:52.390 --> 00:15:55.660
and the user clicks this button.

00:15:55.820 --> 00:15:58.000
So what happens?

00:15:58.210 --> 00:16:01.860
Well, essentially,
this sends some sort of

00:16:01.860 --> 00:16:06.010
button-clicked action message
to whatever your controlling

00:16:06.020 --> 00:16:08.340
object in your application is.

00:16:08.810 --> 00:16:14.900
And we refer to this controlling
object as the outlet of the action.

00:16:15.640 --> 00:16:19.460
Now, in Converse,
what if you have your application

00:16:19.490 --> 00:16:24.350
and you want it to actually drive the
UI and update changes in your interface?

00:16:24.440 --> 00:16:28.900
Well, to do this,
we use something referred to as outlets.

00:16:29.020 --> 00:16:34.320
So here we have the same controlling
object as before in your application,

00:16:34.440 --> 00:16:39.120
but you also have some sort of
text field in your interface.

00:16:39.240 --> 00:16:42.620
And essentially,
you want your controlling object

00:16:42.620 --> 00:16:46.900
to pass some sort of message
to this text field and say,

00:16:46.900 --> 00:16:50.860
set the text field's value
to be whatever the string is.

00:16:50.900 --> 00:16:54.280
And in order to do this,
you basically need a handle

00:16:54.280 --> 00:16:58.620
from your controlling object
that ties it to the text field.

00:16:58.620 --> 00:17:01.810
And so in order to do this,
you set the text field as a

00:17:02.180 --> 00:17:03.600
controlling object's outlet.

00:17:06.450 --> 00:17:09.000
So for many of you,
this whole communication with

00:17:09.000 --> 00:17:12.700
the interface may seem very
reminiscent of something,

00:17:12.700 --> 00:17:17.300
a general software design pattern
called Model-View-Controller.

00:17:17.490 --> 00:17:20.660
So for those of you who have
never heard of this before,

00:17:20.970 --> 00:17:25.500
Model View Controller essentially
divides application into three layers.

00:17:25.500 --> 00:17:31.070
At the very bottom, you have the model,
which is what stores and

00:17:31.070 --> 00:17:33.910
manipulates all your user data.

00:17:34.450 --> 00:17:38.300
At the very top of it,
you would have the view,

00:17:38.320 --> 00:17:43.420
which is everything the user
sees and interacts with.

00:17:43.510 --> 00:17:46.400
And somewhere in the middle
is actually this controller,

00:17:46.400 --> 00:17:51.420
which is the glue that ties the
model and the view together.

00:17:52.170 --> 00:17:56.420
And so to tie this back with some
of the earlier design patterns

00:17:56.680 --> 00:18:00.600
of target action and outlets,
let's take a look once

00:18:00.700 --> 00:18:02.210
again at our button.

00:18:02.980 --> 00:18:08.040
So the button is part of the view,
and when the button is clicked,

00:18:08.070 --> 00:18:11.220
it sends an action message,
but that object that it would

00:18:11.340 --> 00:18:15.060
send the message to is referred
to as the controlling object.

00:18:15.160 --> 00:18:17.580
So that is your controller.

00:18:18.460 --> 00:18:22.880
And this controller, in turn,
would send the message to the

00:18:22.880 --> 00:18:24.560
model and tell it to update.

00:18:24.670 --> 00:18:28.890
So in this case, it would tell the model,
well, create a new folder.

00:18:29.040 --> 00:18:33.120
And this is really important
because now you have the user

00:18:33.120 --> 00:18:35.400
interface isolated from the view.

00:18:35.430 --> 00:18:40.640
And so you can make changes to your
interface and not have to modify--

00:18:42.280 --> 00:18:46.640
user interface and not have to
modify your model in return,

00:18:46.700 --> 00:18:48.540
and vice versa.

00:18:48.560 --> 00:18:51.690
And most of your application-specific
code is now isolated in

00:18:51.810 --> 00:18:53.520
the controller object.

00:18:53.540 --> 00:18:57.270
And you can imagine the reverse of this
is if something changes in the model,

00:18:57.440 --> 00:19:01.630
and that would cause a message to
be sent to your controlling object,

00:19:01.730 --> 00:19:07.670
and then that would cause the UI to
update through the use of an outlet.

00:19:10.020 --> 00:19:12.360
And in order to do this,
we actually have this really neat

00:19:12.420 --> 00:19:15.780
developer tool called Interface Builder.

00:19:16.140 --> 00:19:19.980
Interface Builder essentially
allows you to have this easy,

00:19:20.210 --> 00:19:24.690
quick, drag-and-drop graphical
manipulation of your UI.

00:19:24.700 --> 00:19:28.220
And so it's very easy to develop your
user interface to your application.

00:19:30.810 --> 00:19:37.640
Unlike most other interface tools
that essentially just spew out some

00:19:37.770 --> 00:19:41.380
source code to represent your view,
what Interface Builder does

00:19:41.380 --> 00:19:43.040
is actually very unique.

00:19:43.090 --> 00:19:48.200
It archives live objects and
also archives their connections.

00:19:48.280 --> 00:19:52.450
And these connections are the target
action connections and the outlet

00:19:52.520 --> 00:19:55.140
connections that we just referred to.

00:19:55.620 --> 00:19:58.580
And finally,
it's completely integrated with Cocoa.

00:19:58.660 --> 00:20:03.420
From the day that Cocoa was built,
essentially we had Interface Builder,

00:20:03.420 --> 00:20:04.960
and the two of them
are built up together.

00:20:04.960 --> 00:20:09.130
So it's not like we have this old
developer tool and we have this new

00:20:09.480 --> 00:20:13.870
builder that just kind of does the
same thing that writes more code.

00:20:13.880 --> 00:20:18.880
It's really there to help you
and make coding easier for you.

00:20:18.920 --> 00:20:22.440
So in order to show you some of,
we want to now show you some of

00:20:22.550 --> 00:20:24.870
the coolness of Interface Builder.

00:20:28.070 --> 00:20:32.490
So,
Interface Builder creates and archives

00:20:32.620 --> 00:20:35.740
your files in this nib format.

00:20:35.850 --> 00:20:39.290
And so,
here's my project with my to-do list,

00:20:39.420 --> 00:20:44.150
and I'm going to take
a look at that file.

00:20:45.960 --> 00:20:50.240
So here is basically a view
of what is in your nib file.

00:20:50.240 --> 00:20:55.980
And so you have your main window and
various other properties of your nib

00:20:55.980 --> 00:20:58.500
that we'll go into in a little bit.

00:20:59.080 --> 00:21:04.040
Up here you'll see that there
is your-- a palette of controls

00:21:04.040 --> 00:21:06.290
that you have available to you.

00:21:06.930 --> 00:21:12.260
And finally,
we have the Inspector window,

00:21:12.260 --> 00:21:17.290
which allows you to see the different
properties of your controls.

00:21:18.550 --> 00:21:22.940
And so if you're trying to build
something like this Preferences pane,

00:21:22.940 --> 00:21:26.100
you can start with, like,
over here we have a text view,

00:21:26.120 --> 00:21:27.680
and you can just drag it over here.

00:21:27.680 --> 00:21:32.150
And notice that these
blue grid lines drop up.

00:21:32.210 --> 00:21:37.260
Well, these are basically guidelines to
help you meet the Aqua specifications.

00:21:37.380 --> 00:21:44.820
So even if you have no idea how to design
a view that meets Apple's criteria,

00:21:44.820 --> 00:21:49.910
all you can do is follow these
lines and you can make an app that

00:21:50.570 --> 00:21:53.470
looks like all other Macintosh apps.

00:21:54.320 --> 00:21:59.000
And so now we can do the same
by dragging out a checkbox.

00:21:59.050 --> 00:22:04.500
And over here in the Inspector window,
you can see there's a title, and we can

00:22:07.960 --> 00:22:11.480
You can set the title to be
something like Show Completed Items.

00:22:11.500 --> 00:22:18.580
And you can drag it out to
be whatever size you want.

00:22:19.830 --> 00:22:22.700
I can just drag out some radio buttons.

00:22:22.730 --> 00:22:27.280
And you can see here that you
can change the number of rows.

00:22:28.370 --> 00:22:29.750
And adjust it once again.

00:22:29.880 --> 00:22:35.100
Notice how easy the Aqua guidelines
make it to adjust the spacing.

00:22:35.210 --> 00:22:42.170
And if you click on each of the items,
you can set the values.

00:22:42.170 --> 00:22:46.190
And so we'll make that one red.

00:22:46.190 --> 00:22:48.260
And we can make that one blue.

00:22:51.500 --> 00:22:54.260
will make this black.

00:22:54.260 --> 00:22:58.340
And finally,
we'll add a button to the bottom.

00:22:58.340 --> 00:23:03.780
And we'll tell this one
to clear the to-do list.

00:23:04.870 --> 00:23:10.110
And once again,
notice how easy it is to adjust your UI.

00:23:11.050 --> 00:23:15.500
And so, since Interface Builder actually
deals with live objects,

00:23:15.590 --> 00:23:18.230
you can do something that we
refer to from the File menu.

00:23:18.230 --> 00:23:21.000
You can choose Test Interface.

00:23:21.000 --> 00:23:25.000
And this actually lets you play with
the interface as it would really work.

00:23:25.000 --> 00:23:29.000
So you can see how the checkboxes
check and the radio buttons click,

00:23:29.000 --> 00:23:31.600
and click on various buttons.

00:23:34.510 --> 00:23:39.700
So now that we have our UI,
we need to control our object.

00:23:39.740 --> 00:23:43.740
And Interface Builder actually
allows you to do that.

00:23:44.000 --> 00:23:50.940
So in our NibFile viewer here,
we have a tab that shows--

00:23:50.940 --> 00:23:52.290
a tab labeled Classes.

00:23:52.460 --> 00:23:58.100
And this essentially has all the
objects that that NibFile knows about.

00:23:58.300 --> 00:24:02.120
So in this case,
it's all of the AppKit objects

00:24:02.600 --> 00:24:09.110
and any objects that you
specifically tell the Nib about.

00:24:09.710 --> 00:24:14.040
We're going to subclass NSObject because
that's the most basic of the objects.

00:24:14.080 --> 00:24:17.380
And when you hit Enter,
it gives you a subclass,

00:24:17.410 --> 00:24:20.380
and we can name it PrefsController.

00:24:20.380 --> 00:24:27.450
And here's a PrefsController object.

00:24:32.800 --> 00:24:38.870
And I, that shouldn't already be created,
but essentially here you have

00:24:41.380 --> 00:24:43.670
We're going to call it MyObject
here since I've apparently

00:24:43.940 --> 00:24:47.920
messed up my demo here and have
a prefsctl object instantiated.

00:24:48.070 --> 00:24:51.400
So let's say you have an
object called MyObject.

00:24:51.460 --> 00:24:54.160
And in the Inspector window,
you can see that you can create

00:24:54.320 --> 00:24:57.940
outlets and actions right
here in Interface Builder.

00:24:58.100 --> 00:25:00.880
So let's add some outlets.

00:25:01.260 --> 00:25:05.080
So we want an outlet to
represent the color button.

00:25:05.080 --> 00:25:08.420
And we can add an outlet for
the Show Completed button.

00:25:08.420 --> 00:25:15.850
And finally,
we can add an outlet for the title field.

00:25:18.600 --> 00:25:20.650
You can do the same for Actions.

00:25:20.760 --> 00:25:24.190
So we'll have an action
to clear the list.

00:25:24.600 --> 00:25:29.000
And we'll have an
action to set the color.

00:25:29.000 --> 00:25:31.970
And finally,
an action to set whether or not

00:25:31.980 --> 00:25:36.500
you want to show completed items.

00:25:38.290 --> 00:25:44.040
So once you have that,
then you can create the files,

00:25:44.100 --> 00:25:47.330
have Interface Builder create
the outlines for-- outline

00:25:47.420 --> 00:25:49.020
template for these files.

00:25:49.140 --> 00:25:54.660
So we look at my object,
and in the Classes menu,

00:25:54.680 --> 00:25:57.600
you can tell it to create
files for my object.

00:25:57.610 --> 00:26:01.840
And here it'll tell you-- you can
choose to create both the header

00:26:01.840 --> 00:26:06.800
and the implementation file,
and tell it, put it in my project.

00:26:07.700 --> 00:26:10.380
Now, if you go back to
Project Builder and look at it,

00:26:10.380 --> 00:26:13.730
you'll see that it's created
these two files for you.

00:26:13.870 --> 00:26:17.130
So, if you take a look at them,

00:26:17.370 --> 00:26:21.140
Notice that no behavioral source
code is generated for you.

00:26:21.170 --> 00:26:26.880
And the advantage of this is really that
once you create your view and your model,

00:26:26.920 --> 00:26:30.790
you can actually just change the
positionings of your view and change

00:26:30.840 --> 00:26:36.320
the way it behaves and not have
to change your code necessarily.

00:26:36.350 --> 00:26:39.760
And the same happens
for your header files.

00:26:42.600 --> 00:26:46.150
So let's go back to Interface Builder.

00:26:46.180 --> 00:26:52.060
And so each Nib file has to be loaded
by some object of a particular class.

00:26:52.070 --> 00:26:56.600
And by default, it's NSApplication.

00:26:56.650 --> 00:26:58.900
But you can actually set
this in Interface Builder

00:26:59.180 --> 00:27:01.060
through the files owner.

00:27:01.290 --> 00:27:04.420
So every Nib file has a files owner.

00:27:04.430 --> 00:27:09.660
And you can actually, in the inspector,
you can tell it,

00:27:09.660 --> 00:27:11.510
show me the custom class.

00:27:11.760 --> 00:27:15.070
And as you can see,
this is NS application.

00:27:15.740 --> 00:27:20.980
Well, in this case,
we're going to set it to be myObject.

00:27:21.000 --> 00:27:25.210
And here it gives you a warning
saying that you're changing the

00:27:25.280 --> 00:27:28.650
files owner from application,
and that's OK.

00:27:30.360 --> 00:27:33.740
Now you have a way to essentially
hook up your controller to your view.

00:27:33.760 --> 00:27:38.580
So the way that that's done,
and once again, remember the slide with

00:27:38.580 --> 00:27:42.220
the target in action,
you basically want to connect

00:27:42.500 --> 00:27:48.260
your controller to the items,
the controls in your UI.

00:27:48.260 --> 00:27:51.050
And so, for instance,
let's take a look at this

00:27:51.200 --> 00:27:55.370
clear to-do list button,
and you essentially want that button to

00:27:55.660 --> 00:27:58.240
send an action to the controller object.

00:27:58.400 --> 00:28:02.740
So you would hit Control and drag from
that button to the controller object,

00:28:02.740 --> 00:28:05.400
and you could say, "Clear list.

00:28:05.400 --> 00:28:07.760
That's the action I want to
happen." And you could say,

00:28:07.760 --> 00:28:14.160
"Connect." And you can do the
same for the various buttons.

00:28:15.100 --> 00:28:27.700
[Transcript missing]

00:28:28.850 --> 00:28:32.130
and Tyler to set the show completed.

00:28:32.350 --> 00:28:36.220
Now again,
the converse of that is what happens

00:28:36.370 --> 00:28:42.540
when you want your controller object
to have access to your UI elements.

00:28:42.540 --> 00:28:47.500
Well, you want your controller
object to be able to send

00:28:48.260 --> 00:28:50.770
messages to controls in your UI.

00:28:50.770 --> 00:28:51.320
So you control drag in that direction.

00:28:51.320 --> 00:28:51.320
So you control drag from
the controlling object

00:28:51.370 --> 00:28:54.630
to an element, a control in your UI,
and you can say,

00:28:54.650 --> 00:28:58.180
that is my setCompletedButton,
so set that outlet.

00:28:58.190 --> 00:29:01.920
And you can do the same for

00:29:03.790 --> 00:29:09.200
The Color Button,
and we'll want to set the title field.

00:29:12.130 --> 00:29:16.290
And that's basically how easy
it is to hook up from your

00:29:16.290 --> 00:29:18.500
UI to your control object.

00:29:18.660 --> 00:29:26.200
So, for sake of time,
we're actually going to jump to

00:29:28.890 --> 00:29:37.640
We've polished up the UI for you a bit,
and we have actual

00:29:37.640 --> 00:29:41.520
controller code implemented,
because obviously when that

00:29:41.520 --> 00:29:44.130
action message gets sent,
something has to happen.

00:29:44.130 --> 00:29:48.510
And we're going to build
and run that for you.

00:29:52.700 --> 00:29:53.490
Hi, this.

00:29:53.570 --> 00:30:02.290
And so here you can see, if I go to File,
the demo, and open up the preferences,

00:30:02.290 --> 00:30:02.290
let's first create a few items.

00:30:04.300 --> 00:30:11.500
[Transcript missing]

00:30:20.910 --> 00:30:30.030
and I are going to show you
how to create a full-featured,

00:30:30.060 --> 00:30:38.710
next-generation desktop
application on Mac OS X.

00:30:40.020 --> 00:30:42.410
So there's one more
thing we want to do here,

00:30:42.410 --> 00:30:47.880
and that is we want to be able to type
in the to-do list title and actually

00:30:47.880 --> 00:30:49.930
have it update in the to-do list.

00:30:50.100 --> 00:30:54.660
Well, using that target action pattern,
we can have some sort of apply button

00:30:54.760 --> 00:31:00.210
that will tell the title list to be set,
but there's a better way to do that,

00:31:00.400 --> 00:31:05.170
because we want to have an
actual live update from...

00:31:05.620 --> 00:31:08.980
The Preferences Pane to
the Actual To-Do List.

00:31:08.990 --> 00:31:12.600
And let's actually go
back to slides here.

00:31:14.720 --> 00:31:18.410
In order to do this,
we use something referred

00:31:18.410 --> 00:31:19.680
to as delegation.

00:31:19.740 --> 00:31:22.880
And this essentially allows
an object to appoint another

00:31:22.880 --> 00:31:26.080
object to be its delegate.

00:31:26.270 --> 00:31:27.980
So what is delegation?

00:31:28.030 --> 00:31:32.710
Well, let's think of it in
a non-coding fashion.

00:31:32.950 --> 00:31:36.230
We have my boss,
and he's about to go on vacation.

00:31:36.410 --> 00:31:39.800
So he essentially appoints
Matt to be-- he says,

00:31:39.840 --> 00:31:41.550
Matt, I want you to be my delegate.

00:31:41.770 --> 00:31:46.620
So all messages that would go
to my boss will now go to Matt.

00:31:47.310 --> 00:31:49.960
And so now I'm like,
I want to go on vacation.

00:31:49.990 --> 00:31:54.030
And normally I would say,
hey-- I'd ask my boss,

00:31:54.170 --> 00:31:55.480
can I go on vacation?

00:31:55.560 --> 00:31:57.440
But obviously he's not there.

00:31:57.540 --> 00:32:00.020
So that message now gets
forwarded to his delegate,

00:32:00.080 --> 00:32:01.500
who in this case is Matt.

00:32:01.630 --> 00:32:04.180
And Matt says, sure, Tina,
go on vacation,

00:32:04.230 --> 00:32:06.320
because he's a good buddy of mine.

00:32:06.320 --> 00:32:09.210
So this is delegation.

00:32:09.840 --> 00:32:17.470
So in Cocoa, we actually have two basic
behaviors that Delicate can perform.

00:32:17.760 --> 00:32:20.740
The first is,
the delegate can actually modify

00:32:20.740 --> 00:32:24.080
the default behavior of the object.

00:32:24.100 --> 00:32:27.380
And the second is,
it can just be a receiver

00:32:27.380 --> 00:32:28.580
of notifications.

00:32:28.660 --> 00:32:32.680
So whenever an object
performs a certain event,

00:32:32.720 --> 00:32:36.320
the delegate can just be notified
that this event has occurred.

00:32:36.700 --> 00:32:42.150
And so there are several classes in
AppKit that have a delegate outlet.

00:32:42.150 --> 00:32:47.270
And when you set this delegate outlet,
essentially the delegate will be asked,

00:32:47.570 --> 00:32:49.800
hey,
is it OK if I do this particular action?

00:32:49.800 --> 00:32:53.850
Or the delegate could just be
notified that something has happened.

00:32:54.260 --> 00:32:57.990
And so, for instance,
if you have some sort of

00:32:57.990 --> 00:33:03.330
text field in this case,
the delegate may be asked questions like,

00:33:03.430 --> 00:33:06.840
is this a valid value for my text field?

00:33:06.840 --> 00:33:09.410
And, for instance,
if you want the text field to

00:33:09.410 --> 00:33:13.450
only accept numeric values,
you can adjust the behavior accordingly.

00:33:13.460 --> 00:33:17.730
And in another instance,
you can just want to know, well,

00:33:17.810 --> 00:33:19.910
the text is about to change.

00:33:20.000 --> 00:33:24.240
And so the delegate can just be notified
that the text is about to change.

00:33:24.330 --> 00:33:26.000
to be changed.

00:33:26.220 --> 00:33:30.710
And so essentially what this allows
is you can customize an object

00:33:30.850 --> 00:33:33.980
without having to subclass it.

00:33:34.100 --> 00:33:42.180
So let's take a look at how this works.

00:33:42.340 --> 00:33:45.170
So we're going to go
back to our Nib file.

00:33:51.300 --> 00:33:56.540
And if you look at the text view,

00:33:57.030 --> 00:34:00.900
Notice that it has an outlet
called its delegate outlet.

00:34:01.170 --> 00:34:05.210
And so you can control
drag from the text view,

00:34:05.880 --> 00:34:09.200
to the files owner,
which is the prefs controller, and say,

00:34:09.210 --> 00:34:11.300
"Make this my delegate."

00:34:12.680 --> 00:34:14.640
and Yudal get set.

00:34:14.670 --> 00:34:17.180
And so let's take a look at
the code that was necessary,

00:34:17.220 --> 00:34:20.020
that is necessary to make this change.

00:34:20.550 --> 00:34:22.250
So let's take a look at
the press controller.

00:34:22.260 --> 00:34:27.750
And what you want to see here is
this TextedChangeDelegate method.

00:34:27.870 --> 00:34:31.380
And essentially this is called
whenever the text changes.

00:34:31.420 --> 00:34:34.700
And so here we're going to
tell the title field to set its

00:34:34.910 --> 00:34:40.990
font and set its string value,
and then update the window.

00:34:41.060 --> 00:34:43.980
And so now if we build and run this.

00:34:51.620 --> 00:34:55.500
Too many windows here.

00:34:55.610 --> 00:34:58.250
So now if you open the Prefs pane.

00:35:00.560 --> 00:35:04.490
When you change, type the text,
so I could say this is, you know, like,

00:35:04.510 --> 00:35:09.380
my shopping list or something,
notice that it live

00:35:09.440 --> 00:35:11.280
updates on your to-do list.

00:35:11.380 --> 00:35:15.380
And so delegation is
a very powerful tool.

00:35:16.730 --> 00:35:18.600
and I will be talking about
the basic design pattern

00:35:18.600 --> 00:35:20.600
that Cocoa allows you to do.

00:35:20.760 --> 00:35:22.600
So there's one more thing.

00:35:22.600 --> 00:35:26.600
We want to be able to set
the font of this to-do list.

00:35:26.770 --> 00:35:31.070
And in order to do this,
we need something that's slightly

00:35:31.070 --> 00:35:34.840
different from this general
target action design pattern that

00:35:34.840 --> 00:35:36.600
we've shown you up to this point.

00:35:36.600 --> 00:35:41.500
And the main reason for this is, well,
a font panel that you've

00:35:41.500 --> 00:35:45.600
probably seen before on OS X,
it can affect any number of views.

00:35:45.600 --> 00:35:50.600
And so it's targets essentially
determined on the fly.

00:35:50.610 --> 00:35:53.520
And so let's go back to slides here.

00:35:57.900 --> 00:36:01.340
And so in order to do this,
we use something called

00:36:01.780 --> 00:36:03.280
the responder chain.

00:36:03.290 --> 00:36:09.310
And this allows us to determine what
our target is at any given moment.

00:36:09.440 --> 00:36:13.250
And so the responders chain is
essentially an ordered list of

00:36:13.350 --> 00:36:17.870
objects that responds to user
events or events in general.

00:36:17.970 --> 00:36:22.850
And this means that the target
can be determined at runtime.

00:36:23.270 --> 00:36:26.270
In particular,
the first object in this responder chain

00:36:26.340 --> 00:36:30.790
is referred to as the first responder,
and that's the actual object

00:36:30.790 --> 00:36:32.600
that will receive the event.

00:36:32.780 --> 00:36:37.500
And so the Responder chain
is used in various places.

00:36:37.570 --> 00:36:40.600
For example, cut, copy, and paste.

00:36:40.690 --> 00:36:45.100
You click on one text view, and you say,
copy this text.

00:36:45.140 --> 00:36:47.860
And then you click on some
other text view somewhere else,

00:36:47.920 --> 00:36:49.400
and you say, paste.

00:36:49.460 --> 00:36:53.560
And so First Responder allows us
to track what your main window

00:36:53.560 --> 00:36:59.510
is and determine that new view is
where I want the text to be pasted.

00:37:00.320 --> 00:37:03.770
Also for menu item validation,
you can validate menu items

00:37:03.910 --> 00:37:06.570
depending on where you're clicking.

00:37:07.170 --> 00:37:09.330
and once again,
you can use this for things such

00:37:09.330 --> 00:37:12.100
as font panel and color panel.

00:37:12.100 --> 00:37:16.760
And so let's show you how that works.

00:37:22.180 --> 00:37:26.110
So essentially, right now we're going to
look at this other nib file,

00:37:26.110 --> 00:37:27.930
which I haven't shown
you up to this point,

00:37:27.980 --> 00:37:32.620
but this essentially is the main
window of your to-do list application.

00:37:32.620 --> 00:37:36.110
Let's clean out some of these windows.

00:37:39.050 --> 00:37:43.900
So this is the main view
of your application.

00:37:43.900 --> 00:37:48.470
And in here, though, you'll notice that
there's this main menu.

00:37:48.500 --> 00:37:52.570
And this is essentially the menu bar
that is associated with the application.

00:37:52.620 --> 00:37:56.770
And so in your controls palette,
you have a bunch of menus

00:37:56.770 --> 00:37:57.780
that you can add to it.

00:37:57.800 --> 00:38:01.920
And in this case,
we're going to add a fonts menu.

00:38:01.920 --> 00:38:04.380
And notice you can have
a whole array of things.

00:38:04.430 --> 00:38:08.940
You can show the font panel, bold,
underlining, things like that.

00:38:08.950 --> 00:38:10.800
So let's save this.

00:38:14.300 --> 00:38:20.000
[Transcript missing]

00:38:20.300 --> 00:38:25.040
Notice here that we now have a Fonts
menu in our To-Do List application.

00:38:25.130 --> 00:38:30.980
And you can just say Show Fonts,
and the Font panel comes up.

00:38:31.040 --> 00:38:33.510
And so let's take a
look at our preferences.

00:38:34.500 --> 00:38:38.850
And so here,
I want to emphasize that's my list,

00:38:38.850 --> 00:38:41.760
so I can make the font really big.

00:38:41.880 --> 00:38:47.040
It's probably a little bit too big.

00:38:49.640 --> 00:38:55.800
- Hello, everyone.

00:38:55.800 --> 00:38:55.800
I'm Tina Huang,
and I'm the C++ developer at Cocoa.

00:38:57.880 --> 00:39:00.560
and I will just make
it all 36-point font.

00:39:00.560 --> 00:39:05.150
Essentially what you see here is that
whatever view I have currently selected,

00:39:05.720 --> 00:39:09.870
You can now have the font panel
affect that particular view,

00:39:09.870 --> 00:39:15.830
and that's because this text
field here is the first responder.

00:39:19.190 --> 00:39:20.010
Can we go back to slides, please?

00:39:20.070 --> 00:39:24.940
And so that's essentially
Cocoa in a nutshell.

00:39:24.940 --> 00:39:28.660
You know, we don't expect you to be
full-fledged Cocoa programmers

00:39:28.660 --> 00:39:31.150
by any means at this point,
but hopefully you have a

00:39:31.150 --> 00:39:33.140
general understanding of,
you know,

00:39:33.140 --> 00:39:38.580
the various powers that Cocoa provides,
and you'll understand enough about

00:39:38.580 --> 00:39:43.020
Cocoa syntax to hopefully participate
in some of the other talks that we have

00:39:43.020 --> 00:39:47.280
available for you later this week in the
Cocoa track and learn more about Cocoa.

00:39:47.870 --> 00:39:52.570
So I'm now going to pass this
back to Matt to talk to you about

00:39:52.660 --> 00:39:56.060
how to integrate this preferences
pane in a Carbon context.

00:39:56.110 --> 00:39:57.220
Thanks, Tina.

00:40:09.900 --> 00:40:13.800
So this next part is actually one
of my favorite parts about Cocoa.

00:40:13.800 --> 00:40:15.900
It's something I think is really cool.

00:40:15.990 --> 00:40:19.400
And that's how you can integrate
Cocoa with other technologies.

00:40:19.450 --> 00:40:25.280
You can certainly use Cocoa to build
full-featured applications with Mac OS X.

00:40:25.530 --> 00:40:28.680
But a relatively newer development
is the ability to integrate

00:40:28.690 --> 00:40:32.750
Cocoa with Carbon and even Unix code.

00:40:32.850 --> 00:40:37.500
You can mix Cocoa code right in
with your existing C and C++ code,

00:40:37.610 --> 00:40:39.190
and we're going to show you
how to do that today and

00:40:39.200 --> 00:40:42.990
why you would want to do it,
and then walk you through a demo.

00:40:44.400 --> 00:40:46.600
So why mix Carbon and Cocoa?

00:40:46.650 --> 00:40:48.680
Well, there are three basic reasons.

00:40:48.800 --> 00:40:53.530
First of all, you may have existing code
that you want to leverage.

00:40:53.540 --> 00:40:57.720
This is typically the most common
reason for integrating Carbon and Cocoa.

00:40:57.740 --> 00:41:02.140
There's an app that exists in Carbon,
and you want to add some

00:41:02.140 --> 00:41:04.580
functionality using Cocoa.

00:41:04.990 --> 00:41:08.500
The second reason why you might
want to do this is if you're writing

00:41:08.500 --> 00:41:12.510
a common service that perhaps
applications written with Carbon or

00:41:12.510 --> 00:41:14.440
Cocoa could take advantage of.

00:41:14.500 --> 00:41:18.040
For example,
the address book framework on

00:41:18.050 --> 00:41:22.240
Mac OS X actually vends APIs in
both C and Objective-C for

00:41:22.240 --> 00:41:24.410
both of these frameworks.

00:41:26.510 --> 00:41:29.400
And finally,
there may be various pieces of

00:41:29.400 --> 00:41:33.140
alternative functionality that
you find easiest to access through

00:41:33.140 --> 00:41:36.330
one framework or the other,
and so you want to integrate

00:41:36.420 --> 00:41:37.390
those in one application.

00:41:41.230 --> 00:41:43.040
So what does this involve?

00:41:43.070 --> 00:41:46.940
Well, it basically involves
just adding the code,

00:41:46.970 --> 00:41:50.500
whether it's Carbon or Cocoa,
to the same source file.

00:41:50.710 --> 00:41:56.100
Go ahead and include Carbon.h or Cocoa.h,
or both.

00:41:57.540 --> 00:42:01.340
The other thing you'll want to do if
you're including Objective-C code in your

00:42:01.340 --> 00:42:06.890
existing C or C++ source files is change
the file extension to .m to indicate

00:42:06.970 --> 00:42:09.810
that Objective-C code will be included.

00:42:10.200 --> 00:42:13.370
If you're also including
C++ in the same code,

00:42:13.370 --> 00:42:18.630
you'll want to change the extension to
.mm to indicate that our other compiler,

00:42:18.630 --> 00:42:21.880
the Objective C++ compiler,
should be used.

00:42:22.020 --> 00:42:25.500
This technology allows all
languages to coexist in the same

00:42:25.500 --> 00:42:27.460
source file and be compiled.

00:42:29.420 --> 00:42:33.700
If you have source files that you expect
to be compiled on other platforms where

00:42:33.700 --> 00:42:36.820
perhaps Objective-C doesn't exist,
and yet you want the code to

00:42:36.820 --> 00:42:42.420
just kind of go through smoothly,
you can use the #ifdef objc syntax.

00:42:42.640 --> 00:42:45.880
And that basically says,
if this is defined,

00:42:46.190 --> 00:42:50.540
then we're compiling using a compiler
that understands Objective-C.

00:42:50.810 --> 00:42:55.050
and you can also force the right compiler
to be used on files without having to

00:42:55.050 --> 00:42:57.990
change the file extension if you choose.

00:43:01.210 --> 00:43:04.760
So besides compiler support
and source code support,

00:43:04.800 --> 00:43:08.390
the operating system has support
for mixing Carbon in Cocoa as well.

00:43:08.540 --> 00:43:13.340
The OS itself provides what we call
toll-free bridging of common data

00:43:13.340 --> 00:43:19.910
types between foundation in Cocoa and
the core foundation framework.

00:43:20.140 --> 00:43:24.620
Such data types as CFString and
NSString can be simply

00:43:24.620 --> 00:43:26.350
cast one to the other.

00:43:26.630 --> 00:43:29.910
In fact, they're the same object.

00:43:31.830 --> 00:43:34.900
And there are actually two main
levels of integration between

00:43:34.900 --> 00:43:36.160
Carbon and Cocoa that we support.

00:43:36.160 --> 00:43:41.260
Prior to Mac OS X version 10.2,
we supported non-GUI integration.

00:43:41.280 --> 00:43:44.420
So you could have, for example,
Carbon or Cocoa code that

00:43:44.420 --> 00:43:47.360
dealt with the file system,
and then have the interface be

00:43:47.360 --> 00:43:49.960
designed using the other set of APIs.

00:43:49.960 --> 00:43:53.760
We changed this in Mac OS X version 10.2.

00:43:53.760 --> 00:43:58.500
We now support mixing the graphical
user interface on a per-window basis,

00:43:58.500 --> 00:44:02.360
which means you can have a
Carbon window in a Cocoa application,

00:44:02.360 --> 00:44:05.700
or a Cocoa window in
a Carbon application.

00:44:07.320 --> 00:44:11.250
And the one thing to keep in mind is that
you'll want to call this one function,

00:44:11.250 --> 00:44:15.000
NSApplicationLoad,
to initialize Cocoa if you're using

00:44:15.000 --> 00:44:16.980
Cocoa within a Carbon application.

00:44:21.660 --> 00:44:24.950
So we've got a kind of nifty
little demo here to show you guys.

00:44:25.220 --> 00:44:28.100
You may be familiar with
the Glypha 3 code base.

00:44:28.200 --> 00:44:31.280
It's been around since 1988, 15 years.

00:44:31.360 --> 00:44:36.040
It was written by John Calhoun
of Glider fame for the Macintosh.

00:44:36.070 --> 00:44:39.630
And today, it's fully carbonized and
lives on sourceforge.net,

00:44:39.750 --> 00:44:42.200
where the source can be downloaded.

00:44:42.490 --> 00:44:43.590
So let's show you this game.

00:44:43.730 --> 00:44:46.090
If we can switch to the demo machine.

00:44:46.220 --> 00:44:48.680
Tina's going to create--
start a new game.

00:44:48.950 --> 00:44:51.390
It's basically a joust clone.

00:44:51.570 --> 00:44:53.200
And the source code is available.

00:44:53.200 --> 00:44:58.220
You basically sail around on your bird,
trying to knock sphinxes

00:44:58.220 --> 00:44:59.770
out of the air in,
I guess,

00:44:59.780 --> 00:45:02.340
some sort of an Egyptian pyramid.

00:45:02.400 --> 00:45:06.270
And she's going to try and get
on the high score list here.

00:45:06.710 --> 00:45:10.400
This code was Pascal black
and white back in the day,

00:45:10.480 --> 00:45:14.620
and then it was
retrofitted to C and color,

00:45:14.620 --> 00:45:17.200
and various technologies
were added over the years.

00:45:17.200 --> 00:45:18.240
It was finally carbonized.

00:45:18.310 --> 00:45:20.410
I remember playing this
on my Performa 600,

00:45:20.410 --> 00:45:22.070
33 megahertz, back in the day.

00:45:25.640 --> 00:45:31.320
So she's dive-bombing into the lava.

00:45:33.710 --> 00:45:37.700
There's actually a mummy hand on
the left-hand side that comes up and

00:45:37.700 --> 00:45:38.800
grabs you if you're not effective.

00:45:38.800 --> 00:45:42.880
So here's the high-score dialogue,
and actually,

00:45:42.880 --> 00:45:47.700
given the history of this code
base and its Pascal string,

00:45:47.700 --> 00:45:52.000
ANSI string usage, all we can enter is
English at this point.

00:45:52.000 --> 00:45:55.700
We're going to retrofit this to
be able to support more languages.

00:45:55.700 --> 00:45:57.380
We could do this in Carbon.

00:45:57.380 --> 00:45:58.520
We're going to do it in Cocoa.

00:45:58.520 --> 00:46:01.190
We could imagine we would want
to add other technologies to

00:46:01.190 --> 00:46:02.790
this using Cocoa down the road.

00:46:03.310 --> 00:46:04.350
So she enters her name.

00:46:04.360 --> 00:46:06.080
We get the high-score list.

00:46:06.200 --> 00:46:07.420
She's number one.

00:46:09.860 --> 00:46:13.430
And now, let's take a look at some
of the architectural changes

00:46:13.460 --> 00:46:14.510
we're going to make to this.

00:46:14.730 --> 00:46:17.280
So we could go back to slides, please.

00:46:20.100 --> 00:46:21.460
There are two things
we're going to change.

00:46:21.600 --> 00:46:24.000
We're going to add a
preference panel using Cocoa,

00:46:24.000 --> 00:46:28.000
similar to what Tina illustrated earlier.

00:46:28.120 --> 00:46:33.310
And then we're also going to change the
high score name entry dialog to be Cocoa.

00:46:35.100 --> 00:46:37.200
So before the integration,
what does this code look like?

00:46:37.200 --> 00:46:40.190
It's basically six source files.

00:46:40.370 --> 00:46:41.800
It's straight C.

00:46:41.900 --> 00:46:45.100
It includes a kind of basic
sprite engine and sound engine.

00:46:45.100 --> 00:46:48.650
It was something that John Calhoun
actually used to learn how to

00:46:48.810 --> 00:46:53.000
program through the years as he
was working on Glider for the Mac.

00:46:53.090 --> 00:46:55.870
It includes high score lists
and other preference code.

00:46:56.150 --> 00:47:00.000
It saves all these out manually
using its own data structure,

00:47:00.000 --> 00:47:02.190
which it then stores out.

00:47:03.490 --> 00:47:04.970
We're going to change that a little bit.

00:47:05.020 --> 00:47:08.640
We're going to go more towards the
model-view-controller approach that

00:47:08.810 --> 00:47:12.540
Tina illustrated and access some
of this through a preferences model

00:47:12.540 --> 00:47:14.420
instead of directly to the struct.

00:47:17.530 --> 00:47:21.270
And we've taken the liberty of making
some Carbon modifications to the

00:47:21.330 --> 00:47:23.690
code before stepping in with Cocoa.

00:47:23.820 --> 00:47:26.140
Basically,
what we've done is replaced the

00:47:26.140 --> 00:47:31.100
Pascal strings with CFStrings to finally
support Unicode and other languages.

00:47:31.210 --> 00:47:34.670
This enables easy data
transfer to NSStrings.

00:47:34.750 --> 00:47:38.900
As I mentioned earlier,
we can simply cast the CFString to

00:47:38.900 --> 00:47:41.270
an NSString or vice versa.

00:47:45.730 --> 00:47:49.170
So let's go look at the other
Cocoa changes we've made to this code.

00:47:49.200 --> 00:47:56.360
The first thing to notice looking at
the files here is that we've changed the

00:47:56.360 --> 00:48:00.960
extension on main from main.c to main.m.

00:48:01.000 --> 00:48:05.240
This indicates that we'll be including
Objective-C source in this file.

00:48:05.660 --> 00:48:07.940
And if we open it up,
we can look at the code that

00:48:07.940 --> 00:48:10.780
actually handles preferences.

00:48:12.560 --> 00:48:17.060
When we load preferences,
we pound ifdef obc, this code,

00:48:17.060 --> 00:48:20.640
just in case we were to
compile it on another platform.

00:48:20.640 --> 00:48:22.640
I'm not quite sure why
we'd want to do that here,

00:48:22.640 --> 00:48:24.240
but it illustrates the point.

00:48:24.240 --> 00:48:29.800
And what we can see is that we're calling
NSApplicationLoad to initialize Cocoa.

00:48:30.360 --> 00:48:33.800
And finally,
we create a new prefs model object and

00:48:33.800 --> 00:48:39.890
initialize it with a preferences data
structure that Glypha 3 natively uses.

00:48:40.590 --> 00:48:42.940
So that loads in preferences
when the game starts up.

00:48:42.960 --> 00:48:46.180
Then when the preferences menu
item is chosen in the game,

00:48:46.180 --> 00:48:51.270
we need to actually go and create
this new Cocoa preferences panel.

00:48:51.280 --> 00:48:54.630
Once again,
we carefully conditionalize our code,

00:48:54.640 --> 00:48:59.060
and then what we call is
NSBundle's LoadNibNamed method.

00:48:59.060 --> 00:49:05.310
And this actually takes a nib name
as its parameter and basically

00:49:05.370 --> 00:49:08.890
loads up our preference panel,
which it then displays on the screen.

00:49:10.500 --> 00:49:14.220
Let's take a look at that
preferences panel now.

00:49:16.100 --> 00:49:17.000
Here it is.

00:49:17.030 --> 00:49:21.880
It should look very similar
to what Tina showed earlier.

00:49:22.250 --> 00:49:23.960
And we've made just a couple of changes.

00:49:24.280 --> 00:49:27.210
You'll notice a Show Fonts button here.

00:49:27.340 --> 00:49:33.100
And what that's for is, basically,
we can't add a fonts menu to a

00:49:33.190 --> 00:49:35.580
Carbon resource manager-based menu bar.

00:49:35.580 --> 00:49:40.020
So we've added a fonts button here
to actually show that font panel.

00:49:41.650 --> 00:49:43.900
Other than that, it's basically the same.

00:49:43.900 --> 00:49:46.740
From a Carbon perspective,
we don't have to know anything

00:49:46.740 --> 00:49:49.730
about how checkboxes and
radio buttons are implemented.

00:49:49.780 --> 00:49:53.730
All we need to do is write
the code that gets run when

00:49:54.150 --> 00:49:56.690
these controls are triggered.

00:49:56.700 --> 00:50:01.320
Speaking of which,
let's go look at the setSound method now.

00:50:01.320 --> 00:50:02.550
Here we go.

00:50:08.230 --> 00:50:09.500
This code is fairly straightforward.

00:50:09.500 --> 00:50:12.000
It basically gets the
state of the checkbox,

00:50:12.000 --> 00:50:14.680
and if it's on, it turns on the sound.

00:50:14.680 --> 00:50:17.040
If it's off, it turns off the sound.

00:50:17.040 --> 00:50:19.650
And then it synchronizes the model.

00:50:21.160 --> 00:50:23.460
Pretty simple.

00:50:23.480 --> 00:50:27.370
Now let's take a look at the other
nib in this game that we've added,

00:50:27.380 --> 00:50:31.420
which is our new high score entry dialog.

00:50:31.430 --> 00:50:34.620
And it looks very similar to
the Carbon one we showed before,

00:50:34.620 --> 00:50:36.470
as it should.

00:50:37.080 --> 00:50:41.000
So let's take a look at the
code that loads this nib.

00:50:50.320 --> 00:50:54.700
Once again,
we allocate a new controller object

00:50:54.700 --> 00:51:01.200
and then call loadNibNamed to actually
load this high-score entry dialog.

00:51:01.790 --> 00:51:04.410
So those are the changes we've made.

00:51:04.630 --> 00:51:10.650
Let's run the app now and see how this
new retrofitted version of Glypho3 works.

00:51:14.520 --> 00:51:16.680
So we actually have a
preferences panel now,

00:51:16.680 --> 00:51:17.670
which we can pull up.

00:51:17.850 --> 00:51:21.640
So this is a Cocoa window
running in a Carbon application

00:51:21.640 --> 00:51:23.990
that's been around for 15 years.

00:51:25.090 --> 00:51:30.300
We can go and change the
name of the high score list.

00:51:30.360 --> 00:51:32.660
We can pick a different
font while we're at it.

00:51:32.730 --> 00:51:34.620
Let's pick something a
little more Egyptian,

00:51:34.620 --> 00:51:37.280
like Papyrus or something.

00:51:39.920 --> 00:51:41.880
Make it a little bigger, maybe.

00:51:41.880 --> 00:51:43.700
And sound is on, so okay, good.

00:51:43.700 --> 00:51:47.140
So let's close those windows,
and actually Tina will go

00:51:47.400 --> 00:51:49.390
and play a new game again.

00:52:03.160 --> 00:52:06.480
If you download this from SourceForge,
play it all day,

00:52:06.480 --> 00:52:08.790
I was pretty good at one time.

00:52:18.620 --> 00:52:21.640
She's made it to the high
score list at this point.

00:52:21.640 --> 00:52:26.250
I think she's just going
to take her lucky now.

00:52:43.800 --> 00:52:47.180
died a gruesome death,
and now she can enter her name,

00:52:47.190 --> 00:52:49.260
but we're not limited to English anymore.

00:52:49.260 --> 00:52:52.440
We can actually have Tina go
enter her name in Chinese.

00:52:55.800 --> 00:53:01.280
thanks to the power of end-to-end Unicode
support through NSString and CFString,

00:53:01.330 --> 00:53:03.180
her name is displayed now in Chinese.

00:53:03.200 --> 00:53:08.210
Let's go back to slides.

00:53:10.810 --> 00:53:12.330
So what have we learned today?

00:53:12.390 --> 00:53:15.820
Well, we've learned that thanks to
the object-oriented and very

00:53:15.830 --> 00:53:20.100
dynamic frameworks in Cocoa,
your development can be faster.

00:53:20.150 --> 00:53:22.550
We've also learned that the
Cocoa fundamentals really

00:53:22.580 --> 00:53:27.620
aren't that hard to learn,
and Objective-C is really not that bad.

00:53:27.960 --> 00:53:30.990
And finally,
we've learned that you can integrate

00:53:31.130 --> 00:53:36.660
Cocoa into your existing applications or
build whole new applications using Cocoa.

00:53:36.690 --> 00:53:42.220
At this point, I'll turn things back
over to Jason for wrap-up.

00:53:42.290 --> 00:53:44.610
Thank you, Matt.

00:53:44.610 --> 00:53:44.610
Thank you, Tina.

00:53:48.600 --> 00:56:19.800
[Transcript missing]