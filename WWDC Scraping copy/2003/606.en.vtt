WEBVTT

00:00:26.500 --> 00:00:29.080
Good afternoon and
welcome to session 606,

00:00:29.080 --> 00:00:30.630
Mac OS X Server in Depth.

00:00:34.220 --> 00:00:36.950
Before we start,
I'll just spend a minute or so

00:00:37.140 --> 00:00:41.530
talking about some of the specific
goals we had for this release,

00:00:41.530 --> 00:00:43.470
the Pencil Server release.

00:00:47.680 --> 00:00:51.540
First, we wanted to enhance our admin
software with more features,

00:00:51.630 --> 00:00:54.450
improved usability, more integration,
and so on.

00:00:54.560 --> 00:01:00.270
Second, we wanted to provide ways to
simplify the setup and configuration

00:01:00.270 --> 00:01:01.720
of lots of different servers.

00:01:01.780 --> 00:01:03.830
So for example, Rackprobe XSERVs.

00:01:03.840 --> 00:01:06.930
And next,
we wanted to complete our transition

00:01:07.210 --> 00:01:11.140
from NetInfo to LDAP server as
our primary directory server for

00:01:11.140 --> 00:01:14.990
scalability and many other benefits.

00:01:15.210 --> 00:01:17.970
And also,
establish a single sign-on strategy

00:01:17.970 --> 00:01:20.260
around Kerberos authentication.

00:01:20.260 --> 00:01:22.600
This is really important to us.

00:01:22.600 --> 00:01:26.070
And lastly, improve our
Windows compatibility features,

00:01:26.140 --> 00:01:30.770
both in terms of being able to fit into
existing Active Directory networks,

00:01:30.770 --> 00:01:34.740
as well as being able to replace
aging NT servers out there.

00:01:34.820 --> 00:01:37.360
There are tons of them out there.

00:01:39.000 --> 00:01:42.780
Since we're going to be talking about
directory services and authentication

00:01:42.940 --> 00:01:46.520
in two different sessions in details,
we have session 106 coming up

00:01:46.570 --> 00:01:50.960
right after this and have session
610 tomorrow morning at 1030.

00:01:50.960 --> 00:01:54.340
We're going to be focusing on the three
remaining items that are listed here.

00:01:56.530 --> 00:02:01.400
With that, we divided this session
into four subsections.

00:02:01.560 --> 00:02:03.190
First,
we're going to talk about server admin

00:02:03.310 --> 00:02:07.640
software and architecture behind it,
and also how developers can plug

00:02:07.770 --> 00:02:10.280
their software into the architecture.

00:02:11.030 --> 00:02:14.130
Second, we're gonna be looking at the
details of the server assistance

00:02:14.240 --> 00:02:17.770
new features that's gonna enable
you to set up a bunch of different

00:02:17.900 --> 00:02:20.690
servers simultaneously very quickly.

00:02:21.860 --> 00:02:24.050
And then we're going to be
talking about Windows features.

00:02:24.270 --> 00:02:27.610
We're going to be talking about how
we implemented it on top of Samba 3,

00:02:27.610 --> 00:02:32.230
and also how we integrated it with the
rest of Mac OS X Server components.

00:02:33.200 --> 00:02:36.630
And lastly but not least,
we have a handful of tips on developing

00:02:36.630 --> 00:02:38.030
for the pencil server platforms.

00:02:38.200 --> 00:02:41.130
So we're going to be talking
about things like optimizing

00:02:41.130 --> 00:02:43.020
your server software and such.

00:02:44.870 --> 00:02:47.680
So these are the four things
we're going to talk about today.

00:02:47.680 --> 00:02:52.070
And since we usually have sort of mixed
audience of both developers and sysadmin

00:02:52.070 --> 00:02:55.480
type people in these server sessions,
we're going to try and have useful

00:02:55.480 --> 00:02:59.180
information for both of those audience
groups sort of mixed in everywhere.

00:02:59.180 --> 00:03:04.830
So let's just start talking
about the admin software.

00:03:06.450 --> 00:03:09.350
In Jaguar Server,
we have two separate applications for

00:03:09.500 --> 00:03:12.800
configuring and monitoring servers.

00:03:12.800 --> 00:03:16.880
Server settings for configuration
and server status for monitoring.

00:03:16.880 --> 00:03:19.560
In PanSource Server,
we are combining those two into a

00:03:19.560 --> 00:03:22.710
single application called Server Admin.

00:03:23.140 --> 00:03:26.100
and has a bunch of new features
which I'm going to come back to,

00:03:26.120 --> 00:03:28.970
but also have a new GUI for
a number of services that

00:03:28.970 --> 00:03:30.300
did not have GUI in the past.

00:03:30.440 --> 00:03:34.630
For example, we now have QTSS management
integrated with the rest of

00:03:34.640 --> 00:03:37.900
Mac OS X Server services,
so you no longer have to go to web-based

00:03:37.910 --> 00:03:39.800
admin to manage the streaming server.

00:03:41.580 --> 00:03:44.850
We also now have
Open Directory GUI because we keep adding

00:03:44.890 --> 00:03:47.800
these new features to Open Directory that
requires configuration,

00:03:48.180 --> 00:03:51.930
such as replication support
for LDAP and Kerberos.

00:03:52.350 --> 00:03:55.670
And we finally have DNS GUI as well,
since a lot of people have been asking

00:03:55.760 --> 00:03:59.400
for this for the last four or five years.

00:04:00.210 --> 00:04:04.070
Thank you for waiting and
hope you're going to like it.

00:04:04.120 --> 00:04:06.970
And we also have GUI for
NAT application server,

00:04:06.970 --> 00:04:09.960
which includes things
like JBoss and such.

00:04:09.970 --> 00:04:12.310
And of course,
we also enhanced existing GUI for

00:04:12.440 --> 00:04:17.350
services such as web and mail
with a bunch of new features.

00:04:19.410 --> 00:04:21.890
At the application level,
actually before we start,

00:04:21.950 --> 00:04:24.190
how many of you went to the
Mac OS X Server overview

00:04:24.190 --> 00:04:25.130
session before this?

00:04:25.160 --> 00:04:26.880
So pretty much everybody.

00:04:26.880 --> 00:04:28.880
So you know some of the new features.

00:04:28.880 --> 00:04:32.870
So we do have this new
replication feature that you can

00:04:32.870 --> 00:04:35.760
replicate configuration services
by simple drag and drop,

00:04:35.810 --> 00:04:37.100
which is a pretty cool feature.

00:04:37.100 --> 00:04:40.290
We also have GUI for
remote software updates,

00:04:40.410 --> 00:04:42.950
so you no longer have to go to the
server machine to perform software

00:04:42.950 --> 00:04:44.760
update or go to terminal to do so.

00:04:47.200 --> 00:04:47.880
Read-only mode.

00:04:47.930 --> 00:04:51.460
So now that we combined
configuration and monitoring,

00:04:51.460 --> 00:04:52.850
there was one problem.

00:04:52.850 --> 00:04:55.660
And that is,
we think many of you want to keep

00:04:55.660 --> 00:04:59.270
this application up and running all
the time so you can monitor things,

00:04:59.270 --> 00:05:01.580
but if you walk away from the
machine for a few minutes,

00:05:01.580 --> 00:05:04.230
go to the bathroom or wherever,
people can just come up and then

00:05:04.230 --> 00:05:05.670
change their configurations.

00:05:05.980 --> 00:05:08.210
So to prevent that,
we implemented this thing

00:05:08.220 --> 00:05:11.020
called read-only mode,
where the application will not

00:05:11.130 --> 00:05:15.620
let you make any changes to your
configuration until you type in

00:05:15.850 --> 00:05:18.330
your admin password to unlock it.

00:05:18.380 --> 00:05:20.130
And I'm going to demo
that in a few minutes.

00:05:21.890 --> 00:05:24.730
We also have a summary view where,
at a glance,

00:05:24.890 --> 00:05:28.020
you can look at the status of all
the servers and services so you

00:05:28.110 --> 00:05:31.110
don't have to go to individual
servers and see how things are going.

00:05:31.120 --> 00:05:33.990
This will be useful for computational
clusters or web server forms or

00:05:34.170 --> 00:05:36.920
different environments where you
have a large number of servers that

00:05:36.920 --> 00:05:38.660
you want to monitor simultaneously.

00:05:41.090 --> 00:05:44.000
And there are other features sort of
scattered throughout the application,

00:05:44.000 --> 00:05:46.400
so you can try out your
CD and then check it out.

00:05:48.400 --> 00:05:55.600
[Transcript missing]

00:05:56.700 --> 00:05:59.830
So you can connect to both Jaguar
servers and Panzer servers.

00:05:59.830 --> 00:06:03.820
However, in Jaguar server,
it's monitoring only,

00:06:03.820 --> 00:06:06.320
so you cannot configure.

00:06:06.320 --> 00:06:06.320
Sorry.

00:06:09.230 --> 00:06:13.300
So now I'd like to give you a
little demo of Server Admin,

00:06:13.380 --> 00:06:16.690
but the problem is this application's
been popular and it's been

00:06:16.760 --> 00:06:17.860
demoed in two other sessions.

00:06:17.860 --> 00:06:21.480
I'm running out of things to show you,
but I do have a couple

00:06:21.480 --> 00:06:23.490
things I wanted to go over.

00:06:26.230 --> 00:06:32.340
So the first thing is, let's see,
go to AFB, and as everybody's seen,

00:06:32.340 --> 00:06:35.340
you can do drag and drop replication
here between different servers.

00:06:35.340 --> 00:06:38.510
We can also drag this onto a desktop,
and this makes a backup

00:06:38.510 --> 00:06:40.040
copy of your configuration.

00:06:40.040 --> 00:06:41.390
Thank you.

00:06:43.550 --> 00:06:48.200
So later on, if you need to reinstall
the server or whatever else,

00:06:48.210 --> 00:06:52.710
you can just go ahead
and simply drag back in.

00:06:54.720 --> 00:06:55.690
Thank you.

00:06:55.700 --> 00:06:56.700
That will be handy for other people.

00:06:56.700 --> 00:06:58.700
And the read-only mode.

00:06:58.700 --> 00:07:01.980
So let's go to this menu
here and then lock now.

00:07:02.320 --> 00:07:05.510
And application tells you
everything is locked out.

00:07:05.700 --> 00:07:08.730
So with that, you see this little icon
here that says Read Only,

00:07:08.730 --> 00:07:11.210
and everything in the
settings panel is now,

00:07:11.210 --> 00:07:12.380
cannot be edited.

00:07:12.380 --> 00:07:14.350
So same thing if you go to the Windows.

00:07:14.420 --> 00:07:16.270
It's all grayed out.

00:07:16.320 --> 00:07:17.460
Same thing for FTP.

00:07:17.460 --> 00:07:18.680
It's all grayed out.

00:07:18.760 --> 00:07:23.100
And you can unlock it by just going here,
typing in admin password,

00:07:23.100 --> 00:07:24.660
and you're back in business.

00:07:26.550 --> 00:07:31.460
You can also set a timer,
so after a certain amount of time,

00:07:31.460 --> 00:07:33.180
the application
automatically locks itself,

00:07:33.210 --> 00:07:35.120
so it works much like the screensaver.

00:07:35.120 --> 00:07:40.220
So that's the server admin,
30 seconds demo.

00:07:43.730 --> 00:07:45.600
Back to the presentation, please.

00:07:45.600 --> 00:07:49.710
Now let's look at how this
one works behind the scene.

00:07:50.600 --> 00:07:54.030
Server Admin is a Cocoa application,
and there is a plugin for

00:07:54.030 --> 00:07:56.420
each of the services that you
saw in the left-hand column.

00:07:56.610 --> 00:08:00.920
So there is a plugin for AFP,
there's a plugin for the web service,

00:08:00.930 --> 00:08:00.930
and so on.

00:08:01.060 --> 00:08:03.690
On the server side,
we have a stripped-down version

00:08:03.700 --> 00:08:07.920
of Apache Web Server with a few
custom modules that we developed,

00:08:07.920 --> 00:08:10.580
and it's working as the
admin server engine.

00:08:10.580 --> 00:08:15.230
And the server admin talks to
the backend engine by passing

00:08:15.270 --> 00:08:19.750
XML backend force over HTTP,
usually also over SSL.

00:08:21.320 --> 00:08:24.110
Whenever there's a request that
comes from the GUI application,

00:08:24.210 --> 00:08:26.780
the engine dispatches
to one of the CGI's.

00:08:27.130 --> 00:08:29.690
Again, there is one CGI for
each of the services.

00:08:29.830 --> 00:08:32.190
There's AP CGI, web CGI, and so on.

00:08:32.770 --> 00:08:39.880
Individual CGI's do know how to
talk to its own particular service.

00:08:40.160 --> 00:08:43.380
can do things like start and stop
the particular server or service.

00:08:43.400 --> 00:08:47.130
You can get real-time status
information from the service,

00:08:47.220 --> 00:08:50.930
and you can also read and write
configuration file or configuration

00:08:50.970 --> 00:08:53.500
information for the service,
which are usually stored

00:08:53.540 --> 00:08:56.220
either in the config file or
up in the directory server.

00:08:56.220 --> 00:08:59.380
And as needed,
the CGI also signals the application

00:08:59.440 --> 00:09:01.940
to refresh its configuration
or restart if necessary.

00:09:01.940 --> 00:09:07.660
And by the way, these CGI's are all just
regular Unix command line tools.

00:09:07.660 --> 00:09:08.890
Thank you.

00:09:09.290 --> 00:09:12.900
So that's the real basic design
of our admin application,

00:09:12.900 --> 00:09:14.210
or admin architecture.

00:09:15.670 --> 00:09:19.640
And if you notice, we try to use standard
technology whenever possible.

00:09:19.780 --> 00:09:26.820
So HTTP, XML, Apache, CGI, SSL,
and so on.

00:09:27.330 --> 00:09:30.670
And also, with this modular design,
it was really easy for us to

00:09:30.670 --> 00:09:33.000
develop and debug this product.

00:09:33.070 --> 00:09:37.290
For example, to debug this client-side
GUI application or the plugin,

00:09:37.290 --> 00:09:39.080
we didn't have to even
have the server-side.

00:09:39.080 --> 00:09:42.110
We could simply pass XML into
it and test its functionality.

00:09:42.400 --> 00:09:44.060
And vice versa is true, too.

00:09:44.060 --> 00:09:47.330
We could just use a web browser
and pass the XML file to the

00:09:47.460 --> 00:09:49.400
backend to test the server-side.

00:09:49.530 --> 00:09:52.490
We could also test the CGI,
so you could unit test it by

00:09:52.490 --> 00:09:56.070
simply SSH into the server and
directly invoking it since they're

00:09:56.130 --> 00:09:58.060
just Unix command line tools.

00:10:00.160 --> 00:10:03.460
This worked out pretty well for us.

00:10:03.460 --> 00:10:07.450
Right now, it is not public,
but if there's enough demand,

00:10:07.500 --> 00:10:09.820
we would like to make it public.

00:10:09.820 --> 00:10:14.520
If you're interested, please let us know.

00:10:15.370 --> 00:10:16.280
I heard seven.

00:10:16.370 --> 00:10:17.250
Eight.

00:10:17.290 --> 00:10:20.300
Okay, thank you.

00:10:20.300 --> 00:10:24.480
I guess we have to look
into making it public.

00:10:24.480 --> 00:10:27.740
We have been actually working with
one particular developer to port their

00:10:27.740 --> 00:10:30.920
administration software to Server Admin,
and it looks like they have

00:10:31.060 --> 00:10:34.090
something up and running now,
so I thought it would be neat

00:10:34.130 --> 00:10:36.160
to actually have it demoed.

00:10:36.160 --> 00:10:40.610
So now I'd like to welcome Steve Olson,
who is the Technical Director of

00:10:40.610 --> 00:10:42.490
Engineering at Sybase.

00:10:49.070 --> 00:10:49.800
Thank you, Kazu.

00:10:49.800 --> 00:10:54.880
I think most of us here who have had
the job of managing a network of servers

00:10:54.880 --> 00:10:58.600
can appreciate and understand the value
of having the right tool for the job.

00:10:58.600 --> 00:11:03.000
We at Sybase have heard that from our
customers just about every single day.

00:11:03.000 --> 00:11:07.530
So we're very pleased that Apple has
provided this extensible framework

00:11:07.530 --> 00:11:12.200
that allows us to plug in our server
management capabilities with the admin

00:11:12.200 --> 00:11:14.700
framework that Apple has provided.

00:11:14.880 --> 00:11:16.420
Apple understands user interfaces.

00:11:16.420 --> 00:11:17.600
We don't.

00:11:17.630 --> 00:11:21.220
But we understand our database
and what needs to be done.

00:11:21.220 --> 00:11:25.310
So they've provided a very
elegant framework that makes a

00:11:25.310 --> 00:11:30.140
very nice user interface for the
administration of our server.

00:11:30.140 --> 00:11:32.890
So what we have, well, we've done that.

00:11:32.890 --> 00:11:37.290
We've been working with this
toolkit for about 10 days now.

00:11:37.300 --> 00:11:41.520
And we have a first pass at what
we think will be available with the

00:11:42.010 --> 00:11:44.460
Panther release when Panther comes out.

00:11:44.880 --> 00:11:48.680
So standard disclaimer
applies here as I demo this.

00:11:48.860 --> 00:11:53.690
It may change quite a bit by the
time we actually release this.

00:11:53.760 --> 00:11:55.520
So I've got a Jaguar version here.

00:11:55.520 --> 00:11:57.310
I don't have the Panther release.

00:11:57.360 --> 00:12:01.930
And what I have is a plug-in
on the admin tool side and the

00:12:02.430 --> 00:12:08.600
Apache module on the server side that
understands something about Sybase.

00:12:08.600 --> 00:12:12.210
So the general status tool says
what is the state of the service.

00:12:12.390 --> 00:12:14.630
And the service is our
adaptive server enterprise.

00:12:14.880 --> 00:12:15.910
Amen.

00:12:16.100 --> 00:12:18.880
You can do things like
read the transaction logs.

00:12:18.880 --> 00:12:23.570
We have a usage indicator that tells
us the general summary of what's going

00:12:23.570 --> 00:12:27.360
on inside the server in terms of load,
the number of users connected,

00:12:27.360 --> 00:12:31.960
the databases present in the system and
their size and attributes and so forth.

00:12:32.010 --> 00:12:34.720
Databases map to devices,
physical devices,

00:12:34.720 --> 00:12:37.200
so we have some information about those.

00:12:37.240 --> 00:12:39.890
An engine is an operating system process.

00:12:39.890 --> 00:12:44.220
We associate one engine per CPU so
we can get information about that.

00:12:44.310 --> 00:12:49.720
Any locks that are present in the system,
various monitor information is available.

00:12:49.720 --> 00:12:54.900
We have, after learning the framework,
it took us a day or two to sort out

00:12:54.900 --> 00:12:57.820
what this Cocoa environment is about.

00:12:57.830 --> 00:13:03.110
The challenge before us was then figuring
out what information to present to

00:13:03.380 --> 00:13:05.990
you to make it useful and meaningful.

00:13:06.100 --> 00:13:09.750
We have, for example,
over 200 configuration values,

00:13:09.750 --> 00:13:12.540
yet there's probably a dozen or
so that are very commonly used.

00:13:12.670 --> 00:13:18.460
So our task is going to be to sort out
which one of these are most relevant.

00:13:18.480 --> 00:13:21.660
We will expose them all,
but in the settings, sorry,

00:13:21.910 --> 00:13:25.630
in the settings value we'll
provide maybe a dozen or so

00:13:25.630 --> 00:13:29.780
configuration settings that,
for example, numbers of users, memory,

00:13:30.260 --> 00:13:34.960
cache sizes and so forth that are
typically used by our customers when

00:13:34.960 --> 00:13:36.970
they want to reconfigure the server.

00:13:37.020 --> 00:13:38.890
We've been having a lot of fun with it.

00:13:39.010 --> 00:13:42.140
This is a very convenient
tool to help us manage.

00:13:42.140 --> 00:13:48.500
By the way, you can start and stop the
server without having to use a

00:13:48.500 --> 00:13:50.320
terminal window or anything else.

00:13:50.400 --> 00:13:54.580
It's a very convenient way to
look at everything going on in the

00:13:54.580 --> 00:13:57.200
server from a single workstation.

00:13:57.200 --> 00:14:01.520
One thing that is very nice is that
if you've got a list of servers here,

00:14:01.620 --> 00:14:06.430
you can get a summary view of all servers
and each service appears as a dot.

00:14:06.980 --> 00:14:09.680
Which is either red or
green or some other color.

00:14:09.680 --> 00:14:15.980
And you can get a very clear overview
of everything running on your network.

00:14:16.100 --> 00:14:19.470
So that's what we've done and this
will be available with our product,

00:14:19.560 --> 00:14:23.260
our 12.5.1 release,
which we're tying to the release

00:14:23.260 --> 00:14:25.260
and availability of Panther.

00:14:25.410 --> 00:14:27.640
Thank you.

00:14:31.000 --> 00:14:36.800
[Transcript missing]

00:14:39.040 --> 00:14:41.960
So let's go back to the
architectural diagram.

00:14:42.010 --> 00:14:46.420
I know many of you like Mac OS X,
Mac OS X GUI, and Cocoa,

00:14:46.420 --> 00:14:50.370
but some of us still like to use
Terminal for managing servers.

00:14:50.370 --> 00:14:53.170
So for those people,
we actually developed a

00:14:53.170 --> 00:14:54.590
new command line tool.

00:14:54.680 --> 00:14:56.580
It's also called Server Admin.

00:14:56.580 --> 00:14:59.020
And with this tool,
you can do everything that

00:14:59.020 --> 00:15:00.640
you can do from GUI and more.

00:15:00.690 --> 00:15:03.210
So I'd like to show
that to you right now.

00:15:08.950 --> 00:15:10.800
Switch to this machine here.

00:15:10.800 --> 00:15:12.800
Okay.

00:15:12.800 --> 00:15:16.790
Okay, so let's go to terminal.

00:15:18.490 --> 00:15:22.720
You can do a server admin list
that lists all the services that

00:15:22.720 --> 00:15:24.180
are installed on the server.

00:15:24.180 --> 00:15:26.850
And of course, you can use this to start
or stop any of them.

00:15:26.860 --> 00:15:32.500
You can also get status on any
particular service you'd like.

00:15:32.570 --> 00:15:36.160
So you can do something
like full status AFP.

00:15:36.160 --> 00:15:39.260
That gives you a list of
how the server is doing.

00:15:39.260 --> 00:15:41.260
So the AFP server is running.

00:15:41.430 --> 00:15:42.700
This is the time it was started.

00:15:42.750 --> 00:15:44.500
And guest access is on.

00:15:44.840 --> 00:15:47.380
There's currently one user
connected from this machine here.

00:15:47.620 --> 00:15:51.100
And throughput is zero since
the client is sitting idle.

00:15:51.320 --> 00:15:54.520
And you can also issue commands that
are specific to any particular service.

00:15:54.660 --> 00:15:58.970
For example, you can do,

00:16:11.490 --> 00:16:14.610
So that lists all the currently
connected users with information

00:16:14.700 --> 00:16:19.480
such as name of the login name,
the IP address, and how long the person

00:16:19.480 --> 00:16:21.060
has been connected for,
and so on.

00:16:21.080 --> 00:16:23.790
Of course, you have commands for
disconnecting the user,

00:16:23.790 --> 00:16:25.290
sending messages, and so on.

00:16:27.160 --> 00:16:29.870
But probably the most common
use for this tool is doing the

00:16:29.940 --> 00:16:32.600
configuration of different services.

00:16:33.710 --> 00:16:36.170
For that, you can just do settings.

00:16:36.340 --> 00:16:38.510
And again,
if you specify any of the services,

00:16:38.570 --> 00:16:41.310
let's do AFP,
that lists all the configuration

00:16:41.310 --> 00:16:44.850
options for the AFP server and
what the current settings are.

00:16:44.880 --> 00:16:47.180
So if you look at it,
you've got the maximum number of threads,

00:16:47.310 --> 00:16:50.880
40, the max guest is minus one,
which you think means unlimited,

00:16:50.920 --> 00:16:53.270
the error log size, and so on.

00:16:53.400 --> 00:16:56.380
You can also, if you know exactly
what you're looking for,

00:16:56.390 --> 00:17:01.030
you can simply type in one of the
options and it shows you status of that.

00:17:01.190 --> 00:17:04.490
So this tells you that login
greeting setting The text is not set,

00:17:04.530 --> 00:17:06.300
so right now it's empty.

00:17:06.540 --> 00:17:08.600
Of course,
you can set configuration as well.

00:17:08.620 --> 00:17:12.680
So let's go here and
use the login greeting.

00:17:12.780 --> 00:17:15.030
If you go to the GUI and look at it,
sure enough the login

00:17:15.110 --> 00:17:16.500
greeting's empty right now.

00:17:16.640 --> 00:17:22.560
You can go here and specify, let's see,
welcome to WWDC.

00:17:23.400 --> 00:17:24.240
That's it.

00:17:24.240 --> 00:17:27.640
If you go here and refresh, it works.

00:17:27.790 --> 00:17:29.670
So.

00:17:34.180 --> 00:17:37.220
Again, you can pretty much do everything
that you want you can do from the

00:17:37.220 --> 00:17:39.730
GUI from this terminal application.

00:17:39.780 --> 00:17:43.390
But you can also use this as a
building block to build your own

00:17:43.500 --> 00:17:45.360
custom solution on top of it.

00:17:45.360 --> 00:17:47.370
And to illustrate that,
we wrote a real quick,

00:17:47.380 --> 00:17:50.480
simple shell script that
I wanna show it to you.

00:17:50.880 --> 00:17:54.320
So let's say you add new websites
to your server frequently

00:17:54.560 --> 00:17:57.230
with mostly same options,
and you want to do

00:17:57.230 --> 00:17:58.860
that from command line.

00:17:59.310 --> 00:18:01.620
You can use our short
script called @site.

00:18:01.620 --> 00:18:05.120
And actually before start,
let me go to GUI here.

00:18:05.120 --> 00:18:09.540
Web, Settings, Sites,
and make sure the only site that's

00:18:09.600 --> 00:18:12.710
defined right now is the default,
so there's no other virtual hosts.

00:18:12.730 --> 00:18:14.480
But we're gonna go ahead and add one.

00:18:14.520 --> 00:18:17.560
So @site, specify IP address.

00:18:18.750 --> 00:18:20.570
And let's see the port number.

00:18:20.600 --> 00:18:21.860
Let's make it 8080.

00:18:22.060 --> 00:18:26.180
Name of the site, my site,
and the web folder.

00:18:27.900 --> 00:18:30.540
There you go.

00:18:30.680 --> 00:18:35.100
So if you go to the GUI,
here is the site.

00:18:35.100 --> 00:18:38.010
Now you have this website up and running.

00:18:42.610 --> 00:18:44.680
Of course, you double click on it,
you got the web floor that

00:18:44.770 --> 00:18:46.380
we specified and so on.

00:18:46.590 --> 00:18:48.590
So now let's look at how this works.

00:18:48.590 --> 00:18:55.910
So, add site is just actually
a single line shell script.

00:18:58.720 --> 00:19:03.210
So what it does is use this set to
substitute some of the strings in this

00:19:03.210 --> 00:19:08.250
data file at site.in with the argument
that's been passed into the shell script.

00:19:08.320 --> 00:19:11.150
And then it pipes the output
to our command line tool,

00:19:11.150 --> 00:19:14.800
which is running on .i,
which is an interactive or input mode.

00:19:15.850 --> 00:19:21.810
And then if you look at the data file,
it's actually basically just a

00:19:22.020 --> 00:19:25.850
collection of the settings for the web
server with a lot of default values,

00:19:25.850 --> 00:19:29.890
except for a few of them that start with
underscore such as IP address and then

00:19:29.890 --> 00:19:32.230
the port number gets substituted by set.

00:19:32.240 --> 00:19:34.320
So it's real simple, but it works.

00:19:34.340 --> 00:19:37.740
So hopefully people can use this
server admin command line tool to

00:19:37.870 --> 00:19:39.780
create your own custom solution.

00:19:45.140 --> 00:19:49.540
So to summarize Server Admin,
for system admins,

00:19:49.550 --> 00:19:53.320
we have a new Server Admin
GUI application that combines

00:19:53.370 --> 00:19:57.660
configuration and monitoring
and has a bunch of new features.

00:19:57.660 --> 00:20:00.160
We also have Server Admin
Command Line tool that you can

00:20:00.160 --> 00:20:02.870
use to do pretty much everything
that you can do in the GUI,

00:20:02.980 --> 00:20:06.060
or you can use it to use a
building block to build your own

00:20:06.060 --> 00:20:08.900
custom solution on top of it.

00:20:09.460 --> 00:20:12.070
For developers,
we have a modular and scalable

00:20:12.070 --> 00:20:15.400
and flexible server admin
architecture that you can plug into.

00:20:15.400 --> 00:20:18.870
If you're interested,
let us know and we'd

00:20:18.880 --> 00:20:20.880
love to work with you.

00:20:20.900 --> 00:20:23.320
That concludes the server admin portion.

00:20:23.320 --> 00:20:27.380
I would like to welcome Scott Mulligan,
who's going to tell us all about the new

00:20:27.380 --> 00:20:30.190
server and server assistant features.

00:20:33.100 --> 00:20:35.490
Thanks.

00:20:35.490 --> 00:20:37.060
Hi there.

00:20:37.490 --> 00:20:38.760
Good afternoon.

00:20:38.780 --> 00:20:40.980
I'm Scott Mulligan,
and I'll be spending a few minutes with

00:20:40.980 --> 00:20:44.290
you discussing the server assistant.

00:20:44.740 --> 00:20:48.630
The Server Assistant is the
first application that runs

00:20:48.660 --> 00:20:51.160
on a freshly installed server.

00:20:51.210 --> 00:20:54.380
And its objective is to

00:20:54.830 --> 00:20:59.970
To get the system set up in the
most basic setup state so that it

00:21:00.080 --> 00:21:04.440
can be fully configured at a later
time after it's been rebooted.

00:21:04.480 --> 00:21:09.800
So in the Jaguar server,

00:21:10.800 --> 00:21:14.580
The server assistant is always
run on the system console,

00:21:14.580 --> 00:21:21.000
and the system keyboard and mouse
is used to capture setup data.

00:21:22.980 --> 00:21:27.550
Additionally,
to accommodate headless servers and to

00:21:27.550 --> 00:21:32.140
provide additional level of convenience,
the Jaguar Server Assistant can be

00:21:32.140 --> 00:21:36.390
run from a remote system in order to
perform both setup and installation.

00:21:36.400 --> 00:21:40.940
Of course, in Panther Server,
we've come up with a couple ways that we

00:21:40.950 --> 00:21:43.090
can improve this experience even more.

00:21:45.020 --> 00:21:47.400
So with the popularity
of Mac OS X Server,

00:21:47.400 --> 00:21:50.860
we realized that many of our
customers are buying multiple servers,

00:21:50.880 --> 00:21:53.430
and thus they're setting
up multiple servers.

00:21:53.440 --> 00:21:56.940
So with Panther Server,
we've designed it so that they

00:21:57.000 --> 00:22:00.810
will be able to set up multiple
servers simultaneously from

00:22:00.960 --> 00:22:03.010
a single interview process.

00:22:03.120 --> 00:22:07.900
This will be accomplished by running
the server assistant from a remote

00:22:07.950 --> 00:22:12.590
system and targeting the specific
servers that you want to set up.

00:22:13.700 --> 00:22:16.380
It will look something like this.

00:22:19.000 --> 00:22:24.660
Servers that are eligible for setup on
the local subnet will show up in a list.

00:22:24.660 --> 00:22:28.380
And the system administrator simply
selects the servers to be set up.

00:22:29.360 --> 00:22:34.020
Additionally,
the administrator may add servers to

00:22:34.020 --> 00:22:39.200
this list by providing an IP address,
thus enabling the remote setup of a

00:22:39.240 --> 00:22:42.000
server that's not on the local subnet.

00:22:42.200 --> 00:22:45.900
Once the target systems are
selected and authentication

00:22:45.900 --> 00:22:48.430
information has been provided,

00:22:48.680 --> 00:22:52.800
The administrator proceeds into
a standard setup interview where

00:22:52.800 --> 00:22:57.850
the setup information is collected
and at the end of the interview

00:22:57.850 --> 00:22:59.600
all the servers are set up.

00:23:00.330 --> 00:23:03.440
There's also another scenario
that we've found that some of

00:23:03.440 --> 00:23:06.020
our customers are running into.

00:23:06.190 --> 00:23:09.820
It turns out that some of our
customers actually reinstall

00:23:09.820 --> 00:23:12.300
their systems from time to time.

00:23:12.530 --> 00:23:15.910
And others, due to the specific nature
of how they use our servers,

00:23:16.100 --> 00:23:20.000
actually end up resetting their
systems up more frequently as

00:23:20.100 --> 00:23:24.840
they repurpose our servers from
one particular task to another.

00:23:24.990 --> 00:23:27.930
For these folks,
setting up the server is something that

00:23:27.930 --> 00:23:30.000
they'd rather not deal with at all.

00:23:30.130 --> 00:23:34.180
So for these folks, we thought,
why not have the servers

00:23:34.210 --> 00:23:35.880
set themselves up?

00:23:36.710 --> 00:23:40.320
Of course, you need to provide the
setup information once,

00:23:40.330 --> 00:23:44.660
but you could save it to a
file to be used again later.

00:23:46.930 --> 00:23:50.200
So in Panther Server,
the server assistant has been designed

00:23:50.660 --> 00:23:54.740
to actually go out and discover
or set up profile data on its own.

00:23:54.740 --> 00:23:58.190
It does this by looking
for the setup data.

00:23:59.360 --> 00:24:04.180
In local file systems,
which can include local hard drives

00:24:04.180 --> 00:24:12.700
and various types of removable media,
such as CDs, FireWire drives, USB drives,

00:24:12.700 --> 00:24:13.890
etc.

00:24:14.550 --> 00:24:19.040
Additionally,
the server assistant will look and

00:24:19.040 --> 00:24:23.340
try to discover setup data that has
been saved to a directory server.

00:24:23.340 --> 00:24:27.890
If a directory server is accessible
and it holds setup data that

00:24:27.890 --> 00:24:33.040
pertains directly to this server,
then the setup assistant will utilize

00:24:33.040 --> 00:24:35.180
that data to set up the server.

00:24:36.700 --> 00:24:39.640
So, what does this mean?

00:24:39.690 --> 00:24:44.600
Well, for one thing it means that your
iPod can set up your server.

00:24:44.750 --> 00:24:50.000
Imagine saving setup profiles for
dozens of servers onto your iPod,

00:24:50.040 --> 00:24:56.110
or a FireWire drive, a USB thumb drive,
maybe even a CompactFlash card reader.

00:24:56.840 --> 00:25:00.110
You walk up to your server, plug it in,
and your server sets itself up.

00:25:00.200 --> 00:25:05.050
Or maybe you save these profiles
onto your directory server

00:25:05.050 --> 00:25:07.270
that's on your local network.

00:25:09.090 --> 00:25:11.370
Your servers just set themselves up.

00:25:11.600 --> 00:25:13.400
You wouldn't have to plug anything in.

00:25:13.470 --> 00:25:18.270
They could just find the info they need,
set themselves up, all on their own.

00:25:18.390 --> 00:25:20.260
So how does this work?

00:25:23.680 --> 00:25:26.120
Well, first of all,
we have a special setup daemon

00:25:26.350 --> 00:25:29.800
that runs on the server when
the server needs to be set up.

00:25:29.910 --> 00:25:33.090
And there is a special place
on the server that the server

00:25:33.200 --> 00:25:37.790
setup daemon examines from time
to time looking for setup data.

00:25:38.990 --> 00:25:44.400
The daemon loops periodically checking
to see if this data has shown up.

00:25:44.470 --> 00:25:48.230
But there are other places the daemon
could attempt to find the setup data.

00:25:48.330 --> 00:25:53.100
Directory servers, for example,
or local file system.

00:25:53.550 --> 00:25:58.400
The daemon will examine these places
as it proceeds through its loop.

00:25:58.540 --> 00:26:01.660
And if it's able to find
the relevant setup data,

00:26:01.660 --> 00:26:03.700
it will utilize it

00:26:05.430 --> 00:26:10.430
And then it will restart the system.

00:26:10.570 --> 00:26:16.380
So these last few slides have focused
on the back end process that actually

00:26:16.530 --> 00:26:20.260
enables this auto setup feature.

00:26:20.310 --> 00:26:22.830
Let's look at the bigger picture though.

00:26:23.990 --> 00:26:28.120
As I showed you in the previous slides,
there's a server setup daemon

00:26:28.220 --> 00:26:29.490
that is running on the server.

00:26:29.500 --> 00:26:35.800
And there's a specific place that
it examines for that setup data.

00:26:36.140 --> 00:26:38.720
But there's also a GUI application.

00:26:38.970 --> 00:26:43.280
And that GUI application can be
running locally on the server or it

00:26:43.280 --> 00:26:48.410
could be running on a remote system,
say your desktop in your office.

00:26:51.110 --> 00:26:54.410
In either case,
this GUI application presents an

00:26:54.410 --> 00:26:58.300
interview to the administrator in
order to collect the setup data.

00:26:58.470 --> 00:27:01.810
And at the end of that interview,
if the server is to be

00:27:01.910 --> 00:27:04.210
set up at this time,
in other words,

00:27:04.430 --> 00:27:08.750
at the end of the interview process,
that setup data is delivered to

00:27:08.750 --> 00:27:12.990
this specific location on the
server that the server setup

00:27:13.080 --> 00:27:15.630
daemon examines from time to time.

00:27:15.870 --> 00:27:20.910
And if that's done,
it enables the server to set itself up.

00:27:23.720 --> 00:27:27.620
But as we said,
the server setup daemon can

00:27:27.620 --> 00:27:30.730
discover data in other locations,
as in the directory server.

00:27:30.740 --> 00:27:32.760
So therefore...

00:27:33.580 --> 00:27:37.100
The GUI application has to
have the ability to save to,

00:27:37.380 --> 00:27:40.500
to connect to, to begin with,
to connect to a directory server

00:27:40.500 --> 00:27:43.580
and save to a directory server.

00:27:43.760 --> 00:27:45.590
The setup data.

00:27:45.830 --> 00:27:51.350
And once this is done, of course,
it allows the server to set itself up.

00:27:56.360 --> 00:27:59.300
And, as we mentioned before,
the same thing can be done

00:27:59.300 --> 00:28:01.670
with the local file system.

00:28:01.940 --> 00:28:06.040
I'd like to point out that the local
file system here may not be local to

00:28:06.060 --> 00:28:07.400
the server at the time that you save it.

00:28:07.470 --> 00:28:09.940
It may be your iPod,
but when you carry it over

00:28:09.940 --> 00:28:12.170
and plug it into your server,
it becomes local file

00:28:12.170 --> 00:28:13.700
system on the server.

00:28:13.740 --> 00:28:16.200
On the other hand,
it could be a partition that

00:28:16.790 --> 00:28:19.110
already exists on this server.

00:28:22.770 --> 00:28:29.060
Okay,
so the setup profile for your server

00:28:29.220 --> 00:28:33.740
may contain sensitive data that
you don't want other people to see.

00:28:34.010 --> 00:28:39.280
If that data is saved onto some form
of removable media that you actually

00:28:39.280 --> 00:28:43.140
safeguard yourself as the administrator,
such as your iPod,

00:28:43.260 --> 00:28:45.260
that might not be a problem.

00:28:45.450 --> 00:28:47.910
But that's not always the case.

00:28:48.640 --> 00:28:53.740
Therefore, any time data is saved
from the GUI application,

00:28:53.740 --> 00:28:57.600
whether it's to a file
or to directory services,

00:28:57.770 --> 00:29:00.910
an option is provided
to encrypt that data.

00:29:01.250 --> 00:29:05.760
The encryption utilizes a user-provided
passphrase that is used as the key for

00:29:05.760 --> 00:29:07.790
both encrypting and decrypting the data.

00:29:07.790 --> 00:29:13.520
Encryption is accomplished
using the CAS5 CBC algorithm of

00:29:13.600 --> 00:29:16.130
the OpenSSL command line tool.

00:29:17.330 --> 00:29:20.700
The server setup daemon process will
wait for the data to become decrypted.

00:29:20.700 --> 00:29:23.760
So if the data is available
but it's encrypted,

00:29:23.760 --> 00:29:26.190
it will wait for that
data to become decrypted.

00:29:26.370 --> 00:29:30.570
However, while it's waiting,
it has also been designed to see

00:29:30.580 --> 00:29:33.200
if it can find a decryption key.

00:29:33.200 --> 00:29:36.580
So it will look in local file systems,
in a specific location on

00:29:36.680 --> 00:29:39.070
those local file systems,
to see if it can find

00:29:39.070 --> 00:29:40.120
that decryption key.

00:29:40.190 --> 00:29:44.070
It will not look in directory services.

00:29:44.260 --> 00:29:45.360
For obvious reasons.

00:29:45.360 --> 00:29:49.800
But if it can find that key,
it will utilize it to decrypt the file.

00:29:49.800 --> 00:29:52.750
So you can imagine having
this key file on your iPod,

00:29:52.750 --> 00:29:57.850
and while the data may be
available and encrypted,

00:29:57.850 --> 00:30:00.770
all you need to do is walk up and
plug in your iPod and it goes.

00:30:01.920 --> 00:30:04.720
Additionally,
the GUI application itself has

00:30:04.720 --> 00:30:09.100
a mechanism for delivering this
passphrase directly to the server.

00:30:09.100 --> 00:30:12.030
And in that case,
that passphrase is used to

00:30:12.120 --> 00:30:14.260
decrypt the data directly.

00:30:17.490 --> 00:30:19.590
Now you may remember I said
that you might be able to

00:30:19.710 --> 00:30:24.310
save dozens or even hundreds,
if not more, of these setup profile

00:30:24.310 --> 00:30:27.400
data files onto your iPod.

00:30:27.440 --> 00:30:32.470
This is how you keep track of
them so that you know which setup

00:30:32.700 --> 00:30:35.210
file goes with which server.

00:30:35.220 --> 00:30:38.760
Basically,
the server setup daemon process

00:30:38.760 --> 00:30:44.650
looks for these setup files by name,
and it looks in a particular order.

00:30:45.210 --> 00:30:47.780
So these are the naming conventions,
and this is the order in

00:30:47.780 --> 00:30:48.950
which it looks for them.

00:30:48.960 --> 00:30:52.100
To begin with,
it'll look for a file that's named with

00:30:52.170 --> 00:30:54.840
the Ethernet hardware address .plist.

00:30:54.840 --> 00:31:01.910
Then it'll look for an IP address,
followed by a hostname .plist,

00:31:01.910 --> 00:31:04.470
and then finally the
hardware serial number.

00:31:04.720 --> 00:31:07.220
And then we also provide
a catch-all name,

00:31:07.290 --> 00:31:11.350
which is just the word generic,
which will match any server.

00:31:12.680 --> 00:31:16.550
So let's take a quick look
at generating a setup profile

00:31:16.580 --> 00:31:18.600
using the server assistant.

00:31:18.600 --> 00:31:23.010
And then we'll look at how we can
examine that file using the plist editor.

00:31:23.040 --> 00:31:28.080
So could you switch over
to this machine please?

00:31:32.110 --> 00:31:34.950
So here I have the server assistant.

00:31:35.080 --> 00:31:36.320
I'm going to bring it up.

00:31:36.330 --> 00:31:41.910
And we'll be working on it with
this in sort of an offline mode.

00:31:45.360 --> 00:31:48.270
And in order to make this go a
little bit quicker and I don't

00:31:48.270 --> 00:31:50.380
have to type in a lot of stuff,
I'm actually going to load in a

00:31:50.380 --> 00:31:53.680
configuration file I've saved earlier.

00:31:54.660 --> 00:31:57.280
And in my home directory here,
in the admin home directory,

00:31:57.280 --> 00:31:59.280
I have one called serversettings.plist.

00:31:59.350 --> 00:32:00.760
So I'm gonna load that in.

00:32:00.970 --> 00:32:03.060
So as you can see,
you can use Server Assistant to actually

00:32:03.060 --> 00:32:04.810
edit configurations you've saved before.

00:32:04.820 --> 00:32:11.710
So it's been brought in and you can see
we've already set up certain things.

00:32:11.790 --> 00:32:14.150
We could actually change
this if we wanted to.

00:32:14.160 --> 00:32:21.220
Oops, gotta be able to type.

00:32:27.640 --> 00:32:28.480
Continue on.

00:32:28.780 --> 00:32:30.970
Here I've already got a
server name set up for it,

00:32:30.980 --> 00:32:33.100
network interface.

00:32:33.720 --> 00:32:36.940
Here I already have
Apple File Service and

00:32:36.940 --> 00:32:38.800
FTP service enabled,
but I'm also going to

00:32:38.800 --> 00:32:40.700
turn on Mail service.

00:32:40.930 --> 00:32:42.180
Continue on.

00:32:42.180 --> 00:32:43.910
We have our time zone.

00:32:44.170 --> 00:32:47.200
We'll go ahead and have it
use a network time server.

00:32:47.200 --> 00:32:50.280
And at the very end of
the interview process,

00:32:50.280 --> 00:32:54.840
you have a summary page that you can
review the settings that you've made.

00:32:54.880 --> 00:32:58.270
You can see all those here.

00:32:58.740 --> 00:33:00.940
You can go back,
make changes if you like.

00:33:00.940 --> 00:33:04.800
And then over here you have
the ability to save this.

00:33:05.420 --> 00:33:09.540
Now you can save it as a text file,
which is basically going to be just

00:33:09.540 --> 00:33:13.660
like this part right here that we were
looking at that I was scrolling through.

00:33:13.660 --> 00:33:15.870
Something that you might
be able to print out,

00:33:15.870 --> 00:33:17.600
put in a file cabinet somewhere.

00:33:17.600 --> 00:33:20.180
Or you can save it as
a configuration file.

00:33:20.180 --> 00:33:24.520
And this is where you
save it into a plist file.

00:33:24.520 --> 00:33:27.830
And here's your option to save
it encrypted if you'd like.

00:33:27.900 --> 00:33:31.020
You could also save it
to a directory server.

00:33:31.020 --> 00:33:34.220
So I'm going to go ahead and save
this as a configuration file.

00:33:35.560 --> 00:33:39.820
And I'm going to save it into
the admin home directory.

00:33:39.850 --> 00:33:46.510
I'm going to go ahead and call
this server02.apple.com.plist.

00:33:46.620 --> 00:33:50.730
And it's been saved
into the home directory,

00:33:50.770 --> 00:33:52.900
so let's go take a look at that.

00:33:56.400 --> 00:34:01.760
and So here's my home directory and
you probably just saw that blink as

00:34:01.760 --> 00:34:03.990
the file was added to the list here.

00:34:04.130 --> 00:34:09.510
So we can open this file with
our property list editor.

00:34:10.510 --> 00:34:14.000
And you can see this is
just a simple XML file.

00:34:14.000 --> 00:34:16.130
Let's look at the services
that we set to auto start.

00:34:16.200 --> 00:34:24.380
As you can see, we have File, FTP,
and Mail, which are the settings.

00:34:24.380 --> 00:34:26.440
Up here, the Admin User.

00:34:26.440 --> 00:34:29.570
I had, I changed it to Snidely,
Snidely Whiplash.

00:34:29.580 --> 00:34:32.560
So that's it in a nutshell.

00:34:32.580 --> 00:34:35.840
And at this time,

00:34:36.320 --> 00:34:41.380
I'm going to turn the
podium over to Rusty Tucker,

00:34:41.380 --> 00:34:43.080
who's going to talk to you
about Windows compatibility.

00:34:43.080 --> 00:34:45.730
Thank you.

00:34:51.140 --> 00:34:51.940
Thanks, Scott.

00:34:51.940 --> 00:34:55.600
Even before we started,
you guys were booing my demo,

00:34:55.660 --> 00:35:02.490
so we might as well bring up number
four here and get it out of our system.

00:35:04.530 --> 00:35:08.010
What is there not to love about an
operating system that demands you give it

00:35:08.020 --> 00:35:10.890
the three-finger salute just to log in?

00:35:12.120 --> 00:35:15.980
So if we go back to the slides,
but seriously,

00:35:15.980 --> 00:35:21.090
we've got a lot of neat things in
Mac OS X Server that help you integrate

00:35:21.090 --> 00:35:25.690
into existing Windows networks
and support Windows networks.

00:35:29.140 --> 00:35:34.350
So where we are today,
the Jaguar server provides basically a

00:35:34.350 --> 00:35:36.470
standalone server for Windows clients.

00:35:36.480 --> 00:35:39.830
That's all based on Samba 2.2X.

00:35:39.830 --> 00:35:43.560
Provides good,
very robust and high performance

00:35:43.810 --> 00:35:46.320
SMB file and print services.

00:35:46.320 --> 00:35:50.710
But that comes with a number of
functional limitations in how

00:35:50.710 --> 00:35:53.150
people would like to deploy it.

00:35:53.960 --> 00:35:55.960
We don't have a way to change password.

00:35:55.960 --> 00:35:58.680
You can't provide domain logins.

00:35:58.680 --> 00:36:01.270
You can't host Windows Home directories.

00:36:01.340 --> 00:36:04.890
And we have no way of taking the
client or the server to fit into an

00:36:04.890 --> 00:36:08.180
existing active directory network,
for example.

00:36:11.130 --> 00:36:15.050
So the first thing we'll talk about is
fitting into Active Directory networks.

00:36:15.140 --> 00:36:21.460
Both the client and the server can do
this with the Active Directory plugin.

00:36:21.550 --> 00:36:26.590
Provides proxied authentication,
UID and GID mapping back to

00:36:26.590 --> 00:36:28.490
the Active Directory directory.

00:36:28.540 --> 00:36:33.000
And you can come and see the
directory services session tomorrow

00:36:33.080 --> 00:36:34.340
for some more information about that.

00:36:34.380 --> 00:36:39.980
But there's one thing that's really
missing here in this scenario,

00:36:39.980 --> 00:36:42.040
and That's it,
you still have Windows NT servers

00:36:42.120 --> 00:36:43.990
on this network.

00:36:45.080 --> 00:36:48.920
So what we'd like to do in Panther is
provide a way to replace those

00:36:49.010 --> 00:36:51.140
Windows servers on the network.

00:36:55.100 --> 00:36:57.470
And so the Panther server
can be configured as a

00:36:57.470 --> 00:36:59.600
primary domain controller.

00:36:59.600 --> 00:37:03.860
And what that means is that it provides
directory and authentication services

00:37:03.860 --> 00:37:06.040
to the Windows clients on the network.

00:37:06.040 --> 00:37:09.590
And that lets you support Windows home
directories and single sign-on.

00:37:09.690 --> 00:37:14.860
So Windows user, they log into the login
window that we saw in XP,

00:37:15.010 --> 00:37:18.420
provide their name and password once,
and to any services in the domain,

00:37:18.430 --> 00:37:21.720
they will not need to provide
that name and password again.

00:37:25.190 --> 00:37:29.650
It also supports the roaming profile so
that the settings follow the user when

00:37:29.650 --> 00:37:31.780
they log in from machine to machine.

00:37:31.780 --> 00:37:37.190
And we can provide unified management
using the server admin and the

00:37:37.190 --> 00:37:40.900
workgroup manager administration tools.

00:37:42.620 --> 00:37:45.100
So what is a Windows Network login?

00:37:45.100 --> 00:37:46.760
What are the components of that?

00:37:46.840 --> 00:37:50.110
First of all, when you log in,
it comes and downloads the

00:37:50.110 --> 00:37:51.640
roaming profile from the network.

00:37:51.700 --> 00:37:53.340
And this is all the
settings for the user,

00:37:53.340 --> 00:37:57.020
including their desktop picture,
settings for Internet Explorer,

00:37:57.140 --> 00:37:57.900
and so on.

00:37:57.900 --> 00:38:01.120
It's really, in the Mac OS X world,
it's similar to what you

00:38:01.120 --> 00:38:03.830
find in the Twiddle public,
or Twiddle library,

00:38:03.830 --> 00:38:05.660
all the preferences in there.

00:38:07.320 --> 00:38:09.700
The second thing is the
home directory mount,

00:38:09.700 --> 00:38:12.670
and that contains shared items,
and it's really analogous

00:38:12.670 --> 00:38:14.500
to our Twiddle public.

00:38:14.500 --> 00:38:20.310
It's a way for you to share files and
things with other users on the network.

00:38:20.950 --> 00:38:24.960
And you can also define a startup script,
which can be used to mount other

00:38:24.960 --> 00:38:29.630
SharePoints or run applications
every time that you log in.

00:38:37.640 --> 00:38:44.320
And we've chosen Samba 3 in order
to implement this in Panther Server.

00:38:44.320 --> 00:38:49.320
We chose Samba 3 because it provides
Unicode support on the wire.

00:38:49.320 --> 00:38:52.780
This is supported by all
the modern Windows clients.

00:38:52.780 --> 00:38:54.860
And it also provides a
plug-in architecture,

00:38:54.860 --> 00:38:57.860
not only for the user accounts,
but also for us to get

00:38:57.860 --> 00:38:59.820
directory information back.

00:38:59.820 --> 00:39:03.120
And lastly,
we've added to this a way to support

00:39:03.120 --> 00:39:06.910
our just-in-time home directory
creation and setting quotas,

00:39:06.910 --> 00:39:09.110
as we do in AFP.

00:39:13.130 --> 00:39:17.500
And so we'll take a brief look at
how we've actually implemented this

00:39:17.500 --> 00:39:20.310
and how the block diagram sets up.

00:39:20.380 --> 00:39:24.170
We've got Samba 3.0 as a starting point.

00:39:24.200 --> 00:39:28.550
By default, it wants to integrate with
local private databases,

00:39:28.570 --> 00:39:32.320
especially Samba 2.2 did this,
and even Windows NT servers do

00:39:32.320 --> 00:39:35.270
this with the Windows Registry
and their SAM database.

00:39:35.300 --> 00:39:40.140
In our architecture and environment,
we want to switch that out and set

00:39:40.140 --> 00:39:42.120
it up to work with Open Directory.

00:39:43.100 --> 00:39:47.590
And we're working with the password
server and LDAP server on the back end.

00:39:48.150 --> 00:39:51.410
And the plugins for Asamba are
going to allow us to do this.

00:39:51.640 --> 00:39:53.200
First of all, we've got the Auth plugin.

00:39:53.200 --> 00:39:57.620
The plugin is actually
called AuthOpenDirectory,

00:39:57.880 --> 00:40:00.480
provides authentication
services to the clients.

00:40:00.490 --> 00:40:02.580
And that hooks us up to the
LDAP server on the back,

00:40:02.580 --> 00:40:05.760
or not to the LDAP server,
but to the password server,

00:40:05.760 --> 00:40:10.750
where we can get LANMAN and NT hash
authentications for the Windows clients.

00:40:11.550 --> 00:40:14.680
Second directory plugin through
the directory plugin API is

00:40:14.780 --> 00:40:18.540
called the PDB Open Directory,
and that supports all the getting

00:40:18.540 --> 00:40:22.050
and setting of user attributes,
and that's basically talking to

00:40:22.070 --> 00:40:24.100
the LDAP service on the back end.

00:40:24.700 --> 00:40:29.670
So once we've got that all hooked up,
now you can use our administration tools,

00:40:29.670 --> 00:40:33.940
click,
such as Workgroup Manager to actually

00:40:33.940 --> 00:40:41.200
create Windows user accounts,
set their passwords, set password policy,

00:40:41.210 --> 00:40:42.710
and so on.

00:40:43.870 --> 00:40:47.940
And lastly is integration
into the server itself.

00:40:47.940 --> 00:40:51.020
As you've seen with the
server assistant setup,

00:40:51.300 --> 00:40:55.700
we want to provide a way for servers
to be able to configure themselves.

00:40:55.790 --> 00:41:00.080
And a way to do this with clients
is to provide just-in-time setup

00:41:00.150 --> 00:41:04.970
for the home directories and also
to set quotas like AFP Server does.

00:41:05.420 --> 00:41:09.600
And this is provided through the
root-per-exec configuration and some

00:41:09.600 --> 00:41:12.240
scripts and tools that we've written.

00:41:17.210 --> 00:41:19.930
and source code for all this
available from the Darwin site,

00:41:20.060 --> 00:41:22.280
including our plugins.

00:41:26.550 --> 00:41:31.020
You've heard before there's tight
integration between the Windows users

00:41:31.020 --> 00:41:34.460
and the Mac users in the directory,
and it's actually the same user account,

00:41:34.680 --> 00:41:36.280
same user password.

00:41:36.290 --> 00:41:41.520
We've extended the user record
to provide the attributes that

00:41:41.520 --> 00:41:44.260
are required by Windows users,
and they're distinct from Mac users,

00:41:44.310 --> 00:41:46.850
so there's no overlap there.

00:41:47.000 --> 00:41:49.540
The drive letter for
mounting the home directory,

00:41:49.540 --> 00:41:53.780
UNC address of the SharePoint where their
home directory is going to come from,

00:41:53.810 --> 00:41:57.980
the login script path,
and the path to the roaming profiles.

00:41:59.070 --> 00:42:02.290
And the computers themselves
need to authenticate before

00:42:02.290 --> 00:42:05.750
they join the network,
and so we've had to extend the computer

00:42:05.820 --> 00:42:08.470
record to support that as well.

00:42:09.650 --> 00:42:15.890
So now we'll look at a demo
and back to demo three.

00:42:23.980 --> 00:42:27.180
First thing we'll take a look at
is how you actually set up a PDC.

00:42:27.180 --> 00:42:34.760
And you'll notice that whenever
we're looking at setting up Windows,

00:42:34.760 --> 00:42:37.510
whether it's Windows computers,
Windows users, or Windows,

00:42:37.510 --> 00:42:41.610
the service itself,
we'll have the Windows label

00:42:41.620 --> 00:42:43.530
on all those items.

00:42:43.580 --> 00:42:48.740
And like with all the other services,
we've got an overview, logs, connections,

00:42:48.740 --> 00:42:52.830
graphs that shows connected users,
and of course, settings.

00:42:54.100 --> 00:42:56.850
And so what's new here is
that we have added additional

00:42:56.850 --> 00:42:59.330
roles for each one of the,
for the service.

00:42:59.340 --> 00:43:01.880
It can be the standalone
server that we had with Jaguar.

00:43:01.880 --> 00:43:03.740
It can be a domain member.

00:43:03.740 --> 00:43:08.490
So it can be not the server
that's providing domain controller

00:43:08.490 --> 00:43:12.190
services to the network,
but just be a server that's

00:43:12.190 --> 00:43:16.400
providing sharing services or
supporting Windows home directories,

00:43:16.510 --> 00:43:18.620
or primary domain controller.

00:43:18.620 --> 00:43:22.840
And here you'll set the domain
name and the computer name.

00:43:24.630 --> 00:43:26.890
Whenever we do that,
when you set it up to

00:43:26.890 --> 00:43:30.450
primary domain control,
it also enables WINS service to

00:43:30.450 --> 00:43:34.290
enable the Windows Internet Naming
service on the network,

00:43:34.390 --> 00:43:37.100
which is really important for that.

00:43:39.620 --> 00:43:42.070
We'll go to Workgroup Manager next.

00:43:42.100 --> 00:43:47.300
You can see we've got two users,
Admin and Bill.

00:43:47.300 --> 00:43:50.890
Bill will be our Windows user.

00:43:52.240 --> 00:43:53.350
It's a very complicated user.

00:43:53.350 --> 00:43:58.670
Everything that we're going to
see basically is the same as

00:43:58.730 --> 00:44:00.190
what a Mac OS X user would have.

00:44:00.250 --> 00:44:03.190
Password type, open directory,
you can define groups that

00:44:03.240 --> 00:44:05.960
they have memberships in,
home directory,

00:44:05.960 --> 00:44:10.600
they've got a SharePoint called users,
mail, print services,

00:44:10.600 --> 00:44:12.840
and then the Windows panel.

00:44:12.840 --> 00:44:16.110
And this is where you
define the profile path,

00:44:16.140 --> 00:44:20.140
the login script,
the location of where the hard drive,

00:44:20.140 --> 00:44:23.300
the mount point for the user SharePoint.

00:44:24.240 --> 00:44:27.520
So now that we've got that,
now we can actually log in

00:44:27.610 --> 00:44:31.750
to this Windows computer if
we want to bring up Demo 4.

00:44:38.150 --> 00:44:41.600
And here we choose the domain
that we're going to log into.

00:44:41.600 --> 00:44:44.040
In this case,
it recognizes the in-depth domain

00:44:44.040 --> 00:44:47.890
that we've defined on the server.

00:44:49.950 --> 00:44:54.200
Type of password, it logs in,
downloads the user settings,

00:44:54.200 --> 00:45:00.520
and then comes up with the
familiar Windows desktop.

00:45:01.070 --> 00:45:06.500
Where we can go to my computer
and actually see the mount point.

00:45:07.340 --> 00:45:10.630
You can see it actually populates
it with the Mac OS X directory,

00:45:10.670 --> 00:45:13.500
the home directory style
for Mac OS X users.

00:45:13.500 --> 00:45:18.140
So they get the movies directory,
library, public pictures, everything.

00:45:18.190 --> 00:45:22.840
So this same user can also log in on
Mac OS X machines on this network.

00:45:22.840 --> 00:45:23.940
And we'll go ahead and do that.

00:45:24.000 --> 00:45:31.530
We gotta log him out.

00:45:40.100 --> 00:45:44.180
First of all, he wants to save the
settings back to the server.

00:45:44.180 --> 00:45:48.670
Now that that's done,
we come back to demo three.

00:45:52.900 --> 00:45:59.700
[Transcript missing]

00:46:00.590 --> 00:46:05.740
This user has done his forward
migration and is now a Mac OS X user.

00:46:07.740 --> 00:46:09.250
and you see the same home directory.

00:46:09.250 --> 00:46:13.680
So that's that.

00:46:23.070 --> 00:46:26.570
So next up, Greg Vaughan will bring us
a little information about

00:46:26.680 --> 00:46:29.200
developing for Mac OS X Server.

00:46:35.690 --> 00:46:38.570
Hello, I'm Greg Vaughan.

00:46:38.580 --> 00:46:42.170
Yeah, as he said, I'm going to talk about
developing for Mac OS X Server,

00:46:42.170 --> 00:46:46.470
so I guess all you sysadmins
can sort of tune out now.

00:46:50.450 --> 00:46:53.680
So the first thing I want
to talk about is XServe.

00:46:53.680 --> 00:46:58.030
XServe is the primary
platform for Mac OS X Server.

00:46:58.250 --> 00:47:00.680
Because of that,
you need to be aware that any

00:47:00.680 --> 00:47:03.970
applications you write for
X Server are likely to be running

00:47:04.100 --> 00:47:08.350
on a system that's got no keyboard,
no monitor, no logged in user.

00:47:10.340 --> 00:47:13.200
This sort of environment
limits the frameworks and

00:47:13.240 --> 00:47:15.400
APIs you can use in Mac OS X.

00:47:15.400 --> 00:47:19.280
Obviously, you're going to want
to avoid the GUI APIs,

00:47:19.280 --> 00:47:20.890
AppKit, HIToolbox.

00:47:20.980 --> 00:47:24.830
You need to be careful about APIs that
might want to bring up dialogues,

00:47:24.850 --> 00:47:28.020
you know, like logging in,
mounting network volumes,

00:47:28.130 --> 00:47:30.540
you need to bring up an
authentication dialogue.

00:47:30.540 --> 00:47:35.240
There's a lot of APIs that are perfectly
fine to use in this environment.

00:47:35.240 --> 00:47:37.780
Core Services is an umbrella framework.

00:47:37.780 --> 00:47:39.840
It has a few, including Carbon Core.

00:47:40.320 --> 00:47:43.600
which is the lower
levels of the Carbon API.

00:47:43.800 --> 00:47:44.960
Foundations available.

00:47:44.960 --> 00:47:47.800
If you want to write a Cocoa app,
you can write a server in Cocoa.

00:47:47.800 --> 00:47:51.280
Foundation has a lot of server-safe APIs.

00:47:51.400 --> 00:47:54.820
If you've got a C or C++ server,
but you want to have some

00:47:54.830 --> 00:47:58.690
Mac OS X functionality like reading
preferences out of a P list,

00:47:58.950 --> 00:48:02.340
Core Foundation has a lot of
useful APIs callable from C.

00:48:11.290 --> 00:48:14.260
So if you want to provide a user
interface to your application,

00:48:14.260 --> 00:48:19.000
you're going to need to separate out that
user interface from your core service.

00:48:19.660 --> 00:48:21.030
You've seen examples of this.

00:48:21.180 --> 00:48:24.520
Basically, our server admin product
and our server assistant,

00:48:24.520 --> 00:48:27.350
both are implemented this way.

00:48:27.660 --> 00:48:30.800
Your GUI part's going to need to
be able to run on a remote machine,

00:48:30.800 --> 00:48:34.400
so you're going to need to have a way of
targeting what server you're talking to.

00:48:34.480 --> 00:48:38.460
Basically, you can type in an IP address,
but Rendezvous provides a

00:48:38.460 --> 00:48:42.510
really nice mechanism for
browsing and locating servers.

00:48:43.210 --> 00:48:44.960
You're going to need to
provide a networking connection

00:48:44.960 --> 00:48:46.230
between your two halves.

00:48:46.280 --> 00:48:50.040
If you've got administration data,
often you want that to be

00:48:50.050 --> 00:48:52.920
an encrypted connection,
but you don't necessarily need to

00:48:52.920 --> 00:48:55.260
write the networking software yourself.

00:48:55.260 --> 00:48:59.190
Our various services,
we've employed a variety of techniques.

00:48:59.780 --> 00:49:05.380
Server admin uses HTTP over SSL and talks
to an Apache web server on the back end.

00:49:05.400 --> 00:49:09.800
The sharing portion of workgroup
manager actually uses open directory

00:49:09.800 --> 00:49:13.960
and open directory proxy to stuff
values into the directory on the

00:49:14.120 --> 00:49:16.750
server that the service then reads out.

00:49:16.850 --> 00:49:18.540
That's more of a one-way communication.

00:49:18.540 --> 00:49:22.970
And server assistant actually
packages its functionality as a set

00:49:22.970 --> 00:49:28.020
of command line tools and then invokes
those tools remotely using SSH.

00:49:30.480 --> 00:49:32.260
Finally,
you're going to need a separate installer

00:49:32.370 --> 00:49:37.310
for the GUI portion so it can be
installed on your admin client machine.

00:49:40.110 --> 00:49:43.140
Next thing I'd like to talk
about is a bit about performance.

00:49:43.140 --> 00:49:46.540
I'm going to pass on a few things
we've learned when we were optimizing

00:49:46.540 --> 00:49:49.140
the performance of our own services.

00:49:49.180 --> 00:49:52.370
One of the things we've looked
a lot at is the reducing

00:49:52.460 --> 00:49:54.460
the system calls in servers.

00:49:54.500 --> 00:49:57.210
Even system calls that would
normally be quite fast,

00:49:57.350 --> 00:50:00.950
you need to be aware in a server
environment on a loaded server,

00:50:00.950 --> 00:50:03.700
calls into the kernel can
cause contention between

00:50:03.700 --> 00:50:05.840
various threads and processes.

00:50:05.960 --> 00:50:11.280
The contention will cause lots
of extra process flipping,

00:50:11.520 --> 00:50:14.850
which will result in wasted CPU time.

00:50:14.980 --> 00:50:17.700
For instance,
when we were looking at Samba 3,

00:50:17.770 --> 00:50:19.640
we decided to make a couple changes.

00:50:20.000 --> 00:50:23.550
We changed the read and write
calls to pread and pwrite because

00:50:23.550 --> 00:50:25.300
it avoids the extra LSEEK.

00:50:25.350 --> 00:50:29.160
And we also, Samba implemented some
locking using F control calls,

00:50:29.240 --> 00:50:32.070
and in this case,
spin locks seemed to be fine.

00:50:32.170 --> 00:50:33.420
We switched to that.

00:50:33.470 --> 00:50:35.920
And these two changes alone
resulted in a new system.

00:50:35.920 --> 00:50:38.850
noticeable increase in performance.

00:50:40.130 --> 00:50:43.810
We also in Samba decided to change the,
for networking I/O,

00:50:43.820 --> 00:50:47.320
the read and write calls
to receive and send.

00:50:47.320 --> 00:50:51.180
Read and write need to go through
the file system code to look at the

00:50:51.180 --> 00:50:54.800
file descriptor to decide that it
actually is a socket descriptor.

00:50:54.850 --> 00:50:58.240
Whereas receive and send can call
directly into the network code,

00:50:58.240 --> 00:51:01.240
and that avoids some locking as well.

00:51:01.610 --> 00:51:06.730
In AFP, we not only used Receive,
but because AFP reads in a header

00:51:07.100 --> 00:51:09.760
and then knows how much data
it wants to read in its packet,

00:51:09.760 --> 00:51:12.600
it actually uses the message
weight all on Receive.

00:51:12.600 --> 00:51:15.450
Normally, Receive will wake up each
time some data comes in,

00:51:15.450 --> 00:51:18.510
and if the process is just going to
look at it and go back to sleep again

00:51:18.550 --> 00:51:22.370
waiting for the rest of the data,
again, that's wasted CPU time.

00:51:25.410 --> 00:51:29.530
Another thing we did in AFP was we
decided to switch to memory mapped I.O.

00:51:29.640 --> 00:51:33.380
for reads because that way when
you're actually doing the reading,

00:51:33.380 --> 00:51:37.400
you bypass the file system and
go to the lower level VM system,

00:51:37.400 --> 00:51:40.920
which also can avoid some
contention and improve performance.

00:51:40.950 --> 00:51:43.840
You do need to be a bit
careful of memory mapped I.O.

00:51:43.840 --> 00:51:47.580
because the VM system isn't going
to be able to return errors.

00:51:47.580 --> 00:51:50.970
If you've got a sort of
a drive that can go away,

00:51:50.970 --> 00:51:54.830
like a network mounted drive,
it can be difficult to

00:51:54.830 --> 00:51:57.150
deal with that situation.

00:51:57.170 --> 00:52:00.350
So you want to avoid it for
drives that perhaps can disappear,

00:52:00.360 --> 00:52:01.960
you know, unexpectedly.

00:52:05.100 --> 00:52:08.320
Last thing I just want to say is
if you're developing a server and

00:52:08.330 --> 00:52:10.860
you're looking at performance,
it's important not to just

00:52:10.870 --> 00:52:13.450
look at the service itself,
but its impact on the

00:52:13.450 --> 00:52:15.320
performance of the whole system.

00:52:15.320 --> 00:52:18.710
If the one service slows
down the rest of the system,

00:52:18.880 --> 00:52:22.760
people are writing several
servers on the same X Server,

00:52:22.760 --> 00:52:26.840
obviously it's not going to be popular
if the entire system gets slowed down.

00:52:30.320 --> 00:52:32.500
So the twin to performance
is scalability.

00:52:32.500 --> 00:52:38.960
Basically, the main message is when
you're developing your server,

00:52:38.960 --> 00:52:42.460
you need to look to the future,
look to expanded requirements.

00:52:42.460 --> 00:52:44.860
We all know computers are
getting more powerful,

00:52:44.860 --> 00:52:46.460
networks are getting bigger.

00:52:46.460 --> 00:52:51.140
If you have to re-implement your server
next year for some new requirements,

00:52:51.140 --> 00:52:53.180
that's a lot of extra work.

00:52:53.330 --> 00:52:56.100
So you just want to keep that in
mind as you're designing things.

00:52:56.100 --> 00:52:59.800
Hard drives are certainly
an example of this.

00:53:00.200 --> 00:53:02.630
XServe ships with XServe RAID.

00:53:02.630 --> 00:53:04.710
It can support two and a half terabytes.

00:53:04.810 --> 00:53:10.530
You need to be aware of the large files
and large numbers of files you might

00:53:10.580 --> 00:53:13.010
need to deal with on the file system.

00:53:14.110 --> 00:53:17.950
In addition, with directory systems,
there can be large numbers of

00:53:18.050 --> 00:53:20.080
users in the directory system.

00:53:20.080 --> 00:53:24.080
We actually had to revisit some of our
design decisions in Workgroup Manager,

00:53:24.080 --> 00:53:27.880
and we dealt with things
like the LA school system,

00:53:27.880 --> 00:53:32.600
which put practically every child in
the LA area into one large database.

00:53:32.920 --> 00:53:37.100
You're not going to be able to do things
like enumerate through all the users,

00:53:37.100 --> 00:53:39.400
and so if you've got a
UI for picking users,

00:53:39.400 --> 00:53:42.570
you need to be able to deal with
that and do perhaps directed

00:53:42.570 --> 00:53:44.640
searches and choosing of users.

00:53:47.600 --> 00:53:51.800
You also want to be aware of the large
number of connected users you can have.

00:53:51.810 --> 00:53:55.560
As servers become more powerful,
people are going to use them to

00:53:55.560 --> 00:53:57.710
serve more and more client machines.

00:53:57.710 --> 00:54:02.450
So you need to just keep in mind that
the number of users that may connect to

00:54:02.620 --> 00:54:05.480
your service will increase over time.

00:54:06.830 --> 00:54:09.040
At the same time,
you need to allow for the

00:54:09.040 --> 00:54:10.970
variety of connection types.

00:54:10.980 --> 00:54:15.170
Even if you're developing a server
that's intended to be used in a

00:54:15.180 --> 00:54:18.810
corporate workgroup environment,
you're going to have users

00:54:18.810 --> 00:54:21.650
connecting over airport,
users connecting from

00:54:21.650 --> 00:54:25.220
home using DSL and VPN,
and these sorts of connections

00:54:25.220 --> 00:54:26.880
have a very high latency.

00:54:27.740 --> 00:54:32.210
So even if you have an operation that's
very fast when you're on the LAN,

00:54:32.210 --> 00:54:35.340
there's a large number
of network round trips.

00:54:35.350 --> 00:54:38.780
For this type of environment,
it can become extremely slow.

00:54:38.780 --> 00:54:41.760
So it's important to look at the
actual network traffic and test

00:54:41.840 --> 00:54:43.660
for these types of connections.

00:54:50.910 --> 00:54:53.710
Then the last little section,
I just wanted to talk about a

00:54:53.770 --> 00:54:56.080
couple APIs that are available.

00:54:56.080 --> 00:54:59.960
Open Directory is certainly
something we continue to push.

00:54:59.960 --> 00:55:05.500
It's a nice way to connect to a
large number of directory systems.

00:55:05.520 --> 00:55:09.240
There's a flexible API.

00:55:09.240 --> 00:55:13.180
There's a plug-in architecture,
so it can be expanded to talk

00:55:13.180 --> 00:55:15.850
to new proprietary systems.

00:55:15.990 --> 00:55:20.680
There's a session on this tomorrow
you're certainly encouraged to go to.

00:55:21.290 --> 00:55:26.690
Single sign-on is a big push in Panther,
and it's going to become even

00:55:26.690 --> 00:55:28.180
more important in the future.

00:55:28.180 --> 00:55:33.370
So definitely, if you're doing a service,
you need to look at supporting

00:55:33.530 --> 00:55:36.980
Kerberos authentication in
both the client and the server.

00:55:36.980 --> 00:55:40.980
Hopefully, single sign-on will
become very prevalent.

00:55:40.980 --> 00:55:43.670
People will get very used to
connecting to network resources

00:55:43.670 --> 00:55:45.320
without having to authenticate.

00:55:45.800 --> 00:55:49.440
So if one service continues to
pop up an authentication dialogue,

00:55:49.440 --> 00:55:51.410
people are going to become annoyed.

00:55:54.660 --> 00:55:57.420
I just wanted to point out,
it was mentioned in the server

00:55:57.420 --> 00:56:02.560
overview session that we've switched
to an open source mail solution.

00:56:02.620 --> 00:56:05.880
Because of that,
they're provided APIs for

00:56:06.070 --> 00:56:09.260
spam and virus filtering that
weren't available in Jaguar,

00:56:09.260 --> 00:56:12.710
so that can be new
opportunities to look at.

00:56:14.580 --> 00:56:18.960
Finally, if you're developing a
media-related application,

00:56:18.980 --> 00:56:21.910
you might be interested
in the QuickTime streaming

00:56:21.910 --> 00:56:23.940
server session tomorrow.

00:56:23.940 --> 00:56:29.470
It, again, has a plug-in API as well
as being fully open source.

00:56:31.950 --> 00:56:36.190
So that's the end of my
little brief section.

00:56:36.190 --> 00:56:41.150
And basically,
here are people to contact.

00:56:41.250 --> 00:56:42.800
I hadn't seen this slide before.

00:56:47.680 --> 00:56:50.840
And here's some of the
sessions I just mentioned.

00:56:50.940 --> 00:56:54.970
In addition,
the X Server feedback session

00:56:54.970 --> 00:56:57.280
is immediately following
this one in North Beach.

00:56:57.360 --> 00:57:01.940
So if we run out of time for Q&A here,
you're welcome to go and bug us there.

00:57:10.700 --> 00:57:16.330
All right, and this is just some
open source pointers.

00:57:18.500 --> 00:57:23.660
And if you remember something
later in terms of feedback,

00:57:23.660 --> 00:57:27.910
here's a page you can go to and
harass us even after we're gone.