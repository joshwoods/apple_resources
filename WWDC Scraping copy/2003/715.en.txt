---
Title:  QuickTime Interactivity Tools
Year:   2003
Web:    https://nonstrict.eu/wwdcindex/wwdc2003/715/

[!] This transcript was generated using Whisper, it has known transcription errors.
---

Hi, I'm Justin Bur from Mind Avenue in Montreal, developers of Axle. Axel is a complete solution for high-impact web graphics, which means that we do highly interactive 3D animation mixed with all sorts of 2D things as well, sounds and movies. It's a cross-platform solution. The authoring tool and the viewers run on both Macintosh and Windows. Then we decided sometime last year that it would be really interesting to have QuickTime as a platform as well as the web.

So there is an Axel QuickTime component, and Axel is now a QuickTime media type, which lets you have interactive 3D tracks in QuickTime movies. Axel is also a user of QuickTime for the usual things, so movies and images and sounds are imported using QuickTime, and you can use them to decorate your 3D objects in a scene.

Now, for marketing purposes, we have this diagram to try and show you that we take an awful lot of different formats and let you do things with them with Axel, and then put them out at the other end in a variety of formats. Axel is, well, first of all, it is a 3D modeler in the same way that Maya or Lightwave are, but of course, it's not a really high-end modeler like they are. However, you can work with geometric primitives and text. You can take line art and extrude it or do rotations with it, so you can create your 3D objects.

Also, if you have existing 3D models that you've done in another 3D application, you can bring them into Axel through VRML or using our dedicated Lightwave importer or the exporter we have for 3D Studio Max. So, you bring your 3D stuff into Axel or you create it in Axel.

You can then use a whole bunch of image and movie formats via QuickTime to decorate it, basically to create 3D textures. And then I will shortly show you all the sorts of interactivity things you can do and animation things you can do with Axel. On the other end of the pipe, you publish to the library. You publish to Axel's own format, which originally was intended to work with a web browser plug-in. And this plug-in works, as I said, for Windows and Macintosh.

Now, we also have a standalone player, which is an application in Windows or a Mac application that will just play your content, sort of like a flash projector. And of course, you can import any Axel output into QuickTime if you've got the component installed. Or now, if you publish as a QuickTime movie from Axel, that gives you something that will automatically cause the Axel QuickTime component to be downloaded from Apple's third-party component site.

We also have a variety of exporting possibilities so that once you've done your work in Axle, you're not stuck there. You can export VRML, you can even put it out in Flash, which means that Axle can be a very interesting solution for 3D work with Flash. But that's not the point right now. So, let me give you an idea of sorts of things you can do with Axle. So switch to the demo on laptop 2, please.

First example I'll show you is our QuickTime Everything example. Here we have an Axle model of the new iMac as it was introduced a year and a half ago. This was done by one of our 3D artists in about half an hour after Steve Jobs' keynote a year and a half ago. And so it's just a little iMac that you can move the screen around and you can rotate and see it.

Now, and he's impressed here to see the CD tray came out, very nice. Okay, what would be really neat if it worked is that the screen here is set up to show QuickTime video across the internet, and it's, well, it's not doing it, so let's go and... Anyway, no, I won't waste time with that right now.

The idea here is though that you're playing QuickTime video on a 3D object created in Axle, and then the whole thing is being played in the QuickTime player. And yeah, it's a very cute example when it's working. Oh well. And then the other thing I want to show now is Okay, I'll use the web browser plugin in Safari here.

This is an example that gives you an idea of the different sorts of things you can do with Axle models. So first of all, we have an animation here. If I click here, then the little figure... So that's an ordinary keyframe animation, but this is also a fully interactive presentation.

So I can change the lights using this slider here. I can grab onto this character and move him around. I can throw him and he hits against the walls. We have inverse kinematics, which is a 3D technique for handling the arms and legs of characters, so that when I move his hand, the rest of his body follows.

Axel gives you things like proximity sensors, so that as I bring the microphone over towards him, he speaks. And you may have noticed that no matter where he is, he's always in the spotlight. That's because the light here is permanently pointing towards him wherever he happens to be, wherever the light happens to be.

And so yeah, I drag the light. Then when I let go of the light, it'll just snap back to the nearest anchor point, since it has four anchor points set up there. So that's the way it works. So I can move the camera around, and I can move the camera around, and I can move the camera around. So that's the way it works. So-- That gives you an idea of what Axel can do basically. And now I'll go back to the slides and-- go through the Axle workflow, just to list off the sorts of things you can do with Axle.

So, remember we start with creating our models, whether it's by... Excuse me. I'll just send that away. Okay. Right, so you've got your geometry, you've got objects, then you can create relations between them. Our Relate menu lets you constrain one object to another, link them together, or constrain something to a path, so an object can only go along a path.

You can have objects that spring together, like we saw the lights that spring, sorry, we can have objects that spring together, or that snap to a certain point, like the lights we saw that snapped back onto their fixtures. And also, there's skin and bones for doing character animations.

You can set up visualization options, which means the rendering style that can be shaded or wireframe or cartoon. And you can add as many cameras as you want, you can do lighting and textures. These are all basic things that you would do with 3D. They're all very easy to do in Axle. And textures, that is sort of the wallpaper that decorates objects, can be QuickTime movies or still images. And what I hoped to show you there was the QuickTime movie displaying on the iMac screen. Um.

When you're animating, you can animate along a path or with keyframes. You can do interaction, which is very simple because we have a drag and drop interaction editor as well as some predefined interactions. And no scripting required for any of this. So I'll do one last demo very quickly now since we're running out of time for my segment. So back to laptop 2, yes. This one here is what happens when you put... Okay, here we have an Axle model.

So it's been set up so that you can rotate it and move it. We have an interaction here so that you click it and the head gets bigger. Or another button. So all of this is Axle. Around the edges, everything is QuickTime sprites. This was put together by using Live Stage Pro.

The QuickTime interactivity editor. And so right now it's set up to modify the background and I can change the... Or I can send a message to Axle to change the rendering style. So this is QuickTime talking to Axle to tell it to change different colors and objects. So finally, back on the slides.

Axel, so Publish Your Work is an interactive QuickTime movie. It's on the Apple download program, and we have communication with other QuickTime tracks enabled. Live Stage Pro 4.1 supports Axel, so come later on today to session 722 and hear about how that works from the Live Stage people. Thank you very much. Next, we'd like to invite up Peter Falco from Zoomify.

Hi, my name is Pete Falco and I'm with Zoomify. And what Zoomify does is we enable QuickTime to deliver high resolution images over a network. It's great for not only images, but objects and panoramas. And as you'll see, it's easy to author, the viewing happens very quickly, and it's very extensible.

What I'm going to go through here very quickly is we're going to see some real world applications, what people out there are using it for right now, how the technology works, how to use the technology, and then I'm going to do a quick tutorial on putting hotspots inside of the content.

And at the end, I'll talk about what we've got planned for the future. You can see these are some of the customers that we have that are using the technology currently in several different market areas. Museums and archaeology, medical and scientific, e-commerce, entertainment. Now I'm going to switch over to the demo machine. I'm going to show some of these.

So what we're looking at here is this first image is actually a 257 megabyte image. Now, normally you wouldn't think about putting something so large up on a web page, but you can see this is live from our server, how fast it loaded. And if I want to see more detail, I just zoom in, and when I stop, it will go and retrieve the pieces of the image that it needs to show that part of the image. So you can have virtually unlimited size images in a web page. We have customers who have 10 gigabyte images for one single image in the medical community.

The same technology can be applied not only to images, but also to panoramas and obviously, to the internet. objects. So this is a panorama that we'll see here. This panorama is 207 megabytes. And like I said, normally you wouldn't consider putting something that large up on a web page. But see when I zoom in, it will go and it'll get more data as needed. OK, I'll switch back to the slides.

So how does it work? The standard practice when taking images and delivering them over a network is to compress them, JPEG being the most standard form of compression. We take a different approach. Just like with a movie, you want to stream it because there's lots of frames, and you don't want to download the whole thing before you start playing it, the same goes for an image.

What we do is we take the image and we break it up into tiles, which you could think of being very similar to frames. And then we only download the tiles that we need to display the view that you're currently looking at. So the image over on the left-hand side of the slide there shows the pyramid that we build. So we cut it into pieces, we scale it down, we cut that into pieces, we scale it down, we cut that into pieces. And that's what allows us to get access to any resolution, any piece of any resolution in the image.

It's a standards-based approach. Each one of those tiles is just a JPEG image. So not only-- is it streamed, but it's also compressed. And unlike a lot of other people in this space, our business model is just based on software. There are other companies that are doing this where they put strings on your content, you pay them each time somebody views it, or they sell you a $10,000 server.

Our products range in price from $99 to $800 for our most expensive enterprise product. And there's one or two skews in between. We actually even have a free product that you can go to our website. It's called the JPEG. It's a very simple version of what our product can use, which is a fully functional-- it'll convert your image, and then you can put it in a web page. No strings. It's just a very simple version of what our product does.

How do you use it? That's also very easy. You just take your image, you drop it on our encoder. It'll generate a QuickTime file for you. You take that file, you embed it in your web page like you would any other QuickTime content, and put it on your web server. There's nothing special needed on the web server, and the only thing that is needed on the client side is QuickTime. We also have a Flash version, a Java version, and our own ActiveX control and plug-in.

Okay, let's switch to the demo machine. I'll just do a quick convert here. So as I said, it's a very simple process to convert one of these images. If I just take-- Take this panorama right here and drop it onto the converter. So you're presented with some options.

This is our standard dialog. First thing you need to do is say, where do I want to output these files, the width and height that it's going to be in the web page, copyright comments. Down here is what type of output you want to have. We'll just do a straight QuickTime.

And this is a panorama. So for a panorama, there are some extra things that you have to specify. But we're just going to have it auto-calculated. So we just drop the image on there, and basically said, here's where to put it when I'm done, and I want it to be a QuickTime file.

When I say OK-- This was a cylindrical panorama, so there's actually a two-stage process involved. The first step is everything that we do is a cube, so first we convert it to a cube, and then we save it out to our format. This is our format, PFF, it's for pyramidal file, and this is the pano. And that was the extent of the authoring process right there. If we switch back to the slides.

In addition to being able to create zoomable content, we also have the ability to add interactivity to it in the form of hotspots. And the way we do that is through, we also have a Photoshop plugin, so instead of doing the drag and drop encoding to create the image, you could just take an image that's in Photoshop and we have an exporter, and you can export, you'll get that same dialogue. It's exactly the same experience. For creating hotspots, we use ImageReady. It was running.

The Image Map tool inside of ImageReady, we leverage that functionality because we figure why reinvent the wheel. Somebody already spent a lot of time building a nice interface for dropping down a hotspot. So I have this file right here that -- oh, we need to switch. Okay, so this is the panorama that I just created. If I want to put a hotspot into this file, you see I have an image map defined here. If I go down here, and I select that.

So when I want to put in a hotspot in ImageReady, basically in the name field, I'm going to say, the hotspots in our world are actually images. And we support both JPEGs and GIFs. So I would put something like-- Peter Giff, and the URL is the URL that it'll jump to when you click on it.

This URL field can also be any of a number of different events that we support, and I'll show that in a little bit. Events can be go to this view or change the panorama that you're looking at without going to a whole new web page. There's a lot of different events that we support.

Go to my favorite URL. The target, just put it in a new window. The alt is a tooltip that will show up when you mouse over the hotspot. And if I save this. And I go to export. So this would be to export the image as a panorama, and then there are several different hotspot exporters that you can see here. This happens to be a cylindrical panorama. So I select that, and I say where do I want to output it? I save it to the desktop. Now here it is. And this is the file that it generated. We'll look at that. Let me edit.

So, what was this? Quit. Skip version. OK. You can see there's two hot spots in here. One was the one that was already in there, and the other is the new one. And it's a fairly straightforward text-based format. The polygon information is what you need image-ready to generate for you. There's different triggers and the URL to be used to load in the hotspot, the tooltip. It's a very straightforward format. It's all documented in our product. And then if we look at this right here.

This is the hotspot that I made. And if I click on it, you can see where it goes. So this is an animated GIF with transparency. So you can put-- it can be dropped right into the environment fairly seamlessly. Let's switch back to the slides. And so what do we have coming?

There's a couple different format options that we have right now. We have our own proprietary format, the PFF format that you see here. In order to make that work in our Flash Viewer, it actually required a small server-side component. So we came up with another format that all the tiles are just separate and put into folders. So that format is also an option. Soon we'll have the ability to support via that same serverlet, JPEG 2000. So if you prefer to work in a more standard format than our proprietary format, that won't be a problem.

Whiteboarding and synchronized browsing sort of go together. We have one application where multiple users can be looking at the same image at the same time, and when somebody zooms into an area, everybody sees the same thing. You can add notes right on top of the image. It's being received very well in the medical community, actually, for doctors to all be looking at the same scan of, say, patient's tissue sample of some kind. And I think that's -- maybe I'll do it for me. Oh, a recap. So, Zoomify enables high resolution images in web pages via QuickTime. It's perfect for not just images, but objects and panoramas. It's easy to author, fast to view, and totally extensible.

[Transcript missing]

Can we see this machine here, please? That's my dog, Zoe.

[Transcript missing]

This is a motto that drives all our development. And this is called VAMP Tool Ready. And it is, why should it be so difficult? I shouldn't have to care about what file format things are in. I shouldn't have to care about what tracks are being created for this QuickTime movie.

All I should know is that I want to build something. So what we did, we spent a lot of time and a lot of years building pieces for other people. A couple of years ago I fired all the clients, because we realized, hey, we actually have a product here.

We have 130,000 users. They're all in education. That's growing by about 10,000 to 12,000 a month at the moment, and we're really pleased. So are our investors, especially after I fired the clients. So let's have a look. What I want to do is I want to build something for the web. I want to build something, a little web page. It shouldn't be a big deal. So the first thing I should be able to do is take a bunch of files, pick them up and say, yeah, I'm going to use all these things.

So what's happening here is the program is taking a look at the formats of everything I just brought in. It says, do you want to resize some of them? No, I don't. OK, so I've got a bunch of stuff here. Some of them I don't really need right now, so I'm going to get rid of them. This I want to use as a background, so I'll just tell that to go in the background.

You have to sing while you do this, otherwise it doesn't work properly. This, I want to be a button. I think there's another piece of that somewhere. I got some text. Oh, we don't want that either. That's me playing the guitar. That's not a good thing to listen to. One time I made my living doing that.

I never could understand why people would pay me to do it. So I got some text here. I'm going to just change the font so it's a little more readable. Ignore the fact that it's doing weird things with the... There we go. And change the color, I think, too.

Okay, and you know what, I think that should be transparent. So here's a little bit of text, so maybe the text can go here. This is a VR, oh here's the other bit of our button. Okay, and this is a graphic, just a ping, we don't want that. Here's a piece of video. So what I want to happen is, in my webpage, I want it to come up like this, with my text up here. If you read this text, by the way, it's actually a book I'm writing. So we had to have non-copyright stuff.

If you read it, you'll see what kind of a brain I have. So this guy, I want to be a rollover for this. So if I double click on the object, I just say, you're a rollover. And you rollover this guy. And the thing that I want you to control is this movie here. So let's move that up a little bit. OK, I'm done. So what we need to be able to do now is to output this so that we can use it on the web.

I want somebody to save it, so I'll say, yeah, let's leave it called Untitled. And right now I'm actually finished. We should get music for that dialogue. And if I put that away... What it did, then, it created these three things. And if I pick this HTML file up and chuck it on the Safari, we'll see that... Here's our, and this is a multi-node thing, here's our rollover, if I click on it.

So it should be that easy. You're allowed to applaud now. Thank you very much. Oh man, I was in the entertainment business for a number of years. Let's make another one. So we want to have a second page for our website, so this one's going to have something more interesting on it.

What did I just open? Okay, I opened the wrong thing. Duh. There we go. So here is a nice big movie. This was done by an 18-year-old who I took right out of school. I was waiting for him outside the gate one day. We do these science fairs and he came up to me after and said, "I want to get into your business." I said, "Are you crazy?" He said, "Yeah, no, I really do." I said, "Well, what do you do?" He said, "Well, I'm a sculptor." I said, "Okay, so show me your stuff." So he showed me some things that he'd done, so I gave him a machine and showed him how to use some tools, and this actually was the first piece he did. And it was done for a client.

As I'm talking to you, by the way, I'm just making things so that I can navigate around. This is a really ugly button here, but that's okay. It's just going to be a thing that goes to the next frame. So let's output that and see what we get.

You can actually get involved in image compression, but I'm not going to, because the program actually has a lot of intelligence built into it. Because we did a lot of this work for a number of years, we know that you do certain things all the time. We know how to compress video so it runs properly, we know how to compress images, we know what to do with sound.

[Transcript missing]

No, no, please don't. Actually, don't clap, throw money.

At Azita we do more than just this particular tool. We have a whole range of tools. We have a series of add-ons to iMovie that make it easy to do things like blue screening. That make it easy to do things like picture in picture. Matting an image over the top of an iMovie. It's really simple. Doing animation, you know, animating text, graphics, other movies in iMovie. It's the kind of tools that we build. They're personal creativity tools. That's what they are. And if you just give me one second, if I can find it.

What you've been looking at actually is Java. The whole front end was built in Java. You shouldn't even have to know that. The program runs on both machines, on both platforms, Windows and Macintosh. The file format is totally transparent to both platforms. So you can start working on Windows, switch it over to a Macintosh, continue working on it, put it back. It doesn't care. Just keep moving. I was going to show you where we're going in the future, but I can't find it. Oh, here it is. My desktop. Before I came up here, I had to clean stuff up, so my desktop is normally quite a good mess.

Bear with me a second and I'll find something. One of the things that we've just finished fighting with is the problem of buttons. These buttons that you can see here, they look pretty cool. This is a button that actually has a movie embedded inside it with some transparency. I don't know why you'd want to do that, but I did it just to show it can be done. and this of course is... isn't that great music? You can buy this... no you can't. SteffieEmbleton.com? No, that doesn't exist.

I'm still looking for something, so I'm talking while I'm looking for it. I should have brought it out. We have a complete new version coming out very shortly, which is, there it is, as you can see from the name of the folder, is Cocoa. This is this morning's build, so you know what that's like if you're a programmer. You never know what you're going to get. We outed the Java for a number of reasons, one of them being the speed of the thing. I just want to show you what you can do with buttons.

These are not predefined types. These are ones that I decided I wanted to use. I went into Photoshop and made pictures. And then you drop them into a special folder. And you can say, yeah, this is the kind of button I want. I'm going to make it this size.

And here's the color it's going to be. And when I go over the button, I want it to change to this. Did that wrong? Oh, no. I want it to change to that color. It's already done it. And when the mouse goes down, I want it to change to that color. Export.

I'm on the desktop, yeah, good. Doo, doo, doo, doo, doo. There it goes, thank you. Did you see how fast that was? We actually had to slow the exporter down in this version by putting in the fake thing going along. So here's our button that we just made. As you see, I roll over, it goes a color. I press the mouse down, it goes a different color. And of course, you can link it out to all those things that I was showing you.

We support... are all hot spots in VRs. We probably support Axle. I haven't actually tried it, but it'd be interesting to do. You shouldn't have to get involved in scripting. There is none, and we will not be putting any in. The application you've just been looking at, however, the Cocoa app is fully Apple scriptable. So it is a scriptable app, so you can automate things and get it running in the background.

We're going to be releasing that. I don't know, Chris is over there, our director of engineering. He'll have a fit. We're going to be releasing that soon, aren't we, Chris? No, he says, no chance. Oh, well. We also have pathing. We also have-- there's going to be a public beta release on our website next week.

and the other two are going to be doing a video presentation on the Web. We're going to be talking about the Web, and we're going to be talking about the Web in a bit. with the same ease of use. The timeline is dead when people are going to realize that, I don't know. You should not have to get involved in it. I'm done. Thank you very much for your time.

Next up is Curtis Garton from Kadara. Curtis Garton-san is Kadara-san. Okay, where's my little mic? Okay, I'm Curtis Garton with KDAR, and I'll be talking about the FBX file format from KDAR. Essentially what we found is that artists are creating more and more content from a lot of different applications. What we're finding is a lot of these different 3D applications don't like to talk to each other very well. So what we're looking for is a 3D interchange file format.

So artists are creating all this media from all these different applications. And what we're looking at is some way to bring all this 3D content together, so that we can start exchanging this, distributing it, and sharing the content in between artists. So essentially what that comes down to is some type of universal file format which is going to allow us to store in 3D models, 2D textures, video, characters, skeletons, animation, that type of stuff, all inside of one kind of universal vanilla wrapper.

So what we developed was a file format called FBX. And essentially what it is is a 3D interchange file format. Currently, we write plugins for the following 3D packages, including MotionBuilder for OS X and PC, as well as 3D Studio Max, Alias Wavefront Maya on OS X and PC, Softimage XSI, as well as Lightwave on PC and Macintosh as well.

After that, we realized that we needed a way for artists to start viewing this 3D content. So let's say you were a 3D artist creating 3D content, and you wanted to distribute this to other artists that weren't using 3D applications of any sort. So we really looked for, I guess, a way to start distributing this to essentially anyone who wanted to be able to view 3D content.

Typically what you find is that most professional 3D applications, you're going to have to actually render out your content to a rasterized version, a very linear version, which really restricts what users and your audience can see. So we started working with Apple and the QuickTime team to essentially take our 3D technology and the FBX format and integrate that into a plug-in, which would work inside of the QuickTime player. So this is a rendering example of what you can get in real time using our 3D plugin.

You can see we have dynamic lighting, character animation, textures, all being played back in real time. What this allows you to do now is to start taking your content and allows you to essentially visualize and distribute this to pretty much anyone who has the QuickTime player, which is in the millions and millions nowadays.

So you're not restricted to users of just 3D applications or to sending out rendered out rastered versions of your content. It also allows you a level of interaction with your content. Inside of FBX files, you can have user interaction through such things as keyboard, joysticks, the mouse, which really allows you to take your 3D content to the next level of interaction.

It's also available free, which is one of the key things that we made sure to work with Apple, was that we were going to be giving a plug-in back to the community that was essentially without a price tag on it. So anyone can go and download this plug-in for free, allowing you to view FBX content. and it's available off our website as well as the Apple download site for QuickTime. So what I'm going to do is I'm just going to show you guys a couple of quick examples of FBX for QuickTime. So I'm just going to switch to Demo Machine 2 here.

So we'll just open up a couple sample scenes we have just to show everyone the 3D in real time. So what I've got here is a sample 3D model of an iMac. You can see we've got audio and video playing in this as well. And if I go through and actually just switch cameras, I can actually start through interacting with this scene, just like I was in a 3D application. open up another sample scene here for you. This one here demonstrates character animation being played back in real time, as well as some of our particle shaders, which we've integrated into the plugin as well.

I'll play this back, like so. So you can see we have these particle shaders happening there. We've got some character animation, this character walking around. You'll see we have real-time shadows, as well as real-time reflections. And we also have the ability to do interactions. So what we have here is a simple tic-tac-toe game, which allows me to interact with this content using keyboard. So for example, I can just go and have a virtual 3D game of tic-tac-toe, like so.

The beauty of these FBX files is that now that they're available through the QuickTime viewer is that you can embed them in web pages. You can distribute them to essentially anyone with a QuickTime player, and it'll automatically download the plugin to allow them to view the content for free. I'll show one more example here. My favorite, the ever-famous T-Rex running around. Couple seconds here to decompress the textures.

So here we have our T-Rex. Just going to loop this movie. You can see we've got a nice little run cycle on him. I can change the visibility modes as well, so we can actually see the underlying skeletal system of this character. We've got this little run loop on there. And what we have here is a little legend of actual keyboard shortcuts that we have created for the scene. So you can see if I hold down one, we've got our T-Rex running around.

Maybe he's in a school yard, and he's going to grab some kids. When he gets mad, he blows smoke out of his nose. So just some simple interaction that you can create inside of these FBX files to really make your 3D content that more interactive. And that's it. That is FBX for QuickTime.

And last up, I'd like to welcome Marc Cohen from Video Clicks. We're here. Just going to switch laptops. So VideoClicks is a QuickTime based application for you to easily add QuickTime interactivity into your existing QuickTime content. It's pure QuickTime, doesn't require any additional plugins. You can add QuickTime chapter tracks, time-based actions, events, and the coolest of all, what we like to refer to as video hotspots. So I'm going to show you the VideoClicks application, and you'll see exactly how it works. It's a carbonized application, so it runs in Mac OS 9 or Mac OS X. We're currently in version 2.5.1. And I think you'll think it's pretty cool.

[Transcript missing]

Yeah, sometimes it works by turning the mirroring off first and then setting the resolution. Can we see this screen, the PowerBook screen, temporarily? You want to make sure we're at 1024 by 768 at that low refresh rate, 70 hertz. - Try the 75 hertz, that's all it's making available to us. You're gonna have to go off screen. You're gonna have to go off screen, just swing the mouse over, yeah, there you go.

So those are some pretty cool tools we saw earlier. I mean, QuickTime's great because you've got this huge wealth of tools that are all so easy to use, so affordable. That's great, thank you. And tons of fun. Okay, well let's just see what's going on here. Okay, first I am hoping to show you our showcase on our website.

Make sure we're connected. Okay, this is our website. I'm just going to take you to our showcase area, so you get an idea of what you can do with VideoClicks. This is our showcase. We've got a variety of different examples here of what people are doing with VideoClicks: entertainment, education, product placement. I'll show you this. This is our James Bond demo.

Just see, we've got some audio happening here. So, we've got a QuickTime movie playing here. It appears just to be a standard QuickTime movie, just playing on a web page. However, everything in this movie is totally clickable. I can click on her, I can click on him, I can click on his glasses, his shirt, her dress, the environment, anything at all within this movie is clickable thanks to VideoClicks' ability to create video hotspots, the GPS system, etc. So you can see that whenever I click on something, I'm able to bring up more information about that product in a neighboring frame. Here I'll give you another example of that. Here's a trailer from our favorite movie company.

I'll just drag further ahead in the movie here. So the movie's playing. Once again, using video clicks, I can add all types of QuickTime interactivity here. We see text tracks playing there. We also see chapter tracks here, where I can easily navigate to different parts of the movie.

And anything and everything can be clickable inside this movie. I click on Mikey. I can click on Sully. And we see I'm targeting information in a neighboring HTML frame here. So that's what VideoClicks does. And let me show you the application, and you can see how we do it.

[Transcript missing]

And at this point, I'm going to use our real-time tracking tool, one of the tools in the toolbar, to lock the hotspot to the cursor. So essentially, I'm not holding the mouse down, I've just clicked once and that hotspot is locked to my cursor, so I can now track the motion of that object or my subject matter in the video in either real-time or slowed down, which will make things considerably easier. And here's my speed settings.

One-to-one is obviously real-time. I'm going to go down to eight-to-one, make it really easy. It's going to slow things down. If there's complex motion, I can easily follow it by locking that hotspot to my cursor and moving at a slower speed. So here we go. I'm just going to play the movie. And then we can see things are moving very slowly, eight-to-one. And all I have to do is simply follow Mikey about with my mouse. This is the real-time tracking option, where wherever he goes, I go.

And that's that. You can see I can now unlock my cursor.

[Transcript missing]

So you can see each one of these are separate interactive objects, and they're all listed here in the inspector window. I could change the parameters of any one of these objects, and if I play this back, you'll see how that hotspot is following Mikey about the stage. Actually, I'm just going to play it back at full speed here.

So you can see how that's following Mikey. Now, here's another, that's real-time tracking, but there's much easier ways to track objects with video clicks. You can see he is over here at one point. I stop my tracking right when he gets, just stands upright here. And now, let's say that you have objects moving from this point on the screen to another point on the screen, and you don't want to track it in real time. Well, you can use the tweening feature, which is very cool. So he's here at this point. He moves over to this point on the screen. I can simply reposition my hotspot at this point, and then use the tweening tool.

And then you'll see that from this hot spot, - Which is, at this point, to this hotspot, I can just turn the tween on. And now, you can see here in the timeline, we actually see this dashed line, which represents the tweening. And if I play it, you'll see how it now follows him. - Okay, it's supposed to be-- - Oh, I'm just gonna back up a bit here.

So there's my real-time tracking, and there's the tweening right there, as it tweened from this position. The other cool thing about tweening is it doesn't just tween motion, you can tween shape, size, color, URL, etc. So you can easily have a complex object like the plane that I showed you here in the James Bond demo, made up of simple primitives that are all grouped together.

So I'm just going to jump to the end of this movie and you'll see that there's a plane here, and that plane consists of a number of really simple primitives all grouped together with the same attributes. And you can create complex hotspot groupings in the timeline here simply by dragging one hotspot onto another.

I'll just simply create another hotspot here, I'll call it Sully, and we see that it's its own track here in the timeline. I can grab Sully at any point and just drag him on top of Mikey, and it warns me, "You're about to take this hotspot and give it the attributes of the parent." No problem.

And now it's part of the parent, and if I move one, they both move together. So that's how you can map complex objects. You can also do some other really cool things with video clicks, like chapter markers. If you have a particular place in the movie, you want to drop a chapter that allows people to easily navigate to that point, you can simply choose the chapter marker here, click anywhere in the monitor window, call it what you want, and here in the inspector window under the chapter tab, you can see here's the name of it and here's the time that that occurs.

You can also utilize what we call time-based actions using the action button in the toolbar. So let's say at the end of the movie you wanted it to go to your web page, I can just grab the action marker, click here, go to web page, etc., and now this is an action that I can customize with a variety of behaviors.

I can launch a URL, I can go to a particular time in the movie, I can jump to a predefined chapter that I defined earlier, I can even go to a flash frame if you're embedding your QuickTime inside a flash, I can go to a flash label, I can send a debug string to communicate with a database backend, or I can just simply display text. And there's some very simple text creation tools here that you see in the inspector window. So the primary interactive types that VideoClicks can do for you are text, chapter tracks, time-based actions, and coolest of all, those video hotspots.

You can also control your workspace using the tools here, whether you're moving the workspace about, zooming in or zooming out, or you need to, let's say you have a cluttered workspace, for example, I've got a number of hotspots on screen here, and I want to hide those down here in the timeline. I can say, oh, hide these objects, hide my text tracks, hide my chapter tracks, or my actions. So you can very easily clean up your workspace and make it quite simple and straightforward to add your interactivity.

When you export this, it's simply a QuickTime movie, it doesn't require any additional plug-ins, and there's a cool feature in here where you can actually export it as a debug movie, and then what that'll do is, let me just export this on the desktop, what that'll do is it'll actually export the movie and it'll show you the vectors, it'll show you the hotspots, so you can just be sure that they're there and they'll still be active as hotspots as well. Let me just go to the desktop here. Here's my exported movie, and you'll see what I mean.

and I jump. So there you go, you can see those hotspots there and they're still active if I've given them actions. So in the standard exporter movie, of course, those are invisible as we saw in the demo here. I just want to show you one more example here.

This is really cool because in this Lord of the Rings trailer, which is very cool, you've got a number of characters coming across here. Here's Gandalf. I can click on him. I'm targeting the lower frame, Legolas, etc. But even if the movie is stopped, these are still active, these hotspot areas, so I can call up various character information, whether the movie is playing or not. And that's really it. That's VideoClicks.
