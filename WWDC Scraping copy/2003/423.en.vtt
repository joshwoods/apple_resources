WEBVTT

00:00:26.540 --> 00:00:29.380
My name is Xavier Legro and
I'm the Mac OS X evangelist.

00:00:29.380 --> 00:00:30.740
I work in developer relations.

00:00:30.740 --> 00:00:37.660
And I'd like to welcome you to session
Making a Modern Carbon Application.

00:00:37.710 --> 00:00:40.780
The funny thing is that we were talking
with the guys from HIToolbox and we were

00:00:41.010 --> 00:00:42.840
wondering about the sessions this year.

00:00:42.840 --> 00:00:44.740
We had great content for HIView.

00:00:44.740 --> 00:00:48.600
We wanted to give you a good
update on what's going on with

00:00:48.600 --> 00:00:50.920
developing using HIToolbox.

00:00:50.920 --> 00:00:55.480
And then we got to the conclusion that
there was still one missing piece.

00:00:55.480 --> 00:00:58.790
You see, people have been using Carbon in
different terms in the last three

00:00:58.790 --> 00:01:00.420
or four years since Mac OS X.

00:01:00.770 --> 00:01:03.820
There is this notion that
Carbon is related to CarbonLib.

00:01:03.820 --> 00:01:06.720
And so some people think that, well,
they're coming to the platform

00:01:06.720 --> 00:01:08.800
and they're wondering,
"Well, should I use Carbon?

00:01:08.800 --> 00:01:09.800
Is it CarbonLib?

00:01:09.800 --> 00:01:13.110
Do I want to work on Mac OS X?"
So we wanted to emphasize the

00:01:13.110 --> 00:01:16.370
fact that when we talk about
Carbon development now on Mac OS X,

00:01:16.460 --> 00:01:19.440
we're really talking about
developing using the toolbox.

00:01:19.440 --> 00:01:23.940
And the idea is writing a
modern C and C++ application.

00:01:23.940 --> 00:01:24.940
And the goal of this session is to
develop a modern C and C++ application.

00:01:24.940 --> 00:01:29.200
So the goal of this session is really to
kind of scratch what we've been doing,

00:01:29.330 --> 00:01:32.710
scratch the fact that you have CarbonLib
to support and Mac OS X because we

00:01:32.710 --> 00:01:34.760
think now we are past that point.

00:01:34.760 --> 00:01:37.900
And we want you guys to make
sure we understand that as well.

00:01:37.900 --> 00:01:40.580
And the goal of this session
is really to focus on new

00:01:40.600 --> 00:01:44.710
technologies we've been introducing,
new concepts that are very,

00:01:44.790 --> 00:01:51.480
very important on Mac OS X for you to
develop a modern C and C++ application.

00:01:52.900 --> 00:01:56.110
All right, for that I'd like to invite
David McLeod on stage,

00:01:56.120 --> 00:01:58.980
who's going to be taking you through
the different concepts and the

00:01:58.980 --> 00:02:01.580
main key architectures that you
should think of when you develop

00:02:01.650 --> 00:02:02.900
your application on Mac OS X.

00:02:03.040 --> 00:02:04.660
David?

00:02:04.660 --> 00:02:06.810
Thank you, Xavier.

00:02:09.180 --> 00:02:10.220
Thank you very much.

00:02:10.340 --> 00:02:11.220
And thanks for coming.

00:02:11.350 --> 00:02:15.320
I really am happy about that because it
means to me that our message is getting

00:02:15.320 --> 00:02:21.330
out that the HI Toolbox is renewed and
you can make a modern Carbon application

00:02:21.330 --> 00:02:23.170
with the new HI Toolbox.

00:02:24.730 --> 00:02:28.220
First, I'd like to kind of
qualify who should be here.

00:02:28.310 --> 00:02:31.190
It's kind of three groups.

00:02:32.800 --> 00:02:36.200
People that haven't made
a Carbon application yet.

00:02:36.290 --> 00:02:38.880
Second,
people that have made applications,

00:02:39.020 --> 00:02:43.400
but maybe Mac OS 9 based and made
wait next event applications.

00:02:43.470 --> 00:02:47.100
And third, there's probably a group of
you that are responsible for

00:02:47.100 --> 00:02:49.200
porting applications to Mac OS X.

00:02:49.280 --> 00:02:53.260
So this will be helpful for you,
and that's sort of the

00:02:53.260 --> 00:02:55.350
target audience today.

00:02:57.360 --> 00:03:00.440
What do we mean by a
modern Carbon application?

00:03:00.670 --> 00:03:03.940
A modern Carbon application
is a full OS X citizen,

00:03:03.940 --> 00:03:06.620
behaves efficiently,
doesn't block and use

00:03:06.620 --> 00:03:08.300
up too many resources.

00:03:08.570 --> 00:03:11.650
And we get that because we've
introduced a simplified event

00:03:11.970 --> 00:03:15.530
dispatching model called Carbon Events,
where you're not polling

00:03:15.530 --> 00:03:19.350
anymore to handle your events.

00:03:19.420 --> 00:03:24.140
And this makes for a very
efficient application.

00:03:24.190 --> 00:03:27.560
Also, your user interface is
now defined using NIBs.

00:03:27.790 --> 00:03:30.960
We'll get into those in more
detail as the session goes on.

00:03:31.410 --> 00:03:35.660
Also, your modern Carbon application
uses up-to-date OS services

00:03:36.040 --> 00:03:42.750
like navigation services,
CFPreferences, icon services, quartz,

00:03:42.850 --> 00:03:46.720
all the modern services that are
available to you on the operating system.

00:03:50.790 --> 00:03:53.550
So what I'm going to go over today,
we're going to show you how to make

00:03:53.550 --> 00:03:56.770
a new Carbon application using Xcode.

00:03:57.170 --> 00:04:00.780
Go over making a user interface
using Interface Builder and making

00:04:00.780 --> 00:04:03.300
your user interface in .niB files.

00:04:04.040 --> 00:04:05.830
I'm going to show you some of
the user interface elements

00:04:05.990 --> 00:04:07.230
that are available in HIToolbox.

00:04:07.300 --> 00:04:09.910
It's actually very complete
and you can make a very full

00:04:10.020 --> 00:04:14.300
application just using the pieces
that are available from HIToolbox.

00:04:14.860 --> 00:04:17.450
Having those pieces is nice,
but it also shows you how to handle

00:04:17.490 --> 00:04:23.370
events and commands so you can deal with
the user as they use your application.

00:04:23.600 --> 00:04:28.950
I'm also going to touch on using
alerts in your applications to sort

00:04:29.050 --> 00:04:33.540
of interrupt and notify the user of
things and communicate with them.

00:04:34.080 --> 00:04:36.870
The last thing I'll touch on is
navigation services a little bit,

00:04:36.870 --> 00:04:39.760
just so you can show how to
interact with users in terms

00:04:39.790 --> 00:04:41.870
of selecting files and folders.

00:04:43.680 --> 00:04:47.430
So I'm really only going to
cover two frameworks today,

00:04:47.430 --> 00:04:50.570
and they're both sub-frameworks
of the Carbon framework.

00:04:50.690 --> 00:04:52.970
So I'm going to cover HIToolbox,
which is going to cover all

00:04:52.980 --> 00:04:54.420
of the user interface stuff.

00:04:54.590 --> 00:04:57.670
I'm also going to touch
on navigation services.

00:05:01.160 --> 00:05:02.860
Overall, what is Carbon?

00:05:02.940 --> 00:05:04.300
When we talk about Carbon,
what does it mean?

00:05:04.300 --> 00:05:07.100
A lot of people think it's CarbonLib,
like Xavier was saying,

00:05:07.210 --> 00:05:13.420
or that it's some sort of bridging
technology just to get you onto OS X.

00:05:13.620 --> 00:05:15.490
It's actually not true.

00:05:15.670 --> 00:05:19.640
Carbon is a full set of C and
C++ APIs that you can use to

00:05:19.710 --> 00:05:26.150
make a full native client,
native application on OS X.

00:05:26.260 --> 00:05:31.400
These APIs give you full access to the
OS X services that are available to you,

00:05:31.440 --> 00:05:34.960
like the user interface,
accessing the file system,

00:05:35.020 --> 00:05:38.730
using the drawing primitives in Quartz.

00:05:39.910 --> 00:05:43.660
Specifically,
HIToolbox is the set of C and

00:05:43.770 --> 00:05:47.670
C++ APIs that you can use
to make a user interface.

00:05:52.590 --> 00:05:56.100
So we're thrown around the
term "modern" a little bit.

00:05:56.140 --> 00:05:59.340
What do I mean by being
a modern application?

00:06:00.600 --> 00:06:03.720
Something that's important to
us is that you use Xcode so that

00:06:03.720 --> 00:06:06.000
you can make a Mako application.

00:06:08.200 --> 00:06:11.250
Another benefit of using
Xcode is that your application

00:06:11.250 --> 00:06:16.450
will be made as a bundle.

00:06:16.450 --> 00:06:16.450
I'll kind of cover
that in the next slide.

00:06:17.210 --> 00:06:21.910
Also, being modern means that you're
going to use Interface Builder to

00:06:21.910 --> 00:06:29.000
design your interface and make the
user interface with .niB files.

00:06:31.290 --> 00:06:36.540
As I stated previously,
being modern also means using the

00:06:36.540 --> 00:06:41.140
existing Mac OS X services that are
appropriate for your application,

00:06:41.140 --> 00:06:45.020
such as Quartz, Navigation Services,
HIViews.

00:06:46.290 --> 00:06:48.960
to make your application.

00:06:49.070 --> 00:06:51.240
Also, you want to use the
Carbon Event Dispatcher.

00:06:51.340 --> 00:06:55.340
It's the modern, efficient,
non-polling event dispatching mechanism

00:06:55.340 --> 00:06:57.340
that's available in HIToolbox.

00:06:57.430 --> 00:07:00.150
I'm going to cover that later on.

00:07:01.220 --> 00:07:04.240
So for those of you that
may be familiar with writing

00:07:04.240 --> 00:07:08.360
Mac applications the old way,
maybe similar to the way

00:07:08.360 --> 00:07:11.900
you wrote them on OS 9,
or the way you wrote

00:07:11.900 --> 00:07:18.860
them using CarbonLibs and
WaitNextEvents applications.

00:07:19.550 --> 00:07:21.500
There's a few differences.

00:07:21.500 --> 00:07:25.040
First, the old way,
a lot of the APIs dealt

00:07:25.040 --> 00:07:26.260
with Pascal strings.

00:07:26.260 --> 00:07:29.470
That made it very hard to
internationalize your products because

00:07:29.470 --> 00:07:33.290
you couldn't use the extended character
sets that are available and are needed

00:07:33.290 --> 00:07:36.260
for other languages like Japanese,
Chinese, etc.

00:07:36.940 --> 00:07:42.050
All of the new APIs use CFStrings,
and that means that

00:07:42.050 --> 00:07:44.920
they're Unicode savvy,
and you can use all of these

00:07:44.920 --> 00:07:48.730
extended character sets to
provide your application,

00:07:48.730 --> 00:07:51.360
specifically the user interface.

00:07:52.170 --> 00:07:54.870
The old way of dealing with events
was to use WaitNextEvent and pull

00:07:54.930 --> 00:07:57.130
continuously using up CPU cycles.

00:07:57.240 --> 00:08:00.140
The new way is to use
Carbon Events and not really pull

00:08:00.140 --> 00:08:03.090
at all and only be notified when
important events are coming to you.

00:08:03.100 --> 00:08:11.290
That means that you block and you're not
using the CPU and you're an efficient,

00:08:11.290 --> 00:08:11.290
great performing application on OS X.

00:08:12.030 --> 00:08:15.270
The old way of dealing with files
is not even available anymore,

00:08:15.270 --> 00:08:18.040
standard file,
and is replaced by using navigation

00:08:18.040 --> 00:08:24.660
services to select files and folders
and communicate between the user

00:08:24.770 --> 00:08:28.920
and the application where files are
going to be saved and retrieved from.

00:08:31.690 --> 00:08:34.350
Another difference is moving from
a single application file where the

00:08:34.350 --> 00:08:38.980
application was totally enclosed
in this one big file with resource

00:08:38.980 --> 00:08:42.600
forks and all kinds of things in
there to an application bundle.

00:08:42.660 --> 00:08:44.550
An application bundle,
it seems the same to

00:08:44.550 --> 00:08:48.060
you when you use OS X,
but it's still... Like,

00:08:48.060 --> 00:08:50.910
when you go to use OS X,
it appears to be one icon with

00:08:50.910 --> 00:08:55.440
everything all squished into one binary,
but it's actually represented by

00:08:55.500 --> 00:08:58.600
a folder underneath that's only
evident to you as a developer.

00:08:58.600 --> 00:09:02.590
And that folder contains the binary of
your application and your .nib files,

00:09:02.760 --> 00:09:06.690
any other additional files like maybe
some sounds or some image files,

00:09:06.690 --> 00:09:08.570
as well as your plist
to describe yourself.

00:09:08.600 --> 00:09:11.460
So it's actually a whole
hierarchy that's underneath.

00:09:11.600 --> 00:09:14.570
You can also provide localization
information in there,

00:09:14.620 --> 00:09:17.990
and it's all seamlessly done
through the application bundle.

00:09:18.640 --> 00:09:21.670
The old way of making your user
interface was to build it up in a

00:09:21.670 --> 00:09:25.600
set of resources and maybe load it
with a dialogue manager or something.

00:09:25.660 --> 00:09:30.580
The new way is to use a niB-based
user interface by designing your user

00:09:30.580 --> 00:09:32.600
interface with Interface Builder.

00:09:32.600 --> 00:09:37.150
I'm going to talk about niBs a little
bit later on in the presentation.

00:09:39.210 --> 00:09:44.440
The old way of actually creating a
user interface was to use controls.

00:09:44.560 --> 00:09:45.860
And the new way is to use HIViews.

00:09:45.910 --> 00:09:47.740
They've totally replaced controls.

00:09:47.880 --> 00:09:50.510
Even the things that you're
used to calling controls,

00:09:50.510 --> 00:09:53.830
like buttons, et cetera,
are actually underneath the covers,

00:09:53.830 --> 00:09:55.160
really just HIViews.

00:09:55.540 --> 00:09:58.820
So the modern way is HIV use
because they also do what we

00:09:58.820 --> 00:10:02.300
call the compositing system,
and that means that the drawing

00:10:02.800 --> 00:10:05.080
model is much more efficient
when your user interface draws.

00:10:05.190 --> 00:10:08.100
Only what needs to be drawn gets drawn.

00:10:09.390 --> 00:10:11.440
And lastly,
the old way of drawing was to do it

00:10:11.440 --> 00:10:13.310
with Quick Draw and ports and all that.

00:10:13.450 --> 00:10:14.460
And the new way is Quartz.

00:10:14.520 --> 00:10:16.290
It's got all kinds of
really great features.

00:10:16.300 --> 00:10:18.570
It's very efficient.

00:10:19.090 --> 00:10:21.740
And it's used system-wide,
so you want to use the

00:10:21.740 --> 00:10:25.840
system-wide drawing mechanism
in your Carbon application.

00:10:27.370 --> 00:10:29.410
So I'd like to invite
Guy Fullerton up on the stage.

00:10:29.430 --> 00:10:31.590
He's an HIToolbox engineer with me.

00:10:31.590 --> 00:10:35.610
And he's just going to show you how
to make an application with Xcode.

00:10:37.200 --> 00:10:38.070
Switch over to the demo?

00:10:38.130 --> 00:10:39.100
Yeah, good.

00:10:39.100 --> 00:10:42.330
All right, so what I'm going to show you
today is just kind of a reinforcing

00:10:42.340 --> 00:10:44.500
of some of the things David's
going to talk about on his slides.

00:10:44.520 --> 00:10:46.440
Let's say I want to
build a new application.

00:10:46.440 --> 00:10:48.440
Let's say I want to make
some kind of picture viewer.

00:10:48.440 --> 00:10:50.910
So I'll take you through the
steps I might do for that.

00:10:50.940 --> 00:10:54.440
First thing I'm going to do is
launch Xcode to create my project.

00:10:54.440 --> 00:10:56.420
And I'll choose New Project.

00:10:56.440 --> 00:10:58.940
Now, there's a couple different
choices for Carbon applications.

00:10:58.940 --> 00:11:00.940
There's just plain old
Carbon application,

00:11:00.990 --> 00:11:02.940
and then there's the
nib-based Carbon application.

00:11:02.990 --> 00:11:05.940
I want the nib-based one because
that's the more modern alternative.

00:11:05.940 --> 00:11:07.940
So I'll choose that.

00:11:07.940 --> 00:11:09.940
Let me put it on my desktop.

00:11:10.180 --> 00:11:13.940
And let's call it--I'm spacing.

00:11:13.940 --> 00:11:17.900
I've got to get this right,
otherwise everything's going to go bad.

00:11:17.940 --> 00:11:19.970
Let's call it strip.

00:11:21.200 --> 00:11:24.130
Okay,
so Xcode creates the project for me,

00:11:24.210 --> 00:11:27.800
and Xcode's going to take care of a lot
of the other sort of modern features.

00:11:27.800 --> 00:11:30.370
It's automatically going to build
the application into a bundle,

00:11:30.370 --> 00:11:32.790
and it'll have a plist and
all those kinds of things.

00:11:32.840 --> 00:11:36.300
So Xcode already sets up a main for me.

00:11:36.300 --> 00:11:37.800
It's just a very skeleton main.

00:11:37.800 --> 00:11:40.870
It does the basic things you'd
need to do at App Bring Up Time,

00:11:40.870 --> 00:11:42.780
which is very little these
days for a modern Carbon app.

00:11:42.800 --> 00:11:46.780
And I'll go through that in a little
bit more detail in a later demo.

00:11:46.820 --> 00:11:50.800
But for now, let's just build it and
run it and see what we get.

00:11:54.010 --> 00:11:55.100
So the app launches.

00:11:55.100 --> 00:11:56.900
It just gives us a basic window.

00:11:56.900 --> 00:11:59.500
We've got a menu bar that
you can track in and whatnot.

00:11:59.500 --> 00:12:00.720
You can resize the window.

00:12:00.910 --> 00:12:04.100
Unfortunately, that's not the most
modern UI for resizing,

00:12:04.100 --> 00:12:06.480
but we'll take care of that
in a little while later.

00:12:06.730 --> 00:12:15.010
So that shows you just how to get sort
of a bare-bones skeleton application up,

00:12:15.010 --> 00:12:15.010
and I'll go into more details
in successive demos later.

00:12:15.010 --> 00:12:15.010
David?

00:12:18.490 --> 00:12:23.720
Hopefully you've installed Panther on
your machines already and maybe

00:12:23.720 --> 00:12:27.710
have tried to do this and you've
seen that it's pretty easy just

00:12:27.710 --> 00:12:30.110
to get a simple app up and running.

00:12:31.520 --> 00:12:35.060
But a simple app is not very fun
unless you have a user interface.

00:12:35.100 --> 00:12:36.900
It's not all about being fun,
but you want to be able to

00:12:36.900 --> 00:12:37.960
have some functionality.

00:12:38.130 --> 00:12:40.760
And your functionality can't
really be provided to the

00:12:40.760 --> 00:12:42.500
user without a user interface.

00:12:44.110 --> 00:12:47.240
When you make your user interface,
you want to make a modern user interface.

00:12:47.340 --> 00:12:50.670
And I'd like to kind of touch
on the points that really define

00:12:50.810 --> 00:12:53.160
what a modern user interface is.

00:12:53.330 --> 00:12:56.240
First, you want to adhere as
closely as possible,

00:12:56.240 --> 00:12:59.800
with exceptions,
to the human interface guidelines.

00:13:00.660 --> 00:13:03.950
So there's a document that we'll
put up a reference to later on,

00:13:03.950 --> 00:13:04.750
and you could read through that.

00:13:04.770 --> 00:13:07.400
It sort of gives you the guidelines
about how you're supposed to

00:13:07.400 --> 00:13:10.900
use the user interface elements
in conjunction with each other.

00:13:11.390 --> 00:13:13.300
One thing about laying
out the user interface,

00:13:13.300 --> 00:13:15.640
you can see in the top right here
I have a picture of Interface Builder.

00:13:15.640 --> 00:13:17.890
There's some little blue dashed lines.

00:13:17.960 --> 00:13:19.470
So it has a guidelines feature.

00:13:19.540 --> 00:13:22.560
An Interface Builder helps you lay
out your user interface according to

00:13:22.580 --> 00:13:26.460
some of the guidelines provided by the
Human Interface Guidelines document.

00:13:26.820 --> 00:13:34.140
The next thing you can do to adhere
to the Human Interface Guidelines

00:13:34.300 --> 00:13:36.910
is to use HIToolbox controls.

00:13:37.070 --> 00:13:40.160
We work very hard on the controls
to make sure they adhere as strongly

00:13:40.160 --> 00:13:44.040
as possible to the guidelines given
to us by the Human Interface team.

00:13:44.040 --> 00:13:47.590
And if you use them,
you get all of our hard work for free.

00:13:49.460 --> 00:13:52.500
Next, you want to use modern
compositing windows.

00:13:52.520 --> 00:13:54.340
I mentioned compositing earlier.

00:13:54.340 --> 00:13:56.920
It's a drawing model where
only what's needed to be drawn

00:13:57.040 --> 00:13:58.700
gets drawn in your application.

00:13:58.700 --> 00:14:00.030
It's much more efficient.

00:14:00.170 --> 00:14:04.780
You can provide an application that's
much more modern by using this.

00:14:05.380 --> 00:14:08.200
It's kind of nice because it's just
a checkbox in Interface Builder.

00:14:08.200 --> 00:14:10.120
You click the checkbox for compositing.

00:14:10.280 --> 00:14:14.300
If you use all of our controls,
they can be used in composited windows.

00:14:14.450 --> 00:14:17.300
And you get the efficiency
right there for free.

00:14:17.300 --> 00:14:18.270
And that's nice.

00:14:18.370 --> 00:14:20.300
The next thing is live resizing.

00:14:20.300 --> 00:14:22.230
Guy showed he was resizing the
window there in the application.

00:14:22.310 --> 00:14:24.290
It just showed an outline of the window.

00:14:24.350 --> 00:14:28.260
And that's not really a
responsive user interface.

00:14:28.320 --> 00:14:29.300
So you want to turn on live resizing.

00:14:29.300 --> 00:14:32.300
Again, it's just a checkbox
in Interface Builder.

00:14:32.300 --> 00:14:33.260
You check it.

00:14:33.350 --> 00:14:35.400
And that means that as the
user modifies the window,

00:14:35.440 --> 00:14:37.750
changing the size,
etc., the user interface

00:14:37.850 --> 00:14:40.770
responds instantaneously,
and the user can see what

00:14:40.770 --> 00:14:42.610
resizing that window means.

00:14:43.920 --> 00:14:45.960
You also want to use the
standard event handler.

00:14:46.060 --> 00:14:48.300
Again, guess where the checkbox is?

00:14:48.360 --> 00:14:51.570
Using the standard event handler
for a window means that all of the

00:14:51.580 --> 00:14:55.450
routine event handling for a window,
like what to do when someone clicks

00:14:55.450 --> 00:14:58.430
on a title bar and drags it around,
or clicks in the close

00:14:58.440 --> 00:15:01.600
box or the grow box,
all gets handled automatically

00:15:01.600 --> 00:15:03.700
through the standard event handler.

00:15:09.040 --> 00:15:11.760
Also, when it comes time to
interact with the user,

00:15:12.060 --> 00:15:14.670
maybe to interrupt them
and give them information,

00:15:14.730 --> 00:15:17.820
you can use Sheets or standard
alerts as appropriate.

00:15:17.850 --> 00:15:21.680
When it comes time to interact
with the user to describe

00:15:21.680 --> 00:15:24.480
locations of files and folders,

00:15:24.930 --> 00:15:26.910
You can use navigation services.

00:15:26.910 --> 00:15:29.760
So all of these things together
will give you the basics of

00:15:29.760 --> 00:15:32.220
a modern Carbon application.

00:15:33.980 --> 00:15:36.620
So I talked about the user interface
elements that are available to you.

00:15:36.620 --> 00:15:37.260
There's quite a few.

00:15:37.260 --> 00:15:39.800
I can't stick them all in one slide,
so I've had to break them

00:15:39.800 --> 00:15:42.980
up into bits because there's
just so much available to you.

00:15:43.570 --> 00:15:45.960
First,
there's a few kinds of menus you can use.

00:15:46.000 --> 00:15:50.020
There's the menus you're used to
that come out of the menu bar.

00:15:50.200 --> 00:15:53.490
There are contextual menus that
you get when you command-click

00:15:53.520 --> 00:15:55.300
or right-click on user interface.

00:15:55.300 --> 00:15:58.790
These contextual menus change
according to what piece of user

00:15:58.830 --> 00:16:01.070
interface is being interacted with.

00:16:01.100 --> 00:16:03.890
There's also pop-up button menus.

00:16:03.890 --> 00:16:08.870
All of these are just lists of
commands that the user can make,

00:16:09.040 --> 00:16:11.670
select to perform actions.

00:16:11.690 --> 00:16:14.850
They're just simple actions
that a user can pick.

00:16:15.540 --> 00:16:18.200
Next, we have a whole bunch of
different kinds of windows.

00:16:18.240 --> 00:16:22.630
And you want to use windows to
present your user interface and

00:16:22.630 --> 00:16:25.280
your information to the user.

00:16:26.880 --> 00:16:29.040
So the biggest window we have
up there is a document window.

00:16:29.040 --> 00:16:31.720
You'll put the contents of any
sort of document functionality

00:16:31.720 --> 00:16:32.960
of your application there.

00:16:33.100 --> 00:16:38.910
Here it's just a picture from TextEdit,
I think, or SimpleText.

00:16:39.210 --> 00:16:43.450
Out the side of that window is a
drawer where you can provide additional

00:16:43.450 --> 00:16:45.800
information about specific content.

00:16:46.070 --> 00:16:48.840
On the bottom left,
there's a utility window.

00:16:49.020 --> 00:16:53.000
That's a good place to show properties
of objects in a user interface.

00:16:53.120 --> 00:16:54.890
On the bottom right, I show a sheet.

00:16:55.010 --> 00:16:58.330
And a sheet is a kind of
window that actually is

00:16:58.410 --> 00:17:03.180
grouped with a document window,
and it comes out of the top and is

00:17:03.180 --> 00:17:04.500
associated directly with that window.

00:17:04.500 --> 00:17:08.340
So you can interrupt the user
and provide information about

00:17:08.340 --> 00:17:10.310
a specific window that way.

00:17:11.950 --> 00:17:13.240
Next, there are a few kinds of toolbars.

00:17:13.240 --> 00:17:14.270
We have metal toolbars.

00:17:14.270 --> 00:17:17.000
I show a few examples here.

00:17:17.000 --> 00:17:21.680
The second one is large icons with text.

00:17:21.930 --> 00:17:24.150
And then I show some,
there's different modes that you

00:17:24.150 --> 00:17:25.400
get all automatically and free.

00:17:25.400 --> 00:17:28.280
You can select small icons without text.

00:17:28.430 --> 00:17:31.310
And you can have iconless entirely.

00:17:31.630 --> 00:17:33.500
I don't know if you can
see well in this slide,

00:17:33.500 --> 00:17:35.360
but there's a little
chevron on the right,

00:17:35.360 --> 00:17:37.300
and that's all provided automatically.

00:17:37.300 --> 00:17:41.140
The chevron on the right turns into
a set of menu items when there's not

00:17:41.140 --> 00:17:45.160
enough room to display the toolbar
functionality that's available.

00:17:48.380 --> 00:17:49.330
Now the controls.

00:17:49.510 --> 00:17:52.280
There's a lot of controls
available to you.

00:17:52.280 --> 00:17:54.240
And I'll break it out into
a few slides in a second,

00:17:54.330 --> 00:17:57.910
but I've highlighted some
in yellow or orange here.

00:17:58.070 --> 00:18:02.180
These are the new ones that
we've introduced in Panther.

00:18:02.180 --> 00:18:03.210
We have the segment view.

00:18:03.340 --> 00:18:05.680
It has a little asterisk there
because we didn't finalize the

00:18:05.790 --> 00:18:08.210
APIs in time to get onto your seed CD.

00:18:08.480 --> 00:18:09.940
Sorry about that.

00:18:10.030 --> 00:18:12.360
My fault a little bit.

00:18:12.490 --> 00:18:16.630
Also, we've introduced a text view,
which is a wrapper around

00:18:16.680 --> 00:18:18.390
the MLTE text objects.

00:18:18.520 --> 00:18:20.460
It's very powerful.

00:18:20.540 --> 00:18:24.270
We've also added a search field
so that you can provide the search

00:18:24.320 --> 00:18:27.810
functionality like you see in
the Finder and as you've seen

00:18:27.810 --> 00:18:30.470
introduced in many places in Panther.

00:18:33.100 --> 00:18:37.290
I've divided those up into
a few different groups.

00:18:37.470 --> 00:18:39.280
That's the way I group them mentally.

00:18:39.410 --> 00:18:40.740
I don't know if everybody does.

00:18:40.780 --> 00:18:43.050
I'm just going to go through those
groups to talk about the different

00:18:43.050 --> 00:18:44.560
kinds of controls that are available.

00:18:44.750 --> 00:18:47.050
The first group is buttons.

00:18:47.230 --> 00:18:48.690
There's push buttons
that you're all used to,

00:18:48.820 --> 00:18:53.850
radio buttons and check boxes that if
you don't know what they are by now,

00:18:54.040 --> 00:18:55.660
you've been using them
for quite a long time.

00:18:55.780 --> 00:18:57.340
They're the standard ones you're used to.

00:18:57.450 --> 00:19:00.030
We have bevel buttons,
sort of squarish buttons that can

00:19:00.030 --> 00:19:01.760
have icons and textual content.

00:19:02.340 --> 00:19:05.720
Little arrows, which you see are the...

00:19:05.850 --> 00:19:08.830
On the top right there,
it's a little set of arrows used

00:19:08.830 --> 00:19:13.730
to allow a user to increment
or decrement some values.

00:19:13.910 --> 00:19:16.940
And we have the new segment view,
which you can see on the bottom.

00:19:17.140 --> 00:19:19.160
I'd like to take a second to tell
you what the segment view is.

00:19:19.290 --> 00:19:24.800
The segment view is a way to allow the
user either to select something or to

00:19:24.800 --> 00:19:28.820
provide some sort of state functionality
when you click on the buttons.

00:19:28.910 --> 00:19:31.780
It's very powerful.

00:19:31.890 --> 00:19:34.730
Guy had a session earlier where
he talked about it in detail.

00:19:34.890 --> 00:19:37.920
If you can see that on the DVD,
he really provides a lot of good

00:19:37.920 --> 00:19:39.860
information about segment view.

00:19:42.300 --> 00:19:43.960
The next group is text controls.

00:19:44.020 --> 00:19:48.260
We have a lot of those now
because we've been adding some.

00:19:48.450 --> 00:19:50.790
First, there's edit text,
which you're used to for

00:19:50.790 --> 00:19:54.360
putting small textual items in,
say, a form user interface of some sort.

00:19:54.460 --> 00:19:59.440
Static text for labeling
pieces of your user interface.

00:19:59.560 --> 00:20:03.620
We have the new text view,
where you can provide much more

00:20:03.620 --> 00:20:06.890
complex textual information,
allow the user to edit

00:20:06.890 --> 00:20:09.380
it and have it styled,
etc., using the

00:20:09.380 --> 00:20:12.720
MLTE objects at its center.

00:20:14.380 --> 00:20:16.670
We have the clock control,
which is what we call the

00:20:16.680 --> 00:20:19.310
piece here that's used to
display the time and the date.

00:20:19.410 --> 00:20:24.260
And you can allow the user to set
display times or dates to users or

00:20:24.440 --> 00:20:26.970
allow them to set times and dates.

00:20:27.550 --> 00:20:31.790
We have the new search field,
which you can use to provide the

00:20:31.790 --> 00:20:35.490
user a chance to give you feedback
about what they want to search for.

00:20:35.560 --> 00:20:38.250
It should be used exclusively for
searching rather than any other

00:20:38.250 --> 00:20:42.480
specialized content because it's been
branded to be a search field and it's

00:20:42.480 --> 00:20:47.030
very important to maintain that look
as something a user will automatically

00:20:47.030 --> 00:20:49.320
think about as a searching item.

00:20:49.830 --> 00:20:53.240
And lastly up there we have a combo
box which is sort of a combination

00:20:53.240 --> 00:20:57.380
between a pop-up button with a
menu and a text field where they

00:20:57.380 --> 00:20:59.390
can sort of type select things.

00:21:00.810 --> 00:21:03.420
The next group is tracks.

00:21:03.540 --> 00:21:09.700
So we have scroll bars in there where
a user can scroll their user interface.

00:21:09.790 --> 00:21:13.700
A slider for indicating
values on a sliding scale.

00:21:13.930 --> 00:21:16.810
Progress indicator for you
to provide feedback about the

00:21:16.810 --> 00:21:18.700
progress of your application.

00:21:18.800 --> 00:21:20.700
That's the one that's got a
blue rectangle on it there.

00:21:21.700 --> 00:21:25.250
And a relevance bar for
providing feedback about how

00:21:25.270 --> 00:21:28.700
relevant maybe something in a
set of searches is to a user.

00:21:28.700 --> 00:21:33.910
The more full the relevance bar,
the more relevant it is to the user.

00:21:35.660 --> 00:21:39.210
We have kinds of controls
I call grouping controls,

00:21:39.210 --> 00:21:42.360
like the tab control,
which is the outermost group here.

00:21:42.360 --> 00:21:47.210
It says 1, 2 at the top,
where you can group the user

00:21:47.210 --> 00:21:50.890
interface by tabbed panes.

00:21:51.680 --> 00:21:56.710
A group box, show that there,
just sort of put a box around.

00:21:57.100 --> 00:21:59.660
These are interface elements
that are related to each other.

00:21:59.720 --> 00:22:02.120
There's also the radio group,
which is kind of a nice feature.

00:22:02.120 --> 00:22:04.100
It does some automatic behaviors for you.

00:22:04.150 --> 00:22:06.900
You can put up a series of radio buttons,
then as the user selects

00:22:06.900 --> 00:22:09.040
the radio buttons,
it communicates with the other

00:22:09.040 --> 00:22:13.250
radio buttons to turn them
off and on automatically.

00:22:14.100 --> 00:22:17.240
The last kind of controls is
kind of a miscellaneous pack.

00:22:17.240 --> 00:22:19.200
It's our specialized controls.

00:22:19.200 --> 00:22:21.000
We're getting to have
quite a few of those now.

00:22:21.000 --> 00:22:22.220
So we have an image view.

00:22:22.220 --> 00:22:24.350
We've got SpongeBob up
in an image view here.

00:22:24.640 --> 00:22:27.000
Does anybody know who SpongeBob is?

00:22:27.000 --> 00:22:31.400
If you come to my office,
you can meet him.

00:22:31.810 --> 00:22:33.700
We also have the chasing arrows.

00:22:33.700 --> 00:22:36.840
That used to be a control that
had arrows chasing each other.

00:22:36.840 --> 00:22:39.300
Now it kind of looks like a
pinwheel or a spoke effect.

00:22:39.300 --> 00:22:42.700
It shows an animation that shows
your application is doing something.

00:22:42.790 --> 00:22:44.340
We have separator bars.

00:22:44.400 --> 00:22:47.200
Those are vertical and horizontal lines.

00:22:47.310 --> 00:22:50.610
You can draw those to the user interface
guidelines by using that control.

00:22:50.740 --> 00:22:55.310
They're used to separate your user
interface into different compartments.

00:22:55.700 --> 00:23:00.760
We have the icon control and image well,
where you can show other image

00:23:00.760 --> 00:23:04.110
content and they're clickable.

00:23:04.670 --> 00:23:05.740
We have the scrolling view here.

00:23:05.740 --> 00:23:08.830
That's that other image here
with the person in pink in it.

00:23:08.910 --> 00:23:13.430
And it allows you to put content
in it and automatically scroll it.

00:23:13.520 --> 00:23:17.270
You get a lot of functionality there
that you used to have to do by hand.

00:23:18.510 --> 00:23:22.300
And also for providing sort of
hierarchical data representation

00:23:22.300 --> 00:23:25.630
or table data representations,
we have a sort of a complex

00:23:25.650 --> 00:23:27.550
control called a data browser.

00:23:29.800 --> 00:23:31.000
So back to the big list.

00:23:31.170 --> 00:23:33.800
It shows that there's a lot of
user interface that you can use

00:23:34.000 --> 00:23:39.110
without creating your own to create
your applications user interface.

00:23:39.220 --> 00:23:41.400
You shouldn't really have to
create too many custom controls.

00:23:41.410 --> 00:23:45.890
You should be able to use these and
make a fairly full-featured application.

00:23:50.150 --> 00:23:53.280
All of these user interface elements,
it's nice to talk about them,

00:23:53.280 --> 00:23:58.510
but I'd like to just touch on NIBs
and talk about what I mean by NIBs.

00:23:58.680 --> 00:24:04.290
NIBs are an XML-based extensible
way of describing a user interface.

00:24:05.700 --> 00:24:08.190
I'm going to get,
I think it's best of all to show Guy,

00:24:08.220 --> 00:24:11.060
to get Guy to show you how to make them,
but before he shows you,

00:24:11.070 --> 00:24:17.340
I'm going to talk about how you can
load your user interface out of a nib.

00:24:18.920 --> 00:24:21.040
Loading a NIB is very straightforward.

00:24:21.180 --> 00:24:23.800
There's an API called CreateNibReference.

00:24:23.880 --> 00:24:28.200
So you're going to have a file
inside of your application bundle.

00:24:29.200 --> 00:24:30.460
and you'll know the name of it.

00:24:30.460 --> 00:24:35.390
You'll provide it to this API in
the incoming nib name parameter.

00:24:35.500 --> 00:24:36.890
Tell it you want to
load that nib reference.

00:24:36.980 --> 00:24:38.970
And that's all there is to loading it.

00:24:39.160 --> 00:24:42.390
After that you'll load all of
your nib content out of it.

00:24:42.400 --> 00:24:46.100
When you're finished with it,
you dispose of the nib reference.

00:24:46.100 --> 00:24:48.580
Now, I don't mean that you have to keep
your nib reference around for the

00:24:48.580 --> 00:24:50.100
whole lifetime of your application.

00:24:50.100 --> 00:24:52.870
Just open a nib reference,
get what you need out of it,

00:24:53.040 --> 00:24:54.090
and close it again.

00:24:54.100 --> 00:24:56.890
If you need to use it later
on in your application,

00:24:56.890 --> 00:24:59.100
you can reopen it without a problem.

00:25:01.030 --> 00:25:04.920
That's okay, but all you're doing is
opening the nib reference.

00:25:05.110 --> 00:25:08.690
The interesting part is taking your
user interface out of the nib reference.

00:25:08.810 --> 00:25:10.600
So there's a few APIs for doing that.

00:25:10.740 --> 00:25:13.240
You can set your menu bar from a nib.

00:25:13.350 --> 00:25:16.190
You can create a menu from a nib.

00:25:16.560 --> 00:25:19.350
Or you can, kind of most interestingly,
because you're going to be making a

00:25:19.350 --> 00:25:24.370
lot of your user interface in Windows,
you can create Window from Nib.

00:25:25.610 --> 00:25:29.340
All of these APIs take reference
to the nib that you created

00:25:29.340 --> 00:25:33.300
with CreateNibReference,
the API I showed in a previous slide.

00:25:33.680 --> 00:25:37.820
As well as a name that you have decided
while you were creating the nib.

00:25:37.820 --> 00:25:42.100
So say you named your window "main
window," you provide that string there,

00:25:42.100 --> 00:25:47.290
and that is the nib that will be
loaded with createWindowFromNib.

00:25:50.690 --> 00:25:53.630
Once you've loaded a few
things out of your nib,

00:25:53.630 --> 00:25:54.360
so what?

00:25:54.360 --> 00:25:55.590
You know, you have, you've loaded them.

00:25:55.610 --> 00:25:56.190
What do you do then?

00:25:56.200 --> 00:25:57.960
How do they work?

00:25:58.130 --> 00:26:01.790
There's a simple API called
RunApplicationEventLoop.

00:26:02.390 --> 00:26:04.950
And it's simple because
it's very easy to call.

00:26:04.980 --> 00:26:07.490
I have a prototype at the bottom here.

00:26:07.590 --> 00:26:09.600
RunApplicationEventLoop.

00:26:09.660 --> 00:26:11.830
And it kind of gets everything going.

00:26:12.130 --> 00:26:14.850
It starts the event dispatcher,
which starts all of the

00:26:14.850 --> 00:26:18.150
standard event handling that
happens in your application.

00:26:18.230 --> 00:26:21.100
It's important to note that this API,
you call it and it goes away.

00:26:21.100 --> 00:26:24.600
It doesn't come back for the
duration of your application

00:26:24.600 --> 00:26:26.750
until your application quits.

00:26:27.130 --> 00:26:30.710
does all the standard event handling,
like application activation

00:26:30.710 --> 00:26:33.140
and deactivation,
and that kind of thing.

00:26:33.140 --> 00:26:36.420
It calls all the event handlers
that are necessary for your

00:26:36.420 --> 00:26:37.750
user interface to work.

00:26:38.340 --> 00:26:40.500
And it's pretty easy to use.

00:26:40.620 --> 00:26:45.230
And why I bring this up is because just
in the APIs that I've gone through,

00:26:45.350 --> 00:26:47.440
I can show you a .niB
sample code right up here,

00:26:47.440 --> 00:26:49.270
and it's a full application.

00:26:49.360 --> 00:26:53.300
It doesn't do much,
it's just a user interface.

00:26:53.490 --> 00:26:55.400
But it's a full application.

00:26:55.560 --> 00:26:59.870
So I create a .niB reference,
referring to the .niB file

00:26:59.870 --> 00:27:02.200
in my application bundle.

00:27:02.200 --> 00:27:06.360
I set up a menu bar from that .niB
by passing in the -- I have a menu

00:27:06.360 --> 00:27:09.490
bar named MyMenuBar in this example.

00:27:09.670 --> 00:27:13.700
Then I create a window from
the nib called myWindow.

00:27:13.760 --> 00:27:17.100
I'm done with the nib reference,
so I dispose nibReference,

00:27:17.150 --> 00:27:18.840
and I run Application Event Loop.

00:27:18.890 --> 00:27:23.220
This is a full application,
and it'll start up, put up a menu bar,

00:27:23.220 --> 00:27:26.620
put up a window that can
be dragged around and used.

00:27:28.100 --> 00:27:31.020
So I'd like to invite
Guy to show the next step,

00:27:31.260 --> 00:27:33.950
making a user interface
with Interface Builder.

00:27:34.060 --> 00:27:34.980
GUY SMITH: Thank you, David.

00:27:35.010 --> 00:27:39.650
OK, so he's told us about all the tools
we need to put together an interface.

00:27:39.800 --> 00:27:41.400
And I will show you how to build one.

00:27:41.460 --> 00:27:44.710
So when I created the project with Xcode,
it automatically created

00:27:44.710 --> 00:27:46.160
a main.nib for me.

00:27:46.290 --> 00:27:48.470
And in fact,
it loaded some of those things

00:27:48.480 --> 00:27:53.260
automatically in the little skeleton
app that Xcode created for me.

00:27:53.420 --> 00:27:56.180
And this code looks almost identical
to the code David showed you before.

00:27:56.180 --> 00:27:58.010
So no surprise there.

00:27:58.050 --> 00:28:01.000
So let's take a look at the
nib that Xcode created for us.

00:28:01.000 --> 00:28:02.640
And we'll look at that
with Interface Builder.

00:28:02.730 --> 00:28:07.920
First thing you'll notice is that
the title of the nib is main.nib.

00:28:07.960 --> 00:28:12.040
Minus the .nib part, minus the extension,
that is the name you would pass

00:28:12.400 --> 00:28:16.480
to the Create Nib Reference
API to create your nib.

00:28:16.560 --> 00:28:19.550
And similarly, everything that's in
your nib also has a name.

00:28:19.700 --> 00:28:21.370
For instance,
the menu bar is just called Menu Bar,

00:28:21.370 --> 00:28:22.860
so you'd load it with that name.

00:28:22.890 --> 00:28:24.970
And the main window is
just called Main Window,

00:28:24.970 --> 00:28:26.180
and you'd load it with that name.

00:28:26.180 --> 00:28:27.020
All right.

00:28:27.020 --> 00:28:29.120
So let's actually do something
interesting with this nib.

00:28:29.330 --> 00:28:30.850
Let's open up our window in the nib.

00:28:30.980 --> 00:28:33.160
And I want to make a picture viewer,
so I need a place to

00:28:33.220 --> 00:28:35.400
display some pictures,
first of all.

00:28:35.510 --> 00:28:38.520
So I'm going to-- oh, before I do that,

00:28:38.740 --> 00:28:40.700
I actually want this thing to
look a little bit better than

00:28:40.750 --> 00:28:42.200
just a plain white canvas.

00:28:42.260 --> 00:28:43.790
So let me bring up the inspector.

00:28:43.800 --> 00:28:46.130
And I want to set a few
attributes on the window.

00:28:46.210 --> 00:28:49.600
So there is a notion of a theme brush
that can be associated with the window.

00:28:49.670 --> 00:28:52.570
And this determines how the
window background paints.

00:28:52.770 --> 00:28:56.500
Since this is going to be a normal window
in the document layer of an application,

00:28:56.510 --> 00:28:59.200
and that's sort of the mode-less layer,
I want the mode-less look,

00:28:59.260 --> 00:29:01.640
which will give me the Aqua lines.

00:29:01.640 --> 00:29:03.660
Now another thing I need to set
on the window is I want some of

00:29:03.660 --> 00:29:04.800
those modern features turned on.

00:29:04.800 --> 00:29:07.600
So I'm going to click the library
size checkbox and the compositing

00:29:07.600 --> 00:29:11.860
checkbox so that I can use HIViews and
so I can get a nicer looking resize

00:29:11.860 --> 00:29:14.360
than just that sort of rectangle.

00:29:14.410 --> 00:29:17.100
All right, so now let me actually add
some stuff to the window.

00:29:17.210 --> 00:29:19.280
I want a place to put my images,
so I'm going to drag

00:29:19.280 --> 00:29:20.560
out a group box here.

00:29:20.630 --> 00:29:23.760
But I don't want a title on it,
so I'll delete that.

00:29:23.830 --> 00:29:25.460
And let me put it in the right place.

00:29:25.510 --> 00:29:27.660
So here's an example of some of
the guides David was mentioning

00:29:27.660 --> 00:29:28.860
for Interface Builder.

00:29:28.860 --> 00:29:32.390
It lets you sort of snap your controls
and views to the right place according

00:29:32.390 --> 00:29:33.760
to the user interface guidelines.

00:29:33.800 --> 00:29:36.460
And Interface Builder
does that automatically.

00:29:36.500 --> 00:29:37.620
So let me grow this
thing out a little bit.

00:29:37.620 --> 00:29:43.400
And I want some push buttons.

00:29:44.900 --> 00:29:48.240
Put that in the right spot here.

00:29:48.240 --> 00:29:50.340
I want a previous button.

00:29:50.340 --> 00:29:52.800
One thing I want to do to this
button is I want to be able to react

00:29:52.860 --> 00:29:55.240
to it when the user clicks on it.

00:29:55.240 --> 00:29:57.410
And the way I'm going to do
that is to set up a command,

00:29:57.420 --> 00:29:58.900
associate a command with this button.

00:29:58.980 --> 00:30:00.600
It's just a little four-character code.

00:30:00.600 --> 00:30:03.530
This command will automatically be
sent out via the Carbon event mechanism

00:30:03.530 --> 00:30:05.220
whenever the user clicks on the button.

00:30:05.230 --> 00:30:08.890
Now another way I want to set up this
button is by giving it a signature.

00:30:09.050 --> 00:30:11.930
This signature allows me in
my code to be able to fetch

00:30:11.930 --> 00:30:13.200
that button from the window.

00:30:13.200 --> 00:30:16.580
I can say sort of give me the
control with the signature previous

00:30:16.580 --> 00:30:20.090
and ID 0 out of a window so I can
manipulate it later if I need to.

00:30:20.240 --> 00:30:21.860
So I'll go ahead and set that up.

00:30:21.950 --> 00:30:24.720
And in addition to the previous button,
I want a next button.

00:30:24.800 --> 00:30:26.890
Let's get that in the right spot.

00:30:26.930 --> 00:30:29.250
Give it the right title.

00:30:31.500 --> 00:30:51.900
[Transcript missing]

00:30:52.150 --> 00:30:55.100
GroupBox, grow that to the right size.

00:30:55.110 --> 00:30:57.840
And I need to set an
image view specific-- oh,

00:30:57.840 --> 00:30:59.600
I need to do two things
to the image view.

00:30:59.600 --> 00:31:04.720
First of all, I need to give it the right
signature so I can find it later.

00:31:04.740 --> 00:31:08.560
This one doesn't need a command,
so I don't need to do that.

00:31:08.560 --> 00:31:09.630
Let's set up an attribute.

00:31:09.640 --> 00:31:11.480
I'm going to set the
scale to fit attribute.

00:31:11.480 --> 00:31:16.200
It just modifies the way the image will
get actually displayed in the image view.

00:31:16.200 --> 00:31:20.450
OK, so let's save our nib.

00:31:21.700 --> 00:31:25.490
and Rebuild Our Project.

00:31:25.510 --> 00:31:28.070
And it comes up just like that,
so the interface got loaded.

00:31:28.110 --> 00:31:31.900
Now, unfortunately, even though we've got
library size turned on,

00:31:31.930 --> 00:31:33.730
the views are not relaying out.

00:31:33.850 --> 00:31:35.600
This is something we
addressed in Panther.

00:31:35.600 --> 00:31:38.200
We have a new set of
APIs called HIV layout.

00:31:38.200 --> 00:31:42.000
We're going to talk about it in session,
I think it's 4:25,

00:31:42.060 --> 00:31:45.200
which is immediately following this one,
but in the room upstairs.

00:31:45.250 --> 00:31:47.990
And we'll go into details
on exactly how to use that.

00:31:48.100 --> 00:31:51.400
Now, I've already written
some code to do that.

00:31:51.430 --> 00:31:54.900
And let's go ahead and add
that to our application.

00:31:54.950 --> 00:31:56.400
I'm going to add a bunch of files.

00:31:56.410 --> 00:32:00.700
Oh,
let me add it to a different place here.

00:32:00.830 --> 00:32:03.100
Add a bunch of files.

00:32:07.190 --> 00:32:10.560
So I'm also adding some files for some
other functionality I'll show off later.

00:32:10.560 --> 00:32:13.900
The important thing I needed
is in FilmstripView.c.

00:32:13.950 --> 00:32:17.710
So let's go back into main
and let's set up the layouts.

00:32:17.850 --> 00:32:24.440
So I will need to include a
prototype that's in FilmstripView.

00:32:25.110 --> 00:32:28.800
And, all right, so let's see,
I've created my window.

00:32:28.800 --> 00:32:31.480
Right before I show it,
I want to set up the layouts that

00:32:31.480 --> 00:32:34.700
take advantage of HIViewLayout to
automatically resize all my widgets.

00:32:34.830 --> 00:32:40.800
And that is via my
setupWindowLayout function.

00:32:42.720 --> 00:32:47.240
So now that that's in,
I should be able to build and run.

00:32:47.240 --> 00:32:50.890
And now, when I resize the window-- oh,
you know what?

00:32:50.900 --> 00:32:54.330
I must have missed something in the nib,
but I'll fix that later.

00:32:54.410 --> 00:32:56.490
So anyway,
the buttons move around appropriately,

00:32:56.490 --> 00:32:58.600
and the group should move around as well.

00:32:58.600 --> 00:33:00.100
But I botched something up,
but that's OK.

00:33:00.100 --> 00:33:01.800
I'll fix that for the next one.

00:33:01.800 --> 00:33:04.100
So that shows you how you can
construct a basic interface.

00:33:04.240 --> 00:33:05.720
And like I said,
we'll go into more details

00:33:05.730 --> 00:33:08.260
on how to use HIV layouts,
which is a really powerful technology.

00:33:08.260 --> 00:33:11.450
And we'll go into details
in another session.

00:33:11.490 --> 00:33:13.070
So in subsequent demos,
I'm going to actually add some

00:33:13.140 --> 00:33:14.310
functionality to this app.

00:33:14.470 --> 00:33:16.630
But before I do that,
David needs to lay some

00:33:16.670 --> 00:33:18.150
more groundwork for you.

00:33:18.520 --> 00:33:19.900
Thank you, Guy.

00:33:19.940 --> 00:33:23.980
So Guy showed that it's pretty easy
to use Interface Builder to add some

00:33:23.980 --> 00:33:28.500
of the user interface elements that
are available from HIToolbox into your

00:33:28.500 --> 00:33:33.750
application so that you can provide
feedback to the user about how your

00:33:33.750 --> 00:33:35.990
application is going to look and work.

00:33:40.800 --> 00:33:43.540
Next I want to go over roughly
what the architecture of a

00:33:43.580 --> 00:33:46.110
modern Carbon application is.

00:33:46.500 --> 00:33:48.970
So we showed you the nibs that
define the user interface.

00:33:49.040 --> 00:33:51.520
I think that's very important.

00:33:51.580 --> 00:33:55.800
Once those nibs are up,
Carbon Events are what animate

00:33:55.800 --> 00:33:57.980
it and what give it life.

00:33:58.800 --> 00:34:01.680
So the handling of
Carbon events is important.

00:34:01.700 --> 00:34:03.640
Like I mentioned before,
it's a non-polling way

00:34:03.640 --> 00:34:06.540
of handling events,
where you only listen to the events

00:34:06.540 --> 00:34:09.000
that are important to the application.

00:34:10.700 --> 00:34:14.660
I want to talk about event
handlers in a few slides.

00:34:14.660 --> 00:34:16.940
There's also the handling of HICommands.

00:34:16.940 --> 00:34:22.530
HICommands, the way I think about them,
is that they're sort of simplified

00:34:22.530 --> 00:34:28.140
Carbon events where they just describe
an action that the user wants to take.

00:34:28.140 --> 00:34:35.650
You do this through an HICommand,
which is just a 32-bit value

00:34:35.650 --> 00:34:35.650
that identifies an action.

00:34:38.940 --> 00:34:41.060
You also want to provide
a reactive user interface.

00:34:41.150 --> 00:34:46.000
What I mean by that is that as the
application changes its state underneath,

00:34:46.150 --> 00:34:49.660
you want the buttons and menus,
etc., to react to that change of

00:34:49.660 --> 00:34:56.190
state by becoming enabled or disabled
or have the names of menus change,

00:34:56.190 --> 00:34:56.910
etc.

00:34:57.150 --> 00:34:59.720
Menu items change, etc.

00:34:59.760 --> 00:35:02.330
Other than that,
all you need to focus on is the

00:35:02.430 --> 00:35:06.020
functionality that you're providing in
your application that makes it special

00:35:06.040 --> 00:35:08.100
and makes your customers want to buy it.

00:35:09.710 --> 00:35:14.870
So here's kind of a pictorial overview
of what I just said a minute ago.

00:35:14.870 --> 00:35:16.600
So we've got these yellow blocks up here.

00:35:16.600 --> 00:35:20.600
They represent the nibs that you made,
as Guy showed you.

00:35:21.810 --> 00:35:25.130
As you load them in, you can maybe
programmatically modify them,

00:35:25.130 --> 00:35:27.870
as he did with adding layouts to them.

00:35:28.610 --> 00:35:30.370
And we'll show you that
you can also install event

00:35:30.370 --> 00:35:35.600
handlers to provide your custom
functionality from the application.

00:35:36.840 --> 00:35:39.850
Once you load them,
you run Application Event Loop.

00:35:39.850 --> 00:35:41.620
And the standard event handler
is going to take care of

00:35:41.620 --> 00:35:43.160
all the routine operations.

00:35:43.240 --> 00:35:45.060
That's what those orange circles mean.

00:35:45.210 --> 00:35:47.400
That means that all the window
dragging and menu tracking,

00:35:47.430 --> 00:35:47.680
etc.

00:35:47.680 --> 00:35:49.730
are going to be handled by
the application for free.

00:35:49.920 --> 00:35:52.880
It's all routine stuff and you
don't have to worry about it.

00:35:52.930 --> 00:35:56.060
But say you put in an event handler
or a command handler on the OK button.

00:35:56.220 --> 00:35:59.200
When they click the OK button,
you can have a custom event

00:35:59.200 --> 00:36:03.040
handler that's there that gets
called and then you can deal with

00:36:03.040 --> 00:36:04.300
your functionality afterwards.

00:36:04.540 --> 00:36:07.410
And that's really what you want
to focus on is your functionality

00:36:07.410 --> 00:36:10.200
that you're providing that
makes your application special.

00:36:11.860 --> 00:36:13.140
So I keep talking about events.

00:36:13.150 --> 00:36:16.360
What are these events?

00:36:16.420 --> 00:36:19.850
They're the basic messaging
system of HIToolbox.

00:36:19.920 --> 00:36:21.900
So when a user clicks,
or there's any typing,

00:36:22.030 --> 00:36:26.500
or there's communication
between user interface elements,

00:36:26.510 --> 00:36:31.130
or any part of the application,
there's these messages going around,

00:36:31.310 --> 00:36:33.300
and they're Carbon events.

00:36:34.790 --> 00:36:38.680
HIToolbox internally sends
tons and tons of events.

00:36:38.710 --> 00:36:44.290
And that's what makes the whole
event dispatching system so powerful.

00:36:44.760 --> 00:36:47.220
The cool thing is that you don't
really need to handle too many.

00:36:47.220 --> 00:36:48.940
In fact,
you don't need to handle any at all.

00:36:48.940 --> 00:36:52.180
You only have to focus on
the ones you care about.

00:36:53.990 --> 00:36:55.600
You ignore most of them all the time.

00:36:55.600 --> 00:36:57.000
There's many,
many events that are happening

00:36:57.000 --> 00:37:00.550
that you never even know are
happening and you don't really care.

00:37:03.950 --> 00:37:07.080
I've mentioned standard event
handling a few times now.

00:37:07.080 --> 00:37:09.540
What is standard event handling
and what's so special about it?

00:37:09.660 --> 00:37:14.270
Well, like getting your eyesight this
WWDC or getting a t-shirt or whatever,

00:37:14.360 --> 00:37:16.900
the best thing about it is there's
tons of free things in there.

00:37:16.920 --> 00:37:18.900
It means that you don't
have to do any work.

00:37:19.130 --> 00:37:23.670
And the less work that you have to do,
the more you can focus on the

00:37:23.670 --> 00:37:23.670
functionality of your application.

00:37:25.750 --> 00:37:31.540
So, HIToolbox really deals with most of
the events that happen automatically,

00:37:31.540 --> 00:37:33.440
like application activation,
deactivation.

00:37:33.440 --> 00:37:36.260
You don't really want to pay
attention to that unless you care.

00:37:36.260 --> 00:37:40.090
Menu tracking, control tracking,
and all the window handling.

00:37:41.910 --> 00:37:44.280
The more you use this automatic behavior,
the better off you are because

00:37:44.280 --> 00:37:46.570
you haven't had to do much work.

00:37:46.570 --> 00:37:48.800
And if we change the
way the handling works,

00:37:48.800 --> 00:37:51.310
we're going to change it in the
standard event handler so that

00:37:51.350 --> 00:37:52.800
it behaves the specified way.

00:37:52.800 --> 00:37:56.580
And you'll get that behavior for free,
even in an already shipping

00:37:56.580 --> 00:37:58.110
application if we can.

00:37:59.210 --> 00:38:02.180
Best of all, it simplifies your UI code
so there's less work for you,

00:38:02.330 --> 00:38:05.330
less work for you to keep track of,
and it's easier for you to

00:38:05.350 --> 00:38:06.900
maintain your code base.

00:38:10.500 --> 00:38:12.240
So I got a standard
event handler up here.

00:38:12.240 --> 00:38:13.590
You notice some of the spaces fell out.

00:38:13.590 --> 00:38:16.000
It's standard event handler
all squished together.

00:38:16.050 --> 00:38:18.850
That's kind of a special event
handler that we have for Windows.

00:38:19.060 --> 00:38:22.220
I mention it because you need to
turn it on with that checkbox that

00:38:22.220 --> 00:38:26.070
I showed in a previous slide and
was on in the Interface Builder when

00:38:26.070 --> 00:38:29.160
Guy was making the user interface.

00:38:29.160 --> 00:38:31.160
It handles all of the standard
window behavior for free,

00:38:31.260 --> 00:38:34.590
so you don't have to worry about dragging
the window around or resizing it or

00:38:34.590 --> 00:38:37.590
handling the clicks in the close box.

00:38:39.110 --> 00:38:42.560
It also, much more importantly,
routes all the mouse and keyboard events

00:38:42.710 --> 00:38:46.960
to the controls and the user interface
that you use inside of a window to

00:38:47.260 --> 00:38:49.680
make up your applications interface.

00:38:50.540 --> 00:38:52.770
As I mentioned earlier,
you just click a checkbox in

00:38:52.770 --> 00:38:54.180
iB and you can forget about it.

00:38:54.270 --> 00:38:56.690
That window is just going
to behave properly for the

00:38:56.760 --> 00:38:58.240
duration of your application.

00:39:01.480 --> 00:39:06.360
So I'd like to kind of break down
events and event handlers a little bit.

00:39:06.360 --> 00:39:10.180
Events are identified by
their class and their kind.

00:39:10.190 --> 00:39:10.880
It's a pair.

00:39:11.010 --> 00:39:14.400
It's a pair of two 32-bit values.

00:39:14.480 --> 00:39:19.130
So there's an event class,
like KEventClassControl,

00:39:19.160 --> 00:39:23.400
or KEventClassWindow, or KEventClassMenu.

00:39:23.640 --> 00:39:27.400
And then there's different
event kinds in those classes.

00:39:27.400 --> 00:39:33.400
So say with the Control class,
there's KEventControlBoundsChanged

00:39:33.400 --> 00:39:39.410
or KEventControlPartHit or whatever.

00:39:40.180 --> 00:39:42.890
There's a lot of events, as I mentioned,
and we work very hard to

00:39:42.970 --> 00:39:44.300
document all of them very well.

00:39:44.350 --> 00:39:50.080
If you go and read carbonevents.h
inside the HIToolbox headers

00:39:50.160 --> 00:39:53.690
in System Library Frameworks,
they're very well documented.

00:39:53.850 --> 00:39:56.900
And the more you learn these,
the more you'll learn about what

00:39:56.900 --> 00:40:00.250
kind of power you can add to your
application when you need to.

00:40:01.410 --> 00:40:03.780
Now there are a few
different event types.

00:40:03.930 --> 00:40:06.660
We break them down into
sort of three categories.

00:40:06.720 --> 00:40:14.610
There are method types of events,
and that's an event that gets

00:40:14.610 --> 00:40:14.610
sent to something to tell it
that it's chance to handle

00:40:14.860 --> 00:40:19.080
"It's functionality specific to itself.

00:40:19.220 --> 00:40:23.640
For example, you could have a k-event
control draw event,

00:40:23.680 --> 00:40:26.190
get sent to a control.

00:40:26.190 --> 00:40:26.190
And that's...

00:40:26.410 --> 00:40:29.150
That's the event system calling the
control and letting it know that it

00:40:29.150 --> 00:40:31.990
should do its functionality then.

00:40:33.750 --> 00:40:40.220
There are also notification events that
get sent to different event targets.

00:40:40.320 --> 00:40:42.810
Let the target know that
something is happening.

00:40:42.990 --> 00:40:48.020
An example of this might be a
k-event control bounce changed event.

00:40:48.020 --> 00:40:51.460
So you can let a control know that
somebody has changed its bounce,

00:40:51.460 --> 00:40:54.180
and the control needs to
react to that somehow.

00:40:54.570 --> 00:40:56.060
There's also hook kind of events.

00:40:56.060 --> 00:40:57.810
We call them hook events.

00:40:58.010 --> 00:41:02.350
That's where the event system lets a
target know that something's happening.

00:41:02.530 --> 00:41:05.500
Then that target can optionally do
something about it if it wants to.

00:41:05.500 --> 00:41:10.500
A good example of that would be maybe
a k-event window bounds changing event.

00:41:10.600 --> 00:41:16.470
Notice "ing" at the end instead
of "changing." That means that the

00:41:16.680 --> 00:41:18.500
window is in the process of changing.

00:41:18.500 --> 00:41:20.900
If you want to override that behavior
a bit and modify the way it's

00:41:20.900 --> 00:41:26.490
changing before it actually changes,
that's your hook to be able to do that.

00:41:27.040 --> 00:41:30.040
So I said event targets
a few times there.

00:41:30.130 --> 00:41:32.800
There are a few different
kinds of event targets.

00:41:32.800 --> 00:41:35.300
The main ones are the
application event target.

00:41:35.350 --> 00:41:38.590
So any events that are going to
the application like the quick

00:41:38.590 --> 00:41:43.520
command or the application event,
application activated command,

00:41:43.520 --> 00:41:47.670
event will go to the
application event target.

00:41:47.800 --> 00:41:51.990
There's also a window event target,
so any events that are related to windows

00:41:52.270 --> 00:41:54.390
will go to the window event target.

00:41:54.450 --> 00:41:57.260
Same goes for controls,
and there's a few other specialized

00:41:57.350 --> 00:41:58.830
kinds that I won't get into.

00:42:00.710 --> 00:42:03.520
This is all nice,
but what you want to do is install your

00:42:03.520 --> 00:42:08.730
own custom event handler on the pieces,
on the targets that are important

00:42:08.740 --> 00:42:10.770
to you to add your functionality.

00:42:12.040 --> 00:42:14.400
And you do that with a
custom event handler.

00:42:14.400 --> 00:42:17.740
And here's the prototype of how your
custom event handler should look.

00:42:17.740 --> 00:42:18.300
So I have it.

00:42:18.300 --> 00:42:20.940
It's called MyControlEventHandler.

00:42:20.940 --> 00:42:22.220
It'd be great if it was bigger.

00:42:22.220 --> 00:42:24.740
I guess I didn't make it big enough.

00:42:24.740 --> 00:42:29.660
And it takes, when it gets called,
it gets passed an event handler call ref.

00:42:29.790 --> 00:42:31.620
Generally,
you don't really care about that

00:42:31.620 --> 00:42:34.700
unless you're passing the event on
to some other part of the system.

00:42:34.860 --> 00:42:36.820
You get an event ref, which is important.

00:42:36.820 --> 00:42:39.180
It tells you what kind
of event is coming in.

00:42:39.310 --> 00:42:42.690
And you're also given a chance to
set up some user data beforehand,

00:42:42.690 --> 00:42:45.740
and that user data will be
passed in to the event handler.

00:42:45.780 --> 00:42:48.690
So let's go into that in
a little bit more detail.

00:42:49.290 --> 00:42:51.200
Here's an example event handler.

00:42:51.240 --> 00:42:56.080
It's a control event handler,
and it happens to be handling

00:42:56.550 --> 00:43:01.420
a notification that the
control has changed its bounds.

00:43:03.370 --> 00:43:07.260
So the first thing it does is
it takes some user data that's

00:43:07.290 --> 00:43:10.540
passed in and it changes it,
casts it into a control.

00:43:10.540 --> 00:43:12.460
I'll show you why that
is in a little bit.

00:43:12.470 --> 00:43:16.500
That's a good way of passing in
which control is being handled,

00:43:16.500 --> 00:43:20.570
which control is being passed this event.

00:43:21.410 --> 00:43:24.480
Next thing you want to do is use
getEvent parameter to extract information

00:43:24.480 --> 00:43:25.940
out of the event as you handle it.

00:43:26.040 --> 00:43:29.850
In this case,
it's extracting the current bounds

00:43:29.930 --> 00:43:34.260
of the control as a rectangle and
sticking it into the new bounds,

00:43:34.260 --> 00:43:34.990
hirect.

00:43:35.280 --> 00:43:38.070
Once you have that,
this is where you have your chance

00:43:38.070 --> 00:43:39.340
to provide your functionality.

00:43:39.340 --> 00:43:41.840
You do something with what the
new bounds of the control was.

00:43:41.940 --> 00:43:46.200
Maybe you relay out a control or I don't
know exactly what you're going to do.

00:43:46.200 --> 00:43:48.720
And then when you're finished,
you return no error to

00:43:48.720 --> 00:43:50.200
mean I handled the control.

00:43:50.200 --> 00:43:54.130
So you really only want to return
two different types of things from

00:43:54.130 --> 00:43:58.200
an event handler that the event
subsystem is going to care about.

00:43:58.200 --> 00:44:00.430
No error, which means I handle it
and there's no errors.

00:44:00.490 --> 00:44:02.110
You don't have to worry about anything.

00:44:02.200 --> 00:44:06.200
Or an event not handled error,
which means I didn't handle an event.

00:44:06.200 --> 00:44:10.710
You can do whatever you
want on top of that.

00:44:12.810 --> 00:44:14.700
Installing an event
handler is very simple.

00:44:14.720 --> 00:44:22.490
You install a event handler
and you pass in the target.

00:44:23.070 --> 00:44:24.700
Who you're installing
the event handler on,

00:44:24.700 --> 00:44:27.570
and who's going to be receiving
these events that you're going to

00:44:27.610 --> 00:44:29.590
be allowed to do some handling on.

00:44:30.610 --> 00:44:32.600
I'm going to pass in
an Event Handler UPP.

00:44:32.600 --> 00:44:36.440
That's a UPP,
Universal Procedure Pointer, I think,

00:44:36.440 --> 00:44:41.550
to the Universal Proc Pointer,
to the custom event handler

00:44:41.550 --> 00:44:44.290
that you've written.

00:44:44.900 --> 00:44:46.910
You're going to tell it how many
events you're interested in,

00:44:46.920 --> 00:44:50.750
and you're able to pass
in an event type spec.

00:44:50.860 --> 00:44:54.920
A pointer to an event type spec array,
which is a bunch of

00:44:54.920 --> 00:44:59.440
pairs of class and kind,
event class and event kind,

00:44:59.450 --> 00:45:03.910
that describes which events your handler
is interested in receiving calls for.

00:45:06.320 --> 00:45:09.690
The last highlighted item in user data,
you can pass in whatever

00:45:09.690 --> 00:45:10.900
user data you want.

00:45:11.050 --> 00:45:14.430
What I like to do is pass in
the instance of the kind of

00:45:14.440 --> 00:45:16.690
target that I'm passing in.

00:45:16.720 --> 00:45:20.460
So if I'm installing this on a control,
I'll almost always pass in the

00:45:20.460 --> 00:45:22.190
control ref as my user data.

00:45:22.230 --> 00:45:24.640
It's a good, easy,
fast way of getting your control ref back

00:45:24.700 --> 00:45:26.200
out when your event handler gets called.

00:45:26.340 --> 00:45:30.300
It's on a window,
I pass in the window ref as my user data,

00:45:30.300 --> 00:45:30.900
etc.

00:45:32.380 --> 00:45:34.050
And what you get out
is a event handler ref,

00:45:34.170 --> 00:45:37.100
which you can use in various
ways afterwards if you care to.

00:45:37.250 --> 00:45:38.180
It can be null.

00:45:38.310 --> 00:45:41.890
Most of the time you don't really care.

00:45:42.180 --> 00:45:44.070
There are a few shortcuts
to get the target.

00:45:44.150 --> 00:45:45.860
So everything has a target,
as I mentioned earlier,

00:45:45.860 --> 00:45:48.490
like an application, a window,
or a control.

00:45:48.560 --> 00:45:51.030
And so there are some macros
that are just kind of wrappers

00:45:51.030 --> 00:45:55.590
around this API where you can say,
"Install Control Event Handler,"

00:45:55.770 --> 00:45:58.420
and specify the control rather
than getting the target out of

00:45:58.460 --> 00:45:59.990
the control and specifying that.

00:46:00.080 --> 00:46:02.190
It just makes it a little bit
easier for you to call it.

00:46:02.280 --> 00:46:05.490
There's a nice one for "Install
Window Event Handler." And you can call

00:46:05.490 --> 00:46:09.000
"Install Application Event Handler,"
and it'll just go get the current event

00:46:09.000 --> 00:46:10.900
application target and pass that in.

00:46:10.940 --> 00:46:13.260
It's very similar to the one above.

00:46:16.490 --> 00:46:18.410
So here's an example of
installing an event handler.

00:46:18.530 --> 00:46:19.630
Like I said, it's very straightforward.

00:46:19.640 --> 00:46:23.090
We've got the prototype
for my event handler,

00:46:23.150 --> 00:46:26.100
which is implemented elsewhere.

00:46:26.100 --> 00:46:27.950
This is just the prototype for it.

00:46:28.010 --> 00:46:30.470
It's implemented a few slides back.

00:46:30.670 --> 00:46:34.920
I have an event type spec array where
I've specified that I'm interested

00:46:34.920 --> 00:46:40.820
in kEvent class events and kEvent
control bounce chains event kinds.

00:46:40.820 --> 00:46:43.650
And then I just install
control event handler.

00:46:43.910 --> 00:46:49.570
On my control, this is the wrapper,
it goes and gets the event

00:46:49.880 --> 00:46:54.870
target ref for that control.

00:46:56.580 --> 00:46:59.400
I pass in a UPP to my
control van handler.

00:46:59.440 --> 00:47:03.870
Conveniently on OS X,
UPPs are just the function pointers.

00:47:03.900 --> 00:47:06.690
In this case,
I'm just passing in a function

00:47:06.850 --> 00:47:08.780
pointer for an easy example.

00:47:09.050 --> 00:47:12.480
I count how many event types
were in that event list.

00:47:12.710 --> 00:47:16.270
There's a nice macro in carbonevents.h,
getEventTypeCount,

00:47:16.330 --> 00:47:18.870
which will just do a size
calculation and pass in the

00:47:18.870 --> 00:47:22.230
right number there all the time,
no matter what you change the array to.

00:47:22.470 --> 00:47:24.550
Pass in the event list.

00:47:26.390 --> 00:47:28.950
And also,
the last one there is my control.

00:47:28.990 --> 00:47:32.900
So as my user data,
I'm passing in the control

00:47:32.900 --> 00:47:37.560
ref to my control so I can
extract it later on easily.

00:47:39.150 --> 00:47:41.310
Here's an example of a little more
complicated event handler where

00:47:41.360 --> 00:47:44.900
it's handling more than one kind
of event by using getEventClass

00:47:44.900 --> 00:47:48.410
and getEventKind to check the class
and kind of the incoming event.

00:47:48.530 --> 00:47:51.180
So it uses the inEvent
parameter that's coming in,

00:47:51.330 --> 00:47:55.180
use getEventClass and
getEventKind to check if it's,

00:47:55.280 --> 00:48:00.280
again, a kEventClass control or
kEvent control bounds changed.

00:48:02.060 --> 00:48:04.870
That's all nice,
but I'd like to give you a little

00:48:04.870 --> 00:48:09.800
overview about the flow of the events
and commands in your application.

00:48:11.150 --> 00:48:14.100
When an event is first sent,
this is kind of a general thing,

00:48:14.100 --> 00:48:17.100
I'll talk more,
maybe some specifics at the end,

00:48:17.140 --> 00:48:18.290
goes to the focus control.

00:48:18.290 --> 00:48:21.330
If the focus control doesn't handle it,
say in this case the button

00:48:21.330 --> 00:48:24.380
was the focus control,
if the button doesn't handle it,

00:48:24.380 --> 00:48:28.120
it gives its parent, the group box,
a chance to handle it.

00:48:28.420 --> 00:48:31.890
If the group box has any parents,
say a tab control in this example,

00:48:31.900 --> 00:48:33.890
it gives that parent
a chance to handle it.

00:48:33.980 --> 00:48:37.410
If that control doesn't handle it,
it gives the parent window

00:48:37.410 --> 00:48:38.900
a chance to handle it.

00:48:38.900 --> 00:48:40.960
If the parent window doesn't handle it,
it gives the application

00:48:40.960 --> 00:48:41.860
a chance to handle it.

00:48:41.860 --> 00:48:45.530
So it kind of goes up the
hierarchy and gives everybody

00:48:45.530 --> 00:48:47.560
a chance to handle events.

00:48:48.090 --> 00:48:49.600
Now there are a few exceptions.

00:48:49.700 --> 00:48:51.720
Sometimes notifications
aren't really important to

00:48:51.720 --> 00:48:54.530
propagate or some method calls.

00:48:54.530 --> 00:48:57.340
You tell a control, "Hey,
draw yourself." You don't want to give

00:48:57.340 --> 00:48:58.760
the window a chance to draw the control.

00:48:58.760 --> 00:48:59.640
It just doesn't make sense.

00:48:59.660 --> 00:49:02.240
So there are a few exceptions
and those are all well

00:49:02.290 --> 00:49:04.120
documented in carbonevents.h.

00:49:05.850 --> 00:49:08.340
I just want to touch on
handling commands a bit.

00:49:08.340 --> 00:49:10.400
Like I said,
they're simplified Carbon events where

00:49:10.400 --> 00:49:15.590
you just have a 32-bit value identifying
an action that the user wants to take.

00:49:17.020 --> 00:49:19.870
What's really nice about these
is that the source of the

00:49:19.870 --> 00:49:21.800
command is not really relevant.

00:49:21.830 --> 00:49:23.890
If you want to close a window,
you don't care if the user is

00:49:23.950 --> 00:49:26.630
going to close the window by
clicking the close box or selecting

00:49:26.630 --> 00:49:27.870
close from the close menu.

00:49:28.010 --> 00:49:30.230
All you care about is they
want to close the window.

00:49:30.330 --> 00:49:33.910
So it's nice that you can kind of
ignore the source of a command,

00:49:34.060 --> 00:49:36.190
and that's what makes them special.

00:49:36.660 --> 00:49:37.910
It doesn't really matter
where they come from.

00:49:38.010 --> 00:49:39.010
They can come from menus.

00:49:39.050 --> 00:49:40.350
They can come from controls.

00:49:40.500 --> 00:49:42.360
They can be programmatically generated.

00:49:42.540 --> 00:49:43.810
You just want to handle them.

00:49:44.010 --> 00:49:45.740
Say, "Hey, this command happens.

00:49:45.810 --> 00:49:47.860
"I want to handle that command."

00:49:48.070 --> 00:49:52.670
And it doesn't... The handling of
the command is really contextual,

00:49:52.730 --> 00:49:55.280
so whoever handles the command,
it kind of depends on

00:49:55.350 --> 00:49:56.490
what the command is.

00:49:56.560 --> 00:50:01.940
So you can install a command handler
on different controls in your user

00:50:01.940 --> 00:50:09.310
interface to respond or anywhere,
in any of your event handlers.

00:50:12.960 --> 00:50:15.450
Like I said, you don't really care about
where the command comes from.

00:50:15.460 --> 00:50:18.950
And what's nice about that is
that a command can come from

00:50:19.020 --> 00:50:21.120
multiple different sources,
and you don't care as long

00:50:21.120 --> 00:50:22.040
as you're getting a command.

00:50:22.150 --> 00:50:25.200
In this case,
I'm getting a "khi-command-close," which

00:50:25.200 --> 00:50:29.910
is a sort of a standardized command that
you could use out of carbon-events.h.

00:50:30.080 --> 00:50:34.700
And it doesn't matter that it's coming
from the close box or maybe an OK box

00:50:34.700 --> 00:50:36.420
on a window or from a menu item.

00:50:36.510 --> 00:50:39.320
All you care about is that
the user wants to close,

00:50:39.500 --> 00:50:42.970
and you can handle it and not
worry about where it came from.

00:50:44.000 --> 00:50:47.270
So, here's an example command handler,
and it's just a

00:50:47.270 --> 00:50:50.070
specialized event handler,
where we're checking,

00:50:50.070 --> 00:50:52.620
we're doing getEventClass
and getEventKind again,

00:50:52.750 --> 00:50:57.890
but we're checking for this
specialized class and kind pair,

00:50:57.890 --> 00:51:02.710
keventClassCommand and
keventCommandProcessKind.

00:51:05.360 --> 00:51:07.170
The command ID is a
parameter of the event.

00:51:07.200 --> 00:51:12.330
We just extract the HICommand out of
the event using getEvent parameter,

00:51:12.330 --> 00:51:14.760
and then we switch
based on the command ID.

00:51:14.880 --> 00:51:16.840
And this is where we dispatch
out and handle our action.

00:51:16.840 --> 00:51:19.790
This is where you can
provide your functionality.

00:51:21.780 --> 00:51:24.500
So next I want to ask Guy just to go
through handling events and commands

00:51:24.500 --> 00:51:28.700
in the application a bit and kind of
build up our application a bit more.

00:51:29.350 --> 00:51:31.600
Okay, yeah,
so let's add some event handling here.

00:51:31.850 --> 00:51:35.700
Because Xcode and Interface
Builder already set up my window

00:51:35.700 --> 00:51:38.840
to use the standard event handler,
most of the functionality

00:51:38.840 --> 00:51:39.700
happens for free.

00:51:39.700 --> 00:51:41.630
You can click on the menus,
you can resize the window,

00:51:41.660 --> 00:51:43.700
drag the window around,
click on buttons and stuff.

00:51:43.860 --> 00:51:46.180
All I really care about is when
the user clicks on a couple

00:51:46.180 --> 00:51:47.700
of buttons in my application.

00:51:47.700 --> 00:51:50.670
Now, if you recall,
back when I set up the nib,

00:51:50.740 --> 00:51:52.690
I put commands in each of the
previous and next buttons.

00:51:52.760 --> 00:51:56.120
And so those commands are going to
automatically be sent out whenever

00:51:56.120 --> 00:51:57.520
the user clicks on those buttons.

00:51:57.750 --> 00:51:59.700
So I just need to listen
for those commands.

00:51:59.700 --> 00:52:03.700
So let's go ahead and wire
up that functionality.

00:52:03.700 --> 00:52:06.640
Okay,
so what I need to do here is include

00:52:06.670 --> 00:52:09.180
another header for the prototype.

00:52:11.340 --> 00:52:15.200
I've got a handler already written.

00:52:15.200 --> 00:52:18.000
And I'm just going to make sure
to install that on my window

00:52:18.000 --> 00:52:21.600
after I've set up the layout
and before I show the window.

00:52:27.300 --> 00:52:31.200
Now let's take a look at that handler.

00:52:31.310 --> 00:52:34.200
Actually, before I show you the handler,
let me show you something else.

00:52:34.200 --> 00:52:37.650
I've already defined some constants
that represent those same commands

00:52:37.650 --> 00:52:39.770
that I associated with the button,
and I'll be using those a

00:52:39.770 --> 00:52:41.200
little bit later on in the code.

00:52:41.200 --> 00:52:43.270
So here's my,
it's a little wrapper routine

00:52:43.270 --> 00:52:46.200
that shows you how to install
an event handler on a window.

00:52:46.200 --> 00:52:50.080
I built up one of those event type specs,
which is a list of all the

00:52:50.080 --> 00:52:52.030
events I want to handle.

00:52:52.300 --> 00:52:54.190
In this case,
I only want to handle one event.

00:52:54.240 --> 00:53:01.200
It's an event of class
KEVENT_PROSESS_COMMAND.

00:53:01.200 --> 00:53:04.200
This is the event that gets sent out
when a command is chosen from something.

00:53:04.200 --> 00:53:06.790
And then I install my
handler on the window,

00:53:06.790 --> 00:53:11.200
and the handler looks an awful lot
like the code you just saw from David.

00:53:11.310 --> 00:53:14.190
If I get one of these events,
the KEVENT_CLASS_COMMAND,

00:53:14.190 --> 00:53:17.600
KEVENT_PROSESS_COMMAND events,
I need to extract this

00:53:17.710 --> 00:53:20.150
HICOMMAND structure that describes
things about the command.

00:53:20.210 --> 00:53:22.200
It tells you specifically
what that command is.

00:53:22.200 --> 00:53:24.200
It tells you what the command ID is,
as well as some information about

00:53:24.200 --> 00:53:25.200
where the command came from.

00:53:25.200 --> 00:53:27.200
So you can find out if
it came from a menu,

00:53:27.200 --> 00:53:30.200
and if so, which menu item,
should you need to know that.

00:53:30.200 --> 00:53:33.200
In my particular case,
I don't need to know any of that.

00:53:33.200 --> 00:53:36.200
So I just switch on the
command ID that comes in.

00:53:36.220 --> 00:53:39.200
And right now,
I've got some stubbed out functionality,

00:53:39.200 --> 00:53:43.200
but just for this demo real quick here,
I'm going to beep whenever the user

00:53:43.200 --> 00:53:45.200
chooses the previous or next image.

00:53:45.200 --> 00:53:49.430
So let's go ahead and build and run.

00:53:50.300 --> 00:53:52.340
and hopefully we've got
volume on on this machine.

00:53:52.340 --> 00:53:54.540
Uh-oh,
I don't know if the volume's turned on.

00:53:54.540 --> 00:53:56.760
Okay, there we go.

00:53:56.760 --> 00:53:58.890
Yeah,
so you can hear this is beep working.

00:53:58.900 --> 00:54:00.420
That's not a whole lot
of great functionality.

00:54:00.420 --> 00:54:02.740
I'll actually show you how to put
some real functionality behind

00:54:02.740 --> 00:54:06.190
this in a few minutes after
David goes over some other features.

00:54:07.770 --> 00:54:09.690
Thank you, Guy.

00:54:09.770 --> 00:54:13.980
So you can see that it's very easy to
install an event handler to take care

00:54:15.000 --> 00:54:16.380
of the events that you care about.

00:54:16.420 --> 00:54:19.980
In this case, it was some commands,
handling commands.

00:54:21.010 --> 00:54:24.250
Next I just want to touch on,
we're not really going to use

00:54:24.250 --> 00:54:27.210
alerts in our demo application,
I just want to touch on alerts

00:54:27.210 --> 00:54:29.200
and when you should use them.

00:54:29.200 --> 00:54:30.090
So what are they?

00:54:30.200 --> 00:54:33.400
They're a way of intercepting,
interrupting the user to tell

00:54:33.400 --> 00:54:35.100
them something important.

00:54:35.200 --> 00:54:36.390
You've seen them before.

00:54:36.500 --> 00:54:39.230
So you can inform the user
of errors or warnings or bad

00:54:39.240 --> 00:54:43.340
things that have happened,
maybe good things that have happened.

00:54:43.460 --> 00:54:45.530
When should you use them?

00:54:45.640 --> 00:54:48.460
Well you should use them
when it's important enough to

00:54:48.460 --> 00:54:50.210
interrupt the user's workflow.

00:54:50.510 --> 00:54:52.470
with something that they need to address.

00:54:52.500 --> 00:54:54.440
There's two different kinds of alerts.

00:54:54.440 --> 00:54:57.000
You get standard alerts,
which come up in a dialogue,

00:54:57.080 --> 00:54:59.390
as you see on the top there,
and that interrupts the

00:54:59.970 --> 00:55:01.100
application application-wide.

00:55:01.100 --> 00:55:03.850
That means that the user can't
use the application anymore

00:55:03.850 --> 00:55:06.740
until they address the alert
that's come up in front of them.

00:55:06.740 --> 00:55:09.320
You want to do that with
something that's important.

00:55:09.320 --> 00:55:12.550
Say they quit the application and
they have multiple open documents.

00:55:12.670 --> 00:55:15.210
You want to interrupt the
whole application and say,

00:55:15.210 --> 00:55:18.440
"Hey, you don't want to quit until
you've saved all your hard work.

00:55:18.440 --> 00:55:19.770
You're going to lose it."

00:55:20.450 --> 00:55:24.220
There's also sheet alerts,
and these don't interrupt

00:55:24.220 --> 00:55:27.300
the application,
the user application-wide.

00:55:27.300 --> 00:55:29.310
They interrupt the user
just on a per-window basis.

00:55:29.420 --> 00:55:33.260
So they come up out of a sheet,
maybe out of a document window,

00:55:33.440 --> 00:55:37.290
and interrupt that one window and give
information about that one window.

00:55:37.290 --> 00:55:40.310
So say a user is just going to close
a window that they had modified,

00:55:40.420 --> 00:55:42.630
you can have a sheet alert
come out of there and say,

00:55:42.630 --> 00:55:45.060
"Hey,
you've changed things in this document.

00:55:45.060 --> 00:55:48.330
You're going to lose them if you
just close it without saving."

00:55:50.330 --> 00:55:53.550
Using standard alerts
is very straightforward.

00:55:53.650 --> 00:55:55.300
There's an API called
CreateStandardAlert.

00:55:55.300 --> 00:55:57.200
You pass in the alert type.

00:55:57.320 --> 00:56:00.170
You can give it a string for
what kind of error has happened,

00:56:00.290 --> 00:56:04.020
and you can give a little
explanation about that error.

00:56:05.260 --> 00:56:08.270
There's a few settings that you
can set up in a param block.

00:56:08.270 --> 00:56:09.200
I'm not really going to cover that.

00:56:09.200 --> 00:56:12.360
You can read about it in dialogs.h.

00:56:12.750 --> 00:56:16.390
And what comes out as a standard alert?

00:56:16.400 --> 00:56:20.310
What comes out as a dialogue
ref to the standard alert?

00:56:20.540 --> 00:56:24.020
Which you can then pass to the next API,
RunStandardAlert,

00:56:24.020 --> 00:56:27.610
where you pass in the alert dialog
ref of the alert you've just created.

00:56:27.640 --> 00:56:30.800
And that will block the
application and won't return

00:56:30.800 --> 00:56:32.810
until the user's dealt with that.

00:56:33.100 --> 00:56:38.370
The first step is to create a dialog.

00:56:38.370 --> 00:56:47.410
The dialog is a set of standard
ones that are listed in dialogs.h

00:56:47.420 --> 00:56:55.820
that you can use to determine
how that dialog was dismissed,

00:56:55.820 --> 00:57:03.050
and then you can take the
right course of action.

00:57:04.620 --> 00:57:07.740
Here's an example of them in use.

00:57:07.770 --> 00:57:12.170
So I'm creating a stop alert because
I can't save because a file is

00:57:12.170 --> 00:57:14.100
locked and I can't override it.

00:57:14.100 --> 00:57:18.090
So I just use createStandardAlert
to do that and I run standard alert,

00:57:18.100 --> 00:57:20.910
an interruption comes up,
a dialog that contains that

00:57:20.910 --> 00:57:24.340
message with maybe an OK button,
that's all I care about.

00:57:24.340 --> 00:57:27.870
I run the standard alert and when
it comes back the only way they can

00:57:27.870 --> 00:57:30.260
dismiss it is by clicking the OK button.

00:57:30.260 --> 00:57:34.190
My part hit will indicate that
the OK button was clicked.

00:57:36.930 --> 00:57:40.500
Using alert sheets is very similar.

00:57:40.510 --> 00:57:43.020
You pass in the alert type and
the error and the explanation.

00:57:43.020 --> 00:57:47.360
Everything is exactly the same except
you also pass in a notify target.

00:57:47.360 --> 00:57:52.960
This is important because you're
not going to stop the application

00:57:53.050 --> 00:57:55.080
and block it application-wide.

00:57:55.080 --> 00:57:56.700
You're only going to
interrupt one window.

00:57:56.700 --> 00:58:00.140
So you want to pass in a target that's
going to get events from this sheet

00:58:00.140 --> 00:58:04.980
that comes up to let your application
know when it's been dealt with.

00:58:04.980 --> 00:58:08.780
So most of the time you'll
pass the window target of the

00:58:08.780 --> 00:58:11.450
window that's being interrupted.

00:58:12.400 --> 00:58:17.850
And what you'll get out of that
is a dialog ref to the standard

00:58:17.910 --> 00:58:20.740
alert sheet that is created.

00:58:22.830 --> 00:58:25.940
To show this sheet,
use the ShowSheetWindow.

00:58:25.940 --> 00:58:26.700
It's another API.

00:58:26.700 --> 00:58:29.650
You'll notice, though,
that it takes as its parameter

00:58:29.880 --> 00:58:32.570
in sheet is a window ref.

00:58:32.760 --> 00:58:36.930
We've been using dialog refs for
standard sheets up until now,

00:58:37.080 --> 00:58:40.010
and it's kind of a little bit of a
legacy workaround where you have to

00:58:40.090 --> 00:58:41.770
get the window out of the dialog ref.

00:58:41.920 --> 00:58:44.330
I'll show that in a second here.

00:58:44.990 --> 00:58:46.900
So here's an example of
using a standard sheet.

00:58:46.900 --> 00:58:48.110
It's a stop alert that comes up.

00:58:48.250 --> 00:58:51.180
There's a very similar
message to what I used before.

00:58:51.250 --> 00:58:53.700
Can't save that file
because the file is locked.

00:58:53.850 --> 00:58:56.290
But in this case I'm passing
a notification target,

00:58:56.290 --> 00:58:59.340
and that's who's going to receive
events when things happen to the sheet.

00:58:59.470 --> 00:59:01.990
So I get window event
target of my window,

00:59:01.990 --> 00:59:06.710
and that's the window that's being
interrupted by this standard sheet.

00:59:07.140 --> 00:59:09.720
I get that sheet back as a dialog ref.

00:59:09.790 --> 00:59:11.960
And then I need to pass a
window ref to show sheet window,

00:59:11.960 --> 00:59:15.160
so I get dialog window from that sheet.

00:59:16.100 --> 00:59:21.700
and that brings up the sheet and then
your application will then continue.

00:59:21.730 --> 00:59:25.140
And you'll only get notifications
about that sheet closing later on as

00:59:25.140 --> 00:59:29.850
events coming into your event target,
in this case your window event target.

00:59:33.310 --> 00:59:35.480
Another way that you will
kind of need to interrupt to

00:59:35.540 --> 00:59:37.090
interact with the user is files.

00:59:37.250 --> 00:59:38.740
It's a very, very common one.

00:59:38.740 --> 00:59:40.700
Users are doing all kinds
of things with files.

00:59:40.700 --> 00:59:43.170
You want them to be able to
select files and folders,

00:59:43.210 --> 00:59:45.000
maybe select save destinations.

00:59:45.100 --> 00:59:49.770
And to do this,
you want to use navigation services.

00:59:49.840 --> 00:59:50.700
It does all the work for you.

00:59:50.700 --> 00:59:53.040
You don't have to worry about how the
file system looks or where everything's

00:59:53.120 --> 00:59:54.200
laid out or anything like that.

00:59:54.200 --> 00:59:58.550
You just call the APIs and it'll do all
of the open save panel stuff for you.

00:59:58.660 --> 00:59:59.490
Users are very used to it.

00:59:59.570 --> 01:00:00.200
They know how to use it.

01:00:00.200 --> 01:00:03.590
And you're providing a user
interface that they're used to.

01:00:04.320 --> 01:00:07.270
Good thing about this is that
when Navigation Services revs,

01:00:07.280 --> 01:00:09.600
like it did for Panther,
you might have noticed,

01:00:09.750 --> 01:00:12.680
you get all these improvements
for free in your application.

01:00:12.680 --> 01:00:17.480
So everybody that was using Navigation
Services got the new Open and

01:00:17.500 --> 01:00:21.220
Save panels system-wide for Panther.

01:00:21.690 --> 01:00:24.460
It's also very customizable,
so if you need to do something special,

01:00:24.510 --> 01:00:29.690
like have a pop-up box to select a kind
or some check boxes for some settings,

01:00:29.700 --> 01:00:34.270
you can add that to
Navigation Services easily.

01:00:35.710 --> 01:00:38.890
If you're not doing any customization,
it's very straightforward

01:00:38.890 --> 01:00:40.400
to use navigation services.

01:00:40.460 --> 01:00:44.400
In fact, I'd say it's pretty easy,
although the API looks a bit daunting.

01:00:44.560 --> 01:00:47.880
So say you want to choose a file,
nav choose file.

01:00:48.800 --> 01:00:51.300
You can specify a whole
bunch of parameters,

01:00:51.300 --> 01:00:53.690
and I encourage you to go to
Navigation Services Framework,

01:00:53.690 --> 01:00:55.630
navigation.h, and read about them.

01:00:55.820 --> 01:00:57.940
But in general,
unless you're doing some customization,

01:00:58.070 --> 01:00:59.330
you don't really care about those.

01:00:59.460 --> 01:01:01.800
You'll notice that they're all
documented down the right-hand

01:01:02.050 --> 01:01:03.190
side as being able to be null.

01:01:03.230 --> 01:01:07.130
So if you pass null for all of them,
you'll get the standard

01:01:07.130 --> 01:01:09.720
behavior of Navigation Services.

01:01:11.930 --> 01:01:14.990
In fact, all I really care about
is the reply coming out.

01:01:15.010 --> 01:01:17.810
That's the most important thing,
because that tells you what the user

01:01:17.810 --> 01:01:19.540
selected or that they have selected.

01:01:19.680 --> 01:01:21.140
NavChoose folder is very similar.

01:01:21.140 --> 01:01:23.910
Again, you can see there's a whole
bunch of different parameters,

01:01:24.030 --> 01:01:25.970
but the only real important
one to you is reply,

01:01:26.150 --> 01:01:28.680
unless you want to do some customization.

01:01:30.810 --> 01:01:32.930
So here's Navigation Services in action.

01:01:33.060 --> 01:01:34.540
I use navchoose folder.

01:01:34.540 --> 01:01:37.300
I'm passing null for all the
parameters except for the reply,

01:01:37.300 --> 01:01:40.680
which I'm passing in as a
pointer to a navreply record.

01:01:41.050 --> 01:01:45.690
After that returns, I check to see if the
reply was a valid record,

01:01:45.690 --> 01:01:48.390
if the user actually selected something.

01:01:48.460 --> 01:01:53.800
And then, because the reply can
contain a lot of information,

01:01:53.800 --> 01:01:58.790
like multiple selections,
etc., we use Apple Events to extract

01:01:58.790 --> 01:02:02.930
the selection out of the returned reply.

01:02:02.940 --> 01:02:15.680
And it's pretty straightforward.

01:02:15.680 --> 01:02:15.680
So you use aegit nth pointer,
you pass in the selection from the reply,

01:02:15.680 --> 01:02:15.680
you tell it you only want one thing
and you're interested in fsref,

01:02:15.680 --> 01:02:15.680
and you can get out your folder ref.

01:02:16.860 --> 01:02:19.620
So let's bring Guy back,
and he'll show you how to use one

01:02:19.620 --> 01:02:21.620
of those APIs in the application.

01:02:21.660 --> 01:02:24.120
Okay,
so a picture viewer is not very good

01:02:24.140 --> 01:02:27.590
unless I can provide the user a way
to choose some pictures to view.

01:02:27.650 --> 01:02:29.800
So I'm going to add that
sort of functionality.

01:02:29.800 --> 01:02:36.700
But I need to add another button to
my nib here so that the user can...

01:02:37.600 --> 01:02:39.360
"So let's add another button.

01:02:39.360 --> 01:02:44.200
Let's call it, I don't know, set folder.

01:02:44.240 --> 01:02:48.670
Make it a little bit
bigger so it looks nice.

01:02:48.670 --> 01:02:48.670
And, uh, let's add a button.

01:02:51.400 --> 01:02:55.400
Now, in order to react to a
click in this button,

01:02:55.400 --> 01:02:57.220
I need to give it a command.

01:02:57.240 --> 01:02:59.270
So we'll do that.

01:03:02.480 --> 01:03:05.530
and to show off the power
of commands a little bit,

01:03:05.580 --> 01:03:07.510
let's also modify our menu bar.

01:03:07.710 --> 01:03:09.000
Why don't we skip the menu for now?

01:03:09.000 --> 01:03:10.000
We're running short on time.

01:03:10.000 --> 01:03:11.000
Oh, we're running short on time?

01:03:11.000 --> 01:03:12.000
Oh, indeed we are.

01:03:12.000 --> 01:03:12.860
Okay,
so I could put that command in the menu

01:03:12.860 --> 01:03:14.100
bar and invoke it that way as well.

01:03:14.100 --> 01:03:16.600
But for now,
we'll just put it in the button here.

01:03:16.600 --> 01:03:18.400
Okay, so we're saved.

01:03:18.400 --> 01:03:21.160
The next thing I need to do -- so
I don't want to really worry myself

01:03:21.230 --> 01:03:24.700
about the various image formats that
there are on Mac OS that we support.

01:03:24.700 --> 01:03:28.280
I'm going to let QuickTime deal with
that because it does it very well.

01:03:28.430 --> 01:03:31.700
So what I need to do here
is add another framework,

01:03:31.760 --> 01:03:35.420
QuickTime framework to my project.

01:03:41.100 --> 01:03:50.600
[Transcript missing]

01:03:51.120 --> 01:03:53.700
Those sys beeps I put in place and
put the real functionality behind

01:03:53.700 --> 01:03:56.370
the previous and next buttons.

01:04:00.730 --> 01:04:03.400
And so you'll also see that
I handle a third command in the

01:04:03.400 --> 01:04:07.230
handler I already showed you,
which handles the set folder button.

01:04:07.560 --> 01:04:10.550
Now, my code I've already written for
set folder just uses that nav

01:04:10.620 --> 01:04:13.400
choose folder API exactly the way
David showed you up there before.

01:04:13.400 --> 01:04:16.440
So we'll just build and run this.

01:04:16.930 --> 01:04:18.170
Click Set Folder.

01:04:18.170 --> 01:04:20.020
Up comes the Nav dialog.

01:04:20.020 --> 01:04:21.330
And now I'm browsing some pictures.

01:04:21.400 --> 01:04:24.100
And I react to that as the user
clicks the Next and Previous button.

01:04:24.100 --> 01:04:28.100
So I did all that just by installing one
Carbon Event Handler and building my nib.

01:04:28.100 --> 01:04:30.020
Now that's cool,
but not every application

01:04:30.100 --> 01:04:33.490
can just use these standard
views that we already provide.

01:04:33.600 --> 01:04:35.840
A lot of applications need
their own custom views,

01:04:35.940 --> 01:04:37.100
and I'd like one as well.

01:04:37.100 --> 01:04:39.100
I'd like this interface
to be a little bit better.

01:04:39.100 --> 01:04:41.020
I'd like to kind of show previews,
if you will,

01:04:41.110 --> 01:04:45.060
of all the images-- of the images
in the folder that I'm browsing.

01:04:45.150 --> 01:04:46.540
So I'll add that very quickly.

01:04:46.740 --> 01:04:48.600
Reopen my nib.

01:04:48.600 --> 01:04:50.700
Let's grow the window
a little bit bigger.

01:04:50.920 --> 01:04:52.650
And--oops.

01:04:52.650 --> 01:04:54.650
There we go.

01:04:56.600 --> 01:05:01.720
I'm going to throw a user pane in place,
just sort of as a placeholder.

01:05:01.720 --> 01:05:04.600
And my code goes in and replaces
this with my actual view.

01:05:04.600 --> 01:05:07.470
Put that in the right spot.

01:05:08.070 --> 01:05:11.940
Let's give him the... Oh,
I'm trying to remember my command.

01:05:11.940 --> 01:05:13.500
Ah, yes.

01:05:13.500 --> 01:05:15.940
Give him the right signature
so I can find him later.

01:05:15.990 --> 01:05:17.840
And I don't actually need
to give him a command.

01:05:17.840 --> 01:05:19.810
I think you should give it a command.

01:05:19.840 --> 01:05:21.840
You think I should give it a command?

01:05:21.930 --> 01:05:22.600
Okay, let's give it a command.

01:05:22.600 --> 01:05:23.840
Oh,
David knows we should give it a command.

01:05:23.840 --> 01:05:26.300
That means we must.

01:05:28.380 --> 01:05:30.340
All right,
and so my code's already been modified,

01:05:30.340 --> 01:05:31.200
actually, to deal with that.

01:05:31.260 --> 01:05:34.640
So all I need to do is rebuild
and rerun the application

01:05:34.640 --> 01:05:37.540
and choose another folder.

01:05:37.540 --> 01:05:38.500
Let's do this one.

01:05:38.500 --> 01:05:40.630
And all of a sudden, hey,
I can see myself,

01:05:40.720 --> 01:05:43.540
and I get previews of myself as well,
and I can scroll around and react

01:05:43.540 --> 01:05:45.090
to the next and previous buttons.

01:05:45.170 --> 01:05:47.950
These are images from last year's demo,
so they just happen to

01:05:47.960 --> 01:05:49.050
have these previews.

01:05:49.130 --> 01:05:49.620
So that's it.

01:05:49.620 --> 01:05:51.300
That's pretty much straightforward stuff.

01:05:51.300 --> 01:05:54.060
We'll actually go into details
in the HIView in-depth session on

01:05:54.080 --> 01:05:55.380
how you can create a custom view.

01:05:55.380 --> 01:05:58.680
Not exactly this one that I showed here,
but something that's

01:05:58.680 --> 01:06:00.640
actually a lot cooler,
because this one here is

01:06:00.640 --> 01:06:01.420
actually fairly simple.

01:06:01.460 --> 01:06:05.610
So anyway, I'll hand it back over
to David to wrap up.

01:06:06.140 --> 01:06:06.870
Thank you, Guy.

01:06:06.870 --> 01:06:10.500
So finally we got some
functionality into the application.

01:06:10.500 --> 01:06:13.240
The end functionality that you're
going to add to your application,

01:06:13.240 --> 01:06:14.750
it's important.

01:06:14.750 --> 01:06:17.700
And you can kind of forget about
some of the user interface details.

01:06:17.760 --> 01:06:20.100
You didn't have to worry about
the window resizing and the

01:06:20.100 --> 01:06:21.500
window handling and all that.

01:06:21.590 --> 01:06:26.600
You got the full application by focusing
on the functionality of the application.

01:06:29.590 --> 01:06:32.000
So in summary,
it's hard to show you everything

01:06:32.000 --> 01:06:33.300
that's available in HIToolbox.

01:06:33.460 --> 01:06:36.110
We just want to give you a good start.

01:06:36.250 --> 01:06:40.700
So you want to use the new
HIToolbox to make a fully featured,

01:06:40.700 --> 01:06:45.300
full Mac OS X citizen
using C and C++ APIs.

01:06:45.760 --> 01:06:48.690
We want to use .nib files to
create a great user interface,

01:06:48.690 --> 01:06:52.600
but one that you don't have to really
worry about how it's all implemented,

01:06:52.620 --> 01:07:00.470
because you'll use Carbon Events and
you'll only pay attention to the

01:07:00.470 --> 01:07:01.760
events that you're interested
in to make your functionality,

01:07:01.760 --> 01:07:01.760
to make your great app.

01:07:02.860 --> 01:07:06.790
So I'd like to bring Xavier up to go
over some of the documentation that's

01:07:06.790 --> 01:07:10.500
available and the roadmap for other
sessions that relate to HIToolbox.

01:07:10.580 --> 01:07:11.970
Thank you.

01:07:18.100 --> 01:07:20.260
I apologize,
we've been running a little bit late,

01:07:20.260 --> 01:07:23.210
so we're going to try to go
quickly over the documentation so

01:07:23.230 --> 01:07:25.070
we have time for some questions.

01:07:25.190 --> 01:07:29.190
We have a bunch of documentation
available now for Carbon Events and

01:07:29.260 --> 01:07:30.100
HIView in general.

01:07:30.100 --> 01:07:32.800
I encourage you to go on the
ADC home where you'll see a list

01:07:32.800 --> 01:07:36.010
of the new documentation and all
the things that are available

01:07:36.120 --> 01:07:38.030
for doing C and C++ development.

01:07:38.100 --> 01:07:42.100
When you look for
documentation or sample code,

01:07:42.100 --> 01:07:45.210
check out HIToolbox first and
then go to the Carbon section,

01:07:45.210 --> 01:07:47.000
depending on what you want to find out.

01:07:48.810 --> 01:07:52.210
Some documentation as well is
available for like the human interface

01:07:52.220 --> 01:07:55.660
guidelines to help you design
great user experience on Mac OS X.

01:07:55.870 --> 01:08:00.600
And hopefully none of you need
the Carbon Porting Guide anymore.

01:08:02.700 --> 01:08:04.030
As I said, a lot of sample code.

01:08:04.030 --> 01:08:08.460
Look in the HI toolbox for
Mac OS X folder on the sample

01:08:08.460 --> 01:08:11.040
code in the Carbon folder,
and you see a bunch of

01:08:11.040 --> 01:08:12.000
things for like HIView.

01:08:12.100 --> 01:08:12.770
Pretty nice.

01:08:12.780 --> 01:08:15.250
And I encourage you to go,
which brings me again

01:08:15.250 --> 01:08:18.160
to the documentation,
and which is something actually

01:08:18.160 --> 01:08:22.270
the team wanted me to emphasize,
which is they've spent a lot of time

01:08:22.650 --> 01:08:26.140
actually documenting the headers
as much as possible as a first

01:08:26.370 --> 01:08:28.980
point of documentation for you guys.

01:08:29.000 --> 01:08:32.000
It doesn't replace, you know, of course,
real documentation,

01:08:32.000 --> 01:08:34.620
but I think it's a good start for you,
like, when you're looking for like

01:08:34.750 --> 01:08:36.550
what a Carbon event does,
a special Carbon event

01:08:36.550 --> 01:08:37.390
and things like that.

01:08:37.390 --> 01:08:39.940
So check the header files.

01:08:41.120 --> 01:08:45.450
One session, if you have custom controls
that you should really,

01:08:45.540 --> 01:08:48.300
really,
really go and see is the next one on

01:08:48.300 --> 01:08:54.600
the third floor in the Presidio room
where actually Ed will be talking about

01:08:54.600 --> 01:08:59.970
HIView and we're going to give you,
we have very cool demos where

01:09:00.080 --> 01:09:01.450
we're going to show you on how to
implement your own custom HIView.

01:09:01.450 --> 01:09:01.450
Very nice, I encourage you to attend
that session of course.