WEBVTT

00:00:26.690 --> 00:00:28.600
Good morning.

00:00:28.720 --> 00:00:30.880
Today, basically, as Brett said,
we're going to talk about how to get

00:00:30.970 --> 00:00:32.750
data in and out of Final Cut Pro.

00:00:32.870 --> 00:00:36.410
And really this discussion
focuses a lot on project data

00:00:36.430 --> 00:00:39.850
formats and media data formats,
how to make everything tie together

00:00:40.260 --> 00:00:42.960
so that you can actually not only
work with Final Cut Pro and Apple's

00:00:42.970 --> 00:00:45.880
other professional applications,
but also build a set of tools that other

00:00:45.890 --> 00:00:49.200
people in the industry will find useful
to actually get production done and do

00:00:49.200 --> 00:00:53.990
things like high-end Hollywood films
and television production.

00:00:54.130 --> 00:00:57.620
Certainly, and also various strategies
for extending sort of directly

00:00:57.620 --> 00:00:59.720
Apple's professional applications.

00:00:59.760 --> 00:01:02.000
We're going to talk a lot
about specific project formats

00:01:02.050 --> 00:01:05.500
and media formats and again,
sort of what type of tools and

00:01:05.550 --> 00:01:07.500
some examples of some things,
solutions you might actually

00:01:07.500 --> 00:01:12.420
be able to build using these
things with your software.

00:01:12.480 --> 00:01:16.370
I'd like to start off talking about
project data and sort of begin the

00:01:16.370 --> 00:01:18.580
discussion with what is project data.

00:01:18.580 --> 00:01:20.760
It's sort of used different
terms in the industry.

00:01:20.770 --> 00:01:23.130
Avid will refer to things
like its compositions.

00:01:23.130 --> 00:01:25.220
Final Cut Pro will get
projects and sequences.

00:01:25.390 --> 00:01:27.540
If you go into a compositing application,
it might be a composite.

00:01:27.670 --> 00:01:30.260
Or if you go into Shake,
it might be a Shake script.

00:01:30.310 --> 00:01:34.510
And really what the key thing here is,
this is the data that your users or

00:01:34.510 --> 00:01:36.530
our users spend the most time creating.

00:01:36.710 --> 00:01:38.950
Certainly they'll capture media assets,
they'll get stills from

00:01:38.950 --> 00:01:40.860
the Photoshop artists,
they'll get music from

00:01:40.860 --> 00:01:41.690
their audio person.

00:01:41.850 --> 00:01:45.030
But they'll spend the most time in
software aligning these elements,

00:01:45.060 --> 00:01:47.080
putting them together, applying effects.

00:01:47.110 --> 00:01:48.990
And so this is what everyone focuses on.

00:01:49.220 --> 00:01:51.500
So in a certain perspective,
when you go out into the

00:01:51.500 --> 00:01:53.670
industry and talk about putting
new tools in people's hands,

00:01:53.700 --> 00:01:56.280
they get very emotional about this.

00:01:56.280 --> 00:01:57.660
They're spending this time
creating this and they want to

00:01:57.660 --> 00:02:00.000
make sure that they can keep it,
they can use it,

00:02:00.000 --> 00:02:02.120
and that they can move it
around if they need to.

00:02:02.120 --> 00:02:04.380
Of course,
since this is certainly the thing

00:02:04.510 --> 00:02:06.610
that people spend the most time on,
it's also the most unique

00:02:06.670 --> 00:02:08.120
between different applications.

00:02:08.120 --> 00:02:10.400
And so it's traditionally
been very difficult.

00:02:10.400 --> 00:02:13.400
There are some very basic formats that
have been around for a very long time.

00:02:13.410 --> 00:02:16.880
More attempts in this direction have
been made in the last few years.

00:02:16.880 --> 00:02:18.720
But it's not an easy process.

00:02:18.720 --> 00:02:21.330
And certainly a lot of the work we've
been doing for the last year or two has

00:02:21.380 --> 00:02:22.880
been to try and make this process easier.

00:02:24.690 --> 00:02:27.220
So we begin talking about some of
the legacy formats that some of you

00:02:27.220 --> 00:02:28.810
may or may not be familiar with.

00:02:28.920 --> 00:02:32.210
And a lot of these formats were designed
like 15 to 20 years ago and originated

00:02:32.210 --> 00:02:33.740
with a lot of hardware-based systems.

00:02:33.930 --> 00:02:36.510
Things where you would have a project,
you would have your show

00:02:36.510 --> 00:02:38.800
you're putting together,
and it would be, of all things,

00:02:38.800 --> 00:02:39.510
a floppy disk.

00:02:39.660 --> 00:02:44.110
Not quite back to paper-tape days,
but still pretty primitive.

00:02:44.490 --> 00:02:49.000
One of the lowest common denominator here
is what a lot of people call batchless.

00:02:49.180 --> 00:02:54.680
Really what a Batchless boils down to
is if I have a bunch of source footage,

00:02:54.700 --> 00:02:56.690
like on a videotape,
I'm going to have someone,

00:02:56.690 --> 00:02:58.870
the assistant editor,
maybe the DP for the day,

00:02:58.870 --> 00:03:01.370
sit down with a tape deck and
basically shuttle through that

00:03:01.410 --> 00:03:03.800
footage and write down the time,
the time codes,

00:03:03.800 --> 00:03:06.480
of the particular pieces of media,
the particular clips that we're going

00:03:06.480 --> 00:03:07.760
to want to use in our production.

00:03:07.980 --> 00:03:09.920
Just indexed by time code.

00:03:10.150 --> 00:03:13.960
When this moves off of pads
of paper in a digital realm,

00:03:13.960 --> 00:03:16.040
it's really just a delimited text file.

00:03:16.200 --> 00:03:18.200
So you'll have some time codes,
some name,

00:03:18.200 --> 00:03:21.300
maybe an identifier for the source tape,
and it's just stored in a

00:03:21.330 --> 00:03:22.530
plain text file on disk.

00:03:22.820 --> 00:03:25.310
The users actually love this,
and if you talk to film editors

00:03:25.310 --> 00:03:28.200
today or television editors,
they still use them all the time

00:03:28.200 --> 00:03:30.260
because it's just a text file.

00:03:30.600 --> 00:03:32.470
They can pull up TextEdit,
they can pull up Word,

00:03:32.580 --> 00:03:35.520
they can pull up Microsoft Excel and
change these numbers,

00:03:35.520 --> 00:03:37.340
and they're very comfortable
with that because they control

00:03:37.340 --> 00:03:38.400
exactly what's in there.

00:03:38.400 --> 00:03:41.200
And because it's a tabulated text file,
it's very easy to generate,

00:03:41.200 --> 00:03:41.920
very easy to parse.

00:03:41.920 --> 00:03:45.050
So pretty much any modern non-linear
editor at least in the prosumer and

00:03:45.210 --> 00:03:47.520
professional space will support these.

00:03:47.640 --> 00:03:49.490
But they're very limited.

00:03:49.620 --> 00:03:51.520
Here's a very basic
example of a batch list.

00:03:51.560 --> 00:03:54.800
And it's talking about before
just a tabulated text file with

00:03:54.800 --> 00:03:57.480
a first line with a header with
all this information on it.

00:03:57.520 --> 00:04:01.510
You see clip name, time code,
and real identification.

00:04:01.520 --> 00:04:03.910
And sort of moving beyond just
identifying pieces of media

00:04:03.910 --> 00:04:06.400
that one might work with,
you move to an EDL.

00:04:06.690 --> 00:04:08.570
Again,
this is designed for hardware-based

00:04:08.610 --> 00:04:12.560
systems of the past where you'd have a
huge bank of tape machines on one side,

00:04:12.580 --> 00:04:16.140
a record deck on the other, and monitors,
and you sort of queue everything up so

00:04:16.140 --> 00:04:17.080
that it would record at the same time.

00:04:17.080 --> 00:04:21.510
And just basic edits,
sort of an event-based model with

00:04:21.520 --> 00:04:23.080
times and effect identifiers.

00:04:23.080 --> 00:04:25.050
Although it's limited,
sort of two tracks of video,

00:04:25.110 --> 00:04:27.370
four tracks of audio,
a lot of this based on sort of

00:04:27.370 --> 00:04:29.070
switcher technology of the day.

00:04:29.080 --> 00:04:32.380
And sort of like batch lists,
a lot of users out in the field love

00:04:32.380 --> 00:04:36.170
this stuff to this day because you
can open one up in a text editor,

00:04:36.170 --> 00:04:39.080
and if you train your eye,
you know exactly what to look for.

00:04:39.080 --> 00:04:41.500
So if I put together an
hour-long show and it's just

00:04:41.510 --> 00:04:44.630
not going out to tape correctly,
I can open it up and fix it.

00:04:44.640 --> 00:04:47.640
It's a bit more difficult than
a simple batch list to parse,

00:04:47.640 --> 00:04:49.680
however,
because there's a lot of data in there,

00:04:49.680 --> 00:04:50.620
and there's also a lot
of different formats.

00:04:50.640 --> 00:04:52.180
Sort of everything started
with one or two de facto

00:04:52.240 --> 00:04:56.290
standards about 20 years ago,
but now you've got maybe about a

00:04:56.290 --> 00:05:00.620
dozen different sort of formats
for different manufacturers' gear,

00:05:00.950 --> 00:05:03.710
different tweaks for different hardware,
and even different

00:05:03.870 --> 00:05:05.640
effects processing gear.

00:05:05.900 --> 00:05:09.640
Here's a very simple EDL,
and as you compare the batch list,

00:05:09.640 --> 00:05:12.200
it's kind of frightening.

00:05:12.200 --> 00:05:15.040
A lot of time codes there,
comments for effect IDs,

00:05:15.490 --> 00:05:20.190
things like you compare a dissolve
with a D and a wipe with a W012.

00:05:20.200 --> 00:05:23.310
Not very friendly to parse to understand.

00:05:23.900 --> 00:05:25.980
So, sort of moving on,
Batchless and EDL sort of got

00:05:25.980 --> 00:05:27.300
more contemporary formats.

00:05:27.310 --> 00:05:30.430
And certainly 10 years ago,
beginning of the nonlinear

00:05:30.430 --> 00:05:33.580
digital revolution with Avid,
everyone saw that these formats

00:05:33.710 --> 00:05:35.800
really were lacking in a lot of ways.

00:05:35.970 --> 00:05:38.860
And so more contemporary formats
were created to go in their place

00:05:38.860 --> 00:05:41.780
and sort of address a lot of
capabilities of modern systems,

00:05:41.790 --> 00:05:44.490
things like, well,
you can go beyond two layers of

00:05:44.490 --> 00:05:46.800
video or you actually want to
get down to effect parameters.

00:05:46.800 --> 00:05:49.950
You might want to be doing things like
throwing a Gaussian blur where you're

00:05:49.950 --> 00:05:54.060
keyframing the amount of the blur over
time or doing that fuzz filter where

00:05:54.060 --> 00:05:55.800
you're fuzzing someone's frame out.

00:05:55.800 --> 00:05:57.990
But unfortunately,
due to when these--due to a

00:05:58.050 --> 00:06:00.310
lot of these efforts started,
these formats were

00:06:00.310 --> 00:06:01.800
generally binary formats.

00:06:01.800 --> 00:06:04.560
So you'd have some structured
storage model and you would

00:06:04.560 --> 00:06:07.800
encode all this in binary because
it was cheap and it was small.

00:06:07.840 --> 00:06:11.290
But at this disadvantage of now
a user or even a power user or a

00:06:11.330 --> 00:06:13.790
developer can't directly look at it.

00:06:13.810 --> 00:06:16.800
So you introduce a lot
of library requirements.

00:06:16.800 --> 00:06:18.800
And it's pretty complicated to generate.

00:06:18.800 --> 00:06:21.800
So if you look at some examples
we'll talk about in a moment,

00:06:21.990 --> 00:06:24.880
there will be sort of a small set of
tools out there to work with these files,

00:06:24.880 --> 00:06:28.800
but really not a community of
large general tools to do things.

00:06:28.800 --> 00:06:32.720
So the best known example of a
contemporary format would be OMF,

00:06:32.720 --> 00:06:36.700
object media format from Avid,
created when they actually tried to

00:06:36.700 --> 00:06:41.800
unify sort of audio and video products
about seven or eight years ago now.

00:06:41.800 --> 00:06:43.830
It was based around some
Apple standards at the time,

00:06:43.890 --> 00:06:44.800
OpenDoc and Bento.

00:06:44.940 --> 00:06:46.780
And actually sort of
describes for two models.

00:06:46.820 --> 00:06:49.800
So you have sort of what they
term a composition only OMF file,

00:06:49.800 --> 00:06:51.910
basically just a
description of your edit,

00:06:51.990 --> 00:06:55.800
your effects and the elements within,
versus a combined format

00:06:55.800 --> 00:06:57.770
where you actually store your
media all in one container.

00:06:58.200 --> 00:07:00.790
Really big file,
really hard to move around.

00:07:00.880 --> 00:07:02.710
Of course at this point
it's more or less abandoned.

00:07:02.830 --> 00:07:06.410
And part of that was Avid's move to
more of a cross-platform system and

00:07:06.410 --> 00:07:10.790
some issues with basically bringing
Bento libraries on different platforms.

00:07:10.800 --> 00:07:13.800
And really where it's used today a lot
is in audio post-production systems.

00:07:13.800 --> 00:07:15.280
And that you'll have Pro Tools,
one of the most popular nonlinear

00:07:15.280 --> 00:07:15.800
auto-editor audio systems.

00:07:15.800 --> 00:07:18.880
And I think there are a lot of
popular nonlinear audio editors today

00:07:18.880 --> 00:07:20.800
that actually still use that format.

00:07:22.390 --> 00:07:24.300
Moving on to the next slide.

00:07:24.310 --> 00:07:26.300
Moving forward from OMF,
in order to address this situation,

00:07:26.300 --> 00:07:29.490
the Advanced Authoring Forum was
founded four or five years ago by a

00:07:29.510 --> 00:07:33.300
consortium of companies including Avid,
Microsoft, and Adobe.

00:07:33.320 --> 00:07:35.680
Basically,
they tried to take the lessons from

00:07:35.850 --> 00:07:40.300
OMF and build a new format that still was
based around a binary container format,

00:07:40.300 --> 00:07:44.720
this time Microsoft Structured Storage,
but actually have it more be

00:07:44.720 --> 00:07:48.300
of an industry-standard format
so that you could take media

00:07:48.300 --> 00:07:51.300
and projects between different
applications and different systems.

00:07:51.880 --> 00:07:53.610
Unfortunately,
it was sort of a mixed success in

00:07:53.650 --> 00:07:56.690
that while a lot of the basics,
a lot of the elements that would be

00:07:56.690 --> 00:08:00.200
sort of the equivalent of an EDL made
it into the public specification,

00:08:00.330 --> 00:08:01.220
a lot of things really didn't.

00:08:01.310 --> 00:08:03.910
And those are all the really
interesting things today,

00:08:03.990 --> 00:08:07.060
things like layering information,
compositing information,

00:08:07.070 --> 00:08:08.300
filters and effects.

00:08:08.300 --> 00:08:12.230
A lot of this is sort of termed as
black metadata by people using AAF and

00:08:12.390 --> 00:08:16.310
where sort of one company will have
to find their own little black box

00:08:16.310 --> 00:08:20.300
inside of this open specification
so you really can't get to it.

00:08:20.300 --> 00:08:23.390
A lot of companies do support the
general version of the AAF standard,

00:08:23.440 --> 00:08:25.550
Avid, Quantel,
and Apple actually joined the

00:08:25.550 --> 00:08:28.310
Advanced Authoring Forum last
year and is working on AAF tools

00:08:28.310 --> 00:08:30.300
using the efforts of AutomaticDoc.

00:08:30.300 --> 00:08:31.270
Thank you.

00:08:31.300 --> 00:08:33.140
Thank you.

00:08:35.090 --> 00:08:38.100
So moving on to the future,
there's been a lot of movement,

00:08:38.130 --> 00:08:40.290
especially with the open source
movement the last few years,

00:08:40.470 --> 00:08:41.990
toward more open formats.

00:08:42.050 --> 00:08:46.570
AAF and OMF are really interesting,
but because of a lot of the issues,

00:08:46.690 --> 00:08:49.140
it's very difficult to join
the club of working with them.

00:08:49.370 --> 00:08:51.680
It might be a lot of effort
to use binary formats,

00:08:51.680 --> 00:08:54.520
there might be library issues
depending on the platform,

00:08:54.520 --> 00:08:56.440
and the whole black metadata problem.

00:08:56.750 --> 00:09:00.450
And sort of the key concept of a lot
of these formats has been open access,

00:09:00.690 --> 00:09:05.950
fully documented data, everything open,
no real issues with data access.

00:09:06.110 --> 00:09:09.510
And also trying sort of getting back
to the capabilities of batch lists and

00:09:09.510 --> 00:09:14.820
EDLs where a technical user could open
one up and see what's inside of it,

00:09:14.820 --> 00:09:17.690
and actually make changes,
or simply have some faith that

00:09:17.690 --> 00:09:21.260
this project that they spent a
month creating will actually be

00:09:21.590 --> 00:09:25.610
useful in another year if they move
their media to a different system.

00:09:25.740 --> 00:09:30.680
And also of course trying to minimize
platform and library requirements.

00:09:30.860 --> 00:09:33.220
And to address this,
we've actually come up with a format

00:09:33.260 --> 00:09:36.830
we're calling XML Interchange Format,
working on it for the last two years.

00:09:36.970 --> 00:09:39.930
And we introduced it,
announced it with Final Cut Pro 4,

00:09:40.160 --> 00:09:41.100
just uses XML.

00:09:41.350 --> 00:09:44.110
Everyone loves XML, it's easy to parse,
you can use it in pretty

00:09:44.140 --> 00:09:45.070
much any platform.

00:09:45.220 --> 00:09:47.950
And it's relatively self-documenting,
and there are a lot of

00:09:47.950 --> 00:09:48.980
tools out there to use it.

00:09:49.190 --> 00:09:53.220
And power users can open the thing up
in text editor or even a structured

00:09:53.220 --> 00:09:54.700
XML editor and make changes to the data.

00:09:54.700 --> 00:09:58.490
For our XML Interchange Format,
we've gone to a lot of effort

00:09:58.490 --> 00:10:01.900
to sort of try and make it
a superset of all formats.

00:10:01.900 --> 00:10:06.650
The goal is really to expose all of the
functionality inside of Final Cut Pro,

00:10:07.110 --> 00:10:10.700
sort of no black data,
no weird undocumented little hooks,

00:10:10.700 --> 00:10:12.200
and just open everything up.

00:10:12.430 --> 00:10:15.330
And a lot of this was the
goal of trying to be able to

00:10:15.330 --> 00:10:17.500
base other formats behind XML.

00:10:17.600 --> 00:10:22.680
So working with Automatic Duck,
we have import and export support to AAF,

00:10:22.690 --> 00:10:23.640
but going through XML in the middle.

00:10:23.700 --> 00:10:29.260
Since XML is a superset of what's at
least publicly available in AAF today,

00:10:29.480 --> 00:10:31.730
then it's relatively trivial
to do the translation and

00:10:31.730 --> 00:10:33.700
bring that in Final Cut Pro.

00:10:33.700 --> 00:10:37.560
The one issue that our XML format
does not address is the issue

00:10:37.730 --> 00:10:39.700
of embedded media transport.

00:10:39.700 --> 00:10:42.610
So the idea that I could
have one Mondo file,

00:10:42.760 --> 00:10:45.220
which certainly is easier
to move around today than it

00:10:45.220 --> 00:10:48.480
was seven or eight years ago,
but one container with my

00:10:48.480 --> 00:10:52.700
media and my composition
information in sort of one box.

00:10:52.700 --> 00:10:58.420
And we really didn't feel that that was
an important issue to address right now.

00:10:58.720 --> 00:11:01.310
Certainly there are a lot of different
workflows that that model does not

00:11:01.310 --> 00:11:02.700
necessarily meet everyone's needs.

00:11:02.700 --> 00:11:05.530
And it also tends to
make the cross-platform,

00:11:05.530 --> 00:11:08.690
cross-application issue
much more difficult.

00:11:08.760 --> 00:11:10.760
Different hardware,
different software may have

00:11:10.890 --> 00:11:13.700
different requirements for streaming
data or moving data around,

00:11:13.700 --> 00:11:18.900
and trying to sort of encapsulate it in
one standard can be rather difficult.

00:11:19.220 --> 00:11:22.280
Here's a very basic
example of an XML file.

00:11:22.280 --> 00:11:25.240
It's similar to something that
would have been defined in the

00:11:25.290 --> 00:11:26.100
Batch List example earlier.

00:11:26.100 --> 00:11:31.330
As you can see, it's content-based,
so the various keys are things that if

00:11:31.330 --> 00:11:34.870
one was familiar with an online editor,
they'd be familiar with: a clip,

00:11:34.870 --> 00:11:37.100
or a name, or a duration.

00:11:37.100 --> 00:11:41.100
And sort of multiple formats as well,
so if you look at timecode definition,

00:11:41.100 --> 00:11:44.420
you sort of have both frame
count and frame rate along with

00:11:44.780 --> 00:11:46.990
additional string defining that data.

00:11:47.100 --> 00:11:51.100
Now, of course,
Apple's not alone in -- oh, excuse me.

00:11:51.210 --> 00:11:52.960
There's actually one
slide that was missing.

00:11:53.380 --> 00:11:55.040
Actually, at the moment,
what I'd like to do is invite

00:11:55.040 --> 00:11:57.430
Harry Plate up to the stage to
show off tools that Automattic

00:11:57.440 --> 00:12:01.070
Deck has been building with us to
support AAF inside of Final Cut Pro.

00:12:01.230 --> 00:12:02.090
Very good.

00:12:02.150 --> 00:12:02.730
Okay.

00:12:02.800 --> 00:12:04.530
Thank you, David.

00:12:07.750 --> 00:12:10.640
Okay, make sure we're looking
at the same story here.

00:12:10.640 --> 00:12:12.800
First of all,
Automatic Duck came on the scene

00:12:12.800 --> 00:12:14.240
here just a couple years ago.

00:12:14.480 --> 00:12:17.770
My son and partner is a video editor
and got sick and tired of messing

00:12:17.860 --> 00:12:22.480
around with EDLs as he would move
his sequences and compositions

00:12:22.480 --> 00:12:26.070
from an Avid into After Effects,
and that was the product that we

00:12:26.070 --> 00:12:28.530
initially started out developing.

00:12:28.860 --> 00:12:31.890
What I've got here -- well, let's see,
in fact,

00:12:31.890 --> 00:12:35.110
we want to delete that because I want
to import the Chrysler example.

00:12:35.340 --> 00:12:41.480
Underneath literally the import menu,
you'll see a pick that allows us to bring

00:12:41.480 --> 00:12:44.000
up a dialog that allows you to select.

00:12:44.000 --> 00:12:45.880
In this case,
I'm going to grab a Chrysler

00:12:45.880 --> 00:12:47.050
example and an AAF file.

00:12:47.200 --> 00:12:51.200
Again, this was a short commercial piece
that was done a long time ago.

00:12:51.200 --> 00:12:56.190
This process opens an AAF file,
parses it,

00:12:56.300 --> 00:12:58.200
now goes off and searches for footage.

00:12:58.200 --> 00:13:01.200
By the way, this footage now is
represented by OMF files.

00:13:01.200 --> 00:13:05.050
This entire sequence being
created by an Avid Symphony.

00:13:05.200 --> 00:13:08.600
I think it was about two years ago,
it's been one of our favorite

00:13:08.600 --> 00:13:10.180
examples to test things.

00:13:10.200 --> 00:13:12.130
So it's fairly straightforward.

00:13:12.200 --> 00:13:13.170
We create an XML.

00:13:13.300 --> 00:13:16.200
The XML now is being read by Final Cut.

00:13:16.330 --> 00:13:20.200
And we should see a Chrysler example
now up here in that project window.

00:13:20.200 --> 00:13:21.180
And we'll open that up.

00:13:21.200 --> 00:13:24.200
And sure enough,
here's all that metadata.

00:13:24.200 --> 00:13:25.200
We had a couple of audio clips.

00:13:25.200 --> 00:13:29.200
Let's make this thing look
a little more... attractive.

00:13:29.200 --> 00:13:31.200
We'll fit it, show you some more.

00:13:31.200 --> 00:13:32.200
Some more information.

00:13:32.200 --> 00:13:35.130
There's markers, dissolves, video, etc.

00:13:35.200 --> 00:13:40.420
And this is something that when we
did this manually some years ago,

00:13:40.420 --> 00:13:43.920
this took an editor four hours
to reconstruct in order to

00:13:43.930 --> 00:13:45.200
get all of the time codes,
etc.

00:13:45.200 --> 00:13:47.200
done correctly.

00:13:47.200 --> 00:13:48.110
So fairly straightforward.

00:13:48.230 --> 00:13:51.200
Again, you open an AAF file.

00:13:51.390 --> 00:13:55.190
Through the magic of
Microsoft COM and a binary library,

00:13:55.200 --> 00:13:57.200
you may or may not succeed
in getting everything.

00:13:57.200 --> 00:14:00.200
But... It's a challenge.

00:14:00.200 --> 00:14:02.120
You track down all the metadata.

00:14:02.220 --> 00:14:03.180
You track down all the media.

00:14:03.260 --> 00:14:05.200
You open up OMF files.

00:14:05.200 --> 00:14:10.200
We reconstruct QuickTime reference
movies so that we don't move any video.

00:14:10.200 --> 00:14:13.150
So the reference movies are very fast.

00:14:13.270 --> 00:14:16.130
And then ultimately Final Cut is
able to import that.

00:14:16.230 --> 00:14:20.200
And the entire description, of course,
is passed via XML.

00:14:20.670 --> 00:14:21.060
Now...

00:14:22.530 --> 00:14:24.900
The opposite case is
fairly straightforward.

00:14:24.900 --> 00:14:29.310
I can take that same example and
I can turn around and export it.

00:14:30.110 --> 00:14:34.920
We'll just drop that thing out
there and now we take that XML.

00:14:34.920 --> 00:14:36.360
Well, let's see, we better replace that.

00:14:36.360 --> 00:14:38.510
We don't want that one anymore.

00:14:40.350 --> 00:14:43.000
Reconstruct an AAF file based
on that XML description.

00:14:43.190 --> 00:14:43.960
Fairly straightforward.

00:14:43.960 --> 00:14:45.540
In this case, it comes back and says,
"Hey, wait a minute.

00:14:45.540 --> 00:14:49.800
You've got some effects there that we
can't represent in AAF." And that's fine.

00:14:49.800 --> 00:14:55.070
Our documentation will fully tell
you exactly what you're doing wrong.

00:14:57.140 --> 00:15:00.710
So let's see, I grabbed the wrong one,
but we don't need Internet Explorer.

00:15:00.710 --> 00:15:05.850
But we do want After Effects.

00:15:05.850 --> 00:15:12.200
And we'll find a site of After Effects as
soon as I close down that.

00:15:16.100 --> 00:15:18.050
This is a simple import
process yet again.

00:15:18.100 --> 00:15:24.290
And I can grab that Chrysler example,
import it.

00:15:24.560 --> 00:15:27.680
And it's the same process now
in the Adobe After Effects world

00:15:27.680 --> 00:15:31.420
where you open up this file,
parse it, grabbing all of the media

00:15:31.420 --> 00:15:34.600
references as necessary,
using them directly in the case

00:15:34.600 --> 00:15:37.460
from Final Cut because we already
have the QuickTime movies.

00:15:37.600 --> 00:15:42.150
And we create a composition,
again just a different nomenclature,

00:15:42.150 --> 00:15:45.350
no longer a sequence as
in the Final Cut world but

00:15:45.600 --> 00:15:47.790
something slightly different.

00:15:48.070 --> 00:15:52.910
Now, a timeline in the Final Cut world
is quite different.

00:15:53.500 --> 00:16:01.120
They show layers each on a separate
horizontal row versus the timeline that

00:16:01.120 --> 00:16:02.800
you might be used to inside a Final Cut.

00:16:02.870 --> 00:16:05.850
But nonetheless,
people like to finish inside of

00:16:05.850 --> 00:16:09.590
After Effects for a variety of reasons,
whether it be the effects,

00:16:09.620 --> 00:16:11.270
the color correction, or whatever.

00:16:11.520 --> 00:16:15.680
But again, I emphasize,
XML is under the covers.

00:16:15.790 --> 00:16:18.470
And the ability now
to get into Final Cut,

00:16:18.500 --> 00:16:21.520
of course,
we've had customers for a long time

00:16:21.520 --> 00:16:23.680
crying for that kind of capability.

00:16:23.770 --> 00:16:29.060
So it gives Final Cut now a tremendous
edge now in the complete workflow

00:16:29.170 --> 00:16:32.070
of any post-production facility.

00:16:32.200 --> 00:16:33.200
That's it.

00:16:33.430 --> 00:16:34.970
Back to you.

00:16:38.140 --> 00:16:38.540
Thank you, Harry.

00:16:38.540 --> 00:16:42.040
It's a very powerful example
of these sorts of tools.

00:16:42.040 --> 00:16:44.450
But sort of talk about maybe
what other people have done in

00:16:44.450 --> 00:16:47.580
the industry surrounding XML,
because certainly it's not a new format.

00:16:47.580 --> 00:16:48.460
It's not a new idea.

00:16:48.460 --> 00:16:51.270
Actually, excuse me, wrong slide.

00:16:51.290 --> 00:16:53.920
A little bit more detail on
our XML interchange format.

00:16:53.920 --> 00:16:56.450
Sort of the big question that
we've gotten since NAB of this

00:16:56.450 --> 00:16:59.170
year when we announced XML is
when will it be available?

00:16:59.200 --> 00:17:03.700
Well, today we have a public beta
available on the WWDC site.

00:17:03.700 --> 00:17:06.350
Simply go to
connect.apple.com and log in.

00:17:07.400 --> 00:17:11.640
And it's an early build, but shows up,
gives you import and export

00:17:11.640 --> 00:17:13.240
XML commands inside of Final Cut Pro.

00:17:13.240 --> 00:17:16.460
Documentation there on the format.

00:17:16.460 --> 00:17:17.650
Again, preliminary stuff.

00:17:17.840 --> 00:17:20.780
We'll be updating it on a
regular basis until we hopefully

00:17:21.010 --> 00:17:22.100
release it later this year.

00:17:22.100 --> 00:17:26.860
And we're also basing a new
plugin API on this data format.

00:17:26.860 --> 00:17:30.860
Certainly the commands that Harry was
able to use with his software

00:17:30.860 --> 00:17:33.910
were written using this new API,
and we'll be getting that out

00:17:33.910 --> 00:17:34.940
to you as soon as possible.

00:17:34.940 --> 00:17:37.270
But more importantly,
sort of one thing that we've

00:17:37.270 --> 00:17:37.400
done is we've been able to
do a lot of work on this.

00:17:37.480 --> 00:17:39.300
One point to emphasize is we
really want your feedback.

00:17:39.300 --> 00:17:42.540
We've been working on
this for a long time.

00:17:42.540 --> 00:17:45.110
We've talked to a great deal of
people in the industry about that.

00:17:45.180 --> 00:17:48.160
Another gentleman I'll actually bring up
here in a few minutes that has another

00:17:48.160 --> 00:17:49.820
sort of compelling tool based on this.

00:17:49.820 --> 00:17:54.340
But we really want to hear what you think
is missing or what can be done better,

00:17:54.340 --> 00:17:55.510
or sort of what your needs are.

00:17:55.560 --> 00:17:59.120
There may be various workflow scenarios
or various tools that you want to

00:17:59.210 --> 00:18:00.380
build that we just haven't thought of.

00:18:00.500 --> 00:18:02.780
And any of that feedback
is incredibly valuable.

00:18:02.780 --> 00:18:07.360
And we will be releasing this in a
final form to end users and developers.

00:18:07.360 --> 00:18:09.360
by the end of this year.

00:18:09.800 --> 00:18:45.500
[Transcript missing]

00:18:46.210 --> 00:18:50.010
Some strategies for your
application should you want to

00:18:50.290 --> 00:18:52.840
play nicely doing data interchange.

00:18:52.840 --> 00:18:57.330
Any form of data interchange you
can do is incredibly helpful.

00:18:57.650 --> 00:19:00.720
Even if it's primitive,
just something that at least is

00:19:00.730 --> 00:19:03.090
documented or maybe in a plain text form.

00:19:04.100 --> 00:19:07.670
A lot of people in the post-production
community are very creative and amazed

00:19:07.670 --> 00:19:12.560
at the amount of pain people will
endure to sort of have that safety

00:19:12.560 --> 00:19:15.280
feeling of looking at their data.

00:19:15.280 --> 00:19:19.320
And so certainly anything
you can do is good.

00:19:19.320 --> 00:19:23.450
Conventional legacy formats,
if you can support them, that's great.

00:19:23.450 --> 00:19:25.130
It can be a lot of work.

00:19:25.170 --> 00:19:27.330
It can be a lot of debugging.

00:19:27.430 --> 00:19:30.370
If you can't,
then we encourage you to at least look

00:19:30.420 --> 00:19:32.900
at doing some more modern open formats.

00:19:32.900 --> 00:19:35.650
And sort of allowing other people
to write translators in the same

00:19:35.650 --> 00:19:37.540
way that Automatic Duck has.

00:19:37.720 --> 00:19:40.910
Sort of opening that door gives you
more leverage without necessarily

00:19:40.910 --> 00:19:44.180
spending a lot of engineering effort.

00:19:44.180 --> 00:19:46.350
And certainly open formats are great.

00:19:46.560 --> 00:19:48.270
They level the playing
field for everyone.

00:19:48.340 --> 00:19:51.160
And in the end, everyone wins.

00:19:51.180 --> 00:19:55.320
Developers sell more software and
users get the tools they need.

00:19:55.400 --> 00:19:57.710
And it's a very good thing.

00:19:58.390 --> 00:20:01.390
For Apple's professional applications,
Final Cut Pro 4 at present

00:20:01.900 --> 00:20:04.340
has native support for EDLs,
Batchless,

00:20:04.340 --> 00:20:08.380
and of course XML very shortly,
and OMF and AAF through

00:20:08.620 --> 00:20:11.300
the automatic duckguys.

00:20:11.300 --> 00:20:12.990
Shake-through,
which I want to mention for a moment,

00:20:12.990 --> 00:20:15.650
is a little bit different story
in that at the moment there isn't

00:20:15.650 --> 00:20:19.300
really an XML representation
or direct OMF or AAF support,

00:20:19.420 --> 00:20:23.300
but their project file format is
at least sort of a plain text file.

00:20:23.300 --> 00:20:26.440
ShakeScript is something
very similar to C or C++.

00:20:26.440 --> 00:20:29.300
It sort of defines the
structure of a project.

00:20:29.300 --> 00:20:32.620
And it's an example of something
that is rather technical,

00:20:32.620 --> 00:20:35.600
but at least is in a form
where other tools can generate

00:20:35.600 --> 00:20:37.300
and parse this information.

00:20:37.300 --> 00:20:40.310
And that's one of,
sort of one of the details that has made

00:20:40.530 --> 00:20:45.210
Shake incredibly popular and powerful in
the high-end post-production industry.

00:20:45.780 --> 00:20:48.740
So I'd like to move on
to exchanging media.

00:20:48.840 --> 00:20:51.790
And so we talked about sort of the
project composition data side of the

00:20:51.820 --> 00:20:55.530
universe and sort of getting that
data that-- and you just spend a lot

00:20:55.530 --> 00:20:57.680
of time creating move back and forth.

00:20:57.830 --> 00:21:01.010
But media is also incredibly
important as well.

00:21:01.220 --> 00:21:02.460
Why do you want to do it?

00:21:02.580 --> 00:21:07.120
Well, there might be formats you don't
support in your application.

00:21:07.120 --> 00:21:09.040
It may be that you
support still image files,

00:21:09.130 --> 00:21:10.660
but you don't support movies.

00:21:10.830 --> 00:21:16.410
Or you're based around video or audio,
but you really can't deal

00:21:16.410 --> 00:21:18.850
with container formats.

00:21:19.290 --> 00:21:24.060
By allowing users to import and
export data in different formats,

00:21:24.100 --> 00:21:28.050
you just increase what's possible
and what users are able to do.

00:21:28.200 --> 00:21:30.700
By exchanging data,
you can leverage things

00:21:30.700 --> 00:21:32.160
in other applications.

00:21:32.180 --> 00:21:35.200
You might have a wonderful
compositing engine,

00:21:35.200 --> 00:21:37.090
but you really don't do 3D animation.

00:21:37.200 --> 00:21:40.960
If you can import and export data,
then you can bring in 3D animation from

00:21:41.040 --> 00:21:43.200
some other application and work with it.

00:21:43.390 --> 00:21:47.200
Hardware support is an interesting one,
in that hardware support,

00:21:47.200 --> 00:21:52.200
sort of the ability to output to decks
or capture video from a deck or a camera,

00:21:52.200 --> 00:21:56.190
isn't always the easiest thing
to do and can be a lot of effort,

00:21:56.250 --> 00:21:58.110
and yet users need it.

00:21:58.200 --> 00:22:01.330
If you can import and export media,
then you can leverage someone

00:22:01.330 --> 00:22:03.200
else's software to do that for you.

00:22:03.440 --> 00:22:07.090
And finally,
in a real production environment,

00:22:07.440 --> 00:22:10.200
certainly there are some tools that
will fit the entire bill for production,

00:22:10.200 --> 00:22:12.130
but most times there really isn't.

00:22:12.200 --> 00:22:15.200
A lot of high-end facilities
like to pick and choose between

00:22:15.200 --> 00:22:17.200
different tools for different uses.

00:22:17.200 --> 00:22:21.400
And by exchanging media cleanly,
you allow yourself to be inserted

00:22:21.400 --> 00:22:23.160
as part of that pipeline.

00:22:23.240 --> 00:22:25.630
And there are a few other
details that you need to think

00:22:25.670 --> 00:22:29.200
about to make that practical,
and we'll get to those in a few moments.

00:22:30.650 --> 00:22:33.860
Some of the additional
difficulties had in sharing media:

00:22:33.890 --> 00:22:35.220
lack of public format.

00:22:35.220 --> 00:22:37.840
Certainly there are a lot of formats,
but when you move into the

00:22:37.950 --> 00:22:40.620
higher end of the spectrum,
you get some more private things.

00:22:40.650 --> 00:22:44.180
You get codecs that,
the details aren't necessarily there.

00:22:44.180 --> 00:22:47.560
Certainly you can get a piece
of code compiled for one CPU,

00:22:47.570 --> 00:22:48.940
but not for another.

00:22:48.940 --> 00:22:51.810
And some formats are more
difficult to work in than others.

00:22:51.930 --> 00:22:56.250
An example of OMF and AAF,
you basically have to wrestle with what

00:22:56.250 --> 00:23:01.640
libraries to compile and build and load
to use that data on different platforms.

00:23:01.640 --> 00:23:05.740
There's also a big issue which isn't
always necessarily considered is

00:23:05.820 --> 00:23:09.900
quality and conversion when transcoding
media between different formats.

00:23:09.900 --> 00:23:11.860
The computer world, RGB is great.

00:23:11.880 --> 00:23:12.870
That's pretty much what we all use.

00:23:12.880 --> 00:23:14.920
When you move up into
the high end film market,

00:23:15.010 --> 00:23:18.360
you've got sort of nonlinear,
high bit depth RGB.

00:23:18.360 --> 00:23:21.250
But when you're in the
general production market,

00:23:21.270 --> 00:23:23.380
you've got YUV video to deal with.

00:23:23.380 --> 00:23:26.050
Conversions to basically
YUV to RGB and back again,

00:23:26.110 --> 00:23:26.940
you lose color.

00:23:27.070 --> 00:23:31.300
Because there isn't complete
overlap in the spectrum there.

00:23:31.300 --> 00:23:33.960
And that can be an issue
in some circumstances.

00:23:33.960 --> 00:23:36.860
Traditionally it's been
identified as an issue for sort

00:23:37.000 --> 00:23:38.780
of the broadcast online market.

00:23:38.780 --> 00:23:40.540
They're a little bit more
open to that these days,

00:23:40.640 --> 00:23:43.340
but it's still a problem,
especially when you move up

00:23:43.370 --> 00:23:45.610
into the high definition market.

00:23:45.710 --> 00:23:47.220
And licensing issues.

00:23:47.220 --> 00:23:50.100
Certainly if you have,
you may have this wonderful codec

00:23:50.100 --> 00:23:52.900
and there may be some source
code floating around the web,

00:23:52.970 --> 00:23:55.600
but you can't really use it
because of licensing issues.

00:23:55.600 --> 00:23:56.660
And so.

00:23:56.660 --> 00:23:59.570
Sort of by supporting more open formats,
you can help to get around that by

00:23:59.650 --> 00:24:02.590
at least getting a format that will
go into another tool that maybe does

00:24:02.590 --> 00:24:05.440
have a licensing situation worked out.

00:24:06.090 --> 00:24:08.810
Just sort of some common formats
everyone's familiar with.

00:24:08.840 --> 00:24:11.060
You've got all the still formats
that have been around for a while,

00:24:11.060 --> 00:24:11.880
for the most part open.

00:24:11.920 --> 00:24:14.000
Of course,
they aren't really that great for video.

00:24:14.000 --> 00:24:16.550
A lot of people early on sort
of took those still formats

00:24:16.690 --> 00:24:18.720
and just numbered them,
put them in a folder,

00:24:18.790 --> 00:24:20.000
and played them back.

00:24:20.000 --> 00:24:24.670
And that can be rather CPU-intensive,
and certainly there are a lot of Unix

00:24:24.670 --> 00:24:27.460
workstations that that's just the
best way to deal with it because you

00:24:27.570 --> 00:24:31.000
can get to any frame really quickly,
but it's kind of a pain to move around.

00:24:31.000 --> 00:24:34.960
Certainly QuickTime is a great
container format for just stringing

00:24:35.010 --> 00:24:36.920
together a lot of video images.

00:24:37.000 --> 00:24:39.960
You can do it uncompressed,
do it in various codecs.

00:24:40.080 --> 00:24:42.950
In fact, we actually have a lot of
sort of open codecs at Apple.

00:24:43.000 --> 00:24:45.300
In Final Cut Pro 4,
we introduced some new open

00:24:45.420 --> 00:24:49.980
uncompressed codecs for 8- and
10-bit video where the details,

00:24:50.020 --> 00:24:52.950
sort of the bits,
are completely documented for free.

00:24:53.040 --> 00:24:55.860
Of course,
we have our own codec implementation,

00:24:55.930 --> 00:24:58.190
but should you be on another platform
or another piece of software and

00:24:58.190 --> 00:25:01.970
you can't actually use QuickTime,
all the details are there so that you

00:25:02.020 --> 00:25:04.000
can parse those out and use those.

00:25:04.000 --> 00:25:07.090
And certainly we have Microsoft formats,
AVI, and Windows Media,

00:25:07.090 --> 00:25:10.080
traditionally more used in the
delivery space than the editing space,

00:25:10.430 --> 00:25:13.000
although certainly some
low-end tools make use of them.

00:25:13.000 --> 00:25:15.720
OMF and AAF, again,
dual designs sort of for media

00:25:15.720 --> 00:25:19.770
container and composition container,
so you can embed data in there.

00:25:20.000 --> 00:25:24.320
Cineon/DPX is a format that Kodak
came up with about a half-dozen

00:25:24.320 --> 00:25:27.120
years ago for the film industry
for sort of high-resolution,

00:25:27.210 --> 00:25:29.000
high-bit depth, nonlinear RGB images.

00:25:29.000 --> 00:25:30.990
Details for that are out there.

00:25:31.000 --> 00:25:32.990
You have to dig to find them.

00:25:33.020 --> 00:25:36.590
But a lot of high-end tools like to
use those frames for sort of final

00:25:36.590 --> 00:25:39.000
finished film renders and effects work.

00:25:39.000 --> 00:25:44.000
And of course, MPEG-2,
just pure element streams you might spit

00:25:44.000 --> 00:25:47.000
out of Compressor or DVD Studio Pro.

00:25:47.000 --> 00:25:50.180
Not really used, sort of,
there's some movement toward using

00:25:50.180 --> 00:25:53.990
MPEG-2 in the editorial space,
more for iframe only,

00:25:54.230 --> 00:25:58.000
basically in-frame edits or files,
as opposed to the long-op stuff,

00:25:58.000 --> 00:26:01.950
traditionally used for broadcast,
but still a lot of that stuff out there.

00:26:02.000 --> 00:26:05.660
Again, really quick,
some common audio formats, AAF and WAV,

00:26:05.660 --> 00:26:09.140
uncompressed, everyone knows them,
more or less the same

00:26:09.140 --> 00:26:11.000
except the bits are flipped.

00:26:11.130 --> 00:26:13.720
SD-2,
and I actually bring this up because

00:26:13.880 --> 00:26:18.000
it's an interesting example of
sort of a partially public format.

00:26:18.110 --> 00:26:20.780
Certainly there are a lot of
tools out there to read SD-2,

00:26:20.840 --> 00:26:23.000
it's not a hard format
to reverse engineer.

00:26:23.000 --> 00:26:25.260
Unfortunately,
this is one of those licensed

00:26:25.260 --> 00:26:28.860
formats that I mentioned earlier,
where you can't exactly create

00:26:28.900 --> 00:26:33.080
a product that will write SD-2
files without a license from Avid,

00:26:33.080 --> 00:26:34.000
actually.

00:26:34.000 --> 00:26:38.000
It's interesting in that Pro Tools in
the past has made very heavy use of SD-2.

00:26:38.020 --> 00:26:41.000
It makes it a little bit interesting
to get data into Pro Tools sometimes,

00:26:41.000 --> 00:26:42.960
but just sort of be aware.

00:26:43.000 --> 00:26:46.990
Of course, QuickTime, Windows Media,
OMF and AAF,

00:26:47.160 --> 00:26:49.000
containers for audio formats as well.

00:26:49.000 --> 00:26:52.000
And of course, there are a lot of popular
compressed formats now,

00:26:52.000 --> 00:26:56.000
MP3 and AAC, more for delivery,
but we tend to see a lot of these

00:26:56.000 --> 00:26:57.790
in post just because someone gets
a track that that's the only format

00:26:57.790 --> 00:26:59.000
they have and need to bring that in.

00:27:02.200 --> 00:27:05.240
Talk about MUX formats for a moment.

00:27:05.240 --> 00:27:07.480
Formats where basically
you have audio and video,

00:27:07.480 --> 00:27:09.750
potentially ancillary data,
combined together.

00:27:09.870 --> 00:27:11.820
Very handy container you
can just move around,

00:27:11.820 --> 00:27:13.940
something you can just
open up and play back.

00:27:14.100 --> 00:27:15.610
Of course QuickTime's great for this.

00:27:15.610 --> 00:27:18.100
You can put pretty much anything
you want in a QuickTime movie.

00:27:18.100 --> 00:27:22.260
Of course when you get to
applications like Final Cut Pro,

00:27:22.260 --> 00:27:25.910
there are some conventions
that you have to observe,

00:27:26.290 --> 00:27:28.090
things like timings, video times, etc.

00:27:28.100 --> 00:27:31.830
AVI, Windows Media,
again more delivery formats,

00:27:31.940 --> 00:27:33.940
but they do support MUX data.

00:27:34.060 --> 00:27:36.080
OMF and AAF as well can support this.

00:27:36.170 --> 00:27:40.220
MXF is something that's interesting
to mention in that it's a format

00:27:40.230 --> 00:27:44.100
that Sony has been working on for
the last few years with SMPTE.

00:27:44.100 --> 00:27:49.760
And MXF has actually been designed
as a subset of AAF with the goal of

00:27:49.760 --> 00:27:54.100
creating a MUX data format that hardware
devices could implement cheaply.

00:27:54.170 --> 00:27:57.100
So that you might have a camera
that's recording direct to disk.

00:27:57.100 --> 00:28:00.370
And you need some format to
describe that data and interleave

00:28:00.380 --> 00:28:02.900
it together in a completely,
ideally,

00:28:03.070 --> 00:28:05.920
platform and software independent manner.

00:28:06.100 --> 00:28:09.100
You can get the specs
for that through SMPTE.

00:28:09.100 --> 00:28:11.580
It's starting to gain momentum with
some new devices that have been coming

00:28:11.580 --> 00:28:13.100
out that have been announced this year.

00:28:13.100 --> 00:28:14.080
Still sort of ramping up.

00:28:14.100 --> 00:28:18.020
Interesting to see how common that
becomes and sort of if it scales

00:28:18.020 --> 00:28:21.980
from the low bitrate compressed
formats up into uncompressed.

00:28:22.100 --> 00:28:24.730
And just for completeness,
MPEG-2 transport streams that

00:28:24.730 --> 00:28:26.100
you might get off of an antenna.

00:28:26.100 --> 00:28:31.100
For HDTV or program streams
that you might have on a DVD.

00:28:32.530 --> 00:28:33.870
I also want to talk about
metadata for a minute.

00:28:33.900 --> 00:28:36.630
We've been talking
about sort of the core,

00:28:36.630 --> 00:28:40.340
audio and video data,
the bits that represent the things that

00:28:40.340 --> 00:28:42.670
you listen to and you see on the screen.

00:28:42.740 --> 00:28:45.620
But metadata is actually really
important and becoming a lot

00:28:45.730 --> 00:28:47.500
more important as time rolls on.

00:28:47.570 --> 00:28:51.690
So if I've gone out into the field
and shot 40 hours of footage,

00:28:51.690 --> 00:28:54.490
I need some way to identify that footage.

00:28:54.530 --> 00:28:56.540
Certainly by simply being
on a tape-based device,

00:28:56.540 --> 00:28:57.380
there's time code.

00:28:57.500 --> 00:29:00.860
But when that media is brought
into the digital realm or brought

00:29:01.100 --> 00:29:04.170
onto a computer hard drive,
there needs to be some way to

00:29:04.220 --> 00:29:06.500
track it other than the file name.

00:29:06.640 --> 00:29:09.500
And this is really
where metadata comes in.

00:29:09.500 --> 00:29:11.950
Traditionally,
pretty much any non-linear editing

00:29:11.950 --> 00:29:13.500
system has tracked time code.

00:29:13.500 --> 00:29:16.090
So basically you can embed a set of
numbers in a media file that track

00:29:16.180 --> 00:29:17.500
where that came from on a tape.

00:29:17.500 --> 00:29:21.310
And you may attach that with a
source tape identifier as well.

00:29:21.470 --> 00:29:25.010
Traditionally, it's been stored in pretty
strange locations just because

00:29:25.010 --> 00:29:26.480
it's really been an afterthought.

00:29:26.500 --> 00:29:27.920
It's remixed formats together.

00:29:28.000 --> 00:29:28.450
It's great.

00:29:28.600 --> 00:29:29.460
It's playing back.

00:29:29.520 --> 00:29:30.430
Wait a minute.

00:29:30.760 --> 00:29:33.490
Where are we going to put time code?

00:29:33.830 --> 00:29:36.490
Fortunately, with QuickTime being a
very general architecture,

00:29:36.490 --> 00:29:40.440
it's actually easy to drop time code
in a logical location for a change

00:29:40.520 --> 00:29:42.500
and even put other information in.

00:29:42.500 --> 00:29:46.980
You can utilize things like text
tracks and user data bits just to

00:29:46.980 --> 00:29:52.070
drop data into a file and at least
be confident that it's writing

00:29:52.070 --> 00:29:55.500
consistently with that media on disk.

00:29:55.500 --> 00:29:57.740
And that's the way if you go
into a professional environment,

00:29:57.740 --> 00:29:58.500
it's required.

00:29:58.500 --> 00:29:59.390
They need it there.

00:29:59.500 --> 00:30:02.500
So it's very important to be
able to read and process that.

00:30:02.500 --> 00:30:05.500
And it's just becoming more important
as the amount of media grows,

00:30:05.500 --> 00:30:08.500
as sort of multi-user systems grow.

00:30:08.500 --> 00:30:12.210
The value of having that data
is just all the more important.

00:30:12.600 --> 00:30:15.320
So just some quick strategies on
things that you can do to support to

00:30:15.340 --> 00:30:17.350
deal with media interchange correctly.

00:30:17.440 --> 00:30:19.490
You want to support as many
media formats as possible.

00:30:19.490 --> 00:30:23.780
That might involve using a rich
media engine like QuickTime to

00:30:23.820 --> 00:30:25.500
do the translation for you.

00:30:25.500 --> 00:30:26.390
It's quite handy.

00:30:26.650 --> 00:30:28.500
Certainly there are other
options out there as well.

00:30:28.500 --> 00:30:32.100
When you're processing media or
importing it into your system,

00:30:32.100 --> 00:30:36.470
you really need to try and keep it as
close to the native format as possible.

00:30:36.500 --> 00:30:40.500
Sort of the biggest thing that
I get is YUV to RGB conversion.

00:30:40.500 --> 00:30:43.530
The reds will get weird,
the color will get muddied

00:30:43.530 --> 00:30:44.500
if you don't do it right.

00:30:44.500 --> 00:30:48.460
And that's kind of a big deal if
the native acquisition device is

00:30:48.460 --> 00:30:51.560
YUV and the output device is YUV,
but in the middle you're

00:30:51.610 --> 00:30:52.500
going through RGB.

00:30:52.500 --> 00:30:56.500
So if at all possible,
you need to try and keep that in mind.

00:30:56.660 --> 00:30:59.710
Audio is another situation
where if you've got a 24-bit

00:30:59.730 --> 00:31:02.850
audio recorder out in the field,
you want that audio to stay

00:31:02.900 --> 00:31:06.490
24-bit when it gets to the audio
post house at the very end.

00:31:06.500 --> 00:31:08.500
And again, metadata.

00:31:08.500 --> 00:31:10.500
At the very least, pass it through.

00:31:10.500 --> 00:31:14.490
Ideally access it and
display it and edit it.

00:31:14.530 --> 00:31:16.870
But if nothing else,
if the data simply passes

00:31:16.870 --> 00:31:20.490
through your system cleanly,
then your users are going to love it.

00:31:21.490 --> 00:31:24.890
Apple's applications,
certainly QuickTime.

00:31:25.080 --> 00:31:25.840
We love QuickTime.

00:31:25.920 --> 00:31:28.400
It's pretty much our
universal container format.

00:31:28.400 --> 00:31:32.400
We use QuickTime as a translation
conduit for other formats.

00:31:32.400 --> 00:31:34.400
We have a lot of great codecs.

00:31:34.400 --> 00:31:38.390
I mentioned earlier the uncompressed
codecs we can use with Final Cut Pro 4,

00:31:38.480 --> 00:31:40.490
the pixel codec announced
here at the show,

00:31:40.540 --> 00:31:46.400
and traditional things like
animation and CinePack and Sorenson.

00:31:46.400 --> 00:31:48.260
And time code and metadata.

00:31:48.400 --> 00:31:51.670
We do currently Final Cut Pro 4
supports multiple time code

00:31:51.720 --> 00:31:55.400
tracks and QuickTime files,
multiple tape source identifiers.

00:31:55.400 --> 00:31:57.370
And as time goes on,
we're going to be expanding that.

00:31:57.430 --> 00:32:00.500
We're going to have more support
for metadata and not less,

00:32:00.500 --> 00:32:03.400
just because it's come up so often
from all of our pro customers.

00:32:03.400 --> 00:32:07.670
And we also now have support for
24-bit 96 kilohertz audio along with

00:32:08.010 --> 00:32:10.260
multi-channel audio in Final Cut Pro 4.

00:32:10.710 --> 00:32:14.390
That all comes in at the
moment through AFF files.

00:32:14.400 --> 00:32:16.400
The number of formats we
bring in will be extended.

00:32:16.400 --> 00:32:18.990
expanded as time goes on.

00:32:19.810 --> 00:32:24.760
So we sort of talked about project
exchange and media exchange,

00:32:24.760 --> 00:32:27.910
and I sort of want to bring them together
and sort of plant some ideas out there

00:32:27.910 --> 00:32:29.730
for how you might make use of these.

00:32:29.950 --> 00:32:33.570
It's not always obvious if you're not
in a post house or at a film studio

00:32:33.930 --> 00:32:37.880
sort of what the opportunities are
to sort of enhance and extend things,

00:32:37.880 --> 00:32:41.380
and sort of where new and unique
applications and small tools

00:32:41.460 --> 00:32:43.400
might fit into the picture.

00:32:43.430 --> 00:32:45.960
So one of the biggest things,
one of the biggest requests

00:32:46.020 --> 00:32:50.380
we get now from post houses is
sort of media asset management,

00:32:50.380 --> 00:32:53.460
where a post house is only sort of
getting more work as time goes on.

00:32:53.460 --> 00:32:57.970
They may have six projects going at once,
and to have sort of project data and

00:32:57.970 --> 00:33:02.620
media scattered across 40 different
machines is really kind of a pain.

00:33:02.660 --> 00:33:03.730
It's a pain for backup.

00:33:03.730 --> 00:33:05.260
It's a pain for tracking.

00:33:05.280 --> 00:33:08.030
And it's just a pain for workflow,
and that one machine might

00:33:08.030 --> 00:33:09.050
be locked on a project.

00:33:09.270 --> 00:33:11.170
And sort of by building
a central archive,

00:33:11.190 --> 00:33:14.330
you've got one place where you
can collect and track things.

00:33:14.510 --> 00:33:17.320
And you can do things like track the
revisions of a particular element.

00:33:17.330 --> 00:33:19.260
You might have something
you shoot on video.

00:33:19.260 --> 00:33:20.010
It comes in.

00:33:20.010 --> 00:33:21.100
It's captured.

00:33:21.130 --> 00:33:23.360
Great,
you've got revision one of this element.

00:33:23.360 --> 00:33:25.100
Now it needs to be color corrected.

00:33:25.100 --> 00:33:28.260
Then it needs to have maybe
some effects applied to it.

00:33:28.260 --> 00:33:30.800
Maybe it needs to have a lower
third title applied to it.

00:33:30.810 --> 00:33:34.150
Sort of almost do versioning
like we're used to in CVS,

00:33:34.150 --> 00:33:36.410
but with media elements,
so that if something goes

00:33:36.550 --> 00:33:39.170
horribly wrong in the process,
you're not going back to the

00:33:39.200 --> 00:33:41.520
original tape to bring the
thing in and run it through.

00:33:41.540 --> 00:33:45.260
You can actually go back to maybe step
number three where the issue came in.

00:33:45.320 --> 00:33:47.660
Review approval loop is very important.

00:33:47.760 --> 00:33:48.610
Sort of the concept.

00:33:48.700 --> 00:33:51.520
Traditionally, if working on a show,
I'd have to get approval

00:33:51.520 --> 00:33:53.500
from an executive,
approval from a client.

00:33:53.560 --> 00:33:55.640
I'd have to take the project,
dump it out to VHS,

00:33:55.730 --> 00:33:58.420
give the VHS to a courier,
send it across town,

00:33:58.490 --> 00:34:01.350
have them look at it,
send something back, give it a call.

00:34:01.580 --> 00:34:05.430
Having sort of automated or at least
electronic review loops is incredibly,

00:34:05.520 --> 00:34:06.820
incredibly handy.

00:34:06.900 --> 00:34:09.260
So certainly you could send an
email to the client and say,

00:34:09.260 --> 00:34:10.780
"Hey, the spot's up.

00:34:10.850 --> 00:34:11.710
Take a look at it.

00:34:11.950 --> 00:34:12.380
Log into a URL.

00:34:12.380 --> 00:34:13.380
Look on a web page.

00:34:13.380 --> 00:34:14.240
Play it back.

00:34:14.450 --> 00:34:19.000
Make some notes." And sort of cutting the
time all of that review processes take.

00:34:19.140 --> 00:34:21.750
And also,
come back to sort of central location,

00:34:21.750 --> 00:34:24.620
backups, and even just status,
looking at a project,

00:34:24.620 --> 00:34:27.920
seeing what elements are completed,
what elements are left to be done.

00:34:27.940 --> 00:34:32.140
And it only sort of primes things for
multi-user products in the future.

00:34:32.140 --> 00:34:35.020
This is interesting where there are
products in the marketplace that many

00:34:35.020 --> 00:34:38.900
people today consider to be multi-user,
but really are just sort of media

00:34:38.900 --> 00:34:42.640
sharing and sort of the idea of having
sort of direct clients and direct

00:34:42.640 --> 00:34:45.020
collaborative workflow where two people
might be working on the same sequence

00:34:45.040 --> 00:34:50.040
at the same time is something that's not
necessarily around today but is coming.

00:34:50.110 --> 00:34:53.040
And when it gets here,
it's going to take the market by storm.

00:34:53.040 --> 00:34:56.620
And by encouraging this
infrastructure and building tools

00:34:56.780 --> 00:35:00.590
that tie into this infrastructure,
it's only going to make this easier.

00:35:00.870 --> 00:35:06.310
Another very powerful example of this
will be linking specialized applications.

00:35:06.310 --> 00:35:11.040
No one piece of software does everything,
and it's not really even possible.

00:35:11.040 --> 00:35:13.800
There are things that might be
specialized to one particular company,

00:35:13.850 --> 00:35:15.790
things that might be specialized
to one particular market segment.

00:35:15.800 --> 00:35:19.780
And it makes sense in circumstances
to use specialized software for

00:35:20.090 --> 00:35:23.750
specialized tasks and then be
able to bring data back and forth.

00:35:23.800 --> 00:35:26.100
And it also makes use
of different skill sets.

00:35:26.100 --> 00:35:28.580
You might have people who
are less technical who just

00:35:28.640 --> 00:35:31.880
need to organize something,
and people who are more technical who

00:35:31.880 --> 00:35:35.680
are going to finesse things and give
it that final polish that it needs.

00:35:35.800 --> 00:35:39.560
And even down to allowing for
low-end hardware at one phase,

00:35:39.610 --> 00:35:43.330
high-end hardware at another,
or even going to really dumb

00:35:43.330 --> 00:35:47.640
hardware at some point just for
an executive to view something.

00:35:48.110 --> 00:35:49.210
And at this point,
I'd actually like to ask

00:35:49.290 --> 00:35:52.970
Michael Johnson to come up and give a
demo of an example of sort of linking

00:35:53.290 --> 00:35:58.170
specialized applications using
XML and media exchange technology.

00:36:03.200 --> 00:36:07.000
Hey folks,
so this is a little tool that we

00:36:07.000 --> 00:36:15.590
wrote last year and we've actually
continued to work on it and it's one of

00:36:15.590 --> 00:36:21.750
these things where we heard about the
XML stuff that the Final Cut Pro folks

00:36:21.880 --> 00:36:28.050
were doing a little while ago,
but then they have a product

00:36:28.070 --> 00:36:30.760
to get out and so you're like,
"Oh, that sounds really great.

00:36:30.810 --> 00:36:31.730
We're looking forward to that.

00:36:31.730 --> 00:36:34.080
We'll be very excited when that
comes along." And so they got us some

00:36:34.080 --> 00:36:37.270
stuff a few months ago and we looked
at it and gave them some comments,

00:36:37.280 --> 00:36:39.100
but really weren't using it or anything.

00:36:39.100 --> 00:36:42.710
And then last week they
stopped by and said,

00:36:42.720 --> 00:36:45.120
"Well, you know,
we're going to have this talk there.

00:36:45.120 --> 00:36:48.860
We'd like to do that thing
and we'll get you that spec,

00:36:48.910 --> 00:36:52.450
that code that'll let you read the
XML stuff in your Final Cut thing

00:36:52.450 --> 00:36:54.810
there." And we had some,
you know,

00:36:54.810 --> 00:36:58.750
little kind of going back and forth
on that and I think I actually

00:36:58.780 --> 00:37:03.080
got the thing from David,
I guess it was about 45 minutes ago.

00:37:03.100 --> 00:37:07.510
Yeah, so we actually did it over there
in the session in the back there.

00:37:07.630 --> 00:37:10.170
We actually said, "Oh look,
it actually works." So I'm

00:37:10.170 --> 00:37:15.130
actually here more as,
you know, as a developer,

00:37:15.180 --> 00:37:19.510
as a sort of a fellow
developer here and just

00:37:19.760 --> 00:37:23.810
When you do things like this,
when you deal with custom tools,

00:37:24.260 --> 00:37:28.230
it's so nice when it's a file format.

00:37:28.450 --> 00:37:32.520
Because we deal with
OMF and things like that,

00:37:32.520 --> 00:37:36.630
and OMF is just like, you know,
it's just this thing.

00:37:36.640 --> 00:37:39.440
It's just this blob of stuff,
and there's all these libraries,

00:37:39.440 --> 00:37:41.040
and you have to compile them,
and you have to go get them.

00:37:41.040 --> 00:37:42.490
And yes,
you have the source code for them,

00:37:42.490 --> 00:37:45.280
but then, oh, you've got a new compiler,
and oh, we've got a link against that.

00:37:45.280 --> 00:37:46.480
Oh, no, is this C++?

00:37:46.480 --> 00:37:47.600
Oh, yeah, okay,
we've got a link against that.

00:37:47.600 --> 00:37:48.640
Oh, no, recompile that part.

00:37:48.720 --> 00:37:50.480
You know, this is like, it's a spec.

00:37:50.480 --> 00:37:51.440
It's a file format.

00:37:51.440 --> 00:37:52.210
It's text.

00:37:52.600 --> 00:38:01.910
And what's also fun with it is that, so,
David and the Final Cut folks,

00:38:02.070 --> 00:38:04.160
they're at Apple,
and so they have all these

00:38:04.210 --> 00:38:06.820
people who know all sorts
of stuff about programming,

00:38:06.980 --> 00:38:09.430
like all the core foundation
things and stuff like that.

00:38:09.440 --> 00:38:12.790
And, you know, I'm an old Unix,
Next Step, Packer guy.

00:38:12.790 --> 00:38:14.320
I don't really know
from core foundations.

00:38:14.430 --> 00:38:17.620
So if it's not Cocoa,
I'm really kind of at a loss.

00:38:17.870 --> 00:38:19.970
But so, it's XML.

00:38:20.230 --> 00:38:23.450
So I just, you know, go out in the net,
and I get XPAT, you know.

00:38:23.560 --> 00:38:27.600
And that actually, that's for parsing it,
but just for this little thing here.

00:38:27.600 --> 00:38:29.510
So this is, let me just show you this.

00:38:29.720 --> 00:38:31.810
You know, we've got this simple
little program here,

00:38:31.810 --> 00:38:38.700
which just lets you go and, you know,
time things out for your whole, you know.

00:38:39.890 --> 00:38:41.330
You know, we're good on that.

00:38:41.340 --> 00:38:43.480
And then if we actually
want to--let's see,

00:38:43.480 --> 00:38:44.280
put it out there.

00:38:44.360 --> 00:38:45.790
It's in my debug menu.

00:38:45.820 --> 00:38:47.540
I got the idea from Safari.

00:38:47.690 --> 00:38:51.720
And so let's see.

00:38:51.830 --> 00:38:56.160
So if we just say--let's call it demo.

00:38:56.360 --> 00:39:01.850
And then--so all I'm doing there is
writing out strings and then telling

00:39:01.860 --> 00:39:03.540
the NSString to write itself out.

00:39:03.550 --> 00:39:06.240
So I got me a little XML file there.

00:39:06.510 --> 00:39:12.240
And let's go and say import XML.

00:39:12.800 --> 00:39:20.990
And,
uh... let's just see... that looks good,

00:39:20.990 --> 00:39:20.990
yeah.

00:39:20.990 --> 00:39:20.990
Uh-huh.

00:39:20.990 --> 00:39:20.990
And...

00:39:21.480 --> 00:39:25.600
So now we've got that and
it's got our timing on there.

00:39:25.620 --> 00:39:29.160
And now actually there's one
really neat thing about this which

00:39:29.240 --> 00:39:33.410
is not at all obvious to this,
which is that this is actually

00:39:33.410 --> 00:39:36.700
going out and those are
actually film res storyboards.

00:39:36.720 --> 00:39:42.390
And so that's actually a really nice
thing about stuff like Final Cut is

00:39:42.400 --> 00:39:43.750
I just spec'd in the XML thing.

00:39:43.750 --> 00:39:45.880
I said, "Oh, well,
I'm going to give you some media and

00:39:45.950 --> 00:39:49.120
it's actually this big." Even though the
media is actually like two megapixels,

00:39:49.120 --> 00:39:53.260
I actually just do it as a you know,
whatever it is, 720 by 540 or something.

00:39:53.280 --> 00:39:55.000
And it just deals with it.

00:39:55.000 --> 00:39:56.480
It's just good.

00:39:56.480 --> 00:40:00.430
And so let's actually just go look at the

00:40:01.610 --> 00:40:03.560
Let's go look at what
that looks like here,

00:40:03.610 --> 00:40:08.020
because there's a couple of interesting
things in terms of -- let's see,

00:40:08.020 --> 00:40:09.180
how big do we have to make that?

00:40:09.180 --> 00:40:12.200
You can actually read that.

00:40:12.210 --> 00:40:15.810
So this is what we wrote out,
and it's just -- it's just text, right?

00:40:15.810 --> 00:40:18.120
And I'm one of those,
you know -- and you don't have to, like,

00:40:18.120 --> 00:40:19.270
have all the intention
or anything like that,

00:40:19.350 --> 00:40:21.200
but I'm one of those people who,
when you write the code,

00:40:21.200 --> 00:40:23.690
you might as well make
it so that it's readable,

00:40:23.840 --> 00:40:28.390
because unfortunately,
David is completely correct

00:40:28.390 --> 00:40:33.580
in that text file formats,
you know, will be edited by power users.

00:40:33.760 --> 00:40:35.950
Sadly enough, you know,
we tool makers like to say, "No,

00:40:35.970 --> 00:40:39.700
we'll give you a really nice way
to just -- don't open the file.

00:40:39.790 --> 00:40:43.230
Don't edit it directly."
But -- and again,

00:40:43.230 --> 00:40:47.920
this is where the whole file format
versus the 17 libraries that you have

00:40:47.960 --> 00:40:52.280
to link against is a great thing,
because in a production environment,

00:40:52.280 --> 00:40:55.440
in a real production environment,
you have all sorts of people who,

00:40:55.590 --> 00:40:58.630
you know, you cannot keep them to
the purity of your code.

00:40:58.640 --> 00:40:59.960
You know, you want to write in C or C++.

00:40:59.960 --> 00:41:05.480
Or Objective-C or whatever
your particular thing is.

00:41:05.660 --> 00:41:06.740
Well, too bad.

00:41:06.740 --> 00:41:08.980
You know, they have a cartoon to make.

00:41:08.980 --> 00:41:10.490
And so if they need to
write a Perl script that's

00:41:10.540 --> 00:41:12.200
going to go over this thing,
grovel this thing,

00:41:12.200 --> 00:41:14.280
move this thing into here,
or they've got to write some

00:41:14.380 --> 00:41:18.720
Python that's going to do this,
or some C shell, or an Apple script,

00:41:18.720 --> 00:41:21.340
or a whatever, you know, God bless them.

00:41:21.340 --> 00:41:22.440
They have work to do.

00:41:22.440 --> 00:41:24.680
And so this is actually
what's really neat.

00:41:24.680 --> 00:41:27.590
And let me -- I just want to
point out one thing that's really,

00:41:27.650 --> 00:41:28.730
really neat in here.

00:41:28.730 --> 00:41:31.410
And I don't know if
this is actually true,

00:41:31.410 --> 00:41:36.510
but I will take some credit in
giving them the -- saying at least

00:41:36.510 --> 00:41:41.220
that this was a really good idea,
which is this little guy here,

00:41:41.220 --> 00:41:45.100
the path URL,
which what that means is what

00:41:45.220 --> 00:41:50.880
-- in this XML file format,
your media, it's a URL.

00:41:50.890 --> 00:41:53.810
And I'm pretty sure that, you know,
like the Final Cut, the version of this

00:41:53.810 --> 00:41:56.500
as it's going in here,
it's -- it really wants, you know,

00:41:56.510 --> 00:41:57.070
file URLs.

00:41:57.090 --> 00:41:59.440
But from our perspective,
we write custom things that

00:41:59.440 --> 00:42:00.140
are in this file format.

00:42:00.140 --> 00:42:02.200
And, you know,
we might have a web server in

00:42:02.220 --> 00:42:05.820
the way of that media there,
and it's going to serve up

00:42:05.820 --> 00:42:07.790
that piece of media to you.

00:42:07.790 --> 00:42:11.180
And because it's a URL, you know,
if you're writing custom things

00:42:11.180 --> 00:42:13.900
that's using this file format,
you know, you're all good.

00:42:13.900 --> 00:42:16.280
You know, you can just put an arbitrary
URL in the way there.

00:42:16.280 --> 00:42:18.660
And if you want to have your
version control system in there,

00:42:18.660 --> 00:42:20.780
if you want to auto-generate
that piece of information,

00:42:20.780 --> 00:42:22.250
you know,
there's all sorts of interesting

00:42:22.290 --> 00:42:24.090
things you could do with that.

00:42:24.100 --> 00:42:25.410
And like I said, the format is really,
really simple.

00:42:25.410 --> 00:42:26.620
You can just go to the file format,
and you can just go to the file format,

00:42:26.620 --> 00:42:27.490
and you can just go to the file format,
and you can just go to the file format,

00:42:27.500 --> 00:42:28.340
and you can just go to the file format,
and you can just go to the file format,

00:42:28.350 --> 00:42:29.280
and you can just go to the file format,
and you can just go to the file format,

00:42:29.280 --> 00:42:30.140
and you can just go to the file format,
and you can just go to the file format.

00:42:30.140 --> 00:42:31.590
And it's really simple.

00:42:31.700 --> 00:42:33.810
And for parsing this stuff, I used XPAT.

00:42:33.960 --> 00:42:37.350
Nice thing with XPAT is it's out there,
and sort of most languages

00:42:37.370 --> 00:42:38.790
have sort of access to that.

00:42:38.790 --> 00:42:42.520
It's just this very simple C library.

00:42:42.590 --> 00:42:44.600
And XML is just -- I mean,
it's not a very complicated thing.

00:42:44.600 --> 00:42:44.600
It's

00:42:44.700 --> 00:45:13.300
[Transcript missing]

00:45:19.320 --> 00:45:23.730
So sort of one final example
I'd like to talk about today.

00:45:23.890 --> 00:45:26.200
Sort of the concept of
production pipeline.

00:45:26.360 --> 00:45:29.450
And this is not so much an editorial,
so much as actual final rendering

00:45:29.450 --> 00:45:34.200
and production where you're trying
to take a series of disparate tools

00:45:34.200 --> 00:45:36.190
to get a certain look for something.

00:45:36.370 --> 00:45:39.620
Earlier I mentioned the concept that
there may be one application that does

00:45:39.630 --> 00:45:43.200
a blur really well and one application
that does a composite really well.

00:45:43.210 --> 00:45:45.160
You just want to smash them together.

00:45:45.220 --> 00:45:49.200
And a lot of people do
production pipelines this way.

00:45:49.200 --> 00:45:50.020
They may render and shake.

00:45:50.020 --> 00:45:51.200
They may pull it into After Effects.

00:45:51.200 --> 00:45:53.190
They may output it using Compressor.

00:45:53.200 --> 00:45:56.430
And sort of allowing tools to
be hooked into that pipeline

00:45:56.430 --> 00:45:58.200
is incredibly compelling.

00:45:58.430 --> 00:46:01.180
And part of this is project files.

00:46:01.210 --> 00:46:02.200
XML is great.

00:46:02.370 --> 00:46:04.100
Certainly you can endure
the pain of OMF and AEF.

00:46:04.200 --> 00:46:05.200
I don't recommend it.

00:46:05.200 --> 00:46:08.210
But if at least you can sort
of concept something to drive

00:46:08.290 --> 00:46:12.200
your software from the outside,
that's sort of the beginning of it.

00:46:12.200 --> 00:46:14.200
And then, of course,
we move on to media interchange.

00:46:14.200 --> 00:46:18.520
And trying to bring media through a
system without loss in quality or at

00:46:18.630 --> 00:46:21.200
the very least known loss of quality.

00:46:21.200 --> 00:46:24.200
It may be that you have a tool that
doesn't make sense to work in YUV,

00:46:24.200 --> 00:46:27.300
but if at least sort of you can
document what the effects of it are,

00:46:27.300 --> 00:46:32.070
that's going to make someone more willing
to give it a shot and see what it is.

00:46:32.230 --> 00:46:34.180
And scriptability is great.

00:46:34.200 --> 00:46:36.170
At the very least,
just dropping something

00:46:36.170 --> 00:46:37.200
on and having it go.

00:46:37.200 --> 00:46:39.050
But technologies like
Apple Script are very useful.

00:46:39.200 --> 00:46:41.520
They're very interesting
to implement at times,

00:46:41.520 --> 00:46:43.130
but they're incredibly useful.

00:46:44.970 --> 00:46:46.940
And try and summarize things.

00:46:47.550 --> 00:46:51.680
Project data interchange, import, export,
wonderful thing.

00:46:51.680 --> 00:46:53.560
Open formats, wonderful thing.

00:46:53.560 --> 00:46:55.960
If you can move data
through an application,

00:46:55.960 --> 00:46:58.600
actually, and something I sort of
mentioned a moment ago,

00:46:58.600 --> 00:47:00.380
if you can move data in
and out of an application,

00:47:00.380 --> 00:47:03.630
it's actually going to make it
easier to be adopted than harder.

00:47:03.640 --> 00:47:06.250
One of the challenges we've
had on Final Cut Pro has

00:47:06.250 --> 00:47:09.190
been convincing people that,
you know, that $200,000 thing you

00:47:09.190 --> 00:47:11.660
bought three years ago,
it's really not all that.

00:47:11.690 --> 00:47:12.640
You need to try this PowerBook.

00:47:13.230 --> 00:47:15.090
And their response is, well,
that's great,

00:47:15.160 --> 00:47:17.100
but that thing in the corner,
I know what it does,

00:47:17.100 --> 00:47:20.070
and I know I can count on it,
and I'm just really nervous about

00:47:20.070 --> 00:47:22.600
bringing my project into it and
not being able to get it out again.

00:47:22.600 --> 00:47:25.420
If they know that you can
bring data in and out,

00:47:25.560 --> 00:47:26.820
they're a lot more willing to try it.

00:47:26.910 --> 00:47:28.000
They're a lot more
willing to throw it in.

00:47:28.000 --> 00:47:30.590
And if it's great,
they're a lot more willing

00:47:30.590 --> 00:47:32.940
to adopt it because they sort
of have that safety layer.

00:47:32.940 --> 00:47:35.220
Media interchange.

00:47:35.300 --> 00:47:38.520
Again, just like project data,
if you can pull data

00:47:38.730 --> 00:47:41.150
through an application,
know what the results are,

00:47:41.600 --> 00:47:43.440
it's just going to make
people more willing to try it.

00:47:43.520 --> 00:47:47.520
And combining the unique abilities of
your application with which others just

00:47:47.910 --> 00:47:49.620
makes it all that much more powerful.

00:47:51.480 --> 00:47:54.290
And this is not strictly
data interchange,

00:47:54.410 --> 00:47:56.400
but we alluded to it a few minutes ago.

00:47:56.410 --> 00:47:58.810
Extensibility and scriptability
is very important,

00:47:58.810 --> 00:48:02.400
both sort of in workflow systems
and in production pipeline systems.

00:48:02.400 --> 00:48:06.400
If you can very basically control how
something--sort of spawn something,

00:48:06.400 --> 00:48:08.480
spawn a process to go
do a render via script,

00:48:08.600 --> 00:48:11.400
via just an import file with
some extra commands in it,

00:48:11.400 --> 00:48:15.400
it just makes the whole process easier
and makes it possible in some cases.

00:48:15.400 --> 00:48:18.060
And scripting is great because if
you have those wacky power users out

00:48:18.160 --> 00:48:22.680
there who are just bitching because
you haven't written that one tool to

00:48:22.720 --> 00:48:25.400
do the special clip move that they've
been demanding for three years,

00:48:25.400 --> 00:48:27.780
if they can script it,
then they can just go off

00:48:27.850 --> 00:48:29.400
and write it themselves.

00:48:30.560 --> 00:48:33.890
And a couple strategies
against the same messages.

00:48:34.000 --> 00:48:35.740
Open project media formats are great.

00:48:35.860 --> 00:48:37.330
Scriptability is great if
you're doing an application.

00:48:37.410 --> 00:48:39.970
If you're writing a little tool,
you want to hook into

00:48:40.030 --> 00:48:41.390
that data flow somehow.

00:48:41.390 --> 00:48:42.290
You might write an integrated plugin.

00:48:42.450 --> 00:48:45.810
You might write just a small application
that takes the output of one app

00:48:45.810 --> 00:48:49.400
and converts it to another just like
the automatic duck guys have done.

00:48:49.510 --> 00:48:52.060
And if you can integrate
tools into an application,

00:48:52.060 --> 00:48:53.400
it's very compelling.

00:48:53.400 --> 00:48:56.400
I mentioned a little while ago
that sort of based around XML,

00:48:56.400 --> 00:48:59.400
we have a new plugin API coming soon.

00:48:59.400 --> 00:49:01.280
And we'll actually be
discussing that on Friday.

00:49:01.390 --> 00:49:06.400
And being able to sort of like
the automatic duck guys have done,

00:49:06.400 --> 00:49:10.210
being able to insert a tool directly
into the UI of a larger application

00:49:10.210 --> 00:49:14.800
like Final Cut Pro or Shake or something
else just makes it easier for users

00:49:14.830 --> 00:49:18.720
who may be very artistically talented
but not technically talented to get

00:49:18.760 --> 00:49:21.400
their head around something and use it.

00:49:22.130 --> 00:49:27.920
Our direction for professional
applications is we like open formats.

00:49:28.420 --> 00:49:32.890
The whole concept is
there's an ecosystem.

00:49:33.030 --> 00:49:36.250
There are tools of varying
sizes and the users don't really

00:49:36.250 --> 00:49:39.000
care where they come from,
they just need them to work.

00:49:39.000 --> 00:49:44.000
Open data formats allows everyone to play
and everyone to talk in the same space.

00:49:44.000 --> 00:49:45.000
We like QuickTime a lot.

00:49:45.000 --> 00:49:48.150
We're pushing for
QuickTime to provide open,

00:49:48.150 --> 00:49:51.000
high-quality data interchange methods.

00:49:51.010 --> 00:49:55.000
So new codecs like our
uncompressed codecs and Pixlet.

00:49:55.000 --> 00:49:58.160
Basically trying to set the
Mac up such that if you're doing

00:49:58.250 --> 00:50:02.140
high-quality video processing,
it's just easy because you don't have

00:50:02.210 --> 00:50:05.950
to deal with things like file I/O and
gamma conversion and hardware output.

00:50:06.010 --> 00:50:09.000
The pieces are there for you to
build into your applications.

00:50:09.000 --> 00:50:13.140
Extensibility,
extending application through plugins,

00:50:13.140 --> 00:50:14.970
through scripts, etc.

00:50:15.190 --> 00:50:16.930
That just makes it all the
more powerful because then

00:50:17.090 --> 00:50:20.000
power users can do their thing,
tool developers can use their things.

00:50:20.000 --> 00:50:23.000
In the end, there's just a much more
compelling solution.

00:50:23.000 --> 00:50:26.000
And finally, as mentioned earlier,
we really want your feedback.

00:50:26.000 --> 00:50:29.000
Anything you feel we're doing right,
we're doing wrong,

00:50:29.000 --> 00:50:32.110
tools we may not have thought of,
things that you're trying to

00:50:32.230 --> 00:50:35.060
do with Final Cut Pro or other
applications that you just can't do,

00:50:35.060 --> 00:50:39.000
we really want to hear about that so that
we can adjust our direction accordingly

00:50:39.000 --> 00:50:43.590
to try and address your needs and sort
of make this space just a lot better.

00:50:44.060 --> 00:50:47.050
And let's see,
one other session we had this

00:50:47.050 --> 00:50:50.140
week you might be interested in,
we actually had a session on

00:50:50.140 --> 00:50:52.840
Friday talking about all the
different plugin APIs of the

00:50:52.840 --> 00:50:57.560
Apple Pro Application Support-- Shake,
Final Cut Pro, Logic, Soundtrack.

00:50:57.600 --> 00:50:59.880
That's on Friday at 3:30.

00:50:59.880 --> 00:51:02.560
Also be going into--also be
giving some initial details on

00:51:02.560 --> 00:51:06.780
the plugin API we're hoping to
wrap XML around later this year.

00:51:06.900 --> 00:51:09.640
If you need to contact people,
first person's really Jeff Lowe,

00:51:09.640 --> 00:51:13.160
he's the evangelist at Apple for
Pro Video Applications.

00:51:13.200 --> 00:51:16.210
He's an excellent starting point,
he'll vector you off to whoever you

00:51:16.210 --> 00:51:18.060
need to get your question answered.

00:51:18.120 --> 00:51:21.650
If you have questions on
Final Cut Pro Data Interchange,

00:51:21.650 --> 00:51:25.250
feel free to email me and I'll get
back to you as soon as I can and again

00:51:25.420 --> 00:51:28.120
vector you off to the right person if
I don't have the answer to your question.