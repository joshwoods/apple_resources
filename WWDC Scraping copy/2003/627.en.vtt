WEBVTT

00:00:24.370 --> 00:00:25.800
My name's Tom Goguen.

00:00:25.800 --> 00:00:31.540
I'm the Director of Server Software here
at Apple in Worldwide Product Marketing.

00:00:31.540 --> 00:00:35.220
And I just want to welcome
you all to this session.

00:00:35.220 --> 00:00:37.640
I'm only here briefly.

00:00:37.640 --> 00:00:42.950
Basically, what we wanted to do was
to provide all of you with,

00:00:42.950 --> 00:00:45.600
essentially,
the view or the perspective of

00:00:45.630 --> 00:00:50.320
third parties doing projects,
enterprise-oriented projects,

00:00:50.320 --> 00:00:56.140
on Mac OS X and Mac OS X Server,
and to give you that sort of perspective

00:00:56.140 --> 00:00:58.620
on what we're trying to do here.

00:00:58.620 --> 00:01:02.240
So I'm going to introduce a
couple of gentlemen in a moment,

00:01:02.240 --> 00:01:05.700
and we'll talk a little bit
about what they've been doing.

00:01:05.700 --> 00:01:09.340
And then they're going to spend
the bulk of this time talking

00:01:09.340 --> 00:01:13.180
to you about what they've done
on Mac OS X and Mac OS X Server.

00:01:16.120 --> 00:01:20.080
So, enterprise applications in
a heterogeneous environment.

00:01:20.080 --> 00:01:23.760
That's just too many syllables for me
at this point along the line of the day,

00:01:23.760 --> 00:01:25.780
so we'll just skip through
this one really quickly.

00:01:25.780 --> 00:01:29.290
So on our agenda today
is going to be Infosys,

00:01:29.300 --> 00:01:32.900
and they're going to talk about
enterprise IT architecture.

00:01:32.900 --> 00:01:37.080
They've got some customer
scenarios and some great examples

00:01:37.140 --> 00:01:41.190
of things that they've done,
some really good information

00:01:41.190 --> 00:01:44.500
around best practices,
working with the products,

00:01:44.500 --> 00:01:45.980
and what they're doing.

00:01:46.000 --> 00:01:48.830
And from Infosys,
and I'm going to read from my notes

00:01:48.830 --> 00:01:54.400
here because I want to get this right,
and I'm never great with names.

00:01:54.400 --> 00:02:00.940
We have Amit Seth, and Amit is the
Senior Technical Architect at Infosys.

00:02:00.940 --> 00:02:04.680
And he's done a number of
IT integration projects,

00:02:04.740 --> 00:02:08.300
and Amit's going to come up here
in a moment and talk to you about

00:02:08.300 --> 00:02:12.100
what he's done and how he's done
it and show you in depth on how

00:02:12.100 --> 00:02:14.460
he's pulled all of that together.

00:02:15.130 --> 00:02:19.300
Following Amit,
we have Steve Olson from Sybase.

00:02:19.320 --> 00:02:21.800
And I've known Steve for a while,
actually.

00:02:21.800 --> 00:02:24.840
Once we started going down
the Mac OS X server route,

00:02:24.860 --> 00:02:28.930
I got talking to him about bringing
Sybase's enterprise class database

00:02:28.930 --> 00:02:31.160
server over onto Mac OS X server.

00:02:31.160 --> 00:02:34.980
And it's been a great relationship.

00:02:35.010 --> 00:02:38.500
Steve's the Technical Director for
Sybase Engineering,

00:02:38.500 --> 00:02:44.000
and Steve actually was in charge of
the Sybase port to Mac OS X server.

00:02:44.900 --> 00:02:47.480
And if you've followed
what Sybase has done,

00:02:47.480 --> 00:02:51.480
they literally are, in some ways,
they're driving us.

00:02:51.480 --> 00:02:55.730
They've pushed us to do things that
I think would be of interest to a lot

00:02:55.730 --> 00:03:00.220
of developers and a lot of IT people
who are looking at using the platform.

00:03:00.220 --> 00:03:02.240
For example,
Sybase has really done a lot of

00:03:02.240 --> 00:03:06.790
innovation around the management
console and is taking advantages of

00:03:06.790 --> 00:03:11.390
some of the APIs that we're starting to
make available in the management console

00:03:11.390 --> 00:03:14.680
for third parties to plug in their
information into the management console.

00:03:14.900 --> 00:03:17.900
So, we've been able to do a lot of
things with the server admin.

00:03:17.900 --> 00:03:19.900
So, take a look at what they've done.

00:03:19.900 --> 00:03:21.900
It's really exciting stuff.

00:03:21.900 --> 00:03:24.080
They've helped push us in a
number of other directions

00:03:24.530 --> 00:03:26.830
as well in terms of really,
you know,

00:03:26.930 --> 00:03:31.840
helping us to make Mac OS X server
really rock when it comes to databases.

00:03:31.900 --> 00:03:34.820
And we've got some new technology
going into Panther Server,

00:03:34.890 --> 00:03:38.710
things that, of course,
people would generally just skip over

00:03:38.750 --> 00:03:41.940
very quickly in something like a keynote,
but are of great interest

00:03:41.990 --> 00:03:42.860
to people like me.

00:03:42.900 --> 00:03:44.900
Things like AsyncIO going
into Panther Server.

00:03:44.900 --> 00:03:47.900
Which will really,
really help with database performance.

00:03:47.900 --> 00:03:50.660
So,
first we're going to have Ahmed Seth come

00:03:50.820 --> 00:03:53.840
up and talk to you about Infosys
and what they're doing there.

00:03:53.900 --> 00:03:57.900
And then Steve's going to come
up and talk to you about Sybase.

00:03:57.900 --> 00:04:02.900
And after that, there should be a little
bit of time for Q&A.

00:04:02.900 --> 00:04:05.900
And let me just make sure I click this.

00:04:05.900 --> 00:04:08.900
This is kind of interesting what
you will learn in this session.

00:04:08.900 --> 00:04:10.890
I always like that they
put these slides in here.

00:04:10.900 --> 00:04:13.980
But basically what we want you to
get out of this is we want you to

00:04:13.980 --> 00:04:17.900
have a chance to take a look at,
you know, what third parties are doing,

00:04:17.900 --> 00:04:21.100
what people are doing with
large enterprise class

00:04:21.210 --> 00:04:23.900
applications on the platform,
how they're doing it,

00:04:23.900 --> 00:04:27.900
how they're doing it to meet the
needs of your typical mixed client,

00:04:27.980 --> 00:04:31.360
mixed server enterprise environment,
how they're deploying and using

00:04:31.360 --> 00:04:32.900
our technologies to do that.

00:04:32.900 --> 00:04:38.620
So, I hope you take away a lot of that
good information and get some great

00:04:38.830 --> 00:04:41.340
ideas about what you can do with
your products and what you can

00:04:41.380 --> 00:04:42.900
do inside of your environments.

00:04:42.900 --> 00:04:43.900
So, without further ado,
I'm going to hand it over to Ahmed.

00:04:45.010 --> 00:04:45.900
Thank you.

00:04:45.900 --> 00:04:46.900
Thank you, Seth.

00:04:46.900 --> 00:04:48.600
Without further ado,
I'd like you all to provide a

00:04:48.610 --> 00:04:49.900
nice warm welcome to Ahmed Seth.

00:04:49.900 --> 00:04:50.900
Ahmed.

00:05:00.400 --> 00:05:04.250
I'm Amit Seth,
representing Infosys Technologies.

00:05:04.480 --> 00:05:13.710
Infosys is a leading systems integrator
with more than 15,000 employees.

00:05:14.880 --> 00:05:18.550
In the last few years,
Apple has been coming up with

00:05:18.950 --> 00:05:23.900
some really exciting products
in the enterprise state.

00:05:23.990 --> 00:05:25.740
The XServe,

00:05:27.210 --> 00:05:34.330
Support for open source softwares,
the OS 10 server version,

00:05:34.640 --> 00:05:37.860
This has really got us excited,
and we have been

00:05:37.860 --> 00:05:40.320
developing some solutions.

00:05:40.750 --> 00:05:47.440
for the Using the Apple Technologies,
which we wanted to share with you today.

00:05:48.680 --> 00:05:52.600
In today's session on
Enterprise Applications in

00:05:52.600 --> 00:05:57.040
a Heterogenious Environment,
I'll be talking about

00:05:57.990 --> 00:06:02.500
From a system integrator's perspective,
what does an enterprise

00:06:02.500 --> 00:06:04.870
IT architecture look like?

00:06:07.290 --> 00:06:10.300
What are the main components
of this architecture?

00:06:10.320 --> 00:06:16.410
And I'll use some examples of
applications that we developed for

00:06:16.410 --> 00:06:22.140
each of these components to showcase
how we leveraged Apple's technologies

00:06:22.680 --> 00:06:27.590
in an enterprise heterogeneous
environment to provide solutions

00:06:27.590 --> 00:06:30.280
for some common business problems.

00:06:30.280 --> 00:06:36.660
A few words about Infosys.

00:06:45.040 --> 00:06:54.660
We have more than 15,000 employees,
more than 370 clients.

00:06:55.110 --> 00:06:57.950
35 offices in 15 countries,
and we are still growing.

00:06:57.960 --> 00:07:05.300
We pioneered the global delivery model,
and

00:07:07.180 --> 00:07:11.700
We have, our greatest strength has been
our ability to deliver projects.

00:07:11.700 --> 00:07:18.340
95% of the projects that we have
delivered have been on time,

00:07:18.350 --> 00:07:20.980
on budget, or better.

00:07:25.210 --> 00:07:29.670
We are financially a very,
very strong company.

00:07:29.880 --> 00:07:33.990
Our financial strength has
been growing year over year.

00:07:35.590 --> 00:07:41.780
Last year, we closed our fiscal year with
net revenues over $750 million.

00:07:41.850 --> 00:07:45.860
We have cash reserves
of over $235 million.

00:07:48.510 --> 00:07:53.860
We have partnered with some
of the industry leaders,

00:07:53.920 --> 00:08:01.390
and most of our clients are in the
Fortune 500 and Fortune 1000 companies.

00:08:06.230 --> 00:08:13.900
Let's move on to what is our perspective
of an enterprise IT architecture.

00:08:20.470 --> 00:08:23.020
It's slightly late on a Friday evening.

00:08:23.070 --> 00:08:26.070
I want to inject some life into this.

00:08:26.080 --> 00:08:28.560
Providing

00:08:31.270 --> 00:08:35.260
Some real good insights into
why we are dividing this into

00:08:35.260 --> 00:08:37.490
these kinds of components.

00:08:39.510 --> 00:08:41.440
When we look at it,
we are essentially looking at

00:08:41.580 --> 00:08:46.980
some eight different categories
in an enterprise IT architecture.

00:08:47.160 --> 00:08:50.780
These categories are the
thick client category,

00:08:51.870 --> 00:08:53.790
The business components.

00:08:54.000 --> 00:08:58.890
Business components are the reusable
components which can be shared

00:08:58.970 --> 00:09:00.550
across multiple applications.

00:09:00.560 --> 00:09:05.680
Client access services,
which include the application servers,

00:09:05.860 --> 00:09:09.010
streaming servers, web servers,
and these are,

00:09:09.150 --> 00:09:14.390
this is essentially the layer
between the clients and the server.

00:09:15.600 --> 00:09:18.540
Application Security Services.

00:09:18.550 --> 00:09:23.600
These determine the authentication,
the security, the user profiles.

00:09:23.600 --> 00:09:29.350
Enterprise APIs,
the programmable interfaces,

00:09:29.690 --> 00:09:33.740
which allow data to be shared across
multiple applications within an

00:09:33.740 --> 00:09:36.700
enterprise or over the Internet.

00:09:37.520 --> 00:09:42.920
Bus services allow computing in a
distributed computing environment,

00:09:42.930 --> 00:09:51.540
include the domain name services,
directory services, CORBA, COM, IIOP,

00:09:52.430 --> 00:09:57.970
Operating system provided services,
which essentially include input/output

00:09:57.970 --> 00:09:59.980
services and network services.

00:10:00.000 --> 00:10:05.900
And the last category is the
server hardware platform itself,

00:10:05.900 --> 00:10:11.790
which includes the processor
hardware for the server.

00:10:16.780 --> 00:10:19.880
So these were the eight categories
that I spoke to you about.

00:10:19.880 --> 00:10:27.640
Let's move on to our first category,
that is client solutions.

00:10:27.670 --> 00:10:31.000
Now in each of those eight categories
that I was talking to you about,

00:10:31.350 --> 00:10:36.430
in this session, we'll touch upon some
six of those categories.

00:10:36.440 --> 00:10:42.640
I'll be talking to you about
a common business problem

00:10:42.640 --> 00:10:45.050
in each of this category.

00:10:45.680 --> 00:10:49.880
A solution which we developed
leveraging Apple's technologies

00:10:50.310 --> 00:10:55.960
to address that problem and how we
were able to integrate that solution

00:10:57.600 --> 00:11:07.800
[Transcript missing]

00:11:10.600 --> 00:11:23.200
[Transcript missing]

00:11:23.600 --> 00:11:29.300
[Transcript missing]

00:11:31.650 --> 00:11:37.780
Things like the transaction model,
support for threaded transactions,

00:11:37.840 --> 00:11:42.730
conformity with the existing
IT infrastructure and strategy

00:11:42.870 --> 00:11:49.100
for deployment and distribution
are important when we need to

00:11:49.160 --> 00:11:52.290
consider solutions in this space.

00:11:57.850 --> 00:12:03.740
Let's take a look at the implementation
scenario for a particular solution

00:12:03.740 --> 00:12:05.110
that we developed in this space.

00:12:05.180 --> 00:12:11.620
The application is a
mobile sales application.

00:12:14.160 --> 00:12:17.320
What was the customer
situation in this case?

00:12:17.510 --> 00:12:21.420
The customer situation was that
they had field sales representatives

00:12:22.040 --> 00:12:24.580
who already had Apple's PowerBooks.

00:12:24.600 --> 00:12:28.560
There were...

00:12:30.650 --> 00:12:35.920
They did not have any kind of an
integration with the central CRM package,

00:12:35.940 --> 00:12:39.030
which was on a different platform,
which had a different technology.

00:12:39.040 --> 00:12:45.620
They did not have an application to
integrate from their PowerBooks to

00:12:46.340 --> 00:12:49.470
the central CRM database.

00:12:50.450 --> 00:12:52.750
And the client was losing business.

00:12:52.760 --> 00:12:58.510
They were at a decision point whether
we need to go in and buy a product from

00:12:58.660 --> 00:13:04.200
the market and go in and replace our
Apple PowerBooks and provide people with

00:13:04.200 --> 00:13:10.080
laptops based on other technologies,
or to continue with their carrying the

00:13:10.080 --> 00:13:16.070
Apple's PowerBooks and develop some
kind of a solution which allows them to

00:13:16.070 --> 00:13:22.160
leverage the central CRM database that
already exists within the organization.

00:13:25.410 --> 00:13:30.040
We identified the business drivers for
the solution that needs to be developed,

00:13:30.040 --> 00:13:35.380
in this case,
as an application that can allow better

00:13:35.900 --> 00:13:42.640
collaboration between the sales teams,
and which essentially allows

00:13:42.640 --> 00:13:47.880
that the solution that the sales
representatives are going to use to

00:13:48.450 --> 00:13:52.500
integrate data with the central CRM,
enabling better reporting,

00:13:52.600 --> 00:13:56.530
better decision making
for the senior management.

00:14:00.600 --> 00:14:04.920
The solution that we proposed
was an offline solution

00:14:05.010 --> 00:14:08.300
that can run on a Macintosh,
because these are field salespeople,

00:14:08.300 --> 00:14:09.850
they're moving around.

00:14:09.880 --> 00:14:16.620
And the ability for this solution to
integrate with the central CRM database.

00:14:20.390 --> 00:14:24.360
Why did we go in for Apple,
the biggest driver?

00:14:24.440 --> 00:14:28.550
They already had Apple's Power Books.

00:14:29.490 --> 00:14:37.320
Also, Objective-C and CoQA allowed us
to rapidly develop an application

00:14:37.880 --> 00:14:43.790
to be used by the sales
representatives in this company.

00:14:44.950 --> 00:14:49.680
We developed a complete three-tier
solution to run on their PowerBooks.

00:14:49.680 --> 00:14:54.300
We had a client built of
Objective-C and CoQua.

00:14:54.340 --> 00:14:58.230
CoQua using Objective-C.

00:14:58.540 --> 00:15:00.610
A server, custom server written in Java.

00:15:00.820 --> 00:15:07.000
And we took an open source database,
that is PostgreSQL database,

00:15:07.010 --> 00:15:09.000
and installed it on their machines.

00:15:09.020 --> 00:15:14.690
Then we wrote some custom
classes to allow them

00:15:15.420 --> 00:15:18.230
To allow this local server,
the local Java server

00:15:18.230 --> 00:15:22.950
running on their machines,
to exchange data over socket

00:15:22.980 --> 00:15:28.400
connections with a server running
against the central CRM database.

00:15:28.400 --> 00:15:30.750
This essentially allowed

00:15:31.140 --> 00:15:33.000
will be presenting the first
session of the session,

00:15:33.000 --> 00:15:39.000
Data Synchronization between their local
databases and the central CRM database.

00:15:39.000 --> 00:15:43.410
Let's look at the details of
the technical implementation.

00:15:45.890 --> 00:15:50.580
So what you see on this side
is what was already existing.

00:15:50.610 --> 00:15:54.400
This was their central
CRM database hosted in a data

00:15:54.400 --> 00:15:58.350
center within their organization.

00:16:02.760 --> 00:16:08.770
What we developed was a
three-tiered solution.

00:16:11.460 --> 00:16:14.660
We were looking at the
choice of databases.

00:16:14.660 --> 00:16:18.370
The client wanted a...

00:16:19.290 --> 00:16:22.360
Cost-effective way to install database.

00:16:22.360 --> 00:16:31.030
It was a database to be used for
a single person on a PowerBook and

00:16:32.000 --> 00:16:34.290
We looked at the open source
databases that were available.

00:16:34.300 --> 00:16:43.160
The two databases that we zeroed
in on were MySQL and PostgreSQL.

00:16:43.990 --> 00:16:50.250
We selected PostgreSQL based
upon the fact that it had

00:16:50.350 --> 00:16:52.150
better support for transactions.

00:16:52.180 --> 00:16:57.530
You could do rollbacks,
you could write functions.

00:16:58.430 --> 00:17:02.280
And at the time when we
developed the solution,

00:17:02.280 --> 00:17:06.720
PostgreSQL was the only database,
open source database,

00:17:06.780 --> 00:17:11.480
which was truly Unicode compatible,
when we compared MySQL to this.

00:17:11.480 --> 00:17:15.400
MySQL, at that time,
you could have a Japanese version,

00:17:15.400 --> 00:17:18.400
you could have a
Western European version,

00:17:18.400 --> 00:17:20.920
but nothing which allowed
you to support everything.

00:17:20.920 --> 00:17:28.400
I believe the latest version
of MySQL does support Unicode.

00:17:31.360 --> 00:17:33.230
So this was our implementation.

00:17:33.300 --> 00:17:43.200
The server was communicating with
a server within the data center.

00:17:43.200 --> 00:17:48.160
And that server was essentially
dealing with the database,

00:17:48.260 --> 00:17:50.340
was sending in transactions
against the database.

00:17:50.400 --> 00:17:54.910
The solution enabled us to

00:17:56.970 --> 00:18:07.940
To prove that on an OS X PowerBook,
you can essentially have all the three

00:18:07.950 --> 00:18:11.520
components required for an application.

00:18:11.620 --> 00:18:16.800
The client, the server,
and the database all running together.

00:18:16.800 --> 00:18:18.200
And it's been a stable application.

00:18:18.200 --> 00:18:21.730
It's been one of our
good implementations.

00:18:27.340 --> 00:18:33.120
Let's move on to our second category,
that's the business components.

00:18:33.400 --> 00:18:36.060
When we talk about the
business components,

00:18:36.060 --> 00:18:40.140
we are talking about reusable
components which can be shared

00:18:40.760 --> 00:18:43.790
across multiple applications.

00:18:46.120 --> 00:18:53.130
When we talk about components that can
be shared across multiple applications,

00:18:53.150 --> 00:18:56.520
the things,
the major considerations in this

00:18:56.520 --> 00:19:02.830
case are what kind of functions and
services do these components offer?

00:19:05.080 --> 00:19:08.950
What kind of interfaces are available?

00:19:09.020 --> 00:19:16.320
Those have to be standard interfaces
to be implemented across applications.

00:19:17.730 --> 00:19:23.080
The development and deployment
of these components have to be

00:19:23.100 --> 00:19:27.320
independent of the applications with
which they are being linked with.

00:19:31.110 --> 00:19:34.300
Let's take a look at a
typical implementation

00:19:34.300 --> 00:19:37.140
scenario for this component.

00:19:39.350 --> 00:19:44.810
The implementation scenario for
this component is an automated

00:19:44.890 --> 00:19:47.320
fax-integrated application.

00:19:47.320 --> 00:19:51.300
It's a very easy solution,
a very simple solution,

00:19:51.320 --> 00:19:57.500
but resolved a big business problem.

00:19:59.710 --> 00:20:04.240
When we came in,
we saw that the customer situation was,

00:20:04.280 --> 00:20:10.600
it was a large organization
with a lot of employees.

00:20:10.610 --> 00:20:15.520
are different geographic locations
who essentially use to submit their

00:20:15.840 --> 00:20:19.620
expense bills for reimbursements.

00:20:19.950 --> 00:20:23.980
They had to fill in a form which
was being driven by an application.

00:20:24.050 --> 00:20:27.140
They used to fill in,
"I spent so many dollars in traveling,

00:20:27.140 --> 00:20:31.880
I spent so many dollars in food,
I spent so many dollars in business

00:20:31.880 --> 00:20:34.480
expenses." Submit that form.

00:20:34.580 --> 00:20:40.220
And then the original bills had
to be mailed to a back office,

00:20:40.320 --> 00:20:42.490
where someone used to
look at those bills,

00:20:42.670 --> 00:20:45.390
relate it to who submitted it,

00:20:45.740 --> 00:20:48.580
Checkmark on that form, yes,
this is correct.

00:20:48.580 --> 00:20:52.480
And then approve the request.

00:20:53.490 --> 00:20:56.050
This was a manual,
resource-intensive process

00:20:56.220 --> 00:20:59.560
in that organization,
and it was becoming a

00:20:59.600 --> 00:21:01.710
big overhead for them.

00:21:02.320 --> 00:21:06.390
So they were essentially looking
around for a solution that allows

00:21:06.390 --> 00:21:09.230
them to automate this task.

00:21:11.460 --> 00:21:18.850
The solution that we proposed was
the electronic submission of bills

00:21:19.850 --> 00:21:22.590
along with their expense details.

00:21:26.350 --> 00:21:28.800
What made us select Apple in this case?

00:21:28.860 --> 00:21:33.940
What made us select
Apple in this case was,

00:21:33.940 --> 00:21:36.610
one, it was a low-cost solution.

00:21:36.620 --> 00:21:40.720
It was easy to monitor and maintain.

00:21:41.230 --> 00:21:46.540
and it was extremely easy to integrate
this in the existing infrastructure.

00:21:46.540 --> 00:21:50.460
We'll take a look into the technical
details of how we did this.

00:21:55.190 --> 00:22:00.870
What we did was,
we took the open source package EFAX,

00:22:01.720 --> 00:22:06.680
compiled it on OS X.

00:22:08.800 --> 00:22:13.700
We also took ImageMagick,
compiled that on OS X.

00:22:13.700 --> 00:22:17.200
Actually,
OS X versions are already available

00:22:17.200 --> 00:22:20.020
on the net for ImageMagick.

00:22:21.070 --> 00:22:26.180
eFax allows us to receive fax messages.

00:22:27.050 --> 00:22:35.060
The process that we defined was that
an employee prints out the expense

00:22:35.090 --> 00:22:40.210
bill form from whatever they submitted.

00:22:40.660 --> 00:22:46.100
That expense will form,
has a barcode printed on top of it.

00:22:47.070 --> 00:22:52.530
They then take the original bills and
this form and fax all of them together.

00:22:53.230 --> 00:22:59.490
That fax is received by the electronics,
the e-fax.

00:23:00.100 --> 00:23:08.730
And it uses ImageMagick to convert
that TIFF file to a GIF format.

00:23:09.400 --> 00:23:16.040
Tiff-to-GIF conversion was
required for a barcode reader,

00:23:16.080 --> 00:23:19.020
which they already had
within their organization,

00:23:19.020 --> 00:23:22.310
a software which could
essentially read the barcodes.

00:23:23.830 --> 00:23:27.370
And then we wrote a small
custom component which allowed

00:23:27.370 --> 00:23:34.440
us to submit those forms
against those electronic bills,

00:23:34.440 --> 00:23:38.660
the copies of those electronic bills,
against the actual form

00:23:38.660 --> 00:23:40.670
within the application.

00:23:42.810 --> 00:23:45.390
Now, normally,

00:23:46.960 --> 00:23:57.130
This kind of a solution would have
entailed going in for a small server,

00:23:57.130 --> 00:23:57.610
for a small platform,

00:23:59.000 --> 00:24:31.300
[Transcript missing]

00:24:31.600 --> 00:24:35.290
They came up with a few other things
where they were submitting copies of

00:24:35.340 --> 00:24:37.320
the original documents electronically.

00:24:37.320 --> 00:24:39.330
They wanted those to be
submitted electronically.

00:24:39.340 --> 00:24:46.680
And this solution allowed us to
do that because essentially that

00:24:46.690 --> 00:24:50.820
barcode that we were printing on it
was a tag which allowed us to route

00:24:50.940 --> 00:24:54.860
it to any kind of an application,
to associate it anywhere.

00:24:54.860 --> 00:24:59.220
We implemented it for one application,
but we left the architecture open

00:24:59.220 --> 00:25:02.900
for them to go in and implement
it later on with any other

00:25:02.900 --> 00:25:05.860
application that they wanted to.

00:25:09.760 --> 00:25:15.770
Again, in this case,
the only component that we brought in was

00:25:16.020 --> 00:25:20.520
and XServe with the electronic facts,
image magic,

00:25:20.550 --> 00:25:26.680
installed on it and just plugged it
into their existing IT architecture.

00:25:33.650 --> 00:25:35.800
Let's move on to our third component.

00:25:35.840 --> 00:25:39.700
That's the client access services.

00:25:40.020 --> 00:25:44.140
Client access services are
essentially the layer between

00:25:44.140 --> 00:25:47.450
the client and the server.

00:25:48.450 --> 00:25:52.560
The common implementations
like web servers,

00:25:52.760 --> 00:25:54.920
streaming servers,

00:25:56.140 --> 00:25:59.340
Enterprise Application Servers,
where it's

00:25:59.340 --> 00:26:02.580
Enterprise Application Servers,
but with the trend that's

00:26:02.600 --> 00:26:04.540
going on in the industry,
it may change to

00:26:04.590 --> 00:26:07.080
Enterprise Java Application Servers.

00:26:07.080 --> 00:26:09.380
It's still not
Enterprise Java Application Servers,

00:26:09.380 --> 00:26:09.830
though.

00:26:13.100 --> 00:26:22.400
[Transcript missing]

00:26:23.000 --> 00:26:37.400
[Transcript missing]

00:26:38.560 --> 00:26:43.160
An implementation scenario
where we went in and implemented

00:26:43.160 --> 00:26:46.620
a solution in this category.

00:26:49.990 --> 00:26:52.600
What was the client
situation in this case?

00:26:52.670 --> 00:26:56.680
The client situation
was that the client had

00:26:58.600 --> 00:27:02.950
A very, very big,
it was a big corporation.

00:27:02.980 --> 00:27:06.710
They had more than 10,000 employees,
and they had a central

00:27:06.710 --> 00:27:08.960
human resources application.

00:27:10.700 --> 00:27:17.480
That could be used by the
employees on their workstations

00:27:17.550 --> 00:27:20.820
to do all the HR-related things.

00:27:20.830 --> 00:27:23.720
Writing reviews,
managers used to write reviews,

00:27:23.720 --> 00:27:25.910
employees used to submit
their leave applications.

00:27:26.780 --> 00:27:36.070
That was essentially the central
HR application within that organization.

00:27:36.890 --> 00:27:40.860
And they had a problem that,
because this was based

00:27:40.950 --> 00:27:43.000
on the workstation,

00:27:45.860 --> 00:27:49.390
Employees could not use it while
they were traveling or while

00:27:49.390 --> 00:27:54.750
they did not have access to the
workstations in their offices.

00:27:54.960 --> 00:28:00.910
So they wanted a way to access
this information anytime,

00:28:01.010 --> 00:28:02.540
anywhere.

00:28:03.200 --> 00:28:12.600
[Transcript missing]

00:28:13.900 --> 00:28:19.200
[Transcript missing]

00:28:19.870 --> 00:28:25.490
Also, another driver in this case,
like in any organization where we go,

00:28:25.700 --> 00:28:49.100
[Transcript missing]

00:28:50.990 --> 00:28:55.000
They had been using a lot of
custom code in the database.

00:28:55.060 --> 00:28:59.530
So it did not allow you to
go in and build something on

00:28:59.660 --> 00:29:02.580
top of the database directly.

00:29:02.960 --> 00:29:06.130
So you could not go in and build
a web application and go in and

00:29:06.180 --> 00:29:09.080
interface with the database directly.

00:29:09.160 --> 00:29:14.060
That was an issue in this case.

00:29:14.280 --> 00:29:17.700
That is why the problem was not
as simple as just writing a simple

00:29:17.700 --> 00:29:20.660
web interface to a database.

00:29:23.610 --> 00:29:29.510
Why did we go in for Apple in this case?

00:29:30.110 --> 00:29:35.650
We went in for Apple's technologies
was because WebObjects on

00:29:36.680 --> 00:29:44.390
OS X provides us with an excellent
platform to go in and build

00:29:44.680 --> 00:29:46.920
Web-based applications.

00:29:46.940 --> 00:29:52.800
It's also a very cost-effective
way and allows us to develop

00:29:52.800 --> 00:29:54.920
applications very rapidly.

00:29:57.520 --> 00:30:00.760
The architecture that we implemented
and the solution that we provided

00:30:01.820 --> 00:30:09.360
allowed us to reuse most of the existing
components within this application.

00:30:10.930 --> 00:30:12.640
This is what we did.

00:30:12.640 --> 00:30:15.910
So on your right side,
you are looking at--

00:30:17.180 --> 00:30:23.520
The way the application used to
exist within their environment.

00:30:23.520 --> 00:30:32.400
They had an enterprise HR database,
and they had their custom server,

00:30:32.400 --> 00:30:36.940
which was interfacing with this database.

00:30:36.980 --> 00:30:43.560
The custom server did have
APIs defined to go in and access data,

00:30:46.720 --> 00:30:48.260
That was it.

00:30:48.260 --> 00:30:51.460
I mean, you couldn't do too much.

00:30:52.400 --> 00:30:59.000
[Transcript missing]

00:31:00.700 --> 00:31:06.600
[Transcript missing]

00:31:06.830 --> 00:31:10.360
Our own framework, which we compiled with
the WebObjects code,

00:31:11.030 --> 00:31:19.040
which allowed us to interface with those
APIs and provided a layer between the

00:31:19.040 --> 00:31:21.860
custom server and the WebObjects server.

00:31:21.860 --> 00:31:25.790
So the WebObjects server was
communicating with the custom

00:31:25.870 --> 00:31:28.060
server in this environment.

00:31:29.800 --> 00:31:36.100
[Transcript missing]

00:31:36.460 --> 00:31:42.350
was a very,
we could develop this really fast,

00:31:42.990 --> 00:31:43.530
and it allowed us

00:31:43.790 --> 00:31:47.700
and I are here today to build
a very cost-effective solution.

00:31:47.730 --> 00:31:53.870
We deployed the entire thing on an exerf,
a single exerf,

00:31:54.250 --> 00:31:58.400
The solution is being used
as and when the employees in

00:31:58.400 --> 00:32:01.150
this company travel outside,
as and when the employees want

00:32:01.220 --> 00:32:02.260
to access it from the web.

00:32:02.300 --> 00:32:08.230
More than 10,000 employees are
using this kind of a solution.

00:32:12.100 --> 00:32:27.000
[Transcript missing]

00:32:30.300 --> 00:32:37.500
[Transcript missing]

00:32:37.910 --> 00:32:43.590
Between applications in the same
organization or over the internet,

00:32:46.350 --> 00:32:50.260
Major considerations when we have
to go in and provide a solution

00:32:50.450 --> 00:32:55.700
using enterprise APIs are:

00:32:57.180 --> 00:33:00.680
We have to consider object persistence.

00:33:00.720 --> 00:33:04.140
We have to consider the
transaction services.

00:33:04.180 --> 00:33:07.270
Transaction services is
essentially the core.

00:33:07.370 --> 00:33:14.010
The Data Access Models and the
Data Distribution Services.

00:33:15.330 --> 00:33:24.350
Let's take a look at a common
implementation scenario in this space.

00:33:31.430 --> 00:33:36.610
The application that we developed in
this space was a call center application.

00:33:40.150 --> 00:33:44.910
The client situation when we
went in was that the client was

00:33:44.910 --> 00:33:50.650
losing business because of the
lack of a call center solution.

00:33:52.880 --> 00:33:56.450
The current way in which
they were tracking calls was

00:33:57.120 --> 00:33:59.140
they used to receive calls.

00:33:59.190 --> 00:34:01.720
They had a very,
very rudimentary way of going in

00:34:01.720 --> 00:34:03.820
and entering it into a database.

00:34:03.860 --> 00:34:07.680
They did have a proper database,
but the way they were using

00:34:07.680 --> 00:34:13.080
that database was in a very,
very rudimentary fashion.

00:34:15.040 --> 00:34:19.440
And it initially started with the
client being a small-time company,

00:34:19.440 --> 00:34:23.860
and they grew up rapidly in
the space of a few years.

00:34:23.900 --> 00:34:27.840
So the model that they used
initially just could not scale up

00:34:28.470 --> 00:34:32.980
to the kind of requirements that
they had in a few years' time.

00:34:36.830 --> 00:34:41.610
The business problem that they were
facing was that they were losing

00:34:41.610 --> 00:34:48.770
customers because of their inability
to respond back to their calls on time.

00:34:48.780 --> 00:34:51.780
And they wanted to address this.

00:34:58.460 --> 00:35:04.990
The solution that we proposed
was a low-cost solution

00:35:05.740 --> 00:35:11.040
With an ability to support high
transaction volumes that were required,

00:35:11.050 --> 00:35:14.980
the ability to scale up even
further as this company grew up,

00:35:15.800 --> 00:35:24.150
and the ability for this solution to
integrate with multiple data sources.

00:35:28.470 --> 00:35:31.580
Why did we think Apple is the
best solution in this case?

00:35:31.580 --> 00:35:40.060
Apple was the best solution in this
case because it provided us with a

00:35:40.060 --> 00:35:42.860
server optimized version of Java.

00:35:43.510 --> 00:35:48.910
A low-cost enterprise application
deployment alternative with

00:35:48.910 --> 00:35:53.300
XServe OS X Server and with
JBoss compiled on that.

00:35:57.700 --> 00:36:01.090
Support for open source
technologies like JBoss,

00:36:01.100 --> 00:36:03.390
where essentially the,

00:36:03.600 --> 00:36:08.600
The deciding factors in moving
towards this kind of a solution.

00:36:12.530 --> 00:36:18.660
Let's take a look at the implementation
of how we went in and what we did.

00:36:18.720 --> 00:36:22.920
So on the right side,
you're looking at what is colored

00:36:22.920 --> 00:36:27.940
in orange is your existing
components that were already

00:36:28.020 --> 00:36:30.130
existing within this enterprise.

00:36:31.330 --> 00:36:35.690
These were the database.

00:36:39.280 --> 00:36:44.680
With data inside it,
which was still meaningful,

00:36:44.700 --> 00:36:53.020
but just that it could not really be
used or it could not really be leveraged

00:36:53.360 --> 00:36:57.310
off given their current solution.

00:36:57.730 --> 00:37:02.080
They had some reporting
applications on Windows,

00:37:02.100 --> 00:37:06.750
which used to go in directly
against that database.

00:37:07.630 --> 00:37:10.490
to come up with some kinds of reports.

00:37:11.080 --> 00:37:19.150
Again, their reporting requirements had
grown over time and they were trying

00:37:19.350 --> 00:37:26.990
to figure out how to enhance their
reporting solutions to come up with a...

00:37:27.400 --> 00:37:30.280
to come up with a model where
they can have better reporting

00:37:30.280 --> 00:37:33.460
and better call tracking,
and allowing the management

00:37:33.550 --> 00:37:35.910
to take speedy decisions.

00:37:39.820 --> 00:37:42.460
On your left side is
what you're looking at,

00:37:42.470 --> 00:37:44.220
the solution that we implemented.

00:37:44.240 --> 00:37:49.230
What we implemented was, we took

00:37:49.650 --> 00:37:53.980
Some EJB components,
prebuilt EJB components,

00:37:54.000 --> 00:37:56.010
open source components
which are available.

00:37:56.020 --> 00:37:59.730
We wrote some of our own.

00:38:02.760 --> 00:38:08.260
Use JBoss on OS X to host these

00:38:10.460 --> 00:38:15.640
Our custom components allowed
us interfacing with the

00:38:15.640 --> 00:38:19.000
current reporting applications,
whatever they had.

00:38:19.860 --> 00:38:23.340
It also interfaced with the database.

00:38:23.360 --> 00:38:28.760
We wrote some more components to provide
interfaces for even more reporting

00:38:28.760 --> 00:38:31.520
application as were being required.

00:38:33.020 --> 00:38:34.510
And,

00:38:35.300 --> 00:38:42.730
made the entire solution such
that it could scale up with

00:38:42.800 --> 00:38:46.200
the growth of this company.

00:38:47.320 --> 00:38:52.060
So essentially,
putting in this kind of a middle layer of

00:38:52.770 --> 00:39:00.500
EJB components on an XSERV allowed us to
use the existing reporting applications,

00:39:00.500 --> 00:39:02.870
the existing database,

00:39:03.100 --> 00:39:08.700
[Transcript missing]

00:39:20.630 --> 00:39:28.300
I'll move on to our next category,
which is operating system services.

00:39:30.800 --> 00:39:41.200
[Transcript missing]

00:39:41.600 --> 00:39:46.710
From our perspective,
hold solutions in the storage and in the

00:39:46.710 --> 00:39:49.940
distributed computing environment space.

00:39:51.470 --> 00:39:55.100
Storage falls also under
the server platform stage,

00:39:55.120 --> 00:39:59.080
but in our classification,
we have classified it under the

00:39:59.080 --> 00:40:01.570
operating system services space.

00:40:01.830 --> 00:40:08.500
The major considerations that we as
solutions providers have when we start

00:40:08.500 --> 00:40:12.160
looking at solutions in this space are:

00:40:12.890 --> 00:40:16.180
Is the solution really interoperable?

00:40:16.180 --> 00:40:20.350
Interoperability is a
key in this component.

00:40:24.180 --> 00:40:29.090
What kind of scalability
does the solution offer?

00:40:29.100 --> 00:40:33.890
What kind of a performance
does the solution offer?

00:40:34.680 --> 00:40:38.200
What kind of a security is
offered by the solution that we

00:40:38.200 --> 00:40:40.480
have to develop in this layer?

00:40:41.550 --> 00:40:50.230
Let's take a look at a typical
implementation scenario in this case.

00:40:55.100 --> 00:41:02.840
We had this organization where there were
multiple clients on different platforms.

00:41:02.910 --> 00:41:05.600
They wanted to share
files across platforms,

00:41:05.640 --> 00:41:07.240
and these were large-sized files.

00:41:07.290 --> 00:41:10.100
These were very large-sized files.

00:41:11.160 --> 00:41:14.920
This was a geographically dispersed
organization with offices in

00:41:14.920 --> 00:41:18.160
multiple countries across the globe.

00:41:20.680 --> 00:41:24.010
Considerations like sending
files over wide area network

00:41:24.330 --> 00:41:30.260
repeatedly was an issue,
a resource drainage issue.

00:41:31.810 --> 00:41:40.180
Considerations like the ability to
make the large size files available to

00:41:40.180 --> 00:41:45.130
the persons on time were a big issue.

00:41:47.010 --> 00:41:51.970
They also wanted a low-cost file
storage solution along with it,

00:41:51.970 --> 00:41:55.740
because the files that were being,
essentially the solution that

00:41:55.740 --> 00:41:59.100
they were looking for was,
I put the file in your system,

00:41:59.100 --> 00:42:02.720
there are a set of business rules,
the file gets stored,

00:42:02.720 --> 00:42:06.230
and it also gets distributed
to multiple locations,

00:42:06.230 --> 00:42:11.020
wherever the other users are who have
subscribed to this kind of a file.

00:42:11.020 --> 00:42:15.570
The subscription is being determined
by the business rules which

00:42:15.940 --> 00:42:18.250
are built into the application.

00:42:19.610 --> 00:42:25.000
So let's take a look at the
implementation scenario in this case.

00:42:27.140 --> 00:42:33.710
The solution that we proposed
was a low-cost storage solution.

00:42:35.490 --> 00:42:39.060
The client also had an
issue with insufficient rack

00:42:39.060 --> 00:42:41.160
space in their data center.

00:42:41.240 --> 00:42:49.350
So the solution that we proposed
was a rack space friendly solution.

00:42:49.590 --> 00:42:52.530
We provided a solution that
could be dovetailed with their

00:42:52.600 --> 00:42:55.760
existing IT infrastructure.

00:42:55.970 --> 00:43:00.180
Why did we think Apple is the
best solution in this case?

00:43:01.890 --> 00:43:14.270
Apple with Mac OS X server,
with Mac OS X, with OS X server,

00:43:14.270 --> 00:43:14.270
essentially allows you

00:43:15.600 --> 00:43:21.690
To support multiple
kinds of file protocols.

00:43:21.690 --> 00:43:28.290
Also, XServe provides the lowest
cost storage in the industry.

00:43:29.150 --> 00:43:32.100
And that is on the disk,
on the server disk.

00:43:32.900 --> 00:43:37.090
And the fact that

00:43:38.170 --> 00:43:42.910
XServe is also one of the most
rack-friendly servers in the 1U category.

00:43:42.940 --> 00:43:46.920
So what did we develop?

00:43:52.160 --> 00:43:58.790
Our technology implementation
in this case was,

00:43:58.790 --> 00:44:02.400
we essentially went in
and installed XSERVs

00:44:02.910 --> 00:44:04.540
at those multiple locations.

00:44:04.540 --> 00:44:07.220
The initial solution that we provided,
we actually provided the

00:44:07.220 --> 00:44:08.240
solution in two phases.

00:44:08.260 --> 00:44:11.890
The initial solution that we
provided was to go in and install

00:44:11.970 --> 00:44:14.060
XSERVs at multiple locations.

00:44:16.500 --> 00:44:22.800
[Transcript missing]

00:44:23.230 --> 00:44:34.580
To actually go in and do NFS mounts
from the XRFs and add in files.

00:44:36.440 --> 00:44:39.970
This was done because the first
solution that they wanted and

00:44:39.970 --> 00:44:45.450
the initial solution that they
wanted was essentially to leverage

00:44:45.770 --> 00:44:51.340
had to be built in a very quick
timeframe in a really tight,

00:44:51.610 --> 00:44:53.080
on really tight deadlines.

00:44:53.080 --> 00:44:58.750
But what was common to the
solution was that it allowed

00:44:59.360 --> 00:45:04.100
files to be stored, to be transferred,
between these multiple

00:45:04.260 --> 00:45:08.350
XSERVs over TCP/IP protocol,

00:45:09.290 --> 00:45:10.820
Over-socket Connections.

00:45:10.950 --> 00:45:15.340
So, based upon the business rule,
files were transferred from

00:45:15.340 --> 00:45:18.670
one XSERV to the other.

00:45:22.760 --> 00:45:29.970
What this allowed was, one,
a large-size file only had to make one

00:45:29.970 --> 00:45:35.690
trip over the wide area network to cater
to as many downloads as are required

00:45:36.070 --> 00:45:40.490
by the users at a particular location.

00:45:41.220 --> 00:45:45.080
It allowed storage of files
at each of these locations,

00:45:45.080 --> 00:45:49.410
and also the fact that downloads
from the local servers were always

00:45:49.420 --> 00:45:53.340
faster as compared to downloads
over the wide area network.

00:45:53.360 --> 00:45:57.630
The second phase of the solution,
we did away with the

00:45:57.630 --> 00:46:01.200
NFS mounting of that,
because that was not a scalable model.

00:46:01.200 --> 00:46:04.480
That was a temporary solution
that we had to provide.

00:46:05.280 --> 00:46:08.670
And then, that is when we went in for
essentially a small layer,

00:46:08.670 --> 00:46:16.820
which could be installed on each of
these clients as add the file layer,

00:46:16.820 --> 00:46:18.020
which...

00:46:19.000 --> 00:46:36.800
[Transcript missing]

00:46:37.410 --> 00:46:42.300
and were then being distributed
in this kind of an environment.

00:46:47.380 --> 00:46:52.360
This is one solution where we
essentially leverage the low-cost

00:46:52.360 --> 00:47:01.720
storage provided by XSERVs and the
XSERVs ability to be installed as a

00:47:01.720 --> 00:47:06.940
rack-free server in their data centers.

00:47:11.930 --> 00:47:18.080
Let's take a look at some of
our best practices when we go

00:47:18.080 --> 00:47:21.710
in and implement solutions.

00:47:24.430 --> 00:47:30.570
Like any systems integrator,
we are strongly focused on using tools.

00:47:30.930 --> 00:47:36.530
Our best practice is that we
have got a dedicated team which

00:47:37.000 --> 00:47:41.230
just works on identifying tools,

00:47:42.100 --> 00:48:04.000
[Transcript missing]

00:48:04.720 --> 00:48:09.120
Debugging frameworks which allow
us to do a lot of debugging

00:48:09.390 --> 00:48:11.000
with a Java application.

00:48:11.040 --> 00:48:17.000
Tools which allow us to do
distribution of software on Macintosh.

00:48:17.020 --> 00:48:20.800
There are times when
there are some challenges.

00:48:20.810 --> 00:48:24.110
We have developed some tools
which allow us to do that.

00:48:27.340 --> 00:48:32.700
We also have well-defined processes and
methodologies for software delivery.

00:48:34.070 --> 00:48:38.440
When we talk about software delivery,
we essentially have processes falling

00:48:38.440 --> 00:48:40.600
into three different categories.

00:48:40.660 --> 00:48:44.670
These categories are whether
it's a custom system integration,

00:48:44.680 --> 00:48:48.120
whether it's a solutions
systems integration,

00:48:48.160 --> 00:48:51.720
or is this an infrastructure
systems integration.

00:48:51.770 --> 00:48:53.820
These are the three main categories.

00:48:53.850 --> 00:49:00.680
And our processes differ
slightly for each one of these.

00:49:01.430 --> 00:49:09.120
What is common to all our processes
and the core set of processes

00:49:09.160 --> 00:49:12.350
that we have developed around
all these three are pertaining

00:49:12.430 --> 00:49:15.500
to technology change management.

00:49:18.200 --> 00:49:22.140
Technology change management
is implemented in three stages:

00:49:22.200 --> 00:49:26.540
the planning stage, the analysis stage,
and the deployment stage.

00:49:26.610 --> 00:49:31.180
In the planning stage, we go in,
we study, just as I was presenting,

00:49:31.180 --> 00:49:36.460
we go in and we study what is
the solution that is required.

00:49:37.720 --> 00:49:39.720
What are the business
drivers for this solution?

00:49:39.740 --> 00:49:43.740
What kind of a cost?

00:49:46.970 --> 00:49:49.820
Cost limit is there to the
solution that needs to be provided.

00:49:49.860 --> 00:49:53.420
What are the different
parameters like scalability,

00:49:53.420 --> 00:49:58.700
etc., that have to be
considered to use the solution?

00:49:58.820 --> 00:50:03.360
We then move into the evaluation phase,
where we start evaluating the

00:50:03.420 --> 00:50:08.900
different solutions against these
parameters that we have collected.

00:50:08.900 --> 00:50:11.890
Do we need to go in for some
kind of a pre-built package,

00:50:11.990 --> 00:50:13.500
pre-built software?

00:50:13.500 --> 00:50:16.820
Do we have to go in and
develop a customized solution?

00:50:16.820 --> 00:50:21.620
Can we just modify the existing
solutions that already exist in an

00:50:21.830 --> 00:50:28.360
enterprise to resolve most of the common
problems that are surfacing today?

00:50:28.700 --> 00:50:33.310
And then,
the last stage is the deployment stage,

00:50:33.880 --> 00:50:37.930
where we start considering things like

00:50:38.340 --> 00:50:41.420
How maintainable will this solution be?

00:50:41.490 --> 00:50:43.880
How easily deployable is this solution?

00:50:43.930 --> 00:50:46.620
What are the kind of training
requirements that will

00:50:46.740 --> 00:50:49.320
be required in this case?

00:50:49.360 --> 00:50:53.950
Can we plug in this kind of
a solution into the existing

00:50:53.950 --> 00:50:57.120
enterprise architecture?

00:50:57.210 --> 00:51:03.200
So those are some of our common
considerations and the best practices.

00:51:03.230 --> 00:51:07.110
We have built our best
practices around these to really

00:51:07.490 --> 00:51:09.800
fine-hone these processes.

00:51:10.210 --> 00:51:11.860
Thanks.

00:51:26.290 --> 00:51:29.380
My name is Steve Olson.

00:51:29.380 --> 00:51:32.700
I'm a director of engineering at Sybase.

00:51:32.700 --> 00:51:37.420
I promise you I won't be talking about
Oracle on Solaris or Oracle on AIX.

00:51:37.480 --> 00:51:43.340
I'll be talking about Sybase on Mac OS X.

00:51:43.340 --> 00:51:45.970
Before I do that, I'd like to ask you,
is anybody here a current

00:51:45.970 --> 00:51:48.690
Sybase customer right now?

00:51:49.070 --> 00:51:50.130
That's pretty much what I thought.

00:51:50.230 --> 00:51:53.320
We decided last year to
move our product line,

00:51:53.320 --> 00:51:55.900
some of it,
into the Mac OS X environment.

00:51:56.020 --> 00:51:59.300
And we realized that we are
strangers to the Apple community,

00:51:59.300 --> 00:52:01.100
the community of Apple users.

00:52:01.100 --> 00:52:03.800
We live in different worlds,
or have been.

00:52:03.930 --> 00:52:07.520
So I thought we'd take a few
moments here to introduce a

00:52:07.520 --> 00:52:09.800
little bit about what Sybase is.

00:52:09.890 --> 00:52:15.030
And then, after a couple of minutes,
talk about our database software that

00:52:15.030 --> 00:52:17.540
we've moved over to the platform.

00:52:17.850 --> 00:52:20.040
They made me put these slides in here.

00:52:20.200 --> 00:52:21.050
So who are we?

00:52:21.470 --> 00:52:27.270
Sybase started in 1984,
about the same time of

00:52:27.280 --> 00:52:30.720
the Super Bowl commercial
that Apple produced.

00:52:30.800 --> 00:52:34.290
And since then, we have expanded.

00:52:34.290 --> 00:52:39.790
The first few customers that
we had were in Wall Street.

00:52:39.800 --> 00:52:43.280
Wall Street folks needed an online
transaction processing engine

00:52:43.280 --> 00:52:45.090
that would handle stock trades.

00:52:45.420 --> 00:52:48.540
And they've stuck with Sybase
through all these years,

00:52:48.540 --> 00:52:51.560
and right now about 60% of
stock trades in Wall Street,

00:52:51.560 --> 00:52:55.830
E-Trade, and others are processed
through Sybase servers.

00:52:55.840 --> 00:52:59.840
We have a very strong presence in
the financial services community,

00:52:59.840 --> 00:53:01.230
banks, and so forth.

00:53:01.680 --> 00:53:05.930
Healthcare, telecommunications,
and both state and local governments,

00:53:05.930 --> 00:53:10.220
as well as federal governments,
are also strong customers of ours.

00:53:10.260 --> 00:53:16.480
So the point I'd like to make here
is that... The same code line,

00:53:16.480 --> 00:53:20.360
this code that has evolved
since approximately 1984,

00:53:20.360 --> 00:53:22.640
is what we've moved over to the Mac.

00:53:22.800 --> 00:53:25.660
The same code that is used by
our most demanding customers.

00:53:25.960 --> 00:53:29.640
What we've done is not
provided you with Sybase Lite.

00:53:29.660 --> 00:53:34.050
It's an industrial strength
online transaction processing

00:53:34.050 --> 00:53:35.550
engine for Mac OS X.

00:53:35.660 --> 00:53:41.650
And our software is localized for all
of the major languages of the world.

00:53:41.660 --> 00:53:44.660
So we've deployed in just about
every country on the planet.

00:53:47.390 --> 00:53:53.080
What's available today is our Adaptive
Server Enterprise version 12.5.03.

00:53:53.080 --> 00:53:56.640
Just this week,
we've announced the availability

00:53:56.640 --> 00:54:00.360
of Adaptive Server Anywhere
version 8-something,

00:54:00.360 --> 00:54:06.380
and a number of APIs, JDBC, ODBC,
and our open client APIs,

00:54:06.380 --> 00:54:08.020
and our open server product.

00:54:08.090 --> 00:54:09.400
That's available right now.

00:54:09.430 --> 00:54:14.900
Most of this is available as a free
developer edition download code

00:54:14.900 --> 00:54:19.240
from our website at sybase.com/mac.

00:54:19.240 --> 00:54:22.150
Later this year, we will be releasing
our replication server,

00:54:22.150 --> 00:54:26.130
and for those of you who
may not know what that is,

00:54:26.280 --> 00:54:28.480
think iSync for business.

00:54:28.600 --> 00:54:33.110
It's basically bidirectional
synchronization between databases that

00:54:33.200 --> 00:54:37.580
may be either enterprise databases,
laptop databases,

00:54:37.580 --> 00:54:39.900
or Palm Pilot databases.

00:54:40.500 --> 00:54:43.730
And also the Adaptive
Server Enterprise 12.5.1 will

00:54:43.740 --> 00:54:46.040
be available later this year.

00:54:46.040 --> 00:54:48.520
We are tying that to the
availability of Panther.

00:54:48.680 --> 00:54:53.220
So although we will be ready
in approximately September,

00:54:53.220 --> 00:54:56.450
we're not sure exactly yet
when Panther will be available.

00:54:56.620 --> 00:55:01.760
So whenever that happens,
whichever comes first, I guess.

00:55:01.760 --> 00:55:05.790
And then also later on,
Adaptive Server Anywhere version 9

00:55:05.790 --> 00:55:08.360
will be generally available on Mac OS

00:55:09.160 --> 00:55:14.070
ASE was first released in 1987,
optimized for online

00:55:14.070 --> 00:55:19.480
transaction processing,
and we licensed it to Microsoft in 1988.

00:55:19.480 --> 00:55:23.760
Microsoft took the source code,
the whole package,

00:55:23.760 --> 00:55:28.740
and for a long time marketed
it as the Microsoft SQL Server.

00:55:28.740 --> 00:55:32.500
And then we parted company with
Microsoft approximately 1997,

00:55:32.500 --> 00:55:36.900
and since then our two product lines
have evolved in different directions.

00:55:37.140 --> 00:55:38.200
They even got our name.

00:55:38.200 --> 00:55:41.270
They have very good lawyers,
and that's about all

00:55:41.270 --> 00:55:42.200
I can say about that.

00:55:42.460 --> 00:55:43.640
But anyway...

00:55:45.490 --> 00:55:47.960
We now call our product the
Adaptive Server Enterprise,

00:55:47.960 --> 00:55:52.540
but because of this common heritage,
there still remains a very high degree

00:55:52.540 --> 00:55:54.480
of compatibility between the two.

00:55:54.480 --> 00:55:59.780
So applications generally written for a
SQL server should have little problem,

00:55:59.780 --> 00:56:04.130
maybe some, but because of the evolution
of the product lines,

00:56:04.140 --> 00:56:07.420
but there's still a high degree of
compatibility that will allow you

00:56:07.420 --> 00:56:10.740
to move your application to Adaptive
Server Enterprise on Mac OS X,

00:56:10.860 --> 00:56:15.520
if you might have an interest in
getting rid of the SQL server.

00:56:15.520 --> 00:56:17.680
It's a SQL database.

00:56:17.680 --> 00:56:22.820
We are SQL 92 compliant at entry level,
and we've also got a number of

00:56:22.820 --> 00:56:25.250
extensions in the Transact SQL language.

00:56:27.160 --> 00:56:31.560
When we decided to do
this port to Mac OS X,

00:56:31.560 --> 00:56:35.330
we took a long hard look at
the Unix underneath the covers.

00:56:35.340 --> 00:56:42.690
The first Unix port that we ever did
was with Sun OS back in the mid-80s,

00:56:42.780 --> 00:56:44.660
and that was essentially Berkeley Unix.

00:56:44.760 --> 00:56:48.870
So what we found with Mac OS X is
an old friend in a new coat.

00:56:49.560 --> 00:56:51.860
Berkeley Unix is very,
very familiar to us,

00:56:52.000 --> 00:56:56.000
and the engine and the basic
database components themselves

00:56:56.000 --> 00:56:58.520
moved over to Berkeley Unix very,
very quickly.

00:56:58.520 --> 00:57:02.420
So we looked then at, well,
what else can we do to tie in

00:57:02.420 --> 00:57:06.820
more tightly and integrate with
some of the services provided

00:57:06.820 --> 00:57:08.760
on the Mac OS X platform?

00:57:08.760 --> 00:57:12.960
We looked at Rendezvous, the SNMP agent,
Open Directory,

00:57:13.010 --> 00:57:16.840
the server monitor itself,
and then the install.

00:57:16.840 --> 00:57:18.780
I'm not going to say much
more about the install,

00:57:18.780 --> 00:57:19.430
except that we have a lot of
information on the Mac OS X platform.

00:57:19.440 --> 00:57:23.090
We use Apple's Package Maker,
which provides you a command line

00:57:23.100 --> 00:57:29.050
install facility on headless X-serves,
as well as a nice GUI installation

00:57:29.050 --> 00:57:31.580
for monitored servers.

00:57:31.580 --> 00:57:35.280
So a little bit about this architecture.

00:57:35.330 --> 00:57:41.200
The engines depicted here
essentially equate to Unix processes.

00:57:41.200 --> 00:57:45.620
Engine 0 listens for client
connections and dispatches

00:57:45.760 --> 00:57:48.200
to some engine based on load.

00:57:49.460 --> 00:57:53.950
We associate an engine with a CPU,
meaning if you've got a dual CPU system,

00:57:53.950 --> 00:57:55.300
you can configure two engines.

00:57:55.300 --> 00:58:00.800
Each engine is threaded so
that you can allow up to,

00:58:00.960 --> 00:58:04.980
on the Mac, each engine can handle
about 1,000 connections.

00:58:04.980 --> 00:58:11.700
So a total of about 2,000 users can
connect to this system at the same time.

00:58:12.080 --> 00:58:14.220
If you've got two CPUs.

00:58:14.220 --> 00:58:15.720
We use shared memory.

00:58:15.720 --> 00:58:21.370
We looked at memory map files
versus the System 5 APIs for shared

00:58:21.370 --> 00:58:24.970
memory and have so far adopted
the memmap as the interface to

00:58:25.070 --> 00:58:27.070
create the shared memory region.

00:58:29.440 --> 00:58:32.770
So essentially the environment we
found in Mac OS X was something very,

00:58:32.770 --> 00:58:36.720
very familiar to us and very
compatible with our prior

00:58:36.720 --> 00:58:39.380
implementations on Unix systems.

00:58:39.460 --> 00:58:40.900
So we're very, very pleased about that.

00:58:40.900 --> 00:58:43.250
And like I said,
it came together very quickly.

00:58:43.270 --> 00:58:47.380
Within about two months we were
ready for an early adopter program.

00:58:47.510 --> 00:58:51.350
And within four months we had
a general release available

00:58:51.350 --> 00:58:53.400
in September of last year.

00:58:54.390 --> 00:58:57.280
We used Rendezvous for
a number of reasons.

00:58:57.400 --> 00:59:00.780
First of all,
we wanted the server to come up and

00:59:00.780 --> 00:59:05.330
register with Rendezvous so that
a discovery client could recognize

00:59:05.440 --> 00:59:07.770
where the servers are in your network,
or in the case of the

00:59:07.770 --> 00:59:09.700
current implementation,
your subnetwork,

00:59:09.740 --> 00:59:13.570
and allow a client to automatically
discover where they were,

00:59:13.590 --> 00:59:17.080
get every bit of information
needed in order to establish

00:59:17.080 --> 00:59:19.040
a session with that server.

00:59:19.180 --> 00:59:21.480
So that's why we did it,
and it only took about

00:59:21.610 --> 00:59:24.430
10-15 lines of code,
if you count the comments.

00:59:24.460 --> 00:59:27.700
It was a very simple thing for us to do.

00:59:28.370 --> 00:59:31.300
And we also provide a
discovery program on the,

00:59:31.300 --> 00:59:35.740
it's a Cocoa-based application that
uses Rendezvous discovery APIs and

00:59:35.740 --> 00:59:39.890
allows us to take a look at all of
the servers running in a network.

00:59:39.900 --> 00:59:43.140
So in this screenshot
came from our QA lab,

00:59:43.140 --> 00:59:46.510
and we have both the
database server itself,

00:59:46.580 --> 00:59:50.890
plus some auxiliary servers that we
use for backup and other purposes.

00:59:50.920 --> 00:59:54.230
So they're all Rendezvous enabled,
and the discovery tool allows

00:59:54.330 --> 00:59:57.480
us to take a look at everything
that's running in the server.

00:59:57.950 --> 01:00:02.640
And in this model, or in this screenshot,
the highlighted server here has

01:00:02.660 --> 01:00:05.840
its host name and port number
showing up in the upper left corner.

01:00:05.840 --> 01:00:10.070
And you type in a name and a
password and hit the query button,

01:00:10.130 --> 01:00:15.900
and we'll launch a query tool that will
allow you to interact with SQL languages

01:00:15.900 --> 01:00:17.940
and view the result sets and so forth.

01:00:17.940 --> 01:00:20.420
Sort of an interactive SQL utility.

01:00:22.150 --> 01:00:25.340
That interactive part is available,
or will be available,

01:00:25.340 --> 01:00:26.700
in our 12.5.1 release.

01:00:26.800 --> 01:00:30.370
In terms of SNMP,
does anyone here use SNMP in

01:00:30.480 --> 01:00:32.710
your organization at all?

01:00:32.720 --> 01:00:34.200
A few of you?

01:00:35.870 --> 01:00:40.300
Apple provided an SNMP agent on
their server that came from NetSNMP,

01:00:40.350 --> 01:00:43.380
which is another open source project.

01:00:43.440 --> 01:00:47.640
The version provided with
Jaguar was NetSNMP version 4.

01:00:47.820 --> 01:00:53.040
something, and we found that it had some
problems with the AgentX protocol.

01:00:53.040 --> 01:00:58.580
The AgentX protocol is a means by which
you can extend the SNMP master agent.

01:00:59.570 --> 01:01:05.830
So we have taken that model and provided
our own SNMP sub-agent that allows us

01:01:05.870 --> 01:01:11.650
to monitor and view what's going on with
the various servers that we provide.

01:01:11.660 --> 01:01:15.090
Our adaptive server database,
backup servers, and so forth.

01:01:15.180 --> 01:01:19.550
And so if you have an
SNMP console from HP,

01:01:19.550 --> 01:01:26.630
OpenView, BMC Patrol, Tivoli,
or the CA product, you can view what's

01:01:26.640 --> 01:01:28.670
going on in the database.

01:01:28.680 --> 01:01:33.160
And also the server state
changes generate traps.

01:01:33.240 --> 01:01:36.880
So if you have a trap handling
enabled in your console,

01:01:37.200 --> 01:01:42.000
you can be notified and configure it
to alert you through email or paging

01:01:42.000 --> 01:01:48.460
or whatever you require when a server
might go down or a system might crash.

01:01:48.460 --> 01:01:51.620
So that facility is enabled.

01:01:51.620 --> 01:01:58.650
We provide version 5.1
of the NetSNMP agent.

01:01:58.680 --> 01:02:02.750
And I believe in Panther,
that's what's provided in the box.

01:02:02.870 --> 01:02:07.280
So we won't be providing our own
SNMP agent with our distribution.

01:02:09.640 --> 01:02:13.730
We provide two MIBs
with the SNMP sub-agent.

01:02:13.740 --> 01:02:18.000
The standard RDBMS MIB,
and then we have a Sybase MIB that

01:02:18.010 --> 01:02:21.610
extends that to give you a great
deal more information about the

01:02:21.640 --> 01:02:23.560
state of the running server.

01:02:26.400 --> 01:02:30.740
This open directory authentication
is new in the 12.5.1 release,

01:02:30.740 --> 01:02:36.480
but prior to this implementation,
when you log into our server,

01:02:36.480 --> 01:02:39.570
you provide a name and a password,
or if you're using SSL,

01:02:39.660 --> 01:02:43.290
a name and a certificate,
and we do the authentication

01:02:43.290 --> 01:02:46.060
entirely within our database.

01:02:46.060 --> 01:02:49.850
So, for the most part,
people use names and passwords,

01:02:49.980 --> 01:02:53.780
and our database manages those
passwords in our system catalogs.

01:02:53.880 --> 01:02:57.320
With this implementation,
you no longer have to worry

01:02:57.320 --> 01:02:59.440
about the password situation.

01:02:59.500 --> 01:03:03.950
We will use directory-native
authentication via the open directory

01:03:03.980 --> 01:03:07.830
APIs to talk to open directory
and use their authentication

01:03:07.830 --> 01:03:10.400
services to authenticate a login.

01:03:10.400 --> 01:03:14.610
Now, we've learned a lot in the past
week about single sign-on and

01:03:14.610 --> 01:03:16.040
Kerberos and what Apple's doing.

01:03:16.060 --> 01:03:22.260
And we hope that by the time this is
released in the September timeframe,

01:03:22.260 --> 01:03:25.550
that we will be able to achieve
single sign-on capabilities.

01:03:25.560 --> 01:03:28.200
But I can't commit to that right now.

01:03:28.200 --> 01:03:29.160
That's our plan.

01:03:29.160 --> 01:03:30.370
We'll see how it goes.

01:03:32.110 --> 01:03:36.170
Does anybody here use
NIS for Yellow Pages?

01:03:36.350 --> 01:03:42.110
Most of you use LDAP or
Kerberos Active Directory.

01:03:43.330 --> 01:03:44.590
Okay.

01:03:44.790 --> 01:03:46.640
Monitoring and configuration.

01:03:46.640 --> 01:03:50.540
Apple has produced a very
interesting monitor or server

01:03:50.540 --> 01:03:52.800
admin tool in the Panther.

01:03:52.860 --> 01:03:53.720
It's extensible.

01:03:53.720 --> 01:03:58.760
It provides a Cocoa framework
that allows a client plug-in and

01:03:58.760 --> 01:04:04.090
a server-side plug-in to monitor
and manage a facility or a service

01:04:04.240 --> 01:04:07.680
running on a Mac OS X server.

01:04:08.050 --> 01:04:12.410
So we were able to work with Apple and
they provided us with examples of

01:04:12.410 --> 01:04:19.680
how to do that and have provided a
monitor or an admin component for

01:04:19.680 --> 01:04:21.320
this tool that plugs into this tool.

01:04:21.320 --> 01:04:24.090
So with this component,
we'll allow you to start

01:04:24.250 --> 01:04:27.510
and stop the server,
to backup and restore databases,

01:04:27.620 --> 01:04:32.040
to reconfigure it,
and to monitor the behavior of a running

01:04:32.040 --> 01:04:36.460
system through various graphical reports.

01:04:36.720 --> 01:04:41.720
So in this case, CPU usage,
but we also expect to provide

01:04:41.750 --> 01:04:46.150
graphs over time of disk I/O,
network I/O,

01:04:46.290 --> 01:04:48.340
max number of users connected,
and so forth.

01:04:48.360 --> 01:04:51.270
Basically to let you track what's
going on inside the server.

01:04:51.340 --> 01:04:53.840
So we're very enthused about this.

01:04:53.840 --> 01:04:58.390
It's been a sore point with a lot
of customers because it's been

01:04:58.990 --> 01:05:04.040
difficult to get this kind of
user interface on other platforms.

01:05:04.040 --> 01:05:05.500
Apple understands these
interfaces very well.

01:05:05.560 --> 01:05:11.030
And we're very happy that we're able
to take advantage of the look and feel

01:05:11.030 --> 01:05:14.220
and the usability enabled by this tool.

01:05:14.220 --> 01:05:18.350
So this will be available
in our 12.5.1 release.

01:05:19.930 --> 01:05:25.200
And the title of this session is
Applications in a Heterogeneous World.

01:05:25.200 --> 01:05:29.040
And I wanted to just talk for a moment
about how the adaptive server enterprise

01:05:29.040 --> 01:05:33.620
is able to coexist with other database
systems that might be in your enterprise.

01:05:33.620 --> 01:05:37.980
We have an interface within our
adaptive server enterprise called Omni,

01:05:37.980 --> 01:05:40.380
or Component Integration Services.

01:05:40.380 --> 01:05:43.090
And what it does is allows
you to set up tables,

01:05:43.210 --> 01:05:46.810
we call them proxy tables,
which serve the role as pointers

01:05:46.810 --> 01:05:48.930
to data that lives elsewhere.

01:05:48.940 --> 01:05:51.610
So with standard SQL,
you're able to query these

01:05:51.760 --> 01:05:53.670
tables as if they were all local.

01:05:53.670 --> 01:05:57.860
And they might point to Oracle,
they might point to SQL Server,

01:05:57.860 --> 01:05:59.240
they might point to DB2.

01:05:59.240 --> 01:06:02.540
And when I say DB2,
I mean the world of IBM,

01:06:02.540 --> 01:06:08.120
which might be on the mainframe, VSAM,
IMS, database, and so forth.

01:06:08.200 --> 01:06:12.000
And, of course,
other Sybase servers are configured.

01:06:12.000 --> 01:06:15.140
So if you've got Sybase
elsewhere in your enterprise,

01:06:15.230 --> 01:06:17.990
you basically have a federated
architecture that allows you to have a

01:06:18.000 --> 01:06:18.080
database that's able to do all of that.

01:06:18.080 --> 01:06:22.980
So that allows you to have a single view
presented to your client applications.

01:06:26.170 --> 01:06:30.040
A replication server has been a
very successful product of ours.

01:06:30.170 --> 01:06:33.730
This came out,
was first available in cooperation

01:06:33.780 --> 01:06:36.650
with a significant customer of ours,
Goldman Sachs.

01:06:36.680 --> 01:06:42.050
And it allows us to publish database
changes from the adaptive server

01:06:42.050 --> 01:06:45.180
enterprise to a subscribing server.

01:06:45.180 --> 01:06:49.660
Maybe another adaptive server enterprise,
maybe Oracle, whoever it may be.

01:06:50.450 --> 01:06:53.820
So, the reasons, I mean,
we initially did this simply to

01:06:53.820 --> 01:06:57.580
allow customers to distribute data,
to aggregate data.

01:06:57.580 --> 01:07:03.140
But lately, I would say about 70% of our
customers now use it for warm standby.

01:07:03.140 --> 01:07:08.550
You can set it up to basically
replicate an entire database

01:07:08.740 --> 01:07:12.650
to a warm standby server,
so that if your site

01:07:12.850 --> 01:07:18.280
goes down for any reason,
you still have this warm standby.

01:07:19.580 --> 01:07:23.330
So, the main benefits here are that
we're not restricted by geography.

01:07:23.350 --> 01:07:28.320
We're restricted by the reach of
your WAN or your local area network.

01:07:28.400 --> 01:07:30.810
And we replicate transactions.

01:07:30.900 --> 01:07:33.980
We don't replicate any disk
files or anything like that.

01:07:33.980 --> 01:07:37.130
It's transactions that are replicated.

01:07:37.350 --> 01:07:45.200
So, in a failover scenario, for example,
in a disaster recovery scenario,

01:07:45.200 --> 01:07:48.690
your clients may find that
they're no longer able to

01:07:48.820 --> 01:07:50.670
connect to your primary site.

01:07:50.680 --> 01:07:56.910
We have client-side failover built into
our client APIs that allow them to be

01:07:56.910 --> 01:08:00.540
redirected to a secondary data center.

01:08:00.880 --> 01:08:05.420
And this mechanism was used by a number
of our customers who had data centers at

01:08:05.470 --> 01:08:10.880
the World Trade Center in September 11th,
and those that chose to were back

01:08:11.490 --> 01:08:13.690
online in a matter of minutes.

01:08:13.780 --> 01:08:16.670
I mean, they had other things
on their mind that day,

01:08:16.800 --> 01:08:20.320
so it sounds bad that they were
able to get back up within days,

01:08:20.440 --> 01:08:23.030
but in fact,
there were human considerations there

01:08:23.100 --> 01:08:25.080
more than technical consideration.

01:08:25.140 --> 01:08:29.430
Those that chose to were able to get
back online in a matter of minutes.

01:08:31.340 --> 01:08:33.550
Through this technology.

01:08:33.780 --> 01:08:35.840
And this has been used by
a number of customers for

01:08:35.840 --> 01:08:40.000
disaster recovery scenarios,
for dealing with unplanned downtime,

01:08:40.120 --> 01:08:43.780
somebody trips over a power cable,
or planned downtime,

01:08:43.780 --> 01:08:45.780
you want to take your
systems down for maintenance,

01:08:45.830 --> 01:08:48.600
upgrade, whatever the case may be.

01:08:49.160 --> 01:08:51.850
In a warm standby scenario,
your applications talk

01:08:51.850 --> 01:08:53.120
to your primary server.

01:08:53.120 --> 01:08:56.450
Replication is being done for
the entire contents of that

01:08:56.450 --> 01:08:58.640
server to a standby server.

01:08:58.640 --> 01:09:01.970
And the replication model
is one of store and forward.

01:09:01.970 --> 01:09:06.300
So the transactions or changes are
stored in a queue on the replication

01:09:06.300 --> 01:09:09.900
server and then propagated to the
standby when they're committed.

01:09:09.900 --> 01:09:12.470
We don't propagate
halfway committed changes,

01:09:12.470 --> 01:09:15.080
only those transactions
that are committed.

01:09:15.440 --> 01:09:21.750
If for some reason the primary fails,
client-side failover mechanisms

01:09:21.750 --> 01:09:26.120
automatically direct the
client to the secondary site.

01:09:26.160 --> 01:09:29.700
And the rep server can be told,
has to be told,

01:09:29.700 --> 01:09:33.100
to change the direction of replication.

01:09:33.100 --> 01:09:36.710
And when that happens,
the standby then becomes the primary

01:09:36.710 --> 01:09:41.550
and the direction of the replication
is switched and the changes on the

01:09:41.550 --> 01:09:46.200
secondary are stored in a queue until
the primary becomes... available.

01:09:46.200 --> 01:09:49.260
And then when the primary
does become available,

01:09:49.330 --> 01:09:54.500
the two are synchronized and
normal operation then can resume.

01:09:54.500 --> 01:09:57.760
So that's a standard way that
the rep server is used in a

01:09:57.760 --> 01:09:59.580
lot of customer situations.

01:10:01.600 --> 01:10:26.900
[Transcript missing]

01:10:27.170 --> 01:10:29.580
The rep agent then will
take these changes,

01:10:29.690 --> 01:10:32.270
queue them,
and when the transactions commit,

01:10:32.270 --> 01:10:34.420
replicate to various targets.

01:10:34.530 --> 01:10:39.140
And that could be Oracle,
it could be Informix, DB2, or whatever.

01:10:42.550 --> 01:10:45.480
We provide our own JDBC drivers.

01:10:45.550 --> 01:10:49.500
It's a Type 4 all-Java driver.

01:10:49.500 --> 01:10:52.040
And we also offer the Mac platform.

01:10:52.040 --> 01:10:55.350
We licensed an ODBC driver
from Open Link.

01:10:55.560 --> 01:10:57.960
It's ODBC 3.5 compliant.

01:10:57.990 --> 01:11:02.670
We provide our own open client APIs,
which are roughly

01:11:02.670 --> 01:11:04.960
equivalent to Oracle OCI.

01:11:06.370 --> 01:11:07.920
There.

01:11:07.920 --> 01:11:10.520
And we have an open server.

01:11:10.520 --> 01:11:15.770
An open server is an API, a library,
that allows you to write the server

01:11:15.770 --> 01:11:19.940
side of the open client interface,
so that you can provide

01:11:19.940 --> 01:11:22.210
handlers for language,
RPCs, and so forth,

01:11:22.210 --> 01:11:24.150
in a threaded server environment.

01:11:25.470 --> 01:11:30.950
Essentially, this was built in 1990,
carried forward, and it was a precursor

01:11:30.950 --> 01:11:32.780
to application servers.

01:11:32.780 --> 01:11:35.860
But you can do everything in C, C++.

01:11:35.860 --> 01:11:40.280
You can get very high-speed
performance out of this server engine.

01:11:42.060 --> 01:11:45.730
A number of tools for development
purposes are available on this

01:11:45.730 --> 01:11:47.490
platform and some solutions.

01:11:47.500 --> 01:11:51.270
The tools that are provided,
the WebObjects plugin is available.

01:11:51.380 --> 01:11:56.100
Apple Engineering produced a plugin for
WebObjects that uses our JDBC driver,

01:11:56.140 --> 01:12:02.100
and it's been widely used now by a
number of vendors to produce solutions.

01:12:02.150 --> 01:12:07.400
We have provided a real basic
plugin for the real basic product.

01:12:07.510 --> 01:12:13.340
Version 5.1 now is available and it has
a plugin that we've provided that's been

01:12:13.340 --> 01:12:16.490
very well received by the RealSoft folks.

01:12:16.560 --> 01:12:19.620
Runtime Labs has provided
support for our servers,

01:12:19.630 --> 01:12:24.000
our interfaces, using their framework,
which allows you to use the

01:12:24.000 --> 01:12:29.990
interface builder to create
database-driven applications.

01:12:30.000 --> 01:12:31.500
It's a very nice tool.

01:12:31.650 --> 01:12:34.000
Blue World has provided ASE support.

01:12:34.000 --> 01:12:37.000
There's a number of additional
third parties that provide tools,

01:12:37.000 --> 01:12:40.450
to enable you to build either
client server applications

01:12:40.540 --> 01:12:42.000
or web-based applications.

01:12:42.000 --> 01:12:47.260
And of course the JDBC driver can be
used in a JBoss environment if you want

01:12:47.260 --> 01:12:49.970
to build EJBs that deal with databases.

01:12:50.000 --> 01:12:54.020
In terms of solutions,
Power Easy I'll be talking

01:12:54.020 --> 01:12:55.990
about a little bit later,
and the same with Inovion.

01:12:56.000 --> 01:13:02.000
RiskWise was mentioned earlier this
week as an interesting customer.

01:13:02.000 --> 01:13:06.490
They're a credit bureau and
they have over 200 XSERVs.

01:13:06.500 --> 01:13:11.500
They have custom-built software to
handle their particular application,

01:13:11.500 --> 01:13:17.500
but it's powered by Sybase underneath
all that middleware that they have built.

01:13:17.510 --> 01:13:19.400
Quadbase is a good partner of ours.

01:13:19.520 --> 01:13:22.360
They provide a reporting
solution for our products.

01:13:22.500 --> 01:13:25.420
The TOLUS group can be
used to backup to tape,

01:13:25.500 --> 01:13:27.000
from file system to tape.

01:13:27.000 --> 01:13:30.500
And so when we backup files
in our backup databases,

01:13:30.540 --> 01:13:37.040
we write them to the file system and the
TOLUS group BRU utility can be used to

01:13:37.180 --> 01:13:40.000
then back them up to tape if need be.

01:13:40.400 --> 01:13:44.860
LiveTime is another partner,
and MindWrap is a very interesting

01:13:44.990 --> 01:13:48.000
web content management partner.

01:13:48.000 --> 01:13:50.930
And I understand there's a
person from MindWrap here.

01:13:51.030 --> 01:13:53.000
Can you stand up?

01:13:53.000 --> 01:13:54.000
Maybe not.

01:13:54.140 --> 01:13:56.000
There he is.

01:13:56.000 --> 01:13:57.790
Okay.

01:13:58.000 --> 01:13:59.950
All right.

01:14:00.130 --> 01:14:05.500
So anyway, once again,
migrating from SQL Server to ASE,

01:14:05.500 --> 01:14:05.500
we provide some tools.

01:14:05.500 --> 01:14:08.760
To make that possible,
to migrate both the schema and

01:14:09.100 --> 01:14:11.490
the data from SQL Server to ASE.

01:14:11.500 --> 01:14:15.470
This one tool is provided by a
company called Schema Research.

01:14:15.600 --> 01:14:17.500
It's called SR Migrate.

01:14:17.500 --> 01:14:19.500
And then Sybase provides a tool.

01:14:19.500 --> 01:14:21.500
It's called Power Designer.

01:14:21.500 --> 01:14:27.800
And it has been extended with a transfer
plug-in to allow you to import the

01:14:27.850 --> 01:14:33.490
schema from just about any data source,
build a data model,

01:14:33.600 --> 01:14:35.000
and then push that model to ASE.

01:14:35.000 --> 01:14:40.180
With the transfer plug-in,
you can then take the data represented by

01:14:40.610 --> 01:14:46.000
that source server and transfer it into
ASE using our bulk transfer facilities.

01:14:46.150 --> 01:14:48.000
Very high speed.

01:14:48.170 --> 01:14:51.820
So it's...

01:14:52.330 --> 01:14:55.160
We're trying to make it as
easy as possible to do this.

01:14:55.160 --> 01:14:59.840
I have three case studies I'll
go through fairly quickly here.

01:14:59.930 --> 01:15:03.990
Power Easy, Inovion, and Schema Research.

01:15:04.090 --> 01:15:09.390
Power Easy has built an ERP application,
which is all Mac OS X using

01:15:09.460 --> 01:15:10.960
Sybase and WebObjects.

01:15:10.960 --> 01:15:13.470
They provide four
packages for e-commerce,

01:15:13.480 --> 01:15:18.300
logistics, financials, and sales,
and a whole host of reporting

01:15:18.300 --> 01:15:21.670
facilities using the Quadbase services.

01:15:22.970 --> 01:15:24.880
Their environment is
basically browser-based.

01:15:25.060 --> 01:15:27.670
The application is a
browser-based application.

01:15:27.670 --> 01:15:31.630
It uses Apache web server on the
Mac OS X server and web objects

01:15:32.030 --> 01:15:33.900
and the adaptive server enterprise.

01:15:33.900 --> 01:15:35.880
They provide the total package.

01:15:35.880 --> 01:15:40.900
So, XSERVs, Apache, it's a complete unit.

01:15:40.900 --> 01:15:44.400
Plug it in, turn it on,
and it's ready to go.

01:15:45.330 --> 01:15:49.140
Inovion is a, this is a very big title,
a very hard word to pronounce,

01:15:49.140 --> 01:15:54.400
but what it boils down to is
these folks take pictures of your

01:15:54.400 --> 01:16:00.020
eyeball and your retina and analyze
them to detect diabetes and other

01:16:00.020 --> 01:16:03.510
potential problems with your eye.

01:16:03.520 --> 01:16:09.290
And their tests are 90% accurate,
which is greater than a physician exam,

01:16:09.390 --> 01:16:13.750
they claim,
and it's a very interesting application.

01:16:15.420 --> 01:16:17.710
The...

01:16:17.960 --> 01:16:21.650
It's a startup operation they
expect to deploy in about

01:16:21.660 --> 01:16:24.180
500 sites in North America.

01:16:24.260 --> 01:16:30.180
And they have a workflow agent on each
site that captures the data from a very

01:16:30.180 --> 01:16:35.340
high resolution camera and also data
that's keyed in for that particular

01:16:35.340 --> 01:16:38.730
patient when the retinal scans are done.

01:16:38.740 --> 01:16:47.000
That workflow agent transmits through
RMI to a server in a workflow scenario.

01:16:47.000 --> 01:16:49.540
The server stores the
information on a queue,

01:16:49.540 --> 01:16:53.000
which is a Sybase table or tables.

01:16:53.110 --> 01:16:57.570
And then a workflow process occurs
where various physicians may review

01:16:58.000 --> 01:17:02.800
the information that's presented to
them and add some notes and so forth.

01:17:02.920 --> 01:17:08.400
And then finally a diagnosis is
made through a series of steps.

01:17:08.510 --> 01:17:13.000
A highly innovative
application and who knows?

01:17:13.160 --> 01:17:16.580
It looks like it's going
to be able to do some good.

01:17:16.790 --> 01:17:19.390
So Schema Research is a consulting firm.

01:17:19.410 --> 01:17:20.570
They also have some products.

01:17:20.670 --> 01:17:23.680
I mentioned SR Migrate,
but they helped us with the

01:17:23.680 --> 01:17:28.780
implementation of a facility to
assist a manufacturing operation

01:17:28.780 --> 01:17:31.470
with the running of their factory.

01:17:31.480 --> 01:17:36.100
The solution consisted of the
Adaptive Server Enterprise,

01:17:36.100 --> 01:17:39.880
Replication Server, RAID,
and ASE Mirrors.

01:17:39.880 --> 01:17:42.820
One of the features of ASE is
it will do mirroring as well.

01:17:44.580 --> 01:17:51.970
They are very highly reliant upon this
application for running their factories,

01:17:52.010 --> 01:17:54.550
so downtime is of
serious concern to them.

01:17:54.560 --> 01:17:57.230
In fact,
we displaced the incumbent database,

01:17:57.230 --> 01:18:02.500
which was problematic because it could
not guarantee the degree of uptime

01:18:02.500 --> 01:18:04.460
required for this particular application.

01:18:04.480 --> 01:18:08.400
They are very pleased about the solution.

01:18:08.400 --> 01:18:12.460
It's another WebObjects application,
browser-based,

01:18:12.460 --> 01:18:15.540
using ASE as their primary data store.

01:18:15.860 --> 01:18:22.440
They also have two off-site standby
servers in case of disaster.

01:18:22.440 --> 01:18:28.360
They also have a warm standby on the
same site in case the particular computer

01:18:28.360 --> 01:18:31.570
in which ASE is running happens to die.

01:18:31.760 --> 01:18:36.200
And they also replicate various
database changes in their running

01:18:36.200 --> 01:18:40.270
site to their development environment
so that their application developers

01:18:40.380 --> 01:18:43.280
have some live data to test with
and to implement new features.

01:18:43.280 --> 01:18:46.450
So this customer is very
pleased with the results.

01:18:46.550 --> 01:18:49.020
They've been running their
factory now for about three

01:18:49.020 --> 01:18:50.800
months using this configuration.

01:18:53.540 --> 01:18:57.710
So to conclude,
I just wanted to point out that

01:18:57.710 --> 01:19:00.760
Sybase is committed to this platform.

01:19:00.760 --> 01:19:05.090
The same software that we've used,
that our most demanding customers

01:19:05.660 --> 01:19:10.780
use to run their business is now
available to you on Mac OS X.

01:19:10.780 --> 01:19:14.710
And we're also focusing on additional
services Apple is providing this

01:19:14.710 --> 01:19:19.430
platform to integrate our database
with to give you the greatest level of

01:19:19.510 --> 01:19:22.520
integration possible on this platform.

01:19:22.520 --> 01:19:25.290
We're also working with a
number of third-party tool and

01:19:25.350 --> 01:19:29.890
application developers to provide
a more complete solution for you.

01:19:29.900 --> 01:19:33.310
And we are also trying to make
it possible for you to eliminate

01:19:33.310 --> 01:19:38.270
any dependency you might have on
SQL servers so you can have an

01:19:38.410 --> 01:19:42.330
all-Mac solution in your enterprise.

01:19:42.340 --> 01:19:48.100
Developer's Edition download is available
from our website at sybase.com/mac.

01:19:48.100 --> 01:19:49.710
Check it out.

01:19:50.600 --> 01:19:54.760
Okay, you can contact me,
any of our salespeople.

01:19:54.760 --> 01:19:56.780
Daryl Salas is a systems consultant.

01:19:56.780 --> 01:20:02.780
Michael Haynes, I believe he's here,
is a business developer at Sybase.

01:20:02.820 --> 01:20:05.440
I mentioned the download site.

01:20:05.440 --> 01:20:08.880
All of our documentation is also online.

01:20:08.880 --> 01:20:10.780
You can go there.

01:20:10.780 --> 01:20:16.480
We don't provide hard copy of our
manuals with our CDs for the Mac.

01:20:17.520 --> 01:20:21.330
And of course, the Rendezvous, SNMP,
and Open Directory websites

01:20:21.340 --> 01:20:23.130
are available to you as well.