WEBVTT

00:00:20.920 --> 00:00:24.000
Welcome to session 731,
Internet Application Development.

00:00:24.000 --> 00:00:28.140
My name is Ursula Ringham.

00:00:28.140 --> 00:00:32.460
I'm a partnership manager here at
Apple Computers Developer Group.

00:00:32.490 --> 00:00:35.280
Today's session is going to
cover Macromedia Central.

00:00:35.280 --> 00:00:38.150
It's a new product that they'll
be releasing later this year.

00:00:38.150 --> 00:00:41.900
We have two people from Macromedia's
development team for Central,

00:00:42.150 --> 00:00:44.940
David Calaprice and Michael Williams,
and we have a third-party

00:00:44.940 --> 00:00:48.560
developer who's created some
applications that work with Central,

00:00:48.560 --> 00:00:49.500
Alex Wright.

00:00:49.500 --> 00:00:52.400
So now I'll turn this
over to Dave Calaprice.

00:00:57.300 --> 00:00:58.140
- Thanks Ursula.

00:00:58.140 --> 00:01:01.210
All right.

00:01:01.340 --> 00:01:04.850
So here we're gonna teach you a
little bit about Macromedi Central.

00:01:04.860 --> 00:01:07.050
We're currently in beta right now.

00:01:07.150 --> 00:01:09.370
It's a new product under development.

00:01:09.400 --> 00:01:13.360
So, let's see here.

00:01:13.680 --> 00:01:15.300
So what you're going to
learn about is Central.

00:01:15.400 --> 00:01:17.600
It's this new environment
for Internet-enabled apps.

00:01:17.610 --> 00:01:20.800
And we're going to talk about
also how Macromedia in general

00:01:20.800 --> 00:01:23.830
views Internet applications.

00:01:25.300 --> 00:01:28.140
So what we're going to learn is,
we're going to get a little bit of a

00:01:28.140 --> 00:01:33.180
situation overview of kind of where
the state is of apps in general,

00:01:33.270 --> 00:01:37.120
and talk about Central,
and of course the process for

00:01:37.120 --> 00:01:38.950
developing apps for Central.

00:01:41.100 --> 00:01:44.890
We're going to talk
about rich Internet apps,

00:01:44.890 --> 00:01:48.200
XML, SOAP, WSDL, and Force Flash.

00:01:50.130 --> 00:01:52.620
So first of all,
a little bit about the vision,

00:01:52.620 --> 00:01:55.200
Macromedias vision currently.

00:01:55.300 --> 00:01:57.440
Our vision right now is
all about experiences.

00:01:57.540 --> 00:02:01.200
We feel that great experiences
build great businesses.

00:02:01.270 --> 00:02:04.490
And this doesn't just pertain
to application development,

00:02:04.500 --> 00:02:06.740
it pertains to pretty much anything.

00:02:06.800 --> 00:02:11.470
Whether you're going out to see a movie
or drive a car or get a cup of coffee,

00:02:11.560 --> 00:02:16.620
people will pay more and
expect great experiences.

00:02:16.850 --> 00:02:23.090
So Macromedia is all about helping
people deliver on these experiences.

00:02:25.560 --> 00:02:29.810
So, in order to do that,
we are promoting this idea of what

00:02:29.810 --> 00:02:33.500
we call rich Internet applications,
which has become very popular lately.

00:02:33.500 --> 00:02:38.670
What they attempt to do is combine the
best of traditional desktop applications,

00:02:39.040 --> 00:02:42.700
so we're talking about things like
the usability and user interface that

00:02:42.750 --> 00:02:47.100
you get with desktop applications,
the availability of desktop applications,

00:02:47.120 --> 00:02:51.500
you can always access them regardless
of whether you are connected or not,

00:02:51.530 --> 00:02:53.500
and also the integration
with the operating system.

00:02:53.500 --> 00:02:56.470
As well as the best of web applications.

00:02:56.500 --> 00:03:00.480
Web applications are great
at accessibility to data.

00:03:00.560 --> 00:03:03.070
They're connected,
you can always have the

00:03:03.070 --> 00:03:04.500
most up-to-date information.

00:03:04.750 --> 00:03:07.500
And also communication.

00:03:07.500 --> 00:03:10.740
We're trying to see a
lot of communication used

00:03:10.740 --> 00:03:14.080
in applications lately,
and this is also something that

00:03:14.210 --> 00:03:16.500
we feel is really important to
improve the user experience.

00:03:16.500 --> 00:03:21.500
So we're talking about things like
not just text-based chat and IM,

00:03:21.500 --> 00:03:21.500
but also two-way or
N-way video and online.

00:03:21.550 --> 00:03:27.660
So all of these things sort of
combine together to make what

00:03:27.660 --> 00:03:30.500
we call rich Internet apps.

00:03:31.380 --> 00:03:35.520
What is Central and what are
the issues that it addresses?

00:03:35.520 --> 00:03:39.110
Right now,
most of the Internet is document-centric.

00:03:39.250 --> 00:03:43.150
Essentially, this has grown out of
the history of the web,

00:03:43.200 --> 00:03:45.200
based on HTML and the web browser.

00:03:45.200 --> 00:03:49.590
Most websites are page-based
and document-centric,

00:03:49.660 --> 00:03:56.180
and so most applications as well are
also document-centric and page-based.

00:03:56.200 --> 00:03:59.990
You often have to click through
multiple pages to perform a task.

00:04:00.290 --> 00:04:05.180
This was a step backwards from
the early '90s or even late '80s,

00:04:05.180 --> 00:04:10.200
when you had much more rich user
interfaces in desktop applications.

00:04:10.200 --> 00:04:13.980
Another problem that Central is trying
to address as an application platform

00:04:13.980 --> 00:04:18.200
is that the installation of applications
from the Internet is often very clumsy.

00:04:18.200 --> 00:04:21.310
Typically,
if you want to install an application,

00:04:21.410 --> 00:04:25.670
you have to download an executable file,
find out where you downloaded

00:04:25.670 --> 00:04:29.200
it to on your desktop,
double-click it, maybe run an installer,

00:04:29.200 --> 00:04:31.790
go through a few screens,
and also have to worry about, "Oh,

00:04:31.850 --> 00:04:34.170
did I just download a virus?"
or something like that.

00:04:34.370 --> 00:04:39.010
So this is also a problem that
we're trying to solve with Central.

00:04:39.310 --> 00:04:42.990
Additionally,
applications in general don't

00:04:42.990 --> 00:04:45.200
work very well together.

00:04:45.200 --> 00:04:49.090
Unless they were designed
ahead of time to cooperate,

00:04:49.210 --> 00:04:52.770
such as in a studio or suite,
applications are pretty much

00:04:52.840 --> 00:04:56.110
developed as independent silos,
and apart from maybe copy and paste,

00:04:56.200 --> 00:04:58.200
there's very little interaction
between these applications.

00:04:58.200 --> 00:05:01.200
They have very little
way of sharing data.

00:05:01.200 --> 00:05:04.200
And so that's also something that
we're trying to improve with Central.

00:05:04.410 --> 00:05:07.200
Next, offline use.

00:05:07.200 --> 00:05:11.500
Typically, web applications,
if you go to a shopping application or

00:05:11.500 --> 00:05:15.180
any sort of application on the Internet,
if you are disconnected,

00:05:15.290 --> 00:05:18.090
if you become disconnected from the net,
that information is no

00:05:18.090 --> 00:05:19.160
longer available to you.

00:05:19.220 --> 00:05:24.200
Browser pretty much becomes useless
if you're no longer connected.

00:05:24.200 --> 00:05:27.200
And so that's also something that
we're trying to solve with Central.

00:05:27.200 --> 00:05:31.710
And finally,
applications often have many different

00:05:31.710 --> 00:05:34.080
ways of notifying the user of events.

00:05:34.390 --> 00:05:38.060
Some bounce the icon in the dock,
other ones bring up little windows,

00:05:38.220 --> 00:05:41.710
and so there's not really very much
consistency about how events are

00:05:41.710 --> 00:05:44.200
essentially communicated to the end user.

00:05:44.200 --> 00:05:47.070
And so we're trying to also
provide some consistency in a

00:05:47.150 --> 00:05:49.050
framework for notification as well.

00:05:50.410 --> 00:05:53.370
So just going back to the
basics of what Central is,

00:05:53.380 --> 00:05:57.150
it's an environment for collecting
and managing applications.

00:05:57.300 --> 00:06:00.280
We call it United because the
applications work together cooperatively,

00:06:00.610 --> 00:06:04.800
and unplugged,
meaning that you can stay productive even

00:06:04.800 --> 00:06:07.570
when you don't have a web connection.

00:06:09.120 --> 00:06:13.000
From the customer's point of view,
what's good about Central?

00:06:13.030 --> 00:06:16.210
It combines the best of desktop
interactivity and the availability and

00:06:16.210 --> 00:06:21.570
usability of desktop apps with web-based
deployment and the ability to always have

00:06:21.620 --> 00:06:24.000
up-to-date information from the Internet.

00:06:24.000 --> 00:06:26.630
The applications in Central are
cooperative and can work

00:06:26.670 --> 00:06:27.990
together and share data.

00:06:28.220 --> 00:06:31.000
This delivers a much more efficient
experience for the customer.

00:06:31.000 --> 00:06:34.130
Rather than having to go to
one application and get a

00:06:34.130 --> 00:06:37.090
result from one application,
for example,

00:06:37.190 --> 00:06:41.450
if you're doing some shopping and
you want to look up information on a

00:06:41.450 --> 00:06:44.120
product and then have to go to another
site to find a review on that product,

00:06:44.200 --> 00:06:46.830
that's an inefficient workflow.

00:06:47.130 --> 00:06:49.590
With Central,
the applications can work together

00:06:49.590 --> 00:06:52.770
and actually share this data,
even if they weren't designed to

00:06:52.770 --> 00:06:54.820
work together when they were built.

00:06:55.190 --> 00:06:58.280
Fast and easy installation.

00:06:58.280 --> 00:07:01.800
I mentioned before the clumsy nature
of the installation process currently

00:07:01.860 --> 00:07:04.100
for applications on desktop platforms.

00:07:04.100 --> 00:07:06.400
With Central,
you can build an application and

00:07:06.400 --> 00:07:09.450
with a single click from a web page,
it can be installed and running

00:07:09.710 --> 00:07:11.090
on an end user's machine.

00:07:11.100 --> 00:07:14.820
This sort of mechanism also leads
into this try-buy mechanism,

00:07:14.910 --> 00:07:17.100
which I'm going to talk about here.

00:07:17.100 --> 00:07:20.050
There's a commerce system
also built into Central.

00:07:20.110 --> 00:07:23.100
This is a very important
aspect of the platform.

00:07:23.180 --> 00:07:25.970
As a developer,
you can create an application,

00:07:25.970 --> 00:07:29.820
post it on your website,
and connect with our commerce system and

00:07:29.820 --> 00:07:34.440
sell your application and get money fed
into your own merchant account without

00:07:34.440 --> 00:07:37.060
having to set up all the infrastructure,
handle all the credit card,

00:07:37.130 --> 00:07:40.100
transaction processing,
that kind of thing all by yourself.

00:07:40.100 --> 00:07:44.100
That's the infrastructure that Macromedia
provides as part of building for Central.

00:07:44.110 --> 00:07:46.460
Because of the trial
system and the try-buy,

00:07:46.480 --> 00:07:50.200
the purchase system is built in Central,
it's consistent across all of

00:07:50.320 --> 00:07:53.440
the different applications,
the third-party apps and Macromedia

00:07:53.440 --> 00:07:55.100
applications that run inside of Central.

00:07:55.100 --> 00:07:58.000
The end user has sort of
an expected experience.

00:07:58.120 --> 00:08:01.770
They're not going to be afraid of
trying to download new applications,

00:08:01.770 --> 00:08:04.100
try them out, purchase them, and so on.

00:08:04.100 --> 00:08:07.340
They have to be afraid of different
types of purchase mechanisms,

00:08:07.470 --> 00:08:09.100
something that they can trust.

00:08:09.400 --> 00:08:13.100
Finally, you can use applications
online and offline.

00:08:13.100 --> 00:08:15.820
This is, of course,
up to the application developer

00:08:15.820 --> 00:08:18.560
to support both modes,
but since Central is not

00:08:18.630 --> 00:08:22.460
tied to a web browser,
you can actually have applications that

00:08:22.630 --> 00:08:26.100
store data for offline use and make that
available when you're even not connected.

00:08:26.100 --> 00:08:29.850
And finally,
applications built for Central will

00:08:29.850 --> 00:08:35.100
run on OS X as well as Windows and
also in the future handheld devices.

00:08:35.220 --> 00:08:37.100
And they're all based on
the Flash Player technology.

00:08:40.320 --> 00:08:45.260
So to develop for Macromediacentral,
you just use Macromediaflash MX,

00:08:45.260 --> 00:08:47.820
which is our shipping
flash authoring tool,

00:08:47.850 --> 00:08:51.200
and the Central SDK,
which is currently in beta right now

00:08:51.200 --> 00:08:55.200
and then later this summer or early fall
will be available for public release.

00:08:55.200 --> 00:08:58.970
You use existing components that ship
with Flash and also other components,

00:08:58.970 --> 00:09:03.160
UI widgets and other types of components
that are available from third parties.

00:09:03.160 --> 00:09:06.880
You can use those as well as some
additional components that we've built

00:09:06.970 --> 00:09:11.200
just for Central to provide a consistent
look and feel across applications.

00:09:11.200 --> 00:09:16.200
Also, you can build on top of web
services and other structured data.

00:09:16.200 --> 00:09:20.140
So Central includes built-in
native support for SOAP and WSDL,

00:09:20.250 --> 00:09:25.200
so you can use web services directly from
the Central client to talk to a server.

00:09:25.200 --> 00:09:27.920
And the environment,
as I mentioned before,

00:09:27.930 --> 00:09:30.090
it's all built on Flash technology.

00:09:30.250 --> 00:09:33.760
So if you can develop for Flash,
then you can develop for Central.

00:09:34.060 --> 00:09:38.550
So, as a developer,
you have the benefits of a very

00:09:38.550 --> 00:09:40.880
widely supported development tool.

00:09:41.270 --> 00:09:45.040
There's built-in support for
the transaction infrastructure,

00:09:45.040 --> 00:09:48.030
for download and
installation of applications,

00:09:48.270 --> 00:09:52.420
services for exchanging data to servers,
as well as between applications

00:09:52.490 --> 00:09:55.900
running locally on the client,
as well as auto-updating technology.

00:09:55.900 --> 00:09:57.480
So,
if you build an application for Central,

00:09:57.480 --> 00:09:59.890
and then a few months down the road
you want to push out a new version,

00:09:59.900 --> 00:10:03.890
all that infrastructure is
already there for you in Central,

00:10:03.960 --> 00:10:06.980
and so you don't have to do any
special work to support auto-update.

00:10:07.190 --> 00:10:13.100
and finally, Macromedias is going to
provide an application finder,

00:10:13.100 --> 00:10:15.860
which is a global directory
of all of the applications out

00:10:15.860 --> 00:10:18.600
there available for try and buy.

00:10:18.650 --> 00:10:21.280
And you can become listed in
this application directory

00:10:21.470 --> 00:10:24.260
called the app finder,
and then everybody who has

00:10:24.370 --> 00:10:27.290
Central has this directory always
available on their machine as part

00:10:27.450 --> 00:10:29.600
of the Central runtime environment.

00:10:29.670 --> 00:10:31.330
So if they're out there
looking for new applications,

00:10:31.330 --> 00:10:33.840
they can find them,
and we'll show you a little bit of a

00:10:33.840 --> 00:10:36.100
demo of that in a screenshot in a minute.

00:10:36.160 --> 00:10:39.410
So it's a really good way to get
exposure to your application.

00:10:40.220 --> 00:10:43.710
And of course, the benefits of just being
based on the Flash technology,

00:10:43.870 --> 00:10:47.380
the ubiquity of the Flash player is
distributed to virtually all desktop

00:10:47.500 --> 00:10:48.980
systems over the last few years.

00:10:49.000 --> 00:10:53.340
So, people who have the current Flash 6
player already have the capability

00:10:53.340 --> 00:10:57.200
for downloading and installing
Central and Central applications.

00:10:57.200 --> 00:10:59.700
And so,
there's already some millions of end

00:10:59.700 --> 00:11:01.860
users out there with that capability.

00:11:02.190 --> 00:11:07.000
There's a community of 750,000
Flash developers worldwide today.

00:11:07.000 --> 00:11:10.840
So, there's a very large developer
base and a support network set up

00:11:11.040 --> 00:11:13.000
for people developing for Flash.

00:11:13.180 --> 00:11:17.190
You've got the portability across
platforms that I mentioned before,

00:11:17.190 --> 00:11:21.660
as well as the ease of development
of the Flash and the space-efficient

00:11:21.740 --> 00:11:23.980
file format and architecture.

00:11:24.000 --> 00:11:27.000
And finally,
Flash is a multimedia player.

00:11:27.000 --> 00:11:29.000
And so,
in addition to all that other good stuff,

00:11:29.000 --> 00:11:33.000
you've got support for things like video,
audio, animation, you know,

00:11:33.000 --> 00:11:36.000
anti-aliased vector graphics, images,
interactivity, and so on.

00:11:36.000 --> 00:11:37.790
and so on.

00:11:38.970 --> 00:11:42.500
Here's a screenshot of the
user interface of Central.

00:11:42.500 --> 00:11:50.450
What you see here in the main window
is what we call the application window.

00:11:50.540 --> 00:11:54.500
This is the main area where
applications inside Central run.

00:11:54.500 --> 00:11:58.460
At the very top,
you'll see a toolbar with icons on it.

00:11:58.500 --> 00:12:00.500
That's the launcher area.

00:12:00.500 --> 00:12:04.700
Each application you install has
an icon and it becomes listed at

00:12:04.700 --> 00:12:07.500
the top there in that toolbar.

00:12:07.500 --> 00:12:10.500
The end user simply clicking on
that icon launches the application.

00:12:10.500 --> 00:12:13.490
You can bring up multiple of
these applications if you want,

00:12:13.550 --> 00:12:14.490
just like a web browser.

00:12:14.580 --> 00:12:17.400
It's a very simple,
easy-to-use interface.

00:12:17.540 --> 00:12:19.430
You get an icon, you click on it,
and it runs the application.

00:12:19.500 --> 00:12:24.500
The rest of the space in that window
is for the application itself to run.

00:12:24.620 --> 00:12:28.500
That's up to you as a developer to decide
whatever you want to put in that space.

00:12:28.500 --> 00:12:31.460
Like I said before,
we'll be providing a set of components

00:12:31.510 --> 00:12:36.100
that you can use to handle a lot of the
common user interface functionality.

00:12:36.100 --> 00:12:40.090
On the right side of the screen
is what we call the console.

00:12:40.170 --> 00:12:45.100
This is a toolbar that can
display optionally small,

00:12:45.100 --> 00:12:47.960
miniature versions of these
applications that can be there

00:12:48.160 --> 00:12:52.100
as a persistent presence on the
user's desktop as an option.

00:12:52.100 --> 00:12:56.140
For example,
here we've got a traffic camera showing

00:12:56.140 --> 00:12:58.100
all the time and a weather satellite map.

00:12:58.100 --> 00:13:02.100
You can imagine other types of things
like stock tickers or news information,

00:13:02.100 --> 00:13:04.000
other types of feeds,
they can run as little

00:13:04.000 --> 00:13:05.090
tiles in this toolbar.

00:13:05.100 --> 00:13:08.100
This is also where
notifications appear as well.

00:13:08.100 --> 00:13:10.100
If an application wants to
present a notice to the user

00:13:10.100 --> 00:13:13.260
that some event has occurred,
a price of a product that

00:13:13.440 --> 00:13:16.100
they're interested in has
dropped to a certain amount,

00:13:16.100 --> 00:13:20.100
then the notices can appear
there in the console as well.

00:13:20.100 --> 00:13:22.100
These windows can be open
or closed independently.

00:13:22.100 --> 00:13:24.100
You don't have to have
any of these windows open.

00:13:24.100 --> 00:13:27.100
It can just be running in the background,
or you can be interacting in

00:13:27.170 --> 00:13:29.920
the main application space,
or you can just have that console

00:13:29.920 --> 00:13:33.190
up if you just want to have a small
bit of real estate used to show

00:13:33.230 --> 00:13:34.100
this information on your desktop.

00:13:34.100 --> 00:13:35.440
on your desktop.

00:13:35.490 --> 00:13:38.510
So those are the basic
elements of the central UI.

00:13:40.800 --> 00:13:43.940
So as far as the installation goes,
I mentioned before,

00:13:43.940 --> 00:13:46.490
you can install directly from a website.

00:13:46.560 --> 00:13:50.540
So here's an example of,
there's a company called Price Grabber,

00:13:50.540 --> 00:13:52.960
which has a shopping site that
lets you compare prices for

00:13:53.090 --> 00:13:54.460
different products online.

00:13:54.460 --> 00:13:57.680
And we've been working with them to
build an application for Central.

00:13:57.700 --> 00:14:01.960
And so here's an example of what
their website could look like with

00:14:01.960 --> 00:14:04.610
a Central installation button on it.

00:14:04.660 --> 00:14:07.110
So essentially,
all you have to do is put a

00:14:07.110 --> 00:14:10.880
small Flash movie in your website
with a button on it to install.

00:14:10.880 --> 00:14:12.840
All the user has to do
is click that button.

00:14:12.900 --> 00:14:15.110
If they don't have Central installed,
it's automatically

00:14:15.190 --> 00:14:16.340
downloaded and installed.

00:14:16.410 --> 00:14:19.100
Then the application itself is
automatically downloaded and installed,

00:14:19.100 --> 00:14:19.870
and then it's launched.

00:14:20.020 --> 00:14:22.690
This all happens in a matter
of a couple of seconds,

00:14:22.690 --> 00:14:27.090
and then they're up and running with
the application outside of the browser.

00:14:28.700 --> 00:14:30.210
So that's installing from a web page.

00:14:30.380 --> 00:14:35.490
And then the alternative is you can also
install from the application finder.

00:14:35.660 --> 00:14:38.340
And this probably isn't too
easy to see with this display,

00:14:38.340 --> 00:14:41.400
but it's essentially a
directory of applications.

00:14:41.440 --> 00:14:44.490
And the end user can sort
by different categories.

00:14:44.540 --> 00:14:48.140
There's a whole rating system
where people can provide feedback

00:14:48.300 --> 00:14:50.270
to applications and rate them.

00:14:50.270 --> 00:14:53.540
You get all the information on
whether it's a free application,

00:14:53.680 --> 00:14:56.530
how much it costs,
what the length of the trial period is,

00:14:56.530 --> 00:14:57.230
and so on.

00:14:57.280 --> 00:14:59.190
So there's different ways
to browse through the whole

00:14:59.190 --> 00:15:00.330
directory of applications.

00:15:00.380 --> 00:15:03.310
And this is available, like I said,
as a built-in component

00:15:03.390 --> 00:15:04.870
of Central for all users.

00:15:05.050 --> 00:15:07.390
And there will also be a
version of this on a website,

00:15:07.390 --> 00:15:10.320
so you can access it even
outside of Central if you want.

00:15:12.610 --> 00:15:14.840
So next I'm going to
bring up Alex Wright,

00:15:14.840 --> 00:15:16.310
who is an independent developer.

00:15:16.500 --> 00:15:19.440
He's been working with us since
the conception of Central,

00:15:19.770 --> 00:15:23.310
helping develop applications
and helping design the look

00:15:23.400 --> 00:15:25.500
and feel of our applications.

00:15:25.500 --> 00:15:27.470
And he's going to give some
demonstrations of some apps

00:15:27.470 --> 00:15:28.270
running inside Central.

00:15:28.370 --> 00:15:29.240
Okay, great.

00:15:29.240 --> 00:15:30.310
Thanks Alex.

00:15:30.310 --> 00:15:33.230
Thanks Dave.

00:15:35.500 --> 00:17:35.900
[Transcript missing]

00:17:36.270 --> 00:17:39.160
Dave already gave you
a preview of the UI.

00:17:39.200 --> 00:17:41.200
I'll just let this load quickly.

00:17:41.200 --> 00:17:42.150
That's price grabber.

00:17:42.220 --> 00:17:44.200
Let me start over here.

00:17:44.200 --> 00:17:45.200
Okay.

00:17:45.200 --> 00:17:47.180
So you see here's the application window.

00:17:47.200 --> 00:17:49.200
Here's the console.

00:17:49.200 --> 00:17:52.200
And we've got a couple of applications
loaded into the app finder here.

00:17:52.200 --> 00:17:55.240
So what I'm going to do first
is just walk you through a

00:17:55.280 --> 00:17:58.170
couple of the applications and
sort of show you how they work.

00:17:58.260 --> 00:18:02.200
So we'll come back to the
app finder later maybe.

00:18:02.200 --> 00:18:04.580
But I'll start with
one for price grabber,

00:18:04.590 --> 00:18:07.200
which Dave showed you
sort of a snapshot of.

00:18:07.270 --> 00:18:11.780
So, again, price grabber is one of these
services that provides comparative

00:18:11.960 --> 00:18:14.200
pricing data on consumer products.

00:18:14.200 --> 00:18:16.240
So they have something like
-- I think it's something like

00:18:16.240 --> 00:18:18.100
15,000 products in their catalog.

00:18:18.200 --> 00:18:23.200
And they get prices from a lot of
different retailers on a daily basis.

00:18:23.200 --> 00:18:26.180
And you can get sort of like MySignment
or there's several services like that.

00:18:26.300 --> 00:18:29.620
And their business model
is they basically syndicate

00:18:29.620 --> 00:18:32.190
this data to other sites,
like I think Lycos, for example.

00:18:32.200 --> 00:18:33.190
Lycos uses them.

00:18:33.200 --> 00:18:34.200
A few others do.

00:18:34.200 --> 00:18:39.200
So really while they do have a website
that you can go and search for prices on,

00:18:39.200 --> 00:18:42.200
what they're really in the business
of is syndicating this pricing data.

00:18:42.270 --> 00:18:45.320
So what we wanted to do was see if
we could create sort of a better

00:18:45.320 --> 00:18:49.200
interface to comparative pricing
data using the central environment.

00:18:49.200 --> 00:18:51.200
And this is what we come up with.

00:18:51.200 --> 00:18:53.190
This is actually sort
of a first build of it.

00:18:53.200 --> 00:18:55.600
We're actually working on a next build
that will actually be a little more

00:18:55.640 --> 00:18:57.200
sophisticated and have some new features.

00:18:57.200 --> 00:18:59.200
But I'll show you some
of the basics here.

00:18:59.200 --> 00:19:02.190
So one thing I can do
here is just do a search.

00:19:02.200 --> 00:19:07.450
So let's say I wanted
to search for an iBook.

00:19:08.450 --> 00:19:10.380
So I'm going to click the submit button.

00:19:10.430 --> 00:19:14.930
And what's happening here is
the application is parsing a

00:19:14.930 --> 00:19:20.330
request that gets sent out via
HTTP to the PriceGrabber server.

00:19:20.400 --> 00:19:24.200
What happens is the PriceGrabber
server responds with an XML file that

00:19:24.200 --> 00:19:28.400
we read into the application that
contains all the data that you see here.

00:19:28.400 --> 00:19:32.510
So basically what it came back with
was three matches for Apple iBook.

00:19:32.510 --> 00:19:34.300
And what it's showing me is the
best price for each of them.

00:19:34.410 --> 00:19:38.390
And they'll get, I think,
up to like 20 different prices.

00:19:38.480 --> 00:19:40.400
But at least in our application,
we'll show you the best price.

00:19:40.400 --> 00:19:45.410
And then it shows you sort of where
that search result fits in this product

00:19:45.410 --> 00:19:50.470
hierarchy or taxonomy that they've got,
which I can also browse around

00:19:50.470 --> 00:19:52.680
and explore here if I want to.

00:19:53.580 --> 00:19:56.260
So for instance, we can do this.

00:19:56.360 --> 00:19:57.390
So you can see it's pretty responsive.

00:19:57.400 --> 00:20:01.260
Every time I'm clicking on
something on the screen,

00:20:01.260 --> 00:20:05.480
it's sending a request off to
PriceGrabber and bringing a dataset back.

00:20:05.550 --> 00:20:09.110
You can see just in the process
of sort of clicking around here,

00:20:11.070 --> 00:20:13.490
This is a much more efficient
interaction than it would be,

00:20:13.500 --> 00:20:15.720
say,
in a web browser where you'd have to go,

00:20:15.720 --> 00:20:17.170
you know,
web page to web page to web page,

00:20:17.200 --> 00:20:20.180
get a whole chunk of HTML back
with every one of these requests.

00:20:20.380 --> 00:20:23.470
Basically, with Central,
we're able to put together a request

00:20:23.540 --> 00:20:27.070
and very efficiently just request the
exact pieces of data that we want to

00:20:27.070 --> 00:20:29.880
get back and read into the application.

00:20:29.930 --> 00:20:32.400
A couple other things we can do
with using some of the standard

00:20:32.400 --> 00:20:34.280
components that Macromedias developed.

00:20:34.280 --> 00:20:38.510
This is one called the
Data Grid that lets me do sorting.

00:20:38.870 --> 00:20:41.560
Very simple, very familiar sort of
desktop OS convention.

00:20:41.560 --> 00:20:44.940
But again, if you compare this to the
experience in a web browser,

00:20:44.940 --> 00:20:49.180
there's no easy way to do this in a web
browser without going off to a server,

00:20:49.180 --> 00:20:52.090
whereas this is all happening
locally inside the application.

00:20:52.100 --> 00:20:54.100
Oops.

00:20:54.100 --> 00:20:58.600
We didn't see that.

00:20:59.610 --> 00:21:05.120
Okay, so as I'm going through here,
I'll just move on through

00:21:05.120 --> 00:21:07.430
the application a little bit.

00:21:08.100 --> 00:21:19.100
[Transcript missing]

00:21:33.240 --> 00:21:36.880
Okay, and here we go.

00:21:36.880 --> 00:21:40.730
Okay,
so here's another feature of Central.

00:21:40.840 --> 00:21:43.320
It remembered where I was
when I just shut down and

00:21:43.320 --> 00:21:44.240
came back to the application.

00:21:44.240 --> 00:21:46.990
It preserves the state,
remembers exactly where you left

00:21:47.060 --> 00:21:49.050
the application when you come back.

00:21:49.290 --> 00:21:51.650
So let's see if I can
pick up where I left off,

00:21:51.650 --> 00:21:52.200
okay.

00:21:53.130 --> 00:21:55.990
So as I go through and
browse through these items,

00:21:55.990 --> 00:21:59.180
you can see what's appearing down in
the preview pane is sort of a thumbnail

00:21:59.180 --> 00:22:03.890
image displaying the product shot,
some basic data about the product specs.

00:22:03.900 --> 00:22:08.040
We also get user reviews that are
also provided by PriceGrabber.

00:22:08.320 --> 00:22:12.630
Now, if I see a product that I like,
I can add it to my favorites list.

00:22:12.700 --> 00:22:14.270
And what happens here is it gets added.

00:22:14.300 --> 00:22:18.760
You can see it switch to another
tab here where I can keep sort

00:22:18.760 --> 00:22:20.100
of a short list of products.

00:22:20.100 --> 00:22:21.790
We're also creating a feature
where you'll be able to

00:22:21.910 --> 00:22:22.790
set a price notification.

00:22:22.810 --> 00:22:24.770
So if the price drops,
you can get a notification

00:22:24.770 --> 00:22:29.060
in Central that will tell
you that the price went down.

00:22:29.900 --> 00:22:31.980
So those are just a couple
of things you can do with it.

00:22:31.980 --> 00:22:36.390
And another thing we're working on is
the ability to do sort of more advanced

00:22:36.390 --> 00:22:39.700
searching based on specs and filter,
you know, basically looking at different

00:22:39.790 --> 00:22:42.760
criteria or specs around a product,
being able to do more advanced

00:22:42.760 --> 00:22:44.030
searching and filtering around it.

00:22:44.120 --> 00:22:46.620
So anyway, so that's PriceGrabber.

00:22:46.630 --> 00:22:49.500
I'm gonna show you another example
of an app we've been working on,

00:22:49.500 --> 00:22:52.060
and this is a stock ticker app.

00:22:52.140 --> 00:22:54.140
So the first thing you'll
see here when this comes up,

00:22:54.160 --> 00:22:57.460
when I run it, this is an example of
the Try Buy feature.

00:22:57.590 --> 00:23:00.580
So this basically is sort of an
example of how this would work.

00:23:00.640 --> 00:23:02.500
If you're a third-party
developer and you launch an app,

00:23:02.500 --> 00:23:08.620
you release an application on Central,
it'll have a built-in Try Buy facility

00:23:08.650 --> 00:23:11.190
so that you can put an application
out for trial for as long as you

00:23:11.310 --> 00:23:12.940
want and then put a price on it.

00:23:12.980 --> 00:23:15.830
And then the user can either try or buy.

00:23:16.010 --> 00:23:19.700
So as soon as the trial period expires,
they'd be forced to buy it or they

00:23:19.700 --> 00:23:21.460
wouldn't be able to use it anymore.

00:23:21.610 --> 00:23:23.120
Well,
let's say I'm still in the trial period,

00:23:23.160 --> 00:23:23.950
so I'll hit Try.

00:23:24.080 --> 00:23:28.620
And this is basically just a,
a fairly raw prototype

00:23:28.620 --> 00:23:29.600
of the application.

00:23:29.600 --> 00:23:33.980
But what this will do,
let's say I wanna look up a stock quote.

00:23:33.980 --> 00:23:38.210
I'll put in about these guys.

00:23:38.610 --> 00:23:41.140
And this is going,
querying a third-party web service,

00:23:41.140 --> 00:23:44.700
pulling back the stock quote data.

00:23:45.030 --> 00:23:49.220
So it gives me current quote,
change date, and then some additional

00:23:49.530 --> 00:23:50.580
detail down below.

00:23:50.590 --> 00:23:52.080
Select that, okay.

00:23:52.690 --> 00:23:54.080
So it's fairly straightforward.

00:23:54.080 --> 00:23:55.640
I mean, nothing, you know,
sort of what you'd expect

00:23:55.640 --> 00:23:56.340
a stock taker to do.

00:23:56.340 --> 00:23:57.460
But again,
a little more efficient than you

00:23:57.520 --> 00:23:58.710
could do with a web-based application.

00:23:58.720 --> 00:24:03.470
But what's interesting
about this is I can also...

00:24:04.010 --> 00:24:07.300
The first step is to set an alert so that
if I wanted to set a target price or sort

00:24:07.300 --> 00:24:10.710
of a stop price on a particular stock,
I could set up a notification

00:24:10.710 --> 00:24:13.540
and it would proactively,
if the stock hit that price,

00:24:13.550 --> 00:24:17.920
it would proactively notify me in the
console using the notification feature.

00:24:17.920 --> 00:24:21.630
So again, a way of making the
application a little smarter,

00:24:21.670 --> 00:24:24.330
a little more aware,
and adding a little bit

00:24:24.330 --> 00:24:25.910
of value for the user.

00:24:26.300 --> 00:24:34.200
[Transcript missing]

00:24:35.750 --> 00:24:37.580
I think this is a good example of,
you know,

00:24:37.600 --> 00:24:39.810
since this is such a lightweight,
sort of, you know,

00:24:39.920 --> 00:24:43.120
concise little application,
it's a good candidate for what

00:24:43.120 --> 00:24:47.860
we're calling tiles or pods or these
things that appear up in the console.

00:24:47.860 --> 00:24:52.140
So this is just a sort of
boiled down version of the...

00:24:53.240 --> 00:24:54.010
of the application.

00:24:54.040 --> 00:24:56.500
So let's see how JetBlue is doing.

00:24:56.600 --> 00:24:59.250
So again, similar sort of thing,
but just gives you a very nice little,

00:24:59.320 --> 00:25:01.950
handy little utility application
that you can use to do sort

00:25:01.960 --> 00:25:03.950
of quick queries like that.

00:25:04.160 --> 00:25:07.730
Let's see,
so let's keep moving along here.

00:25:07.730 --> 00:25:11.600
Here's a prototype of a weather
application we've been working on,

00:25:11.720 --> 00:25:15.100
and this is using AccuWeather.

00:25:16.730 --> 00:25:19.630
So what you get here is basically, again,
fairly straightforward.

00:25:19.640 --> 00:25:27.600
You can just look up whether for
any location and it'll accept...

00:25:28.500 --> 00:25:37.300
[Transcript missing]

00:25:37.360 --> 00:25:41.140
and I can have up to,
I think it's up to 10 weather forecasts.

00:25:41.240 --> 00:25:43.370
You can see as I flip through these,
it's fairly efficient 'cause this

00:25:43.380 --> 00:25:44.620
is all happening on the client side.

00:25:44.730 --> 00:25:47.640
So once this data is
cached in the application,

00:25:47.650 --> 00:25:49.750
all this is happening locally.

00:25:49.780 --> 00:25:54.380
Now, let's say I wanna just
keep an eye on the weather.

00:25:54.910 --> 00:26:01.580
What I just did was I hit tile here,
and that could launch...

00:26:01.750 --> 00:26:04.150
So I can basically just take
this little weather forecast,

00:26:04.230 --> 00:26:06.490
sort of pin it to my desktop
and keep an eye on it,

00:26:06.510 --> 00:26:11.170
and it'll automatically refresh,
you know, on a set interval.

00:26:12.080 --> 00:26:15.100
So you can see now I've got two
things going on in my console here.

00:26:15.100 --> 00:26:17.980
I've got the AccuWeather application
and the stock application.

00:26:18.000 --> 00:26:21.390
And you can have sort of an indefinite
number of these things over time.

00:26:21.400 --> 00:26:24.770
So it gives you a way of creating
applications that can have a little

00:26:24.930 --> 00:26:28.730
persistence on the desktop and take
advantage of the runtime environment to

00:26:28.730 --> 00:26:32.390
do things like polling and notification
and just create a little more of

00:26:32.390 --> 00:26:34.360
a rich experience for the user.

00:26:34.360 --> 00:26:37.500
And I think what's really,
the really interesting opportunity

00:26:37.500 --> 00:26:41.090
with these applications is the ability,
because you're in this single session

00:26:41.400 --> 00:26:45.150
state in the central environment,
opens up all kinds of possibilities

00:26:45.240 --> 00:26:49.480
for these applications to talk to each
other and to share data with each other.

00:26:49.480 --> 00:26:52.040
You can actually permit one
application to expose its

00:26:52.040 --> 00:26:53.640
data to another application.

00:26:53.640 --> 00:26:56.850
So for instance, if you were,
I don't know, looking up a movie time,

00:26:56.850 --> 00:26:59.140
you could add it to your
calendar very easily.

00:26:59.160 --> 00:27:01.850
So you could take, you know,
the calendar being another application

00:27:01.870 --> 00:27:03.230
that might exist at some point.

00:27:03.860 --> 00:27:04.280
And I think that's really interesting.

00:27:04.280 --> 00:27:06.350
There are all kinds of
opportunities like that.

00:27:06.460 --> 00:27:08.130
For instance,
let's say you're thinking of,

00:27:08.540 --> 00:27:10.710
I don't know, traveling somewhere.

00:27:10.720 --> 00:27:11.740
You know,
you might be able to look up the

00:27:11.740 --> 00:27:17.750
weather and get a map to a location and,
you know, add that to a shared calendar

00:27:17.760 --> 00:27:19.110
that you might send out to people.

00:27:19.170 --> 00:27:23.200
So there's all kinds of opportunities
to share data and create,

00:27:23.200 --> 00:27:25.950
and basically it gives you an environment
where applications can talk to each

00:27:25.950 --> 00:27:28.680
other and be sort of aware of each other.

00:27:28.700 --> 00:27:31.000
Which is something that's just very
difficult to do with traditional

00:27:31.000 --> 00:27:33.570
web-based applications where
you're really in much more of a

00:27:33.570 --> 00:27:35.920
siloed mode where each application
needs to exist separately.

00:27:35.920 --> 00:27:39.920
So those are just a couple of examples.

00:27:39.920 --> 00:27:43.440
We talked about the App Finder.

00:27:43.450 --> 00:27:47.340
So I thought I'd just show you the
working version of this real quick.

00:27:47.500 --> 00:27:49.780
This is just a sort of sample,
a couple of applications

00:27:49.780 --> 00:27:50.880
that are in there now.

00:27:50.880 --> 00:27:58.400
This is a sort of a demo prototype
for a Homeland Security application.

00:27:58.400 --> 00:28:02.000
And I don't know if this will
actually see the light of day or not,

00:28:02.000 --> 00:28:03.390
but it's sort of an interesting idea.

00:28:03.400 --> 00:28:08.220
You could just get a-- you could
see Tom Ridge's vase and get a--

00:28:08.400 --> 00:28:25.400
[Transcript missing]

00:28:32.000 --> 00:28:33.460
So that's where we're at.

00:28:33.460 --> 00:28:34.890
These are just a few of the applications.

00:28:34.900 --> 00:28:36.780
I hope this gives you just some idea of
some of the things that are possible.

00:28:36.780 --> 00:28:38.500
These are all, you know,
somewhat prototype-y.

00:28:38.500 --> 00:28:41.380
There's several other applications
that are currently in development

00:28:41.380 --> 00:28:43.960
that should ship when the final
version of Central goes out.

00:28:44.110 --> 00:28:45.800
But hopefully this gives you
some idea of some of the things

00:28:45.880 --> 00:28:47.640
that we're thinking about,
and hopefully you can come up

00:28:47.640 --> 00:28:48.840
with better ideas than these.

00:28:48.880 --> 00:28:52.540
Anyway, so I think that's all I've got.

00:28:52.540 --> 00:28:56.410
I'm going to turn it over to Mike here,
who's going to tell us a little

00:28:56.410 --> 00:28:56.410
more about developing in Central.

00:28:59.500 --> 00:29:02.500
Thanks, Alex.

00:29:02.500 --> 00:29:03.460
Can I go back to the slides?

00:29:03.460 --> 00:29:07.620
Thank you.

00:29:09.290 --> 00:29:12.490
So what I'm going to do is give you
a little overview of how all of this

00:29:12.610 --> 00:29:17.580
works and show you a little bit how to
build a really simple application using

00:29:17.580 --> 00:29:20.650
the Central framework and environment.

00:29:20.910 --> 00:29:22.580
First of all,
I want to give you an overview of

00:29:22.580 --> 00:29:24.430
what the file format of Flash is.

00:29:24.440 --> 00:29:27.800
It's called SWIFT,
which stands for Small Web Format.

00:29:27.800 --> 00:29:29.800
That is what kind of basically
is the heart of Flash.

00:29:29.800 --> 00:29:32.150
And when you create something
using the Flash authoring tool,

00:29:32.150 --> 00:29:33.790
you're actually creating a SWIFT file.

00:29:33.810 --> 00:29:36.060
It's basically the native format.

00:29:36.060 --> 00:29:40.200
It's a compiled binary file that
contains bytecode and media that's

00:29:40.220 --> 00:29:42.680
been compiled by the authoring tool.

00:29:42.950 --> 00:29:45.610
And so there's a number of different
tools that create SWIFT content.

00:29:45.890 --> 00:29:48.660
Macromedias is kind of like the
keeper of that format currently.

00:29:48.870 --> 00:29:53.800
And it's an open format that has
basically become the de facto standard

00:29:53.800 --> 00:29:55.800
for doing rich media on the web.

00:29:55.800 --> 00:30:01.020
And Central is our next step to taking
things outside of the web browser and

00:30:01.030 --> 00:30:03.700
more into the desktop environment.

00:30:03.800 --> 00:30:08.800
And the primary scripting language of
Flash is what we call ActionScript.

00:30:08.800 --> 00:30:13.150
It's based upon ECMA 262
with extensions for the

00:30:13.150 --> 00:30:15.800
Flash document object model or DOM.

00:30:15.800 --> 00:30:20.160
And it's the same exact scripting
language that you would use for

00:30:20.160 --> 00:30:22.870
JavaScript inside of a web browser.

00:30:24.250 --> 00:30:26.320
So the
Central Application Architecture is

00:30:26.320 --> 00:30:29.100
made up of four major parts.

00:30:29.320 --> 00:30:32.330
There's the application shell,
the console,

00:30:32.350 --> 00:30:38.690
the central user interface components,
and a number of different Swift files

00:30:38.710 --> 00:30:42.050
that kind of broker that data back
and forth for you as a developer

00:30:42.170 --> 00:30:45.100
so that you don't have to do kind
of a lot of the dirty work needed

00:30:45.100 --> 00:30:48.150
to make these applications and
pieces work together properly.

00:30:48.200 --> 00:30:52.140
So the main central parts are the
main application that you create,

00:30:52.140 --> 00:30:55.050
the tiles,
and these things that we call agents.

00:30:55.200 --> 00:30:59.290
And agents are kind of like invisible
background processes that allow you

00:30:59.300 --> 00:31:03.490
to kind of broker data back and forth
between all these different parts.

00:31:04.800 --> 00:31:07.020
So all of this is built,
as I said before,

00:31:07.140 --> 00:31:11.740
on top of the Flash Player with
some things added on top of it.

00:31:11.770 --> 00:31:15.010
And those things are, first of all,
something that's very exciting

00:31:15.040 --> 00:31:17.880
to Mac users is we added a lot
of performance enhancements,

00:31:17.940 --> 00:31:20.210
not only on Windows but
on the Macintosh as well,

00:31:20.420 --> 00:31:21.360
to make it run a lot better.

00:31:21.360 --> 00:31:24.910
We've had AltaVec enhancements for
graphics and alpha channels and

00:31:24.980 --> 00:31:27.950
things that in the past have been
significantly slower on the Mac.

00:31:28.020 --> 00:31:30.680
And now we have parity
between Windows and Mac for

00:31:31.080 --> 00:31:32.460
that kind of performance.

00:31:32.580 --> 00:31:35.000
So that's something that
makes Mac users very happy.

00:31:35.030 --> 00:31:38.790
We've added native web service
APIs so that you can call WSDL and

00:31:38.800 --> 00:31:42.080
you can make direct SOAP calls
without having to go through,

00:31:42.090 --> 00:31:45.770
as you do today,
through flash remoting or some

00:31:45.800 --> 00:31:47.590
type of gateway on the server side.

00:31:47.600 --> 00:31:50.850
We've also added,
because of the fact that we

00:31:50.850 --> 00:31:53.620
don't have to worry so much about
the size of the Flash Player,

00:31:53.670 --> 00:31:56.930
we've added regular expression
APIs so that you can do lots of more

00:31:56.930 --> 00:31:59.400
advanced string manipulation that
you'd have to do when you're bringing

00:31:59.720 --> 00:32:02.000
in large data sets from the web.

00:32:02.010 --> 00:32:04.720
And we've also made it so that,
because you're not in the browser,

00:32:04.850 --> 00:32:06.870
you don't have the ability
to kind of cache data.

00:32:06.980 --> 00:32:10.080
We've given you APIs where you
can manually cache that data.

00:32:10.120 --> 00:32:12.550
And we've also made it so that
we have a direct connection

00:32:12.590 --> 00:32:14.230
to an e-commerce system.

00:32:14.290 --> 00:32:17.750
So if you want to sell your applications
or do transactional processing,

00:32:17.800 --> 00:32:19.640
we do that for you.

00:32:20.600 --> 00:33:22.800
[Transcript missing]

00:33:22.970 --> 00:33:26.390
And then the next time the person
comes up and opens the application,

00:33:26.390 --> 00:33:28.400
they immediately get back to that point.

00:33:28.440 --> 00:33:30.510
Excuse me.

00:33:34.490 --> 00:33:38.250
So here's a quick kind of
stack diagram that shows what's

00:33:38.250 --> 00:33:40.650
actually going on inside Flash.

00:33:40.760 --> 00:33:45.160
So at the most basic level is
the native operating system.

00:33:45.160 --> 00:33:48.150
Mac, Windows,
a device such as Pocket PC or

00:33:48.150 --> 00:33:51.220
any other device that comes along
that can run the Flash player,

00:33:51.290 --> 00:33:53.770
such as Nokia handhelds,
all those kind of things that we

00:33:53.770 --> 00:33:55.700
have the Flash player running on.

00:33:55.750 --> 00:33:59.240
And the next thing up is
the Flash standalone player.

00:33:59.270 --> 00:34:04.560
And it's basically taking the runtime
version that you have inside the browser

00:34:04.560 --> 00:34:09.340
and it's wrapped around an executable
that kind of brokers and holds this data.

00:34:09.370 --> 00:34:12.620
And sitting on top of that is
something we call the controller,

00:34:12.660 --> 00:34:17.720
which is a Swift movie that then kind of,
that does all of the controlling of,

00:34:17.720 --> 00:34:20.860
you know, what messages are gonna be
sent between what windows,

00:34:20.920 --> 00:34:23.830
opening new windows,
opening new consoles,

00:34:23.910 --> 00:34:27.190
getting data from the server side,
storing preferences.

00:34:27.350 --> 00:34:31.600
Sitting on top of that is the
primary areas as a developer

00:34:31.600 --> 00:34:33.200
where you can build something.

00:34:33.200 --> 00:34:36.590
As a developer,
you can build your own application

00:34:37.190 --> 00:34:39.200
that sits inside the app shell,
you can build your own tiles

00:34:39.200 --> 00:34:42.000
that sit inside the console,
and you can build your own agents

00:34:42.270 --> 00:34:44.200
that sit inside the agent manager.

00:34:44.200 --> 00:34:48.630
It deals with all these invisible,
persistent background processes.

00:34:50.750 --> 00:34:54.640
So, like I said,
applications contain three primary parts.

00:34:54.700 --> 00:34:56.750
So there's an XML product definition.

00:34:56.820 --> 00:35:01.260
So there's an XML file called the product
XML that says this is what this file,

00:35:01.320 --> 00:35:02.760
this is what this application is.

00:35:02.770 --> 00:35:06.160
It contains this size, this width,
these contents.

00:35:06.160 --> 00:35:09.780
The next part of it is the actual
Swift that you compiled using

00:35:09.780 --> 00:35:12.170
the authoring tool that has
all of your application logic,

00:35:12.270 --> 00:35:16.660
your graphics, your video, your audio,
all the things you can do in Flash.

00:35:16.700 --> 00:35:19.480
And the last thing is kind of the
icon that represents that inside

00:35:19.480 --> 00:35:23.140
of the central application runtime.

00:35:24.300 --> 00:35:27.900
It's kind of hard to see,
but this is basically an example

00:35:27.900 --> 00:35:30.460
of what a product XML file
is and what it presents.

00:35:30.540 --> 00:35:33.110
It kind of gives you
data upon who created it,

00:35:33.220 --> 00:35:36.700
what time it was, and all the things that
represent your application.

00:35:36.700 --> 00:35:38.800
So, to Central, this is your application.

00:35:38.950 --> 00:35:42.440
This is kind of the metadata that
wraps up what is an application

00:35:42.640 --> 00:35:46.400
that you've built and what
the application needs to do.

00:35:46.430 --> 00:35:49.300
So, anytime we add something
to the Central framework,

00:35:49.430 --> 00:35:52.080
you will define it using
the product XML file,

00:35:52.180 --> 00:35:55.870
and that's how you kind of tell
the system what you want to do

00:35:55.870 --> 00:35:57.920
and how you want to build it.

00:35:59.800 --> 00:36:02.880
So, basically,
a tricky thing that came along when we

00:36:03.000 --> 00:36:07.210
tried to kind of build this environment
where we have multiple Flash movies

00:36:07.560 --> 00:36:11.920
all communicating to each other was
people had never done that before.

00:36:11.940 --> 00:36:14.600
Typically,
when you build some Flash content,

00:36:14.730 --> 00:36:18.270
you're building a single Flash movie
running inside of a web browser,

00:36:18.270 --> 00:36:19.720
and that's all you're worried about.

00:36:19.740 --> 00:36:22.460
You might be doing some animation,
you might be building an ad banner,

00:36:22.520 --> 00:36:25.540
you might be building some type of,
you know, simple web service application.

00:36:25.540 --> 00:36:28.610
But you're not really worried
about having two different movies

00:36:28.620 --> 00:36:30.770
communicate and share persistent data.

00:36:30.780 --> 00:36:35.210
In order to solve that problem,
in Flash Player 6, we added something

00:36:35.280 --> 00:36:38.680
called Local Connection,
which allows separate Flash movies

00:36:38.770 --> 00:36:43.140
to then communicate to each other
over kind of a global space.

00:36:43.140 --> 00:36:45.270
So,
you can actually have Flash movies that

00:36:45.270 --> 00:36:49.150
are running on top of the desktop or
they could be running inside the browser,

00:36:49.150 --> 00:36:52.090
and they can then send data
back and forth to each other.

00:36:52.100 --> 00:36:56.560
So, this allows us to then have
multiple elements of a Flash,

00:36:56.630 --> 00:37:00.180
you know,
kind of runtime that are written entirely

00:37:00.570 --> 00:37:05.460
in a scripting language rather than us
having to build everything in kind of a

00:37:05.530 --> 00:37:08.660
very low-level language like C or C++.

00:37:08.740 --> 00:37:11.970
We can actually build it in our
higher-level ActionScript language

00:37:11.970 --> 00:37:14.520
so that things are more
portable and changeable.

00:37:14.650 --> 00:37:18.340
So, we can write our framework once,
and it will run on multiple platforms.

00:37:18.340 --> 00:37:20.310
We don't have to worry about
having to report everything to

00:37:20.310 --> 00:37:21.460
Windows and Mac and a device.

00:37:21.460 --> 00:37:21.460
So, we can actually build it in a very
low-level language like C or C++.

00:37:21.460 --> 00:37:21.460
So, we can actually build it in a very
low-level action script language so that

00:37:21.460 --> 00:37:21.460
things are more portable and changeable.

00:37:21.460 --> 00:37:21.460
So, we can write our framework once,
and it will run on multiple platforms.

00:37:21.460 --> 00:37:21.460
We don't have to worry about
having to report everything to

00:37:21.460 --> 00:37:21.460
Windows and Mac and a device.

00:37:21.460 --> 00:37:25.580
Mac on a device, everything will work
exactly the same way.

00:37:26.100 --> 00:37:28.800
So basically everything that you
write as an application developer,

00:37:28.800 --> 00:37:31.560
it's the same kind of framework
that we have to go through

00:37:31.560 --> 00:37:32.990
at Macromedias to build this.

00:37:33.000 --> 00:37:36.000
So as we add more and more frameworks
and more and more abilities,

00:37:36.000 --> 00:37:38.680
the Central framework becomes more
powerful for us and also becomes

00:37:38.730 --> 00:37:42.270
more powerful for developers
as we start drilling down more

00:37:42.310 --> 00:37:44.620
into the operating system.

00:37:46.980 --> 00:37:51.380
So that drilling down is actually
being done entirely by the controller.

00:37:51.380 --> 00:37:55.430
And the controller is the one that
actually talks to the Flash player,

00:37:55.430 --> 00:37:57.260
and that's what talks
to the operating system.

00:37:57.330 --> 00:38:01.390
So if we want to send a notice and we
want to make the icon in the dock bounce,

00:38:01.600 --> 00:38:03.450
you do that through an ActionScript call.

00:38:03.470 --> 00:38:05.500
If you want to do that,
if you want to add a new application,

00:38:05.500 --> 00:38:06.700
we do that through ActionScript.

00:38:06.720 --> 00:38:09.850
Rather than you having to write that
in kind of a lower level language,

00:38:09.950 --> 00:38:11.400
it's all done in our
higher level language.

00:38:11.400 --> 00:38:12.960
And the controller is what does that.

00:38:13.060 --> 00:38:16.850
And as we expose more and more APIs,
those get exposed through the controller

00:38:16.880 --> 00:38:20.860
and through kind of all the standard
APIs that we document as part of our SDK.

00:38:20.900 --> 00:38:24.690
So it manages what application
shells are running,

00:38:24.700 --> 00:38:28.030
what is currently focused,
all the kind of dirty work of what's

00:38:28.030 --> 00:38:32.700
going on and making an application behave
like an application that often people

00:38:32.700 --> 00:38:34.500
have to deal with and kind of manage.

00:38:34.610 --> 00:38:36.910
We kind of do all that for
you inside the controller.

00:38:37.100 --> 00:38:39.590
So all you have to worry about is
building a really great experience.

00:38:39.640 --> 00:38:42.940
You don't have to worry about making
sure that you have application focus

00:38:42.940 --> 00:38:46.030
and dealing with all these kind of
little dirty things that you have to

00:38:46.060 --> 00:38:47.220
do to make an application work well.

00:38:53.100 --> 00:38:55.920
So the next thing as part
of the framework is agents.

00:38:55.930 --> 00:38:59.420
And agents are basically,
they have no visual representation.

00:38:59.440 --> 00:39:04.620
They're background processes that allow
you to make script-only connections to

00:39:04.720 --> 00:39:10.210
data services on the web and let you have
persistent data for your applications.

00:39:10.300 --> 00:39:14.650
So if I'm going to build a weather
application and I want to hook

00:39:14.750 --> 00:39:18.980
it up to my calendar and say,
you know, we're only gonna go out on

00:39:18.980 --> 00:39:22.920
Saturday if it's sunny and warm,
I can make it so that the

00:39:22.920 --> 00:39:27.380
calendar application knows,
it talks to the weather application and

00:39:27.380 --> 00:39:32.890
says that the weather's over 80 degrees,
book this trip and book this event with

00:39:32.890 --> 00:39:35.020
my friends and send a notice out to them.

00:39:35.120 --> 00:39:38.170
So all that kind of communication
is going through agents.

00:39:38.270 --> 00:39:41.340
So each application has its
own agent and each one then

00:39:41.340 --> 00:39:42.800
can communicate with others.

00:39:42.800 --> 00:39:46.500
So they can open up kind of channels
of communication to each other.

00:39:47.550 --> 00:39:49.870
And that again is managed by
the controller and something

00:39:49.940 --> 00:39:51.600
called the agent manager.

00:39:51.670 --> 00:39:55.740
And when you're in your product XML,
basically if you want to have an agent,

00:39:55.770 --> 00:39:57.440
you just define this
line here and you say,

00:39:57.440 --> 00:40:01.040
I have an agent, it's got this name,
and this is the Swift that

00:40:01.050 --> 00:40:02.600
contains that logic.

00:40:04.770 --> 00:40:06.320
The next major part is the console.

00:40:06.380 --> 00:40:07.840
This is a screenshot.

00:40:07.840 --> 00:40:11.390
This is actually a later version of the
prototype than what we showed up there.

00:40:11.440 --> 00:40:13.440
It's our current thinking of
what it's going to look like.

00:40:14.100 --> 00:40:18.600
Basically, it's your persistent area
where each application lives

00:40:18.600 --> 00:40:20.900
and resides in the desktop.

00:40:20.900 --> 00:40:23.510
The same way as you have any
other persistent application

00:40:23.510 --> 00:40:25.820
running in your desktop,
you can build that kind of

00:40:25.930 --> 00:40:27.370
environment and run it here.

00:40:27.380 --> 00:40:31.100
If you want to give people information
and the latest up-to-date data,

00:40:31.190 --> 00:40:32.610
that's what goes here.

00:40:32.620 --> 00:40:34.580
Same thing with notices.

00:40:34.650 --> 00:40:37.860
They go inside of this kind of persistent
area that runs on your desktop.

00:40:37.860 --> 00:40:41.540
That's kind of fully controllable
over you of where it lives and how

00:40:41.540 --> 00:40:44.570
big it is and what's inside of it.

00:40:46.760 --> 00:40:49.100
and what we call each of those elements.

00:40:49.250 --> 00:40:52.580
The first part is called tiles,
and that's basically the framework

00:40:52.660 --> 00:40:54.730
for consistent desktop presence.

00:40:54.900 --> 00:40:56.740
And for instance,
you can have a weather tile

00:40:56.740 --> 00:41:00.550
that shows your local weather,
and basically, or you could have any

00:41:00.550 --> 00:41:04.130
type of application,
and those tiles are basically configured

00:41:04.690 --> 00:41:05.920
over what you see inside them.

00:41:05.940 --> 00:41:08.460
Could be either configured within
themselves or configured by the

00:41:08.460 --> 00:41:10.170
application that created them.

00:41:10.350 --> 00:41:13.980
So if I have a weather application and
I'm looking at the weather for Chicago,

00:41:14.000 --> 00:41:16.420
and I say I want to monitor that,
I can say, "Here,

00:41:16.420 --> 00:41:21.000
save a tile." It'll automatically,
excuse me, add that tile to the console,

00:41:21.020 --> 00:41:25.410
and it will contain the latest
information that you had for Chicago.

00:41:25.550 --> 00:41:28.100
So you're not having to go back
and forth and reconfigure it.

00:41:28.150 --> 00:41:31.330
That data can be sent along and
persisted across from different

00:41:31.350 --> 00:41:33.800
elements of the central framework.

00:41:39.810 --> 00:41:41.250
The next part is notices.

00:41:41.350 --> 00:41:45.940
This is another screenshot of
some current prototypes of what

00:41:45.940 --> 00:41:47.700
we think notices will look like.

00:41:47.700 --> 00:41:50.700
Basically, you'll have this kind of
information about each application.

00:41:50.700 --> 00:41:54.150
I basically want to say,
"Tell me when the Animatrix DVD comes

00:41:54.150 --> 00:41:57.170
out." It will come up and say,
"The Animatrix DVD is

00:41:57.170 --> 00:41:58.510
out." Click on the notice.

00:41:58.510 --> 00:42:00.690
It will open up that application
and give you all the data.

00:42:00.730 --> 00:42:01.820
Maybe you could buy the DVD.

00:42:01.990 --> 00:42:04.700
You could go check it out and
get all the latest information.

00:42:04.700 --> 00:42:08.700
It's really giving you up-to-date,
the latest information.

00:42:09.700 --> 00:42:13.130
They can be triggered,
and those are all triggered

00:42:13.130 --> 00:42:15.090
by events within an agent.

00:42:17.480 --> 00:42:20.050
And the last part is
the application shell,

00:42:20.050 --> 00:42:23.220
which is kind of your primary
representation of where you build

00:42:23.220 --> 00:42:25.100
an application inside of Central.

00:42:25.200 --> 00:42:28.730
And it's where not only
your application resides,

00:42:28.940 --> 00:42:32.590
but the end user, where they store their
collections of applications.

00:42:32.600 --> 00:42:35.240
So if they've gone all over the
web and they've found a whole

00:42:35.660 --> 00:42:37.950
bunch of applications they like,
that's where they're always

00:42:37.950 --> 00:42:38.690
going to go to get them.

00:42:38.700 --> 00:42:40.100
That's where they launch
their applications.

00:42:40.100 --> 00:42:42.060
That's where they find new applications.

00:42:42.130 --> 00:42:46.670
And we provide APIs within that
for changing the window size,

00:42:46.670 --> 00:42:49.800
the position of it,
getting events from the user

00:42:49.800 --> 00:42:53.100
when they resize the window
so you can deal with layout,

00:42:53.100 --> 00:42:57.060
getting information about when they're
typing certain keyboard events so you

00:42:57.060 --> 00:42:59.000
know the index of your tab ordering.

00:42:59.000 --> 00:43:01.760
You have information over
the status bar preferences,

00:43:01.950 --> 00:43:04.990
knowing when the window opens and closes.

00:43:05.010 --> 00:43:10.170
You also have notification as to when
the network connection is lost or open.

00:43:10.280 --> 00:43:12.970
So if you want to build an application,
you have an application that

00:43:12.970 --> 00:43:15.710
runs both online and offline,
but you want to make sure that it gives

00:43:15.780 --> 00:43:17.500
the user some notification of that.

00:43:17.560 --> 00:43:20.800
Or you start, instead of going and
querying a web service,

00:43:20.800 --> 00:43:22.000
you're querying local data.

00:43:22.000 --> 00:43:25.160
You can first check and see if,
am I actually connected to

00:43:25.160 --> 00:43:26.500
the web with a single call?

00:43:26.500 --> 00:43:28.500
Without having to kind
of do that yourself,

00:43:28.500 --> 00:43:31.500
as you would have to do
inside of a web browser.

00:43:32.130 --> 00:43:34.560
and you can also deal
with setting notices,

00:43:34.610 --> 00:43:38.290
agents, and creating and removing tiles.

00:43:41.270 --> 00:43:43.170
So after you've gone through
and done all this stuff and

00:43:43.170 --> 00:43:45.560
you've built a full application,
the next thing you want to do is

00:43:45.560 --> 00:43:48.050
you want to package that up so that
you can distribute it on the web.

00:43:48.110 --> 00:43:52.800
And the way you do that is you build
kind of what's called an installer SWIFT,

00:43:52.800 --> 00:43:55.980
and we give kind of a basic
framework for how to do this.

00:43:56.000 --> 00:43:59.300
This SWIFT resides inside of your
website or any website where you

00:43:59.300 --> 00:44:01.440
want to distribute your application.

00:44:03.430 --> 00:44:05.440
Basically,
it points at a product XML file which

00:44:05.440 --> 00:44:08.680
describes what your application is,
where it comes from,

00:44:08.800 --> 00:44:11.460
the dimensions of it,
all the kind of metadata about it.

00:44:11.470 --> 00:44:14.660
And when you click on the install button,
it reads that XML file.

00:44:14.660 --> 00:44:18.100
It then kind of sends a
message to the player saying,

00:44:18.100 --> 00:44:20.380
"Do they have the central
runtime?" If they don't,

00:44:20.380 --> 00:44:23.540
it goes and downloads it,
puts it on their machine, launches it,

00:44:23.640 --> 00:44:25.980
runs it,
and all of a sudden comes up your

00:44:26.080 --> 00:44:29.810
application focused forward and,
you know, if you want,

00:44:30.360 --> 00:44:32.340
immediately will be
there for them to use.

00:44:32.460 --> 00:44:35.220
And that's the entire
installation process.

00:44:35.300 --> 00:44:38.560
It's very straightforward and easy to do,
and you can build whatever user

00:44:38.660 --> 00:44:42.420
interface you want for the installation
process because all it is is a

00:44:42.520 --> 00:44:46.600
Flash movie that's triggering some
native events with inside Flash.

00:44:47.010 --> 00:44:49.980
And you can also, basically,
if you don't want to do it yourself and

00:44:50.000 --> 00:44:53.020
you want to get a larger distribution,
you can say, "This is my application.

00:44:53.020 --> 00:44:55.740
Put it up inside the Macromedia
app finder." And everybody

00:44:55.740 --> 00:44:58.660
who comes to Macromedia.com,
the millions of people every day,

00:44:58.680 --> 00:45:01.740
can go and check out your application
and you don't have to worry about

00:45:01.830 --> 00:45:03.470
being the one that's distributing it.

00:45:03.490 --> 00:45:06.410
It's going to be entirely
distributed by Macromedia.

00:45:10.030 --> 00:45:13.090
The next major part is the
user interface components.

00:45:13.250 --> 00:45:16.310
So this is something that's kind of
been involving pretty rapidly in the

00:45:16.460 --> 00:45:21.570
last year or so with Macromedia and
with Flash is people are trying to

00:45:21.570 --> 00:45:23.020
not just build animation anymore.

00:45:23.040 --> 00:45:25.110
They're not just building
simple multimedia.

00:45:25.290 --> 00:45:28.430
They're trying to actually build real
applications that have the kind of

00:45:28.430 --> 00:45:32.630
look and feel of an operating system
and behave the way people expect.

00:45:32.720 --> 00:45:36.060
So part of that was our first initiative
to build components and user interface

00:45:36.060 --> 00:45:38.120
frameworks to make that possible.

00:45:38.130 --> 00:45:40.800
And so part of that,
we give you a bunch of standard

00:45:40.800 --> 00:45:42.680
user interface frameworks
that you kind of expect,

00:45:42.680 --> 00:45:45.130
so you don't have to go
and build them yourself.

00:45:45.430 --> 00:45:49.290
And what we call these frameworks,
the name for them is Halo.

00:45:49.320 --> 00:45:52.270
And Halo kind of gives you a
consistent look and feel across

00:45:52.270 --> 00:45:54.480
not only Macromedia tools,
but all the content

00:45:54.490 --> 00:45:55.480
that's built using them.

00:45:55.500 --> 00:45:58.560
And so you don't have to go
and kind of do that work.

00:45:58.630 --> 00:46:02.130
And all these things are
hosted by Macromedia.com in

00:46:02.160 --> 00:46:03.980
a runtime shared library.

00:46:04.020 --> 00:46:07.020
Runtime shared libraries are,
rather than having all the

00:46:07.020 --> 00:46:10.250
assets inside of your Swift file,
are coming from a remote

00:46:10.250 --> 00:46:12.340
location and then instantiated.

00:46:12.340 --> 00:46:16.340
So rather than you having to
go and do that every time,

00:46:16.380 --> 00:46:19.150
it automatically gets it from Macromedia.

00:46:19.240 --> 00:46:23.470
And rather than having to
download those every single time,

00:46:23.500 --> 00:46:24.510
you automatically get them.

00:46:24.610 --> 00:46:26.760
And when we update them
and we change them,

00:46:26.800 --> 00:46:28.400
you automatically get it.

00:46:28.480 --> 00:46:31.380
And it keeps the size of your
applications much smaller.

00:46:31.450 --> 00:46:34.210
So you're not having to include
the data for what a checkbox is

00:46:34.220 --> 00:46:37.580
or a radio button every single
time you build an application.

00:46:40.820 --> 00:46:46.030
So the way you consume and store data
inside Central is primarily via XML,

00:46:46.030 --> 00:46:49.700
and that's something that has been in
the Flash Player for several revisions,

00:46:49.700 --> 00:46:53.380
but has been focused and improved
upon over the last two releases.

00:46:53.520 --> 00:46:55.880
And in Flash Player 6 and
in the Central Player,

00:46:55.920 --> 00:46:59.120
we've added significant performance
enhancements to make XML data

00:46:59.180 --> 00:47:04.740
retrieval and manipulation much faster,
and much more the best way to do

00:47:04.740 --> 00:47:07.530
things rather than dealing with
kind of native objects inside Flash,

00:47:07.580 --> 00:47:09.320
which can be cumbersome.

00:47:09.470 --> 00:47:12.180
And we also have given you native
web service support so that you can

00:47:12.250 --> 00:47:16.540
take structured XML data that you're
getting from a server and then do

00:47:16.540 --> 00:47:18.780
something with it that's intelligent.

00:47:18.850 --> 00:47:22.810
And then you can take that data,
store it inside of a local shared object,

00:47:23.280 --> 00:47:26.900
And then the final thing that I referred
to before was that you can now cache

00:47:26.900 --> 00:47:28.880
that data locally on your machine.

00:47:28.960 --> 00:47:29.700
So it can be anything.

00:47:29.700 --> 00:47:32.790
It can be an image, a JPEG, a video,
and you can store it locally.

00:47:32.800 --> 00:47:34.550
So if someone wants to
download a movie and watch it,

00:47:34.620 --> 00:47:36.480
you don't have to download
it every single time.

00:47:36.480 --> 00:47:38.900
You can say cache that thing
once it's finished downloading.

00:47:38.960 --> 00:47:41.760
Next time they come on,
if they're online or offline,

00:47:41.770 --> 00:47:43.740
it's going to give them that data.

00:47:45.810 --> 00:47:49.420
So now I want to kind of show you,
I think, I believe, yeah,

00:47:49.490 --> 00:47:52.060
I'm going to show how you
actually built something for this.

00:47:52.060 --> 00:47:55.630
So I'm going to kind of step through what
the basics are and then show you some

00:47:55.630 --> 00:47:59.010
code examples inside the authoring tool.

00:47:59.580 --> 00:48:02.740
So the basics of building
something inside Central,

00:48:02.740 --> 00:48:07.200
and some of you may be familiar with
how you build applications inside Flash,

00:48:07.200 --> 00:48:11.200
is you basically want to build
inside the first frame of your movie,

00:48:11.200 --> 00:48:13.090
you're going to be putting
some action scripts.

00:48:13.100 --> 00:48:16.120
And the first thing you do is you
kind of tell Central where I am,

00:48:16.200 --> 00:48:18.340
who I am,
that I am a Central application,

00:48:18.340 --> 00:48:22.490
and that I expect to be getting messages
from the overall Central framework rather

00:48:22.590 --> 00:48:24.630
than just me being a web application.

00:48:24.640 --> 00:48:30.340
So you kind of have to tell it via
this kind of initialization operation.

00:48:30.340 --> 00:48:33.030
You say, you know, I'm inside Central.

00:48:33.380 --> 00:48:35.380
Please start giving me messages.

00:48:35.450 --> 00:48:40.960
And once you are finished getting
those messages and you are fully loaded

00:48:40.960 --> 00:48:43.990
inside of the Central environment,
Central is going to call you with

00:48:43.990 --> 00:48:45.780
a function called onActivate.

00:48:45.820 --> 00:48:50.070
And that's basically going to tell you
I'm fully loaded inside of Central.

00:48:50.210 --> 00:48:51.860
You can now do whatever you want.

00:48:51.890 --> 00:48:53.380
Have fun.

00:48:56.000 --> 00:48:58.040
So for installation,
what you have to do is you have

00:48:58.040 --> 00:49:01.560
to create a product XML file,
or you can modify one

00:49:01.560 --> 00:49:02.900
from the development kit.

00:49:02.900 --> 00:49:05.890
You place your app Swift,
your product XML, your icons,

00:49:05.890 --> 00:49:09.550
and your installer on your server,
and you make sure they're all in the

00:49:09.550 --> 00:49:11.900
same directory or using relative paths.

00:49:11.900 --> 00:49:14.200
And then you basically
click on that button,

00:49:14.200 --> 00:49:17.900
install it, and it gets put into the site
of the Central environment,

00:49:17.900 --> 00:49:20.470
and I'll show you how that works shortly.

00:49:22.930 --> 00:49:24.780
And another thing is,
like I've discussed before,

00:49:24.780 --> 00:49:28.500
local connection is really something
that you want to be able to learn

00:49:28.500 --> 00:49:31.730
how to use and become more familiar
with if you're not already.

00:49:31.810 --> 00:49:34.610
And basically,
it's a simple API that allows you to

00:49:34.610 --> 00:49:38.800
open up a connection to another file,
to another Swift file.

00:49:38.800 --> 00:49:42.020
And this is kind of a simple
example of someone having an

00:49:42.100 --> 00:49:43.750
agent that's a stock agent.

00:49:43.820 --> 00:49:46.300
You want to make a connection to it,
and you want to call a function

00:49:46.300 --> 00:49:47.800
that's called getTicker.

00:49:47.860 --> 00:49:53.710
So that's what basically is here,
and you're passing a basic argument.

00:49:53.820 --> 00:49:57.100
This allows you to communicate between
your application and the agent,

00:49:57.180 --> 00:50:00.340
between your application and a tile,
or between the tile and the agent.

00:50:00.470 --> 00:50:02.690
All of that communication
goes over local connection.

00:50:02.700 --> 00:50:04.690
You can also use this to debug.

00:50:04.700 --> 00:50:08.110
So if you want to actually have
information being sent to another window,

00:50:08.110 --> 00:50:10.370
basically saying the kind
of state of your application

00:50:10.680 --> 00:50:13.980
that is not something visual,
you can use it for debugging as well.

00:50:15.780 --> 00:50:18.340
So, in order to add a tile,
here's some information about how

00:50:18.340 --> 00:50:20.330
you would add a tile inside of Flash.

00:50:20.430 --> 00:50:23.500
Basically, you create a new Swift that
represents your tile.

00:50:23.700 --> 00:50:27.700
You set up the phone call the same way as
you did inside of the first application.

00:50:27.700 --> 00:50:30.700
You say, like, basically,
initialize this tile.

00:50:30.700 --> 00:50:34.700
Central goes and initializes it,
calls back, saying, "Okay, you're done.

00:50:34.700 --> 00:50:35.510
You're loaded.

00:50:35.700 --> 00:50:38.410
Now do whatever you want to do
on activate." Very similar to

00:50:38.460 --> 00:50:39.980
how you build an application.

00:50:39.990 --> 00:50:44.560
And you install, basically,
you add a line about the fact that this

00:50:44.560 --> 00:50:47.180
tile exists inside your product XML.

00:50:48.550 --> 00:50:51.170
and you can have as many tiles
as you want for application.

00:50:51.290 --> 00:50:53.260
So tiles,
so here's some examples of things

00:50:53.270 --> 00:50:54.870
you might want to use tiles for.

00:50:55.000 --> 00:50:57.240
You want to use them for
live monitoring of push data,

00:50:57.240 --> 00:51:00.520
such as current stock prices,
current scores, any type of persistent,

00:51:00.520 --> 00:51:01.820
constantly updating data.

00:51:01.820 --> 00:51:07.520
And you can use it to get a subset
of an application's functionality.

00:51:07.560 --> 00:51:10.340
Rather than having to go
into the full application,

00:51:10.400 --> 00:51:11.970
if you want to get just a
little bit of information about

00:51:11.970 --> 00:51:14.640
like my latest calendar data,
that's where I can show it to you,

00:51:14.640 --> 00:51:17.040
rather than having to
launch the full app.

00:51:19.100 --> 00:52:02.600
[Transcript missing]

00:52:02.900 --> 00:52:05.300
Use agents for persistent
monitoring of data.

00:52:05.340 --> 00:52:08.980
And this is the actual data
set that you're getting from,

00:52:08.980 --> 00:52:11.190
that you're going to be giving
to your tiles and applications.

00:52:11.230 --> 00:52:16.410
The actual tiles are more like the view,
and this is kind of the model

00:52:16.420 --> 00:52:18.750
that's going back and forth,
and the controller that's kind

00:52:18.880 --> 00:52:21.720
of giving you all that data,
and it's pushing it into a tile,

00:52:21.720 --> 00:52:24.130
or it's pushing it into an application.

00:52:24.340 --> 00:52:27.100
And you can also use agents for
communication with other apps.

00:52:27.140 --> 00:52:30.700
Not only apps inside Central,
but apps inside of a web browser as well.

00:52:32.090 --> 00:52:34.560
You don't want to use them
for processor intensive tasks

00:52:34.650 --> 00:52:37.370
because these type of things,
like things like iterative functions

00:52:37.410 --> 00:52:41.230
that are going over and over,
because the user can't see these things.

00:52:41.400 --> 00:52:42.320
They're going to be running.

00:52:42.490 --> 00:52:45.230
You could be creating an
invisible process that is

00:52:45.290 --> 00:52:48.830
slowing the entire machine down,
and the user has no way to stop

00:52:48.830 --> 00:52:52.110
it without quitting Central,
and you're basically going to

00:52:52.110 --> 00:52:53.950
muck up the entire environment.

00:52:55.930 --> 00:53:00.700
So here's a little bit of code about
how you actually would create a notice.

00:53:00.760 --> 00:53:03.740
And basically,
you create a new notice object.

00:53:03.740 --> 00:53:10.760
And this is basically a callback from
the agent manager that basically says,

00:53:10.760 --> 00:53:14.760
you know, this is basically going to say,
I'm going to add a notice

00:53:14.870 --> 00:53:17.860
that says this data saying,
this is really simple, it's just saying,

00:53:17.870 --> 00:53:20.880
a notice came up and
it has no data in it.

00:53:20.910 --> 00:53:21.940
So this is a really simple thing.

00:53:21.940 --> 00:53:23.180
It's not actually giving you anything.

00:53:23.180 --> 00:53:26.590
It's just a kind of core framework
for how you actually create a notice.

00:53:29.760 --> 00:53:32.940
And you want to use
them to notify a user.

00:53:33.030 --> 00:53:34.890
And you don't want to use
them to display errors,

00:53:34.980 --> 00:53:39.610
you don't want to use them to display
connection notifications like 404s,

00:53:39.620 --> 00:53:40.700
and you want to be polite with them.

00:53:40.700 --> 00:53:43.520
You don't want to be constantly
coming up with notices.

00:53:44.400 --> 00:53:47.540
You can also create custom preferences
with inside of your application.

00:53:47.550 --> 00:53:49.770
So if you want to be setting
certain particular information

00:53:50.120 --> 00:53:53.230
about your application and make it
so people can configure notices,

00:53:53.310 --> 00:53:56.810
configure tiles,
configure what all the kind of persistent

00:53:56.870 --> 00:54:00.180
things that they have no control over,
you want to give them a way to visually

00:54:00.560 --> 00:54:05.030
do that and as a full kind of framework
for how you do that with Inside Central.

00:54:05.320 --> 00:54:07.620
And you don't want to use
preferences to create preferences

00:54:07.630 --> 00:54:11.400
that are already done by Central,
because Central already has kind

00:54:11.400 --> 00:54:14.260
of a core preferences where you
can set up global things like your

00:54:14.260 --> 00:54:16.200
location and your information.

00:54:16.200 --> 00:54:19.110
And that information is then
persistent and available to you.

00:54:19.190 --> 00:54:21.200
So once the user defines
their name and information,

00:54:21.200 --> 00:54:24.870
you can query that and get their email
address and all that kind of stuff if

00:54:24.870 --> 00:54:26.950
they've made that available to you.

00:54:28.500 --> 00:54:31.840
So offline data management,
I've said this a little bit before,

00:54:31.880 --> 00:54:37.800
it's done with shared objects,
and each application has a limit of 100K.

00:54:39.400 --> 00:54:48.500
[Transcript missing]

00:54:48.700 --> 00:54:50.600
and basically that data kind
of sits persistently on the

00:54:50.600 --> 00:54:52.720
hard drive and never goes away.

00:54:52.720 --> 00:54:56.240
And it's basically best for the kind of
internal data that you're storing that

00:54:56.240 --> 00:54:59.810
you want to make sure that always comes
up every time that application is loaded.

00:54:59.860 --> 00:55:02.480
And it's stored in a textual way.

00:55:03.060 --> 00:55:05.960
Local Internet URLs is basically
anything that you can pull off

00:55:05.960 --> 00:55:07.180
the Internet you can store.

00:55:07.180 --> 00:55:10.460
You can even pull things down that
aren't even readable by Flash.

00:55:10.460 --> 00:55:15.340
So it's a very open way for you to
cache data and cache information.

00:55:15.400 --> 00:55:17.420
And there's a limit of
how much you can store.

00:55:17.480 --> 00:55:19.350
By default, it's 20 megabytes.

00:55:19.450 --> 00:55:21.580
Same story with if you
go over that limit,

00:55:21.580 --> 00:55:24.860
it's going to warn you, say, you know,
this application is trying to

00:55:24.860 --> 00:55:27.970
request more data than you need
than you currently have set,

00:55:27.970 --> 00:55:30.260
and do you want to allow that?

00:55:33.960 --> 00:55:36.620
And this is a short example,
a short explanation

00:55:36.790 --> 00:55:38.180
of how that API works.

00:55:38.340 --> 00:55:40.100
It downloads, it begins,
once you call it,

00:55:40.110 --> 00:55:42.090
it immediately starts making that call.

00:55:42.150 --> 00:55:43.940
You can access it through
normal ActionScript methods,

00:55:43.950 --> 00:55:47.650
saying, is this loaded, when it's done,
do something with it.

00:55:47.720 --> 00:55:50.000
So it's the same way that you
deal with any type of loaded data,

00:55:50.000 --> 00:55:52.830
same way you deal with loading XML,
same way you deal with

00:55:52.830 --> 00:55:54.560
loading an image inside Flash.

00:55:54.620 --> 00:55:58.320
It's the same way you deal
with that inside of Central.

00:55:58.480 --> 00:56:02.250
So if you know how to do it in Flash,
same exact skills.

00:56:03.120 --> 00:56:05.430
and just kind of telling you
basically in the first beta,

00:56:05.450 --> 00:56:07.760
each request is a new HTTP stream.

00:56:07.760 --> 00:56:10.520
And basically in beta two,
we start queuing that up

00:56:10.580 --> 00:56:12.210
like the browser does.

00:56:14.660 --> 00:56:19.640
It's important also to show that your
application is requesting data because

00:56:19.640 --> 00:56:24.580
it's not something that we automatically
come up with a progress dialogue and say,

00:56:24.660 --> 00:56:26.300
you know,
you're downloading a bunch of data.

00:56:26.330 --> 00:56:28.570
So your application may seem
like nothing's going on.

00:56:28.600 --> 00:56:31.270
You need to make sure that you
actually are showing progress of your

00:56:31.270 --> 00:56:33.220
application and giving the user feedback.

00:56:33.220 --> 00:56:36.540
And we're actually,
we do provide APIs for you to set some

00:56:36.540 --> 00:56:41.200
information in the status bar that of
the current status of your application,

00:56:41.200 --> 00:56:43.320
how much is loading, what's going on.

00:56:43.340 --> 00:56:46.410
And we really encourage people to
use that to give the user kind of

00:56:46.410 --> 00:56:49.230
a consistent method of feedback
rather than you having to do

00:56:49.240 --> 00:56:51.140
that every single time yourself.

00:56:53.250 --> 00:56:56.110
Offline behavior.

00:56:56.210 --> 00:56:58.080
Talked about this a little bit already.

00:56:58.200 --> 00:57:01.990
You basically will get a callback
and you're going to check to

00:57:02.030 --> 00:57:05.190
see whether or not the network
has gone online or offline.

00:57:05.200 --> 00:57:09.210
And you can use that to properly
set up your application to make sure

00:57:09.210 --> 00:57:13.750
that when that callback gets notified
that you either switch to using local

00:57:13.750 --> 00:57:18.200
data or you make sure that you're not
making requests to the server side.

00:57:18.200 --> 00:57:20.200
It's fairly straightforward.

00:57:20.200 --> 00:57:23.680
And sharing data between apps,
you're going to be using

00:57:23.680 --> 00:57:25.900
agents over local connections.

00:57:27.700 --> 00:57:30.670
And updating your application
is very straightforward.

00:57:30.680 --> 00:57:34.060
All you have to do on your server,
where you have your product XML,

00:57:34.130 --> 00:57:38.470
increment your version number from
one to two or any number above.

00:57:38.880 --> 00:57:42.070
Every week, the central environment on
the person's machine will go

00:57:42.260 --> 00:57:43.580
and check that product XML.

00:57:43.620 --> 00:57:45.540
If the number is greater,
it's going to go and

00:57:45.540 --> 00:57:46.940
download your new version.

00:57:47.010 --> 00:57:49.820
So all of that kind of update
functionality that's fairly

00:57:49.820 --> 00:57:53.580
difficult to deal with is all
handled by the environment itself.

00:57:54.760 --> 00:57:57.710
So now I'm going to switch over to
the computer and show you how to

00:57:57.790 --> 00:57:59.940
build a really simple application.

00:58:10.270 --> 00:58:15.200
First thing I'm going to do is I'm going
to open up the Flash authoring tool.

00:58:15.300 --> 00:58:24.470
And I'm going to open up
a simple application here.

00:58:26.100 --> 00:58:28.740
So this application here is a very,
very simple application.

00:58:28.800 --> 00:58:33.000
All it does is has two text
fields and two buttons.

00:58:33.000 --> 00:58:37.390
And the way that you
do that inside Flash,

00:58:37.410 --> 00:58:44.680
if you want to add
text fields or buttons,

00:58:44.680 --> 00:58:44.680
is basically you have...

00:58:46.000 --> 00:58:46.980
One second here.

00:58:47.030 --> 00:58:55.020
You have a text control here,
and you can basically drag out and

00:58:55.020 --> 00:58:55.020
create new text fields as you please.

00:58:56.680 --> 00:58:59.080
and then you can define them,
give them instance names,

00:58:59.100 --> 00:58:59.840
everything you want to do.

00:58:59.840 --> 00:59:01.280
So I already have two created here.

00:59:01.280 --> 00:59:03.540
One is input text and one is stock info.

00:59:03.540 --> 00:59:06.480
That's right here is
defined their instance name.

00:59:06.550 --> 00:59:09.070
So that's how I'm going to
access it via ActionScript to

00:59:09.070 --> 00:59:11.870
know how to give it information,
how to change it.

00:59:12.000 --> 00:59:14.570
And I also have two push
button components here.

00:59:14.760 --> 00:59:18.680
One is going to actually make the
request to get the stock information.

00:59:18.720 --> 00:59:23.670
And this one is going to like just test
that I've properly created the notice.

00:59:23.980 --> 00:59:27.040
and you can see that I've also
given both of them instance names.

00:59:27.270 --> 00:59:28.900
The way you add new
components is you over here,

00:59:28.900 --> 00:59:32.600
you have the Flash UI components
panel and you can simply click and

00:59:32.630 --> 00:59:34.380
drag new user interface elements.

00:59:34.460 --> 00:59:37.640
And we give you a bunch of pre-made
ones for Central that give you that

00:59:37.640 --> 00:59:40.710
look and feel and have all the kind
of proper functionality for you to

00:59:40.720 --> 00:59:41.940
deal with remote shared libraries.

00:59:41.940 --> 00:59:44.500
So you don't have to deal
with any of that work.

00:59:45.310 --> 00:59:49.190
So if I go over here into the
first frame of my movie and

00:59:49.190 --> 00:59:51.530
I open it up and say Actions,

00:59:52.570 --> 00:59:55.680
I can see all of the script
that makes up this movie.

00:59:55.680 --> 00:59:59.500
And explain it to your hands.

00:59:59.500 --> 01:00:03.820
Can everybody see that all right there?

01:00:13.870 --> 01:00:15.330
So basically the first function
that you're going to have

01:00:15.370 --> 01:00:17.080
here is called onActivate.

01:00:17.080 --> 01:00:22.070
And this is what gets called when
your application has been fully

01:00:22.070 --> 01:00:23.920
loaded into the Central environment.

01:00:23.960 --> 01:00:29.500
Basically you get a callback that
basically gives you a shell object,

01:00:29.500 --> 01:00:33.030
and that shell object contains all
of the APIs that make up Central.

01:00:33.060 --> 01:00:36.550
So when you're inside this environment,
you always refer to where

01:00:36.550 --> 01:00:38.280
you live as the shell.

01:00:38.310 --> 01:00:41.460
And in this particular example,
the first thing I'm going to do

01:00:41.460 --> 01:00:43.000
is I'm going to add an agent.

01:00:43.010 --> 01:00:45.020
And that agent is the stock checker.

01:00:45.050 --> 01:00:50.020
So inside of the product XML,
I defined a stock checker agent,

01:00:50.030 --> 01:00:54.730
and I can refer to it now
within the scripting environment

01:00:55.090 --> 01:00:57.920
and say add that agent,
and that agent is another Swift file,

01:00:57.920 --> 01:00:59.810
which I'll show it to you in a second.

01:01:00.600 --> 01:01:09.100
[Transcript missing]

01:01:09.930 --> 01:01:12.910
The first thing you'll
notice is the ticker symbol,

01:01:12.980 --> 01:01:17.600
which is basically going and checking
to see if there's a new ticker symbol.

01:01:17.970 --> 01:01:21.360
And I'm telling that
button when it's released,

01:01:21.410 --> 01:01:24.100
it's going to make a
new local connection.

01:01:24.200 --> 01:01:40.200
[Transcript missing]

01:01:40.510 --> 01:01:43.620
So that information I'll show in a
second here after I go through this.

01:01:43.670 --> 01:01:48.490
And this is basically all of the
information for displaying that data.

01:01:48.500 --> 01:01:52.780
So once I get that data back,
I'm going to then take that text

01:01:52.790 --> 01:01:56.680
field and fill it with data that
I got back from the local connection,

01:01:56.740 --> 01:01:57.560
which is what this is here.

01:01:57.560 --> 01:02:00.180
Stock info dot text,
the text value of that

01:02:00.180 --> 01:02:03.200
stock info text field,
I'm going to give it the value

01:02:03.200 --> 01:02:07.080
of the price of the stock that
I got back from a web service.

01:02:07.900 --> 01:02:10.780
And right here,
this Do Test Notice button is

01:02:10.790 --> 01:02:13.780
when I click on the test notice,
it's going to actually go through

01:02:13.780 --> 01:02:17.860
the process of adding a new notice
and giving a really simple notice

01:02:17.860 --> 01:02:20.360
that just says New Test Notice.

01:02:20.440 --> 01:02:24.500
And this is kind of all the
different properties of that notice.

01:02:24.850 --> 01:02:27.810
Whether or not it's going to
show an alert in the tray,

01:02:27.810 --> 01:02:34.930
and this is basically setting the
progress bar at the bottom of the shell.

01:02:36.110 --> 01:02:39.150
And this is the same thing.

01:02:39.160 --> 01:02:42.390
If I get a notice event,
I'm going to set the progress

01:02:42.680 --> 01:02:45.270
bar to be back to the way it was.

01:02:46.200 --> 01:02:50.580
And also, there's a little example
here of the actual logo that

01:02:50.580 --> 01:02:51.590
I'm using inside of here.

01:02:51.600 --> 01:02:53.830
It is a little central logo.

01:02:54.090 --> 01:02:57.100
I'm saying take that thing,
the first time it loads up,

01:02:57.270 --> 01:03:01.080
add it to my local Internet cache so
I can give it any type of path to a file

01:03:01.080 --> 01:03:02.860
and it'll store it locally on my machine.

01:03:02.860 --> 01:03:05.680
And then in the future,
all I gotta do is refer

01:03:06.020 --> 01:03:07.200
to that same path.

01:03:07.200 --> 01:03:10.580
And if it's locally cached already,
rather than fetching it from the web,

01:03:10.620 --> 01:03:11.800
it's gonna fetch it from my cache first.

01:03:11.900 --> 01:03:14.840
So it's always, whenever you do a load
movie call in Flash,

01:03:14.840 --> 01:03:17.830
rather than in the way it was in Flash,
where it would always go

01:03:17.830 --> 01:03:20.000
out and fetch the data,
the first thing it does is it

01:03:20.070 --> 01:03:22.860
checks the local Internet cache
and then it goes out to the web.

01:03:22.860 --> 01:03:25.390
And then the final call
here is basically saying,

01:03:25.400 --> 01:03:28.090
this is the first thing that's
gonna be called when the

01:03:28.090 --> 01:03:29.860
application is first loaded.

01:03:29.860 --> 01:03:33.050
It's gonna say, "Hello,
I'm an application." and

01:03:33.500 --> 01:03:35.190
Call me back in a second when I'm loaded.

01:03:35.200 --> 01:03:37.840
So that's an empty application.

01:03:37.860 --> 01:03:39.980
So when you actually build
an application in Flash,

01:03:40.050 --> 01:03:41.580
so now I have to actually
publish this movie.

01:03:41.600 --> 01:03:46.870
So I'm going to say, export movie,
which is gonna take this

01:03:47.000 --> 01:03:49.200
Swift file and export it.

01:03:49.760 --> 01:03:52.310
and I'm going to export it.

01:03:52.400 --> 01:03:53.400
So now it created that movie.

01:03:53.400 --> 01:03:55.700
It's not going to run
inside the environment.

01:03:55.820 --> 01:04:01.220
So what I want to do now is take
that actual application and then

01:04:01.350 --> 01:04:03.750
I want to install it in the Central.

01:04:03.810 --> 01:04:08.480
So the way I do that is I have
this saver swift that I've created.

01:04:08.520 --> 01:04:14.080
And basically inside of that saver swift,
I define the path to the product

01:04:14.080 --> 01:04:15.580
XML that defines this application.

01:04:15.640 --> 01:04:19.400
So if I open up this,
it shows the product XML for this

01:04:19.580 --> 01:04:22.000
very simple empty application.

01:04:22.040 --> 01:04:25.260
It just says what the version of it is,
what's the information about it,

01:04:25.330 --> 01:04:30.790
who made it, what's the name of it,
where is its icons, and also where is the

01:04:30.790 --> 01:04:32.460
source of this application.

01:04:32.480 --> 01:04:37.020
The primary application
is called empty_app.swift,

01:04:37.050 --> 01:04:39.090
which is what I just created.

01:04:39.130 --> 01:04:43.130
And I also have defined that
I have an agent and a tile.

01:04:43.890 --> 01:04:47.940
and so basically what I have
now is I open up this saver.html

01:04:47.940 --> 01:04:49.680
and I'm going to go ahead

01:04:50.650 --> 01:04:52.650
and click Save.

01:04:52.710 --> 01:04:56.230
It goes and launches Central.

01:05:02.920 --> 01:05:05.680
And it will go and ask me,
do I want to install that application?

01:05:05.680 --> 01:05:10.880
And it uses all the data from the
product XML saying this is the version

01:05:10.880 --> 01:05:13.080
of it and what domain it came from.

01:05:13.080 --> 01:05:16.200
I can say, okay, it now installs it,
and then immediately takes

01:05:16.200 --> 01:05:17.580
me to that application.

01:05:17.580 --> 01:05:19.000
So here's the application that I have.

01:05:19.560 --> 01:05:23.020
So when that application first started,
it actually also initiated an agent.

01:05:23.020 --> 01:05:25.200
So I can right now,
I should be able to say,

01:05:25.200 --> 01:05:28.040
give me the current stock
price of Macromedias.

01:05:28.040 --> 01:05:32.090
It's going to go out, talk to that agent,
get some data from web service,

01:05:32.090 --> 01:05:34.540
and return it back to
this text field here,

01:05:34.540 --> 01:05:36.860
assuming that I did it correctly.

01:05:38.770 --> 01:05:41.700
So the first thing it's gonna do is,
this application doesn't have the rights

01:05:41.930 --> 01:05:43.970
to do that under our security model.

01:05:44.110 --> 01:05:47.460
So it's gonna come up and say,
"Do I want to allow my local machine

01:05:47.460 --> 01:05:51.750
to access this URL?" So I'm gonna say,
"Yes, allow it to do that."

01:05:53.490 --> 01:05:55.290
- Where I can tell it
to always allow that.

01:05:55.290 --> 01:05:58.690
And then if it's allowed,
it's gonna make the request, come back,

01:05:58.830 --> 01:06:01.330
and then feed that data
into this text field.

01:06:12.340 --> 01:06:13.210
There it goes.

01:06:13.320 --> 01:06:15.830
So there's the current
Macromedias stock price.

01:06:16.070 --> 01:06:17.890
So that's basically a very
simple application that I built.

01:06:18.000 --> 01:06:23.290
So let me show you really quickly
how the actual agent was built.

01:06:23.480 --> 01:06:31.370
So if I open up this app agent flaw,
this is the one that's being called by

01:06:31.370 --> 01:06:31.370
the local connection in the other movie.

01:06:35.220 --> 01:06:37.060
Basically, it says, you know,
it's the same thing as

01:06:37.060 --> 01:06:38.940
I was showing before,
the way you build it, you just say,

01:06:39.020 --> 01:06:41.880
onActivate, when this thing gets loaded,
it gets a callback

01:06:42.390 --> 01:06:46.040
with the agent manager,
it's going to start an interval,

01:06:46.080 --> 01:06:47.830
which is said interval,
it's going to say,

01:06:47.940 --> 01:06:51.990
recursively go through and say,
load some data for me from the server.

01:06:52.390 --> 01:06:56.960
and make a local connection to
the application that created it.

01:06:56.990 --> 01:06:58.180
It's going to make a web service call.

01:06:58.180 --> 01:07:00.560
So this is the APIs that
have been added to Flash.

01:07:00.630 --> 01:07:02.560
Rather than in the past,
you had to kind of do it yourself,

01:07:02.650 --> 01:07:04.940
you can now directly call a web service.

01:07:04.940 --> 01:07:07.940
You just say new web service,
give it a WSDL file,

01:07:08.000 --> 01:07:11.730
and that will come back to you
with an object that has all the

01:07:11.870 --> 01:07:13.060
callbacks of that WSDL file.

01:07:13.060 --> 01:07:15.800
So you just say stock
service dot do company info,

01:07:15.800 --> 01:07:18.450
which is the callback
of that web service.

01:07:18.520 --> 01:07:20.550
You give it,
and this one in particular has

01:07:20.600 --> 01:07:23.950
a user ID and password of user,
any user, any password.

01:07:24.040 --> 01:07:26.860
Give it the ticker symbol that
I entered in that text field.

01:07:26.970 --> 01:07:27.700
Call it.

01:07:27.700 --> 01:07:29.760
When I get a result back,
the same way as you deal with

01:07:29.760 --> 01:07:32.680
any result from an XML file,
I'm then going to send that

01:07:32.680 --> 01:07:36.130
local connection back to
Flash into the other movie,

01:07:36.220 --> 01:07:40.580
from the agent into the
hosting application,

01:07:40.580 --> 01:07:43.500
and I'm going to say,
call the function receive

01:07:43.500 --> 01:07:45.210
ticker with the current price.

01:07:45.430 --> 01:07:49.160
And that's the other function that I had
inside there was called receive ticker.

01:07:49.190 --> 01:07:52.580
That then receives that data,
puts it in a text field.

01:07:53.840 --> 01:07:57.680
So that is basically a very
simple stock ticker application.

01:07:57.730 --> 01:08:00.400
And if I want to also,
in that application,

01:08:00.400 --> 01:08:02.130
I can say test notice.

01:08:02.250 --> 01:08:04.160
So there I just added a new notice.

01:08:04.170 --> 01:08:05.190
If I had sound, you could hear it.

01:08:05.250 --> 01:08:08.620
You could also see that the
doc item bounced for a second.

01:08:08.620 --> 01:08:12.760
And I get notification basically
through the operating system as well.

01:08:12.770 --> 01:08:14.400
And right here,
a notice came up saying here,

01:08:14.400 --> 01:08:15.720
new test notice.

01:08:15.770 --> 01:08:18.860
So that's the same notice information
that I set up inside the application.

01:08:18.910 --> 01:08:20.940
Goes and does that,
goes through the framework,

01:08:20.960 --> 01:08:22.830
uses the same data that you set in there.

01:08:22.930 --> 01:08:23.810
So there we are.

01:08:23.860 --> 01:08:26.590
I'm also having an advisory
that Homeland Security has

01:08:26.590 --> 01:08:28.480
been gone to elevated.

01:08:29.590 --> 01:08:32.060
So that's how you build the
basic elements of Central.

01:08:32.060 --> 01:08:33.570
And from there,
you can build a whole wide

01:08:33.580 --> 01:08:34.840
range of applications.

01:08:34.880 --> 01:08:37.400
And those are kind of
the really basic things.

01:08:37.400 --> 01:08:39.990
So can I go back to the slides?

01:08:44.780 --> 01:08:49.010
So, I think given that,
I basically want to give you a quick idea

01:08:49.010 --> 01:08:51.240
of where the state of the project is.

01:08:51.360 --> 01:08:52.760
Currently, like Dave said, we're in beta.

01:08:52.980 --> 01:08:55.570
We just got beta 2 today
after a lot of work,

01:08:55.790 --> 01:08:59.410
and we're undergoing a lot of usability
and interface look and feel and

01:08:59.410 --> 01:09:01.570
figuring out the best way to do this.

01:09:01.660 --> 01:09:04.870
And we're going to have a public
release of the SDK and the environment

01:09:04.870 --> 01:09:07.630
for all people to develop for
this in the end of the summer,

01:09:07.630 --> 01:09:08.600
2003.

01:09:08.600 --> 01:09:11.480
And we're going to launch
the platform for end users

01:09:11.950 --> 01:09:13.600
towards the end of the year.

01:09:13.660 --> 01:09:15.390
And if you want to get more
information about this,

01:09:15.390 --> 01:09:17.980
you can go to the
Macromediacentraldevelopmentcenter.com,

01:09:17.980 --> 01:09:20.510
which is listed up here,
or you can just go to

01:09:20.590 --> 01:09:23.600
macromedia.com and look up Central.

01:09:23.600 --> 01:09:25.600
And that's where you
can sign up for the SDK.

01:09:25.600 --> 01:09:29.190
And here's our contact
information and for information,

01:09:29.390 --> 01:09:30.600
it's all in here.

01:09:30.600 --> 01:09:34.600
So, if you have any questions.