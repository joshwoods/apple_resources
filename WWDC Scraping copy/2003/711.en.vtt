WEBVTT

00:00:23.570 --> 00:00:24.500
Good morning everyone.

00:00:24.530 --> 00:00:27.040
Welcome to the audio
and QuickTime session.

00:00:27.040 --> 00:00:30.960
I hope you enjoyed that slight demo that
we had of some of the things that we're

00:00:30.960 --> 00:00:32.280
going to be showing you today as well.

00:00:32.280 --> 00:00:36.100
So this session is covering changes
to the QuickTime audio foundation.

00:00:36.100 --> 00:00:39.540
Basically the big changes,
we're using Core Audio natively.

00:00:39.540 --> 00:00:42.040
We're removing the code that's
depending on Sound Manager.

00:00:42.040 --> 00:00:44.940
This is bringing a lot of new
capabilities to QuickTime's

00:00:44.970 --> 00:00:47.860
audio infrastructure,
and as well we're going to talk a

00:00:47.860 --> 00:00:49.920
little bit about audio codec news.

00:00:50.240 --> 00:00:53.370
So we're going to be
focusing today on playback,

00:00:53.370 --> 00:00:56.540
export,
some changes to DV audio that we made,

00:00:56.540 --> 00:00:58.960
and as well news from
the audio codec team.

00:00:58.960 --> 00:01:02.060
And the technology frameworks
that we're covering today

00:01:02.060 --> 00:01:05.480
are QuickTime and Core Audio,
and without any further pause,

00:01:05.480 --> 00:01:10.360
I'm going to introduce Greg Chapman who's
going to be talking about audio playback.

00:01:16.220 --> 00:01:22.480
So we've been having a lot of fun,
as you might imagine.

00:01:22.480 --> 00:01:25.260
So the main thing we wanted to do
with this revision of QuickTime was

00:01:25.280 --> 00:01:30.080
to remove all those restrictions
that the sound manager put on us.

00:01:31.680 --> 00:01:33.440
We wanted to have more than
two channels per track.

00:01:33.540 --> 00:01:37.920
You've been listening to some 5.1,
the Linkin Park and the

00:01:38.150 --> 00:01:43.440
Bugs Bunny was all 5.1,
so you can hear center, right and left,

00:01:43.580 --> 00:01:46.420
right and left surround,
and into the subs.

00:01:47.990 --> 00:01:49.330
We wanted to have high sample rates.

00:01:49.360 --> 00:01:53.810
Sound Manager limited us to basically
a 16-bit number for the sample rate.

00:01:53.910 --> 00:01:58.680
We're talking to Core Audio now,
so we're doing much better on this front.

00:01:58.710 --> 00:02:01.810
We wanted more than 16
bits per integer sample.

00:02:01.960 --> 00:02:05.460
We could support playback
of 24 and 32-bit integer,

00:02:05.530 --> 00:02:09.400
but we would always bring it back
down to 16-bit to play it out,

00:02:09.500 --> 00:02:11.500
so you'd lose all that nice depth.

00:02:12.460 --> 00:02:14.480
We also wanted to support
floating point samples.

00:02:14.590 --> 00:02:16.030
We used to be able to do this.

00:02:16.030 --> 00:02:17.930
Again, we'd convert to 16-bit.

00:02:17.930 --> 00:02:19.700
You'd lose all that nice depth.

00:02:19.910 --> 00:02:22.360
The other thing we wanted to do
was to be able to do multi-tracks

00:02:22.400 --> 00:02:25.730
around where you could have,
for example, for 5.1,

00:02:25.730 --> 00:02:29.690
you could have six mono tracks,
each one labeled as being left, right,

00:02:29.820 --> 00:02:32.800
center, whatever,
and then have them mixed together,

00:02:32.800 --> 00:02:37.190
sample accurate, and come out all the
appropriate speakers.

00:02:38.470 --> 00:02:44.920
So let me go to demo two and
let's show you what we've got.

00:02:45.650 --> 00:02:47.300
I'm going to play this whole trailer.

00:02:47.350 --> 00:02:50.280
Tim played part of it in the
QuickTime State of the Union.

00:02:50.280 --> 00:02:52.600
We want to see the whole thing.

00:02:52.600 --> 00:03:06.010
This is 5.1.

00:03:30.600 --> 00:03:33.200
Proceed as you still are.

00:03:33.200 --> 00:03:34.200
Only human.

00:03:34.260 --> 00:03:40.200
All of our lives,
we have fought this war.

00:03:40.200 --> 00:03:44.200
Tonight, I believe we can end it.

00:03:44.200 --> 00:03:46.190
That's a nice trigger.

00:03:46.200 --> 00:03:47.200
Oh, that's great.

00:03:47.200 --> 00:03:49.120
Mr.

00:03:49.120 --> 00:03:52.200
Anderson.

00:03:52.200 --> 00:03:54.200
Surprised to see me?

00:03:54.200 --> 00:03:56.200
So now he's found a way to code himself.

00:03:56.200 --> 00:03:59.200
Now he's more than one of them.

00:05:32.100 --> 00:05:35.540
have to do to be able to play
such content in your app?

00:05:35.540 --> 00:05:37.400
And the answer is absolutely nothing.

00:05:37.400 --> 00:05:40.090
Your app can play this as soon as
we ship this version of QuickTime.

00:05:40.630 --> 00:05:42.700
Let me show you iTunes.

00:05:42.700 --> 00:05:46.100
iTunes doesn't know about
QuickTime support for multi-channel.

00:05:46.130 --> 00:05:50.210
iTunes will play,
iTunes does not use QuickTime to play

00:05:50.210 --> 00:05:54.620
MP3s or the new music store content,
but if you hand it a movie that

00:05:54.620 --> 00:05:58.260
it doesn't know how to play,
it'll use QuickTime to play it.

00:05:58.260 --> 00:05:59.100
Here's an example of this.

00:05:59.100 --> 00:06:00.100
This is a Linkin Park song.

00:06:00.100 --> 00:06:02.100
I think it's the same one
we played when we came in.

00:06:02.100 --> 00:06:09.090
It takes a little bit.

00:06:15.100 --> 00:06:15.740
and others.

00:06:15.740 --> 00:06:17.690
I'm not going to play
that whole song again,

00:06:17.690 --> 00:06:18.470
as fun as it was.

00:06:18.470 --> 00:06:23.270
So that's an example of an app that,
you know, we just installed a different

00:06:23.350 --> 00:06:26.640
QuickTime underneath it,
plays back this movie,

00:06:26.640 --> 00:06:28.340
it gets surround sound.

00:06:28.340 --> 00:06:29.260
No worries.

00:06:29.260 --> 00:06:31.610
Okay, let's go back to slides.

00:06:34.830 --> 00:06:36.250
So how did we do that?

00:06:36.290 --> 00:06:36.960
There's a couple of things.

00:06:36.960 --> 00:06:39.400
There's some file format
things we had to do.

00:06:39.400 --> 00:06:42.890
There's a new version of the sound
description that's in the soundtrack.

00:06:42.890 --> 00:06:45.650
It describes sample
rate as a 64-bit float,

00:06:45.650 --> 00:06:46.600
for example.

00:06:46.600 --> 00:06:50.850
There's a new optional sound description
extension that tells you what the

00:06:50.850 --> 00:06:52.780
channel layout is for the track.

00:06:52.850 --> 00:06:54.150
Is this left and right?

00:06:54.210 --> 00:06:55.280
Is it 5.1?

00:06:55.280 --> 00:06:56.370
Is it just left?

00:06:58.540 --> 00:07:02.470
We've rewritten the sound media handler
so that it can understand these things,

00:07:02.470 --> 00:07:04.780
and it talks to Core Audio instead
of the sound manager,

00:07:04.780 --> 00:07:05.580
as you might imagine.

00:07:05.580 --> 00:07:08.890
And the new multi-track mixer that
I mentioned that does sample accurate

00:07:09.090 --> 00:07:13.470
mix between soundtracks so that you can
have your surround spread between tracks.

00:07:15.280 --> 00:07:18.280
Let me talk a little bit about
channel mapping and how that works.

00:07:18.450 --> 00:07:21.080
Historically,
movies can have one or more soundtracks.

00:07:21.140 --> 00:07:23.510
Usually they're alternates,
but you could have more than one

00:07:23.510 --> 00:07:25.760
soundtrack playing at the same time.

00:07:25.760 --> 00:07:27.660
Each track could only
have one or two channels,

00:07:27.660 --> 00:07:29.690
and if you had two,
we would just assume that it

00:07:29.690 --> 00:07:31.920
was left followed by right.

00:07:31.920 --> 00:07:34.980
And if you had a multi-track movie,
it would always mix to mono or stereo

00:07:34.980 --> 00:07:36.630
depending what your output device was.

00:07:36.640 --> 00:07:39.330
So if you had three stereo tracks,
you'd end up with stereo out.

00:07:39.360 --> 00:07:43.100
And it makes a certain amount of sense,
but it's kind of limiting.

00:07:43.540 --> 00:07:48.000
In this lovely new world,
tracks can have any number of channels.

00:07:48.000 --> 00:07:50.500
They're assigned to speakers using
a sound description extension,

00:07:50.500 --> 00:07:51.800
as I mentioned.

00:07:51.940 --> 00:07:54.780
And each track can contribute
to the movie's channel layout.

00:07:54.960 --> 00:07:58.140
For example, 5.1 could be one track
with six channels in it,

00:07:58.310 --> 00:08:01.150
could be six mono tracks
labeled according to what

00:08:01.190 --> 00:08:02.600
speaker they should go to.

00:08:02.730 --> 00:08:06.060
Or it could be a five-channel track
and then a one-channel LFE track

00:08:06.380 --> 00:08:08.460
or three stereo tracks or whatever.

00:08:08.570 --> 00:08:13.000
You just have to mark them appropriately
and then we'll play them back correctly.

00:08:13.270 --> 00:08:15.550
The order of the track in the movie
is not important as long as the

00:08:15.550 --> 00:08:17.930
channel assignments are labeled.

00:08:17.930 --> 00:08:21.300
And your old movies that have
unlabeled mono and stereo,

00:08:21.300 --> 00:08:23.400
they behave as before,
as you would expect.

00:08:23.420 --> 00:08:28.060
And if you're playing to a stereo device,
if I took that Matrix trailer and you

00:08:28.060 --> 00:08:32.040
played it back on your computer with
no six-channel device plugged in,

00:08:32.040 --> 00:08:34.740
that would downmix to stereo
and you would hear all the

00:08:34.740 --> 00:08:37.620
left side and the left,
all the right side and the right,

00:08:37.620 --> 00:08:39.680
and you'd hear center and both sides.

00:08:41.840 --> 00:08:43.420
So let me show you a
little bit about that.

00:08:43.420 --> 00:08:45.900
We'll go back to demo two.

00:08:48.360 --> 00:08:50.020
I've got three movies here.

00:08:50.150 --> 00:08:53.420
These are actually quad.

00:08:53.530 --> 00:08:55.320
Let me show you what they look like.

00:08:55.430 --> 00:08:58.210
So the one change we made to player

00:08:59.000 --> 00:09:31.400
[Transcript missing]

00:09:32.160 --> 00:09:35.140
Left, right.

00:09:35.180 --> 00:09:36.910
Left, saran.

00:09:37.140 --> 00:09:38.530
Right, saran.

00:09:38.630 --> 00:09:39.230
Okay.

00:09:39.550 --> 00:09:41.230
Thank you, Kevin.

00:09:42.440 --> 00:09:43.270
Here's this one.

00:09:43.410 --> 00:09:44.770
This one has four tracks.

00:09:44.890 --> 00:09:46.790
Let's take a look at each one of those.

00:09:46.900 --> 00:09:48.100
This first track is a mono track.

00:09:48.100 --> 00:09:50.360
It goes in right.

00:09:50.950 --> 00:09:52.280
Second one's left surround.

00:09:52.280 --> 00:09:56.440
It's a strange order,
but right surround and then left.

00:09:56.450 --> 00:09:57.200
That's kind of cool.

00:09:57.200 --> 00:09:59.560
Is that going to go to the right places?

00:09:59.560 --> 00:10:02.220
Left, right.

00:10:02.570 --> 00:10:06.340
Left Saran, Right Saran.

00:10:06.390 --> 00:10:08.380
There's always that little
hesitation before that one

00:10:08.380 --> 00:10:10.750
comes in that makes me nervous.

00:10:11.830 --> 00:10:15.860
And this one, just to be different,
it's also four tracks.

00:10:15.930 --> 00:10:19.100
This one goes left, right, left surround.

00:10:19.100 --> 00:10:21.490
Right surround as you might expect,
and this one will play

00:10:21.490 --> 00:10:22.600
back correctly too.

00:10:22.700 --> 00:10:27.110
Left, right, left surround.

00:10:27.110 --> 00:10:27.560
There we go.

00:10:27.690 --> 00:10:30.510
Right surround.

00:10:30.510 --> 00:10:30.510
Okay.

00:10:31.740 --> 00:10:33.800
So you can see that we're
actually following the labeling.

00:10:33.800 --> 00:10:37.510
We're not just doing something
in the order of the tracks.

00:10:37.540 --> 00:10:39.370
Let's go back to slides.

00:10:42.000 --> 00:10:46.380
OK, let me talk about a few
interesting new APIs in QuickTime.

00:10:46.420 --> 00:10:49.040
Now that we're talking to Core Audio,
there's some new things

00:10:49.040 --> 00:10:50.250
you may need to do.

00:10:50.670 --> 00:10:52.660
The first one is Qt
Convert Sound Description.

00:10:52.660 --> 00:10:56.230
We now have three different
versions of sound descriptions.

00:10:56.230 --> 00:10:57.560
If you look at sound
descriptions yourself,

00:10:57.560 --> 00:10:59.970
this is starting to become a nightmare.

00:10:59.980 --> 00:11:03.340
So we put in an API where you can
take any version of sound description,

00:11:03.380 --> 00:11:06.020
convert it to any other
version of sound description.

00:11:06.120 --> 00:11:09.510
We have a mode where you can convert
it to the lowest possible version of

00:11:09.510 --> 00:11:13.100
sound description given the format
that's described so that you can get

00:11:13.110 --> 00:11:15.890
the best possible backward compatibility
when you're creating movies,

00:11:15.890 --> 00:11:18.920
so old versions of
QuickTime can play them.

00:11:18.920 --> 00:11:20.840
And you can go to and from an
audio stream basic description,

00:11:20.840 --> 00:11:24.730
which is core audio's struct
that describes a stream of audio.

00:11:24.860 --> 00:11:27.360
So that's very useful for just
taking a sound description,

00:11:27.420 --> 00:11:29.930
you convert it to an ASBD,
and carry on with core audio.

00:11:33.010 --> 00:11:36.600
These are the obvious ones you might
want to have to set a movie to play

00:11:36.600 --> 00:11:38.420
to a particular audio output device.

00:11:38.420 --> 00:11:41.240
Device UIDs are a core audio concept.

00:11:41.240 --> 00:11:42.240
It's a CFString.

00:11:42.240 --> 00:11:44.280
It's a unique identifier for the device.

00:11:44.280 --> 00:11:49.350
We used to have media set sound output
component where you could grab a sound

00:11:49.350 --> 00:11:52.780
manager sound output component and say,
please play to this device.

00:11:54.360 --> 00:11:57.600
If you call the old API,
we will try underneath to determine

00:11:57.600 --> 00:12:00.710
what the actual core audio
device is that that sound output

00:12:01.120 --> 00:12:03.730
component was going to talk to,
and then we'll play to that guy.

00:12:03.740 --> 00:12:04.740
We'll try and do the right thing.

00:12:04.740 --> 00:12:07.220
We have two levels of API here.

00:12:07.220 --> 00:12:10.230
One is to set the movie to play,
and then media set is

00:12:10.380 --> 00:12:11.860
for individual tracks.

00:12:11.910 --> 00:12:14.110
So you can, as before,
set individual tracks in a movie

00:12:14.110 --> 00:12:15.480
to play to different devices.

00:12:20.150 --> 00:12:21.310
Extract movie audio.

00:12:21.320 --> 00:12:24.110
This is something that people
have asked for for a while.

00:12:24.230 --> 00:12:30.460
Have a way to take a movie and just
get uncompressed audio out of it.

00:12:30.460 --> 00:12:33.600
Mix across tracks,
decompress the tracks as necessary.

00:12:33.610 --> 00:12:36.860
This is the one that's going
to allow you to do this.

00:12:36.860 --> 00:12:41.010
And it returns a core audio buffer list,
which means you can then take that,

00:12:41.010 --> 00:12:45.480
put it in a queue for some AU graph
to have a ball with and play it

00:12:45.480 --> 00:12:48.050
out or whatever you want to do.

00:12:48.710 --> 00:12:50.820
There's these APIs,
Begin and I'm not really

00:12:50.820 --> 00:12:51.500
going to go through these.

00:12:51.500 --> 00:12:54.400
I'm just going to show you some
sample code that will be posted

00:12:54.400 --> 00:12:55.360
that you can take a look at.

00:12:55.360 --> 00:12:57.400
Let's go to Demo 2.

00:13:00.950 --> 00:13:03.440
Okay.

00:13:03.760 --> 00:13:06.230
Yes, it's Unix.

00:13:06.860 --> 00:13:17.230
I wrote a command line app and I'm going
to show you the routine that I wrote.

00:13:17.390 --> 00:13:21.340
It just takes a movie,
extracts the audio uncompressed,

00:13:21.340 --> 00:13:27.140
and writes it to an AIFF file,
which is a boring thing to do,

00:13:27.190 --> 00:13:29.310
but I could imagine that you guys
might think of something more

00:13:29.310 --> 00:13:32.500
interesting to do with the audio
buffer list you get out of the movie.

00:13:32.500 --> 00:13:36.140
So it takes a movie and it takes
the name of the AIFF file you want.

00:13:36.180 --> 00:13:38.780
You come down,
you begin movie audio extraction.

00:13:38.780 --> 00:13:43.250
You can ask the audio extraction
session what its default

00:13:43.340 --> 00:13:44.660
output format is going to be.

00:13:44.660 --> 00:13:47.380
And that default is
generally 32-bit float.

00:13:47.490 --> 00:13:50.480
It's all the channels in the movie
from all the soundtracks in the movie.

00:13:50.480 --> 00:13:53.240
It does no mixdown by default.

00:13:53.580 --> 00:13:57.170
And I think it picks the highest
sample rate in the movie.

00:13:58.560 --> 00:14:01.270
if there are multiple sample rates,
otherwise it's the sample rate.

00:14:01.300 --> 00:14:03.340
But that's not what I want.

00:14:03.340 --> 00:14:06.780
I want to put it in an AIFF file,
so I want 16-bit Big Endian samples.

00:14:06.840 --> 00:14:08.540
So that's what I say here.

00:14:08.540 --> 00:14:10.120
I did that by hand.

00:14:10.140 --> 00:14:14.130
Core Audio has much nicer
C++ classes for dealing with

00:14:14.170 --> 00:14:15.740
AudioStream basic descriptions.

00:14:15.740 --> 00:14:18.200
You tell the extraction
session what you want,

00:14:18.200 --> 00:14:19.200
so I send in what I want.

00:14:19.200 --> 00:14:23.090
I wanted 16 bits per channel,
and I wanted signed Big Endian, blah,

00:14:23.090 --> 00:14:24.120
blah, blah.

00:14:24.120 --> 00:14:26.540
Allocate your Core Audio buffer list.

00:14:26.640 --> 00:14:27.280
Mine's real simple.

00:14:27.380 --> 00:14:29.060
I've only got one buffer
because it's all interleaved,

00:14:29.060 --> 00:14:31.820
but you could get deinterleaved
float32 buffers if you wanted.

00:14:31.820 --> 00:14:36.000
Set up my AIFF file,
and I call extractMovieAudio.

00:14:36.000 --> 00:14:37.100
This is the interesting loop.

00:14:37.120 --> 00:14:40.500
You watch this flags word that
comes out of extractMovieAudio

00:14:40.500 --> 00:14:41.980
for this bit to be set.

00:14:42.060 --> 00:14:45.920
When that bit is set, you're done,
and each buffer you pull,

00:14:45.920 --> 00:14:49.570
you write it out to the file or
pass it off to your AU graph,

00:14:49.660 --> 00:14:51.620
whatever you want to do,
and then we do this.

00:14:51.620 --> 00:14:54.000
So let me just show you this running.

00:14:54.000 --> 00:14:56.660
I wrote a little batch script
to do it because the command

00:14:56.660 --> 00:14:59.100
line tool is really ugly.

00:14:59.330 --> 00:15:01.640
But let's see,
I'm in the same folder here

00:15:01.640 --> 00:15:03.660
and you'll watch that show up.

00:15:03.660 --> 00:15:04.790
Do it.

00:15:04.790 --> 00:15:09.210
And over here we have, suddenly,
an AIFF file.

00:15:09.260 --> 00:15:14.360
This is an AAC movie, which is actually,
people who have tried to get

00:15:15.010 --> 00:15:18.090
audio out of movies by themselves,
it's really hard when you're

00:15:18.090 --> 00:15:19.260
dealing with a VBR codec.

00:15:19.260 --> 00:15:21.820
There are seeming issues between
buffers and you get pops and

00:15:21.890 --> 00:15:23.250
it's just a pain in the butt.

00:15:23.260 --> 00:15:29.850
But, here we are,
we've got this and it plays beautifully.

00:15:35.400 --> 00:15:42.000
[Transcript missing]

00:15:42.220 --> 00:15:44.560
See, this is stereo,
and you just heard what we do with stereo

00:15:44.630 --> 00:15:47.600
when we have a multi-channel output,
which is we put it in right and left,

00:15:47.620 --> 00:15:49.260
as you would expect.

00:15:52.150 --> 00:15:53.100
All right.

00:15:53.100 --> 00:15:57.130
That was fun.

00:15:58.120 --> 00:16:00.090
Go back to slides.

00:16:02.290 --> 00:16:04.770
Now I'm going to bring up Brad Ford,
and he's going to talk to you about

00:16:04.810 --> 00:16:07.380
exporting these new kinds of audio.

00:16:13.700 --> 00:16:16.640
Thanks Greg,
and thank all of you for caring

00:16:16.640 --> 00:16:19.160
enough to get out of bed early.

00:16:19.460 --> 00:16:22.880
Greg said that we've
been having a lot of fun.

00:16:22.900 --> 00:16:24.810
I would use a different
word to describe it,

00:16:25.250 --> 00:16:26.980
probably pain.

00:16:26.980 --> 00:16:31.260
But that's the whole mantra of QuickTime.

00:16:31.260 --> 00:16:33.280
We write the hard code so
that you don't have to.

00:16:33.280 --> 00:16:39.580
And a great deal of pain has gone
into making these bits play back to

00:16:39.740 --> 00:16:41.820
the right place at the right time.

00:16:41.820 --> 00:16:48.700
And we would really hate it if all of
this work were wasted by not giving

00:16:48.700 --> 00:16:50.820
you a way to author this content.

00:16:50.820 --> 00:16:55.940
So thus we needed to give you a way
to export to these formats as well.

00:16:56.300 --> 00:18:27.000
[Transcript missing]

00:18:27.380 --> 00:18:31.200
So now in QuickTime 6.4,
we have a new standard

00:18:31.200 --> 00:18:33.520
sound compression component.

00:18:33.820 --> 00:18:38.300
I'm kind of loath to say it's a new
dialogue because it's oh so much more.

00:18:38.330 --> 00:18:43.140
It's a dialogue in one case,
but it's also just a sound configurator.

00:18:43.140 --> 00:18:46.040
It can export to and
from all the new formats.

00:18:46.040 --> 00:18:47.380
We can play it back.

00:18:47.380 --> 00:18:49.210
We'll let you export to it.

00:18:50.260 --> 00:18:53.900
Standard sound works well with or
without QuickTime's default dialogue,

00:18:53.900 --> 00:18:57.200
which makes it easy for you
to put custom UI on top of it.

00:18:57.220 --> 00:19:02.090
So any application you might develop
that would need to export audio,

00:19:02.090 --> 00:19:06.970
you can use your own beautiful
UI and just use our standard sound

00:19:06.970 --> 00:19:10.940
component to drive it and let
it keep track of all the state,

00:19:10.970 --> 00:19:13.430
ask it questions,
and we make this possible

00:19:13.430 --> 00:19:16.820
with new property APIs,
which I'll be talking about in a minute.

00:19:16.820 --> 00:19:19.940
Also, the default dialogue
is now a lot smarter.

00:19:19.940 --> 00:19:22.530
We don't make the same
mistakes that we made before.

00:19:22.570 --> 00:19:25.170
It's easier for me to show this
to you than to talk about it.

00:19:25.180 --> 00:19:27.710
So let's go to demo two.

00:19:31.600 --> 00:19:34.010
Okay.

00:19:34.010 --> 00:19:37.600
Here we've got the same lovely,
riveting Warner Brothers sound effects

00:19:37.600 --> 00:19:39.770
content that you heard earlier.

00:19:39.870 --> 00:19:42.790
I'm just going to bring up the...

00:19:43.060 --> 00:19:44.000
Export dialog.

00:19:44.000 --> 00:19:48.380
I'm going to export to a QuickTime movie.

00:19:48.380 --> 00:19:50.970
And this is the new
standard sound dialog.

00:19:50.970 --> 00:19:52.880
This is what the UI looks like.

00:19:52.930 --> 00:19:55.420
You'll notice a lot of
changes from the old one.

00:19:55.650 --> 00:20:00.590
First of all,
gone are 32-bit floating point,

00:20:00.590 --> 00:20:05.820
24-bit integer,
and all the other uncompressed

00:20:05.950 --> 00:20:08.370
formats pretending that they
were really compressed formats.

00:20:08.470 --> 00:20:13.180
Now, if you're uncompressed,
you're uncompressed all the time.

00:20:13.180 --> 00:20:16.680
And you get to different flavors
of yourself by going down to this

00:20:16.700 --> 00:20:20.310
codec-specific settings area where
you can set your sample size to

00:20:20.310 --> 00:20:23.800
be what it really is and you can
tell us whether you're floating

00:20:23.800 --> 00:20:27.500
point or unsigned or little endian,
things like that.

00:20:27.500 --> 00:20:32.100
Also of note are -- and I expect
some oohs and ahhs here.

00:20:32.100 --> 00:20:34.050
Ooh.

00:20:34.390 --> 00:20:36.140
Ah.

00:20:36.160 --> 00:20:40.500
That's a lot more channel layouts
than we ever -- -- supported before.

00:20:40.500 --> 00:20:42.220
You want to do mono or stereo,
that's fine.

00:20:42.220 --> 00:20:43.210
You can still do that.

00:20:43.230 --> 00:20:45.760
But you can also tag the
content in your movie.

00:20:45.930 --> 00:20:50.170
We'll let you export to as many
tracks or as many channels as

00:20:50.210 --> 00:20:52.830
you have in your input movie.

00:20:52.870 --> 00:20:56.800
So if you've got six tracks or six
channels of audio in your input movie,

00:20:56.890 --> 00:21:00.570
we'll present, you know,
all the five ohs, all the five dot ones.

00:21:00.870 --> 00:21:01.510
Makes sense.

00:21:01.760 --> 00:21:04.400
Also, here's another ooh-ahh moment.

00:21:04.400 --> 00:21:04.910
Wow.

00:21:04.980 --> 00:21:07.650
Sample rates that go up beyond 64.

00:21:07.800 --> 00:21:11.680
So we'll let you go to 24-bit,
96 kilohertz audio.

00:21:11.800 --> 00:21:13.290
No problem.

00:21:13.590 --> 00:21:17.400
And as a first,
let's go back to AAC where

00:21:17.400 --> 00:21:21.200
for the first time we'll let
you export multichannel AAC,

00:21:21.280 --> 00:21:25.520
which opens up a lot of really
interesting possibilities

00:21:25.560 --> 00:21:28.100
for web content delivery.

00:21:28.270 --> 00:21:32.590
You know,
you can export AAC in the range of

00:21:32.590 --> 00:21:35.460
say 192 to 320 kilobits per second.

00:21:35.560 --> 00:21:38.650
That's low enough that you could
transfer transfer it over the internet,

00:21:38.820 --> 00:21:39.760
surround sound.

00:21:39.940 --> 00:21:41.780
Pretty interesting.

00:21:42.350 --> 00:21:47.990
Okay, so let's go ahead and save
this out to the desktop.

00:21:56.710 --> 00:21:58.910
Okay, here we go.

00:21:58.940 --> 00:22:01.500
And let's quickly look at the info.

00:22:01.520 --> 00:22:05.620
Now we've taken all the tracks
and we've put the audio in

00:22:05.660 --> 00:22:11.000
each track down into one track,
but it's still got all the channels.

00:22:11.000 --> 00:22:12.700
They're just all in one track.

00:22:12.700 --> 00:22:15.960
So we can play this back.

00:22:26.320 --> 00:22:27.200
You get the idea.

00:22:27.200 --> 00:22:29.790
AAC 5.1.

00:22:29.800 --> 00:22:31.380
You witnessed it first in public.

00:22:34.300 --> 00:22:37.300
Okay, let's go back to slides please.

00:22:37.430 --> 00:22:42.810
That actually was the first public
demo of 5.1 AAC export in QuickTime.

00:22:43.670 --> 00:22:44.680
Feel special.

00:22:44.800 --> 00:22:48.360
So what application
changes are necessary?

00:22:48.360 --> 00:22:50.640
Many of you probably
use these old friends,

00:22:50.640 --> 00:22:54.560
these APIs, convert movie to file or
convert movie to data ref.

00:22:54.560 --> 00:22:58.590
If you do, you'll know that it has a lot
of parameters and the last

00:22:58.710 --> 00:23:02.180
parameter is a component instance,
which is the component instance of

00:23:02.180 --> 00:23:04.250
the exporter that you're going to use.

00:23:04.420 --> 00:23:06.780
And there are three ways
that you can do this.

00:23:06.780 --> 00:23:09.670
You can pass in nil
for the last parameter,

00:23:09.670 --> 00:23:13.590
which tells QuickTime,
I don't care what exporter you use,

00:23:13.590 --> 00:23:15.290
just do the right thing.

00:23:15.290 --> 00:23:19.130
You can also pass in a component,
not a component instance,

00:23:19.150 --> 00:23:22.730
which means you find the right component
of the type and subtype that you want,

00:23:22.730 --> 00:23:25.800
but you don't open it, and you say,
I know I really want

00:23:25.800 --> 00:23:29.630
to use this component,
but I don't care about special settings,

00:23:29.630 --> 00:23:31.480
so still do the right thing.

00:23:31.480 --> 00:23:33.610
And the third one that you
can do is you can actually

00:23:33.710 --> 00:23:37.130
open that component yourself,
do some special configuration to it,

00:23:37.130 --> 00:23:39.420
and then pass it as that last parameter.

00:23:39.460 --> 00:23:42.140
If you do the first case, pass nil.

00:23:42.140 --> 00:23:42.360
Or the second case, pass nil.

00:23:42.360 --> 00:23:44.570
Or the second case,
passing just the component,

00:23:44.730 --> 00:23:46.540
you don't have to make any changes.

00:23:46.750 --> 00:23:49.350
Your export will work
with the new settings.

00:23:49.380 --> 00:23:53.860
You'll get the new audio
exporting by default.

00:23:53.980 --> 00:23:56.780
Now if you do open your
own movie export directly,

00:23:56.780 --> 00:23:57.670
you must opt in.

00:23:57.900 --> 00:23:58.820
You must be explicit.

00:23:58.820 --> 00:24:01.340
Otherwise we don't know if
you're prepared to handle the new

00:24:01.340 --> 00:24:04.240
properties and the new settings
that we're going to give you.

00:24:04.410 --> 00:24:07.520
So the way that you opt in is
you call this lovely new call,

00:24:07.520 --> 00:24:09.130
QT set component property.

00:24:09.450 --> 00:24:11.740
I'll be talking about these component
properties more in a minute.

00:24:11.740 --> 00:24:16.740
But you can see you just pass in the
exporter that you're talking about,

00:24:16.740 --> 00:24:22.380
the class, and the property ID is
KMovieExporterPropertyID enable

00:24:22.510 --> 00:24:24.520
2003 audio features.

00:24:24.890 --> 00:24:27.210
Pretty long property name.

00:24:27.300 --> 00:24:28.040
And it's a Boolean.

00:24:28.040 --> 00:24:30.770
And if you say yes,
then you are telling us that you're

00:24:30.770 --> 00:24:33.040
ready to handle these new settings.

00:24:33.050 --> 00:24:36.520
Now if you have opted in,
you may just need to

00:24:36.530 --> 00:24:38.280
opt in and you're done.

00:24:38.580 --> 00:24:41.120
You will only need to make
further changes if you're ready

00:24:41.120 --> 00:24:41.120
to handle these new settings.

00:24:41.120 --> 00:24:42.390
So if you have opted in,
you may just need to make further

00:24:42.390 --> 00:24:45.110
changes if you call MovieExport
get settings as Atom container

00:24:45.110 --> 00:24:47.140
and parse the settings yourself.

00:24:47.290 --> 00:24:50.280
If you do that, so I don't want to tell
you not to do that,

00:24:50.370 --> 00:24:53.980
but it's kind of risky to do that because
we might do things like we just did

00:24:53.980 --> 00:24:58.580
when we changed audio underneath you
and give you all different settings.

00:24:58.580 --> 00:25:02.220
So if you have code to parse them,
you need to be ready because you're

00:25:02.220 --> 00:25:04.460
going to get different settings.

00:25:04.600 --> 00:29:53.000
[Transcript missing]

00:29:53.590 --> 00:29:57.620
The property type is specified
by a class as well as an ID.

00:29:57.620 --> 00:30:01.630
That means you get two 4-care codes
or eight care codes to work with

00:30:01.630 --> 00:30:03.880
instead of just one 4-care code.

00:30:04.050 --> 00:30:08.010
Which is kind of good because it sort
of gives you a little bit of a buffer

00:30:08.160 --> 00:30:09.920
in the area of namespace collision.

00:30:09.920 --> 00:30:13.550
So if I'm a component and you're
a component and I have sample

00:30:13.550 --> 00:30:16.620
rate property and you have sample
rate property but yours is a float

00:30:16.620 --> 00:30:21.270
64 and mine's an unsigned fixed,
I can still protect myself if our

00:30:21.270 --> 00:30:25.830
property names are the same because
I have a class 4-care code that puts

00:30:25.830 --> 00:30:28.440
mine in a different space than yours.

00:30:28.440 --> 00:30:33.180
Also, all of the data is explicitly
typed in the get info call.

00:30:33.180 --> 00:30:36.620
So if you make a get info call and you
don't have to know anything about me,

00:30:36.620 --> 00:30:39.150
you can just query me,
what are your properties?

00:30:39.970 --> 00:30:43.370
I have to tell you what the type
of the property is and the size.

00:30:43.370 --> 00:30:46.810
So it's very explicit,
even if you don't have the header file,

00:30:46.810 --> 00:30:48.160
what the property is.

00:30:48.160 --> 00:30:52.320
Okay, so the get info call also
gives you some flags that tell

00:30:52.320 --> 00:30:54.440
you some important things.

00:30:54.440 --> 00:30:58.490
This is a logical extension of what
they were doing in Core Audio as well.

00:30:58.500 --> 00:31:02.660
They have a great call in get info that
lets you see if the property is settable.

00:31:02.680 --> 00:31:08.010
So ours gives you a bitmap,
a flags field that lets

00:31:08.010 --> 00:31:11.750
you see if perhaps... Yes,
the property is settable

00:31:11.750 --> 00:31:13.220
but I can't set it now.

00:31:13.220 --> 00:31:14.800
Maybe my hardware is not ready.

00:31:14.800 --> 00:31:18.840
So maybe it'll return can
set later or can get later.

00:31:18.920 --> 00:31:23.440
So you can get meta information about
the property by getting these flags out,

00:31:23.440 --> 00:31:27.700
including one of the most important ones,
will notify listeners.

00:31:27.700 --> 00:31:30.520
And I should mention
standard sound compression,

00:31:30.530 --> 00:31:33.910
the new dialog has, like I said,
about 50 new properties and I think

00:31:33.910 --> 00:31:35.900
all of them but five are listenable.

00:31:35.900 --> 00:31:39.740
So you can build a very
sophisticated app that's very dumb.

00:31:39.920 --> 00:31:43.200
underneath because all it has to
do is listen for property changes.

00:31:44.790 --> 00:31:45.700
What do they look like?

00:31:45.700 --> 00:31:46.640
So here are the actual calls.

00:31:46.700 --> 00:31:49.300
I've already talked about them
so I won't stay on this long.

00:31:49.340 --> 00:31:52.030
It has a class, it has an ID,
it has the type,

00:31:52.200 --> 00:31:54.920
which is also a 4-care code,
it has a size,

00:31:55.020 --> 00:31:58.000
and then it has that flags field
that tells you can get now,

00:31:58.000 --> 00:31:58.950
can get later.

00:31:58.960 --> 00:32:02.190
Here is how you would
implement a property listener.

00:32:02.190 --> 00:32:06.670
Let's say you are listening for
my available sample rate list.

00:32:06.720 --> 00:32:12.060
My available sample rate may change based
on whether or not the compressor changes.

00:32:12.060 --> 00:32:16.960
So you would set up my listener
proc and you typically have a big

00:32:16.970 --> 00:32:20.790
switch statement in it in which you
would handle all of the property

00:32:20.790 --> 00:32:22.560
IDs that you'd registered for.

00:32:22.560 --> 00:32:26.960
So I just did a simple little printf
statement there and go and update my UI.

00:32:26.960 --> 00:32:32.160
And then you would tell the component,
like standard compression,

00:32:32.160 --> 00:32:35.910
you would first make a new component
property listener UPP and then you

00:32:35.910 --> 00:32:39.380
would register for that notification
by saying call component,

00:32:39.380 --> 00:32:41.460
add component property listener.

00:32:41.460 --> 00:32:44.650
Or if you're using the
QuickTime version for Jaguar,

00:32:44.650 --> 00:32:47.480
you would say QT,
add component property listener

00:32:47.760 --> 00:32:49.960
with the exact same parameters.

00:32:49.960 --> 00:32:53.170
And once you do that,
you are listening for that property

00:32:53.170 --> 00:32:57.330
and you will continue listening for
that property until you remove it.

00:32:57.960 --> 00:33:01.680
There is one important thing I should
mention about these property APIs.

00:33:01.680 --> 00:33:06.410
Due to a minor oversight,
the glue code got into Panther,

00:33:06.540 --> 00:33:10.820
got into the seed CDs that
you received on Monday,

00:33:10.820 --> 00:33:13.360
but the header file didn't
make it there in time.

00:33:13.360 --> 00:33:15.050
It wasn't promoted to public status.

00:33:15.050 --> 00:33:17.300
So that was a little bit
of a minor oversight.

00:33:42.620 --> 00:33:46.740
Okay, here is a great little app that
was written by Adrian Baerlacher,

00:33:46.740 --> 00:33:48.880
another member of the
QuickTime engineering team.

00:33:48.880 --> 00:33:52.920
And I'm very proud of this app
because he wrote it very quickly,

00:33:52.920 --> 00:33:59.370
and it's the most slick,
under-thousand-line code app that one

00:33:59.370 --> 00:34:02.090
could write because it keeps no state.

00:34:02.130 --> 00:34:06.320
All of its state is managed by the
standard sound compression dialog.

00:34:06.320 --> 00:34:10.090
So maybe you're like Adrian,
you think that the standard sound

00:34:10.460 --> 00:34:13.860
compression dialog is swell,
but you really just can't get

00:34:14.030 --> 00:34:16.880
enough metal in your life,
and you want more metal.

00:34:16.880 --> 00:34:21.490
Or maybe you want it to have your
own custom UI look like he did.

00:34:21.500 --> 00:34:26.570
So you are able to use standard sound
to do all of your configuration and

00:34:26.570 --> 00:34:28.850
put up your own UI on top of it.

00:34:28.900 --> 00:34:35.900
So let's take the same content we
heard before that has the left.

00:34:36.020 --> 00:34:36.300
Right.

00:34:36.320 --> 00:34:37.150
Left surround.

00:34:37.160 --> 00:34:37.750
Right surround.

00:34:37.760 --> 00:34:40.460
And we'll use his UI.

00:34:40.460 --> 00:34:44.240
Now remember, this is being driven
entirely by the properties.

00:34:44.240 --> 00:34:49.210
So every time I tweak a setting here,
it's doing a set component

00:34:49.680 --> 00:34:54.620
property call or it's listening
for changes and updating the UI.

00:34:55.260 --> 00:34:59.390
So let's go ahead and do this export.

00:34:59.390 --> 00:35:03.090
I suppose I should select
an output location.

00:35:05.100 --> 00:35:06.100
Export.

00:35:06.100 --> 00:35:12.650
This is a pretty full-featured app,
and it's under a thousand lines of code.

00:35:14.930 --> 00:35:17.890
Left, right.

00:35:17.930 --> 00:35:19.740
Left, surround.

00:35:19.920 --> 00:35:21.300
Right, surround.

00:35:21.300 --> 00:35:25.200
So there we took a quad and we
mixed it down to stereo and it

00:35:25.320 --> 00:35:28.350
still plays in the right places.

00:35:28.430 --> 00:35:31.510
If you'd like to learn more about
the component property APIs or

00:35:31.610 --> 00:35:36.080
standard sound compression in general,
please come to our lab between 12:00

00:35:36.080 --> 00:35:38.170
and 2:00 today where you'll hear more.

00:35:38.300 --> 00:35:38.610
Thanks.

00:35:38.630 --> 00:35:40.490
And now I'll bring back Tim.

00:35:42.700 --> 00:35:47.060
So we thought this feature was really,
really good.

00:35:47.080 --> 00:35:49.260
We worked really, really hard.

00:35:49.260 --> 00:35:50.210
We were a little bit confused.

00:35:50.300 --> 00:35:51.840
We might have been
drinking strange things.

00:35:51.840 --> 00:35:54.580
So we want to show you a little
bit what we are going through.

00:35:54.580 --> 00:35:56.130
Can we go back to demo two, please?

00:36:08.200 --> 00:36:15.750
This around's gone again.

00:36:15.750 --> 00:36:15.750
Oh man!

00:36:15.750 --> 00:36:15.750
Wish I didn't have to work on audio.

00:38:15.800 --> 00:38:22.770
QuickTime is back to normal!

00:38:45.800 --> 00:38:48.060
Thank you!

00:38:48.280 --> 00:38:52.800
So that was a stupid movie that a
lot of people on the QuickTime team

00:38:52.800 --> 00:38:57.220
worked really really hard to film
and direct and dream up I guess.

00:38:57.310 --> 00:39:01.180
That was probably either
the easiest or the hardest.

00:39:01.180 --> 00:39:03.970
So I'm going to talk a little bit
about some DV audio changes back to,

00:39:04.060 --> 00:39:06.410
you know, real content.

00:39:06.420 --> 00:39:09.440
So we made some changes in QuickTime 6.3.

00:39:09.440 --> 00:39:13.750
The issue with DV audio was that there's
two basic ways that you can store

00:39:13.750 --> 00:39:17.010
DV audio inside of a QuickTime movie.

00:39:17.020 --> 00:39:22.370
The first way is you can store inside a
track as PCM audio and basically extract

00:39:22.450 --> 00:39:24.580
it from the DV frames as you capture.

00:39:24.630 --> 00:39:26.980
That's what Final Cut Pro does,
that's what QuickTime Sequence

00:39:27.020 --> 00:39:29.950
Grabber does,
and there's been generally no problems

00:39:30.010 --> 00:39:32.130
with long-term AV sync in that case.

00:39:32.150 --> 00:39:36.860
The other way you could do it is
you could have the audio track index

00:39:36.860 --> 00:39:41.700
every frame of DV and reference
the DV audio inside the DV frame.

00:39:41.840 --> 00:39:44.880
And that's what iMovie's doing when
it captures and that's what the

00:39:44.920 --> 00:39:46.840
QuickTime DV importer is doing.

00:39:46.840 --> 00:39:51.310
And the issue there is that audio
in that case is represented as a

00:39:51.310 --> 00:39:57.090
fixed number of samples per DV frame,
which is a problem because it isn't.

00:39:57.150 --> 00:40:00.210
If you look at the duration
of a frame in NTSC,

00:40:00.210 --> 00:40:04.720
it's basically a variable number
of audio samples per frame.

00:40:04.720 --> 00:40:06.830
And when we represent
it as a fixed value,

00:40:06.830 --> 00:40:10.190
which is basically the maximum
number that could occur,

00:40:10.200 --> 00:40:14.070
we're basically accumulating
a drift in some cases.

00:40:14.070 --> 00:40:16.450
So in playback it's a very
small amount of audio,

00:40:16.580 --> 00:40:19.460
but in our export and our editing cases,
we were accumulating about a one

00:40:19.460 --> 00:40:23.490
frame of video error in the audio
for about every two and a half

00:40:23.550 --> 00:40:26.790
minutes of export or editing,
depending on the case.

00:40:26.790 --> 00:40:32.100
So we had a fairly large problem with
some AV sync in some applications.

00:40:32.100 --> 00:40:35.440
So the solution that we decided
to do is represent DV frames

00:40:35.580 --> 00:40:39.440
having variable duration,
which is really the correct thing to do.

00:40:39.460 --> 00:40:43.430
So we have a new type, which is VDVA,
and it's a variable duration DV,

00:40:43.430 --> 00:40:45.760
and that's new in QuickTime 6 3.

00:40:45.770 --> 00:40:48.940
It's also going to be in
6 4 and forever after.

00:40:48.960 --> 00:40:51.270
That's the default when
you're importing a DV clip.

00:40:51.270 --> 00:40:53.940
When you use the
QuickTime importer and in iMovie,

00:40:53.940 --> 00:40:58.610
it's now going to be representing
them as variable duration.

00:40:58.830 --> 00:41:01.940
So, a couple of reminders
when you're looking at DV,

00:41:01.940 --> 00:41:05.810
if you're playing around and actually
looking at DV audio in the tracks,

00:41:05.810 --> 00:41:09.780
you're going to see the new type,
K-variable duration DV audio format.

00:41:09.780 --> 00:41:12.950
You may see the old type because
files that were created before

00:41:13.130 --> 00:41:15.500
6.3 will still have the old type.

00:41:15.520 --> 00:41:18.820
And the important thing is if you're
playing with sound descriptions

00:41:18.880 --> 00:41:21.720
and you're using the new type,
you must set the compression

00:41:21.750 --> 00:41:23.520
ID to variable compression.

00:41:24.110 --> 00:41:25.960
And that's how we
basically make this work,

00:41:25.960 --> 00:41:28.770
and so we've actually achieved
a really good audio-video sync.

00:41:28.820 --> 00:41:30.910
And I just wanted to point
out a couple of things.

00:41:30.960 --> 00:41:34.960
A lot of the support that you're
seeing will be available when

00:41:35.300 --> 00:41:38.300
QuickTime 6.4 ships on Jaguar as well.

00:41:38.300 --> 00:41:42.630
That's something that we're working on to
make sure that the multi-channel support,

00:41:42.630 --> 00:41:45.480
et cetera,
is going to be working on that platform.

00:41:45.480 --> 00:41:47.300
We're using a mobile I.O.

00:41:47.300 --> 00:41:50.860
audio box to drive the audio,
the six-channel audio.

00:41:50.860 --> 00:41:52.280
It's connected via FireWire.

00:41:52.280 --> 00:41:53.990
And, of course, we're using the Core.

00:41:54.110 --> 00:41:56.320
We're using the Core audio support
and their drivers to make that happen.

00:41:56.320 --> 00:42:00.250
And with that, I'd like to introduce, oh,
one more thing.

00:42:00.280 --> 00:42:03.010
One more thing,
which is for those interested

00:42:03.010 --> 00:42:06.650
in AV startup sync issues,
we have a session this afternoon at

00:42:06.650 --> 00:42:09.320
2 where we're going to be talking
about some changes we're making

00:42:09.320 --> 00:42:10.660
for audio-video startup sync.

00:42:10.660 --> 00:42:12.960
We figure that's more advanced
programming than audio,

00:42:12.960 --> 00:42:14.280
so we put it in that session.

00:42:14.280 --> 00:42:16.460
And now I'd like to
introduce Eric Aldrich,

00:42:16.460 --> 00:42:19.200
who's going to talk about
audio codec development.

00:42:19.200 --> 00:42:20.740
Thank you, Tim.

00:42:20.740 --> 00:42:21.520
Thank you, Eric.

00:42:25.320 --> 00:42:26.060
This is wonderful.

00:42:26.060 --> 00:42:29.040
QuickTime 6.4 built on top of Core Audio.

00:42:29.040 --> 00:42:32.210
But now we're going to take a
little journey to Core Audio land.

00:42:32.220 --> 00:42:34.330
We're going to talk about audio codecs.

00:42:34.340 --> 00:42:38.060
What is an audio codec?

00:42:38.060 --> 00:42:43.480
Essentially, it's the business end of
QuickTime on the audio side.

00:42:43.480 --> 00:42:45.980
It's going to actually
handle your encoding and your

00:42:45.980 --> 00:42:47.650
decoding of your audio format.

00:42:47.660 --> 00:42:52.750
Audio codecs are going to replace
your SCOMs and your SDECs.

00:42:53.700 --> 00:42:56.680
They're now called ADECs and AANCs.

00:42:56.680 --> 00:43:03.400
And right now, in your seed CD,
we have AAC, MP3, and IMA.

00:43:03.400 --> 00:43:07.360
And we've already shipped AAC before,
since QuickTime 6.

00:43:10.710 --> 00:43:13.430
Okay, so how do you go about
writing an audio codec?

00:43:13.490 --> 00:43:16.480
Well,
we make it a little bit easier for you.

00:43:16.480 --> 00:43:20.910
There's a lot of code involved,
but we provide you an audio codec SDK.

00:43:20.990 --> 00:43:25.360
It's available on the
connect.apple.com site,

00:43:25.380 --> 00:43:26.320
your core audio.

00:43:26.320 --> 00:43:30.480
We provide you a framework,
basically just needed

00:43:30.480 --> 00:43:31.330
to implement a codec.

00:43:31.420 --> 00:43:34.700
It's fairly basic,
but you can do quite a bit with it.

00:43:34.700 --> 00:43:38.500
We give you some sample codec,
which is IMA41,

00:43:40.010 --> 00:43:42.820
Important point to note is
you do not have to implement

00:43:42.910 --> 00:43:44.860
both an encoder and a decoder.

00:43:44.860 --> 00:43:46.490
You can implement one and not the other.

00:43:46.490 --> 00:43:49.980
Example of this is that MP3,
we've only implemented the decode.

00:43:49.980 --> 00:43:52.810
We have not implemented the encode.

00:43:53.640 --> 00:43:56.260
Another thing that's important
about audio codecs is we

00:43:56.260 --> 00:43:57.740
use a push and pull model.

00:43:57.870 --> 00:44:02.650
You push the data in and you pull
the resulting transformation out.

00:44:02.650 --> 00:44:05.270
Keep that in mind when
I'm talking about this.

00:44:05.300 --> 00:44:09.340
Required files for
writing an audio codec.

00:44:09.430 --> 00:44:11.920
Fairly straightforward.

00:44:11.920 --> 00:44:16.980
A big one there is ACBaseCodec,
which is pretty much your

00:44:17.010 --> 00:44:19.860
base class for everything.

00:44:20.800 --> 00:44:22.860
You're going to use this
in every codec you write.

00:44:23.510 --> 00:44:26.840
Basically,
all these files provide the framework

00:44:27.480 --> 00:44:28.690
for what you will need to implement.

00:44:28.700 --> 00:44:32.880
Handles all the dispatching,
all the nitty gritty dirty

00:44:32.880 --> 00:44:37.090
details of talking to the
sound converter and the like,

00:44:37.140 --> 00:44:44.500
or excuse me, the audio converter,
which was detailed in session 404.

00:44:45.930 --> 00:44:49.580
We have an optional file,
which is AC Simple Codec,

00:44:49.580 --> 00:44:52.480
and this implements a basic buffer.

00:44:52.480 --> 00:44:57.280
For very basic sound codecs,
audio codecs, we provide buffer,

00:44:57.280 --> 00:45:00.680
the buffering implementation for you.

00:45:00.680 --> 00:45:01.820
You don't have to do it.

00:45:01.820 --> 00:45:03.670
But for things that are fairly elaborate,
you're going to want

00:45:03.670 --> 00:45:04.560
to use something else.

00:45:08.140 --> 00:45:10.940
And then you're going to have to
deal with codec-specific files.

00:45:10.940 --> 00:45:19.020
For instance, if you're doing AAC or MP3,
you're going to want an AAC codec file.

00:45:19.020 --> 00:45:22.670
You're going to inherit directly
from either base or simple codec.

00:45:22.700 --> 00:45:26.450
Then you have several methods
you'll have to implement,

00:45:26.450 --> 00:45:31.920
and these are analogous to a few things
that were already in the sound codecs.

00:45:31.920 --> 00:45:34.290
Of course,
you have your property management,

00:45:34.290 --> 00:45:37.420
which is get property info, get property,
set property.

00:45:38.260 --> 00:45:40.290
You have your initialized
and uninitialized,

00:45:40.290 --> 00:45:43.100
which is basically lock down
the codec and then unlock it.

00:45:43.160 --> 00:45:46.860
You have append input data,
which is the push of the push-pull model,

00:45:46.860 --> 00:45:48.760
where you'll push your data in.

00:45:48.760 --> 00:45:53.140
Then you have produce output packets,
which is your pull on

00:45:53.140 --> 00:45:55.080
the push-pull model.

00:45:55.080 --> 00:45:58.360
And that's where you're going to get
your decoded or encoded data out of.

00:46:01.650 --> 00:46:04.090
A few things you need to think about.

00:46:04.090 --> 00:46:06.590
Like before you had open a component.

00:46:06.750 --> 00:46:09.910
Now that is handled
mostly in the constructor.

00:46:10.180 --> 00:46:16.490
Your input, your default formats will be
handled in Constructor as well.

00:46:18.070 --> 00:46:20.860
You need to handle the encoder
and decoder separately.

00:46:20.860 --> 00:46:25.140
A model that we have used is we create,
you have a lot of common

00:46:25.140 --> 00:46:27.820
functionality in codecs,
whether you're encoding or decoding,

00:46:27.820 --> 00:46:32.260
so a lot of that we put into a generic,
here we say my codec,

00:46:32.310 --> 00:46:37.620
and then we inherit directly from that,
we create my decoder and my encoder.

00:46:38.340 --> 00:46:40.150
And that's the model
you want to think about.

00:46:40.400 --> 00:46:46.490
That allows us to add, for instance,
on MP3, we have an MP3 codec,

00:46:46.490 --> 00:46:51.750
then we inherit,
the MP3 decoder inherits MP3 codec,

00:46:51.750 --> 00:46:54.920
and if we later choose
to implement an encoder,

00:46:54.920 --> 00:46:59.750
for instance, we'll also inherit directly
from the MP3 codec file.

00:47:02.890 --> 00:47:09.070
Okay, when dealing with properties,
I can't stress enough that

00:47:09.070 --> 00:47:09.070
this is probably the most

00:47:09.400 --> 00:47:13.130
One of the most important features
of what you'll be dealing with,

00:47:13.200 --> 00:47:17.220
this is basically you're configuring
your codec before you lock it all down.

00:47:17.220 --> 00:47:19.680
So you have your get property info.

00:47:19.680 --> 00:47:23.780
It tells you how much data is
required for each property.

00:47:23.780 --> 00:47:26.190
And more importantly,
it tells you whether

00:47:26.190 --> 00:47:27.400
or not you can set it.

00:47:27.500 --> 00:47:29.960
And there will be two cases of this.

00:47:29.960 --> 00:47:33.510
A, you cannot set it, or B,
you can set it when the

00:47:33.750 --> 00:47:35.740
codec is not initialized.

00:47:35.760 --> 00:47:37.570
And we'll get into that a little bit.

00:47:41.050 --> 00:47:43.180
Get property, not all that much to say.

00:47:43.180 --> 00:47:46.350
You just have to realize
that at any time,

00:47:47.160 --> 00:47:48.160
this could be called.

00:47:48.170 --> 00:47:51.870
And it is all right to answer,
I don't know.

00:47:51.880 --> 00:47:55.480
If someone asks you for your bit rate
and your bit rate hasn't been configured,

00:47:55.480 --> 00:47:58.120
you could say, you know, zero, say,
I don't know.

00:47:58.120 --> 00:48:01.660
Or you can say, just report a default.

00:48:01.660 --> 00:48:05.420
But it's important to understand
that this can be called at any time.

00:48:05.640 --> 00:48:08.670
And there are some properties that
won't even be known until after runtime.

00:48:08.670 --> 00:48:09.560
So that's possible.

00:48:09.560 --> 00:48:10.990
You can just say, I don't know.

00:48:12.540 --> 00:48:15.640
Set property, again,
is not always available.

00:48:15.640 --> 00:48:19.310
Depends if the codec's
been initialized or not.

00:48:21.860 --> 00:48:23.240
Initialize and uninitialize.

00:48:23.240 --> 00:48:26.460
Again, initialize is just basically
locking down the codec.

00:48:26.460 --> 00:48:29.440
At that point,
when someone calls initialize,

00:48:29.440 --> 00:48:32.150
whatever they have set,
you take that and that's how

00:48:32.150 --> 00:48:33.650
you set up the audio codec.

00:48:33.740 --> 00:48:37.020
If they have not set all
the appropriate properties,

00:48:37.130 --> 00:48:41.440
it is if you can use default values and
if you can make something out of it,

00:48:41.440 --> 00:48:44.850
you can initialize at whatever
settings have been set,

00:48:44.850 --> 00:48:46.140
or you can fail.

00:48:46.140 --> 00:48:47.370
That's perfectly legal.

00:48:47.380 --> 00:48:50.080
If they haven't provided you enough data,
you can fail.

00:48:51.180 --> 00:48:53.790
And uninitialize just
simply removes this lock.

00:48:53.790 --> 00:48:55.170
It's basically a Boolean.

00:48:55.170 --> 00:48:58.080
Am I initialized or am I not?

00:49:01.690 --> 00:49:04.800
Append input data,
fairly straightforward.

00:49:04.920 --> 00:49:08.430
You basically take your input data
and you put it in an internal buffer.

00:49:08.540 --> 00:49:12.840
Important thing to note though is
you have to deal with audio packet,

00:49:12.910 --> 00:49:15.460
you know,
audio stream packet descriptions.

00:49:15.570 --> 00:49:18.900
All VBR codecs should handle these.

00:49:19.000 --> 00:49:22.540
Very important for MP3, AAC,
and the like.

00:49:22.640 --> 00:49:25.660
CBR codecs, you don't have to.

00:49:26.100 --> 00:49:28.860
It's nice,
you can handle them if you choose,

00:49:28.860 --> 00:49:30.910
but it's not really required.

00:49:33.290 --> 00:49:37.110
Produce output packets,
does the actual encoding or decoding.

00:49:37.110 --> 00:49:41.440
You don't have to have the actual encode,
decode right there.

00:49:41.440 --> 00:49:44.910
You can call a separate function or a
separate library or whatever to do it.

00:49:44.980 --> 00:49:46.820
That's where you actually handle it.

00:49:46.900 --> 00:49:49.940
Again, on the encode side,
if you're a VBR codec,

00:49:49.940 --> 00:49:53.740
you have to fill out the audio
stream packet descriptions.

00:49:55.470 --> 00:49:57.530
Another thing to note here,
this is where you're going to actually

00:49:57.560 --> 00:49:58.990
handle clearing your input buffer.

00:49:58.990 --> 00:50:03.380
Even though they're pen input data,
you're going to deal with handling,

00:50:03.380 --> 00:50:06.000
handing the data in and
produce output packets.

00:50:06.020 --> 00:50:07.460
You're going to update all your buffers.

00:50:07.460 --> 00:50:08.970
You have to remember to do that here.

00:50:12.190 --> 00:50:14.640
and backward compatibility.

00:50:14.720 --> 00:50:15.600
Kind of an important thing.

00:50:15.600 --> 00:50:18.030
There's a lot of QuickTime 6.

00:50:18.030 --> 00:50:22.080
There are copies of QuickTime 6 out
there and Panther hasn't shipped yet.

00:50:22.130 --> 00:50:27.900
We allow you, so you can deal with the
old SCOM and SDEC world,

00:50:27.920 --> 00:50:31.770
we give you sound manager
audio components which allows

00:50:31.770 --> 00:50:33.100
you to wrap an audio codec.

00:50:33.250 --> 00:50:38.210
So to old versions of QuickTime it looks
just like an old sound manager component,

00:50:38.210 --> 00:50:39.100
SDEC and SCOM.

00:50:39.100 --> 00:50:44.080
And we're going to be providing
an SDK that does this on our site.

00:50:44.700 --> 00:50:46.780
Anyway.

00:50:47.910 --> 00:50:50.150
You will need to implement
this if you want that support.

00:50:50.230 --> 00:50:51.800
That's kind of important.

00:50:51.800 --> 00:50:52.790
But very straightforward.

00:50:52.800 --> 00:50:54.240
And we've been shipping
these for a while.

00:50:54.330 --> 00:50:56.490
This is how we implemented
AAC from the get-go.

00:50:56.490 --> 00:51:00.420
So this is proven technology,
and it's been working for quite a while.

00:51:01.900 --> 00:51:08.020
So, at this point, one important thing,
some documentation on all of this.

00:51:08.020 --> 00:51:09.350
I'm going to read this here.

00:51:09.360 --> 00:51:13.000
The core audio overview,
which you can get basically

00:51:13.000 --> 00:51:15.460
at connectonapple.com.

00:51:15.460 --> 00:51:17.840
Take a look at it, provide any feedback.

00:51:17.890 --> 00:51:19.050
We'd appreciate it.

00:51:19.050 --> 00:51:19.730
Thank you.

00:51:32.100 --> 00:51:37.980
The non-technical stuff here.

00:51:37.980 --> 00:51:40.860
For the roadmap, these are the

00:51:41.260 --> 00:51:50.590
We have a bunch of sessions going on
also for content developers on QuickTime.

00:51:50.600 --> 00:51:56.120
One thing that is not noted here is that
if you really care deeply about audio,

00:51:56.120 --> 00:52:00.960
there is a feedback forum
starting just after we finish this

00:52:01.060 --> 00:52:02.990
session across the aisle here.

00:52:03.000 --> 00:52:07.460
So if you have any comments that you
want to provide to the audio team,

00:52:07.460 --> 00:52:10.620
this is the right place
to go and provide that.

00:52:13.950 --> 00:52:17.630
We have a QuickTime feedback
forum tomorrow afternoon.

00:52:17.630 --> 00:52:21.570
We will welcome you all there if you have
any questions or if you have any comments

00:52:21.630 --> 00:52:24.260
that you want to make about QuickTime.

00:52:24.450 --> 00:52:29.770
That's my name and my address that you
can use if you have any further comments,

00:52:29.770 --> 00:52:33.990
any further questions after
the conference is finished.

00:52:34.380 --> 00:52:37.900
For more information,
you can go to the developer site,

00:52:38.050 --> 00:52:39.310
QuickTime.

00:52:39.310 --> 00:52:44.030
If you have any, you want to see where
QuickTime is in general,

00:52:44.030 --> 00:52:46.300
you can go to the Apple site, QuickTime.

00:52:46.300 --> 00:52:51.300
And for information,
you can go to the documentation site.

00:52:51.300 --> 00:52:57.060
There is a QuickTime section
on it that has been updated

00:52:57.060 --> 00:53:00.790
just for this conference.

00:53:00.980 --> 00:53:04.210
are all present here.

00:53:04.210 --> 00:53:13.150
There is documentation and sample
code that is only available to

00:53:13.150 --> 00:53:14.780
you if you go to the ADC site,
download, place,

00:53:14.780 --> 00:53:14.780
and go to the QuickTime stuff.

00:53:14.780 --> 00:53:14.780
So it should be available
right now for you.

00:53:15.100 --> 00:53:20.000
Also, we have mentioned this
many times this morning,

00:53:20.000 --> 00:53:23.940
there is a QuickTime lab
going on downstairs.

00:53:23.940 --> 00:53:27.720
So if you have any questions,
for instance, today is the special day

00:53:27.720 --> 00:53:29.460
for any audio questions.

00:53:29.760 --> 00:53:36.200
All the engineers from the audio team
will be down there at the lab today.

00:53:36.200 --> 00:53:37.850
All day you can go down there.

00:53:37.860 --> 00:53:40.930
It's in the first floor Sacramento room.

00:53:41.000 --> 00:53:45.380
There is also some assistance
for content development if

00:53:45.380 --> 00:53:48.000
that's what you're interested in.