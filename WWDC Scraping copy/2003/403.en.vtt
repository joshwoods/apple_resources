WEBVTT

00:00:26.040 --> 00:00:27.120
Well, welcome.

00:00:27.150 --> 00:00:28.880
Hope you had a good lunch.

00:00:28.930 --> 00:00:33.920
This session is really critical
for anybody who's thinking of

00:00:34.160 --> 00:00:38.500
embedding Safari technology within
your own application or leveraging

00:00:39.090 --> 00:00:42.100
any aspect of Safari technology,
whether you're using

00:00:42.100 --> 00:00:46.210
Apple Help or these other things,
just understanding what's going

00:00:46.240 --> 00:00:48.340
on with the Safari technologies.

00:00:48.550 --> 00:00:52.520
And to talk you through this stuff,
I want to introduce Don Melton,

00:00:52.730 --> 00:00:54.090
Manager of
Internet Technologies at Apple.

00:00:54.090 --> 00:00:54.090
Don?

00:00:58.870 --> 00:00:59.800
Thanks John.

00:00:59.800 --> 00:01:01.420
Hi there.

00:01:02.020 --> 00:01:07.200
Wasn't that a marvelous lunch?

00:01:07.200 --> 00:01:08.530
Still feeling that.

00:01:08.680 --> 00:01:11.410
Okay, like John said,
this is the Safari overview

00:01:11.460 --> 00:01:14.860
and I'm Don Melton,
the Internet technologies manager.

00:01:14.860 --> 00:01:20.360
And what we're going to do today,
if I can get the clicker to work,

00:01:20.360 --> 00:01:25.680
is we're going to get a high-level
overview of Safari technology and we're

00:01:25.850 --> 00:01:30.400
going to have a roadmap which hopefully
John will remember to read at the end

00:01:30.400 --> 00:01:35.850
of the session on other useful sessions
here at the conference concerning Safari.

00:01:35.930 --> 00:01:38.620
I think this is going to be
especially useful to those of

00:01:38.620 --> 00:01:43.180
you developing applications,
Internet tools, web content,

00:01:43.180 --> 00:01:46.040
Apple help content and open source.

00:01:46.040 --> 00:01:50.150
It's also going to probably be
fun for those of you who might

00:01:50.240 --> 00:01:51.820
have ever used a web browser.

00:01:51.820 --> 00:01:54.280
How many of you have
ever used a web browser?

00:01:54.390 --> 00:01:57.730
Okay, it's my kind of crowd then.

00:01:57.780 --> 00:01:58.660
All right.

00:01:58.790 --> 00:02:01.210
Okay, here's what we'll cover today.

00:02:01.420 --> 00:02:04.400
Like John said, Safari technology you
can use in your software.

00:02:04.400 --> 00:02:08.040
We're going to see some demos,
and I'm going to talk a

00:02:08.040 --> 00:02:11.300
little bit about the APIs,
but remember this is high level.

00:02:11.300 --> 00:02:14.300
We're not going to see that much code.

00:02:14.450 --> 00:02:19.350
And because I'm the manager
of Internet Technologies,

00:02:19.420 --> 00:02:25.070
I'm going to remind you about
other Internet Technologies that

00:02:25.070 --> 00:02:25.360
we have available at Apple,
besides just the cool Safari stuff.

00:02:25.780 --> 00:02:27.960
So let's get started
talking about Safari,

00:02:27.960 --> 00:02:30.020
everybody's favorite web browser.

00:02:30.060 --> 00:02:36.010
So Apple released the first public
beta of Safari on January 7th at

00:02:36.070 --> 00:02:39.330
Macworld San Francisco here at Moscone.

00:02:39.330 --> 00:02:43.130
And I knew it was going to be
popular because people were trying

00:02:43.140 --> 00:02:45.230
to download it from the show floor.

00:02:45.230 --> 00:02:47.610
People were going crazy over this thing.

00:02:47.690 --> 00:02:53.380
And I think within four days we set some
kind of record for downloads at Apple.

00:02:53.380 --> 00:02:55.020
It was pretty big.

00:02:55.020 --> 00:03:01.360
And then a few months later we released
public beta 2 with even more features.

00:03:01.360 --> 00:03:04.480
And the download rush
started all over again.

00:03:04.480 --> 00:03:08.020
And now this week, as you know,
we've released 1.0.

00:03:08.020 --> 00:03:08.940
This is the GM.

00:03:08.940 --> 00:03:11.040
This is the real thing.

00:03:11.040 --> 00:03:13.230
It's not a dot next to it.

00:03:13.280 --> 00:03:16.710
And the folks at the home
office in Cupertino tell me

00:03:16.710 --> 00:03:19.580
the servers are pretty busy.

00:03:20.450 --> 00:03:24.740
So why is Safari such
a phenomenal success?

00:03:24.860 --> 00:03:27.720
I mean, because people are not
just downloading it,

00:03:27.720 --> 00:03:29.240
they're actually using it.

00:03:29.300 --> 00:03:32.580
And some people are already,
even in beta 1,

00:03:32.650 --> 00:03:35.460
making it their default web browser.

00:03:35.580 --> 00:03:40.280
I can think of three reasons:
innovative features, solid quality,

00:03:40.280 --> 00:03:42.700
and impressive performance.

00:03:43.490 --> 00:03:46.090
Let's talk about the features.

00:03:46.430 --> 00:03:49.300
Safari is a full-featured web browser.

00:03:49.350 --> 00:03:51.900
It's grown up even for a 1.0 release.

00:03:51.910 --> 00:03:56.800
This is just a partial list of some of
the features with things like Snapback,

00:03:56.830 --> 00:04:00.280
integrated Google Search,
and what I think is the best bookmarks

00:04:00.280 --> 00:04:01.600
organizer in any web browser.

00:04:01.680 --> 00:04:03.790
It's very, very compelling to users.

00:04:04.060 --> 00:04:06.370
Plus for all us geeks,
we've got tab browsing.

00:04:06.370 --> 00:04:09.460
Who liked that when we
added that in beta 2?

00:04:09.520 --> 00:04:10.120
Okay.

00:04:10.120 --> 00:04:14.020
And now bookmark
synchronization with iSync.

00:04:14.020 --> 00:04:16.060
Very, very popular.

00:04:16.060 --> 00:04:19.310
But the other reason is solid quality.

00:04:19.390 --> 00:04:22.040
Safari just works right.

00:04:22.060 --> 00:04:24.560
It works the way you expect it to.

00:04:24.640 --> 00:04:28.800
It renders web pages the way
they were meant to be rendered.

00:04:28.800 --> 00:04:33.990
It renders them the way the web
designer intended them to be rendered,

00:04:33.990 --> 00:04:38.670
especially if that web designer
used current web standards.

00:04:39.110 --> 00:04:42.880
But, hey,
Safari works even if they didn't.

00:04:42.880 --> 00:04:44.170
The other reason is stability.

00:04:44.180 --> 00:04:46.950
I don't know how many times after
the first beta came out I heard,

00:04:47.020 --> 00:04:48.360
"This is just a beta?

00:04:48.360 --> 00:04:51.080
You should just stick the 1.0 on that.

00:04:51.330 --> 00:04:52.470
Ship that thing." Thanks.

00:04:52.470 --> 00:04:54.230
We really appreciate that.

00:04:54.230 --> 00:04:57.090
We're glad the crashes
were few and far between.

00:04:57.380 --> 00:05:01.270
We'd like to say now,
"That was intentional."

00:05:01.720 --> 00:05:04.290
We like to think we
engineered that quality.

00:05:04.360 --> 00:05:06.270
So quality is a big draw,
and I think this is the other

00:05:06.270 --> 00:05:09.060
reason a lot of people are already
making it their default web browser,

00:05:09.150 --> 00:05:10.050
even back in the beta.

00:05:10.060 --> 00:05:13.710
But the most important reason, I think,
for Safari's success is

00:05:13.710 --> 00:05:15.600
the impressive performance.

00:05:15.600 --> 00:05:19.100
I mean, it's just the fastest
browser on Mac OS X.

00:05:19.100 --> 00:05:23.210
Not only does it beat the competition
in the standard benchmarks,

00:05:23.210 --> 00:05:26.940
but just in everyday usage,
loading web pages, launch time,

00:05:27.000 --> 00:05:29.100
scrolling and resizing windows.

00:05:29.600 --> 00:05:32.960
Did you notice that 1.0 is
actually even faster on launch

00:05:33.090 --> 00:05:34.750
time than the previous betas?

00:05:34.880 --> 00:05:35.950
Worked on that one.

00:05:36.030 --> 00:05:39.310
It also has a small memory footprint
for those memory-challenged

00:05:39.310 --> 00:05:40.870
configurations out there.

00:05:42.800 --> 00:05:49.000
So the question that I hear most often,
even around the office,

00:05:49.020 --> 00:05:52.400
is how do we make Safari so fast?

00:05:52.440 --> 00:05:55.160
And it's actually fairly straightforward.

00:05:55.210 --> 00:06:01.250
For one thing, broken clicker,
we made performance the priority,

00:06:01.250 --> 00:06:02.240
the number one priority.

00:06:02.240 --> 00:06:03.320
We made it a feature.

00:06:03.320 --> 00:06:08.200
We made it so that engineers and managers
would have their own job performance

00:06:08.200 --> 00:06:10.700
measured on Safari's performance.

00:06:10.700 --> 00:06:15.700
I mean, we made sure that everybody
realized this is job one.

00:06:15.720 --> 00:06:18.190
You have to take it seriously.

00:06:18.400 --> 00:06:20.460
The other thing is we started
with great technology,

00:06:20.460 --> 00:06:26.430
not only Mac OS X as a platform,
but also our great open source engine

00:06:26.430 --> 00:06:29.300
that I'll be talking more about later.

00:06:29.530 --> 00:06:32.710
My Safari engineering team would
like me to mention that we also

00:06:33.080 --> 00:06:38.500
started with great engineers.

00:06:38.880 --> 00:06:42.520
Okay, now what I think is really
important here is we took regular

00:06:42.520 --> 00:06:45.320
measurements of the software.

00:06:45.320 --> 00:06:50.460
We measured it weekly, daily, hourly,
sometimes more often than that,

00:06:50.460 --> 00:06:53.530
and we measured it across different axes.

00:06:53.530 --> 00:06:58.580
We measured page load times and launch
times and memory footprint and the

00:06:58.580 --> 00:07:01.680
number of malloc nodes that we had.

00:07:01.680 --> 00:07:07.210
And we created massive charts and
tables and we tracked this whole thing.

00:07:07.350 --> 00:07:10.910
And we used the tools that come
right on your developer's CD,

00:07:10.910 --> 00:07:15.640
real simple ones like Top and
more sophisticated ones

00:07:15.640 --> 00:07:18.140
like FS Usage and Sample.

00:07:18.140 --> 00:07:20.430
And more importantly,
we built our own tools and we

00:07:20.430 --> 00:07:23.160
built them right into Safari,
right inside,

00:07:23.160 --> 00:07:26.880
because if you're not looking
at performance from the inside,

00:07:27.090 --> 00:07:30.910
you're missing a lot of the picture
about what's going on in your app.

00:07:30.910 --> 00:07:32.830
So we took regular measurements.

00:07:32.990 --> 00:07:35.300
And then with all that data,
we removed the--.

00:07:35.300 --> 00:07:37.040
We removed the sloth.

00:07:37.120 --> 00:07:38.060
Okay.

00:07:38.060 --> 00:07:41.330
We removed those cases of
where we were doing work two,

00:07:41.450 --> 00:07:42.520
three times too often.

00:07:42.630 --> 00:07:43.630
Get it down to just--.

00:07:43.870 --> 00:07:45.390
You know, maybe just do that once.

00:07:45.400 --> 00:07:46.700
That's all you need to do.

00:07:46.860 --> 00:07:49.870
And even in some cases,
maybe not even do that at all.

00:07:51.830 --> 00:07:54.460
And then, and only then,
did we fall into the

00:07:54.560 --> 00:07:55.970
classical optimizing.

00:07:56.270 --> 00:07:57.800
Just get rid of the
easy stuff off the top,

00:07:57.900 --> 00:08:04.110
and you'd be surprised at how fast your
app can get with that kind of approach.

00:08:04.890 --> 00:08:10.620
But I think most importantly,
we never made it any slower.

00:08:11.160 --> 00:08:13.380
People always ask me,
how did you make Safari fast?

00:08:13.500 --> 00:08:14.480
We didn't make it slow.

00:08:14.480 --> 00:08:16.710
Well,
the truth is we never made it slower.

00:08:16.720 --> 00:08:18.080
We never regressed.

00:08:18.080 --> 00:08:21.690
If we had some huge feature
that was going to land,

00:08:21.690 --> 00:08:25.590
and we tested it and tried it out,
and if that was going

00:08:25.590 --> 00:08:27.810
to slow down the app,
we didn't land that feature.

00:08:27.820 --> 00:08:31.560
There was a big one that was going to
go in last year that would have slowed

00:08:31.560 --> 00:08:35.890
down Safari by 7%. I told the engineer,
sorry, can't land that.

00:08:35.940 --> 00:08:38.250
You've got to give me that 7% back.

00:08:38.300 --> 00:08:39.540
And he worked and worked.

00:08:40.080 --> 00:08:41.020
It went a week and a half.

00:08:41.300 --> 00:08:43.150
He got me 8% back.

00:08:43.240 --> 00:08:44.300
So I let him land it.

00:08:45.730 --> 00:08:46.890
You have to do that.

00:08:46.980 --> 00:08:48.780
You have to have that policy.

00:08:48.810 --> 00:08:50.150
No regressions.

00:08:50.150 --> 00:08:51.560
Zero tolerance.

00:08:51.580 --> 00:08:55.300
That's why Safari is
faster on every release.

00:08:55.320 --> 00:08:59.410
I'd really like,
while I have this bully pulpit

00:08:59.670 --> 00:09:03.850
where you're all out there,
you're listening to me

00:09:03.850 --> 00:09:08.350
after that wonderful lunch,
please, please take some of these

00:09:08.350 --> 00:09:08.350
techniques back so we can have
fast applications on this platform.

00:09:08.700 --> 00:09:12.820
Okay, so, so Don,
Safari is swell for users.

00:09:12.820 --> 00:09:15.390
It has all these great features,
this solid quality,

00:09:15.390 --> 00:09:18.310
this impressive performance,
but what's in it for us

00:09:18.520 --> 00:09:21.940
developers out there,
you're saying?

00:09:22.100 --> 00:09:27.060
Well, as you've probably heard,
we're opening up Safari

00:09:27.410 --> 00:09:32.820
We're opening up the hood and we're
letting you at the engine this week.

00:09:32.890 --> 00:09:38.490
Okay, because Safari is not
just a browser anymore.

00:09:39.030 --> 00:09:44.410
We're taking the frameworks that
were inside Safari and we're moving

00:09:45.140 --> 00:09:49.430
them into public locations in
the system and we're giving them

00:09:49.430 --> 00:09:52.210
public APIs that you can all call.

00:09:52.630 --> 00:09:57.930
We're also providing you, the developer,
a software development kit so you can

00:09:57.930 --> 00:10:00.680
use those frameworks and those APIs.

00:10:01.510 --> 00:10:02.800
What are these frameworks?

00:10:02.850 --> 00:10:04.760
There are two of them.

00:10:04.790 --> 00:10:07.140
The first,
you've probably heard about it already,

00:10:07.190 --> 00:10:09.890
talked about it in the conference,
is the WebKit.

00:10:10.010 --> 00:10:13.900
This is the Safari content window.

00:10:13.900 --> 00:10:16.700
It's the big HTML widget.

00:10:16.790 --> 00:10:20.800
It's the framework that provides
the embeddable browser views,

00:10:20.850 --> 00:10:22.570
how you can put Safari inside your app.

00:10:22.660 --> 00:10:26.630
But there's another framework,
our old friend Foundation.

00:10:26.640 --> 00:10:31.540
We've upgraded and enhanced
it with brand new URL APIs for

00:10:31.540 --> 00:10:33.970
loading and other things.

00:10:34.000 --> 00:10:38.430
So when are these frameworks available?

00:10:38.430 --> 00:10:40.300
They're available now!

00:10:40.320 --> 00:10:42.070
Yesterday, as a matter of fact.

00:10:42.120 --> 00:10:46.280
They're built into Panther,
and more importantly,

00:10:46.280 --> 00:10:50.820
they're in Jaguar as soon
as you install Safari 1.0.

00:10:50.820 --> 00:10:54.490
If you've got Safari 1.0,
you go in there and get info in the

00:10:54.490 --> 00:10:56.870
finder and notice how it's skinnier now?

00:10:57.020 --> 00:11:00.280
That's because the engine
is out in the system.

00:11:00.340 --> 00:11:04.310
WebKit is over in system library
frameworks alongside a new

00:11:04.310 --> 00:11:06.610
foundation that gets installed.

00:11:07.140 --> 00:11:09.090
Okay, so who's using WebKit?

00:11:09.470 --> 00:11:12.000
Well, in Panther,
that's going to be mail,

00:11:12.000 --> 00:11:15.090
so you can have beautiful
HTML mail rendered.

00:11:16.270 --> 00:11:19.220
Sherlock, right?

00:11:20.430 --> 00:11:21.890
and the Help Viewer.

00:11:21.890 --> 00:11:25.470
And I told you this is going to be nice
for people doing Apple Help content.

00:11:25.530 --> 00:11:28.440
You've got the power of
Safari inside of Help in Panther.

00:11:28.490 --> 00:11:30.470
But also-- Thank you.

00:11:32.420 --> 00:11:33.580
Xcode will be using it.

00:11:33.730 --> 00:11:38.590
Project Builder actually, I believe,
does use it on the CD.

00:11:38.600 --> 00:11:43.160
And hopefully, your application will be
using it one of these days.

00:11:43.220 --> 00:11:46.760
Okay, so who's using these new
Foundation URL APIs underneath?

00:11:46.940 --> 00:11:53.000
Well, in Panther, Software Update,
that's how we download

00:11:53.000 --> 00:11:53.000
stuff for software updating.

00:11:53.310 --> 00:11:57.120
and Java uses it for cookies,
among other things,

00:11:57.170 --> 00:12:00.110
and hopefully your app can use it too.

00:12:00.630 --> 00:12:03.240
So when is the SDK available?

00:12:03.280 --> 00:12:04.890
It's available now!

00:12:05.110 --> 00:12:05.460
Right now.

00:12:05.460 --> 00:12:07.490
Yesterday, as a matter of fact,
it went up,

00:12:07.500 --> 00:12:11.500
I believe it was probably a half
an hour after Safari went online.

00:12:11.670 --> 00:12:14.380
And if you have one of
them free ADC memberships,

00:12:14.380 --> 00:12:18.470
you can just go right over to the
developer site and download the SDK,

00:12:18.470 --> 00:12:19.650
install that.

00:12:19.720 --> 00:12:24.690
It's got documentation,
the whole nine yards, total coverage.

00:12:24.870 --> 00:12:26.810
Okay, so where can you use the SDK?

00:12:26.900 --> 00:12:28.440
Where can you use these technologies?

00:12:28.440 --> 00:12:33.720
Well, you can use them in both Cocoa and,
yes, in Carbon applications.

00:12:33.720 --> 00:12:41.310
Now, it's an Objective-C API,
but the WebKit has a convenient C API for

00:12:41.310 --> 00:12:43.550
initializing WebKit and creating views.

00:12:43.580 --> 00:12:49.700
And plus, the SDK has plenty of examples,
C and C++, adapter code included,

00:12:49.700 --> 00:12:53.030
that you can just lift and take
out using your application.

00:12:53.180 --> 00:12:57.310
We made sure the license
was liftable and reusable.

00:12:58.080 --> 00:13:01.820
So what I'd like to do now is I'd
like to have Richard Williamson,

00:13:01.890 --> 00:13:04.010
Safari engineer extraordinaire.

00:13:04.660 --> 00:13:06.330
Is that how you introduced him yesterday,
Scott?

00:13:06.410 --> 00:13:08.100
Yeah, thank you.

00:13:08.100 --> 00:13:10.050
Come and do a demo of the web kit for us.

00:13:11.120 --> 00:13:13.480
Hi Don, thanks for that info.

00:13:14.190 --> 00:13:16.490
So the first demo I'm going
to show you is actually a

00:13:16.490 --> 00:13:18.820
recap of the demo yesterday.

00:13:18.820 --> 00:13:22.750
And so some of you may
have seen it already.

00:13:22.820 --> 00:13:24.060
I want to put out one thing, though.

00:13:24.060 --> 00:13:29.540
The controller that we use isn't
on the seed of the Panther CD.

00:13:29.660 --> 00:13:31.500
So keep that in mind.

00:13:32.270 --> 00:13:35.580
The first demo,
we're going to build a codeless browser.

00:13:35.610 --> 00:13:38.210
That's what it's come to be called.

00:13:40.590 --> 00:13:46.380
So I'm going to launch Interface
Builder and start a new application.

00:13:48.610 --> 00:13:51.190
And you'll notice that Interface
Builder has a new palette,

00:13:51.280 --> 00:13:54.340
the WebKit palette.

00:13:54.440 --> 00:13:58.330
I'm going to place an
instance of that class,

00:13:58.450 --> 00:14:02.060
the WebView, into my window.

00:14:02.740 --> 00:14:07.600
And now I'm going to connect
a URL to this web view.

00:14:07.600 --> 00:14:18.210
Using target action and two buttons
quickly for back and forward.

00:14:24.880 --> 00:14:31.190
Give these buttons a label and connect
them again using target action.

00:14:35.850 --> 00:14:40.800
Let me set the resize
flags on these buttons.

00:14:40.860 --> 00:14:49.960
And then we will test the application
without compiling any code,

00:14:49.960 --> 00:14:51.340
without writing any code.

00:14:51.380 --> 00:15:00.180
It really is this easy-to-use web kit.

00:15:06.790 --> 00:15:12.180
So what I'd like to show you now is a
demonstration of the binder technology,

00:15:12.190 --> 00:15:15.590
which I showed you yesterday,
but it's worth a second shot.

00:15:16.410 --> 00:15:21.970
So the first thing I'm going to do is
disconnect the normal target action

00:15:22.120 --> 00:15:25.810
mechanism that we use to connect
the text field to the web view.

00:15:26.070 --> 00:15:30.540
And instead,
I'm going to use a controller,

00:15:30.560 --> 00:15:34.850
a web view controller, to bind

00:15:35.720 --> 00:15:38.720
The web view and the text field together
to the same underlying property,

00:15:38.720 --> 00:15:40.540
the mainframe URL.

00:15:40.890 --> 00:15:46.190
So when the URL changes in the web view,
it will be reflected in the text field.

00:15:46.290 --> 00:15:50.700
And to do that,
I'll use the new bindings inspector

00:15:50.800 --> 00:15:54.920
after selecting the text field.

00:15:55.660 --> 00:16:02.530
And I'll bind the value of the
text field to the mainframe URL.

00:16:03.830 --> 00:16:08.020
Now, I'd also like to enable and disable
the back/forward buttons as I navigate,

00:16:08.100 --> 00:16:11.630
and as it's appropriate to
enable and disable these buttons.

00:16:12.040 --> 00:16:17.890
So I'm going to bind or associate the
enabled property of the back button

00:16:17.970 --> 00:16:25.210
to whether or not the web view can
go back and similarly can go forward.

00:16:29.750 --> 00:16:32.240
Finally,
what I'd like to do is add a progress

00:16:32.240 --> 00:16:36.240
indicator so I can see when the
page loads and when it finishes.

00:16:36.240 --> 00:16:39.360
So let's add a progress indicator.

00:16:42.300 --> 00:16:44.860
"I'm going to size this
text field so it fits.

00:16:45.130 --> 00:16:50.610
And we'll make the progress indicator
determinate from zero to one.

00:16:51.620 --> 00:16:58.920
and bind it to the estimated
progress of the page load.

00:17:00.170 --> 00:17:02.660
Set the resize flags.

00:17:02.660 --> 00:17:03.150
That's it.

00:17:03.160 --> 00:17:06.120
Again, no code, the codeless browser.

00:17:06.390 --> 00:17:08.290
Let's go ahead and run this.

00:17:14.030 --> 00:17:16.200
Now you'll notice the back and
forward buttons are disabled,

00:17:16.300 --> 00:17:19.060
the progress indicator
shows the page load,

00:17:19.250 --> 00:17:24.390
and as I navigate,
the URL of the text field changes.

00:17:25.010 --> 00:17:29.660
So that's the quick snapshot of
how to use WebKit from Cocoa.

00:17:29.740 --> 00:17:32.820
But I've already had questions
about how do we do this from Carbon.

00:17:32.940 --> 00:17:37.370
So what I'm going to do now is show you--

00:17:37.750 --> 00:17:40.690
A couple of applications
that are already built,

00:17:40.690 --> 00:17:44.540
these applications with their
source code in their entirety are

00:17:44.540 --> 00:17:46.820
available in the SDK as examples.

00:17:46.830 --> 00:17:50.460
So the first example is an
application called Carbon Web,

00:17:50.540 --> 00:17:54.780
and this is a browser written
using the Carbon APIs.

00:17:55.380 --> 00:18:02.500
Just to show you that it is no
different than the Cocoa version,

00:18:02.500 --> 00:18:04.510
let me load a web page.

00:18:10.440 --> 00:18:12.540
Now you see it's
relatively full-featured.

00:18:12.540 --> 00:18:13.740
It has a history.

00:18:13.910 --> 00:18:16.220
It has back and forward buttons.

00:18:17.210 --> 00:18:21.330
And the final demo I'd like to show
you is another Carbon application.

00:18:21.440 --> 00:18:27.200
This uses a combination of
WebKit and new Foundation APIs to

00:18:27.200 --> 00:18:31.100
download URLs onto your desktop.

00:18:31.230 --> 00:18:33.670
Let me go ahead and load a page.

00:18:38.500 --> 00:18:50.000
[Transcript missing]

00:18:54.370 --> 00:18:57.020
Well, you'd think it was that
easy to do a web browser.

00:18:57.210 --> 00:18:58.760
We could have got Safari done sooner,
huh?

00:18:59.020 --> 00:19:01.620
Yes, those guys have been sandbagging me.

00:19:01.770 --> 00:19:02.520
All right.

00:19:02.560 --> 00:19:03.230
Richard will be back.

00:19:03.330 --> 00:19:04.890
He's here all week.

00:19:04.980 --> 00:19:10.620
And he has a session which is a lot
more in-depth on Friday morning at 9:00,

00:19:10.620 --> 00:19:11.380
right?

00:19:11.380 --> 00:19:11.380
Okay.

00:19:11.900 --> 00:19:15.360
Let's give you an overview
of the WebKit right now.

00:19:15.530 --> 00:19:18.580
First off,
I want you to look at this incredibly

00:19:18.580 --> 00:19:21.190
simple architectural diagram.

00:19:21.190 --> 00:19:24.340
But really, the WebKit is that simple.

00:19:24.340 --> 00:19:29.530
I mean, Safari sits on top of the WebKit,
and it uses the WebKit to

00:19:29.530 --> 00:19:31.410
display web content.

00:19:31.670 --> 00:19:35.050
The WebKit sits on top of
the foundation URL API,

00:19:35.180 --> 00:19:38.200
and it uses that API to load web content.

00:19:38.210 --> 00:19:41.710
I mean,
it's really not that much more complex.

00:19:41.710 --> 00:19:45.750
And Safari itself is, in a way,
just a wrapper for the WebKit.

00:19:45.780 --> 00:19:50.960
But let's focus on the WebKit for now,
and let's take a look

00:19:50.960 --> 00:19:52.200
at what's inside it.

00:19:53.610 --> 00:19:57.920
two special frameworks,
WebCore and JavaScript Core.

00:19:58.270 --> 00:20:01.410
Our two open source components,
our engine.

00:20:01.410 --> 00:20:05.820
I'd like to talk a little bit
about those at the core of WebKit.

00:20:05.910 --> 00:20:10.690
What we're doing is we're using
open source from the KDE project.

00:20:10.810 --> 00:20:17.200
Now the KDE project is a desktop
environment available on Linux and other

00:20:17.200 --> 00:20:20.940
UNIX platforms running under X Windows.

00:20:21.050 --> 00:20:24.880
And the KDE desktop has
various applications and

00:20:24.880 --> 00:20:27.070
utilities and libraries in it.

00:20:27.110 --> 00:20:31.210
And one of those applications
is the Conqueror Web Browser.

00:20:31.360 --> 00:20:39.570
And the Conqueror Web Browser uses two
libraries in KDE called KHTML and KJS.

00:20:40.360 --> 00:20:44.400
And we're using those same libraries.

00:20:44.430 --> 00:20:48.220
WebCore is basically an
adapter built on top of KHTML.

00:20:48.250 --> 00:20:55.430
KHTML is the HTML rendering portion,
and WebCore not only contains about,

00:20:55.430 --> 00:21:02.730
you know, 98% of the KHTML source,
but it also contains adapter glue code,

00:21:02.740 --> 00:21:07.660
basically to connect it to the
app kit and OS services and

00:21:07.660 --> 00:21:10.200
everything else underneath.

00:21:10.200 --> 00:21:12.030
The other framework is JavaScript Core.

00:21:12.290 --> 00:21:16.880
JavaScript Core is just basically
a thin wrapper around KJS.

00:21:16.880 --> 00:21:21.020
And JavaScript Core is a
JavaScript interpreter.

00:21:21.020 --> 00:21:26.180
It's the part that gives
dynamic content to web pages.

00:21:26.560 --> 00:21:29.270
Now we also have some other
open source components in

00:21:29.270 --> 00:21:33.310
WebCore and JavaScript Core,
including the XPAT XML parser,

00:21:33.310 --> 00:21:37.110
the PCRE regular expression library,
and believe it or not,

00:21:37.190 --> 00:21:39.040
we've even got some
Mozilla code in there.

00:21:39.190 --> 00:21:41.200
That always surprises people
when I tell them that.

00:21:41.420 --> 00:21:44.990
It's not much,
but we do have Mozilla code in there.

00:21:46.090 --> 00:21:50.640
why did we choose to do
the engine open source?

00:21:51.010 --> 00:21:54.570
Well, it's all about the technology.

00:21:54.570 --> 00:21:57.930
I mean,
open source is a great development model.

00:21:57.940 --> 00:22:01.440
You get lots of people working
for you essentially for free.

00:22:01.530 --> 00:22:05.440
You get lots of contributions from
the outside and you get synergy

00:22:05.440 --> 00:22:07.820
going with a whole community.

00:22:07.820 --> 00:22:13.160
But for us, the decision to use KHML and
KGS was a technology decision.

00:22:13.430 --> 00:22:14.440
They're that good.

00:22:14.630 --> 00:22:19.460
And I'd like right now just to tip
my hat to the KHML and KGS developers

00:22:19.460 --> 00:22:23.530
in the KDE project and thank
them for their wonderful work.

00:22:23.540 --> 00:22:26.030
We really appreciate it at Apple.

00:22:26.030 --> 00:22:30.280
Because let me drill down
on this a little deeper.

00:22:30.640 --> 00:22:31.940
It's small.

00:22:32.040 --> 00:22:37.600
KHML and KJS combined are only
about 140,000 lines of code.

00:22:37.680 --> 00:22:42.190
That's less than an order of
magnitude smaller than some other

00:22:42.190 --> 00:22:44.780
web browser engines out there.

00:22:44.820 --> 00:22:48.260
That's a lot less code.

00:22:48.510 --> 00:22:49.800
And it's fast.

00:22:50.040 --> 00:22:55.030
Not only is it fast because less
source code makes less object code,

00:22:55.040 --> 00:22:57.600
and if you execute less object code,
well, you go faster,

00:22:57.600 --> 00:23:00.550
but it's just designed to
be fast from the get-go.

00:23:00.860 --> 00:23:02.830
It's a really good design.

00:23:03.130 --> 00:23:05.840
But one of the things I really love
about it is it's easy to modify.

00:23:05.840 --> 00:23:08.680
This is a fun code base to hack.

00:23:08.790 --> 00:23:14.960
It's just very straightforward,
easy to understand, C++ code.

00:23:15.070 --> 00:23:16.550
You'd love it.

00:23:17.400 --> 00:23:20.860
So what are we doing with the community,
the open source community,

00:23:20.950 --> 00:23:22.880
with KHTML and KJS?

00:23:22.900 --> 00:23:26.510
Well, we're working with the KDE team.

00:23:26.630 --> 00:23:34.060
We've already had one transatlantic
telephone conference call with them.

00:23:34.410 --> 00:23:36.800
We're on mailing lists together.

00:23:36.810 --> 00:23:41.140
And Harry Porton, who's the lead for KJS,
has actually been out to the

00:23:41.180 --> 00:23:43.500
Cupertino campus and visited us.

00:23:43.530 --> 00:23:44.660
We know these people.

00:23:44.660 --> 00:23:48.100
We know them pretty well.

00:23:48.100 --> 00:23:48.100
They're very nice folks.

00:23:48.920 --> 00:23:53.300
We're also giving back our bug
fixes enhancements to the community.

00:23:53.300 --> 00:23:54.410
Apple is giving that back.

00:23:54.470 --> 00:23:57.500
If you noticed yesterday,
one of the other downloads you could

00:23:57.500 --> 00:24:00.860
get is you could get the latest version
of WebCore and JavaScriptCore because,

00:24:00.860 --> 00:24:01.680
hey, it's open source.

00:24:01.760 --> 00:24:03.100
Give that back.

00:24:03.180 --> 00:24:09.100
And we've actually been sending patches
along the way back to the KDE team.

00:24:09.100 --> 00:24:13.150
And we're also taking
contributions from them.

00:24:13.240 --> 00:24:17.880
Just three,
four weeks prior to us releasing 1.0,

00:24:18.240 --> 00:24:21.010
we actually took a patch
for a very small feature in

00:24:21.330 --> 00:24:24.110
KHTML itself from the KDE trunk.

00:24:25.740 --> 00:24:30.500
We're also sharing ideas and plans for
the future with the KDE developers.

00:24:30.540 --> 00:24:36.110
Like I said about our previous summit,
we're going to have another one now that

00:24:36.110 --> 00:24:41.560
the Safari team has survived Safari 1.0,
once we survived WWDC.

00:24:41.560 --> 00:24:48.540
We're planning on getting together
again and figuring out what we do next,

00:24:48.540 --> 00:24:50.230
how to split up some work,
and really take the

00:24:50.230 --> 00:24:50.230
engine toward the future.

00:24:50.530 --> 00:24:52.830
But you can contribute
too to this engine,

00:24:52.950 --> 00:24:56.420
either to our WebCore and
JavaScript Core projects,

00:24:56.420 --> 00:24:58.020
or to KHTML and KJS.

00:24:58.460 --> 00:25:02.680
We would love to see your bug
fixes and enhancements too.

00:25:04.880 --> 00:25:07.960
So,
which frameworks should you use though?

00:25:07.980 --> 00:25:10.760
I mean, 'cause I've been talking up
WebCore and JavaScript Core here,

00:25:10.800 --> 00:25:11.900
how they're great.

00:25:11.940 --> 00:25:14.960
Don't call them directly.

00:25:14.990 --> 00:25:19.410
Their internal frameworks,
their APIs are guaranteed to change.

00:25:19.420 --> 00:25:23.360
In fact, David Hiatt must have changed
them this afternoon knowing him.

00:25:23.380 --> 00:25:25.930
Don't use WebCore and JavaScript Core.

00:25:26.320 --> 00:25:27.960
Use the WebKit.

00:25:27.960 --> 00:25:34.070
The WebKit is the public API for
WebCore and JavaScript Core technology.

00:25:34.800 --> 00:25:35.960
Okay.

00:25:35.960 --> 00:25:38.320
So what does WebKit provide?

00:25:38.320 --> 00:25:41.020
Let's get back to it as a whole.

00:25:42.950 --> 00:25:47.400
Basically, the WebKit provides core
classes to display web content

00:25:47.900 --> 00:25:50.680
in Carbon and Cocoa Windows.

00:25:50.680 --> 00:25:52.870
It can display by default
MIME types like HTML,

00:25:52.870 --> 00:25:58.130
text, and images, but also things like
plugins and Java applets.

00:25:58.390 --> 00:26:01.780
It simplifies the
complicated loading process.

00:26:01.780 --> 00:26:06.860
It can request content from a server
and download that in the background and

00:26:06.910 --> 00:26:09.730
manage the delivery to your application.

00:26:09.860 --> 00:26:12.510
Plus,
it not only deals with the Internet,

00:26:12.510 --> 00:26:15.000
it can deal with local files as well.

00:26:15.220 --> 00:26:17.900
It also has a default behavior,
just like a web browser.

00:26:18.120 --> 00:26:21.950
If a user clicks on a link with the
default view you saw in Richard's demo,

00:26:21.950 --> 00:26:23.990
it just loads another page.

00:26:24.090 --> 00:26:27.210
WebKit will create and
manage all the views,

00:26:27.210 --> 00:26:32.100
destroying what it needs to,
cleaning things up behind your back.

00:26:32.100 --> 00:26:34.420
It's got you covered.

00:26:34.970 --> 00:26:36.240
So why use it?

00:26:36.370 --> 00:26:39.470
Well, many applications need
to display HTML content,

00:26:39.560 --> 00:26:41.030
not just web browsers.

00:26:41.170 --> 00:26:43.890
Certainly web content
editors for preview,

00:26:44.200 --> 00:26:47.960
but even word processors and
spreadsheets and apps that

00:26:47.960 --> 00:26:50.220
I can't even think about yet.

00:26:50.660 --> 00:26:53.550
But more importantly,
why write the code to do this yourself?

00:26:53.810 --> 00:26:58.200
I mean, it's a lot of code,
but we built it into the system.

00:26:58.200 --> 00:27:02.990
We've made sure that it's optimized,
it's fast, it's got a low footprint.

00:27:03.080 --> 00:27:06.140
It's not going to add to
your startup time to call it.

00:27:06.180 --> 00:27:08.890
It's right there at your
fingertips as developers.

00:27:11.020 --> 00:27:15.420
Another reason to use WebKit is
the fine standard support.

00:27:15.420 --> 00:27:17.900
We are fully buzzword compliant.

00:27:18.010 --> 00:27:25.900
We got your HTML4, your XHTML, your XML,
your CSS1, 2, and even some of CSS3,

00:27:25.900 --> 00:27:28.890
DOM level 0, DOM level 1, DOM level 2.

00:27:28.950 --> 00:27:32.370
I mean, even if you don't know
what all those means,

00:27:32.370 --> 00:27:34.900
it does sound impressive, I hope.

00:27:35.000 --> 00:27:42.840
We support HTTP cookies, JavaScript,
Netscape-style carbon-based plug-ins,

00:27:42.950 --> 00:27:45.810
Java applets,
secure connections over SSL,

00:27:45.890 --> 00:27:48.880
and for your text geeks out there,
we do Unicode and

00:27:48.960 --> 00:27:50.810
bidirectional layout support.

00:27:50.900 --> 00:27:55.800
So we're fully--that's a lot
of RFCs and W3C specifications

00:27:55.800 --> 00:27:57.880
I just named off there.

00:27:57.900 --> 00:28:01.900
But more importantly,
we're real-world compliant.

00:28:01.940 --> 00:28:07.050
Because the WebKit knows how to
lay out the-- the world weird web,

00:28:07.140 --> 00:28:07.900
okay?

00:28:07.900 --> 00:28:10.530
Because, you know,
I don't know if you go to some of those

00:28:10.530 --> 00:28:14.370
dark corners of the Internet where,
you know, it's just about one,

00:28:14.370 --> 00:28:17.330
two grades above line noise out there.

00:28:17.420 --> 00:28:18.440
The WebKit can handle it.

00:28:18.520 --> 00:28:23.310
It can handle that
malformed content as well.

00:28:23.710 --> 00:28:25.600
But because there's so much
of that stuff out there,

00:28:25.680 --> 00:28:28.340
we're working with the
W3C on new standards.

00:28:28.500 --> 00:28:32.700
We want to make it better for
web content developers out there.

00:28:32.840 --> 00:28:36.080
We have team members on W3C committees.

00:28:36.290 --> 00:28:38.700
We're committed to this for the future.

00:28:39.320 --> 00:28:42.040
Okay, I want to cover some
basic WebKit concepts.

00:28:42.040 --> 00:28:50.070
Four concepts: views, frames,
loading data, and delegates.

00:28:50.650 --> 00:28:52.300
Okay, first off, views.

00:28:52.540 --> 00:28:55.790
How do you embed web
content in your application?

00:28:55.870 --> 00:28:59.110
Well, you create a web view object.

00:28:59.350 --> 00:29:04.600
You attach it to a window,
and then you send its mainframe

00:29:04.660 --> 00:29:06.080
a load request message.

00:29:06.320 --> 00:29:08.150
It's that simple.

00:29:09.400 --> 00:29:12.550
WebView inherits from NSView,
just like other Cocoa views,

00:29:12.550 --> 00:29:17.400
and if you're using it from Carbon,
it acts like an HI view.

00:29:17.400 --> 00:29:18.770
It provides a no-code interface.

00:29:18.860 --> 00:29:22.980
You saw that in the
Interface Builder demo.

00:29:22.980 --> 00:29:25.510
And it has plenty of
hooks for customization,

00:29:25.510 --> 00:29:27.340
which we'll discuss shortly.

00:29:27.770 --> 00:29:36.140
A web frame encapsulates the
data displayed in a web view.

00:29:36.140 --> 00:29:39.790
Every web view has at
least one web frame.

00:29:40.130 --> 00:29:42.300
And load requests are
sent to this mainframe,

00:29:42.300 --> 00:29:44.120
as I mentioned earlier.

00:29:44.240 --> 00:29:47.600
Webframe objects are
created by the web view.

00:29:47.600 --> 00:29:50.760
It manages them all for you.

00:29:50.900 --> 00:29:55.000
And webframes can be
nested in a hierarchy,

00:29:55.000 --> 00:29:59.560
sort of like framesets
on the World Wide Web.

00:29:59.560 --> 00:30:02.990
Webview manages that,
and the root frame is

00:30:03.020 --> 00:30:04.880
called the mainframe.

00:30:04.920 --> 00:30:08.220
That's where you send
your load messages to.

00:30:08.220 --> 00:30:08.220
Loading data.

00:30:08.780 --> 00:30:12.400
Loading data into frames is
handled by two foundation classes,

00:30:12.400 --> 00:30:16.340
new foundation classes,
NSURL request and NSURL response.

00:30:16.340 --> 00:30:21.650
A request is just the URL to load
and any options on that load.

00:30:21.790 --> 00:30:24.680
Options like whether it
should use the cache,

00:30:24.730 --> 00:30:29.120
whether it should reload,
what the user agent string is,

00:30:29.120 --> 00:30:30.050
things like that.

00:30:30.340 --> 00:30:34.240
And a response is everything from
the server except the content.

00:30:34.860 --> 00:30:37.870
This is the metadata,
like the HTTP headers, you know,

00:30:37.870 --> 00:30:41.020
times and other tricky
little information there.

00:30:42.970 --> 00:30:43.860
Delegates.

00:30:43.910 --> 00:30:47.710
Now this is where I think the
real cool part of WebKit is.

00:30:47.780 --> 00:30:52.660
Delegates are how you
customize the embedded view.

00:30:52.670 --> 00:30:59.000
Think of delegates like callbacks
if you're a C programmer.

00:30:59.000 --> 00:31:03.900
Basically, excuse me,
you create a delegate object that

00:31:03.900 --> 00:31:10.160
follows an informal protocol or an
interface and you attach that object to

00:31:10.160 --> 00:31:13.500
the web view to handle things for you.

00:31:13.520 --> 00:31:16.070
There are four delegates for web views.

00:31:16.130 --> 00:31:19.500
The first one,
the web frame load delegate.

00:31:19.520 --> 00:31:22.450
This tracks changes to
what page you're on.

00:31:22.550 --> 00:31:27.760
For example, when a page starts loading,
it stops loading, it fails to load,

00:31:28.150 --> 00:31:31.660
and it tracks the
transitions between pages.

00:31:32.760 --> 00:31:35.910
The next delegate is the
Resource Load Delegate,

00:31:36.020 --> 00:31:39.280
and this tracks the loading
of sub-resources on the page,

00:31:39.380 --> 00:31:40.700
for example, images.

00:31:40.740 --> 00:31:44.830
You could create one of these delegates
if you wanted to block images,

00:31:44.830 --> 00:31:48.050
or you wanted to load a
completely different image than

00:31:48.050 --> 00:31:49.840
the one the page specified.

00:31:49.840 --> 00:31:53.230
You might implement both of
these delegates if you wanted

00:31:53.230 --> 00:31:54.850
to do progress feedback.

00:31:54.870 --> 00:31:59.220
And if you look at the source code to
one of the examples we have on the disk,

00:31:59.220 --> 00:32:01.560
that's actually what's
done for progress feedback.

00:32:01.790 --> 00:32:03.620
The third delegate is
the Policy Delegate.

00:32:03.770 --> 00:32:07.710
This handles navigation
actions like clicks and form

00:32:07.710 --> 00:32:11.170
submissions and back and forward.

00:32:11.610 --> 00:32:16.160
"And you can basically with
the policy delegate either let

00:32:16.160 --> 00:32:20.070
WebKit handle the content internally,
or maybe you want to

00:32:20.190 --> 00:32:23.000
intercept that click and say,
'I don't want to download you at all.

00:32:23.000 --> 00:32:25.290
I'm not going to allow the user
to click on that link.' Or maybe

00:32:25.290 --> 00:32:29.240
instead of loading it within your app,
you want to download it to the desktop.

00:32:29.360 --> 00:32:32.460
You could say, 'Download that,' instead
of displaying it."

00:32:32.920 --> 00:32:35.040
Then there's the Web UI delegate.

00:32:35.130 --> 00:32:40.500
That manages all window and
user interface activity.

00:32:40.500 --> 00:32:44.530
It controls the opening of windows,
and you can actually use it to

00:32:44.650 --> 00:32:48.960
control context menus as well,
like add items to context menus.

00:32:48.960 --> 00:32:52.620
And any application that's going
to handle web views in multiple

00:32:52.620 --> 00:32:55.920
windows is probably going to
want to create a Web UI delegate.

00:32:55.920 --> 00:33:00.860
Now I'd like to call Richard Williamson
back up to the stage to show

00:33:00.870 --> 00:33:03.900
you a demo of that very thing.

00:33:09.800 --> 00:33:13.580
Okay, so you see the codeless browser.

00:33:13.710 --> 00:33:14.710
Now we're going to write some code.

00:33:14.850 --> 00:33:17.660
Before we get through this
presentation without seeing any code,

00:33:17.720 --> 00:33:19.800
we have some code that we're
going to write right now.

00:33:19.800 --> 00:33:24.320
And what I'm going to do is show you

00:33:25.860 --> 00:33:31.300
In Xcode, one of the sample applications
that is on the SDK

00:33:32.190 --> 00:33:33.940
And we'll modify it.

00:33:34.170 --> 00:33:37.390
So let me first run it to
show you some of the features.

00:33:37.560 --> 00:33:42.140
Now, you'll notice that this mini
browser has a few additional

00:33:42.140 --> 00:33:44.830
features than the codeless browser.

00:33:45.190 --> 00:33:47.720
Up in the title bar,
I'm showing the number of

00:33:47.720 --> 00:33:50.820
resources that were loaded,
43 of 43.

00:33:50.910 --> 00:33:53.720
That was done using the
resource load delegate.

00:33:53.830 --> 00:33:58.850
You'll also notice that, in this case,
as I navigate,

00:34:00.210 --> 00:34:02.700
The URL does update in the text field.

00:34:02.740 --> 00:34:04.440
I didn't use the controller technology.

00:34:04.440 --> 00:34:07.100
I didn't bind the URL to this field.

00:34:07.100 --> 00:34:10.080
I used the delegate
to set that with code.

00:34:10.310 --> 00:34:12.940
I used glue code to do that.

00:34:13.080 --> 00:34:16.920
And that glue code is visible in the SDK.

00:34:17.170 --> 00:34:22.470
Now,
let me go to the New York Times site.

00:34:23.630 --> 00:34:29.140
and show you some of the built-in
context menus that the WebKit has.

00:34:29.140 --> 00:34:32.300
In this case, open, link a new window,
download to disk,

00:34:32.380 --> 00:34:34.120
and copy link to clipboard.

00:34:34.140 --> 00:34:38.470
Now, by default,
the WebKit will show this context menu,

00:34:38.480 --> 00:34:40.780
but there's no implementation behind it.

00:34:40.780 --> 00:34:44.560
It's your responsibility as a client of
WebKit to open a new window with your

00:34:44.560 --> 00:34:46.600
Chrome and your instance of WebView.

00:34:46.600 --> 00:34:48.610
In fact, it might not even be a window.

00:34:48.770 --> 00:34:51.530
You could change the title
of this context menu,

00:34:51.530 --> 00:34:54.780
and you may open a link in a tab,
for example.

00:34:54.910 --> 00:34:58.240
But in this case,
let's go ahead and try and open the link.

00:34:58.300 --> 00:34:59.150
Nothing happens.

00:34:59.160 --> 00:35:02.790
That's because the UI delegate
isn't set up to handle a new window.

00:35:05.480 --> 00:35:08.800
Let me go back to Xcode.

00:35:08.840 --> 00:35:14.100
And if I can get a handle on Xcode,
let me bring up the editor.

00:35:16.520 --> 00:35:21.040
And open up the source for the document.

00:35:21.040 --> 00:35:26.240
Now, this document is using the
NS document infrastructure.

00:35:26.360 --> 00:35:29.580
And you can see that--

00:35:29.960 --> 00:35:32.860
I'm setting up two delegates,
the Frame Load Delegate and

00:35:32.860 --> 00:35:34.600
the Resource Load Delegate.

00:35:34.600 --> 00:35:38.220
These are the two delegates that
handle showing that progress in

00:35:38.220 --> 00:35:40.200
the title and changing the URL.

00:35:40.330 --> 00:35:44.540
What I'd like to do is add a UI delegate.

00:35:44.650 --> 00:35:48.230
So I'm going to cut and paste this
code that happens to be down here,

00:35:48.230 --> 00:35:52.100
just below, and add myself.

00:35:53.480 --> 00:36:05.700
and David Levy,
I'm going to show you how to

00:36:05.810 --> 00:36:15.730
use the API for these delegates.

00:36:15.730 --> 00:36:15.730
The API for these
delegates is really rich.

00:36:15.730 --> 00:36:15.730
By default,
you don't have to implement anything.

00:36:15.730 --> 00:36:15.730
There are default behaviors for
all of the delegate mechanisms.

00:36:15.730 --> 00:36:15.730
I'm going to override one method.

00:36:15.730 --> 00:36:15.730
This is the method we
use to create a new view.

00:36:18.960 --> 00:36:23.330
So WebKit will send this
in response to a request,

00:36:23.330 --> 00:36:26.140
either from the context menu
or perhaps from JavaScript,

00:36:26.170 --> 00:36:27.640
to open a new window.

00:36:27.650 --> 00:36:32.230
And what I do here, simply,
is to use the NSDocument infrastructure

00:36:32.230 --> 00:36:36.600
to create a new document using
the standard document controller.

00:36:36.600 --> 00:36:40.690
That will open an untitled document,
which in turn will load a Nib file.

00:36:40.700 --> 00:36:44.610
That Nib file contains the web view,
that you can see I retrieved

00:36:44.610 --> 00:36:46.660
from the document down below.

00:36:46.660 --> 00:36:49.240
And then simply,
I load the request into the

00:36:49.240 --> 00:36:51.140
mainframe of that web view.

00:36:51.140 --> 00:36:53.060
That's all it takes.

00:36:53.060 --> 00:36:56.400
Let's go ahead and compile this.

00:36:56.400 --> 00:36:57.640
Yes, I'd like to save.

00:36:57.640 --> 00:37:04.400
And once it's compiled in link,
let's run it.

00:37:07.080 --> 00:37:08.160
So let's try a different site.

00:37:08.240 --> 00:37:11.600
How about Wired?

00:37:11.670 --> 00:37:12.200
OK.

00:37:12.750 --> 00:37:18.080
Now, if I bring up a context menu over a
link and open a link in a new window,

00:37:18.180 --> 00:37:19.840
I get a new window.

00:37:19.990 --> 00:37:21.590
Simple as that.

00:37:21.850 --> 00:37:22.420
That's it.

00:37:22.530 --> 00:37:25.800
So there's a lot more detail that we'll
show you on the session on Friday,

00:37:25.850 --> 00:37:28.740
but this gives you a sense of how
to use delegates in the WebKit.

00:37:28.740 --> 00:37:30.000
Thanks, Don.

00:37:30.030 --> 00:37:34.080
Don Taylor: Thank you, Richard.

00:37:35.500 --> 00:37:36.740
Oops.

00:37:36.770 --> 00:37:37.180
OK.

00:37:37.390 --> 00:37:37.900
Oops.

00:37:37.980 --> 00:37:39.340
Here we go.

00:37:39.350 --> 00:37:41.460
Click on the demo button.

00:37:41.490 --> 00:37:41.900
OK.

00:37:41.900 --> 00:37:46.500
I'd like to give you a little
overview of the Foundation API.

00:37:46.790 --> 00:37:51.030
And let's go back to one of those
simple architecture diagrams once again.

00:37:51.140 --> 00:37:54.850
Safari and WebKit at the top,
Foundation in the middle.

00:37:54.950 --> 00:37:58.140
And I just want to focus on
the fact that Foundation,

00:37:58.270 --> 00:38:02.260
the URL API, sits on top of CF Network.

00:38:02.330 --> 00:38:04.020
That's where it gets its implementation.

00:38:04.130 --> 00:38:06.630
And that sits on top of BSD Sockets.

00:38:06.700 --> 00:38:07.700
Okay.

00:38:07.700 --> 00:38:09.930
But let's focus on that API.

00:38:09.930 --> 00:38:12.680
It's a very, very simple stack,
standard stuff.

00:38:12.740 --> 00:38:13.000
Okay.

00:38:13.000 --> 00:38:14.920
So what does Foundation now provide?

00:38:14.930 --> 00:38:15.650
What have we added?

00:38:15.780 --> 00:38:17.500
URL loading, one thing.

00:38:17.500 --> 00:38:19.700
We've already talked
about that a little bit.

00:38:20.020 --> 00:38:23.580
But also content caching,
so you can get fast access to web

00:38:23.940 --> 00:38:25.600
pages and other Internet data.

00:38:25.650 --> 00:38:29.700
Cookies,
so you can do all the sorts of e-commerce

00:38:29.700 --> 00:38:31.590
and complicated web application work.

00:38:31.620 --> 00:38:35.590
Authentication,
so you can get into the site securely.

00:38:35.700 --> 00:38:37.700
And custom protocols.

00:38:37.700 --> 00:38:40.700
You can add your custom protocols now.

00:38:42.210 --> 00:38:43.560
So why use this API?

00:38:43.560 --> 00:38:46.900
Well,
the features I just mentioned before,

00:38:46.950 --> 00:38:50.620
the convenience,
because it does a lot of work for you,

00:38:50.790 --> 00:38:55.280
flexibility, much like the WebKit,
it's very, very flexible,

00:38:55.290 --> 00:38:59.500
and the performance,
even better than before.

00:38:59.640 --> 00:39:02.330
So let's talk about
the convenience first.

00:39:02.430 --> 00:39:05.700
Just like the WebKit,
the Foundation URL API has

00:39:05.700 --> 00:39:07.770
smart default behaviors.

00:39:08.090 --> 00:39:11.750
It just does the right
thing for you by default.

00:39:12.230 --> 00:39:15.130
It has automatic handling
of cache and cookies.

00:39:15.440 --> 00:39:19.190
If you're gonna write a little
command line tool to download URLs,

00:39:19.190 --> 00:39:19.890
guess what?

00:39:20.050 --> 00:39:23.260
You've got the power and
behaviors of an entire web

00:39:23.260 --> 00:39:25.080
browser behind you if you want it.

00:39:25.080 --> 00:39:28.180
Our cache works per application.

00:39:28.180 --> 00:39:30.940
You can decide where that's
stored on the system.

00:39:31.000 --> 00:39:34.240
If you don't decide,
a nice default spot is picked for you.

00:39:34.470 --> 00:39:38.180
And cookies are per
user but they're shared.

00:39:39.540 --> 00:39:45.090
I'm sorry, they're per user but they're
shared across applications.

00:39:45.340 --> 00:39:48.340
and it also has nearly automatic
handling of authentication.

00:39:48.440 --> 00:39:51.780
If you want to get basic and digest auth,
things like that,

00:39:51.780 --> 00:39:54.610
all you have to do is just
implement two callbacks,

00:39:54.610 --> 00:39:56.330
basically two delegates.

00:39:56.750 --> 00:39:59.840
For flexibility,
it has methods and delegates to

00:39:59.840 --> 00:40:02.090
control just about everything.

00:40:02.090 --> 00:40:07.320
Request options that I mentioned before,
things for reload and offline modes,

00:40:07.320 --> 00:40:09.400
you can get very clever there.

00:40:09.400 --> 00:40:12.560
You can get direct access
to the cache if you want.

00:40:12.700 --> 00:40:16.080
And if you want to get funky
with the cookie manager,

00:40:16.080 --> 00:40:20.040
you can make multiple cookie
policies just like Safari has.

00:40:20.140 --> 00:40:25.060
Always accept, always reject,
you can do an ask policy if you want.

00:40:25.100 --> 00:40:27.870
Plus,
we allow you to add custom protocols.

00:40:27.900 --> 00:40:32.770
We provide the standard HTTP, HTTPS,
FTP file,

00:40:32.770 --> 00:40:35.100
and the all-important about protocol.

00:40:35.100 --> 00:40:39.730
But you can add your own using
the same API that we've used.

00:40:40.620 --> 00:40:43.780
But the performance,
if you thought it was

00:40:43.780 --> 00:40:48.050
fast before in Jaguar,
it's even faster now.

00:40:48.260 --> 00:40:51.390
Fast URL loading is essential
to fast web browsing,

00:40:51.390 --> 00:40:53.930
and we're going to keep
making that better.

00:40:54.110 --> 00:40:56.980
So let me cover some other
Internet technologies since

00:40:56.980 --> 00:41:01.350
we've got through the WebKit and
the Foundation URL APIs that

00:41:01.350 --> 00:41:02.080
I want you to know about.

00:41:02.080 --> 00:41:04.600
And before I move on to this,
I just want to mention one of

00:41:04.630 --> 00:41:07.660
the sessions tomorrow when I was
talking about Web standards.

00:41:07.660 --> 00:41:09.930
I forgot to mention
there'll be a session,

00:41:09.930 --> 00:41:14.240
10.30 tomorrow morning,
Safari Technology and Web Standards.

00:41:14.240 --> 00:41:17.740
I have no idea what room it's in,
but John Galinzi knows.

00:41:17.740 --> 00:41:21.000
So the first technology
I want to talk about,

00:41:21.000 --> 00:41:22.360
CF networking.

00:41:23.140 --> 00:41:26.620
CF network, we like to call it all the
networking knobs and buttons.

00:41:26.620 --> 00:41:29.600
It has a nice core
foundation style C API.

00:41:29.600 --> 00:41:30.710
Don't forget about that.

00:41:30.810 --> 00:41:34.580
That's what's underneath
the foundation API.

00:41:34.580 --> 00:41:36.830
That's what foundation
is implemented on top of.

00:41:36.880 --> 00:41:42.100
It has protocol abstractions for sockets,
for HTTP, even for rendezvous.

00:41:42.100 --> 00:41:45.070
And in Panther,
we're adding DNS host resolution

00:41:45.080 --> 00:41:47.340
and support for the FTP protocol.

00:41:48.950 --> 00:41:51.100
Also, we have a Web Services API.

00:41:51.100 --> 00:41:55.510
This is how you do XML, RPC,
and SOAP on Mac OS X.

00:41:55.990 --> 00:41:59.550
And in Panther,
we're adding a server-side API.

00:42:00.360 --> 00:42:03.470
Also Sherlock,
the easy way to deliver platform

00:42:04.280 --> 00:42:05.970
compelling web services.

00:42:06.070 --> 00:42:10.620
I like to call it web
services for the rest of us.

00:42:10.640 --> 00:42:12.750
What's new in Panther?

00:42:12.830 --> 00:42:16.840
We've added a channel browser
like Safari Bookmarks.

00:42:16.890 --> 00:42:18.320
It's a whole organizer.

00:42:18.320 --> 00:42:21.690
Not only does it contain
the standard Apple channels,

00:42:21.710 --> 00:42:25.150
but it can contain your
third-party channels.

00:42:25.150 --> 00:42:29.350
We've created also a new easy
channel submission mechanism.

00:42:29.510 --> 00:42:32.750
We think this will give you
high visibility for your

00:42:32.750 --> 00:42:34.280
web service in Sherlock.

00:42:36.000 --> 00:42:38.830
We've also improved
performance dramatically.

00:42:38.980 --> 00:42:40.820
Faster launch and channel switching.

00:42:40.890 --> 00:42:42.030
It's very peppy.

00:42:42.400 --> 00:42:46.660
And we have a new standards-compliant
XQuery engine that's two to three

00:42:47.110 --> 00:42:49.400
times faster than the one in Jaguar.

00:42:51.090 --> 00:42:55.360
Okay, let me cover just very quickly
some other technologies that

00:42:55.390 --> 00:42:57.500
maybe you shouldn't use anymore.

00:42:57.660 --> 00:43:00.500
These are no longer
under active development.

00:43:00.650 --> 00:43:02.160
HTML rendering lib?

00:43:02.530 --> 00:43:03.010
No.

00:43:03.580 --> 00:43:04.450
Use the WebKit.

00:43:04.580 --> 00:43:08.240
That's why we put out
the whole Safari SDK.

00:43:08.300 --> 00:43:11.330
NSURL handle,
while it still works and has

00:43:11.330 --> 00:43:15.280
been reimplemented on top
of the new Foundation APIs,

00:43:15.280 --> 00:43:17.620
it's not where the future is.

00:43:17.800 --> 00:43:21.010
URL Access Manager, please say no.

00:43:21.160 --> 00:43:25.290
Please use CF Network for some of
the low-level operations and the new

00:43:25.380 --> 00:43:28.280
Foundation URL APIs for everything else.

00:43:28.340 --> 00:43:32.280
Also, Internet Config,
you don't really need to use it anymore.

00:43:32.420 --> 00:43:39.370
Launch Services can set up
those helper applications,

00:43:39.520 --> 00:43:40.540
and System Config can be used
for just about everything else.

00:43:40.900 --> 00:43:43.960
Okay, in summary,
just to make sure everybody

00:43:43.960 --> 00:43:48.640
got it or they came in late,
don't forget the WebKit can put a

00:43:48.870 --> 00:43:54.720
browser view in your application,
and Foundation now has upgraded

00:43:54.720 --> 00:43:56.960
URL APIs at your disposal.

00:43:56.960 --> 00:44:02.240
So please create some great applications
using these technologies for Mac OS X,

00:44:02.240 --> 00:44:04.720
things nobody has ever seen before.

00:44:04.720 --> 00:44:07.240
That's what will really
thrill the Safari and the

00:44:07.240 --> 00:44:09.010
Internet Technologies teams.

00:44:09.040 --> 00:44:11.800
Thank you very much,
and I'd like to bring

00:44:11.800 --> 00:44:14.250
John Galinzi back for the wrap-up.

00:44:14.340 --> 00:44:16.120
John.

00:44:20.200 --> 00:44:22.160
Thanks Don.

00:44:22.160 --> 00:44:25.270
Why don't we call the Q&A panel up while
we're getting-- The road map there?

00:44:25.320 --> 00:44:25.590
Yeah.

00:44:25.660 --> 00:44:25.970
OK.

00:44:26.200 --> 00:44:27.580
But while we're going
through the road map.

00:44:27.730 --> 00:44:28.510
Q&A folks?

00:44:28.550 --> 00:44:29.020
All right.

00:44:29.020 --> 00:44:32.880
So for the benefit of those who would
be watching this session on DVD someday,

00:44:33.170 --> 00:44:35.820
there was a session this morning,
open source at Apple.

00:44:35.820 --> 00:44:38.260
There's a pile of other sessions
that are coming up later this

00:44:38.310 --> 00:44:41.840
week or later today related to
internet technologies at Apple.

00:44:41.840 --> 00:44:44.720
So Safari Technologies and
Advanced Foundation URL,

00:44:44.750 --> 00:44:48.800
Advanced Webkit APIs later on this week.

00:44:49.760 --> 00:44:54.100
Delivering web services
using Sherlock channels.

00:44:54.100 --> 00:44:55.580
And then overview of networking APIs.

00:44:55.620 --> 00:44:58.940
So it's really important in
the age of Panther to make the

00:44:59.040 --> 00:45:02.110
right networking API choices,
as well as a variety

00:45:02.110 --> 00:45:03.620
of other API choices.

00:45:03.750 --> 00:45:11.010
There are the right APIs to choose
and the wrong APIs to choose nowadays.

00:45:11.010 --> 00:45:11.800
So a lot of these sessions are
going to be great for giving

00:45:11.800 --> 00:45:11.800
you that kind of guidance.

00:45:13.710 --> 00:45:17.410
And finally,
if there's any feedback you have on

00:45:17.410 --> 00:45:22.510
the APIs related to Foundation URLs or
WebKit or anything you've heard in this

00:45:22.510 --> 00:45:27.570
session that you want more information
about or working with Apple on the

00:45:27.670 --> 00:45:32.600
Safari technology side of the house,
feel free to send me an email,

00:45:32.600 --> 00:45:32.600
and I'll get you plugged
into the right people.