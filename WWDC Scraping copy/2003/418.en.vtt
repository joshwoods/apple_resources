WEBVTT

00:00:26.280 --> 00:00:29.950
Hello, hello, welcome, session 418,
as we say,

00:00:30.090 --> 00:00:35.470
Internet Technologies Advanced Foundation
URL.

00:00:35.700 --> 00:00:39.640
This week, here at the conference,
we've introduced a new URL loading

00:00:39.640 --> 00:00:42.580
API that's going to be in Foundation.

00:00:42.650 --> 00:00:45.220
I expect probably a lot of you
have heard something about it.

00:00:45.220 --> 00:00:49.200
Well, you're going to be hearing a lot
more about it in this session,

00:00:49.200 --> 00:00:49.980
of course.

00:00:49.980 --> 00:00:52.960
And yes, so there's sort of,
I guess you'd say good news and bad news.

00:00:52.960 --> 00:00:55.180
The good news is I think you're
really going to like this API.

00:00:55.180 --> 00:00:57.720
Sort of the bad news is, well,
there are some new things that maybe

00:00:57.720 --> 00:01:00.950
you're going to need to learn about,
new classes, new APIs,

00:01:00.950 --> 00:01:04.390
but there are really also some new
features which I think you'll find

00:01:04.720 --> 00:01:08.210
interesting and useful to you,
disk caching, cookies, authentication,

00:01:08.210 --> 00:01:09.510
a couple of more things.

00:01:09.510 --> 00:01:13.050
And we'll be talking about these
in the whole rest of the session.

00:01:13.050 --> 00:01:15.340
Until what?

00:01:17.500 --> 00:01:19.600
Oh, yeah, I do.

00:01:19.660 --> 00:01:22.640
OK, so URL loading.

00:01:22.790 --> 00:01:25.900
We're going to be talking
a lot about URL loading.

00:01:25.980 --> 00:01:27.770
So what do I mean when I say URL loading?

00:01:28.020 --> 00:01:31.370
Well,
let's maybe do a little bit of history.

00:01:31.390 --> 00:01:36.450
First of all, I'd like to ask you,
how many of you are Mac old-timers,

00:01:36.450 --> 00:01:37.760
real veterans?

00:01:37.760 --> 00:01:39.390
I see a couple hands.

00:01:39.390 --> 00:01:41.440
Oh, a bunch of hands go up.

00:01:41.440 --> 00:01:42.650
Well, great.

00:01:42.650 --> 00:01:44.400
Well, then probably you remember
loading URLs like this.

00:01:45.810 --> 00:01:47.440
No, well, maybe not.

00:01:47.480 --> 00:01:51.100
And, well, I also want to say, you know,
this is a doc, right?

00:01:51.130 --> 00:01:54.840
Well, Steve Jobs is not the only
one who's going to do doc

00:01:54.840 --> 00:01:57.280
minimization tricks there.

00:01:59.740 --> 00:02:00.800
These are the jokes, people.

00:02:00.800 --> 00:02:06.780
Well, of course, all kidding aside,
everyone knows that this

00:02:06.780 --> 00:02:08.240
is the way we load URLs,
right?

00:02:08.260 --> 00:02:10.460
No, no, maybe not.

00:02:10.540 --> 00:02:10.900
Well, okay.

00:02:10.900 --> 00:02:15.680
So getting back to the real material,
of course, these are a bunch of URLs.

00:02:15.680 --> 00:02:17.200
This is what we're going
to be talking about today.

00:02:17.200 --> 00:02:19.670
This is sort of the level of
networking that we're going

00:02:19.670 --> 00:02:22.060
to be talking about today,
really the level of the URL.

00:02:22.060 --> 00:02:25.680
So if you have a URL and
you want to use this API,

00:02:25.680 --> 00:02:28.380
well, the thing you're going to have is,
the thing you're going to

00:02:28.380 --> 00:02:30.780
use is for you have the URL,
you want the data, well,

00:02:30.780 --> 00:02:32.060
this is the API for you.

00:02:32.060 --> 00:02:33.660
So you start off with the URL.

00:02:33.660 --> 00:02:36.210
This API will help you go
out to the origin source,

00:02:36.310 --> 00:02:40.780
whether that be a network, file system,
what have you, and get you back the data.

00:02:40.780 --> 00:02:44.300
So if you're a framework developer,
an application developer,

00:02:44.300 --> 00:02:48.580
this URL loading API is something
I think you're going to be pretty,

00:02:48.580 --> 00:02:49.530
pretty interested in.

00:02:50.950 --> 00:02:53.200
And so you might ask, well, why?

00:02:53.270 --> 00:02:54.900
Why a new API?

00:02:55.130 --> 00:02:59.180
You see, if you go out on Mac OS X, well,
there are many,

00:02:59.450 --> 00:03:02.310
many APIs for URL loading, right?

00:03:05.210 --> 00:03:06.940
: Cyberdog, no.

00:03:06.940 --> 00:03:09.010
Sorry,
I've got a five-year-old that one of

00:03:09.010 --> 00:03:11.320
these things is not like the other.

00:03:11.320 --> 00:03:15.360
Well, of course,
URL Access Manager and Carbon for that.

00:03:15.450 --> 00:03:21.700
Well, again, we have many, many APIs,
but there's really,

00:03:21.960 --> 00:03:27.880
even though we have all of those,
there is one big reason for

00:03:27.880 --> 00:03:27.880
developing a new URL loading API,
and of course, that's Safari.

00:03:28.180 --> 00:03:30.570
Um,
and when we started developing Safari,

00:03:30.580 --> 00:03:33.100
it's just about two years ago now, um,
well,

00:03:33.100 --> 00:03:37.730
one of the first things we realized is,
well, with Web Browser URL loading, it's,

00:03:37.730 --> 00:03:38.840
it's pretty complex.

00:03:39.040 --> 00:03:41.550
I mean,
there's a lot of things that you have to

00:03:41.550 --> 00:03:45.850
do in order to work like a Web Browser in
the way that people have come to expect.

00:03:46.080 --> 00:03:48.650
And, and really,
it has to just work all the time.

00:03:48.740 --> 00:03:51.960
There's not, there's not many, uh,
people don't have a,

00:03:51.960 --> 00:03:55.530
a lot of patience for a Web Browser
that doesn't get them through to

00:03:55.530 --> 00:03:58.080
the places where they want to go.

00:03:58.100 --> 00:04:00.930
So it has to just work.

00:04:01.400 --> 00:04:04.940
And so when we started Safari, well,
we knew the URL loading requirements.

00:04:05.050 --> 00:04:07.460
Well, it had to support a
world-class web browser.

00:04:07.460 --> 00:04:10.300
That was our goal right from
the beginning with Safari,

00:04:10.300 --> 00:04:13.660
is that this was going to be a
web browser that everybody on

00:04:13.660 --> 00:04:15.650
the Mac was going to want to use.

00:04:15.750 --> 00:04:18.940
And so in order to get there,
we had a short list of things that

00:04:18.940 --> 00:04:22.130
we were going to try to-- targets
we were going to try to hit.

00:04:22.250 --> 00:04:24.140
And I'll just go over these briefly.

00:04:24.140 --> 00:04:26.260
Naturally,
standards compliance is a big one.

00:04:26.260 --> 00:04:32.820
There's a very, very long list of RFCs
related to web technologies.

00:04:32.880 --> 00:04:38.210
Naturally, the HTTP RFCs figures very,
very prominently for web browsers.

00:04:38.220 --> 00:04:40.990
So we have to implement that.

00:04:41.100 --> 00:04:44.500
But then, of course,
out on the real world internet, well,

00:04:44.500 --> 00:04:48.660
not every site is going to implement
every standard to the letter.

00:04:48.750 --> 00:04:53.200
So we had to make sure that Safari would
interoperate with all of these sites.

00:04:53.260 --> 00:04:56.260
Because people-- people want
to go-- go to these sites.

00:04:56.370 --> 00:04:58.240
So we have to make sure that
we can get through there.

00:04:58.300 --> 00:05:00.650
And of course,
there are some real details once

00:05:00.680 --> 00:05:03.450
you get down to URL loading above
and beyond things like you have

00:05:03.540 --> 00:05:05.220
to do in WebKit and so forth.

00:05:05.300 --> 00:05:08.420
And so we wanted to make sure that
we had both standards compliance

00:05:08.550 --> 00:05:09.960
and real world compliance.

00:05:10.040 --> 00:05:13.790
And then there were features,
things that none of those other APIs that

00:05:13.790 --> 00:05:18.520
I listed before really were going to
deliver for us as they stood right there.

00:05:18.520 --> 00:05:21.300
Things like caching and cookies,
things I'll be talking

00:05:21.300 --> 00:05:22.860
about a little bit later.

00:05:22.950 --> 00:05:23.660
And then, of course, there's the issue.

00:05:23.680 --> 00:05:24.700
There's the issue of performance.

00:05:24.700 --> 00:05:28.900
We wanted to make sure that URL loading
and that the browser was really,

00:05:28.900 --> 00:05:29.900
really fast.

00:05:29.910 --> 00:05:32.510
And if I go back to the
beginning of the Safari project,

00:05:32.600 --> 00:05:36.060
well, when I started on this project,
I knew how to use a web browser.

00:05:36.080 --> 00:05:38.340
But I certainly didn't
know how to write one.

00:05:38.350 --> 00:05:43.060
And the first thing that I ever learned
about web browsers was this here.

00:05:43.060 --> 00:05:46.880
If you want to make a fast web browser,
you have to have fast URL loading.

00:05:47.160 --> 00:05:50.540
Nothing else matters if
you don't get this right.

00:05:50.560 --> 00:05:52.120
And that was told to me by Don Melton.

00:05:52.120 --> 00:05:53.420
You may have seen his talk.

00:05:53.430 --> 00:05:55.230
I think it was on Tuesday.

00:05:55.360 --> 00:05:58.140
He was the first manager
of the Safari team.

00:05:58.140 --> 00:06:01.300
And so this was where
I came into the project.

00:06:01.300 --> 00:06:03.020
And this is what I started doing.

00:06:03.110 --> 00:06:06.480
And we figured that while we were at it,
while we were making sure that

00:06:06.480 --> 00:06:09.020
we had this good performance and
the features and the standards

00:06:09.020 --> 00:06:12.540
compliance and so forth,
if we go one step further and

00:06:12.810 --> 00:06:16.200
hone those APIs a little bit,
make sure there are no

00:06:16.200 --> 00:06:19.630
WebKit dependencies,
no GUI dependencies, and so forth,

00:06:19.630 --> 00:06:23.180
a couple of other goals we had,
that we could have a podcast.

00:06:23.180 --> 00:06:28.170
a public API usable outside
of Safari to do URL loading.

00:06:28.570 --> 00:06:31.840
And so that's what we did.

00:06:32.220 --> 00:06:36.140
And just to get back to this
performance issue again,

00:06:36.210 --> 00:06:40.030
we really do think that it
turned out and that it was fast.

00:06:40.140 --> 00:06:41.640
And I think you see that in Safari.

00:06:41.640 --> 00:06:46.020
As a matter of fact,
I think it turned out to be really fast,

00:06:46.020 --> 00:06:49.980
to the point where I'm sure
you probably saw the keynote,

00:06:50.120 --> 00:06:52.880
and you saw the G5,
and some of the great new

00:06:52.880 --> 00:06:53.940
technology that's in there.

00:06:53.940 --> 00:06:57.900
Well, this API is so fast that we
had some cooling concerns.

00:06:57.900 --> 00:07:04.780
And so we wound up dividing Safari up
into four different thermal zones.

00:07:09.910 --> 00:07:11.320
So you're going to go home and
you're not going to know which

00:07:11.320 --> 00:07:14.370
part of this presentation is the
real stuff and which are the jokes.

00:07:14.500 --> 00:07:14.900
Yeah.

00:07:14.980 --> 00:07:18.090
Well, anyway, back to the real stuff.

00:07:19.050 --> 00:07:21.890
So we think this
API really does work great.

00:07:22.010 --> 00:07:22.350
We do.

00:07:22.700 --> 00:07:25.900
We use it in Safari,
and now we want you to use it too.

00:07:25.900 --> 00:07:28.760
So that's at this developer conference
we're going to be making this available.

00:07:28.810 --> 00:07:32.730
So my job now for the rest of this
time is to convince you that it's

00:07:32.730 --> 00:07:34.890
something that you want to use.

00:07:35.250 --> 00:07:37.560
and whether or not you
should be interested.

00:07:37.660 --> 00:07:40.820
And so who should be
interested in this API?

00:07:40.820 --> 00:07:43.290
Well,
this API is for you if you load URLs.

00:07:43.300 --> 00:07:47.770
If not, well,
you can probably fall asleep.

00:07:47.780 --> 00:07:49.700
I mean, you may anyway by the
time things are over.

00:07:49.700 --> 00:07:52.740
But really, of course,
loading URLs is a real prerequisite.

00:07:52.740 --> 00:07:55.500
But then again,
if you develop frameworks, applications,

00:07:55.500 --> 00:07:57.760
this API is really for you.

00:07:57.760 --> 00:07:59.630
I think it will be suitable for you.

00:07:59.880 --> 00:08:01.200
And here's a key point.

00:08:01.200 --> 00:08:05.320
If you value features more than details,
if you're going to be interested

00:08:05.410 --> 00:08:08.240
in every little socket option,
every little bit that's

00:08:08.420 --> 00:08:11.380
coming over the network,
this may not be the right

00:08:11.380 --> 00:08:13.510
level for you in the stack.

00:08:13.610 --> 00:08:16.450
You may want to get down
maybe a little bit lower on.

00:08:16.810 --> 00:08:20.710
But as I said before,
if you have a URL and you want

00:08:20.710 --> 00:08:23.480
to get the data and you don't
want to do a lot of extra work,

00:08:23.600 --> 00:08:25.970
you want it to work correctly,
but you don't want to

00:08:25.970 --> 00:08:27.980
do a lot of extra work,
I think this API is something

00:08:27.980 --> 00:08:29.150
you might be interested in.

00:08:29.410 --> 00:08:34.130
And then the last point there is
whether you use Objective-C or C,

00:08:34.130 --> 00:08:40.140
C++, sort of both the Cocoa and
Carbon developers should

00:08:40.240 --> 00:08:42.040
find this API useful.

00:08:42.040 --> 00:08:47.080
And I want to go and say yes, yes, C,
C++, Carbon developers,

00:08:47.080 --> 00:08:48.940
you can use this API.

00:08:48.940 --> 00:08:50.400
I won't lie to you.

00:08:50.400 --> 00:08:52.420
The new API is in Objective-C.

00:08:52.420 --> 00:08:56.470
But there is no technical barrier
to using this in your program.

00:08:56.480 --> 00:08:58.640
You will need to write
a little bit of glue.

00:09:00.140 --> 00:09:03.960
But here's my advice on this subject,
is that if you like the features,

00:09:04.040 --> 00:09:07.440
if I do a good enough job convincing
you that the features and the

00:09:07.440 --> 00:09:10.210
API is something you want to use,
just link with

00:09:10.210 --> 00:09:12.180
Foundation and start coding.

00:09:12.230 --> 00:09:17.760
And the good thing is in the WebKit SDK,
which you can download through ADC,

00:09:17.760 --> 00:09:21.220
there is example code in there
which will show you how to do

00:09:21.470 --> 00:09:23.130
this from a Carbon program.

00:09:23.190 --> 00:09:25.900
I even have a demo a little bit later,
which I'll be showing you briefly.

00:09:25.900 --> 00:09:28.420
But of course, to really get into it,
you're going to need to go and

00:09:28.420 --> 00:09:32.090
look at that code in the SDK.

00:09:32.710 --> 00:09:35.120
And so,
any time that a new API is announced

00:09:35.120 --> 00:09:37.780
and one that affects others,
I mean, I can,

00:09:37.800 --> 00:09:39.740
I've been in your position before.

00:09:39.890 --> 00:09:44.600
I mean, the question you ask, well,
what changes and what stays the same?

00:09:44.600 --> 00:09:46.750
So let's go through that a little bit.

00:09:47.090 --> 00:09:51.330
The URL loading API for Safari moves
down into the Foundation framework,

00:09:51.440 --> 00:09:51.870
okay?

00:09:52.030 --> 00:09:54.850
And it's now called
Foundation URL Loading API.

00:09:54.850 --> 00:09:58.700
I think, you know, heard that turn of
phrase quite a few times,

00:09:58.700 --> 00:09:59.520
okay?

00:10:00.480 --> 00:10:03.940
There's also another existing
API in Foundation to load URLs,

00:10:04.010 --> 00:10:07.050
NSURL Handle,
and that's superseded but supported.

00:10:07.130 --> 00:10:09.740
So if you're using
NSURL Handle now in your code,

00:10:09.870 --> 00:10:12.690
that code will continue to
work without any change.

00:10:12.690 --> 00:10:14.600
You don't need to do anything.

00:10:14.600 --> 00:10:17.490
However, for new code,
we suggest if NSURL Handle was

00:10:17.980 --> 00:10:21.500
something that was attractive to you,
I want to convince you to use the

00:10:21.500 --> 00:10:24.120
API we'll be talking about today instead.

00:10:24.120 --> 00:10:25.390
Okay.

00:10:26.230 --> 00:10:30.390
There's also a number of
existing conveniences in

00:10:30.610 --> 00:10:33.450
Foundation having to do with NSURL.

00:10:33.870 --> 00:10:35.960
If you have an NSURL and you
want to get the data for that,

00:10:35.960 --> 00:10:37.850
well, those are still fully supported.

00:10:37.860 --> 00:10:43.310
And one of the things that we're
doing-- this is sort of still in

00:10:43.310 --> 00:10:49.670
progress-- we're re-implementing
the internals on top of the new API.

00:10:49.670 --> 00:10:49.840
I think if we do our job right,
this will be done for Panther release.

00:10:54.340 --> 00:10:56.840
And as Stream and
Foundation is another API,

00:10:56.840 --> 00:10:58.950
I was just of course
introduced to this conference,

00:10:59.100 --> 00:11:00.600
that's still fully supported.

00:11:00.630 --> 00:11:02.650
As is CF Stream, still fully supported.

00:11:02.700 --> 00:11:04.490
But of course,
those two APIs are sort of a

00:11:04.500 --> 00:11:06.760
little bit lower in the stack.

00:11:06.820 --> 00:11:11.400
And they're not going to have the same
features like I'll be talking about.

00:11:11.470 --> 00:11:14.220
However,
they do give you more control in return.

00:11:14.320 --> 00:11:16.060
And so that'll be really
up to you to decide.

00:11:16.060 --> 00:11:17.360
They're still fully supported.

00:11:17.390 --> 00:11:19.450
As is CF Network,
it's sort of the same idea.

00:11:19.460 --> 00:11:23.710
You'll get some more protocol support
in CF Network if you want to maybe

00:11:23.960 --> 00:11:26.260
have more control over threading,
that sort of thing.

00:11:26.260 --> 00:11:27.960
Again, a lower level API.

00:11:27.980 --> 00:11:29.950
Use it if that's where you
want to come into the stack.

00:11:30.070 --> 00:11:31.300
Still fully supported.

00:11:31.320 --> 00:11:34.190
As a matter of fact, I should mention,
Foundation URL Loading API uses

00:11:34.190 --> 00:11:35.940
CF Network extensively.

00:11:35.960 --> 00:11:37.880
And so this is still good APIs.

00:11:37.960 --> 00:11:39.720
But again,
it's still a matter of leveling,

00:11:39.720 --> 00:11:41.080
where you are in the stack.

00:11:41.110 --> 00:11:44.600
URL Access Manager in Carbon, however--

00:11:44.960 --> 00:11:48.660
Even though it's still available to you,
it's not being removed from the API,

00:11:48.660 --> 00:11:50.490
removed from the system.

00:11:50.740 --> 00:11:53.040
However,
it's no longer in active development.

00:11:53.120 --> 00:11:57.450
And I'd probably refer you to the DVDs.

00:11:57.530 --> 00:12:00.390
There was a networking overview
this morning where Becky Wilrich

00:12:00.470 --> 00:12:05.120
talked a little bit more about
transitioning off old APIs.

00:12:05.120 --> 00:12:08.380
So you may want to look in your book
and look in your DVDs and see a little

00:12:08.380 --> 00:12:10.780
bit more information about that.

00:12:10.910 --> 00:12:12.960
And of course,
you can still do it yourself.

00:12:13.040 --> 00:12:16.850
I mean, if you want to do sockets
and go down to that level,

00:12:16.850 --> 00:12:17.320
you can.

00:12:17.320 --> 00:12:18.920
But that's a lot of work.

00:12:18.980 --> 00:12:21.340
Again, if you have a URL and
what you want the data,

00:12:21.340 --> 00:12:23.410
that's really,
really going to be a lot of work for you.

00:12:23.700 --> 00:12:24.520
And I don't suggest that.

00:12:24.550 --> 00:12:28.020
Instead, I would suggest the
foundation URL loading API.

00:12:28.020 --> 00:12:31.160
It's my talk,
so I get the big check mark.

00:12:32.850 --> 00:12:37.720
Again, if you have a URL,
you want the data, you like the features,

00:12:37.720 --> 00:12:40.510
and you don't want to
write a lot of code,

00:12:40.580 --> 00:12:43.420
this is probably going
to be the API for you.

00:12:43.560 --> 00:12:46.120
What are the pieces of this API?

00:12:46.300 --> 00:12:48.240
What are the components?

00:12:48.490 --> 00:12:52.790
What is the feature set?

00:12:53.020 --> 00:12:57.130
And so naturally, the first part of it,
naturally it's a URL loading API,

00:12:57.260 --> 00:12:59.710
so a very,
very big part of it is URL loading.

00:12:59.810 --> 00:13:03.030
But then there's also these
other pieces which round out that

00:13:03.350 --> 00:13:06.720
feature set and hopefully will
make this API very convenient,

00:13:06.820 --> 00:13:09.860
easy for you to use,
and give you the right combination

00:13:09.880 --> 00:13:11.430
of power and simplicity.

00:13:11.430 --> 00:13:16.100
And we'll be stepping through these
and doing some good detail about those.

00:13:16.710 --> 00:13:19.740
So getting into that, this first piece,
URL loading,

00:13:19.740 --> 00:13:24.390
this is really the basic building blocks
of all of those other pieces on that

00:13:24.390 --> 00:13:27.150
bottom half of that previous slide.

00:13:27.150 --> 00:13:30.990
So if we go back to that there, right,
URL loading is the building blocks for

00:13:31.140 --> 00:13:33.180
all of those pieces under the break.

00:13:33.280 --> 00:13:36.400
So I just want to sort of give us
a good grounding and talk about

00:13:36.830 --> 00:13:38.400
this URL loading piece first.

00:13:38.400 --> 00:13:41.960
There are some then
components in URL loading.

00:13:42.030 --> 00:13:44.700
The concepts I'm going
to talk about first,

00:13:44.840 --> 00:13:46.620
and we'll talk about how that
really fits into the API.

00:13:46.640 --> 00:13:50.890
We have request, response, connection,
and delegate callbacks.

00:13:50.970 --> 00:13:54.210
You'll be seeing this again and
again and again throughout the talk.

00:13:54.370 --> 00:13:56.880
So these are things we really
want to get a good hold on.

00:13:56.940 --> 00:14:00.010
So URL loading, begin with request.

00:14:00.010 --> 00:14:01.140
What is a request?

00:14:01.310 --> 00:14:05.200
Well, a request is a URL plus
load-specific data.

00:14:05.200 --> 00:14:08.950
So you have a URL, you want to load it,
but you want to specify

00:14:08.990 --> 00:14:10.700
how it should be loaded.

00:14:10.700 --> 00:14:13.150
So for instance,
you may want to bypass the cache,

00:14:13.270 --> 00:14:16.240
go back to the origin server,
pull that data down freshly.

00:14:16.970 --> 00:14:24.620
You may want to add a custom HTTP user
agent or other HTTP parameters.

00:14:24.620 --> 00:14:32.950
This would be the place where you would
do that in this NSURL request object.

00:14:33.120 --> 00:14:37.380
So again,
request is a URL plus load-specific data.

00:14:37.380 --> 00:14:40.110
Then we have a response,
and a response gives you

00:14:40.570 --> 00:14:42.040
everything but the data.

00:14:42.040 --> 00:14:46.160
And so when you send a request out,
you're going to get this response back.

00:14:46.260 --> 00:14:46.620
You're going to get a response back.

00:14:46.640 --> 00:14:49.770
You're going to be getting data,
of course, but you're also going to be

00:14:49.960 --> 00:14:52.700
getting interesting metadata
that your application is probably

00:14:52.700 --> 00:14:54.440
going to be pretty interested in.

00:14:54.530 --> 00:14:59.340
Things like MIME type, content length,
or then HTTP-specific information,

00:14:59.520 --> 00:15:02.810
like whether or not the data
should be cached or not.

00:15:02.920 --> 00:15:06.660
And this is how you get
this delivered to your code.

00:15:06.900 --> 00:15:10.240
And NSURL response,
we have a class in the API for this.

00:15:10.280 --> 00:15:11.490
Thank you.

00:15:12.240 --> 00:15:13.200
Okay, connection.

00:15:13.200 --> 00:15:17.140
A connection is a handle to an
asynchronous load in progress.

00:15:17.150 --> 00:15:20.110
So, if you have a request,
you can create a connection

00:15:20.580 --> 00:15:22.320
with it and start your load.

00:15:22.470 --> 00:15:24.570
It turns out that request is reusable.

00:15:24.600 --> 00:15:29.230
You can go and create a request,
create a connection with it,

00:15:29.230 --> 00:15:31.380
go back and modify that request again.

00:15:31.380 --> 00:15:33.880
Once you start your connection, though,
that request is yours.

00:15:33.880 --> 00:15:36.600
You can modify it, change the URL,
change some of the settings,

00:15:36.820 --> 00:15:38.860
and use it again to
create another connection.

00:15:38.860 --> 00:15:39.720
Okay?

00:15:39.720 --> 00:15:44.520
And so that turns out to be really,
really convenient in real code.

00:15:44.520 --> 00:15:47.600
It may seem like a small point now,
but it really is really very,

00:15:47.680 --> 00:15:48.520
very convenient.

00:15:48.600 --> 00:15:53.610
And so, as I say, connection uniquely
identifies a particular load,

00:15:53.610 --> 00:15:56.760
a particular request you're sending out.

00:15:56.870 --> 00:16:00.420
And since this loading
happens asynchronously,

00:16:00.710 --> 00:16:03.660
this connection gives you
a handle for canceling,

00:16:03.750 --> 00:16:06.240
in case you want to stop
it before it's all done.

00:16:06.490 --> 00:16:09.240
And we have a class for this,
NSURL connection.

00:16:09.240 --> 00:16:09.310
Amen.

00:16:11.020 --> 00:16:14.060
And so this last piece in this
first set of building blocks

00:16:14.060 --> 00:16:15.920
is these delegate callbacks.

00:16:16.020 --> 00:16:19.260
Well, so you've got a request,
you create a connection,

00:16:19.480 --> 00:16:20.360
your load begins.

00:16:20.600 --> 00:16:23.180
Well, interesting things are
going to start to happen.

00:16:23.260 --> 00:16:25.570
You're maybe going to be
getting your response back,

00:16:25.570 --> 00:16:27.700
some data is going to come in,
and so forth.

00:16:27.780 --> 00:16:31.700
Well, the way that we deliver that
to your application is with

00:16:31.700 --> 00:16:33.640
these delegate callbacks.

00:16:33.800 --> 00:16:37.350
And so this is for informing
you about interesting events

00:16:37.880 --> 00:16:40.710
and not only informing you,
but giving you, in many cases,

00:16:40.910 --> 00:16:43.640
a chance to take action in your program.

00:16:43.690 --> 00:16:46.310
This is a very,
very important hook for adding that

00:16:46.680 --> 00:16:51.340
application-specific behavior so that
your app can act like it needs to.

00:16:51.370 --> 00:16:54.590
OK, and some examples of this is, again,
you've got the response,

00:16:54.720 --> 00:16:59.280
you've got some data delivered to you,
and your load was finished.

00:16:59.930 --> 00:17:03.080
And so we have NSURL Connection Delegate.

00:17:03.080 --> 00:17:05.000
This is an informal protocol.

00:17:05.400 --> 00:17:06.750
You implement in your app.

00:17:06.810 --> 00:17:11.240
You choose out some of
these delegate callbacks.

00:17:11.340 --> 00:17:13.340
And you implement them,
and you'll get the callbacks

00:17:13.340 --> 00:17:14.500
when those events happen.

00:17:14.590 --> 00:17:17.390
Again, I just touched on it
briefly a moment ago,

00:17:17.390 --> 00:17:21.710
but it's important to mention that
these delegate callbacks are optional.

00:17:22.100 --> 00:17:25.560
There's really quite a nice list of them.

00:17:25.640 --> 00:17:28.290
However, in your program,
you only need to implement the

00:17:28.290 --> 00:17:32.880
ones that are important for you,
that make sense for your application.

00:17:33.220 --> 00:17:38.300
And so looking at all these pieces again,
we have request, response, connection,

00:17:38.300 --> 00:17:40.300
and the delegate callbacks.

00:17:40.410 --> 00:17:41.260
Let me just go back again.

00:17:41.520 --> 00:17:42.780
These are very, very important.

00:17:42.780 --> 00:17:50.690
Again, the important building blocks,
you'll be seeing them again and again

00:17:50.690 --> 00:17:50.690
throughout the API when you look at it,
and then certainly for the rest

00:17:50.690 --> 00:17:50.690
of the time during this talk.

00:17:51.320 --> 00:17:57.710
Here's a small example just to show you,
again, the level at which you would come

00:17:57.710 --> 00:18:01.570
into this API to go and do some of
the work that it knows how to do.

00:18:01.730 --> 00:18:04.840
So you have maybe a custom
method in your program,

00:18:04.840 --> 00:18:10.840
load URL, you have an NSURL and create a
request with it and then create

00:18:10.840 --> 00:18:12.400
a connection with that request.

00:18:12.510 --> 00:18:16.000
And that load starts automatically
someplace else in your program.

00:18:16.060 --> 00:18:17.570
Implement a couple delegate callbacks.

00:18:17.820 --> 00:18:21.770
And this is all you need to
do to start using this API.

00:18:21.850 --> 00:18:24.100
Again, it gives you that nice
level where you have a URL,

00:18:24.100 --> 00:18:27.020
you get the data back,
and you're moving on to the other

00:18:27.020 --> 00:18:31.710
parts of your code that is really
probably more interesting to you than

00:18:31.870 --> 00:18:33.750
doing the actual loading of data.

00:18:33.910 --> 00:18:36.760
And so I'd like to do
a little bit of a demo.

00:18:47.160 --> 00:18:56.500
I could tell you about the demo,
but it wouldn't be nearly as interesting.

00:18:56.500 --> 00:18:56.500
Did the machine go to sleep perhaps?

00:18:56.500 --> 00:18:56.500
Yes?

00:18:56.500 --> 00:18:56.500
Okay.

00:18:56.500 --> 00:18:56.500
Ah, there we go.

00:18:56.500 --> 00:18:56.500
Okay.

00:18:58.660 --> 00:19:01.360
Okay, I have a little app here
called Visible Loader.

00:19:01.360 --> 00:19:05.700
Let's just run it.

00:19:06.470 --> 00:19:08.680
What you'll see here is I have a URL bar.

00:19:08.680 --> 00:19:10.930
And I'm just going to poke
this start load button.

00:19:10.940 --> 00:19:12.520
And you see some things happening.

00:19:12.630 --> 00:19:13.750
Well, what is it that happened?

00:19:13.760 --> 00:19:18.880
I've got this www.apple.com
URL in the address bar.

00:19:18.880 --> 00:19:21.200
And I just loaded that URL.

00:19:21.200 --> 00:19:24.520
The visible evidence of
that is in this window,

00:19:24.520 --> 00:19:26.040
which are these.

00:19:26.130 --> 00:19:28.210
These are the delegate
callbacks that I got.

00:19:28.240 --> 00:19:31.720
That's what this application
does with its delegate callbacks,

00:19:31.720 --> 00:19:33.360
is it logs them in this window.

00:19:33.810 --> 00:19:38.970
And so you can see I can go around and
browse these delegate callbacks and

00:19:39.200 --> 00:19:42.380
get some nice information about them.

00:19:42.380 --> 00:19:48.070
Let's kind of just hop back
to the code for a second,

00:19:48.070 --> 00:19:49.340
if I can.

00:19:49.340 --> 00:19:50.490
Okay.

00:19:55.430 --> 00:19:58.290
I seem to have lost my aliases,
so you'll have to forgive me.

00:19:58.290 --> 00:20:01.220
Let me just quit this for a
second and see if they come back.

00:20:01.260 --> 00:20:03.480
No.

00:20:03.510 --> 00:20:05.340
I had a bunch of aliases
that I seem to have lost.

00:20:05.450 --> 00:20:07.680
Well, there we go.

00:20:07.680 --> 00:20:07.680
Oh, there they are.

00:20:10.690 --> 00:20:15.720
And so here are the delegate callbacks
that this application implements.

00:20:15.720 --> 00:20:20.440
And you'll see in just one of the--
a simple example is I received data,

00:20:20.520 --> 00:20:25.560
and all that I did in this application
was I updated the progress indicator,

00:20:25.560 --> 00:20:30.490
and I put a little log message in the
window so that we can go and look at it.

00:20:30.670 --> 00:20:34.070
Now, naturally,
in your application-- in Safari,

00:20:34.320 --> 00:20:37.400
for example,
what we do is we take that data and we

00:20:37.400 --> 00:20:38.110
feed it off to the HTML rendering engine.

00:20:38.290 --> 00:20:42.340
And so this is the way, again,
that you begin to hook in

00:20:42.810 --> 00:20:44.910
your code into this new API.

00:20:46.040 --> 00:20:50.030
And again, it just illustrates that
this API is not a black box.

00:20:50.150 --> 00:20:52.100
It gives you a good amount of visibility.

00:20:52.100 --> 00:20:54.700
In other words,
you just don't throw a URL over the wall,

00:20:54.700 --> 00:20:56.260
get some data back, and that's it.

00:20:56.670 --> 00:21:03.920
Try to give you a good amount of control
over what's happening as it's going on.

00:21:04.050 --> 00:21:04.240
OK.

00:21:04.710 --> 00:21:06.950
Go back to the slides, please.

00:21:10.560 --> 00:21:14.400
So again, those four pieces,
been over them and over them.

00:21:14.490 --> 00:21:17.040
Again, the basic building
blocks for URL loading,

00:21:17.110 --> 00:21:20.500
the I/O is asynchronous,
and there are a bunch of these optional

00:21:20.610 --> 00:21:23.450
delegate callbacks that you get.

00:21:24.050 --> 00:21:24.270
OK.

00:21:24.940 --> 00:21:29.740
So now, using this as a foundation,
I'm going to go on and talk

00:21:29.740 --> 00:21:34.900
about another piece of the API,
which is URL file transfers.

00:21:34.900 --> 00:21:34.900
Excuse me.

00:21:38.570 --> 00:21:41.230
And so this is very,
very similar to URL loading.

00:21:41.340 --> 00:21:45.000
However, it gives you some nice features
for downloading content instead

00:21:45.000 --> 00:21:48.000
of just like to maybe the innards
of your program or something,

00:21:48.000 --> 00:21:50.210
just going to download
that URL onto disk.

00:21:50.290 --> 00:21:52.810
And there are a couple
extra delegate callbacks,

00:21:52.880 --> 00:21:54.920
you might imagine, to help you do that.

00:21:55.000 --> 00:21:56.670
And uploads are coming soon.

00:21:58.560 --> 00:22:01.440
And so we take the same
picture that we had before,

00:22:01.460 --> 00:22:04.800
download comes into the middle there
and takes the place of connection.

00:22:04.870 --> 00:22:06.460
But everything else stays the same.

00:22:06.490 --> 00:22:10.720
We've got this class nsurl-download to
go into the place of nsurl-connection.

00:22:10.740 --> 00:22:14.480
But really, the way that the program
works is really very,

00:22:14.530 --> 00:22:15.020
very similar.

00:22:15.020 --> 00:22:17.700
And I have another brief demo of that.

00:22:17.910 --> 00:22:23.840
What I wanted to do for
this is illustrate a Carbon.

00:22:24.070 --> 00:22:25.510
A Carbon example.

00:22:25.800 --> 00:22:30.370
And so I'm going to run this.

00:22:31.450 --> 00:22:34.620
You'll see that-- I'm going to go HTTP.

00:22:34.660 --> 00:22:36.400
I'm single-threaded
when it comes to typing,

00:22:36.440 --> 00:22:38.280
so you'll have to excuse me.

00:22:38.280 --> 00:22:41.240
Mac.com and download.

00:22:41.240 --> 00:22:43.920
And you'll see I'll get a little prompt.

00:22:43.960 --> 00:22:47.300
And probably just probably on
the desktop would be great.

00:22:47.400 --> 00:22:49.210
So go and do this little download.

00:22:49.430 --> 00:22:50.780
And you see I've got the file there.

00:22:50.850 --> 00:22:54.490
And so again, to illustrate,
we saw the sheet come down.

00:22:54.620 --> 00:23:00.390
This is a Carbon program,
as I can show you.

00:23:03.790 --> 00:23:06.380
There's a slightly
modified version of this.

00:23:06.460 --> 00:23:08.980
It's actually an unhacked-up version,
is actually what it is,

00:23:09.060 --> 00:23:12.600
which is going to be
in the developer STK.

00:23:12.670 --> 00:23:15.590
And you'll see that, again,
it's just a bunch of delegate

00:23:15.690 --> 00:23:19.100
callbacks-- actually a few more than
the other program that we looked at.

00:23:19.170 --> 00:23:25.010
And again,
it gives you a good amount of control.

00:23:25.310 --> 00:23:28.970
Decide destination with suggested
file name is the hook that we

00:23:28.970 --> 00:23:30.270
used to drop that sheet down.

00:23:30.560 --> 00:23:32.280
So again,
you get a good amount of control

00:23:32.280 --> 00:23:35.420
of things as they're going on.

00:23:35.460 --> 00:23:38.940
And then, as you can see down here,
this is a little C++ code.

00:23:38.990 --> 00:23:41.100
So this is an objective C++ file.

00:23:41.100 --> 00:23:44.630
And it's a little indication of
the kind of glue that you'd have

00:23:44.630 --> 00:23:49.120
to write to get from your C,
C++ code over to where

00:23:49.150 --> 00:23:51.950
you can use this API.

00:23:53.980 --> 00:23:55.540
Okay.

00:23:55.670 --> 00:23:56.260
Good.

00:23:56.330 --> 00:23:56.790
I'm going to clean.

00:23:56.840 --> 00:23:58.680
My mommy always told me
to clean up after myself,

00:23:58.820 --> 00:24:00.050
so there we go.

00:24:00.180 --> 00:24:00.890
Okay, good.

00:24:01.240 --> 00:24:06.820
So if we can go back to the slides,
please.

00:24:06.820 --> 00:24:06.820
Yes, demo.

00:24:07.790 --> 00:24:11.480
And so here, seen this picture before,
these are the basic,

00:24:11.480 --> 00:24:15.340
basic building blocks of the API,
loading, file transfers,

00:24:15.560 --> 00:24:17.180
and delegate callbacks.

00:24:17.300 --> 00:24:20.760
So now I'm going to go on and
talk about yet another piece,

00:24:20.820 --> 00:24:22.340
content caching.

00:24:22.640 --> 00:24:23.500
Well, what is this for?

00:24:23.500 --> 00:24:26.940
Well, after we download a URL,
we store the content locally.

00:24:26.940 --> 00:24:28.340
I don't think this should
be news to any of you.

00:24:28.340 --> 00:24:32.630
Makes future requests for
the same URL go faster.

00:24:32.970 --> 00:24:36.490
Now, the interesting part, I think,
about this portion of the API is

00:24:36.490 --> 00:24:38.290
that it just works automatically.

00:24:38.300 --> 00:24:39.500
You don't have to do anything.

00:24:39.500 --> 00:24:42.380
You don't have to call a method
or set a flag or anything.

00:24:42.420 --> 00:24:43.320
Well, I want caching.

00:24:43.390 --> 00:24:45.800
No, it's just going to happen
for you automatically.

00:24:46.070 --> 00:24:48.330
It's going to go faster if it can.

00:24:48.340 --> 00:24:50.120
If it can help you to go faster, it will.

00:24:50.240 --> 00:24:54.350
But I should also point out that there
is an API to provide direct access to

00:24:54.350 --> 00:24:58.060
the cache and its contents if you wish.

00:24:59.110 --> 00:25:02.300
And some of the features
of this portion of the API,

00:25:02.300 --> 00:25:09.100
first there is I like to think that this
API presents a good HTTP cache smarts.

00:25:09.220 --> 00:25:14.000
There's a lot of text in the
RFC for HTTP about caching.

00:25:14.100 --> 00:25:16.420
And we've implemented that.

00:25:16.460 --> 00:25:19.180
We've gone through,
done the work to implement that here.

00:25:19.180 --> 00:25:22.880
And so that when you're interacting
with this API to go and get

00:25:23.000 --> 00:25:26.660
content from HTTP servers,
it's going to work the way that

00:25:26.660 --> 00:25:29.000
you want with regard to caching.

00:25:29.800 --> 00:25:32.140
And so, I mean,
that winds up being a bunch of

00:25:32.140 --> 00:25:33.510
work that you don't have to do.

00:25:33.530 --> 00:25:35.940
And the benefit is that you'll
get the correct combination

00:25:35.940 --> 00:25:38.720
of correctness and speed.

00:25:39.420 --> 00:25:43.790
Another big addition to
this API is disk caching,

00:25:43.790 --> 00:25:48.070
which is, I think,
a very nice feature so that your

00:25:48.070 --> 00:25:52.800
cache will be persistent across
multiple runs of your application.

00:25:52.870 --> 00:25:54.690
And then there's some other things.

00:25:54.800 --> 00:25:57.400
Configurable policies for request time,
like I said before,

00:25:57.400 --> 00:25:59.810
bypass the cache is perhaps an option.

00:26:00.150 --> 00:26:04.700
There's also some other policies,
which I'll talk about in a little bit.

00:26:04.720 --> 00:26:07.360
And then there's, as you might imagine,
a delegate callback for response

00:26:07.360 --> 00:26:09.700
time when things are going to
get written into the cache.

00:26:09.740 --> 00:26:12.420
Now, unlike the APIs that
I talked about before,

00:26:12.420 --> 00:26:16.070
request, response, et cetera,
you need to ask yourself, well,

00:26:16.140 --> 00:26:20.000
is this a portion of the
API that I really need to use?

00:26:20.050 --> 00:26:23.800
And, well, I would answer that by saying,
well, if you want the cache to

00:26:23.800 --> 00:26:26.090
work in the background,
if you want it to help you

00:26:26.090 --> 00:26:28.880
make your program go faster,
but you don't really want to

00:26:28.880 --> 00:26:31.100
know about the details so much,
you're not going to need

00:26:31.100 --> 00:26:32.300
this portion of the API.

00:26:32.300 --> 00:26:33.800
Again, it just works automatically.

00:26:33.800 --> 00:26:34.530
And you'll get the benefit.

00:26:34.620 --> 00:26:36.600
You'll get the benefits
without having to do any work.

00:26:36.640 --> 00:26:39.210
However,
you'll need this API if you want, say,

00:26:39.460 --> 00:26:43.140
custom cache policies for
different loads or even,

00:26:43.140 --> 00:26:47.200
surely, direct access to the cache.

00:26:47.210 --> 00:26:49.090
You'll need this API.

00:26:50.730 --> 00:26:54.020
And so here are the building blocks
for this part of the API cache,

00:26:54.020 --> 00:26:57.490
cache response, and cache policies.

00:26:57.560 --> 00:26:58.540
Let's just go through that.

00:26:58.610 --> 00:27:01.790
The cache is actually
this single concept,

00:27:02.050 --> 00:27:07.100
but it turns out to be a stack
of memory cache and disk cache.

00:27:07.400 --> 00:27:09.100
You don't get to see
them really separately.

00:27:09.100 --> 00:27:12.460
There are actually some API methods
which will operate on one or the other.

00:27:12.510 --> 00:27:14.620
However,
when you ask the cache for something,

00:27:14.700 --> 00:27:18.620
there's no way for us to even
report to you through the API,

00:27:18.690 --> 00:27:20.660
"Oh, this came from memory.

00:27:20.660 --> 00:27:22.420
This came from disk." Okay?

00:27:22.420 --> 00:27:24.200
But again, it works transparently.

00:27:24.220 --> 00:27:27.020
If you're using just the
request response API,

00:27:27.020 --> 00:27:30.700
you won't be involved in
interactions with the cache.

00:27:30.700 --> 00:27:33.200
As you might imagine,
it will look in memory first

00:27:33.200 --> 00:27:35.340
since if it's in memory,
it can be returned to

00:27:35.340 --> 00:27:38.670
your program much faster,
and then look on disk,

00:27:38.670 --> 00:27:42.180
which naturally has much,
much more storage to

00:27:42.180 --> 00:27:44.000
look for information.

00:27:44.270 --> 00:27:49.100
Now, I should say that there is--you can
configure the sizes of these caches

00:27:49.100 --> 00:27:53.240
and you can configure where the disk
cache will live in case you want to,

00:27:53.320 --> 00:27:57.820
say, ensure that it lives on a local
volume or something like that.

00:27:57.890 --> 00:28:00.940
And again, of course, it can be accessed
directly through the API,

00:28:00.960 --> 00:28:04.620
and we have a class for this, NSURLCache.

00:28:04.690 --> 00:28:05.530
Cache response.

00:28:05.740 --> 00:28:09.580
A cache response stores the
URL data and the metadata.

00:28:09.840 --> 00:28:11.680
And so it wraps in NSURL response.

00:28:11.900 --> 00:28:13.100
It wraps in NSData.

00:28:13.430 --> 00:28:17.130
And when it comes time to disk caching,
that object is just serialized

00:28:17.130 --> 00:28:18.660
right out to disk in a file.

00:28:18.660 --> 00:28:22.540
You may have looked in your
Safari cache on disk and you see a

00:28:22.540 --> 00:28:25.020
bunch of files with cryptic names.

00:28:25.020 --> 00:28:28.850
Well, what those are serialized
and cached responses.

00:28:29.110 --> 00:28:34.180
Actually, technically, they're serialized
NSCached URL responses.

00:28:35.840 --> 00:28:36.070
OK?

00:28:36.350 --> 00:28:38.590
And then the last portion of
this API is cache policies,

00:28:38.690 --> 00:28:42.510
controls whether the cache data
is returned for a URL request.

00:28:42.830 --> 00:28:44.880
And we have several policies here.

00:28:44.890 --> 00:28:48.870
You get those good HTTP cache smarts
that I mentioned before by default,

00:28:48.920 --> 00:28:50.520
when you're using HTTP.

00:28:50.690 --> 00:28:53.060
But you can also say, well,
bypass the cache,

00:28:53.060 --> 00:28:55.170
in case your application
may have a reload button.

00:28:55.380 --> 00:28:57.130
Very, very simply,
simple for you to do that.

00:28:57.400 --> 00:28:59.160
And then there's also
some offline behavior.

00:28:59.160 --> 00:29:02.100
If you know that you're not connected,
you can specify, look,

00:29:02.220 --> 00:29:05.660
give me this data from the cache,
even if it's expired, if it's stale.

00:29:05.670 --> 00:29:09.030
I just want it because I can't
go and refresh it right now.

00:29:09.260 --> 00:29:13.450
And so this is also very useful
for some other applications.

00:29:13.610 --> 00:29:16.970
We have an enum for those constants.

00:29:17.000 --> 00:29:19.480
And so I just wanted to show
you a very brief example of how

00:29:19.480 --> 00:29:21.840
to access the cache directly.

00:29:21.880 --> 00:29:23.000
Get the shared URL cache.

00:29:23.080 --> 00:29:24.950
You have a string representing a URL.

00:29:25.240 --> 00:29:26.600
Create a URL with it.

00:29:26.870 --> 00:29:28.350
Create a request with that URL.

00:29:28.600 --> 00:29:33.940
And then you can just go and ask this
shared cache object for-- for the

00:29:34.240 --> 00:29:36.740
object that would map to that request.

00:29:36.760 --> 00:29:38.700
And then you can just get
an NSData back from that,

00:29:38.700 --> 00:29:43.530
and then go and do something interesting
with the data once you get it.

00:29:43.710 --> 00:29:48.470
And so, just with a few lines of code,
you can take advantage of

00:29:48.540 --> 00:29:51.000
the direct access cache API.

00:29:51.130 --> 00:29:53.580
And so, I'd like to do a demo.

00:30:02.500 --> 00:30:10.170
: I have a sleepy computer today,
it looks like.

00:30:10.170 --> 00:30:10.170
Could I get a demo?

00:30:10.170 --> 00:30:10.170
Thank you.

00:30:11.850 --> 00:30:18.510
And so, here's a little app I call
the Disk Cache Inspector.

00:30:19.860 --> 00:30:24.110
And what this does is it's gone
through and it's looked at,

00:30:24.110 --> 00:30:28.400
provided a list of all of the
files in the Safari cache.

00:30:28.400 --> 00:30:29.200
And so here they are.

00:30:29.200 --> 00:30:31.900
And then we can do some
interesting things with it.

00:30:31.900 --> 00:30:33.700
I think they're interesting at least.

00:30:33.750 --> 00:30:38.850
Is that we can go and give a view
of what the content is in the cache.

00:30:38.850 --> 00:30:40.610
And not only images.

00:30:40.610 --> 00:30:44.110
You could see that in
the case of an HTML page,

00:30:44.110 --> 00:30:46.410
I've actually got the HTML.

00:30:46.410 --> 00:30:49.130
This actually is what is in the cache.

00:30:50.680 --> 00:30:55.670
And so what you can do with this program
is you can SU to root and see what

00:30:55.670 --> 00:30:59.810
other people have in their disk caches,
which is kind of--

00:31:01.500 --> 00:31:10.960
: Okay,
and so there are some other things here,

00:31:11.160 --> 00:31:13.330
too,
which I think are pretty interesting.

00:31:13.330 --> 00:31:13.330
Here's... Let's see if I can do this.

00:31:13.330 --> 00:31:13.330
Ah, yes.

00:31:13.550 --> 00:31:17.940
Here's some of, actually much of what
is in an NSURL response.

00:31:18.050 --> 00:31:22.340
You see there's HTTP-specific
information in there.

00:31:22.340 --> 00:31:23.960
That's what's in the cache as well.

00:31:23.960 --> 00:31:31.250
And then there's also quite a
bit of information that comes

00:31:31.290 --> 00:31:36.620
into use to implement this good
cache smarts that I mentioned.

00:31:36.620 --> 00:31:40.110
So a lot of this information comes into
account when you send out a request,

00:31:40.110 --> 00:31:43.010
the cache is consulted,
and the engine has to decide,

00:31:43.020 --> 00:31:45.790
am I going to use this cache
data for this request or not?

00:31:45.860 --> 00:31:50.480
Or am I going to go out and
reload from the network,

00:31:50.500 --> 00:31:54.740
or really from the network file
URLs typically aren't cached.

00:31:58.100 --> 00:32:20.500
[Transcript missing]

00:32:27.200 --> 00:32:30.910
Okay, just to summarize, again,
we've got cache policies, cache,

00:32:30.910 --> 00:32:32.200
cache response.

00:32:32.200 --> 00:32:36.120
The cache stores URLs locally,
makes things go faster if it can.

00:32:36.190 --> 00:32:38.650
And again,
it has this nice feature where it'll

00:32:38.650 --> 00:32:40.790
just work automatically if it can.

00:32:41.620 --> 00:32:46.160
And so fitting this in to the
rest of the pieces of the puzzle,

00:32:46.160 --> 00:32:48.140
we'll be filling those in.

00:32:48.530 --> 00:32:53.350
And so we've got cache
fits in right there.

00:32:53.640 --> 00:32:56.460
And so going on to the next piece,
HTTP cookies.

00:32:56.460 --> 00:32:59.620
I think probably most of you,
if not all of you, know what a cookie is.

00:32:59.710 --> 00:33:02.240
Well, when you go out to a website,
it'll send you back a small

00:33:02.240 --> 00:33:05.200
packet of information that then
when you go back to that website,

00:33:05.200 --> 00:33:09.560
you'll send back that little packet
of information back to that server

00:33:09.560 --> 00:33:11.350
every other time you access it.

00:33:11.390 --> 00:33:12.480
in the future.

00:33:12.730 --> 00:33:14.200
And so--

00:33:14.500 --> 00:33:16.470
This API enables a lot
of e-commerce websites.

00:33:16.660 --> 00:33:19.180
Website logins rely on this a lot.

00:33:19.520 --> 00:33:22.170
Another great part, I think,
of this API is that, again,

00:33:22.260 --> 00:33:24.100
it just works for you automatically.

00:33:24.240 --> 00:33:27.320
So we've got a lot of cookie
machinery that'll just kick

00:33:27.320 --> 00:33:28.900
in whenever you do HTTP.

00:33:28.900 --> 00:33:32.790
If you need cookies,
they'll just be applied for you.

00:33:32.970 --> 00:33:38.200
But again,
this API provides you direct access

00:33:38.200 --> 00:33:38.200
if you want some more control.

00:33:38.670 --> 00:33:45.000
And so the features of this API,
we've got persistent cookie storage so

00:33:45.000 --> 00:33:48.750
that you have your cookie file on disk.

00:33:48.750 --> 00:33:54.470
Another interesting part of this is that
the cookie storage is shared per user.

00:33:54.700 --> 00:33:57.070
So each user will have
their own cookie file,

00:33:57.150 --> 00:34:00.800
but it's shared among all
applications that that user will use.

00:34:00.890 --> 00:34:05.090
And so if they get some cookie data from,
say, Safari, they'll be able to use that

00:34:05.090 --> 00:34:08.600
cookie data in Sherlock,
and you won't have to do anything.

00:34:09.330 --> 00:34:12.750
And so but additionally, because cookies,
there are some security,

00:34:12.750 --> 00:34:16.030
some privacy concerns,
we do have configurable except policies.

00:34:16.150 --> 00:34:18.560
And then another piece that
we worked very hard on in the

00:34:18.560 --> 00:34:23.590
cookie API was to interoperate,
real world compliance there,

00:34:23.660 --> 00:34:26.120
to make sure that when
sites send us cookies,

00:34:26.220 --> 00:34:28.640
that we can parse them and
read them and use them as the

00:34:29.170 --> 00:34:31.090
website developer intended.

00:34:31.150 --> 00:34:32.780
There really isn't a good standard here.

00:34:32.780 --> 00:34:35.010
It really is just a law of the jungle.

00:34:35.350 --> 00:34:39.000
And we've really,
really tried to make sure that we

00:34:39.000 --> 00:34:43.220
have a good interoperability with what
you'll find out there on the internet.

00:34:43.300 --> 00:34:46.270
And so again,
do you need this portion of the API?

00:34:46.580 --> 00:34:48.280
Well,
if you want cookies in the background

00:34:48.280 --> 00:34:50.040
without worrying about the details,
you don't.

00:34:50.130 --> 00:34:53.930
You can just sort of let this work
for you and do its good work without

00:34:53.930 --> 00:34:55.400
having to delve into the details.

00:34:55.460 --> 00:34:59.200
However, if you want to control cookie
except policies or get direct

00:34:59.200 --> 00:35:02.680
access to the cookie store,
then this is a portion of the API you'll

00:35:02.680 --> 00:35:04.470
need to learn a bit more about.

00:35:04.630 --> 00:35:04.880
Cookie.

00:35:04.880 --> 00:35:05.260
Cookie store.

00:35:05.330 --> 00:35:05.970
Cookie storage.

00:35:06.100 --> 00:35:08.040
Cookie except policies.

00:35:08.060 --> 00:35:11.090
These are the three pieces of this API.

00:35:11.360 --> 00:35:14.900
And so a cookie, as I just said,
this little nugget of information

00:35:14.900 --> 00:35:18.210
that is sort of exchanged between
your program and a server,

00:35:18.400 --> 00:35:20.940
these are created automatically
and sent back automatically.

00:35:20.940 --> 00:35:23.140
And again, there's extensive rule
checking for these.

00:35:23.150 --> 00:35:24.340
NSHTTP cookie.

00:35:24.690 --> 00:35:27.320
We have a class in the API for this.

00:35:27.550 --> 00:35:28.540
Cookie storage.

00:35:28.560 --> 00:35:32.760
Cookies are shared on disk, as I said,
and are shared among processes.

00:35:32.790 --> 00:35:34.720
This class will manage that cookie file.

00:35:34.880 --> 00:35:38.540
It will actually do the work of
parsing out this cookie data.

00:35:38.580 --> 00:35:42.450
And then this is probably where
you're going to come in and inspect,

00:35:42.450 --> 00:35:46.780
set, remove cookies as you
wish in your application.

00:35:46.800 --> 00:35:47.980
We have a class for this.

00:35:48.070 --> 00:35:50.450
NSHTTP storage.

00:35:50.610 --> 00:35:52.850
And cookie except policy.

00:35:52.900 --> 00:35:55.040
Accepting cookies is
governed by this setting.

00:35:55.040 --> 00:35:56.740
There's actually three
different settings.

00:35:56.760 --> 00:35:58.460
Always accept, always reject.

00:35:58.500 --> 00:36:00.900
And then accept it only
from the same host.

00:36:00.930 --> 00:36:01.920
And this happens very often.

00:36:01.920 --> 00:36:03.900
You go to site A.

00:36:04.300 --> 00:36:08.600
But-- Add server site wants to set a
cookie on you when you go to that site.

00:36:08.620 --> 00:36:11.120
You can set it so that that
cookie would get rejected.

00:36:11.170 --> 00:36:17.010
But any cookies from the site that you
navigated to will actually get accepted.

00:36:17.060 --> 00:36:20.330
And so we have a set of
constants for this as well.

00:36:21.220 --> 00:36:23.880
Now in Safari,
you've probably seen this window here.

00:36:23.930 --> 00:36:26.660
It may be a little bit hard to see,
but the second sort of

00:36:26.660 --> 00:36:30.040
checkboxes on the top,
set of radio buttons, well,

00:36:30.400 --> 00:36:33.660
that's the cookie accept
setting dialog in Safari.

00:36:33.660 --> 00:36:36.960
It's going to be in the security pane.

00:36:37.110 --> 00:36:41.390
And when the user goes and checks that,
you can see here's just a quick

00:36:41.800 --> 00:36:46.990
example of just a few lines of
code that you'll need to go in and

00:36:46.990 --> 00:36:48.410
actually implement that setting.

00:36:48.420 --> 00:36:51.320
This is just actually really
just copied right out of Safari,

00:36:51.320 --> 00:36:54.860
just two other case statements
like the one that was listed there,

00:36:54.860 --> 00:36:55.940
and you're done.

00:36:55.980 --> 00:37:00.080
So again, there's sort of the economy of
coding that you're going to need

00:37:00.080 --> 00:37:03.780
to do to use this API and get the
features out of what's in there,

00:37:04.040 --> 00:37:06.980
and we've really,
really concentrated on that.

00:37:07.200 --> 00:37:09.860
And so again,
here are the pieces of this API.

00:37:10.000 --> 00:37:13.240
Cookies help with website logins,
e-commerce,

00:37:13.240 --> 00:37:18.150
and are shared among processes and
just work for you automatically.

00:37:18.250 --> 00:37:22.020
And so we drop that
piece into the puzzle.

00:37:22.120 --> 00:37:24.370
And so moving on, authentication.

00:37:25.940 --> 00:37:29.840
Authentication, naturally proving your
identity to a software system.

00:37:29.840 --> 00:37:33.510
In most cases, for websites,
this means this sheet will drop

00:37:33.600 --> 00:37:37.670
down and you're going to need to
type in your username and password.

00:37:37.790 --> 00:37:40.360
I'm sure you've probably, many of you,
most of you have seen

00:37:40.360 --> 00:37:41.600
this dialogue in Safari.

00:37:41.600 --> 00:37:44.810
And so this portion of the
API provides your hooks for a

00:37:44.990 --> 00:37:47.100
custom UI like you see in Safari.

00:37:47.100 --> 00:37:49.800
However, point out that there are
actually no GUI dependencies.

00:37:49.800 --> 00:37:52.220
Again, there are no WebKit dependencies.

00:37:52.260 --> 00:37:53.760
There's no Cocoa.

00:37:53.760 --> 00:37:54.900
There's no AppKit dependencies.

00:37:54.900 --> 00:37:58.590
In this API, so we had to sort of work it
out so that that would work,

00:37:58.650 --> 00:38:00.140
so that would happen.

00:38:00.140 --> 00:38:03.980
And there's hooks for providing
custom authentication schemes,

00:38:04.010 --> 00:38:07.390
and there's AskOnce capability
integration with Keychain.

00:38:09.520 --> 00:38:12.280
And so, if you're just interested in
loading URLs through the WebKit API,

00:38:12.400 --> 00:38:14.240
you don't maybe even want
to come down to this level.

00:38:14.240 --> 00:38:17.830
Well naturally,
this portion of the API won't be for you,

00:38:17.830 --> 00:38:20.870
or if you don't need to
access protected data.

00:38:21.120 --> 00:38:24.280
However, if you do want to see that
sheet drop down or have

00:38:24.390 --> 00:38:27.660
functionality similar to that,
you're going to need to learn

00:38:27.660 --> 00:38:30.070
about this portion of the API,
the authentication piece,

00:38:30.210 --> 00:38:33.620
or if you want to develop
custom user interfaces.

00:38:33.620 --> 00:38:35.450
These are the pieces, mercifully.

00:38:35.500 --> 00:38:38.780
I'm not going to go and talk
through each one individually.

00:38:39.010 --> 00:38:43.720
Just these are the pieces that we have
to represent usernames and passwords,

00:38:43.800 --> 00:38:48.960
places where you want to authenticate to,
individual authentication

00:38:48.960 --> 00:38:50.360
challenges and so forth.

00:38:50.440 --> 00:38:54.720
They're all in this portion of the API.

00:38:54.820 --> 00:38:57.330
And now I'd like to do a brief demo.

00:39:11.810 --> 00:39:15.450
So what I've done here is I just went
out the other evening and I found this

00:39:15.840 --> 00:39:20.900
site out on the net that does a lot of,
provides a lot of test pages

00:39:21.050 --> 00:39:22.820
for HTTP authentication.

00:39:23.210 --> 00:39:26.100
So I'm just going to go up on this very,
very first one and get

00:39:26.100 --> 00:39:27.500
the sheet dropping down.

00:39:27.500 --> 00:39:30.930
This is the authentication
API in Safari being used.

00:39:31.010 --> 00:39:33.880
I'm just going to log into
this site and you'll see that

00:39:33.880 --> 00:39:36.550
I get access only to rows,
basic auth.

00:39:36.600 --> 00:39:38.840
It's just a little test page, okay?

00:39:39.080 --> 00:39:42.050
And so you see Safari using this API.

00:39:42.400 --> 00:39:46.580
But then I'm going to do another
example like going to the same site.

00:39:46.620 --> 00:39:50.400
I like to call this
"That 70s Demo." You see?

00:39:50.570 --> 00:39:53.440
Sort of like the, I did the nice amber,
you know?

00:39:53.440 --> 00:39:55.240
I couldn't, it was amber or green.

00:39:55.240 --> 00:39:56.090
I couldn't decide.

00:39:56.150 --> 00:40:01.670
Well, anyway, this is an example of
using authentication from

00:40:01.750 --> 00:40:03.400
a command line application.

00:40:03.670 --> 00:40:06.600
So you see here I didn't even
take the trouble of doing,

00:40:06.600 --> 00:40:08.380
hiding the password.

00:40:08.430 --> 00:40:10.840
But you can see, again,
you just get the output printed

00:40:10.840 --> 00:40:14.040
to the terminal exactly the
same as showed up in Safari.

00:40:14.180 --> 00:40:16.500
Just showing that, again, this API has,
you can use it from

00:40:16.500 --> 00:40:17.790
command line applications.

00:40:17.800 --> 00:40:20.340
You don't need to be writing
a GUI program to get,

00:40:20.510 --> 00:40:22.990
to derive advantage from it.

00:40:27.630 --> 00:40:33.960
So with that, back to the slides, please.

00:40:34.000 --> 00:40:44.030
And so authentication, again,
providing access to protected data,

00:40:44.100 --> 00:40:48.910
ask once with the keychain,
and no GUI dependencies,

00:40:48.910 --> 00:40:48.910
as was illustrated.

00:40:48.910 --> 00:40:48.910
And so--and so--

00:40:49.500 --> 00:40:55.510
And so,
authentication fits in right there.

00:40:59.600 --> 00:41:01.250
Going into the next piece,
custom protocol.

00:41:01.360 --> 00:41:05.960
So let's say you have an
application and these protocols,

00:41:05.960 --> 00:41:10.570
HTTP, HTTPS, FTP, file and about,
don't suit you.

00:41:10.660 --> 00:41:12.940
You have Gopher,
you have some custom protocol that you

00:41:12.950 --> 00:41:14.760
want to implement in your application.

00:41:14.760 --> 00:41:19.910
Well, this will be the API that
you'd use to develop your own.

00:41:21.380 --> 00:41:24.350
And I think the really,
really strong part of this

00:41:24.350 --> 00:41:26.530
API is that there are no secrets.

00:41:26.560 --> 00:41:28.470
There's a very,
very clean interface to the

00:41:28.470 --> 00:41:29.970
other parts of the subsystem.

00:41:29.980 --> 00:41:33.600
It winds up being the same interface
that those built-in protocols that

00:41:33.600 --> 00:41:35.530
we actually wind up do providing.

00:41:35.610 --> 00:41:38.390
It's the same API that
those protocols use.

00:41:38.700 --> 00:41:43.050
Your protocols are peers to the
ones that ship on the system.

00:41:43.200 --> 00:41:44.760
I think that's a really,
really strong part.

00:41:44.760 --> 00:41:46.100
Well, naturally, do you need this API?

00:41:46.100 --> 00:41:48.290
Well, if you're not going to be
developing a custom protocol,

00:41:48.290 --> 00:41:48.780
you don't.

00:41:48.860 --> 00:41:51.110
And if you are, well, you do.

00:41:51.200 --> 00:41:55.120
And just two pieces here,
protocol and protocol client.

00:41:55.430 --> 00:41:56.900
This is what actually
does-- this is really,

00:41:56.980 --> 00:42:01.760
in some ways, the classes that implement
this protocol concept,

00:42:01.760 --> 00:42:04.960
they really wind up being
the engine of the API.

00:42:04.960 --> 00:42:08.300
It winds up doing the real work
to go out and load a URL in

00:42:08.300 --> 00:42:10.380
a protocol-specific fashion.

00:42:10.560 --> 00:42:14.400
Many, many times,
these map to a scheme like HTTP.

00:42:14.670 --> 00:42:17.390
And they really do work, in many ways,
like plug-ins.

00:42:17.460 --> 00:42:21.320
I mean, you can uninstall and reinstall,
actually,

00:42:21.320 --> 00:42:24.480
even while the application is running.

00:42:24.480 --> 00:42:27.880
And they just must be
registered in order to be used.

00:42:27.960 --> 00:42:32.130
And we have NSURL protocol is
the class for this in the API.

00:42:32.270 --> 00:42:35.460
And then we have protocol client,
which is the piece that provides the

00:42:35.500 --> 00:42:38.690
interface to the URL loading system.

00:42:38.700 --> 00:42:41.440
And in some ways, you could think,
the whole engine is over here,

00:42:41.440 --> 00:42:44.440
NSURL protocol instances are over here.

00:42:44.460 --> 00:42:49.770
And you use this protocol client
interface to talk back to the

00:42:49.770 --> 00:42:52.920
system from your protocol.

00:42:53.340 --> 00:42:54.840
And so there's no secret API.

00:42:54.840 --> 00:42:56.400
And there's this one-way communication.

00:42:56.440 --> 00:43:00.080
Once a protocol is created,
it's the responsibility of the protocol

00:43:00.080 --> 00:43:05.170
to drive the URL loading process and
tell the URL loading system about things

00:43:05.230 --> 00:43:10.480
that are happening in protocol-specific
things having to do with a load.

00:43:10.480 --> 00:43:14.390
URL protocol client is
the API piece for that.

00:43:14.530 --> 00:43:18.750
And so here's just a very,
very brief example of things that

00:43:18.750 --> 00:43:20.780
are in the protocol client interface.

00:43:21.010 --> 00:43:24.370
You'll notice it's actually--
these turns out-- and when you

00:43:24.370 --> 00:43:27.940
maybe get the SDK and you look,
you'll notice that these pieces

00:43:27.940 --> 00:43:31.070
are actually trying to be very,
very similar to what's in

00:43:31.200 --> 00:43:32.730
the delegate callbacks.

00:43:32.730 --> 00:43:37.260
Again, these protocols are actually doing
the work to drive the load of a URL.

00:43:37.260 --> 00:43:40.850
And so when interesting things happen,
they tell the system,

00:43:40.850 --> 00:43:42.330
and then the system goes
and tells you in your code.

00:43:42.880 --> 00:43:45.540
And then actually
implementing a protocol,

00:43:45.540 --> 00:43:47.490
you only need to do a few things.

00:43:47.660 --> 00:43:51.360
You need to implement a small
handful of methods to just go and

00:43:51.660 --> 00:43:56.110
implement your own protocol and have
it be a peer of all of the others.

00:43:56.570 --> 00:44:00.570
And as a matter of fact,
this is a snippet.

00:44:00.920 --> 00:44:05.020
It's a good majority of the code that's
actually in the About protocol in Safari.

00:44:05.280 --> 00:44:09.650
And I just highlight out just
a couple of lines to show that

00:44:09.920 --> 00:44:12.530
this is the protocol interface,
the About protocol,

00:44:12.590 --> 00:44:16.820
and it's driving of the
load back through to Safari.

00:44:17.100 --> 00:44:20.280
And you see About protocol never fails.

00:44:20.350 --> 00:44:24.380
It always succeeds,
did finish loading at the end.

00:44:24.490 --> 00:44:28.040
And so protocol client, protocol, again,
no secret APIs.

00:44:28.110 --> 00:44:29.130
Your protocols are peers.

00:44:29.200 --> 00:44:33.760
It's a very, very clean interface to
the rest of the system.

00:44:33.890 --> 00:44:35.200
And so dropping that.

00:44:35.200 --> 00:44:38.400
Dropping that piece in there.

00:44:38.400 --> 00:44:42.190
And so I'd like to do
just another brief demo.

00:44:46.570 --> 00:44:51.960
And I'd like to just point
out a feature in Safari,

00:44:51.960 --> 00:44:55.980
which I don't know if
all of you have seen,

00:44:56.020 --> 00:44:57.830
but this is the activity window.

00:44:58.090 --> 00:45:02.720
And although in a real program,
it's never quite as straightforward

00:45:02.720 --> 00:45:07.480
as we try to make it up here on stage,
but really what winds up happening

00:45:07.480 --> 00:45:12.160
in this activity window is these
are all of the URLs that you loaded.

00:45:12.160 --> 00:45:15.870
And really what winds up happening,
each entry in this list

00:45:16.400 --> 00:45:19.520
winds up there as a result of
one of these delegate callbacks

00:45:19.520 --> 00:45:21.300
from the URL loading system.

00:45:21.300 --> 00:45:25.120
That URL got loaded,
and eventually that winds up

00:45:25.120 --> 00:45:29.670
getting reported through the
user interface in Safari.

00:45:30.920 --> 00:45:34.550
And so this is just, again,
yet another example of how

00:45:34.650 --> 00:45:38.000
delegate callbacks are used.

00:45:38.000 --> 00:45:43.910
I'd like to do another
small demo here to--

00:45:46.160 --> 00:45:52.300
This is one I was not planning on doing,
but I must have spoken quickly.

00:45:52.600 --> 00:45:54.900
But this is kind of neat, I think.

00:45:55.010 --> 00:45:56.840
And so what I've actually
done is-- actually,

00:45:56.840 --> 00:45:58.600
now I have three versions of Safari.

00:45:58.760 --> 00:46:00.940
Let's just go with two
versions of Safari.

00:46:02.300 --> 00:46:09.490
And so what I'm going to do is
rearrange these windows here.

00:46:10.100 --> 00:46:15.310
And in both,
I'm going to show the cookie list.

00:46:16.270 --> 00:46:17.700
So that's the cookie
list for this window.

00:46:17.700 --> 00:46:19.970
And, right?

00:46:20.610 --> 00:46:24.890
And then the,
this is the cookie list for this window.

00:46:26.460 --> 00:46:29.200
And so what I'm going to do,
just to make it easier to see,

00:46:29.200 --> 00:46:33.040
I'm going to remove all of the
cookies from both applications.

00:46:33.040 --> 00:46:36.800
Now, what you've seen already is
that those two copies of Safari,

00:46:36.800 --> 00:46:41.400
two WebKit clients,
two NSURL Foundation API clients,

00:46:41.420 --> 00:46:44.060
they're cooperating on the cookie store.

00:46:44.060 --> 00:46:46.390
You remove the cookies from
one version of Safari and

00:46:46.640 --> 00:46:49.620
the other version of Safari,
its window just automatically

00:46:49.620 --> 00:46:53.720
updates with new information about
a change in the state of cookies.

00:46:54.180 --> 00:46:56.770
And so if I go pick one of
these and go back to a site

00:46:57.090 --> 00:46:59.910
where cookies get set again,
you'll see that as soon as

00:46:59.910 --> 00:47:02.820
I click in that other window,
it updates, redraws,

00:47:02.990 --> 00:47:06.540
and shows that cookies get
set in that window as well.

00:47:06.540 --> 00:47:09.060
So again,
an illustration of that cookie API and

00:47:09.420 --> 00:47:15.680
the cooperation between processes
running belonging to a single user.

00:47:24.310 --> 00:47:27.700
May I have the slides back, please?

00:47:27.930 --> 00:47:30.790
And so, to wrap up...

00:47:31.170 --> 00:47:33.660
This is a roadmap.

00:47:33.660 --> 00:47:37.230
Some of these conferences,
actually half of them, the first two,

00:47:37.280 --> 00:47:39.000
I see, have already happened.

00:47:39.250 --> 00:47:43.800
Please go back and review
on DVD the open source talk.

00:47:43.800 --> 00:47:47.440
We use a lot of open source
in WebKit and Safari.

00:47:47.440 --> 00:47:52.060
There's actually no open source,
it turns out, in this portion of the API.

00:47:52.060 --> 00:47:54.480
This is all implemented by Apple,
but if you're interested in

00:47:54.570 --> 00:47:57.640
Safari technology in general,
that's a talk you might be interested in.

00:47:57.960 --> 00:48:01.100
Safari technology and web standards talks
about if you're a website developer,

00:48:01.100 --> 00:48:05.460
you want to develop content that's
going to work well in Safari.

00:48:05.460 --> 00:48:08.830
If you're just interested in web
standards and Apple's implementation

00:48:08.830 --> 00:48:11.740
stance towards standards,
the second one.

00:48:12.380 --> 00:48:17.450
Advanced Foundation URL APIs, well,
that's this talk, so you saw it.

00:48:17.520 --> 00:48:18.690
That's all there is to see.

00:48:18.920 --> 00:48:21.830
And then tomorrow,
I really urge you to go to the,

00:48:21.830 --> 00:48:24.660
if you're interested
in Safari technology,

00:48:24.660 --> 00:48:27.410
go to that last one tomorrow at 9 a.m.

00:48:27.420 --> 00:48:28.720
Advanced WebKit APIs.

00:48:28.720 --> 00:48:31.520
If you've seen those demos of
wiring things up with WebKit,

00:48:31.770 --> 00:48:35.400
well, you really go down a step
lower and see a little bit more

00:48:35.400 --> 00:48:37.500
about what's under the hood.

00:48:39.520 --> 00:48:43.310
And then, yes,
another session tomorrow afternoon,

00:48:43.410 --> 00:48:47.400
Internet Technologies: Developing
Web Services Using Web Channels,

00:48:47.400 --> 00:48:51.090
some Sherlock technology,
Mac OS X networking APIs.

00:48:51.440 --> 00:48:54.470
Again, I mean,
if you saw those checks and Xs before,

00:48:54.510 --> 00:48:58.630
I mean, I think it's probably, you know,
if you're not familiar with the APIs,

00:48:58.630 --> 00:49:00.840
it's probably a pretty tough
choice for you to decide,

00:49:00.840 --> 00:49:04.020
"Which of these URL loading
APIs do I want to use?" Well,

00:49:04.070 --> 00:49:06.760
I think that session will give you
some more good information about that.

00:49:07.160 --> 00:49:10.510
And then tomorrow afternoon,
CF Network In-Depth will talk

00:49:10.730 --> 00:49:12.530
to you more about CF Network.

00:49:12.670 --> 00:49:16.410
And then I also encourage you
to come tomorrow at 10:30 to the

00:49:16.470 --> 00:49:19.360
feedback forum where-- I mean,
because you're going to have an

00:49:19.760 --> 00:49:21.110
opportunity now to ask some questions.

00:49:21.160 --> 00:49:25.160
But tomorrow you can, you know,
come and give us some more feedback

00:49:25.160 --> 00:49:29.230
about this API and networking as well.

00:49:29.700 --> 00:49:33.730
And if you think of something
now or if you have other

00:49:33.730 --> 00:49:36.920
feedback a little bit later,
John, if you have anything to add,

00:49:36.920 --> 00:49:36.920
please feel free to ask.

00:49:36.920 --> 00:49:39.120
John Galenzi,
the email address on the screen

00:49:39.120 --> 00:49:46.780
is the person to contact for more
information and to get further feedback.

00:49:47.340 --> 00:49:50.490
And so here's some other
information about these APIs.

00:49:50.600 --> 00:49:53.500
There are some, I think, some very,
very nice,

00:49:53.500 --> 00:49:57.850
the documentation people did a really,
really nice job going through and

00:49:57.850 --> 00:50:01.320
sort of cleaning up what we did
and documenting it in such a way

00:50:01.580 --> 00:50:04.240
that you folks can understand it,
hopefully.

00:50:04.340 --> 00:50:06.570
So I refer you to this documentation.

00:50:06.700 --> 00:50:09.550
And then really,
if you want to get into this API,

00:50:09.550 --> 00:50:12.350
you want to get into this
API and the WebKit API,

00:50:12.350 --> 00:50:16.370
I really urge you to go and start
working with this WebKit SDK.

00:50:16.480 --> 00:50:18.640
Again, I should probably--it's
been mentioned before,

00:50:18.640 --> 00:50:20.680
but just to make sure
that everyone knows,

00:50:20.820 --> 00:50:27.200
all the code that you need to do the
applications like I wrote here today and

00:50:27.200 --> 00:50:29.340
the ones that you've seen with WebKit,
if you have Panther,

00:50:29.550 --> 00:50:30.890
you have everything that you need.

00:50:31.180 --> 00:50:32.940
It's installed on the system.

00:50:33.030 --> 00:50:35.770
If you have a Jaguar system and
you've installed Safari 1.0,

00:50:35.770 --> 00:50:37.370
everything is there on the system.

00:50:37.380 --> 00:50:39.120
You have everything that you need.

00:50:39.120 --> 00:50:42.640
However, there's some, you know,
other examples and such that are

00:50:42.640 --> 00:50:44.680
really only going to be in the SDK.

00:50:44.680 --> 00:50:45.680
And so I still do urge you
to go out and look at that.

00:50:45.680 --> 00:50:46.780
urge you to go out and get it.